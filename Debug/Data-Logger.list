
Data-Logger.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00012294  080002a0  080002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000230  08012534  08012534  00022534  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08012764  08012764  000301cc  2**0
                  CONTENTS
  4 .ARM          00000008  08012764  08012764  00022764  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801276c  0801276c  000301cc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0801276c  0801276c  0002276c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08012770  08012770  00022770  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001cc  24000000  08012774  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000011a4  240001cc  08012940  000301cc  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  24001370  08012940  00031370  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  000301cc  2**0
                  CONTENTS, READONLY
 12 .debug_info   0003a0ca  00000000  00000000  000301fa  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000636a  00000000  00000000  0006a2c4  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001d80  00000000  00000000  00070630  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001b00  00000000  00000000  000723b0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0003f7f5  00000000  00000000  00073eb0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0001fae5  00000000  00000000  000b36a5  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0016f0d1  00000000  00000000  000d318a  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0024225b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000083bc  00000000  00000000  002422d8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	; (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	; (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	; (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	240001cc 	.word	0x240001cc
 80002bc:	00000000 	.word	0x00000000
 80002c0:	0801251c 	.word	0x0801251c

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	; (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	; (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	; (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	240001d0 	.word	0x240001d0
 80002dc:	0801251c 	.word	0x0801251c

080002e0 <strlen>:
 80002e0:	4603      	mov	r3, r0
 80002e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002e6:	2a00      	cmp	r2, #0
 80002e8:	d1fb      	bne.n	80002e2 <strlen+0x2>
 80002ea:	1a18      	subs	r0, r3, r0
 80002ec:	3801      	subs	r0, #1
 80002ee:	4770      	bx	lr

080002f0 <memchr>:
 80002f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002f4:	2a10      	cmp	r2, #16
 80002f6:	db2b      	blt.n	8000350 <memchr+0x60>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	d008      	beq.n	8000310 <memchr+0x20>
 80002fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000302:	3a01      	subs	r2, #1
 8000304:	428b      	cmp	r3, r1
 8000306:	d02d      	beq.n	8000364 <memchr+0x74>
 8000308:	f010 0f07 	tst.w	r0, #7
 800030c:	b342      	cbz	r2, 8000360 <memchr+0x70>
 800030e:	d1f6      	bne.n	80002fe <memchr+0xe>
 8000310:	b4f0      	push	{r4, r5, r6, r7}
 8000312:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000316:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800031a:	f022 0407 	bic.w	r4, r2, #7
 800031e:	f07f 0700 	mvns.w	r7, #0
 8000322:	2300      	movs	r3, #0
 8000324:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000328:	3c08      	subs	r4, #8
 800032a:	ea85 0501 	eor.w	r5, r5, r1
 800032e:	ea86 0601 	eor.w	r6, r6, r1
 8000332:	fa85 f547 	uadd8	r5, r5, r7
 8000336:	faa3 f587 	sel	r5, r3, r7
 800033a:	fa86 f647 	uadd8	r6, r6, r7
 800033e:	faa5 f687 	sel	r6, r5, r7
 8000342:	b98e      	cbnz	r6, 8000368 <memchr+0x78>
 8000344:	d1ee      	bne.n	8000324 <memchr+0x34>
 8000346:	bcf0      	pop	{r4, r5, r6, r7}
 8000348:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800034c:	f002 0207 	and.w	r2, r2, #7
 8000350:	b132      	cbz	r2, 8000360 <memchr+0x70>
 8000352:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000356:	3a01      	subs	r2, #1
 8000358:	ea83 0301 	eor.w	r3, r3, r1
 800035c:	b113      	cbz	r3, 8000364 <memchr+0x74>
 800035e:	d1f8      	bne.n	8000352 <memchr+0x62>
 8000360:	2000      	movs	r0, #0
 8000362:	4770      	bx	lr
 8000364:	3801      	subs	r0, #1
 8000366:	4770      	bx	lr
 8000368:	2d00      	cmp	r5, #0
 800036a:	bf06      	itte	eq
 800036c:	4635      	moveq	r5, r6
 800036e:	3803      	subeq	r0, #3
 8000370:	3807      	subne	r0, #7
 8000372:	f015 0f01 	tst.w	r5, #1
 8000376:	d107      	bne.n	8000388 <memchr+0x98>
 8000378:	3001      	adds	r0, #1
 800037a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800037e:	bf02      	ittt	eq
 8000380:	3001      	addeq	r0, #1
 8000382:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000386:	3001      	addeq	r0, #1
 8000388:	bcf0      	pop	{r4, r5, r6, r7}
 800038a:	3801      	subs	r0, #1
 800038c:	4770      	bx	lr
 800038e:	bf00      	nop

08000390 <__aeabi_uldivmod>:
 8000390:	b953      	cbnz	r3, 80003a8 <__aeabi_uldivmod+0x18>
 8000392:	b94a      	cbnz	r2, 80003a8 <__aeabi_uldivmod+0x18>
 8000394:	2900      	cmp	r1, #0
 8000396:	bf08      	it	eq
 8000398:	2800      	cmpeq	r0, #0
 800039a:	bf1c      	itt	ne
 800039c:	f04f 31ff 	movne.w	r1, #4294967295
 80003a0:	f04f 30ff 	movne.w	r0, #4294967295
 80003a4:	f000 b972 	b.w	800068c <__aeabi_idiv0>
 80003a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80003ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003b0:	f000 f806 	bl	80003c0 <__udivmoddi4>
 80003b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003bc:	b004      	add	sp, #16
 80003be:	4770      	bx	lr

080003c0 <__udivmoddi4>:
 80003c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003c4:	9e08      	ldr	r6, [sp, #32]
 80003c6:	4604      	mov	r4, r0
 80003c8:	4688      	mov	r8, r1
 80003ca:	2b00      	cmp	r3, #0
 80003cc:	d14b      	bne.n	8000466 <__udivmoddi4+0xa6>
 80003ce:	428a      	cmp	r2, r1
 80003d0:	4615      	mov	r5, r2
 80003d2:	d967      	bls.n	80004a4 <__udivmoddi4+0xe4>
 80003d4:	fab2 f282 	clz	r2, r2
 80003d8:	b14a      	cbz	r2, 80003ee <__udivmoddi4+0x2e>
 80003da:	f1c2 0720 	rsb	r7, r2, #32
 80003de:	fa01 f302 	lsl.w	r3, r1, r2
 80003e2:	fa20 f707 	lsr.w	r7, r0, r7
 80003e6:	4095      	lsls	r5, r2
 80003e8:	ea47 0803 	orr.w	r8, r7, r3
 80003ec:	4094      	lsls	r4, r2
 80003ee:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80003f2:	0c23      	lsrs	r3, r4, #16
 80003f4:	fbb8 f7fe 	udiv	r7, r8, lr
 80003f8:	fa1f fc85 	uxth.w	ip, r5
 80003fc:	fb0e 8817 	mls	r8, lr, r7, r8
 8000400:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000404:	fb07 f10c 	mul.w	r1, r7, ip
 8000408:	4299      	cmp	r1, r3
 800040a:	d909      	bls.n	8000420 <__udivmoddi4+0x60>
 800040c:	18eb      	adds	r3, r5, r3
 800040e:	f107 30ff 	add.w	r0, r7, #4294967295
 8000412:	f080 811b 	bcs.w	800064c <__udivmoddi4+0x28c>
 8000416:	4299      	cmp	r1, r3
 8000418:	f240 8118 	bls.w	800064c <__udivmoddi4+0x28c>
 800041c:	3f02      	subs	r7, #2
 800041e:	442b      	add	r3, r5
 8000420:	1a5b      	subs	r3, r3, r1
 8000422:	b2a4      	uxth	r4, r4
 8000424:	fbb3 f0fe 	udiv	r0, r3, lr
 8000428:	fb0e 3310 	mls	r3, lr, r0, r3
 800042c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000430:	fb00 fc0c 	mul.w	ip, r0, ip
 8000434:	45a4      	cmp	ip, r4
 8000436:	d909      	bls.n	800044c <__udivmoddi4+0x8c>
 8000438:	192c      	adds	r4, r5, r4
 800043a:	f100 33ff 	add.w	r3, r0, #4294967295
 800043e:	f080 8107 	bcs.w	8000650 <__udivmoddi4+0x290>
 8000442:	45a4      	cmp	ip, r4
 8000444:	f240 8104 	bls.w	8000650 <__udivmoddi4+0x290>
 8000448:	3802      	subs	r0, #2
 800044a:	442c      	add	r4, r5
 800044c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000450:	eba4 040c 	sub.w	r4, r4, ip
 8000454:	2700      	movs	r7, #0
 8000456:	b11e      	cbz	r6, 8000460 <__udivmoddi4+0xa0>
 8000458:	40d4      	lsrs	r4, r2
 800045a:	2300      	movs	r3, #0
 800045c:	e9c6 4300 	strd	r4, r3, [r6]
 8000460:	4639      	mov	r1, r7
 8000462:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000466:	428b      	cmp	r3, r1
 8000468:	d909      	bls.n	800047e <__udivmoddi4+0xbe>
 800046a:	2e00      	cmp	r6, #0
 800046c:	f000 80eb 	beq.w	8000646 <__udivmoddi4+0x286>
 8000470:	2700      	movs	r7, #0
 8000472:	e9c6 0100 	strd	r0, r1, [r6]
 8000476:	4638      	mov	r0, r7
 8000478:	4639      	mov	r1, r7
 800047a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800047e:	fab3 f783 	clz	r7, r3
 8000482:	2f00      	cmp	r7, #0
 8000484:	d147      	bne.n	8000516 <__udivmoddi4+0x156>
 8000486:	428b      	cmp	r3, r1
 8000488:	d302      	bcc.n	8000490 <__udivmoddi4+0xd0>
 800048a:	4282      	cmp	r2, r0
 800048c:	f200 80fa 	bhi.w	8000684 <__udivmoddi4+0x2c4>
 8000490:	1a84      	subs	r4, r0, r2
 8000492:	eb61 0303 	sbc.w	r3, r1, r3
 8000496:	2001      	movs	r0, #1
 8000498:	4698      	mov	r8, r3
 800049a:	2e00      	cmp	r6, #0
 800049c:	d0e0      	beq.n	8000460 <__udivmoddi4+0xa0>
 800049e:	e9c6 4800 	strd	r4, r8, [r6]
 80004a2:	e7dd      	b.n	8000460 <__udivmoddi4+0xa0>
 80004a4:	b902      	cbnz	r2, 80004a8 <__udivmoddi4+0xe8>
 80004a6:	deff      	udf	#255	; 0xff
 80004a8:	fab2 f282 	clz	r2, r2
 80004ac:	2a00      	cmp	r2, #0
 80004ae:	f040 808f 	bne.w	80005d0 <__udivmoddi4+0x210>
 80004b2:	1b49      	subs	r1, r1, r5
 80004b4:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80004b8:	fa1f f885 	uxth.w	r8, r5
 80004bc:	2701      	movs	r7, #1
 80004be:	fbb1 fcfe 	udiv	ip, r1, lr
 80004c2:	0c23      	lsrs	r3, r4, #16
 80004c4:	fb0e 111c 	mls	r1, lr, ip, r1
 80004c8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004cc:	fb08 f10c 	mul.w	r1, r8, ip
 80004d0:	4299      	cmp	r1, r3
 80004d2:	d907      	bls.n	80004e4 <__udivmoddi4+0x124>
 80004d4:	18eb      	adds	r3, r5, r3
 80004d6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80004da:	d202      	bcs.n	80004e2 <__udivmoddi4+0x122>
 80004dc:	4299      	cmp	r1, r3
 80004de:	f200 80cd 	bhi.w	800067c <__udivmoddi4+0x2bc>
 80004e2:	4684      	mov	ip, r0
 80004e4:	1a59      	subs	r1, r3, r1
 80004e6:	b2a3      	uxth	r3, r4
 80004e8:	fbb1 f0fe 	udiv	r0, r1, lr
 80004ec:	fb0e 1410 	mls	r4, lr, r0, r1
 80004f0:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 80004f4:	fb08 f800 	mul.w	r8, r8, r0
 80004f8:	45a0      	cmp	r8, r4
 80004fa:	d907      	bls.n	800050c <__udivmoddi4+0x14c>
 80004fc:	192c      	adds	r4, r5, r4
 80004fe:	f100 33ff 	add.w	r3, r0, #4294967295
 8000502:	d202      	bcs.n	800050a <__udivmoddi4+0x14a>
 8000504:	45a0      	cmp	r8, r4
 8000506:	f200 80b6 	bhi.w	8000676 <__udivmoddi4+0x2b6>
 800050a:	4618      	mov	r0, r3
 800050c:	eba4 0408 	sub.w	r4, r4, r8
 8000510:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000514:	e79f      	b.n	8000456 <__udivmoddi4+0x96>
 8000516:	f1c7 0c20 	rsb	ip, r7, #32
 800051a:	40bb      	lsls	r3, r7
 800051c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000520:	ea4e 0e03 	orr.w	lr, lr, r3
 8000524:	fa01 f407 	lsl.w	r4, r1, r7
 8000528:	fa20 f50c 	lsr.w	r5, r0, ip
 800052c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000530:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000534:	4325      	orrs	r5, r4
 8000536:	fbb3 f9f8 	udiv	r9, r3, r8
 800053a:	0c2c      	lsrs	r4, r5, #16
 800053c:	fb08 3319 	mls	r3, r8, r9, r3
 8000540:	fa1f fa8e 	uxth.w	sl, lr
 8000544:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000548:	fb09 f40a 	mul.w	r4, r9, sl
 800054c:	429c      	cmp	r4, r3
 800054e:	fa02 f207 	lsl.w	r2, r2, r7
 8000552:	fa00 f107 	lsl.w	r1, r0, r7
 8000556:	d90b      	bls.n	8000570 <__udivmoddi4+0x1b0>
 8000558:	eb1e 0303 	adds.w	r3, lr, r3
 800055c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000560:	f080 8087 	bcs.w	8000672 <__udivmoddi4+0x2b2>
 8000564:	429c      	cmp	r4, r3
 8000566:	f240 8084 	bls.w	8000672 <__udivmoddi4+0x2b2>
 800056a:	f1a9 0902 	sub.w	r9, r9, #2
 800056e:	4473      	add	r3, lr
 8000570:	1b1b      	subs	r3, r3, r4
 8000572:	b2ad      	uxth	r5, r5
 8000574:	fbb3 f0f8 	udiv	r0, r3, r8
 8000578:	fb08 3310 	mls	r3, r8, r0, r3
 800057c:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000580:	fb00 fa0a 	mul.w	sl, r0, sl
 8000584:	45a2      	cmp	sl, r4
 8000586:	d908      	bls.n	800059a <__udivmoddi4+0x1da>
 8000588:	eb1e 0404 	adds.w	r4, lr, r4
 800058c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000590:	d26b      	bcs.n	800066a <__udivmoddi4+0x2aa>
 8000592:	45a2      	cmp	sl, r4
 8000594:	d969      	bls.n	800066a <__udivmoddi4+0x2aa>
 8000596:	3802      	subs	r0, #2
 8000598:	4474      	add	r4, lr
 800059a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800059e:	fba0 8902 	umull	r8, r9, r0, r2
 80005a2:	eba4 040a 	sub.w	r4, r4, sl
 80005a6:	454c      	cmp	r4, r9
 80005a8:	46c2      	mov	sl, r8
 80005aa:	464b      	mov	r3, r9
 80005ac:	d354      	bcc.n	8000658 <__udivmoddi4+0x298>
 80005ae:	d051      	beq.n	8000654 <__udivmoddi4+0x294>
 80005b0:	2e00      	cmp	r6, #0
 80005b2:	d069      	beq.n	8000688 <__udivmoddi4+0x2c8>
 80005b4:	ebb1 050a 	subs.w	r5, r1, sl
 80005b8:	eb64 0403 	sbc.w	r4, r4, r3
 80005bc:	fa04 fc0c 	lsl.w	ip, r4, ip
 80005c0:	40fd      	lsrs	r5, r7
 80005c2:	40fc      	lsrs	r4, r7
 80005c4:	ea4c 0505 	orr.w	r5, ip, r5
 80005c8:	e9c6 5400 	strd	r5, r4, [r6]
 80005cc:	2700      	movs	r7, #0
 80005ce:	e747      	b.n	8000460 <__udivmoddi4+0xa0>
 80005d0:	f1c2 0320 	rsb	r3, r2, #32
 80005d4:	fa20 f703 	lsr.w	r7, r0, r3
 80005d8:	4095      	lsls	r5, r2
 80005da:	fa01 f002 	lsl.w	r0, r1, r2
 80005de:	fa21 f303 	lsr.w	r3, r1, r3
 80005e2:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80005e6:	4338      	orrs	r0, r7
 80005e8:	0c01      	lsrs	r1, r0, #16
 80005ea:	fbb3 f7fe 	udiv	r7, r3, lr
 80005ee:	fa1f f885 	uxth.w	r8, r5
 80005f2:	fb0e 3317 	mls	r3, lr, r7, r3
 80005f6:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80005fa:	fb07 f308 	mul.w	r3, r7, r8
 80005fe:	428b      	cmp	r3, r1
 8000600:	fa04 f402 	lsl.w	r4, r4, r2
 8000604:	d907      	bls.n	8000616 <__udivmoddi4+0x256>
 8000606:	1869      	adds	r1, r5, r1
 8000608:	f107 3cff 	add.w	ip, r7, #4294967295
 800060c:	d22f      	bcs.n	800066e <__udivmoddi4+0x2ae>
 800060e:	428b      	cmp	r3, r1
 8000610:	d92d      	bls.n	800066e <__udivmoddi4+0x2ae>
 8000612:	3f02      	subs	r7, #2
 8000614:	4429      	add	r1, r5
 8000616:	1acb      	subs	r3, r1, r3
 8000618:	b281      	uxth	r1, r0
 800061a:	fbb3 f0fe 	udiv	r0, r3, lr
 800061e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000622:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000626:	fb00 f308 	mul.w	r3, r0, r8
 800062a:	428b      	cmp	r3, r1
 800062c:	d907      	bls.n	800063e <__udivmoddi4+0x27e>
 800062e:	1869      	adds	r1, r5, r1
 8000630:	f100 3cff 	add.w	ip, r0, #4294967295
 8000634:	d217      	bcs.n	8000666 <__udivmoddi4+0x2a6>
 8000636:	428b      	cmp	r3, r1
 8000638:	d915      	bls.n	8000666 <__udivmoddi4+0x2a6>
 800063a:	3802      	subs	r0, #2
 800063c:	4429      	add	r1, r5
 800063e:	1ac9      	subs	r1, r1, r3
 8000640:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000644:	e73b      	b.n	80004be <__udivmoddi4+0xfe>
 8000646:	4637      	mov	r7, r6
 8000648:	4630      	mov	r0, r6
 800064a:	e709      	b.n	8000460 <__udivmoddi4+0xa0>
 800064c:	4607      	mov	r7, r0
 800064e:	e6e7      	b.n	8000420 <__udivmoddi4+0x60>
 8000650:	4618      	mov	r0, r3
 8000652:	e6fb      	b.n	800044c <__udivmoddi4+0x8c>
 8000654:	4541      	cmp	r1, r8
 8000656:	d2ab      	bcs.n	80005b0 <__udivmoddi4+0x1f0>
 8000658:	ebb8 0a02 	subs.w	sl, r8, r2
 800065c:	eb69 020e 	sbc.w	r2, r9, lr
 8000660:	3801      	subs	r0, #1
 8000662:	4613      	mov	r3, r2
 8000664:	e7a4      	b.n	80005b0 <__udivmoddi4+0x1f0>
 8000666:	4660      	mov	r0, ip
 8000668:	e7e9      	b.n	800063e <__udivmoddi4+0x27e>
 800066a:	4618      	mov	r0, r3
 800066c:	e795      	b.n	800059a <__udivmoddi4+0x1da>
 800066e:	4667      	mov	r7, ip
 8000670:	e7d1      	b.n	8000616 <__udivmoddi4+0x256>
 8000672:	4681      	mov	r9, r0
 8000674:	e77c      	b.n	8000570 <__udivmoddi4+0x1b0>
 8000676:	3802      	subs	r0, #2
 8000678:	442c      	add	r4, r5
 800067a:	e747      	b.n	800050c <__udivmoddi4+0x14c>
 800067c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000680:	442b      	add	r3, r5
 8000682:	e72f      	b.n	80004e4 <__udivmoddi4+0x124>
 8000684:	4638      	mov	r0, r7
 8000686:	e708      	b.n	800049a <__udivmoddi4+0xda>
 8000688:	4637      	mov	r7, r6
 800068a:	e6e9      	b.n	8000460 <__udivmoddi4+0xa0>

0800068c <__aeabi_idiv0>:
 800068c:	4770      	bx	lr
 800068e:	bf00      	nop

08000690 <gps_msg_config>:
#include <string.h>
#include <stdint.h>
#include <GPS.h>
#include "main.h"

int gps_msg_config(UART_HandleTypeDef *huart, const char *nema, int rus1){
 8000690:	b580      	push	{r7, lr}
 8000692:	b09e      	sub	sp, #120	; 0x78
 8000694:	af02      	add	r7, sp, #8
 8000696:	60f8      	str	r0, [r7, #12]
 8000698:	60b9      	str	r1, [r7, #8]
 800069a:	607a      	str	r2, [r7, #4]
	if (strlen(nema) != 3) return 1;
 800069c:	68b8      	ldr	r0, [r7, #8]
 800069e:	f7ff fe1f 	bl	80002e0 <strlen>
 80006a2:	4603      	mov	r3, r0
 80006a4:	2b03      	cmp	r3, #3
 80006a6:	d001      	beq.n	80006ac <gps_msg_config+0x1c>
 80006a8:	2301      	movs	r3, #1
 80006aa:	e052      	b.n	8000752 <gps_msg_config+0xc2>


	char msg[32];
	snprintf(msg, sizeof(msg)-1,"PUBX,40,%s,0,%i,0,0,0,0", nema, rus1);
 80006ac:	f107 0048 	add.w	r0, r7, #72	; 0x48
 80006b0:	687b      	ldr	r3, [r7, #4]
 80006b2:	9300      	str	r3, [sp, #0]
 80006b4:	68bb      	ldr	r3, [r7, #8]
 80006b6:	4a29      	ldr	r2, [pc, #164]	; (800075c <gps_msg_config+0xcc>)
 80006b8:	211f      	movs	r1, #31
 80006ba:	f010 ff4d 	bl	8011558 <sniprintf>

	int checksum_int = 0;
 80006be:	2300      	movs	r3, #0
 80006c0:	66fb      	str	r3, [r7, #108]	; 0x6c
	for (int i = 0; msg[i] && i < 32; i++)
 80006c2:	2300      	movs	r3, #0
 80006c4:	66bb      	str	r3, [r7, #104]	; 0x68
 80006c6:	e00b      	b.n	80006e0 <gps_msg_config+0x50>
		checksum_int ^= (unsigned char)msg[i];
 80006c8:	f107 0248 	add.w	r2, r7, #72	; 0x48
 80006cc:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80006ce:	4413      	add	r3, r2
 80006d0:	781b      	ldrb	r3, [r3, #0]
 80006d2:	461a      	mov	r2, r3
 80006d4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80006d6:	4053      	eors	r3, r2
 80006d8:	66fb      	str	r3, [r7, #108]	; 0x6c
	for (int i = 0; msg[i] && i < 32; i++)
 80006da:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80006dc:	3301      	adds	r3, #1
 80006de:	66bb      	str	r3, [r7, #104]	; 0x68
 80006e0:	f107 0248 	add.w	r2, r7, #72	; 0x48
 80006e4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80006e6:	4413      	add	r3, r2
 80006e8:	781b      	ldrb	r3, [r3, #0]
 80006ea:	2b00      	cmp	r3, #0
 80006ec:	d002      	beq.n	80006f4 <gps_msg_config+0x64>
 80006ee:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80006f0:	2b1f      	cmp	r3, #31
 80006f2:	dde9      	ble.n	80006c8 <gps_msg_config+0x38>

	char checksum[8];
	snprintf(checksum, sizeof(checksum)-1, "*%.2X", checksum_int);
 80006f4:	f107 0040 	add.w	r0, r7, #64	; 0x40
 80006f8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80006fa:	4a19      	ldr	r2, [pc, #100]	; (8000760 <gps_msg_config+0xd0>)
 80006fc:	2107      	movs	r1, #7
 80006fe:	f010 ff2b 	bl	8011558 <sniprintf>

	char messagetosend[42];
	snprintf(messagetosend, sizeof(messagetosend)-1, "$%s%s\r\n", msg, checksum);
 8000702:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8000706:	f107 0014 	add.w	r0, r7, #20
 800070a:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800070e:	9300      	str	r3, [sp, #0]
 8000710:	4613      	mov	r3, r2
 8000712:	4a14      	ldr	r2, [pc, #80]	; (8000764 <gps_msg_config+0xd4>)
 8000714:	2129      	movs	r1, #41	; 0x29
 8000716:	f010 ff1f 	bl	8011558 <sniprintf>
	printf("\n\rSending: ");
 800071a:	4813      	ldr	r0, [pc, #76]	; (8000768 <gps_msg_config+0xd8>)
 800071c:	f010 fef4 	bl	8011508 <iprintf>
	printf("%s", messagetosend);
 8000720:	f107 0314 	add.w	r3, r7, #20
 8000724:	4619      	mov	r1, r3
 8000726:	4811      	ldr	r0, [pc, #68]	; (800076c <gps_msg_config+0xdc>)
 8000728:	f010 feee 	bl	8011508 <iprintf>
	if (HAL_UART_Transmit(huart, messagetosend, strlen(messagetosend), 100) != HAL_OK){
 800072c:	f107 0314 	add.w	r3, r7, #20
 8000730:	4618      	mov	r0, r3
 8000732:	f7ff fdd5 	bl	80002e0 <strlen>
 8000736:	4603      	mov	r3, r0
 8000738:	b29a      	uxth	r2, r3
 800073a:	f107 0114 	add.w	r1, r7, #20
 800073e:	2364      	movs	r3, #100	; 0x64
 8000740:	68f8      	ldr	r0, [r7, #12]
 8000742:	f009 fe8c 	bl	800a45e <HAL_UART_Transmit>
 8000746:	4603      	mov	r3, r0
 8000748:	2b00      	cmp	r3, #0
 800074a:	d001      	beq.n	8000750 <gps_msg_config+0xc0>
		Error_Handler();
 800074c:	f000 fcfe 	bl	800114c <Error_Handler>
	}
	return 0;
 8000750:	2300      	movs	r3, #0
}
 8000752:	4618      	mov	r0, r3
 8000754:	3770      	adds	r7, #112	; 0x70
 8000756:	46bd      	mov	sp, r7
 8000758:	bd80      	pop	{r7, pc}
 800075a:	bf00      	nop
 800075c:	08012534 	.word	0x08012534
 8000760:	0801254c 	.word	0x0801254c
 8000764:	08012554 	.word	0x08012554
 8000768:	0801255c 	.word	0x0801255c
 800076c:	08012568 	.word	0x08012568

08000770 <gps_rate_config>:

int gps_rate_config(UART_HandleTypeDef *huart, uint16_t measRate, uint16_t navRate, uint16_t timeRef){
 8000770:	b580      	push	{r7, lr}
 8000772:	b08a      	sub	sp, #40	; 0x28
 8000774:	af00      	add	r7, sp, #0
 8000776:	60f8      	str	r0, [r7, #12]
 8000778:	4608      	mov	r0, r1
 800077a:	4611      	mov	r1, r2
 800077c:	461a      	mov	r2, r3
 800077e:	4603      	mov	r3, r0
 8000780:	817b      	strh	r3, [r7, #10]
 8000782:	460b      	mov	r3, r1
 8000784:	813b      	strh	r3, [r7, #8]
 8000786:	4613      	mov	r3, r2
 8000788:	80fb      	strh	r3, [r7, #6]
		uint16_t length = 6;
 800078a:	2306      	movs	r3, #6
 800078c:	83fb      	strh	r3, [r7, #30]
		uint8_t msg[14];
		msg[0] = 0xb5;
 800078e:	23b5      	movs	r3, #181	; 0xb5
 8000790:	743b      	strb	r3, [r7, #16]
		msg[1] = 0x62;
 8000792:	2362      	movs	r3, #98	; 0x62
 8000794:	747b      	strb	r3, [r7, #17]
		msg[2] = 0x06;
 8000796:	2306      	movs	r3, #6
 8000798:	74bb      	strb	r3, [r7, #18]
		msg[3] = 0x08;
 800079a:	2308      	movs	r3, #8
 800079c:	74fb      	strb	r3, [r7, #19]
		msg[4] = length;
 800079e:	8bfb      	ldrh	r3, [r7, #30]
 80007a0:	b2db      	uxtb	r3, r3
 80007a2:	753b      	strb	r3, [r7, #20]
		msg[5] = 0;
 80007a4:	2300      	movs	r3, #0
 80007a6:	757b      	strb	r3, [r7, #21]
		msg[6] = measRate;
 80007a8:	897b      	ldrh	r3, [r7, #10]
 80007aa:	b2db      	uxtb	r3, r3
 80007ac:	75bb      	strb	r3, [r7, #22]
		msg[7] = 0;
 80007ae:	2300      	movs	r3, #0
 80007b0:	75fb      	strb	r3, [r7, #23]
		msg[8] = navRate;
 80007b2:	893b      	ldrh	r3, [r7, #8]
 80007b4:	b2db      	uxtb	r3, r3
 80007b6:	763b      	strb	r3, [r7, #24]
		msg[9] = 0;
 80007b8:	2300      	movs	r3, #0
 80007ba:	767b      	strb	r3, [r7, #25]
		msg[10] = timeRef;
 80007bc:	88fb      	ldrh	r3, [r7, #6]
 80007be:	b2db      	uxtb	r3, r3
 80007c0:	76bb      	strb	r3, [r7, #26]
		msg[11] = 0;
 80007c2:	2300      	movs	r3, #0
 80007c4:	76fb      	strb	r3, [r7, #27]

		uint8_t CK_A = 0;
 80007c6:	2300      	movs	r3, #0
 80007c8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		uint8_t CK_B = 0;
 80007cc:	2300      	movs	r3, #0
 80007ce:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
		for(int i=2; i<12; i++){
 80007d2:	2302      	movs	r3, #2
 80007d4:	623b      	str	r3, [r7, #32]
 80007d6:	e013      	b.n	8000800 <gps_rate_config+0x90>
	        CK_A = CK_A + msg[i];
 80007d8:	f107 0210 	add.w	r2, r7, #16
 80007dc:	6a3b      	ldr	r3, [r7, #32]
 80007de:	4413      	add	r3, r2
 80007e0:	781a      	ldrb	r2, [r3, #0]
 80007e2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80007e6:	4413      	add	r3, r2
 80007e8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	        CK_A &= 0xFF;
	        CK_B = CK_B + CK_A;
 80007ec:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 80007f0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80007f4:	4413      	add	r3, r2
 80007f6:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
		for(int i=2; i<12; i++){
 80007fa:	6a3b      	ldr	r3, [r7, #32]
 80007fc:	3301      	adds	r3, #1
 80007fe:	623b      	str	r3, [r7, #32]
 8000800:	6a3b      	ldr	r3, [r7, #32]
 8000802:	2b0b      	cmp	r3, #11
 8000804:	dde8      	ble.n	80007d8 <gps_rate_config+0x68>
	        CK_B &= 0xFF;
	    }
		msg[12] = CK_A;
 8000806:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800080a:	773b      	strb	r3, [r7, #28]
		msg[13] = CK_B;
 800080c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8000810:	777b      	strb	r3, [r7, #29]

		if (HAL_UART_Transmit(huart, msg, sizeof(msg), 100) != HAL_OK){
 8000812:	f107 0110 	add.w	r1, r7, #16
 8000816:	2364      	movs	r3, #100	; 0x64
 8000818:	220e      	movs	r2, #14
 800081a:	68f8      	ldr	r0, [r7, #12]
 800081c:	f009 fe1f 	bl	800a45e <HAL_UART_Transmit>
 8000820:	4603      	mov	r3, r0
 8000822:	2b00      	cmp	r3, #0
 8000824:	d003      	beq.n	800082e <gps_rate_config+0xbe>
				Error_Handler();
 8000826:	f000 fc91 	bl	800114c <Error_Handler>
				return 1;
 800082a:	2301      	movs	r3, #1
 800082c:	e000      	b.n	8000830 <gps_rate_config+0xc0>
			}
		return 0;
 800082e:	2300      	movs	r3, #0
}
 8000830:	4618      	mov	r0, r3
 8000832:	3728      	adds	r7, #40	; 0x28
 8000834:	46bd      	mov	sp, r7
 8000836:	bd80      	pop	{r7, pc}

08000838 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000838:	b580      	push	{r7, lr}
 800083a:	b082      	sub	sp, #8
 800083c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800083e:	f001 f839 	bl	80018b4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000842:	f000 f8c7 	bl	80009d4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000846:	f000 fb89 	bl	8000f5c <MX_GPIO_Init>
  MX_DMA_Init();
 800084a:	f000 fb67 	bl	8000f1c <MX_DMA_Init>
  MX_SDMMC1_SD_Init();
 800084e:	f000 fa55 	bl	8000cfc <MX_SDMMC1_SD_Init>
  MX_FATFS_Init();
 8000852:	f00d f939 	bl	800dac8 <MX_FATFS_Init>
  MX_USB_DEVICE_Init();
 8000856:	f010 f89f 	bl	8010998 <MX_USB_DEVICE_Init>
  MX_FDCAN1_Init();
 800085a:	f000 f987 	bl	8000b6c <MX_FDCAN1_Init>
  MX_FDCAN2_Init();
 800085e:	f000 f9e9 	bl	8000c34 <MX_FDCAN2_Init>
  MX_UART8_Init();
 8000862:	f000 fac3 	bl	8000dec <MX_UART8_Init>
  MX_USART3_UART_Init();
 8000866:	f000 fb0d 	bl	8000e84 <MX_USART3_UART_Init>
  MX_SPI1_Init();
 800086a:	f000 fa69 	bl	8000d40 <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */
  HAL_GPIO_WritePin(GPS_RST_GPIO_Port, GPS_RST_Pin, GPIO_PIN_SET);
 800086e:	2201      	movs	r2, #1
 8000870:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000874:	4840      	ldr	r0, [pc, #256]	; (8000978 <main+0x140>)
 8000876:	f003 fff5 	bl	8004864 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPS_INT_GPIO_Port, GPS_INT_Pin, GPIO_PIN_SET);
 800087a:	2201      	movs	r2, #1
 800087c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000880:	483d      	ldr	r0, [pc, #244]	; (8000978 <main+0x140>)
 8000882:	f003 ffef 	bl	8004864 <HAL_GPIO_WritePin>
  HAL_Delay(100);
 8000886:	2064      	movs	r0, #100	; 0x64
 8000888:	f001 f8a6 	bl	80019d8 <HAL_Delay>

  HAL_UART_Receive_DMA(&huart3, (uint8_t *)rxBuf, BUFFLENGTH);
 800088c:	2246      	movs	r2, #70	; 0x46
 800088e:	493b      	ldr	r1, [pc, #236]	; (800097c <main+0x144>)
 8000890:	483b      	ldr	r0, [pc, #236]	; (8000980 <main+0x148>)
 8000892:	f009 fe7b 	bl	800a58c <HAL_UART_Receive_DMA>

  uint16_t measRate = 100;
 8000896:	2364      	movs	r3, #100	; 0x64
 8000898:	80fb      	strh	r3, [r7, #6]
  uint16_t navRate = 1;
 800089a:	2301      	movs	r3, #1
 800089c:	80bb      	strh	r3, [r7, #4]
  uint16_t timeRef = 0;
 800089e:	2300      	movs	r3, #0
 80008a0:	807b      	strh	r3, [r7, #2]

  gps_rate_config(&huart3, measRate, navRate, timeRef);
 80008a2:	887b      	ldrh	r3, [r7, #2]
 80008a4:	88ba      	ldrh	r2, [r7, #4]
 80008a6:	88f9      	ldrh	r1, [r7, #6]
 80008a8:	4835      	ldr	r0, [pc, #212]	; (8000980 <main+0x148>)
 80008aa:	f7ff ff61 	bl	8000770 <gps_rate_config>

    gps_msg_config(&huart3, "DTM", 0);//ERROR
 80008ae:	2200      	movs	r2, #0
 80008b0:	4934      	ldr	r1, [pc, #208]	; (8000984 <main+0x14c>)
 80008b2:	4833      	ldr	r0, [pc, #204]	; (8000980 <main+0x148>)
 80008b4:	f7ff feec 	bl	8000690 <gps_msg_config>
    gps_msg_config(&huart3, "GAQ", 0);
 80008b8:	2200      	movs	r2, #0
 80008ba:	4933      	ldr	r1, [pc, #204]	; (8000988 <main+0x150>)
 80008bc:	4830      	ldr	r0, [pc, #192]	; (8000980 <main+0x148>)
 80008be:	f7ff fee7 	bl	8000690 <gps_msg_config>
    gps_msg_config(&huart3, "GBQ", 0);
 80008c2:	2200      	movs	r2, #0
 80008c4:	4931      	ldr	r1, [pc, #196]	; (800098c <main+0x154>)
 80008c6:	482e      	ldr	r0, [pc, #184]	; (8000980 <main+0x148>)
 80008c8:	f7ff fee2 	bl	8000690 <gps_msg_config>
    gps_msg_config(&huart3, "GBS", 0);//ERROR
 80008cc:	2200      	movs	r2, #0
 80008ce:	4930      	ldr	r1, [pc, #192]	; (8000990 <main+0x158>)
 80008d0:	482b      	ldr	r0, [pc, #172]	; (8000980 <main+0x148>)
 80008d2:	f7ff fedd 	bl	8000690 <gps_msg_config>
    gps_msg_config(&huart3, "GGA", 0);//ERROR
 80008d6:	2200      	movs	r2, #0
 80008d8:	492e      	ldr	r1, [pc, #184]	; (8000994 <main+0x15c>)
 80008da:	4829      	ldr	r0, [pc, #164]	; (8000980 <main+0x148>)
 80008dc:	f7ff fed8 	bl	8000690 <gps_msg_config>
    gps_msg_config(&huart3, "GLL", 0);//ERROR
 80008e0:	2200      	movs	r2, #0
 80008e2:	492d      	ldr	r1, [pc, #180]	; (8000998 <main+0x160>)
 80008e4:	4826      	ldr	r0, [pc, #152]	; (8000980 <main+0x148>)
 80008e6:	f7ff fed3 	bl	8000690 <gps_msg_config>
    gps_msg_config(&huart3, "GLQ", 0);
 80008ea:	2200      	movs	r2, #0
 80008ec:	492b      	ldr	r1, [pc, #172]	; (800099c <main+0x164>)
 80008ee:	4824      	ldr	r0, [pc, #144]	; (8000980 <main+0x148>)
 80008f0:	f7ff fece 	bl	8000690 <gps_msg_config>
    gps_msg_config(&huart3, "GNQ", 0);
 80008f4:	2200      	movs	r2, #0
 80008f6:	492a      	ldr	r1, [pc, #168]	; (80009a0 <main+0x168>)
 80008f8:	4821      	ldr	r0, [pc, #132]	; (8000980 <main+0x148>)
 80008fa:	f7ff fec9 	bl	8000690 <gps_msg_config>
    gps_msg_config(&huart3, "GNS", 0);//ERROR
 80008fe:	2200      	movs	r2, #0
 8000900:	4928      	ldr	r1, [pc, #160]	; (80009a4 <main+0x16c>)
 8000902:	481f      	ldr	r0, [pc, #124]	; (8000980 <main+0x148>)
 8000904:	f7ff fec4 	bl	8000690 <gps_msg_config>
    gps_msg_config(&huart3, "GPQ", 0);
 8000908:	2200      	movs	r2, #0
 800090a:	4927      	ldr	r1, [pc, #156]	; (80009a8 <main+0x170>)
 800090c:	481c      	ldr	r0, [pc, #112]	; (8000980 <main+0x148>)
 800090e:	f7ff febf 	bl	8000690 <gps_msg_config>
    gps_msg_config(&huart3, "GRS", 0);//ERROR
 8000912:	2200      	movs	r2, #0
 8000914:	4925      	ldr	r1, [pc, #148]	; (80009ac <main+0x174>)
 8000916:	481a      	ldr	r0, [pc, #104]	; (8000980 <main+0x148>)
 8000918:	f7ff feba 	bl	8000690 <gps_msg_config>
    gps_msg_config(&huart3, "GSA", 0);//ERROR
 800091c:	2200      	movs	r2, #0
 800091e:	4924      	ldr	r1, [pc, #144]	; (80009b0 <main+0x178>)
 8000920:	4817      	ldr	r0, [pc, #92]	; (8000980 <main+0x148>)
 8000922:	f7ff feb5 	bl	8000690 <gps_msg_config>
    gps_msg_config(&huart3, "GST", 0);//ERROR
 8000926:	2200      	movs	r2, #0
 8000928:	4922      	ldr	r1, [pc, #136]	; (80009b4 <main+0x17c>)
 800092a:	4815      	ldr	r0, [pc, #84]	; (8000980 <main+0x148>)
 800092c:	f7ff feb0 	bl	8000690 <gps_msg_config>
    gps_msg_config(&huart3, "GSV", 0);//ERROR
 8000930:	2200      	movs	r2, #0
 8000932:	4921      	ldr	r1, [pc, #132]	; (80009b8 <main+0x180>)
 8000934:	4812      	ldr	r0, [pc, #72]	; (8000980 <main+0x148>)
 8000936:	f7ff feab 	bl	8000690 <gps_msg_config>
    gps_msg_config(&huart3, "RLM", 0);
 800093a:	2200      	movs	r2, #0
 800093c:	491f      	ldr	r1, [pc, #124]	; (80009bc <main+0x184>)
 800093e:	4810      	ldr	r0, [pc, #64]	; (8000980 <main+0x148>)
 8000940:	f7ff fea6 	bl	8000690 <gps_msg_config>
    gps_msg_config(&huart3, "RMC", 1);//ERROR
 8000944:	2201      	movs	r2, #1
 8000946:	491e      	ldr	r1, [pc, #120]	; (80009c0 <main+0x188>)
 8000948:	480d      	ldr	r0, [pc, #52]	; (8000980 <main+0x148>)
 800094a:	f7ff fea1 	bl	8000690 <gps_msg_config>
    gps_msg_config(&huart3, "TXT", 0);
 800094e:	2200      	movs	r2, #0
 8000950:	491c      	ldr	r1, [pc, #112]	; (80009c4 <main+0x18c>)
 8000952:	480b      	ldr	r0, [pc, #44]	; (8000980 <main+0x148>)
 8000954:	f7ff fe9c 	bl	8000690 <gps_msg_config>
    gps_msg_config(&huart3, "VLW", 0);//ERROR
 8000958:	2200      	movs	r2, #0
 800095a:	491b      	ldr	r1, [pc, #108]	; (80009c8 <main+0x190>)
 800095c:	4808      	ldr	r0, [pc, #32]	; (8000980 <main+0x148>)
 800095e:	f7ff fe97 	bl	8000690 <gps_msg_config>
    gps_msg_config(&huart3, "VTG", 0);//ERROR
 8000962:	2200      	movs	r2, #0
 8000964:	4919      	ldr	r1, [pc, #100]	; (80009cc <main+0x194>)
 8000966:	4806      	ldr	r0, [pc, #24]	; (8000980 <main+0x148>)
 8000968:	f7ff fe92 	bl	8000690 <gps_msg_config>
    gps_msg_config(&huart3, "ZDA", 0);//ERROR
 800096c:	2200      	movs	r2, #0
 800096e:	4918      	ldr	r1, [pc, #96]	; (80009d0 <main+0x198>)
 8000970:	4803      	ldr	r0, [pc, #12]	; (8000980 <main+0x148>)
 8000972:	f7ff fe8d 	bl	8000690 <gps_msg_config>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000976:	e7fe      	b.n	8000976 <main+0x13e>
 8000978:	58020c00 	.word	0x58020c00
 800097c:	2400038c 	.word	0x2400038c
 8000980:	24000280 	.word	0x24000280
 8000984:	08012574 	.word	0x08012574
 8000988:	08012578 	.word	0x08012578
 800098c:	0801257c 	.word	0x0801257c
 8000990:	08012580 	.word	0x08012580
 8000994:	08012584 	.word	0x08012584
 8000998:	08012588 	.word	0x08012588
 800099c:	0801258c 	.word	0x0801258c
 80009a0:	08012590 	.word	0x08012590
 80009a4:	08012594 	.word	0x08012594
 80009a8:	08012598 	.word	0x08012598
 80009ac:	0801259c 	.word	0x0801259c
 80009b0:	080125a0 	.word	0x080125a0
 80009b4:	080125a4 	.word	0x080125a4
 80009b8:	080125a8 	.word	0x080125a8
 80009bc:	080125ac 	.word	0x080125ac
 80009c0:	080125b0 	.word	0x080125b0
 80009c4:	080125b4 	.word	0x080125b4
 80009c8:	080125b8 	.word	0x080125b8
 80009cc:	080125bc 	.word	0x080125bc
 80009d0:	080125c0 	.word	0x080125c0

080009d4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80009d4:	b580      	push	{r7, lr}
 80009d6:	b0cc      	sub	sp, #304	; 0x130
 80009d8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80009da:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 80009de:	224c      	movs	r2, #76	; 0x4c
 80009e0:	2100      	movs	r1, #0
 80009e2:	4618      	mov	r0, r3
 80009e4:	f010 fcdf 	bl	80113a6 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80009e8:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 80009ec:	2220      	movs	r2, #32
 80009ee:	2100      	movs	r1, #0
 80009f0:	4618      	mov	r0, r3
 80009f2:	f010 fcd8 	bl	80113a6 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80009f6:	f107 0308 	add.w	r3, r7, #8
 80009fa:	4618      	mov	r0, r3
 80009fc:	23bc      	movs	r3, #188	; 0xbc
 80009fe:	461a      	mov	r2, r3
 8000a00:	2100      	movs	r1, #0
 8000a02:	f010 fcd0 	bl	80113a6 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8000a06:	2002      	movs	r0, #2
 8000a08:	f005 f968 	bl	8005cdc <HAL_PWREx_ConfigSupply>
  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000a0c:	1d3b      	adds	r3, r7, #4
 8000a0e:	2200      	movs	r2, #0
 8000a10:	601a      	str	r2, [r3, #0]
 8000a12:	4b53      	ldr	r3, [pc, #332]	; (8000b60 <SystemClock_Config+0x18c>)
 8000a14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000a16:	4a52      	ldr	r2, [pc, #328]	; (8000b60 <SystemClock_Config+0x18c>)
 8000a18:	f023 0301 	bic.w	r3, r3, #1
 8000a1c:	62d3      	str	r3, [r2, #44]	; 0x2c
 8000a1e:	4b50      	ldr	r3, [pc, #320]	; (8000b60 <SystemClock_Config+0x18c>)
 8000a20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000a22:	f003 0201 	and.w	r2, r3, #1
 8000a26:	1d3b      	adds	r3, r7, #4
 8000a28:	601a      	str	r2, [r3, #0]
 8000a2a:	4b4e      	ldr	r3, [pc, #312]	; (8000b64 <SystemClock_Config+0x190>)
 8000a2c:	699b      	ldr	r3, [r3, #24]
 8000a2e:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000a32:	4a4c      	ldr	r2, [pc, #304]	; (8000b64 <SystemClock_Config+0x190>)
 8000a34:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000a38:	6193      	str	r3, [r2, #24]
 8000a3a:	4b4a      	ldr	r3, [pc, #296]	; (8000b64 <SystemClock_Config+0x190>)
 8000a3c:	699b      	ldr	r3, [r3, #24]
 8000a3e:	f403 4240 	and.w	r2, r3, #49152	; 0xc000
 8000a42:	1d3b      	adds	r3, r7, #4
 8000a44:	601a      	str	r2, [r3, #0]
 8000a46:	1d3b      	adds	r3, r7, #4
 8000a48:	681b      	ldr	r3, [r3, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000a4a:	bf00      	nop
 8000a4c:	4b45      	ldr	r3, [pc, #276]	; (8000b64 <SystemClock_Config+0x190>)
 8000a4e:	699b      	ldr	r3, [r3, #24]
 8000a50:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000a54:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000a58:	d1f8      	bne.n	8000a4c <SystemClock_Config+0x78>
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 8000a5a:	2303      	movs	r3, #3
 8000a5c:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000a60:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000a64:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 8000a68:	2301      	movs	r3, #1
 8000a6a:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000a6e:	2340      	movs	r3, #64	; 0x40
 8000a70:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000a74:	2302      	movs	r3, #2
 8000a76:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000a7a:	2302      	movs	r3, #2
 8000a7c:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  RCC_OscInitStruct.PLL.PLLM = 5;
 8000a80:	2305      	movs	r3, #5
 8000a82:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
  RCC_OscInitStruct.PLL.PLLN = 48;
 8000a86:	2330      	movs	r3, #48	; 0x30
 8000a88:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000a8c:	2302      	movs	r3, #2
 8000a8e:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  RCC_OscInitStruct.PLL.PLLQ = 5;
 8000a92:	2305      	movs	r3, #5
 8000a94:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000a98:	2302      	movs	r3, #2
 8000a9a:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_2;
 8000a9e:	2308      	movs	r3, #8
 8000aa0:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000aa4:	2300      	movs	r3, #0
 8000aa6:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000aaa:	2300      	movs	r3, #0
 8000aac:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000ab0:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8000ab4:	4618      	mov	r0, r3
 8000ab6:	f005 f95b 	bl	8005d70 <HAL_RCC_OscConfig>
 8000aba:	4603      	mov	r3, r0
 8000abc:	2b00      	cmp	r3, #0
 8000abe:	d001      	beq.n	8000ac4 <SystemClock_Config+0xf0>
  {
    Error_Handler();
 8000ac0:	f000 fb44 	bl	800114c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000ac4:	233f      	movs	r3, #63	; 0x3f
 8000ac6:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000aca:	2300      	movs	r3, #0
 8000acc:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000ad0:	2300      	movs	r3, #0
 8000ad2:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 8000ad6:	2300      	movs	r3, #0
 8000ad8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 8000adc:	2300      	movs	r3, #0
 8000ade:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 8000ae2:	2300      	movs	r3, #0
 8000ae4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
 8000ae8:	2300      	movs	r3, #0
 8000aea:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 8000aee:	2300      	movs	r3, #0
 8000af0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000af4:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8000af8:	2100      	movs	r1, #0
 8000afa:	4618      	mov	r0, r3
 8000afc:	f005 fd48 	bl	8006590 <HAL_RCC_ClockConfig>
 8000b00:	4603      	mov	r3, r0
 8000b02:	2b00      	cmp	r3, #0
 8000b04:	d001      	beq.n	8000b0a <SystemClock_Config+0x136>
  {
    Error_Handler();
 8000b06:	f000 fb21 	bl	800114c <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3|RCC_PERIPHCLK_FDCAN
 8000b0a:	f107 0308 	add.w	r3, r7, #8
 8000b0e:	4a16      	ldr	r2, [pc, #88]	; (8000b68 <SystemClock_Config+0x194>)
 8000b10:	601a      	str	r2, [r3, #0]
                              |RCC_PERIPHCLK_UART8|RCC_PERIPHCLK_SPI1
                              |RCC_PERIPHCLK_SDMMC|RCC_PERIPHCLK_USB;
  PeriphClkInitStruct.SdmmcClockSelection = RCC_SDMMCCLKSOURCE_PLL;
 8000b12:	f107 0308 	add.w	r3, r7, #8
 8000b16:	2200      	movs	r2, #0
 8000b18:	64da      	str	r2, [r3, #76]	; 0x4c
  PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 8000b1a:	f107 0308 	add.w	r3, r7, #8
 8000b1e:	2200      	movs	r2, #0
 8000b20:	65da      	str	r2, [r3, #92]	; 0x5c
  PeriphClkInitStruct.FdcanClockSelection = RCC_FDCANCLKSOURCE_HSE;
 8000b22:	f107 0308 	add.w	r3, r7, #8
 8000b26:	2200      	movs	r2, #0
 8000b28:	66da      	str	r2, [r3, #108]	; 0x6c
  PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8000b2a:	f107 0308 	add.w	r3, r7, #8
 8000b2e:	2200      	movs	r2, #0
 8000b30:	675a      	str	r2, [r3, #116]	; 0x74
  PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_PLL;
 8000b32:	f107 0308 	add.w	r3, r7, #8
 8000b36:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8000b3a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000b3e:	f107 0308 	add.w	r3, r7, #8
 8000b42:	4618      	mov	r0, r3
 8000b44:	f006 f8a8 	bl	8006c98 <HAL_RCCEx_PeriphCLKConfig>
 8000b48:	4603      	mov	r3, r0
 8000b4a:	2b00      	cmp	r3, #0
 8000b4c:	d001      	beq.n	8000b52 <SystemClock_Config+0x17e>
  {
    Error_Handler();
 8000b4e:	f000 fafd 	bl	800114c <Error_Handler>
  }
  /** Enable USB Voltage detector
  */
  HAL_PWREx_EnableUSBVoltageDetector();
 8000b52:	f005 f8fd 	bl	8005d50 <HAL_PWREx_EnableUSBVoltageDetector>
}
 8000b56:	bf00      	nop
 8000b58:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8000b5c:	46bd      	mov	sp, r7
 8000b5e:	bd80      	pop	{r7, pc}
 8000b60:	58000400 	.word	0x58000400
 8000b64:	58024800 	.word	0x58024800
 8000b68:	00059002 	.word	0x00059002

08000b6c <MX_FDCAN1_Init>:
  * @brief FDCAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_FDCAN1_Init(void)
{
 8000b6c:	b580      	push	{r7, lr}
 8000b6e:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN1_Init 0 */

  /* USER CODE BEGIN FDCAN1_Init 1 */

  /* USER CODE END FDCAN1_Init 1 */
  hfdcan1.Instance = FDCAN1;
 8000b70:	4b2e      	ldr	r3, [pc, #184]	; (8000c2c <MX_FDCAN1_Init+0xc0>)
 8000b72:	4a2f      	ldr	r2, [pc, #188]	; (8000c30 <MX_FDCAN1_Init+0xc4>)
 8000b74:	601a      	str	r2, [r3, #0]
  hfdcan1.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 8000b76:	4b2d      	ldr	r3, [pc, #180]	; (8000c2c <MX_FDCAN1_Init+0xc0>)
 8000b78:	2200      	movs	r2, #0
 8000b7a:	609a      	str	r2, [r3, #8]
  hfdcan1.Init.Mode = FDCAN_MODE_NORMAL;
 8000b7c:	4b2b      	ldr	r3, [pc, #172]	; (8000c2c <MX_FDCAN1_Init+0xc0>)
 8000b7e:	2200      	movs	r2, #0
 8000b80:	60da      	str	r2, [r3, #12]
  hfdcan1.Init.AutoRetransmission = DISABLE;
 8000b82:	4b2a      	ldr	r3, [pc, #168]	; (8000c2c <MX_FDCAN1_Init+0xc0>)
 8000b84:	2200      	movs	r2, #0
 8000b86:	741a      	strb	r2, [r3, #16]
  hfdcan1.Init.TransmitPause = DISABLE;
 8000b88:	4b28      	ldr	r3, [pc, #160]	; (8000c2c <MX_FDCAN1_Init+0xc0>)
 8000b8a:	2200      	movs	r2, #0
 8000b8c:	745a      	strb	r2, [r3, #17]
  hfdcan1.Init.ProtocolException = DISABLE;
 8000b8e:	4b27      	ldr	r3, [pc, #156]	; (8000c2c <MX_FDCAN1_Init+0xc0>)
 8000b90:	2200      	movs	r2, #0
 8000b92:	749a      	strb	r2, [r3, #18]
  hfdcan1.Init.NominalPrescaler = 1;
 8000b94:	4b25      	ldr	r3, [pc, #148]	; (8000c2c <MX_FDCAN1_Init+0xc0>)
 8000b96:	2201      	movs	r2, #1
 8000b98:	615a      	str	r2, [r3, #20]
  hfdcan1.Init.NominalSyncJumpWidth = 1;
 8000b9a:	4b24      	ldr	r3, [pc, #144]	; (8000c2c <MX_FDCAN1_Init+0xc0>)
 8000b9c:	2201      	movs	r2, #1
 8000b9e:	619a      	str	r2, [r3, #24]
  hfdcan1.Init.NominalTimeSeg1 = 2;
 8000ba0:	4b22      	ldr	r3, [pc, #136]	; (8000c2c <MX_FDCAN1_Init+0xc0>)
 8000ba2:	2202      	movs	r2, #2
 8000ba4:	61da      	str	r2, [r3, #28]
  hfdcan1.Init.NominalTimeSeg2 = 2;
 8000ba6:	4b21      	ldr	r3, [pc, #132]	; (8000c2c <MX_FDCAN1_Init+0xc0>)
 8000ba8:	2202      	movs	r2, #2
 8000baa:	621a      	str	r2, [r3, #32]
  hfdcan1.Init.DataPrescaler = 1;
 8000bac:	4b1f      	ldr	r3, [pc, #124]	; (8000c2c <MX_FDCAN1_Init+0xc0>)
 8000bae:	2201      	movs	r2, #1
 8000bb0:	625a      	str	r2, [r3, #36]	; 0x24
  hfdcan1.Init.DataSyncJumpWidth = 1;
 8000bb2:	4b1e      	ldr	r3, [pc, #120]	; (8000c2c <MX_FDCAN1_Init+0xc0>)
 8000bb4:	2201      	movs	r2, #1
 8000bb6:	629a      	str	r2, [r3, #40]	; 0x28
  hfdcan1.Init.DataTimeSeg1 = 1;
 8000bb8:	4b1c      	ldr	r3, [pc, #112]	; (8000c2c <MX_FDCAN1_Init+0xc0>)
 8000bba:	2201      	movs	r2, #1
 8000bbc:	62da      	str	r2, [r3, #44]	; 0x2c
  hfdcan1.Init.DataTimeSeg2 = 1;
 8000bbe:	4b1b      	ldr	r3, [pc, #108]	; (8000c2c <MX_FDCAN1_Init+0xc0>)
 8000bc0:	2201      	movs	r2, #1
 8000bc2:	631a      	str	r2, [r3, #48]	; 0x30
  hfdcan1.Init.MessageRAMOffset = 0;
 8000bc4:	4b19      	ldr	r3, [pc, #100]	; (8000c2c <MX_FDCAN1_Init+0xc0>)
 8000bc6:	2200      	movs	r2, #0
 8000bc8:	635a      	str	r2, [r3, #52]	; 0x34
  hfdcan1.Init.StdFiltersNbr = 0;
 8000bca:	4b18      	ldr	r3, [pc, #96]	; (8000c2c <MX_FDCAN1_Init+0xc0>)
 8000bcc:	2200      	movs	r2, #0
 8000bce:	639a      	str	r2, [r3, #56]	; 0x38
  hfdcan1.Init.ExtFiltersNbr = 0;
 8000bd0:	4b16      	ldr	r3, [pc, #88]	; (8000c2c <MX_FDCAN1_Init+0xc0>)
 8000bd2:	2200      	movs	r2, #0
 8000bd4:	63da      	str	r2, [r3, #60]	; 0x3c
  hfdcan1.Init.RxFifo0ElmtsNbr = 0;
 8000bd6:	4b15      	ldr	r3, [pc, #84]	; (8000c2c <MX_FDCAN1_Init+0xc0>)
 8000bd8:	2200      	movs	r2, #0
 8000bda:	641a      	str	r2, [r3, #64]	; 0x40
  hfdcan1.Init.RxFifo0ElmtSize = FDCAN_DATA_BYTES_8;
 8000bdc:	4b13      	ldr	r3, [pc, #76]	; (8000c2c <MX_FDCAN1_Init+0xc0>)
 8000bde:	2204      	movs	r2, #4
 8000be0:	645a      	str	r2, [r3, #68]	; 0x44
  hfdcan1.Init.RxFifo1ElmtsNbr = 0;
 8000be2:	4b12      	ldr	r3, [pc, #72]	; (8000c2c <MX_FDCAN1_Init+0xc0>)
 8000be4:	2200      	movs	r2, #0
 8000be6:	649a      	str	r2, [r3, #72]	; 0x48
  hfdcan1.Init.RxFifo1ElmtSize = FDCAN_DATA_BYTES_8;
 8000be8:	4b10      	ldr	r3, [pc, #64]	; (8000c2c <MX_FDCAN1_Init+0xc0>)
 8000bea:	2204      	movs	r2, #4
 8000bec:	64da      	str	r2, [r3, #76]	; 0x4c
  hfdcan1.Init.RxBuffersNbr = 0;
 8000bee:	4b0f      	ldr	r3, [pc, #60]	; (8000c2c <MX_FDCAN1_Init+0xc0>)
 8000bf0:	2200      	movs	r2, #0
 8000bf2:	651a      	str	r2, [r3, #80]	; 0x50
  hfdcan1.Init.RxBufferSize = FDCAN_DATA_BYTES_8;
 8000bf4:	4b0d      	ldr	r3, [pc, #52]	; (8000c2c <MX_FDCAN1_Init+0xc0>)
 8000bf6:	2204      	movs	r2, #4
 8000bf8:	655a      	str	r2, [r3, #84]	; 0x54
  hfdcan1.Init.TxEventsNbr = 0;
 8000bfa:	4b0c      	ldr	r3, [pc, #48]	; (8000c2c <MX_FDCAN1_Init+0xc0>)
 8000bfc:	2200      	movs	r2, #0
 8000bfe:	659a      	str	r2, [r3, #88]	; 0x58
  hfdcan1.Init.TxBuffersNbr = 0;
 8000c00:	4b0a      	ldr	r3, [pc, #40]	; (8000c2c <MX_FDCAN1_Init+0xc0>)
 8000c02:	2200      	movs	r2, #0
 8000c04:	65da      	str	r2, [r3, #92]	; 0x5c
  hfdcan1.Init.TxFifoQueueElmtsNbr = 0;
 8000c06:	4b09      	ldr	r3, [pc, #36]	; (8000c2c <MX_FDCAN1_Init+0xc0>)
 8000c08:	2200      	movs	r2, #0
 8000c0a:	661a      	str	r2, [r3, #96]	; 0x60
  hfdcan1.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 8000c0c:	4b07      	ldr	r3, [pc, #28]	; (8000c2c <MX_FDCAN1_Init+0xc0>)
 8000c0e:	2200      	movs	r2, #0
 8000c10:	665a      	str	r2, [r3, #100]	; 0x64
  hfdcan1.Init.TxElmtSize = FDCAN_DATA_BYTES_8;
 8000c12:	4b06      	ldr	r3, [pc, #24]	; (8000c2c <MX_FDCAN1_Init+0xc0>)
 8000c14:	2204      	movs	r2, #4
 8000c16:	669a      	str	r2, [r3, #104]	; 0x68
  if (HAL_FDCAN_Init(&hfdcan1) != HAL_OK)
 8000c18:	4804      	ldr	r0, [pc, #16]	; (8000c2c <MX_FDCAN1_Init+0xc0>)
 8000c1a:	f003 f8f3 	bl	8003e04 <HAL_FDCAN_Init>
 8000c1e:	4603      	mov	r3, r0
 8000c20:	2b00      	cmp	r3, #0
 8000c22:	d001      	beq.n	8000c28 <MX_FDCAN1_Init+0xbc>
  {
    Error_Handler();
 8000c24:	f000 fa92 	bl	800114c <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN1_Init 2 */

  /* USER CODE END FDCAN1_Init 2 */

}
 8000c28:	bf00      	nop
 8000c2a:	bd80      	pop	{r7, pc}
 8000c2c:	240003d4 	.word	0x240003d4
 8000c30:	4000a000 	.word	0x4000a000

08000c34 <MX_FDCAN2_Init>:
  * @brief FDCAN2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_FDCAN2_Init(void)
{
 8000c34:	b580      	push	{r7, lr}
 8000c36:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN2_Init 0 */

  /* USER CODE BEGIN FDCAN2_Init 1 */

  /* USER CODE END FDCAN2_Init 1 */
  hfdcan2.Instance = FDCAN2;
 8000c38:	4b2e      	ldr	r3, [pc, #184]	; (8000cf4 <MX_FDCAN2_Init+0xc0>)
 8000c3a:	4a2f      	ldr	r2, [pc, #188]	; (8000cf8 <MX_FDCAN2_Init+0xc4>)
 8000c3c:	601a      	str	r2, [r3, #0]
  hfdcan2.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 8000c3e:	4b2d      	ldr	r3, [pc, #180]	; (8000cf4 <MX_FDCAN2_Init+0xc0>)
 8000c40:	2200      	movs	r2, #0
 8000c42:	609a      	str	r2, [r3, #8]
  hfdcan2.Init.Mode = FDCAN_MODE_NORMAL;
 8000c44:	4b2b      	ldr	r3, [pc, #172]	; (8000cf4 <MX_FDCAN2_Init+0xc0>)
 8000c46:	2200      	movs	r2, #0
 8000c48:	60da      	str	r2, [r3, #12]
  hfdcan2.Init.AutoRetransmission = DISABLE;
 8000c4a:	4b2a      	ldr	r3, [pc, #168]	; (8000cf4 <MX_FDCAN2_Init+0xc0>)
 8000c4c:	2200      	movs	r2, #0
 8000c4e:	741a      	strb	r2, [r3, #16]
  hfdcan2.Init.TransmitPause = DISABLE;
 8000c50:	4b28      	ldr	r3, [pc, #160]	; (8000cf4 <MX_FDCAN2_Init+0xc0>)
 8000c52:	2200      	movs	r2, #0
 8000c54:	745a      	strb	r2, [r3, #17]
  hfdcan2.Init.ProtocolException = DISABLE;
 8000c56:	4b27      	ldr	r3, [pc, #156]	; (8000cf4 <MX_FDCAN2_Init+0xc0>)
 8000c58:	2200      	movs	r2, #0
 8000c5a:	749a      	strb	r2, [r3, #18]
  hfdcan2.Init.NominalPrescaler = 1;
 8000c5c:	4b25      	ldr	r3, [pc, #148]	; (8000cf4 <MX_FDCAN2_Init+0xc0>)
 8000c5e:	2201      	movs	r2, #1
 8000c60:	615a      	str	r2, [r3, #20]
  hfdcan2.Init.NominalSyncJumpWidth = 1;
 8000c62:	4b24      	ldr	r3, [pc, #144]	; (8000cf4 <MX_FDCAN2_Init+0xc0>)
 8000c64:	2201      	movs	r2, #1
 8000c66:	619a      	str	r2, [r3, #24]
  hfdcan2.Init.NominalTimeSeg1 = 2;
 8000c68:	4b22      	ldr	r3, [pc, #136]	; (8000cf4 <MX_FDCAN2_Init+0xc0>)
 8000c6a:	2202      	movs	r2, #2
 8000c6c:	61da      	str	r2, [r3, #28]
  hfdcan2.Init.NominalTimeSeg2 = 2;
 8000c6e:	4b21      	ldr	r3, [pc, #132]	; (8000cf4 <MX_FDCAN2_Init+0xc0>)
 8000c70:	2202      	movs	r2, #2
 8000c72:	621a      	str	r2, [r3, #32]
  hfdcan2.Init.DataPrescaler = 1;
 8000c74:	4b1f      	ldr	r3, [pc, #124]	; (8000cf4 <MX_FDCAN2_Init+0xc0>)
 8000c76:	2201      	movs	r2, #1
 8000c78:	625a      	str	r2, [r3, #36]	; 0x24
  hfdcan2.Init.DataSyncJumpWidth = 1;
 8000c7a:	4b1e      	ldr	r3, [pc, #120]	; (8000cf4 <MX_FDCAN2_Init+0xc0>)
 8000c7c:	2201      	movs	r2, #1
 8000c7e:	629a      	str	r2, [r3, #40]	; 0x28
  hfdcan2.Init.DataTimeSeg1 = 1;
 8000c80:	4b1c      	ldr	r3, [pc, #112]	; (8000cf4 <MX_FDCAN2_Init+0xc0>)
 8000c82:	2201      	movs	r2, #1
 8000c84:	62da      	str	r2, [r3, #44]	; 0x2c
  hfdcan2.Init.DataTimeSeg2 = 1;
 8000c86:	4b1b      	ldr	r3, [pc, #108]	; (8000cf4 <MX_FDCAN2_Init+0xc0>)
 8000c88:	2201      	movs	r2, #1
 8000c8a:	631a      	str	r2, [r3, #48]	; 0x30
  hfdcan2.Init.MessageRAMOffset = 0;
 8000c8c:	4b19      	ldr	r3, [pc, #100]	; (8000cf4 <MX_FDCAN2_Init+0xc0>)
 8000c8e:	2200      	movs	r2, #0
 8000c90:	635a      	str	r2, [r3, #52]	; 0x34
  hfdcan2.Init.StdFiltersNbr = 0;
 8000c92:	4b18      	ldr	r3, [pc, #96]	; (8000cf4 <MX_FDCAN2_Init+0xc0>)
 8000c94:	2200      	movs	r2, #0
 8000c96:	639a      	str	r2, [r3, #56]	; 0x38
  hfdcan2.Init.ExtFiltersNbr = 0;
 8000c98:	4b16      	ldr	r3, [pc, #88]	; (8000cf4 <MX_FDCAN2_Init+0xc0>)
 8000c9a:	2200      	movs	r2, #0
 8000c9c:	63da      	str	r2, [r3, #60]	; 0x3c
  hfdcan2.Init.RxFifo0ElmtsNbr = 0;
 8000c9e:	4b15      	ldr	r3, [pc, #84]	; (8000cf4 <MX_FDCAN2_Init+0xc0>)
 8000ca0:	2200      	movs	r2, #0
 8000ca2:	641a      	str	r2, [r3, #64]	; 0x40
  hfdcan2.Init.RxFifo0ElmtSize = FDCAN_DATA_BYTES_8;
 8000ca4:	4b13      	ldr	r3, [pc, #76]	; (8000cf4 <MX_FDCAN2_Init+0xc0>)
 8000ca6:	2204      	movs	r2, #4
 8000ca8:	645a      	str	r2, [r3, #68]	; 0x44
  hfdcan2.Init.RxFifo1ElmtsNbr = 0;
 8000caa:	4b12      	ldr	r3, [pc, #72]	; (8000cf4 <MX_FDCAN2_Init+0xc0>)
 8000cac:	2200      	movs	r2, #0
 8000cae:	649a      	str	r2, [r3, #72]	; 0x48
  hfdcan2.Init.RxFifo1ElmtSize = FDCAN_DATA_BYTES_8;
 8000cb0:	4b10      	ldr	r3, [pc, #64]	; (8000cf4 <MX_FDCAN2_Init+0xc0>)
 8000cb2:	2204      	movs	r2, #4
 8000cb4:	64da      	str	r2, [r3, #76]	; 0x4c
  hfdcan2.Init.RxBuffersNbr = 0;
 8000cb6:	4b0f      	ldr	r3, [pc, #60]	; (8000cf4 <MX_FDCAN2_Init+0xc0>)
 8000cb8:	2200      	movs	r2, #0
 8000cba:	651a      	str	r2, [r3, #80]	; 0x50
  hfdcan2.Init.RxBufferSize = FDCAN_DATA_BYTES_8;
 8000cbc:	4b0d      	ldr	r3, [pc, #52]	; (8000cf4 <MX_FDCAN2_Init+0xc0>)
 8000cbe:	2204      	movs	r2, #4
 8000cc0:	655a      	str	r2, [r3, #84]	; 0x54
  hfdcan2.Init.TxEventsNbr = 0;
 8000cc2:	4b0c      	ldr	r3, [pc, #48]	; (8000cf4 <MX_FDCAN2_Init+0xc0>)
 8000cc4:	2200      	movs	r2, #0
 8000cc6:	659a      	str	r2, [r3, #88]	; 0x58
  hfdcan2.Init.TxBuffersNbr = 0;
 8000cc8:	4b0a      	ldr	r3, [pc, #40]	; (8000cf4 <MX_FDCAN2_Init+0xc0>)
 8000cca:	2200      	movs	r2, #0
 8000ccc:	65da      	str	r2, [r3, #92]	; 0x5c
  hfdcan2.Init.TxFifoQueueElmtsNbr = 0;
 8000cce:	4b09      	ldr	r3, [pc, #36]	; (8000cf4 <MX_FDCAN2_Init+0xc0>)
 8000cd0:	2200      	movs	r2, #0
 8000cd2:	661a      	str	r2, [r3, #96]	; 0x60
  hfdcan2.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 8000cd4:	4b07      	ldr	r3, [pc, #28]	; (8000cf4 <MX_FDCAN2_Init+0xc0>)
 8000cd6:	2200      	movs	r2, #0
 8000cd8:	665a      	str	r2, [r3, #100]	; 0x64
  hfdcan2.Init.TxElmtSize = FDCAN_DATA_BYTES_8;
 8000cda:	4b06      	ldr	r3, [pc, #24]	; (8000cf4 <MX_FDCAN2_Init+0xc0>)
 8000cdc:	2204      	movs	r2, #4
 8000cde:	669a      	str	r2, [r3, #104]	; 0x68
  if (HAL_FDCAN_Init(&hfdcan2) != HAL_OK)
 8000ce0:	4804      	ldr	r0, [pc, #16]	; (8000cf4 <MX_FDCAN2_Init+0xc0>)
 8000ce2:	f003 f88f 	bl	8003e04 <HAL_FDCAN_Init>
 8000ce6:	4603      	mov	r3, r0
 8000ce8:	2b00      	cmp	r3, #0
 8000cea:	d001      	beq.n	8000cf0 <MX_FDCAN2_Init+0xbc>
  {
    Error_Handler();
 8000cec:	f000 fa2e 	bl	800114c <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN2_Init 2 */

  /* USER CODE END FDCAN2_Init 2 */

}
 8000cf0:	bf00      	nop
 8000cf2:	bd80      	pop	{r7, pc}
 8000cf4:	24000588 	.word	0x24000588
 8000cf8:	4000a400 	.word	0x4000a400

08000cfc <MX_SDMMC1_SD_Init>:
  * @brief SDMMC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDMMC1_SD_Init(void)
{
 8000cfc:	b480      	push	{r7}
 8000cfe:	af00      	add	r7, sp, #0
  /* USER CODE END SDMMC1_Init 0 */

  /* USER CODE BEGIN SDMMC1_Init 1 */

  /* USER CODE END SDMMC1_Init 1 */
  hsd1.Instance = SDMMC1;
 8000d00:	4b0d      	ldr	r3, [pc, #52]	; (8000d38 <MX_SDMMC1_SD_Init+0x3c>)
 8000d02:	4a0e      	ldr	r2, [pc, #56]	; (8000d3c <MX_SDMMC1_SD_Init+0x40>)
 8000d04:	601a      	str	r2, [r3, #0]
  hsd1.Init.ClockEdge = SDMMC_CLOCK_EDGE_RISING;
 8000d06:	4b0c      	ldr	r3, [pc, #48]	; (8000d38 <MX_SDMMC1_SD_Init+0x3c>)
 8000d08:	2200      	movs	r2, #0
 8000d0a:	605a      	str	r2, [r3, #4]
  hsd1.Init.ClockPowerSave = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 8000d0c:	4b0a      	ldr	r3, [pc, #40]	; (8000d38 <MX_SDMMC1_SD_Init+0x3c>)
 8000d0e:	2200      	movs	r2, #0
 8000d10:	609a      	str	r2, [r3, #8]
  hsd1.Init.BusWide = SDMMC_BUS_WIDE_4B;
 8000d12:	4b09      	ldr	r3, [pc, #36]	; (8000d38 <MX_SDMMC1_SD_Init+0x3c>)
 8000d14:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000d18:	60da      	str	r2, [r3, #12]
  hsd1.Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 8000d1a:	4b07      	ldr	r3, [pc, #28]	; (8000d38 <MX_SDMMC1_SD_Init+0x3c>)
 8000d1c:	2200      	movs	r2, #0
 8000d1e:	611a      	str	r2, [r3, #16]
  hsd1.Init.ClockDiv = 0;
 8000d20:	4b05      	ldr	r3, [pc, #20]	; (8000d38 <MX_SDMMC1_SD_Init+0x3c>)
 8000d22:	2200      	movs	r2, #0
 8000d24:	615a      	str	r2, [r3, #20]
  hsd1.Init.TranceiverPresent = SDMMC_TRANSCEIVER_NOT_PRESENT;
 8000d26:	4b04      	ldr	r3, [pc, #16]	; (8000d38 <MX_SDMMC1_SD_Init+0x3c>)
 8000d28:	2201      	movs	r2, #1
 8000d2a:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN SDMMC1_Init 2 */

  /* USER CODE END SDMMC1_Init 2 */

}
 8000d2c:	bf00      	nop
 8000d2e:	46bd      	mov	sp, r7
 8000d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d34:	4770      	bx	lr
 8000d36:	bf00      	nop
 8000d38:	2400030c 	.word	0x2400030c
 8000d3c:	52007000 	.word	0x52007000

08000d40 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000d40:	b580      	push	{r7, lr}
 8000d42:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000d44:	4b27      	ldr	r3, [pc, #156]	; (8000de4 <MX_SPI1_Init+0xa4>)
 8000d46:	4a28      	ldr	r2, [pc, #160]	; (8000de8 <MX_SPI1_Init+0xa8>)
 8000d48:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000d4a:	4b26      	ldr	r3, [pc, #152]	; (8000de4 <MX_SPI1_Init+0xa4>)
 8000d4c:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8000d50:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000d52:	4b24      	ldr	r3, [pc, #144]	; (8000de4 <MX_SPI1_Init+0xa4>)
 8000d54:	2200      	movs	r2, #0
 8000d56:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000d58:	4b22      	ldr	r3, [pc, #136]	; (8000de4 <MX_SPI1_Init+0xa4>)
 8000d5a:	2207      	movs	r2, #7
 8000d5c:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000d5e:	4b21      	ldr	r3, [pc, #132]	; (8000de4 <MX_SPI1_Init+0xa4>)
 8000d60:	2200      	movs	r2, #0
 8000d62:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000d64:	4b1f      	ldr	r3, [pc, #124]	; (8000de4 <MX_SPI1_Init+0xa4>)
 8000d66:	2200      	movs	r2, #0
 8000d68:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000d6a:	4b1e      	ldr	r3, [pc, #120]	; (8000de4 <MX_SPI1_Init+0xa4>)
 8000d6c:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8000d70:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000d72:	4b1c      	ldr	r3, [pc, #112]	; (8000de4 <MX_SPI1_Init+0xa4>)
 8000d74:	2200      	movs	r2, #0
 8000d76:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000d78:	4b1a      	ldr	r3, [pc, #104]	; (8000de4 <MX_SPI1_Init+0xa4>)
 8000d7a:	2200      	movs	r2, #0
 8000d7c:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000d7e:	4b19      	ldr	r3, [pc, #100]	; (8000de4 <MX_SPI1_Init+0xa4>)
 8000d80:	2200      	movs	r2, #0
 8000d82:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000d84:	4b17      	ldr	r3, [pc, #92]	; (8000de4 <MX_SPI1_Init+0xa4>)
 8000d86:	2200      	movs	r2, #0
 8000d88:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 0x0;
 8000d8a:	4b16      	ldr	r3, [pc, #88]	; (8000de4 <MX_SPI1_Init+0xa4>)
 8000d8c:	2200      	movs	r2, #0
 8000d8e:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000d90:	4b14      	ldr	r3, [pc, #80]	; (8000de4 <MX_SPI1_Init+0xa4>)
 8000d92:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000d96:	635a      	str	r2, [r3, #52]	; 0x34
  hspi1.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8000d98:	4b12      	ldr	r3, [pc, #72]	; (8000de4 <MX_SPI1_Init+0xa4>)
 8000d9a:	2200      	movs	r2, #0
 8000d9c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi1.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8000d9e:	4b11      	ldr	r3, [pc, #68]	; (8000de4 <MX_SPI1_Init+0xa4>)
 8000da0:	2200      	movs	r2, #0
 8000da2:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi1.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8000da4:	4b0f      	ldr	r3, [pc, #60]	; (8000de4 <MX_SPI1_Init+0xa4>)
 8000da6:	2200      	movs	r2, #0
 8000da8:	641a      	str	r2, [r3, #64]	; 0x40
  hspi1.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8000daa:	4b0e      	ldr	r3, [pc, #56]	; (8000de4 <MX_SPI1_Init+0xa4>)
 8000dac:	2200      	movs	r2, #0
 8000dae:	645a      	str	r2, [r3, #68]	; 0x44
  hspi1.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8000db0:	4b0c      	ldr	r3, [pc, #48]	; (8000de4 <MX_SPI1_Init+0xa4>)
 8000db2:	2200      	movs	r2, #0
 8000db4:	649a      	str	r2, [r3, #72]	; 0x48
  hspi1.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8000db6:	4b0b      	ldr	r3, [pc, #44]	; (8000de4 <MX_SPI1_Init+0xa4>)
 8000db8:	2200      	movs	r2, #0
 8000dba:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi1.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8000dbc:	4b09      	ldr	r3, [pc, #36]	; (8000de4 <MX_SPI1_Init+0xa4>)
 8000dbe:	2200      	movs	r2, #0
 8000dc0:	651a      	str	r2, [r3, #80]	; 0x50
  hspi1.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8000dc2:	4b08      	ldr	r3, [pc, #32]	; (8000de4 <MX_SPI1_Init+0xa4>)
 8000dc4:	2200      	movs	r2, #0
 8000dc6:	655a      	str	r2, [r3, #84]	; 0x54
  hspi1.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8000dc8:	4b06      	ldr	r3, [pc, #24]	; (8000de4 <MX_SPI1_Init+0xa4>)
 8000dca:	2200      	movs	r2, #0
 8000dcc:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000dce:	4805      	ldr	r0, [pc, #20]	; (8000de4 <MX_SPI1_Init+0xa4>)
 8000dd0:	f009 f9e2 	bl	800a198 <HAL_SPI_Init>
 8000dd4:	4603      	mov	r3, r0
 8000dd6:	2b00      	cmp	r3, #0
 8000dd8:	d001      	beq.n	8000dde <MX_SPI1_Init+0x9e>
  {
    Error_Handler();
 8000dda:	f000 f9b7 	bl	800114c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000dde:	bf00      	nop
 8000de0:	bd80      	pop	{r7, pc}
 8000de2:	bf00      	nop
 8000de4:	24000500 	.word	0x24000500
 8000de8:	40013000 	.word	0x40013000

08000dec <MX_UART8_Init>:
  * @brief UART8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART8_Init(void)
{
 8000dec:	b580      	push	{r7, lr}
 8000dee:	af00      	add	r7, sp, #0
  /* USER CODE END UART8_Init 0 */

  /* USER CODE BEGIN UART8_Init 1 */

  /* USER CODE END UART8_Init 1 */
  huart8.Instance = UART8;
 8000df0:	4b22      	ldr	r3, [pc, #136]	; (8000e7c <MX_UART8_Init+0x90>)
 8000df2:	4a23      	ldr	r2, [pc, #140]	; (8000e80 <MX_UART8_Init+0x94>)
 8000df4:	601a      	str	r2, [r3, #0]
  huart8.Init.BaudRate = 115200;
 8000df6:	4b21      	ldr	r3, [pc, #132]	; (8000e7c <MX_UART8_Init+0x90>)
 8000df8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000dfc:	605a      	str	r2, [r3, #4]
  huart8.Init.WordLength = UART_WORDLENGTH_8B;
 8000dfe:	4b1f      	ldr	r3, [pc, #124]	; (8000e7c <MX_UART8_Init+0x90>)
 8000e00:	2200      	movs	r2, #0
 8000e02:	609a      	str	r2, [r3, #8]
  huart8.Init.StopBits = UART_STOPBITS_1;
 8000e04:	4b1d      	ldr	r3, [pc, #116]	; (8000e7c <MX_UART8_Init+0x90>)
 8000e06:	2200      	movs	r2, #0
 8000e08:	60da      	str	r2, [r3, #12]
  huart8.Init.Parity = UART_PARITY_NONE;
 8000e0a:	4b1c      	ldr	r3, [pc, #112]	; (8000e7c <MX_UART8_Init+0x90>)
 8000e0c:	2200      	movs	r2, #0
 8000e0e:	611a      	str	r2, [r3, #16]
  huart8.Init.Mode = UART_MODE_TX_RX;
 8000e10:	4b1a      	ldr	r3, [pc, #104]	; (8000e7c <MX_UART8_Init+0x90>)
 8000e12:	220c      	movs	r2, #12
 8000e14:	615a      	str	r2, [r3, #20]
  huart8.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000e16:	4b19      	ldr	r3, [pc, #100]	; (8000e7c <MX_UART8_Init+0x90>)
 8000e18:	2200      	movs	r2, #0
 8000e1a:	619a      	str	r2, [r3, #24]
  huart8.Init.OverSampling = UART_OVERSAMPLING_16;
 8000e1c:	4b17      	ldr	r3, [pc, #92]	; (8000e7c <MX_UART8_Init+0x90>)
 8000e1e:	2200      	movs	r2, #0
 8000e20:	61da      	str	r2, [r3, #28]
  huart8.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000e22:	4b16      	ldr	r3, [pc, #88]	; (8000e7c <MX_UART8_Init+0x90>)
 8000e24:	2200      	movs	r2, #0
 8000e26:	621a      	str	r2, [r3, #32]
  huart8.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000e28:	4b14      	ldr	r3, [pc, #80]	; (8000e7c <MX_UART8_Init+0x90>)
 8000e2a:	2200      	movs	r2, #0
 8000e2c:	625a      	str	r2, [r3, #36]	; 0x24
  huart8.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000e2e:	4b13      	ldr	r3, [pc, #76]	; (8000e7c <MX_UART8_Init+0x90>)
 8000e30:	2200      	movs	r2, #0
 8000e32:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart8) != HAL_OK)
 8000e34:	4811      	ldr	r0, [pc, #68]	; (8000e7c <MX_UART8_Init+0x90>)
 8000e36:	f009 fac2 	bl	800a3be <HAL_UART_Init>
 8000e3a:	4603      	mov	r3, r0
 8000e3c:	2b00      	cmp	r3, #0
 8000e3e:	d001      	beq.n	8000e44 <MX_UART8_Init+0x58>
  {
    Error_Handler();
 8000e40:	f000 f984 	bl	800114c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart8, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000e44:	2100      	movs	r1, #0
 8000e46:	480d      	ldr	r0, [pc, #52]	; (8000e7c <MX_UART8_Init+0x90>)
 8000e48:	f00a fc52 	bl	800b6f0 <HAL_UARTEx_SetTxFifoThreshold>
 8000e4c:	4603      	mov	r3, r0
 8000e4e:	2b00      	cmp	r3, #0
 8000e50:	d001      	beq.n	8000e56 <MX_UART8_Init+0x6a>
  {
    Error_Handler();
 8000e52:	f000 f97b 	bl	800114c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart8, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000e56:	2100      	movs	r1, #0
 8000e58:	4808      	ldr	r0, [pc, #32]	; (8000e7c <MX_UART8_Init+0x90>)
 8000e5a:	f00a fc87 	bl	800b76c <HAL_UARTEx_SetRxFifoThreshold>
 8000e5e:	4603      	mov	r3, r0
 8000e60:	2b00      	cmp	r3, #0
 8000e62:	d001      	beq.n	8000e68 <MX_UART8_Init+0x7c>
  {
    Error_Handler();
 8000e64:	f000 f972 	bl	800114c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart8) != HAL_OK)
 8000e68:	4804      	ldr	r0, [pc, #16]	; (8000e7c <MX_UART8_Init+0x90>)
 8000e6a:	f00a fc08 	bl	800b67e <HAL_UARTEx_DisableFifoMode>
 8000e6e:	4603      	mov	r3, r0
 8000e70:	2b00      	cmp	r3, #0
 8000e72:	d001      	beq.n	8000e78 <MX_UART8_Init+0x8c>
  {
    Error_Handler();
 8000e74:	f000 f96a 	bl	800114c <Error_Handler>
  }
  /* USER CODE BEGIN UART8_Init 2 */

  /* USER CODE END UART8_Init 2 */

}
 8000e78:	bf00      	nop
 8000e7a:	bd80      	pop	{r7, pc}
 8000e7c:	24000474 	.word	0x24000474
 8000e80:	40007c00 	.word	0x40007c00

08000e84 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000e84:	b580      	push	{r7, lr}
 8000e86:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000e88:	4b22      	ldr	r3, [pc, #136]	; (8000f14 <MX_USART3_UART_Init+0x90>)
 8000e8a:	4a23      	ldr	r2, [pc, #140]	; (8000f18 <MX_USART3_UART_Init+0x94>)
 8000e8c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 38400;
 8000e8e:	4b21      	ldr	r3, [pc, #132]	; (8000f14 <MX_USART3_UART_Init+0x90>)
 8000e90:	f44f 4216 	mov.w	r2, #38400	; 0x9600
 8000e94:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000e96:	4b1f      	ldr	r3, [pc, #124]	; (8000f14 <MX_USART3_UART_Init+0x90>)
 8000e98:	2200      	movs	r2, #0
 8000e9a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000e9c:	4b1d      	ldr	r3, [pc, #116]	; (8000f14 <MX_USART3_UART_Init+0x90>)
 8000e9e:	2200      	movs	r2, #0
 8000ea0:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000ea2:	4b1c      	ldr	r3, [pc, #112]	; (8000f14 <MX_USART3_UART_Init+0x90>)
 8000ea4:	2200      	movs	r2, #0
 8000ea6:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000ea8:	4b1a      	ldr	r3, [pc, #104]	; (8000f14 <MX_USART3_UART_Init+0x90>)
 8000eaa:	220c      	movs	r2, #12
 8000eac:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000eae:	4b19      	ldr	r3, [pc, #100]	; (8000f14 <MX_USART3_UART_Init+0x90>)
 8000eb0:	2200      	movs	r2, #0
 8000eb2:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000eb4:	4b17      	ldr	r3, [pc, #92]	; (8000f14 <MX_USART3_UART_Init+0x90>)
 8000eb6:	2200      	movs	r2, #0
 8000eb8:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000eba:	4b16      	ldr	r3, [pc, #88]	; (8000f14 <MX_USART3_UART_Init+0x90>)
 8000ebc:	2200      	movs	r2, #0
 8000ebe:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000ec0:	4b14      	ldr	r3, [pc, #80]	; (8000f14 <MX_USART3_UART_Init+0x90>)
 8000ec2:	2200      	movs	r2, #0
 8000ec4:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000ec6:	4b13      	ldr	r3, [pc, #76]	; (8000f14 <MX_USART3_UART_Init+0x90>)
 8000ec8:	2200      	movs	r2, #0
 8000eca:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000ecc:	4811      	ldr	r0, [pc, #68]	; (8000f14 <MX_USART3_UART_Init+0x90>)
 8000ece:	f009 fa76 	bl	800a3be <HAL_UART_Init>
 8000ed2:	4603      	mov	r3, r0
 8000ed4:	2b00      	cmp	r3, #0
 8000ed6:	d001      	beq.n	8000edc <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8000ed8:	f000 f938 	bl	800114c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000edc:	2100      	movs	r1, #0
 8000ede:	480d      	ldr	r0, [pc, #52]	; (8000f14 <MX_USART3_UART_Init+0x90>)
 8000ee0:	f00a fc06 	bl	800b6f0 <HAL_UARTEx_SetTxFifoThreshold>
 8000ee4:	4603      	mov	r3, r0
 8000ee6:	2b00      	cmp	r3, #0
 8000ee8:	d001      	beq.n	8000eee <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8000eea:	f000 f92f 	bl	800114c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000eee:	2100      	movs	r1, #0
 8000ef0:	4808      	ldr	r0, [pc, #32]	; (8000f14 <MX_USART3_UART_Init+0x90>)
 8000ef2:	f00a fc3b 	bl	800b76c <HAL_UARTEx_SetRxFifoThreshold>
 8000ef6:	4603      	mov	r3, r0
 8000ef8:	2b00      	cmp	r3, #0
 8000efa:	d001      	beq.n	8000f00 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8000efc:	f000 f926 	bl	800114c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8000f00:	4804      	ldr	r0, [pc, #16]	; (8000f14 <MX_USART3_UART_Init+0x90>)
 8000f02:	f00a fbbc 	bl	800b67e <HAL_UARTEx_DisableFifoMode>
 8000f06:	4603      	mov	r3, r0
 8000f08:	2b00      	cmp	r3, #0
 8000f0a:	d001      	beq.n	8000f10 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8000f0c:	f000 f91e 	bl	800114c <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000f10:	bf00      	nop
 8000f12:	bd80      	pop	{r7, pc}
 8000f14:	24000280 	.word	0x24000280
 8000f18:	40004800 	.word	0x40004800

08000f1c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000f1c:	b580      	push	{r7, lr}
 8000f1e:	b082      	sub	sp, #8
 8000f20:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000f22:	4b0d      	ldr	r3, [pc, #52]	; (8000f58 <MX_DMA_Init+0x3c>)
 8000f24:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000f28:	4a0b      	ldr	r2, [pc, #44]	; (8000f58 <MX_DMA_Init+0x3c>)
 8000f2a:	f043 0301 	orr.w	r3, r3, #1
 8000f2e:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8000f32:	4b09      	ldr	r3, [pc, #36]	; (8000f58 <MX_DMA_Init+0x3c>)
 8000f34:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000f38:	f003 0301 	and.w	r3, r3, #1
 8000f3c:	607b      	str	r3, [r7, #4]
 8000f3e:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 8000f40:	2200      	movs	r2, #0
 8000f42:	2100      	movs	r1, #0
 8000f44:	200b      	movs	r0, #11
 8000f46:	f000 fe50 	bl	8001bea <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8000f4a:	200b      	movs	r0, #11
 8000f4c:	f000 fe67 	bl	8001c1e <HAL_NVIC_EnableIRQ>

}
 8000f50:	bf00      	nop
 8000f52:	3708      	adds	r7, #8
 8000f54:	46bd      	mov	sp, r7
 8000f56:	bd80      	pop	{r7, pc}
 8000f58:	58024400 	.word	0x58024400

08000f5c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000f5c:	b580      	push	{r7, lr}
 8000f5e:	b08c      	sub	sp, #48	; 0x30
 8000f60:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f62:	f107 031c 	add.w	r3, r7, #28
 8000f66:	2200      	movs	r2, #0
 8000f68:	601a      	str	r2, [r3, #0]
 8000f6a:	605a      	str	r2, [r3, #4]
 8000f6c:	609a      	str	r2, [r3, #8]
 8000f6e:	60da      	str	r2, [r3, #12]
 8000f70:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000f72:	4b69      	ldr	r3, [pc, #420]	; (8001118 <MX_GPIO_Init+0x1bc>)
 8000f74:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000f78:	4a67      	ldr	r2, [pc, #412]	; (8001118 <MX_GPIO_Init+0x1bc>)
 8000f7a:	f043 0310 	orr.w	r3, r3, #16
 8000f7e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000f82:	4b65      	ldr	r3, [pc, #404]	; (8001118 <MX_GPIO_Init+0x1bc>)
 8000f84:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000f88:	f003 0310 	and.w	r3, r3, #16
 8000f8c:	61bb      	str	r3, [r7, #24]
 8000f8e:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000f90:	4b61      	ldr	r3, [pc, #388]	; (8001118 <MX_GPIO_Init+0x1bc>)
 8000f92:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000f96:	4a60      	ldr	r2, [pc, #384]	; (8001118 <MX_GPIO_Init+0x1bc>)
 8000f98:	f043 0304 	orr.w	r3, r3, #4
 8000f9c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000fa0:	4b5d      	ldr	r3, [pc, #372]	; (8001118 <MX_GPIO_Init+0x1bc>)
 8000fa2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000fa6:	f003 0304 	and.w	r3, r3, #4
 8000faa:	617b      	str	r3, [r7, #20]
 8000fac:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000fae:	4b5a      	ldr	r3, [pc, #360]	; (8001118 <MX_GPIO_Init+0x1bc>)
 8000fb0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000fb4:	4a58      	ldr	r2, [pc, #352]	; (8001118 <MX_GPIO_Init+0x1bc>)
 8000fb6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000fba:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000fbe:	4b56      	ldr	r3, [pc, #344]	; (8001118 <MX_GPIO_Init+0x1bc>)
 8000fc0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000fc4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000fc8:	613b      	str	r3, [r7, #16]
 8000fca:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fcc:	4b52      	ldr	r3, [pc, #328]	; (8001118 <MX_GPIO_Init+0x1bc>)
 8000fce:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000fd2:	4a51      	ldr	r2, [pc, #324]	; (8001118 <MX_GPIO_Init+0x1bc>)
 8000fd4:	f043 0301 	orr.w	r3, r3, #1
 8000fd8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000fdc:	4b4e      	ldr	r3, [pc, #312]	; (8001118 <MX_GPIO_Init+0x1bc>)
 8000fde:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000fe2:	f003 0301 	and.w	r3, r3, #1
 8000fe6:	60fb      	str	r3, [r7, #12]
 8000fe8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000fea:	4b4b      	ldr	r3, [pc, #300]	; (8001118 <MX_GPIO_Init+0x1bc>)
 8000fec:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ff0:	4a49      	ldr	r2, [pc, #292]	; (8001118 <MX_GPIO_Init+0x1bc>)
 8000ff2:	f043 0302 	orr.w	r3, r3, #2
 8000ff6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000ffa:	4b47      	ldr	r3, [pc, #284]	; (8001118 <MX_GPIO_Init+0x1bc>)
 8000ffc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001000:	f003 0302 	and.w	r3, r3, #2
 8001004:	60bb      	str	r3, [r7, #8]
 8001006:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001008:	4b43      	ldr	r3, [pc, #268]	; (8001118 <MX_GPIO_Init+0x1bc>)
 800100a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800100e:	4a42      	ldr	r2, [pc, #264]	; (8001118 <MX_GPIO_Init+0x1bc>)
 8001010:	f043 0308 	orr.w	r3, r3, #8
 8001014:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001018:	4b3f      	ldr	r3, [pc, #252]	; (8001118 <MX_GPIO_Init+0x1bc>)
 800101a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800101e:	f003 0308 	and.w	r3, r3, #8
 8001022:	607b      	str	r3, [r7, #4]
 8001024:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, RS_485_TX_EN_Pin|RS_485_RX_EN_Pin, GPIO_PIN_RESET);
 8001026:	2200      	movs	r2, #0
 8001028:	210c      	movs	r1, #12
 800102a:	483c      	ldr	r0, [pc, #240]	; (800111c <MX_GPIO_Init+0x1c0>)
 800102c:	f003 fc1a 	bl	8004864 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, TELE_CE_Pin|TELE_CS_Pin, GPIO_PIN_RESET);
 8001030:	2200      	movs	r2, #0
 8001032:	2103      	movs	r1, #3
 8001034:	483a      	ldr	r0, [pc, #232]	; (8001120 <MX_GPIO_Init+0x1c4>)
 8001036:	f003 fc15 	bl	8004864 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 800103a:	2200      	movs	r2, #0
 800103c:	2101      	movs	r1, #1
 800103e:	4839      	ldr	r0, [pc, #228]	; (8001124 <MX_GPIO_Init+0x1c8>)
 8001040:	f003 fc10 	bl	8004864 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPS_RST_Pin|GPS_INT_Pin, GPIO_PIN_RESET);
 8001044:	2200      	movs	r2, #0
 8001046:	f44f 6140 	mov.w	r1, #3072	; 0xc00
 800104a:	4837      	ldr	r0, [pc, #220]	; (8001128 <MX_GPIO_Init+0x1cc>)
 800104c:	f003 fc0a 	bl	8004864 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : RS_485_TX_EN_Pin RS_485_RX_EN_Pin */
  GPIO_InitStruct.Pin = RS_485_TX_EN_Pin|RS_485_RX_EN_Pin;
 8001050:	230c      	movs	r3, #12
 8001052:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001054:	2301      	movs	r3, #1
 8001056:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001058:	2300      	movs	r3, #0
 800105a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800105c:	2300      	movs	r3, #0
 800105e:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001060:	f107 031c 	add.w	r3, r7, #28
 8001064:	4619      	mov	r1, r3
 8001066:	482d      	ldr	r0, [pc, #180]	; (800111c <MX_GPIO_Init+0x1c0>)
 8001068:	f003 fa34 	bl	80044d4 <HAL_GPIO_Init>

  /*Configure GPIO pins : TELE_CE_Pin TELE_CS_Pin */
  GPIO_InitStruct.Pin = TELE_CE_Pin|TELE_CS_Pin;
 800106c:	2303      	movs	r3, #3
 800106e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001070:	2301      	movs	r3, #1
 8001072:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001074:	2300      	movs	r3, #0
 8001076:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001078:	2300      	movs	r3, #0
 800107a:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800107c:	f107 031c 	add.w	r3, r7, #28
 8001080:	4619      	mov	r1, r3
 8001082:	4827      	ldr	r0, [pc, #156]	; (8001120 <MX_GPIO_Init+0x1c4>)
 8001084:	f003 fa26 	bl	80044d4 <HAL_GPIO_Init>

  /*Configure GPIO pin : TELE_IRQ_Pin */
  GPIO_InitStruct.Pin = TELE_IRQ_Pin;
 8001088:	2304      	movs	r3, #4
 800108a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800108c:	4b27      	ldr	r3, [pc, #156]	; (800112c <MX_GPIO_Init+0x1d0>)
 800108e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001090:	2300      	movs	r3, #0
 8001092:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(TELE_IRQ_GPIO_Port, &GPIO_InitStruct);
 8001094:	f107 031c 	add.w	r3, r7, #28
 8001098:	4619      	mov	r1, r3
 800109a:	4821      	ldr	r0, [pc, #132]	; (8001120 <MX_GPIO_Init+0x1c4>)
 800109c:	f003 fa1a 	bl	80044d4 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 80010a0:	2301      	movs	r3, #1
 80010a2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80010a4:	2301      	movs	r3, #1
 80010a6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010a8:	2300      	movs	r3, #0
 80010aa:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010ac:	2300      	movs	r3, #0
 80010ae:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 80010b0:	f107 031c 	add.w	r3, r7, #28
 80010b4:	4619      	mov	r1, r3
 80010b6:	481b      	ldr	r0, [pc, #108]	; (8001124 <MX_GPIO_Init+0x1c8>)
 80010b8:	f003 fa0c 	bl	80044d4 <HAL_GPIO_Init>

  /*Configure GPIO pin : BTN_INT_Pin */
  GPIO_InitStruct.Pin = BTN_INT_Pin;
 80010bc:	f44f 7300 	mov.w	r3, #512	; 0x200
 80010c0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80010c2:	4b1a      	ldr	r3, [pc, #104]	; (800112c <MX_GPIO_Init+0x1d0>)
 80010c4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010c6:	2300      	movs	r3, #0
 80010c8:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BTN_INT_GPIO_Port, &GPIO_InitStruct);
 80010ca:	f107 031c 	add.w	r3, r7, #28
 80010ce:	4619      	mov	r1, r3
 80010d0:	4812      	ldr	r0, [pc, #72]	; (800111c <MX_GPIO_Init+0x1c0>)
 80010d2:	f003 f9ff 	bl	80044d4 <HAL_GPIO_Init>

  /*Configure GPIO pins : GPS_RST_Pin GPS_INT_Pin */
  GPIO_InitStruct.Pin = GPS_RST_Pin|GPS_INT_Pin;
 80010d6:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80010da:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80010dc:	2301      	movs	r3, #1
 80010de:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010e0:	2300      	movs	r3, #0
 80010e2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010e4:	2300      	movs	r3, #0
 80010e6:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80010e8:	f107 031c 	add.w	r3, r7, #28
 80010ec:	4619      	mov	r1, r3
 80010ee:	480e      	ldr	r0, [pc, #56]	; (8001128 <MX_GPIO_Init+0x1cc>)
 80010f0:	f003 f9f0 	bl	80044d4 <HAL_GPIO_Init>

  /*Configure GPIO pin : CARD_DET_Pin */
  GPIO_InitStruct.Pin = CARD_DET_Pin;
 80010f4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80010f8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80010fa:	2300      	movs	r3, #0
 80010fc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010fe:	2300      	movs	r3, #0
 8001100:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(CARD_DET_GPIO_Port, &GPIO_InitStruct);
 8001102:	f107 031c 	add.w	r3, r7, #28
 8001106:	4619      	mov	r1, r3
 8001108:	4805      	ldr	r0, [pc, #20]	; (8001120 <MX_GPIO_Init+0x1c4>)
 800110a:	f003 f9e3 	bl	80044d4 <HAL_GPIO_Init>

}
 800110e:	bf00      	nop
 8001110:	3730      	adds	r7, #48	; 0x30
 8001112:	46bd      	mov	sp, r7
 8001114:	bd80      	pop	{r7, pc}
 8001116:	bf00      	nop
 8001118:	58024400 	.word	0x58024400
 800111c:	58021000 	.word	0x58021000
 8001120:	58020000 	.word	0x58020000
 8001124:	58020400 	.word	0x58020400
 8001128:	58020c00 	.word	0x58020c00
 800112c:	11110000 	.word	0x11110000

08001130 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8001130:	b580      	push	{r7, lr}
 8001132:	b082      	sub	sp, #8
 8001134:	af00      	add	r7, sp, #0
 8001136:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
  HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 8001138:	2101      	movs	r1, #1
 800113a:	4803      	ldr	r0, [pc, #12]	; (8001148 <HAL_UART_RxCpltCallback+0x18>)
 800113c:	f003 fbab 	bl	8004896 <HAL_GPIO_TogglePin>
  /*
  for(int i=0; i<BUFFLENGTH; i++){
	  printf("%c", rxBuf[i]);
  }
	*/
}
 8001140:	bf00      	nop
 8001142:	3708      	adds	r7, #8
 8001144:	46bd      	mov	sp, r7
 8001146:	bd80      	pop	{r7, pc}
 8001148:	58020400 	.word	0x58020400

0800114c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800114c:	b480      	push	{r7}
 800114e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001150:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001152:	e7fe      	b.n	8001152 <Error_Handler+0x6>

08001154 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001154:	b480      	push	{r7}
 8001156:	b083      	sub	sp, #12
 8001158:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800115a:	4b0a      	ldr	r3, [pc, #40]	; (8001184 <HAL_MspInit+0x30>)
 800115c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001160:	4a08      	ldr	r2, [pc, #32]	; (8001184 <HAL_MspInit+0x30>)
 8001162:	f043 0302 	orr.w	r3, r3, #2
 8001166:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 800116a:	4b06      	ldr	r3, [pc, #24]	; (8001184 <HAL_MspInit+0x30>)
 800116c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001170:	f003 0302 	and.w	r3, r3, #2
 8001174:	607b      	str	r3, [r7, #4]
 8001176:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001178:	bf00      	nop
 800117a:	370c      	adds	r7, #12
 800117c:	46bd      	mov	sp, r7
 800117e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001182:	4770      	bx	lr
 8001184:	58024400 	.word	0x58024400

08001188 <HAL_FDCAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hfdcan: FDCAN handle pointer
* @retval None
*/
void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* hfdcan)
{
 8001188:	b580      	push	{r7, lr}
 800118a:	b08c      	sub	sp, #48	; 0x30
 800118c:	af00      	add	r7, sp, #0
 800118e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001190:	f107 031c 	add.w	r3, r7, #28
 8001194:	2200      	movs	r2, #0
 8001196:	601a      	str	r2, [r3, #0]
 8001198:	605a      	str	r2, [r3, #4]
 800119a:	609a      	str	r2, [r3, #8]
 800119c:	60da      	str	r2, [r3, #12]
 800119e:	611a      	str	r2, [r3, #16]
  if(hfdcan->Instance==FDCAN1)
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	681b      	ldr	r3, [r3, #0]
 80011a4:	4a3d      	ldr	r2, [pc, #244]	; (800129c <HAL_FDCAN_MspInit+0x114>)
 80011a6:	4293      	cmp	r3, r2
 80011a8:	d138      	bne.n	800121c <HAL_FDCAN_MspInit+0x94>
  {
  /* USER CODE BEGIN FDCAN1_MspInit 0 */

  /* USER CODE END FDCAN1_MspInit 0 */
    /* Peripheral clock enable */
    HAL_RCC_FDCAN_CLK_ENABLED++;
 80011aa:	4b3d      	ldr	r3, [pc, #244]	; (80012a0 <HAL_FDCAN_MspInit+0x118>)
 80011ac:	681b      	ldr	r3, [r3, #0]
 80011ae:	3301      	adds	r3, #1
 80011b0:	4a3b      	ldr	r2, [pc, #236]	; (80012a0 <HAL_FDCAN_MspInit+0x118>)
 80011b2:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_FDCAN_CLK_ENABLED==1){
 80011b4:	4b3a      	ldr	r3, [pc, #232]	; (80012a0 <HAL_FDCAN_MspInit+0x118>)
 80011b6:	681b      	ldr	r3, [r3, #0]
 80011b8:	2b01      	cmp	r3, #1
 80011ba:	d10e      	bne.n	80011da <HAL_FDCAN_MspInit+0x52>
      __HAL_RCC_FDCAN_CLK_ENABLE();
 80011bc:	4b39      	ldr	r3, [pc, #228]	; (80012a4 <HAL_FDCAN_MspInit+0x11c>)
 80011be:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 80011c2:	4a38      	ldr	r2, [pc, #224]	; (80012a4 <HAL_FDCAN_MspInit+0x11c>)
 80011c4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80011c8:	f8c2 30ec 	str.w	r3, [r2, #236]	; 0xec
 80011cc:	4b35      	ldr	r3, [pc, #212]	; (80012a4 <HAL_FDCAN_MspInit+0x11c>)
 80011ce:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 80011d2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80011d6:	61bb      	str	r3, [r7, #24]
 80011d8:	69bb      	ldr	r3, [r7, #24]
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80011da:	4b32      	ldr	r3, [pc, #200]	; (80012a4 <HAL_FDCAN_MspInit+0x11c>)
 80011dc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80011e0:	4a30      	ldr	r2, [pc, #192]	; (80012a4 <HAL_FDCAN_MspInit+0x11c>)
 80011e2:	f043 0302 	orr.w	r3, r3, #2
 80011e6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80011ea:	4b2e      	ldr	r3, [pc, #184]	; (80012a4 <HAL_FDCAN_MspInit+0x11c>)
 80011ec:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80011f0:	f003 0302 	and.w	r3, r3, #2
 80011f4:	617b      	str	r3, [r7, #20]
 80011f6:	697b      	ldr	r3, [r7, #20]
    /**FDCAN1 GPIO Configuration
    PB8     ------> FDCAN1_RX
    PB9     ------> FDCAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80011f8:	f44f 7340 	mov.w	r3, #768	; 0x300
 80011fc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011fe:	2302      	movs	r3, #2
 8001200:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001202:	2300      	movs	r3, #0
 8001204:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001206:	2300      	movs	r3, #0
 8001208:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN1;
 800120a:	2309      	movs	r3, #9
 800120c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800120e:	f107 031c 	add.w	r3, r7, #28
 8001212:	4619      	mov	r1, r3
 8001214:	4824      	ldr	r0, [pc, #144]	; (80012a8 <HAL_FDCAN_MspInit+0x120>)
 8001216:	f003 f95d 	bl	80044d4 <HAL_GPIO_Init>
  /* USER CODE BEGIN FDCAN2_MspInit 1 */

  /* USER CODE END FDCAN2_MspInit 1 */
  }

}
 800121a:	e03b      	b.n	8001294 <HAL_FDCAN_MspInit+0x10c>
  else if(hfdcan->Instance==FDCAN2)
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	681b      	ldr	r3, [r3, #0]
 8001220:	4a22      	ldr	r2, [pc, #136]	; (80012ac <HAL_FDCAN_MspInit+0x124>)
 8001222:	4293      	cmp	r3, r2
 8001224:	d136      	bne.n	8001294 <HAL_FDCAN_MspInit+0x10c>
    HAL_RCC_FDCAN_CLK_ENABLED++;
 8001226:	4b1e      	ldr	r3, [pc, #120]	; (80012a0 <HAL_FDCAN_MspInit+0x118>)
 8001228:	681b      	ldr	r3, [r3, #0]
 800122a:	3301      	adds	r3, #1
 800122c:	4a1c      	ldr	r2, [pc, #112]	; (80012a0 <HAL_FDCAN_MspInit+0x118>)
 800122e:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_FDCAN_CLK_ENABLED==1){
 8001230:	4b1b      	ldr	r3, [pc, #108]	; (80012a0 <HAL_FDCAN_MspInit+0x118>)
 8001232:	681b      	ldr	r3, [r3, #0]
 8001234:	2b01      	cmp	r3, #1
 8001236:	d10e      	bne.n	8001256 <HAL_FDCAN_MspInit+0xce>
      __HAL_RCC_FDCAN_CLK_ENABLE();
 8001238:	4b1a      	ldr	r3, [pc, #104]	; (80012a4 <HAL_FDCAN_MspInit+0x11c>)
 800123a:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 800123e:	4a19      	ldr	r2, [pc, #100]	; (80012a4 <HAL_FDCAN_MspInit+0x11c>)
 8001240:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001244:	f8c2 30ec 	str.w	r3, [r2, #236]	; 0xec
 8001248:	4b16      	ldr	r3, [pc, #88]	; (80012a4 <HAL_FDCAN_MspInit+0x11c>)
 800124a:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 800124e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001252:	613b      	str	r3, [r7, #16]
 8001254:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001256:	4b13      	ldr	r3, [pc, #76]	; (80012a4 <HAL_FDCAN_MspInit+0x11c>)
 8001258:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800125c:	4a11      	ldr	r2, [pc, #68]	; (80012a4 <HAL_FDCAN_MspInit+0x11c>)
 800125e:	f043 0302 	orr.w	r3, r3, #2
 8001262:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001266:	4b0f      	ldr	r3, [pc, #60]	; (80012a4 <HAL_FDCAN_MspInit+0x11c>)
 8001268:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800126c:	f003 0302 	and.w	r3, r3, #2
 8001270:	60fb      	str	r3, [r7, #12]
 8001272:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 8001274:	2360      	movs	r3, #96	; 0x60
 8001276:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001278:	2302      	movs	r3, #2
 800127a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800127c:	2300      	movs	r3, #0
 800127e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001280:	2300      	movs	r3, #0
 8001282:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN2;
 8001284:	2309      	movs	r3, #9
 8001286:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001288:	f107 031c 	add.w	r3, r7, #28
 800128c:	4619      	mov	r1, r3
 800128e:	4806      	ldr	r0, [pc, #24]	; (80012a8 <HAL_FDCAN_MspInit+0x120>)
 8001290:	f003 f920 	bl	80044d4 <HAL_GPIO_Init>
}
 8001294:	bf00      	nop
 8001296:	3730      	adds	r7, #48	; 0x30
 8001298:	46bd      	mov	sp, r7
 800129a:	bd80      	pop	{r7, pc}
 800129c:	4000a000 	.word	0x4000a000
 80012a0:	240001e8 	.word	0x240001e8
 80012a4:	58024400 	.word	0x58024400
 80012a8:	58020400 	.word	0x58020400
 80012ac:	4000a400 	.word	0x4000a400

080012b0 <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 80012b0:	b580      	push	{r7, lr}
 80012b2:	b08a      	sub	sp, #40	; 0x28
 80012b4:	af00      	add	r7, sp, #0
 80012b6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012b8:	f107 0314 	add.w	r3, r7, #20
 80012bc:	2200      	movs	r2, #0
 80012be:	601a      	str	r2, [r3, #0]
 80012c0:	605a      	str	r2, [r3, #4]
 80012c2:	609a      	str	r2, [r3, #8]
 80012c4:	60da      	str	r2, [r3, #12]
 80012c6:	611a      	str	r2, [r3, #16]
  if(hsd->Instance==SDMMC1)
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	681b      	ldr	r3, [r3, #0]
 80012cc:	4a2a      	ldr	r2, [pc, #168]	; (8001378 <HAL_SD_MspInit+0xc8>)
 80012ce:	4293      	cmp	r3, r2
 80012d0:	d14d      	bne.n	800136e <HAL_SD_MspInit+0xbe>
  {
  /* USER CODE BEGIN SDMMC1_MspInit 0 */

  /* USER CODE END SDMMC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SDMMC1_CLK_ENABLE();
 80012d2:	4b2a      	ldr	r3, [pc, #168]	; (800137c <HAL_SD_MspInit+0xcc>)
 80012d4:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 80012d8:	4a28      	ldr	r2, [pc, #160]	; (800137c <HAL_SD_MspInit+0xcc>)
 80012da:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80012de:	f8c2 30d4 	str.w	r3, [r2, #212]	; 0xd4
 80012e2:	4b26      	ldr	r3, [pc, #152]	; (800137c <HAL_SD_MspInit+0xcc>)
 80012e4:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 80012e8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80012ec:	613b      	str	r3, [r7, #16]
 80012ee:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80012f0:	4b22      	ldr	r3, [pc, #136]	; (800137c <HAL_SD_MspInit+0xcc>)
 80012f2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80012f6:	4a21      	ldr	r2, [pc, #132]	; (800137c <HAL_SD_MspInit+0xcc>)
 80012f8:	f043 0304 	orr.w	r3, r3, #4
 80012fc:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001300:	4b1e      	ldr	r3, [pc, #120]	; (800137c <HAL_SD_MspInit+0xcc>)
 8001302:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001306:	f003 0304 	and.w	r3, r3, #4
 800130a:	60fb      	str	r3, [r7, #12]
 800130c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800130e:	4b1b      	ldr	r3, [pc, #108]	; (800137c <HAL_SD_MspInit+0xcc>)
 8001310:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001314:	4a19      	ldr	r2, [pc, #100]	; (800137c <HAL_SD_MspInit+0xcc>)
 8001316:	f043 0308 	orr.w	r3, r3, #8
 800131a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800131e:	4b17      	ldr	r3, [pc, #92]	; (800137c <HAL_SD_MspInit+0xcc>)
 8001320:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001324:	f003 0308 	and.w	r3, r3, #8
 8001328:	60bb      	str	r3, [r7, #8]
 800132a:	68bb      	ldr	r3, [r7, #8]
    PC10     ------> SDMMC1_D2
    PC11     ------> SDMMC1_D3
    PC12     ------> SDMMC1_CK
    PD2     ------> SDMMC1_CMD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 800132c:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 8001330:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_12;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001332:	2302      	movs	r3, #2
 8001334:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001336:	2300      	movs	r3, #0
 8001338:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800133a:	2303      	movs	r3, #3
 800133c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO1;
 800133e:	230c      	movs	r3, #12
 8001340:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001342:	f107 0314 	add.w	r3, r7, #20
 8001346:	4619      	mov	r1, r3
 8001348:	480d      	ldr	r0, [pc, #52]	; (8001380 <HAL_SD_MspInit+0xd0>)
 800134a:	f003 f8c3 	bl	80044d4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 800134e:	2304      	movs	r3, #4
 8001350:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001352:	2302      	movs	r3, #2
 8001354:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001356:	2300      	movs	r3, #0
 8001358:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800135a:	2303      	movs	r3, #3
 800135c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO1;
 800135e:	230c      	movs	r3, #12
 8001360:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001362:	f107 0314 	add.w	r3, r7, #20
 8001366:	4619      	mov	r1, r3
 8001368:	4806      	ldr	r0, [pc, #24]	; (8001384 <HAL_SD_MspInit+0xd4>)
 800136a:	f003 f8b3 	bl	80044d4 <HAL_GPIO_Init>
  /* USER CODE BEGIN SDMMC1_MspInit 1 */

  /* USER CODE END SDMMC1_MspInit 1 */
  }

}
 800136e:	bf00      	nop
 8001370:	3728      	adds	r7, #40	; 0x28
 8001372:	46bd      	mov	sp, r7
 8001374:	bd80      	pop	{r7, pc}
 8001376:	bf00      	nop
 8001378:	52007000 	.word	0x52007000
 800137c:	58024400 	.word	0x58024400
 8001380:	58020800 	.word	0x58020800
 8001384:	58020c00 	.word	0x58020c00

08001388 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001388:	b580      	push	{r7, lr}
 800138a:	b08a      	sub	sp, #40	; 0x28
 800138c:	af00      	add	r7, sp, #0
 800138e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001390:	f107 0314 	add.w	r3, r7, #20
 8001394:	2200      	movs	r2, #0
 8001396:	601a      	str	r2, [r3, #0]
 8001398:	605a      	str	r2, [r3, #4]
 800139a:	609a      	str	r2, [r3, #8]
 800139c:	60da      	str	r2, [r3, #12]
 800139e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	681b      	ldr	r3, [r3, #0]
 80013a4:	4a1a      	ldr	r2, [pc, #104]	; (8001410 <HAL_SPI_MspInit+0x88>)
 80013a6:	4293      	cmp	r3, r2
 80013a8:	d12d      	bne.n	8001406 <HAL_SPI_MspInit+0x7e>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80013aa:	4b1a      	ldr	r3, [pc, #104]	; (8001414 <HAL_SPI_MspInit+0x8c>)
 80013ac:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80013b0:	4a18      	ldr	r2, [pc, #96]	; (8001414 <HAL_SPI_MspInit+0x8c>)
 80013b2:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80013b6:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 80013ba:	4b16      	ldr	r3, [pc, #88]	; (8001414 <HAL_SPI_MspInit+0x8c>)
 80013bc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80013c0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80013c4:	613b      	str	r3, [r7, #16]
 80013c6:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80013c8:	4b12      	ldr	r3, [pc, #72]	; (8001414 <HAL_SPI_MspInit+0x8c>)
 80013ca:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80013ce:	4a11      	ldr	r2, [pc, #68]	; (8001414 <HAL_SPI_MspInit+0x8c>)
 80013d0:	f043 0301 	orr.w	r3, r3, #1
 80013d4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80013d8:	4b0e      	ldr	r3, [pc, #56]	; (8001414 <HAL_SPI_MspInit+0x8c>)
 80013da:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80013de:	f003 0301 	and.w	r3, r3, #1
 80013e2:	60fb      	str	r3, [r7, #12]
 80013e4:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 80013e6:	23e0      	movs	r3, #224	; 0xe0
 80013e8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013ea:	2302      	movs	r3, #2
 80013ec:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013ee:	2300      	movs	r3, #0
 80013f0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013f2:	2300      	movs	r3, #0
 80013f4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80013f6:	2305      	movs	r3, #5
 80013f8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013fa:	f107 0314 	add.w	r3, r7, #20
 80013fe:	4619      	mov	r1, r3
 8001400:	4805      	ldr	r0, [pc, #20]	; (8001418 <HAL_SPI_MspInit+0x90>)
 8001402:	f003 f867 	bl	80044d4 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8001406:	bf00      	nop
 8001408:	3728      	adds	r7, #40	; 0x28
 800140a:	46bd      	mov	sp, r7
 800140c:	bd80      	pop	{r7, pc}
 800140e:	bf00      	nop
 8001410:	40013000 	.word	0x40013000
 8001414:	58024400 	.word	0x58024400
 8001418:	58020000 	.word	0x58020000

0800141c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800141c:	b580      	push	{r7, lr}
 800141e:	b08c      	sub	sp, #48	; 0x30
 8001420:	af00      	add	r7, sp, #0
 8001422:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001424:	f107 031c 	add.w	r3, r7, #28
 8001428:	2200      	movs	r2, #0
 800142a:	601a      	str	r2, [r3, #0]
 800142c:	605a      	str	r2, [r3, #4]
 800142e:	609a      	str	r2, [r3, #8]
 8001430:	60da      	str	r2, [r3, #12]
 8001432:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART8)
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	681b      	ldr	r3, [r3, #0]
 8001438:	4a4b      	ldr	r2, [pc, #300]	; (8001568 <HAL_UART_MspInit+0x14c>)
 800143a:	4293      	cmp	r3, r2
 800143c:	d12e      	bne.n	800149c <HAL_UART_MspInit+0x80>
  {
  /* USER CODE BEGIN UART8_MspInit 0 */

  /* USER CODE END UART8_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART8_CLK_ENABLE();
 800143e:	4b4b      	ldr	r3, [pc, #300]	; (800156c <HAL_UART_MspInit+0x150>)
 8001440:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001444:	4a49      	ldr	r2, [pc, #292]	; (800156c <HAL_UART_MspInit+0x150>)
 8001446:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800144a:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800144e:	4b47      	ldr	r3, [pc, #284]	; (800156c <HAL_UART_MspInit+0x150>)
 8001450:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001454:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8001458:	61bb      	str	r3, [r7, #24]
 800145a:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 800145c:	4b43      	ldr	r3, [pc, #268]	; (800156c <HAL_UART_MspInit+0x150>)
 800145e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001462:	4a42      	ldr	r2, [pc, #264]	; (800156c <HAL_UART_MspInit+0x150>)
 8001464:	f043 0310 	orr.w	r3, r3, #16
 8001468:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800146c:	4b3f      	ldr	r3, [pc, #252]	; (800156c <HAL_UART_MspInit+0x150>)
 800146e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001472:	f003 0310 	and.w	r3, r3, #16
 8001476:	617b      	str	r3, [r7, #20]
 8001478:	697b      	ldr	r3, [r7, #20]
    /**UART8 GPIO Configuration
    PE0     ------> UART8_RX
    PE1     ------> UART8_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800147a:	2303      	movs	r3, #3
 800147c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800147e:	2302      	movs	r3, #2
 8001480:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001482:	2300      	movs	r3, #0
 8001484:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001486:	2300      	movs	r3, #0
 8001488:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_UART8;
 800148a:	2308      	movs	r3, #8
 800148c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800148e:	f107 031c 	add.w	r3, r7, #28
 8001492:	4619      	mov	r1, r3
 8001494:	4836      	ldr	r0, [pc, #216]	; (8001570 <HAL_UART_MspInit+0x154>)
 8001496:	f003 f81d 	bl	80044d4 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 800149a:	e061      	b.n	8001560 <HAL_UART_MspInit+0x144>
  else if(huart->Instance==USART3)
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	681b      	ldr	r3, [r3, #0]
 80014a0:	4a34      	ldr	r2, [pc, #208]	; (8001574 <HAL_UART_MspInit+0x158>)
 80014a2:	4293      	cmp	r3, r2
 80014a4:	d15c      	bne.n	8001560 <HAL_UART_MspInit+0x144>
    __HAL_RCC_USART3_CLK_ENABLE();
 80014a6:	4b31      	ldr	r3, [pc, #196]	; (800156c <HAL_UART_MspInit+0x150>)
 80014a8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80014ac:	4a2f      	ldr	r2, [pc, #188]	; (800156c <HAL_UART_MspInit+0x150>)
 80014ae:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80014b2:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80014b6:	4b2d      	ldr	r3, [pc, #180]	; (800156c <HAL_UART_MspInit+0x150>)
 80014b8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80014bc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80014c0:	613b      	str	r3, [r7, #16]
 80014c2:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80014c4:	4b29      	ldr	r3, [pc, #164]	; (800156c <HAL_UART_MspInit+0x150>)
 80014c6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80014ca:	4a28      	ldr	r2, [pc, #160]	; (800156c <HAL_UART_MspInit+0x150>)
 80014cc:	f043 0308 	orr.w	r3, r3, #8
 80014d0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80014d4:	4b25      	ldr	r3, [pc, #148]	; (800156c <HAL_UART_MspInit+0x150>)
 80014d6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80014da:	f003 0308 	and.w	r3, r3, #8
 80014de:	60fb      	str	r3, [r7, #12]
 80014e0:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80014e2:	f44f 7340 	mov.w	r3, #768	; 0x300
 80014e6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014e8:	2302      	movs	r3, #2
 80014ea:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014ec:	2300      	movs	r3, #0
 80014ee:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014f0:	2300      	movs	r3, #0
 80014f2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80014f4:	2307      	movs	r3, #7
 80014f6:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80014f8:	f107 031c 	add.w	r3, r7, #28
 80014fc:	4619      	mov	r1, r3
 80014fe:	481e      	ldr	r0, [pc, #120]	; (8001578 <HAL_UART_MspInit+0x15c>)
 8001500:	f002 ffe8 	bl	80044d4 <HAL_GPIO_Init>
    hdma_usart3_rx.Instance = DMA1_Stream0;
 8001504:	4b1d      	ldr	r3, [pc, #116]	; (800157c <HAL_UART_MspInit+0x160>)
 8001506:	4a1e      	ldr	r2, [pc, #120]	; (8001580 <HAL_UART_MspInit+0x164>)
 8001508:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Request = DMA_REQUEST_USART3_RX;
 800150a:	4b1c      	ldr	r3, [pc, #112]	; (800157c <HAL_UART_MspInit+0x160>)
 800150c:	222d      	movs	r2, #45	; 0x2d
 800150e:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001510:	4b1a      	ldr	r3, [pc, #104]	; (800157c <HAL_UART_MspInit+0x160>)
 8001512:	2200      	movs	r2, #0
 8001514:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001516:	4b19      	ldr	r3, [pc, #100]	; (800157c <HAL_UART_MspInit+0x160>)
 8001518:	2200      	movs	r2, #0
 800151a:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 800151c:	4b17      	ldr	r3, [pc, #92]	; (800157c <HAL_UART_MspInit+0x160>)
 800151e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001522:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001524:	4b15      	ldr	r3, [pc, #84]	; (800157c <HAL_UART_MspInit+0x160>)
 8001526:	2200      	movs	r2, #0
 8001528:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800152a:	4b14      	ldr	r3, [pc, #80]	; (800157c <HAL_UART_MspInit+0x160>)
 800152c:	2200      	movs	r2, #0
 800152e:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Mode = DMA_CIRCULAR;
 8001530:	4b12      	ldr	r3, [pc, #72]	; (800157c <HAL_UART_MspInit+0x160>)
 8001532:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001536:	61da      	str	r2, [r3, #28]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001538:	4b10      	ldr	r3, [pc, #64]	; (800157c <HAL_UART_MspInit+0x160>)
 800153a:	2200      	movs	r2, #0
 800153c:	621a      	str	r2, [r3, #32]
    hdma_usart3_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800153e:	4b0f      	ldr	r3, [pc, #60]	; (800157c <HAL_UART_MspInit+0x160>)
 8001540:	2200      	movs	r2, #0
 8001542:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 8001544:	480d      	ldr	r0, [pc, #52]	; (800157c <HAL_UART_MspInit+0x160>)
 8001546:	f000 fb85 	bl	8001c54 <HAL_DMA_Init>
 800154a:	4603      	mov	r3, r0
 800154c:	2b00      	cmp	r3, #0
 800154e:	d001      	beq.n	8001554 <HAL_UART_MspInit+0x138>
      Error_Handler();
 8001550:	f7ff fdfc 	bl	800114c <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart3_rx);
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	4a09      	ldr	r2, [pc, #36]	; (800157c <HAL_UART_MspInit+0x160>)
 8001558:	679a      	str	r2, [r3, #120]	; 0x78
 800155a:	4a08      	ldr	r2, [pc, #32]	; (800157c <HAL_UART_MspInit+0x160>)
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	6393      	str	r3, [r2, #56]	; 0x38
}
 8001560:	bf00      	nop
 8001562:	3730      	adds	r7, #48	; 0x30
 8001564:	46bd      	mov	sp, r7
 8001566:	bd80      	pop	{r7, pc}
 8001568:	40007c00 	.word	0x40007c00
 800156c:	58024400 	.word	0x58024400
 8001570:	58021000 	.word	0x58021000
 8001574:	40004800 	.word	0x40004800
 8001578:	58020c00 	.word	0x58020c00
 800157c:	24000208 	.word	0x24000208
 8001580:	40020010 	.word	0x40020010

08001584 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001584:	b480      	push	{r7}
 8001586:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001588:	e7fe      	b.n	8001588 <NMI_Handler+0x4>

0800158a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800158a:	b480      	push	{r7}
 800158c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800158e:	e7fe      	b.n	800158e <HardFault_Handler+0x4>

08001590 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001590:	b480      	push	{r7}
 8001592:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001594:	e7fe      	b.n	8001594 <MemManage_Handler+0x4>

08001596 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001596:	b480      	push	{r7}
 8001598:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800159a:	e7fe      	b.n	800159a <BusFault_Handler+0x4>

0800159c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800159c:	b480      	push	{r7}
 800159e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80015a0:	e7fe      	b.n	80015a0 <UsageFault_Handler+0x4>

080015a2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80015a2:	b480      	push	{r7}
 80015a4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80015a6:	bf00      	nop
 80015a8:	46bd      	mov	sp, r7
 80015aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ae:	4770      	bx	lr

080015b0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80015b0:	b480      	push	{r7}
 80015b2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80015b4:	bf00      	nop
 80015b6:	46bd      	mov	sp, r7
 80015b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015bc:	4770      	bx	lr

080015be <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80015be:	b480      	push	{r7}
 80015c0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80015c2:	bf00      	nop
 80015c4:	46bd      	mov	sp, r7
 80015c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ca:	4770      	bx	lr

080015cc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80015cc:	b580      	push	{r7, lr}
 80015ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80015d0:	f000 f9e2 	bl	8001998 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80015d4:	bf00      	nop
 80015d6:	bd80      	pop	{r7, pc}

080015d8 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 80015d8:	b580      	push	{r7, lr}
 80015da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 80015dc:	4802      	ldr	r0, [pc, #8]	; (80015e8 <DMA1_Stream0_IRQHandler+0x10>)
 80015de:	f001 f8ff 	bl	80027e0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 80015e2:	bf00      	nop
 80015e4:	bd80      	pop	{r7, pc}
 80015e6:	bf00      	nop
 80015e8:	24000208 	.word	0x24000208

080015ec <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 80015ec:	b580      	push	{r7, lr}
 80015ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 80015f0:	4802      	ldr	r0, [pc, #8]	; (80015fc <OTG_FS_IRQHandler+0x10>)
 80015f2:	f003 fac2 	bl	8004b7a <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 80015f6:	bf00      	nop
 80015f8:	bd80      	pop	{r7, pc}
 80015fa:	bf00      	nop
 80015fc:	24000f64 	.word	0x24000f64

08001600 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001600:	b580      	push	{r7, lr}
 8001602:	b086      	sub	sp, #24
 8001604:	af00      	add	r7, sp, #0
 8001606:	60f8      	str	r0, [r7, #12]
 8001608:	60b9      	str	r1, [r7, #8]
 800160a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800160c:	2300      	movs	r3, #0
 800160e:	617b      	str	r3, [r7, #20]
 8001610:	e00a      	b.n	8001628 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001612:	f3af 8000 	nop.w
 8001616:	4601      	mov	r1, r0
 8001618:	68bb      	ldr	r3, [r7, #8]
 800161a:	1c5a      	adds	r2, r3, #1
 800161c:	60ba      	str	r2, [r7, #8]
 800161e:	b2ca      	uxtb	r2, r1
 8001620:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001622:	697b      	ldr	r3, [r7, #20]
 8001624:	3301      	adds	r3, #1
 8001626:	617b      	str	r3, [r7, #20]
 8001628:	697a      	ldr	r2, [r7, #20]
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	429a      	cmp	r2, r3
 800162e:	dbf0      	blt.n	8001612 <_read+0x12>
	}

return len;
 8001630:	687b      	ldr	r3, [r7, #4]
}
 8001632:	4618      	mov	r0, r3
 8001634:	3718      	adds	r7, #24
 8001636:	46bd      	mov	sp, r7
 8001638:	bd80      	pop	{r7, pc}

0800163a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800163a:	b580      	push	{r7, lr}
 800163c:	b086      	sub	sp, #24
 800163e:	af00      	add	r7, sp, #0
 8001640:	60f8      	str	r0, [r7, #12]
 8001642:	60b9      	str	r1, [r7, #8]
 8001644:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001646:	2300      	movs	r3, #0
 8001648:	617b      	str	r3, [r7, #20]
 800164a:	e009      	b.n	8001660 <_write+0x26>
	{
		__io_putchar(*ptr++);
 800164c:	68bb      	ldr	r3, [r7, #8]
 800164e:	1c5a      	adds	r2, r3, #1
 8001650:	60ba      	str	r2, [r7, #8]
 8001652:	781b      	ldrb	r3, [r3, #0]
 8001654:	4618      	mov	r0, r3
 8001656:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800165a:	697b      	ldr	r3, [r7, #20]
 800165c:	3301      	adds	r3, #1
 800165e:	617b      	str	r3, [r7, #20]
 8001660:	697a      	ldr	r2, [r7, #20]
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	429a      	cmp	r2, r3
 8001666:	dbf1      	blt.n	800164c <_write+0x12>
	}
	return len;
 8001668:	687b      	ldr	r3, [r7, #4]
}
 800166a:	4618      	mov	r0, r3
 800166c:	3718      	adds	r7, #24
 800166e:	46bd      	mov	sp, r7
 8001670:	bd80      	pop	{r7, pc}

08001672 <_close>:

int _close(int file)
{
 8001672:	b480      	push	{r7}
 8001674:	b083      	sub	sp, #12
 8001676:	af00      	add	r7, sp, #0
 8001678:	6078      	str	r0, [r7, #4]
	return -1;
 800167a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800167e:	4618      	mov	r0, r3
 8001680:	370c      	adds	r7, #12
 8001682:	46bd      	mov	sp, r7
 8001684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001688:	4770      	bx	lr

0800168a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800168a:	b480      	push	{r7}
 800168c:	b083      	sub	sp, #12
 800168e:	af00      	add	r7, sp, #0
 8001690:	6078      	str	r0, [r7, #4]
 8001692:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001694:	683b      	ldr	r3, [r7, #0]
 8001696:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800169a:	605a      	str	r2, [r3, #4]
	return 0;
 800169c:	2300      	movs	r3, #0
}
 800169e:	4618      	mov	r0, r3
 80016a0:	370c      	adds	r7, #12
 80016a2:	46bd      	mov	sp, r7
 80016a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016a8:	4770      	bx	lr

080016aa <_isatty>:

int _isatty(int file)
{
 80016aa:	b480      	push	{r7}
 80016ac:	b083      	sub	sp, #12
 80016ae:	af00      	add	r7, sp, #0
 80016b0:	6078      	str	r0, [r7, #4]
	return 1;
 80016b2:	2301      	movs	r3, #1
}
 80016b4:	4618      	mov	r0, r3
 80016b6:	370c      	adds	r7, #12
 80016b8:	46bd      	mov	sp, r7
 80016ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016be:	4770      	bx	lr

080016c0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80016c0:	b480      	push	{r7}
 80016c2:	b085      	sub	sp, #20
 80016c4:	af00      	add	r7, sp, #0
 80016c6:	60f8      	str	r0, [r7, #12]
 80016c8:	60b9      	str	r1, [r7, #8]
 80016ca:	607a      	str	r2, [r7, #4]
	return 0;
 80016cc:	2300      	movs	r3, #0
}
 80016ce:	4618      	mov	r0, r3
 80016d0:	3714      	adds	r7, #20
 80016d2:	46bd      	mov	sp, r7
 80016d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016d8:	4770      	bx	lr
	...

080016dc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80016dc:	b580      	push	{r7, lr}
 80016de:	b086      	sub	sp, #24
 80016e0:	af00      	add	r7, sp, #0
 80016e2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80016e4:	4a14      	ldr	r2, [pc, #80]	; (8001738 <_sbrk+0x5c>)
 80016e6:	4b15      	ldr	r3, [pc, #84]	; (800173c <_sbrk+0x60>)
 80016e8:	1ad3      	subs	r3, r2, r3
 80016ea:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80016ec:	697b      	ldr	r3, [r7, #20]
 80016ee:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80016f0:	4b13      	ldr	r3, [pc, #76]	; (8001740 <_sbrk+0x64>)
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	2b00      	cmp	r3, #0
 80016f6:	d102      	bne.n	80016fe <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80016f8:	4b11      	ldr	r3, [pc, #68]	; (8001740 <_sbrk+0x64>)
 80016fa:	4a12      	ldr	r2, [pc, #72]	; (8001744 <_sbrk+0x68>)
 80016fc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80016fe:	4b10      	ldr	r3, [pc, #64]	; (8001740 <_sbrk+0x64>)
 8001700:	681a      	ldr	r2, [r3, #0]
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	4413      	add	r3, r2
 8001706:	693a      	ldr	r2, [r7, #16]
 8001708:	429a      	cmp	r2, r3
 800170a:	d207      	bcs.n	800171c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800170c:	f00f fe06 	bl	801131c <__errno>
 8001710:	4602      	mov	r2, r0
 8001712:	230c      	movs	r3, #12
 8001714:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 8001716:	f04f 33ff 	mov.w	r3, #4294967295
 800171a:	e009      	b.n	8001730 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800171c:	4b08      	ldr	r3, [pc, #32]	; (8001740 <_sbrk+0x64>)
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001722:	4b07      	ldr	r3, [pc, #28]	; (8001740 <_sbrk+0x64>)
 8001724:	681a      	ldr	r2, [r3, #0]
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	4413      	add	r3, r2
 800172a:	4a05      	ldr	r2, [pc, #20]	; (8001740 <_sbrk+0x64>)
 800172c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800172e:	68fb      	ldr	r3, [r7, #12]
}
 8001730:	4618      	mov	r0, r3
 8001732:	3718      	adds	r7, #24
 8001734:	46bd      	mov	sp, r7
 8001736:	bd80      	pop	{r7, pc}
 8001738:	24080000 	.word	0x24080000
 800173c:	00000400 	.word	0x00000400
 8001740:	240001ec 	.word	0x240001ec
 8001744:	24001370 	.word	0x24001370

08001748 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001748:	b480      	push	{r7}
 800174a:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 800174c:	4b39      	ldr	r3, [pc, #228]	; (8001834 <SystemInit+0xec>)
 800174e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001752:	4a38      	ldr	r2, [pc, #224]	; (8001834 <SystemInit+0xec>)
 8001754:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001758:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800175c:	4b36      	ldr	r3, [pc, #216]	; (8001838 <SystemInit+0xf0>)
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	f003 030f 	and.w	r3, r3, #15
 8001764:	2b06      	cmp	r3, #6
 8001766:	d807      	bhi.n	8001778 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001768:	4b33      	ldr	r3, [pc, #204]	; (8001838 <SystemInit+0xf0>)
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	f023 030f 	bic.w	r3, r3, #15
 8001770:	4a31      	ldr	r2, [pc, #196]	; (8001838 <SystemInit+0xf0>)
 8001772:	f043 0307 	orr.w	r3, r3, #7
 8001776:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8001778:	4b30      	ldr	r3, [pc, #192]	; (800183c <SystemInit+0xf4>)
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	4a2f      	ldr	r2, [pc, #188]	; (800183c <SystemInit+0xf4>)
 800177e:	f043 0301 	orr.w	r3, r3, #1
 8001782:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8001784:	4b2d      	ldr	r3, [pc, #180]	; (800183c <SystemInit+0xf4>)
 8001786:	2200      	movs	r2, #0
 8001788:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 800178a:	4b2c      	ldr	r3, [pc, #176]	; (800183c <SystemInit+0xf4>)
 800178c:	681a      	ldr	r2, [r3, #0]
 800178e:	492b      	ldr	r1, [pc, #172]	; (800183c <SystemInit+0xf4>)
 8001790:	4b2b      	ldr	r3, [pc, #172]	; (8001840 <SystemInit+0xf8>)
 8001792:	4013      	ands	r3, r2
 8001794:	600b      	str	r3, [r1, #0]
  
   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001796:	4b28      	ldr	r3, [pc, #160]	; (8001838 <SystemInit+0xf0>)
 8001798:	681b      	ldr	r3, [r3, #0]
 800179a:	f003 030f 	and.w	r3, r3, #15
 800179e:	2b07      	cmp	r3, #7
 80017a0:	d907      	bls.n	80017b2 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80017a2:	4b25      	ldr	r3, [pc, #148]	; (8001838 <SystemInit+0xf0>)
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	f023 030f 	bic.w	r3, r3, #15
 80017aa:	4a23      	ldr	r2, [pc, #140]	; (8001838 <SystemInit+0xf0>)
 80017ac:	f043 0307 	orr.w	r3, r3, #7
 80017b0:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 80017b2:	4b22      	ldr	r3, [pc, #136]	; (800183c <SystemInit+0xf4>)
 80017b4:	2200      	movs	r2, #0
 80017b6:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 80017b8:	4b20      	ldr	r3, [pc, #128]	; (800183c <SystemInit+0xf4>)
 80017ba:	2200      	movs	r2, #0
 80017bc:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 80017be:	4b1f      	ldr	r3, [pc, #124]	; (800183c <SystemInit+0xf4>)
 80017c0:	2200      	movs	r2, #0
 80017c2:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 80017c4:	4b1d      	ldr	r3, [pc, #116]	; (800183c <SystemInit+0xf4>)
 80017c6:	4a1f      	ldr	r2, [pc, #124]	; (8001844 <SystemInit+0xfc>)
 80017c8:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 80017ca:	4b1c      	ldr	r3, [pc, #112]	; (800183c <SystemInit+0xf4>)
 80017cc:	4a1e      	ldr	r2, [pc, #120]	; (8001848 <SystemInit+0x100>)
 80017ce:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 80017d0:	4b1a      	ldr	r3, [pc, #104]	; (800183c <SystemInit+0xf4>)
 80017d2:	4a1e      	ldr	r2, [pc, #120]	; (800184c <SystemInit+0x104>)
 80017d4:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 80017d6:	4b19      	ldr	r3, [pc, #100]	; (800183c <SystemInit+0xf4>)
 80017d8:	2200      	movs	r2, #0
 80017da:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 80017dc:	4b17      	ldr	r3, [pc, #92]	; (800183c <SystemInit+0xf4>)
 80017de:	4a1b      	ldr	r2, [pc, #108]	; (800184c <SystemInit+0x104>)
 80017e0:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 80017e2:	4b16      	ldr	r3, [pc, #88]	; (800183c <SystemInit+0xf4>)
 80017e4:	2200      	movs	r2, #0
 80017e6:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 80017e8:	4b14      	ldr	r3, [pc, #80]	; (800183c <SystemInit+0xf4>)
 80017ea:	4a18      	ldr	r2, [pc, #96]	; (800184c <SystemInit+0x104>)
 80017ec:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 80017ee:	4b13      	ldr	r3, [pc, #76]	; (800183c <SystemInit+0xf4>)
 80017f0:	2200      	movs	r2, #0
 80017f2:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80017f4:	4b11      	ldr	r3, [pc, #68]	; (800183c <SystemInit+0xf4>)
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	4a10      	ldr	r2, [pc, #64]	; (800183c <SystemInit+0xf4>)
 80017fa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80017fe:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8001800:	4b0e      	ldr	r3, [pc, #56]	; (800183c <SystemInit+0xf4>)
 8001802:	2200      	movs	r2, #0
 8001804:	661a      	str	r2, [r3, #96]	; 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8001806:	4b12      	ldr	r3, [pc, #72]	; (8001850 <SystemInit+0x108>)
 8001808:	681a      	ldr	r2, [r3, #0]
 800180a:	4b12      	ldr	r3, [pc, #72]	; (8001854 <SystemInit+0x10c>)
 800180c:	4013      	ands	r3, r2
 800180e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001812:	d202      	bcs.n	800181a <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8001814:	4b10      	ldr	r3, [pc, #64]	; (8001858 <SystemInit+0x110>)
 8001816:	2201      	movs	r2, #1
 8001818:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 800181a:	4b10      	ldr	r3, [pc, #64]	; (800185c <SystemInit+0x114>)
 800181c:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8001820:	601a      	str	r2, [r3, #0]

  /* Configure the Vector Table location add offset address for cortex-M7 ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D1_AXISRAM_BASE  | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal AXI-RAM */
#else
  SCB->VTOR = FLASH_BANK1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001822:	4b04      	ldr	r3, [pc, #16]	; (8001834 <SystemInit+0xec>)
 8001824:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001828:	609a      	str	r2, [r3, #8]
#endif

#endif /*DUAL_CORE && CORE_CM4*/

}
 800182a:	bf00      	nop
 800182c:	46bd      	mov	sp, r7
 800182e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001832:	4770      	bx	lr
 8001834:	e000ed00 	.word	0xe000ed00
 8001838:	52002000 	.word	0x52002000
 800183c:	58024400 	.word	0x58024400
 8001840:	eaf6ed7f 	.word	0xeaf6ed7f
 8001844:	02020200 	.word	0x02020200
 8001848:	01ff0000 	.word	0x01ff0000
 800184c:	01010280 	.word	0x01010280
 8001850:	5c001000 	.word	0x5c001000
 8001854:	ffff0000 	.word	0xffff0000
 8001858:	51008108 	.word	0x51008108
 800185c:	52004000 	.word	0x52004000

08001860 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001860:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001898 <LoopFillZerobss+0x10>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8001864:	f7ff ff70 	bl	8001748 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8001868:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800186a:	e003      	b.n	8001874 <LoopCopyDataInit>

0800186c <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 800186c:	4b0b      	ldr	r3, [pc, #44]	; (800189c <LoopFillZerobss+0x14>)
  ldr  r3, [r3, r1]
 800186e:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8001870:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8001872:	3104      	adds	r1, #4

08001874 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8001874:	480a      	ldr	r0, [pc, #40]	; (80018a0 <LoopFillZerobss+0x18>)
  ldr  r3, =_edata
 8001876:	4b0b      	ldr	r3, [pc, #44]	; (80018a4 <LoopFillZerobss+0x1c>)
  adds  r2, r0, r1
 8001878:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800187a:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 800187c:	d3f6      	bcc.n	800186c <CopyDataInit>
  ldr  r2, =_sbss
 800187e:	4a0a      	ldr	r2, [pc, #40]	; (80018a8 <LoopFillZerobss+0x20>)
  b  LoopFillZerobss
 8001880:	e002      	b.n	8001888 <LoopFillZerobss>

08001882 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8001882:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8001884:	f842 3b04 	str.w	r3, [r2], #4

08001888 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8001888:	4b08      	ldr	r3, [pc, #32]	; (80018ac <LoopFillZerobss+0x24>)
  cmp  r2, r3
 800188a:	429a      	cmp	r2, r3
  bcc  FillZerobss
 800188c:	d3f9      	bcc.n	8001882 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800188e:	f00f fd4b 	bl	8011328 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001892:	f7fe ffd1 	bl	8000838 <main>
  bx  lr    
 8001896:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001898:	24080000 	.word	0x24080000
  ldr  r3, =_sidata
 800189c:	08012774 	.word	0x08012774
  ldr  r0, =_sdata
 80018a0:	24000000 	.word	0x24000000
  ldr  r3, =_edata
 80018a4:	240001cc 	.word	0x240001cc
  ldr  r2, =_sbss
 80018a8:	240001cc 	.word	0x240001cc
  ldr  r3, = _ebss
 80018ac:	24001370 	.word	0x24001370

080018b0 <ADC3_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80018b0:	e7fe      	b.n	80018b0 <ADC3_IRQHandler>
	...

080018b4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80018b4:	b580      	push	{r7, lr}
 80018b6:	b082      	sub	sp, #8
 80018b8:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80018ba:	2003      	movs	r0, #3
 80018bc:	f000 f98a 	bl	8001bd4 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80018c0:	f005 f81c 	bl	80068fc <HAL_RCC_GetSysClockFreq>
 80018c4:	4601      	mov	r1, r0
 80018c6:	4b15      	ldr	r3, [pc, #84]	; (800191c <HAL_Init+0x68>)
 80018c8:	699b      	ldr	r3, [r3, #24]
 80018ca:	0a1b      	lsrs	r3, r3, #8
 80018cc:	f003 030f 	and.w	r3, r3, #15
 80018d0:	4a13      	ldr	r2, [pc, #76]	; (8001920 <HAL_Init+0x6c>)
 80018d2:	5cd3      	ldrb	r3, [r2, r3]
 80018d4:	f003 031f 	and.w	r3, r3, #31
 80018d8:	fa21 f303 	lsr.w	r3, r1, r3
 80018dc:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80018de:	4b0f      	ldr	r3, [pc, #60]	; (800191c <HAL_Init+0x68>)
 80018e0:	699b      	ldr	r3, [r3, #24]
 80018e2:	f003 030f 	and.w	r3, r3, #15
 80018e6:	4a0e      	ldr	r2, [pc, #56]	; (8001920 <HAL_Init+0x6c>)
 80018e8:	5cd3      	ldrb	r3, [r2, r3]
 80018ea:	f003 031f 	and.w	r3, r3, #31
 80018ee:	687a      	ldr	r2, [r7, #4]
 80018f0:	fa22 f303 	lsr.w	r3, r2, r3
 80018f4:	4a0b      	ldr	r2, [pc, #44]	; (8001924 <HAL_Init+0x70>)
 80018f6:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80018f8:	4a0b      	ldr	r2, [pc, #44]	; (8001928 <HAL_Init+0x74>)
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80018fe:	2000      	movs	r0, #0
 8001900:	f000 f814 	bl	800192c <HAL_InitTick>
 8001904:	4603      	mov	r3, r0
 8001906:	2b00      	cmp	r3, #0
 8001908:	d001      	beq.n	800190e <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 800190a:	2301      	movs	r3, #1
 800190c:	e002      	b.n	8001914 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 800190e:	f7ff fc21 	bl	8001154 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001912:	2300      	movs	r3, #0
}
 8001914:	4618      	mov	r0, r3
 8001916:	3708      	adds	r7, #8
 8001918:	46bd      	mov	sp, r7
 800191a:	bd80      	pop	{r7, pc}
 800191c:	58024400 	.word	0x58024400
 8001920:	08012664 	.word	0x08012664
 8001924:	24000004 	.word	0x24000004
 8001928:	24000000 	.word	0x24000000

0800192c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800192c:	b580      	push	{r7, lr}
 800192e:	b082      	sub	sp, #8
 8001930:	af00      	add	r7, sp, #0
 8001932:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8001934:	4b15      	ldr	r3, [pc, #84]	; (800198c <HAL_InitTick+0x60>)
 8001936:	781b      	ldrb	r3, [r3, #0]
 8001938:	2b00      	cmp	r3, #0
 800193a:	d101      	bne.n	8001940 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 800193c:	2301      	movs	r3, #1
 800193e:	e021      	b.n	8001984 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8001940:	4b13      	ldr	r3, [pc, #76]	; (8001990 <HAL_InitTick+0x64>)
 8001942:	681a      	ldr	r2, [r3, #0]
 8001944:	4b11      	ldr	r3, [pc, #68]	; (800198c <HAL_InitTick+0x60>)
 8001946:	781b      	ldrb	r3, [r3, #0]
 8001948:	4619      	mov	r1, r3
 800194a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800194e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001952:	fbb2 f3f3 	udiv	r3, r2, r3
 8001956:	4618      	mov	r0, r3
 8001958:	f000 f96f 	bl	8001c3a <HAL_SYSTICK_Config>
 800195c:	4603      	mov	r3, r0
 800195e:	2b00      	cmp	r3, #0
 8001960:	d001      	beq.n	8001966 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8001962:	2301      	movs	r3, #1
 8001964:	e00e      	b.n	8001984 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	2b0f      	cmp	r3, #15
 800196a:	d80a      	bhi.n	8001982 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800196c:	2200      	movs	r2, #0
 800196e:	6879      	ldr	r1, [r7, #4]
 8001970:	f04f 30ff 	mov.w	r0, #4294967295
 8001974:	f000 f939 	bl	8001bea <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001978:	4a06      	ldr	r2, [pc, #24]	; (8001994 <HAL_InitTick+0x68>)
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800197e:	2300      	movs	r3, #0
 8001980:	e000      	b.n	8001984 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8001982:	2301      	movs	r3, #1
}
 8001984:	4618      	mov	r0, r3
 8001986:	3708      	adds	r7, #8
 8001988:	46bd      	mov	sp, r7
 800198a:	bd80      	pop	{r7, pc}
 800198c:	2400000c 	.word	0x2400000c
 8001990:	24000000 	.word	0x24000000
 8001994:	24000008 	.word	0x24000008

08001998 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001998:	b480      	push	{r7}
 800199a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800199c:	4b06      	ldr	r3, [pc, #24]	; (80019b8 <HAL_IncTick+0x20>)
 800199e:	781b      	ldrb	r3, [r3, #0]
 80019a0:	461a      	mov	r2, r3
 80019a2:	4b06      	ldr	r3, [pc, #24]	; (80019bc <HAL_IncTick+0x24>)
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	4413      	add	r3, r2
 80019a8:	4a04      	ldr	r2, [pc, #16]	; (80019bc <HAL_IncTick+0x24>)
 80019aa:	6013      	str	r3, [r2, #0]
}
 80019ac:	bf00      	nop
 80019ae:	46bd      	mov	sp, r7
 80019b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019b4:	4770      	bx	lr
 80019b6:	bf00      	nop
 80019b8:	2400000c 	.word	0x2400000c
 80019bc:	24000628 	.word	0x24000628

080019c0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80019c0:	b480      	push	{r7}
 80019c2:	af00      	add	r7, sp, #0
  return uwTick;
 80019c4:	4b03      	ldr	r3, [pc, #12]	; (80019d4 <HAL_GetTick+0x14>)
 80019c6:	681b      	ldr	r3, [r3, #0]
}
 80019c8:	4618      	mov	r0, r3
 80019ca:	46bd      	mov	sp, r7
 80019cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019d0:	4770      	bx	lr
 80019d2:	bf00      	nop
 80019d4:	24000628 	.word	0x24000628

080019d8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80019d8:	b580      	push	{r7, lr}
 80019da:	b084      	sub	sp, #16
 80019dc:	af00      	add	r7, sp, #0
 80019de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80019e0:	f7ff ffee 	bl	80019c0 <HAL_GetTick>
 80019e4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80019ea:	68fb      	ldr	r3, [r7, #12]
 80019ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80019f0:	d005      	beq.n	80019fe <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80019f2:	4b09      	ldr	r3, [pc, #36]	; (8001a18 <HAL_Delay+0x40>)
 80019f4:	781b      	ldrb	r3, [r3, #0]
 80019f6:	461a      	mov	r2, r3
 80019f8:	68fb      	ldr	r3, [r7, #12]
 80019fa:	4413      	add	r3, r2
 80019fc:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80019fe:	bf00      	nop
 8001a00:	f7ff ffde 	bl	80019c0 <HAL_GetTick>
 8001a04:	4602      	mov	r2, r0
 8001a06:	68bb      	ldr	r3, [r7, #8]
 8001a08:	1ad3      	subs	r3, r2, r3
 8001a0a:	68fa      	ldr	r2, [r7, #12]
 8001a0c:	429a      	cmp	r2, r3
 8001a0e:	d8f7      	bhi.n	8001a00 <HAL_Delay+0x28>
  {
  }
}
 8001a10:	bf00      	nop
 8001a12:	3710      	adds	r7, #16
 8001a14:	46bd      	mov	sp, r7
 8001a16:	bd80      	pop	{r7, pc}
 8001a18:	2400000c 	.word	0x2400000c

08001a1c <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8001a1c:	b480      	push	{r7}
 8001a1e:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8001a20:	4b03      	ldr	r3, [pc, #12]	; (8001a30 <HAL_GetREVID+0x14>)
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	0c1b      	lsrs	r3, r3, #16
}
 8001a26:	4618      	mov	r0, r3
 8001a28:	46bd      	mov	sp, r7
 8001a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a2e:	4770      	bx	lr
 8001a30:	5c001000 	.word	0x5c001000

08001a34 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001a34:	b480      	push	{r7}
 8001a36:	b085      	sub	sp, #20
 8001a38:	af00      	add	r7, sp, #0
 8001a3a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	f003 0307 	and.w	r3, r3, #7
 8001a42:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001a44:	4b0b      	ldr	r3, [pc, #44]	; (8001a74 <__NVIC_SetPriorityGrouping+0x40>)
 8001a46:	68db      	ldr	r3, [r3, #12]
 8001a48:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001a4a:	68ba      	ldr	r2, [r7, #8]
 8001a4c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001a50:	4013      	ands	r3, r2
 8001a52:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001a54:	68fb      	ldr	r3, [r7, #12]
 8001a56:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001a58:	68bb      	ldr	r3, [r7, #8]
 8001a5a:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001a5c:	4b06      	ldr	r3, [pc, #24]	; (8001a78 <__NVIC_SetPriorityGrouping+0x44>)
 8001a5e:	4313      	orrs	r3, r2
 8001a60:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001a62:	4a04      	ldr	r2, [pc, #16]	; (8001a74 <__NVIC_SetPriorityGrouping+0x40>)
 8001a64:	68bb      	ldr	r3, [r7, #8]
 8001a66:	60d3      	str	r3, [r2, #12]
}
 8001a68:	bf00      	nop
 8001a6a:	3714      	adds	r7, #20
 8001a6c:	46bd      	mov	sp, r7
 8001a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a72:	4770      	bx	lr
 8001a74:	e000ed00 	.word	0xe000ed00
 8001a78:	05fa0000 	.word	0x05fa0000

08001a7c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001a7c:	b480      	push	{r7}
 8001a7e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001a80:	4b04      	ldr	r3, [pc, #16]	; (8001a94 <__NVIC_GetPriorityGrouping+0x18>)
 8001a82:	68db      	ldr	r3, [r3, #12]
 8001a84:	0a1b      	lsrs	r3, r3, #8
 8001a86:	f003 0307 	and.w	r3, r3, #7
}
 8001a8a:	4618      	mov	r0, r3
 8001a8c:	46bd      	mov	sp, r7
 8001a8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a92:	4770      	bx	lr
 8001a94:	e000ed00 	.word	0xe000ed00

08001a98 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001a98:	b480      	push	{r7}
 8001a9a:	b083      	sub	sp, #12
 8001a9c:	af00      	add	r7, sp, #0
 8001a9e:	4603      	mov	r3, r0
 8001aa0:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001aa2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001aa6:	2b00      	cmp	r3, #0
 8001aa8:	db0b      	blt.n	8001ac2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001aaa:	88fb      	ldrh	r3, [r7, #6]
 8001aac:	f003 021f 	and.w	r2, r3, #31
 8001ab0:	4907      	ldr	r1, [pc, #28]	; (8001ad0 <__NVIC_EnableIRQ+0x38>)
 8001ab2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001ab6:	095b      	lsrs	r3, r3, #5
 8001ab8:	2001      	movs	r0, #1
 8001aba:	fa00 f202 	lsl.w	r2, r0, r2
 8001abe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001ac2:	bf00      	nop
 8001ac4:	370c      	adds	r7, #12
 8001ac6:	46bd      	mov	sp, r7
 8001ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001acc:	4770      	bx	lr
 8001ace:	bf00      	nop
 8001ad0:	e000e100 	.word	0xe000e100

08001ad4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001ad4:	b480      	push	{r7}
 8001ad6:	b083      	sub	sp, #12
 8001ad8:	af00      	add	r7, sp, #0
 8001ada:	4603      	mov	r3, r0
 8001adc:	6039      	str	r1, [r7, #0]
 8001ade:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001ae0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001ae4:	2b00      	cmp	r3, #0
 8001ae6:	db0a      	blt.n	8001afe <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001ae8:	683b      	ldr	r3, [r7, #0]
 8001aea:	b2da      	uxtb	r2, r3
 8001aec:	490c      	ldr	r1, [pc, #48]	; (8001b20 <__NVIC_SetPriority+0x4c>)
 8001aee:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001af2:	0112      	lsls	r2, r2, #4
 8001af4:	b2d2      	uxtb	r2, r2
 8001af6:	440b      	add	r3, r1
 8001af8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001afc:	e00a      	b.n	8001b14 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001afe:	683b      	ldr	r3, [r7, #0]
 8001b00:	b2da      	uxtb	r2, r3
 8001b02:	4908      	ldr	r1, [pc, #32]	; (8001b24 <__NVIC_SetPriority+0x50>)
 8001b04:	88fb      	ldrh	r3, [r7, #6]
 8001b06:	f003 030f 	and.w	r3, r3, #15
 8001b0a:	3b04      	subs	r3, #4
 8001b0c:	0112      	lsls	r2, r2, #4
 8001b0e:	b2d2      	uxtb	r2, r2
 8001b10:	440b      	add	r3, r1
 8001b12:	761a      	strb	r2, [r3, #24]
}
 8001b14:	bf00      	nop
 8001b16:	370c      	adds	r7, #12
 8001b18:	46bd      	mov	sp, r7
 8001b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b1e:	4770      	bx	lr
 8001b20:	e000e100 	.word	0xe000e100
 8001b24:	e000ed00 	.word	0xe000ed00

08001b28 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001b28:	b480      	push	{r7}
 8001b2a:	b089      	sub	sp, #36	; 0x24
 8001b2c:	af00      	add	r7, sp, #0
 8001b2e:	60f8      	str	r0, [r7, #12]
 8001b30:	60b9      	str	r1, [r7, #8]
 8001b32:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001b34:	68fb      	ldr	r3, [r7, #12]
 8001b36:	f003 0307 	and.w	r3, r3, #7
 8001b3a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001b3c:	69fb      	ldr	r3, [r7, #28]
 8001b3e:	f1c3 0307 	rsb	r3, r3, #7
 8001b42:	2b04      	cmp	r3, #4
 8001b44:	bf28      	it	cs
 8001b46:	2304      	movcs	r3, #4
 8001b48:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001b4a:	69fb      	ldr	r3, [r7, #28]
 8001b4c:	3304      	adds	r3, #4
 8001b4e:	2b06      	cmp	r3, #6
 8001b50:	d902      	bls.n	8001b58 <NVIC_EncodePriority+0x30>
 8001b52:	69fb      	ldr	r3, [r7, #28]
 8001b54:	3b03      	subs	r3, #3
 8001b56:	e000      	b.n	8001b5a <NVIC_EncodePriority+0x32>
 8001b58:	2300      	movs	r3, #0
 8001b5a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001b5c:	f04f 32ff 	mov.w	r2, #4294967295
 8001b60:	69bb      	ldr	r3, [r7, #24]
 8001b62:	fa02 f303 	lsl.w	r3, r2, r3
 8001b66:	43da      	mvns	r2, r3
 8001b68:	68bb      	ldr	r3, [r7, #8]
 8001b6a:	401a      	ands	r2, r3
 8001b6c:	697b      	ldr	r3, [r7, #20]
 8001b6e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001b70:	f04f 31ff 	mov.w	r1, #4294967295
 8001b74:	697b      	ldr	r3, [r7, #20]
 8001b76:	fa01 f303 	lsl.w	r3, r1, r3
 8001b7a:	43d9      	mvns	r1, r3
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001b80:	4313      	orrs	r3, r2
         );
}
 8001b82:	4618      	mov	r0, r3
 8001b84:	3724      	adds	r7, #36	; 0x24
 8001b86:	46bd      	mov	sp, r7
 8001b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b8c:	4770      	bx	lr
	...

08001b90 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001b90:	b580      	push	{r7, lr}
 8001b92:	b082      	sub	sp, #8
 8001b94:	af00      	add	r7, sp, #0
 8001b96:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	3b01      	subs	r3, #1
 8001b9c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001ba0:	d301      	bcc.n	8001ba6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001ba2:	2301      	movs	r3, #1
 8001ba4:	e00f      	b.n	8001bc6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001ba6:	4a0a      	ldr	r2, [pc, #40]	; (8001bd0 <SysTick_Config+0x40>)
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	3b01      	subs	r3, #1
 8001bac:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001bae:	210f      	movs	r1, #15
 8001bb0:	f04f 30ff 	mov.w	r0, #4294967295
 8001bb4:	f7ff ff8e 	bl	8001ad4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001bb8:	4b05      	ldr	r3, [pc, #20]	; (8001bd0 <SysTick_Config+0x40>)
 8001bba:	2200      	movs	r2, #0
 8001bbc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001bbe:	4b04      	ldr	r3, [pc, #16]	; (8001bd0 <SysTick_Config+0x40>)
 8001bc0:	2207      	movs	r2, #7
 8001bc2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001bc4:	2300      	movs	r3, #0
}
 8001bc6:	4618      	mov	r0, r3
 8001bc8:	3708      	adds	r7, #8
 8001bca:	46bd      	mov	sp, r7
 8001bcc:	bd80      	pop	{r7, pc}
 8001bce:	bf00      	nop
 8001bd0:	e000e010 	.word	0xe000e010

08001bd4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001bd4:	b580      	push	{r7, lr}
 8001bd6:	b082      	sub	sp, #8
 8001bd8:	af00      	add	r7, sp, #0
 8001bda:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001bdc:	6878      	ldr	r0, [r7, #4]
 8001bde:	f7ff ff29 	bl	8001a34 <__NVIC_SetPriorityGrouping>
}
 8001be2:	bf00      	nop
 8001be4:	3708      	adds	r7, #8
 8001be6:	46bd      	mov	sp, r7
 8001be8:	bd80      	pop	{r7, pc}

08001bea <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001bea:	b580      	push	{r7, lr}
 8001bec:	b086      	sub	sp, #24
 8001bee:	af00      	add	r7, sp, #0
 8001bf0:	4603      	mov	r3, r0
 8001bf2:	60b9      	str	r1, [r7, #8]
 8001bf4:	607a      	str	r2, [r7, #4]
 8001bf6:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001bf8:	f7ff ff40 	bl	8001a7c <__NVIC_GetPriorityGrouping>
 8001bfc:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001bfe:	687a      	ldr	r2, [r7, #4]
 8001c00:	68b9      	ldr	r1, [r7, #8]
 8001c02:	6978      	ldr	r0, [r7, #20]
 8001c04:	f7ff ff90 	bl	8001b28 <NVIC_EncodePriority>
 8001c08:	4602      	mov	r2, r0
 8001c0a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001c0e:	4611      	mov	r1, r2
 8001c10:	4618      	mov	r0, r3
 8001c12:	f7ff ff5f 	bl	8001ad4 <__NVIC_SetPriority>
}
 8001c16:	bf00      	nop
 8001c18:	3718      	adds	r7, #24
 8001c1a:	46bd      	mov	sp, r7
 8001c1c:	bd80      	pop	{r7, pc}

08001c1e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001c1e:	b580      	push	{r7, lr}
 8001c20:	b082      	sub	sp, #8
 8001c22:	af00      	add	r7, sp, #0
 8001c24:	4603      	mov	r3, r0
 8001c26:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001c28:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001c2c:	4618      	mov	r0, r3
 8001c2e:	f7ff ff33 	bl	8001a98 <__NVIC_EnableIRQ>
}
 8001c32:	bf00      	nop
 8001c34:	3708      	adds	r7, #8
 8001c36:	46bd      	mov	sp, r7
 8001c38:	bd80      	pop	{r7, pc}

08001c3a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001c3a:	b580      	push	{r7, lr}
 8001c3c:	b082      	sub	sp, #8
 8001c3e:	af00      	add	r7, sp, #0
 8001c40:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001c42:	6878      	ldr	r0, [r7, #4]
 8001c44:	f7ff ffa4 	bl	8001b90 <SysTick_Config>
 8001c48:	4603      	mov	r3, r0
}
 8001c4a:	4618      	mov	r0, r3
 8001c4c:	3708      	adds	r7, #8
 8001c4e:	46bd      	mov	sp, r7
 8001c50:	bd80      	pop	{r7, pc}
	...

08001c54 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001c54:	b580      	push	{r7, lr}
 8001c56:	b086      	sub	sp, #24
 8001c58:	af00      	add	r7, sp, #0
 8001c5a:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 8001c5c:	f7ff feb0 	bl	80019c0 <HAL_GetTick>
 8001c60:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	2b00      	cmp	r3, #0
 8001c66:	d101      	bne.n	8001c6c <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 8001c68:	2301      	movs	r3, #1
 8001c6a:	e316      	b.n	800229a <HAL_DMA_Init+0x646>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	4a66      	ldr	r2, [pc, #408]	; (8001e0c <HAL_DMA_Init+0x1b8>)
 8001c72:	4293      	cmp	r3, r2
 8001c74:	d04a      	beq.n	8001d0c <HAL_DMA_Init+0xb8>
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	4a65      	ldr	r2, [pc, #404]	; (8001e10 <HAL_DMA_Init+0x1bc>)
 8001c7c:	4293      	cmp	r3, r2
 8001c7e:	d045      	beq.n	8001d0c <HAL_DMA_Init+0xb8>
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	4a63      	ldr	r2, [pc, #396]	; (8001e14 <HAL_DMA_Init+0x1c0>)
 8001c86:	4293      	cmp	r3, r2
 8001c88:	d040      	beq.n	8001d0c <HAL_DMA_Init+0xb8>
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	4a62      	ldr	r2, [pc, #392]	; (8001e18 <HAL_DMA_Init+0x1c4>)
 8001c90:	4293      	cmp	r3, r2
 8001c92:	d03b      	beq.n	8001d0c <HAL_DMA_Init+0xb8>
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	4a60      	ldr	r2, [pc, #384]	; (8001e1c <HAL_DMA_Init+0x1c8>)
 8001c9a:	4293      	cmp	r3, r2
 8001c9c:	d036      	beq.n	8001d0c <HAL_DMA_Init+0xb8>
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	4a5f      	ldr	r2, [pc, #380]	; (8001e20 <HAL_DMA_Init+0x1cc>)
 8001ca4:	4293      	cmp	r3, r2
 8001ca6:	d031      	beq.n	8001d0c <HAL_DMA_Init+0xb8>
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	4a5d      	ldr	r2, [pc, #372]	; (8001e24 <HAL_DMA_Init+0x1d0>)
 8001cae:	4293      	cmp	r3, r2
 8001cb0:	d02c      	beq.n	8001d0c <HAL_DMA_Init+0xb8>
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	4a5c      	ldr	r2, [pc, #368]	; (8001e28 <HAL_DMA_Init+0x1d4>)
 8001cb8:	4293      	cmp	r3, r2
 8001cba:	d027      	beq.n	8001d0c <HAL_DMA_Init+0xb8>
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	4a5a      	ldr	r2, [pc, #360]	; (8001e2c <HAL_DMA_Init+0x1d8>)
 8001cc2:	4293      	cmp	r3, r2
 8001cc4:	d022      	beq.n	8001d0c <HAL_DMA_Init+0xb8>
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	4a59      	ldr	r2, [pc, #356]	; (8001e30 <HAL_DMA_Init+0x1dc>)
 8001ccc:	4293      	cmp	r3, r2
 8001cce:	d01d      	beq.n	8001d0c <HAL_DMA_Init+0xb8>
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	4a57      	ldr	r2, [pc, #348]	; (8001e34 <HAL_DMA_Init+0x1e0>)
 8001cd6:	4293      	cmp	r3, r2
 8001cd8:	d018      	beq.n	8001d0c <HAL_DMA_Init+0xb8>
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	4a56      	ldr	r2, [pc, #344]	; (8001e38 <HAL_DMA_Init+0x1e4>)
 8001ce0:	4293      	cmp	r3, r2
 8001ce2:	d013      	beq.n	8001d0c <HAL_DMA_Init+0xb8>
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	4a54      	ldr	r2, [pc, #336]	; (8001e3c <HAL_DMA_Init+0x1e8>)
 8001cea:	4293      	cmp	r3, r2
 8001cec:	d00e      	beq.n	8001d0c <HAL_DMA_Init+0xb8>
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	4a53      	ldr	r2, [pc, #332]	; (8001e40 <HAL_DMA_Init+0x1ec>)
 8001cf4:	4293      	cmp	r3, r2
 8001cf6:	d009      	beq.n	8001d0c <HAL_DMA_Init+0xb8>
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	4a51      	ldr	r2, [pc, #324]	; (8001e44 <HAL_DMA_Init+0x1f0>)
 8001cfe:	4293      	cmp	r3, r2
 8001d00:	d004      	beq.n	8001d0c <HAL_DMA_Init+0xb8>
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	4a50      	ldr	r2, [pc, #320]	; (8001e48 <HAL_DMA_Init+0x1f4>)
 8001d08:	4293      	cmp	r3, r2
 8001d0a:	d101      	bne.n	8001d10 <HAL_DMA_Init+0xbc>
 8001d0c:	2301      	movs	r3, #1
 8001d0e:	e000      	b.n	8001d12 <HAL_DMA_Init+0xbe>
 8001d10:	2300      	movs	r3, #0
 8001d12:	2b00      	cmp	r3, #0
 8001d14:	f000 813b 	beq.w	8001f8e <HAL_DMA_Init+0x33a>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	2200      	movs	r2, #0
 8001d1c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	2202      	movs	r2, #2
 8001d24:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	4a37      	ldr	r2, [pc, #220]	; (8001e0c <HAL_DMA_Init+0x1b8>)
 8001d2e:	4293      	cmp	r3, r2
 8001d30:	d04a      	beq.n	8001dc8 <HAL_DMA_Init+0x174>
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	4a36      	ldr	r2, [pc, #216]	; (8001e10 <HAL_DMA_Init+0x1bc>)
 8001d38:	4293      	cmp	r3, r2
 8001d3a:	d045      	beq.n	8001dc8 <HAL_DMA_Init+0x174>
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	4a34      	ldr	r2, [pc, #208]	; (8001e14 <HAL_DMA_Init+0x1c0>)
 8001d42:	4293      	cmp	r3, r2
 8001d44:	d040      	beq.n	8001dc8 <HAL_DMA_Init+0x174>
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	4a33      	ldr	r2, [pc, #204]	; (8001e18 <HAL_DMA_Init+0x1c4>)
 8001d4c:	4293      	cmp	r3, r2
 8001d4e:	d03b      	beq.n	8001dc8 <HAL_DMA_Init+0x174>
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	4a31      	ldr	r2, [pc, #196]	; (8001e1c <HAL_DMA_Init+0x1c8>)
 8001d56:	4293      	cmp	r3, r2
 8001d58:	d036      	beq.n	8001dc8 <HAL_DMA_Init+0x174>
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	4a30      	ldr	r2, [pc, #192]	; (8001e20 <HAL_DMA_Init+0x1cc>)
 8001d60:	4293      	cmp	r3, r2
 8001d62:	d031      	beq.n	8001dc8 <HAL_DMA_Init+0x174>
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	4a2e      	ldr	r2, [pc, #184]	; (8001e24 <HAL_DMA_Init+0x1d0>)
 8001d6a:	4293      	cmp	r3, r2
 8001d6c:	d02c      	beq.n	8001dc8 <HAL_DMA_Init+0x174>
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	4a2d      	ldr	r2, [pc, #180]	; (8001e28 <HAL_DMA_Init+0x1d4>)
 8001d74:	4293      	cmp	r3, r2
 8001d76:	d027      	beq.n	8001dc8 <HAL_DMA_Init+0x174>
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	4a2b      	ldr	r2, [pc, #172]	; (8001e2c <HAL_DMA_Init+0x1d8>)
 8001d7e:	4293      	cmp	r3, r2
 8001d80:	d022      	beq.n	8001dc8 <HAL_DMA_Init+0x174>
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	4a2a      	ldr	r2, [pc, #168]	; (8001e30 <HAL_DMA_Init+0x1dc>)
 8001d88:	4293      	cmp	r3, r2
 8001d8a:	d01d      	beq.n	8001dc8 <HAL_DMA_Init+0x174>
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	4a28      	ldr	r2, [pc, #160]	; (8001e34 <HAL_DMA_Init+0x1e0>)
 8001d92:	4293      	cmp	r3, r2
 8001d94:	d018      	beq.n	8001dc8 <HAL_DMA_Init+0x174>
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	4a27      	ldr	r2, [pc, #156]	; (8001e38 <HAL_DMA_Init+0x1e4>)
 8001d9c:	4293      	cmp	r3, r2
 8001d9e:	d013      	beq.n	8001dc8 <HAL_DMA_Init+0x174>
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	4a25      	ldr	r2, [pc, #148]	; (8001e3c <HAL_DMA_Init+0x1e8>)
 8001da6:	4293      	cmp	r3, r2
 8001da8:	d00e      	beq.n	8001dc8 <HAL_DMA_Init+0x174>
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	4a24      	ldr	r2, [pc, #144]	; (8001e40 <HAL_DMA_Init+0x1ec>)
 8001db0:	4293      	cmp	r3, r2
 8001db2:	d009      	beq.n	8001dc8 <HAL_DMA_Init+0x174>
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	4a22      	ldr	r2, [pc, #136]	; (8001e44 <HAL_DMA_Init+0x1f0>)
 8001dba:	4293      	cmp	r3, r2
 8001dbc:	d004      	beq.n	8001dc8 <HAL_DMA_Init+0x174>
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	4a21      	ldr	r2, [pc, #132]	; (8001e48 <HAL_DMA_Init+0x1f4>)
 8001dc4:	4293      	cmp	r3, r2
 8001dc6:	d108      	bne.n	8001dda <HAL_DMA_Init+0x186>
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	681a      	ldr	r2, [r3, #0]
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	f022 0201 	bic.w	r2, r2, #1
 8001dd6:	601a      	str	r2, [r3, #0]
 8001dd8:	e007      	b.n	8001dea <HAL_DMA_Init+0x196>
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	681a      	ldr	r2, [r3, #0]
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	f022 0201 	bic.w	r2, r2, #1
 8001de8:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8001dea:	e02f      	b.n	8001e4c <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001dec:	f7ff fde8 	bl	80019c0 <HAL_GetTick>
 8001df0:	4602      	mov	r2, r0
 8001df2:	693b      	ldr	r3, [r7, #16]
 8001df4:	1ad3      	subs	r3, r2, r3
 8001df6:	2b05      	cmp	r3, #5
 8001df8:	d928      	bls.n	8001e4c <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	2220      	movs	r2, #32
 8001dfe:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	2203      	movs	r2, #3
 8001e04:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 8001e08:	2301      	movs	r3, #1
 8001e0a:	e246      	b.n	800229a <HAL_DMA_Init+0x646>
 8001e0c:	40020010 	.word	0x40020010
 8001e10:	40020028 	.word	0x40020028
 8001e14:	40020040 	.word	0x40020040
 8001e18:	40020058 	.word	0x40020058
 8001e1c:	40020070 	.word	0x40020070
 8001e20:	40020088 	.word	0x40020088
 8001e24:	400200a0 	.word	0x400200a0
 8001e28:	400200b8 	.word	0x400200b8
 8001e2c:	40020410 	.word	0x40020410
 8001e30:	40020428 	.word	0x40020428
 8001e34:	40020440 	.word	0x40020440
 8001e38:	40020458 	.word	0x40020458
 8001e3c:	40020470 	.word	0x40020470
 8001e40:	40020488 	.word	0x40020488
 8001e44:	400204a0 	.word	0x400204a0
 8001e48:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	f003 0301 	and.w	r3, r3, #1
 8001e56:	2b00      	cmp	r3, #0
 8001e58:	d1c8      	bne.n	8001dec <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001e62:	697a      	ldr	r2, [r7, #20]
 8001e64:	4b83      	ldr	r3, [pc, #524]	; (8002074 <HAL_DMA_Init+0x420>)
 8001e66:	4013      	ands	r3, r2
 8001e68:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 8001e72:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	691b      	ldr	r3, [r3, #16]
 8001e78:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001e7e:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	699b      	ldr	r3, [r3, #24]
 8001e84:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001e8a:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	6a1b      	ldr	r3, [r3, #32]
 8001e90:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 8001e92:	697a      	ldr	r2, [r7, #20]
 8001e94:	4313      	orrs	r3, r2
 8001e96:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e9c:	2b04      	cmp	r3, #4
 8001e9e:	d107      	bne.n	8001eb0 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ea8:	4313      	orrs	r3, r2
 8001eaa:	697a      	ldr	r2, [r7, #20]
 8001eac:	4313      	orrs	r3, r2
 8001eae:	617b      	str	r3, [r7, #20]
    }

    /* Work around for Errata 2.22: UART/USART- DMA transfer lock: DMA stream could be
                                    lock when transfering data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 8001eb0:	4b71      	ldr	r3, [pc, #452]	; (8002078 <HAL_DMA_Init+0x424>)
 8001eb2:	681a      	ldr	r2, [r3, #0]
 8001eb4:	4b71      	ldr	r3, [pc, #452]	; (800207c <HAL_DMA_Init+0x428>)
 8001eb6:	4013      	ands	r3, r2
 8001eb8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001ebc:	d328      	bcc.n	8001f10 <HAL_DMA_Init+0x2bc>
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	685b      	ldr	r3, [r3, #4]
 8001ec2:	2b28      	cmp	r3, #40	; 0x28
 8001ec4:	d903      	bls.n	8001ece <HAL_DMA_Init+0x27a>
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	685b      	ldr	r3, [r3, #4]
 8001eca:	2b2e      	cmp	r3, #46	; 0x2e
 8001ecc:	d917      	bls.n	8001efe <HAL_DMA_Init+0x2aa>
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	685b      	ldr	r3, [r3, #4]
 8001ed2:	2b3e      	cmp	r3, #62	; 0x3e
 8001ed4:	d903      	bls.n	8001ede <HAL_DMA_Init+0x28a>
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	685b      	ldr	r3, [r3, #4]
 8001eda:	2b42      	cmp	r3, #66	; 0x42
 8001edc:	d90f      	bls.n	8001efe <HAL_DMA_Init+0x2aa>
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	685b      	ldr	r3, [r3, #4]
 8001ee2:	2b46      	cmp	r3, #70	; 0x46
 8001ee4:	d903      	bls.n	8001eee <HAL_DMA_Init+0x29a>
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	685b      	ldr	r3, [r3, #4]
 8001eea:	2b48      	cmp	r3, #72	; 0x48
 8001eec:	d907      	bls.n	8001efe <HAL_DMA_Init+0x2aa>
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	685b      	ldr	r3, [r3, #4]
 8001ef2:	2b4e      	cmp	r3, #78	; 0x4e
 8001ef4:	d905      	bls.n	8001f02 <HAL_DMA_Init+0x2ae>
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	685b      	ldr	r3, [r3, #4]
 8001efa:	2b52      	cmp	r3, #82	; 0x52
 8001efc:	d801      	bhi.n	8001f02 <HAL_DMA_Init+0x2ae>
 8001efe:	2301      	movs	r3, #1
 8001f00:	e000      	b.n	8001f04 <HAL_DMA_Init+0x2b0>
 8001f02:	2300      	movs	r3, #0
 8001f04:	2b00      	cmp	r3, #0
 8001f06:	d003      	beq.n	8001f10 <HAL_DMA_Init+0x2bc>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 8001f08:	697b      	ldr	r3, [r7, #20]
 8001f0a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8001f0e:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	697a      	ldr	r2, [r7, #20]
 8001f16:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	695b      	ldr	r3, [r3, #20]
 8001f1e:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001f20:	697b      	ldr	r3, [r7, #20]
 8001f22:	f023 0307 	bic.w	r3, r3, #7
 8001f26:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f2c:	697a      	ldr	r2, [r7, #20]
 8001f2e:	4313      	orrs	r3, r2
 8001f30:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f36:	2b04      	cmp	r3, #4
 8001f38:	d117      	bne.n	8001f6a <HAL_DMA_Init+0x316>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f3e:	697a      	ldr	r2, [r7, #20]
 8001f40:	4313      	orrs	r3, r2
 8001f42:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f48:	2b00      	cmp	r3, #0
 8001f4a:	d00e      	beq.n	8001f6a <HAL_DMA_Init+0x316>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001f4c:	6878      	ldr	r0, [r7, #4]
 8001f4e:	f001 fdcf 	bl	8003af0 <DMA_CheckFifoParam>
 8001f52:	4603      	mov	r3, r0
 8001f54:	2b00      	cmp	r3, #0
 8001f56:	d008      	beq.n	8001f6a <HAL_DMA_Init+0x316>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	2240      	movs	r2, #64	; 0x40
 8001f5c:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	2201      	movs	r2, #1
 8001f62:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          return HAL_ERROR;
 8001f66:	2301      	movs	r3, #1
 8001f68:	e197      	b.n	800229a <HAL_DMA_Init+0x646>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	697a      	ldr	r2, [r7, #20]
 8001f70:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001f72:	6878      	ldr	r0, [r7, #4]
 8001f74:	f001 fd0a 	bl	800398c <DMA_CalcBaseAndBitshift>
 8001f78:	4603      	mov	r3, r0
 8001f7a:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f80:	f003 031f 	and.w	r3, r3, #31
 8001f84:	223f      	movs	r2, #63	; 0x3f
 8001f86:	409a      	lsls	r2, r3
 8001f88:	68bb      	ldr	r3, [r7, #8]
 8001f8a:	609a      	str	r2, [r3, #8]
 8001f8c:	e0cd      	b.n	800212a <HAL_DMA_Init+0x4d6>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	4a3b      	ldr	r2, [pc, #236]	; (8002080 <HAL_DMA_Init+0x42c>)
 8001f94:	4293      	cmp	r3, r2
 8001f96:	d022      	beq.n	8001fde <HAL_DMA_Init+0x38a>
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	4a39      	ldr	r2, [pc, #228]	; (8002084 <HAL_DMA_Init+0x430>)
 8001f9e:	4293      	cmp	r3, r2
 8001fa0:	d01d      	beq.n	8001fde <HAL_DMA_Init+0x38a>
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	4a38      	ldr	r2, [pc, #224]	; (8002088 <HAL_DMA_Init+0x434>)
 8001fa8:	4293      	cmp	r3, r2
 8001faa:	d018      	beq.n	8001fde <HAL_DMA_Init+0x38a>
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	4a36      	ldr	r2, [pc, #216]	; (800208c <HAL_DMA_Init+0x438>)
 8001fb2:	4293      	cmp	r3, r2
 8001fb4:	d013      	beq.n	8001fde <HAL_DMA_Init+0x38a>
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	4a35      	ldr	r2, [pc, #212]	; (8002090 <HAL_DMA_Init+0x43c>)
 8001fbc:	4293      	cmp	r3, r2
 8001fbe:	d00e      	beq.n	8001fde <HAL_DMA_Init+0x38a>
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	4a33      	ldr	r2, [pc, #204]	; (8002094 <HAL_DMA_Init+0x440>)
 8001fc6:	4293      	cmp	r3, r2
 8001fc8:	d009      	beq.n	8001fde <HAL_DMA_Init+0x38a>
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	4a32      	ldr	r2, [pc, #200]	; (8002098 <HAL_DMA_Init+0x444>)
 8001fd0:	4293      	cmp	r3, r2
 8001fd2:	d004      	beq.n	8001fde <HAL_DMA_Init+0x38a>
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	4a30      	ldr	r2, [pc, #192]	; (800209c <HAL_DMA_Init+0x448>)
 8001fda:	4293      	cmp	r3, r2
 8001fdc:	d101      	bne.n	8001fe2 <HAL_DMA_Init+0x38e>
 8001fde:	2301      	movs	r3, #1
 8001fe0:	e000      	b.n	8001fe4 <HAL_DMA_Init+0x390>
 8001fe2:	2300      	movs	r3, #0
 8001fe4:	2b00      	cmp	r3, #0
 8001fe6:	f000 8097 	beq.w	8002118 <HAL_DMA_Init+0x4c4>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	4a24      	ldr	r2, [pc, #144]	; (8002080 <HAL_DMA_Init+0x42c>)
 8001ff0:	4293      	cmp	r3, r2
 8001ff2:	d021      	beq.n	8002038 <HAL_DMA_Init+0x3e4>
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	4a22      	ldr	r2, [pc, #136]	; (8002084 <HAL_DMA_Init+0x430>)
 8001ffa:	4293      	cmp	r3, r2
 8001ffc:	d01c      	beq.n	8002038 <HAL_DMA_Init+0x3e4>
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	4a21      	ldr	r2, [pc, #132]	; (8002088 <HAL_DMA_Init+0x434>)
 8002004:	4293      	cmp	r3, r2
 8002006:	d017      	beq.n	8002038 <HAL_DMA_Init+0x3e4>
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	4a1f      	ldr	r2, [pc, #124]	; (800208c <HAL_DMA_Init+0x438>)
 800200e:	4293      	cmp	r3, r2
 8002010:	d012      	beq.n	8002038 <HAL_DMA_Init+0x3e4>
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	4a1e      	ldr	r2, [pc, #120]	; (8002090 <HAL_DMA_Init+0x43c>)
 8002018:	4293      	cmp	r3, r2
 800201a:	d00d      	beq.n	8002038 <HAL_DMA_Init+0x3e4>
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	4a1c      	ldr	r2, [pc, #112]	; (8002094 <HAL_DMA_Init+0x440>)
 8002022:	4293      	cmp	r3, r2
 8002024:	d008      	beq.n	8002038 <HAL_DMA_Init+0x3e4>
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	4a1b      	ldr	r2, [pc, #108]	; (8002098 <HAL_DMA_Init+0x444>)
 800202c:	4293      	cmp	r3, r2
 800202e:	d003      	beq.n	8002038 <HAL_DMA_Init+0x3e4>
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	4a19      	ldr	r2, [pc, #100]	; (800209c <HAL_DMA_Init+0x448>)
 8002036:	4293      	cmp	r3, r2
 8002038:	bf00      	nop
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	2200      	movs	r2, #0
 800203e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	2202      	movs	r2, #2
 8002046:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 8002052:	697a      	ldr	r2, [r7, #20]
 8002054:	4b12      	ldr	r3, [pc, #72]	; (80020a0 <HAL_DMA_Init+0x44c>)
 8002056:	4013      	ands	r3, r2
 8002058:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	689b      	ldr	r3, [r3, #8]
 800205e:	2b40      	cmp	r3, #64	; 0x40
 8002060:	d020      	beq.n	80020a4 <HAL_DMA_Init+0x450>
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	689b      	ldr	r3, [r3, #8]
 8002066:	2b80      	cmp	r3, #128	; 0x80
 8002068:	d102      	bne.n	8002070 <HAL_DMA_Init+0x41c>
 800206a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800206e:	e01a      	b.n	80020a6 <HAL_DMA_Init+0x452>
 8002070:	2300      	movs	r3, #0
 8002072:	e018      	b.n	80020a6 <HAL_DMA_Init+0x452>
 8002074:	fe10803f 	.word	0xfe10803f
 8002078:	5c001000 	.word	0x5c001000
 800207c:	ffff0000 	.word	0xffff0000
 8002080:	58025408 	.word	0x58025408
 8002084:	5802541c 	.word	0x5802541c
 8002088:	58025430 	.word	0x58025430
 800208c:	58025444 	.word	0x58025444
 8002090:	58025458 	.word	0x58025458
 8002094:	5802546c 	.word	0x5802546c
 8002098:	58025480 	.word	0x58025480
 800209c:	58025494 	.word	0x58025494
 80020a0:	fffe000f 	.word	0xfffe000f
 80020a4:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 80020a6:	687a      	ldr	r2, [r7, #4]
 80020a8:	68d2      	ldr	r2, [r2, #12]
 80020aa:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80020ac:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	691b      	ldr	r3, [r3, #16]
 80020b2:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 80020b4:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	695b      	ldr	r3, [r3, #20]
 80020ba:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 80020bc:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	699b      	ldr	r3, [r3, #24]
 80020c2:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 80020c4:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	69db      	ldr	r3, [r3, #28]
 80020ca:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 80020cc:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	6a1b      	ldr	r3, [r3, #32]
 80020d2:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 80020d4:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80020d6:	697a      	ldr	r2, [r7, #20]
 80020d8:	4313      	orrs	r3, r2
 80020da:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	697a      	ldr	r2, [r7, #20]
 80020e2:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	461a      	mov	r2, r3
 80020ea:	4b6e      	ldr	r3, [pc, #440]	; (80022a4 <HAL_DMA_Init+0x650>)
 80020ec:	4413      	add	r3, r2
 80020ee:	4a6e      	ldr	r2, [pc, #440]	; (80022a8 <HAL_DMA_Init+0x654>)
 80020f0:	fba2 2303 	umull	r2, r3, r2, r3
 80020f4:	091b      	lsrs	r3, r3, #4
 80020f6:	009a      	lsls	r2, r3, #2
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80020fc:	6878      	ldr	r0, [r7, #4]
 80020fe:	f001 fc45 	bl	800398c <DMA_CalcBaseAndBitshift>
 8002102:	4603      	mov	r3, r0
 8002104:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800210a:	f003 031f 	and.w	r3, r3, #31
 800210e:	2201      	movs	r2, #1
 8002110:	409a      	lsls	r2, r3
 8002112:	68fb      	ldr	r3, [r7, #12]
 8002114:	605a      	str	r2, [r3, #4]
 8002116:	e008      	b.n	800212a <HAL_DMA_Init+0x4d6>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	2240      	movs	r2, #64	; 0x40
 800211c:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	2203      	movs	r2, #3
 8002122:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    return HAL_ERROR;
 8002126:	2301      	movs	r3, #1
 8002128:	e0b7      	b.n	800229a <HAL_DMA_Init+0x646>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	4a5f      	ldr	r2, [pc, #380]	; (80022ac <HAL_DMA_Init+0x658>)
 8002130:	4293      	cmp	r3, r2
 8002132:	d072      	beq.n	800221a <HAL_DMA_Init+0x5c6>
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	4a5d      	ldr	r2, [pc, #372]	; (80022b0 <HAL_DMA_Init+0x65c>)
 800213a:	4293      	cmp	r3, r2
 800213c:	d06d      	beq.n	800221a <HAL_DMA_Init+0x5c6>
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	4a5c      	ldr	r2, [pc, #368]	; (80022b4 <HAL_DMA_Init+0x660>)
 8002144:	4293      	cmp	r3, r2
 8002146:	d068      	beq.n	800221a <HAL_DMA_Init+0x5c6>
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	4a5a      	ldr	r2, [pc, #360]	; (80022b8 <HAL_DMA_Init+0x664>)
 800214e:	4293      	cmp	r3, r2
 8002150:	d063      	beq.n	800221a <HAL_DMA_Init+0x5c6>
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	4a59      	ldr	r2, [pc, #356]	; (80022bc <HAL_DMA_Init+0x668>)
 8002158:	4293      	cmp	r3, r2
 800215a:	d05e      	beq.n	800221a <HAL_DMA_Init+0x5c6>
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	4a57      	ldr	r2, [pc, #348]	; (80022c0 <HAL_DMA_Init+0x66c>)
 8002162:	4293      	cmp	r3, r2
 8002164:	d059      	beq.n	800221a <HAL_DMA_Init+0x5c6>
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	4a56      	ldr	r2, [pc, #344]	; (80022c4 <HAL_DMA_Init+0x670>)
 800216c:	4293      	cmp	r3, r2
 800216e:	d054      	beq.n	800221a <HAL_DMA_Init+0x5c6>
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	4a54      	ldr	r2, [pc, #336]	; (80022c8 <HAL_DMA_Init+0x674>)
 8002176:	4293      	cmp	r3, r2
 8002178:	d04f      	beq.n	800221a <HAL_DMA_Init+0x5c6>
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	4a53      	ldr	r2, [pc, #332]	; (80022cc <HAL_DMA_Init+0x678>)
 8002180:	4293      	cmp	r3, r2
 8002182:	d04a      	beq.n	800221a <HAL_DMA_Init+0x5c6>
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	4a51      	ldr	r2, [pc, #324]	; (80022d0 <HAL_DMA_Init+0x67c>)
 800218a:	4293      	cmp	r3, r2
 800218c:	d045      	beq.n	800221a <HAL_DMA_Init+0x5c6>
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	4a50      	ldr	r2, [pc, #320]	; (80022d4 <HAL_DMA_Init+0x680>)
 8002194:	4293      	cmp	r3, r2
 8002196:	d040      	beq.n	800221a <HAL_DMA_Init+0x5c6>
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	4a4e      	ldr	r2, [pc, #312]	; (80022d8 <HAL_DMA_Init+0x684>)
 800219e:	4293      	cmp	r3, r2
 80021a0:	d03b      	beq.n	800221a <HAL_DMA_Init+0x5c6>
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	4a4d      	ldr	r2, [pc, #308]	; (80022dc <HAL_DMA_Init+0x688>)
 80021a8:	4293      	cmp	r3, r2
 80021aa:	d036      	beq.n	800221a <HAL_DMA_Init+0x5c6>
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	4a4b      	ldr	r2, [pc, #300]	; (80022e0 <HAL_DMA_Init+0x68c>)
 80021b2:	4293      	cmp	r3, r2
 80021b4:	d031      	beq.n	800221a <HAL_DMA_Init+0x5c6>
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	4a4a      	ldr	r2, [pc, #296]	; (80022e4 <HAL_DMA_Init+0x690>)
 80021bc:	4293      	cmp	r3, r2
 80021be:	d02c      	beq.n	800221a <HAL_DMA_Init+0x5c6>
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	4a48      	ldr	r2, [pc, #288]	; (80022e8 <HAL_DMA_Init+0x694>)
 80021c6:	4293      	cmp	r3, r2
 80021c8:	d027      	beq.n	800221a <HAL_DMA_Init+0x5c6>
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	4a47      	ldr	r2, [pc, #284]	; (80022ec <HAL_DMA_Init+0x698>)
 80021d0:	4293      	cmp	r3, r2
 80021d2:	d022      	beq.n	800221a <HAL_DMA_Init+0x5c6>
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	4a45      	ldr	r2, [pc, #276]	; (80022f0 <HAL_DMA_Init+0x69c>)
 80021da:	4293      	cmp	r3, r2
 80021dc:	d01d      	beq.n	800221a <HAL_DMA_Init+0x5c6>
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	4a44      	ldr	r2, [pc, #272]	; (80022f4 <HAL_DMA_Init+0x6a0>)
 80021e4:	4293      	cmp	r3, r2
 80021e6:	d018      	beq.n	800221a <HAL_DMA_Init+0x5c6>
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	4a42      	ldr	r2, [pc, #264]	; (80022f8 <HAL_DMA_Init+0x6a4>)
 80021ee:	4293      	cmp	r3, r2
 80021f0:	d013      	beq.n	800221a <HAL_DMA_Init+0x5c6>
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	4a41      	ldr	r2, [pc, #260]	; (80022fc <HAL_DMA_Init+0x6a8>)
 80021f8:	4293      	cmp	r3, r2
 80021fa:	d00e      	beq.n	800221a <HAL_DMA_Init+0x5c6>
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	4a3f      	ldr	r2, [pc, #252]	; (8002300 <HAL_DMA_Init+0x6ac>)
 8002202:	4293      	cmp	r3, r2
 8002204:	d009      	beq.n	800221a <HAL_DMA_Init+0x5c6>
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	4a3e      	ldr	r2, [pc, #248]	; (8002304 <HAL_DMA_Init+0x6b0>)
 800220c:	4293      	cmp	r3, r2
 800220e:	d004      	beq.n	800221a <HAL_DMA_Init+0x5c6>
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	4a3c      	ldr	r2, [pc, #240]	; (8002308 <HAL_DMA_Init+0x6b4>)
 8002216:	4293      	cmp	r3, r2
 8002218:	d101      	bne.n	800221e <HAL_DMA_Init+0x5ca>
 800221a:	2301      	movs	r3, #1
 800221c:	e000      	b.n	8002220 <HAL_DMA_Init+0x5cc>
 800221e:	2300      	movs	r3, #0
 8002220:	2b00      	cmp	r3, #0
 8002222:	d032      	beq.n	800228a <HAL_DMA_Init+0x636>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8002224:	6878      	ldr	r0, [r7, #4]
 8002226:	f001 fcdf 	bl	8003be8 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	689b      	ldr	r3, [r3, #8]
 800222e:	2b80      	cmp	r3, #128	; 0x80
 8002230:	d102      	bne.n	8002238 <HAL_DMA_Init+0x5e4>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	2200      	movs	r2, #0
 8002236:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	685a      	ldr	r2, [r3, #4]
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002240:	b2d2      	uxtb	r2, r2
 8002242:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002248:	687a      	ldr	r2, [r7, #4]
 800224a:	6e92      	ldr	r2, [r2, #104]	; 0x68
 800224c:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	685b      	ldr	r3, [r3, #4]
 8002252:	2b00      	cmp	r3, #0
 8002254:	d010      	beq.n	8002278 <HAL_DMA_Init+0x624>
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	685b      	ldr	r3, [r3, #4]
 800225a:	2b08      	cmp	r3, #8
 800225c:	d80c      	bhi.n	8002278 <HAL_DMA_Init+0x624>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 800225e:	6878      	ldr	r0, [r7, #4]
 8002260:	f001 fd5c 	bl	8003d1c <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002268:	2200      	movs	r2, #0
 800226a:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002270:	687a      	ldr	r2, [r7, #4]
 8002272:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8002274:	605a      	str	r2, [r3, #4]
 8002276:	e008      	b.n	800228a <HAL_DMA_Init+0x636>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	2200      	movs	r2, #0
 800227c:	66da      	str	r2, [r3, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	2200      	movs	r2, #0
 8002282:	671a      	str	r2, [r3, #112]	; 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	2200      	movs	r2, #0
 8002288:	675a      	str	r2, [r3, #116]	; 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	2200      	movs	r2, #0
 800228e:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	2201      	movs	r2, #1
 8002294:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8002298:	2300      	movs	r3, #0
}
 800229a:	4618      	mov	r0, r3
 800229c:	3718      	adds	r7, #24
 800229e:	46bd      	mov	sp, r7
 80022a0:	bd80      	pop	{r7, pc}
 80022a2:	bf00      	nop
 80022a4:	a7fdabf8 	.word	0xa7fdabf8
 80022a8:	cccccccd 	.word	0xcccccccd
 80022ac:	40020010 	.word	0x40020010
 80022b0:	40020028 	.word	0x40020028
 80022b4:	40020040 	.word	0x40020040
 80022b8:	40020058 	.word	0x40020058
 80022bc:	40020070 	.word	0x40020070
 80022c0:	40020088 	.word	0x40020088
 80022c4:	400200a0 	.word	0x400200a0
 80022c8:	400200b8 	.word	0x400200b8
 80022cc:	40020410 	.word	0x40020410
 80022d0:	40020428 	.word	0x40020428
 80022d4:	40020440 	.word	0x40020440
 80022d8:	40020458 	.word	0x40020458
 80022dc:	40020470 	.word	0x40020470
 80022e0:	40020488 	.word	0x40020488
 80022e4:	400204a0 	.word	0x400204a0
 80022e8:	400204b8 	.word	0x400204b8
 80022ec:	58025408 	.word	0x58025408
 80022f0:	5802541c 	.word	0x5802541c
 80022f4:	58025430 	.word	0x58025430
 80022f8:	58025444 	.word	0x58025444
 80022fc:	58025458 	.word	0x58025458
 8002300:	5802546c 	.word	0x5802546c
 8002304:	58025480 	.word	0x58025480
 8002308:	58025494 	.word	0x58025494

0800230c <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800230c:	b580      	push	{r7, lr}
 800230e:	b086      	sub	sp, #24
 8002310:	af00      	add	r7, sp, #0
 8002312:	60f8      	str	r0, [r7, #12]
 8002314:	60b9      	str	r1, [r7, #8]
 8002316:	607a      	str	r2, [r7, #4]
 8002318:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800231a:	2300      	movs	r3, #0
 800231c:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 800231e:	68fb      	ldr	r3, [r7, #12]
 8002320:	2b00      	cmp	r3, #0
 8002322:	d101      	bne.n	8002328 <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 8002324:	2301      	movs	r3, #1
 8002326:	e226      	b.n	8002776 <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 8002328:	68fb      	ldr	r3, [r7, #12]
 800232a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800232e:	2b01      	cmp	r3, #1
 8002330:	d101      	bne.n	8002336 <HAL_DMA_Start_IT+0x2a>
 8002332:	2302      	movs	r3, #2
 8002334:	e21f      	b.n	8002776 <HAL_DMA_Start_IT+0x46a>
 8002336:	68fb      	ldr	r3, [r7, #12]
 8002338:	2201      	movs	r2, #1
 800233a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 800233e:	68fb      	ldr	r3, [r7, #12]
 8002340:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002344:	b2db      	uxtb	r3, r3
 8002346:	2b01      	cmp	r3, #1
 8002348:	f040 820a 	bne.w	8002760 <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800234c:	68fb      	ldr	r3, [r7, #12]
 800234e:	2202      	movs	r2, #2
 8002350:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002354:	68fb      	ldr	r3, [r7, #12]
 8002356:	2200      	movs	r2, #0
 8002358:	655a      	str	r2, [r3, #84]	; 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800235a:	68fb      	ldr	r3, [r7, #12]
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	4a68      	ldr	r2, [pc, #416]	; (8002500 <HAL_DMA_Start_IT+0x1f4>)
 8002360:	4293      	cmp	r3, r2
 8002362:	d04a      	beq.n	80023fa <HAL_DMA_Start_IT+0xee>
 8002364:	68fb      	ldr	r3, [r7, #12]
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	4a66      	ldr	r2, [pc, #408]	; (8002504 <HAL_DMA_Start_IT+0x1f8>)
 800236a:	4293      	cmp	r3, r2
 800236c:	d045      	beq.n	80023fa <HAL_DMA_Start_IT+0xee>
 800236e:	68fb      	ldr	r3, [r7, #12]
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	4a65      	ldr	r2, [pc, #404]	; (8002508 <HAL_DMA_Start_IT+0x1fc>)
 8002374:	4293      	cmp	r3, r2
 8002376:	d040      	beq.n	80023fa <HAL_DMA_Start_IT+0xee>
 8002378:	68fb      	ldr	r3, [r7, #12]
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	4a63      	ldr	r2, [pc, #396]	; (800250c <HAL_DMA_Start_IT+0x200>)
 800237e:	4293      	cmp	r3, r2
 8002380:	d03b      	beq.n	80023fa <HAL_DMA_Start_IT+0xee>
 8002382:	68fb      	ldr	r3, [r7, #12]
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	4a62      	ldr	r2, [pc, #392]	; (8002510 <HAL_DMA_Start_IT+0x204>)
 8002388:	4293      	cmp	r3, r2
 800238a:	d036      	beq.n	80023fa <HAL_DMA_Start_IT+0xee>
 800238c:	68fb      	ldr	r3, [r7, #12]
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	4a60      	ldr	r2, [pc, #384]	; (8002514 <HAL_DMA_Start_IT+0x208>)
 8002392:	4293      	cmp	r3, r2
 8002394:	d031      	beq.n	80023fa <HAL_DMA_Start_IT+0xee>
 8002396:	68fb      	ldr	r3, [r7, #12]
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	4a5f      	ldr	r2, [pc, #380]	; (8002518 <HAL_DMA_Start_IT+0x20c>)
 800239c:	4293      	cmp	r3, r2
 800239e:	d02c      	beq.n	80023fa <HAL_DMA_Start_IT+0xee>
 80023a0:	68fb      	ldr	r3, [r7, #12]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	4a5d      	ldr	r2, [pc, #372]	; (800251c <HAL_DMA_Start_IT+0x210>)
 80023a6:	4293      	cmp	r3, r2
 80023a8:	d027      	beq.n	80023fa <HAL_DMA_Start_IT+0xee>
 80023aa:	68fb      	ldr	r3, [r7, #12]
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	4a5c      	ldr	r2, [pc, #368]	; (8002520 <HAL_DMA_Start_IT+0x214>)
 80023b0:	4293      	cmp	r3, r2
 80023b2:	d022      	beq.n	80023fa <HAL_DMA_Start_IT+0xee>
 80023b4:	68fb      	ldr	r3, [r7, #12]
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	4a5a      	ldr	r2, [pc, #360]	; (8002524 <HAL_DMA_Start_IT+0x218>)
 80023ba:	4293      	cmp	r3, r2
 80023bc:	d01d      	beq.n	80023fa <HAL_DMA_Start_IT+0xee>
 80023be:	68fb      	ldr	r3, [r7, #12]
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	4a59      	ldr	r2, [pc, #356]	; (8002528 <HAL_DMA_Start_IT+0x21c>)
 80023c4:	4293      	cmp	r3, r2
 80023c6:	d018      	beq.n	80023fa <HAL_DMA_Start_IT+0xee>
 80023c8:	68fb      	ldr	r3, [r7, #12]
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	4a57      	ldr	r2, [pc, #348]	; (800252c <HAL_DMA_Start_IT+0x220>)
 80023ce:	4293      	cmp	r3, r2
 80023d0:	d013      	beq.n	80023fa <HAL_DMA_Start_IT+0xee>
 80023d2:	68fb      	ldr	r3, [r7, #12]
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	4a56      	ldr	r2, [pc, #344]	; (8002530 <HAL_DMA_Start_IT+0x224>)
 80023d8:	4293      	cmp	r3, r2
 80023da:	d00e      	beq.n	80023fa <HAL_DMA_Start_IT+0xee>
 80023dc:	68fb      	ldr	r3, [r7, #12]
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	4a54      	ldr	r2, [pc, #336]	; (8002534 <HAL_DMA_Start_IT+0x228>)
 80023e2:	4293      	cmp	r3, r2
 80023e4:	d009      	beq.n	80023fa <HAL_DMA_Start_IT+0xee>
 80023e6:	68fb      	ldr	r3, [r7, #12]
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	4a53      	ldr	r2, [pc, #332]	; (8002538 <HAL_DMA_Start_IT+0x22c>)
 80023ec:	4293      	cmp	r3, r2
 80023ee:	d004      	beq.n	80023fa <HAL_DMA_Start_IT+0xee>
 80023f0:	68fb      	ldr	r3, [r7, #12]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	4a51      	ldr	r2, [pc, #324]	; (800253c <HAL_DMA_Start_IT+0x230>)
 80023f6:	4293      	cmp	r3, r2
 80023f8:	d108      	bne.n	800240c <HAL_DMA_Start_IT+0x100>
 80023fa:	68fb      	ldr	r3, [r7, #12]
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	681a      	ldr	r2, [r3, #0]
 8002400:	68fb      	ldr	r3, [r7, #12]
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	f022 0201 	bic.w	r2, r2, #1
 8002408:	601a      	str	r2, [r3, #0]
 800240a:	e007      	b.n	800241c <HAL_DMA_Start_IT+0x110>
 800240c:	68fb      	ldr	r3, [r7, #12]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	681a      	ldr	r2, [r3, #0]
 8002412:	68fb      	ldr	r3, [r7, #12]
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	f022 0201 	bic.w	r2, r2, #1
 800241a:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800241c:	683b      	ldr	r3, [r7, #0]
 800241e:	687a      	ldr	r2, [r7, #4]
 8002420:	68b9      	ldr	r1, [r7, #8]
 8002422:	68f8      	ldr	r0, [r7, #12]
 8002424:	f001 f906 	bl	8003634 <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8002428:	68fb      	ldr	r3, [r7, #12]
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	4a34      	ldr	r2, [pc, #208]	; (8002500 <HAL_DMA_Start_IT+0x1f4>)
 800242e:	4293      	cmp	r3, r2
 8002430:	d04a      	beq.n	80024c8 <HAL_DMA_Start_IT+0x1bc>
 8002432:	68fb      	ldr	r3, [r7, #12]
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	4a33      	ldr	r2, [pc, #204]	; (8002504 <HAL_DMA_Start_IT+0x1f8>)
 8002438:	4293      	cmp	r3, r2
 800243a:	d045      	beq.n	80024c8 <HAL_DMA_Start_IT+0x1bc>
 800243c:	68fb      	ldr	r3, [r7, #12]
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	4a31      	ldr	r2, [pc, #196]	; (8002508 <HAL_DMA_Start_IT+0x1fc>)
 8002442:	4293      	cmp	r3, r2
 8002444:	d040      	beq.n	80024c8 <HAL_DMA_Start_IT+0x1bc>
 8002446:	68fb      	ldr	r3, [r7, #12]
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	4a30      	ldr	r2, [pc, #192]	; (800250c <HAL_DMA_Start_IT+0x200>)
 800244c:	4293      	cmp	r3, r2
 800244e:	d03b      	beq.n	80024c8 <HAL_DMA_Start_IT+0x1bc>
 8002450:	68fb      	ldr	r3, [r7, #12]
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	4a2e      	ldr	r2, [pc, #184]	; (8002510 <HAL_DMA_Start_IT+0x204>)
 8002456:	4293      	cmp	r3, r2
 8002458:	d036      	beq.n	80024c8 <HAL_DMA_Start_IT+0x1bc>
 800245a:	68fb      	ldr	r3, [r7, #12]
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	4a2d      	ldr	r2, [pc, #180]	; (8002514 <HAL_DMA_Start_IT+0x208>)
 8002460:	4293      	cmp	r3, r2
 8002462:	d031      	beq.n	80024c8 <HAL_DMA_Start_IT+0x1bc>
 8002464:	68fb      	ldr	r3, [r7, #12]
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	4a2b      	ldr	r2, [pc, #172]	; (8002518 <HAL_DMA_Start_IT+0x20c>)
 800246a:	4293      	cmp	r3, r2
 800246c:	d02c      	beq.n	80024c8 <HAL_DMA_Start_IT+0x1bc>
 800246e:	68fb      	ldr	r3, [r7, #12]
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	4a2a      	ldr	r2, [pc, #168]	; (800251c <HAL_DMA_Start_IT+0x210>)
 8002474:	4293      	cmp	r3, r2
 8002476:	d027      	beq.n	80024c8 <HAL_DMA_Start_IT+0x1bc>
 8002478:	68fb      	ldr	r3, [r7, #12]
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	4a28      	ldr	r2, [pc, #160]	; (8002520 <HAL_DMA_Start_IT+0x214>)
 800247e:	4293      	cmp	r3, r2
 8002480:	d022      	beq.n	80024c8 <HAL_DMA_Start_IT+0x1bc>
 8002482:	68fb      	ldr	r3, [r7, #12]
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	4a27      	ldr	r2, [pc, #156]	; (8002524 <HAL_DMA_Start_IT+0x218>)
 8002488:	4293      	cmp	r3, r2
 800248a:	d01d      	beq.n	80024c8 <HAL_DMA_Start_IT+0x1bc>
 800248c:	68fb      	ldr	r3, [r7, #12]
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	4a25      	ldr	r2, [pc, #148]	; (8002528 <HAL_DMA_Start_IT+0x21c>)
 8002492:	4293      	cmp	r3, r2
 8002494:	d018      	beq.n	80024c8 <HAL_DMA_Start_IT+0x1bc>
 8002496:	68fb      	ldr	r3, [r7, #12]
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	4a24      	ldr	r2, [pc, #144]	; (800252c <HAL_DMA_Start_IT+0x220>)
 800249c:	4293      	cmp	r3, r2
 800249e:	d013      	beq.n	80024c8 <HAL_DMA_Start_IT+0x1bc>
 80024a0:	68fb      	ldr	r3, [r7, #12]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	4a22      	ldr	r2, [pc, #136]	; (8002530 <HAL_DMA_Start_IT+0x224>)
 80024a6:	4293      	cmp	r3, r2
 80024a8:	d00e      	beq.n	80024c8 <HAL_DMA_Start_IT+0x1bc>
 80024aa:	68fb      	ldr	r3, [r7, #12]
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	4a21      	ldr	r2, [pc, #132]	; (8002534 <HAL_DMA_Start_IT+0x228>)
 80024b0:	4293      	cmp	r3, r2
 80024b2:	d009      	beq.n	80024c8 <HAL_DMA_Start_IT+0x1bc>
 80024b4:	68fb      	ldr	r3, [r7, #12]
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	4a1f      	ldr	r2, [pc, #124]	; (8002538 <HAL_DMA_Start_IT+0x22c>)
 80024ba:	4293      	cmp	r3, r2
 80024bc:	d004      	beq.n	80024c8 <HAL_DMA_Start_IT+0x1bc>
 80024be:	68fb      	ldr	r3, [r7, #12]
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	4a1e      	ldr	r2, [pc, #120]	; (800253c <HAL_DMA_Start_IT+0x230>)
 80024c4:	4293      	cmp	r3, r2
 80024c6:	d101      	bne.n	80024cc <HAL_DMA_Start_IT+0x1c0>
 80024c8:	2301      	movs	r3, #1
 80024ca:	e000      	b.n	80024ce <HAL_DMA_Start_IT+0x1c2>
 80024cc:	2300      	movs	r3, #0
 80024ce:	2b00      	cmp	r3, #0
 80024d0:	d036      	beq.n	8002540 <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 80024d2:	68fb      	ldr	r3, [r7, #12]
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	f023 021e 	bic.w	r2, r3, #30
 80024dc:	68fb      	ldr	r3, [r7, #12]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	f042 0216 	orr.w	r2, r2, #22
 80024e4:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 80024e6:	68fb      	ldr	r3, [r7, #12]
 80024e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024ea:	2b00      	cmp	r3, #0
 80024ec:	d03e      	beq.n	800256c <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 80024ee:	68fb      	ldr	r3, [r7, #12]
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	681a      	ldr	r2, [r3, #0]
 80024f4:	68fb      	ldr	r3, [r7, #12]
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	f042 0208 	orr.w	r2, r2, #8
 80024fc:	601a      	str	r2, [r3, #0]
 80024fe:	e035      	b.n	800256c <HAL_DMA_Start_IT+0x260>
 8002500:	40020010 	.word	0x40020010
 8002504:	40020028 	.word	0x40020028
 8002508:	40020040 	.word	0x40020040
 800250c:	40020058 	.word	0x40020058
 8002510:	40020070 	.word	0x40020070
 8002514:	40020088 	.word	0x40020088
 8002518:	400200a0 	.word	0x400200a0
 800251c:	400200b8 	.word	0x400200b8
 8002520:	40020410 	.word	0x40020410
 8002524:	40020428 	.word	0x40020428
 8002528:	40020440 	.word	0x40020440
 800252c:	40020458 	.word	0x40020458
 8002530:	40020470 	.word	0x40020470
 8002534:	40020488 	.word	0x40020488
 8002538:	400204a0 	.word	0x400204a0
 800253c:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 8002540:	68fb      	ldr	r3, [r7, #12]
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	f023 020e 	bic.w	r2, r3, #14
 800254a:	68fb      	ldr	r3, [r7, #12]
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	f042 020a 	orr.w	r2, r2, #10
 8002552:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8002554:	68fb      	ldr	r3, [r7, #12]
 8002556:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002558:	2b00      	cmp	r3, #0
 800255a:	d007      	beq.n	800256c <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 800255c:	68fb      	ldr	r3, [r7, #12]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	681a      	ldr	r2, [r3, #0]
 8002562:	68fb      	ldr	r3, [r7, #12]
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	f042 0204 	orr.w	r2, r2, #4
 800256a:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800256c:	68fb      	ldr	r3, [r7, #12]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	4a83      	ldr	r2, [pc, #524]	; (8002780 <HAL_DMA_Start_IT+0x474>)
 8002572:	4293      	cmp	r3, r2
 8002574:	d072      	beq.n	800265c <HAL_DMA_Start_IT+0x350>
 8002576:	68fb      	ldr	r3, [r7, #12]
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	4a82      	ldr	r2, [pc, #520]	; (8002784 <HAL_DMA_Start_IT+0x478>)
 800257c:	4293      	cmp	r3, r2
 800257e:	d06d      	beq.n	800265c <HAL_DMA_Start_IT+0x350>
 8002580:	68fb      	ldr	r3, [r7, #12]
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	4a80      	ldr	r2, [pc, #512]	; (8002788 <HAL_DMA_Start_IT+0x47c>)
 8002586:	4293      	cmp	r3, r2
 8002588:	d068      	beq.n	800265c <HAL_DMA_Start_IT+0x350>
 800258a:	68fb      	ldr	r3, [r7, #12]
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	4a7f      	ldr	r2, [pc, #508]	; (800278c <HAL_DMA_Start_IT+0x480>)
 8002590:	4293      	cmp	r3, r2
 8002592:	d063      	beq.n	800265c <HAL_DMA_Start_IT+0x350>
 8002594:	68fb      	ldr	r3, [r7, #12]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	4a7d      	ldr	r2, [pc, #500]	; (8002790 <HAL_DMA_Start_IT+0x484>)
 800259a:	4293      	cmp	r3, r2
 800259c:	d05e      	beq.n	800265c <HAL_DMA_Start_IT+0x350>
 800259e:	68fb      	ldr	r3, [r7, #12]
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	4a7c      	ldr	r2, [pc, #496]	; (8002794 <HAL_DMA_Start_IT+0x488>)
 80025a4:	4293      	cmp	r3, r2
 80025a6:	d059      	beq.n	800265c <HAL_DMA_Start_IT+0x350>
 80025a8:	68fb      	ldr	r3, [r7, #12]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	4a7a      	ldr	r2, [pc, #488]	; (8002798 <HAL_DMA_Start_IT+0x48c>)
 80025ae:	4293      	cmp	r3, r2
 80025b0:	d054      	beq.n	800265c <HAL_DMA_Start_IT+0x350>
 80025b2:	68fb      	ldr	r3, [r7, #12]
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	4a79      	ldr	r2, [pc, #484]	; (800279c <HAL_DMA_Start_IT+0x490>)
 80025b8:	4293      	cmp	r3, r2
 80025ba:	d04f      	beq.n	800265c <HAL_DMA_Start_IT+0x350>
 80025bc:	68fb      	ldr	r3, [r7, #12]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	4a77      	ldr	r2, [pc, #476]	; (80027a0 <HAL_DMA_Start_IT+0x494>)
 80025c2:	4293      	cmp	r3, r2
 80025c4:	d04a      	beq.n	800265c <HAL_DMA_Start_IT+0x350>
 80025c6:	68fb      	ldr	r3, [r7, #12]
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	4a76      	ldr	r2, [pc, #472]	; (80027a4 <HAL_DMA_Start_IT+0x498>)
 80025cc:	4293      	cmp	r3, r2
 80025ce:	d045      	beq.n	800265c <HAL_DMA_Start_IT+0x350>
 80025d0:	68fb      	ldr	r3, [r7, #12]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	4a74      	ldr	r2, [pc, #464]	; (80027a8 <HAL_DMA_Start_IT+0x49c>)
 80025d6:	4293      	cmp	r3, r2
 80025d8:	d040      	beq.n	800265c <HAL_DMA_Start_IT+0x350>
 80025da:	68fb      	ldr	r3, [r7, #12]
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	4a73      	ldr	r2, [pc, #460]	; (80027ac <HAL_DMA_Start_IT+0x4a0>)
 80025e0:	4293      	cmp	r3, r2
 80025e2:	d03b      	beq.n	800265c <HAL_DMA_Start_IT+0x350>
 80025e4:	68fb      	ldr	r3, [r7, #12]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	4a71      	ldr	r2, [pc, #452]	; (80027b0 <HAL_DMA_Start_IT+0x4a4>)
 80025ea:	4293      	cmp	r3, r2
 80025ec:	d036      	beq.n	800265c <HAL_DMA_Start_IT+0x350>
 80025ee:	68fb      	ldr	r3, [r7, #12]
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	4a70      	ldr	r2, [pc, #448]	; (80027b4 <HAL_DMA_Start_IT+0x4a8>)
 80025f4:	4293      	cmp	r3, r2
 80025f6:	d031      	beq.n	800265c <HAL_DMA_Start_IT+0x350>
 80025f8:	68fb      	ldr	r3, [r7, #12]
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	4a6e      	ldr	r2, [pc, #440]	; (80027b8 <HAL_DMA_Start_IT+0x4ac>)
 80025fe:	4293      	cmp	r3, r2
 8002600:	d02c      	beq.n	800265c <HAL_DMA_Start_IT+0x350>
 8002602:	68fb      	ldr	r3, [r7, #12]
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	4a6d      	ldr	r2, [pc, #436]	; (80027bc <HAL_DMA_Start_IT+0x4b0>)
 8002608:	4293      	cmp	r3, r2
 800260a:	d027      	beq.n	800265c <HAL_DMA_Start_IT+0x350>
 800260c:	68fb      	ldr	r3, [r7, #12]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	4a6b      	ldr	r2, [pc, #428]	; (80027c0 <HAL_DMA_Start_IT+0x4b4>)
 8002612:	4293      	cmp	r3, r2
 8002614:	d022      	beq.n	800265c <HAL_DMA_Start_IT+0x350>
 8002616:	68fb      	ldr	r3, [r7, #12]
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	4a6a      	ldr	r2, [pc, #424]	; (80027c4 <HAL_DMA_Start_IT+0x4b8>)
 800261c:	4293      	cmp	r3, r2
 800261e:	d01d      	beq.n	800265c <HAL_DMA_Start_IT+0x350>
 8002620:	68fb      	ldr	r3, [r7, #12]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	4a68      	ldr	r2, [pc, #416]	; (80027c8 <HAL_DMA_Start_IT+0x4bc>)
 8002626:	4293      	cmp	r3, r2
 8002628:	d018      	beq.n	800265c <HAL_DMA_Start_IT+0x350>
 800262a:	68fb      	ldr	r3, [r7, #12]
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	4a67      	ldr	r2, [pc, #412]	; (80027cc <HAL_DMA_Start_IT+0x4c0>)
 8002630:	4293      	cmp	r3, r2
 8002632:	d013      	beq.n	800265c <HAL_DMA_Start_IT+0x350>
 8002634:	68fb      	ldr	r3, [r7, #12]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	4a65      	ldr	r2, [pc, #404]	; (80027d0 <HAL_DMA_Start_IT+0x4c4>)
 800263a:	4293      	cmp	r3, r2
 800263c:	d00e      	beq.n	800265c <HAL_DMA_Start_IT+0x350>
 800263e:	68fb      	ldr	r3, [r7, #12]
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	4a64      	ldr	r2, [pc, #400]	; (80027d4 <HAL_DMA_Start_IT+0x4c8>)
 8002644:	4293      	cmp	r3, r2
 8002646:	d009      	beq.n	800265c <HAL_DMA_Start_IT+0x350>
 8002648:	68fb      	ldr	r3, [r7, #12]
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	4a62      	ldr	r2, [pc, #392]	; (80027d8 <HAL_DMA_Start_IT+0x4cc>)
 800264e:	4293      	cmp	r3, r2
 8002650:	d004      	beq.n	800265c <HAL_DMA_Start_IT+0x350>
 8002652:	68fb      	ldr	r3, [r7, #12]
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	4a61      	ldr	r2, [pc, #388]	; (80027dc <HAL_DMA_Start_IT+0x4d0>)
 8002658:	4293      	cmp	r3, r2
 800265a:	d101      	bne.n	8002660 <HAL_DMA_Start_IT+0x354>
 800265c:	2301      	movs	r3, #1
 800265e:	e000      	b.n	8002662 <HAL_DMA_Start_IT+0x356>
 8002660:	2300      	movs	r3, #0
 8002662:	2b00      	cmp	r3, #0
 8002664:	d01a      	beq.n	800269c <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8002666:	68fb      	ldr	r3, [r7, #12]
 8002668:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002670:	2b00      	cmp	r3, #0
 8002672:	d007      	beq.n	8002684 <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8002674:	68fb      	ldr	r3, [r7, #12]
 8002676:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002678:	681a      	ldr	r2, [r3, #0]
 800267a:	68fb      	ldr	r3, [r7, #12]
 800267c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800267e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002682:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 8002684:	68fb      	ldr	r3, [r7, #12]
 8002686:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002688:	2b00      	cmp	r3, #0
 800268a:	d007      	beq.n	800269c <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 800268c:	68fb      	ldr	r3, [r7, #12]
 800268e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002690:	681a      	ldr	r2, [r3, #0]
 8002692:	68fb      	ldr	r3, [r7, #12]
 8002694:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002696:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800269a:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800269c:	68fb      	ldr	r3, [r7, #12]
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	4a37      	ldr	r2, [pc, #220]	; (8002780 <HAL_DMA_Start_IT+0x474>)
 80026a2:	4293      	cmp	r3, r2
 80026a4:	d04a      	beq.n	800273c <HAL_DMA_Start_IT+0x430>
 80026a6:	68fb      	ldr	r3, [r7, #12]
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	4a36      	ldr	r2, [pc, #216]	; (8002784 <HAL_DMA_Start_IT+0x478>)
 80026ac:	4293      	cmp	r3, r2
 80026ae:	d045      	beq.n	800273c <HAL_DMA_Start_IT+0x430>
 80026b0:	68fb      	ldr	r3, [r7, #12]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	4a34      	ldr	r2, [pc, #208]	; (8002788 <HAL_DMA_Start_IT+0x47c>)
 80026b6:	4293      	cmp	r3, r2
 80026b8:	d040      	beq.n	800273c <HAL_DMA_Start_IT+0x430>
 80026ba:	68fb      	ldr	r3, [r7, #12]
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	4a33      	ldr	r2, [pc, #204]	; (800278c <HAL_DMA_Start_IT+0x480>)
 80026c0:	4293      	cmp	r3, r2
 80026c2:	d03b      	beq.n	800273c <HAL_DMA_Start_IT+0x430>
 80026c4:	68fb      	ldr	r3, [r7, #12]
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	4a31      	ldr	r2, [pc, #196]	; (8002790 <HAL_DMA_Start_IT+0x484>)
 80026ca:	4293      	cmp	r3, r2
 80026cc:	d036      	beq.n	800273c <HAL_DMA_Start_IT+0x430>
 80026ce:	68fb      	ldr	r3, [r7, #12]
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	4a30      	ldr	r2, [pc, #192]	; (8002794 <HAL_DMA_Start_IT+0x488>)
 80026d4:	4293      	cmp	r3, r2
 80026d6:	d031      	beq.n	800273c <HAL_DMA_Start_IT+0x430>
 80026d8:	68fb      	ldr	r3, [r7, #12]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	4a2e      	ldr	r2, [pc, #184]	; (8002798 <HAL_DMA_Start_IT+0x48c>)
 80026de:	4293      	cmp	r3, r2
 80026e0:	d02c      	beq.n	800273c <HAL_DMA_Start_IT+0x430>
 80026e2:	68fb      	ldr	r3, [r7, #12]
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	4a2d      	ldr	r2, [pc, #180]	; (800279c <HAL_DMA_Start_IT+0x490>)
 80026e8:	4293      	cmp	r3, r2
 80026ea:	d027      	beq.n	800273c <HAL_DMA_Start_IT+0x430>
 80026ec:	68fb      	ldr	r3, [r7, #12]
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	4a2b      	ldr	r2, [pc, #172]	; (80027a0 <HAL_DMA_Start_IT+0x494>)
 80026f2:	4293      	cmp	r3, r2
 80026f4:	d022      	beq.n	800273c <HAL_DMA_Start_IT+0x430>
 80026f6:	68fb      	ldr	r3, [r7, #12]
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	4a2a      	ldr	r2, [pc, #168]	; (80027a4 <HAL_DMA_Start_IT+0x498>)
 80026fc:	4293      	cmp	r3, r2
 80026fe:	d01d      	beq.n	800273c <HAL_DMA_Start_IT+0x430>
 8002700:	68fb      	ldr	r3, [r7, #12]
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	4a28      	ldr	r2, [pc, #160]	; (80027a8 <HAL_DMA_Start_IT+0x49c>)
 8002706:	4293      	cmp	r3, r2
 8002708:	d018      	beq.n	800273c <HAL_DMA_Start_IT+0x430>
 800270a:	68fb      	ldr	r3, [r7, #12]
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	4a27      	ldr	r2, [pc, #156]	; (80027ac <HAL_DMA_Start_IT+0x4a0>)
 8002710:	4293      	cmp	r3, r2
 8002712:	d013      	beq.n	800273c <HAL_DMA_Start_IT+0x430>
 8002714:	68fb      	ldr	r3, [r7, #12]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	4a25      	ldr	r2, [pc, #148]	; (80027b0 <HAL_DMA_Start_IT+0x4a4>)
 800271a:	4293      	cmp	r3, r2
 800271c:	d00e      	beq.n	800273c <HAL_DMA_Start_IT+0x430>
 800271e:	68fb      	ldr	r3, [r7, #12]
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	4a24      	ldr	r2, [pc, #144]	; (80027b4 <HAL_DMA_Start_IT+0x4a8>)
 8002724:	4293      	cmp	r3, r2
 8002726:	d009      	beq.n	800273c <HAL_DMA_Start_IT+0x430>
 8002728:	68fb      	ldr	r3, [r7, #12]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	4a22      	ldr	r2, [pc, #136]	; (80027b8 <HAL_DMA_Start_IT+0x4ac>)
 800272e:	4293      	cmp	r3, r2
 8002730:	d004      	beq.n	800273c <HAL_DMA_Start_IT+0x430>
 8002732:	68fb      	ldr	r3, [r7, #12]
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	4a21      	ldr	r2, [pc, #132]	; (80027bc <HAL_DMA_Start_IT+0x4b0>)
 8002738:	4293      	cmp	r3, r2
 800273a:	d108      	bne.n	800274e <HAL_DMA_Start_IT+0x442>
 800273c:	68fb      	ldr	r3, [r7, #12]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	681a      	ldr	r2, [r3, #0]
 8002742:	68fb      	ldr	r3, [r7, #12]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	f042 0201 	orr.w	r2, r2, #1
 800274a:	601a      	str	r2, [r3, #0]
 800274c:	e012      	b.n	8002774 <HAL_DMA_Start_IT+0x468>
 800274e:	68fb      	ldr	r3, [r7, #12]
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	681a      	ldr	r2, [r3, #0]
 8002754:	68fb      	ldr	r3, [r7, #12]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	f042 0201 	orr.w	r2, r2, #1
 800275c:	601a      	str	r2, [r3, #0]
 800275e:	e009      	b.n	8002774 <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 8002760:	68fb      	ldr	r3, [r7, #12]
 8002762:	2200      	movs	r2, #0
 8002764:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8002768:	68fb      	ldr	r3, [r7, #12]
 800276a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800276e:	655a      	str	r2, [r3, #84]	; 0x54

    /* Return error status */
    status = HAL_ERROR;
 8002770:	2301      	movs	r3, #1
 8002772:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8002774:	7dfb      	ldrb	r3, [r7, #23]
}
 8002776:	4618      	mov	r0, r3
 8002778:	3718      	adds	r7, #24
 800277a:	46bd      	mov	sp, r7
 800277c:	bd80      	pop	{r7, pc}
 800277e:	bf00      	nop
 8002780:	40020010 	.word	0x40020010
 8002784:	40020028 	.word	0x40020028
 8002788:	40020040 	.word	0x40020040
 800278c:	40020058 	.word	0x40020058
 8002790:	40020070 	.word	0x40020070
 8002794:	40020088 	.word	0x40020088
 8002798:	400200a0 	.word	0x400200a0
 800279c:	400200b8 	.word	0x400200b8
 80027a0:	40020410 	.word	0x40020410
 80027a4:	40020428 	.word	0x40020428
 80027a8:	40020440 	.word	0x40020440
 80027ac:	40020458 	.word	0x40020458
 80027b0:	40020470 	.word	0x40020470
 80027b4:	40020488 	.word	0x40020488
 80027b8:	400204a0 	.word	0x400204a0
 80027bc:	400204b8 	.word	0x400204b8
 80027c0:	58025408 	.word	0x58025408
 80027c4:	5802541c 	.word	0x5802541c
 80027c8:	58025430 	.word	0x58025430
 80027cc:	58025444 	.word	0x58025444
 80027d0:	58025458 	.word	0x58025458
 80027d4:	5802546c 	.word	0x5802546c
 80027d8:	58025480 	.word	0x58025480
 80027dc:	58025494 	.word	0x58025494

080027e0 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80027e0:	b580      	push	{r7, lr}
 80027e2:	b08a      	sub	sp, #40	; 0x28
 80027e4:	af00      	add	r7, sp, #0
 80027e6:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 80027e8:	2300      	movs	r3, #0
 80027ea:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 80027ec:	4b67      	ldr	r3, [pc, #412]	; (800298c <HAL_DMA_IRQHandler+0x1ac>)
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	4a67      	ldr	r2, [pc, #412]	; (8002990 <HAL_DMA_IRQHandler+0x1b0>)
 80027f2:	fba2 2303 	umull	r2, r3, r2, r3
 80027f6:	0a9b      	lsrs	r3, r3, #10
 80027f8:	627b      	str	r3, [r7, #36]	; 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80027fe:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002804:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 8002806:	6a3b      	ldr	r3, [r7, #32]
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 800280c:	69fb      	ldr	r3, [r7, #28]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	4a5f      	ldr	r2, [pc, #380]	; (8002994 <HAL_DMA_IRQHandler+0x1b4>)
 8002818:	4293      	cmp	r3, r2
 800281a:	d04a      	beq.n	80028b2 <HAL_DMA_IRQHandler+0xd2>
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	4a5d      	ldr	r2, [pc, #372]	; (8002998 <HAL_DMA_IRQHandler+0x1b8>)
 8002822:	4293      	cmp	r3, r2
 8002824:	d045      	beq.n	80028b2 <HAL_DMA_IRQHandler+0xd2>
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	4a5c      	ldr	r2, [pc, #368]	; (800299c <HAL_DMA_IRQHandler+0x1bc>)
 800282c:	4293      	cmp	r3, r2
 800282e:	d040      	beq.n	80028b2 <HAL_DMA_IRQHandler+0xd2>
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	4a5a      	ldr	r2, [pc, #360]	; (80029a0 <HAL_DMA_IRQHandler+0x1c0>)
 8002836:	4293      	cmp	r3, r2
 8002838:	d03b      	beq.n	80028b2 <HAL_DMA_IRQHandler+0xd2>
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	4a59      	ldr	r2, [pc, #356]	; (80029a4 <HAL_DMA_IRQHandler+0x1c4>)
 8002840:	4293      	cmp	r3, r2
 8002842:	d036      	beq.n	80028b2 <HAL_DMA_IRQHandler+0xd2>
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	4a57      	ldr	r2, [pc, #348]	; (80029a8 <HAL_DMA_IRQHandler+0x1c8>)
 800284a:	4293      	cmp	r3, r2
 800284c:	d031      	beq.n	80028b2 <HAL_DMA_IRQHandler+0xd2>
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	4a56      	ldr	r2, [pc, #344]	; (80029ac <HAL_DMA_IRQHandler+0x1cc>)
 8002854:	4293      	cmp	r3, r2
 8002856:	d02c      	beq.n	80028b2 <HAL_DMA_IRQHandler+0xd2>
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	4a54      	ldr	r2, [pc, #336]	; (80029b0 <HAL_DMA_IRQHandler+0x1d0>)
 800285e:	4293      	cmp	r3, r2
 8002860:	d027      	beq.n	80028b2 <HAL_DMA_IRQHandler+0xd2>
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	4a53      	ldr	r2, [pc, #332]	; (80029b4 <HAL_DMA_IRQHandler+0x1d4>)
 8002868:	4293      	cmp	r3, r2
 800286a:	d022      	beq.n	80028b2 <HAL_DMA_IRQHandler+0xd2>
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	4a51      	ldr	r2, [pc, #324]	; (80029b8 <HAL_DMA_IRQHandler+0x1d8>)
 8002872:	4293      	cmp	r3, r2
 8002874:	d01d      	beq.n	80028b2 <HAL_DMA_IRQHandler+0xd2>
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	4a50      	ldr	r2, [pc, #320]	; (80029bc <HAL_DMA_IRQHandler+0x1dc>)
 800287c:	4293      	cmp	r3, r2
 800287e:	d018      	beq.n	80028b2 <HAL_DMA_IRQHandler+0xd2>
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	4a4e      	ldr	r2, [pc, #312]	; (80029c0 <HAL_DMA_IRQHandler+0x1e0>)
 8002886:	4293      	cmp	r3, r2
 8002888:	d013      	beq.n	80028b2 <HAL_DMA_IRQHandler+0xd2>
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	4a4d      	ldr	r2, [pc, #308]	; (80029c4 <HAL_DMA_IRQHandler+0x1e4>)
 8002890:	4293      	cmp	r3, r2
 8002892:	d00e      	beq.n	80028b2 <HAL_DMA_IRQHandler+0xd2>
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	4a4b      	ldr	r2, [pc, #300]	; (80029c8 <HAL_DMA_IRQHandler+0x1e8>)
 800289a:	4293      	cmp	r3, r2
 800289c:	d009      	beq.n	80028b2 <HAL_DMA_IRQHandler+0xd2>
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	4a4a      	ldr	r2, [pc, #296]	; (80029cc <HAL_DMA_IRQHandler+0x1ec>)
 80028a4:	4293      	cmp	r3, r2
 80028a6:	d004      	beq.n	80028b2 <HAL_DMA_IRQHandler+0xd2>
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	4a48      	ldr	r2, [pc, #288]	; (80029d0 <HAL_DMA_IRQHandler+0x1f0>)
 80028ae:	4293      	cmp	r3, r2
 80028b0:	d101      	bne.n	80028b6 <HAL_DMA_IRQHandler+0xd6>
 80028b2:	2301      	movs	r3, #1
 80028b4:	e000      	b.n	80028b8 <HAL_DMA_IRQHandler+0xd8>
 80028b6:	2300      	movs	r3, #0
 80028b8:	2b00      	cmp	r3, #0
 80028ba:	f000 842b 	beq.w	8003114 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80028c2:	f003 031f 	and.w	r3, r3, #31
 80028c6:	2208      	movs	r2, #8
 80028c8:	409a      	lsls	r2, r3
 80028ca:	69bb      	ldr	r3, [r7, #24]
 80028cc:	4013      	ands	r3, r2
 80028ce:	2b00      	cmp	r3, #0
 80028d0:	f000 80a2 	beq.w	8002a18 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	4a2e      	ldr	r2, [pc, #184]	; (8002994 <HAL_DMA_IRQHandler+0x1b4>)
 80028da:	4293      	cmp	r3, r2
 80028dc:	d04a      	beq.n	8002974 <HAL_DMA_IRQHandler+0x194>
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	4a2d      	ldr	r2, [pc, #180]	; (8002998 <HAL_DMA_IRQHandler+0x1b8>)
 80028e4:	4293      	cmp	r3, r2
 80028e6:	d045      	beq.n	8002974 <HAL_DMA_IRQHandler+0x194>
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	4a2b      	ldr	r2, [pc, #172]	; (800299c <HAL_DMA_IRQHandler+0x1bc>)
 80028ee:	4293      	cmp	r3, r2
 80028f0:	d040      	beq.n	8002974 <HAL_DMA_IRQHandler+0x194>
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	4a2a      	ldr	r2, [pc, #168]	; (80029a0 <HAL_DMA_IRQHandler+0x1c0>)
 80028f8:	4293      	cmp	r3, r2
 80028fa:	d03b      	beq.n	8002974 <HAL_DMA_IRQHandler+0x194>
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	4a28      	ldr	r2, [pc, #160]	; (80029a4 <HAL_DMA_IRQHandler+0x1c4>)
 8002902:	4293      	cmp	r3, r2
 8002904:	d036      	beq.n	8002974 <HAL_DMA_IRQHandler+0x194>
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	4a27      	ldr	r2, [pc, #156]	; (80029a8 <HAL_DMA_IRQHandler+0x1c8>)
 800290c:	4293      	cmp	r3, r2
 800290e:	d031      	beq.n	8002974 <HAL_DMA_IRQHandler+0x194>
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	4a25      	ldr	r2, [pc, #148]	; (80029ac <HAL_DMA_IRQHandler+0x1cc>)
 8002916:	4293      	cmp	r3, r2
 8002918:	d02c      	beq.n	8002974 <HAL_DMA_IRQHandler+0x194>
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	4a24      	ldr	r2, [pc, #144]	; (80029b0 <HAL_DMA_IRQHandler+0x1d0>)
 8002920:	4293      	cmp	r3, r2
 8002922:	d027      	beq.n	8002974 <HAL_DMA_IRQHandler+0x194>
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	4a22      	ldr	r2, [pc, #136]	; (80029b4 <HAL_DMA_IRQHandler+0x1d4>)
 800292a:	4293      	cmp	r3, r2
 800292c:	d022      	beq.n	8002974 <HAL_DMA_IRQHandler+0x194>
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	4a21      	ldr	r2, [pc, #132]	; (80029b8 <HAL_DMA_IRQHandler+0x1d8>)
 8002934:	4293      	cmp	r3, r2
 8002936:	d01d      	beq.n	8002974 <HAL_DMA_IRQHandler+0x194>
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	4a1f      	ldr	r2, [pc, #124]	; (80029bc <HAL_DMA_IRQHandler+0x1dc>)
 800293e:	4293      	cmp	r3, r2
 8002940:	d018      	beq.n	8002974 <HAL_DMA_IRQHandler+0x194>
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	4a1e      	ldr	r2, [pc, #120]	; (80029c0 <HAL_DMA_IRQHandler+0x1e0>)
 8002948:	4293      	cmp	r3, r2
 800294a:	d013      	beq.n	8002974 <HAL_DMA_IRQHandler+0x194>
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	4a1c      	ldr	r2, [pc, #112]	; (80029c4 <HAL_DMA_IRQHandler+0x1e4>)
 8002952:	4293      	cmp	r3, r2
 8002954:	d00e      	beq.n	8002974 <HAL_DMA_IRQHandler+0x194>
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	4a1b      	ldr	r2, [pc, #108]	; (80029c8 <HAL_DMA_IRQHandler+0x1e8>)
 800295c:	4293      	cmp	r3, r2
 800295e:	d009      	beq.n	8002974 <HAL_DMA_IRQHandler+0x194>
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	4a19      	ldr	r2, [pc, #100]	; (80029cc <HAL_DMA_IRQHandler+0x1ec>)
 8002966:	4293      	cmp	r3, r2
 8002968:	d004      	beq.n	8002974 <HAL_DMA_IRQHandler+0x194>
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	4a18      	ldr	r2, [pc, #96]	; (80029d0 <HAL_DMA_IRQHandler+0x1f0>)
 8002970:	4293      	cmp	r3, r2
 8002972:	d12f      	bne.n	80029d4 <HAL_DMA_IRQHandler+0x1f4>
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	f003 0304 	and.w	r3, r3, #4
 800297e:	2b00      	cmp	r3, #0
 8002980:	bf14      	ite	ne
 8002982:	2301      	movne	r3, #1
 8002984:	2300      	moveq	r3, #0
 8002986:	b2db      	uxtb	r3, r3
 8002988:	e02e      	b.n	80029e8 <HAL_DMA_IRQHandler+0x208>
 800298a:	bf00      	nop
 800298c:	24000000 	.word	0x24000000
 8002990:	1b4e81b5 	.word	0x1b4e81b5
 8002994:	40020010 	.word	0x40020010
 8002998:	40020028 	.word	0x40020028
 800299c:	40020040 	.word	0x40020040
 80029a0:	40020058 	.word	0x40020058
 80029a4:	40020070 	.word	0x40020070
 80029a8:	40020088 	.word	0x40020088
 80029ac:	400200a0 	.word	0x400200a0
 80029b0:	400200b8 	.word	0x400200b8
 80029b4:	40020410 	.word	0x40020410
 80029b8:	40020428 	.word	0x40020428
 80029bc:	40020440 	.word	0x40020440
 80029c0:	40020458 	.word	0x40020458
 80029c4:	40020470 	.word	0x40020470
 80029c8:	40020488 	.word	0x40020488
 80029cc:	400204a0 	.word	0x400204a0
 80029d0:	400204b8 	.word	0x400204b8
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	f003 0308 	and.w	r3, r3, #8
 80029de:	2b00      	cmp	r3, #0
 80029e0:	bf14      	ite	ne
 80029e2:	2301      	movne	r3, #1
 80029e4:	2300      	moveq	r3, #0
 80029e6:	b2db      	uxtb	r3, r3
 80029e8:	2b00      	cmp	r3, #0
 80029ea:	d015      	beq.n	8002a18 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	681a      	ldr	r2, [r3, #0]
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	f022 0204 	bic.w	r2, r2, #4
 80029fa:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a00:	f003 031f 	and.w	r3, r3, #31
 8002a04:	2208      	movs	r2, #8
 8002a06:	409a      	lsls	r2, r3
 8002a08:	6a3b      	ldr	r3, [r7, #32]
 8002a0a:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002a10:	f043 0201 	orr.w	r2, r3, #1
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a1c:	f003 031f 	and.w	r3, r3, #31
 8002a20:	69ba      	ldr	r2, [r7, #24]
 8002a22:	fa22 f303 	lsr.w	r3, r2, r3
 8002a26:	f003 0301 	and.w	r3, r3, #1
 8002a2a:	2b00      	cmp	r3, #0
 8002a2c:	d06e      	beq.n	8002b0c <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	4a69      	ldr	r2, [pc, #420]	; (8002bd8 <HAL_DMA_IRQHandler+0x3f8>)
 8002a34:	4293      	cmp	r3, r2
 8002a36:	d04a      	beq.n	8002ace <HAL_DMA_IRQHandler+0x2ee>
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	4a67      	ldr	r2, [pc, #412]	; (8002bdc <HAL_DMA_IRQHandler+0x3fc>)
 8002a3e:	4293      	cmp	r3, r2
 8002a40:	d045      	beq.n	8002ace <HAL_DMA_IRQHandler+0x2ee>
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	4a66      	ldr	r2, [pc, #408]	; (8002be0 <HAL_DMA_IRQHandler+0x400>)
 8002a48:	4293      	cmp	r3, r2
 8002a4a:	d040      	beq.n	8002ace <HAL_DMA_IRQHandler+0x2ee>
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	4a64      	ldr	r2, [pc, #400]	; (8002be4 <HAL_DMA_IRQHandler+0x404>)
 8002a52:	4293      	cmp	r3, r2
 8002a54:	d03b      	beq.n	8002ace <HAL_DMA_IRQHandler+0x2ee>
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	4a63      	ldr	r2, [pc, #396]	; (8002be8 <HAL_DMA_IRQHandler+0x408>)
 8002a5c:	4293      	cmp	r3, r2
 8002a5e:	d036      	beq.n	8002ace <HAL_DMA_IRQHandler+0x2ee>
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	4a61      	ldr	r2, [pc, #388]	; (8002bec <HAL_DMA_IRQHandler+0x40c>)
 8002a66:	4293      	cmp	r3, r2
 8002a68:	d031      	beq.n	8002ace <HAL_DMA_IRQHandler+0x2ee>
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	4a60      	ldr	r2, [pc, #384]	; (8002bf0 <HAL_DMA_IRQHandler+0x410>)
 8002a70:	4293      	cmp	r3, r2
 8002a72:	d02c      	beq.n	8002ace <HAL_DMA_IRQHandler+0x2ee>
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	4a5e      	ldr	r2, [pc, #376]	; (8002bf4 <HAL_DMA_IRQHandler+0x414>)
 8002a7a:	4293      	cmp	r3, r2
 8002a7c:	d027      	beq.n	8002ace <HAL_DMA_IRQHandler+0x2ee>
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	4a5d      	ldr	r2, [pc, #372]	; (8002bf8 <HAL_DMA_IRQHandler+0x418>)
 8002a84:	4293      	cmp	r3, r2
 8002a86:	d022      	beq.n	8002ace <HAL_DMA_IRQHandler+0x2ee>
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	4a5b      	ldr	r2, [pc, #364]	; (8002bfc <HAL_DMA_IRQHandler+0x41c>)
 8002a8e:	4293      	cmp	r3, r2
 8002a90:	d01d      	beq.n	8002ace <HAL_DMA_IRQHandler+0x2ee>
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	4a5a      	ldr	r2, [pc, #360]	; (8002c00 <HAL_DMA_IRQHandler+0x420>)
 8002a98:	4293      	cmp	r3, r2
 8002a9a:	d018      	beq.n	8002ace <HAL_DMA_IRQHandler+0x2ee>
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	4a58      	ldr	r2, [pc, #352]	; (8002c04 <HAL_DMA_IRQHandler+0x424>)
 8002aa2:	4293      	cmp	r3, r2
 8002aa4:	d013      	beq.n	8002ace <HAL_DMA_IRQHandler+0x2ee>
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	4a57      	ldr	r2, [pc, #348]	; (8002c08 <HAL_DMA_IRQHandler+0x428>)
 8002aac:	4293      	cmp	r3, r2
 8002aae:	d00e      	beq.n	8002ace <HAL_DMA_IRQHandler+0x2ee>
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	4a55      	ldr	r2, [pc, #340]	; (8002c0c <HAL_DMA_IRQHandler+0x42c>)
 8002ab6:	4293      	cmp	r3, r2
 8002ab8:	d009      	beq.n	8002ace <HAL_DMA_IRQHandler+0x2ee>
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	4a54      	ldr	r2, [pc, #336]	; (8002c10 <HAL_DMA_IRQHandler+0x430>)
 8002ac0:	4293      	cmp	r3, r2
 8002ac2:	d004      	beq.n	8002ace <HAL_DMA_IRQHandler+0x2ee>
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	4a52      	ldr	r2, [pc, #328]	; (8002c14 <HAL_DMA_IRQHandler+0x434>)
 8002aca:	4293      	cmp	r3, r2
 8002acc:	d10a      	bne.n	8002ae4 <HAL_DMA_IRQHandler+0x304>
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	695b      	ldr	r3, [r3, #20]
 8002ad4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002ad8:	2b00      	cmp	r3, #0
 8002ada:	bf14      	ite	ne
 8002adc:	2301      	movne	r3, #1
 8002ade:	2300      	moveq	r3, #0
 8002ae0:	b2db      	uxtb	r3, r3
 8002ae2:	e003      	b.n	8002aec <HAL_DMA_IRQHandler+0x30c>
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	2300      	movs	r3, #0
 8002aec:	2b00      	cmp	r3, #0
 8002aee:	d00d      	beq.n	8002b0c <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002af4:	f003 031f 	and.w	r3, r3, #31
 8002af8:	2201      	movs	r2, #1
 8002afa:	409a      	lsls	r2, r3
 8002afc:	6a3b      	ldr	r3, [r7, #32]
 8002afe:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002b04:	f043 0202 	orr.w	r2, r3, #2
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b10:	f003 031f 	and.w	r3, r3, #31
 8002b14:	2204      	movs	r2, #4
 8002b16:	409a      	lsls	r2, r3
 8002b18:	69bb      	ldr	r3, [r7, #24]
 8002b1a:	4013      	ands	r3, r2
 8002b1c:	2b00      	cmp	r3, #0
 8002b1e:	f000 808f 	beq.w	8002c40 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	4a2c      	ldr	r2, [pc, #176]	; (8002bd8 <HAL_DMA_IRQHandler+0x3f8>)
 8002b28:	4293      	cmp	r3, r2
 8002b2a:	d04a      	beq.n	8002bc2 <HAL_DMA_IRQHandler+0x3e2>
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	4a2a      	ldr	r2, [pc, #168]	; (8002bdc <HAL_DMA_IRQHandler+0x3fc>)
 8002b32:	4293      	cmp	r3, r2
 8002b34:	d045      	beq.n	8002bc2 <HAL_DMA_IRQHandler+0x3e2>
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	4a29      	ldr	r2, [pc, #164]	; (8002be0 <HAL_DMA_IRQHandler+0x400>)
 8002b3c:	4293      	cmp	r3, r2
 8002b3e:	d040      	beq.n	8002bc2 <HAL_DMA_IRQHandler+0x3e2>
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	4a27      	ldr	r2, [pc, #156]	; (8002be4 <HAL_DMA_IRQHandler+0x404>)
 8002b46:	4293      	cmp	r3, r2
 8002b48:	d03b      	beq.n	8002bc2 <HAL_DMA_IRQHandler+0x3e2>
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	4a26      	ldr	r2, [pc, #152]	; (8002be8 <HAL_DMA_IRQHandler+0x408>)
 8002b50:	4293      	cmp	r3, r2
 8002b52:	d036      	beq.n	8002bc2 <HAL_DMA_IRQHandler+0x3e2>
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	4a24      	ldr	r2, [pc, #144]	; (8002bec <HAL_DMA_IRQHandler+0x40c>)
 8002b5a:	4293      	cmp	r3, r2
 8002b5c:	d031      	beq.n	8002bc2 <HAL_DMA_IRQHandler+0x3e2>
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	4a23      	ldr	r2, [pc, #140]	; (8002bf0 <HAL_DMA_IRQHandler+0x410>)
 8002b64:	4293      	cmp	r3, r2
 8002b66:	d02c      	beq.n	8002bc2 <HAL_DMA_IRQHandler+0x3e2>
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	4a21      	ldr	r2, [pc, #132]	; (8002bf4 <HAL_DMA_IRQHandler+0x414>)
 8002b6e:	4293      	cmp	r3, r2
 8002b70:	d027      	beq.n	8002bc2 <HAL_DMA_IRQHandler+0x3e2>
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	4a20      	ldr	r2, [pc, #128]	; (8002bf8 <HAL_DMA_IRQHandler+0x418>)
 8002b78:	4293      	cmp	r3, r2
 8002b7a:	d022      	beq.n	8002bc2 <HAL_DMA_IRQHandler+0x3e2>
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	4a1e      	ldr	r2, [pc, #120]	; (8002bfc <HAL_DMA_IRQHandler+0x41c>)
 8002b82:	4293      	cmp	r3, r2
 8002b84:	d01d      	beq.n	8002bc2 <HAL_DMA_IRQHandler+0x3e2>
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	4a1d      	ldr	r2, [pc, #116]	; (8002c00 <HAL_DMA_IRQHandler+0x420>)
 8002b8c:	4293      	cmp	r3, r2
 8002b8e:	d018      	beq.n	8002bc2 <HAL_DMA_IRQHandler+0x3e2>
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	4a1b      	ldr	r2, [pc, #108]	; (8002c04 <HAL_DMA_IRQHandler+0x424>)
 8002b96:	4293      	cmp	r3, r2
 8002b98:	d013      	beq.n	8002bc2 <HAL_DMA_IRQHandler+0x3e2>
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	4a1a      	ldr	r2, [pc, #104]	; (8002c08 <HAL_DMA_IRQHandler+0x428>)
 8002ba0:	4293      	cmp	r3, r2
 8002ba2:	d00e      	beq.n	8002bc2 <HAL_DMA_IRQHandler+0x3e2>
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	4a18      	ldr	r2, [pc, #96]	; (8002c0c <HAL_DMA_IRQHandler+0x42c>)
 8002baa:	4293      	cmp	r3, r2
 8002bac:	d009      	beq.n	8002bc2 <HAL_DMA_IRQHandler+0x3e2>
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	4a17      	ldr	r2, [pc, #92]	; (8002c10 <HAL_DMA_IRQHandler+0x430>)
 8002bb4:	4293      	cmp	r3, r2
 8002bb6:	d004      	beq.n	8002bc2 <HAL_DMA_IRQHandler+0x3e2>
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	4a15      	ldr	r2, [pc, #84]	; (8002c14 <HAL_DMA_IRQHandler+0x434>)
 8002bbe:	4293      	cmp	r3, r2
 8002bc0:	d12a      	bne.n	8002c18 <HAL_DMA_IRQHandler+0x438>
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	f003 0302 	and.w	r3, r3, #2
 8002bcc:	2b00      	cmp	r3, #0
 8002bce:	bf14      	ite	ne
 8002bd0:	2301      	movne	r3, #1
 8002bd2:	2300      	moveq	r3, #0
 8002bd4:	b2db      	uxtb	r3, r3
 8002bd6:	e023      	b.n	8002c20 <HAL_DMA_IRQHandler+0x440>
 8002bd8:	40020010 	.word	0x40020010
 8002bdc:	40020028 	.word	0x40020028
 8002be0:	40020040 	.word	0x40020040
 8002be4:	40020058 	.word	0x40020058
 8002be8:	40020070 	.word	0x40020070
 8002bec:	40020088 	.word	0x40020088
 8002bf0:	400200a0 	.word	0x400200a0
 8002bf4:	400200b8 	.word	0x400200b8
 8002bf8:	40020410 	.word	0x40020410
 8002bfc:	40020428 	.word	0x40020428
 8002c00:	40020440 	.word	0x40020440
 8002c04:	40020458 	.word	0x40020458
 8002c08:	40020470 	.word	0x40020470
 8002c0c:	40020488 	.word	0x40020488
 8002c10:	400204a0 	.word	0x400204a0
 8002c14:	400204b8 	.word	0x400204b8
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	2300      	movs	r3, #0
 8002c20:	2b00      	cmp	r3, #0
 8002c22:	d00d      	beq.n	8002c40 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002c28:	f003 031f 	and.w	r3, r3, #31
 8002c2c:	2204      	movs	r2, #4
 8002c2e:	409a      	lsls	r2, r3
 8002c30:	6a3b      	ldr	r3, [r7, #32]
 8002c32:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002c38:	f043 0204 	orr.w	r2, r3, #4
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002c44:	f003 031f 	and.w	r3, r3, #31
 8002c48:	2210      	movs	r2, #16
 8002c4a:	409a      	lsls	r2, r3
 8002c4c:	69bb      	ldr	r3, [r7, #24]
 8002c4e:	4013      	ands	r3, r2
 8002c50:	2b00      	cmp	r3, #0
 8002c52:	f000 80a6 	beq.w	8002da2 <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	4a85      	ldr	r2, [pc, #532]	; (8002e70 <HAL_DMA_IRQHandler+0x690>)
 8002c5c:	4293      	cmp	r3, r2
 8002c5e:	d04a      	beq.n	8002cf6 <HAL_DMA_IRQHandler+0x516>
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	4a83      	ldr	r2, [pc, #524]	; (8002e74 <HAL_DMA_IRQHandler+0x694>)
 8002c66:	4293      	cmp	r3, r2
 8002c68:	d045      	beq.n	8002cf6 <HAL_DMA_IRQHandler+0x516>
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	4a82      	ldr	r2, [pc, #520]	; (8002e78 <HAL_DMA_IRQHandler+0x698>)
 8002c70:	4293      	cmp	r3, r2
 8002c72:	d040      	beq.n	8002cf6 <HAL_DMA_IRQHandler+0x516>
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	4a80      	ldr	r2, [pc, #512]	; (8002e7c <HAL_DMA_IRQHandler+0x69c>)
 8002c7a:	4293      	cmp	r3, r2
 8002c7c:	d03b      	beq.n	8002cf6 <HAL_DMA_IRQHandler+0x516>
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	4a7f      	ldr	r2, [pc, #508]	; (8002e80 <HAL_DMA_IRQHandler+0x6a0>)
 8002c84:	4293      	cmp	r3, r2
 8002c86:	d036      	beq.n	8002cf6 <HAL_DMA_IRQHandler+0x516>
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	4a7d      	ldr	r2, [pc, #500]	; (8002e84 <HAL_DMA_IRQHandler+0x6a4>)
 8002c8e:	4293      	cmp	r3, r2
 8002c90:	d031      	beq.n	8002cf6 <HAL_DMA_IRQHandler+0x516>
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	4a7c      	ldr	r2, [pc, #496]	; (8002e88 <HAL_DMA_IRQHandler+0x6a8>)
 8002c98:	4293      	cmp	r3, r2
 8002c9a:	d02c      	beq.n	8002cf6 <HAL_DMA_IRQHandler+0x516>
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	4a7a      	ldr	r2, [pc, #488]	; (8002e8c <HAL_DMA_IRQHandler+0x6ac>)
 8002ca2:	4293      	cmp	r3, r2
 8002ca4:	d027      	beq.n	8002cf6 <HAL_DMA_IRQHandler+0x516>
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	4a79      	ldr	r2, [pc, #484]	; (8002e90 <HAL_DMA_IRQHandler+0x6b0>)
 8002cac:	4293      	cmp	r3, r2
 8002cae:	d022      	beq.n	8002cf6 <HAL_DMA_IRQHandler+0x516>
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	4a77      	ldr	r2, [pc, #476]	; (8002e94 <HAL_DMA_IRQHandler+0x6b4>)
 8002cb6:	4293      	cmp	r3, r2
 8002cb8:	d01d      	beq.n	8002cf6 <HAL_DMA_IRQHandler+0x516>
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	4a76      	ldr	r2, [pc, #472]	; (8002e98 <HAL_DMA_IRQHandler+0x6b8>)
 8002cc0:	4293      	cmp	r3, r2
 8002cc2:	d018      	beq.n	8002cf6 <HAL_DMA_IRQHandler+0x516>
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	4a74      	ldr	r2, [pc, #464]	; (8002e9c <HAL_DMA_IRQHandler+0x6bc>)
 8002cca:	4293      	cmp	r3, r2
 8002ccc:	d013      	beq.n	8002cf6 <HAL_DMA_IRQHandler+0x516>
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	4a73      	ldr	r2, [pc, #460]	; (8002ea0 <HAL_DMA_IRQHandler+0x6c0>)
 8002cd4:	4293      	cmp	r3, r2
 8002cd6:	d00e      	beq.n	8002cf6 <HAL_DMA_IRQHandler+0x516>
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	4a71      	ldr	r2, [pc, #452]	; (8002ea4 <HAL_DMA_IRQHandler+0x6c4>)
 8002cde:	4293      	cmp	r3, r2
 8002ce0:	d009      	beq.n	8002cf6 <HAL_DMA_IRQHandler+0x516>
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	4a70      	ldr	r2, [pc, #448]	; (8002ea8 <HAL_DMA_IRQHandler+0x6c8>)
 8002ce8:	4293      	cmp	r3, r2
 8002cea:	d004      	beq.n	8002cf6 <HAL_DMA_IRQHandler+0x516>
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	4a6e      	ldr	r2, [pc, #440]	; (8002eac <HAL_DMA_IRQHandler+0x6cc>)
 8002cf2:	4293      	cmp	r3, r2
 8002cf4:	d10a      	bne.n	8002d0c <HAL_DMA_IRQHandler+0x52c>
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	f003 0308 	and.w	r3, r3, #8
 8002d00:	2b00      	cmp	r3, #0
 8002d02:	bf14      	ite	ne
 8002d04:	2301      	movne	r3, #1
 8002d06:	2300      	moveq	r3, #0
 8002d08:	b2db      	uxtb	r3, r3
 8002d0a:	e009      	b.n	8002d20 <HAL_DMA_IRQHandler+0x540>
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	f003 0304 	and.w	r3, r3, #4
 8002d16:	2b00      	cmp	r3, #0
 8002d18:	bf14      	ite	ne
 8002d1a:	2301      	movne	r3, #1
 8002d1c:	2300      	moveq	r3, #0
 8002d1e:	b2db      	uxtb	r3, r3
 8002d20:	2b00      	cmp	r3, #0
 8002d22:	d03e      	beq.n	8002da2 <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002d28:	f003 031f 	and.w	r3, r3, #31
 8002d2c:	2210      	movs	r2, #16
 8002d2e:	409a      	lsls	r2, r3
 8002d30:	6a3b      	ldr	r3, [r7, #32]
 8002d32:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002d3e:	2b00      	cmp	r3, #0
 8002d40:	d018      	beq.n	8002d74 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002d4c:	2b00      	cmp	r3, #0
 8002d4e:	d108      	bne.n	8002d62 <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d54:	2b00      	cmp	r3, #0
 8002d56:	d024      	beq.n	8002da2 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d5c:	6878      	ldr	r0, [r7, #4]
 8002d5e:	4798      	blx	r3
 8002d60:	e01f      	b.n	8002da2 <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002d66:	2b00      	cmp	r3, #0
 8002d68:	d01b      	beq.n	8002da2 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002d6e:	6878      	ldr	r0, [r7, #4]
 8002d70:	4798      	blx	r3
 8002d72:	e016      	b.n	8002da2 <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d7e:	2b00      	cmp	r3, #0
 8002d80:	d107      	bne.n	8002d92 <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	681a      	ldr	r2, [r3, #0]
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	f022 0208 	bic.w	r2, r2, #8
 8002d90:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d96:	2b00      	cmp	r3, #0
 8002d98:	d003      	beq.n	8002da2 <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d9e:	6878      	ldr	r0, [r7, #4]
 8002da0:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002da6:	f003 031f 	and.w	r3, r3, #31
 8002daa:	2220      	movs	r2, #32
 8002dac:	409a      	lsls	r2, r3
 8002dae:	69bb      	ldr	r3, [r7, #24]
 8002db0:	4013      	ands	r3, r2
 8002db2:	2b00      	cmp	r3, #0
 8002db4:	f000 8110 	beq.w	8002fd8 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	4a2c      	ldr	r2, [pc, #176]	; (8002e70 <HAL_DMA_IRQHandler+0x690>)
 8002dbe:	4293      	cmp	r3, r2
 8002dc0:	d04a      	beq.n	8002e58 <HAL_DMA_IRQHandler+0x678>
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	4a2b      	ldr	r2, [pc, #172]	; (8002e74 <HAL_DMA_IRQHandler+0x694>)
 8002dc8:	4293      	cmp	r3, r2
 8002dca:	d045      	beq.n	8002e58 <HAL_DMA_IRQHandler+0x678>
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	4a29      	ldr	r2, [pc, #164]	; (8002e78 <HAL_DMA_IRQHandler+0x698>)
 8002dd2:	4293      	cmp	r3, r2
 8002dd4:	d040      	beq.n	8002e58 <HAL_DMA_IRQHandler+0x678>
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	4a28      	ldr	r2, [pc, #160]	; (8002e7c <HAL_DMA_IRQHandler+0x69c>)
 8002ddc:	4293      	cmp	r3, r2
 8002dde:	d03b      	beq.n	8002e58 <HAL_DMA_IRQHandler+0x678>
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	4a26      	ldr	r2, [pc, #152]	; (8002e80 <HAL_DMA_IRQHandler+0x6a0>)
 8002de6:	4293      	cmp	r3, r2
 8002de8:	d036      	beq.n	8002e58 <HAL_DMA_IRQHandler+0x678>
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	4a25      	ldr	r2, [pc, #148]	; (8002e84 <HAL_DMA_IRQHandler+0x6a4>)
 8002df0:	4293      	cmp	r3, r2
 8002df2:	d031      	beq.n	8002e58 <HAL_DMA_IRQHandler+0x678>
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	4a23      	ldr	r2, [pc, #140]	; (8002e88 <HAL_DMA_IRQHandler+0x6a8>)
 8002dfa:	4293      	cmp	r3, r2
 8002dfc:	d02c      	beq.n	8002e58 <HAL_DMA_IRQHandler+0x678>
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	4a22      	ldr	r2, [pc, #136]	; (8002e8c <HAL_DMA_IRQHandler+0x6ac>)
 8002e04:	4293      	cmp	r3, r2
 8002e06:	d027      	beq.n	8002e58 <HAL_DMA_IRQHandler+0x678>
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	4a20      	ldr	r2, [pc, #128]	; (8002e90 <HAL_DMA_IRQHandler+0x6b0>)
 8002e0e:	4293      	cmp	r3, r2
 8002e10:	d022      	beq.n	8002e58 <HAL_DMA_IRQHandler+0x678>
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	4a1f      	ldr	r2, [pc, #124]	; (8002e94 <HAL_DMA_IRQHandler+0x6b4>)
 8002e18:	4293      	cmp	r3, r2
 8002e1a:	d01d      	beq.n	8002e58 <HAL_DMA_IRQHandler+0x678>
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	4a1d      	ldr	r2, [pc, #116]	; (8002e98 <HAL_DMA_IRQHandler+0x6b8>)
 8002e22:	4293      	cmp	r3, r2
 8002e24:	d018      	beq.n	8002e58 <HAL_DMA_IRQHandler+0x678>
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	4a1c      	ldr	r2, [pc, #112]	; (8002e9c <HAL_DMA_IRQHandler+0x6bc>)
 8002e2c:	4293      	cmp	r3, r2
 8002e2e:	d013      	beq.n	8002e58 <HAL_DMA_IRQHandler+0x678>
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	4a1a      	ldr	r2, [pc, #104]	; (8002ea0 <HAL_DMA_IRQHandler+0x6c0>)
 8002e36:	4293      	cmp	r3, r2
 8002e38:	d00e      	beq.n	8002e58 <HAL_DMA_IRQHandler+0x678>
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	4a19      	ldr	r2, [pc, #100]	; (8002ea4 <HAL_DMA_IRQHandler+0x6c4>)
 8002e40:	4293      	cmp	r3, r2
 8002e42:	d009      	beq.n	8002e58 <HAL_DMA_IRQHandler+0x678>
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	4a17      	ldr	r2, [pc, #92]	; (8002ea8 <HAL_DMA_IRQHandler+0x6c8>)
 8002e4a:	4293      	cmp	r3, r2
 8002e4c:	d004      	beq.n	8002e58 <HAL_DMA_IRQHandler+0x678>
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	4a16      	ldr	r2, [pc, #88]	; (8002eac <HAL_DMA_IRQHandler+0x6cc>)
 8002e54:	4293      	cmp	r3, r2
 8002e56:	d12b      	bne.n	8002eb0 <HAL_DMA_IRQHandler+0x6d0>
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	f003 0310 	and.w	r3, r3, #16
 8002e62:	2b00      	cmp	r3, #0
 8002e64:	bf14      	ite	ne
 8002e66:	2301      	movne	r3, #1
 8002e68:	2300      	moveq	r3, #0
 8002e6a:	b2db      	uxtb	r3, r3
 8002e6c:	e02a      	b.n	8002ec4 <HAL_DMA_IRQHandler+0x6e4>
 8002e6e:	bf00      	nop
 8002e70:	40020010 	.word	0x40020010
 8002e74:	40020028 	.word	0x40020028
 8002e78:	40020040 	.word	0x40020040
 8002e7c:	40020058 	.word	0x40020058
 8002e80:	40020070 	.word	0x40020070
 8002e84:	40020088 	.word	0x40020088
 8002e88:	400200a0 	.word	0x400200a0
 8002e8c:	400200b8 	.word	0x400200b8
 8002e90:	40020410 	.word	0x40020410
 8002e94:	40020428 	.word	0x40020428
 8002e98:	40020440 	.word	0x40020440
 8002e9c:	40020458 	.word	0x40020458
 8002ea0:	40020470 	.word	0x40020470
 8002ea4:	40020488 	.word	0x40020488
 8002ea8:	400204a0 	.word	0x400204a0
 8002eac:	400204b8 	.word	0x400204b8
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	f003 0302 	and.w	r3, r3, #2
 8002eba:	2b00      	cmp	r3, #0
 8002ebc:	bf14      	ite	ne
 8002ebe:	2301      	movne	r3, #1
 8002ec0:	2300      	moveq	r3, #0
 8002ec2:	b2db      	uxtb	r3, r3
 8002ec4:	2b00      	cmp	r3, #0
 8002ec6:	f000 8087 	beq.w	8002fd8 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002ece:	f003 031f 	and.w	r3, r3, #31
 8002ed2:	2220      	movs	r2, #32
 8002ed4:	409a      	lsls	r2, r3
 8002ed6:	6a3b      	ldr	r3, [r7, #32]
 8002ed8:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002ee0:	b2db      	uxtb	r3, r3
 8002ee2:	2b04      	cmp	r3, #4
 8002ee4:	d139      	bne.n	8002f5a <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	681a      	ldr	r2, [r3, #0]
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	f022 0216 	bic.w	r2, r2, #22
 8002ef4:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	695a      	ldr	r2, [r3, #20]
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002f04:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f0a:	2b00      	cmp	r3, #0
 8002f0c:	d103      	bne.n	8002f16 <HAL_DMA_IRQHandler+0x736>
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002f12:	2b00      	cmp	r3, #0
 8002f14:	d007      	beq.n	8002f26 <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	681a      	ldr	r2, [r3, #0]
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	f022 0208 	bic.w	r2, r2, #8
 8002f24:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002f2a:	f003 031f 	and.w	r3, r3, #31
 8002f2e:	223f      	movs	r2, #63	; 0x3f
 8002f30:	409a      	lsls	r2, r3
 8002f32:	6a3b      	ldr	r3, [r7, #32]
 8002f34:	609a      	str	r2, [r3, #8]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	2200      	movs	r2, #0
 8002f3a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	2201      	movs	r2, #1
 8002f42:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          if(hdma->XferAbortCallback != NULL)
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002f4a:	2b00      	cmp	r3, #0
 8002f4c:	f000 834a 	beq.w	80035e4 <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002f54:	6878      	ldr	r0, [r7, #4]
 8002f56:	4798      	blx	r3
          }
          return;
 8002f58:	e344      	b.n	80035e4 <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002f64:	2b00      	cmp	r3, #0
 8002f66:	d018      	beq.n	8002f9a <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002f72:	2b00      	cmp	r3, #0
 8002f74:	d108      	bne.n	8002f88 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f7a:	2b00      	cmp	r3, #0
 8002f7c:	d02c      	beq.n	8002fd8 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f82:	6878      	ldr	r0, [r7, #4]
 8002f84:	4798      	blx	r3
 8002f86:	e027      	b.n	8002fd8 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002f8c:	2b00      	cmp	r3, #0
 8002f8e:	d023      	beq.n	8002fd8 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002f94:	6878      	ldr	r0, [r7, #4]
 8002f96:	4798      	blx	r3
 8002f98:	e01e      	b.n	8002fd8 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002fa4:	2b00      	cmp	r3, #0
 8002fa6:	d10f      	bne.n	8002fc8 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	681a      	ldr	r2, [r3, #0]
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	f022 0210 	bic.w	r2, r2, #16
 8002fb6:	601a      	str	r2, [r3, #0]

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	2200      	movs	r2, #0
 8002fbc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	2201      	movs	r2, #1
 8002fc4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
          }

          if(hdma->XferCpltCallback != NULL)
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002fcc:	2b00      	cmp	r3, #0
 8002fce:	d003      	beq.n	8002fd8 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002fd4:	6878      	ldr	r0, [r7, #4]
 8002fd6:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002fdc:	2b00      	cmp	r3, #0
 8002fde:	f000 8306 	beq.w	80035ee <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002fe6:	f003 0301 	and.w	r3, r3, #1
 8002fea:	2b00      	cmp	r3, #0
 8002fec:	f000 8088 	beq.w	8003100 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	2204      	movs	r2, #4
 8002ff4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	4a7a      	ldr	r2, [pc, #488]	; (80031e8 <HAL_DMA_IRQHandler+0xa08>)
 8002ffe:	4293      	cmp	r3, r2
 8003000:	d04a      	beq.n	8003098 <HAL_DMA_IRQHandler+0x8b8>
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	4a79      	ldr	r2, [pc, #484]	; (80031ec <HAL_DMA_IRQHandler+0xa0c>)
 8003008:	4293      	cmp	r3, r2
 800300a:	d045      	beq.n	8003098 <HAL_DMA_IRQHandler+0x8b8>
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	4a77      	ldr	r2, [pc, #476]	; (80031f0 <HAL_DMA_IRQHandler+0xa10>)
 8003012:	4293      	cmp	r3, r2
 8003014:	d040      	beq.n	8003098 <HAL_DMA_IRQHandler+0x8b8>
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	4a76      	ldr	r2, [pc, #472]	; (80031f4 <HAL_DMA_IRQHandler+0xa14>)
 800301c:	4293      	cmp	r3, r2
 800301e:	d03b      	beq.n	8003098 <HAL_DMA_IRQHandler+0x8b8>
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	4a74      	ldr	r2, [pc, #464]	; (80031f8 <HAL_DMA_IRQHandler+0xa18>)
 8003026:	4293      	cmp	r3, r2
 8003028:	d036      	beq.n	8003098 <HAL_DMA_IRQHandler+0x8b8>
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	4a73      	ldr	r2, [pc, #460]	; (80031fc <HAL_DMA_IRQHandler+0xa1c>)
 8003030:	4293      	cmp	r3, r2
 8003032:	d031      	beq.n	8003098 <HAL_DMA_IRQHandler+0x8b8>
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	4a71      	ldr	r2, [pc, #452]	; (8003200 <HAL_DMA_IRQHandler+0xa20>)
 800303a:	4293      	cmp	r3, r2
 800303c:	d02c      	beq.n	8003098 <HAL_DMA_IRQHandler+0x8b8>
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	4a70      	ldr	r2, [pc, #448]	; (8003204 <HAL_DMA_IRQHandler+0xa24>)
 8003044:	4293      	cmp	r3, r2
 8003046:	d027      	beq.n	8003098 <HAL_DMA_IRQHandler+0x8b8>
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	4a6e      	ldr	r2, [pc, #440]	; (8003208 <HAL_DMA_IRQHandler+0xa28>)
 800304e:	4293      	cmp	r3, r2
 8003050:	d022      	beq.n	8003098 <HAL_DMA_IRQHandler+0x8b8>
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	4a6d      	ldr	r2, [pc, #436]	; (800320c <HAL_DMA_IRQHandler+0xa2c>)
 8003058:	4293      	cmp	r3, r2
 800305a:	d01d      	beq.n	8003098 <HAL_DMA_IRQHandler+0x8b8>
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	4a6b      	ldr	r2, [pc, #428]	; (8003210 <HAL_DMA_IRQHandler+0xa30>)
 8003062:	4293      	cmp	r3, r2
 8003064:	d018      	beq.n	8003098 <HAL_DMA_IRQHandler+0x8b8>
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	4a6a      	ldr	r2, [pc, #424]	; (8003214 <HAL_DMA_IRQHandler+0xa34>)
 800306c:	4293      	cmp	r3, r2
 800306e:	d013      	beq.n	8003098 <HAL_DMA_IRQHandler+0x8b8>
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	4a68      	ldr	r2, [pc, #416]	; (8003218 <HAL_DMA_IRQHandler+0xa38>)
 8003076:	4293      	cmp	r3, r2
 8003078:	d00e      	beq.n	8003098 <HAL_DMA_IRQHandler+0x8b8>
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	4a67      	ldr	r2, [pc, #412]	; (800321c <HAL_DMA_IRQHandler+0xa3c>)
 8003080:	4293      	cmp	r3, r2
 8003082:	d009      	beq.n	8003098 <HAL_DMA_IRQHandler+0x8b8>
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	4a65      	ldr	r2, [pc, #404]	; (8003220 <HAL_DMA_IRQHandler+0xa40>)
 800308a:	4293      	cmp	r3, r2
 800308c:	d004      	beq.n	8003098 <HAL_DMA_IRQHandler+0x8b8>
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	4a64      	ldr	r2, [pc, #400]	; (8003224 <HAL_DMA_IRQHandler+0xa44>)
 8003094:	4293      	cmp	r3, r2
 8003096:	d108      	bne.n	80030aa <HAL_DMA_IRQHandler+0x8ca>
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	681a      	ldr	r2, [r3, #0]
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	f022 0201 	bic.w	r2, r2, #1
 80030a6:	601a      	str	r2, [r3, #0]
 80030a8:	e007      	b.n	80030ba <HAL_DMA_IRQHandler+0x8da>
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	681a      	ldr	r2, [r3, #0]
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	f022 0201 	bic.w	r2, r2, #1
 80030b8:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 80030ba:	68fb      	ldr	r3, [r7, #12]
 80030bc:	3301      	adds	r3, #1
 80030be:	60fb      	str	r3, [r7, #12]
 80030c0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80030c2:	429a      	cmp	r2, r3
 80030c4:	d307      	bcc.n	80030d6 <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	f003 0301 	and.w	r3, r3, #1
 80030d0:	2b00      	cmp	r3, #0
 80030d2:	d1f2      	bne.n	80030ba <HAL_DMA_IRQHandler+0x8da>
 80030d4:	e000      	b.n	80030d8 <HAL_DMA_IRQHandler+0x8f8>
            break;
 80030d6:	bf00      	nop

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	2200      	movs	r2, #0
 80030dc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	f003 0301 	and.w	r3, r3, #1
 80030ea:	2b00      	cmp	r3, #0
 80030ec:	d004      	beq.n	80030f8 <HAL_DMA_IRQHandler+0x918>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	2203      	movs	r2, #3
 80030f2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 80030f6:	e003      	b.n	8003100 <HAL_DMA_IRQHandler+0x920>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	2201      	movs	r2, #1
 80030fc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }
      }

      if(hdma->XferErrorCallback != NULL)
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003104:	2b00      	cmp	r3, #0
 8003106:	f000 8272 	beq.w	80035ee <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800310e:	6878      	ldr	r0, [r7, #4]
 8003110:	4798      	blx	r3
 8003112:	e26c      	b.n	80035ee <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	4a43      	ldr	r2, [pc, #268]	; (8003228 <HAL_DMA_IRQHandler+0xa48>)
 800311a:	4293      	cmp	r3, r2
 800311c:	d022      	beq.n	8003164 <HAL_DMA_IRQHandler+0x984>
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	4a42      	ldr	r2, [pc, #264]	; (800322c <HAL_DMA_IRQHandler+0xa4c>)
 8003124:	4293      	cmp	r3, r2
 8003126:	d01d      	beq.n	8003164 <HAL_DMA_IRQHandler+0x984>
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	4a40      	ldr	r2, [pc, #256]	; (8003230 <HAL_DMA_IRQHandler+0xa50>)
 800312e:	4293      	cmp	r3, r2
 8003130:	d018      	beq.n	8003164 <HAL_DMA_IRQHandler+0x984>
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	4a3f      	ldr	r2, [pc, #252]	; (8003234 <HAL_DMA_IRQHandler+0xa54>)
 8003138:	4293      	cmp	r3, r2
 800313a:	d013      	beq.n	8003164 <HAL_DMA_IRQHandler+0x984>
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	4a3d      	ldr	r2, [pc, #244]	; (8003238 <HAL_DMA_IRQHandler+0xa58>)
 8003142:	4293      	cmp	r3, r2
 8003144:	d00e      	beq.n	8003164 <HAL_DMA_IRQHandler+0x984>
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	4a3c      	ldr	r2, [pc, #240]	; (800323c <HAL_DMA_IRQHandler+0xa5c>)
 800314c:	4293      	cmp	r3, r2
 800314e:	d009      	beq.n	8003164 <HAL_DMA_IRQHandler+0x984>
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	4a3a      	ldr	r2, [pc, #232]	; (8003240 <HAL_DMA_IRQHandler+0xa60>)
 8003156:	4293      	cmp	r3, r2
 8003158:	d004      	beq.n	8003164 <HAL_DMA_IRQHandler+0x984>
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	4a39      	ldr	r2, [pc, #228]	; (8003244 <HAL_DMA_IRQHandler+0xa64>)
 8003160:	4293      	cmp	r3, r2
 8003162:	d101      	bne.n	8003168 <HAL_DMA_IRQHandler+0x988>
 8003164:	2301      	movs	r3, #1
 8003166:	e000      	b.n	800316a <HAL_DMA_IRQHandler+0x98a>
 8003168:	2300      	movs	r3, #0
 800316a:	2b00      	cmp	r3, #0
 800316c:	f000 823f 	beq.w	80035ee <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800317c:	f003 031f 	and.w	r3, r3, #31
 8003180:	2204      	movs	r2, #4
 8003182:	409a      	lsls	r2, r3
 8003184:	697b      	ldr	r3, [r7, #20]
 8003186:	4013      	ands	r3, r2
 8003188:	2b00      	cmp	r3, #0
 800318a:	f000 80cd 	beq.w	8003328 <HAL_DMA_IRQHandler+0xb48>
 800318e:	693b      	ldr	r3, [r7, #16]
 8003190:	f003 0304 	and.w	r3, r3, #4
 8003194:	2b00      	cmp	r3, #0
 8003196:	f000 80c7 	beq.w	8003328 <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800319e:	f003 031f 	and.w	r3, r3, #31
 80031a2:	2204      	movs	r2, #4
 80031a4:	409a      	lsls	r2, r3
 80031a6:	69fb      	ldr	r3, [r7, #28]
 80031a8:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80031aa:	693b      	ldr	r3, [r7, #16]
 80031ac:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80031b0:	2b00      	cmp	r3, #0
 80031b2:	d049      	beq.n	8003248 <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 80031b4:	693b      	ldr	r3, [r7, #16]
 80031b6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80031ba:	2b00      	cmp	r3, #0
 80031bc:	d109      	bne.n	80031d2 <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80031c2:	2b00      	cmp	r3, #0
 80031c4:	f000 8210 	beq.w	80035e8 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80031cc:	6878      	ldr	r0, [r7, #4]
 80031ce:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80031d0:	e20a      	b.n	80035e8 <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031d6:	2b00      	cmp	r3, #0
 80031d8:	f000 8206 	beq.w	80035e8 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031e0:	6878      	ldr	r0, [r7, #4]
 80031e2:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80031e4:	e200      	b.n	80035e8 <HAL_DMA_IRQHandler+0xe08>
 80031e6:	bf00      	nop
 80031e8:	40020010 	.word	0x40020010
 80031ec:	40020028 	.word	0x40020028
 80031f0:	40020040 	.word	0x40020040
 80031f4:	40020058 	.word	0x40020058
 80031f8:	40020070 	.word	0x40020070
 80031fc:	40020088 	.word	0x40020088
 8003200:	400200a0 	.word	0x400200a0
 8003204:	400200b8 	.word	0x400200b8
 8003208:	40020410 	.word	0x40020410
 800320c:	40020428 	.word	0x40020428
 8003210:	40020440 	.word	0x40020440
 8003214:	40020458 	.word	0x40020458
 8003218:	40020470 	.word	0x40020470
 800321c:	40020488 	.word	0x40020488
 8003220:	400204a0 	.word	0x400204a0
 8003224:	400204b8 	.word	0x400204b8
 8003228:	58025408 	.word	0x58025408
 800322c:	5802541c 	.word	0x5802541c
 8003230:	58025430 	.word	0x58025430
 8003234:	58025444 	.word	0x58025444
 8003238:	58025458 	.word	0x58025458
 800323c:	5802546c 	.word	0x5802546c
 8003240:	58025480 	.word	0x58025480
 8003244:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8003248:	693b      	ldr	r3, [r7, #16]
 800324a:	f003 0320 	and.w	r3, r3, #32
 800324e:	2b00      	cmp	r3, #0
 8003250:	d160      	bne.n	8003314 <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	4a8c      	ldr	r2, [pc, #560]	; (8003488 <HAL_DMA_IRQHandler+0xca8>)
 8003258:	4293      	cmp	r3, r2
 800325a:	d04a      	beq.n	80032f2 <HAL_DMA_IRQHandler+0xb12>
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	4a8a      	ldr	r2, [pc, #552]	; (800348c <HAL_DMA_IRQHandler+0xcac>)
 8003262:	4293      	cmp	r3, r2
 8003264:	d045      	beq.n	80032f2 <HAL_DMA_IRQHandler+0xb12>
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	4a89      	ldr	r2, [pc, #548]	; (8003490 <HAL_DMA_IRQHandler+0xcb0>)
 800326c:	4293      	cmp	r3, r2
 800326e:	d040      	beq.n	80032f2 <HAL_DMA_IRQHandler+0xb12>
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	4a87      	ldr	r2, [pc, #540]	; (8003494 <HAL_DMA_IRQHandler+0xcb4>)
 8003276:	4293      	cmp	r3, r2
 8003278:	d03b      	beq.n	80032f2 <HAL_DMA_IRQHandler+0xb12>
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	4a86      	ldr	r2, [pc, #536]	; (8003498 <HAL_DMA_IRQHandler+0xcb8>)
 8003280:	4293      	cmp	r3, r2
 8003282:	d036      	beq.n	80032f2 <HAL_DMA_IRQHandler+0xb12>
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	4a84      	ldr	r2, [pc, #528]	; (800349c <HAL_DMA_IRQHandler+0xcbc>)
 800328a:	4293      	cmp	r3, r2
 800328c:	d031      	beq.n	80032f2 <HAL_DMA_IRQHandler+0xb12>
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	4a83      	ldr	r2, [pc, #524]	; (80034a0 <HAL_DMA_IRQHandler+0xcc0>)
 8003294:	4293      	cmp	r3, r2
 8003296:	d02c      	beq.n	80032f2 <HAL_DMA_IRQHandler+0xb12>
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	4a81      	ldr	r2, [pc, #516]	; (80034a4 <HAL_DMA_IRQHandler+0xcc4>)
 800329e:	4293      	cmp	r3, r2
 80032a0:	d027      	beq.n	80032f2 <HAL_DMA_IRQHandler+0xb12>
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	4a80      	ldr	r2, [pc, #512]	; (80034a8 <HAL_DMA_IRQHandler+0xcc8>)
 80032a8:	4293      	cmp	r3, r2
 80032aa:	d022      	beq.n	80032f2 <HAL_DMA_IRQHandler+0xb12>
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	4a7e      	ldr	r2, [pc, #504]	; (80034ac <HAL_DMA_IRQHandler+0xccc>)
 80032b2:	4293      	cmp	r3, r2
 80032b4:	d01d      	beq.n	80032f2 <HAL_DMA_IRQHandler+0xb12>
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	4a7d      	ldr	r2, [pc, #500]	; (80034b0 <HAL_DMA_IRQHandler+0xcd0>)
 80032bc:	4293      	cmp	r3, r2
 80032be:	d018      	beq.n	80032f2 <HAL_DMA_IRQHandler+0xb12>
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	4a7b      	ldr	r2, [pc, #492]	; (80034b4 <HAL_DMA_IRQHandler+0xcd4>)
 80032c6:	4293      	cmp	r3, r2
 80032c8:	d013      	beq.n	80032f2 <HAL_DMA_IRQHandler+0xb12>
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	4a7a      	ldr	r2, [pc, #488]	; (80034b8 <HAL_DMA_IRQHandler+0xcd8>)
 80032d0:	4293      	cmp	r3, r2
 80032d2:	d00e      	beq.n	80032f2 <HAL_DMA_IRQHandler+0xb12>
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	4a78      	ldr	r2, [pc, #480]	; (80034bc <HAL_DMA_IRQHandler+0xcdc>)
 80032da:	4293      	cmp	r3, r2
 80032dc:	d009      	beq.n	80032f2 <HAL_DMA_IRQHandler+0xb12>
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	4a77      	ldr	r2, [pc, #476]	; (80034c0 <HAL_DMA_IRQHandler+0xce0>)
 80032e4:	4293      	cmp	r3, r2
 80032e6:	d004      	beq.n	80032f2 <HAL_DMA_IRQHandler+0xb12>
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	4a75      	ldr	r2, [pc, #468]	; (80034c4 <HAL_DMA_IRQHandler+0xce4>)
 80032ee:	4293      	cmp	r3, r2
 80032f0:	d108      	bne.n	8003304 <HAL_DMA_IRQHandler+0xb24>
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	681a      	ldr	r2, [r3, #0]
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	f022 0208 	bic.w	r2, r2, #8
 8003300:	601a      	str	r2, [r3, #0]
 8003302:	e007      	b.n	8003314 <HAL_DMA_IRQHandler+0xb34>
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	681a      	ldr	r2, [r3, #0]
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	f022 0204 	bic.w	r2, r2, #4
 8003312:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003318:	2b00      	cmp	r3, #0
 800331a:	f000 8165 	beq.w	80035e8 <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003322:	6878      	ldr	r0, [r7, #4]
 8003324:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003326:	e15f      	b.n	80035e8 <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800332c:	f003 031f 	and.w	r3, r3, #31
 8003330:	2202      	movs	r2, #2
 8003332:	409a      	lsls	r2, r3
 8003334:	697b      	ldr	r3, [r7, #20]
 8003336:	4013      	ands	r3, r2
 8003338:	2b00      	cmp	r3, #0
 800333a:	f000 80c5 	beq.w	80034c8 <HAL_DMA_IRQHandler+0xce8>
 800333e:	693b      	ldr	r3, [r7, #16]
 8003340:	f003 0302 	and.w	r3, r3, #2
 8003344:	2b00      	cmp	r3, #0
 8003346:	f000 80bf 	beq.w	80034c8 <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800334e:	f003 031f 	and.w	r3, r3, #31
 8003352:	2202      	movs	r2, #2
 8003354:	409a      	lsls	r2, r3
 8003356:	69fb      	ldr	r3, [r7, #28]
 8003358:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800335a:	693b      	ldr	r3, [r7, #16]
 800335c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003360:	2b00      	cmp	r3, #0
 8003362:	d018      	beq.n	8003396 <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8003364:	693b      	ldr	r3, [r7, #16]
 8003366:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800336a:	2b00      	cmp	r3, #0
 800336c:	d109      	bne.n	8003382 <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003372:	2b00      	cmp	r3, #0
 8003374:	f000 813a 	beq.w	80035ec <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800337c:	6878      	ldr	r0, [r7, #4]
 800337e:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003380:	e134      	b.n	80035ec <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003386:	2b00      	cmp	r3, #0
 8003388:	f000 8130 	beq.w	80035ec <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003390:	6878      	ldr	r0, [r7, #4]
 8003392:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003394:	e12a      	b.n	80035ec <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8003396:	693b      	ldr	r3, [r7, #16]
 8003398:	f003 0320 	and.w	r3, r3, #32
 800339c:	2b00      	cmp	r3, #0
 800339e:	d168      	bne.n	8003472 <HAL_DMA_IRQHandler+0xc92>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	4a38      	ldr	r2, [pc, #224]	; (8003488 <HAL_DMA_IRQHandler+0xca8>)
 80033a6:	4293      	cmp	r3, r2
 80033a8:	d04a      	beq.n	8003440 <HAL_DMA_IRQHandler+0xc60>
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	4a37      	ldr	r2, [pc, #220]	; (800348c <HAL_DMA_IRQHandler+0xcac>)
 80033b0:	4293      	cmp	r3, r2
 80033b2:	d045      	beq.n	8003440 <HAL_DMA_IRQHandler+0xc60>
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	4a35      	ldr	r2, [pc, #212]	; (8003490 <HAL_DMA_IRQHandler+0xcb0>)
 80033ba:	4293      	cmp	r3, r2
 80033bc:	d040      	beq.n	8003440 <HAL_DMA_IRQHandler+0xc60>
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	4a34      	ldr	r2, [pc, #208]	; (8003494 <HAL_DMA_IRQHandler+0xcb4>)
 80033c4:	4293      	cmp	r3, r2
 80033c6:	d03b      	beq.n	8003440 <HAL_DMA_IRQHandler+0xc60>
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	4a32      	ldr	r2, [pc, #200]	; (8003498 <HAL_DMA_IRQHandler+0xcb8>)
 80033ce:	4293      	cmp	r3, r2
 80033d0:	d036      	beq.n	8003440 <HAL_DMA_IRQHandler+0xc60>
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	4a31      	ldr	r2, [pc, #196]	; (800349c <HAL_DMA_IRQHandler+0xcbc>)
 80033d8:	4293      	cmp	r3, r2
 80033da:	d031      	beq.n	8003440 <HAL_DMA_IRQHandler+0xc60>
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	4a2f      	ldr	r2, [pc, #188]	; (80034a0 <HAL_DMA_IRQHandler+0xcc0>)
 80033e2:	4293      	cmp	r3, r2
 80033e4:	d02c      	beq.n	8003440 <HAL_DMA_IRQHandler+0xc60>
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	4a2e      	ldr	r2, [pc, #184]	; (80034a4 <HAL_DMA_IRQHandler+0xcc4>)
 80033ec:	4293      	cmp	r3, r2
 80033ee:	d027      	beq.n	8003440 <HAL_DMA_IRQHandler+0xc60>
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	4a2c      	ldr	r2, [pc, #176]	; (80034a8 <HAL_DMA_IRQHandler+0xcc8>)
 80033f6:	4293      	cmp	r3, r2
 80033f8:	d022      	beq.n	8003440 <HAL_DMA_IRQHandler+0xc60>
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	4a2b      	ldr	r2, [pc, #172]	; (80034ac <HAL_DMA_IRQHandler+0xccc>)
 8003400:	4293      	cmp	r3, r2
 8003402:	d01d      	beq.n	8003440 <HAL_DMA_IRQHandler+0xc60>
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	4a29      	ldr	r2, [pc, #164]	; (80034b0 <HAL_DMA_IRQHandler+0xcd0>)
 800340a:	4293      	cmp	r3, r2
 800340c:	d018      	beq.n	8003440 <HAL_DMA_IRQHandler+0xc60>
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	4a28      	ldr	r2, [pc, #160]	; (80034b4 <HAL_DMA_IRQHandler+0xcd4>)
 8003414:	4293      	cmp	r3, r2
 8003416:	d013      	beq.n	8003440 <HAL_DMA_IRQHandler+0xc60>
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	4a26      	ldr	r2, [pc, #152]	; (80034b8 <HAL_DMA_IRQHandler+0xcd8>)
 800341e:	4293      	cmp	r3, r2
 8003420:	d00e      	beq.n	8003440 <HAL_DMA_IRQHandler+0xc60>
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	4a25      	ldr	r2, [pc, #148]	; (80034bc <HAL_DMA_IRQHandler+0xcdc>)
 8003428:	4293      	cmp	r3, r2
 800342a:	d009      	beq.n	8003440 <HAL_DMA_IRQHandler+0xc60>
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	4a23      	ldr	r2, [pc, #140]	; (80034c0 <HAL_DMA_IRQHandler+0xce0>)
 8003432:	4293      	cmp	r3, r2
 8003434:	d004      	beq.n	8003440 <HAL_DMA_IRQHandler+0xc60>
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	4a22      	ldr	r2, [pc, #136]	; (80034c4 <HAL_DMA_IRQHandler+0xce4>)
 800343c:	4293      	cmp	r3, r2
 800343e:	d108      	bne.n	8003452 <HAL_DMA_IRQHandler+0xc72>
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	681a      	ldr	r2, [r3, #0]
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	f022 0214 	bic.w	r2, r2, #20
 800344e:	601a      	str	r2, [r3, #0]
 8003450:	e007      	b.n	8003462 <HAL_DMA_IRQHandler+0xc82>
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	681a      	ldr	r2, [r3, #0]
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	f022 020a 	bic.w	r2, r2, #10
 8003460:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	2200      	movs	r2, #0
 8003466:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	2201      	movs	r2, #1
 800346e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003476:	2b00      	cmp	r3, #0
 8003478:	f000 80b8 	beq.w	80035ec <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003480:	6878      	ldr	r0, [r7, #4]
 8003482:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003484:	e0b2      	b.n	80035ec <HAL_DMA_IRQHandler+0xe0c>
 8003486:	bf00      	nop
 8003488:	40020010 	.word	0x40020010
 800348c:	40020028 	.word	0x40020028
 8003490:	40020040 	.word	0x40020040
 8003494:	40020058 	.word	0x40020058
 8003498:	40020070 	.word	0x40020070
 800349c:	40020088 	.word	0x40020088
 80034a0:	400200a0 	.word	0x400200a0
 80034a4:	400200b8 	.word	0x400200b8
 80034a8:	40020410 	.word	0x40020410
 80034ac:	40020428 	.word	0x40020428
 80034b0:	40020440 	.word	0x40020440
 80034b4:	40020458 	.word	0x40020458
 80034b8:	40020470 	.word	0x40020470
 80034bc:	40020488 	.word	0x40020488
 80034c0:	400204a0 	.word	0x400204a0
 80034c4:	400204b8 	.word	0x400204b8
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80034cc:	f003 031f 	and.w	r3, r3, #31
 80034d0:	2208      	movs	r2, #8
 80034d2:	409a      	lsls	r2, r3
 80034d4:	697b      	ldr	r3, [r7, #20]
 80034d6:	4013      	ands	r3, r2
 80034d8:	2b00      	cmp	r3, #0
 80034da:	f000 8088 	beq.w	80035ee <HAL_DMA_IRQHandler+0xe0e>
 80034de:	693b      	ldr	r3, [r7, #16]
 80034e0:	f003 0308 	and.w	r3, r3, #8
 80034e4:	2b00      	cmp	r3, #0
 80034e6:	f000 8082 	beq.w	80035ee <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	4a41      	ldr	r2, [pc, #260]	; (80035f4 <HAL_DMA_IRQHandler+0xe14>)
 80034f0:	4293      	cmp	r3, r2
 80034f2:	d04a      	beq.n	800358a <HAL_DMA_IRQHandler+0xdaa>
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	4a3f      	ldr	r2, [pc, #252]	; (80035f8 <HAL_DMA_IRQHandler+0xe18>)
 80034fa:	4293      	cmp	r3, r2
 80034fc:	d045      	beq.n	800358a <HAL_DMA_IRQHandler+0xdaa>
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	4a3e      	ldr	r2, [pc, #248]	; (80035fc <HAL_DMA_IRQHandler+0xe1c>)
 8003504:	4293      	cmp	r3, r2
 8003506:	d040      	beq.n	800358a <HAL_DMA_IRQHandler+0xdaa>
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	4a3c      	ldr	r2, [pc, #240]	; (8003600 <HAL_DMA_IRQHandler+0xe20>)
 800350e:	4293      	cmp	r3, r2
 8003510:	d03b      	beq.n	800358a <HAL_DMA_IRQHandler+0xdaa>
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	4a3b      	ldr	r2, [pc, #236]	; (8003604 <HAL_DMA_IRQHandler+0xe24>)
 8003518:	4293      	cmp	r3, r2
 800351a:	d036      	beq.n	800358a <HAL_DMA_IRQHandler+0xdaa>
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	4a39      	ldr	r2, [pc, #228]	; (8003608 <HAL_DMA_IRQHandler+0xe28>)
 8003522:	4293      	cmp	r3, r2
 8003524:	d031      	beq.n	800358a <HAL_DMA_IRQHandler+0xdaa>
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	4a38      	ldr	r2, [pc, #224]	; (800360c <HAL_DMA_IRQHandler+0xe2c>)
 800352c:	4293      	cmp	r3, r2
 800352e:	d02c      	beq.n	800358a <HAL_DMA_IRQHandler+0xdaa>
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	4a36      	ldr	r2, [pc, #216]	; (8003610 <HAL_DMA_IRQHandler+0xe30>)
 8003536:	4293      	cmp	r3, r2
 8003538:	d027      	beq.n	800358a <HAL_DMA_IRQHandler+0xdaa>
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	4a35      	ldr	r2, [pc, #212]	; (8003614 <HAL_DMA_IRQHandler+0xe34>)
 8003540:	4293      	cmp	r3, r2
 8003542:	d022      	beq.n	800358a <HAL_DMA_IRQHandler+0xdaa>
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	4a33      	ldr	r2, [pc, #204]	; (8003618 <HAL_DMA_IRQHandler+0xe38>)
 800354a:	4293      	cmp	r3, r2
 800354c:	d01d      	beq.n	800358a <HAL_DMA_IRQHandler+0xdaa>
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	4a32      	ldr	r2, [pc, #200]	; (800361c <HAL_DMA_IRQHandler+0xe3c>)
 8003554:	4293      	cmp	r3, r2
 8003556:	d018      	beq.n	800358a <HAL_DMA_IRQHandler+0xdaa>
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	4a30      	ldr	r2, [pc, #192]	; (8003620 <HAL_DMA_IRQHandler+0xe40>)
 800355e:	4293      	cmp	r3, r2
 8003560:	d013      	beq.n	800358a <HAL_DMA_IRQHandler+0xdaa>
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	4a2f      	ldr	r2, [pc, #188]	; (8003624 <HAL_DMA_IRQHandler+0xe44>)
 8003568:	4293      	cmp	r3, r2
 800356a:	d00e      	beq.n	800358a <HAL_DMA_IRQHandler+0xdaa>
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	4a2d      	ldr	r2, [pc, #180]	; (8003628 <HAL_DMA_IRQHandler+0xe48>)
 8003572:	4293      	cmp	r3, r2
 8003574:	d009      	beq.n	800358a <HAL_DMA_IRQHandler+0xdaa>
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	4a2c      	ldr	r2, [pc, #176]	; (800362c <HAL_DMA_IRQHandler+0xe4c>)
 800357c:	4293      	cmp	r3, r2
 800357e:	d004      	beq.n	800358a <HAL_DMA_IRQHandler+0xdaa>
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	4a2a      	ldr	r2, [pc, #168]	; (8003630 <HAL_DMA_IRQHandler+0xe50>)
 8003586:	4293      	cmp	r3, r2
 8003588:	d108      	bne.n	800359c <HAL_DMA_IRQHandler+0xdbc>
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	681a      	ldr	r2, [r3, #0]
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	f022 021c 	bic.w	r2, r2, #28
 8003598:	601a      	str	r2, [r3, #0]
 800359a:	e007      	b.n	80035ac <HAL_DMA_IRQHandler+0xdcc>
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	681a      	ldr	r2, [r3, #0]
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	f022 020e 	bic.w	r2, r2, #14
 80035aa:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80035b0:	f003 031f 	and.w	r3, r3, #31
 80035b4:	2201      	movs	r2, #1
 80035b6:	409a      	lsls	r2, r3
 80035b8:	69fb      	ldr	r3, [r7, #28]
 80035ba:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	2201      	movs	r2, #1
 80035c0:	655a      	str	r2, [r3, #84]	; 0x54

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	2200      	movs	r2, #0
 80035c6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	2201      	movs	r2, #1
 80035ce:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      if (hdma->XferErrorCallback != NULL)
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80035d6:	2b00      	cmp	r3, #0
 80035d8:	d009      	beq.n	80035ee <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80035de:	6878      	ldr	r0, [r7, #4]
 80035e0:	4798      	blx	r3
 80035e2:	e004      	b.n	80035ee <HAL_DMA_IRQHandler+0xe0e>
          return;
 80035e4:	bf00      	nop
 80035e6:	e002      	b.n	80035ee <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80035e8:	bf00      	nop
 80035ea:	e000      	b.n	80035ee <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80035ec:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 80035ee:	3728      	adds	r7, #40	; 0x28
 80035f0:	46bd      	mov	sp, r7
 80035f2:	bd80      	pop	{r7, pc}
 80035f4:	40020010 	.word	0x40020010
 80035f8:	40020028 	.word	0x40020028
 80035fc:	40020040 	.word	0x40020040
 8003600:	40020058 	.word	0x40020058
 8003604:	40020070 	.word	0x40020070
 8003608:	40020088 	.word	0x40020088
 800360c:	400200a0 	.word	0x400200a0
 8003610:	400200b8 	.word	0x400200b8
 8003614:	40020410 	.word	0x40020410
 8003618:	40020428 	.word	0x40020428
 800361c:	40020440 	.word	0x40020440
 8003620:	40020458 	.word	0x40020458
 8003624:	40020470 	.word	0x40020470
 8003628:	40020488 	.word	0x40020488
 800362c:	400204a0 	.word	0x400204a0
 8003630:	400204b8 	.word	0x400204b8

08003634 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003634:	b480      	push	{r7}
 8003636:	b087      	sub	sp, #28
 8003638:	af00      	add	r7, sp, #0
 800363a:	60f8      	str	r0, [r7, #12]
 800363c:	60b9      	str	r1, [r7, #8]
 800363e:	607a      	str	r2, [r7, #4]
 8003640:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003642:	68fb      	ldr	r3, [r7, #12]
 8003644:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003646:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8003648:	68fb      	ldr	r3, [r7, #12]
 800364a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800364c:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800364e:	68fb      	ldr	r3, [r7, #12]
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	4a84      	ldr	r2, [pc, #528]	; (8003864 <DMA_SetConfig+0x230>)
 8003654:	4293      	cmp	r3, r2
 8003656:	d072      	beq.n	800373e <DMA_SetConfig+0x10a>
 8003658:	68fb      	ldr	r3, [r7, #12]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	4a82      	ldr	r2, [pc, #520]	; (8003868 <DMA_SetConfig+0x234>)
 800365e:	4293      	cmp	r3, r2
 8003660:	d06d      	beq.n	800373e <DMA_SetConfig+0x10a>
 8003662:	68fb      	ldr	r3, [r7, #12]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	4a81      	ldr	r2, [pc, #516]	; (800386c <DMA_SetConfig+0x238>)
 8003668:	4293      	cmp	r3, r2
 800366a:	d068      	beq.n	800373e <DMA_SetConfig+0x10a>
 800366c:	68fb      	ldr	r3, [r7, #12]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	4a7f      	ldr	r2, [pc, #508]	; (8003870 <DMA_SetConfig+0x23c>)
 8003672:	4293      	cmp	r3, r2
 8003674:	d063      	beq.n	800373e <DMA_SetConfig+0x10a>
 8003676:	68fb      	ldr	r3, [r7, #12]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	4a7e      	ldr	r2, [pc, #504]	; (8003874 <DMA_SetConfig+0x240>)
 800367c:	4293      	cmp	r3, r2
 800367e:	d05e      	beq.n	800373e <DMA_SetConfig+0x10a>
 8003680:	68fb      	ldr	r3, [r7, #12]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	4a7c      	ldr	r2, [pc, #496]	; (8003878 <DMA_SetConfig+0x244>)
 8003686:	4293      	cmp	r3, r2
 8003688:	d059      	beq.n	800373e <DMA_SetConfig+0x10a>
 800368a:	68fb      	ldr	r3, [r7, #12]
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	4a7b      	ldr	r2, [pc, #492]	; (800387c <DMA_SetConfig+0x248>)
 8003690:	4293      	cmp	r3, r2
 8003692:	d054      	beq.n	800373e <DMA_SetConfig+0x10a>
 8003694:	68fb      	ldr	r3, [r7, #12]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	4a79      	ldr	r2, [pc, #484]	; (8003880 <DMA_SetConfig+0x24c>)
 800369a:	4293      	cmp	r3, r2
 800369c:	d04f      	beq.n	800373e <DMA_SetConfig+0x10a>
 800369e:	68fb      	ldr	r3, [r7, #12]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	4a78      	ldr	r2, [pc, #480]	; (8003884 <DMA_SetConfig+0x250>)
 80036a4:	4293      	cmp	r3, r2
 80036a6:	d04a      	beq.n	800373e <DMA_SetConfig+0x10a>
 80036a8:	68fb      	ldr	r3, [r7, #12]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	4a76      	ldr	r2, [pc, #472]	; (8003888 <DMA_SetConfig+0x254>)
 80036ae:	4293      	cmp	r3, r2
 80036b0:	d045      	beq.n	800373e <DMA_SetConfig+0x10a>
 80036b2:	68fb      	ldr	r3, [r7, #12]
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	4a75      	ldr	r2, [pc, #468]	; (800388c <DMA_SetConfig+0x258>)
 80036b8:	4293      	cmp	r3, r2
 80036ba:	d040      	beq.n	800373e <DMA_SetConfig+0x10a>
 80036bc:	68fb      	ldr	r3, [r7, #12]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	4a73      	ldr	r2, [pc, #460]	; (8003890 <DMA_SetConfig+0x25c>)
 80036c2:	4293      	cmp	r3, r2
 80036c4:	d03b      	beq.n	800373e <DMA_SetConfig+0x10a>
 80036c6:	68fb      	ldr	r3, [r7, #12]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	4a72      	ldr	r2, [pc, #456]	; (8003894 <DMA_SetConfig+0x260>)
 80036cc:	4293      	cmp	r3, r2
 80036ce:	d036      	beq.n	800373e <DMA_SetConfig+0x10a>
 80036d0:	68fb      	ldr	r3, [r7, #12]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	4a70      	ldr	r2, [pc, #448]	; (8003898 <DMA_SetConfig+0x264>)
 80036d6:	4293      	cmp	r3, r2
 80036d8:	d031      	beq.n	800373e <DMA_SetConfig+0x10a>
 80036da:	68fb      	ldr	r3, [r7, #12]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	4a6f      	ldr	r2, [pc, #444]	; (800389c <DMA_SetConfig+0x268>)
 80036e0:	4293      	cmp	r3, r2
 80036e2:	d02c      	beq.n	800373e <DMA_SetConfig+0x10a>
 80036e4:	68fb      	ldr	r3, [r7, #12]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	4a6d      	ldr	r2, [pc, #436]	; (80038a0 <DMA_SetConfig+0x26c>)
 80036ea:	4293      	cmp	r3, r2
 80036ec:	d027      	beq.n	800373e <DMA_SetConfig+0x10a>
 80036ee:	68fb      	ldr	r3, [r7, #12]
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	4a6c      	ldr	r2, [pc, #432]	; (80038a4 <DMA_SetConfig+0x270>)
 80036f4:	4293      	cmp	r3, r2
 80036f6:	d022      	beq.n	800373e <DMA_SetConfig+0x10a>
 80036f8:	68fb      	ldr	r3, [r7, #12]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	4a6a      	ldr	r2, [pc, #424]	; (80038a8 <DMA_SetConfig+0x274>)
 80036fe:	4293      	cmp	r3, r2
 8003700:	d01d      	beq.n	800373e <DMA_SetConfig+0x10a>
 8003702:	68fb      	ldr	r3, [r7, #12]
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	4a69      	ldr	r2, [pc, #420]	; (80038ac <DMA_SetConfig+0x278>)
 8003708:	4293      	cmp	r3, r2
 800370a:	d018      	beq.n	800373e <DMA_SetConfig+0x10a>
 800370c:	68fb      	ldr	r3, [r7, #12]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	4a67      	ldr	r2, [pc, #412]	; (80038b0 <DMA_SetConfig+0x27c>)
 8003712:	4293      	cmp	r3, r2
 8003714:	d013      	beq.n	800373e <DMA_SetConfig+0x10a>
 8003716:	68fb      	ldr	r3, [r7, #12]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	4a66      	ldr	r2, [pc, #408]	; (80038b4 <DMA_SetConfig+0x280>)
 800371c:	4293      	cmp	r3, r2
 800371e:	d00e      	beq.n	800373e <DMA_SetConfig+0x10a>
 8003720:	68fb      	ldr	r3, [r7, #12]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	4a64      	ldr	r2, [pc, #400]	; (80038b8 <DMA_SetConfig+0x284>)
 8003726:	4293      	cmp	r3, r2
 8003728:	d009      	beq.n	800373e <DMA_SetConfig+0x10a>
 800372a:	68fb      	ldr	r3, [r7, #12]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	4a63      	ldr	r2, [pc, #396]	; (80038bc <DMA_SetConfig+0x288>)
 8003730:	4293      	cmp	r3, r2
 8003732:	d004      	beq.n	800373e <DMA_SetConfig+0x10a>
 8003734:	68fb      	ldr	r3, [r7, #12]
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	4a61      	ldr	r2, [pc, #388]	; (80038c0 <DMA_SetConfig+0x28c>)
 800373a:	4293      	cmp	r3, r2
 800373c:	d101      	bne.n	8003742 <DMA_SetConfig+0x10e>
 800373e:	2301      	movs	r3, #1
 8003740:	e000      	b.n	8003744 <DMA_SetConfig+0x110>
 8003742:	2300      	movs	r3, #0
 8003744:	2b00      	cmp	r3, #0
 8003746:	d00d      	beq.n	8003764 <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003748:	68fb      	ldr	r3, [r7, #12]
 800374a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800374c:	68fa      	ldr	r2, [r7, #12]
 800374e:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8003750:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 8003752:	68fb      	ldr	r3, [r7, #12]
 8003754:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003756:	2b00      	cmp	r3, #0
 8003758:	d004      	beq.n	8003764 <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800375a:	68fb      	ldr	r3, [r7, #12]
 800375c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800375e:	68fa      	ldr	r2, [r7, #12]
 8003760:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8003762:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8003764:	68fb      	ldr	r3, [r7, #12]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	4a3e      	ldr	r2, [pc, #248]	; (8003864 <DMA_SetConfig+0x230>)
 800376a:	4293      	cmp	r3, r2
 800376c:	d04a      	beq.n	8003804 <DMA_SetConfig+0x1d0>
 800376e:	68fb      	ldr	r3, [r7, #12]
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	4a3d      	ldr	r2, [pc, #244]	; (8003868 <DMA_SetConfig+0x234>)
 8003774:	4293      	cmp	r3, r2
 8003776:	d045      	beq.n	8003804 <DMA_SetConfig+0x1d0>
 8003778:	68fb      	ldr	r3, [r7, #12]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	4a3b      	ldr	r2, [pc, #236]	; (800386c <DMA_SetConfig+0x238>)
 800377e:	4293      	cmp	r3, r2
 8003780:	d040      	beq.n	8003804 <DMA_SetConfig+0x1d0>
 8003782:	68fb      	ldr	r3, [r7, #12]
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	4a3a      	ldr	r2, [pc, #232]	; (8003870 <DMA_SetConfig+0x23c>)
 8003788:	4293      	cmp	r3, r2
 800378a:	d03b      	beq.n	8003804 <DMA_SetConfig+0x1d0>
 800378c:	68fb      	ldr	r3, [r7, #12]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	4a38      	ldr	r2, [pc, #224]	; (8003874 <DMA_SetConfig+0x240>)
 8003792:	4293      	cmp	r3, r2
 8003794:	d036      	beq.n	8003804 <DMA_SetConfig+0x1d0>
 8003796:	68fb      	ldr	r3, [r7, #12]
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	4a37      	ldr	r2, [pc, #220]	; (8003878 <DMA_SetConfig+0x244>)
 800379c:	4293      	cmp	r3, r2
 800379e:	d031      	beq.n	8003804 <DMA_SetConfig+0x1d0>
 80037a0:	68fb      	ldr	r3, [r7, #12]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	4a35      	ldr	r2, [pc, #212]	; (800387c <DMA_SetConfig+0x248>)
 80037a6:	4293      	cmp	r3, r2
 80037a8:	d02c      	beq.n	8003804 <DMA_SetConfig+0x1d0>
 80037aa:	68fb      	ldr	r3, [r7, #12]
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	4a34      	ldr	r2, [pc, #208]	; (8003880 <DMA_SetConfig+0x24c>)
 80037b0:	4293      	cmp	r3, r2
 80037b2:	d027      	beq.n	8003804 <DMA_SetConfig+0x1d0>
 80037b4:	68fb      	ldr	r3, [r7, #12]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	4a32      	ldr	r2, [pc, #200]	; (8003884 <DMA_SetConfig+0x250>)
 80037ba:	4293      	cmp	r3, r2
 80037bc:	d022      	beq.n	8003804 <DMA_SetConfig+0x1d0>
 80037be:	68fb      	ldr	r3, [r7, #12]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	4a31      	ldr	r2, [pc, #196]	; (8003888 <DMA_SetConfig+0x254>)
 80037c4:	4293      	cmp	r3, r2
 80037c6:	d01d      	beq.n	8003804 <DMA_SetConfig+0x1d0>
 80037c8:	68fb      	ldr	r3, [r7, #12]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	4a2f      	ldr	r2, [pc, #188]	; (800388c <DMA_SetConfig+0x258>)
 80037ce:	4293      	cmp	r3, r2
 80037d0:	d018      	beq.n	8003804 <DMA_SetConfig+0x1d0>
 80037d2:	68fb      	ldr	r3, [r7, #12]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	4a2e      	ldr	r2, [pc, #184]	; (8003890 <DMA_SetConfig+0x25c>)
 80037d8:	4293      	cmp	r3, r2
 80037da:	d013      	beq.n	8003804 <DMA_SetConfig+0x1d0>
 80037dc:	68fb      	ldr	r3, [r7, #12]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	4a2c      	ldr	r2, [pc, #176]	; (8003894 <DMA_SetConfig+0x260>)
 80037e2:	4293      	cmp	r3, r2
 80037e4:	d00e      	beq.n	8003804 <DMA_SetConfig+0x1d0>
 80037e6:	68fb      	ldr	r3, [r7, #12]
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	4a2b      	ldr	r2, [pc, #172]	; (8003898 <DMA_SetConfig+0x264>)
 80037ec:	4293      	cmp	r3, r2
 80037ee:	d009      	beq.n	8003804 <DMA_SetConfig+0x1d0>
 80037f0:	68fb      	ldr	r3, [r7, #12]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	4a29      	ldr	r2, [pc, #164]	; (800389c <DMA_SetConfig+0x268>)
 80037f6:	4293      	cmp	r3, r2
 80037f8:	d004      	beq.n	8003804 <DMA_SetConfig+0x1d0>
 80037fa:	68fb      	ldr	r3, [r7, #12]
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	4a28      	ldr	r2, [pc, #160]	; (80038a0 <DMA_SetConfig+0x26c>)
 8003800:	4293      	cmp	r3, r2
 8003802:	d101      	bne.n	8003808 <DMA_SetConfig+0x1d4>
 8003804:	2301      	movs	r3, #1
 8003806:	e000      	b.n	800380a <DMA_SetConfig+0x1d6>
 8003808:	2300      	movs	r3, #0
 800380a:	2b00      	cmp	r3, #0
 800380c:	d05a      	beq.n	80038c4 <DMA_SetConfig+0x290>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800380e:	68fb      	ldr	r3, [r7, #12]
 8003810:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003812:	f003 031f 	and.w	r3, r3, #31
 8003816:	223f      	movs	r2, #63	; 0x3f
 8003818:	409a      	lsls	r2, r3
 800381a:	697b      	ldr	r3, [r7, #20]
 800381c:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800381e:	68fb      	ldr	r3, [r7, #12]
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	681a      	ldr	r2, [r3, #0]
 8003824:	68fb      	ldr	r3, [r7, #12]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800382c:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 800382e:	68fb      	ldr	r3, [r7, #12]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	683a      	ldr	r2, [r7, #0]
 8003834:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003836:	68fb      	ldr	r3, [r7, #12]
 8003838:	689b      	ldr	r3, [r3, #8]
 800383a:	2b40      	cmp	r3, #64	; 0x40
 800383c:	d108      	bne.n	8003850 <DMA_SetConfig+0x21c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 800383e:	68fb      	ldr	r3, [r7, #12]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	687a      	ldr	r2, [r7, #4]
 8003844:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 8003846:	68fb      	ldr	r3, [r7, #12]
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	68ba      	ldr	r2, [r7, #8]
 800384c:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 800384e:	e087      	b.n	8003960 <DMA_SetConfig+0x32c>
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 8003850:	68fb      	ldr	r3, [r7, #12]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	68ba      	ldr	r2, [r7, #8]
 8003856:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 8003858:	68fb      	ldr	r3, [r7, #12]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	687a      	ldr	r2, [r7, #4]
 800385e:	60da      	str	r2, [r3, #12]
}
 8003860:	e07e      	b.n	8003960 <DMA_SetConfig+0x32c>
 8003862:	bf00      	nop
 8003864:	40020010 	.word	0x40020010
 8003868:	40020028 	.word	0x40020028
 800386c:	40020040 	.word	0x40020040
 8003870:	40020058 	.word	0x40020058
 8003874:	40020070 	.word	0x40020070
 8003878:	40020088 	.word	0x40020088
 800387c:	400200a0 	.word	0x400200a0
 8003880:	400200b8 	.word	0x400200b8
 8003884:	40020410 	.word	0x40020410
 8003888:	40020428 	.word	0x40020428
 800388c:	40020440 	.word	0x40020440
 8003890:	40020458 	.word	0x40020458
 8003894:	40020470 	.word	0x40020470
 8003898:	40020488 	.word	0x40020488
 800389c:	400204a0 	.word	0x400204a0
 80038a0:	400204b8 	.word	0x400204b8
 80038a4:	58025408 	.word	0x58025408
 80038a8:	5802541c 	.word	0x5802541c
 80038ac:	58025430 	.word	0x58025430
 80038b0:	58025444 	.word	0x58025444
 80038b4:	58025458 	.word	0x58025458
 80038b8:	5802546c 	.word	0x5802546c
 80038bc:	58025480 	.word	0x58025480
 80038c0:	58025494 	.word	0x58025494
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 80038c4:	68fb      	ldr	r3, [r7, #12]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	4a28      	ldr	r2, [pc, #160]	; (800396c <DMA_SetConfig+0x338>)
 80038ca:	4293      	cmp	r3, r2
 80038cc:	d022      	beq.n	8003914 <DMA_SetConfig+0x2e0>
 80038ce:	68fb      	ldr	r3, [r7, #12]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	4a27      	ldr	r2, [pc, #156]	; (8003970 <DMA_SetConfig+0x33c>)
 80038d4:	4293      	cmp	r3, r2
 80038d6:	d01d      	beq.n	8003914 <DMA_SetConfig+0x2e0>
 80038d8:	68fb      	ldr	r3, [r7, #12]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	4a25      	ldr	r2, [pc, #148]	; (8003974 <DMA_SetConfig+0x340>)
 80038de:	4293      	cmp	r3, r2
 80038e0:	d018      	beq.n	8003914 <DMA_SetConfig+0x2e0>
 80038e2:	68fb      	ldr	r3, [r7, #12]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	4a24      	ldr	r2, [pc, #144]	; (8003978 <DMA_SetConfig+0x344>)
 80038e8:	4293      	cmp	r3, r2
 80038ea:	d013      	beq.n	8003914 <DMA_SetConfig+0x2e0>
 80038ec:	68fb      	ldr	r3, [r7, #12]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	4a22      	ldr	r2, [pc, #136]	; (800397c <DMA_SetConfig+0x348>)
 80038f2:	4293      	cmp	r3, r2
 80038f4:	d00e      	beq.n	8003914 <DMA_SetConfig+0x2e0>
 80038f6:	68fb      	ldr	r3, [r7, #12]
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	4a21      	ldr	r2, [pc, #132]	; (8003980 <DMA_SetConfig+0x34c>)
 80038fc:	4293      	cmp	r3, r2
 80038fe:	d009      	beq.n	8003914 <DMA_SetConfig+0x2e0>
 8003900:	68fb      	ldr	r3, [r7, #12]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	4a1f      	ldr	r2, [pc, #124]	; (8003984 <DMA_SetConfig+0x350>)
 8003906:	4293      	cmp	r3, r2
 8003908:	d004      	beq.n	8003914 <DMA_SetConfig+0x2e0>
 800390a:	68fb      	ldr	r3, [r7, #12]
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	4a1e      	ldr	r2, [pc, #120]	; (8003988 <DMA_SetConfig+0x354>)
 8003910:	4293      	cmp	r3, r2
 8003912:	d101      	bne.n	8003918 <DMA_SetConfig+0x2e4>
 8003914:	2301      	movs	r3, #1
 8003916:	e000      	b.n	800391a <DMA_SetConfig+0x2e6>
 8003918:	2300      	movs	r3, #0
 800391a:	2b00      	cmp	r3, #0
 800391c:	d020      	beq.n	8003960 <DMA_SetConfig+0x32c>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 800391e:	68fb      	ldr	r3, [r7, #12]
 8003920:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003922:	f003 031f 	and.w	r3, r3, #31
 8003926:	2201      	movs	r2, #1
 8003928:	409a      	lsls	r2, r3
 800392a:	693b      	ldr	r3, [r7, #16]
 800392c:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 800392e:	68fb      	ldr	r3, [r7, #12]
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	683a      	ldr	r2, [r7, #0]
 8003934:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003936:	68fb      	ldr	r3, [r7, #12]
 8003938:	689b      	ldr	r3, [r3, #8]
 800393a:	2b40      	cmp	r3, #64	; 0x40
 800393c:	d108      	bne.n	8003950 <DMA_SetConfig+0x31c>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 800393e:	68fb      	ldr	r3, [r7, #12]
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	687a      	ldr	r2, [r7, #4]
 8003944:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 8003946:	68fb      	ldr	r3, [r7, #12]
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	68ba      	ldr	r2, [r7, #8]
 800394c:	60da      	str	r2, [r3, #12]
}
 800394e:	e007      	b.n	8003960 <DMA_SetConfig+0x32c>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 8003950:	68fb      	ldr	r3, [r7, #12]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	68ba      	ldr	r2, [r7, #8]
 8003956:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 8003958:	68fb      	ldr	r3, [r7, #12]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	687a      	ldr	r2, [r7, #4]
 800395e:	60da      	str	r2, [r3, #12]
}
 8003960:	bf00      	nop
 8003962:	371c      	adds	r7, #28
 8003964:	46bd      	mov	sp, r7
 8003966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800396a:	4770      	bx	lr
 800396c:	58025408 	.word	0x58025408
 8003970:	5802541c 	.word	0x5802541c
 8003974:	58025430 	.word	0x58025430
 8003978:	58025444 	.word	0x58025444
 800397c:	58025458 	.word	0x58025458
 8003980:	5802546c 	.word	0x5802546c
 8003984:	58025480 	.word	0x58025480
 8003988:	58025494 	.word	0x58025494

0800398c <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800398c:	b480      	push	{r7}
 800398e:	b085      	sub	sp, #20
 8003990:	af00      	add	r7, sp, #0
 8003992:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	4a42      	ldr	r2, [pc, #264]	; (8003aa4 <DMA_CalcBaseAndBitshift+0x118>)
 800399a:	4293      	cmp	r3, r2
 800399c:	d04a      	beq.n	8003a34 <DMA_CalcBaseAndBitshift+0xa8>
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	4a41      	ldr	r2, [pc, #260]	; (8003aa8 <DMA_CalcBaseAndBitshift+0x11c>)
 80039a4:	4293      	cmp	r3, r2
 80039a6:	d045      	beq.n	8003a34 <DMA_CalcBaseAndBitshift+0xa8>
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	4a3f      	ldr	r2, [pc, #252]	; (8003aac <DMA_CalcBaseAndBitshift+0x120>)
 80039ae:	4293      	cmp	r3, r2
 80039b0:	d040      	beq.n	8003a34 <DMA_CalcBaseAndBitshift+0xa8>
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	4a3e      	ldr	r2, [pc, #248]	; (8003ab0 <DMA_CalcBaseAndBitshift+0x124>)
 80039b8:	4293      	cmp	r3, r2
 80039ba:	d03b      	beq.n	8003a34 <DMA_CalcBaseAndBitshift+0xa8>
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	4a3c      	ldr	r2, [pc, #240]	; (8003ab4 <DMA_CalcBaseAndBitshift+0x128>)
 80039c2:	4293      	cmp	r3, r2
 80039c4:	d036      	beq.n	8003a34 <DMA_CalcBaseAndBitshift+0xa8>
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	4a3b      	ldr	r2, [pc, #236]	; (8003ab8 <DMA_CalcBaseAndBitshift+0x12c>)
 80039cc:	4293      	cmp	r3, r2
 80039ce:	d031      	beq.n	8003a34 <DMA_CalcBaseAndBitshift+0xa8>
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	4a39      	ldr	r2, [pc, #228]	; (8003abc <DMA_CalcBaseAndBitshift+0x130>)
 80039d6:	4293      	cmp	r3, r2
 80039d8:	d02c      	beq.n	8003a34 <DMA_CalcBaseAndBitshift+0xa8>
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	4a38      	ldr	r2, [pc, #224]	; (8003ac0 <DMA_CalcBaseAndBitshift+0x134>)
 80039e0:	4293      	cmp	r3, r2
 80039e2:	d027      	beq.n	8003a34 <DMA_CalcBaseAndBitshift+0xa8>
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	4a36      	ldr	r2, [pc, #216]	; (8003ac4 <DMA_CalcBaseAndBitshift+0x138>)
 80039ea:	4293      	cmp	r3, r2
 80039ec:	d022      	beq.n	8003a34 <DMA_CalcBaseAndBitshift+0xa8>
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	4a35      	ldr	r2, [pc, #212]	; (8003ac8 <DMA_CalcBaseAndBitshift+0x13c>)
 80039f4:	4293      	cmp	r3, r2
 80039f6:	d01d      	beq.n	8003a34 <DMA_CalcBaseAndBitshift+0xa8>
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	4a33      	ldr	r2, [pc, #204]	; (8003acc <DMA_CalcBaseAndBitshift+0x140>)
 80039fe:	4293      	cmp	r3, r2
 8003a00:	d018      	beq.n	8003a34 <DMA_CalcBaseAndBitshift+0xa8>
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	4a32      	ldr	r2, [pc, #200]	; (8003ad0 <DMA_CalcBaseAndBitshift+0x144>)
 8003a08:	4293      	cmp	r3, r2
 8003a0a:	d013      	beq.n	8003a34 <DMA_CalcBaseAndBitshift+0xa8>
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	4a30      	ldr	r2, [pc, #192]	; (8003ad4 <DMA_CalcBaseAndBitshift+0x148>)
 8003a12:	4293      	cmp	r3, r2
 8003a14:	d00e      	beq.n	8003a34 <DMA_CalcBaseAndBitshift+0xa8>
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	4a2f      	ldr	r2, [pc, #188]	; (8003ad8 <DMA_CalcBaseAndBitshift+0x14c>)
 8003a1c:	4293      	cmp	r3, r2
 8003a1e:	d009      	beq.n	8003a34 <DMA_CalcBaseAndBitshift+0xa8>
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	4a2d      	ldr	r2, [pc, #180]	; (8003adc <DMA_CalcBaseAndBitshift+0x150>)
 8003a26:	4293      	cmp	r3, r2
 8003a28:	d004      	beq.n	8003a34 <DMA_CalcBaseAndBitshift+0xa8>
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	4a2c      	ldr	r2, [pc, #176]	; (8003ae0 <DMA_CalcBaseAndBitshift+0x154>)
 8003a30:	4293      	cmp	r3, r2
 8003a32:	d101      	bne.n	8003a38 <DMA_CalcBaseAndBitshift+0xac>
 8003a34:	2301      	movs	r3, #1
 8003a36:	e000      	b.n	8003a3a <DMA_CalcBaseAndBitshift+0xae>
 8003a38:	2300      	movs	r3, #0
 8003a3a:	2b00      	cmp	r3, #0
 8003a3c:	d024      	beq.n	8003a88 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	b2db      	uxtb	r3, r3
 8003a44:	3b10      	subs	r3, #16
 8003a46:	4a27      	ldr	r2, [pc, #156]	; (8003ae4 <DMA_CalcBaseAndBitshift+0x158>)
 8003a48:	fba2 2303 	umull	r2, r3, r2, r3
 8003a4c:	091b      	lsrs	r3, r3, #4
 8003a4e:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8003a50:	68fb      	ldr	r3, [r7, #12]
 8003a52:	f003 0307 	and.w	r3, r3, #7
 8003a56:	4a24      	ldr	r2, [pc, #144]	; (8003ae8 <DMA_CalcBaseAndBitshift+0x15c>)
 8003a58:	5cd3      	ldrb	r3, [r2, r3]
 8003a5a:	461a      	mov	r2, r3
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	65da      	str	r2, [r3, #92]	; 0x5c

    if (stream_number > 3U)
 8003a60:	68fb      	ldr	r3, [r7, #12]
 8003a62:	2b03      	cmp	r3, #3
 8003a64:	d908      	bls.n	8003a78 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	461a      	mov	r2, r3
 8003a6c:	4b1f      	ldr	r3, [pc, #124]	; (8003aec <DMA_CalcBaseAndBitshift+0x160>)
 8003a6e:	4013      	ands	r3, r2
 8003a70:	1d1a      	adds	r2, r3, #4
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	659a      	str	r2, [r3, #88]	; 0x58
 8003a76:	e00d      	b.n	8003a94 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	461a      	mov	r2, r3
 8003a7e:	4b1b      	ldr	r3, [pc, #108]	; (8003aec <DMA_CalcBaseAndBitshift+0x160>)
 8003a80:	4013      	ands	r3, r2
 8003a82:	687a      	ldr	r2, [r7, #4]
 8003a84:	6593      	str	r3, [r2, #88]	; 0x58
 8003a86:	e005      	b.n	8003a94 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	659a      	str	r2, [r3, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8003a98:	4618      	mov	r0, r3
 8003a9a:	3714      	adds	r7, #20
 8003a9c:	46bd      	mov	sp, r7
 8003a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aa2:	4770      	bx	lr
 8003aa4:	40020010 	.word	0x40020010
 8003aa8:	40020028 	.word	0x40020028
 8003aac:	40020040 	.word	0x40020040
 8003ab0:	40020058 	.word	0x40020058
 8003ab4:	40020070 	.word	0x40020070
 8003ab8:	40020088 	.word	0x40020088
 8003abc:	400200a0 	.word	0x400200a0
 8003ac0:	400200b8 	.word	0x400200b8
 8003ac4:	40020410 	.word	0x40020410
 8003ac8:	40020428 	.word	0x40020428
 8003acc:	40020440 	.word	0x40020440
 8003ad0:	40020458 	.word	0x40020458
 8003ad4:	40020470 	.word	0x40020470
 8003ad8:	40020488 	.word	0x40020488
 8003adc:	400204a0 	.word	0x400204a0
 8003ae0:	400204b8 	.word	0x400204b8
 8003ae4:	aaaaaaab 	.word	0xaaaaaaab
 8003ae8:	08012674 	.word	0x08012674
 8003aec:	fffffc00 	.word	0xfffffc00

08003af0 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8003af0:	b480      	push	{r7}
 8003af2:	b085      	sub	sp, #20
 8003af4:	af00      	add	r7, sp, #0
 8003af6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003af8:	2300      	movs	r3, #0
 8003afa:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	699b      	ldr	r3, [r3, #24]
 8003b00:	2b00      	cmp	r3, #0
 8003b02:	d120      	bne.n	8003b46 <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b08:	2b03      	cmp	r3, #3
 8003b0a:	d858      	bhi.n	8003bbe <DMA_CheckFifoParam+0xce>
 8003b0c:	a201      	add	r2, pc, #4	; (adr r2, 8003b14 <DMA_CheckFifoParam+0x24>)
 8003b0e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003b12:	bf00      	nop
 8003b14:	08003b25 	.word	0x08003b25
 8003b18:	08003b37 	.word	0x08003b37
 8003b1c:	08003b25 	.word	0x08003b25
 8003b20:	08003bbf 	.word	0x08003bbf
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b28:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003b2c:	2b00      	cmp	r3, #0
 8003b2e:	d048      	beq.n	8003bc2 <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 8003b30:	2301      	movs	r3, #1
 8003b32:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8003b34:	e045      	b.n	8003bc2 <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b3a:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003b3e:	d142      	bne.n	8003bc6 <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 8003b40:	2301      	movs	r3, #1
 8003b42:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8003b44:	e03f      	b.n	8003bc6 <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	699b      	ldr	r3, [r3, #24]
 8003b4a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003b4e:	d123      	bne.n	8003b98 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b54:	2b03      	cmp	r3, #3
 8003b56:	d838      	bhi.n	8003bca <DMA_CheckFifoParam+0xda>
 8003b58:	a201      	add	r2, pc, #4	; (adr r2, 8003b60 <DMA_CheckFifoParam+0x70>)
 8003b5a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003b5e:	bf00      	nop
 8003b60:	08003b71 	.word	0x08003b71
 8003b64:	08003b77 	.word	0x08003b77
 8003b68:	08003b71 	.word	0x08003b71
 8003b6c:	08003b89 	.word	0x08003b89
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 8003b70:	2301      	movs	r3, #1
 8003b72:	73fb      	strb	r3, [r7, #15]
        break;
 8003b74:	e030      	b.n	8003bd8 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b7a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003b7e:	2b00      	cmp	r3, #0
 8003b80:	d025      	beq.n	8003bce <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 8003b82:	2301      	movs	r3, #1
 8003b84:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8003b86:	e022      	b.n	8003bce <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b8c:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003b90:	d11f      	bne.n	8003bd2 <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 8003b92:	2301      	movs	r3, #1
 8003b94:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8003b96:	e01c      	b.n	8003bd2 <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b9c:	2b02      	cmp	r3, #2
 8003b9e:	d902      	bls.n	8003ba6 <DMA_CheckFifoParam+0xb6>
 8003ba0:	2b03      	cmp	r3, #3
 8003ba2:	d003      	beq.n	8003bac <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 8003ba4:	e018      	b.n	8003bd8 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 8003ba6:	2301      	movs	r3, #1
 8003ba8:	73fb      	strb	r3, [r7, #15]
        break;
 8003baa:	e015      	b.n	8003bd8 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003bb0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003bb4:	2b00      	cmp	r3, #0
 8003bb6:	d00e      	beq.n	8003bd6 <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 8003bb8:	2301      	movs	r3, #1
 8003bba:	73fb      	strb	r3, [r7, #15]
    break;
 8003bbc:	e00b      	b.n	8003bd6 <DMA_CheckFifoParam+0xe6>
        break;
 8003bbe:	bf00      	nop
 8003bc0:	e00a      	b.n	8003bd8 <DMA_CheckFifoParam+0xe8>
        break;
 8003bc2:	bf00      	nop
 8003bc4:	e008      	b.n	8003bd8 <DMA_CheckFifoParam+0xe8>
        break;
 8003bc6:	bf00      	nop
 8003bc8:	e006      	b.n	8003bd8 <DMA_CheckFifoParam+0xe8>
        break;
 8003bca:	bf00      	nop
 8003bcc:	e004      	b.n	8003bd8 <DMA_CheckFifoParam+0xe8>
        break;
 8003bce:	bf00      	nop
 8003bd0:	e002      	b.n	8003bd8 <DMA_CheckFifoParam+0xe8>
        break;
 8003bd2:	bf00      	nop
 8003bd4:	e000      	b.n	8003bd8 <DMA_CheckFifoParam+0xe8>
    break;
 8003bd6:	bf00      	nop
    }
  }

  return status;
 8003bd8:	7bfb      	ldrb	r3, [r7, #15]
}
 8003bda:	4618      	mov	r0, r3
 8003bdc:	3714      	adds	r7, #20
 8003bde:	46bd      	mov	sp, r7
 8003be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003be4:	4770      	bx	lr
 8003be6:	bf00      	nop

08003be8 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8003be8:	b480      	push	{r7}
 8003bea:	b085      	sub	sp, #20
 8003bec:	af00      	add	r7, sp, #0
 8003bee:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	4a38      	ldr	r2, [pc, #224]	; (8003cdc <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 8003bfc:	4293      	cmp	r3, r2
 8003bfe:	d022      	beq.n	8003c46 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	4a36      	ldr	r2, [pc, #216]	; (8003ce0 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 8003c06:	4293      	cmp	r3, r2
 8003c08:	d01d      	beq.n	8003c46 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	4a35      	ldr	r2, [pc, #212]	; (8003ce4 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 8003c10:	4293      	cmp	r3, r2
 8003c12:	d018      	beq.n	8003c46 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	4a33      	ldr	r2, [pc, #204]	; (8003ce8 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 8003c1a:	4293      	cmp	r3, r2
 8003c1c:	d013      	beq.n	8003c46 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	4a32      	ldr	r2, [pc, #200]	; (8003cec <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 8003c24:	4293      	cmp	r3, r2
 8003c26:	d00e      	beq.n	8003c46 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	4a30      	ldr	r2, [pc, #192]	; (8003cf0 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 8003c2e:	4293      	cmp	r3, r2
 8003c30:	d009      	beq.n	8003c46 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	4a2f      	ldr	r2, [pc, #188]	; (8003cf4 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 8003c38:	4293      	cmp	r3, r2
 8003c3a:	d004      	beq.n	8003c46 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	4a2d      	ldr	r2, [pc, #180]	; (8003cf8 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 8003c42:	4293      	cmp	r3, r2
 8003c44:	d101      	bne.n	8003c4a <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 8003c46:	2301      	movs	r3, #1
 8003c48:	e000      	b.n	8003c4c <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 8003c4a:	2300      	movs	r3, #0
 8003c4c:	2b00      	cmp	r3, #0
 8003c4e:	d01a      	beq.n	8003c86 <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	b2db      	uxtb	r3, r3
 8003c56:	3b08      	subs	r3, #8
 8003c58:	4a28      	ldr	r2, [pc, #160]	; (8003cfc <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 8003c5a:	fba2 2303 	umull	r2, r3, r2, r3
 8003c5e:	091b      	lsrs	r3, r3, #4
 8003c60:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 8003c62:	68fa      	ldr	r2, [r7, #12]
 8003c64:	4b26      	ldr	r3, [pc, #152]	; (8003d00 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 8003c66:	4413      	add	r3, r2
 8003c68:	009b      	lsls	r3, r3, #2
 8003c6a:	461a      	mov	r2, r3
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	4a24      	ldr	r2, [pc, #144]	; (8003d04 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 8003c74:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8003c76:	68fb      	ldr	r3, [r7, #12]
 8003c78:	f003 031f 	and.w	r3, r3, #31
 8003c7c:	2201      	movs	r2, #1
 8003c7e:	409a      	lsls	r2, r3
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	669a      	str	r2, [r3, #104]	; 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 8003c84:	e024      	b.n	8003cd0 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	b2db      	uxtb	r3, r3
 8003c8c:	3b10      	subs	r3, #16
 8003c8e:	4a1e      	ldr	r2, [pc, #120]	; (8003d08 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 8003c90:	fba2 2303 	umull	r2, r3, r2, r3
 8003c94:	091b      	lsrs	r3, r3, #4
 8003c96:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8003c98:	68bb      	ldr	r3, [r7, #8]
 8003c9a:	4a1c      	ldr	r2, [pc, #112]	; (8003d0c <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 8003c9c:	4293      	cmp	r3, r2
 8003c9e:	d806      	bhi.n	8003cae <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 8003ca0:	68bb      	ldr	r3, [r7, #8]
 8003ca2:	4a1b      	ldr	r2, [pc, #108]	; (8003d10 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 8003ca4:	4293      	cmp	r3, r2
 8003ca6:	d902      	bls.n	8003cae <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 8003ca8:	68fb      	ldr	r3, [r7, #12]
 8003caa:	3308      	adds	r3, #8
 8003cac:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 8003cae:	68fa      	ldr	r2, [r7, #12]
 8003cb0:	4b18      	ldr	r3, [pc, #96]	; (8003d14 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 8003cb2:	4413      	add	r3, r2
 8003cb4:	009b      	lsls	r3, r3, #2
 8003cb6:	461a      	mov	r2, r3
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	4a16      	ldr	r2, [pc, #88]	; (8003d18 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 8003cc0:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8003cc2:	68fb      	ldr	r3, [r7, #12]
 8003cc4:	f003 031f 	and.w	r3, r3, #31
 8003cc8:	2201      	movs	r2, #1
 8003cca:	409a      	lsls	r2, r3
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	669a      	str	r2, [r3, #104]	; 0x68
}
 8003cd0:	bf00      	nop
 8003cd2:	3714      	adds	r7, #20
 8003cd4:	46bd      	mov	sp, r7
 8003cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cda:	4770      	bx	lr
 8003cdc:	58025408 	.word	0x58025408
 8003ce0:	5802541c 	.word	0x5802541c
 8003ce4:	58025430 	.word	0x58025430
 8003ce8:	58025444 	.word	0x58025444
 8003cec:	58025458 	.word	0x58025458
 8003cf0:	5802546c 	.word	0x5802546c
 8003cf4:	58025480 	.word	0x58025480
 8003cf8:	58025494 	.word	0x58025494
 8003cfc:	cccccccd 	.word	0xcccccccd
 8003d00:	16009600 	.word	0x16009600
 8003d04:	58025880 	.word	0x58025880
 8003d08:	aaaaaaab 	.word	0xaaaaaaab
 8003d0c:	400204b8 	.word	0x400204b8
 8003d10:	4002040f 	.word	0x4002040f
 8003d14:	10008200 	.word	0x10008200
 8003d18:	40020880 	.word	0x40020880

08003d1c <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8003d1c:	b480      	push	{r7}
 8003d1e:	b085      	sub	sp, #20
 8003d20:	af00      	add	r7, sp, #0
 8003d22:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	685b      	ldr	r3, [r3, #4]
 8003d28:	b2db      	uxtb	r3, r3
 8003d2a:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 8003d2c:	68fb      	ldr	r3, [r7, #12]
 8003d2e:	2b00      	cmp	r3, #0
 8003d30:	d04a      	beq.n	8003dc8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 8003d32:	68fb      	ldr	r3, [r7, #12]
 8003d34:	2b08      	cmp	r3, #8
 8003d36:	d847      	bhi.n	8003dc8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	4a25      	ldr	r2, [pc, #148]	; (8003dd4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 8003d3e:	4293      	cmp	r3, r2
 8003d40:	d022      	beq.n	8003d88 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	4a24      	ldr	r2, [pc, #144]	; (8003dd8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 8003d48:	4293      	cmp	r3, r2
 8003d4a:	d01d      	beq.n	8003d88 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	4a22      	ldr	r2, [pc, #136]	; (8003ddc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 8003d52:	4293      	cmp	r3, r2
 8003d54:	d018      	beq.n	8003d88 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	4a21      	ldr	r2, [pc, #132]	; (8003de0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 8003d5c:	4293      	cmp	r3, r2
 8003d5e:	d013      	beq.n	8003d88 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	4a1f      	ldr	r2, [pc, #124]	; (8003de4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 8003d66:	4293      	cmp	r3, r2
 8003d68:	d00e      	beq.n	8003d88 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	4a1e      	ldr	r2, [pc, #120]	; (8003de8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 8003d70:	4293      	cmp	r3, r2
 8003d72:	d009      	beq.n	8003d88 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	4a1c      	ldr	r2, [pc, #112]	; (8003dec <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 8003d7a:	4293      	cmp	r3, r2
 8003d7c:	d004      	beq.n	8003d88 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	4a1b      	ldr	r2, [pc, #108]	; (8003df0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 8003d84:	4293      	cmp	r3, r2
 8003d86:	d101      	bne.n	8003d8c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 8003d88:	2301      	movs	r3, #1
 8003d8a:	e000      	b.n	8003d8e <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 8003d8c:	2300      	movs	r3, #0
 8003d8e:	2b00      	cmp	r3, #0
 8003d90:	d00a      	beq.n	8003da8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 8003d92:	68fa      	ldr	r2, [r7, #12]
 8003d94:	4b17      	ldr	r3, [pc, #92]	; (8003df4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 8003d96:	4413      	add	r3, r2
 8003d98:	009b      	lsls	r3, r3, #2
 8003d9a:	461a      	mov	r2, r3
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	4a15      	ldr	r2, [pc, #84]	; (8003df8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 8003da4:	671a      	str	r2, [r3, #112]	; 0x70
 8003da6:	e009      	b.n	8003dbc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8003da8:	68fa      	ldr	r2, [r7, #12]
 8003daa:	4b14      	ldr	r3, [pc, #80]	; (8003dfc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 8003dac:	4413      	add	r3, r2
 8003dae:	009b      	lsls	r3, r3, #2
 8003db0:	461a      	mov	r2, r3
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	4a11      	ldr	r2, [pc, #68]	; (8003e00 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 8003dba:	671a      	str	r2, [r3, #112]	; 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 8003dbc:	68fb      	ldr	r3, [r7, #12]
 8003dbe:	3b01      	subs	r3, #1
 8003dc0:	2201      	movs	r2, #1
 8003dc2:	409a      	lsls	r2, r3
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	675a      	str	r2, [r3, #116]	; 0x74
  }
}
 8003dc8:	bf00      	nop
 8003dca:	3714      	adds	r7, #20
 8003dcc:	46bd      	mov	sp, r7
 8003dce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dd2:	4770      	bx	lr
 8003dd4:	58025408 	.word	0x58025408
 8003dd8:	5802541c 	.word	0x5802541c
 8003ddc:	58025430 	.word	0x58025430
 8003de0:	58025444 	.word	0x58025444
 8003de4:	58025458 	.word	0x58025458
 8003de8:	5802546c 	.word	0x5802546c
 8003dec:	58025480 	.word	0x58025480
 8003df0:	58025494 	.word	0x58025494
 8003df4:	1600963f 	.word	0x1600963f
 8003df8:	58025940 	.word	0x58025940
 8003dfc:	1000823f 	.word	0x1000823f
 8003e00:	40020940 	.word	0x40020940

08003e04 <HAL_FDCAN_Init>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
 8003e04:	b580      	push	{r7, lr}
 8003e06:	b098      	sub	sp, #96	; 0x60
 8003e08:	af00      	add	r7, sp, #0
 8003e0a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  const uint32_t CvtEltSize[] = {0, 0, 0, 0, 0, 1, 2, 3, 4, 0, 5, 0, 0, 0, 6, 0, 0, 0, 7};
 8003e0c:	4a84      	ldr	r2, [pc, #528]	; (8004020 <HAL_FDCAN_Init+0x21c>)
 8003e0e:	f107 030c 	add.w	r3, r7, #12
 8003e12:	4611      	mov	r1, r2
 8003e14:	224c      	movs	r2, #76	; 0x4c
 8003e16:	4618      	mov	r0, r3
 8003e18:	f00d faba 	bl	8011390 <memcpy>

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	2b00      	cmp	r3, #0
 8003e20:	d101      	bne.n	8003e26 <HAL_FDCAN_Init+0x22>
  {
    return HAL_ERROR;
 8003e22:	2301      	movs	r3, #1
 8003e24:	e1ca      	b.n	80041bc <HAL_FDCAN_Init+0x3b8>
  }

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	4a7e      	ldr	r2, [pc, #504]	; (8004024 <HAL_FDCAN_Init+0x220>)
 8003e2c:	4293      	cmp	r3, r2
 8003e2e:	d106      	bne.n	8003e3e <HAL_FDCAN_Init+0x3a>
  {
    hfdcan->ttcan = (TTCAN_TypeDef *)((uint32_t)hfdcan->Instance + 0x100U);
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8003e38:	461a      	mov	r2, r3
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	605a      	str	r2, [r3, #4]

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8003e44:	b2db      	uxtb	r3, r3
 8003e46:	2b00      	cmp	r3, #0
 8003e48:	d106      	bne.n	8003e58 <HAL_FDCAN_Init+0x54>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	2200      	movs	r2, #0
 8003e4e:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99

    /* Init the low level hardware: CLOCK, NVIC */
    HAL_FDCAN_MspInit(hfdcan);
 8003e52:	6878      	ldr	r0, [r7, #4]
 8003e54:	f7fd f998 	bl	8001188 <HAL_FDCAN_MspInit>
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	699a      	ldr	r2, [r3, #24]
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	f022 0210 	bic.w	r2, r2, #16
 8003e66:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003e68:	f7fd fdaa 	bl	80019c0 <HAL_GetTick>
 8003e6c:	65f8      	str	r0, [r7, #92]	; 0x5c

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8003e6e:	e014      	b.n	8003e9a <HAL_FDCAN_Init+0x96>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8003e70:	f7fd fda6 	bl	80019c0 <HAL_GetTick>
 8003e74:	4602      	mov	r2, r0
 8003e76:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003e78:	1ad3      	subs	r3, r2, r3
 8003e7a:	2b0a      	cmp	r3, #10
 8003e7c:	d90d      	bls.n	8003e9a <HAL_FDCAN_Init+0x96>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003e84:	f043 0201 	orr.w	r2, r3, #1
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	2203      	movs	r2, #3
 8003e92:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

      return HAL_ERROR;
 8003e96:	2301      	movs	r3, #1
 8003e98:	e190      	b.n	80041bc <HAL_FDCAN_Init+0x3b8>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	699b      	ldr	r3, [r3, #24]
 8003ea0:	f003 0308 	and.w	r3, r3, #8
 8003ea4:	2b08      	cmp	r3, #8
 8003ea6:	d0e3      	beq.n	8003e70 <HAL_FDCAN_Init+0x6c>
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	699a      	ldr	r2, [r3, #24]
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	f042 0201 	orr.w	r2, r2, #1
 8003eb6:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003eb8:	f7fd fd82 	bl	80019c0 <HAL_GetTick>
 8003ebc:	65f8      	str	r0, [r7, #92]	; 0x5c

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8003ebe:	e014      	b.n	8003eea <HAL_FDCAN_Init+0xe6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8003ec0:	f7fd fd7e 	bl	80019c0 <HAL_GetTick>
 8003ec4:	4602      	mov	r2, r0
 8003ec6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003ec8:	1ad3      	subs	r3, r2, r3
 8003eca:	2b0a      	cmp	r3, #10
 8003ecc:	d90d      	bls.n	8003eea <HAL_FDCAN_Init+0xe6>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003ed4:	f043 0201 	orr.w	r2, r3, #1
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	2203      	movs	r2, #3
 8003ee2:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

      return HAL_ERROR;
 8003ee6:	2301      	movs	r3, #1
 8003ee8:	e168      	b.n	80041bc <HAL_FDCAN_Init+0x3b8>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	699b      	ldr	r3, [r3, #24]
 8003ef0:	f003 0301 	and.w	r3, r3, #1
 8003ef4:	2b00      	cmp	r3, #0
 8003ef6:	d0e3      	beq.n	8003ec0 <HAL_FDCAN_Init+0xbc>
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	699a      	ldr	r2, [r3, #24]
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	f042 0202 	orr.w	r2, r2, #2
 8003f06:	619a      	str	r2, [r3, #24]

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	7c1b      	ldrb	r3, [r3, #16]
 8003f0c:	2b01      	cmp	r3, #1
 8003f0e:	d108      	bne.n	8003f22 <HAL_FDCAN_Init+0x11e>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	699a      	ldr	r2, [r3, #24]
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003f1e:	619a      	str	r2, [r3, #24]
 8003f20:	e007      	b.n	8003f32 <HAL_FDCAN_Init+0x12e>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	699a      	ldr	r2, [r3, #24]
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003f30:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	7c5b      	ldrb	r3, [r3, #17]
 8003f36:	2b01      	cmp	r3, #1
 8003f38:	d108      	bne.n	8003f4c <HAL_FDCAN_Init+0x148>
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	699a      	ldr	r2, [r3, #24]
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003f48:	619a      	str	r2, [r3, #24]
 8003f4a:	e007      	b.n	8003f5c <HAL_FDCAN_Init+0x158>
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	699a      	ldr	r2, [r3, #24]
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8003f5a:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	7c9b      	ldrb	r3, [r3, #18]
 8003f60:	2b01      	cmp	r3, #1
 8003f62:	d108      	bne.n	8003f76 <HAL_FDCAN_Init+0x172>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	699a      	ldr	r2, [r3, #24]
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8003f72:	619a      	str	r2, [r3, #24]
 8003f74:	e007      	b.n	8003f86 <HAL_FDCAN_Init+0x182>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	699a      	ldr	r2, [r3, #24]
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8003f84:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	699b      	ldr	r3, [r3, #24]
 8003f8c:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	689a      	ldr	r2, [r3, #8]
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	430a      	orrs	r2, r1
 8003f9a:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	699a      	ldr	r2, [r3, #24]
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	f022 02a4 	bic.w	r2, r2, #164	; 0xa4
 8003faa:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	691a      	ldr	r2, [r3, #16]
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	f022 0210 	bic.w	r2, r2, #16
 8003fba:	611a      	str	r2, [r3, #16]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	68db      	ldr	r3, [r3, #12]
 8003fc0:	2b01      	cmp	r3, #1
 8003fc2:	d108      	bne.n	8003fd6 <HAL_FDCAN_Init+0x1d2>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	699a      	ldr	r2, [r3, #24]
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	f042 0204 	orr.w	r2, r2, #4
 8003fd2:	619a      	str	r2, [r3, #24]
 8003fd4:	e030      	b.n	8004038 <HAL_FDCAN_Init+0x234>
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	68db      	ldr	r3, [r3, #12]
 8003fda:	2b00      	cmp	r3, #0
 8003fdc:	d02c      	beq.n	8004038 <HAL_FDCAN_Init+0x234>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	68db      	ldr	r3, [r3, #12]
 8003fe2:	2b02      	cmp	r3, #2
 8003fe4:	d020      	beq.n	8004028 <HAL_FDCAN_Init+0x224>
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	699a      	ldr	r2, [r3, #24]
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003ff4:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	691a      	ldr	r2, [r3, #16]
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	f042 0210 	orr.w	r2, r2, #16
 8004004:	611a      	str	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	68db      	ldr	r3, [r3, #12]
 800400a:	2b03      	cmp	r3, #3
 800400c:	d114      	bne.n	8004038 <HAL_FDCAN_Init+0x234>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	699a      	ldr	r2, [r3, #24]
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	f042 0220 	orr.w	r2, r2, #32
 800401c:	619a      	str	r2, [r3, #24]
 800401e:	e00b      	b.n	8004038 <HAL_FDCAN_Init+0x234>
 8004020:	080125c4 	.word	0x080125c4
 8004024:	4000a000 	.word	0x4000a000
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	699a      	ldr	r2, [r3, #24]
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	f042 0220 	orr.w	r2, r2, #32
 8004036:	619a      	str	r2, [r3, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	699b      	ldr	r3, [r3, #24]
 800403c:	3b01      	subs	r3, #1
 800403e:	065a      	lsls	r2, r3, #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	69db      	ldr	r3, [r3, #28]
 8004044:	3b01      	subs	r3, #1
 8004046:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8004048:	431a      	orrs	r2, r3
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	6a1b      	ldr	r3, [r3, #32]
 800404e:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8004050:	ea42 0103 	orr.w	r1, r2, r3
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	695b      	ldr	r3, [r3, #20]
 8004058:	3b01      	subs	r3, #1
 800405a:	041a      	lsls	r2, r3, #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	681b      	ldr	r3, [r3, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8004060:	430a      	orrs	r2, r1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8004062:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	689b      	ldr	r3, [r3, #8]
 8004068:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800406c:	d115      	bne.n	800409a <HAL_FDCAN_Init+0x296>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004072:	1e5a      	subs	r2, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)    | \
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004078:	3b01      	subs	r3, #1
 800407a:	021b      	lsls	r3, r3, #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 800407c:	431a      	orrs	r2, r3
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)    | \
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004082:	3b01      	subs	r3, #1
 8004084:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)    | \
 8004086:	ea42 0103 	orr.w	r1, r2, r3
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800408e:	3b01      	subs	r3, #1
 8004090:	041a      	lsls	r2, r3, #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	681b      	ldr	r3, [r3, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)    | \
 8004096:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 8004098:	60da      	str	r2, [r3, #12]
  }

  if (hfdcan->Init.TxFifoQueueElmtsNbr > 0U)
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800409e:	2b00      	cmp	r3, #0
 80040a0:	d00a      	beq.n	80040b8 <HAL_FDCAN_Init+0x2b4>
  {
    /* Select between Tx FIFO and Tx Queue operation modes */
    SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	f8d3 10c0 	ldr.w	r1, [r3, #192]	; 0xc0
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	430a      	orrs	r2, r1
 80040b4:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
  }

  /* Configure Tx element size */
  if ((hfdcan->Init.TxBuffersNbr + hfdcan->Init.TxFifoQueueElmtsNbr) > 0U)
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80040c0:	4413      	add	r3, r2
 80040c2:	2b00      	cmp	r3, #0
 80040c4:	d012      	beq.n	80040ec <HAL_FDCAN_Init+0x2e8>
  {
    MODIFY_REG(hfdcan->Instance->TXESC, FDCAN_TXESC_TBDS, CvtEltSize[hfdcan->Init.TxElmtSize]);
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 80040ce:	f023 0107 	bic.w	r1, r3, #7
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80040d6:	009b      	lsls	r3, r3, #2
 80040d8:	f107 0260 	add.w	r2, r7, #96	; 0x60
 80040dc:	4413      	add	r3, r2
 80040de:	f853 2c54 	ldr.w	r2, [r3, #-84]
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	430a      	orrs	r2, r1
 80040e8:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  /* Configure Rx FIFO 0 element size */
  if (hfdcan->Init.RxFifo0ElmtsNbr > 0U)
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040f0:	2b00      	cmp	r3, #0
 80040f2:	d012      	beq.n	800411a <HAL_FDCAN_Init+0x316>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_F0DS, (CvtEltSize[hfdcan->Init.RxFifo0ElmtSize] << FDCAN_RXESC_F0DS_Pos));
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 80040fc:	f023 0107 	bic.w	r1, r3, #7
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004104:	009b      	lsls	r3, r3, #2
 8004106:	f107 0260 	add.w	r2, r7, #96	; 0x60
 800410a:	4413      	add	r3, r2
 800410c:	f853 2c54 	ldr.w	r2, [r3, #-84]
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	430a      	orrs	r2, r1
 8004116:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  }

  /* Configure Rx FIFO 1 element size */
  if (hfdcan->Init.RxFifo1ElmtsNbr > 0U)
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800411e:	2b00      	cmp	r3, #0
 8004120:	d013      	beq.n	800414a <HAL_FDCAN_Init+0x346>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_F1DS, (CvtEltSize[hfdcan->Init.RxFifo1ElmtSize] << FDCAN_RXESC_F1DS_Pos));
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 800412a:	f023 0170 	bic.w	r1, r3, #112	; 0x70
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004132:	009b      	lsls	r3, r3, #2
 8004134:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8004138:	4413      	add	r3, r2
 800413a:	f853 3c54 	ldr.w	r3, [r3, #-84]
 800413e:	011a      	lsls	r2, r3, #4
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	430a      	orrs	r2, r1
 8004146:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  }

  /* Configure Rx buffer element size */
  if (hfdcan->Init.RxBuffersNbr > 0U)
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800414e:	2b00      	cmp	r3, #0
 8004150:	d013      	beq.n	800417a <HAL_FDCAN_Init+0x376>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_RBDS, (CvtEltSize[hfdcan->Init.RxBufferSize] << FDCAN_RXESC_RBDS_Pos));
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 800415a:	f423 61e0 	bic.w	r1, r3, #1792	; 0x700
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004162:	009b      	lsls	r3, r3, #2
 8004164:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8004168:	4413      	add	r3, r2
 800416a:	f853 3c54 	ldr.w	r3, [r3, #-84]
 800416e:	021a      	lsls	r2, r3, #8
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	430a      	orrs	r2, r1
 8004176:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  }

  /* By default operation mode is set to Event-driven communication.
     If Time-triggered communication is needed, user should call the
     HAL_FDCAN_TT_ConfigOperation function just after the HAL_FDCAN_Init */
  if (hfdcan->Instance == FDCAN1)
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	4a11      	ldr	r2, [pc, #68]	; (80041c4 <HAL_FDCAN_Init+0x3c0>)
 8004180:	4293      	cmp	r3, r2
 8004182:	d107      	bne.n	8004194 <HAL_FDCAN_Init+0x390>
  {
    CLEAR_BIT(hfdcan->ttcan->TTOCF, FDCAN_TTOCF_OM);
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	685b      	ldr	r3, [r3, #4]
 8004188:	689a      	ldr	r2, [r3, #8]
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	685b      	ldr	r3, [r3, #4]
 800418e:	f022 0203 	bic.w	r2, r2, #3
 8004192:	609a      	str	r2, [r3, #8]
  }

  /* Initialize the Latest Tx FIFO/Queue request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	2200      	movs	r2, #0
 8004198:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

  /* Initialize the error code */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	2200      	movs	r2, #0
 80041a0:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	2201      	movs	r2, #1
 80041a8:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

  /* Calculate each RAM block address */
  status = FDCAN_CalcultateRamBlockAddresses(hfdcan);
 80041ac:	6878      	ldr	r0, [r7, #4]
 80041ae:	f000 f80b 	bl	80041c8 <FDCAN_CalcultateRamBlockAddresses>
 80041b2:	4603      	mov	r3, r0
 80041b4:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b

  /* Return function status */
  return status;
 80041b8:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
}
 80041bc:	4618      	mov	r0, r3
 80041be:	3760      	adds	r7, #96	; 0x60
 80041c0:	46bd      	mov	sp, r7
 80041c2:	bd80      	pop	{r7, pc}
 80041c4:	4000a000 	.word	0x4000a000

080041c8 <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
 */
static HAL_StatusTypeDef FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 80041c8:	b480      	push	{r7}
 80041ca:	b085      	sub	sp, #20
 80041cc:	af00      	add	r7, sp, #0
 80041ce:	6078      	str	r0, [r7, #4]
  uint32_t RAMcounter;
  uint32_t StartAddress;

  StartAddress = hfdcan->Init.MessageRAMOffset;
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80041d4:	60bb      	str	r3, [r7, #8]

  /* Standard filter list start address */
  MODIFY_REG(hfdcan->Instance->SIDFC, FDCAN_SIDFC_FLSSA, (StartAddress << FDCAN_SIDFC_FLSSA_Pos));
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 80041de:	4ba7      	ldr	r3, [pc, #668]	; (800447c <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 80041e0:	4013      	ands	r3, r2
 80041e2:	68ba      	ldr	r2, [r7, #8]
 80041e4:	0091      	lsls	r1, r2, #2
 80041e6:	687a      	ldr	r2, [r7, #4]
 80041e8:	6812      	ldr	r2, [r2, #0]
 80041ea:	430b      	orrs	r3, r1
 80041ec:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->SIDFC, FDCAN_SIDFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_SIDFC_LSS_Pos));
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80041f8:	f423 017f 	bic.w	r1, r3, #16711680	; 0xff0000
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004200:	041a      	lsls	r2, r3, #16
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	430a      	orrs	r2, r1
 8004208:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Extended filter list start address */
  StartAddress += hfdcan->Init.StdFiltersNbr;
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004210:	68ba      	ldr	r2, [r7, #8]
 8004212:	4413      	add	r3, r2
 8004214:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->XIDFC, FDCAN_XIDFC_FLESA, (StartAddress << FDCAN_XIDFC_FLESA_Pos));
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 800421e:	4b97      	ldr	r3, [pc, #604]	; (800447c <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8004220:	4013      	ands	r3, r2
 8004222:	68ba      	ldr	r2, [r7, #8]
 8004224:	0091      	lsls	r1, r2, #2
 8004226:	687a      	ldr	r2, [r7, #4]
 8004228:	6812      	ldr	r2, [r2, #0]
 800422a:	430b      	orrs	r3, r1
 800422c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->XIDFC, FDCAN_XIDFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_XIDFC_LSE_Pos));
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004238:	f423 01fe 	bic.w	r1, r3, #8323072	; 0x7f0000
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004240:	041a      	lsls	r2, r3, #16
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	430a      	orrs	r2, r1
 8004248:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Rx FIFO 0 start address */
  StartAddress += (hfdcan->Init.ExtFiltersNbr * 2U);
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004250:	005b      	lsls	r3, r3, #1
 8004252:	68ba      	ldr	r2, [r7, #8]
 8004254:	4413      	add	r3, r2
 8004256:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXF0C, FDCAN_RXF0C_F0SA, (StartAddress << FDCAN_RXF0C_F0SA_Pos));
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 8004260:	4b86      	ldr	r3, [pc, #536]	; (800447c <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8004262:	4013      	ands	r3, r2
 8004264:	68ba      	ldr	r2, [r7, #8]
 8004266:	0091      	lsls	r1, r2, #2
 8004268:	687a      	ldr	r2, [r7, #4]
 800426a:	6812      	ldr	r2, [r2, #0]
 800426c:	430b      	orrs	r3, r1
 800426e:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0

  /* Rx FIFO 0 elements number */
  MODIFY_REG(hfdcan->Instance->RXF0C, FDCAN_RXF0C_F0S, (hfdcan->Init.RxFifo0ElmtsNbr << FDCAN_RXF0C_F0S_Pos));
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800427a:	f423 01fe 	bic.w	r1, r3, #8323072	; 0x7f0000
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004282:	041a      	lsls	r2, r3, #16
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	430a      	orrs	r2, r1
 800428a:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0

  /* Rx FIFO 1 start address */
  StartAddress += (hfdcan->Init.RxFifo0ElmtsNbr * hfdcan->Init.RxFifo0ElmtSize);
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004292:	687a      	ldr	r2, [r7, #4]
 8004294:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8004296:	fb02 f303 	mul.w	r3, r2, r3
 800429a:	68ba      	ldr	r2, [r7, #8]
 800429c:	4413      	add	r3, r2
 800429e:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXF1C, FDCAN_RXF1C_F1SA, (StartAddress << FDCAN_RXF1C_F1SA_Pos));
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 80042a8:	4b74      	ldr	r3, [pc, #464]	; (800447c <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 80042aa:	4013      	ands	r3, r2
 80042ac:	68ba      	ldr	r2, [r7, #8]
 80042ae:	0091      	lsls	r1, r2, #2
 80042b0:	687a      	ldr	r2, [r7, #4]
 80042b2:	6812      	ldr	r2, [r2, #0]
 80042b4:	430b      	orrs	r3, r1
 80042b6:	f8c2 30b0 	str.w	r3, [r2, #176]	; 0xb0

  /* Rx FIFO 1 elements number */
  MODIFY_REG(hfdcan->Instance->RXF1C, FDCAN_RXF1C_F1S, (hfdcan->Init.RxFifo1ElmtsNbr << FDCAN_RXF1C_F1S_Pos));
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80042c2:	f423 01fe 	bic.w	r1, r3, #8323072	; 0x7f0000
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80042ca:	041a      	lsls	r2, r3, #16
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	430a      	orrs	r2, r1
 80042d2:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0

  /* Rx buffer list start address */
  StartAddress += (hfdcan->Init.RxFifo1ElmtsNbr * hfdcan->Init.RxFifo1ElmtSize);
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80042da:	687a      	ldr	r2, [r7, #4]
 80042dc:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 80042de:	fb02 f303 	mul.w	r3, r2, r3
 80042e2:	68ba      	ldr	r2, [r7, #8]
 80042e4:	4413      	add	r3, r2
 80042e6:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXBC, FDCAN_RXBC_RBSA, (StartAddress << FDCAN_RXBC_RBSA_Pos));
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	f8d3 20ac 	ldr.w	r2, [r3, #172]	; 0xac
 80042f0:	4b62      	ldr	r3, [pc, #392]	; (800447c <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 80042f2:	4013      	ands	r3, r2
 80042f4:	68ba      	ldr	r2, [r7, #8]
 80042f6:	0091      	lsls	r1, r2, #2
 80042f8:	687a      	ldr	r2, [r7, #4]
 80042fa:	6812      	ldr	r2, [r2, #0]
 80042fc:	430b      	orrs	r3, r1
 80042fe:	f8c2 30ac 	str.w	r3, [r2, #172]	; 0xac

  /* Tx event FIFO start address */
  StartAddress += (hfdcan->Init.RxBuffersNbr * hfdcan->Init.RxBufferSize);
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004306:	687a      	ldr	r2, [r7, #4]
 8004308:	6d52      	ldr	r2, [r2, #84]	; 0x54
 800430a:	fb02 f303 	mul.w	r3, r2, r3
 800430e:	68ba      	ldr	r2, [r7, #8]
 8004310:	4413      	add	r3, r2
 8004312:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->TXEFC, FDCAN_TXEFC_EFSA, (StartAddress << FDCAN_TXEFC_EFSA_Pos));
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	f8d3 20f0 	ldr.w	r2, [r3, #240]	; 0xf0
 800431c:	4b57      	ldr	r3, [pc, #348]	; (800447c <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 800431e:	4013      	ands	r3, r2
 8004320:	68ba      	ldr	r2, [r7, #8]
 8004322:	0091      	lsls	r1, r2, #2
 8004324:	687a      	ldr	r2, [r7, #4]
 8004326:	6812      	ldr	r2, [r2, #0]
 8004328:	430b      	orrs	r3, r1
 800432a:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

  /* Tx event FIFO elements number */
  MODIFY_REG(hfdcan->Instance->TXEFC, FDCAN_TXEFC_EFS, (hfdcan->Init.TxEventsNbr << FDCAN_TXEFC_EFS_Pos));
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8004336:	f423 117c 	bic.w	r1, r3, #4128768	; 0x3f0000
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800433e:	041a      	lsls	r2, r3, #16
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	430a      	orrs	r2, r1
 8004346:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0

  /* Tx buffer list start address */
  StartAddress += (hfdcan->Init.TxEventsNbr * 2U);
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800434e:	005b      	lsls	r3, r3, #1
 8004350:	68ba      	ldr	r2, [r7, #8]
 8004352:	4413      	add	r3, r2
 8004354:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_TBSA, (StartAddress << FDCAN_TXBC_TBSA_Pos));
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 800435e:	4b47      	ldr	r3, [pc, #284]	; (800447c <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8004360:	4013      	ands	r3, r2
 8004362:	68ba      	ldr	r2, [r7, #8]
 8004364:	0091      	lsls	r1, r2, #2
 8004366:	687a      	ldr	r2, [r7, #4]
 8004368:	6812      	ldr	r2, [r2, #0]
 800436a:	430b      	orrs	r3, r1
 800436c:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0

  /* Dedicated Tx buffers number */
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_NDTB, (hfdcan->Init.TxBuffersNbr << FDCAN_TXBC_NDTB_Pos));
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8004378:	f423 117c 	bic.w	r1, r3, #4128768	; 0x3f0000
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004380:	041a      	lsls	r2, r3, #16
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	430a      	orrs	r2, r1
 8004388:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0

  /* Tx FIFO/queue elements number */
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_TFQS, (hfdcan->Init.TxFifoQueueElmtsNbr << FDCAN_TXBC_TFQS_Pos));
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8004394:	f023 517c 	bic.w	r1, r3, #1056964608	; 0x3f000000
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800439c:	061a      	lsls	r2, r3, #24
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	430a      	orrs	r2, r1
 80043a4:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0

  hfdcan->msgRam.StandardFilterSA = SRAMCAN_BASE + (hfdcan->Init.MessageRAMOffset * 4U);
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80043ac:	4b34      	ldr	r3, [pc, #208]	; (8004480 <FDCAN_CalcultateRamBlockAddresses+0x2b8>)
 80043ae:	4413      	add	r3, r2
 80043b0:	009a      	lsls	r2, r3, #2
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	66da      	str	r2, [r3, #108]	; 0x6c
  hfdcan->msgRam.ExtendedFilterSA = hfdcan->msgRam.StandardFilterSA + (hfdcan->Init.StdFiltersNbr * 4U);
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80043be:	009b      	lsls	r3, r3, #2
 80043c0:	441a      	add	r2, r3
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	671a      	str	r2, [r3, #112]	; 0x70
  hfdcan->msgRam.RxFIFO0SA = hfdcan->msgRam.ExtendedFilterSA + (hfdcan->Init.ExtFiltersNbr * 2U * 4U);
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80043ce:	00db      	lsls	r3, r3, #3
 80043d0:	441a      	add	r2, r3
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	675a      	str	r2, [r3, #116]	; 0x74
  hfdcan->msgRam.RxFIFO1SA = hfdcan->msgRam.RxFIFO0SA + (hfdcan->Init.RxFifo0ElmtsNbr * hfdcan->Init.RxFifo0ElmtSize * 4U);
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043de:	6879      	ldr	r1, [r7, #4]
 80043e0:	6c49      	ldr	r1, [r1, #68]	; 0x44
 80043e2:	fb01 f303 	mul.w	r3, r1, r3
 80043e6:	009b      	lsls	r3, r3, #2
 80043e8:	441a      	add	r2, r3
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	679a      	str	r2, [r3, #120]	; 0x78
  hfdcan->msgRam.RxBufferSA = hfdcan->msgRam.RxFIFO1SA + (hfdcan->Init.RxFifo1ElmtsNbr * hfdcan->Init.RxFifo1ElmtSize * 4U);
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	6f9a      	ldr	r2, [r3, #120]	; 0x78
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80043f6:	6879      	ldr	r1, [r7, #4]
 80043f8:	6cc9      	ldr	r1, [r1, #76]	; 0x4c
 80043fa:	fb01 f303 	mul.w	r3, r1, r3
 80043fe:	009b      	lsls	r3, r3, #2
 8004400:	441a      	add	r2, r3
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	67da      	str	r2, [r3, #124]	; 0x7c
  hfdcan->msgRam.TxEventFIFOSA = hfdcan->msgRam.RxBufferSA + (hfdcan->Init.RxBuffersNbr * hfdcan->Init.RxBufferSize * 4U);
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800440e:	6879      	ldr	r1, [r7, #4]
 8004410:	6d49      	ldr	r1, [r1, #84]	; 0x54
 8004412:	fb01 f303 	mul.w	r3, r1, r3
 8004416:	009b      	lsls	r3, r3, #2
 8004418:	441a      	add	r2, r3
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  hfdcan->msgRam.TxBufferSA = hfdcan->msgRam.TxEventFIFOSA + (hfdcan->Init.TxEventsNbr * 2U * 4U);
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800442a:	00db      	lsls	r3, r3, #3
 800442c:	441a      	add	r2, r3
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hfdcan->msgRam.TxFIFOQSA = hfdcan->msgRam.TxBufferSA + (hfdcan->Init.TxBuffersNbr * hfdcan->Init.TxElmtSize * 4U);
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800443e:	6879      	ldr	r1, [r7, #4]
 8004440:	6e89      	ldr	r1, [r1, #104]	; 0x68
 8004442:	fb01 f303 	mul.w	r3, r1, r3
 8004446:	009b      	lsls	r3, r3, #2
 8004448:	441a      	add	r2, r3
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  hfdcan->msgRam.EndAddress = hfdcan->msgRam.TxFIFOQSA + (hfdcan->Init.TxFifoQueueElmtsNbr * hfdcan->Init.TxElmtSize * 4U);
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800445a:	6879      	ldr	r1, [r7, #4]
 800445c:	6e89      	ldr	r1, [r1, #104]	; 0x68
 800445e:	fb01 f303 	mul.w	r3, r1, r3
 8004462:	009b      	lsls	r3, r3, #2
 8004464:	441a      	add	r2, r3
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  if (hfdcan->msgRam.EndAddress > FDCAN_MESSAGE_RAM_END_ADDRESS) /* Last address of the Message RAM */
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004472:	4a04      	ldr	r2, [pc, #16]	; (8004484 <FDCAN_CalcultateRamBlockAddresses+0x2bc>)
 8004474:	4293      	cmp	r3, r2
 8004476:	d915      	bls.n	80044a4 <FDCAN_CalcultateRamBlockAddresses+0x2dc>
 8004478:	e006      	b.n	8004488 <FDCAN_CalcultateRamBlockAddresses+0x2c0>
 800447a:	bf00      	nop
 800447c:	ffff0003 	.word	0xffff0003
 8004480:	10002b00 	.word	0x10002b00
 8004484:	4000d3fc 	.word	0x4000d3fc
  {
    /* Update error code.
       Message RAM overflow */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800448e:	f043 0220 	orr.w	r2, r3, #32
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    /* Change FDCAN state */
    hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	2203      	movs	r2, #3
 800449c:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

    return HAL_ERROR;
 80044a0:	2301      	movs	r3, #1
 80044a2:	e010      	b.n	80044c6 <FDCAN_CalcultateRamBlockAddresses+0x2fe>
  }
  else
  {
    /* Flush the allocated Message RAM area */
    for (RAMcounter = hfdcan->msgRam.StandardFilterSA; RAMcounter < hfdcan->msgRam.EndAddress; RAMcounter += 4U)
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80044a8:	60fb      	str	r3, [r7, #12]
 80044aa:	e005      	b.n	80044b8 <FDCAN_CalcultateRamBlockAddresses+0x2f0>
    {
      *(uint32_t *)(RAMcounter) = 0x00000000;
 80044ac:	68fb      	ldr	r3, [r7, #12]
 80044ae:	2200      	movs	r2, #0
 80044b0:	601a      	str	r2, [r3, #0]
    for (RAMcounter = hfdcan->msgRam.StandardFilterSA; RAMcounter < hfdcan->msgRam.EndAddress; RAMcounter += 4U)
 80044b2:	68fb      	ldr	r3, [r7, #12]
 80044b4:	3304      	adds	r3, #4
 80044b6:	60fb      	str	r3, [r7, #12]
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80044be:	68fa      	ldr	r2, [r7, #12]
 80044c0:	429a      	cmp	r2, r3
 80044c2:	d3f3      	bcc.n	80044ac <FDCAN_CalcultateRamBlockAddresses+0x2e4>
    }
  }

  /* Return function status */
  return HAL_OK;
 80044c4:	2300      	movs	r3, #0
}
 80044c6:	4618      	mov	r0, r3
 80044c8:	3714      	adds	r7, #20
 80044ca:	46bd      	mov	sp, r7
 80044cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044d0:	4770      	bx	lr
 80044d2:	bf00      	nop

080044d4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80044d4:	b480      	push	{r7}
 80044d6:	b089      	sub	sp, #36	; 0x24
 80044d8:	af00      	add	r7, sp, #0
 80044da:	6078      	str	r0, [r7, #4]
 80044dc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80044de:	2300      	movs	r3, #0
 80044e0:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 80044e2:	4b89      	ldr	r3, [pc, #548]	; (8004708 <HAL_GPIO_Init+0x234>)
 80044e4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80044e6:	e194      	b.n	8004812 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80044e8:	683b      	ldr	r3, [r7, #0]
 80044ea:	681a      	ldr	r2, [r3, #0]
 80044ec:	2101      	movs	r1, #1
 80044ee:	69fb      	ldr	r3, [r7, #28]
 80044f0:	fa01 f303 	lsl.w	r3, r1, r3
 80044f4:	4013      	ands	r3, r2
 80044f6:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 80044f8:	693b      	ldr	r3, [r7, #16]
 80044fa:	2b00      	cmp	r3, #0
 80044fc:	f000 8186 	beq.w	800480c <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8004500:	683b      	ldr	r3, [r7, #0]
 8004502:	685b      	ldr	r3, [r3, #4]
 8004504:	2b01      	cmp	r3, #1
 8004506:	d00b      	beq.n	8004520 <HAL_GPIO_Init+0x4c>
 8004508:	683b      	ldr	r3, [r7, #0]
 800450a:	685b      	ldr	r3, [r3, #4]
 800450c:	2b02      	cmp	r3, #2
 800450e:	d007      	beq.n	8004520 <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004510:	683b      	ldr	r3, [r7, #0]
 8004512:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8004514:	2b11      	cmp	r3, #17
 8004516:	d003      	beq.n	8004520 <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004518:	683b      	ldr	r3, [r7, #0]
 800451a:	685b      	ldr	r3, [r3, #4]
 800451c:	2b12      	cmp	r3, #18
 800451e:	d130      	bne.n	8004582 <HAL_GPIO_Init+0xae>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	689b      	ldr	r3, [r3, #8]
 8004524:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8004526:	69fb      	ldr	r3, [r7, #28]
 8004528:	005b      	lsls	r3, r3, #1
 800452a:	2203      	movs	r2, #3
 800452c:	fa02 f303 	lsl.w	r3, r2, r3
 8004530:	43db      	mvns	r3, r3
 8004532:	69ba      	ldr	r2, [r7, #24]
 8004534:	4013      	ands	r3, r2
 8004536:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004538:	683b      	ldr	r3, [r7, #0]
 800453a:	68da      	ldr	r2, [r3, #12]
 800453c:	69fb      	ldr	r3, [r7, #28]
 800453e:	005b      	lsls	r3, r3, #1
 8004540:	fa02 f303 	lsl.w	r3, r2, r3
 8004544:	69ba      	ldr	r2, [r7, #24]
 8004546:	4313      	orrs	r3, r2
 8004548:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	69ba      	ldr	r2, [r7, #24]
 800454e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	685b      	ldr	r3, [r3, #4]
 8004554:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8004556:	2201      	movs	r2, #1
 8004558:	69fb      	ldr	r3, [r7, #28]
 800455a:	fa02 f303 	lsl.w	r3, r2, r3
 800455e:	43db      	mvns	r3, r3
 8004560:	69ba      	ldr	r2, [r7, #24]
 8004562:	4013      	ands	r3, r2
 8004564:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8004566:	683b      	ldr	r3, [r7, #0]
 8004568:	685b      	ldr	r3, [r3, #4]
 800456a:	091b      	lsrs	r3, r3, #4
 800456c:	f003 0201 	and.w	r2, r3, #1
 8004570:	69fb      	ldr	r3, [r7, #28]
 8004572:	fa02 f303 	lsl.w	r3, r2, r3
 8004576:	69ba      	ldr	r2, [r7, #24]
 8004578:	4313      	orrs	r3, r2
 800457a:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	69ba      	ldr	r2, [r7, #24]
 8004580:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	68db      	ldr	r3, [r3, #12]
 8004586:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8004588:	69fb      	ldr	r3, [r7, #28]
 800458a:	005b      	lsls	r3, r3, #1
 800458c:	2203      	movs	r2, #3
 800458e:	fa02 f303 	lsl.w	r3, r2, r3
 8004592:	43db      	mvns	r3, r3
 8004594:	69ba      	ldr	r2, [r7, #24]
 8004596:	4013      	ands	r3, r2
 8004598:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800459a:	683b      	ldr	r3, [r7, #0]
 800459c:	689a      	ldr	r2, [r3, #8]
 800459e:	69fb      	ldr	r3, [r7, #28]
 80045a0:	005b      	lsls	r3, r3, #1
 80045a2:	fa02 f303 	lsl.w	r3, r2, r3
 80045a6:	69ba      	ldr	r2, [r7, #24]
 80045a8:	4313      	orrs	r3, r2
 80045aa:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	69ba      	ldr	r2, [r7, #24]
 80045b0:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80045b2:	683b      	ldr	r3, [r7, #0]
 80045b4:	685b      	ldr	r3, [r3, #4]
 80045b6:	2b02      	cmp	r3, #2
 80045b8:	d003      	beq.n	80045c2 <HAL_GPIO_Init+0xee>
 80045ba:	683b      	ldr	r3, [r7, #0]
 80045bc:	685b      	ldr	r3, [r3, #4]
 80045be:	2b12      	cmp	r3, #18
 80045c0:	d123      	bne.n	800460a <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80045c2:	69fb      	ldr	r3, [r7, #28]
 80045c4:	08da      	lsrs	r2, r3, #3
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	3208      	adds	r2, #8
 80045ca:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80045ce:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80045d0:	69fb      	ldr	r3, [r7, #28]
 80045d2:	f003 0307 	and.w	r3, r3, #7
 80045d6:	009b      	lsls	r3, r3, #2
 80045d8:	220f      	movs	r2, #15
 80045da:	fa02 f303 	lsl.w	r3, r2, r3
 80045de:	43db      	mvns	r3, r3
 80045e0:	69ba      	ldr	r2, [r7, #24]
 80045e2:	4013      	ands	r3, r2
 80045e4:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80045e6:	683b      	ldr	r3, [r7, #0]
 80045e8:	691a      	ldr	r2, [r3, #16]
 80045ea:	69fb      	ldr	r3, [r7, #28]
 80045ec:	f003 0307 	and.w	r3, r3, #7
 80045f0:	009b      	lsls	r3, r3, #2
 80045f2:	fa02 f303 	lsl.w	r3, r2, r3
 80045f6:	69ba      	ldr	r2, [r7, #24]
 80045f8:	4313      	orrs	r3, r2
 80045fa:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80045fc:	69fb      	ldr	r3, [r7, #28]
 80045fe:	08da      	lsrs	r2, r3, #3
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	3208      	adds	r2, #8
 8004604:	69b9      	ldr	r1, [r7, #24]
 8004606:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8004610:	69fb      	ldr	r3, [r7, #28]
 8004612:	005b      	lsls	r3, r3, #1
 8004614:	2203      	movs	r2, #3
 8004616:	fa02 f303 	lsl.w	r3, r2, r3
 800461a:	43db      	mvns	r3, r3
 800461c:	69ba      	ldr	r2, [r7, #24]
 800461e:	4013      	ands	r3, r2
 8004620:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004622:	683b      	ldr	r3, [r7, #0]
 8004624:	685b      	ldr	r3, [r3, #4]
 8004626:	f003 0203 	and.w	r2, r3, #3
 800462a:	69fb      	ldr	r3, [r7, #28]
 800462c:	005b      	lsls	r3, r3, #1
 800462e:	fa02 f303 	lsl.w	r3, r2, r3
 8004632:	69ba      	ldr	r2, [r7, #24]
 8004634:	4313      	orrs	r3, r2
 8004636:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	69ba      	ldr	r2, [r7, #24]
 800463c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800463e:	683b      	ldr	r3, [r7, #0]
 8004640:	685b      	ldr	r3, [r3, #4]
 8004642:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004646:	2b00      	cmp	r3, #0
 8004648:	f000 80e0 	beq.w	800480c <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800464c:	4b2f      	ldr	r3, [pc, #188]	; (800470c <HAL_GPIO_Init+0x238>)
 800464e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8004652:	4a2e      	ldr	r2, [pc, #184]	; (800470c <HAL_GPIO_Init+0x238>)
 8004654:	f043 0302 	orr.w	r3, r3, #2
 8004658:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 800465c:	4b2b      	ldr	r3, [pc, #172]	; (800470c <HAL_GPIO_Init+0x238>)
 800465e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8004662:	f003 0302 	and.w	r3, r3, #2
 8004666:	60fb      	str	r3, [r7, #12]
 8004668:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800466a:	4a29      	ldr	r2, [pc, #164]	; (8004710 <HAL_GPIO_Init+0x23c>)
 800466c:	69fb      	ldr	r3, [r7, #28]
 800466e:	089b      	lsrs	r3, r3, #2
 8004670:	3302      	adds	r3, #2
 8004672:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004676:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8004678:	69fb      	ldr	r3, [r7, #28]
 800467a:	f003 0303 	and.w	r3, r3, #3
 800467e:	009b      	lsls	r3, r3, #2
 8004680:	220f      	movs	r2, #15
 8004682:	fa02 f303 	lsl.w	r3, r2, r3
 8004686:	43db      	mvns	r3, r3
 8004688:	69ba      	ldr	r2, [r7, #24]
 800468a:	4013      	ands	r3, r2
 800468c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	4a20      	ldr	r2, [pc, #128]	; (8004714 <HAL_GPIO_Init+0x240>)
 8004692:	4293      	cmp	r3, r2
 8004694:	d052      	beq.n	800473c <HAL_GPIO_Init+0x268>
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	4a1f      	ldr	r2, [pc, #124]	; (8004718 <HAL_GPIO_Init+0x244>)
 800469a:	4293      	cmp	r3, r2
 800469c:	d031      	beq.n	8004702 <HAL_GPIO_Init+0x22e>
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	4a1e      	ldr	r2, [pc, #120]	; (800471c <HAL_GPIO_Init+0x248>)
 80046a2:	4293      	cmp	r3, r2
 80046a4:	d02b      	beq.n	80046fe <HAL_GPIO_Init+0x22a>
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	4a1d      	ldr	r2, [pc, #116]	; (8004720 <HAL_GPIO_Init+0x24c>)
 80046aa:	4293      	cmp	r3, r2
 80046ac:	d025      	beq.n	80046fa <HAL_GPIO_Init+0x226>
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	4a1c      	ldr	r2, [pc, #112]	; (8004724 <HAL_GPIO_Init+0x250>)
 80046b2:	4293      	cmp	r3, r2
 80046b4:	d01f      	beq.n	80046f6 <HAL_GPIO_Init+0x222>
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	4a1b      	ldr	r2, [pc, #108]	; (8004728 <HAL_GPIO_Init+0x254>)
 80046ba:	4293      	cmp	r3, r2
 80046bc:	d019      	beq.n	80046f2 <HAL_GPIO_Init+0x21e>
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	4a1a      	ldr	r2, [pc, #104]	; (800472c <HAL_GPIO_Init+0x258>)
 80046c2:	4293      	cmp	r3, r2
 80046c4:	d013      	beq.n	80046ee <HAL_GPIO_Init+0x21a>
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	4a19      	ldr	r2, [pc, #100]	; (8004730 <HAL_GPIO_Init+0x25c>)
 80046ca:	4293      	cmp	r3, r2
 80046cc:	d00d      	beq.n	80046ea <HAL_GPIO_Init+0x216>
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	4a18      	ldr	r2, [pc, #96]	; (8004734 <HAL_GPIO_Init+0x260>)
 80046d2:	4293      	cmp	r3, r2
 80046d4:	d007      	beq.n	80046e6 <HAL_GPIO_Init+0x212>
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	4a17      	ldr	r2, [pc, #92]	; (8004738 <HAL_GPIO_Init+0x264>)
 80046da:	4293      	cmp	r3, r2
 80046dc:	d101      	bne.n	80046e2 <HAL_GPIO_Init+0x20e>
 80046de:	2309      	movs	r3, #9
 80046e0:	e02d      	b.n	800473e <HAL_GPIO_Init+0x26a>
 80046e2:	230a      	movs	r3, #10
 80046e4:	e02b      	b.n	800473e <HAL_GPIO_Init+0x26a>
 80046e6:	2308      	movs	r3, #8
 80046e8:	e029      	b.n	800473e <HAL_GPIO_Init+0x26a>
 80046ea:	2307      	movs	r3, #7
 80046ec:	e027      	b.n	800473e <HAL_GPIO_Init+0x26a>
 80046ee:	2306      	movs	r3, #6
 80046f0:	e025      	b.n	800473e <HAL_GPIO_Init+0x26a>
 80046f2:	2305      	movs	r3, #5
 80046f4:	e023      	b.n	800473e <HAL_GPIO_Init+0x26a>
 80046f6:	2304      	movs	r3, #4
 80046f8:	e021      	b.n	800473e <HAL_GPIO_Init+0x26a>
 80046fa:	2303      	movs	r3, #3
 80046fc:	e01f      	b.n	800473e <HAL_GPIO_Init+0x26a>
 80046fe:	2302      	movs	r3, #2
 8004700:	e01d      	b.n	800473e <HAL_GPIO_Init+0x26a>
 8004702:	2301      	movs	r3, #1
 8004704:	e01b      	b.n	800473e <HAL_GPIO_Init+0x26a>
 8004706:	bf00      	nop
 8004708:	58000080 	.word	0x58000080
 800470c:	58024400 	.word	0x58024400
 8004710:	58000400 	.word	0x58000400
 8004714:	58020000 	.word	0x58020000
 8004718:	58020400 	.word	0x58020400
 800471c:	58020800 	.word	0x58020800
 8004720:	58020c00 	.word	0x58020c00
 8004724:	58021000 	.word	0x58021000
 8004728:	58021400 	.word	0x58021400
 800472c:	58021800 	.word	0x58021800
 8004730:	58021c00 	.word	0x58021c00
 8004734:	58022000 	.word	0x58022000
 8004738:	58022400 	.word	0x58022400
 800473c:	2300      	movs	r3, #0
 800473e:	69fa      	ldr	r2, [r7, #28]
 8004740:	f002 0203 	and.w	r2, r2, #3
 8004744:	0092      	lsls	r2, r2, #2
 8004746:	4093      	lsls	r3, r2
 8004748:	69ba      	ldr	r2, [r7, #24]
 800474a:	4313      	orrs	r3, r2
 800474c:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800474e:	4938      	ldr	r1, [pc, #224]	; (8004830 <HAL_GPIO_Init+0x35c>)
 8004750:	69fb      	ldr	r3, [r7, #28]
 8004752:	089b      	lsrs	r3, r3, #2
 8004754:	3302      	adds	r3, #2
 8004756:	69ba      	ldr	r2, [r7, #24]
 8004758:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 800475c:	697b      	ldr	r3, [r7, #20]
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8004762:	693b      	ldr	r3, [r7, #16]
 8004764:	43db      	mvns	r3, r3
 8004766:	69ba      	ldr	r2, [r7, #24]
 8004768:	4013      	ands	r3, r2
 800476a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800476c:	683b      	ldr	r3, [r7, #0]
 800476e:	685b      	ldr	r3, [r3, #4]
 8004770:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004774:	2b00      	cmp	r3, #0
 8004776:	d003      	beq.n	8004780 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8004778:	69ba      	ldr	r2, [r7, #24]
 800477a:	693b      	ldr	r3, [r7, #16]
 800477c:	4313      	orrs	r3, r2
 800477e:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8004780:	697b      	ldr	r3, [r7, #20]
 8004782:	69ba      	ldr	r2, [r7, #24]
 8004784:	601a      	str	r2, [r3, #0]

        temp = EXTI_CurrentCPU->EMR1;
 8004786:	697b      	ldr	r3, [r7, #20]
 8004788:	685b      	ldr	r3, [r3, #4]
 800478a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800478c:	693b      	ldr	r3, [r7, #16]
 800478e:	43db      	mvns	r3, r3
 8004790:	69ba      	ldr	r2, [r7, #24]
 8004792:	4013      	ands	r3, r2
 8004794:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8004796:	683b      	ldr	r3, [r7, #0]
 8004798:	685b      	ldr	r3, [r3, #4]
 800479a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800479e:	2b00      	cmp	r3, #0
 80047a0:	d003      	beq.n	80047aa <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80047a2:	69ba      	ldr	r2, [r7, #24]
 80047a4:	693b      	ldr	r3, [r7, #16]
 80047a6:	4313      	orrs	r3, r2
 80047a8:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 80047aa:	697b      	ldr	r3, [r7, #20]
 80047ac:	69ba      	ldr	r2, [r7, #24]
 80047ae:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80047b0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80047b8:	693b      	ldr	r3, [r7, #16]
 80047ba:	43db      	mvns	r3, r3
 80047bc:	69ba      	ldr	r2, [r7, #24]
 80047be:	4013      	ands	r3, r2
 80047c0:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80047c2:	683b      	ldr	r3, [r7, #0]
 80047c4:	685b      	ldr	r3, [r3, #4]
 80047c6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80047ca:	2b00      	cmp	r3, #0
 80047cc:	d003      	beq.n	80047d6 <HAL_GPIO_Init+0x302>
        {
          temp |= iocurrent;
 80047ce:	69ba      	ldr	r2, [r7, #24]
 80047d0:	693b      	ldr	r3, [r7, #16]
 80047d2:	4313      	orrs	r3, r2
 80047d4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 80047d6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80047da:	69bb      	ldr	r3, [r7, #24]
 80047dc:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 80047de:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80047e2:	685b      	ldr	r3, [r3, #4]
 80047e4:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80047e6:	693b      	ldr	r3, [r7, #16]
 80047e8:	43db      	mvns	r3, r3
 80047ea:	69ba      	ldr	r2, [r7, #24]
 80047ec:	4013      	ands	r3, r2
 80047ee:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80047f0:	683b      	ldr	r3, [r7, #0]
 80047f2:	685b      	ldr	r3, [r3, #4]
 80047f4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80047f8:	2b00      	cmp	r3, #0
 80047fa:	d003      	beq.n	8004804 <HAL_GPIO_Init+0x330>
        {
          temp |= iocurrent;
 80047fc:	69ba      	ldr	r2, [r7, #24]
 80047fe:	693b      	ldr	r3, [r7, #16]
 8004800:	4313      	orrs	r3, r2
 8004802:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8004804:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004808:	69bb      	ldr	r3, [r7, #24]
 800480a:	6053      	str	r3, [r2, #4]
      }
    }

    position++;
 800480c:	69fb      	ldr	r3, [r7, #28]
 800480e:	3301      	adds	r3, #1
 8004810:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8004812:	683b      	ldr	r3, [r7, #0]
 8004814:	681a      	ldr	r2, [r3, #0]
 8004816:	69fb      	ldr	r3, [r7, #28]
 8004818:	fa22 f303 	lsr.w	r3, r2, r3
 800481c:	2b00      	cmp	r3, #0
 800481e:	f47f ae63 	bne.w	80044e8 <HAL_GPIO_Init+0x14>
  }
}
 8004822:	bf00      	nop
 8004824:	3724      	adds	r7, #36	; 0x24
 8004826:	46bd      	mov	sp, r7
 8004828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800482c:	4770      	bx	lr
 800482e:	bf00      	nop
 8004830:	58000400 	.word	0x58000400

08004834 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8004834:	b480      	push	{r7}
 8004836:	b085      	sub	sp, #20
 8004838:	af00      	add	r7, sp, #0
 800483a:	6078      	str	r0, [r7, #4]
 800483c:	460b      	mov	r3, r1
 800483e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	691a      	ldr	r2, [r3, #16]
 8004844:	887b      	ldrh	r3, [r7, #2]
 8004846:	4013      	ands	r3, r2
 8004848:	2b00      	cmp	r3, #0
 800484a:	d002      	beq.n	8004852 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800484c:	2301      	movs	r3, #1
 800484e:	73fb      	strb	r3, [r7, #15]
 8004850:	e001      	b.n	8004856 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8004852:	2300      	movs	r3, #0
 8004854:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8004856:	7bfb      	ldrb	r3, [r7, #15]
}
 8004858:	4618      	mov	r0, r3
 800485a:	3714      	adds	r7, #20
 800485c:	46bd      	mov	sp, r7
 800485e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004862:	4770      	bx	lr

08004864 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004864:	b480      	push	{r7}
 8004866:	b083      	sub	sp, #12
 8004868:	af00      	add	r7, sp, #0
 800486a:	6078      	str	r0, [r7, #4]
 800486c:	460b      	mov	r3, r1
 800486e:	807b      	strh	r3, [r7, #2]
 8004870:	4613      	mov	r3, r2
 8004872:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8004874:	787b      	ldrb	r3, [r7, #1]
 8004876:	2b00      	cmp	r3, #0
 8004878:	d003      	beq.n	8004882 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800487a:	887a      	ldrh	r2, [r7, #2]
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8004880:	e003      	b.n	800488a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8004882:	887b      	ldrh	r3, [r7, #2]
 8004884:	041a      	lsls	r2, r3, #16
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	619a      	str	r2, [r3, #24]
}
 800488a:	bf00      	nop
 800488c:	370c      	adds	r7, #12
 800488e:	46bd      	mov	sp, r7
 8004890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004894:	4770      	bx	lr

08004896 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8004896:	b480      	push	{r7}
 8004898:	b083      	sub	sp, #12
 800489a:	af00      	add	r7, sp, #0
 800489c:	6078      	str	r0, [r7, #4]
 800489e:	460b      	mov	r3, r1
 80048a0:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) == GPIO_Pin)
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	695a      	ldr	r2, [r3, #20]
 80048a6:	887b      	ldrh	r3, [r7, #2]
 80048a8:	401a      	ands	r2, r3
 80048aa:	887b      	ldrh	r3, [r7, #2]
 80048ac:	429a      	cmp	r2, r3
 80048ae:	d104      	bne.n	80048ba <HAL_GPIO_TogglePin+0x24>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 80048b0:	887b      	ldrh	r3, [r7, #2]
 80048b2:	041a      	lsls	r2, r3, #16
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = GPIO_Pin;
  }
}
 80048b8:	e002      	b.n	80048c0 <HAL_GPIO_TogglePin+0x2a>
    GPIOx->BSRR = GPIO_Pin;
 80048ba:	887a      	ldrh	r2, [r7, #2]
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	619a      	str	r2, [r3, #24]
}
 80048c0:	bf00      	nop
 80048c2:	370c      	adds	r7, #12
 80048c4:	46bd      	mov	sp, r7
 80048c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048ca:	4770      	bx	lr

080048cc <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80048cc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80048ce:	b08f      	sub	sp, #60	; 0x3c
 80048d0:	af0a      	add	r7, sp, #40	; 0x28
 80048d2:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	2b00      	cmp	r3, #0
 80048d8:	d101      	bne.n	80048de <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80048da:	2301      	movs	r3, #1
 80048dc:	e116      	b.n	8004b0c <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 80048ea:	b2db      	uxtb	r3, r3
 80048ec:	2b00      	cmp	r3, #0
 80048ee:	d106      	bne.n	80048fe <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	2200      	movs	r2, #0
 80048f4:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80048f8:	6878      	ldr	r0, [r7, #4]
 80048fa:	f00c f9f1 	bl	8010ce0 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	2203      	movs	r2, #3
 8004902:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8004906:	68bb      	ldr	r3, [r7, #8]
 8004908:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800490a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800490e:	2b00      	cmp	r3, #0
 8004910:	d102      	bne.n	8004918 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	2200      	movs	r2, #0
 8004916:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	4618      	mov	r0, r3
 800491e:	f007 fecc 	bl	800c6ba <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	603b      	str	r3, [r7, #0]
 8004928:	687e      	ldr	r6, [r7, #4]
 800492a:	466d      	mov	r5, sp
 800492c:	f106 0410 	add.w	r4, r6, #16
 8004930:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004932:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004934:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004936:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004938:	e894 0003 	ldmia.w	r4, {r0, r1}
 800493c:	e885 0003 	stmia.w	r5, {r0, r1}
 8004940:	1d33      	adds	r3, r6, #4
 8004942:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004944:	6838      	ldr	r0, [r7, #0]
 8004946:	f007 fda3 	bl	800c490 <USB_CoreInit>
 800494a:	4603      	mov	r3, r0
 800494c:	2b00      	cmp	r3, #0
 800494e:	d005      	beq.n	800495c <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	2202      	movs	r2, #2
 8004954:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8004958:	2301      	movs	r3, #1
 800495a:	e0d7      	b.n	8004b0c <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	2100      	movs	r1, #0
 8004962:	4618      	mov	r0, r3
 8004964:	f007 feba 	bl	800c6dc <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004968:	2300      	movs	r3, #0
 800496a:	73fb      	strb	r3, [r7, #15]
 800496c:	e04a      	b.n	8004a04 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800496e:	7bfa      	ldrb	r2, [r7, #15]
 8004970:	6879      	ldr	r1, [r7, #4]
 8004972:	4613      	mov	r3, r2
 8004974:	00db      	lsls	r3, r3, #3
 8004976:	1a9b      	subs	r3, r3, r2
 8004978:	009b      	lsls	r3, r3, #2
 800497a:	440b      	add	r3, r1
 800497c:	333d      	adds	r3, #61	; 0x3d
 800497e:	2201      	movs	r2, #1
 8004980:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8004982:	7bfa      	ldrb	r2, [r7, #15]
 8004984:	6879      	ldr	r1, [r7, #4]
 8004986:	4613      	mov	r3, r2
 8004988:	00db      	lsls	r3, r3, #3
 800498a:	1a9b      	subs	r3, r3, r2
 800498c:	009b      	lsls	r3, r3, #2
 800498e:	440b      	add	r3, r1
 8004990:	333c      	adds	r3, #60	; 0x3c
 8004992:	7bfa      	ldrb	r2, [r7, #15]
 8004994:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8004996:	7bfa      	ldrb	r2, [r7, #15]
 8004998:	7bfb      	ldrb	r3, [r7, #15]
 800499a:	b298      	uxth	r0, r3
 800499c:	6879      	ldr	r1, [r7, #4]
 800499e:	4613      	mov	r3, r2
 80049a0:	00db      	lsls	r3, r3, #3
 80049a2:	1a9b      	subs	r3, r3, r2
 80049a4:	009b      	lsls	r3, r3, #2
 80049a6:	440b      	add	r3, r1
 80049a8:	3342      	adds	r3, #66	; 0x42
 80049aa:	4602      	mov	r2, r0
 80049ac:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80049ae:	7bfa      	ldrb	r2, [r7, #15]
 80049b0:	6879      	ldr	r1, [r7, #4]
 80049b2:	4613      	mov	r3, r2
 80049b4:	00db      	lsls	r3, r3, #3
 80049b6:	1a9b      	subs	r3, r3, r2
 80049b8:	009b      	lsls	r3, r3, #2
 80049ba:	440b      	add	r3, r1
 80049bc:	333f      	adds	r3, #63	; 0x3f
 80049be:	2200      	movs	r2, #0
 80049c0:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80049c2:	7bfa      	ldrb	r2, [r7, #15]
 80049c4:	6879      	ldr	r1, [r7, #4]
 80049c6:	4613      	mov	r3, r2
 80049c8:	00db      	lsls	r3, r3, #3
 80049ca:	1a9b      	subs	r3, r3, r2
 80049cc:	009b      	lsls	r3, r3, #2
 80049ce:	440b      	add	r3, r1
 80049d0:	3344      	adds	r3, #68	; 0x44
 80049d2:	2200      	movs	r2, #0
 80049d4:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80049d6:	7bfa      	ldrb	r2, [r7, #15]
 80049d8:	6879      	ldr	r1, [r7, #4]
 80049da:	4613      	mov	r3, r2
 80049dc:	00db      	lsls	r3, r3, #3
 80049de:	1a9b      	subs	r3, r3, r2
 80049e0:	009b      	lsls	r3, r3, #2
 80049e2:	440b      	add	r3, r1
 80049e4:	3348      	adds	r3, #72	; 0x48
 80049e6:	2200      	movs	r2, #0
 80049e8:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80049ea:	7bfa      	ldrb	r2, [r7, #15]
 80049ec:	6879      	ldr	r1, [r7, #4]
 80049ee:	4613      	mov	r3, r2
 80049f0:	00db      	lsls	r3, r3, #3
 80049f2:	1a9b      	subs	r3, r3, r2
 80049f4:	009b      	lsls	r3, r3, #2
 80049f6:	440b      	add	r3, r1
 80049f8:	3350      	adds	r3, #80	; 0x50
 80049fa:	2200      	movs	r2, #0
 80049fc:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80049fe:	7bfb      	ldrb	r3, [r7, #15]
 8004a00:	3301      	adds	r3, #1
 8004a02:	73fb      	strb	r3, [r7, #15]
 8004a04:	7bfa      	ldrb	r2, [r7, #15]
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	685b      	ldr	r3, [r3, #4]
 8004a0a:	429a      	cmp	r2, r3
 8004a0c:	d3af      	bcc.n	800496e <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004a0e:	2300      	movs	r3, #0
 8004a10:	73fb      	strb	r3, [r7, #15]
 8004a12:	e044      	b.n	8004a9e <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8004a14:	7bfa      	ldrb	r2, [r7, #15]
 8004a16:	6879      	ldr	r1, [r7, #4]
 8004a18:	4613      	mov	r3, r2
 8004a1a:	00db      	lsls	r3, r3, #3
 8004a1c:	1a9b      	subs	r3, r3, r2
 8004a1e:	009b      	lsls	r3, r3, #2
 8004a20:	440b      	add	r3, r1
 8004a22:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 8004a26:	2200      	movs	r2, #0
 8004a28:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8004a2a:	7bfa      	ldrb	r2, [r7, #15]
 8004a2c:	6879      	ldr	r1, [r7, #4]
 8004a2e:	4613      	mov	r3, r2
 8004a30:	00db      	lsls	r3, r3, #3
 8004a32:	1a9b      	subs	r3, r3, r2
 8004a34:	009b      	lsls	r3, r3, #2
 8004a36:	440b      	add	r3, r1
 8004a38:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 8004a3c:	7bfa      	ldrb	r2, [r7, #15]
 8004a3e:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8004a40:	7bfa      	ldrb	r2, [r7, #15]
 8004a42:	6879      	ldr	r1, [r7, #4]
 8004a44:	4613      	mov	r3, r2
 8004a46:	00db      	lsls	r3, r3, #3
 8004a48:	1a9b      	subs	r3, r3, r2
 8004a4a:	009b      	lsls	r3, r3, #2
 8004a4c:	440b      	add	r3, r1
 8004a4e:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8004a52:	2200      	movs	r2, #0
 8004a54:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8004a56:	7bfa      	ldrb	r2, [r7, #15]
 8004a58:	6879      	ldr	r1, [r7, #4]
 8004a5a:	4613      	mov	r3, r2
 8004a5c:	00db      	lsls	r3, r3, #3
 8004a5e:	1a9b      	subs	r3, r3, r2
 8004a60:	009b      	lsls	r3, r3, #2
 8004a62:	440b      	add	r3, r1
 8004a64:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8004a68:	2200      	movs	r2, #0
 8004a6a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8004a6c:	7bfa      	ldrb	r2, [r7, #15]
 8004a6e:	6879      	ldr	r1, [r7, #4]
 8004a70:	4613      	mov	r3, r2
 8004a72:	00db      	lsls	r3, r3, #3
 8004a74:	1a9b      	subs	r3, r3, r2
 8004a76:	009b      	lsls	r3, r3, #2
 8004a78:	440b      	add	r3, r1
 8004a7a:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8004a7e:	2200      	movs	r2, #0
 8004a80:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8004a82:	7bfa      	ldrb	r2, [r7, #15]
 8004a84:	6879      	ldr	r1, [r7, #4]
 8004a86:	4613      	mov	r3, r2
 8004a88:	00db      	lsls	r3, r3, #3
 8004a8a:	1a9b      	subs	r3, r3, r2
 8004a8c:	009b      	lsls	r3, r3, #2
 8004a8e:	440b      	add	r3, r1
 8004a90:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8004a94:	2200      	movs	r2, #0
 8004a96:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004a98:	7bfb      	ldrb	r3, [r7, #15]
 8004a9a:	3301      	adds	r3, #1
 8004a9c:	73fb      	strb	r3, [r7, #15]
 8004a9e:	7bfa      	ldrb	r2, [r7, #15]
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	685b      	ldr	r3, [r3, #4]
 8004aa4:	429a      	cmp	r2, r3
 8004aa6:	d3b5      	bcc.n	8004a14 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	603b      	str	r3, [r7, #0]
 8004aae:	687e      	ldr	r6, [r7, #4]
 8004ab0:	466d      	mov	r5, sp
 8004ab2:	f106 0410 	add.w	r4, r6, #16
 8004ab6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004ab8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004aba:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004abc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004abe:	e894 0003 	ldmia.w	r4, {r0, r1}
 8004ac2:	e885 0003 	stmia.w	r5, {r0, r1}
 8004ac6:	1d33      	adds	r3, r6, #4
 8004ac8:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004aca:	6838      	ldr	r0, [r7, #0]
 8004acc:	f007 fe30 	bl	800c730 <USB_DevInit>
 8004ad0:	4603      	mov	r3, r0
 8004ad2:	2b00      	cmp	r3, #0
 8004ad4:	d005      	beq.n	8004ae2 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	2202      	movs	r2, #2
 8004ada:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8004ade:	2301      	movs	r3, #1
 8004ae0:	e014      	b.n	8004b0c <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	2200      	movs	r2, #0
 8004ae6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	2201      	movs	r2, #1
 8004aee:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004af6:	2b01      	cmp	r3, #1
 8004af8:	d102      	bne.n	8004b00 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8004afa:	6878      	ldr	r0, [r7, #4]
 8004afc:	f001 f8be 	bl	8005c7c <HAL_PCDEx_ActivateLPM>
  }
  
  (void)USB_DevDisconnect(hpcd->Instance);
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	4618      	mov	r0, r3
 8004b06:	f008 fe6f 	bl	800d7e8 <USB_DevDisconnect>

  return HAL_OK;
 8004b0a:	2300      	movs	r3, #0
}
 8004b0c:	4618      	mov	r0, r3
 8004b0e:	3714      	adds	r7, #20
 8004b10:	46bd      	mov	sp, r7
 8004b12:	bdf0      	pop	{r4, r5, r6, r7, pc}

08004b14 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8004b14:	b580      	push	{r7, lr}
 8004b16:	b084      	sub	sp, #16
 8004b18:	af00      	add	r7, sp, #0
 8004b1a:	6078      	str	r0, [r7, #4]
#if defined (USB_OTG_FS) || defined (USB_OTG_HS)
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	60fb      	str	r3, [r7, #12]
#endif /* defined (USB_OTG_FS) || defined (USB_OTG_HS) */

  __HAL_LOCK(hpcd);
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8004b28:	2b01      	cmp	r3, #1
 8004b2a:	d101      	bne.n	8004b30 <HAL_PCD_Start+0x1c>
 8004b2c:	2302      	movs	r3, #2
 8004b2e:	e020      	b.n	8004b72 <HAL_PCD_Start+0x5e>
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	2201      	movs	r2, #1
 8004b34:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
#if defined (USB_OTG_FS) || defined (USB_OTG_HS)
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b3c:	2b01      	cmp	r3, #1
 8004b3e:	d109      	bne.n	8004b54 <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8004b44:	2b01      	cmp	r3, #1
 8004b46:	d005      	beq.n	8004b54 <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8004b48:	68fb      	ldr	r3, [r7, #12]
 8004b4a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b4c:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8004b50:	68fb      	ldr	r3, [r7, #12]
 8004b52:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined (USB_OTG_FS) || defined (USB_OTG_HS) */
  (void)USB_DevConnect(hpcd->Instance);
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	4618      	mov	r0, r3
 8004b5a:	f008 fe2d 	bl	800d7b8 <USB_DevConnect>
  __HAL_PCD_ENABLE(hpcd);
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	4618      	mov	r0, r3
 8004b64:	f007 fd98 	bl	800c698 <USB_EnableGlobalInt>
  __HAL_UNLOCK(hpcd);
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	2200      	movs	r2, #0
 8004b6c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 8004b70:	2300      	movs	r3, #0
}
 8004b72:	4618      	mov	r0, r3
 8004b74:	3710      	adds	r7, #16
 8004b76:	46bd      	mov	sp, r7
 8004b78:	bd80      	pop	{r7, pc}

08004b7a <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8004b7a:	b590      	push	{r4, r7, lr}
 8004b7c:	b08d      	sub	sp, #52	; 0x34
 8004b7e:	af00      	add	r7, sp, #0
 8004b80:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004b88:	6a3b      	ldr	r3, [r7, #32]
 8004b8a:	61fb      	str	r3, [r7, #28]
  uint32_t i, ep_intr, epint, epnum;
  uint32_t fifoemptymsk, temp;
  USB_OTG_EPTypeDef *ep;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	4618      	mov	r0, r3
 8004b92:	f008 fed4 	bl	800d93e <USB_GetMode>
 8004b96:	4603      	mov	r3, r0
 8004b98:	2b00      	cmp	r3, #0
 8004b9a:	f040 83ca 	bne.w	8005332 <HAL_PCD_IRQHandler+0x7b8>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	4618      	mov	r0, r3
 8004ba4:	f008 fe38 	bl	800d818 <USB_ReadInterrupts>
 8004ba8:	4603      	mov	r3, r0
 8004baa:	2b00      	cmp	r3, #0
 8004bac:	f000 83c0 	beq.w	8005330 <HAL_PCD_IRQHandler+0x7b6>
    {
      return;
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	4618      	mov	r0, r3
 8004bb6:	f008 fe2f 	bl	800d818 <USB_ReadInterrupts>
 8004bba:	4603      	mov	r3, r0
 8004bbc:	f003 0302 	and.w	r3, r3, #2
 8004bc0:	2b02      	cmp	r3, #2
 8004bc2:	d107      	bne.n	8004bd4 <HAL_PCD_IRQHandler+0x5a>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	695a      	ldr	r2, [r3, #20]
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	f002 0202 	and.w	r2, r2, #2
 8004bd2:	615a      	str	r2, [r3, #20]
    }

     /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	4618      	mov	r0, r3
 8004bda:	f008 fe1d 	bl	800d818 <USB_ReadInterrupts>
 8004bde:	4603      	mov	r3, r0
 8004be0:	f003 0310 	and.w	r3, r3, #16
 8004be4:	2b10      	cmp	r3, #16
 8004be6:	d161      	bne.n	8004cac <HAL_PCD_IRQHandler+0x132>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	699a      	ldr	r2, [r3, #24]
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	f022 0210 	bic.w	r2, r2, #16
 8004bf6:	619a      	str	r2, [r3, #24]

      temp = USBx->GRXSTSP;
 8004bf8:	6a3b      	ldr	r3, [r7, #32]
 8004bfa:	6a1b      	ldr	r3, [r3, #32]
 8004bfc:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 8004bfe:	69bb      	ldr	r3, [r7, #24]
 8004c00:	f003 020f 	and.w	r2, r3, #15
 8004c04:	4613      	mov	r3, r2
 8004c06:	00db      	lsls	r3, r3, #3
 8004c08:	1a9b      	subs	r3, r3, r2
 8004c0a:	009b      	lsls	r3, r3, #2
 8004c0c:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8004c10:	687a      	ldr	r2, [r7, #4]
 8004c12:	4413      	add	r3, r2
 8004c14:	3304      	adds	r3, #4
 8004c16:	617b      	str	r3, [r7, #20]

      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8004c18:	69bb      	ldr	r3, [r7, #24]
 8004c1a:	0c5b      	lsrs	r3, r3, #17
 8004c1c:	f003 030f 	and.w	r3, r3, #15
 8004c20:	2b02      	cmp	r3, #2
 8004c22:	d124      	bne.n	8004c6e <HAL_PCD_IRQHandler+0xf4>
      {
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 8004c24:	69ba      	ldr	r2, [r7, #24]
 8004c26:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8004c2a:	4013      	ands	r3, r2
 8004c2c:	2b00      	cmp	r3, #0
 8004c2e:	d035      	beq.n	8004c9c <HAL_PCD_IRQHandler+0x122>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8004c30:	697b      	ldr	r3, [r7, #20]
 8004c32:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));
 8004c34:	69bb      	ldr	r3, [r7, #24]
 8004c36:	091b      	lsrs	r3, r3, #4
 8004c38:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8004c3a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004c3e:	b29b      	uxth	r3, r3
 8004c40:	461a      	mov	r2, r3
 8004c42:	6a38      	ldr	r0, [r7, #32]
 8004c44:	f008 fc95 	bl	800d572 <USB_ReadPacket>

          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8004c48:	697b      	ldr	r3, [r7, #20]
 8004c4a:	68da      	ldr	r2, [r3, #12]
 8004c4c:	69bb      	ldr	r3, [r7, #24]
 8004c4e:	091b      	lsrs	r3, r3, #4
 8004c50:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004c54:	441a      	add	r2, r3
 8004c56:	697b      	ldr	r3, [r7, #20]
 8004c58:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8004c5a:	697b      	ldr	r3, [r7, #20]
 8004c5c:	699a      	ldr	r2, [r3, #24]
 8004c5e:	69bb      	ldr	r3, [r7, #24]
 8004c60:	091b      	lsrs	r3, r3, #4
 8004c62:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004c66:	441a      	add	r2, r3
 8004c68:	697b      	ldr	r3, [r7, #20]
 8004c6a:	619a      	str	r2, [r3, #24]
 8004c6c:	e016      	b.n	8004c9c <HAL_PCD_IRQHandler+0x122>
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 8004c6e:	69bb      	ldr	r3, [r7, #24]
 8004c70:	0c5b      	lsrs	r3, r3, #17
 8004c72:	f003 030f 	and.w	r3, r3, #15
 8004c76:	2b06      	cmp	r3, #6
 8004c78:	d110      	bne.n	8004c9c <HAL_PCD_IRQHandler+0x122>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8004c80:	2208      	movs	r2, #8
 8004c82:	4619      	mov	r1, r3
 8004c84:	6a38      	ldr	r0, [r7, #32]
 8004c86:	f008 fc74 	bl	800d572 <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8004c8a:	697b      	ldr	r3, [r7, #20]
 8004c8c:	699a      	ldr	r2, [r3, #24]
 8004c8e:	69bb      	ldr	r3, [r7, #24]
 8004c90:	091b      	lsrs	r3, r3, #4
 8004c92:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004c96:	441a      	add	r2, r3
 8004c98:	697b      	ldr	r3, [r7, #20]
 8004c9a:	619a      	str	r2, [r3, #24]
      }
      else
      {
        /* ... */
      }
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	699a      	ldr	r2, [r3, #24]
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	f042 0210 	orr.w	r2, r2, #16
 8004caa:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	4618      	mov	r0, r3
 8004cb2:	f008 fdb1 	bl	800d818 <USB_ReadInterrupts>
 8004cb6:	4603      	mov	r3, r0
 8004cb8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004cbc:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8004cc0:	d16e      	bne.n	8004da0 <HAL_PCD_IRQHandler+0x226>
    {
      epnum = 0U;
 8004cc2:	2300      	movs	r3, #0
 8004cc4:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	4618      	mov	r0, r3
 8004ccc:	f008 fdb7 	bl	800d83e <USB_ReadDevAllOutEpInterrupt>
 8004cd0:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8004cd2:	e062      	b.n	8004d9a <HAL_PCD_IRQHandler+0x220>
      {
        if ((ep_intr & 0x1U) != 0U)
 8004cd4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004cd6:	f003 0301 	and.w	r3, r3, #1
 8004cda:	2b00      	cmp	r3, #0
 8004cdc:	d057      	beq.n	8004d8e <HAL_PCD_IRQHandler+0x214>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004ce4:	b2d2      	uxtb	r2, r2
 8004ce6:	4611      	mov	r1, r2
 8004ce8:	4618      	mov	r0, r3
 8004cea:	f008 fddc 	bl	800d8a6 <USB_ReadDevOutEPInterrupt>
 8004cee:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8004cf0:	693b      	ldr	r3, [r7, #16]
 8004cf2:	f003 0301 	and.w	r3, r3, #1
 8004cf6:	2b00      	cmp	r3, #0
 8004cf8:	d00c      	beq.n	8004d14 <HAL_PCD_IRQHandler+0x19a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8004cfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cfc:	015a      	lsls	r2, r3, #5
 8004cfe:	69fb      	ldr	r3, [r7, #28]
 8004d00:	4413      	add	r3, r2
 8004d02:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004d06:	461a      	mov	r2, r3
 8004d08:	2301      	movs	r3, #1
 8004d0a:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8004d0c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004d0e:	6878      	ldr	r0, [r7, #4]
 8004d10:	f000 fe0a 	bl	8005928 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8004d14:	693b      	ldr	r3, [r7, #16]
 8004d16:	f003 0308 	and.w	r3, r3, #8
 8004d1a:	2b00      	cmp	r3, #0
 8004d1c:	d00c      	beq.n	8004d38 <HAL_PCD_IRQHandler+0x1be>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8004d1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d20:	015a      	lsls	r2, r3, #5
 8004d22:	69fb      	ldr	r3, [r7, #28]
 8004d24:	4413      	add	r3, r2
 8004d26:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004d2a:	461a      	mov	r2, r3
 8004d2c:	2308      	movs	r3, #8
 8004d2e:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8004d30:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004d32:	6878      	ldr	r0, [r7, #4]
 8004d34:	f000 ff04 	bl	8005b40 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8004d38:	693b      	ldr	r3, [r7, #16]
 8004d3a:	f003 0310 	and.w	r3, r3, #16
 8004d3e:	2b00      	cmp	r3, #0
 8004d40:	d008      	beq.n	8004d54 <HAL_PCD_IRQHandler+0x1da>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8004d42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d44:	015a      	lsls	r2, r3, #5
 8004d46:	69fb      	ldr	r3, [r7, #28]
 8004d48:	4413      	add	r3, r2
 8004d4a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004d4e:	461a      	mov	r2, r3
 8004d50:	2310      	movs	r3, #16
 8004d52:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8004d54:	693b      	ldr	r3, [r7, #16]
 8004d56:	f003 0320 	and.w	r3, r3, #32
 8004d5a:	2b00      	cmp	r3, #0
 8004d5c:	d008      	beq.n	8004d70 <HAL_PCD_IRQHandler+0x1f6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8004d5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d60:	015a      	lsls	r2, r3, #5
 8004d62:	69fb      	ldr	r3, [r7, #28]
 8004d64:	4413      	add	r3, r2
 8004d66:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004d6a:	461a      	mov	r2, r3
 8004d6c:	2320      	movs	r3, #32
 8004d6e:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8004d70:	693b      	ldr	r3, [r7, #16]
 8004d72:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004d76:	2b00      	cmp	r3, #0
 8004d78:	d009      	beq.n	8004d8e <HAL_PCD_IRQHandler+0x214>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8004d7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d7c:	015a      	lsls	r2, r3, #5
 8004d7e:	69fb      	ldr	r3, [r7, #28]
 8004d80:	4413      	add	r3, r2
 8004d82:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004d86:	461a      	mov	r2, r3
 8004d88:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8004d8c:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8004d8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d90:	3301      	adds	r3, #1
 8004d92:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8004d94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d96:	085b      	lsrs	r3, r3, #1
 8004d98:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8004d9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d9c:	2b00      	cmp	r3, #0
 8004d9e:	d199      	bne.n	8004cd4 <HAL_PCD_IRQHandler+0x15a>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	4618      	mov	r0, r3
 8004da6:	f008 fd37 	bl	800d818 <USB_ReadInterrupts>
 8004daa:	4603      	mov	r3, r0
 8004dac:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004db0:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004db4:	f040 80c0 	bne.w	8004f38 <HAL_PCD_IRQHandler+0x3be>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	4618      	mov	r0, r3
 8004dbe:	f008 fd58 	bl	800d872 <USB_ReadDevAllInEpInterrupt>
 8004dc2:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8004dc4:	2300      	movs	r3, #0
 8004dc6:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8004dc8:	e0b2      	b.n	8004f30 <HAL_PCD_IRQHandler+0x3b6>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8004dca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004dcc:	f003 0301 	and.w	r3, r3, #1
 8004dd0:	2b00      	cmp	r3, #0
 8004dd2:	f000 80a7 	beq.w	8004f24 <HAL_PCD_IRQHandler+0x3aa>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004ddc:	b2d2      	uxtb	r2, r2
 8004dde:	4611      	mov	r1, r2
 8004de0:	4618      	mov	r0, r3
 8004de2:	f008 fd7e 	bl	800d8e2 <USB_ReadDevInEPInterrupt>
 8004de6:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8004de8:	693b      	ldr	r3, [r7, #16]
 8004dea:	f003 0301 	and.w	r3, r3, #1
 8004dee:	2b00      	cmp	r3, #0
 8004df0:	d057      	beq.n	8004ea2 <HAL_PCD_IRQHandler+0x328>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8004df2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004df4:	f003 030f 	and.w	r3, r3, #15
 8004df8:	2201      	movs	r2, #1
 8004dfa:	fa02 f303 	lsl.w	r3, r2, r3
 8004dfe:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8004e00:	69fb      	ldr	r3, [r7, #28]
 8004e02:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004e06:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004e08:	68fb      	ldr	r3, [r7, #12]
 8004e0a:	43db      	mvns	r3, r3
 8004e0c:	69f9      	ldr	r1, [r7, #28]
 8004e0e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004e12:	4013      	ands	r3, r2
 8004e14:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8004e16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e18:	015a      	lsls	r2, r3, #5
 8004e1a:	69fb      	ldr	r3, [r7, #28]
 8004e1c:	4413      	add	r3, r2
 8004e1e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004e22:	461a      	mov	r2, r3
 8004e24:	2301      	movs	r3, #1
 8004e26:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	691b      	ldr	r3, [r3, #16]
 8004e2c:	2b01      	cmp	r3, #1
 8004e2e:	d132      	bne.n	8004e96 <HAL_PCD_IRQHandler+0x31c>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8004e30:	6879      	ldr	r1, [r7, #4]
 8004e32:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004e34:	4613      	mov	r3, r2
 8004e36:	00db      	lsls	r3, r3, #3
 8004e38:	1a9b      	subs	r3, r3, r2
 8004e3a:	009b      	lsls	r3, r3, #2
 8004e3c:	440b      	add	r3, r1
 8004e3e:	3348      	adds	r3, #72	; 0x48
 8004e40:	6819      	ldr	r1, [r3, #0]
 8004e42:	6878      	ldr	r0, [r7, #4]
 8004e44:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004e46:	4613      	mov	r3, r2
 8004e48:	00db      	lsls	r3, r3, #3
 8004e4a:	1a9b      	subs	r3, r3, r2
 8004e4c:	009b      	lsls	r3, r3, #2
 8004e4e:	4403      	add	r3, r0
 8004e50:	3344      	adds	r3, #68	; 0x44
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	4419      	add	r1, r3
 8004e56:	6878      	ldr	r0, [r7, #4]
 8004e58:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004e5a:	4613      	mov	r3, r2
 8004e5c:	00db      	lsls	r3, r3, #3
 8004e5e:	1a9b      	subs	r3, r3, r2
 8004e60:	009b      	lsls	r3, r3, #2
 8004e62:	4403      	add	r3, r0
 8004e64:	3348      	adds	r3, #72	; 0x48
 8004e66:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8004e68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e6a:	2b00      	cmp	r3, #0
 8004e6c:	d113      	bne.n	8004e96 <HAL_PCD_IRQHandler+0x31c>
 8004e6e:	6879      	ldr	r1, [r7, #4]
 8004e70:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004e72:	4613      	mov	r3, r2
 8004e74:	00db      	lsls	r3, r3, #3
 8004e76:	1a9b      	subs	r3, r3, r2
 8004e78:	009b      	lsls	r3, r3, #2
 8004e7a:	440b      	add	r3, r1
 8004e7c:	3350      	adds	r3, #80	; 0x50
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	2b00      	cmp	r3, #0
 8004e82:	d108      	bne.n	8004e96 <HAL_PCD_IRQHandler+0x31c>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	6818      	ldr	r0, [r3, #0]
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8004e8e:	461a      	mov	r2, r3
 8004e90:	2101      	movs	r1, #1
 8004e92:	f008 fd87 	bl	800d9a4 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8004e96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e98:	b2db      	uxtb	r3, r3
 8004e9a:	4619      	mov	r1, r3
 8004e9c:	6878      	ldr	r0, [r7, #4]
 8004e9e:	f00b ff9e 	bl	8010dde <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8004ea2:	693b      	ldr	r3, [r7, #16]
 8004ea4:	f003 0308 	and.w	r3, r3, #8
 8004ea8:	2b00      	cmp	r3, #0
 8004eaa:	d008      	beq.n	8004ebe <HAL_PCD_IRQHandler+0x344>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8004eac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004eae:	015a      	lsls	r2, r3, #5
 8004eb0:	69fb      	ldr	r3, [r7, #28]
 8004eb2:	4413      	add	r3, r2
 8004eb4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004eb8:	461a      	mov	r2, r3
 8004eba:	2308      	movs	r3, #8
 8004ebc:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8004ebe:	693b      	ldr	r3, [r7, #16]
 8004ec0:	f003 0310 	and.w	r3, r3, #16
 8004ec4:	2b00      	cmp	r3, #0
 8004ec6:	d008      	beq.n	8004eda <HAL_PCD_IRQHandler+0x360>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8004ec8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004eca:	015a      	lsls	r2, r3, #5
 8004ecc:	69fb      	ldr	r3, [r7, #28]
 8004ece:	4413      	add	r3, r2
 8004ed0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004ed4:	461a      	mov	r2, r3
 8004ed6:	2310      	movs	r3, #16
 8004ed8:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8004eda:	693b      	ldr	r3, [r7, #16]
 8004edc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004ee0:	2b00      	cmp	r3, #0
 8004ee2:	d008      	beq.n	8004ef6 <HAL_PCD_IRQHandler+0x37c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8004ee4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ee6:	015a      	lsls	r2, r3, #5
 8004ee8:	69fb      	ldr	r3, [r7, #28]
 8004eea:	4413      	add	r3, r2
 8004eec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004ef0:	461a      	mov	r2, r3
 8004ef2:	2340      	movs	r3, #64	; 0x40
 8004ef4:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8004ef6:	693b      	ldr	r3, [r7, #16]
 8004ef8:	f003 0302 	and.w	r3, r3, #2
 8004efc:	2b00      	cmp	r3, #0
 8004efe:	d008      	beq.n	8004f12 <HAL_PCD_IRQHandler+0x398>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8004f00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f02:	015a      	lsls	r2, r3, #5
 8004f04:	69fb      	ldr	r3, [r7, #28]
 8004f06:	4413      	add	r3, r2
 8004f08:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004f0c:	461a      	mov	r2, r3
 8004f0e:	2302      	movs	r3, #2
 8004f10:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8004f12:	693b      	ldr	r3, [r7, #16]
 8004f14:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004f18:	2b00      	cmp	r3, #0
 8004f1a:	d003      	beq.n	8004f24 <HAL_PCD_IRQHandler+0x3aa>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8004f1c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004f1e:	6878      	ldr	r0, [r7, #4]
 8004f20:	f000 fc75 	bl	800580e <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8004f24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f26:	3301      	adds	r3, #1
 8004f28:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8004f2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f2c:	085b      	lsrs	r3, r3, #1
 8004f2e:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8004f30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f32:	2b00      	cmp	r3, #0
 8004f34:	f47f af49 	bne.w	8004dca <HAL_PCD_IRQHandler+0x250>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	4618      	mov	r0, r3
 8004f3e:	f008 fc6b 	bl	800d818 <USB_ReadInterrupts>
 8004f42:	4603      	mov	r3, r0
 8004f44:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004f48:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004f4c:	d122      	bne.n	8004f94 <HAL_PCD_IRQHandler+0x41a>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8004f4e:	69fb      	ldr	r3, [r7, #28]
 8004f50:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004f54:	685b      	ldr	r3, [r3, #4]
 8004f56:	69fa      	ldr	r2, [r7, #28]
 8004f58:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004f5c:	f023 0301 	bic.w	r3, r3, #1
 8004f60:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 8004f68:	2b01      	cmp	r3, #1
 8004f6a:	d108      	bne.n	8004f7e <HAL_PCD_IRQHandler+0x404>
      {
        hpcd->LPM_State = LPM_L0;
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	2200      	movs	r2, #0
 8004f70:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8004f74:	2100      	movs	r1, #0
 8004f76:	6878      	ldr	r0, [r7, #4]
 8004f78:	f000 fea4 	bl	8005cc4 <HAL_PCDEx_LPM_Callback>
 8004f7c:	e002      	b.n	8004f84 <HAL_PCD_IRQHandler+0x40a>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8004f7e:	6878      	ldr	r0, [r7, #4]
 8004f80:	f00b ffa4 	bl	8010ecc <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	695a      	ldr	r2, [r3, #20]
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	681b      	ldr	r3, [r3, #0]
 8004f8e:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8004f92:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	4618      	mov	r0, r3
 8004f9a:	f008 fc3d 	bl	800d818 <USB_ReadInterrupts>
 8004f9e:	4603      	mov	r3, r0
 8004fa0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004fa4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004fa8:	d112      	bne.n	8004fd0 <HAL_PCD_IRQHandler+0x456>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8004faa:	69fb      	ldr	r3, [r7, #28]
 8004fac:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004fb0:	689b      	ldr	r3, [r3, #8]
 8004fb2:	f003 0301 	and.w	r3, r3, #1
 8004fb6:	2b01      	cmp	r3, #1
 8004fb8:	d102      	bne.n	8004fc0 <HAL_PCD_IRQHandler+0x446>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8004fba:	6878      	ldr	r0, [r7, #4]
 8004fbc:	f00b ff60 	bl	8010e80 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	695a      	ldr	r2, [r3, #20]
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8004fce:	615a      	str	r2, [r3, #20]
    }
    
    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	4618      	mov	r0, r3
 8004fd6:	f008 fc1f 	bl	800d818 <USB_ReadInterrupts>
 8004fda:	4603      	mov	r3, r0
 8004fdc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004fe0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004fe4:	d121      	bne.n	800502a <HAL_PCD_IRQHandler+0x4b0>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	695a      	ldr	r2, [r3, #20]
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	f002 6200 	and.w	r2, r2, #134217728	; 0x8000000
 8004ff4:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 8004ffc:	2b00      	cmp	r3, #0
 8004ffe:	d111      	bne.n	8005024 <HAL_PCD_IRQHandler+0x4aa>
      {
        hpcd->LPM_State = LPM_L1;
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	2201      	movs	r2, #1
 8005004:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800500e:	089b      	lsrs	r3, r3, #2
 8005010:	f003 020f 	and.w	r2, r3, #15
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	f8c3 23f8 	str.w	r2, [r3, #1016]	; 0x3f8

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 800501a:	2101      	movs	r1, #1
 800501c:	6878      	ldr	r0, [r7, #4]
 800501e:	f000 fe51 	bl	8005cc4 <HAL_PCDEx_LPM_Callback>
 8005022:	e002      	b.n	800502a <HAL_PCD_IRQHandler+0x4b0>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8005024:	6878      	ldr	r0, [r7, #4]
 8005026:	f00b ff2b 	bl	8010e80 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	4618      	mov	r0, r3
 8005030:	f008 fbf2 	bl	800d818 <USB_ReadInterrupts>
 8005034:	4603      	mov	r3, r0
 8005036:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800503a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800503e:	f040 80c7 	bne.w	80051d0 <HAL_PCD_IRQHandler+0x656>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8005042:	69fb      	ldr	r3, [r7, #28]
 8005044:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005048:	685b      	ldr	r3, [r3, #4]
 800504a:	69fa      	ldr	r2, [r7, #28]
 800504c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005050:	f023 0301 	bic.w	r3, r3, #1
 8005054:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	681b      	ldr	r3, [r3, #0]
 800505a:	2110      	movs	r1, #16
 800505c:	4618      	mov	r0, r3
 800505e:	f007 fcc5 	bl	800c9ec <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005062:	2300      	movs	r3, #0
 8005064:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005066:	e056      	b.n	8005116 <HAL_PCD_IRQHandler+0x59c>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8005068:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800506a:	015a      	lsls	r2, r3, #5
 800506c:	69fb      	ldr	r3, [r7, #28]
 800506e:	4413      	add	r3, r2
 8005070:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005074:	461a      	mov	r2, r3
 8005076:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800507a:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800507c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800507e:	015a      	lsls	r2, r3, #5
 8005080:	69fb      	ldr	r3, [r7, #28]
 8005082:	4413      	add	r3, r2
 8005084:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800508c:	0151      	lsls	r1, r2, #5
 800508e:	69fa      	ldr	r2, [r7, #28]
 8005090:	440a      	add	r2, r1
 8005092:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005096:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800509a:	6013      	str	r3, [r2, #0]
        USBx_INEP(i)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 800509c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800509e:	015a      	lsls	r2, r3, #5
 80050a0:	69fb      	ldr	r3, [r7, #28]
 80050a2:	4413      	add	r3, r2
 80050a4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80050a8:	681b      	ldr	r3, [r3, #0]
 80050aa:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80050ac:	0151      	lsls	r1, r2, #5
 80050ae:	69fa      	ldr	r2, [r7, #28]
 80050b0:	440a      	add	r2, r1
 80050b2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80050b6:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80050ba:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 80050bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80050be:	015a      	lsls	r2, r3, #5
 80050c0:	69fb      	ldr	r3, [r7, #28]
 80050c2:	4413      	add	r3, r2
 80050c4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80050c8:	461a      	mov	r2, r3
 80050ca:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80050ce:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80050d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80050d2:	015a      	lsls	r2, r3, #5
 80050d4:	69fb      	ldr	r3, [r7, #28]
 80050d6:	4413      	add	r3, r2
 80050d8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80050dc:	681b      	ldr	r3, [r3, #0]
 80050de:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80050e0:	0151      	lsls	r1, r2, #5
 80050e2:	69fa      	ldr	r2, [r7, #28]
 80050e4:	440a      	add	r2, r1
 80050e6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80050ea:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80050ee:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80050f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80050f2:	015a      	lsls	r2, r3, #5
 80050f4:	69fb      	ldr	r3, [r7, #28]
 80050f6:	4413      	add	r3, r2
 80050f8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80050fc:	681b      	ldr	r3, [r3, #0]
 80050fe:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005100:	0151      	lsls	r1, r2, #5
 8005102:	69fa      	ldr	r2, [r7, #28]
 8005104:	440a      	add	r2, r1
 8005106:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800510a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800510e:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005110:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005112:	3301      	adds	r3, #1
 8005114:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	685b      	ldr	r3, [r3, #4]
 800511a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800511c:	429a      	cmp	r2, r3
 800511e:	d3a3      	bcc.n	8005068 <HAL_PCD_IRQHandler+0x4ee>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8005120:	69fb      	ldr	r3, [r7, #28]
 8005122:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005126:	69db      	ldr	r3, [r3, #28]
 8005128:	69fa      	ldr	r2, [r7, #28]
 800512a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800512e:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8005132:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005138:	2b00      	cmp	r3, #0
 800513a:	d016      	beq.n	800516a <HAL_PCD_IRQHandler+0x5f0>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 800513c:	69fb      	ldr	r3, [r7, #28]
 800513e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005142:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005146:	69fa      	ldr	r2, [r7, #28]
 8005148:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800514c:	f043 030b 	orr.w	r3, r3, #11
 8005150:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8005154:	69fb      	ldr	r3, [r7, #28]
 8005156:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800515a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800515c:	69fa      	ldr	r2, [r7, #28]
 800515e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005162:	f043 030b 	orr.w	r3, r3, #11
 8005166:	6453      	str	r3, [r2, #68]	; 0x44
 8005168:	e015      	b.n	8005196 <HAL_PCD_IRQHandler+0x61c>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 800516a:	69fb      	ldr	r3, [r7, #28]
 800516c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005170:	695a      	ldr	r2, [r3, #20]
 8005172:	69fb      	ldr	r3, [r7, #28]
 8005174:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005178:	4619      	mov	r1, r3
 800517a:	f242 032b 	movw	r3, #8235	; 0x202b
 800517e:	4313      	orrs	r3, r2
 8005180:	614b      	str	r3, [r1, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8005182:	69fb      	ldr	r3, [r7, #28]
 8005184:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005188:	691b      	ldr	r3, [r3, #16]
 800518a:	69fa      	ldr	r2, [r7, #28]
 800518c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005190:	f043 030b 	orr.w	r3, r3, #11
 8005194:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8005196:	69fb      	ldr	r3, [r7, #28]
 8005198:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	69fa      	ldr	r2, [r7, #28]
 80051a0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80051a4:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 80051a8:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	6818      	ldr	r0, [r3, #0]
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	691b      	ldr	r3, [r3, #16]
 80051b2:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80051ba:	461a      	mov	r2, r3
 80051bc:	f008 fbf2 	bl	800d9a4 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	695a      	ldr	r2, [r3, #20]
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 80051ce:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	681b      	ldr	r3, [r3, #0]
 80051d4:	4618      	mov	r0, r3
 80051d6:	f008 fb1f 	bl	800d818 <USB_ReadInterrupts>
 80051da:	4603      	mov	r3, r0
 80051dc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80051e0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80051e4:	d124      	bne.n	8005230 <HAL_PCD_IRQHandler+0x6b6>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	681b      	ldr	r3, [r3, #0]
 80051ea:	4618      	mov	r0, r3
 80051ec:	f008 fbb6 	bl	800d95c <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	681b      	ldr	r3, [r3, #0]
 80051f4:	4618      	mov	r0, r3
 80051f6:	f007 fc5a 	bl	800caae <USB_GetDevSpeed>
 80051fa:	4603      	mov	r3, r0
 80051fc:	461a      	mov	r2, r3
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	681c      	ldr	r4, [r3, #0]
 8005206:	f001 fceb 	bl	8006be0 <HAL_RCC_GetHCLKFreq>
 800520a:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8005210:	b2db      	uxtb	r3, r3
 8005212:	461a      	mov	r2, r3
 8005214:	4620      	mov	r0, r4
 8005216:	f007 f99d 	bl	800c554 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 800521a:	6878      	ldr	r0, [r7, #4]
 800521c:	f00b fe07 	bl	8010e2e <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	681b      	ldr	r3, [r3, #0]
 8005224:	695a      	ldr	r2, [r3, #20]
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	681b      	ldr	r3, [r3, #0]
 800522a:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 800522e:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	681b      	ldr	r3, [r3, #0]
 8005234:	4618      	mov	r0, r3
 8005236:	f008 faef 	bl	800d818 <USB_ReadInterrupts>
 800523a:	4603      	mov	r3, r0
 800523c:	f003 0308 	and.w	r3, r3, #8
 8005240:	2b08      	cmp	r3, #8
 8005242:	d10a      	bne.n	800525a <HAL_PCD_IRQHandler+0x6e0>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8005244:	6878      	ldr	r0, [r7, #4]
 8005246:	f00b fde4 	bl	8010e12 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	681b      	ldr	r3, [r3, #0]
 800524e:	695a      	ldr	r2, [r3, #20]
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	f002 0208 	and.w	r2, r2, #8
 8005258:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	681b      	ldr	r3, [r3, #0]
 800525e:	4618      	mov	r0, r3
 8005260:	f008 fada 	bl	800d818 <USB_ReadInterrupts>
 8005264:	4603      	mov	r3, r0
 8005266:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800526a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800526e:	d10f      	bne.n	8005290 <HAL_PCD_IRQHandler+0x716>
    {
      /* Keep application checking the corresponding Iso IN endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8005270:	2300      	movs	r3, #0
 8005272:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8005274:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005276:	b2db      	uxtb	r3, r3
 8005278:	4619      	mov	r1, r3
 800527a:	6878      	ldr	r0, [r7, #4]
 800527c:	f00b fe46 	bl	8010f0c <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	681b      	ldr	r3, [r3, #0]
 8005284:	695a      	ldr	r2, [r3, #20]
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	681b      	ldr	r3, [r3, #0]
 800528a:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 800528e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	4618      	mov	r0, r3
 8005296:	f008 fabf 	bl	800d818 <USB_ReadInterrupts>
 800529a:	4603      	mov	r3, r0
 800529c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80052a0:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80052a4:	d10f      	bne.n	80052c6 <HAL_PCD_IRQHandler+0x74c>
    {
      /* Keep application checking the corresponding Iso OUT endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 80052a6:	2300      	movs	r3, #0
 80052a8:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 80052aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052ac:	b2db      	uxtb	r3, r3
 80052ae:	4619      	mov	r1, r3
 80052b0:	6878      	ldr	r0, [r7, #4]
 80052b2:	f00b fe19 	bl	8010ee8 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	681b      	ldr	r3, [r3, #0]
 80052ba:	695a      	ldr	r2, [r3, #20]
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 80052c4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	681b      	ldr	r3, [r3, #0]
 80052ca:	4618      	mov	r0, r3
 80052cc:	f008 faa4 	bl	800d818 <USB_ReadInterrupts>
 80052d0:	4603      	mov	r3, r0
 80052d2:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80052d6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80052da:	d10a      	bne.n	80052f2 <HAL_PCD_IRQHandler+0x778>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 80052dc:	6878      	ldr	r0, [r7, #4]
 80052de:	f00b fe27 	bl	8010f30 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	681b      	ldr	r3, [r3, #0]
 80052e6:	695a      	ldr	r2, [r3, #20]
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	681b      	ldr	r3, [r3, #0]
 80052ec:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 80052f0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	681b      	ldr	r3, [r3, #0]
 80052f6:	4618      	mov	r0, r3
 80052f8:	f008 fa8e 	bl	800d818 <USB_ReadInterrupts>
 80052fc:	4603      	mov	r3, r0
 80052fe:	f003 0304 	and.w	r3, r3, #4
 8005302:	2b04      	cmp	r3, #4
 8005304:	d115      	bne.n	8005332 <HAL_PCD_IRQHandler+0x7b8>
    {
      temp = hpcd->Instance->GOTGINT;
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	681b      	ldr	r3, [r3, #0]
 800530a:	685b      	ldr	r3, [r3, #4]
 800530c:	61bb      	str	r3, [r7, #24]

      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 800530e:	69bb      	ldr	r3, [r7, #24]
 8005310:	f003 0304 	and.w	r3, r3, #4
 8005314:	2b00      	cmp	r3, #0
 8005316:	d002      	beq.n	800531e <HAL_PCD_IRQHandler+0x7a4>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8005318:	6878      	ldr	r0, [r7, #4]
 800531a:	f00b fe17 	bl	8010f4c <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	681b      	ldr	r3, [r3, #0]
 8005322:	6859      	ldr	r1, [r3, #4]
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	681b      	ldr	r3, [r3, #0]
 8005328:	69ba      	ldr	r2, [r7, #24]
 800532a:	430a      	orrs	r2, r1
 800532c:	605a      	str	r2, [r3, #4]
 800532e:	e000      	b.n	8005332 <HAL_PCD_IRQHandler+0x7b8>
      return;
 8005330:	bf00      	nop
    }
  }
}
 8005332:	3734      	adds	r7, #52	; 0x34
 8005334:	46bd      	mov	sp, r7
 8005336:	bd90      	pop	{r4, r7, pc}

08005338 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8005338:	b580      	push	{r7, lr}
 800533a:	b082      	sub	sp, #8
 800533c:	af00      	add	r7, sp, #0
 800533e:	6078      	str	r0, [r7, #4]
 8005340:	460b      	mov	r3, r1
 8005342:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800534a:	2b01      	cmp	r3, #1
 800534c:	d101      	bne.n	8005352 <HAL_PCD_SetAddress+0x1a>
 800534e:	2302      	movs	r3, #2
 8005350:	e013      	b.n	800537a <HAL_PCD_SetAddress+0x42>
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	2201      	movs	r2, #1
 8005356:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  hpcd->USB_Address = address;
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	78fa      	ldrb	r2, [r7, #3]
 800535e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	681b      	ldr	r3, [r3, #0]
 8005366:	78fa      	ldrb	r2, [r7, #3]
 8005368:	4611      	mov	r1, r2
 800536a:	4618      	mov	r0, r3
 800536c:	f008 f9fe 	bl	800d76c <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	2200      	movs	r2, #0
 8005374:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 8005378:	2300      	movs	r3, #0
}
 800537a:	4618      	mov	r0, r3
 800537c:	3708      	adds	r7, #8
 800537e:	46bd      	mov	sp, r7
 8005380:	bd80      	pop	{r7, pc}

08005382 <HAL_PCD_EP_Open>:
  * @param  ep_mps endpoint max packet size
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint16_t ep_mps, uint8_t ep_type)
{
 8005382:	b580      	push	{r7, lr}
 8005384:	b084      	sub	sp, #16
 8005386:	af00      	add	r7, sp, #0
 8005388:	6078      	str	r0, [r7, #4]
 800538a:	4608      	mov	r0, r1
 800538c:	4611      	mov	r1, r2
 800538e:	461a      	mov	r2, r3
 8005390:	4603      	mov	r3, r0
 8005392:	70fb      	strb	r3, [r7, #3]
 8005394:	460b      	mov	r3, r1
 8005396:	803b      	strh	r3, [r7, #0]
 8005398:	4613      	mov	r3, r2
 800539a:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 800539c:	2300      	movs	r3, #0
 800539e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80053a0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80053a4:	2b00      	cmp	r3, #0
 80053a6:	da0f      	bge.n	80053c8 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80053a8:	78fb      	ldrb	r3, [r7, #3]
 80053aa:	f003 020f 	and.w	r2, r3, #15
 80053ae:	4613      	mov	r3, r2
 80053b0:	00db      	lsls	r3, r3, #3
 80053b2:	1a9b      	subs	r3, r3, r2
 80053b4:	009b      	lsls	r3, r3, #2
 80053b6:	3338      	adds	r3, #56	; 0x38
 80053b8:	687a      	ldr	r2, [r7, #4]
 80053ba:	4413      	add	r3, r2
 80053bc:	3304      	adds	r3, #4
 80053be:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80053c0:	68fb      	ldr	r3, [r7, #12]
 80053c2:	2201      	movs	r2, #1
 80053c4:	705a      	strb	r2, [r3, #1]
 80053c6:	e00f      	b.n	80053e8 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80053c8:	78fb      	ldrb	r3, [r7, #3]
 80053ca:	f003 020f 	and.w	r2, r3, #15
 80053ce:	4613      	mov	r3, r2
 80053d0:	00db      	lsls	r3, r3, #3
 80053d2:	1a9b      	subs	r3, r3, r2
 80053d4:	009b      	lsls	r3, r3, #2
 80053d6:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80053da:	687a      	ldr	r2, [r7, #4]
 80053dc:	4413      	add	r3, r2
 80053de:	3304      	adds	r3, #4
 80053e0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80053e2:	68fb      	ldr	r3, [r7, #12]
 80053e4:	2200      	movs	r2, #0
 80053e6:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 80053e8:	78fb      	ldrb	r3, [r7, #3]
 80053ea:	f003 030f 	and.w	r3, r3, #15
 80053ee:	b2da      	uxtb	r2, r3
 80053f0:	68fb      	ldr	r3, [r7, #12]
 80053f2:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 80053f4:	883a      	ldrh	r2, [r7, #0]
 80053f6:	68fb      	ldr	r3, [r7, #12]
 80053f8:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 80053fa:	68fb      	ldr	r3, [r7, #12]
 80053fc:	78ba      	ldrb	r2, [r7, #2]
 80053fe:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8005400:	68fb      	ldr	r3, [r7, #12]
 8005402:	785b      	ldrb	r3, [r3, #1]
 8005404:	2b00      	cmp	r3, #0
 8005406:	d004      	beq.n	8005412 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8005408:	68fb      	ldr	r3, [r7, #12]
 800540a:	781b      	ldrb	r3, [r3, #0]
 800540c:	b29a      	uxth	r2, r3
 800540e:	68fb      	ldr	r3, [r7, #12]
 8005410:	80da      	strh	r2, [r3, #6]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8005412:	78bb      	ldrb	r3, [r7, #2]
 8005414:	2b02      	cmp	r3, #2
 8005416:	d102      	bne.n	800541e <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8005418:	68fb      	ldr	r3, [r7, #12]
 800541a:	2200      	movs	r2, #0
 800541c:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8005424:	2b01      	cmp	r3, #1
 8005426:	d101      	bne.n	800542c <HAL_PCD_EP_Open+0xaa>
 8005428:	2302      	movs	r3, #2
 800542a:	e00e      	b.n	800544a <HAL_PCD_EP_Open+0xc8>
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	2201      	movs	r2, #1
 8005430:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	681b      	ldr	r3, [r3, #0]
 8005438:	68f9      	ldr	r1, [r7, #12]
 800543a:	4618      	mov	r0, r3
 800543c:	f007 fb5c 	bl	800caf8 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	2200      	movs	r2, #0
 8005444:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return ret;
 8005448:	7afb      	ldrb	r3, [r7, #11]
}
 800544a:	4618      	mov	r0, r3
 800544c:	3710      	adds	r7, #16
 800544e:	46bd      	mov	sp, r7
 8005450:	bd80      	pop	{r7, pc}

08005452 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8005452:	b580      	push	{r7, lr}
 8005454:	b084      	sub	sp, #16
 8005456:	af00      	add	r7, sp, #0
 8005458:	6078      	str	r0, [r7, #4]
 800545a:	460b      	mov	r3, r1
 800545c:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800545e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005462:	2b00      	cmp	r3, #0
 8005464:	da0f      	bge.n	8005486 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005466:	78fb      	ldrb	r3, [r7, #3]
 8005468:	f003 020f 	and.w	r2, r3, #15
 800546c:	4613      	mov	r3, r2
 800546e:	00db      	lsls	r3, r3, #3
 8005470:	1a9b      	subs	r3, r3, r2
 8005472:	009b      	lsls	r3, r3, #2
 8005474:	3338      	adds	r3, #56	; 0x38
 8005476:	687a      	ldr	r2, [r7, #4]
 8005478:	4413      	add	r3, r2
 800547a:	3304      	adds	r3, #4
 800547c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800547e:	68fb      	ldr	r3, [r7, #12]
 8005480:	2201      	movs	r2, #1
 8005482:	705a      	strb	r2, [r3, #1]
 8005484:	e00f      	b.n	80054a6 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005486:	78fb      	ldrb	r3, [r7, #3]
 8005488:	f003 020f 	and.w	r2, r3, #15
 800548c:	4613      	mov	r3, r2
 800548e:	00db      	lsls	r3, r3, #3
 8005490:	1a9b      	subs	r3, r3, r2
 8005492:	009b      	lsls	r3, r3, #2
 8005494:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8005498:	687a      	ldr	r2, [r7, #4]
 800549a:	4413      	add	r3, r2
 800549c:	3304      	adds	r3, #4
 800549e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80054a0:	68fb      	ldr	r3, [r7, #12]
 80054a2:	2200      	movs	r2, #0
 80054a4:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 80054a6:	78fb      	ldrb	r3, [r7, #3]
 80054a8:	f003 030f 	and.w	r3, r3, #15
 80054ac:	b2da      	uxtb	r2, r3
 80054ae:	68fb      	ldr	r3, [r7, #12]
 80054b0:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80054b8:	2b01      	cmp	r3, #1
 80054ba:	d101      	bne.n	80054c0 <HAL_PCD_EP_Close+0x6e>
 80054bc:	2302      	movs	r3, #2
 80054be:	e00e      	b.n	80054de <HAL_PCD_EP_Close+0x8c>
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	2201      	movs	r2, #1
 80054c4:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	681b      	ldr	r3, [r3, #0]
 80054cc:	68f9      	ldr	r1, [r7, #12]
 80054ce:	4618      	mov	r0, r3
 80054d0:	f007 fb9a 	bl	800cc08 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	2200      	movs	r2, #0
 80054d8:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 80054dc:	2300      	movs	r3, #0
}
 80054de:	4618      	mov	r0, r3
 80054e0:	3710      	adds	r7, #16
 80054e2:	46bd      	mov	sp, r7
 80054e4:	bd80      	pop	{r7, pc}

080054e6 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80054e6:	b580      	push	{r7, lr}
 80054e8:	b086      	sub	sp, #24
 80054ea:	af00      	add	r7, sp, #0
 80054ec:	60f8      	str	r0, [r7, #12]
 80054ee:	607a      	str	r2, [r7, #4]
 80054f0:	603b      	str	r3, [r7, #0]
 80054f2:	460b      	mov	r3, r1
 80054f4:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80054f6:	7afb      	ldrb	r3, [r7, #11]
 80054f8:	f003 020f 	and.w	r2, r3, #15
 80054fc:	4613      	mov	r3, r2
 80054fe:	00db      	lsls	r3, r3, #3
 8005500:	1a9b      	subs	r3, r3, r2
 8005502:	009b      	lsls	r3, r3, #2
 8005504:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8005508:	68fa      	ldr	r2, [r7, #12]
 800550a:	4413      	add	r3, r2
 800550c:	3304      	adds	r3, #4
 800550e:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8005510:	697b      	ldr	r3, [r7, #20]
 8005512:	687a      	ldr	r2, [r7, #4]
 8005514:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8005516:	697b      	ldr	r3, [r7, #20]
 8005518:	683a      	ldr	r2, [r7, #0]
 800551a:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 800551c:	697b      	ldr	r3, [r7, #20]
 800551e:	2200      	movs	r2, #0
 8005520:	619a      	str	r2, [r3, #24]
  ep->is_in = 0U;
 8005522:	697b      	ldr	r3, [r7, #20]
 8005524:	2200      	movs	r2, #0
 8005526:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8005528:	7afb      	ldrb	r3, [r7, #11]
 800552a:	f003 030f 	and.w	r3, r3, #15
 800552e:	b2da      	uxtb	r2, r3
 8005530:	697b      	ldr	r3, [r7, #20]
 8005532:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8005534:	68fb      	ldr	r3, [r7, #12]
 8005536:	691b      	ldr	r3, [r3, #16]
 8005538:	2b01      	cmp	r3, #1
 800553a:	d102      	bne.n	8005542 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 800553c:	687a      	ldr	r2, [r7, #4]
 800553e:	697b      	ldr	r3, [r7, #20]
 8005540:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8005542:	7afb      	ldrb	r3, [r7, #11]
 8005544:	f003 030f 	and.w	r3, r3, #15
 8005548:	2b00      	cmp	r3, #0
 800554a:	d109      	bne.n	8005560 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800554c:	68fb      	ldr	r3, [r7, #12]
 800554e:	6818      	ldr	r0, [r3, #0]
 8005550:	68fb      	ldr	r3, [r7, #12]
 8005552:	691b      	ldr	r3, [r3, #16]
 8005554:	b2db      	uxtb	r3, r3
 8005556:	461a      	mov	r2, r3
 8005558:	6979      	ldr	r1, [r7, #20]
 800555a:	f007 fe7d 	bl	800d258 <USB_EP0StartXfer>
 800555e:	e008      	b.n	8005572 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8005560:	68fb      	ldr	r3, [r7, #12]
 8005562:	6818      	ldr	r0, [r3, #0]
 8005564:	68fb      	ldr	r3, [r7, #12]
 8005566:	691b      	ldr	r3, [r3, #16]
 8005568:	b2db      	uxtb	r3, r3
 800556a:	461a      	mov	r2, r3
 800556c:	6979      	ldr	r1, [r7, #20]
 800556e:	f007 fc27 	bl	800cdc0 <USB_EPStartXfer>
  }

  return HAL_OK;
 8005572:	2300      	movs	r3, #0
}
 8005574:	4618      	mov	r0, r3
 8005576:	3718      	adds	r7, #24
 8005578:	46bd      	mov	sp, r7
 800557a:	bd80      	pop	{r7, pc}

0800557c <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800557c:	b480      	push	{r7}
 800557e:	b083      	sub	sp, #12
 8005580:	af00      	add	r7, sp, #0
 8005582:	6078      	str	r0, [r7, #4]
 8005584:	460b      	mov	r3, r1
 8005586:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8005588:	78fb      	ldrb	r3, [r7, #3]
 800558a:	f003 020f 	and.w	r2, r3, #15
 800558e:	6879      	ldr	r1, [r7, #4]
 8005590:	4613      	mov	r3, r2
 8005592:	00db      	lsls	r3, r3, #3
 8005594:	1a9b      	subs	r3, r3, r2
 8005596:	009b      	lsls	r3, r3, #2
 8005598:	440b      	add	r3, r1
 800559a:	f503 7305 	add.w	r3, r3, #532	; 0x214
 800559e:	681b      	ldr	r3, [r3, #0]
}
 80055a0:	4618      	mov	r0, r3
 80055a2:	370c      	adds	r7, #12
 80055a4:	46bd      	mov	sp, r7
 80055a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055aa:	4770      	bx	lr

080055ac <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80055ac:	b580      	push	{r7, lr}
 80055ae:	b086      	sub	sp, #24
 80055b0:	af00      	add	r7, sp, #0
 80055b2:	60f8      	str	r0, [r7, #12]
 80055b4:	607a      	str	r2, [r7, #4]
 80055b6:	603b      	str	r3, [r7, #0]
 80055b8:	460b      	mov	r3, r1
 80055ba:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80055bc:	7afb      	ldrb	r3, [r7, #11]
 80055be:	f003 020f 	and.w	r2, r3, #15
 80055c2:	4613      	mov	r3, r2
 80055c4:	00db      	lsls	r3, r3, #3
 80055c6:	1a9b      	subs	r3, r3, r2
 80055c8:	009b      	lsls	r3, r3, #2
 80055ca:	3338      	adds	r3, #56	; 0x38
 80055cc:	68fa      	ldr	r2, [r7, #12]
 80055ce:	4413      	add	r3, r2
 80055d0:	3304      	adds	r3, #4
 80055d2:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80055d4:	697b      	ldr	r3, [r7, #20]
 80055d6:	687a      	ldr	r2, [r7, #4]
 80055d8:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 80055da:	697b      	ldr	r3, [r7, #20]
 80055dc:	683a      	ldr	r2, [r7, #0]
 80055de:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 80055e0:	697b      	ldr	r3, [r7, #20]
 80055e2:	2200      	movs	r2, #0
 80055e4:	619a      	str	r2, [r3, #24]
  ep->is_in = 1U;
 80055e6:	697b      	ldr	r3, [r7, #20]
 80055e8:	2201      	movs	r2, #1
 80055ea:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80055ec:	7afb      	ldrb	r3, [r7, #11]
 80055ee:	f003 030f 	and.w	r3, r3, #15
 80055f2:	b2da      	uxtb	r2, r3
 80055f4:	697b      	ldr	r3, [r7, #20]
 80055f6:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80055f8:	68fb      	ldr	r3, [r7, #12]
 80055fa:	691b      	ldr	r3, [r3, #16]
 80055fc:	2b01      	cmp	r3, #1
 80055fe:	d102      	bne.n	8005606 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8005600:	687a      	ldr	r2, [r7, #4]
 8005602:	697b      	ldr	r3, [r7, #20]
 8005604:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8005606:	7afb      	ldrb	r3, [r7, #11]
 8005608:	f003 030f 	and.w	r3, r3, #15
 800560c:	2b00      	cmp	r3, #0
 800560e:	d109      	bne.n	8005624 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8005610:	68fb      	ldr	r3, [r7, #12]
 8005612:	6818      	ldr	r0, [r3, #0]
 8005614:	68fb      	ldr	r3, [r7, #12]
 8005616:	691b      	ldr	r3, [r3, #16]
 8005618:	b2db      	uxtb	r3, r3
 800561a:	461a      	mov	r2, r3
 800561c:	6979      	ldr	r1, [r7, #20]
 800561e:	f007 fe1b 	bl	800d258 <USB_EP0StartXfer>
 8005622:	e008      	b.n	8005636 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8005624:	68fb      	ldr	r3, [r7, #12]
 8005626:	6818      	ldr	r0, [r3, #0]
 8005628:	68fb      	ldr	r3, [r7, #12]
 800562a:	691b      	ldr	r3, [r3, #16]
 800562c:	b2db      	uxtb	r3, r3
 800562e:	461a      	mov	r2, r3
 8005630:	6979      	ldr	r1, [r7, #20]
 8005632:	f007 fbc5 	bl	800cdc0 <USB_EPStartXfer>
  }

  return HAL_OK;
 8005636:	2300      	movs	r3, #0
}
 8005638:	4618      	mov	r0, r3
 800563a:	3718      	adds	r7, #24
 800563c:	46bd      	mov	sp, r7
 800563e:	bd80      	pop	{r7, pc}

08005640 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8005640:	b580      	push	{r7, lr}
 8005642:	b084      	sub	sp, #16
 8005644:	af00      	add	r7, sp, #0
 8005646:	6078      	str	r0, [r7, #4]
 8005648:	460b      	mov	r3, r1
 800564a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 800564c:	78fb      	ldrb	r3, [r7, #3]
 800564e:	f003 020f 	and.w	r2, r3, #15
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	685b      	ldr	r3, [r3, #4]
 8005656:	429a      	cmp	r2, r3
 8005658:	d901      	bls.n	800565e <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 800565a:	2301      	movs	r3, #1
 800565c:	e050      	b.n	8005700 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800565e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005662:	2b00      	cmp	r3, #0
 8005664:	da0f      	bge.n	8005686 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005666:	78fb      	ldrb	r3, [r7, #3]
 8005668:	f003 020f 	and.w	r2, r3, #15
 800566c:	4613      	mov	r3, r2
 800566e:	00db      	lsls	r3, r3, #3
 8005670:	1a9b      	subs	r3, r3, r2
 8005672:	009b      	lsls	r3, r3, #2
 8005674:	3338      	adds	r3, #56	; 0x38
 8005676:	687a      	ldr	r2, [r7, #4]
 8005678:	4413      	add	r3, r2
 800567a:	3304      	adds	r3, #4
 800567c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800567e:	68fb      	ldr	r3, [r7, #12]
 8005680:	2201      	movs	r2, #1
 8005682:	705a      	strb	r2, [r3, #1]
 8005684:	e00d      	b.n	80056a2 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8005686:	78fa      	ldrb	r2, [r7, #3]
 8005688:	4613      	mov	r3, r2
 800568a:	00db      	lsls	r3, r3, #3
 800568c:	1a9b      	subs	r3, r3, r2
 800568e:	009b      	lsls	r3, r3, #2
 8005690:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8005694:	687a      	ldr	r2, [r7, #4]
 8005696:	4413      	add	r3, r2
 8005698:	3304      	adds	r3, #4
 800569a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800569c:	68fb      	ldr	r3, [r7, #12]
 800569e:	2200      	movs	r2, #0
 80056a0:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 80056a2:	68fb      	ldr	r3, [r7, #12]
 80056a4:	2201      	movs	r2, #1
 80056a6:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80056a8:	78fb      	ldrb	r3, [r7, #3]
 80056aa:	f003 030f 	and.w	r3, r3, #15
 80056ae:	b2da      	uxtb	r2, r3
 80056b0:	68fb      	ldr	r3, [r7, #12]
 80056b2:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80056ba:	2b01      	cmp	r3, #1
 80056bc:	d101      	bne.n	80056c2 <HAL_PCD_EP_SetStall+0x82>
 80056be:	2302      	movs	r3, #2
 80056c0:	e01e      	b.n	8005700 <HAL_PCD_EP_SetStall+0xc0>
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	2201      	movs	r2, #1
 80056c6:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	681b      	ldr	r3, [r3, #0]
 80056ce:	68f9      	ldr	r1, [r7, #12]
 80056d0:	4618      	mov	r0, r3
 80056d2:	f007 ff77 	bl	800d5c4 <USB_EPSetStall>
  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80056d6:	78fb      	ldrb	r3, [r7, #3]
 80056d8:	f003 030f 	and.w	r3, r3, #15
 80056dc:	2b00      	cmp	r3, #0
 80056de:	d10a      	bne.n	80056f6 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	6818      	ldr	r0, [r3, #0]
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	691b      	ldr	r3, [r3, #16]
 80056e8:	b2d9      	uxtb	r1, r3
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80056f0:	461a      	mov	r2, r3
 80056f2:	f008 f957 	bl	800d9a4 <USB_EP0_OutStart>
  }
  __HAL_UNLOCK(hpcd);
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	2200      	movs	r2, #0
 80056fa:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 80056fe:	2300      	movs	r3, #0
}
 8005700:	4618      	mov	r0, r3
 8005702:	3710      	adds	r7, #16
 8005704:	46bd      	mov	sp, r7
 8005706:	bd80      	pop	{r7, pc}

08005708 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8005708:	b580      	push	{r7, lr}
 800570a:	b084      	sub	sp, #16
 800570c:	af00      	add	r7, sp, #0
 800570e:	6078      	str	r0, [r7, #4]
 8005710:	460b      	mov	r3, r1
 8005712:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8005714:	78fb      	ldrb	r3, [r7, #3]
 8005716:	f003 020f 	and.w	r2, r3, #15
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	685b      	ldr	r3, [r3, #4]
 800571e:	429a      	cmp	r2, r3
 8005720:	d901      	bls.n	8005726 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8005722:	2301      	movs	r3, #1
 8005724:	e042      	b.n	80057ac <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8005726:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800572a:	2b00      	cmp	r3, #0
 800572c:	da0f      	bge.n	800574e <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800572e:	78fb      	ldrb	r3, [r7, #3]
 8005730:	f003 020f 	and.w	r2, r3, #15
 8005734:	4613      	mov	r3, r2
 8005736:	00db      	lsls	r3, r3, #3
 8005738:	1a9b      	subs	r3, r3, r2
 800573a:	009b      	lsls	r3, r3, #2
 800573c:	3338      	adds	r3, #56	; 0x38
 800573e:	687a      	ldr	r2, [r7, #4]
 8005740:	4413      	add	r3, r2
 8005742:	3304      	adds	r3, #4
 8005744:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8005746:	68fb      	ldr	r3, [r7, #12]
 8005748:	2201      	movs	r2, #1
 800574a:	705a      	strb	r2, [r3, #1]
 800574c:	e00f      	b.n	800576e <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800574e:	78fb      	ldrb	r3, [r7, #3]
 8005750:	f003 020f 	and.w	r2, r3, #15
 8005754:	4613      	mov	r3, r2
 8005756:	00db      	lsls	r3, r3, #3
 8005758:	1a9b      	subs	r3, r3, r2
 800575a:	009b      	lsls	r3, r3, #2
 800575c:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8005760:	687a      	ldr	r2, [r7, #4]
 8005762:	4413      	add	r3, r2
 8005764:	3304      	adds	r3, #4
 8005766:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8005768:	68fb      	ldr	r3, [r7, #12]
 800576a:	2200      	movs	r2, #0
 800576c:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 800576e:	68fb      	ldr	r3, [r7, #12]
 8005770:	2200      	movs	r2, #0
 8005772:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8005774:	78fb      	ldrb	r3, [r7, #3]
 8005776:	f003 030f 	and.w	r3, r3, #15
 800577a:	b2da      	uxtb	r2, r3
 800577c:	68fb      	ldr	r3, [r7, #12]
 800577e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8005786:	2b01      	cmp	r3, #1
 8005788:	d101      	bne.n	800578e <HAL_PCD_EP_ClrStall+0x86>
 800578a:	2302      	movs	r3, #2
 800578c:	e00e      	b.n	80057ac <HAL_PCD_EP_ClrStall+0xa4>
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	2201      	movs	r2, #1
 8005792:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	681b      	ldr	r3, [r3, #0]
 800579a:	68f9      	ldr	r1, [r7, #12]
 800579c:	4618      	mov	r0, r3
 800579e:	f007 ff7f 	bl	800d6a0 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	2200      	movs	r2, #0
 80057a6:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 80057aa:	2300      	movs	r3, #0
}
 80057ac:	4618      	mov	r0, r3
 80057ae:	3710      	adds	r7, #16
 80057b0:	46bd      	mov	sp, r7
 80057b2:	bd80      	pop	{r7, pc}

080057b4 <HAL_PCD_EP_Flush>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Flush(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80057b4:	b580      	push	{r7, lr}
 80057b6:	b082      	sub	sp, #8
 80057b8:	af00      	add	r7, sp, #0
 80057ba:	6078      	str	r0, [r7, #4]
 80057bc:	460b      	mov	r3, r1
 80057be:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80057c6:	2b01      	cmp	r3, #1
 80057c8:	d101      	bne.n	80057ce <HAL_PCD_EP_Flush+0x1a>
 80057ca:	2302      	movs	r3, #2
 80057cc:	e01b      	b.n	8005806 <HAL_PCD_EP_Flush+0x52>
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	2201      	movs	r2, #1
 80057d2:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  if ((ep_addr & 0x80U) == 0x80U)
 80057d6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80057da:	2b00      	cmp	r3, #0
 80057dc:	da09      	bge.n	80057f2 <HAL_PCD_EP_Flush+0x3e>
  {
    (void)USB_FlushTxFifo(hpcd->Instance, (uint32_t)ep_addr & EP_ADDR_MSK);
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	681a      	ldr	r2, [r3, #0]
 80057e2:	78fb      	ldrb	r3, [r7, #3]
 80057e4:	f003 030f 	and.w	r3, r3, #15
 80057e8:	4619      	mov	r1, r3
 80057ea:	4610      	mov	r0, r2
 80057ec:	f007 f8fe 	bl	800c9ec <USB_FlushTxFifo>
 80057f0:	e004      	b.n	80057fc <HAL_PCD_EP_Flush+0x48>
  }
  else
  {
    (void)USB_FlushRxFifo(hpcd->Instance);
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	681b      	ldr	r3, [r3, #0]
 80057f6:	4618      	mov	r0, r3
 80057f8:	f007 f91e 	bl	800ca38 <USB_FlushRxFifo>
  }

  __HAL_UNLOCK(hpcd);
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	2200      	movs	r2, #0
 8005800:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8005804:	2300      	movs	r3, #0
}
 8005806:	4618      	mov	r0, r3
 8005808:	3708      	adds	r7, #8
 800580a:	46bd      	mov	sp, r7
 800580c:	bd80      	pop	{r7, pc}

0800580e <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800580e:	b580      	push	{r7, lr}
 8005810:	b08a      	sub	sp, #40	; 0x28
 8005812:	af02      	add	r7, sp, #8
 8005814:	6078      	str	r0, [r7, #4]
 8005816:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	681b      	ldr	r3, [r3, #0]
 800581c:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800581e:	697b      	ldr	r3, [r7, #20]
 8005820:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8005822:	683a      	ldr	r2, [r7, #0]
 8005824:	4613      	mov	r3, r2
 8005826:	00db      	lsls	r3, r3, #3
 8005828:	1a9b      	subs	r3, r3, r2
 800582a:	009b      	lsls	r3, r3, #2
 800582c:	3338      	adds	r3, #56	; 0x38
 800582e:	687a      	ldr	r2, [r7, #4]
 8005830:	4413      	add	r3, r2
 8005832:	3304      	adds	r3, #4
 8005834:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8005836:	68fb      	ldr	r3, [r7, #12]
 8005838:	699a      	ldr	r2, [r3, #24]
 800583a:	68fb      	ldr	r3, [r7, #12]
 800583c:	695b      	ldr	r3, [r3, #20]
 800583e:	429a      	cmp	r2, r3
 8005840:	d901      	bls.n	8005846 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8005842:	2301      	movs	r3, #1
 8005844:	e06c      	b.n	8005920 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8005846:	68fb      	ldr	r3, [r7, #12]
 8005848:	695a      	ldr	r2, [r3, #20]
 800584a:	68fb      	ldr	r3, [r7, #12]
 800584c:	699b      	ldr	r3, [r3, #24]
 800584e:	1ad3      	subs	r3, r2, r3
 8005850:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8005852:	68fb      	ldr	r3, [r7, #12]
 8005854:	689b      	ldr	r3, [r3, #8]
 8005856:	69fa      	ldr	r2, [r7, #28]
 8005858:	429a      	cmp	r2, r3
 800585a:	d902      	bls.n	8005862 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 800585c:	68fb      	ldr	r3, [r7, #12]
 800585e:	689b      	ldr	r3, [r3, #8]
 8005860:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8005862:	69fb      	ldr	r3, [r7, #28]
 8005864:	3303      	adds	r3, #3
 8005866:	089b      	lsrs	r3, r3, #2
 8005868:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800586a:	e02b      	b.n	80058c4 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 800586c:	68fb      	ldr	r3, [r7, #12]
 800586e:	695a      	ldr	r2, [r3, #20]
 8005870:	68fb      	ldr	r3, [r7, #12]
 8005872:	699b      	ldr	r3, [r3, #24]
 8005874:	1ad3      	subs	r3, r2, r3
 8005876:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8005878:	68fb      	ldr	r3, [r7, #12]
 800587a:	689b      	ldr	r3, [r3, #8]
 800587c:	69fa      	ldr	r2, [r7, #28]
 800587e:	429a      	cmp	r2, r3
 8005880:	d902      	bls.n	8005888 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8005882:	68fb      	ldr	r3, [r7, #12]
 8005884:	689b      	ldr	r3, [r3, #8]
 8005886:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8005888:	69fb      	ldr	r3, [r7, #28]
 800588a:	3303      	adds	r3, #3
 800588c:	089b      	lsrs	r3, r3, #2
 800588e:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8005890:	68fb      	ldr	r3, [r7, #12]
 8005892:	68d9      	ldr	r1, [r3, #12]
 8005894:	683b      	ldr	r3, [r7, #0]
 8005896:	b2da      	uxtb	r2, r3
 8005898:	69fb      	ldr	r3, [r7, #28]
 800589a:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80058a0:	b2db      	uxtb	r3, r3
 80058a2:	9300      	str	r3, [sp, #0]
 80058a4:	4603      	mov	r3, r0
 80058a6:	6978      	ldr	r0, [r7, #20]
 80058a8:	f007 fe2e 	bl	800d508 <USB_WritePacket>

    ep->xfer_buff  += len;
 80058ac:	68fb      	ldr	r3, [r7, #12]
 80058ae:	68da      	ldr	r2, [r3, #12]
 80058b0:	69fb      	ldr	r3, [r7, #28]
 80058b2:	441a      	add	r2, r3
 80058b4:	68fb      	ldr	r3, [r7, #12]
 80058b6:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 80058b8:	68fb      	ldr	r3, [r7, #12]
 80058ba:	699a      	ldr	r2, [r3, #24]
 80058bc:	69fb      	ldr	r3, [r7, #28]
 80058be:	441a      	add	r2, r3
 80058c0:	68fb      	ldr	r3, [r7, #12]
 80058c2:	619a      	str	r2, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80058c4:	683b      	ldr	r3, [r7, #0]
 80058c6:	015a      	lsls	r2, r3, #5
 80058c8:	693b      	ldr	r3, [r7, #16]
 80058ca:	4413      	add	r3, r2
 80058cc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80058d0:	699b      	ldr	r3, [r3, #24]
 80058d2:	b29b      	uxth	r3, r3
 80058d4:	69ba      	ldr	r2, [r7, #24]
 80058d6:	429a      	cmp	r2, r3
 80058d8:	d809      	bhi.n	80058ee <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80058da:	68fb      	ldr	r3, [r7, #12]
 80058dc:	699a      	ldr	r2, [r3, #24]
 80058de:	68fb      	ldr	r3, [r7, #12]
 80058e0:	695b      	ldr	r3, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80058e2:	429a      	cmp	r2, r3
 80058e4:	d203      	bcs.n	80058ee <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80058e6:	68fb      	ldr	r3, [r7, #12]
 80058e8:	695b      	ldr	r3, [r3, #20]
 80058ea:	2b00      	cmp	r3, #0
 80058ec:	d1be      	bne.n	800586c <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 80058ee:	68fb      	ldr	r3, [r7, #12]
 80058f0:	695a      	ldr	r2, [r3, #20]
 80058f2:	68fb      	ldr	r3, [r7, #12]
 80058f4:	699b      	ldr	r3, [r3, #24]
 80058f6:	429a      	cmp	r2, r3
 80058f8:	d811      	bhi.n	800591e <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80058fa:	683b      	ldr	r3, [r7, #0]
 80058fc:	f003 030f 	and.w	r3, r3, #15
 8005900:	2201      	movs	r2, #1
 8005902:	fa02 f303 	lsl.w	r3, r2, r3
 8005906:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8005908:	693b      	ldr	r3, [r7, #16]
 800590a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800590e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005910:	68bb      	ldr	r3, [r7, #8]
 8005912:	43db      	mvns	r3, r3
 8005914:	6939      	ldr	r1, [r7, #16]
 8005916:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800591a:	4013      	ands	r3, r2
 800591c:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 800591e:	2300      	movs	r3, #0
}
 8005920:	4618      	mov	r0, r3
 8005922:	3720      	adds	r7, #32
 8005924:	46bd      	mov	sp, r7
 8005926:	bd80      	pop	{r7, pc}

08005928 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8005928:	b580      	push	{r7, lr}
 800592a:	b086      	sub	sp, #24
 800592c:	af00      	add	r7, sp, #0
 800592e:	6078      	str	r0, [r7, #4]
 8005930:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	681b      	ldr	r3, [r3, #0]
 8005936:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005938:	697b      	ldr	r3, [r7, #20]
 800593a:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800593c:	697b      	ldr	r3, [r7, #20]
 800593e:	333c      	adds	r3, #60	; 0x3c
 8005940:	3304      	adds	r3, #4
 8005942:	681b      	ldr	r3, [r3, #0]
 8005944:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8005946:	683b      	ldr	r3, [r7, #0]
 8005948:	015a      	lsls	r2, r3, #5
 800594a:	693b      	ldr	r3, [r7, #16]
 800594c:	4413      	add	r3, r2
 800594e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005952:	689b      	ldr	r3, [r3, #8]
 8005954:	60bb      	str	r3, [r7, #8]

  if (hpcd->Init.dma_enable == 1U)
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	691b      	ldr	r3, [r3, #16]
 800595a:	2b01      	cmp	r3, #1
 800595c:	f040 80a0 	bne.w	8005aa0 <PCD_EP_OutXfrComplete_int+0x178>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8005960:	68bb      	ldr	r3, [r7, #8]
 8005962:	f003 0308 	and.w	r3, r3, #8
 8005966:	2b00      	cmp	r3, #0
 8005968:	d015      	beq.n	8005996 <PCD_EP_OutXfrComplete_int+0x6e>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800596a:	68fb      	ldr	r3, [r7, #12]
 800596c:	4a72      	ldr	r2, [pc, #456]	; (8005b38 <PCD_EP_OutXfrComplete_int+0x210>)
 800596e:	4293      	cmp	r3, r2
 8005970:	f240 80dd 	bls.w	8005b2e <PCD_EP_OutXfrComplete_int+0x206>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8005974:	68bb      	ldr	r3, [r7, #8]
 8005976:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800597a:	2b00      	cmp	r3, #0
 800597c:	f000 80d7 	beq.w	8005b2e <PCD_EP_OutXfrComplete_int+0x206>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8005980:	683b      	ldr	r3, [r7, #0]
 8005982:	015a      	lsls	r2, r3, #5
 8005984:	693b      	ldr	r3, [r7, #16]
 8005986:	4413      	add	r3, r2
 8005988:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800598c:	461a      	mov	r2, r3
 800598e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005992:	6093      	str	r3, [r2, #8]
 8005994:	e0cb      	b.n	8005b2e <PCD_EP_OutXfrComplete_int+0x206>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8005996:	68bb      	ldr	r3, [r7, #8]
 8005998:	f003 0320 	and.w	r3, r3, #32
 800599c:	2b00      	cmp	r3, #0
 800599e:	d009      	beq.n	80059b4 <PCD_EP_OutXfrComplete_int+0x8c>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80059a0:	683b      	ldr	r3, [r7, #0]
 80059a2:	015a      	lsls	r2, r3, #5
 80059a4:	693b      	ldr	r3, [r7, #16]
 80059a6:	4413      	add	r3, r2
 80059a8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80059ac:	461a      	mov	r2, r3
 80059ae:	2320      	movs	r3, #32
 80059b0:	6093      	str	r3, [r2, #8]
 80059b2:	e0bc      	b.n	8005b2e <PCD_EP_OutXfrComplete_int+0x206>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 80059b4:	68bb      	ldr	r3, [r7, #8]
 80059b6:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80059ba:	2b00      	cmp	r3, #0
 80059bc:	f040 80b7 	bne.w	8005b2e <PCD_EP_OutXfrComplete_int+0x206>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80059c0:	68fb      	ldr	r3, [r7, #12]
 80059c2:	4a5d      	ldr	r2, [pc, #372]	; (8005b38 <PCD_EP_OutXfrComplete_int+0x210>)
 80059c4:	4293      	cmp	r3, r2
 80059c6:	d90f      	bls.n	80059e8 <PCD_EP_OutXfrComplete_int+0xc0>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80059c8:	68bb      	ldr	r3, [r7, #8]
 80059ca:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80059ce:	2b00      	cmp	r3, #0
 80059d0:	d00a      	beq.n	80059e8 <PCD_EP_OutXfrComplete_int+0xc0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80059d2:	683b      	ldr	r3, [r7, #0]
 80059d4:	015a      	lsls	r2, r3, #5
 80059d6:	693b      	ldr	r3, [r7, #16]
 80059d8:	4413      	add	r3, r2
 80059da:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80059de:	461a      	mov	r2, r3
 80059e0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80059e4:	6093      	str	r3, [r2, #8]
 80059e6:	e0a2      	b.n	8005b2e <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        /* out data packet received over EP0 */
        hpcd->OUT_ep[epnum].xfer_count =
          hpcd->OUT_ep[epnum].maxpacket -
 80059e8:	6879      	ldr	r1, [r7, #4]
 80059ea:	683a      	ldr	r2, [r7, #0]
 80059ec:	4613      	mov	r3, r2
 80059ee:	00db      	lsls	r3, r3, #3
 80059f0:	1a9b      	subs	r3, r3, r2
 80059f2:	009b      	lsls	r3, r3, #2
 80059f4:	440b      	add	r3, r1
 80059f6:	f503 7301 	add.w	r3, r3, #516	; 0x204
 80059fa:	681a      	ldr	r2, [r3, #0]
          (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 80059fc:	683b      	ldr	r3, [r7, #0]
 80059fe:	0159      	lsls	r1, r3, #5
 8005a00:	693b      	ldr	r3, [r7, #16]
 8005a02:	440b      	add	r3, r1
 8005a04:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005a08:	691b      	ldr	r3, [r3, #16]
 8005a0a:	f3c3 0312 	ubfx	r3, r3, #0, #19
          hpcd->OUT_ep[epnum].maxpacket -
 8005a0e:	1ad1      	subs	r1, r2, r3
        hpcd->OUT_ep[epnum].xfer_count =
 8005a10:	6878      	ldr	r0, [r7, #4]
 8005a12:	683a      	ldr	r2, [r7, #0]
 8005a14:	4613      	mov	r3, r2
 8005a16:	00db      	lsls	r3, r3, #3
 8005a18:	1a9b      	subs	r3, r3, r2
 8005a1a:	009b      	lsls	r3, r3, #2
 8005a1c:	4403      	add	r3, r0
 8005a1e:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8005a22:	6019      	str	r1, [r3, #0]

        hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;
 8005a24:	6879      	ldr	r1, [r7, #4]
 8005a26:	683a      	ldr	r2, [r7, #0]
 8005a28:	4613      	mov	r3, r2
 8005a2a:	00db      	lsls	r3, r3, #3
 8005a2c:	1a9b      	subs	r3, r3, r2
 8005a2e:	009b      	lsls	r3, r3, #2
 8005a30:	440b      	add	r3, r1
 8005a32:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8005a36:	6819      	ldr	r1, [r3, #0]
 8005a38:	6878      	ldr	r0, [r7, #4]
 8005a3a:	683a      	ldr	r2, [r7, #0]
 8005a3c:	4613      	mov	r3, r2
 8005a3e:	00db      	lsls	r3, r3, #3
 8005a40:	1a9b      	subs	r3, r3, r2
 8005a42:	009b      	lsls	r3, r3, #2
 8005a44:	4403      	add	r3, r0
 8005a46:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8005a4a:	681b      	ldr	r3, [r3, #0]
 8005a4c:	4419      	add	r1, r3
 8005a4e:	6878      	ldr	r0, [r7, #4]
 8005a50:	683a      	ldr	r2, [r7, #0]
 8005a52:	4613      	mov	r3, r2
 8005a54:	00db      	lsls	r3, r3, #3
 8005a56:	1a9b      	subs	r3, r3, r2
 8005a58:	009b      	lsls	r3, r3, #2
 8005a5a:	4403      	add	r3, r0
 8005a5c:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8005a60:	6019      	str	r1, [r3, #0]

        if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8005a62:	683b      	ldr	r3, [r7, #0]
 8005a64:	2b00      	cmp	r3, #0
 8005a66:	d114      	bne.n	8005a92 <PCD_EP_OutXfrComplete_int+0x16a>
 8005a68:	6879      	ldr	r1, [r7, #4]
 8005a6a:	683a      	ldr	r2, [r7, #0]
 8005a6c:	4613      	mov	r3, r2
 8005a6e:	00db      	lsls	r3, r3, #3
 8005a70:	1a9b      	subs	r3, r3, r2
 8005a72:	009b      	lsls	r3, r3, #2
 8005a74:	440b      	add	r3, r1
 8005a76:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8005a7a:	681b      	ldr	r3, [r3, #0]
 8005a7c:	2b00      	cmp	r3, #0
 8005a7e:	d108      	bne.n	8005a92 <PCD_EP_OutXfrComplete_int+0x16a>
        {
          /* this is ZLP, so prepare EP0 for next setup */
          (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	6818      	ldr	r0, [r3, #0]
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8005a8a:	461a      	mov	r2, r3
 8005a8c:	2101      	movs	r1, #1
 8005a8e:	f007 ff89 	bl	800d9a4 <USB_EP0_OutStart>
        }
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8005a92:	683b      	ldr	r3, [r7, #0]
 8005a94:	b2db      	uxtb	r3, r3
 8005a96:	4619      	mov	r1, r3
 8005a98:	6878      	ldr	r0, [r7, #4]
 8005a9a:	f00b f985 	bl	8010da8 <HAL_PCD_DataOutStageCallback>
 8005a9e:	e046      	b.n	8005b2e <PCD_EP_OutXfrComplete_int+0x206>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8005aa0:	68fb      	ldr	r3, [r7, #12]
 8005aa2:	4a26      	ldr	r2, [pc, #152]	; (8005b3c <PCD_EP_OutXfrComplete_int+0x214>)
 8005aa4:	4293      	cmp	r3, r2
 8005aa6:	d124      	bne.n	8005af2 <PCD_EP_OutXfrComplete_int+0x1ca>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8005aa8:	68bb      	ldr	r3, [r7, #8]
 8005aaa:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005aae:	2b00      	cmp	r3, #0
 8005ab0:	d00a      	beq.n	8005ac8 <PCD_EP_OutXfrComplete_int+0x1a0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8005ab2:	683b      	ldr	r3, [r7, #0]
 8005ab4:	015a      	lsls	r2, r3, #5
 8005ab6:	693b      	ldr	r3, [r7, #16]
 8005ab8:	4413      	add	r3, r2
 8005aba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005abe:	461a      	mov	r2, r3
 8005ac0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005ac4:	6093      	str	r3, [r2, #8]
 8005ac6:	e032      	b.n	8005b2e <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8005ac8:	68bb      	ldr	r3, [r7, #8]
 8005aca:	f003 0320 	and.w	r3, r3, #32
 8005ace:	2b00      	cmp	r3, #0
 8005ad0:	d008      	beq.n	8005ae4 <PCD_EP_OutXfrComplete_int+0x1bc>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8005ad2:	683b      	ldr	r3, [r7, #0]
 8005ad4:	015a      	lsls	r2, r3, #5
 8005ad6:	693b      	ldr	r3, [r7, #16]
 8005ad8:	4413      	add	r3, r2
 8005ada:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005ade:	461a      	mov	r2, r3
 8005ae0:	2320      	movs	r3, #32
 8005ae2:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8005ae4:	683b      	ldr	r3, [r7, #0]
 8005ae6:	b2db      	uxtb	r3, r3
 8005ae8:	4619      	mov	r1, r3
 8005aea:	6878      	ldr	r0, [r7, #4]
 8005aec:	f00b f95c 	bl	8010da8 <HAL_PCD_DataOutStageCallback>
 8005af0:	e01d      	b.n	8005b2e <PCD_EP_OutXfrComplete_int+0x206>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8005af2:	683b      	ldr	r3, [r7, #0]
 8005af4:	2b00      	cmp	r3, #0
 8005af6:	d114      	bne.n	8005b22 <PCD_EP_OutXfrComplete_int+0x1fa>
 8005af8:	6879      	ldr	r1, [r7, #4]
 8005afa:	683a      	ldr	r2, [r7, #0]
 8005afc:	4613      	mov	r3, r2
 8005afe:	00db      	lsls	r3, r3, #3
 8005b00:	1a9b      	subs	r3, r3, r2
 8005b02:	009b      	lsls	r3, r3, #2
 8005b04:	440b      	add	r3, r1
 8005b06:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8005b0a:	681b      	ldr	r3, [r3, #0]
 8005b0c:	2b00      	cmp	r3, #0
 8005b0e:	d108      	bne.n	8005b22 <PCD_EP_OutXfrComplete_int+0x1fa>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	6818      	ldr	r0, [r3, #0]
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8005b1a:	461a      	mov	r2, r3
 8005b1c:	2100      	movs	r1, #0
 8005b1e:	f007 ff41 	bl	800d9a4 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8005b22:	683b      	ldr	r3, [r7, #0]
 8005b24:	b2db      	uxtb	r3, r3
 8005b26:	4619      	mov	r1, r3
 8005b28:	6878      	ldr	r0, [r7, #4]
 8005b2a:	f00b f93d 	bl	8010da8 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8005b2e:	2300      	movs	r3, #0
}
 8005b30:	4618      	mov	r0, r3
 8005b32:	3718      	adds	r7, #24
 8005b34:	46bd      	mov	sp, r7
 8005b36:	bd80      	pop	{r7, pc}
 8005b38:	4f54300a 	.word	0x4f54300a
 8005b3c:	4f54310a 	.word	0x4f54310a

08005b40 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8005b40:	b580      	push	{r7, lr}
 8005b42:	b086      	sub	sp, #24
 8005b44:	af00      	add	r7, sp, #0
 8005b46:	6078      	str	r0, [r7, #4]
 8005b48:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	681b      	ldr	r3, [r3, #0]
 8005b4e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005b50:	697b      	ldr	r3, [r7, #20]
 8005b52:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8005b54:	697b      	ldr	r3, [r7, #20]
 8005b56:	333c      	adds	r3, #60	; 0x3c
 8005b58:	3304      	adds	r3, #4
 8005b5a:	681b      	ldr	r3, [r3, #0]
 8005b5c:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8005b5e:	683b      	ldr	r3, [r7, #0]
 8005b60:	015a      	lsls	r2, r3, #5
 8005b62:	693b      	ldr	r3, [r7, #16]
 8005b64:	4413      	add	r3, r2
 8005b66:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005b6a:	689b      	ldr	r3, [r3, #8]
 8005b6c:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005b6e:	68fb      	ldr	r3, [r7, #12]
 8005b70:	4a15      	ldr	r2, [pc, #84]	; (8005bc8 <PCD_EP_OutSetupPacket_int+0x88>)
 8005b72:	4293      	cmp	r3, r2
 8005b74:	d90e      	bls.n	8005b94 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8005b76:	68bb      	ldr	r3, [r7, #8]
 8005b78:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005b7c:	2b00      	cmp	r3, #0
 8005b7e:	d009      	beq.n	8005b94 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8005b80:	683b      	ldr	r3, [r7, #0]
 8005b82:	015a      	lsls	r2, r3, #5
 8005b84:	693b      	ldr	r3, [r7, #16]
 8005b86:	4413      	add	r3, r2
 8005b88:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005b8c:	461a      	mov	r2, r3
 8005b8e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005b92:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8005b94:	6878      	ldr	r0, [r7, #4]
 8005b96:	f00b f8f5 	bl	8010d84 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8005b9a:	68fb      	ldr	r3, [r7, #12]
 8005b9c:	4a0a      	ldr	r2, [pc, #40]	; (8005bc8 <PCD_EP_OutSetupPacket_int+0x88>)
 8005b9e:	4293      	cmp	r3, r2
 8005ba0:	d90c      	bls.n	8005bbc <PCD_EP_OutSetupPacket_int+0x7c>
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	691b      	ldr	r3, [r3, #16]
 8005ba6:	2b01      	cmp	r3, #1
 8005ba8:	d108      	bne.n	8005bbc <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	6818      	ldr	r0, [r3, #0]
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8005bb4:	461a      	mov	r2, r3
 8005bb6:	2101      	movs	r1, #1
 8005bb8:	f007 fef4 	bl	800d9a4 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8005bbc:	2300      	movs	r3, #0
}
 8005bbe:	4618      	mov	r0, r3
 8005bc0:	3718      	adds	r7, #24
 8005bc2:	46bd      	mov	sp, r7
 8005bc4:	bd80      	pop	{r7, pc}
 8005bc6:	bf00      	nop
 8005bc8:	4f54300a 	.word	0x4f54300a

08005bcc <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8005bcc:	b480      	push	{r7}
 8005bce:	b085      	sub	sp, #20
 8005bd0:	af00      	add	r7, sp, #0
 8005bd2:	6078      	str	r0, [r7, #4]
 8005bd4:	460b      	mov	r3, r1
 8005bd6:	70fb      	strb	r3, [r7, #3]
 8005bd8:	4613      	mov	r3, r2
 8005bda:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	681b      	ldr	r3, [r3, #0]
 8005be0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005be2:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8005be4:	78fb      	ldrb	r3, [r7, #3]
 8005be6:	2b00      	cmp	r3, #0
 8005be8:	d107      	bne.n	8005bfa <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8005bea:	883b      	ldrh	r3, [r7, #0]
 8005bec:	0419      	lsls	r1, r3, #16
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	681b      	ldr	r3, [r3, #0]
 8005bf2:	68ba      	ldr	r2, [r7, #8]
 8005bf4:	430a      	orrs	r2, r1
 8005bf6:	629a      	str	r2, [r3, #40]	; 0x28
 8005bf8:	e028      	b.n	8005c4c <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	681b      	ldr	r3, [r3, #0]
 8005bfe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005c00:	0c1b      	lsrs	r3, r3, #16
 8005c02:	68ba      	ldr	r2, [r7, #8]
 8005c04:	4413      	add	r3, r2
 8005c06:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8005c08:	2300      	movs	r3, #0
 8005c0a:	73fb      	strb	r3, [r7, #15]
 8005c0c:	e00d      	b.n	8005c2a <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	681a      	ldr	r2, [r3, #0]
 8005c12:	7bfb      	ldrb	r3, [r7, #15]
 8005c14:	3340      	adds	r3, #64	; 0x40
 8005c16:	009b      	lsls	r3, r3, #2
 8005c18:	4413      	add	r3, r2
 8005c1a:	685b      	ldr	r3, [r3, #4]
 8005c1c:	0c1b      	lsrs	r3, r3, #16
 8005c1e:	68ba      	ldr	r2, [r7, #8]
 8005c20:	4413      	add	r3, r2
 8005c22:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8005c24:	7bfb      	ldrb	r3, [r7, #15]
 8005c26:	3301      	adds	r3, #1
 8005c28:	73fb      	strb	r3, [r7, #15]
 8005c2a:	7bfa      	ldrb	r2, [r7, #15]
 8005c2c:	78fb      	ldrb	r3, [r7, #3]
 8005c2e:	3b01      	subs	r3, #1
 8005c30:	429a      	cmp	r2, r3
 8005c32:	d3ec      	bcc.n	8005c0e <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8005c34:	883b      	ldrh	r3, [r7, #0]
 8005c36:	0418      	lsls	r0, r3, #16
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	6819      	ldr	r1, [r3, #0]
 8005c3c:	78fb      	ldrb	r3, [r7, #3]
 8005c3e:	3b01      	subs	r3, #1
 8005c40:	68ba      	ldr	r2, [r7, #8]
 8005c42:	4302      	orrs	r2, r0
 8005c44:	3340      	adds	r3, #64	; 0x40
 8005c46:	009b      	lsls	r3, r3, #2
 8005c48:	440b      	add	r3, r1
 8005c4a:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8005c4c:	2300      	movs	r3, #0
}
 8005c4e:	4618      	mov	r0, r3
 8005c50:	3714      	adds	r7, #20
 8005c52:	46bd      	mov	sp, r7
 8005c54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c58:	4770      	bx	lr

08005c5a <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8005c5a:	b480      	push	{r7}
 8005c5c:	b083      	sub	sp, #12
 8005c5e:	af00      	add	r7, sp, #0
 8005c60:	6078      	str	r0, [r7, #4]
 8005c62:	460b      	mov	r3, r1
 8005c64:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	681b      	ldr	r3, [r3, #0]
 8005c6a:	887a      	ldrh	r2, [r7, #2]
 8005c6c:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8005c6e:	2300      	movs	r3, #0
}
 8005c70:	4618      	mov	r0, r3
 8005c72:	370c      	adds	r7, #12
 8005c74:	46bd      	mov	sp, r7
 8005c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c7a:	4770      	bx	lr

08005c7c <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8005c7c:	b480      	push	{r7}
 8005c7e:	b085      	sub	sp, #20
 8005c80:	af00      	add	r7, sp, #0
 8005c82:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	681b      	ldr	r3, [r3, #0]
 8005c88:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	2201      	movs	r2, #1
 8005c8e:	f8c3 23fc 	str.w	r2, [r3, #1020]	; 0x3fc
  hpcd->LPM_State = LPM_L0;
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	2200      	movs	r2, #0
 8005c96:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8005c9a:	68fb      	ldr	r3, [r7, #12]
 8005c9c:	699b      	ldr	r3, [r3, #24]
 8005c9e:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8005ca2:	68fb      	ldr	r3, [r7, #12]
 8005ca4:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8005ca6:	68fb      	ldr	r3, [r7, #12]
 8005ca8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005caa:	4b05      	ldr	r3, [pc, #20]	; (8005cc0 <HAL_PCDEx_ActivateLPM+0x44>)
 8005cac:	4313      	orrs	r3, r2
 8005cae:	68fa      	ldr	r2, [r7, #12]
 8005cb0:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8005cb2:	2300      	movs	r3, #0
}
 8005cb4:	4618      	mov	r0, r3
 8005cb6:	3714      	adds	r7, #20
 8005cb8:	46bd      	mov	sp, r7
 8005cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cbe:	4770      	bx	lr
 8005cc0:	10000003 	.word	0x10000003

08005cc4 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8005cc4:	b480      	push	{r7}
 8005cc6:	b083      	sub	sp, #12
 8005cc8:	af00      	add	r7, sp, #0
 8005cca:	6078      	str	r0, [r7, #4]
 8005ccc:	460b      	mov	r3, r1
 8005cce:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8005cd0:	bf00      	nop
 8005cd2:	370c      	adds	r7, #12
 8005cd4:	46bd      	mov	sp, r7
 8005cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cda:	4770      	bx	lr

08005cdc <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8005cdc:	b580      	push	{r7, lr}
 8005cde:	b084      	sub	sp, #16
 8005ce0:	af00      	add	r7, sp, #0
 8005ce2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8005ce4:	4b19      	ldr	r3, [pc, #100]	; (8005d4c <HAL_PWREx_ConfigSupply+0x70>)
 8005ce6:	68db      	ldr	r3, [r3, #12]
 8005ce8:	f003 0304 	and.w	r3, r3, #4
 8005cec:	2b04      	cmp	r3, #4
 8005cee:	d00a      	beq.n	8005d06 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8005cf0:	4b16      	ldr	r3, [pc, #88]	; (8005d4c <HAL_PWREx_ConfigSupply+0x70>)
 8005cf2:	68db      	ldr	r3, [r3, #12]
 8005cf4:	f003 0307 	and.w	r3, r3, #7
 8005cf8:	687a      	ldr	r2, [r7, #4]
 8005cfa:	429a      	cmp	r2, r3
 8005cfc:	d001      	beq.n	8005d02 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8005cfe:	2301      	movs	r3, #1
 8005d00:	e01f      	b.n	8005d42 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8005d02:	2300      	movs	r3, #0
 8005d04:	e01d      	b.n	8005d42 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8005d06:	4b11      	ldr	r3, [pc, #68]	; (8005d4c <HAL_PWREx_ConfigSupply+0x70>)
 8005d08:	68db      	ldr	r3, [r3, #12]
 8005d0a:	f023 0207 	bic.w	r2, r3, #7
 8005d0e:	490f      	ldr	r1, [pc, #60]	; (8005d4c <HAL_PWREx_ConfigSupply+0x70>)
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	4313      	orrs	r3, r2
 8005d14:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8005d16:	f7fb fe53 	bl	80019c0 <HAL_GetTick>
 8005d1a:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8005d1c:	e009      	b.n	8005d32 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8005d1e:	f7fb fe4f 	bl	80019c0 <HAL_GetTick>
 8005d22:	4602      	mov	r2, r0
 8005d24:	68fb      	ldr	r3, [r7, #12]
 8005d26:	1ad3      	subs	r3, r2, r3
 8005d28:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005d2c:	d901      	bls.n	8005d32 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8005d2e:	2301      	movs	r3, #1
 8005d30:	e007      	b.n	8005d42 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8005d32:	4b06      	ldr	r3, [pc, #24]	; (8005d4c <HAL_PWREx_ConfigSupply+0x70>)
 8005d34:	685b      	ldr	r3, [r3, #4]
 8005d36:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005d3a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005d3e:	d1ee      	bne.n	8005d1e <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8005d40:	2300      	movs	r3, #0
}
 8005d42:	4618      	mov	r0, r3
 8005d44:	3710      	adds	r7, #16
 8005d46:	46bd      	mov	sp, r7
 8005d48:	bd80      	pop	{r7, pc}
 8005d4a:	bf00      	nop
 8005d4c:	58024800 	.word	0x58024800

08005d50 <HAL_PWREx_EnableUSBVoltageDetector>:
/**
  * @brief Enable the USB voltage level detector.
  * @retval None.
  */
void HAL_PWREx_EnableUSBVoltageDetector (void)
{
 8005d50:	b480      	push	{r7}
 8005d52:	af00      	add	r7, sp, #0
  /* Enable the USB voltage detector */
  SET_BIT (PWR->CR3, PWR_CR3_USB33DEN);
 8005d54:	4b05      	ldr	r3, [pc, #20]	; (8005d6c <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 8005d56:	68db      	ldr	r3, [r3, #12]
 8005d58:	4a04      	ldr	r2, [pc, #16]	; (8005d6c <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 8005d5a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005d5e:	60d3      	str	r3, [r2, #12]
}
 8005d60:	bf00      	nop
 8005d62:	46bd      	mov	sp, r7
 8005d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d68:	4770      	bx	lr
 8005d6a:	bf00      	nop
 8005d6c:	58024800 	.word	0x58024800

08005d70 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005d70:	b580      	push	{r7, lr}
 8005d72:	b08c      	sub	sp, #48	; 0x30
 8005d74:	af00      	add	r7, sp, #0
 8005d76:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	2b00      	cmp	r3, #0
 8005d7c:	d101      	bne.n	8005d82 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005d7e:	2301      	movs	r3, #1
 8005d80:	e3ff      	b.n	8006582 <HAL_RCC_OscConfig+0x812>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	681b      	ldr	r3, [r3, #0]
 8005d86:	f003 0301 	and.w	r3, r3, #1
 8005d8a:	2b00      	cmp	r3, #0
 8005d8c:	f000 8087 	beq.w	8005e9e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005d90:	4b99      	ldr	r3, [pc, #612]	; (8005ff8 <HAL_RCC_OscConfig+0x288>)
 8005d92:	691b      	ldr	r3, [r3, #16]
 8005d94:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005d98:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8005d9a:	4b97      	ldr	r3, [pc, #604]	; (8005ff8 <HAL_RCC_OscConfig+0x288>)
 8005d9c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d9e:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8005da0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005da2:	2b10      	cmp	r3, #16
 8005da4:	d007      	beq.n	8005db6 <HAL_RCC_OscConfig+0x46>
 8005da6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005da8:	2b18      	cmp	r3, #24
 8005daa:	d110      	bne.n	8005dce <HAL_RCC_OscConfig+0x5e>
 8005dac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005dae:	f003 0303 	and.w	r3, r3, #3
 8005db2:	2b02      	cmp	r3, #2
 8005db4:	d10b      	bne.n	8005dce <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005db6:	4b90      	ldr	r3, [pc, #576]	; (8005ff8 <HAL_RCC_OscConfig+0x288>)
 8005db8:	681b      	ldr	r3, [r3, #0]
 8005dba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005dbe:	2b00      	cmp	r3, #0
 8005dc0:	d06c      	beq.n	8005e9c <HAL_RCC_OscConfig+0x12c>
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	685b      	ldr	r3, [r3, #4]
 8005dc6:	2b00      	cmp	r3, #0
 8005dc8:	d168      	bne.n	8005e9c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8005dca:	2301      	movs	r3, #1
 8005dcc:	e3d9      	b.n	8006582 <HAL_RCC_OscConfig+0x812>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	685b      	ldr	r3, [r3, #4]
 8005dd2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005dd6:	d106      	bne.n	8005de6 <HAL_RCC_OscConfig+0x76>
 8005dd8:	4b87      	ldr	r3, [pc, #540]	; (8005ff8 <HAL_RCC_OscConfig+0x288>)
 8005dda:	681b      	ldr	r3, [r3, #0]
 8005ddc:	4a86      	ldr	r2, [pc, #536]	; (8005ff8 <HAL_RCC_OscConfig+0x288>)
 8005dde:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005de2:	6013      	str	r3, [r2, #0]
 8005de4:	e02e      	b.n	8005e44 <HAL_RCC_OscConfig+0xd4>
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	685b      	ldr	r3, [r3, #4]
 8005dea:	2b00      	cmp	r3, #0
 8005dec:	d10c      	bne.n	8005e08 <HAL_RCC_OscConfig+0x98>
 8005dee:	4b82      	ldr	r3, [pc, #520]	; (8005ff8 <HAL_RCC_OscConfig+0x288>)
 8005df0:	681b      	ldr	r3, [r3, #0]
 8005df2:	4a81      	ldr	r2, [pc, #516]	; (8005ff8 <HAL_RCC_OscConfig+0x288>)
 8005df4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005df8:	6013      	str	r3, [r2, #0]
 8005dfa:	4b7f      	ldr	r3, [pc, #508]	; (8005ff8 <HAL_RCC_OscConfig+0x288>)
 8005dfc:	681b      	ldr	r3, [r3, #0]
 8005dfe:	4a7e      	ldr	r2, [pc, #504]	; (8005ff8 <HAL_RCC_OscConfig+0x288>)
 8005e00:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005e04:	6013      	str	r3, [r2, #0]
 8005e06:	e01d      	b.n	8005e44 <HAL_RCC_OscConfig+0xd4>
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	685b      	ldr	r3, [r3, #4]
 8005e0c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005e10:	d10c      	bne.n	8005e2c <HAL_RCC_OscConfig+0xbc>
 8005e12:	4b79      	ldr	r3, [pc, #484]	; (8005ff8 <HAL_RCC_OscConfig+0x288>)
 8005e14:	681b      	ldr	r3, [r3, #0]
 8005e16:	4a78      	ldr	r2, [pc, #480]	; (8005ff8 <HAL_RCC_OscConfig+0x288>)
 8005e18:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005e1c:	6013      	str	r3, [r2, #0]
 8005e1e:	4b76      	ldr	r3, [pc, #472]	; (8005ff8 <HAL_RCC_OscConfig+0x288>)
 8005e20:	681b      	ldr	r3, [r3, #0]
 8005e22:	4a75      	ldr	r2, [pc, #468]	; (8005ff8 <HAL_RCC_OscConfig+0x288>)
 8005e24:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005e28:	6013      	str	r3, [r2, #0]
 8005e2a:	e00b      	b.n	8005e44 <HAL_RCC_OscConfig+0xd4>
 8005e2c:	4b72      	ldr	r3, [pc, #456]	; (8005ff8 <HAL_RCC_OscConfig+0x288>)
 8005e2e:	681b      	ldr	r3, [r3, #0]
 8005e30:	4a71      	ldr	r2, [pc, #452]	; (8005ff8 <HAL_RCC_OscConfig+0x288>)
 8005e32:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005e36:	6013      	str	r3, [r2, #0]
 8005e38:	4b6f      	ldr	r3, [pc, #444]	; (8005ff8 <HAL_RCC_OscConfig+0x288>)
 8005e3a:	681b      	ldr	r3, [r3, #0]
 8005e3c:	4a6e      	ldr	r2, [pc, #440]	; (8005ff8 <HAL_RCC_OscConfig+0x288>)
 8005e3e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005e42:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	685b      	ldr	r3, [r3, #4]
 8005e48:	2b00      	cmp	r3, #0
 8005e4a:	d013      	beq.n	8005e74 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005e4c:	f7fb fdb8 	bl	80019c0 <HAL_GetTick>
 8005e50:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8005e52:	e008      	b.n	8005e66 <HAL_RCC_OscConfig+0xf6>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005e54:	f7fb fdb4 	bl	80019c0 <HAL_GetTick>
 8005e58:	4602      	mov	r2, r0
 8005e5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e5c:	1ad3      	subs	r3, r2, r3
 8005e5e:	2b64      	cmp	r3, #100	; 0x64
 8005e60:	d901      	bls.n	8005e66 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8005e62:	2303      	movs	r3, #3
 8005e64:	e38d      	b.n	8006582 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8005e66:	4b64      	ldr	r3, [pc, #400]	; (8005ff8 <HAL_RCC_OscConfig+0x288>)
 8005e68:	681b      	ldr	r3, [r3, #0]
 8005e6a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005e6e:	2b00      	cmp	r3, #0
 8005e70:	d0f0      	beq.n	8005e54 <HAL_RCC_OscConfig+0xe4>
 8005e72:	e014      	b.n	8005e9e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005e74:	f7fb fda4 	bl	80019c0 <HAL_GetTick>
 8005e78:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8005e7a:	e008      	b.n	8005e8e <HAL_RCC_OscConfig+0x11e>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005e7c:	f7fb fda0 	bl	80019c0 <HAL_GetTick>
 8005e80:	4602      	mov	r2, r0
 8005e82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e84:	1ad3      	subs	r3, r2, r3
 8005e86:	2b64      	cmp	r3, #100	; 0x64
 8005e88:	d901      	bls.n	8005e8e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8005e8a:	2303      	movs	r3, #3
 8005e8c:	e379      	b.n	8006582 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8005e8e:	4b5a      	ldr	r3, [pc, #360]	; (8005ff8 <HAL_RCC_OscConfig+0x288>)
 8005e90:	681b      	ldr	r3, [r3, #0]
 8005e92:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005e96:	2b00      	cmp	r3, #0
 8005e98:	d1f0      	bne.n	8005e7c <HAL_RCC_OscConfig+0x10c>
 8005e9a:	e000      	b.n	8005e9e <HAL_RCC_OscConfig+0x12e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005e9c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	681b      	ldr	r3, [r3, #0]
 8005ea2:	f003 0302 	and.w	r3, r3, #2
 8005ea6:	2b00      	cmp	r3, #0
 8005ea8:	f000 80ae 	beq.w	8006008 <HAL_RCC_OscConfig+0x298>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005eac:	4b52      	ldr	r3, [pc, #328]	; (8005ff8 <HAL_RCC_OscConfig+0x288>)
 8005eae:	691b      	ldr	r3, [r3, #16]
 8005eb0:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005eb4:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8005eb6:	4b50      	ldr	r3, [pc, #320]	; (8005ff8 <HAL_RCC_OscConfig+0x288>)
 8005eb8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005eba:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8005ebc:	6a3b      	ldr	r3, [r7, #32]
 8005ebe:	2b00      	cmp	r3, #0
 8005ec0:	d007      	beq.n	8005ed2 <HAL_RCC_OscConfig+0x162>
 8005ec2:	6a3b      	ldr	r3, [r7, #32]
 8005ec4:	2b18      	cmp	r3, #24
 8005ec6:	d13a      	bne.n	8005f3e <HAL_RCC_OscConfig+0x1ce>
 8005ec8:	69fb      	ldr	r3, [r7, #28]
 8005eca:	f003 0303 	and.w	r3, r3, #3
 8005ece:	2b00      	cmp	r3, #0
 8005ed0:	d135      	bne.n	8005f3e <HAL_RCC_OscConfig+0x1ce>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005ed2:	4b49      	ldr	r3, [pc, #292]	; (8005ff8 <HAL_RCC_OscConfig+0x288>)
 8005ed4:	681b      	ldr	r3, [r3, #0]
 8005ed6:	f003 0304 	and.w	r3, r3, #4
 8005eda:	2b00      	cmp	r3, #0
 8005edc:	d005      	beq.n	8005eea <HAL_RCC_OscConfig+0x17a>
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	68db      	ldr	r3, [r3, #12]
 8005ee2:	2b00      	cmp	r3, #0
 8005ee4:	d101      	bne.n	8005eea <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8005ee6:	2301      	movs	r3, #1
 8005ee8:	e34b      	b.n	8006582 <HAL_RCC_OscConfig+0x812>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005eea:	f7fb fd97 	bl	8001a1c <HAL_GetREVID>
 8005eee:	4602      	mov	r2, r0
 8005ef0:	f241 0303 	movw	r3, #4099	; 0x1003
 8005ef4:	429a      	cmp	r2, r3
 8005ef6:	d817      	bhi.n	8005f28 <HAL_RCC_OscConfig+0x1b8>
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	691b      	ldr	r3, [r3, #16]
 8005efc:	2b40      	cmp	r3, #64	; 0x40
 8005efe:	d108      	bne.n	8005f12 <HAL_RCC_OscConfig+0x1a2>
 8005f00:	4b3d      	ldr	r3, [pc, #244]	; (8005ff8 <HAL_RCC_OscConfig+0x288>)
 8005f02:	685b      	ldr	r3, [r3, #4]
 8005f04:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8005f08:	4a3b      	ldr	r2, [pc, #236]	; (8005ff8 <HAL_RCC_OscConfig+0x288>)
 8005f0a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005f0e:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005f10:	e07a      	b.n	8006008 <HAL_RCC_OscConfig+0x298>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005f12:	4b39      	ldr	r3, [pc, #228]	; (8005ff8 <HAL_RCC_OscConfig+0x288>)
 8005f14:	685b      	ldr	r3, [r3, #4]
 8005f16:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	691b      	ldr	r3, [r3, #16]
 8005f1e:	031b      	lsls	r3, r3, #12
 8005f20:	4935      	ldr	r1, [pc, #212]	; (8005ff8 <HAL_RCC_OscConfig+0x288>)
 8005f22:	4313      	orrs	r3, r2
 8005f24:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005f26:	e06f      	b.n	8006008 <HAL_RCC_OscConfig+0x298>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005f28:	4b33      	ldr	r3, [pc, #204]	; (8005ff8 <HAL_RCC_OscConfig+0x288>)
 8005f2a:	685b      	ldr	r3, [r3, #4]
 8005f2c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	691b      	ldr	r3, [r3, #16]
 8005f34:	061b      	lsls	r3, r3, #24
 8005f36:	4930      	ldr	r1, [pc, #192]	; (8005ff8 <HAL_RCC_OscConfig+0x288>)
 8005f38:	4313      	orrs	r3, r2
 8005f3a:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005f3c:	e064      	b.n	8006008 <HAL_RCC_OscConfig+0x298>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	68db      	ldr	r3, [r3, #12]
 8005f42:	2b00      	cmp	r3, #0
 8005f44:	d045      	beq.n	8005fd2 <HAL_RCC_OscConfig+0x262>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8005f46:	4b2c      	ldr	r3, [pc, #176]	; (8005ff8 <HAL_RCC_OscConfig+0x288>)
 8005f48:	681b      	ldr	r3, [r3, #0]
 8005f4a:	f023 0219 	bic.w	r2, r3, #25
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	68db      	ldr	r3, [r3, #12]
 8005f52:	4929      	ldr	r1, [pc, #164]	; (8005ff8 <HAL_RCC_OscConfig+0x288>)
 8005f54:	4313      	orrs	r3, r2
 8005f56:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005f58:	f7fb fd32 	bl	80019c0 <HAL_GetTick>
 8005f5c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005f5e:	e008      	b.n	8005f72 <HAL_RCC_OscConfig+0x202>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005f60:	f7fb fd2e 	bl	80019c0 <HAL_GetTick>
 8005f64:	4602      	mov	r2, r0
 8005f66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f68:	1ad3      	subs	r3, r2, r3
 8005f6a:	2b02      	cmp	r3, #2
 8005f6c:	d901      	bls.n	8005f72 <HAL_RCC_OscConfig+0x202>
          {
            return HAL_TIMEOUT;
 8005f6e:	2303      	movs	r3, #3
 8005f70:	e307      	b.n	8006582 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005f72:	4b21      	ldr	r3, [pc, #132]	; (8005ff8 <HAL_RCC_OscConfig+0x288>)
 8005f74:	681b      	ldr	r3, [r3, #0]
 8005f76:	f003 0304 	and.w	r3, r3, #4
 8005f7a:	2b00      	cmp	r3, #0
 8005f7c:	d0f0      	beq.n	8005f60 <HAL_RCC_OscConfig+0x1f0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005f7e:	f7fb fd4d 	bl	8001a1c <HAL_GetREVID>
 8005f82:	4602      	mov	r2, r0
 8005f84:	f241 0303 	movw	r3, #4099	; 0x1003
 8005f88:	429a      	cmp	r2, r3
 8005f8a:	d817      	bhi.n	8005fbc <HAL_RCC_OscConfig+0x24c>
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	691b      	ldr	r3, [r3, #16]
 8005f90:	2b40      	cmp	r3, #64	; 0x40
 8005f92:	d108      	bne.n	8005fa6 <HAL_RCC_OscConfig+0x236>
 8005f94:	4b18      	ldr	r3, [pc, #96]	; (8005ff8 <HAL_RCC_OscConfig+0x288>)
 8005f96:	685b      	ldr	r3, [r3, #4]
 8005f98:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8005f9c:	4a16      	ldr	r2, [pc, #88]	; (8005ff8 <HAL_RCC_OscConfig+0x288>)
 8005f9e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005fa2:	6053      	str	r3, [r2, #4]
 8005fa4:	e030      	b.n	8006008 <HAL_RCC_OscConfig+0x298>
 8005fa6:	4b14      	ldr	r3, [pc, #80]	; (8005ff8 <HAL_RCC_OscConfig+0x288>)
 8005fa8:	685b      	ldr	r3, [r3, #4]
 8005faa:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	691b      	ldr	r3, [r3, #16]
 8005fb2:	031b      	lsls	r3, r3, #12
 8005fb4:	4910      	ldr	r1, [pc, #64]	; (8005ff8 <HAL_RCC_OscConfig+0x288>)
 8005fb6:	4313      	orrs	r3, r2
 8005fb8:	604b      	str	r3, [r1, #4]
 8005fba:	e025      	b.n	8006008 <HAL_RCC_OscConfig+0x298>
 8005fbc:	4b0e      	ldr	r3, [pc, #56]	; (8005ff8 <HAL_RCC_OscConfig+0x288>)
 8005fbe:	685b      	ldr	r3, [r3, #4]
 8005fc0:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	691b      	ldr	r3, [r3, #16]
 8005fc8:	061b      	lsls	r3, r3, #24
 8005fca:	490b      	ldr	r1, [pc, #44]	; (8005ff8 <HAL_RCC_OscConfig+0x288>)
 8005fcc:	4313      	orrs	r3, r2
 8005fce:	604b      	str	r3, [r1, #4]
 8005fd0:	e01a      	b.n	8006008 <HAL_RCC_OscConfig+0x298>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005fd2:	4b09      	ldr	r3, [pc, #36]	; (8005ff8 <HAL_RCC_OscConfig+0x288>)
 8005fd4:	681b      	ldr	r3, [r3, #0]
 8005fd6:	4a08      	ldr	r2, [pc, #32]	; (8005ff8 <HAL_RCC_OscConfig+0x288>)
 8005fd8:	f023 0301 	bic.w	r3, r3, #1
 8005fdc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005fde:	f7fb fcef 	bl	80019c0 <HAL_GetTick>
 8005fe2:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8005fe4:	e00a      	b.n	8005ffc <HAL_RCC_OscConfig+0x28c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005fe6:	f7fb fceb 	bl	80019c0 <HAL_GetTick>
 8005fea:	4602      	mov	r2, r0
 8005fec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fee:	1ad3      	subs	r3, r2, r3
 8005ff0:	2b02      	cmp	r3, #2
 8005ff2:	d903      	bls.n	8005ffc <HAL_RCC_OscConfig+0x28c>
          {
            return HAL_TIMEOUT;
 8005ff4:	2303      	movs	r3, #3
 8005ff6:	e2c4      	b.n	8006582 <HAL_RCC_OscConfig+0x812>
 8005ff8:	58024400 	.word	0x58024400
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8005ffc:	4ba4      	ldr	r3, [pc, #656]	; (8006290 <HAL_RCC_OscConfig+0x520>)
 8005ffe:	681b      	ldr	r3, [r3, #0]
 8006000:	f003 0304 	and.w	r3, r3, #4
 8006004:	2b00      	cmp	r3, #0
 8006006:	d1ee      	bne.n	8005fe6 <HAL_RCC_OscConfig+0x276>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	681b      	ldr	r3, [r3, #0]
 800600c:	f003 0310 	and.w	r3, r3, #16
 8006010:	2b00      	cmp	r3, #0
 8006012:	f000 80a9 	beq.w	8006168 <HAL_RCC_OscConfig+0x3f8>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006016:	4b9e      	ldr	r3, [pc, #632]	; (8006290 <HAL_RCC_OscConfig+0x520>)
 8006018:	691b      	ldr	r3, [r3, #16]
 800601a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800601e:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8006020:	4b9b      	ldr	r3, [pc, #620]	; (8006290 <HAL_RCC_OscConfig+0x520>)
 8006022:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006024:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8006026:	69bb      	ldr	r3, [r7, #24]
 8006028:	2b08      	cmp	r3, #8
 800602a:	d007      	beq.n	800603c <HAL_RCC_OscConfig+0x2cc>
 800602c:	69bb      	ldr	r3, [r7, #24]
 800602e:	2b18      	cmp	r3, #24
 8006030:	d13a      	bne.n	80060a8 <HAL_RCC_OscConfig+0x338>
 8006032:	697b      	ldr	r3, [r7, #20]
 8006034:	f003 0303 	and.w	r3, r3, #3
 8006038:	2b01      	cmp	r3, #1
 800603a:	d135      	bne.n	80060a8 <HAL_RCC_OscConfig+0x338>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800603c:	4b94      	ldr	r3, [pc, #592]	; (8006290 <HAL_RCC_OscConfig+0x520>)
 800603e:	681b      	ldr	r3, [r3, #0]
 8006040:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006044:	2b00      	cmp	r3, #0
 8006046:	d005      	beq.n	8006054 <HAL_RCC_OscConfig+0x2e4>
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	69db      	ldr	r3, [r3, #28]
 800604c:	2b80      	cmp	r3, #128	; 0x80
 800604e:	d001      	beq.n	8006054 <HAL_RCC_OscConfig+0x2e4>
      {
        return HAL_ERROR;
 8006050:	2301      	movs	r3, #1
 8006052:	e296      	b.n	8006582 <HAL_RCC_OscConfig+0x812>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8006054:	f7fb fce2 	bl	8001a1c <HAL_GetREVID>
 8006058:	4602      	mov	r2, r0
 800605a:	f241 0303 	movw	r3, #4099	; 0x1003
 800605e:	429a      	cmp	r2, r3
 8006060:	d817      	bhi.n	8006092 <HAL_RCC_OscConfig+0x322>
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	6a1b      	ldr	r3, [r3, #32]
 8006066:	2b20      	cmp	r3, #32
 8006068:	d108      	bne.n	800607c <HAL_RCC_OscConfig+0x30c>
 800606a:	4b89      	ldr	r3, [pc, #548]	; (8006290 <HAL_RCC_OscConfig+0x520>)
 800606c:	685b      	ldr	r3, [r3, #4]
 800606e:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8006072:	4a87      	ldr	r2, [pc, #540]	; (8006290 <HAL_RCC_OscConfig+0x520>)
 8006074:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006078:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800607a:	e075      	b.n	8006168 <HAL_RCC_OscConfig+0x3f8>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800607c:	4b84      	ldr	r3, [pc, #528]	; (8006290 <HAL_RCC_OscConfig+0x520>)
 800607e:	685b      	ldr	r3, [r3, #4]
 8006080:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	6a1b      	ldr	r3, [r3, #32]
 8006088:	069b      	lsls	r3, r3, #26
 800608a:	4981      	ldr	r1, [pc, #516]	; (8006290 <HAL_RCC_OscConfig+0x520>)
 800608c:	4313      	orrs	r3, r2
 800608e:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8006090:	e06a      	b.n	8006168 <HAL_RCC_OscConfig+0x3f8>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8006092:	4b7f      	ldr	r3, [pc, #508]	; (8006290 <HAL_RCC_OscConfig+0x520>)
 8006094:	68db      	ldr	r3, [r3, #12]
 8006096:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	6a1b      	ldr	r3, [r3, #32]
 800609e:	061b      	lsls	r3, r3, #24
 80060a0:	497b      	ldr	r1, [pc, #492]	; (8006290 <HAL_RCC_OscConfig+0x520>)
 80060a2:	4313      	orrs	r3, r2
 80060a4:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80060a6:	e05f      	b.n	8006168 <HAL_RCC_OscConfig+0x3f8>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	69db      	ldr	r3, [r3, #28]
 80060ac:	2b00      	cmp	r3, #0
 80060ae:	d042      	beq.n	8006136 <HAL_RCC_OscConfig+0x3c6>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 80060b0:	4b77      	ldr	r3, [pc, #476]	; (8006290 <HAL_RCC_OscConfig+0x520>)
 80060b2:	681b      	ldr	r3, [r3, #0]
 80060b4:	4a76      	ldr	r2, [pc, #472]	; (8006290 <HAL_RCC_OscConfig+0x520>)
 80060b6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80060ba:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80060bc:	f7fb fc80 	bl	80019c0 <HAL_GetTick>
 80060c0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80060c2:	e008      	b.n	80060d6 <HAL_RCC_OscConfig+0x366>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 80060c4:	f7fb fc7c 	bl	80019c0 <HAL_GetTick>
 80060c8:	4602      	mov	r2, r0
 80060ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060cc:	1ad3      	subs	r3, r2, r3
 80060ce:	2b02      	cmp	r3, #2
 80060d0:	d901      	bls.n	80060d6 <HAL_RCC_OscConfig+0x366>
          {
            return HAL_TIMEOUT;
 80060d2:	2303      	movs	r3, #3
 80060d4:	e255      	b.n	8006582 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80060d6:	4b6e      	ldr	r3, [pc, #440]	; (8006290 <HAL_RCC_OscConfig+0x520>)
 80060d8:	681b      	ldr	r3, [r3, #0]
 80060da:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80060de:	2b00      	cmp	r3, #0
 80060e0:	d0f0      	beq.n	80060c4 <HAL_RCC_OscConfig+0x354>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80060e2:	f7fb fc9b 	bl	8001a1c <HAL_GetREVID>
 80060e6:	4602      	mov	r2, r0
 80060e8:	f241 0303 	movw	r3, #4099	; 0x1003
 80060ec:	429a      	cmp	r2, r3
 80060ee:	d817      	bhi.n	8006120 <HAL_RCC_OscConfig+0x3b0>
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	6a1b      	ldr	r3, [r3, #32]
 80060f4:	2b20      	cmp	r3, #32
 80060f6:	d108      	bne.n	800610a <HAL_RCC_OscConfig+0x39a>
 80060f8:	4b65      	ldr	r3, [pc, #404]	; (8006290 <HAL_RCC_OscConfig+0x520>)
 80060fa:	685b      	ldr	r3, [r3, #4]
 80060fc:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8006100:	4a63      	ldr	r2, [pc, #396]	; (8006290 <HAL_RCC_OscConfig+0x520>)
 8006102:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006106:	6053      	str	r3, [r2, #4]
 8006108:	e02e      	b.n	8006168 <HAL_RCC_OscConfig+0x3f8>
 800610a:	4b61      	ldr	r3, [pc, #388]	; (8006290 <HAL_RCC_OscConfig+0x520>)
 800610c:	685b      	ldr	r3, [r3, #4]
 800610e:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	6a1b      	ldr	r3, [r3, #32]
 8006116:	069b      	lsls	r3, r3, #26
 8006118:	495d      	ldr	r1, [pc, #372]	; (8006290 <HAL_RCC_OscConfig+0x520>)
 800611a:	4313      	orrs	r3, r2
 800611c:	604b      	str	r3, [r1, #4]
 800611e:	e023      	b.n	8006168 <HAL_RCC_OscConfig+0x3f8>
 8006120:	4b5b      	ldr	r3, [pc, #364]	; (8006290 <HAL_RCC_OscConfig+0x520>)
 8006122:	68db      	ldr	r3, [r3, #12]
 8006124:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	6a1b      	ldr	r3, [r3, #32]
 800612c:	061b      	lsls	r3, r3, #24
 800612e:	4958      	ldr	r1, [pc, #352]	; (8006290 <HAL_RCC_OscConfig+0x520>)
 8006130:	4313      	orrs	r3, r2
 8006132:	60cb      	str	r3, [r1, #12]
 8006134:	e018      	b.n	8006168 <HAL_RCC_OscConfig+0x3f8>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8006136:	4b56      	ldr	r3, [pc, #344]	; (8006290 <HAL_RCC_OscConfig+0x520>)
 8006138:	681b      	ldr	r3, [r3, #0]
 800613a:	4a55      	ldr	r2, [pc, #340]	; (8006290 <HAL_RCC_OscConfig+0x520>)
 800613c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006140:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006142:	f7fb fc3d 	bl	80019c0 <HAL_GetTick>
 8006146:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8006148:	e008      	b.n	800615c <HAL_RCC_OscConfig+0x3ec>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 800614a:	f7fb fc39 	bl	80019c0 <HAL_GetTick>
 800614e:	4602      	mov	r2, r0
 8006150:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006152:	1ad3      	subs	r3, r2, r3
 8006154:	2b02      	cmp	r3, #2
 8006156:	d901      	bls.n	800615c <HAL_RCC_OscConfig+0x3ec>
          {
            return HAL_TIMEOUT;
 8006158:	2303      	movs	r3, #3
 800615a:	e212      	b.n	8006582 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800615c:	4b4c      	ldr	r3, [pc, #304]	; (8006290 <HAL_RCC_OscConfig+0x520>)
 800615e:	681b      	ldr	r3, [r3, #0]
 8006160:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006164:	2b00      	cmp	r3, #0
 8006166:	d1f0      	bne.n	800614a <HAL_RCC_OscConfig+0x3da>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	681b      	ldr	r3, [r3, #0]
 800616c:	f003 0308 	and.w	r3, r3, #8
 8006170:	2b00      	cmp	r3, #0
 8006172:	d036      	beq.n	80061e2 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	695b      	ldr	r3, [r3, #20]
 8006178:	2b00      	cmp	r3, #0
 800617a:	d019      	beq.n	80061b0 <HAL_RCC_OscConfig+0x440>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800617c:	4b44      	ldr	r3, [pc, #272]	; (8006290 <HAL_RCC_OscConfig+0x520>)
 800617e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006180:	4a43      	ldr	r2, [pc, #268]	; (8006290 <HAL_RCC_OscConfig+0x520>)
 8006182:	f043 0301 	orr.w	r3, r3, #1
 8006186:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006188:	f7fb fc1a 	bl	80019c0 <HAL_GetTick>
 800618c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800618e:	e008      	b.n	80061a2 <HAL_RCC_OscConfig+0x432>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006190:	f7fb fc16 	bl	80019c0 <HAL_GetTick>
 8006194:	4602      	mov	r2, r0
 8006196:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006198:	1ad3      	subs	r3, r2, r3
 800619a:	2b02      	cmp	r3, #2
 800619c:	d901      	bls.n	80061a2 <HAL_RCC_OscConfig+0x432>
        {
          return HAL_TIMEOUT;
 800619e:	2303      	movs	r3, #3
 80061a0:	e1ef      	b.n	8006582 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80061a2:	4b3b      	ldr	r3, [pc, #236]	; (8006290 <HAL_RCC_OscConfig+0x520>)
 80061a4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80061a6:	f003 0302 	and.w	r3, r3, #2
 80061aa:	2b00      	cmp	r3, #0
 80061ac:	d0f0      	beq.n	8006190 <HAL_RCC_OscConfig+0x420>
 80061ae:	e018      	b.n	80061e2 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80061b0:	4b37      	ldr	r3, [pc, #220]	; (8006290 <HAL_RCC_OscConfig+0x520>)
 80061b2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80061b4:	4a36      	ldr	r2, [pc, #216]	; (8006290 <HAL_RCC_OscConfig+0x520>)
 80061b6:	f023 0301 	bic.w	r3, r3, #1
 80061ba:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80061bc:	f7fb fc00 	bl	80019c0 <HAL_GetTick>
 80061c0:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80061c2:	e008      	b.n	80061d6 <HAL_RCC_OscConfig+0x466>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80061c4:	f7fb fbfc 	bl	80019c0 <HAL_GetTick>
 80061c8:	4602      	mov	r2, r0
 80061ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061cc:	1ad3      	subs	r3, r2, r3
 80061ce:	2b02      	cmp	r3, #2
 80061d0:	d901      	bls.n	80061d6 <HAL_RCC_OscConfig+0x466>
        {
          return HAL_TIMEOUT;
 80061d2:	2303      	movs	r3, #3
 80061d4:	e1d5      	b.n	8006582 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80061d6:	4b2e      	ldr	r3, [pc, #184]	; (8006290 <HAL_RCC_OscConfig+0x520>)
 80061d8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80061da:	f003 0302 	and.w	r3, r3, #2
 80061de:	2b00      	cmp	r3, #0
 80061e0:	d1f0      	bne.n	80061c4 <HAL_RCC_OscConfig+0x454>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	681b      	ldr	r3, [r3, #0]
 80061e6:	f003 0320 	and.w	r3, r3, #32
 80061ea:	2b00      	cmp	r3, #0
 80061ec:	d036      	beq.n	800625c <HAL_RCC_OscConfig+0x4ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	699b      	ldr	r3, [r3, #24]
 80061f2:	2b00      	cmp	r3, #0
 80061f4:	d019      	beq.n	800622a <HAL_RCC_OscConfig+0x4ba>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80061f6:	4b26      	ldr	r3, [pc, #152]	; (8006290 <HAL_RCC_OscConfig+0x520>)
 80061f8:	681b      	ldr	r3, [r3, #0]
 80061fa:	4a25      	ldr	r2, [pc, #148]	; (8006290 <HAL_RCC_OscConfig+0x520>)
 80061fc:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8006200:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8006202:	f7fb fbdd 	bl	80019c0 <HAL_GetTick>
 8006206:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8006208:	e008      	b.n	800621c <HAL_RCC_OscConfig+0x4ac>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 800620a:	f7fb fbd9 	bl	80019c0 <HAL_GetTick>
 800620e:	4602      	mov	r2, r0
 8006210:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006212:	1ad3      	subs	r3, r2, r3
 8006214:	2b02      	cmp	r3, #2
 8006216:	d901      	bls.n	800621c <HAL_RCC_OscConfig+0x4ac>
        {
          return HAL_TIMEOUT;
 8006218:	2303      	movs	r3, #3
 800621a:	e1b2      	b.n	8006582 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800621c:	4b1c      	ldr	r3, [pc, #112]	; (8006290 <HAL_RCC_OscConfig+0x520>)
 800621e:	681b      	ldr	r3, [r3, #0]
 8006220:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006224:	2b00      	cmp	r3, #0
 8006226:	d0f0      	beq.n	800620a <HAL_RCC_OscConfig+0x49a>
 8006228:	e018      	b.n	800625c <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800622a:	4b19      	ldr	r3, [pc, #100]	; (8006290 <HAL_RCC_OscConfig+0x520>)
 800622c:	681b      	ldr	r3, [r3, #0]
 800622e:	4a18      	ldr	r2, [pc, #96]	; (8006290 <HAL_RCC_OscConfig+0x520>)
 8006230:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006234:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8006236:	f7fb fbc3 	bl	80019c0 <HAL_GetTick>
 800623a:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800623c:	e008      	b.n	8006250 <HAL_RCC_OscConfig+0x4e0>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 800623e:	f7fb fbbf 	bl	80019c0 <HAL_GetTick>
 8006242:	4602      	mov	r2, r0
 8006244:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006246:	1ad3      	subs	r3, r2, r3
 8006248:	2b02      	cmp	r3, #2
 800624a:	d901      	bls.n	8006250 <HAL_RCC_OscConfig+0x4e0>
        {
          return HAL_TIMEOUT;
 800624c:	2303      	movs	r3, #3
 800624e:	e198      	b.n	8006582 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8006250:	4b0f      	ldr	r3, [pc, #60]	; (8006290 <HAL_RCC_OscConfig+0x520>)
 8006252:	681b      	ldr	r3, [r3, #0]
 8006254:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006258:	2b00      	cmp	r3, #0
 800625a:	d1f0      	bne.n	800623e <HAL_RCC_OscConfig+0x4ce>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	681b      	ldr	r3, [r3, #0]
 8006260:	f003 0304 	and.w	r3, r3, #4
 8006264:	2b00      	cmp	r3, #0
 8006266:	f000 8085 	beq.w	8006374 <HAL_RCC_OscConfig+0x604>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800626a:	4b0a      	ldr	r3, [pc, #40]	; (8006294 <HAL_RCC_OscConfig+0x524>)
 800626c:	681b      	ldr	r3, [r3, #0]
 800626e:	4a09      	ldr	r2, [pc, #36]	; (8006294 <HAL_RCC_OscConfig+0x524>)
 8006270:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006274:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8006276:	f7fb fba3 	bl	80019c0 <HAL_GetTick>
 800627a:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800627c:	e00c      	b.n	8006298 <HAL_RCC_OscConfig+0x528>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 800627e:	f7fb fb9f 	bl	80019c0 <HAL_GetTick>
 8006282:	4602      	mov	r2, r0
 8006284:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006286:	1ad3      	subs	r3, r2, r3
 8006288:	2b64      	cmp	r3, #100	; 0x64
 800628a:	d905      	bls.n	8006298 <HAL_RCC_OscConfig+0x528>
      {
        return HAL_TIMEOUT;
 800628c:	2303      	movs	r3, #3
 800628e:	e178      	b.n	8006582 <HAL_RCC_OscConfig+0x812>
 8006290:	58024400 	.word	0x58024400
 8006294:	58024800 	.word	0x58024800
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006298:	4b96      	ldr	r3, [pc, #600]	; (80064f4 <HAL_RCC_OscConfig+0x784>)
 800629a:	681b      	ldr	r3, [r3, #0]
 800629c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80062a0:	2b00      	cmp	r3, #0
 80062a2:	d0ec      	beq.n	800627e <HAL_RCC_OscConfig+0x50e>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	689b      	ldr	r3, [r3, #8]
 80062a8:	2b01      	cmp	r3, #1
 80062aa:	d106      	bne.n	80062ba <HAL_RCC_OscConfig+0x54a>
 80062ac:	4b92      	ldr	r3, [pc, #584]	; (80064f8 <HAL_RCC_OscConfig+0x788>)
 80062ae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80062b0:	4a91      	ldr	r2, [pc, #580]	; (80064f8 <HAL_RCC_OscConfig+0x788>)
 80062b2:	f043 0301 	orr.w	r3, r3, #1
 80062b6:	6713      	str	r3, [r2, #112]	; 0x70
 80062b8:	e02d      	b.n	8006316 <HAL_RCC_OscConfig+0x5a6>
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	689b      	ldr	r3, [r3, #8]
 80062be:	2b00      	cmp	r3, #0
 80062c0:	d10c      	bne.n	80062dc <HAL_RCC_OscConfig+0x56c>
 80062c2:	4b8d      	ldr	r3, [pc, #564]	; (80064f8 <HAL_RCC_OscConfig+0x788>)
 80062c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80062c6:	4a8c      	ldr	r2, [pc, #560]	; (80064f8 <HAL_RCC_OscConfig+0x788>)
 80062c8:	f023 0301 	bic.w	r3, r3, #1
 80062cc:	6713      	str	r3, [r2, #112]	; 0x70
 80062ce:	4b8a      	ldr	r3, [pc, #552]	; (80064f8 <HAL_RCC_OscConfig+0x788>)
 80062d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80062d2:	4a89      	ldr	r2, [pc, #548]	; (80064f8 <HAL_RCC_OscConfig+0x788>)
 80062d4:	f023 0304 	bic.w	r3, r3, #4
 80062d8:	6713      	str	r3, [r2, #112]	; 0x70
 80062da:	e01c      	b.n	8006316 <HAL_RCC_OscConfig+0x5a6>
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	689b      	ldr	r3, [r3, #8]
 80062e0:	2b05      	cmp	r3, #5
 80062e2:	d10c      	bne.n	80062fe <HAL_RCC_OscConfig+0x58e>
 80062e4:	4b84      	ldr	r3, [pc, #528]	; (80064f8 <HAL_RCC_OscConfig+0x788>)
 80062e6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80062e8:	4a83      	ldr	r2, [pc, #524]	; (80064f8 <HAL_RCC_OscConfig+0x788>)
 80062ea:	f043 0304 	orr.w	r3, r3, #4
 80062ee:	6713      	str	r3, [r2, #112]	; 0x70
 80062f0:	4b81      	ldr	r3, [pc, #516]	; (80064f8 <HAL_RCC_OscConfig+0x788>)
 80062f2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80062f4:	4a80      	ldr	r2, [pc, #512]	; (80064f8 <HAL_RCC_OscConfig+0x788>)
 80062f6:	f043 0301 	orr.w	r3, r3, #1
 80062fa:	6713      	str	r3, [r2, #112]	; 0x70
 80062fc:	e00b      	b.n	8006316 <HAL_RCC_OscConfig+0x5a6>
 80062fe:	4b7e      	ldr	r3, [pc, #504]	; (80064f8 <HAL_RCC_OscConfig+0x788>)
 8006300:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006302:	4a7d      	ldr	r2, [pc, #500]	; (80064f8 <HAL_RCC_OscConfig+0x788>)
 8006304:	f023 0301 	bic.w	r3, r3, #1
 8006308:	6713      	str	r3, [r2, #112]	; 0x70
 800630a:	4b7b      	ldr	r3, [pc, #492]	; (80064f8 <HAL_RCC_OscConfig+0x788>)
 800630c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800630e:	4a7a      	ldr	r2, [pc, #488]	; (80064f8 <HAL_RCC_OscConfig+0x788>)
 8006310:	f023 0304 	bic.w	r3, r3, #4
 8006314:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	689b      	ldr	r3, [r3, #8]
 800631a:	2b00      	cmp	r3, #0
 800631c:	d015      	beq.n	800634a <HAL_RCC_OscConfig+0x5da>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800631e:	f7fb fb4f 	bl	80019c0 <HAL_GetTick>
 8006322:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8006324:	e00a      	b.n	800633c <HAL_RCC_OscConfig+0x5cc>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006326:	f7fb fb4b 	bl	80019c0 <HAL_GetTick>
 800632a:	4602      	mov	r2, r0
 800632c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800632e:	1ad3      	subs	r3, r2, r3
 8006330:	f241 3288 	movw	r2, #5000	; 0x1388
 8006334:	4293      	cmp	r3, r2
 8006336:	d901      	bls.n	800633c <HAL_RCC_OscConfig+0x5cc>
        {
          return HAL_TIMEOUT;
 8006338:	2303      	movs	r3, #3
 800633a:	e122      	b.n	8006582 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800633c:	4b6e      	ldr	r3, [pc, #440]	; (80064f8 <HAL_RCC_OscConfig+0x788>)
 800633e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006340:	f003 0302 	and.w	r3, r3, #2
 8006344:	2b00      	cmp	r3, #0
 8006346:	d0ee      	beq.n	8006326 <HAL_RCC_OscConfig+0x5b6>
 8006348:	e014      	b.n	8006374 <HAL_RCC_OscConfig+0x604>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800634a:	f7fb fb39 	bl	80019c0 <HAL_GetTick>
 800634e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8006350:	e00a      	b.n	8006368 <HAL_RCC_OscConfig+0x5f8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006352:	f7fb fb35 	bl	80019c0 <HAL_GetTick>
 8006356:	4602      	mov	r2, r0
 8006358:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800635a:	1ad3      	subs	r3, r2, r3
 800635c:	f241 3288 	movw	r2, #5000	; 0x1388
 8006360:	4293      	cmp	r3, r2
 8006362:	d901      	bls.n	8006368 <HAL_RCC_OscConfig+0x5f8>
        {
          return HAL_TIMEOUT;
 8006364:	2303      	movs	r3, #3
 8006366:	e10c      	b.n	8006582 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8006368:	4b63      	ldr	r3, [pc, #396]	; (80064f8 <HAL_RCC_OscConfig+0x788>)
 800636a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800636c:	f003 0302 	and.w	r3, r3, #2
 8006370:	2b00      	cmp	r3, #0
 8006372:	d1ee      	bne.n	8006352 <HAL_RCC_OscConfig+0x5e2>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006378:	2b00      	cmp	r3, #0
 800637a:	f000 8101 	beq.w	8006580 <HAL_RCC_OscConfig+0x810>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 800637e:	4b5e      	ldr	r3, [pc, #376]	; (80064f8 <HAL_RCC_OscConfig+0x788>)
 8006380:	691b      	ldr	r3, [r3, #16]
 8006382:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006386:	2b18      	cmp	r3, #24
 8006388:	f000 80bc 	beq.w	8006504 <HAL_RCC_OscConfig+0x794>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006390:	2b02      	cmp	r3, #2
 8006392:	f040 8095 	bne.w	80064c0 <HAL_RCC_OscConfig+0x750>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006396:	4b58      	ldr	r3, [pc, #352]	; (80064f8 <HAL_RCC_OscConfig+0x788>)
 8006398:	681b      	ldr	r3, [r3, #0]
 800639a:	4a57      	ldr	r2, [pc, #348]	; (80064f8 <HAL_RCC_OscConfig+0x788>)
 800639c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80063a0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80063a2:	f7fb fb0d 	bl	80019c0 <HAL_GetTick>
 80063a6:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80063a8:	e008      	b.n	80063bc <HAL_RCC_OscConfig+0x64c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80063aa:	f7fb fb09 	bl	80019c0 <HAL_GetTick>
 80063ae:	4602      	mov	r2, r0
 80063b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063b2:	1ad3      	subs	r3, r2, r3
 80063b4:	2b02      	cmp	r3, #2
 80063b6:	d901      	bls.n	80063bc <HAL_RCC_OscConfig+0x64c>
          {
            return HAL_TIMEOUT;
 80063b8:	2303      	movs	r3, #3
 80063ba:	e0e2      	b.n	8006582 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80063bc:	4b4e      	ldr	r3, [pc, #312]	; (80064f8 <HAL_RCC_OscConfig+0x788>)
 80063be:	681b      	ldr	r3, [r3, #0]
 80063c0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80063c4:	2b00      	cmp	r3, #0
 80063c6:	d1f0      	bne.n	80063aa <HAL_RCC_OscConfig+0x63a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80063c8:	4b4b      	ldr	r3, [pc, #300]	; (80064f8 <HAL_RCC_OscConfig+0x788>)
 80063ca:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80063cc:	4b4b      	ldr	r3, [pc, #300]	; (80064fc <HAL_RCC_OscConfig+0x78c>)
 80063ce:	4013      	ands	r3, r2
 80063d0:	687a      	ldr	r2, [r7, #4]
 80063d2:	6a91      	ldr	r1, [r2, #40]	; 0x28
 80063d4:	687a      	ldr	r2, [r7, #4]
 80063d6:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80063d8:	0112      	lsls	r2, r2, #4
 80063da:	430a      	orrs	r2, r1
 80063dc:	4946      	ldr	r1, [pc, #280]	; (80064f8 <HAL_RCC_OscConfig+0x788>)
 80063de:	4313      	orrs	r3, r2
 80063e0:	628b      	str	r3, [r1, #40]	; 0x28
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80063e6:	3b01      	subs	r3, #1
 80063e8:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80063f0:	3b01      	subs	r3, #1
 80063f2:	025b      	lsls	r3, r3, #9
 80063f4:	b29b      	uxth	r3, r3
 80063f6:	431a      	orrs	r2, r3
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80063fc:	3b01      	subs	r3, #1
 80063fe:	041b      	lsls	r3, r3, #16
 8006400:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8006404:	431a      	orrs	r2, r3
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800640a:	3b01      	subs	r3, #1
 800640c:	061b      	lsls	r3, r3, #24
 800640e:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8006412:	4939      	ldr	r1, [pc, #228]	; (80064f8 <HAL_RCC_OscConfig+0x788>)
 8006414:	4313      	orrs	r3, r2
 8006416:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 8006418:	4b37      	ldr	r3, [pc, #220]	; (80064f8 <HAL_RCC_OscConfig+0x788>)
 800641a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800641c:	4a36      	ldr	r2, [pc, #216]	; (80064f8 <HAL_RCC_OscConfig+0x788>)
 800641e:	f023 0301 	bic.w	r3, r3, #1
 8006422:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8006424:	4b34      	ldr	r3, [pc, #208]	; (80064f8 <HAL_RCC_OscConfig+0x788>)
 8006426:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006428:	4b35      	ldr	r3, [pc, #212]	; (8006500 <HAL_RCC_OscConfig+0x790>)
 800642a:	4013      	ands	r3, r2
 800642c:	687a      	ldr	r2, [r7, #4]
 800642e:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8006430:	00d2      	lsls	r2, r2, #3
 8006432:	4931      	ldr	r1, [pc, #196]	; (80064f8 <HAL_RCC_OscConfig+0x788>)
 8006434:	4313      	orrs	r3, r2
 8006436:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8006438:	4b2f      	ldr	r3, [pc, #188]	; (80064f8 <HAL_RCC_OscConfig+0x788>)
 800643a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800643c:	f023 020c 	bic.w	r2, r3, #12
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006444:	492c      	ldr	r1, [pc, #176]	; (80064f8 <HAL_RCC_OscConfig+0x788>)
 8006446:	4313      	orrs	r3, r2
 8006448:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 800644a:	4b2b      	ldr	r3, [pc, #172]	; (80064f8 <HAL_RCC_OscConfig+0x788>)
 800644c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800644e:	f023 0202 	bic.w	r2, r3, #2
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006456:	4928      	ldr	r1, [pc, #160]	; (80064f8 <HAL_RCC_OscConfig+0x788>)
 8006458:	4313      	orrs	r3, r2
 800645a:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800645c:	4b26      	ldr	r3, [pc, #152]	; (80064f8 <HAL_RCC_OscConfig+0x788>)
 800645e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006460:	4a25      	ldr	r2, [pc, #148]	; (80064f8 <HAL_RCC_OscConfig+0x788>)
 8006462:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006466:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006468:	4b23      	ldr	r3, [pc, #140]	; (80064f8 <HAL_RCC_OscConfig+0x788>)
 800646a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800646c:	4a22      	ldr	r2, [pc, #136]	; (80064f8 <HAL_RCC_OscConfig+0x788>)
 800646e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006472:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8006474:	4b20      	ldr	r3, [pc, #128]	; (80064f8 <HAL_RCC_OscConfig+0x788>)
 8006476:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006478:	4a1f      	ldr	r2, [pc, #124]	; (80064f8 <HAL_RCC_OscConfig+0x788>)
 800647a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800647e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 8006480:	4b1d      	ldr	r3, [pc, #116]	; (80064f8 <HAL_RCC_OscConfig+0x788>)
 8006482:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006484:	4a1c      	ldr	r2, [pc, #112]	; (80064f8 <HAL_RCC_OscConfig+0x788>)
 8006486:	f043 0301 	orr.w	r3, r3, #1
 800648a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800648c:	4b1a      	ldr	r3, [pc, #104]	; (80064f8 <HAL_RCC_OscConfig+0x788>)
 800648e:	681b      	ldr	r3, [r3, #0]
 8006490:	4a19      	ldr	r2, [pc, #100]	; (80064f8 <HAL_RCC_OscConfig+0x788>)
 8006492:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006496:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006498:	f7fb fa92 	bl	80019c0 <HAL_GetTick>
 800649c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800649e:	e008      	b.n	80064b2 <HAL_RCC_OscConfig+0x742>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80064a0:	f7fb fa8e 	bl	80019c0 <HAL_GetTick>
 80064a4:	4602      	mov	r2, r0
 80064a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064a8:	1ad3      	subs	r3, r2, r3
 80064aa:	2b02      	cmp	r3, #2
 80064ac:	d901      	bls.n	80064b2 <HAL_RCC_OscConfig+0x742>
          {
            return HAL_TIMEOUT;
 80064ae:	2303      	movs	r3, #3
 80064b0:	e067      	b.n	8006582 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80064b2:	4b11      	ldr	r3, [pc, #68]	; (80064f8 <HAL_RCC_OscConfig+0x788>)
 80064b4:	681b      	ldr	r3, [r3, #0]
 80064b6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80064ba:	2b00      	cmp	r3, #0
 80064bc:	d0f0      	beq.n	80064a0 <HAL_RCC_OscConfig+0x730>
 80064be:	e05f      	b.n	8006580 <HAL_RCC_OscConfig+0x810>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80064c0:	4b0d      	ldr	r3, [pc, #52]	; (80064f8 <HAL_RCC_OscConfig+0x788>)
 80064c2:	681b      	ldr	r3, [r3, #0]
 80064c4:	4a0c      	ldr	r2, [pc, #48]	; (80064f8 <HAL_RCC_OscConfig+0x788>)
 80064c6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80064ca:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80064cc:	f7fb fa78 	bl	80019c0 <HAL_GetTick>
 80064d0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80064d2:	e008      	b.n	80064e6 <HAL_RCC_OscConfig+0x776>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80064d4:	f7fb fa74 	bl	80019c0 <HAL_GetTick>
 80064d8:	4602      	mov	r2, r0
 80064da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064dc:	1ad3      	subs	r3, r2, r3
 80064de:	2b02      	cmp	r3, #2
 80064e0:	d901      	bls.n	80064e6 <HAL_RCC_OscConfig+0x776>
          {
            return HAL_TIMEOUT;
 80064e2:	2303      	movs	r3, #3
 80064e4:	e04d      	b.n	8006582 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80064e6:	4b04      	ldr	r3, [pc, #16]	; (80064f8 <HAL_RCC_OscConfig+0x788>)
 80064e8:	681b      	ldr	r3, [r3, #0]
 80064ea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80064ee:	2b00      	cmp	r3, #0
 80064f0:	d1f0      	bne.n	80064d4 <HAL_RCC_OscConfig+0x764>
 80064f2:	e045      	b.n	8006580 <HAL_RCC_OscConfig+0x810>
 80064f4:	58024800 	.word	0x58024800
 80064f8:	58024400 	.word	0x58024400
 80064fc:	fffffc0c 	.word	0xfffffc0c
 8006500:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8006504:	4b21      	ldr	r3, [pc, #132]	; (800658c <HAL_RCC_OscConfig+0x81c>)
 8006506:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006508:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 800650a:	4b20      	ldr	r3, [pc, #128]	; (800658c <HAL_RCC_OscConfig+0x81c>)
 800650c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800650e:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006514:	2b01      	cmp	r3, #1
 8006516:	d031      	beq.n	800657c <HAL_RCC_OscConfig+0x80c>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006518:	693b      	ldr	r3, [r7, #16]
 800651a:	f003 0203 	and.w	r2, r3, #3
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006522:	429a      	cmp	r2, r3
 8006524:	d12a      	bne.n	800657c <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8006526:	693b      	ldr	r3, [r7, #16]
 8006528:	091b      	lsrs	r3, r3, #4
 800652a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006532:	429a      	cmp	r2, r3
 8006534:	d122      	bne.n	800657c <HAL_RCC_OscConfig+0x80c>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8006536:	68fb      	ldr	r3, [r7, #12]
 8006538:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006540:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8006542:	429a      	cmp	r2, r3
 8006544:	d11a      	bne.n	800657c <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8006546:	68fb      	ldr	r3, [r7, #12]
 8006548:	0a5b      	lsrs	r3, r3, #9
 800654a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006552:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8006554:	429a      	cmp	r2, r3
 8006556:	d111      	bne.n	800657c <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8006558:	68fb      	ldr	r3, [r7, #12]
 800655a:	0c1b      	lsrs	r3, r3, #16
 800655c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006564:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8006566:	429a      	cmp	r2, r3
 8006568:	d108      	bne.n	800657c <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 800656a:	68fb      	ldr	r3, [r7, #12]
 800656c:	0e1b      	lsrs	r3, r3, #24
 800656e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006576:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8006578:	429a      	cmp	r2, r3
 800657a:	d001      	beq.n	8006580 <HAL_RCC_OscConfig+0x810>
      {
        return HAL_ERROR;
 800657c:	2301      	movs	r3, #1
 800657e:	e000      	b.n	8006582 <HAL_RCC_OscConfig+0x812>
      }
    }
  }
  return HAL_OK;
 8006580:	2300      	movs	r3, #0
}
 8006582:	4618      	mov	r0, r3
 8006584:	3730      	adds	r7, #48	; 0x30
 8006586:	46bd      	mov	sp, r7
 8006588:	bd80      	pop	{r7, pc}
 800658a:	bf00      	nop
 800658c:	58024400 	.word	0x58024400

08006590 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006590:	b580      	push	{r7, lr}
 8006592:	b086      	sub	sp, #24
 8006594:	af00      	add	r7, sp, #0
 8006596:	6078      	str	r0, [r7, #4]
 8006598:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	2b00      	cmp	r3, #0
 800659e:	d101      	bne.n	80065a4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80065a0:	2301      	movs	r3, #1
 80065a2:	e19c      	b.n	80068de <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80065a4:	4b8a      	ldr	r3, [pc, #552]	; (80067d0 <HAL_RCC_ClockConfig+0x240>)
 80065a6:	681b      	ldr	r3, [r3, #0]
 80065a8:	f003 030f 	and.w	r3, r3, #15
 80065ac:	683a      	ldr	r2, [r7, #0]
 80065ae:	429a      	cmp	r2, r3
 80065b0:	d910      	bls.n	80065d4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80065b2:	4b87      	ldr	r3, [pc, #540]	; (80067d0 <HAL_RCC_ClockConfig+0x240>)
 80065b4:	681b      	ldr	r3, [r3, #0]
 80065b6:	f023 020f 	bic.w	r2, r3, #15
 80065ba:	4985      	ldr	r1, [pc, #532]	; (80067d0 <HAL_RCC_ClockConfig+0x240>)
 80065bc:	683b      	ldr	r3, [r7, #0]
 80065be:	4313      	orrs	r3, r2
 80065c0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80065c2:	4b83      	ldr	r3, [pc, #524]	; (80067d0 <HAL_RCC_ClockConfig+0x240>)
 80065c4:	681b      	ldr	r3, [r3, #0]
 80065c6:	f003 030f 	and.w	r3, r3, #15
 80065ca:	683a      	ldr	r2, [r7, #0]
 80065cc:	429a      	cmp	r2, r3
 80065ce:	d001      	beq.n	80065d4 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80065d0:	2301      	movs	r3, #1
 80065d2:	e184      	b.n	80068de <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	681b      	ldr	r3, [r3, #0]
 80065d8:	f003 0304 	and.w	r3, r3, #4
 80065dc:	2b00      	cmp	r3, #0
 80065de:	d010      	beq.n	8006602 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	691a      	ldr	r2, [r3, #16]
 80065e4:	4b7b      	ldr	r3, [pc, #492]	; (80067d4 <HAL_RCC_ClockConfig+0x244>)
 80065e6:	699b      	ldr	r3, [r3, #24]
 80065e8:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80065ec:	429a      	cmp	r2, r3
 80065ee:	d908      	bls.n	8006602 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80065f0:	4b78      	ldr	r3, [pc, #480]	; (80067d4 <HAL_RCC_ClockConfig+0x244>)
 80065f2:	699b      	ldr	r3, [r3, #24]
 80065f4:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	691b      	ldr	r3, [r3, #16]
 80065fc:	4975      	ldr	r1, [pc, #468]	; (80067d4 <HAL_RCC_ClockConfig+0x244>)
 80065fe:	4313      	orrs	r3, r2
 8006600:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	681b      	ldr	r3, [r3, #0]
 8006606:	f003 0308 	and.w	r3, r3, #8
 800660a:	2b00      	cmp	r3, #0
 800660c:	d010      	beq.n	8006630 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	695a      	ldr	r2, [r3, #20]
 8006612:	4b70      	ldr	r3, [pc, #448]	; (80067d4 <HAL_RCC_ClockConfig+0x244>)
 8006614:	69db      	ldr	r3, [r3, #28]
 8006616:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800661a:	429a      	cmp	r2, r3
 800661c:	d908      	bls.n	8006630 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800661e:	4b6d      	ldr	r3, [pc, #436]	; (80067d4 <HAL_RCC_ClockConfig+0x244>)
 8006620:	69db      	ldr	r3, [r3, #28]
 8006622:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	695b      	ldr	r3, [r3, #20]
 800662a:	496a      	ldr	r1, [pc, #424]	; (80067d4 <HAL_RCC_ClockConfig+0x244>)
 800662c:	4313      	orrs	r3, r2
 800662e:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	681b      	ldr	r3, [r3, #0]
 8006634:	f003 0310 	and.w	r3, r3, #16
 8006638:	2b00      	cmp	r3, #0
 800663a:	d010      	beq.n	800665e <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	699a      	ldr	r2, [r3, #24]
 8006640:	4b64      	ldr	r3, [pc, #400]	; (80067d4 <HAL_RCC_ClockConfig+0x244>)
 8006642:	69db      	ldr	r3, [r3, #28]
 8006644:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8006648:	429a      	cmp	r2, r3
 800664a:	d908      	bls.n	800665e <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800664c:	4b61      	ldr	r3, [pc, #388]	; (80067d4 <HAL_RCC_ClockConfig+0x244>)
 800664e:	69db      	ldr	r3, [r3, #28]
 8006650:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	699b      	ldr	r3, [r3, #24]
 8006658:	495e      	ldr	r1, [pc, #376]	; (80067d4 <HAL_RCC_ClockConfig+0x244>)
 800665a:	4313      	orrs	r3, r2
 800665c:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	681b      	ldr	r3, [r3, #0]
 8006662:	f003 0320 	and.w	r3, r3, #32
 8006666:	2b00      	cmp	r3, #0
 8006668:	d010      	beq.n	800668c <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	69da      	ldr	r2, [r3, #28]
 800666e:	4b59      	ldr	r3, [pc, #356]	; (80067d4 <HAL_RCC_ClockConfig+0x244>)
 8006670:	6a1b      	ldr	r3, [r3, #32]
 8006672:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8006676:	429a      	cmp	r2, r3
 8006678:	d908      	bls.n	800668c <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 800667a:	4b56      	ldr	r3, [pc, #344]	; (80067d4 <HAL_RCC_ClockConfig+0x244>)
 800667c:	6a1b      	ldr	r3, [r3, #32]
 800667e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	69db      	ldr	r3, [r3, #28]
 8006686:	4953      	ldr	r1, [pc, #332]	; (80067d4 <HAL_RCC_ClockConfig+0x244>)
 8006688:	4313      	orrs	r3, r2
 800668a:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	681b      	ldr	r3, [r3, #0]
 8006690:	f003 0302 	and.w	r3, r3, #2
 8006694:	2b00      	cmp	r3, #0
 8006696:	d010      	beq.n	80066ba <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	68da      	ldr	r2, [r3, #12]
 800669c:	4b4d      	ldr	r3, [pc, #308]	; (80067d4 <HAL_RCC_ClockConfig+0x244>)
 800669e:	699b      	ldr	r3, [r3, #24]
 80066a0:	f003 030f 	and.w	r3, r3, #15
 80066a4:	429a      	cmp	r2, r3
 80066a6:	d908      	bls.n	80066ba <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80066a8:	4b4a      	ldr	r3, [pc, #296]	; (80067d4 <HAL_RCC_ClockConfig+0x244>)
 80066aa:	699b      	ldr	r3, [r3, #24]
 80066ac:	f023 020f 	bic.w	r2, r3, #15
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	68db      	ldr	r3, [r3, #12]
 80066b4:	4947      	ldr	r1, [pc, #284]	; (80067d4 <HAL_RCC_ClockConfig+0x244>)
 80066b6:	4313      	orrs	r3, r2
 80066b8:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	681b      	ldr	r3, [r3, #0]
 80066be:	f003 0301 	and.w	r3, r3, #1
 80066c2:	2b00      	cmp	r3, #0
 80066c4:	d055      	beq.n	8006772 <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 80066c6:	4b43      	ldr	r3, [pc, #268]	; (80067d4 <HAL_RCC_ClockConfig+0x244>)
 80066c8:	699b      	ldr	r3, [r3, #24]
 80066ca:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	689b      	ldr	r3, [r3, #8]
 80066d2:	4940      	ldr	r1, [pc, #256]	; (80067d4 <HAL_RCC_ClockConfig+0x244>)
 80066d4:	4313      	orrs	r3, r2
 80066d6:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	685b      	ldr	r3, [r3, #4]
 80066dc:	2b02      	cmp	r3, #2
 80066de:	d107      	bne.n	80066f0 <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80066e0:	4b3c      	ldr	r3, [pc, #240]	; (80067d4 <HAL_RCC_ClockConfig+0x244>)
 80066e2:	681b      	ldr	r3, [r3, #0]
 80066e4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80066e8:	2b00      	cmp	r3, #0
 80066ea:	d121      	bne.n	8006730 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80066ec:	2301      	movs	r3, #1
 80066ee:	e0f6      	b.n	80068de <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	685b      	ldr	r3, [r3, #4]
 80066f4:	2b03      	cmp	r3, #3
 80066f6:	d107      	bne.n	8006708 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80066f8:	4b36      	ldr	r3, [pc, #216]	; (80067d4 <HAL_RCC_ClockConfig+0x244>)
 80066fa:	681b      	ldr	r3, [r3, #0]
 80066fc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006700:	2b00      	cmp	r3, #0
 8006702:	d115      	bne.n	8006730 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8006704:	2301      	movs	r3, #1
 8006706:	e0ea      	b.n	80068de <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	685b      	ldr	r3, [r3, #4]
 800670c:	2b01      	cmp	r3, #1
 800670e:	d107      	bne.n	8006720 <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8006710:	4b30      	ldr	r3, [pc, #192]	; (80067d4 <HAL_RCC_ClockConfig+0x244>)
 8006712:	681b      	ldr	r3, [r3, #0]
 8006714:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006718:	2b00      	cmp	r3, #0
 800671a:	d109      	bne.n	8006730 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 800671c:	2301      	movs	r3, #1
 800671e:	e0de      	b.n	80068de <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8006720:	4b2c      	ldr	r3, [pc, #176]	; (80067d4 <HAL_RCC_ClockConfig+0x244>)
 8006722:	681b      	ldr	r3, [r3, #0]
 8006724:	f003 0304 	and.w	r3, r3, #4
 8006728:	2b00      	cmp	r3, #0
 800672a:	d101      	bne.n	8006730 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 800672c:	2301      	movs	r3, #1
 800672e:	e0d6      	b.n	80068de <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8006730:	4b28      	ldr	r3, [pc, #160]	; (80067d4 <HAL_RCC_ClockConfig+0x244>)
 8006732:	691b      	ldr	r3, [r3, #16]
 8006734:	f023 0207 	bic.w	r2, r3, #7
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	685b      	ldr	r3, [r3, #4]
 800673c:	4925      	ldr	r1, [pc, #148]	; (80067d4 <HAL_RCC_ClockConfig+0x244>)
 800673e:	4313      	orrs	r3, r2
 8006740:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006742:	f7fb f93d 	bl	80019c0 <HAL_GetTick>
 8006746:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006748:	e00a      	b.n	8006760 <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800674a:	f7fb f939 	bl	80019c0 <HAL_GetTick>
 800674e:	4602      	mov	r2, r0
 8006750:	697b      	ldr	r3, [r7, #20]
 8006752:	1ad3      	subs	r3, r2, r3
 8006754:	f241 3288 	movw	r2, #5000	; 0x1388
 8006758:	4293      	cmp	r3, r2
 800675a:	d901      	bls.n	8006760 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 800675c:	2303      	movs	r3, #3
 800675e:	e0be      	b.n	80068de <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006760:	4b1c      	ldr	r3, [pc, #112]	; (80067d4 <HAL_RCC_ClockConfig+0x244>)
 8006762:	691b      	ldr	r3, [r3, #16]
 8006764:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	685b      	ldr	r3, [r3, #4]
 800676c:	00db      	lsls	r3, r3, #3
 800676e:	429a      	cmp	r2, r3
 8006770:	d1eb      	bne.n	800674a <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	681b      	ldr	r3, [r3, #0]
 8006776:	f003 0302 	and.w	r3, r3, #2
 800677a:	2b00      	cmp	r3, #0
 800677c:	d010      	beq.n	80067a0 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	68da      	ldr	r2, [r3, #12]
 8006782:	4b14      	ldr	r3, [pc, #80]	; (80067d4 <HAL_RCC_ClockConfig+0x244>)
 8006784:	699b      	ldr	r3, [r3, #24]
 8006786:	f003 030f 	and.w	r3, r3, #15
 800678a:	429a      	cmp	r2, r3
 800678c:	d208      	bcs.n	80067a0 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800678e:	4b11      	ldr	r3, [pc, #68]	; (80067d4 <HAL_RCC_ClockConfig+0x244>)
 8006790:	699b      	ldr	r3, [r3, #24]
 8006792:	f023 020f 	bic.w	r2, r3, #15
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	68db      	ldr	r3, [r3, #12]
 800679a:	490e      	ldr	r1, [pc, #56]	; (80067d4 <HAL_RCC_ClockConfig+0x244>)
 800679c:	4313      	orrs	r3, r2
 800679e:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80067a0:	4b0b      	ldr	r3, [pc, #44]	; (80067d0 <HAL_RCC_ClockConfig+0x240>)
 80067a2:	681b      	ldr	r3, [r3, #0]
 80067a4:	f003 030f 	and.w	r3, r3, #15
 80067a8:	683a      	ldr	r2, [r7, #0]
 80067aa:	429a      	cmp	r2, r3
 80067ac:	d214      	bcs.n	80067d8 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80067ae:	4b08      	ldr	r3, [pc, #32]	; (80067d0 <HAL_RCC_ClockConfig+0x240>)
 80067b0:	681b      	ldr	r3, [r3, #0]
 80067b2:	f023 020f 	bic.w	r2, r3, #15
 80067b6:	4906      	ldr	r1, [pc, #24]	; (80067d0 <HAL_RCC_ClockConfig+0x240>)
 80067b8:	683b      	ldr	r3, [r7, #0]
 80067ba:	4313      	orrs	r3, r2
 80067bc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80067be:	4b04      	ldr	r3, [pc, #16]	; (80067d0 <HAL_RCC_ClockConfig+0x240>)
 80067c0:	681b      	ldr	r3, [r3, #0]
 80067c2:	f003 030f 	and.w	r3, r3, #15
 80067c6:	683a      	ldr	r2, [r7, #0]
 80067c8:	429a      	cmp	r2, r3
 80067ca:	d005      	beq.n	80067d8 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 80067cc:	2301      	movs	r3, #1
 80067ce:	e086      	b.n	80068de <HAL_RCC_ClockConfig+0x34e>
 80067d0:	52002000 	.word	0x52002000
 80067d4:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	681b      	ldr	r3, [r3, #0]
 80067dc:	f003 0304 	and.w	r3, r3, #4
 80067e0:	2b00      	cmp	r3, #0
 80067e2:	d010      	beq.n	8006806 <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	691a      	ldr	r2, [r3, #16]
 80067e8:	4b3f      	ldr	r3, [pc, #252]	; (80068e8 <HAL_RCC_ClockConfig+0x358>)
 80067ea:	699b      	ldr	r3, [r3, #24]
 80067ec:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80067f0:	429a      	cmp	r2, r3
 80067f2:	d208      	bcs.n	8006806 <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80067f4:	4b3c      	ldr	r3, [pc, #240]	; (80068e8 <HAL_RCC_ClockConfig+0x358>)
 80067f6:	699b      	ldr	r3, [r3, #24]
 80067f8:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	691b      	ldr	r3, [r3, #16]
 8006800:	4939      	ldr	r1, [pc, #228]	; (80068e8 <HAL_RCC_ClockConfig+0x358>)
 8006802:	4313      	orrs	r3, r2
 8006804:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	681b      	ldr	r3, [r3, #0]
 800680a:	f003 0308 	and.w	r3, r3, #8
 800680e:	2b00      	cmp	r3, #0
 8006810:	d010      	beq.n	8006834 <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	695a      	ldr	r2, [r3, #20]
 8006816:	4b34      	ldr	r3, [pc, #208]	; (80068e8 <HAL_RCC_ClockConfig+0x358>)
 8006818:	69db      	ldr	r3, [r3, #28]
 800681a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800681e:	429a      	cmp	r2, r3
 8006820:	d208      	bcs.n	8006834 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8006822:	4b31      	ldr	r3, [pc, #196]	; (80068e8 <HAL_RCC_ClockConfig+0x358>)
 8006824:	69db      	ldr	r3, [r3, #28]
 8006826:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	695b      	ldr	r3, [r3, #20]
 800682e:	492e      	ldr	r1, [pc, #184]	; (80068e8 <HAL_RCC_ClockConfig+0x358>)
 8006830:	4313      	orrs	r3, r2
 8006832:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	681b      	ldr	r3, [r3, #0]
 8006838:	f003 0310 	and.w	r3, r3, #16
 800683c:	2b00      	cmp	r3, #0
 800683e:	d010      	beq.n	8006862 <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	699a      	ldr	r2, [r3, #24]
 8006844:	4b28      	ldr	r3, [pc, #160]	; (80068e8 <HAL_RCC_ClockConfig+0x358>)
 8006846:	69db      	ldr	r3, [r3, #28]
 8006848:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800684c:	429a      	cmp	r2, r3
 800684e:	d208      	bcs.n	8006862 <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8006850:	4b25      	ldr	r3, [pc, #148]	; (80068e8 <HAL_RCC_ClockConfig+0x358>)
 8006852:	69db      	ldr	r3, [r3, #28]
 8006854:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	699b      	ldr	r3, [r3, #24]
 800685c:	4922      	ldr	r1, [pc, #136]	; (80068e8 <HAL_RCC_ClockConfig+0x358>)
 800685e:	4313      	orrs	r3, r2
 8006860:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	681b      	ldr	r3, [r3, #0]
 8006866:	f003 0320 	and.w	r3, r3, #32
 800686a:	2b00      	cmp	r3, #0
 800686c:	d010      	beq.n	8006890 <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	69da      	ldr	r2, [r3, #28]
 8006872:	4b1d      	ldr	r3, [pc, #116]	; (80068e8 <HAL_RCC_ClockConfig+0x358>)
 8006874:	6a1b      	ldr	r3, [r3, #32]
 8006876:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800687a:	429a      	cmp	r2, r3
 800687c:	d208      	bcs.n	8006890 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 800687e:	4b1a      	ldr	r3, [pc, #104]	; (80068e8 <HAL_RCC_ClockConfig+0x358>)
 8006880:	6a1b      	ldr	r3, [r3, #32]
 8006882:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	69db      	ldr	r3, [r3, #28]
 800688a:	4917      	ldr	r1, [pc, #92]	; (80068e8 <HAL_RCC_ClockConfig+0x358>)
 800688c:	4313      	orrs	r3, r2
 800688e:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8006890:	f000 f834 	bl	80068fc <HAL_RCC_GetSysClockFreq>
 8006894:	4601      	mov	r1, r0
 8006896:	4b14      	ldr	r3, [pc, #80]	; (80068e8 <HAL_RCC_ClockConfig+0x358>)
 8006898:	699b      	ldr	r3, [r3, #24]
 800689a:	0a1b      	lsrs	r3, r3, #8
 800689c:	f003 030f 	and.w	r3, r3, #15
 80068a0:	4a12      	ldr	r2, [pc, #72]	; (80068ec <HAL_RCC_ClockConfig+0x35c>)
 80068a2:	5cd3      	ldrb	r3, [r2, r3]
 80068a4:	f003 031f 	and.w	r3, r3, #31
 80068a8:	fa21 f303 	lsr.w	r3, r1, r3
 80068ac:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80068ae:	4b0e      	ldr	r3, [pc, #56]	; (80068e8 <HAL_RCC_ClockConfig+0x358>)
 80068b0:	699b      	ldr	r3, [r3, #24]
 80068b2:	f003 030f 	and.w	r3, r3, #15
 80068b6:	4a0d      	ldr	r2, [pc, #52]	; (80068ec <HAL_RCC_ClockConfig+0x35c>)
 80068b8:	5cd3      	ldrb	r3, [r2, r3]
 80068ba:	f003 031f 	and.w	r3, r3, #31
 80068be:	693a      	ldr	r2, [r7, #16]
 80068c0:	fa22 f303 	lsr.w	r3, r2, r3
 80068c4:	4a0a      	ldr	r2, [pc, #40]	; (80068f0 <HAL_RCC_ClockConfig+0x360>)
 80068c6:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80068c8:	4a0a      	ldr	r2, [pc, #40]	; (80068f4 <HAL_RCC_ClockConfig+0x364>)
 80068ca:	693b      	ldr	r3, [r7, #16]
 80068cc:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 80068ce:	4b0a      	ldr	r3, [pc, #40]	; (80068f8 <HAL_RCC_ClockConfig+0x368>)
 80068d0:	681b      	ldr	r3, [r3, #0]
 80068d2:	4618      	mov	r0, r3
 80068d4:	f7fb f82a 	bl	800192c <HAL_InitTick>
 80068d8:	4603      	mov	r3, r0
 80068da:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 80068dc:	7bfb      	ldrb	r3, [r7, #15]
}
 80068de:	4618      	mov	r0, r3
 80068e0:	3718      	adds	r7, #24
 80068e2:	46bd      	mov	sp, r7
 80068e4:	bd80      	pop	{r7, pc}
 80068e6:	bf00      	nop
 80068e8:	58024400 	.word	0x58024400
 80068ec:	08012664 	.word	0x08012664
 80068f0:	24000004 	.word	0x24000004
 80068f4:	24000000 	.word	0x24000000
 80068f8:	24000008 	.word	0x24000008

080068fc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80068fc:	b480      	push	{r7}
 80068fe:	b089      	sub	sp, #36	; 0x24
 8006900:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006902:	4baf      	ldr	r3, [pc, #700]	; (8006bc0 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8006904:	691b      	ldr	r3, [r3, #16]
 8006906:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800690a:	2b18      	cmp	r3, #24
 800690c:	f200 814e 	bhi.w	8006bac <HAL_RCC_GetSysClockFreq+0x2b0>
 8006910:	a201      	add	r2, pc, #4	; (adr r2, 8006918 <HAL_RCC_GetSysClockFreq+0x1c>)
 8006912:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006916:	bf00      	nop
 8006918:	0800697d 	.word	0x0800697d
 800691c:	08006bad 	.word	0x08006bad
 8006920:	08006bad 	.word	0x08006bad
 8006924:	08006bad 	.word	0x08006bad
 8006928:	08006bad 	.word	0x08006bad
 800692c:	08006bad 	.word	0x08006bad
 8006930:	08006bad 	.word	0x08006bad
 8006934:	08006bad 	.word	0x08006bad
 8006938:	080069a3 	.word	0x080069a3
 800693c:	08006bad 	.word	0x08006bad
 8006940:	08006bad 	.word	0x08006bad
 8006944:	08006bad 	.word	0x08006bad
 8006948:	08006bad 	.word	0x08006bad
 800694c:	08006bad 	.word	0x08006bad
 8006950:	08006bad 	.word	0x08006bad
 8006954:	08006bad 	.word	0x08006bad
 8006958:	080069a9 	.word	0x080069a9
 800695c:	08006bad 	.word	0x08006bad
 8006960:	08006bad 	.word	0x08006bad
 8006964:	08006bad 	.word	0x08006bad
 8006968:	08006bad 	.word	0x08006bad
 800696c:	08006bad 	.word	0x08006bad
 8006970:	08006bad 	.word	0x08006bad
 8006974:	08006bad 	.word	0x08006bad
 8006978:	080069af 	.word	0x080069af
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800697c:	4b90      	ldr	r3, [pc, #576]	; (8006bc0 <HAL_RCC_GetSysClockFreq+0x2c4>)
 800697e:	681b      	ldr	r3, [r3, #0]
 8006980:	f003 0320 	and.w	r3, r3, #32
 8006984:	2b00      	cmp	r3, #0
 8006986:	d009      	beq.n	800699c <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8006988:	4b8d      	ldr	r3, [pc, #564]	; (8006bc0 <HAL_RCC_GetSysClockFreq+0x2c4>)
 800698a:	681b      	ldr	r3, [r3, #0]
 800698c:	08db      	lsrs	r3, r3, #3
 800698e:	f003 0303 	and.w	r3, r3, #3
 8006992:	4a8c      	ldr	r2, [pc, #560]	; (8006bc4 <HAL_RCC_GetSysClockFreq+0x2c8>)
 8006994:	fa22 f303 	lsr.w	r3, r2, r3
 8006998:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 800699a:	e10a      	b.n	8006bb2 <HAL_RCC_GetSysClockFreq+0x2b6>
        sysclockfreq = (uint32_t) HSI_VALUE;
 800699c:	4b89      	ldr	r3, [pc, #548]	; (8006bc4 <HAL_RCC_GetSysClockFreq+0x2c8>)
 800699e:	61bb      	str	r3, [r7, #24]
    break;
 80069a0:	e107      	b.n	8006bb2 <HAL_RCC_GetSysClockFreq+0x2b6>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 80069a2:	4b89      	ldr	r3, [pc, #548]	; (8006bc8 <HAL_RCC_GetSysClockFreq+0x2cc>)
 80069a4:	61bb      	str	r3, [r7, #24]
    break;
 80069a6:	e104      	b.n	8006bb2 <HAL_RCC_GetSysClockFreq+0x2b6>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 80069a8:	4b88      	ldr	r3, [pc, #544]	; (8006bcc <HAL_RCC_GetSysClockFreq+0x2d0>)
 80069aa:	61bb      	str	r3, [r7, #24]
    break;
 80069ac:	e101      	b.n	8006bb2 <HAL_RCC_GetSysClockFreq+0x2b6>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80069ae:	4b84      	ldr	r3, [pc, #528]	; (8006bc0 <HAL_RCC_GetSysClockFreq+0x2c4>)
 80069b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80069b2:	f003 0303 	and.w	r3, r3, #3
 80069b6:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 80069b8:	4b81      	ldr	r3, [pc, #516]	; (8006bc0 <HAL_RCC_GetSysClockFreq+0x2c4>)
 80069ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80069bc:	091b      	lsrs	r3, r3, #4
 80069be:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80069c2:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 80069c4:	4b7e      	ldr	r3, [pc, #504]	; (8006bc0 <HAL_RCC_GetSysClockFreq+0x2c4>)
 80069c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80069c8:	f003 0301 	and.w	r3, r3, #1
 80069cc:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 80069ce:	4b7c      	ldr	r3, [pc, #496]	; (8006bc0 <HAL_RCC_GetSysClockFreq+0x2c4>)
 80069d0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80069d2:	08db      	lsrs	r3, r3, #3
 80069d4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80069d8:	68fa      	ldr	r2, [r7, #12]
 80069da:	fb02 f303 	mul.w	r3, r2, r3
 80069de:	ee07 3a90 	vmov	s15, r3
 80069e2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80069e6:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 80069ea:	693b      	ldr	r3, [r7, #16]
 80069ec:	2b00      	cmp	r3, #0
 80069ee:	f000 80da 	beq.w	8006ba6 <HAL_RCC_GetSysClockFreq+0x2aa>
    {
      switch (pllsource)
 80069f2:	697b      	ldr	r3, [r7, #20]
 80069f4:	2b01      	cmp	r3, #1
 80069f6:	d05a      	beq.n	8006aae <HAL_RCC_GetSysClockFreq+0x1b2>
 80069f8:	2b01      	cmp	r3, #1
 80069fa:	d302      	bcc.n	8006a02 <HAL_RCC_GetSysClockFreq+0x106>
 80069fc:	2b02      	cmp	r3, #2
 80069fe:	d078      	beq.n	8006af2 <HAL_RCC_GetSysClockFreq+0x1f6>
 8006a00:	e099      	b.n	8006b36 <HAL_RCC_GetSysClockFreq+0x23a>
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006a02:	4b6f      	ldr	r3, [pc, #444]	; (8006bc0 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8006a04:	681b      	ldr	r3, [r3, #0]
 8006a06:	f003 0320 	and.w	r3, r3, #32
 8006a0a:	2b00      	cmp	r3, #0
 8006a0c:	d02d      	beq.n	8006a6a <HAL_RCC_GetSysClockFreq+0x16e>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8006a0e:	4b6c      	ldr	r3, [pc, #432]	; (8006bc0 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8006a10:	681b      	ldr	r3, [r3, #0]
 8006a12:	08db      	lsrs	r3, r3, #3
 8006a14:	f003 0303 	and.w	r3, r3, #3
 8006a18:	4a6a      	ldr	r2, [pc, #424]	; (8006bc4 <HAL_RCC_GetSysClockFreq+0x2c8>)
 8006a1a:	fa22 f303 	lsr.w	r3, r2, r3
 8006a1e:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	ee07 3a90 	vmov	s15, r3
 8006a26:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006a2a:	693b      	ldr	r3, [r7, #16]
 8006a2c:	ee07 3a90 	vmov	s15, r3
 8006a30:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006a34:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006a38:	4b61      	ldr	r3, [pc, #388]	; (8006bc0 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8006a3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006a3c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006a40:	ee07 3a90 	vmov	s15, r3
 8006a44:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006a48:	ed97 6a02 	vldr	s12, [r7, #8]
 8006a4c:	eddf 5a60 	vldr	s11, [pc, #384]	; 8006bd0 <HAL_RCC_GetSysClockFreq+0x2d4>
 8006a50:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006a54:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006a58:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006a5c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006a60:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006a64:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 8006a68:	e087      	b.n	8006b7a <HAL_RCC_GetSysClockFreq+0x27e>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8006a6a:	693b      	ldr	r3, [r7, #16]
 8006a6c:	ee07 3a90 	vmov	s15, r3
 8006a70:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006a74:	eddf 6a57 	vldr	s13, [pc, #348]	; 8006bd4 <HAL_RCC_GetSysClockFreq+0x2d8>
 8006a78:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006a7c:	4b50      	ldr	r3, [pc, #320]	; (8006bc0 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8006a7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006a80:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006a84:	ee07 3a90 	vmov	s15, r3
 8006a88:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006a8c:	ed97 6a02 	vldr	s12, [r7, #8]
 8006a90:	eddf 5a4f 	vldr	s11, [pc, #316]	; 8006bd0 <HAL_RCC_GetSysClockFreq+0x2d4>
 8006a94:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006a98:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006a9c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006aa0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006aa4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006aa8:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006aac:	e065      	b.n	8006b7a <HAL_RCC_GetSysClockFreq+0x27e>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8006aae:	693b      	ldr	r3, [r7, #16]
 8006ab0:	ee07 3a90 	vmov	s15, r3
 8006ab4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006ab8:	eddf 6a47 	vldr	s13, [pc, #284]	; 8006bd8 <HAL_RCC_GetSysClockFreq+0x2dc>
 8006abc:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006ac0:	4b3f      	ldr	r3, [pc, #252]	; (8006bc0 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8006ac2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006ac4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006ac8:	ee07 3a90 	vmov	s15, r3
 8006acc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006ad0:	ed97 6a02 	vldr	s12, [r7, #8]
 8006ad4:	eddf 5a3e 	vldr	s11, [pc, #248]	; 8006bd0 <HAL_RCC_GetSysClockFreq+0x2d4>
 8006ad8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006adc:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006ae0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006ae4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006ae8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006aec:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006af0:	e043      	b.n	8006b7a <HAL_RCC_GetSysClockFreq+0x27e>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8006af2:	693b      	ldr	r3, [r7, #16]
 8006af4:	ee07 3a90 	vmov	s15, r3
 8006af8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006afc:	eddf 6a37 	vldr	s13, [pc, #220]	; 8006bdc <HAL_RCC_GetSysClockFreq+0x2e0>
 8006b00:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006b04:	4b2e      	ldr	r3, [pc, #184]	; (8006bc0 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8006b06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006b08:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006b0c:	ee07 3a90 	vmov	s15, r3
 8006b10:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006b14:	ed97 6a02 	vldr	s12, [r7, #8]
 8006b18:	eddf 5a2d 	vldr	s11, [pc, #180]	; 8006bd0 <HAL_RCC_GetSysClockFreq+0x2d4>
 8006b1c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006b20:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006b24:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006b28:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006b2c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006b30:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006b34:	e021      	b.n	8006b7a <HAL_RCC_GetSysClockFreq+0x27e>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8006b36:	693b      	ldr	r3, [r7, #16]
 8006b38:	ee07 3a90 	vmov	s15, r3
 8006b3c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006b40:	eddf 6a25 	vldr	s13, [pc, #148]	; 8006bd8 <HAL_RCC_GetSysClockFreq+0x2dc>
 8006b44:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006b48:	4b1d      	ldr	r3, [pc, #116]	; (8006bc0 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8006b4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006b4c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006b50:	ee07 3a90 	vmov	s15, r3
 8006b54:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006b58:	ed97 6a02 	vldr	s12, [r7, #8]
 8006b5c:	eddf 5a1c 	vldr	s11, [pc, #112]	; 8006bd0 <HAL_RCC_GetSysClockFreq+0x2d4>
 8006b60:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006b64:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006b68:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006b6c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006b70:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006b74:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006b78:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 8006b7a:	4b11      	ldr	r3, [pc, #68]	; (8006bc0 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8006b7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006b7e:	0a5b      	lsrs	r3, r3, #9
 8006b80:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006b84:	3301      	adds	r3, #1
 8006b86:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 8006b88:	683b      	ldr	r3, [r7, #0]
 8006b8a:	ee07 3a90 	vmov	s15, r3
 8006b8e:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8006b92:	edd7 6a07 	vldr	s13, [r7, #28]
 8006b96:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006b9a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006b9e:	ee17 3a90 	vmov	r3, s15
 8006ba2:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 8006ba4:	e005      	b.n	8006bb2 <HAL_RCC_GetSysClockFreq+0x2b6>
      sysclockfreq = 0U;
 8006ba6:	2300      	movs	r3, #0
 8006ba8:	61bb      	str	r3, [r7, #24]
    break;
 8006baa:	e002      	b.n	8006bb2 <HAL_RCC_GetSysClockFreq+0x2b6>

  default:
    sysclockfreq = CSI_VALUE;
 8006bac:	4b06      	ldr	r3, [pc, #24]	; (8006bc8 <HAL_RCC_GetSysClockFreq+0x2cc>)
 8006bae:	61bb      	str	r3, [r7, #24]
    break;
 8006bb0:	bf00      	nop
  }

  return sysclockfreq;
 8006bb2:	69bb      	ldr	r3, [r7, #24]
}
 8006bb4:	4618      	mov	r0, r3
 8006bb6:	3724      	adds	r7, #36	; 0x24
 8006bb8:	46bd      	mov	sp, r7
 8006bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bbe:	4770      	bx	lr
 8006bc0:	58024400 	.word	0x58024400
 8006bc4:	03d09000 	.word	0x03d09000
 8006bc8:	003d0900 	.word	0x003d0900
 8006bcc:	017d7840 	.word	0x017d7840
 8006bd0:	46000000 	.word	0x46000000
 8006bd4:	4c742400 	.word	0x4c742400
 8006bd8:	4a742400 	.word	0x4a742400
 8006bdc:	4bbebc20 	.word	0x4bbebc20

08006be0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006be0:	b580      	push	{r7, lr}
 8006be2:	b082      	sub	sp, #8
 8006be4:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8006be6:	f7ff fe89 	bl	80068fc <HAL_RCC_GetSysClockFreq>
 8006bea:	4601      	mov	r1, r0
 8006bec:	4b10      	ldr	r3, [pc, #64]	; (8006c30 <HAL_RCC_GetHCLKFreq+0x50>)
 8006bee:	699b      	ldr	r3, [r3, #24]
 8006bf0:	0a1b      	lsrs	r3, r3, #8
 8006bf2:	f003 030f 	and.w	r3, r3, #15
 8006bf6:	4a0f      	ldr	r2, [pc, #60]	; (8006c34 <HAL_RCC_GetHCLKFreq+0x54>)
 8006bf8:	5cd3      	ldrb	r3, [r2, r3]
 8006bfa:	f003 031f 	and.w	r3, r3, #31
 8006bfe:	fa21 f303 	lsr.w	r3, r1, r3
 8006c02:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8006c04:	4b0a      	ldr	r3, [pc, #40]	; (8006c30 <HAL_RCC_GetHCLKFreq+0x50>)
 8006c06:	699b      	ldr	r3, [r3, #24]
 8006c08:	f003 030f 	and.w	r3, r3, #15
 8006c0c:	4a09      	ldr	r2, [pc, #36]	; (8006c34 <HAL_RCC_GetHCLKFreq+0x54>)
 8006c0e:	5cd3      	ldrb	r3, [r2, r3]
 8006c10:	f003 031f 	and.w	r3, r3, #31
 8006c14:	687a      	ldr	r2, [r7, #4]
 8006c16:	fa22 f303 	lsr.w	r3, r2, r3
 8006c1a:	4a07      	ldr	r2, [pc, #28]	; (8006c38 <HAL_RCC_GetHCLKFreq+0x58>)
 8006c1c:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8006c1e:	4a07      	ldr	r2, [pc, #28]	; (8006c3c <HAL_RCC_GetHCLKFreq+0x5c>)
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8006c24:	4b04      	ldr	r3, [pc, #16]	; (8006c38 <HAL_RCC_GetHCLKFreq+0x58>)
 8006c26:	681b      	ldr	r3, [r3, #0]
}
 8006c28:	4618      	mov	r0, r3
 8006c2a:	3708      	adds	r7, #8
 8006c2c:	46bd      	mov	sp, r7
 8006c2e:	bd80      	pop	{r7, pc}
 8006c30:	58024400 	.word	0x58024400
 8006c34:	08012664 	.word	0x08012664
 8006c38:	24000004 	.word	0x24000004
 8006c3c:	24000000 	.word	0x24000000

08006c40 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006c40:	b580      	push	{r7, lr}
 8006c42:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8006c44:	f7ff ffcc 	bl	8006be0 <HAL_RCC_GetHCLKFreq>
 8006c48:	4601      	mov	r1, r0
 8006c4a:	4b06      	ldr	r3, [pc, #24]	; (8006c64 <HAL_RCC_GetPCLK1Freq+0x24>)
 8006c4c:	69db      	ldr	r3, [r3, #28]
 8006c4e:	091b      	lsrs	r3, r3, #4
 8006c50:	f003 0307 	and.w	r3, r3, #7
 8006c54:	4a04      	ldr	r2, [pc, #16]	; (8006c68 <HAL_RCC_GetPCLK1Freq+0x28>)
 8006c56:	5cd3      	ldrb	r3, [r2, r3]
 8006c58:	f003 031f 	and.w	r3, r3, #31
 8006c5c:	fa21 f303 	lsr.w	r3, r1, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8006c60:	4618      	mov	r0, r3
 8006c62:	bd80      	pop	{r7, pc}
 8006c64:	58024400 	.word	0x58024400
 8006c68:	08012664 	.word	0x08012664

08006c6c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006c6c:	b580      	push	{r7, lr}
 8006c6e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8006c70:	f7ff ffb6 	bl	8006be0 <HAL_RCC_GetHCLKFreq>
 8006c74:	4601      	mov	r1, r0
 8006c76:	4b06      	ldr	r3, [pc, #24]	; (8006c90 <HAL_RCC_GetPCLK2Freq+0x24>)
 8006c78:	69db      	ldr	r3, [r3, #28]
 8006c7a:	0a1b      	lsrs	r3, r3, #8
 8006c7c:	f003 0307 	and.w	r3, r3, #7
 8006c80:	4a04      	ldr	r2, [pc, #16]	; (8006c94 <HAL_RCC_GetPCLK2Freq+0x28>)
 8006c82:	5cd3      	ldrb	r3, [r2, r3]
 8006c84:	f003 031f 	and.w	r3, r3, #31
 8006c88:	fa21 f303 	lsr.w	r3, r1, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8006c8c:	4618      	mov	r0, r3
 8006c8e:	bd80      	pop	{r7, pc}
 8006c90:	58024400 	.word	0x58024400
 8006c94:	08012664 	.word	0x08012664

08006c98 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006c98:	b580      	push	{r7, lr}
 8006c9a:	b086      	sub	sp, #24
 8006c9c:	af00      	add	r7, sp, #0
 8006c9e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8006ca0:	2300      	movs	r3, #0
 8006ca2:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8006ca4:	2300      	movs	r3, #0
 8006ca6:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	681b      	ldr	r3, [r3, #0]
 8006cac:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006cb0:	2b00      	cmp	r3, #0
 8006cb2:	d03d      	beq.n	8006d30 <HAL_RCCEx_PeriphCLKConfig+0x98>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006cb8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006cbc:	d013      	beq.n	8006ce6 <HAL_RCCEx_PeriphCLKConfig+0x4e>
 8006cbe:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006cc2:	d802      	bhi.n	8006cca <HAL_RCCEx_PeriphCLKConfig+0x32>
 8006cc4:	2b00      	cmp	r3, #0
 8006cc6:	d007      	beq.n	8006cd8 <HAL_RCCEx_PeriphCLKConfig+0x40>
 8006cc8:	e01f      	b.n	8006d0a <HAL_RCCEx_PeriphCLKConfig+0x72>
 8006cca:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006cce:	d013      	beq.n	8006cf8 <HAL_RCCEx_PeriphCLKConfig+0x60>
 8006cd0:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8006cd4:	d01c      	beq.n	8006d10 <HAL_RCCEx_PeriphCLKConfig+0x78>
 8006cd6:	e018      	b.n	8006d0a <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006cd8:	4baf      	ldr	r3, [pc, #700]	; (8006f98 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8006cda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006cdc:	4aae      	ldr	r2, [pc, #696]	; (8006f98 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8006cde:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006ce2:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8006ce4:	e015      	b.n	8006d12 <HAL_RCCEx_PeriphCLKConfig+0x7a>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	3304      	adds	r3, #4
 8006cea:	2102      	movs	r1, #2
 8006cec:	4618      	mov	r0, r3
 8006cee:	f001 fd33 	bl	8008758 <RCCEx_PLL2_Config>
 8006cf2:	4603      	mov	r3, r0
 8006cf4:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8006cf6:	e00c      	b.n	8006d12 <HAL_RCCEx_PeriphCLKConfig+0x7a>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	3324      	adds	r3, #36	; 0x24
 8006cfc:	2102      	movs	r1, #2
 8006cfe:	4618      	mov	r0, r3
 8006d00:	f001 fddc 	bl	80088bc <RCCEx_PLL3_Config>
 8006d04:	4603      	mov	r3, r0
 8006d06:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8006d08:	e003      	b.n	8006d12 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006d0a:	2301      	movs	r3, #1
 8006d0c:	75fb      	strb	r3, [r7, #23]
      break;
 8006d0e:	e000      	b.n	8006d12 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      break;
 8006d10:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006d12:	7dfb      	ldrb	r3, [r7, #23]
 8006d14:	2b00      	cmp	r3, #0
 8006d16:	d109      	bne.n	8006d2c <HAL_RCCEx_PeriphCLKConfig+0x94>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8006d18:	4b9f      	ldr	r3, [pc, #636]	; (8006f98 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8006d1a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006d1c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006d24:	499c      	ldr	r1, [pc, #624]	; (8006f98 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8006d26:	4313      	orrs	r3, r2
 8006d28:	650b      	str	r3, [r1, #80]	; 0x50
 8006d2a:	e001      	b.n	8006d30 <HAL_RCCEx_PeriphCLKConfig+0x98>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006d2c:	7dfb      	ldrb	r3, [r7, #23]
 8006d2e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	681b      	ldr	r3, [r3, #0]
 8006d34:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006d38:	2b00      	cmp	r3, #0
 8006d3a:	d03d      	beq.n	8006db8 <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006d40:	2b04      	cmp	r3, #4
 8006d42:	d826      	bhi.n	8006d92 <HAL_RCCEx_PeriphCLKConfig+0xfa>
 8006d44:	a201      	add	r2, pc, #4	; (adr r2, 8006d4c <HAL_RCCEx_PeriphCLKConfig+0xb4>)
 8006d46:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006d4a:	bf00      	nop
 8006d4c:	08006d61 	.word	0x08006d61
 8006d50:	08006d6f 	.word	0x08006d6f
 8006d54:	08006d81 	.word	0x08006d81
 8006d58:	08006d99 	.word	0x08006d99
 8006d5c:	08006d99 	.word	0x08006d99
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006d60:	4b8d      	ldr	r3, [pc, #564]	; (8006f98 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8006d62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d64:	4a8c      	ldr	r2, [pc, #560]	; (8006f98 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8006d66:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006d6a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8006d6c:	e015      	b.n	8006d9a <HAL_RCCEx_PeriphCLKConfig+0x102>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	3304      	adds	r3, #4
 8006d72:	2100      	movs	r1, #0
 8006d74:	4618      	mov	r0, r3
 8006d76:	f001 fcef 	bl	8008758 <RCCEx_PLL2_Config>
 8006d7a:	4603      	mov	r3, r0
 8006d7c:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8006d7e:	e00c      	b.n	8006d9a <HAL_RCCEx_PeriphCLKConfig+0x102>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	3324      	adds	r3, #36	; 0x24
 8006d84:	2100      	movs	r1, #0
 8006d86:	4618      	mov	r0, r3
 8006d88:	f001 fd98 	bl	80088bc <RCCEx_PLL3_Config>
 8006d8c:	4603      	mov	r3, r0
 8006d8e:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8006d90:	e003      	b.n	8006d9a <HAL_RCCEx_PeriphCLKConfig+0x102>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006d92:	2301      	movs	r3, #1
 8006d94:	75fb      	strb	r3, [r7, #23]
      break;
 8006d96:	e000      	b.n	8006d9a <HAL_RCCEx_PeriphCLKConfig+0x102>
      break;
 8006d98:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006d9a:	7dfb      	ldrb	r3, [r7, #23]
 8006d9c:	2b00      	cmp	r3, #0
 8006d9e:	d109      	bne.n	8006db4 <HAL_RCCEx_PeriphCLKConfig+0x11c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8006da0:	4b7d      	ldr	r3, [pc, #500]	; (8006f98 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8006da2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006da4:	f023 0207 	bic.w	r2, r3, #7
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006dac:	497a      	ldr	r1, [pc, #488]	; (8006f98 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8006dae:	4313      	orrs	r3, r2
 8006db0:	650b      	str	r3, [r1, #80]	; 0x50
 8006db2:	e001      	b.n	8006db8 <HAL_RCCEx_PeriphCLKConfig+0x120>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006db4:	7dfb      	ldrb	r3, [r7, #23]
 8006db6:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	681b      	ldr	r3, [r3, #0]
 8006dbc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006dc0:	2b00      	cmp	r3, #0
 8006dc2:	d03e      	beq.n	8006e42 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006dc8:	2b80      	cmp	r3, #128	; 0x80
 8006dca:	d01c      	beq.n	8006e06 <HAL_RCCEx_PeriphCLKConfig+0x16e>
 8006dcc:	2b80      	cmp	r3, #128	; 0x80
 8006dce:	d804      	bhi.n	8006dda <HAL_RCCEx_PeriphCLKConfig+0x142>
 8006dd0:	2b00      	cmp	r3, #0
 8006dd2:	d008      	beq.n	8006de6 <HAL_RCCEx_PeriphCLKConfig+0x14e>
 8006dd4:	2b40      	cmp	r3, #64	; 0x40
 8006dd6:	d00d      	beq.n	8006df4 <HAL_RCCEx_PeriphCLKConfig+0x15c>
 8006dd8:	e01e      	b.n	8006e18 <HAL_RCCEx_PeriphCLKConfig+0x180>
 8006dda:	2bc0      	cmp	r3, #192	; 0xc0
 8006ddc:	d01f      	beq.n	8006e1e <HAL_RCCEx_PeriphCLKConfig+0x186>
 8006dde:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006de2:	d01e      	beq.n	8006e22 <HAL_RCCEx_PeriphCLKConfig+0x18a>
 8006de4:	e018      	b.n	8006e18 <HAL_RCCEx_PeriphCLKConfig+0x180>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006de6:	4b6c      	ldr	r3, [pc, #432]	; (8006f98 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8006de8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006dea:	4a6b      	ldr	r2, [pc, #428]	; (8006f98 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8006dec:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006df0:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8006df2:	e017      	b.n	8006e24 <HAL_RCCEx_PeriphCLKConfig+0x18c>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	3304      	adds	r3, #4
 8006df8:	2100      	movs	r1, #0
 8006dfa:	4618      	mov	r0, r3
 8006dfc:	f001 fcac 	bl	8008758 <RCCEx_PLL2_Config>
 8006e00:	4603      	mov	r3, r0
 8006e02:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8006e04:	e00e      	b.n	8006e24 <HAL_RCCEx_PeriphCLKConfig+0x18c>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	3324      	adds	r3, #36	; 0x24
 8006e0a:	2100      	movs	r1, #0
 8006e0c:	4618      	mov	r0, r3
 8006e0e:	f001 fd55 	bl	80088bc <RCCEx_PLL3_Config>
 8006e12:	4603      	mov	r3, r0
 8006e14:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8006e16:	e005      	b.n	8006e24 <HAL_RCCEx_PeriphCLKConfig+0x18c>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006e18:	2301      	movs	r3, #1
 8006e1a:	75fb      	strb	r3, [r7, #23]
      break;
 8006e1c:	e002      	b.n	8006e24 <HAL_RCCEx_PeriphCLKConfig+0x18c>
      break;
 8006e1e:	bf00      	nop
 8006e20:	e000      	b.n	8006e24 <HAL_RCCEx_PeriphCLKConfig+0x18c>
      break;
 8006e22:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006e24:	7dfb      	ldrb	r3, [r7, #23]
 8006e26:	2b00      	cmp	r3, #0
 8006e28:	d109      	bne.n	8006e3e <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8006e2a:	4b5b      	ldr	r3, [pc, #364]	; (8006f98 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8006e2c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006e2e:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006e36:	4958      	ldr	r1, [pc, #352]	; (8006f98 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8006e38:	4313      	orrs	r3, r2
 8006e3a:	650b      	str	r3, [r1, #80]	; 0x50
 8006e3c:	e001      	b.n	8006e42 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006e3e:	7dfb      	ldrb	r3, [r7, #23]
 8006e40:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	681b      	ldr	r3, [r3, #0]
 8006e46:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006e4a:	2b00      	cmp	r3, #0
 8006e4c:	d044      	beq.n	8006ed8 <HAL_RCCEx_PeriphCLKConfig+0x240>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8006e54:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006e58:	d01f      	beq.n	8006e9a <HAL_RCCEx_PeriphCLKConfig+0x202>
 8006e5a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006e5e:	d805      	bhi.n	8006e6c <HAL_RCCEx_PeriphCLKConfig+0x1d4>
 8006e60:	2b00      	cmp	r3, #0
 8006e62:	d00a      	beq.n	8006e7a <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8006e64:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006e68:	d00e      	beq.n	8006e88 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
 8006e6a:	e01f      	b.n	8006eac <HAL_RCCEx_PeriphCLKConfig+0x214>
 8006e6c:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8006e70:	d01f      	beq.n	8006eb2 <HAL_RCCEx_PeriphCLKConfig+0x21a>
 8006e72:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8006e76:	d01e      	beq.n	8006eb6 <HAL_RCCEx_PeriphCLKConfig+0x21e>
 8006e78:	e018      	b.n	8006eac <HAL_RCCEx_PeriphCLKConfig+0x214>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006e7a:	4b47      	ldr	r3, [pc, #284]	; (8006f98 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8006e7c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e7e:	4a46      	ldr	r2, [pc, #280]	; (8006f98 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8006e80:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006e84:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8006e86:	e017      	b.n	8006eb8 <HAL_RCCEx_PeriphCLKConfig+0x220>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	3304      	adds	r3, #4
 8006e8c:	2100      	movs	r1, #0
 8006e8e:	4618      	mov	r0, r3
 8006e90:	f001 fc62 	bl	8008758 <RCCEx_PLL2_Config>
 8006e94:	4603      	mov	r3, r0
 8006e96:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8006e98:	e00e      	b.n	8006eb8 <HAL_RCCEx_PeriphCLKConfig+0x220>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	3324      	adds	r3, #36	; 0x24
 8006e9e:	2100      	movs	r1, #0
 8006ea0:	4618      	mov	r0, r3
 8006ea2:	f001 fd0b 	bl	80088bc <RCCEx_PLL3_Config>
 8006ea6:	4603      	mov	r3, r0
 8006ea8:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8006eaa:	e005      	b.n	8006eb8 <HAL_RCCEx_PeriphCLKConfig+0x220>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8006eac:	2301      	movs	r3, #1
 8006eae:	75fb      	strb	r3, [r7, #23]
      break;
 8006eb0:	e002      	b.n	8006eb8 <HAL_RCCEx_PeriphCLKConfig+0x220>
      break;
 8006eb2:	bf00      	nop
 8006eb4:	e000      	b.n	8006eb8 <HAL_RCCEx_PeriphCLKConfig+0x220>
      break;
 8006eb6:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006eb8:	7dfb      	ldrb	r3, [r7, #23]
 8006eba:	2b00      	cmp	r3, #0
 8006ebc:	d10a      	bne.n	8006ed4 <HAL_RCCEx_PeriphCLKConfig+0x23c>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8006ebe:	4b36      	ldr	r3, [pc, #216]	; (8006f98 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8006ec0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006ec2:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8006ec6:	687b      	ldr	r3, [r7, #4]
 8006ec8:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8006ecc:	4932      	ldr	r1, [pc, #200]	; (8006f98 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8006ece:	4313      	orrs	r3, r2
 8006ed0:	658b      	str	r3, [r1, #88]	; 0x58
 8006ed2:	e001      	b.n	8006ed8 <HAL_RCCEx_PeriphCLKConfig+0x240>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006ed4:	7dfb      	ldrb	r3, [r7, #23]
 8006ed6:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	681b      	ldr	r3, [r3, #0]
 8006edc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006ee0:	2b00      	cmp	r3, #0
 8006ee2:	d044      	beq.n	8006f6e <HAL_RCCEx_PeriphCLKConfig+0x2d6>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8006eea:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006eee:	d01f      	beq.n	8006f30 <HAL_RCCEx_PeriphCLKConfig+0x298>
 8006ef0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006ef4:	d805      	bhi.n	8006f02 <HAL_RCCEx_PeriphCLKConfig+0x26a>
 8006ef6:	2b00      	cmp	r3, #0
 8006ef8:	d00a      	beq.n	8006f10 <HAL_RCCEx_PeriphCLKConfig+0x278>
 8006efa:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8006efe:	d00e      	beq.n	8006f1e <HAL_RCCEx_PeriphCLKConfig+0x286>
 8006f00:	e01f      	b.n	8006f42 <HAL_RCCEx_PeriphCLKConfig+0x2aa>
 8006f02:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8006f06:	d01f      	beq.n	8006f48 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 8006f08:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8006f0c:	d01e      	beq.n	8006f4c <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 8006f0e:	e018      	b.n	8006f42 <HAL_RCCEx_PeriphCLKConfig+0x2aa>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006f10:	4b21      	ldr	r3, [pc, #132]	; (8006f98 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8006f12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f14:	4a20      	ldr	r2, [pc, #128]	; (8006f98 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8006f16:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006f1a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8006f1c:	e017      	b.n	8006f4e <HAL_RCCEx_PeriphCLKConfig+0x2b6>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	3304      	adds	r3, #4
 8006f22:	2100      	movs	r1, #0
 8006f24:	4618      	mov	r0, r3
 8006f26:	f001 fc17 	bl	8008758 <RCCEx_PLL2_Config>
 8006f2a:	4603      	mov	r3, r0
 8006f2c:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8006f2e:	e00e      	b.n	8006f4e <HAL_RCCEx_PeriphCLKConfig+0x2b6>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	3324      	adds	r3, #36	; 0x24
 8006f34:	2100      	movs	r1, #0
 8006f36:	4618      	mov	r0, r3
 8006f38:	f001 fcc0 	bl	80088bc <RCCEx_PLL3_Config>
 8006f3c:	4603      	mov	r3, r0
 8006f3e:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8006f40:	e005      	b.n	8006f4e <HAL_RCCEx_PeriphCLKConfig+0x2b6>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8006f42:	2301      	movs	r3, #1
 8006f44:	75fb      	strb	r3, [r7, #23]
      break;
 8006f46:	e002      	b.n	8006f4e <HAL_RCCEx_PeriphCLKConfig+0x2b6>
      break;
 8006f48:	bf00      	nop
 8006f4a:	e000      	b.n	8006f4e <HAL_RCCEx_PeriphCLKConfig+0x2b6>
      break;
 8006f4c:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006f4e:	7dfb      	ldrb	r3, [r7, #23]
 8006f50:	2b00      	cmp	r3, #0
 8006f52:	d10a      	bne.n	8006f6a <HAL_RCCEx_PeriphCLKConfig+0x2d2>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8006f54:	4b10      	ldr	r3, [pc, #64]	; (8006f98 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8006f56:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006f58:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8006f62:	490d      	ldr	r1, [pc, #52]	; (8006f98 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8006f64:	4313      	orrs	r3, r2
 8006f66:	658b      	str	r3, [r1, #88]	; 0x58
 8006f68:	e001      	b.n	8006f6e <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006f6a:	7dfb      	ldrb	r3, [r7, #23]
 8006f6c:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8006f6e:	687b      	ldr	r3, [r7, #4]
 8006f70:	681b      	ldr	r3, [r3, #0]
 8006f72:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006f76:	2b00      	cmp	r3, #0
 8006f78:	d035      	beq.n	8006fe6 <HAL_RCCEx_PeriphCLKConfig+0x34e>
  {
    switch(PeriphClkInit->QspiClockSelection)
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006f7e:	2b10      	cmp	r3, #16
 8006f80:	d00c      	beq.n	8006f9c <HAL_RCCEx_PeriphCLKConfig+0x304>
 8006f82:	2b10      	cmp	r3, #16
 8006f84:	d802      	bhi.n	8006f8c <HAL_RCCEx_PeriphCLKConfig+0x2f4>
 8006f86:	2b00      	cmp	r3, #0
 8006f88:	d01b      	beq.n	8006fc2 <HAL_RCCEx_PeriphCLKConfig+0x32a>
 8006f8a:	e017      	b.n	8006fbc <HAL_RCCEx_PeriphCLKConfig+0x324>
 8006f8c:	2b20      	cmp	r3, #32
 8006f8e:	d00c      	beq.n	8006faa <HAL_RCCEx_PeriphCLKConfig+0x312>
 8006f90:	2b30      	cmp	r3, #48	; 0x30
 8006f92:	d018      	beq.n	8006fc6 <HAL_RCCEx_PeriphCLKConfig+0x32e>
 8006f94:	e012      	b.n	8006fbc <HAL_RCCEx_PeriphCLKConfig+0x324>
 8006f96:	bf00      	nop
 8006f98:	58024400 	.word	0x58024400
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006f9c:	4baf      	ldr	r3, [pc, #700]	; (800725c <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8006f9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006fa0:	4aae      	ldr	r2, [pc, #696]	; (800725c <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8006fa2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006fa6:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8006fa8:	e00e      	b.n	8006fc8 <HAL_RCCEx_PeriphCLKConfig+0x330>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	3304      	adds	r3, #4
 8006fae:	2102      	movs	r1, #2
 8006fb0:	4618      	mov	r0, r3
 8006fb2:	f001 fbd1 	bl	8008758 <RCCEx_PLL2_Config>
 8006fb6:	4603      	mov	r3, r0
 8006fb8:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8006fba:	e005      	b.n	8006fc8 <HAL_RCCEx_PeriphCLKConfig+0x330>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8006fbc:	2301      	movs	r3, #1
 8006fbe:	75fb      	strb	r3, [r7, #23]
      break;
 8006fc0:	e002      	b.n	8006fc8 <HAL_RCCEx_PeriphCLKConfig+0x330>
      break;
 8006fc2:	bf00      	nop
 8006fc4:	e000      	b.n	8006fc8 <HAL_RCCEx_PeriphCLKConfig+0x330>
      break;
 8006fc6:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006fc8:	7dfb      	ldrb	r3, [r7, #23]
 8006fca:	2b00      	cmp	r3, #0
 8006fcc:	d109      	bne.n	8006fe2 <HAL_RCCEx_PeriphCLKConfig+0x34a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8006fce:	4ba3      	ldr	r3, [pc, #652]	; (800725c <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8006fd0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006fd2:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006fda:	49a0      	ldr	r1, [pc, #640]	; (800725c <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8006fdc:	4313      	orrs	r3, r2
 8006fde:	64cb      	str	r3, [r1, #76]	; 0x4c
 8006fe0:	e001      	b.n	8006fe6 <HAL_RCCEx_PeriphCLKConfig+0x34e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006fe2:	7dfb      	ldrb	r3, [r7, #23]
 8006fe4:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	681b      	ldr	r3, [r3, #0]
 8006fea:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006fee:	2b00      	cmp	r3, #0
 8006ff0:	d042      	beq.n	8007078 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006ff6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006ffa:	d01f      	beq.n	800703c <HAL_RCCEx_PeriphCLKConfig+0x3a4>
 8006ffc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007000:	d805      	bhi.n	800700e <HAL_RCCEx_PeriphCLKConfig+0x376>
 8007002:	2b00      	cmp	r3, #0
 8007004:	d00a      	beq.n	800701c <HAL_RCCEx_PeriphCLKConfig+0x384>
 8007006:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800700a:	d00e      	beq.n	800702a <HAL_RCCEx_PeriphCLKConfig+0x392>
 800700c:	e01f      	b.n	800704e <HAL_RCCEx_PeriphCLKConfig+0x3b6>
 800700e:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8007012:	d01f      	beq.n	8007054 <HAL_RCCEx_PeriphCLKConfig+0x3bc>
 8007014:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007018:	d01e      	beq.n	8007058 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
 800701a:	e018      	b.n	800704e <HAL_RCCEx_PeriphCLKConfig+0x3b6>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800701c:	4b8f      	ldr	r3, [pc, #572]	; (800725c <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 800701e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007020:	4a8e      	ldr	r2, [pc, #568]	; (800725c <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8007022:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007026:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8007028:	e017      	b.n	800705a <HAL_RCCEx_PeriphCLKConfig+0x3c2>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800702a:	687b      	ldr	r3, [r7, #4]
 800702c:	3304      	adds	r3, #4
 800702e:	2100      	movs	r1, #0
 8007030:	4618      	mov	r0, r3
 8007032:	f001 fb91 	bl	8008758 <RCCEx_PLL2_Config>
 8007036:	4603      	mov	r3, r0
 8007038:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 800703a:	e00e      	b.n	800705a <HAL_RCCEx_PeriphCLKConfig+0x3c2>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	3324      	adds	r3, #36	; 0x24
 8007040:	2100      	movs	r1, #0
 8007042:	4618      	mov	r0, r3
 8007044:	f001 fc3a 	bl	80088bc <RCCEx_PLL3_Config>
 8007048:	4603      	mov	r3, r0
 800704a:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 800704c:	e005      	b.n	800705a <HAL_RCCEx_PeriphCLKConfig+0x3c2>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800704e:	2301      	movs	r3, #1
 8007050:	75fb      	strb	r3, [r7, #23]
      break;
 8007052:	e002      	b.n	800705a <HAL_RCCEx_PeriphCLKConfig+0x3c2>
      break;
 8007054:	bf00      	nop
 8007056:	e000      	b.n	800705a <HAL_RCCEx_PeriphCLKConfig+0x3c2>
      break;
 8007058:	bf00      	nop
    }

    if(ret == HAL_OK)
 800705a:	7dfb      	ldrb	r3, [r7, #23]
 800705c:	2b00      	cmp	r3, #0
 800705e:	d109      	bne.n	8007074 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8007060:	4b7e      	ldr	r3, [pc, #504]	; (800725c <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8007062:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007064:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800706c:	497b      	ldr	r1, [pc, #492]	; (800725c <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 800706e:	4313      	orrs	r3, r2
 8007070:	650b      	str	r3, [r1, #80]	; 0x50
 8007072:	e001      	b.n	8007078 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007074:	7dfb      	ldrb	r3, [r7, #23]
 8007076:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	681b      	ldr	r3, [r3, #0]
 800707c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007080:	2b00      	cmp	r3, #0
 8007082:	d042      	beq.n	800710a <HAL_RCCEx_PeriphCLKConfig+0x472>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007088:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800708c:	d01b      	beq.n	80070c6 <HAL_RCCEx_PeriphCLKConfig+0x42e>
 800708e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007092:	d805      	bhi.n	80070a0 <HAL_RCCEx_PeriphCLKConfig+0x408>
 8007094:	2b00      	cmp	r3, #0
 8007096:	d022      	beq.n	80070de <HAL_RCCEx_PeriphCLKConfig+0x446>
 8007098:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800709c:	d00a      	beq.n	80070b4 <HAL_RCCEx_PeriphCLKConfig+0x41c>
 800709e:	e01b      	b.n	80070d8 <HAL_RCCEx_PeriphCLKConfig+0x440>
 80070a0:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80070a4:	d01d      	beq.n	80070e2 <HAL_RCCEx_PeriphCLKConfig+0x44a>
 80070a6:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80070aa:	d01c      	beq.n	80070e6 <HAL_RCCEx_PeriphCLKConfig+0x44e>
 80070ac:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80070b0:	d01b      	beq.n	80070ea <HAL_RCCEx_PeriphCLKConfig+0x452>
 80070b2:	e011      	b.n	80070d8 <HAL_RCCEx_PeriphCLKConfig+0x440>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	3304      	adds	r3, #4
 80070b8:	2101      	movs	r1, #1
 80070ba:	4618      	mov	r0, r3
 80070bc:	f001 fb4c 	bl	8008758 <RCCEx_PLL2_Config>
 80070c0:	4603      	mov	r3, r0
 80070c2:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 80070c4:	e012      	b.n	80070ec <HAL_RCCEx_PeriphCLKConfig+0x454>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	3324      	adds	r3, #36	; 0x24
 80070ca:	2101      	movs	r1, #1
 80070cc:	4618      	mov	r0, r3
 80070ce:	f001 fbf5 	bl	80088bc <RCCEx_PLL3_Config>
 80070d2:	4603      	mov	r3, r0
 80070d4:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 80070d6:	e009      	b.n	80070ec <HAL_RCCEx_PeriphCLKConfig+0x454>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80070d8:	2301      	movs	r3, #1
 80070da:	75fb      	strb	r3, [r7, #23]
      break;
 80070dc:	e006      	b.n	80070ec <HAL_RCCEx_PeriphCLKConfig+0x454>
      break;
 80070de:	bf00      	nop
 80070e0:	e004      	b.n	80070ec <HAL_RCCEx_PeriphCLKConfig+0x454>
      break;
 80070e2:	bf00      	nop
 80070e4:	e002      	b.n	80070ec <HAL_RCCEx_PeriphCLKConfig+0x454>
      break;
 80070e6:	bf00      	nop
 80070e8:	e000      	b.n	80070ec <HAL_RCCEx_PeriphCLKConfig+0x454>
      break;
 80070ea:	bf00      	nop
    }

    if(ret == HAL_OK)
 80070ec:	7dfb      	ldrb	r3, [r7, #23]
 80070ee:	2b00      	cmp	r3, #0
 80070f0:	d109      	bne.n	8007106 <HAL_RCCEx_PeriphCLKConfig+0x46e>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 80070f2:	4b5a      	ldr	r3, [pc, #360]	; (800725c <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 80070f4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80070f6:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 80070fa:	687b      	ldr	r3, [r7, #4]
 80070fc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80070fe:	4957      	ldr	r1, [pc, #348]	; (800725c <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8007100:	4313      	orrs	r3, r2
 8007102:	650b      	str	r3, [r1, #80]	; 0x50
 8007104:	e001      	b.n	800710a <HAL_RCCEx_PeriphCLKConfig+0x472>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007106:	7dfb      	ldrb	r3, [r7, #23]
 8007108:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	681b      	ldr	r3, [r3, #0]
 800710e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007112:	2b00      	cmp	r3, #0
 8007114:	d044      	beq.n	80071a0 <HAL_RCCEx_PeriphCLKConfig+0x508>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 8007116:	687b      	ldr	r3, [r7, #4]
 8007118:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800711c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007120:	d01b      	beq.n	800715a <HAL_RCCEx_PeriphCLKConfig+0x4c2>
 8007122:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007126:	d805      	bhi.n	8007134 <HAL_RCCEx_PeriphCLKConfig+0x49c>
 8007128:	2b00      	cmp	r3, #0
 800712a:	d022      	beq.n	8007172 <HAL_RCCEx_PeriphCLKConfig+0x4da>
 800712c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007130:	d00a      	beq.n	8007148 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
 8007132:	e01b      	b.n	800716c <HAL_RCCEx_PeriphCLKConfig+0x4d4>
 8007134:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007138:	d01d      	beq.n	8007176 <HAL_RCCEx_PeriphCLKConfig+0x4de>
 800713a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800713e:	d01c      	beq.n	800717a <HAL_RCCEx_PeriphCLKConfig+0x4e2>
 8007140:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8007144:	d01b      	beq.n	800717e <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 8007146:	e011      	b.n	800716c <HAL_RCCEx_PeriphCLKConfig+0x4d4>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8007148:	687b      	ldr	r3, [r7, #4]
 800714a:	3304      	adds	r3, #4
 800714c:	2101      	movs	r1, #1
 800714e:	4618      	mov	r0, r3
 8007150:	f001 fb02 	bl	8008758 <RCCEx_PLL2_Config>
 8007154:	4603      	mov	r3, r0
 8007156:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8007158:	e012      	b.n	8007180 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800715a:	687b      	ldr	r3, [r7, #4]
 800715c:	3324      	adds	r3, #36	; 0x24
 800715e:	2101      	movs	r1, #1
 8007160:	4618      	mov	r0, r3
 8007162:	f001 fbab 	bl	80088bc <RCCEx_PLL3_Config>
 8007166:	4603      	mov	r3, r0
 8007168:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 800716a:	e009      	b.n	8007180 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 800716c:	2301      	movs	r3, #1
 800716e:	75fb      	strb	r3, [r7, #23]
      break;
 8007170:	e006      	b.n	8007180 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      break;
 8007172:	bf00      	nop
 8007174:	e004      	b.n	8007180 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      break;
 8007176:	bf00      	nop
 8007178:	e002      	b.n	8007180 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      break;
 800717a:	bf00      	nop
 800717c:	e000      	b.n	8007180 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      break;
 800717e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007180:	7dfb      	ldrb	r3, [r7, #23]
 8007182:	2b00      	cmp	r3, #0
 8007184:	d10a      	bne.n	800719c <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8007186:	4b35      	ldr	r3, [pc, #212]	; (800725c <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8007188:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800718a:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 800718e:	687b      	ldr	r3, [r7, #4]
 8007190:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8007194:	4931      	ldr	r1, [pc, #196]	; (800725c <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8007196:	4313      	orrs	r3, r2
 8007198:	658b      	str	r3, [r1, #88]	; 0x58
 800719a:	e001      	b.n	80071a0 <HAL_RCCEx_PeriphCLKConfig+0x508>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800719c:	7dfb      	ldrb	r3, [r7, #23]
 800719e:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80071a0:	687b      	ldr	r3, [r7, #4]
 80071a2:	681b      	ldr	r3, [r3, #0]
 80071a4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80071a8:	2b00      	cmp	r3, #0
 80071aa:	d02d      	beq.n	8007208 <HAL_RCCEx_PeriphCLKConfig+0x570>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80071b0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80071b4:	d005      	beq.n	80071c2 <HAL_RCCEx_PeriphCLKConfig+0x52a>
 80071b6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80071ba:	d009      	beq.n	80071d0 <HAL_RCCEx_PeriphCLKConfig+0x538>
 80071bc:	2b00      	cmp	r3, #0
 80071be:	d013      	beq.n	80071e8 <HAL_RCCEx_PeriphCLKConfig+0x550>
 80071c0:	e00f      	b.n	80071e2 <HAL_RCCEx_PeriphCLKConfig+0x54a>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80071c2:	4b26      	ldr	r3, [pc, #152]	; (800725c <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 80071c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80071c6:	4a25      	ldr	r2, [pc, #148]	; (800725c <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 80071c8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80071cc:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 80071ce:	e00c      	b.n	80071ea <HAL_RCCEx_PeriphCLKConfig+0x552>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80071d0:	687b      	ldr	r3, [r7, #4]
 80071d2:	3304      	adds	r3, #4
 80071d4:	2101      	movs	r1, #1
 80071d6:	4618      	mov	r0, r3
 80071d8:	f001 fabe 	bl	8008758 <RCCEx_PLL2_Config>
 80071dc:	4603      	mov	r3, r0
 80071de:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 80071e0:	e003      	b.n	80071ea <HAL_RCCEx_PeriphCLKConfig+0x552>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80071e2:	2301      	movs	r3, #1
 80071e4:	75fb      	strb	r3, [r7, #23]
      break;
 80071e6:	e000      	b.n	80071ea <HAL_RCCEx_PeriphCLKConfig+0x552>
      break;
 80071e8:	bf00      	nop
    }

    if(ret == HAL_OK)
 80071ea:	7dfb      	ldrb	r3, [r7, #23]
 80071ec:	2b00      	cmp	r3, #0
 80071ee:	d109      	bne.n	8007204 <HAL_RCCEx_PeriphCLKConfig+0x56c>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80071f0:	4b1a      	ldr	r3, [pc, #104]	; (800725c <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 80071f2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80071f4:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80071fc:	4917      	ldr	r1, [pc, #92]	; (800725c <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 80071fe:	4313      	orrs	r3, r2
 8007200:	650b      	str	r3, [r1, #80]	; 0x50
 8007202:	e001      	b.n	8007208 <HAL_RCCEx_PeriphCLKConfig+0x570>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007204:	7dfb      	ldrb	r3, [r7, #23]
 8007206:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8007208:	687b      	ldr	r3, [r7, #4]
 800720a:	681b      	ldr	r3, [r3, #0]
 800720c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007210:	2b00      	cmp	r3, #0
 8007212:	d035      	beq.n	8007280 <HAL_RCCEx_PeriphCLKConfig+0x5e8>
  {
    switch(PeriphClkInit->FmcClockSelection)
 8007214:	687b      	ldr	r3, [r7, #4]
 8007216:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007218:	2b03      	cmp	r3, #3
 800721a:	d81b      	bhi.n	8007254 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 800721c:	a201      	add	r2, pc, #4	; (adr r2, 8007224 <HAL_RCCEx_PeriphCLKConfig+0x58c>)
 800721e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007222:	bf00      	nop
 8007224:	08007261 	.word	0x08007261
 8007228:	08007235 	.word	0x08007235
 800722c:	08007243 	.word	0x08007243
 8007230:	08007261 	.word	0x08007261
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007234:	4b09      	ldr	r3, [pc, #36]	; (800725c <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8007236:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007238:	4a08      	ldr	r2, [pc, #32]	; (800725c <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 800723a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800723e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 8007240:	e00f      	b.n	8007262 <HAL_RCCEx_PeriphCLKConfig+0x5ca>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8007242:	687b      	ldr	r3, [r7, #4]
 8007244:	3304      	adds	r3, #4
 8007246:	2102      	movs	r1, #2
 8007248:	4618      	mov	r0, r3
 800724a:	f001 fa85 	bl	8008758 <RCCEx_PLL2_Config>
 800724e:	4603      	mov	r3, r0
 8007250:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 8007252:	e006      	b.n	8007262 <HAL_RCCEx_PeriphCLKConfig+0x5ca>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8007254:	2301      	movs	r3, #1
 8007256:	75fb      	strb	r3, [r7, #23]
      break;
 8007258:	e003      	b.n	8007262 <HAL_RCCEx_PeriphCLKConfig+0x5ca>
 800725a:	bf00      	nop
 800725c:	58024400 	.word	0x58024400
      break;
 8007260:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007262:	7dfb      	ldrb	r3, [r7, #23]
 8007264:	2b00      	cmp	r3, #0
 8007266:	d109      	bne.n	800727c <HAL_RCCEx_PeriphCLKConfig+0x5e4>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8007268:	4bba      	ldr	r3, [pc, #744]	; (8007554 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 800726a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800726c:	f023 0203 	bic.w	r2, r3, #3
 8007270:	687b      	ldr	r3, [r7, #4]
 8007272:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007274:	49b7      	ldr	r1, [pc, #732]	; (8007554 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8007276:	4313      	orrs	r3, r2
 8007278:	64cb      	str	r3, [r1, #76]	; 0x4c
 800727a:	e001      	b.n	8007280 <HAL_RCCEx_PeriphCLKConfig+0x5e8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800727c:	7dfb      	ldrb	r3, [r7, #23]
 800727e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8007280:	687b      	ldr	r3, [r7, #4]
 8007282:	681b      	ldr	r3, [r3, #0]
 8007284:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007288:	2b00      	cmp	r3, #0
 800728a:	f000 8086 	beq.w	800739a <HAL_RCCEx_PeriphCLKConfig+0x702>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800728e:	4bb2      	ldr	r3, [pc, #712]	; (8007558 <HAL_RCCEx_PeriphCLKConfig+0x8c0>)
 8007290:	681b      	ldr	r3, [r3, #0]
 8007292:	4ab1      	ldr	r2, [pc, #708]	; (8007558 <HAL_RCCEx_PeriphCLKConfig+0x8c0>)
 8007294:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007298:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800729a:	f7fa fb91 	bl	80019c0 <HAL_GetTick>
 800729e:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80072a0:	e009      	b.n	80072b6 <HAL_RCCEx_PeriphCLKConfig+0x61e>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80072a2:	f7fa fb8d 	bl	80019c0 <HAL_GetTick>
 80072a6:	4602      	mov	r2, r0
 80072a8:	693b      	ldr	r3, [r7, #16]
 80072aa:	1ad3      	subs	r3, r2, r3
 80072ac:	2b64      	cmp	r3, #100	; 0x64
 80072ae:	d902      	bls.n	80072b6 <HAL_RCCEx_PeriphCLKConfig+0x61e>
      {
        ret = HAL_TIMEOUT;
 80072b0:	2303      	movs	r3, #3
 80072b2:	75fb      	strb	r3, [r7, #23]
        break;
 80072b4:	e005      	b.n	80072c2 <HAL_RCCEx_PeriphCLKConfig+0x62a>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80072b6:	4ba8      	ldr	r3, [pc, #672]	; (8007558 <HAL_RCCEx_PeriphCLKConfig+0x8c0>)
 80072b8:	681b      	ldr	r3, [r3, #0]
 80072ba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80072be:	2b00      	cmp	r3, #0
 80072c0:	d0ef      	beq.n	80072a2 <HAL_RCCEx_PeriphCLKConfig+0x60a>
      }
    }

    if(ret == HAL_OK)
 80072c2:	7dfb      	ldrb	r3, [r7, #23]
 80072c4:	2b00      	cmp	r3, #0
 80072c6:	d166      	bne.n	8007396 <HAL_RCCEx_PeriphCLKConfig+0x6fe>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 80072c8:	4ba2      	ldr	r3, [pc, #648]	; (8007554 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80072ca:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80072cc:	687b      	ldr	r3, [r7, #4]
 80072ce:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80072d2:	4053      	eors	r3, r2
 80072d4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80072d8:	2b00      	cmp	r3, #0
 80072da:	d013      	beq.n	8007304 <HAL_RCCEx_PeriphCLKConfig+0x66c>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80072dc:	4b9d      	ldr	r3, [pc, #628]	; (8007554 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80072de:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80072e0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80072e4:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80072e6:	4b9b      	ldr	r3, [pc, #620]	; (8007554 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80072e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80072ea:	4a9a      	ldr	r2, [pc, #616]	; (8007554 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80072ec:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80072f0:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 80072f2:	4b98      	ldr	r3, [pc, #608]	; (8007554 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80072f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80072f6:	4a97      	ldr	r2, [pc, #604]	; (8007554 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80072f8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80072fc:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 80072fe:	4a95      	ldr	r2, [pc, #596]	; (8007554 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8007300:	68fb      	ldr	r3, [r7, #12]
 8007302:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8007304:	687b      	ldr	r3, [r7, #4]
 8007306:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800730a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800730e:	d115      	bne.n	800733c <HAL_RCCEx_PeriphCLKConfig+0x6a4>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007310:	f7fa fb56 	bl	80019c0 <HAL_GetTick>
 8007314:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8007316:	e00b      	b.n	8007330 <HAL_RCCEx_PeriphCLKConfig+0x698>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007318:	f7fa fb52 	bl	80019c0 <HAL_GetTick>
 800731c:	4602      	mov	r2, r0
 800731e:	693b      	ldr	r3, [r7, #16]
 8007320:	1ad3      	subs	r3, r2, r3
 8007322:	f241 3288 	movw	r2, #5000	; 0x1388
 8007326:	4293      	cmp	r3, r2
 8007328:	d902      	bls.n	8007330 <HAL_RCCEx_PeriphCLKConfig+0x698>
          {
            ret = HAL_TIMEOUT;
 800732a:	2303      	movs	r3, #3
 800732c:	75fb      	strb	r3, [r7, #23]
            break;
 800732e:	e005      	b.n	800733c <HAL_RCCEx_PeriphCLKConfig+0x6a4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8007330:	4b88      	ldr	r3, [pc, #544]	; (8007554 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8007332:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007334:	f003 0302 	and.w	r3, r3, #2
 8007338:	2b00      	cmp	r3, #0
 800733a:	d0ed      	beq.n	8007318 <HAL_RCCEx_PeriphCLKConfig+0x680>
          }
        }
      }

      if(ret == HAL_OK)
 800733c:	7dfb      	ldrb	r3, [r7, #23]
 800733e:	2b00      	cmp	r3, #0
 8007340:	d126      	bne.n	8007390 <HAL_RCCEx_PeriphCLKConfig+0x6f8>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8007342:	687b      	ldr	r3, [r7, #4]
 8007344:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8007348:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800734c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007350:	d10d      	bne.n	800736e <HAL_RCCEx_PeriphCLKConfig+0x6d6>
 8007352:	4b80      	ldr	r3, [pc, #512]	; (8007554 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8007354:	691b      	ldr	r3, [r3, #16]
 8007356:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 800735a:	687b      	ldr	r3, [r7, #4]
 800735c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8007360:	0919      	lsrs	r1, r3, #4
 8007362:	4b7e      	ldr	r3, [pc, #504]	; (800755c <HAL_RCCEx_PeriphCLKConfig+0x8c4>)
 8007364:	400b      	ands	r3, r1
 8007366:	497b      	ldr	r1, [pc, #492]	; (8007554 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8007368:	4313      	orrs	r3, r2
 800736a:	610b      	str	r3, [r1, #16]
 800736c:	e005      	b.n	800737a <HAL_RCCEx_PeriphCLKConfig+0x6e2>
 800736e:	4b79      	ldr	r3, [pc, #484]	; (8007554 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8007370:	691b      	ldr	r3, [r3, #16]
 8007372:	4a78      	ldr	r2, [pc, #480]	; (8007554 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8007374:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8007378:	6113      	str	r3, [r2, #16]
 800737a:	4b76      	ldr	r3, [pc, #472]	; (8007554 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 800737c:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800737e:	687b      	ldr	r3, [r7, #4]
 8007380:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8007384:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007388:	4972      	ldr	r1, [pc, #456]	; (8007554 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 800738a:	4313      	orrs	r3, r2
 800738c:	670b      	str	r3, [r1, #112]	; 0x70
 800738e:	e004      	b.n	800739a <HAL_RCCEx_PeriphCLKConfig+0x702>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8007390:	7dfb      	ldrb	r3, [r7, #23]
 8007392:	75bb      	strb	r3, [r7, #22]
 8007394:	e001      	b.n	800739a <HAL_RCCEx_PeriphCLKConfig+0x702>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007396:	7dfb      	ldrb	r3, [r7, #23]
 8007398:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 800739a:	687b      	ldr	r3, [r7, #4]
 800739c:	681b      	ldr	r3, [r3, #0]
 800739e:	f003 0301 	and.w	r3, r3, #1
 80073a2:	2b00      	cmp	r3, #0
 80073a4:	d07d      	beq.n	80074a2 <HAL_RCCEx_PeriphCLKConfig+0x80a>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 80073a6:	687b      	ldr	r3, [r7, #4]
 80073a8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80073aa:	2b28      	cmp	r3, #40	; 0x28
 80073ac:	d866      	bhi.n	800747c <HAL_RCCEx_PeriphCLKConfig+0x7e4>
 80073ae:	a201      	add	r2, pc, #4	; (adr r2, 80073b4 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 80073b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80073b4:	08007483 	.word	0x08007483
 80073b8:	0800747d 	.word	0x0800747d
 80073bc:	0800747d 	.word	0x0800747d
 80073c0:	0800747d 	.word	0x0800747d
 80073c4:	0800747d 	.word	0x0800747d
 80073c8:	0800747d 	.word	0x0800747d
 80073cc:	0800747d 	.word	0x0800747d
 80073d0:	0800747d 	.word	0x0800747d
 80073d4:	08007459 	.word	0x08007459
 80073d8:	0800747d 	.word	0x0800747d
 80073dc:	0800747d 	.word	0x0800747d
 80073e0:	0800747d 	.word	0x0800747d
 80073e4:	0800747d 	.word	0x0800747d
 80073e8:	0800747d 	.word	0x0800747d
 80073ec:	0800747d 	.word	0x0800747d
 80073f0:	0800747d 	.word	0x0800747d
 80073f4:	0800746b 	.word	0x0800746b
 80073f8:	0800747d 	.word	0x0800747d
 80073fc:	0800747d 	.word	0x0800747d
 8007400:	0800747d 	.word	0x0800747d
 8007404:	0800747d 	.word	0x0800747d
 8007408:	0800747d 	.word	0x0800747d
 800740c:	0800747d 	.word	0x0800747d
 8007410:	0800747d 	.word	0x0800747d
 8007414:	08007483 	.word	0x08007483
 8007418:	0800747d 	.word	0x0800747d
 800741c:	0800747d 	.word	0x0800747d
 8007420:	0800747d 	.word	0x0800747d
 8007424:	0800747d 	.word	0x0800747d
 8007428:	0800747d 	.word	0x0800747d
 800742c:	0800747d 	.word	0x0800747d
 8007430:	0800747d 	.word	0x0800747d
 8007434:	08007483 	.word	0x08007483
 8007438:	0800747d 	.word	0x0800747d
 800743c:	0800747d 	.word	0x0800747d
 8007440:	0800747d 	.word	0x0800747d
 8007444:	0800747d 	.word	0x0800747d
 8007448:	0800747d 	.word	0x0800747d
 800744c:	0800747d 	.word	0x0800747d
 8007450:	0800747d 	.word	0x0800747d
 8007454:	08007483 	.word	0x08007483
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8007458:	687b      	ldr	r3, [r7, #4]
 800745a:	3304      	adds	r3, #4
 800745c:	2101      	movs	r1, #1
 800745e:	4618      	mov	r0, r3
 8007460:	f001 f97a 	bl	8008758 <RCCEx_PLL2_Config>
 8007464:	4603      	mov	r3, r0
 8007466:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8007468:	e00c      	b.n	8007484 <HAL_RCCEx_PeriphCLKConfig+0x7ec>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800746a:	687b      	ldr	r3, [r7, #4]
 800746c:	3324      	adds	r3, #36	; 0x24
 800746e:	2101      	movs	r1, #1
 8007470:	4618      	mov	r0, r3
 8007472:	f001 fa23 	bl	80088bc <RCCEx_PLL3_Config>
 8007476:	4603      	mov	r3, r0
 8007478:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 800747a:	e003      	b.n	8007484 <HAL_RCCEx_PeriphCLKConfig+0x7ec>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800747c:	2301      	movs	r3, #1
 800747e:	75fb      	strb	r3, [r7, #23]
      break;
 8007480:	e000      	b.n	8007484 <HAL_RCCEx_PeriphCLKConfig+0x7ec>
      break;
 8007482:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007484:	7dfb      	ldrb	r3, [r7, #23]
 8007486:	2b00      	cmp	r3, #0
 8007488:	d109      	bne.n	800749e <HAL_RCCEx_PeriphCLKConfig+0x806>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 800748a:	4b32      	ldr	r3, [pc, #200]	; (8007554 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 800748c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800748e:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 8007492:	687b      	ldr	r3, [r7, #4]
 8007494:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007496:	492f      	ldr	r1, [pc, #188]	; (8007554 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8007498:	4313      	orrs	r3, r2
 800749a:	654b      	str	r3, [r1, #84]	; 0x54
 800749c:	e001      	b.n	80074a2 <HAL_RCCEx_PeriphCLKConfig+0x80a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800749e:	7dfb      	ldrb	r3, [r7, #23]
 80074a0:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 80074a2:	687b      	ldr	r3, [r7, #4]
 80074a4:	681b      	ldr	r3, [r3, #0]
 80074a6:	f003 0302 	and.w	r3, r3, #2
 80074aa:	2b00      	cmp	r3, #0
 80074ac:	d037      	beq.n	800751e <HAL_RCCEx_PeriphCLKConfig+0x886>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 80074ae:	687b      	ldr	r3, [r7, #4]
 80074b0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80074b2:	2b05      	cmp	r3, #5
 80074b4:	d820      	bhi.n	80074f8 <HAL_RCCEx_PeriphCLKConfig+0x860>
 80074b6:	a201      	add	r2, pc, #4	; (adr r2, 80074bc <HAL_RCCEx_PeriphCLKConfig+0x824>)
 80074b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80074bc:	080074ff 	.word	0x080074ff
 80074c0:	080074d5 	.word	0x080074d5
 80074c4:	080074e7 	.word	0x080074e7
 80074c8:	080074ff 	.word	0x080074ff
 80074cc:	080074ff 	.word	0x080074ff
 80074d0:	080074ff 	.word	0x080074ff
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	3304      	adds	r3, #4
 80074d8:	2101      	movs	r1, #1
 80074da:	4618      	mov	r0, r3
 80074dc:	f001 f93c 	bl	8008758 <RCCEx_PLL2_Config>
 80074e0:	4603      	mov	r3, r0
 80074e2:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 80074e4:	e00c      	b.n	8007500 <HAL_RCCEx_PeriphCLKConfig+0x868>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80074e6:	687b      	ldr	r3, [r7, #4]
 80074e8:	3324      	adds	r3, #36	; 0x24
 80074ea:	2101      	movs	r1, #1
 80074ec:	4618      	mov	r0, r3
 80074ee:	f001 f9e5 	bl	80088bc <RCCEx_PLL3_Config>
 80074f2:	4603      	mov	r3, r0
 80074f4:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 80074f6:	e003      	b.n	8007500 <HAL_RCCEx_PeriphCLKConfig+0x868>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80074f8:	2301      	movs	r3, #1
 80074fa:	75fb      	strb	r3, [r7, #23]
      break;
 80074fc:	e000      	b.n	8007500 <HAL_RCCEx_PeriphCLKConfig+0x868>
      break;
 80074fe:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007500:	7dfb      	ldrb	r3, [r7, #23]
 8007502:	2b00      	cmp	r3, #0
 8007504:	d109      	bne.n	800751a <HAL_RCCEx_PeriphCLKConfig+0x882>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8007506:	4b13      	ldr	r3, [pc, #76]	; (8007554 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8007508:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800750a:	f023 0207 	bic.w	r2, r3, #7
 800750e:	687b      	ldr	r3, [r7, #4]
 8007510:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007512:	4910      	ldr	r1, [pc, #64]	; (8007554 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8007514:	4313      	orrs	r3, r2
 8007516:	654b      	str	r3, [r1, #84]	; 0x54
 8007518:	e001      	b.n	800751e <HAL_RCCEx_PeriphCLKConfig+0x886>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800751a:	7dfb      	ldrb	r3, [r7, #23]
 800751c:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800751e:	687b      	ldr	r3, [r7, #4]
 8007520:	681b      	ldr	r3, [r3, #0]
 8007522:	f003 0304 	and.w	r3, r3, #4
 8007526:	2b00      	cmp	r3, #0
 8007528:	d040      	beq.n	80075ac <HAL_RCCEx_PeriphCLKConfig+0x914>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 800752a:	687b      	ldr	r3, [r7, #4]
 800752c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007530:	2b05      	cmp	r3, #5
 8007532:	d827      	bhi.n	8007584 <HAL_RCCEx_PeriphCLKConfig+0x8ec>
 8007534:	a201      	add	r2, pc, #4	; (adr r2, 800753c <HAL_RCCEx_PeriphCLKConfig+0x8a4>)
 8007536:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800753a:	bf00      	nop
 800753c:	0800758b 	.word	0x0800758b
 8007540:	08007561 	.word	0x08007561
 8007544:	08007573 	.word	0x08007573
 8007548:	0800758b 	.word	0x0800758b
 800754c:	0800758b 	.word	0x0800758b
 8007550:	0800758b 	.word	0x0800758b
 8007554:	58024400 	.word	0x58024400
 8007558:	58024800 	.word	0x58024800
 800755c:	00ffffcf 	.word	0x00ffffcf
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8007560:	687b      	ldr	r3, [r7, #4]
 8007562:	3304      	adds	r3, #4
 8007564:	2101      	movs	r1, #1
 8007566:	4618      	mov	r0, r3
 8007568:	f001 f8f6 	bl	8008758 <RCCEx_PLL2_Config>
 800756c:	4603      	mov	r3, r0
 800756e:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8007570:	e00c      	b.n	800758c <HAL_RCCEx_PeriphCLKConfig+0x8f4>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8007572:	687b      	ldr	r3, [r7, #4]
 8007574:	3324      	adds	r3, #36	; 0x24
 8007576:	2101      	movs	r1, #1
 8007578:	4618      	mov	r0, r3
 800757a:	f001 f99f 	bl	80088bc <RCCEx_PLL3_Config>
 800757e:	4603      	mov	r3, r0
 8007580:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8007582:	e003      	b.n	800758c <HAL_RCCEx_PeriphCLKConfig+0x8f4>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007584:	2301      	movs	r3, #1
 8007586:	75fb      	strb	r3, [r7, #23]
      break;
 8007588:	e000      	b.n	800758c <HAL_RCCEx_PeriphCLKConfig+0x8f4>
      break;
 800758a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800758c:	7dfb      	ldrb	r3, [r7, #23]
 800758e:	2b00      	cmp	r3, #0
 8007590:	d10a      	bne.n	80075a8 <HAL_RCCEx_PeriphCLKConfig+0x910>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8007592:	4bb2      	ldr	r3, [pc, #712]	; (800785c <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8007594:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007596:	f023 0207 	bic.w	r2, r3, #7
 800759a:	687b      	ldr	r3, [r7, #4]
 800759c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80075a0:	49ae      	ldr	r1, [pc, #696]	; (800785c <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 80075a2:	4313      	orrs	r3, r2
 80075a4:	658b      	str	r3, [r1, #88]	; 0x58
 80075a6:	e001      	b.n	80075ac <HAL_RCCEx_PeriphCLKConfig+0x914>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80075a8:	7dfb      	ldrb	r3, [r7, #23]
 80075aa:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80075ac:	687b      	ldr	r3, [r7, #4]
 80075ae:	681b      	ldr	r3, [r3, #0]
 80075b0:	f003 0320 	and.w	r3, r3, #32
 80075b4:	2b00      	cmp	r3, #0
 80075b6:	d044      	beq.n	8007642 <HAL_RCCEx_PeriphCLKConfig+0x9aa>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 80075b8:	687b      	ldr	r3, [r7, #4]
 80075ba:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80075be:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80075c2:	d01b      	beq.n	80075fc <HAL_RCCEx_PeriphCLKConfig+0x964>
 80075c4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80075c8:	d805      	bhi.n	80075d6 <HAL_RCCEx_PeriphCLKConfig+0x93e>
 80075ca:	2b00      	cmp	r3, #0
 80075cc:	d022      	beq.n	8007614 <HAL_RCCEx_PeriphCLKConfig+0x97c>
 80075ce:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80075d2:	d00a      	beq.n	80075ea <HAL_RCCEx_PeriphCLKConfig+0x952>
 80075d4:	e01b      	b.n	800760e <HAL_RCCEx_PeriphCLKConfig+0x976>
 80075d6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80075da:	d01d      	beq.n	8007618 <HAL_RCCEx_PeriphCLKConfig+0x980>
 80075dc:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80075e0:	d01c      	beq.n	800761c <HAL_RCCEx_PeriphCLKConfig+0x984>
 80075e2:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80075e6:	d01b      	beq.n	8007620 <HAL_RCCEx_PeriphCLKConfig+0x988>
 80075e8:	e011      	b.n	800760e <HAL_RCCEx_PeriphCLKConfig+0x976>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80075ea:	687b      	ldr	r3, [r7, #4]
 80075ec:	3304      	adds	r3, #4
 80075ee:	2100      	movs	r1, #0
 80075f0:	4618      	mov	r0, r3
 80075f2:	f001 f8b1 	bl	8008758 <RCCEx_PLL2_Config>
 80075f6:	4603      	mov	r3, r0
 80075f8:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 80075fa:	e012      	b.n	8007622 <HAL_RCCEx_PeriphCLKConfig+0x98a>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	3324      	adds	r3, #36	; 0x24
 8007600:	2102      	movs	r1, #2
 8007602:	4618      	mov	r0, r3
 8007604:	f001 f95a 	bl	80088bc <RCCEx_PLL3_Config>
 8007608:	4603      	mov	r3, r0
 800760a:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 800760c:	e009      	b.n	8007622 <HAL_RCCEx_PeriphCLKConfig+0x98a>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800760e:	2301      	movs	r3, #1
 8007610:	75fb      	strb	r3, [r7, #23]
      break;
 8007612:	e006      	b.n	8007622 <HAL_RCCEx_PeriphCLKConfig+0x98a>
      break;
 8007614:	bf00      	nop
 8007616:	e004      	b.n	8007622 <HAL_RCCEx_PeriphCLKConfig+0x98a>
      break;
 8007618:	bf00      	nop
 800761a:	e002      	b.n	8007622 <HAL_RCCEx_PeriphCLKConfig+0x98a>
      break;
 800761c:	bf00      	nop
 800761e:	e000      	b.n	8007622 <HAL_RCCEx_PeriphCLKConfig+0x98a>
      break;
 8007620:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007622:	7dfb      	ldrb	r3, [r7, #23]
 8007624:	2b00      	cmp	r3, #0
 8007626:	d10a      	bne.n	800763e <HAL_RCCEx_PeriphCLKConfig+0x9a6>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8007628:	4b8c      	ldr	r3, [pc, #560]	; (800785c <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 800762a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800762c:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8007630:	687b      	ldr	r3, [r7, #4]
 8007632:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007636:	4989      	ldr	r1, [pc, #548]	; (800785c <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8007638:	4313      	orrs	r3, r2
 800763a:	654b      	str	r3, [r1, #84]	; 0x54
 800763c:	e001      	b.n	8007642 <HAL_RCCEx_PeriphCLKConfig+0x9aa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800763e:	7dfb      	ldrb	r3, [r7, #23]
 8007640:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8007642:	687b      	ldr	r3, [r7, #4]
 8007644:	681b      	ldr	r3, [r3, #0]
 8007646:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800764a:	2b00      	cmp	r3, #0
 800764c:	d044      	beq.n	80076d8 <HAL_RCCEx_PeriphCLKConfig+0xa40>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 800764e:	687b      	ldr	r3, [r7, #4]
 8007650:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8007654:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007658:	d01b      	beq.n	8007692 <HAL_RCCEx_PeriphCLKConfig+0x9fa>
 800765a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800765e:	d805      	bhi.n	800766c <HAL_RCCEx_PeriphCLKConfig+0x9d4>
 8007660:	2b00      	cmp	r3, #0
 8007662:	d022      	beq.n	80076aa <HAL_RCCEx_PeriphCLKConfig+0xa12>
 8007664:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007668:	d00a      	beq.n	8007680 <HAL_RCCEx_PeriphCLKConfig+0x9e8>
 800766a:	e01b      	b.n	80076a4 <HAL_RCCEx_PeriphCLKConfig+0xa0c>
 800766c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007670:	d01d      	beq.n	80076ae <HAL_RCCEx_PeriphCLKConfig+0xa16>
 8007672:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8007676:	d01c      	beq.n	80076b2 <HAL_RCCEx_PeriphCLKConfig+0xa1a>
 8007678:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800767c:	d01b      	beq.n	80076b6 <HAL_RCCEx_PeriphCLKConfig+0xa1e>
 800767e:	e011      	b.n	80076a4 <HAL_RCCEx_PeriphCLKConfig+0xa0c>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8007680:	687b      	ldr	r3, [r7, #4]
 8007682:	3304      	adds	r3, #4
 8007684:	2100      	movs	r1, #0
 8007686:	4618      	mov	r0, r3
 8007688:	f001 f866 	bl	8008758 <RCCEx_PLL2_Config>
 800768c:	4603      	mov	r3, r0
 800768e:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8007690:	e012      	b.n	80076b8 <HAL_RCCEx_PeriphCLKConfig+0xa20>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8007692:	687b      	ldr	r3, [r7, #4]
 8007694:	3324      	adds	r3, #36	; 0x24
 8007696:	2102      	movs	r1, #2
 8007698:	4618      	mov	r0, r3
 800769a:	f001 f90f 	bl	80088bc <RCCEx_PLL3_Config>
 800769e:	4603      	mov	r3, r0
 80076a0:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 80076a2:	e009      	b.n	80076b8 <HAL_RCCEx_PeriphCLKConfig+0xa20>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80076a4:	2301      	movs	r3, #1
 80076a6:	75fb      	strb	r3, [r7, #23]
      break;
 80076a8:	e006      	b.n	80076b8 <HAL_RCCEx_PeriphCLKConfig+0xa20>
      break;
 80076aa:	bf00      	nop
 80076ac:	e004      	b.n	80076b8 <HAL_RCCEx_PeriphCLKConfig+0xa20>
      break;
 80076ae:	bf00      	nop
 80076b0:	e002      	b.n	80076b8 <HAL_RCCEx_PeriphCLKConfig+0xa20>
      break;
 80076b2:	bf00      	nop
 80076b4:	e000      	b.n	80076b8 <HAL_RCCEx_PeriphCLKConfig+0xa20>
      break;
 80076b6:	bf00      	nop
    }

    if(ret == HAL_OK)
 80076b8:	7dfb      	ldrb	r3, [r7, #23]
 80076ba:	2b00      	cmp	r3, #0
 80076bc:	d10a      	bne.n	80076d4 <HAL_RCCEx_PeriphCLKConfig+0xa3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80076be:	4b67      	ldr	r3, [pc, #412]	; (800785c <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 80076c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80076c2:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80076c6:	687b      	ldr	r3, [r7, #4]
 80076c8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80076cc:	4963      	ldr	r1, [pc, #396]	; (800785c <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 80076ce:	4313      	orrs	r3, r2
 80076d0:	658b      	str	r3, [r1, #88]	; 0x58
 80076d2:	e001      	b.n	80076d8 <HAL_RCCEx_PeriphCLKConfig+0xa40>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80076d4:	7dfb      	ldrb	r3, [r7, #23]
 80076d6:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 80076d8:	687b      	ldr	r3, [r7, #4]
 80076da:	681b      	ldr	r3, [r3, #0]
 80076dc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80076e0:	2b00      	cmp	r3, #0
 80076e2:	d044      	beq.n	800776e <HAL_RCCEx_PeriphCLKConfig+0xad6>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 80076e4:	687b      	ldr	r3, [r7, #4]
 80076e6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80076ea:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80076ee:	d01b      	beq.n	8007728 <HAL_RCCEx_PeriphCLKConfig+0xa90>
 80076f0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80076f4:	d805      	bhi.n	8007702 <HAL_RCCEx_PeriphCLKConfig+0xa6a>
 80076f6:	2b00      	cmp	r3, #0
 80076f8:	d022      	beq.n	8007740 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
 80076fa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80076fe:	d00a      	beq.n	8007716 <HAL_RCCEx_PeriphCLKConfig+0xa7e>
 8007700:	e01b      	b.n	800773a <HAL_RCCEx_PeriphCLKConfig+0xaa2>
 8007702:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007706:	d01d      	beq.n	8007744 <HAL_RCCEx_PeriphCLKConfig+0xaac>
 8007708:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800770c:	d01c      	beq.n	8007748 <HAL_RCCEx_PeriphCLKConfig+0xab0>
 800770e:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8007712:	d01b      	beq.n	800774c <HAL_RCCEx_PeriphCLKConfig+0xab4>
 8007714:	e011      	b.n	800773a <HAL_RCCEx_PeriphCLKConfig+0xaa2>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8007716:	687b      	ldr	r3, [r7, #4]
 8007718:	3304      	adds	r3, #4
 800771a:	2100      	movs	r1, #0
 800771c:	4618      	mov	r0, r3
 800771e:	f001 f81b 	bl	8008758 <RCCEx_PLL2_Config>
 8007722:	4603      	mov	r3, r0
 8007724:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8007726:	e012      	b.n	800774e <HAL_RCCEx_PeriphCLKConfig+0xab6>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8007728:	687b      	ldr	r3, [r7, #4]
 800772a:	3324      	adds	r3, #36	; 0x24
 800772c:	2102      	movs	r1, #2
 800772e:	4618      	mov	r0, r3
 8007730:	f001 f8c4 	bl	80088bc <RCCEx_PLL3_Config>
 8007734:	4603      	mov	r3, r0
 8007736:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8007738:	e009      	b.n	800774e <HAL_RCCEx_PeriphCLKConfig+0xab6>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800773a:	2301      	movs	r3, #1
 800773c:	75fb      	strb	r3, [r7, #23]
      break;
 800773e:	e006      	b.n	800774e <HAL_RCCEx_PeriphCLKConfig+0xab6>
      break;
 8007740:	bf00      	nop
 8007742:	e004      	b.n	800774e <HAL_RCCEx_PeriphCLKConfig+0xab6>
      break;
 8007744:	bf00      	nop
 8007746:	e002      	b.n	800774e <HAL_RCCEx_PeriphCLKConfig+0xab6>
      break;
 8007748:	bf00      	nop
 800774a:	e000      	b.n	800774e <HAL_RCCEx_PeriphCLKConfig+0xab6>
      break;
 800774c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800774e:	7dfb      	ldrb	r3, [r7, #23]
 8007750:	2b00      	cmp	r3, #0
 8007752:	d10a      	bne.n	800776a <HAL_RCCEx_PeriphCLKConfig+0xad2>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8007754:	4b41      	ldr	r3, [pc, #260]	; (800785c <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8007756:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007758:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800775c:	687b      	ldr	r3, [r7, #4]
 800775e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8007762:	493e      	ldr	r1, [pc, #248]	; (800785c <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8007764:	4313      	orrs	r3, r2
 8007766:	658b      	str	r3, [r1, #88]	; 0x58
 8007768:	e001      	b.n	800776e <HAL_RCCEx_PeriphCLKConfig+0xad6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800776a:	7dfb      	ldrb	r3, [r7, #23]
 800776c:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 800776e:	687b      	ldr	r3, [r7, #4]
 8007770:	681b      	ldr	r3, [r3, #0]
 8007772:	f003 0308 	and.w	r3, r3, #8
 8007776:	2b00      	cmp	r3, #0
 8007778:	d01a      	beq.n	80077b0 <HAL_RCCEx_PeriphCLKConfig+0xb18>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 800777a:	687b      	ldr	r3, [r7, #4]
 800777c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007780:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007784:	d10a      	bne.n	800779c <HAL_RCCEx_PeriphCLKConfig+0xb04>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8007786:	687b      	ldr	r3, [r7, #4]
 8007788:	3324      	adds	r3, #36	; 0x24
 800778a:	2102      	movs	r1, #2
 800778c:	4618      	mov	r0, r3
 800778e:	f001 f895 	bl	80088bc <RCCEx_PLL3_Config>
 8007792:	4603      	mov	r3, r0
 8007794:	2b00      	cmp	r3, #0
 8007796:	d001      	beq.n	800779c <HAL_RCCEx_PeriphCLKConfig+0xb04>
        {
          status = HAL_ERROR;
 8007798:	2301      	movs	r3, #1
 800779a:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 800779c:	4b2f      	ldr	r3, [pc, #188]	; (800785c <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 800779e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80077a0:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80077a4:	687b      	ldr	r3, [r7, #4]
 80077a6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80077aa:	492c      	ldr	r1, [pc, #176]	; (800785c <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 80077ac:	4313      	orrs	r3, r2
 80077ae:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80077b0:	687b      	ldr	r3, [r7, #4]
 80077b2:	681b      	ldr	r3, [r3, #0]
 80077b4:	f003 0310 	and.w	r3, r3, #16
 80077b8:	2b00      	cmp	r3, #0
 80077ba:	d01a      	beq.n	80077f2 <HAL_RCCEx_PeriphCLKConfig+0xb5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 80077bc:	687b      	ldr	r3, [r7, #4]
 80077be:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80077c2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80077c6:	d10a      	bne.n	80077de <HAL_RCCEx_PeriphCLKConfig+0xb46>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 80077c8:	687b      	ldr	r3, [r7, #4]
 80077ca:	3324      	adds	r3, #36	; 0x24
 80077cc:	2102      	movs	r1, #2
 80077ce:	4618      	mov	r0, r3
 80077d0:	f001 f874 	bl	80088bc <RCCEx_PLL3_Config>
 80077d4:	4603      	mov	r3, r0
 80077d6:	2b00      	cmp	r3, #0
 80077d8:	d001      	beq.n	80077de <HAL_RCCEx_PeriphCLKConfig+0xb46>
      {
        status = HAL_ERROR;
 80077da:	2301      	movs	r3, #1
 80077dc:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80077de:	4b1f      	ldr	r3, [pc, #124]	; (800785c <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 80077e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80077e2:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80077e6:	687b      	ldr	r3, [r7, #4]
 80077e8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80077ec:	491b      	ldr	r1, [pc, #108]	; (800785c <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 80077ee:	4313      	orrs	r3, r2
 80077f0:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80077f2:	687b      	ldr	r3, [r7, #4]
 80077f4:	681b      	ldr	r3, [r3, #0]
 80077f6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80077fa:	2b00      	cmp	r3, #0
 80077fc:	d032      	beq.n	8007864 <HAL_RCCEx_PeriphCLKConfig+0xbcc>
  {
    switch(PeriphClkInit->AdcClockSelection)
 80077fe:	687b      	ldr	r3, [r7, #4]
 8007800:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8007804:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007808:	d00d      	beq.n	8007826 <HAL_RCCEx_PeriphCLKConfig+0xb8e>
 800780a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800780e:	d016      	beq.n	800783e <HAL_RCCEx_PeriphCLKConfig+0xba6>
 8007810:	2b00      	cmp	r3, #0
 8007812:	d111      	bne.n	8007838 <HAL_RCCEx_PeriphCLKConfig+0xba0>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8007814:	687b      	ldr	r3, [r7, #4]
 8007816:	3304      	adds	r3, #4
 8007818:	2100      	movs	r1, #0
 800781a:	4618      	mov	r0, r3
 800781c:	f000 ff9c 	bl	8008758 <RCCEx_PLL2_Config>
 8007820:	4603      	mov	r3, r0
 8007822:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8007824:	e00c      	b.n	8007840 <HAL_RCCEx_PeriphCLKConfig+0xba8>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8007826:	687b      	ldr	r3, [r7, #4]
 8007828:	3324      	adds	r3, #36	; 0x24
 800782a:	2102      	movs	r1, #2
 800782c:	4618      	mov	r0, r3
 800782e:	f001 f845 	bl	80088bc <RCCEx_PLL3_Config>
 8007832:	4603      	mov	r3, r0
 8007834:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8007836:	e003      	b.n	8007840 <HAL_RCCEx_PeriphCLKConfig+0xba8>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007838:	2301      	movs	r3, #1
 800783a:	75fb      	strb	r3, [r7, #23]
      break;
 800783c:	e000      	b.n	8007840 <HAL_RCCEx_PeriphCLKConfig+0xba8>
      break;
 800783e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007840:	7dfb      	ldrb	r3, [r7, #23]
 8007842:	2b00      	cmp	r3, #0
 8007844:	d10c      	bne.n	8007860 <HAL_RCCEx_PeriphCLKConfig+0xbc8>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8007846:	4b05      	ldr	r3, [pc, #20]	; (800785c <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8007848:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800784a:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800784e:	687b      	ldr	r3, [r7, #4]
 8007850:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8007854:	4901      	ldr	r1, [pc, #4]	; (800785c <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8007856:	4313      	orrs	r3, r2
 8007858:	658b      	str	r3, [r1, #88]	; 0x58
 800785a:	e003      	b.n	8007864 <HAL_RCCEx_PeriphCLKConfig+0xbcc>
 800785c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007860:	7dfb      	ldrb	r3, [r7, #23]
 8007862:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8007864:	687b      	ldr	r3, [r7, #4]
 8007866:	681b      	ldr	r3, [r3, #0]
 8007868:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800786c:	2b00      	cmp	r3, #0
 800786e:	d02f      	beq.n	80078d0 <HAL_RCCEx_PeriphCLKConfig+0xc38>
  {

    switch(PeriphClkInit->UsbClockSelection)
 8007870:	687b      	ldr	r3, [r7, #4]
 8007872:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007876:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800787a:	d00c      	beq.n	8007896 <HAL_RCCEx_PeriphCLKConfig+0xbfe>
 800787c:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8007880:	d015      	beq.n	80078ae <HAL_RCCEx_PeriphCLKConfig+0xc16>
 8007882:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007886:	d10f      	bne.n	80078a8 <HAL_RCCEx_PeriphCLKConfig+0xc10>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007888:	4b79      	ldr	r3, [pc, #484]	; (8007a70 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 800788a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800788c:	4a78      	ldr	r2, [pc, #480]	; (8007a70 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 800788e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007892:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 8007894:	e00c      	b.n	80078b0 <HAL_RCCEx_PeriphCLKConfig+0xc18>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8007896:	687b      	ldr	r3, [r7, #4]
 8007898:	3324      	adds	r3, #36	; 0x24
 800789a:	2101      	movs	r1, #1
 800789c:	4618      	mov	r0, r3
 800789e:	f001 f80d 	bl	80088bc <RCCEx_PLL3_Config>
 80078a2:	4603      	mov	r3, r0
 80078a4:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 80078a6:	e003      	b.n	80078b0 <HAL_RCCEx_PeriphCLKConfig+0xc18>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80078a8:	2301      	movs	r3, #1
 80078aa:	75fb      	strb	r3, [r7, #23]
      break;
 80078ac:	e000      	b.n	80078b0 <HAL_RCCEx_PeriphCLKConfig+0xc18>
      break;
 80078ae:	bf00      	nop
    }

    if(ret == HAL_OK)
 80078b0:	7dfb      	ldrb	r3, [r7, #23]
 80078b2:	2b00      	cmp	r3, #0
 80078b4:	d10a      	bne.n	80078cc <HAL_RCCEx_PeriphCLKConfig+0xc34>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80078b6:	4b6e      	ldr	r3, [pc, #440]	; (8007a70 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 80078b8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80078ba:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80078be:	687b      	ldr	r3, [r7, #4]
 80078c0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80078c4:	496a      	ldr	r1, [pc, #424]	; (8007a70 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 80078c6:	4313      	orrs	r3, r2
 80078c8:	654b      	str	r3, [r1, #84]	; 0x54
 80078ca:	e001      	b.n	80078d0 <HAL_RCCEx_PeriphCLKConfig+0xc38>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80078cc:	7dfb      	ldrb	r3, [r7, #23]
 80078ce:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 80078d0:	687b      	ldr	r3, [r7, #4]
 80078d2:	681b      	ldr	r3, [r3, #0]
 80078d4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80078d8:	2b00      	cmp	r3, #0
 80078da:	d029      	beq.n	8007930 <HAL_RCCEx_PeriphCLKConfig+0xc98>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 80078dc:	687b      	ldr	r3, [r7, #4]
 80078de:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80078e0:	2b00      	cmp	r3, #0
 80078e2:	d003      	beq.n	80078ec <HAL_RCCEx_PeriphCLKConfig+0xc54>
 80078e4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80078e8:	d007      	beq.n	80078fa <HAL_RCCEx_PeriphCLKConfig+0xc62>
 80078ea:	e00f      	b.n	800790c <HAL_RCCEx_PeriphCLKConfig+0xc74>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80078ec:	4b60      	ldr	r3, [pc, #384]	; (8007a70 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 80078ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80078f0:	4a5f      	ldr	r2, [pc, #380]	; (8007a70 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 80078f2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80078f6:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 80078f8:	e00b      	b.n	8007912 <HAL_RCCEx_PeriphCLKConfig+0xc7a>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80078fa:	687b      	ldr	r3, [r7, #4]
 80078fc:	3304      	adds	r3, #4
 80078fe:	2102      	movs	r1, #2
 8007900:	4618      	mov	r0, r3
 8007902:	f000 ff29 	bl	8008758 <RCCEx_PLL2_Config>
 8007906:	4603      	mov	r3, r0
 8007908:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 800790a:	e002      	b.n	8007912 <HAL_RCCEx_PeriphCLKConfig+0xc7a>

    default:
      ret = HAL_ERROR;
 800790c:	2301      	movs	r3, #1
 800790e:	75fb      	strb	r3, [r7, #23]
      break;
 8007910:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007912:	7dfb      	ldrb	r3, [r7, #23]
 8007914:	2b00      	cmp	r3, #0
 8007916:	d109      	bne.n	800792c <HAL_RCCEx_PeriphCLKConfig+0xc94>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8007918:	4b55      	ldr	r3, [pc, #340]	; (8007a70 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 800791a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800791c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8007920:	687b      	ldr	r3, [r7, #4]
 8007922:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007924:	4952      	ldr	r1, [pc, #328]	; (8007a70 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8007926:	4313      	orrs	r3, r2
 8007928:	64cb      	str	r3, [r1, #76]	; 0x4c
 800792a:	e001      	b.n	8007930 <HAL_RCCEx_PeriphCLKConfig+0xc98>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800792c:	7dfb      	ldrb	r3, [r7, #23]
 800792e:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8007930:	687b      	ldr	r3, [r7, #4]
 8007932:	681b      	ldr	r3, [r3, #0]
 8007934:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007938:	2b00      	cmp	r3, #0
 800793a:	d00a      	beq.n	8007952 <HAL_RCCEx_PeriphCLKConfig+0xcba>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 800793c:	687b      	ldr	r3, [r7, #4]
 800793e:	3324      	adds	r3, #36	; 0x24
 8007940:	2102      	movs	r1, #2
 8007942:	4618      	mov	r0, r3
 8007944:	f000 ffba 	bl	80088bc <RCCEx_PLL3_Config>
 8007948:	4603      	mov	r3, r0
 800794a:	2b00      	cmp	r3, #0
 800794c:	d001      	beq.n	8007952 <HAL_RCCEx_PeriphCLKConfig+0xcba>
    {
      status=HAL_ERROR;
 800794e:	2301      	movs	r3, #1
 8007950:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8007952:	687b      	ldr	r3, [r7, #4]
 8007954:	681b      	ldr	r3, [r3, #0]
 8007956:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800795a:	2b00      	cmp	r3, #0
 800795c:	d02f      	beq.n	80079be <HAL_RCCEx_PeriphCLKConfig+0xd26>
  {

    switch(PeriphClkInit->RngClockSelection)
 800795e:	687b      	ldr	r3, [r7, #4]
 8007960:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007962:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007966:	d00c      	beq.n	8007982 <HAL_RCCEx_PeriphCLKConfig+0xcea>
 8007968:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800796c:	d802      	bhi.n	8007974 <HAL_RCCEx_PeriphCLKConfig+0xcdc>
 800796e:	2b00      	cmp	r3, #0
 8007970:	d011      	beq.n	8007996 <HAL_RCCEx_PeriphCLKConfig+0xcfe>
 8007972:	e00d      	b.n	8007990 <HAL_RCCEx_PeriphCLKConfig+0xcf8>
 8007974:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007978:	d00f      	beq.n	800799a <HAL_RCCEx_PeriphCLKConfig+0xd02>
 800797a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800797e:	d00e      	beq.n	800799e <HAL_RCCEx_PeriphCLKConfig+0xd06>
 8007980:	e006      	b.n	8007990 <HAL_RCCEx_PeriphCLKConfig+0xcf8>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007982:	4b3b      	ldr	r3, [pc, #236]	; (8007a70 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8007984:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007986:	4a3a      	ldr	r2, [pc, #232]	; (8007a70 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8007988:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800798c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 800798e:	e007      	b.n	80079a0 <HAL_RCCEx_PeriphCLKConfig+0xd08>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007990:	2301      	movs	r3, #1
 8007992:	75fb      	strb	r3, [r7, #23]
      break;
 8007994:	e004      	b.n	80079a0 <HAL_RCCEx_PeriphCLKConfig+0xd08>
      break;
 8007996:	bf00      	nop
 8007998:	e002      	b.n	80079a0 <HAL_RCCEx_PeriphCLKConfig+0xd08>
      break;
 800799a:	bf00      	nop
 800799c:	e000      	b.n	80079a0 <HAL_RCCEx_PeriphCLKConfig+0xd08>
      break;
 800799e:	bf00      	nop
    }

    if(ret == HAL_OK)
 80079a0:	7dfb      	ldrb	r3, [r7, #23]
 80079a2:	2b00      	cmp	r3, #0
 80079a4:	d109      	bne.n	80079ba <HAL_RCCEx_PeriphCLKConfig+0xd22>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80079a6:	4b32      	ldr	r3, [pc, #200]	; (8007a70 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 80079a8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80079aa:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80079ae:	687b      	ldr	r3, [r7, #4]
 80079b0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80079b2:	492f      	ldr	r1, [pc, #188]	; (8007a70 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 80079b4:	4313      	orrs	r3, r2
 80079b6:	654b      	str	r3, [r1, #84]	; 0x54
 80079b8:	e001      	b.n	80079be <HAL_RCCEx_PeriphCLKConfig+0xd26>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80079ba:	7dfb      	ldrb	r3, [r7, #23]
 80079bc:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80079be:	687b      	ldr	r3, [r7, #4]
 80079c0:	681b      	ldr	r3, [r3, #0]
 80079c2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80079c6:	2b00      	cmp	r3, #0
 80079c8:	d008      	beq.n	80079dc <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80079ca:	4b29      	ldr	r3, [pc, #164]	; (8007a70 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 80079cc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80079ce:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80079d2:	687b      	ldr	r3, [r7, #4]
 80079d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80079d6:	4926      	ldr	r1, [pc, #152]	; (8007a70 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 80079d8:	4313      	orrs	r3, r2
 80079da:	650b      	str	r3, [r1, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 80079dc:	687b      	ldr	r3, [r7, #4]
 80079de:	681b      	ldr	r3, [r3, #0]
 80079e0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80079e4:	2b00      	cmp	r3, #0
 80079e6:	d009      	beq.n	80079fc <HAL_RCCEx_PeriphCLKConfig+0xd64>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 80079e8:	4b21      	ldr	r3, [pc, #132]	; (8007a70 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 80079ea:	691b      	ldr	r3, [r3, #16]
 80079ec:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80079f0:	687b      	ldr	r3, [r7, #4]
 80079f2:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80079f6:	491e      	ldr	r1, [pc, #120]	; (8007a70 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 80079f8:	4313      	orrs	r3, r2
 80079fa:	610b      	str	r3, [r1, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80079fc:	687b      	ldr	r3, [r7, #4]
 80079fe:	681b      	ldr	r3, [r3, #0]
 8007a00:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007a04:	2b00      	cmp	r3, #0
 8007a06:	d008      	beq.n	8007a1a <HAL_RCCEx_PeriphCLKConfig+0xd82>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8007a08:	4b19      	ldr	r3, [pc, #100]	; (8007a70 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8007a0a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007a0c:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8007a10:	687b      	ldr	r3, [r7, #4]
 8007a12:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007a14:	4916      	ldr	r1, [pc, #88]	; (8007a70 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8007a16:	4313      	orrs	r3, r2
 8007a18:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8007a1a:	687b      	ldr	r3, [r7, #4]
 8007a1c:	681b      	ldr	r3, [r3, #0]
 8007a1e:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8007a22:	2b00      	cmp	r3, #0
 8007a24:	d00d      	beq.n	8007a42 <HAL_RCCEx_PeriphCLKConfig+0xdaa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8007a26:	4b12      	ldr	r3, [pc, #72]	; (8007a70 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8007a28:	691b      	ldr	r3, [r3, #16]
 8007a2a:	4a11      	ldr	r2, [pc, #68]	; (8007a70 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8007a2c:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8007a30:	6113      	str	r3, [r2, #16]
 8007a32:	4b0f      	ldr	r3, [pc, #60]	; (8007a70 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8007a34:	691a      	ldr	r2, [r3, #16]
 8007a36:	687b      	ldr	r3, [r7, #4]
 8007a38:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8007a3c:	490c      	ldr	r1, [pc, #48]	; (8007a70 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8007a3e:	4313      	orrs	r3, r2
 8007a40:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8007a42:	687b      	ldr	r3, [r7, #4]
 8007a44:	681b      	ldr	r3, [r3, #0]
 8007a46:	2b00      	cmp	r3, #0
 8007a48:	da08      	bge.n	8007a5c <HAL_RCCEx_PeriphCLKConfig+0xdc4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8007a4a:	4b09      	ldr	r3, [pc, #36]	; (8007a70 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8007a4c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007a4e:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8007a52:	687b      	ldr	r3, [r7, #4]
 8007a54:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007a56:	4906      	ldr	r1, [pc, #24]	; (8007a70 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8007a58:	4313      	orrs	r3, r2
 8007a5a:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  if (status == HAL_OK)
 8007a5c:	7dbb      	ldrb	r3, [r7, #22]
 8007a5e:	2b00      	cmp	r3, #0
 8007a60:	d101      	bne.n	8007a66 <HAL_RCCEx_PeriphCLKConfig+0xdce>
  {
    return HAL_OK;
 8007a62:	2300      	movs	r3, #0
 8007a64:	e000      	b.n	8007a68 <HAL_RCCEx_PeriphCLKConfig+0xdd0>
  }
  return HAL_ERROR;
 8007a66:	2301      	movs	r3, #1
}
 8007a68:	4618      	mov	r0, r3
 8007a6a:	3718      	adds	r7, #24
 8007a6c:	46bd      	mov	sp, r7
 8007a6e:	bd80      	pop	{r7, pc}
 8007a70:	58024400 	.word	0x58024400

08007a74 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8007a74:	b580      	push	{r7, lr}
 8007a76:	b090      	sub	sp, #64	; 0x40
 8007a78:	af00      	add	r7, sp, #0
 8007a7a:	6078      	str	r0, [r7, #4]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 8007a7c:	687b      	ldr	r3, [r7, #4]
 8007a7e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007a82:	d150      	bne.n	8007b26 <HAL_RCCEx_GetPeriphCLKFreq+0xb2>
    {

      saiclocksource= __HAL_RCC_GET_SAI1_SOURCE();
 8007a84:	4ba1      	ldr	r3, [pc, #644]	; (8007d0c <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8007a86:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007a88:	f003 0307 	and.w	r3, r3, #7
 8007a8c:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 8007a8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a90:	2b04      	cmp	r3, #4
 8007a92:	d844      	bhi.n	8007b1e <HAL_RCCEx_GetPeriphCLKFreq+0xaa>
 8007a94:	a201      	add	r2, pc, #4	; (adr r2, 8007a9c <HAL_RCCEx_GetPeriphCLKFreq+0x28>)
 8007a96:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007a9a:	bf00      	nop
 8007a9c:	08007ab1 	.word	0x08007ab1
 8007aa0:	08007ac1 	.word	0x08007ac1
 8007aa4:	08007ad1 	.word	0x08007ad1
 8007aa8:	08007b19 	.word	0x08007b19
 8007aac:	08007ae1 	.word	0x08007ae1
      {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007ab0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007ab4:	4618      	mov	r0, r3
 8007ab6:	f000 fd03 	bl	80084c0 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8007aba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007abc:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007abe:	e241      	b.n	8007f44 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007ac0:	f107 0318 	add.w	r3, r7, #24
 8007ac4:	4618      	mov	r0, r3
 8007ac6:	f000 fa63 	bl	8007f90 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8007aca:	69bb      	ldr	r3, [r7, #24]
 8007acc:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007ace:	e239      	b.n	8007f44 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007ad0:	f107 030c 	add.w	r3, r7, #12
 8007ad4:	4618      	mov	r0, r3
 8007ad6:	f000 fba7 	bl	8008228 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8007ada:	68fb      	ldr	r3, [r7, #12]
 8007adc:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007ade:	e231      	b.n	8007f44 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8007ae0:	4b8a      	ldr	r3, [pc, #552]	; (8007d0c <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8007ae2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007ae4:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8007ae8:	637b      	str	r3, [r7, #52]	; 0x34

          if(ckpclocksource== RCC_CLKPSOURCE_HSI)
 8007aea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007aec:	2b00      	cmp	r3, #0
 8007aee:	d102      	bne.n	8007af6 <HAL_RCCEx_GetPeriphCLKFreq+0x82>
          {
            /* In Case the CKPER Source is HSI */
            frequency = HSI_VALUE;
 8007af0:	4b87      	ldr	r3, [pc, #540]	; (8007d10 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 8007af2:	63fb      	str	r3, [r7, #60]	; 0x3c
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
          }

          break;
 8007af4:	e226      	b.n	8007f44 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if(ckpclocksource== RCC_CLKPSOURCE_CSI)
 8007af6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007af8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007afc:	d102      	bne.n	8007b04 <HAL_RCCEx_GetPeriphCLKFreq+0x90>
            frequency = CSI_VALUE;
 8007afe:	4b85      	ldr	r3, [pc, #532]	; (8007d14 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 8007b00:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007b02:	e21f      	b.n	8007f44 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if (ckpclocksource== RCC_CLKPSOURCE_HSE)
 8007b04:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007b06:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007b0a:	d102      	bne.n	8007b12 <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
            frequency = HSE_VALUE;
 8007b0c:	4b82      	ldr	r3, [pc, #520]	; (8007d18 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 8007b0e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007b10:	e218      	b.n	8007f44 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
            frequency = 0;
 8007b12:	2300      	movs	r3, #0
 8007b14:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007b16:	e215      	b.n	8007f44 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8007b18:	4b80      	ldr	r3, [pc, #512]	; (8007d1c <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>)
 8007b1a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007b1c:	e212      	b.n	8007f44 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      default :
        {
          frequency = 0;
 8007b1e:	2300      	movs	r3, #0
 8007b20:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007b22:	bf00      	nop
 8007b24:	e20e      	b.n	8007f44 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      }
    }

#if defined(SAI3)
  else if (PeriphClk == RCC_PERIPHCLK_SAI23)
 8007b26:	687b      	ldr	r3, [r7, #4]
 8007b28:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007b2c:	d14f      	bne.n	8007bce <HAL_RCCEx_GetPeriphCLKFreq+0x15a>
    {

      saiclocksource= __HAL_RCC_GET_SAI23_SOURCE();
 8007b2e:	4b77      	ldr	r3, [pc, #476]	; (8007d0c <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8007b30:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007b32:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
 8007b36:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 8007b38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b3a:	2b80      	cmp	r3, #128	; 0x80
 8007b3c:	d01c      	beq.n	8007b78 <HAL_RCCEx_GetPeriphCLKFreq+0x104>
 8007b3e:	2b80      	cmp	r3, #128	; 0x80
 8007b40:	d804      	bhi.n	8007b4c <HAL_RCCEx_GetPeriphCLKFreq+0xd8>
 8007b42:	2b00      	cmp	r3, #0
 8007b44:	d008      	beq.n	8007b58 <HAL_RCCEx_GetPeriphCLKFreq+0xe4>
 8007b46:	2b40      	cmp	r3, #64	; 0x40
 8007b48:	d00e      	beq.n	8007b68 <HAL_RCCEx_GetPeriphCLKFreq+0xf4>
 8007b4a:	e03c      	b.n	8007bc6 <HAL_RCCEx_GetPeriphCLKFreq+0x152>
 8007b4c:	2bc0      	cmp	r3, #192	; 0xc0
 8007b4e:	d037      	beq.n	8007bc0 <HAL_RCCEx_GetPeriphCLKFreq+0x14c>
 8007b50:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007b54:	d018      	beq.n	8007b88 <HAL_RCCEx_GetPeriphCLKFreq+0x114>
 8007b56:	e036      	b.n	8007bc6 <HAL_RCCEx_GetPeriphCLKFreq+0x152>
      {
      case 0: /* PLL1 is the clock source for SAI2/3 */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007b58:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007b5c:	4618      	mov	r0, r3
 8007b5e:	f000 fcaf 	bl	80084c0 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8007b62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007b64:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007b66:	e1ed      	b.n	8007f44 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI2/3 */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007b68:	f107 0318 	add.w	r3, r7, #24
 8007b6c:	4618      	mov	r0, r3
 8007b6e:	f000 fa0f 	bl	8007f90 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8007b72:	69bb      	ldr	r3, [r7, #24]
 8007b74:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007b76:	e1e5      	b.n	8007f44 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_SAI23CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI2/3 */
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007b78:	f107 030c 	add.w	r3, r7, #12
 8007b7c:	4618      	mov	r0, r3
 8007b7e:	f000 fb53 	bl	8008228 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8007b82:	68fb      	ldr	r3, [r7, #12]
 8007b84:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007b86:	e1dd      	b.n	8007f44 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_SAI23CLKSOURCE_CLKP: /* CKPER is the clock source for SAI2/3 */
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8007b88:	4b60      	ldr	r3, [pc, #384]	; (8007d0c <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8007b8a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007b8c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8007b90:	637b      	str	r3, [r7, #52]	; 0x34

          if(ckpclocksource== RCC_CLKPSOURCE_HSI)
 8007b92:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007b94:	2b00      	cmp	r3, #0
 8007b96:	d102      	bne.n	8007b9e <HAL_RCCEx_GetPeriphCLKFreq+0x12a>
          {
            /* In Case the CKPER Source is HSI */
            frequency = HSI_VALUE;
 8007b98:	4b5d      	ldr	r3, [pc, #372]	; (8007d10 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 8007b9a:	63fb      	str	r3, [r7, #60]	; 0x3c
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
          }

          break;
 8007b9c:	e1d2      	b.n	8007f44 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if(ckpclocksource== RCC_CLKPSOURCE_CSI)
 8007b9e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007ba0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007ba4:	d102      	bne.n	8007bac <HAL_RCCEx_GetPeriphCLKFreq+0x138>
            frequency = CSI_VALUE;
 8007ba6:	4b5b      	ldr	r3, [pc, #364]	; (8007d14 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 8007ba8:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007baa:	e1cb      	b.n	8007f44 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if (ckpclocksource== RCC_CLKPSOURCE_HSE)
 8007bac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007bae:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007bb2:	d102      	bne.n	8007bba <HAL_RCCEx_GetPeriphCLKFreq+0x146>
            frequency = HSE_VALUE;
 8007bb4:	4b58      	ldr	r3, [pc, #352]	; (8007d18 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 8007bb6:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007bb8:	e1c4      	b.n	8007f44 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
            frequency = 0;
 8007bba:	2300      	movs	r3, #0
 8007bbc:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007bbe:	e1c1      	b.n	8007f44 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case (RCC_SAI23CLKSOURCE_PIN): /* External clock is the clock source for SAI2/3 */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8007bc0:	4b56      	ldr	r3, [pc, #344]	; (8007d1c <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>)
 8007bc2:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007bc4:	e1be      	b.n	8007f44 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      default :
        {
          frequency = 0;
 8007bc6:	2300      	movs	r3, #0
 8007bc8:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007bca:	bf00      	nop
 8007bcc:	e1ba      	b.n	8007f44 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
      }
    }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 8007bce:	687b      	ldr	r3, [r7, #4]
 8007bd0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007bd4:	d153      	bne.n	8007c7e <HAL_RCCEx_GetPeriphCLKFreq+0x20a>
    {

      saiclocksource= __HAL_RCC_GET_SAI4A_SOURCE();
 8007bd6:	4b4d      	ldr	r3, [pc, #308]	; (8007d0c <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8007bd8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007bda:	f403 0360 	and.w	r3, r3, #14680064	; 0xe00000
 8007bde:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 8007be0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007be2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007be6:	d01f      	beq.n	8007c28 <HAL_RCCEx_GetPeriphCLKFreq+0x1b4>
 8007be8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007bec:	d805      	bhi.n	8007bfa <HAL_RCCEx_GetPeriphCLKFreq+0x186>
 8007bee:	2b00      	cmp	r3, #0
 8007bf0:	d00a      	beq.n	8007c08 <HAL_RCCEx_GetPeriphCLKFreq+0x194>
 8007bf2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8007bf6:	d00f      	beq.n	8007c18 <HAL_RCCEx_GetPeriphCLKFreq+0x1a4>
 8007bf8:	e03d      	b.n	8007c76 <HAL_RCCEx_GetPeriphCLKFreq+0x202>
 8007bfa:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8007bfe:	d037      	beq.n	8007c70 <HAL_RCCEx_GetPeriphCLKFreq+0x1fc>
 8007c00:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8007c04:	d018      	beq.n	8007c38 <HAL_RCCEx_GetPeriphCLKFreq+0x1c4>
 8007c06:	e036      	b.n	8007c76 <HAL_RCCEx_GetPeriphCLKFreq+0x202>
      {
      case 0: /* PLL1 is the clock source for SAI4A */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007c08:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007c0c:	4618      	mov	r0, r3
 8007c0e:	f000 fc57 	bl	80084c0 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8007c12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c14:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007c16:	e195      	b.n	8007f44 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_D3CCIPR_SAI4ASEL_0: /* PLLI2 is the clock source for SAI4A */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007c18:	f107 0318 	add.w	r3, r7, #24
 8007c1c:	4618      	mov	r0, r3
 8007c1e:	f000 f9b7 	bl	8007f90 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8007c22:	69bb      	ldr	r3, [r7, #24]
 8007c24:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007c26:	e18d      	b.n	8007f44 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_D3CCIPR_SAI4ASEL_1: /* PLLI3 is the clock source for SAI4A */
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007c28:	f107 030c 	add.w	r3, r7, #12
 8007c2c:	4618      	mov	r0, r3
 8007c2e:	f000 fafb 	bl	8008228 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8007c32:	68fb      	ldr	r3, [r7, #12]
 8007c34:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007c36:	e185      	b.n	8007f44 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_D3CCIPR_SAI4ASEL_2: /* CKPER is the clock source for SAI4A*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8007c38:	4b34      	ldr	r3, [pc, #208]	; (8007d0c <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8007c3a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007c3c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8007c40:	637b      	str	r3, [r7, #52]	; 0x34

          if(ckpclocksource== RCC_CLKPSOURCE_HSI)
 8007c42:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007c44:	2b00      	cmp	r3, #0
 8007c46:	d102      	bne.n	8007c4e <HAL_RCCEx_GetPeriphCLKFreq+0x1da>
          {
            /* In Case the CKPER Source is HSI */
            frequency = HSI_VALUE;
 8007c48:	4b31      	ldr	r3, [pc, #196]	; (8007d10 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 8007c4a:	63fb      	str	r3, [r7, #60]	; 0x3c
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
          }

          break;
 8007c4c:	e17a      	b.n	8007f44 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if(ckpclocksource== RCC_CLKPSOURCE_CSI)
 8007c4e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007c50:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007c54:	d102      	bne.n	8007c5c <HAL_RCCEx_GetPeriphCLKFreq+0x1e8>
            frequency = CSI_VALUE;
 8007c56:	4b2f      	ldr	r3, [pc, #188]	; (8007d14 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 8007c58:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007c5a:	e173      	b.n	8007f44 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if (ckpclocksource== RCC_CLKPSOURCE_HSE)
 8007c5c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007c5e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007c62:	d102      	bne.n	8007c6a <HAL_RCCEx_GetPeriphCLKFreq+0x1f6>
            frequency = HSE_VALUE;
 8007c64:	4b2c      	ldr	r3, [pc, #176]	; (8007d18 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 8007c66:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007c68:	e16c      	b.n	8007f44 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
            frequency = 0;
 8007c6a:	2300      	movs	r3, #0
 8007c6c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007c6e:	e169      	b.n	8007f44 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case (RCC_D3CCIPR_SAI4ASEL_0 | RCC_D3CCIPR_SAI4ASEL_1 ): /* External clock is the clock source for SAI4A */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8007c70:	4b2a      	ldr	r3, [pc, #168]	; (8007d1c <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>)
 8007c72:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007c74:	e166      	b.n	8007f44 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      default :
        {
          frequency = 0;
 8007c76:	2300      	movs	r3, #0
 8007c78:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007c7a:	bf00      	nop
 8007c7c:	e162      	b.n	8007f44 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      }
    }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 8007c7e:	687b      	ldr	r3, [r7, #4]
 8007c80:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007c84:	d15d      	bne.n	8007d42 <HAL_RCCEx_GetPeriphCLKFreq+0x2ce>
    {

      saiclocksource= __HAL_RCC_GET_SAI4B_SOURCE();
 8007c86:	4b21      	ldr	r3, [pc, #132]	; (8007d0c <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8007c88:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007c8a:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 8007c8e:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 8007c90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007c92:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007c96:	d01f      	beq.n	8007cd8 <HAL_RCCEx_GetPeriphCLKFreq+0x264>
 8007c98:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007c9c:	d805      	bhi.n	8007caa <HAL_RCCEx_GetPeriphCLKFreq+0x236>
 8007c9e:	2b00      	cmp	r3, #0
 8007ca0:	d00a      	beq.n	8007cb8 <HAL_RCCEx_GetPeriphCLKFreq+0x244>
 8007ca2:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8007ca6:	d00f      	beq.n	8007cc8 <HAL_RCCEx_GetPeriphCLKFreq+0x254>
 8007ca8:	e047      	b.n	8007d3a <HAL_RCCEx_GetPeriphCLKFreq+0x2c6>
 8007caa:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8007cae:	d041      	beq.n	8007d34 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>
 8007cb0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8007cb4:	d018      	beq.n	8007ce8 <HAL_RCCEx_GetPeriphCLKFreq+0x274>
 8007cb6:	e040      	b.n	8007d3a <HAL_RCCEx_GetPeriphCLKFreq+0x2c6>
      {
      case 0: /* PLL1 is the clock source for SAI4B */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007cb8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007cbc:	4618      	mov	r0, r3
 8007cbe:	f000 fbff 	bl	80084c0 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8007cc2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007cc4:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007cc6:	e13d      	b.n	8007f44 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_D3CCIPR_SAI4BSEL_0: /* PLLI2 is the clock source for SAI4B */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007cc8:	f107 0318 	add.w	r3, r7, #24
 8007ccc:	4618      	mov	r0, r3
 8007cce:	f000 f95f 	bl	8007f90 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8007cd2:	69bb      	ldr	r3, [r7, #24]
 8007cd4:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007cd6:	e135      	b.n	8007f44 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_D3CCIPR_SAI4BSEL_1: /* PLLI3 is the clock source for SAI4B */
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007cd8:	f107 030c 	add.w	r3, r7, #12
 8007cdc:	4618      	mov	r0, r3
 8007cde:	f000 faa3 	bl	8008228 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8007ce2:	68fb      	ldr	r3, [r7, #12]
 8007ce4:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007ce6:	e12d      	b.n	8007f44 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_D3CCIPR_SAI4BSEL_2: /* CKPER is the clock source for SAI4B*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8007ce8:	4b08      	ldr	r3, [pc, #32]	; (8007d0c <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8007cea:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007cec:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8007cf0:	637b      	str	r3, [r7, #52]	; 0x34

          if(ckpclocksource== RCC_CLKPSOURCE_HSI)
 8007cf2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007cf4:	2b00      	cmp	r3, #0
 8007cf6:	d102      	bne.n	8007cfe <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
          {
            /* In Case the CKPER Source is HSI */
            frequency = HSI_VALUE;
 8007cf8:	4b05      	ldr	r3, [pc, #20]	; (8007d10 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 8007cfa:	63fb      	str	r3, [r7, #60]	; 0x3c
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
          }

          break;
 8007cfc:	e122      	b.n	8007f44 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if(ckpclocksource== RCC_CLKPSOURCE_CSI)
 8007cfe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007d00:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007d04:	d10c      	bne.n	8007d20 <HAL_RCCEx_GetPeriphCLKFreq+0x2ac>
            frequency = CSI_VALUE;
 8007d06:	4b03      	ldr	r3, [pc, #12]	; (8007d14 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 8007d08:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007d0a:	e11b      	b.n	8007f44 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
 8007d0c:	58024400 	.word	0x58024400
 8007d10:	03d09000 	.word	0x03d09000
 8007d14:	003d0900 	.word	0x003d0900
 8007d18:	017d7840 	.word	0x017d7840
 8007d1c:	00bb8000 	.word	0x00bb8000
          else if (ckpclocksource== RCC_CLKPSOURCE_HSE)
 8007d20:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007d22:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007d26:	d102      	bne.n	8007d2e <HAL_RCCEx_GetPeriphCLKFreq+0x2ba>
            frequency = HSE_VALUE;
 8007d28:	4b89      	ldr	r3, [pc, #548]	; (8007f50 <HAL_RCCEx_GetPeriphCLKFreq+0x4dc>)
 8007d2a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007d2c:	e10a      	b.n	8007f44 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
            frequency = 0;
 8007d2e:	2300      	movs	r3, #0
 8007d30:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007d32:	e107      	b.n	8007f44 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case (RCC_D3CCIPR_SAI4BSEL_0 | RCC_D3CCIPR_SAI4BSEL_1 ): /* External clock is the clock source for SAI4B */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8007d34:	4b87      	ldr	r3, [pc, #540]	; (8007f54 <HAL_RCCEx_GetPeriphCLKFreq+0x4e0>)
 8007d36:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007d38:	e104      	b.n	8007f44 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      default :
        {
          frequency = 0;
 8007d3a:	2300      	movs	r3, #0
 8007d3c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007d3e:	bf00      	nop
 8007d40:	e100      	b.n	8007f44 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      }
    }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 8007d42:	687b      	ldr	r3, [r7, #4]
 8007d44:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007d48:	d153      	bne.n	8007df2 <HAL_RCCEx_GetPeriphCLKFreq+0x37e>
    {
      /* Get SPI1/2/3 clock source */
      srcclk= __HAL_RCC_GET_SPI123_SOURCE();
 8007d4a:	4b83      	ldr	r3, [pc, #524]	; (8007f58 <HAL_RCCEx_GetPeriphCLKFreq+0x4e4>)
 8007d4c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007d4e:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 8007d52:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8007d54:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007d56:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007d5a:	d01f      	beq.n	8007d9c <HAL_RCCEx_GetPeriphCLKFreq+0x328>
 8007d5c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007d60:	d805      	bhi.n	8007d6e <HAL_RCCEx_GetPeriphCLKFreq+0x2fa>
 8007d62:	2b00      	cmp	r3, #0
 8007d64:	d00a      	beq.n	8007d7c <HAL_RCCEx_GetPeriphCLKFreq+0x308>
 8007d66:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007d6a:	d00f      	beq.n	8007d8c <HAL_RCCEx_GetPeriphCLKFreq+0x318>
 8007d6c:	e03d      	b.n	8007dea <HAL_RCCEx_GetPeriphCLKFreq+0x376>
 8007d6e:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8007d72:	d037      	beq.n	8007de4 <HAL_RCCEx_GetPeriphCLKFreq+0x370>
 8007d74:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007d78:	d018      	beq.n	8007dac <HAL_RCCEx_GetPeriphCLKFreq+0x338>
 8007d7a:	e036      	b.n	8007dea <HAL_RCCEx_GetPeriphCLKFreq+0x376>
      {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for I2S */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007d7c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007d80:	4618      	mov	r0, r3
 8007d82:	f000 fb9d 	bl	80084c0 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8007d86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d88:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007d8a:	e0db      	b.n	8007f44 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for I2S */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007d8c:	f107 0318 	add.w	r3, r7, #24
 8007d90:	4618      	mov	r0, r3
 8007d92:	f000 f8fd 	bl	8007f90 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8007d96:	69bb      	ldr	r3, [r7, #24]
 8007d98:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007d9a:	e0d3      	b.n	8007f44 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for I2S */
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007d9c:	f107 030c 	add.w	r3, r7, #12
 8007da0:	4618      	mov	r0, r3
 8007da2:	f000 fa41 	bl	8008228 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8007da6:	68fb      	ldr	r3, [r7, #12]
 8007da8:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007daa:	e0cb      	b.n	8007f44 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for I2S */
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8007dac:	4b6a      	ldr	r3, [pc, #424]	; (8007f58 <HAL_RCCEx_GetPeriphCLKFreq+0x4e4>)
 8007dae:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007db0:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8007db4:	637b      	str	r3, [r7, #52]	; 0x34

          if(ckpclocksource== RCC_CLKPSOURCE_HSI)
 8007db6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007db8:	2b00      	cmp	r3, #0
 8007dba:	d102      	bne.n	8007dc2 <HAL_RCCEx_GetPeriphCLKFreq+0x34e>
          {
            /* In Case the CKPER Source is HSI */
            frequency = HSI_VALUE;
 8007dbc:	4b67      	ldr	r3, [pc, #412]	; (8007f5c <HAL_RCCEx_GetPeriphCLKFreq+0x4e8>)
 8007dbe:	63fb      	str	r3, [r7, #60]	; 0x3c
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
          }

          break;
 8007dc0:	e0c0      	b.n	8007f44 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if(ckpclocksource== RCC_CLKPSOURCE_CSI)
 8007dc2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007dc4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007dc8:	d102      	bne.n	8007dd0 <HAL_RCCEx_GetPeriphCLKFreq+0x35c>
            frequency = CSI_VALUE;
 8007dca:	4b65      	ldr	r3, [pc, #404]	; (8007f60 <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>)
 8007dcc:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007dce:	e0b9      	b.n	8007f44 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if (ckpclocksource== RCC_CLKPSOURCE_HSE)
 8007dd0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007dd2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007dd6:	d102      	bne.n	8007dde <HAL_RCCEx_GetPeriphCLKFreq+0x36a>
            frequency = HSE_VALUE;
 8007dd8:	4b5d      	ldr	r3, [pc, #372]	; (8007f50 <HAL_RCCEx_GetPeriphCLKFreq+0x4dc>)
 8007dda:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007ddc:	e0b2      	b.n	8007f44 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
            frequency = 0;
 8007dde:	2300      	movs	r3, #0
 8007de0:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007de2:	e0af      	b.n	8007f44 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8007de4:	4b5b      	ldr	r3, [pc, #364]	; (8007f54 <HAL_RCCEx_GetPeriphCLKFreq+0x4e0>)
 8007de6:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007de8:	e0ac      	b.n	8007f44 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      default :
        {
          frequency = 0;
 8007dea:	2300      	movs	r3, #0
 8007dec:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007dee:	bf00      	nop
 8007df0:	e0a8      	b.n	8007f44 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 8007df2:	687b      	ldr	r3, [r7, #4]
 8007df4:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8007df8:	d13d      	bne.n	8007e76 <HAL_RCCEx_GetPeriphCLKFreq+0x402>
    {
      /* Get ADC clock source */
      srcclk= __HAL_RCC_GET_ADC_SOURCE();
 8007dfa:	4b57      	ldr	r3, [pc, #348]	; (8007f58 <HAL_RCCEx_GetPeriphCLKFreq+0x4e4>)
 8007dfc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007dfe:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8007e02:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8007e04:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007e06:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007e0a:	d00c      	beq.n	8007e26 <HAL_RCCEx_GetPeriphCLKFreq+0x3b2>
 8007e0c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007e10:	d011      	beq.n	8007e36 <HAL_RCCEx_GetPeriphCLKFreq+0x3c2>
 8007e12:	2b00      	cmp	r3, #0
 8007e14:	d12b      	bne.n	8007e6e <HAL_RCCEx_GetPeriphCLKFreq+0x3fa>
      {
      case RCC_ADCCLKSOURCE_PLL2:
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007e16:	f107 0318 	add.w	r3, r7, #24
 8007e1a:	4618      	mov	r0, r3
 8007e1c:	f000 f8b8 	bl	8007f90 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8007e20:	69bb      	ldr	r3, [r7, #24]
 8007e22:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007e24:	e08e      	b.n	8007f44 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_ADCCLKSOURCE_PLL3:
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007e26:	f107 030c 	add.w	r3, r7, #12
 8007e2a:	4618      	mov	r0, r3
 8007e2c:	f000 f9fc 	bl	8008228 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 8007e30:	697b      	ldr	r3, [r7, #20]
 8007e32:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007e34:	e086      	b.n	8007f44 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_ADCCLKSOURCE_CLKP:
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8007e36:	4b48      	ldr	r3, [pc, #288]	; (8007f58 <HAL_RCCEx_GetPeriphCLKFreq+0x4e4>)
 8007e38:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007e3a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8007e3e:	637b      	str	r3, [r7, #52]	; 0x34

          if(ckpclocksource== RCC_CLKPSOURCE_HSI)
 8007e40:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007e42:	2b00      	cmp	r3, #0
 8007e44:	d102      	bne.n	8007e4c <HAL_RCCEx_GetPeriphCLKFreq+0x3d8>
          {
            /* In Case the CKPER Source is HSI */
            frequency = HSI_VALUE;
 8007e46:	4b45      	ldr	r3, [pc, #276]	; (8007f5c <HAL_RCCEx_GetPeriphCLKFreq+0x4e8>)
 8007e48:	63fb      	str	r3, [r7, #60]	; 0x3c
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
          }

          break;
 8007e4a:	e07b      	b.n	8007f44 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if(ckpclocksource== RCC_CLKPSOURCE_CSI)
 8007e4c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007e4e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007e52:	d102      	bne.n	8007e5a <HAL_RCCEx_GetPeriphCLKFreq+0x3e6>
            frequency = CSI_VALUE;
 8007e54:	4b42      	ldr	r3, [pc, #264]	; (8007f60 <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>)
 8007e56:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007e58:	e074      	b.n	8007f44 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if (ckpclocksource== RCC_CLKPSOURCE_HSE)
 8007e5a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007e5c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007e60:	d102      	bne.n	8007e68 <HAL_RCCEx_GetPeriphCLKFreq+0x3f4>
            frequency = HSE_VALUE;
 8007e62:	4b3b      	ldr	r3, [pc, #236]	; (8007f50 <HAL_RCCEx_GetPeriphCLKFreq+0x4dc>)
 8007e64:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007e66:	e06d      	b.n	8007f44 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
            frequency = 0;
 8007e68:	2300      	movs	r3, #0
 8007e6a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007e6c:	e06a      	b.n	8007f44 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      default :
        {
          frequency = 0;
 8007e6e:	2300      	movs	r3, #0
 8007e70:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007e72:	bf00      	nop
 8007e74:	e066      	b.n	8007f44 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 8007e76:	687b      	ldr	r3, [r7, #4]
 8007e78:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007e7c:	d11f      	bne.n	8007ebe <HAL_RCCEx_GetPeriphCLKFreq+0x44a>
    {
      /* Get SDMMC clock source */
      srcclk= __HAL_RCC_GET_SDMMC_SOURCE();
 8007e7e:	4b36      	ldr	r3, [pc, #216]	; (8007f58 <HAL_RCCEx_GetPeriphCLKFreq+0x4e4>)
 8007e80:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007e82:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007e86:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8007e88:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007e8a:	2b00      	cmp	r3, #0
 8007e8c:	d003      	beq.n	8007e96 <HAL_RCCEx_GetPeriphCLKFreq+0x422>
 8007e8e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007e92:	d008      	beq.n	8007ea6 <HAL_RCCEx_GetPeriphCLKFreq+0x432>
 8007e94:	e00f      	b.n	8007eb6 <HAL_RCCEx_GetPeriphCLKFreq+0x442>
      {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007e96:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007e9a:	4618      	mov	r0, r3
 8007e9c:	f000 fb10 	bl	80084c0 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8007ea0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007ea2:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007ea4:	e04e      	b.n	8007f44 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007ea6:	f107 0318 	add.w	r3, r7, #24
 8007eaa:	4618      	mov	r0, r3
 8007eac:	f000 f870 	bl	8007f90 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 8007eb0:	6a3b      	ldr	r3, [r7, #32]
 8007eb2:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007eb4:	e046      	b.n	8007f44 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      default :
        {
          frequency = 0;
 8007eb6:	2300      	movs	r3, #0
 8007eb8:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007eba:	bf00      	nop
 8007ebc:	e042      	b.n	8007f44 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 8007ebe:	687b      	ldr	r3, [r7, #4]
 8007ec0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007ec4:	d13c      	bne.n	8007f40 <HAL_RCCEx_GetPeriphCLKFreq+0x4cc>
    {
      /* Get SPI6 clock source */
      srcclk= __HAL_RCC_GET_SPI6_SOURCE();
 8007ec6:	4b24      	ldr	r3, [pc, #144]	; (8007f58 <HAL_RCCEx_GetPeriphCLKFreq+0x4e4>)
 8007ec8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007eca:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
 8007ece:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8007ed0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007ed2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007ed6:	d01e      	beq.n	8007f16 <HAL_RCCEx_GetPeriphCLKFreq+0x4a2>
 8007ed8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007edc:	d805      	bhi.n	8007eea <HAL_RCCEx_GetPeriphCLKFreq+0x476>
 8007ede:	2b00      	cmp	r3, #0
 8007ee0:	d00d      	beq.n	8007efe <HAL_RCCEx_GetPeriphCLKFreq+0x48a>
 8007ee2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007ee6:	d00e      	beq.n	8007f06 <HAL_RCCEx_GetPeriphCLKFreq+0x492>
 8007ee8:	e026      	b.n	8007f38 <HAL_RCCEx_GetPeriphCLKFreq+0x4c4>
 8007eea:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007eee:	d01d      	beq.n	8007f2c <HAL_RCCEx_GetPeriphCLKFreq+0x4b8>
 8007ef0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8007ef4:	d01d      	beq.n	8007f32 <HAL_RCCEx_GetPeriphCLKFreq+0x4be>
 8007ef6:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8007efa:	d014      	beq.n	8007f26 <HAL_RCCEx_GetPeriphCLKFreq+0x4b2>
 8007efc:	e01c      	b.n	8007f38 <HAL_RCCEx_GetPeriphCLKFreq+0x4c4>
      {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
        {
          frequency = HAL_RCCEx_GetD3PCLK1Freq();
 8007efe:	f000 f831 	bl	8007f64 <HAL_RCCEx_GetD3PCLK1Freq>
 8007f02:	63f8      	str	r0, [r7, #60]	; 0x3c
          break;
 8007f04:	e01e      	b.n	8007f44 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007f06:	f107 0318 	add.w	r3, r7, #24
 8007f0a:	4618      	mov	r0, r3
 8007f0c:	f000 f840 	bl	8007f90 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8007f10:	69fb      	ldr	r3, [r7, #28]
 8007f12:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007f14:	e016      	b.n	8007f44 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007f16:	f107 030c 	add.w	r3, r7, #12
 8007f1a:	4618      	mov	r0, r3
 8007f1c:	f000 f984 	bl	8008228 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8007f20:	693b      	ldr	r3, [r7, #16]
 8007f22:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007f24:	e00e      	b.n	8007f44 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
        {
          frequency = HSI_VALUE;
 8007f26:	4b0d      	ldr	r3, [pc, #52]	; (8007f5c <HAL_RCCEx_GetPeriphCLKFreq+0x4e8>)
 8007f28:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007f2a:	e00b      	b.n	8007f44 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
        {
          frequency = CSI_VALUE;
 8007f2c:	4b0c      	ldr	r3, [pc, #48]	; (8007f60 <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>)
 8007f2e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007f30:	e008      	b.n	8007f44 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
        {
          frequency = HSE_VALUE;
 8007f32:	4b07      	ldr	r3, [pc, #28]	; (8007f50 <HAL_RCCEx_GetPeriphCLKFreq+0x4dc>)
 8007f34:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007f36:	e005      	b.n	8007f44 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          break;
        }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
        {
          frequency = 0;
 8007f38:	2300      	movs	r3, #0
 8007f3a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007f3c:	bf00      	nop
 8007f3e:	e001      	b.n	8007f44 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      }
    }
  else
    {
      frequency = 0;
 8007f40:	2300      	movs	r3, #0
 8007f42:	63fb      	str	r3, [r7, #60]	; 0x3c
    }

  return frequency;
 8007f44:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8007f46:	4618      	mov	r0, r3
 8007f48:	3740      	adds	r7, #64	; 0x40
 8007f4a:	46bd      	mov	sp, r7
 8007f4c:	bd80      	pop	{r7, pc}
 8007f4e:	bf00      	nop
 8007f50:	017d7840 	.word	0x017d7840
 8007f54:	00bb8000 	.word	0x00bb8000
 8007f58:	58024400 	.word	0x58024400
 8007f5c:	03d09000 	.word	0x03d09000
 8007f60:	003d0900 	.word	0x003d0900

08007f64 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8007f64:	b580      	push	{r7, lr}
 8007f66:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8007f68:	f7fe fe3a 	bl	8006be0 <HAL_RCC_GetHCLKFreq>
 8007f6c:	4601      	mov	r1, r0
 8007f6e:	4b06      	ldr	r3, [pc, #24]	; (8007f88 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8007f70:	6a1b      	ldr	r3, [r3, #32]
 8007f72:	091b      	lsrs	r3, r3, #4
 8007f74:	f003 0307 	and.w	r3, r3, #7
 8007f78:	4a04      	ldr	r2, [pc, #16]	; (8007f8c <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8007f7a:	5cd3      	ldrb	r3, [r2, r3]
 8007f7c:	f003 031f 	and.w	r3, r3, #31
 8007f80:	fa21 f303 	lsr.w	r3, r1, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8007f84:	4618      	mov	r0, r3
 8007f86:	bd80      	pop	{r7, pc}
 8007f88:	58024400 	.word	0x58024400
 8007f8c:	08012664 	.word	0x08012664

08007f90 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 8007f90:	b480      	push	{r7}
 8007f92:	b089      	sub	sp, #36	; 0x24
 8007f94:	af00      	add	r7, sp, #0
 8007f96:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8007f98:	4b9d      	ldr	r3, [pc, #628]	; (8008210 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8007f9a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007f9c:	f003 0303 	and.w	r3, r3, #3
 8007fa0:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 8007fa2:	4b9b      	ldr	r3, [pc, #620]	; (8008210 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8007fa4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007fa6:	0b1b      	lsrs	r3, r3, #12
 8007fa8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007fac:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8007fae:	4b98      	ldr	r3, [pc, #608]	; (8008210 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8007fb0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007fb2:	091b      	lsrs	r3, r3, #4
 8007fb4:	f003 0301 	and.w	r3, r3, #1
 8007fb8:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 8007fba:	4b95      	ldr	r3, [pc, #596]	; (8008210 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8007fbc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007fbe:	08db      	lsrs	r3, r3, #3
 8007fc0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8007fc4:	693a      	ldr	r2, [r7, #16]
 8007fc6:	fb02 f303 	mul.w	r3, r2, r3
 8007fca:	ee07 3a90 	vmov	s15, r3
 8007fce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007fd2:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8007fd6:	697b      	ldr	r3, [r7, #20]
 8007fd8:	2b00      	cmp	r3, #0
 8007fda:	f000 810a 	beq.w	80081f2 <HAL_RCCEx_GetPLL2ClockFreq+0x262>
  {
    switch (pllsource)
 8007fde:	69bb      	ldr	r3, [r7, #24]
 8007fe0:	2b01      	cmp	r3, #1
 8007fe2:	d05a      	beq.n	800809a <HAL_RCCEx_GetPLL2ClockFreq+0x10a>
 8007fe4:	2b01      	cmp	r3, #1
 8007fe6:	d302      	bcc.n	8007fee <HAL_RCCEx_GetPLL2ClockFreq+0x5e>
 8007fe8:	2b02      	cmp	r3, #2
 8007fea:	d078      	beq.n	80080de <HAL_RCCEx_GetPLL2ClockFreq+0x14e>
 8007fec:	e099      	b.n	8008122 <HAL_RCCEx_GetPLL2ClockFreq+0x192>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007fee:	4b88      	ldr	r3, [pc, #544]	; (8008210 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8007ff0:	681b      	ldr	r3, [r3, #0]
 8007ff2:	f003 0320 	and.w	r3, r3, #32
 8007ff6:	2b00      	cmp	r3, #0
 8007ff8:	d02d      	beq.n	8008056 <HAL_RCCEx_GetPLL2ClockFreq+0xc6>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8007ffa:	4b85      	ldr	r3, [pc, #532]	; (8008210 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8007ffc:	681b      	ldr	r3, [r3, #0]
 8007ffe:	08db      	lsrs	r3, r3, #3
 8008000:	f003 0303 	and.w	r3, r3, #3
 8008004:	4a83      	ldr	r2, [pc, #524]	; (8008214 <HAL_RCCEx_GetPLL2ClockFreq+0x284>)
 8008006:	fa22 f303 	lsr.w	r3, r2, r3
 800800a:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800800c:	68bb      	ldr	r3, [r7, #8]
 800800e:	ee07 3a90 	vmov	s15, r3
 8008012:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008016:	697b      	ldr	r3, [r7, #20]
 8008018:	ee07 3a90 	vmov	s15, r3
 800801c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008020:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008024:	4b7a      	ldr	r3, [pc, #488]	; (8008210 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8008026:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008028:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800802c:	ee07 3a90 	vmov	s15, r3
 8008030:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008034:	ed97 6a03 	vldr	s12, [r7, #12]
 8008038:	eddf 5a77 	vldr	s11, [pc, #476]	; 8008218 <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 800803c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008040:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008044:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008048:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800804c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008050:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8008054:	e087      	b.n	8008166 <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8008056:	697b      	ldr	r3, [r7, #20]
 8008058:	ee07 3a90 	vmov	s15, r3
 800805c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008060:	eddf 6a6e 	vldr	s13, [pc, #440]	; 800821c <HAL_RCCEx_GetPLL2ClockFreq+0x28c>
 8008064:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008068:	4b69      	ldr	r3, [pc, #420]	; (8008210 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 800806a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800806c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008070:	ee07 3a90 	vmov	s15, r3
 8008074:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008078:	ed97 6a03 	vldr	s12, [r7, #12]
 800807c:	eddf 5a66 	vldr	s11, [pc, #408]	; 8008218 <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 8008080:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008084:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008088:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800808c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008090:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008094:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8008098:	e065      	b.n	8008166 <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800809a:	697b      	ldr	r3, [r7, #20]
 800809c:	ee07 3a90 	vmov	s15, r3
 80080a0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80080a4:	eddf 6a5e 	vldr	s13, [pc, #376]	; 8008220 <HAL_RCCEx_GetPLL2ClockFreq+0x290>
 80080a8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80080ac:	4b58      	ldr	r3, [pc, #352]	; (8008210 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 80080ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80080b0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80080b4:	ee07 3a90 	vmov	s15, r3
 80080b8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80080bc:	ed97 6a03 	vldr	s12, [r7, #12]
 80080c0:	eddf 5a55 	vldr	s11, [pc, #340]	; 8008218 <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 80080c4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80080c8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80080cc:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80080d0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80080d4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80080d8:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80080dc:	e043      	b.n	8008166 <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80080de:	697b      	ldr	r3, [r7, #20]
 80080e0:	ee07 3a90 	vmov	s15, r3
 80080e4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80080e8:	eddf 6a4e 	vldr	s13, [pc, #312]	; 8008224 <HAL_RCCEx_GetPLL2ClockFreq+0x294>
 80080ec:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80080f0:	4b47      	ldr	r3, [pc, #284]	; (8008210 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 80080f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80080f4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80080f8:	ee07 3a90 	vmov	s15, r3
 80080fc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008100:	ed97 6a03 	vldr	s12, [r7, #12]
 8008104:	eddf 5a44 	vldr	s11, [pc, #272]	; 8008218 <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 8008108:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800810c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008110:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008114:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008118:	ee67 7a27 	vmul.f32	s15, s14, s15
 800811c:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8008120:	e021      	b.n	8008166 <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8008122:	697b      	ldr	r3, [r7, #20]
 8008124:	ee07 3a90 	vmov	s15, r3
 8008128:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800812c:	eddf 6a3c 	vldr	s13, [pc, #240]	; 8008220 <HAL_RCCEx_GetPLL2ClockFreq+0x290>
 8008130:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008134:	4b36      	ldr	r3, [pc, #216]	; (8008210 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8008136:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008138:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800813c:	ee07 3a90 	vmov	s15, r3
 8008140:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008144:	ed97 6a03 	vldr	s12, [r7, #12]
 8008148:	eddf 5a33 	vldr	s11, [pc, #204]	; 8008218 <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 800814c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008150:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008154:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008158:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800815c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008160:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8008164:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 8008166:	4b2a      	ldr	r3, [pc, #168]	; (8008210 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8008168:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800816a:	0a5b      	lsrs	r3, r3, #9
 800816c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008170:	ee07 3a90 	vmov	s15, r3
 8008174:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008178:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800817c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008180:	edd7 6a07 	vldr	s13, [r7, #28]
 8008184:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008188:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800818c:	ee17 2a90 	vmov	r2, s15
 8008190:	687b      	ldr	r3, [r7, #4]
 8008192:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 8008194:	4b1e      	ldr	r3, [pc, #120]	; (8008210 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8008196:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008198:	0c1b      	lsrs	r3, r3, #16
 800819a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800819e:	ee07 3a90 	vmov	s15, r3
 80081a2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80081a6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80081aa:	ee37 7a87 	vadd.f32	s14, s15, s14
 80081ae:	edd7 6a07 	vldr	s13, [r7, #28]
 80081b2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80081b6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80081ba:	ee17 2a90 	vmov	r2, s15
 80081be:	687b      	ldr	r3, [r7, #4]
 80081c0:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 80081c2:	4b13      	ldr	r3, [pc, #76]	; (8008210 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 80081c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80081c6:	0e1b      	lsrs	r3, r3, #24
 80081c8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80081cc:	ee07 3a90 	vmov	s15, r3
 80081d0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80081d4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80081d8:	ee37 7a87 	vadd.f32	s14, s15, s14
 80081dc:	edd7 6a07 	vldr	s13, [r7, #28]
 80081e0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80081e4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80081e8:	ee17 2a90 	vmov	r2, s15
 80081ec:	687b      	ldr	r3, [r7, #4]
 80081ee:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 80081f0:	e008      	b.n	8008204 <HAL_RCCEx_GetPLL2ClockFreq+0x274>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 80081f2:	687b      	ldr	r3, [r7, #4]
 80081f4:	2200      	movs	r2, #0
 80081f6:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 80081f8:	687b      	ldr	r3, [r7, #4]
 80081fa:	2200      	movs	r2, #0
 80081fc:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 80081fe:	687b      	ldr	r3, [r7, #4]
 8008200:	2200      	movs	r2, #0
 8008202:	609a      	str	r2, [r3, #8]
}
 8008204:	bf00      	nop
 8008206:	3724      	adds	r7, #36	; 0x24
 8008208:	46bd      	mov	sp, r7
 800820a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800820e:	4770      	bx	lr
 8008210:	58024400 	.word	0x58024400
 8008214:	03d09000 	.word	0x03d09000
 8008218:	46000000 	.word	0x46000000
 800821c:	4c742400 	.word	0x4c742400
 8008220:	4a742400 	.word	0x4a742400
 8008224:	4bbebc20 	.word	0x4bbebc20

08008228 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 8008228:	b480      	push	{r7}
 800822a:	b089      	sub	sp, #36	; 0x24
 800822c:	af00      	add	r7, sp, #0
 800822e:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8008230:	4b9d      	ldr	r3, [pc, #628]	; (80084a8 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8008232:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008234:	f003 0303 	and.w	r3, r3, #3
 8008238:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 800823a:	4b9b      	ldr	r3, [pc, #620]	; (80084a8 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 800823c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800823e:	0d1b      	lsrs	r3, r3, #20
 8008240:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008244:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8008246:	4b98      	ldr	r3, [pc, #608]	; (80084a8 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8008248:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800824a:	0a1b      	lsrs	r3, r3, #8
 800824c:	f003 0301 	and.w	r3, r3, #1
 8008250:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 8008252:	4b95      	ldr	r3, [pc, #596]	; (80084a8 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8008254:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008256:	08db      	lsrs	r3, r3, #3
 8008258:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800825c:	693a      	ldr	r2, [r7, #16]
 800825e:	fb02 f303 	mul.w	r3, r2, r3
 8008262:	ee07 3a90 	vmov	s15, r3
 8008266:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800826a:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 800826e:	697b      	ldr	r3, [r7, #20]
 8008270:	2b00      	cmp	r3, #0
 8008272:	f000 810a 	beq.w	800848a <HAL_RCCEx_GetPLL3ClockFreq+0x262>
  {
    switch (pllsource)
 8008276:	69bb      	ldr	r3, [r7, #24]
 8008278:	2b01      	cmp	r3, #1
 800827a:	d05a      	beq.n	8008332 <HAL_RCCEx_GetPLL3ClockFreq+0x10a>
 800827c:	2b01      	cmp	r3, #1
 800827e:	d302      	bcc.n	8008286 <HAL_RCCEx_GetPLL3ClockFreq+0x5e>
 8008280:	2b02      	cmp	r3, #2
 8008282:	d078      	beq.n	8008376 <HAL_RCCEx_GetPLL3ClockFreq+0x14e>
 8008284:	e099      	b.n	80083ba <HAL_RCCEx_GetPLL3ClockFreq+0x192>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008286:	4b88      	ldr	r3, [pc, #544]	; (80084a8 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8008288:	681b      	ldr	r3, [r3, #0]
 800828a:	f003 0320 	and.w	r3, r3, #32
 800828e:	2b00      	cmp	r3, #0
 8008290:	d02d      	beq.n	80082ee <HAL_RCCEx_GetPLL3ClockFreq+0xc6>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8008292:	4b85      	ldr	r3, [pc, #532]	; (80084a8 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8008294:	681b      	ldr	r3, [r3, #0]
 8008296:	08db      	lsrs	r3, r3, #3
 8008298:	f003 0303 	and.w	r3, r3, #3
 800829c:	4a83      	ldr	r2, [pc, #524]	; (80084ac <HAL_RCCEx_GetPLL3ClockFreq+0x284>)
 800829e:	fa22 f303 	lsr.w	r3, r2, r3
 80082a2:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80082a4:	68bb      	ldr	r3, [r7, #8]
 80082a6:	ee07 3a90 	vmov	s15, r3
 80082aa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80082ae:	697b      	ldr	r3, [r7, #20]
 80082b0:	ee07 3a90 	vmov	s15, r3
 80082b4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80082b8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80082bc:	4b7a      	ldr	r3, [pc, #488]	; (80084a8 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 80082be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80082c0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80082c4:	ee07 3a90 	vmov	s15, r3
 80082c8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80082cc:	ed97 6a03 	vldr	s12, [r7, #12]
 80082d0:	eddf 5a77 	vldr	s11, [pc, #476]	; 80084b0 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 80082d4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80082d8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80082dc:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80082e0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80082e4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80082e8:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 80082ec:	e087      	b.n	80083fe <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80082ee:	697b      	ldr	r3, [r7, #20]
 80082f0:	ee07 3a90 	vmov	s15, r3
 80082f4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80082f8:	eddf 6a6e 	vldr	s13, [pc, #440]	; 80084b4 <HAL_RCCEx_GetPLL3ClockFreq+0x28c>
 80082fc:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008300:	4b69      	ldr	r3, [pc, #420]	; (80084a8 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8008302:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008304:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008308:	ee07 3a90 	vmov	s15, r3
 800830c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008310:	ed97 6a03 	vldr	s12, [r7, #12]
 8008314:	eddf 5a66 	vldr	s11, [pc, #408]	; 80084b0 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 8008318:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800831c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008320:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008324:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008328:	ee67 7a27 	vmul.f32	s15, s14, s15
 800832c:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8008330:	e065      	b.n	80083fe <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8008332:	697b      	ldr	r3, [r7, #20]
 8008334:	ee07 3a90 	vmov	s15, r3
 8008338:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800833c:	eddf 6a5e 	vldr	s13, [pc, #376]	; 80084b8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>
 8008340:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008344:	4b58      	ldr	r3, [pc, #352]	; (80084a8 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8008346:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008348:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800834c:	ee07 3a90 	vmov	s15, r3
 8008350:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008354:	ed97 6a03 	vldr	s12, [r7, #12]
 8008358:	eddf 5a55 	vldr	s11, [pc, #340]	; 80084b0 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 800835c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008360:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008364:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008368:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800836c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008370:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8008374:	e043      	b.n	80083fe <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8008376:	697b      	ldr	r3, [r7, #20]
 8008378:	ee07 3a90 	vmov	s15, r3
 800837c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008380:	eddf 6a4e 	vldr	s13, [pc, #312]	; 80084bc <HAL_RCCEx_GetPLL3ClockFreq+0x294>
 8008384:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008388:	4b47      	ldr	r3, [pc, #284]	; (80084a8 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 800838a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800838c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008390:	ee07 3a90 	vmov	s15, r3
 8008394:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008398:	ed97 6a03 	vldr	s12, [r7, #12]
 800839c:	eddf 5a44 	vldr	s11, [pc, #272]	; 80084b0 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 80083a0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80083a4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80083a8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80083ac:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80083b0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80083b4:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80083b8:	e021      	b.n	80083fe <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80083ba:	697b      	ldr	r3, [r7, #20]
 80083bc:	ee07 3a90 	vmov	s15, r3
 80083c0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80083c4:	eddf 6a3c 	vldr	s13, [pc, #240]	; 80084b8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>
 80083c8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80083cc:	4b36      	ldr	r3, [pc, #216]	; (80084a8 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 80083ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80083d0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80083d4:	ee07 3a90 	vmov	s15, r3
 80083d8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80083dc:	ed97 6a03 	vldr	s12, [r7, #12]
 80083e0:	eddf 5a33 	vldr	s11, [pc, #204]	; 80084b0 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 80083e4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80083e8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80083ec:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80083f0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80083f4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80083f8:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80083fc:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 80083fe:	4b2a      	ldr	r3, [pc, #168]	; (80084a8 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8008400:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008402:	0a5b      	lsrs	r3, r3, #9
 8008404:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008408:	ee07 3a90 	vmov	s15, r3
 800840c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008410:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008414:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008418:	edd7 6a07 	vldr	s13, [r7, #28]
 800841c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008420:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008424:	ee17 2a90 	vmov	r2, s15
 8008428:	687b      	ldr	r3, [r7, #4]
 800842a:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 800842c:	4b1e      	ldr	r3, [pc, #120]	; (80084a8 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 800842e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008430:	0c1b      	lsrs	r3, r3, #16
 8008432:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008436:	ee07 3a90 	vmov	s15, r3
 800843a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800843e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008442:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008446:	edd7 6a07 	vldr	s13, [r7, #28]
 800844a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800844e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008452:	ee17 2a90 	vmov	r2, s15
 8008456:	687b      	ldr	r3, [r7, #4]
 8008458:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 800845a:	4b13      	ldr	r3, [pc, #76]	; (80084a8 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 800845c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800845e:	0e1b      	lsrs	r3, r3, #24
 8008460:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008464:	ee07 3a90 	vmov	s15, r3
 8008468:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800846c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008470:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008474:	edd7 6a07 	vldr	s13, [r7, #28]
 8008478:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800847c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008480:	ee17 2a90 	vmov	r2, s15
 8008484:	687b      	ldr	r3, [r7, #4]
 8008486:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8008488:	e008      	b.n	800849c <HAL_RCCEx_GetPLL3ClockFreq+0x274>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 800848a:	687b      	ldr	r3, [r7, #4]
 800848c:	2200      	movs	r2, #0
 800848e:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8008490:	687b      	ldr	r3, [r7, #4]
 8008492:	2200      	movs	r2, #0
 8008494:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8008496:	687b      	ldr	r3, [r7, #4]
 8008498:	2200      	movs	r2, #0
 800849a:	609a      	str	r2, [r3, #8]
}
 800849c:	bf00      	nop
 800849e:	3724      	adds	r7, #36	; 0x24
 80084a0:	46bd      	mov	sp, r7
 80084a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084a6:	4770      	bx	lr
 80084a8:	58024400 	.word	0x58024400
 80084ac:	03d09000 	.word	0x03d09000
 80084b0:	46000000 	.word	0x46000000
 80084b4:	4c742400 	.word	0x4c742400
 80084b8:	4a742400 	.word	0x4a742400
 80084bc:	4bbebc20 	.word	0x4bbebc20

080084c0 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef* PLL1_Clocks)
{
 80084c0:	b480      	push	{r7}
 80084c2:	b089      	sub	sp, #36	; 0x24
 80084c4:	af00      	add	r7, sp, #0
 80084c6:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80084c8:	4b9d      	ldr	r3, [pc, #628]	; (8008740 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 80084ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80084cc:	f003 0303 	and.w	r3, r3, #3
 80084d0:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4);
 80084d2:	4b9b      	ldr	r3, [pc, #620]	; (8008740 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 80084d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80084d6:	091b      	lsrs	r3, r3, #4
 80084d8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80084dc:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 80084de:	4b98      	ldr	r3, [pc, #608]	; (8008740 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 80084e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80084e2:	f003 0301 	and.w	r3, r3, #1
 80084e6:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 80084e8:	4b95      	ldr	r3, [pc, #596]	; (8008740 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 80084ea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80084ec:	08db      	lsrs	r3, r3, #3
 80084ee:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80084f2:	693a      	ldr	r2, [r7, #16]
 80084f4:	fb02 f303 	mul.w	r3, r2, r3
 80084f8:	ee07 3a90 	vmov	s15, r3
 80084fc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008500:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 8008504:	697b      	ldr	r3, [r7, #20]
 8008506:	2b00      	cmp	r3, #0
 8008508:	f000 810a 	beq.w	8008720 <HAL_RCCEx_GetPLL1ClockFreq+0x260>
  {
    switch (pllsource)
 800850c:	69bb      	ldr	r3, [r7, #24]
 800850e:	2b01      	cmp	r3, #1
 8008510:	d05a      	beq.n	80085c8 <HAL_RCCEx_GetPLL1ClockFreq+0x108>
 8008512:	2b01      	cmp	r3, #1
 8008514:	d302      	bcc.n	800851c <HAL_RCCEx_GetPLL1ClockFreq+0x5c>
 8008516:	2b02      	cmp	r3, #2
 8008518:	d078      	beq.n	800860c <HAL_RCCEx_GetPLL1ClockFreq+0x14c>
 800851a:	e099      	b.n	8008650 <HAL_RCCEx_GetPLL1ClockFreq+0x190>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800851c:	4b88      	ldr	r3, [pc, #544]	; (8008740 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 800851e:	681b      	ldr	r3, [r3, #0]
 8008520:	f003 0320 	and.w	r3, r3, #32
 8008524:	2b00      	cmp	r3, #0
 8008526:	d02d      	beq.n	8008584 <HAL_RCCEx_GetPLL1ClockFreq+0xc4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8008528:	4b85      	ldr	r3, [pc, #532]	; (8008740 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 800852a:	681b      	ldr	r3, [r3, #0]
 800852c:	08db      	lsrs	r3, r3, #3
 800852e:	f003 0303 	and.w	r3, r3, #3
 8008532:	4a84      	ldr	r2, [pc, #528]	; (8008744 <HAL_RCCEx_GetPLL1ClockFreq+0x284>)
 8008534:	fa22 f303 	lsr.w	r3, r2, r3
 8008538:	60bb      	str	r3, [r7, #8]
        pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800853a:	68bb      	ldr	r3, [r7, #8]
 800853c:	ee07 3a90 	vmov	s15, r3
 8008540:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008544:	697b      	ldr	r3, [r7, #20]
 8008546:	ee07 3a90 	vmov	s15, r3
 800854a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800854e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008552:	4b7b      	ldr	r3, [pc, #492]	; (8008740 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 8008554:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008556:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800855a:	ee07 3a90 	vmov	s15, r3
 800855e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008562:	ed97 6a03 	vldr	s12, [r7, #12]
 8008566:	eddf 5a78 	vldr	s11, [pc, #480]	; 8008748 <HAL_RCCEx_GetPLL1ClockFreq+0x288>
 800856a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800856e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008572:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008576:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800857a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800857e:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8008582:	e087      	b.n	8008694 <HAL_RCCEx_GetPLL1ClockFreq+0x1d4>
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8008584:	697b      	ldr	r3, [r7, #20]
 8008586:	ee07 3a90 	vmov	s15, r3
 800858a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800858e:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800874c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>
 8008592:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008596:	4b6a      	ldr	r3, [pc, #424]	; (8008740 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 8008598:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800859a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800859e:	ee07 3a90 	vmov	s15, r3
 80085a2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80085a6:	ed97 6a03 	vldr	s12, [r7, #12]
 80085aa:	eddf 5a67 	vldr	s11, [pc, #412]	; 8008748 <HAL_RCCEx_GetPLL1ClockFreq+0x288>
 80085ae:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80085b2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80085b6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80085ba:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80085be:	ee67 7a27 	vmul.f32	s15, s14, s15
 80085c2:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80085c6:	e065      	b.n	8008694 <HAL_RCCEx_GetPLL1ClockFreq+0x1d4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80085c8:	697b      	ldr	r3, [r7, #20]
 80085ca:	ee07 3a90 	vmov	s15, r3
 80085ce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80085d2:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8008750 <HAL_RCCEx_GetPLL1ClockFreq+0x290>
 80085d6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80085da:	4b59      	ldr	r3, [pc, #356]	; (8008740 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 80085dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80085de:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80085e2:	ee07 3a90 	vmov	s15, r3
 80085e6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80085ea:	ed97 6a03 	vldr	s12, [r7, #12]
 80085ee:	eddf 5a56 	vldr	s11, [pc, #344]	; 8008748 <HAL_RCCEx_GetPLL1ClockFreq+0x288>
 80085f2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80085f6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80085fa:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80085fe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008602:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008606:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800860a:	e043      	b.n	8008694 <HAL_RCCEx_GetPLL1ClockFreq+0x1d4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800860c:	697b      	ldr	r3, [r7, #20]
 800860e:	ee07 3a90 	vmov	s15, r3
 8008612:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008616:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8008754 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800861a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800861e:	4b48      	ldr	r3, [pc, #288]	; (8008740 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 8008620:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008622:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008626:	ee07 3a90 	vmov	s15, r3
 800862a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800862e:	ed97 6a03 	vldr	s12, [r7, #12]
 8008632:	eddf 5a45 	vldr	s11, [pc, #276]	; 8008748 <HAL_RCCEx_GetPLL1ClockFreq+0x288>
 8008636:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800863a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800863e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008642:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008646:	ee67 7a27 	vmul.f32	s15, s14, s15
 800864a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800864e:	e021      	b.n	8008694 <HAL_RCCEx_GetPLL1ClockFreq+0x1d4>

    default:
      pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8008650:	697b      	ldr	r3, [r7, #20]
 8008652:	ee07 3a90 	vmov	s15, r3
 8008656:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800865a:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8008750 <HAL_RCCEx_GetPLL1ClockFreq+0x290>
 800865e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008662:	4b37      	ldr	r3, [pc, #220]	; (8008740 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 8008664:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008666:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800866a:	ee07 3a90 	vmov	s15, r3
 800866e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008672:	ed97 6a03 	vldr	s12, [r7, #12]
 8008676:	eddf 5a34 	vldr	s11, [pc, #208]	; 8008748 <HAL_RCCEx_GetPLL1ClockFreq+0x288>
 800867a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800867e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008682:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008686:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800868a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800868e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8008692:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9)  + (float_t)1 )) ;
 8008694:	4b2a      	ldr	r3, [pc, #168]	; (8008740 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 8008696:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008698:	0a5b      	lsrs	r3, r3, #9
 800869a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800869e:	ee07 3a90 	vmov	s15, r3
 80086a2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80086a6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80086aa:	ee37 7a87 	vadd.f32	s14, s15, s14
 80086ae:	edd7 6a07 	vldr	s13, [r7, #28]
 80086b2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80086b6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80086ba:	ee17 2a90 	vmov	r2, s15
 80086be:	687b      	ldr	r3, [r7, #4]
 80086c0:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >>16) + (float_t)1 )) ;
 80086c2:	4b1f      	ldr	r3, [pc, #124]	; (8008740 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 80086c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80086c6:	0c1b      	lsrs	r3, r3, #16
 80086c8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80086cc:	ee07 3a90 	vmov	s15, r3
 80086d0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80086d4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80086d8:	ee37 7a87 	vadd.f32	s14, s15, s14
 80086dc:	edd7 6a07 	vldr	s13, [r7, #28]
 80086e0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80086e4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80086e8:	ee17 2a90 	vmov	r2, s15
 80086ec:	687b      	ldr	r3, [r7, #4]
 80086ee:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >>24) + (float_t)1 )) ;
 80086f0:	4b13      	ldr	r3, [pc, #76]	; (8008740 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 80086f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80086f4:	0e1b      	lsrs	r3, r3, #24
 80086f6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80086fa:	ee07 3a90 	vmov	s15, r3
 80086fe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008702:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008706:	ee37 7a87 	vadd.f32	s14, s15, s14
 800870a:	edd7 6a07 	vldr	s13, [r7, #28]
 800870e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008712:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008716:	ee17 2a90 	vmov	r2, s15
 800871a:	687b      	ldr	r3, [r7, #4]
 800871c:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 800871e:	e008      	b.n	8008732 <HAL_RCCEx_GetPLL1ClockFreq+0x272>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 8008720:	687b      	ldr	r3, [r7, #4]
 8008722:	2200      	movs	r2, #0
 8008724:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 8008726:	687b      	ldr	r3, [r7, #4]
 8008728:	2200      	movs	r2, #0
 800872a:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 800872c:	687b      	ldr	r3, [r7, #4]
 800872e:	2200      	movs	r2, #0
 8008730:	609a      	str	r2, [r3, #8]
}
 8008732:	bf00      	nop
 8008734:	3724      	adds	r7, #36	; 0x24
 8008736:	46bd      	mov	sp, r7
 8008738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800873c:	4770      	bx	lr
 800873e:	bf00      	nop
 8008740:	58024400 	.word	0x58024400
 8008744:	03d09000 	.word	0x03d09000
 8008748:	46000000 	.word	0x46000000
 800874c:	4c742400 	.word	0x4c742400
 8008750:	4a742400 	.word	0x4a742400
 8008754:	4bbebc20 	.word	0x4bbebc20

08008758 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8008758:	b580      	push	{r7, lr}
 800875a:	b084      	sub	sp, #16
 800875c:	af00      	add	r7, sp, #0
 800875e:	6078      	str	r0, [r7, #4]
 8008760:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8008762:	2300      	movs	r3, #0
 8008764:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8008766:	4b53      	ldr	r3, [pc, #332]	; (80088b4 <RCCEx_PLL2_Config+0x15c>)
 8008768:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800876a:	f003 0303 	and.w	r3, r3, #3
 800876e:	2b03      	cmp	r3, #3
 8008770:	d101      	bne.n	8008776 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8008772:	2301      	movs	r3, #1
 8008774:	e099      	b.n	80088aa <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8008776:	4b4f      	ldr	r3, [pc, #316]	; (80088b4 <RCCEx_PLL2_Config+0x15c>)
 8008778:	681b      	ldr	r3, [r3, #0]
 800877a:	4a4e      	ldr	r2, [pc, #312]	; (80088b4 <RCCEx_PLL2_Config+0x15c>)
 800877c:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8008780:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008782:	f7f9 f91d 	bl	80019c0 <HAL_GetTick>
 8008786:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8008788:	e008      	b.n	800879c <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 800878a:	f7f9 f919 	bl	80019c0 <HAL_GetTick>
 800878e:	4602      	mov	r2, r0
 8008790:	68bb      	ldr	r3, [r7, #8]
 8008792:	1ad3      	subs	r3, r2, r3
 8008794:	2b02      	cmp	r3, #2
 8008796:	d901      	bls.n	800879c <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8008798:	2303      	movs	r3, #3
 800879a:	e086      	b.n	80088aa <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800879c:	4b45      	ldr	r3, [pc, #276]	; (80088b4 <RCCEx_PLL2_Config+0x15c>)
 800879e:	681b      	ldr	r3, [r3, #0]
 80087a0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80087a4:	2b00      	cmp	r3, #0
 80087a6:	d1f0      	bne.n	800878a <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 80087a8:	4b42      	ldr	r3, [pc, #264]	; (80088b4 <RCCEx_PLL2_Config+0x15c>)
 80087aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80087ac:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 80087b0:	687b      	ldr	r3, [r7, #4]
 80087b2:	681b      	ldr	r3, [r3, #0]
 80087b4:	031b      	lsls	r3, r3, #12
 80087b6:	493f      	ldr	r1, [pc, #252]	; (80088b4 <RCCEx_PLL2_Config+0x15c>)
 80087b8:	4313      	orrs	r3, r2
 80087ba:	628b      	str	r3, [r1, #40]	; 0x28
 80087bc:	687b      	ldr	r3, [r7, #4]
 80087be:	685b      	ldr	r3, [r3, #4]
 80087c0:	3b01      	subs	r3, #1
 80087c2:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80087c6:	687b      	ldr	r3, [r7, #4]
 80087c8:	689b      	ldr	r3, [r3, #8]
 80087ca:	3b01      	subs	r3, #1
 80087cc:	025b      	lsls	r3, r3, #9
 80087ce:	b29b      	uxth	r3, r3
 80087d0:	431a      	orrs	r2, r3
 80087d2:	687b      	ldr	r3, [r7, #4]
 80087d4:	68db      	ldr	r3, [r3, #12]
 80087d6:	3b01      	subs	r3, #1
 80087d8:	041b      	lsls	r3, r3, #16
 80087da:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80087de:	431a      	orrs	r2, r3
 80087e0:	687b      	ldr	r3, [r7, #4]
 80087e2:	691b      	ldr	r3, [r3, #16]
 80087e4:	3b01      	subs	r3, #1
 80087e6:	061b      	lsls	r3, r3, #24
 80087e8:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80087ec:	4931      	ldr	r1, [pc, #196]	; (80088b4 <RCCEx_PLL2_Config+0x15c>)
 80087ee:	4313      	orrs	r3, r2
 80087f0:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 80087f2:	4b30      	ldr	r3, [pc, #192]	; (80088b4 <RCCEx_PLL2_Config+0x15c>)
 80087f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80087f6:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80087fa:	687b      	ldr	r3, [r7, #4]
 80087fc:	695b      	ldr	r3, [r3, #20]
 80087fe:	492d      	ldr	r1, [pc, #180]	; (80088b4 <RCCEx_PLL2_Config+0x15c>)
 8008800:	4313      	orrs	r3, r2
 8008802:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8008804:	4b2b      	ldr	r3, [pc, #172]	; (80088b4 <RCCEx_PLL2_Config+0x15c>)
 8008806:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008808:	f023 0220 	bic.w	r2, r3, #32
 800880c:	687b      	ldr	r3, [r7, #4]
 800880e:	699b      	ldr	r3, [r3, #24]
 8008810:	4928      	ldr	r1, [pc, #160]	; (80088b4 <RCCEx_PLL2_Config+0x15c>)
 8008812:	4313      	orrs	r3, r2
 8008814:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8008816:	4b27      	ldr	r3, [pc, #156]	; (80088b4 <RCCEx_PLL2_Config+0x15c>)
 8008818:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800881a:	4a26      	ldr	r2, [pc, #152]	; (80088b4 <RCCEx_PLL2_Config+0x15c>)
 800881c:	f023 0310 	bic.w	r3, r3, #16
 8008820:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8008822:	4b24      	ldr	r3, [pc, #144]	; (80088b4 <RCCEx_PLL2_Config+0x15c>)
 8008824:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008826:	4b24      	ldr	r3, [pc, #144]	; (80088b8 <RCCEx_PLL2_Config+0x160>)
 8008828:	4013      	ands	r3, r2
 800882a:	687a      	ldr	r2, [r7, #4]
 800882c:	69d2      	ldr	r2, [r2, #28]
 800882e:	00d2      	lsls	r2, r2, #3
 8008830:	4920      	ldr	r1, [pc, #128]	; (80088b4 <RCCEx_PLL2_Config+0x15c>)
 8008832:	4313      	orrs	r3, r2
 8008834:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8008836:	4b1f      	ldr	r3, [pc, #124]	; (80088b4 <RCCEx_PLL2_Config+0x15c>)
 8008838:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800883a:	4a1e      	ldr	r2, [pc, #120]	; (80088b4 <RCCEx_PLL2_Config+0x15c>)
 800883c:	f043 0310 	orr.w	r3, r3, #16
 8008840:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8008842:	683b      	ldr	r3, [r7, #0]
 8008844:	2b00      	cmp	r3, #0
 8008846:	d106      	bne.n	8008856 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8008848:	4b1a      	ldr	r3, [pc, #104]	; (80088b4 <RCCEx_PLL2_Config+0x15c>)
 800884a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800884c:	4a19      	ldr	r2, [pc, #100]	; (80088b4 <RCCEx_PLL2_Config+0x15c>)
 800884e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8008852:	62d3      	str	r3, [r2, #44]	; 0x2c
 8008854:	e00f      	b.n	8008876 <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8008856:	683b      	ldr	r3, [r7, #0]
 8008858:	2b01      	cmp	r3, #1
 800885a:	d106      	bne.n	800886a <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800885c:	4b15      	ldr	r3, [pc, #84]	; (80088b4 <RCCEx_PLL2_Config+0x15c>)
 800885e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008860:	4a14      	ldr	r2, [pc, #80]	; (80088b4 <RCCEx_PLL2_Config+0x15c>)
 8008862:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8008866:	62d3      	str	r3, [r2, #44]	; 0x2c
 8008868:	e005      	b.n	8008876 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800886a:	4b12      	ldr	r3, [pc, #72]	; (80088b4 <RCCEx_PLL2_Config+0x15c>)
 800886c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800886e:	4a11      	ldr	r2, [pc, #68]	; (80088b4 <RCCEx_PLL2_Config+0x15c>)
 8008870:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8008874:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8008876:	4b0f      	ldr	r3, [pc, #60]	; (80088b4 <RCCEx_PLL2_Config+0x15c>)
 8008878:	681b      	ldr	r3, [r3, #0]
 800887a:	4a0e      	ldr	r2, [pc, #56]	; (80088b4 <RCCEx_PLL2_Config+0x15c>)
 800887c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8008880:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008882:	f7f9 f89d 	bl	80019c0 <HAL_GetTick>
 8008886:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8008888:	e008      	b.n	800889c <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 800888a:	f7f9 f899 	bl	80019c0 <HAL_GetTick>
 800888e:	4602      	mov	r2, r0
 8008890:	68bb      	ldr	r3, [r7, #8]
 8008892:	1ad3      	subs	r3, r2, r3
 8008894:	2b02      	cmp	r3, #2
 8008896:	d901      	bls.n	800889c <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8008898:	2303      	movs	r3, #3
 800889a:	e006      	b.n	80088aa <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800889c:	4b05      	ldr	r3, [pc, #20]	; (80088b4 <RCCEx_PLL2_Config+0x15c>)
 800889e:	681b      	ldr	r3, [r3, #0]
 80088a0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80088a4:	2b00      	cmp	r3, #0
 80088a6:	d0f0      	beq.n	800888a <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 80088a8:	7bfb      	ldrb	r3, [r7, #15]
}
 80088aa:	4618      	mov	r0, r3
 80088ac:	3710      	adds	r7, #16
 80088ae:	46bd      	mov	sp, r7
 80088b0:	bd80      	pop	{r7, pc}
 80088b2:	bf00      	nop
 80088b4:	58024400 	.word	0x58024400
 80088b8:	ffff0007 	.word	0xffff0007

080088bc <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 80088bc:	b580      	push	{r7, lr}
 80088be:	b084      	sub	sp, #16
 80088c0:	af00      	add	r7, sp, #0
 80088c2:	6078      	str	r0, [r7, #4]
 80088c4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80088c6:	2300      	movs	r3, #0
 80088c8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80088ca:	4b53      	ldr	r3, [pc, #332]	; (8008a18 <RCCEx_PLL3_Config+0x15c>)
 80088cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80088ce:	f003 0303 	and.w	r3, r3, #3
 80088d2:	2b03      	cmp	r3, #3
 80088d4:	d101      	bne.n	80088da <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 80088d6:	2301      	movs	r3, #1
 80088d8:	e099      	b.n	8008a0e <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 80088da:	4b4f      	ldr	r3, [pc, #316]	; (8008a18 <RCCEx_PLL3_Config+0x15c>)
 80088dc:	681b      	ldr	r3, [r3, #0]
 80088de:	4a4e      	ldr	r2, [pc, #312]	; (8008a18 <RCCEx_PLL3_Config+0x15c>)
 80088e0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80088e4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80088e6:	f7f9 f86b 	bl	80019c0 <HAL_GetTick>
 80088ea:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80088ec:	e008      	b.n	8008900 <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 80088ee:	f7f9 f867 	bl	80019c0 <HAL_GetTick>
 80088f2:	4602      	mov	r2, r0
 80088f4:	68bb      	ldr	r3, [r7, #8]
 80088f6:	1ad3      	subs	r3, r2, r3
 80088f8:	2b02      	cmp	r3, #2
 80088fa:	d901      	bls.n	8008900 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 80088fc:	2303      	movs	r3, #3
 80088fe:	e086      	b.n	8008a0e <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8008900:	4b45      	ldr	r3, [pc, #276]	; (8008a18 <RCCEx_PLL3_Config+0x15c>)
 8008902:	681b      	ldr	r3, [r3, #0]
 8008904:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008908:	2b00      	cmp	r3, #0
 800890a:	d1f0      	bne.n	80088ee <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800890c:	4b42      	ldr	r3, [pc, #264]	; (8008a18 <RCCEx_PLL3_Config+0x15c>)
 800890e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008910:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8008914:	687b      	ldr	r3, [r7, #4]
 8008916:	681b      	ldr	r3, [r3, #0]
 8008918:	051b      	lsls	r3, r3, #20
 800891a:	493f      	ldr	r1, [pc, #252]	; (8008a18 <RCCEx_PLL3_Config+0x15c>)
 800891c:	4313      	orrs	r3, r2
 800891e:	628b      	str	r3, [r1, #40]	; 0x28
 8008920:	687b      	ldr	r3, [r7, #4]
 8008922:	685b      	ldr	r3, [r3, #4]
 8008924:	3b01      	subs	r3, #1
 8008926:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800892a:	687b      	ldr	r3, [r7, #4]
 800892c:	689b      	ldr	r3, [r3, #8]
 800892e:	3b01      	subs	r3, #1
 8008930:	025b      	lsls	r3, r3, #9
 8008932:	b29b      	uxth	r3, r3
 8008934:	431a      	orrs	r2, r3
 8008936:	687b      	ldr	r3, [r7, #4]
 8008938:	68db      	ldr	r3, [r3, #12]
 800893a:	3b01      	subs	r3, #1
 800893c:	041b      	lsls	r3, r3, #16
 800893e:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8008942:	431a      	orrs	r2, r3
 8008944:	687b      	ldr	r3, [r7, #4]
 8008946:	691b      	ldr	r3, [r3, #16]
 8008948:	3b01      	subs	r3, #1
 800894a:	061b      	lsls	r3, r3, #24
 800894c:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8008950:	4931      	ldr	r1, [pc, #196]	; (8008a18 <RCCEx_PLL3_Config+0x15c>)
 8008952:	4313      	orrs	r3, r2
 8008954:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8008956:	4b30      	ldr	r3, [pc, #192]	; (8008a18 <RCCEx_PLL3_Config+0x15c>)
 8008958:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800895a:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800895e:	687b      	ldr	r3, [r7, #4]
 8008960:	695b      	ldr	r3, [r3, #20]
 8008962:	492d      	ldr	r1, [pc, #180]	; (8008a18 <RCCEx_PLL3_Config+0x15c>)
 8008964:	4313      	orrs	r3, r2
 8008966:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8008968:	4b2b      	ldr	r3, [pc, #172]	; (8008a18 <RCCEx_PLL3_Config+0x15c>)
 800896a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800896c:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8008970:	687b      	ldr	r3, [r7, #4]
 8008972:	699b      	ldr	r3, [r3, #24]
 8008974:	4928      	ldr	r1, [pc, #160]	; (8008a18 <RCCEx_PLL3_Config+0x15c>)
 8008976:	4313      	orrs	r3, r2
 8008978:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800897a:	4b27      	ldr	r3, [pc, #156]	; (8008a18 <RCCEx_PLL3_Config+0x15c>)
 800897c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800897e:	4a26      	ldr	r2, [pc, #152]	; (8008a18 <RCCEx_PLL3_Config+0x15c>)
 8008980:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008984:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8008986:	4b24      	ldr	r3, [pc, #144]	; (8008a18 <RCCEx_PLL3_Config+0x15c>)
 8008988:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800898a:	4b24      	ldr	r3, [pc, #144]	; (8008a1c <RCCEx_PLL3_Config+0x160>)
 800898c:	4013      	ands	r3, r2
 800898e:	687a      	ldr	r2, [r7, #4]
 8008990:	69d2      	ldr	r2, [r2, #28]
 8008992:	00d2      	lsls	r2, r2, #3
 8008994:	4920      	ldr	r1, [pc, #128]	; (8008a18 <RCCEx_PLL3_Config+0x15c>)
 8008996:	4313      	orrs	r3, r2
 8008998:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800899a:	4b1f      	ldr	r3, [pc, #124]	; (8008a18 <RCCEx_PLL3_Config+0x15c>)
 800899c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800899e:	4a1e      	ldr	r2, [pc, #120]	; (8008a18 <RCCEx_PLL3_Config+0x15c>)
 80089a0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80089a4:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 80089a6:	683b      	ldr	r3, [r7, #0]
 80089a8:	2b00      	cmp	r3, #0
 80089aa:	d106      	bne.n	80089ba <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 80089ac:	4b1a      	ldr	r3, [pc, #104]	; (8008a18 <RCCEx_PLL3_Config+0x15c>)
 80089ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80089b0:	4a19      	ldr	r2, [pc, #100]	; (8008a18 <RCCEx_PLL3_Config+0x15c>)
 80089b2:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80089b6:	62d3      	str	r3, [r2, #44]	; 0x2c
 80089b8:	e00f      	b.n	80089da <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 80089ba:	683b      	ldr	r3, [r7, #0]
 80089bc:	2b01      	cmp	r3, #1
 80089be:	d106      	bne.n	80089ce <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 80089c0:	4b15      	ldr	r3, [pc, #84]	; (8008a18 <RCCEx_PLL3_Config+0x15c>)
 80089c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80089c4:	4a14      	ldr	r2, [pc, #80]	; (8008a18 <RCCEx_PLL3_Config+0x15c>)
 80089c6:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80089ca:	62d3      	str	r3, [r2, #44]	; 0x2c
 80089cc:	e005      	b.n	80089da <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 80089ce:	4b12      	ldr	r3, [pc, #72]	; (8008a18 <RCCEx_PLL3_Config+0x15c>)
 80089d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80089d2:	4a11      	ldr	r2, [pc, #68]	; (8008a18 <RCCEx_PLL3_Config+0x15c>)
 80089d4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80089d8:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 80089da:	4b0f      	ldr	r3, [pc, #60]	; (8008a18 <RCCEx_PLL3_Config+0x15c>)
 80089dc:	681b      	ldr	r3, [r3, #0]
 80089de:	4a0e      	ldr	r2, [pc, #56]	; (8008a18 <RCCEx_PLL3_Config+0x15c>)
 80089e0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80089e4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80089e6:	f7f8 ffeb 	bl	80019c0 <HAL_GetTick>
 80089ea:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80089ec:	e008      	b.n	8008a00 <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 80089ee:	f7f8 ffe7 	bl	80019c0 <HAL_GetTick>
 80089f2:	4602      	mov	r2, r0
 80089f4:	68bb      	ldr	r3, [r7, #8]
 80089f6:	1ad3      	subs	r3, r2, r3
 80089f8:	2b02      	cmp	r3, #2
 80089fa:	d901      	bls.n	8008a00 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 80089fc:	2303      	movs	r3, #3
 80089fe:	e006      	b.n	8008a0e <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8008a00:	4b05      	ldr	r3, [pc, #20]	; (8008a18 <RCCEx_PLL3_Config+0x15c>)
 8008a02:	681b      	ldr	r3, [r3, #0]
 8008a04:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008a08:	2b00      	cmp	r3, #0
 8008a0a:	d0f0      	beq.n	80089ee <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8008a0c:	7bfb      	ldrb	r3, [r7, #15]
}
 8008a0e:	4618      	mov	r0, r3
 8008a10:	3710      	adds	r7, #16
 8008a12:	46bd      	mov	sp, r7
 8008a14:	bd80      	pop	{r7, pc}
 8008a16:	bf00      	nop
 8008a18:	58024400 	.word	0x58024400
 8008a1c:	ffff0007 	.word	0xffff0007

08008a20 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 8008a20:	b580      	push	{r7, lr}
 8008a22:	b08a      	sub	sp, #40	; 0x28
 8008a24:	af00      	add	r7, sp, #0
 8008a26:	6078      	str	r0, [r7, #4]
  HAL_SD_CardStatusTypeDef CardStatus;
  uint32_t speedgrade, unitsize;
  uint32_t tickstart;

  /* Check the SD handle allocation */
  if(hsd == NULL)
 8008a28:	687b      	ldr	r3, [r7, #4]
 8008a2a:	2b00      	cmp	r3, #0
 8008a2c:	d101      	bne.n	8008a32 <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 8008a2e:	2301      	movs	r3, #1
 8008a30:	e07c      	b.n	8008b2c <HAL_SD_Init+0x10c>
  assert_param(IS_SDMMC_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDMMC_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 8008a32:	687b      	ldr	r3, [r7, #4]
 8008a34:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8008a38:	b2db      	uxtb	r3, r3
 8008a3a:	2b00      	cmp	r3, #0
 8008a3c:	d10c      	bne.n	8008a58 <HAL_SD_Init+0x38>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 8008a3e:	687b      	ldr	r3, [r7, #4]
 8008a40:	2200      	movs	r2, #0
 8008a42:	771a      	strb	r2, [r3, #28]

#if (USE_SD_TRANSCEIVER != 0U)
    /* Force  SDMMC_TRANSCEIVER_PRESENT for Legacy usage */
    if (hsd->Init.TranceiverPresent == SDMMC_TRANSCEIVER_UNKNOWN)
 8008a44:	687b      	ldr	r3, [r7, #4]
 8008a46:	699b      	ldr	r3, [r3, #24]
 8008a48:	2b00      	cmp	r3, #0
 8008a4a:	d102      	bne.n	8008a52 <HAL_SD_Init+0x32>
    {
      hsd->Init.TranceiverPresent = SDMMC_TRANSCEIVER_PRESENT;
 8008a4c:	687b      	ldr	r3, [r7, #4]
 8008a4e:	2202      	movs	r2, #2
 8008a50:	619a      	str	r2, [r3, #24]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 8008a52:	6878      	ldr	r0, [r7, #4]
 8008a54:	f7f8 fc2c 	bl	80012b0 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 8008a58:	687b      	ldr	r3, [r7, #4]
 8008a5a:	2203      	movs	r2, #3
 8008a5c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 8008a60:	6878      	ldr	r0, [r7, #4]
 8008a62:	f000 f867 	bl	8008b34 <HAL_SD_InitCard>
 8008a66:	4603      	mov	r3, r0
 8008a68:	2b00      	cmp	r3, #0
 8008a6a:	d001      	beq.n	8008a70 <HAL_SD_Init+0x50>
  {
    return HAL_ERROR;
 8008a6c:	2301      	movs	r3, #1
 8008a6e:	e05d      	b.n	8008b2c <HAL_SD_Init+0x10c>
  }

  if( HAL_SD_GetCardStatus(hsd, &CardStatus) != HAL_OK)
 8008a70:	f107 0308 	add.w	r3, r7, #8
 8008a74:	4619      	mov	r1, r3
 8008a76:	6878      	ldr	r0, [r7, #4]
 8008a78:	f000 fdbe 	bl	80095f8 <HAL_SD_GetCardStatus>
 8008a7c:	4603      	mov	r3, r0
 8008a7e:	2b00      	cmp	r3, #0
 8008a80:	d001      	beq.n	8008a86 <HAL_SD_Init+0x66>
  {
    return HAL_ERROR;
 8008a82:	2301      	movs	r3, #1
 8008a84:	e052      	b.n	8008b2c <HAL_SD_Init+0x10c>
  }
  /* Get Initial Card Speed from Card Status*/
  speedgrade = CardStatus.UhsSpeedGrade;
 8008a86:	7e3b      	ldrb	r3, [r7, #24]
 8008a88:	b2db      	uxtb	r3, r3
 8008a8a:	627b      	str	r3, [r7, #36]	; 0x24
  unitsize = CardStatus.UhsAllocationUnitSize;
 8008a8c:	7e7b      	ldrb	r3, [r7, #25]
 8008a8e:	b2db      	uxtb	r3, r3
 8008a90:	623b      	str	r3, [r7, #32]
  if ((hsd->SdCard.CardType == CARD_SDHC_SDXC) && ((speedgrade != 0U) || (unitsize != 0U)))
 8008a92:	687b      	ldr	r3, [r7, #4]
 8008a94:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008a96:	2b01      	cmp	r3, #1
 8008a98:	d10a      	bne.n	8008ab0 <HAL_SD_Init+0x90>
 8008a9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a9c:	2b00      	cmp	r3, #0
 8008a9e:	d102      	bne.n	8008aa6 <HAL_SD_Init+0x86>
 8008aa0:	6a3b      	ldr	r3, [r7, #32]
 8008aa2:	2b00      	cmp	r3, #0
 8008aa4:	d004      	beq.n	8008ab0 <HAL_SD_Init+0x90>
  {
    hsd->SdCard.CardSpeed = CARD_ULTRA_HIGH_SPEED;
 8008aa6:	687b      	ldr	r3, [r7, #4]
 8008aa8:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008aac:	65da      	str	r2, [r3, #92]	; 0x5c
 8008aae:	e00b      	b.n	8008ac8 <HAL_SD_Init+0xa8>
  }
  else
  {
    if (hsd->SdCard.CardType == CARD_SDHC_SDXC)
 8008ab0:	687b      	ldr	r3, [r7, #4]
 8008ab2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008ab4:	2b01      	cmp	r3, #1
 8008ab6:	d104      	bne.n	8008ac2 <HAL_SD_Init+0xa2>
    {
      hsd->SdCard.CardSpeed  = CARD_HIGH_SPEED;
 8008ab8:	687b      	ldr	r3, [r7, #4]
 8008aba:	f44f 7280 	mov.w	r2, #256	; 0x100
 8008abe:	65da      	str	r2, [r3, #92]	; 0x5c
 8008ac0:	e002      	b.n	8008ac8 <HAL_SD_Init+0xa8>
    }
    else
    {
      hsd->SdCard.CardSpeed  = CARD_NORMAL_SPEED;
 8008ac2:	687b      	ldr	r3, [r7, #4]
 8008ac4:	2200      	movs	r2, #0
 8008ac6:	65da      	str	r2, [r3, #92]	; 0x5c
    }

  }
  /* Configure the bus wide */
  if(HAL_SD_ConfigWideBusOperation(hsd, hsd->Init.BusWide) != HAL_OK)
 8008ac8:	687b      	ldr	r3, [r7, #4]
 8008aca:	68db      	ldr	r3, [r3, #12]
 8008acc:	4619      	mov	r1, r3
 8008ace:	6878      	ldr	r0, [r7, #4]
 8008ad0:	f000 fe74 	bl	80097bc <HAL_SD_ConfigWideBusOperation>
 8008ad4:	4603      	mov	r3, r0
 8008ad6:	2b00      	cmp	r3, #0
 8008ad8:	d001      	beq.n	8008ade <HAL_SD_Init+0xbe>
  {
    return HAL_ERROR;
 8008ada:	2301      	movs	r3, #1
 8008adc:	e026      	b.n	8008b2c <HAL_SD_Init+0x10c>
  }

  /* Verify that SD card is ready to use after Initialization */
  tickstart = HAL_GetTick();
 8008ade:	f7f8 ff6f 	bl	80019c0 <HAL_GetTick>
 8008ae2:	61f8      	str	r0, [r7, #28]
  while((HAL_SD_GetCardState(hsd) != HAL_SD_CARD_TRANSFER))
 8008ae4:	e011      	b.n	8008b0a <HAL_SD_Init+0xea>
  {
    if((HAL_GetTick()-tickstart) >=  SDMMC_DATATIMEOUT)
 8008ae6:	f7f8 ff6b 	bl	80019c0 <HAL_GetTick>
 8008aea:	4602      	mov	r2, r0
 8008aec:	69fb      	ldr	r3, [r7, #28]
 8008aee:	1ad3      	subs	r3, r2, r3
 8008af0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008af4:	d109      	bne.n	8008b0a <HAL_SD_Init+0xea>
    {
      hsd->ErrorCode = HAL_SD_ERROR_TIMEOUT;
 8008af6:	687b      	ldr	r3, [r7, #4]
 8008af8:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8008afc:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State= HAL_SD_STATE_READY;
 8008afe:	687b      	ldr	r3, [r7, #4]
 8008b00:	2201      	movs	r2, #1
 8008b02:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_TIMEOUT;
 8008b06:	2303      	movs	r3, #3
 8008b08:	e010      	b.n	8008b2c <HAL_SD_Init+0x10c>
  while((HAL_SD_GetCardState(hsd) != HAL_SD_CARD_TRANSFER))
 8008b0a:	6878      	ldr	r0, [r7, #4]
 8008b0c:	f000 ff00 	bl	8009910 <HAL_SD_GetCardState>
 8008b10:	4603      	mov	r3, r0
 8008b12:	2b04      	cmp	r3, #4
 8008b14:	d1e7      	bne.n	8008ae6 <HAL_SD_Init+0xc6>
    }
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8008b16:	687b      	ldr	r3, [r7, #4]
 8008b18:	2200      	movs	r2, #0
 8008b1a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 8008b1c:	687b      	ldr	r3, [r7, #4]
 8008b1e:	2200      	movs	r2, #0
 8008b20:	631a      	str	r2, [r3, #48]	; 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 8008b22:	687b      	ldr	r3, [r7, #4]
 8008b24:	2201      	movs	r2, #1
 8008b26:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8008b2a:	2300      	movs	r3, #0
}
 8008b2c:	4618      	mov	r0, r3
 8008b2e:	3728      	adds	r7, #40	; 0x28
 8008b30:	46bd      	mov	sp, r7
 8008b32:	bd80      	pop	{r7, pc}

08008b34 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 8008b34:	b5b0      	push	{r4, r5, r7, lr}
 8008b36:	b08e      	sub	sp, #56	; 0x38
 8008b38:	af04      	add	r7, sp, #16
 8008b3a:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  SD_InitTypeDef Init;
  uint32_t sdmmc_clk;

  /* Default SDMMC peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 8008b3c:	2300      	movs	r3, #0
 8008b3e:	60bb      	str	r3, [r7, #8]
  Init.ClockPowerSave      = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 8008b40:	2300      	movs	r3, #0
 8008b42:	60fb      	str	r3, [r7, #12]
  Init.BusWide             = SDMMC_BUS_WIDE_1B;
 8008b44:	2300      	movs	r3, #0
 8008b46:	613b      	str	r3, [r7, #16]
  Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 8008b48:	2300      	movs	r3, #0
 8008b4a:	617b      	str	r3, [r7, #20]

  /* Init Clock should be less or equal to 400Khz*/
  sdmmc_clk     = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC);
 8008b4c:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 8008b50:	f7fe ff90 	bl	8007a74 <HAL_RCCEx_GetPeriphCLKFreq>
 8008b54:	6278      	str	r0, [r7, #36]	; 0x24
  Init.ClockDiv = sdmmc_clk/(2U*400000U);
 8008b56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b58:	0a1b      	lsrs	r3, r3, #8
 8008b5a:	4a40      	ldr	r2, [pc, #256]	; (8008c5c <HAL_SD_InitCard+0x128>)
 8008b5c:	fba2 2303 	umull	r2, r3, r2, r3
 8008b60:	091b      	lsrs	r3, r3, #4
 8008b62:	61bb      	str	r3, [r7, #24]

#if (USE_SD_TRANSCEIVER != 0U)
  if (hsd->Init.TranceiverPresent == SDMMC_TRANSCEIVER_PRESENT)
 8008b64:	687b      	ldr	r3, [r7, #4]
 8008b66:	699b      	ldr	r3, [r3, #24]
 8008b68:	2b02      	cmp	r3, #2
 8008b6a:	d107      	bne.n	8008b7c <HAL_SD_InitCard+0x48>
  {
    /* Set Transceiver polarity */
    hsd->Instance->POWER |= SDMMC_POWER_DIRPOL;
 8008b6c:	687b      	ldr	r3, [r7, #4]
 8008b6e:	681b      	ldr	r3, [r3, #0]
 8008b70:	681a      	ldr	r2, [r3, #0]
 8008b72:	687b      	ldr	r3, [r7, #4]
 8008b74:	681b      	ldr	r3, [r3, #0]
 8008b76:	f042 0210 	orr.w	r2, r2, #16
 8008b7a:	601a      	str	r2, [r3, #0]
    /* Set Transceiver polarity */
    hsd->Instance->POWER |= SDMMC_POWER_DIRPOL;
#endif /* USE_SD_TRANSCEIVER  */

  /* Initialize SDMMC peripheral interface with default configuration */
  (void)SDMMC_Init(hsd->Instance, Init);
 8008b7c:	687b      	ldr	r3, [r7, #4]
 8008b7e:	681d      	ldr	r5, [r3, #0]
 8008b80:	466c      	mov	r4, sp
 8008b82:	f107 0314 	add.w	r3, r7, #20
 8008b86:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8008b8a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8008b8e:	f107 0308 	add.w	r3, r7, #8
 8008b92:	cb0e      	ldmia	r3, {r1, r2, r3}
 8008b94:	4628      	mov	r0, r5
 8008b96:	f002 fe8f 	bl	800b8b8 <SDMMC_Init>

  /* Set Power State to ON */
  (void)SDMMC_PowerState_ON(hsd->Instance);
 8008b9a:	687b      	ldr	r3, [r7, #4]
 8008b9c:	681b      	ldr	r3, [r3, #0]
 8008b9e:	4618      	mov	r0, r3
 8008ba0:	f002 fed2 	bl	800b948 <SDMMC_PowerState_ON>

  /* wait 74 Cycles: required power up waiting time before starting
     the SD initialization sequence */
  sdmmc_clk = sdmmc_clk/(2U*Init.ClockDiv);
 8008ba4:	69bb      	ldr	r3, [r7, #24]
 8008ba6:	005b      	lsls	r3, r3, #1
 8008ba8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008baa:	fbb2 f3f3 	udiv	r3, r2, r3
 8008bae:	627b      	str	r3, [r7, #36]	; 0x24

  if(sdmmc_clk != 0U)
 8008bb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008bb2:	2b00      	cmp	r3, #0
 8008bb4:	d008      	beq.n	8008bc8 <HAL_SD_InitCard+0x94>
  {
    HAL_Delay(1U+ (74U*1000U/(sdmmc_clk)));
 8008bb6:	4a2a      	ldr	r2, [pc, #168]	; (8008c60 <HAL_SD_InitCard+0x12c>)
 8008bb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008bba:	fbb2 f3f3 	udiv	r3, r2, r3
 8008bbe:	3301      	adds	r3, #1
 8008bc0:	4618      	mov	r0, r3
 8008bc2:	f7f8 ff09 	bl	80019d8 <HAL_Delay>
 8008bc6:	e002      	b.n	8008bce <HAL_SD_InitCard+0x9a>
  }
  else
  {
    HAL_Delay(2U);
 8008bc8:	2002      	movs	r0, #2
 8008bca:	f7f8 ff05 	bl	80019d8 <HAL_Delay>
  }

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 8008bce:	6878      	ldr	r0, [r7, #4]
 8008bd0:	f000 ff7c 	bl	8009acc <SD_PowerON>
 8008bd4:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8008bd6:	6a3b      	ldr	r3, [r7, #32]
 8008bd8:	2b00      	cmp	r3, #0
 8008bda:	d00b      	beq.n	8008bf4 <HAL_SD_InitCard+0xc0>
  {
    hsd->State = HAL_SD_STATE_READY;
 8008bdc:	687b      	ldr	r3, [r7, #4]
 8008bde:	2201      	movs	r2, #1
 8008be0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8008be4:	687b      	ldr	r3, [r7, #4]
 8008be6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008be8:	6a3b      	ldr	r3, [r7, #32]
 8008bea:	431a      	orrs	r2, r3
 8008bec:	687b      	ldr	r3, [r7, #4]
 8008bee:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8008bf0:	2301      	movs	r3, #1
 8008bf2:	e02e      	b.n	8008c52 <HAL_SD_InitCard+0x11e>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 8008bf4:	6878      	ldr	r0, [r7, #4]
 8008bf6:	f000 feab 	bl	8009950 <SD_InitCard>
 8008bfa:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8008bfc:	6a3b      	ldr	r3, [r7, #32]
 8008bfe:	2b00      	cmp	r3, #0
 8008c00:	d00b      	beq.n	8008c1a <HAL_SD_InitCard+0xe6>
  {
    hsd->State = HAL_SD_STATE_READY;
 8008c02:	687b      	ldr	r3, [r7, #4]
 8008c04:	2201      	movs	r2, #1
 8008c06:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8008c0a:	687b      	ldr	r3, [r7, #4]
 8008c0c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008c0e:	6a3b      	ldr	r3, [r7, #32]
 8008c10:	431a      	orrs	r2, r3
 8008c12:	687b      	ldr	r3, [r7, #4]
 8008c14:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8008c16:	2301      	movs	r3, #1
 8008c18:	e01b      	b.n	8008c52 <HAL_SD_InitCard+0x11e>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8008c1a:	687b      	ldr	r3, [r7, #4]
 8008c1c:	681b      	ldr	r3, [r3, #0]
 8008c1e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8008c22:	4618      	mov	r0, r3
 8008c24:	f002 ff26 	bl	800ba74 <SDMMC_CmdBlockLength>
 8008c28:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8008c2a:	6a3b      	ldr	r3, [r7, #32]
 8008c2c:	2b00      	cmp	r3, #0
 8008c2e:	d00f      	beq.n	8008c50 <HAL_SD_InitCard+0x11c>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8008c30:	687b      	ldr	r3, [r7, #4]
 8008c32:	681b      	ldr	r3, [r3, #0]
 8008c34:	4a0b      	ldr	r2, [pc, #44]	; (8008c64 <HAL_SD_InitCard+0x130>)
 8008c36:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 8008c38:	687b      	ldr	r3, [r7, #4]
 8008c3a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008c3c:	6a3b      	ldr	r3, [r7, #32]
 8008c3e:	431a      	orrs	r2, r3
 8008c40:	687b      	ldr	r3, [r7, #4]
 8008c42:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8008c44:	687b      	ldr	r3, [r7, #4]
 8008c46:	2201      	movs	r2, #1
 8008c48:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8008c4c:	2301      	movs	r3, #1
 8008c4e:	e000      	b.n	8008c52 <HAL_SD_InitCard+0x11e>
  }

  return HAL_OK;
 8008c50:	2300      	movs	r3, #0
}
 8008c52:	4618      	mov	r0, r3
 8008c54:	3728      	adds	r7, #40	; 0x28
 8008c56:	46bd      	mov	sp, r7
 8008c58:	bdb0      	pop	{r4, r5, r7, pc}
 8008c5a:	bf00      	nop
 8008c5c:	014f8b59 	.word	0x014f8b59
 8008c60:	00012110 	.word	0x00012110
 8008c64:	1fe00fff 	.word	0x1fe00fff

08008c68 <HAL_SD_ReadBlocks>:
  * @param  NumberOfBlocks: Number of SD blocks to read
  * @param  Timeout: Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks, uint32_t Timeout)
{
 8008c68:	b580      	push	{r7, lr}
 8008c6a:	b092      	sub	sp, #72	; 0x48
 8008c6c:	af00      	add	r7, sp, #0
 8008c6e:	60f8      	str	r0, [r7, #12]
 8008c70:	60b9      	str	r1, [r7, #8]
 8008c72:	607a      	str	r2, [r7, #4]
 8008c74:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8008c76:	f7f8 fea3 	bl	80019c0 <HAL_GetTick>
 8008c7a:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t count, data, dataremaining;
  uint32_t add = BlockAdd;
 8008c7c:	687b      	ldr	r3, [r7, #4]
 8008c7e:	63bb      	str	r3, [r7, #56]	; 0x38
  uint8_t *tempbuff = pData;
 8008c80:	68bb      	ldr	r3, [r7, #8]
 8008c82:	637b      	str	r3, [r7, #52]	; 0x34

  if(NULL == pData)
 8008c84:	68bb      	ldr	r3, [r7, #8]
 8008c86:	2b00      	cmp	r3, #0
 8008c88:	d107      	bne.n	8008c9a <HAL_SD_ReadBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8008c8a:	68fb      	ldr	r3, [r7, #12]
 8008c8c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008c8e:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8008c92:	68fb      	ldr	r3, [r7, #12]
 8008c94:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8008c96:	2301      	movs	r3, #1
 8008c98:	e167      	b.n	8008f6a <HAL_SD_ReadBlocks+0x302>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 8008c9a:	68fb      	ldr	r3, [r7, #12]
 8008c9c:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8008ca0:	b2db      	uxtb	r3, r3
 8008ca2:	2b01      	cmp	r3, #1
 8008ca4:	f040 815a 	bne.w	8008f5c <HAL_SD_ReadBlocks+0x2f4>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8008ca8:	68fb      	ldr	r3, [r7, #12]
 8008caa:	2200      	movs	r2, #0
 8008cac:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8008cae:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008cb0:	683b      	ldr	r3, [r7, #0]
 8008cb2:	441a      	add	r2, r3
 8008cb4:	68fb      	ldr	r3, [r7, #12]
 8008cb6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008cb8:	429a      	cmp	r2, r3
 8008cba:	d907      	bls.n	8008ccc <HAL_SD_ReadBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8008cbc:	68fb      	ldr	r3, [r7, #12]
 8008cbe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008cc0:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8008cc4:	68fb      	ldr	r3, [r7, #12]
 8008cc6:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 8008cc8:	2301      	movs	r3, #1
 8008cca:	e14e      	b.n	8008f6a <HAL_SD_ReadBlocks+0x302>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8008ccc:	68fb      	ldr	r3, [r7, #12]
 8008cce:	2203      	movs	r2, #3
 8008cd0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8008cd4:	68fb      	ldr	r3, [r7, #12]
 8008cd6:	681b      	ldr	r3, [r3, #0]
 8008cd8:	2200      	movs	r2, #0
 8008cda:	62da      	str	r2, [r3, #44]	; 0x2c

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8008cdc:	68fb      	ldr	r3, [r7, #12]
 8008cde:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008ce0:	2b01      	cmp	r3, #1
 8008ce2:	d002      	beq.n	8008cea <HAL_SD_ReadBlocks+0x82>
    {
      add *= 512U;
 8008ce4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008ce6:	025b      	lsls	r3, r3, #9
 8008ce8:	63bb      	str	r3, [r7, #56]	; 0x38
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8008cea:	f04f 33ff 	mov.w	r3, #4294967295
 8008cee:	617b      	str	r3, [r7, #20]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 8008cf0:	683b      	ldr	r3, [r7, #0]
 8008cf2:	025b      	lsls	r3, r3, #9
 8008cf4:	61bb      	str	r3, [r7, #24]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 8008cf6:	2390      	movs	r3, #144	; 0x90
 8008cf8:	61fb      	str	r3, [r7, #28]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 8008cfa:	2302      	movs	r3, #2
 8008cfc:	623b      	str	r3, [r7, #32]
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8008cfe:	2300      	movs	r3, #0
 8008d00:	627b      	str	r3, [r7, #36]	; 0x24
    config.DPSM          = SDMMC_DPSM_DISABLE;
 8008d02:	2300      	movs	r3, #0
 8008d04:	62bb      	str	r3, [r7, #40]	; 0x28
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 8008d06:	68fb      	ldr	r3, [r7, #12]
 8008d08:	681b      	ldr	r3, [r3, #0]
 8008d0a:	f107 0214 	add.w	r2, r7, #20
 8008d0e:	4611      	mov	r1, r2
 8008d10:	4618      	mov	r0, r3
 8008d12:	f002 fe83 	bl	800ba1c <SDMMC_ConfigData>
    __SDMMC_CMDTRANS_ENABLE( hsd->Instance);
 8008d16:	68fb      	ldr	r3, [r7, #12]
 8008d18:	681b      	ldr	r3, [r3, #0]
 8008d1a:	68da      	ldr	r2, [r3, #12]
 8008d1c:	68fb      	ldr	r3, [r7, #12]
 8008d1e:	681b      	ldr	r3, [r3, #0]
 8008d20:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008d24:	60da      	str	r2, [r3, #12]

    /* Read block(s) in polling mode */
    if(NumberOfBlocks > 1U)
 8008d26:	683b      	ldr	r3, [r7, #0]
 8008d28:	2b01      	cmp	r3, #1
 8008d2a:	d90a      	bls.n	8008d42 <HAL_SD_ReadBlocks+0xda>
    {
      hsd->Context = SD_CONTEXT_READ_MULTIPLE_BLOCK;
 8008d2c:	68fb      	ldr	r3, [r7, #12]
 8008d2e:	2202      	movs	r2, #2
 8008d30:	631a      	str	r2, [r3, #48]	; 0x30

      /* Read Multi Block command */
      errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 8008d32:	68fb      	ldr	r3, [r7, #12]
 8008d34:	681b      	ldr	r3, [r3, #0]
 8008d36:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8008d38:	4618      	mov	r0, r3
 8008d3a:	f002 fee1 	bl	800bb00 <SDMMC_CmdReadMultiBlock>
 8008d3e:	6478      	str	r0, [r7, #68]	; 0x44
 8008d40:	e009      	b.n	8008d56 <HAL_SD_ReadBlocks+0xee>
    }
    else
    {
      hsd->Context = SD_CONTEXT_READ_SINGLE_BLOCK;
 8008d42:	68fb      	ldr	r3, [r7, #12]
 8008d44:	2201      	movs	r2, #1
 8008d46:	631a      	str	r2, [r3, #48]	; 0x30

      /* Read Single Block command */
      errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 8008d48:	68fb      	ldr	r3, [r7, #12]
 8008d4a:	681b      	ldr	r3, [r3, #0]
 8008d4c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8008d4e:	4618      	mov	r0, r3
 8008d50:	f002 feb3 	bl	800baba <SDMMC_CmdReadSingleBlock>
 8008d54:	6478      	str	r0, [r7, #68]	; 0x44
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 8008d56:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008d58:	2b00      	cmp	r3, #0
 8008d5a:	d012      	beq.n	8008d82 <HAL_SD_ReadBlocks+0x11a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8008d5c:	68fb      	ldr	r3, [r7, #12]
 8008d5e:	681b      	ldr	r3, [r3, #0]
 8008d60:	4a84      	ldr	r2, [pc, #528]	; (8008f74 <HAL_SD_ReadBlocks+0x30c>)
 8008d62:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8008d64:	68fb      	ldr	r3, [r7, #12]
 8008d66:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008d68:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008d6a:	431a      	orrs	r2, r3
 8008d6c:	68fb      	ldr	r3, [r7, #12]
 8008d6e:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8008d70:	68fb      	ldr	r3, [r7, #12]
 8008d72:	2201      	movs	r2, #1
 8008d74:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8008d78:	68fb      	ldr	r3, [r7, #12]
 8008d7a:	2200      	movs	r2, #0
 8008d7c:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8008d7e:	2301      	movs	r3, #1
 8008d80:	e0f3      	b.n	8008f6a <HAL_SD_ReadBlocks+0x302>
    }

    /* Poll on SDMMC flags */
    dataremaining = config.DataLength;
 8008d82:	69bb      	ldr	r3, [r7, #24]
 8008d84:	63fb      	str	r3, [r7, #60]	; 0x3c
    while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 8008d86:	e058      	b.n	8008e3a <HAL_SD_ReadBlocks+0x1d2>
    {
      if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF) && (dataremaining >= 32U))
 8008d88:	68fb      	ldr	r3, [r7, #12]
 8008d8a:	681b      	ldr	r3, [r3, #0]
 8008d8c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008d8e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008d92:	2b00      	cmp	r3, #0
 8008d94:	d033      	beq.n	8008dfe <HAL_SD_ReadBlocks+0x196>
 8008d96:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008d98:	2b1f      	cmp	r3, #31
 8008d9a:	d930      	bls.n	8008dfe <HAL_SD_ReadBlocks+0x196>
      {
        /* Read data from SDMMC Rx FIFO */
        for(count = 0U; count < 8U; count++)
 8008d9c:	2300      	movs	r3, #0
 8008d9e:	643b      	str	r3, [r7, #64]	; 0x40
 8008da0:	e027      	b.n	8008df2 <HAL_SD_ReadBlocks+0x18a>
        {
          data = SDMMC_ReadFIFO(hsd->Instance);
 8008da2:	68fb      	ldr	r3, [r7, #12]
 8008da4:	681b      	ldr	r3, [r3, #0]
 8008da6:	4618      	mov	r0, r3
 8008da8:	f002 fdb0 	bl	800b90c <SDMMC_ReadFIFO>
 8008dac:	62f8      	str	r0, [r7, #44]	; 0x2c
          *tempbuff = (uint8_t)(data & 0xFFU);
 8008dae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008db0:	b2da      	uxtb	r2, r3
 8008db2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008db4:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8008db6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008db8:	3301      	adds	r3, #1
 8008dba:	637b      	str	r3, [r7, #52]	; 0x34
          *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
 8008dbc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008dbe:	0a1b      	lsrs	r3, r3, #8
 8008dc0:	b2da      	uxtb	r2, r3
 8008dc2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008dc4:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8008dc6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008dc8:	3301      	adds	r3, #1
 8008dca:	637b      	str	r3, [r7, #52]	; 0x34
          *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
 8008dcc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008dce:	0c1b      	lsrs	r3, r3, #16
 8008dd0:	b2da      	uxtb	r2, r3
 8008dd2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008dd4:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8008dd6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008dd8:	3301      	adds	r3, #1
 8008dda:	637b      	str	r3, [r7, #52]	; 0x34
          *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
 8008ddc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008dde:	0e1b      	lsrs	r3, r3, #24
 8008de0:	b2da      	uxtb	r2, r3
 8008de2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008de4:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8008de6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008de8:	3301      	adds	r3, #1
 8008dea:	637b      	str	r3, [r7, #52]	; 0x34
        for(count = 0U; count < 8U; count++)
 8008dec:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008dee:	3301      	adds	r3, #1
 8008df0:	643b      	str	r3, [r7, #64]	; 0x40
 8008df2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008df4:	2b07      	cmp	r3, #7
 8008df6:	d9d4      	bls.n	8008da2 <HAL_SD_ReadBlocks+0x13a>
        }
        dataremaining -= 32U;
 8008df8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008dfa:	3b20      	subs	r3, #32
 8008dfc:	63fb      	str	r3, [r7, #60]	; 0x3c
      }

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 8008dfe:	f7f8 fddf 	bl	80019c0 <HAL_GetTick>
 8008e02:	4602      	mov	r2, r0
 8008e04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008e06:	1ad3      	subs	r3, r2, r3
 8008e08:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8008e0a:	429a      	cmp	r2, r3
 8008e0c:	d902      	bls.n	8008e14 <HAL_SD_ReadBlocks+0x1ac>
 8008e0e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008e10:	2b00      	cmp	r3, #0
 8008e12:	d112      	bne.n	8008e3a <HAL_SD_ReadBlocks+0x1d2>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8008e14:	68fb      	ldr	r3, [r7, #12]
 8008e16:	681b      	ldr	r3, [r3, #0]
 8008e18:	4a56      	ldr	r2, [pc, #344]	; (8008f74 <HAL_SD_ReadBlocks+0x30c>)
 8008e1a:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 8008e1c:	68fb      	ldr	r3, [r7, #12]
 8008e1e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008e20:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8008e24:	68fb      	ldr	r3, [r7, #12]
 8008e26:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State= HAL_SD_STATE_READY;
 8008e28:	68fb      	ldr	r3, [r7, #12]
 8008e2a:	2201      	movs	r2, #1
 8008e2c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8008e30:	68fb      	ldr	r3, [r7, #12]
 8008e32:	2200      	movs	r2, #0
 8008e34:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_TIMEOUT;
 8008e36:	2303      	movs	r3, #3
 8008e38:	e097      	b.n	8008f6a <HAL_SD_ReadBlocks+0x302>
    while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 8008e3a:	68fb      	ldr	r3, [r7, #12]
 8008e3c:	681b      	ldr	r3, [r3, #0]
 8008e3e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008e40:	f403 7395 	and.w	r3, r3, #298	; 0x12a
 8008e44:	2b00      	cmp	r3, #0
 8008e46:	d09f      	beq.n	8008d88 <HAL_SD_ReadBlocks+0x120>
      }
    }
    __SDMMC_CMDTRANS_DISABLE( hsd->Instance);
 8008e48:	68fb      	ldr	r3, [r7, #12]
 8008e4a:	681b      	ldr	r3, [r3, #0]
 8008e4c:	68da      	ldr	r2, [r3, #12]
 8008e4e:	68fb      	ldr	r3, [r7, #12]
 8008e50:	681b      	ldr	r3, [r3, #0]
 8008e52:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008e56:	60da      	str	r2, [r3, #12]

    /* Send stop transmission command in case of multiblock read */
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 8008e58:	68fb      	ldr	r3, [r7, #12]
 8008e5a:	681b      	ldr	r3, [r3, #0]
 8008e5c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008e5e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008e62:	2b00      	cmp	r3, #0
 8008e64:	d022      	beq.n	8008eac <HAL_SD_ReadBlocks+0x244>
 8008e66:	683b      	ldr	r3, [r7, #0]
 8008e68:	2b01      	cmp	r3, #1
 8008e6a:	d91f      	bls.n	8008eac <HAL_SD_ReadBlocks+0x244>
    {
      if(hsd->SdCard.CardType != CARD_SECURED)
 8008e6c:	68fb      	ldr	r3, [r7, #12]
 8008e6e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008e70:	2b03      	cmp	r3, #3
 8008e72:	d01b      	beq.n	8008eac <HAL_SD_ReadBlocks+0x244>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8008e74:	68fb      	ldr	r3, [r7, #12]
 8008e76:	681b      	ldr	r3, [r3, #0]
 8008e78:	4618      	mov	r0, r3
 8008e7a:	f002 feab 	bl	800bbd4 <SDMMC_CmdStopTransfer>
 8008e7e:	6478      	str	r0, [r7, #68]	; 0x44
        if(errorstate != HAL_SD_ERROR_NONE)
 8008e80:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008e82:	2b00      	cmp	r3, #0
 8008e84:	d012      	beq.n	8008eac <HAL_SD_ReadBlocks+0x244>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8008e86:	68fb      	ldr	r3, [r7, #12]
 8008e88:	681b      	ldr	r3, [r3, #0]
 8008e8a:	4a3a      	ldr	r2, [pc, #232]	; (8008f74 <HAL_SD_ReadBlocks+0x30c>)
 8008e8c:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->ErrorCode |= errorstate;
 8008e8e:	68fb      	ldr	r3, [r7, #12]
 8008e90:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008e92:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008e94:	431a      	orrs	r2, r3
 8008e96:	68fb      	ldr	r3, [r7, #12]
 8008e98:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->State = HAL_SD_STATE_READY;
 8008e9a:	68fb      	ldr	r3, [r7, #12]
 8008e9c:	2201      	movs	r2, #1
 8008e9e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          hsd->Context = SD_CONTEXT_NONE;
 8008ea2:	68fb      	ldr	r3, [r7, #12]
 8008ea4:	2200      	movs	r2, #0
 8008ea6:	631a      	str	r2, [r3, #48]	; 0x30
          return HAL_ERROR;
 8008ea8:	2301      	movs	r3, #1
 8008eaa:	e05e      	b.n	8008f6a <HAL_SD_ReadBlocks+0x302>
        }
      }
    }

    /* Get error state */
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 8008eac:	68fb      	ldr	r3, [r7, #12]
 8008eae:	681b      	ldr	r3, [r3, #0]
 8008eb0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008eb2:	f003 0308 	and.w	r3, r3, #8
 8008eb6:	2b00      	cmp	r3, #0
 8008eb8:	d012      	beq.n	8008ee0 <HAL_SD_ReadBlocks+0x278>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8008eba:	68fb      	ldr	r3, [r7, #12]
 8008ebc:	681b      	ldr	r3, [r3, #0]
 8008ebe:	4a2d      	ldr	r2, [pc, #180]	; (8008f74 <HAL_SD_ReadBlocks+0x30c>)
 8008ec0:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8008ec2:	68fb      	ldr	r3, [r7, #12]
 8008ec4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008ec6:	f043 0208 	orr.w	r2, r3, #8
 8008eca:	68fb      	ldr	r3, [r7, #12]
 8008ecc:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8008ece:	68fb      	ldr	r3, [r7, #12]
 8008ed0:	2201      	movs	r2, #1
 8008ed2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8008ed6:	68fb      	ldr	r3, [r7, #12]
 8008ed8:	2200      	movs	r2, #0
 8008eda:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8008edc:	2301      	movs	r3, #1
 8008ede:	e044      	b.n	8008f6a <HAL_SD_ReadBlocks+0x302>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 8008ee0:	68fb      	ldr	r3, [r7, #12]
 8008ee2:	681b      	ldr	r3, [r3, #0]
 8008ee4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008ee6:	f003 0302 	and.w	r3, r3, #2
 8008eea:	2b00      	cmp	r3, #0
 8008eec:	d012      	beq.n	8008f14 <HAL_SD_ReadBlocks+0x2ac>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8008eee:	68fb      	ldr	r3, [r7, #12]
 8008ef0:	681b      	ldr	r3, [r3, #0]
 8008ef2:	4a20      	ldr	r2, [pc, #128]	; (8008f74 <HAL_SD_ReadBlocks+0x30c>)
 8008ef4:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 8008ef6:	68fb      	ldr	r3, [r7, #12]
 8008ef8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008efa:	f043 0202 	orr.w	r2, r3, #2
 8008efe:	68fb      	ldr	r3, [r7, #12]
 8008f00:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8008f02:	68fb      	ldr	r3, [r7, #12]
 8008f04:	2201      	movs	r2, #1
 8008f06:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8008f0a:	68fb      	ldr	r3, [r7, #12]
 8008f0c:	2200      	movs	r2, #0
 8008f0e:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8008f10:	2301      	movs	r3, #1
 8008f12:	e02a      	b.n	8008f6a <HAL_SD_ReadBlocks+0x302>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 8008f14:	68fb      	ldr	r3, [r7, #12]
 8008f16:	681b      	ldr	r3, [r3, #0]
 8008f18:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008f1a:	f003 0320 	and.w	r3, r3, #32
 8008f1e:	2b00      	cmp	r3, #0
 8008f20:	d012      	beq.n	8008f48 <HAL_SD_ReadBlocks+0x2e0>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8008f22:	68fb      	ldr	r3, [r7, #12]
 8008f24:	681b      	ldr	r3, [r3, #0]
 8008f26:	4a13      	ldr	r2, [pc, #76]	; (8008f74 <HAL_SD_ReadBlocks+0x30c>)
 8008f28:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 8008f2a:	68fb      	ldr	r3, [r7, #12]
 8008f2c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008f2e:	f043 0220 	orr.w	r2, r3, #32
 8008f32:	68fb      	ldr	r3, [r7, #12]
 8008f34:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8008f36:	68fb      	ldr	r3, [r7, #12]
 8008f38:	2201      	movs	r2, #1
 8008f3a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8008f3e:	68fb      	ldr	r3, [r7, #12]
 8008f40:	2200      	movs	r2, #0
 8008f42:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8008f44:	2301      	movs	r3, #1
 8008f46:	e010      	b.n	8008f6a <HAL_SD_ReadBlocks+0x302>
    {
      /* Nothing to do */
    }

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8008f48:	68fb      	ldr	r3, [r7, #12]
 8008f4a:	681b      	ldr	r3, [r3, #0]
 8008f4c:	4a0a      	ldr	r2, [pc, #40]	; (8008f78 <HAL_SD_ReadBlocks+0x310>)
 8008f4e:	639a      	str	r2, [r3, #56]	; 0x38

    hsd->State = HAL_SD_STATE_READY;
 8008f50:	68fb      	ldr	r3, [r7, #12]
 8008f52:	2201      	movs	r2, #1
 8008f54:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_OK;
 8008f58:	2300      	movs	r3, #0
 8008f5a:	e006      	b.n	8008f6a <HAL_SD_ReadBlocks+0x302>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 8008f5c:	68fb      	ldr	r3, [r7, #12]
 8008f5e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008f60:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8008f64:	68fb      	ldr	r3, [r7, #12]
 8008f66:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8008f68:	2301      	movs	r3, #1
  }
}
 8008f6a:	4618      	mov	r0, r3
 8008f6c:	3748      	adds	r7, #72	; 0x48
 8008f6e:	46bd      	mov	sp, r7
 8008f70:	bd80      	pop	{r7, pc}
 8008f72:	bf00      	nop
 8008f74:	1fe00fff 	.word	0x1fe00fff
 8008f78:	18000f3a 	.word	0x18000f3a

08008f7c <HAL_SD_WriteBlocks>:
  * @param  NumberOfBlocks: Number of SD blocks to write
  * @param  Timeout: Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks, uint32_t Timeout)
{
 8008f7c:	b580      	push	{r7, lr}
 8008f7e:	b092      	sub	sp, #72	; 0x48
 8008f80:	af00      	add	r7, sp, #0
 8008f82:	60f8      	str	r0, [r7, #12]
 8008f84:	60b9      	str	r1, [r7, #8]
 8008f86:	607a      	str	r2, [r7, #4]
 8008f88:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8008f8a:	f7f8 fd19 	bl	80019c0 <HAL_GetTick>
 8008f8e:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t count, data, dataremaining;
  uint32_t add = BlockAdd;
 8008f90:	687b      	ldr	r3, [r7, #4]
 8008f92:	63bb      	str	r3, [r7, #56]	; 0x38
  uint8_t *tempbuff = pData;
 8008f94:	68bb      	ldr	r3, [r7, #8]
 8008f96:	637b      	str	r3, [r7, #52]	; 0x34

  if(NULL == pData)
 8008f98:	68bb      	ldr	r3, [r7, #8]
 8008f9a:	2b00      	cmp	r3, #0
 8008f9c:	d107      	bne.n	8008fae <HAL_SD_WriteBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8008f9e:	68fb      	ldr	r3, [r7, #12]
 8008fa0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008fa2:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8008fa6:	68fb      	ldr	r3, [r7, #12]
 8008fa8:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8008faa:	2301      	movs	r3, #1
 8008fac:	e16b      	b.n	8009286 <HAL_SD_WriteBlocks+0x30a>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 8008fae:	68fb      	ldr	r3, [r7, #12]
 8008fb0:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8008fb4:	b2db      	uxtb	r3, r3
 8008fb6:	2b01      	cmp	r3, #1
 8008fb8:	f040 815e 	bne.w	8009278 <HAL_SD_WriteBlocks+0x2fc>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8008fbc:	68fb      	ldr	r3, [r7, #12]
 8008fbe:	2200      	movs	r2, #0
 8008fc0:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8008fc2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008fc4:	683b      	ldr	r3, [r7, #0]
 8008fc6:	441a      	add	r2, r3
 8008fc8:	68fb      	ldr	r3, [r7, #12]
 8008fca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008fcc:	429a      	cmp	r2, r3
 8008fce:	d907      	bls.n	8008fe0 <HAL_SD_WriteBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8008fd0:	68fb      	ldr	r3, [r7, #12]
 8008fd2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008fd4:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8008fd8:	68fb      	ldr	r3, [r7, #12]
 8008fda:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 8008fdc:	2301      	movs	r3, #1
 8008fde:	e152      	b.n	8009286 <HAL_SD_WriteBlocks+0x30a>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8008fe0:	68fb      	ldr	r3, [r7, #12]
 8008fe2:	2203      	movs	r2, #3
 8008fe4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8008fe8:	68fb      	ldr	r3, [r7, #12]
 8008fea:	681b      	ldr	r3, [r3, #0]
 8008fec:	2200      	movs	r2, #0
 8008fee:	62da      	str	r2, [r3, #44]	; 0x2c

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8008ff0:	68fb      	ldr	r3, [r7, #12]
 8008ff2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008ff4:	2b01      	cmp	r3, #1
 8008ff6:	d002      	beq.n	8008ffe <HAL_SD_WriteBlocks+0x82>
    {
      add *= 512U;
 8008ff8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008ffa:	025b      	lsls	r3, r3, #9
 8008ffc:	63bb      	str	r3, [r7, #56]	; 0x38
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8008ffe:	f04f 33ff 	mov.w	r3, #4294967295
 8009002:	61bb      	str	r3, [r7, #24]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 8009004:	683b      	ldr	r3, [r7, #0]
 8009006:	025b      	lsls	r3, r3, #9
 8009008:	61fb      	str	r3, [r7, #28]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 800900a:	2390      	movs	r3, #144	; 0x90
 800900c:	623b      	str	r3, [r7, #32]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_CARD;
 800900e:	2300      	movs	r3, #0
 8009010:	627b      	str	r3, [r7, #36]	; 0x24
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8009012:	2300      	movs	r3, #0
 8009014:	62bb      	str	r3, [r7, #40]	; 0x28
    config.DPSM          = SDMMC_DPSM_DISABLE;
 8009016:	2300      	movs	r3, #0
 8009018:	62fb      	str	r3, [r7, #44]	; 0x2c
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 800901a:	68fb      	ldr	r3, [r7, #12]
 800901c:	681b      	ldr	r3, [r3, #0]
 800901e:	f107 0218 	add.w	r2, r7, #24
 8009022:	4611      	mov	r1, r2
 8009024:	4618      	mov	r0, r3
 8009026:	f002 fcf9 	bl	800ba1c <SDMMC_ConfigData>
    __SDMMC_CMDTRANS_ENABLE( hsd->Instance);
 800902a:	68fb      	ldr	r3, [r7, #12]
 800902c:	681b      	ldr	r3, [r3, #0]
 800902e:	68da      	ldr	r2, [r3, #12]
 8009030:	68fb      	ldr	r3, [r7, #12]
 8009032:	681b      	ldr	r3, [r3, #0]
 8009034:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8009038:	60da      	str	r2, [r3, #12]

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 800903a:	683b      	ldr	r3, [r7, #0]
 800903c:	2b01      	cmp	r3, #1
 800903e:	d90a      	bls.n	8009056 <HAL_SD_WriteBlocks+0xda>
    {
      hsd->Context = SD_CONTEXT_WRITE_MULTIPLE_BLOCK;
 8009040:	68fb      	ldr	r3, [r7, #12]
 8009042:	2220      	movs	r2, #32
 8009044:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 8009046:	68fb      	ldr	r3, [r7, #12]
 8009048:	681b      	ldr	r3, [r3, #0]
 800904a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800904c:	4618      	mov	r0, r3
 800904e:	f002 fd9d 	bl	800bb8c <SDMMC_CmdWriteMultiBlock>
 8009052:	6478      	str	r0, [r7, #68]	; 0x44
 8009054:	e009      	b.n	800906a <HAL_SD_WriteBlocks+0xee>
    }
    else
    {
      hsd->Context = SD_CONTEXT_WRITE_SINGLE_BLOCK;
 8009056:	68fb      	ldr	r3, [r7, #12]
 8009058:	2210      	movs	r2, #16
 800905a:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 800905c:	68fb      	ldr	r3, [r7, #12]
 800905e:	681b      	ldr	r3, [r3, #0]
 8009060:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8009062:	4618      	mov	r0, r3
 8009064:	f002 fd6f 	bl	800bb46 <SDMMC_CmdWriteSingleBlock>
 8009068:	6478      	str	r0, [r7, #68]	; 0x44
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 800906a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800906c:	2b00      	cmp	r3, #0
 800906e:	d012      	beq.n	8009096 <HAL_SD_WriteBlocks+0x11a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8009070:	68fb      	ldr	r3, [r7, #12]
 8009072:	681b      	ldr	r3, [r3, #0]
 8009074:	4a86      	ldr	r2, [pc, #536]	; (8009290 <HAL_SD_WriteBlocks+0x314>)
 8009076:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8009078:	68fb      	ldr	r3, [r7, #12]
 800907a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800907c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800907e:	431a      	orrs	r2, r3
 8009080:	68fb      	ldr	r3, [r7, #12]
 8009082:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8009084:	68fb      	ldr	r3, [r7, #12]
 8009086:	2201      	movs	r2, #1
 8009088:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800908c:	68fb      	ldr	r3, [r7, #12]
 800908e:	2200      	movs	r2, #0
 8009090:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8009092:	2301      	movs	r3, #1
 8009094:	e0f7      	b.n	8009286 <HAL_SD_WriteBlocks+0x30a>
    }

    /* Write block(s) in polling mode */
    dataremaining = config.DataLength;
 8009096:	69fb      	ldr	r3, [r7, #28]
 8009098:	63fb      	str	r3, [r7, #60]	; 0x3c
    while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 800909a:	e05c      	b.n	8009156 <HAL_SD_WriteBlocks+0x1da>
    {
      if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXFIFOHE) && (dataremaining >= 32U))
 800909c:	68fb      	ldr	r3, [r7, #12]
 800909e:	681b      	ldr	r3, [r3, #0]
 80090a0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80090a2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80090a6:	2b00      	cmp	r3, #0
 80090a8:	d037      	beq.n	800911a <HAL_SD_WriteBlocks+0x19e>
 80090aa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80090ac:	2b1f      	cmp	r3, #31
 80090ae:	d934      	bls.n	800911a <HAL_SD_WriteBlocks+0x19e>
      {
        /* Write data to SDMMC Tx FIFO */
        for(count = 0U; count < 8U; count++)
 80090b0:	2300      	movs	r3, #0
 80090b2:	643b      	str	r3, [r7, #64]	; 0x40
 80090b4:	e02b      	b.n	800910e <HAL_SD_WriteBlocks+0x192>
        {
          data = (uint32_t)(*tempbuff);
 80090b6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80090b8:	781b      	ldrb	r3, [r3, #0]
 80090ba:	617b      	str	r3, [r7, #20]
          tempbuff++;
 80090bc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80090be:	3301      	adds	r3, #1
 80090c0:	637b      	str	r3, [r7, #52]	; 0x34
          data |= ((uint32_t)(*tempbuff) << 8U);
 80090c2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80090c4:	781b      	ldrb	r3, [r3, #0]
 80090c6:	021a      	lsls	r2, r3, #8
 80090c8:	697b      	ldr	r3, [r7, #20]
 80090ca:	4313      	orrs	r3, r2
 80090cc:	617b      	str	r3, [r7, #20]
          tempbuff++;
 80090ce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80090d0:	3301      	adds	r3, #1
 80090d2:	637b      	str	r3, [r7, #52]	; 0x34
          data |= ((uint32_t)(*tempbuff) << 16U);
 80090d4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80090d6:	781b      	ldrb	r3, [r3, #0]
 80090d8:	041a      	lsls	r2, r3, #16
 80090da:	697b      	ldr	r3, [r7, #20]
 80090dc:	4313      	orrs	r3, r2
 80090de:	617b      	str	r3, [r7, #20]
          tempbuff++;
 80090e0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80090e2:	3301      	adds	r3, #1
 80090e4:	637b      	str	r3, [r7, #52]	; 0x34
          data |= ((uint32_t)(*tempbuff) << 24U);
 80090e6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80090e8:	781b      	ldrb	r3, [r3, #0]
 80090ea:	061a      	lsls	r2, r3, #24
 80090ec:	697b      	ldr	r3, [r7, #20]
 80090ee:	4313      	orrs	r3, r2
 80090f0:	617b      	str	r3, [r7, #20]
          tempbuff++;
 80090f2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80090f4:	3301      	adds	r3, #1
 80090f6:	637b      	str	r3, [r7, #52]	; 0x34
          (void)SDMMC_WriteFIFO(hsd->Instance, &data);
 80090f8:	68fb      	ldr	r3, [r7, #12]
 80090fa:	681b      	ldr	r3, [r3, #0]
 80090fc:	f107 0214 	add.w	r2, r7, #20
 8009100:	4611      	mov	r1, r2
 8009102:	4618      	mov	r0, r3
 8009104:	f002 fc0f 	bl	800b926 <SDMMC_WriteFIFO>
        for(count = 0U; count < 8U; count++)
 8009108:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800910a:	3301      	adds	r3, #1
 800910c:	643b      	str	r3, [r7, #64]	; 0x40
 800910e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009110:	2b07      	cmp	r3, #7
 8009112:	d9d0      	bls.n	80090b6 <HAL_SD_WriteBlocks+0x13a>
        }
        dataremaining -= 32U;
 8009114:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009116:	3b20      	subs	r3, #32
 8009118:	63fb      	str	r3, [r7, #60]	; 0x3c
      }

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 800911a:	f7f8 fc51 	bl	80019c0 <HAL_GetTick>
 800911e:	4602      	mov	r2, r0
 8009120:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009122:	1ad3      	subs	r3, r2, r3
 8009124:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8009126:	429a      	cmp	r2, r3
 8009128:	d902      	bls.n	8009130 <HAL_SD_WriteBlocks+0x1b4>
 800912a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800912c:	2b00      	cmp	r3, #0
 800912e:	d112      	bne.n	8009156 <HAL_SD_WriteBlocks+0x1da>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8009130:	68fb      	ldr	r3, [r7, #12]
 8009132:	681b      	ldr	r3, [r3, #0]
 8009134:	4a56      	ldr	r2, [pc, #344]	; (8009290 <HAL_SD_WriteBlocks+0x314>)
 8009136:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 8009138:	68fb      	ldr	r3, [r7, #12]
 800913a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800913c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800913e:	431a      	orrs	r2, r3
 8009140:	68fb      	ldr	r3, [r7, #12]
 8009142:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 8009144:	68fb      	ldr	r3, [r7, #12]
 8009146:	2201      	movs	r2, #1
 8009148:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 800914c:	68fb      	ldr	r3, [r7, #12]
 800914e:	2200      	movs	r2, #0
 8009150:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_TIMEOUT;
 8009152:	2303      	movs	r3, #3
 8009154:	e097      	b.n	8009286 <HAL_SD_WriteBlocks+0x30a>
    while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 8009156:	68fb      	ldr	r3, [r7, #12]
 8009158:	681b      	ldr	r3, [r3, #0]
 800915a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800915c:	f403 738d 	and.w	r3, r3, #282	; 0x11a
 8009160:	2b00      	cmp	r3, #0
 8009162:	d09b      	beq.n	800909c <HAL_SD_WriteBlocks+0x120>
      }
    }
    __SDMMC_CMDTRANS_DISABLE( hsd->Instance);
 8009164:	68fb      	ldr	r3, [r7, #12]
 8009166:	681b      	ldr	r3, [r3, #0]
 8009168:	68da      	ldr	r2, [r3, #12]
 800916a:	68fb      	ldr	r3, [r7, #12]
 800916c:	681b      	ldr	r3, [r3, #0]
 800916e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009172:	60da      	str	r2, [r3, #12]

    /* Send stop transmission command in case of multiblock write */
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 8009174:	68fb      	ldr	r3, [r7, #12]
 8009176:	681b      	ldr	r3, [r3, #0]
 8009178:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800917a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800917e:	2b00      	cmp	r3, #0
 8009180:	d022      	beq.n	80091c8 <HAL_SD_WriteBlocks+0x24c>
 8009182:	683b      	ldr	r3, [r7, #0]
 8009184:	2b01      	cmp	r3, #1
 8009186:	d91f      	bls.n	80091c8 <HAL_SD_WriteBlocks+0x24c>
    {
      if(hsd->SdCard.CardType != CARD_SECURED)
 8009188:	68fb      	ldr	r3, [r7, #12]
 800918a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800918c:	2b03      	cmp	r3, #3
 800918e:	d01b      	beq.n	80091c8 <HAL_SD_WriteBlocks+0x24c>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8009190:	68fb      	ldr	r3, [r7, #12]
 8009192:	681b      	ldr	r3, [r3, #0]
 8009194:	4618      	mov	r0, r3
 8009196:	f002 fd1d 	bl	800bbd4 <SDMMC_CmdStopTransfer>
 800919a:	6478      	str	r0, [r7, #68]	; 0x44
        if(errorstate != HAL_SD_ERROR_NONE)
 800919c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800919e:	2b00      	cmp	r3, #0
 80091a0:	d012      	beq.n	80091c8 <HAL_SD_WriteBlocks+0x24c>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80091a2:	68fb      	ldr	r3, [r7, #12]
 80091a4:	681b      	ldr	r3, [r3, #0]
 80091a6:	4a3a      	ldr	r2, [pc, #232]	; (8009290 <HAL_SD_WriteBlocks+0x314>)
 80091a8:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->ErrorCode |= errorstate;
 80091aa:	68fb      	ldr	r3, [r7, #12]
 80091ac:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80091ae:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80091b0:	431a      	orrs	r2, r3
 80091b2:	68fb      	ldr	r3, [r7, #12]
 80091b4:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->State = HAL_SD_STATE_READY;
 80091b6:	68fb      	ldr	r3, [r7, #12]
 80091b8:	2201      	movs	r2, #1
 80091ba:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          hsd->Context = SD_CONTEXT_NONE;
 80091be:	68fb      	ldr	r3, [r7, #12]
 80091c0:	2200      	movs	r2, #0
 80091c2:	631a      	str	r2, [r3, #48]	; 0x30
          return HAL_ERROR;
 80091c4:	2301      	movs	r3, #1
 80091c6:	e05e      	b.n	8009286 <HAL_SD_WriteBlocks+0x30a>
        }
      }
    }

    /* Get error state */
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 80091c8:	68fb      	ldr	r3, [r7, #12]
 80091ca:	681b      	ldr	r3, [r3, #0]
 80091cc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80091ce:	f003 0308 	and.w	r3, r3, #8
 80091d2:	2b00      	cmp	r3, #0
 80091d4:	d012      	beq.n	80091fc <HAL_SD_WriteBlocks+0x280>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80091d6:	68fb      	ldr	r3, [r7, #12]
 80091d8:	681b      	ldr	r3, [r3, #0]
 80091da:	4a2d      	ldr	r2, [pc, #180]	; (8009290 <HAL_SD_WriteBlocks+0x314>)
 80091dc:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 80091de:	68fb      	ldr	r3, [r7, #12]
 80091e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80091e2:	f043 0208 	orr.w	r2, r3, #8
 80091e6:	68fb      	ldr	r3, [r7, #12]
 80091e8:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 80091ea:	68fb      	ldr	r3, [r7, #12]
 80091ec:	2201      	movs	r2, #1
 80091ee:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80091f2:	68fb      	ldr	r3, [r7, #12]
 80091f4:	2200      	movs	r2, #0
 80091f6:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 80091f8:	2301      	movs	r3, #1
 80091fa:	e044      	b.n	8009286 <HAL_SD_WriteBlocks+0x30a>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 80091fc:	68fb      	ldr	r3, [r7, #12]
 80091fe:	681b      	ldr	r3, [r3, #0]
 8009200:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009202:	f003 0302 	and.w	r3, r3, #2
 8009206:	2b00      	cmp	r3, #0
 8009208:	d012      	beq.n	8009230 <HAL_SD_WriteBlocks+0x2b4>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800920a:	68fb      	ldr	r3, [r7, #12]
 800920c:	681b      	ldr	r3, [r3, #0]
 800920e:	4a20      	ldr	r2, [pc, #128]	; (8009290 <HAL_SD_WriteBlocks+0x314>)
 8009210:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 8009212:	68fb      	ldr	r3, [r7, #12]
 8009214:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009216:	f043 0202 	orr.w	r2, r3, #2
 800921a:	68fb      	ldr	r3, [r7, #12]
 800921c:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800921e:	68fb      	ldr	r3, [r7, #12]
 8009220:	2201      	movs	r2, #1
 8009222:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8009226:	68fb      	ldr	r3, [r7, #12]
 8009228:	2200      	movs	r2, #0
 800922a:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800922c:	2301      	movs	r3, #1
 800922e:	e02a      	b.n	8009286 <HAL_SD_WriteBlocks+0x30a>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR))
 8009230:	68fb      	ldr	r3, [r7, #12]
 8009232:	681b      	ldr	r3, [r3, #0]
 8009234:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009236:	f003 0310 	and.w	r3, r3, #16
 800923a:	2b00      	cmp	r3, #0
 800923c:	d012      	beq.n	8009264 <HAL_SD_WriteBlocks+0x2e8>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800923e:	68fb      	ldr	r3, [r7, #12]
 8009240:	681b      	ldr	r3, [r3, #0]
 8009242:	4a13      	ldr	r2, [pc, #76]	; (8009290 <HAL_SD_WriteBlocks+0x314>)
 8009244:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 8009246:	68fb      	ldr	r3, [r7, #12]
 8009248:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800924a:	f043 0210 	orr.w	r2, r3, #16
 800924e:	68fb      	ldr	r3, [r7, #12]
 8009250:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8009252:	68fb      	ldr	r3, [r7, #12]
 8009254:	2201      	movs	r2, #1
 8009256:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800925a:	68fb      	ldr	r3, [r7, #12]
 800925c:	2200      	movs	r2, #0
 800925e:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8009260:	2301      	movs	r3, #1
 8009262:	e010      	b.n	8009286 <HAL_SD_WriteBlocks+0x30a>
    {
      /* Nothing to do */
    }

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8009264:	68fb      	ldr	r3, [r7, #12]
 8009266:	681b      	ldr	r3, [r3, #0]
 8009268:	4a0a      	ldr	r2, [pc, #40]	; (8009294 <HAL_SD_WriteBlocks+0x318>)
 800926a:	639a      	str	r2, [r3, #56]	; 0x38

    hsd->State = HAL_SD_STATE_READY;
 800926c:	68fb      	ldr	r3, [r7, #12]
 800926e:	2201      	movs	r2, #1
 8009270:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_OK;
 8009274:	2300      	movs	r3, #0
 8009276:	e006      	b.n	8009286 <HAL_SD_WriteBlocks+0x30a>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 8009278:	68fb      	ldr	r3, [r7, #12]
 800927a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800927c:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8009280:	68fb      	ldr	r3, [r7, #12]
 8009282:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8009284:	2301      	movs	r3, #1
  }
}
 8009286:	4618      	mov	r0, r3
 8009288:	3748      	adds	r7, #72	; 0x48
 800928a:	46bd      	mov	sp, r7
 800928c:	bd80      	pop	{r7, pc}
 800928e:	bf00      	nop
 8009290:	1fe00fff 	.word	0x1fe00fff
 8009294:	18000f3a 	.word	0x18000f3a

08009298 <HAL_SD_DriveTransceiver_1_8V_Callback>:
  * @brief  Enable/Disable the SD Transceiver 1.8V Mode Callback.
  * @param  status: Voltage Switch State
  * @retval None
  */
__weak  void HAL_SD_DriveTransceiver_1_8V_Callback(FlagStatus status)
{
 8009298:	b480      	push	{r7}
 800929a:	b083      	sub	sp, #12
 800929c:	af00      	add	r7, sp, #0
 800929e:	4603      	mov	r3, r0
 80092a0:	71fb      	strb	r3, [r7, #7]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(status);
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_EnableTransceiver could be implemented in the user file
   */
}
 80092a2:	bf00      	nop
 80092a4:	370c      	adds	r7, #12
 80092a6:	46bd      	mov	sp, r7
 80092a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092ac:	4770      	bx	lr
	...

080092b0 <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 80092b0:	b480      	push	{r7}
 80092b2:	b083      	sub	sp, #12
 80092b4:	af00      	add	r7, sp, #0
 80092b6:	6078      	str	r0, [r7, #4]
 80092b8:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 80092ba:	687b      	ldr	r3, [r7, #4]
 80092bc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80092be:	0f9b      	lsrs	r3, r3, #30
 80092c0:	b2da      	uxtb	r2, r3
 80092c2:	683b      	ldr	r3, [r7, #0]
 80092c4:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 80092c6:	687b      	ldr	r3, [r7, #4]
 80092c8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80092ca:	0e9b      	lsrs	r3, r3, #26
 80092cc:	b2db      	uxtb	r3, r3
 80092ce:	f003 030f 	and.w	r3, r3, #15
 80092d2:	b2da      	uxtb	r2, r3
 80092d4:	683b      	ldr	r3, [r7, #0]
 80092d6:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 80092d8:	687b      	ldr	r3, [r7, #4]
 80092da:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80092dc:	0e1b      	lsrs	r3, r3, #24
 80092de:	b2db      	uxtb	r3, r3
 80092e0:	f003 0303 	and.w	r3, r3, #3
 80092e4:	b2da      	uxtb	r2, r3
 80092e6:	683b      	ldr	r3, [r7, #0]
 80092e8:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 80092ea:	687b      	ldr	r3, [r7, #4]
 80092ec:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80092ee:	0c1b      	lsrs	r3, r3, #16
 80092f0:	b2da      	uxtb	r2, r3
 80092f2:	683b      	ldr	r3, [r7, #0]
 80092f4:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 80092f6:	687b      	ldr	r3, [r7, #4]
 80092f8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80092fa:	0a1b      	lsrs	r3, r3, #8
 80092fc:	b2da      	uxtb	r2, r3
 80092fe:	683b      	ldr	r3, [r7, #0]
 8009300:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 8009302:	687b      	ldr	r3, [r7, #4]
 8009304:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009306:	b2da      	uxtb	r2, r3
 8009308:	683b      	ldr	r3, [r7, #0]
 800930a:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 800930c:	687b      	ldr	r3, [r7, #4]
 800930e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009310:	0d1b      	lsrs	r3, r3, #20
 8009312:	b29a      	uxth	r2, r3
 8009314:	683b      	ldr	r3, [r7, #0]
 8009316:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 8009318:	687b      	ldr	r3, [r7, #4]
 800931a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800931c:	0c1b      	lsrs	r3, r3, #16
 800931e:	b2db      	uxtb	r3, r3
 8009320:	f003 030f 	and.w	r3, r3, #15
 8009324:	b2da      	uxtb	r2, r3
 8009326:	683b      	ldr	r3, [r7, #0]
 8009328:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 800932a:	687b      	ldr	r3, [r7, #4]
 800932c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800932e:	0bdb      	lsrs	r3, r3, #15
 8009330:	b2db      	uxtb	r3, r3
 8009332:	f003 0301 	and.w	r3, r3, #1
 8009336:	b2da      	uxtb	r2, r3
 8009338:	683b      	ldr	r3, [r7, #0]
 800933a:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 800933c:	687b      	ldr	r3, [r7, #4]
 800933e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009340:	0b9b      	lsrs	r3, r3, #14
 8009342:	b2db      	uxtb	r3, r3
 8009344:	f003 0301 	and.w	r3, r3, #1
 8009348:	b2da      	uxtb	r2, r3
 800934a:	683b      	ldr	r3, [r7, #0]
 800934c:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 800934e:	687b      	ldr	r3, [r7, #4]
 8009350:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009352:	0b5b      	lsrs	r3, r3, #13
 8009354:	b2db      	uxtb	r3, r3
 8009356:	f003 0301 	and.w	r3, r3, #1
 800935a:	b2da      	uxtb	r2, r3
 800935c:	683b      	ldr	r3, [r7, #0]
 800935e:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 8009360:	687b      	ldr	r3, [r7, #4]
 8009362:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009364:	0b1b      	lsrs	r3, r3, #12
 8009366:	b2db      	uxtb	r3, r3
 8009368:	f003 0301 	and.w	r3, r3, #1
 800936c:	b2da      	uxtb	r2, r3
 800936e:	683b      	ldr	r3, [r7, #0]
 8009370:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 8009372:	683b      	ldr	r3, [r7, #0]
 8009374:	2200      	movs	r2, #0
 8009376:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 8009378:	687b      	ldr	r3, [r7, #4]
 800937a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800937c:	2b00      	cmp	r3, #0
 800937e:	d163      	bne.n	8009448 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 8009380:	687b      	ldr	r3, [r7, #4]
 8009382:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009384:	009a      	lsls	r2, r3, #2
 8009386:	f640 73fc 	movw	r3, #4092	; 0xffc
 800938a:	4013      	ands	r3, r2
 800938c:	687a      	ldr	r2, [r7, #4]
 800938e:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8009390:	0f92      	lsrs	r2, r2, #30
 8009392:	431a      	orrs	r2, r3
 8009394:	683b      	ldr	r3, [r7, #0]
 8009396:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 8009398:	687b      	ldr	r3, [r7, #4]
 800939a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800939c:	0edb      	lsrs	r3, r3, #27
 800939e:	b2db      	uxtb	r3, r3
 80093a0:	f003 0307 	and.w	r3, r3, #7
 80093a4:	b2da      	uxtb	r2, r3
 80093a6:	683b      	ldr	r3, [r7, #0]
 80093a8:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 80093aa:	687b      	ldr	r3, [r7, #4]
 80093ac:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80093ae:	0e1b      	lsrs	r3, r3, #24
 80093b0:	b2db      	uxtb	r3, r3
 80093b2:	f003 0307 	and.w	r3, r3, #7
 80093b6:	b2da      	uxtb	r2, r3
 80093b8:	683b      	ldr	r3, [r7, #0]
 80093ba:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 80093bc:	687b      	ldr	r3, [r7, #4]
 80093be:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80093c0:	0d5b      	lsrs	r3, r3, #21
 80093c2:	b2db      	uxtb	r3, r3
 80093c4:	f003 0307 	and.w	r3, r3, #7
 80093c8:	b2da      	uxtb	r2, r3
 80093ca:	683b      	ldr	r3, [r7, #0]
 80093cc:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 80093ce:	687b      	ldr	r3, [r7, #4]
 80093d0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80093d2:	0c9b      	lsrs	r3, r3, #18
 80093d4:	b2db      	uxtb	r3, r3
 80093d6:	f003 0307 	and.w	r3, r3, #7
 80093da:	b2da      	uxtb	r2, r3
 80093dc:	683b      	ldr	r3, [r7, #0]
 80093de:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 80093e0:	687b      	ldr	r3, [r7, #4]
 80093e2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80093e4:	0bdb      	lsrs	r3, r3, #15
 80093e6:	b2db      	uxtb	r3, r3
 80093e8:	f003 0307 	and.w	r3, r3, #7
 80093ec:	b2da      	uxtb	r2, r3
 80093ee:	683b      	ldr	r3, [r7, #0]
 80093f0:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 80093f2:	683b      	ldr	r3, [r7, #0]
 80093f4:	691b      	ldr	r3, [r3, #16]
 80093f6:	1c5a      	adds	r2, r3, #1
 80093f8:	687b      	ldr	r3, [r7, #4]
 80093fa:	64da      	str	r2, [r3, #76]	; 0x4c
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 80093fc:	683b      	ldr	r3, [r7, #0]
 80093fe:	7e1b      	ldrb	r3, [r3, #24]
 8009400:	b2db      	uxtb	r3, r3
 8009402:	f003 0307 	and.w	r3, r3, #7
 8009406:	3302      	adds	r3, #2
 8009408:	2201      	movs	r2, #1
 800940a:	fa02 f303 	lsl.w	r3, r2, r3
 800940e:	687a      	ldr	r2, [r7, #4]
 8009410:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8009412:	fb02 f203 	mul.w	r2, r2, r3
 8009416:	687b      	ldr	r3, [r7, #4]
 8009418:	64da      	str	r2, [r3, #76]	; 0x4c
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 800941a:	683b      	ldr	r3, [r7, #0]
 800941c:	7a1b      	ldrb	r3, [r3, #8]
 800941e:	b2db      	uxtb	r3, r3
 8009420:	f003 030f 	and.w	r3, r3, #15
 8009424:	2201      	movs	r2, #1
 8009426:	409a      	lsls	r2, r3
 8009428:	687b      	ldr	r3, [r7, #4]
 800942a:	651a      	str	r2, [r3, #80]	; 0x50

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 800942c:	687b      	ldr	r3, [r7, #4]
 800942e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009430:	687a      	ldr	r2, [r7, #4]
 8009432:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8009434:	0a52      	lsrs	r2, r2, #9
 8009436:	fb02 f203 	mul.w	r2, r2, r3
 800943a:	687b      	ldr	r3, [r7, #4]
 800943c:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.LogBlockSize = 512U;
 800943e:	687b      	ldr	r3, [r7, #4]
 8009440:	f44f 7200 	mov.w	r2, #512	; 0x200
 8009444:	659a      	str	r2, [r3, #88]	; 0x58
 8009446:	e031      	b.n	80094ac <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 8009448:	687b      	ldr	r3, [r7, #4]
 800944a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800944c:	2b01      	cmp	r3, #1
 800944e:	d11d      	bne.n	800948c <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 8009450:	687b      	ldr	r3, [r7, #4]
 8009452:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009454:	041b      	lsls	r3, r3, #16
 8009456:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 800945a:	687b      	ldr	r3, [r7, #4]
 800945c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800945e:	0c1b      	lsrs	r3, r3, #16
 8009460:	431a      	orrs	r2, r3
 8009462:	683b      	ldr	r3, [r7, #0]
 8009464:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 8009466:	683b      	ldr	r3, [r7, #0]
 8009468:	691b      	ldr	r3, [r3, #16]
 800946a:	3301      	adds	r3, #1
 800946c:	029a      	lsls	r2, r3, #10
 800946e:	687b      	ldr	r3, [r7, #4]
 8009470:	64da      	str	r2, [r3, #76]	; 0x4c
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 8009472:	687b      	ldr	r3, [r7, #4]
 8009474:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8009476:	687b      	ldr	r3, [r7, #4]
 8009478:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockSize = 512U;
 800947a:	687b      	ldr	r3, [r7, #4]
 800947c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8009480:	651a      	str	r2, [r3, #80]	; 0x50
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 8009482:	687b      	ldr	r3, [r7, #4]
 8009484:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8009486:	687b      	ldr	r3, [r7, #4]
 8009488:	659a      	str	r2, [r3, #88]	; 0x58
 800948a:	e00f      	b.n	80094ac <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800948c:	687b      	ldr	r3, [r7, #4]
 800948e:	681b      	ldr	r3, [r3, #0]
 8009490:	4a58      	ldr	r2, [pc, #352]	; (80095f4 <HAL_SD_GetCardCSD+0x344>)
 8009492:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8009494:	687b      	ldr	r3, [r7, #4]
 8009496:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009498:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800949c:	687b      	ldr	r3, [r7, #4]
 800949e:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 80094a0:	687b      	ldr	r3, [r7, #4]
 80094a2:	2201      	movs	r2, #1
 80094a4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 80094a8:	2301      	movs	r3, #1
 80094aa:	e09d      	b.n	80095e8 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 80094ac:	687b      	ldr	r3, [r7, #4]
 80094ae:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80094b0:	0b9b      	lsrs	r3, r3, #14
 80094b2:	b2db      	uxtb	r3, r3
 80094b4:	f003 0301 	and.w	r3, r3, #1
 80094b8:	b2da      	uxtb	r2, r3
 80094ba:	683b      	ldr	r3, [r7, #0]
 80094bc:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 80094be:	687b      	ldr	r3, [r7, #4]
 80094c0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80094c2:	09db      	lsrs	r3, r3, #7
 80094c4:	b2db      	uxtb	r3, r3
 80094c6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80094ca:	b2da      	uxtb	r2, r3
 80094cc:	683b      	ldr	r3, [r7, #0]
 80094ce:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 80094d0:	687b      	ldr	r3, [r7, #4]
 80094d2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80094d4:	b2db      	uxtb	r3, r3
 80094d6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80094da:	b2da      	uxtb	r2, r3
 80094dc:	683b      	ldr	r3, [r7, #0]
 80094de:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 80094e0:	687b      	ldr	r3, [r7, #4]
 80094e2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80094e4:	0fdb      	lsrs	r3, r3, #31
 80094e6:	b2da      	uxtb	r2, r3
 80094e8:	683b      	ldr	r3, [r7, #0]
 80094ea:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 80094ec:	687b      	ldr	r3, [r7, #4]
 80094ee:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80094f0:	0f5b      	lsrs	r3, r3, #29
 80094f2:	b2db      	uxtb	r3, r3
 80094f4:	f003 0303 	and.w	r3, r3, #3
 80094f8:	b2da      	uxtb	r2, r3
 80094fa:	683b      	ldr	r3, [r7, #0]
 80094fc:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 80094fe:	687b      	ldr	r3, [r7, #4]
 8009500:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009502:	0e9b      	lsrs	r3, r3, #26
 8009504:	b2db      	uxtb	r3, r3
 8009506:	f003 0307 	and.w	r3, r3, #7
 800950a:	b2da      	uxtb	r2, r3
 800950c:	683b      	ldr	r3, [r7, #0]
 800950e:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 8009510:	687b      	ldr	r3, [r7, #4]
 8009512:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009514:	0d9b      	lsrs	r3, r3, #22
 8009516:	b2db      	uxtb	r3, r3
 8009518:	f003 030f 	and.w	r3, r3, #15
 800951c:	b2da      	uxtb	r2, r3
 800951e:	683b      	ldr	r3, [r7, #0]
 8009520:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 8009522:	687b      	ldr	r3, [r7, #4]
 8009524:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009526:	0d5b      	lsrs	r3, r3, #21
 8009528:	b2db      	uxtb	r3, r3
 800952a:	f003 0301 	and.w	r3, r3, #1
 800952e:	b2da      	uxtb	r2, r3
 8009530:	683b      	ldr	r3, [r7, #0]
 8009532:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 8009536:	683b      	ldr	r3, [r7, #0]
 8009538:	2200      	movs	r2, #0
 800953a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 800953e:	687b      	ldr	r3, [r7, #4]
 8009540:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009542:	0c1b      	lsrs	r3, r3, #16
 8009544:	b2db      	uxtb	r3, r3
 8009546:	f003 0301 	and.w	r3, r3, #1
 800954a:	b2da      	uxtb	r2, r3
 800954c:	683b      	ldr	r3, [r7, #0]
 800954e:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 8009552:	687b      	ldr	r3, [r7, #4]
 8009554:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009556:	0bdb      	lsrs	r3, r3, #15
 8009558:	b2db      	uxtb	r3, r3
 800955a:	f003 0301 	and.w	r3, r3, #1
 800955e:	b2da      	uxtb	r2, r3
 8009560:	683b      	ldr	r3, [r7, #0]
 8009562:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 8009566:	687b      	ldr	r3, [r7, #4]
 8009568:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800956a:	0b9b      	lsrs	r3, r3, #14
 800956c:	b2db      	uxtb	r3, r3
 800956e:	f003 0301 	and.w	r3, r3, #1
 8009572:	b2da      	uxtb	r2, r3
 8009574:	683b      	ldr	r3, [r7, #0]
 8009576:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 800957a:	687b      	ldr	r3, [r7, #4]
 800957c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800957e:	0b5b      	lsrs	r3, r3, #13
 8009580:	b2db      	uxtb	r3, r3
 8009582:	f003 0301 	and.w	r3, r3, #1
 8009586:	b2da      	uxtb	r2, r3
 8009588:	683b      	ldr	r3, [r7, #0]
 800958a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 800958e:	687b      	ldr	r3, [r7, #4]
 8009590:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009592:	0b1b      	lsrs	r3, r3, #12
 8009594:	b2db      	uxtb	r3, r3
 8009596:	f003 0301 	and.w	r3, r3, #1
 800959a:	b2da      	uxtb	r2, r3
 800959c:	683b      	ldr	r3, [r7, #0]
 800959e:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 80095a2:	687b      	ldr	r3, [r7, #4]
 80095a4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80095a6:	0a9b      	lsrs	r3, r3, #10
 80095a8:	b2db      	uxtb	r3, r3
 80095aa:	f003 0303 	and.w	r3, r3, #3
 80095ae:	b2da      	uxtb	r2, r3
 80095b0:	683b      	ldr	r3, [r7, #0]
 80095b2:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 80095b6:	687b      	ldr	r3, [r7, #4]
 80095b8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80095ba:	0a1b      	lsrs	r3, r3, #8
 80095bc:	b2db      	uxtb	r3, r3
 80095be:	f003 0303 	and.w	r3, r3, #3
 80095c2:	b2da      	uxtb	r2, r3
 80095c4:	683b      	ldr	r3, [r7, #0]
 80095c6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 80095ca:	687b      	ldr	r3, [r7, #4]
 80095cc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80095ce:	085b      	lsrs	r3, r3, #1
 80095d0:	b2db      	uxtb	r3, r3
 80095d2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80095d6:	b2da      	uxtb	r2, r3
 80095d8:	683b      	ldr	r3, [r7, #0]
 80095da:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 80095de:	683b      	ldr	r3, [r7, #0]
 80095e0:	2201      	movs	r2, #1
 80095e2:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 80095e6:	2300      	movs	r3, #0
}
 80095e8:	4618      	mov	r0, r3
 80095ea:	370c      	adds	r7, #12
 80095ec:	46bd      	mov	sp, r7
 80095ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095f2:	4770      	bx	lr
 80095f4:	1fe00fff 	.word	0x1fe00fff

080095f8 <HAL_SD_GetCardStatus>:
  * @param  pStatus: Pointer to the HAL_SD_CardStatusTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardStatus(SD_HandleTypeDef *hsd, HAL_SD_CardStatusTypeDef *pStatus)
{
 80095f8:	b580      	push	{r7, lr}
 80095fa:	b094      	sub	sp, #80	; 0x50
 80095fc:	af00      	add	r7, sp, #0
 80095fe:	6078      	str	r0, [r7, #4]
 8009600:	6039      	str	r1, [r7, #0]
  uint32_t sd_status[16];
  uint32_t errorstate;
  HAL_StatusTypeDef status = HAL_OK;
 8009602:	2300      	movs	r3, #0
 8009604:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f

  errorstate = SD_SendSDStatus(hsd, sd_status);
 8009608:	f107 0308 	add.w	r3, r7, #8
 800960c:	4619      	mov	r1, r3
 800960e:	6878      	ldr	r0, [r7, #4]
 8009610:	f000 fb64 	bl	8009cdc <SD_SendSDStatus>
 8009614:	64b8      	str	r0, [r7, #72]	; 0x48
  if(errorstate != HAL_SD_ERROR_NONE)
 8009616:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009618:	2b00      	cmp	r3, #0
 800961a:	d011      	beq.n	8009640 <HAL_SD_GetCardStatus+0x48>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800961c:	687b      	ldr	r3, [r7, #4]
 800961e:	681b      	ldr	r3, [r3, #0]
 8009620:	4a4f      	ldr	r2, [pc, #316]	; (8009760 <HAL_SD_GetCardStatus+0x168>)
 8009622:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 8009624:	687b      	ldr	r3, [r7, #4]
 8009626:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009628:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800962a:	431a      	orrs	r2, r3
 800962c:	687b      	ldr	r3, [r7, #4]
 800962e:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8009630:	687b      	ldr	r3, [r7, #4]
 8009632:	2201      	movs	r2, #1
 8009634:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    status = HAL_ERROR;
 8009638:	2301      	movs	r3, #1
 800963a:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 800963e:	e070      	b.n	8009722 <HAL_SD_GetCardStatus+0x12a>
  }
  else
  {
    pStatus->DataBusWidth = (uint8_t)((sd_status[0] & 0xC0U) >> 6U);
 8009640:	68bb      	ldr	r3, [r7, #8]
 8009642:	099b      	lsrs	r3, r3, #6
 8009644:	b2db      	uxtb	r3, r3
 8009646:	f003 0303 	and.w	r3, r3, #3
 800964a:	b2da      	uxtb	r2, r3
 800964c:	683b      	ldr	r3, [r7, #0]
 800964e:	701a      	strb	r2, [r3, #0]

    pStatus->SecuredMode = (uint8_t)((sd_status[0] & 0x20U) >> 5U);
 8009650:	68bb      	ldr	r3, [r7, #8]
 8009652:	095b      	lsrs	r3, r3, #5
 8009654:	b2db      	uxtb	r3, r3
 8009656:	f003 0301 	and.w	r3, r3, #1
 800965a:	b2da      	uxtb	r2, r3
 800965c:	683b      	ldr	r3, [r7, #0]
 800965e:	705a      	strb	r2, [r3, #1]

    pStatus->CardType = (uint16_t)(((sd_status[0] & 0x00FF0000U) >> 8U) | ((sd_status[0] & 0xFF000000U) >> 24U));
 8009660:	68bb      	ldr	r3, [r7, #8]
 8009662:	0a1b      	lsrs	r3, r3, #8
 8009664:	b29b      	uxth	r3, r3
 8009666:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800966a:	b29a      	uxth	r2, r3
 800966c:	68bb      	ldr	r3, [r7, #8]
 800966e:	0e1b      	lsrs	r3, r3, #24
 8009670:	b29b      	uxth	r3, r3
 8009672:	4313      	orrs	r3, r2
 8009674:	b29a      	uxth	r2, r3
 8009676:	683b      	ldr	r3, [r7, #0]
 8009678:	805a      	strh	r2, [r3, #2]

    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 800967a:	68fb      	ldr	r3, [r7, #12]
 800967c:	061a      	lsls	r2, r3, #24
 800967e:	68fb      	ldr	r3, [r7, #12]
 8009680:	021b      	lsls	r3, r3, #8
 8009682:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8009686:	431a      	orrs	r2, r3
                                  ((sd_status[1] & 0xFF0000U) >> 8U) | ((sd_status[1] & 0xFF000000U) >> 24U));
 8009688:	68fb      	ldr	r3, [r7, #12]
 800968a:	0a1b      	lsrs	r3, r3, #8
 800968c:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 8009690:	431a      	orrs	r2, r3
                                  ((sd_status[1] & 0xFF0000U) >> 8U) | ((sd_status[1] & 0xFF000000U) >> 24U));
 8009692:	68fb      	ldr	r3, [r7, #12]
 8009694:	0e1b      	lsrs	r3, r3, #24
 8009696:	431a      	orrs	r2, r3
    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 8009698:	683b      	ldr	r3, [r7, #0]
 800969a:	605a      	str	r2, [r3, #4]

    pStatus->SpeedClass = (uint8_t)(sd_status[2] & 0xFFU);
 800969c:	693b      	ldr	r3, [r7, #16]
 800969e:	b2da      	uxtb	r2, r3
 80096a0:	683b      	ldr	r3, [r7, #0]
 80096a2:	721a      	strb	r2, [r3, #8]

    pStatus->PerformanceMove = (uint8_t)((sd_status[2] & 0xFF00U) >> 8U);
 80096a4:	693b      	ldr	r3, [r7, #16]
 80096a6:	0a1b      	lsrs	r3, r3, #8
 80096a8:	b2da      	uxtb	r2, r3
 80096aa:	683b      	ldr	r3, [r7, #0]
 80096ac:	725a      	strb	r2, [r3, #9]

    pStatus->AllocationUnitSize = (uint8_t)((sd_status[2] & 0xF00000U) >> 20U);
 80096ae:	693b      	ldr	r3, [r7, #16]
 80096b0:	0d1b      	lsrs	r3, r3, #20
 80096b2:	b2db      	uxtb	r3, r3
 80096b4:	f003 030f 	and.w	r3, r3, #15
 80096b8:	b2da      	uxtb	r2, r3
 80096ba:	683b      	ldr	r3, [r7, #0]
 80096bc:	729a      	strb	r2, [r3, #10]

    pStatus->EraseSize = (uint16_t)(((sd_status[2] & 0xFF000000U) >> 16U) | (sd_status[3] & 0xFFU));
 80096be:	693b      	ldr	r3, [r7, #16]
 80096c0:	0c1b      	lsrs	r3, r3, #16
 80096c2:	b29b      	uxth	r3, r3
 80096c4:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80096c8:	b29a      	uxth	r2, r3
 80096ca:	697b      	ldr	r3, [r7, #20]
 80096cc:	b29b      	uxth	r3, r3
 80096ce:	b2db      	uxtb	r3, r3
 80096d0:	b29b      	uxth	r3, r3
 80096d2:	4313      	orrs	r3, r2
 80096d4:	b29a      	uxth	r2, r3
 80096d6:	683b      	ldr	r3, [r7, #0]
 80096d8:	819a      	strh	r2, [r3, #12]

    pStatus->EraseTimeout = (uint8_t)((sd_status[3] & 0xFC00U) >> 10U);
 80096da:	697b      	ldr	r3, [r7, #20]
 80096dc:	0a9b      	lsrs	r3, r3, #10
 80096de:	b2db      	uxtb	r3, r3
 80096e0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80096e4:	b2da      	uxtb	r2, r3
 80096e6:	683b      	ldr	r3, [r7, #0]
 80096e8:	739a      	strb	r2, [r3, #14]

    pStatus->EraseOffset = (uint8_t)((sd_status[3] & 0x0300U) >> 8U);
 80096ea:	697b      	ldr	r3, [r7, #20]
 80096ec:	0a1b      	lsrs	r3, r3, #8
 80096ee:	b2db      	uxtb	r3, r3
 80096f0:	f003 0303 	and.w	r3, r3, #3
 80096f4:	b2da      	uxtb	r2, r3
 80096f6:	683b      	ldr	r3, [r7, #0]
 80096f8:	73da      	strb	r2, [r3, #15]

    pStatus->UhsSpeedGrade = (uint8_t)((sd_status[3] & 0x00F0U) >> 4U);
 80096fa:	697b      	ldr	r3, [r7, #20]
 80096fc:	091b      	lsrs	r3, r3, #4
 80096fe:	b2db      	uxtb	r3, r3
 8009700:	f003 030f 	and.w	r3, r3, #15
 8009704:	b2da      	uxtb	r2, r3
 8009706:	683b      	ldr	r3, [r7, #0]
 8009708:	741a      	strb	r2, [r3, #16]
    pStatus->UhsAllocationUnitSize = (uint8_t)(sd_status[3] & 0x000FU) ;
 800970a:	697b      	ldr	r3, [r7, #20]
 800970c:	b2db      	uxtb	r3, r3
 800970e:	f003 030f 	and.w	r3, r3, #15
 8009712:	b2da      	uxtb	r2, r3
 8009714:	683b      	ldr	r3, [r7, #0]
 8009716:	745a      	strb	r2, [r3, #17]
    pStatus->VideoSpeedClass = (uint8_t)((sd_status[4] & 0xFF000000U) >> 24U);
 8009718:	69bb      	ldr	r3, [r7, #24]
 800971a:	0e1b      	lsrs	r3, r3, #24
 800971c:	b2da      	uxtb	r2, r3
 800971e:	683b      	ldr	r3, [r7, #0]
 8009720:	749a      	strb	r2, [r3, #18]
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8009722:	687b      	ldr	r3, [r7, #4]
 8009724:	681b      	ldr	r3, [r3, #0]
 8009726:	f44f 7100 	mov.w	r1, #512	; 0x200
 800972a:	4618      	mov	r0, r3
 800972c:	f002 f9a2 	bl	800ba74 <SDMMC_CmdBlockLength>
 8009730:	64b8      	str	r0, [r7, #72]	; 0x48
  if(errorstate != HAL_SD_ERROR_NONE)
 8009732:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009734:	2b00      	cmp	r3, #0
 8009736:	d00d      	beq.n	8009754 <HAL_SD_GetCardStatus+0x15c>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8009738:	687b      	ldr	r3, [r7, #4]
 800973a:	681b      	ldr	r3, [r3, #0]
 800973c:	4a08      	ldr	r2, [pc, #32]	; (8009760 <HAL_SD_GetCardStatus+0x168>)
 800973e:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode = errorstate;
 8009740:	687b      	ldr	r3, [r7, #4]
 8009742:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8009744:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8009746:	687b      	ldr	r3, [r7, #4]
 8009748:	2201      	movs	r2, #1
 800974a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    status = HAL_ERROR;
 800974e:	2301      	movs	r3, #1
 8009750:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
  }

  return status;
 8009754:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
}
 8009758:	4618      	mov	r0, r3
 800975a:	3750      	adds	r7, #80	; 0x50
 800975c:	46bd      	mov	sp, r7
 800975e:	bd80      	pop	{r7, pc}
 8009760:	1fe00fff 	.word	0x1fe00fff

08009764 <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 8009764:	b480      	push	{r7}
 8009766:	b083      	sub	sp, #12
 8009768:	af00      	add	r7, sp, #0
 800976a:	6078      	str	r0, [r7, #4]
 800976c:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 800976e:	687b      	ldr	r3, [r7, #4]
 8009770:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8009772:	683b      	ldr	r3, [r7, #0]
 8009774:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 8009776:	687b      	ldr	r3, [r7, #4]
 8009778:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800977a:	683b      	ldr	r3, [r7, #0]
 800977c:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 800977e:	687b      	ldr	r3, [r7, #4]
 8009780:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8009782:	683b      	ldr	r3, [r7, #0]
 8009784:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 8009786:	687b      	ldr	r3, [r7, #4]
 8009788:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800978a:	683b      	ldr	r3, [r7, #0]
 800978c:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 800978e:	687b      	ldr	r3, [r7, #4]
 8009790:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8009792:	683b      	ldr	r3, [r7, #0]
 8009794:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 8009796:	687b      	ldr	r3, [r7, #4]
 8009798:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800979a:	683b      	ldr	r3, [r7, #0]
 800979c:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 800979e:	687b      	ldr	r3, [r7, #4]
 80097a0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80097a2:	683b      	ldr	r3, [r7, #0]
 80097a4:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 80097a6:	687b      	ldr	r3, [r7, #4]
 80097a8:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80097aa:	683b      	ldr	r3, [r7, #0]
 80097ac:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 80097ae:	2300      	movs	r3, #0
}
 80097b0:	4618      	mov	r0, r3
 80097b2:	370c      	adds	r7, #12
 80097b4:	46bd      	mov	sp, r7
 80097b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097ba:	4770      	bx	lr

080097bc <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDMMC_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDMMC_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 80097bc:	b5b0      	push	{r4, r5, r7, lr}
 80097be:	b08e      	sub	sp, #56	; 0x38
 80097c0:	af04      	add	r7, sp, #16
 80097c2:	6078      	str	r0, [r7, #4]
 80097c4:	6039      	str	r1, [r7, #0]
  SDMMC_InitTypeDef Init;
  uint32_t errorstate;
  HAL_StatusTypeDef status = HAL_OK;
 80097c6:	2300      	movs	r3, #0
 80097c8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  /* Check the parameters */
  assert_param(IS_SDMMC_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 80097cc:	687b      	ldr	r3, [r7, #4]
 80097ce:	2203      	movs	r2, #3
 80097d0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(hsd->SdCard.CardType != CARD_SECURED)
 80097d4:	687b      	ldr	r3, [r7, #4]
 80097d6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80097d8:	2b03      	cmp	r3, #3
 80097da:	d02e      	beq.n	800983a <HAL_SD_ConfigWideBusOperation+0x7e>
  {
    if(WideMode == SDMMC_BUS_WIDE_8B)
 80097dc:	683b      	ldr	r3, [r7, #0]
 80097de:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80097e2:	d106      	bne.n	80097f2 <HAL_SD_ConfigWideBusOperation+0x36>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80097e4:	687b      	ldr	r3, [r7, #4]
 80097e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80097e8:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80097ec:	687b      	ldr	r3, [r7, #4]
 80097ee:	639a      	str	r2, [r3, #56]	; 0x38
 80097f0:	e029      	b.n	8009846 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDMMC_BUS_WIDE_4B)
 80097f2:	683b      	ldr	r3, [r7, #0]
 80097f4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80097f8:	d10a      	bne.n	8009810 <HAL_SD_ConfigWideBusOperation+0x54>
    {
      errorstate = SD_WideBus_Enable(hsd);
 80097fa:	6878      	ldr	r0, [r7, #4]
 80097fc:	f000 fb66 	bl	8009ecc <SD_WideBus_Enable>
 8009800:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 8009802:	687b      	ldr	r3, [r7, #4]
 8009804:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009806:	6a3b      	ldr	r3, [r7, #32]
 8009808:	431a      	orrs	r2, r3
 800980a:	687b      	ldr	r3, [r7, #4]
 800980c:	639a      	str	r2, [r3, #56]	; 0x38
 800980e:	e01a      	b.n	8009846 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDMMC_BUS_WIDE_1B)
 8009810:	683b      	ldr	r3, [r7, #0]
 8009812:	2b00      	cmp	r3, #0
 8009814:	d10a      	bne.n	800982c <HAL_SD_ConfigWideBusOperation+0x70>
    {
      errorstate = SD_WideBus_Disable(hsd);
 8009816:	6878      	ldr	r0, [r7, #4]
 8009818:	f000 fba3 	bl	8009f62 <SD_WideBus_Disable>
 800981c:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 800981e:	687b      	ldr	r3, [r7, #4]
 8009820:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009822:	6a3b      	ldr	r3, [r7, #32]
 8009824:	431a      	orrs	r2, r3
 8009826:	687b      	ldr	r3, [r7, #4]
 8009828:	639a      	str	r2, [r3, #56]	; 0x38
 800982a:	e00c      	b.n	8009846 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800982c:	687b      	ldr	r3, [r7, #4]
 800982e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009830:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8009834:	687b      	ldr	r3, [r7, #4]
 8009836:	639a      	str	r2, [r3, #56]	; 0x38
 8009838:	e005      	b.n	8009846 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
  }
  else
  {
    /* MMC Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800983a:	687b      	ldr	r3, [r7, #4]
 800983c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800983e:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8009842:	687b      	ldr	r3, [r7, #4]
 8009844:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 8009846:	687b      	ldr	r3, [r7, #4]
 8009848:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800984a:	2b00      	cmp	r3, #0
 800984c:	d007      	beq.n	800985e <HAL_SD_ConfigWideBusOperation+0xa2>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800984e:	687b      	ldr	r3, [r7, #4]
 8009850:	681b      	ldr	r3, [r3, #0]
 8009852:	4a2e      	ldr	r2, [pc, #184]	; (800990c <HAL_SD_ConfigWideBusOperation+0x150>)
 8009854:	639a      	str	r2, [r3, #56]	; 0x38
    status = HAL_ERROR;
 8009856:	2301      	movs	r3, #1
 8009858:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800985c:	e034      	b.n	80098c8 <HAL_SD_ConfigWideBusOperation+0x10c>
  }
  else
  {
    /* Configure the SDMMC peripheral */
    Init.ClockEdge           = hsd->Init.ClockEdge;
 800985e:	687b      	ldr	r3, [r7, #4]
 8009860:	685b      	ldr	r3, [r3, #4]
 8009862:	60bb      	str	r3, [r7, #8]
    Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 8009864:	687b      	ldr	r3, [r7, #4]
 8009866:	689b      	ldr	r3, [r3, #8]
 8009868:	60fb      	str	r3, [r7, #12]
    Init.BusWide             = WideMode;
 800986a:	683b      	ldr	r3, [r7, #0]
 800986c:	613b      	str	r3, [r7, #16]
    Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 800986e:	687b      	ldr	r3, [r7, #4]
 8009870:	691b      	ldr	r3, [r3, #16]
 8009872:	617b      	str	r3, [r7, #20]

    /* Check if user Clock div < Normal speed 25Mhz, no change in Clockdiv */
    if(hsd->Init.ClockDiv >= SDMMC_NSpeed_CLK_DIV)
 8009874:	687b      	ldr	r3, [r7, #4]
 8009876:	695b      	ldr	r3, [r3, #20]
 8009878:	2b03      	cmp	r3, #3
 800987a:	d903      	bls.n	8009884 <HAL_SD_ConfigWideBusOperation+0xc8>
    {
      Init.ClockDiv = hsd->Init.ClockDiv;
 800987c:	687b      	ldr	r3, [r7, #4]
 800987e:	695b      	ldr	r3, [r3, #20]
 8009880:	61bb      	str	r3, [r7, #24]
 8009882:	e012      	b.n	80098aa <HAL_SD_ConfigWideBusOperation+0xee>
    }
    else if (hsd->SdCard.CardSpeed == CARD_ULTRA_HIGH_SPEED)
 8009884:	687b      	ldr	r3, [r7, #4]
 8009886:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009888:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800988c:	d103      	bne.n	8009896 <HAL_SD_ConfigWideBusOperation+0xda>
    {
      /* UltraHigh speed SD card,user Clock div */
      Init.ClockDiv = hsd->Init.ClockDiv;
 800988e:	687b      	ldr	r3, [r7, #4]
 8009890:	695b      	ldr	r3, [r3, #20]
 8009892:	61bb      	str	r3, [r7, #24]
 8009894:	e009      	b.n	80098aa <HAL_SD_ConfigWideBusOperation+0xee>
    }
    else if (hsd->SdCard.CardSpeed == CARD_HIGH_SPEED)
 8009896:	687b      	ldr	r3, [r7, #4]
 8009898:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800989a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800989e:	d102      	bne.n	80098a6 <HAL_SD_ConfigWideBusOperation+0xea>
    {
      /* High speed SD card, Max Frequency = 50Mhz */
      Init.ClockDiv = SDMMC_HSpeed_CLK_DIV;
 80098a0:	2302      	movs	r3, #2
 80098a2:	61bb      	str	r3, [r7, #24]
 80098a4:	e001      	b.n	80098aa <HAL_SD_ConfigWideBusOperation+0xee>
    }
    else
    {
      /* No High speed SD card, Max Frequency = 25Mhz */
      Init.ClockDiv = SDMMC_NSpeed_CLK_DIV;
 80098a6:	2304      	movs	r3, #4
 80098a8:	61bb      	str	r3, [r7, #24]
    }

    (void)SDMMC_Init(hsd->Instance, Init);
 80098aa:	687b      	ldr	r3, [r7, #4]
 80098ac:	681d      	ldr	r5, [r3, #0]
 80098ae:	466c      	mov	r4, sp
 80098b0:	f107 0314 	add.w	r3, r7, #20
 80098b4:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80098b8:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80098bc:	f107 0308 	add.w	r3, r7, #8
 80098c0:	cb0e      	ldmia	r3, {r1, r2, r3}
 80098c2:	4628      	mov	r0, r5
 80098c4:	f001 fff8 	bl	800b8b8 <SDMMC_Init>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 80098c8:	687b      	ldr	r3, [r7, #4]
 80098ca:	681b      	ldr	r3, [r3, #0]
 80098cc:	f44f 7100 	mov.w	r1, #512	; 0x200
 80098d0:	4618      	mov	r0, r3
 80098d2:	f002 f8cf 	bl	800ba74 <SDMMC_CmdBlockLength>
 80098d6:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 80098d8:	6a3b      	ldr	r3, [r7, #32]
 80098da:	2b00      	cmp	r3, #0
 80098dc:	d00c      	beq.n	80098f8 <HAL_SD_ConfigWideBusOperation+0x13c>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80098de:	687b      	ldr	r3, [r7, #4]
 80098e0:	681b      	ldr	r3, [r3, #0]
 80098e2:	4a0a      	ldr	r2, [pc, #40]	; (800990c <HAL_SD_ConfigWideBusOperation+0x150>)
 80098e4:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 80098e6:	687b      	ldr	r3, [r7, #4]
 80098e8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80098ea:	6a3b      	ldr	r3, [r7, #32]
 80098ec:	431a      	orrs	r2, r3
 80098ee:	687b      	ldr	r3, [r7, #4]
 80098f0:	639a      	str	r2, [r3, #56]	; 0x38
    status = HAL_ERROR;
 80098f2:	2301      	movs	r3, #1
 80098f4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 80098f8:	687b      	ldr	r3, [r7, #4]
 80098fa:	2201      	movs	r2, #1
 80098fc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return status;
 8009900:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8009904:	4618      	mov	r0, r3
 8009906:	3728      	adds	r7, #40	; 0x28
 8009908:	46bd      	mov	sp, r7
 800990a:	bdb0      	pop	{r4, r5, r7, pc}
 800990c:	1fe00fff 	.word	0x1fe00fff

08009910 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 8009910:	b580      	push	{r7, lr}
 8009912:	b086      	sub	sp, #24
 8009914:	af00      	add	r7, sp, #0
 8009916:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 8009918:	2300      	movs	r3, #0
 800991a:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 800991c:	f107 030c 	add.w	r3, r7, #12
 8009920:	4619      	mov	r1, r3
 8009922:	6878      	ldr	r0, [r7, #4]
 8009924:	f000 faaa 	bl	8009e7c <SD_SendStatus>
 8009928:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 800992a:	697b      	ldr	r3, [r7, #20]
 800992c:	2b00      	cmp	r3, #0
 800992e:	d005      	beq.n	800993c <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 8009930:	687b      	ldr	r3, [r7, #4]
 8009932:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009934:	697b      	ldr	r3, [r7, #20]
 8009936:	431a      	orrs	r2, r3
 8009938:	687b      	ldr	r3, [r7, #4]
 800993a:	639a      	str	r2, [r3, #56]	; 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 800993c:	68fb      	ldr	r3, [r7, #12]
 800993e:	0a5b      	lsrs	r3, r3, #9
 8009940:	f003 030f 	and.w	r3, r3, #15
 8009944:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 8009946:	693b      	ldr	r3, [r7, #16]
}
 8009948:	4618      	mov	r0, r3
 800994a:	3718      	adds	r7, #24
 800994c:	46bd      	mov	sp, r7
 800994e:	bd80      	pop	{r7, pc}

08009950 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 8009950:	b590      	push	{r4, r7, lr}
 8009952:	b091      	sub	sp, #68	; 0x44
 8009954:	af00      	add	r7, sp, #0
 8009956:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 8009958:	2301      	movs	r3, #1
 800995a:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDMMC_GetPowerState(hsd->Instance) == 0U)
 800995c:	687b      	ldr	r3, [r7, #4]
 800995e:	681b      	ldr	r3, [r3, #0]
 8009960:	4618      	mov	r0, r3
 8009962:	f002 f802 	bl	800b96a <SDMMC_GetPowerState>
 8009966:	4603      	mov	r3, r0
 8009968:	2b00      	cmp	r3, #0
 800996a:	d102      	bne.n	8009972 <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800996c:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8009970:	e0a8      	b.n	8009ac4 <SD_InitCard+0x174>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 8009972:	687b      	ldr	r3, [r7, #4]
 8009974:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009976:	2b03      	cmp	r3, #3
 8009978:	d02e      	beq.n	80099d8 <SD_InitCard+0x88>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 800997a:	687b      	ldr	r3, [r7, #4]
 800997c:	681b      	ldr	r3, [r3, #0]
 800997e:	4618      	mov	r0, r3
 8009980:	f002 fa4e 	bl	800be20 <SDMMC_CmdSendCID>
 8009984:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8009986:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009988:	2b00      	cmp	r3, #0
 800998a:	d001      	beq.n	8009990 <SD_InitCard+0x40>
    {
      return errorstate;
 800998c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800998e:	e099      	b.n	8009ac4 <SD_InitCard+0x174>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8009990:	687b      	ldr	r3, [r7, #4]
 8009992:	681b      	ldr	r3, [r3, #0]
 8009994:	2100      	movs	r1, #0
 8009996:	4618      	mov	r0, r3
 8009998:	f002 f82d 	bl	800b9f6 <SDMMC_GetResponse>
 800999c:	4602      	mov	r2, r0
 800999e:	687b      	ldr	r3, [r7, #4]
 80099a0:	671a      	str	r2, [r3, #112]	; 0x70
      hsd->CID[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 80099a2:	687b      	ldr	r3, [r7, #4]
 80099a4:	681b      	ldr	r3, [r3, #0]
 80099a6:	2104      	movs	r1, #4
 80099a8:	4618      	mov	r0, r3
 80099aa:	f002 f824 	bl	800b9f6 <SDMMC_GetResponse>
 80099ae:	4602      	mov	r2, r0
 80099b0:	687b      	ldr	r3, [r7, #4]
 80099b2:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 80099b4:	687b      	ldr	r3, [r7, #4]
 80099b6:	681b      	ldr	r3, [r3, #0]
 80099b8:	2108      	movs	r1, #8
 80099ba:	4618      	mov	r0, r3
 80099bc:	f002 f81b 	bl	800b9f6 <SDMMC_GetResponse>
 80099c0:	4602      	mov	r2, r0
 80099c2:	687b      	ldr	r3, [r7, #4]
 80099c4:	679a      	str	r2, [r3, #120]	; 0x78
      hsd->CID[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 80099c6:	687b      	ldr	r3, [r7, #4]
 80099c8:	681b      	ldr	r3, [r3, #0]
 80099ca:	210c      	movs	r1, #12
 80099cc:	4618      	mov	r0, r3
 80099ce:	f002 f812 	bl	800b9f6 <SDMMC_GetResponse>
 80099d2:	4602      	mov	r2, r0
 80099d4:	687b      	ldr	r3, [r7, #4]
 80099d6:	67da      	str	r2, [r3, #124]	; 0x7c
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 80099d8:	687b      	ldr	r3, [r7, #4]
 80099da:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80099dc:	2b03      	cmp	r3, #3
 80099de:	d00d      	beq.n	80099fc <SD_InitCard+0xac>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 80099e0:	687b      	ldr	r3, [r7, #4]
 80099e2:	681b      	ldr	r3, [r3, #0]
 80099e4:	f107 020e 	add.w	r2, r7, #14
 80099e8:	4611      	mov	r1, r2
 80099ea:	4618      	mov	r0, r3
 80099ec:	f002 fa57 	bl	800be9e <SDMMC_CmdSetRelAdd>
 80099f0:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 80099f2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80099f4:	2b00      	cmp	r3, #0
 80099f6:	d001      	beq.n	80099fc <SD_InitCard+0xac>
    {
      return errorstate;
 80099f8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80099fa:	e063      	b.n	8009ac4 <SD_InitCard+0x174>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 80099fc:	687b      	ldr	r3, [r7, #4]
 80099fe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009a00:	2b03      	cmp	r3, #3
 8009a02:	d036      	beq.n	8009a72 <SD_InitCard+0x122>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 8009a04:	89fb      	ldrh	r3, [r7, #14]
 8009a06:	461a      	mov	r2, r3
 8009a08:	687b      	ldr	r3, [r7, #4]
 8009a0a:	649a      	str	r2, [r3, #72]	; 0x48

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8009a0c:	687b      	ldr	r3, [r7, #4]
 8009a0e:	681a      	ldr	r2, [r3, #0]
 8009a10:	687b      	ldr	r3, [r7, #4]
 8009a12:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009a14:	041b      	lsls	r3, r3, #16
 8009a16:	4619      	mov	r1, r3
 8009a18:	4610      	mov	r0, r2
 8009a1a:	f002 fa20 	bl	800be5e <SDMMC_CmdSendCSD>
 8009a1e:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8009a20:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009a22:	2b00      	cmp	r3, #0
 8009a24:	d001      	beq.n	8009a2a <SD_InitCard+0xda>
    {
      return errorstate;
 8009a26:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009a28:	e04c      	b.n	8009ac4 <SD_InitCard+0x174>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8009a2a:	687b      	ldr	r3, [r7, #4]
 8009a2c:	681b      	ldr	r3, [r3, #0]
 8009a2e:	2100      	movs	r1, #0
 8009a30:	4618      	mov	r0, r3
 8009a32:	f001 ffe0 	bl	800b9f6 <SDMMC_GetResponse>
 8009a36:	4602      	mov	r2, r0
 8009a38:	687b      	ldr	r3, [r7, #4]
 8009a3a:	661a      	str	r2, [r3, #96]	; 0x60
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 8009a3c:	687b      	ldr	r3, [r7, #4]
 8009a3e:	681b      	ldr	r3, [r3, #0]
 8009a40:	2104      	movs	r1, #4
 8009a42:	4618      	mov	r0, r3
 8009a44:	f001 ffd7 	bl	800b9f6 <SDMMC_GetResponse>
 8009a48:	4602      	mov	r2, r0
 8009a4a:	687b      	ldr	r3, [r7, #4]
 8009a4c:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 8009a4e:	687b      	ldr	r3, [r7, #4]
 8009a50:	681b      	ldr	r3, [r3, #0]
 8009a52:	2108      	movs	r1, #8
 8009a54:	4618      	mov	r0, r3
 8009a56:	f001 ffce 	bl	800b9f6 <SDMMC_GetResponse>
 8009a5a:	4602      	mov	r2, r0
 8009a5c:	687b      	ldr	r3, [r7, #4]
 8009a5e:	669a      	str	r2, [r3, #104]	; 0x68
      hsd->CSD[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 8009a60:	687b      	ldr	r3, [r7, #4]
 8009a62:	681b      	ldr	r3, [r3, #0]
 8009a64:	210c      	movs	r1, #12
 8009a66:	4618      	mov	r0, r3
 8009a68:	f001 ffc5 	bl	800b9f6 <SDMMC_GetResponse>
 8009a6c:	4602      	mov	r2, r0
 8009a6e:	687b      	ldr	r3, [r7, #4]
 8009a70:	66da      	str	r2, [r3, #108]	; 0x6c
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2) >> 20U);
 8009a72:	687b      	ldr	r3, [r7, #4]
 8009a74:	681b      	ldr	r3, [r3, #0]
 8009a76:	2104      	movs	r1, #4
 8009a78:	4618      	mov	r0, r3
 8009a7a:	f001 ffbc 	bl	800b9f6 <SDMMC_GetResponse>
 8009a7e:	4603      	mov	r3, r0
 8009a80:	0d1a      	lsrs	r2, r3, #20
 8009a82:	687b      	ldr	r3, [r7, #4]
 8009a84:	645a      	str	r2, [r3, #68]	; 0x44

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 8009a86:	f107 0310 	add.w	r3, r7, #16
 8009a8a:	4619      	mov	r1, r3
 8009a8c:	6878      	ldr	r0, [r7, #4]
 8009a8e:	f7ff fc0f 	bl	80092b0 <HAL_SD_GetCardCSD>
 8009a92:	4603      	mov	r3, r0
 8009a94:	2b00      	cmp	r3, #0
 8009a96:	d002      	beq.n	8009a9e <SD_InitCard+0x14e>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8009a98:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8009a9c:	e012      	b.n	8009ac4 <SD_InitCard+0x174>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 8009a9e:	687b      	ldr	r3, [r7, #4]
 8009aa0:	6819      	ldr	r1, [r3, #0]
 8009aa2:	687b      	ldr	r3, [r7, #4]
 8009aa4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009aa6:	041b      	lsls	r3, r3, #16
 8009aa8:	f04f 0400 	mov.w	r4, #0
 8009aac:	461a      	mov	r2, r3
 8009aae:	4623      	mov	r3, r4
 8009ab0:	4608      	mov	r0, r1
 8009ab2:	f002 f8cb 	bl	800bc4c <SDMMC_CmdSelDesel>
 8009ab6:	63f8      	str	r0, [r7, #60]	; 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 8009ab8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009aba:	2b00      	cmp	r3, #0
 8009abc:	d001      	beq.n	8009ac2 <SD_InitCard+0x172>
  {
    return errorstate;
 8009abe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009ac0:	e000      	b.n	8009ac4 <SD_InitCard+0x174>
  }

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 8009ac2:	2300      	movs	r3, #0
}
 8009ac4:	4618      	mov	r0, r3
 8009ac6:	3744      	adds	r7, #68	; 0x44
 8009ac8:	46bd      	mov	sp, r7
 8009aca:	bd90      	pop	{r4, r7, pc}

08009acc <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 8009acc:	b580      	push	{r7, lr}
 8009ace:	b088      	sub	sp, #32
 8009ad0:	af00      	add	r7, sp, #0
 8009ad2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8009ad4:	2300      	movs	r3, #0
 8009ad6:	60fb      	str	r3, [r7, #12]
  uint32_t response = 0U, validvoltage = 0U;
 8009ad8:	2300      	movs	r3, #0
 8009ada:	61fb      	str	r3, [r7, #28]
 8009adc:	2300      	movs	r3, #0
 8009ade:	61bb      	str	r3, [r7, #24]
  uint32_t errorstate;
#if (USE_SD_TRANSCEIVER != 0U)
  uint32_t tickstart = HAL_GetTick();
 8009ae0:	f7f7 ff6e 	bl	80019c0 <HAL_GetTick>
 8009ae4:	6178      	str	r0, [r7, #20]
#endif /* USE_SD_TRANSCEIVER  */

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8009ae6:	687b      	ldr	r3, [r7, #4]
 8009ae8:	681b      	ldr	r3, [r3, #0]
 8009aea:	4618      	mov	r0, r3
 8009aec:	f002 f8d2 	bl	800bc94 <SDMMC_CmdGoIdleState>
 8009af0:	6138      	str	r0, [r7, #16]
  if(errorstate != HAL_SD_ERROR_NONE)
 8009af2:	693b      	ldr	r3, [r7, #16]
 8009af4:	2b00      	cmp	r3, #0
 8009af6:	d001      	beq.n	8009afc <SD_PowerON+0x30>
  {
    return errorstate;
 8009af8:	693b      	ldr	r3, [r7, #16]
 8009afa:	e0e9      	b.n	8009cd0 <SD_PowerON+0x204>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 8009afc:	687b      	ldr	r3, [r7, #4]
 8009afe:	681b      	ldr	r3, [r3, #0]
 8009b00:	4618      	mov	r0, r3
 8009b02:	f002 f8e5 	bl	800bcd0 <SDMMC_CmdOperCond>
 8009b06:	6138      	str	r0, [r7, #16]
  if(errorstate != HAL_SD_ERROR_NONE)
 8009b08:	693b      	ldr	r3, [r7, #16]
 8009b0a:	2b00      	cmp	r3, #0
 8009b0c:	d00d      	beq.n	8009b2a <SD_PowerON+0x5e>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 8009b0e:	687b      	ldr	r3, [r7, #4]
 8009b10:	2200      	movs	r2, #0
 8009b12:	641a      	str	r2, [r3, #64]	; 0x40
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8009b14:	687b      	ldr	r3, [r7, #4]
 8009b16:	681b      	ldr	r3, [r3, #0]
 8009b18:	4618      	mov	r0, r3
 8009b1a:	f002 f8bb 	bl	800bc94 <SDMMC_CmdGoIdleState>
 8009b1e:	6138      	str	r0, [r7, #16]
    if(errorstate != HAL_SD_ERROR_NONE)
 8009b20:	693b      	ldr	r3, [r7, #16]
 8009b22:	2b00      	cmp	r3, #0
 8009b24:	d004      	beq.n	8009b30 <SD_PowerON+0x64>
    {
      return errorstate;
 8009b26:	693b      	ldr	r3, [r7, #16]
 8009b28:	e0d2      	b.n	8009cd0 <SD_PowerON+0x204>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 8009b2a:	687b      	ldr	r3, [r7, #4]
 8009b2c:	2201      	movs	r2, #1
 8009b2e:	641a      	str	r2, [r3, #64]	; 0x40
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 8009b30:	687b      	ldr	r3, [r7, #4]
 8009b32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009b34:	2b01      	cmp	r3, #1
 8009b36:	d137      	bne.n	8009ba8 <SD_PowerON+0xdc>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8009b38:	687b      	ldr	r3, [r7, #4]
 8009b3a:	681b      	ldr	r3, [r3, #0]
 8009b3c:	2100      	movs	r1, #0
 8009b3e:	4618      	mov	r0, r3
 8009b40:	f002 f8e6 	bl	800bd10 <SDMMC_CmdAppCommand>
 8009b44:	6138      	str	r0, [r7, #16]
    if(errorstate != HAL_SD_ERROR_NONE)
 8009b46:	693b      	ldr	r3, [r7, #16]
 8009b48:	2b00      	cmp	r3, #0
 8009b4a:	d02d      	beq.n	8009ba8 <SD_PowerON+0xdc>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8009b4c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8009b50:	e0be      	b.n	8009cd0 <SD_PowerON+0x204>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8009b52:	687b      	ldr	r3, [r7, #4]
 8009b54:	681b      	ldr	r3, [r3, #0]
 8009b56:	2100      	movs	r1, #0
 8009b58:	4618      	mov	r0, r3
 8009b5a:	f002 f8d9 	bl	800bd10 <SDMMC_CmdAppCommand>
 8009b5e:	6138      	str	r0, [r7, #16]
    if(errorstate != HAL_SD_ERROR_NONE)
 8009b60:	693b      	ldr	r3, [r7, #16]
 8009b62:	2b00      	cmp	r3, #0
 8009b64:	d001      	beq.n	8009b6a <SD_PowerON+0x9e>
    {
      return errorstate;
 8009b66:	693b      	ldr	r3, [r7, #16]
 8009b68:	e0b2      	b.n	8009cd0 <SD_PowerON+0x204>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 8009b6a:	687b      	ldr	r3, [r7, #4]
 8009b6c:	681b      	ldr	r3, [r3, #0]
 8009b6e:	495a      	ldr	r1, [pc, #360]	; (8009cd8 <SD_PowerON+0x20c>)
 8009b70:	4618      	mov	r0, r3
 8009b72:	f002 f8f0 	bl	800bd56 <SDMMC_CmdAppOperCommand>
 8009b76:	6138      	str	r0, [r7, #16]
    if(errorstate != HAL_SD_ERROR_NONE)
 8009b78:	693b      	ldr	r3, [r7, #16]
 8009b7a:	2b00      	cmp	r3, #0
 8009b7c:	d002      	beq.n	8009b84 <SD_PowerON+0xb8>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8009b7e:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8009b82:	e0a5      	b.n	8009cd0 <SD_PowerON+0x204>
    }

    /* Get command response */
    response = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8009b84:	687b      	ldr	r3, [r7, #4]
 8009b86:	681b      	ldr	r3, [r3, #0]
 8009b88:	2100      	movs	r1, #0
 8009b8a:	4618      	mov	r0, r3
 8009b8c:	f001 ff33 	bl	800b9f6 <SDMMC_GetResponse>
 8009b90:	61f8      	str	r0, [r7, #28]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 8009b92:	69fb      	ldr	r3, [r7, #28]
 8009b94:	0fdb      	lsrs	r3, r3, #31
 8009b96:	2b01      	cmp	r3, #1
 8009b98:	d101      	bne.n	8009b9e <SD_PowerON+0xd2>
 8009b9a:	2301      	movs	r3, #1
 8009b9c:	e000      	b.n	8009ba0 <SD_PowerON+0xd4>
 8009b9e:	2300      	movs	r3, #0
 8009ba0:	61bb      	str	r3, [r7, #24]

    count++;
 8009ba2:	68fb      	ldr	r3, [r7, #12]
 8009ba4:	3301      	adds	r3, #1
 8009ba6:	60fb      	str	r3, [r7, #12]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 8009ba8:	68fb      	ldr	r3, [r7, #12]
 8009baa:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8009bae:	4293      	cmp	r3, r2
 8009bb0:	d802      	bhi.n	8009bb8 <SD_PowerON+0xec>
 8009bb2:	69bb      	ldr	r3, [r7, #24]
 8009bb4:	2b00      	cmp	r3, #0
 8009bb6:	d0cc      	beq.n	8009b52 <SD_PowerON+0x86>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 8009bb8:	68fb      	ldr	r3, [r7, #12]
 8009bba:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8009bbe:	4293      	cmp	r3, r2
 8009bc0:	d902      	bls.n	8009bc8 <SD_PowerON+0xfc>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 8009bc2:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8009bc6:	e083      	b.n	8009cd0 <SD_PowerON+0x204>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 8009bc8:	69fb      	ldr	r3, [r7, #28]
 8009bca:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8009bce:	2b00      	cmp	r3, #0
 8009bd0:	d07d      	beq.n	8009cce <SD_PowerON+0x202>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 8009bd2:	687b      	ldr	r3, [r7, #4]
 8009bd4:	2201      	movs	r2, #1
 8009bd6:	63da      	str	r2, [r3, #60]	; 0x3c
#if (USE_SD_TRANSCEIVER != 0U)
    if (hsd->Init.TranceiverPresent == SDMMC_TRANSCEIVER_PRESENT)
 8009bd8:	687b      	ldr	r3, [r7, #4]
 8009bda:	699b      	ldr	r3, [r3, #24]
 8009bdc:	2b02      	cmp	r3, #2
 8009bde:	d176      	bne.n	8009cce <SD_PowerON+0x202>
    {
      if((response & SD_SWITCH_1_8V_CAPACITY) == SD_SWITCH_1_8V_CAPACITY)
 8009be0:	69fb      	ldr	r3, [r7, #28]
 8009be2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8009be6:	2b00      	cmp	r3, #0
 8009be8:	d071      	beq.n	8009cce <SD_PowerON+0x202>
      {
        hsd->SdCard.CardSpeed = CARD_ULTRA_HIGH_SPEED;
 8009bea:	687b      	ldr	r3, [r7, #4]
 8009bec:	f44f 7200 	mov.w	r2, #512	; 0x200
 8009bf0:	65da      	str	r2, [r3, #92]	; 0x5c

        /* Start switching procedue */
        hsd->Instance->POWER |= SDMMC_POWER_VSWITCHEN;
 8009bf2:	687b      	ldr	r3, [r7, #4]
 8009bf4:	681b      	ldr	r3, [r3, #0]
 8009bf6:	681a      	ldr	r2, [r3, #0]
 8009bf8:	687b      	ldr	r3, [r7, #4]
 8009bfa:	681b      	ldr	r3, [r3, #0]
 8009bfc:	f042 0208 	orr.w	r2, r2, #8
 8009c00:	601a      	str	r2, [r3, #0]

        /* Send CMD11 to switch 1.8V mode */
        errorstate = SDMMC_CmdVoltageSwitch(hsd->Instance);
 8009c02:	687b      	ldr	r3, [r7, #4]
 8009c04:	681b      	ldr	r3, [r3, #0]
 8009c06:	4618      	mov	r0, r3
 8009c08:	f002 f9b0 	bl	800bf6c <SDMMC_CmdVoltageSwitch>
 8009c0c:	6138      	str	r0, [r7, #16]
        if(errorstate != HAL_SD_ERROR_NONE)
 8009c0e:	693b      	ldr	r3, [r7, #16]
 8009c10:	2b00      	cmp	r3, #0
 8009c12:	d00c      	beq.n	8009c2e <SD_PowerON+0x162>
        {
          return errorstate;
 8009c14:	693b      	ldr	r3, [r7, #16]
 8009c16:	e05b      	b.n	8009cd0 <SD_PowerON+0x204>
        }

        /* Check to CKSTOP */
        while(( hsd->Instance->STA & SDMMC_FLAG_CKSTOP) != SDMMC_FLAG_CKSTOP)
        {
          if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8009c18:	f7f7 fed2 	bl	80019c0 <HAL_GetTick>
 8009c1c:	4602      	mov	r2, r0
 8009c1e:	697b      	ldr	r3, [r7, #20]
 8009c20:	1ad3      	subs	r3, r2, r3
 8009c22:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009c26:	d102      	bne.n	8009c2e <SD_PowerON+0x162>
          {
            return HAL_SD_ERROR_TIMEOUT;
 8009c28:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8009c2c:	e050      	b.n	8009cd0 <SD_PowerON+0x204>
        while(( hsd->Instance->STA & SDMMC_FLAG_CKSTOP) != SDMMC_FLAG_CKSTOP)
 8009c2e:	687b      	ldr	r3, [r7, #4]
 8009c30:	681b      	ldr	r3, [r3, #0]
 8009c32:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009c34:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8009c38:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8009c3c:	d1ec      	bne.n	8009c18 <SD_PowerON+0x14c>
          }
        }

        /* Clear CKSTOP Flag */
        hsd->Instance->ICR = SDMMC_FLAG_CKSTOP;
 8009c3e:	687b      	ldr	r3, [r7, #4]
 8009c40:	681b      	ldr	r3, [r3, #0]
 8009c42:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8009c46:	639a      	str	r2, [r3, #56]	; 0x38

        /* Check to BusyD0 */
        if(( hsd->Instance->STA & SDMMC_FLAG_BUSYD0) != SDMMC_FLAG_BUSYD0)
 8009c48:	687b      	ldr	r3, [r7, #4]
 8009c4a:	681b      	ldr	r3, [r3, #0]
 8009c4c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009c4e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8009c52:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009c56:	d002      	beq.n	8009c5e <SD_PowerON+0x192>
        {
          /* Error when activate Voltage Switch in SDMMC Peripheral */
          return SDMMC_ERROR_UNSUPPORTED_FEATURE;
 8009c58:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8009c5c:	e038      	b.n	8009cd0 <SD_PowerON+0x204>
        {
          /* Enable Transceiver Switch PIN */
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
          hsd->DriveTransceiver_1_8V_Callback(SET);
#else
          HAL_SD_DriveTransceiver_1_8V_Callback(SET);
 8009c5e:	2001      	movs	r0, #1
 8009c60:	f7ff fb1a 	bl	8009298 <HAL_SD_DriveTransceiver_1_8V_Callback>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */

          /* Switch ready */
          hsd->Instance->POWER |= SDMMC_POWER_VSWITCH;
 8009c64:	687b      	ldr	r3, [r7, #4]
 8009c66:	681b      	ldr	r3, [r3, #0]
 8009c68:	681a      	ldr	r2, [r3, #0]
 8009c6a:	687b      	ldr	r3, [r7, #4]
 8009c6c:	681b      	ldr	r3, [r3, #0]
 8009c6e:	f042 0204 	orr.w	r2, r2, #4
 8009c72:	601a      	str	r2, [r3, #0]

          /* Check VSWEND Flag */
          while(( hsd->Instance->STA & SDMMC_FLAG_VSWEND) != SDMMC_FLAG_VSWEND)
 8009c74:	e00a      	b.n	8009c8c <SD_PowerON+0x1c0>
          {
            if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8009c76:	f7f7 fea3 	bl	80019c0 <HAL_GetTick>
 8009c7a:	4602      	mov	r2, r0
 8009c7c:	697b      	ldr	r3, [r7, #20]
 8009c7e:	1ad3      	subs	r3, r2, r3
 8009c80:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009c84:	d102      	bne.n	8009c8c <SD_PowerON+0x1c0>
            {
              return HAL_SD_ERROR_TIMEOUT;
 8009c86:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8009c8a:	e021      	b.n	8009cd0 <SD_PowerON+0x204>
          while(( hsd->Instance->STA & SDMMC_FLAG_VSWEND) != SDMMC_FLAG_VSWEND)
 8009c8c:	687b      	ldr	r3, [r7, #4]
 8009c8e:	681b      	ldr	r3, [r3, #0]
 8009c90:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009c92:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009c96:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8009c9a:	d1ec      	bne.n	8009c76 <SD_PowerON+0x1aa>
            }
          }

          /* Clear VSWEND Flag */
          hsd->Instance->ICR = SDMMC_FLAG_VSWEND;
 8009c9c:	687b      	ldr	r3, [r7, #4]
 8009c9e:	681b      	ldr	r3, [r3, #0]
 8009ca0:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8009ca4:	639a      	str	r2, [r3, #56]	; 0x38

          /* Check BusyD0 status */
          if(( hsd->Instance->STA & SDMMC_FLAG_BUSYD0) == SDMMC_FLAG_BUSYD0)
 8009ca6:	687b      	ldr	r3, [r7, #4]
 8009ca8:	681b      	ldr	r3, [r3, #0]
 8009caa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009cac:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8009cb0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009cb4:	d102      	bne.n	8009cbc <SD_PowerON+0x1f0>
          {
            /* Error when enabling 1.8V mode */
            return HAL_SD_ERROR_INVALID_VOLTRANGE;
 8009cb6:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8009cba:	e009      	b.n	8009cd0 <SD_PowerON+0x204>
          }
          /* Switch to 1.8V OK */

          /* Disable VSWITCH FLAG from SDMMC Peripheral */
          hsd->Instance->POWER = 0x13U;
 8009cbc:	687b      	ldr	r3, [r7, #4]
 8009cbe:	681b      	ldr	r3, [r3, #0]
 8009cc0:	2213      	movs	r2, #19
 8009cc2:	601a      	str	r2, [r3, #0]

          /* Clean Status flags */
          hsd->Instance->ICR = 0xFFFFFFFFU;
 8009cc4:	687b      	ldr	r3, [r7, #4]
 8009cc6:	681b      	ldr	r3, [r3, #0]
 8009cc8:	f04f 32ff 	mov.w	r2, #4294967295
 8009ccc:	639a      	str	r2, [r3, #56]	; 0x38
      }
    }
#endif /* USE_SD_TRANSCEIVER  */
  }

  return HAL_SD_ERROR_NONE;
 8009cce:	2300      	movs	r3, #0
}
 8009cd0:	4618      	mov	r0, r3
 8009cd2:	3720      	adds	r7, #32
 8009cd4:	46bd      	mov	sp, r7
 8009cd6:	bd80      	pop	{r7, pc}
 8009cd8:	c1100000 	.word	0xc1100000

08009cdc <SD_SendSDStatus>:
  * @param  pSDstatus: Pointer to the buffer that will contain the SD card status
  *         SD Status register)
  * @retval error state
  */
static uint32_t SD_SendSDStatus(SD_HandleTypeDef *hsd, uint32_t *pSDstatus)
{
 8009cdc:	b580      	push	{r7, lr}
 8009cde:	b08c      	sub	sp, #48	; 0x30
 8009ce0:	af00      	add	r7, sp, #0
 8009ce2:	6078      	str	r0, [r7, #4]
 8009ce4:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8009ce6:	f7f7 fe6b 	bl	80019c0 <HAL_GetTick>
 8009cea:	6278      	str	r0, [r7, #36]	; 0x24
  uint32_t count;
  uint32_t *pData = pSDstatus;
 8009cec:	683b      	ldr	r3, [r7, #0]
 8009cee:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check SD response */
  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8009cf0:	687b      	ldr	r3, [r7, #4]
 8009cf2:	681b      	ldr	r3, [r3, #0]
 8009cf4:	2100      	movs	r1, #0
 8009cf6:	4618      	mov	r0, r3
 8009cf8:	f001 fe7d 	bl	800b9f6 <SDMMC_GetResponse>
 8009cfc:	4603      	mov	r3, r0
 8009cfe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009d02:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8009d06:	d102      	bne.n	8009d0e <SD_SendSDStatus+0x32>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8009d08:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8009d0c:	e0b0      	b.n	8009e70 <SD_SendSDStatus+0x194>
  }

  /* Set block size for card if it is not equal to current block size for card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 64U);
 8009d0e:	687b      	ldr	r3, [r7, #4]
 8009d10:	681b      	ldr	r3, [r3, #0]
 8009d12:	2140      	movs	r1, #64	; 0x40
 8009d14:	4618      	mov	r0, r3
 8009d16:	f001 fead 	bl	800ba74 <SDMMC_CmdBlockLength>
 8009d1a:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8009d1c:	6a3b      	ldr	r3, [r7, #32]
 8009d1e:	2b00      	cmp	r3, #0
 8009d20:	d005      	beq.n	8009d2e <SD_SendSDStatus+0x52>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 8009d22:	687b      	ldr	r3, [r7, #4]
 8009d24:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009d26:	687b      	ldr	r3, [r7, #4]
 8009d28:	639a      	str	r2, [r3, #56]	; 0x38
    return errorstate;
 8009d2a:	6a3b      	ldr	r3, [r7, #32]
 8009d2c:	e0a0      	b.n	8009e70 <SD_SendSDStatus+0x194>
  }

  /* Send CMD55 */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8009d2e:	687b      	ldr	r3, [r7, #4]
 8009d30:	681a      	ldr	r2, [r3, #0]
 8009d32:	687b      	ldr	r3, [r7, #4]
 8009d34:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009d36:	041b      	lsls	r3, r3, #16
 8009d38:	4619      	mov	r1, r3
 8009d3a:	4610      	mov	r0, r2
 8009d3c:	f001 ffe8 	bl	800bd10 <SDMMC_CmdAppCommand>
 8009d40:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8009d42:	6a3b      	ldr	r3, [r7, #32]
 8009d44:	2b00      	cmp	r3, #0
 8009d46:	d005      	beq.n	8009d54 <SD_SendSDStatus+0x78>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 8009d48:	687b      	ldr	r3, [r7, #4]
 8009d4a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009d4c:	687b      	ldr	r3, [r7, #4]
 8009d4e:	639a      	str	r2, [r3, #56]	; 0x38
    return errorstate;
 8009d50:	6a3b      	ldr	r3, [r7, #32]
 8009d52:	e08d      	b.n	8009e70 <SD_SendSDStatus+0x194>
  }

  /* Configure the SD DPSM (Data Path State Machine) */
  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8009d54:	f04f 33ff 	mov.w	r3, #4294967295
 8009d58:	60bb      	str	r3, [r7, #8]
  config.DataLength    = 64U;
 8009d5a:	2340      	movs	r3, #64	; 0x40
 8009d5c:	60fb      	str	r3, [r7, #12]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_64B;
 8009d5e:	2360      	movs	r3, #96	; 0x60
 8009d60:	613b      	str	r3, [r7, #16]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 8009d62:	2302      	movs	r3, #2
 8009d64:	617b      	str	r3, [r7, #20]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8009d66:	2300      	movs	r3, #0
 8009d68:	61bb      	str	r3, [r7, #24]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 8009d6a:	2301      	movs	r3, #1
 8009d6c:	61fb      	str	r3, [r7, #28]
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 8009d6e:	687b      	ldr	r3, [r7, #4]
 8009d70:	681b      	ldr	r3, [r3, #0]
 8009d72:	f107 0208 	add.w	r2, r7, #8
 8009d76:	4611      	mov	r1, r2
 8009d78:	4618      	mov	r0, r3
 8009d7a:	f001 fe4f 	bl	800ba1c <SDMMC_ConfigData>

  /* Send ACMD13 (SD_APP_STAUS)  with argument as card's RCA */
  errorstate = SDMMC_CmdStatusRegister(hsd->Instance);
 8009d7e:	687b      	ldr	r3, [r7, #4]
 8009d80:	681b      	ldr	r3, [r3, #0]
 8009d82:	4618      	mov	r0, r3
 8009d84:	f002 f8d0 	bl	800bf28 <SDMMC_CmdStatusRegister>
 8009d88:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8009d8a:	6a3b      	ldr	r3, [r7, #32]
 8009d8c:	2b00      	cmp	r3, #0
 8009d8e:	d02b      	beq.n	8009de8 <SD_SendSDStatus+0x10c>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 8009d90:	687b      	ldr	r3, [r7, #4]
 8009d92:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009d94:	687b      	ldr	r3, [r7, #4]
 8009d96:	639a      	str	r2, [r3, #56]	; 0x38
    return errorstate;
 8009d98:	6a3b      	ldr	r3, [r7, #32]
 8009d9a:	e069      	b.n	8009e70 <SD_SendSDStatus+0x194>
  }

  /* Get status data */
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
  {
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF))
 8009d9c:	687b      	ldr	r3, [r7, #4]
 8009d9e:	681b      	ldr	r3, [r3, #0]
 8009da0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009da2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8009da6:	2b00      	cmp	r3, #0
 8009da8:	d013      	beq.n	8009dd2 <SD_SendSDStatus+0xf6>
    {
      for(count = 0U; count < 8U; count++)
 8009daa:	2300      	movs	r3, #0
 8009dac:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009dae:	e00d      	b.n	8009dcc <SD_SendSDStatus+0xf0>
      {
        *pData = SDMMC_ReadFIFO(hsd->Instance);
 8009db0:	687b      	ldr	r3, [r7, #4]
 8009db2:	681b      	ldr	r3, [r3, #0]
 8009db4:	4618      	mov	r0, r3
 8009db6:	f001 fda9 	bl	800b90c <SDMMC_ReadFIFO>
 8009dba:	4602      	mov	r2, r0
 8009dbc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009dbe:	601a      	str	r2, [r3, #0]
        pData++;
 8009dc0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009dc2:	3304      	adds	r3, #4
 8009dc4:	62bb      	str	r3, [r7, #40]	; 0x28
      for(count = 0U; count < 8U; count++)
 8009dc6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009dc8:	3301      	adds	r3, #1
 8009dca:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009dcc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009dce:	2b07      	cmp	r3, #7
 8009dd0:	d9ee      	bls.n	8009db0 <SD_SendSDStatus+0xd4>
      }
    }

    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8009dd2:	f7f7 fdf5 	bl	80019c0 <HAL_GetTick>
 8009dd6:	4602      	mov	r2, r0
 8009dd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009dda:	1ad3      	subs	r3, r2, r3
 8009ddc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009de0:	d102      	bne.n	8009de8 <SD_SendSDStatus+0x10c>
    {
      return HAL_SD_ERROR_TIMEOUT;
 8009de2:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8009de6:	e043      	b.n	8009e70 <SD_SendSDStatus+0x194>
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 8009de8:	687b      	ldr	r3, [r7, #4]
 8009dea:	681b      	ldr	r3, [r3, #0]
 8009dec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009dee:	f403 7395 	and.w	r3, r3, #298	; 0x12a
 8009df2:	2b00      	cmp	r3, #0
 8009df4:	d0d2      	beq.n	8009d9c <SD_SendSDStatus+0xc0>
    }
  }

  if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 8009df6:	687b      	ldr	r3, [r7, #4]
 8009df8:	681b      	ldr	r3, [r3, #0]
 8009dfa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009dfc:	f003 0308 	and.w	r3, r3, #8
 8009e00:	2b00      	cmp	r3, #0
 8009e02:	d001      	beq.n	8009e08 <SD_SendSDStatus+0x12c>
  {
    return HAL_SD_ERROR_DATA_TIMEOUT;
 8009e04:	2308      	movs	r3, #8
 8009e06:	e033      	b.n	8009e70 <SD_SendSDStatus+0x194>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 8009e08:	687b      	ldr	r3, [r7, #4]
 8009e0a:	681b      	ldr	r3, [r3, #0]
 8009e0c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009e0e:	f003 0302 	and.w	r3, r3, #2
 8009e12:	2b00      	cmp	r3, #0
 8009e14:	d001      	beq.n	8009e1a <SD_SendSDStatus+0x13e>
  {
    return HAL_SD_ERROR_DATA_CRC_FAIL;
 8009e16:	2302      	movs	r3, #2
 8009e18:	e02a      	b.n	8009e70 <SD_SendSDStatus+0x194>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 8009e1a:	687b      	ldr	r3, [r7, #4]
 8009e1c:	681b      	ldr	r3, [r3, #0]
 8009e1e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009e20:	f003 0320 	and.w	r3, r3, #32
 8009e24:	2b00      	cmp	r3, #0
 8009e26:	d017      	beq.n	8009e58 <SD_SendSDStatus+0x17c>
  {
    return HAL_SD_ERROR_RX_OVERRUN;
 8009e28:	2320      	movs	r3, #32
 8009e2a:	e021      	b.n	8009e70 <SD_SendSDStatus+0x194>
    /* Nothing to do */
  }

  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DPSMACT)))
  {
    *pData = SDMMC_ReadFIFO(hsd->Instance);
 8009e2c:	687b      	ldr	r3, [r7, #4]
 8009e2e:	681b      	ldr	r3, [r3, #0]
 8009e30:	4618      	mov	r0, r3
 8009e32:	f001 fd6b 	bl	800b90c <SDMMC_ReadFIFO>
 8009e36:	4602      	mov	r2, r0
 8009e38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009e3a:	601a      	str	r2, [r3, #0]
    pData++;
 8009e3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009e3e:	3304      	adds	r3, #4
 8009e40:	62bb      	str	r3, [r7, #40]	; 0x28

    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8009e42:	f7f7 fdbd 	bl	80019c0 <HAL_GetTick>
 8009e46:	4602      	mov	r2, r0
 8009e48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e4a:	1ad3      	subs	r3, r2, r3
 8009e4c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009e50:	d102      	bne.n	8009e58 <SD_SendSDStatus+0x17c>
    {
      return HAL_SD_ERROR_TIMEOUT;
 8009e52:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8009e56:	e00b      	b.n	8009e70 <SD_SendSDStatus+0x194>
  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DPSMACT)))
 8009e58:	687b      	ldr	r3, [r7, #4]
 8009e5a:	681b      	ldr	r3, [r3, #0]
 8009e5c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009e5e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8009e62:	2b00      	cmp	r3, #0
 8009e64:	d1e2      	bne.n	8009e2c <SD_SendSDStatus+0x150>
    }
  }

  /* Clear all the static status flags*/
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8009e66:	687b      	ldr	r3, [r7, #4]
 8009e68:	681b      	ldr	r3, [r3, #0]
 8009e6a:	4a03      	ldr	r2, [pc, #12]	; (8009e78 <SD_SendSDStatus+0x19c>)
 8009e6c:	639a      	str	r2, [r3, #56]	; 0x38

  return HAL_SD_ERROR_NONE;
 8009e6e:	2300      	movs	r3, #0
}
 8009e70:	4618      	mov	r0, r3
 8009e72:	3730      	adds	r7, #48	; 0x30
 8009e74:	46bd      	mov	sp, r7
 8009e76:	bd80      	pop	{r7, pc}
 8009e78:	18000f3a 	.word	0x18000f3a

08009e7c <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 8009e7c:	b580      	push	{r7, lr}
 8009e7e:	b084      	sub	sp, #16
 8009e80:	af00      	add	r7, sp, #0
 8009e82:	6078      	str	r0, [r7, #4]
 8009e84:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 8009e86:	683b      	ldr	r3, [r7, #0]
 8009e88:	2b00      	cmp	r3, #0
 8009e8a:	d102      	bne.n	8009e92 <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 8009e8c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8009e90:	e018      	b.n	8009ec4 <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8009e92:	687b      	ldr	r3, [r7, #4]
 8009e94:	681a      	ldr	r2, [r3, #0]
 8009e96:	687b      	ldr	r3, [r7, #4]
 8009e98:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009e9a:	041b      	lsls	r3, r3, #16
 8009e9c:	4619      	mov	r1, r3
 8009e9e:	4610      	mov	r0, r2
 8009ea0:	f002 f81f 	bl	800bee2 <SDMMC_CmdSendStatus>
 8009ea4:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8009ea6:	68fb      	ldr	r3, [r7, #12]
 8009ea8:	2b00      	cmp	r3, #0
 8009eaa:	d001      	beq.n	8009eb0 <SD_SendStatus+0x34>
  {
    return errorstate;
 8009eac:	68fb      	ldr	r3, [r7, #12]
 8009eae:	e009      	b.n	8009ec4 <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8009eb0:	687b      	ldr	r3, [r7, #4]
 8009eb2:	681b      	ldr	r3, [r3, #0]
 8009eb4:	2100      	movs	r1, #0
 8009eb6:	4618      	mov	r0, r3
 8009eb8:	f001 fd9d 	bl	800b9f6 <SDMMC_GetResponse>
 8009ebc:	4602      	mov	r2, r0
 8009ebe:	683b      	ldr	r3, [r7, #0]
 8009ec0:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 8009ec2:	2300      	movs	r3, #0
}
 8009ec4:	4618      	mov	r0, r3
 8009ec6:	3710      	adds	r7, #16
 8009ec8:	46bd      	mov	sp, r7
 8009eca:	bd80      	pop	{r7, pc}

08009ecc <SD_WideBus_Enable>:
  * @brief  Enables the SDMMC wide bus mode.
  * @param  hsd: pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 8009ecc:	b580      	push	{r7, lr}
 8009ece:	b086      	sub	sp, #24
 8009ed0:	af00      	add	r7, sp, #0
 8009ed2:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0UL, 0UL};
 8009ed4:	2300      	movs	r3, #0
 8009ed6:	60fb      	str	r3, [r7, #12]
 8009ed8:	2300      	movs	r3, #0
 8009eda:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8009edc:	687b      	ldr	r3, [r7, #4]
 8009ede:	681b      	ldr	r3, [r3, #0]
 8009ee0:	2100      	movs	r1, #0
 8009ee2:	4618      	mov	r0, r3
 8009ee4:	f001 fd87 	bl	800b9f6 <SDMMC_GetResponse>
 8009ee8:	4603      	mov	r3, r0
 8009eea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009eee:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8009ef2:	d102      	bne.n	8009efa <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8009ef4:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8009ef8:	e02f      	b.n	8009f5a <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 8009efa:	f107 030c 	add.w	r3, r7, #12
 8009efe:	4619      	mov	r1, r3
 8009f00:	6878      	ldr	r0, [r7, #4]
 8009f02:	f000 f879 	bl	8009ff8 <SD_FindSCR>
 8009f06:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8009f08:	697b      	ldr	r3, [r7, #20]
 8009f0a:	2b00      	cmp	r3, #0
 8009f0c:	d001      	beq.n	8009f12 <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 8009f0e:	697b      	ldr	r3, [r7, #20]
 8009f10:	e023      	b.n	8009f5a <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8009f12:	693b      	ldr	r3, [r7, #16]
 8009f14:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8009f18:	2b00      	cmp	r3, #0
 8009f1a:	d01c      	beq.n	8009f56 <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8009f1c:	687b      	ldr	r3, [r7, #4]
 8009f1e:	681a      	ldr	r2, [r3, #0]
 8009f20:	687b      	ldr	r3, [r7, #4]
 8009f22:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009f24:	041b      	lsls	r3, r3, #16
 8009f26:	4619      	mov	r1, r3
 8009f28:	4610      	mov	r0, r2
 8009f2a:	f001 fef1 	bl	800bd10 <SDMMC_CmdAppCommand>
 8009f2e:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8009f30:	697b      	ldr	r3, [r7, #20]
 8009f32:	2b00      	cmp	r3, #0
 8009f34:	d001      	beq.n	8009f3a <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 8009f36:	697b      	ldr	r3, [r7, #20]
 8009f38:	e00f      	b.n	8009f5a <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 8009f3a:	687b      	ldr	r3, [r7, #4]
 8009f3c:	681b      	ldr	r3, [r3, #0]
 8009f3e:	2102      	movs	r1, #2
 8009f40:	4618      	mov	r0, r3
 8009f42:	f001 ff28 	bl	800bd96 <SDMMC_CmdBusWidth>
 8009f46:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8009f48:	697b      	ldr	r3, [r7, #20]
 8009f4a:	2b00      	cmp	r3, #0
 8009f4c:	d001      	beq.n	8009f52 <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 8009f4e:	697b      	ldr	r3, [r7, #20]
 8009f50:	e003      	b.n	8009f5a <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 8009f52:	2300      	movs	r3, #0
 8009f54:	e001      	b.n	8009f5a <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8009f56:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 8009f5a:	4618      	mov	r0, r3
 8009f5c:	3718      	adds	r7, #24
 8009f5e:	46bd      	mov	sp, r7
 8009f60:	bd80      	pop	{r7, pc}

08009f62 <SD_WideBus_Disable>:
  * @brief  Disables the SDMMC wide bus mode.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 8009f62:	b580      	push	{r7, lr}
 8009f64:	b086      	sub	sp, #24
 8009f66:	af00      	add	r7, sp, #0
 8009f68:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0UL, 0UL};
 8009f6a:	2300      	movs	r3, #0
 8009f6c:	60fb      	str	r3, [r7, #12]
 8009f6e:	2300      	movs	r3, #0
 8009f70:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8009f72:	687b      	ldr	r3, [r7, #4]
 8009f74:	681b      	ldr	r3, [r3, #0]
 8009f76:	2100      	movs	r1, #0
 8009f78:	4618      	mov	r0, r3
 8009f7a:	f001 fd3c 	bl	800b9f6 <SDMMC_GetResponse>
 8009f7e:	4603      	mov	r3, r0
 8009f80:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009f84:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8009f88:	d102      	bne.n	8009f90 <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8009f8a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8009f8e:	e02f      	b.n	8009ff0 <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 8009f90:	f107 030c 	add.w	r3, r7, #12
 8009f94:	4619      	mov	r1, r3
 8009f96:	6878      	ldr	r0, [r7, #4]
 8009f98:	f000 f82e 	bl	8009ff8 <SD_FindSCR>
 8009f9c:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8009f9e:	697b      	ldr	r3, [r7, #20]
 8009fa0:	2b00      	cmp	r3, #0
 8009fa2:	d001      	beq.n	8009fa8 <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 8009fa4:	697b      	ldr	r3, [r7, #20]
 8009fa6:	e023      	b.n	8009ff0 <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8009fa8:	693b      	ldr	r3, [r7, #16]
 8009faa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8009fae:	2b00      	cmp	r3, #0
 8009fb0:	d01c      	beq.n	8009fec <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8009fb2:	687b      	ldr	r3, [r7, #4]
 8009fb4:	681a      	ldr	r2, [r3, #0]
 8009fb6:	687b      	ldr	r3, [r7, #4]
 8009fb8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009fba:	041b      	lsls	r3, r3, #16
 8009fbc:	4619      	mov	r1, r3
 8009fbe:	4610      	mov	r0, r2
 8009fc0:	f001 fea6 	bl	800bd10 <SDMMC_CmdAppCommand>
 8009fc4:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8009fc6:	697b      	ldr	r3, [r7, #20]
 8009fc8:	2b00      	cmp	r3, #0
 8009fca:	d001      	beq.n	8009fd0 <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 8009fcc:	697b      	ldr	r3, [r7, #20]
 8009fce:	e00f      	b.n	8009ff0 <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 8009fd0:	687b      	ldr	r3, [r7, #4]
 8009fd2:	681b      	ldr	r3, [r3, #0]
 8009fd4:	2100      	movs	r1, #0
 8009fd6:	4618      	mov	r0, r3
 8009fd8:	f001 fedd 	bl	800bd96 <SDMMC_CmdBusWidth>
 8009fdc:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8009fde:	697b      	ldr	r3, [r7, #20]
 8009fe0:	2b00      	cmp	r3, #0
 8009fe2:	d001      	beq.n	8009fe8 <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 8009fe4:	697b      	ldr	r3, [r7, #20]
 8009fe6:	e003      	b.n	8009ff0 <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 8009fe8:	2300      	movs	r3, #0
 8009fea:	e001      	b.n	8009ff0 <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8009fec:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 8009ff0:	4618      	mov	r0, r3
 8009ff2:	3718      	adds	r7, #24
 8009ff4:	46bd      	mov	sp, r7
 8009ff6:	bd80      	pop	{r7, pc}

08009ff8 <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 8009ff8:	b580      	push	{r7, lr}
 8009ffa:	b08e      	sub	sp, #56	; 0x38
 8009ffc:	af00      	add	r7, sp, #0
 8009ffe:	6078      	str	r0, [r7, #4]
 800a000:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800a002:	f7f7 fcdd 	bl	80019c0 <HAL_GetTick>
 800a006:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t index = 0U;
 800a008:	2300      	movs	r3, #0
 800a00a:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tempscr[2U] = {0UL, 0UL};
 800a00c:	2300      	movs	r3, #0
 800a00e:	60bb      	str	r3, [r7, #8]
 800a010:	2300      	movs	r3, #0
 800a012:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 800a014:	683b      	ldr	r3, [r7, #0]
 800a016:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 800a018:	687b      	ldr	r3, [r7, #4]
 800a01a:	681b      	ldr	r3, [r3, #0]
 800a01c:	2108      	movs	r1, #8
 800a01e:	4618      	mov	r0, r3
 800a020:	f001 fd28 	bl	800ba74 <SDMMC_CmdBlockLength>
 800a024:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 800a026:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a028:	2b00      	cmp	r3, #0
 800a02a:	d001      	beq.n	800a030 <SD_FindSCR+0x38>
  {
    return errorstate;
 800a02c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a02e:	e0ad      	b.n	800a18c <SD_FindSCR+0x194>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 800a030:	687b      	ldr	r3, [r7, #4]
 800a032:	681a      	ldr	r2, [r3, #0]
 800a034:	687b      	ldr	r3, [r7, #4]
 800a036:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a038:	041b      	lsls	r3, r3, #16
 800a03a:	4619      	mov	r1, r3
 800a03c:	4610      	mov	r0, r2
 800a03e:	f001 fe67 	bl	800bd10 <SDMMC_CmdAppCommand>
 800a042:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 800a044:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a046:	2b00      	cmp	r3, #0
 800a048:	d001      	beq.n	800a04e <SD_FindSCR+0x56>
  {
    return errorstate;
 800a04a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a04c:	e09e      	b.n	800a18c <SD_FindSCR+0x194>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800a04e:	f04f 33ff 	mov.w	r3, #4294967295
 800a052:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 800a054:	2308      	movs	r3, #8
 800a056:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_8B;
 800a058:	2330      	movs	r3, #48	; 0x30
 800a05a:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 800a05c:	2302      	movs	r3, #2
 800a05e:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800a060:	2300      	movs	r3, #0
 800a062:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 800a064:	2301      	movs	r3, #1
 800a066:	627b      	str	r3, [r7, #36]	; 0x24
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 800a068:	687b      	ldr	r3, [r7, #4]
 800a06a:	681b      	ldr	r3, [r3, #0]
 800a06c:	f107 0210 	add.w	r2, r7, #16
 800a070:	4611      	mov	r1, r2
 800a072:	4618      	mov	r0, r3
 800a074:	f001 fcd2 	bl	800ba1c <SDMMC_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 800a078:	687b      	ldr	r3, [r7, #4]
 800a07a:	681b      	ldr	r3, [r3, #0]
 800a07c:	4618      	mov	r0, r3
 800a07e:	f001 fead 	bl	800bddc <SDMMC_CmdSendSCR>
 800a082:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 800a084:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a086:	2b00      	cmp	r3, #0
 800a088:	d027      	beq.n	800a0da <SD_FindSCR+0xe2>
  {
    return errorstate;
 800a08a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a08c:	e07e      	b.n	800a18c <SD_FindSCR+0x194>
  }

  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND | SDMMC_FLAG_DATAEND))
  {
    if((!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOE)) && (index == 0U))
 800a08e:	687b      	ldr	r3, [r7, #4]
 800a090:	681b      	ldr	r3, [r3, #0]
 800a092:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a094:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800a098:	2b00      	cmp	r3, #0
 800a09a:	d113      	bne.n	800a0c4 <SD_FindSCR+0xcc>
 800a09c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a09e:	2b00      	cmp	r3, #0
 800a0a0:	d110      	bne.n	800a0c4 <SD_FindSCR+0xcc>
    {
      tempscr[0] = SDMMC_ReadFIFO(hsd->Instance);
 800a0a2:	687b      	ldr	r3, [r7, #4]
 800a0a4:	681b      	ldr	r3, [r3, #0]
 800a0a6:	4618      	mov	r0, r3
 800a0a8:	f001 fc30 	bl	800b90c <SDMMC_ReadFIFO>
 800a0ac:	4603      	mov	r3, r0
 800a0ae:	60bb      	str	r3, [r7, #8]
      tempscr[1] = SDMMC_ReadFIFO(hsd->Instance);
 800a0b0:	687b      	ldr	r3, [r7, #4]
 800a0b2:	681b      	ldr	r3, [r3, #0]
 800a0b4:	4618      	mov	r0, r3
 800a0b6:	f001 fc29 	bl	800b90c <SDMMC_ReadFIFO>
 800a0ba:	4603      	mov	r3, r0
 800a0bc:	60fb      	str	r3, [r7, #12]
      index++;
 800a0be:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a0c0:	3301      	adds	r3, #1
 800a0c2:	637b      	str	r3, [r7, #52]	; 0x34
    }


    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800a0c4:	f7f7 fc7c 	bl	80019c0 <HAL_GetTick>
 800a0c8:	4602      	mov	r2, r0
 800a0ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a0cc:	1ad3      	subs	r3, r2, r3
 800a0ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a0d2:	d102      	bne.n	800a0da <SD_FindSCR+0xe2>
    {
      return HAL_SD_ERROR_TIMEOUT;
 800a0d4:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800a0d8:	e058      	b.n	800a18c <SD_FindSCR+0x194>
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND | SDMMC_FLAG_DATAEND))
 800a0da:	687b      	ldr	r3, [r7, #4]
 800a0dc:	681b      	ldr	r3, [r3, #0]
 800a0de:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a0e0:	f240 532a 	movw	r3, #1322	; 0x52a
 800a0e4:	4013      	ands	r3, r2
 800a0e6:	2b00      	cmp	r3, #0
 800a0e8:	d0d1      	beq.n	800a08e <SD_FindSCR+0x96>
    }
  }

  if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 800a0ea:	687b      	ldr	r3, [r7, #4]
 800a0ec:	681b      	ldr	r3, [r3, #0]
 800a0ee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a0f0:	f003 0308 	and.w	r3, r3, #8
 800a0f4:	2b00      	cmp	r3, #0
 800a0f6:	d005      	beq.n	800a104 <SD_FindSCR+0x10c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DTIMEOUT);
 800a0f8:	687b      	ldr	r3, [r7, #4]
 800a0fa:	681b      	ldr	r3, [r3, #0]
 800a0fc:	2208      	movs	r2, #8
 800a0fe:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 800a100:	2308      	movs	r3, #8
 800a102:	e043      	b.n	800a18c <SD_FindSCR+0x194>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 800a104:	687b      	ldr	r3, [r7, #4]
 800a106:	681b      	ldr	r3, [r3, #0]
 800a108:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a10a:	f003 0302 	and.w	r3, r3, #2
 800a10e:	2b00      	cmp	r3, #0
 800a110:	d005      	beq.n	800a11e <SD_FindSCR+0x126>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DCRCFAIL);
 800a112:	687b      	ldr	r3, [r7, #4]
 800a114:	681b      	ldr	r3, [r3, #0]
 800a116:	2202      	movs	r2, #2
 800a118:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 800a11a:	2302      	movs	r3, #2
 800a11c:	e036      	b.n	800a18c <SD_FindSCR+0x194>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 800a11e:	687b      	ldr	r3, [r7, #4]
 800a120:	681b      	ldr	r3, [r3, #0]
 800a122:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a124:	f003 0320 	and.w	r3, r3, #32
 800a128:	2b00      	cmp	r3, #0
 800a12a:	d005      	beq.n	800a138 <SD_FindSCR+0x140>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_RXOVERR);
 800a12c:	687b      	ldr	r3, [r7, #4]
 800a12e:	681b      	ldr	r3, [r3, #0]
 800a130:	2220      	movs	r2, #32
 800a132:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 800a134:	2320      	movs	r3, #32
 800a136:	e029      	b.n	800a18c <SD_FindSCR+0x194>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800a138:	687b      	ldr	r3, [r7, #4]
 800a13a:	681b      	ldr	r3, [r3, #0]
 800a13c:	4a15      	ldr	r2, [pc, #84]	; (800a194 <SD_FindSCR+0x19c>)
 800a13e:	639a      	str	r2, [r3, #56]	; 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 800a140:	68fb      	ldr	r3, [r7, #12]
 800a142:	061a      	lsls	r2, r3, #24
 800a144:	68fb      	ldr	r3, [r7, #12]
 800a146:	021b      	lsls	r3, r3, #8
 800a148:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800a14c:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 800a14e:	68fb      	ldr	r3, [r7, #12]
 800a150:	0a1b      	lsrs	r3, r3, #8
 800a152:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 800a156:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 800a158:	68fb      	ldr	r3, [r7, #12]
 800a15a:	0e1b      	lsrs	r3, r3, #24
 800a15c:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 800a15e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a160:	601a      	str	r2, [r3, #0]
    scr++;
 800a162:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a164:	3304      	adds	r3, #4
 800a166:	62fb      	str	r3, [r7, #44]	; 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 800a168:	68bb      	ldr	r3, [r7, #8]
 800a16a:	061a      	lsls	r2, r3, #24
 800a16c:	68bb      	ldr	r3, [r7, #8]
 800a16e:	021b      	lsls	r3, r3, #8
 800a170:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800a174:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 800a176:	68bb      	ldr	r3, [r7, #8]
 800a178:	0a1b      	lsrs	r3, r3, #8
 800a17a:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 800a17e:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 800a180:	68bb      	ldr	r3, [r7, #8]
 800a182:	0e1b      	lsrs	r3, r3, #24
 800a184:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 800a186:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a188:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 800a18a:	2300      	movs	r3, #0
}
 800a18c:	4618      	mov	r0, r3
 800a18e:	3738      	adds	r7, #56	; 0x38
 800a190:	46bd      	mov	sp, r7
 800a192:	bd80      	pop	{r7, pc}
 800a194:	18000f3a 	.word	0x18000f3a

0800a198 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800a198:	b580      	push	{r7, lr}
 800a19a:	b084      	sub	sp, #16
 800a19c:	af00      	add	r7, sp, #0
 800a19e:	6078      	str	r0, [r7, #4]
  uint32_t crc_length = 0UL;
 800a1a0:	2300      	movs	r3, #0
 800a1a2:	60fb      	str	r3, [r7, #12]
  uint32_t packet_length;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800a1a4:	687b      	ldr	r3, [r7, #4]
 800a1a6:	2b00      	cmp	r3, #0
 800a1a8:	d101      	bne.n	800a1ae <HAL_SPI_Init+0x16>
  {
    return HAL_ERROR;
 800a1aa:	2301      	movs	r3, #1
 800a1ac:	e0e2      	b.n	800a374 <HAL_SPI_Init+0x1dc>
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800a1ae:	687b      	ldr	r3, [r7, #4]
 800a1b0:	2200      	movs	r2, #0
 800a1b2:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 800a1b4:	687b      	ldr	r3, [r7, #4]
 800a1b6:	681b      	ldr	r3, [r3, #0]
 800a1b8:	4a70      	ldr	r2, [pc, #448]	; (800a37c <HAL_SPI_Init+0x1e4>)
 800a1ba:	4293      	cmp	r3, r2
 800a1bc:	d00f      	beq.n	800a1de <HAL_SPI_Init+0x46>
 800a1be:	687b      	ldr	r3, [r7, #4]
 800a1c0:	681b      	ldr	r3, [r3, #0]
 800a1c2:	4a6f      	ldr	r2, [pc, #444]	; (800a380 <HAL_SPI_Init+0x1e8>)
 800a1c4:	4293      	cmp	r3, r2
 800a1c6:	d00a      	beq.n	800a1de <HAL_SPI_Init+0x46>
 800a1c8:	687b      	ldr	r3, [r7, #4]
 800a1ca:	681b      	ldr	r3, [r3, #0]
 800a1cc:	4a6d      	ldr	r2, [pc, #436]	; (800a384 <HAL_SPI_Init+0x1ec>)
 800a1ce:	4293      	cmp	r3, r2
 800a1d0:	d005      	beq.n	800a1de <HAL_SPI_Init+0x46>
 800a1d2:	687b      	ldr	r3, [r7, #4]
 800a1d4:	68db      	ldr	r3, [r3, #12]
 800a1d6:	2b0f      	cmp	r3, #15
 800a1d8:	d901      	bls.n	800a1de <HAL_SPI_Init+0x46>
  {
    return HAL_ERROR;
 800a1da:	2301      	movs	r3, #1
 800a1dc:	e0ca      	b.n	800a374 <HAL_SPI_Init+0x1dc>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 800a1de:	6878      	ldr	r0, [r7, #4]
 800a1e0:	f000 f8d2 	bl	800a388 <SPI_GetPacketSize>
 800a1e4:	60b8      	str	r0, [r7, #8]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800a1e6:	687b      	ldr	r3, [r7, #4]
 800a1e8:	681b      	ldr	r3, [r3, #0]
 800a1ea:	4a64      	ldr	r2, [pc, #400]	; (800a37c <HAL_SPI_Init+0x1e4>)
 800a1ec:	4293      	cmp	r3, r2
 800a1ee:	d00c      	beq.n	800a20a <HAL_SPI_Init+0x72>
 800a1f0:	687b      	ldr	r3, [r7, #4]
 800a1f2:	681b      	ldr	r3, [r3, #0]
 800a1f4:	4a62      	ldr	r2, [pc, #392]	; (800a380 <HAL_SPI_Init+0x1e8>)
 800a1f6:	4293      	cmp	r3, r2
 800a1f8:	d007      	beq.n	800a20a <HAL_SPI_Init+0x72>
 800a1fa:	687b      	ldr	r3, [r7, #4]
 800a1fc:	681b      	ldr	r3, [r3, #0]
 800a1fe:	4a61      	ldr	r2, [pc, #388]	; (800a384 <HAL_SPI_Init+0x1ec>)
 800a200:	4293      	cmp	r3, r2
 800a202:	d002      	beq.n	800a20a <HAL_SPI_Init+0x72>
 800a204:	68bb      	ldr	r3, [r7, #8]
 800a206:	2b08      	cmp	r3, #8
 800a208:	d811      	bhi.n	800a22e <HAL_SPI_Init+0x96>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800a20a:	687b      	ldr	r3, [r7, #4]
 800a20c:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800a20e:	4a5b      	ldr	r2, [pc, #364]	; (800a37c <HAL_SPI_Init+0x1e4>)
 800a210:	4293      	cmp	r3, r2
 800a212:	d009      	beq.n	800a228 <HAL_SPI_Init+0x90>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800a214:	687b      	ldr	r3, [r7, #4]
 800a216:	681b      	ldr	r3, [r3, #0]
 800a218:	4a59      	ldr	r2, [pc, #356]	; (800a380 <HAL_SPI_Init+0x1e8>)
 800a21a:	4293      	cmp	r3, r2
 800a21c:	d004      	beq.n	800a228 <HAL_SPI_Init+0x90>
 800a21e:	687b      	ldr	r3, [r7, #4]
 800a220:	681b      	ldr	r3, [r3, #0]
 800a222:	4a58      	ldr	r2, [pc, #352]	; (800a384 <HAL_SPI_Init+0x1ec>)
 800a224:	4293      	cmp	r3, r2
 800a226:	d104      	bne.n	800a232 <HAL_SPI_Init+0x9a>
 800a228:	68bb      	ldr	r3, [r7, #8]
 800a22a:	2b10      	cmp	r3, #16
 800a22c:	d901      	bls.n	800a232 <HAL_SPI_Init+0x9a>
  {
    return HAL_ERROR;
 800a22e:	2301      	movs	r3, #1
 800a230:	e0a0      	b.n	800a374 <HAL_SPI_Init+0x1dc>
      return HAL_ERROR;
    }
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800a232:	687b      	ldr	r3, [r7, #4]
 800a234:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800a238:	b2db      	uxtb	r3, r3
 800a23a:	2b00      	cmp	r3, #0
 800a23c:	d106      	bne.n	800a24c <HAL_SPI_Init+0xb4>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800a23e:	687b      	ldr	r3, [r7, #4]
 800a240:	2200      	movs	r2, #0
 800a242:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800a246:	6878      	ldr	r0, [r7, #4]
 800a248:	f7f7 f89e 	bl	8001388 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800a24c:	687b      	ldr	r3, [r7, #4]
 800a24e:	2202      	movs	r2, #2
 800a250:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800a254:	687b      	ldr	r3, [r7, #4]
 800a256:	681b      	ldr	r3, [r3, #0]
 800a258:	681a      	ldr	r2, [r3, #0]
 800a25a:	687b      	ldr	r3, [r7, #4]
 800a25c:	681b      	ldr	r3, [r3, #0]
 800a25e:	f022 0201 	bic.w	r2, r2, #1
 800a262:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW))
 800a264:	687b      	ldr	r3, [r7, #4]
 800a266:	699b      	ldr	r3, [r3, #24]
 800a268:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800a26c:	d110      	bne.n	800a290 <HAL_SPI_Init+0xf8>
 800a26e:	687b      	ldr	r3, [r7, #4]
 800a270:	685b      	ldr	r3, [r3, #4]
 800a272:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800a276:	d10b      	bne.n	800a290 <HAL_SPI_Init+0xf8>
 800a278:	687b      	ldr	r3, [r7, #4]
 800a27a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a27c:	2b00      	cmp	r3, #0
 800a27e:	d107      	bne.n	800a290 <HAL_SPI_Init+0xf8>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 800a280:	687b      	ldr	r3, [r7, #4]
 800a282:	681b      	ldr	r3, [r3, #0]
 800a284:	681a      	ldr	r2, [r3, #0]
 800a286:	687b      	ldr	r3, [r7, #4]
 800a288:	681b      	ldr	r3, [r3, #0]
 800a28a:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800a28e:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 800a290:	687b      	ldr	r3, [r7, #4]
 800a292:	69da      	ldr	r2, [r3, #28]
 800a294:	687b      	ldr	r3, [r7, #4]
 800a296:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a298:	431a      	orrs	r2, r3
 800a29a:	68fb      	ldr	r3, [r7, #12]
 800a29c:	431a      	orrs	r2, r3
 800a29e:	687b      	ldr	r3, [r7, #4]
 800a2a0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a2a2:	ea42 0103 	orr.w	r1, r2, r3
 800a2a6:	687b      	ldr	r3, [r7, #4]
 800a2a8:	68da      	ldr	r2, [r3, #12]
 800a2aa:	687b      	ldr	r3, [r7, #4]
 800a2ac:	681b      	ldr	r3, [r3, #0]
 800a2ae:	430a      	orrs	r2, r1
 800a2b0:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode     | hspi->Init.TIMode           | hspi->Init.NSSPolarity             |
 800a2b2:	687b      	ldr	r3, [r7, #4]
 800a2b4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a2b6:	687b      	ldr	r3, [r7, #4]
 800a2b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a2ba:	431a      	orrs	r2, r3
 800a2bc:	687b      	ldr	r3, [r7, #4]
 800a2be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a2c0:	431a      	orrs	r2, r3
 800a2c2:	687b      	ldr	r3, [r7, #4]
 800a2c4:	699b      	ldr	r3, [r3, #24]
 800a2c6:	431a      	orrs	r2, r3
 800a2c8:	687b      	ldr	r3, [r7, #4]
 800a2ca:	691b      	ldr	r3, [r3, #16]
 800a2cc:	431a      	orrs	r2, r3
 800a2ce:	687b      	ldr	r3, [r7, #4]
 800a2d0:	695b      	ldr	r3, [r3, #20]
 800a2d2:	431a      	orrs	r2, r3
 800a2d4:	687b      	ldr	r3, [r7, #4]
 800a2d6:	6a1b      	ldr	r3, [r3, #32]
 800a2d8:	431a      	orrs	r2, r3
 800a2da:	687b      	ldr	r3, [r7, #4]
 800a2dc:	685b      	ldr	r3, [r3, #4]
 800a2de:	431a      	orrs	r2, r3
 800a2e0:	687b      	ldr	r3, [r7, #4]
 800a2e2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a2e4:	431a      	orrs	r2, r3
 800a2e6:	687b      	ldr	r3, [r7, #4]
 800a2e8:	689b      	ldr	r3, [r3, #8]
 800a2ea:	431a      	orrs	r2, r3
 800a2ec:	687b      	ldr	r3, [r7, #4]
 800a2ee:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a2f0:	ea42 0103 	orr.w	r1, r2, r3
 800a2f4:	687b      	ldr	r3, [r7, #4]
 800a2f6:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800a2f8:	687b      	ldr	r3, [r7, #4]
 800a2fa:	681b      	ldr	r3, [r3, #0]
 800a2fc:	430a      	orrs	r2, r1
 800a2fe:	60da      	str	r2, [r3, #12]
    WRITE_REG(hspi->Instance->CRCPOLY, hspi->Init.CRCPolynomial);
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 800a300:	687b      	ldr	r3, [r7, #4]
 800a302:	685b      	ldr	r3, [r3, #4]
 800a304:	2b00      	cmp	r3, #0
 800a306:	d113      	bne.n	800a330 <HAL_SPI_Init+0x198>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 800a308:	687b      	ldr	r3, [r7, #4]
 800a30a:	681b      	ldr	r3, [r3, #0]
 800a30c:	689b      	ldr	r3, [r3, #8]
 800a30e:	f423 52c0 	bic.w	r2, r3, #6144	; 0x1800
 800a312:	687b      	ldr	r3, [r7, #4]
 800a314:	681b      	ldr	r3, [r3, #0]
 800a316:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800a31a:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 800a31c:	687b      	ldr	r3, [r7, #4]
 800a31e:	681b      	ldr	r3, [r3, #0]
 800a320:	689b      	ldr	r3, [r3, #8]
 800a322:	f423 62c0 	bic.w	r2, r3, #1536	; 0x600
 800a326:	687b      	ldr	r3, [r7, #4]
 800a328:	681b      	ldr	r3, [r3, #0]
 800a32a:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800a32e:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800a330:	687b      	ldr	r3, [r7, #4]
 800a332:	681b      	ldr	r3, [r3, #0]
 800a334:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800a336:	687b      	ldr	r3, [r7, #4]
 800a338:	681b      	ldr	r3, [r3, #0]
 800a33a:	f022 0201 	bic.w	r2, r2, #1
 800a33e:	651a      	str	r2, [r3, #80]	; 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 800a340:	687b      	ldr	r3, [r7, #4]
 800a342:	685b      	ldr	r3, [r3, #4]
 800a344:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800a348:	2b00      	cmp	r3, #0
 800a34a:	d00a      	beq.n	800a362 <HAL_SPI_Init+0x1ca>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 800a34c:	687b      	ldr	r3, [r7, #4]
 800a34e:	681b      	ldr	r3, [r3, #0]
 800a350:	68db      	ldr	r3, [r3, #12]
 800a352:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800a356:	687b      	ldr	r3, [r7, #4]
 800a358:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800a35a:	687b      	ldr	r3, [r7, #4]
 800a35c:	681b      	ldr	r3, [r3, #0]
 800a35e:	430a      	orrs	r2, r1
 800a360:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800a362:	687b      	ldr	r3, [r7, #4]
 800a364:	2200      	movs	r2, #0
 800a366:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 800a36a:	687b      	ldr	r3, [r7, #4]
 800a36c:	2201      	movs	r2, #1
 800a36e:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  return HAL_OK;
 800a372:	2300      	movs	r3, #0
}
 800a374:	4618      	mov	r0, r3
 800a376:	3710      	adds	r7, #16
 800a378:	46bd      	mov	sp, r7
 800a37a:	bd80      	pop	{r7, pc}
 800a37c:	40013000 	.word	0x40013000
 800a380:	40003800 	.word	0x40003800
 800a384:	40003c00 	.word	0x40003c00

0800a388 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(SPI_HandleTypeDef *hspi)
{
 800a388:	b480      	push	{r7}
 800a38a:	b085      	sub	sp, #20
 800a38c:	af00      	add	r7, sp, #0
 800a38e:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 800a390:	687b      	ldr	r3, [r7, #4]
 800a392:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a394:	095b      	lsrs	r3, r3, #5
 800a396:	3301      	adds	r3, #1
 800a398:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 800a39a:	687b      	ldr	r3, [r7, #4]
 800a39c:	68db      	ldr	r3, [r3, #12]
 800a39e:	3301      	adds	r3, #1
 800a3a0:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 800a3a2:	68bb      	ldr	r3, [r7, #8]
 800a3a4:	3307      	adds	r3, #7
 800a3a6:	08db      	lsrs	r3, r3, #3
 800a3a8:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 800a3aa:	68bb      	ldr	r3, [r7, #8]
 800a3ac:	68fa      	ldr	r2, [r7, #12]
 800a3ae:	fb02 f303 	mul.w	r3, r2, r3
}
 800a3b2:	4618      	mov	r0, r3
 800a3b4:	3714      	adds	r7, #20
 800a3b6:	46bd      	mov	sp, r7
 800a3b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3bc:	4770      	bx	lr

0800a3be <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800a3be:	b580      	push	{r7, lr}
 800a3c0:	b082      	sub	sp, #8
 800a3c2:	af00      	add	r7, sp, #0
 800a3c4:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800a3c6:	687b      	ldr	r3, [r7, #4]
 800a3c8:	2b00      	cmp	r3, #0
 800a3ca:	d101      	bne.n	800a3d0 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800a3cc:	2301      	movs	r3, #1
 800a3ce:	e042      	b.n	800a456 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800a3d0:	687b      	ldr	r3, [r7, #4]
 800a3d2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a3d6:	2b00      	cmp	r3, #0
 800a3d8:	d106      	bne.n	800a3e8 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800a3da:	687b      	ldr	r3, [r7, #4]
 800a3dc:	2200      	movs	r2, #0
 800a3de:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800a3e2:	6878      	ldr	r0, [r7, #4]
 800a3e4:	f7f7 f81a 	bl	800141c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800a3e8:	687b      	ldr	r3, [r7, #4]
 800a3ea:	2224      	movs	r2, #36	; 0x24
 800a3ec:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  __HAL_UART_DISABLE(huart);
 800a3f0:	687b      	ldr	r3, [r7, #4]
 800a3f2:	681b      	ldr	r3, [r3, #0]
 800a3f4:	681a      	ldr	r2, [r3, #0]
 800a3f6:	687b      	ldr	r3, [r7, #4]
 800a3f8:	681b      	ldr	r3, [r3, #0]
 800a3fa:	f022 0201 	bic.w	r2, r2, #1
 800a3fe:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800a400:	6878      	ldr	r0, [r7, #4]
 800a402:	f000 f95f 	bl	800a6c4 <UART_SetConfig>
 800a406:	4603      	mov	r3, r0
 800a408:	2b01      	cmp	r3, #1
 800a40a:	d101      	bne.n	800a410 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800a40c:	2301      	movs	r3, #1
 800a40e:	e022      	b.n	800a456 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800a410:	687b      	ldr	r3, [r7, #4]
 800a412:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a414:	2b00      	cmp	r3, #0
 800a416:	d002      	beq.n	800a41e <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 800a418:	6878      	ldr	r0, [r7, #4]
 800a41a:	f000 ff03 	bl	800b224 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800a41e:	687b      	ldr	r3, [r7, #4]
 800a420:	681b      	ldr	r3, [r3, #0]
 800a422:	685a      	ldr	r2, [r3, #4]
 800a424:	687b      	ldr	r3, [r7, #4]
 800a426:	681b      	ldr	r3, [r3, #0]
 800a428:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800a42c:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800a42e:	687b      	ldr	r3, [r7, #4]
 800a430:	681b      	ldr	r3, [r3, #0]
 800a432:	689a      	ldr	r2, [r3, #8]
 800a434:	687b      	ldr	r3, [r7, #4]
 800a436:	681b      	ldr	r3, [r3, #0]
 800a438:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800a43c:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800a43e:	687b      	ldr	r3, [r7, #4]
 800a440:	681b      	ldr	r3, [r3, #0]
 800a442:	681a      	ldr	r2, [r3, #0]
 800a444:	687b      	ldr	r3, [r7, #4]
 800a446:	681b      	ldr	r3, [r3, #0]
 800a448:	f042 0201 	orr.w	r2, r2, #1
 800a44c:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800a44e:	6878      	ldr	r0, [r7, #4]
 800a450:	f000 ff8a 	bl	800b368 <UART_CheckIdleState>
 800a454:	4603      	mov	r3, r0
}
 800a456:	4618      	mov	r0, r3
 800a458:	3708      	adds	r7, #8
 800a45a:	46bd      	mov	sp, r7
 800a45c:	bd80      	pop	{r7, pc}

0800a45e <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800a45e:	b580      	push	{r7, lr}
 800a460:	b08a      	sub	sp, #40	; 0x28
 800a462:	af02      	add	r7, sp, #8
 800a464:	60f8      	str	r0, [r7, #12]
 800a466:	60b9      	str	r1, [r7, #8]
 800a468:	603b      	str	r3, [r7, #0]
 800a46a:	4613      	mov	r3, r2
 800a46c:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800a46e:	68fb      	ldr	r3, [r7, #12]
 800a470:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a474:	2b20      	cmp	r3, #32
 800a476:	f040 8083 	bne.w	800a580 <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 800a47a:	68bb      	ldr	r3, [r7, #8]
 800a47c:	2b00      	cmp	r3, #0
 800a47e:	d002      	beq.n	800a486 <HAL_UART_Transmit+0x28>
 800a480:	88fb      	ldrh	r3, [r7, #6]
 800a482:	2b00      	cmp	r3, #0
 800a484:	d101      	bne.n	800a48a <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 800a486:	2301      	movs	r3, #1
 800a488:	e07b      	b.n	800a582 <HAL_UART_Transmit+0x124>
    }

    __HAL_LOCK(huart);
 800a48a:	68fb      	ldr	r3, [r7, #12]
 800a48c:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 800a490:	2b01      	cmp	r3, #1
 800a492:	d101      	bne.n	800a498 <HAL_UART_Transmit+0x3a>
 800a494:	2302      	movs	r3, #2
 800a496:	e074      	b.n	800a582 <HAL_UART_Transmit+0x124>
 800a498:	68fb      	ldr	r3, [r7, #12]
 800a49a:	2201      	movs	r2, #1
 800a49c:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a4a0:	68fb      	ldr	r3, [r7, #12]
 800a4a2:	2200      	movs	r2, #0
 800a4a4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800a4a8:	68fb      	ldr	r3, [r7, #12]
 800a4aa:	2221      	movs	r2, #33	; 0x21
 800a4ac:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 800a4b0:	f7f7 fa86 	bl	80019c0 <HAL_GetTick>
 800a4b4:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800a4b6:	68fb      	ldr	r3, [r7, #12]
 800a4b8:	88fa      	ldrh	r2, [r7, #6]
 800a4ba:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 800a4be:	68fb      	ldr	r3, [r7, #12]
 800a4c0:	88fa      	ldrh	r2, [r7, #6]
 800a4c2:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800a4c6:	68fb      	ldr	r3, [r7, #12]
 800a4c8:	689b      	ldr	r3, [r3, #8]
 800a4ca:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a4ce:	d108      	bne.n	800a4e2 <HAL_UART_Transmit+0x84>
 800a4d0:	68fb      	ldr	r3, [r7, #12]
 800a4d2:	691b      	ldr	r3, [r3, #16]
 800a4d4:	2b00      	cmp	r3, #0
 800a4d6:	d104      	bne.n	800a4e2 <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 800a4d8:	2300      	movs	r3, #0
 800a4da:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800a4dc:	68bb      	ldr	r3, [r7, #8]
 800a4de:	61bb      	str	r3, [r7, #24]
 800a4e0:	e003      	b.n	800a4ea <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 800a4e2:	68bb      	ldr	r3, [r7, #8]
 800a4e4:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800a4e6:	2300      	movs	r3, #0
 800a4e8:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 800a4ea:	68fb      	ldr	r3, [r7, #12]
 800a4ec:	2200      	movs	r2, #0
 800a4ee:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    while (huart->TxXferCount > 0U)
 800a4f2:	e02c      	b.n	800a54e <HAL_UART_Transmit+0xf0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800a4f4:	683b      	ldr	r3, [r7, #0]
 800a4f6:	9300      	str	r3, [sp, #0]
 800a4f8:	697b      	ldr	r3, [r7, #20]
 800a4fa:	2200      	movs	r2, #0
 800a4fc:	2180      	movs	r1, #128	; 0x80
 800a4fe:	68f8      	ldr	r0, [r7, #12]
 800a500:	f000 ff7a 	bl	800b3f8 <UART_WaitOnFlagUntilTimeout>
 800a504:	4603      	mov	r3, r0
 800a506:	2b00      	cmp	r3, #0
 800a508:	d001      	beq.n	800a50e <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 800a50a:	2303      	movs	r3, #3
 800a50c:	e039      	b.n	800a582 <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 800a50e:	69fb      	ldr	r3, [r7, #28]
 800a510:	2b00      	cmp	r3, #0
 800a512:	d10b      	bne.n	800a52c <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800a514:	69bb      	ldr	r3, [r7, #24]
 800a516:	881b      	ldrh	r3, [r3, #0]
 800a518:	461a      	mov	r2, r3
 800a51a:	68fb      	ldr	r3, [r7, #12]
 800a51c:	681b      	ldr	r3, [r3, #0]
 800a51e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800a522:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800a524:	69bb      	ldr	r3, [r7, #24]
 800a526:	3302      	adds	r3, #2
 800a528:	61bb      	str	r3, [r7, #24]
 800a52a:	e007      	b.n	800a53c <HAL_UART_Transmit+0xde>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800a52c:	69fb      	ldr	r3, [r7, #28]
 800a52e:	781a      	ldrb	r2, [r3, #0]
 800a530:	68fb      	ldr	r3, [r7, #12]
 800a532:	681b      	ldr	r3, [r3, #0]
 800a534:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800a536:	69fb      	ldr	r3, [r7, #28]
 800a538:	3301      	adds	r3, #1
 800a53a:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800a53c:	68fb      	ldr	r3, [r7, #12]
 800a53e:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800a542:	b29b      	uxth	r3, r3
 800a544:	3b01      	subs	r3, #1
 800a546:	b29a      	uxth	r2, r3
 800a548:	68fb      	ldr	r3, [r7, #12]
 800a54a:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 800a54e:	68fb      	ldr	r3, [r7, #12]
 800a550:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800a554:	b29b      	uxth	r3, r3
 800a556:	2b00      	cmp	r3, #0
 800a558:	d1cc      	bne.n	800a4f4 <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800a55a:	683b      	ldr	r3, [r7, #0]
 800a55c:	9300      	str	r3, [sp, #0]
 800a55e:	697b      	ldr	r3, [r7, #20]
 800a560:	2200      	movs	r2, #0
 800a562:	2140      	movs	r1, #64	; 0x40
 800a564:	68f8      	ldr	r0, [r7, #12]
 800a566:	f000 ff47 	bl	800b3f8 <UART_WaitOnFlagUntilTimeout>
 800a56a:	4603      	mov	r3, r0
 800a56c:	2b00      	cmp	r3, #0
 800a56e:	d001      	beq.n	800a574 <HAL_UART_Transmit+0x116>
    {
      return HAL_TIMEOUT;
 800a570:	2303      	movs	r3, #3
 800a572:	e006      	b.n	800a582 <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800a574:	68fb      	ldr	r3, [r7, #12]
 800a576:	2220      	movs	r2, #32
 800a578:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    return HAL_OK;
 800a57c:	2300      	movs	r3, #0
 800a57e:	e000      	b.n	800a582 <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 800a580:	2302      	movs	r3, #2
  }
}
 800a582:	4618      	mov	r0, r3
 800a584:	3720      	adds	r7, #32
 800a586:	46bd      	mov	sp, r7
 800a588:	bd80      	pop	{r7, pc}
	...

0800a58c <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800a58c:	b580      	push	{r7, lr}
 800a58e:	b084      	sub	sp, #16
 800a590:	af00      	add	r7, sp, #0
 800a592:	60f8      	str	r0, [r7, #12]
 800a594:	60b9      	str	r1, [r7, #8]
 800a596:	4613      	mov	r3, r2
 800a598:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800a59a:	68fb      	ldr	r3, [r7, #12]
 800a59c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a5a0:	2b20      	cmp	r3, #32
 800a5a2:	d170      	bne.n	800a686 <HAL_UART_Receive_DMA+0xfa>
  {
    if ((pData == NULL) || (Size == 0U))
 800a5a4:	68bb      	ldr	r3, [r7, #8]
 800a5a6:	2b00      	cmp	r3, #0
 800a5a8:	d002      	beq.n	800a5b0 <HAL_UART_Receive_DMA+0x24>
 800a5aa:	88fb      	ldrh	r3, [r7, #6]
 800a5ac:	2b00      	cmp	r3, #0
 800a5ae:	d101      	bne.n	800a5b4 <HAL_UART_Receive_DMA+0x28>
    {
      return HAL_ERROR;
 800a5b0:	2301      	movs	r3, #1
 800a5b2:	e069      	b.n	800a688 <HAL_UART_Receive_DMA+0xfc>
    }

    __HAL_LOCK(huart);
 800a5b4:	68fb      	ldr	r3, [r7, #12]
 800a5b6:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 800a5ba:	2b01      	cmp	r3, #1
 800a5bc:	d101      	bne.n	800a5c2 <HAL_UART_Receive_DMA+0x36>
 800a5be:	2302      	movs	r3, #2
 800a5c0:	e062      	b.n	800a688 <HAL_UART_Receive_DMA+0xfc>
 800a5c2:	68fb      	ldr	r3, [r7, #12]
 800a5c4:	2201      	movs	r2, #1
 800a5c6:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    huart->pRxBuffPtr = pData;
 800a5ca:	68fb      	ldr	r3, [r7, #12]
 800a5cc:	68ba      	ldr	r2, [r7, #8]
 800a5ce:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferSize = Size;
 800a5d0:	68fb      	ldr	r3, [r7, #12]
 800a5d2:	88fa      	ldrh	r2, [r7, #6]
 800a5d4:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a5d8:	68fb      	ldr	r3, [r7, #12]
 800a5da:	2200      	movs	r2, #0
 800a5dc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800a5e0:	68fb      	ldr	r3, [r7, #12]
 800a5e2:	2222      	movs	r2, #34	; 0x22
 800a5e4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    if (huart->hdmarx != NULL)
 800a5e8:	68fb      	ldr	r3, [r7, #12]
 800a5ea:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800a5ec:	2b00      	cmp	r3, #0
 800a5ee:	d02c      	beq.n	800a64a <HAL_UART_Receive_DMA+0xbe>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800a5f0:	68fb      	ldr	r3, [r7, #12]
 800a5f2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800a5f4:	4a26      	ldr	r2, [pc, #152]	; (800a690 <HAL_UART_Receive_DMA+0x104>)
 800a5f6:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800a5f8:	68fb      	ldr	r3, [r7, #12]
 800a5fa:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800a5fc:	4a25      	ldr	r2, [pc, #148]	; (800a694 <HAL_UART_Receive_DMA+0x108>)
 800a5fe:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      huart->hdmarx->XferErrorCallback = UART_DMAError;
 800a600:	68fb      	ldr	r3, [r7, #12]
 800a602:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800a604:	4a24      	ldr	r2, [pc, #144]	; (800a698 <HAL_UART_Receive_DMA+0x10c>)
 800a606:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Set the DMA abort callback */
      huart->hdmarx->XferAbortCallback = NULL;
 800a608:	68fb      	ldr	r3, [r7, #12]
 800a60a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800a60c:	2200      	movs	r2, #0
 800a60e:	651a      	str	r2, [r3, #80]	; 0x50

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 800a610:	68fb      	ldr	r3, [r7, #12]
 800a612:	6f98      	ldr	r0, [r3, #120]	; 0x78
 800a614:	68fb      	ldr	r3, [r7, #12]
 800a616:	681b      	ldr	r3, [r3, #0]
 800a618:	3324      	adds	r3, #36	; 0x24
 800a61a:	4619      	mov	r1, r3
 800a61c:	68fb      	ldr	r3, [r7, #12]
 800a61e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a620:	461a      	mov	r2, r3
 800a622:	88fb      	ldrh	r3, [r7, #6]
 800a624:	f7f7 fe72 	bl	800230c <HAL_DMA_Start_IT>
 800a628:	4603      	mov	r3, r0
 800a62a:	2b00      	cmp	r3, #0
 800a62c:	d00d      	beq.n	800a64a <HAL_UART_Receive_DMA+0xbe>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 800a62e:	68fb      	ldr	r3, [r7, #12]
 800a630:	2210      	movs	r2, #16
 800a632:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 800a636:	68fb      	ldr	r3, [r7, #12]
 800a638:	2200      	movs	r2, #0
 800a63a:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 800a63e:	68fb      	ldr	r3, [r7, #12]
 800a640:	2220      	movs	r2, #32
 800a642:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        return HAL_ERROR;
 800a646:	2301      	movs	r3, #1
 800a648:	e01e      	b.n	800a688 <HAL_UART_Receive_DMA+0xfc>
      }
    }
    __HAL_UNLOCK(huart);
 800a64a:	68fb      	ldr	r3, [r7, #12]
 800a64c:	2200      	movs	r2, #0
 800a64e:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    /* Enable the UART Parity Error Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800a652:	68fb      	ldr	r3, [r7, #12]
 800a654:	681b      	ldr	r3, [r3, #0]
 800a656:	681a      	ldr	r2, [r3, #0]
 800a658:	68fb      	ldr	r3, [r7, #12]
 800a65a:	681b      	ldr	r3, [r3, #0]
 800a65c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800a660:	601a      	str	r2, [r3, #0]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a662:	68fb      	ldr	r3, [r7, #12]
 800a664:	681b      	ldr	r3, [r3, #0]
 800a666:	689a      	ldr	r2, [r3, #8]
 800a668:	68fb      	ldr	r3, [r7, #12]
 800a66a:	681b      	ldr	r3, [r3, #0]
 800a66c:	f042 0201 	orr.w	r2, r2, #1
 800a670:	609a      	str	r2, [r3, #8]

    /* Enable the DMA transfer for the receiver request by setting the DMAR bit
    in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a672:	68fb      	ldr	r3, [r7, #12]
 800a674:	681b      	ldr	r3, [r3, #0]
 800a676:	689a      	ldr	r2, [r3, #8]
 800a678:	68fb      	ldr	r3, [r7, #12]
 800a67a:	681b      	ldr	r3, [r3, #0]
 800a67c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800a680:	609a      	str	r2, [r3, #8]

    return HAL_OK;
 800a682:	2300      	movs	r3, #0
 800a684:	e000      	b.n	800a688 <HAL_UART_Receive_DMA+0xfc>
  }
  else
  {
    return HAL_BUSY;
 800a686:	2302      	movs	r3, #2
  }
}
 800a688:	4618      	mov	r0, r3
 800a68a:	3710      	adds	r7, #16
 800a68c:	46bd      	mov	sp, r7
 800a68e:	bd80      	pop	{r7, pc}
 800a690:	0800b57d 	.word	0x0800b57d
 800a694:	0800b5e3 	.word	0x0800b5e3
 800a698:	0800b5ff 	.word	0x0800b5ff

0800a69c <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800a69c:	b480      	push	{r7}
 800a69e:	b083      	sub	sp, #12
 800a6a0:	af00      	add	r7, sp, #0
 800a6a2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 800a6a4:	bf00      	nop
 800a6a6:	370c      	adds	r7, #12
 800a6a8:	46bd      	mov	sp, r7
 800a6aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6ae:	4770      	bx	lr

0800a6b0 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800a6b0:	b480      	push	{r7}
 800a6b2:	b083      	sub	sp, #12
 800a6b4:	af00      	add	r7, sp, #0
 800a6b6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800a6b8:	bf00      	nop
 800a6ba:	370c      	adds	r7, #12
 800a6bc:	46bd      	mov	sp, r7
 800a6be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6c2:	4770      	bx	lr

0800a6c4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800a6c4:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 800a6c8:	b08e      	sub	sp, #56	; 0x38
 800a6ca:	af00      	add	r7, sp, #0
 800a6cc:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800a6ce:	2300      	movs	r3, #0
 800a6d0:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800a6d4:	687b      	ldr	r3, [r7, #4]
 800a6d6:	689a      	ldr	r2, [r3, #8]
 800a6d8:	687b      	ldr	r3, [r7, #4]
 800a6da:	691b      	ldr	r3, [r3, #16]
 800a6dc:	431a      	orrs	r2, r3
 800a6de:	687b      	ldr	r3, [r7, #4]
 800a6e0:	695b      	ldr	r3, [r3, #20]
 800a6e2:	431a      	orrs	r2, r3
 800a6e4:	687b      	ldr	r3, [r7, #4]
 800a6e6:	69db      	ldr	r3, [r3, #28]
 800a6e8:	4313      	orrs	r3, r2
 800a6ea:	637b      	str	r3, [r7, #52]	; 0x34
  tmpreg |= (uint32_t)huart->FifoMode;
 800a6ec:	687b      	ldr	r3, [r7, #4]
 800a6ee:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a6f0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a6f2:	4313      	orrs	r3, r2
 800a6f4:	637b      	str	r3, [r7, #52]	; 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800a6f6:	687b      	ldr	r3, [r7, #4]
 800a6f8:	681b      	ldr	r3, [r3, #0]
 800a6fa:	681a      	ldr	r2, [r3, #0]
 800a6fc:	4bc1      	ldr	r3, [pc, #772]	; (800aa04 <UART_SetConfig+0x340>)
 800a6fe:	4013      	ands	r3, r2
 800a700:	687a      	ldr	r2, [r7, #4]
 800a702:	6812      	ldr	r2, [r2, #0]
 800a704:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800a706:	430b      	orrs	r3, r1
 800a708:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800a70a:	687b      	ldr	r3, [r7, #4]
 800a70c:	681b      	ldr	r3, [r3, #0]
 800a70e:	685b      	ldr	r3, [r3, #4]
 800a710:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800a714:	687b      	ldr	r3, [r7, #4]
 800a716:	68da      	ldr	r2, [r3, #12]
 800a718:	687b      	ldr	r3, [r7, #4]
 800a71a:	681b      	ldr	r3, [r3, #0]
 800a71c:	430a      	orrs	r2, r1
 800a71e:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800a720:	687b      	ldr	r3, [r7, #4]
 800a722:	699b      	ldr	r3, [r3, #24]
 800a724:	637b      	str	r3, [r7, #52]	; 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800a726:	687b      	ldr	r3, [r7, #4]
 800a728:	681b      	ldr	r3, [r3, #0]
 800a72a:	4ab7      	ldr	r2, [pc, #732]	; (800aa08 <UART_SetConfig+0x344>)
 800a72c:	4293      	cmp	r3, r2
 800a72e:	d004      	beq.n	800a73a <UART_SetConfig+0x76>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800a730:	687b      	ldr	r3, [r7, #4]
 800a732:	6a1b      	ldr	r3, [r3, #32]
 800a734:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a736:	4313      	orrs	r3, r2
 800a738:	637b      	str	r3, [r7, #52]	; 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800a73a:	687b      	ldr	r3, [r7, #4]
 800a73c:	681b      	ldr	r3, [r3, #0]
 800a73e:	689a      	ldr	r2, [r3, #8]
 800a740:	4bb2      	ldr	r3, [pc, #712]	; (800aa0c <UART_SetConfig+0x348>)
 800a742:	4013      	ands	r3, r2
 800a744:	687a      	ldr	r2, [r7, #4]
 800a746:	6812      	ldr	r2, [r2, #0]
 800a748:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800a74a:	430b      	orrs	r3, r1
 800a74c:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800a74e:	687b      	ldr	r3, [r7, #4]
 800a750:	681b      	ldr	r3, [r3, #0]
 800a752:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a754:	f023 010f 	bic.w	r1, r3, #15
 800a758:	687b      	ldr	r3, [r7, #4]
 800a75a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800a75c:	687b      	ldr	r3, [r7, #4]
 800a75e:	681b      	ldr	r3, [r3, #0]
 800a760:	430a      	orrs	r2, r1
 800a762:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800a764:	687b      	ldr	r3, [r7, #4]
 800a766:	681b      	ldr	r3, [r3, #0]
 800a768:	4aa9      	ldr	r2, [pc, #676]	; (800aa10 <UART_SetConfig+0x34c>)
 800a76a:	4293      	cmp	r3, r2
 800a76c:	d177      	bne.n	800a85e <UART_SetConfig+0x19a>
 800a76e:	4ba9      	ldr	r3, [pc, #676]	; (800aa14 <UART_SetConfig+0x350>)
 800a770:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a772:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800a776:	2b28      	cmp	r3, #40	; 0x28
 800a778:	d86c      	bhi.n	800a854 <UART_SetConfig+0x190>
 800a77a:	a201      	add	r2, pc, #4	; (adr r2, 800a780 <UART_SetConfig+0xbc>)
 800a77c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a780:	0800a825 	.word	0x0800a825
 800a784:	0800a855 	.word	0x0800a855
 800a788:	0800a855 	.word	0x0800a855
 800a78c:	0800a855 	.word	0x0800a855
 800a790:	0800a855 	.word	0x0800a855
 800a794:	0800a855 	.word	0x0800a855
 800a798:	0800a855 	.word	0x0800a855
 800a79c:	0800a855 	.word	0x0800a855
 800a7a0:	0800a82d 	.word	0x0800a82d
 800a7a4:	0800a855 	.word	0x0800a855
 800a7a8:	0800a855 	.word	0x0800a855
 800a7ac:	0800a855 	.word	0x0800a855
 800a7b0:	0800a855 	.word	0x0800a855
 800a7b4:	0800a855 	.word	0x0800a855
 800a7b8:	0800a855 	.word	0x0800a855
 800a7bc:	0800a855 	.word	0x0800a855
 800a7c0:	0800a835 	.word	0x0800a835
 800a7c4:	0800a855 	.word	0x0800a855
 800a7c8:	0800a855 	.word	0x0800a855
 800a7cc:	0800a855 	.word	0x0800a855
 800a7d0:	0800a855 	.word	0x0800a855
 800a7d4:	0800a855 	.word	0x0800a855
 800a7d8:	0800a855 	.word	0x0800a855
 800a7dc:	0800a855 	.word	0x0800a855
 800a7e0:	0800a83d 	.word	0x0800a83d
 800a7e4:	0800a855 	.word	0x0800a855
 800a7e8:	0800a855 	.word	0x0800a855
 800a7ec:	0800a855 	.word	0x0800a855
 800a7f0:	0800a855 	.word	0x0800a855
 800a7f4:	0800a855 	.word	0x0800a855
 800a7f8:	0800a855 	.word	0x0800a855
 800a7fc:	0800a855 	.word	0x0800a855
 800a800:	0800a845 	.word	0x0800a845
 800a804:	0800a855 	.word	0x0800a855
 800a808:	0800a855 	.word	0x0800a855
 800a80c:	0800a855 	.word	0x0800a855
 800a810:	0800a855 	.word	0x0800a855
 800a814:	0800a855 	.word	0x0800a855
 800a818:	0800a855 	.word	0x0800a855
 800a81c:	0800a855 	.word	0x0800a855
 800a820:	0800a84d 	.word	0x0800a84d
 800a824:	2301      	movs	r3, #1
 800a826:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a82a:	e233      	b.n	800ac94 <UART_SetConfig+0x5d0>
 800a82c:	2304      	movs	r3, #4
 800a82e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a832:	e22f      	b.n	800ac94 <UART_SetConfig+0x5d0>
 800a834:	2308      	movs	r3, #8
 800a836:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a83a:	e22b      	b.n	800ac94 <UART_SetConfig+0x5d0>
 800a83c:	2310      	movs	r3, #16
 800a83e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a842:	e227      	b.n	800ac94 <UART_SetConfig+0x5d0>
 800a844:	2320      	movs	r3, #32
 800a846:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a84a:	e223      	b.n	800ac94 <UART_SetConfig+0x5d0>
 800a84c:	2340      	movs	r3, #64	; 0x40
 800a84e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a852:	e21f      	b.n	800ac94 <UART_SetConfig+0x5d0>
 800a854:	2380      	movs	r3, #128	; 0x80
 800a856:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a85a:	bf00      	nop
 800a85c:	e21a      	b.n	800ac94 <UART_SetConfig+0x5d0>
 800a85e:	687b      	ldr	r3, [r7, #4]
 800a860:	681b      	ldr	r3, [r3, #0]
 800a862:	4a6d      	ldr	r2, [pc, #436]	; (800aa18 <UART_SetConfig+0x354>)
 800a864:	4293      	cmp	r3, r2
 800a866:	d132      	bne.n	800a8ce <UART_SetConfig+0x20a>
 800a868:	4b6a      	ldr	r3, [pc, #424]	; (800aa14 <UART_SetConfig+0x350>)
 800a86a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a86c:	f003 0307 	and.w	r3, r3, #7
 800a870:	2b05      	cmp	r3, #5
 800a872:	d827      	bhi.n	800a8c4 <UART_SetConfig+0x200>
 800a874:	a201      	add	r2, pc, #4	; (adr r2, 800a87c <UART_SetConfig+0x1b8>)
 800a876:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a87a:	bf00      	nop
 800a87c:	0800a895 	.word	0x0800a895
 800a880:	0800a89d 	.word	0x0800a89d
 800a884:	0800a8a5 	.word	0x0800a8a5
 800a888:	0800a8ad 	.word	0x0800a8ad
 800a88c:	0800a8b5 	.word	0x0800a8b5
 800a890:	0800a8bd 	.word	0x0800a8bd
 800a894:	2300      	movs	r3, #0
 800a896:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a89a:	e1fb      	b.n	800ac94 <UART_SetConfig+0x5d0>
 800a89c:	2304      	movs	r3, #4
 800a89e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a8a2:	e1f7      	b.n	800ac94 <UART_SetConfig+0x5d0>
 800a8a4:	2308      	movs	r3, #8
 800a8a6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a8aa:	e1f3      	b.n	800ac94 <UART_SetConfig+0x5d0>
 800a8ac:	2310      	movs	r3, #16
 800a8ae:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a8b2:	e1ef      	b.n	800ac94 <UART_SetConfig+0x5d0>
 800a8b4:	2320      	movs	r3, #32
 800a8b6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a8ba:	e1eb      	b.n	800ac94 <UART_SetConfig+0x5d0>
 800a8bc:	2340      	movs	r3, #64	; 0x40
 800a8be:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a8c2:	e1e7      	b.n	800ac94 <UART_SetConfig+0x5d0>
 800a8c4:	2380      	movs	r3, #128	; 0x80
 800a8c6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a8ca:	bf00      	nop
 800a8cc:	e1e2      	b.n	800ac94 <UART_SetConfig+0x5d0>
 800a8ce:	687b      	ldr	r3, [r7, #4]
 800a8d0:	681b      	ldr	r3, [r3, #0]
 800a8d2:	4a52      	ldr	r2, [pc, #328]	; (800aa1c <UART_SetConfig+0x358>)
 800a8d4:	4293      	cmp	r3, r2
 800a8d6:	d132      	bne.n	800a93e <UART_SetConfig+0x27a>
 800a8d8:	4b4e      	ldr	r3, [pc, #312]	; (800aa14 <UART_SetConfig+0x350>)
 800a8da:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a8dc:	f003 0307 	and.w	r3, r3, #7
 800a8e0:	2b05      	cmp	r3, #5
 800a8e2:	d827      	bhi.n	800a934 <UART_SetConfig+0x270>
 800a8e4:	a201      	add	r2, pc, #4	; (adr r2, 800a8ec <UART_SetConfig+0x228>)
 800a8e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a8ea:	bf00      	nop
 800a8ec:	0800a905 	.word	0x0800a905
 800a8f0:	0800a90d 	.word	0x0800a90d
 800a8f4:	0800a915 	.word	0x0800a915
 800a8f8:	0800a91d 	.word	0x0800a91d
 800a8fc:	0800a925 	.word	0x0800a925
 800a900:	0800a92d 	.word	0x0800a92d
 800a904:	2300      	movs	r3, #0
 800a906:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a90a:	e1c3      	b.n	800ac94 <UART_SetConfig+0x5d0>
 800a90c:	2304      	movs	r3, #4
 800a90e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a912:	e1bf      	b.n	800ac94 <UART_SetConfig+0x5d0>
 800a914:	2308      	movs	r3, #8
 800a916:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a91a:	e1bb      	b.n	800ac94 <UART_SetConfig+0x5d0>
 800a91c:	2310      	movs	r3, #16
 800a91e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a922:	e1b7      	b.n	800ac94 <UART_SetConfig+0x5d0>
 800a924:	2320      	movs	r3, #32
 800a926:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a92a:	e1b3      	b.n	800ac94 <UART_SetConfig+0x5d0>
 800a92c:	2340      	movs	r3, #64	; 0x40
 800a92e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a932:	e1af      	b.n	800ac94 <UART_SetConfig+0x5d0>
 800a934:	2380      	movs	r3, #128	; 0x80
 800a936:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a93a:	bf00      	nop
 800a93c:	e1aa      	b.n	800ac94 <UART_SetConfig+0x5d0>
 800a93e:	687b      	ldr	r3, [r7, #4]
 800a940:	681b      	ldr	r3, [r3, #0]
 800a942:	4a37      	ldr	r2, [pc, #220]	; (800aa20 <UART_SetConfig+0x35c>)
 800a944:	4293      	cmp	r3, r2
 800a946:	d132      	bne.n	800a9ae <UART_SetConfig+0x2ea>
 800a948:	4b32      	ldr	r3, [pc, #200]	; (800aa14 <UART_SetConfig+0x350>)
 800a94a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a94c:	f003 0307 	and.w	r3, r3, #7
 800a950:	2b05      	cmp	r3, #5
 800a952:	d827      	bhi.n	800a9a4 <UART_SetConfig+0x2e0>
 800a954:	a201      	add	r2, pc, #4	; (adr r2, 800a95c <UART_SetConfig+0x298>)
 800a956:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a95a:	bf00      	nop
 800a95c:	0800a975 	.word	0x0800a975
 800a960:	0800a97d 	.word	0x0800a97d
 800a964:	0800a985 	.word	0x0800a985
 800a968:	0800a98d 	.word	0x0800a98d
 800a96c:	0800a995 	.word	0x0800a995
 800a970:	0800a99d 	.word	0x0800a99d
 800a974:	2300      	movs	r3, #0
 800a976:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a97a:	e18b      	b.n	800ac94 <UART_SetConfig+0x5d0>
 800a97c:	2304      	movs	r3, #4
 800a97e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a982:	e187      	b.n	800ac94 <UART_SetConfig+0x5d0>
 800a984:	2308      	movs	r3, #8
 800a986:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a98a:	e183      	b.n	800ac94 <UART_SetConfig+0x5d0>
 800a98c:	2310      	movs	r3, #16
 800a98e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a992:	e17f      	b.n	800ac94 <UART_SetConfig+0x5d0>
 800a994:	2320      	movs	r3, #32
 800a996:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a99a:	e17b      	b.n	800ac94 <UART_SetConfig+0x5d0>
 800a99c:	2340      	movs	r3, #64	; 0x40
 800a99e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a9a2:	e177      	b.n	800ac94 <UART_SetConfig+0x5d0>
 800a9a4:	2380      	movs	r3, #128	; 0x80
 800a9a6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a9aa:	bf00      	nop
 800a9ac:	e172      	b.n	800ac94 <UART_SetConfig+0x5d0>
 800a9ae:	687b      	ldr	r3, [r7, #4]
 800a9b0:	681b      	ldr	r3, [r3, #0]
 800a9b2:	4a1c      	ldr	r2, [pc, #112]	; (800aa24 <UART_SetConfig+0x360>)
 800a9b4:	4293      	cmp	r3, r2
 800a9b6:	d144      	bne.n	800aa42 <UART_SetConfig+0x37e>
 800a9b8:	4b16      	ldr	r3, [pc, #88]	; (800aa14 <UART_SetConfig+0x350>)
 800a9ba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a9bc:	f003 0307 	and.w	r3, r3, #7
 800a9c0:	2b05      	cmp	r3, #5
 800a9c2:	d839      	bhi.n	800aa38 <UART_SetConfig+0x374>
 800a9c4:	a201      	add	r2, pc, #4	; (adr r2, 800a9cc <UART_SetConfig+0x308>)
 800a9c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a9ca:	bf00      	nop
 800a9cc:	0800a9e5 	.word	0x0800a9e5
 800a9d0:	0800a9ed 	.word	0x0800a9ed
 800a9d4:	0800a9f5 	.word	0x0800a9f5
 800a9d8:	0800a9fd 	.word	0x0800a9fd
 800a9dc:	0800aa29 	.word	0x0800aa29
 800a9e0:	0800aa31 	.word	0x0800aa31
 800a9e4:	2300      	movs	r3, #0
 800a9e6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a9ea:	e153      	b.n	800ac94 <UART_SetConfig+0x5d0>
 800a9ec:	2304      	movs	r3, #4
 800a9ee:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a9f2:	e14f      	b.n	800ac94 <UART_SetConfig+0x5d0>
 800a9f4:	2308      	movs	r3, #8
 800a9f6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a9fa:	e14b      	b.n	800ac94 <UART_SetConfig+0x5d0>
 800a9fc:	2310      	movs	r3, #16
 800a9fe:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800aa02:	e147      	b.n	800ac94 <UART_SetConfig+0x5d0>
 800aa04:	cfff69f3 	.word	0xcfff69f3
 800aa08:	58000c00 	.word	0x58000c00
 800aa0c:	11fff4ff 	.word	0x11fff4ff
 800aa10:	40011000 	.word	0x40011000
 800aa14:	58024400 	.word	0x58024400
 800aa18:	40004400 	.word	0x40004400
 800aa1c:	40004800 	.word	0x40004800
 800aa20:	40004c00 	.word	0x40004c00
 800aa24:	40005000 	.word	0x40005000
 800aa28:	2320      	movs	r3, #32
 800aa2a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800aa2e:	e131      	b.n	800ac94 <UART_SetConfig+0x5d0>
 800aa30:	2340      	movs	r3, #64	; 0x40
 800aa32:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800aa36:	e12d      	b.n	800ac94 <UART_SetConfig+0x5d0>
 800aa38:	2380      	movs	r3, #128	; 0x80
 800aa3a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800aa3e:	bf00      	nop
 800aa40:	e128      	b.n	800ac94 <UART_SetConfig+0x5d0>
 800aa42:	687b      	ldr	r3, [r7, #4]
 800aa44:	681b      	ldr	r3, [r3, #0]
 800aa46:	4ab6      	ldr	r2, [pc, #728]	; (800ad20 <UART_SetConfig+0x65c>)
 800aa48:	4293      	cmp	r3, r2
 800aa4a:	d178      	bne.n	800ab3e <UART_SetConfig+0x47a>
 800aa4c:	4bb5      	ldr	r3, [pc, #724]	; (800ad24 <UART_SetConfig+0x660>)
 800aa4e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800aa50:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800aa54:	2b28      	cmp	r3, #40	; 0x28
 800aa56:	d86d      	bhi.n	800ab34 <UART_SetConfig+0x470>
 800aa58:	a201      	add	r2, pc, #4	; (adr r2, 800aa60 <UART_SetConfig+0x39c>)
 800aa5a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800aa5e:	bf00      	nop
 800aa60:	0800ab05 	.word	0x0800ab05
 800aa64:	0800ab35 	.word	0x0800ab35
 800aa68:	0800ab35 	.word	0x0800ab35
 800aa6c:	0800ab35 	.word	0x0800ab35
 800aa70:	0800ab35 	.word	0x0800ab35
 800aa74:	0800ab35 	.word	0x0800ab35
 800aa78:	0800ab35 	.word	0x0800ab35
 800aa7c:	0800ab35 	.word	0x0800ab35
 800aa80:	0800ab0d 	.word	0x0800ab0d
 800aa84:	0800ab35 	.word	0x0800ab35
 800aa88:	0800ab35 	.word	0x0800ab35
 800aa8c:	0800ab35 	.word	0x0800ab35
 800aa90:	0800ab35 	.word	0x0800ab35
 800aa94:	0800ab35 	.word	0x0800ab35
 800aa98:	0800ab35 	.word	0x0800ab35
 800aa9c:	0800ab35 	.word	0x0800ab35
 800aaa0:	0800ab15 	.word	0x0800ab15
 800aaa4:	0800ab35 	.word	0x0800ab35
 800aaa8:	0800ab35 	.word	0x0800ab35
 800aaac:	0800ab35 	.word	0x0800ab35
 800aab0:	0800ab35 	.word	0x0800ab35
 800aab4:	0800ab35 	.word	0x0800ab35
 800aab8:	0800ab35 	.word	0x0800ab35
 800aabc:	0800ab35 	.word	0x0800ab35
 800aac0:	0800ab1d 	.word	0x0800ab1d
 800aac4:	0800ab35 	.word	0x0800ab35
 800aac8:	0800ab35 	.word	0x0800ab35
 800aacc:	0800ab35 	.word	0x0800ab35
 800aad0:	0800ab35 	.word	0x0800ab35
 800aad4:	0800ab35 	.word	0x0800ab35
 800aad8:	0800ab35 	.word	0x0800ab35
 800aadc:	0800ab35 	.word	0x0800ab35
 800aae0:	0800ab25 	.word	0x0800ab25
 800aae4:	0800ab35 	.word	0x0800ab35
 800aae8:	0800ab35 	.word	0x0800ab35
 800aaec:	0800ab35 	.word	0x0800ab35
 800aaf0:	0800ab35 	.word	0x0800ab35
 800aaf4:	0800ab35 	.word	0x0800ab35
 800aaf8:	0800ab35 	.word	0x0800ab35
 800aafc:	0800ab35 	.word	0x0800ab35
 800ab00:	0800ab2d 	.word	0x0800ab2d
 800ab04:	2301      	movs	r3, #1
 800ab06:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ab0a:	e0c3      	b.n	800ac94 <UART_SetConfig+0x5d0>
 800ab0c:	2304      	movs	r3, #4
 800ab0e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ab12:	e0bf      	b.n	800ac94 <UART_SetConfig+0x5d0>
 800ab14:	2308      	movs	r3, #8
 800ab16:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ab1a:	e0bb      	b.n	800ac94 <UART_SetConfig+0x5d0>
 800ab1c:	2310      	movs	r3, #16
 800ab1e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ab22:	e0b7      	b.n	800ac94 <UART_SetConfig+0x5d0>
 800ab24:	2320      	movs	r3, #32
 800ab26:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ab2a:	e0b3      	b.n	800ac94 <UART_SetConfig+0x5d0>
 800ab2c:	2340      	movs	r3, #64	; 0x40
 800ab2e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ab32:	e0af      	b.n	800ac94 <UART_SetConfig+0x5d0>
 800ab34:	2380      	movs	r3, #128	; 0x80
 800ab36:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ab3a:	bf00      	nop
 800ab3c:	e0aa      	b.n	800ac94 <UART_SetConfig+0x5d0>
 800ab3e:	687b      	ldr	r3, [r7, #4]
 800ab40:	681b      	ldr	r3, [r3, #0]
 800ab42:	4a79      	ldr	r2, [pc, #484]	; (800ad28 <UART_SetConfig+0x664>)
 800ab44:	4293      	cmp	r3, r2
 800ab46:	d132      	bne.n	800abae <UART_SetConfig+0x4ea>
 800ab48:	4b76      	ldr	r3, [pc, #472]	; (800ad24 <UART_SetConfig+0x660>)
 800ab4a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ab4c:	f003 0307 	and.w	r3, r3, #7
 800ab50:	2b05      	cmp	r3, #5
 800ab52:	d827      	bhi.n	800aba4 <UART_SetConfig+0x4e0>
 800ab54:	a201      	add	r2, pc, #4	; (adr r2, 800ab5c <UART_SetConfig+0x498>)
 800ab56:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ab5a:	bf00      	nop
 800ab5c:	0800ab75 	.word	0x0800ab75
 800ab60:	0800ab7d 	.word	0x0800ab7d
 800ab64:	0800ab85 	.word	0x0800ab85
 800ab68:	0800ab8d 	.word	0x0800ab8d
 800ab6c:	0800ab95 	.word	0x0800ab95
 800ab70:	0800ab9d 	.word	0x0800ab9d
 800ab74:	2300      	movs	r3, #0
 800ab76:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ab7a:	e08b      	b.n	800ac94 <UART_SetConfig+0x5d0>
 800ab7c:	2304      	movs	r3, #4
 800ab7e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ab82:	e087      	b.n	800ac94 <UART_SetConfig+0x5d0>
 800ab84:	2308      	movs	r3, #8
 800ab86:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ab8a:	e083      	b.n	800ac94 <UART_SetConfig+0x5d0>
 800ab8c:	2310      	movs	r3, #16
 800ab8e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ab92:	e07f      	b.n	800ac94 <UART_SetConfig+0x5d0>
 800ab94:	2320      	movs	r3, #32
 800ab96:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ab9a:	e07b      	b.n	800ac94 <UART_SetConfig+0x5d0>
 800ab9c:	2340      	movs	r3, #64	; 0x40
 800ab9e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800aba2:	e077      	b.n	800ac94 <UART_SetConfig+0x5d0>
 800aba4:	2380      	movs	r3, #128	; 0x80
 800aba6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800abaa:	bf00      	nop
 800abac:	e072      	b.n	800ac94 <UART_SetConfig+0x5d0>
 800abae:	687b      	ldr	r3, [r7, #4]
 800abb0:	681b      	ldr	r3, [r3, #0]
 800abb2:	4a5e      	ldr	r2, [pc, #376]	; (800ad2c <UART_SetConfig+0x668>)
 800abb4:	4293      	cmp	r3, r2
 800abb6:	d132      	bne.n	800ac1e <UART_SetConfig+0x55a>
 800abb8:	4b5a      	ldr	r3, [pc, #360]	; (800ad24 <UART_SetConfig+0x660>)
 800abba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800abbc:	f003 0307 	and.w	r3, r3, #7
 800abc0:	2b05      	cmp	r3, #5
 800abc2:	d827      	bhi.n	800ac14 <UART_SetConfig+0x550>
 800abc4:	a201      	add	r2, pc, #4	; (adr r2, 800abcc <UART_SetConfig+0x508>)
 800abc6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800abca:	bf00      	nop
 800abcc:	0800abe5 	.word	0x0800abe5
 800abd0:	0800abed 	.word	0x0800abed
 800abd4:	0800abf5 	.word	0x0800abf5
 800abd8:	0800abfd 	.word	0x0800abfd
 800abdc:	0800ac05 	.word	0x0800ac05
 800abe0:	0800ac0d 	.word	0x0800ac0d
 800abe4:	2300      	movs	r3, #0
 800abe6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800abea:	e053      	b.n	800ac94 <UART_SetConfig+0x5d0>
 800abec:	2304      	movs	r3, #4
 800abee:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800abf2:	e04f      	b.n	800ac94 <UART_SetConfig+0x5d0>
 800abf4:	2308      	movs	r3, #8
 800abf6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800abfa:	e04b      	b.n	800ac94 <UART_SetConfig+0x5d0>
 800abfc:	2310      	movs	r3, #16
 800abfe:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ac02:	e047      	b.n	800ac94 <UART_SetConfig+0x5d0>
 800ac04:	2320      	movs	r3, #32
 800ac06:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ac0a:	e043      	b.n	800ac94 <UART_SetConfig+0x5d0>
 800ac0c:	2340      	movs	r3, #64	; 0x40
 800ac0e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ac12:	e03f      	b.n	800ac94 <UART_SetConfig+0x5d0>
 800ac14:	2380      	movs	r3, #128	; 0x80
 800ac16:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ac1a:	bf00      	nop
 800ac1c:	e03a      	b.n	800ac94 <UART_SetConfig+0x5d0>
 800ac1e:	687b      	ldr	r3, [r7, #4]
 800ac20:	681b      	ldr	r3, [r3, #0]
 800ac22:	4a43      	ldr	r2, [pc, #268]	; (800ad30 <UART_SetConfig+0x66c>)
 800ac24:	4293      	cmp	r3, r2
 800ac26:	d132      	bne.n	800ac8e <UART_SetConfig+0x5ca>
 800ac28:	4b3e      	ldr	r3, [pc, #248]	; (800ad24 <UART_SetConfig+0x660>)
 800ac2a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ac2c:	f003 0307 	and.w	r3, r3, #7
 800ac30:	2b05      	cmp	r3, #5
 800ac32:	d827      	bhi.n	800ac84 <UART_SetConfig+0x5c0>
 800ac34:	a201      	add	r2, pc, #4	; (adr r2, 800ac3c <UART_SetConfig+0x578>)
 800ac36:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ac3a:	bf00      	nop
 800ac3c:	0800ac55 	.word	0x0800ac55
 800ac40:	0800ac5d 	.word	0x0800ac5d
 800ac44:	0800ac65 	.word	0x0800ac65
 800ac48:	0800ac6d 	.word	0x0800ac6d
 800ac4c:	0800ac75 	.word	0x0800ac75
 800ac50:	0800ac7d 	.word	0x0800ac7d
 800ac54:	2302      	movs	r3, #2
 800ac56:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ac5a:	e01b      	b.n	800ac94 <UART_SetConfig+0x5d0>
 800ac5c:	2304      	movs	r3, #4
 800ac5e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ac62:	e017      	b.n	800ac94 <UART_SetConfig+0x5d0>
 800ac64:	2308      	movs	r3, #8
 800ac66:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ac6a:	e013      	b.n	800ac94 <UART_SetConfig+0x5d0>
 800ac6c:	2310      	movs	r3, #16
 800ac6e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ac72:	e00f      	b.n	800ac94 <UART_SetConfig+0x5d0>
 800ac74:	2320      	movs	r3, #32
 800ac76:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ac7a:	e00b      	b.n	800ac94 <UART_SetConfig+0x5d0>
 800ac7c:	2340      	movs	r3, #64	; 0x40
 800ac7e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ac82:	e007      	b.n	800ac94 <UART_SetConfig+0x5d0>
 800ac84:	2380      	movs	r3, #128	; 0x80
 800ac86:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ac8a:	bf00      	nop
 800ac8c:	e002      	b.n	800ac94 <UART_SetConfig+0x5d0>
 800ac8e:	2380      	movs	r3, #128	; 0x80
 800ac90:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800ac94:	687b      	ldr	r3, [r7, #4]
 800ac96:	681b      	ldr	r3, [r3, #0]
 800ac98:	4a25      	ldr	r2, [pc, #148]	; (800ad30 <UART_SetConfig+0x66c>)
 800ac9a:	4293      	cmp	r3, r2
 800ac9c:	f040 80b8 	bne.w	800ae10 <UART_SetConfig+0x74c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800aca0:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800aca4:	2b08      	cmp	r3, #8
 800aca6:	d019      	beq.n	800acdc <UART_SetConfig+0x618>
 800aca8:	2b08      	cmp	r3, #8
 800acaa:	dc04      	bgt.n	800acb6 <UART_SetConfig+0x5f2>
 800acac:	2b02      	cmp	r3, #2
 800acae:	d009      	beq.n	800acc4 <UART_SetConfig+0x600>
 800acb0:	2b04      	cmp	r3, #4
 800acb2:	d00b      	beq.n	800accc <UART_SetConfig+0x608>
 800acb4:	e042      	b.n	800ad3c <UART_SetConfig+0x678>
 800acb6:	2b20      	cmp	r3, #32
 800acb8:	d02b      	beq.n	800ad12 <UART_SetConfig+0x64e>
 800acba:	2b40      	cmp	r3, #64	; 0x40
 800acbc:	d02c      	beq.n	800ad18 <UART_SetConfig+0x654>
 800acbe:	2b10      	cmp	r3, #16
 800acc0:	d014      	beq.n	800acec <UART_SetConfig+0x628>
 800acc2:	e03b      	b.n	800ad3c <UART_SetConfig+0x678>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800acc4:	f7fd f94e 	bl	8007f64 <HAL_RCCEx_GetD3PCLK1Freq>
 800acc8:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800acca:	e03d      	b.n	800ad48 <UART_SetConfig+0x684>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800accc:	f107 0314 	add.w	r3, r7, #20
 800acd0:	4618      	mov	r0, r3
 800acd2:	f7fd f95d 	bl	8007f90 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800acd6:	69bb      	ldr	r3, [r7, #24]
 800acd8:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800acda:	e035      	b.n	800ad48 <UART_SetConfig+0x684>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800acdc:	f107 0308 	add.w	r3, r7, #8
 800ace0:	4618      	mov	r0, r3
 800ace2:	f7fd faa1 	bl	8008228 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800ace6:	68fb      	ldr	r3, [r7, #12]
 800ace8:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800acea:	e02d      	b.n	800ad48 <UART_SetConfig+0x684>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800acec:	4b0d      	ldr	r3, [pc, #52]	; (800ad24 <UART_SetConfig+0x660>)
 800acee:	681b      	ldr	r3, [r3, #0]
 800acf0:	f003 0320 	and.w	r3, r3, #32
 800acf4:	2b00      	cmp	r3, #0
 800acf6:	d009      	beq.n	800ad0c <UART_SetConfig+0x648>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800acf8:	4b0a      	ldr	r3, [pc, #40]	; (800ad24 <UART_SetConfig+0x660>)
 800acfa:	681b      	ldr	r3, [r3, #0]
 800acfc:	08db      	lsrs	r3, r3, #3
 800acfe:	f003 0303 	and.w	r3, r3, #3
 800ad02:	4a0c      	ldr	r2, [pc, #48]	; (800ad34 <UART_SetConfig+0x670>)
 800ad04:	fa22 f303 	lsr.w	r3, r2, r3
 800ad08:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800ad0a:	e01d      	b.n	800ad48 <UART_SetConfig+0x684>
          pclk = (uint32_t) HSI_VALUE;
 800ad0c:	4b09      	ldr	r3, [pc, #36]	; (800ad34 <UART_SetConfig+0x670>)
 800ad0e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800ad10:	e01a      	b.n	800ad48 <UART_SetConfig+0x684>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800ad12:	4b09      	ldr	r3, [pc, #36]	; (800ad38 <UART_SetConfig+0x674>)
 800ad14:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800ad16:	e017      	b.n	800ad48 <UART_SetConfig+0x684>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800ad18:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800ad1c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800ad1e:	e013      	b.n	800ad48 <UART_SetConfig+0x684>
 800ad20:	40011400 	.word	0x40011400
 800ad24:	58024400 	.word	0x58024400
 800ad28:	40007800 	.word	0x40007800
 800ad2c:	40007c00 	.word	0x40007c00
 800ad30:	58000c00 	.word	0x58000c00
 800ad34:	03d09000 	.word	0x03d09000
 800ad38:	003d0900 	.word	0x003d0900
      default:
        pclk = 0U;
 800ad3c:	2300      	movs	r3, #0
 800ad3e:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 800ad40:	2301      	movs	r3, #1
 800ad42:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 800ad46:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800ad48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ad4a:	2b00      	cmp	r3, #0
 800ad4c:	f000 824d 	beq.w	800b1ea <UART_SetConfig+0xb26>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800ad50:	687b      	ldr	r3, [r7, #4]
 800ad52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ad54:	4aad      	ldr	r2, [pc, #692]	; (800b00c <UART_SetConfig+0x948>)
 800ad56:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800ad5a:	461a      	mov	r2, r3
 800ad5c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ad5e:	fbb3 f3f2 	udiv	r3, r3, r2
 800ad62:	623b      	str	r3, [r7, #32]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800ad64:	687b      	ldr	r3, [r7, #4]
 800ad66:	685a      	ldr	r2, [r3, #4]
 800ad68:	4613      	mov	r3, r2
 800ad6a:	005b      	lsls	r3, r3, #1
 800ad6c:	4413      	add	r3, r2
 800ad6e:	6a3a      	ldr	r2, [r7, #32]
 800ad70:	429a      	cmp	r2, r3
 800ad72:	d305      	bcc.n	800ad80 <UART_SetConfig+0x6bc>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800ad74:	687b      	ldr	r3, [r7, #4]
 800ad76:	685b      	ldr	r3, [r3, #4]
 800ad78:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800ad7a:	6a3a      	ldr	r2, [r7, #32]
 800ad7c:	429a      	cmp	r2, r3
 800ad7e:	d903      	bls.n	800ad88 <UART_SetConfig+0x6c4>
      {
        ret = HAL_ERROR;
 800ad80:	2301      	movs	r3, #1
 800ad82:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 800ad86:	e230      	b.n	800b1ea <UART_SetConfig+0xb26>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, (uint64_t)huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800ad88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ad8a:	4618      	mov	r0, r3
 800ad8c:	f04f 0100 	mov.w	r1, #0
 800ad90:	687b      	ldr	r3, [r7, #4]
 800ad92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ad94:	4a9d      	ldr	r2, [pc, #628]	; (800b00c <UART_SetConfig+0x948>)
 800ad96:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800ad9a:	b29b      	uxth	r3, r3
 800ad9c:	f04f 0400 	mov.w	r4, #0
 800ada0:	461a      	mov	r2, r3
 800ada2:	4623      	mov	r3, r4
 800ada4:	f7f5 faf4 	bl	8000390 <__aeabi_uldivmod>
 800ada8:	4603      	mov	r3, r0
 800adaa:	460c      	mov	r4, r1
 800adac:	4619      	mov	r1, r3
 800adae:	4622      	mov	r2, r4
 800adb0:	f04f 0300 	mov.w	r3, #0
 800adb4:	f04f 0400 	mov.w	r4, #0
 800adb8:	0214      	lsls	r4, r2, #8
 800adba:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 800adbe:	020b      	lsls	r3, r1, #8
 800adc0:	687a      	ldr	r2, [r7, #4]
 800adc2:	6852      	ldr	r2, [r2, #4]
 800adc4:	0852      	lsrs	r2, r2, #1
 800adc6:	4611      	mov	r1, r2
 800adc8:	f04f 0200 	mov.w	r2, #0
 800adcc:	eb13 0b01 	adds.w	fp, r3, r1
 800add0:	eb44 0c02 	adc.w	ip, r4, r2
 800add4:	4658      	mov	r0, fp
 800add6:	4661      	mov	r1, ip
 800add8:	687b      	ldr	r3, [r7, #4]
 800adda:	685b      	ldr	r3, [r3, #4]
 800addc:	f04f 0400 	mov.w	r4, #0
 800ade0:	461a      	mov	r2, r3
 800ade2:	4623      	mov	r3, r4
 800ade4:	f7f5 fad4 	bl	8000390 <__aeabi_uldivmod>
 800ade8:	4603      	mov	r3, r0
 800adea:	460c      	mov	r4, r1
 800adec:	62bb      	str	r3, [r7, #40]	; 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800adee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800adf0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800adf4:	d308      	bcc.n	800ae08 <UART_SetConfig+0x744>
 800adf6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800adf8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800adfc:	d204      	bcs.n	800ae08 <UART_SetConfig+0x744>
        {
          huart->Instance->BRR = usartdiv;
 800adfe:	687b      	ldr	r3, [r7, #4]
 800ae00:	681b      	ldr	r3, [r3, #0]
 800ae02:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ae04:	60da      	str	r2, [r3, #12]
 800ae06:	e1f0      	b.n	800b1ea <UART_SetConfig+0xb26>
        }
        else
        {
          ret = HAL_ERROR;
 800ae08:	2301      	movs	r3, #1
 800ae0a:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 800ae0e:	e1ec      	b.n	800b1ea <UART_SetConfig+0xb26>
        }
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800ae10:	687b      	ldr	r3, [r7, #4]
 800ae12:	69db      	ldr	r3, [r3, #28]
 800ae14:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800ae18:	f040 8100 	bne.w	800b01c <UART_SetConfig+0x958>
  {
    switch (clocksource)
 800ae1c:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800ae20:	2b40      	cmp	r3, #64	; 0x40
 800ae22:	f200 80b7 	bhi.w	800af94 <UART_SetConfig+0x8d0>
 800ae26:	a201      	add	r2, pc, #4	; (adr r2, 800ae2c <UART_SetConfig+0x768>)
 800ae28:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ae2c:	0800af31 	.word	0x0800af31
 800ae30:	0800af39 	.word	0x0800af39
 800ae34:	0800af95 	.word	0x0800af95
 800ae38:	0800af95 	.word	0x0800af95
 800ae3c:	0800af41 	.word	0x0800af41
 800ae40:	0800af95 	.word	0x0800af95
 800ae44:	0800af95 	.word	0x0800af95
 800ae48:	0800af95 	.word	0x0800af95
 800ae4c:	0800af51 	.word	0x0800af51
 800ae50:	0800af95 	.word	0x0800af95
 800ae54:	0800af95 	.word	0x0800af95
 800ae58:	0800af95 	.word	0x0800af95
 800ae5c:	0800af95 	.word	0x0800af95
 800ae60:	0800af95 	.word	0x0800af95
 800ae64:	0800af95 	.word	0x0800af95
 800ae68:	0800af95 	.word	0x0800af95
 800ae6c:	0800af61 	.word	0x0800af61
 800ae70:	0800af95 	.word	0x0800af95
 800ae74:	0800af95 	.word	0x0800af95
 800ae78:	0800af95 	.word	0x0800af95
 800ae7c:	0800af95 	.word	0x0800af95
 800ae80:	0800af95 	.word	0x0800af95
 800ae84:	0800af95 	.word	0x0800af95
 800ae88:	0800af95 	.word	0x0800af95
 800ae8c:	0800af95 	.word	0x0800af95
 800ae90:	0800af95 	.word	0x0800af95
 800ae94:	0800af95 	.word	0x0800af95
 800ae98:	0800af95 	.word	0x0800af95
 800ae9c:	0800af95 	.word	0x0800af95
 800aea0:	0800af95 	.word	0x0800af95
 800aea4:	0800af95 	.word	0x0800af95
 800aea8:	0800af95 	.word	0x0800af95
 800aeac:	0800af87 	.word	0x0800af87
 800aeb0:	0800af95 	.word	0x0800af95
 800aeb4:	0800af95 	.word	0x0800af95
 800aeb8:	0800af95 	.word	0x0800af95
 800aebc:	0800af95 	.word	0x0800af95
 800aec0:	0800af95 	.word	0x0800af95
 800aec4:	0800af95 	.word	0x0800af95
 800aec8:	0800af95 	.word	0x0800af95
 800aecc:	0800af95 	.word	0x0800af95
 800aed0:	0800af95 	.word	0x0800af95
 800aed4:	0800af95 	.word	0x0800af95
 800aed8:	0800af95 	.word	0x0800af95
 800aedc:	0800af95 	.word	0x0800af95
 800aee0:	0800af95 	.word	0x0800af95
 800aee4:	0800af95 	.word	0x0800af95
 800aee8:	0800af95 	.word	0x0800af95
 800aeec:	0800af95 	.word	0x0800af95
 800aef0:	0800af95 	.word	0x0800af95
 800aef4:	0800af95 	.word	0x0800af95
 800aef8:	0800af95 	.word	0x0800af95
 800aefc:	0800af95 	.word	0x0800af95
 800af00:	0800af95 	.word	0x0800af95
 800af04:	0800af95 	.word	0x0800af95
 800af08:	0800af95 	.word	0x0800af95
 800af0c:	0800af95 	.word	0x0800af95
 800af10:	0800af95 	.word	0x0800af95
 800af14:	0800af95 	.word	0x0800af95
 800af18:	0800af95 	.word	0x0800af95
 800af1c:	0800af95 	.word	0x0800af95
 800af20:	0800af95 	.word	0x0800af95
 800af24:	0800af95 	.word	0x0800af95
 800af28:	0800af95 	.word	0x0800af95
 800af2c:	0800af8d 	.word	0x0800af8d
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800af30:	f7fb fe86 	bl	8006c40 <HAL_RCC_GetPCLK1Freq>
 800af34:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800af36:	e033      	b.n	800afa0 <UART_SetConfig+0x8dc>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800af38:	f7fb fe98 	bl	8006c6c <HAL_RCC_GetPCLK2Freq>
 800af3c:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800af3e:	e02f      	b.n	800afa0 <UART_SetConfig+0x8dc>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800af40:	f107 0314 	add.w	r3, r7, #20
 800af44:	4618      	mov	r0, r3
 800af46:	f7fd f823 	bl	8007f90 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800af4a:	69bb      	ldr	r3, [r7, #24]
 800af4c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800af4e:	e027      	b.n	800afa0 <UART_SetConfig+0x8dc>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800af50:	f107 0308 	add.w	r3, r7, #8
 800af54:	4618      	mov	r0, r3
 800af56:	f7fd f967 	bl	8008228 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800af5a:	68fb      	ldr	r3, [r7, #12]
 800af5c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800af5e:	e01f      	b.n	800afa0 <UART_SetConfig+0x8dc>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800af60:	4b2b      	ldr	r3, [pc, #172]	; (800b010 <UART_SetConfig+0x94c>)
 800af62:	681b      	ldr	r3, [r3, #0]
 800af64:	f003 0320 	and.w	r3, r3, #32
 800af68:	2b00      	cmp	r3, #0
 800af6a:	d009      	beq.n	800af80 <UART_SetConfig+0x8bc>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800af6c:	4b28      	ldr	r3, [pc, #160]	; (800b010 <UART_SetConfig+0x94c>)
 800af6e:	681b      	ldr	r3, [r3, #0]
 800af70:	08db      	lsrs	r3, r3, #3
 800af72:	f003 0303 	and.w	r3, r3, #3
 800af76:	4a27      	ldr	r2, [pc, #156]	; (800b014 <UART_SetConfig+0x950>)
 800af78:	fa22 f303 	lsr.w	r3, r2, r3
 800af7c:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800af7e:	e00f      	b.n	800afa0 <UART_SetConfig+0x8dc>
          pclk = (uint32_t) HSI_VALUE;
 800af80:	4b24      	ldr	r3, [pc, #144]	; (800b014 <UART_SetConfig+0x950>)
 800af82:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800af84:	e00c      	b.n	800afa0 <UART_SetConfig+0x8dc>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800af86:	4b24      	ldr	r3, [pc, #144]	; (800b018 <UART_SetConfig+0x954>)
 800af88:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800af8a:	e009      	b.n	800afa0 <UART_SetConfig+0x8dc>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800af8c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800af90:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800af92:	e005      	b.n	800afa0 <UART_SetConfig+0x8dc>
      default:
        pclk = 0U;
 800af94:	2300      	movs	r3, #0
 800af96:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 800af98:	2301      	movs	r3, #1
 800af9a:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 800af9e:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800afa0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800afa2:	2b00      	cmp	r3, #0
 800afa4:	f000 8121 	beq.w	800b1ea <UART_SetConfig+0xb26>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800afa8:	687b      	ldr	r3, [r7, #4]
 800afaa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800afac:	4a17      	ldr	r2, [pc, #92]	; (800b00c <UART_SetConfig+0x948>)
 800afae:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800afb2:	461a      	mov	r2, r3
 800afb4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800afb6:	fbb3 f3f2 	udiv	r3, r3, r2
 800afba:	005a      	lsls	r2, r3, #1
 800afbc:	687b      	ldr	r3, [r7, #4]
 800afbe:	685b      	ldr	r3, [r3, #4]
 800afc0:	085b      	lsrs	r3, r3, #1
 800afc2:	441a      	add	r2, r3
 800afc4:	687b      	ldr	r3, [r7, #4]
 800afc6:	685b      	ldr	r3, [r3, #4]
 800afc8:	fbb2 f3f3 	udiv	r3, r2, r3
 800afcc:	b29b      	uxth	r3, r3
 800afce:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800afd0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800afd2:	2b0f      	cmp	r3, #15
 800afd4:	d916      	bls.n	800b004 <UART_SetConfig+0x940>
 800afd6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800afd8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800afdc:	d212      	bcs.n	800b004 <UART_SetConfig+0x940>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800afde:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800afe0:	b29b      	uxth	r3, r3
 800afe2:	f023 030f 	bic.w	r3, r3, #15
 800afe6:	84fb      	strh	r3, [r7, #38]	; 0x26
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800afe8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800afea:	085b      	lsrs	r3, r3, #1
 800afec:	b29b      	uxth	r3, r3
 800afee:	f003 0307 	and.w	r3, r3, #7
 800aff2:	b29a      	uxth	r2, r3
 800aff4:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800aff6:	4313      	orrs	r3, r2
 800aff8:	84fb      	strh	r3, [r7, #38]	; 0x26
        huart->Instance->BRR = brrtemp;
 800affa:	687b      	ldr	r3, [r7, #4]
 800affc:	681b      	ldr	r3, [r3, #0]
 800affe:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800b000:	60da      	str	r2, [r3, #12]
 800b002:	e0f2      	b.n	800b1ea <UART_SetConfig+0xb26>
      }
      else
      {
        ret = HAL_ERROR;
 800b004:	2301      	movs	r3, #1
 800b006:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 800b00a:	e0ee      	b.n	800b1ea <UART_SetConfig+0xb26>
 800b00c:	0801267c 	.word	0x0801267c
 800b010:	58024400 	.word	0x58024400
 800b014:	03d09000 	.word	0x03d09000
 800b018:	003d0900 	.word	0x003d0900
      }
    }
  }
  else
  {
    switch (clocksource)
 800b01c:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800b020:	2b40      	cmp	r3, #64	; 0x40
 800b022:	f200 80b7 	bhi.w	800b194 <UART_SetConfig+0xad0>
 800b026:	a201      	add	r2, pc, #4	; (adr r2, 800b02c <UART_SetConfig+0x968>)
 800b028:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b02c:	0800b131 	.word	0x0800b131
 800b030:	0800b139 	.word	0x0800b139
 800b034:	0800b195 	.word	0x0800b195
 800b038:	0800b195 	.word	0x0800b195
 800b03c:	0800b141 	.word	0x0800b141
 800b040:	0800b195 	.word	0x0800b195
 800b044:	0800b195 	.word	0x0800b195
 800b048:	0800b195 	.word	0x0800b195
 800b04c:	0800b151 	.word	0x0800b151
 800b050:	0800b195 	.word	0x0800b195
 800b054:	0800b195 	.word	0x0800b195
 800b058:	0800b195 	.word	0x0800b195
 800b05c:	0800b195 	.word	0x0800b195
 800b060:	0800b195 	.word	0x0800b195
 800b064:	0800b195 	.word	0x0800b195
 800b068:	0800b195 	.word	0x0800b195
 800b06c:	0800b161 	.word	0x0800b161
 800b070:	0800b195 	.word	0x0800b195
 800b074:	0800b195 	.word	0x0800b195
 800b078:	0800b195 	.word	0x0800b195
 800b07c:	0800b195 	.word	0x0800b195
 800b080:	0800b195 	.word	0x0800b195
 800b084:	0800b195 	.word	0x0800b195
 800b088:	0800b195 	.word	0x0800b195
 800b08c:	0800b195 	.word	0x0800b195
 800b090:	0800b195 	.word	0x0800b195
 800b094:	0800b195 	.word	0x0800b195
 800b098:	0800b195 	.word	0x0800b195
 800b09c:	0800b195 	.word	0x0800b195
 800b0a0:	0800b195 	.word	0x0800b195
 800b0a4:	0800b195 	.word	0x0800b195
 800b0a8:	0800b195 	.word	0x0800b195
 800b0ac:	0800b187 	.word	0x0800b187
 800b0b0:	0800b195 	.word	0x0800b195
 800b0b4:	0800b195 	.word	0x0800b195
 800b0b8:	0800b195 	.word	0x0800b195
 800b0bc:	0800b195 	.word	0x0800b195
 800b0c0:	0800b195 	.word	0x0800b195
 800b0c4:	0800b195 	.word	0x0800b195
 800b0c8:	0800b195 	.word	0x0800b195
 800b0cc:	0800b195 	.word	0x0800b195
 800b0d0:	0800b195 	.word	0x0800b195
 800b0d4:	0800b195 	.word	0x0800b195
 800b0d8:	0800b195 	.word	0x0800b195
 800b0dc:	0800b195 	.word	0x0800b195
 800b0e0:	0800b195 	.word	0x0800b195
 800b0e4:	0800b195 	.word	0x0800b195
 800b0e8:	0800b195 	.word	0x0800b195
 800b0ec:	0800b195 	.word	0x0800b195
 800b0f0:	0800b195 	.word	0x0800b195
 800b0f4:	0800b195 	.word	0x0800b195
 800b0f8:	0800b195 	.word	0x0800b195
 800b0fc:	0800b195 	.word	0x0800b195
 800b100:	0800b195 	.word	0x0800b195
 800b104:	0800b195 	.word	0x0800b195
 800b108:	0800b195 	.word	0x0800b195
 800b10c:	0800b195 	.word	0x0800b195
 800b110:	0800b195 	.word	0x0800b195
 800b114:	0800b195 	.word	0x0800b195
 800b118:	0800b195 	.word	0x0800b195
 800b11c:	0800b195 	.word	0x0800b195
 800b120:	0800b195 	.word	0x0800b195
 800b124:	0800b195 	.word	0x0800b195
 800b128:	0800b195 	.word	0x0800b195
 800b12c:	0800b18d 	.word	0x0800b18d
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800b130:	f7fb fd86 	bl	8006c40 <HAL_RCC_GetPCLK1Freq>
 800b134:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800b136:	e033      	b.n	800b1a0 <UART_SetConfig+0xadc>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800b138:	f7fb fd98 	bl	8006c6c <HAL_RCC_GetPCLK2Freq>
 800b13c:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800b13e:	e02f      	b.n	800b1a0 <UART_SetConfig+0xadc>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b140:	f107 0314 	add.w	r3, r7, #20
 800b144:	4618      	mov	r0, r3
 800b146:	f7fc ff23 	bl	8007f90 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800b14a:	69bb      	ldr	r3, [r7, #24]
 800b14c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800b14e:	e027      	b.n	800b1a0 <UART_SetConfig+0xadc>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b150:	f107 0308 	add.w	r3, r7, #8
 800b154:	4618      	mov	r0, r3
 800b156:	f7fd f867 	bl	8008228 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800b15a:	68fb      	ldr	r3, [r7, #12]
 800b15c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800b15e:	e01f      	b.n	800b1a0 <UART_SetConfig+0xadc>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800b160:	4b2c      	ldr	r3, [pc, #176]	; (800b214 <UART_SetConfig+0xb50>)
 800b162:	681b      	ldr	r3, [r3, #0]
 800b164:	f003 0320 	and.w	r3, r3, #32
 800b168:	2b00      	cmp	r3, #0
 800b16a:	d009      	beq.n	800b180 <UART_SetConfig+0xabc>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800b16c:	4b29      	ldr	r3, [pc, #164]	; (800b214 <UART_SetConfig+0xb50>)
 800b16e:	681b      	ldr	r3, [r3, #0]
 800b170:	08db      	lsrs	r3, r3, #3
 800b172:	f003 0303 	and.w	r3, r3, #3
 800b176:	4a28      	ldr	r2, [pc, #160]	; (800b218 <UART_SetConfig+0xb54>)
 800b178:	fa22 f303 	lsr.w	r3, r2, r3
 800b17c:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800b17e:	e00f      	b.n	800b1a0 <UART_SetConfig+0xadc>
          pclk = (uint32_t) HSI_VALUE;
 800b180:	4b25      	ldr	r3, [pc, #148]	; (800b218 <UART_SetConfig+0xb54>)
 800b182:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800b184:	e00c      	b.n	800b1a0 <UART_SetConfig+0xadc>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800b186:	4b25      	ldr	r3, [pc, #148]	; (800b21c <UART_SetConfig+0xb58>)
 800b188:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800b18a:	e009      	b.n	800b1a0 <UART_SetConfig+0xadc>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800b18c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800b190:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800b192:	e005      	b.n	800b1a0 <UART_SetConfig+0xadc>
      default:
        pclk = 0U;
 800b194:	2300      	movs	r3, #0
 800b196:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 800b198:	2301      	movs	r3, #1
 800b19a:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 800b19e:	bf00      	nop
    }

    if (pclk != 0U)
 800b1a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b1a2:	2b00      	cmp	r3, #0
 800b1a4:	d021      	beq.n	800b1ea <UART_SetConfig+0xb26>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800b1a6:	687b      	ldr	r3, [r7, #4]
 800b1a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b1aa:	4a1d      	ldr	r2, [pc, #116]	; (800b220 <UART_SetConfig+0xb5c>)
 800b1ac:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b1b0:	461a      	mov	r2, r3
 800b1b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b1b4:	fbb3 f2f2 	udiv	r2, r3, r2
 800b1b8:	687b      	ldr	r3, [r7, #4]
 800b1ba:	685b      	ldr	r3, [r3, #4]
 800b1bc:	085b      	lsrs	r3, r3, #1
 800b1be:	441a      	add	r2, r3
 800b1c0:	687b      	ldr	r3, [r7, #4]
 800b1c2:	685b      	ldr	r3, [r3, #4]
 800b1c4:	fbb2 f3f3 	udiv	r3, r2, r3
 800b1c8:	b29b      	uxth	r3, r3
 800b1ca:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800b1cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b1ce:	2b0f      	cmp	r3, #15
 800b1d0:	d908      	bls.n	800b1e4 <UART_SetConfig+0xb20>
 800b1d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b1d4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b1d8:	d204      	bcs.n	800b1e4 <UART_SetConfig+0xb20>
      {
        huart->Instance->BRR = usartdiv;
 800b1da:	687b      	ldr	r3, [r7, #4]
 800b1dc:	681b      	ldr	r3, [r3, #0]
 800b1de:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b1e0:	60da      	str	r2, [r3, #12]
 800b1e2:	e002      	b.n	800b1ea <UART_SetConfig+0xb26>
      }
      else
      {
        ret = HAL_ERROR;
 800b1e4:	2301      	movs	r3, #1
 800b1e6:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800b1ea:	687b      	ldr	r3, [r7, #4]
 800b1ec:	2201      	movs	r2, #1
 800b1ee:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800b1f2:	687b      	ldr	r3, [r7, #4]
 800b1f4:	2201      	movs	r2, #1
 800b1f6:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800b1fa:	687b      	ldr	r3, [r7, #4]
 800b1fc:	2200      	movs	r2, #0
 800b1fe:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->TxISR = NULL;
 800b200:	687b      	ldr	r3, [r7, #4]
 800b202:	2200      	movs	r2, #0
 800b204:	671a      	str	r2, [r3, #112]	; 0x70

  return ret;
 800b206:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
}
 800b20a:	4618      	mov	r0, r3
 800b20c:	3738      	adds	r7, #56	; 0x38
 800b20e:	46bd      	mov	sp, r7
 800b210:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}
 800b214:	58024400 	.word	0x58024400
 800b218:	03d09000 	.word	0x03d09000
 800b21c:	003d0900 	.word	0x003d0900
 800b220:	0801267c 	.word	0x0801267c

0800b224 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800b224:	b480      	push	{r7}
 800b226:	b083      	sub	sp, #12
 800b228:	af00      	add	r7, sp, #0
 800b22a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800b22c:	687b      	ldr	r3, [r7, #4]
 800b22e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b230:	f003 0301 	and.w	r3, r3, #1
 800b234:	2b00      	cmp	r3, #0
 800b236:	d00a      	beq.n	800b24e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800b238:	687b      	ldr	r3, [r7, #4]
 800b23a:	681b      	ldr	r3, [r3, #0]
 800b23c:	685b      	ldr	r3, [r3, #4]
 800b23e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800b242:	687b      	ldr	r3, [r7, #4]
 800b244:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b246:	687b      	ldr	r3, [r7, #4]
 800b248:	681b      	ldr	r3, [r3, #0]
 800b24a:	430a      	orrs	r2, r1
 800b24c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800b24e:	687b      	ldr	r3, [r7, #4]
 800b250:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b252:	f003 0302 	and.w	r3, r3, #2
 800b256:	2b00      	cmp	r3, #0
 800b258:	d00a      	beq.n	800b270 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800b25a:	687b      	ldr	r3, [r7, #4]
 800b25c:	681b      	ldr	r3, [r3, #0]
 800b25e:	685b      	ldr	r3, [r3, #4]
 800b260:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800b264:	687b      	ldr	r3, [r7, #4]
 800b266:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800b268:	687b      	ldr	r3, [r7, #4]
 800b26a:	681b      	ldr	r3, [r3, #0]
 800b26c:	430a      	orrs	r2, r1
 800b26e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800b270:	687b      	ldr	r3, [r7, #4]
 800b272:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b274:	f003 0304 	and.w	r3, r3, #4
 800b278:	2b00      	cmp	r3, #0
 800b27a:	d00a      	beq.n	800b292 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800b27c:	687b      	ldr	r3, [r7, #4]
 800b27e:	681b      	ldr	r3, [r3, #0]
 800b280:	685b      	ldr	r3, [r3, #4]
 800b282:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800b286:	687b      	ldr	r3, [r7, #4]
 800b288:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800b28a:	687b      	ldr	r3, [r7, #4]
 800b28c:	681b      	ldr	r3, [r3, #0]
 800b28e:	430a      	orrs	r2, r1
 800b290:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800b292:	687b      	ldr	r3, [r7, #4]
 800b294:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b296:	f003 0308 	and.w	r3, r3, #8
 800b29a:	2b00      	cmp	r3, #0
 800b29c:	d00a      	beq.n	800b2b4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800b29e:	687b      	ldr	r3, [r7, #4]
 800b2a0:	681b      	ldr	r3, [r3, #0]
 800b2a2:	685b      	ldr	r3, [r3, #4]
 800b2a4:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800b2a8:	687b      	ldr	r3, [r7, #4]
 800b2aa:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b2ac:	687b      	ldr	r3, [r7, #4]
 800b2ae:	681b      	ldr	r3, [r3, #0]
 800b2b0:	430a      	orrs	r2, r1
 800b2b2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800b2b4:	687b      	ldr	r3, [r7, #4]
 800b2b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b2b8:	f003 0310 	and.w	r3, r3, #16
 800b2bc:	2b00      	cmp	r3, #0
 800b2be:	d00a      	beq.n	800b2d6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800b2c0:	687b      	ldr	r3, [r7, #4]
 800b2c2:	681b      	ldr	r3, [r3, #0]
 800b2c4:	689b      	ldr	r3, [r3, #8]
 800b2c6:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800b2ca:	687b      	ldr	r3, [r7, #4]
 800b2cc:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800b2ce:	687b      	ldr	r3, [r7, #4]
 800b2d0:	681b      	ldr	r3, [r3, #0]
 800b2d2:	430a      	orrs	r2, r1
 800b2d4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800b2d6:	687b      	ldr	r3, [r7, #4]
 800b2d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b2da:	f003 0320 	and.w	r3, r3, #32
 800b2de:	2b00      	cmp	r3, #0
 800b2e0:	d00a      	beq.n	800b2f8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800b2e2:	687b      	ldr	r3, [r7, #4]
 800b2e4:	681b      	ldr	r3, [r3, #0]
 800b2e6:	689b      	ldr	r3, [r3, #8]
 800b2e8:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800b2ec:	687b      	ldr	r3, [r7, #4]
 800b2ee:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800b2f0:	687b      	ldr	r3, [r7, #4]
 800b2f2:	681b      	ldr	r3, [r3, #0]
 800b2f4:	430a      	orrs	r2, r1
 800b2f6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800b2f8:	687b      	ldr	r3, [r7, #4]
 800b2fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b2fc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b300:	2b00      	cmp	r3, #0
 800b302:	d01a      	beq.n	800b33a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800b304:	687b      	ldr	r3, [r7, #4]
 800b306:	681b      	ldr	r3, [r3, #0]
 800b308:	685b      	ldr	r3, [r3, #4]
 800b30a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800b30e:	687b      	ldr	r3, [r7, #4]
 800b310:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800b312:	687b      	ldr	r3, [r7, #4]
 800b314:	681b      	ldr	r3, [r3, #0]
 800b316:	430a      	orrs	r2, r1
 800b318:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800b31a:	687b      	ldr	r3, [r7, #4]
 800b31c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b31e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800b322:	d10a      	bne.n	800b33a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800b324:	687b      	ldr	r3, [r7, #4]
 800b326:	681b      	ldr	r3, [r3, #0]
 800b328:	685b      	ldr	r3, [r3, #4]
 800b32a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800b32e:	687b      	ldr	r3, [r7, #4]
 800b330:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800b332:	687b      	ldr	r3, [r7, #4]
 800b334:	681b      	ldr	r3, [r3, #0]
 800b336:	430a      	orrs	r2, r1
 800b338:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800b33a:	687b      	ldr	r3, [r7, #4]
 800b33c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b33e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b342:	2b00      	cmp	r3, #0
 800b344:	d00a      	beq.n	800b35c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800b346:	687b      	ldr	r3, [r7, #4]
 800b348:	681b      	ldr	r3, [r3, #0]
 800b34a:	685b      	ldr	r3, [r3, #4]
 800b34c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800b350:	687b      	ldr	r3, [r7, #4]
 800b352:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800b354:	687b      	ldr	r3, [r7, #4]
 800b356:	681b      	ldr	r3, [r3, #0]
 800b358:	430a      	orrs	r2, r1
 800b35a:	605a      	str	r2, [r3, #4]
  }
}
 800b35c:	bf00      	nop
 800b35e:	370c      	adds	r7, #12
 800b360:	46bd      	mov	sp, r7
 800b362:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b366:	4770      	bx	lr

0800b368 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800b368:	b580      	push	{r7, lr}
 800b36a:	b086      	sub	sp, #24
 800b36c:	af02      	add	r7, sp, #8
 800b36e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b370:	687b      	ldr	r3, [r7, #4]
 800b372:	2200      	movs	r2, #0
 800b374:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 800b378:	f7f6 fb22 	bl	80019c0 <HAL_GetTick>
 800b37c:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800b37e:	687b      	ldr	r3, [r7, #4]
 800b380:	681b      	ldr	r3, [r3, #0]
 800b382:	681b      	ldr	r3, [r3, #0]
 800b384:	f003 0308 	and.w	r3, r3, #8
 800b388:	2b08      	cmp	r3, #8
 800b38a:	d10e      	bne.n	800b3aa <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800b38c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800b390:	9300      	str	r3, [sp, #0]
 800b392:	68fb      	ldr	r3, [r7, #12]
 800b394:	2200      	movs	r2, #0
 800b396:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800b39a:	6878      	ldr	r0, [r7, #4]
 800b39c:	f000 f82c 	bl	800b3f8 <UART_WaitOnFlagUntilTimeout>
 800b3a0:	4603      	mov	r3, r0
 800b3a2:	2b00      	cmp	r3, #0
 800b3a4:	d001      	beq.n	800b3aa <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800b3a6:	2303      	movs	r3, #3
 800b3a8:	e022      	b.n	800b3f0 <UART_CheckIdleState+0x88>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800b3aa:	687b      	ldr	r3, [r7, #4]
 800b3ac:	681b      	ldr	r3, [r3, #0]
 800b3ae:	681b      	ldr	r3, [r3, #0]
 800b3b0:	f003 0304 	and.w	r3, r3, #4
 800b3b4:	2b04      	cmp	r3, #4
 800b3b6:	d10e      	bne.n	800b3d6 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800b3b8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800b3bc:	9300      	str	r3, [sp, #0]
 800b3be:	68fb      	ldr	r3, [r7, #12]
 800b3c0:	2200      	movs	r2, #0
 800b3c2:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800b3c6:	6878      	ldr	r0, [r7, #4]
 800b3c8:	f000 f816 	bl	800b3f8 <UART_WaitOnFlagUntilTimeout>
 800b3cc:	4603      	mov	r3, r0
 800b3ce:	2b00      	cmp	r3, #0
 800b3d0:	d001      	beq.n	800b3d6 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800b3d2:	2303      	movs	r3, #3
 800b3d4:	e00c      	b.n	800b3f0 <UART_CheckIdleState+0x88>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800b3d6:	687b      	ldr	r3, [r7, #4]
 800b3d8:	2220      	movs	r2, #32
 800b3da:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_READY;
 800b3de:	687b      	ldr	r3, [r7, #4]
 800b3e0:	2220      	movs	r2, #32
 800b3e2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UNLOCK(huart);
 800b3e6:	687b      	ldr	r3, [r7, #4]
 800b3e8:	2200      	movs	r2, #0
 800b3ea:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 800b3ee:	2300      	movs	r3, #0
}
 800b3f0:	4618      	mov	r0, r3
 800b3f2:	3710      	adds	r7, #16
 800b3f4:	46bd      	mov	sp, r7
 800b3f6:	bd80      	pop	{r7, pc}

0800b3f8 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800b3f8:	b580      	push	{r7, lr}
 800b3fa:	b084      	sub	sp, #16
 800b3fc:	af00      	add	r7, sp, #0
 800b3fe:	60f8      	str	r0, [r7, #12]
 800b400:	60b9      	str	r1, [r7, #8]
 800b402:	603b      	str	r3, [r7, #0]
 800b404:	4613      	mov	r3, r2
 800b406:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800b408:	e062      	b.n	800b4d0 <UART_WaitOnFlagUntilTimeout+0xd8>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800b40a:	69bb      	ldr	r3, [r7, #24]
 800b40c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b410:	d05e      	beq.n	800b4d0 <UART_WaitOnFlagUntilTimeout+0xd8>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800b412:	f7f6 fad5 	bl	80019c0 <HAL_GetTick>
 800b416:	4602      	mov	r2, r0
 800b418:	683b      	ldr	r3, [r7, #0]
 800b41a:	1ad3      	subs	r3, r2, r3
 800b41c:	69ba      	ldr	r2, [r7, #24]
 800b41e:	429a      	cmp	r2, r3
 800b420:	d302      	bcc.n	800b428 <UART_WaitOnFlagUntilTimeout+0x30>
 800b422:	69bb      	ldr	r3, [r7, #24]
 800b424:	2b00      	cmp	r3, #0
 800b426:	d11d      	bne.n	800b464 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 800b428:	68fb      	ldr	r3, [r7, #12]
 800b42a:	681b      	ldr	r3, [r3, #0]
 800b42c:	681a      	ldr	r2, [r3, #0]
 800b42e:	68fb      	ldr	r3, [r7, #12]
 800b430:	681b      	ldr	r3, [r3, #0]
 800b432:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800b436:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b438:	68fb      	ldr	r3, [r7, #12]
 800b43a:	681b      	ldr	r3, [r3, #0]
 800b43c:	689a      	ldr	r2, [r3, #8]
 800b43e:	68fb      	ldr	r3, [r7, #12]
 800b440:	681b      	ldr	r3, [r3, #0]
 800b442:	f022 0201 	bic.w	r2, r2, #1
 800b446:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 800b448:	68fb      	ldr	r3, [r7, #12]
 800b44a:	2220      	movs	r2, #32
 800b44c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->RxState = HAL_UART_STATE_READY;
 800b450:	68fb      	ldr	r3, [r7, #12]
 800b452:	2220      	movs	r2, #32
 800b454:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        __HAL_UNLOCK(huart);
 800b458:	68fb      	ldr	r3, [r7, #12]
 800b45a:	2200      	movs	r2, #0
 800b45c:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 800b460:	2303      	movs	r3, #3
 800b462:	e045      	b.n	800b4f0 <UART_WaitOnFlagUntilTimeout+0xf8>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800b464:	68fb      	ldr	r3, [r7, #12]
 800b466:	681b      	ldr	r3, [r3, #0]
 800b468:	681b      	ldr	r3, [r3, #0]
 800b46a:	f003 0304 	and.w	r3, r3, #4
 800b46e:	2b00      	cmp	r3, #0
 800b470:	d02e      	beq.n	800b4d0 <UART_WaitOnFlagUntilTimeout+0xd8>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800b472:	68fb      	ldr	r3, [r7, #12]
 800b474:	681b      	ldr	r3, [r3, #0]
 800b476:	69db      	ldr	r3, [r3, #28]
 800b478:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800b47c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800b480:	d126      	bne.n	800b4d0 <UART_WaitOnFlagUntilTimeout+0xd8>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800b482:	68fb      	ldr	r3, [r7, #12]
 800b484:	681b      	ldr	r3, [r3, #0]
 800b486:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800b48a:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 800b48c:	68fb      	ldr	r3, [r7, #12]
 800b48e:	681b      	ldr	r3, [r3, #0]
 800b490:	681a      	ldr	r2, [r3, #0]
 800b492:	68fb      	ldr	r3, [r7, #12]
 800b494:	681b      	ldr	r3, [r3, #0]
 800b496:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800b49a:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b49c:	68fb      	ldr	r3, [r7, #12]
 800b49e:	681b      	ldr	r3, [r3, #0]
 800b4a0:	689a      	ldr	r2, [r3, #8]
 800b4a2:	68fb      	ldr	r3, [r7, #12]
 800b4a4:	681b      	ldr	r3, [r3, #0]
 800b4a6:	f022 0201 	bic.w	r2, r2, #1
 800b4aa:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 800b4ac:	68fb      	ldr	r3, [r7, #12]
 800b4ae:	2220      	movs	r2, #32
 800b4b0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->RxState = HAL_UART_STATE_READY;
 800b4b4:	68fb      	ldr	r3, [r7, #12]
 800b4b6:	2220      	movs	r2, #32
 800b4b8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800b4bc:	68fb      	ldr	r3, [r7, #12]
 800b4be:	2220      	movs	r2, #32
 800b4c0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800b4c4:	68fb      	ldr	r3, [r7, #12]
 800b4c6:	2200      	movs	r2, #0
 800b4c8:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

          return HAL_TIMEOUT;
 800b4cc:	2303      	movs	r3, #3
 800b4ce:	e00f      	b.n	800b4f0 <UART_WaitOnFlagUntilTimeout+0xf8>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800b4d0:	68fb      	ldr	r3, [r7, #12]
 800b4d2:	681b      	ldr	r3, [r3, #0]
 800b4d4:	69da      	ldr	r2, [r3, #28]
 800b4d6:	68bb      	ldr	r3, [r7, #8]
 800b4d8:	4013      	ands	r3, r2
 800b4da:	68ba      	ldr	r2, [r7, #8]
 800b4dc:	429a      	cmp	r2, r3
 800b4de:	bf0c      	ite	eq
 800b4e0:	2301      	moveq	r3, #1
 800b4e2:	2300      	movne	r3, #0
 800b4e4:	b2db      	uxtb	r3, r3
 800b4e6:	461a      	mov	r2, r3
 800b4e8:	79fb      	ldrb	r3, [r7, #7]
 800b4ea:	429a      	cmp	r2, r3
 800b4ec:	d08d      	beq.n	800b40a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800b4ee:	2300      	movs	r3, #0
}
 800b4f0:	4618      	mov	r0, r3
 800b4f2:	3710      	adds	r7, #16
 800b4f4:	46bd      	mov	sp, r7
 800b4f6:	bd80      	pop	{r7, pc}

0800b4f8 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800b4f8:	b480      	push	{r7}
 800b4fa:	b083      	sub	sp, #12
 800b4fc:	af00      	add	r7, sp, #0
 800b4fe:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 800b500:	687b      	ldr	r3, [r7, #4]
 800b502:	681b      	ldr	r3, [r3, #0]
 800b504:	681a      	ldr	r2, [r3, #0]
 800b506:	687b      	ldr	r3, [r7, #4]
 800b508:	681b      	ldr	r3, [r3, #0]
 800b50a:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 800b50e:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 800b510:	687b      	ldr	r3, [r7, #4]
 800b512:	681b      	ldr	r3, [r3, #0]
 800b514:	689a      	ldr	r2, [r3, #8]
 800b516:	687b      	ldr	r3, [r7, #4]
 800b518:	681b      	ldr	r3, [r3, #0]
 800b51a:	f422 0200 	bic.w	r2, r2, #8388608	; 0x800000
 800b51e:	609a      	str	r2, [r3, #8]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800b520:	687b      	ldr	r3, [r7, #4]
 800b522:	2220      	movs	r2, #32
 800b524:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
}
 800b528:	bf00      	nop
 800b52a:	370c      	adds	r7, #12
 800b52c:	46bd      	mov	sp, r7
 800b52e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b532:	4770      	bx	lr

0800b534 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800b534:	b480      	push	{r7}
 800b536:	b083      	sub	sp, #12
 800b538:	af00      	add	r7, sp, #0
 800b53a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800b53c:	687b      	ldr	r3, [r7, #4]
 800b53e:	681b      	ldr	r3, [r3, #0]
 800b540:	681a      	ldr	r2, [r3, #0]
 800b542:	687b      	ldr	r3, [r7, #4]
 800b544:	681b      	ldr	r3, [r3, #0]
 800b546:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800b54a:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800b54c:	687b      	ldr	r3, [r7, #4]
 800b54e:	681b      	ldr	r3, [r3, #0]
 800b550:	6899      	ldr	r1, [r3, #8]
 800b552:	687b      	ldr	r3, [r7, #4]
 800b554:	681a      	ldr	r2, [r3, #0]
 800b556:	4b08      	ldr	r3, [pc, #32]	; (800b578 <UART_EndRxTransfer+0x44>)
 800b558:	400b      	ands	r3, r1
 800b55a:	6093      	str	r3, [r2, #8]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800b55c:	687b      	ldr	r3, [r7, #4]
 800b55e:	2220      	movs	r2, #32
 800b560:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800b564:	687b      	ldr	r3, [r7, #4]
 800b566:	2200      	movs	r2, #0
 800b568:	66da      	str	r2, [r3, #108]	; 0x6c
}
 800b56a:	bf00      	nop
 800b56c:	370c      	adds	r7, #12
 800b56e:	46bd      	mov	sp, r7
 800b570:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b574:	4770      	bx	lr
 800b576:	bf00      	nop
 800b578:	effffffe 	.word	0xeffffffe

0800b57c <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800b57c:	b580      	push	{r7, lr}
 800b57e:	b084      	sub	sp, #16
 800b580:	af00      	add	r7, sp, #0
 800b582:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800b584:	687b      	ldr	r3, [r7, #4]
 800b586:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b588:	60fb      	str	r3, [r7, #12]

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 800b58a:	687b      	ldr	r3, [r7, #4]
 800b58c:	69db      	ldr	r3, [r3, #28]
 800b58e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b592:	d01f      	beq.n	800b5d4 <UART_DMAReceiveCplt+0x58>
  {
    huart->RxXferCount = 0U;
 800b594:	68fb      	ldr	r3, [r7, #12]
 800b596:	2200      	movs	r2, #0
 800b598:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800b59c:	68fb      	ldr	r3, [r7, #12]
 800b59e:	681b      	ldr	r3, [r3, #0]
 800b5a0:	681a      	ldr	r2, [r3, #0]
 800b5a2:	68fb      	ldr	r3, [r7, #12]
 800b5a4:	681b      	ldr	r3, [r3, #0]
 800b5a6:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800b5aa:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b5ac:	68fb      	ldr	r3, [r7, #12]
 800b5ae:	681b      	ldr	r3, [r3, #0]
 800b5b0:	689a      	ldr	r2, [r3, #8]
 800b5b2:	68fb      	ldr	r3, [r7, #12]
 800b5b4:	681b      	ldr	r3, [r3, #0]
 800b5b6:	f022 0201 	bic.w	r2, r2, #1
 800b5ba:	609a      	str	r2, [r3, #8]

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800b5bc:	68fb      	ldr	r3, [r7, #12]
 800b5be:	681b      	ldr	r3, [r3, #0]
 800b5c0:	689a      	ldr	r2, [r3, #8]
 800b5c2:	68fb      	ldr	r3, [r7, #12]
 800b5c4:	681b      	ldr	r3, [r3, #0]
 800b5c6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800b5ca:	609a      	str	r2, [r3, #8]

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800b5cc:	68fb      	ldr	r3, [r7, #12]
 800b5ce:	2220      	movs	r2, #32
 800b5d0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx complete callback*/
  huart->RxCpltCallback(huart);
#else
  /*Call legacy weak Rx complete callback*/
  HAL_UART_RxCpltCallback(huart);
 800b5d4:	68f8      	ldr	r0, [r7, #12]
 800b5d6:	f7f5 fdab 	bl	8001130 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800b5da:	bf00      	nop
 800b5dc:	3710      	adds	r7, #16
 800b5de:	46bd      	mov	sp, r7
 800b5e0:	bd80      	pop	{r7, pc}

0800b5e2 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800b5e2:	b580      	push	{r7, lr}
 800b5e4:	b084      	sub	sp, #16
 800b5e6:	af00      	add	r7, sp, #0
 800b5e8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800b5ea:	687b      	ldr	r3, [r7, #4]
 800b5ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b5ee:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx Half complete callback*/
  huart->RxHalfCpltCallback(huart);
#else
  /*Call legacy weak Rx Half complete callback*/
  HAL_UART_RxHalfCpltCallback(huart);
 800b5f0:	68f8      	ldr	r0, [r7, #12]
 800b5f2:	f7ff f853 	bl	800a69c <HAL_UART_RxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800b5f6:	bf00      	nop
 800b5f8:	3710      	adds	r7, #16
 800b5fa:	46bd      	mov	sp, r7
 800b5fc:	bd80      	pop	{r7, pc}

0800b5fe <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800b5fe:	b580      	push	{r7, lr}
 800b600:	b086      	sub	sp, #24
 800b602:	af00      	add	r7, sp, #0
 800b604:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800b606:	687b      	ldr	r3, [r7, #4]
 800b608:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b60a:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800b60c:	697b      	ldr	r3, [r7, #20]
 800b60e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800b612:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800b614:	697b      	ldr	r3, [r7, #20]
 800b616:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800b61a:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800b61c:	697b      	ldr	r3, [r7, #20]
 800b61e:	681b      	ldr	r3, [r3, #0]
 800b620:	689b      	ldr	r3, [r3, #8]
 800b622:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b626:	2b80      	cmp	r3, #128	; 0x80
 800b628:	d109      	bne.n	800b63e <UART_DMAError+0x40>
 800b62a:	693b      	ldr	r3, [r7, #16]
 800b62c:	2b21      	cmp	r3, #33	; 0x21
 800b62e:	d106      	bne.n	800b63e <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 800b630:	697b      	ldr	r3, [r7, #20]
 800b632:	2200      	movs	r2, #0
 800b634:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    UART_EndTxTransfer(huart);
 800b638:	6978      	ldr	r0, [r7, #20]
 800b63a:	f7ff ff5d 	bl	800b4f8 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800b63e:	697b      	ldr	r3, [r7, #20]
 800b640:	681b      	ldr	r3, [r3, #0]
 800b642:	689b      	ldr	r3, [r3, #8]
 800b644:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b648:	2b40      	cmp	r3, #64	; 0x40
 800b64a:	d109      	bne.n	800b660 <UART_DMAError+0x62>
 800b64c:	68fb      	ldr	r3, [r7, #12]
 800b64e:	2b22      	cmp	r3, #34	; 0x22
 800b650:	d106      	bne.n	800b660 <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 800b652:	697b      	ldr	r3, [r7, #20]
 800b654:	2200      	movs	r2, #0
 800b656:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    UART_EndRxTransfer(huart);
 800b65a:	6978      	ldr	r0, [r7, #20]
 800b65c:	f7ff ff6a 	bl	800b534 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800b660:	697b      	ldr	r3, [r7, #20]
 800b662:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b666:	f043 0210 	orr.w	r2, r3, #16
 800b66a:	697b      	ldr	r3, [r7, #20]
 800b66c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800b670:	6978      	ldr	r0, [r7, #20]
 800b672:	f7ff f81d 	bl	800a6b0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800b676:	bf00      	nop
 800b678:	3718      	adds	r7, #24
 800b67a:	46bd      	mov	sp, r7
 800b67c:	bd80      	pop	{r7, pc}

0800b67e <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800b67e:	b480      	push	{r7}
 800b680:	b085      	sub	sp, #20
 800b682:	af00      	add	r7, sp, #0
 800b684:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800b686:	687b      	ldr	r3, [r7, #4]
 800b688:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 800b68c:	2b01      	cmp	r3, #1
 800b68e:	d101      	bne.n	800b694 <HAL_UARTEx_DisableFifoMode+0x16>
 800b690:	2302      	movs	r3, #2
 800b692:	e027      	b.n	800b6e4 <HAL_UARTEx_DisableFifoMode+0x66>
 800b694:	687b      	ldr	r3, [r7, #4]
 800b696:	2201      	movs	r2, #1
 800b698:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 800b69c:	687b      	ldr	r3, [r7, #4]
 800b69e:	2224      	movs	r2, #36	; 0x24
 800b6a0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800b6a4:	687b      	ldr	r3, [r7, #4]
 800b6a6:	681b      	ldr	r3, [r3, #0]
 800b6a8:	681b      	ldr	r3, [r3, #0]
 800b6aa:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800b6ac:	687b      	ldr	r3, [r7, #4]
 800b6ae:	681b      	ldr	r3, [r3, #0]
 800b6b0:	681a      	ldr	r2, [r3, #0]
 800b6b2:	687b      	ldr	r3, [r7, #4]
 800b6b4:	681b      	ldr	r3, [r3, #0]
 800b6b6:	f022 0201 	bic.w	r2, r2, #1
 800b6ba:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800b6bc:	68fb      	ldr	r3, [r7, #12]
 800b6be:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800b6c2:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800b6c4:	687b      	ldr	r3, [r7, #4]
 800b6c6:	2200      	movs	r2, #0
 800b6c8:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800b6ca:	687b      	ldr	r3, [r7, #4]
 800b6cc:	681b      	ldr	r3, [r3, #0]
 800b6ce:	68fa      	ldr	r2, [r7, #12]
 800b6d0:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800b6d2:	687b      	ldr	r3, [r7, #4]
 800b6d4:	2220      	movs	r2, #32
 800b6d6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800b6da:	687b      	ldr	r3, [r7, #4]
 800b6dc:	2200      	movs	r2, #0
 800b6de:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 800b6e2:	2300      	movs	r3, #0
}
 800b6e4:	4618      	mov	r0, r3
 800b6e6:	3714      	adds	r7, #20
 800b6e8:	46bd      	mov	sp, r7
 800b6ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6ee:	4770      	bx	lr

0800b6f0 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800b6f0:	b580      	push	{r7, lr}
 800b6f2:	b084      	sub	sp, #16
 800b6f4:	af00      	add	r7, sp, #0
 800b6f6:	6078      	str	r0, [r7, #4]
 800b6f8:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800b6fa:	687b      	ldr	r3, [r7, #4]
 800b6fc:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 800b700:	2b01      	cmp	r3, #1
 800b702:	d101      	bne.n	800b708 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800b704:	2302      	movs	r3, #2
 800b706:	e02d      	b.n	800b764 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800b708:	687b      	ldr	r3, [r7, #4]
 800b70a:	2201      	movs	r2, #1
 800b70c:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 800b710:	687b      	ldr	r3, [r7, #4]
 800b712:	2224      	movs	r2, #36	; 0x24
 800b714:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800b718:	687b      	ldr	r3, [r7, #4]
 800b71a:	681b      	ldr	r3, [r3, #0]
 800b71c:	681b      	ldr	r3, [r3, #0]
 800b71e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800b720:	687b      	ldr	r3, [r7, #4]
 800b722:	681b      	ldr	r3, [r3, #0]
 800b724:	681a      	ldr	r2, [r3, #0]
 800b726:	687b      	ldr	r3, [r7, #4]
 800b728:	681b      	ldr	r3, [r3, #0]
 800b72a:	f022 0201 	bic.w	r2, r2, #1
 800b72e:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800b730:	687b      	ldr	r3, [r7, #4]
 800b732:	681b      	ldr	r3, [r3, #0]
 800b734:	689b      	ldr	r3, [r3, #8]
 800b736:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800b73a:	687b      	ldr	r3, [r7, #4]
 800b73c:	681b      	ldr	r3, [r3, #0]
 800b73e:	683a      	ldr	r2, [r7, #0]
 800b740:	430a      	orrs	r2, r1
 800b742:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800b744:	6878      	ldr	r0, [r7, #4]
 800b746:	f000 f84f 	bl	800b7e8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800b74a:	687b      	ldr	r3, [r7, #4]
 800b74c:	681b      	ldr	r3, [r3, #0]
 800b74e:	68fa      	ldr	r2, [r7, #12]
 800b750:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800b752:	687b      	ldr	r3, [r7, #4]
 800b754:	2220      	movs	r2, #32
 800b756:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800b75a:	687b      	ldr	r3, [r7, #4]
 800b75c:	2200      	movs	r2, #0
 800b75e:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 800b762:	2300      	movs	r3, #0
}
 800b764:	4618      	mov	r0, r3
 800b766:	3710      	adds	r7, #16
 800b768:	46bd      	mov	sp, r7
 800b76a:	bd80      	pop	{r7, pc}

0800b76c <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800b76c:	b580      	push	{r7, lr}
 800b76e:	b084      	sub	sp, #16
 800b770:	af00      	add	r7, sp, #0
 800b772:	6078      	str	r0, [r7, #4]
 800b774:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800b776:	687b      	ldr	r3, [r7, #4]
 800b778:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 800b77c:	2b01      	cmp	r3, #1
 800b77e:	d101      	bne.n	800b784 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800b780:	2302      	movs	r3, #2
 800b782:	e02d      	b.n	800b7e0 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800b784:	687b      	ldr	r3, [r7, #4]
 800b786:	2201      	movs	r2, #1
 800b788:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 800b78c:	687b      	ldr	r3, [r7, #4]
 800b78e:	2224      	movs	r2, #36	; 0x24
 800b790:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800b794:	687b      	ldr	r3, [r7, #4]
 800b796:	681b      	ldr	r3, [r3, #0]
 800b798:	681b      	ldr	r3, [r3, #0]
 800b79a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800b79c:	687b      	ldr	r3, [r7, #4]
 800b79e:	681b      	ldr	r3, [r3, #0]
 800b7a0:	681a      	ldr	r2, [r3, #0]
 800b7a2:	687b      	ldr	r3, [r7, #4]
 800b7a4:	681b      	ldr	r3, [r3, #0]
 800b7a6:	f022 0201 	bic.w	r2, r2, #1
 800b7aa:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800b7ac:	687b      	ldr	r3, [r7, #4]
 800b7ae:	681b      	ldr	r3, [r3, #0]
 800b7b0:	689b      	ldr	r3, [r3, #8]
 800b7b2:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800b7b6:	687b      	ldr	r3, [r7, #4]
 800b7b8:	681b      	ldr	r3, [r3, #0]
 800b7ba:	683a      	ldr	r2, [r7, #0]
 800b7bc:	430a      	orrs	r2, r1
 800b7be:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800b7c0:	6878      	ldr	r0, [r7, #4]
 800b7c2:	f000 f811 	bl	800b7e8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800b7c6:	687b      	ldr	r3, [r7, #4]
 800b7c8:	681b      	ldr	r3, [r3, #0]
 800b7ca:	68fa      	ldr	r2, [r7, #12]
 800b7cc:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800b7ce:	687b      	ldr	r3, [r7, #4]
 800b7d0:	2220      	movs	r2, #32
 800b7d2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800b7d6:	687b      	ldr	r3, [r7, #4]
 800b7d8:	2200      	movs	r2, #0
 800b7da:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 800b7de:	2300      	movs	r3, #0
}
 800b7e0:	4618      	mov	r0, r3
 800b7e2:	3710      	adds	r7, #16
 800b7e4:	46bd      	mov	sp, r7
 800b7e6:	bd80      	pop	{r7, pc}

0800b7e8 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800b7e8:	b480      	push	{r7}
 800b7ea:	b089      	sub	sp, #36	; 0x24
 800b7ec:	af00      	add	r7, sp, #0
 800b7ee:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_depth;
  uint8_t tx_fifo_depth;
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
 800b7f0:	4a2f      	ldr	r2, [pc, #188]	; (800b8b0 <UARTEx_SetNbDataToProcess+0xc8>)
 800b7f2:	f107 0314 	add.w	r3, r7, #20
 800b7f6:	e892 0003 	ldmia.w	r2, {r0, r1}
 800b7fa:	e883 0003 	stmia.w	r3, {r0, r1}
  uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};
 800b7fe:	4a2d      	ldr	r2, [pc, #180]	; (800b8b4 <UARTEx_SetNbDataToProcess+0xcc>)
 800b800:	f107 030c 	add.w	r3, r7, #12
 800b804:	e892 0003 	ldmia.w	r2, {r0, r1}
 800b808:	e883 0003 	stmia.w	r3, {r0, r1}

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800b80c:	687b      	ldr	r3, [r7, #4]
 800b80e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800b810:	2b00      	cmp	r3, #0
 800b812:	d108      	bne.n	800b826 <UARTEx_SetNbDataToProcess+0x3e>
  {
    huart->NbTxDataToProcess = 1U;
 800b814:	687b      	ldr	r3, [r7, #4]
 800b816:	2201      	movs	r2, #1
 800b818:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800b81c:	687b      	ldr	r3, [r7, #4]
 800b81e:	2201      	movs	r2, #1
 800b820:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800b824:	e03d      	b.n	800b8a2 <UARTEx_SetNbDataToProcess+0xba>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800b826:	2310      	movs	r3, #16
 800b828:	77fb      	strb	r3, [r7, #31]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800b82a:	2310      	movs	r3, #16
 800b82c:	77bb      	strb	r3, [r7, #30]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800b82e:	687b      	ldr	r3, [r7, #4]
 800b830:	681b      	ldr	r3, [r3, #0]
 800b832:	689b      	ldr	r3, [r3, #8]
 800b834:	0e5b      	lsrs	r3, r3, #25
 800b836:	b2db      	uxtb	r3, r3
 800b838:	f003 0307 	and.w	r3, r3, #7
 800b83c:	777b      	strb	r3, [r7, #29]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800b83e:	687b      	ldr	r3, [r7, #4]
 800b840:	681b      	ldr	r3, [r3, #0]
 800b842:	689b      	ldr	r3, [r3, #8]
 800b844:	0f5b      	lsrs	r3, r3, #29
 800b846:	b2db      	uxtb	r3, r3
 800b848:	f003 0307 	and.w	r3, r3, #7
 800b84c:	773b      	strb	r3, [r7, #28]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
 800b84e:	7fbb      	ldrb	r3, [r7, #30]
 800b850:	7f3a      	ldrb	r2, [r7, #28]
 800b852:	f107 0120 	add.w	r1, r7, #32
 800b856:	440a      	add	r2, r1
 800b858:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 800b85c:	fb02 f303 	mul.w	r3, r2, r3
 800b860:	7f3a      	ldrb	r2, [r7, #28]
 800b862:	f107 0120 	add.w	r1, r7, #32
 800b866:	440a      	add	r2, r1
 800b868:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 800b86c:	fb93 f3f2 	sdiv	r3, r3, r2
 800b870:	b29a      	uxth	r2, r3
 800b872:	687b      	ldr	r3, [r7, #4]
 800b874:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
 800b878:	7ffb      	ldrb	r3, [r7, #31]
 800b87a:	7f7a      	ldrb	r2, [r7, #29]
 800b87c:	f107 0120 	add.w	r1, r7, #32
 800b880:	440a      	add	r2, r1
 800b882:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 800b886:	fb02 f303 	mul.w	r3, r2, r3
 800b88a:	7f7a      	ldrb	r2, [r7, #29]
 800b88c:	f107 0120 	add.w	r1, r7, #32
 800b890:	440a      	add	r2, r1
 800b892:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 800b896:	fb93 f3f2 	sdiv	r3, r3, r2
 800b89a:	b29a      	uxth	r2, r3
 800b89c:	687b      	ldr	r3, [r7, #4]
 800b89e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800b8a2:	bf00      	nop
 800b8a4:	3724      	adds	r7, #36	; 0x24
 800b8a6:	46bd      	mov	sp, r7
 800b8a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8ac:	4770      	bx	lr
 800b8ae:	bf00      	nop
 800b8b0:	08012610 	.word	0x08012610
 800b8b4:	08012618 	.word	0x08012618

0800b8b8 <SDMMC_Init>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_Init(SDMMC_TypeDef *SDMMCx, SDMMC_InitTypeDef Init)
{
 800b8b8:	b084      	sub	sp, #16
 800b8ba:	b480      	push	{r7}
 800b8bc:	b085      	sub	sp, #20
 800b8be:	af00      	add	r7, sp, #0
 800b8c0:	6078      	str	r0, [r7, #4]
 800b8c2:	f107 001c 	add.w	r0, r7, #28
 800b8c6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 800b8ca:	2300      	movs	r3, #0
 800b8cc:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(Init.ClockDiv));

  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 800b8ce:	69fa      	ldr	r2, [r7, #28]
             Init.ClockPowerSave      |\
 800b8d0:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 800b8d2:	431a      	orrs	r2, r3
             Init.BusWide             |\
 800b8d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockPowerSave      |\
 800b8d6:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 800b8d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.BusWide             |\
 800b8da:	431a      	orrs	r2, r3
             Init.ClockDiv
 800b8dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.HardwareFlowControl |\
 800b8de:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 800b8e0:	68fa      	ldr	r2, [r7, #12]
 800b8e2:	4313      	orrs	r3, r2
 800b8e4:	60fb      	str	r3, [r7, #12]
             );

  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);
 800b8e6:	687b      	ldr	r3, [r7, #4]
 800b8e8:	685a      	ldr	r2, [r3, #4]
 800b8ea:	4b07      	ldr	r3, [pc, #28]	; (800b908 <SDMMC_Init+0x50>)
 800b8ec:	4013      	ands	r3, r2
 800b8ee:	68fa      	ldr	r2, [r7, #12]
 800b8f0:	431a      	orrs	r2, r3
 800b8f2:	687b      	ldr	r3, [r7, #4]
 800b8f4:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 800b8f6:	2300      	movs	r3, #0
}
 800b8f8:	4618      	mov	r0, r3
 800b8fa:	3714      	adds	r7, #20
 800b8fc:	46bd      	mov	sp, r7
 800b8fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b902:	b004      	add	sp, #16
 800b904:	4770      	bx	lr
 800b906:	bf00      	nop
 800b908:	ffc02c00 	.word	0xffc02c00

0800b90c <SDMMC_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling)
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_ReadFIFO(SDMMC_TypeDef *SDMMCx)
{
 800b90c:	b480      	push	{r7}
 800b90e:	b083      	sub	sp, #12
 800b910:	af00      	add	r7, sp, #0
 800b912:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */
  return (SDMMCx->FIFO);
 800b914:	687b      	ldr	r3, [r7, #4]
 800b916:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 800b91a:	4618      	mov	r0, r3
 800b91c:	370c      	adds	r7, #12
 800b91e:	46bd      	mov	sp, r7
 800b920:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b924:	4770      	bx	lr

0800b926 <SDMMC_WriteFIFO>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_WriteFIFO(SDMMC_TypeDef *SDMMCx, uint32_t *pWriteData)
{
 800b926:	b480      	push	{r7}
 800b928:	b083      	sub	sp, #12
 800b92a:	af00      	add	r7, sp, #0
 800b92c:	6078      	str	r0, [r7, #4]
 800b92e:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */
  SDMMCx->FIFO = *pWriteData;
 800b930:	683b      	ldr	r3, [r7, #0]
 800b932:	681a      	ldr	r2, [r3, #0]
 800b934:	687b      	ldr	r3, [r7, #4]
 800b936:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800b93a:	2300      	movs	r3, #0
}
 800b93c:	4618      	mov	r0, r3
 800b93e:	370c      	adds	r7, #12
 800b940:	46bd      	mov	sp, r7
 800b942:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b946:	4770      	bx	lr

0800b948 <SDMMC_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_PowerState_ON(SDMMC_TypeDef *SDMMCx)
{
 800b948:	b480      	push	{r7}
 800b94a:	b083      	sub	sp, #12
 800b94c:	af00      	add	r7, sp, #0
 800b94e:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */
  SDMMCx->POWER |= SDMMC_POWER_PWRCTRL;
 800b950:	687b      	ldr	r3, [r7, #4]
 800b952:	681b      	ldr	r3, [r3, #0]
 800b954:	f043 0203 	orr.w	r2, r3, #3
 800b958:	687b      	ldr	r3, [r7, #4]
 800b95a:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 800b95c:	2300      	movs	r3, #0
}
 800b95e:	4618      	mov	r0, r3
 800b960:	370c      	adds	r7, #12
 800b962:	46bd      	mov	sp, r7
 800b964:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b968:	4770      	bx	lr

0800b96a <SDMMC_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON
  */
uint32_t SDMMC_GetPowerState(SDMMC_TypeDef *SDMMCx)
{
 800b96a:	b480      	push	{r7}
 800b96c:	b083      	sub	sp, #12
 800b96e:	af00      	add	r7, sp, #0
 800b970:	6078      	str	r0, [r7, #4]
  return (SDMMCx->POWER & SDMMC_POWER_PWRCTRL);
 800b972:	687b      	ldr	r3, [r7, #4]
 800b974:	681b      	ldr	r3, [r3, #0]
 800b976:	f003 0303 	and.w	r3, r3, #3
}
 800b97a:	4618      	mov	r0, r3
 800b97c:	370c      	adds	r7, #12
 800b97e:	46bd      	mov	sp, r7
 800b980:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b984:	4770      	bx	lr
	...

0800b988 <SDMMC_SendCommand>:
  * @param  Command: pointer to a SDMMC_CmdInitTypeDef structure that contains
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_SendCommand(SDMMC_TypeDef *SDMMCx, SDMMC_CmdInitTypeDef *Command)
{
 800b988:	b480      	push	{r7}
 800b98a:	b085      	sub	sp, #20
 800b98c:	af00      	add	r7, sp, #0
 800b98e:	6078      	str	r0, [r7, #4]
 800b990:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800b992:	2300      	movs	r3, #0
 800b994:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_RESPONSE(Command->Response));
  assert_param(IS_SDMMC_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDMMC_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDMMCx->ARG = Command->Argument;
 800b996:	683b      	ldr	r3, [r7, #0]
 800b998:	681a      	ldr	r2, [r3, #0]
 800b99a:	687b      	ldr	r3, [r7, #4]
 800b99c:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800b99e:	683b      	ldr	r3, [r7, #0]
 800b9a0:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 800b9a2:	683b      	ldr	r3, [r7, #0]
 800b9a4:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800b9a6:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 800b9a8:	683b      	ldr	r3, [r7, #0]
 800b9aa:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 800b9ac:	431a      	orrs	r2, r3
                       Command->CPSM);
 800b9ae:	683b      	ldr	r3, [r7, #0]
 800b9b0:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 800b9b2:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800b9b4:	68fa      	ldr	r2, [r7, #12]
 800b9b6:	4313      	orrs	r3, r2
 800b9b8:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC CMD register */
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800b9ba:	687b      	ldr	r3, [r7, #4]
 800b9bc:	68da      	ldr	r2, [r3, #12]
 800b9be:	4b06      	ldr	r3, [pc, #24]	; (800b9d8 <SDMMC_SendCommand+0x50>)
 800b9c0:	4013      	ands	r3, r2
 800b9c2:	68fa      	ldr	r2, [r7, #12]
 800b9c4:	431a      	orrs	r2, r3
 800b9c6:	687b      	ldr	r3, [r7, #4]
 800b9c8:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800b9ca:	2300      	movs	r3, #0
}
 800b9cc:	4618      	mov	r0, r3
 800b9ce:	3714      	adds	r7, #20
 800b9d0:	46bd      	mov	sp, r7
 800b9d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9d6:	4770      	bx	lr
 800b9d8:	fffee0c0 	.word	0xfffee0c0

0800b9dc <SDMMC_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDMMC_GetCommandResponse(SDMMC_TypeDef *SDMMCx)
{
 800b9dc:	b480      	push	{r7}
 800b9de:	b083      	sub	sp, #12
 800b9e0:	af00      	add	r7, sp, #0
 800b9e2:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDMMCx->RESPCMD);
 800b9e4:	687b      	ldr	r3, [r7, #4]
 800b9e6:	691b      	ldr	r3, [r3, #16]
 800b9e8:	b2db      	uxtb	r3, r3
}
 800b9ea:	4618      	mov	r0, r3
 800b9ec:	370c      	adds	r7, #12
 800b9ee:	46bd      	mov	sp, r7
 800b9f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9f4:	4770      	bx	lr

0800b9f6 <SDMMC_GetResponse>:
  *            @arg SDMMC_RESP3: Response Register 3
  *            @arg SDMMC_RESP4: Response Register 4
  * @retval The Corresponding response register value
  */
uint32_t SDMMC_GetResponse(SDMMC_TypeDef *SDMMCx, uint32_t Response)
{
 800b9f6:	b480      	push	{r7}
 800b9f8:	b085      	sub	sp, #20
 800b9fa:	af00      	add	r7, sp, #0
 800b9fc:	6078      	str	r0, [r7, #4]
 800b9fe:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDMMC_RESP(Response));

  /* Get the response */
  tmp = (uint32_t)(&(SDMMCx->RESP1)) + Response;
 800ba00:	687b      	ldr	r3, [r7, #4]
 800ba02:	3314      	adds	r3, #20
 800ba04:	461a      	mov	r2, r3
 800ba06:	683b      	ldr	r3, [r7, #0]
 800ba08:	4413      	add	r3, r2
 800ba0a:	60fb      	str	r3, [r7, #12]

  return (*(__IO uint32_t *) tmp);
 800ba0c:	68fb      	ldr	r3, [r7, #12]
 800ba0e:	681b      	ldr	r3, [r3, #0]
}
 800ba10:	4618      	mov	r0, r3
 800ba12:	3714      	adds	r7, #20
 800ba14:	46bd      	mov	sp, r7
 800ba16:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba1a:	4770      	bx	lr

0800ba1c <SDMMC_ConfigData>:
  * @param  Data : pointer to a SDMMC_DataInitTypeDef structure
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_ConfigData(SDMMC_TypeDef *SDMMCx, SDMMC_DataInitTypeDef* Data)
{
 800ba1c:	b480      	push	{r7}
 800ba1e:	b085      	sub	sp, #20
 800ba20:	af00      	add	r7, sp, #0
 800ba22:	6078      	str	r0, [r7, #4]
 800ba24:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800ba26:	2300      	movs	r3, #0
 800ba28:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDMMC_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDMMC_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDMMCx->DTIMER = Data->DataTimeOut;
 800ba2a:	683b      	ldr	r3, [r7, #0]
 800ba2c:	681a      	ldr	r2, [r3, #0]
 800ba2e:	687b      	ldr	r3, [r7, #4]
 800ba30:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDMMCx->DLEN = Data->DataLength;
 800ba32:	683b      	ldr	r3, [r7, #0]
 800ba34:	685a      	ldr	r2, [r3, #4]
 800ba36:	687b      	ldr	r3, [r7, #4]
 800ba38:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800ba3a:	683b      	ldr	r3, [r7, #0]
 800ba3c:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 800ba3e:	683b      	ldr	r3, [r7, #0]
 800ba40:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800ba42:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 800ba44:	683b      	ldr	r3, [r7, #0]
 800ba46:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 800ba48:	431a      	orrs	r2, r3
                       Data->DPSM);
 800ba4a:	683b      	ldr	r3, [r7, #0]
 800ba4c:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 800ba4e:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800ba50:	68fa      	ldr	r2, [r7, #12]
 800ba52:	4313      	orrs	r3, r2
 800ba54:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 800ba56:	687b      	ldr	r3, [r7, #4]
 800ba58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ba5a:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800ba5e:	68fb      	ldr	r3, [r7, #12]
 800ba60:	431a      	orrs	r2, r3
 800ba62:	687b      	ldr	r3, [r7, #4]
 800ba64:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 800ba66:	2300      	movs	r3, #0

}
 800ba68:	4618      	mov	r0, r3
 800ba6a:	3714      	adds	r7, #20
 800ba6c:	46bd      	mov	sp, r7
 800ba6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba72:	4770      	bx	lr

0800ba74 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Lenght command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDMMC_TypeDef *SDMMCx, uint32_t BlockSize)
{
 800ba74:	b580      	push	{r7, lr}
 800ba76:	b088      	sub	sp, #32
 800ba78:	af00      	add	r7, sp, #0
 800ba7a:	6078      	str	r0, [r7, #4]
 800ba7c:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 800ba7e:	683b      	ldr	r3, [r7, #0]
 800ba80:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 800ba82:	2310      	movs	r3, #16
 800ba84:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800ba86:	f44f 7380 	mov.w	r3, #256	; 0x100
 800ba8a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800ba8c:	2300      	movs	r3, #0
 800ba8e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800ba90:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800ba94:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800ba96:	f107 0308 	add.w	r3, r7, #8
 800ba9a:	4619      	mov	r1, r3
 800ba9c:	6878      	ldr	r0, [r7, #4]
 800ba9e:	f7ff ff73 	bl	800b988 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SET_BLOCKLEN, SDMMC_CMDTIMEOUT);
 800baa2:	f241 3288 	movw	r2, #5000	; 0x1388
 800baa6:	2110      	movs	r1, #16
 800baa8:	6878      	ldr	r0, [r7, #4]
 800baaa:	f000 faaf 	bl	800c00c <SDMMC_GetCmdResp1>
 800baae:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800bab0:	69fb      	ldr	r3, [r7, #28]
}
 800bab2:	4618      	mov	r0, r3
 800bab4:	3720      	adds	r7, #32
 800bab6:	46bd      	mov	sp, r7
 800bab8:	bd80      	pop	{r7, pc}

0800baba <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 800baba:	b580      	push	{r7, lr}
 800babc:	b088      	sub	sp, #32
 800babe:	af00      	add	r7, sp, #0
 800bac0:	6078      	str	r0, [r7, #4]
 800bac2:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800bac4:	683b      	ldr	r3, [r7, #0]
 800bac6:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 800bac8:	2311      	movs	r3, #17
 800baca:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800bacc:	f44f 7380 	mov.w	r3, #256	; 0x100
 800bad0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800bad2:	2300      	movs	r3, #0
 800bad4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800bad6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800bada:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800badc:	f107 0308 	add.w	r3, r7, #8
 800bae0:	4619      	mov	r1, r3
 800bae2:	6878      	ldr	r0, [r7, #4]
 800bae4:	f7ff ff50 	bl	800b988 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 800bae8:	f241 3288 	movw	r2, #5000	; 0x1388
 800baec:	2111      	movs	r1, #17
 800baee:	6878      	ldr	r0, [r7, #4]
 800baf0:	f000 fa8c 	bl	800c00c <SDMMC_GetCmdResp1>
 800baf4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800baf6:	69fb      	ldr	r3, [r7, #28]
}
 800baf8:	4618      	mov	r0, r3
 800bafa:	3720      	adds	r7, #32
 800bafc:	46bd      	mov	sp, r7
 800bafe:	bd80      	pop	{r7, pc}

0800bb00 <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 800bb00:	b580      	push	{r7, lr}
 800bb02:	b088      	sub	sp, #32
 800bb04:	af00      	add	r7, sp, #0
 800bb06:	6078      	str	r0, [r7, #4]
 800bb08:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800bb0a:	683b      	ldr	r3, [r7, #0]
 800bb0c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 800bb0e:	2312      	movs	r3, #18
 800bb10:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800bb12:	f44f 7380 	mov.w	r3, #256	; 0x100
 800bb16:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800bb18:	2300      	movs	r3, #0
 800bb1a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800bb1c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800bb20:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800bb22:	f107 0308 	add.w	r3, r7, #8
 800bb26:	4619      	mov	r1, r3
 800bb28:	6878      	ldr	r0, [r7, #4]
 800bb2a:	f7ff ff2d 	bl	800b988 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 800bb2e:	f241 3288 	movw	r2, #5000	; 0x1388
 800bb32:	2112      	movs	r1, #18
 800bb34:	6878      	ldr	r0, [r7, #4]
 800bb36:	f000 fa69 	bl	800c00c <SDMMC_GetCmdResp1>
 800bb3a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800bb3c:	69fb      	ldr	r3, [r7, #28]
}
 800bb3e:	4618      	mov	r0, r3
 800bb40:	3720      	adds	r7, #32
 800bb42:	46bd      	mov	sp, r7
 800bb44:	bd80      	pop	{r7, pc}

0800bb46 <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 800bb46:	b580      	push	{r7, lr}
 800bb48:	b088      	sub	sp, #32
 800bb4a:	af00      	add	r7, sp, #0
 800bb4c:	6078      	str	r0, [r7, #4]
 800bb4e:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800bb50:	683b      	ldr	r3, [r7, #0]
 800bb52:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 800bb54:	2318      	movs	r3, #24
 800bb56:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800bb58:	f44f 7380 	mov.w	r3, #256	; 0x100
 800bb5c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800bb5e:	2300      	movs	r3, #0
 800bb60:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800bb62:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800bb66:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800bb68:	f107 0308 	add.w	r3, r7, #8
 800bb6c:	4619      	mov	r1, r3
 800bb6e:	6878      	ldr	r0, [r7, #4]
 800bb70:	f7ff ff0a 	bl	800b988 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 800bb74:	f241 3288 	movw	r2, #5000	; 0x1388
 800bb78:	2118      	movs	r1, #24
 800bb7a:	6878      	ldr	r0, [r7, #4]
 800bb7c:	f000 fa46 	bl	800c00c <SDMMC_GetCmdResp1>
 800bb80:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800bb82:	69fb      	ldr	r3, [r7, #28]
}
 800bb84:	4618      	mov	r0, r3
 800bb86:	3720      	adds	r7, #32
 800bb88:	46bd      	mov	sp, r7
 800bb8a:	bd80      	pop	{r7, pc}

0800bb8c <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 800bb8c:	b580      	push	{r7, lr}
 800bb8e:	b088      	sub	sp, #32
 800bb90:	af00      	add	r7, sp, #0
 800bb92:	6078      	str	r0, [r7, #4]
 800bb94:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800bb96:	683b      	ldr	r3, [r7, #0]
 800bb98:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 800bb9a:	2319      	movs	r3, #25
 800bb9c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800bb9e:	f44f 7380 	mov.w	r3, #256	; 0x100
 800bba2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800bba4:	2300      	movs	r3, #0
 800bba6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800bba8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800bbac:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800bbae:	f107 0308 	add.w	r3, r7, #8
 800bbb2:	4619      	mov	r1, r3
 800bbb4:	6878      	ldr	r0, [r7, #4]
 800bbb6:	f7ff fee7 	bl	800b988 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 800bbba:	f241 3288 	movw	r2, #5000	; 0x1388
 800bbbe:	2119      	movs	r1, #25
 800bbc0:	6878      	ldr	r0, [r7, #4]
 800bbc2:	f000 fa23 	bl	800c00c <SDMMC_GetCmdResp1>
 800bbc6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800bbc8:	69fb      	ldr	r3, [r7, #28]
}
 800bbca:	4618      	mov	r0, r3
 800bbcc:	3720      	adds	r7, #32
 800bbce:	46bd      	mov	sp, r7
 800bbd0:	bd80      	pop	{r7, pc}
	...

0800bbd4 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDMMC_TypeDef *SDMMCx)
{
 800bbd4:	b580      	push	{r7, lr}
 800bbd6:	b088      	sub	sp, #32
 800bbd8:	af00      	add	r7, sp, #0
 800bbda:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 800bbdc:	2300      	movs	r3, #0
 800bbde:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 800bbe0:	230c      	movs	r3, #12
 800bbe2:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800bbe4:	f44f 7380 	mov.w	r3, #256	; 0x100
 800bbe8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800bbea:	2300      	movs	r3, #0
 800bbec:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800bbee:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800bbf2:	61bb      	str	r3, [r7, #24]

  __SDMMC_CMDSTOP_ENABLE(SDMMCx);
 800bbf4:	687b      	ldr	r3, [r7, #4]
 800bbf6:	68db      	ldr	r3, [r3, #12]
 800bbf8:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800bbfc:	687b      	ldr	r3, [r7, #4]
 800bbfe:	60da      	str	r2, [r3, #12]
  __SDMMC_CMDTRANS_DISABLE(SDMMCx);
 800bc00:	687b      	ldr	r3, [r7, #4]
 800bc02:	68db      	ldr	r3, [r3, #12]
 800bc04:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 800bc08:	687b      	ldr	r3, [r7, #4]
 800bc0a:	60da      	str	r2, [r3, #12]

  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800bc0c:	f107 0308 	add.w	r3, r7, #8
 800bc10:	4619      	mov	r1, r3
 800bc12:	6878      	ldr	r0, [r7, #4]
 800bc14:	f7ff feb8 	bl	800b988 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_STOP_TRANSMISSION, SDMMC_STOPTRANSFERTIMEOUT);
 800bc18:	4a0b      	ldr	r2, [pc, #44]	; (800bc48 <SDMMC_CmdStopTransfer+0x74>)
 800bc1a:	210c      	movs	r1, #12
 800bc1c:	6878      	ldr	r0, [r7, #4]
 800bc1e:	f000 f9f5 	bl	800c00c <SDMMC_GetCmdResp1>
 800bc22:	61f8      	str	r0, [r7, #28]

  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 800bc24:	687b      	ldr	r3, [r7, #4]
 800bc26:	68db      	ldr	r3, [r3, #12]
 800bc28:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800bc2c:	687b      	ldr	r3, [r7, #4]
 800bc2e:	60da      	str	r2, [r3, #12]

  /* Ignore Address Out Of Range Error, Not relevant at end of memory */
  if (errorstate == SDMMC_ERROR_ADDR_OUT_OF_RANGE)
 800bc30:	69fb      	ldr	r3, [r7, #28]
 800bc32:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800bc36:	d101      	bne.n	800bc3c <SDMMC_CmdStopTransfer+0x68>
  {
    errorstate = SDMMC_ERROR_NONE;
 800bc38:	2300      	movs	r3, #0
 800bc3a:	61fb      	str	r3, [r7, #28]
  }

  return errorstate;
 800bc3c:	69fb      	ldr	r3, [r7, #28]
}
 800bc3e:	4618      	mov	r0, r3
 800bc40:	3720      	adds	r7, #32
 800bc42:	46bd      	mov	sp, r7
 800bc44:	bd80      	pop	{r7, pc}
 800bc46:	bf00      	nop
 800bc48:	05f5e100 	.word	0x05f5e100

0800bc4c <SDMMC_CmdSelDesel>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  addr: Address of the card to be selected
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDMMC_TypeDef *SDMMCx, uint64_t Addr)
{
 800bc4c:	b580      	push	{r7, lr}
 800bc4e:	b08a      	sub	sp, #40	; 0x28
 800bc50:	af00      	add	r7, sp, #0
 800bc52:	60f8      	str	r0, [r7, #12]
 800bc54:	e9c7 2300 	strd	r2, r3, [r7]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 800bc58:	683b      	ldr	r3, [r7, #0]
 800bc5a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 800bc5c:	2307      	movs	r3, #7
 800bc5e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800bc60:	f44f 7380 	mov.w	r3, #256	; 0x100
 800bc64:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800bc66:	2300      	movs	r3, #0
 800bc68:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800bc6a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800bc6e:	623b      	str	r3, [r7, #32]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800bc70:	f107 0310 	add.w	r3, r7, #16
 800bc74:	4619      	mov	r1, r3
 800bc76:	68f8      	ldr	r0, [r7, #12]
 800bc78:	f7ff fe86 	bl	800b988 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEL_DESEL_CARD, SDMMC_CMDTIMEOUT);
 800bc7c:	f241 3288 	movw	r2, #5000	; 0x1388
 800bc80:	2107      	movs	r1, #7
 800bc82:	68f8      	ldr	r0, [r7, #12]
 800bc84:	f000 f9c2 	bl	800c00c <SDMMC_GetCmdResp1>
 800bc88:	6278      	str	r0, [r7, #36]	; 0x24

  return errorstate;
 800bc8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800bc8c:	4618      	mov	r0, r3
 800bc8e:	3728      	adds	r7, #40	; 0x28
 800bc90:	46bd      	mov	sp, r7
 800bc92:	bd80      	pop	{r7, pc}

0800bc94 <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDMMC_TypeDef *SDMMCx)
{
 800bc94:	b580      	push	{r7, lr}
 800bc96:	b088      	sub	sp, #32
 800bc98:	af00      	add	r7, sp, #0
 800bc9a:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0U;
 800bc9c:	2300      	movs	r3, #0
 800bc9e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 800bca0:	2300      	movs	r3, #0
 800bca2:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_NO;
 800bca4:	2300      	movs	r3, #0
 800bca6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800bca8:	2300      	movs	r3, #0
 800bcaa:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800bcac:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800bcb0:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800bcb2:	f107 0308 	add.w	r3, r7, #8
 800bcb6:	4619      	mov	r1, r3
 800bcb8:	6878      	ldr	r0, [r7, #4]
 800bcba:	f7ff fe65 	bl	800b988 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDMMCx);
 800bcbe:	6878      	ldr	r0, [r7, #4]
 800bcc0:	f000 f976 	bl	800bfb0 <SDMMC_GetCmdError>
 800bcc4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800bcc6:	69fb      	ldr	r3, [r7, #28]
}
 800bcc8:	4618      	mov	r0, r3
 800bcca:	3720      	adds	r7, #32
 800bccc:	46bd      	mov	sp, r7
 800bcce:	bd80      	pop	{r7, pc}

0800bcd0 <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDMMC_TypeDef *SDMMCx)
{
 800bcd0:	b580      	push	{r7, lr}
 800bcd2:	b088      	sub	sp, #32
 800bcd4:	af00      	add	r7, sp, #0
 800bcd6:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 800bcd8:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 800bcdc:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 800bcde:	2308      	movs	r3, #8
 800bce0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800bce2:	f44f 7380 	mov.w	r3, #256	; 0x100
 800bce6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800bce8:	2300      	movs	r3, #0
 800bcea:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800bcec:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800bcf0:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800bcf2:	f107 0308 	add.w	r3, r7, #8
 800bcf6:	4619      	mov	r1, r3
 800bcf8:	6878      	ldr	r0, [r7, #4]
 800bcfa:	f7ff fe45 	bl	800b988 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDMMCx);
 800bcfe:	6878      	ldr	r0, [r7, #4]
 800bd00:	f000 fb78 	bl	800c3f4 <SDMMC_GetCmdResp7>
 800bd04:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800bd06:	69fb      	ldr	r3, [r7, #28]
}
 800bd08:	4618      	mov	r0, r3
 800bd0a:	3720      	adds	r7, #32
 800bd0c:	46bd      	mov	sp, r7
 800bd0e:	bd80      	pop	{r7, pc}

0800bd10 <SDMMC_CmdAppCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800bd10:	b580      	push	{r7, lr}
 800bd12:	b088      	sub	sp, #32
 800bd14:	af00      	add	r7, sp, #0
 800bd16:	6078      	str	r0, [r7, #4]
 800bd18:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 800bd1a:	683b      	ldr	r3, [r7, #0]
 800bd1c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 800bd1e:	2337      	movs	r3, #55	; 0x37
 800bd20:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800bd22:	f44f 7380 	mov.w	r3, #256	; 0x100
 800bd26:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800bd28:	2300      	movs	r3, #0
 800bd2a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800bd2c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800bd30:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800bd32:	f107 0308 	add.w	r3, r7, #8
 800bd36:	4619      	mov	r1, r3
 800bd38:	6878      	ldr	r0, [r7, #4]
 800bd3a:	f7ff fe25 	bl	800b988 <SDMMC_SendCommand>

  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_CMD, SDMMC_CMDTIMEOUT);
 800bd3e:	f241 3288 	movw	r2, #5000	; 0x1388
 800bd42:	2137      	movs	r1, #55	; 0x37
 800bd44:	6878      	ldr	r0, [r7, #4]
 800bd46:	f000 f961 	bl	800c00c <SDMMC_GetCmdResp1>
 800bd4a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800bd4c:	69fb      	ldr	r3, [r7, #28]
}
 800bd4e:	4618      	mov	r0, r3
 800bd50:	3720      	adds	r7, #32
 800bd52:	46bd      	mov	sp, r7
 800bd54:	bd80      	pop	{r7, pc}

0800bd56 <SDMMC_CmdAppOperCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800bd56:	b580      	push	{r7, lr}
 800bd58:	b088      	sub	sp, #32
 800bd5a:	af00      	add	r7, sp, #0
 800bd5c:	6078      	str	r0, [r7, #4]
 800bd5e:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = Argument;
 800bd60:	683b      	ldr	r3, [r7, #0]
 800bd62:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 800bd64:	2329      	movs	r3, #41	; 0x29
 800bd66:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800bd68:	f44f 7380 	mov.w	r3, #256	; 0x100
 800bd6c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800bd6e:	2300      	movs	r3, #0
 800bd70:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800bd72:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800bd76:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800bd78:	f107 0308 	add.w	r3, r7, #8
 800bd7c:	4619      	mov	r1, r3
 800bd7e:	6878      	ldr	r0, [r7, #4]
 800bd80:	f7ff fe02 	bl	800b988 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDMMCx);
 800bd84:	6878      	ldr	r0, [r7, #4]
 800bd86:	f000 fa7d 	bl	800c284 <SDMMC_GetCmdResp3>
 800bd8a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800bd8c:	69fb      	ldr	r3, [r7, #28]
}
 800bd8e:	4618      	mov	r0, r3
 800bd90:	3720      	adds	r7, #32
 800bd92:	46bd      	mov	sp, r7
 800bd94:	bd80      	pop	{r7, pc}

0800bd96 <SDMMC_CmdBusWidth>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  BusWidth: BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDMMC_TypeDef *SDMMCx, uint32_t BusWidth)
{
 800bd96:	b580      	push	{r7, lr}
 800bd98:	b088      	sub	sp, #32
 800bd9a:	af00      	add	r7, sp, #0
 800bd9c:	6078      	str	r0, [r7, #4]
 800bd9e:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 800bda0:	683b      	ldr	r3, [r7, #0]
 800bda2:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 800bda4:	2306      	movs	r3, #6
 800bda6:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800bda8:	f44f 7380 	mov.w	r3, #256	; 0x100
 800bdac:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800bdae:	2300      	movs	r3, #0
 800bdb0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800bdb2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800bdb6:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800bdb8:	f107 0308 	add.w	r3, r7, #8
 800bdbc:	4619      	mov	r1, r3
 800bdbe:	6878      	ldr	r0, [r7, #4]
 800bdc0:	f7ff fde2 	bl	800b988 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDMMC_CMDTIMEOUT);
 800bdc4:	f241 3288 	movw	r2, #5000	; 0x1388
 800bdc8:	2106      	movs	r1, #6
 800bdca:	6878      	ldr	r0, [r7, #4]
 800bdcc:	f000 f91e 	bl	800c00c <SDMMC_GetCmdResp1>
 800bdd0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800bdd2:	69fb      	ldr	r3, [r7, #28]
}
 800bdd4:	4618      	mov	r0, r3
 800bdd6:	3720      	adds	r7, #32
 800bdd8:	46bd      	mov	sp, r7
 800bdda:	bd80      	pop	{r7, pc}

0800bddc <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDMMC_TypeDef *SDMMCx)
{
 800bddc:	b580      	push	{r7, lr}
 800bdde:	b088      	sub	sp, #32
 800bde0:	af00      	add	r7, sp, #0
 800bde2:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 800bde4:	2300      	movs	r3, #0
 800bde6:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 800bde8:	2333      	movs	r3, #51	; 0x33
 800bdea:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800bdec:	f44f 7380 	mov.w	r3, #256	; 0x100
 800bdf0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800bdf2:	2300      	movs	r3, #0
 800bdf4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800bdf6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800bdfa:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800bdfc:	f107 0308 	add.w	r3, r7, #8
 800be00:	4619      	mov	r1, r3
 800be02:	6878      	ldr	r0, [r7, #4]
 800be04:	f7ff fdc0 	bl	800b988 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_SEND_SCR, SDMMC_CMDTIMEOUT);
 800be08:	f241 3288 	movw	r2, #5000	; 0x1388
 800be0c:	2133      	movs	r1, #51	; 0x33
 800be0e:	6878      	ldr	r0, [r7, #4]
 800be10:	f000 f8fc 	bl	800c00c <SDMMC_GetCmdResp1>
 800be14:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800be16:	69fb      	ldr	r3, [r7, #28]
}
 800be18:	4618      	mov	r0, r3
 800be1a:	3720      	adds	r7, #32
 800be1c:	46bd      	mov	sp, r7
 800be1e:	bd80      	pop	{r7, pc}

0800be20 <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDMMC_TypeDef *SDMMCx)
{
 800be20:	b580      	push	{r7, lr}
 800be22:	b088      	sub	sp, #32
 800be24:	af00      	add	r7, sp, #0
 800be26:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 800be28:	2300      	movs	r3, #0
 800be2a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 800be2c:	2302      	movs	r3, #2
 800be2e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 800be30:	f44f 7340 	mov.w	r3, #768	; 0x300
 800be34:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800be36:	2300      	movs	r3, #0
 800be38:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800be3a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800be3e:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800be40:	f107 0308 	add.w	r3, r7, #8
 800be44:	4619      	mov	r1, r3
 800be46:	6878      	ldr	r0, [r7, #4]
 800be48:	f7ff fd9e 	bl	800b988 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 800be4c:	6878      	ldr	r0, [r7, #4]
 800be4e:	f000 f9cf 	bl	800c1f0 <SDMMC_GetCmdResp2>
 800be52:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800be54:	69fb      	ldr	r3, [r7, #28]
}
 800be56:	4618      	mov	r0, r3
 800be58:	3720      	adds	r7, #32
 800be5a:	46bd      	mov	sp, r7
 800be5c:	bd80      	pop	{r7, pc}

0800be5e <SDMMC_CmdSendCSD>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800be5e:	b580      	push	{r7, lr}
 800be60:	b088      	sub	sp, #32
 800be62:	af00      	add	r7, sp, #0
 800be64:	6078      	str	r0, [r7, #4]
 800be66:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 800be68:	683b      	ldr	r3, [r7, #0]
 800be6a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 800be6c:	2309      	movs	r3, #9
 800be6e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 800be70:	f44f 7340 	mov.w	r3, #768	; 0x300
 800be74:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800be76:	2300      	movs	r3, #0
 800be78:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800be7a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800be7e:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800be80:	f107 0308 	add.w	r3, r7, #8
 800be84:	4619      	mov	r1, r3
 800be86:	6878      	ldr	r0, [r7, #4]
 800be88:	f7ff fd7e 	bl	800b988 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 800be8c:	6878      	ldr	r0, [r7, #4]
 800be8e:	f000 f9af 	bl	800c1f0 <SDMMC_GetCmdResp2>
 800be92:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800be94:	69fb      	ldr	r3, [r7, #28]
}
 800be96:	4618      	mov	r0, r3
 800be98:	3720      	adds	r7, #32
 800be9a:	46bd      	mov	sp, r7
 800be9c:	bd80      	pop	{r7, pc}

0800be9e <SDMMC_CmdSetRelAdd>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  pRCA: Card RCA
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDMMC_TypeDef *SDMMCx, uint16_t *pRCA)
{
 800be9e:	b580      	push	{r7, lr}
 800bea0:	b088      	sub	sp, #32
 800bea2:	af00      	add	r7, sp, #0
 800bea4:	6078      	str	r0, [r7, #4]
 800bea6:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 800bea8:	2300      	movs	r3, #0
 800beaa:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 800beac:	2303      	movs	r3, #3
 800beae:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800beb0:	f44f 7380 	mov.w	r3, #256	; 0x100
 800beb4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800beb6:	2300      	movs	r3, #0
 800beb8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800beba:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800bebe:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800bec0:	f107 0308 	add.w	r3, r7, #8
 800bec4:	4619      	mov	r1, r3
 800bec6:	6878      	ldr	r0, [r7, #4]
 800bec8:	f7ff fd5e 	bl	800b988 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDMMCx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 800becc:	683a      	ldr	r2, [r7, #0]
 800bece:	2103      	movs	r1, #3
 800bed0:	6878      	ldr	r0, [r7, #4]
 800bed2:	f000 fa17 	bl	800c304 <SDMMC_GetCmdResp6>
 800bed6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800bed8:	69fb      	ldr	r3, [r7, #28]
}
 800beda:	4618      	mov	r0, r3
 800bedc:	3720      	adds	r7, #32
 800bede:	46bd      	mov	sp, r7
 800bee0:	bd80      	pop	{r7, pc}

0800bee2 <SDMMC_CmdSendStatus>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800bee2:	b580      	push	{r7, lr}
 800bee4:	b088      	sub	sp, #32
 800bee6:	af00      	add	r7, sp, #0
 800bee8:	6078      	str	r0, [r7, #4]
 800beea:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = Argument;
 800beec:	683b      	ldr	r3, [r7, #0]
 800beee:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 800bef0:	230d      	movs	r3, #13
 800bef2:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800bef4:	f44f 7380 	mov.w	r3, #256	; 0x100
 800bef8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800befa:	2300      	movs	r3, #0
 800befc:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800befe:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800bf02:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800bf04:	f107 0308 	add.w	r3, r7, #8
 800bf08:	4619      	mov	r1, r3
 800bf0a:	6878      	ldr	r0, [r7, #4]
 800bf0c:	f7ff fd3c 	bl	800b988 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEND_STATUS, SDMMC_CMDTIMEOUT);
 800bf10:	f241 3288 	movw	r2, #5000	; 0x1388
 800bf14:	210d      	movs	r1, #13
 800bf16:	6878      	ldr	r0, [r7, #4]
 800bf18:	f000 f878 	bl	800c00c <SDMMC_GetCmdResp1>
 800bf1c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800bf1e:	69fb      	ldr	r3, [r7, #28]
}
 800bf20:	4618      	mov	r0, r3
 800bf22:	3720      	adds	r7, #32
 800bf24:	46bd      	mov	sp, r7
 800bf26:	bd80      	pop	{r7, pc}

0800bf28 <SDMMC_CmdStatusRegister>:
  * @brief  Send the Status register command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdStatusRegister(SDMMC_TypeDef *SDMMCx)
{
 800bf28:	b580      	push	{r7, lr}
 800bf2a:	b088      	sub	sp, #32
 800bf2c:	af00      	add	r7, sp, #0
 800bf2e:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0U;
 800bf30:	2300      	movs	r3, #0
 800bf32:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_STATUS;
 800bf34:	230d      	movs	r3, #13
 800bf36:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800bf38:	f44f 7380 	mov.w	r3, #256	; 0x100
 800bf3c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800bf3e:	2300      	movs	r3, #0
 800bf40:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800bf42:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800bf46:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800bf48:	f107 0308 	add.w	r3, r7, #8
 800bf4c:	4619      	mov	r1, r3
 800bf4e:	6878      	ldr	r0, [r7, #4]
 800bf50:	f7ff fd1a 	bl	800b988 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_STATUS, SDMMC_CMDTIMEOUT);
 800bf54:	f241 3288 	movw	r2, #5000	; 0x1388
 800bf58:	210d      	movs	r1, #13
 800bf5a:	6878      	ldr	r0, [r7, #4]
 800bf5c:	f000 f856 	bl	800c00c <SDMMC_GetCmdResp1>
 800bf60:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800bf62:	69fb      	ldr	r3, [r7, #28]
}
 800bf64:	4618      	mov	r0, r3
 800bf66:	3720      	adds	r7, #32
 800bf68:	46bd      	mov	sp, r7
 800bf6a:	bd80      	pop	{r7, pc}

0800bf6c <SDMMC_CmdVoltageSwitch>:
  *         condition register (OCR)
  * @param  None
  * @retval HAL status
  */
uint32_t SDMMC_CmdVoltageSwitch(SDMMC_TypeDef *SDMMCx)
{
 800bf6c:	b580      	push	{r7, lr}
 800bf6e:	b088      	sub	sp, #32
 800bf70:	af00      	add	r7, sp, #0
 800bf72:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0x00000000;
 800bf74:	2300      	movs	r3, #0
 800bf76:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_VOLTAGE_SWITCH;
 800bf78:	230b      	movs	r3, #11
 800bf7a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800bf7c:	f44f 7380 	mov.w	r3, #256	; 0x100
 800bf80:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800bf82:	2300      	movs	r3, #0
 800bf84:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800bf86:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800bf8a:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800bf8c:	f107 0308 	add.w	r3, r7, #8
 800bf90:	4619      	mov	r1, r3
 800bf92:	6878      	ldr	r0, [r7, #4]
 800bf94:	f7ff fcf8 	bl	800b988 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_VOLTAGE_SWITCH, SDMMC_CMDTIMEOUT);
 800bf98:	f241 3288 	movw	r2, #5000	; 0x1388
 800bf9c:	210b      	movs	r1, #11
 800bf9e:	6878      	ldr	r0, [r7, #4]
 800bfa0:	f000 f834 	bl	800c00c <SDMMC_GetCmdResp1>
 800bfa4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800bfa6:	69fb      	ldr	r3, [r7, #28]
}
 800bfa8:	4618      	mov	r0, r3
 800bfaa:	3720      	adds	r7, #32
 800bfac:	46bd      	mov	sp, r7
 800bfae:	bd80      	pop	{r7, pc}

0800bfb0 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDMMC_TypeDef *SDMMCx)
{
 800bfb0:	b480      	push	{r7}
 800bfb2:	b085      	sub	sp, #20
 800bfb4:	af00      	add	r7, sp, #0
 800bfb6:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800bfb8:	4b11      	ldr	r3, [pc, #68]	; (800c000 <SDMMC_GetCmdError+0x50>)
 800bfba:	681b      	ldr	r3, [r3, #0]
 800bfbc:	4a11      	ldr	r2, [pc, #68]	; (800c004 <SDMMC_GetCmdError+0x54>)
 800bfbe:	fba2 2303 	umull	r2, r3, r2, r3
 800bfc2:	0a5b      	lsrs	r3, r3, #9
 800bfc4:	f241 3288 	movw	r2, #5000	; 0x1388
 800bfc8:	fb02 f303 	mul.w	r3, r2, r3
 800bfcc:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 800bfce:	68fb      	ldr	r3, [r7, #12]
 800bfd0:	1e5a      	subs	r2, r3, #1
 800bfd2:	60fa      	str	r2, [r7, #12]
 800bfd4:	2b00      	cmp	r3, #0
 800bfd6:	d102      	bne.n	800bfde <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800bfd8:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800bfdc:	e009      	b.n	800bff2 <SDMMC_GetCmdError+0x42>
    }

  }while(!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDSENT));
 800bfde:	687b      	ldr	r3, [r7, #4]
 800bfe0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bfe2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800bfe6:	2b00      	cmp	r3, #0
 800bfe8:	d0f1      	beq.n	800bfce <SDMMC_GetCmdError+0x1e>

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800bfea:	687b      	ldr	r3, [r7, #4]
 800bfec:	4a06      	ldr	r2, [pc, #24]	; (800c008 <SDMMC_GetCmdError+0x58>)
 800bfee:	639a      	str	r2, [r3, #56]	; 0x38

  return SDMMC_ERROR_NONE;
 800bff0:	2300      	movs	r3, #0
}
 800bff2:	4618      	mov	r0, r3
 800bff4:	3714      	adds	r7, #20
 800bff6:	46bd      	mov	sp, r7
 800bff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bffc:	4770      	bx	lr
 800bffe:	bf00      	nop
 800c000:	24000000 	.word	0x24000000
 800c004:	10624dd3 	.word	0x10624dd3
 800c008:	002000c5 	.word	0x002000c5

0800c00c <SDMMC_GetCmdResp1>:
  * @param  hsd: SD handle
  * @param  SD_CMD: The sent command index
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp1(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint32_t Timeout)
{
 800c00c:	b580      	push	{r7, lr}
 800c00e:	b088      	sub	sp, #32
 800c010:	af00      	add	r7, sp, #0
 800c012:	60f8      	str	r0, [r7, #12]
 800c014:	460b      	mov	r3, r1
 800c016:	607a      	str	r2, [r7, #4]
 800c018:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800c01a:	4b70      	ldr	r3, [pc, #448]	; (800c1dc <SDMMC_GetCmdResp1+0x1d0>)
 800c01c:	681b      	ldr	r3, [r3, #0]
 800c01e:	4a70      	ldr	r2, [pc, #448]	; (800c1e0 <SDMMC_GetCmdResp1+0x1d4>)
 800c020:	fba2 2303 	umull	r2, r3, r2, r3
 800c024:	0a5a      	lsrs	r2, r3, #9
 800c026:	687b      	ldr	r3, [r7, #4]
 800c028:	fb02 f303 	mul.w	r3, r2, r3
 800c02c:	61fb      	str	r3, [r7, #28]

  do
  {
    if (count-- == 0U)
 800c02e:	69fb      	ldr	r3, [r7, #28]
 800c030:	1e5a      	subs	r2, r3, #1
 800c032:	61fa      	str	r2, [r7, #28]
 800c034:	2b00      	cmp	r3, #0
 800c036:	d102      	bne.n	800c03e <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 800c038:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800c03c:	e0c9      	b.n	800c1d2 <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDMMCx->STA;
 800c03e:	68fb      	ldr	r3, [r7, #12]
 800c040:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c042:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT | SDMMC_FLAG_BUSYD0END)) == 0U) ||
 800c044:	69ba      	ldr	r2, [r7, #24]
 800c046:	4b67      	ldr	r3, [pc, #412]	; (800c1e4 <SDMMC_GetCmdResp1+0x1d8>)
 800c048:	4013      	ands	r3, r2
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800c04a:	2b00      	cmp	r3, #0
 800c04c:	d0ef      	beq.n	800c02e <SDMMC_GetCmdResp1+0x22>
 800c04e:	69bb      	ldr	r3, [r7, #24]
 800c050:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT | SDMMC_FLAG_BUSYD0END)) == 0U) ||
 800c054:	2b00      	cmp	r3, #0
 800c056:	d1ea      	bne.n	800c02e <SDMMC_GetCmdResp1+0x22>

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800c058:	68fb      	ldr	r3, [r7, #12]
 800c05a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c05c:	f003 0304 	and.w	r3, r3, #4
 800c060:	2b00      	cmp	r3, #0
 800c062:	d004      	beq.n	800c06e <SDMMC_GetCmdResp1+0x62>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800c064:	68fb      	ldr	r3, [r7, #12]
 800c066:	2204      	movs	r2, #4
 800c068:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800c06a:	2304      	movs	r3, #4
 800c06c:	e0b1      	b.n	800c1d2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800c06e:	68fb      	ldr	r3, [r7, #12]
 800c070:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c072:	f003 0301 	and.w	r3, r3, #1
 800c076:	2b00      	cmp	r3, #0
 800c078:	d004      	beq.n	800c084 <SDMMC_GetCmdResp1+0x78>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800c07a:	68fb      	ldr	r3, [r7, #12]
 800c07c:	2201      	movs	r2, #1
 800c07e:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 800c080:	2301      	movs	r3, #1
 800c082:	e0a6      	b.n	800c1d2 <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800c084:	68fb      	ldr	r3, [r7, #12]
 800c086:	4a58      	ldr	r2, [pc, #352]	; (800c1e8 <SDMMC_GetCmdResp1+0x1dc>)
 800c088:	639a      	str	r2, [r3, #56]	; 0x38

  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800c08a:	68f8      	ldr	r0, [r7, #12]
 800c08c:	f7ff fca6 	bl	800b9dc <SDMMC_GetCommandResponse>
 800c090:	4603      	mov	r3, r0
 800c092:	461a      	mov	r2, r3
 800c094:	7afb      	ldrb	r3, [r7, #11]
 800c096:	4293      	cmp	r3, r2
 800c098:	d001      	beq.n	800c09e <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800c09a:	2301      	movs	r3, #1
 800c09c:	e099      	b.n	800c1d2 <SDMMC_GetCmdResp1+0x1c6>
  }

  /* We have received response, retrieve it for analysis  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 800c09e:	2100      	movs	r1, #0
 800c0a0:	68f8      	ldr	r0, [r7, #12]
 800c0a2:	f7ff fca8 	bl	800b9f6 <SDMMC_GetResponse>
 800c0a6:	6178      	str	r0, [r7, #20]

  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 800c0a8:	697a      	ldr	r2, [r7, #20]
 800c0aa:	4b50      	ldr	r3, [pc, #320]	; (800c1ec <SDMMC_GetCmdResp1+0x1e0>)
 800c0ac:	4013      	ands	r3, r2
 800c0ae:	2b00      	cmp	r3, #0
 800c0b0:	d101      	bne.n	800c0b6 <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 800c0b2:	2300      	movs	r3, #0
 800c0b4:	e08d      	b.n	800c1d2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 800c0b6:	697b      	ldr	r3, [r7, #20]
 800c0b8:	2b00      	cmp	r3, #0
 800c0ba:	da02      	bge.n	800c0c2 <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 800c0bc:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800c0c0:	e087      	b.n	800c1d2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 800c0c2:	697b      	ldr	r3, [r7, #20]
 800c0c4:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800c0c8:	2b00      	cmp	r3, #0
 800c0ca:	d001      	beq.n	800c0d0 <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 800c0cc:	2340      	movs	r3, #64	; 0x40
 800c0ce:	e080      	b.n	800c1d2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 800c0d0:	697b      	ldr	r3, [r7, #20]
 800c0d2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800c0d6:	2b00      	cmp	r3, #0
 800c0d8:	d001      	beq.n	800c0de <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 800c0da:	2380      	movs	r3, #128	; 0x80
 800c0dc:	e079      	b.n	800c1d2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 800c0de:	697b      	ldr	r3, [r7, #20]
 800c0e0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800c0e4:	2b00      	cmp	r3, #0
 800c0e6:	d002      	beq.n	800c0ee <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 800c0e8:	f44f 7380 	mov.w	r3, #256	; 0x100
 800c0ec:	e071      	b.n	800c1d2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 800c0ee:	697b      	ldr	r3, [r7, #20]
 800c0f0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800c0f4:	2b00      	cmp	r3, #0
 800c0f6:	d002      	beq.n	800c0fe <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 800c0f8:	f44f 7300 	mov.w	r3, #512	; 0x200
 800c0fc:	e069      	b.n	800c1d2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 800c0fe:	697b      	ldr	r3, [r7, #20]
 800c100:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800c104:	2b00      	cmp	r3, #0
 800c106:	d002      	beq.n	800c10e <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 800c108:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c10c:	e061      	b.n	800c1d2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 800c10e:	697b      	ldr	r3, [r7, #20]
 800c110:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800c114:	2b00      	cmp	r3, #0
 800c116:	d002      	beq.n	800c11e <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 800c118:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800c11c:	e059      	b.n	800c1d2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 800c11e:	697b      	ldr	r3, [r7, #20]
 800c120:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800c124:	2b00      	cmp	r3, #0
 800c126:	d002      	beq.n	800c12e <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800c128:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800c12c:	e051      	b.n	800c1d2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 800c12e:	697b      	ldr	r3, [r7, #20]
 800c130:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800c134:	2b00      	cmp	r3, #0
 800c136:	d002      	beq.n	800c13e <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800c138:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800c13c:	e049      	b.n	800c1d2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 800c13e:	697b      	ldr	r3, [r7, #20]
 800c140:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800c144:	2b00      	cmp	r3, #0
 800c146:	d002      	beq.n	800c14e <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 800c148:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800c14c:	e041      	b.n	800c1d2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 800c14e:	697b      	ldr	r3, [r7, #20]
 800c150:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800c154:	2b00      	cmp	r3, #0
 800c156:	d002      	beq.n	800c15e <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 800c158:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800c15c:	e039      	b.n	800c1d2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 800c15e:	697b      	ldr	r3, [r7, #20]
 800c160:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800c164:	2b00      	cmp	r3, #0
 800c166:	d002      	beq.n	800c16e <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 800c168:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800c16c:	e031      	b.n	800c1d2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 800c16e:	697b      	ldr	r3, [r7, #20]
 800c170:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c174:	2b00      	cmp	r3, #0
 800c176:	d002      	beq.n	800c17e <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 800c178:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800c17c:	e029      	b.n	800c1d2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 800c17e:	697b      	ldr	r3, [r7, #20]
 800c180:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800c184:	2b00      	cmp	r3, #0
 800c186:	d002      	beq.n	800c18e <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 800c188:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800c18c:	e021      	b.n	800c1d2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 800c18e:	697b      	ldr	r3, [r7, #20]
 800c190:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800c194:	2b00      	cmp	r3, #0
 800c196:	d002      	beq.n	800c19e <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 800c198:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800c19c:	e019      	b.n	800c1d2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 800c19e:	697b      	ldr	r3, [r7, #20]
 800c1a0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800c1a4:	2b00      	cmp	r3, #0
 800c1a6:	d002      	beq.n	800c1ae <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 800c1a8:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800c1ac:	e011      	b.n	800c1d2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 800c1ae:	697b      	ldr	r3, [r7, #20]
 800c1b0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800c1b4:	2b00      	cmp	r3, #0
 800c1b6:	d002      	beq.n	800c1be <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 800c1b8:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800c1bc:	e009      	b.n	800c1d2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 800c1be:	697b      	ldr	r3, [r7, #20]
 800c1c0:	f003 0308 	and.w	r3, r3, #8
 800c1c4:	2b00      	cmp	r3, #0
 800c1c6:	d002      	beq.n	800c1ce <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 800c1c8:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 800c1cc:	e001      	b.n	800c1d2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800c1ce:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800c1d2:	4618      	mov	r0, r3
 800c1d4:	3720      	adds	r7, #32
 800c1d6:	46bd      	mov	sp, r7
 800c1d8:	bd80      	pop	{r7, pc}
 800c1da:	bf00      	nop
 800c1dc:	24000000 	.word	0x24000000
 800c1e0:	10624dd3 	.word	0x10624dd3
 800c1e4:	00200045 	.word	0x00200045
 800c1e8:	002000c5 	.word	0x002000c5
 800c1ec:	fdffe008 	.word	0xfdffe008

0800c1f0 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp2(SDMMC_TypeDef *SDMMCx)
{
 800c1f0:	b480      	push	{r7}
 800c1f2:	b085      	sub	sp, #20
 800c1f4:	af00      	add	r7, sp, #0
 800c1f6:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800c1f8:	4b1f      	ldr	r3, [pc, #124]	; (800c278 <SDMMC_GetCmdResp2+0x88>)
 800c1fa:	681b      	ldr	r3, [r3, #0]
 800c1fc:	4a1f      	ldr	r2, [pc, #124]	; (800c27c <SDMMC_GetCmdResp2+0x8c>)
 800c1fe:	fba2 2303 	umull	r2, r3, r2, r3
 800c202:	0a5b      	lsrs	r3, r3, #9
 800c204:	f241 3288 	movw	r2, #5000	; 0x1388
 800c208:	fb02 f303 	mul.w	r3, r2, r3
 800c20c:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 800c20e:	68fb      	ldr	r3, [r7, #12]
 800c210:	1e5a      	subs	r2, r3, #1
 800c212:	60fa      	str	r2, [r7, #12]
 800c214:	2b00      	cmp	r3, #0
 800c216:	d102      	bne.n	800c21e <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800c218:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800c21c:	e026      	b.n	800c26c <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDMMCx->STA;
 800c21e:	687b      	ldr	r3, [r7, #4]
 800c220:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c222:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800c224:	68bb      	ldr	r3, [r7, #8]
 800c226:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800c22a:	2b00      	cmp	r3, #0
 800c22c:	d0ef      	beq.n	800c20e <SDMMC_GetCmdResp2+0x1e>
 800c22e:	68bb      	ldr	r3, [r7, #8]
 800c230:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800c234:	2b00      	cmp	r3, #0
 800c236:	d1ea      	bne.n	800c20e <SDMMC_GetCmdResp2+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800c238:	687b      	ldr	r3, [r7, #4]
 800c23a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c23c:	f003 0304 	and.w	r3, r3, #4
 800c240:	2b00      	cmp	r3, #0
 800c242:	d004      	beq.n	800c24e <SDMMC_GetCmdResp2+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800c244:	687b      	ldr	r3, [r7, #4]
 800c246:	2204      	movs	r2, #4
 800c248:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800c24a:	2304      	movs	r3, #4
 800c24c:	e00e      	b.n	800c26c <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800c24e:	687b      	ldr	r3, [r7, #4]
 800c250:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c252:	f003 0301 	and.w	r3, r3, #1
 800c256:	2b00      	cmp	r3, #0
 800c258:	d004      	beq.n	800c264 <SDMMC_GetCmdResp2+0x74>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800c25a:	687b      	ldr	r3, [r7, #4]
 800c25c:	2201      	movs	r2, #1
 800c25e:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 800c260:	2301      	movs	r3, #1
 800c262:	e003      	b.n	800c26c <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800c264:	687b      	ldr	r3, [r7, #4]
 800c266:	4a06      	ldr	r2, [pc, #24]	; (800c280 <SDMMC_GetCmdResp2+0x90>)
 800c268:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 800c26a:	2300      	movs	r3, #0
}
 800c26c:	4618      	mov	r0, r3
 800c26e:	3714      	adds	r7, #20
 800c270:	46bd      	mov	sp, r7
 800c272:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c276:	4770      	bx	lr
 800c278:	24000000 	.word	0x24000000
 800c27c:	10624dd3 	.word	0x10624dd3
 800c280:	002000c5 	.word	0x002000c5

0800c284 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp3(SDMMC_TypeDef *SDMMCx)
{
 800c284:	b480      	push	{r7}
 800c286:	b085      	sub	sp, #20
 800c288:	af00      	add	r7, sp, #0
 800c28a:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800c28c:	4b1a      	ldr	r3, [pc, #104]	; (800c2f8 <SDMMC_GetCmdResp3+0x74>)
 800c28e:	681b      	ldr	r3, [r3, #0]
 800c290:	4a1a      	ldr	r2, [pc, #104]	; (800c2fc <SDMMC_GetCmdResp3+0x78>)
 800c292:	fba2 2303 	umull	r2, r3, r2, r3
 800c296:	0a5b      	lsrs	r3, r3, #9
 800c298:	f241 3288 	movw	r2, #5000	; 0x1388
 800c29c:	fb02 f303 	mul.w	r3, r2, r3
 800c2a0:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 800c2a2:	68fb      	ldr	r3, [r7, #12]
 800c2a4:	1e5a      	subs	r2, r3, #1
 800c2a6:	60fa      	str	r2, [r7, #12]
 800c2a8:	2b00      	cmp	r3, #0
 800c2aa:	d102      	bne.n	800c2b2 <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800c2ac:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800c2b0:	e01b      	b.n	800c2ea <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDMMCx->STA;
 800c2b2:	687b      	ldr	r3, [r7, #4]
 800c2b4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c2b6:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800c2b8:	68bb      	ldr	r3, [r7, #8]
 800c2ba:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800c2be:	2b00      	cmp	r3, #0
 800c2c0:	d0ef      	beq.n	800c2a2 <SDMMC_GetCmdResp3+0x1e>
 800c2c2:	68bb      	ldr	r3, [r7, #8]
 800c2c4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800c2c8:	2b00      	cmp	r3, #0
 800c2ca:	d1ea      	bne.n	800c2a2 <SDMMC_GetCmdResp3+0x1e>

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800c2cc:	687b      	ldr	r3, [r7, #4]
 800c2ce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c2d0:	f003 0304 	and.w	r3, r3, #4
 800c2d4:	2b00      	cmp	r3, #0
 800c2d6:	d004      	beq.n	800c2e2 <SDMMC_GetCmdResp3+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800c2d8:	687b      	ldr	r3, [r7, #4]
 800c2da:	2204      	movs	r2, #4
 800c2dc:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800c2de:	2304      	movs	r3, #4
 800c2e0:	e003      	b.n	800c2ea <SDMMC_GetCmdResp3+0x66>
  }
  else
  {
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800c2e2:	687b      	ldr	r3, [r7, #4]
 800c2e4:	4a06      	ldr	r2, [pc, #24]	; (800c300 <SDMMC_GetCmdResp3+0x7c>)
 800c2e6:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 800c2e8:	2300      	movs	r3, #0
}
 800c2ea:	4618      	mov	r0, r3
 800c2ec:	3714      	adds	r7, #20
 800c2ee:	46bd      	mov	sp, r7
 800c2f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2f4:	4770      	bx	lr
 800c2f6:	bf00      	nop
 800c2f8:	24000000 	.word	0x24000000
 800c2fc:	10624dd3 	.word	0x10624dd3
 800c300:	002000c5 	.word	0x002000c5

0800c304 <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative
  *         address RCA
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp6(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint16_t *pRCA)
{
 800c304:	b580      	push	{r7, lr}
 800c306:	b088      	sub	sp, #32
 800c308:	af00      	add	r7, sp, #0
 800c30a:	60f8      	str	r0, [r7, #12]
 800c30c:	460b      	mov	r3, r1
 800c30e:	607a      	str	r2, [r7, #4]
 800c310:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800c312:	4b35      	ldr	r3, [pc, #212]	; (800c3e8 <SDMMC_GetCmdResp6+0xe4>)
 800c314:	681b      	ldr	r3, [r3, #0]
 800c316:	4a35      	ldr	r2, [pc, #212]	; (800c3ec <SDMMC_GetCmdResp6+0xe8>)
 800c318:	fba2 2303 	umull	r2, r3, r2, r3
 800c31c:	0a5b      	lsrs	r3, r3, #9
 800c31e:	f241 3288 	movw	r2, #5000	; 0x1388
 800c322:	fb02 f303 	mul.w	r3, r2, r3
 800c326:	61fb      	str	r3, [r7, #28]

  do
  {
    if (count-- == 0U)
 800c328:	69fb      	ldr	r3, [r7, #28]
 800c32a:	1e5a      	subs	r2, r3, #1
 800c32c:	61fa      	str	r2, [r7, #28]
 800c32e:	2b00      	cmp	r3, #0
 800c330:	d102      	bne.n	800c338 <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 800c332:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800c336:	e052      	b.n	800c3de <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDMMCx->STA;
 800c338:	68fb      	ldr	r3, [r7, #12]
 800c33a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c33c:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800c33e:	69bb      	ldr	r3, [r7, #24]
 800c340:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800c344:	2b00      	cmp	r3, #0
 800c346:	d0ef      	beq.n	800c328 <SDMMC_GetCmdResp6+0x24>
 800c348:	69bb      	ldr	r3, [r7, #24]
 800c34a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800c34e:	2b00      	cmp	r3, #0
 800c350:	d1ea      	bne.n	800c328 <SDMMC_GetCmdResp6+0x24>

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800c352:	68fb      	ldr	r3, [r7, #12]
 800c354:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c356:	f003 0304 	and.w	r3, r3, #4
 800c35a:	2b00      	cmp	r3, #0
 800c35c:	d004      	beq.n	800c368 <SDMMC_GetCmdResp6+0x64>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800c35e:	68fb      	ldr	r3, [r7, #12]
 800c360:	2204      	movs	r2, #4
 800c362:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800c364:	2304      	movs	r3, #4
 800c366:	e03a      	b.n	800c3de <SDMMC_GetCmdResp6+0xda>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800c368:	68fb      	ldr	r3, [r7, #12]
 800c36a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c36c:	f003 0301 	and.w	r3, r3, #1
 800c370:	2b00      	cmp	r3, #0
 800c372:	d004      	beq.n	800c37e <SDMMC_GetCmdResp6+0x7a>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800c374:	68fb      	ldr	r3, [r7, #12]
 800c376:	2201      	movs	r2, #1
 800c378:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 800c37a:	2301      	movs	r3, #1
 800c37c:	e02f      	b.n	800c3de <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }

  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800c37e:	68f8      	ldr	r0, [r7, #12]
 800c380:	f7ff fb2c 	bl	800b9dc <SDMMC_GetCommandResponse>
 800c384:	4603      	mov	r3, r0
 800c386:	461a      	mov	r2, r3
 800c388:	7afb      	ldrb	r3, [r7, #11]
 800c38a:	4293      	cmp	r3, r2
 800c38c:	d001      	beq.n	800c392 <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800c38e:	2301      	movs	r3, #1
 800c390:	e025      	b.n	800c3de <SDMMC_GetCmdResp6+0xda>
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800c392:	68fb      	ldr	r3, [r7, #12]
 800c394:	4a16      	ldr	r2, [pc, #88]	; (800c3f0 <SDMMC_GetCmdResp6+0xec>)
 800c396:	639a      	str	r2, [r3, #56]	; 0x38

  /* We have received response, retrieve it.  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 800c398:	2100      	movs	r1, #0
 800c39a:	68f8      	ldr	r0, [r7, #12]
 800c39c:	f7ff fb2b 	bl	800b9f6 <SDMMC_GetResponse>
 800c3a0:	6178      	str	r0, [r7, #20]

  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 800c3a2:	697b      	ldr	r3, [r7, #20]
 800c3a4:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 800c3a8:	2b00      	cmp	r3, #0
 800c3aa:	d106      	bne.n	800c3ba <SDMMC_GetCmdResp6+0xb6>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 800c3ac:	697b      	ldr	r3, [r7, #20]
 800c3ae:	0c1b      	lsrs	r3, r3, #16
 800c3b0:	b29a      	uxth	r2, r3
 800c3b2:	687b      	ldr	r3, [r7, #4]
 800c3b4:	801a      	strh	r2, [r3, #0]

    return SDMMC_ERROR_NONE;
 800c3b6:	2300      	movs	r3, #0
 800c3b8:	e011      	b.n	800c3de <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 800c3ba:	697b      	ldr	r3, [r7, #20]
 800c3bc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800c3c0:	2b00      	cmp	r3, #0
 800c3c2:	d002      	beq.n	800c3ca <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800c3c4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800c3c8:	e009      	b.n	800c3de <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 800c3ca:	697b      	ldr	r3, [r7, #20]
 800c3cc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800c3d0:	2b00      	cmp	r3, #0
 800c3d2:	d002      	beq.n	800c3da <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800c3d4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800c3d8:	e001      	b.n	800c3de <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800c3da:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800c3de:	4618      	mov	r0, r3
 800c3e0:	3720      	adds	r7, #32
 800c3e2:	46bd      	mov	sp, r7
 800c3e4:	bd80      	pop	{r7, pc}
 800c3e6:	bf00      	nop
 800c3e8:	24000000 	.word	0x24000000
 800c3ec:	10624dd3 	.word	0x10624dd3
 800c3f0:	002000c5 	.word	0x002000c5

0800c3f4 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp7(SDMMC_TypeDef *SDMMCx)
{
 800c3f4:	b480      	push	{r7}
 800c3f6:	b085      	sub	sp, #20
 800c3f8:	af00      	add	r7, sp, #0
 800c3fa:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800c3fc:	4b22      	ldr	r3, [pc, #136]	; (800c488 <SDMMC_GetCmdResp7+0x94>)
 800c3fe:	681b      	ldr	r3, [r3, #0]
 800c400:	4a22      	ldr	r2, [pc, #136]	; (800c48c <SDMMC_GetCmdResp7+0x98>)
 800c402:	fba2 2303 	umull	r2, r3, r2, r3
 800c406:	0a5b      	lsrs	r3, r3, #9
 800c408:	f241 3288 	movw	r2, #5000	; 0x1388
 800c40c:	fb02 f303 	mul.w	r3, r2, r3
 800c410:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 800c412:	68fb      	ldr	r3, [r7, #12]
 800c414:	1e5a      	subs	r2, r3, #1
 800c416:	60fa      	str	r2, [r7, #12]
 800c418:	2b00      	cmp	r3, #0
 800c41a:	d102      	bne.n	800c422 <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800c41c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800c420:	e02c      	b.n	800c47c <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDMMCx->STA;
 800c422:	687b      	ldr	r3, [r7, #4]
 800c424:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c426:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800c428:	68bb      	ldr	r3, [r7, #8]
 800c42a:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800c42e:	2b00      	cmp	r3, #0
 800c430:	d0ef      	beq.n	800c412 <SDMMC_GetCmdResp7+0x1e>
 800c432:	68bb      	ldr	r3, [r7, #8]
 800c434:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800c438:	2b00      	cmp	r3, #0
 800c43a:	d1ea      	bne.n	800c412 <SDMMC_GetCmdResp7+0x1e>

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800c43c:	687b      	ldr	r3, [r7, #4]
 800c43e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c440:	f003 0304 	and.w	r3, r3, #4
 800c444:	2b00      	cmp	r3, #0
 800c446:	d004      	beq.n	800c452 <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800c448:	687b      	ldr	r3, [r7, #4]
 800c44a:	2204      	movs	r2, #4
 800c44c:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800c44e:	2304      	movs	r3, #4
 800c450:	e014      	b.n	800c47c <SDMMC_GetCmdResp7+0x88>
  }

  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800c452:	687b      	ldr	r3, [r7, #4]
 800c454:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c456:	f003 0301 	and.w	r3, r3, #1
 800c45a:	2b00      	cmp	r3, #0
 800c45c:	d004      	beq.n	800c468 <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800c45e:	687b      	ldr	r3, [r7, #4]
 800c460:	2201      	movs	r2, #1
 800c462:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 800c464:	2301      	movs	r3, #1
 800c466:	e009      	b.n	800c47c <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDREND))
 800c468:	687b      	ldr	r3, [r7, #4]
 800c46a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c46c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c470:	2b00      	cmp	r3, #0
 800c472:	d002      	beq.n	800c47a <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CMDREND);
 800c474:	687b      	ldr	r3, [r7, #4]
 800c476:	2240      	movs	r2, #64	; 0x40
 800c478:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 800c47a:	2300      	movs	r3, #0

}
 800c47c:	4618      	mov	r0, r3
 800c47e:	3714      	adds	r7, #20
 800c480:	46bd      	mov	sp, r7
 800c482:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c486:	4770      	bx	lr
 800c488:	24000000 	.word	0x24000000
 800c48c:	10624dd3 	.word	0x10624dd3

0800c490 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800c490:	b084      	sub	sp, #16
 800c492:	b580      	push	{r7, lr}
 800c494:	b084      	sub	sp, #16
 800c496:	af00      	add	r7, sp, #0
 800c498:	6078      	str	r0, [r7, #4]
 800c49a:	f107 001c 	add.w	r0, r7, #28
 800c49e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800c4a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c4a4:	2b01      	cmp	r3, #1
 800c4a6:	d120      	bne.n	800c4ea <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800c4a8:	687b      	ldr	r3, [r7, #4]
 800c4aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c4ac:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800c4b0:	687b      	ldr	r3, [r7, #4]
 800c4b2:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800c4b4:	687b      	ldr	r3, [r7, #4]
 800c4b6:	68da      	ldr	r2, [r3, #12]
 800c4b8:	4b25      	ldr	r3, [pc, #148]	; (800c550 <USB_CoreInit+0xc0>)
 800c4ba:	4013      	ands	r3, r2
 800c4bc:	687a      	ldr	r2, [r7, #4]
 800c4be:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800c4c0:	687b      	ldr	r3, [r7, #4]
 800c4c2:	68db      	ldr	r3, [r3, #12]
 800c4c4:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800c4c8:	687b      	ldr	r3, [r7, #4]
 800c4ca:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800c4cc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c4ce:	2b01      	cmp	r3, #1
 800c4d0:	d105      	bne.n	800c4de <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800c4d2:	687b      	ldr	r3, [r7, #4]
 800c4d4:	68db      	ldr	r3, [r3, #12]
 800c4d6:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800c4da:	687b      	ldr	r3, [r7, #4]
 800c4dc:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 800c4de:	6878      	ldr	r0, [r7, #4]
 800c4e0:	f001 fabe 	bl	800da60 <USB_CoreReset>
 800c4e4:	4603      	mov	r3, r0
 800c4e6:	73fb      	strb	r3, [r7, #15]
 800c4e8:	e01a      	b.n	800c520 <USB_CoreInit+0x90>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800c4ea:	687b      	ldr	r3, [r7, #4]
 800c4ec:	68db      	ldr	r3, [r3, #12]
 800c4ee:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800c4f2:	687b      	ldr	r3, [r7, #4]
 800c4f4:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select and set Host mode */
    ret = USB_CoreReset(USBx);
 800c4f6:	6878      	ldr	r0, [r7, #4]
 800c4f8:	f001 fab2 	bl	800da60 <USB_CoreReset>
 800c4fc:	4603      	mov	r3, r0
 800c4fe:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800c500:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c502:	2b00      	cmp	r3, #0
 800c504:	d106      	bne.n	800c514 <USB_CoreInit+0x84>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800c506:	687b      	ldr	r3, [r7, #4]
 800c508:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c50a:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800c50e:	687b      	ldr	r3, [r7, #4]
 800c510:	639a      	str	r2, [r3, #56]	; 0x38
 800c512:	e005      	b.n	800c520 <USB_CoreInit+0x90>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800c514:	687b      	ldr	r3, [r7, #4]
 800c516:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c518:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800c51c:	687b      	ldr	r3, [r7, #4]
 800c51e:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800c520:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c522:	2b01      	cmp	r3, #1
 800c524:	d10b      	bne.n	800c53e <USB_CoreInit+0xae>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800c526:	687b      	ldr	r3, [r7, #4]
 800c528:	689b      	ldr	r3, [r3, #8]
 800c52a:	f043 0206 	orr.w	r2, r3, #6
 800c52e:	687b      	ldr	r3, [r7, #4]
 800c530:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800c532:	687b      	ldr	r3, [r7, #4]
 800c534:	689b      	ldr	r3, [r3, #8]
 800c536:	f043 0220 	orr.w	r2, r3, #32
 800c53a:	687b      	ldr	r3, [r7, #4]
 800c53c:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800c53e:	7bfb      	ldrb	r3, [r7, #15]
}
 800c540:	4618      	mov	r0, r3
 800c542:	3710      	adds	r7, #16
 800c544:	46bd      	mov	sp, r7
 800c546:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800c54a:	b004      	add	sp, #16
 800c54c:	4770      	bx	lr
 800c54e:	bf00      	nop
 800c550:	ffbdffbf 	.word	0xffbdffbf

0800c554 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 800c554:	b480      	push	{r7}
 800c556:	b087      	sub	sp, #28
 800c558:	af00      	add	r7, sp, #0
 800c55a:	60f8      	str	r0, [r7, #12]
 800c55c:	60b9      	str	r1, [r7, #8]
 800c55e:	4613      	mov	r3, r2
 800c560:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 800c562:	79fb      	ldrb	r3, [r7, #7]
 800c564:	2b02      	cmp	r3, #2
 800c566:	d165      	bne.n	800c634 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 800c568:	68bb      	ldr	r3, [r7, #8]
 800c56a:	4a41      	ldr	r2, [pc, #260]	; (800c670 <USB_SetTurnaroundTime+0x11c>)
 800c56c:	4293      	cmp	r3, r2
 800c56e:	d906      	bls.n	800c57e <USB_SetTurnaroundTime+0x2a>
 800c570:	68bb      	ldr	r3, [r7, #8]
 800c572:	4a40      	ldr	r2, [pc, #256]	; (800c674 <USB_SetTurnaroundTime+0x120>)
 800c574:	4293      	cmp	r3, r2
 800c576:	d802      	bhi.n	800c57e <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 800c578:	230f      	movs	r3, #15
 800c57a:	617b      	str	r3, [r7, #20]
 800c57c:	e062      	b.n	800c644 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 800c57e:	68bb      	ldr	r3, [r7, #8]
 800c580:	4a3c      	ldr	r2, [pc, #240]	; (800c674 <USB_SetTurnaroundTime+0x120>)
 800c582:	4293      	cmp	r3, r2
 800c584:	d906      	bls.n	800c594 <USB_SetTurnaroundTime+0x40>
 800c586:	68bb      	ldr	r3, [r7, #8]
 800c588:	4a3b      	ldr	r2, [pc, #236]	; (800c678 <USB_SetTurnaroundTime+0x124>)
 800c58a:	4293      	cmp	r3, r2
 800c58c:	d802      	bhi.n	800c594 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 800c58e:	230e      	movs	r3, #14
 800c590:	617b      	str	r3, [r7, #20]
 800c592:	e057      	b.n	800c644 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 800c594:	68bb      	ldr	r3, [r7, #8]
 800c596:	4a38      	ldr	r2, [pc, #224]	; (800c678 <USB_SetTurnaroundTime+0x124>)
 800c598:	4293      	cmp	r3, r2
 800c59a:	d906      	bls.n	800c5aa <USB_SetTurnaroundTime+0x56>
 800c59c:	68bb      	ldr	r3, [r7, #8]
 800c59e:	4a37      	ldr	r2, [pc, #220]	; (800c67c <USB_SetTurnaroundTime+0x128>)
 800c5a0:	4293      	cmp	r3, r2
 800c5a2:	d802      	bhi.n	800c5aa <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 800c5a4:	230d      	movs	r3, #13
 800c5a6:	617b      	str	r3, [r7, #20]
 800c5a8:	e04c      	b.n	800c644 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 800c5aa:	68bb      	ldr	r3, [r7, #8]
 800c5ac:	4a33      	ldr	r2, [pc, #204]	; (800c67c <USB_SetTurnaroundTime+0x128>)
 800c5ae:	4293      	cmp	r3, r2
 800c5b0:	d906      	bls.n	800c5c0 <USB_SetTurnaroundTime+0x6c>
 800c5b2:	68bb      	ldr	r3, [r7, #8]
 800c5b4:	4a32      	ldr	r2, [pc, #200]	; (800c680 <USB_SetTurnaroundTime+0x12c>)
 800c5b6:	4293      	cmp	r3, r2
 800c5b8:	d802      	bhi.n	800c5c0 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 800c5ba:	230c      	movs	r3, #12
 800c5bc:	617b      	str	r3, [r7, #20]
 800c5be:	e041      	b.n	800c644 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 800c5c0:	68bb      	ldr	r3, [r7, #8]
 800c5c2:	4a2f      	ldr	r2, [pc, #188]	; (800c680 <USB_SetTurnaroundTime+0x12c>)
 800c5c4:	4293      	cmp	r3, r2
 800c5c6:	d906      	bls.n	800c5d6 <USB_SetTurnaroundTime+0x82>
 800c5c8:	68bb      	ldr	r3, [r7, #8]
 800c5ca:	4a2e      	ldr	r2, [pc, #184]	; (800c684 <USB_SetTurnaroundTime+0x130>)
 800c5cc:	4293      	cmp	r3, r2
 800c5ce:	d802      	bhi.n	800c5d6 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 800c5d0:	230b      	movs	r3, #11
 800c5d2:	617b      	str	r3, [r7, #20]
 800c5d4:	e036      	b.n	800c644 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 800c5d6:	68bb      	ldr	r3, [r7, #8]
 800c5d8:	4a2a      	ldr	r2, [pc, #168]	; (800c684 <USB_SetTurnaroundTime+0x130>)
 800c5da:	4293      	cmp	r3, r2
 800c5dc:	d906      	bls.n	800c5ec <USB_SetTurnaroundTime+0x98>
 800c5de:	68bb      	ldr	r3, [r7, #8]
 800c5e0:	4a29      	ldr	r2, [pc, #164]	; (800c688 <USB_SetTurnaroundTime+0x134>)
 800c5e2:	4293      	cmp	r3, r2
 800c5e4:	d802      	bhi.n	800c5ec <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 800c5e6:	230a      	movs	r3, #10
 800c5e8:	617b      	str	r3, [r7, #20]
 800c5ea:	e02b      	b.n	800c644 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 800c5ec:	68bb      	ldr	r3, [r7, #8]
 800c5ee:	4a26      	ldr	r2, [pc, #152]	; (800c688 <USB_SetTurnaroundTime+0x134>)
 800c5f0:	4293      	cmp	r3, r2
 800c5f2:	d906      	bls.n	800c602 <USB_SetTurnaroundTime+0xae>
 800c5f4:	68bb      	ldr	r3, [r7, #8]
 800c5f6:	4a25      	ldr	r2, [pc, #148]	; (800c68c <USB_SetTurnaroundTime+0x138>)
 800c5f8:	4293      	cmp	r3, r2
 800c5fa:	d802      	bhi.n	800c602 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 800c5fc:	2309      	movs	r3, #9
 800c5fe:	617b      	str	r3, [r7, #20]
 800c600:	e020      	b.n	800c644 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 800c602:	68bb      	ldr	r3, [r7, #8]
 800c604:	4a21      	ldr	r2, [pc, #132]	; (800c68c <USB_SetTurnaroundTime+0x138>)
 800c606:	4293      	cmp	r3, r2
 800c608:	d906      	bls.n	800c618 <USB_SetTurnaroundTime+0xc4>
 800c60a:	68bb      	ldr	r3, [r7, #8]
 800c60c:	4a20      	ldr	r2, [pc, #128]	; (800c690 <USB_SetTurnaroundTime+0x13c>)
 800c60e:	4293      	cmp	r3, r2
 800c610:	d802      	bhi.n	800c618 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 800c612:	2308      	movs	r3, #8
 800c614:	617b      	str	r3, [r7, #20]
 800c616:	e015      	b.n	800c644 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 800c618:	68bb      	ldr	r3, [r7, #8]
 800c61a:	4a1d      	ldr	r2, [pc, #116]	; (800c690 <USB_SetTurnaroundTime+0x13c>)
 800c61c:	4293      	cmp	r3, r2
 800c61e:	d906      	bls.n	800c62e <USB_SetTurnaroundTime+0xda>
 800c620:	68bb      	ldr	r3, [r7, #8]
 800c622:	4a1c      	ldr	r2, [pc, #112]	; (800c694 <USB_SetTurnaroundTime+0x140>)
 800c624:	4293      	cmp	r3, r2
 800c626:	d802      	bhi.n	800c62e <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 800c628:	2307      	movs	r3, #7
 800c62a:	617b      	str	r3, [r7, #20]
 800c62c:	e00a      	b.n	800c644 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 800c62e:	2306      	movs	r3, #6
 800c630:	617b      	str	r3, [r7, #20]
 800c632:	e007      	b.n	800c644 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 800c634:	79fb      	ldrb	r3, [r7, #7]
 800c636:	2b00      	cmp	r3, #0
 800c638:	d102      	bne.n	800c640 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 800c63a:	2309      	movs	r3, #9
 800c63c:	617b      	str	r3, [r7, #20]
 800c63e:	e001      	b.n	800c644 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 800c640:	2309      	movs	r3, #9
 800c642:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 800c644:	68fb      	ldr	r3, [r7, #12]
 800c646:	68db      	ldr	r3, [r3, #12]
 800c648:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 800c64c:	68fb      	ldr	r3, [r7, #12]
 800c64e:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 800c650:	68fb      	ldr	r3, [r7, #12]
 800c652:	68da      	ldr	r2, [r3, #12]
 800c654:	697b      	ldr	r3, [r7, #20]
 800c656:	029b      	lsls	r3, r3, #10
 800c658:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 800c65c:	431a      	orrs	r2, r3
 800c65e:	68fb      	ldr	r3, [r7, #12]
 800c660:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800c662:	2300      	movs	r3, #0
}
 800c664:	4618      	mov	r0, r3
 800c666:	371c      	adds	r7, #28
 800c668:	46bd      	mov	sp, r7
 800c66a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c66e:	4770      	bx	lr
 800c670:	00d8acbf 	.word	0x00d8acbf
 800c674:	00e4e1bf 	.word	0x00e4e1bf
 800c678:	00f423ff 	.word	0x00f423ff
 800c67c:	0106737f 	.word	0x0106737f
 800c680:	011a499f 	.word	0x011a499f
 800c684:	01312cff 	.word	0x01312cff
 800c688:	014ca43f 	.word	0x014ca43f
 800c68c:	016e35ff 	.word	0x016e35ff
 800c690:	01a6ab1f 	.word	0x01a6ab1f
 800c694:	01e847ff 	.word	0x01e847ff

0800c698 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800c698:	b480      	push	{r7}
 800c69a:	b083      	sub	sp, #12
 800c69c:	af00      	add	r7, sp, #0
 800c69e:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800c6a0:	687b      	ldr	r3, [r7, #4]
 800c6a2:	689b      	ldr	r3, [r3, #8]
 800c6a4:	f043 0201 	orr.w	r2, r3, #1
 800c6a8:	687b      	ldr	r3, [r7, #4]
 800c6aa:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800c6ac:	2300      	movs	r3, #0
}
 800c6ae:	4618      	mov	r0, r3
 800c6b0:	370c      	adds	r7, #12
 800c6b2:	46bd      	mov	sp, r7
 800c6b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6b8:	4770      	bx	lr

0800c6ba <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800c6ba:	b480      	push	{r7}
 800c6bc:	b083      	sub	sp, #12
 800c6be:	af00      	add	r7, sp, #0
 800c6c0:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800c6c2:	687b      	ldr	r3, [r7, #4]
 800c6c4:	689b      	ldr	r3, [r3, #8]
 800c6c6:	f023 0201 	bic.w	r2, r3, #1
 800c6ca:	687b      	ldr	r3, [r7, #4]
 800c6cc:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800c6ce:	2300      	movs	r3, #0
}
 800c6d0:	4618      	mov	r0, r3
 800c6d2:	370c      	adds	r7, #12
 800c6d4:	46bd      	mov	sp, r7
 800c6d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6da:	4770      	bx	lr

0800c6dc <USB_SetCurrentMode>:
  *            @arg USB_HOST_MODE: Host mode
  *            @arg USB_DRD_MODE: Dual Role Device mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800c6dc:	b580      	push	{r7, lr}
 800c6de:	b082      	sub	sp, #8
 800c6e0:	af00      	add	r7, sp, #0
 800c6e2:	6078      	str	r0, [r7, #4]
 800c6e4:	460b      	mov	r3, r1
 800c6e6:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800c6e8:	687b      	ldr	r3, [r7, #4]
 800c6ea:	68db      	ldr	r3, [r3, #12]
 800c6ec:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800c6f0:	687b      	ldr	r3, [r7, #4]
 800c6f2:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800c6f4:	78fb      	ldrb	r3, [r7, #3]
 800c6f6:	2b01      	cmp	r3, #1
 800c6f8:	d106      	bne.n	800c708 <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800c6fa:	687b      	ldr	r3, [r7, #4]
 800c6fc:	68db      	ldr	r3, [r3, #12]
 800c6fe:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800c702:	687b      	ldr	r3, [r7, #4]
 800c704:	60da      	str	r2, [r3, #12]
 800c706:	e00b      	b.n	800c720 <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 800c708:	78fb      	ldrb	r3, [r7, #3]
 800c70a:	2b00      	cmp	r3, #0
 800c70c:	d106      	bne.n	800c71c <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800c70e:	687b      	ldr	r3, [r7, #4]
 800c710:	68db      	ldr	r3, [r3, #12]
 800c712:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800c716:	687b      	ldr	r3, [r7, #4]
 800c718:	60da      	str	r2, [r3, #12]
 800c71a:	e001      	b.n	800c720 <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 800c71c:	2301      	movs	r3, #1
 800c71e:	e003      	b.n	800c728 <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 800c720:	2032      	movs	r0, #50	; 0x32
 800c722:	f7f5 f959 	bl	80019d8 <HAL_Delay>

  return HAL_OK;
 800c726:	2300      	movs	r3, #0
}
 800c728:	4618      	mov	r0, r3
 800c72a:	3708      	adds	r7, #8
 800c72c:	46bd      	mov	sp, r7
 800c72e:	bd80      	pop	{r7, pc}

0800c730 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800c730:	b084      	sub	sp, #16
 800c732:	b580      	push	{r7, lr}
 800c734:	b086      	sub	sp, #24
 800c736:	af00      	add	r7, sp, #0
 800c738:	6078      	str	r0, [r7, #4]
 800c73a:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800c73e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800c742:	2300      	movs	r3, #0
 800c744:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c746:	687b      	ldr	r3, [r7, #4]
 800c748:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800c74a:	2300      	movs	r3, #0
 800c74c:	613b      	str	r3, [r7, #16]
 800c74e:	e009      	b.n	800c764 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800c750:	687a      	ldr	r2, [r7, #4]
 800c752:	693b      	ldr	r3, [r7, #16]
 800c754:	3340      	adds	r3, #64	; 0x40
 800c756:	009b      	lsls	r3, r3, #2
 800c758:	4413      	add	r3, r2
 800c75a:	2200      	movs	r2, #0
 800c75c:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800c75e:	693b      	ldr	r3, [r7, #16]
 800c760:	3301      	adds	r3, #1
 800c762:	613b      	str	r3, [r7, #16]
 800c764:	693b      	ldr	r3, [r7, #16]
 800c766:	2b0e      	cmp	r3, #14
 800c768:	d9f2      	bls.n	800c750 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800c76a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c76c:	2b00      	cmp	r3, #0
 800c76e:	d11c      	bne.n	800c7aa <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800c770:	68fb      	ldr	r3, [r7, #12]
 800c772:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c776:	685b      	ldr	r3, [r3, #4]
 800c778:	68fa      	ldr	r2, [r7, #12]
 800c77a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800c77e:	f043 0302 	orr.w	r3, r3, #2
 800c782:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 800c784:	687b      	ldr	r3, [r7, #4]
 800c786:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c788:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800c78c:	687b      	ldr	r3, [r7, #4]
 800c78e:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 800c790:	687b      	ldr	r3, [r7, #4]
 800c792:	681b      	ldr	r3, [r3, #0]
 800c794:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800c798:	687b      	ldr	r3, [r7, #4]
 800c79a:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 800c79c:	687b      	ldr	r3, [r7, #4]
 800c79e:	681b      	ldr	r3, [r3, #0]
 800c7a0:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800c7a4:	687b      	ldr	r3, [r7, #4]
 800c7a6:	601a      	str	r2, [r3, #0]
 800c7a8:	e005      	b.n	800c7b6 <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 800c7aa:	687b      	ldr	r3, [r7, #4]
 800c7ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c7ae:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800c7b2:	687b      	ldr	r3, [r7, #4]
 800c7b4:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800c7b6:	68fb      	ldr	r3, [r7, #12]
 800c7b8:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800c7bc:	461a      	mov	r2, r3
 800c7be:	2300      	movs	r3, #0
 800c7c0:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800c7c2:	68fb      	ldr	r3, [r7, #12]
 800c7c4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c7c8:	4619      	mov	r1, r3
 800c7ca:	68fb      	ldr	r3, [r7, #12]
 800c7cc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c7d0:	461a      	mov	r2, r3
 800c7d2:	680b      	ldr	r3, [r1, #0]
 800c7d4:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800c7d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c7d8:	2b01      	cmp	r3, #1
 800c7da:	d10c      	bne.n	800c7f6 <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800c7dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c7de:	2b00      	cmp	r3, #0
 800c7e0:	d104      	bne.n	800c7ec <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800c7e2:	2100      	movs	r1, #0
 800c7e4:	6878      	ldr	r0, [r7, #4]
 800c7e6:	f000 f949 	bl	800ca7c <USB_SetDevSpeed>
 800c7ea:	e008      	b.n	800c7fe <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800c7ec:	2101      	movs	r1, #1
 800c7ee:	6878      	ldr	r0, [r7, #4]
 800c7f0:	f000 f944 	bl	800ca7c <USB_SetDevSpeed>
 800c7f4:	e003      	b.n	800c7fe <USB_DevInit+0xce>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800c7f6:	2103      	movs	r1, #3
 800c7f8:	6878      	ldr	r0, [r7, #4]
 800c7fa:	f000 f93f 	bl	800ca7c <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800c7fe:	2110      	movs	r1, #16
 800c800:	6878      	ldr	r0, [r7, #4]
 800c802:	f000 f8f3 	bl	800c9ec <USB_FlushTxFifo>
 800c806:	4603      	mov	r3, r0
 800c808:	2b00      	cmp	r3, #0
 800c80a:	d001      	beq.n	800c810 <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 800c80c:	2301      	movs	r3, #1
 800c80e:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800c810:	6878      	ldr	r0, [r7, #4]
 800c812:	f000 f911 	bl	800ca38 <USB_FlushRxFifo>
 800c816:	4603      	mov	r3, r0
 800c818:	2b00      	cmp	r3, #0
 800c81a:	d001      	beq.n	800c820 <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 800c81c:	2301      	movs	r3, #1
 800c81e:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800c820:	68fb      	ldr	r3, [r7, #12]
 800c822:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c826:	461a      	mov	r2, r3
 800c828:	2300      	movs	r3, #0
 800c82a:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800c82c:	68fb      	ldr	r3, [r7, #12]
 800c82e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c832:	461a      	mov	r2, r3
 800c834:	2300      	movs	r3, #0
 800c836:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800c838:	68fb      	ldr	r3, [r7, #12]
 800c83a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c83e:	461a      	mov	r2, r3
 800c840:	2300      	movs	r3, #0
 800c842:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800c844:	2300      	movs	r3, #0
 800c846:	613b      	str	r3, [r7, #16]
 800c848:	e043      	b.n	800c8d2 <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800c84a:	693b      	ldr	r3, [r7, #16]
 800c84c:	015a      	lsls	r2, r3, #5
 800c84e:	68fb      	ldr	r3, [r7, #12]
 800c850:	4413      	add	r3, r2
 800c852:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c856:	681b      	ldr	r3, [r3, #0]
 800c858:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800c85c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800c860:	d118      	bne.n	800c894 <USB_DevInit+0x164>
    {
      if (i == 0U)
 800c862:	693b      	ldr	r3, [r7, #16]
 800c864:	2b00      	cmp	r3, #0
 800c866:	d10a      	bne.n	800c87e <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800c868:	693b      	ldr	r3, [r7, #16]
 800c86a:	015a      	lsls	r2, r3, #5
 800c86c:	68fb      	ldr	r3, [r7, #12]
 800c86e:	4413      	add	r3, r2
 800c870:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c874:	461a      	mov	r2, r3
 800c876:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800c87a:	6013      	str	r3, [r2, #0]
 800c87c:	e013      	b.n	800c8a6 <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800c87e:	693b      	ldr	r3, [r7, #16]
 800c880:	015a      	lsls	r2, r3, #5
 800c882:	68fb      	ldr	r3, [r7, #12]
 800c884:	4413      	add	r3, r2
 800c886:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c88a:	461a      	mov	r2, r3
 800c88c:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800c890:	6013      	str	r3, [r2, #0]
 800c892:	e008      	b.n	800c8a6 <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800c894:	693b      	ldr	r3, [r7, #16]
 800c896:	015a      	lsls	r2, r3, #5
 800c898:	68fb      	ldr	r3, [r7, #12]
 800c89a:	4413      	add	r3, r2
 800c89c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c8a0:	461a      	mov	r2, r3
 800c8a2:	2300      	movs	r3, #0
 800c8a4:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800c8a6:	693b      	ldr	r3, [r7, #16]
 800c8a8:	015a      	lsls	r2, r3, #5
 800c8aa:	68fb      	ldr	r3, [r7, #12]
 800c8ac:	4413      	add	r3, r2
 800c8ae:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c8b2:	461a      	mov	r2, r3
 800c8b4:	2300      	movs	r3, #0
 800c8b6:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800c8b8:	693b      	ldr	r3, [r7, #16]
 800c8ba:	015a      	lsls	r2, r3, #5
 800c8bc:	68fb      	ldr	r3, [r7, #12]
 800c8be:	4413      	add	r3, r2
 800c8c0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c8c4:	461a      	mov	r2, r3
 800c8c6:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800c8ca:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800c8cc:	693b      	ldr	r3, [r7, #16]
 800c8ce:	3301      	adds	r3, #1
 800c8d0:	613b      	str	r3, [r7, #16]
 800c8d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c8d4:	693a      	ldr	r2, [r7, #16]
 800c8d6:	429a      	cmp	r2, r3
 800c8d8:	d3b7      	bcc.n	800c84a <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800c8da:	2300      	movs	r3, #0
 800c8dc:	613b      	str	r3, [r7, #16]
 800c8de:	e043      	b.n	800c968 <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800c8e0:	693b      	ldr	r3, [r7, #16]
 800c8e2:	015a      	lsls	r2, r3, #5
 800c8e4:	68fb      	ldr	r3, [r7, #12]
 800c8e6:	4413      	add	r3, r2
 800c8e8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c8ec:	681b      	ldr	r3, [r3, #0]
 800c8ee:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800c8f2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800c8f6:	d118      	bne.n	800c92a <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 800c8f8:	693b      	ldr	r3, [r7, #16]
 800c8fa:	2b00      	cmp	r3, #0
 800c8fc:	d10a      	bne.n	800c914 <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800c8fe:	693b      	ldr	r3, [r7, #16]
 800c900:	015a      	lsls	r2, r3, #5
 800c902:	68fb      	ldr	r3, [r7, #12]
 800c904:	4413      	add	r3, r2
 800c906:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c90a:	461a      	mov	r2, r3
 800c90c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800c910:	6013      	str	r3, [r2, #0]
 800c912:	e013      	b.n	800c93c <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800c914:	693b      	ldr	r3, [r7, #16]
 800c916:	015a      	lsls	r2, r3, #5
 800c918:	68fb      	ldr	r3, [r7, #12]
 800c91a:	4413      	add	r3, r2
 800c91c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c920:	461a      	mov	r2, r3
 800c922:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800c926:	6013      	str	r3, [r2, #0]
 800c928:	e008      	b.n	800c93c <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800c92a:	693b      	ldr	r3, [r7, #16]
 800c92c:	015a      	lsls	r2, r3, #5
 800c92e:	68fb      	ldr	r3, [r7, #12]
 800c930:	4413      	add	r3, r2
 800c932:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c936:	461a      	mov	r2, r3
 800c938:	2300      	movs	r3, #0
 800c93a:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800c93c:	693b      	ldr	r3, [r7, #16]
 800c93e:	015a      	lsls	r2, r3, #5
 800c940:	68fb      	ldr	r3, [r7, #12]
 800c942:	4413      	add	r3, r2
 800c944:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c948:	461a      	mov	r2, r3
 800c94a:	2300      	movs	r3, #0
 800c94c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800c94e:	693b      	ldr	r3, [r7, #16]
 800c950:	015a      	lsls	r2, r3, #5
 800c952:	68fb      	ldr	r3, [r7, #12]
 800c954:	4413      	add	r3, r2
 800c956:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c95a:	461a      	mov	r2, r3
 800c95c:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800c960:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800c962:	693b      	ldr	r3, [r7, #16]
 800c964:	3301      	adds	r3, #1
 800c966:	613b      	str	r3, [r7, #16]
 800c968:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c96a:	693a      	ldr	r2, [r7, #16]
 800c96c:	429a      	cmp	r2, r3
 800c96e:	d3b7      	bcc.n	800c8e0 <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800c970:	68fb      	ldr	r3, [r7, #12]
 800c972:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c976:	691b      	ldr	r3, [r3, #16]
 800c978:	68fa      	ldr	r2, [r7, #12]
 800c97a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800c97e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800c982:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800c984:	687b      	ldr	r3, [r7, #4]
 800c986:	2200      	movs	r2, #0
 800c988:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800c98a:	687b      	ldr	r3, [r7, #4]
 800c98c:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 800c990:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800c992:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c994:	2b00      	cmp	r3, #0
 800c996:	d105      	bne.n	800c9a4 <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800c998:	687b      	ldr	r3, [r7, #4]
 800c99a:	699b      	ldr	r3, [r3, #24]
 800c99c:	f043 0210 	orr.w	r2, r3, #16
 800c9a0:	687b      	ldr	r3, [r7, #4]
 800c9a2:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800c9a4:	687b      	ldr	r3, [r7, #4]
 800c9a6:	699a      	ldr	r2, [r3, #24]
 800c9a8:	4b0e      	ldr	r3, [pc, #56]	; (800c9e4 <USB_DevInit+0x2b4>)
 800c9aa:	4313      	orrs	r3, r2
 800c9ac:	687a      	ldr	r2, [r7, #4]
 800c9ae:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800c9b0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c9b2:	2b00      	cmp	r3, #0
 800c9b4:	d005      	beq.n	800c9c2 <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800c9b6:	687b      	ldr	r3, [r7, #4]
 800c9b8:	699b      	ldr	r3, [r3, #24]
 800c9ba:	f043 0208 	orr.w	r2, r3, #8
 800c9be:	687b      	ldr	r3, [r7, #4]
 800c9c0:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800c9c2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c9c4:	2b01      	cmp	r3, #1
 800c9c6:	d105      	bne.n	800c9d4 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800c9c8:	687b      	ldr	r3, [r7, #4]
 800c9ca:	699a      	ldr	r2, [r3, #24]
 800c9cc:	4b06      	ldr	r3, [pc, #24]	; (800c9e8 <USB_DevInit+0x2b8>)
 800c9ce:	4313      	orrs	r3, r2
 800c9d0:	687a      	ldr	r2, [r7, #4]
 800c9d2:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800c9d4:	7dfb      	ldrb	r3, [r7, #23]
}
 800c9d6:	4618      	mov	r0, r3
 800c9d8:	3718      	adds	r7, #24
 800c9da:	46bd      	mov	sp, r7
 800c9dc:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800c9e0:	b004      	add	sp, #16
 800c9e2:	4770      	bx	lr
 800c9e4:	803c3800 	.word	0x803c3800
 800c9e8:	40000004 	.word	0x40000004

0800c9ec <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800c9ec:	b480      	push	{r7}
 800c9ee:	b085      	sub	sp, #20
 800c9f0:	af00      	add	r7, sp, #0
 800c9f2:	6078      	str	r0, [r7, #4]
 800c9f4:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 800c9f6:	2300      	movs	r3, #0
 800c9f8:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800c9fa:	683b      	ldr	r3, [r7, #0]
 800c9fc:	019b      	lsls	r3, r3, #6
 800c9fe:	f043 0220 	orr.w	r2, r3, #32
 800ca02:	687b      	ldr	r3, [r7, #4]
 800ca04:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800ca06:	68fb      	ldr	r3, [r7, #12]
 800ca08:	3301      	adds	r3, #1
 800ca0a:	60fb      	str	r3, [r7, #12]
 800ca0c:	68fb      	ldr	r3, [r7, #12]
 800ca0e:	4a09      	ldr	r2, [pc, #36]	; (800ca34 <USB_FlushTxFifo+0x48>)
 800ca10:	4293      	cmp	r3, r2
 800ca12:	d901      	bls.n	800ca18 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 800ca14:	2303      	movs	r3, #3
 800ca16:	e006      	b.n	800ca26 <USB_FlushTxFifo+0x3a>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800ca18:	687b      	ldr	r3, [r7, #4]
 800ca1a:	691b      	ldr	r3, [r3, #16]
 800ca1c:	f003 0320 	and.w	r3, r3, #32
 800ca20:	2b20      	cmp	r3, #32
 800ca22:	d0f0      	beq.n	800ca06 <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 800ca24:	2300      	movs	r3, #0
}
 800ca26:	4618      	mov	r0, r3
 800ca28:	3714      	adds	r7, #20
 800ca2a:	46bd      	mov	sp, r7
 800ca2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca30:	4770      	bx	lr
 800ca32:	bf00      	nop
 800ca34:	00030d40 	.word	0x00030d40

0800ca38 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800ca38:	b480      	push	{r7}
 800ca3a:	b085      	sub	sp, #20
 800ca3c:	af00      	add	r7, sp, #0
 800ca3e:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 800ca40:	2300      	movs	r3, #0
 800ca42:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800ca44:	687b      	ldr	r3, [r7, #4]
 800ca46:	2210      	movs	r2, #16
 800ca48:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800ca4a:	68fb      	ldr	r3, [r7, #12]
 800ca4c:	3301      	adds	r3, #1
 800ca4e:	60fb      	str	r3, [r7, #12]
 800ca50:	68fb      	ldr	r3, [r7, #12]
 800ca52:	4a09      	ldr	r2, [pc, #36]	; (800ca78 <USB_FlushRxFifo+0x40>)
 800ca54:	4293      	cmp	r3, r2
 800ca56:	d901      	bls.n	800ca5c <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 800ca58:	2303      	movs	r3, #3
 800ca5a:	e006      	b.n	800ca6a <USB_FlushRxFifo+0x32>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800ca5c:	687b      	ldr	r3, [r7, #4]
 800ca5e:	691b      	ldr	r3, [r3, #16]
 800ca60:	f003 0310 	and.w	r3, r3, #16
 800ca64:	2b10      	cmp	r3, #16
 800ca66:	d0f0      	beq.n	800ca4a <USB_FlushRxFifo+0x12>

  return HAL_OK;
 800ca68:	2300      	movs	r3, #0
}
 800ca6a:	4618      	mov	r0, r3
 800ca6c:	3714      	adds	r7, #20
 800ca6e:	46bd      	mov	sp, r7
 800ca70:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca74:	4770      	bx	lr
 800ca76:	bf00      	nop
 800ca78:	00030d40 	.word	0x00030d40

0800ca7c <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800ca7c:	b480      	push	{r7}
 800ca7e:	b085      	sub	sp, #20
 800ca80:	af00      	add	r7, sp, #0
 800ca82:	6078      	str	r0, [r7, #4]
 800ca84:	460b      	mov	r3, r1
 800ca86:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ca88:	687b      	ldr	r3, [r7, #4]
 800ca8a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800ca8c:	68fb      	ldr	r3, [r7, #12]
 800ca8e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ca92:	681a      	ldr	r2, [r3, #0]
 800ca94:	78fb      	ldrb	r3, [r7, #3]
 800ca96:	68f9      	ldr	r1, [r7, #12]
 800ca98:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800ca9c:	4313      	orrs	r3, r2
 800ca9e:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800caa0:	2300      	movs	r3, #0
}
 800caa2:	4618      	mov	r0, r3
 800caa4:	3714      	adds	r7, #20
 800caa6:	46bd      	mov	sp, r7
 800caa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800caac:	4770      	bx	lr

0800caae <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg PCD_SPEED_HIGH: High speed mode
  *            @arg PCD_SPEED_FULL: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 800caae:	b480      	push	{r7}
 800cab0:	b087      	sub	sp, #28
 800cab2:	af00      	add	r7, sp, #0
 800cab4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800cab6:	687b      	ldr	r3, [r7, #4]
 800cab8:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 800caba:	693b      	ldr	r3, [r7, #16]
 800cabc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800cac0:	689b      	ldr	r3, [r3, #8]
 800cac2:	f003 0306 	and.w	r3, r3, #6
 800cac6:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 800cac8:	68fb      	ldr	r3, [r7, #12]
 800caca:	2b00      	cmp	r3, #0
 800cacc:	d102      	bne.n	800cad4 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 800cace:	2300      	movs	r3, #0
 800cad0:	75fb      	strb	r3, [r7, #23]
 800cad2:	e00a      	b.n	800caea <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 800cad4:	68fb      	ldr	r3, [r7, #12]
 800cad6:	2b02      	cmp	r3, #2
 800cad8:	d002      	beq.n	800cae0 <USB_GetDevSpeed+0x32>
 800cada:	68fb      	ldr	r3, [r7, #12]
 800cadc:	2b06      	cmp	r3, #6
 800cade:	d102      	bne.n	800cae6 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 800cae0:	2302      	movs	r3, #2
 800cae2:	75fb      	strb	r3, [r7, #23]
 800cae4:	e001      	b.n	800caea <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 800cae6:	230f      	movs	r3, #15
 800cae8:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 800caea:	7dfb      	ldrb	r3, [r7, #23]
}
 800caec:	4618      	mov	r0, r3
 800caee:	371c      	adds	r7, #28
 800caf0:	46bd      	mov	sp, r7
 800caf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800caf6:	4770      	bx	lr

0800caf8 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800caf8:	b480      	push	{r7}
 800cafa:	b085      	sub	sp, #20
 800cafc:	af00      	add	r7, sp, #0
 800cafe:	6078      	str	r0, [r7, #4]
 800cb00:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800cb02:	687b      	ldr	r3, [r7, #4]
 800cb04:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800cb06:	683b      	ldr	r3, [r7, #0]
 800cb08:	781b      	ldrb	r3, [r3, #0]
 800cb0a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800cb0c:	683b      	ldr	r3, [r7, #0]
 800cb0e:	785b      	ldrb	r3, [r3, #1]
 800cb10:	2b01      	cmp	r3, #1
 800cb12:	d139      	bne.n	800cb88 <USB_ActivateEndpoint+0x90>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 800cb14:	68fb      	ldr	r3, [r7, #12]
 800cb16:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800cb1a:	69da      	ldr	r2, [r3, #28]
 800cb1c:	683b      	ldr	r3, [r7, #0]
 800cb1e:	781b      	ldrb	r3, [r3, #0]
 800cb20:	f003 030f 	and.w	r3, r3, #15
 800cb24:	2101      	movs	r1, #1
 800cb26:	fa01 f303 	lsl.w	r3, r1, r3
 800cb2a:	b29b      	uxth	r3, r3
 800cb2c:	68f9      	ldr	r1, [r7, #12]
 800cb2e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800cb32:	4313      	orrs	r3, r2
 800cb34:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 800cb36:	68bb      	ldr	r3, [r7, #8]
 800cb38:	015a      	lsls	r2, r3, #5
 800cb3a:	68fb      	ldr	r3, [r7, #12]
 800cb3c:	4413      	add	r3, r2
 800cb3e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800cb42:	681b      	ldr	r3, [r3, #0]
 800cb44:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800cb48:	2b00      	cmp	r3, #0
 800cb4a:	d153      	bne.n	800cbf4 <USB_ActivateEndpoint+0xfc>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800cb4c:	68bb      	ldr	r3, [r7, #8]
 800cb4e:	015a      	lsls	r2, r3, #5
 800cb50:	68fb      	ldr	r3, [r7, #12]
 800cb52:	4413      	add	r3, r2
 800cb54:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800cb58:	681a      	ldr	r2, [r3, #0]
 800cb5a:	683b      	ldr	r3, [r7, #0]
 800cb5c:	689b      	ldr	r3, [r3, #8]
 800cb5e:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800cb62:	683b      	ldr	r3, [r7, #0]
 800cb64:	78db      	ldrb	r3, [r3, #3]
 800cb66:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800cb68:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800cb6a:	68bb      	ldr	r3, [r7, #8]
 800cb6c:	059b      	lsls	r3, r3, #22
 800cb6e:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800cb70:	431a      	orrs	r2, r3
 800cb72:	68bb      	ldr	r3, [r7, #8]
 800cb74:	0159      	lsls	r1, r3, #5
 800cb76:	68fb      	ldr	r3, [r7, #12]
 800cb78:	440b      	add	r3, r1
 800cb7a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800cb7e:	4619      	mov	r1, r3
 800cb80:	4b20      	ldr	r3, [pc, #128]	; (800cc04 <USB_ActivateEndpoint+0x10c>)
 800cb82:	4313      	orrs	r3, r2
 800cb84:	600b      	str	r3, [r1, #0]
 800cb86:	e035      	b.n	800cbf4 <USB_ActivateEndpoint+0xfc>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 800cb88:	68fb      	ldr	r3, [r7, #12]
 800cb8a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800cb8e:	69da      	ldr	r2, [r3, #28]
 800cb90:	683b      	ldr	r3, [r7, #0]
 800cb92:	781b      	ldrb	r3, [r3, #0]
 800cb94:	f003 030f 	and.w	r3, r3, #15
 800cb98:	2101      	movs	r1, #1
 800cb9a:	fa01 f303 	lsl.w	r3, r1, r3
 800cb9e:	041b      	lsls	r3, r3, #16
 800cba0:	68f9      	ldr	r1, [r7, #12]
 800cba2:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800cba6:	4313      	orrs	r3, r2
 800cba8:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 800cbaa:	68bb      	ldr	r3, [r7, #8]
 800cbac:	015a      	lsls	r2, r3, #5
 800cbae:	68fb      	ldr	r3, [r7, #12]
 800cbb0:	4413      	add	r3, r2
 800cbb2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800cbb6:	681b      	ldr	r3, [r3, #0]
 800cbb8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800cbbc:	2b00      	cmp	r3, #0
 800cbbe:	d119      	bne.n	800cbf4 <USB_ActivateEndpoint+0xfc>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800cbc0:	68bb      	ldr	r3, [r7, #8]
 800cbc2:	015a      	lsls	r2, r3, #5
 800cbc4:	68fb      	ldr	r3, [r7, #12]
 800cbc6:	4413      	add	r3, r2
 800cbc8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800cbcc:	681a      	ldr	r2, [r3, #0]
 800cbce:	683b      	ldr	r3, [r7, #0]
 800cbd0:	689b      	ldr	r3, [r3, #8]
 800cbd2:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 800cbd6:	683b      	ldr	r3, [r7, #0]
 800cbd8:	78db      	ldrb	r3, [r3, #3]
 800cbda:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800cbdc:	430b      	orrs	r3, r1
 800cbde:	431a      	orrs	r2, r3
 800cbe0:	68bb      	ldr	r3, [r7, #8]
 800cbe2:	0159      	lsls	r1, r3, #5
 800cbe4:	68fb      	ldr	r3, [r7, #12]
 800cbe6:	440b      	add	r3, r1
 800cbe8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800cbec:	4619      	mov	r1, r3
 800cbee:	4b05      	ldr	r3, [pc, #20]	; (800cc04 <USB_ActivateEndpoint+0x10c>)
 800cbf0:	4313      	orrs	r3, r2
 800cbf2:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 800cbf4:	2300      	movs	r3, #0
}
 800cbf6:	4618      	mov	r0, r3
 800cbf8:	3714      	adds	r7, #20
 800cbfa:	46bd      	mov	sp, r7
 800cbfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc00:	4770      	bx	lr
 800cc02:	bf00      	nop
 800cc04:	10008000 	.word	0x10008000

0800cc08 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800cc08:	b480      	push	{r7}
 800cc0a:	b085      	sub	sp, #20
 800cc0c:	af00      	add	r7, sp, #0
 800cc0e:	6078      	str	r0, [r7, #4]
 800cc10:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800cc12:	687b      	ldr	r3, [r7, #4]
 800cc14:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800cc16:	683b      	ldr	r3, [r7, #0]
 800cc18:	781b      	ldrb	r3, [r3, #0]
 800cc1a:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 800cc1c:	683b      	ldr	r3, [r7, #0]
 800cc1e:	785b      	ldrb	r3, [r3, #1]
 800cc20:	2b01      	cmp	r3, #1
 800cc22:	d161      	bne.n	800cce8 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800cc24:	68bb      	ldr	r3, [r7, #8]
 800cc26:	015a      	lsls	r2, r3, #5
 800cc28:	68fb      	ldr	r3, [r7, #12]
 800cc2a:	4413      	add	r3, r2
 800cc2c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800cc30:	681b      	ldr	r3, [r3, #0]
 800cc32:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800cc36:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800cc3a:	d11f      	bne.n	800cc7c <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 800cc3c:	68bb      	ldr	r3, [r7, #8]
 800cc3e:	015a      	lsls	r2, r3, #5
 800cc40:	68fb      	ldr	r3, [r7, #12]
 800cc42:	4413      	add	r3, r2
 800cc44:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800cc48:	681b      	ldr	r3, [r3, #0]
 800cc4a:	68ba      	ldr	r2, [r7, #8]
 800cc4c:	0151      	lsls	r1, r2, #5
 800cc4e:	68fa      	ldr	r2, [r7, #12]
 800cc50:	440a      	add	r2, r1
 800cc52:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800cc56:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800cc5a:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 800cc5c:	68bb      	ldr	r3, [r7, #8]
 800cc5e:	015a      	lsls	r2, r3, #5
 800cc60:	68fb      	ldr	r3, [r7, #12]
 800cc62:	4413      	add	r3, r2
 800cc64:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800cc68:	681b      	ldr	r3, [r3, #0]
 800cc6a:	68ba      	ldr	r2, [r7, #8]
 800cc6c:	0151      	lsls	r1, r2, #5
 800cc6e:	68fa      	ldr	r2, [r7, #12]
 800cc70:	440a      	add	r2, r1
 800cc72:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800cc76:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800cc7a:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800cc7c:	68fb      	ldr	r3, [r7, #12]
 800cc7e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800cc82:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800cc84:	683b      	ldr	r3, [r7, #0]
 800cc86:	781b      	ldrb	r3, [r3, #0]
 800cc88:	f003 030f 	and.w	r3, r3, #15
 800cc8c:	2101      	movs	r1, #1
 800cc8e:	fa01 f303 	lsl.w	r3, r1, r3
 800cc92:	b29b      	uxth	r3, r3
 800cc94:	43db      	mvns	r3, r3
 800cc96:	68f9      	ldr	r1, [r7, #12]
 800cc98:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800cc9c:	4013      	ands	r3, r2
 800cc9e:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800cca0:	68fb      	ldr	r3, [r7, #12]
 800cca2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800cca6:	69da      	ldr	r2, [r3, #28]
 800cca8:	683b      	ldr	r3, [r7, #0]
 800ccaa:	781b      	ldrb	r3, [r3, #0]
 800ccac:	f003 030f 	and.w	r3, r3, #15
 800ccb0:	2101      	movs	r1, #1
 800ccb2:	fa01 f303 	lsl.w	r3, r1, r3
 800ccb6:	b29b      	uxth	r3, r3
 800ccb8:	43db      	mvns	r3, r3
 800ccba:	68f9      	ldr	r1, [r7, #12]
 800ccbc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800ccc0:	4013      	ands	r3, r2
 800ccc2:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 800ccc4:	68bb      	ldr	r3, [r7, #8]
 800ccc6:	015a      	lsls	r2, r3, #5
 800ccc8:	68fb      	ldr	r3, [r7, #12]
 800ccca:	4413      	add	r3, r2
 800cccc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ccd0:	681a      	ldr	r2, [r3, #0]
 800ccd2:	68bb      	ldr	r3, [r7, #8]
 800ccd4:	0159      	lsls	r1, r3, #5
 800ccd6:	68fb      	ldr	r3, [r7, #12]
 800ccd8:	440b      	add	r3, r1
 800ccda:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ccde:	4619      	mov	r1, r3
 800cce0:	4b35      	ldr	r3, [pc, #212]	; (800cdb8 <USB_DeactivateEndpoint+0x1b0>)
 800cce2:	4013      	ands	r3, r2
 800cce4:	600b      	str	r3, [r1, #0]
 800cce6:	e060      	b.n	800cdaa <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800cce8:	68bb      	ldr	r3, [r7, #8]
 800ccea:	015a      	lsls	r2, r3, #5
 800ccec:	68fb      	ldr	r3, [r7, #12]
 800ccee:	4413      	add	r3, r2
 800ccf0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ccf4:	681b      	ldr	r3, [r3, #0]
 800ccf6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800ccfa:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800ccfe:	d11f      	bne.n	800cd40 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800cd00:	68bb      	ldr	r3, [r7, #8]
 800cd02:	015a      	lsls	r2, r3, #5
 800cd04:	68fb      	ldr	r3, [r7, #12]
 800cd06:	4413      	add	r3, r2
 800cd08:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800cd0c:	681b      	ldr	r3, [r3, #0]
 800cd0e:	68ba      	ldr	r2, [r7, #8]
 800cd10:	0151      	lsls	r1, r2, #5
 800cd12:	68fa      	ldr	r2, [r7, #12]
 800cd14:	440a      	add	r2, r1
 800cd16:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800cd1a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800cd1e:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 800cd20:	68bb      	ldr	r3, [r7, #8]
 800cd22:	015a      	lsls	r2, r3, #5
 800cd24:	68fb      	ldr	r3, [r7, #12]
 800cd26:	4413      	add	r3, r2
 800cd28:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800cd2c:	681b      	ldr	r3, [r3, #0]
 800cd2e:	68ba      	ldr	r2, [r7, #8]
 800cd30:	0151      	lsls	r1, r2, #5
 800cd32:	68fa      	ldr	r2, [r7, #12]
 800cd34:	440a      	add	r2, r1
 800cd36:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800cd3a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800cd3e:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800cd40:	68fb      	ldr	r3, [r7, #12]
 800cd42:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800cd46:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800cd48:	683b      	ldr	r3, [r7, #0]
 800cd4a:	781b      	ldrb	r3, [r3, #0]
 800cd4c:	f003 030f 	and.w	r3, r3, #15
 800cd50:	2101      	movs	r1, #1
 800cd52:	fa01 f303 	lsl.w	r3, r1, r3
 800cd56:	041b      	lsls	r3, r3, #16
 800cd58:	43db      	mvns	r3, r3
 800cd5a:	68f9      	ldr	r1, [r7, #12]
 800cd5c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800cd60:	4013      	ands	r3, r2
 800cd62:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800cd64:	68fb      	ldr	r3, [r7, #12]
 800cd66:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800cd6a:	69da      	ldr	r2, [r3, #28]
 800cd6c:	683b      	ldr	r3, [r7, #0]
 800cd6e:	781b      	ldrb	r3, [r3, #0]
 800cd70:	f003 030f 	and.w	r3, r3, #15
 800cd74:	2101      	movs	r1, #1
 800cd76:	fa01 f303 	lsl.w	r3, r1, r3
 800cd7a:	041b      	lsls	r3, r3, #16
 800cd7c:	43db      	mvns	r3, r3
 800cd7e:	68f9      	ldr	r1, [r7, #12]
 800cd80:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800cd84:	4013      	ands	r3, r2
 800cd86:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 800cd88:	68bb      	ldr	r3, [r7, #8]
 800cd8a:	015a      	lsls	r2, r3, #5
 800cd8c:	68fb      	ldr	r3, [r7, #12]
 800cd8e:	4413      	add	r3, r2
 800cd90:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800cd94:	681a      	ldr	r2, [r3, #0]
 800cd96:	68bb      	ldr	r3, [r7, #8]
 800cd98:	0159      	lsls	r1, r3, #5
 800cd9a:	68fb      	ldr	r3, [r7, #12]
 800cd9c:	440b      	add	r3, r1
 800cd9e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800cda2:	4619      	mov	r1, r3
 800cda4:	4b05      	ldr	r3, [pc, #20]	; (800cdbc <USB_DeactivateEndpoint+0x1b4>)
 800cda6:	4013      	ands	r3, r2
 800cda8:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 800cdaa:	2300      	movs	r3, #0
}
 800cdac:	4618      	mov	r0, r3
 800cdae:	3714      	adds	r7, #20
 800cdb0:	46bd      	mov	sp, r7
 800cdb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cdb6:	4770      	bx	lr
 800cdb8:	ec337800 	.word	0xec337800
 800cdbc:	eff37800 	.word	0xeff37800

0800cdc0 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800cdc0:	b580      	push	{r7, lr}
 800cdc2:	b08a      	sub	sp, #40	; 0x28
 800cdc4:	af02      	add	r7, sp, #8
 800cdc6:	60f8      	str	r0, [r7, #12]
 800cdc8:	60b9      	str	r1, [r7, #8]
 800cdca:	4613      	mov	r3, r2
 800cdcc:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800cdce:	68fb      	ldr	r3, [r7, #12]
 800cdd0:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 800cdd2:	68bb      	ldr	r3, [r7, #8]
 800cdd4:	781b      	ldrb	r3, [r3, #0]
 800cdd6:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 800cdd8:	68bb      	ldr	r3, [r7, #8]
 800cdda:	785b      	ldrb	r3, [r3, #1]
 800cddc:	2b01      	cmp	r3, #1
 800cdde:	f040 8163 	bne.w	800d0a8 <USB_EPStartXfer+0x2e8>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800cde2:	68bb      	ldr	r3, [r7, #8]
 800cde4:	695b      	ldr	r3, [r3, #20]
 800cde6:	2b00      	cmp	r3, #0
 800cde8:	d132      	bne.n	800ce50 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800cdea:	69bb      	ldr	r3, [r7, #24]
 800cdec:	015a      	lsls	r2, r3, #5
 800cdee:	69fb      	ldr	r3, [r7, #28]
 800cdf0:	4413      	add	r3, r2
 800cdf2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800cdf6:	691a      	ldr	r2, [r3, #16]
 800cdf8:	69bb      	ldr	r3, [r7, #24]
 800cdfa:	0159      	lsls	r1, r3, #5
 800cdfc:	69fb      	ldr	r3, [r7, #28]
 800cdfe:	440b      	add	r3, r1
 800ce00:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ce04:	4619      	mov	r1, r3
 800ce06:	4ba5      	ldr	r3, [pc, #660]	; (800d09c <USB_EPStartXfer+0x2dc>)
 800ce08:	4013      	ands	r3, r2
 800ce0a:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800ce0c:	69bb      	ldr	r3, [r7, #24]
 800ce0e:	015a      	lsls	r2, r3, #5
 800ce10:	69fb      	ldr	r3, [r7, #28]
 800ce12:	4413      	add	r3, r2
 800ce14:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ce18:	691b      	ldr	r3, [r3, #16]
 800ce1a:	69ba      	ldr	r2, [r7, #24]
 800ce1c:	0151      	lsls	r1, r2, #5
 800ce1e:	69fa      	ldr	r2, [r7, #28]
 800ce20:	440a      	add	r2, r1
 800ce22:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ce26:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800ce2a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800ce2c:	69bb      	ldr	r3, [r7, #24]
 800ce2e:	015a      	lsls	r2, r3, #5
 800ce30:	69fb      	ldr	r3, [r7, #28]
 800ce32:	4413      	add	r3, r2
 800ce34:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ce38:	691a      	ldr	r2, [r3, #16]
 800ce3a:	69bb      	ldr	r3, [r7, #24]
 800ce3c:	0159      	lsls	r1, r3, #5
 800ce3e:	69fb      	ldr	r3, [r7, #28]
 800ce40:	440b      	add	r3, r1
 800ce42:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ce46:	4619      	mov	r1, r3
 800ce48:	4b95      	ldr	r3, [pc, #596]	; (800d0a0 <USB_EPStartXfer+0x2e0>)
 800ce4a:	4013      	ands	r3, r2
 800ce4c:	610b      	str	r3, [r1, #16]
 800ce4e:	e074      	b.n	800cf3a <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800ce50:	69bb      	ldr	r3, [r7, #24]
 800ce52:	015a      	lsls	r2, r3, #5
 800ce54:	69fb      	ldr	r3, [r7, #28]
 800ce56:	4413      	add	r3, r2
 800ce58:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ce5c:	691a      	ldr	r2, [r3, #16]
 800ce5e:	69bb      	ldr	r3, [r7, #24]
 800ce60:	0159      	lsls	r1, r3, #5
 800ce62:	69fb      	ldr	r3, [r7, #28]
 800ce64:	440b      	add	r3, r1
 800ce66:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ce6a:	4619      	mov	r1, r3
 800ce6c:	4b8c      	ldr	r3, [pc, #560]	; (800d0a0 <USB_EPStartXfer+0x2e0>)
 800ce6e:	4013      	ands	r3, r2
 800ce70:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800ce72:	69bb      	ldr	r3, [r7, #24]
 800ce74:	015a      	lsls	r2, r3, #5
 800ce76:	69fb      	ldr	r3, [r7, #28]
 800ce78:	4413      	add	r3, r2
 800ce7a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ce7e:	691a      	ldr	r2, [r3, #16]
 800ce80:	69bb      	ldr	r3, [r7, #24]
 800ce82:	0159      	lsls	r1, r3, #5
 800ce84:	69fb      	ldr	r3, [r7, #28]
 800ce86:	440b      	add	r3, r1
 800ce88:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ce8c:	4619      	mov	r1, r3
 800ce8e:	4b83      	ldr	r3, [pc, #524]	; (800d09c <USB_EPStartXfer+0x2dc>)
 800ce90:	4013      	ands	r3, r2
 800ce92:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 800ce94:	69bb      	ldr	r3, [r7, #24]
 800ce96:	015a      	lsls	r2, r3, #5
 800ce98:	69fb      	ldr	r3, [r7, #28]
 800ce9a:	4413      	add	r3, r2
 800ce9c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800cea0:	691a      	ldr	r2, [r3, #16]
 800cea2:	68bb      	ldr	r3, [r7, #8]
 800cea4:	6959      	ldr	r1, [r3, #20]
 800cea6:	68bb      	ldr	r3, [r7, #8]
 800cea8:	689b      	ldr	r3, [r3, #8]
 800ceaa:	440b      	add	r3, r1
 800ceac:	1e59      	subs	r1, r3, #1
 800ceae:	68bb      	ldr	r3, [r7, #8]
 800ceb0:	689b      	ldr	r3, [r3, #8]
 800ceb2:	fbb1 f3f3 	udiv	r3, r1, r3
 800ceb6:	04d9      	lsls	r1, r3, #19
 800ceb8:	4b7a      	ldr	r3, [pc, #488]	; (800d0a4 <USB_EPStartXfer+0x2e4>)
 800ceba:	400b      	ands	r3, r1
 800cebc:	69b9      	ldr	r1, [r7, #24]
 800cebe:	0148      	lsls	r0, r1, #5
 800cec0:	69f9      	ldr	r1, [r7, #28]
 800cec2:	4401      	add	r1, r0
 800cec4:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800cec8:	4313      	orrs	r3, r2
 800ceca:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800cecc:	69bb      	ldr	r3, [r7, #24]
 800cece:	015a      	lsls	r2, r3, #5
 800ced0:	69fb      	ldr	r3, [r7, #28]
 800ced2:	4413      	add	r3, r2
 800ced4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ced8:	691a      	ldr	r2, [r3, #16]
 800ceda:	68bb      	ldr	r3, [r7, #8]
 800cedc:	695b      	ldr	r3, [r3, #20]
 800cede:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800cee2:	69b9      	ldr	r1, [r7, #24]
 800cee4:	0148      	lsls	r0, r1, #5
 800cee6:	69f9      	ldr	r1, [r7, #28]
 800cee8:	4401      	add	r1, r0
 800ceea:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800ceee:	4313      	orrs	r3, r2
 800cef0:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 800cef2:	68bb      	ldr	r3, [r7, #8]
 800cef4:	78db      	ldrb	r3, [r3, #3]
 800cef6:	2b01      	cmp	r3, #1
 800cef8:	d11f      	bne.n	800cf3a <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 800cefa:	69bb      	ldr	r3, [r7, #24]
 800cefc:	015a      	lsls	r2, r3, #5
 800cefe:	69fb      	ldr	r3, [r7, #28]
 800cf00:	4413      	add	r3, r2
 800cf02:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800cf06:	691b      	ldr	r3, [r3, #16]
 800cf08:	69ba      	ldr	r2, [r7, #24]
 800cf0a:	0151      	lsls	r1, r2, #5
 800cf0c:	69fa      	ldr	r2, [r7, #28]
 800cf0e:	440a      	add	r2, r1
 800cf10:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800cf14:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 800cf18:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 800cf1a:	69bb      	ldr	r3, [r7, #24]
 800cf1c:	015a      	lsls	r2, r3, #5
 800cf1e:	69fb      	ldr	r3, [r7, #28]
 800cf20:	4413      	add	r3, r2
 800cf22:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800cf26:	691b      	ldr	r3, [r3, #16]
 800cf28:	69ba      	ldr	r2, [r7, #24]
 800cf2a:	0151      	lsls	r1, r2, #5
 800cf2c:	69fa      	ldr	r2, [r7, #28]
 800cf2e:	440a      	add	r2, r1
 800cf30:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800cf34:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800cf38:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 800cf3a:	79fb      	ldrb	r3, [r7, #7]
 800cf3c:	2b01      	cmp	r3, #1
 800cf3e:	d14b      	bne.n	800cfd8 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800cf40:	68bb      	ldr	r3, [r7, #8]
 800cf42:	691b      	ldr	r3, [r3, #16]
 800cf44:	2b00      	cmp	r3, #0
 800cf46:	d009      	beq.n	800cf5c <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800cf48:	69bb      	ldr	r3, [r7, #24]
 800cf4a:	015a      	lsls	r2, r3, #5
 800cf4c:	69fb      	ldr	r3, [r7, #28]
 800cf4e:	4413      	add	r3, r2
 800cf50:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800cf54:	461a      	mov	r2, r3
 800cf56:	68bb      	ldr	r3, [r7, #8]
 800cf58:	691b      	ldr	r3, [r3, #16]
 800cf5a:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 800cf5c:	68bb      	ldr	r3, [r7, #8]
 800cf5e:	78db      	ldrb	r3, [r3, #3]
 800cf60:	2b01      	cmp	r3, #1
 800cf62:	d128      	bne.n	800cfb6 <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800cf64:	69fb      	ldr	r3, [r7, #28]
 800cf66:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800cf6a:	689b      	ldr	r3, [r3, #8]
 800cf6c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800cf70:	2b00      	cmp	r3, #0
 800cf72:	d110      	bne.n	800cf96 <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800cf74:	69bb      	ldr	r3, [r7, #24]
 800cf76:	015a      	lsls	r2, r3, #5
 800cf78:	69fb      	ldr	r3, [r7, #28]
 800cf7a:	4413      	add	r3, r2
 800cf7c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800cf80:	681b      	ldr	r3, [r3, #0]
 800cf82:	69ba      	ldr	r2, [r7, #24]
 800cf84:	0151      	lsls	r1, r2, #5
 800cf86:	69fa      	ldr	r2, [r7, #28]
 800cf88:	440a      	add	r2, r1
 800cf8a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800cf8e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800cf92:	6013      	str	r3, [r2, #0]
 800cf94:	e00f      	b.n	800cfb6 <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800cf96:	69bb      	ldr	r3, [r7, #24]
 800cf98:	015a      	lsls	r2, r3, #5
 800cf9a:	69fb      	ldr	r3, [r7, #28]
 800cf9c:	4413      	add	r3, r2
 800cf9e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800cfa2:	681b      	ldr	r3, [r3, #0]
 800cfa4:	69ba      	ldr	r2, [r7, #24]
 800cfa6:	0151      	lsls	r1, r2, #5
 800cfa8:	69fa      	ldr	r2, [r7, #28]
 800cfaa:	440a      	add	r2, r1
 800cfac:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800cfb0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800cfb4:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800cfb6:	69bb      	ldr	r3, [r7, #24]
 800cfb8:	015a      	lsls	r2, r3, #5
 800cfba:	69fb      	ldr	r3, [r7, #28]
 800cfbc:	4413      	add	r3, r2
 800cfbe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800cfc2:	681b      	ldr	r3, [r3, #0]
 800cfc4:	69ba      	ldr	r2, [r7, #24]
 800cfc6:	0151      	lsls	r1, r2, #5
 800cfc8:	69fa      	ldr	r2, [r7, #28]
 800cfca:	440a      	add	r2, r1
 800cfcc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800cfd0:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800cfd4:	6013      	str	r3, [r2, #0]
 800cfd6:	e133      	b.n	800d240 <USB_EPStartXfer+0x480>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800cfd8:	69bb      	ldr	r3, [r7, #24]
 800cfda:	015a      	lsls	r2, r3, #5
 800cfdc:	69fb      	ldr	r3, [r7, #28]
 800cfde:	4413      	add	r3, r2
 800cfe0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800cfe4:	681b      	ldr	r3, [r3, #0]
 800cfe6:	69ba      	ldr	r2, [r7, #24]
 800cfe8:	0151      	lsls	r1, r2, #5
 800cfea:	69fa      	ldr	r2, [r7, #28]
 800cfec:	440a      	add	r2, r1
 800cfee:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800cff2:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800cff6:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800cff8:	68bb      	ldr	r3, [r7, #8]
 800cffa:	78db      	ldrb	r3, [r3, #3]
 800cffc:	2b01      	cmp	r3, #1
 800cffe:	d015      	beq.n	800d02c <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 800d000:	68bb      	ldr	r3, [r7, #8]
 800d002:	695b      	ldr	r3, [r3, #20]
 800d004:	2b00      	cmp	r3, #0
 800d006:	f000 811b 	beq.w	800d240 <USB_EPStartXfer+0x480>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800d00a:	69fb      	ldr	r3, [r7, #28]
 800d00c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d010:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800d012:	68bb      	ldr	r3, [r7, #8]
 800d014:	781b      	ldrb	r3, [r3, #0]
 800d016:	f003 030f 	and.w	r3, r3, #15
 800d01a:	2101      	movs	r1, #1
 800d01c:	fa01 f303 	lsl.w	r3, r1, r3
 800d020:	69f9      	ldr	r1, [r7, #28]
 800d022:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800d026:	4313      	orrs	r3, r2
 800d028:	634b      	str	r3, [r1, #52]	; 0x34
 800d02a:	e109      	b.n	800d240 <USB_EPStartXfer+0x480>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800d02c:	69fb      	ldr	r3, [r7, #28]
 800d02e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d032:	689b      	ldr	r3, [r3, #8]
 800d034:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d038:	2b00      	cmp	r3, #0
 800d03a:	d110      	bne.n	800d05e <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800d03c:	69bb      	ldr	r3, [r7, #24]
 800d03e:	015a      	lsls	r2, r3, #5
 800d040:	69fb      	ldr	r3, [r7, #28]
 800d042:	4413      	add	r3, r2
 800d044:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d048:	681b      	ldr	r3, [r3, #0]
 800d04a:	69ba      	ldr	r2, [r7, #24]
 800d04c:	0151      	lsls	r1, r2, #5
 800d04e:	69fa      	ldr	r2, [r7, #28]
 800d050:	440a      	add	r2, r1
 800d052:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800d056:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800d05a:	6013      	str	r3, [r2, #0]
 800d05c:	e00f      	b.n	800d07e <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800d05e:	69bb      	ldr	r3, [r7, #24]
 800d060:	015a      	lsls	r2, r3, #5
 800d062:	69fb      	ldr	r3, [r7, #28]
 800d064:	4413      	add	r3, r2
 800d066:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d06a:	681b      	ldr	r3, [r3, #0]
 800d06c:	69ba      	ldr	r2, [r7, #24]
 800d06e:	0151      	lsls	r1, r2, #5
 800d070:	69fa      	ldr	r2, [r7, #28]
 800d072:	440a      	add	r2, r1
 800d074:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800d078:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800d07c:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 800d07e:	68bb      	ldr	r3, [r7, #8]
 800d080:	68d9      	ldr	r1, [r3, #12]
 800d082:	68bb      	ldr	r3, [r7, #8]
 800d084:	781a      	ldrb	r2, [r3, #0]
 800d086:	68bb      	ldr	r3, [r7, #8]
 800d088:	695b      	ldr	r3, [r3, #20]
 800d08a:	b298      	uxth	r0, r3
 800d08c:	79fb      	ldrb	r3, [r7, #7]
 800d08e:	9300      	str	r3, [sp, #0]
 800d090:	4603      	mov	r3, r0
 800d092:	68f8      	ldr	r0, [r7, #12]
 800d094:	f000 fa38 	bl	800d508 <USB_WritePacket>
 800d098:	e0d2      	b.n	800d240 <USB_EPStartXfer+0x480>
 800d09a:	bf00      	nop
 800d09c:	e007ffff 	.word	0xe007ffff
 800d0a0:	fff80000 	.word	0xfff80000
 800d0a4:	1ff80000 	.word	0x1ff80000
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800d0a8:	69bb      	ldr	r3, [r7, #24]
 800d0aa:	015a      	lsls	r2, r3, #5
 800d0ac:	69fb      	ldr	r3, [r7, #28]
 800d0ae:	4413      	add	r3, r2
 800d0b0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d0b4:	691a      	ldr	r2, [r3, #16]
 800d0b6:	69bb      	ldr	r3, [r7, #24]
 800d0b8:	0159      	lsls	r1, r3, #5
 800d0ba:	69fb      	ldr	r3, [r7, #28]
 800d0bc:	440b      	add	r3, r1
 800d0be:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d0c2:	4619      	mov	r1, r3
 800d0c4:	4b61      	ldr	r3, [pc, #388]	; (800d24c <USB_EPStartXfer+0x48c>)
 800d0c6:	4013      	ands	r3, r2
 800d0c8:	610b      	str	r3, [r1, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800d0ca:	69bb      	ldr	r3, [r7, #24]
 800d0cc:	015a      	lsls	r2, r3, #5
 800d0ce:	69fb      	ldr	r3, [r7, #28]
 800d0d0:	4413      	add	r3, r2
 800d0d2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d0d6:	691a      	ldr	r2, [r3, #16]
 800d0d8:	69bb      	ldr	r3, [r7, #24]
 800d0da:	0159      	lsls	r1, r3, #5
 800d0dc:	69fb      	ldr	r3, [r7, #28]
 800d0de:	440b      	add	r3, r1
 800d0e0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d0e4:	4619      	mov	r1, r3
 800d0e6:	4b5a      	ldr	r3, [pc, #360]	; (800d250 <USB_EPStartXfer+0x490>)
 800d0e8:	4013      	ands	r3, r2
 800d0ea:	610b      	str	r3, [r1, #16]

    if (ep->xfer_len == 0U)
 800d0ec:	68bb      	ldr	r3, [r7, #8]
 800d0ee:	695b      	ldr	r3, [r3, #20]
 800d0f0:	2b00      	cmp	r3, #0
 800d0f2:	d123      	bne.n	800d13c <USB_EPStartXfer+0x37c>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 800d0f4:	69bb      	ldr	r3, [r7, #24]
 800d0f6:	015a      	lsls	r2, r3, #5
 800d0f8:	69fb      	ldr	r3, [r7, #28]
 800d0fa:	4413      	add	r3, r2
 800d0fc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d100:	691a      	ldr	r2, [r3, #16]
 800d102:	68bb      	ldr	r3, [r7, #8]
 800d104:	689b      	ldr	r3, [r3, #8]
 800d106:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800d10a:	69b9      	ldr	r1, [r7, #24]
 800d10c:	0148      	lsls	r0, r1, #5
 800d10e:	69f9      	ldr	r1, [r7, #28]
 800d110:	4401      	add	r1, r0
 800d112:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800d116:	4313      	orrs	r3, r2
 800d118:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800d11a:	69bb      	ldr	r3, [r7, #24]
 800d11c:	015a      	lsls	r2, r3, #5
 800d11e:	69fb      	ldr	r3, [r7, #28]
 800d120:	4413      	add	r3, r2
 800d122:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d126:	691b      	ldr	r3, [r3, #16]
 800d128:	69ba      	ldr	r2, [r7, #24]
 800d12a:	0151      	lsls	r1, r2, #5
 800d12c:	69fa      	ldr	r2, [r7, #28]
 800d12e:	440a      	add	r2, r1
 800d130:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800d134:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800d138:	6113      	str	r3, [r2, #16]
 800d13a:	e033      	b.n	800d1a4 <USB_EPStartXfer+0x3e4>
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 800d13c:	68bb      	ldr	r3, [r7, #8]
 800d13e:	695a      	ldr	r2, [r3, #20]
 800d140:	68bb      	ldr	r3, [r7, #8]
 800d142:	689b      	ldr	r3, [r3, #8]
 800d144:	4413      	add	r3, r2
 800d146:	1e5a      	subs	r2, r3, #1
 800d148:	68bb      	ldr	r3, [r7, #8]
 800d14a:	689b      	ldr	r3, [r3, #8]
 800d14c:	fbb2 f3f3 	udiv	r3, r2, r3
 800d150:	82fb      	strh	r3, [r7, #22]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 800d152:	69bb      	ldr	r3, [r7, #24]
 800d154:	015a      	lsls	r2, r3, #5
 800d156:	69fb      	ldr	r3, [r7, #28]
 800d158:	4413      	add	r3, r2
 800d15a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d15e:	691a      	ldr	r2, [r3, #16]
 800d160:	8afb      	ldrh	r3, [r7, #22]
 800d162:	04d9      	lsls	r1, r3, #19
 800d164:	4b3b      	ldr	r3, [pc, #236]	; (800d254 <USB_EPStartXfer+0x494>)
 800d166:	400b      	ands	r3, r1
 800d168:	69b9      	ldr	r1, [r7, #24]
 800d16a:	0148      	lsls	r0, r1, #5
 800d16c:	69f9      	ldr	r1, [r7, #28]
 800d16e:	4401      	add	r1, r0
 800d170:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800d174:	4313      	orrs	r3, r2
 800d176:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 800d178:	69bb      	ldr	r3, [r7, #24]
 800d17a:	015a      	lsls	r2, r3, #5
 800d17c:	69fb      	ldr	r3, [r7, #28]
 800d17e:	4413      	add	r3, r2
 800d180:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d184:	691a      	ldr	r2, [r3, #16]
 800d186:	68bb      	ldr	r3, [r7, #8]
 800d188:	689b      	ldr	r3, [r3, #8]
 800d18a:	8af9      	ldrh	r1, [r7, #22]
 800d18c:	fb01 f303 	mul.w	r3, r1, r3
 800d190:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800d194:	69b9      	ldr	r1, [r7, #24]
 800d196:	0148      	lsls	r0, r1, #5
 800d198:	69f9      	ldr	r1, [r7, #28]
 800d19a:	4401      	add	r1, r0
 800d19c:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800d1a0:	4313      	orrs	r3, r2
 800d1a2:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800d1a4:	79fb      	ldrb	r3, [r7, #7]
 800d1a6:	2b01      	cmp	r3, #1
 800d1a8:	d10d      	bne.n	800d1c6 <USB_EPStartXfer+0x406>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800d1aa:	68bb      	ldr	r3, [r7, #8]
 800d1ac:	68db      	ldr	r3, [r3, #12]
 800d1ae:	2b00      	cmp	r3, #0
 800d1b0:	d009      	beq.n	800d1c6 <USB_EPStartXfer+0x406>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800d1b2:	68bb      	ldr	r3, [r7, #8]
 800d1b4:	68d9      	ldr	r1, [r3, #12]
 800d1b6:	69bb      	ldr	r3, [r7, #24]
 800d1b8:	015a      	lsls	r2, r3, #5
 800d1ba:	69fb      	ldr	r3, [r7, #28]
 800d1bc:	4413      	add	r3, r2
 800d1be:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d1c2:	460a      	mov	r2, r1
 800d1c4:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 800d1c6:	68bb      	ldr	r3, [r7, #8]
 800d1c8:	78db      	ldrb	r3, [r3, #3]
 800d1ca:	2b01      	cmp	r3, #1
 800d1cc:	d128      	bne.n	800d220 <USB_EPStartXfer+0x460>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800d1ce:	69fb      	ldr	r3, [r7, #28]
 800d1d0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d1d4:	689b      	ldr	r3, [r3, #8]
 800d1d6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d1da:	2b00      	cmp	r3, #0
 800d1dc:	d110      	bne.n	800d200 <USB_EPStartXfer+0x440>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 800d1de:	69bb      	ldr	r3, [r7, #24]
 800d1e0:	015a      	lsls	r2, r3, #5
 800d1e2:	69fb      	ldr	r3, [r7, #28]
 800d1e4:	4413      	add	r3, r2
 800d1e6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d1ea:	681b      	ldr	r3, [r3, #0]
 800d1ec:	69ba      	ldr	r2, [r7, #24]
 800d1ee:	0151      	lsls	r1, r2, #5
 800d1f0:	69fa      	ldr	r2, [r7, #28]
 800d1f2:	440a      	add	r2, r1
 800d1f4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800d1f8:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800d1fc:	6013      	str	r3, [r2, #0]
 800d1fe:	e00f      	b.n	800d220 <USB_EPStartXfer+0x460>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 800d200:	69bb      	ldr	r3, [r7, #24]
 800d202:	015a      	lsls	r2, r3, #5
 800d204:	69fb      	ldr	r3, [r7, #28]
 800d206:	4413      	add	r3, r2
 800d208:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d20c:	681b      	ldr	r3, [r3, #0]
 800d20e:	69ba      	ldr	r2, [r7, #24]
 800d210:	0151      	lsls	r1, r2, #5
 800d212:	69fa      	ldr	r2, [r7, #28]
 800d214:	440a      	add	r2, r1
 800d216:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800d21a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800d21e:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800d220:	69bb      	ldr	r3, [r7, #24]
 800d222:	015a      	lsls	r2, r3, #5
 800d224:	69fb      	ldr	r3, [r7, #28]
 800d226:	4413      	add	r3, r2
 800d228:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d22c:	681b      	ldr	r3, [r3, #0]
 800d22e:	69ba      	ldr	r2, [r7, #24]
 800d230:	0151      	lsls	r1, r2, #5
 800d232:	69fa      	ldr	r2, [r7, #28]
 800d234:	440a      	add	r2, r1
 800d236:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800d23a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800d23e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800d240:	2300      	movs	r3, #0
}
 800d242:	4618      	mov	r0, r3
 800d244:	3720      	adds	r7, #32
 800d246:	46bd      	mov	sp, r7
 800d248:	bd80      	pop	{r7, pc}
 800d24a:	bf00      	nop
 800d24c:	fff80000 	.word	0xfff80000
 800d250:	e007ffff 	.word	0xe007ffff
 800d254:	1ff80000 	.word	0x1ff80000

0800d258 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800d258:	b480      	push	{r7}
 800d25a:	b087      	sub	sp, #28
 800d25c:	af00      	add	r7, sp, #0
 800d25e:	60f8      	str	r0, [r7, #12]
 800d260:	60b9      	str	r1, [r7, #8]
 800d262:	4613      	mov	r3, r2
 800d264:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d266:	68fb      	ldr	r3, [r7, #12]
 800d268:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 800d26a:	68bb      	ldr	r3, [r7, #8]
 800d26c:	781b      	ldrb	r3, [r3, #0]
 800d26e:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800d270:	68bb      	ldr	r3, [r7, #8]
 800d272:	785b      	ldrb	r3, [r3, #1]
 800d274:	2b01      	cmp	r3, #1
 800d276:	f040 80cd 	bne.w	800d414 <USB_EP0StartXfer+0x1bc>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800d27a:	68bb      	ldr	r3, [r7, #8]
 800d27c:	695b      	ldr	r3, [r3, #20]
 800d27e:	2b00      	cmp	r3, #0
 800d280:	d132      	bne.n	800d2e8 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800d282:	693b      	ldr	r3, [r7, #16]
 800d284:	015a      	lsls	r2, r3, #5
 800d286:	697b      	ldr	r3, [r7, #20]
 800d288:	4413      	add	r3, r2
 800d28a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d28e:	691a      	ldr	r2, [r3, #16]
 800d290:	693b      	ldr	r3, [r7, #16]
 800d292:	0159      	lsls	r1, r3, #5
 800d294:	697b      	ldr	r3, [r7, #20]
 800d296:	440b      	add	r3, r1
 800d298:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d29c:	4619      	mov	r1, r3
 800d29e:	4b98      	ldr	r3, [pc, #608]	; (800d500 <USB_EP0StartXfer+0x2a8>)
 800d2a0:	4013      	ands	r3, r2
 800d2a2:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800d2a4:	693b      	ldr	r3, [r7, #16]
 800d2a6:	015a      	lsls	r2, r3, #5
 800d2a8:	697b      	ldr	r3, [r7, #20]
 800d2aa:	4413      	add	r3, r2
 800d2ac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d2b0:	691b      	ldr	r3, [r3, #16]
 800d2b2:	693a      	ldr	r2, [r7, #16]
 800d2b4:	0151      	lsls	r1, r2, #5
 800d2b6:	697a      	ldr	r2, [r7, #20]
 800d2b8:	440a      	add	r2, r1
 800d2ba:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800d2be:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800d2c2:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800d2c4:	693b      	ldr	r3, [r7, #16]
 800d2c6:	015a      	lsls	r2, r3, #5
 800d2c8:	697b      	ldr	r3, [r7, #20]
 800d2ca:	4413      	add	r3, r2
 800d2cc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d2d0:	691a      	ldr	r2, [r3, #16]
 800d2d2:	693b      	ldr	r3, [r7, #16]
 800d2d4:	0159      	lsls	r1, r3, #5
 800d2d6:	697b      	ldr	r3, [r7, #20]
 800d2d8:	440b      	add	r3, r1
 800d2da:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d2de:	4619      	mov	r1, r3
 800d2e0:	4b88      	ldr	r3, [pc, #544]	; (800d504 <USB_EP0StartXfer+0x2ac>)
 800d2e2:	4013      	ands	r3, r2
 800d2e4:	610b      	str	r3, [r1, #16]
 800d2e6:	e04e      	b.n	800d386 <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800d2e8:	693b      	ldr	r3, [r7, #16]
 800d2ea:	015a      	lsls	r2, r3, #5
 800d2ec:	697b      	ldr	r3, [r7, #20]
 800d2ee:	4413      	add	r3, r2
 800d2f0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d2f4:	691a      	ldr	r2, [r3, #16]
 800d2f6:	693b      	ldr	r3, [r7, #16]
 800d2f8:	0159      	lsls	r1, r3, #5
 800d2fa:	697b      	ldr	r3, [r7, #20]
 800d2fc:	440b      	add	r3, r1
 800d2fe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d302:	4619      	mov	r1, r3
 800d304:	4b7f      	ldr	r3, [pc, #508]	; (800d504 <USB_EP0StartXfer+0x2ac>)
 800d306:	4013      	ands	r3, r2
 800d308:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800d30a:	693b      	ldr	r3, [r7, #16]
 800d30c:	015a      	lsls	r2, r3, #5
 800d30e:	697b      	ldr	r3, [r7, #20]
 800d310:	4413      	add	r3, r2
 800d312:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d316:	691a      	ldr	r2, [r3, #16]
 800d318:	693b      	ldr	r3, [r7, #16]
 800d31a:	0159      	lsls	r1, r3, #5
 800d31c:	697b      	ldr	r3, [r7, #20]
 800d31e:	440b      	add	r3, r1
 800d320:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d324:	4619      	mov	r1, r3
 800d326:	4b76      	ldr	r3, [pc, #472]	; (800d500 <USB_EP0StartXfer+0x2a8>)
 800d328:	4013      	ands	r3, r2
 800d32a:	610b      	str	r3, [r1, #16]

      if (ep->xfer_len > ep->maxpacket)
 800d32c:	68bb      	ldr	r3, [r7, #8]
 800d32e:	695a      	ldr	r2, [r3, #20]
 800d330:	68bb      	ldr	r3, [r7, #8]
 800d332:	689b      	ldr	r3, [r3, #8]
 800d334:	429a      	cmp	r2, r3
 800d336:	d903      	bls.n	800d340 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 800d338:	68bb      	ldr	r3, [r7, #8]
 800d33a:	689a      	ldr	r2, [r3, #8]
 800d33c:	68bb      	ldr	r3, [r7, #8]
 800d33e:	615a      	str	r2, [r3, #20]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800d340:	693b      	ldr	r3, [r7, #16]
 800d342:	015a      	lsls	r2, r3, #5
 800d344:	697b      	ldr	r3, [r7, #20]
 800d346:	4413      	add	r3, r2
 800d348:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d34c:	691b      	ldr	r3, [r3, #16]
 800d34e:	693a      	ldr	r2, [r7, #16]
 800d350:	0151      	lsls	r1, r2, #5
 800d352:	697a      	ldr	r2, [r7, #20]
 800d354:	440a      	add	r2, r1
 800d356:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800d35a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800d35e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800d360:	693b      	ldr	r3, [r7, #16]
 800d362:	015a      	lsls	r2, r3, #5
 800d364:	697b      	ldr	r3, [r7, #20]
 800d366:	4413      	add	r3, r2
 800d368:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d36c:	691a      	ldr	r2, [r3, #16]
 800d36e:	68bb      	ldr	r3, [r7, #8]
 800d370:	695b      	ldr	r3, [r3, #20]
 800d372:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800d376:	6939      	ldr	r1, [r7, #16]
 800d378:	0148      	lsls	r0, r1, #5
 800d37a:	6979      	ldr	r1, [r7, #20]
 800d37c:	4401      	add	r1, r0
 800d37e:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800d382:	4313      	orrs	r3, r2
 800d384:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800d386:	79fb      	ldrb	r3, [r7, #7]
 800d388:	2b01      	cmp	r3, #1
 800d38a:	d11e      	bne.n	800d3ca <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800d38c:	68bb      	ldr	r3, [r7, #8]
 800d38e:	691b      	ldr	r3, [r3, #16]
 800d390:	2b00      	cmp	r3, #0
 800d392:	d009      	beq.n	800d3a8 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800d394:	693b      	ldr	r3, [r7, #16]
 800d396:	015a      	lsls	r2, r3, #5
 800d398:	697b      	ldr	r3, [r7, #20]
 800d39a:	4413      	add	r3, r2
 800d39c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d3a0:	461a      	mov	r2, r3
 800d3a2:	68bb      	ldr	r3, [r7, #8]
 800d3a4:	691b      	ldr	r3, [r3, #16]
 800d3a6:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800d3a8:	693b      	ldr	r3, [r7, #16]
 800d3aa:	015a      	lsls	r2, r3, #5
 800d3ac:	697b      	ldr	r3, [r7, #20]
 800d3ae:	4413      	add	r3, r2
 800d3b0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d3b4:	681b      	ldr	r3, [r3, #0]
 800d3b6:	693a      	ldr	r2, [r7, #16]
 800d3b8:	0151      	lsls	r1, r2, #5
 800d3ba:	697a      	ldr	r2, [r7, #20]
 800d3bc:	440a      	add	r2, r1
 800d3be:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800d3c2:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800d3c6:	6013      	str	r3, [r2, #0]
 800d3c8:	e092      	b.n	800d4f0 <USB_EP0StartXfer+0x298>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800d3ca:	693b      	ldr	r3, [r7, #16]
 800d3cc:	015a      	lsls	r2, r3, #5
 800d3ce:	697b      	ldr	r3, [r7, #20]
 800d3d0:	4413      	add	r3, r2
 800d3d2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d3d6:	681b      	ldr	r3, [r3, #0]
 800d3d8:	693a      	ldr	r2, [r7, #16]
 800d3da:	0151      	lsls	r1, r2, #5
 800d3dc:	697a      	ldr	r2, [r7, #20]
 800d3de:	440a      	add	r2, r1
 800d3e0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800d3e4:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800d3e8:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 800d3ea:	68bb      	ldr	r3, [r7, #8]
 800d3ec:	695b      	ldr	r3, [r3, #20]
 800d3ee:	2b00      	cmp	r3, #0
 800d3f0:	d07e      	beq.n	800d4f0 <USB_EP0StartXfer+0x298>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800d3f2:	697b      	ldr	r3, [r7, #20]
 800d3f4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d3f8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800d3fa:	68bb      	ldr	r3, [r7, #8]
 800d3fc:	781b      	ldrb	r3, [r3, #0]
 800d3fe:	f003 030f 	and.w	r3, r3, #15
 800d402:	2101      	movs	r1, #1
 800d404:	fa01 f303 	lsl.w	r3, r1, r3
 800d408:	6979      	ldr	r1, [r7, #20]
 800d40a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800d40e:	4313      	orrs	r3, r2
 800d410:	634b      	str	r3, [r1, #52]	; 0x34
 800d412:	e06d      	b.n	800d4f0 <USB_EP0StartXfer+0x298>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800d414:	693b      	ldr	r3, [r7, #16]
 800d416:	015a      	lsls	r2, r3, #5
 800d418:	697b      	ldr	r3, [r7, #20]
 800d41a:	4413      	add	r3, r2
 800d41c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d420:	691a      	ldr	r2, [r3, #16]
 800d422:	693b      	ldr	r3, [r7, #16]
 800d424:	0159      	lsls	r1, r3, #5
 800d426:	697b      	ldr	r3, [r7, #20]
 800d428:	440b      	add	r3, r1
 800d42a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d42e:	4619      	mov	r1, r3
 800d430:	4b34      	ldr	r3, [pc, #208]	; (800d504 <USB_EP0StartXfer+0x2ac>)
 800d432:	4013      	ands	r3, r2
 800d434:	610b      	str	r3, [r1, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800d436:	693b      	ldr	r3, [r7, #16]
 800d438:	015a      	lsls	r2, r3, #5
 800d43a:	697b      	ldr	r3, [r7, #20]
 800d43c:	4413      	add	r3, r2
 800d43e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d442:	691a      	ldr	r2, [r3, #16]
 800d444:	693b      	ldr	r3, [r7, #16]
 800d446:	0159      	lsls	r1, r3, #5
 800d448:	697b      	ldr	r3, [r7, #20]
 800d44a:	440b      	add	r3, r1
 800d44c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d450:	4619      	mov	r1, r3
 800d452:	4b2b      	ldr	r3, [pc, #172]	; (800d500 <USB_EP0StartXfer+0x2a8>)
 800d454:	4013      	ands	r3, r2
 800d456:	610b      	str	r3, [r1, #16]

    if (ep->xfer_len > 0U)
 800d458:	68bb      	ldr	r3, [r7, #8]
 800d45a:	695b      	ldr	r3, [r3, #20]
 800d45c:	2b00      	cmp	r3, #0
 800d45e:	d003      	beq.n	800d468 <USB_EP0StartXfer+0x210>
    {
      ep->xfer_len = ep->maxpacket;
 800d460:	68bb      	ldr	r3, [r7, #8]
 800d462:	689a      	ldr	r2, [r3, #8]
 800d464:	68bb      	ldr	r3, [r7, #8]
 800d466:	615a      	str	r2, [r3, #20]
    }

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800d468:	693b      	ldr	r3, [r7, #16]
 800d46a:	015a      	lsls	r2, r3, #5
 800d46c:	697b      	ldr	r3, [r7, #20]
 800d46e:	4413      	add	r3, r2
 800d470:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d474:	691b      	ldr	r3, [r3, #16]
 800d476:	693a      	ldr	r2, [r7, #16]
 800d478:	0151      	lsls	r1, r2, #5
 800d47a:	697a      	ldr	r2, [r7, #20]
 800d47c:	440a      	add	r2, r1
 800d47e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800d482:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800d486:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 800d488:	693b      	ldr	r3, [r7, #16]
 800d48a:	015a      	lsls	r2, r3, #5
 800d48c:	697b      	ldr	r3, [r7, #20]
 800d48e:	4413      	add	r3, r2
 800d490:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d494:	691a      	ldr	r2, [r3, #16]
 800d496:	68bb      	ldr	r3, [r7, #8]
 800d498:	689b      	ldr	r3, [r3, #8]
 800d49a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800d49e:	6939      	ldr	r1, [r7, #16]
 800d4a0:	0148      	lsls	r0, r1, #5
 800d4a2:	6979      	ldr	r1, [r7, #20]
 800d4a4:	4401      	add	r1, r0
 800d4a6:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800d4aa:	4313      	orrs	r3, r2
 800d4ac:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 800d4ae:	79fb      	ldrb	r3, [r7, #7]
 800d4b0:	2b01      	cmp	r3, #1
 800d4b2:	d10d      	bne.n	800d4d0 <USB_EP0StartXfer+0x278>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800d4b4:	68bb      	ldr	r3, [r7, #8]
 800d4b6:	68db      	ldr	r3, [r3, #12]
 800d4b8:	2b00      	cmp	r3, #0
 800d4ba:	d009      	beq.n	800d4d0 <USB_EP0StartXfer+0x278>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800d4bc:	68bb      	ldr	r3, [r7, #8]
 800d4be:	68d9      	ldr	r1, [r3, #12]
 800d4c0:	693b      	ldr	r3, [r7, #16]
 800d4c2:	015a      	lsls	r2, r3, #5
 800d4c4:	697b      	ldr	r3, [r7, #20]
 800d4c6:	4413      	add	r3, r2
 800d4c8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d4cc:	460a      	mov	r2, r1
 800d4ce:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800d4d0:	693b      	ldr	r3, [r7, #16]
 800d4d2:	015a      	lsls	r2, r3, #5
 800d4d4:	697b      	ldr	r3, [r7, #20]
 800d4d6:	4413      	add	r3, r2
 800d4d8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d4dc:	681b      	ldr	r3, [r3, #0]
 800d4de:	693a      	ldr	r2, [r7, #16]
 800d4e0:	0151      	lsls	r1, r2, #5
 800d4e2:	697a      	ldr	r2, [r7, #20]
 800d4e4:	440a      	add	r2, r1
 800d4e6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800d4ea:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800d4ee:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800d4f0:	2300      	movs	r3, #0
}
 800d4f2:	4618      	mov	r0, r3
 800d4f4:	371c      	adds	r7, #28
 800d4f6:	46bd      	mov	sp, r7
 800d4f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4fc:	4770      	bx	lr
 800d4fe:	bf00      	nop
 800d500:	e007ffff 	.word	0xe007ffff
 800d504:	fff80000 	.word	0xfff80000

0800d508 <USB_WritePacket>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src, uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800d508:	b480      	push	{r7}
 800d50a:	b089      	sub	sp, #36	; 0x24
 800d50c:	af00      	add	r7, sp, #0
 800d50e:	60f8      	str	r0, [r7, #12]
 800d510:	60b9      	str	r1, [r7, #8]
 800d512:	4611      	mov	r1, r2
 800d514:	461a      	mov	r2, r3
 800d516:	460b      	mov	r3, r1
 800d518:	71fb      	strb	r3, [r7, #7]
 800d51a:	4613      	mov	r3, r2
 800d51c:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d51e:	68fb      	ldr	r3, [r7, #12]
 800d520:	617b      	str	r3, [r7, #20]
  uint32_t *pSrc = (uint32_t *)src;
 800d522:	68bb      	ldr	r3, [r7, #8]
 800d524:	61fb      	str	r3, [r7, #28]
  uint32_t count32b, i;

  if (dma == 0U)
 800d526:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800d52a:	2b00      	cmp	r3, #0
 800d52c:	d11a      	bne.n	800d564 <USB_WritePacket+0x5c>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800d52e:	88bb      	ldrh	r3, [r7, #4]
 800d530:	3303      	adds	r3, #3
 800d532:	089b      	lsrs	r3, r3, #2
 800d534:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800d536:	2300      	movs	r3, #0
 800d538:	61bb      	str	r3, [r7, #24]
 800d53a:	e00f      	b.n	800d55c <USB_WritePacket+0x54>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800d53c:	79fb      	ldrb	r3, [r7, #7]
 800d53e:	031a      	lsls	r2, r3, #12
 800d540:	697b      	ldr	r3, [r7, #20]
 800d542:	4413      	add	r3, r2
 800d544:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d548:	461a      	mov	r2, r3
 800d54a:	69fb      	ldr	r3, [r7, #28]
 800d54c:	681b      	ldr	r3, [r3, #0]
 800d54e:	6013      	str	r3, [r2, #0]
      pSrc++;
 800d550:	69fb      	ldr	r3, [r7, #28]
 800d552:	3304      	adds	r3, #4
 800d554:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800d556:	69bb      	ldr	r3, [r7, #24]
 800d558:	3301      	adds	r3, #1
 800d55a:	61bb      	str	r3, [r7, #24]
 800d55c:	69ba      	ldr	r2, [r7, #24]
 800d55e:	693b      	ldr	r3, [r7, #16]
 800d560:	429a      	cmp	r2, r3
 800d562:	d3eb      	bcc.n	800d53c <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800d564:	2300      	movs	r3, #0
}
 800d566:	4618      	mov	r0, r3
 800d568:	3724      	adds	r7, #36	; 0x24
 800d56a:	46bd      	mov	sp, r7
 800d56c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d570:	4770      	bx	lr

0800d572 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800d572:	b480      	push	{r7}
 800d574:	b089      	sub	sp, #36	; 0x24
 800d576:	af00      	add	r7, sp, #0
 800d578:	60f8      	str	r0, [r7, #12]
 800d57a:	60b9      	str	r1, [r7, #8]
 800d57c:	4613      	mov	r3, r2
 800d57e:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d580:	68fb      	ldr	r3, [r7, #12]
 800d582:	617b      	str	r3, [r7, #20]
  uint32_t *pDest = (uint32_t *)dest;
 800d584:	68bb      	ldr	r3, [r7, #8]
 800d586:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 800d588:	88fb      	ldrh	r3, [r7, #6]
 800d58a:	3303      	adds	r3, #3
 800d58c:	089b      	lsrs	r3, r3, #2
 800d58e:	613b      	str	r3, [r7, #16]

  for (i = 0U; i < count32b; i++)
 800d590:	2300      	movs	r3, #0
 800d592:	61bb      	str	r3, [r7, #24]
 800d594:	e00b      	b.n	800d5ae <USB_ReadPacket+0x3c>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800d596:	697b      	ldr	r3, [r7, #20]
 800d598:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d59c:	681a      	ldr	r2, [r3, #0]
 800d59e:	69fb      	ldr	r3, [r7, #28]
 800d5a0:	601a      	str	r2, [r3, #0]
    pDest++;
 800d5a2:	69fb      	ldr	r3, [r7, #28]
 800d5a4:	3304      	adds	r3, #4
 800d5a6:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 800d5a8:	69bb      	ldr	r3, [r7, #24]
 800d5aa:	3301      	adds	r3, #1
 800d5ac:	61bb      	str	r3, [r7, #24]
 800d5ae:	69ba      	ldr	r2, [r7, #24]
 800d5b0:	693b      	ldr	r3, [r7, #16]
 800d5b2:	429a      	cmp	r2, r3
 800d5b4:	d3ef      	bcc.n	800d596 <USB_ReadPacket+0x24>
  }

  return ((void *)pDest);
 800d5b6:	69fb      	ldr	r3, [r7, #28]
}
 800d5b8:	4618      	mov	r0, r3
 800d5ba:	3724      	adds	r7, #36	; 0x24
 800d5bc:	46bd      	mov	sp, r7
 800d5be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d5c2:	4770      	bx	lr

0800d5c4 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800d5c4:	b480      	push	{r7}
 800d5c6:	b085      	sub	sp, #20
 800d5c8:	af00      	add	r7, sp, #0
 800d5ca:	6078      	str	r0, [r7, #4]
 800d5cc:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d5ce:	687b      	ldr	r3, [r7, #4]
 800d5d0:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800d5d2:	683b      	ldr	r3, [r7, #0]
 800d5d4:	781b      	ldrb	r3, [r3, #0]
 800d5d6:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800d5d8:	683b      	ldr	r3, [r7, #0]
 800d5da:	785b      	ldrb	r3, [r3, #1]
 800d5dc:	2b01      	cmp	r3, #1
 800d5de:	d12c      	bne.n	800d63a <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 800d5e0:	68bb      	ldr	r3, [r7, #8]
 800d5e2:	015a      	lsls	r2, r3, #5
 800d5e4:	68fb      	ldr	r3, [r7, #12]
 800d5e6:	4413      	add	r3, r2
 800d5e8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d5ec:	681b      	ldr	r3, [r3, #0]
 800d5ee:	2b00      	cmp	r3, #0
 800d5f0:	db12      	blt.n	800d618 <USB_EPSetStall+0x54>
 800d5f2:	68bb      	ldr	r3, [r7, #8]
 800d5f4:	2b00      	cmp	r3, #0
 800d5f6:	d00f      	beq.n	800d618 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 800d5f8:	68bb      	ldr	r3, [r7, #8]
 800d5fa:	015a      	lsls	r2, r3, #5
 800d5fc:	68fb      	ldr	r3, [r7, #12]
 800d5fe:	4413      	add	r3, r2
 800d600:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d604:	681b      	ldr	r3, [r3, #0]
 800d606:	68ba      	ldr	r2, [r7, #8]
 800d608:	0151      	lsls	r1, r2, #5
 800d60a:	68fa      	ldr	r2, [r7, #12]
 800d60c:	440a      	add	r2, r1
 800d60e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800d612:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800d616:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 800d618:	68bb      	ldr	r3, [r7, #8]
 800d61a:	015a      	lsls	r2, r3, #5
 800d61c:	68fb      	ldr	r3, [r7, #12]
 800d61e:	4413      	add	r3, r2
 800d620:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d624:	681b      	ldr	r3, [r3, #0]
 800d626:	68ba      	ldr	r2, [r7, #8]
 800d628:	0151      	lsls	r1, r2, #5
 800d62a:	68fa      	ldr	r2, [r7, #12]
 800d62c:	440a      	add	r2, r1
 800d62e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800d632:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800d636:	6013      	str	r3, [r2, #0]
 800d638:	e02b      	b.n	800d692 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 800d63a:	68bb      	ldr	r3, [r7, #8]
 800d63c:	015a      	lsls	r2, r3, #5
 800d63e:	68fb      	ldr	r3, [r7, #12]
 800d640:	4413      	add	r3, r2
 800d642:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d646:	681b      	ldr	r3, [r3, #0]
 800d648:	2b00      	cmp	r3, #0
 800d64a:	db12      	blt.n	800d672 <USB_EPSetStall+0xae>
 800d64c:	68bb      	ldr	r3, [r7, #8]
 800d64e:	2b00      	cmp	r3, #0
 800d650:	d00f      	beq.n	800d672 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 800d652:	68bb      	ldr	r3, [r7, #8]
 800d654:	015a      	lsls	r2, r3, #5
 800d656:	68fb      	ldr	r3, [r7, #12]
 800d658:	4413      	add	r3, r2
 800d65a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d65e:	681b      	ldr	r3, [r3, #0]
 800d660:	68ba      	ldr	r2, [r7, #8]
 800d662:	0151      	lsls	r1, r2, #5
 800d664:	68fa      	ldr	r2, [r7, #12]
 800d666:	440a      	add	r2, r1
 800d668:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800d66c:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800d670:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 800d672:	68bb      	ldr	r3, [r7, #8]
 800d674:	015a      	lsls	r2, r3, #5
 800d676:	68fb      	ldr	r3, [r7, #12]
 800d678:	4413      	add	r3, r2
 800d67a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d67e:	681b      	ldr	r3, [r3, #0]
 800d680:	68ba      	ldr	r2, [r7, #8]
 800d682:	0151      	lsls	r1, r2, #5
 800d684:	68fa      	ldr	r2, [r7, #12]
 800d686:	440a      	add	r2, r1
 800d688:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800d68c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800d690:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800d692:	2300      	movs	r3, #0
}
 800d694:	4618      	mov	r0, r3
 800d696:	3714      	adds	r7, #20
 800d698:	46bd      	mov	sp, r7
 800d69a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d69e:	4770      	bx	lr

0800d6a0 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800d6a0:	b480      	push	{r7}
 800d6a2:	b085      	sub	sp, #20
 800d6a4:	af00      	add	r7, sp, #0
 800d6a6:	6078      	str	r0, [r7, #4]
 800d6a8:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d6aa:	687b      	ldr	r3, [r7, #4]
 800d6ac:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800d6ae:	683b      	ldr	r3, [r7, #0]
 800d6b0:	781b      	ldrb	r3, [r3, #0]
 800d6b2:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800d6b4:	683b      	ldr	r3, [r7, #0]
 800d6b6:	785b      	ldrb	r3, [r3, #1]
 800d6b8:	2b01      	cmp	r3, #1
 800d6ba:	d128      	bne.n	800d70e <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800d6bc:	68bb      	ldr	r3, [r7, #8]
 800d6be:	015a      	lsls	r2, r3, #5
 800d6c0:	68fb      	ldr	r3, [r7, #12]
 800d6c2:	4413      	add	r3, r2
 800d6c4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d6c8:	681b      	ldr	r3, [r3, #0]
 800d6ca:	68ba      	ldr	r2, [r7, #8]
 800d6cc:	0151      	lsls	r1, r2, #5
 800d6ce:	68fa      	ldr	r2, [r7, #12]
 800d6d0:	440a      	add	r2, r1
 800d6d2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800d6d6:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800d6da:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800d6dc:	683b      	ldr	r3, [r7, #0]
 800d6de:	78db      	ldrb	r3, [r3, #3]
 800d6e0:	2b03      	cmp	r3, #3
 800d6e2:	d003      	beq.n	800d6ec <USB_EPClearStall+0x4c>
 800d6e4:	683b      	ldr	r3, [r7, #0]
 800d6e6:	78db      	ldrb	r3, [r3, #3]
 800d6e8:	2b02      	cmp	r3, #2
 800d6ea:	d138      	bne.n	800d75e <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800d6ec:	68bb      	ldr	r3, [r7, #8]
 800d6ee:	015a      	lsls	r2, r3, #5
 800d6f0:	68fb      	ldr	r3, [r7, #12]
 800d6f2:	4413      	add	r3, r2
 800d6f4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d6f8:	681b      	ldr	r3, [r3, #0]
 800d6fa:	68ba      	ldr	r2, [r7, #8]
 800d6fc:	0151      	lsls	r1, r2, #5
 800d6fe:	68fa      	ldr	r2, [r7, #12]
 800d700:	440a      	add	r2, r1
 800d702:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800d706:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800d70a:	6013      	str	r3, [r2, #0]
 800d70c:	e027      	b.n	800d75e <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800d70e:	68bb      	ldr	r3, [r7, #8]
 800d710:	015a      	lsls	r2, r3, #5
 800d712:	68fb      	ldr	r3, [r7, #12]
 800d714:	4413      	add	r3, r2
 800d716:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d71a:	681b      	ldr	r3, [r3, #0]
 800d71c:	68ba      	ldr	r2, [r7, #8]
 800d71e:	0151      	lsls	r1, r2, #5
 800d720:	68fa      	ldr	r2, [r7, #12]
 800d722:	440a      	add	r2, r1
 800d724:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800d728:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800d72c:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800d72e:	683b      	ldr	r3, [r7, #0]
 800d730:	78db      	ldrb	r3, [r3, #3]
 800d732:	2b03      	cmp	r3, #3
 800d734:	d003      	beq.n	800d73e <USB_EPClearStall+0x9e>
 800d736:	683b      	ldr	r3, [r7, #0]
 800d738:	78db      	ldrb	r3, [r3, #3]
 800d73a:	2b02      	cmp	r3, #2
 800d73c:	d10f      	bne.n	800d75e <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800d73e:	68bb      	ldr	r3, [r7, #8]
 800d740:	015a      	lsls	r2, r3, #5
 800d742:	68fb      	ldr	r3, [r7, #12]
 800d744:	4413      	add	r3, r2
 800d746:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d74a:	681b      	ldr	r3, [r3, #0]
 800d74c:	68ba      	ldr	r2, [r7, #8]
 800d74e:	0151      	lsls	r1, r2, #5
 800d750:	68fa      	ldr	r2, [r7, #12]
 800d752:	440a      	add	r2, r1
 800d754:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800d758:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800d75c:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 800d75e:	2300      	movs	r3, #0
}
 800d760:	4618      	mov	r0, r3
 800d762:	3714      	adds	r7, #20
 800d764:	46bd      	mov	sp, r7
 800d766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d76a:	4770      	bx	lr

0800d76c <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 800d76c:	b480      	push	{r7}
 800d76e:	b085      	sub	sp, #20
 800d770:	af00      	add	r7, sp, #0
 800d772:	6078      	str	r0, [r7, #4]
 800d774:	460b      	mov	r3, r1
 800d776:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d778:	687b      	ldr	r3, [r7, #4]
 800d77a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 800d77c:	68fb      	ldr	r3, [r7, #12]
 800d77e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d782:	681b      	ldr	r3, [r3, #0]
 800d784:	68fa      	ldr	r2, [r7, #12]
 800d786:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800d78a:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800d78e:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 800d790:	68fb      	ldr	r3, [r7, #12]
 800d792:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d796:	681a      	ldr	r2, [r3, #0]
 800d798:	78fb      	ldrb	r3, [r7, #3]
 800d79a:	011b      	lsls	r3, r3, #4
 800d79c:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 800d7a0:	68f9      	ldr	r1, [r7, #12]
 800d7a2:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800d7a6:	4313      	orrs	r3, r2
 800d7a8:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 800d7aa:	2300      	movs	r3, #0
}
 800d7ac:	4618      	mov	r0, r3
 800d7ae:	3714      	adds	r7, #20
 800d7b0:	46bd      	mov	sp, r7
 800d7b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d7b6:	4770      	bx	lr

0800d7b8 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 800d7b8:	b580      	push	{r7, lr}
 800d7ba:	b084      	sub	sp, #16
 800d7bc:	af00      	add	r7, sp, #0
 800d7be:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d7c0:	687b      	ldr	r3, [r7, #4]
 800d7c2:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 800d7c4:	68fb      	ldr	r3, [r7, #12]
 800d7c6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d7ca:	685b      	ldr	r3, [r3, #4]
 800d7cc:	68fa      	ldr	r2, [r7, #12]
 800d7ce:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800d7d2:	f023 0302 	bic.w	r3, r3, #2
 800d7d6:	6053      	str	r3, [r2, #4]
  HAL_Delay(3U);
 800d7d8:	2003      	movs	r0, #3
 800d7da:	f7f4 f8fd 	bl	80019d8 <HAL_Delay>

  return HAL_OK;
 800d7de:	2300      	movs	r3, #0
}
 800d7e0:	4618      	mov	r0, r3
 800d7e2:	3710      	adds	r7, #16
 800d7e4:	46bd      	mov	sp, r7
 800d7e6:	bd80      	pop	{r7, pc}

0800d7e8 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800d7e8:	b580      	push	{r7, lr}
 800d7ea:	b084      	sub	sp, #16
 800d7ec:	af00      	add	r7, sp, #0
 800d7ee:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d7f0:	687b      	ldr	r3, [r7, #4]
 800d7f2:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800d7f4:	68fb      	ldr	r3, [r7, #12]
 800d7f6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d7fa:	685b      	ldr	r3, [r3, #4]
 800d7fc:	68fa      	ldr	r2, [r7, #12]
 800d7fe:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800d802:	f043 0302 	orr.w	r3, r3, #2
 800d806:	6053      	str	r3, [r2, #4]
  HAL_Delay(3U);
 800d808:	2003      	movs	r0, #3
 800d80a:	f7f4 f8e5 	bl	80019d8 <HAL_Delay>

  return HAL_OK;
 800d80e:	2300      	movs	r3, #0
}
 800d810:	4618      	mov	r0, r3
 800d812:	3710      	adds	r7, #16
 800d814:	46bd      	mov	sp, r7
 800d816:	bd80      	pop	{r7, pc}

0800d818 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 800d818:	b480      	push	{r7}
 800d81a:	b085      	sub	sp, #20
 800d81c:	af00      	add	r7, sp, #0
 800d81e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800d820:	687b      	ldr	r3, [r7, #4]
 800d822:	695b      	ldr	r3, [r3, #20]
 800d824:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800d826:	687b      	ldr	r3, [r7, #4]
 800d828:	699b      	ldr	r3, [r3, #24]
 800d82a:	68fa      	ldr	r2, [r7, #12]
 800d82c:	4013      	ands	r3, r2
 800d82e:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800d830:	68fb      	ldr	r3, [r7, #12]
}
 800d832:	4618      	mov	r0, r3
 800d834:	3714      	adds	r7, #20
 800d836:	46bd      	mov	sp, r7
 800d838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d83c:	4770      	bx	lr

0800d83e <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800d83e:	b480      	push	{r7}
 800d840:	b085      	sub	sp, #20
 800d842:	af00      	add	r7, sp, #0
 800d844:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d846:	687b      	ldr	r3, [r7, #4]
 800d848:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800d84a:	68fb      	ldr	r3, [r7, #12]
 800d84c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d850:	699b      	ldr	r3, [r3, #24]
 800d852:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800d854:	68fb      	ldr	r3, [r7, #12]
 800d856:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d85a:	69db      	ldr	r3, [r3, #28]
 800d85c:	68ba      	ldr	r2, [r7, #8]
 800d85e:	4013      	ands	r3, r2
 800d860:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 800d862:	68bb      	ldr	r3, [r7, #8]
 800d864:	0c1b      	lsrs	r3, r3, #16
}
 800d866:	4618      	mov	r0, r3
 800d868:	3714      	adds	r7, #20
 800d86a:	46bd      	mov	sp, r7
 800d86c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d870:	4770      	bx	lr

0800d872 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800d872:	b480      	push	{r7}
 800d874:	b085      	sub	sp, #20
 800d876:	af00      	add	r7, sp, #0
 800d878:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d87a:	687b      	ldr	r3, [r7, #4]
 800d87c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800d87e:	68fb      	ldr	r3, [r7, #12]
 800d880:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d884:	699b      	ldr	r3, [r3, #24]
 800d886:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800d888:	68fb      	ldr	r3, [r7, #12]
 800d88a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d88e:	69db      	ldr	r3, [r3, #28]
 800d890:	68ba      	ldr	r2, [r7, #8]
 800d892:	4013      	ands	r3, r2
 800d894:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 800d896:	68bb      	ldr	r3, [r7, #8]
 800d898:	b29b      	uxth	r3, r3
}
 800d89a:	4618      	mov	r0, r3
 800d89c:	3714      	adds	r7, #20
 800d89e:	46bd      	mov	sp, r7
 800d8a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d8a4:	4770      	bx	lr

0800d8a6 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800d8a6:	b480      	push	{r7}
 800d8a8:	b085      	sub	sp, #20
 800d8aa:	af00      	add	r7, sp, #0
 800d8ac:	6078      	str	r0, [r7, #4]
 800d8ae:	460b      	mov	r3, r1
 800d8b0:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d8b2:	687b      	ldr	r3, [r7, #4]
 800d8b4:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800d8b6:	78fb      	ldrb	r3, [r7, #3]
 800d8b8:	015a      	lsls	r2, r3, #5
 800d8ba:	68fb      	ldr	r3, [r7, #12]
 800d8bc:	4413      	add	r3, r2
 800d8be:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d8c2:	689b      	ldr	r3, [r3, #8]
 800d8c4:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800d8c6:	68fb      	ldr	r3, [r7, #12]
 800d8c8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d8cc:	695b      	ldr	r3, [r3, #20]
 800d8ce:	68ba      	ldr	r2, [r7, #8]
 800d8d0:	4013      	ands	r3, r2
 800d8d2:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800d8d4:	68bb      	ldr	r3, [r7, #8]
}
 800d8d6:	4618      	mov	r0, r3
 800d8d8:	3714      	adds	r7, #20
 800d8da:	46bd      	mov	sp, r7
 800d8dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d8e0:	4770      	bx	lr

0800d8e2 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800d8e2:	b480      	push	{r7}
 800d8e4:	b087      	sub	sp, #28
 800d8e6:	af00      	add	r7, sp, #0
 800d8e8:	6078      	str	r0, [r7, #4]
 800d8ea:	460b      	mov	r3, r1
 800d8ec:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d8ee:	687b      	ldr	r3, [r7, #4]
 800d8f0:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg, msk, emp;

  msk = USBx_DEVICE->DIEPMSK;
 800d8f2:	697b      	ldr	r3, [r7, #20]
 800d8f4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d8f8:	691b      	ldr	r3, [r3, #16]
 800d8fa:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 800d8fc:	697b      	ldr	r3, [r7, #20]
 800d8fe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d902:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d904:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800d906:	78fb      	ldrb	r3, [r7, #3]
 800d908:	f003 030f 	and.w	r3, r3, #15
 800d90c:	68fa      	ldr	r2, [r7, #12]
 800d90e:	fa22 f303 	lsr.w	r3, r2, r3
 800d912:	01db      	lsls	r3, r3, #7
 800d914:	b2db      	uxtb	r3, r3
 800d916:	693a      	ldr	r2, [r7, #16]
 800d918:	4313      	orrs	r3, r2
 800d91a:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 800d91c:	78fb      	ldrb	r3, [r7, #3]
 800d91e:	015a      	lsls	r2, r3, #5
 800d920:	697b      	ldr	r3, [r7, #20]
 800d922:	4413      	add	r3, r2
 800d924:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d928:	689b      	ldr	r3, [r3, #8]
 800d92a:	693a      	ldr	r2, [r7, #16]
 800d92c:	4013      	ands	r3, r2
 800d92e:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800d930:	68bb      	ldr	r3, [r7, #8]
}
 800d932:	4618      	mov	r0, r3
 800d934:	371c      	adds	r7, #28
 800d936:	46bd      	mov	sp, r7
 800d938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d93c:	4770      	bx	lr

0800d93e <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800d93e:	b480      	push	{r7}
 800d940:	b083      	sub	sp, #12
 800d942:	af00      	add	r7, sp, #0
 800d944:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800d946:	687b      	ldr	r3, [r7, #4]
 800d948:	695b      	ldr	r3, [r3, #20]
 800d94a:	f003 0301 	and.w	r3, r3, #1
}
 800d94e:	4618      	mov	r0, r3
 800d950:	370c      	adds	r7, #12
 800d952:	46bd      	mov	sp, r7
 800d954:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d958:	4770      	bx	lr
	...

0800d95c <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 800d95c:	b480      	push	{r7}
 800d95e:	b085      	sub	sp, #20
 800d960:	af00      	add	r7, sp, #0
 800d962:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d964:	687b      	ldr	r3, [r7, #4]
 800d966:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800d968:	68fb      	ldr	r3, [r7, #12]
 800d96a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d96e:	681a      	ldr	r2, [r3, #0]
 800d970:	68fb      	ldr	r3, [r7, #12]
 800d972:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d976:	4619      	mov	r1, r3
 800d978:	4b09      	ldr	r3, [pc, #36]	; (800d9a0 <USB_ActivateSetup+0x44>)
 800d97a:	4013      	ands	r3, r2
 800d97c:	600b      	str	r3, [r1, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800d97e:	68fb      	ldr	r3, [r7, #12]
 800d980:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d984:	685b      	ldr	r3, [r3, #4]
 800d986:	68fa      	ldr	r2, [r7, #12]
 800d988:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800d98c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800d990:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800d992:	2300      	movs	r3, #0
}
 800d994:	4618      	mov	r0, r3
 800d996:	3714      	adds	r7, #20
 800d998:	46bd      	mov	sp, r7
 800d99a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d99e:	4770      	bx	lr
 800d9a0:	fffff800 	.word	0xfffff800

0800d9a4 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 800d9a4:	b480      	push	{r7}
 800d9a6:	b087      	sub	sp, #28
 800d9a8:	af00      	add	r7, sp, #0
 800d9aa:	60f8      	str	r0, [r7, #12]
 800d9ac:	460b      	mov	r3, r1
 800d9ae:	607a      	str	r2, [r7, #4]
 800d9b0:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d9b2:	68fb      	ldr	r3, [r7, #12]
 800d9b4:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800d9b6:	68fb      	ldr	r3, [r7, #12]
 800d9b8:	333c      	adds	r3, #60	; 0x3c
 800d9ba:	3304      	adds	r3, #4
 800d9bc:	681b      	ldr	r3, [r3, #0]
 800d9be:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 800d9c0:	693b      	ldr	r3, [r7, #16]
 800d9c2:	4a26      	ldr	r2, [pc, #152]	; (800da5c <USB_EP0_OutStart+0xb8>)
 800d9c4:	4293      	cmp	r3, r2
 800d9c6:	d90a      	bls.n	800d9de <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800d9c8:	697b      	ldr	r3, [r7, #20]
 800d9ca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d9ce:	681b      	ldr	r3, [r3, #0]
 800d9d0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800d9d4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800d9d8:	d101      	bne.n	800d9de <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 800d9da:	2300      	movs	r3, #0
 800d9dc:	e037      	b.n	800da4e <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800d9de:	697b      	ldr	r3, [r7, #20]
 800d9e0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d9e4:	461a      	mov	r2, r3
 800d9e6:	2300      	movs	r3, #0
 800d9e8:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800d9ea:	697b      	ldr	r3, [r7, #20]
 800d9ec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d9f0:	691b      	ldr	r3, [r3, #16]
 800d9f2:	697a      	ldr	r2, [r7, #20]
 800d9f4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800d9f8:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800d9fc:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800d9fe:	697b      	ldr	r3, [r7, #20]
 800da00:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800da04:	691b      	ldr	r3, [r3, #16]
 800da06:	697a      	ldr	r2, [r7, #20]
 800da08:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800da0c:	f043 0318 	orr.w	r3, r3, #24
 800da10:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800da12:	697b      	ldr	r3, [r7, #20]
 800da14:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800da18:	691b      	ldr	r3, [r3, #16]
 800da1a:	697a      	ldr	r2, [r7, #20]
 800da1c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800da20:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 800da24:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 800da26:	7afb      	ldrb	r3, [r7, #11]
 800da28:	2b01      	cmp	r3, #1
 800da2a:	d10f      	bne.n	800da4c <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 800da2c:	697b      	ldr	r3, [r7, #20]
 800da2e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800da32:	461a      	mov	r2, r3
 800da34:	687b      	ldr	r3, [r7, #4]
 800da36:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 800da38:	697b      	ldr	r3, [r7, #20]
 800da3a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800da3e:	681b      	ldr	r3, [r3, #0]
 800da40:	697a      	ldr	r2, [r7, #20]
 800da42:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800da46:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 800da4a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800da4c:	2300      	movs	r3, #0
}
 800da4e:	4618      	mov	r0, r3
 800da50:	371c      	adds	r7, #28
 800da52:	46bd      	mov	sp, r7
 800da54:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da58:	4770      	bx	lr
 800da5a:	bf00      	nop
 800da5c:	4f54300a 	.word	0x4f54300a

0800da60 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800da60:	b480      	push	{r7}
 800da62:	b085      	sub	sp, #20
 800da64:	af00      	add	r7, sp, #0
 800da66:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 800da68:	2300      	movs	r3, #0
 800da6a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 800da6c:	68fb      	ldr	r3, [r7, #12]
 800da6e:	3301      	adds	r3, #1
 800da70:	60fb      	str	r3, [r7, #12]
 800da72:	68fb      	ldr	r3, [r7, #12]
 800da74:	4a13      	ldr	r2, [pc, #76]	; (800dac4 <USB_CoreReset+0x64>)
 800da76:	4293      	cmp	r3, r2
 800da78:	d901      	bls.n	800da7e <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800da7a:	2303      	movs	r3, #3
 800da7c:	e01b      	b.n	800dab6 <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800da7e:	687b      	ldr	r3, [r7, #4]
 800da80:	691b      	ldr	r3, [r3, #16]
 800da82:	2b00      	cmp	r3, #0
 800da84:	daf2      	bge.n	800da6c <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800da86:	2300      	movs	r3, #0
 800da88:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800da8a:	687b      	ldr	r3, [r7, #4]
 800da8c:	691b      	ldr	r3, [r3, #16]
 800da8e:	f043 0201 	orr.w	r2, r3, #1
 800da92:	687b      	ldr	r3, [r7, #4]
 800da94:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800da96:	68fb      	ldr	r3, [r7, #12]
 800da98:	3301      	adds	r3, #1
 800da9a:	60fb      	str	r3, [r7, #12]
 800da9c:	68fb      	ldr	r3, [r7, #12]
 800da9e:	4a09      	ldr	r2, [pc, #36]	; (800dac4 <USB_CoreReset+0x64>)
 800daa0:	4293      	cmp	r3, r2
 800daa2:	d901      	bls.n	800daa8 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800daa4:	2303      	movs	r3, #3
 800daa6:	e006      	b.n	800dab6 <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800daa8:	687b      	ldr	r3, [r7, #4]
 800daaa:	691b      	ldr	r3, [r3, #16]
 800daac:	f003 0301 	and.w	r3, r3, #1
 800dab0:	2b01      	cmp	r3, #1
 800dab2:	d0f0      	beq.n	800da96 <USB_CoreReset+0x36>

  return HAL_OK;
 800dab4:	2300      	movs	r3, #0
}
 800dab6:	4618      	mov	r0, r3
 800dab8:	3714      	adds	r7, #20
 800daba:	46bd      	mov	sp, r7
 800dabc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dac0:	4770      	bx	lr
 800dac2:	bf00      	nop
 800dac4:	00030d40 	.word	0x00030d40

0800dac8 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 800dac8:	b580      	push	{r7, lr}
 800daca:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 800dacc:	4904      	ldr	r1, [pc, #16]	; (800dae0 <MX_FATFS_Init+0x18>)
 800dace:	4805      	ldr	r0, [pc, #20]	; (800dae4 <MX_FATFS_Init+0x1c>)
 800dad0:	f002 ff52 	bl	8010978 <FATFS_LinkDriver>
 800dad4:	4603      	mov	r3, r0
 800dad6:	461a      	mov	r2, r3
 800dad8:	4b03      	ldr	r3, [pc, #12]	; (800dae8 <MX_FATFS_Init+0x20>)
 800dada:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 800dadc:	bf00      	nop
 800dade:	bd80      	pop	{r7, pc}
 800dae0:	24000630 	.word	0x24000630
 800dae4:	08012694 	.word	0x08012694
 800dae8:	2400062c 	.word	0x2400062c

0800daec <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 800daec:	b580      	push	{r7, lr}
 800daee:	b082      	sub	sp, #8
 800daf0:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 800daf2:	2300      	movs	r3, #0
 800daf4:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 800daf6:	f000 f879 	bl	800dbec <BSP_SD_IsDetected>
 800dafa:	4603      	mov	r3, r0
 800dafc:	2b01      	cmp	r3, #1
 800dafe:	d001      	beq.n	800db04 <BSP_SD_Init+0x18>
  {
    return MSD_ERROR_SD_NOT_PRESENT;
 800db00:	2302      	movs	r3, #2
 800db02:	e012      	b.n	800db2a <BSP_SD_Init+0x3e>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd1);
 800db04:	480b      	ldr	r0, [pc, #44]	; (800db34 <BSP_SD_Init+0x48>)
 800db06:	f7fa ff8b 	bl	8008a20 <HAL_SD_Init>
 800db0a:	4603      	mov	r3, r0
 800db0c:	71fb      	strb	r3, [r7, #7]
  /* Configure SD Bus width (4 bits mode selected) */
  if (sd_state == MSD_OK)
 800db0e:	79fb      	ldrb	r3, [r7, #7]
 800db10:	2b00      	cmp	r3, #0
 800db12:	d109      	bne.n	800db28 <BSP_SD_Init+0x3c>
  {
    /* Enable wide operation */
    if (HAL_SD_ConfigWideBusOperation(&hsd1, SDMMC_BUS_WIDE_4B) != HAL_OK)
 800db14:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800db18:	4806      	ldr	r0, [pc, #24]	; (800db34 <BSP_SD_Init+0x48>)
 800db1a:	f7fb fe4f 	bl	80097bc <HAL_SD_ConfigWideBusOperation>
 800db1e:	4603      	mov	r3, r0
 800db20:	2b00      	cmp	r3, #0
 800db22:	d001      	beq.n	800db28 <BSP_SD_Init+0x3c>
    {
      sd_state = MSD_ERROR;
 800db24:	2301      	movs	r3, #1
 800db26:	71fb      	strb	r3, [r7, #7]
    }
  }

  return sd_state;
 800db28:	79fb      	ldrb	r3, [r7, #7]
}
 800db2a:	4618      	mov	r0, r3
 800db2c:	3708      	adds	r7, #8
 800db2e:	46bd      	mov	sp, r7
 800db30:	bd80      	pop	{r7, pc}
 800db32:	bf00      	nop
 800db34:	2400030c 	.word	0x2400030c

0800db38 <BSP_SD_ReadBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to read
  * @param  Timeout: Timeout for read operation
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 800db38:	b580      	push	{r7, lr}
 800db3a:	b088      	sub	sp, #32
 800db3c:	af02      	add	r7, sp, #8
 800db3e:	60f8      	str	r0, [r7, #12]
 800db40:	60b9      	str	r1, [r7, #8]
 800db42:	607a      	str	r2, [r7, #4]
 800db44:	603b      	str	r3, [r7, #0]
  uint8_t sd_state = MSD_OK;
 800db46:	2300      	movs	r3, #0
 800db48:	75fb      	strb	r3, [r7, #23]

  if (HAL_SD_ReadBlocks(&hsd1, (uint8_t *)pData, ReadAddr, NumOfBlocks, Timeout) != HAL_OK)
 800db4a:	683b      	ldr	r3, [r7, #0]
 800db4c:	9300      	str	r3, [sp, #0]
 800db4e:	687b      	ldr	r3, [r7, #4]
 800db50:	68ba      	ldr	r2, [r7, #8]
 800db52:	68f9      	ldr	r1, [r7, #12]
 800db54:	4806      	ldr	r0, [pc, #24]	; (800db70 <BSP_SD_ReadBlocks+0x38>)
 800db56:	f7fb f887 	bl	8008c68 <HAL_SD_ReadBlocks>
 800db5a:	4603      	mov	r3, r0
 800db5c:	2b00      	cmp	r3, #0
 800db5e:	d001      	beq.n	800db64 <BSP_SD_ReadBlocks+0x2c>
  {
    sd_state = MSD_ERROR;
 800db60:	2301      	movs	r3, #1
 800db62:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 800db64:	7dfb      	ldrb	r3, [r7, #23]
}
 800db66:	4618      	mov	r0, r3
 800db68:	3718      	adds	r7, #24
 800db6a:	46bd      	mov	sp, r7
 800db6c:	bd80      	pop	{r7, pc}
 800db6e:	bf00      	nop
 800db70:	2400030c 	.word	0x2400030c

0800db74 <BSP_SD_WriteBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to write
  * @param  Timeout: Timeout for write operation
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 800db74:	b580      	push	{r7, lr}
 800db76:	b088      	sub	sp, #32
 800db78:	af02      	add	r7, sp, #8
 800db7a:	60f8      	str	r0, [r7, #12]
 800db7c:	60b9      	str	r1, [r7, #8]
 800db7e:	607a      	str	r2, [r7, #4]
 800db80:	603b      	str	r3, [r7, #0]
  uint8_t sd_state = MSD_OK;
 800db82:	2300      	movs	r3, #0
 800db84:	75fb      	strb	r3, [r7, #23]

  if (HAL_SD_WriteBlocks(&hsd1, (uint8_t *)pData, WriteAddr, NumOfBlocks, Timeout) != HAL_OK)
 800db86:	683b      	ldr	r3, [r7, #0]
 800db88:	9300      	str	r3, [sp, #0]
 800db8a:	687b      	ldr	r3, [r7, #4]
 800db8c:	68ba      	ldr	r2, [r7, #8]
 800db8e:	68f9      	ldr	r1, [r7, #12]
 800db90:	4806      	ldr	r0, [pc, #24]	; (800dbac <BSP_SD_WriteBlocks+0x38>)
 800db92:	f7fb f9f3 	bl	8008f7c <HAL_SD_WriteBlocks>
 800db96:	4603      	mov	r3, r0
 800db98:	2b00      	cmp	r3, #0
 800db9a:	d001      	beq.n	800dba0 <BSP_SD_WriteBlocks+0x2c>
  {
    sd_state = MSD_ERROR;
 800db9c:	2301      	movs	r3, #1
 800db9e:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 800dba0:	7dfb      	ldrb	r3, [r7, #23]
}
 800dba2:	4618      	mov	r0, r3
 800dba4:	3718      	adds	r7, #24
 800dba6:	46bd      	mov	sp, r7
 800dba8:	bd80      	pop	{r7, pc}
 800dbaa:	bf00      	nop
 800dbac:	2400030c 	.word	0x2400030c

0800dbb0 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 800dbb0:	b580      	push	{r7, lr}
 800dbb2:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd1) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 800dbb4:	4805      	ldr	r0, [pc, #20]	; (800dbcc <BSP_SD_GetCardState+0x1c>)
 800dbb6:	f7fb feab 	bl	8009910 <HAL_SD_GetCardState>
 800dbba:	4603      	mov	r3, r0
 800dbbc:	2b04      	cmp	r3, #4
 800dbbe:	bf14      	ite	ne
 800dbc0:	2301      	movne	r3, #1
 800dbc2:	2300      	moveq	r3, #0
 800dbc4:	b2db      	uxtb	r3, r3
}
 800dbc6:	4618      	mov	r0, r3
 800dbc8:	bd80      	pop	{r7, pc}
 800dbca:	bf00      	nop
 800dbcc:	2400030c 	.word	0x2400030c

0800dbd0 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 800dbd0:	b580      	push	{r7, lr}
 800dbd2:	b082      	sub	sp, #8
 800dbd4:	af00      	add	r7, sp, #0
 800dbd6:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd1, CardInfo);
 800dbd8:	6879      	ldr	r1, [r7, #4]
 800dbda:	4803      	ldr	r0, [pc, #12]	; (800dbe8 <BSP_SD_GetCardInfo+0x18>)
 800dbdc:	f7fb fdc2 	bl	8009764 <HAL_SD_GetCardInfo>
}
 800dbe0:	bf00      	nop
 800dbe2:	3708      	adds	r7, #8
 800dbe4:	46bd      	mov	sp, r7
 800dbe6:	bd80      	pop	{r7, pc}
 800dbe8:	2400030c 	.word	0x2400030c

0800dbec <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 800dbec:	b580      	push	{r7, lr}
 800dbee:	b082      	sub	sp, #8
 800dbf0:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 800dbf2:	2301      	movs	r3, #1
 800dbf4:	71fb      	strb	r3, [r7, #7]

  if (BSP_PlatformIsDetected() == 0x0)
 800dbf6:	f000 f80b 	bl	800dc10 <BSP_PlatformIsDetected>
 800dbfa:	4603      	mov	r3, r0
 800dbfc:	2b00      	cmp	r3, #0
 800dbfe:	d101      	bne.n	800dc04 <BSP_SD_IsDetected+0x18>
  {
    status = SD_NOT_PRESENT;
 800dc00:	2300      	movs	r3, #0
 800dc02:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 800dc04:	79fb      	ldrb	r3, [r7, #7]
 800dc06:	b2db      	uxtb	r3, r3
}
 800dc08:	4618      	mov	r0, r3
 800dc0a:	3708      	adds	r7, #8
 800dc0c:	46bd      	mov	sp, r7
 800dc0e:	bd80      	pop	{r7, pc}

0800dc10 <BSP_PlatformIsDetected>:
  *
  ******************************************************************************
*/
#include "fatfs_platform.h"

uint8_t	BSP_PlatformIsDetected(void) {
 800dc10:	b580      	push	{r7, lr}
 800dc12:	b082      	sub	sp, #8
 800dc14:	af00      	add	r7, sp, #0
    uint8_t status = SD_PRESENT;
 800dc16:	2301      	movs	r3, #1
 800dc18:	71fb      	strb	r3, [r7, #7]
    /* Check SD card detect pin */
    if(HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) != GPIO_PIN_RESET)
 800dc1a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800dc1e:	4806      	ldr	r0, [pc, #24]	; (800dc38 <BSP_PlatformIsDetected+0x28>)
 800dc20:	f7f6 fe08 	bl	8004834 <HAL_GPIO_ReadPin>
 800dc24:	4603      	mov	r3, r0
 800dc26:	2b00      	cmp	r3, #0
 800dc28:	d001      	beq.n	800dc2e <BSP_PlatformIsDetected+0x1e>
    {
        status = SD_NOT_PRESENT;
 800dc2a:	2300      	movs	r3, #0
 800dc2c:	71fb      	strb	r3, [r7, #7]
    }
    /* USER CODE BEGIN 1 */
    /* user code can be inserted here */
    /* USER CODE END 1 */
    return status;
 800dc2e:	79fb      	ldrb	r3, [r7, #7]
}
 800dc30:	4618      	mov	r0, r3
 800dc32:	3708      	adds	r7, #8
 800dc34:	46bd      	mov	sp, r7
 800dc36:	bd80      	pop	{r7, pc}
 800dc38:	58020000 	.word	0x58020000

0800dc3c <SD_CheckStatus>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static DSTATUS SD_CheckStatus(BYTE lun)
{
 800dc3c:	b580      	push	{r7, lr}
 800dc3e:	b082      	sub	sp, #8
 800dc40:	af00      	add	r7, sp, #0
 800dc42:	4603      	mov	r3, r0
 800dc44:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 800dc46:	4b0b      	ldr	r3, [pc, #44]	; (800dc74 <SD_CheckStatus+0x38>)
 800dc48:	2201      	movs	r2, #1
 800dc4a:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 800dc4c:	f7ff ffb0 	bl	800dbb0 <BSP_SD_GetCardState>
 800dc50:	4603      	mov	r3, r0
 800dc52:	2b00      	cmp	r3, #0
 800dc54:	d107      	bne.n	800dc66 <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 800dc56:	4b07      	ldr	r3, [pc, #28]	; (800dc74 <SD_CheckStatus+0x38>)
 800dc58:	781b      	ldrb	r3, [r3, #0]
 800dc5a:	b2db      	uxtb	r3, r3
 800dc5c:	f023 0301 	bic.w	r3, r3, #1
 800dc60:	b2da      	uxtb	r2, r3
 800dc62:	4b04      	ldr	r3, [pc, #16]	; (800dc74 <SD_CheckStatus+0x38>)
 800dc64:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 800dc66:	4b03      	ldr	r3, [pc, #12]	; (800dc74 <SD_CheckStatus+0x38>)
 800dc68:	781b      	ldrb	r3, [r3, #0]
 800dc6a:	b2db      	uxtb	r3, r3
}
 800dc6c:	4618      	mov	r0, r3
 800dc6e:	3708      	adds	r7, #8
 800dc70:	46bd      	mov	sp, r7
 800dc72:	bd80      	pop	{r7, pc}
 800dc74:	2400000d 	.word	0x2400000d

0800dc78 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 800dc78:	b580      	push	{r7, lr}
 800dc7a:	b082      	sub	sp, #8
 800dc7c:	af00      	add	r7, sp, #0
 800dc7e:	4603      	mov	r3, r0
 800dc80:	71fb      	strb	r3, [r7, #7]
Stat = STA_NOINIT;
 800dc82:	4b0b      	ldr	r3, [pc, #44]	; (800dcb0 <SD_initialize+0x38>)
 800dc84:	2201      	movs	r2, #1
 800dc86:	701a      	strb	r2, [r3, #0]

#if !defined(DISABLE_SD_INIT)

  if(BSP_SD_Init() == MSD_OK)
 800dc88:	f7ff ff30 	bl	800daec <BSP_SD_Init>
 800dc8c:	4603      	mov	r3, r0
 800dc8e:	2b00      	cmp	r3, #0
 800dc90:	d107      	bne.n	800dca2 <SD_initialize+0x2a>
  {
    Stat = SD_CheckStatus(lun);
 800dc92:	79fb      	ldrb	r3, [r7, #7]
 800dc94:	4618      	mov	r0, r3
 800dc96:	f7ff ffd1 	bl	800dc3c <SD_CheckStatus>
 800dc9a:	4603      	mov	r3, r0
 800dc9c:	461a      	mov	r2, r3
 800dc9e:	4b04      	ldr	r3, [pc, #16]	; (800dcb0 <SD_initialize+0x38>)
 800dca0:	701a      	strb	r2, [r3, #0]

#else
  Stat = SD_CheckStatus(lun);
#endif

  return Stat;
 800dca2:	4b03      	ldr	r3, [pc, #12]	; (800dcb0 <SD_initialize+0x38>)
 800dca4:	781b      	ldrb	r3, [r3, #0]
 800dca6:	b2db      	uxtb	r3, r3
}
 800dca8:	4618      	mov	r0, r3
 800dcaa:	3708      	adds	r7, #8
 800dcac:	46bd      	mov	sp, r7
 800dcae:	bd80      	pop	{r7, pc}
 800dcb0:	2400000d 	.word	0x2400000d

0800dcb4 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 800dcb4:	b580      	push	{r7, lr}
 800dcb6:	b082      	sub	sp, #8
 800dcb8:	af00      	add	r7, sp, #0
 800dcba:	4603      	mov	r3, r0
 800dcbc:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 800dcbe:	79fb      	ldrb	r3, [r7, #7]
 800dcc0:	4618      	mov	r0, r3
 800dcc2:	f7ff ffbb 	bl	800dc3c <SD_CheckStatus>
 800dcc6:	4603      	mov	r3, r0
}
 800dcc8:	4618      	mov	r0, r3
 800dcca:	3708      	adds	r7, #8
 800dccc:	46bd      	mov	sp, r7
 800dcce:	bd80      	pop	{r7, pc}

0800dcd0 <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 800dcd0:	b580      	push	{r7, lr}
 800dcd2:	b086      	sub	sp, #24
 800dcd4:	af00      	add	r7, sp, #0
 800dcd6:	60b9      	str	r1, [r7, #8]
 800dcd8:	607a      	str	r2, [r7, #4]
 800dcda:	603b      	str	r3, [r7, #0]
 800dcdc:	4603      	mov	r3, r0
 800dcde:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800dce0:	2301      	movs	r3, #1
 800dce2:	75fb      	strb	r3, [r7, #23]

  if(BSP_SD_ReadBlocks((uint32_t*)buff,
 800dce4:	f04f 33ff 	mov.w	r3, #4294967295
 800dce8:	683a      	ldr	r2, [r7, #0]
 800dcea:	6879      	ldr	r1, [r7, #4]
 800dcec:	68b8      	ldr	r0, [r7, #8]
 800dcee:	f7ff ff23 	bl	800db38 <BSP_SD_ReadBlocks>
 800dcf2:	4603      	mov	r3, r0
 800dcf4:	2b00      	cmp	r3, #0
 800dcf6:	d107      	bne.n	800dd08 <SD_read+0x38>
                       (uint32_t) (sector),
                       count, SD_TIMEOUT) == MSD_OK)
  {
    /* wait until the read operation is finished */
    while(BSP_SD_GetCardState()!= MSD_OK)
 800dcf8:	bf00      	nop
 800dcfa:	f7ff ff59 	bl	800dbb0 <BSP_SD_GetCardState>
 800dcfe:	4603      	mov	r3, r0
 800dd00:	2b00      	cmp	r3, #0
 800dd02:	d1fa      	bne.n	800dcfa <SD_read+0x2a>
    {
    }
    res = RES_OK;
 800dd04:	2300      	movs	r3, #0
 800dd06:	75fb      	strb	r3, [r7, #23]
  }

  return res;
 800dd08:	7dfb      	ldrb	r3, [r7, #23]
}
 800dd0a:	4618      	mov	r0, r3
 800dd0c:	3718      	adds	r7, #24
 800dd0e:	46bd      	mov	sp, r7
 800dd10:	bd80      	pop	{r7, pc}

0800dd12 <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 800dd12:	b580      	push	{r7, lr}
 800dd14:	b086      	sub	sp, #24
 800dd16:	af00      	add	r7, sp, #0
 800dd18:	60b9      	str	r1, [r7, #8]
 800dd1a:	607a      	str	r2, [r7, #4]
 800dd1c:	603b      	str	r3, [r7, #0]
 800dd1e:	4603      	mov	r3, r0
 800dd20:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800dd22:	2301      	movs	r3, #1
 800dd24:	75fb      	strb	r3, [r7, #23]

  if(BSP_SD_WriteBlocks((uint32_t*)buff,
 800dd26:	f04f 33ff 	mov.w	r3, #4294967295
 800dd2a:	683a      	ldr	r2, [r7, #0]
 800dd2c:	6879      	ldr	r1, [r7, #4]
 800dd2e:	68b8      	ldr	r0, [r7, #8]
 800dd30:	f7ff ff20 	bl	800db74 <BSP_SD_WriteBlocks>
 800dd34:	4603      	mov	r3, r0
 800dd36:	2b00      	cmp	r3, #0
 800dd38:	d107      	bne.n	800dd4a <SD_write+0x38>
                        (uint32_t)(sector),
                        count, SD_TIMEOUT) == MSD_OK)
  {
	/* wait until the Write operation is finished */
    while(BSP_SD_GetCardState() != MSD_OK)
 800dd3a:	bf00      	nop
 800dd3c:	f7ff ff38 	bl	800dbb0 <BSP_SD_GetCardState>
 800dd40:	4603      	mov	r3, r0
 800dd42:	2b00      	cmp	r3, #0
 800dd44:	d1fa      	bne.n	800dd3c <SD_write+0x2a>
    {
    }
    res = RES_OK;
 800dd46:	2300      	movs	r3, #0
 800dd48:	75fb      	strb	r3, [r7, #23]
  }

  return res;
 800dd4a:	7dfb      	ldrb	r3, [r7, #23]
}
 800dd4c:	4618      	mov	r0, r3
 800dd4e:	3718      	adds	r7, #24
 800dd50:	46bd      	mov	sp, r7
 800dd52:	bd80      	pop	{r7, pc}

0800dd54 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 800dd54:	b580      	push	{r7, lr}
 800dd56:	b08c      	sub	sp, #48	; 0x30
 800dd58:	af00      	add	r7, sp, #0
 800dd5a:	4603      	mov	r3, r0
 800dd5c:	603a      	str	r2, [r7, #0]
 800dd5e:	71fb      	strb	r3, [r7, #7]
 800dd60:	460b      	mov	r3, r1
 800dd62:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 800dd64:	2301      	movs	r3, #1
 800dd66:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 800dd6a:	4b25      	ldr	r3, [pc, #148]	; (800de00 <SD_ioctl+0xac>)
 800dd6c:	781b      	ldrb	r3, [r3, #0]
 800dd6e:	b2db      	uxtb	r3, r3
 800dd70:	f003 0301 	and.w	r3, r3, #1
 800dd74:	2b00      	cmp	r3, #0
 800dd76:	d001      	beq.n	800dd7c <SD_ioctl+0x28>
 800dd78:	2303      	movs	r3, #3
 800dd7a:	e03c      	b.n	800ddf6 <SD_ioctl+0xa2>

  switch (cmd)
 800dd7c:	79bb      	ldrb	r3, [r7, #6]
 800dd7e:	2b03      	cmp	r3, #3
 800dd80:	d834      	bhi.n	800ddec <SD_ioctl+0x98>
 800dd82:	a201      	add	r2, pc, #4	; (adr r2, 800dd88 <SD_ioctl+0x34>)
 800dd84:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dd88:	0800dd99 	.word	0x0800dd99
 800dd8c:	0800dda1 	.word	0x0800dda1
 800dd90:	0800ddb9 	.word	0x0800ddb9
 800dd94:	0800ddd3 	.word	0x0800ddd3
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 800dd98:	2300      	movs	r3, #0
 800dd9a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800dd9e:	e028      	b.n	800ddf2 <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 800dda0:	f107 0308 	add.w	r3, r7, #8
 800dda4:	4618      	mov	r0, r3
 800dda6:	f7ff ff13 	bl	800dbd0 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 800ddaa:	6a3a      	ldr	r2, [r7, #32]
 800ddac:	683b      	ldr	r3, [r7, #0]
 800ddae:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800ddb0:	2300      	movs	r3, #0
 800ddb2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800ddb6:	e01c      	b.n	800ddf2 <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800ddb8:	f107 0308 	add.w	r3, r7, #8
 800ddbc:	4618      	mov	r0, r3
 800ddbe:	f7ff ff07 	bl	800dbd0 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 800ddc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ddc4:	b29a      	uxth	r2, r3
 800ddc6:	683b      	ldr	r3, [r7, #0]
 800ddc8:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 800ddca:	2300      	movs	r3, #0
 800ddcc:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800ddd0:	e00f      	b.n	800ddf2 <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800ddd2:	f107 0308 	add.w	r3, r7, #8
 800ddd6:	4618      	mov	r0, r3
 800ddd8:	f7ff fefa 	bl	800dbd0 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 800dddc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ddde:	0a5a      	lsrs	r2, r3, #9
 800dde0:	683b      	ldr	r3, [r7, #0]
 800dde2:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800dde4:	2300      	movs	r3, #0
 800dde6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800ddea:	e002      	b.n	800ddf2 <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 800ddec:	2304      	movs	r3, #4
 800ddee:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  return res;
 800ddf2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800ddf6:	4618      	mov	r0, r3
 800ddf8:	3730      	adds	r7, #48	; 0x30
 800ddfa:	46bd      	mov	sp, r7
 800ddfc:	bd80      	pop	{r7, pc}
 800ddfe:	bf00      	nop
 800de00:	2400000d 	.word	0x2400000d

0800de04 <USBD_MSC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
uint8_t USBD_MSC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800de04:	b580      	push	{r7, lr}
 800de06:	b084      	sub	sp, #16
 800de08:	af00      	add	r7, sp, #0
 800de0a:	6078      	str	r0, [r7, #4]
 800de0c:	460b      	mov	r3, r1
 800de0e:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_MSC_BOT_HandleTypeDef *hmsc;

  hmsc = USBD_malloc(sizeof(USBD_MSC_BOT_HandleTypeDef));
 800de10:	f44f 701d 	mov.w	r0, #628	; 0x274
 800de14:	f003 faac 	bl	8011370 <malloc>
 800de18:	4603      	mov	r3, r0
 800de1a:	60fb      	str	r3, [r7, #12]

  if (hmsc == NULL)
 800de1c:	68fb      	ldr	r3, [r7, #12]
 800de1e:	2b00      	cmp	r3, #0
 800de20:	d105      	bne.n	800de2e <USBD_MSC_Init+0x2a>
  {
    pdev->pClassData = NULL;
 800de22:	687b      	ldr	r3, [r7, #4]
 800de24:	2200      	movs	r2, #0
 800de26:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 800de2a:	2302      	movs	r3, #2
 800de2c:	e034      	b.n	800de98 <USBD_MSC_Init+0x94>
  }

  pdev->pClassData = (void *)hmsc;
 800de2e:	687b      	ldr	r3, [r7, #4]
 800de30:	68fa      	ldr	r2, [r7, #12]
 800de32:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800de36:	687b      	ldr	r3, [r7, #4]
 800de38:	7c1b      	ldrb	r3, [r3, #16]
 800de3a:	2b00      	cmp	r3, #0
 800de3c:	d115      	bne.n	800de6a <USBD_MSC_Init+0x66>
  {
    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, MSC_EPOUT_ADDR, USBD_EP_TYPE_BULK, MSC_MAX_HS_PACKET);
 800de3e:	f44f 7300 	mov.w	r3, #512	; 0x200
 800de42:	2202      	movs	r2, #2
 800de44:	2101      	movs	r1, #1
 800de46:	6878      	ldr	r0, [r7, #4]
 800de48:	f003 f8f9 	bl	801103e <USBD_LL_OpenEP>
    pdev->ep_out[MSC_EPOUT_ADDR & 0xFU].is_used = 1U;
 800de4c:	687b      	ldr	r3, [r7, #4]
 800de4e:	2201      	movs	r2, #1
 800de50:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, MSC_EPIN_ADDR, USBD_EP_TYPE_BULK, MSC_MAX_HS_PACKET);
 800de54:	f44f 7300 	mov.w	r3, #512	; 0x200
 800de58:	2202      	movs	r2, #2
 800de5a:	2181      	movs	r1, #129	; 0x81
 800de5c:	6878      	ldr	r0, [r7, #4]
 800de5e:	f003 f8ee 	bl	801103e <USBD_LL_OpenEP>
    pdev->ep_in[MSC_EPIN_ADDR & 0xFU].is_used = 1U;
 800de62:	687b      	ldr	r3, [r7, #4]
 800de64:	2201      	movs	r2, #1
 800de66:	871a      	strh	r2, [r3, #56]	; 0x38
 800de68:	e012      	b.n	800de90 <USBD_MSC_Init+0x8c>
  }
  else
  {
    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, MSC_EPOUT_ADDR, USBD_EP_TYPE_BULK, MSC_MAX_FS_PACKET);
 800de6a:	2340      	movs	r3, #64	; 0x40
 800de6c:	2202      	movs	r2, #2
 800de6e:	2101      	movs	r1, #1
 800de70:	6878      	ldr	r0, [r7, #4]
 800de72:	f003 f8e4 	bl	801103e <USBD_LL_OpenEP>
    pdev->ep_out[MSC_EPOUT_ADDR & 0xFU].is_used = 1U;
 800de76:	687b      	ldr	r3, [r7, #4]
 800de78:	2201      	movs	r2, #1
 800de7a:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, MSC_EPIN_ADDR, USBD_EP_TYPE_BULK, MSC_MAX_FS_PACKET);
 800de7e:	2340      	movs	r3, #64	; 0x40
 800de80:	2202      	movs	r2, #2
 800de82:	2181      	movs	r1, #129	; 0x81
 800de84:	6878      	ldr	r0, [r7, #4]
 800de86:	f003 f8da 	bl	801103e <USBD_LL_OpenEP>
    pdev->ep_in[MSC_EPIN_ADDR & 0xFU].is_used = 1U;
 800de8a:	687b      	ldr	r3, [r7, #4]
 800de8c:	2201      	movs	r2, #1
 800de8e:	871a      	strh	r2, [r3, #56]	; 0x38
  }

  /* Init the BOT  layer */
  MSC_BOT_Init(pdev);
 800de90:	6878      	ldr	r0, [r7, #4]
 800de92:	f000 f98e 	bl	800e1b2 <MSC_BOT_Init>

  return (uint8_t)USBD_OK;
 800de96:	2300      	movs	r3, #0
}
 800de98:	4618      	mov	r0, r3
 800de9a:	3710      	adds	r7, #16
 800de9c:	46bd      	mov	sp, r7
 800de9e:	bd80      	pop	{r7, pc}

0800dea0 <USBD_MSC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
uint8_t USBD_MSC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800dea0:	b580      	push	{r7, lr}
 800dea2:	b082      	sub	sp, #8
 800dea4:	af00      	add	r7, sp, #0
 800dea6:	6078      	str	r0, [r7, #4]
 800dea8:	460b      	mov	r3, r1
 800deaa:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  /* Close MSC EPs */
  (void)USBD_LL_CloseEP(pdev, MSC_EPOUT_ADDR);
 800deac:	2101      	movs	r1, #1
 800deae:	6878      	ldr	r0, [r7, #4]
 800deb0:	f003 f8eb 	bl	801108a <USBD_LL_CloseEP>
  pdev->ep_out[MSC_EPOUT_ADDR & 0xFU].is_used = 0U;
 800deb4:	687b      	ldr	r3, [r7, #4]
 800deb6:	2200      	movs	r2, #0
 800deb8:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, MSC_EPIN_ADDR);
 800debc:	2181      	movs	r1, #129	; 0x81
 800debe:	6878      	ldr	r0, [r7, #4]
 800dec0:	f003 f8e3 	bl	801108a <USBD_LL_CloseEP>
  pdev->ep_in[MSC_EPIN_ADDR & 0xFU].is_used = 0U;
 800dec4:	687b      	ldr	r3, [r7, #4]
 800dec6:	2200      	movs	r2, #0
 800dec8:	871a      	strh	r2, [r3, #56]	; 0x38

  /* De-Init the BOT layer */
  MSC_BOT_DeInit(pdev);
 800deca:	6878      	ldr	r0, [r7, #4]
 800decc:	f000 f9c7 	bl	800e25e <MSC_BOT_DeInit>

  /* Free MSC Class Resources */
  if (pdev->pClassData != NULL)
 800ded0:	687b      	ldr	r3, [r7, #4]
 800ded2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800ded6:	2b00      	cmp	r3, #0
 800ded8:	d009      	beq.n	800deee <USBD_MSC_DeInit+0x4e>
  {
    (void)USBD_free(pdev->pClassData);
 800deda:	687b      	ldr	r3, [r7, #4]
 800dedc:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800dee0:	4618      	mov	r0, r3
 800dee2:	f003 fa4d 	bl	8011380 <free>
    pdev->pClassData = NULL;
 800dee6:	687b      	ldr	r3, [r7, #4]
 800dee8:	2200      	movs	r2, #0
 800deea:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 800deee:	2300      	movs	r3, #0
}
 800def0:	4618      	mov	r0, r3
 800def2:	3708      	adds	r7, #8
 800def4:	46bd      	mov	sp, r7
 800def6:	bd80      	pop	{r7, pc}

0800def8 <USBD_MSC_Setup>:
* @param  pdev: device instance
* @param  req: USB request
* @retval status
*/
uint8_t USBD_MSC_Setup(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800def8:	b580      	push	{r7, lr}
 800defa:	b086      	sub	sp, #24
 800defc:	af00      	add	r7, sp, #0
 800defe:	6078      	str	r0, [r7, #4]
 800df00:	6039      	str	r1, [r7, #0]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 800df02:	687b      	ldr	r3, [r7, #4]
 800df04:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800df08:	613b      	str	r3, [r7, #16]
  USBD_StatusTypeDef ret = USBD_OK;
 800df0a:	2300      	movs	r3, #0
 800df0c:	75fb      	strb	r3, [r7, #23]
  uint16_t status_info = 0U;
 800df0e:	2300      	movs	r3, #0
 800df10:	81fb      	strh	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800df12:	683b      	ldr	r3, [r7, #0]
 800df14:	781b      	ldrb	r3, [r3, #0]
 800df16:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800df1a:	2b00      	cmp	r3, #0
 800df1c:	d04d      	beq.n	800dfba <USBD_MSC_Setup+0xc2>
 800df1e:	2b20      	cmp	r3, #32
 800df20:	f040 80c6 	bne.w	800e0b0 <USBD_MSC_Setup+0x1b8>
  {
    /* Class request */
  case USB_REQ_TYPE_CLASS:
    switch (req->bRequest)
 800df24:	683b      	ldr	r3, [r7, #0]
 800df26:	785b      	ldrb	r3, [r3, #1]
 800df28:	2bfe      	cmp	r3, #254	; 0xfe
 800df2a:	d002      	beq.n	800df32 <USBD_MSC_Setup+0x3a>
 800df2c:	2bff      	cmp	r3, #255	; 0xff
 800df2e:	d024      	beq.n	800df7a <USBD_MSC_Setup+0x82>
 800df30:	e03b      	b.n	800dfaa <USBD_MSC_Setup+0xb2>
    {
    case BOT_GET_MAX_LUN:
      if ((req->wValue  == 0U) && (req->wLength == 1U) &&
 800df32:	683b      	ldr	r3, [r7, #0]
 800df34:	885b      	ldrh	r3, [r3, #2]
 800df36:	2b00      	cmp	r3, #0
 800df38:	d118      	bne.n	800df6c <USBD_MSC_Setup+0x74>
 800df3a:	683b      	ldr	r3, [r7, #0]
 800df3c:	88db      	ldrh	r3, [r3, #6]
 800df3e:	2b01      	cmp	r3, #1
 800df40:	d114      	bne.n	800df6c <USBD_MSC_Setup+0x74>
          ((req->bmRequest & 0x80U) == 0x80U))
 800df42:	683b      	ldr	r3, [r7, #0]
 800df44:	781b      	ldrb	r3, [r3, #0]
 800df46:	b25b      	sxtb	r3, r3
      if ((req->wValue  == 0U) && (req->wLength == 1U) &&
 800df48:	2b00      	cmp	r3, #0
 800df4a:	da0f      	bge.n	800df6c <USBD_MSC_Setup+0x74>
      {
        hmsc->max_lun = (uint32_t)((USBD_StorageTypeDef *)pdev->pUserData)->GetMaxLun();
 800df4c:	687b      	ldr	r3, [r7, #4]
 800df4e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800df52:	699b      	ldr	r3, [r3, #24]
 800df54:	4798      	blx	r3
 800df56:	4603      	mov	r3, r0
 800df58:	461a      	mov	r2, r3
 800df5a:	693b      	ldr	r3, [r7, #16]
 800df5c:	601a      	str	r2, [r3, #0]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&hmsc->max_lun, 1U);
 800df5e:	693b      	ldr	r3, [r7, #16]
 800df60:	2201      	movs	r2, #1
 800df62:	4619      	mov	r1, r3
 800df64:	6878      	ldr	r0, [r7, #4]
 800df66:	f002 fc58 	bl	801081a <USBD_CtlSendData>
      else
      {
        USBD_CtlError(pdev, req);
        ret = USBD_FAIL;
      }
      break;
 800df6a:	e025      	b.n	800dfb8 <USBD_MSC_Setup+0xc0>
        USBD_CtlError(pdev, req);
 800df6c:	6839      	ldr	r1, [r7, #0]
 800df6e:	6878      	ldr	r0, [r7, #4]
 800df70:	f002 fbe2 	bl	8010738 <USBD_CtlError>
        ret = USBD_FAIL;
 800df74:	2303      	movs	r3, #3
 800df76:	75fb      	strb	r3, [r7, #23]
      break;
 800df78:	e01e      	b.n	800dfb8 <USBD_MSC_Setup+0xc0>

    case BOT_RESET :
      if ((req->wValue  == 0U) && (req->wLength == 0U) &&
 800df7a:	683b      	ldr	r3, [r7, #0]
 800df7c:	885b      	ldrh	r3, [r3, #2]
 800df7e:	2b00      	cmp	r3, #0
 800df80:	d10c      	bne.n	800df9c <USBD_MSC_Setup+0xa4>
 800df82:	683b      	ldr	r3, [r7, #0]
 800df84:	88db      	ldrh	r3, [r3, #6]
 800df86:	2b00      	cmp	r3, #0
 800df88:	d108      	bne.n	800df9c <USBD_MSC_Setup+0xa4>
          ((req->bmRequest & 0x80U) != 0x80U))
 800df8a:	683b      	ldr	r3, [r7, #0]
 800df8c:	781b      	ldrb	r3, [r3, #0]
 800df8e:	b25b      	sxtb	r3, r3
      if ((req->wValue  == 0U) && (req->wLength == 0U) &&
 800df90:	2b00      	cmp	r3, #0
 800df92:	db03      	blt.n	800df9c <USBD_MSC_Setup+0xa4>
      {
        MSC_BOT_Reset(pdev);
 800df94:	6878      	ldr	r0, [r7, #4]
 800df96:	f000 f940 	bl	800e21a <MSC_BOT_Reset>
      else
      {
        USBD_CtlError(pdev, req);
        ret = USBD_FAIL;
      }
      break;
 800df9a:	e00d      	b.n	800dfb8 <USBD_MSC_Setup+0xc0>
        USBD_CtlError(pdev, req);
 800df9c:	6839      	ldr	r1, [r7, #0]
 800df9e:	6878      	ldr	r0, [r7, #4]
 800dfa0:	f002 fbca 	bl	8010738 <USBD_CtlError>
        ret = USBD_FAIL;
 800dfa4:	2303      	movs	r3, #3
 800dfa6:	75fb      	strb	r3, [r7, #23]
      break;
 800dfa8:	e006      	b.n	800dfb8 <USBD_MSC_Setup+0xc0>

    default:
      USBD_CtlError(pdev, req);
 800dfaa:	6839      	ldr	r1, [r7, #0]
 800dfac:	6878      	ldr	r0, [r7, #4]
 800dfae:	f002 fbc3 	bl	8010738 <USBD_CtlError>
      ret = USBD_FAIL;
 800dfb2:	2303      	movs	r3, #3
 800dfb4:	75fb      	strb	r3, [r7, #23]
      break;
 800dfb6:	bf00      	nop
    }
    break;
 800dfb8:	e081      	b.n	800e0be <USBD_MSC_Setup+0x1c6>
    /* Interface & Endpoint request */
  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 800dfba:	683b      	ldr	r3, [r7, #0]
 800dfbc:	785b      	ldrb	r3, [r3, #1]
 800dfbe:	2b0b      	cmp	r3, #11
 800dfc0:	d86d      	bhi.n	800e09e <USBD_MSC_Setup+0x1a6>
 800dfc2:	a201      	add	r2, pc, #4	; (adr r2, 800dfc8 <USBD_MSC_Setup+0xd0>)
 800dfc4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dfc8:	0800dff9 	.word	0x0800dff9
 800dfcc:	0800e06f 	.word	0x0800e06f
 800dfd0:	0800e09f 	.word	0x0800e09f
 800dfd4:	0800e09f 	.word	0x0800e09f
 800dfd8:	0800e09f 	.word	0x0800e09f
 800dfdc:	0800e09f 	.word	0x0800e09f
 800dfe0:	0800e09f 	.word	0x0800e09f
 800dfe4:	0800e09f 	.word	0x0800e09f
 800dfe8:	0800e09f 	.word	0x0800e09f
 800dfec:	0800e09f 	.word	0x0800e09f
 800dff0:	0800e021 	.word	0x0800e021
 800dff4:	0800e049 	.word	0x0800e049
    {
    case USB_REQ_GET_STATUS:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800dff8:	687b      	ldr	r3, [r7, #4]
 800dffa:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800dffe:	2b03      	cmp	r3, #3
 800e000:	d107      	bne.n	800e012 <USBD_MSC_Setup+0x11a>
      {
        (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800e002:	f107 030e 	add.w	r3, r7, #14
 800e006:	2202      	movs	r2, #2
 800e008:	4619      	mov	r1, r3
 800e00a:	6878      	ldr	r0, [r7, #4]
 800e00c:	f002 fc05 	bl	801081a <USBD_CtlSendData>
      else
      {
        USBD_CtlError(pdev, req);
        ret = USBD_FAIL;
      }
      break;
 800e010:	e04d      	b.n	800e0ae <USBD_MSC_Setup+0x1b6>
        USBD_CtlError(pdev, req);
 800e012:	6839      	ldr	r1, [r7, #0]
 800e014:	6878      	ldr	r0, [r7, #4]
 800e016:	f002 fb8f 	bl	8010738 <USBD_CtlError>
        ret = USBD_FAIL;
 800e01a:	2303      	movs	r3, #3
 800e01c:	75fb      	strb	r3, [r7, #23]
      break;
 800e01e:	e046      	b.n	800e0ae <USBD_MSC_Setup+0x1b6>

    case USB_REQ_GET_INTERFACE:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800e020:	687b      	ldr	r3, [r7, #4]
 800e022:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800e026:	2b03      	cmp	r3, #3
 800e028:	d107      	bne.n	800e03a <USBD_MSC_Setup+0x142>
      {
        (void)USBD_CtlSendData(pdev, (uint8_t *)&hmsc->interface, 1U);
 800e02a:	693b      	ldr	r3, [r7, #16]
 800e02c:	3304      	adds	r3, #4
 800e02e:	2201      	movs	r2, #1
 800e030:	4619      	mov	r1, r3
 800e032:	6878      	ldr	r0, [r7, #4]
 800e034:	f002 fbf1 	bl	801081a <USBD_CtlSendData>
      else
      {
        USBD_CtlError(pdev, req);
        ret = USBD_FAIL;
      }
      break;
 800e038:	e039      	b.n	800e0ae <USBD_MSC_Setup+0x1b6>
        USBD_CtlError(pdev, req);
 800e03a:	6839      	ldr	r1, [r7, #0]
 800e03c:	6878      	ldr	r0, [r7, #4]
 800e03e:	f002 fb7b 	bl	8010738 <USBD_CtlError>
        ret = USBD_FAIL;
 800e042:	2303      	movs	r3, #3
 800e044:	75fb      	strb	r3, [r7, #23]
      break;
 800e046:	e032      	b.n	800e0ae <USBD_MSC_Setup+0x1b6>

    case USB_REQ_SET_INTERFACE:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800e048:	687b      	ldr	r3, [r7, #4]
 800e04a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800e04e:	2b03      	cmp	r3, #3
 800e050:	d106      	bne.n	800e060 <USBD_MSC_Setup+0x168>
      {
        hmsc->interface = (uint8_t)(req->wValue);
 800e052:	683b      	ldr	r3, [r7, #0]
 800e054:	885b      	ldrh	r3, [r3, #2]
 800e056:	b2db      	uxtb	r3, r3
 800e058:	461a      	mov	r2, r3
 800e05a:	693b      	ldr	r3, [r7, #16]
 800e05c:	605a      	str	r2, [r3, #4]
      else
      {
        USBD_CtlError(pdev, req);
        ret = USBD_FAIL;
      }
      break;
 800e05e:	e026      	b.n	800e0ae <USBD_MSC_Setup+0x1b6>
        USBD_CtlError(pdev, req);
 800e060:	6839      	ldr	r1, [r7, #0]
 800e062:	6878      	ldr	r0, [r7, #4]
 800e064:	f002 fb68 	bl	8010738 <USBD_CtlError>
        ret = USBD_FAIL;
 800e068:	2303      	movs	r3, #3
 800e06a:	75fb      	strb	r3, [r7, #23]
      break;
 800e06c:	e01f      	b.n	800e0ae <USBD_MSC_Setup+0x1b6>

    case USB_REQ_CLEAR_FEATURE:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800e06e:	687b      	ldr	r3, [r7, #4]
 800e070:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800e074:	2b03      	cmp	r3, #3
 800e076:	d119      	bne.n	800e0ac <USBD_MSC_Setup+0x1b4>
      {
        if (req->wValue == USB_FEATURE_EP_HALT)
 800e078:	683b      	ldr	r3, [r7, #0]
 800e07a:	885b      	ldrh	r3, [r3, #2]
 800e07c:	2b00      	cmp	r3, #0
 800e07e:	d115      	bne.n	800e0ac <USBD_MSC_Setup+0x1b4>
        {
          /* Flush the FIFO */
          (void)USBD_LL_FlushEP(pdev, (uint8_t)req->wIndex);
 800e080:	683b      	ldr	r3, [r7, #0]
 800e082:	889b      	ldrh	r3, [r3, #4]
 800e084:	b2db      	uxtb	r3, r3
 800e086:	4619      	mov	r1, r3
 800e088:	6878      	ldr	r0, [r7, #4]
 800e08a:	f003 f81d 	bl	80110c8 <USBD_LL_FlushEP>

          /* Handle BOT error */
          MSC_BOT_CplClrFeature(pdev, (uint8_t)req->wIndex);
 800e08e:	683b      	ldr	r3, [r7, #0]
 800e090:	889b      	ldrh	r3, [r3, #4]
 800e092:	b2db      	uxtb	r3, r3
 800e094:	4619      	mov	r1, r3
 800e096:	6878      	ldr	r0, [r7, #4]
 800e098:	f000 fa5a 	bl	800e550 <MSC_BOT_CplClrFeature>
        }
      }
      break;
 800e09c:	e006      	b.n	800e0ac <USBD_MSC_Setup+0x1b4>

    default:
      USBD_CtlError(pdev, req);
 800e09e:	6839      	ldr	r1, [r7, #0]
 800e0a0:	6878      	ldr	r0, [r7, #4]
 800e0a2:	f002 fb49 	bl	8010738 <USBD_CtlError>
      ret = USBD_FAIL;
 800e0a6:	2303      	movs	r3, #3
 800e0a8:	75fb      	strb	r3, [r7, #23]
      break;
 800e0aa:	e000      	b.n	800e0ae <USBD_MSC_Setup+0x1b6>
      break;
 800e0ac:	bf00      	nop
    }
    break;
 800e0ae:	e006      	b.n	800e0be <USBD_MSC_Setup+0x1c6>

  default:
    USBD_CtlError(pdev, req);
 800e0b0:	6839      	ldr	r1, [r7, #0]
 800e0b2:	6878      	ldr	r0, [r7, #4]
 800e0b4:	f002 fb40 	bl	8010738 <USBD_CtlError>
    ret = USBD_FAIL;
 800e0b8:	2303      	movs	r3, #3
 800e0ba:	75fb      	strb	r3, [r7, #23]
    break;
 800e0bc:	bf00      	nop
  }

  return (uint8_t)ret;
 800e0be:	7dfb      	ldrb	r3, [r7, #23]
}
 800e0c0:	4618      	mov	r0, r3
 800e0c2:	3718      	adds	r7, #24
 800e0c4:	46bd      	mov	sp, r7
 800e0c6:	bd80      	pop	{r7, pc}

0800e0c8 <USBD_MSC_DataIn>:
* @param  pdev: device instance
* @param  epnum: endpoint index
* @retval status
*/
uint8_t USBD_MSC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800e0c8:	b580      	push	{r7, lr}
 800e0ca:	b082      	sub	sp, #8
 800e0cc:	af00      	add	r7, sp, #0
 800e0ce:	6078      	str	r0, [r7, #4]
 800e0d0:	460b      	mov	r3, r1
 800e0d2:	70fb      	strb	r3, [r7, #3]
  MSC_BOT_DataIn(pdev, epnum);
 800e0d4:	78fb      	ldrb	r3, [r7, #3]
 800e0d6:	4619      	mov	r1, r3
 800e0d8:	6878      	ldr	r0, [r7, #4]
 800e0da:	f000 f8d1 	bl	800e280 <MSC_BOT_DataIn>

  return (uint8_t)USBD_OK;
 800e0de:	2300      	movs	r3, #0
}
 800e0e0:	4618      	mov	r0, r3
 800e0e2:	3708      	adds	r7, #8
 800e0e4:	46bd      	mov	sp, r7
 800e0e6:	bd80      	pop	{r7, pc}

0800e0e8 <USBD_MSC_DataOut>:
* @param  pdev: device instance
* @param  epnum: endpoint index
* @retval status
*/
uint8_t USBD_MSC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800e0e8:	b580      	push	{r7, lr}
 800e0ea:	b082      	sub	sp, #8
 800e0ec:	af00      	add	r7, sp, #0
 800e0ee:	6078      	str	r0, [r7, #4]
 800e0f0:	460b      	mov	r3, r1
 800e0f2:	70fb      	strb	r3, [r7, #3]
  MSC_BOT_DataOut(pdev, epnum);
 800e0f4:	78fb      	ldrb	r3, [r7, #3]
 800e0f6:	4619      	mov	r1, r3
 800e0f8:	6878      	ldr	r0, [r7, #4]
 800e0fa:	f000 f8f2 	bl	800e2e2 <MSC_BOT_DataOut>

  return (uint8_t)USBD_OK;
 800e0fe:	2300      	movs	r3, #0
}
 800e100:	4618      	mov	r0, r3
 800e102:	3708      	adds	r7, #8
 800e104:	46bd      	mov	sp, r7
 800e106:	bd80      	pop	{r7, pc}

0800e108 <USBD_MSC_GetHSCfgDesc>:
*         return configuration descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t *USBD_MSC_GetHSCfgDesc(uint16_t *length)
{
 800e108:	b480      	push	{r7}
 800e10a:	b083      	sub	sp, #12
 800e10c:	af00      	add	r7, sp, #0
 800e10e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_MSC_CfgHSDesc);
 800e110:	687b      	ldr	r3, [r7, #4]
 800e112:	2220      	movs	r2, #32
 800e114:	801a      	strh	r2, [r3, #0]

  return USBD_MSC_CfgHSDesc;
 800e116:	4b03      	ldr	r3, [pc, #12]	; (800e124 <USBD_MSC_GetHSCfgDesc+0x1c>)
}
 800e118:	4618      	mov	r0, r3
 800e11a:	370c      	adds	r7, #12
 800e11c:	46bd      	mov	sp, r7
 800e11e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e122:	4770      	bx	lr
 800e124:	24000048 	.word	0x24000048

0800e128 <USBD_MSC_GetFSCfgDesc>:
*         return configuration descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t *USBD_MSC_GetFSCfgDesc(uint16_t *length)
{
 800e128:	b480      	push	{r7}
 800e12a:	b083      	sub	sp, #12
 800e12c:	af00      	add	r7, sp, #0
 800e12e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_MSC_CfgFSDesc);
 800e130:	687b      	ldr	r3, [r7, #4]
 800e132:	2220      	movs	r2, #32
 800e134:	801a      	strh	r2, [r3, #0]

  return USBD_MSC_CfgFSDesc;
 800e136:	4b03      	ldr	r3, [pc, #12]	; (800e144 <USBD_MSC_GetFSCfgDesc+0x1c>)
}
 800e138:	4618      	mov	r0, r3
 800e13a:	370c      	adds	r7, #12
 800e13c:	46bd      	mov	sp, r7
 800e13e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e142:	4770      	bx	lr
 800e144:	24000068 	.word	0x24000068

0800e148 <USBD_MSC_GetOtherSpeedCfgDesc>:
*         return other speed configuration descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t *USBD_MSC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800e148:	b480      	push	{r7}
 800e14a:	b083      	sub	sp, #12
 800e14c:	af00      	add	r7, sp, #0
 800e14e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_MSC_OtherSpeedCfgDesc);
 800e150:	687b      	ldr	r3, [r7, #4]
 800e152:	2220      	movs	r2, #32
 800e154:	801a      	strh	r2, [r3, #0]

  return USBD_MSC_OtherSpeedCfgDesc;
 800e156:	4b03      	ldr	r3, [pc, #12]	; (800e164 <USBD_MSC_GetOtherSpeedCfgDesc+0x1c>)
}
 800e158:	4618      	mov	r0, r3
 800e15a:	370c      	adds	r7, #12
 800e15c:	46bd      	mov	sp, r7
 800e15e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e162:	4770      	bx	lr
 800e164:	24000088 	.word	0x24000088

0800e168 <USBD_MSC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t *USBD_MSC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800e168:	b480      	push	{r7}
 800e16a:	b083      	sub	sp, #12
 800e16c:	af00      	add	r7, sp, #0
 800e16e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_MSC_DeviceQualifierDesc);
 800e170:	687b      	ldr	r3, [r7, #4]
 800e172:	220a      	movs	r2, #10
 800e174:	801a      	strh	r2, [r3, #0]

  return USBD_MSC_DeviceQualifierDesc;
 800e176:	4b03      	ldr	r3, [pc, #12]	; (800e184 <USBD_MSC_GetDeviceQualifierDescriptor+0x1c>)
}
 800e178:	4618      	mov	r0, r3
 800e17a:	370c      	adds	r7, #12
 800e17c:	46bd      	mov	sp, r7
 800e17e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e182:	4770      	bx	lr
 800e184:	240000a8 	.word	0x240000a8

0800e188 <USBD_MSC_RegisterStorage>:
* @brief  USBD_MSC_RegisterStorage
* @param  fops: storage callback
* @retval status
*/
uint8_t USBD_MSC_RegisterStorage(USBD_HandleTypeDef *pdev, USBD_StorageTypeDef *fops)
{
 800e188:	b480      	push	{r7}
 800e18a:	b083      	sub	sp, #12
 800e18c:	af00      	add	r7, sp, #0
 800e18e:	6078      	str	r0, [r7, #4]
 800e190:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800e192:	683b      	ldr	r3, [r7, #0]
 800e194:	2b00      	cmp	r3, #0
 800e196:	d101      	bne.n	800e19c <USBD_MSC_RegisterStorage+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800e198:	2303      	movs	r3, #3
 800e19a:	e004      	b.n	800e1a6 <USBD_MSC_RegisterStorage+0x1e>
  }

  pdev->pUserData = fops;
 800e19c:	687b      	ldr	r3, [r7, #4]
 800e19e:	683a      	ldr	r2, [r7, #0]
 800e1a0:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 800e1a4:	2300      	movs	r3, #0
}
 800e1a6:	4618      	mov	r0, r3
 800e1a8:	370c      	adds	r7, #12
 800e1aa:	46bd      	mov	sp, r7
 800e1ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e1b0:	4770      	bx	lr

0800e1b2 <MSC_BOT_Init>:
*         Initialize the BOT Process
* @param  pdev: device instance
* @retval None
*/
void MSC_BOT_Init(USBD_HandleTypeDef *pdev)
{
 800e1b2:	b580      	push	{r7, lr}
 800e1b4:	b084      	sub	sp, #16
 800e1b6:	af00      	add	r7, sp, #0
 800e1b8:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 800e1ba:	687b      	ldr	r3, [r7, #4]
 800e1bc:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800e1c0:	60fb      	str	r3, [r7, #12]

  hmsc->bot_state = USBD_BOT_IDLE;
 800e1c2:	68fb      	ldr	r3, [r7, #12]
 800e1c4:	2200      	movs	r2, #0
 800e1c6:	721a      	strb	r2, [r3, #8]
  hmsc->bot_status = USBD_BOT_STATUS_NORMAL;
 800e1c8:	68fb      	ldr	r3, [r7, #12]
 800e1ca:	2200      	movs	r2, #0
 800e1cc:	725a      	strb	r2, [r3, #9]

  hmsc->scsi_sense_tail = 0U;
 800e1ce:	68fb      	ldr	r3, [r7, #12]
 800e1d0:	2200      	movs	r2, #0
 800e1d2:	f883 2261 	strb.w	r2, [r3, #609]	; 0x261
  hmsc->scsi_sense_head = 0U;
 800e1d6:	68fb      	ldr	r3, [r7, #12]
 800e1d8:	2200      	movs	r2, #0
 800e1da:	f883 2260 	strb.w	r2, [r3, #608]	; 0x260
  hmsc->scsi_medium_state = SCSI_MEDIUM_UNLOCKED;
 800e1de:	68fb      	ldr	r3, [r7, #12]
 800e1e0:	2200      	movs	r2, #0
 800e1e2:	f883 2262 	strb.w	r2, [r3, #610]	; 0x262

  ((USBD_StorageTypeDef *)pdev->pUserData)->Init(0U);
 800e1e6:	687b      	ldr	r3, [r7, #4]
 800e1e8:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800e1ec:	681b      	ldr	r3, [r3, #0]
 800e1ee:	2000      	movs	r0, #0
 800e1f0:	4798      	blx	r3

  (void)USBD_LL_FlushEP(pdev, MSC_EPOUT_ADDR);
 800e1f2:	2101      	movs	r1, #1
 800e1f4:	6878      	ldr	r0, [r7, #4]
 800e1f6:	f002 ff67 	bl	80110c8 <USBD_LL_FlushEP>
  (void)USBD_LL_FlushEP(pdev, MSC_EPIN_ADDR);
 800e1fa:	2181      	movs	r1, #129	; 0x81
 800e1fc:	6878      	ldr	r0, [r7, #4]
 800e1fe:	f002 ff63 	bl	80110c8 <USBD_LL_FlushEP>

  /* Prapare EP to Receive First BOT Cmd */
  (void)USBD_LL_PrepareReceive(pdev, MSC_EPOUT_ADDR, (uint8_t *)&hmsc->cbw,
 800e202:	68fb      	ldr	r3, [r7, #12]
 800e204:	f503 7204 	add.w	r2, r3, #528	; 0x210
 800e208:	231f      	movs	r3, #31
 800e20a:	2101      	movs	r1, #1
 800e20c:	6878      	ldr	r0, [r7, #4]
 800e20e:	f003 f824 	bl	801125a <USBD_LL_PrepareReceive>
                               USBD_BOT_CBW_LENGTH);
}
 800e212:	bf00      	nop
 800e214:	3710      	adds	r7, #16
 800e216:	46bd      	mov	sp, r7
 800e218:	bd80      	pop	{r7, pc}

0800e21a <MSC_BOT_Reset>:
*         Reset the BOT Machine
* @param  pdev: device instance
* @retval  None
*/
void MSC_BOT_Reset(USBD_HandleTypeDef *pdev)
{
 800e21a:	b580      	push	{r7, lr}
 800e21c:	b084      	sub	sp, #16
 800e21e:	af00      	add	r7, sp, #0
 800e220:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 800e222:	687b      	ldr	r3, [r7, #4]
 800e224:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800e228:	60fb      	str	r3, [r7, #12]

  hmsc->bot_state  = USBD_BOT_IDLE;
 800e22a:	68fb      	ldr	r3, [r7, #12]
 800e22c:	2200      	movs	r2, #0
 800e22e:	721a      	strb	r2, [r3, #8]
  hmsc->bot_status = USBD_BOT_STATUS_RECOVERY;
 800e230:	68fb      	ldr	r3, [r7, #12]
 800e232:	2201      	movs	r2, #1
 800e234:	725a      	strb	r2, [r3, #9]

  (void)USBD_LL_ClearStallEP(pdev, MSC_EPIN_ADDR);
 800e236:	2181      	movs	r1, #129	; 0x81
 800e238:	6878      	ldr	r0, [r7, #4]
 800e23a:	f002 ff83 	bl	8011144 <USBD_LL_ClearStallEP>
  (void)USBD_LL_ClearStallEP(pdev, MSC_EPOUT_ADDR);
 800e23e:	2101      	movs	r1, #1
 800e240:	6878      	ldr	r0, [r7, #4]
 800e242:	f002 ff7f 	bl	8011144 <USBD_LL_ClearStallEP>

  /* Prapare EP to Receive First BOT Cmd */
  (void)USBD_LL_PrepareReceive(pdev, MSC_EPOUT_ADDR, (uint8_t *)&hmsc->cbw,
 800e246:	68fb      	ldr	r3, [r7, #12]
 800e248:	f503 7204 	add.w	r2, r3, #528	; 0x210
 800e24c:	231f      	movs	r3, #31
 800e24e:	2101      	movs	r1, #1
 800e250:	6878      	ldr	r0, [r7, #4]
 800e252:	f003 f802 	bl	801125a <USBD_LL_PrepareReceive>
                               USBD_BOT_CBW_LENGTH);
}
 800e256:	bf00      	nop
 800e258:	3710      	adds	r7, #16
 800e25a:	46bd      	mov	sp, r7
 800e25c:	bd80      	pop	{r7, pc}

0800e25e <MSC_BOT_DeInit>:
*         Deinitialize the BOT Machine
* @param  pdev: device instance
* @retval None
*/
void MSC_BOT_DeInit(USBD_HandleTypeDef  *pdev)
{
 800e25e:	b480      	push	{r7}
 800e260:	b085      	sub	sp, #20
 800e262:	af00      	add	r7, sp, #0
 800e264:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 800e266:	687b      	ldr	r3, [r7, #4]
 800e268:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800e26c:	60fb      	str	r3, [r7, #12]
  hmsc->bot_state = USBD_BOT_IDLE;
 800e26e:	68fb      	ldr	r3, [r7, #12]
 800e270:	2200      	movs	r2, #0
 800e272:	721a      	strb	r2, [r3, #8]
}
 800e274:	bf00      	nop
 800e276:	3714      	adds	r7, #20
 800e278:	46bd      	mov	sp, r7
 800e27a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e27e:	4770      	bx	lr

0800e280 <MSC_BOT_DataIn>:
* @param  pdev: device instance
* @param  epnum: endpoint index
* @retval None
*/
void MSC_BOT_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800e280:	b580      	push	{r7, lr}
 800e282:	b084      	sub	sp, #16
 800e284:	af00      	add	r7, sp, #0
 800e286:	6078      	str	r0, [r7, #4]
 800e288:	460b      	mov	r3, r1
 800e28a:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);

  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 800e28c:	687b      	ldr	r3, [r7, #4]
 800e28e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800e292:	60fb      	str	r3, [r7, #12]

  switch (hmsc->bot_state)
 800e294:	68fb      	ldr	r3, [r7, #12]
 800e296:	7a1b      	ldrb	r3, [r3, #8]
 800e298:	2b02      	cmp	r3, #2
 800e29a:	d004      	beq.n	800e2a6 <MSC_BOT_DataIn+0x26>
 800e29c:	2b02      	cmp	r3, #2
 800e29e:	db19      	blt.n	800e2d4 <MSC_BOT_DataIn+0x54>
 800e2a0:	2b04      	cmp	r3, #4
 800e2a2:	dc17      	bgt.n	800e2d4 <MSC_BOT_DataIn+0x54>
 800e2a4:	e011      	b.n	800e2ca <MSC_BOT_DataIn+0x4a>
  {
  case USBD_BOT_DATA_IN:
    if (SCSI_ProcessCmd(pdev, hmsc->cbw.bLUN, &hmsc->cbw.CB[0]) < 0)
 800e2a6:	68fb      	ldr	r3, [r7, #12]
 800e2a8:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 800e2ac:	68fb      	ldr	r3, [r7, #12]
 800e2ae:	f203 231f 	addw	r3, r3, #543	; 0x21f
 800e2b2:	461a      	mov	r2, r3
 800e2b4:	6878      	ldr	r0, [r7, #4]
 800e2b6:	f000 f973 	bl	800e5a0 <SCSI_ProcessCmd>
 800e2ba:	4603      	mov	r3, r0
 800e2bc:	2b00      	cmp	r3, #0
 800e2be:	da0b      	bge.n	800e2d8 <MSC_BOT_DataIn+0x58>
    {
      MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
 800e2c0:	2101      	movs	r1, #1
 800e2c2:	6878      	ldr	r0, [r7, #4]
 800e2c4:	f000 f8ea 	bl	800e49c <MSC_BOT_SendCSW>
    }
    break;
 800e2c8:	e006      	b.n	800e2d8 <MSC_BOT_DataIn+0x58>

  case USBD_BOT_SEND_DATA:
  case USBD_BOT_LAST_DATA_IN:
    MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_PASSED);
 800e2ca:	2100      	movs	r1, #0
 800e2cc:	6878      	ldr	r0, [r7, #4]
 800e2ce:	f000 f8e5 	bl	800e49c <MSC_BOT_SendCSW>
    break;
 800e2d2:	e002      	b.n	800e2da <MSC_BOT_DataIn+0x5a>

  default:
    break;
 800e2d4:	bf00      	nop
 800e2d6:	e000      	b.n	800e2da <MSC_BOT_DataIn+0x5a>
    break;
 800e2d8:	bf00      	nop
  }
}
 800e2da:	bf00      	nop
 800e2dc:	3710      	adds	r7, #16
 800e2de:	46bd      	mov	sp, r7
 800e2e0:	bd80      	pop	{r7, pc}

0800e2e2 <MSC_BOT_DataOut>:
* @param  pdev: device instance
* @param  epnum: endpoint index
* @retval None
*/
void MSC_BOT_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800e2e2:	b580      	push	{r7, lr}
 800e2e4:	b084      	sub	sp, #16
 800e2e6:	af00      	add	r7, sp, #0
 800e2e8:	6078      	str	r0, [r7, #4]
 800e2ea:	460b      	mov	r3, r1
 800e2ec:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);

  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 800e2ee:	687b      	ldr	r3, [r7, #4]
 800e2f0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800e2f4:	60fb      	str	r3, [r7, #12]

  switch (hmsc->bot_state)
 800e2f6:	68fb      	ldr	r3, [r7, #12]
 800e2f8:	7a1b      	ldrb	r3, [r3, #8]
 800e2fa:	2b00      	cmp	r3, #0
 800e2fc:	d002      	beq.n	800e304 <MSC_BOT_DataOut+0x22>
 800e2fe:	2b01      	cmp	r3, #1
 800e300:	d004      	beq.n	800e30c <MSC_BOT_DataOut+0x2a>
        MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
      }
      break;

    default:
      break;
 800e302:	e015      	b.n	800e330 <MSC_BOT_DataOut+0x4e>
      MSC_BOT_CBW_Decode(pdev);
 800e304:	6878      	ldr	r0, [r7, #4]
 800e306:	f000 f817 	bl	800e338 <MSC_BOT_CBW_Decode>
      break;
 800e30a:	e011      	b.n	800e330 <MSC_BOT_DataOut+0x4e>
      if (SCSI_ProcessCmd(pdev, hmsc->cbw.bLUN, &hmsc->cbw.CB[0]) < 0)
 800e30c:	68fb      	ldr	r3, [r7, #12]
 800e30e:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 800e312:	68fb      	ldr	r3, [r7, #12]
 800e314:	f203 231f 	addw	r3, r3, #543	; 0x21f
 800e318:	461a      	mov	r2, r3
 800e31a:	6878      	ldr	r0, [r7, #4]
 800e31c:	f000 f940 	bl	800e5a0 <SCSI_ProcessCmd>
 800e320:	4603      	mov	r3, r0
 800e322:	2b00      	cmp	r3, #0
 800e324:	da03      	bge.n	800e32e <MSC_BOT_DataOut+0x4c>
        MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
 800e326:	2101      	movs	r1, #1
 800e328:	6878      	ldr	r0, [r7, #4]
 800e32a:	f000 f8b7 	bl	800e49c <MSC_BOT_SendCSW>
      break;
 800e32e:	bf00      	nop
  }
}
 800e330:	bf00      	nop
 800e332:	3710      	adds	r7, #16
 800e334:	46bd      	mov	sp, r7
 800e336:	bd80      	pop	{r7, pc}

0800e338 <MSC_BOT_CBW_Decode>:
*         Decode the CBW command and set the BOT state machine accordingly
* @param  pdev: device instance
* @retval None
*/
static void  MSC_BOT_CBW_Decode(USBD_HandleTypeDef *pdev)
{
 800e338:	b580      	push	{r7, lr}
 800e33a:	b084      	sub	sp, #16
 800e33c:	af00      	add	r7, sp, #0
 800e33e:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 800e340:	687b      	ldr	r3, [r7, #4]
 800e342:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800e346:	60fb      	str	r3, [r7, #12]

  hmsc->csw.dTag = hmsc->cbw.dTag;
 800e348:	68fb      	ldr	r3, [r7, #12]
 800e34a:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 800e34e:	68fb      	ldr	r3, [r7, #12]
 800e350:	f8c3 2234 	str.w	r2, [r3, #564]	; 0x234
  hmsc->csw.dDataResidue = hmsc->cbw.dDataLength;
 800e354:	68fb      	ldr	r3, [r7, #12]
 800e356:	f8d3 2218 	ldr.w	r2, [r3, #536]	; 0x218
 800e35a:	68fb      	ldr	r3, [r7, #12]
 800e35c:	f8c3 2238 	str.w	r2, [r3, #568]	; 0x238

  if ((USBD_LL_GetRxDataSize(pdev, MSC_EPOUT_ADDR) != USBD_BOT_CBW_LENGTH) ||
 800e360:	2101      	movs	r1, #1
 800e362:	6878      	ldr	r0, [r7, #4]
 800e364:	f002 ff9a 	bl	801129c <USBD_LL_GetRxDataSize>
 800e368:	4603      	mov	r3, r0
 800e36a:	2b1f      	cmp	r3, #31
 800e36c:	d114      	bne.n	800e398 <MSC_BOT_CBW_Decode+0x60>
      (hmsc->cbw.dSignature != USBD_BOT_CBW_SIGNATURE) ||
 800e36e:	68fb      	ldr	r3, [r7, #12]
 800e370:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
  if ((USBD_LL_GetRxDataSize(pdev, MSC_EPOUT_ADDR) != USBD_BOT_CBW_LENGTH) ||
 800e374:	4a32      	ldr	r2, [pc, #200]	; (800e440 <MSC_BOT_CBW_Decode+0x108>)
 800e376:	4293      	cmp	r3, r2
 800e378:	d10e      	bne.n	800e398 <MSC_BOT_CBW_Decode+0x60>
      (hmsc->cbw.bLUN > 1U) || (hmsc->cbw.bCBLength < 1U) ||
 800e37a:	68fb      	ldr	r3, [r7, #12]
 800e37c:	f893 321d 	ldrb.w	r3, [r3, #541]	; 0x21d
      (hmsc->cbw.dSignature != USBD_BOT_CBW_SIGNATURE) ||
 800e380:	2b01      	cmp	r3, #1
 800e382:	d809      	bhi.n	800e398 <MSC_BOT_CBW_Decode+0x60>
      (hmsc->cbw.bLUN > 1U) || (hmsc->cbw.bCBLength < 1U) ||
 800e384:	68fb      	ldr	r3, [r7, #12]
 800e386:	f893 321e 	ldrb.w	r3, [r3, #542]	; 0x21e
 800e38a:	2b00      	cmp	r3, #0
 800e38c:	d004      	beq.n	800e398 <MSC_BOT_CBW_Decode+0x60>
      (hmsc->cbw.bCBLength > 16U))
 800e38e:	68fb      	ldr	r3, [r7, #12]
 800e390:	f893 321e 	ldrb.w	r3, [r3, #542]	; 0x21e
      (hmsc->cbw.bLUN > 1U) || (hmsc->cbw.bCBLength < 1U) ||
 800e394:	2b10      	cmp	r3, #16
 800e396:	d90e      	bls.n	800e3b6 <MSC_BOT_CBW_Decode+0x7e>
  {
    SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 800e398:	68fb      	ldr	r3, [r7, #12]
 800e39a:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 800e39e:	2320      	movs	r3, #32
 800e3a0:	2205      	movs	r2, #5
 800e3a2:	6878      	ldr	r0, [r7, #4]
 800e3a4:	f000 fcc9 	bl	800ed3a <SCSI_SenseCode>

    hmsc->bot_status = USBD_BOT_STATUS_ERROR;
 800e3a8:	68fb      	ldr	r3, [r7, #12]
 800e3aa:	2202      	movs	r2, #2
 800e3ac:	725a      	strb	r2, [r3, #9]
    MSC_BOT_Abort(pdev);
 800e3ae:	6878      	ldr	r0, [r7, #4]
 800e3b0:	f000 f8a0 	bl	800e4f4 <MSC_BOT_Abort>
 800e3b4:	e041      	b.n	800e43a <MSC_BOT_CBW_Decode+0x102>
  }
  else
  {
    if (SCSI_ProcessCmd(pdev, hmsc->cbw.bLUN, &hmsc->cbw.CB[0]) < 0)
 800e3b6:	68fb      	ldr	r3, [r7, #12]
 800e3b8:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 800e3bc:	68fb      	ldr	r3, [r7, #12]
 800e3be:	f203 231f 	addw	r3, r3, #543	; 0x21f
 800e3c2:	461a      	mov	r2, r3
 800e3c4:	6878      	ldr	r0, [r7, #4]
 800e3c6:	f000 f8eb 	bl	800e5a0 <SCSI_ProcessCmd>
 800e3ca:	4603      	mov	r3, r0
 800e3cc:	2b00      	cmp	r3, #0
 800e3ce:	da0c      	bge.n	800e3ea <MSC_BOT_CBW_Decode+0xb2>
    {
      if (hmsc->bot_state == USBD_BOT_NO_DATA)
 800e3d0:	68fb      	ldr	r3, [r7, #12]
 800e3d2:	7a1b      	ldrb	r3, [r3, #8]
 800e3d4:	2b05      	cmp	r3, #5
 800e3d6:	d104      	bne.n	800e3e2 <MSC_BOT_CBW_Decode+0xaa>
      {
        MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
 800e3d8:	2101      	movs	r1, #1
 800e3da:	6878      	ldr	r0, [r7, #4]
 800e3dc:	f000 f85e 	bl	800e49c <MSC_BOT_SendCSW>
 800e3e0:	e02b      	b.n	800e43a <MSC_BOT_CBW_Decode+0x102>
      }
      else
      {
        MSC_BOT_Abort(pdev);
 800e3e2:	6878      	ldr	r0, [r7, #4]
 800e3e4:	f000 f886 	bl	800e4f4 <MSC_BOT_Abort>
 800e3e8:	e027      	b.n	800e43a <MSC_BOT_CBW_Decode+0x102>
      }
    }
    /* Burst xfer handled internally */
    else if ((hmsc->bot_state != USBD_BOT_DATA_IN) &&
 800e3ea:	68fb      	ldr	r3, [r7, #12]
 800e3ec:	7a1b      	ldrb	r3, [r3, #8]
 800e3ee:	2b02      	cmp	r3, #2
 800e3f0:	d022      	beq.n	800e438 <MSC_BOT_CBW_Decode+0x100>
             (hmsc->bot_state != USBD_BOT_DATA_OUT) &&
 800e3f2:	68fb      	ldr	r3, [r7, #12]
 800e3f4:	7a1b      	ldrb	r3, [r3, #8]
    else if ((hmsc->bot_state != USBD_BOT_DATA_IN) &&
 800e3f6:	2b01      	cmp	r3, #1
 800e3f8:	d01e      	beq.n	800e438 <MSC_BOT_CBW_Decode+0x100>
             (hmsc->bot_state != USBD_BOT_LAST_DATA_IN))
 800e3fa:	68fb      	ldr	r3, [r7, #12]
 800e3fc:	7a1b      	ldrb	r3, [r3, #8]
             (hmsc->bot_state != USBD_BOT_DATA_OUT) &&
 800e3fe:	2b03      	cmp	r3, #3
 800e400:	d01a      	beq.n	800e438 <MSC_BOT_CBW_Decode+0x100>
    {
      if (hmsc->bot_data_length > 0U)
 800e402:	68fb      	ldr	r3, [r7, #12]
 800e404:	68db      	ldr	r3, [r3, #12]
 800e406:	2b00      	cmp	r3, #0
 800e408:	d009      	beq.n	800e41e <MSC_BOT_CBW_Decode+0xe6>
      {
        MSC_BOT_SendData(pdev, hmsc->bot_data, hmsc->bot_data_length);
 800e40a:	68fb      	ldr	r3, [r7, #12]
 800e40c:	f103 0110 	add.w	r1, r3, #16
 800e410:	68fb      	ldr	r3, [r7, #12]
 800e412:	68db      	ldr	r3, [r3, #12]
 800e414:	461a      	mov	r2, r3
 800e416:	6878      	ldr	r0, [r7, #4]
 800e418:	f000 f814 	bl	800e444 <MSC_BOT_SendData>
      if (hmsc->bot_data_length > 0U)
 800e41c:	e00d      	b.n	800e43a <MSC_BOT_CBW_Decode+0x102>
      }
      else if (hmsc->bot_data_length == 0U)
 800e41e:	68fb      	ldr	r3, [r7, #12]
 800e420:	68db      	ldr	r3, [r3, #12]
 800e422:	2b00      	cmp	r3, #0
 800e424:	d104      	bne.n	800e430 <MSC_BOT_CBW_Decode+0xf8>
      {
        MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_PASSED);
 800e426:	2100      	movs	r1, #0
 800e428:	6878      	ldr	r0, [r7, #4]
 800e42a:	f000 f837 	bl	800e49c <MSC_BOT_SendCSW>
      if (hmsc->bot_data_length > 0U)
 800e42e:	e004      	b.n	800e43a <MSC_BOT_CBW_Decode+0x102>
      }
      else
      {
        MSC_BOT_Abort(pdev);
 800e430:	6878      	ldr	r0, [r7, #4]
 800e432:	f000 f85f 	bl	800e4f4 <MSC_BOT_Abort>
      if (hmsc->bot_data_length > 0U)
 800e436:	e000      	b.n	800e43a <MSC_BOT_CBW_Decode+0x102>
      }
    }
    else
    {
      return;
 800e438:	bf00      	nop
    }
  }
}
 800e43a:	3710      	adds	r7, #16
 800e43c:	46bd      	mov	sp, r7
 800e43e:	bd80      	pop	{r7, pc}
 800e440:	43425355 	.word	0x43425355

0800e444 <MSC_BOT_SendData>:
* @param  buf: pointer to data buffer
* @param  len: Data Length
* @retval None
*/
static void  MSC_BOT_SendData(USBD_HandleTypeDef *pdev, uint8_t *pbuf, uint32_t len)
{
 800e444:	b580      	push	{r7, lr}
 800e446:	b086      	sub	sp, #24
 800e448:	af00      	add	r7, sp, #0
 800e44a:	60f8      	str	r0, [r7, #12]
 800e44c:	60b9      	str	r1, [r7, #8]
 800e44e:	607a      	str	r2, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 800e450:	68fb      	ldr	r3, [r7, #12]
 800e452:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800e456:	617b      	str	r3, [r7, #20]

  uint32_t length = MIN(hmsc->cbw.dDataLength, len);
 800e458:	697b      	ldr	r3, [r7, #20]
 800e45a:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 800e45e:	687a      	ldr	r2, [r7, #4]
 800e460:	4293      	cmp	r3, r2
 800e462:	bf28      	it	cs
 800e464:	4613      	movcs	r3, r2
 800e466:	613b      	str	r3, [r7, #16]

  hmsc->csw.dDataResidue -= len;
 800e468:	697b      	ldr	r3, [r7, #20]
 800e46a:	f8d3 2238 	ldr.w	r2, [r3, #568]	; 0x238
 800e46e:	687b      	ldr	r3, [r7, #4]
 800e470:	1ad2      	subs	r2, r2, r3
 800e472:	697b      	ldr	r3, [r7, #20]
 800e474:	f8c3 2238 	str.w	r2, [r3, #568]	; 0x238
  hmsc->csw.bStatus = USBD_CSW_CMD_PASSED;
 800e478:	697b      	ldr	r3, [r7, #20]
 800e47a:	2200      	movs	r2, #0
 800e47c:	f883 223c 	strb.w	r2, [r3, #572]	; 0x23c
  hmsc->bot_state = USBD_BOT_SEND_DATA;
 800e480:	697b      	ldr	r3, [r7, #20]
 800e482:	2204      	movs	r2, #4
 800e484:	721a      	strb	r2, [r3, #8]

  (void)USBD_LL_Transmit(pdev, MSC_EPIN_ADDR, pbuf, length);
 800e486:	693b      	ldr	r3, [r7, #16]
 800e488:	68ba      	ldr	r2, [r7, #8]
 800e48a:	2181      	movs	r1, #129	; 0x81
 800e48c:	68f8      	ldr	r0, [r7, #12]
 800e48e:	f002 fec3 	bl	8011218 <USBD_LL_Transmit>
}
 800e492:	bf00      	nop
 800e494:	3718      	adds	r7, #24
 800e496:	46bd      	mov	sp, r7
 800e498:	bd80      	pop	{r7, pc}
	...

0800e49c <MSC_BOT_SendCSW>:
* @param  pdev: device instance
* @param  status : CSW status
* @retval None
*/
void  MSC_BOT_SendCSW(USBD_HandleTypeDef *pdev, uint8_t CSW_Status)
{
 800e49c:	b580      	push	{r7, lr}
 800e49e:	b084      	sub	sp, #16
 800e4a0:	af00      	add	r7, sp, #0
 800e4a2:	6078      	str	r0, [r7, #4]
 800e4a4:	460b      	mov	r3, r1
 800e4a6:	70fb      	strb	r3, [r7, #3]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 800e4a8:	687b      	ldr	r3, [r7, #4]
 800e4aa:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800e4ae:	60fb      	str	r3, [r7, #12]

  hmsc->csw.dSignature = USBD_BOT_CSW_SIGNATURE;
 800e4b0:	68fb      	ldr	r3, [r7, #12]
 800e4b2:	4a0f      	ldr	r2, [pc, #60]	; (800e4f0 <MSC_BOT_SendCSW+0x54>)
 800e4b4:	f8c3 2230 	str.w	r2, [r3, #560]	; 0x230
  hmsc->csw.bStatus = CSW_Status;
 800e4b8:	68fb      	ldr	r3, [r7, #12]
 800e4ba:	78fa      	ldrb	r2, [r7, #3]
 800e4bc:	f883 223c 	strb.w	r2, [r3, #572]	; 0x23c
  hmsc->bot_state = USBD_BOT_IDLE;
 800e4c0:	68fb      	ldr	r3, [r7, #12]
 800e4c2:	2200      	movs	r2, #0
 800e4c4:	721a      	strb	r2, [r3, #8]

  (void)USBD_LL_Transmit(pdev, MSC_EPIN_ADDR, (uint8_t *)&hmsc->csw,
 800e4c6:	68fb      	ldr	r3, [r7, #12]
 800e4c8:	f503 720c 	add.w	r2, r3, #560	; 0x230
 800e4cc:	230d      	movs	r3, #13
 800e4ce:	2181      	movs	r1, #129	; 0x81
 800e4d0:	6878      	ldr	r0, [r7, #4]
 800e4d2:	f002 fea1 	bl	8011218 <USBD_LL_Transmit>
                         USBD_BOT_CSW_LENGTH);

  /* Prepare EP to Receive next Cmd */
  (void)USBD_LL_PrepareReceive(pdev, MSC_EPOUT_ADDR, (uint8_t *)&hmsc->cbw,
 800e4d6:	68fb      	ldr	r3, [r7, #12]
 800e4d8:	f503 7204 	add.w	r2, r3, #528	; 0x210
 800e4dc:	231f      	movs	r3, #31
 800e4de:	2101      	movs	r1, #1
 800e4e0:	6878      	ldr	r0, [r7, #4]
 800e4e2:	f002 feba 	bl	801125a <USBD_LL_PrepareReceive>
                               USBD_BOT_CBW_LENGTH);
}
 800e4e6:	bf00      	nop
 800e4e8:	3710      	adds	r7, #16
 800e4ea:	46bd      	mov	sp, r7
 800e4ec:	bd80      	pop	{r7, pc}
 800e4ee:	bf00      	nop
 800e4f0:	53425355 	.word	0x53425355

0800e4f4 <MSC_BOT_Abort>:
* @param  pdev: device instance
* @retval status
*/

static void  MSC_BOT_Abort(USBD_HandleTypeDef *pdev)
{
 800e4f4:	b580      	push	{r7, lr}
 800e4f6:	b084      	sub	sp, #16
 800e4f8:	af00      	add	r7, sp, #0
 800e4fa:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 800e4fc:	687b      	ldr	r3, [r7, #4]
 800e4fe:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800e502:	60fb      	str	r3, [r7, #12]

  if ((hmsc->cbw.bmFlags == 0U) &&
 800e504:	68fb      	ldr	r3, [r7, #12]
 800e506:	f893 321c 	ldrb.w	r3, [r3, #540]	; 0x21c
 800e50a:	2b00      	cmp	r3, #0
 800e50c:	d10c      	bne.n	800e528 <MSC_BOT_Abort+0x34>
      (hmsc->cbw.dDataLength != 0U) &&
 800e50e:	68fb      	ldr	r3, [r7, #12]
 800e510:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
  if ((hmsc->cbw.bmFlags == 0U) &&
 800e514:	2b00      	cmp	r3, #0
 800e516:	d007      	beq.n	800e528 <MSC_BOT_Abort+0x34>
      (hmsc->bot_status == USBD_BOT_STATUS_NORMAL))
 800e518:	68fb      	ldr	r3, [r7, #12]
 800e51a:	7a5b      	ldrb	r3, [r3, #9]
      (hmsc->cbw.dDataLength != 0U) &&
 800e51c:	2b00      	cmp	r3, #0
 800e51e:	d103      	bne.n	800e528 <MSC_BOT_Abort+0x34>
  {
    (void)USBD_LL_StallEP(pdev, MSC_EPOUT_ADDR);
 800e520:	2101      	movs	r1, #1
 800e522:	6878      	ldr	r0, [r7, #4]
 800e524:	f002 fdef 	bl	8011106 <USBD_LL_StallEP>
  }

  (void)USBD_LL_StallEP(pdev, MSC_EPIN_ADDR);
 800e528:	2181      	movs	r1, #129	; 0x81
 800e52a:	6878      	ldr	r0, [r7, #4]
 800e52c:	f002 fdeb 	bl	8011106 <USBD_LL_StallEP>

  if (hmsc->bot_status == USBD_BOT_STATUS_ERROR)
 800e530:	68fb      	ldr	r3, [r7, #12]
 800e532:	7a5b      	ldrb	r3, [r3, #9]
 800e534:	2b02      	cmp	r3, #2
 800e536:	d107      	bne.n	800e548 <MSC_BOT_Abort+0x54>
  {
    (void)USBD_LL_StallEP(pdev, MSC_EPIN_ADDR);
 800e538:	2181      	movs	r1, #129	; 0x81
 800e53a:	6878      	ldr	r0, [r7, #4]
 800e53c:	f002 fde3 	bl	8011106 <USBD_LL_StallEP>
    (void)USBD_LL_StallEP(pdev, MSC_EPOUT_ADDR);
 800e540:	2101      	movs	r1, #1
 800e542:	6878      	ldr	r0, [r7, #4]
 800e544:	f002 fddf 	bl	8011106 <USBD_LL_StallEP>
  }
}
 800e548:	bf00      	nop
 800e54a:	3710      	adds	r7, #16
 800e54c:	46bd      	mov	sp, r7
 800e54e:	bd80      	pop	{r7, pc}

0800e550 <MSC_BOT_CplClrFeature>:
* @param  epnum: endpoint index
* @retval None
*/

void  MSC_BOT_CplClrFeature(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800e550:	b580      	push	{r7, lr}
 800e552:	b084      	sub	sp, #16
 800e554:	af00      	add	r7, sp, #0
 800e556:	6078      	str	r0, [r7, #4]
 800e558:	460b      	mov	r3, r1
 800e55a:	70fb      	strb	r3, [r7, #3]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 800e55c:	687b      	ldr	r3, [r7, #4]
 800e55e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800e562:	60fb      	str	r3, [r7, #12]

  if (hmsc->bot_status == USBD_BOT_STATUS_ERROR) /* Bad CBW Signature */
 800e564:	68fb      	ldr	r3, [r7, #12]
 800e566:	7a5b      	ldrb	r3, [r3, #9]
 800e568:	2b02      	cmp	r3, #2
 800e56a:	d108      	bne.n	800e57e <MSC_BOT_CplClrFeature+0x2e>
  {
    (void)USBD_LL_StallEP(pdev, MSC_EPIN_ADDR);
 800e56c:	2181      	movs	r1, #129	; 0x81
 800e56e:	6878      	ldr	r0, [r7, #4]
 800e570:	f002 fdc9 	bl	8011106 <USBD_LL_StallEP>
    (void)USBD_LL_StallEP(pdev, MSC_EPOUT_ADDR);
 800e574:	2101      	movs	r1, #1
 800e576:	6878      	ldr	r0, [r7, #4]
 800e578:	f002 fdc5 	bl	8011106 <USBD_LL_StallEP>
 800e57c:	e00d      	b.n	800e59a <MSC_BOT_CplClrFeature+0x4a>
  }
  else if (((epnum & 0x80U) == 0x80U) && (hmsc->bot_status != USBD_BOT_STATUS_RECOVERY))
 800e57e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800e582:	2b00      	cmp	r3, #0
 800e584:	da08      	bge.n	800e598 <MSC_BOT_CplClrFeature+0x48>
 800e586:	68fb      	ldr	r3, [r7, #12]
 800e588:	7a5b      	ldrb	r3, [r3, #9]
 800e58a:	2b01      	cmp	r3, #1
 800e58c:	d004      	beq.n	800e598 <MSC_BOT_CplClrFeature+0x48>
  {
    MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
 800e58e:	2101      	movs	r1, #1
 800e590:	6878      	ldr	r0, [r7, #4]
 800e592:	f7ff ff83 	bl	800e49c <MSC_BOT_SendCSW>
 800e596:	e000      	b.n	800e59a <MSC_BOT_CplClrFeature+0x4a>
  }
  else
  {
    return;
 800e598:	bf00      	nop
  }
}
 800e59a:	3710      	adds	r7, #16
 800e59c:	46bd      	mov	sp, r7
 800e59e:	bd80      	pop	{r7, pc}

0800e5a0 <SCSI_ProcessCmd>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
int8_t SCSI_ProcessCmd(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *cmd)
{
 800e5a0:	b580      	push	{r7, lr}
 800e5a2:	b086      	sub	sp, #24
 800e5a4:	af00      	add	r7, sp, #0
 800e5a6:	60f8      	str	r0, [r7, #12]
 800e5a8:	460b      	mov	r3, r1
 800e5aa:	607a      	str	r2, [r7, #4]
 800e5ac:	72fb      	strb	r3, [r7, #11]
  int8_t ret;
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 800e5ae:	68fb      	ldr	r3, [r7, #12]
 800e5b0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800e5b4:	613b      	str	r3, [r7, #16]

  switch (cmd[0])
 800e5b6:	687b      	ldr	r3, [r7, #4]
 800e5b8:	781b      	ldrb	r3, [r3, #0]
 800e5ba:	2b25      	cmp	r3, #37	; 0x25
 800e5bc:	d06e      	beq.n	800e69c <SCSI_ProcessCmd+0xfc>
 800e5be:	2b25      	cmp	r3, #37	; 0x25
 800e5c0:	dc11      	bgt.n	800e5e6 <SCSI_ProcessCmd+0x46>
 800e5c2:	2b1a      	cmp	r3, #26
 800e5c4:	d04f      	beq.n	800e666 <SCSI_ProcessCmd+0xc6>
 800e5c6:	2b1a      	cmp	r3, #26
 800e5c8:	dc06      	bgt.n	800e5d8 <SCSI_ProcessCmd+0x38>
 800e5ca:	2b03      	cmp	r3, #3
 800e5cc:	d027      	beq.n	800e61e <SCSI_ProcessCmd+0x7e>
 800e5ce:	2b12      	cmp	r3, #18
 800e5d0:	d02e      	beq.n	800e630 <SCSI_ProcessCmd+0x90>
 800e5d2:	2b00      	cmp	r3, #0
 800e5d4:	d01a      	beq.n	800e60c <SCSI_ProcessCmd+0x6c>
 800e5d6:	e0a0      	b.n	800e71a <SCSI_ProcessCmd+0x17a>
 800e5d8:	2b1e      	cmp	r3, #30
 800e5da:	d03b      	beq.n	800e654 <SCSI_ProcessCmd+0xb4>
 800e5dc:	2b23      	cmp	r3, #35	; 0x23
 800e5de:	d054      	beq.n	800e68a <SCSI_ProcessCmd+0xea>
 800e5e0:	2b1b      	cmp	r3, #27
 800e5e2:	d02e      	beq.n	800e642 <SCSI_ProcessCmd+0xa2>
 800e5e4:	e099      	b.n	800e71a <SCSI_ProcessCmd+0x17a>
 800e5e6:	2b5a      	cmp	r3, #90	; 0x5a
 800e5e8:	d046      	beq.n	800e678 <SCSI_ProcessCmd+0xd8>
 800e5ea:	2b5a      	cmp	r3, #90	; 0x5a
 800e5ec:	dc07      	bgt.n	800e5fe <SCSI_ProcessCmd+0x5e>
 800e5ee:	2b2a      	cmp	r3, #42	; 0x2a
 800e5f0:	d078      	beq.n	800e6e4 <SCSI_ProcessCmd+0x144>
 800e5f2:	2b2f      	cmp	r3, #47	; 0x2f
 800e5f4:	f000 8088 	beq.w	800e708 <SCSI_ProcessCmd+0x168>
 800e5f8:	2b28      	cmp	r3, #40	; 0x28
 800e5fa:	d061      	beq.n	800e6c0 <SCSI_ProcessCmd+0x120>
 800e5fc:	e08d      	b.n	800e71a <SCSI_ProcessCmd+0x17a>
 800e5fe:	2ba8      	cmp	r3, #168	; 0xa8
 800e600:	d067      	beq.n	800e6d2 <SCSI_ProcessCmd+0x132>
 800e602:	2baa      	cmp	r3, #170	; 0xaa
 800e604:	d077      	beq.n	800e6f6 <SCSI_ProcessCmd+0x156>
 800e606:	2b9e      	cmp	r3, #158	; 0x9e
 800e608:	d051      	beq.n	800e6ae <SCSI_ProcessCmd+0x10e>
 800e60a:	e086      	b.n	800e71a <SCSI_ProcessCmd+0x17a>
  {
  case SCSI_TEST_UNIT_READY:
    ret = SCSI_TestUnitReady(pdev, lun, cmd);
 800e60c:	7afb      	ldrb	r3, [r7, #11]
 800e60e:	687a      	ldr	r2, [r7, #4]
 800e610:	4619      	mov	r1, r3
 800e612:	68f8      	ldr	r0, [r7, #12]
 800e614:	f000 f893 	bl	800e73e <SCSI_TestUnitReady>
 800e618:	4603      	mov	r3, r0
 800e61a:	75fb      	strb	r3, [r7, #23]
    break;
 800e61c:	e089      	b.n	800e732 <SCSI_ProcessCmd+0x192>

  case SCSI_REQUEST_SENSE:
    ret = SCSI_RequestSense(pdev, lun, cmd);
 800e61e:	7afb      	ldrb	r3, [r7, #11]
 800e620:	687a      	ldr	r2, [r7, #4]
 800e622:	4619      	mov	r1, r3
 800e624:	68f8      	ldr	r0, [r7, #12]
 800e626:	f000 fb0f 	bl	800ec48 <SCSI_RequestSense>
 800e62a:	4603      	mov	r3, r0
 800e62c:	75fb      	strb	r3, [r7, #23]
    break;
 800e62e:	e080      	b.n	800e732 <SCSI_ProcessCmd+0x192>

  case SCSI_INQUIRY:
    ret = SCSI_Inquiry(pdev, lun, cmd);
 800e630:	7afb      	ldrb	r3, [r7, #11]
 800e632:	687a      	ldr	r2, [r7, #4]
 800e634:	4619      	mov	r1, r3
 800e636:	68f8      	ldr	r0, [r7, #12]
 800e638:	f000 f8cc 	bl	800e7d4 <SCSI_Inquiry>
 800e63c:	4603      	mov	r3, r0
 800e63e:	75fb      	strb	r3, [r7, #23]
    break;
 800e640:	e077      	b.n	800e732 <SCSI_ProcessCmd+0x192>

  case SCSI_START_STOP_UNIT:
    ret = SCSI_StartStopUnit(pdev, lun, cmd);
 800e642:	7afb      	ldrb	r3, [r7, #11]
 800e644:	687a      	ldr	r2, [r7, #4]
 800e646:	4619      	mov	r1, r3
 800e648:	68f8      	ldr	r0, [r7, #12]
 800e64a:	f000 fbb9 	bl	800edc0 <SCSI_StartStopUnit>
 800e64e:	4603      	mov	r3, r0
 800e650:	75fb      	strb	r3, [r7, #23]
    break;
 800e652:	e06e      	b.n	800e732 <SCSI_ProcessCmd+0x192>

  case SCSI_ALLOW_MEDIUM_REMOVAL:
    ret = SCSI_AllowPreventRemovable(pdev, lun, cmd);
 800e654:	7afb      	ldrb	r3, [r7, #11]
 800e656:	687a      	ldr	r2, [r7, #4]
 800e658:	4619      	mov	r1, r3
 800e65a:	68f8      	ldr	r0, [r7, #12]
 800e65c:	f000 fbfb 	bl	800ee56 <SCSI_AllowPreventRemovable>
 800e660:	4603      	mov	r3, r0
 800e662:	75fb      	strb	r3, [r7, #23]
    break;
 800e664:	e065      	b.n	800e732 <SCSI_ProcessCmd+0x192>

  case SCSI_MODE_SENSE6:
    ret = SCSI_ModeSense6(pdev, lun, cmd);
 800e666:	7afb      	ldrb	r3, [r7, #11]
 800e668:	687a      	ldr	r2, [r7, #4]
 800e66a:	4619      	mov	r1, r3
 800e66c:	68f8      	ldr	r0, [r7, #12]
 800e66e:	f000 fa9f 	bl	800ebb0 <SCSI_ModeSense6>
 800e672:	4603      	mov	r3, r0
 800e674:	75fb      	strb	r3, [r7, #23]
    break;
 800e676:	e05c      	b.n	800e732 <SCSI_ProcessCmd+0x192>

  case SCSI_MODE_SENSE10:
    ret = SCSI_ModeSense10(pdev, lun, cmd);
 800e678:	7afb      	ldrb	r3, [r7, #11]
 800e67a:	687a      	ldr	r2, [r7, #4]
 800e67c:	4619      	mov	r1, r3
 800e67e:	68f8      	ldr	r0, [r7, #12]
 800e680:	f000 fabc 	bl	800ebfc <SCSI_ModeSense10>
 800e684:	4603      	mov	r3, r0
 800e686:	75fb      	strb	r3, [r7, #23]
    break;
 800e688:	e053      	b.n	800e732 <SCSI_ProcessCmd+0x192>

  case SCSI_READ_FORMAT_CAPACITIES:
    ret = SCSI_ReadFormatCapacity(pdev, lun, cmd);
 800e68a:	7afb      	ldrb	r3, [r7, #11]
 800e68c:	687a      	ldr	r2, [r7, #4]
 800e68e:	4619      	mov	r1, r3
 800e690:	68f8      	ldr	r0, [r7, #12]
 800e692:	f000 fa20 	bl	800ead6 <SCSI_ReadFormatCapacity>
 800e696:	4603      	mov	r3, r0
 800e698:	75fb      	strb	r3, [r7, #23]
    break;
 800e69a:	e04a      	b.n	800e732 <SCSI_ProcessCmd+0x192>

  case SCSI_READ_CAPACITY10:
    ret = SCSI_ReadCapacity10(pdev, lun, cmd);
 800e69c:	7afb      	ldrb	r3, [r7, #11]
 800e69e:	687a      	ldr	r2, [r7, #4]
 800e6a0:	4619      	mov	r1, r3
 800e6a2:	68f8      	ldr	r0, [r7, #12]
 800e6a4:	f000 f904 	bl	800e8b0 <SCSI_ReadCapacity10>
 800e6a8:	4603      	mov	r3, r0
 800e6aa:	75fb      	strb	r3, [r7, #23]
    break;
 800e6ac:	e041      	b.n	800e732 <SCSI_ProcessCmd+0x192>

  case SCSI_READ_CAPACITY16:
    ret = SCSI_ReadCapacity16(pdev, lun, cmd);
 800e6ae:	7afb      	ldrb	r3, [r7, #11]
 800e6b0:	687a      	ldr	r2, [r7, #4]
 800e6b2:	4619      	mov	r1, r3
 800e6b4:	68f8      	ldr	r0, [r7, #12]
 800e6b6:	f000 f96a 	bl	800e98e <SCSI_ReadCapacity16>
 800e6ba:	4603      	mov	r3, r0
 800e6bc:	75fb      	strb	r3, [r7, #23]
    break;
 800e6be:	e038      	b.n	800e732 <SCSI_ProcessCmd+0x192>

  case SCSI_READ10:
    ret = SCSI_Read10(pdev, lun, cmd);
 800e6c0:	7afb      	ldrb	r3, [r7, #11]
 800e6c2:	687a      	ldr	r2, [r7, #4]
 800e6c4:	4619      	mov	r1, r3
 800e6c6:	68f8      	ldr	r0, [r7, #12]
 800e6c8:	f000 fbe8 	bl	800ee9c <SCSI_Read10>
 800e6cc:	4603      	mov	r3, r0
 800e6ce:	75fb      	strb	r3, [r7, #23]
    break;
 800e6d0:	e02f      	b.n	800e732 <SCSI_ProcessCmd+0x192>

  case SCSI_READ12:
    ret = SCSI_Read12(pdev, lun, cmd);
 800e6d2:	7afb      	ldrb	r3, [r7, #11]
 800e6d4:	687a      	ldr	r2, [r7, #4]
 800e6d6:	4619      	mov	r1, r3
 800e6d8:	68f8      	ldr	r0, [r7, #12]
 800e6da:	f000 fc79 	bl	800efd0 <SCSI_Read12>
 800e6de:	4603      	mov	r3, r0
 800e6e0:	75fb      	strb	r3, [r7, #23]
    break;
 800e6e2:	e026      	b.n	800e732 <SCSI_ProcessCmd+0x192>

  case SCSI_WRITE10:
    ret = SCSI_Write10(pdev, lun, cmd);
 800e6e4:	7afb      	ldrb	r3, [r7, #11]
 800e6e6:	687a      	ldr	r2, [r7, #4]
 800e6e8:	4619      	mov	r1, r3
 800e6ea:	68f8      	ldr	r0, [r7, #12]
 800e6ec:	f000 fd15 	bl	800f11a <SCSI_Write10>
 800e6f0:	4603      	mov	r3, r0
 800e6f2:	75fb      	strb	r3, [r7, #23]
    break;
 800e6f4:	e01d      	b.n	800e732 <SCSI_ProcessCmd+0x192>

  case SCSI_WRITE12:
    ret = SCSI_Write12(pdev, lun, cmd);
 800e6f6:	7afb      	ldrb	r3, [r7, #11]
 800e6f8:	687a      	ldr	r2, [r7, #4]
 800e6fa:	4619      	mov	r1, r3
 800e6fc:	68f8      	ldr	r0, [r7, #12]
 800e6fe:	f000 fdcb 	bl	800f298 <SCSI_Write12>
 800e702:	4603      	mov	r3, r0
 800e704:	75fb      	strb	r3, [r7, #23]
    break;
 800e706:	e014      	b.n	800e732 <SCSI_ProcessCmd+0x192>

  case SCSI_VERIFY10:
    ret = SCSI_Verify10(pdev, lun, cmd);
 800e708:	7afb      	ldrb	r3, [r7, #11]
 800e70a:	687a      	ldr	r2, [r7, #4]
 800e70c:	4619      	mov	r1, r3
 800e70e:	68f8      	ldr	r0, [r7, #12]
 800e710:	f000 fe91 	bl	800f436 <SCSI_Verify10>
 800e714:	4603      	mov	r3, r0
 800e716:	75fb      	strb	r3, [r7, #23]
    break;
 800e718:	e00b      	b.n	800e732 <SCSI_ProcessCmd+0x192>

  default:
    SCSI_SenseCode(pdev, lun, ILLEGAL_REQUEST, INVALID_CDB);
 800e71a:	7af9      	ldrb	r1, [r7, #11]
 800e71c:	2320      	movs	r3, #32
 800e71e:	2205      	movs	r2, #5
 800e720:	68f8      	ldr	r0, [r7, #12]
 800e722:	f000 fb0a 	bl	800ed3a <SCSI_SenseCode>
    hmsc->bot_status = USBD_BOT_STATUS_ERROR;
 800e726:	693b      	ldr	r3, [r7, #16]
 800e728:	2202      	movs	r2, #2
 800e72a:	725a      	strb	r2, [r3, #9]
    ret = -1;
 800e72c:	23ff      	movs	r3, #255	; 0xff
 800e72e:	75fb      	strb	r3, [r7, #23]
    break;
 800e730:	bf00      	nop
  }

  return ret;
 800e732:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800e736:	4618      	mov	r0, r3
 800e738:	3718      	adds	r7, #24
 800e73a:	46bd      	mov	sp, r7
 800e73c:	bd80      	pop	{r7, pc}

0800e73e <SCSI_TestUnitReady>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
static int8_t SCSI_TestUnitReady(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 800e73e:	b580      	push	{r7, lr}
 800e740:	b086      	sub	sp, #24
 800e742:	af00      	add	r7, sp, #0
 800e744:	60f8      	str	r0, [r7, #12]
 800e746:	460b      	mov	r3, r1
 800e748:	607a      	str	r2, [r7, #4]
 800e74a:	72fb      	strb	r3, [r7, #11]
  UNUSED(params);
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 800e74c:	68fb      	ldr	r3, [r7, #12]
 800e74e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800e752:	617b      	str	r3, [r7, #20]

  /* case 9 : Hi > D0 */
  if (hmsc->cbw.dDataLength != 0U)
 800e754:	697b      	ldr	r3, [r7, #20]
 800e756:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 800e75a:	2b00      	cmp	r3, #0
 800e75c:	d00a      	beq.n	800e774 <SCSI_TestUnitReady+0x36>
  {
    SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 800e75e:	697b      	ldr	r3, [r7, #20]
 800e760:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 800e764:	2320      	movs	r3, #32
 800e766:	2205      	movs	r2, #5
 800e768:	68f8      	ldr	r0, [r7, #12]
 800e76a:	f000 fae6 	bl	800ed3a <SCSI_SenseCode>

    return -1;
 800e76e:	f04f 33ff 	mov.w	r3, #4294967295
 800e772:	e02a      	b.n	800e7ca <SCSI_TestUnitReady+0x8c>
  }

  if (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED)
 800e774:	697b      	ldr	r3, [r7, #20]
 800e776:	f893 3262 	ldrb.w	r3, [r3, #610]	; 0x262
 800e77a:	2b02      	cmp	r3, #2
 800e77c:	d10b      	bne.n	800e796 <SCSI_TestUnitReady+0x58>
  {
    SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 800e77e:	7af9      	ldrb	r1, [r7, #11]
 800e780:	233a      	movs	r3, #58	; 0x3a
 800e782:	2202      	movs	r2, #2
 800e784:	68f8      	ldr	r0, [r7, #12]
 800e786:	f000 fad8 	bl	800ed3a <SCSI_SenseCode>
    hmsc->bot_state = USBD_BOT_NO_DATA;
 800e78a:	697b      	ldr	r3, [r7, #20]
 800e78c:	2205      	movs	r2, #5
 800e78e:	721a      	strb	r2, [r3, #8]
    return -1;
 800e790:	f04f 33ff 	mov.w	r3, #4294967295
 800e794:	e019      	b.n	800e7ca <SCSI_TestUnitReady+0x8c>
  }

  if (((USBD_StorageTypeDef *)pdev->pUserData)->IsReady(lun) != 0)
 800e796:	68fb      	ldr	r3, [r7, #12]
 800e798:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800e79c:	689b      	ldr	r3, [r3, #8]
 800e79e:	7afa      	ldrb	r2, [r7, #11]
 800e7a0:	4610      	mov	r0, r2
 800e7a2:	4798      	blx	r3
 800e7a4:	4603      	mov	r3, r0
 800e7a6:	2b00      	cmp	r3, #0
 800e7a8:	d00b      	beq.n	800e7c2 <SCSI_TestUnitReady+0x84>
  {
    SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 800e7aa:	7af9      	ldrb	r1, [r7, #11]
 800e7ac:	233a      	movs	r3, #58	; 0x3a
 800e7ae:	2202      	movs	r2, #2
 800e7b0:	68f8      	ldr	r0, [r7, #12]
 800e7b2:	f000 fac2 	bl	800ed3a <SCSI_SenseCode>
    hmsc->bot_state = USBD_BOT_NO_DATA;
 800e7b6:	697b      	ldr	r3, [r7, #20]
 800e7b8:	2205      	movs	r2, #5
 800e7ba:	721a      	strb	r2, [r3, #8]

    return -1;
 800e7bc:	f04f 33ff 	mov.w	r3, #4294967295
 800e7c0:	e003      	b.n	800e7ca <SCSI_TestUnitReady+0x8c>
  }
  hmsc->bot_data_length = 0U;
 800e7c2:	697b      	ldr	r3, [r7, #20]
 800e7c4:	2200      	movs	r2, #0
 800e7c6:	60da      	str	r2, [r3, #12]

  return 0;
 800e7c8:	2300      	movs	r3, #0
}
 800e7ca:	4618      	mov	r0, r3
 800e7cc:	3718      	adds	r7, #24
 800e7ce:	46bd      	mov	sp, r7
 800e7d0:	bd80      	pop	{r7, pc}
	...

0800e7d4 <SCSI_Inquiry>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
static int8_t SCSI_Inquiry(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 800e7d4:	b580      	push	{r7, lr}
 800e7d6:	b088      	sub	sp, #32
 800e7d8:	af00      	add	r7, sp, #0
 800e7da:	60f8      	str	r0, [r7, #12]
 800e7dc:	460b      	mov	r3, r1
 800e7de:	607a      	str	r2, [r7, #4]
 800e7e0:	72fb      	strb	r3, [r7, #11]
  uint8_t *pPage;
  uint16_t len;
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 800e7e2:	68fb      	ldr	r3, [r7, #12]
 800e7e4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800e7e8:	61bb      	str	r3, [r7, #24]

  if (hmsc->cbw.dDataLength == 0U)
 800e7ea:	69bb      	ldr	r3, [r7, #24]
 800e7ec:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 800e7f0:	2b00      	cmp	r3, #0
 800e7f2:	d10a      	bne.n	800e80a <SCSI_Inquiry+0x36>
  {
    SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 800e7f4:	69bb      	ldr	r3, [r7, #24]
 800e7f6:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 800e7fa:	2320      	movs	r3, #32
 800e7fc:	2205      	movs	r2, #5
 800e7fe:	68f8      	ldr	r0, [r7, #12]
 800e800:	f000 fa9b 	bl	800ed3a <SCSI_SenseCode>
    return -1;
 800e804:	f04f 33ff 	mov.w	r3, #4294967295
 800e808:	e04a      	b.n	800e8a0 <SCSI_Inquiry+0xcc>
  }

  if ((params[1] & 0x01U) != 0U) /* Evpd is set */
 800e80a:	687b      	ldr	r3, [r7, #4]
 800e80c:	3301      	adds	r3, #1
 800e80e:	781b      	ldrb	r3, [r3, #0]
 800e810:	f003 0301 	and.w	r3, r3, #1
 800e814:	2b00      	cmp	r3, #0
 800e816:	d020      	beq.n	800e85a <SCSI_Inquiry+0x86>
  {
    if (params[2] == 0U) /* Request for Supported Vital Product Data Pages*/
 800e818:	687b      	ldr	r3, [r7, #4]
 800e81a:	3302      	adds	r3, #2
 800e81c:	781b      	ldrb	r3, [r3, #0]
 800e81e:	2b00      	cmp	r3, #0
 800e820:	d105      	bne.n	800e82e <SCSI_Inquiry+0x5a>
    {
      (void)SCSI_UpdateBotData(hmsc, MSC_Page00_Inquiry_Data, LENGTH_INQUIRY_PAGE00);
 800e822:	2206      	movs	r2, #6
 800e824:	4920      	ldr	r1, [pc, #128]	; (800e8a8 <SCSI_Inquiry+0xd4>)
 800e826:	69b8      	ldr	r0, [r7, #24]
 800e828:	f000 ff50 	bl	800f6cc <SCSI_UpdateBotData>
 800e82c:	e037      	b.n	800e89e <SCSI_Inquiry+0xca>
    }
    else if (params[2] == 0x80U) /* Request for VPD page 0x80 Unit Serial Number */
 800e82e:	687b      	ldr	r3, [r7, #4]
 800e830:	3302      	adds	r3, #2
 800e832:	781b      	ldrb	r3, [r3, #0]
 800e834:	2b80      	cmp	r3, #128	; 0x80
 800e836:	d105      	bne.n	800e844 <SCSI_Inquiry+0x70>
    {
      (void)SCSI_UpdateBotData(hmsc, MSC_Page80_Inquiry_Data, LENGTH_INQUIRY_PAGE80);
 800e838:	2208      	movs	r2, #8
 800e83a:	491c      	ldr	r1, [pc, #112]	; (800e8ac <SCSI_Inquiry+0xd8>)
 800e83c:	69b8      	ldr	r0, [r7, #24]
 800e83e:	f000 ff45 	bl	800f6cc <SCSI_UpdateBotData>
 800e842:	e02c      	b.n	800e89e <SCSI_Inquiry+0xca>
    }
    else /* Request Not supported */
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST,
 800e844:	69bb      	ldr	r3, [r7, #24]
 800e846:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 800e84a:	2324      	movs	r3, #36	; 0x24
 800e84c:	2205      	movs	r2, #5
 800e84e:	68f8      	ldr	r0, [r7, #12]
 800e850:	f000 fa73 	bl	800ed3a <SCSI_SenseCode>
                     INVALID_FIELED_IN_COMMAND);

      return -1;
 800e854:	f04f 33ff 	mov.w	r3, #4294967295
 800e858:	e022      	b.n	800e8a0 <SCSI_Inquiry+0xcc>
    }
  }
  else
  {
    pPage = (uint8_t *)&((USBD_StorageTypeDef *)pdev->pUserData)->pInquiry[lun * STANDARD_INQUIRY_DATA_LEN];
 800e85a:	68fb      	ldr	r3, [r7, #12]
 800e85c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800e860:	69d9      	ldr	r1, [r3, #28]
 800e862:	7afa      	ldrb	r2, [r7, #11]
 800e864:	4613      	mov	r3, r2
 800e866:	00db      	lsls	r3, r3, #3
 800e868:	4413      	add	r3, r2
 800e86a:	009b      	lsls	r3, r3, #2
 800e86c:	440b      	add	r3, r1
 800e86e:	617b      	str	r3, [r7, #20]
    len = (uint16_t)pPage[4] + 5U;
 800e870:	697b      	ldr	r3, [r7, #20]
 800e872:	3304      	adds	r3, #4
 800e874:	781b      	ldrb	r3, [r3, #0]
 800e876:	b29b      	uxth	r3, r3
 800e878:	3305      	adds	r3, #5
 800e87a:	83fb      	strh	r3, [r7, #30]

    if (params[4] <= len)
 800e87c:	687b      	ldr	r3, [r7, #4]
 800e87e:	3304      	adds	r3, #4
 800e880:	781b      	ldrb	r3, [r3, #0]
 800e882:	b29b      	uxth	r3, r3
 800e884:	8bfa      	ldrh	r2, [r7, #30]
 800e886:	429a      	cmp	r2, r3
 800e888:	d303      	bcc.n	800e892 <SCSI_Inquiry+0xbe>
    {
      len = params[4];
 800e88a:	687b      	ldr	r3, [r7, #4]
 800e88c:	3304      	adds	r3, #4
 800e88e:	781b      	ldrb	r3, [r3, #0]
 800e890:	83fb      	strh	r3, [r7, #30]
    }

    (void)SCSI_UpdateBotData(hmsc, pPage, len);
 800e892:	8bfb      	ldrh	r3, [r7, #30]
 800e894:	461a      	mov	r2, r3
 800e896:	6979      	ldr	r1, [r7, #20]
 800e898:	69b8      	ldr	r0, [r7, #24]
 800e89a:	f000 ff17 	bl	800f6cc <SCSI_UpdateBotData>
  }

  return 0;
 800e89e:	2300      	movs	r3, #0
}
 800e8a0:	4618      	mov	r0, r3
 800e8a2:	3720      	adds	r7, #32
 800e8a4:	46bd      	mov	sp, r7
 800e8a6:	bd80      	pop	{r7, pc}
 800e8a8:	240000b4 	.word	0x240000b4
 800e8ac:	240000bc 	.word	0x240000bc

0800e8b0 <SCSI_ReadCapacity10>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
static int8_t SCSI_ReadCapacity10(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 800e8b0:	b580      	push	{r7, lr}
 800e8b2:	b086      	sub	sp, #24
 800e8b4:	af00      	add	r7, sp, #0
 800e8b6:	60f8      	str	r0, [r7, #12]
 800e8b8:	460b      	mov	r3, r1
 800e8ba:	607a      	str	r2, [r7, #4]
 800e8bc:	72fb      	strb	r3, [r7, #11]
  UNUSED(params);
  int8_t ret;
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 800e8be:	68fb      	ldr	r3, [r7, #12]
 800e8c0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800e8c4:	617b      	str	r3, [r7, #20]

  ret = ((USBD_StorageTypeDef *)pdev->pUserData)->GetCapacity(lun, &hmsc->scsi_blk_nbr, &hmsc->scsi_blk_size);
 800e8c6:	68fb      	ldr	r3, [r7, #12]
 800e8c8:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800e8cc:	685b      	ldr	r3, [r3, #4]
 800e8ce:	697a      	ldr	r2, [r7, #20]
 800e8d0:	f502 711a 	add.w	r1, r2, #616	; 0x268
 800e8d4:	697a      	ldr	r2, [r7, #20]
 800e8d6:	f502 7219 	add.w	r2, r2, #612	; 0x264
 800e8da:	7af8      	ldrb	r0, [r7, #11]
 800e8dc:	4798      	blx	r3
 800e8de:	4603      	mov	r3, r0
 800e8e0:	74fb      	strb	r3, [r7, #19]

  if ((ret != 0) || (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED))
 800e8e2:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800e8e6:	2b00      	cmp	r3, #0
 800e8e8:	d104      	bne.n	800e8f4 <SCSI_ReadCapacity10+0x44>
 800e8ea:	697b      	ldr	r3, [r7, #20]
 800e8ec:	f893 3262 	ldrb.w	r3, [r3, #610]	; 0x262
 800e8f0:	2b02      	cmp	r3, #2
 800e8f2:	d108      	bne.n	800e906 <SCSI_ReadCapacity10+0x56>
  {
    SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 800e8f4:	7af9      	ldrb	r1, [r7, #11]
 800e8f6:	233a      	movs	r3, #58	; 0x3a
 800e8f8:	2202      	movs	r2, #2
 800e8fa:	68f8      	ldr	r0, [r7, #12]
 800e8fc:	f000 fa1d 	bl	800ed3a <SCSI_SenseCode>
    return -1;
 800e900:	f04f 33ff 	mov.w	r3, #4294967295
 800e904:	e03f      	b.n	800e986 <SCSI_ReadCapacity10+0xd6>
  }

  hmsc->bot_data[0] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >> 24);
 800e906:	697b      	ldr	r3, [r7, #20]
 800e908:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 800e90c:	3b01      	subs	r3, #1
 800e90e:	0e1b      	lsrs	r3, r3, #24
 800e910:	b2da      	uxtb	r2, r3
 800e912:	697b      	ldr	r3, [r7, #20]
 800e914:	741a      	strb	r2, [r3, #16]
  hmsc->bot_data[1] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >> 16);
 800e916:	697b      	ldr	r3, [r7, #20]
 800e918:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 800e91c:	3b01      	subs	r3, #1
 800e91e:	0c1b      	lsrs	r3, r3, #16
 800e920:	b2da      	uxtb	r2, r3
 800e922:	697b      	ldr	r3, [r7, #20]
 800e924:	745a      	strb	r2, [r3, #17]
  hmsc->bot_data[2] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >>  8);
 800e926:	697b      	ldr	r3, [r7, #20]
 800e928:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 800e92c:	3b01      	subs	r3, #1
 800e92e:	0a1b      	lsrs	r3, r3, #8
 800e930:	b2da      	uxtb	r2, r3
 800e932:	697b      	ldr	r3, [r7, #20]
 800e934:	749a      	strb	r2, [r3, #18]
  hmsc->bot_data[3] = (uint8_t)(hmsc->scsi_blk_nbr - 1U);
 800e936:	697b      	ldr	r3, [r7, #20]
 800e938:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 800e93c:	b2db      	uxtb	r3, r3
 800e93e:	3b01      	subs	r3, #1
 800e940:	b2da      	uxtb	r2, r3
 800e942:	697b      	ldr	r3, [r7, #20]
 800e944:	74da      	strb	r2, [r3, #19]

  hmsc->bot_data[4] = (uint8_t)(hmsc->scsi_blk_size >>  24);
 800e946:	697b      	ldr	r3, [r7, #20]
 800e948:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 800e94c:	161b      	asrs	r3, r3, #24
 800e94e:	b2da      	uxtb	r2, r3
 800e950:	697b      	ldr	r3, [r7, #20]
 800e952:	751a      	strb	r2, [r3, #20]
  hmsc->bot_data[5] = (uint8_t)(hmsc->scsi_blk_size >>  16);
 800e954:	697b      	ldr	r3, [r7, #20]
 800e956:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 800e95a:	141b      	asrs	r3, r3, #16
 800e95c:	b2da      	uxtb	r2, r3
 800e95e:	697b      	ldr	r3, [r7, #20]
 800e960:	755a      	strb	r2, [r3, #21]
  hmsc->bot_data[6] = (uint8_t)(hmsc->scsi_blk_size >>  8);
 800e962:	697b      	ldr	r3, [r7, #20]
 800e964:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 800e968:	0a1b      	lsrs	r3, r3, #8
 800e96a:	b29b      	uxth	r3, r3
 800e96c:	b2da      	uxtb	r2, r3
 800e96e:	697b      	ldr	r3, [r7, #20]
 800e970:	759a      	strb	r2, [r3, #22]
  hmsc->bot_data[7] = (uint8_t)(hmsc->scsi_blk_size);
 800e972:	697b      	ldr	r3, [r7, #20]
 800e974:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 800e978:	b2da      	uxtb	r2, r3
 800e97a:	697b      	ldr	r3, [r7, #20]
 800e97c:	75da      	strb	r2, [r3, #23]

  hmsc->bot_data_length = 8U;
 800e97e:	697b      	ldr	r3, [r7, #20]
 800e980:	2208      	movs	r2, #8
 800e982:	60da      	str	r2, [r3, #12]

  return 0;
 800e984:	2300      	movs	r3, #0

}
 800e986:	4618      	mov	r0, r3
 800e988:	3718      	adds	r7, #24
 800e98a:	46bd      	mov	sp, r7
 800e98c:	bd80      	pop	{r7, pc}

0800e98e <SCSI_ReadCapacity16>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
static int8_t SCSI_ReadCapacity16(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 800e98e:	b580      	push	{r7, lr}
 800e990:	b088      	sub	sp, #32
 800e992:	af00      	add	r7, sp, #0
 800e994:	60f8      	str	r0, [r7, #12]
 800e996:	460b      	mov	r3, r1
 800e998:	607a      	str	r2, [r7, #4]
 800e99a:	72fb      	strb	r3, [r7, #11]
  UNUSED(params);
  uint8_t idx;
  int8_t ret;
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 800e99c:	68fb      	ldr	r3, [r7, #12]
 800e99e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800e9a2:	61bb      	str	r3, [r7, #24]

  ret = ((USBD_StorageTypeDef *)pdev->pUserData)->GetCapacity(lun, &hmsc->scsi_blk_nbr, &hmsc->scsi_blk_size);
 800e9a4:	68fb      	ldr	r3, [r7, #12]
 800e9a6:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800e9aa:	685b      	ldr	r3, [r3, #4]
 800e9ac:	69ba      	ldr	r2, [r7, #24]
 800e9ae:	f502 711a 	add.w	r1, r2, #616	; 0x268
 800e9b2:	69ba      	ldr	r2, [r7, #24]
 800e9b4:	f502 7219 	add.w	r2, r2, #612	; 0x264
 800e9b8:	7af8      	ldrb	r0, [r7, #11]
 800e9ba:	4798      	blx	r3
 800e9bc:	4603      	mov	r3, r0
 800e9be:	75fb      	strb	r3, [r7, #23]

  if ((ret != 0) || (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED))
 800e9c0:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800e9c4:	2b00      	cmp	r3, #0
 800e9c6:	d104      	bne.n	800e9d2 <SCSI_ReadCapacity16+0x44>
 800e9c8:	69bb      	ldr	r3, [r7, #24]
 800e9ca:	f893 3262 	ldrb.w	r3, [r3, #610]	; 0x262
 800e9ce:	2b02      	cmp	r3, #2
 800e9d0:	d108      	bne.n	800e9e4 <SCSI_ReadCapacity16+0x56>
  {
    SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 800e9d2:	7af9      	ldrb	r1, [r7, #11]
 800e9d4:	233a      	movs	r3, #58	; 0x3a
 800e9d6:	2202      	movs	r2, #2
 800e9d8:	68f8      	ldr	r0, [r7, #12]
 800e9da:	f000 f9ae 	bl	800ed3a <SCSI_SenseCode>
    return -1;
 800e9de:	f04f 33ff 	mov.w	r3, #4294967295
 800e9e2:	e074      	b.n	800eace <SCSI_ReadCapacity16+0x140>
  }

  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 800e9e4:	687b      	ldr	r3, [r7, #4]
 800e9e6:	330a      	adds	r3, #10
 800e9e8:	781b      	ldrb	r3, [r3, #0]
 800e9ea:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[11] << 16) |
 800e9ec:	687b      	ldr	r3, [r7, #4]
 800e9ee:	330b      	adds	r3, #11
 800e9f0:	781b      	ldrb	r3, [r3, #0]
 800e9f2:	041b      	lsls	r3, r3, #16
  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 800e9f4:	431a      	orrs	r2, r3
                          ((uint32_t)params[12] <<  8) |
 800e9f6:	687b      	ldr	r3, [r7, #4]
 800e9f8:	330c      	adds	r3, #12
 800e9fa:	781b      	ldrb	r3, [r3, #0]
 800e9fc:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[11] << 16) |
 800e9fe:	4313      	orrs	r3, r2
                           (uint32_t)params[13];
 800ea00:	687a      	ldr	r2, [r7, #4]
 800ea02:	320d      	adds	r2, #13
 800ea04:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[12] <<  8) |
 800ea06:	431a      	orrs	r2, r3
  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 800ea08:	69bb      	ldr	r3, [r7, #24]
 800ea0a:	60da      	str	r2, [r3, #12]

  for (idx = 0U; idx < hmsc->bot_data_length; idx++)
 800ea0c:	2300      	movs	r3, #0
 800ea0e:	77fb      	strb	r3, [r7, #31]
 800ea10:	e007      	b.n	800ea22 <SCSI_ReadCapacity16+0x94>
  {
    hmsc->bot_data[idx] = 0U;
 800ea12:	7ffb      	ldrb	r3, [r7, #31]
 800ea14:	69ba      	ldr	r2, [r7, #24]
 800ea16:	4413      	add	r3, r2
 800ea18:	2200      	movs	r2, #0
 800ea1a:	741a      	strb	r2, [r3, #16]
  for (idx = 0U; idx < hmsc->bot_data_length; idx++)
 800ea1c:	7ffb      	ldrb	r3, [r7, #31]
 800ea1e:	3301      	adds	r3, #1
 800ea20:	77fb      	strb	r3, [r7, #31]
 800ea22:	7ffa      	ldrb	r2, [r7, #31]
 800ea24:	69bb      	ldr	r3, [r7, #24]
 800ea26:	68db      	ldr	r3, [r3, #12]
 800ea28:	429a      	cmp	r2, r3
 800ea2a:	d3f2      	bcc.n	800ea12 <SCSI_ReadCapacity16+0x84>
  }

  hmsc->bot_data[4] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >> 24);
 800ea2c:	69bb      	ldr	r3, [r7, #24]
 800ea2e:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 800ea32:	3b01      	subs	r3, #1
 800ea34:	0e1b      	lsrs	r3, r3, #24
 800ea36:	b2da      	uxtb	r2, r3
 800ea38:	69bb      	ldr	r3, [r7, #24]
 800ea3a:	751a      	strb	r2, [r3, #20]
  hmsc->bot_data[5] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >> 16);
 800ea3c:	69bb      	ldr	r3, [r7, #24]
 800ea3e:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 800ea42:	3b01      	subs	r3, #1
 800ea44:	0c1b      	lsrs	r3, r3, #16
 800ea46:	b2da      	uxtb	r2, r3
 800ea48:	69bb      	ldr	r3, [r7, #24]
 800ea4a:	755a      	strb	r2, [r3, #21]
  hmsc->bot_data[6] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >>  8);
 800ea4c:	69bb      	ldr	r3, [r7, #24]
 800ea4e:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 800ea52:	3b01      	subs	r3, #1
 800ea54:	0a1b      	lsrs	r3, r3, #8
 800ea56:	b2da      	uxtb	r2, r3
 800ea58:	69bb      	ldr	r3, [r7, #24]
 800ea5a:	759a      	strb	r2, [r3, #22]
  hmsc->bot_data[7] = (uint8_t)(hmsc->scsi_blk_nbr - 1U);
 800ea5c:	69bb      	ldr	r3, [r7, #24]
 800ea5e:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 800ea62:	b2db      	uxtb	r3, r3
 800ea64:	3b01      	subs	r3, #1
 800ea66:	b2da      	uxtb	r2, r3
 800ea68:	69bb      	ldr	r3, [r7, #24]
 800ea6a:	75da      	strb	r2, [r3, #23]

  hmsc->bot_data[8] = (uint8_t)(hmsc->scsi_blk_size >>  24);
 800ea6c:	69bb      	ldr	r3, [r7, #24]
 800ea6e:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 800ea72:	161b      	asrs	r3, r3, #24
 800ea74:	b2da      	uxtb	r2, r3
 800ea76:	69bb      	ldr	r3, [r7, #24]
 800ea78:	761a      	strb	r2, [r3, #24]
  hmsc->bot_data[9] = (uint8_t)(hmsc->scsi_blk_size >>  16);
 800ea7a:	69bb      	ldr	r3, [r7, #24]
 800ea7c:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 800ea80:	141b      	asrs	r3, r3, #16
 800ea82:	b2da      	uxtb	r2, r3
 800ea84:	69bb      	ldr	r3, [r7, #24]
 800ea86:	765a      	strb	r2, [r3, #25]
  hmsc->bot_data[10] = (uint8_t)(hmsc->scsi_blk_size >>  8);
 800ea88:	69bb      	ldr	r3, [r7, #24]
 800ea8a:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 800ea8e:	0a1b      	lsrs	r3, r3, #8
 800ea90:	b29b      	uxth	r3, r3
 800ea92:	b2da      	uxtb	r2, r3
 800ea94:	69bb      	ldr	r3, [r7, #24]
 800ea96:	769a      	strb	r2, [r3, #26]
  hmsc->bot_data[11] = (uint8_t)(hmsc->scsi_blk_size);
 800ea98:	69bb      	ldr	r3, [r7, #24]
 800ea9a:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 800ea9e:	b2da      	uxtb	r2, r3
 800eaa0:	69bb      	ldr	r3, [r7, #24]
 800eaa2:	76da      	strb	r2, [r3, #27]

  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 800eaa4:	687b      	ldr	r3, [r7, #4]
 800eaa6:	330a      	adds	r3, #10
 800eaa8:	781b      	ldrb	r3, [r3, #0]
 800eaaa:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[11] << 16) |
 800eaac:	687b      	ldr	r3, [r7, #4]
 800eaae:	330b      	adds	r3, #11
 800eab0:	781b      	ldrb	r3, [r3, #0]
 800eab2:	041b      	lsls	r3, r3, #16
  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 800eab4:	431a      	orrs	r2, r3
                          ((uint32_t)params[12] <<  8) |
 800eab6:	687b      	ldr	r3, [r7, #4]
 800eab8:	330c      	adds	r3, #12
 800eaba:	781b      	ldrb	r3, [r3, #0]
 800eabc:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[11] << 16) |
 800eabe:	4313      	orrs	r3, r2
                           (uint32_t)params[13];
 800eac0:	687a      	ldr	r2, [r7, #4]
 800eac2:	320d      	adds	r2, #13
 800eac4:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[12] <<  8) |
 800eac6:	431a      	orrs	r2, r3
  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 800eac8:	69bb      	ldr	r3, [r7, #24]
 800eaca:	60da      	str	r2, [r3, #12]

  return 0;
 800eacc:	2300      	movs	r3, #0
}
 800eace:	4618      	mov	r0, r3
 800ead0:	3720      	adds	r7, #32
 800ead2:	46bd      	mov	sp, r7
 800ead4:	bd80      	pop	{r7, pc}

0800ead6 <SCSI_ReadFormatCapacity>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
static int8_t SCSI_ReadFormatCapacity(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 800ead6:	b580      	push	{r7, lr}
 800ead8:	b088      	sub	sp, #32
 800eada:	af00      	add	r7, sp, #0
 800eadc:	60f8      	str	r0, [r7, #12]
 800eade:	460b      	mov	r3, r1
 800eae0:	607a      	str	r2, [r7, #4]
 800eae2:	72fb      	strb	r3, [r7, #11]
  UNUSED(params);
  uint16_t blk_size;
  uint32_t blk_nbr;
  uint16_t i;
  int8_t ret;
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 800eae4:	68fb      	ldr	r3, [r7, #12]
 800eae6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800eaea:	61bb      	str	r3, [r7, #24]

  ret = ((USBD_StorageTypeDef *)pdev->pUserData)->GetCapacity(lun, &blk_nbr, &blk_size);
 800eaec:	68fb      	ldr	r3, [r7, #12]
 800eaee:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800eaf2:	685b      	ldr	r3, [r3, #4]
 800eaf4:	f107 0214 	add.w	r2, r7, #20
 800eaf8:	f107 0110 	add.w	r1, r7, #16
 800eafc:	7af8      	ldrb	r0, [r7, #11]
 800eafe:	4798      	blx	r3
 800eb00:	4603      	mov	r3, r0
 800eb02:	75fb      	strb	r3, [r7, #23]

  if ((ret != 0) || (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED))
 800eb04:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800eb08:	2b00      	cmp	r3, #0
 800eb0a:	d104      	bne.n	800eb16 <SCSI_ReadFormatCapacity+0x40>
 800eb0c:	69bb      	ldr	r3, [r7, #24]
 800eb0e:	f893 3262 	ldrb.w	r3, [r3, #610]	; 0x262
 800eb12:	2b02      	cmp	r3, #2
 800eb14:	d108      	bne.n	800eb28 <SCSI_ReadFormatCapacity+0x52>
  {
    SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 800eb16:	7af9      	ldrb	r1, [r7, #11]
 800eb18:	233a      	movs	r3, #58	; 0x3a
 800eb1a:	2202      	movs	r2, #2
 800eb1c:	68f8      	ldr	r0, [r7, #12]
 800eb1e:	f000 f90c 	bl	800ed3a <SCSI_SenseCode>
    return -1;
 800eb22:	f04f 33ff 	mov.w	r3, #4294967295
 800eb26:	e03e      	b.n	800eba6 <SCSI_ReadFormatCapacity+0xd0>
  }

  for (i = 0U; i < 12U ; i++)
 800eb28:	2300      	movs	r3, #0
 800eb2a:	83fb      	strh	r3, [r7, #30]
 800eb2c:	e007      	b.n	800eb3e <SCSI_ReadFormatCapacity+0x68>
  {
    hmsc->bot_data[i] = 0U;
 800eb2e:	8bfb      	ldrh	r3, [r7, #30]
 800eb30:	69ba      	ldr	r2, [r7, #24]
 800eb32:	4413      	add	r3, r2
 800eb34:	2200      	movs	r2, #0
 800eb36:	741a      	strb	r2, [r3, #16]
  for (i = 0U; i < 12U ; i++)
 800eb38:	8bfb      	ldrh	r3, [r7, #30]
 800eb3a:	3301      	adds	r3, #1
 800eb3c:	83fb      	strh	r3, [r7, #30]
 800eb3e:	8bfb      	ldrh	r3, [r7, #30]
 800eb40:	2b0b      	cmp	r3, #11
 800eb42:	d9f4      	bls.n	800eb2e <SCSI_ReadFormatCapacity+0x58>
  }

  hmsc->bot_data[3] = 0x08U;
 800eb44:	69bb      	ldr	r3, [r7, #24]
 800eb46:	2208      	movs	r2, #8
 800eb48:	74da      	strb	r2, [r3, #19]
  hmsc->bot_data[4] = (uint8_t)((blk_nbr - 1U) >> 24);
 800eb4a:	693b      	ldr	r3, [r7, #16]
 800eb4c:	3b01      	subs	r3, #1
 800eb4e:	0e1b      	lsrs	r3, r3, #24
 800eb50:	b2da      	uxtb	r2, r3
 800eb52:	69bb      	ldr	r3, [r7, #24]
 800eb54:	751a      	strb	r2, [r3, #20]
  hmsc->bot_data[5] = (uint8_t)((blk_nbr - 1U) >> 16);
 800eb56:	693b      	ldr	r3, [r7, #16]
 800eb58:	3b01      	subs	r3, #1
 800eb5a:	0c1b      	lsrs	r3, r3, #16
 800eb5c:	b2da      	uxtb	r2, r3
 800eb5e:	69bb      	ldr	r3, [r7, #24]
 800eb60:	755a      	strb	r2, [r3, #21]
  hmsc->bot_data[6] = (uint8_t)((blk_nbr - 1U) >>  8);
 800eb62:	693b      	ldr	r3, [r7, #16]
 800eb64:	3b01      	subs	r3, #1
 800eb66:	0a1b      	lsrs	r3, r3, #8
 800eb68:	b2da      	uxtb	r2, r3
 800eb6a:	69bb      	ldr	r3, [r7, #24]
 800eb6c:	759a      	strb	r2, [r3, #22]
  hmsc->bot_data[7] = (uint8_t)(blk_nbr - 1U);
 800eb6e:	693b      	ldr	r3, [r7, #16]
 800eb70:	b2db      	uxtb	r3, r3
 800eb72:	3b01      	subs	r3, #1
 800eb74:	b2da      	uxtb	r2, r3
 800eb76:	69bb      	ldr	r3, [r7, #24]
 800eb78:	75da      	strb	r2, [r3, #23]

  hmsc->bot_data[8] = 0x02U;
 800eb7a:	69bb      	ldr	r3, [r7, #24]
 800eb7c:	2202      	movs	r2, #2
 800eb7e:	761a      	strb	r2, [r3, #24]
  hmsc->bot_data[9] = (uint8_t)(blk_size >>  16);
 800eb80:	8abb      	ldrh	r3, [r7, #20]
 800eb82:	141b      	asrs	r3, r3, #16
 800eb84:	b2da      	uxtb	r2, r3
 800eb86:	69bb      	ldr	r3, [r7, #24]
 800eb88:	765a      	strb	r2, [r3, #25]
  hmsc->bot_data[10] = (uint8_t)(blk_size >>  8);
 800eb8a:	8abb      	ldrh	r3, [r7, #20]
 800eb8c:	0a1b      	lsrs	r3, r3, #8
 800eb8e:	b29b      	uxth	r3, r3
 800eb90:	b2da      	uxtb	r2, r3
 800eb92:	69bb      	ldr	r3, [r7, #24]
 800eb94:	769a      	strb	r2, [r3, #26]
  hmsc->bot_data[11] = (uint8_t)(blk_size);
 800eb96:	8abb      	ldrh	r3, [r7, #20]
 800eb98:	b2da      	uxtb	r2, r3
 800eb9a:	69bb      	ldr	r3, [r7, #24]
 800eb9c:	76da      	strb	r2, [r3, #27]

  hmsc->bot_data_length = 12U;
 800eb9e:	69bb      	ldr	r3, [r7, #24]
 800eba0:	220c      	movs	r2, #12
 800eba2:	60da      	str	r2, [r3, #12]

  return 0;
 800eba4:	2300      	movs	r3, #0
}
 800eba6:	4618      	mov	r0, r3
 800eba8:	3720      	adds	r7, #32
 800ebaa:	46bd      	mov	sp, r7
 800ebac:	bd80      	pop	{r7, pc}
	...

0800ebb0 <SCSI_ModeSense6>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
static int8_t SCSI_ModeSense6(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 800ebb0:	b580      	push	{r7, lr}
 800ebb2:	b086      	sub	sp, #24
 800ebb4:	af00      	add	r7, sp, #0
 800ebb6:	60f8      	str	r0, [r7, #12]
 800ebb8:	460b      	mov	r3, r1
 800ebba:	607a      	str	r2, [r7, #4]
 800ebbc:	72fb      	strb	r3, [r7, #11]
  UNUSED(lun);
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 800ebbe:	68fb      	ldr	r3, [r7, #12]
 800ebc0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800ebc4:	613b      	str	r3, [r7, #16]
  uint16_t len = MODE_SENSE6_LEN;
 800ebc6:	2317      	movs	r3, #23
 800ebc8:	82fb      	strh	r3, [r7, #22]

  if (params[4] <= len)
 800ebca:	687b      	ldr	r3, [r7, #4]
 800ebcc:	3304      	adds	r3, #4
 800ebce:	781b      	ldrb	r3, [r3, #0]
 800ebd0:	b29b      	uxth	r3, r3
 800ebd2:	8afa      	ldrh	r2, [r7, #22]
 800ebd4:	429a      	cmp	r2, r3
 800ebd6:	d303      	bcc.n	800ebe0 <SCSI_ModeSense6+0x30>
  {
    len = params[4];
 800ebd8:	687b      	ldr	r3, [r7, #4]
 800ebda:	3304      	adds	r3, #4
 800ebdc:	781b      	ldrb	r3, [r3, #0]
 800ebde:	82fb      	strh	r3, [r7, #22]
  }

  (void)SCSI_UpdateBotData(hmsc, MSC_Mode_Sense6_data, len);
 800ebe0:	8afb      	ldrh	r3, [r7, #22]
 800ebe2:	461a      	mov	r2, r3
 800ebe4:	4904      	ldr	r1, [pc, #16]	; (800ebf8 <SCSI_ModeSense6+0x48>)
 800ebe6:	6938      	ldr	r0, [r7, #16]
 800ebe8:	f000 fd70 	bl	800f6cc <SCSI_UpdateBotData>

  return 0;
 800ebec:	2300      	movs	r3, #0
}
 800ebee:	4618      	mov	r0, r3
 800ebf0:	3718      	adds	r7, #24
 800ebf2:	46bd      	mov	sp, r7
 800ebf4:	bd80      	pop	{r7, pc}
 800ebf6:	bf00      	nop
 800ebf8:	240000c4 	.word	0x240000c4

0800ebfc <SCSI_ModeSense10>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
static int8_t SCSI_ModeSense10(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 800ebfc:	b580      	push	{r7, lr}
 800ebfe:	b086      	sub	sp, #24
 800ec00:	af00      	add	r7, sp, #0
 800ec02:	60f8      	str	r0, [r7, #12]
 800ec04:	460b      	mov	r3, r1
 800ec06:	607a      	str	r2, [r7, #4]
 800ec08:	72fb      	strb	r3, [r7, #11]
  UNUSED(lun);
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 800ec0a:	68fb      	ldr	r3, [r7, #12]
 800ec0c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800ec10:	613b      	str	r3, [r7, #16]
  uint16_t len = MODE_SENSE10_LEN;
 800ec12:	231b      	movs	r3, #27
 800ec14:	82fb      	strh	r3, [r7, #22]

  if (params[8] <= len)
 800ec16:	687b      	ldr	r3, [r7, #4]
 800ec18:	3308      	adds	r3, #8
 800ec1a:	781b      	ldrb	r3, [r3, #0]
 800ec1c:	b29b      	uxth	r3, r3
 800ec1e:	8afa      	ldrh	r2, [r7, #22]
 800ec20:	429a      	cmp	r2, r3
 800ec22:	d303      	bcc.n	800ec2c <SCSI_ModeSense10+0x30>
  {
    len = params[8];
 800ec24:	687b      	ldr	r3, [r7, #4]
 800ec26:	3308      	adds	r3, #8
 800ec28:	781b      	ldrb	r3, [r3, #0]
 800ec2a:	82fb      	strh	r3, [r7, #22]
  }

  (void)SCSI_UpdateBotData(hmsc, MSC_Mode_Sense10_data, len);
 800ec2c:	8afb      	ldrh	r3, [r7, #22]
 800ec2e:	461a      	mov	r2, r3
 800ec30:	4904      	ldr	r1, [pc, #16]	; (800ec44 <SCSI_ModeSense10+0x48>)
 800ec32:	6938      	ldr	r0, [r7, #16]
 800ec34:	f000 fd4a 	bl	800f6cc <SCSI_UpdateBotData>

  return 0;
 800ec38:	2300      	movs	r3, #0
}
 800ec3a:	4618      	mov	r0, r3
 800ec3c:	3718      	adds	r7, #24
 800ec3e:	46bd      	mov	sp, r7
 800ec40:	bd80      	pop	{r7, pc}
 800ec42:	bf00      	nop
 800ec44:	240000dc 	.word	0x240000dc

0800ec48 <SCSI_RequestSense>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
static int8_t SCSI_RequestSense(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 800ec48:	b580      	push	{r7, lr}
 800ec4a:	b086      	sub	sp, #24
 800ec4c:	af00      	add	r7, sp, #0
 800ec4e:	60f8      	str	r0, [r7, #12]
 800ec50:	460b      	mov	r3, r1
 800ec52:	607a      	str	r2, [r7, #4]
 800ec54:	72fb      	strb	r3, [r7, #11]
  UNUSED(lun);
  uint8_t i;
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 800ec56:	68fb      	ldr	r3, [r7, #12]
 800ec58:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800ec5c:	613b      	str	r3, [r7, #16]

  if (hmsc->cbw.dDataLength == 0U)
 800ec5e:	693b      	ldr	r3, [r7, #16]
 800ec60:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 800ec64:	2b00      	cmp	r3, #0
 800ec66:	d10a      	bne.n	800ec7e <SCSI_RequestSense+0x36>
  {
    SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 800ec68:	693b      	ldr	r3, [r7, #16]
 800ec6a:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 800ec6e:	2320      	movs	r3, #32
 800ec70:	2205      	movs	r2, #5
 800ec72:	68f8      	ldr	r0, [r7, #12]
 800ec74:	f000 f861 	bl	800ed3a <SCSI_SenseCode>
    return -1;
 800ec78:	f04f 33ff 	mov.w	r3, #4294967295
 800ec7c:	e059      	b.n	800ed32 <SCSI_RequestSense+0xea>
  }

  for (i = 0U; i < REQUEST_SENSE_DATA_LEN; i++)
 800ec7e:	2300      	movs	r3, #0
 800ec80:	75fb      	strb	r3, [r7, #23]
 800ec82:	e007      	b.n	800ec94 <SCSI_RequestSense+0x4c>
  {
    hmsc->bot_data[i] = 0U;
 800ec84:	7dfb      	ldrb	r3, [r7, #23]
 800ec86:	693a      	ldr	r2, [r7, #16]
 800ec88:	4413      	add	r3, r2
 800ec8a:	2200      	movs	r2, #0
 800ec8c:	741a      	strb	r2, [r3, #16]
  for (i = 0U; i < REQUEST_SENSE_DATA_LEN; i++)
 800ec8e:	7dfb      	ldrb	r3, [r7, #23]
 800ec90:	3301      	adds	r3, #1
 800ec92:	75fb      	strb	r3, [r7, #23]
 800ec94:	7dfb      	ldrb	r3, [r7, #23]
 800ec96:	2b11      	cmp	r3, #17
 800ec98:	d9f4      	bls.n	800ec84 <SCSI_RequestSense+0x3c>
  }

  hmsc->bot_data[0] = 0x70U;
 800ec9a:	693b      	ldr	r3, [r7, #16]
 800ec9c:	2270      	movs	r2, #112	; 0x70
 800ec9e:	741a      	strb	r2, [r3, #16]
  hmsc->bot_data[7] = REQUEST_SENSE_DATA_LEN - 6U;
 800eca0:	693b      	ldr	r3, [r7, #16]
 800eca2:	220c      	movs	r2, #12
 800eca4:	75da      	strb	r2, [r3, #23]

  if ((hmsc->scsi_sense_head != hmsc->scsi_sense_tail))
 800eca6:	693b      	ldr	r3, [r7, #16]
 800eca8:	f893 2260 	ldrb.w	r2, [r3, #608]	; 0x260
 800ecac:	693b      	ldr	r3, [r7, #16]
 800ecae:	f893 3261 	ldrb.w	r3, [r3, #609]	; 0x261
 800ecb2:	429a      	cmp	r2, r3
 800ecb4:	d02e      	beq.n	800ed14 <SCSI_RequestSense+0xcc>
  {
    hmsc->bot_data[2] = (uint8_t)hmsc->scsi_sense[hmsc->scsi_sense_head].Skey;
 800ecb6:	693b      	ldr	r3, [r7, #16]
 800ecb8:	f893 3260 	ldrb.w	r3, [r3, #608]	; 0x260
 800ecbc:	461a      	mov	r2, r3
 800ecbe:	693b      	ldr	r3, [r7, #16]
 800ecc0:	3248      	adds	r2, #72	; 0x48
 800ecc2:	f813 2032 	ldrb.w	r2, [r3, r2, lsl #3]
 800ecc6:	693b      	ldr	r3, [r7, #16]
 800ecc8:	749a      	strb	r2, [r3, #18]
    hmsc->bot_data[12] = (uint8_t)hmsc->scsi_sense[hmsc->scsi_sense_head].w.b.ASC;
 800ecca:	693b      	ldr	r3, [r7, #16]
 800eccc:	f893 3260 	ldrb.w	r3, [r3, #608]	; 0x260
 800ecd0:	693a      	ldr	r2, [r7, #16]
 800ecd2:	3348      	adds	r3, #72	; 0x48
 800ecd4:	00db      	lsls	r3, r3, #3
 800ecd6:	4413      	add	r3, r2
 800ecd8:	791a      	ldrb	r2, [r3, #4]
 800ecda:	693b      	ldr	r3, [r7, #16]
 800ecdc:	771a      	strb	r2, [r3, #28]
    hmsc->bot_data[13] = (uint8_t)hmsc->scsi_sense[hmsc->scsi_sense_head].w.b.ASCQ;
 800ecde:	693b      	ldr	r3, [r7, #16]
 800ece0:	f893 3260 	ldrb.w	r3, [r3, #608]	; 0x260
 800ece4:	693a      	ldr	r2, [r7, #16]
 800ece6:	3348      	adds	r3, #72	; 0x48
 800ece8:	00db      	lsls	r3, r3, #3
 800ecea:	4413      	add	r3, r2
 800ecec:	795a      	ldrb	r2, [r3, #5]
 800ecee:	693b      	ldr	r3, [r7, #16]
 800ecf0:	775a      	strb	r2, [r3, #29]
    hmsc->scsi_sense_head++;
 800ecf2:	693b      	ldr	r3, [r7, #16]
 800ecf4:	f893 3260 	ldrb.w	r3, [r3, #608]	; 0x260
 800ecf8:	3301      	adds	r3, #1
 800ecfa:	b2da      	uxtb	r2, r3
 800ecfc:	693b      	ldr	r3, [r7, #16]
 800ecfe:	f883 2260 	strb.w	r2, [r3, #608]	; 0x260

    if (hmsc->scsi_sense_head == SENSE_LIST_DEEPTH)
 800ed02:	693b      	ldr	r3, [r7, #16]
 800ed04:	f893 3260 	ldrb.w	r3, [r3, #608]	; 0x260
 800ed08:	2b04      	cmp	r3, #4
 800ed0a:	d103      	bne.n	800ed14 <SCSI_RequestSense+0xcc>
    {
      hmsc->scsi_sense_head = 0U;
 800ed0c:	693b      	ldr	r3, [r7, #16]
 800ed0e:	2200      	movs	r2, #0
 800ed10:	f883 2260 	strb.w	r2, [r3, #608]	; 0x260
    }
  }

  hmsc->bot_data_length = REQUEST_SENSE_DATA_LEN;
 800ed14:	693b      	ldr	r3, [r7, #16]
 800ed16:	2212      	movs	r2, #18
 800ed18:	60da      	str	r2, [r3, #12]

  if (params[4] <= REQUEST_SENSE_DATA_LEN)
 800ed1a:	687b      	ldr	r3, [r7, #4]
 800ed1c:	3304      	adds	r3, #4
 800ed1e:	781b      	ldrb	r3, [r3, #0]
 800ed20:	2b12      	cmp	r3, #18
 800ed22:	d805      	bhi.n	800ed30 <SCSI_RequestSense+0xe8>
  {
    hmsc->bot_data_length = params[4];
 800ed24:	687b      	ldr	r3, [r7, #4]
 800ed26:	3304      	adds	r3, #4
 800ed28:	781b      	ldrb	r3, [r3, #0]
 800ed2a:	461a      	mov	r2, r3
 800ed2c:	693b      	ldr	r3, [r7, #16]
 800ed2e:	60da      	str	r2, [r3, #12]
  }

  return 0;
 800ed30:	2300      	movs	r3, #0
}
 800ed32:	4618      	mov	r0, r3
 800ed34:	3718      	adds	r7, #24
 800ed36:	46bd      	mov	sp, r7
 800ed38:	bd80      	pop	{r7, pc}

0800ed3a <SCSI_SenseCode>:
* @param  ASC: Additional Sense Code
* @retval none

*/
void SCSI_SenseCode(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t sKey, uint8_t ASC)
{
 800ed3a:	b480      	push	{r7}
 800ed3c:	b085      	sub	sp, #20
 800ed3e:	af00      	add	r7, sp, #0
 800ed40:	6078      	str	r0, [r7, #4]
 800ed42:	4608      	mov	r0, r1
 800ed44:	4611      	mov	r1, r2
 800ed46:	461a      	mov	r2, r3
 800ed48:	4603      	mov	r3, r0
 800ed4a:	70fb      	strb	r3, [r7, #3]
 800ed4c:	460b      	mov	r3, r1
 800ed4e:	70bb      	strb	r3, [r7, #2]
 800ed50:	4613      	mov	r3, r2
 800ed52:	707b      	strb	r3, [r7, #1]
  UNUSED(lun);
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 800ed54:	687b      	ldr	r3, [r7, #4]
 800ed56:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800ed5a:	60fb      	str	r3, [r7, #12]

  hmsc->scsi_sense[hmsc->scsi_sense_tail].Skey = sKey;
 800ed5c:	68fb      	ldr	r3, [r7, #12]
 800ed5e:	f893 3261 	ldrb.w	r3, [r3, #609]	; 0x261
 800ed62:	461a      	mov	r2, r3
 800ed64:	68fb      	ldr	r3, [r7, #12]
 800ed66:	3248      	adds	r2, #72	; 0x48
 800ed68:	78b9      	ldrb	r1, [r7, #2]
 800ed6a:	f803 1032 	strb.w	r1, [r3, r2, lsl #3]
  hmsc->scsi_sense[hmsc->scsi_sense_tail].w.b.ASC = ASC;
 800ed6e:	68fb      	ldr	r3, [r7, #12]
 800ed70:	f893 3261 	ldrb.w	r3, [r3, #609]	; 0x261
 800ed74:	68fa      	ldr	r2, [r7, #12]
 800ed76:	3348      	adds	r3, #72	; 0x48
 800ed78:	00db      	lsls	r3, r3, #3
 800ed7a:	4413      	add	r3, r2
 800ed7c:	787a      	ldrb	r2, [r7, #1]
 800ed7e:	711a      	strb	r2, [r3, #4]
  hmsc->scsi_sense[hmsc->scsi_sense_tail].w.b.ASCQ = 0U;
 800ed80:	68fb      	ldr	r3, [r7, #12]
 800ed82:	f893 3261 	ldrb.w	r3, [r3, #609]	; 0x261
 800ed86:	68fa      	ldr	r2, [r7, #12]
 800ed88:	3348      	adds	r3, #72	; 0x48
 800ed8a:	00db      	lsls	r3, r3, #3
 800ed8c:	4413      	add	r3, r2
 800ed8e:	2200      	movs	r2, #0
 800ed90:	715a      	strb	r2, [r3, #5]
  hmsc->scsi_sense_tail++;
 800ed92:	68fb      	ldr	r3, [r7, #12]
 800ed94:	f893 3261 	ldrb.w	r3, [r3, #609]	; 0x261
 800ed98:	3301      	adds	r3, #1
 800ed9a:	b2da      	uxtb	r2, r3
 800ed9c:	68fb      	ldr	r3, [r7, #12]
 800ed9e:	f883 2261 	strb.w	r2, [r3, #609]	; 0x261

  if (hmsc->scsi_sense_tail == SENSE_LIST_DEEPTH)
 800eda2:	68fb      	ldr	r3, [r7, #12]
 800eda4:	f893 3261 	ldrb.w	r3, [r3, #609]	; 0x261
 800eda8:	2b04      	cmp	r3, #4
 800edaa:	d103      	bne.n	800edb4 <SCSI_SenseCode+0x7a>
  {
    hmsc->scsi_sense_tail = 0U;
 800edac:	68fb      	ldr	r3, [r7, #12]
 800edae:	2200      	movs	r2, #0
 800edb0:	f883 2261 	strb.w	r2, [r3, #609]	; 0x261
  }
}
 800edb4:	bf00      	nop
 800edb6:	3714      	adds	r7, #20
 800edb8:	46bd      	mov	sp, r7
 800edba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800edbe:	4770      	bx	lr

0800edc0 <SCSI_StartStopUnit>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
static int8_t SCSI_StartStopUnit(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 800edc0:	b580      	push	{r7, lr}
 800edc2:	b086      	sub	sp, #24
 800edc4:	af00      	add	r7, sp, #0
 800edc6:	60f8      	str	r0, [r7, #12]
 800edc8:	460b      	mov	r3, r1
 800edca:	607a      	str	r2, [r7, #4]
 800edcc:	72fb      	strb	r3, [r7, #11]
  UNUSED(lun);
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 800edce:	68fb      	ldr	r3, [r7, #12]
 800edd0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800edd4:	617b      	str	r3, [r7, #20]

  if ((hmsc->scsi_medium_state == SCSI_MEDIUM_LOCKED) && ((params[4] & 0x3U) == 2U))
 800edd6:	697b      	ldr	r3, [r7, #20]
 800edd8:	f893 3262 	ldrb.w	r3, [r3, #610]	; 0x262
 800eddc:	2b01      	cmp	r3, #1
 800edde:	d10f      	bne.n	800ee00 <SCSI_StartStopUnit+0x40>
 800ede0:	687b      	ldr	r3, [r7, #4]
 800ede2:	3304      	adds	r3, #4
 800ede4:	781b      	ldrb	r3, [r3, #0]
 800ede6:	f003 0303 	and.w	r3, r3, #3
 800edea:	2b02      	cmp	r3, #2
 800edec:	d108      	bne.n	800ee00 <SCSI_StartStopUnit+0x40>
  {
    SCSI_SenseCode(pdev, lun, ILLEGAL_REQUEST, INVALID_FIELED_IN_COMMAND);
 800edee:	7af9      	ldrb	r1, [r7, #11]
 800edf0:	2324      	movs	r3, #36	; 0x24
 800edf2:	2205      	movs	r2, #5
 800edf4:	68f8      	ldr	r0, [r7, #12]
 800edf6:	f7ff ffa0 	bl	800ed3a <SCSI_SenseCode>

    return -1;
 800edfa:	f04f 33ff 	mov.w	r3, #4294967295
 800edfe:	e026      	b.n	800ee4e <SCSI_StartStopUnit+0x8e>
  }

  if ((params[4] & 0x3U) == 0x1U) /* START=1 */
 800ee00:	687b      	ldr	r3, [r7, #4]
 800ee02:	3304      	adds	r3, #4
 800ee04:	781b      	ldrb	r3, [r3, #0]
 800ee06:	f003 0303 	and.w	r3, r3, #3
 800ee0a:	2b01      	cmp	r3, #1
 800ee0c:	d104      	bne.n	800ee18 <SCSI_StartStopUnit+0x58>
  {
    hmsc->scsi_medium_state = SCSI_MEDIUM_UNLOCKED;
 800ee0e:	697b      	ldr	r3, [r7, #20]
 800ee10:	2200      	movs	r2, #0
 800ee12:	f883 2262 	strb.w	r2, [r3, #610]	; 0x262
 800ee16:	e016      	b.n	800ee46 <SCSI_StartStopUnit+0x86>
  }
  else if ((params[4] & 0x3U) == 0x2U) /* START=0 and LOEJ Load Eject=1 */
 800ee18:	687b      	ldr	r3, [r7, #4]
 800ee1a:	3304      	adds	r3, #4
 800ee1c:	781b      	ldrb	r3, [r3, #0]
 800ee1e:	f003 0303 	and.w	r3, r3, #3
 800ee22:	2b02      	cmp	r3, #2
 800ee24:	d104      	bne.n	800ee30 <SCSI_StartStopUnit+0x70>
  {
    hmsc->scsi_medium_state = SCSI_MEDIUM_EJECTED;
 800ee26:	697b      	ldr	r3, [r7, #20]
 800ee28:	2202      	movs	r2, #2
 800ee2a:	f883 2262 	strb.w	r2, [r3, #610]	; 0x262
 800ee2e:	e00a      	b.n	800ee46 <SCSI_StartStopUnit+0x86>
  }
  else if ((params[4] & 0x3U) == 0x3U) /* START=1 and LOEJ Load Eject=1 */
 800ee30:	687b      	ldr	r3, [r7, #4]
 800ee32:	3304      	adds	r3, #4
 800ee34:	781b      	ldrb	r3, [r3, #0]
 800ee36:	f003 0303 	and.w	r3, r3, #3
 800ee3a:	2b03      	cmp	r3, #3
 800ee3c:	d103      	bne.n	800ee46 <SCSI_StartStopUnit+0x86>
  {
    hmsc->scsi_medium_state = SCSI_MEDIUM_UNLOCKED;
 800ee3e:	697b      	ldr	r3, [r7, #20]
 800ee40:	2200      	movs	r2, #0
 800ee42:	f883 2262 	strb.w	r2, [r3, #610]	; 0x262
  }
  else
  {
    /* .. */
  }
  hmsc->bot_data_length = 0U;
 800ee46:	697b      	ldr	r3, [r7, #20]
 800ee48:	2200      	movs	r2, #0
 800ee4a:	60da      	str	r2, [r3, #12]

  return 0;
 800ee4c:	2300      	movs	r3, #0
}
 800ee4e:	4618      	mov	r0, r3
 800ee50:	3718      	adds	r7, #24
 800ee52:	46bd      	mov	sp, r7
 800ee54:	bd80      	pop	{r7, pc}

0800ee56 <SCSI_AllowPreventRemovable>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
static int8_t SCSI_AllowPreventRemovable(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 800ee56:	b480      	push	{r7}
 800ee58:	b087      	sub	sp, #28
 800ee5a:	af00      	add	r7, sp, #0
 800ee5c:	60f8      	str	r0, [r7, #12]
 800ee5e:	460b      	mov	r3, r1
 800ee60:	607a      	str	r2, [r7, #4]
 800ee62:	72fb      	strb	r3, [r7, #11]
  UNUSED(lun);
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 800ee64:	68fb      	ldr	r3, [r7, #12]
 800ee66:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800ee6a:	617b      	str	r3, [r7, #20]

  if (params[4] == 0U)
 800ee6c:	687b      	ldr	r3, [r7, #4]
 800ee6e:	3304      	adds	r3, #4
 800ee70:	781b      	ldrb	r3, [r3, #0]
 800ee72:	2b00      	cmp	r3, #0
 800ee74:	d104      	bne.n	800ee80 <SCSI_AllowPreventRemovable+0x2a>
  {
    hmsc->scsi_medium_state = SCSI_MEDIUM_UNLOCKED;
 800ee76:	697b      	ldr	r3, [r7, #20]
 800ee78:	2200      	movs	r2, #0
 800ee7a:	f883 2262 	strb.w	r2, [r3, #610]	; 0x262
 800ee7e:	e003      	b.n	800ee88 <SCSI_AllowPreventRemovable+0x32>
  }
  else
  {
    hmsc->scsi_medium_state = SCSI_MEDIUM_LOCKED;
 800ee80:	697b      	ldr	r3, [r7, #20]
 800ee82:	2201      	movs	r2, #1
 800ee84:	f883 2262 	strb.w	r2, [r3, #610]	; 0x262
  }

  hmsc->bot_data_length = 0U;
 800ee88:	697b      	ldr	r3, [r7, #20]
 800ee8a:	2200      	movs	r2, #0
 800ee8c:	60da      	str	r2, [r3, #12]

  return 0;
 800ee8e:	2300      	movs	r3, #0
}
 800ee90:	4618      	mov	r0, r3
 800ee92:	371c      	adds	r7, #28
 800ee94:	46bd      	mov	sp, r7
 800ee96:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee9a:	4770      	bx	lr

0800ee9c <SCSI_Read10>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
static int8_t SCSI_Read10(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 800ee9c:	b580      	push	{r7, lr}
 800ee9e:	b086      	sub	sp, #24
 800eea0:	af00      	add	r7, sp, #0
 800eea2:	60f8      	str	r0, [r7, #12]
 800eea4:	460b      	mov	r3, r1
 800eea6:	607a      	str	r2, [r7, #4]
 800eea8:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 800eeaa:	68fb      	ldr	r3, [r7, #12]
 800eeac:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800eeb0:	617b      	str	r3, [r7, #20]

  if (hmsc->bot_state == USBD_BOT_IDLE) /* Idle */
 800eeb2:	697b      	ldr	r3, [r7, #20]
 800eeb4:	7a1b      	ldrb	r3, [r3, #8]
 800eeb6:	2b00      	cmp	r3, #0
 800eeb8:	d17c      	bne.n	800efb4 <SCSI_Read10+0x118>
  {
    /* case 10 : Ho <> Di */
    if ((hmsc->cbw.bmFlags & 0x80U) != 0x80U)
 800eeba:	697b      	ldr	r3, [r7, #20]
 800eebc:	f893 321c 	ldrb.w	r3, [r3, #540]	; 0x21c
 800eec0:	b25b      	sxtb	r3, r3
 800eec2:	2b00      	cmp	r3, #0
 800eec4:	db0a      	blt.n	800eedc <SCSI_Read10+0x40>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 800eec6:	697b      	ldr	r3, [r7, #20]
 800eec8:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 800eecc:	2320      	movs	r3, #32
 800eece:	2205      	movs	r2, #5
 800eed0:	68f8      	ldr	r0, [r7, #12]
 800eed2:	f7ff ff32 	bl	800ed3a <SCSI_SenseCode>
      return -1;
 800eed6:	f04f 33ff 	mov.w	r3, #4294967295
 800eeda:	e075      	b.n	800efc8 <SCSI_Read10+0x12c>
    }

    if (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED)
 800eedc:	697b      	ldr	r3, [r7, #20]
 800eede:	f893 3262 	ldrb.w	r3, [r3, #610]	; 0x262
 800eee2:	2b02      	cmp	r3, #2
 800eee4:	d108      	bne.n	800eef8 <SCSI_Read10+0x5c>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 800eee6:	7af9      	ldrb	r1, [r7, #11]
 800eee8:	233a      	movs	r3, #58	; 0x3a
 800eeea:	2202      	movs	r2, #2
 800eeec:	68f8      	ldr	r0, [r7, #12]
 800eeee:	f7ff ff24 	bl	800ed3a <SCSI_SenseCode>

      return -1;
 800eef2:	f04f 33ff 	mov.w	r3, #4294967295
 800eef6:	e067      	b.n	800efc8 <SCSI_Read10+0x12c>
    }

    if (((USBD_StorageTypeDef *)pdev->pUserData)->IsReady(lun) != 0)
 800eef8:	68fb      	ldr	r3, [r7, #12]
 800eefa:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800eefe:	689b      	ldr	r3, [r3, #8]
 800ef00:	7afa      	ldrb	r2, [r7, #11]
 800ef02:	4610      	mov	r0, r2
 800ef04:	4798      	blx	r3
 800ef06:	4603      	mov	r3, r0
 800ef08:	2b00      	cmp	r3, #0
 800ef0a:	d008      	beq.n	800ef1e <SCSI_Read10+0x82>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 800ef0c:	7af9      	ldrb	r1, [r7, #11]
 800ef0e:	233a      	movs	r3, #58	; 0x3a
 800ef10:	2202      	movs	r2, #2
 800ef12:	68f8      	ldr	r0, [r7, #12]
 800ef14:	f7ff ff11 	bl	800ed3a <SCSI_SenseCode>
      return -1;
 800ef18:	f04f 33ff 	mov.w	r3, #4294967295
 800ef1c:	e054      	b.n	800efc8 <SCSI_Read10+0x12c>
    }

    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 800ef1e:	687b      	ldr	r3, [r7, #4]
 800ef20:	3302      	adds	r3, #2
 800ef22:	781b      	ldrb	r3, [r3, #0]
 800ef24:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[3] << 16) |
 800ef26:	687b      	ldr	r3, [r7, #4]
 800ef28:	3303      	adds	r3, #3
 800ef2a:	781b      	ldrb	r3, [r3, #0]
 800ef2c:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 800ef2e:	431a      	orrs	r2, r3
                          ((uint32_t)params[4] <<  8) |
 800ef30:	687b      	ldr	r3, [r7, #4]
 800ef32:	3304      	adds	r3, #4
 800ef34:	781b      	ldrb	r3, [r3, #0]
 800ef36:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[3] << 16) |
 800ef38:	4313      	orrs	r3, r2
                          (uint32_t)params[5];
 800ef3a:	687a      	ldr	r2, [r7, #4]
 800ef3c:	3205      	adds	r2, #5
 800ef3e:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[4] <<  8) |
 800ef40:	431a      	orrs	r2, r3
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 800ef42:	697b      	ldr	r3, [r7, #20]
 800ef44:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c

    hmsc->scsi_blk_len = ((uint32_t)params[7] <<  8) | (uint32_t)params[8];
 800ef48:	687b      	ldr	r3, [r7, #4]
 800ef4a:	3307      	adds	r3, #7
 800ef4c:	781b      	ldrb	r3, [r3, #0]
 800ef4e:	021b      	lsls	r3, r3, #8
 800ef50:	687a      	ldr	r2, [r7, #4]
 800ef52:	3208      	adds	r2, #8
 800ef54:	7812      	ldrb	r2, [r2, #0]
 800ef56:	431a      	orrs	r2, r3
 800ef58:	697b      	ldr	r3, [r7, #20]
 800ef5a:	f8c3 2270 	str.w	r2, [r3, #624]	; 0x270

    if (SCSI_CheckAddressRange(pdev, lun, hmsc->scsi_blk_addr,
 800ef5e:	697b      	ldr	r3, [r7, #20]
 800ef60:	f8d3 226c 	ldr.w	r2, [r3, #620]	; 0x26c
 800ef64:	697b      	ldr	r3, [r7, #20]
 800ef66:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 800ef6a:	7af9      	ldrb	r1, [r7, #11]
 800ef6c:	68f8      	ldr	r0, [r7, #12]
 800ef6e:	f000 fa95 	bl	800f49c <SCSI_CheckAddressRange>
 800ef72:	4603      	mov	r3, r0
 800ef74:	2b00      	cmp	r3, #0
 800ef76:	da02      	bge.n	800ef7e <SCSI_Read10+0xe2>
                               hmsc->scsi_blk_len) < 0)
    {
      return -1; /* error */
 800ef78:	f04f 33ff 	mov.w	r3, #4294967295
 800ef7c:	e024      	b.n	800efc8 <SCSI_Read10+0x12c>
    }

    /* cases 4,5 : Hi <> Dn */
    if (hmsc->cbw.dDataLength != (hmsc->scsi_blk_len * hmsc->scsi_blk_size))
 800ef7e:	697b      	ldr	r3, [r7, #20]
 800ef80:	f8d3 2218 	ldr.w	r2, [r3, #536]	; 0x218
 800ef84:	697b      	ldr	r3, [r7, #20]
 800ef86:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 800ef8a:	6979      	ldr	r1, [r7, #20]
 800ef8c:	f8b1 1264 	ldrh.w	r1, [r1, #612]	; 0x264
 800ef90:	fb01 f303 	mul.w	r3, r1, r3
 800ef94:	429a      	cmp	r2, r3
 800ef96:	d00a      	beq.n	800efae <SCSI_Read10+0x112>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 800ef98:	697b      	ldr	r3, [r7, #20]
 800ef9a:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 800ef9e:	2320      	movs	r3, #32
 800efa0:	2205      	movs	r2, #5
 800efa2:	68f8      	ldr	r0, [r7, #12]
 800efa4:	f7ff fec9 	bl	800ed3a <SCSI_SenseCode>
      return -1;
 800efa8:	f04f 33ff 	mov.w	r3, #4294967295
 800efac:	e00c      	b.n	800efc8 <SCSI_Read10+0x12c>
    }

    hmsc->bot_state = USBD_BOT_DATA_IN;
 800efae:	697b      	ldr	r3, [r7, #20]
 800efb0:	2202      	movs	r2, #2
 800efb2:	721a      	strb	r2, [r3, #8]
  }
  hmsc->bot_data_length = MSC_MEDIA_PACKET;
 800efb4:	697b      	ldr	r3, [r7, #20]
 800efb6:	f44f 7200 	mov.w	r2, #512	; 0x200
 800efba:	60da      	str	r2, [r3, #12]

  return SCSI_ProcessRead(pdev, lun);
 800efbc:	7afb      	ldrb	r3, [r7, #11]
 800efbe:	4619      	mov	r1, r3
 800efc0:	68f8      	ldr	r0, [r7, #12]
 800efc2:	f000 fa8d 	bl	800f4e0 <SCSI_ProcessRead>
 800efc6:	4603      	mov	r3, r0
}
 800efc8:	4618      	mov	r0, r3
 800efca:	3718      	adds	r7, #24
 800efcc:	46bd      	mov	sp, r7
 800efce:	bd80      	pop	{r7, pc}

0800efd0 <SCSI_Read12>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
static int8_t SCSI_Read12(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 800efd0:	b580      	push	{r7, lr}
 800efd2:	b086      	sub	sp, #24
 800efd4:	af00      	add	r7, sp, #0
 800efd6:	60f8      	str	r0, [r7, #12]
 800efd8:	460b      	mov	r3, r1
 800efda:	607a      	str	r2, [r7, #4]
 800efdc:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 800efde:	68fb      	ldr	r3, [r7, #12]
 800efe0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800efe4:	617b      	str	r3, [r7, #20]

  if (hmsc->bot_state == USBD_BOT_IDLE) /* Idle */
 800efe6:	697b      	ldr	r3, [r7, #20]
 800efe8:	7a1b      	ldrb	r3, [r3, #8]
 800efea:	2b00      	cmp	r3, #0
 800efec:	f040 8087 	bne.w	800f0fe <SCSI_Read12+0x12e>
  {
    /* case 10 : Ho <> Di */
    if ((hmsc->cbw.bmFlags & 0x80U) != 0x80U)
 800eff0:	697b      	ldr	r3, [r7, #20]
 800eff2:	f893 321c 	ldrb.w	r3, [r3, #540]	; 0x21c
 800eff6:	b25b      	sxtb	r3, r3
 800eff8:	2b00      	cmp	r3, #0
 800effa:	db0a      	blt.n	800f012 <SCSI_Read12+0x42>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 800effc:	697b      	ldr	r3, [r7, #20]
 800effe:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 800f002:	2320      	movs	r3, #32
 800f004:	2205      	movs	r2, #5
 800f006:	68f8      	ldr	r0, [r7, #12]
 800f008:	f7ff fe97 	bl	800ed3a <SCSI_SenseCode>
      return -1;
 800f00c:	f04f 33ff 	mov.w	r3, #4294967295
 800f010:	e07f      	b.n	800f112 <SCSI_Read12+0x142>
    }

    if (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED)
 800f012:	697b      	ldr	r3, [r7, #20]
 800f014:	f893 3262 	ldrb.w	r3, [r3, #610]	; 0x262
 800f018:	2b02      	cmp	r3, #2
 800f01a:	d108      	bne.n	800f02e <SCSI_Read12+0x5e>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 800f01c:	7af9      	ldrb	r1, [r7, #11]
 800f01e:	233a      	movs	r3, #58	; 0x3a
 800f020:	2202      	movs	r2, #2
 800f022:	68f8      	ldr	r0, [r7, #12]
 800f024:	f7ff fe89 	bl	800ed3a <SCSI_SenseCode>
      return -1;
 800f028:	f04f 33ff 	mov.w	r3, #4294967295
 800f02c:	e071      	b.n	800f112 <SCSI_Read12+0x142>
    }

    if (((USBD_StorageTypeDef *)pdev->pUserData)->IsReady(lun) != 0)
 800f02e:	68fb      	ldr	r3, [r7, #12]
 800f030:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800f034:	689b      	ldr	r3, [r3, #8]
 800f036:	7afa      	ldrb	r2, [r7, #11]
 800f038:	4610      	mov	r0, r2
 800f03a:	4798      	blx	r3
 800f03c:	4603      	mov	r3, r0
 800f03e:	2b00      	cmp	r3, #0
 800f040:	d008      	beq.n	800f054 <SCSI_Read12+0x84>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 800f042:	7af9      	ldrb	r1, [r7, #11]
 800f044:	233a      	movs	r3, #58	; 0x3a
 800f046:	2202      	movs	r2, #2
 800f048:	68f8      	ldr	r0, [r7, #12]
 800f04a:	f7ff fe76 	bl	800ed3a <SCSI_SenseCode>
      return -1;
 800f04e:	f04f 33ff 	mov.w	r3, #4294967295
 800f052:	e05e      	b.n	800f112 <SCSI_Read12+0x142>
    }

    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 800f054:	687b      	ldr	r3, [r7, #4]
 800f056:	3302      	adds	r3, #2
 800f058:	781b      	ldrb	r3, [r3, #0]
 800f05a:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[3] << 16) |
 800f05c:	687b      	ldr	r3, [r7, #4]
 800f05e:	3303      	adds	r3, #3
 800f060:	781b      	ldrb	r3, [r3, #0]
 800f062:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 800f064:	431a      	orrs	r2, r3
                          ((uint32_t)params[4] <<  8) |
 800f066:	687b      	ldr	r3, [r7, #4]
 800f068:	3304      	adds	r3, #4
 800f06a:	781b      	ldrb	r3, [r3, #0]
 800f06c:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[3] << 16) |
 800f06e:	4313      	orrs	r3, r2
                          (uint32_t)params[5];
 800f070:	687a      	ldr	r2, [r7, #4]
 800f072:	3205      	adds	r2, #5
 800f074:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[4] <<  8) |
 800f076:	431a      	orrs	r2, r3
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 800f078:	697b      	ldr	r3, [r7, #20]
 800f07a:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c

    hmsc->scsi_blk_len = ((uint32_t)params[6] << 24) |
 800f07e:	687b      	ldr	r3, [r7, #4]
 800f080:	3306      	adds	r3, #6
 800f082:	781b      	ldrb	r3, [r3, #0]
 800f084:	061a      	lsls	r2, r3, #24
                         ((uint32_t)params[7] << 16) |
 800f086:	687b      	ldr	r3, [r7, #4]
 800f088:	3307      	adds	r3, #7
 800f08a:	781b      	ldrb	r3, [r3, #0]
 800f08c:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_len = ((uint32_t)params[6] << 24) |
 800f08e:	431a      	orrs	r2, r3
                         ((uint32_t)params[8] << 8) |
 800f090:	687b      	ldr	r3, [r7, #4]
 800f092:	3308      	adds	r3, #8
 800f094:	781b      	ldrb	r3, [r3, #0]
 800f096:	021b      	lsls	r3, r3, #8
                         ((uint32_t)params[7] << 16) |
 800f098:	4313      	orrs	r3, r2
                         (uint32_t)params[9];
 800f09a:	687a      	ldr	r2, [r7, #4]
 800f09c:	3209      	adds	r2, #9
 800f09e:	7812      	ldrb	r2, [r2, #0]
                         ((uint32_t)params[8] << 8) |
 800f0a0:	431a      	orrs	r2, r3
    hmsc->scsi_blk_len = ((uint32_t)params[6] << 24) |
 800f0a2:	697b      	ldr	r3, [r7, #20]
 800f0a4:	f8c3 2270 	str.w	r2, [r3, #624]	; 0x270

    if (SCSI_CheckAddressRange(pdev, lun, hmsc->scsi_blk_addr,
 800f0a8:	697b      	ldr	r3, [r7, #20]
 800f0aa:	f8d3 226c 	ldr.w	r2, [r3, #620]	; 0x26c
 800f0ae:	697b      	ldr	r3, [r7, #20]
 800f0b0:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 800f0b4:	7af9      	ldrb	r1, [r7, #11]
 800f0b6:	68f8      	ldr	r0, [r7, #12]
 800f0b8:	f000 f9f0 	bl	800f49c <SCSI_CheckAddressRange>
 800f0bc:	4603      	mov	r3, r0
 800f0be:	2b00      	cmp	r3, #0
 800f0c0:	da02      	bge.n	800f0c8 <SCSI_Read12+0xf8>
                               hmsc->scsi_blk_len) < 0)
    {
      return -1; /* error */
 800f0c2:	f04f 33ff 	mov.w	r3, #4294967295
 800f0c6:	e024      	b.n	800f112 <SCSI_Read12+0x142>
    }

    /* cases 4,5 : Hi <> Dn */
    if (hmsc->cbw.dDataLength != (hmsc->scsi_blk_len * hmsc->scsi_blk_size))
 800f0c8:	697b      	ldr	r3, [r7, #20]
 800f0ca:	f8d3 2218 	ldr.w	r2, [r3, #536]	; 0x218
 800f0ce:	697b      	ldr	r3, [r7, #20]
 800f0d0:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 800f0d4:	6979      	ldr	r1, [r7, #20]
 800f0d6:	f8b1 1264 	ldrh.w	r1, [r1, #612]	; 0x264
 800f0da:	fb01 f303 	mul.w	r3, r1, r3
 800f0de:	429a      	cmp	r2, r3
 800f0e0:	d00a      	beq.n	800f0f8 <SCSI_Read12+0x128>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 800f0e2:	697b      	ldr	r3, [r7, #20]
 800f0e4:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 800f0e8:	2320      	movs	r3, #32
 800f0ea:	2205      	movs	r2, #5
 800f0ec:	68f8      	ldr	r0, [r7, #12]
 800f0ee:	f7ff fe24 	bl	800ed3a <SCSI_SenseCode>
      return -1;
 800f0f2:	f04f 33ff 	mov.w	r3, #4294967295
 800f0f6:	e00c      	b.n	800f112 <SCSI_Read12+0x142>
    }

    hmsc->bot_state = USBD_BOT_DATA_IN;
 800f0f8:	697b      	ldr	r3, [r7, #20]
 800f0fa:	2202      	movs	r2, #2
 800f0fc:	721a      	strb	r2, [r3, #8]
  }
  hmsc->bot_data_length = MSC_MEDIA_PACKET;
 800f0fe:	697b      	ldr	r3, [r7, #20]
 800f100:	f44f 7200 	mov.w	r2, #512	; 0x200
 800f104:	60da      	str	r2, [r3, #12]

  return SCSI_ProcessRead(pdev, lun);
 800f106:	7afb      	ldrb	r3, [r7, #11]
 800f108:	4619      	mov	r1, r3
 800f10a:	68f8      	ldr	r0, [r7, #12]
 800f10c:	f000 f9e8 	bl	800f4e0 <SCSI_ProcessRead>
 800f110:	4603      	mov	r3, r0
}
 800f112:	4618      	mov	r0, r3
 800f114:	3718      	adds	r7, #24
 800f116:	46bd      	mov	sp, r7
 800f118:	bd80      	pop	{r7, pc}

0800f11a <SCSI_Write10>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
static int8_t SCSI_Write10(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 800f11a:	b580      	push	{r7, lr}
 800f11c:	b086      	sub	sp, #24
 800f11e:	af00      	add	r7, sp, #0
 800f120:	60f8      	str	r0, [r7, #12]
 800f122:	460b      	mov	r3, r1
 800f124:	607a      	str	r2, [r7, #4]
 800f126:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 800f128:	68fb      	ldr	r3, [r7, #12]
 800f12a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800f12e:	617b      	str	r3, [r7, #20]
  uint32_t len;

  if (hmsc->bot_state == USBD_BOT_IDLE) /* Idle */
 800f130:	697b      	ldr	r3, [r7, #20]
 800f132:	7a1b      	ldrb	r3, [r3, #8]
 800f134:	2b00      	cmp	r3, #0
 800f136:	f040 80a5 	bne.w	800f284 <SCSI_Write10+0x16a>
  {
    if (hmsc->cbw.dDataLength == 0U)
 800f13a:	697b      	ldr	r3, [r7, #20]
 800f13c:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 800f140:	2b00      	cmp	r3, #0
 800f142:	d10a      	bne.n	800f15a <SCSI_Write10+0x40>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 800f144:	697b      	ldr	r3, [r7, #20]
 800f146:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 800f14a:	2320      	movs	r3, #32
 800f14c:	2205      	movs	r2, #5
 800f14e:	68f8      	ldr	r0, [r7, #12]
 800f150:	f7ff fdf3 	bl	800ed3a <SCSI_SenseCode>
      return -1;
 800f154:	f04f 33ff 	mov.w	r3, #4294967295
 800f158:	e09a      	b.n	800f290 <SCSI_Write10+0x176>
    }

    /* case 8 : Hi <> Do */
    if ((hmsc->cbw.bmFlags & 0x80U) == 0x80U)
 800f15a:	697b      	ldr	r3, [r7, #20]
 800f15c:	f893 321c 	ldrb.w	r3, [r3, #540]	; 0x21c
 800f160:	b25b      	sxtb	r3, r3
 800f162:	2b00      	cmp	r3, #0
 800f164:	da0a      	bge.n	800f17c <SCSI_Write10+0x62>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 800f166:	697b      	ldr	r3, [r7, #20]
 800f168:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 800f16c:	2320      	movs	r3, #32
 800f16e:	2205      	movs	r2, #5
 800f170:	68f8      	ldr	r0, [r7, #12]
 800f172:	f7ff fde2 	bl	800ed3a <SCSI_SenseCode>
      return -1;
 800f176:	f04f 33ff 	mov.w	r3, #4294967295
 800f17a:	e089      	b.n	800f290 <SCSI_Write10+0x176>
    }

    /* Check whether Media is ready */
    if (((USBD_StorageTypeDef *)pdev->pUserData)->IsReady(lun) != 0)
 800f17c:	68fb      	ldr	r3, [r7, #12]
 800f17e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800f182:	689b      	ldr	r3, [r3, #8]
 800f184:	7afa      	ldrb	r2, [r7, #11]
 800f186:	4610      	mov	r0, r2
 800f188:	4798      	blx	r3
 800f18a:	4603      	mov	r3, r0
 800f18c:	2b00      	cmp	r3, #0
 800f18e:	d008      	beq.n	800f1a2 <SCSI_Write10+0x88>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 800f190:	7af9      	ldrb	r1, [r7, #11]
 800f192:	233a      	movs	r3, #58	; 0x3a
 800f194:	2202      	movs	r2, #2
 800f196:	68f8      	ldr	r0, [r7, #12]
 800f198:	f7ff fdcf 	bl	800ed3a <SCSI_SenseCode>
      return -1;
 800f19c:	f04f 33ff 	mov.w	r3, #4294967295
 800f1a0:	e076      	b.n	800f290 <SCSI_Write10+0x176>
    }

    /* Check If media is write-protected */
    if (((USBD_StorageTypeDef *)pdev->pUserData)->IsWriteProtected(lun) != 0)
 800f1a2:	68fb      	ldr	r3, [r7, #12]
 800f1a4:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800f1a8:	68db      	ldr	r3, [r3, #12]
 800f1aa:	7afa      	ldrb	r2, [r7, #11]
 800f1ac:	4610      	mov	r0, r2
 800f1ae:	4798      	blx	r3
 800f1b0:	4603      	mov	r3, r0
 800f1b2:	2b00      	cmp	r3, #0
 800f1b4:	d008      	beq.n	800f1c8 <SCSI_Write10+0xae>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, WRITE_PROTECTED);
 800f1b6:	7af9      	ldrb	r1, [r7, #11]
 800f1b8:	2327      	movs	r3, #39	; 0x27
 800f1ba:	2202      	movs	r2, #2
 800f1bc:	68f8      	ldr	r0, [r7, #12]
 800f1be:	f7ff fdbc 	bl	800ed3a <SCSI_SenseCode>
      return -1;
 800f1c2:	f04f 33ff 	mov.w	r3, #4294967295
 800f1c6:	e063      	b.n	800f290 <SCSI_Write10+0x176>
    }

    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 800f1c8:	687b      	ldr	r3, [r7, #4]
 800f1ca:	3302      	adds	r3, #2
 800f1cc:	781b      	ldrb	r3, [r3, #0]
 800f1ce:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[3] << 16) |
 800f1d0:	687b      	ldr	r3, [r7, #4]
 800f1d2:	3303      	adds	r3, #3
 800f1d4:	781b      	ldrb	r3, [r3, #0]
 800f1d6:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 800f1d8:	431a      	orrs	r2, r3
                          ((uint32_t)params[4] << 8) |
 800f1da:	687b      	ldr	r3, [r7, #4]
 800f1dc:	3304      	adds	r3, #4
 800f1de:	781b      	ldrb	r3, [r3, #0]
 800f1e0:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[3] << 16) |
 800f1e2:	4313      	orrs	r3, r2
                          (uint32_t)params[5];
 800f1e4:	687a      	ldr	r2, [r7, #4]
 800f1e6:	3205      	adds	r2, #5
 800f1e8:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[4] << 8) |
 800f1ea:	431a      	orrs	r2, r3
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 800f1ec:	697b      	ldr	r3, [r7, #20]
 800f1ee:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c

    hmsc->scsi_blk_len = ((uint32_t)params[7] << 8) |
 800f1f2:	687b      	ldr	r3, [r7, #4]
 800f1f4:	3307      	adds	r3, #7
 800f1f6:	781b      	ldrb	r3, [r3, #0]
 800f1f8:	021b      	lsls	r3, r3, #8
                         (uint32_t)params[8];
 800f1fa:	687a      	ldr	r2, [r7, #4]
 800f1fc:	3208      	adds	r2, #8
 800f1fe:	7812      	ldrb	r2, [r2, #0]
    hmsc->scsi_blk_len = ((uint32_t)params[7] << 8) |
 800f200:	431a      	orrs	r2, r3
 800f202:	697b      	ldr	r3, [r7, #20]
 800f204:	f8c3 2270 	str.w	r2, [r3, #624]	; 0x270

    /* check if LBA address is in the right range */
    if (SCSI_CheckAddressRange(pdev, lun, hmsc->scsi_blk_addr,
 800f208:	697b      	ldr	r3, [r7, #20]
 800f20a:	f8d3 226c 	ldr.w	r2, [r3, #620]	; 0x26c
 800f20e:	697b      	ldr	r3, [r7, #20]
 800f210:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 800f214:	7af9      	ldrb	r1, [r7, #11]
 800f216:	68f8      	ldr	r0, [r7, #12]
 800f218:	f000 f940 	bl	800f49c <SCSI_CheckAddressRange>
 800f21c:	4603      	mov	r3, r0
 800f21e:	2b00      	cmp	r3, #0
 800f220:	da02      	bge.n	800f228 <SCSI_Write10+0x10e>
                               hmsc->scsi_blk_len) < 0)
    {
      return -1; /* error */
 800f222:	f04f 33ff 	mov.w	r3, #4294967295
 800f226:	e033      	b.n	800f290 <SCSI_Write10+0x176>
    }

    len = hmsc->scsi_blk_len * hmsc->scsi_blk_size;
 800f228:	697b      	ldr	r3, [r7, #20]
 800f22a:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 800f22e:	697a      	ldr	r2, [r7, #20]
 800f230:	f8b2 2264 	ldrh.w	r2, [r2, #612]	; 0x264
 800f234:	fb02 f303 	mul.w	r3, r2, r3
 800f238:	613b      	str	r3, [r7, #16]

    /* cases 3,11,13 : Hn,Ho <> D0 */
    if (hmsc->cbw.dDataLength != len)
 800f23a:	697b      	ldr	r3, [r7, #20]
 800f23c:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 800f240:	693a      	ldr	r2, [r7, #16]
 800f242:	429a      	cmp	r2, r3
 800f244:	d00a      	beq.n	800f25c <SCSI_Write10+0x142>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 800f246:	697b      	ldr	r3, [r7, #20]
 800f248:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 800f24c:	2320      	movs	r3, #32
 800f24e:	2205      	movs	r2, #5
 800f250:	68f8      	ldr	r0, [r7, #12]
 800f252:	f7ff fd72 	bl	800ed3a <SCSI_SenseCode>
      return -1;
 800f256:	f04f 33ff 	mov.w	r3, #4294967295
 800f25a:	e019      	b.n	800f290 <SCSI_Write10+0x176>
    }

    len = MIN(len, MSC_MEDIA_PACKET);
 800f25c:	693b      	ldr	r3, [r7, #16]
 800f25e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800f262:	bf28      	it	cs
 800f264:	f44f 7300 	movcs.w	r3, #512	; 0x200
 800f268:	613b      	str	r3, [r7, #16]

    /* Prepare EP to receive first data packet */
    hmsc->bot_state = USBD_BOT_DATA_OUT;
 800f26a:	697b      	ldr	r3, [r7, #20]
 800f26c:	2201      	movs	r2, #1
 800f26e:	721a      	strb	r2, [r3, #8]
    (void)USBD_LL_PrepareReceive(pdev, MSC_EPOUT_ADDR, hmsc->bot_data, len);
 800f270:	697b      	ldr	r3, [r7, #20]
 800f272:	f103 0210 	add.w	r2, r3, #16
 800f276:	693b      	ldr	r3, [r7, #16]
 800f278:	2101      	movs	r1, #1
 800f27a:	68f8      	ldr	r0, [r7, #12]
 800f27c:	f001 ffed 	bl	801125a <USBD_LL_PrepareReceive>
  else /* Write Process ongoing */
  {
    return SCSI_ProcessWrite(pdev, lun);
  }

  return 0;
 800f280:	2300      	movs	r3, #0
 800f282:	e005      	b.n	800f290 <SCSI_Write10+0x176>
    return SCSI_ProcessWrite(pdev, lun);
 800f284:	7afb      	ldrb	r3, [r7, #11]
 800f286:	4619      	mov	r1, r3
 800f288:	68f8      	ldr	r0, [r7, #12]
 800f28a:	f000 f99c 	bl	800f5c6 <SCSI_ProcessWrite>
 800f28e:	4603      	mov	r3, r0
}
 800f290:	4618      	mov	r0, r3
 800f292:	3718      	adds	r7, #24
 800f294:	46bd      	mov	sp, r7
 800f296:	bd80      	pop	{r7, pc}

0800f298 <SCSI_Write12>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
static int8_t SCSI_Write12(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 800f298:	b580      	push	{r7, lr}
 800f29a:	b086      	sub	sp, #24
 800f29c:	af00      	add	r7, sp, #0
 800f29e:	60f8      	str	r0, [r7, #12]
 800f2a0:	460b      	mov	r3, r1
 800f2a2:	607a      	str	r2, [r7, #4]
 800f2a4:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 800f2a6:	68fb      	ldr	r3, [r7, #12]
 800f2a8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800f2ac:	617b      	str	r3, [r7, #20]
  uint32_t len;

  if (hmsc->bot_state == USBD_BOT_IDLE) /* Idle */
 800f2ae:	697b      	ldr	r3, [r7, #20]
 800f2b0:	7a1b      	ldrb	r3, [r3, #8]
 800f2b2:	2b00      	cmp	r3, #0
 800f2b4:	f040 80b5 	bne.w	800f422 <SCSI_Write12+0x18a>
  {
    if (hmsc->cbw.dDataLength == 0U)
 800f2b8:	697b      	ldr	r3, [r7, #20]
 800f2ba:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 800f2be:	2b00      	cmp	r3, #0
 800f2c0:	d10a      	bne.n	800f2d8 <SCSI_Write12+0x40>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 800f2c2:	697b      	ldr	r3, [r7, #20]
 800f2c4:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 800f2c8:	2320      	movs	r3, #32
 800f2ca:	2205      	movs	r2, #5
 800f2cc:	68f8      	ldr	r0, [r7, #12]
 800f2ce:	f7ff fd34 	bl	800ed3a <SCSI_SenseCode>
      return -1;
 800f2d2:	f04f 33ff 	mov.w	r3, #4294967295
 800f2d6:	e0aa      	b.n	800f42e <SCSI_Write12+0x196>
    }

    /* case 8 : Hi <> Do */
    if ((hmsc->cbw.bmFlags & 0x80U) == 0x80U)
 800f2d8:	697b      	ldr	r3, [r7, #20]
 800f2da:	f893 321c 	ldrb.w	r3, [r3, #540]	; 0x21c
 800f2de:	b25b      	sxtb	r3, r3
 800f2e0:	2b00      	cmp	r3, #0
 800f2e2:	da0a      	bge.n	800f2fa <SCSI_Write12+0x62>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 800f2e4:	697b      	ldr	r3, [r7, #20]
 800f2e6:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 800f2ea:	2320      	movs	r3, #32
 800f2ec:	2205      	movs	r2, #5
 800f2ee:	68f8      	ldr	r0, [r7, #12]
 800f2f0:	f7ff fd23 	bl	800ed3a <SCSI_SenseCode>
      return -1;
 800f2f4:	f04f 33ff 	mov.w	r3, #4294967295
 800f2f8:	e099      	b.n	800f42e <SCSI_Write12+0x196>
    }

    /* Check whether Media is ready */
    if (((USBD_StorageTypeDef *)pdev->pUserData)->IsReady(lun) != 0)
 800f2fa:	68fb      	ldr	r3, [r7, #12]
 800f2fc:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800f300:	689b      	ldr	r3, [r3, #8]
 800f302:	7afa      	ldrb	r2, [r7, #11]
 800f304:	4610      	mov	r0, r2
 800f306:	4798      	blx	r3
 800f308:	4603      	mov	r3, r0
 800f30a:	2b00      	cmp	r3, #0
 800f30c:	d00b      	beq.n	800f326 <SCSI_Write12+0x8e>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 800f30e:	7af9      	ldrb	r1, [r7, #11]
 800f310:	233a      	movs	r3, #58	; 0x3a
 800f312:	2202      	movs	r2, #2
 800f314:	68f8      	ldr	r0, [r7, #12]
 800f316:	f7ff fd10 	bl	800ed3a <SCSI_SenseCode>
      hmsc->bot_state = USBD_BOT_NO_DATA;
 800f31a:	697b      	ldr	r3, [r7, #20]
 800f31c:	2205      	movs	r2, #5
 800f31e:	721a      	strb	r2, [r3, #8]
      return -1;
 800f320:	f04f 33ff 	mov.w	r3, #4294967295
 800f324:	e083      	b.n	800f42e <SCSI_Write12+0x196>
    }

    /* Check If media is write-protected */
    if (((USBD_StorageTypeDef *)pdev->pUserData)->IsWriteProtected(lun) != 0)
 800f326:	68fb      	ldr	r3, [r7, #12]
 800f328:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800f32c:	68db      	ldr	r3, [r3, #12]
 800f32e:	7afa      	ldrb	r2, [r7, #11]
 800f330:	4610      	mov	r0, r2
 800f332:	4798      	blx	r3
 800f334:	4603      	mov	r3, r0
 800f336:	2b00      	cmp	r3, #0
 800f338:	d00b      	beq.n	800f352 <SCSI_Write12+0xba>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, WRITE_PROTECTED);
 800f33a:	7af9      	ldrb	r1, [r7, #11]
 800f33c:	2327      	movs	r3, #39	; 0x27
 800f33e:	2202      	movs	r2, #2
 800f340:	68f8      	ldr	r0, [r7, #12]
 800f342:	f7ff fcfa 	bl	800ed3a <SCSI_SenseCode>
      hmsc->bot_state = USBD_BOT_NO_DATA;
 800f346:	697b      	ldr	r3, [r7, #20]
 800f348:	2205      	movs	r2, #5
 800f34a:	721a      	strb	r2, [r3, #8]
      return -1;
 800f34c:	f04f 33ff 	mov.w	r3, #4294967295
 800f350:	e06d      	b.n	800f42e <SCSI_Write12+0x196>
    }

    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 800f352:	687b      	ldr	r3, [r7, #4]
 800f354:	3302      	adds	r3, #2
 800f356:	781b      	ldrb	r3, [r3, #0]
 800f358:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[3] << 16) |
 800f35a:	687b      	ldr	r3, [r7, #4]
 800f35c:	3303      	adds	r3, #3
 800f35e:	781b      	ldrb	r3, [r3, #0]
 800f360:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 800f362:	431a      	orrs	r2, r3
                          ((uint32_t)params[4] << 8) |
 800f364:	687b      	ldr	r3, [r7, #4]
 800f366:	3304      	adds	r3, #4
 800f368:	781b      	ldrb	r3, [r3, #0]
 800f36a:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[3] << 16) |
 800f36c:	4313      	orrs	r3, r2
                          (uint32_t)params[5];
 800f36e:	687a      	ldr	r2, [r7, #4]
 800f370:	3205      	adds	r2, #5
 800f372:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[4] << 8) |
 800f374:	431a      	orrs	r2, r3
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 800f376:	697b      	ldr	r3, [r7, #20]
 800f378:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c

    hmsc->scsi_blk_len = ((uint32_t)params[6] << 24) |
 800f37c:	687b      	ldr	r3, [r7, #4]
 800f37e:	3306      	adds	r3, #6
 800f380:	781b      	ldrb	r3, [r3, #0]
 800f382:	061a      	lsls	r2, r3, #24
                         ((uint32_t)params[7] << 16) |
 800f384:	687b      	ldr	r3, [r7, #4]
 800f386:	3307      	adds	r3, #7
 800f388:	781b      	ldrb	r3, [r3, #0]
 800f38a:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_len = ((uint32_t)params[6] << 24) |
 800f38c:	431a      	orrs	r2, r3
                         ((uint32_t)params[8] << 8) |
 800f38e:	687b      	ldr	r3, [r7, #4]
 800f390:	3308      	adds	r3, #8
 800f392:	781b      	ldrb	r3, [r3, #0]
 800f394:	021b      	lsls	r3, r3, #8
                         ((uint32_t)params[7] << 16) |
 800f396:	4313      	orrs	r3, r2
                         (uint32_t)params[9];
 800f398:	687a      	ldr	r2, [r7, #4]
 800f39a:	3209      	adds	r2, #9
 800f39c:	7812      	ldrb	r2, [r2, #0]
                         ((uint32_t)params[8] << 8) |
 800f39e:	431a      	orrs	r2, r3
    hmsc->scsi_blk_len = ((uint32_t)params[6] << 24) |
 800f3a0:	697b      	ldr	r3, [r7, #20]
 800f3a2:	f8c3 2270 	str.w	r2, [r3, #624]	; 0x270

    /* check if LBA address is in the right range */
    if (SCSI_CheckAddressRange(pdev, lun, hmsc->scsi_blk_addr,
 800f3a6:	697b      	ldr	r3, [r7, #20]
 800f3a8:	f8d3 226c 	ldr.w	r2, [r3, #620]	; 0x26c
 800f3ac:	697b      	ldr	r3, [r7, #20]
 800f3ae:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 800f3b2:	7af9      	ldrb	r1, [r7, #11]
 800f3b4:	68f8      	ldr	r0, [r7, #12]
 800f3b6:	f000 f871 	bl	800f49c <SCSI_CheckAddressRange>
 800f3ba:	4603      	mov	r3, r0
 800f3bc:	2b00      	cmp	r3, #0
 800f3be:	da02      	bge.n	800f3c6 <SCSI_Write12+0x12e>
                               hmsc->scsi_blk_len) < 0)
    {
      return -1; /* error */
 800f3c0:	f04f 33ff 	mov.w	r3, #4294967295
 800f3c4:	e033      	b.n	800f42e <SCSI_Write12+0x196>
    }

    len = hmsc->scsi_blk_len * hmsc->scsi_blk_size;
 800f3c6:	697b      	ldr	r3, [r7, #20]
 800f3c8:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 800f3cc:	697a      	ldr	r2, [r7, #20]
 800f3ce:	f8b2 2264 	ldrh.w	r2, [r2, #612]	; 0x264
 800f3d2:	fb02 f303 	mul.w	r3, r2, r3
 800f3d6:	613b      	str	r3, [r7, #16]

    /* cases 3,11,13 : Hn,Ho <> D0 */
    if (hmsc->cbw.dDataLength != len)
 800f3d8:	697b      	ldr	r3, [r7, #20]
 800f3da:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 800f3de:	693a      	ldr	r2, [r7, #16]
 800f3e0:	429a      	cmp	r2, r3
 800f3e2:	d00a      	beq.n	800f3fa <SCSI_Write12+0x162>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 800f3e4:	697b      	ldr	r3, [r7, #20]
 800f3e6:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 800f3ea:	2320      	movs	r3, #32
 800f3ec:	2205      	movs	r2, #5
 800f3ee:	68f8      	ldr	r0, [r7, #12]
 800f3f0:	f7ff fca3 	bl	800ed3a <SCSI_SenseCode>
      return -1;
 800f3f4:	f04f 33ff 	mov.w	r3, #4294967295
 800f3f8:	e019      	b.n	800f42e <SCSI_Write12+0x196>
    }

    len = MIN(len, MSC_MEDIA_PACKET);
 800f3fa:	693b      	ldr	r3, [r7, #16]
 800f3fc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800f400:	bf28      	it	cs
 800f402:	f44f 7300 	movcs.w	r3, #512	; 0x200
 800f406:	613b      	str	r3, [r7, #16]

    /* Prepare EP to receive first data packet */
    hmsc->bot_state = USBD_BOT_DATA_OUT;
 800f408:	697b      	ldr	r3, [r7, #20]
 800f40a:	2201      	movs	r2, #1
 800f40c:	721a      	strb	r2, [r3, #8]
    (void)USBD_LL_PrepareReceive(pdev, MSC_EPOUT_ADDR, hmsc->bot_data, len);
 800f40e:	697b      	ldr	r3, [r7, #20]
 800f410:	f103 0210 	add.w	r2, r3, #16
 800f414:	693b      	ldr	r3, [r7, #16]
 800f416:	2101      	movs	r1, #1
 800f418:	68f8      	ldr	r0, [r7, #12]
 800f41a:	f001 ff1e 	bl	801125a <USBD_LL_PrepareReceive>
  else /* Write Process ongoing */
  {
    return SCSI_ProcessWrite(pdev, lun);
  }

  return 0;
 800f41e:	2300      	movs	r3, #0
 800f420:	e005      	b.n	800f42e <SCSI_Write12+0x196>
    return SCSI_ProcessWrite(pdev, lun);
 800f422:	7afb      	ldrb	r3, [r7, #11]
 800f424:	4619      	mov	r1, r3
 800f426:	68f8      	ldr	r0, [r7, #12]
 800f428:	f000 f8cd 	bl	800f5c6 <SCSI_ProcessWrite>
 800f42c:	4603      	mov	r3, r0
}
 800f42e:	4618      	mov	r0, r3
 800f430:	3718      	adds	r7, #24
 800f432:	46bd      	mov	sp, r7
 800f434:	bd80      	pop	{r7, pc}

0800f436 <SCSI_Verify10>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
static int8_t SCSI_Verify10(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 800f436:	b580      	push	{r7, lr}
 800f438:	b086      	sub	sp, #24
 800f43a:	af00      	add	r7, sp, #0
 800f43c:	60f8      	str	r0, [r7, #12]
 800f43e:	460b      	mov	r3, r1
 800f440:	607a      	str	r2, [r7, #4]
 800f442:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 800f444:	68fb      	ldr	r3, [r7, #12]
 800f446:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800f44a:	617b      	str	r3, [r7, #20]

  if ((params[1] & 0x02U) == 0x02U)
 800f44c:	687b      	ldr	r3, [r7, #4]
 800f44e:	3301      	adds	r3, #1
 800f450:	781b      	ldrb	r3, [r3, #0]
 800f452:	f003 0302 	and.w	r3, r3, #2
 800f456:	2b00      	cmp	r3, #0
 800f458:	d008      	beq.n	800f46c <SCSI_Verify10+0x36>
  {
    SCSI_SenseCode(pdev, lun, ILLEGAL_REQUEST, INVALID_FIELED_IN_COMMAND);
 800f45a:	7af9      	ldrb	r1, [r7, #11]
 800f45c:	2324      	movs	r3, #36	; 0x24
 800f45e:	2205      	movs	r2, #5
 800f460:	68f8      	ldr	r0, [r7, #12]
 800f462:	f7ff fc6a 	bl	800ed3a <SCSI_SenseCode>
    return -1; /* Error, Verify Mode Not supported*/
 800f466:	f04f 33ff 	mov.w	r3, #4294967295
 800f46a:	e013      	b.n	800f494 <SCSI_Verify10+0x5e>
  }

  if (SCSI_CheckAddressRange(pdev, lun, hmsc->scsi_blk_addr, hmsc->scsi_blk_len) < 0)
 800f46c:	697b      	ldr	r3, [r7, #20]
 800f46e:	f8d3 226c 	ldr.w	r2, [r3, #620]	; 0x26c
 800f472:	697b      	ldr	r3, [r7, #20]
 800f474:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 800f478:	7af9      	ldrb	r1, [r7, #11]
 800f47a:	68f8      	ldr	r0, [r7, #12]
 800f47c:	f000 f80e 	bl	800f49c <SCSI_CheckAddressRange>
 800f480:	4603      	mov	r3, r0
 800f482:	2b00      	cmp	r3, #0
 800f484:	da02      	bge.n	800f48c <SCSI_Verify10+0x56>
  {
    return -1; /* error */
 800f486:	f04f 33ff 	mov.w	r3, #4294967295
 800f48a:	e003      	b.n	800f494 <SCSI_Verify10+0x5e>
  }

  hmsc->bot_data_length = 0U;
 800f48c:	697b      	ldr	r3, [r7, #20]
 800f48e:	2200      	movs	r2, #0
 800f490:	60da      	str	r2, [r3, #12]

  return 0;
 800f492:	2300      	movs	r3, #0
}
 800f494:	4618      	mov	r0, r3
 800f496:	3718      	adds	r7, #24
 800f498:	46bd      	mov	sp, r7
 800f49a:	bd80      	pop	{r7, pc}

0800f49c <SCSI_CheckAddressRange>:
* @param  blk_nbr: number of block to be processed
* @retval status
*/
static int8_t SCSI_CheckAddressRange(USBD_HandleTypeDef *pdev, uint8_t lun,
                                     uint32_t blk_offset, uint32_t blk_nbr)
{
 800f49c:	b580      	push	{r7, lr}
 800f49e:	b086      	sub	sp, #24
 800f4a0:	af00      	add	r7, sp, #0
 800f4a2:	60f8      	str	r0, [r7, #12]
 800f4a4:	607a      	str	r2, [r7, #4]
 800f4a6:	603b      	str	r3, [r7, #0]
 800f4a8:	460b      	mov	r3, r1
 800f4aa:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 800f4ac:	68fb      	ldr	r3, [r7, #12]
 800f4ae:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800f4b2:	617b      	str	r3, [r7, #20]

  if ((blk_offset + blk_nbr) > hmsc->scsi_blk_nbr)
 800f4b4:	687a      	ldr	r2, [r7, #4]
 800f4b6:	683b      	ldr	r3, [r7, #0]
 800f4b8:	441a      	add	r2, r3
 800f4ba:	697b      	ldr	r3, [r7, #20]
 800f4bc:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 800f4c0:	429a      	cmp	r2, r3
 800f4c2:	d908      	bls.n	800f4d6 <SCSI_CheckAddressRange+0x3a>
  {
    SCSI_SenseCode(pdev, lun, ILLEGAL_REQUEST, ADDRESS_OUT_OF_RANGE);
 800f4c4:	7af9      	ldrb	r1, [r7, #11]
 800f4c6:	2321      	movs	r3, #33	; 0x21
 800f4c8:	2205      	movs	r2, #5
 800f4ca:	68f8      	ldr	r0, [r7, #12]
 800f4cc:	f7ff fc35 	bl	800ed3a <SCSI_SenseCode>
    return -1;
 800f4d0:	f04f 33ff 	mov.w	r3, #4294967295
 800f4d4:	e000      	b.n	800f4d8 <SCSI_CheckAddressRange+0x3c>
  }

  return 0;
 800f4d6:	2300      	movs	r3, #0
}
 800f4d8:	4618      	mov	r0, r3
 800f4da:	3718      	adds	r7, #24
 800f4dc:	46bd      	mov	sp, r7
 800f4de:	bd80      	pop	{r7, pc}

0800f4e0 <SCSI_ProcessRead>:
*         Handle Read Process
* @param  lun: Logical unit number
* @retval status
*/
static int8_t SCSI_ProcessRead(USBD_HandleTypeDef *pdev, uint8_t lun)
{
 800f4e0:	b590      	push	{r4, r7, lr}
 800f4e2:	b085      	sub	sp, #20
 800f4e4:	af00      	add	r7, sp, #0
 800f4e6:	6078      	str	r0, [r7, #4]
 800f4e8:	460b      	mov	r3, r1
 800f4ea:	70fb      	strb	r3, [r7, #3]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 800f4ec:	687b      	ldr	r3, [r7, #4]
 800f4ee:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800f4f2:	60fb      	str	r3, [r7, #12]
  uint32_t len = hmsc->scsi_blk_len * hmsc->scsi_blk_size;
 800f4f4:	68fb      	ldr	r3, [r7, #12]
 800f4f6:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 800f4fa:	68fa      	ldr	r2, [r7, #12]
 800f4fc:	f8b2 2264 	ldrh.w	r2, [r2, #612]	; 0x264
 800f500:	fb02 f303 	mul.w	r3, r2, r3
 800f504:	60bb      	str	r3, [r7, #8]

  len = MIN(len, MSC_MEDIA_PACKET);
 800f506:	68bb      	ldr	r3, [r7, #8]
 800f508:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800f50c:	bf28      	it	cs
 800f50e:	f44f 7300 	movcs.w	r3, #512	; 0x200
 800f512:	60bb      	str	r3, [r7, #8]

  if (((USBD_StorageTypeDef *)pdev->pUserData)->Read(lun, hmsc->bot_data,
 800f514:	687b      	ldr	r3, [r7, #4]
 800f516:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800f51a:	691c      	ldr	r4, [r3, #16]
 800f51c:	68fb      	ldr	r3, [r7, #12]
 800f51e:	f103 0110 	add.w	r1, r3, #16
 800f522:	68fb      	ldr	r3, [r7, #12]
 800f524:	f8d3 226c 	ldr.w	r2, [r3, #620]	; 0x26c
                                                     hmsc->scsi_blk_addr,
                                                     (len / hmsc->scsi_blk_size)) < 0)
 800f528:	68fb      	ldr	r3, [r7, #12]
 800f52a:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 800f52e:	4618      	mov	r0, r3
 800f530:	68bb      	ldr	r3, [r7, #8]
 800f532:	fbb3 f3f0 	udiv	r3, r3, r0
  if (((USBD_StorageTypeDef *)pdev->pUserData)->Read(lun, hmsc->bot_data,
 800f536:	b29b      	uxth	r3, r3
 800f538:	78f8      	ldrb	r0, [r7, #3]
 800f53a:	47a0      	blx	r4
 800f53c:	4603      	mov	r3, r0
 800f53e:	2b00      	cmp	r3, #0
 800f540:	da08      	bge.n	800f554 <SCSI_ProcessRead+0x74>
  {
    SCSI_SenseCode(pdev, lun, HARDWARE_ERROR, UNRECOVERED_READ_ERROR);
 800f542:	78f9      	ldrb	r1, [r7, #3]
 800f544:	2311      	movs	r3, #17
 800f546:	2204      	movs	r2, #4
 800f548:	6878      	ldr	r0, [r7, #4]
 800f54a:	f7ff fbf6 	bl	800ed3a <SCSI_SenseCode>
    return -1;
 800f54e:	f04f 33ff 	mov.w	r3, #4294967295
 800f552:	e034      	b.n	800f5be <SCSI_ProcessRead+0xde>
  }

  (void)USBD_LL_Transmit(pdev, MSC_EPIN_ADDR, hmsc->bot_data, len);
 800f554:	68fb      	ldr	r3, [r7, #12]
 800f556:	f103 0210 	add.w	r2, r3, #16
 800f55a:	68bb      	ldr	r3, [r7, #8]
 800f55c:	2181      	movs	r1, #129	; 0x81
 800f55e:	6878      	ldr	r0, [r7, #4]
 800f560:	f001 fe5a 	bl	8011218 <USBD_LL_Transmit>

  hmsc->scsi_blk_addr += (len / hmsc->scsi_blk_size);
 800f564:	68fb      	ldr	r3, [r7, #12]
 800f566:	f8d3 226c 	ldr.w	r2, [r3, #620]	; 0x26c
 800f56a:	68fb      	ldr	r3, [r7, #12]
 800f56c:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 800f570:	4619      	mov	r1, r3
 800f572:	68bb      	ldr	r3, [r7, #8]
 800f574:	fbb3 f3f1 	udiv	r3, r3, r1
 800f578:	441a      	add	r2, r3
 800f57a:	68fb      	ldr	r3, [r7, #12]
 800f57c:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c
  hmsc->scsi_blk_len -= (len / hmsc->scsi_blk_size);
 800f580:	68fb      	ldr	r3, [r7, #12]
 800f582:	f8d3 2270 	ldr.w	r2, [r3, #624]	; 0x270
 800f586:	68fb      	ldr	r3, [r7, #12]
 800f588:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 800f58c:	4619      	mov	r1, r3
 800f58e:	68bb      	ldr	r3, [r7, #8]
 800f590:	fbb3 f3f1 	udiv	r3, r3, r1
 800f594:	1ad2      	subs	r2, r2, r3
 800f596:	68fb      	ldr	r3, [r7, #12]
 800f598:	f8c3 2270 	str.w	r2, [r3, #624]	; 0x270

  /* case 6 : Hi = Di */
  hmsc->csw.dDataResidue -= len;
 800f59c:	68fb      	ldr	r3, [r7, #12]
 800f59e:	f8d3 2238 	ldr.w	r2, [r3, #568]	; 0x238
 800f5a2:	68bb      	ldr	r3, [r7, #8]
 800f5a4:	1ad2      	subs	r2, r2, r3
 800f5a6:	68fb      	ldr	r3, [r7, #12]
 800f5a8:	f8c3 2238 	str.w	r2, [r3, #568]	; 0x238

  if (hmsc->scsi_blk_len == 0U)
 800f5ac:	68fb      	ldr	r3, [r7, #12]
 800f5ae:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 800f5b2:	2b00      	cmp	r3, #0
 800f5b4:	d102      	bne.n	800f5bc <SCSI_ProcessRead+0xdc>
  {
    hmsc->bot_state = USBD_BOT_LAST_DATA_IN;
 800f5b6:	68fb      	ldr	r3, [r7, #12]
 800f5b8:	2203      	movs	r2, #3
 800f5ba:	721a      	strb	r2, [r3, #8]
  }

  return 0;
 800f5bc:	2300      	movs	r3, #0
}
 800f5be:	4618      	mov	r0, r3
 800f5c0:	3714      	adds	r7, #20
 800f5c2:	46bd      	mov	sp, r7
 800f5c4:	bd90      	pop	{r4, r7, pc}

0800f5c6 <SCSI_ProcessWrite>:
*         Handle Write Process
* @param  lun: Logical unit number
* @retval status
*/
static int8_t SCSI_ProcessWrite(USBD_HandleTypeDef *pdev, uint8_t lun)
{
 800f5c6:	b590      	push	{r4, r7, lr}
 800f5c8:	b085      	sub	sp, #20
 800f5ca:	af00      	add	r7, sp, #0
 800f5cc:	6078      	str	r0, [r7, #4]
 800f5ce:	460b      	mov	r3, r1
 800f5d0:	70fb      	strb	r3, [r7, #3]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 800f5d2:	687b      	ldr	r3, [r7, #4]
 800f5d4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800f5d8:	60fb      	str	r3, [r7, #12]
  uint32_t len = hmsc->scsi_blk_len * hmsc->scsi_blk_size;
 800f5da:	68fb      	ldr	r3, [r7, #12]
 800f5dc:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 800f5e0:	68fa      	ldr	r2, [r7, #12]
 800f5e2:	f8b2 2264 	ldrh.w	r2, [r2, #612]	; 0x264
 800f5e6:	fb02 f303 	mul.w	r3, r2, r3
 800f5ea:	60bb      	str	r3, [r7, #8]

  len = MIN(len, MSC_MEDIA_PACKET);
 800f5ec:	68bb      	ldr	r3, [r7, #8]
 800f5ee:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800f5f2:	bf28      	it	cs
 800f5f4:	f44f 7300 	movcs.w	r3, #512	; 0x200
 800f5f8:	60bb      	str	r3, [r7, #8]

  if (((USBD_StorageTypeDef *)pdev->pUserData)->Write(lun, hmsc->bot_data,
 800f5fa:	687b      	ldr	r3, [r7, #4]
 800f5fc:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800f600:	695c      	ldr	r4, [r3, #20]
 800f602:	68fb      	ldr	r3, [r7, #12]
 800f604:	f103 0110 	add.w	r1, r3, #16
 800f608:	68fb      	ldr	r3, [r7, #12]
 800f60a:	f8d3 226c 	ldr.w	r2, [r3, #620]	; 0x26c
                                                      hmsc->scsi_blk_addr,
                                                      (len / hmsc->scsi_blk_size)) < 0)
 800f60e:	68fb      	ldr	r3, [r7, #12]
 800f610:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 800f614:	4618      	mov	r0, r3
 800f616:	68bb      	ldr	r3, [r7, #8]
 800f618:	fbb3 f3f0 	udiv	r3, r3, r0
  if (((USBD_StorageTypeDef *)pdev->pUserData)->Write(lun, hmsc->bot_data,
 800f61c:	b29b      	uxth	r3, r3
 800f61e:	78f8      	ldrb	r0, [r7, #3]
 800f620:	47a0      	blx	r4
 800f622:	4603      	mov	r3, r0
 800f624:	2b00      	cmp	r3, #0
 800f626:	da08      	bge.n	800f63a <SCSI_ProcessWrite+0x74>
  {
    SCSI_SenseCode(pdev, lun, HARDWARE_ERROR, WRITE_FAULT);
 800f628:	78f9      	ldrb	r1, [r7, #3]
 800f62a:	2303      	movs	r3, #3
 800f62c:	2204      	movs	r2, #4
 800f62e:	6878      	ldr	r0, [r7, #4]
 800f630:	f7ff fb83 	bl	800ed3a <SCSI_SenseCode>
    return -1;
 800f634:	f04f 33ff 	mov.w	r3, #4294967295
 800f638:	e044      	b.n	800f6c4 <SCSI_ProcessWrite+0xfe>
  }

  hmsc->scsi_blk_addr += (len / hmsc->scsi_blk_size);
 800f63a:	68fb      	ldr	r3, [r7, #12]
 800f63c:	f8d3 226c 	ldr.w	r2, [r3, #620]	; 0x26c
 800f640:	68fb      	ldr	r3, [r7, #12]
 800f642:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 800f646:	4619      	mov	r1, r3
 800f648:	68bb      	ldr	r3, [r7, #8]
 800f64a:	fbb3 f3f1 	udiv	r3, r3, r1
 800f64e:	441a      	add	r2, r3
 800f650:	68fb      	ldr	r3, [r7, #12]
 800f652:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c
  hmsc->scsi_blk_len -= (len / hmsc->scsi_blk_size);
 800f656:	68fb      	ldr	r3, [r7, #12]
 800f658:	f8d3 2270 	ldr.w	r2, [r3, #624]	; 0x270
 800f65c:	68fb      	ldr	r3, [r7, #12]
 800f65e:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 800f662:	4619      	mov	r1, r3
 800f664:	68bb      	ldr	r3, [r7, #8]
 800f666:	fbb3 f3f1 	udiv	r3, r3, r1
 800f66a:	1ad2      	subs	r2, r2, r3
 800f66c:	68fb      	ldr	r3, [r7, #12]
 800f66e:	f8c3 2270 	str.w	r2, [r3, #624]	; 0x270

  /* case 12 : Ho = Do */
  hmsc->csw.dDataResidue -= len;
 800f672:	68fb      	ldr	r3, [r7, #12]
 800f674:	f8d3 2238 	ldr.w	r2, [r3, #568]	; 0x238
 800f678:	68bb      	ldr	r3, [r7, #8]
 800f67a:	1ad2      	subs	r2, r2, r3
 800f67c:	68fb      	ldr	r3, [r7, #12]
 800f67e:	f8c3 2238 	str.w	r2, [r3, #568]	; 0x238

  if (hmsc->scsi_blk_len == 0U)
 800f682:	68fb      	ldr	r3, [r7, #12]
 800f684:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 800f688:	2b00      	cmp	r3, #0
 800f68a:	d104      	bne.n	800f696 <SCSI_ProcessWrite+0xd0>
  {
    MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_PASSED);
 800f68c:	2100      	movs	r1, #0
 800f68e:	6878      	ldr	r0, [r7, #4]
 800f690:	f7fe ff04 	bl	800e49c <MSC_BOT_SendCSW>
 800f694:	e015      	b.n	800f6c2 <SCSI_ProcessWrite+0xfc>
  }
  else
  {
    len = MIN((hmsc->scsi_blk_len * hmsc->scsi_blk_size), MSC_MEDIA_PACKET);
 800f696:	68fb      	ldr	r3, [r7, #12]
 800f698:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 800f69c:	68fa      	ldr	r2, [r7, #12]
 800f69e:	f8b2 2264 	ldrh.w	r2, [r2, #612]	; 0x264
 800f6a2:	fb02 f303 	mul.w	r3, r2, r3
 800f6a6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800f6aa:	bf28      	it	cs
 800f6ac:	f44f 7300 	movcs.w	r3, #512	; 0x200
 800f6b0:	60bb      	str	r3, [r7, #8]

    /* Prepare EP to Receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, MSC_EPOUT_ADDR, hmsc->bot_data, len);
 800f6b2:	68fb      	ldr	r3, [r7, #12]
 800f6b4:	f103 0210 	add.w	r2, r3, #16
 800f6b8:	68bb      	ldr	r3, [r7, #8]
 800f6ba:	2101      	movs	r1, #1
 800f6bc:	6878      	ldr	r0, [r7, #4]
 800f6be:	f001 fdcc 	bl	801125a <USBD_LL_PrepareReceive>
  }

  return 0;
 800f6c2:	2300      	movs	r3, #0
}
 800f6c4:	4618      	mov	r0, r3
 800f6c6:	3714      	adds	r7, #20
 800f6c8:	46bd      	mov	sp, r7
 800f6ca:	bd90      	pop	{r4, r7, pc}

0800f6cc <SCSI_UpdateBotData>:
* @param  length: Data length
* @retval status
*/
static int8_t SCSI_UpdateBotData(USBD_MSC_BOT_HandleTypeDef *hmsc,
                                 uint8_t *pBuff, uint16_t length)
{
 800f6cc:	b480      	push	{r7}
 800f6ce:	b087      	sub	sp, #28
 800f6d0:	af00      	add	r7, sp, #0
 800f6d2:	60f8      	str	r0, [r7, #12]
 800f6d4:	60b9      	str	r1, [r7, #8]
 800f6d6:	4613      	mov	r3, r2
 800f6d8:	80fb      	strh	r3, [r7, #6]
  uint16_t len = length;
 800f6da:	88fb      	ldrh	r3, [r7, #6]
 800f6dc:	82fb      	strh	r3, [r7, #22]

  hmsc->bot_data_length = len;
 800f6de:	8afa      	ldrh	r2, [r7, #22]
 800f6e0:	68fb      	ldr	r3, [r7, #12]
 800f6e2:	60da      	str	r2, [r3, #12]

  while (len != 0U)
 800f6e4:	e00b      	b.n	800f6fe <SCSI_UpdateBotData+0x32>
  {
    len--;
 800f6e6:	8afb      	ldrh	r3, [r7, #22]
 800f6e8:	3b01      	subs	r3, #1
 800f6ea:	82fb      	strh	r3, [r7, #22]
    hmsc->bot_data[len] = pBuff[len];
 800f6ec:	8afb      	ldrh	r3, [r7, #22]
 800f6ee:	68ba      	ldr	r2, [r7, #8]
 800f6f0:	441a      	add	r2, r3
 800f6f2:	8afb      	ldrh	r3, [r7, #22]
 800f6f4:	7811      	ldrb	r1, [r2, #0]
 800f6f6:	68fa      	ldr	r2, [r7, #12]
 800f6f8:	4413      	add	r3, r2
 800f6fa:	460a      	mov	r2, r1
 800f6fc:	741a      	strb	r2, [r3, #16]
  while (len != 0U)
 800f6fe:	8afb      	ldrh	r3, [r7, #22]
 800f700:	2b00      	cmp	r3, #0
 800f702:	d1f0      	bne.n	800f6e6 <SCSI_UpdateBotData+0x1a>
  }

  return 0;
 800f704:	2300      	movs	r3, #0
}
 800f706:	4618      	mov	r0, r3
 800f708:	371c      	adds	r7, #28
 800f70a:	46bd      	mov	sp, r7
 800f70c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f710:	4770      	bx	lr

0800f712 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800f712:	b580      	push	{r7, lr}
 800f714:	b086      	sub	sp, #24
 800f716:	af00      	add	r7, sp, #0
 800f718:	60f8      	str	r0, [r7, #12]
 800f71a:	60b9      	str	r1, [r7, #8]
 800f71c:	4613      	mov	r3, r2
 800f71e:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800f720:	68fb      	ldr	r3, [r7, #12]
 800f722:	2b00      	cmp	r3, #0
 800f724:	d101      	bne.n	800f72a <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 800f726:	2303      	movs	r3, #3
 800f728:	e025      	b.n	800f776 <USBD_Init+0x64>
  }

  /* Unlink previous class */
  if (pdev->pClass != NULL)
 800f72a:	68fb      	ldr	r3, [r7, #12]
 800f72c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f730:	2b00      	cmp	r3, #0
 800f732:	d003      	beq.n	800f73c <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 800f734:	68fb      	ldr	r3, [r7, #12]
 800f736:	2200      	movs	r2, #0
 800f738:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }

  if (pdev->pConfDesc != NULL)
 800f73c:	68fb      	ldr	r3, [r7, #12]
 800f73e:	f8d3 32cc 	ldr.w	r3, [r3, #716]	; 0x2cc
 800f742:	2b00      	cmp	r3, #0
 800f744:	d003      	beq.n	800f74e <USBD_Init+0x3c>
  {
    pdev->pConfDesc = NULL;
 800f746:	68fb      	ldr	r3, [r7, #12]
 800f748:	2200      	movs	r2, #0
 800f74a:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800f74e:	68bb      	ldr	r3, [r7, #8]
 800f750:	2b00      	cmp	r3, #0
 800f752:	d003      	beq.n	800f75c <USBD_Init+0x4a>
  {
    pdev->pDesc = pdesc;
 800f754:	68fb      	ldr	r3, [r7, #12]
 800f756:	68ba      	ldr	r2, [r7, #8]
 800f758:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800f75c:	68fb      	ldr	r3, [r7, #12]
 800f75e:	2201      	movs	r2, #1
 800f760:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 800f764:	68fb      	ldr	r3, [r7, #12]
 800f766:	79fa      	ldrb	r2, [r7, #7]
 800f768:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800f76a:	68f8      	ldr	r0, [r7, #12]
 800f76c:	f001 fbfc 	bl	8010f68 <USBD_LL_Init>
 800f770:	4603      	mov	r3, r0
 800f772:	75fb      	strb	r3, [r7, #23]

  return ret;
 800f774:	7dfb      	ldrb	r3, [r7, #23]
}
 800f776:	4618      	mov	r0, r3
 800f778:	3718      	adds	r7, #24
 800f77a:	46bd      	mov	sp, r7
 800f77c:	bd80      	pop	{r7, pc}

0800f77e <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800f77e:	b580      	push	{r7, lr}
 800f780:	b084      	sub	sp, #16
 800f782:	af00      	add	r7, sp, #0
 800f784:	6078      	str	r0, [r7, #4]
 800f786:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800f788:	2300      	movs	r3, #0
 800f78a:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800f78c:	683b      	ldr	r3, [r7, #0]
 800f78e:	2b00      	cmp	r3, #0
 800f790:	d101      	bne.n	800f796 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 800f792:	2303      	movs	r3, #3
 800f794:	e010      	b.n	800f7b8 <USBD_RegisterClass+0x3a>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 800f796:	687b      	ldr	r3, [r7, #4]
 800f798:	683a      	ldr	r2, [r7, #0]
 800f79a:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  /* Get Device Configuration Descriptor */
#ifdef USE_USB_FS
  pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
#else /* USE_USB_HS */
  pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
 800f79e:	687b      	ldr	r3, [r7, #4]
 800f7a0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f7a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f7a6:	f107 020e 	add.w	r2, r7, #14
 800f7aa:	4610      	mov	r0, r2
 800f7ac:	4798      	blx	r3
 800f7ae:	4602      	mov	r2, r0
 800f7b0:	687b      	ldr	r3, [r7, #4]
 800f7b2:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
#endif /* USE_USB_FS */


  return USBD_OK;
 800f7b6:	2300      	movs	r3, #0
}
 800f7b8:	4618      	mov	r0, r3
 800f7ba:	3710      	adds	r7, #16
 800f7bc:	46bd      	mov	sp, r7
 800f7be:	bd80      	pop	{r7, pc}

0800f7c0 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800f7c0:	b580      	push	{r7, lr}
 800f7c2:	b082      	sub	sp, #8
 800f7c4:	af00      	add	r7, sp, #0
 800f7c6:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800f7c8:	6878      	ldr	r0, [r7, #4]
 800f7ca:	f001 fc1d 	bl	8011008 <USBD_LL_Start>
 800f7ce:	4603      	mov	r3, r0
}
 800f7d0:	4618      	mov	r0, r3
 800f7d2:	3708      	adds	r7, #8
 800f7d4:	46bd      	mov	sp, r7
 800f7d6:	bd80      	pop	{r7, pc}

0800f7d8 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 800f7d8:	b480      	push	{r7}
 800f7da:	b083      	sub	sp, #12
 800f7dc:	af00      	add	r7, sp, #0
 800f7de:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800f7e0:	2300      	movs	r3, #0
}
 800f7e2:	4618      	mov	r0, r3
 800f7e4:	370c      	adds	r7, #12
 800f7e6:	46bd      	mov	sp, r7
 800f7e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f7ec:	4770      	bx	lr

0800f7ee <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800f7ee:	b580      	push	{r7, lr}
 800f7f0:	b084      	sub	sp, #16
 800f7f2:	af00      	add	r7, sp, #0
 800f7f4:	6078      	str	r0, [r7, #4]
 800f7f6:	460b      	mov	r3, r1
 800f7f8:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 800f7fa:	2303      	movs	r3, #3
 800f7fc:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 800f7fe:	687b      	ldr	r3, [r7, #4]
 800f800:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f804:	2b00      	cmp	r3, #0
 800f806:	d009      	beq.n	800f81c <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 800f808:	687b      	ldr	r3, [r7, #4]
 800f80a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f80e:	681b      	ldr	r3, [r3, #0]
 800f810:	78fa      	ldrb	r2, [r7, #3]
 800f812:	4611      	mov	r1, r2
 800f814:	6878      	ldr	r0, [r7, #4]
 800f816:	4798      	blx	r3
 800f818:	4603      	mov	r3, r0
 800f81a:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 800f81c:	7bfb      	ldrb	r3, [r7, #15]
}
 800f81e:	4618      	mov	r0, r3
 800f820:	3710      	adds	r7, #16
 800f822:	46bd      	mov	sp, r7
 800f824:	bd80      	pop	{r7, pc}

0800f826 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800f826:	b580      	push	{r7, lr}
 800f828:	b082      	sub	sp, #8
 800f82a:	af00      	add	r7, sp, #0
 800f82c:	6078      	str	r0, [r7, #4]
 800f82e:	460b      	mov	r3, r1
 800f830:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 800f832:	687b      	ldr	r3, [r7, #4]
 800f834:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f838:	2b00      	cmp	r3, #0
 800f83a:	d007      	beq.n	800f84c <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 800f83c:	687b      	ldr	r3, [r7, #4]
 800f83e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f842:	685b      	ldr	r3, [r3, #4]
 800f844:	78fa      	ldrb	r2, [r7, #3]
 800f846:	4611      	mov	r1, r2
 800f848:	6878      	ldr	r0, [r7, #4]
 800f84a:	4798      	blx	r3
  }

  return USBD_OK;
 800f84c:	2300      	movs	r3, #0
}
 800f84e:	4618      	mov	r0, r3
 800f850:	3708      	adds	r7, #8
 800f852:	46bd      	mov	sp, r7
 800f854:	bd80      	pop	{r7, pc}

0800f856 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800f856:	b580      	push	{r7, lr}
 800f858:	b084      	sub	sp, #16
 800f85a:	af00      	add	r7, sp, #0
 800f85c:	6078      	str	r0, [r7, #4]
 800f85e:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800f860:	687b      	ldr	r3, [r7, #4]
 800f862:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800f866:	6839      	ldr	r1, [r7, #0]
 800f868:	4618      	mov	r0, r3
 800f86a:	f000 ff2b 	bl	80106c4 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800f86e:	687b      	ldr	r3, [r7, #4]
 800f870:	2201      	movs	r2, #1
 800f872:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800f876:	687b      	ldr	r3, [r7, #4]
 800f878:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 800f87c:	461a      	mov	r2, r3
 800f87e:	687b      	ldr	r3, [r7, #4]
 800f880:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800f884:	687b      	ldr	r3, [r7, #4]
 800f886:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800f88a:	f003 031f 	and.w	r3, r3, #31
 800f88e:	2b01      	cmp	r3, #1
 800f890:	d00e      	beq.n	800f8b0 <USBD_LL_SetupStage+0x5a>
 800f892:	2b01      	cmp	r3, #1
 800f894:	d302      	bcc.n	800f89c <USBD_LL_SetupStage+0x46>
 800f896:	2b02      	cmp	r3, #2
 800f898:	d014      	beq.n	800f8c4 <USBD_LL_SetupStage+0x6e>
 800f89a:	e01d      	b.n	800f8d8 <USBD_LL_SetupStage+0x82>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800f89c:	687b      	ldr	r3, [r7, #4]
 800f89e:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800f8a2:	4619      	mov	r1, r3
 800f8a4:	6878      	ldr	r0, [r7, #4]
 800f8a6:	f000 fa17 	bl	800fcd8 <USBD_StdDevReq>
 800f8aa:	4603      	mov	r3, r0
 800f8ac:	73fb      	strb	r3, [r7, #15]
      break;
 800f8ae:	e020      	b.n	800f8f2 <USBD_LL_SetupStage+0x9c>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800f8b0:	687b      	ldr	r3, [r7, #4]
 800f8b2:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800f8b6:	4619      	mov	r1, r3
 800f8b8:	6878      	ldr	r0, [r7, #4]
 800f8ba:	f000 fa7b 	bl	800fdb4 <USBD_StdItfReq>
 800f8be:	4603      	mov	r3, r0
 800f8c0:	73fb      	strb	r3, [r7, #15]
      break;
 800f8c2:	e016      	b.n	800f8f2 <USBD_LL_SetupStage+0x9c>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800f8c4:	687b      	ldr	r3, [r7, #4]
 800f8c6:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800f8ca:	4619      	mov	r1, r3
 800f8cc:	6878      	ldr	r0, [r7, #4]
 800f8ce:	f000 fab7 	bl	800fe40 <USBD_StdEPReq>
 800f8d2:	4603      	mov	r3, r0
 800f8d4:	73fb      	strb	r3, [r7, #15]
      break;
 800f8d6:	e00c      	b.n	800f8f2 <USBD_LL_SetupStage+0x9c>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800f8d8:	687b      	ldr	r3, [r7, #4]
 800f8da:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800f8de:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800f8e2:	b2db      	uxtb	r3, r3
 800f8e4:	4619      	mov	r1, r3
 800f8e6:	6878      	ldr	r0, [r7, #4]
 800f8e8:	f001 fc0d 	bl	8011106 <USBD_LL_StallEP>
 800f8ec:	4603      	mov	r3, r0
 800f8ee:	73fb      	strb	r3, [r7, #15]
      break;
 800f8f0:	bf00      	nop
  }

  return ret;
 800f8f2:	7bfb      	ldrb	r3, [r7, #15]
}
 800f8f4:	4618      	mov	r0, r3
 800f8f6:	3710      	adds	r7, #16
 800f8f8:	46bd      	mov	sp, r7
 800f8fa:	bd80      	pop	{r7, pc}

0800f8fc <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800f8fc:	b580      	push	{r7, lr}
 800f8fe:	b086      	sub	sp, #24
 800f900:	af00      	add	r7, sp, #0
 800f902:	60f8      	str	r0, [r7, #12]
 800f904:	460b      	mov	r3, r1
 800f906:	607a      	str	r2, [r7, #4]
 800f908:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800f90a:	7afb      	ldrb	r3, [r7, #11]
 800f90c:	2b00      	cmp	r3, #0
 800f90e:	d137      	bne.n	800f980 <USBD_LL_DataOutStage+0x84>
  {
    pep = &pdev->ep_out[0];
 800f910:	68fb      	ldr	r3, [r7, #12]
 800f912:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800f916:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800f918:	68fb      	ldr	r3, [r7, #12]
 800f91a:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800f91e:	2b03      	cmp	r3, #3
 800f920:	d14a      	bne.n	800f9b8 <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 800f922:	693b      	ldr	r3, [r7, #16]
 800f924:	689a      	ldr	r2, [r3, #8]
 800f926:	693b      	ldr	r3, [r7, #16]
 800f928:	68db      	ldr	r3, [r3, #12]
 800f92a:	429a      	cmp	r2, r3
 800f92c:	d913      	bls.n	800f956 <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800f92e:	693b      	ldr	r3, [r7, #16]
 800f930:	689a      	ldr	r2, [r3, #8]
 800f932:	693b      	ldr	r3, [r7, #16]
 800f934:	68db      	ldr	r3, [r3, #12]
 800f936:	1ad2      	subs	r2, r2, r3
 800f938:	693b      	ldr	r3, [r7, #16]
 800f93a:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800f93c:	693b      	ldr	r3, [r7, #16]
 800f93e:	68da      	ldr	r2, [r3, #12]
 800f940:	693b      	ldr	r3, [r7, #16]
 800f942:	689b      	ldr	r3, [r3, #8]
 800f944:	4293      	cmp	r3, r2
 800f946:	bf28      	it	cs
 800f948:	4613      	movcs	r3, r2
 800f94a:	461a      	mov	r2, r3
 800f94c:	6879      	ldr	r1, [r7, #4]
 800f94e:	68f8      	ldr	r0, [r7, #12]
 800f950:	f000 ff8f 	bl	8010872 <USBD_CtlContinueRx>
 800f954:	e030      	b.n	800f9b8 <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 800f956:	68fb      	ldr	r3, [r7, #12]
 800f958:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f95c:	691b      	ldr	r3, [r3, #16]
 800f95e:	2b00      	cmp	r3, #0
 800f960:	d00a      	beq.n	800f978 <USBD_LL_DataOutStage+0x7c>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 800f962:	68fb      	ldr	r3, [r7, #12]
 800f964:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 800f968:	2b03      	cmp	r3, #3
 800f96a:	d105      	bne.n	800f978 <USBD_LL_DataOutStage+0x7c>
        {
          pdev->pClass->EP0_RxReady(pdev);
 800f96c:	68fb      	ldr	r3, [r7, #12]
 800f96e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f972:	691b      	ldr	r3, [r3, #16]
 800f974:	68f8      	ldr	r0, [r7, #12]
 800f976:	4798      	blx	r3
        }
        (void)USBD_CtlSendStatus(pdev);
 800f978:	68f8      	ldr	r0, [r7, #12]
 800f97a:	f000 ff8b 	bl	8010894 <USBD_CtlSendStatus>
 800f97e:	e01b      	b.n	800f9b8 <USBD_LL_DataOutStage+0xbc>
        (void)USBD_LL_StallEP(pdev, 0U);
      }
#endif
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 800f980:	68fb      	ldr	r3, [r7, #12]
 800f982:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f986:	699b      	ldr	r3, [r3, #24]
 800f988:	2b00      	cmp	r3, #0
 800f98a:	d013      	beq.n	800f9b4 <USBD_LL_DataOutStage+0xb8>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800f98c:	68fb      	ldr	r3, [r7, #12]
 800f98e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 800f992:	2b03      	cmp	r3, #3
 800f994:	d10e      	bne.n	800f9b4 <USBD_LL_DataOutStage+0xb8>
  {
    ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 800f996:	68fb      	ldr	r3, [r7, #12]
 800f998:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f99c:	699b      	ldr	r3, [r3, #24]
 800f99e:	7afa      	ldrb	r2, [r7, #11]
 800f9a0:	4611      	mov	r1, r2
 800f9a2:	68f8      	ldr	r0, [r7, #12]
 800f9a4:	4798      	blx	r3
 800f9a6:	4603      	mov	r3, r0
 800f9a8:	75fb      	strb	r3, [r7, #23]

    if (ret != USBD_OK)
 800f9aa:	7dfb      	ldrb	r3, [r7, #23]
 800f9ac:	2b00      	cmp	r3, #0
 800f9ae:	d003      	beq.n	800f9b8 <USBD_LL_DataOutStage+0xbc>
    {
      return ret;
 800f9b0:	7dfb      	ldrb	r3, [r7, #23]
 800f9b2:	e002      	b.n	800f9ba <USBD_LL_DataOutStage+0xbe>
    }
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800f9b4:	2303      	movs	r3, #3
 800f9b6:	e000      	b.n	800f9ba <USBD_LL_DataOutStage+0xbe>
  }

  return USBD_OK;
 800f9b8:	2300      	movs	r3, #0
}
 800f9ba:	4618      	mov	r0, r3
 800f9bc:	3718      	adds	r7, #24
 800f9be:	46bd      	mov	sp, r7
 800f9c0:	bd80      	pop	{r7, pc}

0800f9c2 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800f9c2:	b580      	push	{r7, lr}
 800f9c4:	b086      	sub	sp, #24
 800f9c6:	af00      	add	r7, sp, #0
 800f9c8:	60f8      	str	r0, [r7, #12]
 800f9ca:	460b      	mov	r3, r1
 800f9cc:	607a      	str	r2, [r7, #4]
 800f9ce:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800f9d0:	7afb      	ldrb	r3, [r7, #11]
 800f9d2:	2b00      	cmp	r3, #0
 800f9d4:	d16a      	bne.n	800faac <USBD_LL_DataInStage+0xea>
  {
    pep = &pdev->ep_in[0];
 800f9d6:	68fb      	ldr	r3, [r7, #12]
 800f9d8:	3314      	adds	r3, #20
 800f9da:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800f9dc:	68fb      	ldr	r3, [r7, #12]
 800f9de:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800f9e2:	2b02      	cmp	r3, #2
 800f9e4:	d155      	bne.n	800fa92 <USBD_LL_DataInStage+0xd0>
    {
      if (pep->rem_length > pep->maxpacket)
 800f9e6:	693b      	ldr	r3, [r7, #16]
 800f9e8:	689a      	ldr	r2, [r3, #8]
 800f9ea:	693b      	ldr	r3, [r7, #16]
 800f9ec:	68db      	ldr	r3, [r3, #12]
 800f9ee:	429a      	cmp	r2, r3
 800f9f0:	d914      	bls.n	800fa1c <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800f9f2:	693b      	ldr	r3, [r7, #16]
 800f9f4:	689a      	ldr	r2, [r3, #8]
 800f9f6:	693b      	ldr	r3, [r7, #16]
 800f9f8:	68db      	ldr	r3, [r3, #12]
 800f9fa:	1ad2      	subs	r2, r2, r3
 800f9fc:	693b      	ldr	r3, [r7, #16]
 800f9fe:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800fa00:	693b      	ldr	r3, [r7, #16]
 800fa02:	689b      	ldr	r3, [r3, #8]
 800fa04:	461a      	mov	r2, r3
 800fa06:	6879      	ldr	r1, [r7, #4]
 800fa08:	68f8      	ldr	r0, [r7, #12]
 800fa0a:	f000 ff21 	bl	8010850 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
       (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800fa0e:	2300      	movs	r3, #0
 800fa10:	2200      	movs	r2, #0
 800fa12:	2100      	movs	r1, #0
 800fa14:	68f8      	ldr	r0, [r7, #12]
 800fa16:	f001 fc20 	bl	801125a <USBD_LL_PrepareReceive>
 800fa1a:	e03a      	b.n	800fa92 <USBD_LL_DataInStage+0xd0>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800fa1c:	693b      	ldr	r3, [r7, #16]
 800fa1e:	68da      	ldr	r2, [r3, #12]
 800fa20:	693b      	ldr	r3, [r7, #16]
 800fa22:	689b      	ldr	r3, [r3, #8]
 800fa24:	429a      	cmp	r2, r3
 800fa26:	d11c      	bne.n	800fa62 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800fa28:	693b      	ldr	r3, [r7, #16]
 800fa2a:	685a      	ldr	r2, [r3, #4]
 800fa2c:	693b      	ldr	r3, [r7, #16]
 800fa2e:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800fa30:	429a      	cmp	r2, r3
 800fa32:	d316      	bcc.n	800fa62 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800fa34:	693b      	ldr	r3, [r7, #16]
 800fa36:	685a      	ldr	r2, [r3, #4]
 800fa38:	68fb      	ldr	r3, [r7, #12]
 800fa3a:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800fa3e:	429a      	cmp	r2, r3
 800fa40:	d20f      	bcs.n	800fa62 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800fa42:	2200      	movs	r2, #0
 800fa44:	2100      	movs	r1, #0
 800fa46:	68f8      	ldr	r0, [r7, #12]
 800fa48:	f000 ff02 	bl	8010850 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800fa4c:	68fb      	ldr	r3, [r7, #12]
 800fa4e:	2200      	movs	r2, #0
 800fa50:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800fa54:	2300      	movs	r3, #0
 800fa56:	2200      	movs	r2, #0
 800fa58:	2100      	movs	r1, #0
 800fa5a:	68f8      	ldr	r0, [r7, #12]
 800fa5c:	f001 fbfd 	bl	801125a <USBD_LL_PrepareReceive>
 800fa60:	e017      	b.n	800fa92 <USBD_LL_DataInStage+0xd0>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 800fa62:	68fb      	ldr	r3, [r7, #12]
 800fa64:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800fa68:	68db      	ldr	r3, [r3, #12]
 800fa6a:	2b00      	cmp	r3, #0
 800fa6c:	d00a      	beq.n	800fa84 <USBD_LL_DataInStage+0xc2>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 800fa6e:	68fb      	ldr	r3, [r7, #12]
 800fa70:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 800fa74:	2b03      	cmp	r3, #3
 800fa76:	d105      	bne.n	800fa84 <USBD_LL_DataInStage+0xc2>
          {
            pdev->pClass->EP0_TxSent(pdev);
 800fa78:	68fb      	ldr	r3, [r7, #12]
 800fa7a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800fa7e:	68db      	ldr	r3, [r3, #12]
 800fa80:	68f8      	ldr	r0, [r7, #12]
 800fa82:	4798      	blx	r3
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800fa84:	2180      	movs	r1, #128	; 0x80
 800fa86:	68f8      	ldr	r0, [r7, #12]
 800fa88:	f001 fb3d 	bl	8011106 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800fa8c:	68f8      	ldr	r0, [r7, #12]
 800fa8e:	f000 ff14 	bl	80108ba <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 800fa92:	68fb      	ldr	r3, [r7, #12]
 800fa94:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800fa98:	2b01      	cmp	r3, #1
 800fa9a:	d123      	bne.n	800fae4 <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 800fa9c:	68f8      	ldr	r0, [r7, #12]
 800fa9e:	f7ff fe9b 	bl	800f7d8 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800faa2:	68fb      	ldr	r3, [r7, #12]
 800faa4:	2200      	movs	r2, #0
 800faa6:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 800faaa:	e01b      	b.n	800fae4 <USBD_LL_DataInStage+0x122>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 800faac:	68fb      	ldr	r3, [r7, #12]
 800faae:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800fab2:	695b      	ldr	r3, [r3, #20]
 800fab4:	2b00      	cmp	r3, #0
 800fab6:	d013      	beq.n	800fae0 <USBD_LL_DataInStage+0x11e>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800fab8:	68fb      	ldr	r3, [r7, #12]
 800faba:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 800fabe:	2b03      	cmp	r3, #3
 800fac0:	d10e      	bne.n	800fae0 <USBD_LL_DataInStage+0x11e>
  {
    ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 800fac2:	68fb      	ldr	r3, [r7, #12]
 800fac4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800fac8:	695b      	ldr	r3, [r3, #20]
 800faca:	7afa      	ldrb	r2, [r7, #11]
 800facc:	4611      	mov	r1, r2
 800face:	68f8      	ldr	r0, [r7, #12]
 800fad0:	4798      	blx	r3
 800fad2:	4603      	mov	r3, r0
 800fad4:	75fb      	strb	r3, [r7, #23]

    if (ret != USBD_OK)
 800fad6:	7dfb      	ldrb	r3, [r7, #23]
 800fad8:	2b00      	cmp	r3, #0
 800fada:	d003      	beq.n	800fae4 <USBD_LL_DataInStage+0x122>
    {
      return ret;
 800fadc:	7dfb      	ldrb	r3, [r7, #23]
 800fade:	e002      	b.n	800fae6 <USBD_LL_DataInStage+0x124>
    }
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800fae0:	2303      	movs	r3, #3
 800fae2:	e000      	b.n	800fae6 <USBD_LL_DataInStage+0x124>
  }

  return USBD_OK;
 800fae4:	2300      	movs	r3, #0
}
 800fae6:	4618      	mov	r0, r3
 800fae8:	3718      	adds	r7, #24
 800faea:	46bd      	mov	sp, r7
 800faec:	bd80      	pop	{r7, pc}

0800faee <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800faee:	b580      	push	{r7, lr}
 800faf0:	b082      	sub	sp, #8
 800faf2:	af00      	add	r7, sp, #0
 800faf4:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800faf6:	687b      	ldr	r3, [r7, #4]
 800faf8:	2201      	movs	r2, #1
 800fafa:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800fafe:	687b      	ldr	r3, [r7, #4]
 800fb00:	2200      	movs	r2, #0
 800fb02:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800fb06:	687b      	ldr	r3, [r7, #4]
 800fb08:	2200      	movs	r2, #0
 800fb0a:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800fb0c:	687b      	ldr	r3, [r7, #4]
 800fb0e:	2200      	movs	r2, #0
 800fb10:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData != NULL)
 800fb14:	687b      	ldr	r3, [r7, #4]
 800fb16:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800fb1a:	2b00      	cmp	r3, #0
 800fb1c:	d009      	beq.n	800fb32 <USBD_LL_Reset+0x44>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800fb1e:	687b      	ldr	r3, [r7, #4]
 800fb20:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800fb24:	685b      	ldr	r3, [r3, #4]
 800fb26:	687a      	ldr	r2, [r7, #4]
 800fb28:	6852      	ldr	r2, [r2, #4]
 800fb2a:	b2d2      	uxtb	r2, r2
 800fb2c:	4611      	mov	r1, r2
 800fb2e:	6878      	ldr	r0, [r7, #4]
 800fb30:	4798      	blx	r3
  }

    /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800fb32:	2340      	movs	r3, #64	; 0x40
 800fb34:	2200      	movs	r2, #0
 800fb36:	2100      	movs	r1, #0
 800fb38:	6878      	ldr	r0, [r7, #4]
 800fb3a:	f001 fa80 	bl	801103e <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800fb3e:	687b      	ldr	r3, [r7, #4]
 800fb40:	2201      	movs	r2, #1
 800fb42:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800fb46:	687b      	ldr	r3, [r7, #4]
 800fb48:	2240      	movs	r2, #64	; 0x40
 800fb4a:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800fb4e:	2340      	movs	r3, #64	; 0x40
 800fb50:	2200      	movs	r2, #0
 800fb52:	2180      	movs	r1, #128	; 0x80
 800fb54:	6878      	ldr	r0, [r7, #4]
 800fb56:	f001 fa72 	bl	801103e <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800fb5a:	687b      	ldr	r3, [r7, #4]
 800fb5c:	2201      	movs	r2, #1
 800fb5e:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800fb60:	687b      	ldr	r3, [r7, #4]
 800fb62:	2240      	movs	r2, #64	; 0x40
 800fb64:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 800fb66:	2300      	movs	r3, #0
}
 800fb68:	4618      	mov	r0, r3
 800fb6a:	3708      	adds	r7, #8
 800fb6c:	46bd      	mov	sp, r7
 800fb6e:	bd80      	pop	{r7, pc}

0800fb70 <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800fb70:	b480      	push	{r7}
 800fb72:	b083      	sub	sp, #12
 800fb74:	af00      	add	r7, sp, #0
 800fb76:	6078      	str	r0, [r7, #4]
 800fb78:	460b      	mov	r3, r1
 800fb7a:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800fb7c:	687b      	ldr	r3, [r7, #4]
 800fb7e:	78fa      	ldrb	r2, [r7, #3]
 800fb80:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800fb82:	2300      	movs	r3, #0
}
 800fb84:	4618      	mov	r0, r3
 800fb86:	370c      	adds	r7, #12
 800fb88:	46bd      	mov	sp, r7
 800fb8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb8e:	4770      	bx	lr

0800fb90 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800fb90:	b480      	push	{r7}
 800fb92:	b083      	sub	sp, #12
 800fb94:	af00      	add	r7, sp, #0
 800fb96:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 800fb98:	687b      	ldr	r3, [r7, #4]
 800fb9a:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 800fb9e:	687b      	ldr	r3, [r7, #4]
 800fba0:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 800fba4:	687b      	ldr	r3, [r7, #4]
 800fba6:	2204      	movs	r2, #4
 800fba8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800fbac:	2300      	movs	r3, #0
}
 800fbae:	4618      	mov	r0, r3
 800fbb0:	370c      	adds	r7, #12
 800fbb2:	46bd      	mov	sp, r7
 800fbb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fbb8:	4770      	bx	lr

0800fbba <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800fbba:	b480      	push	{r7}
 800fbbc:	b083      	sub	sp, #12
 800fbbe:	af00      	add	r7, sp, #0
 800fbc0:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800fbc2:	687b      	ldr	r3, [r7, #4]
 800fbc4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800fbc8:	2b04      	cmp	r3, #4
 800fbca:	d105      	bne.n	800fbd8 <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 800fbcc:	687b      	ldr	r3, [r7, #4]
 800fbce:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 800fbd2:	687b      	ldr	r3, [r7, #4]
 800fbd4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800fbd8:	2300      	movs	r3, #0
}
 800fbda:	4618      	mov	r0, r3
 800fbdc:	370c      	adds	r7, #12
 800fbde:	46bd      	mov	sp, r7
 800fbe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fbe4:	4770      	bx	lr

0800fbe6 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800fbe6:	b580      	push	{r7, lr}
 800fbe8:	b082      	sub	sp, #8
 800fbea:	af00      	add	r7, sp, #0
 800fbec:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800fbee:	687b      	ldr	r3, [r7, #4]
 800fbf0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800fbf4:	2b03      	cmp	r3, #3
 800fbf6:	d10b      	bne.n	800fc10 <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 800fbf8:	687b      	ldr	r3, [r7, #4]
 800fbfa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800fbfe:	69db      	ldr	r3, [r3, #28]
 800fc00:	2b00      	cmp	r3, #0
 800fc02:	d005      	beq.n	800fc10 <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 800fc04:	687b      	ldr	r3, [r7, #4]
 800fc06:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800fc0a:	69db      	ldr	r3, [r3, #28]
 800fc0c:	6878      	ldr	r0, [r7, #4]
 800fc0e:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800fc10:	2300      	movs	r3, #0
}
 800fc12:	4618      	mov	r0, r3
 800fc14:	3708      	adds	r7, #8
 800fc16:	46bd      	mov	sp, r7
 800fc18:	bd80      	pop	{r7, pc}

0800fc1a <USBD_LL_IsoINIncomplete>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800fc1a:	b480      	push	{r7}
 800fc1c:	b083      	sub	sp, #12
 800fc1e:	af00      	add	r7, sp, #0
 800fc20:	6078      	str	r0, [r7, #4]
 800fc22:	460b      	mov	r3, r1
 800fc24:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 800fc26:	2300      	movs	r3, #0
}
 800fc28:	4618      	mov	r0, r3
 800fc2a:	370c      	adds	r7, #12
 800fc2c:	46bd      	mov	sp, r7
 800fc2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc32:	4770      	bx	lr

0800fc34 <USBD_LL_IsoOUTIncomplete>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800fc34:	b480      	push	{r7}
 800fc36:	b083      	sub	sp, #12
 800fc38:	af00      	add	r7, sp, #0
 800fc3a:	6078      	str	r0, [r7, #4]
 800fc3c:	460b      	mov	r3, r1
 800fc3e:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 800fc40:	2300      	movs	r3, #0
}
 800fc42:	4618      	mov	r0, r3
 800fc44:	370c      	adds	r7, #12
 800fc46:	46bd      	mov	sp, r7
 800fc48:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc4c:	4770      	bx	lr

0800fc4e <USBD_LL_DevConnected>:
*         Handle device connection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800fc4e:	b480      	push	{r7}
 800fc50:	b083      	sub	sp, #12
 800fc52:	af00      	add	r7, sp, #0
 800fc54:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800fc56:	2300      	movs	r3, #0
}
 800fc58:	4618      	mov	r0, r3
 800fc5a:	370c      	adds	r7, #12
 800fc5c:	46bd      	mov	sp, r7
 800fc5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc62:	4770      	bx	lr

0800fc64 <USBD_LL_DevDisconnected>:
*         Handle device disconnection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800fc64:	b580      	push	{r7, lr}
 800fc66:	b082      	sub	sp, #8
 800fc68:	af00      	add	r7, sp, #0
 800fc6a:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800fc6c:	687b      	ldr	r3, [r7, #4]
 800fc6e:	2201      	movs	r2, #1
 800fc70:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  if (pdev->pClass != NULL)
 800fc74:	687b      	ldr	r3, [r7, #4]
 800fc76:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800fc7a:	2b00      	cmp	r3, #0
 800fc7c:	d009      	beq.n	800fc92 <USBD_LL_DevDisconnected+0x2e>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800fc7e:	687b      	ldr	r3, [r7, #4]
 800fc80:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800fc84:	685b      	ldr	r3, [r3, #4]
 800fc86:	687a      	ldr	r2, [r7, #4]
 800fc88:	6852      	ldr	r2, [r2, #4]
 800fc8a:	b2d2      	uxtb	r2, r2
 800fc8c:	4611      	mov	r1, r2
 800fc8e:	6878      	ldr	r0, [r7, #4]
 800fc90:	4798      	blx	r3
  }

  return USBD_OK;
 800fc92:	2300      	movs	r3, #0
}
 800fc94:	4618      	mov	r0, r3
 800fc96:	3708      	adds	r7, #8
 800fc98:	46bd      	mov	sp, r7
 800fc9a:	bd80      	pop	{r7, pc}

0800fc9c <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800fc9c:	b480      	push	{r7}
 800fc9e:	b087      	sub	sp, #28
 800fca0:	af00      	add	r7, sp, #0
 800fca2:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 800fca4:	687b      	ldr	r3, [r7, #4]
 800fca6:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800fca8:	697b      	ldr	r3, [r7, #20]
 800fcaa:	781b      	ldrb	r3, [r3, #0]
 800fcac:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800fcae:	697b      	ldr	r3, [r7, #20]
 800fcb0:	3301      	adds	r3, #1
 800fcb2:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800fcb4:	697b      	ldr	r3, [r7, #20]
 800fcb6:	781b      	ldrb	r3, [r3, #0]
 800fcb8:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800fcba:	8a3b      	ldrh	r3, [r7, #16]
 800fcbc:	021b      	lsls	r3, r3, #8
 800fcbe:	b21a      	sxth	r2, r3
 800fcc0:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800fcc4:	4313      	orrs	r3, r2
 800fcc6:	b21b      	sxth	r3, r3
 800fcc8:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800fcca:	89fb      	ldrh	r3, [r7, #14]
}
 800fccc:	4618      	mov	r0, r3
 800fcce:	371c      	adds	r7, #28
 800fcd0:	46bd      	mov	sp, r7
 800fcd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fcd6:	4770      	bx	lr

0800fcd8 <USBD_StdDevReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800fcd8:	b580      	push	{r7, lr}
 800fcda:	b084      	sub	sp, #16
 800fcdc:	af00      	add	r7, sp, #0
 800fcde:	6078      	str	r0, [r7, #4]
 800fce0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800fce2:	2300      	movs	r3, #0
 800fce4:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800fce6:	683b      	ldr	r3, [r7, #0]
 800fce8:	781b      	ldrb	r3, [r3, #0]
 800fcea:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800fcee:	2b20      	cmp	r3, #32
 800fcf0:	d004      	beq.n	800fcfc <USBD_StdDevReq+0x24>
 800fcf2:	2b40      	cmp	r3, #64	; 0x40
 800fcf4:	d002      	beq.n	800fcfc <USBD_StdDevReq+0x24>
 800fcf6:	2b00      	cmp	r3, #0
 800fcf8:	d00a      	beq.n	800fd10 <USBD_StdDevReq+0x38>
 800fcfa:	e050      	b.n	800fd9e <USBD_StdDevReq+0xc6>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800fcfc:	687b      	ldr	r3, [r7, #4]
 800fcfe:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800fd02:	689b      	ldr	r3, [r3, #8]
 800fd04:	6839      	ldr	r1, [r7, #0]
 800fd06:	6878      	ldr	r0, [r7, #4]
 800fd08:	4798      	blx	r3
 800fd0a:	4603      	mov	r3, r0
 800fd0c:	73fb      	strb	r3, [r7, #15]
    break;
 800fd0e:	e04b      	b.n	800fda8 <USBD_StdDevReq+0xd0>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 800fd10:	683b      	ldr	r3, [r7, #0]
 800fd12:	785b      	ldrb	r3, [r3, #1]
 800fd14:	2b09      	cmp	r3, #9
 800fd16:	d83c      	bhi.n	800fd92 <USBD_StdDevReq+0xba>
 800fd18:	a201      	add	r2, pc, #4	; (adr r2, 800fd20 <USBD_StdDevReq+0x48>)
 800fd1a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fd1e:	bf00      	nop
 800fd20:	0800fd75 	.word	0x0800fd75
 800fd24:	0800fd89 	.word	0x0800fd89
 800fd28:	0800fd93 	.word	0x0800fd93
 800fd2c:	0800fd7f 	.word	0x0800fd7f
 800fd30:	0800fd93 	.word	0x0800fd93
 800fd34:	0800fd53 	.word	0x0800fd53
 800fd38:	0800fd49 	.word	0x0800fd49
 800fd3c:	0800fd93 	.word	0x0800fd93
 800fd40:	0800fd6b 	.word	0x0800fd6b
 800fd44:	0800fd5d 	.word	0x0800fd5d
    {
    case USB_REQ_GET_DESCRIPTOR:
      USBD_GetDescriptor(pdev, req);
 800fd48:	6839      	ldr	r1, [r7, #0]
 800fd4a:	6878      	ldr	r0, [r7, #4]
 800fd4c:	f000 f9ce 	bl	80100ec <USBD_GetDescriptor>
      break;
 800fd50:	e024      	b.n	800fd9c <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_ADDRESS:
      USBD_SetAddress(pdev, req);
 800fd52:	6839      	ldr	r1, [r7, #0]
 800fd54:	6878      	ldr	r0, [r7, #4]
 800fd56:	f000 fb33 	bl	80103c0 <USBD_SetAddress>
      break;
 800fd5a:	e01f      	b.n	800fd9c <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_CONFIGURATION:
      ret = USBD_SetConfig(pdev, req);
 800fd5c:	6839      	ldr	r1, [r7, #0]
 800fd5e:	6878      	ldr	r0, [r7, #4]
 800fd60:	f000 fb70 	bl	8010444 <USBD_SetConfig>
 800fd64:	4603      	mov	r3, r0
 800fd66:	73fb      	strb	r3, [r7, #15]
      break;
 800fd68:	e018      	b.n	800fd9c <USBD_StdDevReq+0xc4>

    case USB_REQ_GET_CONFIGURATION:
      USBD_GetConfig(pdev, req);
 800fd6a:	6839      	ldr	r1, [r7, #0]
 800fd6c:	6878      	ldr	r0, [r7, #4]
 800fd6e:	f000 fc0d 	bl	801058c <USBD_GetConfig>
      break;
 800fd72:	e013      	b.n	800fd9c <USBD_StdDevReq+0xc4>

    case USB_REQ_GET_STATUS:
      USBD_GetStatus(pdev, req);
 800fd74:	6839      	ldr	r1, [r7, #0]
 800fd76:	6878      	ldr	r0, [r7, #4]
 800fd78:	f000 fc3c 	bl	80105f4 <USBD_GetStatus>
      break;
 800fd7c:	e00e      	b.n	800fd9c <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_FEATURE:
      USBD_SetFeature(pdev, req);
 800fd7e:	6839      	ldr	r1, [r7, #0]
 800fd80:	6878      	ldr	r0, [r7, #4]
 800fd82:	f000 fc6a 	bl	801065a <USBD_SetFeature>
      break;
 800fd86:	e009      	b.n	800fd9c <USBD_StdDevReq+0xc4>

    case USB_REQ_CLEAR_FEATURE:
      USBD_ClrFeature(pdev, req);
 800fd88:	6839      	ldr	r1, [r7, #0]
 800fd8a:	6878      	ldr	r0, [r7, #4]
 800fd8c:	f000 fc79 	bl	8010682 <USBD_ClrFeature>
      break;
 800fd90:	e004      	b.n	800fd9c <USBD_StdDevReq+0xc4>

    default:
      USBD_CtlError(pdev, req);
 800fd92:	6839      	ldr	r1, [r7, #0]
 800fd94:	6878      	ldr	r0, [r7, #4]
 800fd96:	f000 fccf 	bl	8010738 <USBD_CtlError>
      break;
 800fd9a:	bf00      	nop
    }
    break;
 800fd9c:	e004      	b.n	800fda8 <USBD_StdDevReq+0xd0>

  default:
    USBD_CtlError(pdev, req);
 800fd9e:	6839      	ldr	r1, [r7, #0]
 800fda0:	6878      	ldr	r0, [r7, #4]
 800fda2:	f000 fcc9 	bl	8010738 <USBD_CtlError>
    break;
 800fda6:	bf00      	nop
  }

  return ret;
 800fda8:	7bfb      	ldrb	r3, [r7, #15]
}
 800fdaa:	4618      	mov	r0, r3
 800fdac:	3710      	adds	r7, #16
 800fdae:	46bd      	mov	sp, r7
 800fdb0:	bd80      	pop	{r7, pc}
 800fdb2:	bf00      	nop

0800fdb4 <USBD_StdItfReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800fdb4:	b580      	push	{r7, lr}
 800fdb6:	b084      	sub	sp, #16
 800fdb8:	af00      	add	r7, sp, #0
 800fdba:	6078      	str	r0, [r7, #4]
 800fdbc:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800fdbe:	2300      	movs	r3, #0
 800fdc0:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800fdc2:	683b      	ldr	r3, [r7, #0]
 800fdc4:	781b      	ldrb	r3, [r3, #0]
 800fdc6:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800fdca:	2b20      	cmp	r3, #32
 800fdcc:	d003      	beq.n	800fdd6 <USBD_StdItfReq+0x22>
 800fdce:	2b40      	cmp	r3, #64	; 0x40
 800fdd0:	d001      	beq.n	800fdd6 <USBD_StdItfReq+0x22>
 800fdd2:	2b00      	cmp	r3, #0
 800fdd4:	d12a      	bne.n	800fe2c <USBD_StdItfReq+0x78>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
  case USB_REQ_TYPE_STANDARD:
    switch (pdev->dev_state)
 800fdd6:	687b      	ldr	r3, [r7, #4]
 800fdd8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800fddc:	3b01      	subs	r3, #1
 800fdde:	2b02      	cmp	r3, #2
 800fde0:	d81d      	bhi.n	800fe1e <USBD_StdItfReq+0x6a>
    {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:

      if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800fde2:	683b      	ldr	r3, [r7, #0]
 800fde4:	889b      	ldrh	r3, [r3, #4]
 800fde6:	b2db      	uxtb	r3, r3
 800fde8:	2b01      	cmp	r3, #1
 800fdea:	d813      	bhi.n	800fe14 <USBD_StdItfReq+0x60>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800fdec:	687b      	ldr	r3, [r7, #4]
 800fdee:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800fdf2:	689b      	ldr	r3, [r3, #8]
 800fdf4:	6839      	ldr	r1, [r7, #0]
 800fdf6:	6878      	ldr	r0, [r7, #4]
 800fdf8:	4798      	blx	r3
 800fdfa:	4603      	mov	r3, r0
 800fdfc:	73fb      	strb	r3, [r7, #15]

        if ((req->wLength == 0U) && (ret == USBD_OK))
 800fdfe:	683b      	ldr	r3, [r7, #0]
 800fe00:	88db      	ldrh	r3, [r3, #6]
 800fe02:	2b00      	cmp	r3, #0
 800fe04:	d110      	bne.n	800fe28 <USBD_StdItfReq+0x74>
 800fe06:	7bfb      	ldrb	r3, [r7, #15]
 800fe08:	2b00      	cmp	r3, #0
 800fe0a:	d10d      	bne.n	800fe28 <USBD_StdItfReq+0x74>
        {
          (void)USBD_CtlSendStatus(pdev);
 800fe0c:	6878      	ldr	r0, [r7, #4]
 800fe0e:	f000 fd41 	bl	8010894 <USBD_CtlSendStatus>
      }
      else
      {
        USBD_CtlError(pdev, req);
      }
      break;
 800fe12:	e009      	b.n	800fe28 <USBD_StdItfReq+0x74>
        USBD_CtlError(pdev, req);
 800fe14:	6839      	ldr	r1, [r7, #0]
 800fe16:	6878      	ldr	r0, [r7, #4]
 800fe18:	f000 fc8e 	bl	8010738 <USBD_CtlError>
      break;
 800fe1c:	e004      	b.n	800fe28 <USBD_StdItfReq+0x74>

    default:
      USBD_CtlError(pdev, req);
 800fe1e:	6839      	ldr	r1, [r7, #0]
 800fe20:	6878      	ldr	r0, [r7, #4]
 800fe22:	f000 fc89 	bl	8010738 <USBD_CtlError>
      break;
 800fe26:	e000      	b.n	800fe2a <USBD_StdItfReq+0x76>
      break;
 800fe28:	bf00      	nop
    }
    break;
 800fe2a:	e004      	b.n	800fe36 <USBD_StdItfReq+0x82>

  default:
    USBD_CtlError(pdev, req);
 800fe2c:	6839      	ldr	r1, [r7, #0]
 800fe2e:	6878      	ldr	r0, [r7, #4]
 800fe30:	f000 fc82 	bl	8010738 <USBD_CtlError>
    break;
 800fe34:	bf00      	nop
  }

  return ret;
 800fe36:	7bfb      	ldrb	r3, [r7, #15]
}
 800fe38:	4618      	mov	r0, r3
 800fe3a:	3710      	adds	r7, #16
 800fe3c:	46bd      	mov	sp, r7
 800fe3e:	bd80      	pop	{r7, pc}

0800fe40 <USBD_StdEPReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800fe40:	b580      	push	{r7, lr}
 800fe42:	b084      	sub	sp, #16
 800fe44:	af00      	add	r7, sp, #0
 800fe46:	6078      	str	r0, [r7, #4]
 800fe48:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 800fe4a:	2300      	movs	r3, #0
 800fe4c:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 800fe4e:	683b      	ldr	r3, [r7, #0]
 800fe50:	889b      	ldrh	r3, [r3, #4]
 800fe52:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800fe54:	683b      	ldr	r3, [r7, #0]
 800fe56:	781b      	ldrb	r3, [r3, #0]
 800fe58:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800fe5c:	2b20      	cmp	r3, #32
 800fe5e:	d004      	beq.n	800fe6a <USBD_StdEPReq+0x2a>
 800fe60:	2b40      	cmp	r3, #64	; 0x40
 800fe62:	d002      	beq.n	800fe6a <USBD_StdEPReq+0x2a>
 800fe64:	2b00      	cmp	r3, #0
 800fe66:	d00a      	beq.n	800fe7e <USBD_StdEPReq+0x3e>
 800fe68:	e135      	b.n	80100d6 <USBD_StdEPReq+0x296>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800fe6a:	687b      	ldr	r3, [r7, #4]
 800fe6c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800fe70:	689b      	ldr	r3, [r3, #8]
 800fe72:	6839      	ldr	r1, [r7, #0]
 800fe74:	6878      	ldr	r0, [r7, #4]
 800fe76:	4798      	blx	r3
 800fe78:	4603      	mov	r3, r0
 800fe7a:	73fb      	strb	r3, [r7, #15]
    break;
 800fe7c:	e130      	b.n	80100e0 <USBD_StdEPReq+0x2a0>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 800fe7e:	683b      	ldr	r3, [r7, #0]
 800fe80:	785b      	ldrb	r3, [r3, #1]
 800fe82:	2b01      	cmp	r3, #1
 800fe84:	d03e      	beq.n	800ff04 <USBD_StdEPReq+0xc4>
 800fe86:	2b03      	cmp	r3, #3
 800fe88:	d002      	beq.n	800fe90 <USBD_StdEPReq+0x50>
 800fe8a:	2b00      	cmp	r3, #0
 800fe8c:	d077      	beq.n	800ff7e <USBD_StdEPReq+0x13e>
 800fe8e:	e11c      	b.n	80100ca <USBD_StdEPReq+0x28a>
    {
    case USB_REQ_SET_FEATURE:
      switch (pdev->dev_state)
 800fe90:	687b      	ldr	r3, [r7, #4]
 800fe92:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800fe96:	2b02      	cmp	r3, #2
 800fe98:	d002      	beq.n	800fea0 <USBD_StdEPReq+0x60>
 800fe9a:	2b03      	cmp	r3, #3
 800fe9c:	d015      	beq.n	800feca <USBD_StdEPReq+0x8a>
 800fe9e:	e02b      	b.n	800fef8 <USBD_StdEPReq+0xb8>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800fea0:	7bbb      	ldrb	r3, [r7, #14]
 800fea2:	2b00      	cmp	r3, #0
 800fea4:	d00c      	beq.n	800fec0 <USBD_StdEPReq+0x80>
 800fea6:	7bbb      	ldrb	r3, [r7, #14]
 800fea8:	2b80      	cmp	r3, #128	; 0x80
 800feaa:	d009      	beq.n	800fec0 <USBD_StdEPReq+0x80>
        {
          (void)USBD_LL_StallEP(pdev, ep_addr);
 800feac:	7bbb      	ldrb	r3, [r7, #14]
 800feae:	4619      	mov	r1, r3
 800feb0:	6878      	ldr	r0, [r7, #4]
 800feb2:	f001 f928 	bl	8011106 <USBD_LL_StallEP>
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800feb6:	2180      	movs	r1, #128	; 0x80
 800feb8:	6878      	ldr	r0, [r7, #4]
 800feba:	f001 f924 	bl	8011106 <USBD_LL_StallEP>
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 800febe:	e020      	b.n	800ff02 <USBD_StdEPReq+0xc2>
          USBD_CtlError(pdev, req);
 800fec0:	6839      	ldr	r1, [r7, #0]
 800fec2:	6878      	ldr	r0, [r7, #4]
 800fec4:	f000 fc38 	bl	8010738 <USBD_CtlError>
        break;
 800fec8:	e01b      	b.n	800ff02 <USBD_StdEPReq+0xc2>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 800feca:	683b      	ldr	r3, [r7, #0]
 800fecc:	885b      	ldrh	r3, [r3, #2]
 800fece:	2b00      	cmp	r3, #0
 800fed0:	d10e      	bne.n	800fef0 <USBD_StdEPReq+0xb0>
        {
          if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800fed2:	7bbb      	ldrb	r3, [r7, #14]
 800fed4:	2b00      	cmp	r3, #0
 800fed6:	d00b      	beq.n	800fef0 <USBD_StdEPReq+0xb0>
 800fed8:	7bbb      	ldrb	r3, [r7, #14]
 800feda:	2b80      	cmp	r3, #128	; 0x80
 800fedc:	d008      	beq.n	800fef0 <USBD_StdEPReq+0xb0>
 800fede:	683b      	ldr	r3, [r7, #0]
 800fee0:	88db      	ldrh	r3, [r3, #6]
 800fee2:	2b00      	cmp	r3, #0
 800fee4:	d104      	bne.n	800fef0 <USBD_StdEPReq+0xb0>
          {
            (void)USBD_LL_StallEP(pdev, ep_addr);
 800fee6:	7bbb      	ldrb	r3, [r7, #14]
 800fee8:	4619      	mov	r1, r3
 800feea:	6878      	ldr	r0, [r7, #4]
 800feec:	f001 f90b 	bl	8011106 <USBD_LL_StallEP>
          }
        }
        (void)USBD_CtlSendStatus(pdev);
 800fef0:	6878      	ldr	r0, [r7, #4]
 800fef2:	f000 fccf 	bl	8010894 <USBD_CtlSendStatus>

        break;
 800fef6:	e004      	b.n	800ff02 <USBD_StdEPReq+0xc2>

      default:
        USBD_CtlError(pdev, req);
 800fef8:	6839      	ldr	r1, [r7, #0]
 800fefa:	6878      	ldr	r0, [r7, #4]
 800fefc:	f000 fc1c 	bl	8010738 <USBD_CtlError>
        break;
 800ff00:	bf00      	nop
      }
      break;
 800ff02:	e0e7      	b.n	80100d4 <USBD_StdEPReq+0x294>

    case USB_REQ_CLEAR_FEATURE:

      switch (pdev->dev_state)
 800ff04:	687b      	ldr	r3, [r7, #4]
 800ff06:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ff0a:	2b02      	cmp	r3, #2
 800ff0c:	d002      	beq.n	800ff14 <USBD_StdEPReq+0xd4>
 800ff0e:	2b03      	cmp	r3, #3
 800ff10:	d015      	beq.n	800ff3e <USBD_StdEPReq+0xfe>
 800ff12:	e02d      	b.n	800ff70 <USBD_StdEPReq+0x130>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800ff14:	7bbb      	ldrb	r3, [r7, #14]
 800ff16:	2b00      	cmp	r3, #0
 800ff18:	d00c      	beq.n	800ff34 <USBD_StdEPReq+0xf4>
 800ff1a:	7bbb      	ldrb	r3, [r7, #14]
 800ff1c:	2b80      	cmp	r3, #128	; 0x80
 800ff1e:	d009      	beq.n	800ff34 <USBD_StdEPReq+0xf4>
        {
          (void)USBD_LL_StallEP(pdev, ep_addr);
 800ff20:	7bbb      	ldrb	r3, [r7, #14]
 800ff22:	4619      	mov	r1, r3
 800ff24:	6878      	ldr	r0, [r7, #4]
 800ff26:	f001 f8ee 	bl	8011106 <USBD_LL_StallEP>
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800ff2a:	2180      	movs	r1, #128	; 0x80
 800ff2c:	6878      	ldr	r0, [r7, #4]
 800ff2e:	f001 f8ea 	bl	8011106 <USBD_LL_StallEP>
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 800ff32:	e023      	b.n	800ff7c <USBD_StdEPReq+0x13c>
          USBD_CtlError(pdev, req);
 800ff34:	6839      	ldr	r1, [r7, #0]
 800ff36:	6878      	ldr	r0, [r7, #4]
 800ff38:	f000 fbfe 	bl	8010738 <USBD_CtlError>
        break;
 800ff3c:	e01e      	b.n	800ff7c <USBD_StdEPReq+0x13c>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 800ff3e:	683b      	ldr	r3, [r7, #0]
 800ff40:	885b      	ldrh	r3, [r3, #2]
 800ff42:	2b00      	cmp	r3, #0
 800ff44:	d119      	bne.n	800ff7a <USBD_StdEPReq+0x13a>
        {
          if ((ep_addr & 0x7FU) != 0x00U)
 800ff46:	7bbb      	ldrb	r3, [r7, #14]
 800ff48:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ff4c:	2b00      	cmp	r3, #0
 800ff4e:	d004      	beq.n	800ff5a <USBD_StdEPReq+0x11a>
          {
            (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800ff50:	7bbb      	ldrb	r3, [r7, #14]
 800ff52:	4619      	mov	r1, r3
 800ff54:	6878      	ldr	r0, [r7, #4]
 800ff56:	f001 f8f5 	bl	8011144 <USBD_LL_ClearStallEP>
          }
          (void)USBD_CtlSendStatus(pdev);
 800ff5a:	6878      	ldr	r0, [r7, #4]
 800ff5c:	f000 fc9a 	bl	8010894 <USBD_CtlSendStatus>
          (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800ff60:	687b      	ldr	r3, [r7, #4]
 800ff62:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ff66:	689b      	ldr	r3, [r3, #8]
 800ff68:	6839      	ldr	r1, [r7, #0]
 800ff6a:	6878      	ldr	r0, [r7, #4]
 800ff6c:	4798      	blx	r3
        }
        break;
 800ff6e:	e004      	b.n	800ff7a <USBD_StdEPReq+0x13a>

      default:
        USBD_CtlError(pdev, req);
 800ff70:	6839      	ldr	r1, [r7, #0]
 800ff72:	6878      	ldr	r0, [r7, #4]
 800ff74:	f000 fbe0 	bl	8010738 <USBD_CtlError>
        break;
 800ff78:	e000      	b.n	800ff7c <USBD_StdEPReq+0x13c>
        break;
 800ff7a:	bf00      	nop
      }
      break;
 800ff7c:	e0aa      	b.n	80100d4 <USBD_StdEPReq+0x294>

    case USB_REQ_GET_STATUS:
      switch (pdev->dev_state)
 800ff7e:	687b      	ldr	r3, [r7, #4]
 800ff80:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ff84:	2b02      	cmp	r3, #2
 800ff86:	d002      	beq.n	800ff8e <USBD_StdEPReq+0x14e>
 800ff88:	2b03      	cmp	r3, #3
 800ff8a:	d032      	beq.n	800fff2 <USBD_StdEPReq+0x1b2>
 800ff8c:	e097      	b.n	80100be <USBD_StdEPReq+0x27e>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800ff8e:	7bbb      	ldrb	r3, [r7, #14]
 800ff90:	2b00      	cmp	r3, #0
 800ff92:	d007      	beq.n	800ffa4 <USBD_StdEPReq+0x164>
 800ff94:	7bbb      	ldrb	r3, [r7, #14]
 800ff96:	2b80      	cmp	r3, #128	; 0x80
 800ff98:	d004      	beq.n	800ffa4 <USBD_StdEPReq+0x164>
        {
          USBD_CtlError(pdev, req);
 800ff9a:	6839      	ldr	r1, [r7, #0]
 800ff9c:	6878      	ldr	r0, [r7, #4]
 800ff9e:	f000 fbcb 	bl	8010738 <USBD_CtlError>
          break;
 800ffa2:	e091      	b.n	80100c8 <USBD_StdEPReq+0x288>
        }
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800ffa4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800ffa8:	2b00      	cmp	r3, #0
 800ffaa:	da0b      	bge.n	800ffc4 <USBD_StdEPReq+0x184>
 800ffac:	7bbb      	ldrb	r3, [r7, #14]
 800ffae:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800ffb2:	4613      	mov	r3, r2
 800ffb4:	009b      	lsls	r3, r3, #2
 800ffb6:	4413      	add	r3, r2
 800ffb8:	009b      	lsls	r3, r3, #2
 800ffba:	3310      	adds	r3, #16
 800ffbc:	687a      	ldr	r2, [r7, #4]
 800ffbe:	4413      	add	r3, r2
 800ffc0:	3304      	adds	r3, #4
 800ffc2:	e00b      	b.n	800ffdc <USBD_StdEPReq+0x19c>
              &pdev->ep_out[ep_addr & 0x7FU];
 800ffc4:	7bbb      	ldrb	r3, [r7, #14]
 800ffc6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800ffca:	4613      	mov	r3, r2
 800ffcc:	009b      	lsls	r3, r3, #2
 800ffce:	4413      	add	r3, r2
 800ffd0:	009b      	lsls	r3, r3, #2
 800ffd2:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800ffd6:	687a      	ldr	r2, [r7, #4]
 800ffd8:	4413      	add	r3, r2
 800ffda:	3304      	adds	r3, #4
 800ffdc:	60bb      	str	r3, [r7, #8]

        pep->status = 0x0000U;
 800ffde:	68bb      	ldr	r3, [r7, #8]
 800ffe0:	2200      	movs	r2, #0
 800ffe2:	601a      	str	r2, [r3, #0]

        (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800ffe4:	68bb      	ldr	r3, [r7, #8]
 800ffe6:	2202      	movs	r2, #2
 800ffe8:	4619      	mov	r1, r3
 800ffea:	6878      	ldr	r0, [r7, #4]
 800ffec:	f000 fc15 	bl	801081a <USBD_CtlSendData>
        break;
 800fff0:	e06a      	b.n	80100c8 <USBD_StdEPReq+0x288>

      case USBD_STATE_CONFIGURED:
        if ((ep_addr & 0x80U) == 0x80U)
 800fff2:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800fff6:	2b00      	cmp	r3, #0
 800fff8:	da11      	bge.n	801001e <USBD_StdEPReq+0x1de>
        {
          if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800fffa:	7bbb      	ldrb	r3, [r7, #14]
 800fffc:	f003 020f 	and.w	r2, r3, #15
 8010000:	6879      	ldr	r1, [r7, #4]
 8010002:	4613      	mov	r3, r2
 8010004:	009b      	lsls	r3, r3, #2
 8010006:	4413      	add	r3, r2
 8010008:	009b      	lsls	r3, r3, #2
 801000a:	440b      	add	r3, r1
 801000c:	3324      	adds	r3, #36	; 0x24
 801000e:	881b      	ldrh	r3, [r3, #0]
 8010010:	2b00      	cmp	r3, #0
 8010012:	d117      	bne.n	8010044 <USBD_StdEPReq+0x204>
          {
            USBD_CtlError(pdev, req);
 8010014:	6839      	ldr	r1, [r7, #0]
 8010016:	6878      	ldr	r0, [r7, #4]
 8010018:	f000 fb8e 	bl	8010738 <USBD_CtlError>
            break;
 801001c:	e054      	b.n	80100c8 <USBD_StdEPReq+0x288>
          }
        }
        else
        {
          if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 801001e:	7bbb      	ldrb	r3, [r7, #14]
 8010020:	f003 020f 	and.w	r2, r3, #15
 8010024:	6879      	ldr	r1, [r7, #4]
 8010026:	4613      	mov	r3, r2
 8010028:	009b      	lsls	r3, r3, #2
 801002a:	4413      	add	r3, r2
 801002c:	009b      	lsls	r3, r3, #2
 801002e:	440b      	add	r3, r1
 8010030:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8010034:	881b      	ldrh	r3, [r3, #0]
 8010036:	2b00      	cmp	r3, #0
 8010038:	d104      	bne.n	8010044 <USBD_StdEPReq+0x204>
          {
            USBD_CtlError(pdev, req);
 801003a:	6839      	ldr	r1, [r7, #0]
 801003c:	6878      	ldr	r0, [r7, #4]
 801003e:	f000 fb7b 	bl	8010738 <USBD_CtlError>
            break;
 8010042:	e041      	b.n	80100c8 <USBD_StdEPReq+0x288>
          }
        }

        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8010044:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8010048:	2b00      	cmp	r3, #0
 801004a:	da0b      	bge.n	8010064 <USBD_StdEPReq+0x224>
 801004c:	7bbb      	ldrb	r3, [r7, #14]
 801004e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8010052:	4613      	mov	r3, r2
 8010054:	009b      	lsls	r3, r3, #2
 8010056:	4413      	add	r3, r2
 8010058:	009b      	lsls	r3, r3, #2
 801005a:	3310      	adds	r3, #16
 801005c:	687a      	ldr	r2, [r7, #4]
 801005e:	4413      	add	r3, r2
 8010060:	3304      	adds	r3, #4
 8010062:	e00b      	b.n	801007c <USBD_StdEPReq+0x23c>
              &pdev->ep_out[ep_addr & 0x7FU];
 8010064:	7bbb      	ldrb	r3, [r7, #14]
 8010066:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 801006a:	4613      	mov	r3, r2
 801006c:	009b      	lsls	r3, r3, #2
 801006e:	4413      	add	r3, r2
 8010070:	009b      	lsls	r3, r3, #2
 8010072:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8010076:	687a      	ldr	r2, [r7, #4]
 8010078:	4413      	add	r3, r2
 801007a:	3304      	adds	r3, #4
 801007c:	60bb      	str	r3, [r7, #8]

          if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 801007e:	7bbb      	ldrb	r3, [r7, #14]
 8010080:	2b00      	cmp	r3, #0
 8010082:	d002      	beq.n	801008a <USBD_StdEPReq+0x24a>
 8010084:	7bbb      	ldrb	r3, [r7, #14]
 8010086:	2b80      	cmp	r3, #128	; 0x80
 8010088:	d103      	bne.n	8010092 <USBD_StdEPReq+0x252>
          {
            pep->status = 0x0000U;
 801008a:	68bb      	ldr	r3, [r7, #8]
 801008c:	2200      	movs	r2, #0
 801008e:	601a      	str	r2, [r3, #0]
 8010090:	e00e      	b.n	80100b0 <USBD_StdEPReq+0x270>
          }
          else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8010092:	7bbb      	ldrb	r3, [r7, #14]
 8010094:	4619      	mov	r1, r3
 8010096:	6878      	ldr	r0, [r7, #4]
 8010098:	f001 f873 	bl	8011182 <USBD_LL_IsStallEP>
 801009c:	4603      	mov	r3, r0
 801009e:	2b00      	cmp	r3, #0
 80100a0:	d003      	beq.n	80100aa <USBD_StdEPReq+0x26a>
          {
            pep->status = 0x0001U;
 80100a2:	68bb      	ldr	r3, [r7, #8]
 80100a4:	2201      	movs	r2, #1
 80100a6:	601a      	str	r2, [r3, #0]
 80100a8:	e002      	b.n	80100b0 <USBD_StdEPReq+0x270>
          }
          else
          {
            pep->status = 0x0000U;
 80100aa:	68bb      	ldr	r3, [r7, #8]
 80100ac:	2200      	movs	r2, #0
 80100ae:	601a      	str	r2, [r3, #0]
          }

          (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80100b0:	68bb      	ldr	r3, [r7, #8]
 80100b2:	2202      	movs	r2, #2
 80100b4:	4619      	mov	r1, r3
 80100b6:	6878      	ldr	r0, [r7, #4]
 80100b8:	f000 fbaf 	bl	801081a <USBD_CtlSendData>
          break;
 80100bc:	e004      	b.n	80100c8 <USBD_StdEPReq+0x288>

      default:
        USBD_CtlError(pdev, req);
 80100be:	6839      	ldr	r1, [r7, #0]
 80100c0:	6878      	ldr	r0, [r7, #4]
 80100c2:	f000 fb39 	bl	8010738 <USBD_CtlError>
        break;
 80100c6:	bf00      	nop
      }
      break;
 80100c8:	e004      	b.n	80100d4 <USBD_StdEPReq+0x294>

    default:
      USBD_CtlError(pdev, req);
 80100ca:	6839      	ldr	r1, [r7, #0]
 80100cc:	6878      	ldr	r0, [r7, #4]
 80100ce:	f000 fb33 	bl	8010738 <USBD_CtlError>
      break;
 80100d2:	bf00      	nop
    }
    break;
 80100d4:	e004      	b.n	80100e0 <USBD_StdEPReq+0x2a0>

  default:
    USBD_CtlError(pdev, req);
 80100d6:	6839      	ldr	r1, [r7, #0]
 80100d8:	6878      	ldr	r0, [r7, #4]
 80100da:	f000 fb2d 	bl	8010738 <USBD_CtlError>
    break;
 80100de:	bf00      	nop
  }

  return ret;
 80100e0:	7bfb      	ldrb	r3, [r7, #15]
}
 80100e2:	4618      	mov	r0, r3
 80100e4:	3710      	adds	r7, #16
 80100e6:	46bd      	mov	sp, r7
 80100e8:	bd80      	pop	{r7, pc}
	...

080100ec <USBD_GetDescriptor>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80100ec:	b580      	push	{r7, lr}
 80100ee:	b084      	sub	sp, #16
 80100f0:	af00      	add	r7, sp, #0
 80100f2:	6078      	str	r0, [r7, #4]
 80100f4:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80100f6:	2300      	movs	r3, #0
 80100f8:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 80100fa:	2300      	movs	r3, #0
 80100fc:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 80100fe:	2300      	movs	r3, #0
 8010100:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8010102:	683b      	ldr	r3, [r7, #0]
 8010104:	885b      	ldrh	r3, [r3, #2]
 8010106:	0a1b      	lsrs	r3, r3, #8
 8010108:	b29b      	uxth	r3, r3
 801010a:	3b01      	subs	r3, #1
 801010c:	2b06      	cmp	r3, #6
 801010e:	f200 8128 	bhi.w	8010362 <USBD_GetDescriptor+0x276>
 8010112:	a201      	add	r2, pc, #4	; (adr r2, 8010118 <USBD_GetDescriptor+0x2c>)
 8010114:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010118:	08010135 	.word	0x08010135
 801011c:	0801014d 	.word	0x0801014d
 8010120:	0801018d 	.word	0x0801018d
 8010124:	08010363 	.word	0x08010363
 8010128:	08010363 	.word	0x08010363
 801012c:	08010303 	.word	0x08010303
 8010130:	0801032f 	.word	0x0801032f
      err++;
    }
    break;
#endif
  case USB_DESC_TYPE_DEVICE:
    pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8010134:	687b      	ldr	r3, [r7, #4]
 8010136:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801013a:	681b      	ldr	r3, [r3, #0]
 801013c:	687a      	ldr	r2, [r7, #4]
 801013e:	7c12      	ldrb	r2, [r2, #16]
 8010140:	f107 0108 	add.w	r1, r7, #8
 8010144:	4610      	mov	r0, r2
 8010146:	4798      	blx	r3
 8010148:	60f8      	str	r0, [r7, #12]
    break;
 801014a:	e112      	b.n	8010372 <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_CONFIGURATION:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 801014c:	687b      	ldr	r3, [r7, #4]
 801014e:	7c1b      	ldrb	r3, [r3, #16]
 8010150:	2b00      	cmp	r3, #0
 8010152:	d10d      	bne.n	8010170 <USBD_GetDescriptor+0x84>
    {
      pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8010154:	687b      	ldr	r3, [r7, #4]
 8010156:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801015a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801015c:	f107 0208 	add.w	r2, r7, #8
 8010160:	4610      	mov	r0, r2
 8010162:	4798      	blx	r3
 8010164:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8010166:	68fb      	ldr	r3, [r7, #12]
 8010168:	3301      	adds	r3, #1
 801016a:	2202      	movs	r2, #2
 801016c:	701a      	strb	r2, [r3, #0]
    else
    {
      pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
    }
    break;
 801016e:	e100      	b.n	8010372 <USBD_GetDescriptor+0x286>
      pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8010170:	687b      	ldr	r3, [r7, #4]
 8010172:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8010176:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010178:	f107 0208 	add.w	r2, r7, #8
 801017c:	4610      	mov	r0, r2
 801017e:	4798      	blx	r3
 8010180:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8010182:	68fb      	ldr	r3, [r7, #12]
 8010184:	3301      	adds	r3, #1
 8010186:	2202      	movs	r2, #2
 8010188:	701a      	strb	r2, [r3, #0]
    break;
 801018a:	e0f2      	b.n	8010372 <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_STRING:
    switch ((uint8_t)(req->wValue))
 801018c:	683b      	ldr	r3, [r7, #0]
 801018e:	885b      	ldrh	r3, [r3, #2]
 8010190:	b2db      	uxtb	r3, r3
 8010192:	2b05      	cmp	r3, #5
 8010194:	f200 80ac 	bhi.w	80102f0 <USBD_GetDescriptor+0x204>
 8010198:	a201      	add	r2, pc, #4	; (adr r2, 80101a0 <USBD_GetDescriptor+0xb4>)
 801019a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801019e:	bf00      	nop
 80101a0:	080101b9 	.word	0x080101b9
 80101a4:	080101ed 	.word	0x080101ed
 80101a8:	08010221 	.word	0x08010221
 80101ac:	08010255 	.word	0x08010255
 80101b0:	08010289 	.word	0x08010289
 80101b4:	080102bd 	.word	0x080102bd
    {
    case USBD_IDX_LANGID_STR:
      if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 80101b8:	687b      	ldr	r3, [r7, #4]
 80101ba:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80101be:	685b      	ldr	r3, [r3, #4]
 80101c0:	2b00      	cmp	r3, #0
 80101c2:	d00b      	beq.n	80101dc <USBD_GetDescriptor+0xf0>
      {
        pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 80101c4:	687b      	ldr	r3, [r7, #4]
 80101c6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80101ca:	685b      	ldr	r3, [r3, #4]
 80101cc:	687a      	ldr	r2, [r7, #4]
 80101ce:	7c12      	ldrb	r2, [r2, #16]
 80101d0:	f107 0108 	add.w	r1, r7, #8
 80101d4:	4610      	mov	r0, r2
 80101d6:	4798      	blx	r3
 80101d8:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80101da:	e091      	b.n	8010300 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 80101dc:	6839      	ldr	r1, [r7, #0]
 80101de:	6878      	ldr	r0, [r7, #4]
 80101e0:	f000 faaa 	bl	8010738 <USBD_CtlError>
        err++;
 80101e4:	7afb      	ldrb	r3, [r7, #11]
 80101e6:	3301      	adds	r3, #1
 80101e8:	72fb      	strb	r3, [r7, #11]
      break;
 80101ea:	e089      	b.n	8010300 <USBD_GetDescriptor+0x214>

    case USBD_IDX_MFC_STR:
      if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 80101ec:	687b      	ldr	r3, [r7, #4]
 80101ee:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80101f2:	689b      	ldr	r3, [r3, #8]
 80101f4:	2b00      	cmp	r3, #0
 80101f6:	d00b      	beq.n	8010210 <USBD_GetDescriptor+0x124>
      {
        pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 80101f8:	687b      	ldr	r3, [r7, #4]
 80101fa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80101fe:	689b      	ldr	r3, [r3, #8]
 8010200:	687a      	ldr	r2, [r7, #4]
 8010202:	7c12      	ldrb	r2, [r2, #16]
 8010204:	f107 0108 	add.w	r1, r7, #8
 8010208:	4610      	mov	r0, r2
 801020a:	4798      	blx	r3
 801020c:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 801020e:	e077      	b.n	8010300 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 8010210:	6839      	ldr	r1, [r7, #0]
 8010212:	6878      	ldr	r0, [r7, #4]
 8010214:	f000 fa90 	bl	8010738 <USBD_CtlError>
        err++;
 8010218:	7afb      	ldrb	r3, [r7, #11]
 801021a:	3301      	adds	r3, #1
 801021c:	72fb      	strb	r3, [r7, #11]
      break;
 801021e:	e06f      	b.n	8010300 <USBD_GetDescriptor+0x214>

    case USBD_IDX_PRODUCT_STR:
      if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8010220:	687b      	ldr	r3, [r7, #4]
 8010222:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8010226:	68db      	ldr	r3, [r3, #12]
 8010228:	2b00      	cmp	r3, #0
 801022a:	d00b      	beq.n	8010244 <USBD_GetDescriptor+0x158>
      {
        pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 801022c:	687b      	ldr	r3, [r7, #4]
 801022e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8010232:	68db      	ldr	r3, [r3, #12]
 8010234:	687a      	ldr	r2, [r7, #4]
 8010236:	7c12      	ldrb	r2, [r2, #16]
 8010238:	f107 0108 	add.w	r1, r7, #8
 801023c:	4610      	mov	r0, r2
 801023e:	4798      	blx	r3
 8010240:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8010242:	e05d      	b.n	8010300 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 8010244:	6839      	ldr	r1, [r7, #0]
 8010246:	6878      	ldr	r0, [r7, #4]
 8010248:	f000 fa76 	bl	8010738 <USBD_CtlError>
        err++;
 801024c:	7afb      	ldrb	r3, [r7, #11]
 801024e:	3301      	adds	r3, #1
 8010250:	72fb      	strb	r3, [r7, #11]
      break;
 8010252:	e055      	b.n	8010300 <USBD_GetDescriptor+0x214>

    case USBD_IDX_SERIAL_STR:
      if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8010254:	687b      	ldr	r3, [r7, #4]
 8010256:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801025a:	691b      	ldr	r3, [r3, #16]
 801025c:	2b00      	cmp	r3, #0
 801025e:	d00b      	beq.n	8010278 <USBD_GetDescriptor+0x18c>
      {
        pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8010260:	687b      	ldr	r3, [r7, #4]
 8010262:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8010266:	691b      	ldr	r3, [r3, #16]
 8010268:	687a      	ldr	r2, [r7, #4]
 801026a:	7c12      	ldrb	r2, [r2, #16]
 801026c:	f107 0108 	add.w	r1, r7, #8
 8010270:	4610      	mov	r0, r2
 8010272:	4798      	blx	r3
 8010274:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8010276:	e043      	b.n	8010300 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 8010278:	6839      	ldr	r1, [r7, #0]
 801027a:	6878      	ldr	r0, [r7, #4]
 801027c:	f000 fa5c 	bl	8010738 <USBD_CtlError>
        err++;
 8010280:	7afb      	ldrb	r3, [r7, #11]
 8010282:	3301      	adds	r3, #1
 8010284:	72fb      	strb	r3, [r7, #11]
      break;
 8010286:	e03b      	b.n	8010300 <USBD_GetDescriptor+0x214>

    case USBD_IDX_CONFIG_STR:
      if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8010288:	687b      	ldr	r3, [r7, #4]
 801028a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801028e:	695b      	ldr	r3, [r3, #20]
 8010290:	2b00      	cmp	r3, #0
 8010292:	d00b      	beq.n	80102ac <USBD_GetDescriptor+0x1c0>
      {
        pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8010294:	687b      	ldr	r3, [r7, #4]
 8010296:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801029a:	695b      	ldr	r3, [r3, #20]
 801029c:	687a      	ldr	r2, [r7, #4]
 801029e:	7c12      	ldrb	r2, [r2, #16]
 80102a0:	f107 0108 	add.w	r1, r7, #8
 80102a4:	4610      	mov	r0, r2
 80102a6:	4798      	blx	r3
 80102a8:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80102aa:	e029      	b.n	8010300 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 80102ac:	6839      	ldr	r1, [r7, #0]
 80102ae:	6878      	ldr	r0, [r7, #4]
 80102b0:	f000 fa42 	bl	8010738 <USBD_CtlError>
        err++;
 80102b4:	7afb      	ldrb	r3, [r7, #11]
 80102b6:	3301      	adds	r3, #1
 80102b8:	72fb      	strb	r3, [r7, #11]
      break;
 80102ba:	e021      	b.n	8010300 <USBD_GetDescriptor+0x214>

    case USBD_IDX_INTERFACE_STR:
      if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 80102bc:	687b      	ldr	r3, [r7, #4]
 80102be:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80102c2:	699b      	ldr	r3, [r3, #24]
 80102c4:	2b00      	cmp	r3, #0
 80102c6:	d00b      	beq.n	80102e0 <USBD_GetDescriptor+0x1f4>
      {
        pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 80102c8:	687b      	ldr	r3, [r7, #4]
 80102ca:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80102ce:	699b      	ldr	r3, [r3, #24]
 80102d0:	687a      	ldr	r2, [r7, #4]
 80102d2:	7c12      	ldrb	r2, [r2, #16]
 80102d4:	f107 0108 	add.w	r1, r7, #8
 80102d8:	4610      	mov	r0, r2
 80102da:	4798      	blx	r3
 80102dc:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80102de:	e00f      	b.n	8010300 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 80102e0:	6839      	ldr	r1, [r7, #0]
 80102e2:	6878      	ldr	r0, [r7, #4]
 80102e4:	f000 fa28 	bl	8010738 <USBD_CtlError>
        err++;
 80102e8:	7afb      	ldrb	r3, [r7, #11]
 80102ea:	3301      	adds	r3, #1
 80102ec:	72fb      	strb	r3, [r7, #11]
      break;
 80102ee:	e007      	b.n	8010300 <USBD_GetDescriptor+0x214>
      {
        USBD_CtlError(pdev, req);
        err++;
      }
#else
      USBD_CtlError(pdev, req);
 80102f0:	6839      	ldr	r1, [r7, #0]
 80102f2:	6878      	ldr	r0, [r7, #4]
 80102f4:	f000 fa20 	bl	8010738 <USBD_CtlError>
      err++;
 80102f8:	7afb      	ldrb	r3, [r7, #11]
 80102fa:	3301      	adds	r3, #1
 80102fc:	72fb      	strb	r3, [r7, #11]
#endif
      break;
 80102fe:	bf00      	nop
    }
    break;
 8010300:	e037      	b.n	8010372 <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_DEVICE_QUALIFIER:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8010302:	687b      	ldr	r3, [r7, #4]
 8010304:	7c1b      	ldrb	r3, [r3, #16]
 8010306:	2b00      	cmp	r3, #0
 8010308:	d109      	bne.n	801031e <USBD_GetDescriptor+0x232>
    {
      pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 801030a:	687b      	ldr	r3, [r7, #4]
 801030c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8010310:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010312:	f107 0208 	add.w	r2, r7, #8
 8010316:	4610      	mov	r0, r2
 8010318:	4798      	blx	r3
 801031a:	60f8      	str	r0, [r7, #12]
    else
    {
      USBD_CtlError(pdev, req);
      err++;
    }
    break;
 801031c:	e029      	b.n	8010372 <USBD_GetDescriptor+0x286>
      USBD_CtlError(pdev, req);
 801031e:	6839      	ldr	r1, [r7, #0]
 8010320:	6878      	ldr	r0, [r7, #4]
 8010322:	f000 fa09 	bl	8010738 <USBD_CtlError>
      err++;
 8010326:	7afb      	ldrb	r3, [r7, #11]
 8010328:	3301      	adds	r3, #1
 801032a:	72fb      	strb	r3, [r7, #11]
    break;
 801032c:	e021      	b.n	8010372 <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 801032e:	687b      	ldr	r3, [r7, #4]
 8010330:	7c1b      	ldrb	r3, [r3, #16]
 8010332:	2b00      	cmp	r3, #0
 8010334:	d10d      	bne.n	8010352 <USBD_GetDescriptor+0x266>
    {
      pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8010336:	687b      	ldr	r3, [r7, #4]
 8010338:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801033c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801033e:	f107 0208 	add.w	r2, r7, #8
 8010342:	4610      	mov	r0, r2
 8010344:	4798      	blx	r3
 8010346:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8010348:	68fb      	ldr	r3, [r7, #12]
 801034a:	3301      	adds	r3, #1
 801034c:	2207      	movs	r2, #7
 801034e:	701a      	strb	r2, [r3, #0]
    else
    {
      USBD_CtlError(pdev, req);
      err++;
    }
    break;
 8010350:	e00f      	b.n	8010372 <USBD_GetDescriptor+0x286>
      USBD_CtlError(pdev, req);
 8010352:	6839      	ldr	r1, [r7, #0]
 8010354:	6878      	ldr	r0, [r7, #4]
 8010356:	f000 f9ef 	bl	8010738 <USBD_CtlError>
      err++;
 801035a:	7afb      	ldrb	r3, [r7, #11]
 801035c:	3301      	adds	r3, #1
 801035e:	72fb      	strb	r3, [r7, #11]
    break;
 8010360:	e007      	b.n	8010372 <USBD_GetDescriptor+0x286>

  default:
    USBD_CtlError(pdev, req);
 8010362:	6839      	ldr	r1, [r7, #0]
 8010364:	6878      	ldr	r0, [r7, #4]
 8010366:	f000 f9e7 	bl	8010738 <USBD_CtlError>
    err++;
 801036a:	7afb      	ldrb	r3, [r7, #11]
 801036c:	3301      	adds	r3, #1
 801036e:	72fb      	strb	r3, [r7, #11]
    break;
 8010370:	bf00      	nop
  }

  if (err != 0U)
 8010372:	7afb      	ldrb	r3, [r7, #11]
 8010374:	2b00      	cmp	r3, #0
 8010376:	d11e      	bne.n	80103b6 <USBD_GetDescriptor+0x2ca>
  {
    return;
  }
  else
  {
    if (req->wLength != 0U)
 8010378:	683b      	ldr	r3, [r7, #0]
 801037a:	88db      	ldrh	r3, [r3, #6]
 801037c:	2b00      	cmp	r3, #0
 801037e:	d016      	beq.n	80103ae <USBD_GetDescriptor+0x2c2>
    {
      if (len != 0U)
 8010380:	893b      	ldrh	r3, [r7, #8]
 8010382:	2b00      	cmp	r3, #0
 8010384:	d00e      	beq.n	80103a4 <USBD_GetDescriptor+0x2b8>
      {
        len = MIN(len, req->wLength);
 8010386:	683b      	ldr	r3, [r7, #0]
 8010388:	88da      	ldrh	r2, [r3, #6]
 801038a:	893b      	ldrh	r3, [r7, #8]
 801038c:	4293      	cmp	r3, r2
 801038e:	bf28      	it	cs
 8010390:	4613      	movcs	r3, r2
 8010392:	b29b      	uxth	r3, r3
 8010394:	813b      	strh	r3, [r7, #8]
        (void)USBD_CtlSendData(pdev, pbuf, len);
 8010396:	893b      	ldrh	r3, [r7, #8]
 8010398:	461a      	mov	r2, r3
 801039a:	68f9      	ldr	r1, [r7, #12]
 801039c:	6878      	ldr	r0, [r7, #4]
 801039e:	f000 fa3c 	bl	801081a <USBD_CtlSendData>
 80103a2:	e009      	b.n	80103b8 <USBD_GetDescriptor+0x2cc>
      }
      else
      {
        USBD_CtlError(pdev, req);
 80103a4:	6839      	ldr	r1, [r7, #0]
 80103a6:	6878      	ldr	r0, [r7, #4]
 80103a8:	f000 f9c6 	bl	8010738 <USBD_CtlError>
 80103ac:	e004      	b.n	80103b8 <USBD_GetDescriptor+0x2cc>
      }
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
 80103ae:	6878      	ldr	r0, [r7, #4]
 80103b0:	f000 fa70 	bl	8010894 <USBD_CtlSendStatus>
 80103b4:	e000      	b.n	80103b8 <USBD_GetDescriptor+0x2cc>
    return;
 80103b6:	bf00      	nop
    }
  }
}
 80103b8:	3710      	adds	r7, #16
 80103ba:	46bd      	mov	sp, r7
 80103bc:	bd80      	pop	{r7, pc}
 80103be:	bf00      	nop

080103c0 <USBD_SetAddress>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80103c0:	b580      	push	{r7, lr}
 80103c2:	b084      	sub	sp, #16
 80103c4:	af00      	add	r7, sp, #0
 80103c6:	6078      	str	r0, [r7, #4]
 80103c8:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 80103ca:	683b      	ldr	r3, [r7, #0]
 80103cc:	889b      	ldrh	r3, [r3, #4]
 80103ce:	2b00      	cmp	r3, #0
 80103d0:	d130      	bne.n	8010434 <USBD_SetAddress+0x74>
 80103d2:	683b      	ldr	r3, [r7, #0]
 80103d4:	88db      	ldrh	r3, [r3, #6]
 80103d6:	2b00      	cmp	r3, #0
 80103d8:	d12c      	bne.n	8010434 <USBD_SetAddress+0x74>
 80103da:	683b      	ldr	r3, [r7, #0]
 80103dc:	885b      	ldrh	r3, [r3, #2]
 80103de:	2b7f      	cmp	r3, #127	; 0x7f
 80103e0:	d828      	bhi.n	8010434 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 80103e2:	683b      	ldr	r3, [r7, #0]
 80103e4:	885b      	ldrh	r3, [r3, #2]
 80103e6:	b2db      	uxtb	r3, r3
 80103e8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80103ec:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80103ee:	687b      	ldr	r3, [r7, #4]
 80103f0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80103f4:	2b03      	cmp	r3, #3
 80103f6:	d104      	bne.n	8010402 <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 80103f8:	6839      	ldr	r1, [r7, #0]
 80103fa:	6878      	ldr	r0, [r7, #4]
 80103fc:	f000 f99c 	bl	8010738 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8010400:	e01c      	b.n	801043c <USBD_SetAddress+0x7c>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8010402:	687b      	ldr	r3, [r7, #4]
 8010404:	7bfa      	ldrb	r2, [r7, #15]
 8010406:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 801040a:	7bfb      	ldrb	r3, [r7, #15]
 801040c:	4619      	mov	r1, r3
 801040e:	6878      	ldr	r0, [r7, #4]
 8010410:	f000 fee3 	bl	80111da <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8010414:	6878      	ldr	r0, [r7, #4]
 8010416:	f000 fa3d 	bl	8010894 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 801041a:	7bfb      	ldrb	r3, [r7, #15]
 801041c:	2b00      	cmp	r3, #0
 801041e:	d004      	beq.n	801042a <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8010420:	687b      	ldr	r3, [r7, #4]
 8010422:	2202      	movs	r2, #2
 8010424:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8010428:	e008      	b.n	801043c <USBD_SetAddress+0x7c>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 801042a:	687b      	ldr	r3, [r7, #4]
 801042c:	2201      	movs	r2, #1
 801042e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8010432:	e003      	b.n	801043c <USBD_SetAddress+0x7c>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8010434:	6839      	ldr	r1, [r7, #0]
 8010436:	6878      	ldr	r0, [r7, #4]
 8010438:	f000 f97e 	bl	8010738 <USBD_CtlError>
  }
}
 801043c:	bf00      	nop
 801043e:	3710      	adds	r7, #16
 8010440:	46bd      	mov	sp, r7
 8010442:	bd80      	pop	{r7, pc}

08010444 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8010444:	b580      	push	{r7, lr}
 8010446:	b084      	sub	sp, #16
 8010448:	af00      	add	r7, sp, #0
 801044a:	6078      	str	r0, [r7, #4]
 801044c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 801044e:	2300      	movs	r3, #0
 8010450:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8010452:	683b      	ldr	r3, [r7, #0]
 8010454:	885b      	ldrh	r3, [r3, #2]
 8010456:	b2da      	uxtb	r2, r3
 8010458:	4b4b      	ldr	r3, [pc, #300]	; (8010588 <USBD_SetConfig+0x144>)
 801045a:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 801045c:	4b4a      	ldr	r3, [pc, #296]	; (8010588 <USBD_SetConfig+0x144>)
 801045e:	781b      	ldrb	r3, [r3, #0]
 8010460:	2b01      	cmp	r3, #1
 8010462:	d905      	bls.n	8010470 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8010464:	6839      	ldr	r1, [r7, #0]
 8010466:	6878      	ldr	r0, [r7, #4]
 8010468:	f000 f966 	bl	8010738 <USBD_CtlError>
    return USBD_FAIL;
 801046c:	2303      	movs	r3, #3
 801046e:	e087      	b.n	8010580 <USBD_SetConfig+0x13c>
  }

  switch (pdev->dev_state)
 8010470:	687b      	ldr	r3, [r7, #4]
 8010472:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8010476:	2b02      	cmp	r3, #2
 8010478:	d002      	beq.n	8010480 <USBD_SetConfig+0x3c>
 801047a:	2b03      	cmp	r3, #3
 801047c:	d025      	beq.n	80104ca <USBD_SetConfig+0x86>
 801047e:	e071      	b.n	8010564 <USBD_SetConfig+0x120>
  {
  case USBD_STATE_ADDRESSED:
    if (cfgidx != 0U)
 8010480:	4b41      	ldr	r3, [pc, #260]	; (8010588 <USBD_SetConfig+0x144>)
 8010482:	781b      	ldrb	r3, [r3, #0]
 8010484:	2b00      	cmp	r3, #0
 8010486:	d01c      	beq.n	80104c2 <USBD_SetConfig+0x7e>
    {
      pdev->dev_config = cfgidx;
 8010488:	4b3f      	ldr	r3, [pc, #252]	; (8010588 <USBD_SetConfig+0x144>)
 801048a:	781b      	ldrb	r3, [r3, #0]
 801048c:	461a      	mov	r2, r3
 801048e:	687b      	ldr	r3, [r7, #4]
 8010490:	605a      	str	r2, [r3, #4]

      ret = USBD_SetClassConfig(pdev, cfgidx);
 8010492:	4b3d      	ldr	r3, [pc, #244]	; (8010588 <USBD_SetConfig+0x144>)
 8010494:	781b      	ldrb	r3, [r3, #0]
 8010496:	4619      	mov	r1, r3
 8010498:	6878      	ldr	r0, [r7, #4]
 801049a:	f7ff f9a8 	bl	800f7ee <USBD_SetClassConfig>
 801049e:	4603      	mov	r3, r0
 80104a0:	73fb      	strb	r3, [r7, #15]

      if (ret != USBD_OK)
 80104a2:	7bfb      	ldrb	r3, [r7, #15]
 80104a4:	2b00      	cmp	r3, #0
 80104a6:	d004      	beq.n	80104b2 <USBD_SetConfig+0x6e>
      {
        USBD_CtlError(pdev, req);
 80104a8:	6839      	ldr	r1, [r7, #0]
 80104aa:	6878      	ldr	r0, [r7, #4]
 80104ac:	f000 f944 	bl	8010738 <USBD_CtlError>
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
    }
    break;
 80104b0:	e065      	b.n	801057e <USBD_SetConfig+0x13a>
        (void)USBD_CtlSendStatus(pdev);
 80104b2:	6878      	ldr	r0, [r7, #4]
 80104b4:	f000 f9ee 	bl	8010894 <USBD_CtlSendStatus>
        pdev->dev_state = USBD_STATE_CONFIGURED;
 80104b8:	687b      	ldr	r3, [r7, #4]
 80104ba:	2203      	movs	r2, #3
 80104bc:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    break;
 80104c0:	e05d      	b.n	801057e <USBD_SetConfig+0x13a>
      (void)USBD_CtlSendStatus(pdev);
 80104c2:	6878      	ldr	r0, [r7, #4]
 80104c4:	f000 f9e6 	bl	8010894 <USBD_CtlSendStatus>
    break;
 80104c8:	e059      	b.n	801057e <USBD_SetConfig+0x13a>

  case USBD_STATE_CONFIGURED:
    if (cfgidx == 0U)
 80104ca:	4b2f      	ldr	r3, [pc, #188]	; (8010588 <USBD_SetConfig+0x144>)
 80104cc:	781b      	ldrb	r3, [r3, #0]
 80104ce:	2b00      	cmp	r3, #0
 80104d0:	d112      	bne.n	80104f8 <USBD_SetConfig+0xb4>
    {
      pdev->dev_state = USBD_STATE_ADDRESSED;
 80104d2:	687b      	ldr	r3, [r7, #4]
 80104d4:	2202      	movs	r2, #2
 80104d6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      pdev->dev_config = cfgidx;
 80104da:	4b2b      	ldr	r3, [pc, #172]	; (8010588 <USBD_SetConfig+0x144>)
 80104dc:	781b      	ldrb	r3, [r3, #0]
 80104de:	461a      	mov	r2, r3
 80104e0:	687b      	ldr	r3, [r7, #4]
 80104e2:	605a      	str	r2, [r3, #4]
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 80104e4:	4b28      	ldr	r3, [pc, #160]	; (8010588 <USBD_SetConfig+0x144>)
 80104e6:	781b      	ldrb	r3, [r3, #0]
 80104e8:	4619      	mov	r1, r3
 80104ea:	6878      	ldr	r0, [r7, #4]
 80104ec:	f7ff f99b 	bl	800f826 <USBD_ClrClassConfig>
      (void)USBD_CtlSendStatus(pdev);
 80104f0:	6878      	ldr	r0, [r7, #4]
 80104f2:	f000 f9cf 	bl	8010894 <USBD_CtlSendStatus>
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
    }
    break;
 80104f6:	e042      	b.n	801057e <USBD_SetConfig+0x13a>
    else if (cfgidx != pdev->dev_config)
 80104f8:	4b23      	ldr	r3, [pc, #140]	; (8010588 <USBD_SetConfig+0x144>)
 80104fa:	781b      	ldrb	r3, [r3, #0]
 80104fc:	461a      	mov	r2, r3
 80104fe:	687b      	ldr	r3, [r7, #4]
 8010500:	685b      	ldr	r3, [r3, #4]
 8010502:	429a      	cmp	r2, r3
 8010504:	d02a      	beq.n	801055c <USBD_SetConfig+0x118>
      (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8010506:	687b      	ldr	r3, [r7, #4]
 8010508:	685b      	ldr	r3, [r3, #4]
 801050a:	b2db      	uxtb	r3, r3
 801050c:	4619      	mov	r1, r3
 801050e:	6878      	ldr	r0, [r7, #4]
 8010510:	f7ff f989 	bl	800f826 <USBD_ClrClassConfig>
      pdev->dev_config = cfgidx;
 8010514:	4b1c      	ldr	r3, [pc, #112]	; (8010588 <USBD_SetConfig+0x144>)
 8010516:	781b      	ldrb	r3, [r3, #0]
 8010518:	461a      	mov	r2, r3
 801051a:	687b      	ldr	r3, [r7, #4]
 801051c:	605a      	str	r2, [r3, #4]
      ret = USBD_SetClassConfig(pdev, cfgidx);
 801051e:	4b1a      	ldr	r3, [pc, #104]	; (8010588 <USBD_SetConfig+0x144>)
 8010520:	781b      	ldrb	r3, [r3, #0]
 8010522:	4619      	mov	r1, r3
 8010524:	6878      	ldr	r0, [r7, #4]
 8010526:	f7ff f962 	bl	800f7ee <USBD_SetClassConfig>
 801052a:	4603      	mov	r3, r0
 801052c:	73fb      	strb	r3, [r7, #15]
      if (ret != USBD_OK)
 801052e:	7bfb      	ldrb	r3, [r7, #15]
 8010530:	2b00      	cmp	r3, #0
 8010532:	d00f      	beq.n	8010554 <USBD_SetConfig+0x110>
        USBD_CtlError(pdev, req);
 8010534:	6839      	ldr	r1, [r7, #0]
 8010536:	6878      	ldr	r0, [r7, #4]
 8010538:	f000 f8fe 	bl	8010738 <USBD_CtlError>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 801053c:	687b      	ldr	r3, [r7, #4]
 801053e:	685b      	ldr	r3, [r3, #4]
 8010540:	b2db      	uxtb	r3, r3
 8010542:	4619      	mov	r1, r3
 8010544:	6878      	ldr	r0, [r7, #4]
 8010546:	f7ff f96e 	bl	800f826 <USBD_ClrClassConfig>
        pdev->dev_state = USBD_STATE_ADDRESSED;
 801054a:	687b      	ldr	r3, [r7, #4]
 801054c:	2202      	movs	r2, #2
 801054e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    break;
 8010552:	e014      	b.n	801057e <USBD_SetConfig+0x13a>
        (void)USBD_CtlSendStatus(pdev);
 8010554:	6878      	ldr	r0, [r7, #4]
 8010556:	f000 f99d 	bl	8010894 <USBD_CtlSendStatus>
    break;
 801055a:	e010      	b.n	801057e <USBD_SetConfig+0x13a>
      (void)USBD_CtlSendStatus(pdev);
 801055c:	6878      	ldr	r0, [r7, #4]
 801055e:	f000 f999 	bl	8010894 <USBD_CtlSendStatus>
    break;
 8010562:	e00c      	b.n	801057e <USBD_SetConfig+0x13a>

  default:
    USBD_CtlError(pdev, req);
 8010564:	6839      	ldr	r1, [r7, #0]
 8010566:	6878      	ldr	r0, [r7, #4]
 8010568:	f000 f8e6 	bl	8010738 <USBD_CtlError>
    (void)USBD_ClrClassConfig(pdev, cfgidx);
 801056c:	4b06      	ldr	r3, [pc, #24]	; (8010588 <USBD_SetConfig+0x144>)
 801056e:	781b      	ldrb	r3, [r3, #0]
 8010570:	4619      	mov	r1, r3
 8010572:	6878      	ldr	r0, [r7, #4]
 8010574:	f7ff f957 	bl	800f826 <USBD_ClrClassConfig>
    ret = USBD_FAIL;
 8010578:	2303      	movs	r3, #3
 801057a:	73fb      	strb	r3, [r7, #15]
    break;
 801057c:	bf00      	nop
  }

  return ret;
 801057e:	7bfb      	ldrb	r3, [r7, #15]
}
 8010580:	4618      	mov	r0, r3
 8010582:	3710      	adds	r7, #16
 8010584:	46bd      	mov	sp, r7
 8010586:	bd80      	pop	{r7, pc}
 8010588:	240001f0 	.word	0x240001f0

0801058c <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 801058c:	b580      	push	{r7, lr}
 801058e:	b082      	sub	sp, #8
 8010590:	af00      	add	r7, sp, #0
 8010592:	6078      	str	r0, [r7, #4]
 8010594:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8010596:	683b      	ldr	r3, [r7, #0]
 8010598:	88db      	ldrh	r3, [r3, #6]
 801059a:	2b01      	cmp	r3, #1
 801059c:	d004      	beq.n	80105a8 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 801059e:	6839      	ldr	r1, [r7, #0]
 80105a0:	6878      	ldr	r0, [r7, #4]
 80105a2:	f000 f8c9 	bl	8010738 <USBD_CtlError>
    default:
      USBD_CtlError(pdev, req);
      break;
    }
  }
}
 80105a6:	e021      	b.n	80105ec <USBD_GetConfig+0x60>
    switch (pdev->dev_state)
 80105a8:	687b      	ldr	r3, [r7, #4]
 80105aa:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80105ae:	2b01      	cmp	r3, #1
 80105b0:	db17      	blt.n	80105e2 <USBD_GetConfig+0x56>
 80105b2:	2b02      	cmp	r3, #2
 80105b4:	dd02      	ble.n	80105bc <USBD_GetConfig+0x30>
 80105b6:	2b03      	cmp	r3, #3
 80105b8:	d00b      	beq.n	80105d2 <USBD_GetConfig+0x46>
 80105ba:	e012      	b.n	80105e2 <USBD_GetConfig+0x56>
      pdev->dev_default_config = 0U;
 80105bc:	687b      	ldr	r3, [r7, #4]
 80105be:	2200      	movs	r2, #0
 80105c0:	609a      	str	r2, [r3, #8]
      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 80105c2:	687b      	ldr	r3, [r7, #4]
 80105c4:	3308      	adds	r3, #8
 80105c6:	2201      	movs	r2, #1
 80105c8:	4619      	mov	r1, r3
 80105ca:	6878      	ldr	r0, [r7, #4]
 80105cc:	f000 f925 	bl	801081a <USBD_CtlSendData>
      break;
 80105d0:	e00c      	b.n	80105ec <USBD_GetConfig+0x60>
      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 80105d2:	687b      	ldr	r3, [r7, #4]
 80105d4:	3304      	adds	r3, #4
 80105d6:	2201      	movs	r2, #1
 80105d8:	4619      	mov	r1, r3
 80105da:	6878      	ldr	r0, [r7, #4]
 80105dc:	f000 f91d 	bl	801081a <USBD_CtlSendData>
      break;
 80105e0:	e004      	b.n	80105ec <USBD_GetConfig+0x60>
      USBD_CtlError(pdev, req);
 80105e2:	6839      	ldr	r1, [r7, #0]
 80105e4:	6878      	ldr	r0, [r7, #4]
 80105e6:	f000 f8a7 	bl	8010738 <USBD_CtlError>
      break;
 80105ea:	bf00      	nop
}
 80105ec:	bf00      	nop
 80105ee:	3708      	adds	r7, #8
 80105f0:	46bd      	mov	sp, r7
 80105f2:	bd80      	pop	{r7, pc}

080105f4 <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80105f4:	b580      	push	{r7, lr}
 80105f6:	b082      	sub	sp, #8
 80105f8:	af00      	add	r7, sp, #0
 80105fa:	6078      	str	r0, [r7, #4]
 80105fc:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80105fe:	687b      	ldr	r3, [r7, #4]
 8010600:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8010604:	3b01      	subs	r3, #1
 8010606:	2b02      	cmp	r3, #2
 8010608:	d81e      	bhi.n	8010648 <USBD_GetStatus+0x54>
  {
  case USBD_STATE_DEFAULT:
  case USBD_STATE_ADDRESSED:
  case USBD_STATE_CONFIGURED:
    if (req->wLength != 0x2U)
 801060a:	683b      	ldr	r3, [r7, #0]
 801060c:	88db      	ldrh	r3, [r3, #6]
 801060e:	2b02      	cmp	r3, #2
 8010610:	d004      	beq.n	801061c <USBD_GetStatus+0x28>
    {
      USBD_CtlError(pdev, req);
 8010612:	6839      	ldr	r1, [r7, #0]
 8010614:	6878      	ldr	r0, [r7, #4]
 8010616:	f000 f88f 	bl	8010738 <USBD_CtlError>
      break;
 801061a:	e01a      	b.n	8010652 <USBD_GetStatus+0x5e>
    }

#if (USBD_SELF_POWERED == 1U)
    pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 801061c:	687b      	ldr	r3, [r7, #4]
 801061e:	2201      	movs	r2, #1
 8010620:	60da      	str	r2, [r3, #12]
#else
    pdev->dev_config_status = 0U;
#endif

    if (pdev->dev_remote_wakeup != 0U)
 8010622:	687b      	ldr	r3, [r7, #4]
 8010624:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8010628:	2b00      	cmp	r3, #0
 801062a:	d005      	beq.n	8010638 <USBD_GetStatus+0x44>
    {
      pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 801062c:	687b      	ldr	r3, [r7, #4]
 801062e:	68db      	ldr	r3, [r3, #12]
 8010630:	f043 0202 	orr.w	r2, r3, #2
 8010634:	687b      	ldr	r3, [r7, #4]
 8010636:	60da      	str	r2, [r3, #12]
    }

    (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8010638:	687b      	ldr	r3, [r7, #4]
 801063a:	330c      	adds	r3, #12
 801063c:	2202      	movs	r2, #2
 801063e:	4619      	mov	r1, r3
 8010640:	6878      	ldr	r0, [r7, #4]
 8010642:	f000 f8ea 	bl	801081a <USBD_CtlSendData>
    break;
 8010646:	e004      	b.n	8010652 <USBD_GetStatus+0x5e>

  default:
    USBD_CtlError(pdev, req);
 8010648:	6839      	ldr	r1, [r7, #0]
 801064a:	6878      	ldr	r0, [r7, #4]
 801064c:	f000 f874 	bl	8010738 <USBD_CtlError>
    break;
 8010650:	bf00      	nop
  }
}
 8010652:	bf00      	nop
 8010654:	3708      	adds	r7, #8
 8010656:	46bd      	mov	sp, r7
 8010658:	bd80      	pop	{r7, pc}

0801065a <USBD_SetFeature>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 801065a:	b580      	push	{r7, lr}
 801065c:	b082      	sub	sp, #8
 801065e:	af00      	add	r7, sp, #0
 8010660:	6078      	str	r0, [r7, #4]
 8010662:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8010664:	683b      	ldr	r3, [r7, #0]
 8010666:	885b      	ldrh	r3, [r3, #2]
 8010668:	2b01      	cmp	r3, #1
 801066a:	d106      	bne.n	801067a <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 801066c:	687b      	ldr	r3, [r7, #4]
 801066e:	2201      	movs	r2, #1
 8010670:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8010674:	6878      	ldr	r0, [r7, #4]
 8010676:	f000 f90d 	bl	8010894 <USBD_CtlSendStatus>
  }
}
 801067a:	bf00      	nop
 801067c:	3708      	adds	r7, #8
 801067e:	46bd      	mov	sp, r7
 8010680:	bd80      	pop	{r7, pc}

08010682 <USBD_ClrFeature>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8010682:	b580      	push	{r7, lr}
 8010684:	b082      	sub	sp, #8
 8010686:	af00      	add	r7, sp, #0
 8010688:	6078      	str	r0, [r7, #4]
 801068a:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 801068c:	687b      	ldr	r3, [r7, #4]
 801068e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8010692:	3b01      	subs	r3, #1
 8010694:	2b02      	cmp	r3, #2
 8010696:	d80b      	bhi.n	80106b0 <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8010698:	683b      	ldr	r3, [r7, #0]
 801069a:	885b      	ldrh	r3, [r3, #2]
 801069c:	2b01      	cmp	r3, #1
 801069e:	d10c      	bne.n	80106ba <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 80106a0:	687b      	ldr	r3, [r7, #4]
 80106a2:	2200      	movs	r2, #0
 80106a4:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 80106a8:	6878      	ldr	r0, [r7, #4]
 80106aa:	f000 f8f3 	bl	8010894 <USBD_CtlSendStatus>
      }
      break;
 80106ae:	e004      	b.n	80106ba <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 80106b0:	6839      	ldr	r1, [r7, #0]
 80106b2:	6878      	ldr	r0, [r7, #4]
 80106b4:	f000 f840 	bl	8010738 <USBD_CtlError>
      break;
 80106b8:	e000      	b.n	80106bc <USBD_ClrFeature+0x3a>
      break;
 80106ba:	bf00      	nop
  }
}
 80106bc:	bf00      	nop
 80106be:	3708      	adds	r7, #8
 80106c0:	46bd      	mov	sp, r7
 80106c2:	bd80      	pop	{r7, pc}

080106c4 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 80106c4:	b580      	push	{r7, lr}
 80106c6:	b084      	sub	sp, #16
 80106c8:	af00      	add	r7, sp, #0
 80106ca:	6078      	str	r0, [r7, #4]
 80106cc:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 80106ce:	683b      	ldr	r3, [r7, #0]
 80106d0:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 80106d2:	68fb      	ldr	r3, [r7, #12]
 80106d4:	781a      	ldrb	r2, [r3, #0]
 80106d6:	687b      	ldr	r3, [r7, #4]
 80106d8:	701a      	strb	r2, [r3, #0]

  pbuff++;
 80106da:	68fb      	ldr	r3, [r7, #12]
 80106dc:	3301      	adds	r3, #1
 80106de:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 80106e0:	68fb      	ldr	r3, [r7, #12]
 80106e2:	781a      	ldrb	r2, [r3, #0]
 80106e4:	687b      	ldr	r3, [r7, #4]
 80106e6:	705a      	strb	r2, [r3, #1]

  pbuff++;
 80106e8:	68fb      	ldr	r3, [r7, #12]
 80106ea:	3301      	adds	r3, #1
 80106ec:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 80106ee:	68f8      	ldr	r0, [r7, #12]
 80106f0:	f7ff fad4 	bl	800fc9c <SWAPBYTE>
 80106f4:	4603      	mov	r3, r0
 80106f6:	461a      	mov	r2, r3
 80106f8:	687b      	ldr	r3, [r7, #4]
 80106fa:	805a      	strh	r2, [r3, #2]

  pbuff++;
 80106fc:	68fb      	ldr	r3, [r7, #12]
 80106fe:	3301      	adds	r3, #1
 8010700:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8010702:	68fb      	ldr	r3, [r7, #12]
 8010704:	3301      	adds	r3, #1
 8010706:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8010708:	68f8      	ldr	r0, [r7, #12]
 801070a:	f7ff fac7 	bl	800fc9c <SWAPBYTE>
 801070e:	4603      	mov	r3, r0
 8010710:	461a      	mov	r2, r3
 8010712:	687b      	ldr	r3, [r7, #4]
 8010714:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8010716:	68fb      	ldr	r3, [r7, #12]
 8010718:	3301      	adds	r3, #1
 801071a:	60fb      	str	r3, [r7, #12]
  pbuff++;
 801071c:	68fb      	ldr	r3, [r7, #12]
 801071e:	3301      	adds	r3, #1
 8010720:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8010722:	68f8      	ldr	r0, [r7, #12]
 8010724:	f7ff faba 	bl	800fc9c <SWAPBYTE>
 8010728:	4603      	mov	r3, r0
 801072a:	461a      	mov	r2, r3
 801072c:	687b      	ldr	r3, [r7, #4]
 801072e:	80da      	strh	r2, [r3, #6]
}
 8010730:	bf00      	nop
 8010732:	3710      	adds	r7, #16
 8010734:	46bd      	mov	sp, r7
 8010736:	bd80      	pop	{r7, pc}

08010738 <USBD_CtlError>:
* @param  req: usb request
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8010738:	b580      	push	{r7, lr}
 801073a:	b082      	sub	sp, #8
 801073c:	af00      	add	r7, sp, #0
 801073e:	6078      	str	r0, [r7, #4]
 8010740:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8010742:	2180      	movs	r1, #128	; 0x80
 8010744:	6878      	ldr	r0, [r7, #4]
 8010746:	f000 fcde 	bl	8011106 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 801074a:	2100      	movs	r1, #0
 801074c:	6878      	ldr	r0, [r7, #4]
 801074e:	f000 fcda 	bl	8011106 <USBD_LL_StallEP>
}
 8010752:	bf00      	nop
 8010754:	3708      	adds	r7, #8
 8010756:	46bd      	mov	sp, r7
 8010758:	bd80      	pop	{r7, pc}

0801075a <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 801075a:	b580      	push	{r7, lr}
 801075c:	b086      	sub	sp, #24
 801075e:	af00      	add	r7, sp, #0
 8010760:	60f8      	str	r0, [r7, #12]
 8010762:	60b9      	str	r1, [r7, #8]
 8010764:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8010766:	2300      	movs	r3, #0
 8010768:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 801076a:	68fb      	ldr	r3, [r7, #12]
 801076c:	2b00      	cmp	r3, #0
 801076e:	d036      	beq.n	80107de <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 8010770:	68fb      	ldr	r3, [r7, #12]
 8010772:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8010774:	6938      	ldr	r0, [r7, #16]
 8010776:	f000 f836 	bl	80107e6 <USBD_GetLen>
 801077a:	4603      	mov	r3, r0
 801077c:	3301      	adds	r3, #1
 801077e:	b29b      	uxth	r3, r3
 8010780:	005b      	lsls	r3, r3, #1
 8010782:	b29a      	uxth	r2, r3
 8010784:	687b      	ldr	r3, [r7, #4]
 8010786:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8010788:	7dfb      	ldrb	r3, [r7, #23]
 801078a:	68ba      	ldr	r2, [r7, #8]
 801078c:	4413      	add	r3, r2
 801078e:	687a      	ldr	r2, [r7, #4]
 8010790:	7812      	ldrb	r2, [r2, #0]
 8010792:	701a      	strb	r2, [r3, #0]
  idx++;
 8010794:	7dfb      	ldrb	r3, [r7, #23]
 8010796:	3301      	adds	r3, #1
 8010798:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 801079a:	7dfb      	ldrb	r3, [r7, #23]
 801079c:	68ba      	ldr	r2, [r7, #8]
 801079e:	4413      	add	r3, r2
 80107a0:	2203      	movs	r2, #3
 80107a2:	701a      	strb	r2, [r3, #0]
  idx++;
 80107a4:	7dfb      	ldrb	r3, [r7, #23]
 80107a6:	3301      	adds	r3, #1
 80107a8:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 80107aa:	e013      	b.n	80107d4 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 80107ac:	7dfb      	ldrb	r3, [r7, #23]
 80107ae:	68ba      	ldr	r2, [r7, #8]
 80107b0:	4413      	add	r3, r2
 80107b2:	693a      	ldr	r2, [r7, #16]
 80107b4:	7812      	ldrb	r2, [r2, #0]
 80107b6:	701a      	strb	r2, [r3, #0]
    pdesc++;
 80107b8:	693b      	ldr	r3, [r7, #16]
 80107ba:	3301      	adds	r3, #1
 80107bc:	613b      	str	r3, [r7, #16]
    idx++;
 80107be:	7dfb      	ldrb	r3, [r7, #23]
 80107c0:	3301      	adds	r3, #1
 80107c2:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 80107c4:	7dfb      	ldrb	r3, [r7, #23]
 80107c6:	68ba      	ldr	r2, [r7, #8]
 80107c8:	4413      	add	r3, r2
 80107ca:	2200      	movs	r2, #0
 80107cc:	701a      	strb	r2, [r3, #0]
    idx++;
 80107ce:	7dfb      	ldrb	r3, [r7, #23]
 80107d0:	3301      	adds	r3, #1
 80107d2:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 80107d4:	693b      	ldr	r3, [r7, #16]
 80107d6:	781b      	ldrb	r3, [r3, #0]
 80107d8:	2b00      	cmp	r3, #0
 80107da:	d1e7      	bne.n	80107ac <USBD_GetString+0x52>
 80107dc:	e000      	b.n	80107e0 <USBD_GetString+0x86>
    return;
 80107de:	bf00      	nop
  }
}
 80107e0:	3718      	adds	r7, #24
 80107e2:	46bd      	mov	sp, r7
 80107e4:	bd80      	pop	{r7, pc}

080107e6 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 80107e6:	b480      	push	{r7}
 80107e8:	b085      	sub	sp, #20
 80107ea:	af00      	add	r7, sp, #0
 80107ec:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 80107ee:	2300      	movs	r3, #0
 80107f0:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 80107f2:	687b      	ldr	r3, [r7, #4]
 80107f4:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 80107f6:	e005      	b.n	8010804 <USBD_GetLen+0x1e>
  {
    len++;
 80107f8:	7bfb      	ldrb	r3, [r7, #15]
 80107fa:	3301      	adds	r3, #1
 80107fc:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 80107fe:	68bb      	ldr	r3, [r7, #8]
 8010800:	3301      	adds	r3, #1
 8010802:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8010804:	68bb      	ldr	r3, [r7, #8]
 8010806:	781b      	ldrb	r3, [r3, #0]
 8010808:	2b00      	cmp	r3, #0
 801080a:	d1f5      	bne.n	80107f8 <USBD_GetLen+0x12>
  }

  return len;
 801080c:	7bfb      	ldrb	r3, [r7, #15]
}
 801080e:	4618      	mov	r0, r3
 8010810:	3714      	adds	r7, #20
 8010812:	46bd      	mov	sp, r7
 8010814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010818:	4770      	bx	lr

0801081a <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 801081a:	b580      	push	{r7, lr}
 801081c:	b084      	sub	sp, #16
 801081e:	af00      	add	r7, sp, #0
 8010820:	60f8      	str	r0, [r7, #12]
 8010822:	60b9      	str	r1, [r7, #8]
 8010824:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8010826:	68fb      	ldr	r3, [r7, #12]
 8010828:	2202      	movs	r2, #2
 801082a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 801082e:	68fb      	ldr	r3, [r7, #12]
 8010830:	687a      	ldr	r2, [r7, #4]
 8010832:	619a      	str	r2, [r3, #24]
  pdev->ep_in[0].rem_length = len;
 8010834:	68fb      	ldr	r3, [r7, #12]
 8010836:	687a      	ldr	r2, [r7, #4]
 8010838:	61da      	str	r2, [r3, #28]

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 801083a:	687b      	ldr	r3, [r7, #4]
 801083c:	68ba      	ldr	r2, [r7, #8]
 801083e:	2100      	movs	r1, #0
 8010840:	68f8      	ldr	r0, [r7, #12]
 8010842:	f000 fce9 	bl	8011218 <USBD_LL_Transmit>

  return USBD_OK;
 8010846:	2300      	movs	r3, #0
}
 8010848:	4618      	mov	r0, r3
 801084a:	3710      	adds	r7, #16
 801084c:	46bd      	mov	sp, r7
 801084e:	bd80      	pop	{r7, pc}

08010850 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8010850:	b580      	push	{r7, lr}
 8010852:	b084      	sub	sp, #16
 8010854:	af00      	add	r7, sp, #0
 8010856:	60f8      	str	r0, [r7, #12]
 8010858:	60b9      	str	r1, [r7, #8]
 801085a:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 801085c:	687b      	ldr	r3, [r7, #4]
 801085e:	68ba      	ldr	r2, [r7, #8]
 8010860:	2100      	movs	r1, #0
 8010862:	68f8      	ldr	r0, [r7, #12]
 8010864:	f000 fcd8 	bl	8011218 <USBD_LL_Transmit>

  return USBD_OK;
 8010868:	2300      	movs	r3, #0
}
 801086a:	4618      	mov	r0, r3
 801086c:	3710      	adds	r7, #16
 801086e:	46bd      	mov	sp, r7
 8010870:	bd80      	pop	{r7, pc}

08010872 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8010872:	b580      	push	{r7, lr}
 8010874:	b084      	sub	sp, #16
 8010876:	af00      	add	r7, sp, #0
 8010878:	60f8      	str	r0, [r7, #12]
 801087a:	60b9      	str	r1, [r7, #8]
 801087c:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 801087e:	687b      	ldr	r3, [r7, #4]
 8010880:	68ba      	ldr	r2, [r7, #8]
 8010882:	2100      	movs	r1, #0
 8010884:	68f8      	ldr	r0, [r7, #12]
 8010886:	f000 fce8 	bl	801125a <USBD_LL_PrepareReceive>

  return USBD_OK;
 801088a:	2300      	movs	r3, #0
}
 801088c:	4618      	mov	r0, r3
 801088e:	3710      	adds	r7, #16
 8010890:	46bd      	mov	sp, r7
 8010892:	bd80      	pop	{r7, pc}

08010894 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8010894:	b580      	push	{r7, lr}
 8010896:	b082      	sub	sp, #8
 8010898:	af00      	add	r7, sp, #0
 801089a:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 801089c:	687b      	ldr	r3, [r7, #4]
 801089e:	2204      	movs	r2, #4
 80108a0:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 80108a4:	2300      	movs	r3, #0
 80108a6:	2200      	movs	r2, #0
 80108a8:	2100      	movs	r1, #0
 80108aa:	6878      	ldr	r0, [r7, #4]
 80108ac:	f000 fcb4 	bl	8011218 <USBD_LL_Transmit>

  return USBD_OK;
 80108b0:	2300      	movs	r3, #0
}
 80108b2:	4618      	mov	r0, r3
 80108b4:	3708      	adds	r7, #8
 80108b6:	46bd      	mov	sp, r7
 80108b8:	bd80      	pop	{r7, pc}

080108ba <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 80108ba:	b580      	push	{r7, lr}
 80108bc:	b082      	sub	sp, #8
 80108be:	af00      	add	r7, sp, #0
 80108c0:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 80108c2:	687b      	ldr	r3, [r7, #4]
 80108c4:	2205      	movs	r2, #5
 80108c6:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80108ca:	2300      	movs	r3, #0
 80108cc:	2200      	movs	r2, #0
 80108ce:	2100      	movs	r1, #0
 80108d0:	6878      	ldr	r0, [r7, #4]
 80108d2:	f000 fcc2 	bl	801125a <USBD_LL_PrepareReceive>

  return USBD_OK;
 80108d6:	2300      	movs	r3, #0
}
 80108d8:	4618      	mov	r0, r3
 80108da:	3708      	adds	r7, #8
 80108dc:	46bd      	mov	sp, r7
 80108de:	bd80      	pop	{r7, pc}

080108e0 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 80108e0:	b480      	push	{r7}
 80108e2:	b087      	sub	sp, #28
 80108e4:	af00      	add	r7, sp, #0
 80108e6:	60f8      	str	r0, [r7, #12]
 80108e8:	60b9      	str	r1, [r7, #8]
 80108ea:	4613      	mov	r3, r2
 80108ec:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 80108ee:	2301      	movs	r3, #1
 80108f0:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 80108f2:	2300      	movs	r3, #0
 80108f4:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 80108f6:	4b1f      	ldr	r3, [pc, #124]	; (8010974 <FATFS_LinkDriverEx+0x94>)
 80108f8:	7a5b      	ldrb	r3, [r3, #9]
 80108fa:	b2db      	uxtb	r3, r3
 80108fc:	2b00      	cmp	r3, #0
 80108fe:	d131      	bne.n	8010964 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8010900:	4b1c      	ldr	r3, [pc, #112]	; (8010974 <FATFS_LinkDriverEx+0x94>)
 8010902:	7a5b      	ldrb	r3, [r3, #9]
 8010904:	b2db      	uxtb	r3, r3
 8010906:	461a      	mov	r2, r3
 8010908:	4b1a      	ldr	r3, [pc, #104]	; (8010974 <FATFS_LinkDriverEx+0x94>)
 801090a:	2100      	movs	r1, #0
 801090c:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 801090e:	4b19      	ldr	r3, [pc, #100]	; (8010974 <FATFS_LinkDriverEx+0x94>)
 8010910:	7a5b      	ldrb	r3, [r3, #9]
 8010912:	b2db      	uxtb	r3, r3
 8010914:	4a17      	ldr	r2, [pc, #92]	; (8010974 <FATFS_LinkDriverEx+0x94>)
 8010916:	009b      	lsls	r3, r3, #2
 8010918:	4413      	add	r3, r2
 801091a:	68fa      	ldr	r2, [r7, #12]
 801091c:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 801091e:	4b15      	ldr	r3, [pc, #84]	; (8010974 <FATFS_LinkDriverEx+0x94>)
 8010920:	7a5b      	ldrb	r3, [r3, #9]
 8010922:	b2db      	uxtb	r3, r3
 8010924:	461a      	mov	r2, r3
 8010926:	4b13      	ldr	r3, [pc, #76]	; (8010974 <FATFS_LinkDriverEx+0x94>)
 8010928:	4413      	add	r3, r2
 801092a:	79fa      	ldrb	r2, [r7, #7]
 801092c:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 801092e:	4b11      	ldr	r3, [pc, #68]	; (8010974 <FATFS_LinkDriverEx+0x94>)
 8010930:	7a5b      	ldrb	r3, [r3, #9]
 8010932:	b2db      	uxtb	r3, r3
 8010934:	1c5a      	adds	r2, r3, #1
 8010936:	b2d1      	uxtb	r1, r2
 8010938:	4a0e      	ldr	r2, [pc, #56]	; (8010974 <FATFS_LinkDriverEx+0x94>)
 801093a:	7251      	strb	r1, [r2, #9]
 801093c:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 801093e:	7dbb      	ldrb	r3, [r7, #22]
 8010940:	3330      	adds	r3, #48	; 0x30
 8010942:	b2da      	uxtb	r2, r3
 8010944:	68bb      	ldr	r3, [r7, #8]
 8010946:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8010948:	68bb      	ldr	r3, [r7, #8]
 801094a:	3301      	adds	r3, #1
 801094c:	223a      	movs	r2, #58	; 0x3a
 801094e:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8010950:	68bb      	ldr	r3, [r7, #8]
 8010952:	3302      	adds	r3, #2
 8010954:	222f      	movs	r2, #47	; 0x2f
 8010956:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8010958:	68bb      	ldr	r3, [r7, #8]
 801095a:	3303      	adds	r3, #3
 801095c:	2200      	movs	r2, #0
 801095e:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8010960:	2300      	movs	r3, #0
 8010962:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 8010964:	7dfb      	ldrb	r3, [r7, #23]
}
 8010966:	4618      	mov	r0, r3
 8010968:	371c      	adds	r7, #28
 801096a:	46bd      	mov	sp, r7
 801096c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010970:	4770      	bx	lr
 8010972:	bf00      	nop
 8010974:	240001f4 	.word	0x240001f4

08010978 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 8010978:	b580      	push	{r7, lr}
 801097a:	b082      	sub	sp, #8
 801097c:	af00      	add	r7, sp, #0
 801097e:	6078      	str	r0, [r7, #4]
 8010980:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 8010982:	2200      	movs	r2, #0
 8010984:	6839      	ldr	r1, [r7, #0]
 8010986:	6878      	ldr	r0, [r7, #4]
 8010988:	f7ff ffaa 	bl	80108e0 <FATFS_LinkDriverEx>
 801098c:	4603      	mov	r3, r0
}
 801098e:	4618      	mov	r0, r3
 8010990:	3708      	adds	r7, #8
 8010992:	46bd      	mov	sp, r7
 8010994:	bd80      	pop	{r7, pc}
	...

08010998 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8010998:	b580      	push	{r7, lr}
 801099a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 801099c:	2200      	movs	r2, #0
 801099e:	4913      	ldr	r1, [pc, #76]	; (80109ec <MX_USB_DEVICE_Init+0x54>)
 80109a0:	4813      	ldr	r0, [pc, #76]	; (80109f0 <MX_USB_DEVICE_Init+0x58>)
 80109a2:	f7fe feb6 	bl	800f712 <USBD_Init>
 80109a6:	4603      	mov	r3, r0
 80109a8:	2b00      	cmp	r3, #0
 80109aa:	d001      	beq.n	80109b0 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 80109ac:	f7f0 fbce 	bl	800114c <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_MSC) != USBD_OK)
 80109b0:	4910      	ldr	r1, [pc, #64]	; (80109f4 <MX_USB_DEVICE_Init+0x5c>)
 80109b2:	480f      	ldr	r0, [pc, #60]	; (80109f0 <MX_USB_DEVICE_Init+0x58>)
 80109b4:	f7fe fee3 	bl	800f77e <USBD_RegisterClass>
 80109b8:	4603      	mov	r3, r0
 80109ba:	2b00      	cmp	r3, #0
 80109bc:	d001      	beq.n	80109c2 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 80109be:	f7f0 fbc5 	bl	800114c <Error_Handler>
  }
  if (USBD_MSC_RegisterStorage(&hUsbDeviceFS, &USBD_Storage_Interface_fops_FS) != USBD_OK)
 80109c2:	490d      	ldr	r1, [pc, #52]	; (80109f8 <MX_USB_DEVICE_Init+0x60>)
 80109c4:	480a      	ldr	r0, [pc, #40]	; (80109f0 <MX_USB_DEVICE_Init+0x58>)
 80109c6:	f7fd fbdf 	bl	800e188 <USBD_MSC_RegisterStorage>
 80109ca:	4603      	mov	r3, r0
 80109cc:	2b00      	cmp	r3, #0
 80109ce:	d001      	beq.n	80109d4 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 80109d0:	f7f0 fbbc 	bl	800114c <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 80109d4:	4806      	ldr	r0, [pc, #24]	; (80109f0 <MX_USB_DEVICE_Init+0x58>)
 80109d6:	f7fe fef3 	bl	800f7c0 <USBD_Start>
 80109da:	4603      	mov	r3, r0
 80109dc:	2b00      	cmp	r3, #0
 80109de:	d001      	beq.n	80109e4 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 80109e0:	f7f0 fbb4 	bl	800114c <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */
  HAL_PWREx_EnableUSBVoltageDetector();
 80109e4:	f7f5 f9b4 	bl	8005d50 <HAL_PWREx_EnableUSBVoltageDetector>

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 80109e8:	bf00      	nop
 80109ea:	bd80      	pop	{r7, pc}
 80109ec:	240000f8 	.word	0x240000f8
 80109f0:	24000a94 	.word	0x24000a94
 80109f4:	24000010 	.word	0x24000010
 80109f8:	24000148 	.word	0x24000148

080109fc <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80109fc:	b480      	push	{r7}
 80109fe:	b083      	sub	sp, #12
 8010a00:	af00      	add	r7, sp, #0
 8010a02:	4603      	mov	r3, r0
 8010a04:	6039      	str	r1, [r7, #0]
 8010a06:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8010a08:	683b      	ldr	r3, [r7, #0]
 8010a0a:	2212      	movs	r2, #18
 8010a0c:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8010a0e:	4b03      	ldr	r3, [pc, #12]	; (8010a1c <USBD_FS_DeviceDescriptor+0x20>)
}
 8010a10:	4618      	mov	r0, r3
 8010a12:	370c      	adds	r7, #12
 8010a14:	46bd      	mov	sp, r7
 8010a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010a1a:	4770      	bx	lr
 8010a1c:	24000114 	.word	0x24000114

08010a20 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8010a20:	b480      	push	{r7}
 8010a22:	b083      	sub	sp, #12
 8010a24:	af00      	add	r7, sp, #0
 8010a26:	4603      	mov	r3, r0
 8010a28:	6039      	str	r1, [r7, #0]
 8010a2a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8010a2c:	683b      	ldr	r3, [r7, #0]
 8010a2e:	2204      	movs	r2, #4
 8010a30:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8010a32:	4b03      	ldr	r3, [pc, #12]	; (8010a40 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8010a34:	4618      	mov	r0, r3
 8010a36:	370c      	adds	r7, #12
 8010a38:	46bd      	mov	sp, r7
 8010a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010a3e:	4770      	bx	lr
 8010a40:	24000128 	.word	0x24000128

08010a44 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8010a44:	b580      	push	{r7, lr}
 8010a46:	b082      	sub	sp, #8
 8010a48:	af00      	add	r7, sp, #0
 8010a4a:	4603      	mov	r3, r0
 8010a4c:	6039      	str	r1, [r7, #0]
 8010a4e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8010a50:	79fb      	ldrb	r3, [r7, #7]
 8010a52:	2b00      	cmp	r3, #0
 8010a54:	d105      	bne.n	8010a62 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8010a56:	683a      	ldr	r2, [r7, #0]
 8010a58:	4907      	ldr	r1, [pc, #28]	; (8010a78 <USBD_FS_ProductStrDescriptor+0x34>)
 8010a5a:	4808      	ldr	r0, [pc, #32]	; (8010a7c <USBD_FS_ProductStrDescriptor+0x38>)
 8010a5c:	f7ff fe7d 	bl	801075a <USBD_GetString>
 8010a60:	e004      	b.n	8010a6c <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8010a62:	683a      	ldr	r2, [r7, #0]
 8010a64:	4904      	ldr	r1, [pc, #16]	; (8010a78 <USBD_FS_ProductStrDescriptor+0x34>)
 8010a66:	4805      	ldr	r0, [pc, #20]	; (8010a7c <USBD_FS_ProductStrDescriptor+0x38>)
 8010a68:	f7ff fe77 	bl	801075a <USBD_GetString>
  }
  return USBD_StrDesc;
 8010a6c:	4b02      	ldr	r3, [pc, #8]	; (8010a78 <USBD_FS_ProductStrDescriptor+0x34>)
}
 8010a6e:	4618      	mov	r0, r3
 8010a70:	3708      	adds	r7, #8
 8010a72:	46bd      	mov	sp, r7
 8010a74:	bd80      	pop	{r7, pc}
 8010a76:	bf00      	nop
 8010a78:	24000d64 	.word	0x24000d64
 8010a7c:	08012620 	.word	0x08012620

08010a80 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8010a80:	b580      	push	{r7, lr}
 8010a82:	b082      	sub	sp, #8
 8010a84:	af00      	add	r7, sp, #0
 8010a86:	4603      	mov	r3, r0
 8010a88:	6039      	str	r1, [r7, #0]
 8010a8a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8010a8c:	683a      	ldr	r2, [r7, #0]
 8010a8e:	4904      	ldr	r1, [pc, #16]	; (8010aa0 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8010a90:	4804      	ldr	r0, [pc, #16]	; (8010aa4 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8010a92:	f7ff fe62 	bl	801075a <USBD_GetString>
  return USBD_StrDesc;
 8010a96:	4b02      	ldr	r3, [pc, #8]	; (8010aa0 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8010a98:	4618      	mov	r0, r3
 8010a9a:	3708      	adds	r7, #8
 8010a9c:	46bd      	mov	sp, r7
 8010a9e:	bd80      	pop	{r7, pc}
 8010aa0:	24000d64 	.word	0x24000d64
 8010aa4:	08012634 	.word	0x08012634

08010aa8 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8010aa8:	b580      	push	{r7, lr}
 8010aaa:	b082      	sub	sp, #8
 8010aac:	af00      	add	r7, sp, #0
 8010aae:	4603      	mov	r3, r0
 8010ab0:	6039      	str	r1, [r7, #0]
 8010ab2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8010ab4:	683b      	ldr	r3, [r7, #0]
 8010ab6:	221a      	movs	r2, #26
 8010ab8:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8010aba:	f000 f843 	bl	8010b44 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8010abe:	4b02      	ldr	r3, [pc, #8]	; (8010ac8 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8010ac0:	4618      	mov	r0, r3
 8010ac2:	3708      	adds	r7, #8
 8010ac4:	46bd      	mov	sp, r7
 8010ac6:	bd80      	pop	{r7, pc}
 8010ac8:	2400012c 	.word	0x2400012c

08010acc <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8010acc:	b580      	push	{r7, lr}
 8010ace:	b082      	sub	sp, #8
 8010ad0:	af00      	add	r7, sp, #0
 8010ad2:	4603      	mov	r3, r0
 8010ad4:	6039      	str	r1, [r7, #0]
 8010ad6:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8010ad8:	79fb      	ldrb	r3, [r7, #7]
 8010ada:	2b00      	cmp	r3, #0
 8010adc:	d105      	bne.n	8010aea <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8010ade:	683a      	ldr	r2, [r7, #0]
 8010ae0:	4907      	ldr	r1, [pc, #28]	; (8010b00 <USBD_FS_ConfigStrDescriptor+0x34>)
 8010ae2:	4808      	ldr	r0, [pc, #32]	; (8010b04 <USBD_FS_ConfigStrDescriptor+0x38>)
 8010ae4:	f7ff fe39 	bl	801075a <USBD_GetString>
 8010ae8:	e004      	b.n	8010af4 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8010aea:	683a      	ldr	r2, [r7, #0]
 8010aec:	4904      	ldr	r1, [pc, #16]	; (8010b00 <USBD_FS_ConfigStrDescriptor+0x34>)
 8010aee:	4805      	ldr	r0, [pc, #20]	; (8010b04 <USBD_FS_ConfigStrDescriptor+0x38>)
 8010af0:	f7ff fe33 	bl	801075a <USBD_GetString>
  }
  return USBD_StrDesc;
 8010af4:	4b02      	ldr	r3, [pc, #8]	; (8010b00 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8010af6:	4618      	mov	r0, r3
 8010af8:	3708      	adds	r7, #8
 8010afa:	46bd      	mov	sp, r7
 8010afc:	bd80      	pop	{r7, pc}
 8010afe:	bf00      	nop
 8010b00:	24000d64 	.word	0x24000d64
 8010b04:	08012648 	.word	0x08012648

08010b08 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8010b08:	b580      	push	{r7, lr}
 8010b0a:	b082      	sub	sp, #8
 8010b0c:	af00      	add	r7, sp, #0
 8010b0e:	4603      	mov	r3, r0
 8010b10:	6039      	str	r1, [r7, #0]
 8010b12:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8010b14:	79fb      	ldrb	r3, [r7, #7]
 8010b16:	2b00      	cmp	r3, #0
 8010b18:	d105      	bne.n	8010b26 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8010b1a:	683a      	ldr	r2, [r7, #0]
 8010b1c:	4907      	ldr	r1, [pc, #28]	; (8010b3c <USBD_FS_InterfaceStrDescriptor+0x34>)
 8010b1e:	4808      	ldr	r0, [pc, #32]	; (8010b40 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8010b20:	f7ff fe1b 	bl	801075a <USBD_GetString>
 8010b24:	e004      	b.n	8010b30 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8010b26:	683a      	ldr	r2, [r7, #0]
 8010b28:	4904      	ldr	r1, [pc, #16]	; (8010b3c <USBD_FS_InterfaceStrDescriptor+0x34>)
 8010b2a:	4805      	ldr	r0, [pc, #20]	; (8010b40 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8010b2c:	f7ff fe15 	bl	801075a <USBD_GetString>
  }
  return USBD_StrDesc;
 8010b30:	4b02      	ldr	r3, [pc, #8]	; (8010b3c <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8010b32:	4618      	mov	r0, r3
 8010b34:	3708      	adds	r7, #8
 8010b36:	46bd      	mov	sp, r7
 8010b38:	bd80      	pop	{r7, pc}
 8010b3a:	bf00      	nop
 8010b3c:	24000d64 	.word	0x24000d64
 8010b40:	08012654 	.word	0x08012654

08010b44 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8010b44:	b580      	push	{r7, lr}
 8010b46:	b084      	sub	sp, #16
 8010b48:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8010b4a:	4b0f      	ldr	r3, [pc, #60]	; (8010b88 <Get_SerialNum+0x44>)
 8010b4c:	681b      	ldr	r3, [r3, #0]
 8010b4e:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8010b50:	4b0e      	ldr	r3, [pc, #56]	; (8010b8c <Get_SerialNum+0x48>)
 8010b52:	681b      	ldr	r3, [r3, #0]
 8010b54:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8010b56:	4b0e      	ldr	r3, [pc, #56]	; (8010b90 <Get_SerialNum+0x4c>)
 8010b58:	681b      	ldr	r3, [r3, #0]
 8010b5a:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8010b5c:	68fa      	ldr	r2, [r7, #12]
 8010b5e:	687b      	ldr	r3, [r7, #4]
 8010b60:	4413      	add	r3, r2
 8010b62:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8010b64:	68fb      	ldr	r3, [r7, #12]
 8010b66:	2b00      	cmp	r3, #0
 8010b68:	d009      	beq.n	8010b7e <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8010b6a:	2208      	movs	r2, #8
 8010b6c:	4909      	ldr	r1, [pc, #36]	; (8010b94 <Get_SerialNum+0x50>)
 8010b6e:	68f8      	ldr	r0, [r7, #12]
 8010b70:	f000 f814 	bl	8010b9c <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8010b74:	2204      	movs	r2, #4
 8010b76:	4908      	ldr	r1, [pc, #32]	; (8010b98 <Get_SerialNum+0x54>)
 8010b78:	68b8      	ldr	r0, [r7, #8]
 8010b7a:	f000 f80f 	bl	8010b9c <IntToUnicode>
  }
}
 8010b7e:	bf00      	nop
 8010b80:	3710      	adds	r7, #16
 8010b82:	46bd      	mov	sp, r7
 8010b84:	bd80      	pop	{r7, pc}
 8010b86:	bf00      	nop
 8010b88:	1ff1e800 	.word	0x1ff1e800
 8010b8c:	1ff1e804 	.word	0x1ff1e804
 8010b90:	1ff1e808 	.word	0x1ff1e808
 8010b94:	2400012e 	.word	0x2400012e
 8010b98:	2400013e 	.word	0x2400013e

08010b9c <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8010b9c:	b480      	push	{r7}
 8010b9e:	b087      	sub	sp, #28
 8010ba0:	af00      	add	r7, sp, #0
 8010ba2:	60f8      	str	r0, [r7, #12]
 8010ba4:	60b9      	str	r1, [r7, #8]
 8010ba6:	4613      	mov	r3, r2
 8010ba8:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8010baa:	2300      	movs	r3, #0
 8010bac:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8010bae:	2300      	movs	r3, #0
 8010bb0:	75fb      	strb	r3, [r7, #23]
 8010bb2:	e027      	b.n	8010c04 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8010bb4:	68fb      	ldr	r3, [r7, #12]
 8010bb6:	0f1b      	lsrs	r3, r3, #28
 8010bb8:	2b09      	cmp	r3, #9
 8010bba:	d80b      	bhi.n	8010bd4 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8010bbc:	68fb      	ldr	r3, [r7, #12]
 8010bbe:	0f1b      	lsrs	r3, r3, #28
 8010bc0:	b2da      	uxtb	r2, r3
 8010bc2:	7dfb      	ldrb	r3, [r7, #23]
 8010bc4:	005b      	lsls	r3, r3, #1
 8010bc6:	4619      	mov	r1, r3
 8010bc8:	68bb      	ldr	r3, [r7, #8]
 8010bca:	440b      	add	r3, r1
 8010bcc:	3230      	adds	r2, #48	; 0x30
 8010bce:	b2d2      	uxtb	r2, r2
 8010bd0:	701a      	strb	r2, [r3, #0]
 8010bd2:	e00a      	b.n	8010bea <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8010bd4:	68fb      	ldr	r3, [r7, #12]
 8010bd6:	0f1b      	lsrs	r3, r3, #28
 8010bd8:	b2da      	uxtb	r2, r3
 8010bda:	7dfb      	ldrb	r3, [r7, #23]
 8010bdc:	005b      	lsls	r3, r3, #1
 8010bde:	4619      	mov	r1, r3
 8010be0:	68bb      	ldr	r3, [r7, #8]
 8010be2:	440b      	add	r3, r1
 8010be4:	3237      	adds	r2, #55	; 0x37
 8010be6:	b2d2      	uxtb	r2, r2
 8010be8:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8010bea:	68fb      	ldr	r3, [r7, #12]
 8010bec:	011b      	lsls	r3, r3, #4
 8010bee:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8010bf0:	7dfb      	ldrb	r3, [r7, #23]
 8010bf2:	005b      	lsls	r3, r3, #1
 8010bf4:	3301      	adds	r3, #1
 8010bf6:	68ba      	ldr	r2, [r7, #8]
 8010bf8:	4413      	add	r3, r2
 8010bfa:	2200      	movs	r2, #0
 8010bfc:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8010bfe:	7dfb      	ldrb	r3, [r7, #23]
 8010c00:	3301      	adds	r3, #1
 8010c02:	75fb      	strb	r3, [r7, #23]
 8010c04:	7dfa      	ldrb	r2, [r7, #23]
 8010c06:	79fb      	ldrb	r3, [r7, #7]
 8010c08:	429a      	cmp	r2, r3
 8010c0a:	d3d3      	bcc.n	8010bb4 <IntToUnicode+0x18>
  }
}
 8010c0c:	bf00      	nop
 8010c0e:	371c      	adds	r7, #28
 8010c10:	46bd      	mov	sp, r7
 8010c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010c16:	4770      	bx	lr

08010c18 <STORAGE_Init_FS>:
  * @brief  Initializes over USB FS IP
  * @param  lun:
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_Init_FS(uint8_t lun)
{
 8010c18:	b480      	push	{r7}
 8010c1a:	b083      	sub	sp, #12
 8010c1c:	af00      	add	r7, sp, #0
 8010c1e:	4603      	mov	r3, r0
 8010c20:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN 2 */
  return (USBD_OK);
 8010c22:	2300      	movs	r3, #0
  /* USER CODE END 2 */
}
 8010c24:	4618      	mov	r0, r3
 8010c26:	370c      	adds	r7, #12
 8010c28:	46bd      	mov	sp, r7
 8010c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010c2e:	4770      	bx	lr

08010c30 <STORAGE_GetCapacity_FS>:
  * @param  block_num: .
  * @param  block_size: .
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_GetCapacity_FS(uint8_t lun, uint32_t *block_num, uint16_t *block_size)
{
 8010c30:	b480      	push	{r7}
 8010c32:	b085      	sub	sp, #20
 8010c34:	af00      	add	r7, sp, #0
 8010c36:	4603      	mov	r3, r0
 8010c38:	60b9      	str	r1, [r7, #8]
 8010c3a:	607a      	str	r2, [r7, #4]
 8010c3c:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 3 */
  *block_num  = STORAGE_BLK_NBR;
 8010c3e:	68bb      	ldr	r3, [r7, #8]
 8010c40:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8010c44:	601a      	str	r2, [r3, #0]
  *block_size = STORAGE_BLK_SIZ;
 8010c46:	687b      	ldr	r3, [r7, #4]
 8010c48:	f44f 7200 	mov.w	r2, #512	; 0x200
 8010c4c:	801a      	strh	r2, [r3, #0]
  return (USBD_OK);
 8010c4e:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8010c50:	4618      	mov	r0, r3
 8010c52:	3714      	adds	r7, #20
 8010c54:	46bd      	mov	sp, r7
 8010c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010c5a:	4770      	bx	lr

08010c5c <STORAGE_IsReady_FS>:
  * @brief  .
  * @param  lun: .
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_IsReady_FS(uint8_t lun)
{
 8010c5c:	b480      	push	{r7}
 8010c5e:	b083      	sub	sp, #12
 8010c60:	af00      	add	r7, sp, #0
 8010c62:	4603      	mov	r3, r0
 8010c64:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8010c66:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8010c68:	4618      	mov	r0, r3
 8010c6a:	370c      	adds	r7, #12
 8010c6c:	46bd      	mov	sp, r7
 8010c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010c72:	4770      	bx	lr

08010c74 <STORAGE_IsWriteProtected_FS>:
  * @brief  .
  * @param  lun: .
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_IsWriteProtected_FS(uint8_t lun)
{
 8010c74:	b480      	push	{r7}
 8010c76:	b083      	sub	sp, #12
 8010c78:	af00      	add	r7, sp, #0
 8010c7a:	4603      	mov	r3, r0
 8010c7c:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN 5 */
  return (USBD_OK);
 8010c7e:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8010c80:	4618      	mov	r0, r3
 8010c82:	370c      	adds	r7, #12
 8010c84:	46bd      	mov	sp, r7
 8010c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010c8a:	4770      	bx	lr

08010c8c <STORAGE_Read_FS>:
  * @brief  .
  * @param  lun: .
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_Read_FS(uint8_t lun, uint8_t *buf, uint32_t blk_addr, uint16_t blk_len)
{
 8010c8c:	b480      	push	{r7}
 8010c8e:	b085      	sub	sp, #20
 8010c90:	af00      	add	r7, sp, #0
 8010c92:	60b9      	str	r1, [r7, #8]
 8010c94:	607a      	str	r2, [r7, #4]
 8010c96:	461a      	mov	r2, r3
 8010c98:	4603      	mov	r3, r0
 8010c9a:	73fb      	strb	r3, [r7, #15]
 8010c9c:	4613      	mov	r3, r2
 8010c9e:	81bb      	strh	r3, [r7, #12]
  /* USER CODE BEGIN 6 */
  return (USBD_OK);
 8010ca0:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8010ca2:	4618      	mov	r0, r3
 8010ca4:	3714      	adds	r7, #20
 8010ca6:	46bd      	mov	sp, r7
 8010ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010cac:	4770      	bx	lr

08010cae <STORAGE_Write_FS>:
  * @brief  .
  * @param  lun: .
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_Write_FS(uint8_t lun, uint8_t *buf, uint32_t blk_addr, uint16_t blk_len)
{
 8010cae:	b480      	push	{r7}
 8010cb0:	b085      	sub	sp, #20
 8010cb2:	af00      	add	r7, sp, #0
 8010cb4:	60b9      	str	r1, [r7, #8]
 8010cb6:	607a      	str	r2, [r7, #4]
 8010cb8:	461a      	mov	r2, r3
 8010cba:	4603      	mov	r3, r0
 8010cbc:	73fb      	strb	r3, [r7, #15]
 8010cbe:	4613      	mov	r3, r2
 8010cc0:	81bb      	strh	r3, [r7, #12]
  /* USER CODE BEGIN 7 */
  return (USBD_OK);
 8010cc2:	2300      	movs	r3, #0
  /* USER CODE END 7 */
}
 8010cc4:	4618      	mov	r0, r3
 8010cc6:	3714      	adds	r7, #20
 8010cc8:	46bd      	mov	sp, r7
 8010cca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010cce:	4770      	bx	lr

08010cd0 <STORAGE_GetMaxLun_FS>:
  * @brief  .
  * @param  None
  * @retval .
  */
int8_t STORAGE_GetMaxLun_FS(void)
{
 8010cd0:	b480      	push	{r7}
 8010cd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 8 */
  return (STORAGE_LUN_NBR - 1);
 8010cd4:	2300      	movs	r3, #0
  /* USER CODE END 8 */
}
 8010cd6:	4618      	mov	r0, r3
 8010cd8:	46bd      	mov	sp, r7
 8010cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010cde:	4770      	bx	lr

08010ce0 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8010ce0:	b580      	push	{r7, lr}
 8010ce2:	b08a      	sub	sp, #40	; 0x28
 8010ce4:	af00      	add	r7, sp, #0
 8010ce6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8010ce8:	f107 0314 	add.w	r3, r7, #20
 8010cec:	2200      	movs	r2, #0
 8010cee:	601a      	str	r2, [r3, #0]
 8010cf0:	605a      	str	r2, [r3, #4]
 8010cf2:	609a      	str	r2, [r3, #8]
 8010cf4:	60da      	str	r2, [r3, #12]
 8010cf6:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8010cf8:	687b      	ldr	r3, [r7, #4]
 8010cfa:	681b      	ldr	r3, [r3, #0]
 8010cfc:	4a1e      	ldr	r2, [pc, #120]	; (8010d78 <HAL_PCD_MspInit+0x98>)
 8010cfe:	4293      	cmp	r3, r2
 8010d00:	d136      	bne.n	8010d70 <HAL_PCD_MspInit+0x90>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8010d02:	4b1e      	ldr	r3, [pc, #120]	; (8010d7c <HAL_PCD_MspInit+0x9c>)
 8010d04:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8010d08:	4a1c      	ldr	r2, [pc, #112]	; (8010d7c <HAL_PCD_MspInit+0x9c>)
 8010d0a:	f043 0301 	orr.w	r3, r3, #1
 8010d0e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8010d12:	4b1a      	ldr	r3, [pc, #104]	; (8010d7c <HAL_PCD_MspInit+0x9c>)
 8010d14:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8010d18:	f003 0301 	and.w	r3, r3, #1
 8010d1c:	613b      	str	r3, [r7, #16]
 8010d1e:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8010d20:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8010d24:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8010d26:	2302      	movs	r3, #2
 8010d28:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8010d2a:	2300      	movs	r3, #0
 8010d2c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8010d2e:	2300      	movs	r3, #0
 8010d30:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 8010d32:	230a      	movs	r3, #10
 8010d34:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8010d36:	f107 0314 	add.w	r3, r7, #20
 8010d3a:	4619      	mov	r1, r3
 8010d3c:	4810      	ldr	r0, [pc, #64]	; (8010d80 <HAL_PCD_MspInit+0xa0>)
 8010d3e:	f7f3 fbc9 	bl	80044d4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8010d42:	4b0e      	ldr	r3, [pc, #56]	; (8010d7c <HAL_PCD_MspInit+0x9c>)
 8010d44:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8010d48:	4a0c      	ldr	r2, [pc, #48]	; (8010d7c <HAL_PCD_MspInit+0x9c>)
 8010d4a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8010d4e:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8010d52:	4b0a      	ldr	r3, [pc, #40]	; (8010d7c <HAL_PCD_MspInit+0x9c>)
 8010d54:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8010d58:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8010d5c:	60fb      	str	r3, [r7, #12]
 8010d5e:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8010d60:	2200      	movs	r2, #0
 8010d62:	2100      	movs	r1, #0
 8010d64:	2065      	movs	r0, #101	; 0x65
 8010d66:	f7f0 ff40 	bl	8001bea <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8010d6a:	2065      	movs	r0, #101	; 0x65
 8010d6c:	f7f0 ff57 	bl	8001c1e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8010d70:	bf00      	nop
 8010d72:	3728      	adds	r7, #40	; 0x28
 8010d74:	46bd      	mov	sp, r7
 8010d76:	bd80      	pop	{r7, pc}
 8010d78:	40080000 	.word	0x40080000
 8010d7c:	58024400 	.word	0x58024400
 8010d80:	58020000 	.word	0x58020000

08010d84 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8010d84:	b580      	push	{r7, lr}
 8010d86:	b082      	sub	sp, #8
 8010d88:	af00      	add	r7, sp, #0
 8010d8a:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8010d8c:	687b      	ldr	r3, [r7, #4]
 8010d8e:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 8010d92:	687b      	ldr	r3, [r7, #4]
 8010d94:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8010d98:	4619      	mov	r1, r3
 8010d9a:	4610      	mov	r0, r2
 8010d9c:	f7fe fd5b 	bl	800f856 <USBD_LL_SetupStage>
}
 8010da0:	bf00      	nop
 8010da2:	3708      	adds	r7, #8
 8010da4:	46bd      	mov	sp, r7
 8010da6:	bd80      	pop	{r7, pc}

08010da8 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8010da8:	b580      	push	{r7, lr}
 8010daa:	b082      	sub	sp, #8
 8010dac:	af00      	add	r7, sp, #0
 8010dae:	6078      	str	r0, [r7, #4]
 8010db0:	460b      	mov	r3, r1
 8010db2:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8010db4:	687b      	ldr	r3, [r7, #4]
 8010db6:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 8010dba:	78fa      	ldrb	r2, [r7, #3]
 8010dbc:	6879      	ldr	r1, [r7, #4]
 8010dbe:	4613      	mov	r3, r2
 8010dc0:	00db      	lsls	r3, r3, #3
 8010dc2:	1a9b      	subs	r3, r3, r2
 8010dc4:	009b      	lsls	r3, r3, #2
 8010dc6:	440b      	add	r3, r1
 8010dc8:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8010dcc:	681a      	ldr	r2, [r3, #0]
 8010dce:	78fb      	ldrb	r3, [r7, #3]
 8010dd0:	4619      	mov	r1, r3
 8010dd2:	f7fe fd93 	bl	800f8fc <USBD_LL_DataOutStage>
}
 8010dd6:	bf00      	nop
 8010dd8:	3708      	adds	r7, #8
 8010dda:	46bd      	mov	sp, r7
 8010ddc:	bd80      	pop	{r7, pc}

08010dde <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8010dde:	b580      	push	{r7, lr}
 8010de0:	b082      	sub	sp, #8
 8010de2:	af00      	add	r7, sp, #0
 8010de4:	6078      	str	r0, [r7, #4]
 8010de6:	460b      	mov	r3, r1
 8010de8:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8010dea:	687b      	ldr	r3, [r7, #4]
 8010dec:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 8010df0:	78fa      	ldrb	r2, [r7, #3]
 8010df2:	6879      	ldr	r1, [r7, #4]
 8010df4:	4613      	mov	r3, r2
 8010df6:	00db      	lsls	r3, r3, #3
 8010df8:	1a9b      	subs	r3, r3, r2
 8010dfa:	009b      	lsls	r3, r3, #2
 8010dfc:	440b      	add	r3, r1
 8010dfe:	3348      	adds	r3, #72	; 0x48
 8010e00:	681a      	ldr	r2, [r3, #0]
 8010e02:	78fb      	ldrb	r3, [r7, #3]
 8010e04:	4619      	mov	r1, r3
 8010e06:	f7fe fddc 	bl	800f9c2 <USBD_LL_DataInStage>
}
 8010e0a:	bf00      	nop
 8010e0c:	3708      	adds	r7, #8
 8010e0e:	46bd      	mov	sp, r7
 8010e10:	bd80      	pop	{r7, pc}

08010e12 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8010e12:	b580      	push	{r7, lr}
 8010e14:	b082      	sub	sp, #8
 8010e16:	af00      	add	r7, sp, #0
 8010e18:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8010e1a:	687b      	ldr	r3, [r7, #4]
 8010e1c:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8010e20:	4618      	mov	r0, r3
 8010e22:	f7fe fee0 	bl	800fbe6 <USBD_LL_SOF>
}
 8010e26:	bf00      	nop
 8010e28:	3708      	adds	r7, #8
 8010e2a:	46bd      	mov	sp, r7
 8010e2c:	bd80      	pop	{r7, pc}

08010e2e <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8010e2e:	b580      	push	{r7, lr}
 8010e30:	b084      	sub	sp, #16
 8010e32:	af00      	add	r7, sp, #0
 8010e34:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8010e36:	2301      	movs	r3, #1
 8010e38:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 8010e3a:	687b      	ldr	r3, [r7, #4]
 8010e3c:	68db      	ldr	r3, [r3, #12]
 8010e3e:	2b00      	cmp	r3, #0
 8010e40:	d102      	bne.n	8010e48 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 8010e42:	2300      	movs	r3, #0
 8010e44:	73fb      	strb	r3, [r7, #15]
 8010e46:	e008      	b.n	8010e5a <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 8010e48:	687b      	ldr	r3, [r7, #4]
 8010e4a:	68db      	ldr	r3, [r3, #12]
 8010e4c:	2b02      	cmp	r3, #2
 8010e4e:	d102      	bne.n	8010e56 <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 8010e50:	2301      	movs	r3, #1
 8010e52:	73fb      	strb	r3, [r7, #15]
 8010e54:	e001      	b.n	8010e5a <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 8010e56:	f7f0 f979 	bl	800114c <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8010e5a:	687b      	ldr	r3, [r7, #4]
 8010e5c:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8010e60:	7bfa      	ldrb	r2, [r7, #15]
 8010e62:	4611      	mov	r1, r2
 8010e64:	4618      	mov	r0, r3
 8010e66:	f7fe fe83 	bl	800fb70 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8010e6a:	687b      	ldr	r3, [r7, #4]
 8010e6c:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8010e70:	4618      	mov	r0, r3
 8010e72:	f7fe fe3c 	bl	800faee <USBD_LL_Reset>
}
 8010e76:	bf00      	nop
 8010e78:	3710      	adds	r7, #16
 8010e7a:	46bd      	mov	sp, r7
 8010e7c:	bd80      	pop	{r7, pc}
	...

08010e80 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8010e80:	b580      	push	{r7, lr}
 8010e82:	b082      	sub	sp, #8
 8010e84:	af00      	add	r7, sp, #0
 8010e86:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8010e88:	687b      	ldr	r3, [r7, #4]
 8010e8a:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8010e8e:	4618      	mov	r0, r3
 8010e90:	f7fe fe7e 	bl	800fb90 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8010e94:	687b      	ldr	r3, [r7, #4]
 8010e96:	681b      	ldr	r3, [r3, #0]
 8010e98:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8010e9c:	681b      	ldr	r3, [r3, #0]
 8010e9e:	687a      	ldr	r2, [r7, #4]
 8010ea0:	6812      	ldr	r2, [r2, #0]
 8010ea2:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8010ea6:	f043 0301 	orr.w	r3, r3, #1
 8010eaa:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8010eac:	687b      	ldr	r3, [r7, #4]
 8010eae:	6a1b      	ldr	r3, [r3, #32]
 8010eb0:	2b00      	cmp	r3, #0
 8010eb2:	d005      	beq.n	8010ec0 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8010eb4:	4b04      	ldr	r3, [pc, #16]	; (8010ec8 <HAL_PCD_SuspendCallback+0x48>)
 8010eb6:	691b      	ldr	r3, [r3, #16]
 8010eb8:	4a03      	ldr	r2, [pc, #12]	; (8010ec8 <HAL_PCD_SuspendCallback+0x48>)
 8010eba:	f043 0306 	orr.w	r3, r3, #6
 8010ebe:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8010ec0:	bf00      	nop
 8010ec2:	3708      	adds	r7, #8
 8010ec4:	46bd      	mov	sp, r7
 8010ec6:	bd80      	pop	{r7, pc}
 8010ec8:	e000ed00 	.word	0xe000ed00

08010ecc <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8010ecc:	b580      	push	{r7, lr}
 8010ece:	b082      	sub	sp, #8
 8010ed0:	af00      	add	r7, sp, #0
 8010ed2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8010ed4:	687b      	ldr	r3, [r7, #4]
 8010ed6:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8010eda:	4618      	mov	r0, r3
 8010edc:	f7fe fe6d 	bl	800fbba <USBD_LL_Resume>
}
 8010ee0:	bf00      	nop
 8010ee2:	3708      	adds	r7, #8
 8010ee4:	46bd      	mov	sp, r7
 8010ee6:	bd80      	pop	{r7, pc}

08010ee8 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8010ee8:	b580      	push	{r7, lr}
 8010eea:	b082      	sub	sp, #8
 8010eec:	af00      	add	r7, sp, #0
 8010eee:	6078      	str	r0, [r7, #4]
 8010ef0:	460b      	mov	r3, r1
 8010ef2:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8010ef4:	687b      	ldr	r3, [r7, #4]
 8010ef6:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8010efa:	78fa      	ldrb	r2, [r7, #3]
 8010efc:	4611      	mov	r1, r2
 8010efe:	4618      	mov	r0, r3
 8010f00:	f7fe fe98 	bl	800fc34 <USBD_LL_IsoOUTIncomplete>
}
 8010f04:	bf00      	nop
 8010f06:	3708      	adds	r7, #8
 8010f08:	46bd      	mov	sp, r7
 8010f0a:	bd80      	pop	{r7, pc}

08010f0c <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8010f0c:	b580      	push	{r7, lr}
 8010f0e:	b082      	sub	sp, #8
 8010f10:	af00      	add	r7, sp, #0
 8010f12:	6078      	str	r0, [r7, #4]
 8010f14:	460b      	mov	r3, r1
 8010f16:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8010f18:	687b      	ldr	r3, [r7, #4]
 8010f1a:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8010f1e:	78fa      	ldrb	r2, [r7, #3]
 8010f20:	4611      	mov	r1, r2
 8010f22:	4618      	mov	r0, r3
 8010f24:	f7fe fe79 	bl	800fc1a <USBD_LL_IsoINIncomplete>
}
 8010f28:	bf00      	nop
 8010f2a:	3708      	adds	r7, #8
 8010f2c:	46bd      	mov	sp, r7
 8010f2e:	bd80      	pop	{r7, pc}

08010f30 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8010f30:	b580      	push	{r7, lr}
 8010f32:	b082      	sub	sp, #8
 8010f34:	af00      	add	r7, sp, #0
 8010f36:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8010f38:	687b      	ldr	r3, [r7, #4]
 8010f3a:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8010f3e:	4618      	mov	r0, r3
 8010f40:	f7fe fe85 	bl	800fc4e <USBD_LL_DevConnected>
}
 8010f44:	bf00      	nop
 8010f46:	3708      	adds	r7, #8
 8010f48:	46bd      	mov	sp, r7
 8010f4a:	bd80      	pop	{r7, pc}

08010f4c <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8010f4c:	b580      	push	{r7, lr}
 8010f4e:	b082      	sub	sp, #8
 8010f50:	af00      	add	r7, sp, #0
 8010f52:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8010f54:	687b      	ldr	r3, [r7, #4]
 8010f56:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8010f5a:	4618      	mov	r0, r3
 8010f5c:	f7fe fe82 	bl	800fc64 <USBD_LL_DevDisconnected>
}
 8010f60:	bf00      	nop
 8010f62:	3708      	adds	r7, #8
 8010f64:	46bd      	mov	sp, r7
 8010f66:	bd80      	pop	{r7, pc}

08010f68 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8010f68:	b580      	push	{r7, lr}
 8010f6a:	b082      	sub	sp, #8
 8010f6c:	af00      	add	r7, sp, #0
 8010f6e:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8010f70:	687b      	ldr	r3, [r7, #4]
 8010f72:	781b      	ldrb	r3, [r3, #0]
 8010f74:	2b00      	cmp	r3, #0
 8010f76:	d13e      	bne.n	8010ff6 <USBD_LL_Init+0x8e>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8010f78:	4a21      	ldr	r2, [pc, #132]	; (8011000 <USBD_LL_Init+0x98>)
 8010f7a:	687b      	ldr	r3, [r7, #4]
 8010f7c:	f8c2 3404 	str.w	r3, [r2, #1028]	; 0x404
  pdev->pData = &hpcd_USB_OTG_FS;
 8010f80:	687b      	ldr	r3, [r7, #4]
 8010f82:	4a1f      	ldr	r2, [pc, #124]	; (8011000 <USBD_LL_Init+0x98>)
 8010f84:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8010f88:	4b1d      	ldr	r3, [pc, #116]	; (8011000 <USBD_LL_Init+0x98>)
 8010f8a:	4a1e      	ldr	r2, [pc, #120]	; (8011004 <USBD_LL_Init+0x9c>)
 8010f8c:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 9;
 8010f8e:	4b1c      	ldr	r3, [pc, #112]	; (8011000 <USBD_LL_Init+0x98>)
 8010f90:	2209      	movs	r2, #9
 8010f92:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8010f94:	4b1a      	ldr	r3, [pc, #104]	; (8011000 <USBD_LL_Init+0x98>)
 8010f96:	2202      	movs	r2, #2
 8010f98:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8010f9a:	4b19      	ldr	r3, [pc, #100]	; (8011000 <USBD_LL_Init+0x98>)
 8010f9c:	2200      	movs	r2, #0
 8010f9e:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8010fa0:	4b17      	ldr	r3, [pc, #92]	; (8011000 <USBD_LL_Init+0x98>)
 8010fa2:	2202      	movs	r2, #2
 8010fa4:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8010fa6:	4b16      	ldr	r3, [pc, #88]	; (8011000 <USBD_LL_Init+0x98>)
 8010fa8:	2200      	movs	r2, #0
 8010faa:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8010fac:	4b14      	ldr	r3, [pc, #80]	; (8011000 <USBD_LL_Init+0x98>)
 8010fae:	2200      	movs	r2, #0
 8010fb0:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8010fb2:	4b13      	ldr	r3, [pc, #76]	; (8011000 <USBD_LL_Init+0x98>)
 8010fb4:	2200      	movs	r2, #0
 8010fb6:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = DISABLE;
 8010fb8:	4b11      	ldr	r3, [pc, #68]	; (8011000 <USBD_LL_Init+0x98>)
 8010fba:	2200      	movs	r2, #0
 8010fbc:	629a      	str	r2, [r3, #40]	; 0x28
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8010fbe:	4b10      	ldr	r3, [pc, #64]	; (8011000 <USBD_LL_Init+0x98>)
 8010fc0:	2200      	movs	r2, #0
 8010fc2:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8010fc4:	4b0e      	ldr	r3, [pc, #56]	; (8011000 <USBD_LL_Init+0x98>)
 8010fc6:	2200      	movs	r2, #0
 8010fc8:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8010fca:	480d      	ldr	r0, [pc, #52]	; (8011000 <USBD_LL_Init+0x98>)
 8010fcc:	f7f3 fc7e 	bl	80048cc <HAL_PCD_Init>
 8010fd0:	4603      	mov	r3, r0
 8010fd2:	2b00      	cmp	r3, #0
 8010fd4:	d001      	beq.n	8010fda <USBD_LL_Init+0x72>
  {
    Error_Handler( );
 8010fd6:	f7f0 f8b9 	bl	800114c <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8010fda:	2180      	movs	r1, #128	; 0x80
 8010fdc:	4808      	ldr	r0, [pc, #32]	; (8011000 <USBD_LL_Init+0x98>)
 8010fde:	f7f4 fe3c 	bl	8005c5a <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8010fe2:	2240      	movs	r2, #64	; 0x40
 8010fe4:	2100      	movs	r1, #0
 8010fe6:	4806      	ldr	r0, [pc, #24]	; (8011000 <USBD_LL_Init+0x98>)
 8010fe8:	f7f4 fdf0 	bl	8005bcc <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8010fec:	2280      	movs	r2, #128	; 0x80
 8010fee:	2101      	movs	r1, #1
 8010ff0:	4803      	ldr	r0, [pc, #12]	; (8011000 <USBD_LL_Init+0x98>)
 8010ff2:	f7f4 fdeb 	bl	8005bcc <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 8010ff6:	2300      	movs	r3, #0
}
 8010ff8:	4618      	mov	r0, r3
 8010ffa:	3708      	adds	r7, #8
 8010ffc:	46bd      	mov	sp, r7
 8010ffe:	bd80      	pop	{r7, pc}
 8011000:	24000f64 	.word	0x24000f64
 8011004:	40080000 	.word	0x40080000

08011008 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8011008:	b580      	push	{r7, lr}
 801100a:	b084      	sub	sp, #16
 801100c:	af00      	add	r7, sp, #0
 801100e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8011010:	2300      	movs	r3, #0
 8011012:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8011014:	2300      	movs	r3, #0
 8011016:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8011018:	687b      	ldr	r3, [r7, #4]
 801101a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 801101e:	4618      	mov	r0, r3
 8011020:	f7f3 fd78 	bl	8004b14 <HAL_PCD_Start>
 8011024:	4603      	mov	r3, r0
 8011026:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8011028:	7bfb      	ldrb	r3, [r7, #15]
 801102a:	4618      	mov	r0, r3
 801102c:	f000 f94a 	bl	80112c4 <USBD_Get_USB_Status>
 8011030:	4603      	mov	r3, r0
 8011032:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8011034:	7bbb      	ldrb	r3, [r7, #14]
}
 8011036:	4618      	mov	r0, r3
 8011038:	3710      	adds	r7, #16
 801103a:	46bd      	mov	sp, r7
 801103c:	bd80      	pop	{r7, pc}

0801103e <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 801103e:	b580      	push	{r7, lr}
 8011040:	b084      	sub	sp, #16
 8011042:	af00      	add	r7, sp, #0
 8011044:	6078      	str	r0, [r7, #4]
 8011046:	4608      	mov	r0, r1
 8011048:	4611      	mov	r1, r2
 801104a:	461a      	mov	r2, r3
 801104c:	4603      	mov	r3, r0
 801104e:	70fb      	strb	r3, [r7, #3]
 8011050:	460b      	mov	r3, r1
 8011052:	70bb      	strb	r3, [r7, #2]
 8011054:	4613      	mov	r3, r2
 8011056:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8011058:	2300      	movs	r3, #0
 801105a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801105c:	2300      	movs	r3, #0
 801105e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8011060:	687b      	ldr	r3, [r7, #4]
 8011062:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8011066:	78bb      	ldrb	r3, [r7, #2]
 8011068:	883a      	ldrh	r2, [r7, #0]
 801106a:	78f9      	ldrb	r1, [r7, #3]
 801106c:	f7f4 f989 	bl	8005382 <HAL_PCD_EP_Open>
 8011070:	4603      	mov	r3, r0
 8011072:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8011074:	7bfb      	ldrb	r3, [r7, #15]
 8011076:	4618      	mov	r0, r3
 8011078:	f000 f924 	bl	80112c4 <USBD_Get_USB_Status>
 801107c:	4603      	mov	r3, r0
 801107e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8011080:	7bbb      	ldrb	r3, [r7, #14]
}
 8011082:	4618      	mov	r0, r3
 8011084:	3710      	adds	r7, #16
 8011086:	46bd      	mov	sp, r7
 8011088:	bd80      	pop	{r7, pc}

0801108a <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801108a:	b580      	push	{r7, lr}
 801108c:	b084      	sub	sp, #16
 801108e:	af00      	add	r7, sp, #0
 8011090:	6078      	str	r0, [r7, #4]
 8011092:	460b      	mov	r3, r1
 8011094:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8011096:	2300      	movs	r3, #0
 8011098:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801109a:	2300      	movs	r3, #0
 801109c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 801109e:	687b      	ldr	r3, [r7, #4]
 80110a0:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80110a4:	78fa      	ldrb	r2, [r7, #3]
 80110a6:	4611      	mov	r1, r2
 80110a8:	4618      	mov	r0, r3
 80110aa:	f7f4 f9d2 	bl	8005452 <HAL_PCD_EP_Close>
 80110ae:	4603      	mov	r3, r0
 80110b0:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80110b2:	7bfb      	ldrb	r3, [r7, #15]
 80110b4:	4618      	mov	r0, r3
 80110b6:	f000 f905 	bl	80112c4 <USBD_Get_USB_Status>
 80110ba:	4603      	mov	r3, r0
 80110bc:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80110be:	7bbb      	ldrb	r3, [r7, #14]
}
 80110c0:	4618      	mov	r0, r3
 80110c2:	3710      	adds	r7, #16
 80110c4:	46bd      	mov	sp, r7
 80110c6:	bd80      	pop	{r7, pc}

080110c8 <USBD_LL_FlushEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_FlushEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80110c8:	b580      	push	{r7, lr}
 80110ca:	b084      	sub	sp, #16
 80110cc:	af00      	add	r7, sp, #0
 80110ce:	6078      	str	r0, [r7, #4]
 80110d0:	460b      	mov	r3, r1
 80110d2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80110d4:	2300      	movs	r3, #0
 80110d6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80110d8:	2300      	movs	r3, #0
 80110da:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Flush(pdev->pData, ep_addr);
 80110dc:	687b      	ldr	r3, [r7, #4]
 80110de:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80110e2:	78fa      	ldrb	r2, [r7, #3]
 80110e4:	4611      	mov	r1, r2
 80110e6:	4618      	mov	r0, r3
 80110e8:	f7f4 fb64 	bl	80057b4 <HAL_PCD_EP_Flush>
 80110ec:	4603      	mov	r3, r0
 80110ee:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80110f0:	7bfb      	ldrb	r3, [r7, #15]
 80110f2:	4618      	mov	r0, r3
 80110f4:	f000 f8e6 	bl	80112c4 <USBD_Get_USB_Status>
 80110f8:	4603      	mov	r3, r0
 80110fa:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80110fc:	7bbb      	ldrb	r3, [r7, #14]
}
 80110fe:	4618      	mov	r0, r3
 8011100:	3710      	adds	r7, #16
 8011102:	46bd      	mov	sp, r7
 8011104:	bd80      	pop	{r7, pc}

08011106 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8011106:	b580      	push	{r7, lr}
 8011108:	b084      	sub	sp, #16
 801110a:	af00      	add	r7, sp, #0
 801110c:	6078      	str	r0, [r7, #4]
 801110e:	460b      	mov	r3, r1
 8011110:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8011112:	2300      	movs	r3, #0
 8011114:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8011116:	2300      	movs	r3, #0
 8011118:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 801111a:	687b      	ldr	r3, [r7, #4]
 801111c:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8011120:	78fa      	ldrb	r2, [r7, #3]
 8011122:	4611      	mov	r1, r2
 8011124:	4618      	mov	r0, r3
 8011126:	f7f4 fa8b 	bl	8005640 <HAL_PCD_EP_SetStall>
 801112a:	4603      	mov	r3, r0
 801112c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801112e:	7bfb      	ldrb	r3, [r7, #15]
 8011130:	4618      	mov	r0, r3
 8011132:	f000 f8c7 	bl	80112c4 <USBD_Get_USB_Status>
 8011136:	4603      	mov	r3, r0
 8011138:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801113a:	7bbb      	ldrb	r3, [r7, #14]
}
 801113c:	4618      	mov	r0, r3
 801113e:	3710      	adds	r7, #16
 8011140:	46bd      	mov	sp, r7
 8011142:	bd80      	pop	{r7, pc}

08011144 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8011144:	b580      	push	{r7, lr}
 8011146:	b084      	sub	sp, #16
 8011148:	af00      	add	r7, sp, #0
 801114a:	6078      	str	r0, [r7, #4]
 801114c:	460b      	mov	r3, r1
 801114e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8011150:	2300      	movs	r3, #0
 8011152:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8011154:	2300      	movs	r3, #0
 8011156:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8011158:	687b      	ldr	r3, [r7, #4]
 801115a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 801115e:	78fa      	ldrb	r2, [r7, #3]
 8011160:	4611      	mov	r1, r2
 8011162:	4618      	mov	r0, r3
 8011164:	f7f4 fad0 	bl	8005708 <HAL_PCD_EP_ClrStall>
 8011168:	4603      	mov	r3, r0
 801116a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801116c:	7bfb      	ldrb	r3, [r7, #15]
 801116e:	4618      	mov	r0, r3
 8011170:	f000 f8a8 	bl	80112c4 <USBD_Get_USB_Status>
 8011174:	4603      	mov	r3, r0
 8011176:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8011178:	7bbb      	ldrb	r3, [r7, #14]
}
 801117a:	4618      	mov	r0, r3
 801117c:	3710      	adds	r7, #16
 801117e:	46bd      	mov	sp, r7
 8011180:	bd80      	pop	{r7, pc}

08011182 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8011182:	b480      	push	{r7}
 8011184:	b085      	sub	sp, #20
 8011186:	af00      	add	r7, sp, #0
 8011188:	6078      	str	r0, [r7, #4]
 801118a:	460b      	mov	r3, r1
 801118c:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 801118e:	687b      	ldr	r3, [r7, #4]
 8011190:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8011194:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8011196:	f997 3003 	ldrsb.w	r3, [r7, #3]
 801119a:	2b00      	cmp	r3, #0
 801119c:	da0b      	bge.n	80111b6 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 801119e:	78fb      	ldrb	r3, [r7, #3]
 80111a0:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80111a4:	68f9      	ldr	r1, [r7, #12]
 80111a6:	4613      	mov	r3, r2
 80111a8:	00db      	lsls	r3, r3, #3
 80111aa:	1a9b      	subs	r3, r3, r2
 80111ac:	009b      	lsls	r3, r3, #2
 80111ae:	440b      	add	r3, r1
 80111b0:	333e      	adds	r3, #62	; 0x3e
 80111b2:	781b      	ldrb	r3, [r3, #0]
 80111b4:	e00b      	b.n	80111ce <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 80111b6:	78fb      	ldrb	r3, [r7, #3]
 80111b8:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80111bc:	68f9      	ldr	r1, [r7, #12]
 80111be:	4613      	mov	r3, r2
 80111c0:	00db      	lsls	r3, r3, #3
 80111c2:	1a9b      	subs	r3, r3, r2
 80111c4:	009b      	lsls	r3, r3, #2
 80111c6:	440b      	add	r3, r1
 80111c8:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 80111cc:	781b      	ldrb	r3, [r3, #0]
  }
}
 80111ce:	4618      	mov	r0, r3
 80111d0:	3714      	adds	r7, #20
 80111d2:	46bd      	mov	sp, r7
 80111d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80111d8:	4770      	bx	lr

080111da <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 80111da:	b580      	push	{r7, lr}
 80111dc:	b084      	sub	sp, #16
 80111de:	af00      	add	r7, sp, #0
 80111e0:	6078      	str	r0, [r7, #4]
 80111e2:	460b      	mov	r3, r1
 80111e4:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80111e6:	2300      	movs	r3, #0
 80111e8:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80111ea:	2300      	movs	r3, #0
 80111ec:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 80111ee:	687b      	ldr	r3, [r7, #4]
 80111f0:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80111f4:	78fa      	ldrb	r2, [r7, #3]
 80111f6:	4611      	mov	r1, r2
 80111f8:	4618      	mov	r0, r3
 80111fa:	f7f4 f89d 	bl	8005338 <HAL_PCD_SetAddress>
 80111fe:	4603      	mov	r3, r0
 8011200:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8011202:	7bfb      	ldrb	r3, [r7, #15]
 8011204:	4618      	mov	r0, r3
 8011206:	f000 f85d 	bl	80112c4 <USBD_Get_USB_Status>
 801120a:	4603      	mov	r3, r0
 801120c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801120e:	7bbb      	ldrb	r3, [r7, #14]
}
 8011210:	4618      	mov	r0, r3
 8011212:	3710      	adds	r7, #16
 8011214:	46bd      	mov	sp, r7
 8011216:	bd80      	pop	{r7, pc}

08011218 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8011218:	b580      	push	{r7, lr}
 801121a:	b086      	sub	sp, #24
 801121c:	af00      	add	r7, sp, #0
 801121e:	60f8      	str	r0, [r7, #12]
 8011220:	607a      	str	r2, [r7, #4]
 8011222:	603b      	str	r3, [r7, #0]
 8011224:	460b      	mov	r3, r1
 8011226:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8011228:	2300      	movs	r3, #0
 801122a:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801122c:	2300      	movs	r3, #0
 801122e:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8011230:	68fb      	ldr	r3, [r7, #12]
 8011232:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8011236:	7af9      	ldrb	r1, [r7, #11]
 8011238:	683b      	ldr	r3, [r7, #0]
 801123a:	687a      	ldr	r2, [r7, #4]
 801123c:	f7f4 f9b6 	bl	80055ac <HAL_PCD_EP_Transmit>
 8011240:	4603      	mov	r3, r0
 8011242:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8011244:	7dfb      	ldrb	r3, [r7, #23]
 8011246:	4618      	mov	r0, r3
 8011248:	f000 f83c 	bl	80112c4 <USBD_Get_USB_Status>
 801124c:	4603      	mov	r3, r0
 801124e:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8011250:	7dbb      	ldrb	r3, [r7, #22]
}
 8011252:	4618      	mov	r0, r3
 8011254:	3718      	adds	r7, #24
 8011256:	46bd      	mov	sp, r7
 8011258:	bd80      	pop	{r7, pc}

0801125a <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 801125a:	b580      	push	{r7, lr}
 801125c:	b086      	sub	sp, #24
 801125e:	af00      	add	r7, sp, #0
 8011260:	60f8      	str	r0, [r7, #12]
 8011262:	607a      	str	r2, [r7, #4]
 8011264:	603b      	str	r3, [r7, #0]
 8011266:	460b      	mov	r3, r1
 8011268:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801126a:	2300      	movs	r3, #0
 801126c:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801126e:	2300      	movs	r3, #0
 8011270:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8011272:	68fb      	ldr	r3, [r7, #12]
 8011274:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8011278:	7af9      	ldrb	r1, [r7, #11]
 801127a:	683b      	ldr	r3, [r7, #0]
 801127c:	687a      	ldr	r2, [r7, #4]
 801127e:	f7f4 f932 	bl	80054e6 <HAL_PCD_EP_Receive>
 8011282:	4603      	mov	r3, r0
 8011284:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8011286:	7dfb      	ldrb	r3, [r7, #23]
 8011288:	4618      	mov	r0, r3
 801128a:	f000 f81b 	bl	80112c4 <USBD_Get_USB_Status>
 801128e:	4603      	mov	r3, r0
 8011290:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8011292:	7dbb      	ldrb	r3, [r7, #22]
}
 8011294:	4618      	mov	r0, r3
 8011296:	3718      	adds	r7, #24
 8011298:	46bd      	mov	sp, r7
 801129a:	bd80      	pop	{r7, pc}

0801129c <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801129c:	b580      	push	{r7, lr}
 801129e:	b082      	sub	sp, #8
 80112a0:	af00      	add	r7, sp, #0
 80112a2:	6078      	str	r0, [r7, #4]
 80112a4:	460b      	mov	r3, r1
 80112a6:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 80112a8:	687b      	ldr	r3, [r7, #4]
 80112aa:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80112ae:	78fa      	ldrb	r2, [r7, #3]
 80112b0:	4611      	mov	r1, r2
 80112b2:	4618      	mov	r0, r3
 80112b4:	f7f4 f962 	bl	800557c <HAL_PCD_EP_GetRxCount>
 80112b8:	4603      	mov	r3, r0
}
 80112ba:	4618      	mov	r0, r3
 80112bc:	3708      	adds	r7, #8
 80112be:	46bd      	mov	sp, r7
 80112c0:	bd80      	pop	{r7, pc}
	...

080112c4 <USBD_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 80112c4:	b480      	push	{r7}
 80112c6:	b085      	sub	sp, #20
 80112c8:	af00      	add	r7, sp, #0
 80112ca:	4603      	mov	r3, r0
 80112cc:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80112ce:	2300      	movs	r3, #0
 80112d0:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 80112d2:	79fb      	ldrb	r3, [r7, #7]
 80112d4:	2b03      	cmp	r3, #3
 80112d6:	d817      	bhi.n	8011308 <USBD_Get_USB_Status+0x44>
 80112d8:	a201      	add	r2, pc, #4	; (adr r2, 80112e0 <USBD_Get_USB_Status+0x1c>)
 80112da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80112de:	bf00      	nop
 80112e0:	080112f1 	.word	0x080112f1
 80112e4:	080112f7 	.word	0x080112f7
 80112e8:	080112fd 	.word	0x080112fd
 80112ec:	08011303 	.word	0x08011303
  {
    case HAL_OK :
      usb_status = USBD_OK;
 80112f0:	2300      	movs	r3, #0
 80112f2:	73fb      	strb	r3, [r7, #15]
    break;
 80112f4:	e00b      	b.n	801130e <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 80112f6:	2303      	movs	r3, #3
 80112f8:	73fb      	strb	r3, [r7, #15]
    break;
 80112fa:	e008      	b.n	801130e <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 80112fc:	2301      	movs	r3, #1
 80112fe:	73fb      	strb	r3, [r7, #15]
    break;
 8011300:	e005      	b.n	801130e <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8011302:	2303      	movs	r3, #3
 8011304:	73fb      	strb	r3, [r7, #15]
    break;
 8011306:	e002      	b.n	801130e <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8011308:	2303      	movs	r3, #3
 801130a:	73fb      	strb	r3, [r7, #15]
    break;
 801130c:	bf00      	nop
  }
  return usb_status;
 801130e:	7bfb      	ldrb	r3, [r7, #15]
}
 8011310:	4618      	mov	r0, r3
 8011312:	3714      	adds	r7, #20
 8011314:	46bd      	mov	sp, r7
 8011316:	f85d 7b04 	ldr.w	r7, [sp], #4
 801131a:	4770      	bx	lr

0801131c <__errno>:
 801131c:	4b01      	ldr	r3, [pc, #4]	; (8011324 <__errno+0x8>)
 801131e:	6818      	ldr	r0, [r3, #0]
 8011320:	4770      	bx	lr
 8011322:	bf00      	nop
 8011324:	24000168 	.word	0x24000168

08011328 <__libc_init_array>:
 8011328:	b570      	push	{r4, r5, r6, lr}
 801132a:	4e0d      	ldr	r6, [pc, #52]	; (8011360 <__libc_init_array+0x38>)
 801132c:	4c0d      	ldr	r4, [pc, #52]	; (8011364 <__libc_init_array+0x3c>)
 801132e:	1ba4      	subs	r4, r4, r6
 8011330:	10a4      	asrs	r4, r4, #2
 8011332:	2500      	movs	r5, #0
 8011334:	42a5      	cmp	r5, r4
 8011336:	d109      	bne.n	801134c <__libc_init_array+0x24>
 8011338:	4e0b      	ldr	r6, [pc, #44]	; (8011368 <__libc_init_array+0x40>)
 801133a:	4c0c      	ldr	r4, [pc, #48]	; (801136c <__libc_init_array+0x44>)
 801133c:	f001 f8ee 	bl	801251c <_init>
 8011340:	1ba4      	subs	r4, r4, r6
 8011342:	10a4      	asrs	r4, r4, #2
 8011344:	2500      	movs	r5, #0
 8011346:	42a5      	cmp	r5, r4
 8011348:	d105      	bne.n	8011356 <__libc_init_array+0x2e>
 801134a:	bd70      	pop	{r4, r5, r6, pc}
 801134c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8011350:	4798      	blx	r3
 8011352:	3501      	adds	r5, #1
 8011354:	e7ee      	b.n	8011334 <__libc_init_array+0xc>
 8011356:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 801135a:	4798      	blx	r3
 801135c:	3501      	adds	r5, #1
 801135e:	e7f2      	b.n	8011346 <__libc_init_array+0x1e>
 8011360:	0801276c 	.word	0x0801276c
 8011364:	0801276c 	.word	0x0801276c
 8011368:	0801276c 	.word	0x0801276c
 801136c:	08012770 	.word	0x08012770

08011370 <malloc>:
 8011370:	4b02      	ldr	r3, [pc, #8]	; (801137c <malloc+0xc>)
 8011372:	4601      	mov	r1, r0
 8011374:	6818      	ldr	r0, [r3, #0]
 8011376:	f000 b86d 	b.w	8011454 <_malloc_r>
 801137a:	bf00      	nop
 801137c:	24000168 	.word	0x24000168

08011380 <free>:
 8011380:	4b02      	ldr	r3, [pc, #8]	; (801138c <free+0xc>)
 8011382:	4601      	mov	r1, r0
 8011384:	6818      	ldr	r0, [r3, #0]
 8011386:	f000 b817 	b.w	80113b8 <_free_r>
 801138a:	bf00      	nop
 801138c:	24000168 	.word	0x24000168

08011390 <memcpy>:
 8011390:	b510      	push	{r4, lr}
 8011392:	1e43      	subs	r3, r0, #1
 8011394:	440a      	add	r2, r1
 8011396:	4291      	cmp	r1, r2
 8011398:	d100      	bne.n	801139c <memcpy+0xc>
 801139a:	bd10      	pop	{r4, pc}
 801139c:	f811 4b01 	ldrb.w	r4, [r1], #1
 80113a0:	f803 4f01 	strb.w	r4, [r3, #1]!
 80113a4:	e7f7      	b.n	8011396 <memcpy+0x6>

080113a6 <memset>:
 80113a6:	4402      	add	r2, r0
 80113a8:	4603      	mov	r3, r0
 80113aa:	4293      	cmp	r3, r2
 80113ac:	d100      	bne.n	80113b0 <memset+0xa>
 80113ae:	4770      	bx	lr
 80113b0:	f803 1b01 	strb.w	r1, [r3], #1
 80113b4:	e7f9      	b.n	80113aa <memset+0x4>
	...

080113b8 <_free_r>:
 80113b8:	b538      	push	{r3, r4, r5, lr}
 80113ba:	4605      	mov	r5, r0
 80113bc:	2900      	cmp	r1, #0
 80113be:	d045      	beq.n	801144c <_free_r+0x94>
 80113c0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80113c4:	1f0c      	subs	r4, r1, #4
 80113c6:	2b00      	cmp	r3, #0
 80113c8:	bfb8      	it	lt
 80113ca:	18e4      	addlt	r4, r4, r3
 80113cc:	f000 f9c2 	bl	8011754 <__malloc_lock>
 80113d0:	4a1f      	ldr	r2, [pc, #124]	; (8011450 <_free_r+0x98>)
 80113d2:	6813      	ldr	r3, [r2, #0]
 80113d4:	4610      	mov	r0, r2
 80113d6:	b933      	cbnz	r3, 80113e6 <_free_r+0x2e>
 80113d8:	6063      	str	r3, [r4, #4]
 80113da:	6014      	str	r4, [r2, #0]
 80113dc:	4628      	mov	r0, r5
 80113de:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80113e2:	f000 b9b8 	b.w	8011756 <__malloc_unlock>
 80113e6:	42a3      	cmp	r3, r4
 80113e8:	d90c      	bls.n	8011404 <_free_r+0x4c>
 80113ea:	6821      	ldr	r1, [r4, #0]
 80113ec:	1862      	adds	r2, r4, r1
 80113ee:	4293      	cmp	r3, r2
 80113f0:	bf04      	itt	eq
 80113f2:	681a      	ldreq	r2, [r3, #0]
 80113f4:	685b      	ldreq	r3, [r3, #4]
 80113f6:	6063      	str	r3, [r4, #4]
 80113f8:	bf04      	itt	eq
 80113fa:	1852      	addeq	r2, r2, r1
 80113fc:	6022      	streq	r2, [r4, #0]
 80113fe:	6004      	str	r4, [r0, #0]
 8011400:	e7ec      	b.n	80113dc <_free_r+0x24>
 8011402:	4613      	mov	r3, r2
 8011404:	685a      	ldr	r2, [r3, #4]
 8011406:	b10a      	cbz	r2, 801140c <_free_r+0x54>
 8011408:	42a2      	cmp	r2, r4
 801140a:	d9fa      	bls.n	8011402 <_free_r+0x4a>
 801140c:	6819      	ldr	r1, [r3, #0]
 801140e:	1858      	adds	r0, r3, r1
 8011410:	42a0      	cmp	r0, r4
 8011412:	d10b      	bne.n	801142c <_free_r+0x74>
 8011414:	6820      	ldr	r0, [r4, #0]
 8011416:	4401      	add	r1, r0
 8011418:	1858      	adds	r0, r3, r1
 801141a:	4282      	cmp	r2, r0
 801141c:	6019      	str	r1, [r3, #0]
 801141e:	d1dd      	bne.n	80113dc <_free_r+0x24>
 8011420:	6810      	ldr	r0, [r2, #0]
 8011422:	6852      	ldr	r2, [r2, #4]
 8011424:	605a      	str	r2, [r3, #4]
 8011426:	4401      	add	r1, r0
 8011428:	6019      	str	r1, [r3, #0]
 801142a:	e7d7      	b.n	80113dc <_free_r+0x24>
 801142c:	d902      	bls.n	8011434 <_free_r+0x7c>
 801142e:	230c      	movs	r3, #12
 8011430:	602b      	str	r3, [r5, #0]
 8011432:	e7d3      	b.n	80113dc <_free_r+0x24>
 8011434:	6820      	ldr	r0, [r4, #0]
 8011436:	1821      	adds	r1, r4, r0
 8011438:	428a      	cmp	r2, r1
 801143a:	bf04      	itt	eq
 801143c:	6811      	ldreq	r1, [r2, #0]
 801143e:	6852      	ldreq	r2, [r2, #4]
 8011440:	6062      	str	r2, [r4, #4]
 8011442:	bf04      	itt	eq
 8011444:	1809      	addeq	r1, r1, r0
 8011446:	6021      	streq	r1, [r4, #0]
 8011448:	605c      	str	r4, [r3, #4]
 801144a:	e7c7      	b.n	80113dc <_free_r+0x24>
 801144c:	bd38      	pop	{r3, r4, r5, pc}
 801144e:	bf00      	nop
 8011450:	24000200 	.word	0x24000200

08011454 <_malloc_r>:
 8011454:	b570      	push	{r4, r5, r6, lr}
 8011456:	1ccd      	adds	r5, r1, #3
 8011458:	f025 0503 	bic.w	r5, r5, #3
 801145c:	3508      	adds	r5, #8
 801145e:	2d0c      	cmp	r5, #12
 8011460:	bf38      	it	cc
 8011462:	250c      	movcc	r5, #12
 8011464:	2d00      	cmp	r5, #0
 8011466:	4606      	mov	r6, r0
 8011468:	db01      	blt.n	801146e <_malloc_r+0x1a>
 801146a:	42a9      	cmp	r1, r5
 801146c:	d903      	bls.n	8011476 <_malloc_r+0x22>
 801146e:	230c      	movs	r3, #12
 8011470:	6033      	str	r3, [r6, #0]
 8011472:	2000      	movs	r0, #0
 8011474:	bd70      	pop	{r4, r5, r6, pc}
 8011476:	f000 f96d 	bl	8011754 <__malloc_lock>
 801147a:	4a21      	ldr	r2, [pc, #132]	; (8011500 <_malloc_r+0xac>)
 801147c:	6814      	ldr	r4, [r2, #0]
 801147e:	4621      	mov	r1, r4
 8011480:	b991      	cbnz	r1, 80114a8 <_malloc_r+0x54>
 8011482:	4c20      	ldr	r4, [pc, #128]	; (8011504 <_malloc_r+0xb0>)
 8011484:	6823      	ldr	r3, [r4, #0]
 8011486:	b91b      	cbnz	r3, 8011490 <_malloc_r+0x3c>
 8011488:	4630      	mov	r0, r6
 801148a:	f000 f855 	bl	8011538 <_sbrk_r>
 801148e:	6020      	str	r0, [r4, #0]
 8011490:	4629      	mov	r1, r5
 8011492:	4630      	mov	r0, r6
 8011494:	f000 f850 	bl	8011538 <_sbrk_r>
 8011498:	1c43      	adds	r3, r0, #1
 801149a:	d124      	bne.n	80114e6 <_malloc_r+0x92>
 801149c:	230c      	movs	r3, #12
 801149e:	6033      	str	r3, [r6, #0]
 80114a0:	4630      	mov	r0, r6
 80114a2:	f000 f958 	bl	8011756 <__malloc_unlock>
 80114a6:	e7e4      	b.n	8011472 <_malloc_r+0x1e>
 80114a8:	680b      	ldr	r3, [r1, #0]
 80114aa:	1b5b      	subs	r3, r3, r5
 80114ac:	d418      	bmi.n	80114e0 <_malloc_r+0x8c>
 80114ae:	2b0b      	cmp	r3, #11
 80114b0:	d90f      	bls.n	80114d2 <_malloc_r+0x7e>
 80114b2:	600b      	str	r3, [r1, #0]
 80114b4:	50cd      	str	r5, [r1, r3]
 80114b6:	18cc      	adds	r4, r1, r3
 80114b8:	4630      	mov	r0, r6
 80114ba:	f000 f94c 	bl	8011756 <__malloc_unlock>
 80114be:	f104 000b 	add.w	r0, r4, #11
 80114c2:	1d23      	adds	r3, r4, #4
 80114c4:	f020 0007 	bic.w	r0, r0, #7
 80114c8:	1ac3      	subs	r3, r0, r3
 80114ca:	d0d3      	beq.n	8011474 <_malloc_r+0x20>
 80114cc:	425a      	negs	r2, r3
 80114ce:	50e2      	str	r2, [r4, r3]
 80114d0:	e7d0      	b.n	8011474 <_malloc_r+0x20>
 80114d2:	428c      	cmp	r4, r1
 80114d4:	684b      	ldr	r3, [r1, #4]
 80114d6:	bf16      	itet	ne
 80114d8:	6063      	strne	r3, [r4, #4]
 80114da:	6013      	streq	r3, [r2, #0]
 80114dc:	460c      	movne	r4, r1
 80114de:	e7eb      	b.n	80114b8 <_malloc_r+0x64>
 80114e0:	460c      	mov	r4, r1
 80114e2:	6849      	ldr	r1, [r1, #4]
 80114e4:	e7cc      	b.n	8011480 <_malloc_r+0x2c>
 80114e6:	1cc4      	adds	r4, r0, #3
 80114e8:	f024 0403 	bic.w	r4, r4, #3
 80114ec:	42a0      	cmp	r0, r4
 80114ee:	d005      	beq.n	80114fc <_malloc_r+0xa8>
 80114f0:	1a21      	subs	r1, r4, r0
 80114f2:	4630      	mov	r0, r6
 80114f4:	f000 f820 	bl	8011538 <_sbrk_r>
 80114f8:	3001      	adds	r0, #1
 80114fa:	d0cf      	beq.n	801149c <_malloc_r+0x48>
 80114fc:	6025      	str	r5, [r4, #0]
 80114fe:	e7db      	b.n	80114b8 <_malloc_r+0x64>
 8011500:	24000200 	.word	0x24000200
 8011504:	24000204 	.word	0x24000204

08011508 <iprintf>:
 8011508:	b40f      	push	{r0, r1, r2, r3}
 801150a:	4b0a      	ldr	r3, [pc, #40]	; (8011534 <iprintf+0x2c>)
 801150c:	b513      	push	{r0, r1, r4, lr}
 801150e:	681c      	ldr	r4, [r3, #0]
 8011510:	b124      	cbz	r4, 801151c <iprintf+0x14>
 8011512:	69a3      	ldr	r3, [r4, #24]
 8011514:	b913      	cbnz	r3, 801151c <iprintf+0x14>
 8011516:	4620      	mov	r0, r4
 8011518:	f000 f892 	bl	8011640 <__sinit>
 801151c:	ab05      	add	r3, sp, #20
 801151e:	9a04      	ldr	r2, [sp, #16]
 8011520:	68a1      	ldr	r1, [r4, #8]
 8011522:	9301      	str	r3, [sp, #4]
 8011524:	4620      	mov	r0, r4
 8011526:	f000 fa93 	bl	8011a50 <_vfiprintf_r>
 801152a:	b002      	add	sp, #8
 801152c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8011530:	b004      	add	sp, #16
 8011532:	4770      	bx	lr
 8011534:	24000168 	.word	0x24000168

08011538 <_sbrk_r>:
 8011538:	b538      	push	{r3, r4, r5, lr}
 801153a:	4c06      	ldr	r4, [pc, #24]	; (8011554 <_sbrk_r+0x1c>)
 801153c:	2300      	movs	r3, #0
 801153e:	4605      	mov	r5, r0
 8011540:	4608      	mov	r0, r1
 8011542:	6023      	str	r3, [r4, #0]
 8011544:	f7f0 f8ca 	bl	80016dc <_sbrk>
 8011548:	1c43      	adds	r3, r0, #1
 801154a:	d102      	bne.n	8011552 <_sbrk_r+0x1a>
 801154c:	6823      	ldr	r3, [r4, #0]
 801154e:	b103      	cbz	r3, 8011552 <_sbrk_r+0x1a>
 8011550:	602b      	str	r3, [r5, #0]
 8011552:	bd38      	pop	{r3, r4, r5, pc}
 8011554:	2400136c 	.word	0x2400136c

08011558 <sniprintf>:
 8011558:	b40c      	push	{r2, r3}
 801155a:	b530      	push	{r4, r5, lr}
 801155c:	4b17      	ldr	r3, [pc, #92]	; (80115bc <sniprintf+0x64>)
 801155e:	1e0c      	subs	r4, r1, #0
 8011560:	b09d      	sub	sp, #116	; 0x74
 8011562:	681d      	ldr	r5, [r3, #0]
 8011564:	da08      	bge.n	8011578 <sniprintf+0x20>
 8011566:	238b      	movs	r3, #139	; 0x8b
 8011568:	602b      	str	r3, [r5, #0]
 801156a:	f04f 30ff 	mov.w	r0, #4294967295
 801156e:	b01d      	add	sp, #116	; 0x74
 8011570:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8011574:	b002      	add	sp, #8
 8011576:	4770      	bx	lr
 8011578:	f44f 7302 	mov.w	r3, #520	; 0x208
 801157c:	f8ad 3014 	strh.w	r3, [sp, #20]
 8011580:	bf14      	ite	ne
 8011582:	f104 33ff 	addne.w	r3, r4, #4294967295
 8011586:	4623      	moveq	r3, r4
 8011588:	9304      	str	r3, [sp, #16]
 801158a:	9307      	str	r3, [sp, #28]
 801158c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8011590:	9002      	str	r0, [sp, #8]
 8011592:	9006      	str	r0, [sp, #24]
 8011594:	f8ad 3016 	strh.w	r3, [sp, #22]
 8011598:	9a20      	ldr	r2, [sp, #128]	; 0x80
 801159a:	ab21      	add	r3, sp, #132	; 0x84
 801159c:	a902      	add	r1, sp, #8
 801159e:	4628      	mov	r0, r5
 80115a0:	9301      	str	r3, [sp, #4]
 80115a2:	f000 f933 	bl	801180c <_svfiprintf_r>
 80115a6:	1c43      	adds	r3, r0, #1
 80115a8:	bfbc      	itt	lt
 80115aa:	238b      	movlt	r3, #139	; 0x8b
 80115ac:	602b      	strlt	r3, [r5, #0]
 80115ae:	2c00      	cmp	r4, #0
 80115b0:	d0dd      	beq.n	801156e <sniprintf+0x16>
 80115b2:	9b02      	ldr	r3, [sp, #8]
 80115b4:	2200      	movs	r2, #0
 80115b6:	701a      	strb	r2, [r3, #0]
 80115b8:	e7d9      	b.n	801156e <sniprintf+0x16>
 80115ba:	bf00      	nop
 80115bc:	24000168 	.word	0x24000168

080115c0 <std>:
 80115c0:	2300      	movs	r3, #0
 80115c2:	b510      	push	{r4, lr}
 80115c4:	4604      	mov	r4, r0
 80115c6:	e9c0 3300 	strd	r3, r3, [r0]
 80115ca:	6083      	str	r3, [r0, #8]
 80115cc:	8181      	strh	r1, [r0, #12]
 80115ce:	6643      	str	r3, [r0, #100]	; 0x64
 80115d0:	81c2      	strh	r2, [r0, #14]
 80115d2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80115d6:	6183      	str	r3, [r0, #24]
 80115d8:	4619      	mov	r1, r3
 80115da:	2208      	movs	r2, #8
 80115dc:	305c      	adds	r0, #92	; 0x5c
 80115de:	f7ff fee2 	bl	80113a6 <memset>
 80115e2:	4b05      	ldr	r3, [pc, #20]	; (80115f8 <std+0x38>)
 80115e4:	6263      	str	r3, [r4, #36]	; 0x24
 80115e6:	4b05      	ldr	r3, [pc, #20]	; (80115fc <std+0x3c>)
 80115e8:	62a3      	str	r3, [r4, #40]	; 0x28
 80115ea:	4b05      	ldr	r3, [pc, #20]	; (8011600 <std+0x40>)
 80115ec:	62e3      	str	r3, [r4, #44]	; 0x2c
 80115ee:	4b05      	ldr	r3, [pc, #20]	; (8011604 <std+0x44>)
 80115f0:	6224      	str	r4, [r4, #32]
 80115f2:	6323      	str	r3, [r4, #48]	; 0x30
 80115f4:	bd10      	pop	{r4, pc}
 80115f6:	bf00      	nop
 80115f8:	08011f8d 	.word	0x08011f8d
 80115fc:	08011faf 	.word	0x08011faf
 8011600:	08011fe7 	.word	0x08011fe7
 8011604:	0801200b 	.word	0x0801200b

08011608 <_cleanup_r>:
 8011608:	4901      	ldr	r1, [pc, #4]	; (8011610 <_cleanup_r+0x8>)
 801160a:	f000 b885 	b.w	8011718 <_fwalk_reent>
 801160e:	bf00      	nop
 8011610:	080122e5 	.word	0x080122e5

08011614 <__sfmoreglue>:
 8011614:	b570      	push	{r4, r5, r6, lr}
 8011616:	1e4a      	subs	r2, r1, #1
 8011618:	2568      	movs	r5, #104	; 0x68
 801161a:	4355      	muls	r5, r2
 801161c:	460e      	mov	r6, r1
 801161e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8011622:	f7ff ff17 	bl	8011454 <_malloc_r>
 8011626:	4604      	mov	r4, r0
 8011628:	b140      	cbz	r0, 801163c <__sfmoreglue+0x28>
 801162a:	2100      	movs	r1, #0
 801162c:	e9c0 1600 	strd	r1, r6, [r0]
 8011630:	300c      	adds	r0, #12
 8011632:	60a0      	str	r0, [r4, #8]
 8011634:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8011638:	f7ff feb5 	bl	80113a6 <memset>
 801163c:	4620      	mov	r0, r4
 801163e:	bd70      	pop	{r4, r5, r6, pc}

08011640 <__sinit>:
 8011640:	6983      	ldr	r3, [r0, #24]
 8011642:	b510      	push	{r4, lr}
 8011644:	4604      	mov	r4, r0
 8011646:	bb33      	cbnz	r3, 8011696 <__sinit+0x56>
 8011648:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 801164c:	6503      	str	r3, [r0, #80]	; 0x50
 801164e:	4b12      	ldr	r3, [pc, #72]	; (8011698 <__sinit+0x58>)
 8011650:	4a12      	ldr	r2, [pc, #72]	; (801169c <__sinit+0x5c>)
 8011652:	681b      	ldr	r3, [r3, #0]
 8011654:	6282      	str	r2, [r0, #40]	; 0x28
 8011656:	4298      	cmp	r0, r3
 8011658:	bf04      	itt	eq
 801165a:	2301      	moveq	r3, #1
 801165c:	6183      	streq	r3, [r0, #24]
 801165e:	f000 f81f 	bl	80116a0 <__sfp>
 8011662:	6060      	str	r0, [r4, #4]
 8011664:	4620      	mov	r0, r4
 8011666:	f000 f81b 	bl	80116a0 <__sfp>
 801166a:	60a0      	str	r0, [r4, #8]
 801166c:	4620      	mov	r0, r4
 801166e:	f000 f817 	bl	80116a0 <__sfp>
 8011672:	2200      	movs	r2, #0
 8011674:	60e0      	str	r0, [r4, #12]
 8011676:	2104      	movs	r1, #4
 8011678:	6860      	ldr	r0, [r4, #4]
 801167a:	f7ff ffa1 	bl	80115c0 <std>
 801167e:	2201      	movs	r2, #1
 8011680:	2109      	movs	r1, #9
 8011682:	68a0      	ldr	r0, [r4, #8]
 8011684:	f7ff ff9c 	bl	80115c0 <std>
 8011688:	2202      	movs	r2, #2
 801168a:	2112      	movs	r1, #18
 801168c:	68e0      	ldr	r0, [r4, #12]
 801168e:	f7ff ff97 	bl	80115c0 <std>
 8011692:	2301      	movs	r3, #1
 8011694:	61a3      	str	r3, [r4, #24]
 8011696:	bd10      	pop	{r4, pc}
 8011698:	080126cc 	.word	0x080126cc
 801169c:	08011609 	.word	0x08011609

080116a0 <__sfp>:
 80116a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80116a2:	4b1b      	ldr	r3, [pc, #108]	; (8011710 <__sfp+0x70>)
 80116a4:	681e      	ldr	r6, [r3, #0]
 80116a6:	69b3      	ldr	r3, [r6, #24]
 80116a8:	4607      	mov	r7, r0
 80116aa:	b913      	cbnz	r3, 80116b2 <__sfp+0x12>
 80116ac:	4630      	mov	r0, r6
 80116ae:	f7ff ffc7 	bl	8011640 <__sinit>
 80116b2:	3648      	adds	r6, #72	; 0x48
 80116b4:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80116b8:	3b01      	subs	r3, #1
 80116ba:	d503      	bpl.n	80116c4 <__sfp+0x24>
 80116bc:	6833      	ldr	r3, [r6, #0]
 80116be:	b133      	cbz	r3, 80116ce <__sfp+0x2e>
 80116c0:	6836      	ldr	r6, [r6, #0]
 80116c2:	e7f7      	b.n	80116b4 <__sfp+0x14>
 80116c4:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80116c8:	b16d      	cbz	r5, 80116e6 <__sfp+0x46>
 80116ca:	3468      	adds	r4, #104	; 0x68
 80116cc:	e7f4      	b.n	80116b8 <__sfp+0x18>
 80116ce:	2104      	movs	r1, #4
 80116d0:	4638      	mov	r0, r7
 80116d2:	f7ff ff9f 	bl	8011614 <__sfmoreglue>
 80116d6:	6030      	str	r0, [r6, #0]
 80116d8:	2800      	cmp	r0, #0
 80116da:	d1f1      	bne.n	80116c0 <__sfp+0x20>
 80116dc:	230c      	movs	r3, #12
 80116de:	603b      	str	r3, [r7, #0]
 80116e0:	4604      	mov	r4, r0
 80116e2:	4620      	mov	r0, r4
 80116e4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80116e6:	4b0b      	ldr	r3, [pc, #44]	; (8011714 <__sfp+0x74>)
 80116e8:	6665      	str	r5, [r4, #100]	; 0x64
 80116ea:	e9c4 5500 	strd	r5, r5, [r4]
 80116ee:	60a5      	str	r5, [r4, #8]
 80116f0:	e9c4 3503 	strd	r3, r5, [r4, #12]
 80116f4:	e9c4 5505 	strd	r5, r5, [r4, #20]
 80116f8:	2208      	movs	r2, #8
 80116fa:	4629      	mov	r1, r5
 80116fc:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8011700:	f7ff fe51 	bl	80113a6 <memset>
 8011704:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8011708:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 801170c:	e7e9      	b.n	80116e2 <__sfp+0x42>
 801170e:	bf00      	nop
 8011710:	080126cc 	.word	0x080126cc
 8011714:	ffff0001 	.word	0xffff0001

08011718 <_fwalk_reent>:
 8011718:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801171c:	4680      	mov	r8, r0
 801171e:	4689      	mov	r9, r1
 8011720:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8011724:	2600      	movs	r6, #0
 8011726:	b914      	cbnz	r4, 801172e <_fwalk_reent+0x16>
 8011728:	4630      	mov	r0, r6
 801172a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801172e:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 8011732:	3f01      	subs	r7, #1
 8011734:	d501      	bpl.n	801173a <_fwalk_reent+0x22>
 8011736:	6824      	ldr	r4, [r4, #0]
 8011738:	e7f5      	b.n	8011726 <_fwalk_reent+0xe>
 801173a:	89ab      	ldrh	r3, [r5, #12]
 801173c:	2b01      	cmp	r3, #1
 801173e:	d907      	bls.n	8011750 <_fwalk_reent+0x38>
 8011740:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8011744:	3301      	adds	r3, #1
 8011746:	d003      	beq.n	8011750 <_fwalk_reent+0x38>
 8011748:	4629      	mov	r1, r5
 801174a:	4640      	mov	r0, r8
 801174c:	47c8      	blx	r9
 801174e:	4306      	orrs	r6, r0
 8011750:	3568      	adds	r5, #104	; 0x68
 8011752:	e7ee      	b.n	8011732 <_fwalk_reent+0x1a>

08011754 <__malloc_lock>:
 8011754:	4770      	bx	lr

08011756 <__malloc_unlock>:
 8011756:	4770      	bx	lr

08011758 <__ssputs_r>:
 8011758:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801175c:	688e      	ldr	r6, [r1, #8]
 801175e:	429e      	cmp	r6, r3
 8011760:	4682      	mov	sl, r0
 8011762:	460c      	mov	r4, r1
 8011764:	4690      	mov	r8, r2
 8011766:	4699      	mov	r9, r3
 8011768:	d837      	bhi.n	80117da <__ssputs_r+0x82>
 801176a:	898a      	ldrh	r2, [r1, #12]
 801176c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8011770:	d031      	beq.n	80117d6 <__ssputs_r+0x7e>
 8011772:	6825      	ldr	r5, [r4, #0]
 8011774:	6909      	ldr	r1, [r1, #16]
 8011776:	1a6f      	subs	r7, r5, r1
 8011778:	6965      	ldr	r5, [r4, #20]
 801177a:	2302      	movs	r3, #2
 801177c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8011780:	fb95 f5f3 	sdiv	r5, r5, r3
 8011784:	f109 0301 	add.w	r3, r9, #1
 8011788:	443b      	add	r3, r7
 801178a:	429d      	cmp	r5, r3
 801178c:	bf38      	it	cc
 801178e:	461d      	movcc	r5, r3
 8011790:	0553      	lsls	r3, r2, #21
 8011792:	d530      	bpl.n	80117f6 <__ssputs_r+0x9e>
 8011794:	4629      	mov	r1, r5
 8011796:	f7ff fe5d 	bl	8011454 <_malloc_r>
 801179a:	4606      	mov	r6, r0
 801179c:	b950      	cbnz	r0, 80117b4 <__ssputs_r+0x5c>
 801179e:	230c      	movs	r3, #12
 80117a0:	f8ca 3000 	str.w	r3, [sl]
 80117a4:	89a3      	ldrh	r3, [r4, #12]
 80117a6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80117aa:	81a3      	strh	r3, [r4, #12]
 80117ac:	f04f 30ff 	mov.w	r0, #4294967295
 80117b0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80117b4:	463a      	mov	r2, r7
 80117b6:	6921      	ldr	r1, [r4, #16]
 80117b8:	f7ff fdea 	bl	8011390 <memcpy>
 80117bc:	89a3      	ldrh	r3, [r4, #12]
 80117be:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80117c2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80117c6:	81a3      	strh	r3, [r4, #12]
 80117c8:	6126      	str	r6, [r4, #16]
 80117ca:	6165      	str	r5, [r4, #20]
 80117cc:	443e      	add	r6, r7
 80117ce:	1bed      	subs	r5, r5, r7
 80117d0:	6026      	str	r6, [r4, #0]
 80117d2:	60a5      	str	r5, [r4, #8]
 80117d4:	464e      	mov	r6, r9
 80117d6:	454e      	cmp	r6, r9
 80117d8:	d900      	bls.n	80117dc <__ssputs_r+0x84>
 80117da:	464e      	mov	r6, r9
 80117dc:	4632      	mov	r2, r6
 80117de:	4641      	mov	r1, r8
 80117e0:	6820      	ldr	r0, [r4, #0]
 80117e2:	f000 fe1f 	bl	8012424 <memmove>
 80117e6:	68a3      	ldr	r3, [r4, #8]
 80117e8:	1b9b      	subs	r3, r3, r6
 80117ea:	60a3      	str	r3, [r4, #8]
 80117ec:	6823      	ldr	r3, [r4, #0]
 80117ee:	441e      	add	r6, r3
 80117f0:	6026      	str	r6, [r4, #0]
 80117f2:	2000      	movs	r0, #0
 80117f4:	e7dc      	b.n	80117b0 <__ssputs_r+0x58>
 80117f6:	462a      	mov	r2, r5
 80117f8:	f000 fe2d 	bl	8012456 <_realloc_r>
 80117fc:	4606      	mov	r6, r0
 80117fe:	2800      	cmp	r0, #0
 8011800:	d1e2      	bne.n	80117c8 <__ssputs_r+0x70>
 8011802:	6921      	ldr	r1, [r4, #16]
 8011804:	4650      	mov	r0, sl
 8011806:	f7ff fdd7 	bl	80113b8 <_free_r>
 801180a:	e7c8      	b.n	801179e <__ssputs_r+0x46>

0801180c <_svfiprintf_r>:
 801180c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011810:	461d      	mov	r5, r3
 8011812:	898b      	ldrh	r3, [r1, #12]
 8011814:	061f      	lsls	r7, r3, #24
 8011816:	b09d      	sub	sp, #116	; 0x74
 8011818:	4680      	mov	r8, r0
 801181a:	460c      	mov	r4, r1
 801181c:	4616      	mov	r6, r2
 801181e:	d50f      	bpl.n	8011840 <_svfiprintf_r+0x34>
 8011820:	690b      	ldr	r3, [r1, #16]
 8011822:	b96b      	cbnz	r3, 8011840 <_svfiprintf_r+0x34>
 8011824:	2140      	movs	r1, #64	; 0x40
 8011826:	f7ff fe15 	bl	8011454 <_malloc_r>
 801182a:	6020      	str	r0, [r4, #0]
 801182c:	6120      	str	r0, [r4, #16]
 801182e:	b928      	cbnz	r0, 801183c <_svfiprintf_r+0x30>
 8011830:	230c      	movs	r3, #12
 8011832:	f8c8 3000 	str.w	r3, [r8]
 8011836:	f04f 30ff 	mov.w	r0, #4294967295
 801183a:	e0c8      	b.n	80119ce <_svfiprintf_r+0x1c2>
 801183c:	2340      	movs	r3, #64	; 0x40
 801183e:	6163      	str	r3, [r4, #20]
 8011840:	2300      	movs	r3, #0
 8011842:	9309      	str	r3, [sp, #36]	; 0x24
 8011844:	2320      	movs	r3, #32
 8011846:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801184a:	2330      	movs	r3, #48	; 0x30
 801184c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8011850:	9503      	str	r5, [sp, #12]
 8011852:	f04f 0b01 	mov.w	fp, #1
 8011856:	4637      	mov	r7, r6
 8011858:	463d      	mov	r5, r7
 801185a:	f815 3b01 	ldrb.w	r3, [r5], #1
 801185e:	b10b      	cbz	r3, 8011864 <_svfiprintf_r+0x58>
 8011860:	2b25      	cmp	r3, #37	; 0x25
 8011862:	d13e      	bne.n	80118e2 <_svfiprintf_r+0xd6>
 8011864:	ebb7 0a06 	subs.w	sl, r7, r6
 8011868:	d00b      	beq.n	8011882 <_svfiprintf_r+0x76>
 801186a:	4653      	mov	r3, sl
 801186c:	4632      	mov	r2, r6
 801186e:	4621      	mov	r1, r4
 8011870:	4640      	mov	r0, r8
 8011872:	f7ff ff71 	bl	8011758 <__ssputs_r>
 8011876:	3001      	adds	r0, #1
 8011878:	f000 80a4 	beq.w	80119c4 <_svfiprintf_r+0x1b8>
 801187c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801187e:	4453      	add	r3, sl
 8011880:	9309      	str	r3, [sp, #36]	; 0x24
 8011882:	783b      	ldrb	r3, [r7, #0]
 8011884:	2b00      	cmp	r3, #0
 8011886:	f000 809d 	beq.w	80119c4 <_svfiprintf_r+0x1b8>
 801188a:	2300      	movs	r3, #0
 801188c:	f04f 32ff 	mov.w	r2, #4294967295
 8011890:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8011894:	9304      	str	r3, [sp, #16]
 8011896:	9307      	str	r3, [sp, #28]
 8011898:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801189c:	931a      	str	r3, [sp, #104]	; 0x68
 801189e:	462f      	mov	r7, r5
 80118a0:	2205      	movs	r2, #5
 80118a2:	f817 1b01 	ldrb.w	r1, [r7], #1
 80118a6:	4850      	ldr	r0, [pc, #320]	; (80119e8 <_svfiprintf_r+0x1dc>)
 80118a8:	f7ee fd22 	bl	80002f0 <memchr>
 80118ac:	9b04      	ldr	r3, [sp, #16]
 80118ae:	b9d0      	cbnz	r0, 80118e6 <_svfiprintf_r+0xda>
 80118b0:	06d9      	lsls	r1, r3, #27
 80118b2:	bf44      	itt	mi
 80118b4:	2220      	movmi	r2, #32
 80118b6:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80118ba:	071a      	lsls	r2, r3, #28
 80118bc:	bf44      	itt	mi
 80118be:	222b      	movmi	r2, #43	; 0x2b
 80118c0:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80118c4:	782a      	ldrb	r2, [r5, #0]
 80118c6:	2a2a      	cmp	r2, #42	; 0x2a
 80118c8:	d015      	beq.n	80118f6 <_svfiprintf_r+0xea>
 80118ca:	9a07      	ldr	r2, [sp, #28]
 80118cc:	462f      	mov	r7, r5
 80118ce:	2000      	movs	r0, #0
 80118d0:	250a      	movs	r5, #10
 80118d2:	4639      	mov	r1, r7
 80118d4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80118d8:	3b30      	subs	r3, #48	; 0x30
 80118da:	2b09      	cmp	r3, #9
 80118dc:	d94d      	bls.n	801197a <_svfiprintf_r+0x16e>
 80118de:	b1b8      	cbz	r0, 8011910 <_svfiprintf_r+0x104>
 80118e0:	e00f      	b.n	8011902 <_svfiprintf_r+0xf6>
 80118e2:	462f      	mov	r7, r5
 80118e4:	e7b8      	b.n	8011858 <_svfiprintf_r+0x4c>
 80118e6:	4a40      	ldr	r2, [pc, #256]	; (80119e8 <_svfiprintf_r+0x1dc>)
 80118e8:	1a80      	subs	r0, r0, r2
 80118ea:	fa0b f000 	lsl.w	r0, fp, r0
 80118ee:	4318      	orrs	r0, r3
 80118f0:	9004      	str	r0, [sp, #16]
 80118f2:	463d      	mov	r5, r7
 80118f4:	e7d3      	b.n	801189e <_svfiprintf_r+0x92>
 80118f6:	9a03      	ldr	r2, [sp, #12]
 80118f8:	1d11      	adds	r1, r2, #4
 80118fa:	6812      	ldr	r2, [r2, #0]
 80118fc:	9103      	str	r1, [sp, #12]
 80118fe:	2a00      	cmp	r2, #0
 8011900:	db01      	blt.n	8011906 <_svfiprintf_r+0xfa>
 8011902:	9207      	str	r2, [sp, #28]
 8011904:	e004      	b.n	8011910 <_svfiprintf_r+0x104>
 8011906:	4252      	negs	r2, r2
 8011908:	f043 0302 	orr.w	r3, r3, #2
 801190c:	9207      	str	r2, [sp, #28]
 801190e:	9304      	str	r3, [sp, #16]
 8011910:	783b      	ldrb	r3, [r7, #0]
 8011912:	2b2e      	cmp	r3, #46	; 0x2e
 8011914:	d10c      	bne.n	8011930 <_svfiprintf_r+0x124>
 8011916:	787b      	ldrb	r3, [r7, #1]
 8011918:	2b2a      	cmp	r3, #42	; 0x2a
 801191a:	d133      	bne.n	8011984 <_svfiprintf_r+0x178>
 801191c:	9b03      	ldr	r3, [sp, #12]
 801191e:	1d1a      	adds	r2, r3, #4
 8011920:	681b      	ldr	r3, [r3, #0]
 8011922:	9203      	str	r2, [sp, #12]
 8011924:	2b00      	cmp	r3, #0
 8011926:	bfb8      	it	lt
 8011928:	f04f 33ff 	movlt.w	r3, #4294967295
 801192c:	3702      	adds	r7, #2
 801192e:	9305      	str	r3, [sp, #20]
 8011930:	4d2e      	ldr	r5, [pc, #184]	; (80119ec <_svfiprintf_r+0x1e0>)
 8011932:	7839      	ldrb	r1, [r7, #0]
 8011934:	2203      	movs	r2, #3
 8011936:	4628      	mov	r0, r5
 8011938:	f7ee fcda 	bl	80002f0 <memchr>
 801193c:	b138      	cbz	r0, 801194e <_svfiprintf_r+0x142>
 801193e:	2340      	movs	r3, #64	; 0x40
 8011940:	1b40      	subs	r0, r0, r5
 8011942:	fa03 f000 	lsl.w	r0, r3, r0
 8011946:	9b04      	ldr	r3, [sp, #16]
 8011948:	4303      	orrs	r3, r0
 801194a:	3701      	adds	r7, #1
 801194c:	9304      	str	r3, [sp, #16]
 801194e:	7839      	ldrb	r1, [r7, #0]
 8011950:	4827      	ldr	r0, [pc, #156]	; (80119f0 <_svfiprintf_r+0x1e4>)
 8011952:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8011956:	2206      	movs	r2, #6
 8011958:	1c7e      	adds	r6, r7, #1
 801195a:	f7ee fcc9 	bl	80002f0 <memchr>
 801195e:	2800      	cmp	r0, #0
 8011960:	d038      	beq.n	80119d4 <_svfiprintf_r+0x1c8>
 8011962:	4b24      	ldr	r3, [pc, #144]	; (80119f4 <_svfiprintf_r+0x1e8>)
 8011964:	bb13      	cbnz	r3, 80119ac <_svfiprintf_r+0x1a0>
 8011966:	9b03      	ldr	r3, [sp, #12]
 8011968:	3307      	adds	r3, #7
 801196a:	f023 0307 	bic.w	r3, r3, #7
 801196e:	3308      	adds	r3, #8
 8011970:	9303      	str	r3, [sp, #12]
 8011972:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011974:	444b      	add	r3, r9
 8011976:	9309      	str	r3, [sp, #36]	; 0x24
 8011978:	e76d      	b.n	8011856 <_svfiprintf_r+0x4a>
 801197a:	fb05 3202 	mla	r2, r5, r2, r3
 801197e:	2001      	movs	r0, #1
 8011980:	460f      	mov	r7, r1
 8011982:	e7a6      	b.n	80118d2 <_svfiprintf_r+0xc6>
 8011984:	2300      	movs	r3, #0
 8011986:	3701      	adds	r7, #1
 8011988:	9305      	str	r3, [sp, #20]
 801198a:	4619      	mov	r1, r3
 801198c:	250a      	movs	r5, #10
 801198e:	4638      	mov	r0, r7
 8011990:	f810 2b01 	ldrb.w	r2, [r0], #1
 8011994:	3a30      	subs	r2, #48	; 0x30
 8011996:	2a09      	cmp	r2, #9
 8011998:	d903      	bls.n	80119a2 <_svfiprintf_r+0x196>
 801199a:	2b00      	cmp	r3, #0
 801199c:	d0c8      	beq.n	8011930 <_svfiprintf_r+0x124>
 801199e:	9105      	str	r1, [sp, #20]
 80119a0:	e7c6      	b.n	8011930 <_svfiprintf_r+0x124>
 80119a2:	fb05 2101 	mla	r1, r5, r1, r2
 80119a6:	2301      	movs	r3, #1
 80119a8:	4607      	mov	r7, r0
 80119aa:	e7f0      	b.n	801198e <_svfiprintf_r+0x182>
 80119ac:	ab03      	add	r3, sp, #12
 80119ae:	9300      	str	r3, [sp, #0]
 80119b0:	4622      	mov	r2, r4
 80119b2:	4b11      	ldr	r3, [pc, #68]	; (80119f8 <_svfiprintf_r+0x1ec>)
 80119b4:	a904      	add	r1, sp, #16
 80119b6:	4640      	mov	r0, r8
 80119b8:	f3af 8000 	nop.w
 80119bc:	f1b0 3fff 	cmp.w	r0, #4294967295
 80119c0:	4681      	mov	r9, r0
 80119c2:	d1d6      	bne.n	8011972 <_svfiprintf_r+0x166>
 80119c4:	89a3      	ldrh	r3, [r4, #12]
 80119c6:	065b      	lsls	r3, r3, #25
 80119c8:	f53f af35 	bmi.w	8011836 <_svfiprintf_r+0x2a>
 80119cc:	9809      	ldr	r0, [sp, #36]	; 0x24
 80119ce:	b01d      	add	sp, #116	; 0x74
 80119d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80119d4:	ab03      	add	r3, sp, #12
 80119d6:	9300      	str	r3, [sp, #0]
 80119d8:	4622      	mov	r2, r4
 80119da:	4b07      	ldr	r3, [pc, #28]	; (80119f8 <_svfiprintf_r+0x1ec>)
 80119dc:	a904      	add	r1, sp, #16
 80119de:	4640      	mov	r0, r8
 80119e0:	f000 f9c2 	bl	8011d68 <_printf_i>
 80119e4:	e7ea      	b.n	80119bc <_svfiprintf_r+0x1b0>
 80119e6:	bf00      	nop
 80119e8:	08012730 	.word	0x08012730
 80119ec:	08012736 	.word	0x08012736
 80119f0:	0801273a 	.word	0x0801273a
 80119f4:	00000000 	.word	0x00000000
 80119f8:	08011759 	.word	0x08011759

080119fc <__sfputc_r>:
 80119fc:	6893      	ldr	r3, [r2, #8]
 80119fe:	3b01      	subs	r3, #1
 8011a00:	2b00      	cmp	r3, #0
 8011a02:	b410      	push	{r4}
 8011a04:	6093      	str	r3, [r2, #8]
 8011a06:	da08      	bge.n	8011a1a <__sfputc_r+0x1e>
 8011a08:	6994      	ldr	r4, [r2, #24]
 8011a0a:	42a3      	cmp	r3, r4
 8011a0c:	db01      	blt.n	8011a12 <__sfputc_r+0x16>
 8011a0e:	290a      	cmp	r1, #10
 8011a10:	d103      	bne.n	8011a1a <__sfputc_r+0x1e>
 8011a12:	f85d 4b04 	ldr.w	r4, [sp], #4
 8011a16:	f000 bafd 	b.w	8012014 <__swbuf_r>
 8011a1a:	6813      	ldr	r3, [r2, #0]
 8011a1c:	1c58      	adds	r0, r3, #1
 8011a1e:	6010      	str	r0, [r2, #0]
 8011a20:	7019      	strb	r1, [r3, #0]
 8011a22:	4608      	mov	r0, r1
 8011a24:	f85d 4b04 	ldr.w	r4, [sp], #4
 8011a28:	4770      	bx	lr

08011a2a <__sfputs_r>:
 8011a2a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011a2c:	4606      	mov	r6, r0
 8011a2e:	460f      	mov	r7, r1
 8011a30:	4614      	mov	r4, r2
 8011a32:	18d5      	adds	r5, r2, r3
 8011a34:	42ac      	cmp	r4, r5
 8011a36:	d101      	bne.n	8011a3c <__sfputs_r+0x12>
 8011a38:	2000      	movs	r0, #0
 8011a3a:	e007      	b.n	8011a4c <__sfputs_r+0x22>
 8011a3c:	463a      	mov	r2, r7
 8011a3e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011a42:	4630      	mov	r0, r6
 8011a44:	f7ff ffda 	bl	80119fc <__sfputc_r>
 8011a48:	1c43      	adds	r3, r0, #1
 8011a4a:	d1f3      	bne.n	8011a34 <__sfputs_r+0xa>
 8011a4c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08011a50 <_vfiprintf_r>:
 8011a50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011a54:	460c      	mov	r4, r1
 8011a56:	b09d      	sub	sp, #116	; 0x74
 8011a58:	4617      	mov	r7, r2
 8011a5a:	461d      	mov	r5, r3
 8011a5c:	4606      	mov	r6, r0
 8011a5e:	b118      	cbz	r0, 8011a68 <_vfiprintf_r+0x18>
 8011a60:	6983      	ldr	r3, [r0, #24]
 8011a62:	b90b      	cbnz	r3, 8011a68 <_vfiprintf_r+0x18>
 8011a64:	f7ff fdec 	bl	8011640 <__sinit>
 8011a68:	4b7c      	ldr	r3, [pc, #496]	; (8011c5c <_vfiprintf_r+0x20c>)
 8011a6a:	429c      	cmp	r4, r3
 8011a6c:	d158      	bne.n	8011b20 <_vfiprintf_r+0xd0>
 8011a6e:	6874      	ldr	r4, [r6, #4]
 8011a70:	89a3      	ldrh	r3, [r4, #12]
 8011a72:	0718      	lsls	r0, r3, #28
 8011a74:	d55e      	bpl.n	8011b34 <_vfiprintf_r+0xe4>
 8011a76:	6923      	ldr	r3, [r4, #16]
 8011a78:	2b00      	cmp	r3, #0
 8011a7a:	d05b      	beq.n	8011b34 <_vfiprintf_r+0xe4>
 8011a7c:	2300      	movs	r3, #0
 8011a7e:	9309      	str	r3, [sp, #36]	; 0x24
 8011a80:	2320      	movs	r3, #32
 8011a82:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8011a86:	2330      	movs	r3, #48	; 0x30
 8011a88:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8011a8c:	9503      	str	r5, [sp, #12]
 8011a8e:	f04f 0b01 	mov.w	fp, #1
 8011a92:	46b8      	mov	r8, r7
 8011a94:	4645      	mov	r5, r8
 8011a96:	f815 3b01 	ldrb.w	r3, [r5], #1
 8011a9a:	b10b      	cbz	r3, 8011aa0 <_vfiprintf_r+0x50>
 8011a9c:	2b25      	cmp	r3, #37	; 0x25
 8011a9e:	d154      	bne.n	8011b4a <_vfiprintf_r+0xfa>
 8011aa0:	ebb8 0a07 	subs.w	sl, r8, r7
 8011aa4:	d00b      	beq.n	8011abe <_vfiprintf_r+0x6e>
 8011aa6:	4653      	mov	r3, sl
 8011aa8:	463a      	mov	r2, r7
 8011aaa:	4621      	mov	r1, r4
 8011aac:	4630      	mov	r0, r6
 8011aae:	f7ff ffbc 	bl	8011a2a <__sfputs_r>
 8011ab2:	3001      	adds	r0, #1
 8011ab4:	f000 80c2 	beq.w	8011c3c <_vfiprintf_r+0x1ec>
 8011ab8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011aba:	4453      	add	r3, sl
 8011abc:	9309      	str	r3, [sp, #36]	; 0x24
 8011abe:	f898 3000 	ldrb.w	r3, [r8]
 8011ac2:	2b00      	cmp	r3, #0
 8011ac4:	f000 80ba 	beq.w	8011c3c <_vfiprintf_r+0x1ec>
 8011ac8:	2300      	movs	r3, #0
 8011aca:	f04f 32ff 	mov.w	r2, #4294967295
 8011ace:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8011ad2:	9304      	str	r3, [sp, #16]
 8011ad4:	9307      	str	r3, [sp, #28]
 8011ad6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8011ada:	931a      	str	r3, [sp, #104]	; 0x68
 8011adc:	46a8      	mov	r8, r5
 8011ade:	2205      	movs	r2, #5
 8011ae0:	f818 1b01 	ldrb.w	r1, [r8], #1
 8011ae4:	485e      	ldr	r0, [pc, #376]	; (8011c60 <_vfiprintf_r+0x210>)
 8011ae6:	f7ee fc03 	bl	80002f0 <memchr>
 8011aea:	9b04      	ldr	r3, [sp, #16]
 8011aec:	bb78      	cbnz	r0, 8011b4e <_vfiprintf_r+0xfe>
 8011aee:	06d9      	lsls	r1, r3, #27
 8011af0:	bf44      	itt	mi
 8011af2:	2220      	movmi	r2, #32
 8011af4:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8011af8:	071a      	lsls	r2, r3, #28
 8011afa:	bf44      	itt	mi
 8011afc:	222b      	movmi	r2, #43	; 0x2b
 8011afe:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8011b02:	782a      	ldrb	r2, [r5, #0]
 8011b04:	2a2a      	cmp	r2, #42	; 0x2a
 8011b06:	d02a      	beq.n	8011b5e <_vfiprintf_r+0x10e>
 8011b08:	9a07      	ldr	r2, [sp, #28]
 8011b0a:	46a8      	mov	r8, r5
 8011b0c:	2000      	movs	r0, #0
 8011b0e:	250a      	movs	r5, #10
 8011b10:	4641      	mov	r1, r8
 8011b12:	f811 3b01 	ldrb.w	r3, [r1], #1
 8011b16:	3b30      	subs	r3, #48	; 0x30
 8011b18:	2b09      	cmp	r3, #9
 8011b1a:	d969      	bls.n	8011bf0 <_vfiprintf_r+0x1a0>
 8011b1c:	b360      	cbz	r0, 8011b78 <_vfiprintf_r+0x128>
 8011b1e:	e024      	b.n	8011b6a <_vfiprintf_r+0x11a>
 8011b20:	4b50      	ldr	r3, [pc, #320]	; (8011c64 <_vfiprintf_r+0x214>)
 8011b22:	429c      	cmp	r4, r3
 8011b24:	d101      	bne.n	8011b2a <_vfiprintf_r+0xda>
 8011b26:	68b4      	ldr	r4, [r6, #8]
 8011b28:	e7a2      	b.n	8011a70 <_vfiprintf_r+0x20>
 8011b2a:	4b4f      	ldr	r3, [pc, #316]	; (8011c68 <_vfiprintf_r+0x218>)
 8011b2c:	429c      	cmp	r4, r3
 8011b2e:	bf08      	it	eq
 8011b30:	68f4      	ldreq	r4, [r6, #12]
 8011b32:	e79d      	b.n	8011a70 <_vfiprintf_r+0x20>
 8011b34:	4621      	mov	r1, r4
 8011b36:	4630      	mov	r0, r6
 8011b38:	f000 fad0 	bl	80120dc <__swsetup_r>
 8011b3c:	2800      	cmp	r0, #0
 8011b3e:	d09d      	beq.n	8011a7c <_vfiprintf_r+0x2c>
 8011b40:	f04f 30ff 	mov.w	r0, #4294967295
 8011b44:	b01d      	add	sp, #116	; 0x74
 8011b46:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011b4a:	46a8      	mov	r8, r5
 8011b4c:	e7a2      	b.n	8011a94 <_vfiprintf_r+0x44>
 8011b4e:	4a44      	ldr	r2, [pc, #272]	; (8011c60 <_vfiprintf_r+0x210>)
 8011b50:	1a80      	subs	r0, r0, r2
 8011b52:	fa0b f000 	lsl.w	r0, fp, r0
 8011b56:	4318      	orrs	r0, r3
 8011b58:	9004      	str	r0, [sp, #16]
 8011b5a:	4645      	mov	r5, r8
 8011b5c:	e7be      	b.n	8011adc <_vfiprintf_r+0x8c>
 8011b5e:	9a03      	ldr	r2, [sp, #12]
 8011b60:	1d11      	adds	r1, r2, #4
 8011b62:	6812      	ldr	r2, [r2, #0]
 8011b64:	9103      	str	r1, [sp, #12]
 8011b66:	2a00      	cmp	r2, #0
 8011b68:	db01      	blt.n	8011b6e <_vfiprintf_r+0x11e>
 8011b6a:	9207      	str	r2, [sp, #28]
 8011b6c:	e004      	b.n	8011b78 <_vfiprintf_r+0x128>
 8011b6e:	4252      	negs	r2, r2
 8011b70:	f043 0302 	orr.w	r3, r3, #2
 8011b74:	9207      	str	r2, [sp, #28]
 8011b76:	9304      	str	r3, [sp, #16]
 8011b78:	f898 3000 	ldrb.w	r3, [r8]
 8011b7c:	2b2e      	cmp	r3, #46	; 0x2e
 8011b7e:	d10e      	bne.n	8011b9e <_vfiprintf_r+0x14e>
 8011b80:	f898 3001 	ldrb.w	r3, [r8, #1]
 8011b84:	2b2a      	cmp	r3, #42	; 0x2a
 8011b86:	d138      	bne.n	8011bfa <_vfiprintf_r+0x1aa>
 8011b88:	9b03      	ldr	r3, [sp, #12]
 8011b8a:	1d1a      	adds	r2, r3, #4
 8011b8c:	681b      	ldr	r3, [r3, #0]
 8011b8e:	9203      	str	r2, [sp, #12]
 8011b90:	2b00      	cmp	r3, #0
 8011b92:	bfb8      	it	lt
 8011b94:	f04f 33ff 	movlt.w	r3, #4294967295
 8011b98:	f108 0802 	add.w	r8, r8, #2
 8011b9c:	9305      	str	r3, [sp, #20]
 8011b9e:	4d33      	ldr	r5, [pc, #204]	; (8011c6c <_vfiprintf_r+0x21c>)
 8011ba0:	f898 1000 	ldrb.w	r1, [r8]
 8011ba4:	2203      	movs	r2, #3
 8011ba6:	4628      	mov	r0, r5
 8011ba8:	f7ee fba2 	bl	80002f0 <memchr>
 8011bac:	b140      	cbz	r0, 8011bc0 <_vfiprintf_r+0x170>
 8011bae:	2340      	movs	r3, #64	; 0x40
 8011bb0:	1b40      	subs	r0, r0, r5
 8011bb2:	fa03 f000 	lsl.w	r0, r3, r0
 8011bb6:	9b04      	ldr	r3, [sp, #16]
 8011bb8:	4303      	orrs	r3, r0
 8011bba:	f108 0801 	add.w	r8, r8, #1
 8011bbe:	9304      	str	r3, [sp, #16]
 8011bc0:	f898 1000 	ldrb.w	r1, [r8]
 8011bc4:	482a      	ldr	r0, [pc, #168]	; (8011c70 <_vfiprintf_r+0x220>)
 8011bc6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8011bca:	2206      	movs	r2, #6
 8011bcc:	f108 0701 	add.w	r7, r8, #1
 8011bd0:	f7ee fb8e 	bl	80002f0 <memchr>
 8011bd4:	2800      	cmp	r0, #0
 8011bd6:	d037      	beq.n	8011c48 <_vfiprintf_r+0x1f8>
 8011bd8:	4b26      	ldr	r3, [pc, #152]	; (8011c74 <_vfiprintf_r+0x224>)
 8011bda:	bb1b      	cbnz	r3, 8011c24 <_vfiprintf_r+0x1d4>
 8011bdc:	9b03      	ldr	r3, [sp, #12]
 8011bde:	3307      	adds	r3, #7
 8011be0:	f023 0307 	bic.w	r3, r3, #7
 8011be4:	3308      	adds	r3, #8
 8011be6:	9303      	str	r3, [sp, #12]
 8011be8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011bea:	444b      	add	r3, r9
 8011bec:	9309      	str	r3, [sp, #36]	; 0x24
 8011bee:	e750      	b.n	8011a92 <_vfiprintf_r+0x42>
 8011bf0:	fb05 3202 	mla	r2, r5, r2, r3
 8011bf4:	2001      	movs	r0, #1
 8011bf6:	4688      	mov	r8, r1
 8011bf8:	e78a      	b.n	8011b10 <_vfiprintf_r+0xc0>
 8011bfa:	2300      	movs	r3, #0
 8011bfc:	f108 0801 	add.w	r8, r8, #1
 8011c00:	9305      	str	r3, [sp, #20]
 8011c02:	4619      	mov	r1, r3
 8011c04:	250a      	movs	r5, #10
 8011c06:	4640      	mov	r0, r8
 8011c08:	f810 2b01 	ldrb.w	r2, [r0], #1
 8011c0c:	3a30      	subs	r2, #48	; 0x30
 8011c0e:	2a09      	cmp	r2, #9
 8011c10:	d903      	bls.n	8011c1a <_vfiprintf_r+0x1ca>
 8011c12:	2b00      	cmp	r3, #0
 8011c14:	d0c3      	beq.n	8011b9e <_vfiprintf_r+0x14e>
 8011c16:	9105      	str	r1, [sp, #20]
 8011c18:	e7c1      	b.n	8011b9e <_vfiprintf_r+0x14e>
 8011c1a:	fb05 2101 	mla	r1, r5, r1, r2
 8011c1e:	2301      	movs	r3, #1
 8011c20:	4680      	mov	r8, r0
 8011c22:	e7f0      	b.n	8011c06 <_vfiprintf_r+0x1b6>
 8011c24:	ab03      	add	r3, sp, #12
 8011c26:	9300      	str	r3, [sp, #0]
 8011c28:	4622      	mov	r2, r4
 8011c2a:	4b13      	ldr	r3, [pc, #76]	; (8011c78 <_vfiprintf_r+0x228>)
 8011c2c:	a904      	add	r1, sp, #16
 8011c2e:	4630      	mov	r0, r6
 8011c30:	f3af 8000 	nop.w
 8011c34:	f1b0 3fff 	cmp.w	r0, #4294967295
 8011c38:	4681      	mov	r9, r0
 8011c3a:	d1d5      	bne.n	8011be8 <_vfiprintf_r+0x198>
 8011c3c:	89a3      	ldrh	r3, [r4, #12]
 8011c3e:	065b      	lsls	r3, r3, #25
 8011c40:	f53f af7e 	bmi.w	8011b40 <_vfiprintf_r+0xf0>
 8011c44:	9809      	ldr	r0, [sp, #36]	; 0x24
 8011c46:	e77d      	b.n	8011b44 <_vfiprintf_r+0xf4>
 8011c48:	ab03      	add	r3, sp, #12
 8011c4a:	9300      	str	r3, [sp, #0]
 8011c4c:	4622      	mov	r2, r4
 8011c4e:	4b0a      	ldr	r3, [pc, #40]	; (8011c78 <_vfiprintf_r+0x228>)
 8011c50:	a904      	add	r1, sp, #16
 8011c52:	4630      	mov	r0, r6
 8011c54:	f000 f888 	bl	8011d68 <_printf_i>
 8011c58:	e7ec      	b.n	8011c34 <_vfiprintf_r+0x1e4>
 8011c5a:	bf00      	nop
 8011c5c:	080126f0 	.word	0x080126f0
 8011c60:	08012730 	.word	0x08012730
 8011c64:	08012710 	.word	0x08012710
 8011c68:	080126d0 	.word	0x080126d0
 8011c6c:	08012736 	.word	0x08012736
 8011c70:	0801273a 	.word	0x0801273a
 8011c74:	00000000 	.word	0x00000000
 8011c78:	08011a2b 	.word	0x08011a2b

08011c7c <_printf_common>:
 8011c7c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011c80:	4691      	mov	r9, r2
 8011c82:	461f      	mov	r7, r3
 8011c84:	688a      	ldr	r2, [r1, #8]
 8011c86:	690b      	ldr	r3, [r1, #16]
 8011c88:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8011c8c:	4293      	cmp	r3, r2
 8011c8e:	bfb8      	it	lt
 8011c90:	4613      	movlt	r3, r2
 8011c92:	f8c9 3000 	str.w	r3, [r9]
 8011c96:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8011c9a:	4606      	mov	r6, r0
 8011c9c:	460c      	mov	r4, r1
 8011c9e:	b112      	cbz	r2, 8011ca6 <_printf_common+0x2a>
 8011ca0:	3301      	adds	r3, #1
 8011ca2:	f8c9 3000 	str.w	r3, [r9]
 8011ca6:	6823      	ldr	r3, [r4, #0]
 8011ca8:	0699      	lsls	r1, r3, #26
 8011caa:	bf42      	ittt	mi
 8011cac:	f8d9 3000 	ldrmi.w	r3, [r9]
 8011cb0:	3302      	addmi	r3, #2
 8011cb2:	f8c9 3000 	strmi.w	r3, [r9]
 8011cb6:	6825      	ldr	r5, [r4, #0]
 8011cb8:	f015 0506 	ands.w	r5, r5, #6
 8011cbc:	d107      	bne.n	8011cce <_printf_common+0x52>
 8011cbe:	f104 0a19 	add.w	sl, r4, #25
 8011cc2:	68e3      	ldr	r3, [r4, #12]
 8011cc4:	f8d9 2000 	ldr.w	r2, [r9]
 8011cc8:	1a9b      	subs	r3, r3, r2
 8011cca:	42ab      	cmp	r3, r5
 8011ccc:	dc28      	bgt.n	8011d20 <_printf_common+0xa4>
 8011cce:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8011cd2:	6822      	ldr	r2, [r4, #0]
 8011cd4:	3300      	adds	r3, #0
 8011cd6:	bf18      	it	ne
 8011cd8:	2301      	movne	r3, #1
 8011cda:	0692      	lsls	r2, r2, #26
 8011cdc:	d42d      	bmi.n	8011d3a <_printf_common+0xbe>
 8011cde:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8011ce2:	4639      	mov	r1, r7
 8011ce4:	4630      	mov	r0, r6
 8011ce6:	47c0      	blx	r8
 8011ce8:	3001      	adds	r0, #1
 8011cea:	d020      	beq.n	8011d2e <_printf_common+0xb2>
 8011cec:	6823      	ldr	r3, [r4, #0]
 8011cee:	68e5      	ldr	r5, [r4, #12]
 8011cf0:	f8d9 2000 	ldr.w	r2, [r9]
 8011cf4:	f003 0306 	and.w	r3, r3, #6
 8011cf8:	2b04      	cmp	r3, #4
 8011cfa:	bf08      	it	eq
 8011cfc:	1aad      	subeq	r5, r5, r2
 8011cfe:	68a3      	ldr	r3, [r4, #8]
 8011d00:	6922      	ldr	r2, [r4, #16]
 8011d02:	bf0c      	ite	eq
 8011d04:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8011d08:	2500      	movne	r5, #0
 8011d0a:	4293      	cmp	r3, r2
 8011d0c:	bfc4      	itt	gt
 8011d0e:	1a9b      	subgt	r3, r3, r2
 8011d10:	18ed      	addgt	r5, r5, r3
 8011d12:	f04f 0900 	mov.w	r9, #0
 8011d16:	341a      	adds	r4, #26
 8011d18:	454d      	cmp	r5, r9
 8011d1a:	d11a      	bne.n	8011d52 <_printf_common+0xd6>
 8011d1c:	2000      	movs	r0, #0
 8011d1e:	e008      	b.n	8011d32 <_printf_common+0xb6>
 8011d20:	2301      	movs	r3, #1
 8011d22:	4652      	mov	r2, sl
 8011d24:	4639      	mov	r1, r7
 8011d26:	4630      	mov	r0, r6
 8011d28:	47c0      	blx	r8
 8011d2a:	3001      	adds	r0, #1
 8011d2c:	d103      	bne.n	8011d36 <_printf_common+0xba>
 8011d2e:	f04f 30ff 	mov.w	r0, #4294967295
 8011d32:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011d36:	3501      	adds	r5, #1
 8011d38:	e7c3      	b.n	8011cc2 <_printf_common+0x46>
 8011d3a:	18e1      	adds	r1, r4, r3
 8011d3c:	1c5a      	adds	r2, r3, #1
 8011d3e:	2030      	movs	r0, #48	; 0x30
 8011d40:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8011d44:	4422      	add	r2, r4
 8011d46:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8011d4a:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8011d4e:	3302      	adds	r3, #2
 8011d50:	e7c5      	b.n	8011cde <_printf_common+0x62>
 8011d52:	2301      	movs	r3, #1
 8011d54:	4622      	mov	r2, r4
 8011d56:	4639      	mov	r1, r7
 8011d58:	4630      	mov	r0, r6
 8011d5a:	47c0      	blx	r8
 8011d5c:	3001      	adds	r0, #1
 8011d5e:	d0e6      	beq.n	8011d2e <_printf_common+0xb2>
 8011d60:	f109 0901 	add.w	r9, r9, #1
 8011d64:	e7d8      	b.n	8011d18 <_printf_common+0x9c>
	...

08011d68 <_printf_i>:
 8011d68:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8011d6c:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8011d70:	460c      	mov	r4, r1
 8011d72:	7e09      	ldrb	r1, [r1, #24]
 8011d74:	b085      	sub	sp, #20
 8011d76:	296e      	cmp	r1, #110	; 0x6e
 8011d78:	4617      	mov	r7, r2
 8011d7a:	4606      	mov	r6, r0
 8011d7c:	4698      	mov	r8, r3
 8011d7e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8011d80:	f000 80b3 	beq.w	8011eea <_printf_i+0x182>
 8011d84:	d822      	bhi.n	8011dcc <_printf_i+0x64>
 8011d86:	2963      	cmp	r1, #99	; 0x63
 8011d88:	d036      	beq.n	8011df8 <_printf_i+0x90>
 8011d8a:	d80a      	bhi.n	8011da2 <_printf_i+0x3a>
 8011d8c:	2900      	cmp	r1, #0
 8011d8e:	f000 80b9 	beq.w	8011f04 <_printf_i+0x19c>
 8011d92:	2958      	cmp	r1, #88	; 0x58
 8011d94:	f000 8083 	beq.w	8011e9e <_printf_i+0x136>
 8011d98:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8011d9c:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8011da0:	e032      	b.n	8011e08 <_printf_i+0xa0>
 8011da2:	2964      	cmp	r1, #100	; 0x64
 8011da4:	d001      	beq.n	8011daa <_printf_i+0x42>
 8011da6:	2969      	cmp	r1, #105	; 0x69
 8011da8:	d1f6      	bne.n	8011d98 <_printf_i+0x30>
 8011daa:	6820      	ldr	r0, [r4, #0]
 8011dac:	6813      	ldr	r3, [r2, #0]
 8011dae:	0605      	lsls	r5, r0, #24
 8011db0:	f103 0104 	add.w	r1, r3, #4
 8011db4:	d52a      	bpl.n	8011e0c <_printf_i+0xa4>
 8011db6:	681b      	ldr	r3, [r3, #0]
 8011db8:	6011      	str	r1, [r2, #0]
 8011dba:	2b00      	cmp	r3, #0
 8011dbc:	da03      	bge.n	8011dc6 <_printf_i+0x5e>
 8011dbe:	222d      	movs	r2, #45	; 0x2d
 8011dc0:	425b      	negs	r3, r3
 8011dc2:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8011dc6:	486f      	ldr	r0, [pc, #444]	; (8011f84 <_printf_i+0x21c>)
 8011dc8:	220a      	movs	r2, #10
 8011dca:	e039      	b.n	8011e40 <_printf_i+0xd8>
 8011dcc:	2973      	cmp	r1, #115	; 0x73
 8011dce:	f000 809d 	beq.w	8011f0c <_printf_i+0x1a4>
 8011dd2:	d808      	bhi.n	8011de6 <_printf_i+0x7e>
 8011dd4:	296f      	cmp	r1, #111	; 0x6f
 8011dd6:	d020      	beq.n	8011e1a <_printf_i+0xb2>
 8011dd8:	2970      	cmp	r1, #112	; 0x70
 8011dda:	d1dd      	bne.n	8011d98 <_printf_i+0x30>
 8011ddc:	6823      	ldr	r3, [r4, #0]
 8011dde:	f043 0320 	orr.w	r3, r3, #32
 8011de2:	6023      	str	r3, [r4, #0]
 8011de4:	e003      	b.n	8011dee <_printf_i+0x86>
 8011de6:	2975      	cmp	r1, #117	; 0x75
 8011de8:	d017      	beq.n	8011e1a <_printf_i+0xb2>
 8011dea:	2978      	cmp	r1, #120	; 0x78
 8011dec:	d1d4      	bne.n	8011d98 <_printf_i+0x30>
 8011dee:	2378      	movs	r3, #120	; 0x78
 8011df0:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8011df4:	4864      	ldr	r0, [pc, #400]	; (8011f88 <_printf_i+0x220>)
 8011df6:	e055      	b.n	8011ea4 <_printf_i+0x13c>
 8011df8:	6813      	ldr	r3, [r2, #0]
 8011dfa:	1d19      	adds	r1, r3, #4
 8011dfc:	681b      	ldr	r3, [r3, #0]
 8011dfe:	6011      	str	r1, [r2, #0]
 8011e00:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8011e04:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8011e08:	2301      	movs	r3, #1
 8011e0a:	e08c      	b.n	8011f26 <_printf_i+0x1be>
 8011e0c:	681b      	ldr	r3, [r3, #0]
 8011e0e:	6011      	str	r1, [r2, #0]
 8011e10:	f010 0f40 	tst.w	r0, #64	; 0x40
 8011e14:	bf18      	it	ne
 8011e16:	b21b      	sxthne	r3, r3
 8011e18:	e7cf      	b.n	8011dba <_printf_i+0x52>
 8011e1a:	6813      	ldr	r3, [r2, #0]
 8011e1c:	6825      	ldr	r5, [r4, #0]
 8011e1e:	1d18      	adds	r0, r3, #4
 8011e20:	6010      	str	r0, [r2, #0]
 8011e22:	0628      	lsls	r0, r5, #24
 8011e24:	d501      	bpl.n	8011e2a <_printf_i+0xc2>
 8011e26:	681b      	ldr	r3, [r3, #0]
 8011e28:	e002      	b.n	8011e30 <_printf_i+0xc8>
 8011e2a:	0668      	lsls	r0, r5, #25
 8011e2c:	d5fb      	bpl.n	8011e26 <_printf_i+0xbe>
 8011e2e:	881b      	ldrh	r3, [r3, #0]
 8011e30:	4854      	ldr	r0, [pc, #336]	; (8011f84 <_printf_i+0x21c>)
 8011e32:	296f      	cmp	r1, #111	; 0x6f
 8011e34:	bf14      	ite	ne
 8011e36:	220a      	movne	r2, #10
 8011e38:	2208      	moveq	r2, #8
 8011e3a:	2100      	movs	r1, #0
 8011e3c:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8011e40:	6865      	ldr	r5, [r4, #4]
 8011e42:	60a5      	str	r5, [r4, #8]
 8011e44:	2d00      	cmp	r5, #0
 8011e46:	f2c0 8095 	blt.w	8011f74 <_printf_i+0x20c>
 8011e4a:	6821      	ldr	r1, [r4, #0]
 8011e4c:	f021 0104 	bic.w	r1, r1, #4
 8011e50:	6021      	str	r1, [r4, #0]
 8011e52:	2b00      	cmp	r3, #0
 8011e54:	d13d      	bne.n	8011ed2 <_printf_i+0x16a>
 8011e56:	2d00      	cmp	r5, #0
 8011e58:	f040 808e 	bne.w	8011f78 <_printf_i+0x210>
 8011e5c:	4665      	mov	r5, ip
 8011e5e:	2a08      	cmp	r2, #8
 8011e60:	d10b      	bne.n	8011e7a <_printf_i+0x112>
 8011e62:	6823      	ldr	r3, [r4, #0]
 8011e64:	07db      	lsls	r3, r3, #31
 8011e66:	d508      	bpl.n	8011e7a <_printf_i+0x112>
 8011e68:	6923      	ldr	r3, [r4, #16]
 8011e6a:	6862      	ldr	r2, [r4, #4]
 8011e6c:	429a      	cmp	r2, r3
 8011e6e:	bfde      	ittt	le
 8011e70:	2330      	movle	r3, #48	; 0x30
 8011e72:	f805 3c01 	strble.w	r3, [r5, #-1]
 8011e76:	f105 35ff 	addle.w	r5, r5, #4294967295
 8011e7a:	ebac 0305 	sub.w	r3, ip, r5
 8011e7e:	6123      	str	r3, [r4, #16]
 8011e80:	f8cd 8000 	str.w	r8, [sp]
 8011e84:	463b      	mov	r3, r7
 8011e86:	aa03      	add	r2, sp, #12
 8011e88:	4621      	mov	r1, r4
 8011e8a:	4630      	mov	r0, r6
 8011e8c:	f7ff fef6 	bl	8011c7c <_printf_common>
 8011e90:	3001      	adds	r0, #1
 8011e92:	d14d      	bne.n	8011f30 <_printf_i+0x1c8>
 8011e94:	f04f 30ff 	mov.w	r0, #4294967295
 8011e98:	b005      	add	sp, #20
 8011e9a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8011e9e:	4839      	ldr	r0, [pc, #228]	; (8011f84 <_printf_i+0x21c>)
 8011ea0:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8011ea4:	6813      	ldr	r3, [r2, #0]
 8011ea6:	6821      	ldr	r1, [r4, #0]
 8011ea8:	1d1d      	adds	r5, r3, #4
 8011eaa:	681b      	ldr	r3, [r3, #0]
 8011eac:	6015      	str	r5, [r2, #0]
 8011eae:	060a      	lsls	r2, r1, #24
 8011eb0:	d50b      	bpl.n	8011eca <_printf_i+0x162>
 8011eb2:	07ca      	lsls	r2, r1, #31
 8011eb4:	bf44      	itt	mi
 8011eb6:	f041 0120 	orrmi.w	r1, r1, #32
 8011eba:	6021      	strmi	r1, [r4, #0]
 8011ebc:	b91b      	cbnz	r3, 8011ec6 <_printf_i+0x15e>
 8011ebe:	6822      	ldr	r2, [r4, #0]
 8011ec0:	f022 0220 	bic.w	r2, r2, #32
 8011ec4:	6022      	str	r2, [r4, #0]
 8011ec6:	2210      	movs	r2, #16
 8011ec8:	e7b7      	b.n	8011e3a <_printf_i+0xd2>
 8011eca:	064d      	lsls	r5, r1, #25
 8011ecc:	bf48      	it	mi
 8011ece:	b29b      	uxthmi	r3, r3
 8011ed0:	e7ef      	b.n	8011eb2 <_printf_i+0x14a>
 8011ed2:	4665      	mov	r5, ip
 8011ed4:	fbb3 f1f2 	udiv	r1, r3, r2
 8011ed8:	fb02 3311 	mls	r3, r2, r1, r3
 8011edc:	5cc3      	ldrb	r3, [r0, r3]
 8011ede:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8011ee2:	460b      	mov	r3, r1
 8011ee4:	2900      	cmp	r1, #0
 8011ee6:	d1f5      	bne.n	8011ed4 <_printf_i+0x16c>
 8011ee8:	e7b9      	b.n	8011e5e <_printf_i+0xf6>
 8011eea:	6813      	ldr	r3, [r2, #0]
 8011eec:	6825      	ldr	r5, [r4, #0]
 8011eee:	6961      	ldr	r1, [r4, #20]
 8011ef0:	1d18      	adds	r0, r3, #4
 8011ef2:	6010      	str	r0, [r2, #0]
 8011ef4:	0628      	lsls	r0, r5, #24
 8011ef6:	681b      	ldr	r3, [r3, #0]
 8011ef8:	d501      	bpl.n	8011efe <_printf_i+0x196>
 8011efa:	6019      	str	r1, [r3, #0]
 8011efc:	e002      	b.n	8011f04 <_printf_i+0x19c>
 8011efe:	066a      	lsls	r2, r5, #25
 8011f00:	d5fb      	bpl.n	8011efa <_printf_i+0x192>
 8011f02:	8019      	strh	r1, [r3, #0]
 8011f04:	2300      	movs	r3, #0
 8011f06:	6123      	str	r3, [r4, #16]
 8011f08:	4665      	mov	r5, ip
 8011f0a:	e7b9      	b.n	8011e80 <_printf_i+0x118>
 8011f0c:	6813      	ldr	r3, [r2, #0]
 8011f0e:	1d19      	adds	r1, r3, #4
 8011f10:	6011      	str	r1, [r2, #0]
 8011f12:	681d      	ldr	r5, [r3, #0]
 8011f14:	6862      	ldr	r2, [r4, #4]
 8011f16:	2100      	movs	r1, #0
 8011f18:	4628      	mov	r0, r5
 8011f1a:	f7ee f9e9 	bl	80002f0 <memchr>
 8011f1e:	b108      	cbz	r0, 8011f24 <_printf_i+0x1bc>
 8011f20:	1b40      	subs	r0, r0, r5
 8011f22:	6060      	str	r0, [r4, #4]
 8011f24:	6863      	ldr	r3, [r4, #4]
 8011f26:	6123      	str	r3, [r4, #16]
 8011f28:	2300      	movs	r3, #0
 8011f2a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8011f2e:	e7a7      	b.n	8011e80 <_printf_i+0x118>
 8011f30:	6923      	ldr	r3, [r4, #16]
 8011f32:	462a      	mov	r2, r5
 8011f34:	4639      	mov	r1, r7
 8011f36:	4630      	mov	r0, r6
 8011f38:	47c0      	blx	r8
 8011f3a:	3001      	adds	r0, #1
 8011f3c:	d0aa      	beq.n	8011e94 <_printf_i+0x12c>
 8011f3e:	6823      	ldr	r3, [r4, #0]
 8011f40:	079b      	lsls	r3, r3, #30
 8011f42:	d413      	bmi.n	8011f6c <_printf_i+0x204>
 8011f44:	68e0      	ldr	r0, [r4, #12]
 8011f46:	9b03      	ldr	r3, [sp, #12]
 8011f48:	4298      	cmp	r0, r3
 8011f4a:	bfb8      	it	lt
 8011f4c:	4618      	movlt	r0, r3
 8011f4e:	e7a3      	b.n	8011e98 <_printf_i+0x130>
 8011f50:	2301      	movs	r3, #1
 8011f52:	464a      	mov	r2, r9
 8011f54:	4639      	mov	r1, r7
 8011f56:	4630      	mov	r0, r6
 8011f58:	47c0      	blx	r8
 8011f5a:	3001      	adds	r0, #1
 8011f5c:	d09a      	beq.n	8011e94 <_printf_i+0x12c>
 8011f5e:	3501      	adds	r5, #1
 8011f60:	68e3      	ldr	r3, [r4, #12]
 8011f62:	9a03      	ldr	r2, [sp, #12]
 8011f64:	1a9b      	subs	r3, r3, r2
 8011f66:	42ab      	cmp	r3, r5
 8011f68:	dcf2      	bgt.n	8011f50 <_printf_i+0x1e8>
 8011f6a:	e7eb      	b.n	8011f44 <_printf_i+0x1dc>
 8011f6c:	2500      	movs	r5, #0
 8011f6e:	f104 0919 	add.w	r9, r4, #25
 8011f72:	e7f5      	b.n	8011f60 <_printf_i+0x1f8>
 8011f74:	2b00      	cmp	r3, #0
 8011f76:	d1ac      	bne.n	8011ed2 <_printf_i+0x16a>
 8011f78:	7803      	ldrb	r3, [r0, #0]
 8011f7a:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8011f7e:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8011f82:	e76c      	b.n	8011e5e <_printf_i+0xf6>
 8011f84:	08012741 	.word	0x08012741
 8011f88:	08012752 	.word	0x08012752

08011f8c <__sread>:
 8011f8c:	b510      	push	{r4, lr}
 8011f8e:	460c      	mov	r4, r1
 8011f90:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011f94:	f000 fa86 	bl	80124a4 <_read_r>
 8011f98:	2800      	cmp	r0, #0
 8011f9a:	bfab      	itete	ge
 8011f9c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8011f9e:	89a3      	ldrhlt	r3, [r4, #12]
 8011fa0:	181b      	addge	r3, r3, r0
 8011fa2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8011fa6:	bfac      	ite	ge
 8011fa8:	6563      	strge	r3, [r4, #84]	; 0x54
 8011faa:	81a3      	strhlt	r3, [r4, #12]
 8011fac:	bd10      	pop	{r4, pc}

08011fae <__swrite>:
 8011fae:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011fb2:	461f      	mov	r7, r3
 8011fb4:	898b      	ldrh	r3, [r1, #12]
 8011fb6:	05db      	lsls	r3, r3, #23
 8011fb8:	4605      	mov	r5, r0
 8011fba:	460c      	mov	r4, r1
 8011fbc:	4616      	mov	r6, r2
 8011fbe:	d505      	bpl.n	8011fcc <__swrite+0x1e>
 8011fc0:	2302      	movs	r3, #2
 8011fc2:	2200      	movs	r2, #0
 8011fc4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011fc8:	f000 f9b6 	bl	8012338 <_lseek_r>
 8011fcc:	89a3      	ldrh	r3, [r4, #12]
 8011fce:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8011fd2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8011fd6:	81a3      	strh	r3, [r4, #12]
 8011fd8:	4632      	mov	r2, r6
 8011fda:	463b      	mov	r3, r7
 8011fdc:	4628      	mov	r0, r5
 8011fde:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8011fe2:	f000 b869 	b.w	80120b8 <_write_r>

08011fe6 <__sseek>:
 8011fe6:	b510      	push	{r4, lr}
 8011fe8:	460c      	mov	r4, r1
 8011fea:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011fee:	f000 f9a3 	bl	8012338 <_lseek_r>
 8011ff2:	1c43      	adds	r3, r0, #1
 8011ff4:	89a3      	ldrh	r3, [r4, #12]
 8011ff6:	bf15      	itete	ne
 8011ff8:	6560      	strne	r0, [r4, #84]	; 0x54
 8011ffa:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8011ffe:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8012002:	81a3      	strheq	r3, [r4, #12]
 8012004:	bf18      	it	ne
 8012006:	81a3      	strhne	r3, [r4, #12]
 8012008:	bd10      	pop	{r4, pc}

0801200a <__sclose>:
 801200a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801200e:	f000 b8d3 	b.w	80121b8 <_close_r>
	...

08012014 <__swbuf_r>:
 8012014:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012016:	460e      	mov	r6, r1
 8012018:	4614      	mov	r4, r2
 801201a:	4605      	mov	r5, r0
 801201c:	b118      	cbz	r0, 8012026 <__swbuf_r+0x12>
 801201e:	6983      	ldr	r3, [r0, #24]
 8012020:	b90b      	cbnz	r3, 8012026 <__swbuf_r+0x12>
 8012022:	f7ff fb0d 	bl	8011640 <__sinit>
 8012026:	4b21      	ldr	r3, [pc, #132]	; (80120ac <__swbuf_r+0x98>)
 8012028:	429c      	cmp	r4, r3
 801202a:	d12a      	bne.n	8012082 <__swbuf_r+0x6e>
 801202c:	686c      	ldr	r4, [r5, #4]
 801202e:	69a3      	ldr	r3, [r4, #24]
 8012030:	60a3      	str	r3, [r4, #8]
 8012032:	89a3      	ldrh	r3, [r4, #12]
 8012034:	071a      	lsls	r2, r3, #28
 8012036:	d52e      	bpl.n	8012096 <__swbuf_r+0x82>
 8012038:	6923      	ldr	r3, [r4, #16]
 801203a:	b363      	cbz	r3, 8012096 <__swbuf_r+0x82>
 801203c:	6923      	ldr	r3, [r4, #16]
 801203e:	6820      	ldr	r0, [r4, #0]
 8012040:	1ac0      	subs	r0, r0, r3
 8012042:	6963      	ldr	r3, [r4, #20]
 8012044:	b2f6      	uxtb	r6, r6
 8012046:	4283      	cmp	r3, r0
 8012048:	4637      	mov	r7, r6
 801204a:	dc04      	bgt.n	8012056 <__swbuf_r+0x42>
 801204c:	4621      	mov	r1, r4
 801204e:	4628      	mov	r0, r5
 8012050:	f000 f948 	bl	80122e4 <_fflush_r>
 8012054:	bb28      	cbnz	r0, 80120a2 <__swbuf_r+0x8e>
 8012056:	68a3      	ldr	r3, [r4, #8]
 8012058:	3b01      	subs	r3, #1
 801205a:	60a3      	str	r3, [r4, #8]
 801205c:	6823      	ldr	r3, [r4, #0]
 801205e:	1c5a      	adds	r2, r3, #1
 8012060:	6022      	str	r2, [r4, #0]
 8012062:	701e      	strb	r6, [r3, #0]
 8012064:	6963      	ldr	r3, [r4, #20]
 8012066:	3001      	adds	r0, #1
 8012068:	4283      	cmp	r3, r0
 801206a:	d004      	beq.n	8012076 <__swbuf_r+0x62>
 801206c:	89a3      	ldrh	r3, [r4, #12]
 801206e:	07db      	lsls	r3, r3, #31
 8012070:	d519      	bpl.n	80120a6 <__swbuf_r+0x92>
 8012072:	2e0a      	cmp	r6, #10
 8012074:	d117      	bne.n	80120a6 <__swbuf_r+0x92>
 8012076:	4621      	mov	r1, r4
 8012078:	4628      	mov	r0, r5
 801207a:	f000 f933 	bl	80122e4 <_fflush_r>
 801207e:	b190      	cbz	r0, 80120a6 <__swbuf_r+0x92>
 8012080:	e00f      	b.n	80120a2 <__swbuf_r+0x8e>
 8012082:	4b0b      	ldr	r3, [pc, #44]	; (80120b0 <__swbuf_r+0x9c>)
 8012084:	429c      	cmp	r4, r3
 8012086:	d101      	bne.n	801208c <__swbuf_r+0x78>
 8012088:	68ac      	ldr	r4, [r5, #8]
 801208a:	e7d0      	b.n	801202e <__swbuf_r+0x1a>
 801208c:	4b09      	ldr	r3, [pc, #36]	; (80120b4 <__swbuf_r+0xa0>)
 801208e:	429c      	cmp	r4, r3
 8012090:	bf08      	it	eq
 8012092:	68ec      	ldreq	r4, [r5, #12]
 8012094:	e7cb      	b.n	801202e <__swbuf_r+0x1a>
 8012096:	4621      	mov	r1, r4
 8012098:	4628      	mov	r0, r5
 801209a:	f000 f81f 	bl	80120dc <__swsetup_r>
 801209e:	2800      	cmp	r0, #0
 80120a0:	d0cc      	beq.n	801203c <__swbuf_r+0x28>
 80120a2:	f04f 37ff 	mov.w	r7, #4294967295
 80120a6:	4638      	mov	r0, r7
 80120a8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80120aa:	bf00      	nop
 80120ac:	080126f0 	.word	0x080126f0
 80120b0:	08012710 	.word	0x08012710
 80120b4:	080126d0 	.word	0x080126d0

080120b8 <_write_r>:
 80120b8:	b538      	push	{r3, r4, r5, lr}
 80120ba:	4c07      	ldr	r4, [pc, #28]	; (80120d8 <_write_r+0x20>)
 80120bc:	4605      	mov	r5, r0
 80120be:	4608      	mov	r0, r1
 80120c0:	4611      	mov	r1, r2
 80120c2:	2200      	movs	r2, #0
 80120c4:	6022      	str	r2, [r4, #0]
 80120c6:	461a      	mov	r2, r3
 80120c8:	f7ef fab7 	bl	800163a <_write>
 80120cc:	1c43      	adds	r3, r0, #1
 80120ce:	d102      	bne.n	80120d6 <_write_r+0x1e>
 80120d0:	6823      	ldr	r3, [r4, #0]
 80120d2:	b103      	cbz	r3, 80120d6 <_write_r+0x1e>
 80120d4:	602b      	str	r3, [r5, #0]
 80120d6:	bd38      	pop	{r3, r4, r5, pc}
 80120d8:	2400136c 	.word	0x2400136c

080120dc <__swsetup_r>:
 80120dc:	4b32      	ldr	r3, [pc, #200]	; (80121a8 <__swsetup_r+0xcc>)
 80120de:	b570      	push	{r4, r5, r6, lr}
 80120e0:	681d      	ldr	r5, [r3, #0]
 80120e2:	4606      	mov	r6, r0
 80120e4:	460c      	mov	r4, r1
 80120e6:	b125      	cbz	r5, 80120f2 <__swsetup_r+0x16>
 80120e8:	69ab      	ldr	r3, [r5, #24]
 80120ea:	b913      	cbnz	r3, 80120f2 <__swsetup_r+0x16>
 80120ec:	4628      	mov	r0, r5
 80120ee:	f7ff faa7 	bl	8011640 <__sinit>
 80120f2:	4b2e      	ldr	r3, [pc, #184]	; (80121ac <__swsetup_r+0xd0>)
 80120f4:	429c      	cmp	r4, r3
 80120f6:	d10f      	bne.n	8012118 <__swsetup_r+0x3c>
 80120f8:	686c      	ldr	r4, [r5, #4]
 80120fa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80120fe:	b29a      	uxth	r2, r3
 8012100:	0715      	lsls	r5, r2, #28
 8012102:	d42c      	bmi.n	801215e <__swsetup_r+0x82>
 8012104:	06d0      	lsls	r0, r2, #27
 8012106:	d411      	bmi.n	801212c <__swsetup_r+0x50>
 8012108:	2209      	movs	r2, #9
 801210a:	6032      	str	r2, [r6, #0]
 801210c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8012110:	81a3      	strh	r3, [r4, #12]
 8012112:	f04f 30ff 	mov.w	r0, #4294967295
 8012116:	e03e      	b.n	8012196 <__swsetup_r+0xba>
 8012118:	4b25      	ldr	r3, [pc, #148]	; (80121b0 <__swsetup_r+0xd4>)
 801211a:	429c      	cmp	r4, r3
 801211c:	d101      	bne.n	8012122 <__swsetup_r+0x46>
 801211e:	68ac      	ldr	r4, [r5, #8]
 8012120:	e7eb      	b.n	80120fa <__swsetup_r+0x1e>
 8012122:	4b24      	ldr	r3, [pc, #144]	; (80121b4 <__swsetup_r+0xd8>)
 8012124:	429c      	cmp	r4, r3
 8012126:	bf08      	it	eq
 8012128:	68ec      	ldreq	r4, [r5, #12]
 801212a:	e7e6      	b.n	80120fa <__swsetup_r+0x1e>
 801212c:	0751      	lsls	r1, r2, #29
 801212e:	d512      	bpl.n	8012156 <__swsetup_r+0x7a>
 8012130:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8012132:	b141      	cbz	r1, 8012146 <__swsetup_r+0x6a>
 8012134:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8012138:	4299      	cmp	r1, r3
 801213a:	d002      	beq.n	8012142 <__swsetup_r+0x66>
 801213c:	4630      	mov	r0, r6
 801213e:	f7ff f93b 	bl	80113b8 <_free_r>
 8012142:	2300      	movs	r3, #0
 8012144:	6363      	str	r3, [r4, #52]	; 0x34
 8012146:	89a3      	ldrh	r3, [r4, #12]
 8012148:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 801214c:	81a3      	strh	r3, [r4, #12]
 801214e:	2300      	movs	r3, #0
 8012150:	6063      	str	r3, [r4, #4]
 8012152:	6923      	ldr	r3, [r4, #16]
 8012154:	6023      	str	r3, [r4, #0]
 8012156:	89a3      	ldrh	r3, [r4, #12]
 8012158:	f043 0308 	orr.w	r3, r3, #8
 801215c:	81a3      	strh	r3, [r4, #12]
 801215e:	6923      	ldr	r3, [r4, #16]
 8012160:	b94b      	cbnz	r3, 8012176 <__swsetup_r+0x9a>
 8012162:	89a3      	ldrh	r3, [r4, #12]
 8012164:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8012168:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801216c:	d003      	beq.n	8012176 <__swsetup_r+0x9a>
 801216e:	4621      	mov	r1, r4
 8012170:	4630      	mov	r0, r6
 8012172:	f000 f917 	bl	80123a4 <__smakebuf_r>
 8012176:	89a2      	ldrh	r2, [r4, #12]
 8012178:	f012 0301 	ands.w	r3, r2, #1
 801217c:	d00c      	beq.n	8012198 <__swsetup_r+0xbc>
 801217e:	2300      	movs	r3, #0
 8012180:	60a3      	str	r3, [r4, #8]
 8012182:	6963      	ldr	r3, [r4, #20]
 8012184:	425b      	negs	r3, r3
 8012186:	61a3      	str	r3, [r4, #24]
 8012188:	6923      	ldr	r3, [r4, #16]
 801218a:	b953      	cbnz	r3, 80121a2 <__swsetup_r+0xc6>
 801218c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8012190:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 8012194:	d1ba      	bne.n	801210c <__swsetup_r+0x30>
 8012196:	bd70      	pop	{r4, r5, r6, pc}
 8012198:	0792      	lsls	r2, r2, #30
 801219a:	bf58      	it	pl
 801219c:	6963      	ldrpl	r3, [r4, #20]
 801219e:	60a3      	str	r3, [r4, #8]
 80121a0:	e7f2      	b.n	8012188 <__swsetup_r+0xac>
 80121a2:	2000      	movs	r0, #0
 80121a4:	e7f7      	b.n	8012196 <__swsetup_r+0xba>
 80121a6:	bf00      	nop
 80121a8:	24000168 	.word	0x24000168
 80121ac:	080126f0 	.word	0x080126f0
 80121b0:	08012710 	.word	0x08012710
 80121b4:	080126d0 	.word	0x080126d0

080121b8 <_close_r>:
 80121b8:	b538      	push	{r3, r4, r5, lr}
 80121ba:	4c06      	ldr	r4, [pc, #24]	; (80121d4 <_close_r+0x1c>)
 80121bc:	2300      	movs	r3, #0
 80121be:	4605      	mov	r5, r0
 80121c0:	4608      	mov	r0, r1
 80121c2:	6023      	str	r3, [r4, #0]
 80121c4:	f7ef fa55 	bl	8001672 <_close>
 80121c8:	1c43      	adds	r3, r0, #1
 80121ca:	d102      	bne.n	80121d2 <_close_r+0x1a>
 80121cc:	6823      	ldr	r3, [r4, #0]
 80121ce:	b103      	cbz	r3, 80121d2 <_close_r+0x1a>
 80121d0:	602b      	str	r3, [r5, #0]
 80121d2:	bd38      	pop	{r3, r4, r5, pc}
 80121d4:	2400136c 	.word	0x2400136c

080121d8 <__sflush_r>:
 80121d8:	898a      	ldrh	r2, [r1, #12]
 80121da:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80121de:	4605      	mov	r5, r0
 80121e0:	0710      	lsls	r0, r2, #28
 80121e2:	460c      	mov	r4, r1
 80121e4:	d458      	bmi.n	8012298 <__sflush_r+0xc0>
 80121e6:	684b      	ldr	r3, [r1, #4]
 80121e8:	2b00      	cmp	r3, #0
 80121ea:	dc05      	bgt.n	80121f8 <__sflush_r+0x20>
 80121ec:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80121ee:	2b00      	cmp	r3, #0
 80121f0:	dc02      	bgt.n	80121f8 <__sflush_r+0x20>
 80121f2:	2000      	movs	r0, #0
 80121f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80121f8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80121fa:	2e00      	cmp	r6, #0
 80121fc:	d0f9      	beq.n	80121f2 <__sflush_r+0x1a>
 80121fe:	2300      	movs	r3, #0
 8012200:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8012204:	682f      	ldr	r7, [r5, #0]
 8012206:	6a21      	ldr	r1, [r4, #32]
 8012208:	602b      	str	r3, [r5, #0]
 801220a:	d032      	beq.n	8012272 <__sflush_r+0x9a>
 801220c:	6d60      	ldr	r0, [r4, #84]	; 0x54
 801220e:	89a3      	ldrh	r3, [r4, #12]
 8012210:	075a      	lsls	r2, r3, #29
 8012212:	d505      	bpl.n	8012220 <__sflush_r+0x48>
 8012214:	6863      	ldr	r3, [r4, #4]
 8012216:	1ac0      	subs	r0, r0, r3
 8012218:	6b63      	ldr	r3, [r4, #52]	; 0x34
 801221a:	b10b      	cbz	r3, 8012220 <__sflush_r+0x48>
 801221c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 801221e:	1ac0      	subs	r0, r0, r3
 8012220:	2300      	movs	r3, #0
 8012222:	4602      	mov	r2, r0
 8012224:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8012226:	6a21      	ldr	r1, [r4, #32]
 8012228:	4628      	mov	r0, r5
 801222a:	47b0      	blx	r6
 801222c:	1c43      	adds	r3, r0, #1
 801222e:	89a3      	ldrh	r3, [r4, #12]
 8012230:	d106      	bne.n	8012240 <__sflush_r+0x68>
 8012232:	6829      	ldr	r1, [r5, #0]
 8012234:	291d      	cmp	r1, #29
 8012236:	d848      	bhi.n	80122ca <__sflush_r+0xf2>
 8012238:	4a29      	ldr	r2, [pc, #164]	; (80122e0 <__sflush_r+0x108>)
 801223a:	40ca      	lsrs	r2, r1
 801223c:	07d6      	lsls	r6, r2, #31
 801223e:	d544      	bpl.n	80122ca <__sflush_r+0xf2>
 8012240:	2200      	movs	r2, #0
 8012242:	6062      	str	r2, [r4, #4]
 8012244:	04d9      	lsls	r1, r3, #19
 8012246:	6922      	ldr	r2, [r4, #16]
 8012248:	6022      	str	r2, [r4, #0]
 801224a:	d504      	bpl.n	8012256 <__sflush_r+0x7e>
 801224c:	1c42      	adds	r2, r0, #1
 801224e:	d101      	bne.n	8012254 <__sflush_r+0x7c>
 8012250:	682b      	ldr	r3, [r5, #0]
 8012252:	b903      	cbnz	r3, 8012256 <__sflush_r+0x7e>
 8012254:	6560      	str	r0, [r4, #84]	; 0x54
 8012256:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8012258:	602f      	str	r7, [r5, #0]
 801225a:	2900      	cmp	r1, #0
 801225c:	d0c9      	beq.n	80121f2 <__sflush_r+0x1a>
 801225e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8012262:	4299      	cmp	r1, r3
 8012264:	d002      	beq.n	801226c <__sflush_r+0x94>
 8012266:	4628      	mov	r0, r5
 8012268:	f7ff f8a6 	bl	80113b8 <_free_r>
 801226c:	2000      	movs	r0, #0
 801226e:	6360      	str	r0, [r4, #52]	; 0x34
 8012270:	e7c0      	b.n	80121f4 <__sflush_r+0x1c>
 8012272:	2301      	movs	r3, #1
 8012274:	4628      	mov	r0, r5
 8012276:	47b0      	blx	r6
 8012278:	1c41      	adds	r1, r0, #1
 801227a:	d1c8      	bne.n	801220e <__sflush_r+0x36>
 801227c:	682b      	ldr	r3, [r5, #0]
 801227e:	2b00      	cmp	r3, #0
 8012280:	d0c5      	beq.n	801220e <__sflush_r+0x36>
 8012282:	2b1d      	cmp	r3, #29
 8012284:	d001      	beq.n	801228a <__sflush_r+0xb2>
 8012286:	2b16      	cmp	r3, #22
 8012288:	d101      	bne.n	801228e <__sflush_r+0xb6>
 801228a:	602f      	str	r7, [r5, #0]
 801228c:	e7b1      	b.n	80121f2 <__sflush_r+0x1a>
 801228e:	89a3      	ldrh	r3, [r4, #12]
 8012290:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8012294:	81a3      	strh	r3, [r4, #12]
 8012296:	e7ad      	b.n	80121f4 <__sflush_r+0x1c>
 8012298:	690f      	ldr	r7, [r1, #16]
 801229a:	2f00      	cmp	r7, #0
 801229c:	d0a9      	beq.n	80121f2 <__sflush_r+0x1a>
 801229e:	0793      	lsls	r3, r2, #30
 80122a0:	680e      	ldr	r6, [r1, #0]
 80122a2:	bf08      	it	eq
 80122a4:	694b      	ldreq	r3, [r1, #20]
 80122a6:	600f      	str	r7, [r1, #0]
 80122a8:	bf18      	it	ne
 80122aa:	2300      	movne	r3, #0
 80122ac:	eba6 0807 	sub.w	r8, r6, r7
 80122b0:	608b      	str	r3, [r1, #8]
 80122b2:	f1b8 0f00 	cmp.w	r8, #0
 80122b6:	dd9c      	ble.n	80121f2 <__sflush_r+0x1a>
 80122b8:	4643      	mov	r3, r8
 80122ba:	463a      	mov	r2, r7
 80122bc:	6a21      	ldr	r1, [r4, #32]
 80122be:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80122c0:	4628      	mov	r0, r5
 80122c2:	47b0      	blx	r6
 80122c4:	2800      	cmp	r0, #0
 80122c6:	dc06      	bgt.n	80122d6 <__sflush_r+0xfe>
 80122c8:	89a3      	ldrh	r3, [r4, #12]
 80122ca:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80122ce:	81a3      	strh	r3, [r4, #12]
 80122d0:	f04f 30ff 	mov.w	r0, #4294967295
 80122d4:	e78e      	b.n	80121f4 <__sflush_r+0x1c>
 80122d6:	4407      	add	r7, r0
 80122d8:	eba8 0800 	sub.w	r8, r8, r0
 80122dc:	e7e9      	b.n	80122b2 <__sflush_r+0xda>
 80122de:	bf00      	nop
 80122e0:	20400001 	.word	0x20400001

080122e4 <_fflush_r>:
 80122e4:	b538      	push	{r3, r4, r5, lr}
 80122e6:	690b      	ldr	r3, [r1, #16]
 80122e8:	4605      	mov	r5, r0
 80122ea:	460c      	mov	r4, r1
 80122ec:	b1db      	cbz	r3, 8012326 <_fflush_r+0x42>
 80122ee:	b118      	cbz	r0, 80122f8 <_fflush_r+0x14>
 80122f0:	6983      	ldr	r3, [r0, #24]
 80122f2:	b90b      	cbnz	r3, 80122f8 <_fflush_r+0x14>
 80122f4:	f7ff f9a4 	bl	8011640 <__sinit>
 80122f8:	4b0c      	ldr	r3, [pc, #48]	; (801232c <_fflush_r+0x48>)
 80122fa:	429c      	cmp	r4, r3
 80122fc:	d109      	bne.n	8012312 <_fflush_r+0x2e>
 80122fe:	686c      	ldr	r4, [r5, #4]
 8012300:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8012304:	b17b      	cbz	r3, 8012326 <_fflush_r+0x42>
 8012306:	4621      	mov	r1, r4
 8012308:	4628      	mov	r0, r5
 801230a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801230e:	f7ff bf63 	b.w	80121d8 <__sflush_r>
 8012312:	4b07      	ldr	r3, [pc, #28]	; (8012330 <_fflush_r+0x4c>)
 8012314:	429c      	cmp	r4, r3
 8012316:	d101      	bne.n	801231c <_fflush_r+0x38>
 8012318:	68ac      	ldr	r4, [r5, #8]
 801231a:	e7f1      	b.n	8012300 <_fflush_r+0x1c>
 801231c:	4b05      	ldr	r3, [pc, #20]	; (8012334 <_fflush_r+0x50>)
 801231e:	429c      	cmp	r4, r3
 8012320:	bf08      	it	eq
 8012322:	68ec      	ldreq	r4, [r5, #12]
 8012324:	e7ec      	b.n	8012300 <_fflush_r+0x1c>
 8012326:	2000      	movs	r0, #0
 8012328:	bd38      	pop	{r3, r4, r5, pc}
 801232a:	bf00      	nop
 801232c:	080126f0 	.word	0x080126f0
 8012330:	08012710 	.word	0x08012710
 8012334:	080126d0 	.word	0x080126d0

08012338 <_lseek_r>:
 8012338:	b538      	push	{r3, r4, r5, lr}
 801233a:	4c07      	ldr	r4, [pc, #28]	; (8012358 <_lseek_r+0x20>)
 801233c:	4605      	mov	r5, r0
 801233e:	4608      	mov	r0, r1
 8012340:	4611      	mov	r1, r2
 8012342:	2200      	movs	r2, #0
 8012344:	6022      	str	r2, [r4, #0]
 8012346:	461a      	mov	r2, r3
 8012348:	f7ef f9ba 	bl	80016c0 <_lseek>
 801234c:	1c43      	adds	r3, r0, #1
 801234e:	d102      	bne.n	8012356 <_lseek_r+0x1e>
 8012350:	6823      	ldr	r3, [r4, #0]
 8012352:	b103      	cbz	r3, 8012356 <_lseek_r+0x1e>
 8012354:	602b      	str	r3, [r5, #0]
 8012356:	bd38      	pop	{r3, r4, r5, pc}
 8012358:	2400136c 	.word	0x2400136c

0801235c <__swhatbuf_r>:
 801235c:	b570      	push	{r4, r5, r6, lr}
 801235e:	460e      	mov	r6, r1
 8012360:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012364:	2900      	cmp	r1, #0
 8012366:	b096      	sub	sp, #88	; 0x58
 8012368:	4614      	mov	r4, r2
 801236a:	461d      	mov	r5, r3
 801236c:	da07      	bge.n	801237e <__swhatbuf_r+0x22>
 801236e:	2300      	movs	r3, #0
 8012370:	602b      	str	r3, [r5, #0]
 8012372:	89b3      	ldrh	r3, [r6, #12]
 8012374:	061a      	lsls	r2, r3, #24
 8012376:	d410      	bmi.n	801239a <__swhatbuf_r+0x3e>
 8012378:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801237c:	e00e      	b.n	801239c <__swhatbuf_r+0x40>
 801237e:	466a      	mov	r2, sp
 8012380:	f000 f8a2 	bl	80124c8 <_fstat_r>
 8012384:	2800      	cmp	r0, #0
 8012386:	dbf2      	blt.n	801236e <__swhatbuf_r+0x12>
 8012388:	9a01      	ldr	r2, [sp, #4]
 801238a:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 801238e:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8012392:	425a      	negs	r2, r3
 8012394:	415a      	adcs	r2, r3
 8012396:	602a      	str	r2, [r5, #0]
 8012398:	e7ee      	b.n	8012378 <__swhatbuf_r+0x1c>
 801239a:	2340      	movs	r3, #64	; 0x40
 801239c:	2000      	movs	r0, #0
 801239e:	6023      	str	r3, [r4, #0]
 80123a0:	b016      	add	sp, #88	; 0x58
 80123a2:	bd70      	pop	{r4, r5, r6, pc}

080123a4 <__smakebuf_r>:
 80123a4:	898b      	ldrh	r3, [r1, #12]
 80123a6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80123a8:	079d      	lsls	r5, r3, #30
 80123aa:	4606      	mov	r6, r0
 80123ac:	460c      	mov	r4, r1
 80123ae:	d507      	bpl.n	80123c0 <__smakebuf_r+0x1c>
 80123b0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80123b4:	6023      	str	r3, [r4, #0]
 80123b6:	6123      	str	r3, [r4, #16]
 80123b8:	2301      	movs	r3, #1
 80123ba:	6163      	str	r3, [r4, #20]
 80123bc:	b002      	add	sp, #8
 80123be:	bd70      	pop	{r4, r5, r6, pc}
 80123c0:	ab01      	add	r3, sp, #4
 80123c2:	466a      	mov	r2, sp
 80123c4:	f7ff ffca 	bl	801235c <__swhatbuf_r>
 80123c8:	9900      	ldr	r1, [sp, #0]
 80123ca:	4605      	mov	r5, r0
 80123cc:	4630      	mov	r0, r6
 80123ce:	f7ff f841 	bl	8011454 <_malloc_r>
 80123d2:	b948      	cbnz	r0, 80123e8 <__smakebuf_r+0x44>
 80123d4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80123d8:	059a      	lsls	r2, r3, #22
 80123da:	d4ef      	bmi.n	80123bc <__smakebuf_r+0x18>
 80123dc:	f023 0303 	bic.w	r3, r3, #3
 80123e0:	f043 0302 	orr.w	r3, r3, #2
 80123e4:	81a3      	strh	r3, [r4, #12]
 80123e6:	e7e3      	b.n	80123b0 <__smakebuf_r+0xc>
 80123e8:	4b0d      	ldr	r3, [pc, #52]	; (8012420 <__smakebuf_r+0x7c>)
 80123ea:	62b3      	str	r3, [r6, #40]	; 0x28
 80123ec:	89a3      	ldrh	r3, [r4, #12]
 80123ee:	6020      	str	r0, [r4, #0]
 80123f0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80123f4:	81a3      	strh	r3, [r4, #12]
 80123f6:	9b00      	ldr	r3, [sp, #0]
 80123f8:	6163      	str	r3, [r4, #20]
 80123fa:	9b01      	ldr	r3, [sp, #4]
 80123fc:	6120      	str	r0, [r4, #16]
 80123fe:	b15b      	cbz	r3, 8012418 <__smakebuf_r+0x74>
 8012400:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8012404:	4630      	mov	r0, r6
 8012406:	f000 f871 	bl	80124ec <_isatty_r>
 801240a:	b128      	cbz	r0, 8012418 <__smakebuf_r+0x74>
 801240c:	89a3      	ldrh	r3, [r4, #12]
 801240e:	f023 0303 	bic.w	r3, r3, #3
 8012412:	f043 0301 	orr.w	r3, r3, #1
 8012416:	81a3      	strh	r3, [r4, #12]
 8012418:	89a3      	ldrh	r3, [r4, #12]
 801241a:	431d      	orrs	r5, r3
 801241c:	81a5      	strh	r5, [r4, #12]
 801241e:	e7cd      	b.n	80123bc <__smakebuf_r+0x18>
 8012420:	08011609 	.word	0x08011609

08012424 <memmove>:
 8012424:	4288      	cmp	r0, r1
 8012426:	b510      	push	{r4, lr}
 8012428:	eb01 0302 	add.w	r3, r1, r2
 801242c:	d807      	bhi.n	801243e <memmove+0x1a>
 801242e:	1e42      	subs	r2, r0, #1
 8012430:	4299      	cmp	r1, r3
 8012432:	d00a      	beq.n	801244a <memmove+0x26>
 8012434:	f811 4b01 	ldrb.w	r4, [r1], #1
 8012438:	f802 4f01 	strb.w	r4, [r2, #1]!
 801243c:	e7f8      	b.n	8012430 <memmove+0xc>
 801243e:	4283      	cmp	r3, r0
 8012440:	d9f5      	bls.n	801242e <memmove+0xa>
 8012442:	1881      	adds	r1, r0, r2
 8012444:	1ad2      	subs	r2, r2, r3
 8012446:	42d3      	cmn	r3, r2
 8012448:	d100      	bne.n	801244c <memmove+0x28>
 801244a:	bd10      	pop	{r4, pc}
 801244c:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8012450:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8012454:	e7f7      	b.n	8012446 <memmove+0x22>

08012456 <_realloc_r>:
 8012456:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012458:	4607      	mov	r7, r0
 801245a:	4614      	mov	r4, r2
 801245c:	460e      	mov	r6, r1
 801245e:	b921      	cbnz	r1, 801246a <_realloc_r+0x14>
 8012460:	4611      	mov	r1, r2
 8012462:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8012466:	f7fe bff5 	b.w	8011454 <_malloc_r>
 801246a:	b922      	cbnz	r2, 8012476 <_realloc_r+0x20>
 801246c:	f7fe ffa4 	bl	80113b8 <_free_r>
 8012470:	4625      	mov	r5, r4
 8012472:	4628      	mov	r0, r5
 8012474:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8012476:	f000 f849 	bl	801250c <_malloc_usable_size_r>
 801247a:	42a0      	cmp	r0, r4
 801247c:	d20f      	bcs.n	801249e <_realloc_r+0x48>
 801247e:	4621      	mov	r1, r4
 8012480:	4638      	mov	r0, r7
 8012482:	f7fe ffe7 	bl	8011454 <_malloc_r>
 8012486:	4605      	mov	r5, r0
 8012488:	2800      	cmp	r0, #0
 801248a:	d0f2      	beq.n	8012472 <_realloc_r+0x1c>
 801248c:	4631      	mov	r1, r6
 801248e:	4622      	mov	r2, r4
 8012490:	f7fe ff7e 	bl	8011390 <memcpy>
 8012494:	4631      	mov	r1, r6
 8012496:	4638      	mov	r0, r7
 8012498:	f7fe ff8e 	bl	80113b8 <_free_r>
 801249c:	e7e9      	b.n	8012472 <_realloc_r+0x1c>
 801249e:	4635      	mov	r5, r6
 80124a0:	e7e7      	b.n	8012472 <_realloc_r+0x1c>
	...

080124a4 <_read_r>:
 80124a4:	b538      	push	{r3, r4, r5, lr}
 80124a6:	4c07      	ldr	r4, [pc, #28]	; (80124c4 <_read_r+0x20>)
 80124a8:	4605      	mov	r5, r0
 80124aa:	4608      	mov	r0, r1
 80124ac:	4611      	mov	r1, r2
 80124ae:	2200      	movs	r2, #0
 80124b0:	6022      	str	r2, [r4, #0]
 80124b2:	461a      	mov	r2, r3
 80124b4:	f7ef f8a4 	bl	8001600 <_read>
 80124b8:	1c43      	adds	r3, r0, #1
 80124ba:	d102      	bne.n	80124c2 <_read_r+0x1e>
 80124bc:	6823      	ldr	r3, [r4, #0]
 80124be:	b103      	cbz	r3, 80124c2 <_read_r+0x1e>
 80124c0:	602b      	str	r3, [r5, #0]
 80124c2:	bd38      	pop	{r3, r4, r5, pc}
 80124c4:	2400136c 	.word	0x2400136c

080124c8 <_fstat_r>:
 80124c8:	b538      	push	{r3, r4, r5, lr}
 80124ca:	4c07      	ldr	r4, [pc, #28]	; (80124e8 <_fstat_r+0x20>)
 80124cc:	2300      	movs	r3, #0
 80124ce:	4605      	mov	r5, r0
 80124d0:	4608      	mov	r0, r1
 80124d2:	4611      	mov	r1, r2
 80124d4:	6023      	str	r3, [r4, #0]
 80124d6:	f7ef f8d8 	bl	800168a <_fstat>
 80124da:	1c43      	adds	r3, r0, #1
 80124dc:	d102      	bne.n	80124e4 <_fstat_r+0x1c>
 80124de:	6823      	ldr	r3, [r4, #0]
 80124e0:	b103      	cbz	r3, 80124e4 <_fstat_r+0x1c>
 80124e2:	602b      	str	r3, [r5, #0]
 80124e4:	bd38      	pop	{r3, r4, r5, pc}
 80124e6:	bf00      	nop
 80124e8:	2400136c 	.word	0x2400136c

080124ec <_isatty_r>:
 80124ec:	b538      	push	{r3, r4, r5, lr}
 80124ee:	4c06      	ldr	r4, [pc, #24]	; (8012508 <_isatty_r+0x1c>)
 80124f0:	2300      	movs	r3, #0
 80124f2:	4605      	mov	r5, r0
 80124f4:	4608      	mov	r0, r1
 80124f6:	6023      	str	r3, [r4, #0]
 80124f8:	f7ef f8d7 	bl	80016aa <_isatty>
 80124fc:	1c43      	adds	r3, r0, #1
 80124fe:	d102      	bne.n	8012506 <_isatty_r+0x1a>
 8012500:	6823      	ldr	r3, [r4, #0]
 8012502:	b103      	cbz	r3, 8012506 <_isatty_r+0x1a>
 8012504:	602b      	str	r3, [r5, #0]
 8012506:	bd38      	pop	{r3, r4, r5, pc}
 8012508:	2400136c 	.word	0x2400136c

0801250c <_malloc_usable_size_r>:
 801250c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8012510:	1f18      	subs	r0, r3, #4
 8012512:	2b00      	cmp	r3, #0
 8012514:	bfbc      	itt	lt
 8012516:	580b      	ldrlt	r3, [r1, r0]
 8012518:	18c0      	addlt	r0, r0, r3
 801251a:	4770      	bx	lr

0801251c <_init>:
 801251c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801251e:	bf00      	nop
 8012520:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8012522:	bc08      	pop	{r3}
 8012524:	469e      	mov	lr, r3
 8012526:	4770      	bx	lr

08012528 <_fini>:
 8012528:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801252a:	bf00      	nop
 801252c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801252e:	bc08      	pop	{r3}
 8012530:	469e      	mov	lr, r3
 8012532:	4770      	bx	lr

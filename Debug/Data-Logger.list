
Data-Logger.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000195b0  080002a0  080002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000954  08019850  08019850  00029850  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801a1a4  0801a1a4  000301d8  2**0
                  CONTENTS
  4 .ARM          00000008  0801a1a4  0801a1a4  0002a1a4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801a1ac  0801a1ac  000301d8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0801a1ac  0801a1ac  0002a1ac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0801a1b0  0801a1b0  0002a1b0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001d8  24000000  0801a1b4  00030000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000022b0  240001d8  0801a38c  000301d8  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  24002488  0801a38c  00032488  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  000301d8  2**0
                  CONTENTS, READONLY
 12 .debug_info   00049dfb  00000000  00000000  00030206  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00007b2e  00000000  00000000  0007a001  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00002420  00000000  00000000  00081b30  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00002128  00000000  00000000  00083f50  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000430f0  00000000  00000000  00086078  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0002805d  00000000  00000000  000c9168  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    001785ee  00000000  00000000  000f11c5  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  002697b3  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00009f5c  00000000  00000000  00269830  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	; (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	; (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	; (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	240001d8 	.word	0x240001d8
 80002bc:	00000000 	.word	0x00000000
 80002c0:	08019838 	.word	0x08019838

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	; (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	; (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	; (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	240001dc 	.word	0x240001dc
 80002dc:	08019838 	.word	0x08019838

080002e0 <strlen>:
 80002e0:	4603      	mov	r3, r0
 80002e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002e6:	2a00      	cmp	r2, #0
 80002e8:	d1fb      	bne.n	80002e2 <strlen+0x2>
 80002ea:	1a18      	subs	r0, r3, r0
 80002ec:	3801      	subs	r0, #1
 80002ee:	4770      	bx	lr

080002f0 <memchr>:
 80002f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002f4:	2a10      	cmp	r2, #16
 80002f6:	db2b      	blt.n	8000350 <memchr+0x60>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	d008      	beq.n	8000310 <memchr+0x20>
 80002fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000302:	3a01      	subs	r2, #1
 8000304:	428b      	cmp	r3, r1
 8000306:	d02d      	beq.n	8000364 <memchr+0x74>
 8000308:	f010 0f07 	tst.w	r0, #7
 800030c:	b342      	cbz	r2, 8000360 <memchr+0x70>
 800030e:	d1f6      	bne.n	80002fe <memchr+0xe>
 8000310:	b4f0      	push	{r4, r5, r6, r7}
 8000312:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000316:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800031a:	f022 0407 	bic.w	r4, r2, #7
 800031e:	f07f 0700 	mvns.w	r7, #0
 8000322:	2300      	movs	r3, #0
 8000324:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000328:	3c08      	subs	r4, #8
 800032a:	ea85 0501 	eor.w	r5, r5, r1
 800032e:	ea86 0601 	eor.w	r6, r6, r1
 8000332:	fa85 f547 	uadd8	r5, r5, r7
 8000336:	faa3 f587 	sel	r5, r3, r7
 800033a:	fa86 f647 	uadd8	r6, r6, r7
 800033e:	faa5 f687 	sel	r6, r5, r7
 8000342:	b98e      	cbnz	r6, 8000368 <memchr+0x78>
 8000344:	d1ee      	bne.n	8000324 <memchr+0x34>
 8000346:	bcf0      	pop	{r4, r5, r6, r7}
 8000348:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800034c:	f002 0207 	and.w	r2, r2, #7
 8000350:	b132      	cbz	r2, 8000360 <memchr+0x70>
 8000352:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000356:	3a01      	subs	r2, #1
 8000358:	ea83 0301 	eor.w	r3, r3, r1
 800035c:	b113      	cbz	r3, 8000364 <memchr+0x74>
 800035e:	d1f8      	bne.n	8000352 <memchr+0x62>
 8000360:	2000      	movs	r0, #0
 8000362:	4770      	bx	lr
 8000364:	3801      	subs	r0, #1
 8000366:	4770      	bx	lr
 8000368:	2d00      	cmp	r5, #0
 800036a:	bf06      	itte	eq
 800036c:	4635      	moveq	r5, r6
 800036e:	3803      	subeq	r0, #3
 8000370:	3807      	subne	r0, #7
 8000372:	f015 0f01 	tst.w	r5, #1
 8000376:	d107      	bne.n	8000388 <memchr+0x98>
 8000378:	3001      	adds	r0, #1
 800037a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800037e:	bf02      	ittt	eq
 8000380:	3001      	addeq	r0, #1
 8000382:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000386:	3001      	addeq	r0, #1
 8000388:	bcf0      	pop	{r4, r5, r6, r7}
 800038a:	3801      	subs	r0, #1
 800038c:	4770      	bx	lr
 800038e:	bf00      	nop

08000390 <__aeabi_uldivmod>:
 8000390:	b953      	cbnz	r3, 80003a8 <__aeabi_uldivmod+0x18>
 8000392:	b94a      	cbnz	r2, 80003a8 <__aeabi_uldivmod+0x18>
 8000394:	2900      	cmp	r1, #0
 8000396:	bf08      	it	eq
 8000398:	2800      	cmpeq	r0, #0
 800039a:	bf1c      	itt	ne
 800039c:	f04f 31ff 	movne.w	r1, #4294967295
 80003a0:	f04f 30ff 	movne.w	r0, #4294967295
 80003a4:	f000 b972 	b.w	800068c <__aeabi_idiv0>
 80003a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80003ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003b0:	f000 f806 	bl	80003c0 <__udivmoddi4>
 80003b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003bc:	b004      	add	sp, #16
 80003be:	4770      	bx	lr

080003c0 <__udivmoddi4>:
 80003c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003c4:	9e08      	ldr	r6, [sp, #32]
 80003c6:	4604      	mov	r4, r0
 80003c8:	4688      	mov	r8, r1
 80003ca:	2b00      	cmp	r3, #0
 80003cc:	d14b      	bne.n	8000466 <__udivmoddi4+0xa6>
 80003ce:	428a      	cmp	r2, r1
 80003d0:	4615      	mov	r5, r2
 80003d2:	d967      	bls.n	80004a4 <__udivmoddi4+0xe4>
 80003d4:	fab2 f282 	clz	r2, r2
 80003d8:	b14a      	cbz	r2, 80003ee <__udivmoddi4+0x2e>
 80003da:	f1c2 0720 	rsb	r7, r2, #32
 80003de:	fa01 f302 	lsl.w	r3, r1, r2
 80003e2:	fa20 f707 	lsr.w	r7, r0, r7
 80003e6:	4095      	lsls	r5, r2
 80003e8:	ea47 0803 	orr.w	r8, r7, r3
 80003ec:	4094      	lsls	r4, r2
 80003ee:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80003f2:	0c23      	lsrs	r3, r4, #16
 80003f4:	fbb8 f7fe 	udiv	r7, r8, lr
 80003f8:	fa1f fc85 	uxth.w	ip, r5
 80003fc:	fb0e 8817 	mls	r8, lr, r7, r8
 8000400:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000404:	fb07 f10c 	mul.w	r1, r7, ip
 8000408:	4299      	cmp	r1, r3
 800040a:	d909      	bls.n	8000420 <__udivmoddi4+0x60>
 800040c:	18eb      	adds	r3, r5, r3
 800040e:	f107 30ff 	add.w	r0, r7, #4294967295
 8000412:	f080 811b 	bcs.w	800064c <__udivmoddi4+0x28c>
 8000416:	4299      	cmp	r1, r3
 8000418:	f240 8118 	bls.w	800064c <__udivmoddi4+0x28c>
 800041c:	3f02      	subs	r7, #2
 800041e:	442b      	add	r3, r5
 8000420:	1a5b      	subs	r3, r3, r1
 8000422:	b2a4      	uxth	r4, r4
 8000424:	fbb3 f0fe 	udiv	r0, r3, lr
 8000428:	fb0e 3310 	mls	r3, lr, r0, r3
 800042c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000430:	fb00 fc0c 	mul.w	ip, r0, ip
 8000434:	45a4      	cmp	ip, r4
 8000436:	d909      	bls.n	800044c <__udivmoddi4+0x8c>
 8000438:	192c      	adds	r4, r5, r4
 800043a:	f100 33ff 	add.w	r3, r0, #4294967295
 800043e:	f080 8107 	bcs.w	8000650 <__udivmoddi4+0x290>
 8000442:	45a4      	cmp	ip, r4
 8000444:	f240 8104 	bls.w	8000650 <__udivmoddi4+0x290>
 8000448:	3802      	subs	r0, #2
 800044a:	442c      	add	r4, r5
 800044c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000450:	eba4 040c 	sub.w	r4, r4, ip
 8000454:	2700      	movs	r7, #0
 8000456:	b11e      	cbz	r6, 8000460 <__udivmoddi4+0xa0>
 8000458:	40d4      	lsrs	r4, r2
 800045a:	2300      	movs	r3, #0
 800045c:	e9c6 4300 	strd	r4, r3, [r6]
 8000460:	4639      	mov	r1, r7
 8000462:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000466:	428b      	cmp	r3, r1
 8000468:	d909      	bls.n	800047e <__udivmoddi4+0xbe>
 800046a:	2e00      	cmp	r6, #0
 800046c:	f000 80eb 	beq.w	8000646 <__udivmoddi4+0x286>
 8000470:	2700      	movs	r7, #0
 8000472:	e9c6 0100 	strd	r0, r1, [r6]
 8000476:	4638      	mov	r0, r7
 8000478:	4639      	mov	r1, r7
 800047a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800047e:	fab3 f783 	clz	r7, r3
 8000482:	2f00      	cmp	r7, #0
 8000484:	d147      	bne.n	8000516 <__udivmoddi4+0x156>
 8000486:	428b      	cmp	r3, r1
 8000488:	d302      	bcc.n	8000490 <__udivmoddi4+0xd0>
 800048a:	4282      	cmp	r2, r0
 800048c:	f200 80fa 	bhi.w	8000684 <__udivmoddi4+0x2c4>
 8000490:	1a84      	subs	r4, r0, r2
 8000492:	eb61 0303 	sbc.w	r3, r1, r3
 8000496:	2001      	movs	r0, #1
 8000498:	4698      	mov	r8, r3
 800049a:	2e00      	cmp	r6, #0
 800049c:	d0e0      	beq.n	8000460 <__udivmoddi4+0xa0>
 800049e:	e9c6 4800 	strd	r4, r8, [r6]
 80004a2:	e7dd      	b.n	8000460 <__udivmoddi4+0xa0>
 80004a4:	b902      	cbnz	r2, 80004a8 <__udivmoddi4+0xe8>
 80004a6:	deff      	udf	#255	; 0xff
 80004a8:	fab2 f282 	clz	r2, r2
 80004ac:	2a00      	cmp	r2, #0
 80004ae:	f040 808f 	bne.w	80005d0 <__udivmoddi4+0x210>
 80004b2:	1b49      	subs	r1, r1, r5
 80004b4:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80004b8:	fa1f f885 	uxth.w	r8, r5
 80004bc:	2701      	movs	r7, #1
 80004be:	fbb1 fcfe 	udiv	ip, r1, lr
 80004c2:	0c23      	lsrs	r3, r4, #16
 80004c4:	fb0e 111c 	mls	r1, lr, ip, r1
 80004c8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004cc:	fb08 f10c 	mul.w	r1, r8, ip
 80004d0:	4299      	cmp	r1, r3
 80004d2:	d907      	bls.n	80004e4 <__udivmoddi4+0x124>
 80004d4:	18eb      	adds	r3, r5, r3
 80004d6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80004da:	d202      	bcs.n	80004e2 <__udivmoddi4+0x122>
 80004dc:	4299      	cmp	r1, r3
 80004de:	f200 80cd 	bhi.w	800067c <__udivmoddi4+0x2bc>
 80004e2:	4684      	mov	ip, r0
 80004e4:	1a59      	subs	r1, r3, r1
 80004e6:	b2a3      	uxth	r3, r4
 80004e8:	fbb1 f0fe 	udiv	r0, r1, lr
 80004ec:	fb0e 1410 	mls	r4, lr, r0, r1
 80004f0:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 80004f4:	fb08 f800 	mul.w	r8, r8, r0
 80004f8:	45a0      	cmp	r8, r4
 80004fa:	d907      	bls.n	800050c <__udivmoddi4+0x14c>
 80004fc:	192c      	adds	r4, r5, r4
 80004fe:	f100 33ff 	add.w	r3, r0, #4294967295
 8000502:	d202      	bcs.n	800050a <__udivmoddi4+0x14a>
 8000504:	45a0      	cmp	r8, r4
 8000506:	f200 80b6 	bhi.w	8000676 <__udivmoddi4+0x2b6>
 800050a:	4618      	mov	r0, r3
 800050c:	eba4 0408 	sub.w	r4, r4, r8
 8000510:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000514:	e79f      	b.n	8000456 <__udivmoddi4+0x96>
 8000516:	f1c7 0c20 	rsb	ip, r7, #32
 800051a:	40bb      	lsls	r3, r7
 800051c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000520:	ea4e 0e03 	orr.w	lr, lr, r3
 8000524:	fa01 f407 	lsl.w	r4, r1, r7
 8000528:	fa20 f50c 	lsr.w	r5, r0, ip
 800052c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000530:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000534:	4325      	orrs	r5, r4
 8000536:	fbb3 f9f8 	udiv	r9, r3, r8
 800053a:	0c2c      	lsrs	r4, r5, #16
 800053c:	fb08 3319 	mls	r3, r8, r9, r3
 8000540:	fa1f fa8e 	uxth.w	sl, lr
 8000544:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000548:	fb09 f40a 	mul.w	r4, r9, sl
 800054c:	429c      	cmp	r4, r3
 800054e:	fa02 f207 	lsl.w	r2, r2, r7
 8000552:	fa00 f107 	lsl.w	r1, r0, r7
 8000556:	d90b      	bls.n	8000570 <__udivmoddi4+0x1b0>
 8000558:	eb1e 0303 	adds.w	r3, lr, r3
 800055c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000560:	f080 8087 	bcs.w	8000672 <__udivmoddi4+0x2b2>
 8000564:	429c      	cmp	r4, r3
 8000566:	f240 8084 	bls.w	8000672 <__udivmoddi4+0x2b2>
 800056a:	f1a9 0902 	sub.w	r9, r9, #2
 800056e:	4473      	add	r3, lr
 8000570:	1b1b      	subs	r3, r3, r4
 8000572:	b2ad      	uxth	r5, r5
 8000574:	fbb3 f0f8 	udiv	r0, r3, r8
 8000578:	fb08 3310 	mls	r3, r8, r0, r3
 800057c:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000580:	fb00 fa0a 	mul.w	sl, r0, sl
 8000584:	45a2      	cmp	sl, r4
 8000586:	d908      	bls.n	800059a <__udivmoddi4+0x1da>
 8000588:	eb1e 0404 	adds.w	r4, lr, r4
 800058c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000590:	d26b      	bcs.n	800066a <__udivmoddi4+0x2aa>
 8000592:	45a2      	cmp	sl, r4
 8000594:	d969      	bls.n	800066a <__udivmoddi4+0x2aa>
 8000596:	3802      	subs	r0, #2
 8000598:	4474      	add	r4, lr
 800059a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800059e:	fba0 8902 	umull	r8, r9, r0, r2
 80005a2:	eba4 040a 	sub.w	r4, r4, sl
 80005a6:	454c      	cmp	r4, r9
 80005a8:	46c2      	mov	sl, r8
 80005aa:	464b      	mov	r3, r9
 80005ac:	d354      	bcc.n	8000658 <__udivmoddi4+0x298>
 80005ae:	d051      	beq.n	8000654 <__udivmoddi4+0x294>
 80005b0:	2e00      	cmp	r6, #0
 80005b2:	d069      	beq.n	8000688 <__udivmoddi4+0x2c8>
 80005b4:	ebb1 050a 	subs.w	r5, r1, sl
 80005b8:	eb64 0403 	sbc.w	r4, r4, r3
 80005bc:	fa04 fc0c 	lsl.w	ip, r4, ip
 80005c0:	40fd      	lsrs	r5, r7
 80005c2:	40fc      	lsrs	r4, r7
 80005c4:	ea4c 0505 	orr.w	r5, ip, r5
 80005c8:	e9c6 5400 	strd	r5, r4, [r6]
 80005cc:	2700      	movs	r7, #0
 80005ce:	e747      	b.n	8000460 <__udivmoddi4+0xa0>
 80005d0:	f1c2 0320 	rsb	r3, r2, #32
 80005d4:	fa20 f703 	lsr.w	r7, r0, r3
 80005d8:	4095      	lsls	r5, r2
 80005da:	fa01 f002 	lsl.w	r0, r1, r2
 80005de:	fa21 f303 	lsr.w	r3, r1, r3
 80005e2:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80005e6:	4338      	orrs	r0, r7
 80005e8:	0c01      	lsrs	r1, r0, #16
 80005ea:	fbb3 f7fe 	udiv	r7, r3, lr
 80005ee:	fa1f f885 	uxth.w	r8, r5
 80005f2:	fb0e 3317 	mls	r3, lr, r7, r3
 80005f6:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80005fa:	fb07 f308 	mul.w	r3, r7, r8
 80005fe:	428b      	cmp	r3, r1
 8000600:	fa04 f402 	lsl.w	r4, r4, r2
 8000604:	d907      	bls.n	8000616 <__udivmoddi4+0x256>
 8000606:	1869      	adds	r1, r5, r1
 8000608:	f107 3cff 	add.w	ip, r7, #4294967295
 800060c:	d22f      	bcs.n	800066e <__udivmoddi4+0x2ae>
 800060e:	428b      	cmp	r3, r1
 8000610:	d92d      	bls.n	800066e <__udivmoddi4+0x2ae>
 8000612:	3f02      	subs	r7, #2
 8000614:	4429      	add	r1, r5
 8000616:	1acb      	subs	r3, r1, r3
 8000618:	b281      	uxth	r1, r0
 800061a:	fbb3 f0fe 	udiv	r0, r3, lr
 800061e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000622:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000626:	fb00 f308 	mul.w	r3, r0, r8
 800062a:	428b      	cmp	r3, r1
 800062c:	d907      	bls.n	800063e <__udivmoddi4+0x27e>
 800062e:	1869      	adds	r1, r5, r1
 8000630:	f100 3cff 	add.w	ip, r0, #4294967295
 8000634:	d217      	bcs.n	8000666 <__udivmoddi4+0x2a6>
 8000636:	428b      	cmp	r3, r1
 8000638:	d915      	bls.n	8000666 <__udivmoddi4+0x2a6>
 800063a:	3802      	subs	r0, #2
 800063c:	4429      	add	r1, r5
 800063e:	1ac9      	subs	r1, r1, r3
 8000640:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000644:	e73b      	b.n	80004be <__udivmoddi4+0xfe>
 8000646:	4637      	mov	r7, r6
 8000648:	4630      	mov	r0, r6
 800064a:	e709      	b.n	8000460 <__udivmoddi4+0xa0>
 800064c:	4607      	mov	r7, r0
 800064e:	e6e7      	b.n	8000420 <__udivmoddi4+0x60>
 8000650:	4618      	mov	r0, r3
 8000652:	e6fb      	b.n	800044c <__udivmoddi4+0x8c>
 8000654:	4541      	cmp	r1, r8
 8000656:	d2ab      	bcs.n	80005b0 <__udivmoddi4+0x1f0>
 8000658:	ebb8 0a02 	subs.w	sl, r8, r2
 800065c:	eb69 020e 	sbc.w	r2, r9, lr
 8000660:	3801      	subs	r0, #1
 8000662:	4613      	mov	r3, r2
 8000664:	e7a4      	b.n	80005b0 <__udivmoddi4+0x1f0>
 8000666:	4660      	mov	r0, ip
 8000668:	e7e9      	b.n	800063e <__udivmoddi4+0x27e>
 800066a:	4618      	mov	r0, r3
 800066c:	e795      	b.n	800059a <__udivmoddi4+0x1da>
 800066e:	4667      	mov	r7, ip
 8000670:	e7d1      	b.n	8000616 <__udivmoddi4+0x256>
 8000672:	4681      	mov	r9, r0
 8000674:	e77c      	b.n	8000570 <__udivmoddi4+0x1b0>
 8000676:	3802      	subs	r0, #2
 8000678:	442c      	add	r4, r5
 800067a:	e747      	b.n	800050c <__udivmoddi4+0x14c>
 800067c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000680:	442b      	add	r3, r5
 8000682:	e72f      	b.n	80004e4 <__udivmoddi4+0x124>
 8000684:	4638      	mov	r0, r7
 8000686:	e708      	b.n	800049a <__udivmoddi4+0xda>
 8000688:	4637      	mov	r7, r6
 800068a:	e6e9      	b.n	8000460 <__udivmoddi4+0xa0>

0800068c <__aeabi_idiv0>:
 800068c:	4770      	bx	lr
 800068e:	bf00      	nop

08000690 <FDCAN_Config>:
#include <myprintf.h>

int FDCAN_Flag = 0;
int CAN_Flag = 0;

void FDCAN_Config(FDCAN_HandleTypeDef *hfdcan){
 8000690:	b580      	push	{r7, lr}
 8000692:	b08c      	sub	sp, #48	; 0x30
 8000694:	af02      	add	r7, sp, #8
 8000696:	6078      	str	r0, [r7, #4]
	FDCAN_FilterTypeDef sFilterConfig;

	  /* Configure Rx filter */
	  sFilterConfig.IdType = FDCAN_STANDARD_ID;
 8000698:	2300      	movs	r3, #0
 800069a:	60bb      	str	r3, [r7, #8]
	  sFilterConfig.FilterIndex = 0;
 800069c:	2300      	movs	r3, #0
 800069e:	60fb      	str	r3, [r7, #12]
	  sFilterConfig.FilterType = FDCAN_FILTER_MASK;
 80006a0:	2302      	movs	r3, #2
 80006a2:	613b      	str	r3, [r7, #16]
	  sFilterConfig.FilterConfig = FDCAN_FILTER_TO_RXFIFO0;
 80006a4:	2301      	movs	r3, #1
 80006a6:	617b      	str	r3, [r7, #20]
	  sFilterConfig.FilterID1 = 0x321;
 80006a8:	f240 3321 	movw	r3, #801	; 0x321
 80006ac:	61bb      	str	r3, [r7, #24]
	  sFilterConfig.FilterID2 = 0x7FF;
 80006ae:	f240 73ff 	movw	r3, #2047	; 0x7ff
 80006b2:	61fb      	str	r3, [r7, #28]
	  if (HAL_FDCAN_ConfigFilter(hfdcan, &sFilterConfig) == HAL_OK)
 80006b4:	f107 0308 	add.w	r3, r7, #8
 80006b8:	4619      	mov	r1, r3
 80006ba:	6878      	ldr	r0, [r7, #4]
 80006bc:	f005 fc20 	bl	8005f00 <HAL_FDCAN_ConfigFilter>
	  }

	  /* Configure global filter:
	     Filter all remote frames with STD and EXT ID
	     Reject non matching frames with STD ID and EXT ID */
	  if (HAL_FDCAN_ConfigGlobalFilter(hfdcan, FDCAN_REJECT, FDCAN_REJECT, FDCAN_FILTER_REMOTE, FDCAN_FILTER_REMOTE) != HAL_OK)
 80006c0:	2300      	movs	r3, #0
 80006c2:	9300      	str	r3, [sp, #0]
 80006c4:	2300      	movs	r3, #0
 80006c6:	2202      	movs	r2, #2
 80006c8:	2102      	movs	r1, #2
 80006ca:	6878      	ldr	r0, [r7, #4]
 80006cc:	f005 fc8e 	bl	8005fec <HAL_FDCAN_ConfigGlobalFilter>
 80006d0:	4603      	mov	r3, r0
 80006d2:	2b00      	cmp	r3, #0
 80006d4:	d001      	beq.n	80006da <FDCAN_Config+0x4a>
	  {
	    Error_Handler();
 80006d6:	f002 fb27 	bl	8002d28 <Error_Handler>
	  }
	if (HAL_FDCAN_Start(hfdcan) != HAL_OK)
 80006da:	6878      	ldr	r0, [r7, #4]
 80006dc:	f005 fcd6 	bl	800608c <HAL_FDCAN_Start>
 80006e0:	4603      	mov	r3, r0
 80006e2:	2b00      	cmp	r3, #0
 80006e4:	d001      	beq.n	80006ea <FDCAN_Config+0x5a>
	  {
	    Error_Handler();
 80006e6:	f002 fb1f 	bl	8002d28 <Error_Handler>
	  }
	if (HAL_FDCAN_ActivateNotification(hfdcan, FDCAN_IT_RX_FIFO0_NEW_MESSAGE, 0) != HAL_OK)
 80006ea:	2200      	movs	r2, #0
 80006ec:	2101      	movs	r1, #1
 80006ee:	6878      	ldr	r0, [r7, #4]
 80006f0:	f005 fe56 	bl	80063a0 <HAL_FDCAN_ActivateNotification>
 80006f4:	4603      	mov	r3, r0
 80006f6:	2b00      	cmp	r3, #0
 80006f8:	d001      	beq.n	80006fe <FDCAN_Config+0x6e>
	  {
	    /* Notification Error */
	    Error_Handler();
 80006fa:	f002 fb15 	bl	8002d28 <Error_Handler>
	  }
	HAL_FDCAN_EnableTxDelayCompensation(hfdcan);
 80006fe:	6878      	ldr	r0, [r7, #4]
 8000700:	f005 fca1 	bl	8006046 <HAL_FDCAN_EnableTxDelayCompensation>

}
 8000704:	bf00      	nop
 8000706:	3728      	adds	r7, #40	; 0x28
 8000708:	46bd      	mov	sp, r7
 800070a:	bd80      	pop	{r7, pc}

0800070c <HAL_FDCAN_RxFifo0Callback>:

void HAL_FDCAN_RxFifo0Callback(FDCAN_HandleTypeDef *hfdcan1, uint32_t RxFifo0ITs)
{
 800070c:	b580      	push	{r7, lr}
 800070e:	b084      	sub	sp, #16
 8000710:	af00      	add	r7, sp, #0
 8000712:	6078      	str	r0, [r7, #4]
 8000714:	6039      	str	r1, [r7, #0]
	if (HAL_FDCAN_GetRxMessage(hfdcan1, FDCAN_RX_FIFO0, &RxHeader, RxData) == HAL_OK)
 8000716:	4b91      	ldr	r3, [pc, #580]	; (800095c <HAL_FDCAN_RxFifo0Callback+0x250>)
 8000718:	4a91      	ldr	r2, [pc, #580]	; (8000960 <HAL_FDCAN_RxFifo0Callback+0x254>)
 800071a:	2140      	movs	r1, #64	; 0x40
 800071c:	6878      	ldr	r0, [r7, #4]
 800071e:	f005 fce1 	bl	80060e4 <HAL_FDCAN_GetRxMessage>
 8000722:	4603      	mov	r3, r0
 8000724:	2b00      	cmp	r3, #0
 8000726:	f040 8114 	bne.w	8000952 <HAL_FDCAN_RxFifo0Callback+0x246>
			      {
					uint32_t time = HAL_GetTick();
 800072a:	f002 ffe5 	bl	80036f8 <HAL_GetTick>
 800072e:	60f8      	str	r0, [r7, #12]
					HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 8000730:	2101      	movs	r1, #1
 8000732:	488c      	ldr	r0, [pc, #560]	; (8000964 <HAL_FDCAN_RxFifo0Callback+0x258>)
 8000734:	f006 fd1f 	bl	8007176 <HAL_GPIO_TogglePin>
					printf("Packet Acquired!\n");
 8000738:	488b      	ldr	r0, [pc, #556]	; (8000968 <HAL_FDCAN_RxFifo0Callback+0x25c>)
 800073a:	f018 f863 	bl	8018804 <puts>
					if(RxHeader.FDFormat == FDCAN_CLASSIC_CAN){
 800073e:	4b88      	ldr	r3, [pc, #544]	; (8000960 <HAL_FDCAN_RxFifo0Callback+0x254>)
 8000740:	699b      	ldr	r3, [r3, #24]
 8000742:	2b00      	cmp	r3, #0
 8000744:	d17f      	bne.n	8000846 <HAL_FDCAN_RxFifo0Callback+0x13a>
						CanFrame.id = RxHeader.Identifier;
 8000746:	4b86      	ldr	r3, [pc, #536]	; (8000960 <HAL_FDCAN_RxFifo0Callback+0x254>)
 8000748:	681b      	ldr	r3, [r3, #0]
 800074a:	4a88      	ldr	r2, [pc, #544]	; (800096c <HAL_FDCAN_RxFifo0Callback+0x260>)
 800074c:	6013      	str	r3, [r2, #0]
						switch(RxHeader.DataLength/65536){
 800074e:	4b84      	ldr	r3, [pc, #528]	; (8000960 <HAL_FDCAN_RxFifo0Callback+0x254>)
 8000750:	68db      	ldr	r3, [r3, #12]
 8000752:	0c1b      	lsrs	r3, r3, #16
 8000754:	3b01      	subs	r3, #1
 8000756:	2b0e      	cmp	r3, #14
 8000758:	d85c      	bhi.n	8000814 <HAL_FDCAN_RxFifo0Callback+0x108>
 800075a:	a201      	add	r2, pc, #4	; (adr r2, 8000760 <HAL_FDCAN_RxFifo0Callback+0x54>)
 800075c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000760:	0800079d 	.word	0x0800079d
 8000764:	080007a5 	.word	0x080007a5
 8000768:	080007ad 	.word	0x080007ad
 800076c:	080007b5 	.word	0x080007b5
 8000770:	080007bd 	.word	0x080007bd
 8000774:	080007c5 	.word	0x080007c5
 8000778:	080007cd 	.word	0x080007cd
 800077c:	080007d5 	.word	0x080007d5
 8000780:	080007dd 	.word	0x080007dd
 8000784:	080007e5 	.word	0x080007e5
 8000788:	080007ed 	.word	0x080007ed
 800078c:	080007f5 	.word	0x080007f5
 8000790:	080007fd 	.word	0x080007fd
 8000794:	08000805 	.word	0x08000805
 8000798:	0800080d 	.word	0x0800080d
							case 1:
								CanFrame.length = 1;
 800079c:	4b73      	ldr	r3, [pc, #460]	; (800096c <HAL_FDCAN_RxFifo0Callback+0x260>)
 800079e:	2201      	movs	r2, #1
 80007a0:	715a      	strb	r2, [r3, #5]
								break;
 80007a2:	e037      	b.n	8000814 <HAL_FDCAN_RxFifo0Callback+0x108>
							case 2:
								CanFrame.length = 2;
 80007a4:	4b71      	ldr	r3, [pc, #452]	; (800096c <HAL_FDCAN_RxFifo0Callback+0x260>)
 80007a6:	2202      	movs	r2, #2
 80007a8:	715a      	strb	r2, [r3, #5]
								break;
 80007aa:	e033      	b.n	8000814 <HAL_FDCAN_RxFifo0Callback+0x108>
							case 3:
								CanFrame.length = 3;
 80007ac:	4b6f      	ldr	r3, [pc, #444]	; (800096c <HAL_FDCAN_RxFifo0Callback+0x260>)
 80007ae:	2203      	movs	r2, #3
 80007b0:	715a      	strb	r2, [r3, #5]
								break;
 80007b2:	e02f      	b.n	8000814 <HAL_FDCAN_RxFifo0Callback+0x108>
							case 4:
								CanFrame.length = 4;
 80007b4:	4b6d      	ldr	r3, [pc, #436]	; (800096c <HAL_FDCAN_RxFifo0Callback+0x260>)
 80007b6:	2204      	movs	r2, #4
 80007b8:	715a      	strb	r2, [r3, #5]
								break;
 80007ba:	e02b      	b.n	8000814 <HAL_FDCAN_RxFifo0Callback+0x108>
							case 5:
								CanFrame.length = 5;
 80007bc:	4b6b      	ldr	r3, [pc, #428]	; (800096c <HAL_FDCAN_RxFifo0Callback+0x260>)
 80007be:	2205      	movs	r2, #5
 80007c0:	715a      	strb	r2, [r3, #5]
								break;
 80007c2:	e027      	b.n	8000814 <HAL_FDCAN_RxFifo0Callback+0x108>
							case 6:
								CanFrame.length = 6;
 80007c4:	4b69      	ldr	r3, [pc, #420]	; (800096c <HAL_FDCAN_RxFifo0Callback+0x260>)
 80007c6:	2206      	movs	r2, #6
 80007c8:	715a      	strb	r2, [r3, #5]
								break;
 80007ca:	e023      	b.n	8000814 <HAL_FDCAN_RxFifo0Callback+0x108>
							case 7:
								CanFrame.length = 7;
 80007cc:	4b67      	ldr	r3, [pc, #412]	; (800096c <HAL_FDCAN_RxFifo0Callback+0x260>)
 80007ce:	2207      	movs	r2, #7
 80007d0:	715a      	strb	r2, [r3, #5]
								break;
 80007d2:	e01f      	b.n	8000814 <HAL_FDCAN_RxFifo0Callback+0x108>
							case 8:
								CanFrame.length = 8;
 80007d4:	4b65      	ldr	r3, [pc, #404]	; (800096c <HAL_FDCAN_RxFifo0Callback+0x260>)
 80007d6:	2208      	movs	r2, #8
 80007d8:	715a      	strb	r2, [r3, #5]
								break;
 80007da:	e01b      	b.n	8000814 <HAL_FDCAN_RxFifo0Callback+0x108>
							case 9:
								CanFrame.length = 12;
 80007dc:	4b63      	ldr	r3, [pc, #396]	; (800096c <HAL_FDCAN_RxFifo0Callback+0x260>)
 80007de:	220c      	movs	r2, #12
 80007e0:	715a      	strb	r2, [r3, #5]
								break;
 80007e2:	e017      	b.n	8000814 <HAL_FDCAN_RxFifo0Callback+0x108>
							case 10:
								CanFrame.length = 16;
 80007e4:	4b61      	ldr	r3, [pc, #388]	; (800096c <HAL_FDCAN_RxFifo0Callback+0x260>)
 80007e6:	2210      	movs	r2, #16
 80007e8:	715a      	strb	r2, [r3, #5]
								break;
 80007ea:	e013      	b.n	8000814 <HAL_FDCAN_RxFifo0Callback+0x108>
							case 11:
								CanFrame.length = 20;
 80007ec:	4b5f      	ldr	r3, [pc, #380]	; (800096c <HAL_FDCAN_RxFifo0Callback+0x260>)
 80007ee:	2214      	movs	r2, #20
 80007f0:	715a      	strb	r2, [r3, #5]
								break;
 80007f2:	e00f      	b.n	8000814 <HAL_FDCAN_RxFifo0Callback+0x108>
							case 12:
								CanFrame.length = 24;
 80007f4:	4b5d      	ldr	r3, [pc, #372]	; (800096c <HAL_FDCAN_RxFifo0Callback+0x260>)
 80007f6:	2218      	movs	r2, #24
 80007f8:	715a      	strb	r2, [r3, #5]
								break;
 80007fa:	e00b      	b.n	8000814 <HAL_FDCAN_RxFifo0Callback+0x108>
							case 13:
								CanFrame.length = 32;
 80007fc:	4b5b      	ldr	r3, [pc, #364]	; (800096c <HAL_FDCAN_RxFifo0Callback+0x260>)
 80007fe:	2220      	movs	r2, #32
 8000800:	715a      	strb	r2, [r3, #5]
								break;
 8000802:	e007      	b.n	8000814 <HAL_FDCAN_RxFifo0Callback+0x108>
							case 14:
								CanFrame.length = 48;
 8000804:	4b59      	ldr	r3, [pc, #356]	; (800096c <HAL_FDCAN_RxFifo0Callback+0x260>)
 8000806:	2230      	movs	r2, #48	; 0x30
 8000808:	715a      	strb	r2, [r3, #5]
								break;
 800080a:	e003      	b.n	8000814 <HAL_FDCAN_RxFifo0Callback+0x108>
							case 15:
								CanFrame.length = 64;
 800080c:	4b57      	ldr	r3, [pc, #348]	; (800096c <HAL_FDCAN_RxFifo0Callback+0x260>)
 800080e:	2240      	movs	r2, #64	; 0x40
 8000810:	715a      	strb	r2, [r3, #5]
								break;
 8000812:	bf00      	nop
						}
						CanFrame.time = time;
 8000814:	4a55      	ldr	r2, [pc, #340]	; (800096c <HAL_FDCAN_RxFifo0Callback+0x260>)
 8000816:	68fb      	ldr	r3, [r7, #12]
 8000818:	6093      	str	r3, [r2, #8]
						CAN_Flag = 1;
 800081a:	4b55      	ldr	r3, [pc, #340]	; (8000970 <HAL_FDCAN_RxFifo0Callback+0x264>)
 800081c:	2201      	movs	r2, #1
 800081e:	601a      	str	r2, [r3, #0]
						memcpy(CanFrame.data.bytes, RxData, CanFrame.length);
 8000820:	4b52      	ldr	r3, [pc, #328]	; (800096c <HAL_FDCAN_RxFifo0Callback+0x260>)
 8000822:	795b      	ldrb	r3, [r3, #5]
 8000824:	461a      	mov	r2, r3
 8000826:	494d      	ldr	r1, [pc, #308]	; (800095c <HAL_FDCAN_RxFifo0Callback+0x250>)
 8000828:	4852      	ldr	r0, [pc, #328]	; (8000974 <HAL_FDCAN_RxFifo0Callback+0x268>)
 800082a:	f017 febb 	bl	80185a4 <memcpy>
						if(RxHeader.IdType == FDCAN_EXTENDED_ID){
 800082e:	4b4c      	ldr	r3, [pc, #304]	; (8000960 <HAL_FDCAN_RxFifo0Callback+0x254>)
 8000830:	685b      	ldr	r3, [r3, #4]
 8000832:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000836:	d103      	bne.n	8000840 <HAL_FDCAN_RxFifo0Callback+0x134>
							CanFrame.extended = 1;
 8000838:	4b4c      	ldr	r3, [pc, #304]	; (800096c <HAL_FDCAN_RxFifo0Callback+0x260>)
 800083a:	2201      	movs	r2, #1
 800083c:	711a      	strb	r2, [r3, #4]
 800083e:	e002      	b.n	8000846 <HAL_FDCAN_RxFifo0Callback+0x13a>
						}
						else{
							CanFrame.extended = 0;
 8000840:	4b4a      	ldr	r3, [pc, #296]	; (800096c <HAL_FDCAN_RxFifo0Callback+0x260>)
 8000842:	2200      	movs	r2, #0
 8000844:	711a      	strb	r2, [r3, #4]
						}
					}
					if(RxHeader.FDFormat == FDCAN_FD_CAN){
 8000846:	4b46      	ldr	r3, [pc, #280]	; (8000960 <HAL_FDCAN_RxFifo0Callback+0x254>)
 8000848:	699b      	ldr	r3, [r3, #24]
 800084a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800084e:	f040 8080 	bne.w	8000952 <HAL_FDCAN_RxFifo0Callback+0x246>
						CanFDFrame.id = RxHeader.Identifier;
 8000852:	4b43      	ldr	r3, [pc, #268]	; (8000960 <HAL_FDCAN_RxFifo0Callback+0x254>)
 8000854:	681b      	ldr	r3, [r3, #0]
 8000856:	4a48      	ldr	r2, [pc, #288]	; (8000978 <HAL_FDCAN_RxFifo0Callback+0x26c>)
 8000858:	6013      	str	r3, [r2, #0]

						switch(RxHeader.DataLength/65536){
 800085a:	4b41      	ldr	r3, [pc, #260]	; (8000960 <HAL_FDCAN_RxFifo0Callback+0x254>)
 800085c:	68db      	ldr	r3, [r3, #12]
 800085e:	0c1b      	lsrs	r3, r3, #16
 8000860:	3b01      	subs	r3, #1
 8000862:	2b0e      	cmp	r3, #14
 8000864:	d85c      	bhi.n	8000920 <HAL_FDCAN_RxFifo0Callback+0x214>
 8000866:	a201      	add	r2, pc, #4	; (adr r2, 800086c <HAL_FDCAN_RxFifo0Callback+0x160>)
 8000868:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800086c:	080008a9 	.word	0x080008a9
 8000870:	080008b1 	.word	0x080008b1
 8000874:	080008b9 	.word	0x080008b9
 8000878:	080008c1 	.word	0x080008c1
 800087c:	080008c9 	.word	0x080008c9
 8000880:	080008d1 	.word	0x080008d1
 8000884:	080008d9 	.word	0x080008d9
 8000888:	080008e1 	.word	0x080008e1
 800088c:	080008e9 	.word	0x080008e9
 8000890:	080008f1 	.word	0x080008f1
 8000894:	080008f9 	.word	0x080008f9
 8000898:	08000901 	.word	0x08000901
 800089c:	08000909 	.word	0x08000909
 80008a0:	08000911 	.word	0x08000911
 80008a4:	08000919 	.word	0x08000919
							case 1:
								CanFDFrame.length = 1;
 80008a8:	4b33      	ldr	r3, [pc, #204]	; (8000978 <HAL_FDCAN_RxFifo0Callback+0x26c>)
 80008aa:	2201      	movs	r2, #1
 80008ac:	609a      	str	r2, [r3, #8]
								break;
 80008ae:	e037      	b.n	8000920 <HAL_FDCAN_RxFifo0Callback+0x214>
							case 2:
								CanFDFrame.length = 2;
 80008b0:	4b31      	ldr	r3, [pc, #196]	; (8000978 <HAL_FDCAN_RxFifo0Callback+0x26c>)
 80008b2:	2202      	movs	r2, #2
 80008b4:	609a      	str	r2, [r3, #8]
								break;
 80008b6:	e033      	b.n	8000920 <HAL_FDCAN_RxFifo0Callback+0x214>
							case 3:
								CanFDFrame.length = 3;
 80008b8:	4b2f      	ldr	r3, [pc, #188]	; (8000978 <HAL_FDCAN_RxFifo0Callback+0x26c>)
 80008ba:	2203      	movs	r2, #3
 80008bc:	609a      	str	r2, [r3, #8]
								break;
 80008be:	e02f      	b.n	8000920 <HAL_FDCAN_RxFifo0Callback+0x214>
							case 4:
								CanFDFrame.length = 4;
 80008c0:	4b2d      	ldr	r3, [pc, #180]	; (8000978 <HAL_FDCAN_RxFifo0Callback+0x26c>)
 80008c2:	2204      	movs	r2, #4
 80008c4:	609a      	str	r2, [r3, #8]
								break;
 80008c6:	e02b      	b.n	8000920 <HAL_FDCAN_RxFifo0Callback+0x214>
							case 5:
								CanFDFrame.length = 5;
 80008c8:	4b2b      	ldr	r3, [pc, #172]	; (8000978 <HAL_FDCAN_RxFifo0Callback+0x26c>)
 80008ca:	2205      	movs	r2, #5
 80008cc:	609a      	str	r2, [r3, #8]
								break;
 80008ce:	e027      	b.n	8000920 <HAL_FDCAN_RxFifo0Callback+0x214>
							case 6:
								CanFDFrame.length = 6;
 80008d0:	4b29      	ldr	r3, [pc, #164]	; (8000978 <HAL_FDCAN_RxFifo0Callback+0x26c>)
 80008d2:	2206      	movs	r2, #6
 80008d4:	609a      	str	r2, [r3, #8]
								break;
 80008d6:	e023      	b.n	8000920 <HAL_FDCAN_RxFifo0Callback+0x214>
							case 7:
								CanFDFrame.length = 7;
 80008d8:	4b27      	ldr	r3, [pc, #156]	; (8000978 <HAL_FDCAN_RxFifo0Callback+0x26c>)
 80008da:	2207      	movs	r2, #7
 80008dc:	609a      	str	r2, [r3, #8]
								break;
 80008de:	e01f      	b.n	8000920 <HAL_FDCAN_RxFifo0Callback+0x214>
							case 8:
								CanFDFrame.length = 8;
 80008e0:	4b25      	ldr	r3, [pc, #148]	; (8000978 <HAL_FDCAN_RxFifo0Callback+0x26c>)
 80008e2:	2208      	movs	r2, #8
 80008e4:	609a      	str	r2, [r3, #8]
								break;
 80008e6:	e01b      	b.n	8000920 <HAL_FDCAN_RxFifo0Callback+0x214>
							case 9:
								CanFDFrame.length = 12;
 80008e8:	4b23      	ldr	r3, [pc, #140]	; (8000978 <HAL_FDCAN_RxFifo0Callback+0x26c>)
 80008ea:	220c      	movs	r2, #12
 80008ec:	609a      	str	r2, [r3, #8]
								break;
 80008ee:	e017      	b.n	8000920 <HAL_FDCAN_RxFifo0Callback+0x214>
							case 10:
								CanFDFrame.length = 16;
 80008f0:	4b21      	ldr	r3, [pc, #132]	; (8000978 <HAL_FDCAN_RxFifo0Callback+0x26c>)
 80008f2:	2210      	movs	r2, #16
 80008f4:	609a      	str	r2, [r3, #8]
								break;
 80008f6:	e013      	b.n	8000920 <HAL_FDCAN_RxFifo0Callback+0x214>
							case 11:
								CanFDFrame.length = 20;
 80008f8:	4b1f      	ldr	r3, [pc, #124]	; (8000978 <HAL_FDCAN_RxFifo0Callback+0x26c>)
 80008fa:	2214      	movs	r2, #20
 80008fc:	609a      	str	r2, [r3, #8]
								break;
 80008fe:	e00f      	b.n	8000920 <HAL_FDCAN_RxFifo0Callback+0x214>
							case 12:
								CanFDFrame.length = 24;
 8000900:	4b1d      	ldr	r3, [pc, #116]	; (8000978 <HAL_FDCAN_RxFifo0Callback+0x26c>)
 8000902:	2218      	movs	r2, #24
 8000904:	609a      	str	r2, [r3, #8]
								break;
 8000906:	e00b      	b.n	8000920 <HAL_FDCAN_RxFifo0Callback+0x214>
							case 13:
								CanFDFrame.length = 32;
 8000908:	4b1b      	ldr	r3, [pc, #108]	; (8000978 <HAL_FDCAN_RxFifo0Callback+0x26c>)
 800090a:	2220      	movs	r2, #32
 800090c:	609a      	str	r2, [r3, #8]
								break;
 800090e:	e007      	b.n	8000920 <HAL_FDCAN_RxFifo0Callback+0x214>
							case 14:
								CanFDFrame.length = 48;
 8000910:	4b19      	ldr	r3, [pc, #100]	; (8000978 <HAL_FDCAN_RxFifo0Callback+0x26c>)
 8000912:	2230      	movs	r2, #48	; 0x30
 8000914:	609a      	str	r2, [r3, #8]
								break;
 8000916:	e003      	b.n	8000920 <HAL_FDCAN_RxFifo0Callback+0x214>
							case 15:
								CanFDFrame.length = 64;
 8000918:	4b17      	ldr	r3, [pc, #92]	; (8000978 <HAL_FDCAN_RxFifo0Callback+0x26c>)
 800091a:	2240      	movs	r2, #64	; 0x40
 800091c:	609a      	str	r2, [r3, #8]
								break;
 800091e:	bf00      	nop
						}

						CanFDFrame.time = time;
 8000920:	4a15      	ldr	r2, [pc, #84]	; (8000978 <HAL_FDCAN_RxFifo0Callback+0x26c>)
 8000922:	68fb      	ldr	r3, [r7, #12]
 8000924:	60d3      	str	r3, [r2, #12]
						FDCAN_Flag = 1;
 8000926:	4b15      	ldr	r3, [pc, #84]	; (800097c <HAL_FDCAN_RxFifo0Callback+0x270>)
 8000928:	2201      	movs	r2, #1
 800092a:	601a      	str	r2, [r3, #0]
						memcpy(CanFDFrame.data.bytes, RxData, CanFDFrame.length);
 800092c:	4b12      	ldr	r3, [pc, #72]	; (8000978 <HAL_FDCAN_RxFifo0Callback+0x26c>)
 800092e:	689b      	ldr	r3, [r3, #8]
 8000930:	461a      	mov	r2, r3
 8000932:	490a      	ldr	r1, [pc, #40]	; (800095c <HAL_FDCAN_RxFifo0Callback+0x250>)
 8000934:	4812      	ldr	r0, [pc, #72]	; (8000980 <HAL_FDCAN_RxFifo0Callback+0x274>)
 8000936:	f017 fe35 	bl	80185a4 <memcpy>
						if(RxHeader.IdType == FDCAN_EXTENDED_ID){
 800093a:	4b09      	ldr	r3, [pc, #36]	; (8000960 <HAL_FDCAN_RxFifo0Callback+0x254>)
 800093c:	685b      	ldr	r3, [r3, #4]
 800093e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000942:	d103      	bne.n	800094c <HAL_FDCAN_RxFifo0Callback+0x240>
							CanFDFrame.extended = 1;
 8000944:	4b0c      	ldr	r3, [pc, #48]	; (8000978 <HAL_FDCAN_RxFifo0Callback+0x26c>)
 8000946:	2201      	movs	r2, #1
 8000948:	711a      	strb	r2, [r3, #4]
				  			  printf("%c",RxData[i]);
				  	  }
				  	  printf("\n");
				  	*/
			      }
}
 800094a:	e002      	b.n	8000952 <HAL_FDCAN_RxFifo0Callback+0x246>
							CanFDFrame.extended = 0;
 800094c:	4b0a      	ldr	r3, [pc, #40]	; (8000978 <HAL_FDCAN_RxFifo0Callback+0x26c>)
 800094e:	2200      	movs	r2, #0
 8000950:	711a      	strb	r2, [r3, #4]
}
 8000952:	bf00      	nop
 8000954:	3710      	adds	r7, #16
 8000956:	46bd      	mov	sp, r7
 8000958:	bd80      	pop	{r7, pc}
 800095a:	bf00      	nop
 800095c:	24000ff8 	.word	0x24000ff8
 8000960:	24001088 	.word	0x24001088
 8000964:	58020400 	.word	0x58020400
 8000968:	08019850 	.word	0x08019850
 800096c:	240010b0 	.word	0x240010b0
 8000970:	240001f8 	.word	0x240001f8
 8000974:	240010c0 	.word	0x240010c0
 8000978:	24001038 	.word	0x24001038
 800097c:	240001f4 	.word	0x240001f4
 8000980:	24001048 	.word	0x24001048

08000984 <gps_msg_config>:
#include "main.h"
#include <myprintf.h>
#include <stdbool.h>
#include <buffer.h>

int gps_msg_config(UART_HandleTypeDef *huart, const char *nema, int rus1){
 8000984:	b580      	push	{r7, lr}
 8000986:	b09e      	sub	sp, #120	; 0x78
 8000988:	af02      	add	r7, sp, #8
 800098a:	60f8      	str	r0, [r7, #12]
 800098c:	60b9      	str	r1, [r7, #8]
 800098e:	607a      	str	r2, [r7, #4]
	if (strlen(nema) != 3) return 1;
 8000990:	68b8      	ldr	r0, [r7, #8]
 8000992:	f7ff fca5 	bl	80002e0 <strlen>
 8000996:	4603      	mov	r3, r0
 8000998:	2b03      	cmp	r3, #3
 800099a:	d001      	beq.n	80009a0 <gps_msg_config+0x1c>
 800099c:	2301      	movs	r3, #1
 800099e:	e052      	b.n	8000a46 <gps_msg_config+0xc2>


	char msg[32];
	snprintf(msg, sizeof(msg)-1,"PUBX,40,%s,0,%i,0,0,0,0", nema, rus1);
 80009a0:	f107 0048 	add.w	r0, r7, #72	; 0x48
 80009a4:	687b      	ldr	r3, [r7, #4]
 80009a6:	9300      	str	r3, [sp, #0]
 80009a8:	68bb      	ldr	r3, [r7, #8]
 80009aa:	4a29      	ldr	r2, [pc, #164]	; (8000a50 <gps_msg_config+0xcc>)
 80009ac:	211f      	movs	r1, #31
 80009ae:	f017 ff41 	bl	8018834 <sniprintf>

	int checksum_int = 0;
 80009b2:	2300      	movs	r3, #0
 80009b4:	66fb      	str	r3, [r7, #108]	; 0x6c
	for (int i = 0; msg[i] && i < 32; i++)
 80009b6:	2300      	movs	r3, #0
 80009b8:	66bb      	str	r3, [r7, #104]	; 0x68
 80009ba:	e00b      	b.n	80009d4 <gps_msg_config+0x50>
		checksum_int ^= (unsigned char)msg[i];
 80009bc:	f107 0248 	add.w	r2, r7, #72	; 0x48
 80009c0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80009c2:	4413      	add	r3, r2
 80009c4:	781b      	ldrb	r3, [r3, #0]
 80009c6:	461a      	mov	r2, r3
 80009c8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80009ca:	4053      	eors	r3, r2
 80009cc:	66fb      	str	r3, [r7, #108]	; 0x6c
	for (int i = 0; msg[i] && i < 32; i++)
 80009ce:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80009d0:	3301      	adds	r3, #1
 80009d2:	66bb      	str	r3, [r7, #104]	; 0x68
 80009d4:	f107 0248 	add.w	r2, r7, #72	; 0x48
 80009d8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80009da:	4413      	add	r3, r2
 80009dc:	781b      	ldrb	r3, [r3, #0]
 80009de:	2b00      	cmp	r3, #0
 80009e0:	d002      	beq.n	80009e8 <gps_msg_config+0x64>
 80009e2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80009e4:	2b1f      	cmp	r3, #31
 80009e6:	dde9      	ble.n	80009bc <gps_msg_config+0x38>

	char checksum[8];
	snprintf(checksum, sizeof(checksum)-1, "*%.2X", checksum_int);
 80009e8:	f107 0040 	add.w	r0, r7, #64	; 0x40
 80009ec:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80009ee:	4a19      	ldr	r2, [pc, #100]	; (8000a54 <gps_msg_config+0xd0>)
 80009f0:	2107      	movs	r1, #7
 80009f2:	f017 ff1f 	bl	8018834 <sniprintf>

	char messagetosend[42];
	snprintf(messagetosend, sizeof(messagetosend)-1, "$%s%s\r\n", msg, checksum);
 80009f6:	f107 0248 	add.w	r2, r7, #72	; 0x48
 80009fa:	f107 0014 	add.w	r0, r7, #20
 80009fe:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000a02:	9300      	str	r3, [sp, #0]
 8000a04:	4613      	mov	r3, r2
 8000a06:	4a14      	ldr	r2, [pc, #80]	; (8000a58 <gps_msg_config+0xd4>)
 8000a08:	2129      	movs	r1, #41	; 0x29
 8000a0a:	f017 ff13 	bl	8018834 <sniprintf>
	printf("\n\rSending: ");
 8000a0e:	4813      	ldr	r0, [pc, #76]	; (8000a5c <gps_msg_config+0xd8>)
 8000a10:	f017 fe84 	bl	801871c <iprintf>
	printf("%s", messagetosend);
 8000a14:	f107 0314 	add.w	r3, r7, #20
 8000a18:	4619      	mov	r1, r3
 8000a1a:	4811      	ldr	r0, [pc, #68]	; (8000a60 <gps_msg_config+0xdc>)
 8000a1c:	f017 fe7e 	bl	801871c <iprintf>
	if (HAL_UART_Transmit(huart, messagetosend, strlen(messagetosend), 100) != HAL_OK){
 8000a20:	f107 0314 	add.w	r3, r7, #20
 8000a24:	4618      	mov	r0, r3
 8000a26:	f7ff fc5b 	bl	80002e0 <strlen>
 8000a2a:	4603      	mov	r3, r0
 8000a2c:	b29a      	uxth	r2, r3
 8000a2e:	f107 0114 	add.w	r1, r7, #20
 8000a32:	2364      	movs	r3, #100	; 0x64
 8000a34:	68f8      	ldr	r0, [r7, #12]
 8000a36:	f00e f946 	bl	800ecc6 <HAL_UART_Transmit>
 8000a3a:	4603      	mov	r3, r0
 8000a3c:	2b00      	cmp	r3, #0
 8000a3e:	d001      	beq.n	8000a44 <gps_msg_config+0xc0>
		Error_Handler();
 8000a40:	f002 f972 	bl	8002d28 <Error_Handler>
	}
	return 0;
 8000a44:	2300      	movs	r3, #0
}
 8000a46:	4618      	mov	r0, r3
 8000a48:	3770      	adds	r7, #112	; 0x70
 8000a4a:	46bd      	mov	sp, r7
 8000a4c:	bd80      	pop	{r7, pc}
 8000a4e:	bf00      	nop
 8000a50:	08019864 	.word	0x08019864
 8000a54:	0801987c 	.word	0x0801987c
 8000a58:	08019884 	.word	0x08019884
 8000a5c:	0801988c 	.word	0x0801988c
 8000a60:	08019898 	.word	0x08019898

08000a64 <gps_rate_config>:

int gps_rate_config(UART_HandleTypeDef *huart, uint16_t measRate, uint16_t navRate, uint16_t timeRef){
 8000a64:	b580      	push	{r7, lr}
 8000a66:	b08a      	sub	sp, #40	; 0x28
 8000a68:	af00      	add	r7, sp, #0
 8000a6a:	60f8      	str	r0, [r7, #12]
 8000a6c:	4608      	mov	r0, r1
 8000a6e:	4611      	mov	r1, r2
 8000a70:	461a      	mov	r2, r3
 8000a72:	4603      	mov	r3, r0
 8000a74:	817b      	strh	r3, [r7, #10]
 8000a76:	460b      	mov	r3, r1
 8000a78:	813b      	strh	r3, [r7, #8]
 8000a7a:	4613      	mov	r3, r2
 8000a7c:	80fb      	strh	r3, [r7, #6]
		uint16_t length = 6;
 8000a7e:	2306      	movs	r3, #6
 8000a80:	83fb      	strh	r3, [r7, #30]
		uint8_t msg[14];
		msg[0] = 0xb5;
 8000a82:	23b5      	movs	r3, #181	; 0xb5
 8000a84:	743b      	strb	r3, [r7, #16]
		msg[1] = 0x62;
 8000a86:	2362      	movs	r3, #98	; 0x62
 8000a88:	747b      	strb	r3, [r7, #17]
		msg[2] = 0x06;
 8000a8a:	2306      	movs	r3, #6
 8000a8c:	74bb      	strb	r3, [r7, #18]
		msg[3] = 0x08;
 8000a8e:	2308      	movs	r3, #8
 8000a90:	74fb      	strb	r3, [r7, #19]
		msg[4] = length;
 8000a92:	8bfb      	ldrh	r3, [r7, #30]
 8000a94:	b2db      	uxtb	r3, r3
 8000a96:	753b      	strb	r3, [r7, #20]
		msg[5] = 0;
 8000a98:	2300      	movs	r3, #0
 8000a9a:	757b      	strb	r3, [r7, #21]
		msg[6] = measRate;
 8000a9c:	897b      	ldrh	r3, [r7, #10]
 8000a9e:	b2db      	uxtb	r3, r3
 8000aa0:	75bb      	strb	r3, [r7, #22]
		msg[7] = 0;
 8000aa2:	2300      	movs	r3, #0
 8000aa4:	75fb      	strb	r3, [r7, #23]
		msg[8] = navRate;
 8000aa6:	893b      	ldrh	r3, [r7, #8]
 8000aa8:	b2db      	uxtb	r3, r3
 8000aaa:	763b      	strb	r3, [r7, #24]
		msg[9] = 0;
 8000aac:	2300      	movs	r3, #0
 8000aae:	767b      	strb	r3, [r7, #25]
		msg[10] = timeRef;
 8000ab0:	88fb      	ldrh	r3, [r7, #6]
 8000ab2:	b2db      	uxtb	r3, r3
 8000ab4:	76bb      	strb	r3, [r7, #26]
		msg[11] = 0;
 8000ab6:	2300      	movs	r3, #0
 8000ab8:	76fb      	strb	r3, [r7, #27]

		uint8_t CK_A = 0;
 8000aba:	2300      	movs	r3, #0
 8000abc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		uint8_t CK_B = 0;
 8000ac0:	2300      	movs	r3, #0
 8000ac2:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
		for(int i=2; i<12; i++){
 8000ac6:	2302      	movs	r3, #2
 8000ac8:	623b      	str	r3, [r7, #32]
 8000aca:	e013      	b.n	8000af4 <gps_rate_config+0x90>
	        CK_A = CK_A + msg[i];
 8000acc:	f107 0210 	add.w	r2, r7, #16
 8000ad0:	6a3b      	ldr	r3, [r7, #32]
 8000ad2:	4413      	add	r3, r2
 8000ad4:	781a      	ldrb	r2, [r3, #0]
 8000ad6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8000ada:	4413      	add	r3, r2
 8000adc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	        CK_A &= 0xFF;
	        CK_B = CK_B + CK_A;
 8000ae0:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8000ae4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8000ae8:	4413      	add	r3, r2
 8000aea:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
		for(int i=2; i<12; i++){
 8000aee:	6a3b      	ldr	r3, [r7, #32]
 8000af0:	3301      	adds	r3, #1
 8000af2:	623b      	str	r3, [r7, #32]
 8000af4:	6a3b      	ldr	r3, [r7, #32]
 8000af6:	2b0b      	cmp	r3, #11
 8000af8:	dde8      	ble.n	8000acc <gps_rate_config+0x68>
	        CK_B &= 0xFF;
	    }
		msg[12] = CK_A;
 8000afa:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8000afe:	773b      	strb	r3, [r7, #28]
		msg[13] = CK_B;
 8000b00:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8000b04:	777b      	strb	r3, [r7, #29]

		if (HAL_UART_Transmit(huart, msg, sizeof(msg), 100) != HAL_OK){
 8000b06:	f107 0110 	add.w	r1, r7, #16
 8000b0a:	2364      	movs	r3, #100	; 0x64
 8000b0c:	220e      	movs	r2, #14
 8000b0e:	68f8      	ldr	r0, [r7, #12]
 8000b10:	f00e f8d9 	bl	800ecc6 <HAL_UART_Transmit>
 8000b14:	4603      	mov	r3, r0
 8000b16:	2b00      	cmp	r3, #0
 8000b18:	d003      	beq.n	8000b22 <gps_rate_config+0xbe>
				Error_Handler();
 8000b1a:	f002 f905 	bl	8002d28 <Error_Handler>
				return 1;
 8000b1e:	2301      	movs	r3, #1
 8000b20:	e000      	b.n	8000b24 <gps_rate_config+0xc0>
			}
		return 0;
 8000b22:	2300      	movs	r3, #0
}
 8000b24:	4618      	mov	r0, r3
 8000b26:	3728      	adds	r7, #40	; 0x28
 8000b28:	46bd      	mov	sp, r7
 8000b2a:	bd80      	pop	{r7, pc}

08000b2c <HAL_UART_RxHalfCpltCallback>:
}

int GPS_flag = 0;

void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8000b2c:	b480      	push	{r7}
 8000b2e:	b083      	sub	sp, #12
 8000b30:	af00      	add	r7, sp, #0
 8000b32:	6078      	str	r0, [r7, #4]
	  }
  }*/
  //for(int i=0; i<BUFFLENGTH; i++){
  	  		  //printf("%c", rxBuf[i]);
  	  //}
  GPS_flag = 1;
 8000b34:	4b04      	ldr	r3, [pc, #16]	; (8000b48 <HAL_UART_RxHalfCpltCallback+0x1c>)
 8000b36:	2201      	movs	r2, #1
 8000b38:	601a      	str	r2, [r3, #0]
  //WriteToBuff(rxBuf+70, BUFFLENGTH/2);
  //HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);*/
  //printf("GPS Recieved\n");

}
 8000b3a:	bf00      	nop
 8000b3c:	370c      	adds	r7, #12
 8000b3e:	46bd      	mov	sp, r7
 8000b40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b44:	4770      	bx	lr
 8000b46:	bf00      	nop
 8000b48:	240001fc 	.word	0x240001fc

08000b4c <NRF24_csn>:
	while(uSecVar--);
}

//1. Chip Select function
void NRF24_csn(int state)
{
 8000b4c:	b580      	push	{r7, lr}
 8000b4e:	b082      	sub	sp, #8
 8000b50:	af00      	add	r7, sp, #0
 8000b52:	6078      	str	r0, [r7, #4]
	if(state) HAL_GPIO_WritePin(nrf24_PORT, nrf24_CSN_PIN, GPIO_PIN_SET);
 8000b54:	687b      	ldr	r3, [r7, #4]
 8000b56:	2b00      	cmp	r3, #0
 8000b58:	d008      	beq.n	8000b6c <NRF24_csn+0x20>
 8000b5a:	4b0a      	ldr	r3, [pc, #40]	; (8000b84 <NRF24_csn+0x38>)
 8000b5c:	6818      	ldr	r0, [r3, #0]
 8000b5e:	4b0a      	ldr	r3, [pc, #40]	; (8000b88 <NRF24_csn+0x3c>)
 8000b60:	881b      	ldrh	r3, [r3, #0]
 8000b62:	2201      	movs	r2, #1
 8000b64:	4619      	mov	r1, r3
 8000b66:	f006 faed 	bl	8007144 <HAL_GPIO_WritePin>
	else HAL_GPIO_WritePin(nrf24_PORT, nrf24_CSN_PIN, GPIO_PIN_RESET);
}
 8000b6a:	e007      	b.n	8000b7c <NRF24_csn+0x30>
	else HAL_GPIO_WritePin(nrf24_PORT, nrf24_CSN_PIN, GPIO_PIN_RESET);
 8000b6c:	4b05      	ldr	r3, [pc, #20]	; (8000b84 <NRF24_csn+0x38>)
 8000b6e:	6818      	ldr	r0, [r3, #0]
 8000b70:	4b05      	ldr	r3, [pc, #20]	; (8000b88 <NRF24_csn+0x3c>)
 8000b72:	881b      	ldrh	r3, [r3, #0]
 8000b74:	2200      	movs	r2, #0
 8000b76:	4619      	mov	r1, r3
 8000b78:	f006 fae4 	bl	8007144 <HAL_GPIO_WritePin>
}
 8000b7c:	bf00      	nop
 8000b7e:	3708      	adds	r7, #8
 8000b80:	46bd      	mov	sp, r7
 8000b82:	bd80      	pop	{r7, pc}
 8000b84:	24000204 	.word	0x24000204
 8000b88:	24000208 	.word	0x24000208

08000b8c <NRF24_ce>:
//2. Chip Enable
void NRF24_ce(int state)
{
 8000b8c:	b580      	push	{r7, lr}
 8000b8e:	b082      	sub	sp, #8
 8000b90:	af00      	add	r7, sp, #0
 8000b92:	6078      	str	r0, [r7, #4]
	if(state) HAL_GPIO_WritePin(nrf24_PORT, nrf24_CE_PIN, GPIO_PIN_SET);
 8000b94:	687b      	ldr	r3, [r7, #4]
 8000b96:	2b00      	cmp	r3, #0
 8000b98:	d008      	beq.n	8000bac <NRF24_ce+0x20>
 8000b9a:	4b0a      	ldr	r3, [pc, #40]	; (8000bc4 <NRF24_ce+0x38>)
 8000b9c:	6818      	ldr	r0, [r3, #0]
 8000b9e:	4b0a      	ldr	r3, [pc, #40]	; (8000bc8 <NRF24_ce+0x3c>)
 8000ba0:	881b      	ldrh	r3, [r3, #0]
 8000ba2:	2201      	movs	r2, #1
 8000ba4:	4619      	mov	r1, r3
 8000ba6:	f006 facd 	bl	8007144 <HAL_GPIO_WritePin>
	else HAL_GPIO_WritePin(nrf24_PORT, nrf24_CE_PIN, GPIO_PIN_RESET);
}
 8000baa:	e007      	b.n	8000bbc <NRF24_ce+0x30>
	else HAL_GPIO_WritePin(nrf24_PORT, nrf24_CE_PIN, GPIO_PIN_RESET);
 8000bac:	4b05      	ldr	r3, [pc, #20]	; (8000bc4 <NRF24_ce+0x38>)
 8000bae:	6818      	ldr	r0, [r3, #0]
 8000bb0:	4b05      	ldr	r3, [pc, #20]	; (8000bc8 <NRF24_ce+0x3c>)
 8000bb2:	881b      	ldrh	r3, [r3, #0]
 8000bb4:	2200      	movs	r2, #0
 8000bb6:	4619      	mov	r1, r3
 8000bb8:	f006 fac4 	bl	8007144 <HAL_GPIO_WritePin>
}
 8000bbc:	bf00      	nop
 8000bbe:	3708      	adds	r7, #8
 8000bc0:	46bd      	mov	sp, r7
 8000bc2:	bd80      	pop	{r7, pc}
 8000bc4:	24000204 	.word	0x24000204
 8000bc8:	2400020a 	.word	0x2400020a

08000bcc <NRF24_read_register>:
//3. Read single byte from a register
uint8_t NRF24_read_register(uint8_t reg)
{
 8000bcc:	b580      	push	{r7, lr}
 8000bce:	b084      	sub	sp, #16
 8000bd0:	af00      	add	r7, sp, #0
 8000bd2:	4603      	mov	r3, r0
 8000bd4:	71fb      	strb	r3, [r7, #7]
	uint8_t spiBuf[3];
	uint8_t retData;
	//Put CSN low
	NRF24_csn(0);
 8000bd6:	2000      	movs	r0, #0
 8000bd8:	f7ff ffb8 	bl	8000b4c <NRF24_csn>
	//Transmit register address
	spiBuf[0] = reg&0x1F;
 8000bdc:	79fb      	ldrb	r3, [r7, #7]
 8000bde:	f003 031f 	and.w	r3, r3, #31
 8000be2:	b2db      	uxtb	r3, r3
 8000be4:	733b      	strb	r3, [r7, #12]
	HAL_SPI_Transmit(&nrf24_hspi, spiBuf, 1, 100);
 8000be6:	f107 010c 	add.w	r1, r7, #12
 8000bea:	2364      	movs	r3, #100	; 0x64
 8000bec:	2201      	movs	r2, #1
 8000bee:	480a      	ldr	r0, [pc, #40]	; (8000c18 <NRF24_read_register+0x4c>)
 8000bf0:	f00d f860 	bl	800dcb4 <HAL_SPI_Transmit>
	//Receive data
	HAL_SPI_Receive(&nrf24_hspi, &spiBuf[1], 1, 100);
 8000bf4:	f107 030c 	add.w	r3, r7, #12
 8000bf8:	1c59      	adds	r1, r3, #1
 8000bfa:	2364      	movs	r3, #100	; 0x64
 8000bfc:	2201      	movs	r2, #1
 8000bfe:	4806      	ldr	r0, [pc, #24]	; (8000c18 <NRF24_read_register+0x4c>)
 8000c00:	f00d fa4a 	bl	800e098 <HAL_SPI_Receive>
	retData = spiBuf[1];
 8000c04:	7b7b      	ldrb	r3, [r7, #13]
 8000c06:	73fb      	strb	r3, [r7, #15]
	//Bring CSN high
	NRF24_csn(1);
 8000c08:	2001      	movs	r0, #1
 8000c0a:	f7ff ff9f 	bl	8000b4c <NRF24_csn>
	return retData;
 8000c0e:	7bfb      	ldrb	r3, [r7, #15]
}
 8000c10:	4618      	mov	r0, r3
 8000c12:	3710      	adds	r7, #16
 8000c14:	46bd      	mov	sp, r7
 8000c16:	bd80      	pop	{r7, pc}
 8000c18:	2400020c 	.word	0x2400020c

08000c1c <NRF24_read_registerN>:
//4. Read multiple bytes register
void NRF24_read_registerN(uint8_t reg, uint8_t *buf, uint8_t len)
{
 8000c1c:	b580      	push	{r7, lr}
 8000c1e:	b084      	sub	sp, #16
 8000c20:	af00      	add	r7, sp, #0
 8000c22:	4603      	mov	r3, r0
 8000c24:	6039      	str	r1, [r7, #0]
 8000c26:	71fb      	strb	r3, [r7, #7]
 8000c28:	4613      	mov	r3, r2
 8000c2a:	71bb      	strb	r3, [r7, #6]
	uint8_t spiBuf[3];
	//Put CSN low
	NRF24_csn(0);
 8000c2c:	2000      	movs	r0, #0
 8000c2e:	f7ff ff8d 	bl	8000b4c <NRF24_csn>
	//Transmit register address
	spiBuf[0] = reg&0x1F;
 8000c32:	79fb      	ldrb	r3, [r7, #7]
 8000c34:	f003 031f 	and.w	r3, r3, #31
 8000c38:	b2db      	uxtb	r3, r3
 8000c3a:	733b      	strb	r3, [r7, #12]
	//spiStatus = NRF24_SPI_Write(spiBuf, 1);
	HAL_SPI_Transmit(&nrf24_hspi, spiBuf, 1, 100);
 8000c3c:	f107 010c 	add.w	r1, r7, #12
 8000c40:	2364      	movs	r3, #100	; 0x64
 8000c42:	2201      	movs	r2, #1
 8000c44:	4808      	ldr	r0, [pc, #32]	; (8000c68 <NRF24_read_registerN+0x4c>)
 8000c46:	f00d f835 	bl	800dcb4 <HAL_SPI_Transmit>
	//Receive data
	HAL_SPI_Receive(&nrf24_hspi, buf, len, 100);
 8000c4a:	79bb      	ldrb	r3, [r7, #6]
 8000c4c:	b29a      	uxth	r2, r3
 8000c4e:	2364      	movs	r3, #100	; 0x64
 8000c50:	6839      	ldr	r1, [r7, #0]
 8000c52:	4805      	ldr	r0, [pc, #20]	; (8000c68 <NRF24_read_registerN+0x4c>)
 8000c54:	f00d fa20 	bl	800e098 <HAL_SPI_Receive>
	//Bring CSN high
	NRF24_csn(1);
 8000c58:	2001      	movs	r0, #1
 8000c5a:	f7ff ff77 	bl	8000b4c <NRF24_csn>
}
 8000c5e:	bf00      	nop
 8000c60:	3710      	adds	r7, #16
 8000c62:	46bd      	mov	sp, r7
 8000c64:	bd80      	pop	{r7, pc}
 8000c66:	bf00      	nop
 8000c68:	2400020c 	.word	0x2400020c

08000c6c <NRF24_write_register>:
//5. Write single byte register
void NRF24_write_register(uint8_t reg, uint8_t value)
{
 8000c6c:	b580      	push	{r7, lr}
 8000c6e:	b084      	sub	sp, #16
 8000c70:	af00      	add	r7, sp, #0
 8000c72:	4603      	mov	r3, r0
 8000c74:	460a      	mov	r2, r1
 8000c76:	71fb      	strb	r3, [r7, #7]
 8000c78:	4613      	mov	r3, r2
 8000c7a:	71bb      	strb	r3, [r7, #6]
	uint8_t spiBuf[3];
	//Put CSN low
	NRF24_csn(0);
 8000c7c:	2000      	movs	r0, #0
 8000c7e:	f7ff ff65 	bl	8000b4c <NRF24_csn>
	//Transmit register address and data
	spiBuf[0] = reg|0x20;
 8000c82:	79fb      	ldrb	r3, [r7, #7]
 8000c84:	f043 0320 	orr.w	r3, r3, #32
 8000c88:	b2db      	uxtb	r3, r3
 8000c8a:	733b      	strb	r3, [r7, #12]
	spiBuf[1] = value;
 8000c8c:	79bb      	ldrb	r3, [r7, #6]
 8000c8e:	737b      	strb	r3, [r7, #13]
	HAL_SPI_Transmit(&nrf24_hspi, spiBuf, 2, 100);
 8000c90:	f107 010c 	add.w	r1, r7, #12
 8000c94:	2364      	movs	r3, #100	; 0x64
 8000c96:	2202      	movs	r2, #2
 8000c98:	4804      	ldr	r0, [pc, #16]	; (8000cac <NRF24_write_register+0x40>)
 8000c9a:	f00d f80b 	bl	800dcb4 <HAL_SPI_Transmit>
	//Bring CSN high
	NRF24_csn(1);
 8000c9e:	2001      	movs	r0, #1
 8000ca0:	f7ff ff54 	bl	8000b4c <NRF24_csn>
}
 8000ca4:	bf00      	nop
 8000ca6:	3710      	adds	r7, #16
 8000ca8:	46bd      	mov	sp, r7
 8000caa:	bd80      	pop	{r7, pc}
 8000cac:	2400020c 	.word	0x2400020c

08000cb0 <NRF24_write_registerN>:
//6. Write multipl bytes register
void NRF24_write_registerN(uint8_t reg, const uint8_t* buf, uint8_t len)
{
 8000cb0:	b580      	push	{r7, lr}
 8000cb2:	b084      	sub	sp, #16
 8000cb4:	af00      	add	r7, sp, #0
 8000cb6:	4603      	mov	r3, r0
 8000cb8:	6039      	str	r1, [r7, #0]
 8000cba:	71fb      	strb	r3, [r7, #7]
 8000cbc:	4613      	mov	r3, r2
 8000cbe:	71bb      	strb	r3, [r7, #6]
	uint8_t spiBuf[3];
	//Put CSN low
	NRF24_csn(0);
 8000cc0:	2000      	movs	r0, #0
 8000cc2:	f7ff ff43 	bl	8000b4c <NRF24_csn>
	//Transmit register address and data
	spiBuf[0] = reg|0x20;
 8000cc6:	79fb      	ldrb	r3, [r7, #7]
 8000cc8:	f043 0320 	orr.w	r3, r3, #32
 8000ccc:	b2db      	uxtb	r3, r3
 8000cce:	733b      	strb	r3, [r7, #12]
	HAL_SPI_Transmit(&nrf24_hspi, spiBuf, 1, 100);
 8000cd0:	f107 010c 	add.w	r1, r7, #12
 8000cd4:	2364      	movs	r3, #100	; 0x64
 8000cd6:	2201      	movs	r2, #1
 8000cd8:	4808      	ldr	r0, [pc, #32]	; (8000cfc <NRF24_write_registerN+0x4c>)
 8000cda:	f00c ffeb 	bl	800dcb4 <HAL_SPI_Transmit>
	HAL_SPI_Transmit(&nrf24_hspi, (uint8_t*)buf, len, 100);
 8000cde:	79bb      	ldrb	r3, [r7, #6]
 8000ce0:	b29a      	uxth	r2, r3
 8000ce2:	2364      	movs	r3, #100	; 0x64
 8000ce4:	6839      	ldr	r1, [r7, #0]
 8000ce6:	4805      	ldr	r0, [pc, #20]	; (8000cfc <NRF24_write_registerN+0x4c>)
 8000ce8:	f00c ffe4 	bl	800dcb4 <HAL_SPI_Transmit>
	//Bring CSN high
	NRF24_csn(1);
 8000cec:	2001      	movs	r0, #1
 8000cee:	f7ff ff2d 	bl	8000b4c <NRF24_csn>
}
 8000cf2:	bf00      	nop
 8000cf4:	3710      	adds	r7, #16
 8000cf6:	46bd      	mov	sp, r7
 8000cf8:	bd80      	pop	{r7, pc}
 8000cfa:	bf00      	nop
 8000cfc:	2400020c 	.word	0x2400020c

08000d00 <NRF24_flush_tx>:
	NRF24_csn(1);
}

//9. Flush Tx buffer
void NRF24_flush_tx(void)
{
 8000d00:	b580      	push	{r7, lr}
 8000d02:	af00      	add	r7, sp, #0
	NRF24_write_register(CMD_FLUSH_TX, 0xFF);
 8000d04:	21ff      	movs	r1, #255	; 0xff
 8000d06:	20e1      	movs	r0, #225	; 0xe1
 8000d08:	f7ff ffb0 	bl	8000c6c <NRF24_write_register>
}
 8000d0c:	bf00      	nop
 8000d0e:	bd80      	pop	{r7, pc}

08000d10 <NRF24_flush_rx>:
//10. Flush Rx buffer
void NRF24_flush_rx(void)
{
 8000d10:	b580      	push	{r7, lr}
 8000d12:	af00      	add	r7, sp, #0
	NRF24_write_register(CMD_FLUSH_RX, 0xFF);
 8000d14:	21ff      	movs	r1, #255	; 0xff
 8000d16:	20e2      	movs	r0, #226	; 0xe2
 8000d18:	f7ff ffa8 	bl	8000c6c <NRF24_write_register>
}
 8000d1c:	bf00      	nop
 8000d1e:	bd80      	pop	{r7, pc}

08000d20 <NRF24_begin>:
	return statReg;
}

//12. Begin function
void NRF24_begin(GPIO_TypeDef *nrf24PORT, uint16_t nrfCSN_Pin, uint16_t nrfCE_Pin, SPI_HandleTypeDef nrfSPI)
{
 8000d20:	b082      	sub	sp, #8
 8000d22:	b580      	push	{r7, lr}
 8000d24:	b084      	sub	sp, #16
 8000d26:	af00      	add	r7, sp, #0
 8000d28:	6078      	str	r0, [r7, #4]
 8000d2a:	61fb      	str	r3, [r7, #28]
 8000d2c:	460b      	mov	r3, r1
 8000d2e:	807b      	strh	r3, [r7, #2]
 8000d30:	4613      	mov	r3, r2
 8000d32:	803b      	strh	r3, [r7, #0]
	//Copy SPI handle variable
	memcpy(&nrf24_hspi, &nrfSPI, sizeof(nrfSPI));
 8000d34:	4b66      	ldr	r3, [pc, #408]	; (8000ed0 <NRF24_begin+0x1b0>)
 8000d36:	4618      	mov	r0, r3
 8000d38:	f107 031c 	add.w	r3, r7, #28
 8000d3c:	2288      	movs	r2, #136	; 0x88
 8000d3e:	4619      	mov	r1, r3
 8000d40:	f017 fc30 	bl	80185a4 <memcpy>
	//Copy Pins and Port variables
	nrf24_PORT = nrf24PORT;
 8000d44:	4a63      	ldr	r2, [pc, #396]	; (8000ed4 <NRF24_begin+0x1b4>)
 8000d46:	687b      	ldr	r3, [r7, #4]
 8000d48:	6013      	str	r3, [r2, #0]
	nrf24_CSN_PIN = nrfCSN_Pin;
 8000d4a:	4a63      	ldr	r2, [pc, #396]	; (8000ed8 <NRF24_begin+0x1b8>)
 8000d4c:	887b      	ldrh	r3, [r7, #2]
 8000d4e:	8013      	strh	r3, [r2, #0]
	nrf24_CE_PIN = nrfCE_Pin;
 8000d50:	4a62      	ldr	r2, [pc, #392]	; (8000edc <NRF24_begin+0x1bc>)
 8000d52:	883b      	ldrh	r3, [r7, #0]
 8000d54:	8013      	strh	r3, [r2, #0]
	
	//Put pins to idle state
	NRF24_csn(1);
 8000d56:	2001      	movs	r0, #1
 8000d58:	f7ff fef8 	bl	8000b4c <NRF24_csn>
	NRF24_ce(0);
 8000d5c:	2000      	movs	r0, #0
 8000d5e:	f7ff ff15 	bl	8000b8c <NRF24_ce>
	//5 ms initial delay
	HAL_Delay(5);
 8000d62:	2005      	movs	r0, #5
 8000d64:	f002 fcd4 	bl	8003710 <HAL_Delay>
	
	//**** Soft Reset Registers default values ****//
	NRF24_write_register(0x00, 0x08);
 8000d68:	2108      	movs	r1, #8
 8000d6a:	2000      	movs	r0, #0
 8000d6c:	f7ff ff7e 	bl	8000c6c <NRF24_write_register>
	NRF24_write_register(0x01, 0x3f);
 8000d70:	213f      	movs	r1, #63	; 0x3f
 8000d72:	2001      	movs	r0, #1
 8000d74:	f7ff ff7a 	bl	8000c6c <NRF24_write_register>
	NRF24_write_register(0x02, 0x03);
 8000d78:	2103      	movs	r1, #3
 8000d7a:	2002      	movs	r0, #2
 8000d7c:	f7ff ff76 	bl	8000c6c <NRF24_write_register>
	NRF24_write_register(0x03, 0x03);
 8000d80:	2103      	movs	r1, #3
 8000d82:	2003      	movs	r0, #3
 8000d84:	f7ff ff72 	bl	8000c6c <NRF24_write_register>
	NRF24_write_register(0x04, 0x03);
 8000d88:	2103      	movs	r1, #3
 8000d8a:	2004      	movs	r0, #4
 8000d8c:	f7ff ff6e 	bl	8000c6c <NRF24_write_register>
	NRF24_write_register(0x05, 0x02);
 8000d90:	2102      	movs	r1, #2
 8000d92:	2005      	movs	r0, #5
 8000d94:	f7ff ff6a 	bl	8000c6c <NRF24_write_register>
	NRF24_write_register(0x06, 0x0f);
 8000d98:	210f      	movs	r1, #15
 8000d9a:	2006      	movs	r0, #6
 8000d9c:	f7ff ff66 	bl	8000c6c <NRF24_write_register>
	NRF24_write_register(0x07, 0x0e);
 8000da0:	210e      	movs	r1, #14
 8000da2:	2007      	movs	r0, #7
 8000da4:	f7ff ff62 	bl	8000c6c <NRF24_write_register>
	NRF24_write_register(0x08, 0x00);
 8000da8:	2100      	movs	r1, #0
 8000daa:	2008      	movs	r0, #8
 8000dac:	f7ff ff5e 	bl	8000c6c <NRF24_write_register>
	NRF24_write_register(0x09, 0x00);
 8000db0:	2100      	movs	r1, #0
 8000db2:	2009      	movs	r0, #9
 8000db4:	f7ff ff5a 	bl	8000c6c <NRF24_write_register>
	uint8_t pipeAddrVar[6];
	pipeAddrVar[4]=0xE7; pipeAddrVar[3]=0xE7; pipeAddrVar[2]=0xE7; pipeAddrVar[1]=0xE7; pipeAddrVar[0]=0xE7; 
 8000db8:	23e7      	movs	r3, #231	; 0xe7
 8000dba:	733b      	strb	r3, [r7, #12]
 8000dbc:	23e7      	movs	r3, #231	; 0xe7
 8000dbe:	72fb      	strb	r3, [r7, #11]
 8000dc0:	23e7      	movs	r3, #231	; 0xe7
 8000dc2:	72bb      	strb	r3, [r7, #10]
 8000dc4:	23e7      	movs	r3, #231	; 0xe7
 8000dc6:	727b      	strb	r3, [r7, #9]
 8000dc8:	23e7      	movs	r3, #231	; 0xe7
 8000dca:	723b      	strb	r3, [r7, #8]
	NRF24_write_registerN(0x0A, pipeAddrVar, 5);
 8000dcc:	f107 0308 	add.w	r3, r7, #8
 8000dd0:	2205      	movs	r2, #5
 8000dd2:	4619      	mov	r1, r3
 8000dd4:	200a      	movs	r0, #10
 8000dd6:	f7ff ff6b 	bl	8000cb0 <NRF24_write_registerN>
	pipeAddrVar[4]=0xC2; pipeAddrVar[3]=0xC2; pipeAddrVar[2]=0xC2; pipeAddrVar[1]=0xC2; pipeAddrVar[0]=0xC2; 
 8000dda:	23c2      	movs	r3, #194	; 0xc2
 8000ddc:	733b      	strb	r3, [r7, #12]
 8000dde:	23c2      	movs	r3, #194	; 0xc2
 8000de0:	72fb      	strb	r3, [r7, #11]
 8000de2:	23c2      	movs	r3, #194	; 0xc2
 8000de4:	72bb      	strb	r3, [r7, #10]
 8000de6:	23c2      	movs	r3, #194	; 0xc2
 8000de8:	727b      	strb	r3, [r7, #9]
 8000dea:	23c2      	movs	r3, #194	; 0xc2
 8000dec:	723b      	strb	r3, [r7, #8]
	NRF24_write_registerN(0x0B, pipeAddrVar, 5);
 8000dee:	f107 0308 	add.w	r3, r7, #8
 8000df2:	2205      	movs	r2, #5
 8000df4:	4619      	mov	r1, r3
 8000df6:	200b      	movs	r0, #11
 8000df8:	f7ff ff5a 	bl	8000cb0 <NRF24_write_registerN>
	NRF24_write_register(0x0C, 0xC3);
 8000dfc:	21c3      	movs	r1, #195	; 0xc3
 8000dfe:	200c      	movs	r0, #12
 8000e00:	f7ff ff34 	bl	8000c6c <NRF24_write_register>
	NRF24_write_register(0x0D, 0xC4);
 8000e04:	21c4      	movs	r1, #196	; 0xc4
 8000e06:	200d      	movs	r0, #13
 8000e08:	f7ff ff30 	bl	8000c6c <NRF24_write_register>
	NRF24_write_register(0x0E, 0xC5);
 8000e0c:	21c5      	movs	r1, #197	; 0xc5
 8000e0e:	200e      	movs	r0, #14
 8000e10:	f7ff ff2c 	bl	8000c6c <NRF24_write_register>
	NRF24_write_register(0x0F, 0xC6);
 8000e14:	21c6      	movs	r1, #198	; 0xc6
 8000e16:	200f      	movs	r0, #15
 8000e18:	f7ff ff28 	bl	8000c6c <NRF24_write_register>
	pipeAddrVar[4]=0xE7; pipeAddrVar[3]=0xE7; pipeAddrVar[2]=0xE7; pipeAddrVar[1]=0xE7; pipeAddrVar[0]=0xE7; 
 8000e1c:	23e7      	movs	r3, #231	; 0xe7
 8000e1e:	733b      	strb	r3, [r7, #12]
 8000e20:	23e7      	movs	r3, #231	; 0xe7
 8000e22:	72fb      	strb	r3, [r7, #11]
 8000e24:	23e7      	movs	r3, #231	; 0xe7
 8000e26:	72bb      	strb	r3, [r7, #10]
 8000e28:	23e7      	movs	r3, #231	; 0xe7
 8000e2a:	727b      	strb	r3, [r7, #9]
 8000e2c:	23e7      	movs	r3, #231	; 0xe7
 8000e2e:	723b      	strb	r3, [r7, #8]
	NRF24_write_registerN(0x10, pipeAddrVar, 5);
 8000e30:	f107 0308 	add.w	r3, r7, #8
 8000e34:	2205      	movs	r2, #5
 8000e36:	4619      	mov	r1, r3
 8000e38:	2010      	movs	r0, #16
 8000e3a:	f7ff ff39 	bl	8000cb0 <NRF24_write_registerN>
	NRF24_write_register(0x11, 0);
 8000e3e:	2100      	movs	r1, #0
 8000e40:	2011      	movs	r0, #17
 8000e42:	f7ff ff13 	bl	8000c6c <NRF24_write_register>
	NRF24_write_register(0x12, 0);
 8000e46:	2100      	movs	r1, #0
 8000e48:	2012      	movs	r0, #18
 8000e4a:	f7ff ff0f 	bl	8000c6c <NRF24_write_register>
	NRF24_write_register(0x13, 0);
 8000e4e:	2100      	movs	r1, #0
 8000e50:	2013      	movs	r0, #19
 8000e52:	f7ff ff0b 	bl	8000c6c <NRF24_write_register>
	NRF24_write_register(0x14, 0);
 8000e56:	2100      	movs	r1, #0
 8000e58:	2014      	movs	r0, #20
 8000e5a:	f7ff ff07 	bl	8000c6c <NRF24_write_register>
	NRF24_write_register(0x15, 0);
 8000e5e:	2100      	movs	r1, #0
 8000e60:	2015      	movs	r0, #21
 8000e62:	f7ff ff03 	bl	8000c6c <NRF24_write_register>
	NRF24_write_register(0x16, 0);
 8000e66:	2100      	movs	r1, #0
 8000e68:	2016      	movs	r0, #22
 8000e6a:	f7ff feff 	bl	8000c6c <NRF24_write_register>
	
	NRF24_ACTIVATE_cmd();
 8000e6e:	f000 f99b 	bl	80011a8 <NRF24_ACTIVATE_cmd>
	NRF24_write_register(0x1c, 0);
 8000e72:	2100      	movs	r1, #0
 8000e74:	201c      	movs	r0, #28
 8000e76:	f7ff fef9 	bl	8000c6c <NRF24_write_register>
	NRF24_write_register(0x1d, 0);
 8000e7a:	2100      	movs	r1, #0
 8000e7c:	201d      	movs	r0, #29
 8000e7e:	f7ff fef5 	bl	8000c6c <NRF24_write_register>
	printRadioSettings();
 8000e82:	f000 f9ab 	bl	80011dc <printRadioSettings>
	//Initialise retries 15 and delay 1250 usec
	NRF24_setRetries(15, 15);
 8000e86:	210f      	movs	r1, #15
 8000e88:	200f      	movs	r0, #15
 8000e8a:	f000 f859 	bl	8000f40 <NRF24_setRetries>
	//Initialise PA level to max (0dB)
	NRF24_setPALevel(RF24_PA_0dB);
 8000e8e:	2003      	movs	r0, #3
 8000e90:	f000 f8cb 	bl	800102a <NRF24_setPALevel>
	//Initialise data rate to 1Mbps
	NRF24_setDataRate(RF24_2MBPS);
 8000e94:	2001      	movs	r0, #1
 8000e96:	f000 f901 	bl	800109c <NRF24_setDataRate>
	//Initalise CRC length to 16-bit (2 bytes)
	NRF24_setCRCLength(RF24_CRC_16);
 8000e9a:	2002      	movs	r0, #2
 8000e9c:	f000 f944 	bl	8001128 <NRF24_setCRCLength>
	//Disable dynamic payload
	NRF24_disableDynamicPayloads();
 8000ea0:	f000 f896 	bl	8000fd0 <NRF24_disableDynamicPayloads>
	//Set payload size
	NRF24_setPayloadSize(32);
 8000ea4:	2020      	movs	r0, #32
 8000ea6:	f000 f87b 	bl	8000fa0 <NRF24_setPayloadSize>
	
	//Reset status register
	NRF24_resetStatus();
 8000eaa:	f000 f974 	bl	8001196 <NRF24_resetStatus>
	//Initialise channel to 76
	NRF24_setChannel(76);
 8000eae:	204c      	movs	r0, #76	; 0x4c
 8000eb0:	f000 f861 	bl	8000f76 <NRF24_setChannel>
	//Flush buffers
	NRF24_flush_tx();
 8000eb4:	f7ff ff24 	bl	8000d00 <NRF24_flush_tx>
	NRF24_flush_rx();
 8000eb8:	f7ff ff2a 	bl	8000d10 <NRF24_flush_rx>
	
	NRF24_powerDown();
 8000ebc:	f000 f95c 	bl	8001178 <NRF24_powerDown>
	
}
 8000ec0:	bf00      	nop
 8000ec2:	3710      	adds	r7, #16
 8000ec4:	46bd      	mov	sp, r7
 8000ec6:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000eca:	b002      	add	sp, #8
 8000ecc:	4770      	bx	lr
 8000ece:	bf00      	nop
 8000ed0:	2400020c 	.word	0x2400020c
 8000ed4:	24000204 	.word	0x24000204
 8000ed8:	24000208 	.word	0x24000208
 8000edc:	2400020a 	.word	0x2400020a

08000ee0 <NRF24_stopListening>:
	//Wait for 130 uSec for the radio to come on
	NRF24_DelayMicroSeconds(150);
}
//14. Stop listening (essential before any write operation)
void NRF24_stopListening(void)
{
 8000ee0:	b580      	push	{r7, lr}
 8000ee2:	af00      	add	r7, sp, #0
	NRF24_ce(0);
 8000ee4:	2000      	movs	r0, #0
 8000ee6:	f7ff fe51 	bl	8000b8c <NRF24_ce>
	NRF24_flush_tx();
 8000eea:	f7ff ff09 	bl	8000d00 <NRF24_flush_tx>
	NRF24_flush_rx();
 8000eee:	f7ff ff0f 	bl	8000d10 <NRF24_flush_rx>
}
 8000ef2:	bf00      	nop
 8000ef4:	bd80      	pop	{r7, pc}
	...

08000ef8 <NRF24_openWritingPipe>:
	NRF24_getDynamicPayloadSize();
	return rxStatus;
}
//18. Open Tx pipe for writing (Cannot perform this while Listenning, has to call NRF24_stopListening)
void NRF24_openWritingPipe(uint64_t address)
{
 8000ef8:	b580      	push	{r7, lr}
 8000efa:	b084      	sub	sp, #16
 8000efc:	af00      	add	r7, sp, #0
 8000efe:	e9c7 0100 	strd	r0, r1, [r7]
	NRF24_write_registerN(REG_RX_ADDR_P0, (uint8_t *)(&address), 5);
 8000f02:	463b      	mov	r3, r7
 8000f04:	2205      	movs	r2, #5
 8000f06:	4619      	mov	r1, r3
 8000f08:	200a      	movs	r0, #10
 8000f0a:	f7ff fed1 	bl	8000cb0 <NRF24_write_registerN>
  NRF24_write_registerN(REG_TX_ADDR, (uint8_t *)(&address), 5);
 8000f0e:	463b      	mov	r3, r7
 8000f10:	2205      	movs	r2, #5
 8000f12:	4619      	mov	r1, r3
 8000f14:	2010      	movs	r0, #16
 8000f16:	f7ff fecb 	bl	8000cb0 <NRF24_write_registerN>
	
	const uint8_t max_payload_size = 32;
 8000f1a:	2320      	movs	r3, #32
 8000f1c:	73fb      	strb	r3, [r7, #15]
  NRF24_write_register(REG_RX_PW_P0,MIN(payload_size,max_payload_size));
 8000f1e:	4b07      	ldr	r3, [pc, #28]	; (8000f3c <NRF24_openWritingPipe+0x44>)
 8000f20:	781b      	ldrb	r3, [r3, #0]
 8000f22:	7bfa      	ldrb	r2, [r7, #15]
 8000f24:	4293      	cmp	r3, r2
 8000f26:	bf28      	it	cs
 8000f28:	4613      	movcs	r3, r2
 8000f2a:	b2db      	uxtb	r3, r3
 8000f2c:	4619      	mov	r1, r3
 8000f2e:	2011      	movs	r0, #17
 8000f30:	f7ff fe9c 	bl	8000c6c <NRF24_write_register>
}
 8000f34:	bf00      	nop
 8000f36:	3710      	adds	r7, #16
 8000f38:	46bd      	mov	sp, r7
 8000f3a:	bd80      	pop	{r7, pc}
 8000f3c:	24000200 	.word	0x24000200

08000f40 <NRF24_setRetries>:
	}
	
}
//20 set transmit retries (rf24_Retries_e) and delay
void NRF24_setRetries(uint8_t delay, uint8_t count)
{
 8000f40:	b580      	push	{r7, lr}
 8000f42:	b082      	sub	sp, #8
 8000f44:	af00      	add	r7, sp, #0
 8000f46:	4603      	mov	r3, r0
 8000f48:	460a      	mov	r2, r1
 8000f4a:	71fb      	strb	r3, [r7, #7]
 8000f4c:	4613      	mov	r3, r2
 8000f4e:	71bb      	strb	r3, [r7, #6]
	NRF24_write_register(REG_SETUP_RETR,(delay&0xf)<<BIT_ARD | (count&0xf)<<BIT_ARC);
 8000f50:	79fb      	ldrb	r3, [r7, #7]
 8000f52:	011b      	lsls	r3, r3, #4
 8000f54:	b25a      	sxtb	r2, r3
 8000f56:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8000f5a:	f003 030f 	and.w	r3, r3, #15
 8000f5e:	b25b      	sxtb	r3, r3
 8000f60:	4313      	orrs	r3, r2
 8000f62:	b25b      	sxtb	r3, r3
 8000f64:	b2db      	uxtb	r3, r3
 8000f66:	4619      	mov	r1, r3
 8000f68:	2004      	movs	r0, #4
 8000f6a:	f7ff fe7f 	bl	8000c6c <NRF24_write_register>
}
 8000f6e:	bf00      	nop
 8000f70:	3708      	adds	r7, #8
 8000f72:	46bd      	mov	sp, r7
 8000f74:	bd80      	pop	{r7, pc}

08000f76 <NRF24_setChannel>:

//21. Set RF channel frequency
void NRF24_setChannel(uint8_t channel)
{
 8000f76:	b580      	push	{r7, lr}
 8000f78:	b084      	sub	sp, #16
 8000f7a:	af00      	add	r7, sp, #0
 8000f7c:	4603      	mov	r3, r0
 8000f7e:	71fb      	strb	r3, [r7, #7]
	const uint8_t max_channel = 127;
 8000f80:	237f      	movs	r3, #127	; 0x7f
 8000f82:	73fb      	strb	r3, [r7, #15]
  NRF24_write_register(REG_RF_CH,MIN(channel,max_channel));
 8000f84:	7bfa      	ldrb	r2, [r7, #15]
 8000f86:	79fb      	ldrb	r3, [r7, #7]
 8000f88:	4293      	cmp	r3, r2
 8000f8a:	bf28      	it	cs
 8000f8c:	4613      	movcs	r3, r2
 8000f8e:	b2db      	uxtb	r3, r3
 8000f90:	4619      	mov	r1, r3
 8000f92:	2005      	movs	r0, #5
 8000f94:	f7ff fe6a 	bl	8000c6c <NRF24_write_register>
}
 8000f98:	bf00      	nop
 8000f9a:	3710      	adds	r7, #16
 8000f9c:	46bd      	mov	sp, r7
 8000f9e:	bd80      	pop	{r7, pc}

08000fa0 <NRF24_setPayloadSize>:
//22. Set payload size
void NRF24_setPayloadSize(uint8_t size)
{
 8000fa0:	b480      	push	{r7}
 8000fa2:	b085      	sub	sp, #20
 8000fa4:	af00      	add	r7, sp, #0
 8000fa6:	4603      	mov	r3, r0
 8000fa8:	71fb      	strb	r3, [r7, #7]
	const uint8_t max_payload_size = 32;
 8000faa:	2320      	movs	r3, #32
 8000fac:	73fb      	strb	r3, [r7, #15]
  payload_size = MIN(size,max_payload_size);
 8000fae:	7bfa      	ldrb	r2, [r7, #15]
 8000fb0:	79fb      	ldrb	r3, [r7, #7]
 8000fb2:	4293      	cmp	r3, r2
 8000fb4:	bf28      	it	cs
 8000fb6:	4613      	movcs	r3, r2
 8000fb8:	b2da      	uxtb	r2, r3
 8000fba:	4b04      	ldr	r3, [pc, #16]	; (8000fcc <NRF24_setPayloadSize+0x2c>)
 8000fbc:	701a      	strb	r2, [r3, #0]
}
 8000fbe:	bf00      	nop
 8000fc0:	3714      	adds	r7, #20
 8000fc2:	46bd      	mov	sp, r7
 8000fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fc8:	4770      	bx	lr
 8000fca:	bf00      	nop
 8000fcc:	24000200 	.word	0x24000200

08000fd0 <NRF24_disableDynamicPayloads>:
	NRF24_write_register(REG_DYNPD,NRF24_read_register(REG_DYNPD) | _BV(BIT_DPL_P5) | _BV(BIT_DPL_P4) | _BV(BIT_DPL_P3) | _BV(BIT_DPL_P2) | _BV(BIT_DPL_P1) | _BV(BIT_DPL_P0));
  dynamic_payloads_enabled = true;
	
}
void NRF24_disableDynamicPayloads(void)
{
 8000fd0:	b580      	push	{r7, lr}
 8000fd2:	af00      	add	r7, sp, #0
	NRF24_write_register(REG_FEATURE,NRF24_read_register(REG_FEATURE) &  ~(_BV(BIT_EN_DPL)) );
 8000fd4:	201d      	movs	r0, #29
 8000fd6:	f7ff fdf9 	bl	8000bcc <NRF24_read_register>
 8000fda:	4603      	mov	r3, r0
 8000fdc:	f023 0304 	bic.w	r3, r3, #4
 8000fe0:	b2db      	uxtb	r3, r3
 8000fe2:	4619      	mov	r1, r3
 8000fe4:	201d      	movs	r0, #29
 8000fe6:	f7ff fe41 	bl	8000c6c <NRF24_write_register>
	//Disable for all pipes 
	NRF24_write_register(REG_DYNPD,0);
 8000fea:	2100      	movs	r1, #0
 8000fec:	201c      	movs	r0, #28
 8000fee:	f7ff fe3d 	bl	8000c6c <NRF24_write_register>
	dynamic_payloads_enabled = false;
 8000ff2:	4b02      	ldr	r3, [pc, #8]	; (8000ffc <NRF24_disableDynamicPayloads+0x2c>)
 8000ff4:	2200      	movs	r2, #0
 8000ff6:	701a      	strb	r2, [r3, #0]
}
 8000ff8:	bf00      	nop
 8000ffa:	bd80      	pop	{r7, pc}
 8000ffc:	24000201 	.word	0x24000201

08001000 <NRF24_setAutoAck>:
{
	return p_variant;
}
//28. Set Auto Ack for all
void NRF24_setAutoAck(bool enable)
{
 8001000:	b580      	push	{r7, lr}
 8001002:	b082      	sub	sp, #8
 8001004:	af00      	add	r7, sp, #0
 8001006:	4603      	mov	r3, r0
 8001008:	71fb      	strb	r3, [r7, #7]
	if ( enable )
 800100a:	79fb      	ldrb	r3, [r7, #7]
 800100c:	2b00      	cmp	r3, #0
 800100e:	d004      	beq.n	800101a <NRF24_setAutoAck+0x1a>
    NRF24_write_register(REG_EN_AA, 0x3F);
 8001010:	213f      	movs	r1, #63	; 0x3f
 8001012:	2001      	movs	r0, #1
 8001014:	f7ff fe2a 	bl	8000c6c <NRF24_write_register>
  else
    NRF24_write_register(REG_EN_AA, 0x00);
}
 8001018:	e003      	b.n	8001022 <NRF24_setAutoAck+0x22>
    NRF24_write_register(REG_EN_AA, 0x00);
 800101a:	2100      	movs	r1, #0
 800101c:	2001      	movs	r0, #1
 800101e:	f7ff fe25 	bl	8000c6c <NRF24_write_register>
}
 8001022:	bf00      	nop
 8001024:	3708      	adds	r7, #8
 8001026:	46bd      	mov	sp, r7
 8001028:	bd80      	pop	{r7, pc}

0800102a <NRF24_setPALevel>:
    NRF24_write_register( REG_EN_AA, en_aa ) ;
  }
}
//30. Set transmit power level
void NRF24_setPALevel( rf24_pa_dbm_e level )
{
 800102a:	b580      	push	{r7, lr}
 800102c:	b084      	sub	sp, #16
 800102e:	af00      	add	r7, sp, #0
 8001030:	4603      	mov	r3, r0
 8001032:	71fb      	strb	r3, [r7, #7]
	uint8_t setup = NRF24_read_register(REG_RF_SETUP) ;
 8001034:	2006      	movs	r0, #6
 8001036:	f7ff fdc9 	bl	8000bcc <NRF24_read_register>
 800103a:	4603      	mov	r3, r0
 800103c:	73fb      	strb	r3, [r7, #15]
  setup &= ~(_BV(RF_PWR_LOW) | _BV(RF_PWR_HIGH)) ;
 800103e:	7bfb      	ldrb	r3, [r7, #15]
 8001040:	f023 0306 	bic.w	r3, r3, #6
 8001044:	73fb      	strb	r3, [r7, #15]

  // switch uses RAM (evil!)
  if ( level == RF24_PA_0dB)
 8001046:	79fb      	ldrb	r3, [r7, #7]
 8001048:	2b03      	cmp	r3, #3
 800104a:	d104      	bne.n	8001056 <NRF24_setPALevel+0x2c>
  {
    setup |= (_BV(RF_PWR_LOW) | _BV(RF_PWR_HIGH)) ;
 800104c:	7bfb      	ldrb	r3, [r7, #15]
 800104e:	f043 0306 	orr.w	r3, r3, #6
 8001052:	73fb      	strb	r3, [r7, #15]
 8001054:	e019      	b.n	800108a <NRF24_setPALevel+0x60>
  }
  else if ( level == RF24_PA_m6dB )
 8001056:	79fb      	ldrb	r3, [r7, #7]
 8001058:	2b02      	cmp	r3, #2
 800105a:	d104      	bne.n	8001066 <NRF24_setPALevel+0x3c>
  {
    setup |= _BV(RF_PWR_HIGH) ;
 800105c:	7bfb      	ldrb	r3, [r7, #15]
 800105e:	f043 0304 	orr.w	r3, r3, #4
 8001062:	73fb      	strb	r3, [r7, #15]
 8001064:	e011      	b.n	800108a <NRF24_setPALevel+0x60>
  }
  else if ( level == RF24_PA_m12dB )
 8001066:	79fb      	ldrb	r3, [r7, #7]
 8001068:	2b01      	cmp	r3, #1
 800106a:	d104      	bne.n	8001076 <NRF24_setPALevel+0x4c>
  {
    setup |= _BV(RF_PWR_LOW);
 800106c:	7bfb      	ldrb	r3, [r7, #15]
 800106e:	f043 0302 	orr.w	r3, r3, #2
 8001072:	73fb      	strb	r3, [r7, #15]
 8001074:	e009      	b.n	800108a <NRF24_setPALevel+0x60>
  }
  else if ( level == RF24_PA_m18dB )
 8001076:	79fb      	ldrb	r3, [r7, #7]
 8001078:	2b00      	cmp	r3, #0
 800107a:	d006      	beq.n	800108a <NRF24_setPALevel+0x60>
  {
    // nothing
  }
  else if ( level == RF24_PA_ERROR )
 800107c:	79fb      	ldrb	r3, [r7, #7]
 800107e:	2b04      	cmp	r3, #4
 8001080:	d103      	bne.n	800108a <NRF24_setPALevel+0x60>
  {
    // On error, go to maximum PA
    setup |= (_BV(RF_PWR_LOW) | _BV(RF_PWR_HIGH)) ;
 8001082:	7bfb      	ldrb	r3, [r7, #15]
 8001084:	f043 0306 	orr.w	r3, r3, #6
 8001088:	73fb      	strb	r3, [r7, #15]
  }

  NRF24_write_register( REG_RF_SETUP, setup ) ;
 800108a:	7bfb      	ldrb	r3, [r7, #15]
 800108c:	4619      	mov	r1, r3
 800108e:	2006      	movs	r0, #6
 8001090:	f7ff fdec 	bl	8000c6c <NRF24_write_register>
}
 8001094:	bf00      	nop
 8001096:	3710      	adds	r7, #16
 8001098:	46bd      	mov	sp, r7
 800109a:	bd80      	pop	{r7, pc}

0800109c <NRF24_setDataRate>:

  return result ;
}
//32. Set data rate (250 Kbps, 1Mbps, 2Mbps)
bool NRF24_setDataRate(rf24_datarate_e speed)
{
 800109c:	b580      	push	{r7, lr}
 800109e:	b084      	sub	sp, #16
 80010a0:	af00      	add	r7, sp, #0
 80010a2:	4603      	mov	r3, r0
 80010a4:	71fb      	strb	r3, [r7, #7]
	bool result = false;
 80010a6:	2300      	movs	r3, #0
 80010a8:	73fb      	strb	r3, [r7, #15]
  uint8_t setup = NRF24_read_register(REG_RF_SETUP) ;
 80010aa:	2006      	movs	r0, #6
 80010ac:	f7ff fd8e 	bl	8000bcc <NRF24_read_register>
 80010b0:	4603      	mov	r3, r0
 80010b2:	73bb      	strb	r3, [r7, #14]

  // HIGH and LOW '00' is 1Mbs - our default
  wide_band = false ;
 80010b4:	4b1b      	ldr	r3, [pc, #108]	; (8001124 <NRF24_setDataRate+0x88>)
 80010b6:	2200      	movs	r2, #0
 80010b8:	701a      	strb	r2, [r3, #0]
  setup &= ~(_BV(RF_DR_LOW) | _BV(RF_DR_HIGH)) ;
 80010ba:	7bbb      	ldrb	r3, [r7, #14]
 80010bc:	f023 0328 	bic.w	r3, r3, #40	; 0x28
 80010c0:	73bb      	strb	r3, [r7, #14]
  if( speed == RF24_250KBPS )
 80010c2:	79fb      	ldrb	r3, [r7, #7]
 80010c4:	2b02      	cmp	r3, #2
 80010c6:	d107      	bne.n	80010d8 <NRF24_setDataRate+0x3c>
  {
    // Must set the RF_DR_LOW to 1; RF_DR_HIGH (used to be RF_DR) is already 0
    // Making it '10'.
    wide_band = false ;
 80010c8:	4b16      	ldr	r3, [pc, #88]	; (8001124 <NRF24_setDataRate+0x88>)
 80010ca:	2200      	movs	r2, #0
 80010cc:	701a      	strb	r2, [r3, #0]
    setup |= _BV( RF_DR_LOW ) ;
 80010ce:	7bbb      	ldrb	r3, [r7, #14]
 80010d0:	f043 0320 	orr.w	r3, r3, #32
 80010d4:	73bb      	strb	r3, [r7, #14]
 80010d6:	e00d      	b.n	80010f4 <NRF24_setDataRate+0x58>
  }
  else
  {
    // Set 2Mbs, RF_DR (RF_DR_HIGH) is set 1
    // Making it '01'
    if ( speed == RF24_2MBPS )
 80010d8:	79fb      	ldrb	r3, [r7, #7]
 80010da:	2b01      	cmp	r3, #1
 80010dc:	d107      	bne.n	80010ee <NRF24_setDataRate+0x52>
    {
      wide_band = true ;
 80010de:	4b11      	ldr	r3, [pc, #68]	; (8001124 <NRF24_setDataRate+0x88>)
 80010e0:	2201      	movs	r2, #1
 80010e2:	701a      	strb	r2, [r3, #0]
      setup |= _BV(RF_DR_HIGH);
 80010e4:	7bbb      	ldrb	r3, [r7, #14]
 80010e6:	f043 0308 	orr.w	r3, r3, #8
 80010ea:	73bb      	strb	r3, [r7, #14]
 80010ec:	e002      	b.n	80010f4 <NRF24_setDataRate+0x58>
    }
    else
    {
      // 1Mbs
      wide_band = false ;
 80010ee:	4b0d      	ldr	r3, [pc, #52]	; (8001124 <NRF24_setDataRate+0x88>)
 80010f0:	2200      	movs	r2, #0
 80010f2:	701a      	strb	r2, [r3, #0]
    }
  }
  NRF24_write_register(REG_RF_SETUP,setup);
 80010f4:	7bbb      	ldrb	r3, [r7, #14]
 80010f6:	4619      	mov	r1, r3
 80010f8:	2006      	movs	r0, #6
 80010fa:	f7ff fdb7 	bl	8000c6c <NRF24_write_register>

  // Verify our result
  if ( NRF24_read_register(REG_RF_SETUP) == setup )
 80010fe:	2006      	movs	r0, #6
 8001100:	f7ff fd64 	bl	8000bcc <NRF24_read_register>
 8001104:	4603      	mov	r3, r0
 8001106:	461a      	mov	r2, r3
 8001108:	7bbb      	ldrb	r3, [r7, #14]
 800110a:	4293      	cmp	r3, r2
 800110c:	d102      	bne.n	8001114 <NRF24_setDataRate+0x78>
  {
    result = true;
 800110e:	2301      	movs	r3, #1
 8001110:	73fb      	strb	r3, [r7, #15]
 8001112:	e002      	b.n	800111a <NRF24_setDataRate+0x7e>
  }
  else
  {
    wide_band = false;
 8001114:	4b03      	ldr	r3, [pc, #12]	; (8001124 <NRF24_setDataRate+0x88>)
 8001116:	2200      	movs	r2, #0
 8001118:	701a      	strb	r2, [r3, #0]
  }

  return result;
 800111a:	7bfb      	ldrb	r3, [r7, #15]
}
 800111c:	4618      	mov	r0, r3
 800111e:	3710      	adds	r7, #16
 8001120:	46bd      	mov	sp, r7
 8001122:	bd80      	pop	{r7, pc}
 8001124:	24000202 	.word	0x24000202

08001128 <NRF24_setCRCLength>:
  }
  return result ;
}
//34. Set crc length (disable, 8-bits or 16-bits)
void NRF24_setCRCLength(rf24_crclength_e length)
{
 8001128:	b580      	push	{r7, lr}
 800112a:	b084      	sub	sp, #16
 800112c:	af00      	add	r7, sp, #0
 800112e:	4603      	mov	r3, r0
 8001130:	71fb      	strb	r3, [r7, #7]
	uint8_t config = NRF24_read_register(REG_CONFIG) & ~( _BV(BIT_CRCO) | _BV(BIT_EN_CRC)) ;
 8001132:	2000      	movs	r0, #0
 8001134:	f7ff fd4a 	bl	8000bcc <NRF24_read_register>
 8001138:	4603      	mov	r3, r0
 800113a:	f023 030c 	bic.w	r3, r3, #12
 800113e:	73fb      	strb	r3, [r7, #15]
  
  // switch uses RAM
  if ( length == RF24_CRC_DISABLED )
 8001140:	79fb      	ldrb	r3, [r7, #7]
 8001142:	2b00      	cmp	r3, #0
 8001144:	d00f      	beq.n	8001166 <NRF24_setCRCLength+0x3e>
  {
    // Do nothing, we turned it off above. 
  }
  else if ( length == RF24_CRC_8 )
 8001146:	79fb      	ldrb	r3, [r7, #7]
 8001148:	2b01      	cmp	r3, #1
 800114a:	d104      	bne.n	8001156 <NRF24_setCRCLength+0x2e>
  {
    config |= _BV(BIT_EN_CRC);
 800114c:	7bfb      	ldrb	r3, [r7, #15]
 800114e:	f043 0308 	orr.w	r3, r3, #8
 8001152:	73fb      	strb	r3, [r7, #15]
 8001154:	e007      	b.n	8001166 <NRF24_setCRCLength+0x3e>
  }
  else
  {
    config |= _BV(BIT_EN_CRC);
 8001156:	7bfb      	ldrb	r3, [r7, #15]
 8001158:	f043 0308 	orr.w	r3, r3, #8
 800115c:	73fb      	strb	r3, [r7, #15]
    config |= _BV( BIT_CRCO );
 800115e:	7bfb      	ldrb	r3, [r7, #15]
 8001160:	f043 0304 	orr.w	r3, r3, #4
 8001164:	73fb      	strb	r3, [r7, #15]
  }
  NRF24_write_register( REG_CONFIG, config );
 8001166:	7bfb      	ldrb	r3, [r7, #15]
 8001168:	4619      	mov	r1, r3
 800116a:	2000      	movs	r0, #0
 800116c:	f7ff fd7e 	bl	8000c6c <NRF24_write_register>
}
 8001170:	bf00      	nop
 8001172:	3710      	adds	r7, #16
 8001174:	46bd      	mov	sp, r7
 8001176:	bd80      	pop	{r7, pc}

08001178 <NRF24_powerDown>:
{
	NRF24_write_register(REG_CONFIG,NRF24_read_register(REG_CONFIG) | _BV(BIT_PWR_UP));
}
//38. power down
void NRF24_powerDown(void)
{
 8001178:	b580      	push	{r7, lr}
 800117a:	af00      	add	r7, sp, #0
	NRF24_write_register(REG_CONFIG,NRF24_read_register(REG_CONFIG) & ~_BV(BIT_PWR_UP));
 800117c:	2000      	movs	r0, #0
 800117e:	f7ff fd25 	bl	8000bcc <NRF24_read_register>
 8001182:	4603      	mov	r3, r0
 8001184:	f023 0302 	bic.w	r3, r3, #2
 8001188:	b2db      	uxtb	r3, r3
 800118a:	4619      	mov	r1, r3
 800118c:	2000      	movs	r0, #0
 800118e:	f7ff fd6d 	bl	8000c6c <NRF24_write_register>
}
 8001192:	bf00      	nop
 8001194:	bd80      	pop	{r7, pc}

08001196 <NRF24_resetStatus>:
	return NRF24_read_register(REG_RPD) & 1;
}

//46. Reset Status
void NRF24_resetStatus(void)
{
 8001196:	b580      	push	{r7, lr}
 8001198:	af00      	add	r7, sp, #0
	NRF24_write_register(REG_STATUS,_BV(BIT_RX_DR) | _BV(BIT_TX_DS) | _BV(BIT_MAX_RT) );
 800119a:	2170      	movs	r1, #112	; 0x70
 800119c:	2007      	movs	r0, #7
 800119e:	f7ff fd65 	bl	8000c6c <NRF24_write_register>
}
 80011a2:	bf00      	nop
 80011a4:	bd80      	pop	{r7, pc}
	...

080011a8 <NRF24_ACTIVATE_cmd>:

//47. ACTIVATE cmd
void NRF24_ACTIVATE_cmd(void)
{
 80011a8:	b580      	push	{r7, lr}
 80011aa:	b082      	sub	sp, #8
 80011ac:	af00      	add	r7, sp, #0
	uint8_t cmdRxBuf[2];
	//Read data from Rx payload buffer
	NRF24_csn(0);
 80011ae:	2000      	movs	r0, #0
 80011b0:	f7ff fccc 	bl	8000b4c <NRF24_csn>
	cmdRxBuf[0] = CMD_ACTIVATE;
 80011b4:	2350      	movs	r3, #80	; 0x50
 80011b6:	713b      	strb	r3, [r7, #4]
	cmdRxBuf[1] = 0x73;
 80011b8:	2373      	movs	r3, #115	; 0x73
 80011ba:	717b      	strb	r3, [r7, #5]
	HAL_SPI_Transmit(&nrf24_hspi, cmdRxBuf, 2, 100);
 80011bc:	1d39      	adds	r1, r7, #4
 80011be:	2364      	movs	r3, #100	; 0x64
 80011c0:	2202      	movs	r2, #2
 80011c2:	4805      	ldr	r0, [pc, #20]	; (80011d8 <NRF24_ACTIVATE_cmd+0x30>)
 80011c4:	f00c fd76 	bl	800dcb4 <HAL_SPI_Transmit>
	NRF24_csn(1);
 80011c8:	2001      	movs	r0, #1
 80011ca:	f7ff fcbf 	bl	8000b4c <NRF24_csn>
}
 80011ce:	bf00      	nop
 80011d0:	3708      	adds	r7, #8
 80011d2:	46bd      	mov	sp, r7
 80011d4:	bd80      	pop	{r7, pc}
 80011d6:	bf00      	nop
 80011d8:	2400020c 	.word	0x2400020c

080011dc <printRadioSettings>:
{
	return ack_payload_length;
}

void printRadioSettings(void)
{
 80011dc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80011de:	b0a1      	sub	sp, #132	; 0x84
 80011e0:	af04      	add	r7, sp, #16
	uint8_t reg8Val;
	char uartTxBuf[100];
	sprintf(uartTxBuf, "\r\n**********************************************\r\n");
 80011e2:	f107 0308 	add.w	r3, r7, #8
 80011e6:	4ab6      	ldr	r2, [pc, #728]	; (80014c0 <printRadioSettings+0x2e4>)
 80011e8:	461c      	mov	r4, r3
 80011ea:	4615      	mov	r5, r2
 80011ec:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80011ee:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80011f0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80011f2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80011f4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80011f6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80011f8:	682b      	ldr	r3, [r5, #0]
 80011fa:	461a      	mov	r2, r3
 80011fc:	8022      	strh	r2, [r4, #0]
 80011fe:	3402      	adds	r4, #2
 8001200:	0c1b      	lsrs	r3, r3, #16
 8001202:	7023      	strb	r3, [r4, #0]
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8001204:	f107 0308 	add.w	r3, r7, #8
 8001208:	4618      	mov	r0, r3
 800120a:	f7ff f869 	bl	80002e0 <strlen>
 800120e:	4603      	mov	r3, r0
 8001210:	b29a      	uxth	r2, r3
 8001212:	f107 0108 	add.w	r1, r7, #8
 8001216:	230a      	movs	r3, #10
 8001218:	48aa      	ldr	r0, [pc, #680]	; (80014c4 <printRadioSettings+0x2e8>)
 800121a:	f00d fd54 	bl	800ecc6 <HAL_UART_Transmit>
	//a) Get CRC settings - Config Register
	reg8Val = NRF24_read_register(0x00);
 800121e:	2000      	movs	r0, #0
 8001220:	f7ff fcd4 	bl	8000bcc <NRF24_read_register>
 8001224:	4603      	mov	r3, r0
 8001226:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	if(reg8Val & (1 << 3))
 800122a:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800122e:	f003 0308 	and.w	r3, r3, #8
 8001232:	2b00      	cmp	r3, #0
 8001234:	d020      	beq.n	8001278 <printRadioSettings+0x9c>
	{
		if(reg8Val & (1 << 2)) sprintf(uartTxBuf, "CRC:\r\n		Enabled, 2 Bytes \r\n");
 8001236:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800123a:	f003 0304 	and.w	r3, r3, #4
 800123e:	2b00      	cmp	r3, #0
 8001240:	d00b      	beq.n	800125a <printRadioSettings+0x7e>
 8001242:	f107 0308 	add.w	r3, r7, #8
 8001246:	4aa0      	ldr	r2, [pc, #640]	; (80014c8 <printRadioSettings+0x2ec>)
 8001248:	461c      	mov	r4, r3
 800124a:	4615      	mov	r5, r2
 800124c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800124e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001250:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001254:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8001258:	e017      	b.n	800128a <printRadioSettings+0xae>
		else sprintf(uartTxBuf, "CRC:\r\n		Enabled, 1 Byte \r\n");	
 800125a:	f107 0308 	add.w	r3, r7, #8
 800125e:	4a9b      	ldr	r2, [pc, #620]	; (80014cc <printRadioSettings+0x2f0>)
 8001260:	461c      	mov	r4, r3
 8001262:	4615      	mov	r5, r2
 8001264:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001266:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001268:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800126c:	c403      	stmia	r4!, {r0, r1}
 800126e:	8022      	strh	r2, [r4, #0]
 8001270:	3402      	adds	r4, #2
 8001272:	0c13      	lsrs	r3, r2, #16
 8001274:	7023      	strb	r3, [r4, #0]
 8001276:	e008      	b.n	800128a <printRadioSettings+0xae>
	}
	else
	{
		sprintf(uartTxBuf, "CRC:\r\n		Disabled \r\n");
 8001278:	f107 0308 	add.w	r3, r7, #8
 800127c:	4a94      	ldr	r2, [pc, #592]	; (80014d0 <printRadioSettings+0x2f4>)
 800127e:	461c      	mov	r4, r3
 8001280:	4615      	mov	r5, r2
 8001282:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001284:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001286:	682b      	ldr	r3, [r5, #0]
 8001288:	6023      	str	r3, [r4, #0]
	}
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 800128a:	f107 0308 	add.w	r3, r7, #8
 800128e:	4618      	mov	r0, r3
 8001290:	f7ff f826 	bl	80002e0 <strlen>
 8001294:	4603      	mov	r3, r0
 8001296:	b29a      	uxth	r2, r3
 8001298:	f107 0108 	add.w	r1, r7, #8
 800129c:	230a      	movs	r3, #10
 800129e:	4889      	ldr	r0, [pc, #548]	; (80014c4 <printRadioSettings+0x2e8>)
 80012a0:	f00d fd11 	bl	800ecc6 <HAL_UART_Transmit>
	//b) AutoAck on pipes
	reg8Val = NRF24_read_register(0x01);
 80012a4:	2001      	movs	r0, #1
 80012a6:	f7ff fc91 	bl	8000bcc <NRF24_read_register>
 80012aa:	4603      	mov	r3, r0
 80012ac:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "ENAA:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 80012b0:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80012b4:	f003 0301 	and.w	r3, r3, #1
	sprintf(uartTxBuf, "ENAA:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 80012b8:	2b00      	cmp	r3, #0
 80012ba:	bfcc      	ite	gt
 80012bc:	2301      	movgt	r3, #1
 80012be:	2300      	movle	r3, #0
 80012c0:	b2db      	uxtb	r3, r3
 80012c2:	461d      	mov	r5, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 80012c4:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80012c8:	f003 0302 	and.w	r3, r3, #2
	sprintf(uartTxBuf, "ENAA:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 80012cc:	2b00      	cmp	r3, #0
 80012ce:	bfcc      	ite	gt
 80012d0:	2301      	movgt	r3, #1
 80012d2:	2300      	movle	r3, #0
 80012d4:	b2db      	uxtb	r3, r3
 80012d6:	461e      	mov	r6, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 80012d8:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80012dc:	f003 0304 	and.w	r3, r3, #4
	sprintf(uartTxBuf, "ENAA:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 80012e0:	2b00      	cmp	r3, #0
 80012e2:	bfcc      	ite	gt
 80012e4:	2301      	movgt	r3, #1
 80012e6:	2300      	movle	r3, #0
 80012e8:	b2db      	uxtb	r3, r3
 80012ea:	461a      	mov	r2, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 80012ec:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80012f0:	f003 0308 	and.w	r3, r3, #8
	sprintf(uartTxBuf, "ENAA:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 80012f4:	2b00      	cmp	r3, #0
 80012f6:	bfcc      	ite	gt
 80012f8:	2301      	movgt	r3, #1
 80012fa:	2300      	movle	r3, #0
 80012fc:	b2db      	uxtb	r3, r3
 80012fe:	4619      	mov	r1, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8001300:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001304:	f003 0310 	and.w	r3, r3, #16
	sprintf(uartTxBuf, "ENAA:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8001308:	2b00      	cmp	r3, #0
 800130a:	bfcc      	ite	gt
 800130c:	2301      	movgt	r3, #1
 800130e:	2300      	movle	r3, #0
 8001310:	b2db      	uxtb	r3, r3
 8001312:	461c      	mov	r4, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8001314:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001318:	f003 0320 	and.w	r3, r3, #32
	sprintf(uartTxBuf, "ENAA:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 800131c:	2b00      	cmp	r3, #0
 800131e:	bfcc      	ite	gt
 8001320:	2301      	movgt	r3, #1
 8001322:	2300      	movle	r3, #0
 8001324:	b2db      	uxtb	r3, r3
 8001326:	f107 0008 	add.w	r0, r7, #8
 800132a:	9303      	str	r3, [sp, #12]
 800132c:	9402      	str	r4, [sp, #8]
 800132e:	9101      	str	r1, [sp, #4]
 8001330:	9200      	str	r2, [sp, #0]
 8001332:	4633      	mov	r3, r6
 8001334:	462a      	mov	r2, r5
 8001336:	4967      	ldr	r1, [pc, #412]	; (80014d4 <printRadioSettings+0x2f8>)
 8001338:	f017 fab0 	bl	801889c <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 800133c:	f107 0308 	add.w	r3, r7, #8
 8001340:	4618      	mov	r0, r3
 8001342:	f7fe ffcd 	bl	80002e0 <strlen>
 8001346:	4603      	mov	r3, r0
 8001348:	b29a      	uxth	r2, r3
 800134a:	f107 0108 	add.w	r1, r7, #8
 800134e:	230a      	movs	r3, #10
 8001350:	485c      	ldr	r0, [pc, #368]	; (80014c4 <printRadioSettings+0x2e8>)
 8001352:	f00d fcb8 	bl	800ecc6 <HAL_UART_Transmit>
	//c) Enabled Rx addresses
	reg8Val = NRF24_read_register(0x02);
 8001356:	2002      	movs	r0, #2
 8001358:	f7ff fc38 	bl	8000bcc <NRF24_read_register>
 800135c:	4603      	mov	r3, r0
 800135e:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "EN_RXADDR:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8001362:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001366:	f003 0301 	and.w	r3, r3, #1
	sprintf(uartTxBuf, "EN_RXADDR:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 800136a:	2b00      	cmp	r3, #0
 800136c:	bfcc      	ite	gt
 800136e:	2301      	movgt	r3, #1
 8001370:	2300      	movle	r3, #0
 8001372:	b2db      	uxtb	r3, r3
 8001374:	461d      	mov	r5, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8001376:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800137a:	f003 0302 	and.w	r3, r3, #2
	sprintf(uartTxBuf, "EN_RXADDR:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 800137e:	2b00      	cmp	r3, #0
 8001380:	bfcc      	ite	gt
 8001382:	2301      	movgt	r3, #1
 8001384:	2300      	movle	r3, #0
 8001386:	b2db      	uxtb	r3, r3
 8001388:	461e      	mov	r6, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 800138a:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800138e:	f003 0304 	and.w	r3, r3, #4
	sprintf(uartTxBuf, "EN_RXADDR:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8001392:	2b00      	cmp	r3, #0
 8001394:	bfcc      	ite	gt
 8001396:	2301      	movgt	r3, #1
 8001398:	2300      	movle	r3, #0
 800139a:	b2db      	uxtb	r3, r3
 800139c:	461a      	mov	r2, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 800139e:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80013a2:	f003 0308 	and.w	r3, r3, #8
	sprintf(uartTxBuf, "EN_RXADDR:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 80013a6:	2b00      	cmp	r3, #0
 80013a8:	bfcc      	ite	gt
 80013aa:	2301      	movgt	r3, #1
 80013ac:	2300      	movle	r3, #0
 80013ae:	b2db      	uxtb	r3, r3
 80013b0:	4619      	mov	r1, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 80013b2:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80013b6:	f003 0310 	and.w	r3, r3, #16
	sprintf(uartTxBuf, "EN_RXADDR:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 80013ba:	2b00      	cmp	r3, #0
 80013bc:	bfcc      	ite	gt
 80013be:	2301      	movgt	r3, #1
 80013c0:	2300      	movle	r3, #0
 80013c2:	b2db      	uxtb	r3, r3
 80013c4:	461c      	mov	r4, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 80013c6:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80013ca:	f003 0320 	and.w	r3, r3, #32
	sprintf(uartTxBuf, "EN_RXADDR:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 80013ce:	2b00      	cmp	r3, #0
 80013d0:	bfcc      	ite	gt
 80013d2:	2301      	movgt	r3, #1
 80013d4:	2300      	movle	r3, #0
 80013d6:	b2db      	uxtb	r3, r3
 80013d8:	f107 0008 	add.w	r0, r7, #8
 80013dc:	9303      	str	r3, [sp, #12]
 80013de:	9402      	str	r4, [sp, #8]
 80013e0:	9101      	str	r1, [sp, #4]
 80013e2:	9200      	str	r2, [sp, #0]
 80013e4:	4633      	mov	r3, r6
 80013e6:	462a      	mov	r2, r5
 80013e8:	493b      	ldr	r1, [pc, #236]	; (80014d8 <printRadioSettings+0x2fc>)
 80013ea:	f017 fa57 	bl	801889c <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 80013ee:	f107 0308 	add.w	r3, r7, #8
 80013f2:	4618      	mov	r0, r3
 80013f4:	f7fe ff74 	bl	80002e0 <strlen>
 80013f8:	4603      	mov	r3, r0
 80013fa:	b29a      	uxth	r2, r3
 80013fc:	f107 0108 	add.w	r1, r7, #8
 8001400:	230a      	movs	r3, #10
 8001402:	4830      	ldr	r0, [pc, #192]	; (80014c4 <printRadioSettings+0x2e8>)
 8001404:	f00d fc5f 	bl	800ecc6 <HAL_UART_Transmit>
	//d) Address width
	reg8Val = NRF24_read_register(0x03)&0x03;
 8001408:	2003      	movs	r0, #3
 800140a:	f7ff fbdf 	bl	8000bcc <NRF24_read_register>
 800140e:	4603      	mov	r3, r0
 8001410:	f003 0303 	and.w	r3, r3, #3
 8001414:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	reg8Val +=2;
 8001418:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800141c:	3302      	adds	r3, #2
 800141e:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "SETUP_AW:\r\n		%d bytes \r\n", reg8Val);
 8001422:	f897 206f 	ldrb.w	r2, [r7, #111]	; 0x6f
 8001426:	f107 0308 	add.w	r3, r7, #8
 800142a:	492c      	ldr	r1, [pc, #176]	; (80014dc <printRadioSettings+0x300>)
 800142c:	4618      	mov	r0, r3
 800142e:	f017 fa35 	bl	801889c <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8001432:	f107 0308 	add.w	r3, r7, #8
 8001436:	4618      	mov	r0, r3
 8001438:	f7fe ff52 	bl	80002e0 <strlen>
 800143c:	4603      	mov	r3, r0
 800143e:	b29a      	uxth	r2, r3
 8001440:	f107 0108 	add.w	r1, r7, #8
 8001444:	230a      	movs	r3, #10
 8001446:	481f      	ldr	r0, [pc, #124]	; (80014c4 <printRadioSettings+0x2e8>)
 8001448:	f00d fc3d 	bl	800ecc6 <HAL_UART_Transmit>
	//e) RF channel
	reg8Val = NRF24_read_register(0x05);
 800144c:	2005      	movs	r0, #5
 800144e:	f7ff fbbd 	bl	8000bcc <NRF24_read_register>
 8001452:	4603      	mov	r3, r0
 8001454:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "RF_CH:\r\n		%d CH \r\n", reg8Val&0x7F);
 8001458:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800145c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8001460:	f107 0308 	add.w	r3, r7, #8
 8001464:	491e      	ldr	r1, [pc, #120]	; (80014e0 <printRadioSettings+0x304>)
 8001466:	4618      	mov	r0, r3
 8001468:	f017 fa18 	bl	801889c <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 800146c:	f107 0308 	add.w	r3, r7, #8
 8001470:	4618      	mov	r0, r3
 8001472:	f7fe ff35 	bl	80002e0 <strlen>
 8001476:	4603      	mov	r3, r0
 8001478:	b29a      	uxth	r2, r3
 800147a:	f107 0108 	add.w	r1, r7, #8
 800147e:	230a      	movs	r3, #10
 8001480:	4810      	ldr	r0, [pc, #64]	; (80014c4 <printRadioSettings+0x2e8>)
 8001482:	f00d fc20 	bl	800ecc6 <HAL_UART_Transmit>
	//f) Data rate & RF_PWR
	reg8Val = NRF24_read_register(0x06);
 8001486:	2006      	movs	r0, #6
 8001488:	f7ff fba0 	bl	8000bcc <NRF24_read_register>
 800148c:	4603      	mov	r3, r0
 800148e:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	if(reg8Val & (1 << 3)) sprintf(uartTxBuf, "Data Rate:\r\n		2Mbps \r\n");
 8001492:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001496:	f003 0308 	and.w	r3, r3, #8
 800149a:	2b00      	cmp	r3, #0
 800149c:	d024      	beq.n	80014e8 <printRadioSettings+0x30c>
 800149e:	f107 0308 	add.w	r3, r7, #8
 80014a2:	4a10      	ldr	r2, [pc, #64]	; (80014e4 <printRadioSettings+0x308>)
 80014a4:	461c      	mov	r4, r3
 80014a6:	4615      	mov	r5, r2
 80014a8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80014aa:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80014ac:	e895 0003 	ldmia.w	r5, {r0, r1}
 80014b0:	6020      	str	r0, [r4, #0]
 80014b2:	3404      	adds	r4, #4
 80014b4:	8021      	strh	r1, [r4, #0]
 80014b6:	3402      	adds	r4, #2
 80014b8:	0c0b      	lsrs	r3, r1, #16
 80014ba:	7023      	strb	r3, [r4, #0]
 80014bc:	e023      	b.n	8001506 <printRadioSettings+0x32a>
 80014be:	bf00      	nop
 80014c0:	080198a4 	.word	0x080198a4
 80014c4:	24000294 	.word	0x24000294
 80014c8:	080198d8 	.word	0x080198d8
 80014cc:	080198f4 	.word	0x080198f4
 80014d0:	08019910 	.word	0x08019910
 80014d4:	08019924 	.word	0x08019924
 80014d8:	08019968 	.word	0x08019968
 80014dc:	080199b4 	.word	0x080199b4
 80014e0:	080199d0 	.word	0x080199d0
 80014e4:	080199e4 	.word	0x080199e4
	else sprintf(uartTxBuf, "Data Rate:\r\n		1Mbps \r\n");
 80014e8:	f107 0308 	add.w	r3, r7, #8
 80014ec:	4a29      	ldr	r2, [pc, #164]	; (8001594 <printRadioSettings+0x3b8>)
 80014ee:	461c      	mov	r4, r3
 80014f0:	4615      	mov	r5, r2
 80014f2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80014f4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80014f6:	e895 0003 	ldmia.w	r5, {r0, r1}
 80014fa:	6020      	str	r0, [r4, #0]
 80014fc:	3404      	adds	r4, #4
 80014fe:	8021      	strh	r1, [r4, #0]
 8001500:	3402      	adds	r4, #2
 8001502:	0c0b      	lsrs	r3, r1, #16
 8001504:	7023      	strb	r3, [r4, #0]
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8001506:	f107 0308 	add.w	r3, r7, #8
 800150a:	4618      	mov	r0, r3
 800150c:	f7fe fee8 	bl	80002e0 <strlen>
 8001510:	4603      	mov	r3, r0
 8001512:	b29a      	uxth	r2, r3
 8001514:	f107 0108 	add.w	r1, r7, #8
 8001518:	230a      	movs	r3, #10
 800151a:	481f      	ldr	r0, [pc, #124]	; (8001598 <printRadioSettings+0x3bc>)
 800151c:	f00d fbd3 	bl	800ecc6 <HAL_UART_Transmit>
	reg8Val &= (3 << 1);
 8001520:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001524:	f003 0306 	and.w	r3, r3, #6
 8001528:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	reg8Val = (reg8Val>>1);
 800152c:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001530:	085b      	lsrs	r3, r3, #1
 8001532:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	if(reg8Val == 0) sprintf(uartTxBuf, "RF_PWR:\r\n		-18dB \r\n");
 8001536:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800153a:	2b00      	cmp	r3, #0
 800153c:	d109      	bne.n	8001552 <printRadioSettings+0x376>
 800153e:	f107 0308 	add.w	r3, r7, #8
 8001542:	4a16      	ldr	r2, [pc, #88]	; (800159c <printRadioSettings+0x3c0>)
 8001544:	461c      	mov	r4, r3
 8001546:	4615      	mov	r5, r2
 8001548:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800154a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800154c:	682b      	ldr	r3, [r5, #0]
 800154e:	6023      	str	r3, [r4, #0]
 8001550:	e037      	b.n	80015c2 <printRadioSettings+0x3e6>
	else if(reg8Val == 1) sprintf(uartTxBuf, "RF_PWR:\r\n		-12dB \r\n");
 8001552:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001556:	2b01      	cmp	r3, #1
 8001558:	d109      	bne.n	800156e <printRadioSettings+0x392>
 800155a:	f107 0308 	add.w	r3, r7, #8
 800155e:	4a10      	ldr	r2, [pc, #64]	; (80015a0 <printRadioSettings+0x3c4>)
 8001560:	461c      	mov	r4, r3
 8001562:	4615      	mov	r5, r2
 8001564:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001566:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001568:	682b      	ldr	r3, [r5, #0]
 800156a:	6023      	str	r3, [r4, #0]
 800156c:	e029      	b.n	80015c2 <printRadioSettings+0x3e6>
	else if(reg8Val == 2) sprintf(uartTxBuf, "RF_PWR:\r\n		-6dB \r\n");
 800156e:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001572:	2b02      	cmp	r3, #2
 8001574:	d118      	bne.n	80015a8 <printRadioSettings+0x3cc>
 8001576:	f107 0308 	add.w	r3, r7, #8
 800157a:	4a0a      	ldr	r2, [pc, #40]	; (80015a4 <printRadioSettings+0x3c8>)
 800157c:	461c      	mov	r4, r3
 800157e:	4615      	mov	r5, r2
 8001580:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001582:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001584:	682b      	ldr	r3, [r5, #0]
 8001586:	461a      	mov	r2, r3
 8001588:	8022      	strh	r2, [r4, #0]
 800158a:	3402      	adds	r4, #2
 800158c:	0c1b      	lsrs	r3, r3, #16
 800158e:	7023      	strb	r3, [r4, #0]
 8001590:	e017      	b.n	80015c2 <printRadioSettings+0x3e6>
 8001592:	bf00      	nop
 8001594:	080199fc 	.word	0x080199fc
 8001598:	24000294 	.word	0x24000294
 800159c:	08019a14 	.word	0x08019a14
 80015a0:	08019a28 	.word	0x08019a28
 80015a4:	08019a3c 	.word	0x08019a3c
	else if(reg8Val == 3) sprintf(uartTxBuf, "RF_PWR:\r\n		0dB \r\n");
 80015a8:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80015ac:	2b03      	cmp	r3, #3
 80015ae:	d108      	bne.n	80015c2 <printRadioSettings+0x3e6>
 80015b0:	f107 0308 	add.w	r3, r7, #8
 80015b4:	4ad7      	ldr	r2, [pc, #860]	; (8001914 <printRadioSettings+0x738>)
 80015b6:	461c      	mov	r4, r3
 80015b8:	4615      	mov	r5, r2
 80015ba:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80015bc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80015be:	682b      	ldr	r3, [r5, #0]
 80015c0:	8023      	strh	r3, [r4, #0]
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 80015c2:	f107 0308 	add.w	r3, r7, #8
 80015c6:	4618      	mov	r0, r3
 80015c8:	f7fe fe8a 	bl	80002e0 <strlen>
 80015cc:	4603      	mov	r3, r0
 80015ce:	b29a      	uxth	r2, r3
 80015d0:	f107 0108 	add.w	r1, r7, #8
 80015d4:	230a      	movs	r3, #10
 80015d6:	48d0      	ldr	r0, [pc, #832]	; (8001918 <printRadioSettings+0x73c>)
 80015d8:	f00d fb75 	bl	800ecc6 <HAL_UART_Transmit>
	//g) RX pipes addresses
	uint8_t pipeAddrs[6];
	NRF24_read_registerN(0x0A, pipeAddrs, 5);
 80015dc:	463b      	mov	r3, r7
 80015de:	2205      	movs	r2, #5
 80015e0:	4619      	mov	r1, r3
 80015e2:	200a      	movs	r0, #10
 80015e4:	f7ff fb1a 	bl	8000c1c <NRF24_read_registerN>
	sprintf(uartTxBuf, "RX_Pipe0 Addrs:\r\n		%02X,%02X,%02X,%02X,%02X  \r\n", pipeAddrs[4], pipeAddrs[3], pipeAddrs[2],pipeAddrs[1],pipeAddrs[0]);
 80015e8:	793b      	ldrb	r3, [r7, #4]
 80015ea:	461c      	mov	r4, r3
 80015ec:	78fb      	ldrb	r3, [r7, #3]
 80015ee:	461d      	mov	r5, r3
 80015f0:	78bb      	ldrb	r3, [r7, #2]
 80015f2:	787a      	ldrb	r2, [r7, #1]
 80015f4:	7839      	ldrb	r1, [r7, #0]
 80015f6:	f107 0008 	add.w	r0, r7, #8
 80015fa:	9102      	str	r1, [sp, #8]
 80015fc:	9201      	str	r2, [sp, #4]
 80015fe:	9300      	str	r3, [sp, #0]
 8001600:	462b      	mov	r3, r5
 8001602:	4622      	mov	r2, r4
 8001604:	49c5      	ldr	r1, [pc, #788]	; (800191c <printRadioSettings+0x740>)
 8001606:	f017 f949 	bl	801889c <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 800160a:	f107 0308 	add.w	r3, r7, #8
 800160e:	4618      	mov	r0, r3
 8001610:	f7fe fe66 	bl	80002e0 <strlen>
 8001614:	4603      	mov	r3, r0
 8001616:	b29a      	uxth	r2, r3
 8001618:	f107 0108 	add.w	r1, r7, #8
 800161c:	230a      	movs	r3, #10
 800161e:	48be      	ldr	r0, [pc, #760]	; (8001918 <printRadioSettings+0x73c>)
 8001620:	f00d fb51 	bl	800ecc6 <HAL_UART_Transmit>
	
	NRF24_read_registerN(0x0A+1, pipeAddrs, 5);
 8001624:	463b      	mov	r3, r7
 8001626:	2205      	movs	r2, #5
 8001628:	4619      	mov	r1, r3
 800162a:	200b      	movs	r0, #11
 800162c:	f7ff faf6 	bl	8000c1c <NRF24_read_registerN>
	sprintf(uartTxBuf, "RX_Pipe1 Addrs:\r\n		%02X,%02X,%02X,%02X,%02X  \r\n", pipeAddrs[4], pipeAddrs[3], pipeAddrs[2],pipeAddrs[1],pipeAddrs[0]);
 8001630:	793b      	ldrb	r3, [r7, #4]
 8001632:	461c      	mov	r4, r3
 8001634:	78fb      	ldrb	r3, [r7, #3]
 8001636:	461d      	mov	r5, r3
 8001638:	78bb      	ldrb	r3, [r7, #2]
 800163a:	787a      	ldrb	r2, [r7, #1]
 800163c:	7839      	ldrb	r1, [r7, #0]
 800163e:	f107 0008 	add.w	r0, r7, #8
 8001642:	9102      	str	r1, [sp, #8]
 8001644:	9201      	str	r2, [sp, #4]
 8001646:	9300      	str	r3, [sp, #0]
 8001648:	462b      	mov	r3, r5
 800164a:	4622      	mov	r2, r4
 800164c:	49b4      	ldr	r1, [pc, #720]	; (8001920 <printRadioSettings+0x744>)
 800164e:	f017 f925 	bl	801889c <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8001652:	f107 0308 	add.w	r3, r7, #8
 8001656:	4618      	mov	r0, r3
 8001658:	f7fe fe42 	bl	80002e0 <strlen>
 800165c:	4603      	mov	r3, r0
 800165e:	b29a      	uxth	r2, r3
 8001660:	f107 0108 	add.w	r1, r7, #8
 8001664:	230a      	movs	r3, #10
 8001666:	48ac      	ldr	r0, [pc, #688]	; (8001918 <printRadioSettings+0x73c>)
 8001668:	f00d fb2d 	bl	800ecc6 <HAL_UART_Transmit>
	
	NRF24_read_registerN(0x0A+2, pipeAddrs, 1);
 800166c:	463b      	mov	r3, r7
 800166e:	2201      	movs	r2, #1
 8001670:	4619      	mov	r1, r3
 8001672:	200c      	movs	r0, #12
 8001674:	f7ff fad2 	bl	8000c1c <NRF24_read_registerN>
	sprintf(uartTxBuf, "RX_Pipe2 Addrs:\r\n		xx,xx,xx,xx,%02X  \r\n", pipeAddrs[0]);
 8001678:	783b      	ldrb	r3, [r7, #0]
 800167a:	461a      	mov	r2, r3
 800167c:	f107 0308 	add.w	r3, r7, #8
 8001680:	49a8      	ldr	r1, [pc, #672]	; (8001924 <printRadioSettings+0x748>)
 8001682:	4618      	mov	r0, r3
 8001684:	f017 f90a 	bl	801889c <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8001688:	f107 0308 	add.w	r3, r7, #8
 800168c:	4618      	mov	r0, r3
 800168e:	f7fe fe27 	bl	80002e0 <strlen>
 8001692:	4603      	mov	r3, r0
 8001694:	b29a      	uxth	r2, r3
 8001696:	f107 0108 	add.w	r1, r7, #8
 800169a:	230a      	movs	r3, #10
 800169c:	489e      	ldr	r0, [pc, #632]	; (8001918 <printRadioSettings+0x73c>)
 800169e:	f00d fb12 	bl	800ecc6 <HAL_UART_Transmit>
	
	NRF24_read_registerN(0x0A+3, pipeAddrs, 1);
 80016a2:	463b      	mov	r3, r7
 80016a4:	2201      	movs	r2, #1
 80016a6:	4619      	mov	r1, r3
 80016a8:	200d      	movs	r0, #13
 80016aa:	f7ff fab7 	bl	8000c1c <NRF24_read_registerN>
	sprintf(uartTxBuf, "RX_Pipe3 Addrs:\r\n		xx,xx,xx,xx,%02X  \r\n", pipeAddrs[0]);
 80016ae:	783b      	ldrb	r3, [r7, #0]
 80016b0:	461a      	mov	r2, r3
 80016b2:	f107 0308 	add.w	r3, r7, #8
 80016b6:	499c      	ldr	r1, [pc, #624]	; (8001928 <printRadioSettings+0x74c>)
 80016b8:	4618      	mov	r0, r3
 80016ba:	f017 f8ef 	bl	801889c <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 80016be:	f107 0308 	add.w	r3, r7, #8
 80016c2:	4618      	mov	r0, r3
 80016c4:	f7fe fe0c 	bl	80002e0 <strlen>
 80016c8:	4603      	mov	r3, r0
 80016ca:	b29a      	uxth	r2, r3
 80016cc:	f107 0108 	add.w	r1, r7, #8
 80016d0:	230a      	movs	r3, #10
 80016d2:	4891      	ldr	r0, [pc, #580]	; (8001918 <printRadioSettings+0x73c>)
 80016d4:	f00d faf7 	bl	800ecc6 <HAL_UART_Transmit>
	
	NRF24_read_registerN(0x0A+4, pipeAddrs, 1);
 80016d8:	463b      	mov	r3, r7
 80016da:	2201      	movs	r2, #1
 80016dc:	4619      	mov	r1, r3
 80016de:	200e      	movs	r0, #14
 80016e0:	f7ff fa9c 	bl	8000c1c <NRF24_read_registerN>
	sprintf(uartTxBuf, "RX_Pipe4 Addrs:\r\n		xx,xx,xx,xx,%02X  \r\n", pipeAddrs[0]);
 80016e4:	783b      	ldrb	r3, [r7, #0]
 80016e6:	461a      	mov	r2, r3
 80016e8:	f107 0308 	add.w	r3, r7, #8
 80016ec:	498f      	ldr	r1, [pc, #572]	; (800192c <printRadioSettings+0x750>)
 80016ee:	4618      	mov	r0, r3
 80016f0:	f017 f8d4 	bl	801889c <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 80016f4:	f107 0308 	add.w	r3, r7, #8
 80016f8:	4618      	mov	r0, r3
 80016fa:	f7fe fdf1 	bl	80002e0 <strlen>
 80016fe:	4603      	mov	r3, r0
 8001700:	b29a      	uxth	r2, r3
 8001702:	f107 0108 	add.w	r1, r7, #8
 8001706:	230a      	movs	r3, #10
 8001708:	4883      	ldr	r0, [pc, #524]	; (8001918 <printRadioSettings+0x73c>)
 800170a:	f00d fadc 	bl	800ecc6 <HAL_UART_Transmit>
	
	NRF24_read_registerN(0x0A+5, pipeAddrs, 1);
 800170e:	463b      	mov	r3, r7
 8001710:	2201      	movs	r2, #1
 8001712:	4619      	mov	r1, r3
 8001714:	200f      	movs	r0, #15
 8001716:	f7ff fa81 	bl	8000c1c <NRF24_read_registerN>
	sprintf(uartTxBuf, "RX_Pipe5 Addrs:\r\n		xx,xx,xx,xx,%02X  \r\n", pipeAddrs[0]);
 800171a:	783b      	ldrb	r3, [r7, #0]
 800171c:	461a      	mov	r2, r3
 800171e:	f107 0308 	add.w	r3, r7, #8
 8001722:	4983      	ldr	r1, [pc, #524]	; (8001930 <printRadioSettings+0x754>)
 8001724:	4618      	mov	r0, r3
 8001726:	f017 f8b9 	bl	801889c <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 800172a:	f107 0308 	add.w	r3, r7, #8
 800172e:	4618      	mov	r0, r3
 8001730:	f7fe fdd6 	bl	80002e0 <strlen>
 8001734:	4603      	mov	r3, r0
 8001736:	b29a      	uxth	r2, r3
 8001738:	f107 0108 	add.w	r1, r7, #8
 800173c:	230a      	movs	r3, #10
 800173e:	4876      	ldr	r0, [pc, #472]	; (8001918 <printRadioSettings+0x73c>)
 8001740:	f00d fac1 	bl	800ecc6 <HAL_UART_Transmit>
	
	NRF24_read_registerN(0x0A+6, pipeAddrs, 5);
 8001744:	463b      	mov	r3, r7
 8001746:	2205      	movs	r2, #5
 8001748:	4619      	mov	r1, r3
 800174a:	2010      	movs	r0, #16
 800174c:	f7ff fa66 	bl	8000c1c <NRF24_read_registerN>
	sprintf(uartTxBuf, "TX Addrs:\r\n		%02X,%02X,%02X,%02X,%02X  \r\n", pipeAddrs[4], pipeAddrs[3], pipeAddrs[2],pipeAddrs[1],pipeAddrs[0]);
 8001750:	793b      	ldrb	r3, [r7, #4]
 8001752:	461c      	mov	r4, r3
 8001754:	78fb      	ldrb	r3, [r7, #3]
 8001756:	461d      	mov	r5, r3
 8001758:	78bb      	ldrb	r3, [r7, #2]
 800175a:	787a      	ldrb	r2, [r7, #1]
 800175c:	7839      	ldrb	r1, [r7, #0]
 800175e:	f107 0008 	add.w	r0, r7, #8
 8001762:	9102      	str	r1, [sp, #8]
 8001764:	9201      	str	r2, [sp, #4]
 8001766:	9300      	str	r3, [sp, #0]
 8001768:	462b      	mov	r3, r5
 800176a:	4622      	mov	r2, r4
 800176c:	4971      	ldr	r1, [pc, #452]	; (8001934 <printRadioSettings+0x758>)
 800176e:	f017 f895 	bl	801889c <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8001772:	f107 0308 	add.w	r3, r7, #8
 8001776:	4618      	mov	r0, r3
 8001778:	f7fe fdb2 	bl	80002e0 <strlen>
 800177c:	4603      	mov	r3, r0
 800177e:	b29a      	uxth	r2, r3
 8001780:	f107 0108 	add.w	r1, r7, #8
 8001784:	230a      	movs	r3, #10
 8001786:	4864      	ldr	r0, [pc, #400]	; (8001918 <printRadioSettings+0x73c>)
 8001788:	f00d fa9d 	bl	800ecc6 <HAL_UART_Transmit>
	
	//h) RX PW (Payload Width 0 - 32)
	reg8Val = NRF24_read_register(0x11);
 800178c:	2011      	movs	r0, #17
 800178e:	f7ff fa1d 	bl	8000bcc <NRF24_read_register>
 8001792:	4603      	mov	r3, r0
 8001794:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "RX_PW_P0:\r\n		%d bytes \r\n", reg8Val&0x3F);
 8001798:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800179c:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80017a0:	f107 0308 	add.w	r3, r7, #8
 80017a4:	4964      	ldr	r1, [pc, #400]	; (8001938 <printRadioSettings+0x75c>)
 80017a6:	4618      	mov	r0, r3
 80017a8:	f017 f878 	bl	801889c <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 80017ac:	f107 0308 	add.w	r3, r7, #8
 80017b0:	4618      	mov	r0, r3
 80017b2:	f7fe fd95 	bl	80002e0 <strlen>
 80017b6:	4603      	mov	r3, r0
 80017b8:	b29a      	uxth	r2, r3
 80017ba:	f107 0108 	add.w	r1, r7, #8
 80017be:	230a      	movs	r3, #10
 80017c0:	4855      	ldr	r0, [pc, #340]	; (8001918 <printRadioSettings+0x73c>)
 80017c2:	f00d fa80 	bl	800ecc6 <HAL_UART_Transmit>
	
	reg8Val = NRF24_read_register(0x11+1);
 80017c6:	2012      	movs	r0, #18
 80017c8:	f7ff fa00 	bl	8000bcc <NRF24_read_register>
 80017cc:	4603      	mov	r3, r0
 80017ce:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "RX_PW_P1:\r\n		%d bytes \r\n", reg8Val&0x3F);
 80017d2:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80017d6:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80017da:	f107 0308 	add.w	r3, r7, #8
 80017de:	4957      	ldr	r1, [pc, #348]	; (800193c <printRadioSettings+0x760>)
 80017e0:	4618      	mov	r0, r3
 80017e2:	f017 f85b 	bl	801889c <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 80017e6:	f107 0308 	add.w	r3, r7, #8
 80017ea:	4618      	mov	r0, r3
 80017ec:	f7fe fd78 	bl	80002e0 <strlen>
 80017f0:	4603      	mov	r3, r0
 80017f2:	b29a      	uxth	r2, r3
 80017f4:	f107 0108 	add.w	r1, r7, #8
 80017f8:	230a      	movs	r3, #10
 80017fa:	4847      	ldr	r0, [pc, #284]	; (8001918 <printRadioSettings+0x73c>)
 80017fc:	f00d fa63 	bl	800ecc6 <HAL_UART_Transmit>
	
	reg8Val = NRF24_read_register(0x11+2);
 8001800:	2013      	movs	r0, #19
 8001802:	f7ff f9e3 	bl	8000bcc <NRF24_read_register>
 8001806:	4603      	mov	r3, r0
 8001808:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "RX_PW_P2:\r\n		%d bytes \r\n", reg8Val&0x3F);
 800180c:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001810:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001814:	f107 0308 	add.w	r3, r7, #8
 8001818:	4949      	ldr	r1, [pc, #292]	; (8001940 <printRadioSettings+0x764>)
 800181a:	4618      	mov	r0, r3
 800181c:	f017 f83e 	bl	801889c <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8001820:	f107 0308 	add.w	r3, r7, #8
 8001824:	4618      	mov	r0, r3
 8001826:	f7fe fd5b 	bl	80002e0 <strlen>
 800182a:	4603      	mov	r3, r0
 800182c:	b29a      	uxth	r2, r3
 800182e:	f107 0108 	add.w	r1, r7, #8
 8001832:	230a      	movs	r3, #10
 8001834:	4838      	ldr	r0, [pc, #224]	; (8001918 <printRadioSettings+0x73c>)
 8001836:	f00d fa46 	bl	800ecc6 <HAL_UART_Transmit>
	
	reg8Val = NRF24_read_register(0x11+3);
 800183a:	2014      	movs	r0, #20
 800183c:	f7ff f9c6 	bl	8000bcc <NRF24_read_register>
 8001840:	4603      	mov	r3, r0
 8001842:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "RX_PW_P3:\r\n		%d bytes \r\n", reg8Val&0x3F);
 8001846:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800184a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800184e:	f107 0308 	add.w	r3, r7, #8
 8001852:	493c      	ldr	r1, [pc, #240]	; (8001944 <printRadioSettings+0x768>)
 8001854:	4618      	mov	r0, r3
 8001856:	f017 f821 	bl	801889c <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 800185a:	f107 0308 	add.w	r3, r7, #8
 800185e:	4618      	mov	r0, r3
 8001860:	f7fe fd3e 	bl	80002e0 <strlen>
 8001864:	4603      	mov	r3, r0
 8001866:	b29a      	uxth	r2, r3
 8001868:	f107 0108 	add.w	r1, r7, #8
 800186c:	230a      	movs	r3, #10
 800186e:	482a      	ldr	r0, [pc, #168]	; (8001918 <printRadioSettings+0x73c>)
 8001870:	f00d fa29 	bl	800ecc6 <HAL_UART_Transmit>
	
	reg8Val = NRF24_read_register(0x11+4);
 8001874:	2015      	movs	r0, #21
 8001876:	f7ff f9a9 	bl	8000bcc <NRF24_read_register>
 800187a:	4603      	mov	r3, r0
 800187c:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "RX_PW_P4:\r\n		%d bytes \r\n", reg8Val&0x3F);
 8001880:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001884:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001888:	f107 0308 	add.w	r3, r7, #8
 800188c:	492e      	ldr	r1, [pc, #184]	; (8001948 <printRadioSettings+0x76c>)
 800188e:	4618      	mov	r0, r3
 8001890:	f017 f804 	bl	801889c <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8001894:	f107 0308 	add.w	r3, r7, #8
 8001898:	4618      	mov	r0, r3
 800189a:	f7fe fd21 	bl	80002e0 <strlen>
 800189e:	4603      	mov	r3, r0
 80018a0:	b29a      	uxth	r2, r3
 80018a2:	f107 0108 	add.w	r1, r7, #8
 80018a6:	230a      	movs	r3, #10
 80018a8:	481b      	ldr	r0, [pc, #108]	; (8001918 <printRadioSettings+0x73c>)
 80018aa:	f00d fa0c 	bl	800ecc6 <HAL_UART_Transmit>
	
	reg8Val = NRF24_read_register(0x11+5);
 80018ae:	2016      	movs	r0, #22
 80018b0:	f7ff f98c 	bl	8000bcc <NRF24_read_register>
 80018b4:	4603      	mov	r3, r0
 80018b6:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "RX_PW_P5:\r\n		%d bytes \r\n", reg8Val&0x3F);
 80018ba:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80018be:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80018c2:	f107 0308 	add.w	r3, r7, #8
 80018c6:	4921      	ldr	r1, [pc, #132]	; (800194c <printRadioSettings+0x770>)
 80018c8:	4618      	mov	r0, r3
 80018ca:	f016 ffe7 	bl	801889c <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 80018ce:	f107 0308 	add.w	r3, r7, #8
 80018d2:	4618      	mov	r0, r3
 80018d4:	f7fe fd04 	bl	80002e0 <strlen>
 80018d8:	4603      	mov	r3, r0
 80018da:	b29a      	uxth	r2, r3
 80018dc:	f107 0108 	add.w	r1, r7, #8
 80018e0:	230a      	movs	r3, #10
 80018e2:	480d      	ldr	r0, [pc, #52]	; (8001918 <printRadioSettings+0x73c>)
 80018e4:	f00d f9ef 	bl	800ecc6 <HAL_UART_Transmit>
	
	//i) Dynamic payload enable for each pipe
	reg8Val = NRF24_read_register(0x1c);
 80018e8:	201c      	movs	r0, #28
 80018ea:	f7ff f96f 	bl	8000bcc <NRF24_read_register>
 80018ee:	4603      	mov	r3, r0
 80018f0:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "DYNPD_pipe:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 80018f4:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80018f8:	f003 0301 	and.w	r3, r3, #1
	sprintf(uartTxBuf, "DYNPD_pipe:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 80018fc:	2b00      	cmp	r3, #0
 80018fe:	bfcc      	ite	gt
 8001900:	2301      	movgt	r3, #1
 8001902:	2300      	movle	r3, #0
 8001904:	b2db      	uxtb	r3, r3
 8001906:	461d      	mov	r5, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8001908:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800190c:	f003 0302 	and.w	r3, r3, #2
 8001910:	e01e      	b.n	8001950 <printRadioSettings+0x774>
 8001912:	bf00      	nop
 8001914:	08019a50 	.word	0x08019a50
 8001918:	24000294 	.word	0x24000294
 800191c:	08019a64 	.word	0x08019a64
 8001920:	08019a94 	.word	0x08019a94
 8001924:	08019ac4 	.word	0x08019ac4
 8001928:	08019aec 	.word	0x08019aec
 800192c:	08019b14 	.word	0x08019b14
 8001930:	08019b3c 	.word	0x08019b3c
 8001934:	08019b64 	.word	0x08019b64
 8001938:	08019b90 	.word	0x08019b90
 800193c:	08019bac 	.word	0x08019bac
 8001940:	08019bc8 	.word	0x08019bc8
 8001944:	08019be4 	.word	0x08019be4
 8001948:	08019c00 	.word	0x08019c00
 800194c:	08019c1c 	.word	0x08019c1c
	sprintf(uartTxBuf, "DYNPD_pipe:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8001950:	2b00      	cmp	r3, #0
 8001952:	bfcc      	ite	gt
 8001954:	2301      	movgt	r3, #1
 8001956:	2300      	movle	r3, #0
 8001958:	b2db      	uxtb	r3, r3
 800195a:	461e      	mov	r6, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 800195c:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001960:	f003 0304 	and.w	r3, r3, #4
	sprintf(uartTxBuf, "DYNPD_pipe:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8001964:	2b00      	cmp	r3, #0
 8001966:	bfcc      	ite	gt
 8001968:	2301      	movgt	r3, #1
 800196a:	2300      	movle	r3, #0
 800196c:	b2db      	uxtb	r3, r3
 800196e:	461a      	mov	r2, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8001970:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001974:	f003 0308 	and.w	r3, r3, #8
	sprintf(uartTxBuf, "DYNPD_pipe:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8001978:	2b00      	cmp	r3, #0
 800197a:	bfcc      	ite	gt
 800197c:	2301      	movgt	r3, #1
 800197e:	2300      	movle	r3, #0
 8001980:	b2db      	uxtb	r3, r3
 8001982:	4619      	mov	r1, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8001984:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001988:	f003 0310 	and.w	r3, r3, #16
	sprintf(uartTxBuf, "DYNPD_pipe:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 800198c:	2b00      	cmp	r3, #0
 800198e:	bfcc      	ite	gt
 8001990:	2301      	movgt	r3, #1
 8001992:	2300      	movle	r3, #0
 8001994:	b2db      	uxtb	r3, r3
 8001996:	461c      	mov	r4, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8001998:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800199c:	f003 0320 	and.w	r3, r3, #32
	sprintf(uartTxBuf, "DYNPD_pipe:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 80019a0:	2b00      	cmp	r3, #0
 80019a2:	bfcc      	ite	gt
 80019a4:	2301      	movgt	r3, #1
 80019a6:	2300      	movle	r3, #0
 80019a8:	b2db      	uxtb	r3, r3
 80019aa:	f107 0008 	add.w	r0, r7, #8
 80019ae:	9303      	str	r3, [sp, #12]
 80019b0:	9402      	str	r4, [sp, #8]
 80019b2:	9101      	str	r1, [sp, #4]
 80019b4:	9200      	str	r2, [sp, #0]
 80019b6:	4633      	mov	r3, r6
 80019b8:	462a      	mov	r2, r5
 80019ba:	494a      	ldr	r1, [pc, #296]	; (8001ae4 <printRadioSettings+0x908>)
 80019bc:	f016 ff6e 	bl	801889c <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 80019c0:	f107 0308 	add.w	r3, r7, #8
 80019c4:	4618      	mov	r0, r3
 80019c6:	f7fe fc8b 	bl	80002e0 <strlen>
 80019ca:	4603      	mov	r3, r0
 80019cc:	b29a      	uxth	r2, r3
 80019ce:	f107 0108 	add.w	r1, r7, #8
 80019d2:	230a      	movs	r3, #10
 80019d4:	4844      	ldr	r0, [pc, #272]	; (8001ae8 <printRadioSettings+0x90c>)
 80019d6:	f00d f976 	bl	800ecc6 <HAL_UART_Transmit>
	
	//j) EN_DPL (is Dynamic payload feature enabled ?)
	reg8Val = NRF24_read_register(0x1d);
 80019da:	201d      	movs	r0, #29
 80019dc:	f7ff f8f6 	bl	8000bcc <NRF24_read_register>
 80019e0:	4603      	mov	r3, r0
 80019e2:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	if(reg8Val&(1<<2)) sprintf(uartTxBuf, "EN_DPL:\r\n		Enabled \r\n");
 80019e6:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80019ea:	f003 0304 	and.w	r3, r3, #4
 80019ee:	2b00      	cmp	r3, #0
 80019f0:	d00c      	beq.n	8001a0c <printRadioSettings+0x830>
 80019f2:	f107 0308 	add.w	r3, r7, #8
 80019f6:	4a3d      	ldr	r2, [pc, #244]	; (8001aec <printRadioSettings+0x910>)
 80019f8:	461c      	mov	r4, r3
 80019fa:	4615      	mov	r5, r2
 80019fc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80019fe:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001a00:	e895 0003 	ldmia.w	r5, {r0, r1}
 8001a04:	6020      	str	r0, [r4, #0]
 8001a06:	3404      	adds	r4, #4
 8001a08:	8021      	strh	r1, [r4, #0]
 8001a0a:	e00e      	b.n	8001a2a <printRadioSettings+0x84e>
	else sprintf(uartTxBuf, "EN_DPL:\r\n		Disabled \r\n");
 8001a0c:	f107 0308 	add.w	r3, r7, #8
 8001a10:	4a37      	ldr	r2, [pc, #220]	; (8001af0 <printRadioSettings+0x914>)
 8001a12:	461c      	mov	r4, r3
 8001a14:	4615      	mov	r5, r2
 8001a16:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001a18:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001a1a:	e895 0003 	ldmia.w	r5, {r0, r1}
 8001a1e:	6020      	str	r0, [r4, #0]
 8001a20:	3404      	adds	r4, #4
 8001a22:	8021      	strh	r1, [r4, #0]
 8001a24:	3402      	adds	r4, #2
 8001a26:	0c0b      	lsrs	r3, r1, #16
 8001a28:	7023      	strb	r3, [r4, #0]
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8001a2a:	f107 0308 	add.w	r3, r7, #8
 8001a2e:	4618      	mov	r0, r3
 8001a30:	f7fe fc56 	bl	80002e0 <strlen>
 8001a34:	4603      	mov	r3, r0
 8001a36:	b29a      	uxth	r2, r3
 8001a38:	f107 0108 	add.w	r1, r7, #8
 8001a3c:	230a      	movs	r3, #10
 8001a3e:	482a      	ldr	r0, [pc, #168]	; (8001ae8 <printRadioSettings+0x90c>)
 8001a40:	f00d f941 	bl	800ecc6 <HAL_UART_Transmit>
	
	//k) EN_ACK_PAY
	if(reg8Val&(1<<1)) sprintf(uartTxBuf, "EN_ACK_PAY:\r\n		Enabled \r\n");
 8001a44:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001a48:	f003 0302 	and.w	r3, r3, #2
 8001a4c:	2b00      	cmp	r3, #0
 8001a4e:	d00b      	beq.n	8001a68 <printRadioSettings+0x88c>
 8001a50:	f107 0308 	add.w	r3, r7, #8
 8001a54:	4a27      	ldr	r2, [pc, #156]	; (8001af4 <printRadioSettings+0x918>)
 8001a56:	461c      	mov	r4, r3
 8001a58:	4615      	mov	r5, r2
 8001a5a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001a5c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001a5e:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001a62:	c403      	stmia	r4!, {r0, r1}
 8001a64:	8022      	strh	r2, [r4, #0]
 8001a66:	e00d      	b.n	8001a84 <printRadioSettings+0x8a8>
	else sprintf(uartTxBuf, "EN_ACK_PAY:\r\n		Disabled \r\n");
 8001a68:	f107 0308 	add.w	r3, r7, #8
 8001a6c:	4a22      	ldr	r2, [pc, #136]	; (8001af8 <printRadioSettings+0x91c>)
 8001a6e:	461c      	mov	r4, r3
 8001a70:	4615      	mov	r5, r2
 8001a72:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001a74:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001a76:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001a7a:	c403      	stmia	r4!, {r0, r1}
 8001a7c:	8022      	strh	r2, [r4, #0]
 8001a7e:	3402      	adds	r4, #2
 8001a80:	0c13      	lsrs	r3, r2, #16
 8001a82:	7023      	strb	r3, [r4, #0]
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8001a84:	f107 0308 	add.w	r3, r7, #8
 8001a88:	4618      	mov	r0, r3
 8001a8a:	f7fe fc29 	bl	80002e0 <strlen>
 8001a8e:	4603      	mov	r3, r0
 8001a90:	b29a      	uxth	r2, r3
 8001a92:	f107 0108 	add.w	r1, r7, #8
 8001a96:	230a      	movs	r3, #10
 8001a98:	4813      	ldr	r0, [pc, #76]	; (8001ae8 <printRadioSettings+0x90c>)
 8001a9a:	f00d f914 	bl	800ecc6 <HAL_UART_Transmit>
	
	
	sprintf(uartTxBuf, "\r\n**********************************************\r\n");
 8001a9e:	f107 0308 	add.w	r3, r7, #8
 8001aa2:	4a16      	ldr	r2, [pc, #88]	; (8001afc <printRadioSettings+0x920>)
 8001aa4:	461c      	mov	r4, r3
 8001aa6:	4615      	mov	r5, r2
 8001aa8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001aaa:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001aac:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001aae:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001ab0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001ab2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001ab4:	682b      	ldr	r3, [r5, #0]
 8001ab6:	461a      	mov	r2, r3
 8001ab8:	8022      	strh	r2, [r4, #0]
 8001aba:	3402      	adds	r4, #2
 8001abc:	0c1b      	lsrs	r3, r3, #16
 8001abe:	7023      	strb	r3, [r4, #0]
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8001ac0:	f107 0308 	add.w	r3, r7, #8
 8001ac4:	4618      	mov	r0, r3
 8001ac6:	f7fe fc0b 	bl	80002e0 <strlen>
 8001aca:	4603      	mov	r3, r0
 8001acc:	b29a      	uxth	r2, r3
 8001ace:	f107 0108 	add.w	r1, r7, #8
 8001ad2:	230a      	movs	r3, #10
 8001ad4:	4804      	ldr	r0, [pc, #16]	; (8001ae8 <printRadioSettings+0x90c>)
 8001ad6:	f00d f8f6 	bl	800ecc6 <HAL_UART_Transmit>
}
 8001ada:	bf00      	nop
 8001adc:	3774      	adds	r7, #116	; 0x74
 8001ade:	46bd      	mov	sp, r7
 8001ae0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001ae2:	bf00      	nop
 8001ae4:	08019c38 	.word	0x08019c38
 8001ae8:	24000294 	.word	0x24000294
 8001aec:	08019c84 	.word	0x08019c84
 8001af0:	08019c9c 	.word	0x08019c9c
 8001af4:	08019cb4 	.word	0x08019cb4
 8001af8:	08019cd0 	.word	0x08019cd0
 8001afc:	080198a4 	.word	0x080198a4

08001b00 <WriteToBuff>:
#include <myprintf.h>


DataBuff DataBuffer = {.Data.DataBuff = 0, .counter = 0};

int WriteToBuff(char Data[], int len){
 8001b00:	b580      	push	{r7, lr}
 8001b02:	b082      	sub	sp, #8
 8001b04:	af00      	add	r7, sp, #0
 8001b06:	6078      	str	r0, [r7, #4]
 8001b08:	6039      	str	r1, [r7, #0]
  if(len <= 1 || len >= Bufflength){
 8001b0a:	683b      	ldr	r3, [r7, #0]
 8001b0c:	2b01      	cmp	r3, #1
 8001b0e:	dd03      	ble.n	8001b18 <WriteToBuff+0x18>
 8001b10:	683b      	ldr	r3, [r7, #0]
 8001b12:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001b16:	db01      	blt.n	8001b1c <WriteToBuff+0x1c>
    return 3; //Dude dont try and break it
 8001b18:	2303      	movs	r3, #3
 8001b1a:	e089      	b.n	8001c30 <WriteToBuff+0x130>
  }

  if(DataBuffer.counter < Bufflength && DataBuffer.counter + len >= Bufflength){
 8001b1c:	4b46      	ldr	r3, [pc, #280]	; (8001c38 <WriteToBuff+0x138>)
 8001b1e:	f8d3 3800 	ldr.w	r3, [r3, #2048]	; 0x800
 8001b22:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001b26:	d238      	bcs.n	8001b9a <WriteToBuff+0x9a>
 8001b28:	4b43      	ldr	r3, [pc, #268]	; (8001c38 <WriteToBuff+0x138>)
 8001b2a:	f8d3 2800 	ldr.w	r2, [r3, #2048]	; 0x800
 8001b2e:	683b      	ldr	r3, [r7, #0]
 8001b30:	4413      	add	r3, r2
 8001b32:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001b36:	d330      	bcc.n	8001b9a <WriteToBuff+0x9a>
    DataBuffer.counter = Bufflength;
 8001b38:	4b3f      	ldr	r3, [pc, #252]	; (8001c38 <WriteToBuff+0x138>)
 8001b3a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001b3e:	f8c3 2800 	str.w	r2, [r3, #2048]	; 0x800
    memcpy((DataBuffer.Data.DataBuff + DataBuffer.counter), Data, len);
 8001b42:	4b3d      	ldr	r3, [pc, #244]	; (8001c38 <WriteToBuff+0x138>)
 8001b44:	f8d3 3800 	ldr.w	r3, [r3, #2048]	; 0x800
 8001b48:	4a3b      	ldr	r2, [pc, #236]	; (8001c38 <WriteToBuff+0x138>)
 8001b4a:	4413      	add	r3, r2
 8001b4c:	683a      	ldr	r2, [r7, #0]
 8001b4e:	6879      	ldr	r1, [r7, #4]
 8001b50:	4618      	mov	r0, r3
 8001b52:	f016 fd27 	bl	80185a4 <memcpy>
    DataBuffer.counter += len;
 8001b56:	4b38      	ldr	r3, [pc, #224]	; (8001c38 <WriteToBuff+0x138>)
 8001b58:	f8d3 2800 	ldr.w	r2, [r3, #2048]	; 0x800
 8001b5c:	683b      	ldr	r3, [r7, #0]
 8001b5e:	4413      	add	r3, r2
 8001b60:	4a35      	ldr	r2, [pc, #212]	; (8001c38 <WriteToBuff+0x138>)
 8001b62:	f8c2 3800 	str.w	r3, [r2, #2048]	; 0x800
    if(f_write(&myFILE, DataBuffer.Data.DataBuff1, sizeof(DataBuffer.Data.DataBuff1), &testByte) == 0){
 8001b66:	4b35      	ldr	r3, [pc, #212]	; (8001c3c <WriteToBuff+0x13c>)
 8001b68:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001b6c:	4932      	ldr	r1, [pc, #200]	; (8001c38 <WriteToBuff+0x138>)
 8001b6e:	4834      	ldr	r0, [pc, #208]	; (8001c40 <WriteToBuff+0x140>)
 8001b70:	f015 fd67 	bl	8017642 <f_write>
 8001b74:	4603      	mov	r3, r0
 8001b76:	2b00      	cmp	r3, #0
 8001b78:	d10d      	bne.n	8001b96 <WriteToBuff+0x96>

      memset(DataBuffer.Data.DataBuff2, 0, sizeof(DataBuffer.Data.DataBuff2)); //Clear next buffer after writing
 8001b7a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001b7e:	2100      	movs	r1, #0
 8001b80:	4830      	ldr	r0, [pc, #192]	; (8001c44 <WriteToBuff+0x144>)
 8001b82:	f016 fd1a 	bl	80185ba <memset>
    	f_sync(&myFILE);
 8001b86:	482e      	ldr	r0, [pc, #184]	; (8001c40 <WriteToBuff+0x140>)
 8001b88:	f015 fed0 	bl	801792c <f_sync>
      printf("Buffer 1 has been written\n");
 8001b8c:	482e      	ldr	r0, [pc, #184]	; (8001c48 <WriteToBuff+0x148>)
 8001b8e:	f016 fe39 	bl	8018804 <puts>
      return 1; //buffer 1 has been written
 8001b92:	2301      	movs	r3, #1
 8001b94:	e04c      	b.n	8001c30 <WriteToBuff+0x130>
    }
    return 4; //could not write :(
 8001b96:	2304      	movs	r3, #4
 8001b98:	e04a      	b.n	8001c30 <WriteToBuff+0x130>
  }

  if(DataBuffer.counter + len >= 2*Bufflength){
 8001b9a:	4b27      	ldr	r3, [pc, #156]	; (8001c38 <WriteToBuff+0x138>)
 8001b9c:	f8d3 2800 	ldr.w	r2, [r3, #2048]	; 0x800
 8001ba0:	683b      	ldr	r3, [r7, #0]
 8001ba2:	4413      	add	r3, r2
 8001ba4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001ba8:	d32f      	bcc.n	8001c0a <WriteToBuff+0x10a>
    DataBuffer.counter = 0;
 8001baa:	4b23      	ldr	r3, [pc, #140]	; (8001c38 <WriteToBuff+0x138>)
 8001bac:	2200      	movs	r2, #0
 8001bae:	f8c3 2800 	str.w	r2, [r3, #2048]	; 0x800
    memcpy((DataBuffer.Data.DataBuff + DataBuffer.counter), Data, len);
 8001bb2:	4b21      	ldr	r3, [pc, #132]	; (8001c38 <WriteToBuff+0x138>)
 8001bb4:	f8d3 3800 	ldr.w	r3, [r3, #2048]	; 0x800
 8001bb8:	4a1f      	ldr	r2, [pc, #124]	; (8001c38 <WriteToBuff+0x138>)
 8001bba:	4413      	add	r3, r2
 8001bbc:	683a      	ldr	r2, [r7, #0]
 8001bbe:	6879      	ldr	r1, [r7, #4]
 8001bc0:	4618      	mov	r0, r3
 8001bc2:	f016 fcef 	bl	80185a4 <memcpy>
    DataBuffer.counter += len;
 8001bc6:	4b1c      	ldr	r3, [pc, #112]	; (8001c38 <WriteToBuff+0x138>)
 8001bc8:	f8d3 2800 	ldr.w	r2, [r3, #2048]	; 0x800
 8001bcc:	683b      	ldr	r3, [r7, #0]
 8001bce:	4413      	add	r3, r2
 8001bd0:	4a19      	ldr	r2, [pc, #100]	; (8001c38 <WriteToBuff+0x138>)
 8001bd2:	f8c2 3800 	str.w	r3, [r2, #2048]	; 0x800
    if(f_write(&myFILE, DataBuffer.Data.DataBuff2, sizeof(DataBuffer.Data.DataBuff2), &testByte) == 0){
 8001bd6:	4b19      	ldr	r3, [pc, #100]	; (8001c3c <WriteToBuff+0x13c>)
 8001bd8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001bdc:	4919      	ldr	r1, [pc, #100]	; (8001c44 <WriteToBuff+0x144>)
 8001bde:	4818      	ldr	r0, [pc, #96]	; (8001c40 <WriteToBuff+0x140>)
 8001be0:	f015 fd2f 	bl	8017642 <f_write>
 8001be4:	4603      	mov	r3, r0
 8001be6:	2b00      	cmp	r3, #0
 8001be8:	d10d      	bne.n	8001c06 <WriteToBuff+0x106>
      memset(DataBuffer.Data.DataBuff1, 0, sizeof(DataBuffer.Data.DataBuff1)); //Clear next buffer after writing
 8001bea:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001bee:	2100      	movs	r1, #0
 8001bf0:	4811      	ldr	r0, [pc, #68]	; (8001c38 <WriteToBuff+0x138>)
 8001bf2:	f016 fce2 	bl	80185ba <memset>
    	f_sync(&myFILE);
 8001bf6:	4812      	ldr	r0, [pc, #72]	; (8001c40 <WriteToBuff+0x140>)
 8001bf8:	f015 fe98 	bl	801792c <f_sync>
      printf("Buffer 2 has been written\n");
 8001bfc:	4813      	ldr	r0, [pc, #76]	; (8001c4c <WriteToBuff+0x14c>)
 8001bfe:	f016 fe01 	bl	8018804 <puts>
      return 2; //buffer 2 has been written
 8001c02:	2302      	movs	r3, #2
 8001c04:	e014      	b.n	8001c30 <WriteToBuff+0x130>
    }
    return 4; //could not write :(
 8001c06:	2304      	movs	r3, #4
 8001c08:	e012      	b.n	8001c30 <WriteToBuff+0x130>
  }
/*if(DataBuffer.counter + len >= 2*Bufflength){
	f_write(&myFILE, DataBuffer.Data.DataBuff, sizeof(DataBuffer.Data.DataBuff), &testByte);
	DataBuffer.counter = 0;
}*/
  memcpy((DataBuffer.Data.DataBuff + DataBuffer.counter), Data, len);
 8001c0a:	4b0b      	ldr	r3, [pc, #44]	; (8001c38 <WriteToBuff+0x138>)
 8001c0c:	f8d3 3800 	ldr.w	r3, [r3, #2048]	; 0x800
 8001c10:	4a09      	ldr	r2, [pc, #36]	; (8001c38 <WriteToBuff+0x138>)
 8001c12:	4413      	add	r3, r2
 8001c14:	683a      	ldr	r2, [r7, #0]
 8001c16:	6879      	ldr	r1, [r7, #4]
 8001c18:	4618      	mov	r0, r3
 8001c1a:	f016 fcc3 	bl	80185a4 <memcpy>
  DataBuffer.counter += len;
 8001c1e:	4b06      	ldr	r3, [pc, #24]	; (8001c38 <WriteToBuff+0x138>)
 8001c20:	f8d3 2800 	ldr.w	r2, [r3, #2048]	; 0x800
 8001c24:	683b      	ldr	r3, [r7, #0]
 8001c26:	4413      	add	r3, r2
 8001c28:	4a03      	ldr	r2, [pc, #12]	; (8001c38 <WriteToBuff+0x138>)
 8001c2a:	f8c2 3800 	str.w	r3, [r2, #2048]	; 0x800
  return 0; //moved data to buffer
 8001c2e:	2300      	movs	r3, #0
}
 8001c30:	4618      	mov	r0, r3
 8001c32:	3708      	adds	r7, #8
 8001c34:	46bd      	mov	sp, r7
 8001c36:	bd80      	pop	{r7, pc}
 8001c38:	24000320 	.word	0x24000320
 8001c3c:	240010c8 	.word	0x240010c8
 8001c40:	24000b90 	.word	0x24000b90
 8001c44:	24000720 	.word	0x24000720
 8001c48:	08019de8 	.word	0x08019de8
 8001c4c:	08019e04 	.word	0x08019e04

08001c50 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001c50:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001c52:	f2ad 7df4 	subw	sp, sp, #2036	; 0x7f4
 8001c56:	af22      	add	r7, sp, #136	; 0x88
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001c58:	f001 fcc8 	bl	80035ec <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001c5c:	f000 fbf4 	bl	8002448 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001c60:	f000 ff54 	bl	8002b0c <MX_GPIO_Init>
  MX_DMA_Init();
 8001c64:	f000 ff32 	bl	8002acc <MX_DMA_Init>
  MX_SDMMC1_SD_Init();
 8001c68:	f000 fe20 	bl	80028ac <MX_SDMMC1_SD_Init>
  MX_FATFS_Init();
 8001c6c:	f010 fb60 	bl	8012330 <MX_FATFS_Init>
  MX_USB_DEVICE_Init();
 8001c70:	f015 ff60 	bl	8017b34 <MX_USB_DEVICE_Init>
  MX_FDCAN1_Init();
 8001c74:	f000 fcf2 	bl	800265c <MX_FDCAN1_Init>
  MX_FDCAN2_Init();
 8001c78:	f000 fd56 	bl	8002728 <MX_FDCAN2_Init>
  MX_UART8_Init();
 8001c7c:	f000 fe8e 	bl	800299c <MX_UART8_Init>
  MX_USART3_UART_Init();
 8001c80:	f000 fed8 	bl	8002a34 <MX_USART3_UART_Init>
  MX_SPI1_Init();
 8001c84:	f000 fe34 	bl	80028f0 <MX_SPI1_Init>
  MX_RTC_Init();
 8001c88:	f000 fdb2 	bl	80027f0 <MX_RTC_Init>
  /* USER CODE BEGIN 2 */
  //HAL_Delay(1000);//NEEDED FOR USB MASS STORAGE TO WORK
  HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_0);
 8001c8c:	2101      	movs	r1, #1
 8001c8e:	4882      	ldr	r0, [pc, #520]	; (8001e98 <main+0x248>)
 8001c90:	f005 fa71 	bl	8007176 <HAL_GPIO_TogglePin>
  //Telemetry
  NRF24_begin(TELE_CE_GPIO_Port, TELE_CS_Pin, TELE_CE_Pin, hspi1);
 8001c94:	4c81      	ldr	r4, [pc, #516]	; (8001e9c <main+0x24c>)
 8001c96:	4668      	mov	r0, sp
 8001c98:	1d23      	adds	r3, r4, #4
 8001c9a:	2284      	movs	r2, #132	; 0x84
 8001c9c:	4619      	mov	r1, r3
 8001c9e:	f016 fc81 	bl	80185a4 <memcpy>
 8001ca2:	6823      	ldr	r3, [r4, #0]
 8001ca4:	2201      	movs	r2, #1
 8001ca6:	2102      	movs	r1, #2
 8001ca8:	487d      	ldr	r0, [pc, #500]	; (8001ea0 <main+0x250>)
 8001caa:	f7ff f839 	bl	8000d20 <NRF24_begin>
    //nrf24_DebugUART_Init(huart3);



    // TRANSMIT NO ACK //
    NRF24_stopListening();
 8001cae:	f7ff f917 	bl	8000ee0 <NRF24_stopListening>
    NRF24_openWritingPipe(TxpipeAddrs);
 8001cb2:	4b7c      	ldr	r3, [pc, #496]	; (8001ea4 <main+0x254>)
 8001cb4:	e9d3 3400 	ldrd	r3, r4, [r3]
 8001cb8:	4618      	mov	r0, r3
 8001cba:	4621      	mov	r1, r4
 8001cbc:	f7ff f91c 	bl	8000ef8 <NRF24_openWritingPipe>
    NRF24_setAutoAck(false);
 8001cc0:	2000      	movs	r0, #0
 8001cc2:	f7ff f99d 	bl	8001000 <NRF24_setAutoAck>
    NRF24_setChannel(42);
 8001cc6:	202a      	movs	r0, #42	; 0x2a
 8001cc8:	f7ff f955 	bl	8000f76 <NRF24_setChannel>
    NRF24_setPayloadSize(32);
 8001ccc:	2020      	movs	r0, #32
 8001cce:	f7ff f967 	bl	8000fa0 <NRF24_setPayloadSize>

    printRadioSettings();
 8001cd2:	f7ff fa83 	bl	80011dc <printRadioSettings>
  //END Telemetry
  printf("Starting\n");
 8001cd6:	4874      	ldr	r0, [pc, #464]	; (8001ea8 <main+0x258>)
 8001cd8:	f016 fd94 	bl	8018804 <puts>
  FDCAN_Config(&hfdcan1);
 8001cdc:	4873      	ldr	r0, [pc, #460]	; (8001eac <main+0x25c>)
 8001cde:	f7fe fcd7 	bl	8000690 <FDCAN_Config>
  //GPS DMA
  HAL_UART_Receive_DMA(&huart3, (uint8_t *)rxBuf, BUFFLENGTH);
 8001ce2:	2246      	movs	r2, #70	; 0x46
 8001ce4:	4972      	ldr	r1, [pc, #456]	; (8001eb0 <main+0x260>)
 8001ce6:	4873      	ldr	r0, [pc, #460]	; (8001eb4 <main+0x264>)
 8001ce8:	f00d f884 	bl	800edf4 <HAL_UART_Receive_DMA>
  //HAL_Delay(1000);//GPS required this in testing, maybe remove?
  //variables required for 10Hz GPS
  uint16_t measRate = 100;
 8001cec:	2364      	movs	r3, #100	; 0x64
 8001cee:	f8a7 3756 	strh.w	r3, [r7, #1878]	; 0x756
  uint16_t navRate = 1;
 8001cf2:	2301      	movs	r3, #1
 8001cf4:	f8a7 3754 	strh.w	r3, [r7, #1876]	; 0x754
  uint16_t timeRef = 0;
 8001cf8:	2300      	movs	r3, #0
 8001cfa:	f8a7 3752 	strh.w	r3, [r7, #1874]	; 0x752
  gps_rate_config(&huart3, measRate, navRate, timeRef);
 8001cfe:	f8b7 3752 	ldrh.w	r3, [r7, #1874]	; 0x752
 8001d02:	f8b7 2754 	ldrh.w	r2, [r7, #1876]	; 0x754
 8001d06:	f8b7 1756 	ldrh.w	r1, [r7, #1878]	; 0x756
 8001d0a:	486a      	ldr	r0, [pc, #424]	; (8001eb4 <main+0x264>)
 8001d0c:	f7fe feaa 	bl	8000a64 <gps_rate_config>

  gps_msg_config(&huart3, "DTM", 0);//ERROR
 8001d10:	2200      	movs	r2, #0
 8001d12:	4969      	ldr	r1, [pc, #420]	; (8001eb8 <main+0x268>)
 8001d14:	4867      	ldr	r0, [pc, #412]	; (8001eb4 <main+0x264>)
 8001d16:	f7fe fe35 	bl	8000984 <gps_msg_config>
  gps_msg_config(&huart3, "GAQ", 0);
 8001d1a:	2200      	movs	r2, #0
 8001d1c:	4967      	ldr	r1, [pc, #412]	; (8001ebc <main+0x26c>)
 8001d1e:	4865      	ldr	r0, [pc, #404]	; (8001eb4 <main+0x264>)
 8001d20:	f7fe fe30 	bl	8000984 <gps_msg_config>
  gps_msg_config(&huart3, "GBQ", 0);
 8001d24:	2200      	movs	r2, #0
 8001d26:	4966      	ldr	r1, [pc, #408]	; (8001ec0 <main+0x270>)
 8001d28:	4862      	ldr	r0, [pc, #392]	; (8001eb4 <main+0x264>)
 8001d2a:	f7fe fe2b 	bl	8000984 <gps_msg_config>
  gps_msg_config(&huart3, "GBS", 0);//ERROR
 8001d2e:	2200      	movs	r2, #0
 8001d30:	4964      	ldr	r1, [pc, #400]	; (8001ec4 <main+0x274>)
 8001d32:	4860      	ldr	r0, [pc, #384]	; (8001eb4 <main+0x264>)
 8001d34:	f7fe fe26 	bl	8000984 <gps_msg_config>
  gps_msg_config(&huart3, "GGA", 0);//ERROR
 8001d38:	2200      	movs	r2, #0
 8001d3a:	4963      	ldr	r1, [pc, #396]	; (8001ec8 <main+0x278>)
 8001d3c:	485d      	ldr	r0, [pc, #372]	; (8001eb4 <main+0x264>)
 8001d3e:	f7fe fe21 	bl	8000984 <gps_msg_config>
  gps_msg_config(&huart3, "GLL", 0);//ERROR
 8001d42:	2200      	movs	r2, #0
 8001d44:	4961      	ldr	r1, [pc, #388]	; (8001ecc <main+0x27c>)
 8001d46:	485b      	ldr	r0, [pc, #364]	; (8001eb4 <main+0x264>)
 8001d48:	f7fe fe1c 	bl	8000984 <gps_msg_config>
  gps_msg_config(&huart3, "GLQ", 0);
 8001d4c:	2200      	movs	r2, #0
 8001d4e:	4960      	ldr	r1, [pc, #384]	; (8001ed0 <main+0x280>)
 8001d50:	4858      	ldr	r0, [pc, #352]	; (8001eb4 <main+0x264>)
 8001d52:	f7fe fe17 	bl	8000984 <gps_msg_config>
  gps_msg_config(&huart3, "GNQ", 0);
 8001d56:	2200      	movs	r2, #0
 8001d58:	495e      	ldr	r1, [pc, #376]	; (8001ed4 <main+0x284>)
 8001d5a:	4856      	ldr	r0, [pc, #344]	; (8001eb4 <main+0x264>)
 8001d5c:	f7fe fe12 	bl	8000984 <gps_msg_config>
  gps_msg_config(&huart3, "GNS", 0);//ERROR
 8001d60:	2200      	movs	r2, #0
 8001d62:	495d      	ldr	r1, [pc, #372]	; (8001ed8 <main+0x288>)
 8001d64:	4853      	ldr	r0, [pc, #332]	; (8001eb4 <main+0x264>)
 8001d66:	f7fe fe0d 	bl	8000984 <gps_msg_config>
  gps_msg_config(&huart3, "GPQ", 0);
 8001d6a:	2200      	movs	r2, #0
 8001d6c:	495b      	ldr	r1, [pc, #364]	; (8001edc <main+0x28c>)
 8001d6e:	4851      	ldr	r0, [pc, #324]	; (8001eb4 <main+0x264>)
 8001d70:	f7fe fe08 	bl	8000984 <gps_msg_config>
  gps_msg_config(&huart3, "GRS", 0);//ERROR
 8001d74:	2200      	movs	r2, #0
 8001d76:	495a      	ldr	r1, [pc, #360]	; (8001ee0 <main+0x290>)
 8001d78:	484e      	ldr	r0, [pc, #312]	; (8001eb4 <main+0x264>)
 8001d7a:	f7fe fe03 	bl	8000984 <gps_msg_config>
  gps_msg_config(&huart3, "GSA", 0);//ERROR
 8001d7e:	2200      	movs	r2, #0
 8001d80:	4958      	ldr	r1, [pc, #352]	; (8001ee4 <main+0x294>)
 8001d82:	484c      	ldr	r0, [pc, #304]	; (8001eb4 <main+0x264>)
 8001d84:	f7fe fdfe 	bl	8000984 <gps_msg_config>
  gps_msg_config(&huart3, "GST", 0);//ERROR
 8001d88:	2200      	movs	r2, #0
 8001d8a:	4957      	ldr	r1, [pc, #348]	; (8001ee8 <main+0x298>)
 8001d8c:	4849      	ldr	r0, [pc, #292]	; (8001eb4 <main+0x264>)
 8001d8e:	f7fe fdf9 	bl	8000984 <gps_msg_config>
  gps_msg_config(&huart3, "GSV", 0);//ERROR
 8001d92:	2200      	movs	r2, #0
 8001d94:	4955      	ldr	r1, [pc, #340]	; (8001eec <main+0x29c>)
 8001d96:	4847      	ldr	r0, [pc, #284]	; (8001eb4 <main+0x264>)
 8001d98:	f7fe fdf4 	bl	8000984 <gps_msg_config>
  gps_msg_config(&huart3, "RLM", 0);
 8001d9c:	2200      	movs	r2, #0
 8001d9e:	4954      	ldr	r1, [pc, #336]	; (8001ef0 <main+0x2a0>)
 8001da0:	4844      	ldr	r0, [pc, #272]	; (8001eb4 <main+0x264>)
 8001da2:	f7fe fdef 	bl	8000984 <gps_msg_config>
  gps_msg_config(&huart3, "RMC", 1);//ERROR
 8001da6:	2201      	movs	r2, #1
 8001da8:	4952      	ldr	r1, [pc, #328]	; (8001ef4 <main+0x2a4>)
 8001daa:	4842      	ldr	r0, [pc, #264]	; (8001eb4 <main+0x264>)
 8001dac:	f7fe fdea 	bl	8000984 <gps_msg_config>
  gps_msg_config(&huart3, "TXT", 0);
 8001db0:	2200      	movs	r2, #0
 8001db2:	4951      	ldr	r1, [pc, #324]	; (8001ef8 <main+0x2a8>)
 8001db4:	483f      	ldr	r0, [pc, #252]	; (8001eb4 <main+0x264>)
 8001db6:	f7fe fde5 	bl	8000984 <gps_msg_config>
  gps_msg_config(&huart3, "VLW", 0);//ERROR
 8001dba:	2200      	movs	r2, #0
 8001dbc:	494f      	ldr	r1, [pc, #316]	; (8001efc <main+0x2ac>)
 8001dbe:	483d      	ldr	r0, [pc, #244]	; (8001eb4 <main+0x264>)
 8001dc0:	f7fe fde0 	bl	8000984 <gps_msg_config>
  gps_msg_config(&huart3, "VTG", 0);//ERROR
 8001dc4:	2200      	movs	r2, #0
 8001dc6:	494e      	ldr	r1, [pc, #312]	; (8001f00 <main+0x2b0>)
 8001dc8:	483a      	ldr	r0, [pc, #232]	; (8001eb4 <main+0x264>)
 8001dca:	f7fe fddb 	bl	8000984 <gps_msg_config>
  gps_msg_config(&huart3, "ZDA", 0);//ERROR
 8001dce:	2200      	movs	r2, #0
 8001dd0:	494c      	ldr	r1, [pc, #304]	; (8001f04 <main+0x2b4>)
 8001dd2:	4838      	ldr	r0, [pc, #224]	; (8001eb4 <main+0x264>)
 8001dd4:	f7fe fdd6 	bl	8000984 <gps_msg_config>

  if(f_mount(&myFATAFS, SDPath, 1) == FR_OK){
 8001dd8:	2201      	movs	r2, #1
 8001dda:	494b      	ldr	r1, [pc, #300]	; (8001f08 <main+0x2b8>)
 8001ddc:	484b      	ldr	r0, [pc, #300]	; (8001f0c <main+0x2bc>)
 8001dde:	f015 f8ed 	bl	8016fbc <f_mount>
 8001de2:	4603      	mov	r3, r0
 8001de4:	2b00      	cmp	r3, #0
 8001de6:	f040 80b3 	bne.w	8001f50 <main+0x300>
  	  //HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_0);
  	  char myPath[] = "test.csv\0";
 8001dea:	f507 6384 	add.w	r3, r7, #1056	; 0x420
 8001dee:	4a48      	ldr	r2, [pc, #288]	; (8001f10 <main+0x2c0>)
 8001df0:	ca07      	ldmia	r2, {r0, r1, r2}
 8001df2:	c303      	stmia	r3!, {r0, r1}
 8001df4:	801a      	strh	r2, [r3, #0]
      char ConfigPath[] ="Config.csv\0";
 8001df6:	f207 4314 	addw	r3, r7, #1044	; 0x414
 8001dfa:	4a46      	ldr	r2, [pc, #280]	; (8001f14 <main+0x2c4>)
 8001dfc:	ca07      	ldmia	r2, {r0, r1, r2}
 8001dfe:	e883 0007 	stmia.w	r3, {r0, r1, r2}
      char ConfigParams[1000];

      //Tries to open config File
      if(f_open(&Config, ConfigPath, FA_READ) == FR_NO_FILE){
 8001e02:	f207 4314 	addw	r3, r7, #1044	; 0x414
 8001e06:	2201      	movs	r2, #1
 8001e08:	4619      	mov	r1, r3
 8001e0a:	4843      	ldr	r0, [pc, #268]	; (8001f18 <main+0x2c8>)
 8001e0c:	f015 f91c 	bl	8017048 <f_open>
 8001e10:	4603      	mov	r3, r0
 8001e12:	2b04      	cmp	r3, #4
 8001e14:	f040 8088 	bne.w	8001f28 <main+0x2d8>
        //If file doesnt exist creates a file using hard coded defualts and passes those to internal config array
        f_open(&Config, ConfigPath, FA_WRITE | FA_CREATE_ALWAYS);
 8001e18:	f207 4314 	addw	r3, r7, #1044	; 0x414
 8001e1c:	220a      	movs	r2, #10
 8001e1e:	4619      	mov	r1, r3
 8001e20:	483d      	ldr	r0, [pc, #244]	; (8001f18 <main+0x2c8>)
 8001e22:	f015 f911 	bl	8017048 <f_open>

        sprintf(ConfigParams, "ID,Device,Bytes,Rate(HZ),Type,Description\n");
 8001e26:	1d3b      	adds	r3, r7, #4
 8001e28:	4a3c      	ldr	r2, [pc, #240]	; (8001f1c <main+0x2cc>)
 8001e2a:	461c      	mov	r4, r3
 8001e2c:	4615      	mov	r5, r2
 8001e2e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001e30:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001e32:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001e34:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001e36:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001e3a:	c403      	stmia	r4!, {r0, r1}
 8001e3c:	8022      	strh	r2, [r4, #0]
 8001e3e:	3402      	adds	r4, #2
 8001e40:	0c13      	lsrs	r3, r2, #16
 8001e42:	7023      	strb	r3, [r4, #0]
        sprintf(ConfigParams + strlen(ConfigParams),"0x50,Datalogger,8,0.20,uint32_t,HIGH:FileNO LOW:millis,\n");
 8001e44:	1d3b      	adds	r3, r7, #4
 8001e46:	4618      	mov	r0, r3
 8001e48:	f7fe fa4a 	bl	80002e0 <strlen>
 8001e4c:	4602      	mov	r2, r0
 8001e4e:	1d3b      	adds	r3, r7, #4
 8001e50:	4413      	add	r3, r2
 8001e52:	4a33      	ldr	r2, [pc, #204]	; (8001f20 <main+0x2d0>)
 8001e54:	4614      	mov	r4, r2
 8001e56:	469c      	mov	ip, r3
 8001e58:	f104 0e30 	add.w	lr, r4, #48	; 0x30
 8001e5c:	4665      	mov	r5, ip
 8001e5e:	4626      	mov	r6, r4
 8001e60:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8001e62:	6028      	str	r0, [r5, #0]
 8001e64:	6069      	str	r1, [r5, #4]
 8001e66:	60aa      	str	r2, [r5, #8]
 8001e68:	60eb      	str	r3, [r5, #12]
 8001e6a:	3410      	adds	r4, #16
 8001e6c:	f10c 0c10 	add.w	ip, ip, #16
 8001e70:	4574      	cmp	r4, lr
 8001e72:	d1f3      	bne.n	8001e5c <main+0x20c>
 8001e74:	4662      	mov	r2, ip
 8001e76:	4623      	mov	r3, r4
 8001e78:	cb03      	ldmia	r3!, {r0, r1}
 8001e7a:	6010      	str	r0, [r2, #0]
 8001e7c:	6051      	str	r1, [r2, #4]
 8001e7e:	781b      	ldrb	r3, [r3, #0]
 8001e80:	7213      	strb	r3, [r2, #8]

        f_write(&Config, ConfigParams, strlen(ConfigParams), &ConfByteW);
 8001e82:	1d3b      	adds	r3, r7, #4
 8001e84:	4618      	mov	r0, r3
 8001e86:	f7fe fa2b 	bl	80002e0 <strlen>
 8001e8a:	4602      	mov	r2, r0
 8001e8c:	1d39      	adds	r1, r7, #4
 8001e8e:	4b25      	ldr	r3, [pc, #148]	; (8001f24 <main+0x2d4>)
 8001e90:	4821      	ldr	r0, [pc, #132]	; (8001f18 <main+0x2c8>)
 8001e92:	f015 fbd6 	bl	8017642 <f_write>
 8001e96:	e051      	b.n	8001f3c <main+0x2ec>
 8001e98:	58020400 	.word	0x58020400
 8001e9c:	24001618 	.word	0x24001618
 8001ea0:	58020000 	.word	0x58020000
 8001ea4:	24000000 	.word	0x24000000
 8001ea8:	08019e20 	.word	0x08019e20
 8001eac:	240014ec 	.word	0x240014ec
 8001eb0:	240012fc 	.word	0x240012fc
 8001eb4:	240013bc 	.word	0x240013bc
 8001eb8:	08019e2c 	.word	0x08019e2c
 8001ebc:	08019e30 	.word	0x08019e30
 8001ec0:	08019e34 	.word	0x08019e34
 8001ec4:	08019e38 	.word	0x08019e38
 8001ec8:	08019e3c 	.word	0x08019e3c
 8001ecc:	08019e40 	.word	0x08019e40
 8001ed0:	08019e44 	.word	0x08019e44
 8001ed4:	08019e48 	.word	0x08019e48
 8001ed8:	08019e4c 	.word	0x08019e4c
 8001edc:	08019e50 	.word	0x08019e50
 8001ee0:	08019e54 	.word	0x08019e54
 8001ee4:	08019e58 	.word	0x08019e58
 8001ee8:	08019e5c 	.word	0x08019e5c
 8001eec:	08019e60 	.word	0x08019e60
 8001ef0:	08019e64 	.word	0x08019e64
 8001ef4:	08019e68 	.word	0x08019e68
 8001ef8:	08019e6c 	.word	0x08019e6c
 8001efc:	08019e70 	.word	0x08019e70
 8001f00:	08019e74 	.word	0x08019e74
 8001f04:	08019e78 	.word	0x08019e78
 8001f08:	24001748 	.word	0x24001748
 8001f0c:	24000dc8 	.word	0x24000dc8
 8001f10:	08019f08 	.word	0x08019f08
 8001f14:	08019f14 	.word	0x08019f14
 8001f18:	240010cc 	.word	0x240010cc
 8001f1c:	08019e7c 	.word	0x08019e7c
 8001f20:	08019ea8 	.word	0x08019ea8
 8001f24:	24000dc4 	.word	0x24000dc4
      }else{
        //If file does exist reads in config parameters to internal config array
        f_read(&Config, ConfigParams, strlen(ConfigParams), &ConfByteR);
 8001f28:	1d3b      	adds	r3, r7, #4
 8001f2a:	4618      	mov	r0, r3
 8001f2c:	f7fe f9d8 	bl	80002e0 <strlen>
 8001f30:	4602      	mov	r2, r0
 8001f32:	1d39      	adds	r1, r7, #4
 8001f34:	4b98      	ldr	r3, [pc, #608]	; (8002198 <main+0x548>)
 8001f36:	4899      	ldr	r0, [pc, #612]	; (800219c <main+0x54c>)
 8001f38:	f015 fa44 	bl	80173c4 <f_read>
      }
      f_close(&Config);
 8001f3c:	4897      	ldr	r0, [pc, #604]	; (800219c <main+0x54c>)
 8001f3e:	f015 fd73 	bl	8017a28 <f_close>
  	  f_open(&myFILE, myPath, FA_WRITE | FA_CREATE_ALWAYS);
 8001f42:	f507 6384 	add.w	r3, r7, #1056	; 0x420
 8001f46:	220a      	movs	r2, #10
 8001f48:	4619      	mov	r1, r3
 8001f4a:	4895      	ldr	r0, [pc, #596]	; (80021a0 <main+0x550>)
 8001f4c:	f015 f87c 	bl	8017048 <f_open>

  extern int GPS_flag;
  extern int FDCAN_Flag;
  extern int CAN_Flag;

  sTime.SecondFraction = 999;
 8001f50:	4b94      	ldr	r3, [pc, #592]	; (80021a4 <main+0x554>)
 8001f52:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001f56:	609a      	str	r2, [r3, #8]
  uint32_t LocalTime = HAL_GetTick();
 8001f58:	f001 fbce 	bl	80036f8 <HAL_GetTick>
 8001f5c:	f8c7 074c 	str.w	r0, [r7, #1868]	; 0x74c
  HAL_RTC_GetTime(&hrtc, &sTime, RTC_FORMAT_BIN);
 8001f60:	2200      	movs	r2, #0
 8001f62:	4990      	ldr	r1, [pc, #576]	; (80021a4 <main+0x554>)
 8001f64:	4890      	ldr	r0, [pc, #576]	; (80021a8 <main+0x558>)
 8001f66:	f009 fc29 	bl	800b7bc <HAL_RTC_GetTime>
  HAL_RTC_GetDate(&hrtc, &sDate, RTC_FORMAT_BIN);
 8001f6a:	2200      	movs	r2, #0
 8001f6c:	498f      	ldr	r1, [pc, #572]	; (80021ac <main+0x55c>)
 8001f6e:	488e      	ldr	r0, [pc, #568]	; (80021a8 <main+0x558>)
 8001f70:	f009 fd08 	bl	800b984 <HAL_RTC_GetDate>

  sTime.SubSeconds -= LocalTime % 1000;
 8001f74:	4b8b      	ldr	r3, [pc, #556]	; (80021a4 <main+0x554>)
 8001f76:	6859      	ldr	r1, [r3, #4]
 8001f78:	f8d7 274c 	ldr.w	r2, [r7, #1868]	; 0x74c
 8001f7c:	4b8c      	ldr	r3, [pc, #560]	; (80021b0 <main+0x560>)
 8001f7e:	fba3 0302 	umull	r0, r3, r3, r2
 8001f82:	099b      	lsrs	r3, r3, #6
 8001f84:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001f88:	fb00 f303 	mul.w	r3, r0, r3
 8001f8c:	1ad3      	subs	r3, r2, r3
 8001f8e:	1acb      	subs	r3, r1, r3
 8001f90:	4a84      	ldr	r2, [pc, #528]	; (80021a4 <main+0x554>)
 8001f92:	6053      	str	r3, [r2, #4]
  LocalTime = LocalTime/1000;
 8001f94:	f8d7 374c 	ldr.w	r3, [r7, #1868]	; 0x74c
 8001f98:	4a85      	ldr	r2, [pc, #532]	; (80021b0 <main+0x560>)
 8001f9a:	fba2 2303 	umull	r2, r3, r2, r3
 8001f9e:	099b      	lsrs	r3, r3, #6
 8001fa0:	f8c7 374c 	str.w	r3, [r7, #1868]	; 0x74c
  sTime.Seconds -= LocalTime % 60;
 8001fa4:	4b7f      	ldr	r3, [pc, #508]	; (80021a4 <main+0x554>)
 8001fa6:	7898      	ldrb	r0, [r3, #2]
 8001fa8:	f8d7 174c 	ldr.w	r1, [r7, #1868]	; 0x74c
 8001fac:	4b81      	ldr	r3, [pc, #516]	; (80021b4 <main+0x564>)
 8001fae:	fba3 2301 	umull	r2, r3, r3, r1
 8001fb2:	095a      	lsrs	r2, r3, #5
 8001fb4:	4613      	mov	r3, r2
 8001fb6:	011b      	lsls	r3, r3, #4
 8001fb8:	1a9b      	subs	r3, r3, r2
 8001fba:	009b      	lsls	r3, r3, #2
 8001fbc:	1aca      	subs	r2, r1, r3
 8001fbe:	b2d3      	uxtb	r3, r2
 8001fc0:	1ac3      	subs	r3, r0, r3
 8001fc2:	b2da      	uxtb	r2, r3
 8001fc4:	4b77      	ldr	r3, [pc, #476]	; (80021a4 <main+0x554>)
 8001fc6:	709a      	strb	r2, [r3, #2]
  LocalTime = LocalTime/60;
 8001fc8:	f8d7 374c 	ldr.w	r3, [r7, #1868]	; 0x74c
 8001fcc:	4a79      	ldr	r2, [pc, #484]	; (80021b4 <main+0x564>)
 8001fce:	fba2 2303 	umull	r2, r3, r2, r3
 8001fd2:	095b      	lsrs	r3, r3, #5
 8001fd4:	f8c7 374c 	str.w	r3, [r7, #1868]	; 0x74c
  sTime.Minutes -= LocalTime % 60;
 8001fd8:	4b72      	ldr	r3, [pc, #456]	; (80021a4 <main+0x554>)
 8001fda:	7858      	ldrb	r0, [r3, #1]
 8001fdc:	f8d7 174c 	ldr.w	r1, [r7, #1868]	; 0x74c
 8001fe0:	4b74      	ldr	r3, [pc, #464]	; (80021b4 <main+0x564>)
 8001fe2:	fba3 2301 	umull	r2, r3, r3, r1
 8001fe6:	095a      	lsrs	r2, r3, #5
 8001fe8:	4613      	mov	r3, r2
 8001fea:	011b      	lsls	r3, r3, #4
 8001fec:	1a9b      	subs	r3, r3, r2
 8001fee:	009b      	lsls	r3, r3, #2
 8001ff0:	1aca      	subs	r2, r1, r3
 8001ff2:	b2d3      	uxtb	r3, r2
 8001ff4:	1ac3      	subs	r3, r0, r3
 8001ff6:	b2da      	uxtb	r2, r3
 8001ff8:	4b6a      	ldr	r3, [pc, #424]	; (80021a4 <main+0x554>)
 8001ffa:	705a      	strb	r2, [r3, #1]
  LocalTime = LocalTime/60;
 8001ffc:	f8d7 374c 	ldr.w	r3, [r7, #1868]	; 0x74c
 8002000:	4a6c      	ldr	r2, [pc, #432]	; (80021b4 <main+0x564>)
 8002002:	fba2 2303 	umull	r2, r3, r2, r3
 8002006:	095b      	lsrs	r3, r3, #5
 8002008:	f8c7 374c 	str.w	r3, [r7, #1868]	; 0x74c
  sTime.Hours -= LocalTime % 60;
 800200c:	4b65      	ldr	r3, [pc, #404]	; (80021a4 <main+0x554>)
 800200e:	7818      	ldrb	r0, [r3, #0]
 8002010:	f8d7 174c 	ldr.w	r1, [r7, #1868]	; 0x74c
 8002014:	4b67      	ldr	r3, [pc, #412]	; (80021b4 <main+0x564>)
 8002016:	fba3 2301 	umull	r2, r3, r3, r1
 800201a:	095a      	lsrs	r2, r3, #5
 800201c:	4613      	mov	r3, r2
 800201e:	011b      	lsls	r3, r3, #4
 8002020:	1a9b      	subs	r3, r3, r2
 8002022:	009b      	lsls	r3, r3, #2
 8002024:	1aca      	subs	r2, r1, r3
 8002026:	b2d3      	uxtb	r3, r2
 8002028:	1ac3      	subs	r3, r0, r3
 800202a:	b2da      	uxtb	r2, r3
 800202c:	4b5d      	ldr	r3, [pc, #372]	; (80021a4 <main+0x554>)
 800202e:	701a      	strb	r2, [r3, #0]
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  char CanWrite[400];
  int CW = 0;
 8002030:	2300      	movs	r3, #0
 8002032:	f8c7 3764 	str.w	r3, [r7, #1892]	; 0x764
  char CanFDWrite[400];
  int CFDW = 0;
 8002036:	2300      	movs	r3, #0
 8002038:	f8c7 3760 	str.w	r3, [r7, #1888]	; 0x760

  while (end_flag){
 800203c:	e1db      	b.n	80023f6 <main+0x7a6>

	  if(GPS_flag){
 800203e:	4b5e      	ldr	r3, [pc, #376]	; (80021b8 <main+0x568>)
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	2b00      	cmp	r3, #0
 8002044:	d006      	beq.n	8002054 <main+0x404>
		  WriteToBuff(rxBuf, sizeof(rxBuf));
 8002046:	2146      	movs	r1, #70	; 0x46
 8002048:	485c      	ldr	r0, [pc, #368]	; (80021bc <main+0x56c>)
 800204a:	f7ff fd59 	bl	8001b00 <WriteToBuff>
		  GPS_flag=0;
 800204e:	4b5a      	ldr	r3, [pc, #360]	; (80021b8 <main+0x568>)
 8002050:	2200      	movs	r2, #0
 8002052:	601a      	str	r2, [r3, #0]
	  HAL_RTC_GetDate(&hrtc, &sDate, RTC_FORMAT_BIN);


	  printf("Date:%u Month:%u Year:%u\n", sDate.Date, sDate.Month, sDate.Year);
	  printf("Hours:%u Minutes:%u Seconds:%u\n", sTime.Hours, sTime.Minutes, sTime.Seconds);*/
	  if(FDCAN_Flag){
 8002054:	4b5a      	ldr	r3, [pc, #360]	; (80021c0 <main+0x570>)
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	2b00      	cmp	r3, #0
 800205a:	f000 80f1 	beq.w	8002240 <main+0x5f0>

		  RTC_TimeTypeDef lTime = sTime;
 800205e:	f507 6380 	add.w	r3, r7, #1024	; 0x400
 8002062:	4a50      	ldr	r2, [pc, #320]	; (80021a4 <main+0x554>)
 8002064:	461c      	mov	r4, r3
 8002066:	4615      	mov	r5, r2
 8002068:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800206a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800206c:	682b      	ldr	r3, [r5, #0]
 800206e:	6023      	str	r3, [r4, #0]
		  LocalTime = CanFDFrame.time;
 8002070:	4b54      	ldr	r3, [pc, #336]	; (80021c4 <main+0x574>)
 8002072:	68db      	ldr	r3, [r3, #12]
 8002074:	f8c7 374c 	str.w	r3, [r7, #1868]	; 0x74c
		  lTime.SubSeconds += LocalTime % 1000;
 8002078:	f507 6380 	add.w	r3, r7, #1024	; 0x400
 800207c:	6859      	ldr	r1, [r3, #4]
 800207e:	f8d7 274c 	ldr.w	r2, [r7, #1868]	; 0x74c
 8002082:	4b4b      	ldr	r3, [pc, #300]	; (80021b0 <main+0x560>)
 8002084:	fba3 0302 	umull	r0, r3, r3, r2
 8002088:	099b      	lsrs	r3, r3, #6
 800208a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800208e:	fb00 f303 	mul.w	r3, r0, r3
 8002092:	1ad3      	subs	r3, r2, r3
 8002094:	18ca      	adds	r2, r1, r3
 8002096:	f507 6380 	add.w	r3, r7, #1024	; 0x400
 800209a:	605a      	str	r2, [r3, #4]
		  LocalTime = LocalTime/1000;
 800209c:	f8d7 374c 	ldr.w	r3, [r7, #1868]	; 0x74c
 80020a0:	4a43      	ldr	r2, [pc, #268]	; (80021b0 <main+0x560>)
 80020a2:	fba2 2303 	umull	r2, r3, r2, r3
 80020a6:	099b      	lsrs	r3, r3, #6
 80020a8:	f8c7 374c 	str.w	r3, [r7, #1868]	; 0x74c
		  lTime.Seconds += LocalTime % 60;
 80020ac:	f507 6380 	add.w	r3, r7, #1024	; 0x400
 80020b0:	7898      	ldrb	r0, [r3, #2]
 80020b2:	f8d7 174c 	ldr.w	r1, [r7, #1868]	; 0x74c
 80020b6:	4b3f      	ldr	r3, [pc, #252]	; (80021b4 <main+0x564>)
 80020b8:	fba3 2301 	umull	r2, r3, r3, r1
 80020bc:	095a      	lsrs	r2, r3, #5
 80020be:	4613      	mov	r3, r2
 80020c0:	011b      	lsls	r3, r3, #4
 80020c2:	1a9b      	subs	r3, r3, r2
 80020c4:	009b      	lsls	r3, r3, #2
 80020c6:	1aca      	subs	r2, r1, r3
 80020c8:	b2d3      	uxtb	r3, r2
 80020ca:	4403      	add	r3, r0
 80020cc:	b2da      	uxtb	r2, r3
 80020ce:	f507 6380 	add.w	r3, r7, #1024	; 0x400
 80020d2:	709a      	strb	r2, [r3, #2]
		  LocalTime = LocalTime/60;
 80020d4:	f8d7 374c 	ldr.w	r3, [r7, #1868]	; 0x74c
 80020d8:	4a36      	ldr	r2, [pc, #216]	; (80021b4 <main+0x564>)
 80020da:	fba2 2303 	umull	r2, r3, r2, r3
 80020de:	095b      	lsrs	r3, r3, #5
 80020e0:	f8c7 374c 	str.w	r3, [r7, #1868]	; 0x74c
		  lTime.Minutes += LocalTime % 60;
 80020e4:	f507 6380 	add.w	r3, r7, #1024	; 0x400
 80020e8:	7858      	ldrb	r0, [r3, #1]
 80020ea:	f8d7 174c 	ldr.w	r1, [r7, #1868]	; 0x74c
 80020ee:	4b31      	ldr	r3, [pc, #196]	; (80021b4 <main+0x564>)
 80020f0:	fba3 2301 	umull	r2, r3, r3, r1
 80020f4:	095a      	lsrs	r2, r3, #5
 80020f6:	4613      	mov	r3, r2
 80020f8:	011b      	lsls	r3, r3, #4
 80020fa:	1a9b      	subs	r3, r3, r2
 80020fc:	009b      	lsls	r3, r3, #2
 80020fe:	1aca      	subs	r2, r1, r3
 8002100:	b2d3      	uxtb	r3, r2
 8002102:	4403      	add	r3, r0
 8002104:	b2da      	uxtb	r2, r3
 8002106:	f507 6380 	add.w	r3, r7, #1024	; 0x400
 800210a:	705a      	strb	r2, [r3, #1]
		  LocalTime = LocalTime/60;
 800210c:	f8d7 374c 	ldr.w	r3, [r7, #1868]	; 0x74c
 8002110:	4a28      	ldr	r2, [pc, #160]	; (80021b4 <main+0x564>)
 8002112:	fba2 2303 	umull	r2, r3, r2, r3
 8002116:	095b      	lsrs	r3, r3, #5
 8002118:	f8c7 374c 	str.w	r3, [r7, #1868]	; 0x74c
		  lTime.Hours += LocalTime % 60;
 800211c:	f507 6380 	add.w	r3, r7, #1024	; 0x400
 8002120:	7818      	ldrb	r0, [r3, #0]
 8002122:	f8d7 174c 	ldr.w	r1, [r7, #1868]	; 0x74c
 8002126:	4b23      	ldr	r3, [pc, #140]	; (80021b4 <main+0x564>)
 8002128:	fba3 2301 	umull	r2, r3, r3, r1
 800212c:	095a      	lsrs	r2, r3, #5
 800212e:	4613      	mov	r3, r2
 8002130:	011b      	lsls	r3, r3, #4
 8002132:	1a9b      	subs	r3, r3, r2
 8002134:	009b      	lsls	r3, r3, #2
 8002136:	1aca      	subs	r2, r1, r3
 8002138:	b2d3      	uxtb	r3, r2
 800213a:	4403      	add	r3, r0
 800213c:	b2da      	uxtb	r2, r3
 800213e:	f507 6380 	add.w	r3, r7, #1024	; 0x400
 8002142:	701a      	strb	r2, [r3, #0]

		  //date/time, CANID, Data
		  CFDW = sprintf(CanFDWrite, "%u.%u.%u %u:%u:%u.%u,0x%X,",
				  sDate.Date,sDate.Month,sDate.Year, sTime.Hours,sTime.Minutes,sTime.Seconds,sTime.SubSeconds,
 8002144:	4b19      	ldr	r3, [pc, #100]	; (80021ac <main+0x55c>)
 8002146:	789b      	ldrb	r3, [r3, #2]
		  CFDW = sprintf(CanFDWrite, "%u.%u.%u %u:%u:%u.%u,0x%X,",
 8002148:	469c      	mov	ip, r3
				  sDate.Date,sDate.Month,sDate.Year, sTime.Hours,sTime.Minutes,sTime.Seconds,sTime.SubSeconds,
 800214a:	4b18      	ldr	r3, [pc, #96]	; (80021ac <main+0x55c>)
 800214c:	785b      	ldrb	r3, [r3, #1]
		  CFDW = sprintf(CanFDWrite, "%u.%u.%u %u:%u:%u.%u,0x%X,",
 800214e:	469e      	mov	lr, r3
				  sDate.Date,sDate.Month,sDate.Year, sTime.Hours,sTime.Minutes,sTime.Seconds,sTime.SubSeconds,
 8002150:	4b16      	ldr	r3, [pc, #88]	; (80021ac <main+0x55c>)
 8002152:	78db      	ldrb	r3, [r3, #3]
		  CFDW = sprintf(CanFDWrite, "%u.%u.%u %u:%u:%u.%u,0x%X,",
 8002154:	4619      	mov	r1, r3
				  sDate.Date,sDate.Month,sDate.Year, sTime.Hours,sTime.Minutes,sTime.Seconds,sTime.SubSeconds,
 8002156:	4b13      	ldr	r3, [pc, #76]	; (80021a4 <main+0x554>)
 8002158:	781b      	ldrb	r3, [r3, #0]
		  CFDW = sprintf(CanFDWrite, "%u.%u.%u %u:%u:%u.%u,0x%X,",
 800215a:	461c      	mov	r4, r3
				  sDate.Date,sDate.Month,sDate.Year, sTime.Hours,sTime.Minutes,sTime.Seconds,sTime.SubSeconds,
 800215c:	4b11      	ldr	r3, [pc, #68]	; (80021a4 <main+0x554>)
 800215e:	785b      	ldrb	r3, [r3, #1]
		  CFDW = sprintf(CanFDWrite, "%u.%u.%u %u:%u:%u.%u,0x%X,",
 8002160:	461d      	mov	r5, r3
				  sDate.Date,sDate.Month,sDate.Year, sTime.Hours,sTime.Minutes,sTime.Seconds,sTime.SubSeconds,
 8002162:	4b10      	ldr	r3, [pc, #64]	; (80021a4 <main+0x554>)
 8002164:	789b      	ldrb	r3, [r3, #2]
		  CFDW = sprintf(CanFDWrite, "%u.%u.%u %u:%u:%u.%u,0x%X,",
 8002166:	461e      	mov	r6, r3
 8002168:	4b0e      	ldr	r3, [pc, #56]	; (80021a4 <main+0x554>)
 800216a:	685b      	ldr	r3, [r3, #4]
 800216c:	4a15      	ldr	r2, [pc, #84]	; (80021c4 <main+0x574>)
 800216e:	6812      	ldr	r2, [r2, #0]
 8002170:	f207 402c 	addw	r0, r7, #1068	; 0x42c
 8002174:	9205      	str	r2, [sp, #20]
 8002176:	9304      	str	r3, [sp, #16]
 8002178:	9603      	str	r6, [sp, #12]
 800217a:	9502      	str	r5, [sp, #8]
 800217c:	9401      	str	r4, [sp, #4]
 800217e:	9100      	str	r1, [sp, #0]
 8002180:	4673      	mov	r3, lr
 8002182:	4662      	mov	r2, ip
 8002184:	4910      	ldr	r1, [pc, #64]	; (80021c8 <main+0x578>)
 8002186:	f016 fb89 	bl	801889c <siprintf>
 800218a:	f8c7 0760 	str.w	r0, [r7, #1888]	; 0x760
				  CanFDFrame.id);
		  for(int i = 0; i < CanFDFrame.length; i++){
 800218e:	2300      	movs	r3, #0
 8002190:	f8c7 375c 	str.w	r3, [r7, #1884]	; 0x75c
 8002194:	e034      	b.n	8002200 <main+0x5b0>
 8002196:	bf00      	nop
 8002198:	24000dc0 	.word	0x24000dc0
 800219c:	240010cc 	.word	0x240010cc
 80021a0:	24000b90 	.word	0x24000b90
 80021a4:	24000b24 	.word	0x24000b24
 80021a8:	240014c8 	.word	0x240014c8
 80021ac:	24000b38 	.word	0x24000b38
 80021b0:	10624dd3 	.word	0x10624dd3
 80021b4:	88888889 	.word	0x88888889
 80021b8:	240001fc 	.word	0x240001fc
 80021bc:	240012fc 	.word	0x240012fc
 80021c0:	240001f4 	.word	0x240001f4
 80021c4:	24001038 	.word	0x24001038
 80021c8:	08019ee4 	.word	0x08019ee4
			  CFDW += sprintf(CanFDWrite + CFDW, "%c", CanFDFrame.data.bytes[i]);
 80021cc:	f8d7 3760 	ldr.w	r3, [r7, #1888]	; 0x760
 80021d0:	f207 422c 	addw	r2, r7, #1068	; 0x42c
 80021d4:	18d0      	adds	r0, r2, r3
 80021d6:	4a8f      	ldr	r2, [pc, #572]	; (8002414 <main+0x7c4>)
 80021d8:	f8d7 375c 	ldr.w	r3, [r7, #1884]	; 0x75c
 80021dc:	4413      	add	r3, r2
 80021de:	3310      	adds	r3, #16
 80021e0:	781b      	ldrb	r3, [r3, #0]
 80021e2:	461a      	mov	r2, r3
 80021e4:	498c      	ldr	r1, [pc, #560]	; (8002418 <main+0x7c8>)
 80021e6:	f016 fb59 	bl	801889c <siprintf>
 80021ea:	4602      	mov	r2, r0
 80021ec:	f8d7 3760 	ldr.w	r3, [r7, #1888]	; 0x760
 80021f0:	4413      	add	r3, r2
 80021f2:	f8c7 3760 	str.w	r3, [r7, #1888]	; 0x760
		  for(int i = 0; i < CanFDFrame.length; i++){
 80021f6:	f8d7 375c 	ldr.w	r3, [r7, #1884]	; 0x75c
 80021fa:	3301      	adds	r3, #1
 80021fc:	f8c7 375c 	str.w	r3, [r7, #1884]	; 0x75c
 8002200:	4b84      	ldr	r3, [pc, #528]	; (8002414 <main+0x7c4>)
 8002202:	689a      	ldr	r2, [r3, #8]
 8002204:	f8d7 375c 	ldr.w	r3, [r7, #1884]	; 0x75c
 8002208:	429a      	cmp	r2, r3
 800220a:	d8df      	bhi.n	80021cc <main+0x57c>
		  }
		  CFDW += sprintf(CanFDWrite + CFDW, "\n\r");
 800220c:	f8d7 3760 	ldr.w	r3, [r7, #1888]	; 0x760
 8002210:	f207 422c 	addw	r2, r7, #1068	; 0x42c
 8002214:	4413      	add	r3, r2
 8002216:	4a81      	ldr	r2, [pc, #516]	; (800241c <main+0x7cc>)
 8002218:	8811      	ldrh	r1, [r2, #0]
 800221a:	7892      	ldrb	r2, [r2, #2]
 800221c:	8019      	strh	r1, [r3, #0]
 800221e:	709a      	strb	r2, [r3, #2]
 8002220:	2202      	movs	r2, #2
 8002222:	f8d7 3760 	ldr.w	r3, [r7, #1888]	; 0x760
 8002226:	4413      	add	r3, r2
 8002228:	f8c7 3760 	str.w	r3, [r7, #1888]	; 0x760
		  WriteToBuff(CanFDWrite, CFDW);
 800222c:	f207 432c 	addw	r3, r7, #1068	; 0x42c
 8002230:	f8d7 1760 	ldr.w	r1, [r7, #1888]	; 0x760
 8002234:	4618      	mov	r0, r3
 8002236:	f7ff fc63 	bl	8001b00 <WriteToBuff>
		  FDCAN_Flag = 0;
 800223a:	4b79      	ldr	r3, [pc, #484]	; (8002420 <main+0x7d0>)
 800223c:	2200      	movs	r2, #0
 800223e:	601a      	str	r2, [r3, #0]
	  }
	  if(CAN_Flag){
 8002240:	4b78      	ldr	r3, [pc, #480]	; (8002424 <main+0x7d4>)
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	2b00      	cmp	r3, #0
 8002246:	f000 80d6 	beq.w	80023f6 <main+0x7a6>

		  RTC_TimeTypeDef lTime = sTime;
 800224a:	f507 737b 	add.w	r3, r7, #1004	; 0x3ec
 800224e:	4a76      	ldr	r2, [pc, #472]	; (8002428 <main+0x7d8>)
 8002250:	461c      	mov	r4, r3
 8002252:	4615      	mov	r5, r2
 8002254:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002256:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002258:	682b      	ldr	r3, [r5, #0]
 800225a:	6023      	str	r3, [r4, #0]
		  LocalTime = CanFrame.time;
 800225c:	4b73      	ldr	r3, [pc, #460]	; (800242c <main+0x7dc>)
 800225e:	689b      	ldr	r3, [r3, #8]
 8002260:	f8c7 374c 	str.w	r3, [r7, #1868]	; 0x74c
		  lTime.SubSeconds += LocalTime % 1000;
 8002264:	f507 737b 	add.w	r3, r7, #1004	; 0x3ec
 8002268:	6859      	ldr	r1, [r3, #4]
 800226a:	f8d7 274c 	ldr.w	r2, [r7, #1868]	; 0x74c
 800226e:	4b70      	ldr	r3, [pc, #448]	; (8002430 <main+0x7e0>)
 8002270:	fba3 0302 	umull	r0, r3, r3, r2
 8002274:	099b      	lsrs	r3, r3, #6
 8002276:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800227a:	fb00 f303 	mul.w	r3, r0, r3
 800227e:	1ad3      	subs	r3, r2, r3
 8002280:	18ca      	adds	r2, r1, r3
 8002282:	f507 737b 	add.w	r3, r7, #1004	; 0x3ec
 8002286:	605a      	str	r2, [r3, #4]
		  LocalTime = LocalTime/1000;
 8002288:	f8d7 374c 	ldr.w	r3, [r7, #1868]	; 0x74c
 800228c:	4a68      	ldr	r2, [pc, #416]	; (8002430 <main+0x7e0>)
 800228e:	fba2 2303 	umull	r2, r3, r2, r3
 8002292:	099b      	lsrs	r3, r3, #6
 8002294:	f8c7 374c 	str.w	r3, [r7, #1868]	; 0x74c
		  lTime.Seconds += LocalTime % 60;
 8002298:	f507 737b 	add.w	r3, r7, #1004	; 0x3ec
 800229c:	7898      	ldrb	r0, [r3, #2]
 800229e:	f8d7 174c 	ldr.w	r1, [r7, #1868]	; 0x74c
 80022a2:	4b64      	ldr	r3, [pc, #400]	; (8002434 <main+0x7e4>)
 80022a4:	fba3 2301 	umull	r2, r3, r3, r1
 80022a8:	095a      	lsrs	r2, r3, #5
 80022aa:	4613      	mov	r3, r2
 80022ac:	011b      	lsls	r3, r3, #4
 80022ae:	1a9b      	subs	r3, r3, r2
 80022b0:	009b      	lsls	r3, r3, #2
 80022b2:	1aca      	subs	r2, r1, r3
 80022b4:	b2d3      	uxtb	r3, r2
 80022b6:	4403      	add	r3, r0
 80022b8:	b2da      	uxtb	r2, r3
 80022ba:	f507 737b 	add.w	r3, r7, #1004	; 0x3ec
 80022be:	709a      	strb	r2, [r3, #2]
		  LocalTime = LocalTime/60;
 80022c0:	f8d7 374c 	ldr.w	r3, [r7, #1868]	; 0x74c
 80022c4:	4a5b      	ldr	r2, [pc, #364]	; (8002434 <main+0x7e4>)
 80022c6:	fba2 2303 	umull	r2, r3, r2, r3
 80022ca:	095b      	lsrs	r3, r3, #5
 80022cc:	f8c7 374c 	str.w	r3, [r7, #1868]	; 0x74c
		  lTime.Minutes += LocalTime % 60;
 80022d0:	f507 737b 	add.w	r3, r7, #1004	; 0x3ec
 80022d4:	7858      	ldrb	r0, [r3, #1]
 80022d6:	f8d7 174c 	ldr.w	r1, [r7, #1868]	; 0x74c
 80022da:	4b56      	ldr	r3, [pc, #344]	; (8002434 <main+0x7e4>)
 80022dc:	fba3 2301 	umull	r2, r3, r3, r1
 80022e0:	095a      	lsrs	r2, r3, #5
 80022e2:	4613      	mov	r3, r2
 80022e4:	011b      	lsls	r3, r3, #4
 80022e6:	1a9b      	subs	r3, r3, r2
 80022e8:	009b      	lsls	r3, r3, #2
 80022ea:	1aca      	subs	r2, r1, r3
 80022ec:	b2d3      	uxtb	r3, r2
 80022ee:	4403      	add	r3, r0
 80022f0:	b2da      	uxtb	r2, r3
 80022f2:	f507 737b 	add.w	r3, r7, #1004	; 0x3ec
 80022f6:	705a      	strb	r2, [r3, #1]
		  LocalTime = LocalTime/60;
 80022f8:	f8d7 374c 	ldr.w	r3, [r7, #1868]	; 0x74c
 80022fc:	4a4d      	ldr	r2, [pc, #308]	; (8002434 <main+0x7e4>)
 80022fe:	fba2 2303 	umull	r2, r3, r2, r3
 8002302:	095b      	lsrs	r3, r3, #5
 8002304:	f8c7 374c 	str.w	r3, [r7, #1868]	; 0x74c
		  lTime.Hours += LocalTime % 60;
 8002308:	f507 737b 	add.w	r3, r7, #1004	; 0x3ec
 800230c:	7818      	ldrb	r0, [r3, #0]
 800230e:	f8d7 174c 	ldr.w	r1, [r7, #1868]	; 0x74c
 8002312:	4b48      	ldr	r3, [pc, #288]	; (8002434 <main+0x7e4>)
 8002314:	fba3 2301 	umull	r2, r3, r3, r1
 8002318:	095a      	lsrs	r2, r3, #5
 800231a:	4613      	mov	r3, r2
 800231c:	011b      	lsls	r3, r3, #4
 800231e:	1a9b      	subs	r3, r3, r2
 8002320:	009b      	lsls	r3, r3, #2
 8002322:	1aca      	subs	r2, r1, r3
 8002324:	b2d3      	uxtb	r3, r2
 8002326:	4403      	add	r3, r0
 8002328:	b2da      	uxtb	r2, r3
 800232a:	f507 737b 	add.w	r3, r7, #1004	; 0x3ec
 800232e:	701a      	strb	r2, [r3, #0]

		  //date/time, CANID, Data
		  CW = sprintf(CanWrite, "%u.%u.%u %u:%u:%u.%u,0x%X,",
				  sDate.Date,sDate.Month,sDate.Year, sTime.Hours,sTime.Minutes,sTime.Seconds,sTime.SubSeconds,
 8002330:	4b41      	ldr	r3, [pc, #260]	; (8002438 <main+0x7e8>)
 8002332:	789b      	ldrb	r3, [r3, #2]
		  CW = sprintf(CanWrite, "%u.%u.%u %u:%u:%u.%u,0x%X,",
 8002334:	469c      	mov	ip, r3
				  sDate.Date,sDate.Month,sDate.Year, sTime.Hours,sTime.Minutes,sTime.Seconds,sTime.SubSeconds,
 8002336:	4b40      	ldr	r3, [pc, #256]	; (8002438 <main+0x7e8>)
 8002338:	785b      	ldrb	r3, [r3, #1]
		  CW = sprintf(CanWrite, "%u.%u.%u %u:%u:%u.%u,0x%X,",
 800233a:	469e      	mov	lr, r3
				  sDate.Date,sDate.Month,sDate.Year, sTime.Hours,sTime.Minutes,sTime.Seconds,sTime.SubSeconds,
 800233c:	4b3e      	ldr	r3, [pc, #248]	; (8002438 <main+0x7e8>)
 800233e:	78db      	ldrb	r3, [r3, #3]
		  CW = sprintf(CanWrite, "%u.%u.%u %u:%u:%u.%u,0x%X,",
 8002340:	4619      	mov	r1, r3
				  sDate.Date,sDate.Month,sDate.Year, sTime.Hours,sTime.Minutes,sTime.Seconds,sTime.SubSeconds,
 8002342:	4b39      	ldr	r3, [pc, #228]	; (8002428 <main+0x7d8>)
 8002344:	781b      	ldrb	r3, [r3, #0]
		  CW = sprintf(CanWrite, "%u.%u.%u %u:%u:%u.%u,0x%X,",
 8002346:	461c      	mov	r4, r3
				  sDate.Date,sDate.Month,sDate.Year, sTime.Hours,sTime.Minutes,sTime.Seconds,sTime.SubSeconds,
 8002348:	4b37      	ldr	r3, [pc, #220]	; (8002428 <main+0x7d8>)
 800234a:	785b      	ldrb	r3, [r3, #1]
		  CW = sprintf(CanWrite, "%u.%u.%u %u:%u:%u.%u,0x%X,",
 800234c:	461d      	mov	r5, r3
				  sDate.Date,sDate.Month,sDate.Year, sTime.Hours,sTime.Minutes,sTime.Seconds,sTime.SubSeconds,
 800234e:	4b36      	ldr	r3, [pc, #216]	; (8002428 <main+0x7d8>)
 8002350:	789b      	ldrb	r3, [r3, #2]
		  CW = sprintf(CanWrite, "%u.%u.%u %u:%u:%u.%u,0x%X,",
 8002352:	461e      	mov	r6, r3
 8002354:	4b34      	ldr	r3, [pc, #208]	; (8002428 <main+0x7d8>)
 8002356:	685b      	ldr	r3, [r3, #4]
 8002358:	4a34      	ldr	r2, [pc, #208]	; (800242c <main+0x7dc>)
 800235a:	6812      	ldr	r2, [r2, #0]
 800235c:	f207 50bc 	addw	r0, r7, #1468	; 0x5bc
 8002360:	9205      	str	r2, [sp, #20]
 8002362:	9304      	str	r3, [sp, #16]
 8002364:	9603      	str	r6, [sp, #12]
 8002366:	9502      	str	r5, [sp, #8]
 8002368:	9401      	str	r4, [sp, #4]
 800236a:	9100      	str	r1, [sp, #0]
 800236c:	4673      	mov	r3, lr
 800236e:	4662      	mov	r2, ip
 8002370:	4932      	ldr	r1, [pc, #200]	; (800243c <main+0x7ec>)
 8002372:	f016 fa93 	bl	801889c <siprintf>
 8002376:	f8c7 0764 	str.w	r0, [r7, #1892]	; 0x764
				  CanFrame.id);
		  for(int i = 0; i < CanFDFrame.length; i++){
 800237a:	2300      	movs	r3, #0
 800237c:	f8c7 3758 	str.w	r3, [r7, #1880]	; 0x758
 8002380:	e019      	b.n	80023b6 <main+0x766>
			  CW += sprintf(CanWrite + CW, "%c", CanFrame.data.bytes[i]);
 8002382:	f8d7 3764 	ldr.w	r3, [r7, #1892]	; 0x764
 8002386:	f207 52bc 	addw	r2, r7, #1468	; 0x5bc
 800238a:	18d0      	adds	r0, r2, r3
 800238c:	4a27      	ldr	r2, [pc, #156]	; (800242c <main+0x7dc>)
 800238e:	f8d7 3758 	ldr.w	r3, [r7, #1880]	; 0x758
 8002392:	4413      	add	r3, r2
 8002394:	3310      	adds	r3, #16
 8002396:	781b      	ldrb	r3, [r3, #0]
 8002398:	461a      	mov	r2, r3
 800239a:	491f      	ldr	r1, [pc, #124]	; (8002418 <main+0x7c8>)
 800239c:	f016 fa7e 	bl	801889c <siprintf>
 80023a0:	4602      	mov	r2, r0
 80023a2:	f8d7 3764 	ldr.w	r3, [r7, #1892]	; 0x764
 80023a6:	4413      	add	r3, r2
 80023a8:	f8c7 3764 	str.w	r3, [r7, #1892]	; 0x764
		  for(int i = 0; i < CanFDFrame.length; i++){
 80023ac:	f8d7 3758 	ldr.w	r3, [r7, #1880]	; 0x758
 80023b0:	3301      	adds	r3, #1
 80023b2:	f8c7 3758 	str.w	r3, [r7, #1880]	; 0x758
 80023b6:	4b17      	ldr	r3, [pc, #92]	; (8002414 <main+0x7c4>)
 80023b8:	689a      	ldr	r2, [r3, #8]
 80023ba:	f8d7 3758 	ldr.w	r3, [r7, #1880]	; 0x758
 80023be:	429a      	cmp	r2, r3
 80023c0:	d8df      	bhi.n	8002382 <main+0x732>
		  }
		  CW += sprintf(CanWrite + CW, "\n\r");
 80023c2:	f8d7 3764 	ldr.w	r3, [r7, #1892]	; 0x764
 80023c6:	f207 52bc 	addw	r2, r7, #1468	; 0x5bc
 80023ca:	4413      	add	r3, r2
 80023cc:	4a13      	ldr	r2, [pc, #76]	; (800241c <main+0x7cc>)
 80023ce:	8811      	ldrh	r1, [r2, #0]
 80023d0:	7892      	ldrb	r2, [r2, #2]
 80023d2:	8019      	strh	r1, [r3, #0]
 80023d4:	709a      	strb	r2, [r3, #2]
 80023d6:	2202      	movs	r2, #2
 80023d8:	f8d7 3764 	ldr.w	r3, [r7, #1892]	; 0x764
 80023dc:	4413      	add	r3, r2
 80023de:	f8c7 3764 	str.w	r3, [r7, #1892]	; 0x764
		  WriteToBuff(CanWrite, CW);
 80023e2:	f207 53bc 	addw	r3, r7, #1468	; 0x5bc
 80023e6:	f8d7 1764 	ldr.w	r1, [r7, #1892]	; 0x764
 80023ea:	4618      	mov	r0, r3
 80023ec:	f7ff fb88 	bl	8001b00 <WriteToBuff>
		  CAN_Flag = 0;
 80023f0:	4b0c      	ldr	r3, [pc, #48]	; (8002424 <main+0x7d4>)
 80023f2:	2200      	movs	r2, #0
 80023f4:	601a      	str	r2, [r3, #0]
  while (end_flag){
 80023f6:	4b12      	ldr	r3, [pc, #72]	; (8002440 <main+0x7f0>)
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	2b00      	cmp	r3, #0
 80023fc:	f47f ae1f 	bne.w	800203e <main+0x3ee>
    /* USER CODE BEGIN 3 */
}

    //f_write(&myFILE, close_msg, strlen(close_msg), &testByte);
    //f_close(&myFILE);
    HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_0);
 8002400:	2101      	movs	r1, #1
 8002402:	4810      	ldr	r0, [pc, #64]	; (8002444 <main+0x7f4>)
 8002404:	f004 feb7 	bl	8007176 <HAL_GPIO_TogglePin>
 8002408:	2300      	movs	r3, #0
    //printf("File closed\n");

  /* USER CODE END 3 */
}
 800240a:	4618      	mov	r0, r3
 800240c:	f207 776c 	addw	r7, r7, #1900	; 0x76c
 8002410:	46bd      	mov	sp, r7
 8002412:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002414:	24001038 	.word	0x24001038
 8002418:	08019f00 	.word	0x08019f00
 800241c:	08019f04 	.word	0x08019f04
 8002420:	240001f4 	.word	0x240001f4
 8002424:	240001f8 	.word	0x240001f8
 8002428:	24000b24 	.word	0x24000b24
 800242c:	240010b0 	.word	0x240010b0
 8002430:	10624dd3 	.word	0x10624dd3
 8002434:	88888889 	.word	0x88888889
 8002438:	24000b38 	.word	0x24000b38
 800243c:	08019ee4 	.word	0x08019ee4
 8002440:	24000008 	.word	0x24000008
 8002444:	58020400 	.word	0x58020400

08002448 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002448:	b580      	push	{r7, lr}
 800244a:	b0cc      	sub	sp, #304	; 0x130
 800244c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800244e:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8002452:	224c      	movs	r2, #76	; 0x4c
 8002454:	2100      	movs	r1, #0
 8002456:	4618      	mov	r0, r3
 8002458:	f016 f8af 	bl	80185ba <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800245c:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8002460:	2220      	movs	r2, #32
 8002462:	2100      	movs	r1, #0
 8002464:	4618      	mov	r0, r3
 8002466:	f016 f8a8 	bl	80185ba <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800246a:	f107 0308 	add.w	r3, r7, #8
 800246e:	4618      	mov	r0, r3
 8002470:	23bc      	movs	r3, #188	; 0xbc
 8002472:	461a      	mov	r2, r3
 8002474:	2100      	movs	r1, #0
 8002476:	f016 f8a0 	bl	80185ba <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 800247a:	2002      	movs	r0, #2
 800247c:	f006 f976 	bl	800876c <HAL_PWREx_ConfigSupply>
  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002480:	1d3b      	adds	r3, r7, #4
 8002482:	2200      	movs	r2, #0
 8002484:	601a      	str	r2, [r3, #0]
 8002486:	4b71      	ldr	r3, [pc, #452]	; (800264c <SystemClock_Config+0x204>)
 8002488:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800248a:	4a70      	ldr	r2, [pc, #448]	; (800264c <SystemClock_Config+0x204>)
 800248c:	f023 0301 	bic.w	r3, r3, #1
 8002490:	62d3      	str	r3, [r2, #44]	; 0x2c
 8002492:	4b6e      	ldr	r3, [pc, #440]	; (800264c <SystemClock_Config+0x204>)
 8002494:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002496:	f003 0201 	and.w	r2, r3, #1
 800249a:	1d3b      	adds	r3, r7, #4
 800249c:	601a      	str	r2, [r3, #0]
 800249e:	4b6c      	ldr	r3, [pc, #432]	; (8002650 <SystemClock_Config+0x208>)
 80024a0:	699b      	ldr	r3, [r3, #24]
 80024a2:	4a6b      	ldr	r2, [pc, #428]	; (8002650 <SystemClock_Config+0x208>)
 80024a4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80024a8:	6193      	str	r3, [r2, #24]
 80024aa:	4b69      	ldr	r3, [pc, #420]	; (8002650 <SystemClock_Config+0x208>)
 80024ac:	699b      	ldr	r3, [r3, #24]
 80024ae:	f403 4240 	and.w	r2, r3, #49152	; 0xc000
 80024b2:	1d3b      	adds	r3, r7, #4
 80024b4:	601a      	str	r2, [r3, #0]
 80024b6:	1d3b      	adds	r3, r7, #4
 80024b8:	681b      	ldr	r3, [r3, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 80024ba:	bf00      	nop
 80024bc:	4b64      	ldr	r3, [pc, #400]	; (8002650 <SystemClock_Config+0x208>)
 80024be:	699b      	ldr	r3, [r3, #24]
 80024c0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80024c4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80024c8:	d1f8      	bne.n	80024bc <SystemClock_Config+0x74>
  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 80024ca:	f006 f8b5 	bl	8008638 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_HIGH);
 80024ce:	f001 f941 	bl	8003754 <HAL_GetREVID>
 80024d2:	4b60      	ldr	r3, [pc, #384]	; (8002654 <SystemClock_Config+0x20c>)
 80024d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80024d6:	4a5f      	ldr	r2, [pc, #380]	; (8002654 <SystemClock_Config+0x20c>)
 80024d8:	f043 0318 	orr.w	r3, r3, #24
 80024dc:	6713      	str	r3, [r2, #112]	; 0x70
  /** Macro to configure the PLL clock source
  */
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSE);
 80024de:	4b5d      	ldr	r3, [pc, #372]	; (8002654 <SystemClock_Config+0x20c>)
 80024e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80024e2:	f023 0303 	bic.w	r3, r3, #3
 80024e6:	4a5b      	ldr	r2, [pc, #364]	; (8002654 <SystemClock_Config+0x20c>)
 80024e8:	f043 0302 	orr.w	r3, r3, #2
 80024ec:	6293      	str	r3, [r2, #40]	; 0x28
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSE
 80024ee:	2325      	movs	r3, #37	; 0x25
 80024f0:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
                              |RCC_OSCILLATORTYPE_LSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80024f4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80024f8:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 80024fc:	2301      	movs	r3, #1
 80024fe:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8002502:	2301      	movs	r3, #1
 8002504:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002508:	2302      	movs	r3, #2
 800250a:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800250e:	2302      	movs	r3, #2
 8002510:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  RCC_OscInitStruct.PLL.PLLM = 2;
 8002514:	2302      	movs	r3, #2
 8002516:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
  RCC_OscInitStruct.PLL.PLLN = 64;
 800251a:	2340      	movs	r3, #64	; 0x40
 800251c:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
  RCC_OscInitStruct.PLL.PLLP = 2;
 8002520:	2302      	movs	r3, #2
 8002522:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  RCC_OscInitStruct.PLL.PLLQ = 10;
 8002526:	230a      	movs	r3, #10
 8002528:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  RCC_OscInitStruct.PLL.PLLR = 2;
 800252c:	2302      	movs	r3, #2
 800252e:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8002532:	230c      	movs	r3, #12
 8002534:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8002538:	2300      	movs	r3, #0
 800253a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 800253e:	2300      	movs	r3, #0
 8002540:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002544:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8002548:	4618      	mov	r0, r3
 800254a:	f006 f99d 	bl	8008888 <HAL_RCC_OscConfig>
 800254e:	4603      	mov	r3, r0
 8002550:	2b00      	cmp	r3, #0
 8002552:	d001      	beq.n	8002558 <SystemClock_Config+0x110>
  {
    Error_Handler();
 8002554:	f000 fbe8 	bl	8002d28 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002558:	233f      	movs	r3, #63	; 0x3f
 800255a:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800255e:	2303      	movs	r3, #3
 8002560:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8002564:	2300      	movs	r3, #0
 8002566:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 800256a:	2308      	movs	r3, #8
 800256c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8002570:	2340      	movs	r3, #64	; 0x40
 8002572:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8002576:	2340      	movs	r3, #64	; 0x40
 8002578:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 800257c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002580:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8002584:	2340      	movs	r3, #64	; 0x40
 8002586:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800258a:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 800258e:	2102      	movs	r1, #2
 8002590:	4618      	mov	r0, r3
 8002592:	f006 fd89 	bl	80090a8 <HAL_RCC_ClockConfig>
 8002596:	4603      	mov	r3, r0
 8002598:	2b00      	cmp	r3, #0
 800259a:	d001      	beq.n	80025a0 <SystemClock_Config+0x158>
  {
    Error_Handler();
 800259c:	f000 fbc4 	bl	8002d28 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC|RCC_PERIPHCLK_USART3
 80025a0:	f107 0308 	add.w	r3, r7, #8
 80025a4:	4a2c      	ldr	r2, [pc, #176]	; (8002658 <SystemClock_Config+0x210>)
 80025a6:	601a      	str	r2, [r3, #0]
                              |RCC_PERIPHCLK_FDCAN|RCC_PERIPHCLK_UART8
                              |RCC_PERIPHCLK_SPI1|RCC_PERIPHCLK_SDMMC
                              |RCC_PERIPHCLK_USB;
  PeriphClkInitStruct.PLL2.PLL2M = 2;
 80025a8:	f107 0308 	add.w	r3, r7, #8
 80025ac:	2202      	movs	r2, #2
 80025ae:	605a      	str	r2, [r3, #4]
  PeriphClkInitStruct.PLL2.PLL2N = 12;
 80025b0:	f107 0308 	add.w	r3, r7, #8
 80025b4:	220c      	movs	r2, #12
 80025b6:	609a      	str	r2, [r3, #8]
  PeriphClkInitStruct.PLL2.PLL2P = 3;
 80025b8:	f107 0308 	add.w	r3, r7, #8
 80025bc:	2203      	movs	r2, #3
 80025be:	60da      	str	r2, [r3, #12]
  PeriphClkInitStruct.PLL2.PLL2Q = 2;
 80025c0:	f107 0308 	add.w	r3, r7, #8
 80025c4:	2202      	movs	r2, #2
 80025c6:	611a      	str	r2, [r3, #16]
  PeriphClkInitStruct.PLL2.PLL2R = 3;
 80025c8:	f107 0308 	add.w	r3, r7, #8
 80025cc:	2203      	movs	r2, #3
 80025ce:	615a      	str	r2, [r3, #20]
  PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_3;
 80025d0:	f107 0308 	add.w	r3, r7, #8
 80025d4:	22c0      	movs	r2, #192	; 0xc0
 80025d6:	619a      	str	r2, [r3, #24]
  PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOMEDIUM;
 80025d8:	f107 0308 	add.w	r3, r7, #8
 80025dc:	2220      	movs	r2, #32
 80025de:	61da      	str	r2, [r3, #28]
  PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 80025e0:	f107 0308 	add.w	r3, r7, #8
 80025e4:	2200      	movs	r2, #0
 80025e6:	621a      	str	r2, [r3, #32]
  PeriphClkInitStruct.SdmmcClockSelection = RCC_SDMMCCLKSOURCE_PLL2;
 80025e8:	f107 0308 	add.w	r3, r7, #8
 80025ec:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80025f0:	64da      	str	r2, [r3, #76]	; 0x4c
  PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL2;
 80025f2:	f107 0308 	add.w	r3, r7, #8
 80025f6:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80025fa:	65da      	str	r2, [r3, #92]	; 0x5c
  PeriphClkInitStruct.FdcanClockSelection = RCC_FDCANCLKSOURCE_PLL;
 80025fc:	f107 0308 	add.w	r3, r7, #8
 8002600:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002604:	66da      	str	r2, [r3, #108]	; 0x6c
  PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8002606:	f107 0308 	add.w	r3, r7, #8
 800260a:	2200      	movs	r2, #0
 800260c:	675a      	str	r2, [r3, #116]	; 0x74
  PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 800260e:	f107 0308 	add.w	r3, r7, #8
 8002612:	f44f 1240 	mov.w	r2, #3145728	; 0x300000
 8002616:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 800261a:	f107 0308 	add.w	r3, r7, #8
 800261e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002622:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002626:	f107 0308 	add.w	r3, r7, #8
 800262a:	4618      	mov	r0, r3
 800262c:	f007 f8ec 	bl	8009808 <HAL_RCCEx_PeriphCLKConfig>
 8002630:	4603      	mov	r3, r0
 8002632:	2b00      	cmp	r3, #0
 8002634:	d001      	beq.n	800263a <SystemClock_Config+0x1f2>
  {
    Error_Handler();
 8002636:	f000 fb77 	bl	8002d28 <Error_Handler>
  }
  /** Enables the Clock Security System
  */
  HAL_RCC_EnableCSS();
 800263a:	f006 feeb 	bl	8009414 <HAL_RCC_EnableCSS>
  /** Enable USB Voltage detector
  */
  HAL_PWREx_EnableUSBVoltageDetector();
 800263e:	f006 f8cf 	bl	80087e0 <HAL_PWREx_EnableUSBVoltageDetector>
}
 8002642:	bf00      	nop
 8002644:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8002648:	46bd      	mov	sp, r7
 800264a:	bd80      	pop	{r7, pc}
 800264c:	58000400 	.word	0x58000400
 8002650:	58024800 	.word	0x58024800
 8002654:	58024400 	.word	0x58024400
 8002658:	00459002 	.word	0x00459002

0800265c <MX_FDCAN1_Init>:
  * @brief FDCAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_FDCAN1_Init(void)
{
 800265c:	b580      	push	{r7, lr}
 800265e:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN1_Init 0 */

  /* USER CODE BEGIN FDCAN1_Init 1 */

  /* USER CODE END FDCAN1_Init 1 */
  hfdcan1.Instance = FDCAN1;
 8002660:	4b2f      	ldr	r3, [pc, #188]	; (8002720 <MX_FDCAN1_Init+0xc4>)
 8002662:	4a30      	ldr	r2, [pc, #192]	; (8002724 <MX_FDCAN1_Init+0xc8>)
 8002664:	601a      	str	r2, [r3, #0]
  hfdcan1.Init.FrameFormat = FDCAN_FRAME_FD_BRS;
 8002666:	4b2e      	ldr	r3, [pc, #184]	; (8002720 <MX_FDCAN1_Init+0xc4>)
 8002668:	f44f 7240 	mov.w	r2, #768	; 0x300
 800266c:	609a      	str	r2, [r3, #8]
  hfdcan1.Init.Mode = FDCAN_MODE_NORMAL;
 800266e:	4b2c      	ldr	r3, [pc, #176]	; (8002720 <MX_FDCAN1_Init+0xc4>)
 8002670:	2200      	movs	r2, #0
 8002672:	60da      	str	r2, [r3, #12]
  hfdcan1.Init.AutoRetransmission = DISABLE;
 8002674:	4b2a      	ldr	r3, [pc, #168]	; (8002720 <MX_FDCAN1_Init+0xc4>)
 8002676:	2200      	movs	r2, #0
 8002678:	741a      	strb	r2, [r3, #16]
  hfdcan1.Init.TransmitPause = DISABLE;
 800267a:	4b29      	ldr	r3, [pc, #164]	; (8002720 <MX_FDCAN1_Init+0xc4>)
 800267c:	2200      	movs	r2, #0
 800267e:	745a      	strb	r2, [r3, #17]
  hfdcan1.Init.ProtocolException = DISABLE;
 8002680:	4b27      	ldr	r3, [pc, #156]	; (8002720 <MX_FDCAN1_Init+0xc4>)
 8002682:	2200      	movs	r2, #0
 8002684:	749a      	strb	r2, [r3, #18]
  hfdcan1.Init.NominalPrescaler = 1;
 8002686:	4b26      	ldr	r3, [pc, #152]	; (8002720 <MX_FDCAN1_Init+0xc4>)
 8002688:	2201      	movs	r2, #1
 800268a:	615a      	str	r2, [r3, #20]
  hfdcan1.Init.NominalSyncJumpWidth = 23;
 800268c:	4b24      	ldr	r3, [pc, #144]	; (8002720 <MX_FDCAN1_Init+0xc4>)
 800268e:	2217      	movs	r2, #23
 8002690:	619a      	str	r2, [r3, #24]
  hfdcan1.Init.NominalTimeSeg1 = 56;
 8002692:	4b23      	ldr	r3, [pc, #140]	; (8002720 <MX_FDCAN1_Init+0xc4>)
 8002694:	2238      	movs	r2, #56	; 0x38
 8002696:	61da      	str	r2, [r3, #28]
  hfdcan1.Init.NominalTimeSeg2 = 23;
 8002698:	4b21      	ldr	r3, [pc, #132]	; (8002720 <MX_FDCAN1_Init+0xc4>)
 800269a:	2217      	movs	r2, #23
 800269c:	621a      	str	r2, [r3, #32]
  hfdcan1.Init.DataPrescaler = 1;
 800269e:	4b20      	ldr	r3, [pc, #128]	; (8002720 <MX_FDCAN1_Init+0xc4>)
 80026a0:	2201      	movs	r2, #1
 80026a2:	625a      	str	r2, [r3, #36]	; 0x24
  hfdcan1.Init.DataSyncJumpWidth = 5;
 80026a4:	4b1e      	ldr	r3, [pc, #120]	; (8002720 <MX_FDCAN1_Init+0xc4>)
 80026a6:	2205      	movs	r2, #5
 80026a8:	629a      	str	r2, [r3, #40]	; 0x28
  hfdcan1.Init.DataTimeSeg1 = 10;
 80026aa:	4b1d      	ldr	r3, [pc, #116]	; (8002720 <MX_FDCAN1_Init+0xc4>)
 80026ac:	220a      	movs	r2, #10
 80026ae:	62da      	str	r2, [r3, #44]	; 0x2c
  hfdcan1.Init.DataTimeSeg2 = 5;
 80026b0:	4b1b      	ldr	r3, [pc, #108]	; (8002720 <MX_FDCAN1_Init+0xc4>)
 80026b2:	2205      	movs	r2, #5
 80026b4:	631a      	str	r2, [r3, #48]	; 0x30
  hfdcan1.Init.MessageRAMOffset = 0;
 80026b6:	4b1a      	ldr	r3, [pc, #104]	; (8002720 <MX_FDCAN1_Init+0xc4>)
 80026b8:	2200      	movs	r2, #0
 80026ba:	635a      	str	r2, [r3, #52]	; 0x34
  hfdcan1.Init.StdFiltersNbr = 2;
 80026bc:	4b18      	ldr	r3, [pc, #96]	; (8002720 <MX_FDCAN1_Init+0xc4>)
 80026be:	2202      	movs	r2, #2
 80026c0:	639a      	str	r2, [r3, #56]	; 0x38
  hfdcan1.Init.ExtFiltersNbr = 2;
 80026c2:	4b17      	ldr	r3, [pc, #92]	; (8002720 <MX_FDCAN1_Init+0xc4>)
 80026c4:	2202      	movs	r2, #2
 80026c6:	63da      	str	r2, [r3, #60]	; 0x3c
  hfdcan1.Init.RxFifo0ElmtsNbr = 64;
 80026c8:	4b15      	ldr	r3, [pc, #84]	; (8002720 <MX_FDCAN1_Init+0xc4>)
 80026ca:	2240      	movs	r2, #64	; 0x40
 80026cc:	641a      	str	r2, [r3, #64]	; 0x40
  hfdcan1.Init.RxFifo0ElmtSize = FDCAN_DATA_BYTES_64;
 80026ce:	4b14      	ldr	r3, [pc, #80]	; (8002720 <MX_FDCAN1_Init+0xc4>)
 80026d0:	2212      	movs	r2, #18
 80026d2:	645a      	str	r2, [r3, #68]	; 0x44
  hfdcan1.Init.RxFifo1ElmtsNbr = 0;
 80026d4:	4b12      	ldr	r3, [pc, #72]	; (8002720 <MX_FDCAN1_Init+0xc4>)
 80026d6:	2200      	movs	r2, #0
 80026d8:	649a      	str	r2, [r3, #72]	; 0x48
  hfdcan1.Init.RxFifo1ElmtSize = FDCAN_DATA_BYTES_8;
 80026da:	4b11      	ldr	r3, [pc, #68]	; (8002720 <MX_FDCAN1_Init+0xc4>)
 80026dc:	2204      	movs	r2, #4
 80026de:	64da      	str	r2, [r3, #76]	; 0x4c
  hfdcan1.Init.RxBuffersNbr = 0;
 80026e0:	4b0f      	ldr	r3, [pc, #60]	; (8002720 <MX_FDCAN1_Init+0xc4>)
 80026e2:	2200      	movs	r2, #0
 80026e4:	651a      	str	r2, [r3, #80]	; 0x50
  hfdcan1.Init.RxBufferSize = FDCAN_DATA_BYTES_8;
 80026e6:	4b0e      	ldr	r3, [pc, #56]	; (8002720 <MX_FDCAN1_Init+0xc4>)
 80026e8:	2204      	movs	r2, #4
 80026ea:	655a      	str	r2, [r3, #84]	; 0x54
  hfdcan1.Init.TxEventsNbr = 0;
 80026ec:	4b0c      	ldr	r3, [pc, #48]	; (8002720 <MX_FDCAN1_Init+0xc4>)
 80026ee:	2200      	movs	r2, #0
 80026f0:	659a      	str	r2, [r3, #88]	; 0x58
  hfdcan1.Init.TxBuffersNbr = 0;
 80026f2:	4b0b      	ldr	r3, [pc, #44]	; (8002720 <MX_FDCAN1_Init+0xc4>)
 80026f4:	2200      	movs	r2, #0
 80026f6:	65da      	str	r2, [r3, #92]	; 0x5c
  hfdcan1.Init.TxFifoQueueElmtsNbr = 0;
 80026f8:	4b09      	ldr	r3, [pc, #36]	; (8002720 <MX_FDCAN1_Init+0xc4>)
 80026fa:	2200      	movs	r2, #0
 80026fc:	661a      	str	r2, [r3, #96]	; 0x60
  hfdcan1.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 80026fe:	4b08      	ldr	r3, [pc, #32]	; (8002720 <MX_FDCAN1_Init+0xc4>)
 8002700:	2200      	movs	r2, #0
 8002702:	665a      	str	r2, [r3, #100]	; 0x64
  hfdcan1.Init.TxElmtSize = FDCAN_DATA_BYTES_8;
 8002704:	4b06      	ldr	r3, [pc, #24]	; (8002720 <MX_FDCAN1_Init+0xc4>)
 8002706:	2204      	movs	r2, #4
 8002708:	669a      	str	r2, [r3, #104]	; 0x68
  if (HAL_FDCAN_Init(&hfdcan1) != HAL_OK)
 800270a:	4805      	ldr	r0, [pc, #20]	; (8002720 <MX_FDCAN1_Init+0xc4>)
 800270c:	f003 fa16 	bl	8005b3c <HAL_FDCAN_Init>
 8002710:	4603      	mov	r3, r0
 8002712:	2b00      	cmp	r3, #0
 8002714:	d001      	beq.n	800271a <MX_FDCAN1_Init+0xbe>
  {
    Error_Handler();
 8002716:	f000 fb07 	bl	8002d28 <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN1_Init 2 */

  /* USER CODE END FDCAN1_Init 2 */

}
 800271a:	bf00      	nop
 800271c:	bd80      	pop	{r7, pc}
 800271e:	bf00      	nop
 8002720:	240014ec 	.word	0x240014ec
 8002724:	4000a000 	.word	0x4000a000

08002728 <MX_FDCAN2_Init>:
  * @brief FDCAN2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_FDCAN2_Init(void)
{
 8002728:	b580      	push	{r7, lr}
 800272a:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN2_Init 0 */

  /* USER CODE BEGIN FDCAN2_Init 1 */

  /* USER CODE END FDCAN2_Init 1 */
  hfdcan2.Instance = FDCAN2;
 800272c:	4b2e      	ldr	r3, [pc, #184]	; (80027e8 <MX_FDCAN2_Init+0xc0>)
 800272e:	4a2f      	ldr	r2, [pc, #188]	; (80027ec <MX_FDCAN2_Init+0xc4>)
 8002730:	601a      	str	r2, [r3, #0]
  hfdcan2.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 8002732:	4b2d      	ldr	r3, [pc, #180]	; (80027e8 <MX_FDCAN2_Init+0xc0>)
 8002734:	2200      	movs	r2, #0
 8002736:	609a      	str	r2, [r3, #8]
  hfdcan2.Init.Mode = FDCAN_MODE_NORMAL;
 8002738:	4b2b      	ldr	r3, [pc, #172]	; (80027e8 <MX_FDCAN2_Init+0xc0>)
 800273a:	2200      	movs	r2, #0
 800273c:	60da      	str	r2, [r3, #12]
  hfdcan2.Init.AutoRetransmission = DISABLE;
 800273e:	4b2a      	ldr	r3, [pc, #168]	; (80027e8 <MX_FDCAN2_Init+0xc0>)
 8002740:	2200      	movs	r2, #0
 8002742:	741a      	strb	r2, [r3, #16]
  hfdcan2.Init.TransmitPause = DISABLE;
 8002744:	4b28      	ldr	r3, [pc, #160]	; (80027e8 <MX_FDCAN2_Init+0xc0>)
 8002746:	2200      	movs	r2, #0
 8002748:	745a      	strb	r2, [r3, #17]
  hfdcan2.Init.ProtocolException = DISABLE;
 800274a:	4b27      	ldr	r3, [pc, #156]	; (80027e8 <MX_FDCAN2_Init+0xc0>)
 800274c:	2200      	movs	r2, #0
 800274e:	749a      	strb	r2, [r3, #18]
  hfdcan2.Init.NominalPrescaler = 1;
 8002750:	4b25      	ldr	r3, [pc, #148]	; (80027e8 <MX_FDCAN2_Init+0xc0>)
 8002752:	2201      	movs	r2, #1
 8002754:	615a      	str	r2, [r3, #20]
  hfdcan2.Init.NominalSyncJumpWidth = 1;
 8002756:	4b24      	ldr	r3, [pc, #144]	; (80027e8 <MX_FDCAN2_Init+0xc0>)
 8002758:	2201      	movs	r2, #1
 800275a:	619a      	str	r2, [r3, #24]
  hfdcan2.Init.NominalTimeSeg1 = 2;
 800275c:	4b22      	ldr	r3, [pc, #136]	; (80027e8 <MX_FDCAN2_Init+0xc0>)
 800275e:	2202      	movs	r2, #2
 8002760:	61da      	str	r2, [r3, #28]
  hfdcan2.Init.NominalTimeSeg2 = 2;
 8002762:	4b21      	ldr	r3, [pc, #132]	; (80027e8 <MX_FDCAN2_Init+0xc0>)
 8002764:	2202      	movs	r2, #2
 8002766:	621a      	str	r2, [r3, #32]
  hfdcan2.Init.DataPrescaler = 1;
 8002768:	4b1f      	ldr	r3, [pc, #124]	; (80027e8 <MX_FDCAN2_Init+0xc0>)
 800276a:	2201      	movs	r2, #1
 800276c:	625a      	str	r2, [r3, #36]	; 0x24
  hfdcan2.Init.DataSyncJumpWidth = 1;
 800276e:	4b1e      	ldr	r3, [pc, #120]	; (80027e8 <MX_FDCAN2_Init+0xc0>)
 8002770:	2201      	movs	r2, #1
 8002772:	629a      	str	r2, [r3, #40]	; 0x28
  hfdcan2.Init.DataTimeSeg1 = 1;
 8002774:	4b1c      	ldr	r3, [pc, #112]	; (80027e8 <MX_FDCAN2_Init+0xc0>)
 8002776:	2201      	movs	r2, #1
 8002778:	62da      	str	r2, [r3, #44]	; 0x2c
  hfdcan2.Init.DataTimeSeg2 = 1;
 800277a:	4b1b      	ldr	r3, [pc, #108]	; (80027e8 <MX_FDCAN2_Init+0xc0>)
 800277c:	2201      	movs	r2, #1
 800277e:	631a      	str	r2, [r3, #48]	; 0x30
  hfdcan2.Init.MessageRAMOffset = 0;
 8002780:	4b19      	ldr	r3, [pc, #100]	; (80027e8 <MX_FDCAN2_Init+0xc0>)
 8002782:	2200      	movs	r2, #0
 8002784:	635a      	str	r2, [r3, #52]	; 0x34
  hfdcan2.Init.StdFiltersNbr = 0;
 8002786:	4b18      	ldr	r3, [pc, #96]	; (80027e8 <MX_FDCAN2_Init+0xc0>)
 8002788:	2200      	movs	r2, #0
 800278a:	639a      	str	r2, [r3, #56]	; 0x38
  hfdcan2.Init.ExtFiltersNbr = 0;
 800278c:	4b16      	ldr	r3, [pc, #88]	; (80027e8 <MX_FDCAN2_Init+0xc0>)
 800278e:	2200      	movs	r2, #0
 8002790:	63da      	str	r2, [r3, #60]	; 0x3c
  hfdcan2.Init.RxFifo0ElmtsNbr = 0;
 8002792:	4b15      	ldr	r3, [pc, #84]	; (80027e8 <MX_FDCAN2_Init+0xc0>)
 8002794:	2200      	movs	r2, #0
 8002796:	641a      	str	r2, [r3, #64]	; 0x40
  hfdcan2.Init.RxFifo0ElmtSize = FDCAN_DATA_BYTES_8;
 8002798:	4b13      	ldr	r3, [pc, #76]	; (80027e8 <MX_FDCAN2_Init+0xc0>)
 800279a:	2204      	movs	r2, #4
 800279c:	645a      	str	r2, [r3, #68]	; 0x44
  hfdcan2.Init.RxFifo1ElmtsNbr = 0;
 800279e:	4b12      	ldr	r3, [pc, #72]	; (80027e8 <MX_FDCAN2_Init+0xc0>)
 80027a0:	2200      	movs	r2, #0
 80027a2:	649a      	str	r2, [r3, #72]	; 0x48
  hfdcan2.Init.RxFifo1ElmtSize = FDCAN_DATA_BYTES_8;
 80027a4:	4b10      	ldr	r3, [pc, #64]	; (80027e8 <MX_FDCAN2_Init+0xc0>)
 80027a6:	2204      	movs	r2, #4
 80027a8:	64da      	str	r2, [r3, #76]	; 0x4c
  hfdcan2.Init.RxBuffersNbr = 0;
 80027aa:	4b0f      	ldr	r3, [pc, #60]	; (80027e8 <MX_FDCAN2_Init+0xc0>)
 80027ac:	2200      	movs	r2, #0
 80027ae:	651a      	str	r2, [r3, #80]	; 0x50
  hfdcan2.Init.RxBufferSize = FDCAN_DATA_BYTES_8;
 80027b0:	4b0d      	ldr	r3, [pc, #52]	; (80027e8 <MX_FDCAN2_Init+0xc0>)
 80027b2:	2204      	movs	r2, #4
 80027b4:	655a      	str	r2, [r3, #84]	; 0x54
  hfdcan2.Init.TxEventsNbr = 0;
 80027b6:	4b0c      	ldr	r3, [pc, #48]	; (80027e8 <MX_FDCAN2_Init+0xc0>)
 80027b8:	2200      	movs	r2, #0
 80027ba:	659a      	str	r2, [r3, #88]	; 0x58
  hfdcan2.Init.TxBuffersNbr = 0;
 80027bc:	4b0a      	ldr	r3, [pc, #40]	; (80027e8 <MX_FDCAN2_Init+0xc0>)
 80027be:	2200      	movs	r2, #0
 80027c0:	65da      	str	r2, [r3, #92]	; 0x5c
  hfdcan2.Init.TxFifoQueueElmtsNbr = 0;
 80027c2:	4b09      	ldr	r3, [pc, #36]	; (80027e8 <MX_FDCAN2_Init+0xc0>)
 80027c4:	2200      	movs	r2, #0
 80027c6:	661a      	str	r2, [r3, #96]	; 0x60
  hfdcan2.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 80027c8:	4b07      	ldr	r3, [pc, #28]	; (80027e8 <MX_FDCAN2_Init+0xc0>)
 80027ca:	2200      	movs	r2, #0
 80027cc:	665a      	str	r2, [r3, #100]	; 0x64
  hfdcan2.Init.TxElmtSize = FDCAN_DATA_BYTES_8;
 80027ce:	4b06      	ldr	r3, [pc, #24]	; (80027e8 <MX_FDCAN2_Init+0xc0>)
 80027d0:	2204      	movs	r2, #4
 80027d2:	669a      	str	r2, [r3, #104]	; 0x68
  if (HAL_FDCAN_Init(&hfdcan2) != HAL_OK)
 80027d4:	4804      	ldr	r0, [pc, #16]	; (80027e8 <MX_FDCAN2_Init+0xc0>)
 80027d6:	f003 f9b1 	bl	8005b3c <HAL_FDCAN_Init>
 80027da:	4603      	mov	r3, r0
 80027dc:	2b00      	cmp	r3, #0
 80027de:	d001      	beq.n	80027e4 <MX_FDCAN2_Init+0xbc>
  {
    Error_Handler();
 80027e0:	f000 faa2 	bl	8002d28 <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN2_Init 2 */

  /* USER CODE END FDCAN2_Init 2 */

}
 80027e4:	bf00      	nop
 80027e6:	bd80      	pop	{r7, pc}
 80027e8:	240016a0 	.word	0x240016a0
 80027ec:	4000a400 	.word	0x4000a400

080027f0 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 80027f0:	b580      	push	{r7, lr}
 80027f2:	b086      	sub	sp, #24
 80027f4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 80027f6:	1d3b      	adds	r3, r7, #4
 80027f8:	2200      	movs	r2, #0
 80027fa:	601a      	str	r2, [r3, #0]
 80027fc:	605a      	str	r2, [r3, #4]
 80027fe:	609a      	str	r2, [r3, #8]
 8002800:	60da      	str	r2, [r3, #12]
 8002802:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 8002804:	2300      	movs	r3, #0
 8002806:	603b      	str	r3, [r7, #0]
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8002808:	4b26      	ldr	r3, [pc, #152]	; (80028a4 <MX_RTC_Init+0xb4>)
 800280a:	4a27      	ldr	r2, [pc, #156]	; (80028a8 <MX_RTC_Init+0xb8>)
 800280c:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 800280e:	4b25      	ldr	r3, [pc, #148]	; (80028a4 <MX_RTC_Init+0xb4>)
 8002810:	2200      	movs	r2, #0
 8002812:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 1;
 8002814:	4b23      	ldr	r3, [pc, #140]	; (80028a4 <MX_RTC_Init+0xb4>)
 8002816:	2201      	movs	r2, #1
 8002818:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 16388;
 800281a:	4b22      	ldr	r3, [pc, #136]	; (80028a4 <MX_RTC_Init+0xb4>)
 800281c:	f244 0204 	movw	r2, #16388	; 0x4004
 8002820:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8002822:	4b20      	ldr	r3, [pc, #128]	; (80028a4 <MX_RTC_Init+0xb4>)
 8002824:	2200      	movs	r2, #0
 8002826:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8002828:	4b1e      	ldr	r3, [pc, #120]	; (80028a4 <MX_RTC_Init+0xb4>)
 800282a:	2200      	movs	r2, #0
 800282c:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 800282e:	4b1d      	ldr	r3, [pc, #116]	; (80028a4 <MX_RTC_Init+0xb4>)
 8002830:	2200      	movs	r2, #0
 8002832:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8002834:	4b1b      	ldr	r3, [pc, #108]	; (80028a4 <MX_RTC_Init+0xb4>)
 8002836:	2200      	movs	r2, #0
 8002838:	615a      	str	r2, [r3, #20]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 800283a:	481a      	ldr	r0, [pc, #104]	; (80028a4 <MX_RTC_Init+0xb4>)
 800283c:	f008 fea8 	bl	800b590 <HAL_RTC_Init>
 8002840:	4603      	mov	r3, r0
 8002842:	2b00      	cmp	r3, #0
 8002844:	d001      	beq.n	800284a <MX_RTC_Init+0x5a>
  {
    Error_Handler();
 8002846:	f000 fa6f 	bl	8002d28 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0;
 800284a:	2300      	movs	r3, #0
 800284c:	713b      	strb	r3, [r7, #4]
  sTime.Minutes = 0;
 800284e:	2300      	movs	r3, #0
 8002850:	717b      	strb	r3, [r7, #5]
  sTime.Seconds = 0;
 8002852:	2300      	movs	r3, #0
 8002854:	71bb      	strb	r3, [r7, #6]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8002856:	2300      	movs	r3, #0
 8002858:	613b      	str	r3, [r7, #16]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 800285a:	2300      	movs	r3, #0
 800285c:	617b      	str	r3, [r7, #20]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN) != HAL_OK)
 800285e:	1d3b      	adds	r3, r7, #4
 8002860:	2200      	movs	r2, #0
 8002862:	4619      	mov	r1, r3
 8002864:	480f      	ldr	r0, [pc, #60]	; (80028a4 <MX_RTC_Init+0xb4>)
 8002866:	f008 ff0b 	bl	800b680 <HAL_RTC_SetTime>
 800286a:	4603      	mov	r3, r0
 800286c:	2b00      	cmp	r3, #0
 800286e:	d001      	beq.n	8002874 <MX_RTC_Init+0x84>
  {
    Error_Handler();
 8002870:	f000 fa5a 	bl	8002d28 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8002874:	2301      	movs	r3, #1
 8002876:	703b      	strb	r3, [r7, #0]
  sDate.Month = RTC_MONTH_JANUARY;
 8002878:	2301      	movs	r3, #1
 800287a:	707b      	strb	r3, [r7, #1]
  sDate.Date = 1;
 800287c:	2301      	movs	r3, #1
 800287e:	70bb      	strb	r3, [r7, #2]
  sDate.Year = 0;
 8002880:	2300      	movs	r3, #0
 8002882:	70fb      	strb	r3, [r7, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN) != HAL_OK)
 8002884:	463b      	mov	r3, r7
 8002886:	2200      	movs	r2, #0
 8002888:	4619      	mov	r1, r3
 800288a:	4806      	ldr	r0, [pc, #24]	; (80028a4 <MX_RTC_Init+0xb4>)
 800288c:	f008 fff2 	bl	800b874 <HAL_RTC_SetDate>
 8002890:	4603      	mov	r3, r0
 8002892:	2b00      	cmp	r3, #0
 8002894:	d001      	beq.n	800289a <MX_RTC_Init+0xaa>
  {
    Error_Handler();
 8002896:	f000 fa47 	bl	8002d28 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 800289a:	bf00      	nop
 800289c:	3718      	adds	r7, #24
 800289e:	46bd      	mov	sp, r7
 80028a0:	bd80      	pop	{r7, pc}
 80028a2:	bf00      	nop
 80028a4:	240014c8 	.word	0x240014c8
 80028a8:	58004000 	.word	0x58004000

080028ac <MX_SDMMC1_SD_Init>:
  * @brief SDMMC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDMMC1_SD_Init(void)
{
 80028ac:	b480      	push	{r7}
 80028ae:	af00      	add	r7, sp, #0
  /* USER CODE END SDMMC1_Init 0 */

  /* USER CODE BEGIN SDMMC1_Init 1 */

  /* USER CODE END SDMMC1_Init 1 */
  hsd1.Instance = SDMMC1;
 80028b0:	4b0d      	ldr	r3, [pc, #52]	; (80028e8 <MX_SDMMC1_SD_Init+0x3c>)
 80028b2:	4a0e      	ldr	r2, [pc, #56]	; (80028ec <MX_SDMMC1_SD_Init+0x40>)
 80028b4:	601a      	str	r2, [r3, #0]
  hsd1.Init.ClockEdge = SDMMC_CLOCK_EDGE_RISING;
 80028b6:	4b0c      	ldr	r3, [pc, #48]	; (80028e8 <MX_SDMMC1_SD_Init+0x3c>)
 80028b8:	2200      	movs	r2, #0
 80028ba:	605a      	str	r2, [r3, #4]
  hsd1.Init.ClockPowerSave = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 80028bc:	4b0a      	ldr	r3, [pc, #40]	; (80028e8 <MX_SDMMC1_SD_Init+0x3c>)
 80028be:	2200      	movs	r2, #0
 80028c0:	609a      	str	r2, [r3, #8]
  hsd1.Init.BusWide = SDMMC_BUS_WIDE_4B;
 80028c2:	4b09      	ldr	r3, [pc, #36]	; (80028e8 <MX_SDMMC1_SD_Init+0x3c>)
 80028c4:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80028c8:	60da      	str	r2, [r3, #12]
  hsd1.Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_ENABLE;
 80028ca:	4b07      	ldr	r3, [pc, #28]	; (80028e8 <MX_SDMMC1_SD_Init+0x3c>)
 80028cc:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80028d0:	611a      	str	r2, [r3, #16]
  hsd1.Init.ClockDiv = 0;
 80028d2:	4b05      	ldr	r3, [pc, #20]	; (80028e8 <MX_SDMMC1_SD_Init+0x3c>)
 80028d4:	2200      	movs	r2, #0
 80028d6:	615a      	str	r2, [r3, #20]
  hsd1.Init.TranceiverPresent = SDMMC_TRANSCEIVER_NOT_PRESENT;
 80028d8:	4b03      	ldr	r3, [pc, #12]	; (80028e8 <MX_SDMMC1_SD_Init+0x3c>)
 80028da:	2201      	movs	r2, #1
 80028dc:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN SDMMC1_Init 2 */

  /* USER CODE END SDMMC1_Init 2 */

}
 80028de:	bf00      	nop
 80028e0:	46bd      	mov	sp, r7
 80028e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028e6:	4770      	bx	lr
 80028e8:	24001448 	.word	0x24001448
 80028ec:	52007000 	.word	0x52007000

080028f0 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80028f0:	b580      	push	{r7, lr}
 80028f2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80028f4:	4b27      	ldr	r3, [pc, #156]	; (8002994 <MX_SPI1_Init+0xa4>)
 80028f6:	4a28      	ldr	r2, [pc, #160]	; (8002998 <MX_SPI1_Init+0xa8>)
 80028f8:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80028fa:	4b26      	ldr	r3, [pc, #152]	; (8002994 <MX_SPI1_Init+0xa4>)
 80028fc:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8002900:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8002902:	4b24      	ldr	r3, [pc, #144]	; (8002994 <MX_SPI1_Init+0xa4>)
 8002904:	2200      	movs	r2, #0
 8002906:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8002908:	4b22      	ldr	r3, [pc, #136]	; (8002994 <MX_SPI1_Init+0xa4>)
 800290a:	2207      	movs	r2, #7
 800290c:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800290e:	4b21      	ldr	r3, [pc, #132]	; (8002994 <MX_SPI1_Init+0xa4>)
 8002910:	2200      	movs	r2, #0
 8002912:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002914:	4b1f      	ldr	r3, [pc, #124]	; (8002994 <MX_SPI1_Init+0xa4>)
 8002916:	2200      	movs	r2, #0
 8002918:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800291a:	4b1e      	ldr	r3, [pc, #120]	; (8002994 <MX_SPI1_Init+0xa4>)
 800291c:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8002920:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 8002922:	4b1c      	ldr	r3, [pc, #112]	; (8002994 <MX_SPI1_Init+0xa4>)
 8002924:	f04f 42e0 	mov.w	r2, #1879048192	; 0x70000000
 8002928:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800292a:	4b1a      	ldr	r3, [pc, #104]	; (8002994 <MX_SPI1_Init+0xa4>)
 800292c:	2200      	movs	r2, #0
 800292e:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8002930:	4b18      	ldr	r3, [pc, #96]	; (8002994 <MX_SPI1_Init+0xa4>)
 8002932:	2200      	movs	r2, #0
 8002934:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002936:	4b17      	ldr	r3, [pc, #92]	; (8002994 <MX_SPI1_Init+0xa4>)
 8002938:	2200      	movs	r2, #0
 800293a:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 0x0;
 800293c:	4b15      	ldr	r3, [pc, #84]	; (8002994 <MX_SPI1_Init+0xa4>)
 800293e:	2200      	movs	r2, #0
 8002940:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8002942:	4b14      	ldr	r3, [pc, #80]	; (8002994 <MX_SPI1_Init+0xa4>)
 8002944:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002948:	635a      	str	r2, [r3, #52]	; 0x34
  hspi1.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 800294a:	4b12      	ldr	r3, [pc, #72]	; (8002994 <MX_SPI1_Init+0xa4>)
 800294c:	2200      	movs	r2, #0
 800294e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi1.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8002950:	4b10      	ldr	r3, [pc, #64]	; (8002994 <MX_SPI1_Init+0xa4>)
 8002952:	2200      	movs	r2, #0
 8002954:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi1.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8002956:	4b0f      	ldr	r3, [pc, #60]	; (8002994 <MX_SPI1_Init+0xa4>)
 8002958:	2200      	movs	r2, #0
 800295a:	641a      	str	r2, [r3, #64]	; 0x40
  hspi1.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 800295c:	4b0d      	ldr	r3, [pc, #52]	; (8002994 <MX_SPI1_Init+0xa4>)
 800295e:	2200      	movs	r2, #0
 8002960:	645a      	str	r2, [r3, #68]	; 0x44
  hspi1.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8002962:	4b0c      	ldr	r3, [pc, #48]	; (8002994 <MX_SPI1_Init+0xa4>)
 8002964:	2200      	movs	r2, #0
 8002966:	649a      	str	r2, [r3, #72]	; 0x48
  hspi1.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8002968:	4b0a      	ldr	r3, [pc, #40]	; (8002994 <MX_SPI1_Init+0xa4>)
 800296a:	2200      	movs	r2, #0
 800296c:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi1.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 800296e:	4b09      	ldr	r3, [pc, #36]	; (8002994 <MX_SPI1_Init+0xa4>)
 8002970:	2200      	movs	r2, #0
 8002972:	651a      	str	r2, [r3, #80]	; 0x50
  hspi1.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8002974:	4b07      	ldr	r3, [pc, #28]	; (8002994 <MX_SPI1_Init+0xa4>)
 8002976:	2200      	movs	r2, #0
 8002978:	655a      	str	r2, [r3, #84]	; 0x54
  hspi1.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 800297a:	4b06      	ldr	r3, [pc, #24]	; (8002994 <MX_SPI1_Init+0xa4>)
 800297c:	2200      	movs	r2, #0
 800297e:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8002980:	4804      	ldr	r0, [pc, #16]	; (8002994 <MX_SPI1_Init+0xa4>)
 8002982:	f00b f89f 	bl	800dac4 <HAL_SPI_Init>
 8002986:	4603      	mov	r3, r0
 8002988:	2b00      	cmp	r3, #0
 800298a:	d001      	beq.n	8002990 <MX_SPI1_Init+0xa0>
  {
    Error_Handler();
 800298c:	f000 f9cc 	bl	8002d28 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8002990:	bf00      	nop
 8002992:	bd80      	pop	{r7, pc}
 8002994:	24001618 	.word	0x24001618
 8002998:	40013000 	.word	0x40013000

0800299c <MX_UART8_Init>:
  * @brief UART8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART8_Init(void)
{
 800299c:	b580      	push	{r7, lr}
 800299e:	af00      	add	r7, sp, #0
  /* USER CODE END UART8_Init 0 */

  /* USER CODE BEGIN UART8_Init 1 */

  /* USER CODE END UART8_Init 1 */
  huart8.Instance = UART8;
 80029a0:	4b22      	ldr	r3, [pc, #136]	; (8002a2c <MX_UART8_Init+0x90>)
 80029a2:	4a23      	ldr	r2, [pc, #140]	; (8002a30 <MX_UART8_Init+0x94>)
 80029a4:	601a      	str	r2, [r3, #0]
  huart8.Init.BaudRate = 115200;
 80029a6:	4b21      	ldr	r3, [pc, #132]	; (8002a2c <MX_UART8_Init+0x90>)
 80029a8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80029ac:	605a      	str	r2, [r3, #4]
  huart8.Init.WordLength = UART_WORDLENGTH_8B;
 80029ae:	4b1f      	ldr	r3, [pc, #124]	; (8002a2c <MX_UART8_Init+0x90>)
 80029b0:	2200      	movs	r2, #0
 80029b2:	609a      	str	r2, [r3, #8]
  huart8.Init.StopBits = UART_STOPBITS_1;
 80029b4:	4b1d      	ldr	r3, [pc, #116]	; (8002a2c <MX_UART8_Init+0x90>)
 80029b6:	2200      	movs	r2, #0
 80029b8:	60da      	str	r2, [r3, #12]
  huart8.Init.Parity = UART_PARITY_NONE;
 80029ba:	4b1c      	ldr	r3, [pc, #112]	; (8002a2c <MX_UART8_Init+0x90>)
 80029bc:	2200      	movs	r2, #0
 80029be:	611a      	str	r2, [r3, #16]
  huart8.Init.Mode = UART_MODE_TX_RX;
 80029c0:	4b1a      	ldr	r3, [pc, #104]	; (8002a2c <MX_UART8_Init+0x90>)
 80029c2:	220c      	movs	r2, #12
 80029c4:	615a      	str	r2, [r3, #20]
  huart8.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80029c6:	4b19      	ldr	r3, [pc, #100]	; (8002a2c <MX_UART8_Init+0x90>)
 80029c8:	2200      	movs	r2, #0
 80029ca:	619a      	str	r2, [r3, #24]
  huart8.Init.OverSampling = UART_OVERSAMPLING_16;
 80029cc:	4b17      	ldr	r3, [pc, #92]	; (8002a2c <MX_UART8_Init+0x90>)
 80029ce:	2200      	movs	r2, #0
 80029d0:	61da      	str	r2, [r3, #28]
  huart8.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80029d2:	4b16      	ldr	r3, [pc, #88]	; (8002a2c <MX_UART8_Init+0x90>)
 80029d4:	2200      	movs	r2, #0
 80029d6:	621a      	str	r2, [r3, #32]
  huart8.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80029d8:	4b14      	ldr	r3, [pc, #80]	; (8002a2c <MX_UART8_Init+0x90>)
 80029da:	2200      	movs	r2, #0
 80029dc:	625a      	str	r2, [r3, #36]	; 0x24
  huart8.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80029de:	4b13      	ldr	r3, [pc, #76]	; (8002a2c <MX_UART8_Init+0x90>)
 80029e0:	2200      	movs	r2, #0
 80029e2:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart8) != HAL_OK)
 80029e4:	4811      	ldr	r0, [pc, #68]	; (8002a2c <MX_UART8_Init+0x90>)
 80029e6:	f00c f91e 	bl	800ec26 <HAL_UART_Init>
 80029ea:	4603      	mov	r3, r0
 80029ec:	2b00      	cmp	r3, #0
 80029ee:	d001      	beq.n	80029f4 <MX_UART8_Init+0x58>
  {
    Error_Handler();
 80029f0:	f000 f99a 	bl	8002d28 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart8, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80029f4:	2100      	movs	r1, #0
 80029f6:	480d      	ldr	r0, [pc, #52]	; (8002a2c <MX_UART8_Init+0x90>)
 80029f8:	f00d faae 	bl	800ff58 <HAL_UARTEx_SetTxFifoThreshold>
 80029fc:	4603      	mov	r3, r0
 80029fe:	2b00      	cmp	r3, #0
 8002a00:	d001      	beq.n	8002a06 <MX_UART8_Init+0x6a>
  {
    Error_Handler();
 8002a02:	f000 f991 	bl	8002d28 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart8, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002a06:	2100      	movs	r1, #0
 8002a08:	4808      	ldr	r0, [pc, #32]	; (8002a2c <MX_UART8_Init+0x90>)
 8002a0a:	f00d fae3 	bl	800ffd4 <HAL_UARTEx_SetRxFifoThreshold>
 8002a0e:	4603      	mov	r3, r0
 8002a10:	2b00      	cmp	r3, #0
 8002a12:	d001      	beq.n	8002a18 <MX_UART8_Init+0x7c>
  {
    Error_Handler();
 8002a14:	f000 f988 	bl	8002d28 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart8) != HAL_OK)
 8002a18:	4804      	ldr	r0, [pc, #16]	; (8002a2c <MX_UART8_Init+0x90>)
 8002a1a:	f00d fa64 	bl	800fee6 <HAL_UARTEx_DisableFifoMode>
 8002a1e:	4603      	mov	r3, r0
 8002a20:	2b00      	cmp	r3, #0
 8002a22:	d001      	beq.n	8002a28 <MX_UART8_Init+0x8c>
  {
    Error_Handler();
 8002a24:	f000 f980 	bl	8002d28 <Error_Handler>
  }
  /* USER CODE BEGIN UART8_Init 2 */

  /* USER CODE END UART8_Init 2 */

}
 8002a28:	bf00      	nop
 8002a2a:	bd80      	pop	{r7, pc}
 8002a2c:	2400158c 	.word	0x2400158c
 8002a30:	40007c00 	.word	0x40007c00

08002a34 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8002a34:	b580      	push	{r7, lr}
 8002a36:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8002a38:	4b22      	ldr	r3, [pc, #136]	; (8002ac4 <MX_USART3_UART_Init+0x90>)
 8002a3a:	4a23      	ldr	r2, [pc, #140]	; (8002ac8 <MX_USART3_UART_Init+0x94>)
 8002a3c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 38400;
 8002a3e:	4b21      	ldr	r3, [pc, #132]	; (8002ac4 <MX_USART3_UART_Init+0x90>)
 8002a40:	f44f 4216 	mov.w	r2, #38400	; 0x9600
 8002a44:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8002a46:	4b1f      	ldr	r3, [pc, #124]	; (8002ac4 <MX_USART3_UART_Init+0x90>)
 8002a48:	2200      	movs	r2, #0
 8002a4a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8002a4c:	4b1d      	ldr	r3, [pc, #116]	; (8002ac4 <MX_USART3_UART_Init+0x90>)
 8002a4e:	2200      	movs	r2, #0
 8002a50:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8002a52:	4b1c      	ldr	r3, [pc, #112]	; (8002ac4 <MX_USART3_UART_Init+0x90>)
 8002a54:	2200      	movs	r2, #0
 8002a56:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8002a58:	4b1a      	ldr	r3, [pc, #104]	; (8002ac4 <MX_USART3_UART_Init+0x90>)
 8002a5a:	220c      	movs	r2, #12
 8002a5c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002a5e:	4b19      	ldr	r3, [pc, #100]	; (8002ac4 <MX_USART3_UART_Init+0x90>)
 8002a60:	2200      	movs	r2, #0
 8002a62:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8002a64:	4b17      	ldr	r3, [pc, #92]	; (8002ac4 <MX_USART3_UART_Init+0x90>)
 8002a66:	2200      	movs	r2, #0
 8002a68:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002a6a:	4b16      	ldr	r3, [pc, #88]	; (8002ac4 <MX_USART3_UART_Init+0x90>)
 8002a6c:	2200      	movs	r2, #0
 8002a6e:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8002a70:	4b14      	ldr	r3, [pc, #80]	; (8002ac4 <MX_USART3_UART_Init+0x90>)
 8002a72:	2200      	movs	r2, #0
 8002a74:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002a76:	4b13      	ldr	r3, [pc, #76]	; (8002ac4 <MX_USART3_UART_Init+0x90>)
 8002a78:	2200      	movs	r2, #0
 8002a7a:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8002a7c:	4811      	ldr	r0, [pc, #68]	; (8002ac4 <MX_USART3_UART_Init+0x90>)
 8002a7e:	f00c f8d2 	bl	800ec26 <HAL_UART_Init>
 8002a82:	4603      	mov	r3, r0
 8002a84:	2b00      	cmp	r3, #0
 8002a86:	d001      	beq.n	8002a8c <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8002a88:	f000 f94e 	bl	8002d28 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002a8c:	2100      	movs	r1, #0
 8002a8e:	480d      	ldr	r0, [pc, #52]	; (8002ac4 <MX_USART3_UART_Init+0x90>)
 8002a90:	f00d fa62 	bl	800ff58 <HAL_UARTEx_SetTxFifoThreshold>
 8002a94:	4603      	mov	r3, r0
 8002a96:	2b00      	cmp	r3, #0
 8002a98:	d001      	beq.n	8002a9e <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8002a9a:	f000 f945 	bl	8002d28 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002a9e:	2100      	movs	r1, #0
 8002aa0:	4808      	ldr	r0, [pc, #32]	; (8002ac4 <MX_USART3_UART_Init+0x90>)
 8002aa2:	f00d fa97 	bl	800ffd4 <HAL_UARTEx_SetRxFifoThreshold>
 8002aa6:	4603      	mov	r3, r0
 8002aa8:	2b00      	cmp	r3, #0
 8002aaa:	d001      	beq.n	8002ab0 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8002aac:	f000 f93c 	bl	8002d28 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8002ab0:	4804      	ldr	r0, [pc, #16]	; (8002ac4 <MX_USART3_UART_Init+0x90>)
 8002ab2:	f00d fa18 	bl	800fee6 <HAL_UARTEx_DisableFifoMode>
 8002ab6:	4603      	mov	r3, r0
 8002ab8:	2b00      	cmp	r3, #0
 8002aba:	d001      	beq.n	8002ac0 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8002abc:	f000 f934 	bl	8002d28 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8002ac0:	bf00      	nop
 8002ac2:	bd80      	pop	{r7, pc}
 8002ac4:	240013bc 	.word	0x240013bc
 8002ac8:	40004800 	.word	0x40004800

08002acc <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8002acc:	b580      	push	{r7, lr}
 8002ace:	b082      	sub	sp, #8
 8002ad0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8002ad2:	4b0d      	ldr	r3, [pc, #52]	; (8002b08 <MX_DMA_Init+0x3c>)
 8002ad4:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8002ad8:	4a0b      	ldr	r2, [pc, #44]	; (8002b08 <MX_DMA_Init+0x3c>)
 8002ada:	f043 0301 	orr.w	r3, r3, #1
 8002ade:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8002ae2:	4b09      	ldr	r3, [pc, #36]	; (8002b08 <MX_DMA_Init+0x3c>)
 8002ae4:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8002ae8:	f003 0301 	and.w	r3, r3, #1
 8002aec:	607b      	str	r3, [r7, #4]
 8002aee:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 8002af0:	2200      	movs	r2, #0
 8002af2:	2100      	movs	r1, #0
 8002af4:	200c      	movs	r0, #12
 8002af6:	f000 ff14 	bl	8003922 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8002afa:	200c      	movs	r0, #12
 8002afc:	f000 ff2b 	bl	8003956 <HAL_NVIC_EnableIRQ>

}
 8002b00:	bf00      	nop
 8002b02:	3708      	adds	r7, #8
 8002b04:	46bd      	mov	sp, r7
 8002b06:	bd80      	pop	{r7, pc}
 8002b08:	58024400 	.word	0x58024400

08002b0c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002b0c:	b580      	push	{r7, lr}
 8002b0e:	b08c      	sub	sp, #48	; 0x30
 8002b10:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002b12:	f107 031c 	add.w	r3, r7, #28
 8002b16:	2200      	movs	r2, #0
 8002b18:	601a      	str	r2, [r3, #0]
 8002b1a:	605a      	str	r2, [r3, #4]
 8002b1c:	609a      	str	r2, [r3, #8]
 8002b1e:	60da      	str	r2, [r3, #12]
 8002b20:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8002b22:	4b6d      	ldr	r3, [pc, #436]	; (8002cd8 <MX_GPIO_Init+0x1cc>)
 8002b24:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002b28:	4a6b      	ldr	r2, [pc, #428]	; (8002cd8 <MX_GPIO_Init+0x1cc>)
 8002b2a:	f043 0310 	orr.w	r3, r3, #16
 8002b2e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002b32:	4b69      	ldr	r3, [pc, #420]	; (8002cd8 <MX_GPIO_Init+0x1cc>)
 8002b34:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002b38:	f003 0310 	and.w	r3, r3, #16
 8002b3c:	61bb      	str	r3, [r7, #24]
 8002b3e:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002b40:	4b65      	ldr	r3, [pc, #404]	; (8002cd8 <MX_GPIO_Init+0x1cc>)
 8002b42:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002b46:	4a64      	ldr	r2, [pc, #400]	; (8002cd8 <MX_GPIO_Init+0x1cc>)
 8002b48:	f043 0304 	orr.w	r3, r3, #4
 8002b4c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002b50:	4b61      	ldr	r3, [pc, #388]	; (8002cd8 <MX_GPIO_Init+0x1cc>)
 8002b52:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002b56:	f003 0304 	and.w	r3, r3, #4
 8002b5a:	617b      	str	r3, [r7, #20]
 8002b5c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002b5e:	4b5e      	ldr	r3, [pc, #376]	; (8002cd8 <MX_GPIO_Init+0x1cc>)
 8002b60:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002b64:	4a5c      	ldr	r2, [pc, #368]	; (8002cd8 <MX_GPIO_Init+0x1cc>)
 8002b66:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002b6a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002b6e:	4b5a      	ldr	r3, [pc, #360]	; (8002cd8 <MX_GPIO_Init+0x1cc>)
 8002b70:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002b74:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002b78:	613b      	str	r3, [r7, #16]
 8002b7a:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002b7c:	4b56      	ldr	r3, [pc, #344]	; (8002cd8 <MX_GPIO_Init+0x1cc>)
 8002b7e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002b82:	4a55      	ldr	r2, [pc, #340]	; (8002cd8 <MX_GPIO_Init+0x1cc>)
 8002b84:	f043 0301 	orr.w	r3, r3, #1
 8002b88:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002b8c:	4b52      	ldr	r3, [pc, #328]	; (8002cd8 <MX_GPIO_Init+0x1cc>)
 8002b8e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002b92:	f003 0301 	and.w	r3, r3, #1
 8002b96:	60fb      	str	r3, [r7, #12]
 8002b98:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002b9a:	4b4f      	ldr	r3, [pc, #316]	; (8002cd8 <MX_GPIO_Init+0x1cc>)
 8002b9c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002ba0:	4a4d      	ldr	r2, [pc, #308]	; (8002cd8 <MX_GPIO_Init+0x1cc>)
 8002ba2:	f043 0302 	orr.w	r3, r3, #2
 8002ba6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002baa:	4b4b      	ldr	r3, [pc, #300]	; (8002cd8 <MX_GPIO_Init+0x1cc>)
 8002bac:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002bb0:	f003 0302 	and.w	r3, r3, #2
 8002bb4:	60bb      	str	r3, [r7, #8]
 8002bb6:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002bb8:	4b47      	ldr	r3, [pc, #284]	; (8002cd8 <MX_GPIO_Init+0x1cc>)
 8002bba:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002bbe:	4a46      	ldr	r2, [pc, #280]	; (8002cd8 <MX_GPIO_Init+0x1cc>)
 8002bc0:	f043 0308 	orr.w	r3, r3, #8
 8002bc4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002bc8:	4b43      	ldr	r3, [pc, #268]	; (8002cd8 <MX_GPIO_Init+0x1cc>)
 8002bca:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002bce:	f003 0308 	and.w	r3, r3, #8
 8002bd2:	607b      	str	r3, [r7, #4]
 8002bd4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, RS_485_TX_EN_Pin|RS_485_RX_EN_Pin, GPIO_PIN_RESET);
 8002bd6:	2200      	movs	r2, #0
 8002bd8:	210c      	movs	r1, #12
 8002bda:	4840      	ldr	r0, [pc, #256]	; (8002cdc <MX_GPIO_Init+0x1d0>)
 8002bdc:	f004 fab2 	bl	8007144 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, TELE_CE_Pin|TELE_CS_Pin, GPIO_PIN_RESET);
 8002be0:	2200      	movs	r2, #0
 8002be2:	2103      	movs	r1, #3
 8002be4:	483e      	ldr	r0, [pc, #248]	; (8002ce0 <MX_GPIO_Init+0x1d4>)
 8002be6:	f004 faad 	bl	8007144 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8002bea:	2200      	movs	r2, #0
 8002bec:	2101      	movs	r1, #1
 8002bee:	483d      	ldr	r0, [pc, #244]	; (8002ce4 <MX_GPIO_Init+0x1d8>)
 8002bf0:	f004 faa8 	bl	8007144 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPS_RST_GPIO_Port, GPS_RST_Pin, GPIO_PIN_SET);
 8002bf4:	2201      	movs	r2, #1
 8002bf6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002bfa:	483b      	ldr	r0, [pc, #236]	; (8002ce8 <MX_GPIO_Init+0x1dc>)
 8002bfc:	f004 faa2 	bl	8007144 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : RS_485_TX_EN_Pin RS_485_RX_EN_Pin */
  GPIO_InitStruct.Pin = RS_485_TX_EN_Pin|RS_485_RX_EN_Pin;
 8002c00:	230c      	movs	r3, #12
 8002c02:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002c04:	2301      	movs	r3, #1
 8002c06:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c08:	2300      	movs	r3, #0
 8002c0a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002c0c:	2300      	movs	r3, #0
 8002c0e:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002c10:	f107 031c 	add.w	r3, r7, #28
 8002c14:	4619      	mov	r1, r3
 8002c16:	4831      	ldr	r0, [pc, #196]	; (8002cdc <MX_GPIO_Init+0x1d0>)
 8002c18:	f004 f8cc 	bl	8006db4 <HAL_GPIO_Init>

  /*Configure GPIO pins : TELE_CE_Pin TELE_CS_Pin */
  GPIO_InitStruct.Pin = TELE_CE_Pin|TELE_CS_Pin;
 8002c1c:	2303      	movs	r3, #3
 8002c1e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002c20:	2301      	movs	r3, #1
 8002c22:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c24:	2300      	movs	r3, #0
 8002c26:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002c28:	2300      	movs	r3, #0
 8002c2a:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002c2c:	f107 031c 	add.w	r3, r7, #28
 8002c30:	4619      	mov	r1, r3
 8002c32:	482b      	ldr	r0, [pc, #172]	; (8002ce0 <MX_GPIO_Init+0x1d4>)
 8002c34:	f004 f8be 	bl	8006db4 <HAL_GPIO_Init>

  /*Configure GPIO pin : TELE_IRQ_Pin */
  GPIO_InitStruct.Pin = TELE_IRQ_Pin;
 8002c38:	2304      	movs	r3, #4
 8002c3a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002c3c:	4b2b      	ldr	r3, [pc, #172]	; (8002cec <MX_GPIO_Init+0x1e0>)
 8002c3e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c40:	2300      	movs	r3, #0
 8002c42:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(TELE_IRQ_GPIO_Port, &GPIO_InitStruct);
 8002c44:	f107 031c 	add.w	r3, r7, #28
 8002c48:	4619      	mov	r1, r3
 8002c4a:	4825      	ldr	r0, [pc, #148]	; (8002ce0 <MX_GPIO_Init+0x1d4>)
 8002c4c:	f004 f8b2 	bl	8006db4 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 8002c50:	2301      	movs	r3, #1
 8002c52:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002c54:	2301      	movs	r3, #1
 8002c56:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c58:	2300      	movs	r3, #0
 8002c5a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002c5c:	2300      	movs	r3, #0
 8002c5e:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8002c60:	f107 031c 	add.w	r3, r7, #28
 8002c64:	4619      	mov	r1, r3
 8002c66:	481f      	ldr	r0, [pc, #124]	; (8002ce4 <MX_GPIO_Init+0x1d8>)
 8002c68:	f004 f8a4 	bl	8006db4 <HAL_GPIO_Init>

  /*Configure GPIO pin : BTN_INT_Pin */
  GPIO_InitStruct.Pin = BTN_INT_Pin;
 8002c6c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002c70:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002c72:	4b1e      	ldr	r3, [pc, #120]	; (8002cec <MX_GPIO_Init+0x1e0>)
 8002c74:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c76:	2300      	movs	r3, #0
 8002c78:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BTN_INT_GPIO_Port, &GPIO_InitStruct);
 8002c7a:	f107 031c 	add.w	r3, r7, #28
 8002c7e:	4619      	mov	r1, r3
 8002c80:	4816      	ldr	r0, [pc, #88]	; (8002cdc <MX_GPIO_Init+0x1d0>)
 8002c82:	f004 f897 	bl	8006db4 <HAL_GPIO_Init>

  /*Configure GPIO pin : GPS_RST_Pin */
  GPIO_InitStruct.Pin = GPS_RST_Pin;
 8002c86:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002c8a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002c8c:	2301      	movs	r3, #1
 8002c8e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c90:	2300      	movs	r3, #0
 8002c92:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002c94:	2300      	movs	r3, #0
 8002c96:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPS_RST_GPIO_Port, &GPIO_InitStruct);
 8002c98:	f107 031c 	add.w	r3, r7, #28
 8002c9c:	4619      	mov	r1, r3
 8002c9e:	4812      	ldr	r0, [pc, #72]	; (8002ce8 <MX_GPIO_Init+0x1dc>)
 8002ca0:	f004 f888 	bl	8006db4 <HAL_GPIO_Init>

  /*Configure GPIO pin : CARD_DET_Pin */
  GPIO_InitStruct.Pin = CARD_DET_Pin;
 8002ca4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002ca8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002caa:	2300      	movs	r3, #0
 8002cac:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002cae:	2300      	movs	r3, #0
 8002cb0:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(CARD_DET_GPIO_Port, &GPIO_InitStruct);
 8002cb2:	f107 031c 	add.w	r3, r7, #28
 8002cb6:	4619      	mov	r1, r3
 8002cb8:	4809      	ldr	r0, [pc, #36]	; (8002ce0 <MX_GPIO_Init+0x1d4>)
 8002cba:	f004 f87b 	bl	8006db4 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8002cbe:	2200      	movs	r2, #0
 8002cc0:	2100      	movs	r1, #0
 8002cc2:	2017      	movs	r0, #23
 8002cc4:	f000 fe2d 	bl	8003922 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8002cc8:	2017      	movs	r0, #23
 8002cca:	f000 fe44 	bl	8003956 <HAL_NVIC_EnableIRQ>

}
 8002cce:	bf00      	nop
 8002cd0:	3730      	adds	r7, #48	; 0x30
 8002cd2:	46bd      	mov	sp, r7
 8002cd4:	bd80      	pop	{r7, pc}
 8002cd6:	bf00      	nop
 8002cd8:	58024400 	.word	0x58024400
 8002cdc:	58021000 	.word	0x58021000
 8002ce0:	58020000 	.word	0x58020000
 8002ce4:	58020400 	.word	0x58020400
 8002ce8:	58020c00 	.word	0x58020c00
 8002cec:	11110000 	.word	0x11110000

08002cf0 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8002cf0:	b480      	push	{r7}
 8002cf2:	b083      	sub	sp, #12
 8002cf4:	af00      	add	r7, sp, #0
 8002cf6:	4603      	mov	r3, r0
 8002cf8:	80fb      	strh	r3, [r7, #6]

  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */

  end_flag = 0;
 8002cfa:	4b04      	ldr	r3, [pc, #16]	; (8002d0c <HAL_GPIO_EXTI_Callback+0x1c>)
 8002cfc:	2200      	movs	r2, #0
 8002cfe:	601a      	str	r2, [r3, #0]

}
 8002d00:	bf00      	nop
 8002d02:	370c      	adds	r7, #12
 8002d04:	46bd      	mov	sp, r7
 8002d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d0a:	4770      	bx	lr
 8002d0c:	24000008 	.word	0x24000008

08002d10 <HAL_PWR_PVDCallback>:
void HAL_PWR_PVDCallback (void)
{
 8002d10:	b480      	push	{r7}
 8002d12:	af00      	add	r7, sp, #0
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PWR_PVDCallback can be implemented in the user file
  */
	//HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_0);
	end_flag = 0;
 8002d14:	4b03      	ldr	r3, [pc, #12]	; (8002d24 <HAL_PWR_PVDCallback+0x14>)
 8002d16:	2200      	movs	r2, #0
 8002d18:	601a      	str	r2, [r3, #0]
}
 8002d1a:	bf00      	nop
 8002d1c:	46bd      	mov	sp, r7
 8002d1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d22:	4770      	bx	lr
 8002d24:	24000008 	.word	0x24000008

08002d28 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002d28:	b580      	push	{r7, lr}
 8002d2a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002d2c:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
  {
	  printf("Error Handler\n");
 8002d2e:	4802      	ldr	r0, [pc, #8]	; (8002d38 <Error_Handler+0x10>)
 8002d30:	f015 fd68 	bl	8018804 <puts>
 8002d34:	e7fb      	b.n	8002d2e <Error_Handler+0x6>
 8002d36:	bf00      	nop
 8002d38:	08019f20 	.word	0x08019f20

08002d3c <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 8002d3c:	b480      	push	{r7}
 8002d3e:	b083      	sub	sp, #12
 8002d40:	af00      	add	r7, sp, #0
 8002d42:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8002d44:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8002d48:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 8002d4c:	f003 0301 	and.w	r3, r3, #1
 8002d50:	2b00      	cmp	r3, #0
 8002d52:	d013      	beq.n	8002d7c <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8002d54:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8002d58:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 8002d5c:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8002d60:	2b00      	cmp	r3, #0
 8002d62:	d00b      	beq.n	8002d7c <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 8002d64:	e000      	b.n	8002d68 <ITM_SendChar+0x2c>
    {
      __NOP();
 8002d66:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 8002d68:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	2b00      	cmp	r3, #0
 8002d70:	d0f9      	beq.n	8002d66 <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 8002d72:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8002d76:	687a      	ldr	r2, [r7, #4]
 8002d78:	b2d2      	uxtb	r2, r2
 8002d7a:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 8002d7c:	687b      	ldr	r3, [r7, #4]
}
 8002d7e:	4618      	mov	r0, r3
 8002d80:	370c      	adds	r7, #12
 8002d82:	46bd      	mov	sp, r7
 8002d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d88:	4770      	bx	lr

08002d8a <_write>:

#include <myprintf.h>
#include "main.h"

int _write(int file, char *ptr, int len)
{
 8002d8a:	b580      	push	{r7, lr}
 8002d8c:	b086      	sub	sp, #24
 8002d8e:	af00      	add	r7, sp, #0
 8002d90:	60f8      	str	r0, [r7, #12]
 8002d92:	60b9      	str	r1, [r7, #8]
 8002d94:	607a      	str	r2, [r7, #4]
  int i=0;
 8002d96:	2300      	movs	r3, #0
 8002d98:	617b      	str	r3, [r7, #20]
  for(i=0 ; i<len ; i++)
 8002d9a:	2300      	movs	r3, #0
 8002d9c:	617b      	str	r3, [r7, #20]
 8002d9e:	e009      	b.n	8002db4 <_write+0x2a>
    ITM_SendChar((*ptr++));
 8002da0:	68bb      	ldr	r3, [r7, #8]
 8002da2:	1c5a      	adds	r2, r3, #1
 8002da4:	60ba      	str	r2, [r7, #8]
 8002da6:	781b      	ldrb	r3, [r3, #0]
 8002da8:	4618      	mov	r0, r3
 8002daa:	f7ff ffc7 	bl	8002d3c <ITM_SendChar>
  for(i=0 ; i<len ; i++)
 8002dae:	697b      	ldr	r3, [r7, #20]
 8002db0:	3301      	adds	r3, #1
 8002db2:	617b      	str	r3, [r7, #20]
 8002db4:	697a      	ldr	r2, [r7, #20]
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	429a      	cmp	r2, r3
 8002dba:	dbf1      	blt.n	8002da0 <_write+0x16>
  return len;
 8002dbc:	687b      	ldr	r3, [r7, #4]
}
 8002dbe:	4618      	mov	r0, r3
 8002dc0:	3718      	adds	r7, #24
 8002dc2:	46bd      	mov	sp, r7
 8002dc4:	bd80      	pop	{r7, pc}
	...

08002dc8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002dc8:	b580      	push	{r7, lr}
 8002dca:	b084      	sub	sp, #16
 8002dcc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */
  PWR_PVDTypeDef sConfigPVD = {0};
 8002dce:	f107 0308 	add.w	r3, r7, #8
 8002dd2:	2200      	movs	r2, #0
 8002dd4:	601a      	str	r2, [r3, #0]
 8002dd6:	605a      	str	r2, [r3, #4]

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002dd8:	4b13      	ldr	r3, [pc, #76]	; (8002e28 <HAL_MspInit+0x60>)
 8002dda:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8002dde:	4a12      	ldr	r2, [pc, #72]	; (8002e28 <HAL_MspInit+0x60>)
 8002de0:	f043 0302 	orr.w	r3, r3, #2
 8002de4:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8002de8:	4b0f      	ldr	r3, [pc, #60]	; (8002e28 <HAL_MspInit+0x60>)
 8002dea:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8002dee:	f003 0302 	and.w	r3, r3, #2
 8002df2:	607b      	str	r3, [r7, #4]
 8002df4:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* PVD_AVD_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PVD_AVD_IRQn, 0, 0);
 8002df6:	2200      	movs	r2, #0
 8002df8:	2100      	movs	r1, #0
 8002dfa:	2001      	movs	r0, #1
 8002dfc:	f000 fd91 	bl	8003922 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(PVD_AVD_IRQn);
 8002e00:	2001      	movs	r0, #1
 8002e02:	f000 fda8 	bl	8003956 <HAL_NVIC_EnableIRQ>

  /** PVD Configuration
  */
  sConfigPVD.PVDLevel = PWR_PVDLEVEL_6;
 8002e06:	23c0      	movs	r3, #192	; 0xc0
 8002e08:	60bb      	str	r3, [r7, #8]
  sConfigPVD.Mode = PWR_PVD_MODE_IT_RISING;
 8002e0a:	f04f 1301 	mov.w	r3, #65537	; 0x10001
 8002e0e:	60fb      	str	r3, [r7, #12]
  HAL_PWR_ConfigPVD(&sConfigPVD);
 8002e10:	f107 0308 	add.w	r3, r7, #8
 8002e14:	4618      	mov	r0, r3
 8002e16:	f005 fc1f 	bl	8008658 <HAL_PWR_ConfigPVD>
  /** Enable the PVD Output
  */
  HAL_PWR_EnablePVD();
 8002e1a:	f005 fc97 	bl	800874c <HAL_PWR_EnablePVD>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002e1e:	bf00      	nop
 8002e20:	3710      	adds	r7, #16
 8002e22:	46bd      	mov	sp, r7
 8002e24:	bd80      	pop	{r7, pc}
 8002e26:	bf00      	nop
 8002e28:	58024400 	.word	0x58024400

08002e2c <HAL_FDCAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hfdcan: FDCAN handle pointer
* @retval None
*/
void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* hfdcan)
{
 8002e2c:	b580      	push	{r7, lr}
 8002e2e:	b08c      	sub	sp, #48	; 0x30
 8002e30:	af00      	add	r7, sp, #0
 8002e32:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002e34:	f107 031c 	add.w	r3, r7, #28
 8002e38:	2200      	movs	r2, #0
 8002e3a:	601a      	str	r2, [r3, #0]
 8002e3c:	605a      	str	r2, [r3, #4]
 8002e3e:	609a      	str	r2, [r3, #8]
 8002e40:	60da      	str	r2, [r3, #12]
 8002e42:	611a      	str	r2, [r3, #16]
  if(hfdcan->Instance==FDCAN1)
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	4a48      	ldr	r2, [pc, #288]	; (8002f6c <HAL_FDCAN_MspInit+0x140>)
 8002e4a:	4293      	cmp	r3, r2
 8002e4c:	d14e      	bne.n	8002eec <HAL_FDCAN_MspInit+0xc0>
  {
  /* USER CODE BEGIN FDCAN1_MspInit 0 */

  /* USER CODE END FDCAN1_MspInit 0 */
    /* Peripheral clock enable */
    HAL_RCC_FDCAN_CLK_ENABLED++;
 8002e4e:	4b48      	ldr	r3, [pc, #288]	; (8002f70 <HAL_FDCAN_MspInit+0x144>)
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	3301      	adds	r3, #1
 8002e54:	4a46      	ldr	r2, [pc, #280]	; (8002f70 <HAL_FDCAN_MspInit+0x144>)
 8002e56:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_FDCAN_CLK_ENABLED==1){
 8002e58:	4b45      	ldr	r3, [pc, #276]	; (8002f70 <HAL_FDCAN_MspInit+0x144>)
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	2b01      	cmp	r3, #1
 8002e5e:	d10e      	bne.n	8002e7e <HAL_FDCAN_MspInit+0x52>
      __HAL_RCC_FDCAN_CLK_ENABLE();
 8002e60:	4b44      	ldr	r3, [pc, #272]	; (8002f74 <HAL_FDCAN_MspInit+0x148>)
 8002e62:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8002e66:	4a43      	ldr	r2, [pc, #268]	; (8002f74 <HAL_FDCAN_MspInit+0x148>)
 8002e68:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002e6c:	f8c2 30ec 	str.w	r3, [r2, #236]	; 0xec
 8002e70:	4b40      	ldr	r3, [pc, #256]	; (8002f74 <HAL_FDCAN_MspInit+0x148>)
 8002e72:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8002e76:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e7a:	61bb      	str	r3, [r7, #24]
 8002e7c:	69bb      	ldr	r3, [r7, #24]
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002e7e:	4b3d      	ldr	r3, [pc, #244]	; (8002f74 <HAL_FDCAN_MspInit+0x148>)
 8002e80:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002e84:	4a3b      	ldr	r2, [pc, #236]	; (8002f74 <HAL_FDCAN_MspInit+0x148>)
 8002e86:	f043 0302 	orr.w	r3, r3, #2
 8002e8a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002e8e:	4b39      	ldr	r3, [pc, #228]	; (8002f74 <HAL_FDCAN_MspInit+0x148>)
 8002e90:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002e94:	f003 0302 	and.w	r3, r3, #2
 8002e98:	617b      	str	r3, [r7, #20]
 8002e9a:	697b      	ldr	r3, [r7, #20]
    /**FDCAN1 GPIO Configuration
    PB8     ------> FDCAN1_RX
    PB9     ------> FDCAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8002e9c:	f44f 7340 	mov.w	r3, #768	; 0x300
 8002ea0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ea2:	2302      	movs	r3, #2
 8002ea4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ea6:	2300      	movs	r3, #0
 8002ea8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002eaa:	2303      	movs	r3, #3
 8002eac:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN1;
 8002eae:	2309      	movs	r3, #9
 8002eb0:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002eb2:	f107 031c 	add.w	r3, r7, #28
 8002eb6:	4619      	mov	r1, r3
 8002eb8:	482f      	ldr	r0, [pc, #188]	; (8002f78 <HAL_FDCAN_MspInit+0x14c>)
 8002eba:	f003 ff7b 	bl	8006db4 <HAL_GPIO_Init>

    HAL_I2CEx_EnableFastModePlus(SYSCFG_PMCR_I2C_PB8_FMP);
 8002ebe:	2040      	movs	r0, #64	; 0x40
 8002ec0:	f004 f98e 	bl	80071e0 <HAL_I2CEx_EnableFastModePlus>

    HAL_I2CEx_EnableFastModePlus(SYSCFG_PMCR_I2C_PB9_FMP);
 8002ec4:	2080      	movs	r0, #128	; 0x80
 8002ec6:	f004 f98b 	bl	80071e0 <HAL_I2CEx_EnableFastModePlus>

    /* FDCAN1 interrupt Init */
    HAL_NVIC_SetPriority(FDCAN1_IT0_IRQn, 0, 0);
 8002eca:	2200      	movs	r2, #0
 8002ecc:	2100      	movs	r1, #0
 8002ece:	2013      	movs	r0, #19
 8002ed0:	f000 fd27 	bl	8003922 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(FDCAN1_IT0_IRQn);
 8002ed4:	2013      	movs	r0, #19
 8002ed6:	f000 fd3e 	bl	8003956 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(FDCAN1_IT1_IRQn, 0, 0);
 8002eda:	2200      	movs	r2, #0
 8002edc:	2100      	movs	r1, #0
 8002ede:	2015      	movs	r0, #21
 8002ee0:	f000 fd1f 	bl	8003922 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(FDCAN1_IT1_IRQn);
 8002ee4:	2015      	movs	r0, #21
 8002ee6:	f000 fd36 	bl	8003956 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN FDCAN2_MspInit 1 */

  /* USER CODE END FDCAN2_MspInit 1 */
  }

}
 8002eea:	e03b      	b.n	8002f64 <HAL_FDCAN_MspInit+0x138>
  else if(hfdcan->Instance==FDCAN2)
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	4a22      	ldr	r2, [pc, #136]	; (8002f7c <HAL_FDCAN_MspInit+0x150>)
 8002ef2:	4293      	cmp	r3, r2
 8002ef4:	d136      	bne.n	8002f64 <HAL_FDCAN_MspInit+0x138>
    HAL_RCC_FDCAN_CLK_ENABLED++;
 8002ef6:	4b1e      	ldr	r3, [pc, #120]	; (8002f70 <HAL_FDCAN_MspInit+0x144>)
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	3301      	adds	r3, #1
 8002efc:	4a1c      	ldr	r2, [pc, #112]	; (8002f70 <HAL_FDCAN_MspInit+0x144>)
 8002efe:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_FDCAN_CLK_ENABLED==1){
 8002f00:	4b1b      	ldr	r3, [pc, #108]	; (8002f70 <HAL_FDCAN_MspInit+0x144>)
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	2b01      	cmp	r3, #1
 8002f06:	d10e      	bne.n	8002f26 <HAL_FDCAN_MspInit+0xfa>
      __HAL_RCC_FDCAN_CLK_ENABLE();
 8002f08:	4b1a      	ldr	r3, [pc, #104]	; (8002f74 <HAL_FDCAN_MspInit+0x148>)
 8002f0a:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8002f0e:	4a19      	ldr	r2, [pc, #100]	; (8002f74 <HAL_FDCAN_MspInit+0x148>)
 8002f10:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002f14:	f8c2 30ec 	str.w	r3, [r2, #236]	; 0xec
 8002f18:	4b16      	ldr	r3, [pc, #88]	; (8002f74 <HAL_FDCAN_MspInit+0x148>)
 8002f1a:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8002f1e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f22:	613b      	str	r3, [r7, #16]
 8002f24:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002f26:	4b13      	ldr	r3, [pc, #76]	; (8002f74 <HAL_FDCAN_MspInit+0x148>)
 8002f28:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002f2c:	4a11      	ldr	r2, [pc, #68]	; (8002f74 <HAL_FDCAN_MspInit+0x148>)
 8002f2e:	f043 0302 	orr.w	r3, r3, #2
 8002f32:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002f36:	4b0f      	ldr	r3, [pc, #60]	; (8002f74 <HAL_FDCAN_MspInit+0x148>)
 8002f38:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002f3c:	f003 0302 	and.w	r3, r3, #2
 8002f40:	60fb      	str	r3, [r7, #12]
 8002f42:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 8002f44:	2360      	movs	r3, #96	; 0x60
 8002f46:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002f48:	2302      	movs	r3, #2
 8002f4a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f4c:	2300      	movs	r3, #0
 8002f4e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002f50:	2300      	movs	r3, #0
 8002f52:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN2;
 8002f54:	2309      	movs	r3, #9
 8002f56:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002f58:	f107 031c 	add.w	r3, r7, #28
 8002f5c:	4619      	mov	r1, r3
 8002f5e:	4806      	ldr	r0, [pc, #24]	; (8002f78 <HAL_FDCAN_MspInit+0x14c>)
 8002f60:	f003 ff28 	bl	8006db4 <HAL_GPIO_Init>
}
 8002f64:	bf00      	nop
 8002f66:	3730      	adds	r7, #48	; 0x30
 8002f68:	46bd      	mov	sp, r7
 8002f6a:	bd80      	pop	{r7, pc}
 8002f6c:	4000a000 	.word	0x4000a000
 8002f70:	24000b3c 	.word	0x24000b3c
 8002f74:	58024400 	.word	0x58024400
 8002f78:	58020400 	.word	0x58020400
 8002f7c:	4000a400 	.word	0x4000a400

08002f80 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8002f80:	b480      	push	{r7}
 8002f82:	b083      	sub	sp, #12
 8002f84:	af00      	add	r7, sp, #0
 8002f86:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	4a07      	ldr	r2, [pc, #28]	; (8002fac <HAL_RTC_MspInit+0x2c>)
 8002f8e:	4293      	cmp	r3, r2
 8002f90:	d105      	bne.n	8002f9e <HAL_RTC_MspInit+0x1e>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8002f92:	4b07      	ldr	r3, [pc, #28]	; (8002fb0 <HAL_RTC_MspInit+0x30>)
 8002f94:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f96:	4a06      	ldr	r2, [pc, #24]	; (8002fb0 <HAL_RTC_MspInit+0x30>)
 8002f98:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002f9c:	6713      	str	r3, [r2, #112]	; 0x70
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8002f9e:	bf00      	nop
 8002fa0:	370c      	adds	r7, #12
 8002fa2:	46bd      	mov	sp, r7
 8002fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fa8:	4770      	bx	lr
 8002faa:	bf00      	nop
 8002fac:	58004000 	.word	0x58004000
 8002fb0:	58024400 	.word	0x58024400

08002fb4 <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 8002fb4:	b580      	push	{r7, lr}
 8002fb6:	b08a      	sub	sp, #40	; 0x28
 8002fb8:	af00      	add	r7, sp, #0
 8002fba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002fbc:	f107 0314 	add.w	r3, r7, #20
 8002fc0:	2200      	movs	r2, #0
 8002fc2:	601a      	str	r2, [r3, #0]
 8002fc4:	605a      	str	r2, [r3, #4]
 8002fc6:	609a      	str	r2, [r3, #8]
 8002fc8:	60da      	str	r2, [r3, #12]
 8002fca:	611a      	str	r2, [r3, #16]
  if(hsd->Instance==SDMMC1)
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	4a2e      	ldr	r2, [pc, #184]	; (800308c <HAL_SD_MspInit+0xd8>)
 8002fd2:	4293      	cmp	r3, r2
 8002fd4:	d155      	bne.n	8003082 <HAL_SD_MspInit+0xce>
  {
  /* USER CODE BEGIN SDMMC1_MspInit 0 */

  /* USER CODE END SDMMC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SDMMC1_CLK_ENABLE();
 8002fd6:	4b2e      	ldr	r3, [pc, #184]	; (8003090 <HAL_SD_MspInit+0xdc>)
 8002fd8:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8002fdc:	4a2c      	ldr	r2, [pc, #176]	; (8003090 <HAL_SD_MspInit+0xdc>)
 8002fde:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002fe2:	f8c2 30d4 	str.w	r3, [r2, #212]	; 0xd4
 8002fe6:	4b2a      	ldr	r3, [pc, #168]	; (8003090 <HAL_SD_MspInit+0xdc>)
 8002fe8:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8002fec:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002ff0:	613b      	str	r3, [r7, #16]
 8002ff2:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002ff4:	4b26      	ldr	r3, [pc, #152]	; (8003090 <HAL_SD_MspInit+0xdc>)
 8002ff6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002ffa:	4a25      	ldr	r2, [pc, #148]	; (8003090 <HAL_SD_MspInit+0xdc>)
 8002ffc:	f043 0304 	orr.w	r3, r3, #4
 8003000:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8003004:	4b22      	ldr	r3, [pc, #136]	; (8003090 <HAL_SD_MspInit+0xdc>)
 8003006:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800300a:	f003 0304 	and.w	r3, r3, #4
 800300e:	60fb      	str	r3, [r7, #12]
 8003010:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8003012:	4b1f      	ldr	r3, [pc, #124]	; (8003090 <HAL_SD_MspInit+0xdc>)
 8003014:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003018:	4a1d      	ldr	r2, [pc, #116]	; (8003090 <HAL_SD_MspInit+0xdc>)
 800301a:	f043 0308 	orr.w	r3, r3, #8
 800301e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8003022:	4b1b      	ldr	r3, [pc, #108]	; (8003090 <HAL_SD_MspInit+0xdc>)
 8003024:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003028:	f003 0308 	and.w	r3, r3, #8
 800302c:	60bb      	str	r3, [r7, #8]
 800302e:	68bb      	ldr	r3, [r7, #8]
    PC10     ------> SDMMC1_D2
    PC11     ------> SDMMC1_D3
    PC12     ------> SDMMC1_CK
    PD2     ------> SDMMC1_CMD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 8003030:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 8003034:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_12;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003036:	2302      	movs	r3, #2
 8003038:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800303a:	2300      	movs	r3, #0
 800303c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800303e:	2303      	movs	r3, #3
 8003040:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO1;
 8003042:	230c      	movs	r3, #12
 8003044:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003046:	f107 0314 	add.w	r3, r7, #20
 800304a:	4619      	mov	r1, r3
 800304c:	4811      	ldr	r0, [pc, #68]	; (8003094 <HAL_SD_MspInit+0xe0>)
 800304e:	f003 feb1 	bl	8006db4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8003052:	2304      	movs	r3, #4
 8003054:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003056:	2302      	movs	r3, #2
 8003058:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800305a:	2300      	movs	r3, #0
 800305c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800305e:	2303      	movs	r3, #3
 8003060:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO1;
 8003062:	230c      	movs	r3, #12
 8003064:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003066:	f107 0314 	add.w	r3, r7, #20
 800306a:	4619      	mov	r1, r3
 800306c:	480a      	ldr	r0, [pc, #40]	; (8003098 <HAL_SD_MspInit+0xe4>)
 800306e:	f003 fea1 	bl	8006db4 <HAL_GPIO_Init>

    /* SDMMC1 interrupt Init */
    HAL_NVIC_SetPriority(SDMMC1_IRQn, 0, 0);
 8003072:	2200      	movs	r2, #0
 8003074:	2100      	movs	r1, #0
 8003076:	2031      	movs	r0, #49	; 0x31
 8003078:	f000 fc53 	bl	8003922 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SDMMC1_IRQn);
 800307c:	2031      	movs	r0, #49	; 0x31
 800307e:	f000 fc6a 	bl	8003956 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SDMMC1_MspInit 1 */

  /* USER CODE END SDMMC1_MspInit 1 */
  }

}
 8003082:	bf00      	nop
 8003084:	3728      	adds	r7, #40	; 0x28
 8003086:	46bd      	mov	sp, r7
 8003088:	bd80      	pop	{r7, pc}
 800308a:	bf00      	nop
 800308c:	52007000 	.word	0x52007000
 8003090:	58024400 	.word	0x58024400
 8003094:	58020800 	.word	0x58020800
 8003098:	58020c00 	.word	0x58020c00

0800309c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800309c:	b580      	push	{r7, lr}
 800309e:	b08a      	sub	sp, #40	; 0x28
 80030a0:	af00      	add	r7, sp, #0
 80030a2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80030a4:	f107 0314 	add.w	r3, r7, #20
 80030a8:	2200      	movs	r2, #0
 80030aa:	601a      	str	r2, [r3, #0]
 80030ac:	605a      	str	r2, [r3, #4]
 80030ae:	609a      	str	r2, [r3, #8]
 80030b0:	60da      	str	r2, [r3, #12]
 80030b2:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	4a1a      	ldr	r2, [pc, #104]	; (8003124 <HAL_SPI_MspInit+0x88>)
 80030ba:	4293      	cmp	r3, r2
 80030bc:	d12d      	bne.n	800311a <HAL_SPI_MspInit+0x7e>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80030be:	4b1a      	ldr	r3, [pc, #104]	; (8003128 <HAL_SPI_MspInit+0x8c>)
 80030c0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80030c4:	4a18      	ldr	r2, [pc, #96]	; (8003128 <HAL_SPI_MspInit+0x8c>)
 80030c6:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80030ca:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 80030ce:	4b16      	ldr	r3, [pc, #88]	; (8003128 <HAL_SPI_MspInit+0x8c>)
 80030d0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80030d4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80030d8:	613b      	str	r3, [r7, #16]
 80030da:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80030dc:	4b12      	ldr	r3, [pc, #72]	; (8003128 <HAL_SPI_MspInit+0x8c>)
 80030de:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80030e2:	4a11      	ldr	r2, [pc, #68]	; (8003128 <HAL_SPI_MspInit+0x8c>)
 80030e4:	f043 0301 	orr.w	r3, r3, #1
 80030e8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80030ec:	4b0e      	ldr	r3, [pc, #56]	; (8003128 <HAL_SPI_MspInit+0x8c>)
 80030ee:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80030f2:	f003 0301 	and.w	r3, r3, #1
 80030f6:	60fb      	str	r3, [r7, #12]
 80030f8:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 80030fa:	23e0      	movs	r3, #224	; 0xe0
 80030fc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80030fe:	2302      	movs	r3, #2
 8003100:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003102:	2300      	movs	r3, #0
 8003104:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003106:	2303      	movs	r3, #3
 8003108:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800310a:	2305      	movs	r3, #5
 800310c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800310e:	f107 0314 	add.w	r3, r7, #20
 8003112:	4619      	mov	r1, r3
 8003114:	4805      	ldr	r0, [pc, #20]	; (800312c <HAL_SPI_MspInit+0x90>)
 8003116:	f003 fe4d 	bl	8006db4 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 800311a:	bf00      	nop
 800311c:	3728      	adds	r7, #40	; 0x28
 800311e:	46bd      	mov	sp, r7
 8003120:	bd80      	pop	{r7, pc}
 8003122:	bf00      	nop
 8003124:	40013000 	.word	0x40013000
 8003128:	58024400 	.word	0x58024400
 800312c:	58020000 	.word	0x58020000

08003130 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003130:	b580      	push	{r7, lr}
 8003132:	b08c      	sub	sp, #48	; 0x30
 8003134:	af00      	add	r7, sp, #0
 8003136:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003138:	f107 031c 	add.w	r3, r7, #28
 800313c:	2200      	movs	r2, #0
 800313e:	601a      	str	r2, [r3, #0]
 8003140:	605a      	str	r2, [r3, #4]
 8003142:	609a      	str	r2, [r3, #8]
 8003144:	60da      	str	r2, [r3, #12]
 8003146:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART8)
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	4a4b      	ldr	r2, [pc, #300]	; (800327c <HAL_UART_MspInit+0x14c>)
 800314e:	4293      	cmp	r3, r2
 8003150:	d12e      	bne.n	80031b0 <HAL_UART_MspInit+0x80>
  {
  /* USER CODE BEGIN UART8_MspInit 0 */

  /* USER CODE END UART8_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART8_CLK_ENABLE();
 8003152:	4b4b      	ldr	r3, [pc, #300]	; (8003280 <HAL_UART_MspInit+0x150>)
 8003154:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003158:	4a49      	ldr	r2, [pc, #292]	; (8003280 <HAL_UART_MspInit+0x150>)
 800315a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800315e:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8003162:	4b47      	ldr	r3, [pc, #284]	; (8003280 <HAL_UART_MspInit+0x150>)
 8003164:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003168:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800316c:	61bb      	str	r3, [r7, #24]
 800316e:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8003170:	4b43      	ldr	r3, [pc, #268]	; (8003280 <HAL_UART_MspInit+0x150>)
 8003172:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003176:	4a42      	ldr	r2, [pc, #264]	; (8003280 <HAL_UART_MspInit+0x150>)
 8003178:	f043 0310 	orr.w	r3, r3, #16
 800317c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8003180:	4b3f      	ldr	r3, [pc, #252]	; (8003280 <HAL_UART_MspInit+0x150>)
 8003182:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003186:	f003 0310 	and.w	r3, r3, #16
 800318a:	617b      	str	r3, [r7, #20]
 800318c:	697b      	ldr	r3, [r7, #20]
    /**UART8 GPIO Configuration
    PE0     ------> UART8_RX
    PE1     ------> UART8_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800318e:	2303      	movs	r3, #3
 8003190:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003192:	2302      	movs	r3, #2
 8003194:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003196:	2300      	movs	r3, #0
 8003198:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800319a:	2300      	movs	r3, #0
 800319c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_UART8;
 800319e:	2308      	movs	r3, #8
 80031a0:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80031a2:	f107 031c 	add.w	r3, r7, #28
 80031a6:	4619      	mov	r1, r3
 80031a8:	4836      	ldr	r0, [pc, #216]	; (8003284 <HAL_UART_MspInit+0x154>)
 80031aa:	f003 fe03 	bl	8006db4 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 80031ae:	e061      	b.n	8003274 <HAL_UART_MspInit+0x144>
  else if(huart->Instance==USART3)
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	4a34      	ldr	r2, [pc, #208]	; (8003288 <HAL_UART_MspInit+0x158>)
 80031b6:	4293      	cmp	r3, r2
 80031b8:	d15c      	bne.n	8003274 <HAL_UART_MspInit+0x144>
    __HAL_RCC_USART3_CLK_ENABLE();
 80031ba:	4b31      	ldr	r3, [pc, #196]	; (8003280 <HAL_UART_MspInit+0x150>)
 80031bc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80031c0:	4a2f      	ldr	r2, [pc, #188]	; (8003280 <HAL_UART_MspInit+0x150>)
 80031c2:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80031c6:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80031ca:	4b2d      	ldr	r3, [pc, #180]	; (8003280 <HAL_UART_MspInit+0x150>)
 80031cc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80031d0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80031d4:	613b      	str	r3, [r7, #16]
 80031d6:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80031d8:	4b29      	ldr	r3, [pc, #164]	; (8003280 <HAL_UART_MspInit+0x150>)
 80031da:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80031de:	4a28      	ldr	r2, [pc, #160]	; (8003280 <HAL_UART_MspInit+0x150>)
 80031e0:	f043 0308 	orr.w	r3, r3, #8
 80031e4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80031e8:	4b25      	ldr	r3, [pc, #148]	; (8003280 <HAL_UART_MspInit+0x150>)
 80031ea:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80031ee:	f003 0308 	and.w	r3, r3, #8
 80031f2:	60fb      	str	r3, [r7, #12]
 80031f4:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80031f6:	f44f 7340 	mov.w	r3, #768	; 0x300
 80031fa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80031fc:	2302      	movs	r3, #2
 80031fe:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003200:	2300      	movs	r3, #0
 8003202:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003204:	2300      	movs	r3, #0
 8003206:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8003208:	2307      	movs	r3, #7
 800320a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800320c:	f107 031c 	add.w	r3, r7, #28
 8003210:	4619      	mov	r1, r3
 8003212:	481e      	ldr	r0, [pc, #120]	; (800328c <HAL_UART_MspInit+0x15c>)
 8003214:	f003 fdce 	bl	8006db4 <HAL_GPIO_Init>
    hdma_usart3_rx.Instance = DMA1_Stream1;
 8003218:	4b1d      	ldr	r3, [pc, #116]	; (8003290 <HAL_UART_MspInit+0x160>)
 800321a:	4a1e      	ldr	r2, [pc, #120]	; (8003294 <HAL_UART_MspInit+0x164>)
 800321c:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Request = DMA_REQUEST_USART3_RX;
 800321e:	4b1c      	ldr	r3, [pc, #112]	; (8003290 <HAL_UART_MspInit+0x160>)
 8003220:	222d      	movs	r2, #45	; 0x2d
 8003222:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003224:	4b1a      	ldr	r3, [pc, #104]	; (8003290 <HAL_UART_MspInit+0x160>)
 8003226:	2200      	movs	r2, #0
 8003228:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800322a:	4b19      	ldr	r3, [pc, #100]	; (8003290 <HAL_UART_MspInit+0x160>)
 800322c:	2200      	movs	r2, #0
 800322e:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 8003230:	4b17      	ldr	r3, [pc, #92]	; (8003290 <HAL_UART_MspInit+0x160>)
 8003232:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003236:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003238:	4b15      	ldr	r3, [pc, #84]	; (8003290 <HAL_UART_MspInit+0x160>)
 800323a:	2200      	movs	r2, #0
 800323c:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800323e:	4b14      	ldr	r3, [pc, #80]	; (8003290 <HAL_UART_MspInit+0x160>)
 8003240:	2200      	movs	r2, #0
 8003242:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Mode = DMA_CIRCULAR;
 8003244:	4b12      	ldr	r3, [pc, #72]	; (8003290 <HAL_UART_MspInit+0x160>)
 8003246:	f44f 7280 	mov.w	r2, #256	; 0x100
 800324a:	61da      	str	r2, [r3, #28]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_LOW;
 800324c:	4b10      	ldr	r3, [pc, #64]	; (8003290 <HAL_UART_MspInit+0x160>)
 800324e:	2200      	movs	r2, #0
 8003250:	621a      	str	r2, [r3, #32]
    hdma_usart3_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003252:	4b0f      	ldr	r3, [pc, #60]	; (8003290 <HAL_UART_MspInit+0x160>)
 8003254:	2200      	movs	r2, #0
 8003256:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 8003258:	480d      	ldr	r0, [pc, #52]	; (8003290 <HAL_UART_MspInit+0x160>)
 800325a:	f000 fb97 	bl	800398c <HAL_DMA_Init>
 800325e:	4603      	mov	r3, r0
 8003260:	2b00      	cmp	r3, #0
 8003262:	d001      	beq.n	8003268 <HAL_UART_MspInit+0x138>
      Error_Handler();
 8003264:	f7ff fd60 	bl	8002d28 <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart3_rx);
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	4a09      	ldr	r2, [pc, #36]	; (8003290 <HAL_UART_MspInit+0x160>)
 800326c:	679a      	str	r2, [r3, #120]	; 0x78
 800326e:	4a08      	ldr	r2, [pc, #32]	; (8003290 <HAL_UART_MspInit+0x160>)
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	6393      	str	r3, [r2, #56]	; 0x38
}
 8003274:	bf00      	nop
 8003276:	3730      	adds	r7, #48	; 0x30
 8003278:	46bd      	mov	sp, r7
 800327a:	bd80      	pop	{r7, pc}
 800327c:	40007c00 	.word	0x40007c00
 8003280:	58024400 	.word	0x58024400
 8003284:	58021000 	.word	0x58021000
 8003288:	40004800 	.word	0x40004800
 800328c:	58020c00 	.word	0x58020c00
 8003290:	24001344 	.word	0x24001344
 8003294:	40020028 	.word	0x40020028

08003298 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003298:	b580      	push	{r7, lr}
 800329a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  HAL_RCC_NMI_IRQHandler();
 800329c:	f006 fa98 	bl	80097d0 <HAL_RCC_NMI_IRQHandler>
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80032a0:	e7fe      	b.n	80032a0 <NMI_Handler+0x8>

080032a2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80032a2:	b480      	push	{r7}
 80032a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80032a6:	e7fe      	b.n	80032a6 <HardFault_Handler+0x4>

080032a8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80032a8:	b480      	push	{r7}
 80032aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80032ac:	e7fe      	b.n	80032ac <MemManage_Handler+0x4>

080032ae <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80032ae:	b480      	push	{r7}
 80032b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80032b2:	e7fe      	b.n	80032b2 <BusFault_Handler+0x4>

080032b4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80032b4:	b480      	push	{r7}
 80032b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80032b8:	e7fe      	b.n	80032b8 <UsageFault_Handler+0x4>

080032ba <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80032ba:	b480      	push	{r7}
 80032bc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80032be:	bf00      	nop
 80032c0:	46bd      	mov	sp, r7
 80032c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032c6:	4770      	bx	lr

080032c8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80032c8:	b480      	push	{r7}
 80032ca:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80032cc:	bf00      	nop
 80032ce:	46bd      	mov	sp, r7
 80032d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032d4:	4770      	bx	lr

080032d6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80032d6:	b480      	push	{r7}
 80032d8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80032da:	bf00      	nop
 80032dc:	46bd      	mov	sp, r7
 80032de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032e2:	4770      	bx	lr

080032e4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80032e4:	b580      	push	{r7, lr}
 80032e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80032e8:	f000 f9f2 	bl	80036d0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80032ec:	bf00      	nop
 80032ee:	bd80      	pop	{r7, pc}

080032f0 <PVD_AVD_IRQHandler>:

/**
  * @brief This function handles PVD and AVD interrupts through EXTI line 16.
  */
void PVD_AVD_IRQHandler(void)
{
 80032f0:	b580      	push	{r7, lr}
 80032f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN PVD_AVD_IRQn 0 */

  /* USER CODE END PVD_AVD_IRQn 0 */
  HAL_PWREx_PVD_AVD_IRQHandler();
 80032f4:	f005 fa84 	bl	8008800 <HAL_PWREx_PVD_AVD_IRQHandler>
  /* USER CODE BEGIN PVD_AVD_IRQn 1 */

  /* USER CODE END PVD_AVD_IRQn 1 */
}
 80032f8:	bf00      	nop
 80032fa:	bd80      	pop	{r7, pc}

080032fc <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 80032fc:	b580      	push	{r7, lr}
 80032fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 8003300:	4802      	ldr	r0, [pc, #8]	; (800330c <DMA1_Stream1_IRQHandler+0x10>)
 8003302:	f001 f909 	bl	8004518 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 8003306:	bf00      	nop
 8003308:	bd80      	pop	{r7, pc}
 800330a:	bf00      	nop
 800330c:	24001344 	.word	0x24001344

08003310 <FDCAN1_IT0_IRQHandler>:

/**
  * @brief This function handles FDCAN1 interrupt 0.
  */
void FDCAN1_IT0_IRQHandler(void)
{
 8003310:	b580      	push	{r7, lr}
 8003312:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FDCAN1_IT0_IRQn 0 */

  /* USER CODE END FDCAN1_IT0_IRQn 0 */
  HAL_FDCAN_IRQHandler(&hfdcan1);
 8003314:	4802      	ldr	r0, [pc, #8]	; (8003320 <FDCAN1_IT0_IRQHandler+0x10>)
 8003316:	f003 f8bd 	bl	8006494 <HAL_FDCAN_IRQHandler>
  /* USER CODE BEGIN FDCAN1_IT0_IRQn 1 */

  /* USER CODE END FDCAN1_IT0_IRQn 1 */
}
 800331a:	bf00      	nop
 800331c:	bd80      	pop	{r7, pc}
 800331e:	bf00      	nop
 8003320:	240014ec 	.word	0x240014ec

08003324 <FDCAN1_IT1_IRQHandler>:

/**
  * @brief This function handles FDCAN1 interrupt 1.
  */
void FDCAN1_IT1_IRQHandler(void)
{
 8003324:	b580      	push	{r7, lr}
 8003326:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FDCAN1_IT1_IRQn 0 */

  /* USER CODE END FDCAN1_IT1_IRQn 0 */
  HAL_FDCAN_IRQHandler(&hfdcan1);
 8003328:	4802      	ldr	r0, [pc, #8]	; (8003334 <FDCAN1_IT1_IRQHandler+0x10>)
 800332a:	f003 f8b3 	bl	8006494 <HAL_FDCAN_IRQHandler>
  /* USER CODE BEGIN FDCAN1_IT1_IRQn 1 */

  /* USER CODE END FDCAN1_IT1_IRQn 1 */
}
 800332e:	bf00      	nop
 8003330:	bd80      	pop	{r7, pc}
 8003332:	bf00      	nop
 8003334:	240014ec 	.word	0x240014ec

08003338 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8003338:	b580      	push	{r7, lr}
 800333a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_9);
 800333c:	f44f 7000 	mov.w	r0, #512	; 0x200
 8003340:	f003 ff34 	bl	80071ac <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8003344:	bf00      	nop
 8003346:	bd80      	pop	{r7, pc}

08003348 <SDMMC1_IRQHandler>:

/**
  * @brief This function handles SDMMC1 global interrupt.
  */
void SDMMC1_IRQHandler(void)
{
 8003348:	b580      	push	{r7, lr}
 800334a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SDMMC1_IRQn 0 */

  /* USER CODE END SDMMC1_IRQn 0 */
  HAL_SD_IRQHandler(&hsd1);
 800334c:	4802      	ldr	r0, [pc, #8]	; (8003358 <SDMMC1_IRQHandler+0x10>)
 800334e:	f009 f9c1 	bl	800c6d4 <HAL_SD_IRQHandler>
  /* USER CODE BEGIN SDMMC1_IRQn 1 */

  /* USER CODE END SDMMC1_IRQn 1 */
}
 8003352:	bf00      	nop
 8003354:	bd80      	pop	{r7, pc}
 8003356:	bf00      	nop
 8003358:	24001448 	.word	0x24001448

0800335c <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 800335c:	b580      	push	{r7, lr}
 800335e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8003360:	4802      	ldr	r0, [pc, #8]	; (800336c <OTG_FS_IRQHandler+0x10>)
 8003362:	f004 f8b8 	bl	80074d6 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8003366:	bf00      	nop
 8003368:	bd80      	pop	{r7, pc}
 800336a:	bf00      	nop
 800336c:	2400207c 	.word	0x2400207c

08003370 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8003370:	b580      	push	{r7, lr}
 8003372:	b086      	sub	sp, #24
 8003374:	af00      	add	r7, sp, #0
 8003376:	60f8      	str	r0, [r7, #12]
 8003378:	60b9      	str	r1, [r7, #8]
 800337a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800337c:	2300      	movs	r3, #0
 800337e:	617b      	str	r3, [r7, #20]
 8003380:	e00a      	b.n	8003398 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8003382:	f3af 8000 	nop.w
 8003386:	4601      	mov	r1, r0
 8003388:	68bb      	ldr	r3, [r7, #8]
 800338a:	1c5a      	adds	r2, r3, #1
 800338c:	60ba      	str	r2, [r7, #8]
 800338e:	b2ca      	uxtb	r2, r1
 8003390:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003392:	697b      	ldr	r3, [r7, #20]
 8003394:	3301      	adds	r3, #1
 8003396:	617b      	str	r3, [r7, #20]
 8003398:	697a      	ldr	r2, [r7, #20]
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	429a      	cmp	r2, r3
 800339e:	dbf0      	blt.n	8003382 <_read+0x12>
	}

return len;
 80033a0:	687b      	ldr	r3, [r7, #4]
}
 80033a2:	4618      	mov	r0, r3
 80033a4:	3718      	adds	r7, #24
 80033a6:	46bd      	mov	sp, r7
 80033a8:	bd80      	pop	{r7, pc}

080033aa <_close>:
	}
	return len;
}

int _close(int file)
{
 80033aa:	b480      	push	{r7}
 80033ac:	b083      	sub	sp, #12
 80033ae:	af00      	add	r7, sp, #0
 80033b0:	6078      	str	r0, [r7, #4]
	return -1;
 80033b2:	f04f 33ff 	mov.w	r3, #4294967295
}
 80033b6:	4618      	mov	r0, r3
 80033b8:	370c      	adds	r7, #12
 80033ba:	46bd      	mov	sp, r7
 80033bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033c0:	4770      	bx	lr

080033c2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80033c2:	b480      	push	{r7}
 80033c4:	b083      	sub	sp, #12
 80033c6:	af00      	add	r7, sp, #0
 80033c8:	6078      	str	r0, [r7, #4]
 80033ca:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80033cc:	683b      	ldr	r3, [r7, #0]
 80033ce:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80033d2:	605a      	str	r2, [r3, #4]
	return 0;
 80033d4:	2300      	movs	r3, #0
}
 80033d6:	4618      	mov	r0, r3
 80033d8:	370c      	adds	r7, #12
 80033da:	46bd      	mov	sp, r7
 80033dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033e0:	4770      	bx	lr

080033e2 <_isatty>:

int _isatty(int file)
{
 80033e2:	b480      	push	{r7}
 80033e4:	b083      	sub	sp, #12
 80033e6:	af00      	add	r7, sp, #0
 80033e8:	6078      	str	r0, [r7, #4]
	return 1;
 80033ea:	2301      	movs	r3, #1
}
 80033ec:	4618      	mov	r0, r3
 80033ee:	370c      	adds	r7, #12
 80033f0:	46bd      	mov	sp, r7
 80033f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033f6:	4770      	bx	lr

080033f8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80033f8:	b480      	push	{r7}
 80033fa:	b085      	sub	sp, #20
 80033fc:	af00      	add	r7, sp, #0
 80033fe:	60f8      	str	r0, [r7, #12]
 8003400:	60b9      	str	r1, [r7, #8]
 8003402:	607a      	str	r2, [r7, #4]
	return 0;
 8003404:	2300      	movs	r3, #0
}
 8003406:	4618      	mov	r0, r3
 8003408:	3714      	adds	r7, #20
 800340a:	46bd      	mov	sp, r7
 800340c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003410:	4770      	bx	lr
	...

08003414 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003414:	b580      	push	{r7, lr}
 8003416:	b086      	sub	sp, #24
 8003418:	af00      	add	r7, sp, #0
 800341a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800341c:	4a14      	ldr	r2, [pc, #80]	; (8003470 <_sbrk+0x5c>)
 800341e:	4b15      	ldr	r3, [pc, #84]	; (8003474 <_sbrk+0x60>)
 8003420:	1ad3      	subs	r3, r2, r3
 8003422:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003424:	697b      	ldr	r3, [r7, #20]
 8003426:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003428:	4b13      	ldr	r3, [pc, #76]	; (8003478 <_sbrk+0x64>)
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	2b00      	cmp	r3, #0
 800342e:	d102      	bne.n	8003436 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003430:	4b11      	ldr	r3, [pc, #68]	; (8003478 <_sbrk+0x64>)
 8003432:	4a12      	ldr	r2, [pc, #72]	; (800347c <_sbrk+0x68>)
 8003434:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003436:	4b10      	ldr	r3, [pc, #64]	; (8003478 <_sbrk+0x64>)
 8003438:	681a      	ldr	r2, [r3, #0]
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	4413      	add	r3, r2
 800343e:	693a      	ldr	r2, [r7, #16]
 8003440:	429a      	cmp	r2, r3
 8003442:	d207      	bcs.n	8003454 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003444:	f015 f874 	bl	8018530 <__errno>
 8003448:	4602      	mov	r2, r0
 800344a:	230c      	movs	r3, #12
 800344c:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 800344e:	f04f 33ff 	mov.w	r3, #4294967295
 8003452:	e009      	b.n	8003468 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003454:	4b08      	ldr	r3, [pc, #32]	; (8003478 <_sbrk+0x64>)
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800345a:	4b07      	ldr	r3, [pc, #28]	; (8003478 <_sbrk+0x64>)
 800345c:	681a      	ldr	r2, [r3, #0]
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	4413      	add	r3, r2
 8003462:	4a05      	ldr	r2, [pc, #20]	; (8003478 <_sbrk+0x64>)
 8003464:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003466:	68fb      	ldr	r3, [r7, #12]
}
 8003468:	4618      	mov	r0, r3
 800346a:	3718      	adds	r7, #24
 800346c:	46bd      	mov	sp, r7
 800346e:	bd80      	pop	{r7, pc}
 8003470:	24080000 	.word	0x24080000
 8003474:	00000400 	.word	0x00000400
 8003478:	24000b40 	.word	0x24000b40
 800347c:	24002488 	.word	0x24002488

08003480 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8003480:	b480      	push	{r7}
 8003482:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8003484:	4b39      	ldr	r3, [pc, #228]	; (800356c <SystemInit+0xec>)
 8003486:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800348a:	4a38      	ldr	r2, [pc, #224]	; (800356c <SystemInit+0xec>)
 800348c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003490:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8003494:	4b36      	ldr	r3, [pc, #216]	; (8003570 <SystemInit+0xf0>)
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	f003 030f 	and.w	r3, r3, #15
 800349c:	2b06      	cmp	r3, #6
 800349e:	d807      	bhi.n	80034b0 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80034a0:	4b33      	ldr	r3, [pc, #204]	; (8003570 <SystemInit+0xf0>)
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	f023 030f 	bic.w	r3, r3, #15
 80034a8:	4a31      	ldr	r2, [pc, #196]	; (8003570 <SystemInit+0xf0>)
 80034aa:	f043 0307 	orr.w	r3, r3, #7
 80034ae:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 80034b0:	4b30      	ldr	r3, [pc, #192]	; (8003574 <SystemInit+0xf4>)
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	4a2f      	ldr	r2, [pc, #188]	; (8003574 <SystemInit+0xf4>)
 80034b6:	f043 0301 	orr.w	r3, r3, #1
 80034ba:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80034bc:	4b2d      	ldr	r3, [pc, #180]	; (8003574 <SystemInit+0xf4>)
 80034be:	2200      	movs	r2, #0
 80034c0:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 80034c2:	4b2c      	ldr	r3, [pc, #176]	; (8003574 <SystemInit+0xf4>)
 80034c4:	681a      	ldr	r2, [r3, #0]
 80034c6:	492b      	ldr	r1, [pc, #172]	; (8003574 <SystemInit+0xf4>)
 80034c8:	4b2b      	ldr	r3, [pc, #172]	; (8003578 <SystemInit+0xf8>)
 80034ca:	4013      	ands	r3, r2
 80034cc:	600b      	str	r3, [r1, #0]
  
   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80034ce:	4b28      	ldr	r3, [pc, #160]	; (8003570 <SystemInit+0xf0>)
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	f003 030f 	and.w	r3, r3, #15
 80034d6:	2b07      	cmp	r3, #7
 80034d8:	d907      	bls.n	80034ea <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80034da:	4b25      	ldr	r3, [pc, #148]	; (8003570 <SystemInit+0xf0>)
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	f023 030f 	bic.w	r3, r3, #15
 80034e2:	4a23      	ldr	r2, [pc, #140]	; (8003570 <SystemInit+0xf0>)
 80034e4:	f043 0307 	orr.w	r3, r3, #7
 80034e8:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 80034ea:	4b22      	ldr	r3, [pc, #136]	; (8003574 <SystemInit+0xf4>)
 80034ec:	2200      	movs	r2, #0
 80034ee:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 80034f0:	4b20      	ldr	r3, [pc, #128]	; (8003574 <SystemInit+0xf4>)
 80034f2:	2200      	movs	r2, #0
 80034f4:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 80034f6:	4b1f      	ldr	r3, [pc, #124]	; (8003574 <SystemInit+0xf4>)
 80034f8:	2200      	movs	r2, #0
 80034fa:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 80034fc:	4b1d      	ldr	r3, [pc, #116]	; (8003574 <SystemInit+0xf4>)
 80034fe:	4a1f      	ldr	r2, [pc, #124]	; (800357c <SystemInit+0xfc>)
 8003500:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8003502:	4b1c      	ldr	r3, [pc, #112]	; (8003574 <SystemInit+0xf4>)
 8003504:	4a1e      	ldr	r2, [pc, #120]	; (8003580 <SystemInit+0x100>)
 8003506:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8003508:	4b1a      	ldr	r3, [pc, #104]	; (8003574 <SystemInit+0xf4>)
 800350a:	4a1e      	ldr	r2, [pc, #120]	; (8003584 <SystemInit+0x104>)
 800350c:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 800350e:	4b19      	ldr	r3, [pc, #100]	; (8003574 <SystemInit+0xf4>)
 8003510:	2200      	movs	r2, #0
 8003512:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8003514:	4b17      	ldr	r3, [pc, #92]	; (8003574 <SystemInit+0xf4>)
 8003516:	4a1b      	ldr	r2, [pc, #108]	; (8003584 <SystemInit+0x104>)
 8003518:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 800351a:	4b16      	ldr	r3, [pc, #88]	; (8003574 <SystemInit+0xf4>)
 800351c:	2200      	movs	r2, #0
 800351e:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8003520:	4b14      	ldr	r3, [pc, #80]	; (8003574 <SystemInit+0xf4>)
 8003522:	4a18      	ldr	r2, [pc, #96]	; (8003584 <SystemInit+0x104>)
 8003524:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8003526:	4b13      	ldr	r3, [pc, #76]	; (8003574 <SystemInit+0xf4>)
 8003528:	2200      	movs	r2, #0
 800352a:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800352c:	4b11      	ldr	r3, [pc, #68]	; (8003574 <SystemInit+0xf4>)
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	4a10      	ldr	r2, [pc, #64]	; (8003574 <SystemInit+0xf4>)
 8003532:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003536:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8003538:	4b0e      	ldr	r3, [pc, #56]	; (8003574 <SystemInit+0xf4>)
 800353a:	2200      	movs	r2, #0
 800353c:	661a      	str	r2, [r3, #96]	; 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 800353e:	4b12      	ldr	r3, [pc, #72]	; (8003588 <SystemInit+0x108>)
 8003540:	681a      	ldr	r2, [r3, #0]
 8003542:	4b12      	ldr	r3, [pc, #72]	; (800358c <SystemInit+0x10c>)
 8003544:	4013      	ands	r3, r2
 8003546:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800354a:	d202      	bcs.n	8003552 <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 800354c:	4b10      	ldr	r3, [pc, #64]	; (8003590 <SystemInit+0x110>)
 800354e:	2201      	movs	r2, #1
 8003550:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8003552:	4b10      	ldr	r3, [pc, #64]	; (8003594 <SystemInit+0x114>)
 8003554:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8003558:	601a      	str	r2, [r3, #0]

  /* Configure the Vector Table location add offset address for cortex-M7 ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D1_AXISRAM_BASE  | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal AXI-RAM */
#else
  SCB->VTOR = FLASH_BANK1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800355a:	4b04      	ldr	r3, [pc, #16]	; (800356c <SystemInit+0xec>)
 800355c:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8003560:	609a      	str	r2, [r3, #8]
#endif

#endif /*DUAL_CORE && CORE_CM4*/

}
 8003562:	bf00      	nop
 8003564:	46bd      	mov	sp, r7
 8003566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800356a:	4770      	bx	lr
 800356c:	e000ed00 	.word	0xe000ed00
 8003570:	52002000 	.word	0x52002000
 8003574:	58024400 	.word	0x58024400
 8003578:	eaf6ed7f 	.word	0xeaf6ed7f
 800357c:	02020200 	.word	0x02020200
 8003580:	01ff0000 	.word	0x01ff0000
 8003584:	01010280 	.word	0x01010280
 8003588:	5c001000 	.word	0x5c001000
 800358c:	ffff0000 	.word	0xffff0000
 8003590:	51008108 	.word	0x51008108
 8003594:	52004000 	.word	0x52004000

08003598 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8003598:	f8df d034 	ldr.w	sp, [pc, #52]	; 80035d0 <LoopFillZerobss+0x10>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 800359c:	f7ff ff70 	bl	8003480 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80035a0:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80035a2:	e003      	b.n	80035ac <LoopCopyDataInit>

080035a4 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80035a4:	4b0b      	ldr	r3, [pc, #44]	; (80035d4 <LoopFillZerobss+0x14>)
  ldr  r3, [r3, r1]
 80035a6:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80035a8:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80035aa:	3104      	adds	r1, #4

080035ac <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80035ac:	480a      	ldr	r0, [pc, #40]	; (80035d8 <LoopFillZerobss+0x18>)
  ldr  r3, =_edata
 80035ae:	4b0b      	ldr	r3, [pc, #44]	; (80035dc <LoopFillZerobss+0x1c>)
  adds  r2, r0, r1
 80035b0:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80035b2:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80035b4:	d3f6      	bcc.n	80035a4 <CopyDataInit>
  ldr  r2, =_sbss
 80035b6:	4a0a      	ldr	r2, [pc, #40]	; (80035e0 <LoopFillZerobss+0x20>)
  b  LoopFillZerobss
 80035b8:	e002      	b.n	80035c0 <LoopFillZerobss>

080035ba <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80035ba:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80035bc:	f842 3b04 	str.w	r3, [r2], #4

080035c0 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80035c0:	4b08      	ldr	r3, [pc, #32]	; (80035e4 <LoopFillZerobss+0x24>)
  cmp  r2, r3
 80035c2:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80035c4:	d3f9      	bcc.n	80035ba <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80035c6:	f014 ffb9 	bl	801853c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80035ca:	f7fe fb41 	bl	8001c50 <main>
  bx  lr    
 80035ce:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80035d0:	24080000 	.word	0x24080000
  ldr  r3, =_sidata
 80035d4:	0801a1b4 	.word	0x0801a1b4
  ldr  r0, =_sdata
 80035d8:	24000000 	.word	0x24000000
  ldr  r3, =_edata
 80035dc:	240001d8 	.word	0x240001d8
  ldr  r2, =_sbss
 80035e0:	240001d8 	.word	0x240001d8
  ldr  r3, = _ebss
 80035e4:	24002488 	.word	0x24002488

080035e8 <ADC3_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80035e8:	e7fe      	b.n	80035e8 <ADC3_IRQHandler>
	...

080035ec <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80035ec:	b580      	push	{r7, lr}
 80035ee:	b082      	sub	sp, #8
 80035f0:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80035f2:	2003      	movs	r0, #3
 80035f4:	f000 f98a 	bl	800390c <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80035f8:	f005 ff1c 	bl	8009434 <HAL_RCC_GetSysClockFreq>
 80035fc:	4601      	mov	r1, r0
 80035fe:	4b15      	ldr	r3, [pc, #84]	; (8003654 <HAL_Init+0x68>)
 8003600:	699b      	ldr	r3, [r3, #24]
 8003602:	0a1b      	lsrs	r3, r3, #8
 8003604:	f003 030f 	and.w	r3, r3, #15
 8003608:	4a13      	ldr	r2, [pc, #76]	; (8003658 <HAL_Init+0x6c>)
 800360a:	5cd3      	ldrb	r3, [r2, r3]
 800360c:	f003 031f 	and.w	r3, r3, #31
 8003610:	fa21 f303 	lsr.w	r3, r1, r3
 8003614:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8003616:	4b0f      	ldr	r3, [pc, #60]	; (8003654 <HAL_Init+0x68>)
 8003618:	699b      	ldr	r3, [r3, #24]
 800361a:	f003 030f 	and.w	r3, r3, #15
 800361e:	4a0e      	ldr	r2, [pc, #56]	; (8003658 <HAL_Init+0x6c>)
 8003620:	5cd3      	ldrb	r3, [r2, r3]
 8003622:	f003 031f 	and.w	r3, r3, #31
 8003626:	687a      	ldr	r2, [r7, #4]
 8003628:	fa22 f303 	lsr.w	r3, r2, r3
 800362c:	4a0b      	ldr	r2, [pc, #44]	; (800365c <HAL_Init+0x70>)
 800362e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8003630:	4a0b      	ldr	r2, [pc, #44]	; (8003660 <HAL_Init+0x74>)
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8003636:	2000      	movs	r0, #0
 8003638:	f000 f814 	bl	8003664 <HAL_InitTick>
 800363c:	4603      	mov	r3, r0
 800363e:	2b00      	cmp	r3, #0
 8003640:	d001      	beq.n	8003646 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8003642:	2301      	movs	r3, #1
 8003644:	e002      	b.n	800364c <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8003646:	f7ff fbbf 	bl	8002dc8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800364a:	2300      	movs	r3, #0
}
 800364c:	4618      	mov	r0, r3
 800364e:	3708      	adds	r7, #8
 8003650:	46bd      	mov	sp, r7
 8003652:	bd80      	pop	{r7, pc}
 8003654:	58024400 	.word	0x58024400
 8003658:	0801a014 	.word	0x0801a014
 800365c:	24000010 	.word	0x24000010
 8003660:	2400000c 	.word	0x2400000c

08003664 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003664:	b580      	push	{r7, lr}
 8003666:	b082      	sub	sp, #8
 8003668:	af00      	add	r7, sp, #0
 800366a:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 800366c:	4b15      	ldr	r3, [pc, #84]	; (80036c4 <HAL_InitTick+0x60>)
 800366e:	781b      	ldrb	r3, [r3, #0]
 8003670:	2b00      	cmp	r3, #0
 8003672:	d101      	bne.n	8003678 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8003674:	2301      	movs	r3, #1
 8003676:	e021      	b.n	80036bc <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8003678:	4b13      	ldr	r3, [pc, #76]	; (80036c8 <HAL_InitTick+0x64>)
 800367a:	681a      	ldr	r2, [r3, #0]
 800367c:	4b11      	ldr	r3, [pc, #68]	; (80036c4 <HAL_InitTick+0x60>)
 800367e:	781b      	ldrb	r3, [r3, #0]
 8003680:	4619      	mov	r1, r3
 8003682:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003686:	fbb3 f3f1 	udiv	r3, r3, r1
 800368a:	fbb2 f3f3 	udiv	r3, r2, r3
 800368e:	4618      	mov	r0, r3
 8003690:	f000 f96f 	bl	8003972 <HAL_SYSTICK_Config>
 8003694:	4603      	mov	r3, r0
 8003696:	2b00      	cmp	r3, #0
 8003698:	d001      	beq.n	800369e <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 800369a:	2301      	movs	r3, #1
 800369c:	e00e      	b.n	80036bc <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	2b0f      	cmp	r3, #15
 80036a2:	d80a      	bhi.n	80036ba <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80036a4:	2200      	movs	r2, #0
 80036a6:	6879      	ldr	r1, [r7, #4]
 80036a8:	f04f 30ff 	mov.w	r0, #4294967295
 80036ac:	f000 f939 	bl	8003922 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80036b0:	4a06      	ldr	r2, [pc, #24]	; (80036cc <HAL_InitTick+0x68>)
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80036b6:	2300      	movs	r3, #0
 80036b8:	e000      	b.n	80036bc <HAL_InitTick+0x58>
    return HAL_ERROR;
 80036ba:	2301      	movs	r3, #1
}
 80036bc:	4618      	mov	r0, r3
 80036be:	3708      	adds	r7, #8
 80036c0:	46bd      	mov	sp, r7
 80036c2:	bd80      	pop	{r7, pc}
 80036c4:	24000018 	.word	0x24000018
 80036c8:	2400000c 	.word	0x2400000c
 80036cc:	24000014 	.word	0x24000014

080036d0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80036d0:	b480      	push	{r7}
 80036d2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80036d4:	4b06      	ldr	r3, [pc, #24]	; (80036f0 <HAL_IncTick+0x20>)
 80036d6:	781b      	ldrb	r3, [r3, #0]
 80036d8:	461a      	mov	r2, r3
 80036da:	4b06      	ldr	r3, [pc, #24]	; (80036f4 <HAL_IncTick+0x24>)
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	4413      	add	r3, r2
 80036e0:	4a04      	ldr	r2, [pc, #16]	; (80036f4 <HAL_IncTick+0x24>)
 80036e2:	6013      	str	r3, [r2, #0]
}
 80036e4:	bf00      	nop
 80036e6:	46bd      	mov	sp, r7
 80036e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036ec:	4770      	bx	lr
 80036ee:	bf00      	nop
 80036f0:	24000018 	.word	0x24000018
 80036f4:	24001740 	.word	0x24001740

080036f8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80036f8:	b480      	push	{r7}
 80036fa:	af00      	add	r7, sp, #0
  return uwTick;
 80036fc:	4b03      	ldr	r3, [pc, #12]	; (800370c <HAL_GetTick+0x14>)
 80036fe:	681b      	ldr	r3, [r3, #0]
}
 8003700:	4618      	mov	r0, r3
 8003702:	46bd      	mov	sp, r7
 8003704:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003708:	4770      	bx	lr
 800370a:	bf00      	nop
 800370c:	24001740 	.word	0x24001740

08003710 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003710:	b580      	push	{r7, lr}
 8003712:	b084      	sub	sp, #16
 8003714:	af00      	add	r7, sp, #0
 8003716:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003718:	f7ff ffee 	bl	80036f8 <HAL_GetTick>
 800371c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003722:	68fb      	ldr	r3, [r7, #12]
 8003724:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003728:	d005      	beq.n	8003736 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800372a:	4b09      	ldr	r3, [pc, #36]	; (8003750 <HAL_Delay+0x40>)
 800372c:	781b      	ldrb	r3, [r3, #0]
 800372e:	461a      	mov	r2, r3
 8003730:	68fb      	ldr	r3, [r7, #12]
 8003732:	4413      	add	r3, r2
 8003734:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8003736:	bf00      	nop
 8003738:	f7ff ffde 	bl	80036f8 <HAL_GetTick>
 800373c:	4602      	mov	r2, r0
 800373e:	68bb      	ldr	r3, [r7, #8]
 8003740:	1ad3      	subs	r3, r2, r3
 8003742:	68fa      	ldr	r2, [r7, #12]
 8003744:	429a      	cmp	r2, r3
 8003746:	d8f7      	bhi.n	8003738 <HAL_Delay+0x28>
  {
  }
}
 8003748:	bf00      	nop
 800374a:	3710      	adds	r7, #16
 800374c:	46bd      	mov	sp, r7
 800374e:	bd80      	pop	{r7, pc}
 8003750:	24000018 	.word	0x24000018

08003754 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8003754:	b480      	push	{r7}
 8003756:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8003758:	4b03      	ldr	r3, [pc, #12]	; (8003768 <HAL_GetREVID+0x14>)
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	0c1b      	lsrs	r3, r3, #16
}
 800375e:	4618      	mov	r0, r3
 8003760:	46bd      	mov	sp, r7
 8003762:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003766:	4770      	bx	lr
 8003768:	5c001000 	.word	0x5c001000

0800376c <__NVIC_SetPriorityGrouping>:
{
 800376c:	b480      	push	{r7}
 800376e:	b085      	sub	sp, #20
 8003770:	af00      	add	r7, sp, #0
 8003772:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	f003 0307 	and.w	r3, r3, #7
 800377a:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800377c:	4b0b      	ldr	r3, [pc, #44]	; (80037ac <__NVIC_SetPriorityGrouping+0x40>)
 800377e:	68db      	ldr	r3, [r3, #12]
 8003780:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003782:	68ba      	ldr	r2, [r7, #8]
 8003784:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003788:	4013      	ands	r3, r2
 800378a:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800378c:	68fb      	ldr	r3, [r7, #12]
 800378e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003790:	68bb      	ldr	r3, [r7, #8]
 8003792:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8003794:	4b06      	ldr	r3, [pc, #24]	; (80037b0 <__NVIC_SetPriorityGrouping+0x44>)
 8003796:	4313      	orrs	r3, r2
 8003798:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800379a:	4a04      	ldr	r2, [pc, #16]	; (80037ac <__NVIC_SetPriorityGrouping+0x40>)
 800379c:	68bb      	ldr	r3, [r7, #8]
 800379e:	60d3      	str	r3, [r2, #12]
}
 80037a0:	bf00      	nop
 80037a2:	3714      	adds	r7, #20
 80037a4:	46bd      	mov	sp, r7
 80037a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037aa:	4770      	bx	lr
 80037ac:	e000ed00 	.word	0xe000ed00
 80037b0:	05fa0000 	.word	0x05fa0000

080037b4 <__NVIC_GetPriorityGrouping>:
{
 80037b4:	b480      	push	{r7}
 80037b6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80037b8:	4b04      	ldr	r3, [pc, #16]	; (80037cc <__NVIC_GetPriorityGrouping+0x18>)
 80037ba:	68db      	ldr	r3, [r3, #12]
 80037bc:	0a1b      	lsrs	r3, r3, #8
 80037be:	f003 0307 	and.w	r3, r3, #7
}
 80037c2:	4618      	mov	r0, r3
 80037c4:	46bd      	mov	sp, r7
 80037c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037ca:	4770      	bx	lr
 80037cc:	e000ed00 	.word	0xe000ed00

080037d0 <__NVIC_EnableIRQ>:
{
 80037d0:	b480      	push	{r7}
 80037d2:	b083      	sub	sp, #12
 80037d4:	af00      	add	r7, sp, #0
 80037d6:	4603      	mov	r3, r0
 80037d8:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80037da:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80037de:	2b00      	cmp	r3, #0
 80037e0:	db0b      	blt.n	80037fa <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80037e2:	88fb      	ldrh	r3, [r7, #6]
 80037e4:	f003 021f 	and.w	r2, r3, #31
 80037e8:	4907      	ldr	r1, [pc, #28]	; (8003808 <__NVIC_EnableIRQ+0x38>)
 80037ea:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80037ee:	095b      	lsrs	r3, r3, #5
 80037f0:	2001      	movs	r0, #1
 80037f2:	fa00 f202 	lsl.w	r2, r0, r2
 80037f6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80037fa:	bf00      	nop
 80037fc:	370c      	adds	r7, #12
 80037fe:	46bd      	mov	sp, r7
 8003800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003804:	4770      	bx	lr
 8003806:	bf00      	nop
 8003808:	e000e100 	.word	0xe000e100

0800380c <__NVIC_SetPriority>:
{
 800380c:	b480      	push	{r7}
 800380e:	b083      	sub	sp, #12
 8003810:	af00      	add	r7, sp, #0
 8003812:	4603      	mov	r3, r0
 8003814:	6039      	str	r1, [r7, #0]
 8003816:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8003818:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800381c:	2b00      	cmp	r3, #0
 800381e:	db0a      	blt.n	8003836 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003820:	683b      	ldr	r3, [r7, #0]
 8003822:	b2da      	uxtb	r2, r3
 8003824:	490c      	ldr	r1, [pc, #48]	; (8003858 <__NVIC_SetPriority+0x4c>)
 8003826:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800382a:	0112      	lsls	r2, r2, #4
 800382c:	b2d2      	uxtb	r2, r2
 800382e:	440b      	add	r3, r1
 8003830:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8003834:	e00a      	b.n	800384c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003836:	683b      	ldr	r3, [r7, #0]
 8003838:	b2da      	uxtb	r2, r3
 800383a:	4908      	ldr	r1, [pc, #32]	; (800385c <__NVIC_SetPriority+0x50>)
 800383c:	88fb      	ldrh	r3, [r7, #6]
 800383e:	f003 030f 	and.w	r3, r3, #15
 8003842:	3b04      	subs	r3, #4
 8003844:	0112      	lsls	r2, r2, #4
 8003846:	b2d2      	uxtb	r2, r2
 8003848:	440b      	add	r3, r1
 800384a:	761a      	strb	r2, [r3, #24]
}
 800384c:	bf00      	nop
 800384e:	370c      	adds	r7, #12
 8003850:	46bd      	mov	sp, r7
 8003852:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003856:	4770      	bx	lr
 8003858:	e000e100 	.word	0xe000e100
 800385c:	e000ed00 	.word	0xe000ed00

08003860 <NVIC_EncodePriority>:
{
 8003860:	b480      	push	{r7}
 8003862:	b089      	sub	sp, #36	; 0x24
 8003864:	af00      	add	r7, sp, #0
 8003866:	60f8      	str	r0, [r7, #12]
 8003868:	60b9      	str	r1, [r7, #8]
 800386a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800386c:	68fb      	ldr	r3, [r7, #12]
 800386e:	f003 0307 	and.w	r3, r3, #7
 8003872:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003874:	69fb      	ldr	r3, [r7, #28]
 8003876:	f1c3 0307 	rsb	r3, r3, #7
 800387a:	2b04      	cmp	r3, #4
 800387c:	bf28      	it	cs
 800387e:	2304      	movcs	r3, #4
 8003880:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003882:	69fb      	ldr	r3, [r7, #28]
 8003884:	3304      	adds	r3, #4
 8003886:	2b06      	cmp	r3, #6
 8003888:	d902      	bls.n	8003890 <NVIC_EncodePriority+0x30>
 800388a:	69fb      	ldr	r3, [r7, #28]
 800388c:	3b03      	subs	r3, #3
 800388e:	e000      	b.n	8003892 <NVIC_EncodePriority+0x32>
 8003890:	2300      	movs	r3, #0
 8003892:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003894:	f04f 32ff 	mov.w	r2, #4294967295
 8003898:	69bb      	ldr	r3, [r7, #24]
 800389a:	fa02 f303 	lsl.w	r3, r2, r3
 800389e:	43da      	mvns	r2, r3
 80038a0:	68bb      	ldr	r3, [r7, #8]
 80038a2:	401a      	ands	r2, r3
 80038a4:	697b      	ldr	r3, [r7, #20]
 80038a6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80038a8:	f04f 31ff 	mov.w	r1, #4294967295
 80038ac:	697b      	ldr	r3, [r7, #20]
 80038ae:	fa01 f303 	lsl.w	r3, r1, r3
 80038b2:	43d9      	mvns	r1, r3
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80038b8:	4313      	orrs	r3, r2
}
 80038ba:	4618      	mov	r0, r3
 80038bc:	3724      	adds	r7, #36	; 0x24
 80038be:	46bd      	mov	sp, r7
 80038c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038c4:	4770      	bx	lr
	...

080038c8 <SysTick_Config>:
{
 80038c8:	b580      	push	{r7, lr}
 80038ca:	b082      	sub	sp, #8
 80038cc:	af00      	add	r7, sp, #0
 80038ce:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	3b01      	subs	r3, #1
 80038d4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80038d8:	d301      	bcc.n	80038de <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 80038da:	2301      	movs	r3, #1
 80038dc:	e00f      	b.n	80038fe <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80038de:	4a0a      	ldr	r2, [pc, #40]	; (8003908 <SysTick_Config+0x40>)
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	3b01      	subs	r3, #1
 80038e4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80038e6:	210f      	movs	r1, #15
 80038e8:	f04f 30ff 	mov.w	r0, #4294967295
 80038ec:	f7ff ff8e 	bl	800380c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80038f0:	4b05      	ldr	r3, [pc, #20]	; (8003908 <SysTick_Config+0x40>)
 80038f2:	2200      	movs	r2, #0
 80038f4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80038f6:	4b04      	ldr	r3, [pc, #16]	; (8003908 <SysTick_Config+0x40>)
 80038f8:	2207      	movs	r2, #7
 80038fa:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 80038fc:	2300      	movs	r3, #0
}
 80038fe:	4618      	mov	r0, r3
 8003900:	3708      	adds	r7, #8
 8003902:	46bd      	mov	sp, r7
 8003904:	bd80      	pop	{r7, pc}
 8003906:	bf00      	nop
 8003908:	e000e010 	.word	0xe000e010

0800390c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800390c:	b580      	push	{r7, lr}
 800390e:	b082      	sub	sp, #8
 8003910:	af00      	add	r7, sp, #0
 8003912:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003914:	6878      	ldr	r0, [r7, #4]
 8003916:	f7ff ff29 	bl	800376c <__NVIC_SetPriorityGrouping>
}
 800391a:	bf00      	nop
 800391c:	3708      	adds	r7, #8
 800391e:	46bd      	mov	sp, r7
 8003920:	bd80      	pop	{r7, pc}

08003922 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003922:	b580      	push	{r7, lr}
 8003924:	b086      	sub	sp, #24
 8003926:	af00      	add	r7, sp, #0
 8003928:	4603      	mov	r3, r0
 800392a:	60b9      	str	r1, [r7, #8]
 800392c:	607a      	str	r2, [r7, #4]
 800392e:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8003930:	f7ff ff40 	bl	80037b4 <__NVIC_GetPriorityGrouping>
 8003934:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003936:	687a      	ldr	r2, [r7, #4]
 8003938:	68b9      	ldr	r1, [r7, #8]
 800393a:	6978      	ldr	r0, [r7, #20]
 800393c:	f7ff ff90 	bl	8003860 <NVIC_EncodePriority>
 8003940:	4602      	mov	r2, r0
 8003942:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8003946:	4611      	mov	r1, r2
 8003948:	4618      	mov	r0, r3
 800394a:	f7ff ff5f 	bl	800380c <__NVIC_SetPriority>
}
 800394e:	bf00      	nop
 8003950:	3718      	adds	r7, #24
 8003952:	46bd      	mov	sp, r7
 8003954:	bd80      	pop	{r7, pc}

08003956 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003956:	b580      	push	{r7, lr}
 8003958:	b082      	sub	sp, #8
 800395a:	af00      	add	r7, sp, #0
 800395c:	4603      	mov	r3, r0
 800395e:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003960:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003964:	4618      	mov	r0, r3
 8003966:	f7ff ff33 	bl	80037d0 <__NVIC_EnableIRQ>
}
 800396a:	bf00      	nop
 800396c:	3708      	adds	r7, #8
 800396e:	46bd      	mov	sp, r7
 8003970:	bd80      	pop	{r7, pc}

08003972 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003972:	b580      	push	{r7, lr}
 8003974:	b082      	sub	sp, #8
 8003976:	af00      	add	r7, sp, #0
 8003978:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800397a:	6878      	ldr	r0, [r7, #4]
 800397c:	f7ff ffa4 	bl	80038c8 <SysTick_Config>
 8003980:	4603      	mov	r3, r0
}
 8003982:	4618      	mov	r0, r3
 8003984:	3708      	adds	r7, #8
 8003986:	46bd      	mov	sp, r7
 8003988:	bd80      	pop	{r7, pc}
	...

0800398c <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800398c:	b580      	push	{r7, lr}
 800398e:	b086      	sub	sp, #24
 8003990:	af00      	add	r7, sp, #0
 8003992:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 8003994:	f7ff feb0 	bl	80036f8 <HAL_GetTick>
 8003998:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	2b00      	cmp	r3, #0
 800399e:	d101      	bne.n	80039a4 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 80039a0:	2301      	movs	r3, #1
 80039a2:	e316      	b.n	8003fd2 <HAL_DMA_Init+0x646>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	4a66      	ldr	r2, [pc, #408]	; (8003b44 <HAL_DMA_Init+0x1b8>)
 80039aa:	4293      	cmp	r3, r2
 80039ac:	d04a      	beq.n	8003a44 <HAL_DMA_Init+0xb8>
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	4a65      	ldr	r2, [pc, #404]	; (8003b48 <HAL_DMA_Init+0x1bc>)
 80039b4:	4293      	cmp	r3, r2
 80039b6:	d045      	beq.n	8003a44 <HAL_DMA_Init+0xb8>
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	4a63      	ldr	r2, [pc, #396]	; (8003b4c <HAL_DMA_Init+0x1c0>)
 80039be:	4293      	cmp	r3, r2
 80039c0:	d040      	beq.n	8003a44 <HAL_DMA_Init+0xb8>
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	4a62      	ldr	r2, [pc, #392]	; (8003b50 <HAL_DMA_Init+0x1c4>)
 80039c8:	4293      	cmp	r3, r2
 80039ca:	d03b      	beq.n	8003a44 <HAL_DMA_Init+0xb8>
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	4a60      	ldr	r2, [pc, #384]	; (8003b54 <HAL_DMA_Init+0x1c8>)
 80039d2:	4293      	cmp	r3, r2
 80039d4:	d036      	beq.n	8003a44 <HAL_DMA_Init+0xb8>
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	4a5f      	ldr	r2, [pc, #380]	; (8003b58 <HAL_DMA_Init+0x1cc>)
 80039dc:	4293      	cmp	r3, r2
 80039de:	d031      	beq.n	8003a44 <HAL_DMA_Init+0xb8>
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	4a5d      	ldr	r2, [pc, #372]	; (8003b5c <HAL_DMA_Init+0x1d0>)
 80039e6:	4293      	cmp	r3, r2
 80039e8:	d02c      	beq.n	8003a44 <HAL_DMA_Init+0xb8>
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	4a5c      	ldr	r2, [pc, #368]	; (8003b60 <HAL_DMA_Init+0x1d4>)
 80039f0:	4293      	cmp	r3, r2
 80039f2:	d027      	beq.n	8003a44 <HAL_DMA_Init+0xb8>
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	4a5a      	ldr	r2, [pc, #360]	; (8003b64 <HAL_DMA_Init+0x1d8>)
 80039fa:	4293      	cmp	r3, r2
 80039fc:	d022      	beq.n	8003a44 <HAL_DMA_Init+0xb8>
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	4a59      	ldr	r2, [pc, #356]	; (8003b68 <HAL_DMA_Init+0x1dc>)
 8003a04:	4293      	cmp	r3, r2
 8003a06:	d01d      	beq.n	8003a44 <HAL_DMA_Init+0xb8>
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	4a57      	ldr	r2, [pc, #348]	; (8003b6c <HAL_DMA_Init+0x1e0>)
 8003a0e:	4293      	cmp	r3, r2
 8003a10:	d018      	beq.n	8003a44 <HAL_DMA_Init+0xb8>
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	4a56      	ldr	r2, [pc, #344]	; (8003b70 <HAL_DMA_Init+0x1e4>)
 8003a18:	4293      	cmp	r3, r2
 8003a1a:	d013      	beq.n	8003a44 <HAL_DMA_Init+0xb8>
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	4a54      	ldr	r2, [pc, #336]	; (8003b74 <HAL_DMA_Init+0x1e8>)
 8003a22:	4293      	cmp	r3, r2
 8003a24:	d00e      	beq.n	8003a44 <HAL_DMA_Init+0xb8>
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	4a53      	ldr	r2, [pc, #332]	; (8003b78 <HAL_DMA_Init+0x1ec>)
 8003a2c:	4293      	cmp	r3, r2
 8003a2e:	d009      	beq.n	8003a44 <HAL_DMA_Init+0xb8>
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	4a51      	ldr	r2, [pc, #324]	; (8003b7c <HAL_DMA_Init+0x1f0>)
 8003a36:	4293      	cmp	r3, r2
 8003a38:	d004      	beq.n	8003a44 <HAL_DMA_Init+0xb8>
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	4a50      	ldr	r2, [pc, #320]	; (8003b80 <HAL_DMA_Init+0x1f4>)
 8003a40:	4293      	cmp	r3, r2
 8003a42:	d101      	bne.n	8003a48 <HAL_DMA_Init+0xbc>
 8003a44:	2301      	movs	r3, #1
 8003a46:	e000      	b.n	8003a4a <HAL_DMA_Init+0xbe>
 8003a48:	2300      	movs	r3, #0
 8003a4a:	2b00      	cmp	r3, #0
 8003a4c:	f000 813b 	beq.w	8003cc6 <HAL_DMA_Init+0x33a>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	2200      	movs	r2, #0
 8003a54:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	2202      	movs	r2, #2
 8003a5c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	4a37      	ldr	r2, [pc, #220]	; (8003b44 <HAL_DMA_Init+0x1b8>)
 8003a66:	4293      	cmp	r3, r2
 8003a68:	d04a      	beq.n	8003b00 <HAL_DMA_Init+0x174>
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	4a36      	ldr	r2, [pc, #216]	; (8003b48 <HAL_DMA_Init+0x1bc>)
 8003a70:	4293      	cmp	r3, r2
 8003a72:	d045      	beq.n	8003b00 <HAL_DMA_Init+0x174>
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	4a34      	ldr	r2, [pc, #208]	; (8003b4c <HAL_DMA_Init+0x1c0>)
 8003a7a:	4293      	cmp	r3, r2
 8003a7c:	d040      	beq.n	8003b00 <HAL_DMA_Init+0x174>
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	4a33      	ldr	r2, [pc, #204]	; (8003b50 <HAL_DMA_Init+0x1c4>)
 8003a84:	4293      	cmp	r3, r2
 8003a86:	d03b      	beq.n	8003b00 <HAL_DMA_Init+0x174>
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	4a31      	ldr	r2, [pc, #196]	; (8003b54 <HAL_DMA_Init+0x1c8>)
 8003a8e:	4293      	cmp	r3, r2
 8003a90:	d036      	beq.n	8003b00 <HAL_DMA_Init+0x174>
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	4a30      	ldr	r2, [pc, #192]	; (8003b58 <HAL_DMA_Init+0x1cc>)
 8003a98:	4293      	cmp	r3, r2
 8003a9a:	d031      	beq.n	8003b00 <HAL_DMA_Init+0x174>
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	4a2e      	ldr	r2, [pc, #184]	; (8003b5c <HAL_DMA_Init+0x1d0>)
 8003aa2:	4293      	cmp	r3, r2
 8003aa4:	d02c      	beq.n	8003b00 <HAL_DMA_Init+0x174>
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	4a2d      	ldr	r2, [pc, #180]	; (8003b60 <HAL_DMA_Init+0x1d4>)
 8003aac:	4293      	cmp	r3, r2
 8003aae:	d027      	beq.n	8003b00 <HAL_DMA_Init+0x174>
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	4a2b      	ldr	r2, [pc, #172]	; (8003b64 <HAL_DMA_Init+0x1d8>)
 8003ab6:	4293      	cmp	r3, r2
 8003ab8:	d022      	beq.n	8003b00 <HAL_DMA_Init+0x174>
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	4a2a      	ldr	r2, [pc, #168]	; (8003b68 <HAL_DMA_Init+0x1dc>)
 8003ac0:	4293      	cmp	r3, r2
 8003ac2:	d01d      	beq.n	8003b00 <HAL_DMA_Init+0x174>
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	4a28      	ldr	r2, [pc, #160]	; (8003b6c <HAL_DMA_Init+0x1e0>)
 8003aca:	4293      	cmp	r3, r2
 8003acc:	d018      	beq.n	8003b00 <HAL_DMA_Init+0x174>
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	4a27      	ldr	r2, [pc, #156]	; (8003b70 <HAL_DMA_Init+0x1e4>)
 8003ad4:	4293      	cmp	r3, r2
 8003ad6:	d013      	beq.n	8003b00 <HAL_DMA_Init+0x174>
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	4a25      	ldr	r2, [pc, #148]	; (8003b74 <HAL_DMA_Init+0x1e8>)
 8003ade:	4293      	cmp	r3, r2
 8003ae0:	d00e      	beq.n	8003b00 <HAL_DMA_Init+0x174>
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	4a24      	ldr	r2, [pc, #144]	; (8003b78 <HAL_DMA_Init+0x1ec>)
 8003ae8:	4293      	cmp	r3, r2
 8003aea:	d009      	beq.n	8003b00 <HAL_DMA_Init+0x174>
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	4a22      	ldr	r2, [pc, #136]	; (8003b7c <HAL_DMA_Init+0x1f0>)
 8003af2:	4293      	cmp	r3, r2
 8003af4:	d004      	beq.n	8003b00 <HAL_DMA_Init+0x174>
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	4a21      	ldr	r2, [pc, #132]	; (8003b80 <HAL_DMA_Init+0x1f4>)
 8003afc:	4293      	cmp	r3, r2
 8003afe:	d108      	bne.n	8003b12 <HAL_DMA_Init+0x186>
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	681a      	ldr	r2, [r3, #0]
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	f022 0201 	bic.w	r2, r2, #1
 8003b0e:	601a      	str	r2, [r3, #0]
 8003b10:	e007      	b.n	8003b22 <HAL_DMA_Init+0x196>
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	681a      	ldr	r2, [r3, #0]
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	f022 0201 	bic.w	r2, r2, #1
 8003b20:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8003b22:	e02f      	b.n	8003b84 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003b24:	f7ff fde8 	bl	80036f8 <HAL_GetTick>
 8003b28:	4602      	mov	r2, r0
 8003b2a:	693b      	ldr	r3, [r7, #16]
 8003b2c:	1ad3      	subs	r3, r2, r3
 8003b2e:	2b05      	cmp	r3, #5
 8003b30:	d928      	bls.n	8003b84 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	2220      	movs	r2, #32
 8003b36:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	2203      	movs	r2, #3
 8003b3c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 8003b40:	2301      	movs	r3, #1
 8003b42:	e246      	b.n	8003fd2 <HAL_DMA_Init+0x646>
 8003b44:	40020010 	.word	0x40020010
 8003b48:	40020028 	.word	0x40020028
 8003b4c:	40020040 	.word	0x40020040
 8003b50:	40020058 	.word	0x40020058
 8003b54:	40020070 	.word	0x40020070
 8003b58:	40020088 	.word	0x40020088
 8003b5c:	400200a0 	.word	0x400200a0
 8003b60:	400200b8 	.word	0x400200b8
 8003b64:	40020410 	.word	0x40020410
 8003b68:	40020428 	.word	0x40020428
 8003b6c:	40020440 	.word	0x40020440
 8003b70:	40020458 	.word	0x40020458
 8003b74:	40020470 	.word	0x40020470
 8003b78:	40020488 	.word	0x40020488
 8003b7c:	400204a0 	.word	0x400204a0
 8003b80:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	f003 0301 	and.w	r3, r3, #1
 8003b8e:	2b00      	cmp	r3, #0
 8003b90:	d1c8      	bne.n	8003b24 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8003b9a:	697a      	ldr	r2, [r7, #20]
 8003b9c:	4b83      	ldr	r3, [pc, #524]	; (8003dac <HAL_DMA_Init+0x420>)
 8003b9e:	4013      	ands	r3, r2
 8003ba0:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 8003baa:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	691b      	ldr	r3, [r3, #16]
 8003bb0:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003bb6:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	699b      	ldr	r3, [r3, #24]
 8003bbc:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003bc2:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	6a1b      	ldr	r3, [r3, #32]
 8003bc8:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 8003bca:	697a      	ldr	r2, [r7, #20]
 8003bcc:	4313      	orrs	r3, r2
 8003bce:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bd4:	2b04      	cmp	r3, #4
 8003bd6:	d107      	bne.n	8003be8 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003be0:	4313      	orrs	r3, r2
 8003be2:	697a      	ldr	r2, [r7, #20]
 8003be4:	4313      	orrs	r3, r2
 8003be6:	617b      	str	r3, [r7, #20]
    }

    /* Work around for Errata 2.22: UART/USART- DMA transfer lock: DMA stream could be
                                    lock when transfering data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 8003be8:	4b71      	ldr	r3, [pc, #452]	; (8003db0 <HAL_DMA_Init+0x424>)
 8003bea:	681a      	ldr	r2, [r3, #0]
 8003bec:	4b71      	ldr	r3, [pc, #452]	; (8003db4 <HAL_DMA_Init+0x428>)
 8003bee:	4013      	ands	r3, r2
 8003bf0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003bf4:	d328      	bcc.n	8003c48 <HAL_DMA_Init+0x2bc>
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	685b      	ldr	r3, [r3, #4]
 8003bfa:	2b28      	cmp	r3, #40	; 0x28
 8003bfc:	d903      	bls.n	8003c06 <HAL_DMA_Init+0x27a>
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	685b      	ldr	r3, [r3, #4]
 8003c02:	2b2e      	cmp	r3, #46	; 0x2e
 8003c04:	d917      	bls.n	8003c36 <HAL_DMA_Init+0x2aa>
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	685b      	ldr	r3, [r3, #4]
 8003c0a:	2b3e      	cmp	r3, #62	; 0x3e
 8003c0c:	d903      	bls.n	8003c16 <HAL_DMA_Init+0x28a>
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	685b      	ldr	r3, [r3, #4]
 8003c12:	2b42      	cmp	r3, #66	; 0x42
 8003c14:	d90f      	bls.n	8003c36 <HAL_DMA_Init+0x2aa>
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	685b      	ldr	r3, [r3, #4]
 8003c1a:	2b46      	cmp	r3, #70	; 0x46
 8003c1c:	d903      	bls.n	8003c26 <HAL_DMA_Init+0x29a>
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	685b      	ldr	r3, [r3, #4]
 8003c22:	2b48      	cmp	r3, #72	; 0x48
 8003c24:	d907      	bls.n	8003c36 <HAL_DMA_Init+0x2aa>
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	685b      	ldr	r3, [r3, #4]
 8003c2a:	2b4e      	cmp	r3, #78	; 0x4e
 8003c2c:	d905      	bls.n	8003c3a <HAL_DMA_Init+0x2ae>
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	685b      	ldr	r3, [r3, #4]
 8003c32:	2b52      	cmp	r3, #82	; 0x52
 8003c34:	d801      	bhi.n	8003c3a <HAL_DMA_Init+0x2ae>
 8003c36:	2301      	movs	r3, #1
 8003c38:	e000      	b.n	8003c3c <HAL_DMA_Init+0x2b0>
 8003c3a:	2300      	movs	r3, #0
 8003c3c:	2b00      	cmp	r3, #0
 8003c3e:	d003      	beq.n	8003c48 <HAL_DMA_Init+0x2bc>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 8003c40:	697b      	ldr	r3, [r7, #20]
 8003c42:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003c46:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	697a      	ldr	r2, [r7, #20]
 8003c4e:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	695b      	ldr	r3, [r3, #20]
 8003c56:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8003c58:	697b      	ldr	r3, [r7, #20]
 8003c5a:	f023 0307 	bic.w	r3, r3, #7
 8003c5e:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c64:	697a      	ldr	r2, [r7, #20]
 8003c66:	4313      	orrs	r3, r2
 8003c68:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c6e:	2b04      	cmp	r3, #4
 8003c70:	d117      	bne.n	8003ca2 <HAL_DMA_Init+0x316>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c76:	697a      	ldr	r2, [r7, #20]
 8003c78:	4313      	orrs	r3, r2
 8003c7a:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c80:	2b00      	cmp	r3, #0
 8003c82:	d00e      	beq.n	8003ca2 <HAL_DMA_Init+0x316>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8003c84:	6878      	ldr	r0, [r7, #4]
 8003c86:	f001 fdcf 	bl	8005828 <DMA_CheckFifoParam>
 8003c8a:	4603      	mov	r3, r0
 8003c8c:	2b00      	cmp	r3, #0
 8003c8e:	d008      	beq.n	8003ca2 <HAL_DMA_Init+0x316>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	2240      	movs	r2, #64	; 0x40
 8003c94:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	2201      	movs	r2, #1
 8003c9a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          return HAL_ERROR;
 8003c9e:	2301      	movs	r3, #1
 8003ca0:	e197      	b.n	8003fd2 <HAL_DMA_Init+0x646>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	697a      	ldr	r2, [r7, #20]
 8003ca8:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003caa:	6878      	ldr	r0, [r7, #4]
 8003cac:	f001 fd0a 	bl	80056c4 <DMA_CalcBaseAndBitshift>
 8003cb0:	4603      	mov	r3, r0
 8003cb2:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003cb8:	f003 031f 	and.w	r3, r3, #31
 8003cbc:	223f      	movs	r2, #63	; 0x3f
 8003cbe:	409a      	lsls	r2, r3
 8003cc0:	68bb      	ldr	r3, [r7, #8]
 8003cc2:	609a      	str	r2, [r3, #8]
 8003cc4:	e0cd      	b.n	8003e62 <HAL_DMA_Init+0x4d6>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	4a3b      	ldr	r2, [pc, #236]	; (8003db8 <HAL_DMA_Init+0x42c>)
 8003ccc:	4293      	cmp	r3, r2
 8003cce:	d022      	beq.n	8003d16 <HAL_DMA_Init+0x38a>
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	4a39      	ldr	r2, [pc, #228]	; (8003dbc <HAL_DMA_Init+0x430>)
 8003cd6:	4293      	cmp	r3, r2
 8003cd8:	d01d      	beq.n	8003d16 <HAL_DMA_Init+0x38a>
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	4a38      	ldr	r2, [pc, #224]	; (8003dc0 <HAL_DMA_Init+0x434>)
 8003ce0:	4293      	cmp	r3, r2
 8003ce2:	d018      	beq.n	8003d16 <HAL_DMA_Init+0x38a>
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	4a36      	ldr	r2, [pc, #216]	; (8003dc4 <HAL_DMA_Init+0x438>)
 8003cea:	4293      	cmp	r3, r2
 8003cec:	d013      	beq.n	8003d16 <HAL_DMA_Init+0x38a>
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	4a35      	ldr	r2, [pc, #212]	; (8003dc8 <HAL_DMA_Init+0x43c>)
 8003cf4:	4293      	cmp	r3, r2
 8003cf6:	d00e      	beq.n	8003d16 <HAL_DMA_Init+0x38a>
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	4a33      	ldr	r2, [pc, #204]	; (8003dcc <HAL_DMA_Init+0x440>)
 8003cfe:	4293      	cmp	r3, r2
 8003d00:	d009      	beq.n	8003d16 <HAL_DMA_Init+0x38a>
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	4a32      	ldr	r2, [pc, #200]	; (8003dd0 <HAL_DMA_Init+0x444>)
 8003d08:	4293      	cmp	r3, r2
 8003d0a:	d004      	beq.n	8003d16 <HAL_DMA_Init+0x38a>
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	4a30      	ldr	r2, [pc, #192]	; (8003dd4 <HAL_DMA_Init+0x448>)
 8003d12:	4293      	cmp	r3, r2
 8003d14:	d101      	bne.n	8003d1a <HAL_DMA_Init+0x38e>
 8003d16:	2301      	movs	r3, #1
 8003d18:	e000      	b.n	8003d1c <HAL_DMA_Init+0x390>
 8003d1a:	2300      	movs	r3, #0
 8003d1c:	2b00      	cmp	r3, #0
 8003d1e:	f000 8097 	beq.w	8003e50 <HAL_DMA_Init+0x4c4>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	4a24      	ldr	r2, [pc, #144]	; (8003db8 <HAL_DMA_Init+0x42c>)
 8003d28:	4293      	cmp	r3, r2
 8003d2a:	d021      	beq.n	8003d70 <HAL_DMA_Init+0x3e4>
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	4a22      	ldr	r2, [pc, #136]	; (8003dbc <HAL_DMA_Init+0x430>)
 8003d32:	4293      	cmp	r3, r2
 8003d34:	d01c      	beq.n	8003d70 <HAL_DMA_Init+0x3e4>
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	4a21      	ldr	r2, [pc, #132]	; (8003dc0 <HAL_DMA_Init+0x434>)
 8003d3c:	4293      	cmp	r3, r2
 8003d3e:	d017      	beq.n	8003d70 <HAL_DMA_Init+0x3e4>
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	4a1f      	ldr	r2, [pc, #124]	; (8003dc4 <HAL_DMA_Init+0x438>)
 8003d46:	4293      	cmp	r3, r2
 8003d48:	d012      	beq.n	8003d70 <HAL_DMA_Init+0x3e4>
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	4a1e      	ldr	r2, [pc, #120]	; (8003dc8 <HAL_DMA_Init+0x43c>)
 8003d50:	4293      	cmp	r3, r2
 8003d52:	d00d      	beq.n	8003d70 <HAL_DMA_Init+0x3e4>
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	4a1c      	ldr	r2, [pc, #112]	; (8003dcc <HAL_DMA_Init+0x440>)
 8003d5a:	4293      	cmp	r3, r2
 8003d5c:	d008      	beq.n	8003d70 <HAL_DMA_Init+0x3e4>
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	4a1b      	ldr	r2, [pc, #108]	; (8003dd0 <HAL_DMA_Init+0x444>)
 8003d64:	4293      	cmp	r3, r2
 8003d66:	d003      	beq.n	8003d70 <HAL_DMA_Init+0x3e4>
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	4a19      	ldr	r2, [pc, #100]	; (8003dd4 <HAL_DMA_Init+0x448>)
 8003d6e:	4293      	cmp	r3, r2
 8003d70:	bf00      	nop
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	2200      	movs	r2, #0
 8003d76:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	2202      	movs	r2, #2
 8003d7e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 8003d8a:	697a      	ldr	r2, [r7, #20]
 8003d8c:	4b12      	ldr	r3, [pc, #72]	; (8003dd8 <HAL_DMA_Init+0x44c>)
 8003d8e:	4013      	ands	r3, r2
 8003d90:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	689b      	ldr	r3, [r3, #8]
 8003d96:	2b40      	cmp	r3, #64	; 0x40
 8003d98:	d020      	beq.n	8003ddc <HAL_DMA_Init+0x450>
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	689b      	ldr	r3, [r3, #8]
 8003d9e:	2b80      	cmp	r3, #128	; 0x80
 8003da0:	d102      	bne.n	8003da8 <HAL_DMA_Init+0x41c>
 8003da2:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8003da6:	e01a      	b.n	8003dde <HAL_DMA_Init+0x452>
 8003da8:	2300      	movs	r3, #0
 8003daa:	e018      	b.n	8003dde <HAL_DMA_Init+0x452>
 8003dac:	fe10803f 	.word	0xfe10803f
 8003db0:	5c001000 	.word	0x5c001000
 8003db4:	ffff0000 	.word	0xffff0000
 8003db8:	58025408 	.word	0x58025408
 8003dbc:	5802541c 	.word	0x5802541c
 8003dc0:	58025430 	.word	0x58025430
 8003dc4:	58025444 	.word	0x58025444
 8003dc8:	58025458 	.word	0x58025458
 8003dcc:	5802546c 	.word	0x5802546c
 8003dd0:	58025480 	.word	0x58025480
 8003dd4:	58025494 	.word	0x58025494
 8003dd8:	fffe000f 	.word	0xfffe000f
 8003ddc:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8003dde:	687a      	ldr	r2, [r7, #4]
 8003de0:	68d2      	ldr	r2, [r2, #12]
 8003de2:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8003de4:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	691b      	ldr	r3, [r3, #16]
 8003dea:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8003dec:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	695b      	ldr	r3, [r3, #20]
 8003df2:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8003df4:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	699b      	ldr	r3, [r3, #24]
 8003dfa:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8003dfc:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	69db      	ldr	r3, [r3, #28]
 8003e02:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8003e04:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	6a1b      	ldr	r3, [r3, #32]
 8003e0a:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8003e0c:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8003e0e:	697a      	ldr	r2, [r7, #20]
 8003e10:	4313      	orrs	r3, r2
 8003e12:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	697a      	ldr	r2, [r7, #20]
 8003e1a:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	461a      	mov	r2, r3
 8003e22:	4b6e      	ldr	r3, [pc, #440]	; (8003fdc <HAL_DMA_Init+0x650>)
 8003e24:	4413      	add	r3, r2
 8003e26:	4a6e      	ldr	r2, [pc, #440]	; (8003fe0 <HAL_DMA_Init+0x654>)
 8003e28:	fba2 2303 	umull	r2, r3, r2, r3
 8003e2c:	091b      	lsrs	r3, r3, #4
 8003e2e:	009a      	lsls	r2, r3, #2
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003e34:	6878      	ldr	r0, [r7, #4]
 8003e36:	f001 fc45 	bl	80056c4 <DMA_CalcBaseAndBitshift>
 8003e3a:	4603      	mov	r3, r0
 8003e3c:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003e42:	f003 031f 	and.w	r3, r3, #31
 8003e46:	2201      	movs	r2, #1
 8003e48:	409a      	lsls	r2, r3
 8003e4a:	68fb      	ldr	r3, [r7, #12]
 8003e4c:	605a      	str	r2, [r3, #4]
 8003e4e:	e008      	b.n	8003e62 <HAL_DMA_Init+0x4d6>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	2240      	movs	r2, #64	; 0x40
 8003e54:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	2203      	movs	r2, #3
 8003e5a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    return HAL_ERROR;
 8003e5e:	2301      	movs	r3, #1
 8003e60:	e0b7      	b.n	8003fd2 <HAL_DMA_Init+0x646>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	4a5f      	ldr	r2, [pc, #380]	; (8003fe4 <HAL_DMA_Init+0x658>)
 8003e68:	4293      	cmp	r3, r2
 8003e6a:	d072      	beq.n	8003f52 <HAL_DMA_Init+0x5c6>
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	4a5d      	ldr	r2, [pc, #372]	; (8003fe8 <HAL_DMA_Init+0x65c>)
 8003e72:	4293      	cmp	r3, r2
 8003e74:	d06d      	beq.n	8003f52 <HAL_DMA_Init+0x5c6>
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	4a5c      	ldr	r2, [pc, #368]	; (8003fec <HAL_DMA_Init+0x660>)
 8003e7c:	4293      	cmp	r3, r2
 8003e7e:	d068      	beq.n	8003f52 <HAL_DMA_Init+0x5c6>
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	4a5a      	ldr	r2, [pc, #360]	; (8003ff0 <HAL_DMA_Init+0x664>)
 8003e86:	4293      	cmp	r3, r2
 8003e88:	d063      	beq.n	8003f52 <HAL_DMA_Init+0x5c6>
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	4a59      	ldr	r2, [pc, #356]	; (8003ff4 <HAL_DMA_Init+0x668>)
 8003e90:	4293      	cmp	r3, r2
 8003e92:	d05e      	beq.n	8003f52 <HAL_DMA_Init+0x5c6>
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	4a57      	ldr	r2, [pc, #348]	; (8003ff8 <HAL_DMA_Init+0x66c>)
 8003e9a:	4293      	cmp	r3, r2
 8003e9c:	d059      	beq.n	8003f52 <HAL_DMA_Init+0x5c6>
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	4a56      	ldr	r2, [pc, #344]	; (8003ffc <HAL_DMA_Init+0x670>)
 8003ea4:	4293      	cmp	r3, r2
 8003ea6:	d054      	beq.n	8003f52 <HAL_DMA_Init+0x5c6>
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	4a54      	ldr	r2, [pc, #336]	; (8004000 <HAL_DMA_Init+0x674>)
 8003eae:	4293      	cmp	r3, r2
 8003eb0:	d04f      	beq.n	8003f52 <HAL_DMA_Init+0x5c6>
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	4a53      	ldr	r2, [pc, #332]	; (8004004 <HAL_DMA_Init+0x678>)
 8003eb8:	4293      	cmp	r3, r2
 8003eba:	d04a      	beq.n	8003f52 <HAL_DMA_Init+0x5c6>
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	4a51      	ldr	r2, [pc, #324]	; (8004008 <HAL_DMA_Init+0x67c>)
 8003ec2:	4293      	cmp	r3, r2
 8003ec4:	d045      	beq.n	8003f52 <HAL_DMA_Init+0x5c6>
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	4a50      	ldr	r2, [pc, #320]	; (800400c <HAL_DMA_Init+0x680>)
 8003ecc:	4293      	cmp	r3, r2
 8003ece:	d040      	beq.n	8003f52 <HAL_DMA_Init+0x5c6>
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	4a4e      	ldr	r2, [pc, #312]	; (8004010 <HAL_DMA_Init+0x684>)
 8003ed6:	4293      	cmp	r3, r2
 8003ed8:	d03b      	beq.n	8003f52 <HAL_DMA_Init+0x5c6>
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	4a4d      	ldr	r2, [pc, #308]	; (8004014 <HAL_DMA_Init+0x688>)
 8003ee0:	4293      	cmp	r3, r2
 8003ee2:	d036      	beq.n	8003f52 <HAL_DMA_Init+0x5c6>
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	4a4b      	ldr	r2, [pc, #300]	; (8004018 <HAL_DMA_Init+0x68c>)
 8003eea:	4293      	cmp	r3, r2
 8003eec:	d031      	beq.n	8003f52 <HAL_DMA_Init+0x5c6>
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	4a4a      	ldr	r2, [pc, #296]	; (800401c <HAL_DMA_Init+0x690>)
 8003ef4:	4293      	cmp	r3, r2
 8003ef6:	d02c      	beq.n	8003f52 <HAL_DMA_Init+0x5c6>
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	4a48      	ldr	r2, [pc, #288]	; (8004020 <HAL_DMA_Init+0x694>)
 8003efe:	4293      	cmp	r3, r2
 8003f00:	d027      	beq.n	8003f52 <HAL_DMA_Init+0x5c6>
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	4a47      	ldr	r2, [pc, #284]	; (8004024 <HAL_DMA_Init+0x698>)
 8003f08:	4293      	cmp	r3, r2
 8003f0a:	d022      	beq.n	8003f52 <HAL_DMA_Init+0x5c6>
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	4a45      	ldr	r2, [pc, #276]	; (8004028 <HAL_DMA_Init+0x69c>)
 8003f12:	4293      	cmp	r3, r2
 8003f14:	d01d      	beq.n	8003f52 <HAL_DMA_Init+0x5c6>
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	4a44      	ldr	r2, [pc, #272]	; (800402c <HAL_DMA_Init+0x6a0>)
 8003f1c:	4293      	cmp	r3, r2
 8003f1e:	d018      	beq.n	8003f52 <HAL_DMA_Init+0x5c6>
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	4a42      	ldr	r2, [pc, #264]	; (8004030 <HAL_DMA_Init+0x6a4>)
 8003f26:	4293      	cmp	r3, r2
 8003f28:	d013      	beq.n	8003f52 <HAL_DMA_Init+0x5c6>
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	4a41      	ldr	r2, [pc, #260]	; (8004034 <HAL_DMA_Init+0x6a8>)
 8003f30:	4293      	cmp	r3, r2
 8003f32:	d00e      	beq.n	8003f52 <HAL_DMA_Init+0x5c6>
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	4a3f      	ldr	r2, [pc, #252]	; (8004038 <HAL_DMA_Init+0x6ac>)
 8003f3a:	4293      	cmp	r3, r2
 8003f3c:	d009      	beq.n	8003f52 <HAL_DMA_Init+0x5c6>
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	4a3e      	ldr	r2, [pc, #248]	; (800403c <HAL_DMA_Init+0x6b0>)
 8003f44:	4293      	cmp	r3, r2
 8003f46:	d004      	beq.n	8003f52 <HAL_DMA_Init+0x5c6>
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	4a3c      	ldr	r2, [pc, #240]	; (8004040 <HAL_DMA_Init+0x6b4>)
 8003f4e:	4293      	cmp	r3, r2
 8003f50:	d101      	bne.n	8003f56 <HAL_DMA_Init+0x5ca>
 8003f52:	2301      	movs	r3, #1
 8003f54:	e000      	b.n	8003f58 <HAL_DMA_Init+0x5cc>
 8003f56:	2300      	movs	r3, #0
 8003f58:	2b00      	cmp	r3, #0
 8003f5a:	d032      	beq.n	8003fc2 <HAL_DMA_Init+0x636>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8003f5c:	6878      	ldr	r0, [r7, #4]
 8003f5e:	f001 fcdf 	bl	8005920 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	689b      	ldr	r3, [r3, #8]
 8003f66:	2b80      	cmp	r3, #128	; 0x80
 8003f68:	d102      	bne.n	8003f70 <HAL_DMA_Init+0x5e4>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	2200      	movs	r2, #0
 8003f6e:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	685a      	ldr	r2, [r3, #4]
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003f78:	b2d2      	uxtb	r2, r2
 8003f7a:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003f80:	687a      	ldr	r2, [r7, #4]
 8003f82:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8003f84:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	685b      	ldr	r3, [r3, #4]
 8003f8a:	2b00      	cmp	r3, #0
 8003f8c:	d010      	beq.n	8003fb0 <HAL_DMA_Init+0x624>
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	685b      	ldr	r3, [r3, #4]
 8003f92:	2b08      	cmp	r3, #8
 8003f94:	d80c      	bhi.n	8003fb0 <HAL_DMA_Init+0x624>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8003f96:	6878      	ldr	r0, [r7, #4]
 8003f98:	f001 fd5c 	bl	8005a54 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003fa0:	2200      	movs	r2, #0
 8003fa2:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003fa8:	687a      	ldr	r2, [r7, #4]
 8003faa:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8003fac:	605a      	str	r2, [r3, #4]
 8003fae:	e008      	b.n	8003fc2 <HAL_DMA_Init+0x636>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	2200      	movs	r2, #0
 8003fb4:	66da      	str	r2, [r3, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	2200      	movs	r2, #0
 8003fba:	671a      	str	r2, [r3, #112]	; 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	2200      	movs	r2, #0
 8003fc0:	675a      	str	r2, [r3, #116]	; 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	2200      	movs	r2, #0
 8003fc6:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	2201      	movs	r2, #1
 8003fcc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8003fd0:	2300      	movs	r3, #0
}
 8003fd2:	4618      	mov	r0, r3
 8003fd4:	3718      	adds	r7, #24
 8003fd6:	46bd      	mov	sp, r7
 8003fd8:	bd80      	pop	{r7, pc}
 8003fda:	bf00      	nop
 8003fdc:	a7fdabf8 	.word	0xa7fdabf8
 8003fe0:	cccccccd 	.word	0xcccccccd
 8003fe4:	40020010 	.word	0x40020010
 8003fe8:	40020028 	.word	0x40020028
 8003fec:	40020040 	.word	0x40020040
 8003ff0:	40020058 	.word	0x40020058
 8003ff4:	40020070 	.word	0x40020070
 8003ff8:	40020088 	.word	0x40020088
 8003ffc:	400200a0 	.word	0x400200a0
 8004000:	400200b8 	.word	0x400200b8
 8004004:	40020410 	.word	0x40020410
 8004008:	40020428 	.word	0x40020428
 800400c:	40020440 	.word	0x40020440
 8004010:	40020458 	.word	0x40020458
 8004014:	40020470 	.word	0x40020470
 8004018:	40020488 	.word	0x40020488
 800401c:	400204a0 	.word	0x400204a0
 8004020:	400204b8 	.word	0x400204b8
 8004024:	58025408 	.word	0x58025408
 8004028:	5802541c 	.word	0x5802541c
 800402c:	58025430 	.word	0x58025430
 8004030:	58025444 	.word	0x58025444
 8004034:	58025458 	.word	0x58025458
 8004038:	5802546c 	.word	0x5802546c
 800403c:	58025480 	.word	0x58025480
 8004040:	58025494 	.word	0x58025494

08004044 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004044:	b580      	push	{r7, lr}
 8004046:	b086      	sub	sp, #24
 8004048:	af00      	add	r7, sp, #0
 800404a:	60f8      	str	r0, [r7, #12]
 800404c:	60b9      	str	r1, [r7, #8]
 800404e:	607a      	str	r2, [r7, #4]
 8004050:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004052:	2300      	movs	r3, #0
 8004054:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8004056:	68fb      	ldr	r3, [r7, #12]
 8004058:	2b00      	cmp	r3, #0
 800405a:	d101      	bne.n	8004060 <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 800405c:	2301      	movs	r3, #1
 800405e:	e226      	b.n	80044ae <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 8004060:	68fb      	ldr	r3, [r7, #12]
 8004062:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8004066:	2b01      	cmp	r3, #1
 8004068:	d101      	bne.n	800406e <HAL_DMA_Start_IT+0x2a>
 800406a:	2302      	movs	r3, #2
 800406c:	e21f      	b.n	80044ae <HAL_DMA_Start_IT+0x46a>
 800406e:	68fb      	ldr	r3, [r7, #12]
 8004070:	2201      	movs	r2, #1
 8004072:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 8004076:	68fb      	ldr	r3, [r7, #12]
 8004078:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800407c:	b2db      	uxtb	r3, r3
 800407e:	2b01      	cmp	r3, #1
 8004080:	f040 820a 	bne.w	8004498 <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004084:	68fb      	ldr	r3, [r7, #12]
 8004086:	2202      	movs	r2, #2
 8004088:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800408c:	68fb      	ldr	r3, [r7, #12]
 800408e:	2200      	movs	r2, #0
 8004090:	655a      	str	r2, [r3, #84]	; 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8004092:	68fb      	ldr	r3, [r7, #12]
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	4a68      	ldr	r2, [pc, #416]	; (8004238 <HAL_DMA_Start_IT+0x1f4>)
 8004098:	4293      	cmp	r3, r2
 800409a:	d04a      	beq.n	8004132 <HAL_DMA_Start_IT+0xee>
 800409c:	68fb      	ldr	r3, [r7, #12]
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	4a66      	ldr	r2, [pc, #408]	; (800423c <HAL_DMA_Start_IT+0x1f8>)
 80040a2:	4293      	cmp	r3, r2
 80040a4:	d045      	beq.n	8004132 <HAL_DMA_Start_IT+0xee>
 80040a6:	68fb      	ldr	r3, [r7, #12]
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	4a65      	ldr	r2, [pc, #404]	; (8004240 <HAL_DMA_Start_IT+0x1fc>)
 80040ac:	4293      	cmp	r3, r2
 80040ae:	d040      	beq.n	8004132 <HAL_DMA_Start_IT+0xee>
 80040b0:	68fb      	ldr	r3, [r7, #12]
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	4a63      	ldr	r2, [pc, #396]	; (8004244 <HAL_DMA_Start_IT+0x200>)
 80040b6:	4293      	cmp	r3, r2
 80040b8:	d03b      	beq.n	8004132 <HAL_DMA_Start_IT+0xee>
 80040ba:	68fb      	ldr	r3, [r7, #12]
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	4a62      	ldr	r2, [pc, #392]	; (8004248 <HAL_DMA_Start_IT+0x204>)
 80040c0:	4293      	cmp	r3, r2
 80040c2:	d036      	beq.n	8004132 <HAL_DMA_Start_IT+0xee>
 80040c4:	68fb      	ldr	r3, [r7, #12]
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	4a60      	ldr	r2, [pc, #384]	; (800424c <HAL_DMA_Start_IT+0x208>)
 80040ca:	4293      	cmp	r3, r2
 80040cc:	d031      	beq.n	8004132 <HAL_DMA_Start_IT+0xee>
 80040ce:	68fb      	ldr	r3, [r7, #12]
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	4a5f      	ldr	r2, [pc, #380]	; (8004250 <HAL_DMA_Start_IT+0x20c>)
 80040d4:	4293      	cmp	r3, r2
 80040d6:	d02c      	beq.n	8004132 <HAL_DMA_Start_IT+0xee>
 80040d8:	68fb      	ldr	r3, [r7, #12]
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	4a5d      	ldr	r2, [pc, #372]	; (8004254 <HAL_DMA_Start_IT+0x210>)
 80040de:	4293      	cmp	r3, r2
 80040e0:	d027      	beq.n	8004132 <HAL_DMA_Start_IT+0xee>
 80040e2:	68fb      	ldr	r3, [r7, #12]
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	4a5c      	ldr	r2, [pc, #368]	; (8004258 <HAL_DMA_Start_IT+0x214>)
 80040e8:	4293      	cmp	r3, r2
 80040ea:	d022      	beq.n	8004132 <HAL_DMA_Start_IT+0xee>
 80040ec:	68fb      	ldr	r3, [r7, #12]
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	4a5a      	ldr	r2, [pc, #360]	; (800425c <HAL_DMA_Start_IT+0x218>)
 80040f2:	4293      	cmp	r3, r2
 80040f4:	d01d      	beq.n	8004132 <HAL_DMA_Start_IT+0xee>
 80040f6:	68fb      	ldr	r3, [r7, #12]
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	4a59      	ldr	r2, [pc, #356]	; (8004260 <HAL_DMA_Start_IT+0x21c>)
 80040fc:	4293      	cmp	r3, r2
 80040fe:	d018      	beq.n	8004132 <HAL_DMA_Start_IT+0xee>
 8004100:	68fb      	ldr	r3, [r7, #12]
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	4a57      	ldr	r2, [pc, #348]	; (8004264 <HAL_DMA_Start_IT+0x220>)
 8004106:	4293      	cmp	r3, r2
 8004108:	d013      	beq.n	8004132 <HAL_DMA_Start_IT+0xee>
 800410a:	68fb      	ldr	r3, [r7, #12]
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	4a56      	ldr	r2, [pc, #344]	; (8004268 <HAL_DMA_Start_IT+0x224>)
 8004110:	4293      	cmp	r3, r2
 8004112:	d00e      	beq.n	8004132 <HAL_DMA_Start_IT+0xee>
 8004114:	68fb      	ldr	r3, [r7, #12]
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	4a54      	ldr	r2, [pc, #336]	; (800426c <HAL_DMA_Start_IT+0x228>)
 800411a:	4293      	cmp	r3, r2
 800411c:	d009      	beq.n	8004132 <HAL_DMA_Start_IT+0xee>
 800411e:	68fb      	ldr	r3, [r7, #12]
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	4a53      	ldr	r2, [pc, #332]	; (8004270 <HAL_DMA_Start_IT+0x22c>)
 8004124:	4293      	cmp	r3, r2
 8004126:	d004      	beq.n	8004132 <HAL_DMA_Start_IT+0xee>
 8004128:	68fb      	ldr	r3, [r7, #12]
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	4a51      	ldr	r2, [pc, #324]	; (8004274 <HAL_DMA_Start_IT+0x230>)
 800412e:	4293      	cmp	r3, r2
 8004130:	d108      	bne.n	8004144 <HAL_DMA_Start_IT+0x100>
 8004132:	68fb      	ldr	r3, [r7, #12]
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	681a      	ldr	r2, [r3, #0]
 8004138:	68fb      	ldr	r3, [r7, #12]
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	f022 0201 	bic.w	r2, r2, #1
 8004140:	601a      	str	r2, [r3, #0]
 8004142:	e007      	b.n	8004154 <HAL_DMA_Start_IT+0x110>
 8004144:	68fb      	ldr	r3, [r7, #12]
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	681a      	ldr	r2, [r3, #0]
 800414a:	68fb      	ldr	r3, [r7, #12]
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	f022 0201 	bic.w	r2, r2, #1
 8004152:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8004154:	683b      	ldr	r3, [r7, #0]
 8004156:	687a      	ldr	r2, [r7, #4]
 8004158:	68b9      	ldr	r1, [r7, #8]
 800415a:	68f8      	ldr	r0, [r7, #12]
 800415c:	f001 f906 	bl	800536c <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8004160:	68fb      	ldr	r3, [r7, #12]
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	4a34      	ldr	r2, [pc, #208]	; (8004238 <HAL_DMA_Start_IT+0x1f4>)
 8004166:	4293      	cmp	r3, r2
 8004168:	d04a      	beq.n	8004200 <HAL_DMA_Start_IT+0x1bc>
 800416a:	68fb      	ldr	r3, [r7, #12]
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	4a33      	ldr	r2, [pc, #204]	; (800423c <HAL_DMA_Start_IT+0x1f8>)
 8004170:	4293      	cmp	r3, r2
 8004172:	d045      	beq.n	8004200 <HAL_DMA_Start_IT+0x1bc>
 8004174:	68fb      	ldr	r3, [r7, #12]
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	4a31      	ldr	r2, [pc, #196]	; (8004240 <HAL_DMA_Start_IT+0x1fc>)
 800417a:	4293      	cmp	r3, r2
 800417c:	d040      	beq.n	8004200 <HAL_DMA_Start_IT+0x1bc>
 800417e:	68fb      	ldr	r3, [r7, #12]
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	4a30      	ldr	r2, [pc, #192]	; (8004244 <HAL_DMA_Start_IT+0x200>)
 8004184:	4293      	cmp	r3, r2
 8004186:	d03b      	beq.n	8004200 <HAL_DMA_Start_IT+0x1bc>
 8004188:	68fb      	ldr	r3, [r7, #12]
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	4a2e      	ldr	r2, [pc, #184]	; (8004248 <HAL_DMA_Start_IT+0x204>)
 800418e:	4293      	cmp	r3, r2
 8004190:	d036      	beq.n	8004200 <HAL_DMA_Start_IT+0x1bc>
 8004192:	68fb      	ldr	r3, [r7, #12]
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	4a2d      	ldr	r2, [pc, #180]	; (800424c <HAL_DMA_Start_IT+0x208>)
 8004198:	4293      	cmp	r3, r2
 800419a:	d031      	beq.n	8004200 <HAL_DMA_Start_IT+0x1bc>
 800419c:	68fb      	ldr	r3, [r7, #12]
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	4a2b      	ldr	r2, [pc, #172]	; (8004250 <HAL_DMA_Start_IT+0x20c>)
 80041a2:	4293      	cmp	r3, r2
 80041a4:	d02c      	beq.n	8004200 <HAL_DMA_Start_IT+0x1bc>
 80041a6:	68fb      	ldr	r3, [r7, #12]
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	4a2a      	ldr	r2, [pc, #168]	; (8004254 <HAL_DMA_Start_IT+0x210>)
 80041ac:	4293      	cmp	r3, r2
 80041ae:	d027      	beq.n	8004200 <HAL_DMA_Start_IT+0x1bc>
 80041b0:	68fb      	ldr	r3, [r7, #12]
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	4a28      	ldr	r2, [pc, #160]	; (8004258 <HAL_DMA_Start_IT+0x214>)
 80041b6:	4293      	cmp	r3, r2
 80041b8:	d022      	beq.n	8004200 <HAL_DMA_Start_IT+0x1bc>
 80041ba:	68fb      	ldr	r3, [r7, #12]
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	4a27      	ldr	r2, [pc, #156]	; (800425c <HAL_DMA_Start_IT+0x218>)
 80041c0:	4293      	cmp	r3, r2
 80041c2:	d01d      	beq.n	8004200 <HAL_DMA_Start_IT+0x1bc>
 80041c4:	68fb      	ldr	r3, [r7, #12]
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	4a25      	ldr	r2, [pc, #148]	; (8004260 <HAL_DMA_Start_IT+0x21c>)
 80041ca:	4293      	cmp	r3, r2
 80041cc:	d018      	beq.n	8004200 <HAL_DMA_Start_IT+0x1bc>
 80041ce:	68fb      	ldr	r3, [r7, #12]
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	4a24      	ldr	r2, [pc, #144]	; (8004264 <HAL_DMA_Start_IT+0x220>)
 80041d4:	4293      	cmp	r3, r2
 80041d6:	d013      	beq.n	8004200 <HAL_DMA_Start_IT+0x1bc>
 80041d8:	68fb      	ldr	r3, [r7, #12]
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	4a22      	ldr	r2, [pc, #136]	; (8004268 <HAL_DMA_Start_IT+0x224>)
 80041de:	4293      	cmp	r3, r2
 80041e0:	d00e      	beq.n	8004200 <HAL_DMA_Start_IT+0x1bc>
 80041e2:	68fb      	ldr	r3, [r7, #12]
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	4a21      	ldr	r2, [pc, #132]	; (800426c <HAL_DMA_Start_IT+0x228>)
 80041e8:	4293      	cmp	r3, r2
 80041ea:	d009      	beq.n	8004200 <HAL_DMA_Start_IT+0x1bc>
 80041ec:	68fb      	ldr	r3, [r7, #12]
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	4a1f      	ldr	r2, [pc, #124]	; (8004270 <HAL_DMA_Start_IT+0x22c>)
 80041f2:	4293      	cmp	r3, r2
 80041f4:	d004      	beq.n	8004200 <HAL_DMA_Start_IT+0x1bc>
 80041f6:	68fb      	ldr	r3, [r7, #12]
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	4a1e      	ldr	r2, [pc, #120]	; (8004274 <HAL_DMA_Start_IT+0x230>)
 80041fc:	4293      	cmp	r3, r2
 80041fe:	d101      	bne.n	8004204 <HAL_DMA_Start_IT+0x1c0>
 8004200:	2301      	movs	r3, #1
 8004202:	e000      	b.n	8004206 <HAL_DMA_Start_IT+0x1c2>
 8004204:	2300      	movs	r3, #0
 8004206:	2b00      	cmp	r3, #0
 8004208:	d036      	beq.n	8004278 <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 800420a:	68fb      	ldr	r3, [r7, #12]
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	f023 021e 	bic.w	r2, r3, #30
 8004214:	68fb      	ldr	r3, [r7, #12]
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	f042 0216 	orr.w	r2, r2, #22
 800421c:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 800421e:	68fb      	ldr	r3, [r7, #12]
 8004220:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004222:	2b00      	cmp	r3, #0
 8004224:	d03e      	beq.n	80042a4 <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 8004226:	68fb      	ldr	r3, [r7, #12]
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	681a      	ldr	r2, [r3, #0]
 800422c:	68fb      	ldr	r3, [r7, #12]
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	f042 0208 	orr.w	r2, r2, #8
 8004234:	601a      	str	r2, [r3, #0]
 8004236:	e035      	b.n	80042a4 <HAL_DMA_Start_IT+0x260>
 8004238:	40020010 	.word	0x40020010
 800423c:	40020028 	.word	0x40020028
 8004240:	40020040 	.word	0x40020040
 8004244:	40020058 	.word	0x40020058
 8004248:	40020070 	.word	0x40020070
 800424c:	40020088 	.word	0x40020088
 8004250:	400200a0 	.word	0x400200a0
 8004254:	400200b8 	.word	0x400200b8
 8004258:	40020410 	.word	0x40020410
 800425c:	40020428 	.word	0x40020428
 8004260:	40020440 	.word	0x40020440
 8004264:	40020458 	.word	0x40020458
 8004268:	40020470 	.word	0x40020470
 800426c:	40020488 	.word	0x40020488
 8004270:	400204a0 	.word	0x400204a0
 8004274:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 8004278:	68fb      	ldr	r3, [r7, #12]
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	f023 020e 	bic.w	r2, r3, #14
 8004282:	68fb      	ldr	r3, [r7, #12]
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	f042 020a 	orr.w	r2, r2, #10
 800428a:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 800428c:	68fb      	ldr	r3, [r7, #12]
 800428e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004290:	2b00      	cmp	r3, #0
 8004292:	d007      	beq.n	80042a4 <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 8004294:	68fb      	ldr	r3, [r7, #12]
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	681a      	ldr	r2, [r3, #0]
 800429a:	68fb      	ldr	r3, [r7, #12]
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	f042 0204 	orr.w	r2, r2, #4
 80042a2:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80042a4:	68fb      	ldr	r3, [r7, #12]
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	4a83      	ldr	r2, [pc, #524]	; (80044b8 <HAL_DMA_Start_IT+0x474>)
 80042aa:	4293      	cmp	r3, r2
 80042ac:	d072      	beq.n	8004394 <HAL_DMA_Start_IT+0x350>
 80042ae:	68fb      	ldr	r3, [r7, #12]
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	4a82      	ldr	r2, [pc, #520]	; (80044bc <HAL_DMA_Start_IT+0x478>)
 80042b4:	4293      	cmp	r3, r2
 80042b6:	d06d      	beq.n	8004394 <HAL_DMA_Start_IT+0x350>
 80042b8:	68fb      	ldr	r3, [r7, #12]
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	4a80      	ldr	r2, [pc, #512]	; (80044c0 <HAL_DMA_Start_IT+0x47c>)
 80042be:	4293      	cmp	r3, r2
 80042c0:	d068      	beq.n	8004394 <HAL_DMA_Start_IT+0x350>
 80042c2:	68fb      	ldr	r3, [r7, #12]
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	4a7f      	ldr	r2, [pc, #508]	; (80044c4 <HAL_DMA_Start_IT+0x480>)
 80042c8:	4293      	cmp	r3, r2
 80042ca:	d063      	beq.n	8004394 <HAL_DMA_Start_IT+0x350>
 80042cc:	68fb      	ldr	r3, [r7, #12]
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	4a7d      	ldr	r2, [pc, #500]	; (80044c8 <HAL_DMA_Start_IT+0x484>)
 80042d2:	4293      	cmp	r3, r2
 80042d4:	d05e      	beq.n	8004394 <HAL_DMA_Start_IT+0x350>
 80042d6:	68fb      	ldr	r3, [r7, #12]
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	4a7c      	ldr	r2, [pc, #496]	; (80044cc <HAL_DMA_Start_IT+0x488>)
 80042dc:	4293      	cmp	r3, r2
 80042de:	d059      	beq.n	8004394 <HAL_DMA_Start_IT+0x350>
 80042e0:	68fb      	ldr	r3, [r7, #12]
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	4a7a      	ldr	r2, [pc, #488]	; (80044d0 <HAL_DMA_Start_IT+0x48c>)
 80042e6:	4293      	cmp	r3, r2
 80042e8:	d054      	beq.n	8004394 <HAL_DMA_Start_IT+0x350>
 80042ea:	68fb      	ldr	r3, [r7, #12]
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	4a79      	ldr	r2, [pc, #484]	; (80044d4 <HAL_DMA_Start_IT+0x490>)
 80042f0:	4293      	cmp	r3, r2
 80042f2:	d04f      	beq.n	8004394 <HAL_DMA_Start_IT+0x350>
 80042f4:	68fb      	ldr	r3, [r7, #12]
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	4a77      	ldr	r2, [pc, #476]	; (80044d8 <HAL_DMA_Start_IT+0x494>)
 80042fa:	4293      	cmp	r3, r2
 80042fc:	d04a      	beq.n	8004394 <HAL_DMA_Start_IT+0x350>
 80042fe:	68fb      	ldr	r3, [r7, #12]
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	4a76      	ldr	r2, [pc, #472]	; (80044dc <HAL_DMA_Start_IT+0x498>)
 8004304:	4293      	cmp	r3, r2
 8004306:	d045      	beq.n	8004394 <HAL_DMA_Start_IT+0x350>
 8004308:	68fb      	ldr	r3, [r7, #12]
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	4a74      	ldr	r2, [pc, #464]	; (80044e0 <HAL_DMA_Start_IT+0x49c>)
 800430e:	4293      	cmp	r3, r2
 8004310:	d040      	beq.n	8004394 <HAL_DMA_Start_IT+0x350>
 8004312:	68fb      	ldr	r3, [r7, #12]
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	4a73      	ldr	r2, [pc, #460]	; (80044e4 <HAL_DMA_Start_IT+0x4a0>)
 8004318:	4293      	cmp	r3, r2
 800431a:	d03b      	beq.n	8004394 <HAL_DMA_Start_IT+0x350>
 800431c:	68fb      	ldr	r3, [r7, #12]
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	4a71      	ldr	r2, [pc, #452]	; (80044e8 <HAL_DMA_Start_IT+0x4a4>)
 8004322:	4293      	cmp	r3, r2
 8004324:	d036      	beq.n	8004394 <HAL_DMA_Start_IT+0x350>
 8004326:	68fb      	ldr	r3, [r7, #12]
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	4a70      	ldr	r2, [pc, #448]	; (80044ec <HAL_DMA_Start_IT+0x4a8>)
 800432c:	4293      	cmp	r3, r2
 800432e:	d031      	beq.n	8004394 <HAL_DMA_Start_IT+0x350>
 8004330:	68fb      	ldr	r3, [r7, #12]
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	4a6e      	ldr	r2, [pc, #440]	; (80044f0 <HAL_DMA_Start_IT+0x4ac>)
 8004336:	4293      	cmp	r3, r2
 8004338:	d02c      	beq.n	8004394 <HAL_DMA_Start_IT+0x350>
 800433a:	68fb      	ldr	r3, [r7, #12]
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	4a6d      	ldr	r2, [pc, #436]	; (80044f4 <HAL_DMA_Start_IT+0x4b0>)
 8004340:	4293      	cmp	r3, r2
 8004342:	d027      	beq.n	8004394 <HAL_DMA_Start_IT+0x350>
 8004344:	68fb      	ldr	r3, [r7, #12]
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	4a6b      	ldr	r2, [pc, #428]	; (80044f8 <HAL_DMA_Start_IT+0x4b4>)
 800434a:	4293      	cmp	r3, r2
 800434c:	d022      	beq.n	8004394 <HAL_DMA_Start_IT+0x350>
 800434e:	68fb      	ldr	r3, [r7, #12]
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	4a6a      	ldr	r2, [pc, #424]	; (80044fc <HAL_DMA_Start_IT+0x4b8>)
 8004354:	4293      	cmp	r3, r2
 8004356:	d01d      	beq.n	8004394 <HAL_DMA_Start_IT+0x350>
 8004358:	68fb      	ldr	r3, [r7, #12]
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	4a68      	ldr	r2, [pc, #416]	; (8004500 <HAL_DMA_Start_IT+0x4bc>)
 800435e:	4293      	cmp	r3, r2
 8004360:	d018      	beq.n	8004394 <HAL_DMA_Start_IT+0x350>
 8004362:	68fb      	ldr	r3, [r7, #12]
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	4a67      	ldr	r2, [pc, #412]	; (8004504 <HAL_DMA_Start_IT+0x4c0>)
 8004368:	4293      	cmp	r3, r2
 800436a:	d013      	beq.n	8004394 <HAL_DMA_Start_IT+0x350>
 800436c:	68fb      	ldr	r3, [r7, #12]
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	4a65      	ldr	r2, [pc, #404]	; (8004508 <HAL_DMA_Start_IT+0x4c4>)
 8004372:	4293      	cmp	r3, r2
 8004374:	d00e      	beq.n	8004394 <HAL_DMA_Start_IT+0x350>
 8004376:	68fb      	ldr	r3, [r7, #12]
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	4a64      	ldr	r2, [pc, #400]	; (800450c <HAL_DMA_Start_IT+0x4c8>)
 800437c:	4293      	cmp	r3, r2
 800437e:	d009      	beq.n	8004394 <HAL_DMA_Start_IT+0x350>
 8004380:	68fb      	ldr	r3, [r7, #12]
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	4a62      	ldr	r2, [pc, #392]	; (8004510 <HAL_DMA_Start_IT+0x4cc>)
 8004386:	4293      	cmp	r3, r2
 8004388:	d004      	beq.n	8004394 <HAL_DMA_Start_IT+0x350>
 800438a:	68fb      	ldr	r3, [r7, #12]
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	4a61      	ldr	r2, [pc, #388]	; (8004514 <HAL_DMA_Start_IT+0x4d0>)
 8004390:	4293      	cmp	r3, r2
 8004392:	d101      	bne.n	8004398 <HAL_DMA_Start_IT+0x354>
 8004394:	2301      	movs	r3, #1
 8004396:	e000      	b.n	800439a <HAL_DMA_Start_IT+0x356>
 8004398:	2300      	movs	r3, #0
 800439a:	2b00      	cmp	r3, #0
 800439c:	d01a      	beq.n	80043d4 <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 800439e:	68fb      	ldr	r3, [r7, #12]
 80043a0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80043a8:	2b00      	cmp	r3, #0
 80043aa:	d007      	beq.n	80043bc <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 80043ac:	68fb      	ldr	r3, [r7, #12]
 80043ae:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80043b0:	681a      	ldr	r2, [r3, #0]
 80043b2:	68fb      	ldr	r3, [r7, #12]
 80043b4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80043b6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80043ba:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 80043bc:	68fb      	ldr	r3, [r7, #12]
 80043be:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80043c0:	2b00      	cmp	r3, #0
 80043c2:	d007      	beq.n	80043d4 <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 80043c4:	68fb      	ldr	r3, [r7, #12]
 80043c6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80043c8:	681a      	ldr	r2, [r3, #0]
 80043ca:	68fb      	ldr	r3, [r7, #12]
 80043cc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80043ce:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80043d2:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80043d4:	68fb      	ldr	r3, [r7, #12]
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	4a37      	ldr	r2, [pc, #220]	; (80044b8 <HAL_DMA_Start_IT+0x474>)
 80043da:	4293      	cmp	r3, r2
 80043dc:	d04a      	beq.n	8004474 <HAL_DMA_Start_IT+0x430>
 80043de:	68fb      	ldr	r3, [r7, #12]
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	4a36      	ldr	r2, [pc, #216]	; (80044bc <HAL_DMA_Start_IT+0x478>)
 80043e4:	4293      	cmp	r3, r2
 80043e6:	d045      	beq.n	8004474 <HAL_DMA_Start_IT+0x430>
 80043e8:	68fb      	ldr	r3, [r7, #12]
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	4a34      	ldr	r2, [pc, #208]	; (80044c0 <HAL_DMA_Start_IT+0x47c>)
 80043ee:	4293      	cmp	r3, r2
 80043f0:	d040      	beq.n	8004474 <HAL_DMA_Start_IT+0x430>
 80043f2:	68fb      	ldr	r3, [r7, #12]
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	4a33      	ldr	r2, [pc, #204]	; (80044c4 <HAL_DMA_Start_IT+0x480>)
 80043f8:	4293      	cmp	r3, r2
 80043fa:	d03b      	beq.n	8004474 <HAL_DMA_Start_IT+0x430>
 80043fc:	68fb      	ldr	r3, [r7, #12]
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	4a31      	ldr	r2, [pc, #196]	; (80044c8 <HAL_DMA_Start_IT+0x484>)
 8004402:	4293      	cmp	r3, r2
 8004404:	d036      	beq.n	8004474 <HAL_DMA_Start_IT+0x430>
 8004406:	68fb      	ldr	r3, [r7, #12]
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	4a30      	ldr	r2, [pc, #192]	; (80044cc <HAL_DMA_Start_IT+0x488>)
 800440c:	4293      	cmp	r3, r2
 800440e:	d031      	beq.n	8004474 <HAL_DMA_Start_IT+0x430>
 8004410:	68fb      	ldr	r3, [r7, #12]
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	4a2e      	ldr	r2, [pc, #184]	; (80044d0 <HAL_DMA_Start_IT+0x48c>)
 8004416:	4293      	cmp	r3, r2
 8004418:	d02c      	beq.n	8004474 <HAL_DMA_Start_IT+0x430>
 800441a:	68fb      	ldr	r3, [r7, #12]
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	4a2d      	ldr	r2, [pc, #180]	; (80044d4 <HAL_DMA_Start_IT+0x490>)
 8004420:	4293      	cmp	r3, r2
 8004422:	d027      	beq.n	8004474 <HAL_DMA_Start_IT+0x430>
 8004424:	68fb      	ldr	r3, [r7, #12]
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	4a2b      	ldr	r2, [pc, #172]	; (80044d8 <HAL_DMA_Start_IT+0x494>)
 800442a:	4293      	cmp	r3, r2
 800442c:	d022      	beq.n	8004474 <HAL_DMA_Start_IT+0x430>
 800442e:	68fb      	ldr	r3, [r7, #12]
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	4a2a      	ldr	r2, [pc, #168]	; (80044dc <HAL_DMA_Start_IT+0x498>)
 8004434:	4293      	cmp	r3, r2
 8004436:	d01d      	beq.n	8004474 <HAL_DMA_Start_IT+0x430>
 8004438:	68fb      	ldr	r3, [r7, #12]
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	4a28      	ldr	r2, [pc, #160]	; (80044e0 <HAL_DMA_Start_IT+0x49c>)
 800443e:	4293      	cmp	r3, r2
 8004440:	d018      	beq.n	8004474 <HAL_DMA_Start_IT+0x430>
 8004442:	68fb      	ldr	r3, [r7, #12]
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	4a27      	ldr	r2, [pc, #156]	; (80044e4 <HAL_DMA_Start_IT+0x4a0>)
 8004448:	4293      	cmp	r3, r2
 800444a:	d013      	beq.n	8004474 <HAL_DMA_Start_IT+0x430>
 800444c:	68fb      	ldr	r3, [r7, #12]
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	4a25      	ldr	r2, [pc, #148]	; (80044e8 <HAL_DMA_Start_IT+0x4a4>)
 8004452:	4293      	cmp	r3, r2
 8004454:	d00e      	beq.n	8004474 <HAL_DMA_Start_IT+0x430>
 8004456:	68fb      	ldr	r3, [r7, #12]
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	4a24      	ldr	r2, [pc, #144]	; (80044ec <HAL_DMA_Start_IT+0x4a8>)
 800445c:	4293      	cmp	r3, r2
 800445e:	d009      	beq.n	8004474 <HAL_DMA_Start_IT+0x430>
 8004460:	68fb      	ldr	r3, [r7, #12]
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	4a22      	ldr	r2, [pc, #136]	; (80044f0 <HAL_DMA_Start_IT+0x4ac>)
 8004466:	4293      	cmp	r3, r2
 8004468:	d004      	beq.n	8004474 <HAL_DMA_Start_IT+0x430>
 800446a:	68fb      	ldr	r3, [r7, #12]
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	4a21      	ldr	r2, [pc, #132]	; (80044f4 <HAL_DMA_Start_IT+0x4b0>)
 8004470:	4293      	cmp	r3, r2
 8004472:	d108      	bne.n	8004486 <HAL_DMA_Start_IT+0x442>
 8004474:	68fb      	ldr	r3, [r7, #12]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	681a      	ldr	r2, [r3, #0]
 800447a:	68fb      	ldr	r3, [r7, #12]
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	f042 0201 	orr.w	r2, r2, #1
 8004482:	601a      	str	r2, [r3, #0]
 8004484:	e012      	b.n	80044ac <HAL_DMA_Start_IT+0x468>
 8004486:	68fb      	ldr	r3, [r7, #12]
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	681a      	ldr	r2, [r3, #0]
 800448c:	68fb      	ldr	r3, [r7, #12]
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	f042 0201 	orr.w	r2, r2, #1
 8004494:	601a      	str	r2, [r3, #0]
 8004496:	e009      	b.n	80044ac <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 8004498:	68fb      	ldr	r3, [r7, #12]
 800449a:	2200      	movs	r2, #0
 800449c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 80044a0:	68fb      	ldr	r3, [r7, #12]
 80044a2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80044a6:	655a      	str	r2, [r3, #84]	; 0x54

    /* Return error status */
    status = HAL_ERROR;
 80044a8:	2301      	movs	r3, #1
 80044aa:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 80044ac:	7dfb      	ldrb	r3, [r7, #23]
}
 80044ae:	4618      	mov	r0, r3
 80044b0:	3718      	adds	r7, #24
 80044b2:	46bd      	mov	sp, r7
 80044b4:	bd80      	pop	{r7, pc}
 80044b6:	bf00      	nop
 80044b8:	40020010 	.word	0x40020010
 80044bc:	40020028 	.word	0x40020028
 80044c0:	40020040 	.word	0x40020040
 80044c4:	40020058 	.word	0x40020058
 80044c8:	40020070 	.word	0x40020070
 80044cc:	40020088 	.word	0x40020088
 80044d0:	400200a0 	.word	0x400200a0
 80044d4:	400200b8 	.word	0x400200b8
 80044d8:	40020410 	.word	0x40020410
 80044dc:	40020428 	.word	0x40020428
 80044e0:	40020440 	.word	0x40020440
 80044e4:	40020458 	.word	0x40020458
 80044e8:	40020470 	.word	0x40020470
 80044ec:	40020488 	.word	0x40020488
 80044f0:	400204a0 	.word	0x400204a0
 80044f4:	400204b8 	.word	0x400204b8
 80044f8:	58025408 	.word	0x58025408
 80044fc:	5802541c 	.word	0x5802541c
 8004500:	58025430 	.word	0x58025430
 8004504:	58025444 	.word	0x58025444
 8004508:	58025458 	.word	0x58025458
 800450c:	5802546c 	.word	0x5802546c
 8004510:	58025480 	.word	0x58025480
 8004514:	58025494 	.word	0x58025494

08004518 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8004518:	b580      	push	{r7, lr}
 800451a:	b08a      	sub	sp, #40	; 0x28
 800451c:	af00      	add	r7, sp, #0
 800451e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 8004520:	2300      	movs	r3, #0
 8004522:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 8004524:	4b67      	ldr	r3, [pc, #412]	; (80046c4 <HAL_DMA_IRQHandler+0x1ac>)
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	4a67      	ldr	r2, [pc, #412]	; (80046c8 <HAL_DMA_IRQHandler+0x1b0>)
 800452a:	fba2 2303 	umull	r2, r3, r2, r3
 800452e:	0a9b      	lsrs	r3, r3, #10
 8004530:	627b      	str	r3, [r7, #36]	; 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004536:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800453c:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 800453e:	6a3b      	ldr	r3, [r7, #32]
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 8004544:	69fb      	ldr	r3, [r7, #28]
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	4a5f      	ldr	r2, [pc, #380]	; (80046cc <HAL_DMA_IRQHandler+0x1b4>)
 8004550:	4293      	cmp	r3, r2
 8004552:	d04a      	beq.n	80045ea <HAL_DMA_IRQHandler+0xd2>
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	4a5d      	ldr	r2, [pc, #372]	; (80046d0 <HAL_DMA_IRQHandler+0x1b8>)
 800455a:	4293      	cmp	r3, r2
 800455c:	d045      	beq.n	80045ea <HAL_DMA_IRQHandler+0xd2>
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	4a5c      	ldr	r2, [pc, #368]	; (80046d4 <HAL_DMA_IRQHandler+0x1bc>)
 8004564:	4293      	cmp	r3, r2
 8004566:	d040      	beq.n	80045ea <HAL_DMA_IRQHandler+0xd2>
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	4a5a      	ldr	r2, [pc, #360]	; (80046d8 <HAL_DMA_IRQHandler+0x1c0>)
 800456e:	4293      	cmp	r3, r2
 8004570:	d03b      	beq.n	80045ea <HAL_DMA_IRQHandler+0xd2>
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	4a59      	ldr	r2, [pc, #356]	; (80046dc <HAL_DMA_IRQHandler+0x1c4>)
 8004578:	4293      	cmp	r3, r2
 800457a:	d036      	beq.n	80045ea <HAL_DMA_IRQHandler+0xd2>
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	4a57      	ldr	r2, [pc, #348]	; (80046e0 <HAL_DMA_IRQHandler+0x1c8>)
 8004582:	4293      	cmp	r3, r2
 8004584:	d031      	beq.n	80045ea <HAL_DMA_IRQHandler+0xd2>
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	4a56      	ldr	r2, [pc, #344]	; (80046e4 <HAL_DMA_IRQHandler+0x1cc>)
 800458c:	4293      	cmp	r3, r2
 800458e:	d02c      	beq.n	80045ea <HAL_DMA_IRQHandler+0xd2>
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	4a54      	ldr	r2, [pc, #336]	; (80046e8 <HAL_DMA_IRQHandler+0x1d0>)
 8004596:	4293      	cmp	r3, r2
 8004598:	d027      	beq.n	80045ea <HAL_DMA_IRQHandler+0xd2>
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	4a53      	ldr	r2, [pc, #332]	; (80046ec <HAL_DMA_IRQHandler+0x1d4>)
 80045a0:	4293      	cmp	r3, r2
 80045a2:	d022      	beq.n	80045ea <HAL_DMA_IRQHandler+0xd2>
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	4a51      	ldr	r2, [pc, #324]	; (80046f0 <HAL_DMA_IRQHandler+0x1d8>)
 80045aa:	4293      	cmp	r3, r2
 80045ac:	d01d      	beq.n	80045ea <HAL_DMA_IRQHandler+0xd2>
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	4a50      	ldr	r2, [pc, #320]	; (80046f4 <HAL_DMA_IRQHandler+0x1dc>)
 80045b4:	4293      	cmp	r3, r2
 80045b6:	d018      	beq.n	80045ea <HAL_DMA_IRQHandler+0xd2>
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	4a4e      	ldr	r2, [pc, #312]	; (80046f8 <HAL_DMA_IRQHandler+0x1e0>)
 80045be:	4293      	cmp	r3, r2
 80045c0:	d013      	beq.n	80045ea <HAL_DMA_IRQHandler+0xd2>
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	4a4d      	ldr	r2, [pc, #308]	; (80046fc <HAL_DMA_IRQHandler+0x1e4>)
 80045c8:	4293      	cmp	r3, r2
 80045ca:	d00e      	beq.n	80045ea <HAL_DMA_IRQHandler+0xd2>
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	4a4b      	ldr	r2, [pc, #300]	; (8004700 <HAL_DMA_IRQHandler+0x1e8>)
 80045d2:	4293      	cmp	r3, r2
 80045d4:	d009      	beq.n	80045ea <HAL_DMA_IRQHandler+0xd2>
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	4a4a      	ldr	r2, [pc, #296]	; (8004704 <HAL_DMA_IRQHandler+0x1ec>)
 80045dc:	4293      	cmp	r3, r2
 80045de:	d004      	beq.n	80045ea <HAL_DMA_IRQHandler+0xd2>
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	4a48      	ldr	r2, [pc, #288]	; (8004708 <HAL_DMA_IRQHandler+0x1f0>)
 80045e6:	4293      	cmp	r3, r2
 80045e8:	d101      	bne.n	80045ee <HAL_DMA_IRQHandler+0xd6>
 80045ea:	2301      	movs	r3, #1
 80045ec:	e000      	b.n	80045f0 <HAL_DMA_IRQHandler+0xd8>
 80045ee:	2300      	movs	r3, #0
 80045f0:	2b00      	cmp	r3, #0
 80045f2:	f000 842b 	beq.w	8004e4c <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80045fa:	f003 031f 	and.w	r3, r3, #31
 80045fe:	2208      	movs	r2, #8
 8004600:	409a      	lsls	r2, r3
 8004602:	69bb      	ldr	r3, [r7, #24]
 8004604:	4013      	ands	r3, r2
 8004606:	2b00      	cmp	r3, #0
 8004608:	f000 80a2 	beq.w	8004750 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	4a2e      	ldr	r2, [pc, #184]	; (80046cc <HAL_DMA_IRQHandler+0x1b4>)
 8004612:	4293      	cmp	r3, r2
 8004614:	d04a      	beq.n	80046ac <HAL_DMA_IRQHandler+0x194>
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	4a2d      	ldr	r2, [pc, #180]	; (80046d0 <HAL_DMA_IRQHandler+0x1b8>)
 800461c:	4293      	cmp	r3, r2
 800461e:	d045      	beq.n	80046ac <HAL_DMA_IRQHandler+0x194>
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	4a2b      	ldr	r2, [pc, #172]	; (80046d4 <HAL_DMA_IRQHandler+0x1bc>)
 8004626:	4293      	cmp	r3, r2
 8004628:	d040      	beq.n	80046ac <HAL_DMA_IRQHandler+0x194>
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	4a2a      	ldr	r2, [pc, #168]	; (80046d8 <HAL_DMA_IRQHandler+0x1c0>)
 8004630:	4293      	cmp	r3, r2
 8004632:	d03b      	beq.n	80046ac <HAL_DMA_IRQHandler+0x194>
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	4a28      	ldr	r2, [pc, #160]	; (80046dc <HAL_DMA_IRQHandler+0x1c4>)
 800463a:	4293      	cmp	r3, r2
 800463c:	d036      	beq.n	80046ac <HAL_DMA_IRQHandler+0x194>
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	4a27      	ldr	r2, [pc, #156]	; (80046e0 <HAL_DMA_IRQHandler+0x1c8>)
 8004644:	4293      	cmp	r3, r2
 8004646:	d031      	beq.n	80046ac <HAL_DMA_IRQHandler+0x194>
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	4a25      	ldr	r2, [pc, #148]	; (80046e4 <HAL_DMA_IRQHandler+0x1cc>)
 800464e:	4293      	cmp	r3, r2
 8004650:	d02c      	beq.n	80046ac <HAL_DMA_IRQHandler+0x194>
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	4a24      	ldr	r2, [pc, #144]	; (80046e8 <HAL_DMA_IRQHandler+0x1d0>)
 8004658:	4293      	cmp	r3, r2
 800465a:	d027      	beq.n	80046ac <HAL_DMA_IRQHandler+0x194>
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	4a22      	ldr	r2, [pc, #136]	; (80046ec <HAL_DMA_IRQHandler+0x1d4>)
 8004662:	4293      	cmp	r3, r2
 8004664:	d022      	beq.n	80046ac <HAL_DMA_IRQHandler+0x194>
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	4a21      	ldr	r2, [pc, #132]	; (80046f0 <HAL_DMA_IRQHandler+0x1d8>)
 800466c:	4293      	cmp	r3, r2
 800466e:	d01d      	beq.n	80046ac <HAL_DMA_IRQHandler+0x194>
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	4a1f      	ldr	r2, [pc, #124]	; (80046f4 <HAL_DMA_IRQHandler+0x1dc>)
 8004676:	4293      	cmp	r3, r2
 8004678:	d018      	beq.n	80046ac <HAL_DMA_IRQHandler+0x194>
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	4a1e      	ldr	r2, [pc, #120]	; (80046f8 <HAL_DMA_IRQHandler+0x1e0>)
 8004680:	4293      	cmp	r3, r2
 8004682:	d013      	beq.n	80046ac <HAL_DMA_IRQHandler+0x194>
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	4a1c      	ldr	r2, [pc, #112]	; (80046fc <HAL_DMA_IRQHandler+0x1e4>)
 800468a:	4293      	cmp	r3, r2
 800468c:	d00e      	beq.n	80046ac <HAL_DMA_IRQHandler+0x194>
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	4a1b      	ldr	r2, [pc, #108]	; (8004700 <HAL_DMA_IRQHandler+0x1e8>)
 8004694:	4293      	cmp	r3, r2
 8004696:	d009      	beq.n	80046ac <HAL_DMA_IRQHandler+0x194>
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	4a19      	ldr	r2, [pc, #100]	; (8004704 <HAL_DMA_IRQHandler+0x1ec>)
 800469e:	4293      	cmp	r3, r2
 80046a0:	d004      	beq.n	80046ac <HAL_DMA_IRQHandler+0x194>
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	4a18      	ldr	r2, [pc, #96]	; (8004708 <HAL_DMA_IRQHandler+0x1f0>)
 80046a8:	4293      	cmp	r3, r2
 80046aa:	d12f      	bne.n	800470c <HAL_DMA_IRQHandler+0x1f4>
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	f003 0304 	and.w	r3, r3, #4
 80046b6:	2b00      	cmp	r3, #0
 80046b8:	bf14      	ite	ne
 80046ba:	2301      	movne	r3, #1
 80046bc:	2300      	moveq	r3, #0
 80046be:	b2db      	uxtb	r3, r3
 80046c0:	e02e      	b.n	8004720 <HAL_DMA_IRQHandler+0x208>
 80046c2:	bf00      	nop
 80046c4:	2400000c 	.word	0x2400000c
 80046c8:	1b4e81b5 	.word	0x1b4e81b5
 80046cc:	40020010 	.word	0x40020010
 80046d0:	40020028 	.word	0x40020028
 80046d4:	40020040 	.word	0x40020040
 80046d8:	40020058 	.word	0x40020058
 80046dc:	40020070 	.word	0x40020070
 80046e0:	40020088 	.word	0x40020088
 80046e4:	400200a0 	.word	0x400200a0
 80046e8:	400200b8 	.word	0x400200b8
 80046ec:	40020410 	.word	0x40020410
 80046f0:	40020428 	.word	0x40020428
 80046f4:	40020440 	.word	0x40020440
 80046f8:	40020458 	.word	0x40020458
 80046fc:	40020470 	.word	0x40020470
 8004700:	40020488 	.word	0x40020488
 8004704:	400204a0 	.word	0x400204a0
 8004708:	400204b8 	.word	0x400204b8
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	f003 0308 	and.w	r3, r3, #8
 8004716:	2b00      	cmp	r3, #0
 8004718:	bf14      	ite	ne
 800471a:	2301      	movne	r3, #1
 800471c:	2300      	moveq	r3, #0
 800471e:	b2db      	uxtb	r3, r3
 8004720:	2b00      	cmp	r3, #0
 8004722:	d015      	beq.n	8004750 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	681a      	ldr	r2, [r3, #0]
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	f022 0204 	bic.w	r2, r2, #4
 8004732:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004738:	f003 031f 	and.w	r3, r3, #31
 800473c:	2208      	movs	r2, #8
 800473e:	409a      	lsls	r2, r3
 8004740:	6a3b      	ldr	r3, [r7, #32]
 8004742:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004748:	f043 0201 	orr.w	r2, r3, #1
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004754:	f003 031f 	and.w	r3, r3, #31
 8004758:	69ba      	ldr	r2, [r7, #24]
 800475a:	fa22 f303 	lsr.w	r3, r2, r3
 800475e:	f003 0301 	and.w	r3, r3, #1
 8004762:	2b00      	cmp	r3, #0
 8004764:	d06e      	beq.n	8004844 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	4a69      	ldr	r2, [pc, #420]	; (8004910 <HAL_DMA_IRQHandler+0x3f8>)
 800476c:	4293      	cmp	r3, r2
 800476e:	d04a      	beq.n	8004806 <HAL_DMA_IRQHandler+0x2ee>
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	4a67      	ldr	r2, [pc, #412]	; (8004914 <HAL_DMA_IRQHandler+0x3fc>)
 8004776:	4293      	cmp	r3, r2
 8004778:	d045      	beq.n	8004806 <HAL_DMA_IRQHandler+0x2ee>
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	4a66      	ldr	r2, [pc, #408]	; (8004918 <HAL_DMA_IRQHandler+0x400>)
 8004780:	4293      	cmp	r3, r2
 8004782:	d040      	beq.n	8004806 <HAL_DMA_IRQHandler+0x2ee>
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	4a64      	ldr	r2, [pc, #400]	; (800491c <HAL_DMA_IRQHandler+0x404>)
 800478a:	4293      	cmp	r3, r2
 800478c:	d03b      	beq.n	8004806 <HAL_DMA_IRQHandler+0x2ee>
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	4a63      	ldr	r2, [pc, #396]	; (8004920 <HAL_DMA_IRQHandler+0x408>)
 8004794:	4293      	cmp	r3, r2
 8004796:	d036      	beq.n	8004806 <HAL_DMA_IRQHandler+0x2ee>
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	4a61      	ldr	r2, [pc, #388]	; (8004924 <HAL_DMA_IRQHandler+0x40c>)
 800479e:	4293      	cmp	r3, r2
 80047a0:	d031      	beq.n	8004806 <HAL_DMA_IRQHandler+0x2ee>
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	4a60      	ldr	r2, [pc, #384]	; (8004928 <HAL_DMA_IRQHandler+0x410>)
 80047a8:	4293      	cmp	r3, r2
 80047aa:	d02c      	beq.n	8004806 <HAL_DMA_IRQHandler+0x2ee>
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	4a5e      	ldr	r2, [pc, #376]	; (800492c <HAL_DMA_IRQHandler+0x414>)
 80047b2:	4293      	cmp	r3, r2
 80047b4:	d027      	beq.n	8004806 <HAL_DMA_IRQHandler+0x2ee>
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	4a5d      	ldr	r2, [pc, #372]	; (8004930 <HAL_DMA_IRQHandler+0x418>)
 80047bc:	4293      	cmp	r3, r2
 80047be:	d022      	beq.n	8004806 <HAL_DMA_IRQHandler+0x2ee>
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	4a5b      	ldr	r2, [pc, #364]	; (8004934 <HAL_DMA_IRQHandler+0x41c>)
 80047c6:	4293      	cmp	r3, r2
 80047c8:	d01d      	beq.n	8004806 <HAL_DMA_IRQHandler+0x2ee>
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	4a5a      	ldr	r2, [pc, #360]	; (8004938 <HAL_DMA_IRQHandler+0x420>)
 80047d0:	4293      	cmp	r3, r2
 80047d2:	d018      	beq.n	8004806 <HAL_DMA_IRQHandler+0x2ee>
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	4a58      	ldr	r2, [pc, #352]	; (800493c <HAL_DMA_IRQHandler+0x424>)
 80047da:	4293      	cmp	r3, r2
 80047dc:	d013      	beq.n	8004806 <HAL_DMA_IRQHandler+0x2ee>
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	4a57      	ldr	r2, [pc, #348]	; (8004940 <HAL_DMA_IRQHandler+0x428>)
 80047e4:	4293      	cmp	r3, r2
 80047e6:	d00e      	beq.n	8004806 <HAL_DMA_IRQHandler+0x2ee>
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	4a55      	ldr	r2, [pc, #340]	; (8004944 <HAL_DMA_IRQHandler+0x42c>)
 80047ee:	4293      	cmp	r3, r2
 80047f0:	d009      	beq.n	8004806 <HAL_DMA_IRQHandler+0x2ee>
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	4a54      	ldr	r2, [pc, #336]	; (8004948 <HAL_DMA_IRQHandler+0x430>)
 80047f8:	4293      	cmp	r3, r2
 80047fa:	d004      	beq.n	8004806 <HAL_DMA_IRQHandler+0x2ee>
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	4a52      	ldr	r2, [pc, #328]	; (800494c <HAL_DMA_IRQHandler+0x434>)
 8004802:	4293      	cmp	r3, r2
 8004804:	d10a      	bne.n	800481c <HAL_DMA_IRQHandler+0x304>
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	695b      	ldr	r3, [r3, #20]
 800480c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004810:	2b00      	cmp	r3, #0
 8004812:	bf14      	ite	ne
 8004814:	2301      	movne	r3, #1
 8004816:	2300      	moveq	r3, #0
 8004818:	b2db      	uxtb	r3, r3
 800481a:	e003      	b.n	8004824 <HAL_DMA_IRQHandler+0x30c>
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	2300      	movs	r3, #0
 8004824:	2b00      	cmp	r3, #0
 8004826:	d00d      	beq.n	8004844 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800482c:	f003 031f 	and.w	r3, r3, #31
 8004830:	2201      	movs	r2, #1
 8004832:	409a      	lsls	r2, r3
 8004834:	6a3b      	ldr	r3, [r7, #32]
 8004836:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800483c:	f043 0202 	orr.w	r2, r3, #2
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004848:	f003 031f 	and.w	r3, r3, #31
 800484c:	2204      	movs	r2, #4
 800484e:	409a      	lsls	r2, r3
 8004850:	69bb      	ldr	r3, [r7, #24]
 8004852:	4013      	ands	r3, r2
 8004854:	2b00      	cmp	r3, #0
 8004856:	f000 808f 	beq.w	8004978 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	4a2c      	ldr	r2, [pc, #176]	; (8004910 <HAL_DMA_IRQHandler+0x3f8>)
 8004860:	4293      	cmp	r3, r2
 8004862:	d04a      	beq.n	80048fa <HAL_DMA_IRQHandler+0x3e2>
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	4a2a      	ldr	r2, [pc, #168]	; (8004914 <HAL_DMA_IRQHandler+0x3fc>)
 800486a:	4293      	cmp	r3, r2
 800486c:	d045      	beq.n	80048fa <HAL_DMA_IRQHandler+0x3e2>
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	4a29      	ldr	r2, [pc, #164]	; (8004918 <HAL_DMA_IRQHandler+0x400>)
 8004874:	4293      	cmp	r3, r2
 8004876:	d040      	beq.n	80048fa <HAL_DMA_IRQHandler+0x3e2>
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	4a27      	ldr	r2, [pc, #156]	; (800491c <HAL_DMA_IRQHandler+0x404>)
 800487e:	4293      	cmp	r3, r2
 8004880:	d03b      	beq.n	80048fa <HAL_DMA_IRQHandler+0x3e2>
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	4a26      	ldr	r2, [pc, #152]	; (8004920 <HAL_DMA_IRQHandler+0x408>)
 8004888:	4293      	cmp	r3, r2
 800488a:	d036      	beq.n	80048fa <HAL_DMA_IRQHandler+0x3e2>
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	4a24      	ldr	r2, [pc, #144]	; (8004924 <HAL_DMA_IRQHandler+0x40c>)
 8004892:	4293      	cmp	r3, r2
 8004894:	d031      	beq.n	80048fa <HAL_DMA_IRQHandler+0x3e2>
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	4a23      	ldr	r2, [pc, #140]	; (8004928 <HAL_DMA_IRQHandler+0x410>)
 800489c:	4293      	cmp	r3, r2
 800489e:	d02c      	beq.n	80048fa <HAL_DMA_IRQHandler+0x3e2>
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	4a21      	ldr	r2, [pc, #132]	; (800492c <HAL_DMA_IRQHandler+0x414>)
 80048a6:	4293      	cmp	r3, r2
 80048a8:	d027      	beq.n	80048fa <HAL_DMA_IRQHandler+0x3e2>
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	4a20      	ldr	r2, [pc, #128]	; (8004930 <HAL_DMA_IRQHandler+0x418>)
 80048b0:	4293      	cmp	r3, r2
 80048b2:	d022      	beq.n	80048fa <HAL_DMA_IRQHandler+0x3e2>
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	4a1e      	ldr	r2, [pc, #120]	; (8004934 <HAL_DMA_IRQHandler+0x41c>)
 80048ba:	4293      	cmp	r3, r2
 80048bc:	d01d      	beq.n	80048fa <HAL_DMA_IRQHandler+0x3e2>
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	4a1d      	ldr	r2, [pc, #116]	; (8004938 <HAL_DMA_IRQHandler+0x420>)
 80048c4:	4293      	cmp	r3, r2
 80048c6:	d018      	beq.n	80048fa <HAL_DMA_IRQHandler+0x3e2>
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	4a1b      	ldr	r2, [pc, #108]	; (800493c <HAL_DMA_IRQHandler+0x424>)
 80048ce:	4293      	cmp	r3, r2
 80048d0:	d013      	beq.n	80048fa <HAL_DMA_IRQHandler+0x3e2>
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	4a1a      	ldr	r2, [pc, #104]	; (8004940 <HAL_DMA_IRQHandler+0x428>)
 80048d8:	4293      	cmp	r3, r2
 80048da:	d00e      	beq.n	80048fa <HAL_DMA_IRQHandler+0x3e2>
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	4a18      	ldr	r2, [pc, #96]	; (8004944 <HAL_DMA_IRQHandler+0x42c>)
 80048e2:	4293      	cmp	r3, r2
 80048e4:	d009      	beq.n	80048fa <HAL_DMA_IRQHandler+0x3e2>
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	4a17      	ldr	r2, [pc, #92]	; (8004948 <HAL_DMA_IRQHandler+0x430>)
 80048ec:	4293      	cmp	r3, r2
 80048ee:	d004      	beq.n	80048fa <HAL_DMA_IRQHandler+0x3e2>
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	4a15      	ldr	r2, [pc, #84]	; (800494c <HAL_DMA_IRQHandler+0x434>)
 80048f6:	4293      	cmp	r3, r2
 80048f8:	d12a      	bne.n	8004950 <HAL_DMA_IRQHandler+0x438>
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	f003 0302 	and.w	r3, r3, #2
 8004904:	2b00      	cmp	r3, #0
 8004906:	bf14      	ite	ne
 8004908:	2301      	movne	r3, #1
 800490a:	2300      	moveq	r3, #0
 800490c:	b2db      	uxtb	r3, r3
 800490e:	e023      	b.n	8004958 <HAL_DMA_IRQHandler+0x440>
 8004910:	40020010 	.word	0x40020010
 8004914:	40020028 	.word	0x40020028
 8004918:	40020040 	.word	0x40020040
 800491c:	40020058 	.word	0x40020058
 8004920:	40020070 	.word	0x40020070
 8004924:	40020088 	.word	0x40020088
 8004928:	400200a0 	.word	0x400200a0
 800492c:	400200b8 	.word	0x400200b8
 8004930:	40020410 	.word	0x40020410
 8004934:	40020428 	.word	0x40020428
 8004938:	40020440 	.word	0x40020440
 800493c:	40020458 	.word	0x40020458
 8004940:	40020470 	.word	0x40020470
 8004944:	40020488 	.word	0x40020488
 8004948:	400204a0 	.word	0x400204a0
 800494c:	400204b8 	.word	0x400204b8
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	2300      	movs	r3, #0
 8004958:	2b00      	cmp	r3, #0
 800495a:	d00d      	beq.n	8004978 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004960:	f003 031f 	and.w	r3, r3, #31
 8004964:	2204      	movs	r2, #4
 8004966:	409a      	lsls	r2, r3
 8004968:	6a3b      	ldr	r3, [r7, #32]
 800496a:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004970:	f043 0204 	orr.w	r2, r3, #4
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800497c:	f003 031f 	and.w	r3, r3, #31
 8004980:	2210      	movs	r2, #16
 8004982:	409a      	lsls	r2, r3
 8004984:	69bb      	ldr	r3, [r7, #24]
 8004986:	4013      	ands	r3, r2
 8004988:	2b00      	cmp	r3, #0
 800498a:	f000 80a6 	beq.w	8004ada <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	4a85      	ldr	r2, [pc, #532]	; (8004ba8 <HAL_DMA_IRQHandler+0x690>)
 8004994:	4293      	cmp	r3, r2
 8004996:	d04a      	beq.n	8004a2e <HAL_DMA_IRQHandler+0x516>
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	4a83      	ldr	r2, [pc, #524]	; (8004bac <HAL_DMA_IRQHandler+0x694>)
 800499e:	4293      	cmp	r3, r2
 80049a0:	d045      	beq.n	8004a2e <HAL_DMA_IRQHandler+0x516>
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	4a82      	ldr	r2, [pc, #520]	; (8004bb0 <HAL_DMA_IRQHandler+0x698>)
 80049a8:	4293      	cmp	r3, r2
 80049aa:	d040      	beq.n	8004a2e <HAL_DMA_IRQHandler+0x516>
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	4a80      	ldr	r2, [pc, #512]	; (8004bb4 <HAL_DMA_IRQHandler+0x69c>)
 80049b2:	4293      	cmp	r3, r2
 80049b4:	d03b      	beq.n	8004a2e <HAL_DMA_IRQHandler+0x516>
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	4a7f      	ldr	r2, [pc, #508]	; (8004bb8 <HAL_DMA_IRQHandler+0x6a0>)
 80049bc:	4293      	cmp	r3, r2
 80049be:	d036      	beq.n	8004a2e <HAL_DMA_IRQHandler+0x516>
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	4a7d      	ldr	r2, [pc, #500]	; (8004bbc <HAL_DMA_IRQHandler+0x6a4>)
 80049c6:	4293      	cmp	r3, r2
 80049c8:	d031      	beq.n	8004a2e <HAL_DMA_IRQHandler+0x516>
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	4a7c      	ldr	r2, [pc, #496]	; (8004bc0 <HAL_DMA_IRQHandler+0x6a8>)
 80049d0:	4293      	cmp	r3, r2
 80049d2:	d02c      	beq.n	8004a2e <HAL_DMA_IRQHandler+0x516>
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	4a7a      	ldr	r2, [pc, #488]	; (8004bc4 <HAL_DMA_IRQHandler+0x6ac>)
 80049da:	4293      	cmp	r3, r2
 80049dc:	d027      	beq.n	8004a2e <HAL_DMA_IRQHandler+0x516>
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	4a79      	ldr	r2, [pc, #484]	; (8004bc8 <HAL_DMA_IRQHandler+0x6b0>)
 80049e4:	4293      	cmp	r3, r2
 80049e6:	d022      	beq.n	8004a2e <HAL_DMA_IRQHandler+0x516>
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	4a77      	ldr	r2, [pc, #476]	; (8004bcc <HAL_DMA_IRQHandler+0x6b4>)
 80049ee:	4293      	cmp	r3, r2
 80049f0:	d01d      	beq.n	8004a2e <HAL_DMA_IRQHandler+0x516>
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	4a76      	ldr	r2, [pc, #472]	; (8004bd0 <HAL_DMA_IRQHandler+0x6b8>)
 80049f8:	4293      	cmp	r3, r2
 80049fa:	d018      	beq.n	8004a2e <HAL_DMA_IRQHandler+0x516>
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	4a74      	ldr	r2, [pc, #464]	; (8004bd4 <HAL_DMA_IRQHandler+0x6bc>)
 8004a02:	4293      	cmp	r3, r2
 8004a04:	d013      	beq.n	8004a2e <HAL_DMA_IRQHandler+0x516>
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	4a73      	ldr	r2, [pc, #460]	; (8004bd8 <HAL_DMA_IRQHandler+0x6c0>)
 8004a0c:	4293      	cmp	r3, r2
 8004a0e:	d00e      	beq.n	8004a2e <HAL_DMA_IRQHandler+0x516>
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	4a71      	ldr	r2, [pc, #452]	; (8004bdc <HAL_DMA_IRQHandler+0x6c4>)
 8004a16:	4293      	cmp	r3, r2
 8004a18:	d009      	beq.n	8004a2e <HAL_DMA_IRQHandler+0x516>
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	4a70      	ldr	r2, [pc, #448]	; (8004be0 <HAL_DMA_IRQHandler+0x6c8>)
 8004a20:	4293      	cmp	r3, r2
 8004a22:	d004      	beq.n	8004a2e <HAL_DMA_IRQHandler+0x516>
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	4a6e      	ldr	r2, [pc, #440]	; (8004be4 <HAL_DMA_IRQHandler+0x6cc>)
 8004a2a:	4293      	cmp	r3, r2
 8004a2c:	d10a      	bne.n	8004a44 <HAL_DMA_IRQHandler+0x52c>
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	f003 0308 	and.w	r3, r3, #8
 8004a38:	2b00      	cmp	r3, #0
 8004a3a:	bf14      	ite	ne
 8004a3c:	2301      	movne	r3, #1
 8004a3e:	2300      	moveq	r3, #0
 8004a40:	b2db      	uxtb	r3, r3
 8004a42:	e009      	b.n	8004a58 <HAL_DMA_IRQHandler+0x540>
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	f003 0304 	and.w	r3, r3, #4
 8004a4e:	2b00      	cmp	r3, #0
 8004a50:	bf14      	ite	ne
 8004a52:	2301      	movne	r3, #1
 8004a54:	2300      	moveq	r3, #0
 8004a56:	b2db      	uxtb	r3, r3
 8004a58:	2b00      	cmp	r3, #0
 8004a5a:	d03e      	beq.n	8004ada <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004a60:	f003 031f 	and.w	r3, r3, #31
 8004a64:	2210      	movs	r2, #16
 8004a66:	409a      	lsls	r2, r3
 8004a68:	6a3b      	ldr	r3, [r7, #32]
 8004a6a:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004a76:	2b00      	cmp	r3, #0
 8004a78:	d018      	beq.n	8004aac <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004a84:	2b00      	cmp	r3, #0
 8004a86:	d108      	bne.n	8004a9a <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a8c:	2b00      	cmp	r3, #0
 8004a8e:	d024      	beq.n	8004ada <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a94:	6878      	ldr	r0, [r7, #4]
 8004a96:	4798      	blx	r3
 8004a98:	e01f      	b.n	8004ada <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004a9e:	2b00      	cmp	r3, #0
 8004aa0:	d01b      	beq.n	8004ada <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004aa6:	6878      	ldr	r0, [r7, #4]
 8004aa8:	4798      	blx	r3
 8004aaa:	e016      	b.n	8004ada <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004ab6:	2b00      	cmp	r3, #0
 8004ab8:	d107      	bne.n	8004aca <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	681b      	ldr	r3, [r3, #0]
 8004abe:	681a      	ldr	r2, [r3, #0]
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	f022 0208 	bic.w	r2, r2, #8
 8004ac8:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ace:	2b00      	cmp	r3, #0
 8004ad0:	d003      	beq.n	8004ada <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ad6:	6878      	ldr	r0, [r7, #4]
 8004ad8:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004ade:	f003 031f 	and.w	r3, r3, #31
 8004ae2:	2220      	movs	r2, #32
 8004ae4:	409a      	lsls	r2, r3
 8004ae6:	69bb      	ldr	r3, [r7, #24]
 8004ae8:	4013      	ands	r3, r2
 8004aea:	2b00      	cmp	r3, #0
 8004aec:	f000 8110 	beq.w	8004d10 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	4a2c      	ldr	r2, [pc, #176]	; (8004ba8 <HAL_DMA_IRQHandler+0x690>)
 8004af6:	4293      	cmp	r3, r2
 8004af8:	d04a      	beq.n	8004b90 <HAL_DMA_IRQHandler+0x678>
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	4a2b      	ldr	r2, [pc, #172]	; (8004bac <HAL_DMA_IRQHandler+0x694>)
 8004b00:	4293      	cmp	r3, r2
 8004b02:	d045      	beq.n	8004b90 <HAL_DMA_IRQHandler+0x678>
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	4a29      	ldr	r2, [pc, #164]	; (8004bb0 <HAL_DMA_IRQHandler+0x698>)
 8004b0a:	4293      	cmp	r3, r2
 8004b0c:	d040      	beq.n	8004b90 <HAL_DMA_IRQHandler+0x678>
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	4a28      	ldr	r2, [pc, #160]	; (8004bb4 <HAL_DMA_IRQHandler+0x69c>)
 8004b14:	4293      	cmp	r3, r2
 8004b16:	d03b      	beq.n	8004b90 <HAL_DMA_IRQHandler+0x678>
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	4a26      	ldr	r2, [pc, #152]	; (8004bb8 <HAL_DMA_IRQHandler+0x6a0>)
 8004b1e:	4293      	cmp	r3, r2
 8004b20:	d036      	beq.n	8004b90 <HAL_DMA_IRQHandler+0x678>
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	4a25      	ldr	r2, [pc, #148]	; (8004bbc <HAL_DMA_IRQHandler+0x6a4>)
 8004b28:	4293      	cmp	r3, r2
 8004b2a:	d031      	beq.n	8004b90 <HAL_DMA_IRQHandler+0x678>
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	4a23      	ldr	r2, [pc, #140]	; (8004bc0 <HAL_DMA_IRQHandler+0x6a8>)
 8004b32:	4293      	cmp	r3, r2
 8004b34:	d02c      	beq.n	8004b90 <HAL_DMA_IRQHandler+0x678>
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	4a22      	ldr	r2, [pc, #136]	; (8004bc4 <HAL_DMA_IRQHandler+0x6ac>)
 8004b3c:	4293      	cmp	r3, r2
 8004b3e:	d027      	beq.n	8004b90 <HAL_DMA_IRQHandler+0x678>
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	4a20      	ldr	r2, [pc, #128]	; (8004bc8 <HAL_DMA_IRQHandler+0x6b0>)
 8004b46:	4293      	cmp	r3, r2
 8004b48:	d022      	beq.n	8004b90 <HAL_DMA_IRQHandler+0x678>
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	4a1f      	ldr	r2, [pc, #124]	; (8004bcc <HAL_DMA_IRQHandler+0x6b4>)
 8004b50:	4293      	cmp	r3, r2
 8004b52:	d01d      	beq.n	8004b90 <HAL_DMA_IRQHandler+0x678>
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	4a1d      	ldr	r2, [pc, #116]	; (8004bd0 <HAL_DMA_IRQHandler+0x6b8>)
 8004b5a:	4293      	cmp	r3, r2
 8004b5c:	d018      	beq.n	8004b90 <HAL_DMA_IRQHandler+0x678>
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	4a1c      	ldr	r2, [pc, #112]	; (8004bd4 <HAL_DMA_IRQHandler+0x6bc>)
 8004b64:	4293      	cmp	r3, r2
 8004b66:	d013      	beq.n	8004b90 <HAL_DMA_IRQHandler+0x678>
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	4a1a      	ldr	r2, [pc, #104]	; (8004bd8 <HAL_DMA_IRQHandler+0x6c0>)
 8004b6e:	4293      	cmp	r3, r2
 8004b70:	d00e      	beq.n	8004b90 <HAL_DMA_IRQHandler+0x678>
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	4a19      	ldr	r2, [pc, #100]	; (8004bdc <HAL_DMA_IRQHandler+0x6c4>)
 8004b78:	4293      	cmp	r3, r2
 8004b7a:	d009      	beq.n	8004b90 <HAL_DMA_IRQHandler+0x678>
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	4a17      	ldr	r2, [pc, #92]	; (8004be0 <HAL_DMA_IRQHandler+0x6c8>)
 8004b82:	4293      	cmp	r3, r2
 8004b84:	d004      	beq.n	8004b90 <HAL_DMA_IRQHandler+0x678>
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	4a16      	ldr	r2, [pc, #88]	; (8004be4 <HAL_DMA_IRQHandler+0x6cc>)
 8004b8c:	4293      	cmp	r3, r2
 8004b8e:	d12b      	bne.n	8004be8 <HAL_DMA_IRQHandler+0x6d0>
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	f003 0310 	and.w	r3, r3, #16
 8004b9a:	2b00      	cmp	r3, #0
 8004b9c:	bf14      	ite	ne
 8004b9e:	2301      	movne	r3, #1
 8004ba0:	2300      	moveq	r3, #0
 8004ba2:	b2db      	uxtb	r3, r3
 8004ba4:	e02a      	b.n	8004bfc <HAL_DMA_IRQHandler+0x6e4>
 8004ba6:	bf00      	nop
 8004ba8:	40020010 	.word	0x40020010
 8004bac:	40020028 	.word	0x40020028
 8004bb0:	40020040 	.word	0x40020040
 8004bb4:	40020058 	.word	0x40020058
 8004bb8:	40020070 	.word	0x40020070
 8004bbc:	40020088 	.word	0x40020088
 8004bc0:	400200a0 	.word	0x400200a0
 8004bc4:	400200b8 	.word	0x400200b8
 8004bc8:	40020410 	.word	0x40020410
 8004bcc:	40020428 	.word	0x40020428
 8004bd0:	40020440 	.word	0x40020440
 8004bd4:	40020458 	.word	0x40020458
 8004bd8:	40020470 	.word	0x40020470
 8004bdc:	40020488 	.word	0x40020488
 8004be0:	400204a0 	.word	0x400204a0
 8004be4:	400204b8 	.word	0x400204b8
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	f003 0302 	and.w	r3, r3, #2
 8004bf2:	2b00      	cmp	r3, #0
 8004bf4:	bf14      	ite	ne
 8004bf6:	2301      	movne	r3, #1
 8004bf8:	2300      	moveq	r3, #0
 8004bfa:	b2db      	uxtb	r3, r3
 8004bfc:	2b00      	cmp	r3, #0
 8004bfe:	f000 8087 	beq.w	8004d10 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004c06:	f003 031f 	and.w	r3, r3, #31
 8004c0a:	2220      	movs	r2, #32
 8004c0c:	409a      	lsls	r2, r3
 8004c0e:	6a3b      	ldr	r3, [r7, #32]
 8004c10:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004c18:	b2db      	uxtb	r3, r3
 8004c1a:	2b04      	cmp	r3, #4
 8004c1c:	d139      	bne.n	8004c92 <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	681a      	ldr	r2, [r3, #0]
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	f022 0216 	bic.w	r2, r2, #22
 8004c2c:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	695a      	ldr	r2, [r3, #20]
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004c3c:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c42:	2b00      	cmp	r3, #0
 8004c44:	d103      	bne.n	8004c4e <HAL_DMA_IRQHandler+0x736>
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004c4a:	2b00      	cmp	r3, #0
 8004c4c:	d007      	beq.n	8004c5e <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	681a      	ldr	r2, [r3, #0]
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	f022 0208 	bic.w	r2, r2, #8
 8004c5c:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004c62:	f003 031f 	and.w	r3, r3, #31
 8004c66:	223f      	movs	r2, #63	; 0x3f
 8004c68:	409a      	lsls	r2, r3
 8004c6a:	6a3b      	ldr	r3, [r7, #32]
 8004c6c:	609a      	str	r2, [r3, #8]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	2200      	movs	r2, #0
 8004c72:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	2201      	movs	r2, #1
 8004c7a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          if(hdma->XferAbortCallback != NULL)
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004c82:	2b00      	cmp	r3, #0
 8004c84:	f000 834a 	beq.w	800531c <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004c8c:	6878      	ldr	r0, [r7, #4]
 8004c8e:	4798      	blx	r3
          }
          return;
 8004c90:	e344      	b.n	800531c <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004c9c:	2b00      	cmp	r3, #0
 8004c9e:	d018      	beq.n	8004cd2 <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004caa:	2b00      	cmp	r3, #0
 8004cac:	d108      	bne.n	8004cc0 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004cb2:	2b00      	cmp	r3, #0
 8004cb4:	d02c      	beq.n	8004d10 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004cba:	6878      	ldr	r0, [r7, #4]
 8004cbc:	4798      	blx	r3
 8004cbe:	e027      	b.n	8004d10 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004cc4:	2b00      	cmp	r3, #0
 8004cc6:	d023      	beq.n	8004d10 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004ccc:	6878      	ldr	r0, [r7, #4]
 8004cce:	4798      	blx	r3
 8004cd0:	e01e      	b.n	8004d10 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004cdc:	2b00      	cmp	r3, #0
 8004cde:	d10f      	bne.n	8004d00 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	681a      	ldr	r2, [r3, #0]
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	f022 0210 	bic.w	r2, r2, #16
 8004cee:	601a      	str	r2, [r3, #0]

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	2200      	movs	r2, #0
 8004cf4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	2201      	movs	r2, #1
 8004cfc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
          }

          if(hdma->XferCpltCallback != NULL)
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004d04:	2b00      	cmp	r3, #0
 8004d06:	d003      	beq.n	8004d10 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004d0c:	6878      	ldr	r0, [r7, #4]
 8004d0e:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004d14:	2b00      	cmp	r3, #0
 8004d16:	f000 8306 	beq.w	8005326 <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004d1e:	f003 0301 	and.w	r3, r3, #1
 8004d22:	2b00      	cmp	r3, #0
 8004d24:	f000 8088 	beq.w	8004e38 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	2204      	movs	r2, #4
 8004d2c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	4a7a      	ldr	r2, [pc, #488]	; (8004f20 <HAL_DMA_IRQHandler+0xa08>)
 8004d36:	4293      	cmp	r3, r2
 8004d38:	d04a      	beq.n	8004dd0 <HAL_DMA_IRQHandler+0x8b8>
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	4a79      	ldr	r2, [pc, #484]	; (8004f24 <HAL_DMA_IRQHandler+0xa0c>)
 8004d40:	4293      	cmp	r3, r2
 8004d42:	d045      	beq.n	8004dd0 <HAL_DMA_IRQHandler+0x8b8>
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	4a77      	ldr	r2, [pc, #476]	; (8004f28 <HAL_DMA_IRQHandler+0xa10>)
 8004d4a:	4293      	cmp	r3, r2
 8004d4c:	d040      	beq.n	8004dd0 <HAL_DMA_IRQHandler+0x8b8>
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	4a76      	ldr	r2, [pc, #472]	; (8004f2c <HAL_DMA_IRQHandler+0xa14>)
 8004d54:	4293      	cmp	r3, r2
 8004d56:	d03b      	beq.n	8004dd0 <HAL_DMA_IRQHandler+0x8b8>
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	4a74      	ldr	r2, [pc, #464]	; (8004f30 <HAL_DMA_IRQHandler+0xa18>)
 8004d5e:	4293      	cmp	r3, r2
 8004d60:	d036      	beq.n	8004dd0 <HAL_DMA_IRQHandler+0x8b8>
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	4a73      	ldr	r2, [pc, #460]	; (8004f34 <HAL_DMA_IRQHandler+0xa1c>)
 8004d68:	4293      	cmp	r3, r2
 8004d6a:	d031      	beq.n	8004dd0 <HAL_DMA_IRQHandler+0x8b8>
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	4a71      	ldr	r2, [pc, #452]	; (8004f38 <HAL_DMA_IRQHandler+0xa20>)
 8004d72:	4293      	cmp	r3, r2
 8004d74:	d02c      	beq.n	8004dd0 <HAL_DMA_IRQHandler+0x8b8>
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	4a70      	ldr	r2, [pc, #448]	; (8004f3c <HAL_DMA_IRQHandler+0xa24>)
 8004d7c:	4293      	cmp	r3, r2
 8004d7e:	d027      	beq.n	8004dd0 <HAL_DMA_IRQHandler+0x8b8>
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	4a6e      	ldr	r2, [pc, #440]	; (8004f40 <HAL_DMA_IRQHandler+0xa28>)
 8004d86:	4293      	cmp	r3, r2
 8004d88:	d022      	beq.n	8004dd0 <HAL_DMA_IRQHandler+0x8b8>
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	4a6d      	ldr	r2, [pc, #436]	; (8004f44 <HAL_DMA_IRQHandler+0xa2c>)
 8004d90:	4293      	cmp	r3, r2
 8004d92:	d01d      	beq.n	8004dd0 <HAL_DMA_IRQHandler+0x8b8>
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	4a6b      	ldr	r2, [pc, #428]	; (8004f48 <HAL_DMA_IRQHandler+0xa30>)
 8004d9a:	4293      	cmp	r3, r2
 8004d9c:	d018      	beq.n	8004dd0 <HAL_DMA_IRQHandler+0x8b8>
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	4a6a      	ldr	r2, [pc, #424]	; (8004f4c <HAL_DMA_IRQHandler+0xa34>)
 8004da4:	4293      	cmp	r3, r2
 8004da6:	d013      	beq.n	8004dd0 <HAL_DMA_IRQHandler+0x8b8>
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	4a68      	ldr	r2, [pc, #416]	; (8004f50 <HAL_DMA_IRQHandler+0xa38>)
 8004dae:	4293      	cmp	r3, r2
 8004db0:	d00e      	beq.n	8004dd0 <HAL_DMA_IRQHandler+0x8b8>
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	4a67      	ldr	r2, [pc, #412]	; (8004f54 <HAL_DMA_IRQHandler+0xa3c>)
 8004db8:	4293      	cmp	r3, r2
 8004dba:	d009      	beq.n	8004dd0 <HAL_DMA_IRQHandler+0x8b8>
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	4a65      	ldr	r2, [pc, #404]	; (8004f58 <HAL_DMA_IRQHandler+0xa40>)
 8004dc2:	4293      	cmp	r3, r2
 8004dc4:	d004      	beq.n	8004dd0 <HAL_DMA_IRQHandler+0x8b8>
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	4a64      	ldr	r2, [pc, #400]	; (8004f5c <HAL_DMA_IRQHandler+0xa44>)
 8004dcc:	4293      	cmp	r3, r2
 8004dce:	d108      	bne.n	8004de2 <HAL_DMA_IRQHandler+0x8ca>
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	681a      	ldr	r2, [r3, #0]
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	f022 0201 	bic.w	r2, r2, #1
 8004dde:	601a      	str	r2, [r3, #0]
 8004de0:	e007      	b.n	8004df2 <HAL_DMA_IRQHandler+0x8da>
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	681b      	ldr	r3, [r3, #0]
 8004de6:	681a      	ldr	r2, [r3, #0]
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	f022 0201 	bic.w	r2, r2, #1
 8004df0:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 8004df2:	68fb      	ldr	r3, [r7, #12]
 8004df4:	3301      	adds	r3, #1
 8004df6:	60fb      	str	r3, [r7, #12]
 8004df8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004dfa:	429a      	cmp	r2, r3
 8004dfc:	d307      	bcc.n	8004e0e <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	681b      	ldr	r3, [r3, #0]
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	f003 0301 	and.w	r3, r3, #1
 8004e08:	2b00      	cmp	r3, #0
 8004e0a:	d1f2      	bne.n	8004df2 <HAL_DMA_IRQHandler+0x8da>
 8004e0c:	e000      	b.n	8004e10 <HAL_DMA_IRQHandler+0x8f8>
            break;
 8004e0e:	bf00      	nop

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	2200      	movs	r2, #0
 8004e14:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	f003 0301 	and.w	r3, r3, #1
 8004e22:	2b00      	cmp	r3, #0
 8004e24:	d004      	beq.n	8004e30 <HAL_DMA_IRQHandler+0x918>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	2203      	movs	r2, #3
 8004e2a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 8004e2e:	e003      	b.n	8004e38 <HAL_DMA_IRQHandler+0x920>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	2201      	movs	r2, #1
 8004e34:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }
      }

      if(hdma->XferErrorCallback != NULL)
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004e3c:	2b00      	cmp	r3, #0
 8004e3e:	f000 8272 	beq.w	8005326 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004e46:	6878      	ldr	r0, [r7, #4]
 8004e48:	4798      	blx	r3
 8004e4a:	e26c      	b.n	8005326 <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	4a43      	ldr	r2, [pc, #268]	; (8004f60 <HAL_DMA_IRQHandler+0xa48>)
 8004e52:	4293      	cmp	r3, r2
 8004e54:	d022      	beq.n	8004e9c <HAL_DMA_IRQHandler+0x984>
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	4a42      	ldr	r2, [pc, #264]	; (8004f64 <HAL_DMA_IRQHandler+0xa4c>)
 8004e5c:	4293      	cmp	r3, r2
 8004e5e:	d01d      	beq.n	8004e9c <HAL_DMA_IRQHandler+0x984>
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	4a40      	ldr	r2, [pc, #256]	; (8004f68 <HAL_DMA_IRQHandler+0xa50>)
 8004e66:	4293      	cmp	r3, r2
 8004e68:	d018      	beq.n	8004e9c <HAL_DMA_IRQHandler+0x984>
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	4a3f      	ldr	r2, [pc, #252]	; (8004f6c <HAL_DMA_IRQHandler+0xa54>)
 8004e70:	4293      	cmp	r3, r2
 8004e72:	d013      	beq.n	8004e9c <HAL_DMA_IRQHandler+0x984>
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	681b      	ldr	r3, [r3, #0]
 8004e78:	4a3d      	ldr	r2, [pc, #244]	; (8004f70 <HAL_DMA_IRQHandler+0xa58>)
 8004e7a:	4293      	cmp	r3, r2
 8004e7c:	d00e      	beq.n	8004e9c <HAL_DMA_IRQHandler+0x984>
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	681b      	ldr	r3, [r3, #0]
 8004e82:	4a3c      	ldr	r2, [pc, #240]	; (8004f74 <HAL_DMA_IRQHandler+0xa5c>)
 8004e84:	4293      	cmp	r3, r2
 8004e86:	d009      	beq.n	8004e9c <HAL_DMA_IRQHandler+0x984>
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	4a3a      	ldr	r2, [pc, #232]	; (8004f78 <HAL_DMA_IRQHandler+0xa60>)
 8004e8e:	4293      	cmp	r3, r2
 8004e90:	d004      	beq.n	8004e9c <HAL_DMA_IRQHandler+0x984>
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	681b      	ldr	r3, [r3, #0]
 8004e96:	4a39      	ldr	r2, [pc, #228]	; (8004f7c <HAL_DMA_IRQHandler+0xa64>)
 8004e98:	4293      	cmp	r3, r2
 8004e9a:	d101      	bne.n	8004ea0 <HAL_DMA_IRQHandler+0x988>
 8004e9c:	2301      	movs	r3, #1
 8004e9e:	e000      	b.n	8004ea2 <HAL_DMA_IRQHandler+0x98a>
 8004ea0:	2300      	movs	r3, #0
 8004ea2:	2b00      	cmp	r3, #0
 8004ea4:	f000 823f 	beq.w	8005326 <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	681b      	ldr	r3, [r3, #0]
 8004eae:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004eb4:	f003 031f 	and.w	r3, r3, #31
 8004eb8:	2204      	movs	r2, #4
 8004eba:	409a      	lsls	r2, r3
 8004ebc:	697b      	ldr	r3, [r7, #20]
 8004ebe:	4013      	ands	r3, r2
 8004ec0:	2b00      	cmp	r3, #0
 8004ec2:	f000 80cd 	beq.w	8005060 <HAL_DMA_IRQHandler+0xb48>
 8004ec6:	693b      	ldr	r3, [r7, #16]
 8004ec8:	f003 0304 	and.w	r3, r3, #4
 8004ecc:	2b00      	cmp	r3, #0
 8004ece:	f000 80c7 	beq.w	8005060 <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004ed6:	f003 031f 	and.w	r3, r3, #31
 8004eda:	2204      	movs	r2, #4
 8004edc:	409a      	lsls	r2, r3
 8004ede:	69fb      	ldr	r3, [r7, #28]
 8004ee0:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004ee2:	693b      	ldr	r3, [r7, #16]
 8004ee4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004ee8:	2b00      	cmp	r3, #0
 8004eea:	d049      	beq.n	8004f80 <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8004eec:	693b      	ldr	r3, [r7, #16]
 8004eee:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004ef2:	2b00      	cmp	r3, #0
 8004ef4:	d109      	bne.n	8004f0a <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004efa:	2b00      	cmp	r3, #0
 8004efc:	f000 8210 	beq.w	8005320 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004f04:	6878      	ldr	r0, [r7, #4]
 8004f06:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004f08:	e20a      	b.n	8005320 <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f0e:	2b00      	cmp	r3, #0
 8004f10:	f000 8206 	beq.w	8005320 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f18:	6878      	ldr	r0, [r7, #4]
 8004f1a:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004f1c:	e200      	b.n	8005320 <HAL_DMA_IRQHandler+0xe08>
 8004f1e:	bf00      	nop
 8004f20:	40020010 	.word	0x40020010
 8004f24:	40020028 	.word	0x40020028
 8004f28:	40020040 	.word	0x40020040
 8004f2c:	40020058 	.word	0x40020058
 8004f30:	40020070 	.word	0x40020070
 8004f34:	40020088 	.word	0x40020088
 8004f38:	400200a0 	.word	0x400200a0
 8004f3c:	400200b8 	.word	0x400200b8
 8004f40:	40020410 	.word	0x40020410
 8004f44:	40020428 	.word	0x40020428
 8004f48:	40020440 	.word	0x40020440
 8004f4c:	40020458 	.word	0x40020458
 8004f50:	40020470 	.word	0x40020470
 8004f54:	40020488 	.word	0x40020488
 8004f58:	400204a0 	.word	0x400204a0
 8004f5c:	400204b8 	.word	0x400204b8
 8004f60:	58025408 	.word	0x58025408
 8004f64:	5802541c 	.word	0x5802541c
 8004f68:	58025430 	.word	0x58025430
 8004f6c:	58025444 	.word	0x58025444
 8004f70:	58025458 	.word	0x58025458
 8004f74:	5802546c 	.word	0x5802546c
 8004f78:	58025480 	.word	0x58025480
 8004f7c:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8004f80:	693b      	ldr	r3, [r7, #16]
 8004f82:	f003 0320 	and.w	r3, r3, #32
 8004f86:	2b00      	cmp	r3, #0
 8004f88:	d160      	bne.n	800504c <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	681b      	ldr	r3, [r3, #0]
 8004f8e:	4a8c      	ldr	r2, [pc, #560]	; (80051c0 <HAL_DMA_IRQHandler+0xca8>)
 8004f90:	4293      	cmp	r3, r2
 8004f92:	d04a      	beq.n	800502a <HAL_DMA_IRQHandler+0xb12>
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	4a8a      	ldr	r2, [pc, #552]	; (80051c4 <HAL_DMA_IRQHandler+0xcac>)
 8004f9a:	4293      	cmp	r3, r2
 8004f9c:	d045      	beq.n	800502a <HAL_DMA_IRQHandler+0xb12>
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	681b      	ldr	r3, [r3, #0]
 8004fa2:	4a89      	ldr	r2, [pc, #548]	; (80051c8 <HAL_DMA_IRQHandler+0xcb0>)
 8004fa4:	4293      	cmp	r3, r2
 8004fa6:	d040      	beq.n	800502a <HAL_DMA_IRQHandler+0xb12>
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	4a87      	ldr	r2, [pc, #540]	; (80051cc <HAL_DMA_IRQHandler+0xcb4>)
 8004fae:	4293      	cmp	r3, r2
 8004fb0:	d03b      	beq.n	800502a <HAL_DMA_IRQHandler+0xb12>
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	681b      	ldr	r3, [r3, #0]
 8004fb6:	4a86      	ldr	r2, [pc, #536]	; (80051d0 <HAL_DMA_IRQHandler+0xcb8>)
 8004fb8:	4293      	cmp	r3, r2
 8004fba:	d036      	beq.n	800502a <HAL_DMA_IRQHandler+0xb12>
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	681b      	ldr	r3, [r3, #0]
 8004fc0:	4a84      	ldr	r2, [pc, #528]	; (80051d4 <HAL_DMA_IRQHandler+0xcbc>)
 8004fc2:	4293      	cmp	r3, r2
 8004fc4:	d031      	beq.n	800502a <HAL_DMA_IRQHandler+0xb12>
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	4a83      	ldr	r2, [pc, #524]	; (80051d8 <HAL_DMA_IRQHandler+0xcc0>)
 8004fcc:	4293      	cmp	r3, r2
 8004fce:	d02c      	beq.n	800502a <HAL_DMA_IRQHandler+0xb12>
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	4a81      	ldr	r2, [pc, #516]	; (80051dc <HAL_DMA_IRQHandler+0xcc4>)
 8004fd6:	4293      	cmp	r3, r2
 8004fd8:	d027      	beq.n	800502a <HAL_DMA_IRQHandler+0xb12>
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	681b      	ldr	r3, [r3, #0]
 8004fde:	4a80      	ldr	r2, [pc, #512]	; (80051e0 <HAL_DMA_IRQHandler+0xcc8>)
 8004fe0:	4293      	cmp	r3, r2
 8004fe2:	d022      	beq.n	800502a <HAL_DMA_IRQHandler+0xb12>
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	4a7e      	ldr	r2, [pc, #504]	; (80051e4 <HAL_DMA_IRQHandler+0xccc>)
 8004fea:	4293      	cmp	r3, r2
 8004fec:	d01d      	beq.n	800502a <HAL_DMA_IRQHandler+0xb12>
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	681b      	ldr	r3, [r3, #0]
 8004ff2:	4a7d      	ldr	r2, [pc, #500]	; (80051e8 <HAL_DMA_IRQHandler+0xcd0>)
 8004ff4:	4293      	cmp	r3, r2
 8004ff6:	d018      	beq.n	800502a <HAL_DMA_IRQHandler+0xb12>
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	4a7b      	ldr	r2, [pc, #492]	; (80051ec <HAL_DMA_IRQHandler+0xcd4>)
 8004ffe:	4293      	cmp	r3, r2
 8005000:	d013      	beq.n	800502a <HAL_DMA_IRQHandler+0xb12>
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	681b      	ldr	r3, [r3, #0]
 8005006:	4a7a      	ldr	r2, [pc, #488]	; (80051f0 <HAL_DMA_IRQHandler+0xcd8>)
 8005008:	4293      	cmp	r3, r2
 800500a:	d00e      	beq.n	800502a <HAL_DMA_IRQHandler+0xb12>
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	4a78      	ldr	r2, [pc, #480]	; (80051f4 <HAL_DMA_IRQHandler+0xcdc>)
 8005012:	4293      	cmp	r3, r2
 8005014:	d009      	beq.n	800502a <HAL_DMA_IRQHandler+0xb12>
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	4a77      	ldr	r2, [pc, #476]	; (80051f8 <HAL_DMA_IRQHandler+0xce0>)
 800501c:	4293      	cmp	r3, r2
 800501e:	d004      	beq.n	800502a <HAL_DMA_IRQHandler+0xb12>
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	4a75      	ldr	r2, [pc, #468]	; (80051fc <HAL_DMA_IRQHandler+0xce4>)
 8005026:	4293      	cmp	r3, r2
 8005028:	d108      	bne.n	800503c <HAL_DMA_IRQHandler+0xb24>
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	681a      	ldr	r2, [r3, #0]
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	681b      	ldr	r3, [r3, #0]
 8005034:	f022 0208 	bic.w	r2, r2, #8
 8005038:	601a      	str	r2, [r3, #0]
 800503a:	e007      	b.n	800504c <HAL_DMA_IRQHandler+0xb34>
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	681a      	ldr	r2, [r3, #0]
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	f022 0204 	bic.w	r2, r2, #4
 800504a:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005050:	2b00      	cmp	r3, #0
 8005052:	f000 8165 	beq.w	8005320 <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800505a:	6878      	ldr	r0, [r7, #4]
 800505c:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800505e:	e15f      	b.n	8005320 <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005064:	f003 031f 	and.w	r3, r3, #31
 8005068:	2202      	movs	r2, #2
 800506a:	409a      	lsls	r2, r3
 800506c:	697b      	ldr	r3, [r7, #20]
 800506e:	4013      	ands	r3, r2
 8005070:	2b00      	cmp	r3, #0
 8005072:	f000 80c5 	beq.w	8005200 <HAL_DMA_IRQHandler+0xce8>
 8005076:	693b      	ldr	r3, [r7, #16]
 8005078:	f003 0302 	and.w	r3, r3, #2
 800507c:	2b00      	cmp	r3, #0
 800507e:	f000 80bf 	beq.w	8005200 <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005086:	f003 031f 	and.w	r3, r3, #31
 800508a:	2202      	movs	r2, #2
 800508c:	409a      	lsls	r2, r3
 800508e:	69fb      	ldr	r3, [r7, #28]
 8005090:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005092:	693b      	ldr	r3, [r7, #16]
 8005094:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005098:	2b00      	cmp	r3, #0
 800509a:	d018      	beq.n	80050ce <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 800509c:	693b      	ldr	r3, [r7, #16]
 800509e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80050a2:	2b00      	cmp	r3, #0
 80050a4:	d109      	bne.n	80050ba <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80050aa:	2b00      	cmp	r3, #0
 80050ac:	f000 813a 	beq.w	8005324 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80050b4:	6878      	ldr	r0, [r7, #4]
 80050b6:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80050b8:	e134      	b.n	8005324 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80050be:	2b00      	cmp	r3, #0
 80050c0:	f000 8130 	beq.w	8005324 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80050c8:	6878      	ldr	r0, [r7, #4]
 80050ca:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80050cc:	e12a      	b.n	8005324 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 80050ce:	693b      	ldr	r3, [r7, #16]
 80050d0:	f003 0320 	and.w	r3, r3, #32
 80050d4:	2b00      	cmp	r3, #0
 80050d6:	d168      	bne.n	80051aa <HAL_DMA_IRQHandler+0xc92>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	4a38      	ldr	r2, [pc, #224]	; (80051c0 <HAL_DMA_IRQHandler+0xca8>)
 80050de:	4293      	cmp	r3, r2
 80050e0:	d04a      	beq.n	8005178 <HAL_DMA_IRQHandler+0xc60>
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	681b      	ldr	r3, [r3, #0]
 80050e6:	4a37      	ldr	r2, [pc, #220]	; (80051c4 <HAL_DMA_IRQHandler+0xcac>)
 80050e8:	4293      	cmp	r3, r2
 80050ea:	d045      	beq.n	8005178 <HAL_DMA_IRQHandler+0xc60>
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	4a35      	ldr	r2, [pc, #212]	; (80051c8 <HAL_DMA_IRQHandler+0xcb0>)
 80050f2:	4293      	cmp	r3, r2
 80050f4:	d040      	beq.n	8005178 <HAL_DMA_IRQHandler+0xc60>
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	681b      	ldr	r3, [r3, #0]
 80050fa:	4a34      	ldr	r2, [pc, #208]	; (80051cc <HAL_DMA_IRQHandler+0xcb4>)
 80050fc:	4293      	cmp	r3, r2
 80050fe:	d03b      	beq.n	8005178 <HAL_DMA_IRQHandler+0xc60>
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	4a32      	ldr	r2, [pc, #200]	; (80051d0 <HAL_DMA_IRQHandler+0xcb8>)
 8005106:	4293      	cmp	r3, r2
 8005108:	d036      	beq.n	8005178 <HAL_DMA_IRQHandler+0xc60>
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	681b      	ldr	r3, [r3, #0]
 800510e:	4a31      	ldr	r2, [pc, #196]	; (80051d4 <HAL_DMA_IRQHandler+0xcbc>)
 8005110:	4293      	cmp	r3, r2
 8005112:	d031      	beq.n	8005178 <HAL_DMA_IRQHandler+0xc60>
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	681b      	ldr	r3, [r3, #0]
 8005118:	4a2f      	ldr	r2, [pc, #188]	; (80051d8 <HAL_DMA_IRQHandler+0xcc0>)
 800511a:	4293      	cmp	r3, r2
 800511c:	d02c      	beq.n	8005178 <HAL_DMA_IRQHandler+0xc60>
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	681b      	ldr	r3, [r3, #0]
 8005122:	4a2e      	ldr	r2, [pc, #184]	; (80051dc <HAL_DMA_IRQHandler+0xcc4>)
 8005124:	4293      	cmp	r3, r2
 8005126:	d027      	beq.n	8005178 <HAL_DMA_IRQHandler+0xc60>
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	4a2c      	ldr	r2, [pc, #176]	; (80051e0 <HAL_DMA_IRQHandler+0xcc8>)
 800512e:	4293      	cmp	r3, r2
 8005130:	d022      	beq.n	8005178 <HAL_DMA_IRQHandler+0xc60>
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	681b      	ldr	r3, [r3, #0]
 8005136:	4a2b      	ldr	r2, [pc, #172]	; (80051e4 <HAL_DMA_IRQHandler+0xccc>)
 8005138:	4293      	cmp	r3, r2
 800513a:	d01d      	beq.n	8005178 <HAL_DMA_IRQHandler+0xc60>
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	4a29      	ldr	r2, [pc, #164]	; (80051e8 <HAL_DMA_IRQHandler+0xcd0>)
 8005142:	4293      	cmp	r3, r2
 8005144:	d018      	beq.n	8005178 <HAL_DMA_IRQHandler+0xc60>
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	681b      	ldr	r3, [r3, #0]
 800514a:	4a28      	ldr	r2, [pc, #160]	; (80051ec <HAL_DMA_IRQHandler+0xcd4>)
 800514c:	4293      	cmp	r3, r2
 800514e:	d013      	beq.n	8005178 <HAL_DMA_IRQHandler+0xc60>
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	4a26      	ldr	r2, [pc, #152]	; (80051f0 <HAL_DMA_IRQHandler+0xcd8>)
 8005156:	4293      	cmp	r3, r2
 8005158:	d00e      	beq.n	8005178 <HAL_DMA_IRQHandler+0xc60>
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	4a25      	ldr	r2, [pc, #148]	; (80051f4 <HAL_DMA_IRQHandler+0xcdc>)
 8005160:	4293      	cmp	r3, r2
 8005162:	d009      	beq.n	8005178 <HAL_DMA_IRQHandler+0xc60>
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	681b      	ldr	r3, [r3, #0]
 8005168:	4a23      	ldr	r2, [pc, #140]	; (80051f8 <HAL_DMA_IRQHandler+0xce0>)
 800516a:	4293      	cmp	r3, r2
 800516c:	d004      	beq.n	8005178 <HAL_DMA_IRQHandler+0xc60>
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	681b      	ldr	r3, [r3, #0]
 8005172:	4a22      	ldr	r2, [pc, #136]	; (80051fc <HAL_DMA_IRQHandler+0xce4>)
 8005174:	4293      	cmp	r3, r2
 8005176:	d108      	bne.n	800518a <HAL_DMA_IRQHandler+0xc72>
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	681a      	ldr	r2, [r3, #0]
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	681b      	ldr	r3, [r3, #0]
 8005182:	f022 0214 	bic.w	r2, r2, #20
 8005186:	601a      	str	r2, [r3, #0]
 8005188:	e007      	b.n	800519a <HAL_DMA_IRQHandler+0xc82>
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	681b      	ldr	r3, [r3, #0]
 800518e:	681a      	ldr	r2, [r3, #0]
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	681b      	ldr	r3, [r3, #0]
 8005194:	f022 020a 	bic.w	r2, r2, #10
 8005198:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	2200      	movs	r2, #0
 800519e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	2201      	movs	r2, #1
 80051a6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80051ae:	2b00      	cmp	r3, #0
 80051b0:	f000 80b8 	beq.w	8005324 <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80051b8:	6878      	ldr	r0, [r7, #4]
 80051ba:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80051bc:	e0b2      	b.n	8005324 <HAL_DMA_IRQHandler+0xe0c>
 80051be:	bf00      	nop
 80051c0:	40020010 	.word	0x40020010
 80051c4:	40020028 	.word	0x40020028
 80051c8:	40020040 	.word	0x40020040
 80051cc:	40020058 	.word	0x40020058
 80051d0:	40020070 	.word	0x40020070
 80051d4:	40020088 	.word	0x40020088
 80051d8:	400200a0 	.word	0x400200a0
 80051dc:	400200b8 	.word	0x400200b8
 80051e0:	40020410 	.word	0x40020410
 80051e4:	40020428 	.word	0x40020428
 80051e8:	40020440 	.word	0x40020440
 80051ec:	40020458 	.word	0x40020458
 80051f0:	40020470 	.word	0x40020470
 80051f4:	40020488 	.word	0x40020488
 80051f8:	400204a0 	.word	0x400204a0
 80051fc:	400204b8 	.word	0x400204b8
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005204:	f003 031f 	and.w	r3, r3, #31
 8005208:	2208      	movs	r2, #8
 800520a:	409a      	lsls	r2, r3
 800520c:	697b      	ldr	r3, [r7, #20]
 800520e:	4013      	ands	r3, r2
 8005210:	2b00      	cmp	r3, #0
 8005212:	f000 8088 	beq.w	8005326 <HAL_DMA_IRQHandler+0xe0e>
 8005216:	693b      	ldr	r3, [r7, #16]
 8005218:	f003 0308 	and.w	r3, r3, #8
 800521c:	2b00      	cmp	r3, #0
 800521e:	f000 8082 	beq.w	8005326 <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	4a41      	ldr	r2, [pc, #260]	; (800532c <HAL_DMA_IRQHandler+0xe14>)
 8005228:	4293      	cmp	r3, r2
 800522a:	d04a      	beq.n	80052c2 <HAL_DMA_IRQHandler+0xdaa>
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	4a3f      	ldr	r2, [pc, #252]	; (8005330 <HAL_DMA_IRQHandler+0xe18>)
 8005232:	4293      	cmp	r3, r2
 8005234:	d045      	beq.n	80052c2 <HAL_DMA_IRQHandler+0xdaa>
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	4a3e      	ldr	r2, [pc, #248]	; (8005334 <HAL_DMA_IRQHandler+0xe1c>)
 800523c:	4293      	cmp	r3, r2
 800523e:	d040      	beq.n	80052c2 <HAL_DMA_IRQHandler+0xdaa>
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	4a3c      	ldr	r2, [pc, #240]	; (8005338 <HAL_DMA_IRQHandler+0xe20>)
 8005246:	4293      	cmp	r3, r2
 8005248:	d03b      	beq.n	80052c2 <HAL_DMA_IRQHandler+0xdaa>
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	681b      	ldr	r3, [r3, #0]
 800524e:	4a3b      	ldr	r2, [pc, #236]	; (800533c <HAL_DMA_IRQHandler+0xe24>)
 8005250:	4293      	cmp	r3, r2
 8005252:	d036      	beq.n	80052c2 <HAL_DMA_IRQHandler+0xdaa>
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	4a39      	ldr	r2, [pc, #228]	; (8005340 <HAL_DMA_IRQHandler+0xe28>)
 800525a:	4293      	cmp	r3, r2
 800525c:	d031      	beq.n	80052c2 <HAL_DMA_IRQHandler+0xdaa>
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	681b      	ldr	r3, [r3, #0]
 8005262:	4a38      	ldr	r2, [pc, #224]	; (8005344 <HAL_DMA_IRQHandler+0xe2c>)
 8005264:	4293      	cmp	r3, r2
 8005266:	d02c      	beq.n	80052c2 <HAL_DMA_IRQHandler+0xdaa>
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	4a36      	ldr	r2, [pc, #216]	; (8005348 <HAL_DMA_IRQHandler+0xe30>)
 800526e:	4293      	cmp	r3, r2
 8005270:	d027      	beq.n	80052c2 <HAL_DMA_IRQHandler+0xdaa>
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	681b      	ldr	r3, [r3, #0]
 8005276:	4a35      	ldr	r2, [pc, #212]	; (800534c <HAL_DMA_IRQHandler+0xe34>)
 8005278:	4293      	cmp	r3, r2
 800527a:	d022      	beq.n	80052c2 <HAL_DMA_IRQHandler+0xdaa>
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	681b      	ldr	r3, [r3, #0]
 8005280:	4a33      	ldr	r2, [pc, #204]	; (8005350 <HAL_DMA_IRQHandler+0xe38>)
 8005282:	4293      	cmp	r3, r2
 8005284:	d01d      	beq.n	80052c2 <HAL_DMA_IRQHandler+0xdaa>
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	681b      	ldr	r3, [r3, #0]
 800528a:	4a32      	ldr	r2, [pc, #200]	; (8005354 <HAL_DMA_IRQHandler+0xe3c>)
 800528c:	4293      	cmp	r3, r2
 800528e:	d018      	beq.n	80052c2 <HAL_DMA_IRQHandler+0xdaa>
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	4a30      	ldr	r2, [pc, #192]	; (8005358 <HAL_DMA_IRQHandler+0xe40>)
 8005296:	4293      	cmp	r3, r2
 8005298:	d013      	beq.n	80052c2 <HAL_DMA_IRQHandler+0xdaa>
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	681b      	ldr	r3, [r3, #0]
 800529e:	4a2f      	ldr	r2, [pc, #188]	; (800535c <HAL_DMA_IRQHandler+0xe44>)
 80052a0:	4293      	cmp	r3, r2
 80052a2:	d00e      	beq.n	80052c2 <HAL_DMA_IRQHandler+0xdaa>
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	4a2d      	ldr	r2, [pc, #180]	; (8005360 <HAL_DMA_IRQHandler+0xe48>)
 80052aa:	4293      	cmp	r3, r2
 80052ac:	d009      	beq.n	80052c2 <HAL_DMA_IRQHandler+0xdaa>
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	681b      	ldr	r3, [r3, #0]
 80052b2:	4a2c      	ldr	r2, [pc, #176]	; (8005364 <HAL_DMA_IRQHandler+0xe4c>)
 80052b4:	4293      	cmp	r3, r2
 80052b6:	d004      	beq.n	80052c2 <HAL_DMA_IRQHandler+0xdaa>
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	4a2a      	ldr	r2, [pc, #168]	; (8005368 <HAL_DMA_IRQHandler+0xe50>)
 80052be:	4293      	cmp	r3, r2
 80052c0:	d108      	bne.n	80052d4 <HAL_DMA_IRQHandler+0xdbc>
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	681b      	ldr	r3, [r3, #0]
 80052c6:	681a      	ldr	r2, [r3, #0]
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	681b      	ldr	r3, [r3, #0]
 80052cc:	f022 021c 	bic.w	r2, r2, #28
 80052d0:	601a      	str	r2, [r3, #0]
 80052d2:	e007      	b.n	80052e4 <HAL_DMA_IRQHandler+0xdcc>
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	681b      	ldr	r3, [r3, #0]
 80052d8:	681a      	ldr	r2, [r3, #0]
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	681b      	ldr	r3, [r3, #0]
 80052de:	f022 020e 	bic.w	r2, r2, #14
 80052e2:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80052e8:	f003 031f 	and.w	r3, r3, #31
 80052ec:	2201      	movs	r2, #1
 80052ee:	409a      	lsls	r2, r3
 80052f0:	69fb      	ldr	r3, [r7, #28]
 80052f2:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	2201      	movs	r2, #1
 80052f8:	655a      	str	r2, [r3, #84]	; 0x54

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	2200      	movs	r2, #0
 80052fe:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	2201      	movs	r2, #1
 8005306:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      if (hdma->XferErrorCallback != NULL)
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800530e:	2b00      	cmp	r3, #0
 8005310:	d009      	beq.n	8005326 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005316:	6878      	ldr	r0, [r7, #4]
 8005318:	4798      	blx	r3
 800531a:	e004      	b.n	8005326 <HAL_DMA_IRQHandler+0xe0e>
          return;
 800531c:	bf00      	nop
 800531e:	e002      	b.n	8005326 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005320:	bf00      	nop
 8005322:	e000      	b.n	8005326 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005324:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 8005326:	3728      	adds	r7, #40	; 0x28
 8005328:	46bd      	mov	sp, r7
 800532a:	bd80      	pop	{r7, pc}
 800532c:	40020010 	.word	0x40020010
 8005330:	40020028 	.word	0x40020028
 8005334:	40020040 	.word	0x40020040
 8005338:	40020058 	.word	0x40020058
 800533c:	40020070 	.word	0x40020070
 8005340:	40020088 	.word	0x40020088
 8005344:	400200a0 	.word	0x400200a0
 8005348:	400200b8 	.word	0x400200b8
 800534c:	40020410 	.word	0x40020410
 8005350:	40020428 	.word	0x40020428
 8005354:	40020440 	.word	0x40020440
 8005358:	40020458 	.word	0x40020458
 800535c:	40020470 	.word	0x40020470
 8005360:	40020488 	.word	0x40020488
 8005364:	400204a0 	.word	0x400204a0
 8005368:	400204b8 	.word	0x400204b8

0800536c <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800536c:	b480      	push	{r7}
 800536e:	b087      	sub	sp, #28
 8005370:	af00      	add	r7, sp, #0
 8005372:	60f8      	str	r0, [r7, #12]
 8005374:	60b9      	str	r1, [r7, #8]
 8005376:	607a      	str	r2, [r7, #4]
 8005378:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800537a:	68fb      	ldr	r3, [r7, #12]
 800537c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800537e:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8005380:	68fb      	ldr	r3, [r7, #12]
 8005382:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005384:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8005386:	68fb      	ldr	r3, [r7, #12]
 8005388:	681b      	ldr	r3, [r3, #0]
 800538a:	4a84      	ldr	r2, [pc, #528]	; (800559c <DMA_SetConfig+0x230>)
 800538c:	4293      	cmp	r3, r2
 800538e:	d072      	beq.n	8005476 <DMA_SetConfig+0x10a>
 8005390:	68fb      	ldr	r3, [r7, #12]
 8005392:	681b      	ldr	r3, [r3, #0]
 8005394:	4a82      	ldr	r2, [pc, #520]	; (80055a0 <DMA_SetConfig+0x234>)
 8005396:	4293      	cmp	r3, r2
 8005398:	d06d      	beq.n	8005476 <DMA_SetConfig+0x10a>
 800539a:	68fb      	ldr	r3, [r7, #12]
 800539c:	681b      	ldr	r3, [r3, #0]
 800539e:	4a81      	ldr	r2, [pc, #516]	; (80055a4 <DMA_SetConfig+0x238>)
 80053a0:	4293      	cmp	r3, r2
 80053a2:	d068      	beq.n	8005476 <DMA_SetConfig+0x10a>
 80053a4:	68fb      	ldr	r3, [r7, #12]
 80053a6:	681b      	ldr	r3, [r3, #0]
 80053a8:	4a7f      	ldr	r2, [pc, #508]	; (80055a8 <DMA_SetConfig+0x23c>)
 80053aa:	4293      	cmp	r3, r2
 80053ac:	d063      	beq.n	8005476 <DMA_SetConfig+0x10a>
 80053ae:	68fb      	ldr	r3, [r7, #12]
 80053b0:	681b      	ldr	r3, [r3, #0]
 80053b2:	4a7e      	ldr	r2, [pc, #504]	; (80055ac <DMA_SetConfig+0x240>)
 80053b4:	4293      	cmp	r3, r2
 80053b6:	d05e      	beq.n	8005476 <DMA_SetConfig+0x10a>
 80053b8:	68fb      	ldr	r3, [r7, #12]
 80053ba:	681b      	ldr	r3, [r3, #0]
 80053bc:	4a7c      	ldr	r2, [pc, #496]	; (80055b0 <DMA_SetConfig+0x244>)
 80053be:	4293      	cmp	r3, r2
 80053c0:	d059      	beq.n	8005476 <DMA_SetConfig+0x10a>
 80053c2:	68fb      	ldr	r3, [r7, #12]
 80053c4:	681b      	ldr	r3, [r3, #0]
 80053c6:	4a7b      	ldr	r2, [pc, #492]	; (80055b4 <DMA_SetConfig+0x248>)
 80053c8:	4293      	cmp	r3, r2
 80053ca:	d054      	beq.n	8005476 <DMA_SetConfig+0x10a>
 80053cc:	68fb      	ldr	r3, [r7, #12]
 80053ce:	681b      	ldr	r3, [r3, #0]
 80053d0:	4a79      	ldr	r2, [pc, #484]	; (80055b8 <DMA_SetConfig+0x24c>)
 80053d2:	4293      	cmp	r3, r2
 80053d4:	d04f      	beq.n	8005476 <DMA_SetConfig+0x10a>
 80053d6:	68fb      	ldr	r3, [r7, #12]
 80053d8:	681b      	ldr	r3, [r3, #0]
 80053da:	4a78      	ldr	r2, [pc, #480]	; (80055bc <DMA_SetConfig+0x250>)
 80053dc:	4293      	cmp	r3, r2
 80053de:	d04a      	beq.n	8005476 <DMA_SetConfig+0x10a>
 80053e0:	68fb      	ldr	r3, [r7, #12]
 80053e2:	681b      	ldr	r3, [r3, #0]
 80053e4:	4a76      	ldr	r2, [pc, #472]	; (80055c0 <DMA_SetConfig+0x254>)
 80053e6:	4293      	cmp	r3, r2
 80053e8:	d045      	beq.n	8005476 <DMA_SetConfig+0x10a>
 80053ea:	68fb      	ldr	r3, [r7, #12]
 80053ec:	681b      	ldr	r3, [r3, #0]
 80053ee:	4a75      	ldr	r2, [pc, #468]	; (80055c4 <DMA_SetConfig+0x258>)
 80053f0:	4293      	cmp	r3, r2
 80053f2:	d040      	beq.n	8005476 <DMA_SetConfig+0x10a>
 80053f4:	68fb      	ldr	r3, [r7, #12]
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	4a73      	ldr	r2, [pc, #460]	; (80055c8 <DMA_SetConfig+0x25c>)
 80053fa:	4293      	cmp	r3, r2
 80053fc:	d03b      	beq.n	8005476 <DMA_SetConfig+0x10a>
 80053fe:	68fb      	ldr	r3, [r7, #12]
 8005400:	681b      	ldr	r3, [r3, #0]
 8005402:	4a72      	ldr	r2, [pc, #456]	; (80055cc <DMA_SetConfig+0x260>)
 8005404:	4293      	cmp	r3, r2
 8005406:	d036      	beq.n	8005476 <DMA_SetConfig+0x10a>
 8005408:	68fb      	ldr	r3, [r7, #12]
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	4a70      	ldr	r2, [pc, #448]	; (80055d0 <DMA_SetConfig+0x264>)
 800540e:	4293      	cmp	r3, r2
 8005410:	d031      	beq.n	8005476 <DMA_SetConfig+0x10a>
 8005412:	68fb      	ldr	r3, [r7, #12]
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	4a6f      	ldr	r2, [pc, #444]	; (80055d4 <DMA_SetConfig+0x268>)
 8005418:	4293      	cmp	r3, r2
 800541a:	d02c      	beq.n	8005476 <DMA_SetConfig+0x10a>
 800541c:	68fb      	ldr	r3, [r7, #12]
 800541e:	681b      	ldr	r3, [r3, #0]
 8005420:	4a6d      	ldr	r2, [pc, #436]	; (80055d8 <DMA_SetConfig+0x26c>)
 8005422:	4293      	cmp	r3, r2
 8005424:	d027      	beq.n	8005476 <DMA_SetConfig+0x10a>
 8005426:	68fb      	ldr	r3, [r7, #12]
 8005428:	681b      	ldr	r3, [r3, #0]
 800542a:	4a6c      	ldr	r2, [pc, #432]	; (80055dc <DMA_SetConfig+0x270>)
 800542c:	4293      	cmp	r3, r2
 800542e:	d022      	beq.n	8005476 <DMA_SetConfig+0x10a>
 8005430:	68fb      	ldr	r3, [r7, #12]
 8005432:	681b      	ldr	r3, [r3, #0]
 8005434:	4a6a      	ldr	r2, [pc, #424]	; (80055e0 <DMA_SetConfig+0x274>)
 8005436:	4293      	cmp	r3, r2
 8005438:	d01d      	beq.n	8005476 <DMA_SetConfig+0x10a>
 800543a:	68fb      	ldr	r3, [r7, #12]
 800543c:	681b      	ldr	r3, [r3, #0]
 800543e:	4a69      	ldr	r2, [pc, #420]	; (80055e4 <DMA_SetConfig+0x278>)
 8005440:	4293      	cmp	r3, r2
 8005442:	d018      	beq.n	8005476 <DMA_SetConfig+0x10a>
 8005444:	68fb      	ldr	r3, [r7, #12]
 8005446:	681b      	ldr	r3, [r3, #0]
 8005448:	4a67      	ldr	r2, [pc, #412]	; (80055e8 <DMA_SetConfig+0x27c>)
 800544a:	4293      	cmp	r3, r2
 800544c:	d013      	beq.n	8005476 <DMA_SetConfig+0x10a>
 800544e:	68fb      	ldr	r3, [r7, #12]
 8005450:	681b      	ldr	r3, [r3, #0]
 8005452:	4a66      	ldr	r2, [pc, #408]	; (80055ec <DMA_SetConfig+0x280>)
 8005454:	4293      	cmp	r3, r2
 8005456:	d00e      	beq.n	8005476 <DMA_SetConfig+0x10a>
 8005458:	68fb      	ldr	r3, [r7, #12]
 800545a:	681b      	ldr	r3, [r3, #0]
 800545c:	4a64      	ldr	r2, [pc, #400]	; (80055f0 <DMA_SetConfig+0x284>)
 800545e:	4293      	cmp	r3, r2
 8005460:	d009      	beq.n	8005476 <DMA_SetConfig+0x10a>
 8005462:	68fb      	ldr	r3, [r7, #12]
 8005464:	681b      	ldr	r3, [r3, #0]
 8005466:	4a63      	ldr	r2, [pc, #396]	; (80055f4 <DMA_SetConfig+0x288>)
 8005468:	4293      	cmp	r3, r2
 800546a:	d004      	beq.n	8005476 <DMA_SetConfig+0x10a>
 800546c:	68fb      	ldr	r3, [r7, #12]
 800546e:	681b      	ldr	r3, [r3, #0]
 8005470:	4a61      	ldr	r2, [pc, #388]	; (80055f8 <DMA_SetConfig+0x28c>)
 8005472:	4293      	cmp	r3, r2
 8005474:	d101      	bne.n	800547a <DMA_SetConfig+0x10e>
 8005476:	2301      	movs	r3, #1
 8005478:	e000      	b.n	800547c <DMA_SetConfig+0x110>
 800547a:	2300      	movs	r3, #0
 800547c:	2b00      	cmp	r3, #0
 800547e:	d00d      	beq.n	800549c <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005480:	68fb      	ldr	r3, [r7, #12]
 8005482:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005484:	68fa      	ldr	r2, [r7, #12]
 8005486:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8005488:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 800548a:	68fb      	ldr	r3, [r7, #12]
 800548c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800548e:	2b00      	cmp	r3, #0
 8005490:	d004      	beq.n	800549c <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8005492:	68fb      	ldr	r3, [r7, #12]
 8005494:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005496:	68fa      	ldr	r2, [r7, #12]
 8005498:	6f52      	ldr	r2, [r2, #116]	; 0x74
 800549a:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800549c:	68fb      	ldr	r3, [r7, #12]
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	4a3e      	ldr	r2, [pc, #248]	; (800559c <DMA_SetConfig+0x230>)
 80054a2:	4293      	cmp	r3, r2
 80054a4:	d04a      	beq.n	800553c <DMA_SetConfig+0x1d0>
 80054a6:	68fb      	ldr	r3, [r7, #12]
 80054a8:	681b      	ldr	r3, [r3, #0]
 80054aa:	4a3d      	ldr	r2, [pc, #244]	; (80055a0 <DMA_SetConfig+0x234>)
 80054ac:	4293      	cmp	r3, r2
 80054ae:	d045      	beq.n	800553c <DMA_SetConfig+0x1d0>
 80054b0:	68fb      	ldr	r3, [r7, #12]
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	4a3b      	ldr	r2, [pc, #236]	; (80055a4 <DMA_SetConfig+0x238>)
 80054b6:	4293      	cmp	r3, r2
 80054b8:	d040      	beq.n	800553c <DMA_SetConfig+0x1d0>
 80054ba:	68fb      	ldr	r3, [r7, #12]
 80054bc:	681b      	ldr	r3, [r3, #0]
 80054be:	4a3a      	ldr	r2, [pc, #232]	; (80055a8 <DMA_SetConfig+0x23c>)
 80054c0:	4293      	cmp	r3, r2
 80054c2:	d03b      	beq.n	800553c <DMA_SetConfig+0x1d0>
 80054c4:	68fb      	ldr	r3, [r7, #12]
 80054c6:	681b      	ldr	r3, [r3, #0]
 80054c8:	4a38      	ldr	r2, [pc, #224]	; (80055ac <DMA_SetConfig+0x240>)
 80054ca:	4293      	cmp	r3, r2
 80054cc:	d036      	beq.n	800553c <DMA_SetConfig+0x1d0>
 80054ce:	68fb      	ldr	r3, [r7, #12]
 80054d0:	681b      	ldr	r3, [r3, #0]
 80054d2:	4a37      	ldr	r2, [pc, #220]	; (80055b0 <DMA_SetConfig+0x244>)
 80054d4:	4293      	cmp	r3, r2
 80054d6:	d031      	beq.n	800553c <DMA_SetConfig+0x1d0>
 80054d8:	68fb      	ldr	r3, [r7, #12]
 80054da:	681b      	ldr	r3, [r3, #0]
 80054dc:	4a35      	ldr	r2, [pc, #212]	; (80055b4 <DMA_SetConfig+0x248>)
 80054de:	4293      	cmp	r3, r2
 80054e0:	d02c      	beq.n	800553c <DMA_SetConfig+0x1d0>
 80054e2:	68fb      	ldr	r3, [r7, #12]
 80054e4:	681b      	ldr	r3, [r3, #0]
 80054e6:	4a34      	ldr	r2, [pc, #208]	; (80055b8 <DMA_SetConfig+0x24c>)
 80054e8:	4293      	cmp	r3, r2
 80054ea:	d027      	beq.n	800553c <DMA_SetConfig+0x1d0>
 80054ec:	68fb      	ldr	r3, [r7, #12]
 80054ee:	681b      	ldr	r3, [r3, #0]
 80054f0:	4a32      	ldr	r2, [pc, #200]	; (80055bc <DMA_SetConfig+0x250>)
 80054f2:	4293      	cmp	r3, r2
 80054f4:	d022      	beq.n	800553c <DMA_SetConfig+0x1d0>
 80054f6:	68fb      	ldr	r3, [r7, #12]
 80054f8:	681b      	ldr	r3, [r3, #0]
 80054fa:	4a31      	ldr	r2, [pc, #196]	; (80055c0 <DMA_SetConfig+0x254>)
 80054fc:	4293      	cmp	r3, r2
 80054fe:	d01d      	beq.n	800553c <DMA_SetConfig+0x1d0>
 8005500:	68fb      	ldr	r3, [r7, #12]
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	4a2f      	ldr	r2, [pc, #188]	; (80055c4 <DMA_SetConfig+0x258>)
 8005506:	4293      	cmp	r3, r2
 8005508:	d018      	beq.n	800553c <DMA_SetConfig+0x1d0>
 800550a:	68fb      	ldr	r3, [r7, #12]
 800550c:	681b      	ldr	r3, [r3, #0]
 800550e:	4a2e      	ldr	r2, [pc, #184]	; (80055c8 <DMA_SetConfig+0x25c>)
 8005510:	4293      	cmp	r3, r2
 8005512:	d013      	beq.n	800553c <DMA_SetConfig+0x1d0>
 8005514:	68fb      	ldr	r3, [r7, #12]
 8005516:	681b      	ldr	r3, [r3, #0]
 8005518:	4a2c      	ldr	r2, [pc, #176]	; (80055cc <DMA_SetConfig+0x260>)
 800551a:	4293      	cmp	r3, r2
 800551c:	d00e      	beq.n	800553c <DMA_SetConfig+0x1d0>
 800551e:	68fb      	ldr	r3, [r7, #12]
 8005520:	681b      	ldr	r3, [r3, #0]
 8005522:	4a2b      	ldr	r2, [pc, #172]	; (80055d0 <DMA_SetConfig+0x264>)
 8005524:	4293      	cmp	r3, r2
 8005526:	d009      	beq.n	800553c <DMA_SetConfig+0x1d0>
 8005528:	68fb      	ldr	r3, [r7, #12]
 800552a:	681b      	ldr	r3, [r3, #0]
 800552c:	4a29      	ldr	r2, [pc, #164]	; (80055d4 <DMA_SetConfig+0x268>)
 800552e:	4293      	cmp	r3, r2
 8005530:	d004      	beq.n	800553c <DMA_SetConfig+0x1d0>
 8005532:	68fb      	ldr	r3, [r7, #12]
 8005534:	681b      	ldr	r3, [r3, #0]
 8005536:	4a28      	ldr	r2, [pc, #160]	; (80055d8 <DMA_SetConfig+0x26c>)
 8005538:	4293      	cmp	r3, r2
 800553a:	d101      	bne.n	8005540 <DMA_SetConfig+0x1d4>
 800553c:	2301      	movs	r3, #1
 800553e:	e000      	b.n	8005542 <DMA_SetConfig+0x1d6>
 8005540:	2300      	movs	r3, #0
 8005542:	2b00      	cmp	r3, #0
 8005544:	d05a      	beq.n	80055fc <DMA_SetConfig+0x290>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8005546:	68fb      	ldr	r3, [r7, #12]
 8005548:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800554a:	f003 031f 	and.w	r3, r3, #31
 800554e:	223f      	movs	r2, #63	; 0x3f
 8005550:	409a      	lsls	r2, r3
 8005552:	697b      	ldr	r3, [r7, #20]
 8005554:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8005556:	68fb      	ldr	r3, [r7, #12]
 8005558:	681b      	ldr	r3, [r3, #0]
 800555a:	681a      	ldr	r2, [r3, #0]
 800555c:	68fb      	ldr	r3, [r7, #12]
 800555e:	681b      	ldr	r3, [r3, #0]
 8005560:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8005564:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 8005566:	68fb      	ldr	r3, [r7, #12]
 8005568:	681b      	ldr	r3, [r3, #0]
 800556a:	683a      	ldr	r2, [r7, #0]
 800556c:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800556e:	68fb      	ldr	r3, [r7, #12]
 8005570:	689b      	ldr	r3, [r3, #8]
 8005572:	2b40      	cmp	r3, #64	; 0x40
 8005574:	d108      	bne.n	8005588 <DMA_SetConfig+0x21c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 8005576:	68fb      	ldr	r3, [r7, #12]
 8005578:	681b      	ldr	r3, [r3, #0]
 800557a:	687a      	ldr	r2, [r7, #4]
 800557c:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 800557e:	68fb      	ldr	r3, [r7, #12]
 8005580:	681b      	ldr	r3, [r3, #0]
 8005582:	68ba      	ldr	r2, [r7, #8]
 8005584:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 8005586:	e087      	b.n	8005698 <DMA_SetConfig+0x32c>
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 8005588:	68fb      	ldr	r3, [r7, #12]
 800558a:	681b      	ldr	r3, [r3, #0]
 800558c:	68ba      	ldr	r2, [r7, #8]
 800558e:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 8005590:	68fb      	ldr	r3, [r7, #12]
 8005592:	681b      	ldr	r3, [r3, #0]
 8005594:	687a      	ldr	r2, [r7, #4]
 8005596:	60da      	str	r2, [r3, #12]
}
 8005598:	e07e      	b.n	8005698 <DMA_SetConfig+0x32c>
 800559a:	bf00      	nop
 800559c:	40020010 	.word	0x40020010
 80055a0:	40020028 	.word	0x40020028
 80055a4:	40020040 	.word	0x40020040
 80055a8:	40020058 	.word	0x40020058
 80055ac:	40020070 	.word	0x40020070
 80055b0:	40020088 	.word	0x40020088
 80055b4:	400200a0 	.word	0x400200a0
 80055b8:	400200b8 	.word	0x400200b8
 80055bc:	40020410 	.word	0x40020410
 80055c0:	40020428 	.word	0x40020428
 80055c4:	40020440 	.word	0x40020440
 80055c8:	40020458 	.word	0x40020458
 80055cc:	40020470 	.word	0x40020470
 80055d0:	40020488 	.word	0x40020488
 80055d4:	400204a0 	.word	0x400204a0
 80055d8:	400204b8 	.word	0x400204b8
 80055dc:	58025408 	.word	0x58025408
 80055e0:	5802541c 	.word	0x5802541c
 80055e4:	58025430 	.word	0x58025430
 80055e8:	58025444 	.word	0x58025444
 80055ec:	58025458 	.word	0x58025458
 80055f0:	5802546c 	.word	0x5802546c
 80055f4:	58025480 	.word	0x58025480
 80055f8:	58025494 	.word	0x58025494
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 80055fc:	68fb      	ldr	r3, [r7, #12]
 80055fe:	681b      	ldr	r3, [r3, #0]
 8005600:	4a28      	ldr	r2, [pc, #160]	; (80056a4 <DMA_SetConfig+0x338>)
 8005602:	4293      	cmp	r3, r2
 8005604:	d022      	beq.n	800564c <DMA_SetConfig+0x2e0>
 8005606:	68fb      	ldr	r3, [r7, #12]
 8005608:	681b      	ldr	r3, [r3, #0]
 800560a:	4a27      	ldr	r2, [pc, #156]	; (80056a8 <DMA_SetConfig+0x33c>)
 800560c:	4293      	cmp	r3, r2
 800560e:	d01d      	beq.n	800564c <DMA_SetConfig+0x2e0>
 8005610:	68fb      	ldr	r3, [r7, #12]
 8005612:	681b      	ldr	r3, [r3, #0]
 8005614:	4a25      	ldr	r2, [pc, #148]	; (80056ac <DMA_SetConfig+0x340>)
 8005616:	4293      	cmp	r3, r2
 8005618:	d018      	beq.n	800564c <DMA_SetConfig+0x2e0>
 800561a:	68fb      	ldr	r3, [r7, #12]
 800561c:	681b      	ldr	r3, [r3, #0]
 800561e:	4a24      	ldr	r2, [pc, #144]	; (80056b0 <DMA_SetConfig+0x344>)
 8005620:	4293      	cmp	r3, r2
 8005622:	d013      	beq.n	800564c <DMA_SetConfig+0x2e0>
 8005624:	68fb      	ldr	r3, [r7, #12]
 8005626:	681b      	ldr	r3, [r3, #0]
 8005628:	4a22      	ldr	r2, [pc, #136]	; (80056b4 <DMA_SetConfig+0x348>)
 800562a:	4293      	cmp	r3, r2
 800562c:	d00e      	beq.n	800564c <DMA_SetConfig+0x2e0>
 800562e:	68fb      	ldr	r3, [r7, #12]
 8005630:	681b      	ldr	r3, [r3, #0]
 8005632:	4a21      	ldr	r2, [pc, #132]	; (80056b8 <DMA_SetConfig+0x34c>)
 8005634:	4293      	cmp	r3, r2
 8005636:	d009      	beq.n	800564c <DMA_SetConfig+0x2e0>
 8005638:	68fb      	ldr	r3, [r7, #12]
 800563a:	681b      	ldr	r3, [r3, #0]
 800563c:	4a1f      	ldr	r2, [pc, #124]	; (80056bc <DMA_SetConfig+0x350>)
 800563e:	4293      	cmp	r3, r2
 8005640:	d004      	beq.n	800564c <DMA_SetConfig+0x2e0>
 8005642:	68fb      	ldr	r3, [r7, #12]
 8005644:	681b      	ldr	r3, [r3, #0]
 8005646:	4a1e      	ldr	r2, [pc, #120]	; (80056c0 <DMA_SetConfig+0x354>)
 8005648:	4293      	cmp	r3, r2
 800564a:	d101      	bne.n	8005650 <DMA_SetConfig+0x2e4>
 800564c:	2301      	movs	r3, #1
 800564e:	e000      	b.n	8005652 <DMA_SetConfig+0x2e6>
 8005650:	2300      	movs	r3, #0
 8005652:	2b00      	cmp	r3, #0
 8005654:	d020      	beq.n	8005698 <DMA_SetConfig+0x32c>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8005656:	68fb      	ldr	r3, [r7, #12]
 8005658:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800565a:	f003 031f 	and.w	r3, r3, #31
 800565e:	2201      	movs	r2, #1
 8005660:	409a      	lsls	r2, r3
 8005662:	693b      	ldr	r3, [r7, #16]
 8005664:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 8005666:	68fb      	ldr	r3, [r7, #12]
 8005668:	681b      	ldr	r3, [r3, #0]
 800566a:	683a      	ldr	r2, [r7, #0]
 800566c:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800566e:	68fb      	ldr	r3, [r7, #12]
 8005670:	689b      	ldr	r3, [r3, #8]
 8005672:	2b40      	cmp	r3, #64	; 0x40
 8005674:	d108      	bne.n	8005688 <DMA_SetConfig+0x31c>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 8005676:	68fb      	ldr	r3, [r7, #12]
 8005678:	681b      	ldr	r3, [r3, #0]
 800567a:	687a      	ldr	r2, [r7, #4]
 800567c:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 800567e:	68fb      	ldr	r3, [r7, #12]
 8005680:	681b      	ldr	r3, [r3, #0]
 8005682:	68ba      	ldr	r2, [r7, #8]
 8005684:	60da      	str	r2, [r3, #12]
}
 8005686:	e007      	b.n	8005698 <DMA_SetConfig+0x32c>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 8005688:	68fb      	ldr	r3, [r7, #12]
 800568a:	681b      	ldr	r3, [r3, #0]
 800568c:	68ba      	ldr	r2, [r7, #8]
 800568e:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 8005690:	68fb      	ldr	r3, [r7, #12]
 8005692:	681b      	ldr	r3, [r3, #0]
 8005694:	687a      	ldr	r2, [r7, #4]
 8005696:	60da      	str	r2, [r3, #12]
}
 8005698:	bf00      	nop
 800569a:	371c      	adds	r7, #28
 800569c:	46bd      	mov	sp, r7
 800569e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056a2:	4770      	bx	lr
 80056a4:	58025408 	.word	0x58025408
 80056a8:	5802541c 	.word	0x5802541c
 80056ac:	58025430 	.word	0x58025430
 80056b0:	58025444 	.word	0x58025444
 80056b4:	58025458 	.word	0x58025458
 80056b8:	5802546c 	.word	0x5802546c
 80056bc:	58025480 	.word	0x58025480
 80056c0:	58025494 	.word	0x58025494

080056c4 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80056c4:	b480      	push	{r7}
 80056c6:	b085      	sub	sp, #20
 80056c8:	af00      	add	r7, sp, #0
 80056ca:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	681b      	ldr	r3, [r3, #0]
 80056d0:	4a42      	ldr	r2, [pc, #264]	; (80057dc <DMA_CalcBaseAndBitshift+0x118>)
 80056d2:	4293      	cmp	r3, r2
 80056d4:	d04a      	beq.n	800576c <DMA_CalcBaseAndBitshift+0xa8>
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	681b      	ldr	r3, [r3, #0]
 80056da:	4a41      	ldr	r2, [pc, #260]	; (80057e0 <DMA_CalcBaseAndBitshift+0x11c>)
 80056dc:	4293      	cmp	r3, r2
 80056de:	d045      	beq.n	800576c <DMA_CalcBaseAndBitshift+0xa8>
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	681b      	ldr	r3, [r3, #0]
 80056e4:	4a3f      	ldr	r2, [pc, #252]	; (80057e4 <DMA_CalcBaseAndBitshift+0x120>)
 80056e6:	4293      	cmp	r3, r2
 80056e8:	d040      	beq.n	800576c <DMA_CalcBaseAndBitshift+0xa8>
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	681b      	ldr	r3, [r3, #0]
 80056ee:	4a3e      	ldr	r2, [pc, #248]	; (80057e8 <DMA_CalcBaseAndBitshift+0x124>)
 80056f0:	4293      	cmp	r3, r2
 80056f2:	d03b      	beq.n	800576c <DMA_CalcBaseAndBitshift+0xa8>
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	681b      	ldr	r3, [r3, #0]
 80056f8:	4a3c      	ldr	r2, [pc, #240]	; (80057ec <DMA_CalcBaseAndBitshift+0x128>)
 80056fa:	4293      	cmp	r3, r2
 80056fc:	d036      	beq.n	800576c <DMA_CalcBaseAndBitshift+0xa8>
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	681b      	ldr	r3, [r3, #0]
 8005702:	4a3b      	ldr	r2, [pc, #236]	; (80057f0 <DMA_CalcBaseAndBitshift+0x12c>)
 8005704:	4293      	cmp	r3, r2
 8005706:	d031      	beq.n	800576c <DMA_CalcBaseAndBitshift+0xa8>
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	681b      	ldr	r3, [r3, #0]
 800570c:	4a39      	ldr	r2, [pc, #228]	; (80057f4 <DMA_CalcBaseAndBitshift+0x130>)
 800570e:	4293      	cmp	r3, r2
 8005710:	d02c      	beq.n	800576c <DMA_CalcBaseAndBitshift+0xa8>
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	681b      	ldr	r3, [r3, #0]
 8005716:	4a38      	ldr	r2, [pc, #224]	; (80057f8 <DMA_CalcBaseAndBitshift+0x134>)
 8005718:	4293      	cmp	r3, r2
 800571a:	d027      	beq.n	800576c <DMA_CalcBaseAndBitshift+0xa8>
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	681b      	ldr	r3, [r3, #0]
 8005720:	4a36      	ldr	r2, [pc, #216]	; (80057fc <DMA_CalcBaseAndBitshift+0x138>)
 8005722:	4293      	cmp	r3, r2
 8005724:	d022      	beq.n	800576c <DMA_CalcBaseAndBitshift+0xa8>
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	681b      	ldr	r3, [r3, #0]
 800572a:	4a35      	ldr	r2, [pc, #212]	; (8005800 <DMA_CalcBaseAndBitshift+0x13c>)
 800572c:	4293      	cmp	r3, r2
 800572e:	d01d      	beq.n	800576c <DMA_CalcBaseAndBitshift+0xa8>
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	681b      	ldr	r3, [r3, #0]
 8005734:	4a33      	ldr	r2, [pc, #204]	; (8005804 <DMA_CalcBaseAndBitshift+0x140>)
 8005736:	4293      	cmp	r3, r2
 8005738:	d018      	beq.n	800576c <DMA_CalcBaseAndBitshift+0xa8>
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	681b      	ldr	r3, [r3, #0]
 800573e:	4a32      	ldr	r2, [pc, #200]	; (8005808 <DMA_CalcBaseAndBitshift+0x144>)
 8005740:	4293      	cmp	r3, r2
 8005742:	d013      	beq.n	800576c <DMA_CalcBaseAndBitshift+0xa8>
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	681b      	ldr	r3, [r3, #0]
 8005748:	4a30      	ldr	r2, [pc, #192]	; (800580c <DMA_CalcBaseAndBitshift+0x148>)
 800574a:	4293      	cmp	r3, r2
 800574c:	d00e      	beq.n	800576c <DMA_CalcBaseAndBitshift+0xa8>
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	681b      	ldr	r3, [r3, #0]
 8005752:	4a2f      	ldr	r2, [pc, #188]	; (8005810 <DMA_CalcBaseAndBitshift+0x14c>)
 8005754:	4293      	cmp	r3, r2
 8005756:	d009      	beq.n	800576c <DMA_CalcBaseAndBitshift+0xa8>
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	681b      	ldr	r3, [r3, #0]
 800575c:	4a2d      	ldr	r2, [pc, #180]	; (8005814 <DMA_CalcBaseAndBitshift+0x150>)
 800575e:	4293      	cmp	r3, r2
 8005760:	d004      	beq.n	800576c <DMA_CalcBaseAndBitshift+0xa8>
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	681b      	ldr	r3, [r3, #0]
 8005766:	4a2c      	ldr	r2, [pc, #176]	; (8005818 <DMA_CalcBaseAndBitshift+0x154>)
 8005768:	4293      	cmp	r3, r2
 800576a:	d101      	bne.n	8005770 <DMA_CalcBaseAndBitshift+0xac>
 800576c:	2301      	movs	r3, #1
 800576e:	e000      	b.n	8005772 <DMA_CalcBaseAndBitshift+0xae>
 8005770:	2300      	movs	r3, #0
 8005772:	2b00      	cmp	r3, #0
 8005774:	d024      	beq.n	80057c0 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	681b      	ldr	r3, [r3, #0]
 800577a:	b2db      	uxtb	r3, r3
 800577c:	3b10      	subs	r3, #16
 800577e:	4a27      	ldr	r2, [pc, #156]	; (800581c <DMA_CalcBaseAndBitshift+0x158>)
 8005780:	fba2 2303 	umull	r2, r3, r2, r3
 8005784:	091b      	lsrs	r3, r3, #4
 8005786:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8005788:	68fb      	ldr	r3, [r7, #12]
 800578a:	f003 0307 	and.w	r3, r3, #7
 800578e:	4a24      	ldr	r2, [pc, #144]	; (8005820 <DMA_CalcBaseAndBitshift+0x15c>)
 8005790:	5cd3      	ldrb	r3, [r2, r3]
 8005792:	461a      	mov	r2, r3
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	65da      	str	r2, [r3, #92]	; 0x5c

    if (stream_number > 3U)
 8005798:	68fb      	ldr	r3, [r7, #12]
 800579a:	2b03      	cmp	r3, #3
 800579c:	d908      	bls.n	80057b0 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	681b      	ldr	r3, [r3, #0]
 80057a2:	461a      	mov	r2, r3
 80057a4:	4b1f      	ldr	r3, [pc, #124]	; (8005824 <DMA_CalcBaseAndBitshift+0x160>)
 80057a6:	4013      	ands	r3, r2
 80057a8:	1d1a      	adds	r2, r3, #4
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	659a      	str	r2, [r3, #88]	; 0x58
 80057ae:	e00d      	b.n	80057cc <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	681b      	ldr	r3, [r3, #0]
 80057b4:	461a      	mov	r2, r3
 80057b6:	4b1b      	ldr	r3, [pc, #108]	; (8005824 <DMA_CalcBaseAndBitshift+0x160>)
 80057b8:	4013      	ands	r3, r2
 80057ba:	687a      	ldr	r2, [r7, #4]
 80057bc:	6593      	str	r3, [r2, #88]	; 0x58
 80057be:	e005      	b.n	80057cc <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	681b      	ldr	r3, [r3, #0]
 80057c4:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	659a      	str	r2, [r3, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80057d0:	4618      	mov	r0, r3
 80057d2:	3714      	adds	r7, #20
 80057d4:	46bd      	mov	sp, r7
 80057d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057da:	4770      	bx	lr
 80057dc:	40020010 	.word	0x40020010
 80057e0:	40020028 	.word	0x40020028
 80057e4:	40020040 	.word	0x40020040
 80057e8:	40020058 	.word	0x40020058
 80057ec:	40020070 	.word	0x40020070
 80057f0:	40020088 	.word	0x40020088
 80057f4:	400200a0 	.word	0x400200a0
 80057f8:	400200b8 	.word	0x400200b8
 80057fc:	40020410 	.word	0x40020410
 8005800:	40020428 	.word	0x40020428
 8005804:	40020440 	.word	0x40020440
 8005808:	40020458 	.word	0x40020458
 800580c:	40020470 	.word	0x40020470
 8005810:	40020488 	.word	0x40020488
 8005814:	400204a0 	.word	0x400204a0
 8005818:	400204b8 	.word	0x400204b8
 800581c:	aaaaaaab 	.word	0xaaaaaaab
 8005820:	0801a024 	.word	0x0801a024
 8005824:	fffffc00 	.word	0xfffffc00

08005828 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8005828:	b480      	push	{r7}
 800582a:	b085      	sub	sp, #20
 800582c:	af00      	add	r7, sp, #0
 800582e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005830:	2300      	movs	r3, #0
 8005832:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	699b      	ldr	r3, [r3, #24]
 8005838:	2b00      	cmp	r3, #0
 800583a:	d120      	bne.n	800587e <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005840:	2b03      	cmp	r3, #3
 8005842:	d858      	bhi.n	80058f6 <DMA_CheckFifoParam+0xce>
 8005844:	a201      	add	r2, pc, #4	; (adr r2, 800584c <DMA_CheckFifoParam+0x24>)
 8005846:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800584a:	bf00      	nop
 800584c:	0800585d 	.word	0x0800585d
 8005850:	0800586f 	.word	0x0800586f
 8005854:	0800585d 	.word	0x0800585d
 8005858:	080058f7 	.word	0x080058f7
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005860:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005864:	2b00      	cmp	r3, #0
 8005866:	d048      	beq.n	80058fa <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 8005868:	2301      	movs	r3, #1
 800586a:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800586c:	e045      	b.n	80058fa <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005872:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8005876:	d142      	bne.n	80058fe <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 8005878:	2301      	movs	r3, #1
 800587a:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800587c:	e03f      	b.n	80058fe <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	699b      	ldr	r3, [r3, #24]
 8005882:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005886:	d123      	bne.n	80058d0 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800588c:	2b03      	cmp	r3, #3
 800588e:	d838      	bhi.n	8005902 <DMA_CheckFifoParam+0xda>
 8005890:	a201      	add	r2, pc, #4	; (adr r2, 8005898 <DMA_CheckFifoParam+0x70>)
 8005892:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005896:	bf00      	nop
 8005898:	080058a9 	.word	0x080058a9
 800589c:	080058af 	.word	0x080058af
 80058a0:	080058a9 	.word	0x080058a9
 80058a4:	080058c1 	.word	0x080058c1
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 80058a8:	2301      	movs	r3, #1
 80058aa:	73fb      	strb	r3, [r7, #15]
        break;
 80058ac:	e030      	b.n	8005910 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80058b2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80058b6:	2b00      	cmp	r3, #0
 80058b8:	d025      	beq.n	8005906 <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 80058ba:	2301      	movs	r3, #1
 80058bc:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80058be:	e022      	b.n	8005906 <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80058c4:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80058c8:	d11f      	bne.n	800590a <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 80058ca:	2301      	movs	r3, #1
 80058cc:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80058ce:	e01c      	b.n	800590a <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80058d4:	2b02      	cmp	r3, #2
 80058d6:	d902      	bls.n	80058de <DMA_CheckFifoParam+0xb6>
 80058d8:	2b03      	cmp	r3, #3
 80058da:	d003      	beq.n	80058e4 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 80058dc:	e018      	b.n	8005910 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 80058de:	2301      	movs	r3, #1
 80058e0:	73fb      	strb	r3, [r7, #15]
        break;
 80058e2:	e015      	b.n	8005910 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80058e8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80058ec:	2b00      	cmp	r3, #0
 80058ee:	d00e      	beq.n	800590e <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 80058f0:	2301      	movs	r3, #1
 80058f2:	73fb      	strb	r3, [r7, #15]
    break;
 80058f4:	e00b      	b.n	800590e <DMA_CheckFifoParam+0xe6>
        break;
 80058f6:	bf00      	nop
 80058f8:	e00a      	b.n	8005910 <DMA_CheckFifoParam+0xe8>
        break;
 80058fa:	bf00      	nop
 80058fc:	e008      	b.n	8005910 <DMA_CheckFifoParam+0xe8>
        break;
 80058fe:	bf00      	nop
 8005900:	e006      	b.n	8005910 <DMA_CheckFifoParam+0xe8>
        break;
 8005902:	bf00      	nop
 8005904:	e004      	b.n	8005910 <DMA_CheckFifoParam+0xe8>
        break;
 8005906:	bf00      	nop
 8005908:	e002      	b.n	8005910 <DMA_CheckFifoParam+0xe8>
        break;
 800590a:	bf00      	nop
 800590c:	e000      	b.n	8005910 <DMA_CheckFifoParam+0xe8>
    break;
 800590e:	bf00      	nop
    }
  }

  return status;
 8005910:	7bfb      	ldrb	r3, [r7, #15]
}
 8005912:	4618      	mov	r0, r3
 8005914:	3714      	adds	r7, #20
 8005916:	46bd      	mov	sp, r7
 8005918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800591c:	4770      	bx	lr
 800591e:	bf00      	nop

08005920 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8005920:	b480      	push	{r7}
 8005922:	b085      	sub	sp, #20
 8005924:	af00      	add	r7, sp, #0
 8005926:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	681b      	ldr	r3, [r3, #0]
 800592c:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	681b      	ldr	r3, [r3, #0]
 8005932:	4a38      	ldr	r2, [pc, #224]	; (8005a14 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 8005934:	4293      	cmp	r3, r2
 8005936:	d022      	beq.n	800597e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	681b      	ldr	r3, [r3, #0]
 800593c:	4a36      	ldr	r2, [pc, #216]	; (8005a18 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 800593e:	4293      	cmp	r3, r2
 8005940:	d01d      	beq.n	800597e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	681b      	ldr	r3, [r3, #0]
 8005946:	4a35      	ldr	r2, [pc, #212]	; (8005a1c <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 8005948:	4293      	cmp	r3, r2
 800594a:	d018      	beq.n	800597e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	681b      	ldr	r3, [r3, #0]
 8005950:	4a33      	ldr	r2, [pc, #204]	; (8005a20 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 8005952:	4293      	cmp	r3, r2
 8005954:	d013      	beq.n	800597e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	681b      	ldr	r3, [r3, #0]
 800595a:	4a32      	ldr	r2, [pc, #200]	; (8005a24 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 800595c:	4293      	cmp	r3, r2
 800595e:	d00e      	beq.n	800597e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	681b      	ldr	r3, [r3, #0]
 8005964:	4a30      	ldr	r2, [pc, #192]	; (8005a28 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 8005966:	4293      	cmp	r3, r2
 8005968:	d009      	beq.n	800597e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	681b      	ldr	r3, [r3, #0]
 800596e:	4a2f      	ldr	r2, [pc, #188]	; (8005a2c <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 8005970:	4293      	cmp	r3, r2
 8005972:	d004      	beq.n	800597e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	681b      	ldr	r3, [r3, #0]
 8005978:	4a2d      	ldr	r2, [pc, #180]	; (8005a30 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 800597a:	4293      	cmp	r3, r2
 800597c:	d101      	bne.n	8005982 <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 800597e:	2301      	movs	r3, #1
 8005980:	e000      	b.n	8005984 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 8005982:	2300      	movs	r3, #0
 8005984:	2b00      	cmp	r3, #0
 8005986:	d01a      	beq.n	80059be <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	681b      	ldr	r3, [r3, #0]
 800598c:	b2db      	uxtb	r3, r3
 800598e:	3b08      	subs	r3, #8
 8005990:	4a28      	ldr	r2, [pc, #160]	; (8005a34 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 8005992:	fba2 2303 	umull	r2, r3, r2, r3
 8005996:	091b      	lsrs	r3, r3, #4
 8005998:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 800599a:	68fa      	ldr	r2, [r7, #12]
 800599c:	4b26      	ldr	r3, [pc, #152]	; (8005a38 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 800599e:	4413      	add	r3, r2
 80059a0:	009b      	lsls	r3, r3, #2
 80059a2:	461a      	mov	r2, r3
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	4a24      	ldr	r2, [pc, #144]	; (8005a3c <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 80059ac:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 80059ae:	68fb      	ldr	r3, [r7, #12]
 80059b0:	f003 031f 	and.w	r3, r3, #31
 80059b4:	2201      	movs	r2, #1
 80059b6:	409a      	lsls	r2, r3
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	669a      	str	r2, [r3, #104]	; 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 80059bc:	e024      	b.n	8005a08 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	681b      	ldr	r3, [r3, #0]
 80059c2:	b2db      	uxtb	r3, r3
 80059c4:	3b10      	subs	r3, #16
 80059c6:	4a1e      	ldr	r2, [pc, #120]	; (8005a40 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 80059c8:	fba2 2303 	umull	r2, r3, r2, r3
 80059cc:	091b      	lsrs	r3, r3, #4
 80059ce:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 80059d0:	68bb      	ldr	r3, [r7, #8]
 80059d2:	4a1c      	ldr	r2, [pc, #112]	; (8005a44 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 80059d4:	4293      	cmp	r3, r2
 80059d6:	d806      	bhi.n	80059e6 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 80059d8:	68bb      	ldr	r3, [r7, #8]
 80059da:	4a1b      	ldr	r2, [pc, #108]	; (8005a48 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 80059dc:	4293      	cmp	r3, r2
 80059de:	d902      	bls.n	80059e6 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 80059e0:	68fb      	ldr	r3, [r7, #12]
 80059e2:	3308      	adds	r3, #8
 80059e4:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 80059e6:	68fa      	ldr	r2, [r7, #12]
 80059e8:	4b18      	ldr	r3, [pc, #96]	; (8005a4c <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 80059ea:	4413      	add	r3, r2
 80059ec:	009b      	lsls	r3, r3, #2
 80059ee:	461a      	mov	r2, r3
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	4a16      	ldr	r2, [pc, #88]	; (8005a50 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 80059f8:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 80059fa:	68fb      	ldr	r3, [r7, #12]
 80059fc:	f003 031f 	and.w	r3, r3, #31
 8005a00:	2201      	movs	r2, #1
 8005a02:	409a      	lsls	r2, r3
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	669a      	str	r2, [r3, #104]	; 0x68
}
 8005a08:	bf00      	nop
 8005a0a:	3714      	adds	r7, #20
 8005a0c:	46bd      	mov	sp, r7
 8005a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a12:	4770      	bx	lr
 8005a14:	58025408 	.word	0x58025408
 8005a18:	5802541c 	.word	0x5802541c
 8005a1c:	58025430 	.word	0x58025430
 8005a20:	58025444 	.word	0x58025444
 8005a24:	58025458 	.word	0x58025458
 8005a28:	5802546c 	.word	0x5802546c
 8005a2c:	58025480 	.word	0x58025480
 8005a30:	58025494 	.word	0x58025494
 8005a34:	cccccccd 	.word	0xcccccccd
 8005a38:	16009600 	.word	0x16009600
 8005a3c:	58025880 	.word	0x58025880
 8005a40:	aaaaaaab 	.word	0xaaaaaaab
 8005a44:	400204b8 	.word	0x400204b8
 8005a48:	4002040f 	.word	0x4002040f
 8005a4c:	10008200 	.word	0x10008200
 8005a50:	40020880 	.word	0x40020880

08005a54 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8005a54:	b480      	push	{r7}
 8005a56:	b085      	sub	sp, #20
 8005a58:	af00      	add	r7, sp, #0
 8005a5a:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	685b      	ldr	r3, [r3, #4]
 8005a60:	b2db      	uxtb	r3, r3
 8005a62:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 8005a64:	68fb      	ldr	r3, [r7, #12]
 8005a66:	2b00      	cmp	r3, #0
 8005a68:	d04a      	beq.n	8005b00 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 8005a6a:	68fb      	ldr	r3, [r7, #12]
 8005a6c:	2b08      	cmp	r3, #8
 8005a6e:	d847      	bhi.n	8005b00 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	681b      	ldr	r3, [r3, #0]
 8005a74:	4a25      	ldr	r2, [pc, #148]	; (8005b0c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 8005a76:	4293      	cmp	r3, r2
 8005a78:	d022      	beq.n	8005ac0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	681b      	ldr	r3, [r3, #0]
 8005a7e:	4a24      	ldr	r2, [pc, #144]	; (8005b10 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 8005a80:	4293      	cmp	r3, r2
 8005a82:	d01d      	beq.n	8005ac0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	681b      	ldr	r3, [r3, #0]
 8005a88:	4a22      	ldr	r2, [pc, #136]	; (8005b14 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 8005a8a:	4293      	cmp	r3, r2
 8005a8c:	d018      	beq.n	8005ac0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	681b      	ldr	r3, [r3, #0]
 8005a92:	4a21      	ldr	r2, [pc, #132]	; (8005b18 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 8005a94:	4293      	cmp	r3, r2
 8005a96:	d013      	beq.n	8005ac0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	681b      	ldr	r3, [r3, #0]
 8005a9c:	4a1f      	ldr	r2, [pc, #124]	; (8005b1c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 8005a9e:	4293      	cmp	r3, r2
 8005aa0:	d00e      	beq.n	8005ac0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	681b      	ldr	r3, [r3, #0]
 8005aa6:	4a1e      	ldr	r2, [pc, #120]	; (8005b20 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 8005aa8:	4293      	cmp	r3, r2
 8005aaa:	d009      	beq.n	8005ac0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	681b      	ldr	r3, [r3, #0]
 8005ab0:	4a1c      	ldr	r2, [pc, #112]	; (8005b24 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 8005ab2:	4293      	cmp	r3, r2
 8005ab4:	d004      	beq.n	8005ac0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	681b      	ldr	r3, [r3, #0]
 8005aba:	4a1b      	ldr	r2, [pc, #108]	; (8005b28 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 8005abc:	4293      	cmp	r3, r2
 8005abe:	d101      	bne.n	8005ac4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 8005ac0:	2301      	movs	r3, #1
 8005ac2:	e000      	b.n	8005ac6 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 8005ac4:	2300      	movs	r3, #0
 8005ac6:	2b00      	cmp	r3, #0
 8005ac8:	d00a      	beq.n	8005ae0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 8005aca:	68fa      	ldr	r2, [r7, #12]
 8005acc:	4b17      	ldr	r3, [pc, #92]	; (8005b2c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 8005ace:	4413      	add	r3, r2
 8005ad0:	009b      	lsls	r3, r3, #2
 8005ad2:	461a      	mov	r2, r3
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	4a15      	ldr	r2, [pc, #84]	; (8005b30 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 8005adc:	671a      	str	r2, [r3, #112]	; 0x70
 8005ade:	e009      	b.n	8005af4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8005ae0:	68fa      	ldr	r2, [r7, #12]
 8005ae2:	4b14      	ldr	r3, [pc, #80]	; (8005b34 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 8005ae4:	4413      	add	r3, r2
 8005ae6:	009b      	lsls	r3, r3, #2
 8005ae8:	461a      	mov	r2, r3
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	4a11      	ldr	r2, [pc, #68]	; (8005b38 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 8005af2:	671a      	str	r2, [r3, #112]	; 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 8005af4:	68fb      	ldr	r3, [r7, #12]
 8005af6:	3b01      	subs	r3, #1
 8005af8:	2201      	movs	r2, #1
 8005afa:	409a      	lsls	r2, r3
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	675a      	str	r2, [r3, #116]	; 0x74
  }
}
 8005b00:	bf00      	nop
 8005b02:	3714      	adds	r7, #20
 8005b04:	46bd      	mov	sp, r7
 8005b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b0a:	4770      	bx	lr
 8005b0c:	58025408 	.word	0x58025408
 8005b10:	5802541c 	.word	0x5802541c
 8005b14:	58025430 	.word	0x58025430
 8005b18:	58025444 	.word	0x58025444
 8005b1c:	58025458 	.word	0x58025458
 8005b20:	5802546c 	.word	0x5802546c
 8005b24:	58025480 	.word	0x58025480
 8005b28:	58025494 	.word	0x58025494
 8005b2c:	1600963f 	.word	0x1600963f
 8005b30:	58025940 	.word	0x58025940
 8005b34:	1000823f 	.word	0x1000823f
 8005b38:	40020940 	.word	0x40020940

08005b3c <HAL_FDCAN_Init>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
 8005b3c:	b580      	push	{r7, lr}
 8005b3e:	b098      	sub	sp, #96	; 0x60
 8005b40:	af00      	add	r7, sp, #0
 8005b42:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  const uint32_t CvtEltSize[] = {0, 0, 0, 0, 0, 1, 2, 3, 4, 0, 5, 0, 0, 0, 6, 0, 0, 0, 7};
 8005b44:	4a84      	ldr	r2, [pc, #528]	; (8005d58 <HAL_FDCAN_Init+0x21c>)
 8005b46:	f107 030c 	add.w	r3, r7, #12
 8005b4a:	4611      	mov	r1, r2
 8005b4c:	224c      	movs	r2, #76	; 0x4c
 8005b4e:	4618      	mov	r0, r3
 8005b50:	f012 fd28 	bl	80185a4 <memcpy>

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	2b00      	cmp	r3, #0
 8005b58:	d101      	bne.n	8005b5e <HAL_FDCAN_Init+0x22>
  {
    return HAL_ERROR;
 8005b5a:	2301      	movs	r3, #1
 8005b5c:	e1ca      	b.n	8005ef4 <HAL_FDCAN_Init+0x3b8>
  }

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	681b      	ldr	r3, [r3, #0]
 8005b62:	4a7e      	ldr	r2, [pc, #504]	; (8005d5c <HAL_FDCAN_Init+0x220>)
 8005b64:	4293      	cmp	r3, r2
 8005b66:	d106      	bne.n	8005b76 <HAL_FDCAN_Init+0x3a>
  {
    hfdcan->ttcan = (TTCAN_TypeDef *)((uint32_t)hfdcan->Instance + 0x100U);
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	681b      	ldr	r3, [r3, #0]
 8005b6c:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8005b70:	461a      	mov	r2, r3
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	605a      	str	r2, [r3, #4]

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8005b7c:	b2db      	uxtb	r3, r3
 8005b7e:	2b00      	cmp	r3, #0
 8005b80:	d106      	bne.n	8005b90 <HAL_FDCAN_Init+0x54>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	2200      	movs	r2, #0
 8005b86:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99

    /* Init the low level hardware: CLOCK, NVIC */
    HAL_FDCAN_MspInit(hfdcan);
 8005b8a:	6878      	ldr	r0, [r7, #4]
 8005b8c:	f7fd f94e 	bl	8002e2c <HAL_FDCAN_MspInit>
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	681b      	ldr	r3, [r3, #0]
 8005b94:	699a      	ldr	r2, [r3, #24]
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	681b      	ldr	r3, [r3, #0]
 8005b9a:	f022 0210 	bic.w	r2, r2, #16
 8005b9e:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8005ba0:	f7fd fdaa 	bl	80036f8 <HAL_GetTick>
 8005ba4:	65f8      	str	r0, [r7, #92]	; 0x5c

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8005ba6:	e014      	b.n	8005bd2 <HAL_FDCAN_Init+0x96>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8005ba8:	f7fd fda6 	bl	80036f8 <HAL_GetTick>
 8005bac:	4602      	mov	r2, r0
 8005bae:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005bb0:	1ad3      	subs	r3, r2, r3
 8005bb2:	2b0a      	cmp	r3, #10
 8005bb4:	d90d      	bls.n	8005bd2 <HAL_FDCAN_Init+0x96>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005bbc:	f043 0201 	orr.w	r2, r3, #1
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	2203      	movs	r2, #3
 8005bca:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

      return HAL_ERROR;
 8005bce:	2301      	movs	r3, #1
 8005bd0:	e190      	b.n	8005ef4 <HAL_FDCAN_Init+0x3b8>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	681b      	ldr	r3, [r3, #0]
 8005bd6:	699b      	ldr	r3, [r3, #24]
 8005bd8:	f003 0308 	and.w	r3, r3, #8
 8005bdc:	2b08      	cmp	r3, #8
 8005bde:	d0e3      	beq.n	8005ba8 <HAL_FDCAN_Init+0x6c>
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	681b      	ldr	r3, [r3, #0]
 8005be4:	699a      	ldr	r2, [r3, #24]
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	681b      	ldr	r3, [r3, #0]
 8005bea:	f042 0201 	orr.w	r2, r2, #1
 8005bee:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8005bf0:	f7fd fd82 	bl	80036f8 <HAL_GetTick>
 8005bf4:	65f8      	str	r0, [r7, #92]	; 0x5c

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8005bf6:	e014      	b.n	8005c22 <HAL_FDCAN_Init+0xe6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8005bf8:	f7fd fd7e 	bl	80036f8 <HAL_GetTick>
 8005bfc:	4602      	mov	r2, r0
 8005bfe:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005c00:	1ad3      	subs	r3, r2, r3
 8005c02:	2b0a      	cmp	r3, #10
 8005c04:	d90d      	bls.n	8005c22 <HAL_FDCAN_Init+0xe6>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005c0c:	f043 0201 	orr.w	r2, r3, #1
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	2203      	movs	r2, #3
 8005c1a:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

      return HAL_ERROR;
 8005c1e:	2301      	movs	r3, #1
 8005c20:	e168      	b.n	8005ef4 <HAL_FDCAN_Init+0x3b8>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	681b      	ldr	r3, [r3, #0]
 8005c26:	699b      	ldr	r3, [r3, #24]
 8005c28:	f003 0301 	and.w	r3, r3, #1
 8005c2c:	2b00      	cmp	r3, #0
 8005c2e:	d0e3      	beq.n	8005bf8 <HAL_FDCAN_Init+0xbc>
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	681b      	ldr	r3, [r3, #0]
 8005c34:	699a      	ldr	r2, [r3, #24]
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	681b      	ldr	r3, [r3, #0]
 8005c3a:	f042 0202 	orr.w	r2, r2, #2
 8005c3e:	619a      	str	r2, [r3, #24]

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	7c1b      	ldrb	r3, [r3, #16]
 8005c44:	2b01      	cmp	r3, #1
 8005c46:	d108      	bne.n	8005c5a <HAL_FDCAN_Init+0x11e>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	681b      	ldr	r3, [r3, #0]
 8005c4c:	699a      	ldr	r2, [r3, #24]
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	681b      	ldr	r3, [r3, #0]
 8005c52:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005c56:	619a      	str	r2, [r3, #24]
 8005c58:	e007      	b.n	8005c6a <HAL_FDCAN_Init+0x12e>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	681b      	ldr	r3, [r3, #0]
 8005c5e:	699a      	ldr	r2, [r3, #24]
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	681b      	ldr	r3, [r3, #0]
 8005c64:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005c68:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	7c5b      	ldrb	r3, [r3, #17]
 8005c6e:	2b01      	cmp	r3, #1
 8005c70:	d108      	bne.n	8005c84 <HAL_FDCAN_Init+0x148>
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	681b      	ldr	r3, [r3, #0]
 8005c76:	699a      	ldr	r2, [r3, #24]
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	681b      	ldr	r3, [r3, #0]
 8005c7c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005c80:	619a      	str	r2, [r3, #24]
 8005c82:	e007      	b.n	8005c94 <HAL_FDCAN_Init+0x158>
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	681b      	ldr	r3, [r3, #0]
 8005c88:	699a      	ldr	r2, [r3, #24]
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	681b      	ldr	r3, [r3, #0]
 8005c8e:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8005c92:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	7c9b      	ldrb	r3, [r3, #18]
 8005c98:	2b01      	cmp	r3, #1
 8005c9a:	d108      	bne.n	8005cae <HAL_FDCAN_Init+0x172>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	681b      	ldr	r3, [r3, #0]
 8005ca0:	699a      	ldr	r2, [r3, #24]
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	681b      	ldr	r3, [r3, #0]
 8005ca6:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8005caa:	619a      	str	r2, [r3, #24]
 8005cac:	e007      	b.n	8005cbe <HAL_FDCAN_Init+0x182>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	681b      	ldr	r3, [r3, #0]
 8005cb2:	699a      	ldr	r2, [r3, #24]
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	681b      	ldr	r3, [r3, #0]
 8005cb8:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8005cbc:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	681b      	ldr	r3, [r3, #0]
 8005cc2:	699b      	ldr	r3, [r3, #24]
 8005cc4:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	689a      	ldr	r2, [r3, #8]
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	681b      	ldr	r3, [r3, #0]
 8005cd0:	430a      	orrs	r2, r1
 8005cd2:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	681b      	ldr	r3, [r3, #0]
 8005cd8:	699a      	ldr	r2, [r3, #24]
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	681b      	ldr	r3, [r3, #0]
 8005cde:	f022 02a4 	bic.w	r2, r2, #164	; 0xa4
 8005ce2:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	681b      	ldr	r3, [r3, #0]
 8005ce8:	691a      	ldr	r2, [r3, #16]
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	681b      	ldr	r3, [r3, #0]
 8005cee:	f022 0210 	bic.w	r2, r2, #16
 8005cf2:	611a      	str	r2, [r3, #16]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	68db      	ldr	r3, [r3, #12]
 8005cf8:	2b01      	cmp	r3, #1
 8005cfa:	d108      	bne.n	8005d0e <HAL_FDCAN_Init+0x1d2>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	681b      	ldr	r3, [r3, #0]
 8005d00:	699a      	ldr	r2, [r3, #24]
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	681b      	ldr	r3, [r3, #0]
 8005d06:	f042 0204 	orr.w	r2, r2, #4
 8005d0a:	619a      	str	r2, [r3, #24]
 8005d0c:	e030      	b.n	8005d70 <HAL_FDCAN_Init+0x234>
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	68db      	ldr	r3, [r3, #12]
 8005d12:	2b00      	cmp	r3, #0
 8005d14:	d02c      	beq.n	8005d70 <HAL_FDCAN_Init+0x234>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	68db      	ldr	r3, [r3, #12]
 8005d1a:	2b02      	cmp	r3, #2
 8005d1c:	d020      	beq.n	8005d60 <HAL_FDCAN_Init+0x224>
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	681b      	ldr	r3, [r3, #0]
 8005d22:	699a      	ldr	r2, [r3, #24]
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	681b      	ldr	r3, [r3, #0]
 8005d28:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8005d2c:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	681b      	ldr	r3, [r3, #0]
 8005d32:	691a      	ldr	r2, [r3, #16]
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	681b      	ldr	r3, [r3, #0]
 8005d38:	f042 0210 	orr.w	r2, r2, #16
 8005d3c:	611a      	str	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	68db      	ldr	r3, [r3, #12]
 8005d42:	2b03      	cmp	r3, #3
 8005d44:	d114      	bne.n	8005d70 <HAL_FDCAN_Init+0x234>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	681b      	ldr	r3, [r3, #0]
 8005d4a:	699a      	ldr	r2, [r3, #24]
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	681b      	ldr	r3, [r3, #0]
 8005d50:	f042 0220 	orr.w	r2, r2, #32
 8005d54:	619a      	str	r2, [r3, #24]
 8005d56:	e00b      	b.n	8005d70 <HAL_FDCAN_Init+0x234>
 8005d58:	08019f30 	.word	0x08019f30
 8005d5c:	4000a000 	.word	0x4000a000
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	681b      	ldr	r3, [r3, #0]
 8005d64:	699a      	ldr	r2, [r3, #24]
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	681b      	ldr	r3, [r3, #0]
 8005d6a:	f042 0220 	orr.w	r2, r2, #32
 8005d6e:	619a      	str	r2, [r3, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	699b      	ldr	r3, [r3, #24]
 8005d74:	3b01      	subs	r3, #1
 8005d76:	065a      	lsls	r2, r3, #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	69db      	ldr	r3, [r3, #28]
 8005d7c:	3b01      	subs	r3, #1
 8005d7e:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8005d80:	431a      	orrs	r2, r3
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	6a1b      	ldr	r3, [r3, #32]
 8005d86:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8005d88:	ea42 0103 	orr.w	r1, r2, r3
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	695b      	ldr	r3, [r3, #20]
 8005d90:	3b01      	subs	r3, #1
 8005d92:	041a      	lsls	r2, r3, #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	681b      	ldr	r3, [r3, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8005d98:	430a      	orrs	r2, r1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8005d9a:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	689b      	ldr	r3, [r3, #8]
 8005da0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005da4:	d115      	bne.n	8005dd2 <HAL_FDCAN_Init+0x296>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005daa:	1e5a      	subs	r2, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)    | \
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005db0:	3b01      	subs	r3, #1
 8005db2:	021b      	lsls	r3, r3, #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 8005db4:	431a      	orrs	r2, r3
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)    | \
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005dba:	3b01      	subs	r3, #1
 8005dbc:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)    | \
 8005dbe:	ea42 0103 	orr.w	r1, r2, r3
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005dc6:	3b01      	subs	r3, #1
 8005dc8:	041a      	lsls	r2, r3, #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	681b      	ldr	r3, [r3, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)    | \
 8005dce:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 8005dd0:	60da      	str	r2, [r3, #12]
  }

  if (hfdcan->Init.TxFifoQueueElmtsNbr > 0U)
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005dd6:	2b00      	cmp	r3, #0
 8005dd8:	d00a      	beq.n	8005df0 <HAL_FDCAN_Init+0x2b4>
  {
    /* Select between Tx FIFO and Tx Queue operation modes */
    SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	681b      	ldr	r3, [r3, #0]
 8005dde:	f8d3 10c0 	ldr.w	r1, [r3, #192]	; 0xc0
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	681b      	ldr	r3, [r3, #0]
 8005dea:	430a      	orrs	r2, r1
 8005dec:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
  }

  /* Configure Tx element size */
  if ((hfdcan->Init.TxBuffersNbr + hfdcan->Init.TxFifoQueueElmtsNbr) > 0U)
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005df8:	4413      	add	r3, r2
 8005dfa:	2b00      	cmp	r3, #0
 8005dfc:	d012      	beq.n	8005e24 <HAL_FDCAN_Init+0x2e8>
  {
    MODIFY_REG(hfdcan->Instance->TXESC, FDCAN_TXESC_TBDS, CvtEltSize[hfdcan->Init.TxElmtSize]);
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	681b      	ldr	r3, [r3, #0]
 8005e02:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 8005e06:	f023 0107 	bic.w	r1, r3, #7
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005e0e:	009b      	lsls	r3, r3, #2
 8005e10:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8005e14:	4413      	add	r3, r2
 8005e16:	f853 2c54 	ldr.w	r2, [r3, #-84]
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	681b      	ldr	r3, [r3, #0]
 8005e1e:	430a      	orrs	r2, r1
 8005e20:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  /* Configure Rx FIFO 0 element size */
  if (hfdcan->Init.RxFifo0ElmtsNbr > 0U)
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e28:	2b00      	cmp	r3, #0
 8005e2a:	d012      	beq.n	8005e52 <HAL_FDCAN_Init+0x316>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_F0DS, (CvtEltSize[hfdcan->Init.RxFifo0ElmtSize] << FDCAN_RXESC_F0DS_Pos));
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	681b      	ldr	r3, [r3, #0]
 8005e30:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8005e34:	f023 0107 	bic.w	r1, r3, #7
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005e3c:	009b      	lsls	r3, r3, #2
 8005e3e:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8005e42:	4413      	add	r3, r2
 8005e44:	f853 2c54 	ldr.w	r2, [r3, #-84]
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	681b      	ldr	r3, [r3, #0]
 8005e4c:	430a      	orrs	r2, r1
 8005e4e:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  }

  /* Configure Rx FIFO 1 element size */
  if (hfdcan->Init.RxFifo1ElmtsNbr > 0U)
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005e56:	2b00      	cmp	r3, #0
 8005e58:	d013      	beq.n	8005e82 <HAL_FDCAN_Init+0x346>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_F1DS, (CvtEltSize[hfdcan->Init.RxFifo1ElmtSize] << FDCAN_RXESC_F1DS_Pos));
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	681b      	ldr	r3, [r3, #0]
 8005e5e:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8005e62:	f023 0170 	bic.w	r1, r3, #112	; 0x70
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005e6a:	009b      	lsls	r3, r3, #2
 8005e6c:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8005e70:	4413      	add	r3, r2
 8005e72:	f853 3c54 	ldr.w	r3, [r3, #-84]
 8005e76:	011a      	lsls	r2, r3, #4
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	681b      	ldr	r3, [r3, #0]
 8005e7c:	430a      	orrs	r2, r1
 8005e7e:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  }

  /* Configure Rx buffer element size */
  if (hfdcan->Init.RxBuffersNbr > 0U)
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005e86:	2b00      	cmp	r3, #0
 8005e88:	d013      	beq.n	8005eb2 <HAL_FDCAN_Init+0x376>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_RBDS, (CvtEltSize[hfdcan->Init.RxBufferSize] << FDCAN_RXESC_RBDS_Pos));
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	681b      	ldr	r3, [r3, #0]
 8005e8e:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8005e92:	f423 61e0 	bic.w	r1, r3, #1792	; 0x700
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005e9a:	009b      	lsls	r3, r3, #2
 8005e9c:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8005ea0:	4413      	add	r3, r2
 8005ea2:	f853 3c54 	ldr.w	r3, [r3, #-84]
 8005ea6:	021a      	lsls	r2, r3, #8
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	681b      	ldr	r3, [r3, #0]
 8005eac:	430a      	orrs	r2, r1
 8005eae:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  }

  /* By default operation mode is set to Event-driven communication.
     If Time-triggered communication is needed, user should call the
     HAL_FDCAN_TT_ConfigOperation function just after the HAL_FDCAN_Init */
  if (hfdcan->Instance == FDCAN1)
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	681b      	ldr	r3, [r3, #0]
 8005eb6:	4a11      	ldr	r2, [pc, #68]	; (8005efc <HAL_FDCAN_Init+0x3c0>)
 8005eb8:	4293      	cmp	r3, r2
 8005eba:	d107      	bne.n	8005ecc <HAL_FDCAN_Init+0x390>
  {
    CLEAR_BIT(hfdcan->ttcan->TTOCF, FDCAN_TTOCF_OM);
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	685b      	ldr	r3, [r3, #4]
 8005ec0:	689a      	ldr	r2, [r3, #8]
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	685b      	ldr	r3, [r3, #4]
 8005ec6:	f022 0203 	bic.w	r2, r2, #3
 8005eca:	609a      	str	r2, [r3, #8]
  }

  /* Initialize the Latest Tx FIFO/Queue request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	2200      	movs	r2, #0
 8005ed0:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

  /* Initialize the error code */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	2200      	movs	r2, #0
 8005ed8:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	2201      	movs	r2, #1
 8005ee0:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

  /* Calculate each RAM block address */
  status = FDCAN_CalcultateRamBlockAddresses(hfdcan);
 8005ee4:	6878      	ldr	r0, [r7, #4]
 8005ee6:	f000 fddf 	bl	8006aa8 <FDCAN_CalcultateRamBlockAddresses>
 8005eea:	4603      	mov	r3, r0
 8005eec:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b

  /* Return function status */
  return status;
 8005ef0:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
}
 8005ef4:	4618      	mov	r0, r3
 8005ef6:	3760      	adds	r7, #96	; 0x60
 8005ef8:	46bd      	mov	sp, r7
 8005efa:	bd80      	pop	{r7, pc}
 8005efc:	4000a000 	.word	0x4000a000

08005f00 <HAL_FDCAN_ConfigFilter>:
  * @param  sFilterConfig pointer to an FDCAN_FilterTypeDef structure that
  *         contains the filter configuration information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_ConfigFilter(FDCAN_HandleTypeDef *hfdcan, FDCAN_FilterTypeDef *sFilterConfig)
{
 8005f00:	b480      	push	{r7}
 8005f02:	b087      	sub	sp, #28
 8005f04:	af00      	add	r7, sp, #0
 8005f06:	6078      	str	r0, [r7, #4]
 8005f08:	6039      	str	r1, [r7, #0]
  uint32_t FilterElementW1;
  uint32_t FilterElementW2;
  uint32_t *FilterAddress;
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8005f10:	73fb      	strb	r3, [r7, #15]

  if ((state == HAL_FDCAN_STATE_READY) || (state == HAL_FDCAN_STATE_BUSY))
 8005f12:	7bfb      	ldrb	r3, [r7, #15]
 8005f14:	2b01      	cmp	r3, #1
 8005f16:	d002      	beq.n	8005f1e <HAL_FDCAN_ConfigFilter+0x1e>
 8005f18:	7bfb      	ldrb	r3, [r7, #15]
 8005f1a:	2b02      	cmp	r3, #2
 8005f1c:	d157      	bne.n	8005fce <HAL_FDCAN_ConfigFilter+0xce>
    {
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->RxBufferIndex, 63U));
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->IsCalibrationMsg, 1U));
    }

    if (sFilterConfig->IdType == FDCAN_STANDARD_ID)
 8005f1e:	683b      	ldr	r3, [r7, #0]
 8005f20:	681b      	ldr	r3, [r3, #0]
 8005f22:	2b00      	cmp	r3, #0
 8005f24:	d12b      	bne.n	8005f7e <HAL_FDCAN_ConfigFilter+0x7e>
        assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID2, 0x7FFU));
        assert_param(IS_FDCAN_STD_FILTER_TYPE(sFilterConfig->FilterType));
      }

      /* Build filter element */
      if (sFilterConfig->FilterConfig == FDCAN_FILTER_TO_RXBUFFER)
 8005f26:	683b      	ldr	r3, [r7, #0]
 8005f28:	68db      	ldr	r3, [r3, #12]
 8005f2a:	2b07      	cmp	r3, #7
 8005f2c:	d10d      	bne.n	8005f4a <HAL_FDCAN_ConfigFilter+0x4a>
      {
        FilterElementW1 = ((FDCAN_FILTER_TO_RXBUFFER << 27U)       |
                           (sFilterConfig->FilterID1 << 16U)       |
 8005f2e:	683b      	ldr	r3, [r7, #0]
 8005f30:	691b      	ldr	r3, [r3, #16]
 8005f32:	041a      	lsls	r2, r3, #16
                           (sFilterConfig->IsCalibrationMsg << 8U) |
 8005f34:	683b      	ldr	r3, [r7, #0]
 8005f36:	69db      	ldr	r3, [r3, #28]
 8005f38:	021b      	lsls	r3, r3, #8
                           (sFilterConfig->FilterID1 << 16U)       |
 8005f3a:	431a      	orrs	r2, r3
                           sFilterConfig->RxBufferIndex);
 8005f3c:	683b      	ldr	r3, [r7, #0]
 8005f3e:	699b      	ldr	r3, [r3, #24]
                           (sFilterConfig->IsCalibrationMsg << 8U) |
 8005f40:	4313      	orrs	r3, r2
        FilterElementW1 = ((FDCAN_FILTER_TO_RXBUFFER << 27U)       |
 8005f42:	f043 5360 	orr.w	r3, r3, #939524096	; 0x38000000
 8005f46:	617b      	str	r3, [r7, #20]
 8005f48:	e00e      	b.n	8005f68 <HAL_FDCAN_ConfigFilter+0x68>
      }
      else
      {
        FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 8005f4a:	683b      	ldr	r3, [r7, #0]
 8005f4c:	689b      	ldr	r3, [r3, #8]
 8005f4e:	079a      	lsls	r2, r3, #30
                           (sFilterConfig->FilterConfig << 27U) |
 8005f50:	683b      	ldr	r3, [r7, #0]
 8005f52:	68db      	ldr	r3, [r3, #12]
 8005f54:	06db      	lsls	r3, r3, #27
        FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 8005f56:	431a      	orrs	r2, r3
                           (sFilterConfig->FilterID1 << 16U)    |
 8005f58:	683b      	ldr	r3, [r7, #0]
 8005f5a:	691b      	ldr	r3, [r3, #16]
 8005f5c:	041b      	lsls	r3, r3, #16
                           (sFilterConfig->FilterConfig << 27U) |
 8005f5e:	431a      	orrs	r2, r3
                           sFilterConfig->FilterID2);
 8005f60:	683b      	ldr	r3, [r7, #0]
 8005f62:	695b      	ldr	r3, [r3, #20]
        FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 8005f64:	4313      	orrs	r3, r2
 8005f66:	617b      	str	r3, [r7, #20]
      }

      /* Calculate filter address */
      FilterAddress = (uint32_t *)(hfdcan->msgRam.StandardFilterSA + (sFilterConfig->FilterIndex * 4U));
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8005f6c:	683b      	ldr	r3, [r7, #0]
 8005f6e:	685b      	ldr	r3, [r3, #4]
 8005f70:	009b      	lsls	r3, r3, #2
 8005f72:	4413      	add	r3, r2
 8005f74:	60bb      	str	r3, [r7, #8]

      /* Write filter element to the message RAM */
      *FilterAddress = FilterElementW1;
 8005f76:	68bb      	ldr	r3, [r7, #8]
 8005f78:	697a      	ldr	r2, [r7, #20]
 8005f7a:	601a      	str	r2, [r3, #0]
 8005f7c:	e025      	b.n	8005fca <HAL_FDCAN_ConfigFilter+0xca>
        assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID2, 0x1FFFFFFFU));
        assert_param(IS_FDCAN_EXT_FILTER_TYPE(sFilterConfig->FilterType));
      }

      /* Build first word of filter element */
      FilterElementW1 = ((sFilterConfig->FilterConfig << 29U) | sFilterConfig->FilterID1);
 8005f7e:	683b      	ldr	r3, [r7, #0]
 8005f80:	68db      	ldr	r3, [r3, #12]
 8005f82:	075a      	lsls	r2, r3, #29
 8005f84:	683b      	ldr	r3, [r7, #0]
 8005f86:	691b      	ldr	r3, [r3, #16]
 8005f88:	4313      	orrs	r3, r2
 8005f8a:	617b      	str	r3, [r7, #20]

      /* Build second word of filter element */
      if (sFilterConfig->FilterConfig == FDCAN_FILTER_TO_RXBUFFER)
 8005f8c:	683b      	ldr	r3, [r7, #0]
 8005f8e:	68db      	ldr	r3, [r3, #12]
 8005f90:	2b07      	cmp	r3, #7
 8005f92:	d103      	bne.n	8005f9c <HAL_FDCAN_ConfigFilter+0x9c>
      {
        FilterElementW2 = sFilterConfig->RxBufferIndex;
 8005f94:	683b      	ldr	r3, [r7, #0]
 8005f96:	699b      	ldr	r3, [r3, #24]
 8005f98:	613b      	str	r3, [r7, #16]
 8005f9a:	e006      	b.n	8005faa <HAL_FDCAN_ConfigFilter+0xaa>
      }
      else
      {
        FilterElementW2 = ((sFilterConfig->FilterType << 30U) | sFilterConfig->FilterID2);
 8005f9c:	683b      	ldr	r3, [r7, #0]
 8005f9e:	689b      	ldr	r3, [r3, #8]
 8005fa0:	079a      	lsls	r2, r3, #30
 8005fa2:	683b      	ldr	r3, [r7, #0]
 8005fa4:	695b      	ldr	r3, [r3, #20]
 8005fa6:	4313      	orrs	r3, r2
 8005fa8:	613b      	str	r3, [r7, #16]
      }

      /* Calculate filter address */
      FilterAddress = (uint32_t *)(hfdcan->msgRam.ExtendedFilterSA + (sFilterConfig->FilterIndex * 4U * 2U));
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8005fae:	683b      	ldr	r3, [r7, #0]
 8005fb0:	685b      	ldr	r3, [r3, #4]
 8005fb2:	00db      	lsls	r3, r3, #3
 8005fb4:	4413      	add	r3, r2
 8005fb6:	60bb      	str	r3, [r7, #8]

      /* Write filter element to the message RAM */
      *FilterAddress = FilterElementW1;
 8005fb8:	68bb      	ldr	r3, [r7, #8]
 8005fba:	697a      	ldr	r2, [r7, #20]
 8005fbc:	601a      	str	r2, [r3, #0]
      FilterAddress++;
 8005fbe:	68bb      	ldr	r3, [r7, #8]
 8005fc0:	3304      	adds	r3, #4
 8005fc2:	60bb      	str	r3, [r7, #8]
      *FilterAddress = FilterElementW2;
 8005fc4:	68bb      	ldr	r3, [r7, #8]
 8005fc6:	693a      	ldr	r2, [r7, #16]
 8005fc8:	601a      	str	r2, [r3, #0]
    }

    /* Return function status */
    return HAL_OK;
 8005fca:	2300      	movs	r3, #0
 8005fcc:	e008      	b.n	8005fe0 <HAL_FDCAN_ConfigFilter+0xe0>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_INITIALIZED;
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005fd4:	f043 0202 	orr.w	r2, r3, #2
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    return HAL_ERROR;
 8005fde:	2301      	movs	r3, #1
  }
}
 8005fe0:	4618      	mov	r0, r3
 8005fe2:	371c      	adds	r7, #28
 8005fe4:	46bd      	mov	sp, r7
 8005fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fea:	4770      	bx	lr

08005fec <HAL_FDCAN_ConfigGlobalFilter>:
HAL_StatusTypeDef HAL_FDCAN_ConfigGlobalFilter(FDCAN_HandleTypeDef *hfdcan,
                                               uint32_t NonMatchingStd,
                                               uint32_t NonMatchingExt,
                                               uint32_t RejectRemoteStd,
                                               uint32_t RejectRemoteExt)
{
 8005fec:	b480      	push	{r7}
 8005fee:	b085      	sub	sp, #20
 8005ff0:	af00      	add	r7, sp, #0
 8005ff2:	60f8      	str	r0, [r7, #12]
 8005ff4:	60b9      	str	r1, [r7, #8]
 8005ff6:	607a      	str	r2, [r7, #4]
 8005ff8:	603b      	str	r3, [r7, #0]
  assert_param(IS_FDCAN_NON_MATCHING(NonMatchingStd));
  assert_param(IS_FDCAN_NON_MATCHING(NonMatchingExt));
  assert_param(IS_FDCAN_REJECT_REMOTE(RejectRemoteStd));
  assert_param(IS_FDCAN_REJECT_REMOTE(RejectRemoteExt));

  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 8005ffa:	68fb      	ldr	r3, [r7, #12]
 8005ffc:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8006000:	b2db      	uxtb	r3, r3
 8006002:	2b01      	cmp	r3, #1
 8006004:	d110      	bne.n	8006028 <HAL_FDCAN_ConfigGlobalFilter+0x3c>
  {
    /* Configure global filter */
    hfdcan->Instance->GFC = ((NonMatchingStd << FDCAN_GFC_ANFS_Pos)  |
 8006006:	68bb      	ldr	r3, [r7, #8]
 8006008:	011a      	lsls	r2, r3, #4
                             (NonMatchingExt << FDCAN_GFC_ANFE_Pos)  |
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	009b      	lsls	r3, r3, #2
    hfdcan->Instance->GFC = ((NonMatchingStd << FDCAN_GFC_ANFS_Pos)  |
 800600e:	431a      	orrs	r2, r3
                             (RejectRemoteStd << FDCAN_GFC_RRFS_Pos) |
 8006010:	683b      	ldr	r3, [r7, #0]
 8006012:	005b      	lsls	r3, r3, #1
                             (NonMatchingExt << FDCAN_GFC_ANFE_Pos)  |
 8006014:	ea42 0103 	orr.w	r1, r2, r3
    hfdcan->Instance->GFC = ((NonMatchingStd << FDCAN_GFC_ANFS_Pos)  |
 8006018:	68fb      	ldr	r3, [r7, #12]
 800601a:	681b      	ldr	r3, [r3, #0]
                             (RejectRemoteStd << FDCAN_GFC_RRFS_Pos) |
 800601c:	69ba      	ldr	r2, [r7, #24]
 800601e:	430a      	orrs	r2, r1
    hfdcan->Instance->GFC = ((NonMatchingStd << FDCAN_GFC_ANFS_Pos)  |
 8006020:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
                             (RejectRemoteExt << FDCAN_GFC_RRFE_Pos));

    /* Return function status */
    return HAL_OK;
 8006024:	2300      	movs	r3, #0
 8006026:	e008      	b.n	800603a <HAL_FDCAN_ConfigGlobalFilter+0x4e>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
 8006028:	68fb      	ldr	r3, [r7, #12]
 800602a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800602e:	f043 0204 	orr.w	r2, r3, #4
 8006032:	68fb      	ldr	r3, [r7, #12]
 8006034:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    return HAL_ERROR;
 8006038:	2301      	movs	r3, #1
  }
}
 800603a:	4618      	mov	r0, r3
 800603c:	3714      	adds	r7, #20
 800603e:	46bd      	mov	sp, r7
 8006040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006044:	4770      	bx	lr

08006046 <HAL_FDCAN_EnableTxDelayCompensation>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_EnableTxDelayCompensation(FDCAN_HandleTypeDef *hfdcan)
{
 8006046:	b480      	push	{r7}
 8006048:	b083      	sub	sp, #12
 800604a:	af00      	add	r7, sp, #0
 800604c:	6078      	str	r0, [r7, #4]
  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8006054:	b2db      	uxtb	r3, r3
 8006056:	2b01      	cmp	r3, #1
 8006058:	d109      	bne.n	800606e <HAL_FDCAN_EnableTxDelayCompensation+0x28>
  {
    /* Enable transmitter delay compensation */
    SET_BIT(hfdcan->Instance->DBTP, FDCAN_DBTP_TDC);
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	681b      	ldr	r3, [r3, #0]
 800605e:	68da      	ldr	r2, [r3, #12]
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	681b      	ldr	r3, [r3, #0]
 8006064:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8006068:	60da      	str	r2, [r3, #12]

    /* Return function status */
    return HAL_OK;
 800606a:	2300      	movs	r3, #0
 800606c:	e008      	b.n	8006080 <HAL_FDCAN_EnableTxDelayCompensation+0x3a>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8006074:	f043 0204 	orr.w	r2, r3, #4
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    return HAL_ERROR;
 800607e:	2301      	movs	r3, #1
  }
}
 8006080:	4618      	mov	r0, r3
 8006082:	370c      	adds	r7, #12
 8006084:	46bd      	mov	sp, r7
 8006086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800608a:	4770      	bx	lr

0800608c <HAL_FDCAN_Start>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Start(FDCAN_HandleTypeDef *hfdcan)
{
 800608c:	b480      	push	{r7}
 800608e:	b083      	sub	sp, #12
 8006090:	af00      	add	r7, sp, #0
 8006092:	6078      	str	r0, [r7, #4]
  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 800609a:	b2db      	uxtb	r3, r3
 800609c:	2b01      	cmp	r3, #1
 800609e:	d111      	bne.n	80060c4 <HAL_FDCAN_Start+0x38>
  {
    /* Change FDCAN peripheral state */
    hfdcan->State = HAL_FDCAN_STATE_BUSY;
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	2202      	movs	r2, #2
 80060a4:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

    /* Request leave initialisation */
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	681b      	ldr	r3, [r3, #0]
 80060ac:	699a      	ldr	r2, [r3, #24]
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	681b      	ldr	r3, [r3, #0]
 80060b2:	f022 0201 	bic.w	r2, r2, #1
 80060b6:	619a      	str	r2, [r3, #24]

    /* Reset the FDCAN ErrorCode */
    hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	2200      	movs	r2, #0
 80060bc:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    /* Return function status */
    return HAL_OK;
 80060c0:	2300      	movs	r3, #0
 80060c2:	e008      	b.n	80060d6 <HAL_FDCAN_Start+0x4a>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80060ca:	f043 0204 	orr.w	r2, r3, #4
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    return HAL_ERROR;
 80060d4:	2301      	movs	r3, #1
  }
}
 80060d6:	4618      	mov	r0, r3
 80060d8:	370c      	adds	r7, #12
 80060da:	46bd      	mov	sp, r7
 80060dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060e0:	4770      	bx	lr
	...

080060e4 <HAL_FDCAN_GetRxMessage>:
  * @param  pRxHeader pointer to a FDCAN_RxHeaderTypeDef structure.
  * @param  pRxData pointer to a buffer where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_GetRxMessage(FDCAN_HandleTypeDef *hfdcan, uint32_t RxLocation, FDCAN_RxHeaderTypeDef *pRxHeader, uint8_t *pRxData)
{
 80060e4:	b480      	push	{r7}
 80060e6:	b08b      	sub	sp, #44	; 0x2c
 80060e8:	af00      	add	r7, sp, #0
 80060ea:	60f8      	str	r0, [r7, #12]
 80060ec:	60b9      	str	r1, [r7, #8]
 80060ee:	607a      	str	r2, [r7, #4]
 80060f0:	603b      	str	r3, [r7, #0]
  uint32_t *RxAddress;
  uint8_t  *pData;
  uint32_t ByteCounter;
  uint32_t GetIndex = 0;
 80060f2:	2300      	movs	r3, #0
 80060f4:	61fb      	str	r3, [r7, #28]
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 80060f6:	68fb      	ldr	r3, [r7, #12]
 80060f8:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 80060fc:	76fb      	strb	r3, [r7, #27]

  if (state == HAL_FDCAN_STATE_BUSY)
 80060fe:	7efb      	ldrb	r3, [r7, #27]
 8006100:	2b02      	cmp	r3, #2
 8006102:	f040 813b 	bne.w	800637c <HAL_FDCAN_GetRxMessage+0x298>
  {
    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 8006106:	68bb      	ldr	r3, [r7, #8]
 8006108:	2b40      	cmp	r3, #64	; 0x40
 800610a:	d145      	bne.n	8006198 <HAL_FDCAN_GetRxMessage+0xb4>
    {
      /* Check that the Rx FIFO 0 has an allocated area into the RAM */
      if ((hfdcan->Instance->RXF0C & FDCAN_RXF0C_F0S) == 0U)
 800610c:	68fb      	ldr	r3, [r7, #12]
 800610e:	681b      	ldr	r3, [r3, #0]
 8006110:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8006114:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8006118:	2b00      	cmp	r3, #0
 800611a:	d109      	bne.n	8006130 <HAL_FDCAN_GetRxMessage+0x4c>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 800611c:	68fb      	ldr	r3, [r7, #12]
 800611e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8006122:	f043 0220 	orr.w	r2, r3, #32
 8006126:	68fb      	ldr	r3, [r7, #12]
 8006128:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

        return HAL_ERROR;
 800612c:	2301      	movs	r3, #1
 800612e:	e12e      	b.n	800638e <HAL_FDCAN_GetRxMessage+0x2aa>
      }

      /* Check that the Rx FIFO 0 is not empty */
      if ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0FL) == 0U)
 8006130:	68fb      	ldr	r3, [r7, #12]
 8006132:	681b      	ldr	r3, [r3, #0]
 8006134:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8006138:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800613c:	2b00      	cmp	r3, #0
 800613e:	d109      	bne.n	8006154 <HAL_FDCAN_GetRxMessage+0x70>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 8006140:	68fb      	ldr	r3, [r7, #12]
 8006142:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8006146:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800614a:	68fb      	ldr	r3, [r7, #12]
 800614c:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

        return HAL_ERROR;
 8006150:	2301      	movs	r3, #1
 8006152:	e11c      	b.n	800638e <HAL_FDCAN_GetRxMessage+0x2aa>
      }
      else
      {
        /* Check that the Rx FIFO 0 is full & overwrite mode is on*/
        if(((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0F) >> FDCAN_RXF0S_F0F_Pos) == 1U)
 8006154:	68fb      	ldr	r3, [r7, #12]
 8006156:	681b      	ldr	r3, [r3, #0]
 8006158:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800615c:	0e1b      	lsrs	r3, r3, #24
 800615e:	f003 0301 	and.w	r3, r3, #1
 8006162:	2b01      	cmp	r3, #1
 8006164:	d103      	bne.n	800616e <HAL_FDCAN_GetRxMessage+0x8a>
        {
          if(((hfdcan->Instance->RXF0C & FDCAN_RXF0C_F0OM) >> FDCAN_RXF0C_F0OM_Pos) == FDCAN_RX_FIFO_OVERWRITE)
 8006166:	68fb      	ldr	r3, [r7, #12]
 8006168:	681b      	ldr	r3, [r3, #0]
 800616a:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
            GetIndex = 1U;
          }
        }

        /* Calculate Rx FIFO 0 element index*/
        GetIndex += ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0GI) >> FDCAN_RXF0S_F0GI_Pos);
 800616e:	68fb      	ldr	r3, [r7, #12]
 8006170:	681b      	ldr	r3, [r3, #0]
 8006172:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8006176:	0a1b      	lsrs	r3, r3, #8
 8006178:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800617c:	69fa      	ldr	r2, [r7, #28]
 800617e:	4413      	add	r3, r2
 8006180:	61fb      	str	r3, [r7, #28]

        /* Calculate Rx FIFO 0 element address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO0SA + (GetIndex * hfdcan->Init.RxFifo0ElmtSize * 4U));
 8006182:	68fb      	ldr	r3, [r7, #12]
 8006184:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 8006186:	68fb      	ldr	r3, [r7, #12]
 8006188:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800618a:	69f9      	ldr	r1, [r7, #28]
 800618c:	fb01 f303 	mul.w	r3, r1, r3
 8006190:	009b      	lsls	r3, r3, #2
 8006192:	4413      	add	r3, r2
 8006194:	627b      	str	r3, [r7, #36]	; 0x24
 8006196:	e061      	b.n	800625c <HAL_FDCAN_GetRxMessage+0x178>
      }
    }
    else if (RxLocation == FDCAN_RX_FIFO1) /* Rx element is assigned to the Rx FIFO 1 */
 8006198:	68bb      	ldr	r3, [r7, #8]
 800619a:	2b41      	cmp	r3, #65	; 0x41
 800619c:	d145      	bne.n	800622a <HAL_FDCAN_GetRxMessage+0x146>
    {
      /* Check that the Rx FIFO 1 has an allocated area into the RAM */
      if ((hfdcan->Instance->RXF1C & FDCAN_RXF1C_F1S) == 0U)
 800619e:	68fb      	ldr	r3, [r7, #12]
 80061a0:	681b      	ldr	r3, [r3, #0]
 80061a2:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80061a6:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80061aa:	2b00      	cmp	r3, #0
 80061ac:	d109      	bne.n	80061c2 <HAL_FDCAN_GetRxMessage+0xde>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 80061ae:	68fb      	ldr	r3, [r7, #12]
 80061b0:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80061b4:	f043 0220 	orr.w	r2, r3, #32
 80061b8:	68fb      	ldr	r3, [r7, #12]
 80061ba:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

        return HAL_ERROR;
 80061be:	2301      	movs	r3, #1
 80061c0:	e0e5      	b.n	800638e <HAL_FDCAN_GetRxMessage+0x2aa>
      }

      /* Check that the Rx FIFO 0 is not empty */
      if ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1FL) == 0U)
 80061c2:	68fb      	ldr	r3, [r7, #12]
 80061c4:	681b      	ldr	r3, [r3, #0]
 80061c6:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80061ca:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80061ce:	2b00      	cmp	r3, #0
 80061d0:	d109      	bne.n	80061e6 <HAL_FDCAN_GetRxMessage+0x102>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 80061d2:	68fb      	ldr	r3, [r7, #12]
 80061d4:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80061d8:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80061dc:	68fb      	ldr	r3, [r7, #12]
 80061de:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

        return HAL_ERROR;
 80061e2:	2301      	movs	r3, #1
 80061e4:	e0d3      	b.n	800638e <HAL_FDCAN_GetRxMessage+0x2aa>
      }
      else
      {
        /* Check that the Rx FIFO 1 is full & overwrite mode is on*/
        if(((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1F) >> FDCAN_RXF1S_F1F_Pos) == 1U)
 80061e6:	68fb      	ldr	r3, [r7, #12]
 80061e8:	681b      	ldr	r3, [r3, #0]
 80061ea:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80061ee:	0e1b      	lsrs	r3, r3, #24
 80061f0:	f003 0301 	and.w	r3, r3, #1
 80061f4:	2b01      	cmp	r3, #1
 80061f6:	d103      	bne.n	8006200 <HAL_FDCAN_GetRxMessage+0x11c>
        {
          if(((hfdcan->Instance->RXF1C & FDCAN_RXF1C_F1OM) >> FDCAN_RXF1C_F1OM_Pos) == FDCAN_RX_FIFO_OVERWRITE)
 80061f8:	68fb      	ldr	r3, [r7, #12]
 80061fa:	681b      	ldr	r3, [r3, #0]
 80061fc:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
            GetIndex = 1U;
          }
        }

        /* Calculate Rx FIFO 1 element index*/
        GetIndex += ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1GI) >> FDCAN_RXF1S_F1GI_Pos);
 8006200:	68fb      	ldr	r3, [r7, #12]
 8006202:	681b      	ldr	r3, [r3, #0]
 8006204:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8006208:	0a1b      	lsrs	r3, r3, #8
 800620a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800620e:	69fa      	ldr	r2, [r7, #28]
 8006210:	4413      	add	r3, r2
 8006212:	61fb      	str	r3, [r7, #28]

        /* Calculate Rx FIFO 1 element address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO1SA + (GetIndex * hfdcan->Init.RxFifo1ElmtSize * 4U));
 8006214:	68fb      	ldr	r3, [r7, #12]
 8006216:	6f9a      	ldr	r2, [r3, #120]	; 0x78
 8006218:	68fb      	ldr	r3, [r7, #12]
 800621a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800621c:	69f9      	ldr	r1, [r7, #28]
 800621e:	fb01 f303 	mul.w	r3, r1, r3
 8006222:	009b      	lsls	r3, r3, #2
 8006224:	4413      	add	r3, r2
 8006226:	627b      	str	r3, [r7, #36]	; 0x24
 8006228:	e018      	b.n	800625c <HAL_FDCAN_GetRxMessage+0x178>
      }
    }
    else /* Rx element is assigned to a dedicated Rx buffer */
    {
      /* Check that the selected buffer has an allocated area into the RAM */
      if (RxLocation >= hfdcan->Init.RxBuffersNbr)
 800622a:	68fb      	ldr	r3, [r7, #12]
 800622c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800622e:	68ba      	ldr	r2, [r7, #8]
 8006230:	429a      	cmp	r2, r3
 8006232:	d309      	bcc.n	8006248 <HAL_FDCAN_GetRxMessage+0x164>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 8006234:	68fb      	ldr	r3, [r7, #12]
 8006236:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800623a:	f043 0220 	orr.w	r2, r3, #32
 800623e:	68fb      	ldr	r3, [r7, #12]
 8006240:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

        return HAL_ERROR;
 8006244:	2301      	movs	r3, #1
 8006246:	e0a2      	b.n	800638e <HAL_FDCAN_GetRxMessage+0x2aa>
      }
      else
      {
        /* Calculate Rx buffer address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxBufferSA + (RxLocation * hfdcan->Init.RxBufferSize * 4U));
 8006248:	68fb      	ldr	r3, [r7, #12]
 800624a:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 800624c:	68fb      	ldr	r3, [r7, #12]
 800624e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006250:	68b9      	ldr	r1, [r7, #8]
 8006252:	fb01 f303 	mul.w	r3, r1, r3
 8006256:	009b      	lsls	r3, r3, #2
 8006258:	4413      	add	r3, r2
 800625a:	627b      	str	r3, [r7, #36]	; 0x24
      }
    }

    /* Retrieve IdType */
    pRxHeader->IdType = *RxAddress & FDCAN_ELEMENT_MASK_XTD;
 800625c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800625e:	681b      	ldr	r3, [r3, #0]
 8006260:	f003 4280 	and.w	r2, r3, #1073741824	; 0x40000000
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	605a      	str	r2, [r3, #4]

    /* Retrieve Identifier */
    if (pRxHeader->IdType == FDCAN_STANDARD_ID) /* Standard ID element */
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	685b      	ldr	r3, [r3, #4]
 800626c:	2b00      	cmp	r3, #0
 800626e:	d107      	bne.n	8006280 <HAL_FDCAN_GetRxMessage+0x19c>
    {
      pRxHeader->Identifier = ((*RxAddress & FDCAN_ELEMENT_MASK_STDID) >> 18);
 8006270:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006272:	681b      	ldr	r3, [r3, #0]
 8006274:	0c9b      	lsrs	r3, r3, #18
 8006276:	f3c3 020a 	ubfx	r2, r3, #0, #11
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	601a      	str	r2, [r3, #0]
 800627e:	e005      	b.n	800628c <HAL_FDCAN_GetRxMessage+0x1a8>
    }
    else /* Extended ID element */
    {
      pRxHeader->Identifier = (*RxAddress & FDCAN_ELEMENT_MASK_EXTID);
 8006280:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006282:	681b      	ldr	r3, [r3, #0]
 8006284:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	601a      	str	r2, [r3, #0]
    }

    /* Retrieve RxFrameType */
    pRxHeader->RxFrameType = (*RxAddress & FDCAN_ELEMENT_MASK_RTR);
 800628c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800628e:	681b      	ldr	r3, [r3, #0]
 8006290:	f003 5200 	and.w	r2, r3, #536870912	; 0x20000000
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	609a      	str	r2, [r3, #8]

    /* Retrieve ErrorStateIndicator */
    pRxHeader->ErrorStateIndicator = (*RxAddress & FDCAN_ELEMENT_MASK_ESI);
 8006298:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800629a:	681b      	ldr	r3, [r3, #0]
 800629c:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	611a      	str	r2, [r3, #16]

    /* Increment RxAddress pointer to second word of Rx FIFO element */
    RxAddress++;
 80062a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062a6:	3304      	adds	r3, #4
 80062a8:	627b      	str	r3, [r7, #36]	; 0x24

    /* Retrieve RxTimestamp */
    pRxHeader->RxTimestamp = (*RxAddress & FDCAN_ELEMENT_MASK_TS);
 80062aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062ac:	681b      	ldr	r3, [r3, #0]
 80062ae:	b29a      	uxth	r2, r3
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	61da      	str	r2, [r3, #28]

    /* Retrieve DataLength */
    pRxHeader->DataLength = (*RxAddress & FDCAN_ELEMENT_MASK_DLC);
 80062b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062b6:	681b      	ldr	r3, [r3, #0]
 80062b8:	f403 2270 	and.w	r2, r3, #983040	; 0xf0000
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	60da      	str	r2, [r3, #12]

    /* Retrieve BitRateSwitch */
    pRxHeader->BitRateSwitch = (*RxAddress & FDCAN_ELEMENT_MASK_BRS);
 80062c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062c2:	681b      	ldr	r3, [r3, #0]
 80062c4:	f403 1280 	and.w	r2, r3, #1048576	; 0x100000
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	615a      	str	r2, [r3, #20]

    /* Retrieve FDFormat */
    pRxHeader->FDFormat = (*RxAddress & FDCAN_ELEMENT_MASK_FDF);
 80062cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062ce:	681b      	ldr	r3, [r3, #0]
 80062d0:	f403 1200 	and.w	r2, r3, #2097152	; 0x200000
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	619a      	str	r2, [r3, #24]

    /* Retrieve FilterIndex */
    pRxHeader->FilterIndex = ((*RxAddress & FDCAN_ELEMENT_MASK_FIDX) >> 24);
 80062d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062da:	681b      	ldr	r3, [r3, #0]
 80062dc:	0e1b      	lsrs	r3, r3, #24
 80062de:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	621a      	str	r2, [r3, #32]

    /* Retrieve NonMatchingFrame */
    pRxHeader->IsFilterMatchingFrame = ((*RxAddress & FDCAN_ELEMENT_MASK_ANMF) >> 31);
 80062e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062e8:	681b      	ldr	r3, [r3, #0]
 80062ea:	0fda      	lsrs	r2, r3, #31
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	625a      	str	r2, [r3, #36]	; 0x24

    /* Increment RxAddress pointer to payload of Rx FIFO element */
    RxAddress++;
 80062f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062f2:	3304      	adds	r3, #4
 80062f4:	627b      	str	r3, [r7, #36]	; 0x24

    /* Retrieve Rx payload */
    pData = (uint8_t *)RxAddress;
 80062f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062f8:	617b      	str	r3, [r7, #20]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength >> 16]; ByteCounter++)
 80062fa:	2300      	movs	r3, #0
 80062fc:	623b      	str	r3, [r7, #32]
 80062fe:	e00a      	b.n	8006316 <HAL_FDCAN_GetRxMessage+0x232>
    {
      pRxData[ByteCounter] = pData[ByteCounter];
 8006300:	697a      	ldr	r2, [r7, #20]
 8006302:	6a3b      	ldr	r3, [r7, #32]
 8006304:	441a      	add	r2, r3
 8006306:	6839      	ldr	r1, [r7, #0]
 8006308:	6a3b      	ldr	r3, [r7, #32]
 800630a:	440b      	add	r3, r1
 800630c:	7812      	ldrb	r2, [r2, #0]
 800630e:	701a      	strb	r2, [r3, #0]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength >> 16]; ByteCounter++)
 8006310:	6a3b      	ldr	r3, [r7, #32]
 8006312:	3301      	adds	r3, #1
 8006314:	623b      	str	r3, [r7, #32]
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	68db      	ldr	r3, [r3, #12]
 800631a:	0c1b      	lsrs	r3, r3, #16
 800631c:	4a1f      	ldr	r2, [pc, #124]	; (800639c <HAL_FDCAN_GetRxMessage+0x2b8>)
 800631e:	5cd3      	ldrb	r3, [r2, r3]
 8006320:	461a      	mov	r2, r3
 8006322:	6a3b      	ldr	r3, [r7, #32]
 8006324:	4293      	cmp	r3, r2
 8006326:	d3eb      	bcc.n	8006300 <HAL_FDCAN_GetRxMessage+0x21c>
    }

    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 8006328:	68bb      	ldr	r3, [r7, #8]
 800632a:	2b40      	cmp	r3, #64	; 0x40
 800632c:	d105      	bne.n	800633a <HAL_FDCAN_GetRxMessage+0x256>
    {
      /* Acknowledge the Rx FIFO 0 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF0A = GetIndex;
 800632e:	68fb      	ldr	r3, [r7, #12]
 8006330:	681b      	ldr	r3, [r3, #0]
 8006332:	69fa      	ldr	r2, [r7, #28]
 8006334:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
 8006338:	e01e      	b.n	8006378 <HAL_FDCAN_GetRxMessage+0x294>
    }
    else if (RxLocation == FDCAN_RX_FIFO1) /* Rx element is assigned to the Rx FIFO 1 */
 800633a:	68bb      	ldr	r3, [r7, #8]
 800633c:	2b41      	cmp	r3, #65	; 0x41
 800633e:	d105      	bne.n	800634c <HAL_FDCAN_GetRxMessage+0x268>
    {
      /* Acknowledge the Rx FIFO 1 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF1A = GetIndex;
 8006340:	68fb      	ldr	r3, [r7, #12]
 8006342:	681b      	ldr	r3, [r3, #0]
 8006344:	69fa      	ldr	r2, [r7, #28]
 8006346:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
 800634a:	e015      	b.n	8006378 <HAL_FDCAN_GetRxMessage+0x294>
    }
    else /* Rx element is assigned to a dedicated Rx buffer */
    {
      /* Clear the New Data flag of the current Rx buffer */
      if (RxLocation < FDCAN_RX_BUFFER32)
 800634c:	68bb      	ldr	r3, [r7, #8]
 800634e:	2b1f      	cmp	r3, #31
 8006350:	d808      	bhi.n	8006364 <HAL_FDCAN_GetRxMessage+0x280>
      {
        hfdcan->Instance->NDAT1 = ((uint32_t)1 << RxLocation);
 8006352:	68fb      	ldr	r3, [r7, #12]
 8006354:	681b      	ldr	r3, [r3, #0]
 8006356:	2101      	movs	r1, #1
 8006358:	68ba      	ldr	r2, [r7, #8]
 800635a:	fa01 f202 	lsl.w	r2, r1, r2
 800635e:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
 8006362:	e009      	b.n	8006378 <HAL_FDCAN_GetRxMessage+0x294>
      }
      else /* FDCAN_RX_BUFFER32 <= RxLocation <= FDCAN_RX_BUFFER63 */
      {
        hfdcan->Instance->NDAT2 = ((uint32_t)1 << (RxLocation & 0x1FU));
 8006364:	68bb      	ldr	r3, [r7, #8]
 8006366:	f003 021f 	and.w	r2, r3, #31
 800636a:	68fb      	ldr	r3, [r7, #12]
 800636c:	681b      	ldr	r3, [r3, #0]
 800636e:	2101      	movs	r1, #1
 8006370:	fa01 f202 	lsl.w	r2, r1, r2
 8006374:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
      }
    }

    /* Return function status */
    return HAL_OK;
 8006378:	2300      	movs	r3, #0
 800637a:	e008      	b.n	800638e <HAL_FDCAN_GetRxMessage+0x2aa>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 800637c:	68fb      	ldr	r3, [r7, #12]
 800637e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8006382:	f043 0208 	orr.w	r2, r3, #8
 8006386:	68fb      	ldr	r3, [r7, #12]
 8006388:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    return HAL_ERROR;
 800638c:	2301      	movs	r3, #1
  }
}
 800638e:	4618      	mov	r0, r3
 8006390:	372c      	adds	r7, #44	; 0x2c
 8006392:	46bd      	mov	sp, r7
 8006394:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006398:	4770      	bx	lr
 800639a:	bf00      	nop
 800639c:	0801a02c 	.word	0x0801a02c

080063a0 <HAL_FDCAN_ActivateNotification>:
  *           - FDCAN_IT_TX_COMPLETE
  *           - FDCAN_IT_TX_ABORT_COMPLETE
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_ActivateNotification(FDCAN_HandleTypeDef *hfdcan, uint32_t ActiveITs, uint32_t BufferIndexes)
{
 80063a0:	b480      	push	{r7}
 80063a2:	b087      	sub	sp, #28
 80063a4:	af00      	add	r7, sp, #0
 80063a6:	60f8      	str	r0, [r7, #12]
 80063a8:	60b9      	str	r1, [r7, #8]
 80063aa:	607a      	str	r2, [r7, #4]
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 80063ac:	68fb      	ldr	r3, [r7, #12]
 80063ae:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 80063b2:	75fb      	strb	r3, [r7, #23]

  /* Check function parameters */
  assert_param(IS_FDCAN_IT(ActiveITs));

  if ((state == HAL_FDCAN_STATE_READY) || (state == HAL_FDCAN_STATE_BUSY))
 80063b4:	7dfb      	ldrb	r3, [r7, #23]
 80063b6:	2b01      	cmp	r3, #1
 80063b8:	d002      	beq.n	80063c0 <HAL_FDCAN_ActivateNotification+0x20>
 80063ba:	7dfb      	ldrb	r3, [r7, #23]
 80063bc:	2b02      	cmp	r3, #2
 80063be:	d155      	bne.n	800646c <HAL_FDCAN_ActivateNotification+0xcc>
  {
    /* Enable Interrupt lines */
    if ((ActiveITs & hfdcan->Instance->ILS) == 0U)
 80063c0:	68fb      	ldr	r3, [r7, #12]
 80063c2:	681b      	ldr	r3, [r3, #0]
 80063c4:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80063c6:	68bb      	ldr	r3, [r7, #8]
 80063c8:	4013      	ands	r3, r2
 80063ca:	2b00      	cmp	r3, #0
 80063cc:	d108      	bne.n	80063e0 <HAL_FDCAN_ActivateNotification+0x40>
    {
      /* Enable Interrupt line 0 */
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE0);
 80063ce:	68fb      	ldr	r3, [r7, #12]
 80063d0:	681b      	ldr	r3, [r3, #0]
 80063d2:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80063d4:	68fb      	ldr	r3, [r7, #12]
 80063d6:	681b      	ldr	r3, [r3, #0]
 80063d8:	f042 0201 	orr.w	r2, r2, #1
 80063dc:	65da      	str	r2, [r3, #92]	; 0x5c
 80063de:	e014      	b.n	800640a <HAL_FDCAN_ActivateNotification+0x6a>
    }
    else if ((ActiveITs & hfdcan->Instance->ILS) == ActiveITs)
 80063e0:	68fb      	ldr	r3, [r7, #12]
 80063e2:	681b      	ldr	r3, [r3, #0]
 80063e4:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80063e6:	68bb      	ldr	r3, [r7, #8]
 80063e8:	4013      	ands	r3, r2
 80063ea:	68ba      	ldr	r2, [r7, #8]
 80063ec:	429a      	cmp	r2, r3
 80063ee:	d108      	bne.n	8006402 <HAL_FDCAN_ActivateNotification+0x62>
    {
      /* Enable Interrupt line 1 */
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE1);
 80063f0:	68fb      	ldr	r3, [r7, #12]
 80063f2:	681b      	ldr	r3, [r3, #0]
 80063f4:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80063f6:	68fb      	ldr	r3, [r7, #12]
 80063f8:	681b      	ldr	r3, [r3, #0]
 80063fa:	f042 0202 	orr.w	r2, r2, #2
 80063fe:	65da      	str	r2, [r3, #92]	; 0x5c
 8006400:	e003      	b.n	800640a <HAL_FDCAN_ActivateNotification+0x6a>
    }
    else
    {
      /* Enable Interrupt lines 0 and 1 */
      hfdcan->Instance->ILE = (FDCAN_INTERRUPT_LINE0 | FDCAN_INTERRUPT_LINE1);
 8006402:	68fb      	ldr	r3, [r7, #12]
 8006404:	681b      	ldr	r3, [r3, #0]
 8006406:	2203      	movs	r2, #3
 8006408:	65da      	str	r2, [r3, #92]	; 0x5c
    }

    if ((ActiveITs & FDCAN_IT_TX_COMPLETE) != 0U)
 800640a:	68bb      	ldr	r3, [r7, #8]
 800640c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006410:	2b00      	cmp	r3, #0
 8006412:	d009      	beq.n	8006428 <HAL_FDCAN_ActivateNotification+0x88>
    {
      /* Enable Tx Buffer Transmission Interrupt to set TC flag in IR register,
         but interrupt will only occure if TC is enabled in IE register */
      SET_BIT(hfdcan->Instance->TXBTIE, BufferIndexes);
 8006414:	68fb      	ldr	r3, [r7, #12]
 8006416:	681b      	ldr	r3, [r3, #0]
 8006418:	f8d3 10e0 	ldr.w	r1, [r3, #224]	; 0xe0
 800641c:	68fb      	ldr	r3, [r7, #12]
 800641e:	681b      	ldr	r3, [r3, #0]
 8006420:	687a      	ldr	r2, [r7, #4]
 8006422:	430a      	orrs	r2, r1
 8006424:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
    }

    if ((ActiveITs & FDCAN_IT_TX_ABORT_COMPLETE) != 0U)
 8006428:	68bb      	ldr	r3, [r7, #8]
 800642a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800642e:	2b00      	cmp	r3, #0
 8006430:	d009      	beq.n	8006446 <HAL_FDCAN_ActivateNotification+0xa6>
    {
      /* Enable Tx Buffer Cancellation Finished Interrupt to set TCF flag in IR register,
         but interrupt will only occure if TCF is enabled in IE register */
      SET_BIT(hfdcan->Instance->TXBCIE, BufferIndexes);
 8006432:	68fb      	ldr	r3, [r7, #12]
 8006434:	681b      	ldr	r3, [r3, #0]
 8006436:	f8d3 10e4 	ldr.w	r1, [r3, #228]	; 0xe4
 800643a:	68fb      	ldr	r3, [r7, #12]
 800643c:	681b      	ldr	r3, [r3, #0]
 800643e:	687a      	ldr	r2, [r7, #4]
 8006440:	430a      	orrs	r2, r1
 8006442:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
    }

    /* Enable the selected interrupts */
    __HAL_FDCAN_ENABLE_IT(hfdcan, ActiveITs);
 8006446:	68fb      	ldr	r3, [r7, #12]
 8006448:	681b      	ldr	r3, [r3, #0]
 800644a:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800644c:	68ba      	ldr	r2, [r7, #8]
 800644e:	4b0f      	ldr	r3, [pc, #60]	; (800648c <HAL_FDCAN_ActivateNotification+0xec>)
 8006450:	4013      	ands	r3, r2
 8006452:	68fa      	ldr	r2, [r7, #12]
 8006454:	6812      	ldr	r2, [r2, #0]
 8006456:	430b      	orrs	r3, r1
 8006458:	6553      	str	r3, [r2, #84]	; 0x54
 800645a:	4b0d      	ldr	r3, [pc, #52]	; (8006490 <HAL_FDCAN_ActivateNotification+0xf0>)
 800645c:	695a      	ldr	r2, [r3, #20]
 800645e:	68bb      	ldr	r3, [r7, #8]
 8006460:	0f9b      	lsrs	r3, r3, #30
 8006462:	490b      	ldr	r1, [pc, #44]	; (8006490 <HAL_FDCAN_ActivateNotification+0xf0>)
 8006464:	4313      	orrs	r3, r2
 8006466:	614b      	str	r3, [r1, #20]

    /* Return function status */
    return HAL_OK;
 8006468:	2300      	movs	r3, #0
 800646a:	e008      	b.n	800647e <HAL_FDCAN_ActivateNotification+0xde>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_INITIALIZED;
 800646c:	68fb      	ldr	r3, [r7, #12]
 800646e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8006472:	f043 0202 	orr.w	r2, r3, #2
 8006476:	68fb      	ldr	r3, [r7, #12]
 8006478:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    return HAL_ERROR;
 800647c:	2301      	movs	r3, #1
  }
}
 800647e:	4618      	mov	r0, r3
 8006480:	371c      	adds	r7, #28
 8006482:	46bd      	mov	sp, r7
 8006484:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006488:	4770      	bx	lr
 800648a:	bf00      	nop
 800648c:	3fcfffff 	.word	0x3fcfffff
 8006490:	4000a800 	.word	0x4000a800

08006494 <HAL_FDCAN_IRQHandler>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
void HAL_FDCAN_IRQHandler(FDCAN_HandleTypeDef *hfdcan)
{
 8006494:	b580      	push	{r7, lr}
 8006496:	b092      	sub	sp, #72	; 0x48
 8006498:	af00      	add	r7, sp, #0
 800649a:	6078      	str	r0, [r7, #4]
  uint32_t TTDistErrors;
  uint32_t TTFatalErrors;
  uint32_t SWTime;
  uint32_t SWCycleCount;

  ClkCalibrationITs = (FDCAN_CCU->IR << 30);
 800649c:	4b90      	ldr	r3, [pc, #576]	; (80066e0 <HAL_FDCAN_IRQHandler+0x24c>)
 800649e:	691b      	ldr	r3, [r3, #16]
 80064a0:	079b      	lsls	r3, r3, #30
 80064a2:	647b      	str	r3, [r7, #68]	; 0x44
  ClkCalibrationITs &= (FDCAN_CCU->IE << 30);
 80064a4:	4b8e      	ldr	r3, [pc, #568]	; (80066e0 <HAL_FDCAN_IRQHandler+0x24c>)
 80064a6:	695b      	ldr	r3, [r3, #20]
 80064a8:	079b      	lsls	r3, r3, #30
 80064aa:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80064ac:	4013      	ands	r3, r2
 80064ae:	647b      	str	r3, [r7, #68]	; 0x44
  TxEventFifoITs = hfdcan->Instance->IR & FDCAN_TX_EVENT_FIFO_MASK;
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	681b      	ldr	r3, [r3, #0]
 80064b4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80064b6:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 80064ba:	643b      	str	r3, [r7, #64]	; 0x40
  TxEventFifoITs &= hfdcan->Instance->IE;
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	681b      	ldr	r3, [r3, #0]
 80064c0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80064c2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80064c4:	4013      	ands	r3, r2
 80064c6:	643b      	str	r3, [r7, #64]	; 0x40
  RxFifo0ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO0_MASK;
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	681b      	ldr	r3, [r3, #0]
 80064cc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80064ce:	f003 030f 	and.w	r3, r3, #15
 80064d2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RxFifo0ITs &= hfdcan->Instance->IE;
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	681b      	ldr	r3, [r3, #0]
 80064d8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80064da:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80064dc:	4013      	ands	r3, r2
 80064de:	63fb      	str	r3, [r7, #60]	; 0x3c
  RxFifo1ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO1_MASK;
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	681b      	ldr	r3, [r3, #0]
 80064e4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80064e6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80064ea:	63bb      	str	r3, [r7, #56]	; 0x38
  RxFifo1ITs &= hfdcan->Instance->IE;
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	681b      	ldr	r3, [r3, #0]
 80064f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80064f2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80064f4:	4013      	ands	r3, r2
 80064f6:	63bb      	str	r3, [r7, #56]	; 0x38
  Errors = hfdcan->Instance->IR & FDCAN_ERROR_MASK;
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	681b      	ldr	r3, [r3, #0]
 80064fc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80064fe:	f003 5371 	and.w	r3, r3, #1010827264	; 0x3c400000
 8006502:	637b      	str	r3, [r7, #52]	; 0x34
  Errors &= hfdcan->Instance->IE;
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	681b      	ldr	r3, [r3, #0]
 8006508:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800650a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800650c:	4013      	ands	r3, r2
 800650e:	637b      	str	r3, [r7, #52]	; 0x34
  ErrorStatusITs = hfdcan->Instance->IR & FDCAN_ERROR_STATUS_MASK;
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	681b      	ldr	r3, [r3, #0]
 8006514:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006516:	f003 7360 	and.w	r3, r3, #58720256	; 0x3800000
 800651a:	633b      	str	r3, [r7, #48]	; 0x30
  ErrorStatusITs &= hfdcan->Instance->IE;
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	681b      	ldr	r3, [r3, #0]
 8006520:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006522:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006524:	4013      	ands	r3, r2
 8006526:	633b      	str	r3, [r7, #48]	; 0x30

  /* High Priority Message interrupt management *******************************/
  if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_RX_HIGH_PRIORITY_MSG) != 0U)
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	681b      	ldr	r3, [r3, #0]
 800652c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800652e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006532:	2b00      	cmp	r3, #0
 8006534:	d011      	beq.n	800655a <HAL_FDCAN_IRQHandler+0xc6>
  {
    if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG) != 0U)
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	681b      	ldr	r3, [r3, #0]
 800653a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800653c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006540:	2b00      	cmp	r3, #0
 8006542:	d00a      	beq.n	800655a <HAL_FDCAN_IRQHandler+0xc6>
    {
      /* Clear the High Priority Message flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG);
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	681b      	ldr	r3, [r3, #0]
 8006548:	f44f 7280 	mov.w	r2, #256	; 0x100
 800654c:	651a      	str	r2, [r3, #80]	; 0x50
 800654e:	4b64      	ldr	r3, [pc, #400]	; (80066e0 <HAL_FDCAN_IRQHandler+0x24c>)
 8006550:	2200      	movs	r2, #0
 8006552:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->HighPriorityMessageCallback(hfdcan);
#else
      /* High Priority Message Callback */
      HAL_FDCAN_HighPriorityMessageCallback(hfdcan);
 8006554:	6878      	ldr	r0, [r7, #4]
 8006556:	f000 fa5a 	bl	8006a0e <HAL_FDCAN_HighPriorityMessageCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Abort interrupt management **********************************/
  if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TX_ABORT_COMPLETE) != 0U)
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	681b      	ldr	r3, [r3, #0]
 800655e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006560:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006564:	2b00      	cmp	r3, #0
 8006566:	d01e      	beq.n	80065a6 <HAL_FDCAN_IRQHandler+0x112>
  {
    if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TX_ABORT_COMPLETE) != 0U)
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	681b      	ldr	r3, [r3, #0]
 800656c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800656e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006572:	2b00      	cmp	r3, #0
 8006574:	d017      	beq.n	80065a6 <HAL_FDCAN_IRQHandler+0x112>
    {
      /* List of aborted monitored buffers */
      AbortedBuffers = hfdcan->Instance->TXBCF;
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	681b      	ldr	r3, [r3, #0]
 800657a:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 800657e:	62fb      	str	r3, [r7, #44]	; 0x2c
      AbortedBuffers &= hfdcan->Instance->TXBCIE;
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	681b      	ldr	r3, [r3, #0]
 8006584:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8006588:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800658a:	4013      	ands	r3, r2
 800658c:	62fb      	str	r3, [r7, #44]	; 0x2c

      /* Clear the Transmission Cancellation flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_ABORT_COMPLETE);
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	681b      	ldr	r3, [r3, #0]
 8006592:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8006596:	651a      	str	r2, [r3, #80]	; 0x50
 8006598:	4b51      	ldr	r3, [pc, #324]	; (80066e0 <HAL_FDCAN_IRQHandler+0x24c>)
 800659a:	2200      	movs	r2, #0
 800659c:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferAbortCallback(hfdcan, AbortedBuffers);
#else
      /* Transmission Cancellation Callback */
      HAL_FDCAN_TxBufferAbortCallback(hfdcan, AbortedBuffers);
 800659e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80065a0:	6878      	ldr	r0, [r7, #4]
 80065a2:	f000 fa0b 	bl	80069bc <HAL_FDCAN_TxBufferAbortCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Clock calibration unit interrupts management *****************************/
  if (ClkCalibrationITs != 0U)
 80065a6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80065a8:	2b00      	cmp	r3, #0
 80065aa:	d00d      	beq.n	80065c8 <HAL_FDCAN_IRQHandler+0x134>
  {
    /* Clear the Clock Calibration flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, ClkCalibrationITs);
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	681a      	ldr	r2, [r3, #0]
 80065b0:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80065b2:	4b4c      	ldr	r3, [pc, #304]	; (80066e4 <HAL_FDCAN_IRQHandler+0x250>)
 80065b4:	400b      	ands	r3, r1
 80065b6:	6513      	str	r3, [r2, #80]	; 0x50
 80065b8:	4a49      	ldr	r2, [pc, #292]	; (80066e0 <HAL_FDCAN_IRQHandler+0x24c>)
 80065ba:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80065bc:	0f9b      	lsrs	r3, r3, #30
 80065be:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ClockCalibrationCallback(hfdcan, ClkCalibrationITs);
#else
    /* Clock Calibration Callback */
    HAL_FDCAN_ClockCalibrationCallback(hfdcan, ClkCalibrationITs);
 80065c0:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80065c2:	6878      	ldr	r0, [r7, #4]
 80065c4:	f000 f9c4 	bl	8006950 <HAL_FDCAN_ClockCalibrationCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Tx event FIFO interrupts management **************************************/
  if (TxEventFifoITs != 0U)
 80065c8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80065ca:	2b00      	cmp	r3, #0
 80065cc:	d00d      	beq.n	80065ea <HAL_FDCAN_IRQHandler+0x156>
  {
    /* Clear the Tx Event FIFO flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, TxEventFifoITs);
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	681a      	ldr	r2, [r3, #0]
 80065d2:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80065d4:	4b43      	ldr	r3, [pc, #268]	; (80066e4 <HAL_FDCAN_IRQHandler+0x250>)
 80065d6:	400b      	ands	r3, r1
 80065d8:	6513      	str	r3, [r2, #80]	; 0x50
 80065da:	4a41      	ldr	r2, [pc, #260]	; (80066e0 <HAL_FDCAN_IRQHandler+0x24c>)
 80065dc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80065de:	0f9b      	lsrs	r3, r3, #30
 80065e0:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->TxEventFifoCallback(hfdcan, TxEventFifoITs);
#else
    /* Tx Event FIFO Callback */
    HAL_FDCAN_TxEventFifoCallback(hfdcan, TxEventFifoITs);
 80065e2:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80065e4:	6878      	ldr	r0, [r7, #4]
 80065e6:	f000 f9be 	bl	8006966 <HAL_FDCAN_TxEventFifoCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 0 interrupts management ******************************************/
  if (RxFifo0ITs != 0U)
 80065ea:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80065ec:	2b00      	cmp	r3, #0
 80065ee:	d00d      	beq.n	800660c <HAL_FDCAN_IRQHandler+0x178>
  {
    /* Clear the Rx FIFO 0 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo0ITs);
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	681a      	ldr	r2, [r3, #0]
 80065f4:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80065f6:	4b3b      	ldr	r3, [pc, #236]	; (80066e4 <HAL_FDCAN_IRQHandler+0x250>)
 80065f8:	400b      	ands	r3, r1
 80065fa:	6513      	str	r3, [r2, #80]	; 0x50
 80065fc:	4a38      	ldr	r2, [pc, #224]	; (80066e0 <HAL_FDCAN_IRQHandler+0x24c>)
 80065fe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006600:	0f9b      	lsrs	r3, r3, #30
 8006602:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo0Callback(hfdcan, RxFifo0ITs);
#else
    /* Rx FIFO 0 Callback */
    HAL_FDCAN_RxFifo0Callback(hfdcan, RxFifo0ITs);
 8006604:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8006606:	6878      	ldr	r0, [r7, #4]
 8006608:	f7fa f880 	bl	800070c <HAL_FDCAN_RxFifo0Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 1 interrupts management ******************************************/
  if (RxFifo1ITs != 0U)
 800660c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800660e:	2b00      	cmp	r3, #0
 8006610:	d00d      	beq.n	800662e <HAL_FDCAN_IRQHandler+0x19a>
  {
    /* Clear the Rx FIFO 1 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo1ITs);
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	681a      	ldr	r2, [r3, #0]
 8006616:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8006618:	4b32      	ldr	r3, [pc, #200]	; (80066e4 <HAL_FDCAN_IRQHandler+0x250>)
 800661a:	400b      	ands	r3, r1
 800661c:	6513      	str	r3, [r2, #80]	; 0x50
 800661e:	4a30      	ldr	r2, [pc, #192]	; (80066e0 <HAL_FDCAN_IRQHandler+0x24c>)
 8006620:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006622:	0f9b      	lsrs	r3, r3, #30
 8006624:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo1Callback(hfdcan, RxFifo1ITs);
#else
    /* Rx FIFO 1 Callback */
    HAL_FDCAN_RxFifo1Callback(hfdcan, RxFifo1ITs);
 8006626:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8006628:	6878      	ldr	r0, [r7, #4]
 800662a:	f000 f9a7 	bl	800697c <HAL_FDCAN_RxFifo1Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Tx FIFO empty interrupt management ***************************************/
  if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TX_FIFO_EMPTY) != 0U)
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	681b      	ldr	r3, [r3, #0]
 8006632:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006634:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006638:	2b00      	cmp	r3, #0
 800663a:	d011      	beq.n	8006660 <HAL_FDCAN_IRQHandler+0x1cc>
  {
    if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TX_FIFO_EMPTY) != 0U)
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	681b      	ldr	r3, [r3, #0]
 8006640:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006642:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006646:	2b00      	cmp	r3, #0
 8006648:	d00a      	beq.n	8006660 <HAL_FDCAN_IRQHandler+0x1cc>
    {
      /* Clear the Tx FIFO empty flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_FIFO_EMPTY);
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	681b      	ldr	r3, [r3, #0]
 800664e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006652:	651a      	str	r2, [r3, #80]	; 0x50
 8006654:	4b22      	ldr	r3, [pc, #136]	; (80066e0 <HAL_FDCAN_IRQHandler+0x24c>)
 8006656:	2200      	movs	r2, #0
 8006658:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxFifoEmptyCallback(hfdcan);
#else
      /* Tx FIFO empty Callback */
      HAL_FDCAN_TxFifoEmptyCallback(hfdcan);
 800665a:	6878      	ldr	r0, [r7, #4]
 800665c:	f000 f999 	bl	8006992 <HAL_FDCAN_TxFifoEmptyCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Complete interrupt management *******************************/
  if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TX_COMPLETE) != 0U)
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	681b      	ldr	r3, [r3, #0]
 8006664:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006666:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800666a:	2b00      	cmp	r3, #0
 800666c:	d01e      	beq.n	80066ac <HAL_FDCAN_IRQHandler+0x218>
  {
    if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TX_COMPLETE) != 0U)
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	681b      	ldr	r3, [r3, #0]
 8006672:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006674:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006678:	2b00      	cmp	r3, #0
 800667a:	d017      	beq.n	80066ac <HAL_FDCAN_IRQHandler+0x218>
    {
      /* List of transmitted monitored buffers */
      TransmittedBuffers = hfdcan->Instance->TXBTO;
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	681b      	ldr	r3, [r3, #0]
 8006680:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8006684:	62bb      	str	r3, [r7, #40]	; 0x28
      TransmittedBuffers &= hfdcan->Instance->TXBTIE;
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	681b      	ldr	r3, [r3, #0]
 800668a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800668e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006690:	4013      	ands	r3, r2
 8006692:	62bb      	str	r3, [r7, #40]	; 0x28

      /* Clear the Transmission Complete flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_COMPLETE);
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	681b      	ldr	r3, [r3, #0]
 8006698:	f44f 7200 	mov.w	r2, #512	; 0x200
 800669c:	651a      	str	r2, [r3, #80]	; 0x50
 800669e:	4b10      	ldr	r3, [pc, #64]	; (80066e0 <HAL_FDCAN_IRQHandler+0x24c>)
 80066a0:	2200      	movs	r2, #0
 80066a2:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
#else
      /* Transmission Complete Callback */
      HAL_FDCAN_TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
 80066a4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80066a6:	6878      	ldr	r0, [r7, #4]
 80066a8:	f000 f97d 	bl	80069a6 <HAL_FDCAN_TxBufferCompleteCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Rx Buffer New Message interrupt management *******************************/
  if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_RX_BUFFER_NEW_MESSAGE) != 0U)
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	681b      	ldr	r3, [r3, #0]
 80066b0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80066b2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80066b6:	2b00      	cmp	r3, #0
 80066b8:	d016      	beq.n	80066e8 <HAL_FDCAN_IRQHandler+0x254>
  {
    if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_RX_BUFFER_NEW_MESSAGE) != 0U)
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	681b      	ldr	r3, [r3, #0]
 80066be:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80066c0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80066c4:	2b00      	cmp	r3, #0
 80066c6:	d00f      	beq.n	80066e8 <HAL_FDCAN_IRQHandler+0x254>
    {
      /* Clear the Rx Buffer New Message flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RX_BUFFER_NEW_MESSAGE);
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	681b      	ldr	r3, [r3, #0]
 80066cc:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 80066d0:	651a      	str	r2, [r3, #80]	; 0x50
 80066d2:	4b03      	ldr	r3, [pc, #12]	; (80066e0 <HAL_FDCAN_IRQHandler+0x24c>)
 80066d4:	2200      	movs	r2, #0
 80066d6:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->RxBufferNewMessageCallback(hfdcan);
#else
      /* Rx Buffer New Message Callback */
      HAL_FDCAN_RxBufferNewMessageCallback(hfdcan);
 80066d8:	6878      	ldr	r0, [r7, #4]
 80066da:	f000 f97a 	bl	80069d2 <HAL_FDCAN_RxBufferNewMessageCallback>
 80066de:	e003      	b.n	80066e8 <HAL_FDCAN_IRQHandler+0x254>
 80066e0:	4000a800 	.word	0x4000a800
 80066e4:	3fcfffff 	.word	0x3fcfffff
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timestamp Wraparound interrupt management ********************************/
  if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TIMESTAMP_WRAPAROUND) != 0U)
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	681b      	ldr	r3, [r3, #0]
 80066ec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80066ee:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80066f2:	2b00      	cmp	r3, #0
 80066f4:	d011      	beq.n	800671a <HAL_FDCAN_IRQHandler+0x286>
  {
    if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TIMESTAMP_WRAPAROUND) != 0U)
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	681b      	ldr	r3, [r3, #0]
 80066fa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80066fc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006700:	2b00      	cmp	r3, #0
 8006702:	d00a      	beq.n	800671a <HAL_FDCAN_IRQHandler+0x286>
    {
      /* Clear the Timestamp Wraparound flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMESTAMP_WRAPAROUND);
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	681b      	ldr	r3, [r3, #0]
 8006708:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800670c:	651a      	str	r2, [r3, #80]	; 0x50
 800670e:	4b8d      	ldr	r3, [pc, #564]	; (8006944 <HAL_FDCAN_IRQHandler+0x4b0>)
 8006710:	2200      	movs	r2, #0
 8006712:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimestampWraparoundCallback(hfdcan);
#else
      /* Timestamp Wraparound Callback */
      HAL_FDCAN_TimestampWraparoundCallback(hfdcan);
 8006714:	6878      	ldr	r0, [r7, #4]
 8006716:	f000 f966 	bl	80069e6 <HAL_FDCAN_TimestampWraparoundCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timeout Occurred interrupt management ************************************/
  if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TIMEOUT_OCCURRED) != 0U)
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	681b      	ldr	r3, [r3, #0]
 800671e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006720:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006724:	2b00      	cmp	r3, #0
 8006726:	d011      	beq.n	800674c <HAL_FDCAN_IRQHandler+0x2b8>
  {
    if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TIMEOUT_OCCURRED) != 0U)
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	681b      	ldr	r3, [r3, #0]
 800672c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800672e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006732:	2b00      	cmp	r3, #0
 8006734:	d00a      	beq.n	800674c <HAL_FDCAN_IRQHandler+0x2b8>
    {
      /* Clear the Timeout Occurred flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMEOUT_OCCURRED);
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	681b      	ldr	r3, [r3, #0]
 800673a:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 800673e:	651a      	str	r2, [r3, #80]	; 0x50
 8006740:	4b80      	ldr	r3, [pc, #512]	; (8006944 <HAL_FDCAN_IRQHandler+0x4b0>)
 8006742:	2200      	movs	r2, #0
 8006744:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimeoutOccurredCallback(hfdcan);
#else
      /* Timeout Occurred Callback */
      HAL_FDCAN_TimeoutOccurredCallback(hfdcan);
 8006746:	6878      	ldr	r0, [r7, #4]
 8006748:	f000 f957 	bl	80069fa <HAL_FDCAN_TimeoutOccurredCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Message RAM access failure interrupt management **************************/
  if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_RAM_ACCESS_FAILURE) != 0U)
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	681b      	ldr	r3, [r3, #0]
 8006750:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006752:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006756:	2b00      	cmp	r3, #0
 8006758:	d016      	beq.n	8006788 <HAL_FDCAN_IRQHandler+0x2f4>
  {
    if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_RAM_ACCESS_FAILURE) != 0U)
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	681b      	ldr	r3, [r3, #0]
 800675e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006760:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006764:	2b00      	cmp	r3, #0
 8006766:	d00f      	beq.n	8006788 <HAL_FDCAN_IRQHandler+0x2f4>
    {
      /* Clear the Message RAM access failure flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RAM_ACCESS_FAILURE);
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	681b      	ldr	r3, [r3, #0]
 800676c:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8006770:	651a      	str	r2, [r3, #80]	; 0x50
 8006772:	4b74      	ldr	r3, [pc, #464]	; (8006944 <HAL_FDCAN_IRQHandler+0x4b0>)
 8006774:	2200      	movs	r2, #0
 8006776:	611a      	str	r2, [r3, #16]

      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_RAM_ACCESS;
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800677e:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
    }
  }

  /* Error Status interrupts management ***************************************/
  if (ErrorStatusITs != 0U)
 8006788:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800678a:	2b00      	cmp	r3, #0
 800678c:	d00d      	beq.n	80067aa <HAL_FDCAN_IRQHandler+0x316>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, ErrorStatusITs);
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	681a      	ldr	r2, [r3, #0]
 8006792:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006794:	4b6c      	ldr	r3, [pc, #432]	; (8006948 <HAL_FDCAN_IRQHandler+0x4b4>)
 8006796:	400b      	ands	r3, r1
 8006798:	6513      	str	r3, [r2, #80]	; 0x50
 800679a:	4a6a      	ldr	r2, [pc, #424]	; (8006944 <HAL_FDCAN_IRQHandler+0x4b0>)
 800679c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800679e:	0f9b      	lsrs	r3, r3, #30
 80067a0:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorStatusCallback(hfdcan, ErrorStatusITs);
#else
    /* Error Status Callback */
    HAL_FDCAN_ErrorStatusCallback(hfdcan, ErrorStatusITs);
 80067a2:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80067a4:	6878      	ldr	r0, [r7, #4]
 80067a6:	f000 f946 	bl	8006a36 <HAL_FDCAN_ErrorStatusCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Error interrupts management **********************************************/
  if (Errors != 0U)
 80067aa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80067ac:	2b00      	cmp	r3, #0
 80067ae:	d011      	beq.n	80067d4 <HAL_FDCAN_IRQHandler+0x340>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, Errors);
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	681a      	ldr	r2, [r3, #0]
 80067b4:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80067b6:	4b64      	ldr	r3, [pc, #400]	; (8006948 <HAL_FDCAN_IRQHandler+0x4b4>)
 80067b8:	400b      	ands	r3, r1
 80067ba:	6513      	str	r3, [r2, #80]	; 0x50
 80067bc:	4a61      	ldr	r2, [pc, #388]	; (8006944 <HAL_FDCAN_IRQHandler+0x4b0>)
 80067be:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80067c0:	0f9b      	lsrs	r3, r3, #30
 80067c2:	6113      	str	r3, [r2, #16]

    /* Update error code */
    hfdcan->ErrorCode |= Errors;
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	f8d3 209c 	ldr.w	r2, [r3, #156]	; 0x9c
 80067ca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80067cc:	431a      	orrs	r2, r3
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
  }

  if (hfdcan->Instance == FDCAN1)
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	681b      	ldr	r3, [r3, #0]
 80067d8:	4a5c      	ldr	r2, [pc, #368]	; (800694c <HAL_FDCAN_IRQHandler+0x4b8>)
 80067da:	4293      	cmp	r3, r2
 80067dc:	f040 80a6 	bne.w	800692c <HAL_FDCAN_IRQHandler+0x498>
  {
    if ((hfdcan->ttcan->TTOCF & FDCAN_TTOCF_OM) != 0U)
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	685b      	ldr	r3, [r3, #4]
 80067e4:	689b      	ldr	r3, [r3, #8]
 80067e6:	f003 0303 	and.w	r3, r3, #3
 80067ea:	2b00      	cmp	r3, #0
 80067ec:	f000 809e 	beq.w	800692c <HAL_FDCAN_IRQHandler+0x498>
    {
      TTSchedSyncITs = hfdcan->ttcan->TTIR & FDCAN_TT_SCHEDULE_SYNC_MASK;
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	685b      	ldr	r3, [r3, #4]
 80067f4:	6a1b      	ldr	r3, [r3, #32]
 80067f6:	f003 030f 	and.w	r3, r3, #15
 80067fa:	627b      	str	r3, [r7, #36]	; 0x24
      TTSchedSyncITs &= hfdcan->ttcan->TTIE;
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	685b      	ldr	r3, [r3, #4]
 8006800:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006802:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006804:	4013      	ands	r3, r2
 8006806:	627b      	str	r3, [r7, #36]	; 0x24
      TTTimeMarkITs = hfdcan->ttcan->TTIR & FDCAN_TT_TIME_MARK_MASK;
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	685b      	ldr	r3, [r3, #4]
 800680c:	6a1b      	ldr	r3, [r3, #32]
 800680e:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8006812:	623b      	str	r3, [r7, #32]
      TTTimeMarkITs &= hfdcan->ttcan->TTIE;
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	685b      	ldr	r3, [r3, #4]
 8006818:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800681a:	6a3a      	ldr	r2, [r7, #32]
 800681c:	4013      	ands	r3, r2
 800681e:	623b      	str	r3, [r7, #32]
      TTGlobTimeITs = hfdcan->ttcan->TTIR & FDCAN_TT_GLOBAL_TIME_MASK;
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	685b      	ldr	r3, [r3, #4]
 8006824:	6a1b      	ldr	r3, [r3, #32]
 8006826:	f403 73c0 	and.w	r3, r3, #384	; 0x180
 800682a:	61fb      	str	r3, [r7, #28]
      TTGlobTimeITs &= hfdcan->ttcan->TTIE;
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	685b      	ldr	r3, [r3, #4]
 8006830:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006832:	69fa      	ldr	r2, [r7, #28]
 8006834:	4013      	ands	r3, r2
 8006836:	61fb      	str	r3, [r7, #28]
      TTDistErrors = hfdcan->ttcan->TTIR & FDCAN_TT_DISTURBING_ERROR_MASK;
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	685b      	ldr	r3, [r3, #4]
 800683c:	6a1b      	ldr	r3, [r3, #32]
 800683e:	f403 43fc 	and.w	r3, r3, #32256	; 0x7e00
 8006842:	61bb      	str	r3, [r7, #24]
      TTDistErrors &= hfdcan->ttcan->TTIE;
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	685b      	ldr	r3, [r3, #4]
 8006848:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800684a:	69ba      	ldr	r2, [r7, #24]
 800684c:	4013      	ands	r3, r2
 800684e:	61bb      	str	r3, [r7, #24]
      TTFatalErrors = hfdcan->ttcan->TTIR & FDCAN_TT_FATAL_ERROR_MASK;
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	685b      	ldr	r3, [r3, #4]
 8006854:	6a1b      	ldr	r3, [r3, #32]
 8006856:	f403 23f0 	and.w	r3, r3, #491520	; 0x78000
 800685a:	617b      	str	r3, [r7, #20]
      TTFatalErrors &= hfdcan->ttcan->TTIE;
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	685b      	ldr	r3, [r3, #4]
 8006860:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006862:	697a      	ldr	r2, [r7, #20]
 8006864:	4013      	ands	r3, r2
 8006866:	617b      	str	r3, [r7, #20]

      /* TT Schedule Synchronization interrupts management **********************/
      if (TTSchedSyncITs != 0U)
 8006868:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800686a:	2b00      	cmp	r3, #0
 800686c:	d007      	beq.n	800687e <HAL_FDCAN_IRQHandler+0x3ea>
      {
        /* Clear the TT Schedule Synchronization flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTSchedSyncITs);
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	685b      	ldr	r3, [r3, #4]
 8006872:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006874:	621a      	str	r2, [r3, #32]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hfdcan->TT_ScheduleSyncCallback(hfdcan, TTSchedSyncITs);
#else
        /* TT Schedule Synchronization Callback */
        HAL_FDCAN_TT_ScheduleSyncCallback(hfdcan, TTSchedSyncITs);
 8006876:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8006878:	6878      	ldr	r0, [r7, #4]
 800687a:	f000 f8e7 	bl	8006a4c <HAL_FDCAN_TT_ScheduleSyncCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
      }

      /* TT Time Mark interrupts management *************************************/
      if (TTTimeMarkITs != 0U)
 800687e:	6a3b      	ldr	r3, [r7, #32]
 8006880:	2b00      	cmp	r3, #0
 8006882:	d007      	beq.n	8006894 <HAL_FDCAN_IRQHandler+0x400>
      {
        /* Clear the TT Time Mark flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTTimeMarkITs);
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	685b      	ldr	r3, [r3, #4]
 8006888:	6a3a      	ldr	r2, [r7, #32]
 800688a:	621a      	str	r2, [r3, #32]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hfdcan->TT_TimeMarkCallback(hfdcan, TTTimeMarkITs);
#else
        /* TT Time Mark Callback */
        HAL_FDCAN_TT_TimeMarkCallback(hfdcan, TTTimeMarkITs);
 800688c:	6a39      	ldr	r1, [r7, #32]
 800688e:	6878      	ldr	r0, [r7, #4]
 8006890:	f000 f8e7 	bl	8006a62 <HAL_FDCAN_TT_TimeMarkCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
      }

      /* TT Stop Watch interrupt management *************************************/
      if (__HAL_FDCAN_TT_GET_IT_SOURCE(hfdcan, FDCAN_TT_IT_STOP_WATCH) != 0U)
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	685b      	ldr	r3, [r3, #4]
 8006898:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800689a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800689e:	2b00      	cmp	r3, #0
 80068a0:	d01b      	beq.n	80068da <HAL_FDCAN_IRQHandler+0x446>
      {
        if (__HAL_FDCAN_TT_GET_FLAG(hfdcan, FDCAN_TT_FLAG_STOP_WATCH) != 0U)
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	685b      	ldr	r3, [r3, #4]
 80068a6:	6a1b      	ldr	r3, [r3, #32]
 80068a8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80068ac:	2b00      	cmp	r3, #0
 80068ae:	d014      	beq.n	80068da <HAL_FDCAN_IRQHandler+0x446>
        {
          /* Retrieve Stop watch Time and Cycle count */
          SWTime = ((hfdcan->ttcan->TTCPT & FDCAN_TTCPT_SWV) >> FDCAN_TTCPT_SWV_Pos);
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	685b      	ldr	r3, [r3, #4]
 80068b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80068b6:	0c1b      	lsrs	r3, r3, #16
 80068b8:	b29b      	uxth	r3, r3
 80068ba:	613b      	str	r3, [r7, #16]
          SWCycleCount = ((hfdcan->ttcan->TTCPT & FDCAN_TTCPT_CCV) >> FDCAN_TTCPT_CCV_Pos);
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	685b      	ldr	r3, [r3, #4]
 80068c0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80068c2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80068c6:	60fb      	str	r3, [r7, #12]

          /* Clear the TT Stop Watch flag */
          __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, FDCAN_TT_FLAG_STOP_WATCH);
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	685b      	ldr	r3, [r3, #4]
 80068cc:	2240      	movs	r2, #64	; 0x40
 80068ce:	621a      	str	r2, [r3, #32]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hfdcan->TT_StopWatchCallback(hfdcan, SWTime, SWCycleCount);
#else
          /* TT Stop Watch Callback */
          HAL_FDCAN_TT_StopWatchCallback(hfdcan, SWTime, SWCycleCount);
 80068d0:	68fa      	ldr	r2, [r7, #12]
 80068d2:	6939      	ldr	r1, [r7, #16]
 80068d4:	6878      	ldr	r0, [r7, #4]
 80068d6:	f000 f8cf 	bl	8006a78 <HAL_FDCAN_TT_StopWatchCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
        }
      }

      /* TT Global Time interrupts management ***********************************/
      if (TTGlobTimeITs != 0U)
 80068da:	69fb      	ldr	r3, [r7, #28]
 80068dc:	2b00      	cmp	r3, #0
 80068de:	d007      	beq.n	80068f0 <HAL_FDCAN_IRQHandler+0x45c>
      {
        /* Clear the TT Global Time flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTGlobTimeITs);
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	685b      	ldr	r3, [r3, #4]
 80068e4:	69fa      	ldr	r2, [r7, #28]
 80068e6:	621a      	str	r2, [r3, #32]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hfdcan->TT_GlobalTimeCallback(hfdcan, TTGlobTimeITs);
#else
        /* TT Global Time Callback */
        HAL_FDCAN_TT_GlobalTimeCallback(hfdcan, TTGlobTimeITs);
 80068e8:	69f9      	ldr	r1, [r7, #28]
 80068ea:	6878      	ldr	r0, [r7, #4]
 80068ec:	f000 f8d0 	bl	8006a90 <HAL_FDCAN_TT_GlobalTimeCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
      }

      /* TT Disturbing Error interrupts management ******************************/
      if (TTDistErrors != 0U)
 80068f0:	69bb      	ldr	r3, [r7, #24]
 80068f2:	2b00      	cmp	r3, #0
 80068f4:	d00b      	beq.n	800690e <HAL_FDCAN_IRQHandler+0x47a>
      {
        /* Clear the TT Disturbing Error flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTDistErrors);
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	685b      	ldr	r3, [r3, #4]
 80068fa:	69ba      	ldr	r2, [r7, #24]
 80068fc:	621a      	str	r2, [r3, #32]

        /* Update error code */
        hfdcan->ErrorCode |= TTDistErrors;
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	f8d3 209c 	ldr.w	r2, [r3, #156]	; 0x9c
 8006904:	69bb      	ldr	r3, [r7, #24]
 8006906:	431a      	orrs	r2, r3
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
      }

      /* TT Fatal Error interrupts management ***********************************/
      if (TTFatalErrors != 0U)
 800690e:	697b      	ldr	r3, [r7, #20]
 8006910:	2b00      	cmp	r3, #0
 8006912:	d00b      	beq.n	800692c <HAL_FDCAN_IRQHandler+0x498>
      {
        /* Clear the TT Fatal Error flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTFatalErrors);
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	685b      	ldr	r3, [r3, #4]
 8006918:	697a      	ldr	r2, [r7, #20]
 800691a:	621a      	str	r2, [r3, #32]

        /* Update error code */
        hfdcan->ErrorCode |= TTFatalErrors;
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	f8d3 209c 	ldr.w	r2, [r3, #156]	; 0x9c
 8006922:	697b      	ldr	r3, [r7, #20]
 8006924:	431a      	orrs	r2, r3
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
      }
    }
  }

  if (hfdcan->ErrorCode != HAL_FDCAN_ERROR_NONE)
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8006932:	2b00      	cmp	r3, #0
 8006934:	d002      	beq.n	800693c <HAL_FDCAN_IRQHandler+0x4a8>
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorCallback(hfdcan);
#else
    /* Error Callback */
    HAL_FDCAN_ErrorCallback(hfdcan);
 8006936:	6878      	ldr	r0, [r7, #4]
 8006938:	f000 f873 	bl	8006a22 <HAL_FDCAN_ErrorCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }
}
 800693c:	bf00      	nop
 800693e:	3748      	adds	r7, #72	; 0x48
 8006940:	46bd      	mov	sp, r7
 8006942:	bd80      	pop	{r7, pc}
 8006944:	4000a800 	.word	0x4000a800
 8006948:	3fcfffff 	.word	0x3fcfffff
 800694c:	4000a000 	.word	0x4000a000

08006950 <HAL_FDCAN_ClockCalibrationCallback>:
  * @param  ClkCalibrationITs indicates which Clock Calibration interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Clock_Calibration_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_ClockCalibrationCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t ClkCalibrationITs)
{
 8006950:	b480      	push	{r7}
 8006952:	b083      	sub	sp, #12
 8006954:	af00      	add	r7, sp, #0
 8006956:	6078      	str	r0, [r7, #4]
 8006958:	6039      	str	r1, [r7, #0]
  UNUSED(ClkCalibrationITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ClockCalibrationCallback could be implemented in the user file
   */
}
 800695a:	bf00      	nop
 800695c:	370c      	adds	r7, #12
 800695e:	46bd      	mov	sp, r7
 8006960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006964:	4770      	bx	lr

08006966 <HAL_FDCAN_TxEventFifoCallback>:
  * @param  TxEventFifoITs indicates which Tx Event FIFO interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Tx_Event_Fifo_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TxEventFifoCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TxEventFifoITs)
{
 8006966:	b480      	push	{r7}
 8006968:	b083      	sub	sp, #12
 800696a:	af00      	add	r7, sp, #0
 800696c:	6078      	str	r0, [r7, #4]
 800696e:	6039      	str	r1, [r7, #0]
  UNUSED(TxEventFifoITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxEventFifoCallback could be implemented in the user file
   */
}
 8006970:	bf00      	nop
 8006972:	370c      	adds	r7, #12
 8006974:	46bd      	mov	sp, r7
 8006976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800697a:	4770      	bx	lr

0800697c <HAL_FDCAN_RxFifo1Callback>:
  * @param  RxFifo1ITs indicates which Rx FIFO 1 interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Rx_Fifo1_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_RxFifo1Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo1ITs)
{
 800697c:	b480      	push	{r7}
 800697e:	b083      	sub	sp, #12
 8006980:	af00      	add	r7, sp, #0
 8006982:	6078      	str	r0, [r7, #4]
 8006984:	6039      	str	r1, [r7, #0]
  UNUSED(RxFifo1ITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_RxFifo1Callback could be implemented in the user file
   */
}
 8006986:	bf00      	nop
 8006988:	370c      	adds	r7, #12
 800698a:	46bd      	mov	sp, r7
 800698c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006990:	4770      	bx	lr

08006992 <HAL_FDCAN_TxFifoEmptyCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TxFifoEmptyCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8006992:	b480      	push	{r7}
 8006994:	b083      	sub	sp, #12
 8006996:	af00      	add	r7, sp, #0
 8006998:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxFifoEmptyCallback could be implemented in the user file
   */
}
 800699a:	bf00      	nop
 800699c:	370c      	adds	r7, #12
 800699e:	46bd      	mov	sp, r7
 80069a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069a4:	4770      	bx	lr

080069a6 <HAL_FDCAN_TxBufferCompleteCallback>:
  * @param  BufferIndexes Indexes of the transmitted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferCompleteCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 80069a6:	b480      	push	{r7}
 80069a8:	b083      	sub	sp, #12
 80069aa:	af00      	add	r7, sp, #0
 80069ac:	6078      	str	r0, [r7, #4]
 80069ae:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferCompleteCallback could be implemented in the user file
   */
}
 80069b0:	bf00      	nop
 80069b2:	370c      	adds	r7, #12
 80069b4:	46bd      	mov	sp, r7
 80069b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069ba:	4770      	bx	lr

080069bc <HAL_FDCAN_TxBufferAbortCallback>:
  * @param  BufferIndexes Indexes of the aborted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferAbortCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 80069bc:	b480      	push	{r7}
 80069be:	b083      	sub	sp, #12
 80069c0:	af00      	add	r7, sp, #0
 80069c2:	6078      	str	r0, [r7, #4]
 80069c4:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferAbortCallback could be implemented in the user file
   */
}
 80069c6:	bf00      	nop
 80069c8:	370c      	adds	r7, #12
 80069ca:	46bd      	mov	sp, r7
 80069cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069d0:	4770      	bx	lr

080069d2 <HAL_FDCAN_RxBufferNewMessageCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_RxBufferNewMessageCallback(FDCAN_HandleTypeDef *hfdcan)
{
 80069d2:	b480      	push	{r7}
 80069d4:	b083      	sub	sp, #12
 80069d6:	af00      	add	r7, sp, #0
 80069d8:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_RxBufferNewMessageCallback could be implemented in the user file
   */
}
 80069da:	bf00      	nop
 80069dc:	370c      	adds	r7, #12
 80069de:	46bd      	mov	sp, r7
 80069e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069e4:	4770      	bx	lr

080069e6 <HAL_FDCAN_TimestampWraparoundCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimestampWraparoundCallback(FDCAN_HandleTypeDef *hfdcan)
{
 80069e6:	b480      	push	{r7}
 80069e8:	b083      	sub	sp, #12
 80069ea:	af00      	add	r7, sp, #0
 80069ec:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimestampWraparoundCallback could be implemented in the user file
   */
}
 80069ee:	bf00      	nop
 80069f0:	370c      	adds	r7, #12
 80069f2:	46bd      	mov	sp, r7
 80069f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069f8:	4770      	bx	lr

080069fa <HAL_FDCAN_TimeoutOccurredCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimeoutOccurredCallback(FDCAN_HandleTypeDef *hfdcan)
{
 80069fa:	b480      	push	{r7}
 80069fc:	b083      	sub	sp, #12
 80069fe:	af00      	add	r7, sp, #0
 8006a00:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimeoutOccurredCallback could be implemented in the user file
   */
}
 8006a02:	bf00      	nop
 8006a04:	370c      	adds	r7, #12
 8006a06:	46bd      	mov	sp, r7
 8006a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a0c:	4770      	bx	lr

08006a0e <HAL_FDCAN_HighPriorityMessageCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_HighPriorityMessageCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8006a0e:	b480      	push	{r7}
 8006a10:	b083      	sub	sp, #12
 8006a12:	af00      	add	r7, sp, #0
 8006a14:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_HighPriorityMessageCallback could be implemented in the user file
   */
}
 8006a16:	bf00      	nop
 8006a18:	370c      	adds	r7, #12
 8006a1a:	46bd      	mov	sp, r7
 8006a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a20:	4770      	bx	lr

08006a22 <HAL_FDCAN_ErrorCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8006a22:	b480      	push	{r7}
 8006a24:	b083      	sub	sp, #12
 8006a26:	af00      	add	r7, sp, #0
 8006a28:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorCallback could be implemented in the user file
   */
}
 8006a2a:	bf00      	nop
 8006a2c:	370c      	adds	r7, #12
 8006a2e:	46bd      	mov	sp, r7
 8006a30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a34:	4770      	bx	lr

08006a36 <HAL_FDCAN_ErrorStatusCallback>:
  * @param  ErrorStatusITs indicates which Error Status interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Error_Status_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorStatusCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t ErrorStatusITs)
{
 8006a36:	b480      	push	{r7}
 8006a38:	b083      	sub	sp, #12
 8006a3a:	af00      	add	r7, sp, #0
 8006a3c:	6078      	str	r0, [r7, #4]
 8006a3e:	6039      	str	r1, [r7, #0]
  UNUSED(ErrorStatusITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorStatusCallback could be implemented in the user file
   */
}
 8006a40:	bf00      	nop
 8006a42:	370c      	adds	r7, #12
 8006a44:	46bd      	mov	sp, r7
 8006a46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a4a:	4770      	bx	lr

08006a4c <HAL_FDCAN_TT_ScheduleSyncCallback>:
  * @param  TTSchedSyncITs indicates which TT Schedule Synchronization interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_TTScheduleSynchronization_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TT_ScheduleSyncCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TTSchedSyncITs)
{
 8006a4c:	b480      	push	{r7}
 8006a4e:	b083      	sub	sp, #12
 8006a50:	af00      	add	r7, sp, #0
 8006a52:	6078      	str	r0, [r7, #4]
 8006a54:	6039      	str	r1, [r7, #0]
  UNUSED(TTSchedSyncITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TT_ScheduleSyncCallback could be implemented in the user file
   */
}
 8006a56:	bf00      	nop
 8006a58:	370c      	adds	r7, #12
 8006a5a:	46bd      	mov	sp, r7
 8006a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a60:	4770      	bx	lr

08006a62 <HAL_FDCAN_TT_TimeMarkCallback>:
  * @param  TTTimeMarkITs indicates which TT Schedule Synchronization interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_TTTimeMark_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TT_TimeMarkCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TTTimeMarkITs)
{
 8006a62:	b480      	push	{r7}
 8006a64:	b083      	sub	sp, #12
 8006a66:	af00      	add	r7, sp, #0
 8006a68:	6078      	str	r0, [r7, #4]
 8006a6a:	6039      	str	r1, [r7, #0]
  UNUSED(TTTimeMarkITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TT_TimeMarkCallback could be implemented in the user file
   */
}
 8006a6c:	bf00      	nop
 8006a6e:	370c      	adds	r7, #12
 8006a70:	46bd      	mov	sp, r7
 8006a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a76:	4770      	bx	lr

08006a78 <HAL_FDCAN_TT_StopWatchCallback>:
  * @param  SWCycleCount Cycle count value captured together with SWTime.
  *         This parameter is a number between 0 and 0x3F.
  * @retval None
  */
__weak void HAL_FDCAN_TT_StopWatchCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t SWTime, uint32_t SWCycleCount)
{
 8006a78:	b480      	push	{r7}
 8006a7a:	b085      	sub	sp, #20
 8006a7c:	af00      	add	r7, sp, #0
 8006a7e:	60f8      	str	r0, [r7, #12]
 8006a80:	60b9      	str	r1, [r7, #8]
 8006a82:	607a      	str	r2, [r7, #4]
  UNUSED(SWCycleCount);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TT_StopWatchCallback could be implemented in the user file
   */
}
 8006a84:	bf00      	nop
 8006a86:	3714      	adds	r7, #20
 8006a88:	46bd      	mov	sp, r7
 8006a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a8e:	4770      	bx	lr

08006a90 <HAL_FDCAN_TT_GlobalTimeCallback>:
  * @param  TTGlobTimeITs indicates which TT Global Time interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_TTGlobalTime_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TT_GlobalTimeCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TTGlobTimeITs)
{
 8006a90:	b480      	push	{r7}
 8006a92:	b083      	sub	sp, #12
 8006a94:	af00      	add	r7, sp, #0
 8006a96:	6078      	str	r0, [r7, #4]
 8006a98:	6039      	str	r1, [r7, #0]
  UNUSED(TTGlobTimeITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TT_GlobalTimeCallback could be implemented in the user file
   */
}
 8006a9a:	bf00      	nop
 8006a9c:	370c      	adds	r7, #12
 8006a9e:	46bd      	mov	sp, r7
 8006aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006aa4:	4770      	bx	lr
	...

08006aa8 <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
 */
static HAL_StatusTypeDef FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 8006aa8:	b480      	push	{r7}
 8006aaa:	b085      	sub	sp, #20
 8006aac:	af00      	add	r7, sp, #0
 8006aae:	6078      	str	r0, [r7, #4]
  uint32_t RAMcounter;
  uint32_t StartAddress;

  StartAddress = hfdcan->Init.MessageRAMOffset;
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006ab4:	60bb      	str	r3, [r7, #8]

  /* Standard filter list start address */
  MODIFY_REG(hfdcan->Instance->SIDFC, FDCAN_SIDFC_FLSSA, (StartAddress << FDCAN_SIDFC_FLSSA_Pos));
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	681b      	ldr	r3, [r3, #0]
 8006aba:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 8006abe:	4ba7      	ldr	r3, [pc, #668]	; (8006d5c <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8006ac0:	4013      	ands	r3, r2
 8006ac2:	68ba      	ldr	r2, [r7, #8]
 8006ac4:	0091      	lsls	r1, r2, #2
 8006ac6:	687a      	ldr	r2, [r7, #4]
 8006ac8:	6812      	ldr	r2, [r2, #0]
 8006aca:	430b      	orrs	r3, r1
 8006acc:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->SIDFC, FDCAN_SIDFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_SIDFC_LSS_Pos));
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	681b      	ldr	r3, [r3, #0]
 8006ad4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006ad8:	f423 017f 	bic.w	r1, r3, #16711680	; 0xff0000
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ae0:	041a      	lsls	r2, r3, #16
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	681b      	ldr	r3, [r3, #0]
 8006ae6:	430a      	orrs	r2, r1
 8006ae8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Extended filter list start address */
  StartAddress += hfdcan->Init.StdFiltersNbr;
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006af0:	68ba      	ldr	r2, [r7, #8]
 8006af2:	4413      	add	r3, r2
 8006af4:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->XIDFC, FDCAN_XIDFC_FLESA, (StartAddress << FDCAN_XIDFC_FLESA_Pos));
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	681b      	ldr	r3, [r3, #0]
 8006afa:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8006afe:	4b97      	ldr	r3, [pc, #604]	; (8006d5c <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8006b00:	4013      	ands	r3, r2
 8006b02:	68ba      	ldr	r2, [r7, #8]
 8006b04:	0091      	lsls	r1, r2, #2
 8006b06:	687a      	ldr	r2, [r7, #4]
 8006b08:	6812      	ldr	r2, [r2, #0]
 8006b0a:	430b      	orrs	r3, r1
 8006b0c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->XIDFC, FDCAN_XIDFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_XIDFC_LSE_Pos));
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	681b      	ldr	r3, [r3, #0]
 8006b14:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006b18:	f423 01fe 	bic.w	r1, r3, #8323072	; 0x7f0000
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006b20:	041a      	lsls	r2, r3, #16
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	681b      	ldr	r3, [r3, #0]
 8006b26:	430a      	orrs	r2, r1
 8006b28:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Rx FIFO 0 start address */
  StartAddress += (hfdcan->Init.ExtFiltersNbr * 2U);
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006b30:	005b      	lsls	r3, r3, #1
 8006b32:	68ba      	ldr	r2, [r7, #8]
 8006b34:	4413      	add	r3, r2
 8006b36:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXF0C, FDCAN_RXF0C_F0SA, (StartAddress << FDCAN_RXF0C_F0SA_Pos));
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	681b      	ldr	r3, [r3, #0]
 8006b3c:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 8006b40:	4b86      	ldr	r3, [pc, #536]	; (8006d5c <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8006b42:	4013      	ands	r3, r2
 8006b44:	68ba      	ldr	r2, [r7, #8]
 8006b46:	0091      	lsls	r1, r2, #2
 8006b48:	687a      	ldr	r2, [r7, #4]
 8006b4a:	6812      	ldr	r2, [r2, #0]
 8006b4c:	430b      	orrs	r3, r1
 8006b4e:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0

  /* Rx FIFO 0 elements number */
  MODIFY_REG(hfdcan->Instance->RXF0C, FDCAN_RXF0C_F0S, (hfdcan->Init.RxFifo0ElmtsNbr << FDCAN_RXF0C_F0S_Pos));
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	681b      	ldr	r3, [r3, #0]
 8006b56:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8006b5a:	f423 01fe 	bic.w	r1, r3, #8323072	; 0x7f0000
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b62:	041a      	lsls	r2, r3, #16
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	681b      	ldr	r3, [r3, #0]
 8006b68:	430a      	orrs	r2, r1
 8006b6a:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0

  /* Rx FIFO 1 start address */
  StartAddress += (hfdcan->Init.RxFifo0ElmtsNbr * hfdcan->Init.RxFifo0ElmtSize);
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b72:	687a      	ldr	r2, [r7, #4]
 8006b74:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8006b76:	fb02 f303 	mul.w	r3, r2, r3
 8006b7a:	68ba      	ldr	r2, [r7, #8]
 8006b7c:	4413      	add	r3, r2
 8006b7e:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXF1C, FDCAN_RXF1C_F1SA, (StartAddress << FDCAN_RXF1C_F1SA_Pos));
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	681b      	ldr	r3, [r3, #0]
 8006b84:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8006b88:	4b74      	ldr	r3, [pc, #464]	; (8006d5c <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8006b8a:	4013      	ands	r3, r2
 8006b8c:	68ba      	ldr	r2, [r7, #8]
 8006b8e:	0091      	lsls	r1, r2, #2
 8006b90:	687a      	ldr	r2, [r7, #4]
 8006b92:	6812      	ldr	r2, [r2, #0]
 8006b94:	430b      	orrs	r3, r1
 8006b96:	f8c2 30b0 	str.w	r3, [r2, #176]	; 0xb0

  /* Rx FIFO 1 elements number */
  MODIFY_REG(hfdcan->Instance->RXF1C, FDCAN_RXF1C_F1S, (hfdcan->Init.RxFifo1ElmtsNbr << FDCAN_RXF1C_F1S_Pos));
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	681b      	ldr	r3, [r3, #0]
 8006b9e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8006ba2:	f423 01fe 	bic.w	r1, r3, #8323072	; 0x7f0000
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006baa:	041a      	lsls	r2, r3, #16
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	681b      	ldr	r3, [r3, #0]
 8006bb0:	430a      	orrs	r2, r1
 8006bb2:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0

  /* Rx buffer list start address */
  StartAddress += (hfdcan->Init.RxFifo1ElmtsNbr * hfdcan->Init.RxFifo1ElmtSize);
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006bba:	687a      	ldr	r2, [r7, #4]
 8006bbc:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8006bbe:	fb02 f303 	mul.w	r3, r2, r3
 8006bc2:	68ba      	ldr	r2, [r7, #8]
 8006bc4:	4413      	add	r3, r2
 8006bc6:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXBC, FDCAN_RXBC_RBSA, (StartAddress << FDCAN_RXBC_RBSA_Pos));
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	681b      	ldr	r3, [r3, #0]
 8006bcc:	f8d3 20ac 	ldr.w	r2, [r3, #172]	; 0xac
 8006bd0:	4b62      	ldr	r3, [pc, #392]	; (8006d5c <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8006bd2:	4013      	ands	r3, r2
 8006bd4:	68ba      	ldr	r2, [r7, #8]
 8006bd6:	0091      	lsls	r1, r2, #2
 8006bd8:	687a      	ldr	r2, [r7, #4]
 8006bda:	6812      	ldr	r2, [r2, #0]
 8006bdc:	430b      	orrs	r3, r1
 8006bde:	f8c2 30ac 	str.w	r3, [r2, #172]	; 0xac

  /* Tx event FIFO start address */
  StartAddress += (hfdcan->Init.RxBuffersNbr * hfdcan->Init.RxBufferSize);
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006be6:	687a      	ldr	r2, [r7, #4]
 8006be8:	6d52      	ldr	r2, [r2, #84]	; 0x54
 8006bea:	fb02 f303 	mul.w	r3, r2, r3
 8006bee:	68ba      	ldr	r2, [r7, #8]
 8006bf0:	4413      	add	r3, r2
 8006bf2:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->TXEFC, FDCAN_TXEFC_EFSA, (StartAddress << FDCAN_TXEFC_EFSA_Pos));
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	681b      	ldr	r3, [r3, #0]
 8006bf8:	f8d3 20f0 	ldr.w	r2, [r3, #240]	; 0xf0
 8006bfc:	4b57      	ldr	r3, [pc, #348]	; (8006d5c <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8006bfe:	4013      	ands	r3, r2
 8006c00:	68ba      	ldr	r2, [r7, #8]
 8006c02:	0091      	lsls	r1, r2, #2
 8006c04:	687a      	ldr	r2, [r7, #4]
 8006c06:	6812      	ldr	r2, [r2, #0]
 8006c08:	430b      	orrs	r3, r1
 8006c0a:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

  /* Tx event FIFO elements number */
  MODIFY_REG(hfdcan->Instance->TXEFC, FDCAN_TXEFC_EFS, (hfdcan->Init.TxEventsNbr << FDCAN_TXEFC_EFS_Pos));
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	681b      	ldr	r3, [r3, #0]
 8006c12:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8006c16:	f423 117c 	bic.w	r1, r3, #4128768	; 0x3f0000
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006c1e:	041a      	lsls	r2, r3, #16
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	681b      	ldr	r3, [r3, #0]
 8006c24:	430a      	orrs	r2, r1
 8006c26:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0

  /* Tx buffer list start address */
  StartAddress += (hfdcan->Init.TxEventsNbr * 2U);
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006c2e:	005b      	lsls	r3, r3, #1
 8006c30:	68ba      	ldr	r2, [r7, #8]
 8006c32:	4413      	add	r3, r2
 8006c34:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_TBSA, (StartAddress << FDCAN_TXBC_TBSA_Pos));
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	681b      	ldr	r3, [r3, #0]
 8006c3a:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 8006c3e:	4b47      	ldr	r3, [pc, #284]	; (8006d5c <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8006c40:	4013      	ands	r3, r2
 8006c42:	68ba      	ldr	r2, [r7, #8]
 8006c44:	0091      	lsls	r1, r2, #2
 8006c46:	687a      	ldr	r2, [r7, #4]
 8006c48:	6812      	ldr	r2, [r2, #0]
 8006c4a:	430b      	orrs	r3, r1
 8006c4c:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0

  /* Dedicated Tx buffers number */
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_NDTB, (hfdcan->Init.TxBuffersNbr << FDCAN_TXBC_NDTB_Pos));
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	681b      	ldr	r3, [r3, #0]
 8006c54:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8006c58:	f423 117c 	bic.w	r1, r3, #4128768	; 0x3f0000
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006c60:	041a      	lsls	r2, r3, #16
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	681b      	ldr	r3, [r3, #0]
 8006c66:	430a      	orrs	r2, r1
 8006c68:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0

  /* Tx FIFO/queue elements number */
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_TFQS, (hfdcan->Init.TxFifoQueueElmtsNbr << FDCAN_TXBC_TFQS_Pos));
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	681b      	ldr	r3, [r3, #0]
 8006c70:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8006c74:	f023 517c 	bic.w	r1, r3, #1056964608	; 0x3f000000
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006c7c:	061a      	lsls	r2, r3, #24
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	681b      	ldr	r3, [r3, #0]
 8006c82:	430a      	orrs	r2, r1
 8006c84:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0

  hfdcan->msgRam.StandardFilterSA = SRAMCAN_BASE + (hfdcan->Init.MessageRAMOffset * 4U);
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006c8c:	4b34      	ldr	r3, [pc, #208]	; (8006d60 <FDCAN_CalcultateRamBlockAddresses+0x2b8>)
 8006c8e:	4413      	add	r3, r2
 8006c90:	009a      	lsls	r2, r3, #2
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	66da      	str	r2, [r3, #108]	; 0x6c
  hfdcan->msgRam.ExtendedFilterSA = hfdcan->msgRam.StandardFilterSA + (hfdcan->Init.StdFiltersNbr * 4U);
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c9e:	009b      	lsls	r3, r3, #2
 8006ca0:	441a      	add	r2, r3
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	671a      	str	r2, [r3, #112]	; 0x70
  hfdcan->msgRam.RxFIFO0SA = hfdcan->msgRam.ExtendedFilterSA + (hfdcan->Init.ExtFiltersNbr * 2U * 4U);
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006cae:	00db      	lsls	r3, r3, #3
 8006cb0:	441a      	add	r2, r3
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	675a      	str	r2, [r3, #116]	; 0x74
  hfdcan->msgRam.RxFIFO1SA = hfdcan->msgRam.RxFIFO0SA + (hfdcan->Init.RxFifo0ElmtsNbr * hfdcan->Init.RxFifo0ElmtSize * 4U);
 8006cb6:	687b      	ldr	r3, [r7, #4]
 8006cb8:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006cbe:	6879      	ldr	r1, [r7, #4]
 8006cc0:	6c49      	ldr	r1, [r1, #68]	; 0x44
 8006cc2:	fb01 f303 	mul.w	r3, r1, r3
 8006cc6:	009b      	lsls	r3, r3, #2
 8006cc8:	441a      	add	r2, r3
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	679a      	str	r2, [r3, #120]	; 0x78
  hfdcan->msgRam.RxBufferSA = hfdcan->msgRam.RxFIFO1SA + (hfdcan->Init.RxFifo1ElmtsNbr * hfdcan->Init.RxFifo1ElmtSize * 4U);
 8006cce:	687b      	ldr	r3, [r7, #4]
 8006cd0:	6f9a      	ldr	r2, [r3, #120]	; 0x78
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006cd6:	6879      	ldr	r1, [r7, #4]
 8006cd8:	6cc9      	ldr	r1, [r1, #76]	; 0x4c
 8006cda:	fb01 f303 	mul.w	r3, r1, r3
 8006cde:	009b      	lsls	r3, r3, #2
 8006ce0:	441a      	add	r2, r3
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	67da      	str	r2, [r3, #124]	; 0x7c
  hfdcan->msgRam.TxEventFIFOSA = hfdcan->msgRam.RxBufferSA + (hfdcan->Init.RxBuffersNbr * hfdcan->Init.RxBufferSize * 4U);
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006cee:	6879      	ldr	r1, [r7, #4]
 8006cf0:	6d49      	ldr	r1, [r1, #84]	; 0x54
 8006cf2:	fb01 f303 	mul.w	r3, r1, r3
 8006cf6:	009b      	lsls	r3, r3, #2
 8006cf8:	441a      	add	r2, r3
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  hfdcan->msgRam.TxBufferSA = hfdcan->msgRam.TxEventFIFOSA + (hfdcan->Init.TxEventsNbr * 2U * 4U);
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006d0a:	00db      	lsls	r3, r3, #3
 8006d0c:	441a      	add	r2, r3
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hfdcan->msgRam.TxFIFOQSA = hfdcan->msgRam.TxBufferSA + (hfdcan->Init.TxBuffersNbr * hfdcan->Init.TxElmtSize * 4U);
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006d1e:	6879      	ldr	r1, [r7, #4]
 8006d20:	6e89      	ldr	r1, [r1, #104]	; 0x68
 8006d22:	fb01 f303 	mul.w	r3, r1, r3
 8006d26:	009b      	lsls	r3, r3, #2
 8006d28:	441a      	add	r2, r3
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  hfdcan->msgRam.EndAddress = hfdcan->msgRam.TxFIFOQSA + (hfdcan->Init.TxFifoQueueElmtsNbr * hfdcan->Init.TxElmtSize * 4U);
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8006d36:	687b      	ldr	r3, [r7, #4]
 8006d38:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006d3a:	6879      	ldr	r1, [r7, #4]
 8006d3c:	6e89      	ldr	r1, [r1, #104]	; 0x68
 8006d3e:	fb01 f303 	mul.w	r3, r1, r3
 8006d42:	009b      	lsls	r3, r3, #2
 8006d44:	441a      	add	r2, r3
 8006d46:	687b      	ldr	r3, [r7, #4]
 8006d48:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  if (hfdcan->msgRam.EndAddress > FDCAN_MESSAGE_RAM_END_ADDRESS) /* Last address of the Message RAM */
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006d52:	4a04      	ldr	r2, [pc, #16]	; (8006d64 <FDCAN_CalcultateRamBlockAddresses+0x2bc>)
 8006d54:	4293      	cmp	r3, r2
 8006d56:	d915      	bls.n	8006d84 <FDCAN_CalcultateRamBlockAddresses+0x2dc>
 8006d58:	e006      	b.n	8006d68 <FDCAN_CalcultateRamBlockAddresses+0x2c0>
 8006d5a:	bf00      	nop
 8006d5c:	ffff0003 	.word	0xffff0003
 8006d60:	10002b00 	.word	0x10002b00
 8006d64:	4000d3fc 	.word	0x4000d3fc
  {
    /* Update error code.
       Message RAM overflow */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8006d6e:	f043 0220 	orr.w	r2, r3, #32
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    /* Change FDCAN state */
    hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	2203      	movs	r2, #3
 8006d7c:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

    return HAL_ERROR;
 8006d80:	2301      	movs	r3, #1
 8006d82:	e010      	b.n	8006da6 <FDCAN_CalcultateRamBlockAddresses+0x2fe>
  }
  else
  {
    /* Flush the allocated Message RAM area */
    for (RAMcounter = hfdcan->msgRam.StandardFilterSA; RAMcounter < hfdcan->msgRam.EndAddress; RAMcounter += 4U)
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006d88:	60fb      	str	r3, [r7, #12]
 8006d8a:	e005      	b.n	8006d98 <FDCAN_CalcultateRamBlockAddresses+0x2f0>
    {
      *(uint32_t *)(RAMcounter) = 0x00000000;
 8006d8c:	68fb      	ldr	r3, [r7, #12]
 8006d8e:	2200      	movs	r2, #0
 8006d90:	601a      	str	r2, [r3, #0]
    for (RAMcounter = hfdcan->msgRam.StandardFilterSA; RAMcounter < hfdcan->msgRam.EndAddress; RAMcounter += 4U)
 8006d92:	68fb      	ldr	r3, [r7, #12]
 8006d94:	3304      	adds	r3, #4
 8006d96:	60fb      	str	r3, [r7, #12]
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006d9e:	68fa      	ldr	r2, [r7, #12]
 8006da0:	429a      	cmp	r2, r3
 8006da2:	d3f3      	bcc.n	8006d8c <FDCAN_CalcultateRamBlockAddresses+0x2e4>
    }
  }

  /* Return function status */
  return HAL_OK;
 8006da4:	2300      	movs	r3, #0
}
 8006da6:	4618      	mov	r0, r3
 8006da8:	3714      	adds	r7, #20
 8006daa:	46bd      	mov	sp, r7
 8006dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006db0:	4770      	bx	lr
 8006db2:	bf00      	nop

08006db4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8006db4:	b480      	push	{r7}
 8006db6:	b089      	sub	sp, #36	; 0x24
 8006db8:	af00      	add	r7, sp, #0
 8006dba:	6078      	str	r0, [r7, #4]
 8006dbc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8006dbe:	2300      	movs	r3, #0
 8006dc0:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8006dc2:	4b89      	ldr	r3, [pc, #548]	; (8006fe8 <HAL_GPIO_Init+0x234>)
 8006dc4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8006dc6:	e194      	b.n	80070f2 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8006dc8:	683b      	ldr	r3, [r7, #0]
 8006dca:	681a      	ldr	r2, [r3, #0]
 8006dcc:	2101      	movs	r1, #1
 8006dce:	69fb      	ldr	r3, [r7, #28]
 8006dd0:	fa01 f303 	lsl.w	r3, r1, r3
 8006dd4:	4013      	ands	r3, r2
 8006dd6:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8006dd8:	693b      	ldr	r3, [r7, #16]
 8006dda:	2b00      	cmp	r3, #0
 8006ddc:	f000 8186 	beq.w	80070ec <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8006de0:	683b      	ldr	r3, [r7, #0]
 8006de2:	685b      	ldr	r3, [r3, #4]
 8006de4:	2b01      	cmp	r3, #1
 8006de6:	d00b      	beq.n	8006e00 <HAL_GPIO_Init+0x4c>
 8006de8:	683b      	ldr	r3, [r7, #0]
 8006dea:	685b      	ldr	r3, [r3, #4]
 8006dec:	2b02      	cmp	r3, #2
 8006dee:	d007      	beq.n	8006e00 <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8006df0:	683b      	ldr	r3, [r7, #0]
 8006df2:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8006df4:	2b11      	cmp	r3, #17
 8006df6:	d003      	beq.n	8006e00 <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8006df8:	683b      	ldr	r3, [r7, #0]
 8006dfa:	685b      	ldr	r3, [r3, #4]
 8006dfc:	2b12      	cmp	r3, #18
 8006dfe:	d130      	bne.n	8006e62 <HAL_GPIO_Init+0xae>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	689b      	ldr	r3, [r3, #8]
 8006e04:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8006e06:	69fb      	ldr	r3, [r7, #28]
 8006e08:	005b      	lsls	r3, r3, #1
 8006e0a:	2203      	movs	r2, #3
 8006e0c:	fa02 f303 	lsl.w	r3, r2, r3
 8006e10:	43db      	mvns	r3, r3
 8006e12:	69ba      	ldr	r2, [r7, #24]
 8006e14:	4013      	ands	r3, r2
 8006e16:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8006e18:	683b      	ldr	r3, [r7, #0]
 8006e1a:	68da      	ldr	r2, [r3, #12]
 8006e1c:	69fb      	ldr	r3, [r7, #28]
 8006e1e:	005b      	lsls	r3, r3, #1
 8006e20:	fa02 f303 	lsl.w	r3, r2, r3
 8006e24:	69ba      	ldr	r2, [r7, #24]
 8006e26:	4313      	orrs	r3, r2
 8006e28:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	69ba      	ldr	r2, [r7, #24]
 8006e2e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	685b      	ldr	r3, [r3, #4]
 8006e34:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8006e36:	2201      	movs	r2, #1
 8006e38:	69fb      	ldr	r3, [r7, #28]
 8006e3a:	fa02 f303 	lsl.w	r3, r2, r3
 8006e3e:	43db      	mvns	r3, r3
 8006e40:	69ba      	ldr	r2, [r7, #24]
 8006e42:	4013      	ands	r3, r2
 8006e44:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8006e46:	683b      	ldr	r3, [r7, #0]
 8006e48:	685b      	ldr	r3, [r3, #4]
 8006e4a:	091b      	lsrs	r3, r3, #4
 8006e4c:	f003 0201 	and.w	r2, r3, #1
 8006e50:	69fb      	ldr	r3, [r7, #28]
 8006e52:	fa02 f303 	lsl.w	r3, r2, r3
 8006e56:	69ba      	ldr	r2, [r7, #24]
 8006e58:	4313      	orrs	r3, r2
 8006e5a:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	69ba      	ldr	r2, [r7, #24]
 8006e60:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8006e62:	687b      	ldr	r3, [r7, #4]
 8006e64:	68db      	ldr	r3, [r3, #12]
 8006e66:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8006e68:	69fb      	ldr	r3, [r7, #28]
 8006e6a:	005b      	lsls	r3, r3, #1
 8006e6c:	2203      	movs	r2, #3
 8006e6e:	fa02 f303 	lsl.w	r3, r2, r3
 8006e72:	43db      	mvns	r3, r3
 8006e74:	69ba      	ldr	r2, [r7, #24]
 8006e76:	4013      	ands	r3, r2
 8006e78:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8006e7a:	683b      	ldr	r3, [r7, #0]
 8006e7c:	689a      	ldr	r2, [r3, #8]
 8006e7e:	69fb      	ldr	r3, [r7, #28]
 8006e80:	005b      	lsls	r3, r3, #1
 8006e82:	fa02 f303 	lsl.w	r3, r2, r3
 8006e86:	69ba      	ldr	r2, [r7, #24]
 8006e88:	4313      	orrs	r3, r2
 8006e8a:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	69ba      	ldr	r2, [r7, #24]
 8006e90:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8006e92:	683b      	ldr	r3, [r7, #0]
 8006e94:	685b      	ldr	r3, [r3, #4]
 8006e96:	2b02      	cmp	r3, #2
 8006e98:	d003      	beq.n	8006ea2 <HAL_GPIO_Init+0xee>
 8006e9a:	683b      	ldr	r3, [r7, #0]
 8006e9c:	685b      	ldr	r3, [r3, #4]
 8006e9e:	2b12      	cmp	r3, #18
 8006ea0:	d123      	bne.n	8006eea <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8006ea2:	69fb      	ldr	r3, [r7, #28]
 8006ea4:	08da      	lsrs	r2, r3, #3
 8006ea6:	687b      	ldr	r3, [r7, #4]
 8006ea8:	3208      	adds	r2, #8
 8006eaa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006eae:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8006eb0:	69fb      	ldr	r3, [r7, #28]
 8006eb2:	f003 0307 	and.w	r3, r3, #7
 8006eb6:	009b      	lsls	r3, r3, #2
 8006eb8:	220f      	movs	r2, #15
 8006eba:	fa02 f303 	lsl.w	r3, r2, r3
 8006ebe:	43db      	mvns	r3, r3
 8006ec0:	69ba      	ldr	r2, [r7, #24]
 8006ec2:	4013      	ands	r3, r2
 8006ec4:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8006ec6:	683b      	ldr	r3, [r7, #0]
 8006ec8:	691a      	ldr	r2, [r3, #16]
 8006eca:	69fb      	ldr	r3, [r7, #28]
 8006ecc:	f003 0307 	and.w	r3, r3, #7
 8006ed0:	009b      	lsls	r3, r3, #2
 8006ed2:	fa02 f303 	lsl.w	r3, r2, r3
 8006ed6:	69ba      	ldr	r2, [r7, #24]
 8006ed8:	4313      	orrs	r3, r2
 8006eda:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8006edc:	69fb      	ldr	r3, [r7, #28]
 8006ede:	08da      	lsrs	r2, r3, #3
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	3208      	adds	r2, #8
 8006ee4:	69b9      	ldr	r1, [r7, #24]
 8006ee6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8006eea:	687b      	ldr	r3, [r7, #4]
 8006eec:	681b      	ldr	r3, [r3, #0]
 8006eee:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8006ef0:	69fb      	ldr	r3, [r7, #28]
 8006ef2:	005b      	lsls	r3, r3, #1
 8006ef4:	2203      	movs	r2, #3
 8006ef6:	fa02 f303 	lsl.w	r3, r2, r3
 8006efa:	43db      	mvns	r3, r3
 8006efc:	69ba      	ldr	r2, [r7, #24]
 8006efe:	4013      	ands	r3, r2
 8006f00:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8006f02:	683b      	ldr	r3, [r7, #0]
 8006f04:	685b      	ldr	r3, [r3, #4]
 8006f06:	f003 0203 	and.w	r2, r3, #3
 8006f0a:	69fb      	ldr	r3, [r7, #28]
 8006f0c:	005b      	lsls	r3, r3, #1
 8006f0e:	fa02 f303 	lsl.w	r3, r2, r3
 8006f12:	69ba      	ldr	r2, [r7, #24]
 8006f14:	4313      	orrs	r3, r2
 8006f16:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	69ba      	ldr	r2, [r7, #24]
 8006f1c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8006f1e:	683b      	ldr	r3, [r7, #0]
 8006f20:	685b      	ldr	r3, [r3, #4]
 8006f22:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006f26:	2b00      	cmp	r3, #0
 8006f28:	f000 80e0 	beq.w	80070ec <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006f2c:	4b2f      	ldr	r3, [pc, #188]	; (8006fec <HAL_GPIO_Init+0x238>)
 8006f2e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8006f32:	4a2e      	ldr	r2, [pc, #184]	; (8006fec <HAL_GPIO_Init+0x238>)
 8006f34:	f043 0302 	orr.w	r3, r3, #2
 8006f38:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8006f3c:	4b2b      	ldr	r3, [pc, #172]	; (8006fec <HAL_GPIO_Init+0x238>)
 8006f3e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8006f42:	f003 0302 	and.w	r3, r3, #2
 8006f46:	60fb      	str	r3, [r7, #12]
 8006f48:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8006f4a:	4a29      	ldr	r2, [pc, #164]	; (8006ff0 <HAL_GPIO_Init+0x23c>)
 8006f4c:	69fb      	ldr	r3, [r7, #28]
 8006f4e:	089b      	lsrs	r3, r3, #2
 8006f50:	3302      	adds	r3, #2
 8006f52:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006f56:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8006f58:	69fb      	ldr	r3, [r7, #28]
 8006f5a:	f003 0303 	and.w	r3, r3, #3
 8006f5e:	009b      	lsls	r3, r3, #2
 8006f60:	220f      	movs	r2, #15
 8006f62:	fa02 f303 	lsl.w	r3, r2, r3
 8006f66:	43db      	mvns	r3, r3
 8006f68:	69ba      	ldr	r2, [r7, #24]
 8006f6a:	4013      	ands	r3, r2
 8006f6c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8006f6e:	687b      	ldr	r3, [r7, #4]
 8006f70:	4a20      	ldr	r2, [pc, #128]	; (8006ff4 <HAL_GPIO_Init+0x240>)
 8006f72:	4293      	cmp	r3, r2
 8006f74:	d052      	beq.n	800701c <HAL_GPIO_Init+0x268>
 8006f76:	687b      	ldr	r3, [r7, #4]
 8006f78:	4a1f      	ldr	r2, [pc, #124]	; (8006ff8 <HAL_GPIO_Init+0x244>)
 8006f7a:	4293      	cmp	r3, r2
 8006f7c:	d031      	beq.n	8006fe2 <HAL_GPIO_Init+0x22e>
 8006f7e:	687b      	ldr	r3, [r7, #4]
 8006f80:	4a1e      	ldr	r2, [pc, #120]	; (8006ffc <HAL_GPIO_Init+0x248>)
 8006f82:	4293      	cmp	r3, r2
 8006f84:	d02b      	beq.n	8006fde <HAL_GPIO_Init+0x22a>
 8006f86:	687b      	ldr	r3, [r7, #4]
 8006f88:	4a1d      	ldr	r2, [pc, #116]	; (8007000 <HAL_GPIO_Init+0x24c>)
 8006f8a:	4293      	cmp	r3, r2
 8006f8c:	d025      	beq.n	8006fda <HAL_GPIO_Init+0x226>
 8006f8e:	687b      	ldr	r3, [r7, #4]
 8006f90:	4a1c      	ldr	r2, [pc, #112]	; (8007004 <HAL_GPIO_Init+0x250>)
 8006f92:	4293      	cmp	r3, r2
 8006f94:	d01f      	beq.n	8006fd6 <HAL_GPIO_Init+0x222>
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	4a1b      	ldr	r2, [pc, #108]	; (8007008 <HAL_GPIO_Init+0x254>)
 8006f9a:	4293      	cmp	r3, r2
 8006f9c:	d019      	beq.n	8006fd2 <HAL_GPIO_Init+0x21e>
 8006f9e:	687b      	ldr	r3, [r7, #4]
 8006fa0:	4a1a      	ldr	r2, [pc, #104]	; (800700c <HAL_GPIO_Init+0x258>)
 8006fa2:	4293      	cmp	r3, r2
 8006fa4:	d013      	beq.n	8006fce <HAL_GPIO_Init+0x21a>
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	4a19      	ldr	r2, [pc, #100]	; (8007010 <HAL_GPIO_Init+0x25c>)
 8006faa:	4293      	cmp	r3, r2
 8006fac:	d00d      	beq.n	8006fca <HAL_GPIO_Init+0x216>
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	4a18      	ldr	r2, [pc, #96]	; (8007014 <HAL_GPIO_Init+0x260>)
 8006fb2:	4293      	cmp	r3, r2
 8006fb4:	d007      	beq.n	8006fc6 <HAL_GPIO_Init+0x212>
 8006fb6:	687b      	ldr	r3, [r7, #4]
 8006fb8:	4a17      	ldr	r2, [pc, #92]	; (8007018 <HAL_GPIO_Init+0x264>)
 8006fba:	4293      	cmp	r3, r2
 8006fbc:	d101      	bne.n	8006fc2 <HAL_GPIO_Init+0x20e>
 8006fbe:	2309      	movs	r3, #9
 8006fc0:	e02d      	b.n	800701e <HAL_GPIO_Init+0x26a>
 8006fc2:	230a      	movs	r3, #10
 8006fc4:	e02b      	b.n	800701e <HAL_GPIO_Init+0x26a>
 8006fc6:	2308      	movs	r3, #8
 8006fc8:	e029      	b.n	800701e <HAL_GPIO_Init+0x26a>
 8006fca:	2307      	movs	r3, #7
 8006fcc:	e027      	b.n	800701e <HAL_GPIO_Init+0x26a>
 8006fce:	2306      	movs	r3, #6
 8006fd0:	e025      	b.n	800701e <HAL_GPIO_Init+0x26a>
 8006fd2:	2305      	movs	r3, #5
 8006fd4:	e023      	b.n	800701e <HAL_GPIO_Init+0x26a>
 8006fd6:	2304      	movs	r3, #4
 8006fd8:	e021      	b.n	800701e <HAL_GPIO_Init+0x26a>
 8006fda:	2303      	movs	r3, #3
 8006fdc:	e01f      	b.n	800701e <HAL_GPIO_Init+0x26a>
 8006fde:	2302      	movs	r3, #2
 8006fe0:	e01d      	b.n	800701e <HAL_GPIO_Init+0x26a>
 8006fe2:	2301      	movs	r3, #1
 8006fe4:	e01b      	b.n	800701e <HAL_GPIO_Init+0x26a>
 8006fe6:	bf00      	nop
 8006fe8:	58000080 	.word	0x58000080
 8006fec:	58024400 	.word	0x58024400
 8006ff0:	58000400 	.word	0x58000400
 8006ff4:	58020000 	.word	0x58020000
 8006ff8:	58020400 	.word	0x58020400
 8006ffc:	58020800 	.word	0x58020800
 8007000:	58020c00 	.word	0x58020c00
 8007004:	58021000 	.word	0x58021000
 8007008:	58021400 	.word	0x58021400
 800700c:	58021800 	.word	0x58021800
 8007010:	58021c00 	.word	0x58021c00
 8007014:	58022000 	.word	0x58022000
 8007018:	58022400 	.word	0x58022400
 800701c:	2300      	movs	r3, #0
 800701e:	69fa      	ldr	r2, [r7, #28]
 8007020:	f002 0203 	and.w	r2, r2, #3
 8007024:	0092      	lsls	r2, r2, #2
 8007026:	4093      	lsls	r3, r2
 8007028:	69ba      	ldr	r2, [r7, #24]
 800702a:	4313      	orrs	r3, r2
 800702c:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800702e:	4938      	ldr	r1, [pc, #224]	; (8007110 <HAL_GPIO_Init+0x35c>)
 8007030:	69fb      	ldr	r3, [r7, #28]
 8007032:	089b      	lsrs	r3, r3, #2
 8007034:	3302      	adds	r3, #2
 8007036:	69ba      	ldr	r2, [r7, #24]
 8007038:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 800703c:	697b      	ldr	r3, [r7, #20]
 800703e:	681b      	ldr	r3, [r3, #0]
 8007040:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8007042:	693b      	ldr	r3, [r7, #16]
 8007044:	43db      	mvns	r3, r3
 8007046:	69ba      	ldr	r2, [r7, #24]
 8007048:	4013      	ands	r3, r2
 800704a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800704c:	683b      	ldr	r3, [r7, #0]
 800704e:	685b      	ldr	r3, [r3, #4]
 8007050:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007054:	2b00      	cmp	r3, #0
 8007056:	d003      	beq.n	8007060 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8007058:	69ba      	ldr	r2, [r7, #24]
 800705a:	693b      	ldr	r3, [r7, #16]
 800705c:	4313      	orrs	r3, r2
 800705e:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8007060:	697b      	ldr	r3, [r7, #20]
 8007062:	69ba      	ldr	r2, [r7, #24]
 8007064:	601a      	str	r2, [r3, #0]

        temp = EXTI_CurrentCPU->EMR1;
 8007066:	697b      	ldr	r3, [r7, #20]
 8007068:	685b      	ldr	r3, [r3, #4]
 800706a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800706c:	693b      	ldr	r3, [r7, #16]
 800706e:	43db      	mvns	r3, r3
 8007070:	69ba      	ldr	r2, [r7, #24]
 8007072:	4013      	ands	r3, r2
 8007074:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8007076:	683b      	ldr	r3, [r7, #0]
 8007078:	685b      	ldr	r3, [r3, #4]
 800707a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800707e:	2b00      	cmp	r3, #0
 8007080:	d003      	beq.n	800708a <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8007082:	69ba      	ldr	r2, [r7, #24]
 8007084:	693b      	ldr	r3, [r7, #16]
 8007086:	4313      	orrs	r3, r2
 8007088:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 800708a:	697b      	ldr	r3, [r7, #20]
 800708c:	69ba      	ldr	r2, [r7, #24]
 800708e:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8007090:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007094:	681b      	ldr	r3, [r3, #0]
 8007096:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8007098:	693b      	ldr	r3, [r7, #16]
 800709a:	43db      	mvns	r3, r3
 800709c:	69ba      	ldr	r2, [r7, #24]
 800709e:	4013      	ands	r3, r2
 80070a0:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80070a2:	683b      	ldr	r3, [r7, #0]
 80070a4:	685b      	ldr	r3, [r3, #4]
 80070a6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80070aa:	2b00      	cmp	r3, #0
 80070ac:	d003      	beq.n	80070b6 <HAL_GPIO_Init+0x302>
        {
          temp |= iocurrent;
 80070ae:	69ba      	ldr	r2, [r7, #24]
 80070b0:	693b      	ldr	r3, [r7, #16]
 80070b2:	4313      	orrs	r3, r2
 80070b4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 80070b6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80070ba:	69bb      	ldr	r3, [r7, #24]
 80070bc:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 80070be:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80070c2:	685b      	ldr	r3, [r3, #4]
 80070c4:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80070c6:	693b      	ldr	r3, [r7, #16]
 80070c8:	43db      	mvns	r3, r3
 80070ca:	69ba      	ldr	r2, [r7, #24]
 80070cc:	4013      	ands	r3, r2
 80070ce:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80070d0:	683b      	ldr	r3, [r7, #0]
 80070d2:	685b      	ldr	r3, [r3, #4]
 80070d4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80070d8:	2b00      	cmp	r3, #0
 80070da:	d003      	beq.n	80070e4 <HAL_GPIO_Init+0x330>
        {
          temp |= iocurrent;
 80070dc:	69ba      	ldr	r2, [r7, #24]
 80070de:	693b      	ldr	r3, [r7, #16]
 80070e0:	4313      	orrs	r3, r2
 80070e2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 80070e4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80070e8:	69bb      	ldr	r3, [r7, #24]
 80070ea:	6053      	str	r3, [r2, #4]
      }
    }

    position++;
 80070ec:	69fb      	ldr	r3, [r7, #28]
 80070ee:	3301      	adds	r3, #1
 80070f0:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80070f2:	683b      	ldr	r3, [r7, #0]
 80070f4:	681a      	ldr	r2, [r3, #0]
 80070f6:	69fb      	ldr	r3, [r7, #28]
 80070f8:	fa22 f303 	lsr.w	r3, r2, r3
 80070fc:	2b00      	cmp	r3, #0
 80070fe:	f47f ae63 	bne.w	8006dc8 <HAL_GPIO_Init+0x14>
  }
}
 8007102:	bf00      	nop
 8007104:	3724      	adds	r7, #36	; 0x24
 8007106:	46bd      	mov	sp, r7
 8007108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800710c:	4770      	bx	lr
 800710e:	bf00      	nop
 8007110:	58000400 	.word	0x58000400

08007114 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8007114:	b480      	push	{r7}
 8007116:	b085      	sub	sp, #20
 8007118:	af00      	add	r7, sp, #0
 800711a:	6078      	str	r0, [r7, #4]
 800711c:	460b      	mov	r3, r1
 800711e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 8007120:	687b      	ldr	r3, [r7, #4]
 8007122:	691a      	ldr	r2, [r3, #16]
 8007124:	887b      	ldrh	r3, [r7, #2]
 8007126:	4013      	ands	r3, r2
 8007128:	2b00      	cmp	r3, #0
 800712a:	d002      	beq.n	8007132 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800712c:	2301      	movs	r3, #1
 800712e:	73fb      	strb	r3, [r7, #15]
 8007130:	e001      	b.n	8007136 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8007132:	2300      	movs	r3, #0
 8007134:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8007136:	7bfb      	ldrb	r3, [r7, #15]
}
 8007138:	4618      	mov	r0, r3
 800713a:	3714      	adds	r7, #20
 800713c:	46bd      	mov	sp, r7
 800713e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007142:	4770      	bx	lr

08007144 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8007144:	b480      	push	{r7}
 8007146:	b083      	sub	sp, #12
 8007148:	af00      	add	r7, sp, #0
 800714a:	6078      	str	r0, [r7, #4]
 800714c:	460b      	mov	r3, r1
 800714e:	807b      	strh	r3, [r7, #2]
 8007150:	4613      	mov	r3, r2
 8007152:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8007154:	787b      	ldrb	r3, [r7, #1]
 8007156:	2b00      	cmp	r3, #0
 8007158:	d003      	beq.n	8007162 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800715a:	887a      	ldrh	r2, [r7, #2]
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8007160:	e003      	b.n	800716a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8007162:	887b      	ldrh	r3, [r7, #2]
 8007164:	041a      	lsls	r2, r3, #16
 8007166:	687b      	ldr	r3, [r7, #4]
 8007168:	619a      	str	r2, [r3, #24]
}
 800716a:	bf00      	nop
 800716c:	370c      	adds	r7, #12
 800716e:	46bd      	mov	sp, r7
 8007170:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007174:	4770      	bx	lr

08007176 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8007176:	b480      	push	{r7}
 8007178:	b083      	sub	sp, #12
 800717a:	af00      	add	r7, sp, #0
 800717c:	6078      	str	r0, [r7, #4]
 800717e:	460b      	mov	r3, r1
 8007180:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) == GPIO_Pin)
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	695a      	ldr	r2, [r3, #20]
 8007186:	887b      	ldrh	r3, [r7, #2]
 8007188:	401a      	ands	r2, r3
 800718a:	887b      	ldrh	r3, [r7, #2]
 800718c:	429a      	cmp	r2, r3
 800718e:	d104      	bne.n	800719a <HAL_GPIO_TogglePin+0x24>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8007190:	887b      	ldrh	r3, [r7, #2]
 8007192:	041a      	lsls	r2, r3, #16
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = GPIO_Pin;
  }
}
 8007198:	e002      	b.n	80071a0 <HAL_GPIO_TogglePin+0x2a>
    GPIOx->BSRR = GPIO_Pin;
 800719a:	887a      	ldrh	r2, [r7, #2]
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	619a      	str	r2, [r3, #24]
}
 80071a0:	bf00      	nop
 80071a2:	370c      	adds	r7, #12
 80071a4:	46bd      	mov	sp, r7
 80071a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071aa:	4770      	bx	lr

080071ac <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80071ac:	b580      	push	{r7, lr}
 80071ae:	b082      	sub	sp, #8
 80071b0:	af00      	add	r7, sp, #0
 80071b2:	4603      	mov	r3, r0
 80071b4:	80fb      	strh	r3, [r7, #6]
    __HAL_GPIO_EXTID2_CLEAR_IT(GPIO_Pin);
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
  }
#else
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00U)
 80071b6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80071ba:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80071be:	88fb      	ldrh	r3, [r7, #6]
 80071c0:	4013      	ands	r3, r2
 80071c2:	2b00      	cmp	r3, #0
 80071c4:	d008      	beq.n	80071d8 <HAL_GPIO_EXTI_IRQHandler+0x2c>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80071c6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80071ca:	88fb      	ldrh	r3, [r7, #6]
 80071cc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80071d0:	88fb      	ldrh	r3, [r7, #6]
 80071d2:	4618      	mov	r0, r3
 80071d4:	f7fb fd8c 	bl	8002cf0 <HAL_GPIO_EXTI_Callback>
  }
#endif
}
 80071d8:	bf00      	nop
 80071da:	3708      	adds	r7, #8
 80071dc:	46bd      	mov	sp, r7
 80071de:	bd80      	pop	{r7, pc}

080071e0 <HAL_I2CEx_EnableFastModePlus>:
  * @note  For all I2C5 pins fast mode plus driving capability can be enabled
  *        only by using I2C_FASTMODEPLUS_I2C5 parameter.
  * @retval None
  */
void HAL_I2CEx_EnableFastModePlus(uint32_t ConfigFastModePlus)
{
 80071e0:	b480      	push	{r7}
 80071e2:	b085      	sub	sp, #20
 80071e4:	af00      	add	r7, sp, #0
 80071e6:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_I2C_FASTMODEPLUS(ConfigFastModePlus));

  /* Enable SYSCFG clock */
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80071e8:	4b0d      	ldr	r3, [pc, #52]	; (8007220 <HAL_I2CEx_EnableFastModePlus+0x40>)
 80071ea:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80071ee:	4a0c      	ldr	r2, [pc, #48]	; (8007220 <HAL_I2CEx_EnableFastModePlus+0x40>)
 80071f0:	f043 0302 	orr.w	r3, r3, #2
 80071f4:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 80071f8:	4b09      	ldr	r3, [pc, #36]	; (8007220 <HAL_I2CEx_EnableFastModePlus+0x40>)
 80071fa:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80071fe:	f003 0302 	and.w	r3, r3, #2
 8007202:	60fb      	str	r3, [r7, #12]
 8007204:	68fb      	ldr	r3, [r7, #12]

  /* Enable fast mode plus driving capability for selected pin */
  SET_BIT(SYSCFG->PMCR, (uint32_t)ConfigFastModePlus);
 8007206:	4b07      	ldr	r3, [pc, #28]	; (8007224 <HAL_I2CEx_EnableFastModePlus+0x44>)
 8007208:	685a      	ldr	r2, [r3, #4]
 800720a:	4906      	ldr	r1, [pc, #24]	; (8007224 <HAL_I2CEx_EnableFastModePlus+0x44>)
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	4313      	orrs	r3, r2
 8007210:	604b      	str	r3, [r1, #4]
}
 8007212:	bf00      	nop
 8007214:	3714      	adds	r7, #20
 8007216:	46bd      	mov	sp, r7
 8007218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800721c:	4770      	bx	lr
 800721e:	bf00      	nop
 8007220:	58024400 	.word	0x58024400
 8007224:	58000400 	.word	0x58000400

08007228 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8007228:	b5f0      	push	{r4, r5, r6, r7, lr}
 800722a:	b08f      	sub	sp, #60	; 0x3c
 800722c:	af0a      	add	r7, sp, #40	; 0x28
 800722e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	2b00      	cmp	r3, #0
 8007234:	d101      	bne.n	800723a <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8007236:	2301      	movs	r3, #1
 8007238:	e116      	b.n	8007468 <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 800723a:	687b      	ldr	r3, [r7, #4]
 800723c:	681b      	ldr	r3, [r3, #0]
 800723e:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 8007246:	b2db      	uxtb	r3, r3
 8007248:	2b00      	cmp	r3, #0
 800724a:	d106      	bne.n	800725a <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800724c:	687b      	ldr	r3, [r7, #4]
 800724e:	2200      	movs	r2, #0
 8007250:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8007254:	6878      	ldr	r0, [r7, #4]
 8007256:	f010 fe4d 	bl	8017ef4 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800725a:	687b      	ldr	r3, [r7, #4]
 800725c:	2203      	movs	r2, #3
 800725e:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8007262:	68bb      	ldr	r3, [r7, #8]
 8007264:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007266:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800726a:	2b00      	cmp	r3, #0
 800726c:	d102      	bne.n	8007274 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 800726e:	687b      	ldr	r3, [r7, #4]
 8007270:	2200      	movs	r2, #0
 8007272:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8007274:	687b      	ldr	r3, [r7, #4]
 8007276:	681b      	ldr	r3, [r3, #0]
 8007278:	4618      	mov	r0, r3
 800727a:	f009 fe52 	bl	8010f22 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800727e:	687b      	ldr	r3, [r7, #4]
 8007280:	681b      	ldr	r3, [r3, #0]
 8007282:	603b      	str	r3, [r7, #0]
 8007284:	687e      	ldr	r6, [r7, #4]
 8007286:	466d      	mov	r5, sp
 8007288:	f106 0410 	add.w	r4, r6, #16
 800728c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800728e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8007290:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8007292:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8007294:	e894 0003 	ldmia.w	r4, {r0, r1}
 8007298:	e885 0003 	stmia.w	r5, {r0, r1}
 800729c:	1d33      	adds	r3, r6, #4
 800729e:	cb0e      	ldmia	r3, {r1, r2, r3}
 80072a0:	6838      	ldr	r0, [r7, #0]
 80072a2:	f009 fd29 	bl	8010cf8 <USB_CoreInit>
 80072a6:	4603      	mov	r3, r0
 80072a8:	2b00      	cmp	r3, #0
 80072aa:	d005      	beq.n	80072b8 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80072ac:	687b      	ldr	r3, [r7, #4]
 80072ae:	2202      	movs	r2, #2
 80072b0:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 80072b4:	2301      	movs	r3, #1
 80072b6:	e0d7      	b.n	8007468 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 80072b8:	687b      	ldr	r3, [r7, #4]
 80072ba:	681b      	ldr	r3, [r3, #0]
 80072bc:	2100      	movs	r1, #0
 80072be:	4618      	mov	r0, r3
 80072c0:	f009 fe40 	bl	8010f44 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80072c4:	2300      	movs	r3, #0
 80072c6:	73fb      	strb	r3, [r7, #15]
 80072c8:	e04a      	b.n	8007360 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80072ca:	7bfa      	ldrb	r2, [r7, #15]
 80072cc:	6879      	ldr	r1, [r7, #4]
 80072ce:	4613      	mov	r3, r2
 80072d0:	00db      	lsls	r3, r3, #3
 80072d2:	1a9b      	subs	r3, r3, r2
 80072d4:	009b      	lsls	r3, r3, #2
 80072d6:	440b      	add	r3, r1
 80072d8:	333d      	adds	r3, #61	; 0x3d
 80072da:	2201      	movs	r2, #1
 80072dc:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80072de:	7bfa      	ldrb	r2, [r7, #15]
 80072e0:	6879      	ldr	r1, [r7, #4]
 80072e2:	4613      	mov	r3, r2
 80072e4:	00db      	lsls	r3, r3, #3
 80072e6:	1a9b      	subs	r3, r3, r2
 80072e8:	009b      	lsls	r3, r3, #2
 80072ea:	440b      	add	r3, r1
 80072ec:	333c      	adds	r3, #60	; 0x3c
 80072ee:	7bfa      	ldrb	r2, [r7, #15]
 80072f0:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80072f2:	7bfa      	ldrb	r2, [r7, #15]
 80072f4:	7bfb      	ldrb	r3, [r7, #15]
 80072f6:	b298      	uxth	r0, r3
 80072f8:	6879      	ldr	r1, [r7, #4]
 80072fa:	4613      	mov	r3, r2
 80072fc:	00db      	lsls	r3, r3, #3
 80072fe:	1a9b      	subs	r3, r3, r2
 8007300:	009b      	lsls	r3, r3, #2
 8007302:	440b      	add	r3, r1
 8007304:	3342      	adds	r3, #66	; 0x42
 8007306:	4602      	mov	r2, r0
 8007308:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800730a:	7bfa      	ldrb	r2, [r7, #15]
 800730c:	6879      	ldr	r1, [r7, #4]
 800730e:	4613      	mov	r3, r2
 8007310:	00db      	lsls	r3, r3, #3
 8007312:	1a9b      	subs	r3, r3, r2
 8007314:	009b      	lsls	r3, r3, #2
 8007316:	440b      	add	r3, r1
 8007318:	333f      	adds	r3, #63	; 0x3f
 800731a:	2200      	movs	r2, #0
 800731c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800731e:	7bfa      	ldrb	r2, [r7, #15]
 8007320:	6879      	ldr	r1, [r7, #4]
 8007322:	4613      	mov	r3, r2
 8007324:	00db      	lsls	r3, r3, #3
 8007326:	1a9b      	subs	r3, r3, r2
 8007328:	009b      	lsls	r3, r3, #2
 800732a:	440b      	add	r3, r1
 800732c:	3344      	adds	r3, #68	; 0x44
 800732e:	2200      	movs	r2, #0
 8007330:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8007332:	7bfa      	ldrb	r2, [r7, #15]
 8007334:	6879      	ldr	r1, [r7, #4]
 8007336:	4613      	mov	r3, r2
 8007338:	00db      	lsls	r3, r3, #3
 800733a:	1a9b      	subs	r3, r3, r2
 800733c:	009b      	lsls	r3, r3, #2
 800733e:	440b      	add	r3, r1
 8007340:	3348      	adds	r3, #72	; 0x48
 8007342:	2200      	movs	r2, #0
 8007344:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8007346:	7bfa      	ldrb	r2, [r7, #15]
 8007348:	6879      	ldr	r1, [r7, #4]
 800734a:	4613      	mov	r3, r2
 800734c:	00db      	lsls	r3, r3, #3
 800734e:	1a9b      	subs	r3, r3, r2
 8007350:	009b      	lsls	r3, r3, #2
 8007352:	440b      	add	r3, r1
 8007354:	3350      	adds	r3, #80	; 0x50
 8007356:	2200      	movs	r2, #0
 8007358:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800735a:	7bfb      	ldrb	r3, [r7, #15]
 800735c:	3301      	adds	r3, #1
 800735e:	73fb      	strb	r3, [r7, #15]
 8007360:	7bfa      	ldrb	r2, [r7, #15]
 8007362:	687b      	ldr	r3, [r7, #4]
 8007364:	685b      	ldr	r3, [r3, #4]
 8007366:	429a      	cmp	r2, r3
 8007368:	d3af      	bcc.n	80072ca <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800736a:	2300      	movs	r3, #0
 800736c:	73fb      	strb	r3, [r7, #15]
 800736e:	e044      	b.n	80073fa <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8007370:	7bfa      	ldrb	r2, [r7, #15]
 8007372:	6879      	ldr	r1, [r7, #4]
 8007374:	4613      	mov	r3, r2
 8007376:	00db      	lsls	r3, r3, #3
 8007378:	1a9b      	subs	r3, r3, r2
 800737a:	009b      	lsls	r3, r3, #2
 800737c:	440b      	add	r3, r1
 800737e:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 8007382:	2200      	movs	r2, #0
 8007384:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8007386:	7bfa      	ldrb	r2, [r7, #15]
 8007388:	6879      	ldr	r1, [r7, #4]
 800738a:	4613      	mov	r3, r2
 800738c:	00db      	lsls	r3, r3, #3
 800738e:	1a9b      	subs	r3, r3, r2
 8007390:	009b      	lsls	r3, r3, #2
 8007392:	440b      	add	r3, r1
 8007394:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 8007398:	7bfa      	ldrb	r2, [r7, #15]
 800739a:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800739c:	7bfa      	ldrb	r2, [r7, #15]
 800739e:	6879      	ldr	r1, [r7, #4]
 80073a0:	4613      	mov	r3, r2
 80073a2:	00db      	lsls	r3, r3, #3
 80073a4:	1a9b      	subs	r3, r3, r2
 80073a6:	009b      	lsls	r3, r3, #2
 80073a8:	440b      	add	r3, r1
 80073aa:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 80073ae:	2200      	movs	r2, #0
 80073b0:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80073b2:	7bfa      	ldrb	r2, [r7, #15]
 80073b4:	6879      	ldr	r1, [r7, #4]
 80073b6:	4613      	mov	r3, r2
 80073b8:	00db      	lsls	r3, r3, #3
 80073ba:	1a9b      	subs	r3, r3, r2
 80073bc:	009b      	lsls	r3, r3, #2
 80073be:	440b      	add	r3, r1
 80073c0:	f503 7301 	add.w	r3, r3, #516	; 0x204
 80073c4:	2200      	movs	r2, #0
 80073c6:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80073c8:	7bfa      	ldrb	r2, [r7, #15]
 80073ca:	6879      	ldr	r1, [r7, #4]
 80073cc:	4613      	mov	r3, r2
 80073ce:	00db      	lsls	r3, r3, #3
 80073d0:	1a9b      	subs	r3, r3, r2
 80073d2:	009b      	lsls	r3, r3, #2
 80073d4:	440b      	add	r3, r1
 80073d6:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80073da:	2200      	movs	r2, #0
 80073dc:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80073de:	7bfa      	ldrb	r2, [r7, #15]
 80073e0:	6879      	ldr	r1, [r7, #4]
 80073e2:	4613      	mov	r3, r2
 80073e4:	00db      	lsls	r3, r3, #3
 80073e6:	1a9b      	subs	r3, r3, r2
 80073e8:	009b      	lsls	r3, r3, #2
 80073ea:	440b      	add	r3, r1
 80073ec:	f503 7304 	add.w	r3, r3, #528	; 0x210
 80073f0:	2200      	movs	r2, #0
 80073f2:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80073f4:	7bfb      	ldrb	r3, [r7, #15]
 80073f6:	3301      	adds	r3, #1
 80073f8:	73fb      	strb	r3, [r7, #15]
 80073fa:	7bfa      	ldrb	r2, [r7, #15]
 80073fc:	687b      	ldr	r3, [r7, #4]
 80073fe:	685b      	ldr	r3, [r3, #4]
 8007400:	429a      	cmp	r2, r3
 8007402:	d3b5      	bcc.n	8007370 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8007404:	687b      	ldr	r3, [r7, #4]
 8007406:	681b      	ldr	r3, [r3, #0]
 8007408:	603b      	str	r3, [r7, #0]
 800740a:	687e      	ldr	r6, [r7, #4]
 800740c:	466d      	mov	r5, sp
 800740e:	f106 0410 	add.w	r4, r6, #16
 8007412:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8007414:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8007416:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8007418:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800741a:	e894 0003 	ldmia.w	r4, {r0, r1}
 800741e:	e885 0003 	stmia.w	r5, {r0, r1}
 8007422:	1d33      	adds	r3, r6, #4
 8007424:	cb0e      	ldmia	r3, {r1, r2, r3}
 8007426:	6838      	ldr	r0, [r7, #0]
 8007428:	f009 fdb6 	bl	8010f98 <USB_DevInit>
 800742c:	4603      	mov	r3, r0
 800742e:	2b00      	cmp	r3, #0
 8007430:	d005      	beq.n	800743e <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8007432:	687b      	ldr	r3, [r7, #4]
 8007434:	2202      	movs	r2, #2
 8007436:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 800743a:	2301      	movs	r3, #1
 800743c:	e014      	b.n	8007468 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 800743e:	687b      	ldr	r3, [r7, #4]
 8007440:	2200      	movs	r2, #0
 8007442:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8007446:	687b      	ldr	r3, [r7, #4]
 8007448:	2201      	movs	r2, #1
 800744a:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 800744e:	687b      	ldr	r3, [r7, #4]
 8007450:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007452:	2b01      	cmp	r3, #1
 8007454:	d102      	bne.n	800745c <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8007456:	6878      	ldr	r0, [r7, #4]
 8007458:	f001 f8be 	bl	80085d8 <HAL_PCDEx_ActivateLPM>
  }
  
  (void)USB_DevDisconnect(hpcd->Instance);
 800745c:	687b      	ldr	r3, [r7, #4]
 800745e:	681b      	ldr	r3, [r3, #0]
 8007460:	4618      	mov	r0, r3
 8007462:	f00a fdf5 	bl	8012050 <USB_DevDisconnect>

  return HAL_OK;
 8007466:	2300      	movs	r3, #0
}
 8007468:	4618      	mov	r0, r3
 800746a:	3714      	adds	r7, #20
 800746c:	46bd      	mov	sp, r7
 800746e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08007470 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8007470:	b580      	push	{r7, lr}
 8007472:	b084      	sub	sp, #16
 8007474:	af00      	add	r7, sp, #0
 8007476:	6078      	str	r0, [r7, #4]
#if defined (USB_OTG_FS) || defined (USB_OTG_HS)
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	681b      	ldr	r3, [r3, #0]
 800747c:	60fb      	str	r3, [r7, #12]
#endif /* defined (USB_OTG_FS) || defined (USB_OTG_HS) */

  __HAL_LOCK(hpcd);
 800747e:	687b      	ldr	r3, [r7, #4]
 8007480:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8007484:	2b01      	cmp	r3, #1
 8007486:	d101      	bne.n	800748c <HAL_PCD_Start+0x1c>
 8007488:	2302      	movs	r3, #2
 800748a:	e020      	b.n	80074ce <HAL_PCD_Start+0x5e>
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	2201      	movs	r2, #1
 8007490:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
#if defined (USB_OTG_FS) || defined (USB_OTG_HS)
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8007494:	687b      	ldr	r3, [r7, #4]
 8007496:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007498:	2b01      	cmp	r3, #1
 800749a:	d109      	bne.n	80074b0 <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 800749c:	687b      	ldr	r3, [r7, #4]
 800749e:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 80074a0:	2b01      	cmp	r3, #1
 80074a2:	d005      	beq.n	80074b0 <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80074a4:	68fb      	ldr	r3, [r7, #12]
 80074a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80074a8:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80074ac:	68fb      	ldr	r3, [r7, #12]
 80074ae:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined (USB_OTG_FS) || defined (USB_OTG_HS) */
  (void)USB_DevConnect(hpcd->Instance);
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	681b      	ldr	r3, [r3, #0]
 80074b4:	4618      	mov	r0, r3
 80074b6:	f00a fdb3 	bl	8012020 <USB_DevConnect>
  __HAL_PCD_ENABLE(hpcd);
 80074ba:	687b      	ldr	r3, [r7, #4]
 80074bc:	681b      	ldr	r3, [r3, #0]
 80074be:	4618      	mov	r0, r3
 80074c0:	f009 fd1e 	bl	8010f00 <USB_EnableGlobalInt>
  __HAL_UNLOCK(hpcd);
 80074c4:	687b      	ldr	r3, [r7, #4]
 80074c6:	2200      	movs	r2, #0
 80074c8:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 80074cc:	2300      	movs	r3, #0
}
 80074ce:	4618      	mov	r0, r3
 80074d0:	3710      	adds	r7, #16
 80074d2:	46bd      	mov	sp, r7
 80074d4:	bd80      	pop	{r7, pc}

080074d6 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80074d6:	b590      	push	{r4, r7, lr}
 80074d8:	b08d      	sub	sp, #52	; 0x34
 80074da:	af00      	add	r7, sp, #0
 80074dc:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80074de:	687b      	ldr	r3, [r7, #4]
 80074e0:	681b      	ldr	r3, [r3, #0]
 80074e2:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80074e4:	6a3b      	ldr	r3, [r7, #32]
 80074e6:	61fb      	str	r3, [r7, #28]
  uint32_t i, ep_intr, epint, epnum;
  uint32_t fifoemptymsk, temp;
  USB_OTG_EPTypeDef *ep;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 80074e8:	687b      	ldr	r3, [r7, #4]
 80074ea:	681b      	ldr	r3, [r3, #0]
 80074ec:	4618      	mov	r0, r3
 80074ee:	f00a fe5a 	bl	80121a6 <USB_GetMode>
 80074f2:	4603      	mov	r3, r0
 80074f4:	2b00      	cmp	r3, #0
 80074f6:	f040 83ca 	bne.w	8007c8e <HAL_PCD_IRQHandler+0x7b8>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 80074fa:	687b      	ldr	r3, [r7, #4]
 80074fc:	681b      	ldr	r3, [r3, #0]
 80074fe:	4618      	mov	r0, r3
 8007500:	f00a fdbe 	bl	8012080 <USB_ReadInterrupts>
 8007504:	4603      	mov	r3, r0
 8007506:	2b00      	cmp	r3, #0
 8007508:	f000 83c0 	beq.w	8007c8c <HAL_PCD_IRQHandler+0x7b6>
    {
      return;
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 800750c:	687b      	ldr	r3, [r7, #4]
 800750e:	681b      	ldr	r3, [r3, #0]
 8007510:	4618      	mov	r0, r3
 8007512:	f00a fdb5 	bl	8012080 <USB_ReadInterrupts>
 8007516:	4603      	mov	r3, r0
 8007518:	f003 0302 	and.w	r3, r3, #2
 800751c:	2b02      	cmp	r3, #2
 800751e:	d107      	bne.n	8007530 <HAL_PCD_IRQHandler+0x5a>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8007520:	687b      	ldr	r3, [r7, #4]
 8007522:	681b      	ldr	r3, [r3, #0]
 8007524:	695a      	ldr	r2, [r3, #20]
 8007526:	687b      	ldr	r3, [r7, #4]
 8007528:	681b      	ldr	r3, [r3, #0]
 800752a:	f002 0202 	and.w	r2, r2, #2
 800752e:	615a      	str	r2, [r3, #20]
    }

     /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8007530:	687b      	ldr	r3, [r7, #4]
 8007532:	681b      	ldr	r3, [r3, #0]
 8007534:	4618      	mov	r0, r3
 8007536:	f00a fda3 	bl	8012080 <USB_ReadInterrupts>
 800753a:	4603      	mov	r3, r0
 800753c:	f003 0310 	and.w	r3, r3, #16
 8007540:	2b10      	cmp	r3, #16
 8007542:	d161      	bne.n	8007608 <HAL_PCD_IRQHandler+0x132>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8007544:	687b      	ldr	r3, [r7, #4]
 8007546:	681b      	ldr	r3, [r3, #0]
 8007548:	699a      	ldr	r2, [r3, #24]
 800754a:	687b      	ldr	r3, [r7, #4]
 800754c:	681b      	ldr	r3, [r3, #0]
 800754e:	f022 0210 	bic.w	r2, r2, #16
 8007552:	619a      	str	r2, [r3, #24]

      temp = USBx->GRXSTSP;
 8007554:	6a3b      	ldr	r3, [r7, #32]
 8007556:	6a1b      	ldr	r3, [r3, #32]
 8007558:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 800755a:	69bb      	ldr	r3, [r7, #24]
 800755c:	f003 020f 	and.w	r2, r3, #15
 8007560:	4613      	mov	r3, r2
 8007562:	00db      	lsls	r3, r3, #3
 8007564:	1a9b      	subs	r3, r3, r2
 8007566:	009b      	lsls	r3, r3, #2
 8007568:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800756c:	687a      	ldr	r2, [r7, #4]
 800756e:	4413      	add	r3, r2
 8007570:	3304      	adds	r3, #4
 8007572:	617b      	str	r3, [r7, #20]

      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8007574:	69bb      	ldr	r3, [r7, #24]
 8007576:	0c5b      	lsrs	r3, r3, #17
 8007578:	f003 030f 	and.w	r3, r3, #15
 800757c:	2b02      	cmp	r3, #2
 800757e:	d124      	bne.n	80075ca <HAL_PCD_IRQHandler+0xf4>
      {
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 8007580:	69ba      	ldr	r2, [r7, #24]
 8007582:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8007586:	4013      	ands	r3, r2
 8007588:	2b00      	cmp	r3, #0
 800758a:	d035      	beq.n	80075f8 <HAL_PCD_IRQHandler+0x122>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800758c:	697b      	ldr	r3, [r7, #20]
 800758e:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));
 8007590:	69bb      	ldr	r3, [r7, #24]
 8007592:	091b      	lsrs	r3, r3, #4
 8007594:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8007596:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800759a:	b29b      	uxth	r3, r3
 800759c:	461a      	mov	r2, r3
 800759e:	6a38      	ldr	r0, [r7, #32]
 80075a0:	f00a fc1b 	bl	8011dda <USB_ReadPacket>

          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 80075a4:	697b      	ldr	r3, [r7, #20]
 80075a6:	68da      	ldr	r2, [r3, #12]
 80075a8:	69bb      	ldr	r3, [r7, #24]
 80075aa:	091b      	lsrs	r3, r3, #4
 80075ac:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80075b0:	441a      	add	r2, r3
 80075b2:	697b      	ldr	r3, [r7, #20]
 80075b4:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 80075b6:	697b      	ldr	r3, [r7, #20]
 80075b8:	699a      	ldr	r2, [r3, #24]
 80075ba:	69bb      	ldr	r3, [r7, #24]
 80075bc:	091b      	lsrs	r3, r3, #4
 80075be:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80075c2:	441a      	add	r2, r3
 80075c4:	697b      	ldr	r3, [r7, #20]
 80075c6:	619a      	str	r2, [r3, #24]
 80075c8:	e016      	b.n	80075f8 <HAL_PCD_IRQHandler+0x122>
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 80075ca:	69bb      	ldr	r3, [r7, #24]
 80075cc:	0c5b      	lsrs	r3, r3, #17
 80075ce:	f003 030f 	and.w	r3, r3, #15
 80075d2:	2b06      	cmp	r3, #6
 80075d4:	d110      	bne.n	80075f8 <HAL_PCD_IRQHandler+0x122>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 80075d6:	687b      	ldr	r3, [r7, #4]
 80075d8:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80075dc:	2208      	movs	r2, #8
 80075de:	4619      	mov	r1, r3
 80075e0:	6a38      	ldr	r0, [r7, #32]
 80075e2:	f00a fbfa 	bl	8011dda <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 80075e6:	697b      	ldr	r3, [r7, #20]
 80075e8:	699a      	ldr	r2, [r3, #24]
 80075ea:	69bb      	ldr	r3, [r7, #24]
 80075ec:	091b      	lsrs	r3, r3, #4
 80075ee:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80075f2:	441a      	add	r2, r3
 80075f4:	697b      	ldr	r3, [r7, #20]
 80075f6:	619a      	str	r2, [r3, #24]
      }
      else
      {
        /* ... */
      }
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80075f8:	687b      	ldr	r3, [r7, #4]
 80075fa:	681b      	ldr	r3, [r3, #0]
 80075fc:	699a      	ldr	r2, [r3, #24]
 80075fe:	687b      	ldr	r3, [r7, #4]
 8007600:	681b      	ldr	r3, [r3, #0]
 8007602:	f042 0210 	orr.w	r2, r2, #16
 8007606:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8007608:	687b      	ldr	r3, [r7, #4]
 800760a:	681b      	ldr	r3, [r3, #0]
 800760c:	4618      	mov	r0, r3
 800760e:	f00a fd37 	bl	8012080 <USB_ReadInterrupts>
 8007612:	4603      	mov	r3, r0
 8007614:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8007618:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800761c:	d16e      	bne.n	80076fc <HAL_PCD_IRQHandler+0x226>
    {
      epnum = 0U;
 800761e:	2300      	movs	r3, #0
 8007620:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8007622:	687b      	ldr	r3, [r7, #4]
 8007624:	681b      	ldr	r3, [r3, #0]
 8007626:	4618      	mov	r0, r3
 8007628:	f00a fd3d 	bl	80120a6 <USB_ReadDevAllOutEpInterrupt>
 800762c:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 800762e:	e062      	b.n	80076f6 <HAL_PCD_IRQHandler+0x220>
      {
        if ((ep_intr & 0x1U) != 0U)
 8007630:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007632:	f003 0301 	and.w	r3, r3, #1
 8007636:	2b00      	cmp	r3, #0
 8007638:	d057      	beq.n	80076ea <HAL_PCD_IRQHandler+0x214>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800763a:	687b      	ldr	r3, [r7, #4]
 800763c:	681b      	ldr	r3, [r3, #0]
 800763e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007640:	b2d2      	uxtb	r2, r2
 8007642:	4611      	mov	r1, r2
 8007644:	4618      	mov	r0, r3
 8007646:	f00a fd62 	bl	801210e <USB_ReadDevOutEPInterrupt>
 800764a:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 800764c:	693b      	ldr	r3, [r7, #16]
 800764e:	f003 0301 	and.w	r3, r3, #1
 8007652:	2b00      	cmp	r3, #0
 8007654:	d00c      	beq.n	8007670 <HAL_PCD_IRQHandler+0x19a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8007656:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007658:	015a      	lsls	r2, r3, #5
 800765a:	69fb      	ldr	r3, [r7, #28]
 800765c:	4413      	add	r3, r2
 800765e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007662:	461a      	mov	r2, r3
 8007664:	2301      	movs	r3, #1
 8007666:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8007668:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800766a:	6878      	ldr	r0, [r7, #4]
 800766c:	f000 fe0a 	bl	8008284 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8007670:	693b      	ldr	r3, [r7, #16]
 8007672:	f003 0308 	and.w	r3, r3, #8
 8007676:	2b00      	cmp	r3, #0
 8007678:	d00c      	beq.n	8007694 <HAL_PCD_IRQHandler+0x1be>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 800767a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800767c:	015a      	lsls	r2, r3, #5
 800767e:	69fb      	ldr	r3, [r7, #28]
 8007680:	4413      	add	r3, r2
 8007682:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007686:	461a      	mov	r2, r3
 8007688:	2308      	movs	r3, #8
 800768a:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 800768c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800768e:	6878      	ldr	r0, [r7, #4]
 8007690:	f000 ff04 	bl	800849c <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8007694:	693b      	ldr	r3, [r7, #16]
 8007696:	f003 0310 	and.w	r3, r3, #16
 800769a:	2b00      	cmp	r3, #0
 800769c:	d008      	beq.n	80076b0 <HAL_PCD_IRQHandler+0x1da>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 800769e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80076a0:	015a      	lsls	r2, r3, #5
 80076a2:	69fb      	ldr	r3, [r7, #28]
 80076a4:	4413      	add	r3, r2
 80076a6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80076aa:	461a      	mov	r2, r3
 80076ac:	2310      	movs	r3, #16
 80076ae:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80076b0:	693b      	ldr	r3, [r7, #16]
 80076b2:	f003 0320 	and.w	r3, r3, #32
 80076b6:	2b00      	cmp	r3, #0
 80076b8:	d008      	beq.n	80076cc <HAL_PCD_IRQHandler+0x1f6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80076ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80076bc:	015a      	lsls	r2, r3, #5
 80076be:	69fb      	ldr	r3, [r7, #28]
 80076c0:	4413      	add	r3, r2
 80076c2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80076c6:	461a      	mov	r2, r3
 80076c8:	2320      	movs	r3, #32
 80076ca:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 80076cc:	693b      	ldr	r3, [r7, #16]
 80076ce:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80076d2:	2b00      	cmp	r3, #0
 80076d4:	d009      	beq.n	80076ea <HAL_PCD_IRQHandler+0x214>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 80076d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80076d8:	015a      	lsls	r2, r3, #5
 80076da:	69fb      	ldr	r3, [r7, #28]
 80076dc:	4413      	add	r3, r2
 80076de:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80076e2:	461a      	mov	r2, r3
 80076e4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80076e8:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 80076ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80076ec:	3301      	adds	r3, #1
 80076ee:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 80076f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80076f2:	085b      	lsrs	r3, r3, #1
 80076f4:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 80076f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80076f8:	2b00      	cmp	r3, #0
 80076fa:	d199      	bne.n	8007630 <HAL_PCD_IRQHandler+0x15a>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 80076fc:	687b      	ldr	r3, [r7, #4]
 80076fe:	681b      	ldr	r3, [r3, #0]
 8007700:	4618      	mov	r0, r3
 8007702:	f00a fcbd 	bl	8012080 <USB_ReadInterrupts>
 8007706:	4603      	mov	r3, r0
 8007708:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800770c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8007710:	f040 80c0 	bne.w	8007894 <HAL_PCD_IRQHandler+0x3be>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8007714:	687b      	ldr	r3, [r7, #4]
 8007716:	681b      	ldr	r3, [r3, #0]
 8007718:	4618      	mov	r0, r3
 800771a:	f00a fcde 	bl	80120da <USB_ReadDevAllInEpInterrupt>
 800771e:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8007720:	2300      	movs	r3, #0
 8007722:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8007724:	e0b2      	b.n	800788c <HAL_PCD_IRQHandler+0x3b6>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8007726:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007728:	f003 0301 	and.w	r3, r3, #1
 800772c:	2b00      	cmp	r3, #0
 800772e:	f000 80a7 	beq.w	8007880 <HAL_PCD_IRQHandler+0x3aa>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8007732:	687b      	ldr	r3, [r7, #4]
 8007734:	681b      	ldr	r3, [r3, #0]
 8007736:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007738:	b2d2      	uxtb	r2, r2
 800773a:	4611      	mov	r1, r2
 800773c:	4618      	mov	r0, r3
 800773e:	f00a fd04 	bl	801214a <USB_ReadDevInEPInterrupt>
 8007742:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8007744:	693b      	ldr	r3, [r7, #16]
 8007746:	f003 0301 	and.w	r3, r3, #1
 800774a:	2b00      	cmp	r3, #0
 800774c:	d057      	beq.n	80077fe <HAL_PCD_IRQHandler+0x328>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800774e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007750:	f003 030f 	and.w	r3, r3, #15
 8007754:	2201      	movs	r2, #1
 8007756:	fa02 f303 	lsl.w	r3, r2, r3
 800775a:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800775c:	69fb      	ldr	r3, [r7, #28]
 800775e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007762:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007764:	68fb      	ldr	r3, [r7, #12]
 8007766:	43db      	mvns	r3, r3
 8007768:	69f9      	ldr	r1, [r7, #28]
 800776a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800776e:	4013      	ands	r3, r2
 8007770:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8007772:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007774:	015a      	lsls	r2, r3, #5
 8007776:	69fb      	ldr	r3, [r7, #28]
 8007778:	4413      	add	r3, r2
 800777a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800777e:	461a      	mov	r2, r3
 8007780:	2301      	movs	r3, #1
 8007782:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8007784:	687b      	ldr	r3, [r7, #4]
 8007786:	691b      	ldr	r3, [r3, #16]
 8007788:	2b01      	cmp	r3, #1
 800778a:	d132      	bne.n	80077f2 <HAL_PCD_IRQHandler+0x31c>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 800778c:	6879      	ldr	r1, [r7, #4]
 800778e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007790:	4613      	mov	r3, r2
 8007792:	00db      	lsls	r3, r3, #3
 8007794:	1a9b      	subs	r3, r3, r2
 8007796:	009b      	lsls	r3, r3, #2
 8007798:	440b      	add	r3, r1
 800779a:	3348      	adds	r3, #72	; 0x48
 800779c:	6819      	ldr	r1, [r3, #0]
 800779e:	6878      	ldr	r0, [r7, #4]
 80077a0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80077a2:	4613      	mov	r3, r2
 80077a4:	00db      	lsls	r3, r3, #3
 80077a6:	1a9b      	subs	r3, r3, r2
 80077a8:	009b      	lsls	r3, r3, #2
 80077aa:	4403      	add	r3, r0
 80077ac:	3344      	adds	r3, #68	; 0x44
 80077ae:	681b      	ldr	r3, [r3, #0]
 80077b0:	4419      	add	r1, r3
 80077b2:	6878      	ldr	r0, [r7, #4]
 80077b4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80077b6:	4613      	mov	r3, r2
 80077b8:	00db      	lsls	r3, r3, #3
 80077ba:	1a9b      	subs	r3, r3, r2
 80077bc:	009b      	lsls	r3, r3, #2
 80077be:	4403      	add	r3, r0
 80077c0:	3348      	adds	r3, #72	; 0x48
 80077c2:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 80077c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80077c6:	2b00      	cmp	r3, #0
 80077c8:	d113      	bne.n	80077f2 <HAL_PCD_IRQHandler+0x31c>
 80077ca:	6879      	ldr	r1, [r7, #4]
 80077cc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80077ce:	4613      	mov	r3, r2
 80077d0:	00db      	lsls	r3, r3, #3
 80077d2:	1a9b      	subs	r3, r3, r2
 80077d4:	009b      	lsls	r3, r3, #2
 80077d6:	440b      	add	r3, r1
 80077d8:	3350      	adds	r3, #80	; 0x50
 80077da:	681b      	ldr	r3, [r3, #0]
 80077dc:	2b00      	cmp	r3, #0
 80077de:	d108      	bne.n	80077f2 <HAL_PCD_IRQHandler+0x31c>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80077e0:	687b      	ldr	r3, [r7, #4]
 80077e2:	6818      	ldr	r0, [r3, #0]
 80077e4:	687b      	ldr	r3, [r7, #4]
 80077e6:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80077ea:	461a      	mov	r2, r3
 80077ec:	2101      	movs	r1, #1
 80077ee:	f00a fd0d 	bl	801220c <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 80077f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80077f4:	b2db      	uxtb	r3, r3
 80077f6:	4619      	mov	r1, r3
 80077f8:	6878      	ldr	r0, [r7, #4]
 80077fa:	f010 fbfa 	bl	8017ff2 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 80077fe:	693b      	ldr	r3, [r7, #16]
 8007800:	f003 0308 	and.w	r3, r3, #8
 8007804:	2b00      	cmp	r3, #0
 8007806:	d008      	beq.n	800781a <HAL_PCD_IRQHandler+0x344>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8007808:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800780a:	015a      	lsls	r2, r3, #5
 800780c:	69fb      	ldr	r3, [r7, #28]
 800780e:	4413      	add	r3, r2
 8007810:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007814:	461a      	mov	r2, r3
 8007816:	2308      	movs	r3, #8
 8007818:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 800781a:	693b      	ldr	r3, [r7, #16]
 800781c:	f003 0310 	and.w	r3, r3, #16
 8007820:	2b00      	cmp	r3, #0
 8007822:	d008      	beq.n	8007836 <HAL_PCD_IRQHandler+0x360>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8007824:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007826:	015a      	lsls	r2, r3, #5
 8007828:	69fb      	ldr	r3, [r7, #28]
 800782a:	4413      	add	r3, r2
 800782c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007830:	461a      	mov	r2, r3
 8007832:	2310      	movs	r3, #16
 8007834:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8007836:	693b      	ldr	r3, [r7, #16]
 8007838:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800783c:	2b00      	cmp	r3, #0
 800783e:	d008      	beq.n	8007852 <HAL_PCD_IRQHandler+0x37c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8007840:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007842:	015a      	lsls	r2, r3, #5
 8007844:	69fb      	ldr	r3, [r7, #28]
 8007846:	4413      	add	r3, r2
 8007848:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800784c:	461a      	mov	r2, r3
 800784e:	2340      	movs	r3, #64	; 0x40
 8007850:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8007852:	693b      	ldr	r3, [r7, #16]
 8007854:	f003 0302 	and.w	r3, r3, #2
 8007858:	2b00      	cmp	r3, #0
 800785a:	d008      	beq.n	800786e <HAL_PCD_IRQHandler+0x398>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 800785c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800785e:	015a      	lsls	r2, r3, #5
 8007860:	69fb      	ldr	r3, [r7, #28]
 8007862:	4413      	add	r3, r2
 8007864:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007868:	461a      	mov	r2, r3
 800786a:	2302      	movs	r3, #2
 800786c:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 800786e:	693b      	ldr	r3, [r7, #16]
 8007870:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007874:	2b00      	cmp	r3, #0
 8007876:	d003      	beq.n	8007880 <HAL_PCD_IRQHandler+0x3aa>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8007878:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800787a:	6878      	ldr	r0, [r7, #4]
 800787c:	f000 fc75 	bl	800816a <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8007880:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007882:	3301      	adds	r3, #1
 8007884:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8007886:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007888:	085b      	lsrs	r3, r3, #1
 800788a:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 800788c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800788e:	2b00      	cmp	r3, #0
 8007890:	f47f af49 	bne.w	8007726 <HAL_PCD_IRQHandler+0x250>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8007894:	687b      	ldr	r3, [r7, #4]
 8007896:	681b      	ldr	r3, [r3, #0]
 8007898:	4618      	mov	r0, r3
 800789a:	f00a fbf1 	bl	8012080 <USB_ReadInterrupts>
 800789e:	4603      	mov	r3, r0
 80078a0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80078a4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80078a8:	d122      	bne.n	80078f0 <HAL_PCD_IRQHandler+0x41a>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80078aa:	69fb      	ldr	r3, [r7, #28]
 80078ac:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80078b0:	685b      	ldr	r3, [r3, #4]
 80078b2:	69fa      	ldr	r2, [r7, #28]
 80078b4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80078b8:	f023 0301 	bic.w	r3, r3, #1
 80078bc:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 80078be:	687b      	ldr	r3, [r7, #4]
 80078c0:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 80078c4:	2b01      	cmp	r3, #1
 80078c6:	d108      	bne.n	80078da <HAL_PCD_IRQHandler+0x404>
      {
        hpcd->LPM_State = LPM_L0;
 80078c8:	687b      	ldr	r3, [r7, #4]
 80078ca:	2200      	movs	r2, #0
 80078cc:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 80078d0:	2100      	movs	r1, #0
 80078d2:	6878      	ldr	r0, [r7, #4]
 80078d4:	f000 fea4 	bl	8008620 <HAL_PCDEx_LPM_Callback>
 80078d8:	e002      	b.n	80078e0 <HAL_PCD_IRQHandler+0x40a>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 80078da:	6878      	ldr	r0, [r7, #4]
 80078dc:	f010 fc00 	bl	80180e0 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 80078e0:	687b      	ldr	r3, [r7, #4]
 80078e2:	681b      	ldr	r3, [r3, #0]
 80078e4:	695a      	ldr	r2, [r3, #20]
 80078e6:	687b      	ldr	r3, [r7, #4]
 80078e8:	681b      	ldr	r3, [r3, #0]
 80078ea:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 80078ee:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 80078f0:	687b      	ldr	r3, [r7, #4]
 80078f2:	681b      	ldr	r3, [r3, #0]
 80078f4:	4618      	mov	r0, r3
 80078f6:	f00a fbc3 	bl	8012080 <USB_ReadInterrupts>
 80078fa:	4603      	mov	r3, r0
 80078fc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007900:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007904:	d112      	bne.n	800792c <HAL_PCD_IRQHandler+0x456>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8007906:	69fb      	ldr	r3, [r7, #28]
 8007908:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800790c:	689b      	ldr	r3, [r3, #8]
 800790e:	f003 0301 	and.w	r3, r3, #1
 8007912:	2b01      	cmp	r3, #1
 8007914:	d102      	bne.n	800791c <HAL_PCD_IRQHandler+0x446>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8007916:	6878      	ldr	r0, [r7, #4]
 8007918:	f010 fbbc 	bl	8018094 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 800791c:	687b      	ldr	r3, [r7, #4]
 800791e:	681b      	ldr	r3, [r3, #0]
 8007920:	695a      	ldr	r2, [r3, #20]
 8007922:	687b      	ldr	r3, [r7, #4]
 8007924:	681b      	ldr	r3, [r3, #0]
 8007926:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 800792a:	615a      	str	r2, [r3, #20]
    }
    
    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 800792c:	687b      	ldr	r3, [r7, #4]
 800792e:	681b      	ldr	r3, [r3, #0]
 8007930:	4618      	mov	r0, r3
 8007932:	f00a fba5 	bl	8012080 <USB_ReadInterrupts>
 8007936:	4603      	mov	r3, r0
 8007938:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800793c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007940:	d121      	bne.n	8007986 <HAL_PCD_IRQHandler+0x4b0>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 8007942:	687b      	ldr	r3, [r7, #4]
 8007944:	681b      	ldr	r3, [r3, #0]
 8007946:	695a      	ldr	r2, [r3, #20]
 8007948:	687b      	ldr	r3, [r7, #4]
 800794a:	681b      	ldr	r3, [r3, #0]
 800794c:	f002 6200 	and.w	r2, r2, #134217728	; 0x8000000
 8007950:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 8007952:	687b      	ldr	r3, [r7, #4]
 8007954:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 8007958:	2b00      	cmp	r3, #0
 800795a:	d111      	bne.n	8007980 <HAL_PCD_IRQHandler+0x4aa>
      {
        hpcd->LPM_State = LPM_L1;
 800795c:	687b      	ldr	r3, [r7, #4]
 800795e:	2201      	movs	r2, #1
 8007960:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 8007964:	687b      	ldr	r3, [r7, #4]
 8007966:	681b      	ldr	r3, [r3, #0]
 8007968:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800796a:	089b      	lsrs	r3, r3, #2
 800796c:	f003 020f 	and.w	r2, r3, #15
 8007970:	687b      	ldr	r3, [r7, #4]
 8007972:	f8c3 23f8 	str.w	r2, [r3, #1016]	; 0x3f8

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8007976:	2101      	movs	r1, #1
 8007978:	6878      	ldr	r0, [r7, #4]
 800797a:	f000 fe51 	bl	8008620 <HAL_PCDEx_LPM_Callback>
 800797e:	e002      	b.n	8007986 <HAL_PCD_IRQHandler+0x4b0>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8007980:	6878      	ldr	r0, [r7, #4]
 8007982:	f010 fb87 	bl	8018094 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8007986:	687b      	ldr	r3, [r7, #4]
 8007988:	681b      	ldr	r3, [r3, #0]
 800798a:	4618      	mov	r0, r3
 800798c:	f00a fb78 	bl	8012080 <USB_ReadInterrupts>
 8007990:	4603      	mov	r3, r0
 8007992:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8007996:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800799a:	f040 80c7 	bne.w	8007b2c <HAL_PCD_IRQHandler+0x656>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800799e:	69fb      	ldr	r3, [r7, #28]
 80079a0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80079a4:	685b      	ldr	r3, [r3, #4]
 80079a6:	69fa      	ldr	r2, [r7, #28]
 80079a8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80079ac:	f023 0301 	bic.w	r3, r3, #1
 80079b0:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 80079b2:	687b      	ldr	r3, [r7, #4]
 80079b4:	681b      	ldr	r3, [r3, #0]
 80079b6:	2110      	movs	r1, #16
 80079b8:	4618      	mov	r0, r3
 80079ba:	f009 fc4b 	bl	8011254 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80079be:	2300      	movs	r3, #0
 80079c0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80079c2:	e056      	b.n	8007a72 <HAL_PCD_IRQHandler+0x59c>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 80079c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80079c6:	015a      	lsls	r2, r3, #5
 80079c8:	69fb      	ldr	r3, [r7, #28]
 80079ca:	4413      	add	r3, r2
 80079cc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80079d0:	461a      	mov	r2, r3
 80079d2:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80079d6:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80079d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80079da:	015a      	lsls	r2, r3, #5
 80079dc:	69fb      	ldr	r3, [r7, #28]
 80079de:	4413      	add	r3, r2
 80079e0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80079e4:	681b      	ldr	r3, [r3, #0]
 80079e6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80079e8:	0151      	lsls	r1, r2, #5
 80079ea:	69fa      	ldr	r2, [r7, #28]
 80079ec:	440a      	add	r2, r1
 80079ee:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80079f2:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80079f6:	6013      	str	r3, [r2, #0]
        USBx_INEP(i)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 80079f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80079fa:	015a      	lsls	r2, r3, #5
 80079fc:	69fb      	ldr	r3, [r7, #28]
 80079fe:	4413      	add	r3, r2
 8007a00:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007a04:	681b      	ldr	r3, [r3, #0]
 8007a06:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007a08:	0151      	lsls	r1, r2, #5
 8007a0a:	69fa      	ldr	r2, [r7, #28]
 8007a0c:	440a      	add	r2, r1
 8007a0e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007a12:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8007a16:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8007a18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007a1a:	015a      	lsls	r2, r3, #5
 8007a1c:	69fb      	ldr	r3, [r7, #28]
 8007a1e:	4413      	add	r3, r2
 8007a20:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007a24:	461a      	mov	r2, r3
 8007a26:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8007a2a:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8007a2c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007a2e:	015a      	lsls	r2, r3, #5
 8007a30:	69fb      	ldr	r3, [r7, #28]
 8007a32:	4413      	add	r3, r2
 8007a34:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007a38:	681b      	ldr	r3, [r3, #0]
 8007a3a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007a3c:	0151      	lsls	r1, r2, #5
 8007a3e:	69fa      	ldr	r2, [r7, #28]
 8007a40:	440a      	add	r2, r1
 8007a42:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007a46:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8007a4a:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8007a4c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007a4e:	015a      	lsls	r2, r3, #5
 8007a50:	69fb      	ldr	r3, [r7, #28]
 8007a52:	4413      	add	r3, r2
 8007a54:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007a58:	681b      	ldr	r3, [r3, #0]
 8007a5a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007a5c:	0151      	lsls	r1, r2, #5
 8007a5e:	69fa      	ldr	r2, [r7, #28]
 8007a60:	440a      	add	r2, r1
 8007a62:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007a66:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8007a6a:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8007a6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007a6e:	3301      	adds	r3, #1
 8007a70:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007a72:	687b      	ldr	r3, [r7, #4]
 8007a74:	685b      	ldr	r3, [r3, #4]
 8007a76:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007a78:	429a      	cmp	r2, r3
 8007a7a:	d3a3      	bcc.n	80079c4 <HAL_PCD_IRQHandler+0x4ee>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8007a7c:	69fb      	ldr	r3, [r7, #28]
 8007a7e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007a82:	69db      	ldr	r3, [r3, #28]
 8007a84:	69fa      	ldr	r2, [r7, #28]
 8007a86:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007a8a:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8007a8e:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8007a90:	687b      	ldr	r3, [r7, #4]
 8007a92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007a94:	2b00      	cmp	r3, #0
 8007a96:	d016      	beq.n	8007ac6 <HAL_PCD_IRQHandler+0x5f0>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8007a98:	69fb      	ldr	r3, [r7, #28]
 8007a9a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007a9e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007aa2:	69fa      	ldr	r2, [r7, #28]
 8007aa4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007aa8:	f043 030b 	orr.w	r3, r3, #11
 8007aac:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8007ab0:	69fb      	ldr	r3, [r7, #28]
 8007ab2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007ab6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007ab8:	69fa      	ldr	r2, [r7, #28]
 8007aba:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007abe:	f043 030b 	orr.w	r3, r3, #11
 8007ac2:	6453      	str	r3, [r2, #68]	; 0x44
 8007ac4:	e015      	b.n	8007af2 <HAL_PCD_IRQHandler+0x61c>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8007ac6:	69fb      	ldr	r3, [r7, #28]
 8007ac8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007acc:	695a      	ldr	r2, [r3, #20]
 8007ace:	69fb      	ldr	r3, [r7, #28]
 8007ad0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007ad4:	4619      	mov	r1, r3
 8007ad6:	f242 032b 	movw	r3, #8235	; 0x202b
 8007ada:	4313      	orrs	r3, r2
 8007adc:	614b      	str	r3, [r1, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8007ade:	69fb      	ldr	r3, [r7, #28]
 8007ae0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007ae4:	691b      	ldr	r3, [r3, #16]
 8007ae6:	69fa      	ldr	r2, [r7, #28]
 8007ae8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007aec:	f043 030b 	orr.w	r3, r3, #11
 8007af0:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8007af2:	69fb      	ldr	r3, [r7, #28]
 8007af4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007af8:	681b      	ldr	r3, [r3, #0]
 8007afa:	69fa      	ldr	r2, [r7, #28]
 8007afc:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007b00:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8007b04:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8007b06:	687b      	ldr	r3, [r7, #4]
 8007b08:	6818      	ldr	r0, [r3, #0]
 8007b0a:	687b      	ldr	r3, [r7, #4]
 8007b0c:	691b      	ldr	r3, [r3, #16]
 8007b0e:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8007b10:	687b      	ldr	r3, [r7, #4]
 8007b12:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8007b16:	461a      	mov	r2, r3
 8007b18:	f00a fb78 	bl	801220c <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8007b1c:	687b      	ldr	r3, [r7, #4]
 8007b1e:	681b      	ldr	r3, [r3, #0]
 8007b20:	695a      	ldr	r2, [r3, #20]
 8007b22:	687b      	ldr	r3, [r7, #4]
 8007b24:	681b      	ldr	r3, [r3, #0]
 8007b26:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8007b2a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8007b2c:	687b      	ldr	r3, [r7, #4]
 8007b2e:	681b      	ldr	r3, [r3, #0]
 8007b30:	4618      	mov	r0, r3
 8007b32:	f00a faa5 	bl	8012080 <USB_ReadInterrupts>
 8007b36:	4603      	mov	r3, r0
 8007b38:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007b3c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007b40:	d124      	bne.n	8007b8c <HAL_PCD_IRQHandler+0x6b6>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8007b42:	687b      	ldr	r3, [r7, #4]
 8007b44:	681b      	ldr	r3, [r3, #0]
 8007b46:	4618      	mov	r0, r3
 8007b48:	f00a fb3c 	bl	80121c4 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8007b4c:	687b      	ldr	r3, [r7, #4]
 8007b4e:	681b      	ldr	r3, [r3, #0]
 8007b50:	4618      	mov	r0, r3
 8007b52:	f009 fbe0 	bl	8011316 <USB_GetDevSpeed>
 8007b56:	4603      	mov	r3, r0
 8007b58:	461a      	mov	r2, r3
 8007b5a:	687b      	ldr	r3, [r7, #4]
 8007b5c:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8007b5e:	687b      	ldr	r3, [r7, #4]
 8007b60:	681c      	ldr	r4, [r3, #0]
 8007b62:	f001 fdd9 	bl	8009718 <HAL_RCC_GetHCLKFreq>
 8007b66:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8007b68:	687b      	ldr	r3, [r7, #4]
 8007b6a:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8007b6c:	b2db      	uxtb	r3, r3
 8007b6e:	461a      	mov	r2, r3
 8007b70:	4620      	mov	r0, r4
 8007b72:	f009 f923 	bl	8010dbc <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8007b76:	6878      	ldr	r0, [r7, #4]
 8007b78:	f010 fa63 	bl	8018042 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8007b7c:	687b      	ldr	r3, [r7, #4]
 8007b7e:	681b      	ldr	r3, [r3, #0]
 8007b80:	695a      	ldr	r2, [r3, #20]
 8007b82:	687b      	ldr	r3, [r7, #4]
 8007b84:	681b      	ldr	r3, [r3, #0]
 8007b86:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8007b8a:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8007b8c:	687b      	ldr	r3, [r7, #4]
 8007b8e:	681b      	ldr	r3, [r3, #0]
 8007b90:	4618      	mov	r0, r3
 8007b92:	f00a fa75 	bl	8012080 <USB_ReadInterrupts>
 8007b96:	4603      	mov	r3, r0
 8007b98:	f003 0308 	and.w	r3, r3, #8
 8007b9c:	2b08      	cmp	r3, #8
 8007b9e:	d10a      	bne.n	8007bb6 <HAL_PCD_IRQHandler+0x6e0>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8007ba0:	6878      	ldr	r0, [r7, #4]
 8007ba2:	f010 fa40 	bl	8018026 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8007ba6:	687b      	ldr	r3, [r7, #4]
 8007ba8:	681b      	ldr	r3, [r3, #0]
 8007baa:	695a      	ldr	r2, [r3, #20]
 8007bac:	687b      	ldr	r3, [r7, #4]
 8007bae:	681b      	ldr	r3, [r3, #0]
 8007bb0:	f002 0208 	and.w	r2, r2, #8
 8007bb4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8007bb6:	687b      	ldr	r3, [r7, #4]
 8007bb8:	681b      	ldr	r3, [r3, #0]
 8007bba:	4618      	mov	r0, r3
 8007bbc:	f00a fa60 	bl	8012080 <USB_ReadInterrupts>
 8007bc0:	4603      	mov	r3, r0
 8007bc2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007bc6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007bca:	d10f      	bne.n	8007bec <HAL_PCD_IRQHandler+0x716>
    {
      /* Keep application checking the corresponding Iso IN endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8007bcc:	2300      	movs	r3, #0
 8007bce:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8007bd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007bd2:	b2db      	uxtb	r3, r3
 8007bd4:	4619      	mov	r1, r3
 8007bd6:	6878      	ldr	r0, [r7, #4]
 8007bd8:	f010 faa2 	bl	8018120 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8007bdc:	687b      	ldr	r3, [r7, #4]
 8007bde:	681b      	ldr	r3, [r3, #0]
 8007be0:	695a      	ldr	r2, [r3, #20]
 8007be2:	687b      	ldr	r3, [r7, #4]
 8007be4:	681b      	ldr	r3, [r3, #0]
 8007be6:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8007bea:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8007bec:	687b      	ldr	r3, [r7, #4]
 8007bee:	681b      	ldr	r3, [r3, #0]
 8007bf0:	4618      	mov	r0, r3
 8007bf2:	f00a fa45 	bl	8012080 <USB_ReadInterrupts>
 8007bf6:	4603      	mov	r3, r0
 8007bf8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007bfc:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8007c00:	d10f      	bne.n	8007c22 <HAL_PCD_IRQHandler+0x74c>
    {
      /* Keep application checking the corresponding Iso OUT endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8007c02:	2300      	movs	r3, #0
 8007c04:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8007c06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c08:	b2db      	uxtb	r3, r3
 8007c0a:	4619      	mov	r1, r3
 8007c0c:	6878      	ldr	r0, [r7, #4]
 8007c0e:	f010 fa75 	bl	80180fc <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8007c12:	687b      	ldr	r3, [r7, #4]
 8007c14:	681b      	ldr	r3, [r3, #0]
 8007c16:	695a      	ldr	r2, [r3, #20]
 8007c18:	687b      	ldr	r3, [r7, #4]
 8007c1a:	681b      	ldr	r3, [r3, #0]
 8007c1c:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8007c20:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8007c22:	687b      	ldr	r3, [r7, #4]
 8007c24:	681b      	ldr	r3, [r3, #0]
 8007c26:	4618      	mov	r0, r3
 8007c28:	f00a fa2a 	bl	8012080 <USB_ReadInterrupts>
 8007c2c:	4603      	mov	r3, r0
 8007c2e:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8007c32:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007c36:	d10a      	bne.n	8007c4e <HAL_PCD_IRQHandler+0x778>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8007c38:	6878      	ldr	r0, [r7, #4]
 8007c3a:	f010 fa83 	bl	8018144 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8007c3e:	687b      	ldr	r3, [r7, #4]
 8007c40:	681b      	ldr	r3, [r3, #0]
 8007c42:	695a      	ldr	r2, [r3, #20]
 8007c44:	687b      	ldr	r3, [r7, #4]
 8007c46:	681b      	ldr	r3, [r3, #0]
 8007c48:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8007c4c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8007c4e:	687b      	ldr	r3, [r7, #4]
 8007c50:	681b      	ldr	r3, [r3, #0]
 8007c52:	4618      	mov	r0, r3
 8007c54:	f00a fa14 	bl	8012080 <USB_ReadInterrupts>
 8007c58:	4603      	mov	r3, r0
 8007c5a:	f003 0304 	and.w	r3, r3, #4
 8007c5e:	2b04      	cmp	r3, #4
 8007c60:	d115      	bne.n	8007c8e <HAL_PCD_IRQHandler+0x7b8>
    {
      temp = hpcd->Instance->GOTGINT;
 8007c62:	687b      	ldr	r3, [r7, #4]
 8007c64:	681b      	ldr	r3, [r3, #0]
 8007c66:	685b      	ldr	r3, [r3, #4]
 8007c68:	61bb      	str	r3, [r7, #24]

      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8007c6a:	69bb      	ldr	r3, [r7, #24]
 8007c6c:	f003 0304 	and.w	r3, r3, #4
 8007c70:	2b00      	cmp	r3, #0
 8007c72:	d002      	beq.n	8007c7a <HAL_PCD_IRQHandler+0x7a4>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8007c74:	6878      	ldr	r0, [r7, #4]
 8007c76:	f010 fa73 	bl	8018160 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
 8007c7a:	687b      	ldr	r3, [r7, #4]
 8007c7c:	681b      	ldr	r3, [r3, #0]
 8007c7e:	6859      	ldr	r1, [r3, #4]
 8007c80:	687b      	ldr	r3, [r7, #4]
 8007c82:	681b      	ldr	r3, [r3, #0]
 8007c84:	69ba      	ldr	r2, [r7, #24]
 8007c86:	430a      	orrs	r2, r1
 8007c88:	605a      	str	r2, [r3, #4]
 8007c8a:	e000      	b.n	8007c8e <HAL_PCD_IRQHandler+0x7b8>
      return;
 8007c8c:	bf00      	nop
    }
  }
}
 8007c8e:	3734      	adds	r7, #52	; 0x34
 8007c90:	46bd      	mov	sp, r7
 8007c92:	bd90      	pop	{r4, r7, pc}

08007c94 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8007c94:	b580      	push	{r7, lr}
 8007c96:	b082      	sub	sp, #8
 8007c98:	af00      	add	r7, sp, #0
 8007c9a:	6078      	str	r0, [r7, #4]
 8007c9c:	460b      	mov	r3, r1
 8007c9e:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8007ca0:	687b      	ldr	r3, [r7, #4]
 8007ca2:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8007ca6:	2b01      	cmp	r3, #1
 8007ca8:	d101      	bne.n	8007cae <HAL_PCD_SetAddress+0x1a>
 8007caa:	2302      	movs	r3, #2
 8007cac:	e013      	b.n	8007cd6 <HAL_PCD_SetAddress+0x42>
 8007cae:	687b      	ldr	r3, [r7, #4]
 8007cb0:	2201      	movs	r2, #1
 8007cb2:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  hpcd->USB_Address = address;
 8007cb6:	687b      	ldr	r3, [r7, #4]
 8007cb8:	78fa      	ldrb	r2, [r7, #3]
 8007cba:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8007cbe:	687b      	ldr	r3, [r7, #4]
 8007cc0:	681b      	ldr	r3, [r3, #0]
 8007cc2:	78fa      	ldrb	r2, [r7, #3]
 8007cc4:	4611      	mov	r1, r2
 8007cc6:	4618      	mov	r0, r3
 8007cc8:	f00a f984 	bl	8011fd4 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8007ccc:	687b      	ldr	r3, [r7, #4]
 8007cce:	2200      	movs	r2, #0
 8007cd0:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 8007cd4:	2300      	movs	r3, #0
}
 8007cd6:	4618      	mov	r0, r3
 8007cd8:	3708      	adds	r7, #8
 8007cda:	46bd      	mov	sp, r7
 8007cdc:	bd80      	pop	{r7, pc}

08007cde <HAL_PCD_EP_Open>:
  * @param  ep_mps endpoint max packet size
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint16_t ep_mps, uint8_t ep_type)
{
 8007cde:	b580      	push	{r7, lr}
 8007ce0:	b084      	sub	sp, #16
 8007ce2:	af00      	add	r7, sp, #0
 8007ce4:	6078      	str	r0, [r7, #4]
 8007ce6:	4608      	mov	r0, r1
 8007ce8:	4611      	mov	r1, r2
 8007cea:	461a      	mov	r2, r3
 8007cec:	4603      	mov	r3, r0
 8007cee:	70fb      	strb	r3, [r7, #3]
 8007cf0:	460b      	mov	r3, r1
 8007cf2:	803b      	strh	r3, [r7, #0]
 8007cf4:	4613      	mov	r3, r2
 8007cf6:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8007cf8:	2300      	movs	r3, #0
 8007cfa:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8007cfc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8007d00:	2b00      	cmp	r3, #0
 8007d02:	da0f      	bge.n	8007d24 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8007d04:	78fb      	ldrb	r3, [r7, #3]
 8007d06:	f003 020f 	and.w	r2, r3, #15
 8007d0a:	4613      	mov	r3, r2
 8007d0c:	00db      	lsls	r3, r3, #3
 8007d0e:	1a9b      	subs	r3, r3, r2
 8007d10:	009b      	lsls	r3, r3, #2
 8007d12:	3338      	adds	r3, #56	; 0x38
 8007d14:	687a      	ldr	r2, [r7, #4]
 8007d16:	4413      	add	r3, r2
 8007d18:	3304      	adds	r3, #4
 8007d1a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8007d1c:	68fb      	ldr	r3, [r7, #12]
 8007d1e:	2201      	movs	r2, #1
 8007d20:	705a      	strb	r2, [r3, #1]
 8007d22:	e00f      	b.n	8007d44 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8007d24:	78fb      	ldrb	r3, [r7, #3]
 8007d26:	f003 020f 	and.w	r2, r3, #15
 8007d2a:	4613      	mov	r3, r2
 8007d2c:	00db      	lsls	r3, r3, #3
 8007d2e:	1a9b      	subs	r3, r3, r2
 8007d30:	009b      	lsls	r3, r3, #2
 8007d32:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8007d36:	687a      	ldr	r2, [r7, #4]
 8007d38:	4413      	add	r3, r2
 8007d3a:	3304      	adds	r3, #4
 8007d3c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8007d3e:	68fb      	ldr	r3, [r7, #12]
 8007d40:	2200      	movs	r2, #0
 8007d42:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8007d44:	78fb      	ldrb	r3, [r7, #3]
 8007d46:	f003 030f 	and.w	r3, r3, #15
 8007d4a:	b2da      	uxtb	r2, r3
 8007d4c:	68fb      	ldr	r3, [r7, #12]
 8007d4e:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8007d50:	883a      	ldrh	r2, [r7, #0]
 8007d52:	68fb      	ldr	r3, [r7, #12]
 8007d54:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8007d56:	68fb      	ldr	r3, [r7, #12]
 8007d58:	78ba      	ldrb	r2, [r7, #2]
 8007d5a:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8007d5c:	68fb      	ldr	r3, [r7, #12]
 8007d5e:	785b      	ldrb	r3, [r3, #1]
 8007d60:	2b00      	cmp	r3, #0
 8007d62:	d004      	beq.n	8007d6e <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8007d64:	68fb      	ldr	r3, [r7, #12]
 8007d66:	781b      	ldrb	r3, [r3, #0]
 8007d68:	b29a      	uxth	r2, r3
 8007d6a:	68fb      	ldr	r3, [r7, #12]
 8007d6c:	80da      	strh	r2, [r3, #6]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8007d6e:	78bb      	ldrb	r3, [r7, #2]
 8007d70:	2b02      	cmp	r3, #2
 8007d72:	d102      	bne.n	8007d7a <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8007d74:	68fb      	ldr	r3, [r7, #12]
 8007d76:	2200      	movs	r2, #0
 8007d78:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8007d7a:	687b      	ldr	r3, [r7, #4]
 8007d7c:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8007d80:	2b01      	cmp	r3, #1
 8007d82:	d101      	bne.n	8007d88 <HAL_PCD_EP_Open+0xaa>
 8007d84:	2302      	movs	r3, #2
 8007d86:	e00e      	b.n	8007da6 <HAL_PCD_EP_Open+0xc8>
 8007d88:	687b      	ldr	r3, [r7, #4]
 8007d8a:	2201      	movs	r2, #1
 8007d8c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8007d90:	687b      	ldr	r3, [r7, #4]
 8007d92:	681b      	ldr	r3, [r3, #0]
 8007d94:	68f9      	ldr	r1, [r7, #12]
 8007d96:	4618      	mov	r0, r3
 8007d98:	f009 fae2 	bl	8011360 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8007d9c:	687b      	ldr	r3, [r7, #4]
 8007d9e:	2200      	movs	r2, #0
 8007da0:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return ret;
 8007da4:	7afb      	ldrb	r3, [r7, #11]
}
 8007da6:	4618      	mov	r0, r3
 8007da8:	3710      	adds	r7, #16
 8007daa:	46bd      	mov	sp, r7
 8007dac:	bd80      	pop	{r7, pc}

08007dae <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8007dae:	b580      	push	{r7, lr}
 8007db0:	b084      	sub	sp, #16
 8007db2:	af00      	add	r7, sp, #0
 8007db4:	6078      	str	r0, [r7, #4]
 8007db6:	460b      	mov	r3, r1
 8007db8:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8007dba:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8007dbe:	2b00      	cmp	r3, #0
 8007dc0:	da0f      	bge.n	8007de2 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8007dc2:	78fb      	ldrb	r3, [r7, #3]
 8007dc4:	f003 020f 	and.w	r2, r3, #15
 8007dc8:	4613      	mov	r3, r2
 8007dca:	00db      	lsls	r3, r3, #3
 8007dcc:	1a9b      	subs	r3, r3, r2
 8007dce:	009b      	lsls	r3, r3, #2
 8007dd0:	3338      	adds	r3, #56	; 0x38
 8007dd2:	687a      	ldr	r2, [r7, #4]
 8007dd4:	4413      	add	r3, r2
 8007dd6:	3304      	adds	r3, #4
 8007dd8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8007dda:	68fb      	ldr	r3, [r7, #12]
 8007ddc:	2201      	movs	r2, #1
 8007dde:	705a      	strb	r2, [r3, #1]
 8007de0:	e00f      	b.n	8007e02 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8007de2:	78fb      	ldrb	r3, [r7, #3]
 8007de4:	f003 020f 	and.w	r2, r3, #15
 8007de8:	4613      	mov	r3, r2
 8007dea:	00db      	lsls	r3, r3, #3
 8007dec:	1a9b      	subs	r3, r3, r2
 8007dee:	009b      	lsls	r3, r3, #2
 8007df0:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8007df4:	687a      	ldr	r2, [r7, #4]
 8007df6:	4413      	add	r3, r2
 8007df8:	3304      	adds	r3, #4
 8007dfa:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8007dfc:	68fb      	ldr	r3, [r7, #12]
 8007dfe:	2200      	movs	r2, #0
 8007e00:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8007e02:	78fb      	ldrb	r3, [r7, #3]
 8007e04:	f003 030f 	and.w	r3, r3, #15
 8007e08:	b2da      	uxtb	r2, r3
 8007e0a:	68fb      	ldr	r3, [r7, #12]
 8007e0c:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8007e0e:	687b      	ldr	r3, [r7, #4]
 8007e10:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8007e14:	2b01      	cmp	r3, #1
 8007e16:	d101      	bne.n	8007e1c <HAL_PCD_EP_Close+0x6e>
 8007e18:	2302      	movs	r3, #2
 8007e1a:	e00e      	b.n	8007e3a <HAL_PCD_EP_Close+0x8c>
 8007e1c:	687b      	ldr	r3, [r7, #4]
 8007e1e:	2201      	movs	r2, #1
 8007e20:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8007e24:	687b      	ldr	r3, [r7, #4]
 8007e26:	681b      	ldr	r3, [r3, #0]
 8007e28:	68f9      	ldr	r1, [r7, #12]
 8007e2a:	4618      	mov	r0, r3
 8007e2c:	f009 fb20 	bl	8011470 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8007e30:	687b      	ldr	r3, [r7, #4]
 8007e32:	2200      	movs	r2, #0
 8007e34:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 8007e38:	2300      	movs	r3, #0
}
 8007e3a:	4618      	mov	r0, r3
 8007e3c:	3710      	adds	r7, #16
 8007e3e:	46bd      	mov	sp, r7
 8007e40:	bd80      	pop	{r7, pc}

08007e42 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8007e42:	b580      	push	{r7, lr}
 8007e44:	b086      	sub	sp, #24
 8007e46:	af00      	add	r7, sp, #0
 8007e48:	60f8      	str	r0, [r7, #12]
 8007e4a:	607a      	str	r2, [r7, #4]
 8007e4c:	603b      	str	r3, [r7, #0]
 8007e4e:	460b      	mov	r3, r1
 8007e50:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8007e52:	7afb      	ldrb	r3, [r7, #11]
 8007e54:	f003 020f 	and.w	r2, r3, #15
 8007e58:	4613      	mov	r3, r2
 8007e5a:	00db      	lsls	r3, r3, #3
 8007e5c:	1a9b      	subs	r3, r3, r2
 8007e5e:	009b      	lsls	r3, r3, #2
 8007e60:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8007e64:	68fa      	ldr	r2, [r7, #12]
 8007e66:	4413      	add	r3, r2
 8007e68:	3304      	adds	r3, #4
 8007e6a:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8007e6c:	697b      	ldr	r3, [r7, #20]
 8007e6e:	687a      	ldr	r2, [r7, #4]
 8007e70:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8007e72:	697b      	ldr	r3, [r7, #20]
 8007e74:	683a      	ldr	r2, [r7, #0]
 8007e76:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8007e78:	697b      	ldr	r3, [r7, #20]
 8007e7a:	2200      	movs	r2, #0
 8007e7c:	619a      	str	r2, [r3, #24]
  ep->is_in = 0U;
 8007e7e:	697b      	ldr	r3, [r7, #20]
 8007e80:	2200      	movs	r2, #0
 8007e82:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8007e84:	7afb      	ldrb	r3, [r7, #11]
 8007e86:	f003 030f 	and.w	r3, r3, #15
 8007e8a:	b2da      	uxtb	r2, r3
 8007e8c:	697b      	ldr	r3, [r7, #20]
 8007e8e:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8007e90:	68fb      	ldr	r3, [r7, #12]
 8007e92:	691b      	ldr	r3, [r3, #16]
 8007e94:	2b01      	cmp	r3, #1
 8007e96:	d102      	bne.n	8007e9e <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8007e98:	687a      	ldr	r2, [r7, #4]
 8007e9a:	697b      	ldr	r3, [r7, #20]
 8007e9c:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8007e9e:	7afb      	ldrb	r3, [r7, #11]
 8007ea0:	f003 030f 	and.w	r3, r3, #15
 8007ea4:	2b00      	cmp	r3, #0
 8007ea6:	d109      	bne.n	8007ebc <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8007ea8:	68fb      	ldr	r3, [r7, #12]
 8007eaa:	6818      	ldr	r0, [r3, #0]
 8007eac:	68fb      	ldr	r3, [r7, #12]
 8007eae:	691b      	ldr	r3, [r3, #16]
 8007eb0:	b2db      	uxtb	r3, r3
 8007eb2:	461a      	mov	r2, r3
 8007eb4:	6979      	ldr	r1, [r7, #20]
 8007eb6:	f009 fe03 	bl	8011ac0 <USB_EP0StartXfer>
 8007eba:	e008      	b.n	8007ece <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8007ebc:	68fb      	ldr	r3, [r7, #12]
 8007ebe:	6818      	ldr	r0, [r3, #0]
 8007ec0:	68fb      	ldr	r3, [r7, #12]
 8007ec2:	691b      	ldr	r3, [r3, #16]
 8007ec4:	b2db      	uxtb	r3, r3
 8007ec6:	461a      	mov	r2, r3
 8007ec8:	6979      	ldr	r1, [r7, #20]
 8007eca:	f009 fbad 	bl	8011628 <USB_EPStartXfer>
  }

  return HAL_OK;
 8007ece:	2300      	movs	r3, #0
}
 8007ed0:	4618      	mov	r0, r3
 8007ed2:	3718      	adds	r7, #24
 8007ed4:	46bd      	mov	sp, r7
 8007ed6:	bd80      	pop	{r7, pc}

08007ed8 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8007ed8:	b480      	push	{r7}
 8007eda:	b083      	sub	sp, #12
 8007edc:	af00      	add	r7, sp, #0
 8007ede:	6078      	str	r0, [r7, #4]
 8007ee0:	460b      	mov	r3, r1
 8007ee2:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8007ee4:	78fb      	ldrb	r3, [r7, #3]
 8007ee6:	f003 020f 	and.w	r2, r3, #15
 8007eea:	6879      	ldr	r1, [r7, #4]
 8007eec:	4613      	mov	r3, r2
 8007eee:	00db      	lsls	r3, r3, #3
 8007ef0:	1a9b      	subs	r3, r3, r2
 8007ef2:	009b      	lsls	r3, r3, #2
 8007ef4:	440b      	add	r3, r1
 8007ef6:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8007efa:	681b      	ldr	r3, [r3, #0]
}
 8007efc:	4618      	mov	r0, r3
 8007efe:	370c      	adds	r7, #12
 8007f00:	46bd      	mov	sp, r7
 8007f02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f06:	4770      	bx	lr

08007f08 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8007f08:	b580      	push	{r7, lr}
 8007f0a:	b086      	sub	sp, #24
 8007f0c:	af00      	add	r7, sp, #0
 8007f0e:	60f8      	str	r0, [r7, #12]
 8007f10:	607a      	str	r2, [r7, #4]
 8007f12:	603b      	str	r3, [r7, #0]
 8007f14:	460b      	mov	r3, r1
 8007f16:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8007f18:	7afb      	ldrb	r3, [r7, #11]
 8007f1a:	f003 020f 	and.w	r2, r3, #15
 8007f1e:	4613      	mov	r3, r2
 8007f20:	00db      	lsls	r3, r3, #3
 8007f22:	1a9b      	subs	r3, r3, r2
 8007f24:	009b      	lsls	r3, r3, #2
 8007f26:	3338      	adds	r3, #56	; 0x38
 8007f28:	68fa      	ldr	r2, [r7, #12]
 8007f2a:	4413      	add	r3, r2
 8007f2c:	3304      	adds	r3, #4
 8007f2e:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8007f30:	697b      	ldr	r3, [r7, #20]
 8007f32:	687a      	ldr	r2, [r7, #4]
 8007f34:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8007f36:	697b      	ldr	r3, [r7, #20]
 8007f38:	683a      	ldr	r2, [r7, #0]
 8007f3a:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8007f3c:	697b      	ldr	r3, [r7, #20]
 8007f3e:	2200      	movs	r2, #0
 8007f40:	619a      	str	r2, [r3, #24]
  ep->is_in = 1U;
 8007f42:	697b      	ldr	r3, [r7, #20]
 8007f44:	2201      	movs	r2, #1
 8007f46:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8007f48:	7afb      	ldrb	r3, [r7, #11]
 8007f4a:	f003 030f 	and.w	r3, r3, #15
 8007f4e:	b2da      	uxtb	r2, r3
 8007f50:	697b      	ldr	r3, [r7, #20]
 8007f52:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8007f54:	68fb      	ldr	r3, [r7, #12]
 8007f56:	691b      	ldr	r3, [r3, #16]
 8007f58:	2b01      	cmp	r3, #1
 8007f5a:	d102      	bne.n	8007f62 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8007f5c:	687a      	ldr	r2, [r7, #4]
 8007f5e:	697b      	ldr	r3, [r7, #20]
 8007f60:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8007f62:	7afb      	ldrb	r3, [r7, #11]
 8007f64:	f003 030f 	and.w	r3, r3, #15
 8007f68:	2b00      	cmp	r3, #0
 8007f6a:	d109      	bne.n	8007f80 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8007f6c:	68fb      	ldr	r3, [r7, #12]
 8007f6e:	6818      	ldr	r0, [r3, #0]
 8007f70:	68fb      	ldr	r3, [r7, #12]
 8007f72:	691b      	ldr	r3, [r3, #16]
 8007f74:	b2db      	uxtb	r3, r3
 8007f76:	461a      	mov	r2, r3
 8007f78:	6979      	ldr	r1, [r7, #20]
 8007f7a:	f009 fda1 	bl	8011ac0 <USB_EP0StartXfer>
 8007f7e:	e008      	b.n	8007f92 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8007f80:	68fb      	ldr	r3, [r7, #12]
 8007f82:	6818      	ldr	r0, [r3, #0]
 8007f84:	68fb      	ldr	r3, [r7, #12]
 8007f86:	691b      	ldr	r3, [r3, #16]
 8007f88:	b2db      	uxtb	r3, r3
 8007f8a:	461a      	mov	r2, r3
 8007f8c:	6979      	ldr	r1, [r7, #20]
 8007f8e:	f009 fb4b 	bl	8011628 <USB_EPStartXfer>
  }

  return HAL_OK;
 8007f92:	2300      	movs	r3, #0
}
 8007f94:	4618      	mov	r0, r3
 8007f96:	3718      	adds	r7, #24
 8007f98:	46bd      	mov	sp, r7
 8007f9a:	bd80      	pop	{r7, pc}

08007f9c <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8007f9c:	b580      	push	{r7, lr}
 8007f9e:	b084      	sub	sp, #16
 8007fa0:	af00      	add	r7, sp, #0
 8007fa2:	6078      	str	r0, [r7, #4]
 8007fa4:	460b      	mov	r3, r1
 8007fa6:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8007fa8:	78fb      	ldrb	r3, [r7, #3]
 8007faa:	f003 020f 	and.w	r2, r3, #15
 8007fae:	687b      	ldr	r3, [r7, #4]
 8007fb0:	685b      	ldr	r3, [r3, #4]
 8007fb2:	429a      	cmp	r2, r3
 8007fb4:	d901      	bls.n	8007fba <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8007fb6:	2301      	movs	r3, #1
 8007fb8:	e050      	b.n	800805c <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8007fba:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8007fbe:	2b00      	cmp	r3, #0
 8007fc0:	da0f      	bge.n	8007fe2 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8007fc2:	78fb      	ldrb	r3, [r7, #3]
 8007fc4:	f003 020f 	and.w	r2, r3, #15
 8007fc8:	4613      	mov	r3, r2
 8007fca:	00db      	lsls	r3, r3, #3
 8007fcc:	1a9b      	subs	r3, r3, r2
 8007fce:	009b      	lsls	r3, r3, #2
 8007fd0:	3338      	adds	r3, #56	; 0x38
 8007fd2:	687a      	ldr	r2, [r7, #4]
 8007fd4:	4413      	add	r3, r2
 8007fd6:	3304      	adds	r3, #4
 8007fd8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8007fda:	68fb      	ldr	r3, [r7, #12]
 8007fdc:	2201      	movs	r2, #1
 8007fde:	705a      	strb	r2, [r3, #1]
 8007fe0:	e00d      	b.n	8007ffe <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8007fe2:	78fa      	ldrb	r2, [r7, #3]
 8007fe4:	4613      	mov	r3, r2
 8007fe6:	00db      	lsls	r3, r3, #3
 8007fe8:	1a9b      	subs	r3, r3, r2
 8007fea:	009b      	lsls	r3, r3, #2
 8007fec:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8007ff0:	687a      	ldr	r2, [r7, #4]
 8007ff2:	4413      	add	r3, r2
 8007ff4:	3304      	adds	r3, #4
 8007ff6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8007ff8:	68fb      	ldr	r3, [r7, #12]
 8007ffa:	2200      	movs	r2, #0
 8007ffc:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8007ffe:	68fb      	ldr	r3, [r7, #12]
 8008000:	2201      	movs	r2, #1
 8008002:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8008004:	78fb      	ldrb	r3, [r7, #3]
 8008006:	f003 030f 	and.w	r3, r3, #15
 800800a:	b2da      	uxtb	r2, r3
 800800c:	68fb      	ldr	r3, [r7, #12]
 800800e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8008010:	687b      	ldr	r3, [r7, #4]
 8008012:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8008016:	2b01      	cmp	r3, #1
 8008018:	d101      	bne.n	800801e <HAL_PCD_EP_SetStall+0x82>
 800801a:	2302      	movs	r3, #2
 800801c:	e01e      	b.n	800805c <HAL_PCD_EP_SetStall+0xc0>
 800801e:	687b      	ldr	r3, [r7, #4]
 8008020:	2201      	movs	r2, #1
 8008022:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8008026:	687b      	ldr	r3, [r7, #4]
 8008028:	681b      	ldr	r3, [r3, #0]
 800802a:	68f9      	ldr	r1, [r7, #12]
 800802c:	4618      	mov	r0, r3
 800802e:	f009 fefd 	bl	8011e2c <USB_EPSetStall>
  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8008032:	78fb      	ldrb	r3, [r7, #3]
 8008034:	f003 030f 	and.w	r3, r3, #15
 8008038:	2b00      	cmp	r3, #0
 800803a:	d10a      	bne.n	8008052 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 800803c:	687b      	ldr	r3, [r7, #4]
 800803e:	6818      	ldr	r0, [r3, #0]
 8008040:	687b      	ldr	r3, [r7, #4]
 8008042:	691b      	ldr	r3, [r3, #16]
 8008044:	b2d9      	uxtb	r1, r3
 8008046:	687b      	ldr	r3, [r7, #4]
 8008048:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800804c:	461a      	mov	r2, r3
 800804e:	f00a f8dd 	bl	801220c <USB_EP0_OutStart>
  }
  __HAL_UNLOCK(hpcd);
 8008052:	687b      	ldr	r3, [r7, #4]
 8008054:	2200      	movs	r2, #0
 8008056:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 800805a:	2300      	movs	r3, #0
}
 800805c:	4618      	mov	r0, r3
 800805e:	3710      	adds	r7, #16
 8008060:	46bd      	mov	sp, r7
 8008062:	bd80      	pop	{r7, pc}

08008064 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8008064:	b580      	push	{r7, lr}
 8008066:	b084      	sub	sp, #16
 8008068:	af00      	add	r7, sp, #0
 800806a:	6078      	str	r0, [r7, #4]
 800806c:	460b      	mov	r3, r1
 800806e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8008070:	78fb      	ldrb	r3, [r7, #3]
 8008072:	f003 020f 	and.w	r2, r3, #15
 8008076:	687b      	ldr	r3, [r7, #4]
 8008078:	685b      	ldr	r3, [r3, #4]
 800807a:	429a      	cmp	r2, r3
 800807c:	d901      	bls.n	8008082 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 800807e:	2301      	movs	r3, #1
 8008080:	e042      	b.n	8008108 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8008082:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8008086:	2b00      	cmp	r3, #0
 8008088:	da0f      	bge.n	80080aa <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800808a:	78fb      	ldrb	r3, [r7, #3]
 800808c:	f003 020f 	and.w	r2, r3, #15
 8008090:	4613      	mov	r3, r2
 8008092:	00db      	lsls	r3, r3, #3
 8008094:	1a9b      	subs	r3, r3, r2
 8008096:	009b      	lsls	r3, r3, #2
 8008098:	3338      	adds	r3, #56	; 0x38
 800809a:	687a      	ldr	r2, [r7, #4]
 800809c:	4413      	add	r3, r2
 800809e:	3304      	adds	r3, #4
 80080a0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80080a2:	68fb      	ldr	r3, [r7, #12]
 80080a4:	2201      	movs	r2, #1
 80080a6:	705a      	strb	r2, [r3, #1]
 80080a8:	e00f      	b.n	80080ca <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80080aa:	78fb      	ldrb	r3, [r7, #3]
 80080ac:	f003 020f 	and.w	r2, r3, #15
 80080b0:	4613      	mov	r3, r2
 80080b2:	00db      	lsls	r3, r3, #3
 80080b4:	1a9b      	subs	r3, r3, r2
 80080b6:	009b      	lsls	r3, r3, #2
 80080b8:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80080bc:	687a      	ldr	r2, [r7, #4]
 80080be:	4413      	add	r3, r2
 80080c0:	3304      	adds	r3, #4
 80080c2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80080c4:	68fb      	ldr	r3, [r7, #12]
 80080c6:	2200      	movs	r2, #0
 80080c8:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 80080ca:	68fb      	ldr	r3, [r7, #12]
 80080cc:	2200      	movs	r2, #0
 80080ce:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80080d0:	78fb      	ldrb	r3, [r7, #3]
 80080d2:	f003 030f 	and.w	r3, r3, #15
 80080d6:	b2da      	uxtb	r2, r3
 80080d8:	68fb      	ldr	r3, [r7, #12]
 80080da:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80080dc:	687b      	ldr	r3, [r7, #4]
 80080de:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80080e2:	2b01      	cmp	r3, #1
 80080e4:	d101      	bne.n	80080ea <HAL_PCD_EP_ClrStall+0x86>
 80080e6:	2302      	movs	r3, #2
 80080e8:	e00e      	b.n	8008108 <HAL_PCD_EP_ClrStall+0xa4>
 80080ea:	687b      	ldr	r3, [r7, #4]
 80080ec:	2201      	movs	r2, #1
 80080ee:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80080f2:	687b      	ldr	r3, [r7, #4]
 80080f4:	681b      	ldr	r3, [r3, #0]
 80080f6:	68f9      	ldr	r1, [r7, #12]
 80080f8:	4618      	mov	r0, r3
 80080fa:	f009 ff05 	bl	8011f08 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 80080fe:	687b      	ldr	r3, [r7, #4]
 8008100:	2200      	movs	r2, #0
 8008102:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8008106:	2300      	movs	r3, #0
}
 8008108:	4618      	mov	r0, r3
 800810a:	3710      	adds	r7, #16
 800810c:	46bd      	mov	sp, r7
 800810e:	bd80      	pop	{r7, pc}

08008110 <HAL_PCD_EP_Flush>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Flush(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8008110:	b580      	push	{r7, lr}
 8008112:	b082      	sub	sp, #8
 8008114:	af00      	add	r7, sp, #0
 8008116:	6078      	str	r0, [r7, #4]
 8008118:	460b      	mov	r3, r1
 800811a:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 800811c:	687b      	ldr	r3, [r7, #4]
 800811e:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8008122:	2b01      	cmp	r3, #1
 8008124:	d101      	bne.n	800812a <HAL_PCD_EP_Flush+0x1a>
 8008126:	2302      	movs	r3, #2
 8008128:	e01b      	b.n	8008162 <HAL_PCD_EP_Flush+0x52>
 800812a:	687b      	ldr	r3, [r7, #4]
 800812c:	2201      	movs	r2, #1
 800812e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  if ((ep_addr & 0x80U) == 0x80U)
 8008132:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8008136:	2b00      	cmp	r3, #0
 8008138:	da09      	bge.n	800814e <HAL_PCD_EP_Flush+0x3e>
  {
    (void)USB_FlushTxFifo(hpcd->Instance, (uint32_t)ep_addr & EP_ADDR_MSK);
 800813a:	687b      	ldr	r3, [r7, #4]
 800813c:	681a      	ldr	r2, [r3, #0]
 800813e:	78fb      	ldrb	r3, [r7, #3]
 8008140:	f003 030f 	and.w	r3, r3, #15
 8008144:	4619      	mov	r1, r3
 8008146:	4610      	mov	r0, r2
 8008148:	f009 f884 	bl	8011254 <USB_FlushTxFifo>
 800814c:	e004      	b.n	8008158 <HAL_PCD_EP_Flush+0x48>
  }
  else
  {
    (void)USB_FlushRxFifo(hpcd->Instance);
 800814e:	687b      	ldr	r3, [r7, #4]
 8008150:	681b      	ldr	r3, [r3, #0]
 8008152:	4618      	mov	r0, r3
 8008154:	f009 f8a4 	bl	80112a0 <USB_FlushRxFifo>
  }

  __HAL_UNLOCK(hpcd);
 8008158:	687b      	ldr	r3, [r7, #4]
 800815a:	2200      	movs	r2, #0
 800815c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8008160:	2300      	movs	r3, #0
}
 8008162:	4618      	mov	r0, r3
 8008164:	3708      	adds	r7, #8
 8008166:	46bd      	mov	sp, r7
 8008168:	bd80      	pop	{r7, pc}

0800816a <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800816a:	b580      	push	{r7, lr}
 800816c:	b08a      	sub	sp, #40	; 0x28
 800816e:	af02      	add	r7, sp, #8
 8008170:	6078      	str	r0, [r7, #4]
 8008172:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8008174:	687b      	ldr	r3, [r7, #4]
 8008176:	681b      	ldr	r3, [r3, #0]
 8008178:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800817a:	697b      	ldr	r3, [r7, #20]
 800817c:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 800817e:	683a      	ldr	r2, [r7, #0]
 8008180:	4613      	mov	r3, r2
 8008182:	00db      	lsls	r3, r3, #3
 8008184:	1a9b      	subs	r3, r3, r2
 8008186:	009b      	lsls	r3, r3, #2
 8008188:	3338      	adds	r3, #56	; 0x38
 800818a:	687a      	ldr	r2, [r7, #4]
 800818c:	4413      	add	r3, r2
 800818e:	3304      	adds	r3, #4
 8008190:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8008192:	68fb      	ldr	r3, [r7, #12]
 8008194:	699a      	ldr	r2, [r3, #24]
 8008196:	68fb      	ldr	r3, [r7, #12]
 8008198:	695b      	ldr	r3, [r3, #20]
 800819a:	429a      	cmp	r2, r3
 800819c:	d901      	bls.n	80081a2 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 800819e:	2301      	movs	r3, #1
 80081a0:	e06c      	b.n	800827c <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 80081a2:	68fb      	ldr	r3, [r7, #12]
 80081a4:	695a      	ldr	r2, [r3, #20]
 80081a6:	68fb      	ldr	r3, [r7, #12]
 80081a8:	699b      	ldr	r3, [r3, #24]
 80081aa:	1ad3      	subs	r3, r2, r3
 80081ac:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 80081ae:	68fb      	ldr	r3, [r7, #12]
 80081b0:	689b      	ldr	r3, [r3, #8]
 80081b2:	69fa      	ldr	r2, [r7, #28]
 80081b4:	429a      	cmp	r2, r3
 80081b6:	d902      	bls.n	80081be <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 80081b8:	68fb      	ldr	r3, [r7, #12]
 80081ba:	689b      	ldr	r3, [r3, #8]
 80081bc:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 80081be:	69fb      	ldr	r3, [r7, #28]
 80081c0:	3303      	adds	r3, #3
 80081c2:	089b      	lsrs	r3, r3, #2
 80081c4:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80081c6:	e02b      	b.n	8008220 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 80081c8:	68fb      	ldr	r3, [r7, #12]
 80081ca:	695a      	ldr	r2, [r3, #20]
 80081cc:	68fb      	ldr	r3, [r7, #12]
 80081ce:	699b      	ldr	r3, [r3, #24]
 80081d0:	1ad3      	subs	r3, r2, r3
 80081d2:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 80081d4:	68fb      	ldr	r3, [r7, #12]
 80081d6:	689b      	ldr	r3, [r3, #8]
 80081d8:	69fa      	ldr	r2, [r7, #28]
 80081da:	429a      	cmp	r2, r3
 80081dc:	d902      	bls.n	80081e4 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 80081de:	68fb      	ldr	r3, [r7, #12]
 80081e0:	689b      	ldr	r3, [r3, #8]
 80081e2:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 80081e4:	69fb      	ldr	r3, [r7, #28]
 80081e6:	3303      	adds	r3, #3
 80081e8:	089b      	lsrs	r3, r3, #2
 80081ea:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80081ec:	68fb      	ldr	r3, [r7, #12]
 80081ee:	68d9      	ldr	r1, [r3, #12]
 80081f0:	683b      	ldr	r3, [r7, #0]
 80081f2:	b2da      	uxtb	r2, r3
 80081f4:	69fb      	ldr	r3, [r7, #28]
 80081f6:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 80081f8:	687b      	ldr	r3, [r7, #4]
 80081fa:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80081fc:	b2db      	uxtb	r3, r3
 80081fe:	9300      	str	r3, [sp, #0]
 8008200:	4603      	mov	r3, r0
 8008202:	6978      	ldr	r0, [r7, #20]
 8008204:	f009 fdb4 	bl	8011d70 <USB_WritePacket>

    ep->xfer_buff  += len;
 8008208:	68fb      	ldr	r3, [r7, #12]
 800820a:	68da      	ldr	r2, [r3, #12]
 800820c:	69fb      	ldr	r3, [r7, #28]
 800820e:	441a      	add	r2, r3
 8008210:	68fb      	ldr	r3, [r7, #12]
 8008212:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8008214:	68fb      	ldr	r3, [r7, #12]
 8008216:	699a      	ldr	r2, [r3, #24]
 8008218:	69fb      	ldr	r3, [r7, #28]
 800821a:	441a      	add	r2, r3
 800821c:	68fb      	ldr	r3, [r7, #12]
 800821e:	619a      	str	r2, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8008220:	683b      	ldr	r3, [r7, #0]
 8008222:	015a      	lsls	r2, r3, #5
 8008224:	693b      	ldr	r3, [r7, #16]
 8008226:	4413      	add	r3, r2
 8008228:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800822c:	699b      	ldr	r3, [r3, #24]
 800822e:	b29b      	uxth	r3, r3
 8008230:	69ba      	ldr	r2, [r7, #24]
 8008232:	429a      	cmp	r2, r3
 8008234:	d809      	bhi.n	800824a <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8008236:	68fb      	ldr	r3, [r7, #12]
 8008238:	699a      	ldr	r2, [r3, #24]
 800823a:	68fb      	ldr	r3, [r7, #12]
 800823c:	695b      	ldr	r3, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800823e:	429a      	cmp	r2, r3
 8008240:	d203      	bcs.n	800824a <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8008242:	68fb      	ldr	r3, [r7, #12]
 8008244:	695b      	ldr	r3, [r3, #20]
 8008246:	2b00      	cmp	r3, #0
 8008248:	d1be      	bne.n	80081c8 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 800824a:	68fb      	ldr	r3, [r7, #12]
 800824c:	695a      	ldr	r2, [r3, #20]
 800824e:	68fb      	ldr	r3, [r7, #12]
 8008250:	699b      	ldr	r3, [r3, #24]
 8008252:	429a      	cmp	r2, r3
 8008254:	d811      	bhi.n	800827a <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8008256:	683b      	ldr	r3, [r7, #0]
 8008258:	f003 030f 	and.w	r3, r3, #15
 800825c:	2201      	movs	r2, #1
 800825e:	fa02 f303 	lsl.w	r3, r2, r3
 8008262:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8008264:	693b      	ldr	r3, [r7, #16]
 8008266:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800826a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800826c:	68bb      	ldr	r3, [r7, #8]
 800826e:	43db      	mvns	r3, r3
 8008270:	6939      	ldr	r1, [r7, #16]
 8008272:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008276:	4013      	ands	r3, r2
 8008278:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 800827a:	2300      	movs	r3, #0
}
 800827c:	4618      	mov	r0, r3
 800827e:	3720      	adds	r7, #32
 8008280:	46bd      	mov	sp, r7
 8008282:	bd80      	pop	{r7, pc}

08008284 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8008284:	b580      	push	{r7, lr}
 8008286:	b086      	sub	sp, #24
 8008288:	af00      	add	r7, sp, #0
 800828a:	6078      	str	r0, [r7, #4]
 800828c:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800828e:	687b      	ldr	r3, [r7, #4]
 8008290:	681b      	ldr	r3, [r3, #0]
 8008292:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008294:	697b      	ldr	r3, [r7, #20]
 8008296:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8008298:	697b      	ldr	r3, [r7, #20]
 800829a:	333c      	adds	r3, #60	; 0x3c
 800829c:	3304      	adds	r3, #4
 800829e:	681b      	ldr	r3, [r3, #0]
 80082a0:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80082a2:	683b      	ldr	r3, [r7, #0]
 80082a4:	015a      	lsls	r2, r3, #5
 80082a6:	693b      	ldr	r3, [r7, #16]
 80082a8:	4413      	add	r3, r2
 80082aa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80082ae:	689b      	ldr	r3, [r3, #8]
 80082b0:	60bb      	str	r3, [r7, #8]

  if (hpcd->Init.dma_enable == 1U)
 80082b2:	687b      	ldr	r3, [r7, #4]
 80082b4:	691b      	ldr	r3, [r3, #16]
 80082b6:	2b01      	cmp	r3, #1
 80082b8:	f040 80a0 	bne.w	80083fc <PCD_EP_OutXfrComplete_int+0x178>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 80082bc:	68bb      	ldr	r3, [r7, #8]
 80082be:	f003 0308 	and.w	r3, r3, #8
 80082c2:	2b00      	cmp	r3, #0
 80082c4:	d015      	beq.n	80082f2 <PCD_EP_OutXfrComplete_int+0x6e>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80082c6:	68fb      	ldr	r3, [r7, #12]
 80082c8:	4a72      	ldr	r2, [pc, #456]	; (8008494 <PCD_EP_OutXfrComplete_int+0x210>)
 80082ca:	4293      	cmp	r3, r2
 80082cc:	f240 80dd 	bls.w	800848a <PCD_EP_OutXfrComplete_int+0x206>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80082d0:	68bb      	ldr	r3, [r7, #8]
 80082d2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80082d6:	2b00      	cmp	r3, #0
 80082d8:	f000 80d7 	beq.w	800848a <PCD_EP_OutXfrComplete_int+0x206>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80082dc:	683b      	ldr	r3, [r7, #0]
 80082de:	015a      	lsls	r2, r3, #5
 80082e0:	693b      	ldr	r3, [r7, #16]
 80082e2:	4413      	add	r3, r2
 80082e4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80082e8:	461a      	mov	r2, r3
 80082ea:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80082ee:	6093      	str	r3, [r2, #8]
 80082f0:	e0cb      	b.n	800848a <PCD_EP_OutXfrComplete_int+0x206>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 80082f2:	68bb      	ldr	r3, [r7, #8]
 80082f4:	f003 0320 	and.w	r3, r3, #32
 80082f8:	2b00      	cmp	r3, #0
 80082fa:	d009      	beq.n	8008310 <PCD_EP_OutXfrComplete_int+0x8c>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80082fc:	683b      	ldr	r3, [r7, #0]
 80082fe:	015a      	lsls	r2, r3, #5
 8008300:	693b      	ldr	r3, [r7, #16]
 8008302:	4413      	add	r3, r2
 8008304:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008308:	461a      	mov	r2, r3
 800830a:	2320      	movs	r3, #32
 800830c:	6093      	str	r3, [r2, #8]
 800830e:	e0bc      	b.n	800848a <PCD_EP_OutXfrComplete_int+0x206>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8008310:	68bb      	ldr	r3, [r7, #8]
 8008312:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8008316:	2b00      	cmp	r3, #0
 8008318:	f040 80b7 	bne.w	800848a <PCD_EP_OutXfrComplete_int+0x206>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800831c:	68fb      	ldr	r3, [r7, #12]
 800831e:	4a5d      	ldr	r2, [pc, #372]	; (8008494 <PCD_EP_OutXfrComplete_int+0x210>)
 8008320:	4293      	cmp	r3, r2
 8008322:	d90f      	bls.n	8008344 <PCD_EP_OutXfrComplete_int+0xc0>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8008324:	68bb      	ldr	r3, [r7, #8]
 8008326:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800832a:	2b00      	cmp	r3, #0
 800832c:	d00a      	beq.n	8008344 <PCD_EP_OutXfrComplete_int+0xc0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800832e:	683b      	ldr	r3, [r7, #0]
 8008330:	015a      	lsls	r2, r3, #5
 8008332:	693b      	ldr	r3, [r7, #16]
 8008334:	4413      	add	r3, r2
 8008336:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800833a:	461a      	mov	r2, r3
 800833c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008340:	6093      	str	r3, [r2, #8]
 8008342:	e0a2      	b.n	800848a <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        /* out data packet received over EP0 */
        hpcd->OUT_ep[epnum].xfer_count =
          hpcd->OUT_ep[epnum].maxpacket -
 8008344:	6879      	ldr	r1, [r7, #4]
 8008346:	683a      	ldr	r2, [r7, #0]
 8008348:	4613      	mov	r3, r2
 800834a:	00db      	lsls	r3, r3, #3
 800834c:	1a9b      	subs	r3, r3, r2
 800834e:	009b      	lsls	r3, r3, #2
 8008350:	440b      	add	r3, r1
 8008352:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8008356:	681a      	ldr	r2, [r3, #0]
          (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8008358:	683b      	ldr	r3, [r7, #0]
 800835a:	0159      	lsls	r1, r3, #5
 800835c:	693b      	ldr	r3, [r7, #16]
 800835e:	440b      	add	r3, r1
 8008360:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008364:	691b      	ldr	r3, [r3, #16]
 8008366:	f3c3 0312 	ubfx	r3, r3, #0, #19
          hpcd->OUT_ep[epnum].maxpacket -
 800836a:	1ad1      	subs	r1, r2, r3
        hpcd->OUT_ep[epnum].xfer_count =
 800836c:	6878      	ldr	r0, [r7, #4]
 800836e:	683a      	ldr	r2, [r7, #0]
 8008370:	4613      	mov	r3, r2
 8008372:	00db      	lsls	r3, r3, #3
 8008374:	1a9b      	subs	r3, r3, r2
 8008376:	009b      	lsls	r3, r3, #2
 8008378:	4403      	add	r3, r0
 800837a:	f503 7305 	add.w	r3, r3, #532	; 0x214
 800837e:	6019      	str	r1, [r3, #0]

        hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;
 8008380:	6879      	ldr	r1, [r7, #4]
 8008382:	683a      	ldr	r2, [r7, #0]
 8008384:	4613      	mov	r3, r2
 8008386:	00db      	lsls	r3, r3, #3
 8008388:	1a9b      	subs	r3, r3, r2
 800838a:	009b      	lsls	r3, r3, #2
 800838c:	440b      	add	r3, r1
 800838e:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8008392:	6819      	ldr	r1, [r3, #0]
 8008394:	6878      	ldr	r0, [r7, #4]
 8008396:	683a      	ldr	r2, [r7, #0]
 8008398:	4613      	mov	r3, r2
 800839a:	00db      	lsls	r3, r3, #3
 800839c:	1a9b      	subs	r3, r3, r2
 800839e:	009b      	lsls	r3, r3, #2
 80083a0:	4403      	add	r3, r0
 80083a2:	f503 7301 	add.w	r3, r3, #516	; 0x204
 80083a6:	681b      	ldr	r3, [r3, #0]
 80083a8:	4419      	add	r1, r3
 80083aa:	6878      	ldr	r0, [r7, #4]
 80083ac:	683a      	ldr	r2, [r7, #0]
 80083ae:	4613      	mov	r3, r2
 80083b0:	00db      	lsls	r3, r3, #3
 80083b2:	1a9b      	subs	r3, r3, r2
 80083b4:	009b      	lsls	r3, r3, #2
 80083b6:	4403      	add	r3, r0
 80083b8:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80083bc:	6019      	str	r1, [r3, #0]

        if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 80083be:	683b      	ldr	r3, [r7, #0]
 80083c0:	2b00      	cmp	r3, #0
 80083c2:	d114      	bne.n	80083ee <PCD_EP_OutXfrComplete_int+0x16a>
 80083c4:	6879      	ldr	r1, [r7, #4]
 80083c6:	683a      	ldr	r2, [r7, #0]
 80083c8:	4613      	mov	r3, r2
 80083ca:	00db      	lsls	r3, r3, #3
 80083cc:	1a9b      	subs	r3, r3, r2
 80083ce:	009b      	lsls	r3, r3, #2
 80083d0:	440b      	add	r3, r1
 80083d2:	f503 7304 	add.w	r3, r3, #528	; 0x210
 80083d6:	681b      	ldr	r3, [r3, #0]
 80083d8:	2b00      	cmp	r3, #0
 80083da:	d108      	bne.n	80083ee <PCD_EP_OutXfrComplete_int+0x16a>
        {
          /* this is ZLP, so prepare EP0 for next setup */
          (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80083dc:	687b      	ldr	r3, [r7, #4]
 80083de:	6818      	ldr	r0, [r3, #0]
 80083e0:	687b      	ldr	r3, [r7, #4]
 80083e2:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80083e6:	461a      	mov	r2, r3
 80083e8:	2101      	movs	r1, #1
 80083ea:	f009 ff0f 	bl	801220c <USB_EP0_OutStart>
        }
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80083ee:	683b      	ldr	r3, [r7, #0]
 80083f0:	b2db      	uxtb	r3, r3
 80083f2:	4619      	mov	r1, r3
 80083f4:	6878      	ldr	r0, [r7, #4]
 80083f6:	f00f fde1 	bl	8017fbc <HAL_PCD_DataOutStageCallback>
 80083fa:	e046      	b.n	800848a <PCD_EP_OutXfrComplete_int+0x206>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 80083fc:	68fb      	ldr	r3, [r7, #12]
 80083fe:	4a26      	ldr	r2, [pc, #152]	; (8008498 <PCD_EP_OutXfrComplete_int+0x214>)
 8008400:	4293      	cmp	r3, r2
 8008402:	d124      	bne.n	800844e <PCD_EP_OutXfrComplete_int+0x1ca>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8008404:	68bb      	ldr	r3, [r7, #8]
 8008406:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800840a:	2b00      	cmp	r3, #0
 800840c:	d00a      	beq.n	8008424 <PCD_EP_OutXfrComplete_int+0x1a0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800840e:	683b      	ldr	r3, [r7, #0]
 8008410:	015a      	lsls	r2, r3, #5
 8008412:	693b      	ldr	r3, [r7, #16]
 8008414:	4413      	add	r3, r2
 8008416:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800841a:	461a      	mov	r2, r3
 800841c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008420:	6093      	str	r3, [r2, #8]
 8008422:	e032      	b.n	800848a <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8008424:	68bb      	ldr	r3, [r7, #8]
 8008426:	f003 0320 	and.w	r3, r3, #32
 800842a:	2b00      	cmp	r3, #0
 800842c:	d008      	beq.n	8008440 <PCD_EP_OutXfrComplete_int+0x1bc>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800842e:	683b      	ldr	r3, [r7, #0]
 8008430:	015a      	lsls	r2, r3, #5
 8008432:	693b      	ldr	r3, [r7, #16]
 8008434:	4413      	add	r3, r2
 8008436:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800843a:	461a      	mov	r2, r3
 800843c:	2320      	movs	r3, #32
 800843e:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8008440:	683b      	ldr	r3, [r7, #0]
 8008442:	b2db      	uxtb	r3, r3
 8008444:	4619      	mov	r1, r3
 8008446:	6878      	ldr	r0, [r7, #4]
 8008448:	f00f fdb8 	bl	8017fbc <HAL_PCD_DataOutStageCallback>
 800844c:	e01d      	b.n	800848a <PCD_EP_OutXfrComplete_int+0x206>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 800844e:	683b      	ldr	r3, [r7, #0]
 8008450:	2b00      	cmp	r3, #0
 8008452:	d114      	bne.n	800847e <PCD_EP_OutXfrComplete_int+0x1fa>
 8008454:	6879      	ldr	r1, [r7, #4]
 8008456:	683a      	ldr	r2, [r7, #0]
 8008458:	4613      	mov	r3, r2
 800845a:	00db      	lsls	r3, r3, #3
 800845c:	1a9b      	subs	r3, r3, r2
 800845e:	009b      	lsls	r3, r3, #2
 8008460:	440b      	add	r3, r1
 8008462:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8008466:	681b      	ldr	r3, [r3, #0]
 8008468:	2b00      	cmp	r3, #0
 800846a:	d108      	bne.n	800847e <PCD_EP_OutXfrComplete_int+0x1fa>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 800846c:	687b      	ldr	r3, [r7, #4]
 800846e:	6818      	ldr	r0, [r3, #0]
 8008470:	687b      	ldr	r3, [r7, #4]
 8008472:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8008476:	461a      	mov	r2, r3
 8008478:	2100      	movs	r1, #0
 800847a:	f009 fec7 	bl	801220c <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800847e:	683b      	ldr	r3, [r7, #0]
 8008480:	b2db      	uxtb	r3, r3
 8008482:	4619      	mov	r1, r3
 8008484:	6878      	ldr	r0, [r7, #4]
 8008486:	f00f fd99 	bl	8017fbc <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 800848a:	2300      	movs	r3, #0
}
 800848c:	4618      	mov	r0, r3
 800848e:	3718      	adds	r7, #24
 8008490:	46bd      	mov	sp, r7
 8008492:	bd80      	pop	{r7, pc}
 8008494:	4f54300a 	.word	0x4f54300a
 8008498:	4f54310a 	.word	0x4f54310a

0800849c <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800849c:	b580      	push	{r7, lr}
 800849e:	b086      	sub	sp, #24
 80084a0:	af00      	add	r7, sp, #0
 80084a2:	6078      	str	r0, [r7, #4]
 80084a4:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80084a6:	687b      	ldr	r3, [r7, #4]
 80084a8:	681b      	ldr	r3, [r3, #0]
 80084aa:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80084ac:	697b      	ldr	r3, [r7, #20]
 80084ae:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80084b0:	697b      	ldr	r3, [r7, #20]
 80084b2:	333c      	adds	r3, #60	; 0x3c
 80084b4:	3304      	adds	r3, #4
 80084b6:	681b      	ldr	r3, [r3, #0]
 80084b8:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80084ba:	683b      	ldr	r3, [r7, #0]
 80084bc:	015a      	lsls	r2, r3, #5
 80084be:	693b      	ldr	r3, [r7, #16]
 80084c0:	4413      	add	r3, r2
 80084c2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80084c6:	689b      	ldr	r3, [r3, #8]
 80084c8:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80084ca:	68fb      	ldr	r3, [r7, #12]
 80084cc:	4a15      	ldr	r2, [pc, #84]	; (8008524 <PCD_EP_OutSetupPacket_int+0x88>)
 80084ce:	4293      	cmp	r3, r2
 80084d0:	d90e      	bls.n	80084f0 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80084d2:	68bb      	ldr	r3, [r7, #8]
 80084d4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80084d8:	2b00      	cmp	r3, #0
 80084da:	d009      	beq.n	80084f0 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80084dc:	683b      	ldr	r3, [r7, #0]
 80084de:	015a      	lsls	r2, r3, #5
 80084e0:	693b      	ldr	r3, [r7, #16]
 80084e2:	4413      	add	r3, r2
 80084e4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80084e8:	461a      	mov	r2, r3
 80084ea:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80084ee:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 80084f0:	6878      	ldr	r0, [r7, #4]
 80084f2:	f00f fd51 	bl	8017f98 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 80084f6:	68fb      	ldr	r3, [r7, #12]
 80084f8:	4a0a      	ldr	r2, [pc, #40]	; (8008524 <PCD_EP_OutSetupPacket_int+0x88>)
 80084fa:	4293      	cmp	r3, r2
 80084fc:	d90c      	bls.n	8008518 <PCD_EP_OutSetupPacket_int+0x7c>
 80084fe:	687b      	ldr	r3, [r7, #4]
 8008500:	691b      	ldr	r3, [r3, #16]
 8008502:	2b01      	cmp	r3, #1
 8008504:	d108      	bne.n	8008518 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8008506:	687b      	ldr	r3, [r7, #4]
 8008508:	6818      	ldr	r0, [r3, #0]
 800850a:	687b      	ldr	r3, [r7, #4]
 800850c:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8008510:	461a      	mov	r2, r3
 8008512:	2101      	movs	r1, #1
 8008514:	f009 fe7a 	bl	801220c <USB_EP0_OutStart>
  }

  return HAL_OK;
 8008518:	2300      	movs	r3, #0
}
 800851a:	4618      	mov	r0, r3
 800851c:	3718      	adds	r7, #24
 800851e:	46bd      	mov	sp, r7
 8008520:	bd80      	pop	{r7, pc}
 8008522:	bf00      	nop
 8008524:	4f54300a 	.word	0x4f54300a

08008528 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8008528:	b480      	push	{r7}
 800852a:	b085      	sub	sp, #20
 800852c:	af00      	add	r7, sp, #0
 800852e:	6078      	str	r0, [r7, #4]
 8008530:	460b      	mov	r3, r1
 8008532:	70fb      	strb	r3, [r7, #3]
 8008534:	4613      	mov	r3, r2
 8008536:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8008538:	687b      	ldr	r3, [r7, #4]
 800853a:	681b      	ldr	r3, [r3, #0]
 800853c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800853e:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8008540:	78fb      	ldrb	r3, [r7, #3]
 8008542:	2b00      	cmp	r3, #0
 8008544:	d107      	bne.n	8008556 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8008546:	883b      	ldrh	r3, [r7, #0]
 8008548:	0419      	lsls	r1, r3, #16
 800854a:	687b      	ldr	r3, [r7, #4]
 800854c:	681b      	ldr	r3, [r3, #0]
 800854e:	68ba      	ldr	r2, [r7, #8]
 8008550:	430a      	orrs	r2, r1
 8008552:	629a      	str	r2, [r3, #40]	; 0x28
 8008554:	e028      	b.n	80085a8 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8008556:	687b      	ldr	r3, [r7, #4]
 8008558:	681b      	ldr	r3, [r3, #0]
 800855a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800855c:	0c1b      	lsrs	r3, r3, #16
 800855e:	68ba      	ldr	r2, [r7, #8]
 8008560:	4413      	add	r3, r2
 8008562:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8008564:	2300      	movs	r3, #0
 8008566:	73fb      	strb	r3, [r7, #15]
 8008568:	e00d      	b.n	8008586 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 800856a:	687b      	ldr	r3, [r7, #4]
 800856c:	681a      	ldr	r2, [r3, #0]
 800856e:	7bfb      	ldrb	r3, [r7, #15]
 8008570:	3340      	adds	r3, #64	; 0x40
 8008572:	009b      	lsls	r3, r3, #2
 8008574:	4413      	add	r3, r2
 8008576:	685b      	ldr	r3, [r3, #4]
 8008578:	0c1b      	lsrs	r3, r3, #16
 800857a:	68ba      	ldr	r2, [r7, #8]
 800857c:	4413      	add	r3, r2
 800857e:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8008580:	7bfb      	ldrb	r3, [r7, #15]
 8008582:	3301      	adds	r3, #1
 8008584:	73fb      	strb	r3, [r7, #15]
 8008586:	7bfa      	ldrb	r2, [r7, #15]
 8008588:	78fb      	ldrb	r3, [r7, #3]
 800858a:	3b01      	subs	r3, #1
 800858c:	429a      	cmp	r2, r3
 800858e:	d3ec      	bcc.n	800856a <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8008590:	883b      	ldrh	r3, [r7, #0]
 8008592:	0418      	lsls	r0, r3, #16
 8008594:	687b      	ldr	r3, [r7, #4]
 8008596:	6819      	ldr	r1, [r3, #0]
 8008598:	78fb      	ldrb	r3, [r7, #3]
 800859a:	3b01      	subs	r3, #1
 800859c:	68ba      	ldr	r2, [r7, #8]
 800859e:	4302      	orrs	r2, r0
 80085a0:	3340      	adds	r3, #64	; 0x40
 80085a2:	009b      	lsls	r3, r3, #2
 80085a4:	440b      	add	r3, r1
 80085a6:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 80085a8:	2300      	movs	r3, #0
}
 80085aa:	4618      	mov	r0, r3
 80085ac:	3714      	adds	r7, #20
 80085ae:	46bd      	mov	sp, r7
 80085b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085b4:	4770      	bx	lr

080085b6 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 80085b6:	b480      	push	{r7}
 80085b8:	b083      	sub	sp, #12
 80085ba:	af00      	add	r7, sp, #0
 80085bc:	6078      	str	r0, [r7, #4]
 80085be:	460b      	mov	r3, r1
 80085c0:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 80085c2:	687b      	ldr	r3, [r7, #4]
 80085c4:	681b      	ldr	r3, [r3, #0]
 80085c6:	887a      	ldrh	r2, [r7, #2]
 80085c8:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 80085ca:	2300      	movs	r3, #0
}
 80085cc:	4618      	mov	r0, r3
 80085ce:	370c      	adds	r7, #12
 80085d0:	46bd      	mov	sp, r7
 80085d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085d6:	4770      	bx	lr

080085d8 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 80085d8:	b480      	push	{r7}
 80085da:	b085      	sub	sp, #20
 80085dc:	af00      	add	r7, sp, #0
 80085de:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80085e0:	687b      	ldr	r3, [r7, #4]
 80085e2:	681b      	ldr	r3, [r3, #0]
 80085e4:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 80085e6:	687b      	ldr	r3, [r7, #4]
 80085e8:	2201      	movs	r2, #1
 80085ea:	f8c3 23fc 	str.w	r2, [r3, #1020]	; 0x3fc
  hpcd->LPM_State = LPM_L0;
 80085ee:	687b      	ldr	r3, [r7, #4]
 80085f0:	2200      	movs	r2, #0
 80085f2:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 80085f6:	68fb      	ldr	r3, [r7, #12]
 80085f8:	699b      	ldr	r3, [r3, #24]
 80085fa:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80085fe:	68fb      	ldr	r3, [r7, #12]
 8008600:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8008602:	68fb      	ldr	r3, [r7, #12]
 8008604:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8008606:	4b05      	ldr	r3, [pc, #20]	; (800861c <HAL_PCDEx_ActivateLPM+0x44>)
 8008608:	4313      	orrs	r3, r2
 800860a:	68fa      	ldr	r2, [r7, #12]
 800860c:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 800860e:	2300      	movs	r3, #0
}
 8008610:	4618      	mov	r0, r3
 8008612:	3714      	adds	r7, #20
 8008614:	46bd      	mov	sp, r7
 8008616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800861a:	4770      	bx	lr
 800861c:	10000003 	.word	0x10000003

08008620 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8008620:	b480      	push	{r7}
 8008622:	b083      	sub	sp, #12
 8008624:	af00      	add	r7, sp, #0
 8008626:	6078      	str	r0, [r7, #4]
 8008628:	460b      	mov	r3, r1
 800862a:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 800862c:	bf00      	nop
 800862e:	370c      	adds	r7, #12
 8008630:	46bd      	mov	sp, r7
 8008632:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008636:	4770      	bx	lr

08008638 <HAL_PWR_EnableBkUpAccess>:
  * @note   If the HSE divided by 2, 3, ..31 is used as the RTC clock, the
  *         Backup Domain Access should be kept enabled.
  * @retval None.
  */
void HAL_PWR_EnableBkUpAccess (void)
{
 8008638:	b480      	push	{r7}
 800863a:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT (PWR->CR1, PWR_CR1_DBP);
 800863c:	4b05      	ldr	r3, [pc, #20]	; (8008654 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800863e:	681b      	ldr	r3, [r3, #0]
 8008640:	4a04      	ldr	r2, [pc, #16]	; (8008654 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8008642:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008646:	6013      	str	r3, [r2, #0]
}
 8008648:	bf00      	nop
 800864a:	46bd      	mov	sp, r7
 800864c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008650:	4770      	bx	lr
 8008652:	bf00      	nop
 8008654:	58024800 	.word	0x58024800

08008658 <HAL_PWR_ConfigPVD>:
  *         driver. All combination are allowed: wake up only Cortex-M7, wake up
  *         only Cortex-M4 or wake up Cortex-M7 and Cortex-M4.
  * @retval None.
  */
void HAL_PWR_ConfigPVD (PWR_PVDTypeDef *sConfigPVD)
{
 8008658:	b480      	push	{r7}
 800865a:	b083      	sub	sp, #12
 800865c:	af00      	add	r7, sp, #0
 800865e:	6078      	str	r0, [r7, #4]
  /* Check the PVD configuration parameter */
  if (sConfigPVD == NULL)
 8008660:	687b      	ldr	r3, [r7, #4]
 8008662:	2b00      	cmp	r3, #0
 8008664:	d069      	beq.n	800873a <HAL_PWR_ConfigPVD+0xe2>
  /* Check the parameters */
  assert_param (IS_PWR_PVD_LEVEL (sConfigPVD->PVDLevel));
  assert_param (IS_PWR_PVD_MODE (sConfigPVD->Mode));

  /* Set PLS[7:5] bits according to PVDLevel value */
  MODIFY_REG (PWR->CR1, PWR_CR1_PLS, sConfigPVD->PVDLevel);
 8008666:	4b38      	ldr	r3, [pc, #224]	; (8008748 <HAL_PWR_ConfigPVD+0xf0>)
 8008668:	681b      	ldr	r3, [r3, #0]
 800866a:	f023 02e0 	bic.w	r2, r3, #224	; 0xe0
 800866e:	687b      	ldr	r3, [r7, #4]
 8008670:	681b      	ldr	r3, [r3, #0]
 8008672:	4935      	ldr	r1, [pc, #212]	; (8008748 <HAL_PWR_ConfigPVD+0xf0>)
 8008674:	4313      	orrs	r3, r2
 8008676:	600b      	str	r3, [r1, #0]

  /* Clear previous config */
#if !defined (DUAL_CORE)
  __HAL_PWR_PVD_EXTI_DISABLE_EVENT ();
 8008678:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800867c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008680:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8008684:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008688:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
  __HAL_PWR_PVD_EXTI_DISABLE_IT ();
 800868c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008690:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008694:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8008698:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800869c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
#endif /* !defined (DUAL_CORE) */

  __HAL_PWR_PVD_EXTI_DISABLE_RISING_EDGE ();
 80086a0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80086a4:	681b      	ldr	r3, [r3, #0]
 80086a6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80086aa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80086ae:	6013      	str	r3, [r2, #0]
  __HAL_PWR_PVD_EXTI_DISABLE_FALLING_EDGE ();
 80086b0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80086b4:	685b      	ldr	r3, [r3, #4]
 80086b6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80086ba:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80086be:	6053      	str	r3, [r2, #4]

#if !defined (DUAL_CORE)
  /* Interrupt mode configuration */
  if ((sConfigPVD->Mode & PVD_MODE_IT) == PVD_MODE_IT)
 80086c0:	687b      	ldr	r3, [r7, #4]
 80086c2:	685b      	ldr	r3, [r3, #4]
 80086c4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80086c8:	2b00      	cmp	r3, #0
 80086ca:	d009      	beq.n	80086e0 <HAL_PWR_ConfigPVD+0x88>
  {
    __HAL_PWR_PVD_EXTI_ENABLE_IT ();
 80086cc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80086d0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80086d4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80086d8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80086dc:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
  }

  /* Event mode configuration */
  if ((sConfigPVD->Mode & PVD_MODE_EVT) == PVD_MODE_EVT)
 80086e0:	687b      	ldr	r3, [r7, #4]
 80086e2:	685b      	ldr	r3, [r3, #4]
 80086e4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80086e8:	2b00      	cmp	r3, #0
 80086ea:	d009      	beq.n	8008700 <HAL_PWR_ConfigPVD+0xa8>
  {
    __HAL_PWR_PVD_EXTI_ENABLE_EVENT ();
 80086ec:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80086f0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80086f4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80086f8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80086fc:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
  }
#endif /* !defined (DUAL_CORE) */

  /* Rising edge configuration */
  if ((sConfigPVD->Mode & PVD_RISING_EDGE) == PVD_RISING_EDGE)
 8008700:	687b      	ldr	r3, [r7, #4]
 8008702:	685b      	ldr	r3, [r3, #4]
 8008704:	f003 0301 	and.w	r3, r3, #1
 8008708:	2b00      	cmp	r3, #0
 800870a:	d007      	beq.n	800871c <HAL_PWR_ConfigPVD+0xc4>
  {
    __HAL_PWR_PVD_EXTI_ENABLE_RISING_EDGE ();
 800870c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008710:	681b      	ldr	r3, [r3, #0]
 8008712:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8008716:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800871a:	6013      	str	r3, [r2, #0]
  }

  /* Falling edge configuration */
  if ((sConfigPVD->Mode & PVD_FALLING_EDGE) == PVD_FALLING_EDGE)
 800871c:	687b      	ldr	r3, [r7, #4]
 800871e:	685b      	ldr	r3, [r3, #4]
 8008720:	f003 0302 	and.w	r3, r3, #2
 8008724:	2b00      	cmp	r3, #0
 8008726:	d009      	beq.n	800873c <HAL_PWR_ConfigPVD+0xe4>
  {
    __HAL_PWR_PVD_EXTI_ENABLE_FALLING_EDGE ();
 8008728:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800872c:	685b      	ldr	r3, [r3, #4]
 800872e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8008732:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008736:	6053      	str	r3, [r2, #4]
 8008738:	e000      	b.n	800873c <HAL_PWR_ConfigPVD+0xe4>
    return;
 800873a:	bf00      	nop
  }
}
 800873c:	370c      	adds	r7, #12
 800873e:	46bd      	mov	sp, r7
 8008740:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008744:	4770      	bx	lr
 8008746:	bf00      	nop
 8008748:	58024800 	.word	0x58024800

0800874c <HAL_PWR_EnablePVD>:
/**
  * @brief Enable the Programmable Voltage Detector (PVD).
  * @retval None.
  */
void HAL_PWR_EnablePVD (void)
{
 800874c:	b480      	push	{r7}
 800874e:	af00      	add	r7, sp, #0
  /* Enable the power voltage detector */
  SET_BIT (PWR->CR1, PWR_CR1_PVDEN);
 8008750:	4b05      	ldr	r3, [pc, #20]	; (8008768 <HAL_PWR_EnablePVD+0x1c>)
 8008752:	681b      	ldr	r3, [r3, #0]
 8008754:	4a04      	ldr	r2, [pc, #16]	; (8008768 <HAL_PWR_EnablePVD+0x1c>)
 8008756:	f043 0310 	orr.w	r3, r3, #16
 800875a:	6013      	str	r3, [r2, #0]
}
 800875c:	bf00      	nop
 800875e:	46bd      	mov	sp, r7
 8008760:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008764:	4770      	bx	lr
 8008766:	bf00      	nop
 8008768:	58024800 	.word	0x58024800

0800876c <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 800876c:	b580      	push	{r7, lr}
 800876e:	b084      	sub	sp, #16
 8008770:	af00      	add	r7, sp, #0
 8008772:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8008774:	4b19      	ldr	r3, [pc, #100]	; (80087dc <HAL_PWREx_ConfigSupply+0x70>)
 8008776:	68db      	ldr	r3, [r3, #12]
 8008778:	f003 0304 	and.w	r3, r3, #4
 800877c:	2b04      	cmp	r3, #4
 800877e:	d00a      	beq.n	8008796 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8008780:	4b16      	ldr	r3, [pc, #88]	; (80087dc <HAL_PWREx_ConfigSupply+0x70>)
 8008782:	68db      	ldr	r3, [r3, #12]
 8008784:	f003 0307 	and.w	r3, r3, #7
 8008788:	687a      	ldr	r2, [r7, #4]
 800878a:	429a      	cmp	r2, r3
 800878c:	d001      	beq.n	8008792 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 800878e:	2301      	movs	r3, #1
 8008790:	e01f      	b.n	80087d2 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8008792:	2300      	movs	r3, #0
 8008794:	e01d      	b.n	80087d2 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8008796:	4b11      	ldr	r3, [pc, #68]	; (80087dc <HAL_PWREx_ConfigSupply+0x70>)
 8008798:	68db      	ldr	r3, [r3, #12]
 800879a:	f023 0207 	bic.w	r2, r3, #7
 800879e:	490f      	ldr	r1, [pc, #60]	; (80087dc <HAL_PWREx_ConfigSupply+0x70>)
 80087a0:	687b      	ldr	r3, [r7, #4]
 80087a2:	4313      	orrs	r3, r2
 80087a4:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 80087a6:	f7fa ffa7 	bl	80036f8 <HAL_GetTick>
 80087aa:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80087ac:	e009      	b.n	80087c2 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80087ae:	f7fa ffa3 	bl	80036f8 <HAL_GetTick>
 80087b2:	4602      	mov	r2, r0
 80087b4:	68fb      	ldr	r3, [r7, #12]
 80087b6:	1ad3      	subs	r3, r2, r3
 80087b8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80087bc:	d901      	bls.n	80087c2 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 80087be:	2301      	movs	r3, #1
 80087c0:	e007      	b.n	80087d2 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80087c2:	4b06      	ldr	r3, [pc, #24]	; (80087dc <HAL_PWREx_ConfigSupply+0x70>)
 80087c4:	685b      	ldr	r3, [r3, #4]
 80087c6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80087ca:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80087ce:	d1ee      	bne.n	80087ae <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 80087d0:	2300      	movs	r3, #0
}
 80087d2:	4618      	mov	r0, r3
 80087d4:	3710      	adds	r7, #16
 80087d6:	46bd      	mov	sp, r7
 80087d8:	bd80      	pop	{r7, pc}
 80087da:	bf00      	nop
 80087dc:	58024800 	.word	0x58024800

080087e0 <HAL_PWREx_EnableUSBVoltageDetector>:
/**
  * @brief Enable the USB voltage level detector.
  * @retval None.
  */
void HAL_PWREx_EnableUSBVoltageDetector (void)
{
 80087e0:	b480      	push	{r7}
 80087e2:	af00      	add	r7, sp, #0
  /* Enable the USB voltage detector */
  SET_BIT (PWR->CR3, PWR_CR3_USB33DEN);
 80087e4:	4b05      	ldr	r3, [pc, #20]	; (80087fc <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 80087e6:	68db      	ldr	r3, [r3, #12]
 80087e8:	4a04      	ldr	r2, [pc, #16]	; (80087fc <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 80087ea:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80087ee:	60d3      	str	r3, [r2, #12]
}
 80087f0:	bf00      	nop
 80087f2:	46bd      	mov	sp, r7
 80087f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087f8:	4770      	bx	lr
 80087fa:	bf00      	nop
 80087fc:	58024800 	.word	0x58024800

08008800 <HAL_PWREx_PVD_AVD_IRQHandler>:
  * @brief  This function handles the PWR PVD/AVD interrupt request.
  * @note   This API should be called under the PVD_AVD_IRQHandler().
  * @retval None
  */
void HAL_PWREx_PVD_AVD_IRQHandler (void)
{
 8008800:	b580      	push	{r7, lr}
 8008802:	af00      	add	r7, sp, #0
  /* Check if the Programmable Voltage Detector is enabled (PVD) */
  if (READ_BIT (PWR->CR1, PWR_CR1_PVDEN) != 0U)
 8008804:	4b1b      	ldr	r3, [pc, #108]	; (8008874 <HAL_PWREx_PVD_AVD_IRQHandler+0x74>)
 8008806:	681b      	ldr	r3, [r3, #0]
 8008808:	f003 0310 	and.w	r3, r3, #16
 800880c:	2b00      	cmp	r3, #0
 800880e:	d014      	beq.n	800883a <HAL_PWREx_PVD_AVD_IRQHandler+0x3a>
#if defined (DUAL_CORE)
    if (HAL_GetCurrentCPUID () == CM7_CPUID)
#endif /* defined (DUAL_CORE) */
    {
      /* Check PWR D1/CD EXTI flag */
      if (__HAL_PWR_PVD_EXTI_GET_FLAG () != 0U)
 8008810:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008814:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008818:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800881c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008820:	d10b      	bne.n	800883a <HAL_PWREx_PVD_AVD_IRQHandler+0x3a>
      {
        /* PWR PVD interrupt user callback */
        HAL_PWR_PVDCallback ();
 8008822:	f7fa fa75 	bl	8002d10 <HAL_PWR_PVDCallback>

        /* Clear PWR EXTI D1/CD pending bit */
        __HAL_PWR_PVD_EXTI_CLEAR_FLAG ();
 8008826:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800882a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800882e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8008832:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008836:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    }
#endif /* defined (DUAL_CORE) */
  }

  /* Check if the Analog Voltage Detector is enabled (AVD) */
  if (READ_BIT (PWR->CR1, PWR_CR1_AVDEN) != 0U)
 800883a:	4b0e      	ldr	r3, [pc, #56]	; (8008874 <HAL_PWREx_PVD_AVD_IRQHandler+0x74>)
 800883c:	681b      	ldr	r3, [r3, #0]
 800883e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008842:	2b00      	cmp	r3, #0
 8008844:	d014      	beq.n	8008870 <HAL_PWREx_PVD_AVD_IRQHandler+0x70>
#if defined (DUAL_CORE)
    if (HAL_GetCurrentCPUID () == CM7_CPUID)
#endif /* defined (DUAL_CORE) */
    {
      /* Check PWR EXTI D1/CD flag */
      if (__HAL_PWR_AVD_EXTI_GET_FLAG () != 0U)
 8008846:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800884a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800884e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008852:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008856:	d10b      	bne.n	8008870 <HAL_PWREx_PVD_AVD_IRQHandler+0x70>
      {
        /* PWR AVD interrupt user callback */
        HAL_PWREx_AVDCallback ();
 8008858:	f000 f80e 	bl	8008878 <HAL_PWREx_AVDCallback>

        /* Clear PWR EXTI D1/CD pending bit */
        __HAL_PWR_AVD_EXTI_CLEAR_FLAG ();
 800885c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008860:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008864:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8008868:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800886c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
        __HAL_PWR_AVD_EXTID2_CLEAR_FLAG ();
      }
    }
#endif /* defined (DUAL_CORE) */
  }
}
 8008870:	bf00      	nop
 8008872:	bd80      	pop	{r7, pc}
 8008874:	58024800 	.word	0x58024800

08008878 <HAL_PWREx_AVDCallback>:
/**
  * @brief PWR AVD interrupt callback.
  * @retval None.
  */
__weak void HAL_PWREx_AVDCallback (void)
{
 8008878:	b480      	push	{r7}
 800887a:	af00      	add	r7, sp, #0
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PWR_AVDCallback can be implemented in the user file
  */
}
 800887c:	bf00      	nop
 800887e:	46bd      	mov	sp, r7
 8008880:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008884:	4770      	bx	lr
	...

08008888 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8008888:	b580      	push	{r7, lr}
 800888a:	b08c      	sub	sp, #48	; 0x30
 800888c:	af00      	add	r7, sp, #0
 800888e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8008890:	687b      	ldr	r3, [r7, #4]
 8008892:	2b00      	cmp	r3, #0
 8008894:	d101      	bne.n	800889a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8008896:	2301      	movs	r3, #1
 8008898:	e3ff      	b.n	800909a <HAL_RCC_OscConfig+0x812>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800889a:	687b      	ldr	r3, [r7, #4]
 800889c:	681b      	ldr	r3, [r3, #0]
 800889e:	f003 0301 	and.w	r3, r3, #1
 80088a2:	2b00      	cmp	r3, #0
 80088a4:	f000 8087 	beq.w	80089b6 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80088a8:	4b99      	ldr	r3, [pc, #612]	; (8008b10 <HAL_RCC_OscConfig+0x288>)
 80088aa:	691b      	ldr	r3, [r3, #16]
 80088ac:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80088b0:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80088b2:	4b97      	ldr	r3, [pc, #604]	; (8008b10 <HAL_RCC_OscConfig+0x288>)
 80088b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80088b6:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 80088b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80088ba:	2b10      	cmp	r3, #16
 80088bc:	d007      	beq.n	80088ce <HAL_RCC_OscConfig+0x46>
 80088be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80088c0:	2b18      	cmp	r3, #24
 80088c2:	d110      	bne.n	80088e6 <HAL_RCC_OscConfig+0x5e>
 80088c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80088c6:	f003 0303 	and.w	r3, r3, #3
 80088ca:	2b02      	cmp	r3, #2
 80088cc:	d10b      	bne.n	80088e6 <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80088ce:	4b90      	ldr	r3, [pc, #576]	; (8008b10 <HAL_RCC_OscConfig+0x288>)
 80088d0:	681b      	ldr	r3, [r3, #0]
 80088d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80088d6:	2b00      	cmp	r3, #0
 80088d8:	d06c      	beq.n	80089b4 <HAL_RCC_OscConfig+0x12c>
 80088da:	687b      	ldr	r3, [r7, #4]
 80088dc:	685b      	ldr	r3, [r3, #4]
 80088de:	2b00      	cmp	r3, #0
 80088e0:	d168      	bne.n	80089b4 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80088e2:	2301      	movs	r3, #1
 80088e4:	e3d9      	b.n	800909a <HAL_RCC_OscConfig+0x812>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80088e6:	687b      	ldr	r3, [r7, #4]
 80088e8:	685b      	ldr	r3, [r3, #4]
 80088ea:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80088ee:	d106      	bne.n	80088fe <HAL_RCC_OscConfig+0x76>
 80088f0:	4b87      	ldr	r3, [pc, #540]	; (8008b10 <HAL_RCC_OscConfig+0x288>)
 80088f2:	681b      	ldr	r3, [r3, #0]
 80088f4:	4a86      	ldr	r2, [pc, #536]	; (8008b10 <HAL_RCC_OscConfig+0x288>)
 80088f6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80088fa:	6013      	str	r3, [r2, #0]
 80088fc:	e02e      	b.n	800895c <HAL_RCC_OscConfig+0xd4>
 80088fe:	687b      	ldr	r3, [r7, #4]
 8008900:	685b      	ldr	r3, [r3, #4]
 8008902:	2b00      	cmp	r3, #0
 8008904:	d10c      	bne.n	8008920 <HAL_RCC_OscConfig+0x98>
 8008906:	4b82      	ldr	r3, [pc, #520]	; (8008b10 <HAL_RCC_OscConfig+0x288>)
 8008908:	681b      	ldr	r3, [r3, #0]
 800890a:	4a81      	ldr	r2, [pc, #516]	; (8008b10 <HAL_RCC_OscConfig+0x288>)
 800890c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008910:	6013      	str	r3, [r2, #0]
 8008912:	4b7f      	ldr	r3, [pc, #508]	; (8008b10 <HAL_RCC_OscConfig+0x288>)
 8008914:	681b      	ldr	r3, [r3, #0]
 8008916:	4a7e      	ldr	r2, [pc, #504]	; (8008b10 <HAL_RCC_OscConfig+0x288>)
 8008918:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800891c:	6013      	str	r3, [r2, #0]
 800891e:	e01d      	b.n	800895c <HAL_RCC_OscConfig+0xd4>
 8008920:	687b      	ldr	r3, [r7, #4]
 8008922:	685b      	ldr	r3, [r3, #4]
 8008924:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8008928:	d10c      	bne.n	8008944 <HAL_RCC_OscConfig+0xbc>
 800892a:	4b79      	ldr	r3, [pc, #484]	; (8008b10 <HAL_RCC_OscConfig+0x288>)
 800892c:	681b      	ldr	r3, [r3, #0]
 800892e:	4a78      	ldr	r2, [pc, #480]	; (8008b10 <HAL_RCC_OscConfig+0x288>)
 8008930:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8008934:	6013      	str	r3, [r2, #0]
 8008936:	4b76      	ldr	r3, [pc, #472]	; (8008b10 <HAL_RCC_OscConfig+0x288>)
 8008938:	681b      	ldr	r3, [r3, #0]
 800893a:	4a75      	ldr	r2, [pc, #468]	; (8008b10 <HAL_RCC_OscConfig+0x288>)
 800893c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008940:	6013      	str	r3, [r2, #0]
 8008942:	e00b      	b.n	800895c <HAL_RCC_OscConfig+0xd4>
 8008944:	4b72      	ldr	r3, [pc, #456]	; (8008b10 <HAL_RCC_OscConfig+0x288>)
 8008946:	681b      	ldr	r3, [r3, #0]
 8008948:	4a71      	ldr	r2, [pc, #452]	; (8008b10 <HAL_RCC_OscConfig+0x288>)
 800894a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800894e:	6013      	str	r3, [r2, #0]
 8008950:	4b6f      	ldr	r3, [pc, #444]	; (8008b10 <HAL_RCC_OscConfig+0x288>)
 8008952:	681b      	ldr	r3, [r3, #0]
 8008954:	4a6e      	ldr	r2, [pc, #440]	; (8008b10 <HAL_RCC_OscConfig+0x288>)
 8008956:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800895a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800895c:	687b      	ldr	r3, [r7, #4]
 800895e:	685b      	ldr	r3, [r3, #4]
 8008960:	2b00      	cmp	r3, #0
 8008962:	d013      	beq.n	800898c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008964:	f7fa fec8 	bl	80036f8 <HAL_GetTick>
 8008968:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800896a:	e008      	b.n	800897e <HAL_RCC_OscConfig+0xf6>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800896c:	f7fa fec4 	bl	80036f8 <HAL_GetTick>
 8008970:	4602      	mov	r2, r0
 8008972:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008974:	1ad3      	subs	r3, r2, r3
 8008976:	2b64      	cmp	r3, #100	; 0x64
 8008978:	d901      	bls.n	800897e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800897a:	2303      	movs	r3, #3
 800897c:	e38d      	b.n	800909a <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800897e:	4b64      	ldr	r3, [pc, #400]	; (8008b10 <HAL_RCC_OscConfig+0x288>)
 8008980:	681b      	ldr	r3, [r3, #0]
 8008982:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008986:	2b00      	cmp	r3, #0
 8008988:	d0f0      	beq.n	800896c <HAL_RCC_OscConfig+0xe4>
 800898a:	e014      	b.n	80089b6 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800898c:	f7fa feb4 	bl	80036f8 <HAL_GetTick>
 8008990:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8008992:	e008      	b.n	80089a6 <HAL_RCC_OscConfig+0x11e>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8008994:	f7fa feb0 	bl	80036f8 <HAL_GetTick>
 8008998:	4602      	mov	r2, r0
 800899a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800899c:	1ad3      	subs	r3, r2, r3
 800899e:	2b64      	cmp	r3, #100	; 0x64
 80089a0:	d901      	bls.n	80089a6 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80089a2:	2303      	movs	r3, #3
 80089a4:	e379      	b.n	800909a <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80089a6:	4b5a      	ldr	r3, [pc, #360]	; (8008b10 <HAL_RCC_OscConfig+0x288>)
 80089a8:	681b      	ldr	r3, [r3, #0]
 80089aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80089ae:	2b00      	cmp	r3, #0
 80089b0:	d1f0      	bne.n	8008994 <HAL_RCC_OscConfig+0x10c>
 80089b2:	e000      	b.n	80089b6 <HAL_RCC_OscConfig+0x12e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80089b4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80089b6:	687b      	ldr	r3, [r7, #4]
 80089b8:	681b      	ldr	r3, [r3, #0]
 80089ba:	f003 0302 	and.w	r3, r3, #2
 80089be:	2b00      	cmp	r3, #0
 80089c0:	f000 80ae 	beq.w	8008b20 <HAL_RCC_OscConfig+0x298>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80089c4:	4b52      	ldr	r3, [pc, #328]	; (8008b10 <HAL_RCC_OscConfig+0x288>)
 80089c6:	691b      	ldr	r3, [r3, #16]
 80089c8:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80089cc:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80089ce:	4b50      	ldr	r3, [pc, #320]	; (8008b10 <HAL_RCC_OscConfig+0x288>)
 80089d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80089d2:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 80089d4:	6a3b      	ldr	r3, [r7, #32]
 80089d6:	2b00      	cmp	r3, #0
 80089d8:	d007      	beq.n	80089ea <HAL_RCC_OscConfig+0x162>
 80089da:	6a3b      	ldr	r3, [r7, #32]
 80089dc:	2b18      	cmp	r3, #24
 80089de:	d13a      	bne.n	8008a56 <HAL_RCC_OscConfig+0x1ce>
 80089e0:	69fb      	ldr	r3, [r7, #28]
 80089e2:	f003 0303 	and.w	r3, r3, #3
 80089e6:	2b00      	cmp	r3, #0
 80089e8:	d135      	bne.n	8008a56 <HAL_RCC_OscConfig+0x1ce>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80089ea:	4b49      	ldr	r3, [pc, #292]	; (8008b10 <HAL_RCC_OscConfig+0x288>)
 80089ec:	681b      	ldr	r3, [r3, #0]
 80089ee:	f003 0304 	and.w	r3, r3, #4
 80089f2:	2b00      	cmp	r3, #0
 80089f4:	d005      	beq.n	8008a02 <HAL_RCC_OscConfig+0x17a>
 80089f6:	687b      	ldr	r3, [r7, #4]
 80089f8:	68db      	ldr	r3, [r3, #12]
 80089fa:	2b00      	cmp	r3, #0
 80089fc:	d101      	bne.n	8008a02 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 80089fe:	2301      	movs	r3, #1
 8008a00:	e34b      	b.n	800909a <HAL_RCC_OscConfig+0x812>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008a02:	f7fa fea7 	bl	8003754 <HAL_GetREVID>
 8008a06:	4602      	mov	r2, r0
 8008a08:	f241 0303 	movw	r3, #4099	; 0x1003
 8008a0c:	429a      	cmp	r2, r3
 8008a0e:	d817      	bhi.n	8008a40 <HAL_RCC_OscConfig+0x1b8>
 8008a10:	687b      	ldr	r3, [r7, #4]
 8008a12:	691b      	ldr	r3, [r3, #16]
 8008a14:	2b40      	cmp	r3, #64	; 0x40
 8008a16:	d108      	bne.n	8008a2a <HAL_RCC_OscConfig+0x1a2>
 8008a18:	4b3d      	ldr	r3, [pc, #244]	; (8008b10 <HAL_RCC_OscConfig+0x288>)
 8008a1a:	685b      	ldr	r3, [r3, #4]
 8008a1c:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8008a20:	4a3b      	ldr	r2, [pc, #236]	; (8008b10 <HAL_RCC_OscConfig+0x288>)
 8008a22:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008a26:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8008a28:	e07a      	b.n	8008b20 <HAL_RCC_OscConfig+0x298>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008a2a:	4b39      	ldr	r3, [pc, #228]	; (8008b10 <HAL_RCC_OscConfig+0x288>)
 8008a2c:	685b      	ldr	r3, [r3, #4]
 8008a2e:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8008a32:	687b      	ldr	r3, [r7, #4]
 8008a34:	691b      	ldr	r3, [r3, #16]
 8008a36:	031b      	lsls	r3, r3, #12
 8008a38:	4935      	ldr	r1, [pc, #212]	; (8008b10 <HAL_RCC_OscConfig+0x288>)
 8008a3a:	4313      	orrs	r3, r2
 8008a3c:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8008a3e:	e06f      	b.n	8008b20 <HAL_RCC_OscConfig+0x298>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008a40:	4b33      	ldr	r3, [pc, #204]	; (8008b10 <HAL_RCC_OscConfig+0x288>)
 8008a42:	685b      	ldr	r3, [r3, #4]
 8008a44:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8008a48:	687b      	ldr	r3, [r7, #4]
 8008a4a:	691b      	ldr	r3, [r3, #16]
 8008a4c:	061b      	lsls	r3, r3, #24
 8008a4e:	4930      	ldr	r1, [pc, #192]	; (8008b10 <HAL_RCC_OscConfig+0x288>)
 8008a50:	4313      	orrs	r3, r2
 8008a52:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8008a54:	e064      	b.n	8008b20 <HAL_RCC_OscConfig+0x298>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8008a56:	687b      	ldr	r3, [r7, #4]
 8008a58:	68db      	ldr	r3, [r3, #12]
 8008a5a:	2b00      	cmp	r3, #0
 8008a5c:	d045      	beq.n	8008aea <HAL_RCC_OscConfig+0x262>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8008a5e:	4b2c      	ldr	r3, [pc, #176]	; (8008b10 <HAL_RCC_OscConfig+0x288>)
 8008a60:	681b      	ldr	r3, [r3, #0]
 8008a62:	f023 0219 	bic.w	r2, r3, #25
 8008a66:	687b      	ldr	r3, [r7, #4]
 8008a68:	68db      	ldr	r3, [r3, #12]
 8008a6a:	4929      	ldr	r1, [pc, #164]	; (8008b10 <HAL_RCC_OscConfig+0x288>)
 8008a6c:	4313      	orrs	r3, r2
 8008a6e:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008a70:	f7fa fe42 	bl	80036f8 <HAL_GetTick>
 8008a74:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8008a76:	e008      	b.n	8008a8a <HAL_RCC_OscConfig+0x202>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8008a78:	f7fa fe3e 	bl	80036f8 <HAL_GetTick>
 8008a7c:	4602      	mov	r2, r0
 8008a7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a80:	1ad3      	subs	r3, r2, r3
 8008a82:	2b02      	cmp	r3, #2
 8008a84:	d901      	bls.n	8008a8a <HAL_RCC_OscConfig+0x202>
          {
            return HAL_TIMEOUT;
 8008a86:	2303      	movs	r3, #3
 8008a88:	e307      	b.n	800909a <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8008a8a:	4b21      	ldr	r3, [pc, #132]	; (8008b10 <HAL_RCC_OscConfig+0x288>)
 8008a8c:	681b      	ldr	r3, [r3, #0]
 8008a8e:	f003 0304 	and.w	r3, r3, #4
 8008a92:	2b00      	cmp	r3, #0
 8008a94:	d0f0      	beq.n	8008a78 <HAL_RCC_OscConfig+0x1f0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008a96:	f7fa fe5d 	bl	8003754 <HAL_GetREVID>
 8008a9a:	4602      	mov	r2, r0
 8008a9c:	f241 0303 	movw	r3, #4099	; 0x1003
 8008aa0:	429a      	cmp	r2, r3
 8008aa2:	d817      	bhi.n	8008ad4 <HAL_RCC_OscConfig+0x24c>
 8008aa4:	687b      	ldr	r3, [r7, #4]
 8008aa6:	691b      	ldr	r3, [r3, #16]
 8008aa8:	2b40      	cmp	r3, #64	; 0x40
 8008aaa:	d108      	bne.n	8008abe <HAL_RCC_OscConfig+0x236>
 8008aac:	4b18      	ldr	r3, [pc, #96]	; (8008b10 <HAL_RCC_OscConfig+0x288>)
 8008aae:	685b      	ldr	r3, [r3, #4]
 8008ab0:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8008ab4:	4a16      	ldr	r2, [pc, #88]	; (8008b10 <HAL_RCC_OscConfig+0x288>)
 8008ab6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008aba:	6053      	str	r3, [r2, #4]
 8008abc:	e030      	b.n	8008b20 <HAL_RCC_OscConfig+0x298>
 8008abe:	4b14      	ldr	r3, [pc, #80]	; (8008b10 <HAL_RCC_OscConfig+0x288>)
 8008ac0:	685b      	ldr	r3, [r3, #4]
 8008ac2:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8008ac6:	687b      	ldr	r3, [r7, #4]
 8008ac8:	691b      	ldr	r3, [r3, #16]
 8008aca:	031b      	lsls	r3, r3, #12
 8008acc:	4910      	ldr	r1, [pc, #64]	; (8008b10 <HAL_RCC_OscConfig+0x288>)
 8008ace:	4313      	orrs	r3, r2
 8008ad0:	604b      	str	r3, [r1, #4]
 8008ad2:	e025      	b.n	8008b20 <HAL_RCC_OscConfig+0x298>
 8008ad4:	4b0e      	ldr	r3, [pc, #56]	; (8008b10 <HAL_RCC_OscConfig+0x288>)
 8008ad6:	685b      	ldr	r3, [r3, #4]
 8008ad8:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8008adc:	687b      	ldr	r3, [r7, #4]
 8008ade:	691b      	ldr	r3, [r3, #16]
 8008ae0:	061b      	lsls	r3, r3, #24
 8008ae2:	490b      	ldr	r1, [pc, #44]	; (8008b10 <HAL_RCC_OscConfig+0x288>)
 8008ae4:	4313      	orrs	r3, r2
 8008ae6:	604b      	str	r3, [r1, #4]
 8008ae8:	e01a      	b.n	8008b20 <HAL_RCC_OscConfig+0x298>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8008aea:	4b09      	ldr	r3, [pc, #36]	; (8008b10 <HAL_RCC_OscConfig+0x288>)
 8008aec:	681b      	ldr	r3, [r3, #0]
 8008aee:	4a08      	ldr	r2, [pc, #32]	; (8008b10 <HAL_RCC_OscConfig+0x288>)
 8008af0:	f023 0301 	bic.w	r3, r3, #1
 8008af4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008af6:	f7fa fdff 	bl	80036f8 <HAL_GetTick>
 8008afa:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8008afc:	e00a      	b.n	8008b14 <HAL_RCC_OscConfig+0x28c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8008afe:	f7fa fdfb 	bl	80036f8 <HAL_GetTick>
 8008b02:	4602      	mov	r2, r0
 8008b04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b06:	1ad3      	subs	r3, r2, r3
 8008b08:	2b02      	cmp	r3, #2
 8008b0a:	d903      	bls.n	8008b14 <HAL_RCC_OscConfig+0x28c>
          {
            return HAL_TIMEOUT;
 8008b0c:	2303      	movs	r3, #3
 8008b0e:	e2c4      	b.n	800909a <HAL_RCC_OscConfig+0x812>
 8008b10:	58024400 	.word	0x58024400
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8008b14:	4ba4      	ldr	r3, [pc, #656]	; (8008da8 <HAL_RCC_OscConfig+0x520>)
 8008b16:	681b      	ldr	r3, [r3, #0]
 8008b18:	f003 0304 	and.w	r3, r3, #4
 8008b1c:	2b00      	cmp	r3, #0
 8008b1e:	d1ee      	bne.n	8008afe <HAL_RCC_OscConfig+0x276>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8008b20:	687b      	ldr	r3, [r7, #4]
 8008b22:	681b      	ldr	r3, [r3, #0]
 8008b24:	f003 0310 	and.w	r3, r3, #16
 8008b28:	2b00      	cmp	r3, #0
 8008b2a:	f000 80a9 	beq.w	8008c80 <HAL_RCC_OscConfig+0x3f8>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8008b2e:	4b9e      	ldr	r3, [pc, #632]	; (8008da8 <HAL_RCC_OscConfig+0x520>)
 8008b30:	691b      	ldr	r3, [r3, #16]
 8008b32:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8008b36:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8008b38:	4b9b      	ldr	r3, [pc, #620]	; (8008da8 <HAL_RCC_OscConfig+0x520>)
 8008b3a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008b3c:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8008b3e:	69bb      	ldr	r3, [r7, #24]
 8008b40:	2b08      	cmp	r3, #8
 8008b42:	d007      	beq.n	8008b54 <HAL_RCC_OscConfig+0x2cc>
 8008b44:	69bb      	ldr	r3, [r7, #24]
 8008b46:	2b18      	cmp	r3, #24
 8008b48:	d13a      	bne.n	8008bc0 <HAL_RCC_OscConfig+0x338>
 8008b4a:	697b      	ldr	r3, [r7, #20]
 8008b4c:	f003 0303 	and.w	r3, r3, #3
 8008b50:	2b01      	cmp	r3, #1
 8008b52:	d135      	bne.n	8008bc0 <HAL_RCC_OscConfig+0x338>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8008b54:	4b94      	ldr	r3, [pc, #592]	; (8008da8 <HAL_RCC_OscConfig+0x520>)
 8008b56:	681b      	ldr	r3, [r3, #0]
 8008b58:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008b5c:	2b00      	cmp	r3, #0
 8008b5e:	d005      	beq.n	8008b6c <HAL_RCC_OscConfig+0x2e4>
 8008b60:	687b      	ldr	r3, [r7, #4]
 8008b62:	69db      	ldr	r3, [r3, #28]
 8008b64:	2b80      	cmp	r3, #128	; 0x80
 8008b66:	d001      	beq.n	8008b6c <HAL_RCC_OscConfig+0x2e4>
      {
        return HAL_ERROR;
 8008b68:	2301      	movs	r3, #1
 8008b6a:	e296      	b.n	800909a <HAL_RCC_OscConfig+0x812>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8008b6c:	f7fa fdf2 	bl	8003754 <HAL_GetREVID>
 8008b70:	4602      	mov	r2, r0
 8008b72:	f241 0303 	movw	r3, #4099	; 0x1003
 8008b76:	429a      	cmp	r2, r3
 8008b78:	d817      	bhi.n	8008baa <HAL_RCC_OscConfig+0x322>
 8008b7a:	687b      	ldr	r3, [r7, #4]
 8008b7c:	6a1b      	ldr	r3, [r3, #32]
 8008b7e:	2b20      	cmp	r3, #32
 8008b80:	d108      	bne.n	8008b94 <HAL_RCC_OscConfig+0x30c>
 8008b82:	4b89      	ldr	r3, [pc, #548]	; (8008da8 <HAL_RCC_OscConfig+0x520>)
 8008b84:	685b      	ldr	r3, [r3, #4]
 8008b86:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8008b8a:	4a87      	ldr	r2, [pc, #540]	; (8008da8 <HAL_RCC_OscConfig+0x520>)
 8008b8c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8008b90:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8008b92:	e075      	b.n	8008c80 <HAL_RCC_OscConfig+0x3f8>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8008b94:	4b84      	ldr	r3, [pc, #528]	; (8008da8 <HAL_RCC_OscConfig+0x520>)
 8008b96:	685b      	ldr	r3, [r3, #4]
 8008b98:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8008b9c:	687b      	ldr	r3, [r7, #4]
 8008b9e:	6a1b      	ldr	r3, [r3, #32]
 8008ba0:	069b      	lsls	r3, r3, #26
 8008ba2:	4981      	ldr	r1, [pc, #516]	; (8008da8 <HAL_RCC_OscConfig+0x520>)
 8008ba4:	4313      	orrs	r3, r2
 8008ba6:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8008ba8:	e06a      	b.n	8008c80 <HAL_RCC_OscConfig+0x3f8>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8008baa:	4b7f      	ldr	r3, [pc, #508]	; (8008da8 <HAL_RCC_OscConfig+0x520>)
 8008bac:	68db      	ldr	r3, [r3, #12]
 8008bae:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8008bb2:	687b      	ldr	r3, [r7, #4]
 8008bb4:	6a1b      	ldr	r3, [r3, #32]
 8008bb6:	061b      	lsls	r3, r3, #24
 8008bb8:	497b      	ldr	r1, [pc, #492]	; (8008da8 <HAL_RCC_OscConfig+0x520>)
 8008bba:	4313      	orrs	r3, r2
 8008bbc:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8008bbe:	e05f      	b.n	8008c80 <HAL_RCC_OscConfig+0x3f8>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 8008bc0:	687b      	ldr	r3, [r7, #4]
 8008bc2:	69db      	ldr	r3, [r3, #28]
 8008bc4:	2b00      	cmp	r3, #0
 8008bc6:	d042      	beq.n	8008c4e <HAL_RCC_OscConfig+0x3c6>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8008bc8:	4b77      	ldr	r3, [pc, #476]	; (8008da8 <HAL_RCC_OscConfig+0x520>)
 8008bca:	681b      	ldr	r3, [r3, #0]
 8008bcc:	4a76      	ldr	r2, [pc, #472]	; (8008da8 <HAL_RCC_OscConfig+0x520>)
 8008bce:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008bd2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008bd4:	f7fa fd90 	bl	80036f8 <HAL_GetTick>
 8008bd8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8008bda:	e008      	b.n	8008bee <HAL_RCC_OscConfig+0x366>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8008bdc:	f7fa fd8c 	bl	80036f8 <HAL_GetTick>
 8008be0:	4602      	mov	r2, r0
 8008be2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008be4:	1ad3      	subs	r3, r2, r3
 8008be6:	2b02      	cmp	r3, #2
 8008be8:	d901      	bls.n	8008bee <HAL_RCC_OscConfig+0x366>
          {
            return HAL_TIMEOUT;
 8008bea:	2303      	movs	r3, #3
 8008bec:	e255      	b.n	800909a <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8008bee:	4b6e      	ldr	r3, [pc, #440]	; (8008da8 <HAL_RCC_OscConfig+0x520>)
 8008bf0:	681b      	ldr	r3, [r3, #0]
 8008bf2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008bf6:	2b00      	cmp	r3, #0
 8008bf8:	d0f0      	beq.n	8008bdc <HAL_RCC_OscConfig+0x354>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8008bfa:	f7fa fdab 	bl	8003754 <HAL_GetREVID>
 8008bfe:	4602      	mov	r2, r0
 8008c00:	f241 0303 	movw	r3, #4099	; 0x1003
 8008c04:	429a      	cmp	r2, r3
 8008c06:	d817      	bhi.n	8008c38 <HAL_RCC_OscConfig+0x3b0>
 8008c08:	687b      	ldr	r3, [r7, #4]
 8008c0a:	6a1b      	ldr	r3, [r3, #32]
 8008c0c:	2b20      	cmp	r3, #32
 8008c0e:	d108      	bne.n	8008c22 <HAL_RCC_OscConfig+0x39a>
 8008c10:	4b65      	ldr	r3, [pc, #404]	; (8008da8 <HAL_RCC_OscConfig+0x520>)
 8008c12:	685b      	ldr	r3, [r3, #4]
 8008c14:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8008c18:	4a63      	ldr	r2, [pc, #396]	; (8008da8 <HAL_RCC_OscConfig+0x520>)
 8008c1a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8008c1e:	6053      	str	r3, [r2, #4]
 8008c20:	e02e      	b.n	8008c80 <HAL_RCC_OscConfig+0x3f8>
 8008c22:	4b61      	ldr	r3, [pc, #388]	; (8008da8 <HAL_RCC_OscConfig+0x520>)
 8008c24:	685b      	ldr	r3, [r3, #4]
 8008c26:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8008c2a:	687b      	ldr	r3, [r7, #4]
 8008c2c:	6a1b      	ldr	r3, [r3, #32]
 8008c2e:	069b      	lsls	r3, r3, #26
 8008c30:	495d      	ldr	r1, [pc, #372]	; (8008da8 <HAL_RCC_OscConfig+0x520>)
 8008c32:	4313      	orrs	r3, r2
 8008c34:	604b      	str	r3, [r1, #4]
 8008c36:	e023      	b.n	8008c80 <HAL_RCC_OscConfig+0x3f8>
 8008c38:	4b5b      	ldr	r3, [pc, #364]	; (8008da8 <HAL_RCC_OscConfig+0x520>)
 8008c3a:	68db      	ldr	r3, [r3, #12]
 8008c3c:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8008c40:	687b      	ldr	r3, [r7, #4]
 8008c42:	6a1b      	ldr	r3, [r3, #32]
 8008c44:	061b      	lsls	r3, r3, #24
 8008c46:	4958      	ldr	r1, [pc, #352]	; (8008da8 <HAL_RCC_OscConfig+0x520>)
 8008c48:	4313      	orrs	r3, r2
 8008c4a:	60cb      	str	r3, [r1, #12]
 8008c4c:	e018      	b.n	8008c80 <HAL_RCC_OscConfig+0x3f8>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8008c4e:	4b56      	ldr	r3, [pc, #344]	; (8008da8 <HAL_RCC_OscConfig+0x520>)
 8008c50:	681b      	ldr	r3, [r3, #0]
 8008c52:	4a55      	ldr	r2, [pc, #340]	; (8008da8 <HAL_RCC_OscConfig+0x520>)
 8008c54:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008c58:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008c5a:	f7fa fd4d 	bl	80036f8 <HAL_GetTick>
 8008c5e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8008c60:	e008      	b.n	8008c74 <HAL_RCC_OscConfig+0x3ec>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8008c62:	f7fa fd49 	bl	80036f8 <HAL_GetTick>
 8008c66:	4602      	mov	r2, r0
 8008c68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c6a:	1ad3      	subs	r3, r2, r3
 8008c6c:	2b02      	cmp	r3, #2
 8008c6e:	d901      	bls.n	8008c74 <HAL_RCC_OscConfig+0x3ec>
          {
            return HAL_TIMEOUT;
 8008c70:	2303      	movs	r3, #3
 8008c72:	e212      	b.n	800909a <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8008c74:	4b4c      	ldr	r3, [pc, #304]	; (8008da8 <HAL_RCC_OscConfig+0x520>)
 8008c76:	681b      	ldr	r3, [r3, #0]
 8008c78:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008c7c:	2b00      	cmp	r3, #0
 8008c7e:	d1f0      	bne.n	8008c62 <HAL_RCC_OscConfig+0x3da>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8008c80:	687b      	ldr	r3, [r7, #4]
 8008c82:	681b      	ldr	r3, [r3, #0]
 8008c84:	f003 0308 	and.w	r3, r3, #8
 8008c88:	2b00      	cmp	r3, #0
 8008c8a:	d036      	beq.n	8008cfa <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8008c8c:	687b      	ldr	r3, [r7, #4]
 8008c8e:	695b      	ldr	r3, [r3, #20]
 8008c90:	2b00      	cmp	r3, #0
 8008c92:	d019      	beq.n	8008cc8 <HAL_RCC_OscConfig+0x440>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8008c94:	4b44      	ldr	r3, [pc, #272]	; (8008da8 <HAL_RCC_OscConfig+0x520>)
 8008c96:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008c98:	4a43      	ldr	r2, [pc, #268]	; (8008da8 <HAL_RCC_OscConfig+0x520>)
 8008c9a:	f043 0301 	orr.w	r3, r3, #1
 8008c9e:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008ca0:	f7fa fd2a 	bl	80036f8 <HAL_GetTick>
 8008ca4:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8008ca6:	e008      	b.n	8008cba <HAL_RCC_OscConfig+0x432>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8008ca8:	f7fa fd26 	bl	80036f8 <HAL_GetTick>
 8008cac:	4602      	mov	r2, r0
 8008cae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008cb0:	1ad3      	subs	r3, r2, r3
 8008cb2:	2b02      	cmp	r3, #2
 8008cb4:	d901      	bls.n	8008cba <HAL_RCC_OscConfig+0x432>
        {
          return HAL_TIMEOUT;
 8008cb6:	2303      	movs	r3, #3
 8008cb8:	e1ef      	b.n	800909a <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8008cba:	4b3b      	ldr	r3, [pc, #236]	; (8008da8 <HAL_RCC_OscConfig+0x520>)
 8008cbc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008cbe:	f003 0302 	and.w	r3, r3, #2
 8008cc2:	2b00      	cmp	r3, #0
 8008cc4:	d0f0      	beq.n	8008ca8 <HAL_RCC_OscConfig+0x420>
 8008cc6:	e018      	b.n	8008cfa <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8008cc8:	4b37      	ldr	r3, [pc, #220]	; (8008da8 <HAL_RCC_OscConfig+0x520>)
 8008cca:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008ccc:	4a36      	ldr	r2, [pc, #216]	; (8008da8 <HAL_RCC_OscConfig+0x520>)
 8008cce:	f023 0301 	bic.w	r3, r3, #1
 8008cd2:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008cd4:	f7fa fd10 	bl	80036f8 <HAL_GetTick>
 8008cd8:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8008cda:	e008      	b.n	8008cee <HAL_RCC_OscConfig+0x466>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8008cdc:	f7fa fd0c 	bl	80036f8 <HAL_GetTick>
 8008ce0:	4602      	mov	r2, r0
 8008ce2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ce4:	1ad3      	subs	r3, r2, r3
 8008ce6:	2b02      	cmp	r3, #2
 8008ce8:	d901      	bls.n	8008cee <HAL_RCC_OscConfig+0x466>
        {
          return HAL_TIMEOUT;
 8008cea:	2303      	movs	r3, #3
 8008cec:	e1d5      	b.n	800909a <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8008cee:	4b2e      	ldr	r3, [pc, #184]	; (8008da8 <HAL_RCC_OscConfig+0x520>)
 8008cf0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008cf2:	f003 0302 	and.w	r3, r3, #2
 8008cf6:	2b00      	cmp	r3, #0
 8008cf8:	d1f0      	bne.n	8008cdc <HAL_RCC_OscConfig+0x454>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8008cfa:	687b      	ldr	r3, [r7, #4]
 8008cfc:	681b      	ldr	r3, [r3, #0]
 8008cfe:	f003 0320 	and.w	r3, r3, #32
 8008d02:	2b00      	cmp	r3, #0
 8008d04:	d036      	beq.n	8008d74 <HAL_RCC_OscConfig+0x4ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 8008d06:	687b      	ldr	r3, [r7, #4]
 8008d08:	699b      	ldr	r3, [r3, #24]
 8008d0a:	2b00      	cmp	r3, #0
 8008d0c:	d019      	beq.n	8008d42 <HAL_RCC_OscConfig+0x4ba>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8008d0e:	4b26      	ldr	r3, [pc, #152]	; (8008da8 <HAL_RCC_OscConfig+0x520>)
 8008d10:	681b      	ldr	r3, [r3, #0]
 8008d12:	4a25      	ldr	r2, [pc, #148]	; (8008da8 <HAL_RCC_OscConfig+0x520>)
 8008d14:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8008d18:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8008d1a:	f7fa fced 	bl	80036f8 <HAL_GetTick>
 8008d1e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8008d20:	e008      	b.n	8008d34 <HAL_RCC_OscConfig+0x4ac>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8008d22:	f7fa fce9 	bl	80036f8 <HAL_GetTick>
 8008d26:	4602      	mov	r2, r0
 8008d28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d2a:	1ad3      	subs	r3, r2, r3
 8008d2c:	2b02      	cmp	r3, #2
 8008d2e:	d901      	bls.n	8008d34 <HAL_RCC_OscConfig+0x4ac>
        {
          return HAL_TIMEOUT;
 8008d30:	2303      	movs	r3, #3
 8008d32:	e1b2      	b.n	800909a <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8008d34:	4b1c      	ldr	r3, [pc, #112]	; (8008da8 <HAL_RCC_OscConfig+0x520>)
 8008d36:	681b      	ldr	r3, [r3, #0]
 8008d38:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8008d3c:	2b00      	cmp	r3, #0
 8008d3e:	d0f0      	beq.n	8008d22 <HAL_RCC_OscConfig+0x49a>
 8008d40:	e018      	b.n	8008d74 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8008d42:	4b19      	ldr	r3, [pc, #100]	; (8008da8 <HAL_RCC_OscConfig+0x520>)
 8008d44:	681b      	ldr	r3, [r3, #0]
 8008d46:	4a18      	ldr	r2, [pc, #96]	; (8008da8 <HAL_RCC_OscConfig+0x520>)
 8008d48:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008d4c:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8008d4e:	f7fa fcd3 	bl	80036f8 <HAL_GetTick>
 8008d52:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8008d54:	e008      	b.n	8008d68 <HAL_RCC_OscConfig+0x4e0>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8008d56:	f7fa fccf 	bl	80036f8 <HAL_GetTick>
 8008d5a:	4602      	mov	r2, r0
 8008d5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d5e:	1ad3      	subs	r3, r2, r3
 8008d60:	2b02      	cmp	r3, #2
 8008d62:	d901      	bls.n	8008d68 <HAL_RCC_OscConfig+0x4e0>
        {
          return HAL_TIMEOUT;
 8008d64:	2303      	movs	r3, #3
 8008d66:	e198      	b.n	800909a <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8008d68:	4b0f      	ldr	r3, [pc, #60]	; (8008da8 <HAL_RCC_OscConfig+0x520>)
 8008d6a:	681b      	ldr	r3, [r3, #0]
 8008d6c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8008d70:	2b00      	cmp	r3, #0
 8008d72:	d1f0      	bne.n	8008d56 <HAL_RCC_OscConfig+0x4ce>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8008d74:	687b      	ldr	r3, [r7, #4]
 8008d76:	681b      	ldr	r3, [r3, #0]
 8008d78:	f003 0304 	and.w	r3, r3, #4
 8008d7c:	2b00      	cmp	r3, #0
 8008d7e:	f000 8085 	beq.w	8008e8c <HAL_RCC_OscConfig+0x604>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8008d82:	4b0a      	ldr	r3, [pc, #40]	; (8008dac <HAL_RCC_OscConfig+0x524>)
 8008d84:	681b      	ldr	r3, [r3, #0]
 8008d86:	4a09      	ldr	r2, [pc, #36]	; (8008dac <HAL_RCC_OscConfig+0x524>)
 8008d88:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008d8c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8008d8e:	f7fa fcb3 	bl	80036f8 <HAL_GetTick>
 8008d92:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8008d94:	e00c      	b.n	8008db0 <HAL_RCC_OscConfig+0x528>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8008d96:	f7fa fcaf 	bl	80036f8 <HAL_GetTick>
 8008d9a:	4602      	mov	r2, r0
 8008d9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d9e:	1ad3      	subs	r3, r2, r3
 8008da0:	2b64      	cmp	r3, #100	; 0x64
 8008da2:	d905      	bls.n	8008db0 <HAL_RCC_OscConfig+0x528>
      {
        return HAL_TIMEOUT;
 8008da4:	2303      	movs	r3, #3
 8008da6:	e178      	b.n	800909a <HAL_RCC_OscConfig+0x812>
 8008da8:	58024400 	.word	0x58024400
 8008dac:	58024800 	.word	0x58024800
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8008db0:	4b96      	ldr	r3, [pc, #600]	; (800900c <HAL_RCC_OscConfig+0x784>)
 8008db2:	681b      	ldr	r3, [r3, #0]
 8008db4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008db8:	2b00      	cmp	r3, #0
 8008dba:	d0ec      	beq.n	8008d96 <HAL_RCC_OscConfig+0x50e>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8008dbc:	687b      	ldr	r3, [r7, #4]
 8008dbe:	689b      	ldr	r3, [r3, #8]
 8008dc0:	2b01      	cmp	r3, #1
 8008dc2:	d106      	bne.n	8008dd2 <HAL_RCC_OscConfig+0x54a>
 8008dc4:	4b92      	ldr	r3, [pc, #584]	; (8009010 <HAL_RCC_OscConfig+0x788>)
 8008dc6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008dc8:	4a91      	ldr	r2, [pc, #580]	; (8009010 <HAL_RCC_OscConfig+0x788>)
 8008dca:	f043 0301 	orr.w	r3, r3, #1
 8008dce:	6713      	str	r3, [r2, #112]	; 0x70
 8008dd0:	e02d      	b.n	8008e2e <HAL_RCC_OscConfig+0x5a6>
 8008dd2:	687b      	ldr	r3, [r7, #4]
 8008dd4:	689b      	ldr	r3, [r3, #8]
 8008dd6:	2b00      	cmp	r3, #0
 8008dd8:	d10c      	bne.n	8008df4 <HAL_RCC_OscConfig+0x56c>
 8008dda:	4b8d      	ldr	r3, [pc, #564]	; (8009010 <HAL_RCC_OscConfig+0x788>)
 8008ddc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008dde:	4a8c      	ldr	r2, [pc, #560]	; (8009010 <HAL_RCC_OscConfig+0x788>)
 8008de0:	f023 0301 	bic.w	r3, r3, #1
 8008de4:	6713      	str	r3, [r2, #112]	; 0x70
 8008de6:	4b8a      	ldr	r3, [pc, #552]	; (8009010 <HAL_RCC_OscConfig+0x788>)
 8008de8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008dea:	4a89      	ldr	r2, [pc, #548]	; (8009010 <HAL_RCC_OscConfig+0x788>)
 8008dec:	f023 0304 	bic.w	r3, r3, #4
 8008df0:	6713      	str	r3, [r2, #112]	; 0x70
 8008df2:	e01c      	b.n	8008e2e <HAL_RCC_OscConfig+0x5a6>
 8008df4:	687b      	ldr	r3, [r7, #4]
 8008df6:	689b      	ldr	r3, [r3, #8]
 8008df8:	2b05      	cmp	r3, #5
 8008dfa:	d10c      	bne.n	8008e16 <HAL_RCC_OscConfig+0x58e>
 8008dfc:	4b84      	ldr	r3, [pc, #528]	; (8009010 <HAL_RCC_OscConfig+0x788>)
 8008dfe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008e00:	4a83      	ldr	r2, [pc, #524]	; (8009010 <HAL_RCC_OscConfig+0x788>)
 8008e02:	f043 0304 	orr.w	r3, r3, #4
 8008e06:	6713      	str	r3, [r2, #112]	; 0x70
 8008e08:	4b81      	ldr	r3, [pc, #516]	; (8009010 <HAL_RCC_OscConfig+0x788>)
 8008e0a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008e0c:	4a80      	ldr	r2, [pc, #512]	; (8009010 <HAL_RCC_OscConfig+0x788>)
 8008e0e:	f043 0301 	orr.w	r3, r3, #1
 8008e12:	6713      	str	r3, [r2, #112]	; 0x70
 8008e14:	e00b      	b.n	8008e2e <HAL_RCC_OscConfig+0x5a6>
 8008e16:	4b7e      	ldr	r3, [pc, #504]	; (8009010 <HAL_RCC_OscConfig+0x788>)
 8008e18:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008e1a:	4a7d      	ldr	r2, [pc, #500]	; (8009010 <HAL_RCC_OscConfig+0x788>)
 8008e1c:	f023 0301 	bic.w	r3, r3, #1
 8008e20:	6713      	str	r3, [r2, #112]	; 0x70
 8008e22:	4b7b      	ldr	r3, [pc, #492]	; (8009010 <HAL_RCC_OscConfig+0x788>)
 8008e24:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008e26:	4a7a      	ldr	r2, [pc, #488]	; (8009010 <HAL_RCC_OscConfig+0x788>)
 8008e28:	f023 0304 	bic.w	r3, r3, #4
 8008e2c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8008e2e:	687b      	ldr	r3, [r7, #4]
 8008e30:	689b      	ldr	r3, [r3, #8]
 8008e32:	2b00      	cmp	r3, #0
 8008e34:	d015      	beq.n	8008e62 <HAL_RCC_OscConfig+0x5da>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008e36:	f7fa fc5f 	bl	80036f8 <HAL_GetTick>
 8008e3a:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8008e3c:	e00a      	b.n	8008e54 <HAL_RCC_OscConfig+0x5cc>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8008e3e:	f7fa fc5b 	bl	80036f8 <HAL_GetTick>
 8008e42:	4602      	mov	r2, r0
 8008e44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e46:	1ad3      	subs	r3, r2, r3
 8008e48:	f241 3288 	movw	r2, #5000	; 0x1388
 8008e4c:	4293      	cmp	r3, r2
 8008e4e:	d901      	bls.n	8008e54 <HAL_RCC_OscConfig+0x5cc>
        {
          return HAL_TIMEOUT;
 8008e50:	2303      	movs	r3, #3
 8008e52:	e122      	b.n	800909a <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8008e54:	4b6e      	ldr	r3, [pc, #440]	; (8009010 <HAL_RCC_OscConfig+0x788>)
 8008e56:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008e58:	f003 0302 	and.w	r3, r3, #2
 8008e5c:	2b00      	cmp	r3, #0
 8008e5e:	d0ee      	beq.n	8008e3e <HAL_RCC_OscConfig+0x5b6>
 8008e60:	e014      	b.n	8008e8c <HAL_RCC_OscConfig+0x604>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008e62:	f7fa fc49 	bl	80036f8 <HAL_GetTick>
 8008e66:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8008e68:	e00a      	b.n	8008e80 <HAL_RCC_OscConfig+0x5f8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8008e6a:	f7fa fc45 	bl	80036f8 <HAL_GetTick>
 8008e6e:	4602      	mov	r2, r0
 8008e70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e72:	1ad3      	subs	r3, r2, r3
 8008e74:	f241 3288 	movw	r2, #5000	; 0x1388
 8008e78:	4293      	cmp	r3, r2
 8008e7a:	d901      	bls.n	8008e80 <HAL_RCC_OscConfig+0x5f8>
        {
          return HAL_TIMEOUT;
 8008e7c:	2303      	movs	r3, #3
 8008e7e:	e10c      	b.n	800909a <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8008e80:	4b63      	ldr	r3, [pc, #396]	; (8009010 <HAL_RCC_OscConfig+0x788>)
 8008e82:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008e84:	f003 0302 	and.w	r3, r3, #2
 8008e88:	2b00      	cmp	r3, #0
 8008e8a:	d1ee      	bne.n	8008e6a <HAL_RCC_OscConfig+0x5e2>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8008e8c:	687b      	ldr	r3, [r7, #4]
 8008e8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008e90:	2b00      	cmp	r3, #0
 8008e92:	f000 8101 	beq.w	8009098 <HAL_RCC_OscConfig+0x810>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8008e96:	4b5e      	ldr	r3, [pc, #376]	; (8009010 <HAL_RCC_OscConfig+0x788>)
 8008e98:	691b      	ldr	r3, [r3, #16]
 8008e9a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8008e9e:	2b18      	cmp	r3, #24
 8008ea0:	f000 80bc 	beq.w	800901c <HAL_RCC_OscConfig+0x794>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8008ea4:	687b      	ldr	r3, [r7, #4]
 8008ea6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008ea8:	2b02      	cmp	r3, #2
 8008eaa:	f040 8095 	bne.w	8008fd8 <HAL_RCC_OscConfig+0x750>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008eae:	4b58      	ldr	r3, [pc, #352]	; (8009010 <HAL_RCC_OscConfig+0x788>)
 8008eb0:	681b      	ldr	r3, [r3, #0]
 8008eb2:	4a57      	ldr	r2, [pc, #348]	; (8009010 <HAL_RCC_OscConfig+0x788>)
 8008eb4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8008eb8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008eba:	f7fa fc1d 	bl	80036f8 <HAL_GetTick>
 8008ebe:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8008ec0:	e008      	b.n	8008ed4 <HAL_RCC_OscConfig+0x64c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8008ec2:	f7fa fc19 	bl	80036f8 <HAL_GetTick>
 8008ec6:	4602      	mov	r2, r0
 8008ec8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008eca:	1ad3      	subs	r3, r2, r3
 8008ecc:	2b02      	cmp	r3, #2
 8008ece:	d901      	bls.n	8008ed4 <HAL_RCC_OscConfig+0x64c>
          {
            return HAL_TIMEOUT;
 8008ed0:	2303      	movs	r3, #3
 8008ed2:	e0e2      	b.n	800909a <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8008ed4:	4b4e      	ldr	r3, [pc, #312]	; (8009010 <HAL_RCC_OscConfig+0x788>)
 8008ed6:	681b      	ldr	r3, [r3, #0]
 8008ed8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008edc:	2b00      	cmp	r3, #0
 8008ede:	d1f0      	bne.n	8008ec2 <HAL_RCC_OscConfig+0x63a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8008ee0:	4b4b      	ldr	r3, [pc, #300]	; (8009010 <HAL_RCC_OscConfig+0x788>)
 8008ee2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8008ee4:	4b4b      	ldr	r3, [pc, #300]	; (8009014 <HAL_RCC_OscConfig+0x78c>)
 8008ee6:	4013      	ands	r3, r2
 8008ee8:	687a      	ldr	r2, [r7, #4]
 8008eea:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8008eec:	687a      	ldr	r2, [r7, #4]
 8008eee:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8008ef0:	0112      	lsls	r2, r2, #4
 8008ef2:	430a      	orrs	r2, r1
 8008ef4:	4946      	ldr	r1, [pc, #280]	; (8009010 <HAL_RCC_OscConfig+0x788>)
 8008ef6:	4313      	orrs	r3, r2
 8008ef8:	628b      	str	r3, [r1, #40]	; 0x28
 8008efa:	687b      	ldr	r3, [r7, #4]
 8008efc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008efe:	3b01      	subs	r3, #1
 8008f00:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8008f04:	687b      	ldr	r3, [r7, #4]
 8008f06:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008f08:	3b01      	subs	r3, #1
 8008f0a:	025b      	lsls	r3, r3, #9
 8008f0c:	b29b      	uxth	r3, r3
 8008f0e:	431a      	orrs	r2, r3
 8008f10:	687b      	ldr	r3, [r7, #4]
 8008f12:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008f14:	3b01      	subs	r3, #1
 8008f16:	041b      	lsls	r3, r3, #16
 8008f18:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8008f1c:	431a      	orrs	r2, r3
 8008f1e:	687b      	ldr	r3, [r7, #4]
 8008f20:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008f22:	3b01      	subs	r3, #1
 8008f24:	061b      	lsls	r3, r3, #24
 8008f26:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8008f2a:	4939      	ldr	r1, [pc, #228]	; (8009010 <HAL_RCC_OscConfig+0x788>)
 8008f2c:	4313      	orrs	r3, r2
 8008f2e:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 8008f30:	4b37      	ldr	r3, [pc, #220]	; (8009010 <HAL_RCC_OscConfig+0x788>)
 8008f32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008f34:	4a36      	ldr	r2, [pc, #216]	; (8009010 <HAL_RCC_OscConfig+0x788>)
 8008f36:	f023 0301 	bic.w	r3, r3, #1
 8008f3a:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8008f3c:	4b34      	ldr	r3, [pc, #208]	; (8009010 <HAL_RCC_OscConfig+0x788>)
 8008f3e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008f40:	4b35      	ldr	r3, [pc, #212]	; (8009018 <HAL_RCC_OscConfig+0x790>)
 8008f42:	4013      	ands	r3, r2
 8008f44:	687a      	ldr	r2, [r7, #4]
 8008f46:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8008f48:	00d2      	lsls	r2, r2, #3
 8008f4a:	4931      	ldr	r1, [pc, #196]	; (8009010 <HAL_RCC_OscConfig+0x788>)
 8008f4c:	4313      	orrs	r3, r2
 8008f4e:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8008f50:	4b2f      	ldr	r3, [pc, #188]	; (8009010 <HAL_RCC_OscConfig+0x788>)
 8008f52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008f54:	f023 020c 	bic.w	r2, r3, #12
 8008f58:	687b      	ldr	r3, [r7, #4]
 8008f5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008f5c:	492c      	ldr	r1, [pc, #176]	; (8009010 <HAL_RCC_OscConfig+0x788>)
 8008f5e:	4313      	orrs	r3, r2
 8008f60:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8008f62:	4b2b      	ldr	r3, [pc, #172]	; (8009010 <HAL_RCC_OscConfig+0x788>)
 8008f64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008f66:	f023 0202 	bic.w	r2, r3, #2
 8008f6a:	687b      	ldr	r3, [r7, #4]
 8008f6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008f6e:	4928      	ldr	r1, [pc, #160]	; (8009010 <HAL_RCC_OscConfig+0x788>)
 8008f70:	4313      	orrs	r3, r2
 8008f72:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8008f74:	4b26      	ldr	r3, [pc, #152]	; (8009010 <HAL_RCC_OscConfig+0x788>)
 8008f76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008f78:	4a25      	ldr	r2, [pc, #148]	; (8009010 <HAL_RCC_OscConfig+0x788>)
 8008f7a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008f7e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008f80:	4b23      	ldr	r3, [pc, #140]	; (8009010 <HAL_RCC_OscConfig+0x788>)
 8008f82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008f84:	4a22      	ldr	r2, [pc, #136]	; (8009010 <HAL_RCC_OscConfig+0x788>)
 8008f86:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008f8a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8008f8c:	4b20      	ldr	r3, [pc, #128]	; (8009010 <HAL_RCC_OscConfig+0x788>)
 8008f8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008f90:	4a1f      	ldr	r2, [pc, #124]	; (8009010 <HAL_RCC_OscConfig+0x788>)
 8008f92:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8008f96:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 8008f98:	4b1d      	ldr	r3, [pc, #116]	; (8009010 <HAL_RCC_OscConfig+0x788>)
 8008f9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008f9c:	4a1c      	ldr	r2, [pc, #112]	; (8009010 <HAL_RCC_OscConfig+0x788>)
 8008f9e:	f043 0301 	orr.w	r3, r3, #1
 8008fa2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8008fa4:	4b1a      	ldr	r3, [pc, #104]	; (8009010 <HAL_RCC_OscConfig+0x788>)
 8008fa6:	681b      	ldr	r3, [r3, #0]
 8008fa8:	4a19      	ldr	r2, [pc, #100]	; (8009010 <HAL_RCC_OscConfig+0x788>)
 8008faa:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8008fae:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008fb0:	f7fa fba2 	bl	80036f8 <HAL_GetTick>
 8008fb4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8008fb6:	e008      	b.n	8008fca <HAL_RCC_OscConfig+0x742>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8008fb8:	f7fa fb9e 	bl	80036f8 <HAL_GetTick>
 8008fbc:	4602      	mov	r2, r0
 8008fbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008fc0:	1ad3      	subs	r3, r2, r3
 8008fc2:	2b02      	cmp	r3, #2
 8008fc4:	d901      	bls.n	8008fca <HAL_RCC_OscConfig+0x742>
          {
            return HAL_TIMEOUT;
 8008fc6:	2303      	movs	r3, #3
 8008fc8:	e067      	b.n	800909a <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8008fca:	4b11      	ldr	r3, [pc, #68]	; (8009010 <HAL_RCC_OscConfig+0x788>)
 8008fcc:	681b      	ldr	r3, [r3, #0]
 8008fce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008fd2:	2b00      	cmp	r3, #0
 8008fd4:	d0f0      	beq.n	8008fb8 <HAL_RCC_OscConfig+0x730>
 8008fd6:	e05f      	b.n	8009098 <HAL_RCC_OscConfig+0x810>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008fd8:	4b0d      	ldr	r3, [pc, #52]	; (8009010 <HAL_RCC_OscConfig+0x788>)
 8008fda:	681b      	ldr	r3, [r3, #0]
 8008fdc:	4a0c      	ldr	r2, [pc, #48]	; (8009010 <HAL_RCC_OscConfig+0x788>)
 8008fde:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8008fe2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008fe4:	f7fa fb88 	bl	80036f8 <HAL_GetTick>
 8008fe8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8008fea:	e008      	b.n	8008ffe <HAL_RCC_OscConfig+0x776>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8008fec:	f7fa fb84 	bl	80036f8 <HAL_GetTick>
 8008ff0:	4602      	mov	r2, r0
 8008ff2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ff4:	1ad3      	subs	r3, r2, r3
 8008ff6:	2b02      	cmp	r3, #2
 8008ff8:	d901      	bls.n	8008ffe <HAL_RCC_OscConfig+0x776>
          {
            return HAL_TIMEOUT;
 8008ffa:	2303      	movs	r3, #3
 8008ffc:	e04d      	b.n	800909a <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8008ffe:	4b04      	ldr	r3, [pc, #16]	; (8009010 <HAL_RCC_OscConfig+0x788>)
 8009000:	681b      	ldr	r3, [r3, #0]
 8009002:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009006:	2b00      	cmp	r3, #0
 8009008:	d1f0      	bne.n	8008fec <HAL_RCC_OscConfig+0x764>
 800900a:	e045      	b.n	8009098 <HAL_RCC_OscConfig+0x810>
 800900c:	58024800 	.word	0x58024800
 8009010:	58024400 	.word	0x58024400
 8009014:	fffffc0c 	.word	0xfffffc0c
 8009018:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 800901c:	4b21      	ldr	r3, [pc, #132]	; (80090a4 <HAL_RCC_OscConfig+0x81c>)
 800901e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009020:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8009022:	4b20      	ldr	r3, [pc, #128]	; (80090a4 <HAL_RCC_OscConfig+0x81c>)
 8009024:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009026:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8009028:	687b      	ldr	r3, [r7, #4]
 800902a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800902c:	2b01      	cmp	r3, #1
 800902e:	d031      	beq.n	8009094 <HAL_RCC_OscConfig+0x80c>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8009030:	693b      	ldr	r3, [r7, #16]
 8009032:	f003 0203 	and.w	r2, r3, #3
 8009036:	687b      	ldr	r3, [r7, #4]
 8009038:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800903a:	429a      	cmp	r2, r3
 800903c:	d12a      	bne.n	8009094 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800903e:	693b      	ldr	r3, [r7, #16]
 8009040:	091b      	lsrs	r3, r3, #4
 8009042:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8009046:	687b      	ldr	r3, [r7, #4]
 8009048:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800904a:	429a      	cmp	r2, r3
 800904c:	d122      	bne.n	8009094 <HAL_RCC_OscConfig+0x80c>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800904e:	68fb      	ldr	r3, [r7, #12]
 8009050:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8009054:	687b      	ldr	r3, [r7, #4]
 8009056:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009058:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800905a:	429a      	cmp	r2, r3
 800905c:	d11a      	bne.n	8009094 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800905e:	68fb      	ldr	r3, [r7, #12]
 8009060:	0a5b      	lsrs	r3, r3, #9
 8009062:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8009066:	687b      	ldr	r3, [r7, #4]
 8009068:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800906a:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800906c:	429a      	cmp	r2, r3
 800906e:	d111      	bne.n	8009094 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8009070:	68fb      	ldr	r3, [r7, #12]
 8009072:	0c1b      	lsrs	r3, r3, #16
 8009074:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8009078:	687b      	ldr	r3, [r7, #4]
 800907a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800907c:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800907e:	429a      	cmp	r2, r3
 8009080:	d108      	bne.n	8009094 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8009082:	68fb      	ldr	r3, [r7, #12]
 8009084:	0e1b      	lsrs	r3, r3, #24
 8009086:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800908a:	687b      	ldr	r3, [r7, #4]
 800908c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800908e:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8009090:	429a      	cmp	r2, r3
 8009092:	d001      	beq.n	8009098 <HAL_RCC_OscConfig+0x810>
      {
        return HAL_ERROR;
 8009094:	2301      	movs	r3, #1
 8009096:	e000      	b.n	800909a <HAL_RCC_OscConfig+0x812>
      }
    }
  }
  return HAL_OK;
 8009098:	2300      	movs	r3, #0
}
 800909a:	4618      	mov	r0, r3
 800909c:	3730      	adds	r7, #48	; 0x30
 800909e:	46bd      	mov	sp, r7
 80090a0:	bd80      	pop	{r7, pc}
 80090a2:	bf00      	nop
 80090a4:	58024400 	.word	0x58024400

080090a8 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80090a8:	b580      	push	{r7, lr}
 80090aa:	b086      	sub	sp, #24
 80090ac:	af00      	add	r7, sp, #0
 80090ae:	6078      	str	r0, [r7, #4]
 80090b0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80090b2:	687b      	ldr	r3, [r7, #4]
 80090b4:	2b00      	cmp	r3, #0
 80090b6:	d101      	bne.n	80090bc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80090b8:	2301      	movs	r3, #1
 80090ba:	e19c      	b.n	80093f6 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80090bc:	4b8a      	ldr	r3, [pc, #552]	; (80092e8 <HAL_RCC_ClockConfig+0x240>)
 80090be:	681b      	ldr	r3, [r3, #0]
 80090c0:	f003 030f 	and.w	r3, r3, #15
 80090c4:	683a      	ldr	r2, [r7, #0]
 80090c6:	429a      	cmp	r2, r3
 80090c8:	d910      	bls.n	80090ec <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80090ca:	4b87      	ldr	r3, [pc, #540]	; (80092e8 <HAL_RCC_ClockConfig+0x240>)
 80090cc:	681b      	ldr	r3, [r3, #0]
 80090ce:	f023 020f 	bic.w	r2, r3, #15
 80090d2:	4985      	ldr	r1, [pc, #532]	; (80092e8 <HAL_RCC_ClockConfig+0x240>)
 80090d4:	683b      	ldr	r3, [r7, #0]
 80090d6:	4313      	orrs	r3, r2
 80090d8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80090da:	4b83      	ldr	r3, [pc, #524]	; (80092e8 <HAL_RCC_ClockConfig+0x240>)
 80090dc:	681b      	ldr	r3, [r3, #0]
 80090de:	f003 030f 	and.w	r3, r3, #15
 80090e2:	683a      	ldr	r2, [r7, #0]
 80090e4:	429a      	cmp	r2, r3
 80090e6:	d001      	beq.n	80090ec <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80090e8:	2301      	movs	r3, #1
 80090ea:	e184      	b.n	80093f6 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80090ec:	687b      	ldr	r3, [r7, #4]
 80090ee:	681b      	ldr	r3, [r3, #0]
 80090f0:	f003 0304 	and.w	r3, r3, #4
 80090f4:	2b00      	cmp	r3, #0
 80090f6:	d010      	beq.n	800911a <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80090f8:	687b      	ldr	r3, [r7, #4]
 80090fa:	691a      	ldr	r2, [r3, #16]
 80090fc:	4b7b      	ldr	r3, [pc, #492]	; (80092ec <HAL_RCC_ClockConfig+0x244>)
 80090fe:	699b      	ldr	r3, [r3, #24]
 8009100:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8009104:	429a      	cmp	r2, r3
 8009106:	d908      	bls.n	800911a <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8009108:	4b78      	ldr	r3, [pc, #480]	; (80092ec <HAL_RCC_ClockConfig+0x244>)
 800910a:	699b      	ldr	r3, [r3, #24]
 800910c:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8009110:	687b      	ldr	r3, [r7, #4]
 8009112:	691b      	ldr	r3, [r3, #16]
 8009114:	4975      	ldr	r1, [pc, #468]	; (80092ec <HAL_RCC_ClockConfig+0x244>)
 8009116:	4313      	orrs	r3, r2
 8009118:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800911a:	687b      	ldr	r3, [r7, #4]
 800911c:	681b      	ldr	r3, [r3, #0]
 800911e:	f003 0308 	and.w	r3, r3, #8
 8009122:	2b00      	cmp	r3, #0
 8009124:	d010      	beq.n	8009148 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8009126:	687b      	ldr	r3, [r7, #4]
 8009128:	695a      	ldr	r2, [r3, #20]
 800912a:	4b70      	ldr	r3, [pc, #448]	; (80092ec <HAL_RCC_ClockConfig+0x244>)
 800912c:	69db      	ldr	r3, [r3, #28]
 800912e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8009132:	429a      	cmp	r2, r3
 8009134:	d908      	bls.n	8009148 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8009136:	4b6d      	ldr	r3, [pc, #436]	; (80092ec <HAL_RCC_ClockConfig+0x244>)
 8009138:	69db      	ldr	r3, [r3, #28]
 800913a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800913e:	687b      	ldr	r3, [r7, #4]
 8009140:	695b      	ldr	r3, [r3, #20]
 8009142:	496a      	ldr	r1, [pc, #424]	; (80092ec <HAL_RCC_ClockConfig+0x244>)
 8009144:	4313      	orrs	r3, r2
 8009146:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8009148:	687b      	ldr	r3, [r7, #4]
 800914a:	681b      	ldr	r3, [r3, #0]
 800914c:	f003 0310 	and.w	r3, r3, #16
 8009150:	2b00      	cmp	r3, #0
 8009152:	d010      	beq.n	8009176 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8009154:	687b      	ldr	r3, [r7, #4]
 8009156:	699a      	ldr	r2, [r3, #24]
 8009158:	4b64      	ldr	r3, [pc, #400]	; (80092ec <HAL_RCC_ClockConfig+0x244>)
 800915a:	69db      	ldr	r3, [r3, #28]
 800915c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8009160:	429a      	cmp	r2, r3
 8009162:	d908      	bls.n	8009176 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8009164:	4b61      	ldr	r3, [pc, #388]	; (80092ec <HAL_RCC_ClockConfig+0x244>)
 8009166:	69db      	ldr	r3, [r3, #28]
 8009168:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800916c:	687b      	ldr	r3, [r7, #4]
 800916e:	699b      	ldr	r3, [r3, #24]
 8009170:	495e      	ldr	r1, [pc, #376]	; (80092ec <HAL_RCC_ClockConfig+0x244>)
 8009172:	4313      	orrs	r3, r2
 8009174:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8009176:	687b      	ldr	r3, [r7, #4]
 8009178:	681b      	ldr	r3, [r3, #0]
 800917a:	f003 0320 	and.w	r3, r3, #32
 800917e:	2b00      	cmp	r3, #0
 8009180:	d010      	beq.n	80091a4 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8009182:	687b      	ldr	r3, [r7, #4]
 8009184:	69da      	ldr	r2, [r3, #28]
 8009186:	4b59      	ldr	r3, [pc, #356]	; (80092ec <HAL_RCC_ClockConfig+0x244>)
 8009188:	6a1b      	ldr	r3, [r3, #32]
 800918a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800918e:	429a      	cmp	r2, r3
 8009190:	d908      	bls.n	80091a4 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8009192:	4b56      	ldr	r3, [pc, #344]	; (80092ec <HAL_RCC_ClockConfig+0x244>)
 8009194:	6a1b      	ldr	r3, [r3, #32]
 8009196:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800919a:	687b      	ldr	r3, [r7, #4]
 800919c:	69db      	ldr	r3, [r3, #28]
 800919e:	4953      	ldr	r1, [pc, #332]	; (80092ec <HAL_RCC_ClockConfig+0x244>)
 80091a0:	4313      	orrs	r3, r2
 80091a2:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80091a4:	687b      	ldr	r3, [r7, #4]
 80091a6:	681b      	ldr	r3, [r3, #0]
 80091a8:	f003 0302 	and.w	r3, r3, #2
 80091ac:	2b00      	cmp	r3, #0
 80091ae:	d010      	beq.n	80091d2 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80091b0:	687b      	ldr	r3, [r7, #4]
 80091b2:	68da      	ldr	r2, [r3, #12]
 80091b4:	4b4d      	ldr	r3, [pc, #308]	; (80092ec <HAL_RCC_ClockConfig+0x244>)
 80091b6:	699b      	ldr	r3, [r3, #24]
 80091b8:	f003 030f 	and.w	r3, r3, #15
 80091bc:	429a      	cmp	r2, r3
 80091be:	d908      	bls.n	80091d2 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80091c0:	4b4a      	ldr	r3, [pc, #296]	; (80092ec <HAL_RCC_ClockConfig+0x244>)
 80091c2:	699b      	ldr	r3, [r3, #24]
 80091c4:	f023 020f 	bic.w	r2, r3, #15
 80091c8:	687b      	ldr	r3, [r7, #4]
 80091ca:	68db      	ldr	r3, [r3, #12]
 80091cc:	4947      	ldr	r1, [pc, #284]	; (80092ec <HAL_RCC_ClockConfig+0x244>)
 80091ce:	4313      	orrs	r3, r2
 80091d0:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80091d2:	687b      	ldr	r3, [r7, #4]
 80091d4:	681b      	ldr	r3, [r3, #0]
 80091d6:	f003 0301 	and.w	r3, r3, #1
 80091da:	2b00      	cmp	r3, #0
 80091dc:	d055      	beq.n	800928a <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 80091de:	4b43      	ldr	r3, [pc, #268]	; (80092ec <HAL_RCC_ClockConfig+0x244>)
 80091e0:	699b      	ldr	r3, [r3, #24]
 80091e2:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 80091e6:	687b      	ldr	r3, [r7, #4]
 80091e8:	689b      	ldr	r3, [r3, #8]
 80091ea:	4940      	ldr	r1, [pc, #256]	; (80092ec <HAL_RCC_ClockConfig+0x244>)
 80091ec:	4313      	orrs	r3, r2
 80091ee:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80091f0:	687b      	ldr	r3, [r7, #4]
 80091f2:	685b      	ldr	r3, [r3, #4]
 80091f4:	2b02      	cmp	r3, #2
 80091f6:	d107      	bne.n	8009208 <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80091f8:	4b3c      	ldr	r3, [pc, #240]	; (80092ec <HAL_RCC_ClockConfig+0x244>)
 80091fa:	681b      	ldr	r3, [r3, #0]
 80091fc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009200:	2b00      	cmp	r3, #0
 8009202:	d121      	bne.n	8009248 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8009204:	2301      	movs	r3, #1
 8009206:	e0f6      	b.n	80093f6 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8009208:	687b      	ldr	r3, [r7, #4]
 800920a:	685b      	ldr	r3, [r3, #4]
 800920c:	2b03      	cmp	r3, #3
 800920e:	d107      	bne.n	8009220 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8009210:	4b36      	ldr	r3, [pc, #216]	; (80092ec <HAL_RCC_ClockConfig+0x244>)
 8009212:	681b      	ldr	r3, [r3, #0]
 8009214:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009218:	2b00      	cmp	r3, #0
 800921a:	d115      	bne.n	8009248 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 800921c:	2301      	movs	r3, #1
 800921e:	e0ea      	b.n	80093f6 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8009220:	687b      	ldr	r3, [r7, #4]
 8009222:	685b      	ldr	r3, [r3, #4]
 8009224:	2b01      	cmp	r3, #1
 8009226:	d107      	bne.n	8009238 <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8009228:	4b30      	ldr	r3, [pc, #192]	; (80092ec <HAL_RCC_ClockConfig+0x244>)
 800922a:	681b      	ldr	r3, [r3, #0]
 800922c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009230:	2b00      	cmp	r3, #0
 8009232:	d109      	bne.n	8009248 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8009234:	2301      	movs	r3, #1
 8009236:	e0de      	b.n	80093f6 <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8009238:	4b2c      	ldr	r3, [pc, #176]	; (80092ec <HAL_RCC_ClockConfig+0x244>)
 800923a:	681b      	ldr	r3, [r3, #0]
 800923c:	f003 0304 	and.w	r3, r3, #4
 8009240:	2b00      	cmp	r3, #0
 8009242:	d101      	bne.n	8009248 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8009244:	2301      	movs	r3, #1
 8009246:	e0d6      	b.n	80093f6 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8009248:	4b28      	ldr	r3, [pc, #160]	; (80092ec <HAL_RCC_ClockConfig+0x244>)
 800924a:	691b      	ldr	r3, [r3, #16]
 800924c:	f023 0207 	bic.w	r2, r3, #7
 8009250:	687b      	ldr	r3, [r7, #4]
 8009252:	685b      	ldr	r3, [r3, #4]
 8009254:	4925      	ldr	r1, [pc, #148]	; (80092ec <HAL_RCC_ClockConfig+0x244>)
 8009256:	4313      	orrs	r3, r2
 8009258:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800925a:	f7fa fa4d 	bl	80036f8 <HAL_GetTick>
 800925e:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8009260:	e00a      	b.n	8009278 <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8009262:	f7fa fa49 	bl	80036f8 <HAL_GetTick>
 8009266:	4602      	mov	r2, r0
 8009268:	697b      	ldr	r3, [r7, #20]
 800926a:	1ad3      	subs	r3, r2, r3
 800926c:	f241 3288 	movw	r2, #5000	; 0x1388
 8009270:	4293      	cmp	r3, r2
 8009272:	d901      	bls.n	8009278 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8009274:	2303      	movs	r3, #3
 8009276:	e0be      	b.n	80093f6 <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8009278:	4b1c      	ldr	r3, [pc, #112]	; (80092ec <HAL_RCC_ClockConfig+0x244>)
 800927a:	691b      	ldr	r3, [r3, #16]
 800927c:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8009280:	687b      	ldr	r3, [r7, #4]
 8009282:	685b      	ldr	r3, [r3, #4]
 8009284:	00db      	lsls	r3, r3, #3
 8009286:	429a      	cmp	r2, r3
 8009288:	d1eb      	bne.n	8009262 <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800928a:	687b      	ldr	r3, [r7, #4]
 800928c:	681b      	ldr	r3, [r3, #0]
 800928e:	f003 0302 	and.w	r3, r3, #2
 8009292:	2b00      	cmp	r3, #0
 8009294:	d010      	beq.n	80092b8 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8009296:	687b      	ldr	r3, [r7, #4]
 8009298:	68da      	ldr	r2, [r3, #12]
 800929a:	4b14      	ldr	r3, [pc, #80]	; (80092ec <HAL_RCC_ClockConfig+0x244>)
 800929c:	699b      	ldr	r3, [r3, #24]
 800929e:	f003 030f 	and.w	r3, r3, #15
 80092a2:	429a      	cmp	r2, r3
 80092a4:	d208      	bcs.n	80092b8 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80092a6:	4b11      	ldr	r3, [pc, #68]	; (80092ec <HAL_RCC_ClockConfig+0x244>)
 80092a8:	699b      	ldr	r3, [r3, #24]
 80092aa:	f023 020f 	bic.w	r2, r3, #15
 80092ae:	687b      	ldr	r3, [r7, #4]
 80092b0:	68db      	ldr	r3, [r3, #12]
 80092b2:	490e      	ldr	r1, [pc, #56]	; (80092ec <HAL_RCC_ClockConfig+0x244>)
 80092b4:	4313      	orrs	r3, r2
 80092b6:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80092b8:	4b0b      	ldr	r3, [pc, #44]	; (80092e8 <HAL_RCC_ClockConfig+0x240>)
 80092ba:	681b      	ldr	r3, [r3, #0]
 80092bc:	f003 030f 	and.w	r3, r3, #15
 80092c0:	683a      	ldr	r2, [r7, #0]
 80092c2:	429a      	cmp	r2, r3
 80092c4:	d214      	bcs.n	80092f0 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80092c6:	4b08      	ldr	r3, [pc, #32]	; (80092e8 <HAL_RCC_ClockConfig+0x240>)
 80092c8:	681b      	ldr	r3, [r3, #0]
 80092ca:	f023 020f 	bic.w	r2, r3, #15
 80092ce:	4906      	ldr	r1, [pc, #24]	; (80092e8 <HAL_RCC_ClockConfig+0x240>)
 80092d0:	683b      	ldr	r3, [r7, #0]
 80092d2:	4313      	orrs	r3, r2
 80092d4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80092d6:	4b04      	ldr	r3, [pc, #16]	; (80092e8 <HAL_RCC_ClockConfig+0x240>)
 80092d8:	681b      	ldr	r3, [r3, #0]
 80092da:	f003 030f 	and.w	r3, r3, #15
 80092de:	683a      	ldr	r2, [r7, #0]
 80092e0:	429a      	cmp	r2, r3
 80092e2:	d005      	beq.n	80092f0 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 80092e4:	2301      	movs	r3, #1
 80092e6:	e086      	b.n	80093f6 <HAL_RCC_ClockConfig+0x34e>
 80092e8:	52002000 	.word	0x52002000
 80092ec:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80092f0:	687b      	ldr	r3, [r7, #4]
 80092f2:	681b      	ldr	r3, [r3, #0]
 80092f4:	f003 0304 	and.w	r3, r3, #4
 80092f8:	2b00      	cmp	r3, #0
 80092fa:	d010      	beq.n	800931e <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80092fc:	687b      	ldr	r3, [r7, #4]
 80092fe:	691a      	ldr	r2, [r3, #16]
 8009300:	4b3f      	ldr	r3, [pc, #252]	; (8009400 <HAL_RCC_ClockConfig+0x358>)
 8009302:	699b      	ldr	r3, [r3, #24]
 8009304:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8009308:	429a      	cmp	r2, r3
 800930a:	d208      	bcs.n	800931e <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800930c:	4b3c      	ldr	r3, [pc, #240]	; (8009400 <HAL_RCC_ClockConfig+0x358>)
 800930e:	699b      	ldr	r3, [r3, #24]
 8009310:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8009314:	687b      	ldr	r3, [r7, #4]
 8009316:	691b      	ldr	r3, [r3, #16]
 8009318:	4939      	ldr	r1, [pc, #228]	; (8009400 <HAL_RCC_ClockConfig+0x358>)
 800931a:	4313      	orrs	r3, r2
 800931c:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800931e:	687b      	ldr	r3, [r7, #4]
 8009320:	681b      	ldr	r3, [r3, #0]
 8009322:	f003 0308 	and.w	r3, r3, #8
 8009326:	2b00      	cmp	r3, #0
 8009328:	d010      	beq.n	800934c <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800932a:	687b      	ldr	r3, [r7, #4]
 800932c:	695a      	ldr	r2, [r3, #20]
 800932e:	4b34      	ldr	r3, [pc, #208]	; (8009400 <HAL_RCC_ClockConfig+0x358>)
 8009330:	69db      	ldr	r3, [r3, #28]
 8009332:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8009336:	429a      	cmp	r2, r3
 8009338:	d208      	bcs.n	800934c <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800933a:	4b31      	ldr	r3, [pc, #196]	; (8009400 <HAL_RCC_ClockConfig+0x358>)
 800933c:	69db      	ldr	r3, [r3, #28]
 800933e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8009342:	687b      	ldr	r3, [r7, #4]
 8009344:	695b      	ldr	r3, [r3, #20]
 8009346:	492e      	ldr	r1, [pc, #184]	; (8009400 <HAL_RCC_ClockConfig+0x358>)
 8009348:	4313      	orrs	r3, r2
 800934a:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800934c:	687b      	ldr	r3, [r7, #4]
 800934e:	681b      	ldr	r3, [r3, #0]
 8009350:	f003 0310 	and.w	r3, r3, #16
 8009354:	2b00      	cmp	r3, #0
 8009356:	d010      	beq.n	800937a <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8009358:	687b      	ldr	r3, [r7, #4]
 800935a:	699a      	ldr	r2, [r3, #24]
 800935c:	4b28      	ldr	r3, [pc, #160]	; (8009400 <HAL_RCC_ClockConfig+0x358>)
 800935e:	69db      	ldr	r3, [r3, #28]
 8009360:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8009364:	429a      	cmp	r2, r3
 8009366:	d208      	bcs.n	800937a <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8009368:	4b25      	ldr	r3, [pc, #148]	; (8009400 <HAL_RCC_ClockConfig+0x358>)
 800936a:	69db      	ldr	r3, [r3, #28]
 800936c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8009370:	687b      	ldr	r3, [r7, #4]
 8009372:	699b      	ldr	r3, [r3, #24]
 8009374:	4922      	ldr	r1, [pc, #136]	; (8009400 <HAL_RCC_ClockConfig+0x358>)
 8009376:	4313      	orrs	r3, r2
 8009378:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800937a:	687b      	ldr	r3, [r7, #4]
 800937c:	681b      	ldr	r3, [r3, #0]
 800937e:	f003 0320 	and.w	r3, r3, #32
 8009382:	2b00      	cmp	r3, #0
 8009384:	d010      	beq.n	80093a8 <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8009386:	687b      	ldr	r3, [r7, #4]
 8009388:	69da      	ldr	r2, [r3, #28]
 800938a:	4b1d      	ldr	r3, [pc, #116]	; (8009400 <HAL_RCC_ClockConfig+0x358>)
 800938c:	6a1b      	ldr	r3, [r3, #32]
 800938e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8009392:	429a      	cmp	r2, r3
 8009394:	d208      	bcs.n	80093a8 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8009396:	4b1a      	ldr	r3, [pc, #104]	; (8009400 <HAL_RCC_ClockConfig+0x358>)
 8009398:	6a1b      	ldr	r3, [r3, #32]
 800939a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800939e:	687b      	ldr	r3, [r7, #4]
 80093a0:	69db      	ldr	r3, [r3, #28]
 80093a2:	4917      	ldr	r1, [pc, #92]	; (8009400 <HAL_RCC_ClockConfig+0x358>)
 80093a4:	4313      	orrs	r3, r2
 80093a6:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80093a8:	f000 f844 	bl	8009434 <HAL_RCC_GetSysClockFreq>
 80093ac:	4601      	mov	r1, r0
 80093ae:	4b14      	ldr	r3, [pc, #80]	; (8009400 <HAL_RCC_ClockConfig+0x358>)
 80093b0:	699b      	ldr	r3, [r3, #24]
 80093b2:	0a1b      	lsrs	r3, r3, #8
 80093b4:	f003 030f 	and.w	r3, r3, #15
 80093b8:	4a12      	ldr	r2, [pc, #72]	; (8009404 <HAL_RCC_ClockConfig+0x35c>)
 80093ba:	5cd3      	ldrb	r3, [r2, r3]
 80093bc:	f003 031f 	and.w	r3, r3, #31
 80093c0:	fa21 f303 	lsr.w	r3, r1, r3
 80093c4:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80093c6:	4b0e      	ldr	r3, [pc, #56]	; (8009400 <HAL_RCC_ClockConfig+0x358>)
 80093c8:	699b      	ldr	r3, [r3, #24]
 80093ca:	f003 030f 	and.w	r3, r3, #15
 80093ce:	4a0d      	ldr	r2, [pc, #52]	; (8009404 <HAL_RCC_ClockConfig+0x35c>)
 80093d0:	5cd3      	ldrb	r3, [r2, r3]
 80093d2:	f003 031f 	and.w	r3, r3, #31
 80093d6:	693a      	ldr	r2, [r7, #16]
 80093d8:	fa22 f303 	lsr.w	r3, r2, r3
 80093dc:	4a0a      	ldr	r2, [pc, #40]	; (8009408 <HAL_RCC_ClockConfig+0x360>)
 80093de:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80093e0:	4a0a      	ldr	r2, [pc, #40]	; (800940c <HAL_RCC_ClockConfig+0x364>)
 80093e2:	693b      	ldr	r3, [r7, #16]
 80093e4:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 80093e6:	4b0a      	ldr	r3, [pc, #40]	; (8009410 <HAL_RCC_ClockConfig+0x368>)
 80093e8:	681b      	ldr	r3, [r3, #0]
 80093ea:	4618      	mov	r0, r3
 80093ec:	f7fa f93a 	bl	8003664 <HAL_InitTick>
 80093f0:	4603      	mov	r3, r0
 80093f2:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 80093f4:	7bfb      	ldrb	r3, [r7, #15]
}
 80093f6:	4618      	mov	r0, r3
 80093f8:	3718      	adds	r7, #24
 80093fa:	46bd      	mov	sp, r7
 80093fc:	bd80      	pop	{r7, pc}
 80093fe:	bf00      	nop
 8009400:	58024400 	.word	0x58024400
 8009404:	0801a014 	.word	0x0801a014
 8009408:	24000010 	.word	0x24000010
 800940c:	2400000c 	.word	0x2400000c
 8009410:	24000014 	.word	0x24000014

08009414 <HAL_RCC_EnableCSS>:
  *         allowing the MCU to perform rescue operations. The CSSI is linked to
  *         the Cortex-M NMI (Non-Mask-able Interrupt) exception vector.
  * @retval None
  */
void HAL_RCC_EnableCSS(void)
{
 8009414:	b480      	push	{r7}
 8009416:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_CSSHSEON) ;
 8009418:	4b05      	ldr	r3, [pc, #20]	; (8009430 <HAL_RCC_EnableCSS+0x1c>)
 800941a:	681b      	ldr	r3, [r3, #0]
 800941c:	4a04      	ldr	r2, [pc, #16]	; (8009430 <HAL_RCC_EnableCSS+0x1c>)
 800941e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8009422:	6013      	str	r3, [r2, #0]
}
 8009424:	bf00      	nop
 8009426:	46bd      	mov	sp, r7
 8009428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800942c:	4770      	bx	lr
 800942e:	bf00      	nop
 8009430:	58024400 	.word	0x58024400

08009434 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8009434:	b480      	push	{r7}
 8009436:	b089      	sub	sp, #36	; 0x24
 8009438:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 800943a:	4baf      	ldr	r3, [pc, #700]	; (80096f8 <HAL_RCC_GetSysClockFreq+0x2c4>)
 800943c:	691b      	ldr	r3, [r3, #16]
 800943e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8009442:	2b18      	cmp	r3, #24
 8009444:	f200 814e 	bhi.w	80096e4 <HAL_RCC_GetSysClockFreq+0x2b0>
 8009448:	a201      	add	r2, pc, #4	; (adr r2, 8009450 <HAL_RCC_GetSysClockFreq+0x1c>)
 800944a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800944e:	bf00      	nop
 8009450:	080094b5 	.word	0x080094b5
 8009454:	080096e5 	.word	0x080096e5
 8009458:	080096e5 	.word	0x080096e5
 800945c:	080096e5 	.word	0x080096e5
 8009460:	080096e5 	.word	0x080096e5
 8009464:	080096e5 	.word	0x080096e5
 8009468:	080096e5 	.word	0x080096e5
 800946c:	080096e5 	.word	0x080096e5
 8009470:	080094db 	.word	0x080094db
 8009474:	080096e5 	.word	0x080096e5
 8009478:	080096e5 	.word	0x080096e5
 800947c:	080096e5 	.word	0x080096e5
 8009480:	080096e5 	.word	0x080096e5
 8009484:	080096e5 	.word	0x080096e5
 8009488:	080096e5 	.word	0x080096e5
 800948c:	080096e5 	.word	0x080096e5
 8009490:	080094e1 	.word	0x080094e1
 8009494:	080096e5 	.word	0x080096e5
 8009498:	080096e5 	.word	0x080096e5
 800949c:	080096e5 	.word	0x080096e5
 80094a0:	080096e5 	.word	0x080096e5
 80094a4:	080096e5 	.word	0x080096e5
 80094a8:	080096e5 	.word	0x080096e5
 80094ac:	080096e5 	.word	0x080096e5
 80094b0:	080094e7 	.word	0x080094e7
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80094b4:	4b90      	ldr	r3, [pc, #576]	; (80096f8 <HAL_RCC_GetSysClockFreq+0x2c4>)
 80094b6:	681b      	ldr	r3, [r3, #0]
 80094b8:	f003 0320 	and.w	r3, r3, #32
 80094bc:	2b00      	cmp	r3, #0
 80094be:	d009      	beq.n	80094d4 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80094c0:	4b8d      	ldr	r3, [pc, #564]	; (80096f8 <HAL_RCC_GetSysClockFreq+0x2c4>)
 80094c2:	681b      	ldr	r3, [r3, #0]
 80094c4:	08db      	lsrs	r3, r3, #3
 80094c6:	f003 0303 	and.w	r3, r3, #3
 80094ca:	4a8c      	ldr	r2, [pc, #560]	; (80096fc <HAL_RCC_GetSysClockFreq+0x2c8>)
 80094cc:	fa22 f303 	lsr.w	r3, r2, r3
 80094d0:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 80094d2:	e10a      	b.n	80096ea <HAL_RCC_GetSysClockFreq+0x2b6>
        sysclockfreq = (uint32_t) HSI_VALUE;
 80094d4:	4b89      	ldr	r3, [pc, #548]	; (80096fc <HAL_RCC_GetSysClockFreq+0x2c8>)
 80094d6:	61bb      	str	r3, [r7, #24]
    break;
 80094d8:	e107      	b.n	80096ea <HAL_RCC_GetSysClockFreq+0x2b6>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 80094da:	4b89      	ldr	r3, [pc, #548]	; (8009700 <HAL_RCC_GetSysClockFreq+0x2cc>)
 80094dc:	61bb      	str	r3, [r7, #24]
    break;
 80094de:	e104      	b.n	80096ea <HAL_RCC_GetSysClockFreq+0x2b6>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 80094e0:	4b88      	ldr	r3, [pc, #544]	; (8009704 <HAL_RCC_GetSysClockFreq+0x2d0>)
 80094e2:	61bb      	str	r3, [r7, #24]
    break;
 80094e4:	e101      	b.n	80096ea <HAL_RCC_GetSysClockFreq+0x2b6>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80094e6:	4b84      	ldr	r3, [pc, #528]	; (80096f8 <HAL_RCC_GetSysClockFreq+0x2c4>)
 80094e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80094ea:	f003 0303 	and.w	r3, r3, #3
 80094ee:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 80094f0:	4b81      	ldr	r3, [pc, #516]	; (80096f8 <HAL_RCC_GetSysClockFreq+0x2c4>)
 80094f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80094f4:	091b      	lsrs	r3, r3, #4
 80094f6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80094fa:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 80094fc:	4b7e      	ldr	r3, [pc, #504]	; (80096f8 <HAL_RCC_GetSysClockFreq+0x2c4>)
 80094fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009500:	f003 0301 	and.w	r3, r3, #1
 8009504:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8009506:	4b7c      	ldr	r3, [pc, #496]	; (80096f8 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8009508:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800950a:	08db      	lsrs	r3, r3, #3
 800950c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8009510:	68fa      	ldr	r2, [r7, #12]
 8009512:	fb02 f303 	mul.w	r3, r2, r3
 8009516:	ee07 3a90 	vmov	s15, r3
 800951a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800951e:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 8009522:	693b      	ldr	r3, [r7, #16]
 8009524:	2b00      	cmp	r3, #0
 8009526:	f000 80da 	beq.w	80096de <HAL_RCC_GetSysClockFreq+0x2aa>
    {
      switch (pllsource)
 800952a:	697b      	ldr	r3, [r7, #20]
 800952c:	2b01      	cmp	r3, #1
 800952e:	d05a      	beq.n	80095e6 <HAL_RCC_GetSysClockFreq+0x1b2>
 8009530:	2b01      	cmp	r3, #1
 8009532:	d302      	bcc.n	800953a <HAL_RCC_GetSysClockFreq+0x106>
 8009534:	2b02      	cmp	r3, #2
 8009536:	d078      	beq.n	800962a <HAL_RCC_GetSysClockFreq+0x1f6>
 8009538:	e099      	b.n	800966e <HAL_RCC_GetSysClockFreq+0x23a>
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800953a:	4b6f      	ldr	r3, [pc, #444]	; (80096f8 <HAL_RCC_GetSysClockFreq+0x2c4>)
 800953c:	681b      	ldr	r3, [r3, #0]
 800953e:	f003 0320 	and.w	r3, r3, #32
 8009542:	2b00      	cmp	r3, #0
 8009544:	d02d      	beq.n	80095a2 <HAL_RCC_GetSysClockFreq+0x16e>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8009546:	4b6c      	ldr	r3, [pc, #432]	; (80096f8 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8009548:	681b      	ldr	r3, [r3, #0]
 800954a:	08db      	lsrs	r3, r3, #3
 800954c:	f003 0303 	and.w	r3, r3, #3
 8009550:	4a6a      	ldr	r2, [pc, #424]	; (80096fc <HAL_RCC_GetSysClockFreq+0x2c8>)
 8009552:	fa22 f303 	lsr.w	r3, r2, r3
 8009556:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8009558:	687b      	ldr	r3, [r7, #4]
 800955a:	ee07 3a90 	vmov	s15, r3
 800955e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009562:	693b      	ldr	r3, [r7, #16]
 8009564:	ee07 3a90 	vmov	s15, r3
 8009568:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800956c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009570:	4b61      	ldr	r3, [pc, #388]	; (80096f8 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8009572:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009574:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009578:	ee07 3a90 	vmov	s15, r3
 800957c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009580:	ed97 6a02 	vldr	s12, [r7, #8]
 8009584:	eddf 5a60 	vldr	s11, [pc, #384]	; 8009708 <HAL_RCC_GetSysClockFreq+0x2d4>
 8009588:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800958c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009590:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009594:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009598:	ee67 7a27 	vmul.f32	s15, s14, s15
 800959c:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 80095a0:	e087      	b.n	80096b2 <HAL_RCC_GetSysClockFreq+0x27e>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80095a2:	693b      	ldr	r3, [r7, #16]
 80095a4:	ee07 3a90 	vmov	s15, r3
 80095a8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80095ac:	eddf 6a57 	vldr	s13, [pc, #348]	; 800970c <HAL_RCC_GetSysClockFreq+0x2d8>
 80095b0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80095b4:	4b50      	ldr	r3, [pc, #320]	; (80096f8 <HAL_RCC_GetSysClockFreq+0x2c4>)
 80095b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80095b8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80095bc:	ee07 3a90 	vmov	s15, r3
 80095c0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80095c4:	ed97 6a02 	vldr	s12, [r7, #8]
 80095c8:	eddf 5a4f 	vldr	s11, [pc, #316]	; 8009708 <HAL_RCC_GetSysClockFreq+0x2d4>
 80095cc:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80095d0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80095d4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80095d8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80095dc:	ee67 7a27 	vmul.f32	s15, s14, s15
 80095e0:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80095e4:	e065      	b.n	80096b2 <HAL_RCC_GetSysClockFreq+0x27e>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80095e6:	693b      	ldr	r3, [r7, #16]
 80095e8:	ee07 3a90 	vmov	s15, r3
 80095ec:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80095f0:	eddf 6a47 	vldr	s13, [pc, #284]	; 8009710 <HAL_RCC_GetSysClockFreq+0x2dc>
 80095f4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80095f8:	4b3f      	ldr	r3, [pc, #252]	; (80096f8 <HAL_RCC_GetSysClockFreq+0x2c4>)
 80095fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80095fc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009600:	ee07 3a90 	vmov	s15, r3
 8009604:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009608:	ed97 6a02 	vldr	s12, [r7, #8]
 800960c:	eddf 5a3e 	vldr	s11, [pc, #248]	; 8009708 <HAL_RCC_GetSysClockFreq+0x2d4>
 8009610:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009614:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009618:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800961c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009620:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009624:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009628:	e043      	b.n	80096b2 <HAL_RCC_GetSysClockFreq+0x27e>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800962a:	693b      	ldr	r3, [r7, #16]
 800962c:	ee07 3a90 	vmov	s15, r3
 8009630:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009634:	eddf 6a37 	vldr	s13, [pc, #220]	; 8009714 <HAL_RCC_GetSysClockFreq+0x2e0>
 8009638:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800963c:	4b2e      	ldr	r3, [pc, #184]	; (80096f8 <HAL_RCC_GetSysClockFreq+0x2c4>)
 800963e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009640:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009644:	ee07 3a90 	vmov	s15, r3
 8009648:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800964c:	ed97 6a02 	vldr	s12, [r7, #8]
 8009650:	eddf 5a2d 	vldr	s11, [pc, #180]	; 8009708 <HAL_RCC_GetSysClockFreq+0x2d4>
 8009654:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009658:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800965c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009660:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009664:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009668:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800966c:	e021      	b.n	80096b2 <HAL_RCC_GetSysClockFreq+0x27e>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800966e:	693b      	ldr	r3, [r7, #16]
 8009670:	ee07 3a90 	vmov	s15, r3
 8009674:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009678:	eddf 6a25 	vldr	s13, [pc, #148]	; 8009710 <HAL_RCC_GetSysClockFreq+0x2dc>
 800967c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009680:	4b1d      	ldr	r3, [pc, #116]	; (80096f8 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8009682:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009684:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009688:	ee07 3a90 	vmov	s15, r3
 800968c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009690:	ed97 6a02 	vldr	s12, [r7, #8]
 8009694:	eddf 5a1c 	vldr	s11, [pc, #112]	; 8009708 <HAL_RCC_GetSysClockFreq+0x2d4>
 8009698:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800969c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80096a0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80096a4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80096a8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80096ac:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80096b0:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 80096b2:	4b11      	ldr	r3, [pc, #68]	; (80096f8 <HAL_RCC_GetSysClockFreq+0x2c4>)
 80096b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80096b6:	0a5b      	lsrs	r3, r3, #9
 80096b8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80096bc:	3301      	adds	r3, #1
 80096be:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 80096c0:	683b      	ldr	r3, [r7, #0]
 80096c2:	ee07 3a90 	vmov	s15, r3
 80096c6:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80096ca:	edd7 6a07 	vldr	s13, [r7, #28]
 80096ce:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80096d2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80096d6:	ee17 3a90 	vmov	r3, s15
 80096da:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 80096dc:	e005      	b.n	80096ea <HAL_RCC_GetSysClockFreq+0x2b6>
      sysclockfreq = 0U;
 80096de:	2300      	movs	r3, #0
 80096e0:	61bb      	str	r3, [r7, #24]
    break;
 80096e2:	e002      	b.n	80096ea <HAL_RCC_GetSysClockFreq+0x2b6>

  default:
    sysclockfreq = CSI_VALUE;
 80096e4:	4b06      	ldr	r3, [pc, #24]	; (8009700 <HAL_RCC_GetSysClockFreq+0x2cc>)
 80096e6:	61bb      	str	r3, [r7, #24]
    break;
 80096e8:	bf00      	nop
  }

  return sysclockfreq;
 80096ea:	69bb      	ldr	r3, [r7, #24]
}
 80096ec:	4618      	mov	r0, r3
 80096ee:	3724      	adds	r7, #36	; 0x24
 80096f0:	46bd      	mov	sp, r7
 80096f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096f6:	4770      	bx	lr
 80096f8:	58024400 	.word	0x58024400
 80096fc:	03d09000 	.word	0x03d09000
 8009700:	003d0900 	.word	0x003d0900
 8009704:	017d7840 	.word	0x017d7840
 8009708:	46000000 	.word	0x46000000
 800970c:	4c742400 	.word	0x4c742400
 8009710:	4a742400 	.word	0x4a742400
 8009714:	4bbebc20 	.word	0x4bbebc20

08009718 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8009718:	b580      	push	{r7, lr}
 800971a:	b082      	sub	sp, #8
 800971c:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800971e:	f7ff fe89 	bl	8009434 <HAL_RCC_GetSysClockFreq>
 8009722:	4601      	mov	r1, r0
 8009724:	4b10      	ldr	r3, [pc, #64]	; (8009768 <HAL_RCC_GetHCLKFreq+0x50>)
 8009726:	699b      	ldr	r3, [r3, #24]
 8009728:	0a1b      	lsrs	r3, r3, #8
 800972a:	f003 030f 	and.w	r3, r3, #15
 800972e:	4a0f      	ldr	r2, [pc, #60]	; (800976c <HAL_RCC_GetHCLKFreq+0x54>)
 8009730:	5cd3      	ldrb	r3, [r2, r3]
 8009732:	f003 031f 	and.w	r3, r3, #31
 8009736:	fa21 f303 	lsr.w	r3, r1, r3
 800973a:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800973c:	4b0a      	ldr	r3, [pc, #40]	; (8009768 <HAL_RCC_GetHCLKFreq+0x50>)
 800973e:	699b      	ldr	r3, [r3, #24]
 8009740:	f003 030f 	and.w	r3, r3, #15
 8009744:	4a09      	ldr	r2, [pc, #36]	; (800976c <HAL_RCC_GetHCLKFreq+0x54>)
 8009746:	5cd3      	ldrb	r3, [r2, r3]
 8009748:	f003 031f 	and.w	r3, r3, #31
 800974c:	687a      	ldr	r2, [r7, #4]
 800974e:	fa22 f303 	lsr.w	r3, r2, r3
 8009752:	4a07      	ldr	r2, [pc, #28]	; (8009770 <HAL_RCC_GetHCLKFreq+0x58>)
 8009754:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8009756:	4a07      	ldr	r2, [pc, #28]	; (8009774 <HAL_RCC_GetHCLKFreq+0x5c>)
 8009758:	687b      	ldr	r3, [r7, #4]
 800975a:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 800975c:	4b04      	ldr	r3, [pc, #16]	; (8009770 <HAL_RCC_GetHCLKFreq+0x58>)
 800975e:	681b      	ldr	r3, [r3, #0]
}
 8009760:	4618      	mov	r0, r3
 8009762:	3708      	adds	r7, #8
 8009764:	46bd      	mov	sp, r7
 8009766:	bd80      	pop	{r7, pc}
 8009768:	58024400 	.word	0x58024400
 800976c:	0801a014 	.word	0x0801a014
 8009770:	24000010 	.word	0x24000010
 8009774:	2400000c 	.word	0x2400000c

08009778 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8009778:	b580      	push	{r7, lr}
 800977a:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 800977c:	f7ff ffcc 	bl	8009718 <HAL_RCC_GetHCLKFreq>
 8009780:	4601      	mov	r1, r0
 8009782:	4b06      	ldr	r3, [pc, #24]	; (800979c <HAL_RCC_GetPCLK1Freq+0x24>)
 8009784:	69db      	ldr	r3, [r3, #28]
 8009786:	091b      	lsrs	r3, r3, #4
 8009788:	f003 0307 	and.w	r3, r3, #7
 800978c:	4a04      	ldr	r2, [pc, #16]	; (80097a0 <HAL_RCC_GetPCLK1Freq+0x28>)
 800978e:	5cd3      	ldrb	r3, [r2, r3]
 8009790:	f003 031f 	and.w	r3, r3, #31
 8009794:	fa21 f303 	lsr.w	r3, r1, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8009798:	4618      	mov	r0, r3
 800979a:	bd80      	pop	{r7, pc}
 800979c:	58024400 	.word	0x58024400
 80097a0:	0801a014 	.word	0x0801a014

080097a4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80097a4:	b580      	push	{r7, lr}
 80097a6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 80097a8:	f7ff ffb6 	bl	8009718 <HAL_RCC_GetHCLKFreq>
 80097ac:	4601      	mov	r1, r0
 80097ae:	4b06      	ldr	r3, [pc, #24]	; (80097c8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80097b0:	69db      	ldr	r3, [r3, #28]
 80097b2:	0a1b      	lsrs	r3, r3, #8
 80097b4:	f003 0307 	and.w	r3, r3, #7
 80097b8:	4a04      	ldr	r2, [pc, #16]	; (80097cc <HAL_RCC_GetPCLK2Freq+0x28>)
 80097ba:	5cd3      	ldrb	r3, [r2, r3]
 80097bc:	f003 031f 	and.w	r3, r3, #31
 80097c0:	fa21 f303 	lsr.w	r3, r1, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 80097c4:	4618      	mov	r0, r3
 80097c6:	bd80      	pop	{r7, pc}
 80097c8:	58024400 	.word	0x58024400
 80097cc:	0801a014 	.word	0x0801a014

080097d0 <HAL_RCC_NMI_IRQHandler>:
  * @brief This function handles the RCC CSS interrupt request.
  * @note This API should be called under the NMI_Handler().
  * @retval None
  */
void HAL_RCC_NMI_IRQHandler(void)
{
 80097d0:	b580      	push	{r7, lr}
 80097d2:	af00      	add	r7, sp, #0
  /* Check RCC CSSF flag  */
  if(__HAL_RCC_GET_IT(RCC_IT_CSS))
 80097d4:	4b07      	ldr	r3, [pc, #28]	; (80097f4 <HAL_RCC_NMI_IRQHandler+0x24>)
 80097d6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80097d8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80097dc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80097e0:	d105      	bne.n	80097ee <HAL_RCC_NMI_IRQHandler+0x1e>
  {
    /* RCC Clock Security System interrupt user callback */
    HAL_RCC_CCSCallback();
 80097e2:	f000 f809 	bl	80097f8 <HAL_RCC_CSSCallback>

    /* Clear RCC CSS pending bit */
    __HAL_RCC_CLEAR_IT(RCC_IT_CSS);
 80097e6:	4b03      	ldr	r3, [pc, #12]	; (80097f4 <HAL_RCC_NMI_IRQHandler+0x24>)
 80097e8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80097ec:	669a      	str	r2, [r3, #104]	; 0x68
  }
}
 80097ee:	bf00      	nop
 80097f0:	bd80      	pop	{r7, pc}
 80097f2:	bf00      	nop
 80097f4:	58024400 	.word	0x58024400

080097f8 <HAL_RCC_CSSCallback>:
/**
  * @brief  RCC Clock Security System interrupt callback
  * @retval none
  */
__weak void HAL_RCC_CCSCallback(void)
{
 80097f8:	b480      	push	{r7}
 80097fa:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_RCC_CCSCallback could be implemented in the user file
   */
}
 80097fc:	bf00      	nop
 80097fe:	46bd      	mov	sp, r7
 8009800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009804:	4770      	bx	lr
	...

08009808 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8009808:	b580      	push	{r7, lr}
 800980a:	b086      	sub	sp, #24
 800980c:	af00      	add	r7, sp, #0
 800980e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8009810:	2300      	movs	r3, #0
 8009812:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8009814:	2300      	movs	r3, #0
 8009816:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8009818:	687b      	ldr	r3, [r7, #4]
 800981a:	681b      	ldr	r3, [r3, #0]
 800981c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009820:	2b00      	cmp	r3, #0
 8009822:	d03d      	beq.n	80098a0 <HAL_RCCEx_PeriphCLKConfig+0x98>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 8009824:	687b      	ldr	r3, [r7, #4]
 8009826:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009828:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800982c:	d013      	beq.n	8009856 <HAL_RCCEx_PeriphCLKConfig+0x4e>
 800982e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009832:	d802      	bhi.n	800983a <HAL_RCCEx_PeriphCLKConfig+0x32>
 8009834:	2b00      	cmp	r3, #0
 8009836:	d007      	beq.n	8009848 <HAL_RCCEx_PeriphCLKConfig+0x40>
 8009838:	e01f      	b.n	800987a <HAL_RCCEx_PeriphCLKConfig+0x72>
 800983a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800983e:	d013      	beq.n	8009868 <HAL_RCCEx_PeriphCLKConfig+0x60>
 8009840:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8009844:	d01c      	beq.n	8009880 <HAL_RCCEx_PeriphCLKConfig+0x78>
 8009846:	e018      	b.n	800987a <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009848:	4baf      	ldr	r3, [pc, #700]	; (8009b08 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800984a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800984c:	4aae      	ldr	r2, [pc, #696]	; (8009b08 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800984e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009852:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8009854:	e015      	b.n	8009882 <HAL_RCCEx_PeriphCLKConfig+0x7a>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8009856:	687b      	ldr	r3, [r7, #4]
 8009858:	3304      	adds	r3, #4
 800985a:	2102      	movs	r1, #2
 800985c:	4618      	mov	r0, r3
 800985e:	f001 fd33 	bl	800b2c8 <RCCEx_PLL2_Config>
 8009862:	4603      	mov	r3, r0
 8009864:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8009866:	e00c      	b.n	8009882 <HAL_RCCEx_PeriphCLKConfig+0x7a>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8009868:	687b      	ldr	r3, [r7, #4]
 800986a:	3324      	adds	r3, #36	; 0x24
 800986c:	2102      	movs	r1, #2
 800986e:	4618      	mov	r0, r3
 8009870:	f001 fddc 	bl	800b42c <RCCEx_PLL3_Config>
 8009874:	4603      	mov	r3, r0
 8009876:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8009878:	e003      	b.n	8009882 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800987a:	2301      	movs	r3, #1
 800987c:	75fb      	strb	r3, [r7, #23]
      break;
 800987e:	e000      	b.n	8009882 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      break;
 8009880:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009882:	7dfb      	ldrb	r3, [r7, #23]
 8009884:	2b00      	cmp	r3, #0
 8009886:	d109      	bne.n	800989c <HAL_RCCEx_PeriphCLKConfig+0x94>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8009888:	4b9f      	ldr	r3, [pc, #636]	; (8009b08 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800988a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800988c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8009890:	687b      	ldr	r3, [r7, #4]
 8009892:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009894:	499c      	ldr	r1, [pc, #624]	; (8009b08 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8009896:	4313      	orrs	r3, r2
 8009898:	650b      	str	r3, [r1, #80]	; 0x50
 800989a:	e001      	b.n	80098a0 <HAL_RCCEx_PeriphCLKConfig+0x98>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800989c:	7dfb      	ldrb	r3, [r7, #23]
 800989e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80098a0:	687b      	ldr	r3, [r7, #4]
 80098a2:	681b      	ldr	r3, [r3, #0]
 80098a4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80098a8:	2b00      	cmp	r3, #0
 80098aa:	d03d      	beq.n	8009928 <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 80098ac:	687b      	ldr	r3, [r7, #4]
 80098ae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80098b0:	2b04      	cmp	r3, #4
 80098b2:	d826      	bhi.n	8009902 <HAL_RCCEx_PeriphCLKConfig+0xfa>
 80098b4:	a201      	add	r2, pc, #4	; (adr r2, 80098bc <HAL_RCCEx_PeriphCLKConfig+0xb4>)
 80098b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80098ba:	bf00      	nop
 80098bc:	080098d1 	.word	0x080098d1
 80098c0:	080098df 	.word	0x080098df
 80098c4:	080098f1 	.word	0x080098f1
 80098c8:	08009909 	.word	0x08009909
 80098cc:	08009909 	.word	0x08009909
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80098d0:	4b8d      	ldr	r3, [pc, #564]	; (8009b08 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80098d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80098d4:	4a8c      	ldr	r2, [pc, #560]	; (8009b08 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80098d6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80098da:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80098dc:	e015      	b.n	800990a <HAL_RCCEx_PeriphCLKConfig+0x102>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80098de:	687b      	ldr	r3, [r7, #4]
 80098e0:	3304      	adds	r3, #4
 80098e2:	2100      	movs	r1, #0
 80098e4:	4618      	mov	r0, r3
 80098e6:	f001 fcef 	bl	800b2c8 <RCCEx_PLL2_Config>
 80098ea:	4603      	mov	r3, r0
 80098ec:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80098ee:	e00c      	b.n	800990a <HAL_RCCEx_PeriphCLKConfig+0x102>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80098f0:	687b      	ldr	r3, [r7, #4]
 80098f2:	3324      	adds	r3, #36	; 0x24
 80098f4:	2100      	movs	r1, #0
 80098f6:	4618      	mov	r0, r3
 80098f8:	f001 fd98 	bl	800b42c <RCCEx_PLL3_Config>
 80098fc:	4603      	mov	r3, r0
 80098fe:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8009900:	e003      	b.n	800990a <HAL_RCCEx_PeriphCLKConfig+0x102>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8009902:	2301      	movs	r3, #1
 8009904:	75fb      	strb	r3, [r7, #23]
      break;
 8009906:	e000      	b.n	800990a <HAL_RCCEx_PeriphCLKConfig+0x102>
      break;
 8009908:	bf00      	nop
    }

    if(ret == HAL_OK)
 800990a:	7dfb      	ldrb	r3, [r7, #23]
 800990c:	2b00      	cmp	r3, #0
 800990e:	d109      	bne.n	8009924 <HAL_RCCEx_PeriphCLKConfig+0x11c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8009910:	4b7d      	ldr	r3, [pc, #500]	; (8009b08 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8009912:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009914:	f023 0207 	bic.w	r2, r3, #7
 8009918:	687b      	ldr	r3, [r7, #4]
 800991a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800991c:	497a      	ldr	r1, [pc, #488]	; (8009b08 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800991e:	4313      	orrs	r3, r2
 8009920:	650b      	str	r3, [r1, #80]	; 0x50
 8009922:	e001      	b.n	8009928 <HAL_RCCEx_PeriphCLKConfig+0x120>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009924:	7dfb      	ldrb	r3, [r7, #23]
 8009926:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8009928:	687b      	ldr	r3, [r7, #4]
 800992a:	681b      	ldr	r3, [r3, #0]
 800992c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8009930:	2b00      	cmp	r3, #0
 8009932:	d03e      	beq.n	80099b2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 8009934:	687b      	ldr	r3, [r7, #4]
 8009936:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009938:	2b80      	cmp	r3, #128	; 0x80
 800993a:	d01c      	beq.n	8009976 <HAL_RCCEx_PeriphCLKConfig+0x16e>
 800993c:	2b80      	cmp	r3, #128	; 0x80
 800993e:	d804      	bhi.n	800994a <HAL_RCCEx_PeriphCLKConfig+0x142>
 8009940:	2b00      	cmp	r3, #0
 8009942:	d008      	beq.n	8009956 <HAL_RCCEx_PeriphCLKConfig+0x14e>
 8009944:	2b40      	cmp	r3, #64	; 0x40
 8009946:	d00d      	beq.n	8009964 <HAL_RCCEx_PeriphCLKConfig+0x15c>
 8009948:	e01e      	b.n	8009988 <HAL_RCCEx_PeriphCLKConfig+0x180>
 800994a:	2bc0      	cmp	r3, #192	; 0xc0
 800994c:	d01f      	beq.n	800998e <HAL_RCCEx_PeriphCLKConfig+0x186>
 800994e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009952:	d01e      	beq.n	8009992 <HAL_RCCEx_PeriphCLKConfig+0x18a>
 8009954:	e018      	b.n	8009988 <HAL_RCCEx_PeriphCLKConfig+0x180>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009956:	4b6c      	ldr	r3, [pc, #432]	; (8009b08 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8009958:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800995a:	4a6b      	ldr	r2, [pc, #428]	; (8009b08 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800995c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009960:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8009962:	e017      	b.n	8009994 <HAL_RCCEx_PeriphCLKConfig+0x18c>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8009964:	687b      	ldr	r3, [r7, #4]
 8009966:	3304      	adds	r3, #4
 8009968:	2100      	movs	r1, #0
 800996a:	4618      	mov	r0, r3
 800996c:	f001 fcac 	bl	800b2c8 <RCCEx_PLL2_Config>
 8009970:	4603      	mov	r3, r0
 8009972:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8009974:	e00e      	b.n	8009994 <HAL_RCCEx_PeriphCLKConfig+0x18c>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8009976:	687b      	ldr	r3, [r7, #4]
 8009978:	3324      	adds	r3, #36	; 0x24
 800997a:	2100      	movs	r1, #0
 800997c:	4618      	mov	r0, r3
 800997e:	f001 fd55 	bl	800b42c <RCCEx_PLL3_Config>
 8009982:	4603      	mov	r3, r0
 8009984:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8009986:	e005      	b.n	8009994 <HAL_RCCEx_PeriphCLKConfig+0x18c>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8009988:	2301      	movs	r3, #1
 800998a:	75fb      	strb	r3, [r7, #23]
      break;
 800998c:	e002      	b.n	8009994 <HAL_RCCEx_PeriphCLKConfig+0x18c>
      break;
 800998e:	bf00      	nop
 8009990:	e000      	b.n	8009994 <HAL_RCCEx_PeriphCLKConfig+0x18c>
      break;
 8009992:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009994:	7dfb      	ldrb	r3, [r7, #23]
 8009996:	2b00      	cmp	r3, #0
 8009998:	d109      	bne.n	80099ae <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 800999a:	4b5b      	ldr	r3, [pc, #364]	; (8009b08 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800999c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800999e:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 80099a2:	687b      	ldr	r3, [r7, #4]
 80099a4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80099a6:	4958      	ldr	r1, [pc, #352]	; (8009b08 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80099a8:	4313      	orrs	r3, r2
 80099aa:	650b      	str	r3, [r1, #80]	; 0x50
 80099ac:	e001      	b.n	80099b2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80099ae:	7dfb      	ldrb	r3, [r7, #23]
 80099b0:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 80099b2:	687b      	ldr	r3, [r7, #4]
 80099b4:	681b      	ldr	r3, [r3, #0]
 80099b6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80099ba:	2b00      	cmp	r3, #0
 80099bc:	d044      	beq.n	8009a48 <HAL_RCCEx_PeriphCLKConfig+0x240>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 80099be:	687b      	ldr	r3, [r7, #4]
 80099c0:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80099c4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80099c8:	d01f      	beq.n	8009a0a <HAL_RCCEx_PeriphCLKConfig+0x202>
 80099ca:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80099ce:	d805      	bhi.n	80099dc <HAL_RCCEx_PeriphCLKConfig+0x1d4>
 80099d0:	2b00      	cmp	r3, #0
 80099d2:	d00a      	beq.n	80099ea <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 80099d4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80099d8:	d00e      	beq.n	80099f8 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
 80099da:	e01f      	b.n	8009a1c <HAL_RCCEx_PeriphCLKConfig+0x214>
 80099dc:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80099e0:	d01f      	beq.n	8009a22 <HAL_RCCEx_PeriphCLKConfig+0x21a>
 80099e2:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80099e6:	d01e      	beq.n	8009a26 <HAL_RCCEx_PeriphCLKConfig+0x21e>
 80099e8:	e018      	b.n	8009a1c <HAL_RCCEx_PeriphCLKConfig+0x214>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80099ea:	4b47      	ldr	r3, [pc, #284]	; (8009b08 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80099ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80099ee:	4a46      	ldr	r2, [pc, #280]	; (8009b08 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80099f0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80099f4:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80099f6:	e017      	b.n	8009a28 <HAL_RCCEx_PeriphCLKConfig+0x220>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80099f8:	687b      	ldr	r3, [r7, #4]
 80099fa:	3304      	adds	r3, #4
 80099fc:	2100      	movs	r1, #0
 80099fe:	4618      	mov	r0, r3
 8009a00:	f001 fc62 	bl	800b2c8 <RCCEx_PLL2_Config>
 8009a04:	4603      	mov	r3, r0
 8009a06:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8009a08:	e00e      	b.n	8009a28 <HAL_RCCEx_PeriphCLKConfig+0x220>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8009a0a:	687b      	ldr	r3, [r7, #4]
 8009a0c:	3324      	adds	r3, #36	; 0x24
 8009a0e:	2100      	movs	r1, #0
 8009a10:	4618      	mov	r0, r3
 8009a12:	f001 fd0b 	bl	800b42c <RCCEx_PLL3_Config>
 8009a16:	4603      	mov	r3, r0
 8009a18:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8009a1a:	e005      	b.n	8009a28 <HAL_RCCEx_PeriphCLKConfig+0x220>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8009a1c:	2301      	movs	r3, #1
 8009a1e:	75fb      	strb	r3, [r7, #23]
      break;
 8009a20:	e002      	b.n	8009a28 <HAL_RCCEx_PeriphCLKConfig+0x220>
      break;
 8009a22:	bf00      	nop
 8009a24:	e000      	b.n	8009a28 <HAL_RCCEx_PeriphCLKConfig+0x220>
      break;
 8009a26:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009a28:	7dfb      	ldrb	r3, [r7, #23]
 8009a2a:	2b00      	cmp	r3, #0
 8009a2c:	d10a      	bne.n	8009a44 <HAL_RCCEx_PeriphCLKConfig+0x23c>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8009a2e:	4b36      	ldr	r3, [pc, #216]	; (8009b08 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8009a30:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009a32:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8009a36:	687b      	ldr	r3, [r7, #4]
 8009a38:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8009a3c:	4932      	ldr	r1, [pc, #200]	; (8009b08 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8009a3e:	4313      	orrs	r3, r2
 8009a40:	658b      	str	r3, [r1, #88]	; 0x58
 8009a42:	e001      	b.n	8009a48 <HAL_RCCEx_PeriphCLKConfig+0x240>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009a44:	7dfb      	ldrb	r3, [r7, #23]
 8009a46:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8009a48:	687b      	ldr	r3, [r7, #4]
 8009a4a:	681b      	ldr	r3, [r3, #0]
 8009a4c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8009a50:	2b00      	cmp	r3, #0
 8009a52:	d044      	beq.n	8009ade <HAL_RCCEx_PeriphCLKConfig+0x2d6>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 8009a54:	687b      	ldr	r3, [r7, #4]
 8009a56:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8009a5a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8009a5e:	d01f      	beq.n	8009aa0 <HAL_RCCEx_PeriphCLKConfig+0x298>
 8009a60:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8009a64:	d805      	bhi.n	8009a72 <HAL_RCCEx_PeriphCLKConfig+0x26a>
 8009a66:	2b00      	cmp	r3, #0
 8009a68:	d00a      	beq.n	8009a80 <HAL_RCCEx_PeriphCLKConfig+0x278>
 8009a6a:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8009a6e:	d00e      	beq.n	8009a8e <HAL_RCCEx_PeriphCLKConfig+0x286>
 8009a70:	e01f      	b.n	8009ab2 <HAL_RCCEx_PeriphCLKConfig+0x2aa>
 8009a72:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8009a76:	d01f      	beq.n	8009ab8 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 8009a78:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8009a7c:	d01e      	beq.n	8009abc <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 8009a7e:	e018      	b.n	8009ab2 <HAL_RCCEx_PeriphCLKConfig+0x2aa>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009a80:	4b21      	ldr	r3, [pc, #132]	; (8009b08 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8009a82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009a84:	4a20      	ldr	r2, [pc, #128]	; (8009b08 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8009a86:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009a8a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8009a8c:	e017      	b.n	8009abe <HAL_RCCEx_PeriphCLKConfig+0x2b6>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8009a8e:	687b      	ldr	r3, [r7, #4]
 8009a90:	3304      	adds	r3, #4
 8009a92:	2100      	movs	r1, #0
 8009a94:	4618      	mov	r0, r3
 8009a96:	f001 fc17 	bl	800b2c8 <RCCEx_PLL2_Config>
 8009a9a:	4603      	mov	r3, r0
 8009a9c:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8009a9e:	e00e      	b.n	8009abe <HAL_RCCEx_PeriphCLKConfig+0x2b6>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8009aa0:	687b      	ldr	r3, [r7, #4]
 8009aa2:	3324      	adds	r3, #36	; 0x24
 8009aa4:	2100      	movs	r1, #0
 8009aa6:	4618      	mov	r0, r3
 8009aa8:	f001 fcc0 	bl	800b42c <RCCEx_PLL3_Config>
 8009aac:	4603      	mov	r3, r0
 8009aae:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8009ab0:	e005      	b.n	8009abe <HAL_RCCEx_PeriphCLKConfig+0x2b6>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8009ab2:	2301      	movs	r3, #1
 8009ab4:	75fb      	strb	r3, [r7, #23]
      break;
 8009ab6:	e002      	b.n	8009abe <HAL_RCCEx_PeriphCLKConfig+0x2b6>
      break;
 8009ab8:	bf00      	nop
 8009aba:	e000      	b.n	8009abe <HAL_RCCEx_PeriphCLKConfig+0x2b6>
      break;
 8009abc:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009abe:	7dfb      	ldrb	r3, [r7, #23]
 8009ac0:	2b00      	cmp	r3, #0
 8009ac2:	d10a      	bne.n	8009ada <HAL_RCCEx_PeriphCLKConfig+0x2d2>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8009ac4:	4b10      	ldr	r3, [pc, #64]	; (8009b08 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8009ac6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009ac8:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 8009acc:	687b      	ldr	r3, [r7, #4]
 8009ace:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8009ad2:	490d      	ldr	r1, [pc, #52]	; (8009b08 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8009ad4:	4313      	orrs	r3, r2
 8009ad6:	658b      	str	r3, [r1, #88]	; 0x58
 8009ad8:	e001      	b.n	8009ade <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009ada:	7dfb      	ldrb	r3, [r7, #23]
 8009adc:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8009ade:	687b      	ldr	r3, [r7, #4]
 8009ae0:	681b      	ldr	r3, [r3, #0]
 8009ae2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009ae6:	2b00      	cmp	r3, #0
 8009ae8:	d035      	beq.n	8009b56 <HAL_RCCEx_PeriphCLKConfig+0x34e>
  {
    switch(PeriphClkInit->QspiClockSelection)
 8009aea:	687b      	ldr	r3, [r7, #4]
 8009aec:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009aee:	2b10      	cmp	r3, #16
 8009af0:	d00c      	beq.n	8009b0c <HAL_RCCEx_PeriphCLKConfig+0x304>
 8009af2:	2b10      	cmp	r3, #16
 8009af4:	d802      	bhi.n	8009afc <HAL_RCCEx_PeriphCLKConfig+0x2f4>
 8009af6:	2b00      	cmp	r3, #0
 8009af8:	d01b      	beq.n	8009b32 <HAL_RCCEx_PeriphCLKConfig+0x32a>
 8009afa:	e017      	b.n	8009b2c <HAL_RCCEx_PeriphCLKConfig+0x324>
 8009afc:	2b20      	cmp	r3, #32
 8009afe:	d00c      	beq.n	8009b1a <HAL_RCCEx_PeriphCLKConfig+0x312>
 8009b00:	2b30      	cmp	r3, #48	; 0x30
 8009b02:	d018      	beq.n	8009b36 <HAL_RCCEx_PeriphCLKConfig+0x32e>
 8009b04:	e012      	b.n	8009b2c <HAL_RCCEx_PeriphCLKConfig+0x324>
 8009b06:	bf00      	nop
 8009b08:	58024400 	.word	0x58024400
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009b0c:	4baf      	ldr	r3, [pc, #700]	; (8009dcc <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8009b0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009b10:	4aae      	ldr	r2, [pc, #696]	; (8009dcc <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8009b12:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009b16:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8009b18:	e00e      	b.n	8009b38 <HAL_RCCEx_PeriphCLKConfig+0x330>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8009b1a:	687b      	ldr	r3, [r7, #4]
 8009b1c:	3304      	adds	r3, #4
 8009b1e:	2102      	movs	r1, #2
 8009b20:	4618      	mov	r0, r3
 8009b22:	f001 fbd1 	bl	800b2c8 <RCCEx_PLL2_Config>
 8009b26:	4603      	mov	r3, r0
 8009b28:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8009b2a:	e005      	b.n	8009b38 <HAL_RCCEx_PeriphCLKConfig+0x330>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8009b2c:	2301      	movs	r3, #1
 8009b2e:	75fb      	strb	r3, [r7, #23]
      break;
 8009b30:	e002      	b.n	8009b38 <HAL_RCCEx_PeriphCLKConfig+0x330>
      break;
 8009b32:	bf00      	nop
 8009b34:	e000      	b.n	8009b38 <HAL_RCCEx_PeriphCLKConfig+0x330>
      break;
 8009b36:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009b38:	7dfb      	ldrb	r3, [r7, #23]
 8009b3a:	2b00      	cmp	r3, #0
 8009b3c:	d109      	bne.n	8009b52 <HAL_RCCEx_PeriphCLKConfig+0x34a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8009b3e:	4ba3      	ldr	r3, [pc, #652]	; (8009dcc <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8009b40:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009b42:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8009b46:	687b      	ldr	r3, [r7, #4]
 8009b48:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009b4a:	49a0      	ldr	r1, [pc, #640]	; (8009dcc <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8009b4c:	4313      	orrs	r3, r2
 8009b4e:	64cb      	str	r3, [r1, #76]	; 0x4c
 8009b50:	e001      	b.n	8009b56 <HAL_RCCEx_PeriphCLKConfig+0x34e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009b52:	7dfb      	ldrb	r3, [r7, #23]
 8009b54:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8009b56:	687b      	ldr	r3, [r7, #4]
 8009b58:	681b      	ldr	r3, [r3, #0]
 8009b5a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8009b5e:	2b00      	cmp	r3, #0
 8009b60:	d042      	beq.n	8009be8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 8009b62:	687b      	ldr	r3, [r7, #4]
 8009b64:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009b66:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009b6a:	d01f      	beq.n	8009bac <HAL_RCCEx_PeriphCLKConfig+0x3a4>
 8009b6c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009b70:	d805      	bhi.n	8009b7e <HAL_RCCEx_PeriphCLKConfig+0x376>
 8009b72:	2b00      	cmp	r3, #0
 8009b74:	d00a      	beq.n	8009b8c <HAL_RCCEx_PeriphCLKConfig+0x384>
 8009b76:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009b7a:	d00e      	beq.n	8009b9a <HAL_RCCEx_PeriphCLKConfig+0x392>
 8009b7c:	e01f      	b.n	8009bbe <HAL_RCCEx_PeriphCLKConfig+0x3b6>
 8009b7e:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8009b82:	d01f      	beq.n	8009bc4 <HAL_RCCEx_PeriphCLKConfig+0x3bc>
 8009b84:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8009b88:	d01e      	beq.n	8009bc8 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
 8009b8a:	e018      	b.n	8009bbe <HAL_RCCEx_PeriphCLKConfig+0x3b6>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009b8c:	4b8f      	ldr	r3, [pc, #572]	; (8009dcc <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8009b8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009b90:	4a8e      	ldr	r2, [pc, #568]	; (8009dcc <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8009b92:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009b96:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8009b98:	e017      	b.n	8009bca <HAL_RCCEx_PeriphCLKConfig+0x3c2>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8009b9a:	687b      	ldr	r3, [r7, #4]
 8009b9c:	3304      	adds	r3, #4
 8009b9e:	2100      	movs	r1, #0
 8009ba0:	4618      	mov	r0, r3
 8009ba2:	f001 fb91 	bl	800b2c8 <RCCEx_PLL2_Config>
 8009ba6:	4603      	mov	r3, r0
 8009ba8:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8009baa:	e00e      	b.n	8009bca <HAL_RCCEx_PeriphCLKConfig+0x3c2>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8009bac:	687b      	ldr	r3, [r7, #4]
 8009bae:	3324      	adds	r3, #36	; 0x24
 8009bb0:	2100      	movs	r1, #0
 8009bb2:	4618      	mov	r0, r3
 8009bb4:	f001 fc3a 	bl	800b42c <RCCEx_PLL3_Config>
 8009bb8:	4603      	mov	r3, r0
 8009bba:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8009bbc:	e005      	b.n	8009bca <HAL_RCCEx_PeriphCLKConfig+0x3c2>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8009bbe:	2301      	movs	r3, #1
 8009bc0:	75fb      	strb	r3, [r7, #23]
      break;
 8009bc2:	e002      	b.n	8009bca <HAL_RCCEx_PeriphCLKConfig+0x3c2>
      break;
 8009bc4:	bf00      	nop
 8009bc6:	e000      	b.n	8009bca <HAL_RCCEx_PeriphCLKConfig+0x3c2>
      break;
 8009bc8:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009bca:	7dfb      	ldrb	r3, [r7, #23]
 8009bcc:	2b00      	cmp	r3, #0
 8009bce:	d109      	bne.n	8009be4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8009bd0:	4b7e      	ldr	r3, [pc, #504]	; (8009dcc <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8009bd2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009bd4:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 8009bd8:	687b      	ldr	r3, [r7, #4]
 8009bda:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009bdc:	497b      	ldr	r1, [pc, #492]	; (8009dcc <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8009bde:	4313      	orrs	r3, r2
 8009be0:	650b      	str	r3, [r1, #80]	; 0x50
 8009be2:	e001      	b.n	8009be8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009be4:	7dfb      	ldrb	r3, [r7, #23]
 8009be6:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8009be8:	687b      	ldr	r3, [r7, #4]
 8009bea:	681b      	ldr	r3, [r3, #0]
 8009bec:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8009bf0:	2b00      	cmp	r3, #0
 8009bf2:	d042      	beq.n	8009c7a <HAL_RCCEx_PeriphCLKConfig+0x472>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 8009bf4:	687b      	ldr	r3, [r7, #4]
 8009bf6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009bf8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009bfc:	d01b      	beq.n	8009c36 <HAL_RCCEx_PeriphCLKConfig+0x42e>
 8009bfe:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009c02:	d805      	bhi.n	8009c10 <HAL_RCCEx_PeriphCLKConfig+0x408>
 8009c04:	2b00      	cmp	r3, #0
 8009c06:	d022      	beq.n	8009c4e <HAL_RCCEx_PeriphCLKConfig+0x446>
 8009c08:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009c0c:	d00a      	beq.n	8009c24 <HAL_RCCEx_PeriphCLKConfig+0x41c>
 8009c0e:	e01b      	b.n	8009c48 <HAL_RCCEx_PeriphCLKConfig+0x440>
 8009c10:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8009c14:	d01d      	beq.n	8009c52 <HAL_RCCEx_PeriphCLKConfig+0x44a>
 8009c16:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8009c1a:	d01c      	beq.n	8009c56 <HAL_RCCEx_PeriphCLKConfig+0x44e>
 8009c1c:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8009c20:	d01b      	beq.n	8009c5a <HAL_RCCEx_PeriphCLKConfig+0x452>
 8009c22:	e011      	b.n	8009c48 <HAL_RCCEx_PeriphCLKConfig+0x440>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8009c24:	687b      	ldr	r3, [r7, #4]
 8009c26:	3304      	adds	r3, #4
 8009c28:	2101      	movs	r1, #1
 8009c2a:	4618      	mov	r0, r3
 8009c2c:	f001 fb4c 	bl	800b2c8 <RCCEx_PLL2_Config>
 8009c30:	4603      	mov	r3, r0
 8009c32:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8009c34:	e012      	b.n	8009c5c <HAL_RCCEx_PeriphCLKConfig+0x454>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8009c36:	687b      	ldr	r3, [r7, #4]
 8009c38:	3324      	adds	r3, #36	; 0x24
 8009c3a:	2101      	movs	r1, #1
 8009c3c:	4618      	mov	r0, r3
 8009c3e:	f001 fbf5 	bl	800b42c <RCCEx_PLL3_Config>
 8009c42:	4603      	mov	r3, r0
 8009c44:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8009c46:	e009      	b.n	8009c5c <HAL_RCCEx_PeriphCLKConfig+0x454>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8009c48:	2301      	movs	r3, #1
 8009c4a:	75fb      	strb	r3, [r7, #23]
      break;
 8009c4c:	e006      	b.n	8009c5c <HAL_RCCEx_PeriphCLKConfig+0x454>
      break;
 8009c4e:	bf00      	nop
 8009c50:	e004      	b.n	8009c5c <HAL_RCCEx_PeriphCLKConfig+0x454>
      break;
 8009c52:	bf00      	nop
 8009c54:	e002      	b.n	8009c5c <HAL_RCCEx_PeriphCLKConfig+0x454>
      break;
 8009c56:	bf00      	nop
 8009c58:	e000      	b.n	8009c5c <HAL_RCCEx_PeriphCLKConfig+0x454>
      break;
 8009c5a:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009c5c:	7dfb      	ldrb	r3, [r7, #23]
 8009c5e:	2b00      	cmp	r3, #0
 8009c60:	d109      	bne.n	8009c76 <HAL_RCCEx_PeriphCLKConfig+0x46e>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8009c62:	4b5a      	ldr	r3, [pc, #360]	; (8009dcc <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8009c64:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009c66:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8009c6a:	687b      	ldr	r3, [r7, #4]
 8009c6c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009c6e:	4957      	ldr	r1, [pc, #348]	; (8009dcc <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8009c70:	4313      	orrs	r3, r2
 8009c72:	650b      	str	r3, [r1, #80]	; 0x50
 8009c74:	e001      	b.n	8009c7a <HAL_RCCEx_PeriphCLKConfig+0x472>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009c76:	7dfb      	ldrb	r3, [r7, #23]
 8009c78:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8009c7a:	687b      	ldr	r3, [r7, #4]
 8009c7c:	681b      	ldr	r3, [r3, #0]
 8009c7e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009c82:	2b00      	cmp	r3, #0
 8009c84:	d044      	beq.n	8009d10 <HAL_RCCEx_PeriphCLKConfig+0x508>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 8009c86:	687b      	ldr	r3, [r7, #4]
 8009c88:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8009c8c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009c90:	d01b      	beq.n	8009cca <HAL_RCCEx_PeriphCLKConfig+0x4c2>
 8009c92:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009c96:	d805      	bhi.n	8009ca4 <HAL_RCCEx_PeriphCLKConfig+0x49c>
 8009c98:	2b00      	cmp	r3, #0
 8009c9a:	d022      	beq.n	8009ce2 <HAL_RCCEx_PeriphCLKConfig+0x4da>
 8009c9c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8009ca0:	d00a      	beq.n	8009cb8 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
 8009ca2:	e01b      	b.n	8009cdc <HAL_RCCEx_PeriphCLKConfig+0x4d4>
 8009ca4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009ca8:	d01d      	beq.n	8009ce6 <HAL_RCCEx_PeriphCLKConfig+0x4de>
 8009caa:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8009cae:	d01c      	beq.n	8009cea <HAL_RCCEx_PeriphCLKConfig+0x4e2>
 8009cb0:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8009cb4:	d01b      	beq.n	8009cee <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 8009cb6:	e011      	b.n	8009cdc <HAL_RCCEx_PeriphCLKConfig+0x4d4>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8009cb8:	687b      	ldr	r3, [r7, #4]
 8009cba:	3304      	adds	r3, #4
 8009cbc:	2101      	movs	r1, #1
 8009cbe:	4618      	mov	r0, r3
 8009cc0:	f001 fb02 	bl	800b2c8 <RCCEx_PLL2_Config>
 8009cc4:	4603      	mov	r3, r0
 8009cc6:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8009cc8:	e012      	b.n	8009cf0 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8009cca:	687b      	ldr	r3, [r7, #4]
 8009ccc:	3324      	adds	r3, #36	; 0x24
 8009cce:	2101      	movs	r1, #1
 8009cd0:	4618      	mov	r0, r3
 8009cd2:	f001 fbab 	bl	800b42c <RCCEx_PLL3_Config>
 8009cd6:	4603      	mov	r3, r0
 8009cd8:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8009cda:	e009      	b.n	8009cf0 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 8009cdc:	2301      	movs	r3, #1
 8009cde:	75fb      	strb	r3, [r7, #23]
      break;
 8009ce0:	e006      	b.n	8009cf0 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      break;
 8009ce2:	bf00      	nop
 8009ce4:	e004      	b.n	8009cf0 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      break;
 8009ce6:	bf00      	nop
 8009ce8:	e002      	b.n	8009cf0 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      break;
 8009cea:	bf00      	nop
 8009cec:	e000      	b.n	8009cf0 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      break;
 8009cee:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009cf0:	7dfb      	ldrb	r3, [r7, #23]
 8009cf2:	2b00      	cmp	r3, #0
 8009cf4:	d10a      	bne.n	8009d0c <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8009cf6:	4b35      	ldr	r3, [pc, #212]	; (8009dcc <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8009cf8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009cfa:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8009cfe:	687b      	ldr	r3, [r7, #4]
 8009d00:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8009d04:	4931      	ldr	r1, [pc, #196]	; (8009dcc <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8009d06:	4313      	orrs	r3, r2
 8009d08:	658b      	str	r3, [r1, #88]	; 0x58
 8009d0a:	e001      	b.n	8009d10 <HAL_RCCEx_PeriphCLKConfig+0x508>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009d0c:	7dfb      	ldrb	r3, [r7, #23]
 8009d0e:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8009d10:	687b      	ldr	r3, [r7, #4]
 8009d12:	681b      	ldr	r3, [r3, #0]
 8009d14:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8009d18:	2b00      	cmp	r3, #0
 8009d1a:	d02d      	beq.n	8009d78 <HAL_RCCEx_PeriphCLKConfig+0x570>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 8009d1c:	687b      	ldr	r3, [r7, #4]
 8009d1e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009d20:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8009d24:	d005      	beq.n	8009d32 <HAL_RCCEx_PeriphCLKConfig+0x52a>
 8009d26:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009d2a:	d009      	beq.n	8009d40 <HAL_RCCEx_PeriphCLKConfig+0x538>
 8009d2c:	2b00      	cmp	r3, #0
 8009d2e:	d013      	beq.n	8009d58 <HAL_RCCEx_PeriphCLKConfig+0x550>
 8009d30:	e00f      	b.n	8009d52 <HAL_RCCEx_PeriphCLKConfig+0x54a>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009d32:	4b26      	ldr	r3, [pc, #152]	; (8009dcc <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8009d34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009d36:	4a25      	ldr	r2, [pc, #148]	; (8009dcc <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8009d38:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009d3c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8009d3e:	e00c      	b.n	8009d5a <HAL_RCCEx_PeriphCLKConfig+0x552>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8009d40:	687b      	ldr	r3, [r7, #4]
 8009d42:	3304      	adds	r3, #4
 8009d44:	2101      	movs	r1, #1
 8009d46:	4618      	mov	r0, r3
 8009d48:	f001 fabe 	bl	800b2c8 <RCCEx_PLL2_Config>
 8009d4c:	4603      	mov	r3, r0
 8009d4e:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8009d50:	e003      	b.n	8009d5a <HAL_RCCEx_PeriphCLKConfig+0x552>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8009d52:	2301      	movs	r3, #1
 8009d54:	75fb      	strb	r3, [r7, #23]
      break;
 8009d56:	e000      	b.n	8009d5a <HAL_RCCEx_PeriphCLKConfig+0x552>
      break;
 8009d58:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009d5a:	7dfb      	ldrb	r3, [r7, #23]
 8009d5c:	2b00      	cmp	r3, #0
 8009d5e:	d109      	bne.n	8009d74 <HAL_RCCEx_PeriphCLKConfig+0x56c>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8009d60:	4b1a      	ldr	r3, [pc, #104]	; (8009dcc <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8009d62:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009d64:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8009d68:	687b      	ldr	r3, [r7, #4]
 8009d6a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009d6c:	4917      	ldr	r1, [pc, #92]	; (8009dcc <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8009d6e:	4313      	orrs	r3, r2
 8009d70:	650b      	str	r3, [r1, #80]	; 0x50
 8009d72:	e001      	b.n	8009d78 <HAL_RCCEx_PeriphCLKConfig+0x570>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009d74:	7dfb      	ldrb	r3, [r7, #23]
 8009d76:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8009d78:	687b      	ldr	r3, [r7, #4]
 8009d7a:	681b      	ldr	r3, [r3, #0]
 8009d7c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8009d80:	2b00      	cmp	r3, #0
 8009d82:	d035      	beq.n	8009df0 <HAL_RCCEx_PeriphCLKConfig+0x5e8>
  {
    switch(PeriphClkInit->FmcClockSelection)
 8009d84:	687b      	ldr	r3, [r7, #4]
 8009d86:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009d88:	2b03      	cmp	r3, #3
 8009d8a:	d81b      	bhi.n	8009dc4 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 8009d8c:	a201      	add	r2, pc, #4	; (adr r2, 8009d94 <HAL_RCCEx_PeriphCLKConfig+0x58c>)
 8009d8e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009d92:	bf00      	nop
 8009d94:	08009dd1 	.word	0x08009dd1
 8009d98:	08009da5 	.word	0x08009da5
 8009d9c:	08009db3 	.word	0x08009db3
 8009da0:	08009dd1 	.word	0x08009dd1
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009da4:	4b09      	ldr	r3, [pc, #36]	; (8009dcc <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8009da6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009da8:	4a08      	ldr	r2, [pc, #32]	; (8009dcc <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8009daa:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009dae:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 8009db0:	e00f      	b.n	8009dd2 <HAL_RCCEx_PeriphCLKConfig+0x5ca>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8009db2:	687b      	ldr	r3, [r7, #4]
 8009db4:	3304      	adds	r3, #4
 8009db6:	2102      	movs	r1, #2
 8009db8:	4618      	mov	r0, r3
 8009dba:	f001 fa85 	bl	800b2c8 <RCCEx_PLL2_Config>
 8009dbe:	4603      	mov	r3, r0
 8009dc0:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 8009dc2:	e006      	b.n	8009dd2 <HAL_RCCEx_PeriphCLKConfig+0x5ca>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8009dc4:	2301      	movs	r3, #1
 8009dc6:	75fb      	strb	r3, [r7, #23]
      break;
 8009dc8:	e003      	b.n	8009dd2 <HAL_RCCEx_PeriphCLKConfig+0x5ca>
 8009dca:	bf00      	nop
 8009dcc:	58024400 	.word	0x58024400
      break;
 8009dd0:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009dd2:	7dfb      	ldrb	r3, [r7, #23]
 8009dd4:	2b00      	cmp	r3, #0
 8009dd6:	d109      	bne.n	8009dec <HAL_RCCEx_PeriphCLKConfig+0x5e4>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8009dd8:	4bba      	ldr	r3, [pc, #744]	; (800a0c4 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8009dda:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009ddc:	f023 0203 	bic.w	r2, r3, #3
 8009de0:	687b      	ldr	r3, [r7, #4]
 8009de2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009de4:	49b7      	ldr	r1, [pc, #732]	; (800a0c4 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8009de6:	4313      	orrs	r3, r2
 8009de8:	64cb      	str	r3, [r1, #76]	; 0x4c
 8009dea:	e001      	b.n	8009df0 <HAL_RCCEx_PeriphCLKConfig+0x5e8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009dec:	7dfb      	ldrb	r3, [r7, #23]
 8009dee:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8009df0:	687b      	ldr	r3, [r7, #4]
 8009df2:	681b      	ldr	r3, [r3, #0]
 8009df4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8009df8:	2b00      	cmp	r3, #0
 8009dfa:	f000 8086 	beq.w	8009f0a <HAL_RCCEx_PeriphCLKConfig+0x702>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8009dfe:	4bb2      	ldr	r3, [pc, #712]	; (800a0c8 <HAL_RCCEx_PeriphCLKConfig+0x8c0>)
 8009e00:	681b      	ldr	r3, [r3, #0]
 8009e02:	4ab1      	ldr	r2, [pc, #708]	; (800a0c8 <HAL_RCCEx_PeriphCLKConfig+0x8c0>)
 8009e04:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009e08:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8009e0a:	f7f9 fc75 	bl	80036f8 <HAL_GetTick>
 8009e0e:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8009e10:	e009      	b.n	8009e26 <HAL_RCCEx_PeriphCLKConfig+0x61e>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8009e12:	f7f9 fc71 	bl	80036f8 <HAL_GetTick>
 8009e16:	4602      	mov	r2, r0
 8009e18:	693b      	ldr	r3, [r7, #16]
 8009e1a:	1ad3      	subs	r3, r2, r3
 8009e1c:	2b64      	cmp	r3, #100	; 0x64
 8009e1e:	d902      	bls.n	8009e26 <HAL_RCCEx_PeriphCLKConfig+0x61e>
      {
        ret = HAL_TIMEOUT;
 8009e20:	2303      	movs	r3, #3
 8009e22:	75fb      	strb	r3, [r7, #23]
        break;
 8009e24:	e005      	b.n	8009e32 <HAL_RCCEx_PeriphCLKConfig+0x62a>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8009e26:	4ba8      	ldr	r3, [pc, #672]	; (800a0c8 <HAL_RCCEx_PeriphCLKConfig+0x8c0>)
 8009e28:	681b      	ldr	r3, [r3, #0]
 8009e2a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009e2e:	2b00      	cmp	r3, #0
 8009e30:	d0ef      	beq.n	8009e12 <HAL_RCCEx_PeriphCLKConfig+0x60a>
      }
    }

    if(ret == HAL_OK)
 8009e32:	7dfb      	ldrb	r3, [r7, #23]
 8009e34:	2b00      	cmp	r3, #0
 8009e36:	d166      	bne.n	8009f06 <HAL_RCCEx_PeriphCLKConfig+0x6fe>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8009e38:	4ba2      	ldr	r3, [pc, #648]	; (800a0c4 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8009e3a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8009e3c:	687b      	ldr	r3, [r7, #4]
 8009e3e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8009e42:	4053      	eors	r3, r2
 8009e44:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009e48:	2b00      	cmp	r3, #0
 8009e4a:	d013      	beq.n	8009e74 <HAL_RCCEx_PeriphCLKConfig+0x66c>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8009e4c:	4b9d      	ldr	r3, [pc, #628]	; (800a0c4 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8009e4e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009e50:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009e54:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8009e56:	4b9b      	ldr	r3, [pc, #620]	; (800a0c4 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8009e58:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009e5a:	4a9a      	ldr	r2, [pc, #616]	; (800a0c4 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8009e5c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009e60:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8009e62:	4b98      	ldr	r3, [pc, #608]	; (800a0c4 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8009e64:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009e66:	4a97      	ldr	r2, [pc, #604]	; (800a0c4 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8009e68:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8009e6c:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8009e6e:	4a95      	ldr	r2, [pc, #596]	; (800a0c4 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8009e70:	68fb      	ldr	r3, [r7, #12]
 8009e72:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8009e74:	687b      	ldr	r3, [r7, #4]
 8009e76:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8009e7a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009e7e:	d115      	bne.n	8009eac <HAL_RCCEx_PeriphCLKConfig+0x6a4>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009e80:	f7f9 fc3a 	bl	80036f8 <HAL_GetTick>
 8009e84:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8009e86:	e00b      	b.n	8009ea0 <HAL_RCCEx_PeriphCLKConfig+0x698>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8009e88:	f7f9 fc36 	bl	80036f8 <HAL_GetTick>
 8009e8c:	4602      	mov	r2, r0
 8009e8e:	693b      	ldr	r3, [r7, #16]
 8009e90:	1ad3      	subs	r3, r2, r3
 8009e92:	f241 3288 	movw	r2, #5000	; 0x1388
 8009e96:	4293      	cmp	r3, r2
 8009e98:	d902      	bls.n	8009ea0 <HAL_RCCEx_PeriphCLKConfig+0x698>
          {
            ret = HAL_TIMEOUT;
 8009e9a:	2303      	movs	r3, #3
 8009e9c:	75fb      	strb	r3, [r7, #23]
            break;
 8009e9e:	e005      	b.n	8009eac <HAL_RCCEx_PeriphCLKConfig+0x6a4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8009ea0:	4b88      	ldr	r3, [pc, #544]	; (800a0c4 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8009ea2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009ea4:	f003 0302 	and.w	r3, r3, #2
 8009ea8:	2b00      	cmp	r3, #0
 8009eaa:	d0ed      	beq.n	8009e88 <HAL_RCCEx_PeriphCLKConfig+0x680>
          }
        }
      }

      if(ret == HAL_OK)
 8009eac:	7dfb      	ldrb	r3, [r7, #23]
 8009eae:	2b00      	cmp	r3, #0
 8009eb0:	d126      	bne.n	8009f00 <HAL_RCCEx_PeriphCLKConfig+0x6f8>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8009eb2:	687b      	ldr	r3, [r7, #4]
 8009eb4:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8009eb8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009ebc:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8009ec0:	d10d      	bne.n	8009ede <HAL_RCCEx_PeriphCLKConfig+0x6d6>
 8009ec2:	4b80      	ldr	r3, [pc, #512]	; (800a0c4 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8009ec4:	691b      	ldr	r3, [r3, #16]
 8009ec6:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8009eca:	687b      	ldr	r3, [r7, #4]
 8009ecc:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8009ed0:	0919      	lsrs	r1, r3, #4
 8009ed2:	4b7e      	ldr	r3, [pc, #504]	; (800a0cc <HAL_RCCEx_PeriphCLKConfig+0x8c4>)
 8009ed4:	400b      	ands	r3, r1
 8009ed6:	497b      	ldr	r1, [pc, #492]	; (800a0c4 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8009ed8:	4313      	orrs	r3, r2
 8009eda:	610b      	str	r3, [r1, #16]
 8009edc:	e005      	b.n	8009eea <HAL_RCCEx_PeriphCLKConfig+0x6e2>
 8009ede:	4b79      	ldr	r3, [pc, #484]	; (800a0c4 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8009ee0:	691b      	ldr	r3, [r3, #16]
 8009ee2:	4a78      	ldr	r2, [pc, #480]	; (800a0c4 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8009ee4:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8009ee8:	6113      	str	r3, [r2, #16]
 8009eea:	4b76      	ldr	r3, [pc, #472]	; (800a0c4 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8009eec:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8009eee:	687b      	ldr	r3, [r7, #4]
 8009ef0:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8009ef4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8009ef8:	4972      	ldr	r1, [pc, #456]	; (800a0c4 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8009efa:	4313      	orrs	r3, r2
 8009efc:	670b      	str	r3, [r1, #112]	; 0x70
 8009efe:	e004      	b.n	8009f0a <HAL_RCCEx_PeriphCLKConfig+0x702>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8009f00:	7dfb      	ldrb	r3, [r7, #23]
 8009f02:	75bb      	strb	r3, [r7, #22]
 8009f04:	e001      	b.n	8009f0a <HAL_RCCEx_PeriphCLKConfig+0x702>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009f06:	7dfb      	ldrb	r3, [r7, #23]
 8009f08:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8009f0a:	687b      	ldr	r3, [r7, #4]
 8009f0c:	681b      	ldr	r3, [r3, #0]
 8009f0e:	f003 0301 	and.w	r3, r3, #1
 8009f12:	2b00      	cmp	r3, #0
 8009f14:	d07d      	beq.n	800a012 <HAL_RCCEx_PeriphCLKConfig+0x80a>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 8009f16:	687b      	ldr	r3, [r7, #4]
 8009f18:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009f1a:	2b28      	cmp	r3, #40	; 0x28
 8009f1c:	d866      	bhi.n	8009fec <HAL_RCCEx_PeriphCLKConfig+0x7e4>
 8009f1e:	a201      	add	r2, pc, #4	; (adr r2, 8009f24 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8009f20:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009f24:	08009ff3 	.word	0x08009ff3
 8009f28:	08009fed 	.word	0x08009fed
 8009f2c:	08009fed 	.word	0x08009fed
 8009f30:	08009fed 	.word	0x08009fed
 8009f34:	08009fed 	.word	0x08009fed
 8009f38:	08009fed 	.word	0x08009fed
 8009f3c:	08009fed 	.word	0x08009fed
 8009f40:	08009fed 	.word	0x08009fed
 8009f44:	08009fc9 	.word	0x08009fc9
 8009f48:	08009fed 	.word	0x08009fed
 8009f4c:	08009fed 	.word	0x08009fed
 8009f50:	08009fed 	.word	0x08009fed
 8009f54:	08009fed 	.word	0x08009fed
 8009f58:	08009fed 	.word	0x08009fed
 8009f5c:	08009fed 	.word	0x08009fed
 8009f60:	08009fed 	.word	0x08009fed
 8009f64:	08009fdb 	.word	0x08009fdb
 8009f68:	08009fed 	.word	0x08009fed
 8009f6c:	08009fed 	.word	0x08009fed
 8009f70:	08009fed 	.word	0x08009fed
 8009f74:	08009fed 	.word	0x08009fed
 8009f78:	08009fed 	.word	0x08009fed
 8009f7c:	08009fed 	.word	0x08009fed
 8009f80:	08009fed 	.word	0x08009fed
 8009f84:	08009ff3 	.word	0x08009ff3
 8009f88:	08009fed 	.word	0x08009fed
 8009f8c:	08009fed 	.word	0x08009fed
 8009f90:	08009fed 	.word	0x08009fed
 8009f94:	08009fed 	.word	0x08009fed
 8009f98:	08009fed 	.word	0x08009fed
 8009f9c:	08009fed 	.word	0x08009fed
 8009fa0:	08009fed 	.word	0x08009fed
 8009fa4:	08009ff3 	.word	0x08009ff3
 8009fa8:	08009fed 	.word	0x08009fed
 8009fac:	08009fed 	.word	0x08009fed
 8009fb0:	08009fed 	.word	0x08009fed
 8009fb4:	08009fed 	.word	0x08009fed
 8009fb8:	08009fed 	.word	0x08009fed
 8009fbc:	08009fed 	.word	0x08009fed
 8009fc0:	08009fed 	.word	0x08009fed
 8009fc4:	08009ff3 	.word	0x08009ff3
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8009fc8:	687b      	ldr	r3, [r7, #4]
 8009fca:	3304      	adds	r3, #4
 8009fcc:	2101      	movs	r1, #1
 8009fce:	4618      	mov	r0, r3
 8009fd0:	f001 f97a 	bl	800b2c8 <RCCEx_PLL2_Config>
 8009fd4:	4603      	mov	r3, r0
 8009fd6:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8009fd8:	e00c      	b.n	8009ff4 <HAL_RCCEx_PeriphCLKConfig+0x7ec>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8009fda:	687b      	ldr	r3, [r7, #4]
 8009fdc:	3324      	adds	r3, #36	; 0x24
 8009fde:	2101      	movs	r1, #1
 8009fe0:	4618      	mov	r0, r3
 8009fe2:	f001 fa23 	bl	800b42c <RCCEx_PLL3_Config>
 8009fe6:	4603      	mov	r3, r0
 8009fe8:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8009fea:	e003      	b.n	8009ff4 <HAL_RCCEx_PeriphCLKConfig+0x7ec>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8009fec:	2301      	movs	r3, #1
 8009fee:	75fb      	strb	r3, [r7, #23]
      break;
 8009ff0:	e000      	b.n	8009ff4 <HAL_RCCEx_PeriphCLKConfig+0x7ec>
      break;
 8009ff2:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009ff4:	7dfb      	ldrb	r3, [r7, #23]
 8009ff6:	2b00      	cmp	r3, #0
 8009ff8:	d109      	bne.n	800a00e <HAL_RCCEx_PeriphCLKConfig+0x806>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8009ffa:	4b32      	ldr	r3, [pc, #200]	; (800a0c4 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8009ffc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009ffe:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 800a002:	687b      	ldr	r3, [r7, #4]
 800a004:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800a006:	492f      	ldr	r1, [pc, #188]	; (800a0c4 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 800a008:	4313      	orrs	r3, r2
 800a00a:	654b      	str	r3, [r1, #84]	; 0x54
 800a00c:	e001      	b.n	800a012 <HAL_RCCEx_PeriphCLKConfig+0x80a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a00e:	7dfb      	ldrb	r3, [r7, #23]
 800a010:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 800a012:	687b      	ldr	r3, [r7, #4]
 800a014:	681b      	ldr	r3, [r3, #0]
 800a016:	f003 0302 	and.w	r3, r3, #2
 800a01a:	2b00      	cmp	r3, #0
 800a01c:	d037      	beq.n	800a08e <HAL_RCCEx_PeriphCLKConfig+0x886>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 800a01e:	687b      	ldr	r3, [r7, #4]
 800a020:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a022:	2b05      	cmp	r3, #5
 800a024:	d820      	bhi.n	800a068 <HAL_RCCEx_PeriphCLKConfig+0x860>
 800a026:	a201      	add	r2, pc, #4	; (adr r2, 800a02c <HAL_RCCEx_PeriphCLKConfig+0x824>)
 800a028:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a02c:	0800a06f 	.word	0x0800a06f
 800a030:	0800a045 	.word	0x0800a045
 800a034:	0800a057 	.word	0x0800a057
 800a038:	0800a06f 	.word	0x0800a06f
 800a03c:	0800a06f 	.word	0x0800a06f
 800a040:	0800a06f 	.word	0x0800a06f
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800a044:	687b      	ldr	r3, [r7, #4]
 800a046:	3304      	adds	r3, #4
 800a048:	2101      	movs	r1, #1
 800a04a:	4618      	mov	r0, r3
 800a04c:	f001 f93c 	bl	800b2c8 <RCCEx_PLL2_Config>
 800a050:	4603      	mov	r3, r0
 800a052:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 800a054:	e00c      	b.n	800a070 <HAL_RCCEx_PeriphCLKConfig+0x868>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800a056:	687b      	ldr	r3, [r7, #4]
 800a058:	3324      	adds	r3, #36	; 0x24
 800a05a:	2101      	movs	r1, #1
 800a05c:	4618      	mov	r0, r3
 800a05e:	f001 f9e5 	bl	800b42c <RCCEx_PLL3_Config>
 800a062:	4603      	mov	r3, r0
 800a064:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 800a066:	e003      	b.n	800a070 <HAL_RCCEx_PeriphCLKConfig+0x868>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800a068:	2301      	movs	r3, #1
 800a06a:	75fb      	strb	r3, [r7, #23]
      break;
 800a06c:	e000      	b.n	800a070 <HAL_RCCEx_PeriphCLKConfig+0x868>
      break;
 800a06e:	bf00      	nop
    }

    if(ret == HAL_OK)
 800a070:	7dfb      	ldrb	r3, [r7, #23]
 800a072:	2b00      	cmp	r3, #0
 800a074:	d109      	bne.n	800a08a <HAL_RCCEx_PeriphCLKConfig+0x882>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 800a076:	4b13      	ldr	r3, [pc, #76]	; (800a0c4 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 800a078:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a07a:	f023 0207 	bic.w	r2, r3, #7
 800a07e:	687b      	ldr	r3, [r7, #4]
 800a080:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a082:	4910      	ldr	r1, [pc, #64]	; (800a0c4 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 800a084:	4313      	orrs	r3, r2
 800a086:	654b      	str	r3, [r1, #84]	; 0x54
 800a088:	e001      	b.n	800a08e <HAL_RCCEx_PeriphCLKConfig+0x886>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a08a:	7dfb      	ldrb	r3, [r7, #23]
 800a08c:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800a08e:	687b      	ldr	r3, [r7, #4]
 800a090:	681b      	ldr	r3, [r3, #0]
 800a092:	f003 0304 	and.w	r3, r3, #4
 800a096:	2b00      	cmp	r3, #0
 800a098:	d040      	beq.n	800a11c <HAL_RCCEx_PeriphCLKConfig+0x914>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 800a09a:	687b      	ldr	r3, [r7, #4]
 800a09c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a0a0:	2b05      	cmp	r3, #5
 800a0a2:	d827      	bhi.n	800a0f4 <HAL_RCCEx_PeriphCLKConfig+0x8ec>
 800a0a4:	a201      	add	r2, pc, #4	; (adr r2, 800a0ac <HAL_RCCEx_PeriphCLKConfig+0x8a4>)
 800a0a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a0aa:	bf00      	nop
 800a0ac:	0800a0fb 	.word	0x0800a0fb
 800a0b0:	0800a0d1 	.word	0x0800a0d1
 800a0b4:	0800a0e3 	.word	0x0800a0e3
 800a0b8:	0800a0fb 	.word	0x0800a0fb
 800a0bc:	0800a0fb 	.word	0x0800a0fb
 800a0c0:	0800a0fb 	.word	0x0800a0fb
 800a0c4:	58024400 	.word	0x58024400
 800a0c8:	58024800 	.word	0x58024800
 800a0cc:	00ffffcf 	.word	0x00ffffcf
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800a0d0:	687b      	ldr	r3, [r7, #4]
 800a0d2:	3304      	adds	r3, #4
 800a0d4:	2101      	movs	r1, #1
 800a0d6:	4618      	mov	r0, r3
 800a0d8:	f001 f8f6 	bl	800b2c8 <RCCEx_PLL2_Config>
 800a0dc:	4603      	mov	r3, r0
 800a0de:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 800a0e0:	e00c      	b.n	800a0fc <HAL_RCCEx_PeriphCLKConfig+0x8f4>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800a0e2:	687b      	ldr	r3, [r7, #4]
 800a0e4:	3324      	adds	r3, #36	; 0x24
 800a0e6:	2101      	movs	r1, #1
 800a0e8:	4618      	mov	r0, r3
 800a0ea:	f001 f99f 	bl	800b42c <RCCEx_PLL3_Config>
 800a0ee:	4603      	mov	r3, r0
 800a0f0:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 800a0f2:	e003      	b.n	800a0fc <HAL_RCCEx_PeriphCLKConfig+0x8f4>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800a0f4:	2301      	movs	r3, #1
 800a0f6:	75fb      	strb	r3, [r7, #23]
      break;
 800a0f8:	e000      	b.n	800a0fc <HAL_RCCEx_PeriphCLKConfig+0x8f4>
      break;
 800a0fa:	bf00      	nop
    }

    if(ret == HAL_OK)
 800a0fc:	7dfb      	ldrb	r3, [r7, #23]
 800a0fe:	2b00      	cmp	r3, #0
 800a100:	d10a      	bne.n	800a118 <HAL_RCCEx_PeriphCLKConfig+0x910>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800a102:	4bb2      	ldr	r3, [pc, #712]	; (800a3cc <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 800a104:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a106:	f023 0207 	bic.w	r2, r3, #7
 800a10a:	687b      	ldr	r3, [r7, #4]
 800a10c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a110:	49ae      	ldr	r1, [pc, #696]	; (800a3cc <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 800a112:	4313      	orrs	r3, r2
 800a114:	658b      	str	r3, [r1, #88]	; 0x58
 800a116:	e001      	b.n	800a11c <HAL_RCCEx_PeriphCLKConfig+0x914>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a118:	7dfb      	ldrb	r3, [r7, #23]
 800a11a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800a11c:	687b      	ldr	r3, [r7, #4]
 800a11e:	681b      	ldr	r3, [r3, #0]
 800a120:	f003 0320 	and.w	r3, r3, #32
 800a124:	2b00      	cmp	r3, #0
 800a126:	d044      	beq.n	800a1b2 <HAL_RCCEx_PeriphCLKConfig+0x9aa>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 800a128:	687b      	ldr	r3, [r7, #4]
 800a12a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a12e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a132:	d01b      	beq.n	800a16c <HAL_RCCEx_PeriphCLKConfig+0x964>
 800a134:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a138:	d805      	bhi.n	800a146 <HAL_RCCEx_PeriphCLKConfig+0x93e>
 800a13a:	2b00      	cmp	r3, #0
 800a13c:	d022      	beq.n	800a184 <HAL_RCCEx_PeriphCLKConfig+0x97c>
 800a13e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800a142:	d00a      	beq.n	800a15a <HAL_RCCEx_PeriphCLKConfig+0x952>
 800a144:	e01b      	b.n	800a17e <HAL_RCCEx_PeriphCLKConfig+0x976>
 800a146:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a14a:	d01d      	beq.n	800a188 <HAL_RCCEx_PeriphCLKConfig+0x980>
 800a14c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800a150:	d01c      	beq.n	800a18c <HAL_RCCEx_PeriphCLKConfig+0x984>
 800a152:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800a156:	d01b      	beq.n	800a190 <HAL_RCCEx_PeriphCLKConfig+0x988>
 800a158:	e011      	b.n	800a17e <HAL_RCCEx_PeriphCLKConfig+0x976>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800a15a:	687b      	ldr	r3, [r7, #4]
 800a15c:	3304      	adds	r3, #4
 800a15e:	2100      	movs	r1, #0
 800a160:	4618      	mov	r0, r3
 800a162:	f001 f8b1 	bl	800b2c8 <RCCEx_PLL2_Config>
 800a166:	4603      	mov	r3, r0
 800a168:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 800a16a:	e012      	b.n	800a192 <HAL_RCCEx_PeriphCLKConfig+0x98a>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800a16c:	687b      	ldr	r3, [r7, #4]
 800a16e:	3324      	adds	r3, #36	; 0x24
 800a170:	2102      	movs	r1, #2
 800a172:	4618      	mov	r0, r3
 800a174:	f001 f95a 	bl	800b42c <RCCEx_PLL3_Config>
 800a178:	4603      	mov	r3, r0
 800a17a:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 800a17c:	e009      	b.n	800a192 <HAL_RCCEx_PeriphCLKConfig+0x98a>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800a17e:	2301      	movs	r3, #1
 800a180:	75fb      	strb	r3, [r7, #23]
      break;
 800a182:	e006      	b.n	800a192 <HAL_RCCEx_PeriphCLKConfig+0x98a>
      break;
 800a184:	bf00      	nop
 800a186:	e004      	b.n	800a192 <HAL_RCCEx_PeriphCLKConfig+0x98a>
      break;
 800a188:	bf00      	nop
 800a18a:	e002      	b.n	800a192 <HAL_RCCEx_PeriphCLKConfig+0x98a>
      break;
 800a18c:	bf00      	nop
 800a18e:	e000      	b.n	800a192 <HAL_RCCEx_PeriphCLKConfig+0x98a>
      break;
 800a190:	bf00      	nop
    }

    if(ret == HAL_OK)
 800a192:	7dfb      	ldrb	r3, [r7, #23]
 800a194:	2b00      	cmp	r3, #0
 800a196:	d10a      	bne.n	800a1ae <HAL_RCCEx_PeriphCLKConfig+0x9a6>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800a198:	4b8c      	ldr	r3, [pc, #560]	; (800a3cc <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 800a19a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a19c:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 800a1a0:	687b      	ldr	r3, [r7, #4]
 800a1a2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a1a6:	4989      	ldr	r1, [pc, #548]	; (800a3cc <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 800a1a8:	4313      	orrs	r3, r2
 800a1aa:	654b      	str	r3, [r1, #84]	; 0x54
 800a1ac:	e001      	b.n	800a1b2 <HAL_RCCEx_PeriphCLKConfig+0x9aa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a1ae:	7dfb      	ldrb	r3, [r7, #23]
 800a1b0:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800a1b2:	687b      	ldr	r3, [r7, #4]
 800a1b4:	681b      	ldr	r3, [r3, #0]
 800a1b6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a1ba:	2b00      	cmp	r3, #0
 800a1bc:	d044      	beq.n	800a248 <HAL_RCCEx_PeriphCLKConfig+0xa40>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 800a1be:	687b      	ldr	r3, [r7, #4]
 800a1c0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800a1c4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a1c8:	d01b      	beq.n	800a202 <HAL_RCCEx_PeriphCLKConfig+0x9fa>
 800a1ca:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a1ce:	d805      	bhi.n	800a1dc <HAL_RCCEx_PeriphCLKConfig+0x9d4>
 800a1d0:	2b00      	cmp	r3, #0
 800a1d2:	d022      	beq.n	800a21a <HAL_RCCEx_PeriphCLKConfig+0xa12>
 800a1d4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a1d8:	d00a      	beq.n	800a1f0 <HAL_RCCEx_PeriphCLKConfig+0x9e8>
 800a1da:	e01b      	b.n	800a214 <HAL_RCCEx_PeriphCLKConfig+0xa0c>
 800a1dc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a1e0:	d01d      	beq.n	800a21e <HAL_RCCEx_PeriphCLKConfig+0xa16>
 800a1e2:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800a1e6:	d01c      	beq.n	800a222 <HAL_RCCEx_PeriphCLKConfig+0xa1a>
 800a1e8:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800a1ec:	d01b      	beq.n	800a226 <HAL_RCCEx_PeriphCLKConfig+0xa1e>
 800a1ee:	e011      	b.n	800a214 <HAL_RCCEx_PeriphCLKConfig+0xa0c>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800a1f0:	687b      	ldr	r3, [r7, #4]
 800a1f2:	3304      	adds	r3, #4
 800a1f4:	2100      	movs	r1, #0
 800a1f6:	4618      	mov	r0, r3
 800a1f8:	f001 f866 	bl	800b2c8 <RCCEx_PLL2_Config>
 800a1fc:	4603      	mov	r3, r0
 800a1fe:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 800a200:	e012      	b.n	800a228 <HAL_RCCEx_PeriphCLKConfig+0xa20>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800a202:	687b      	ldr	r3, [r7, #4]
 800a204:	3324      	adds	r3, #36	; 0x24
 800a206:	2102      	movs	r1, #2
 800a208:	4618      	mov	r0, r3
 800a20a:	f001 f90f 	bl	800b42c <RCCEx_PLL3_Config>
 800a20e:	4603      	mov	r3, r0
 800a210:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 800a212:	e009      	b.n	800a228 <HAL_RCCEx_PeriphCLKConfig+0xa20>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800a214:	2301      	movs	r3, #1
 800a216:	75fb      	strb	r3, [r7, #23]
      break;
 800a218:	e006      	b.n	800a228 <HAL_RCCEx_PeriphCLKConfig+0xa20>
      break;
 800a21a:	bf00      	nop
 800a21c:	e004      	b.n	800a228 <HAL_RCCEx_PeriphCLKConfig+0xa20>
      break;
 800a21e:	bf00      	nop
 800a220:	e002      	b.n	800a228 <HAL_RCCEx_PeriphCLKConfig+0xa20>
      break;
 800a222:	bf00      	nop
 800a224:	e000      	b.n	800a228 <HAL_RCCEx_PeriphCLKConfig+0xa20>
      break;
 800a226:	bf00      	nop
    }

    if(ret == HAL_OK)
 800a228:	7dfb      	ldrb	r3, [r7, #23]
 800a22a:	2b00      	cmp	r3, #0
 800a22c:	d10a      	bne.n	800a244 <HAL_RCCEx_PeriphCLKConfig+0xa3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800a22e:	4b67      	ldr	r3, [pc, #412]	; (800a3cc <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 800a230:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a232:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800a236:	687b      	ldr	r3, [r7, #4]
 800a238:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800a23c:	4963      	ldr	r1, [pc, #396]	; (800a3cc <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 800a23e:	4313      	orrs	r3, r2
 800a240:	658b      	str	r3, [r1, #88]	; 0x58
 800a242:	e001      	b.n	800a248 <HAL_RCCEx_PeriphCLKConfig+0xa40>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a244:	7dfb      	ldrb	r3, [r7, #23]
 800a246:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 800a248:	687b      	ldr	r3, [r7, #4]
 800a24a:	681b      	ldr	r3, [r3, #0]
 800a24c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a250:	2b00      	cmp	r3, #0
 800a252:	d044      	beq.n	800a2de <HAL_RCCEx_PeriphCLKConfig+0xad6>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 800a254:	687b      	ldr	r3, [r7, #4]
 800a256:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800a25a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800a25e:	d01b      	beq.n	800a298 <HAL_RCCEx_PeriphCLKConfig+0xa90>
 800a260:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800a264:	d805      	bhi.n	800a272 <HAL_RCCEx_PeriphCLKConfig+0xa6a>
 800a266:	2b00      	cmp	r3, #0
 800a268:	d022      	beq.n	800a2b0 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
 800a26a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a26e:	d00a      	beq.n	800a286 <HAL_RCCEx_PeriphCLKConfig+0xa7e>
 800a270:	e01b      	b.n	800a2aa <HAL_RCCEx_PeriphCLKConfig+0xaa2>
 800a272:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a276:	d01d      	beq.n	800a2b4 <HAL_RCCEx_PeriphCLKConfig+0xaac>
 800a278:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800a27c:	d01c      	beq.n	800a2b8 <HAL_RCCEx_PeriphCLKConfig+0xab0>
 800a27e:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800a282:	d01b      	beq.n	800a2bc <HAL_RCCEx_PeriphCLKConfig+0xab4>
 800a284:	e011      	b.n	800a2aa <HAL_RCCEx_PeriphCLKConfig+0xaa2>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800a286:	687b      	ldr	r3, [r7, #4]
 800a288:	3304      	adds	r3, #4
 800a28a:	2100      	movs	r1, #0
 800a28c:	4618      	mov	r0, r3
 800a28e:	f001 f81b 	bl	800b2c8 <RCCEx_PLL2_Config>
 800a292:	4603      	mov	r3, r0
 800a294:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 800a296:	e012      	b.n	800a2be <HAL_RCCEx_PeriphCLKConfig+0xab6>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800a298:	687b      	ldr	r3, [r7, #4]
 800a29a:	3324      	adds	r3, #36	; 0x24
 800a29c:	2102      	movs	r1, #2
 800a29e:	4618      	mov	r0, r3
 800a2a0:	f001 f8c4 	bl	800b42c <RCCEx_PLL3_Config>
 800a2a4:	4603      	mov	r3, r0
 800a2a6:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 800a2a8:	e009      	b.n	800a2be <HAL_RCCEx_PeriphCLKConfig+0xab6>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800a2aa:	2301      	movs	r3, #1
 800a2ac:	75fb      	strb	r3, [r7, #23]
      break;
 800a2ae:	e006      	b.n	800a2be <HAL_RCCEx_PeriphCLKConfig+0xab6>
      break;
 800a2b0:	bf00      	nop
 800a2b2:	e004      	b.n	800a2be <HAL_RCCEx_PeriphCLKConfig+0xab6>
      break;
 800a2b4:	bf00      	nop
 800a2b6:	e002      	b.n	800a2be <HAL_RCCEx_PeriphCLKConfig+0xab6>
      break;
 800a2b8:	bf00      	nop
 800a2ba:	e000      	b.n	800a2be <HAL_RCCEx_PeriphCLKConfig+0xab6>
      break;
 800a2bc:	bf00      	nop
    }

    if(ret == HAL_OK)
 800a2be:	7dfb      	ldrb	r3, [r7, #23]
 800a2c0:	2b00      	cmp	r3, #0
 800a2c2:	d10a      	bne.n	800a2da <HAL_RCCEx_PeriphCLKConfig+0xad2>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 800a2c4:	4b41      	ldr	r3, [pc, #260]	; (800a3cc <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 800a2c6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a2c8:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800a2cc:	687b      	ldr	r3, [r7, #4]
 800a2ce:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800a2d2:	493e      	ldr	r1, [pc, #248]	; (800a3cc <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 800a2d4:	4313      	orrs	r3, r2
 800a2d6:	658b      	str	r3, [r1, #88]	; 0x58
 800a2d8:	e001      	b.n	800a2de <HAL_RCCEx_PeriphCLKConfig+0xad6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a2da:	7dfb      	ldrb	r3, [r7, #23]
 800a2dc:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 800a2de:	687b      	ldr	r3, [r7, #4]
 800a2e0:	681b      	ldr	r3, [r3, #0]
 800a2e2:	f003 0308 	and.w	r3, r3, #8
 800a2e6:	2b00      	cmp	r3, #0
 800a2e8:	d01a      	beq.n	800a320 <HAL_RCCEx_PeriphCLKConfig+0xb18>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 800a2ea:	687b      	ldr	r3, [r7, #4]
 800a2ec:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a2f0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a2f4:	d10a      	bne.n	800a30c <HAL_RCCEx_PeriphCLKConfig+0xb04>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 800a2f6:	687b      	ldr	r3, [r7, #4]
 800a2f8:	3324      	adds	r3, #36	; 0x24
 800a2fa:	2102      	movs	r1, #2
 800a2fc:	4618      	mov	r0, r3
 800a2fe:	f001 f895 	bl	800b42c <RCCEx_PLL3_Config>
 800a302:	4603      	mov	r3, r0
 800a304:	2b00      	cmp	r3, #0
 800a306:	d001      	beq.n	800a30c <HAL_RCCEx_PeriphCLKConfig+0xb04>
        {
          status = HAL_ERROR;
 800a308:	2301      	movs	r3, #1
 800a30a:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 800a30c:	4b2f      	ldr	r3, [pc, #188]	; (800a3cc <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 800a30e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a310:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800a314:	687b      	ldr	r3, [r7, #4]
 800a316:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a31a:	492c      	ldr	r1, [pc, #176]	; (800a3cc <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 800a31c:	4313      	orrs	r3, r2
 800a31e:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800a320:	687b      	ldr	r3, [r7, #4]
 800a322:	681b      	ldr	r3, [r3, #0]
 800a324:	f003 0310 	and.w	r3, r3, #16
 800a328:	2b00      	cmp	r3, #0
 800a32a:	d01a      	beq.n	800a362 <HAL_RCCEx_PeriphCLKConfig+0xb5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 800a32c:	687b      	ldr	r3, [r7, #4]
 800a32e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800a332:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a336:	d10a      	bne.n	800a34e <HAL_RCCEx_PeriphCLKConfig+0xb46>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 800a338:	687b      	ldr	r3, [r7, #4]
 800a33a:	3324      	adds	r3, #36	; 0x24
 800a33c:	2102      	movs	r1, #2
 800a33e:	4618      	mov	r0, r3
 800a340:	f001 f874 	bl	800b42c <RCCEx_PLL3_Config>
 800a344:	4603      	mov	r3, r0
 800a346:	2b00      	cmp	r3, #0
 800a348:	d001      	beq.n	800a34e <HAL_RCCEx_PeriphCLKConfig+0xb46>
      {
        status = HAL_ERROR;
 800a34a:	2301      	movs	r3, #1
 800a34c:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800a34e:	4b1f      	ldr	r3, [pc, #124]	; (800a3cc <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 800a350:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a352:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800a356:	687b      	ldr	r3, [r7, #4]
 800a358:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800a35c:	491b      	ldr	r1, [pc, #108]	; (800a3cc <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 800a35e:	4313      	orrs	r3, r2
 800a360:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800a362:	687b      	ldr	r3, [r7, #4]
 800a364:	681b      	ldr	r3, [r3, #0]
 800a366:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800a36a:	2b00      	cmp	r3, #0
 800a36c:	d032      	beq.n	800a3d4 <HAL_RCCEx_PeriphCLKConfig+0xbcc>
  {
    switch(PeriphClkInit->AdcClockSelection)
 800a36e:	687b      	ldr	r3, [r7, #4]
 800a370:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800a374:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a378:	d00d      	beq.n	800a396 <HAL_RCCEx_PeriphCLKConfig+0xb8e>
 800a37a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800a37e:	d016      	beq.n	800a3ae <HAL_RCCEx_PeriphCLKConfig+0xba6>
 800a380:	2b00      	cmp	r3, #0
 800a382:	d111      	bne.n	800a3a8 <HAL_RCCEx_PeriphCLKConfig+0xba0>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800a384:	687b      	ldr	r3, [r7, #4]
 800a386:	3304      	adds	r3, #4
 800a388:	2100      	movs	r1, #0
 800a38a:	4618      	mov	r0, r3
 800a38c:	f000 ff9c 	bl	800b2c8 <RCCEx_PLL2_Config>
 800a390:	4603      	mov	r3, r0
 800a392:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 800a394:	e00c      	b.n	800a3b0 <HAL_RCCEx_PeriphCLKConfig+0xba8>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800a396:	687b      	ldr	r3, [r7, #4]
 800a398:	3324      	adds	r3, #36	; 0x24
 800a39a:	2102      	movs	r1, #2
 800a39c:	4618      	mov	r0, r3
 800a39e:	f001 f845 	bl	800b42c <RCCEx_PLL3_Config>
 800a3a2:	4603      	mov	r3, r0
 800a3a4:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 800a3a6:	e003      	b.n	800a3b0 <HAL_RCCEx_PeriphCLKConfig+0xba8>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800a3a8:	2301      	movs	r3, #1
 800a3aa:	75fb      	strb	r3, [r7, #23]
      break;
 800a3ac:	e000      	b.n	800a3b0 <HAL_RCCEx_PeriphCLKConfig+0xba8>
      break;
 800a3ae:	bf00      	nop
    }

    if(ret == HAL_OK)
 800a3b0:	7dfb      	ldrb	r3, [r7, #23]
 800a3b2:	2b00      	cmp	r3, #0
 800a3b4:	d10c      	bne.n	800a3d0 <HAL_RCCEx_PeriphCLKConfig+0xbc8>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800a3b6:	4b05      	ldr	r3, [pc, #20]	; (800a3cc <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 800a3b8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a3ba:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800a3be:	687b      	ldr	r3, [r7, #4]
 800a3c0:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800a3c4:	4901      	ldr	r1, [pc, #4]	; (800a3cc <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 800a3c6:	4313      	orrs	r3, r2
 800a3c8:	658b      	str	r3, [r1, #88]	; 0x58
 800a3ca:	e003      	b.n	800a3d4 <HAL_RCCEx_PeriphCLKConfig+0xbcc>
 800a3cc:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a3d0:	7dfb      	ldrb	r3, [r7, #23]
 800a3d2:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800a3d4:	687b      	ldr	r3, [r7, #4]
 800a3d6:	681b      	ldr	r3, [r3, #0]
 800a3d8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800a3dc:	2b00      	cmp	r3, #0
 800a3de:	d02f      	beq.n	800a440 <HAL_RCCEx_PeriphCLKConfig+0xc38>
  {

    switch(PeriphClkInit->UsbClockSelection)
 800a3e0:	687b      	ldr	r3, [r7, #4]
 800a3e2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a3e6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800a3ea:	d00c      	beq.n	800a406 <HAL_RCCEx_PeriphCLKConfig+0xbfe>
 800a3ec:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800a3f0:	d015      	beq.n	800a41e <HAL_RCCEx_PeriphCLKConfig+0xc16>
 800a3f2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a3f6:	d10f      	bne.n	800a418 <HAL_RCCEx_PeriphCLKConfig+0xc10>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a3f8:	4b79      	ldr	r3, [pc, #484]	; (800a5e0 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 800a3fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a3fc:	4a78      	ldr	r2, [pc, #480]	; (800a5e0 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 800a3fe:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a402:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 800a404:	e00c      	b.n	800a420 <HAL_RCCEx_PeriphCLKConfig+0xc18>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800a406:	687b      	ldr	r3, [r7, #4]
 800a408:	3324      	adds	r3, #36	; 0x24
 800a40a:	2101      	movs	r1, #1
 800a40c:	4618      	mov	r0, r3
 800a40e:	f001 f80d 	bl	800b42c <RCCEx_PLL3_Config>
 800a412:	4603      	mov	r3, r0
 800a414:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 800a416:	e003      	b.n	800a420 <HAL_RCCEx_PeriphCLKConfig+0xc18>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800a418:	2301      	movs	r3, #1
 800a41a:	75fb      	strb	r3, [r7, #23]
      break;
 800a41c:	e000      	b.n	800a420 <HAL_RCCEx_PeriphCLKConfig+0xc18>
      break;
 800a41e:	bf00      	nop
    }

    if(ret == HAL_OK)
 800a420:	7dfb      	ldrb	r3, [r7, #23]
 800a422:	2b00      	cmp	r3, #0
 800a424:	d10a      	bne.n	800a43c <HAL_RCCEx_PeriphCLKConfig+0xc34>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800a426:	4b6e      	ldr	r3, [pc, #440]	; (800a5e0 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 800a428:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a42a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800a42e:	687b      	ldr	r3, [r7, #4]
 800a430:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a434:	496a      	ldr	r1, [pc, #424]	; (800a5e0 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 800a436:	4313      	orrs	r3, r2
 800a438:	654b      	str	r3, [r1, #84]	; 0x54
 800a43a:	e001      	b.n	800a440 <HAL_RCCEx_PeriphCLKConfig+0xc38>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a43c:	7dfb      	ldrb	r3, [r7, #23]
 800a43e:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800a440:	687b      	ldr	r3, [r7, #4]
 800a442:	681b      	ldr	r3, [r3, #0]
 800a444:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800a448:	2b00      	cmp	r3, #0
 800a44a:	d029      	beq.n	800a4a0 <HAL_RCCEx_PeriphCLKConfig+0xc98>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 800a44c:	687b      	ldr	r3, [r7, #4]
 800a44e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a450:	2b00      	cmp	r3, #0
 800a452:	d003      	beq.n	800a45c <HAL_RCCEx_PeriphCLKConfig+0xc54>
 800a454:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a458:	d007      	beq.n	800a46a <HAL_RCCEx_PeriphCLKConfig+0xc62>
 800a45a:	e00f      	b.n	800a47c <HAL_RCCEx_PeriphCLKConfig+0xc74>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a45c:	4b60      	ldr	r3, [pc, #384]	; (800a5e0 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 800a45e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a460:	4a5f      	ldr	r2, [pc, #380]	; (800a5e0 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 800a462:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a466:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 800a468:	e00b      	b.n	800a482 <HAL_RCCEx_PeriphCLKConfig+0xc7a>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800a46a:	687b      	ldr	r3, [r7, #4]
 800a46c:	3304      	adds	r3, #4
 800a46e:	2102      	movs	r1, #2
 800a470:	4618      	mov	r0, r3
 800a472:	f000 ff29 	bl	800b2c8 <RCCEx_PLL2_Config>
 800a476:	4603      	mov	r3, r0
 800a478:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 800a47a:	e002      	b.n	800a482 <HAL_RCCEx_PeriphCLKConfig+0xc7a>

    default:
      ret = HAL_ERROR;
 800a47c:	2301      	movs	r3, #1
 800a47e:	75fb      	strb	r3, [r7, #23]
      break;
 800a480:	bf00      	nop
    }

    if(ret == HAL_OK)
 800a482:	7dfb      	ldrb	r3, [r7, #23]
 800a484:	2b00      	cmp	r3, #0
 800a486:	d109      	bne.n	800a49c <HAL_RCCEx_PeriphCLKConfig+0xc94>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 800a488:	4b55      	ldr	r3, [pc, #340]	; (800a5e0 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 800a48a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a48c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800a490:	687b      	ldr	r3, [r7, #4]
 800a492:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a494:	4952      	ldr	r1, [pc, #328]	; (800a5e0 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 800a496:	4313      	orrs	r3, r2
 800a498:	64cb      	str	r3, [r1, #76]	; 0x4c
 800a49a:	e001      	b.n	800a4a0 <HAL_RCCEx_PeriphCLKConfig+0xc98>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a49c:	7dfb      	ldrb	r3, [r7, #23]
 800a49e:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800a4a0:	687b      	ldr	r3, [r7, #4]
 800a4a2:	681b      	ldr	r3, [r3, #0]
 800a4a4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800a4a8:	2b00      	cmp	r3, #0
 800a4aa:	d00a      	beq.n	800a4c2 <HAL_RCCEx_PeriphCLKConfig+0xcba>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 800a4ac:	687b      	ldr	r3, [r7, #4]
 800a4ae:	3324      	adds	r3, #36	; 0x24
 800a4b0:	2102      	movs	r1, #2
 800a4b2:	4618      	mov	r0, r3
 800a4b4:	f000 ffba 	bl	800b42c <RCCEx_PLL3_Config>
 800a4b8:	4603      	mov	r3, r0
 800a4ba:	2b00      	cmp	r3, #0
 800a4bc:	d001      	beq.n	800a4c2 <HAL_RCCEx_PeriphCLKConfig+0xcba>
    {
      status=HAL_ERROR;
 800a4be:	2301      	movs	r3, #1
 800a4c0:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800a4c2:	687b      	ldr	r3, [r7, #4]
 800a4c4:	681b      	ldr	r3, [r3, #0]
 800a4c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a4ca:	2b00      	cmp	r3, #0
 800a4cc:	d02f      	beq.n	800a52e <HAL_RCCEx_PeriphCLKConfig+0xd26>
  {

    switch(PeriphClkInit->RngClockSelection)
 800a4ce:	687b      	ldr	r3, [r7, #4]
 800a4d0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a4d2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a4d6:	d00c      	beq.n	800a4f2 <HAL_RCCEx_PeriphCLKConfig+0xcea>
 800a4d8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a4dc:	d802      	bhi.n	800a4e4 <HAL_RCCEx_PeriphCLKConfig+0xcdc>
 800a4de:	2b00      	cmp	r3, #0
 800a4e0:	d011      	beq.n	800a506 <HAL_RCCEx_PeriphCLKConfig+0xcfe>
 800a4e2:	e00d      	b.n	800a500 <HAL_RCCEx_PeriphCLKConfig+0xcf8>
 800a4e4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a4e8:	d00f      	beq.n	800a50a <HAL_RCCEx_PeriphCLKConfig+0xd02>
 800a4ea:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800a4ee:	d00e      	beq.n	800a50e <HAL_RCCEx_PeriphCLKConfig+0xd06>
 800a4f0:	e006      	b.n	800a500 <HAL_RCCEx_PeriphCLKConfig+0xcf8>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a4f2:	4b3b      	ldr	r3, [pc, #236]	; (800a5e0 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 800a4f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a4f6:	4a3a      	ldr	r2, [pc, #232]	; (800a5e0 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 800a4f8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a4fc:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 800a4fe:	e007      	b.n	800a510 <HAL_RCCEx_PeriphCLKConfig+0xd08>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800a500:	2301      	movs	r3, #1
 800a502:	75fb      	strb	r3, [r7, #23]
      break;
 800a504:	e004      	b.n	800a510 <HAL_RCCEx_PeriphCLKConfig+0xd08>
      break;
 800a506:	bf00      	nop
 800a508:	e002      	b.n	800a510 <HAL_RCCEx_PeriphCLKConfig+0xd08>
      break;
 800a50a:	bf00      	nop
 800a50c:	e000      	b.n	800a510 <HAL_RCCEx_PeriphCLKConfig+0xd08>
      break;
 800a50e:	bf00      	nop
    }

    if(ret == HAL_OK)
 800a510:	7dfb      	ldrb	r3, [r7, #23]
 800a512:	2b00      	cmp	r3, #0
 800a514:	d109      	bne.n	800a52a <HAL_RCCEx_PeriphCLKConfig+0xd22>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800a516:	4b32      	ldr	r3, [pc, #200]	; (800a5e0 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 800a518:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a51a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800a51e:	687b      	ldr	r3, [r7, #4]
 800a520:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a522:	492f      	ldr	r1, [pc, #188]	; (800a5e0 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 800a524:	4313      	orrs	r3, r2
 800a526:	654b      	str	r3, [r1, #84]	; 0x54
 800a528:	e001      	b.n	800a52e <HAL_RCCEx_PeriphCLKConfig+0xd26>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a52a:	7dfb      	ldrb	r3, [r7, #23]
 800a52c:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800a52e:	687b      	ldr	r3, [r7, #4]
 800a530:	681b      	ldr	r3, [r3, #0]
 800a532:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800a536:	2b00      	cmp	r3, #0
 800a538:	d008      	beq.n	800a54c <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800a53a:	4b29      	ldr	r3, [pc, #164]	; (800a5e0 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 800a53c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a53e:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800a542:	687b      	ldr	r3, [r7, #4]
 800a544:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a546:	4926      	ldr	r1, [pc, #152]	; (800a5e0 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 800a548:	4313      	orrs	r3, r2
 800a54a:	650b      	str	r3, [r1, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 800a54c:	687b      	ldr	r3, [r7, #4]
 800a54e:	681b      	ldr	r3, [r3, #0]
 800a550:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800a554:	2b00      	cmp	r3, #0
 800a556:	d009      	beq.n	800a56c <HAL_RCCEx_PeriphCLKConfig+0xd64>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 800a558:	4b21      	ldr	r3, [pc, #132]	; (800a5e0 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 800a55a:	691b      	ldr	r3, [r3, #16]
 800a55c:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800a560:	687b      	ldr	r3, [r7, #4]
 800a562:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800a566:	491e      	ldr	r1, [pc, #120]	; (800a5e0 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 800a568:	4313      	orrs	r3, r2
 800a56a:	610b      	str	r3, [r1, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800a56c:	687b      	ldr	r3, [r7, #4]
 800a56e:	681b      	ldr	r3, [r3, #0]
 800a570:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800a574:	2b00      	cmp	r3, #0
 800a576:	d008      	beq.n	800a58a <HAL_RCCEx_PeriphCLKConfig+0xd82>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800a578:	4b19      	ldr	r3, [pc, #100]	; (800a5e0 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 800a57a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a57c:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800a580:	687b      	ldr	r3, [r7, #4]
 800a582:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800a584:	4916      	ldr	r1, [pc, #88]	; (800a5e0 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 800a586:	4313      	orrs	r3, r2
 800a588:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800a58a:	687b      	ldr	r3, [r7, #4]
 800a58c:	681b      	ldr	r3, [r3, #0]
 800a58e:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800a592:	2b00      	cmp	r3, #0
 800a594:	d00d      	beq.n	800a5b2 <HAL_RCCEx_PeriphCLKConfig+0xdaa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800a596:	4b12      	ldr	r3, [pc, #72]	; (800a5e0 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 800a598:	691b      	ldr	r3, [r3, #16]
 800a59a:	4a11      	ldr	r2, [pc, #68]	; (800a5e0 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 800a59c:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800a5a0:	6113      	str	r3, [r2, #16]
 800a5a2:	4b0f      	ldr	r3, [pc, #60]	; (800a5e0 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 800a5a4:	691a      	ldr	r2, [r3, #16]
 800a5a6:	687b      	ldr	r3, [r7, #4]
 800a5a8:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 800a5ac:	490c      	ldr	r1, [pc, #48]	; (800a5e0 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 800a5ae:	4313      	orrs	r3, r2
 800a5b0:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800a5b2:	687b      	ldr	r3, [r7, #4]
 800a5b4:	681b      	ldr	r3, [r3, #0]
 800a5b6:	2b00      	cmp	r3, #0
 800a5b8:	da08      	bge.n	800a5cc <HAL_RCCEx_PeriphCLKConfig+0xdc4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 800a5ba:	4b09      	ldr	r3, [pc, #36]	; (800a5e0 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 800a5bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a5be:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800a5c2:	687b      	ldr	r3, [r7, #4]
 800a5c4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a5c6:	4906      	ldr	r1, [pc, #24]	; (800a5e0 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 800a5c8:	4313      	orrs	r3, r2
 800a5ca:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  if (status == HAL_OK)
 800a5cc:	7dbb      	ldrb	r3, [r7, #22]
 800a5ce:	2b00      	cmp	r3, #0
 800a5d0:	d101      	bne.n	800a5d6 <HAL_RCCEx_PeriphCLKConfig+0xdce>
  {
    return HAL_OK;
 800a5d2:	2300      	movs	r3, #0
 800a5d4:	e000      	b.n	800a5d8 <HAL_RCCEx_PeriphCLKConfig+0xdd0>
  }
  return HAL_ERROR;
 800a5d6:	2301      	movs	r3, #1
}
 800a5d8:	4618      	mov	r0, r3
 800a5da:	3718      	adds	r7, #24
 800a5dc:	46bd      	mov	sp, r7
 800a5de:	bd80      	pop	{r7, pc}
 800a5e0:	58024400 	.word	0x58024400

0800a5e4 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 800a5e4:	b580      	push	{r7, lr}
 800a5e6:	b090      	sub	sp, #64	; 0x40
 800a5e8:	af00      	add	r7, sp, #0
 800a5ea:	6078      	str	r0, [r7, #4]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 800a5ec:	687b      	ldr	r3, [r7, #4]
 800a5ee:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a5f2:	d150      	bne.n	800a696 <HAL_RCCEx_GetPeriphCLKFreq+0xb2>
    {

      saiclocksource= __HAL_RCC_GET_SAI1_SOURCE();
 800a5f4:	4ba1      	ldr	r3, [pc, #644]	; (800a87c <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800a5f6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a5f8:	f003 0307 	and.w	r3, r3, #7
 800a5fc:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 800a5fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a600:	2b04      	cmp	r3, #4
 800a602:	d844      	bhi.n	800a68e <HAL_RCCEx_GetPeriphCLKFreq+0xaa>
 800a604:	a201      	add	r2, pc, #4	; (adr r2, 800a60c <HAL_RCCEx_GetPeriphCLKFreq+0x28>)
 800a606:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a60a:	bf00      	nop
 800a60c:	0800a621 	.word	0x0800a621
 800a610:	0800a631 	.word	0x0800a631
 800a614:	0800a641 	.word	0x0800a641
 800a618:	0800a689 	.word	0x0800a689
 800a61c:	0800a651 	.word	0x0800a651
      {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800a620:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a624:	4618      	mov	r0, r3
 800a626:	f000 fd03 	bl	800b030 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800a62a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a62c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a62e:	e241      	b.n	800aab4 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a630:	f107 0318 	add.w	r3, r7, #24
 800a634:	4618      	mov	r0, r3
 800a636:	f000 fa63 	bl	800ab00 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800a63a:	69bb      	ldr	r3, [r7, #24]
 800a63c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a63e:	e239      	b.n	800aab4 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a640:	f107 030c 	add.w	r3, r7, #12
 800a644:	4618      	mov	r0, r3
 800a646:	f000 fba7 	bl	800ad98 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800a64a:	68fb      	ldr	r3, [r7, #12]
 800a64c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a64e:	e231      	b.n	800aab4 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 800a650:	4b8a      	ldr	r3, [pc, #552]	; (800a87c <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800a652:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a654:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800a658:	637b      	str	r3, [r7, #52]	; 0x34

          if(ckpclocksource== RCC_CLKPSOURCE_HSI)
 800a65a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a65c:	2b00      	cmp	r3, #0
 800a65e:	d102      	bne.n	800a666 <HAL_RCCEx_GetPeriphCLKFreq+0x82>
          {
            /* In Case the CKPER Source is HSI */
            frequency = HSI_VALUE;
 800a660:	4b87      	ldr	r3, [pc, #540]	; (800a880 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 800a662:	63fb      	str	r3, [r7, #60]	; 0x3c
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
          }

          break;
 800a664:	e226      	b.n	800aab4 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if(ckpclocksource== RCC_CLKPSOURCE_CSI)
 800a666:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a668:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800a66c:	d102      	bne.n	800a674 <HAL_RCCEx_GetPeriphCLKFreq+0x90>
            frequency = CSI_VALUE;
 800a66e:	4b85      	ldr	r3, [pc, #532]	; (800a884 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 800a670:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a672:	e21f      	b.n	800aab4 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if (ckpclocksource== RCC_CLKPSOURCE_HSE)
 800a674:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a676:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a67a:	d102      	bne.n	800a682 <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
            frequency = HSE_VALUE;
 800a67c:	4b82      	ldr	r3, [pc, #520]	; (800a888 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 800a67e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a680:	e218      	b.n	800aab4 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
            frequency = 0;
 800a682:	2300      	movs	r3, #0
 800a684:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a686:	e215      	b.n	800aab4 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 800a688:	4b80      	ldr	r3, [pc, #512]	; (800a88c <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>)
 800a68a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a68c:	e212      	b.n	800aab4 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      default :
        {
          frequency = 0;
 800a68e:	2300      	movs	r3, #0
 800a690:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a692:	bf00      	nop
 800a694:	e20e      	b.n	800aab4 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      }
    }

#if defined(SAI3)
  else if (PeriphClk == RCC_PERIPHCLK_SAI23)
 800a696:	687b      	ldr	r3, [r7, #4]
 800a698:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a69c:	d14f      	bne.n	800a73e <HAL_RCCEx_GetPeriphCLKFreq+0x15a>
    {

      saiclocksource= __HAL_RCC_GET_SAI23_SOURCE();
 800a69e:	4b77      	ldr	r3, [pc, #476]	; (800a87c <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800a6a0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a6a2:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
 800a6a6:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 800a6a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a6aa:	2b80      	cmp	r3, #128	; 0x80
 800a6ac:	d01c      	beq.n	800a6e8 <HAL_RCCEx_GetPeriphCLKFreq+0x104>
 800a6ae:	2b80      	cmp	r3, #128	; 0x80
 800a6b0:	d804      	bhi.n	800a6bc <HAL_RCCEx_GetPeriphCLKFreq+0xd8>
 800a6b2:	2b00      	cmp	r3, #0
 800a6b4:	d008      	beq.n	800a6c8 <HAL_RCCEx_GetPeriphCLKFreq+0xe4>
 800a6b6:	2b40      	cmp	r3, #64	; 0x40
 800a6b8:	d00e      	beq.n	800a6d8 <HAL_RCCEx_GetPeriphCLKFreq+0xf4>
 800a6ba:	e03c      	b.n	800a736 <HAL_RCCEx_GetPeriphCLKFreq+0x152>
 800a6bc:	2bc0      	cmp	r3, #192	; 0xc0
 800a6be:	d037      	beq.n	800a730 <HAL_RCCEx_GetPeriphCLKFreq+0x14c>
 800a6c0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a6c4:	d018      	beq.n	800a6f8 <HAL_RCCEx_GetPeriphCLKFreq+0x114>
 800a6c6:	e036      	b.n	800a736 <HAL_RCCEx_GetPeriphCLKFreq+0x152>
      {
      case 0: /* PLL1 is the clock source for SAI2/3 */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800a6c8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a6cc:	4618      	mov	r0, r3
 800a6ce:	f000 fcaf 	bl	800b030 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800a6d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a6d4:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a6d6:	e1ed      	b.n	800aab4 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI2/3 */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a6d8:	f107 0318 	add.w	r3, r7, #24
 800a6dc:	4618      	mov	r0, r3
 800a6de:	f000 fa0f 	bl	800ab00 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800a6e2:	69bb      	ldr	r3, [r7, #24]
 800a6e4:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a6e6:	e1e5      	b.n	800aab4 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_SAI23CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI2/3 */
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a6e8:	f107 030c 	add.w	r3, r7, #12
 800a6ec:	4618      	mov	r0, r3
 800a6ee:	f000 fb53 	bl	800ad98 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800a6f2:	68fb      	ldr	r3, [r7, #12]
 800a6f4:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a6f6:	e1dd      	b.n	800aab4 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_SAI23CLKSOURCE_CLKP: /* CKPER is the clock source for SAI2/3 */
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 800a6f8:	4b60      	ldr	r3, [pc, #384]	; (800a87c <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800a6fa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a6fc:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800a700:	637b      	str	r3, [r7, #52]	; 0x34

          if(ckpclocksource== RCC_CLKPSOURCE_HSI)
 800a702:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a704:	2b00      	cmp	r3, #0
 800a706:	d102      	bne.n	800a70e <HAL_RCCEx_GetPeriphCLKFreq+0x12a>
          {
            /* In Case the CKPER Source is HSI */
            frequency = HSI_VALUE;
 800a708:	4b5d      	ldr	r3, [pc, #372]	; (800a880 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 800a70a:	63fb      	str	r3, [r7, #60]	; 0x3c
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
          }

          break;
 800a70c:	e1d2      	b.n	800aab4 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if(ckpclocksource== RCC_CLKPSOURCE_CSI)
 800a70e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a710:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800a714:	d102      	bne.n	800a71c <HAL_RCCEx_GetPeriphCLKFreq+0x138>
            frequency = CSI_VALUE;
 800a716:	4b5b      	ldr	r3, [pc, #364]	; (800a884 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 800a718:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a71a:	e1cb      	b.n	800aab4 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if (ckpclocksource== RCC_CLKPSOURCE_HSE)
 800a71c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a71e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a722:	d102      	bne.n	800a72a <HAL_RCCEx_GetPeriphCLKFreq+0x146>
            frequency = HSE_VALUE;
 800a724:	4b58      	ldr	r3, [pc, #352]	; (800a888 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 800a726:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a728:	e1c4      	b.n	800aab4 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
            frequency = 0;
 800a72a:	2300      	movs	r3, #0
 800a72c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a72e:	e1c1      	b.n	800aab4 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case (RCC_SAI23CLKSOURCE_PIN): /* External clock is the clock source for SAI2/3 */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 800a730:	4b56      	ldr	r3, [pc, #344]	; (800a88c <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>)
 800a732:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a734:	e1be      	b.n	800aab4 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      default :
        {
          frequency = 0;
 800a736:	2300      	movs	r3, #0
 800a738:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a73a:	bf00      	nop
 800a73c:	e1ba      	b.n	800aab4 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
      }
    }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 800a73e:	687b      	ldr	r3, [r7, #4]
 800a740:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a744:	d153      	bne.n	800a7ee <HAL_RCCEx_GetPeriphCLKFreq+0x20a>
    {

      saiclocksource= __HAL_RCC_GET_SAI4A_SOURCE();
 800a746:	4b4d      	ldr	r3, [pc, #308]	; (800a87c <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800a748:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a74a:	f403 0360 	and.w	r3, r3, #14680064	; 0xe00000
 800a74e:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 800a750:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a752:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800a756:	d01f      	beq.n	800a798 <HAL_RCCEx_GetPeriphCLKFreq+0x1b4>
 800a758:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800a75c:	d805      	bhi.n	800a76a <HAL_RCCEx_GetPeriphCLKFreq+0x186>
 800a75e:	2b00      	cmp	r3, #0
 800a760:	d00a      	beq.n	800a778 <HAL_RCCEx_GetPeriphCLKFreq+0x194>
 800a762:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800a766:	d00f      	beq.n	800a788 <HAL_RCCEx_GetPeriphCLKFreq+0x1a4>
 800a768:	e03d      	b.n	800a7e6 <HAL_RCCEx_GetPeriphCLKFreq+0x202>
 800a76a:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800a76e:	d037      	beq.n	800a7e0 <HAL_RCCEx_GetPeriphCLKFreq+0x1fc>
 800a770:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800a774:	d018      	beq.n	800a7a8 <HAL_RCCEx_GetPeriphCLKFreq+0x1c4>
 800a776:	e036      	b.n	800a7e6 <HAL_RCCEx_GetPeriphCLKFreq+0x202>
      {
      case 0: /* PLL1 is the clock source for SAI4A */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800a778:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a77c:	4618      	mov	r0, r3
 800a77e:	f000 fc57 	bl	800b030 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800a782:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a784:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a786:	e195      	b.n	800aab4 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_D3CCIPR_SAI4ASEL_0: /* PLLI2 is the clock source for SAI4A */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a788:	f107 0318 	add.w	r3, r7, #24
 800a78c:	4618      	mov	r0, r3
 800a78e:	f000 f9b7 	bl	800ab00 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800a792:	69bb      	ldr	r3, [r7, #24]
 800a794:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a796:	e18d      	b.n	800aab4 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_D3CCIPR_SAI4ASEL_1: /* PLLI3 is the clock source for SAI4A */
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a798:	f107 030c 	add.w	r3, r7, #12
 800a79c:	4618      	mov	r0, r3
 800a79e:	f000 fafb 	bl	800ad98 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800a7a2:	68fb      	ldr	r3, [r7, #12]
 800a7a4:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a7a6:	e185      	b.n	800aab4 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_D3CCIPR_SAI4ASEL_2: /* CKPER is the clock source for SAI4A*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 800a7a8:	4b34      	ldr	r3, [pc, #208]	; (800a87c <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800a7aa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a7ac:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800a7b0:	637b      	str	r3, [r7, #52]	; 0x34

          if(ckpclocksource== RCC_CLKPSOURCE_HSI)
 800a7b2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a7b4:	2b00      	cmp	r3, #0
 800a7b6:	d102      	bne.n	800a7be <HAL_RCCEx_GetPeriphCLKFreq+0x1da>
          {
            /* In Case the CKPER Source is HSI */
            frequency = HSI_VALUE;
 800a7b8:	4b31      	ldr	r3, [pc, #196]	; (800a880 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 800a7ba:	63fb      	str	r3, [r7, #60]	; 0x3c
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
          }

          break;
 800a7bc:	e17a      	b.n	800aab4 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if(ckpclocksource== RCC_CLKPSOURCE_CSI)
 800a7be:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a7c0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800a7c4:	d102      	bne.n	800a7cc <HAL_RCCEx_GetPeriphCLKFreq+0x1e8>
            frequency = CSI_VALUE;
 800a7c6:	4b2f      	ldr	r3, [pc, #188]	; (800a884 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 800a7c8:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a7ca:	e173      	b.n	800aab4 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if (ckpclocksource== RCC_CLKPSOURCE_HSE)
 800a7cc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a7ce:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a7d2:	d102      	bne.n	800a7da <HAL_RCCEx_GetPeriphCLKFreq+0x1f6>
            frequency = HSE_VALUE;
 800a7d4:	4b2c      	ldr	r3, [pc, #176]	; (800a888 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 800a7d6:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a7d8:	e16c      	b.n	800aab4 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
            frequency = 0;
 800a7da:	2300      	movs	r3, #0
 800a7dc:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a7de:	e169      	b.n	800aab4 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case (RCC_D3CCIPR_SAI4ASEL_0 | RCC_D3CCIPR_SAI4ASEL_1 ): /* External clock is the clock source for SAI4A */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 800a7e0:	4b2a      	ldr	r3, [pc, #168]	; (800a88c <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>)
 800a7e2:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a7e4:	e166      	b.n	800aab4 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      default :
        {
          frequency = 0;
 800a7e6:	2300      	movs	r3, #0
 800a7e8:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a7ea:	bf00      	nop
 800a7ec:	e162      	b.n	800aab4 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      }
    }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 800a7ee:	687b      	ldr	r3, [r7, #4]
 800a7f0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a7f4:	d15d      	bne.n	800a8b2 <HAL_RCCEx_GetPeriphCLKFreq+0x2ce>
    {

      saiclocksource= __HAL_RCC_GET_SAI4B_SOURCE();
 800a7f6:	4b21      	ldr	r3, [pc, #132]	; (800a87c <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800a7f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a7fa:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 800a7fe:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 800a800:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a802:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800a806:	d01f      	beq.n	800a848 <HAL_RCCEx_GetPeriphCLKFreq+0x264>
 800a808:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800a80c:	d805      	bhi.n	800a81a <HAL_RCCEx_GetPeriphCLKFreq+0x236>
 800a80e:	2b00      	cmp	r3, #0
 800a810:	d00a      	beq.n	800a828 <HAL_RCCEx_GetPeriphCLKFreq+0x244>
 800a812:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800a816:	d00f      	beq.n	800a838 <HAL_RCCEx_GetPeriphCLKFreq+0x254>
 800a818:	e047      	b.n	800a8aa <HAL_RCCEx_GetPeriphCLKFreq+0x2c6>
 800a81a:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800a81e:	d041      	beq.n	800a8a4 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>
 800a820:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800a824:	d018      	beq.n	800a858 <HAL_RCCEx_GetPeriphCLKFreq+0x274>
 800a826:	e040      	b.n	800a8aa <HAL_RCCEx_GetPeriphCLKFreq+0x2c6>
      {
      case 0: /* PLL1 is the clock source for SAI4B */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800a828:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a82c:	4618      	mov	r0, r3
 800a82e:	f000 fbff 	bl	800b030 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800a832:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a834:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a836:	e13d      	b.n	800aab4 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_D3CCIPR_SAI4BSEL_0: /* PLLI2 is the clock source for SAI4B */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a838:	f107 0318 	add.w	r3, r7, #24
 800a83c:	4618      	mov	r0, r3
 800a83e:	f000 f95f 	bl	800ab00 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800a842:	69bb      	ldr	r3, [r7, #24]
 800a844:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a846:	e135      	b.n	800aab4 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_D3CCIPR_SAI4BSEL_1: /* PLLI3 is the clock source for SAI4B */
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a848:	f107 030c 	add.w	r3, r7, #12
 800a84c:	4618      	mov	r0, r3
 800a84e:	f000 faa3 	bl	800ad98 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800a852:	68fb      	ldr	r3, [r7, #12]
 800a854:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a856:	e12d      	b.n	800aab4 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_D3CCIPR_SAI4BSEL_2: /* CKPER is the clock source for SAI4B*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 800a858:	4b08      	ldr	r3, [pc, #32]	; (800a87c <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800a85a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a85c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800a860:	637b      	str	r3, [r7, #52]	; 0x34

          if(ckpclocksource== RCC_CLKPSOURCE_HSI)
 800a862:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a864:	2b00      	cmp	r3, #0
 800a866:	d102      	bne.n	800a86e <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
          {
            /* In Case the CKPER Source is HSI */
            frequency = HSI_VALUE;
 800a868:	4b05      	ldr	r3, [pc, #20]	; (800a880 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 800a86a:	63fb      	str	r3, [r7, #60]	; 0x3c
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
          }

          break;
 800a86c:	e122      	b.n	800aab4 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if(ckpclocksource== RCC_CLKPSOURCE_CSI)
 800a86e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a870:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800a874:	d10c      	bne.n	800a890 <HAL_RCCEx_GetPeriphCLKFreq+0x2ac>
            frequency = CSI_VALUE;
 800a876:	4b03      	ldr	r3, [pc, #12]	; (800a884 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 800a878:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a87a:	e11b      	b.n	800aab4 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
 800a87c:	58024400 	.word	0x58024400
 800a880:	03d09000 	.word	0x03d09000
 800a884:	003d0900 	.word	0x003d0900
 800a888:	017d7840 	.word	0x017d7840
 800a88c:	00bb8000 	.word	0x00bb8000
          else if (ckpclocksource== RCC_CLKPSOURCE_HSE)
 800a890:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a892:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a896:	d102      	bne.n	800a89e <HAL_RCCEx_GetPeriphCLKFreq+0x2ba>
            frequency = HSE_VALUE;
 800a898:	4b89      	ldr	r3, [pc, #548]	; (800aac0 <HAL_RCCEx_GetPeriphCLKFreq+0x4dc>)
 800a89a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a89c:	e10a      	b.n	800aab4 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
            frequency = 0;
 800a89e:	2300      	movs	r3, #0
 800a8a0:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a8a2:	e107      	b.n	800aab4 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case (RCC_D3CCIPR_SAI4BSEL_0 | RCC_D3CCIPR_SAI4BSEL_1 ): /* External clock is the clock source for SAI4B */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 800a8a4:	4b87      	ldr	r3, [pc, #540]	; (800aac4 <HAL_RCCEx_GetPeriphCLKFreq+0x4e0>)
 800a8a6:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a8a8:	e104      	b.n	800aab4 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      default :
        {
          frequency = 0;
 800a8aa:	2300      	movs	r3, #0
 800a8ac:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a8ae:	bf00      	nop
 800a8b0:	e100      	b.n	800aab4 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      }
    }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 800a8b2:	687b      	ldr	r3, [r7, #4]
 800a8b4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a8b8:	d153      	bne.n	800a962 <HAL_RCCEx_GetPeriphCLKFreq+0x37e>
    {
      /* Get SPI1/2/3 clock source */
      srcclk= __HAL_RCC_GET_SPI123_SOURCE();
 800a8ba:	4b83      	ldr	r3, [pc, #524]	; (800aac8 <HAL_RCCEx_GetPeriphCLKFreq+0x4e4>)
 800a8bc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a8be:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 800a8c2:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 800a8c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a8c6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a8ca:	d01f      	beq.n	800a90c <HAL_RCCEx_GetPeriphCLKFreq+0x328>
 800a8cc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a8d0:	d805      	bhi.n	800a8de <HAL_RCCEx_GetPeriphCLKFreq+0x2fa>
 800a8d2:	2b00      	cmp	r3, #0
 800a8d4:	d00a      	beq.n	800a8ec <HAL_RCCEx_GetPeriphCLKFreq+0x308>
 800a8d6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a8da:	d00f      	beq.n	800a8fc <HAL_RCCEx_GetPeriphCLKFreq+0x318>
 800a8dc:	e03d      	b.n	800a95a <HAL_RCCEx_GetPeriphCLKFreq+0x376>
 800a8de:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800a8e2:	d037      	beq.n	800a954 <HAL_RCCEx_GetPeriphCLKFreq+0x370>
 800a8e4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800a8e8:	d018      	beq.n	800a91c <HAL_RCCEx_GetPeriphCLKFreq+0x338>
 800a8ea:	e036      	b.n	800a95a <HAL_RCCEx_GetPeriphCLKFreq+0x376>
      {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for I2S */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800a8ec:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a8f0:	4618      	mov	r0, r3
 800a8f2:	f000 fb9d 	bl	800b030 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800a8f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a8f8:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a8fa:	e0db      	b.n	800aab4 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for I2S */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a8fc:	f107 0318 	add.w	r3, r7, #24
 800a900:	4618      	mov	r0, r3
 800a902:	f000 f8fd 	bl	800ab00 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800a906:	69bb      	ldr	r3, [r7, #24]
 800a908:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a90a:	e0d3      	b.n	800aab4 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for I2S */
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a90c:	f107 030c 	add.w	r3, r7, #12
 800a910:	4618      	mov	r0, r3
 800a912:	f000 fa41 	bl	800ad98 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800a916:	68fb      	ldr	r3, [r7, #12]
 800a918:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a91a:	e0cb      	b.n	800aab4 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for I2S */
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 800a91c:	4b6a      	ldr	r3, [pc, #424]	; (800aac8 <HAL_RCCEx_GetPeriphCLKFreq+0x4e4>)
 800a91e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a920:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800a924:	637b      	str	r3, [r7, #52]	; 0x34

          if(ckpclocksource== RCC_CLKPSOURCE_HSI)
 800a926:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a928:	2b00      	cmp	r3, #0
 800a92a:	d102      	bne.n	800a932 <HAL_RCCEx_GetPeriphCLKFreq+0x34e>
          {
            /* In Case the CKPER Source is HSI */
            frequency = HSI_VALUE;
 800a92c:	4b67      	ldr	r3, [pc, #412]	; (800aacc <HAL_RCCEx_GetPeriphCLKFreq+0x4e8>)
 800a92e:	63fb      	str	r3, [r7, #60]	; 0x3c
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
          }

          break;
 800a930:	e0c0      	b.n	800aab4 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if(ckpclocksource== RCC_CLKPSOURCE_CSI)
 800a932:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a934:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800a938:	d102      	bne.n	800a940 <HAL_RCCEx_GetPeriphCLKFreq+0x35c>
            frequency = CSI_VALUE;
 800a93a:	4b65      	ldr	r3, [pc, #404]	; (800aad0 <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>)
 800a93c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a93e:	e0b9      	b.n	800aab4 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if (ckpclocksource== RCC_CLKPSOURCE_HSE)
 800a940:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a942:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a946:	d102      	bne.n	800a94e <HAL_RCCEx_GetPeriphCLKFreq+0x36a>
            frequency = HSE_VALUE;
 800a948:	4b5d      	ldr	r3, [pc, #372]	; (800aac0 <HAL_RCCEx_GetPeriphCLKFreq+0x4dc>)
 800a94a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a94c:	e0b2      	b.n	800aab4 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
            frequency = 0;
 800a94e:	2300      	movs	r3, #0
 800a950:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a952:	e0af      	b.n	800aab4 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 800a954:	4b5b      	ldr	r3, [pc, #364]	; (800aac4 <HAL_RCCEx_GetPeriphCLKFreq+0x4e0>)
 800a956:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a958:	e0ac      	b.n	800aab4 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      default :
        {
          frequency = 0;
 800a95a:	2300      	movs	r3, #0
 800a95c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a95e:	bf00      	nop
 800a960:	e0a8      	b.n	800aab4 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 800a962:	687b      	ldr	r3, [r7, #4]
 800a964:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800a968:	d13d      	bne.n	800a9e6 <HAL_RCCEx_GetPeriphCLKFreq+0x402>
    {
      /* Get ADC clock source */
      srcclk= __HAL_RCC_GET_ADC_SOURCE();
 800a96a:	4b57      	ldr	r3, [pc, #348]	; (800aac8 <HAL_RCCEx_GetPeriphCLKFreq+0x4e4>)
 800a96c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a96e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800a972:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 800a974:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a976:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a97a:	d00c      	beq.n	800a996 <HAL_RCCEx_GetPeriphCLKFreq+0x3b2>
 800a97c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800a980:	d011      	beq.n	800a9a6 <HAL_RCCEx_GetPeriphCLKFreq+0x3c2>
 800a982:	2b00      	cmp	r3, #0
 800a984:	d12b      	bne.n	800a9de <HAL_RCCEx_GetPeriphCLKFreq+0x3fa>
      {
      case RCC_ADCCLKSOURCE_PLL2:
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a986:	f107 0318 	add.w	r3, r7, #24
 800a98a:	4618      	mov	r0, r3
 800a98c:	f000 f8b8 	bl	800ab00 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800a990:	69bb      	ldr	r3, [r7, #24]
 800a992:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a994:	e08e      	b.n	800aab4 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_ADCCLKSOURCE_PLL3:
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a996:	f107 030c 	add.w	r3, r7, #12
 800a99a:	4618      	mov	r0, r3
 800a99c:	f000 f9fc 	bl	800ad98 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 800a9a0:	697b      	ldr	r3, [r7, #20]
 800a9a2:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a9a4:	e086      	b.n	800aab4 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_ADCCLKSOURCE_CLKP:
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 800a9a6:	4b48      	ldr	r3, [pc, #288]	; (800aac8 <HAL_RCCEx_GetPeriphCLKFreq+0x4e4>)
 800a9a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a9aa:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800a9ae:	637b      	str	r3, [r7, #52]	; 0x34

          if(ckpclocksource== RCC_CLKPSOURCE_HSI)
 800a9b0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a9b2:	2b00      	cmp	r3, #0
 800a9b4:	d102      	bne.n	800a9bc <HAL_RCCEx_GetPeriphCLKFreq+0x3d8>
          {
            /* In Case the CKPER Source is HSI */
            frequency = HSI_VALUE;
 800a9b6:	4b45      	ldr	r3, [pc, #276]	; (800aacc <HAL_RCCEx_GetPeriphCLKFreq+0x4e8>)
 800a9b8:	63fb      	str	r3, [r7, #60]	; 0x3c
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
          }

          break;
 800a9ba:	e07b      	b.n	800aab4 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if(ckpclocksource== RCC_CLKPSOURCE_CSI)
 800a9bc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a9be:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800a9c2:	d102      	bne.n	800a9ca <HAL_RCCEx_GetPeriphCLKFreq+0x3e6>
            frequency = CSI_VALUE;
 800a9c4:	4b42      	ldr	r3, [pc, #264]	; (800aad0 <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>)
 800a9c6:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a9c8:	e074      	b.n	800aab4 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if (ckpclocksource== RCC_CLKPSOURCE_HSE)
 800a9ca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a9cc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a9d0:	d102      	bne.n	800a9d8 <HAL_RCCEx_GetPeriphCLKFreq+0x3f4>
            frequency = HSE_VALUE;
 800a9d2:	4b3b      	ldr	r3, [pc, #236]	; (800aac0 <HAL_RCCEx_GetPeriphCLKFreq+0x4dc>)
 800a9d4:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a9d6:	e06d      	b.n	800aab4 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
            frequency = 0;
 800a9d8:	2300      	movs	r3, #0
 800a9da:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a9dc:	e06a      	b.n	800aab4 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      default :
        {
          frequency = 0;
 800a9de:	2300      	movs	r3, #0
 800a9e0:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a9e2:	bf00      	nop
 800a9e4:	e066      	b.n	800aab4 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 800a9e6:	687b      	ldr	r3, [r7, #4]
 800a9e8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a9ec:	d11f      	bne.n	800aa2e <HAL_RCCEx_GetPeriphCLKFreq+0x44a>
    {
      /* Get SDMMC clock source */
      srcclk= __HAL_RCC_GET_SDMMC_SOURCE();
 800a9ee:	4b36      	ldr	r3, [pc, #216]	; (800aac8 <HAL_RCCEx_GetPeriphCLKFreq+0x4e4>)
 800a9f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a9f2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800a9f6:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 800a9f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a9fa:	2b00      	cmp	r3, #0
 800a9fc:	d003      	beq.n	800aa06 <HAL_RCCEx_GetPeriphCLKFreq+0x422>
 800a9fe:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800aa02:	d008      	beq.n	800aa16 <HAL_RCCEx_GetPeriphCLKFreq+0x432>
 800aa04:	e00f      	b.n	800aa26 <HAL_RCCEx_GetPeriphCLKFreq+0x442>
      {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800aa06:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800aa0a:	4618      	mov	r0, r3
 800aa0c:	f000 fb10 	bl	800b030 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800aa10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aa12:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800aa14:	e04e      	b.n	800aab4 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800aa16:	f107 0318 	add.w	r3, r7, #24
 800aa1a:	4618      	mov	r0, r3
 800aa1c:	f000 f870 	bl	800ab00 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 800aa20:	6a3b      	ldr	r3, [r7, #32]
 800aa22:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800aa24:	e046      	b.n	800aab4 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      default :
        {
          frequency = 0;
 800aa26:	2300      	movs	r3, #0
 800aa28:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800aa2a:	bf00      	nop
 800aa2c:	e042      	b.n	800aab4 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 800aa2e:	687b      	ldr	r3, [r7, #4]
 800aa30:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800aa34:	d13c      	bne.n	800aab0 <HAL_RCCEx_GetPeriphCLKFreq+0x4cc>
    {
      /* Get SPI6 clock source */
      srcclk= __HAL_RCC_GET_SPI6_SOURCE();
 800aa36:	4b24      	ldr	r3, [pc, #144]	; (800aac8 <HAL_RCCEx_GetPeriphCLKFreq+0x4e4>)
 800aa38:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800aa3a:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
 800aa3e:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 800aa40:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aa42:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800aa46:	d01e      	beq.n	800aa86 <HAL_RCCEx_GetPeriphCLKFreq+0x4a2>
 800aa48:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800aa4c:	d805      	bhi.n	800aa5a <HAL_RCCEx_GetPeriphCLKFreq+0x476>
 800aa4e:	2b00      	cmp	r3, #0
 800aa50:	d00d      	beq.n	800aa6e <HAL_RCCEx_GetPeriphCLKFreq+0x48a>
 800aa52:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800aa56:	d00e      	beq.n	800aa76 <HAL_RCCEx_GetPeriphCLKFreq+0x492>
 800aa58:	e026      	b.n	800aaa8 <HAL_RCCEx_GetPeriphCLKFreq+0x4c4>
 800aa5a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800aa5e:	d01d      	beq.n	800aa9c <HAL_RCCEx_GetPeriphCLKFreq+0x4b8>
 800aa60:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800aa64:	d01d      	beq.n	800aaa2 <HAL_RCCEx_GetPeriphCLKFreq+0x4be>
 800aa66:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800aa6a:	d014      	beq.n	800aa96 <HAL_RCCEx_GetPeriphCLKFreq+0x4b2>
 800aa6c:	e01c      	b.n	800aaa8 <HAL_RCCEx_GetPeriphCLKFreq+0x4c4>
      {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
        {
          frequency = HAL_RCCEx_GetD3PCLK1Freq();
 800aa6e:	f000 f831 	bl	800aad4 <HAL_RCCEx_GetD3PCLK1Freq>
 800aa72:	63f8      	str	r0, [r7, #60]	; 0x3c
          break;
 800aa74:	e01e      	b.n	800aab4 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800aa76:	f107 0318 	add.w	r3, r7, #24
 800aa7a:	4618      	mov	r0, r3
 800aa7c:	f000 f840 	bl	800ab00 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800aa80:	69fb      	ldr	r3, [r7, #28]
 800aa82:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800aa84:	e016      	b.n	800aab4 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800aa86:	f107 030c 	add.w	r3, r7, #12
 800aa8a:	4618      	mov	r0, r3
 800aa8c:	f000 f984 	bl	800ad98 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800aa90:	693b      	ldr	r3, [r7, #16]
 800aa92:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800aa94:	e00e      	b.n	800aab4 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
        {
          frequency = HSI_VALUE;
 800aa96:	4b0d      	ldr	r3, [pc, #52]	; (800aacc <HAL_RCCEx_GetPeriphCLKFreq+0x4e8>)
 800aa98:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800aa9a:	e00b      	b.n	800aab4 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
        {
          frequency = CSI_VALUE;
 800aa9c:	4b0c      	ldr	r3, [pc, #48]	; (800aad0 <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>)
 800aa9e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800aaa0:	e008      	b.n	800aab4 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
        {
          frequency = HSE_VALUE;
 800aaa2:	4b07      	ldr	r3, [pc, #28]	; (800aac0 <HAL_RCCEx_GetPeriphCLKFreq+0x4dc>)
 800aaa4:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800aaa6:	e005      	b.n	800aab4 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          break;
        }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
        {
          frequency = 0;
 800aaa8:	2300      	movs	r3, #0
 800aaaa:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800aaac:	bf00      	nop
 800aaae:	e001      	b.n	800aab4 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      }
    }
  else
    {
      frequency = 0;
 800aab0:	2300      	movs	r3, #0
 800aab2:	63fb      	str	r3, [r7, #60]	; 0x3c
    }

  return frequency;
 800aab4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800aab6:	4618      	mov	r0, r3
 800aab8:	3740      	adds	r7, #64	; 0x40
 800aaba:	46bd      	mov	sp, r7
 800aabc:	bd80      	pop	{r7, pc}
 800aabe:	bf00      	nop
 800aac0:	017d7840 	.word	0x017d7840
 800aac4:	00bb8000 	.word	0x00bb8000
 800aac8:	58024400 	.word	0x58024400
 800aacc:	03d09000 	.word	0x03d09000
 800aad0:	003d0900 	.word	0x003d0900

0800aad4 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 800aad4:	b580      	push	{r7, lr}
 800aad6:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 800aad8:	f7fe fe1e 	bl	8009718 <HAL_RCC_GetHCLKFreq>
 800aadc:	4601      	mov	r1, r0
 800aade:	4b06      	ldr	r3, [pc, #24]	; (800aaf8 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 800aae0:	6a1b      	ldr	r3, [r3, #32]
 800aae2:	091b      	lsrs	r3, r3, #4
 800aae4:	f003 0307 	and.w	r3, r3, #7
 800aae8:	4a04      	ldr	r2, [pc, #16]	; (800aafc <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800aaea:	5cd3      	ldrb	r3, [r2, r3]
 800aaec:	f003 031f 	and.w	r3, r3, #31
 800aaf0:	fa21 f303 	lsr.w	r3, r1, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 800aaf4:	4618      	mov	r0, r3
 800aaf6:	bd80      	pop	{r7, pc}
 800aaf8:	58024400 	.word	0x58024400
 800aafc:	0801a014 	.word	0x0801a014

0800ab00 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 800ab00:	b480      	push	{r7}
 800ab02:	b089      	sub	sp, #36	; 0x24
 800ab04:	af00      	add	r7, sp, #0
 800ab06:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800ab08:	4b9d      	ldr	r3, [pc, #628]	; (800ad80 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 800ab0a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ab0c:	f003 0303 	and.w	r3, r3, #3
 800ab10:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 800ab12:	4b9b      	ldr	r3, [pc, #620]	; (800ad80 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 800ab14:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ab16:	0b1b      	lsrs	r3, r3, #12
 800ab18:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800ab1c:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800ab1e:	4b98      	ldr	r3, [pc, #608]	; (800ad80 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 800ab20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ab22:	091b      	lsrs	r3, r3, #4
 800ab24:	f003 0301 	and.w	r3, r3, #1
 800ab28:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 800ab2a:	4b95      	ldr	r3, [pc, #596]	; (800ad80 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 800ab2c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ab2e:	08db      	lsrs	r3, r3, #3
 800ab30:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800ab34:	693a      	ldr	r2, [r7, #16]
 800ab36:	fb02 f303 	mul.w	r3, r2, r3
 800ab3a:	ee07 3a90 	vmov	s15, r3
 800ab3e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ab42:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800ab46:	697b      	ldr	r3, [r7, #20]
 800ab48:	2b00      	cmp	r3, #0
 800ab4a:	f000 810a 	beq.w	800ad62 <HAL_RCCEx_GetPLL2ClockFreq+0x262>
  {
    switch (pllsource)
 800ab4e:	69bb      	ldr	r3, [r7, #24]
 800ab50:	2b01      	cmp	r3, #1
 800ab52:	d05a      	beq.n	800ac0a <HAL_RCCEx_GetPLL2ClockFreq+0x10a>
 800ab54:	2b01      	cmp	r3, #1
 800ab56:	d302      	bcc.n	800ab5e <HAL_RCCEx_GetPLL2ClockFreq+0x5e>
 800ab58:	2b02      	cmp	r3, #2
 800ab5a:	d078      	beq.n	800ac4e <HAL_RCCEx_GetPLL2ClockFreq+0x14e>
 800ab5c:	e099      	b.n	800ac92 <HAL_RCCEx_GetPLL2ClockFreq+0x192>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800ab5e:	4b88      	ldr	r3, [pc, #544]	; (800ad80 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 800ab60:	681b      	ldr	r3, [r3, #0]
 800ab62:	f003 0320 	and.w	r3, r3, #32
 800ab66:	2b00      	cmp	r3, #0
 800ab68:	d02d      	beq.n	800abc6 <HAL_RCCEx_GetPLL2ClockFreq+0xc6>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800ab6a:	4b85      	ldr	r3, [pc, #532]	; (800ad80 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 800ab6c:	681b      	ldr	r3, [r3, #0]
 800ab6e:	08db      	lsrs	r3, r3, #3
 800ab70:	f003 0303 	and.w	r3, r3, #3
 800ab74:	4a83      	ldr	r2, [pc, #524]	; (800ad84 <HAL_RCCEx_GetPLL2ClockFreq+0x284>)
 800ab76:	fa22 f303 	lsr.w	r3, r2, r3
 800ab7a:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800ab7c:	68bb      	ldr	r3, [r7, #8]
 800ab7e:	ee07 3a90 	vmov	s15, r3
 800ab82:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ab86:	697b      	ldr	r3, [r7, #20]
 800ab88:	ee07 3a90 	vmov	s15, r3
 800ab8c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ab90:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ab94:	4b7a      	ldr	r3, [pc, #488]	; (800ad80 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 800ab96:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ab98:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ab9c:	ee07 3a90 	vmov	s15, r3
 800aba0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800aba4:	ed97 6a03 	vldr	s12, [r7, #12]
 800aba8:	eddf 5a77 	vldr	s11, [pc, #476]	; 800ad88 <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 800abac:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800abb0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800abb4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800abb8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800abbc:	ee67 7a27 	vmul.f32	s15, s14, s15
 800abc0:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 800abc4:	e087      	b.n	800acd6 <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800abc6:	697b      	ldr	r3, [r7, #20]
 800abc8:	ee07 3a90 	vmov	s15, r3
 800abcc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800abd0:	eddf 6a6e 	vldr	s13, [pc, #440]	; 800ad8c <HAL_RCCEx_GetPLL2ClockFreq+0x28c>
 800abd4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800abd8:	4b69      	ldr	r3, [pc, #420]	; (800ad80 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 800abda:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800abdc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800abe0:	ee07 3a90 	vmov	s15, r3
 800abe4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800abe8:	ed97 6a03 	vldr	s12, [r7, #12]
 800abec:	eddf 5a66 	vldr	s11, [pc, #408]	; 800ad88 <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 800abf0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800abf4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800abf8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800abfc:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ac00:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ac04:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800ac08:	e065      	b.n	800acd6 <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800ac0a:	697b      	ldr	r3, [r7, #20]
 800ac0c:	ee07 3a90 	vmov	s15, r3
 800ac10:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ac14:	eddf 6a5e 	vldr	s13, [pc, #376]	; 800ad90 <HAL_RCCEx_GetPLL2ClockFreq+0x290>
 800ac18:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ac1c:	4b58      	ldr	r3, [pc, #352]	; (800ad80 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 800ac1e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ac20:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ac24:	ee07 3a90 	vmov	s15, r3
 800ac28:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ac2c:	ed97 6a03 	vldr	s12, [r7, #12]
 800ac30:	eddf 5a55 	vldr	s11, [pc, #340]	; 800ad88 <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 800ac34:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ac38:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ac3c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800ac40:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ac44:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ac48:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800ac4c:	e043      	b.n	800acd6 <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800ac4e:	697b      	ldr	r3, [r7, #20]
 800ac50:	ee07 3a90 	vmov	s15, r3
 800ac54:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ac58:	eddf 6a4e 	vldr	s13, [pc, #312]	; 800ad94 <HAL_RCCEx_GetPLL2ClockFreq+0x294>
 800ac5c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ac60:	4b47      	ldr	r3, [pc, #284]	; (800ad80 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 800ac62:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ac64:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ac68:	ee07 3a90 	vmov	s15, r3
 800ac6c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ac70:	ed97 6a03 	vldr	s12, [r7, #12]
 800ac74:	eddf 5a44 	vldr	s11, [pc, #272]	; 800ad88 <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 800ac78:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ac7c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ac80:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800ac84:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ac88:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ac8c:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800ac90:	e021      	b.n	800acd6 <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800ac92:	697b      	ldr	r3, [r7, #20]
 800ac94:	ee07 3a90 	vmov	s15, r3
 800ac98:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ac9c:	eddf 6a3c 	vldr	s13, [pc, #240]	; 800ad90 <HAL_RCCEx_GetPLL2ClockFreq+0x290>
 800aca0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800aca4:	4b36      	ldr	r3, [pc, #216]	; (800ad80 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 800aca6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800aca8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800acac:	ee07 3a90 	vmov	s15, r3
 800acb0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800acb4:	ed97 6a03 	vldr	s12, [r7, #12]
 800acb8:	eddf 5a33 	vldr	s11, [pc, #204]	; 800ad88 <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 800acbc:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800acc0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800acc4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800acc8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800accc:	ee67 7a27 	vmul.f32	s15, s14, s15
 800acd0:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800acd4:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 800acd6:	4b2a      	ldr	r3, [pc, #168]	; (800ad80 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 800acd8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800acda:	0a5b      	lsrs	r3, r3, #9
 800acdc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ace0:	ee07 3a90 	vmov	s15, r3
 800ace4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ace8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800acec:	ee37 7a87 	vadd.f32	s14, s15, s14
 800acf0:	edd7 6a07 	vldr	s13, [r7, #28]
 800acf4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800acf8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800acfc:	ee17 2a90 	vmov	r2, s15
 800ad00:	687b      	ldr	r3, [r7, #4]
 800ad02:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 800ad04:	4b1e      	ldr	r3, [pc, #120]	; (800ad80 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 800ad06:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ad08:	0c1b      	lsrs	r3, r3, #16
 800ad0a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ad0e:	ee07 3a90 	vmov	s15, r3
 800ad12:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ad16:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800ad1a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800ad1e:	edd7 6a07 	vldr	s13, [r7, #28]
 800ad22:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800ad26:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800ad2a:	ee17 2a90 	vmov	r2, s15
 800ad2e:	687b      	ldr	r3, [r7, #4]
 800ad30:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 800ad32:	4b13      	ldr	r3, [pc, #76]	; (800ad80 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 800ad34:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ad36:	0e1b      	lsrs	r3, r3, #24
 800ad38:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ad3c:	ee07 3a90 	vmov	s15, r3
 800ad40:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ad44:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800ad48:	ee37 7a87 	vadd.f32	s14, s15, s14
 800ad4c:	edd7 6a07 	vldr	s13, [r7, #28]
 800ad50:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800ad54:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800ad58:	ee17 2a90 	vmov	r2, s15
 800ad5c:	687b      	ldr	r3, [r7, #4]
 800ad5e:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800ad60:	e008      	b.n	800ad74 <HAL_RCCEx_GetPLL2ClockFreq+0x274>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 800ad62:	687b      	ldr	r3, [r7, #4]
 800ad64:	2200      	movs	r2, #0
 800ad66:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800ad68:	687b      	ldr	r3, [r7, #4]
 800ad6a:	2200      	movs	r2, #0
 800ad6c:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 800ad6e:	687b      	ldr	r3, [r7, #4]
 800ad70:	2200      	movs	r2, #0
 800ad72:	609a      	str	r2, [r3, #8]
}
 800ad74:	bf00      	nop
 800ad76:	3724      	adds	r7, #36	; 0x24
 800ad78:	46bd      	mov	sp, r7
 800ad7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad7e:	4770      	bx	lr
 800ad80:	58024400 	.word	0x58024400
 800ad84:	03d09000 	.word	0x03d09000
 800ad88:	46000000 	.word	0x46000000
 800ad8c:	4c742400 	.word	0x4c742400
 800ad90:	4a742400 	.word	0x4a742400
 800ad94:	4bbebc20 	.word	0x4bbebc20

0800ad98 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 800ad98:	b480      	push	{r7}
 800ad9a:	b089      	sub	sp, #36	; 0x24
 800ad9c:	af00      	add	r7, sp, #0
 800ad9e:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800ada0:	4b9d      	ldr	r3, [pc, #628]	; (800b018 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 800ada2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ada4:	f003 0303 	and.w	r3, r3, #3
 800ada8:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 800adaa:	4b9b      	ldr	r3, [pc, #620]	; (800b018 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 800adac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800adae:	0d1b      	lsrs	r3, r3, #20
 800adb0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800adb4:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800adb6:	4b98      	ldr	r3, [pc, #608]	; (800b018 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 800adb8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800adba:	0a1b      	lsrs	r3, r3, #8
 800adbc:	f003 0301 	and.w	r3, r3, #1
 800adc0:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 800adc2:	4b95      	ldr	r3, [pc, #596]	; (800b018 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 800adc4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800adc6:	08db      	lsrs	r3, r3, #3
 800adc8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800adcc:	693a      	ldr	r2, [r7, #16]
 800adce:	fb02 f303 	mul.w	r3, r2, r3
 800add2:	ee07 3a90 	vmov	s15, r3
 800add6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800adda:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 800adde:	697b      	ldr	r3, [r7, #20]
 800ade0:	2b00      	cmp	r3, #0
 800ade2:	f000 810a 	beq.w	800affa <HAL_RCCEx_GetPLL3ClockFreq+0x262>
  {
    switch (pllsource)
 800ade6:	69bb      	ldr	r3, [r7, #24]
 800ade8:	2b01      	cmp	r3, #1
 800adea:	d05a      	beq.n	800aea2 <HAL_RCCEx_GetPLL3ClockFreq+0x10a>
 800adec:	2b01      	cmp	r3, #1
 800adee:	d302      	bcc.n	800adf6 <HAL_RCCEx_GetPLL3ClockFreq+0x5e>
 800adf0:	2b02      	cmp	r3, #2
 800adf2:	d078      	beq.n	800aee6 <HAL_RCCEx_GetPLL3ClockFreq+0x14e>
 800adf4:	e099      	b.n	800af2a <HAL_RCCEx_GetPLL3ClockFreq+0x192>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800adf6:	4b88      	ldr	r3, [pc, #544]	; (800b018 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 800adf8:	681b      	ldr	r3, [r3, #0]
 800adfa:	f003 0320 	and.w	r3, r3, #32
 800adfe:	2b00      	cmp	r3, #0
 800ae00:	d02d      	beq.n	800ae5e <HAL_RCCEx_GetPLL3ClockFreq+0xc6>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800ae02:	4b85      	ldr	r3, [pc, #532]	; (800b018 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 800ae04:	681b      	ldr	r3, [r3, #0]
 800ae06:	08db      	lsrs	r3, r3, #3
 800ae08:	f003 0303 	and.w	r3, r3, #3
 800ae0c:	4a83      	ldr	r2, [pc, #524]	; (800b01c <HAL_RCCEx_GetPLL3ClockFreq+0x284>)
 800ae0e:	fa22 f303 	lsr.w	r3, r2, r3
 800ae12:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800ae14:	68bb      	ldr	r3, [r7, #8]
 800ae16:	ee07 3a90 	vmov	s15, r3
 800ae1a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ae1e:	697b      	ldr	r3, [r7, #20]
 800ae20:	ee07 3a90 	vmov	s15, r3
 800ae24:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ae28:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ae2c:	4b7a      	ldr	r3, [pc, #488]	; (800b018 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 800ae2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ae30:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ae34:	ee07 3a90 	vmov	s15, r3
 800ae38:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ae3c:	ed97 6a03 	vldr	s12, [r7, #12]
 800ae40:	eddf 5a77 	vldr	s11, [pc, #476]	; 800b020 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 800ae44:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ae48:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ae4c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800ae50:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ae54:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ae58:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 800ae5c:	e087      	b.n	800af6e <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800ae5e:	697b      	ldr	r3, [r7, #20]
 800ae60:	ee07 3a90 	vmov	s15, r3
 800ae64:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ae68:	eddf 6a6e 	vldr	s13, [pc, #440]	; 800b024 <HAL_RCCEx_GetPLL3ClockFreq+0x28c>
 800ae6c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ae70:	4b69      	ldr	r3, [pc, #420]	; (800b018 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 800ae72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ae74:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ae78:	ee07 3a90 	vmov	s15, r3
 800ae7c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ae80:	ed97 6a03 	vldr	s12, [r7, #12]
 800ae84:	eddf 5a66 	vldr	s11, [pc, #408]	; 800b020 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 800ae88:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ae8c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ae90:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800ae94:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ae98:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ae9c:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800aea0:	e065      	b.n	800af6e <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800aea2:	697b      	ldr	r3, [r7, #20]
 800aea4:	ee07 3a90 	vmov	s15, r3
 800aea8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800aeac:	eddf 6a5e 	vldr	s13, [pc, #376]	; 800b028 <HAL_RCCEx_GetPLL3ClockFreq+0x290>
 800aeb0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800aeb4:	4b58      	ldr	r3, [pc, #352]	; (800b018 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 800aeb6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aeb8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800aebc:	ee07 3a90 	vmov	s15, r3
 800aec0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800aec4:	ed97 6a03 	vldr	s12, [r7, #12]
 800aec8:	eddf 5a55 	vldr	s11, [pc, #340]	; 800b020 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 800aecc:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800aed0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800aed4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800aed8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800aedc:	ee67 7a27 	vmul.f32	s15, s14, s15
 800aee0:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800aee4:	e043      	b.n	800af6e <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800aee6:	697b      	ldr	r3, [r7, #20]
 800aee8:	ee07 3a90 	vmov	s15, r3
 800aeec:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800aef0:	eddf 6a4e 	vldr	s13, [pc, #312]	; 800b02c <HAL_RCCEx_GetPLL3ClockFreq+0x294>
 800aef4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800aef8:	4b47      	ldr	r3, [pc, #284]	; (800b018 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 800aefa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aefc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800af00:	ee07 3a90 	vmov	s15, r3
 800af04:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800af08:	ed97 6a03 	vldr	s12, [r7, #12]
 800af0c:	eddf 5a44 	vldr	s11, [pc, #272]	; 800b020 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 800af10:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800af14:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800af18:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800af1c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800af20:	ee67 7a27 	vmul.f32	s15, s14, s15
 800af24:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800af28:	e021      	b.n	800af6e <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800af2a:	697b      	ldr	r3, [r7, #20]
 800af2c:	ee07 3a90 	vmov	s15, r3
 800af30:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800af34:	eddf 6a3c 	vldr	s13, [pc, #240]	; 800b028 <HAL_RCCEx_GetPLL3ClockFreq+0x290>
 800af38:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800af3c:	4b36      	ldr	r3, [pc, #216]	; (800b018 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 800af3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800af40:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800af44:	ee07 3a90 	vmov	s15, r3
 800af48:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800af4c:	ed97 6a03 	vldr	s12, [r7, #12]
 800af50:	eddf 5a33 	vldr	s11, [pc, #204]	; 800b020 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 800af54:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800af58:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800af5c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800af60:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800af64:	ee67 7a27 	vmul.f32	s15, s14, s15
 800af68:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800af6c:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 800af6e:	4b2a      	ldr	r3, [pc, #168]	; (800b018 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 800af70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800af72:	0a5b      	lsrs	r3, r3, #9
 800af74:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800af78:	ee07 3a90 	vmov	s15, r3
 800af7c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800af80:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800af84:	ee37 7a87 	vadd.f32	s14, s15, s14
 800af88:	edd7 6a07 	vldr	s13, [r7, #28]
 800af8c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800af90:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800af94:	ee17 2a90 	vmov	r2, s15
 800af98:	687b      	ldr	r3, [r7, #4]
 800af9a:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 800af9c:	4b1e      	ldr	r3, [pc, #120]	; (800b018 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 800af9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800afa0:	0c1b      	lsrs	r3, r3, #16
 800afa2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800afa6:	ee07 3a90 	vmov	s15, r3
 800afaa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800afae:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800afb2:	ee37 7a87 	vadd.f32	s14, s15, s14
 800afb6:	edd7 6a07 	vldr	s13, [r7, #28]
 800afba:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800afbe:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800afc2:	ee17 2a90 	vmov	r2, s15
 800afc6:	687b      	ldr	r3, [r7, #4]
 800afc8:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 800afca:	4b13      	ldr	r3, [pc, #76]	; (800b018 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 800afcc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800afce:	0e1b      	lsrs	r3, r3, #24
 800afd0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800afd4:	ee07 3a90 	vmov	s15, r3
 800afd8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800afdc:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800afe0:	ee37 7a87 	vadd.f32	s14, s15, s14
 800afe4:	edd7 6a07 	vldr	s13, [r7, #28]
 800afe8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800afec:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800aff0:	ee17 2a90 	vmov	r2, s15
 800aff4:	687b      	ldr	r3, [r7, #4]
 800aff6:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800aff8:	e008      	b.n	800b00c <HAL_RCCEx_GetPLL3ClockFreq+0x274>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 800affa:	687b      	ldr	r3, [r7, #4]
 800affc:	2200      	movs	r2, #0
 800affe:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800b000:	687b      	ldr	r3, [r7, #4]
 800b002:	2200      	movs	r2, #0
 800b004:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800b006:	687b      	ldr	r3, [r7, #4]
 800b008:	2200      	movs	r2, #0
 800b00a:	609a      	str	r2, [r3, #8]
}
 800b00c:	bf00      	nop
 800b00e:	3724      	adds	r7, #36	; 0x24
 800b010:	46bd      	mov	sp, r7
 800b012:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b016:	4770      	bx	lr
 800b018:	58024400 	.word	0x58024400
 800b01c:	03d09000 	.word	0x03d09000
 800b020:	46000000 	.word	0x46000000
 800b024:	4c742400 	.word	0x4c742400
 800b028:	4a742400 	.word	0x4a742400
 800b02c:	4bbebc20 	.word	0x4bbebc20

0800b030 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef* PLL1_Clocks)
{
 800b030:	b480      	push	{r7}
 800b032:	b089      	sub	sp, #36	; 0x24
 800b034:	af00      	add	r7, sp, #0
 800b036:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800b038:	4b9d      	ldr	r3, [pc, #628]	; (800b2b0 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 800b03a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b03c:	f003 0303 	and.w	r3, r3, #3
 800b040:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4);
 800b042:	4b9b      	ldr	r3, [pc, #620]	; (800b2b0 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 800b044:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b046:	091b      	lsrs	r3, r3, #4
 800b048:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800b04c:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 800b04e:	4b98      	ldr	r3, [pc, #608]	; (800b2b0 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 800b050:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b052:	f003 0301 	and.w	r3, r3, #1
 800b056:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 800b058:	4b95      	ldr	r3, [pc, #596]	; (800b2b0 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 800b05a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b05c:	08db      	lsrs	r3, r3, #3
 800b05e:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800b062:	693a      	ldr	r2, [r7, #16]
 800b064:	fb02 f303 	mul.w	r3, r2, r3
 800b068:	ee07 3a90 	vmov	s15, r3
 800b06c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b070:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 800b074:	697b      	ldr	r3, [r7, #20]
 800b076:	2b00      	cmp	r3, #0
 800b078:	f000 810a 	beq.w	800b290 <HAL_RCCEx_GetPLL1ClockFreq+0x260>
  {
    switch (pllsource)
 800b07c:	69bb      	ldr	r3, [r7, #24]
 800b07e:	2b01      	cmp	r3, #1
 800b080:	d05a      	beq.n	800b138 <HAL_RCCEx_GetPLL1ClockFreq+0x108>
 800b082:	2b01      	cmp	r3, #1
 800b084:	d302      	bcc.n	800b08c <HAL_RCCEx_GetPLL1ClockFreq+0x5c>
 800b086:	2b02      	cmp	r3, #2
 800b088:	d078      	beq.n	800b17c <HAL_RCCEx_GetPLL1ClockFreq+0x14c>
 800b08a:	e099      	b.n	800b1c0 <HAL_RCCEx_GetPLL1ClockFreq+0x190>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800b08c:	4b88      	ldr	r3, [pc, #544]	; (800b2b0 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 800b08e:	681b      	ldr	r3, [r3, #0]
 800b090:	f003 0320 	and.w	r3, r3, #32
 800b094:	2b00      	cmp	r3, #0
 800b096:	d02d      	beq.n	800b0f4 <HAL_RCCEx_GetPLL1ClockFreq+0xc4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800b098:	4b85      	ldr	r3, [pc, #532]	; (800b2b0 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 800b09a:	681b      	ldr	r3, [r3, #0]
 800b09c:	08db      	lsrs	r3, r3, #3
 800b09e:	f003 0303 	and.w	r3, r3, #3
 800b0a2:	4a84      	ldr	r2, [pc, #528]	; (800b2b4 <HAL_RCCEx_GetPLL1ClockFreq+0x284>)
 800b0a4:	fa22 f303 	lsr.w	r3, r2, r3
 800b0a8:	60bb      	str	r3, [r7, #8]
        pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800b0aa:	68bb      	ldr	r3, [r7, #8]
 800b0ac:	ee07 3a90 	vmov	s15, r3
 800b0b0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b0b4:	697b      	ldr	r3, [r7, #20]
 800b0b6:	ee07 3a90 	vmov	s15, r3
 800b0ba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b0be:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b0c2:	4b7b      	ldr	r3, [pc, #492]	; (800b2b0 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 800b0c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b0c6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b0ca:	ee07 3a90 	vmov	s15, r3
 800b0ce:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b0d2:	ed97 6a03 	vldr	s12, [r7, #12]
 800b0d6:	eddf 5a78 	vldr	s11, [pc, #480]	; 800b2b8 <HAL_RCCEx_GetPLL1ClockFreq+0x288>
 800b0da:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b0de:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b0e2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b0e6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b0ea:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b0ee:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
      }
      break;
 800b0f2:	e087      	b.n	800b204 <HAL_RCCEx_GetPLL1ClockFreq+0x1d4>
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800b0f4:	697b      	ldr	r3, [r7, #20]
 800b0f6:	ee07 3a90 	vmov	s15, r3
 800b0fa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b0fe:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800b2bc <HAL_RCCEx_GetPLL1ClockFreq+0x28c>
 800b102:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b106:	4b6a      	ldr	r3, [pc, #424]	; (800b2b0 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 800b108:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b10a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b10e:	ee07 3a90 	vmov	s15, r3
 800b112:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b116:	ed97 6a03 	vldr	s12, [r7, #12]
 800b11a:	eddf 5a67 	vldr	s11, [pc, #412]	; 800b2b8 <HAL_RCCEx_GetPLL1ClockFreq+0x288>
 800b11e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b122:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b126:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b12a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b12e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b132:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800b136:	e065      	b.n	800b204 <HAL_RCCEx_GetPLL1ClockFreq+0x1d4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800b138:	697b      	ldr	r3, [r7, #20]
 800b13a:	ee07 3a90 	vmov	s15, r3
 800b13e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b142:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800b2c0 <HAL_RCCEx_GetPLL1ClockFreq+0x290>
 800b146:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b14a:	4b59      	ldr	r3, [pc, #356]	; (800b2b0 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 800b14c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b14e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b152:	ee07 3a90 	vmov	s15, r3
 800b156:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b15a:	ed97 6a03 	vldr	s12, [r7, #12]
 800b15e:	eddf 5a56 	vldr	s11, [pc, #344]	; 800b2b8 <HAL_RCCEx_GetPLL1ClockFreq+0x288>
 800b162:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b166:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b16a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b16e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b172:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b176:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800b17a:	e043      	b.n	800b204 <HAL_RCCEx_GetPLL1ClockFreq+0x1d4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800b17c:	697b      	ldr	r3, [r7, #20]
 800b17e:	ee07 3a90 	vmov	s15, r3
 800b182:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b186:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800b2c4 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800b18a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b18e:	4b48      	ldr	r3, [pc, #288]	; (800b2b0 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 800b190:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b192:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b196:	ee07 3a90 	vmov	s15, r3
 800b19a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b19e:	ed97 6a03 	vldr	s12, [r7, #12]
 800b1a2:	eddf 5a45 	vldr	s11, [pc, #276]	; 800b2b8 <HAL_RCCEx_GetPLL1ClockFreq+0x288>
 800b1a6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b1aa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b1ae:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b1b2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b1b6:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b1ba:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800b1be:	e021      	b.n	800b204 <HAL_RCCEx_GetPLL1ClockFreq+0x1d4>

    default:
      pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800b1c0:	697b      	ldr	r3, [r7, #20]
 800b1c2:	ee07 3a90 	vmov	s15, r3
 800b1c6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b1ca:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800b2c0 <HAL_RCCEx_GetPLL1ClockFreq+0x290>
 800b1ce:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b1d2:	4b37      	ldr	r3, [pc, #220]	; (800b2b0 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 800b1d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b1d6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b1da:	ee07 3a90 	vmov	s15, r3
 800b1de:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b1e2:	ed97 6a03 	vldr	s12, [r7, #12]
 800b1e6:	eddf 5a34 	vldr	s11, [pc, #208]	; 800b2b8 <HAL_RCCEx_GetPLL1ClockFreq+0x288>
 800b1ea:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b1ee:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b1f2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b1f6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b1fa:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b1fe:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800b202:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9)  + (float_t)1 )) ;
 800b204:	4b2a      	ldr	r3, [pc, #168]	; (800b2b0 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 800b206:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b208:	0a5b      	lsrs	r3, r3, #9
 800b20a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b20e:	ee07 3a90 	vmov	s15, r3
 800b212:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b216:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800b21a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800b21e:	edd7 6a07 	vldr	s13, [r7, #28]
 800b222:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b226:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b22a:	ee17 2a90 	vmov	r2, s15
 800b22e:	687b      	ldr	r3, [r7, #4]
 800b230:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >>16) + (float_t)1 )) ;
 800b232:	4b1f      	ldr	r3, [pc, #124]	; (800b2b0 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 800b234:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b236:	0c1b      	lsrs	r3, r3, #16
 800b238:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b23c:	ee07 3a90 	vmov	s15, r3
 800b240:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b244:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800b248:	ee37 7a87 	vadd.f32	s14, s15, s14
 800b24c:	edd7 6a07 	vldr	s13, [r7, #28]
 800b250:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b254:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b258:	ee17 2a90 	vmov	r2, s15
 800b25c:	687b      	ldr	r3, [r7, #4]
 800b25e:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >>24) + (float_t)1 )) ;
 800b260:	4b13      	ldr	r3, [pc, #76]	; (800b2b0 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 800b262:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b264:	0e1b      	lsrs	r3, r3, #24
 800b266:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b26a:	ee07 3a90 	vmov	s15, r3
 800b26e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b272:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800b276:	ee37 7a87 	vadd.f32	s14, s15, s14
 800b27a:	edd7 6a07 	vldr	s13, [r7, #28]
 800b27e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b282:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b286:	ee17 2a90 	vmov	r2, s15
 800b28a:	687b      	ldr	r3, [r7, #4]
 800b28c:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 800b28e:	e008      	b.n	800b2a2 <HAL_RCCEx_GetPLL1ClockFreq+0x272>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 800b290:	687b      	ldr	r3, [r7, #4]
 800b292:	2200      	movs	r2, #0
 800b294:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 800b296:	687b      	ldr	r3, [r7, #4]
 800b298:	2200      	movs	r2, #0
 800b29a:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 800b29c:	687b      	ldr	r3, [r7, #4]
 800b29e:	2200      	movs	r2, #0
 800b2a0:	609a      	str	r2, [r3, #8]
}
 800b2a2:	bf00      	nop
 800b2a4:	3724      	adds	r7, #36	; 0x24
 800b2a6:	46bd      	mov	sp, r7
 800b2a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2ac:	4770      	bx	lr
 800b2ae:	bf00      	nop
 800b2b0:	58024400 	.word	0x58024400
 800b2b4:	03d09000 	.word	0x03d09000
 800b2b8:	46000000 	.word	0x46000000
 800b2bc:	4c742400 	.word	0x4c742400
 800b2c0:	4a742400 	.word	0x4a742400
 800b2c4:	4bbebc20 	.word	0x4bbebc20

0800b2c8 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 800b2c8:	b580      	push	{r7, lr}
 800b2ca:	b084      	sub	sp, #16
 800b2cc:	af00      	add	r7, sp, #0
 800b2ce:	6078      	str	r0, [r7, #4]
 800b2d0:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800b2d2:	2300      	movs	r3, #0
 800b2d4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800b2d6:	4b53      	ldr	r3, [pc, #332]	; (800b424 <RCCEx_PLL2_Config+0x15c>)
 800b2d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b2da:	f003 0303 	and.w	r3, r3, #3
 800b2de:	2b03      	cmp	r3, #3
 800b2e0:	d101      	bne.n	800b2e6 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800b2e2:	2301      	movs	r3, #1
 800b2e4:	e099      	b.n	800b41a <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800b2e6:	4b4f      	ldr	r3, [pc, #316]	; (800b424 <RCCEx_PLL2_Config+0x15c>)
 800b2e8:	681b      	ldr	r3, [r3, #0]
 800b2ea:	4a4e      	ldr	r2, [pc, #312]	; (800b424 <RCCEx_PLL2_Config+0x15c>)
 800b2ec:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800b2f0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800b2f2:	f7f8 fa01 	bl	80036f8 <HAL_GetTick>
 800b2f6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800b2f8:	e008      	b.n	800b30c <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 800b2fa:	f7f8 f9fd 	bl	80036f8 <HAL_GetTick>
 800b2fe:	4602      	mov	r2, r0
 800b300:	68bb      	ldr	r3, [r7, #8]
 800b302:	1ad3      	subs	r3, r2, r3
 800b304:	2b02      	cmp	r3, #2
 800b306:	d901      	bls.n	800b30c <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 800b308:	2303      	movs	r3, #3
 800b30a:	e086      	b.n	800b41a <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800b30c:	4b45      	ldr	r3, [pc, #276]	; (800b424 <RCCEx_PLL2_Config+0x15c>)
 800b30e:	681b      	ldr	r3, [r3, #0]
 800b310:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800b314:	2b00      	cmp	r3, #0
 800b316:	d1f0      	bne.n	800b2fa <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 800b318:	4b42      	ldr	r3, [pc, #264]	; (800b424 <RCCEx_PLL2_Config+0x15c>)
 800b31a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b31c:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800b320:	687b      	ldr	r3, [r7, #4]
 800b322:	681b      	ldr	r3, [r3, #0]
 800b324:	031b      	lsls	r3, r3, #12
 800b326:	493f      	ldr	r1, [pc, #252]	; (800b424 <RCCEx_PLL2_Config+0x15c>)
 800b328:	4313      	orrs	r3, r2
 800b32a:	628b      	str	r3, [r1, #40]	; 0x28
 800b32c:	687b      	ldr	r3, [r7, #4]
 800b32e:	685b      	ldr	r3, [r3, #4]
 800b330:	3b01      	subs	r3, #1
 800b332:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800b336:	687b      	ldr	r3, [r7, #4]
 800b338:	689b      	ldr	r3, [r3, #8]
 800b33a:	3b01      	subs	r3, #1
 800b33c:	025b      	lsls	r3, r3, #9
 800b33e:	b29b      	uxth	r3, r3
 800b340:	431a      	orrs	r2, r3
 800b342:	687b      	ldr	r3, [r7, #4]
 800b344:	68db      	ldr	r3, [r3, #12]
 800b346:	3b01      	subs	r3, #1
 800b348:	041b      	lsls	r3, r3, #16
 800b34a:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800b34e:	431a      	orrs	r2, r3
 800b350:	687b      	ldr	r3, [r7, #4]
 800b352:	691b      	ldr	r3, [r3, #16]
 800b354:	3b01      	subs	r3, #1
 800b356:	061b      	lsls	r3, r3, #24
 800b358:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800b35c:	4931      	ldr	r1, [pc, #196]	; (800b424 <RCCEx_PLL2_Config+0x15c>)
 800b35e:	4313      	orrs	r3, r2
 800b360:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800b362:	4b30      	ldr	r3, [pc, #192]	; (800b424 <RCCEx_PLL2_Config+0x15c>)
 800b364:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b366:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800b36a:	687b      	ldr	r3, [r7, #4]
 800b36c:	695b      	ldr	r3, [r3, #20]
 800b36e:	492d      	ldr	r1, [pc, #180]	; (800b424 <RCCEx_PLL2_Config+0x15c>)
 800b370:	4313      	orrs	r3, r2
 800b372:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 800b374:	4b2b      	ldr	r3, [pc, #172]	; (800b424 <RCCEx_PLL2_Config+0x15c>)
 800b376:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b378:	f023 0220 	bic.w	r2, r3, #32
 800b37c:	687b      	ldr	r3, [r7, #4]
 800b37e:	699b      	ldr	r3, [r3, #24]
 800b380:	4928      	ldr	r1, [pc, #160]	; (800b424 <RCCEx_PLL2_Config+0x15c>)
 800b382:	4313      	orrs	r3, r2
 800b384:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800b386:	4b27      	ldr	r3, [pc, #156]	; (800b424 <RCCEx_PLL2_Config+0x15c>)
 800b388:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b38a:	4a26      	ldr	r2, [pc, #152]	; (800b424 <RCCEx_PLL2_Config+0x15c>)
 800b38c:	f023 0310 	bic.w	r3, r3, #16
 800b390:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800b392:	4b24      	ldr	r3, [pc, #144]	; (800b424 <RCCEx_PLL2_Config+0x15c>)
 800b394:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800b396:	4b24      	ldr	r3, [pc, #144]	; (800b428 <RCCEx_PLL2_Config+0x160>)
 800b398:	4013      	ands	r3, r2
 800b39a:	687a      	ldr	r2, [r7, #4]
 800b39c:	69d2      	ldr	r2, [r2, #28]
 800b39e:	00d2      	lsls	r2, r2, #3
 800b3a0:	4920      	ldr	r1, [pc, #128]	; (800b424 <RCCEx_PLL2_Config+0x15c>)
 800b3a2:	4313      	orrs	r3, r2
 800b3a4:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800b3a6:	4b1f      	ldr	r3, [pc, #124]	; (800b424 <RCCEx_PLL2_Config+0x15c>)
 800b3a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b3aa:	4a1e      	ldr	r2, [pc, #120]	; (800b424 <RCCEx_PLL2_Config+0x15c>)
 800b3ac:	f043 0310 	orr.w	r3, r3, #16
 800b3b0:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 800b3b2:	683b      	ldr	r3, [r7, #0]
 800b3b4:	2b00      	cmp	r3, #0
 800b3b6:	d106      	bne.n	800b3c6 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800b3b8:	4b1a      	ldr	r3, [pc, #104]	; (800b424 <RCCEx_PLL2_Config+0x15c>)
 800b3ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b3bc:	4a19      	ldr	r2, [pc, #100]	; (800b424 <RCCEx_PLL2_Config+0x15c>)
 800b3be:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800b3c2:	62d3      	str	r3, [r2, #44]	; 0x2c
 800b3c4:	e00f      	b.n	800b3e6 <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 800b3c6:	683b      	ldr	r3, [r7, #0]
 800b3c8:	2b01      	cmp	r3, #1
 800b3ca:	d106      	bne.n	800b3da <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800b3cc:	4b15      	ldr	r3, [pc, #84]	; (800b424 <RCCEx_PLL2_Config+0x15c>)
 800b3ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b3d0:	4a14      	ldr	r2, [pc, #80]	; (800b424 <RCCEx_PLL2_Config+0x15c>)
 800b3d2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800b3d6:	62d3      	str	r3, [r2, #44]	; 0x2c
 800b3d8:	e005      	b.n	800b3e6 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800b3da:	4b12      	ldr	r3, [pc, #72]	; (800b424 <RCCEx_PLL2_Config+0x15c>)
 800b3dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b3de:	4a11      	ldr	r2, [pc, #68]	; (800b424 <RCCEx_PLL2_Config+0x15c>)
 800b3e0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800b3e4:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800b3e6:	4b0f      	ldr	r3, [pc, #60]	; (800b424 <RCCEx_PLL2_Config+0x15c>)
 800b3e8:	681b      	ldr	r3, [r3, #0]
 800b3ea:	4a0e      	ldr	r2, [pc, #56]	; (800b424 <RCCEx_PLL2_Config+0x15c>)
 800b3ec:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800b3f0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800b3f2:	f7f8 f981 	bl	80036f8 <HAL_GetTick>
 800b3f6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800b3f8:	e008      	b.n	800b40c <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 800b3fa:	f7f8 f97d 	bl	80036f8 <HAL_GetTick>
 800b3fe:	4602      	mov	r2, r0
 800b400:	68bb      	ldr	r3, [r7, #8]
 800b402:	1ad3      	subs	r3, r2, r3
 800b404:	2b02      	cmp	r3, #2
 800b406:	d901      	bls.n	800b40c <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 800b408:	2303      	movs	r3, #3
 800b40a:	e006      	b.n	800b41a <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800b40c:	4b05      	ldr	r3, [pc, #20]	; (800b424 <RCCEx_PLL2_Config+0x15c>)
 800b40e:	681b      	ldr	r3, [r3, #0]
 800b410:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800b414:	2b00      	cmp	r3, #0
 800b416:	d0f0      	beq.n	800b3fa <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 800b418:	7bfb      	ldrb	r3, [r7, #15]
}
 800b41a:	4618      	mov	r0, r3
 800b41c:	3710      	adds	r7, #16
 800b41e:	46bd      	mov	sp, r7
 800b420:	bd80      	pop	{r7, pc}
 800b422:	bf00      	nop
 800b424:	58024400 	.word	0x58024400
 800b428:	ffff0007 	.word	0xffff0007

0800b42c <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 800b42c:	b580      	push	{r7, lr}
 800b42e:	b084      	sub	sp, #16
 800b430:	af00      	add	r7, sp, #0
 800b432:	6078      	str	r0, [r7, #4]
 800b434:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800b436:	2300      	movs	r3, #0
 800b438:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800b43a:	4b53      	ldr	r3, [pc, #332]	; (800b588 <RCCEx_PLL3_Config+0x15c>)
 800b43c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b43e:	f003 0303 	and.w	r3, r3, #3
 800b442:	2b03      	cmp	r3, #3
 800b444:	d101      	bne.n	800b44a <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800b446:	2301      	movs	r3, #1
 800b448:	e099      	b.n	800b57e <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800b44a:	4b4f      	ldr	r3, [pc, #316]	; (800b588 <RCCEx_PLL3_Config+0x15c>)
 800b44c:	681b      	ldr	r3, [r3, #0]
 800b44e:	4a4e      	ldr	r2, [pc, #312]	; (800b588 <RCCEx_PLL3_Config+0x15c>)
 800b450:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800b454:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800b456:	f7f8 f94f 	bl	80036f8 <HAL_GetTick>
 800b45a:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800b45c:	e008      	b.n	800b470 <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 800b45e:	f7f8 f94b 	bl	80036f8 <HAL_GetTick>
 800b462:	4602      	mov	r2, r0
 800b464:	68bb      	ldr	r3, [r7, #8]
 800b466:	1ad3      	subs	r3, r2, r3
 800b468:	2b02      	cmp	r3, #2
 800b46a:	d901      	bls.n	800b470 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 800b46c:	2303      	movs	r3, #3
 800b46e:	e086      	b.n	800b57e <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800b470:	4b45      	ldr	r3, [pc, #276]	; (800b588 <RCCEx_PLL3_Config+0x15c>)
 800b472:	681b      	ldr	r3, [r3, #0]
 800b474:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800b478:	2b00      	cmp	r3, #0
 800b47a:	d1f0      	bne.n	800b45e <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800b47c:	4b42      	ldr	r3, [pc, #264]	; (800b588 <RCCEx_PLL3_Config+0x15c>)
 800b47e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b480:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 800b484:	687b      	ldr	r3, [r7, #4]
 800b486:	681b      	ldr	r3, [r3, #0]
 800b488:	051b      	lsls	r3, r3, #20
 800b48a:	493f      	ldr	r1, [pc, #252]	; (800b588 <RCCEx_PLL3_Config+0x15c>)
 800b48c:	4313      	orrs	r3, r2
 800b48e:	628b      	str	r3, [r1, #40]	; 0x28
 800b490:	687b      	ldr	r3, [r7, #4]
 800b492:	685b      	ldr	r3, [r3, #4]
 800b494:	3b01      	subs	r3, #1
 800b496:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800b49a:	687b      	ldr	r3, [r7, #4]
 800b49c:	689b      	ldr	r3, [r3, #8]
 800b49e:	3b01      	subs	r3, #1
 800b4a0:	025b      	lsls	r3, r3, #9
 800b4a2:	b29b      	uxth	r3, r3
 800b4a4:	431a      	orrs	r2, r3
 800b4a6:	687b      	ldr	r3, [r7, #4]
 800b4a8:	68db      	ldr	r3, [r3, #12]
 800b4aa:	3b01      	subs	r3, #1
 800b4ac:	041b      	lsls	r3, r3, #16
 800b4ae:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800b4b2:	431a      	orrs	r2, r3
 800b4b4:	687b      	ldr	r3, [r7, #4]
 800b4b6:	691b      	ldr	r3, [r3, #16]
 800b4b8:	3b01      	subs	r3, #1
 800b4ba:	061b      	lsls	r3, r3, #24
 800b4bc:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800b4c0:	4931      	ldr	r1, [pc, #196]	; (800b588 <RCCEx_PLL3_Config+0x15c>)
 800b4c2:	4313      	orrs	r3, r2
 800b4c4:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800b4c6:	4b30      	ldr	r3, [pc, #192]	; (800b588 <RCCEx_PLL3_Config+0x15c>)
 800b4c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b4ca:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800b4ce:	687b      	ldr	r3, [r7, #4]
 800b4d0:	695b      	ldr	r3, [r3, #20]
 800b4d2:	492d      	ldr	r1, [pc, #180]	; (800b588 <RCCEx_PLL3_Config+0x15c>)
 800b4d4:	4313      	orrs	r3, r2
 800b4d6:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800b4d8:	4b2b      	ldr	r3, [pc, #172]	; (800b588 <RCCEx_PLL3_Config+0x15c>)
 800b4da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b4dc:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 800b4e0:	687b      	ldr	r3, [r7, #4]
 800b4e2:	699b      	ldr	r3, [r3, #24]
 800b4e4:	4928      	ldr	r1, [pc, #160]	; (800b588 <RCCEx_PLL3_Config+0x15c>)
 800b4e6:	4313      	orrs	r3, r2
 800b4e8:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800b4ea:	4b27      	ldr	r3, [pc, #156]	; (800b588 <RCCEx_PLL3_Config+0x15c>)
 800b4ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b4ee:	4a26      	ldr	r2, [pc, #152]	; (800b588 <RCCEx_PLL3_Config+0x15c>)
 800b4f0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800b4f4:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800b4f6:	4b24      	ldr	r3, [pc, #144]	; (800b588 <RCCEx_PLL3_Config+0x15c>)
 800b4f8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800b4fa:	4b24      	ldr	r3, [pc, #144]	; (800b58c <RCCEx_PLL3_Config+0x160>)
 800b4fc:	4013      	ands	r3, r2
 800b4fe:	687a      	ldr	r2, [r7, #4]
 800b500:	69d2      	ldr	r2, [r2, #28]
 800b502:	00d2      	lsls	r2, r2, #3
 800b504:	4920      	ldr	r1, [pc, #128]	; (800b588 <RCCEx_PLL3_Config+0x15c>)
 800b506:	4313      	orrs	r3, r2
 800b508:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800b50a:	4b1f      	ldr	r3, [pc, #124]	; (800b588 <RCCEx_PLL3_Config+0x15c>)
 800b50c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b50e:	4a1e      	ldr	r2, [pc, #120]	; (800b588 <RCCEx_PLL3_Config+0x15c>)
 800b510:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800b514:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 800b516:	683b      	ldr	r3, [r7, #0]
 800b518:	2b00      	cmp	r3, #0
 800b51a:	d106      	bne.n	800b52a <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800b51c:	4b1a      	ldr	r3, [pc, #104]	; (800b588 <RCCEx_PLL3_Config+0x15c>)
 800b51e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b520:	4a19      	ldr	r2, [pc, #100]	; (800b588 <RCCEx_PLL3_Config+0x15c>)
 800b522:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800b526:	62d3      	str	r3, [r2, #44]	; 0x2c
 800b528:	e00f      	b.n	800b54a <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 800b52a:	683b      	ldr	r3, [r7, #0]
 800b52c:	2b01      	cmp	r3, #1
 800b52e:	d106      	bne.n	800b53e <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 800b530:	4b15      	ldr	r3, [pc, #84]	; (800b588 <RCCEx_PLL3_Config+0x15c>)
 800b532:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b534:	4a14      	ldr	r2, [pc, #80]	; (800b588 <RCCEx_PLL3_Config+0x15c>)
 800b536:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800b53a:	62d3      	str	r3, [r2, #44]	; 0x2c
 800b53c:	e005      	b.n	800b54a <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800b53e:	4b12      	ldr	r3, [pc, #72]	; (800b588 <RCCEx_PLL3_Config+0x15c>)
 800b540:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b542:	4a11      	ldr	r2, [pc, #68]	; (800b588 <RCCEx_PLL3_Config+0x15c>)
 800b544:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800b548:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800b54a:	4b0f      	ldr	r3, [pc, #60]	; (800b588 <RCCEx_PLL3_Config+0x15c>)
 800b54c:	681b      	ldr	r3, [r3, #0]
 800b54e:	4a0e      	ldr	r2, [pc, #56]	; (800b588 <RCCEx_PLL3_Config+0x15c>)
 800b550:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800b554:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800b556:	f7f8 f8cf 	bl	80036f8 <HAL_GetTick>
 800b55a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800b55c:	e008      	b.n	800b570 <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 800b55e:	f7f8 f8cb 	bl	80036f8 <HAL_GetTick>
 800b562:	4602      	mov	r2, r0
 800b564:	68bb      	ldr	r3, [r7, #8]
 800b566:	1ad3      	subs	r3, r2, r3
 800b568:	2b02      	cmp	r3, #2
 800b56a:	d901      	bls.n	800b570 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 800b56c:	2303      	movs	r3, #3
 800b56e:	e006      	b.n	800b57e <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800b570:	4b05      	ldr	r3, [pc, #20]	; (800b588 <RCCEx_PLL3_Config+0x15c>)
 800b572:	681b      	ldr	r3, [r3, #0]
 800b574:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800b578:	2b00      	cmp	r3, #0
 800b57a:	d0f0      	beq.n	800b55e <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 800b57c:	7bfb      	ldrb	r3, [r7, #15]
}
 800b57e:	4618      	mov	r0, r3
 800b580:	3710      	adds	r7, #16
 800b582:	46bd      	mov	sp, r7
 800b584:	bd80      	pop	{r7, pc}
 800b586:	bf00      	nop
 800b588:	58024400 	.word	0x58024400
 800b58c:	ffff0007 	.word	0xffff0007

0800b590 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 800b590:	b580      	push	{r7, lr}
 800b592:	b084      	sub	sp, #16
 800b594:	af00      	add	r7, sp, #0
 800b596:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 800b598:	2301      	movs	r3, #1
 800b59a:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler */
  if(hrtc != NULL)
 800b59c:	687b      	ldr	r3, [r7, #4]
 800b59e:	2b00      	cmp	r3, #0
 800b5a0:	d067      	beq.n	800b672 <HAL_RTC_Init+0xe2>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else /*  (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */
    if(hrtc->State == HAL_RTC_STATE_RESET)
 800b5a2:	687b      	ldr	r3, [r7, #4]
 800b5a4:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800b5a8:	b2db      	uxtb	r3, r3
 800b5aa:	2b00      	cmp	r3, #0
 800b5ac:	d106      	bne.n	800b5bc <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 800b5ae:	687b      	ldr	r3, [r7, #4]
 800b5b0:	2200      	movs	r2, #0
 800b5b2:	f883 2020 	strb.w	r2, [r3, #32]

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 800b5b6:	6878      	ldr	r0, [r7, #4]
 800b5b8:	f7f7 fce2 	bl	8002f80 <HAL_RTC_MspInit>
    }
#endif /*  (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 800b5bc:	687b      	ldr	r3, [r7, #4]
 800b5be:	2202      	movs	r2, #2
 800b5c0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800b5c4:	687b      	ldr	r3, [r7, #4]
 800b5c6:	681b      	ldr	r3, [r3, #0]
 800b5c8:	22ca      	movs	r2, #202	; 0xca
 800b5ca:	625a      	str	r2, [r3, #36]	; 0x24
 800b5cc:	687b      	ldr	r3, [r7, #4]
 800b5ce:	681b      	ldr	r3, [r3, #0]
 800b5d0:	2253      	movs	r2, #83	; 0x53
 800b5d2:	625a      	str	r2, [r3, #36]	; 0x24

   /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 800b5d4:	6878      	ldr	r0, [r7, #4]
 800b5d6:	f000 fa49 	bl	800ba6c <RTC_EnterInitMode>
 800b5da:	4603      	mov	r3, r0
 800b5dc:	73fb      	strb	r3, [r7, #15]
    if (status == HAL_OK)
 800b5de:	7bfb      	ldrb	r3, [r7, #15]
 800b5e0:	2b00      	cmp	r3, #0
 800b5e2:	d13b      	bne.n	800b65c <HAL_RTC_Init+0xcc>
#if defined(RTC_CR_TAMPOE)
      /* Clear RTC_CR FMT, OSEL, POL and TAMPOE Bits */
      hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE);
#else  /* RTC_CR_TAMPOE */
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL);
 800b5e4:	687b      	ldr	r3, [r7, #4]
 800b5e6:	681b      	ldr	r3, [r3, #0]
 800b5e8:	6899      	ldr	r1, [r3, #8]
 800b5ea:	687b      	ldr	r3, [r7, #4]
 800b5ec:	681a      	ldr	r2, [r3, #0]
 800b5ee:	4b23      	ldr	r3, [pc, #140]	; (800b67c <HAL_RTC_Init+0xec>)
 800b5f0:	400b      	ands	r3, r1
 800b5f2:	6093      	str	r3, [r2, #8]
#endif /* RTC_CR_TAMPOE */

      /* Set RTC_CR register */
      hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 800b5f4:	687b      	ldr	r3, [r7, #4]
 800b5f6:	681b      	ldr	r3, [r3, #0]
 800b5f8:	6899      	ldr	r1, [r3, #8]
 800b5fa:	687b      	ldr	r3, [r7, #4]
 800b5fc:	685a      	ldr	r2, [r3, #4]
 800b5fe:	687b      	ldr	r3, [r7, #4]
 800b600:	691b      	ldr	r3, [r3, #16]
 800b602:	431a      	orrs	r2, r3
 800b604:	687b      	ldr	r3, [r7, #4]
 800b606:	699b      	ldr	r3, [r3, #24]
 800b608:	431a      	orrs	r2, r3
 800b60a:	687b      	ldr	r3, [r7, #4]
 800b60c:	681b      	ldr	r3, [r3, #0]
 800b60e:	430a      	orrs	r2, r1
 800b610:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos) | (hrtc->Init.SynchPrediv << RTC_PRER_PREDIV_S_Pos);
 800b612:	687b      	ldr	r3, [r7, #4]
 800b614:	689b      	ldr	r3, [r3, #8]
 800b616:	0419      	lsls	r1, r3, #16
 800b618:	687b      	ldr	r3, [r7, #4]
 800b61a:	68da      	ldr	r2, [r3, #12]
 800b61c:	687b      	ldr	r3, [r7, #4]
 800b61e:	681b      	ldr	r3, [r3, #0]
 800b620:	430a      	orrs	r2, r1
 800b622:	611a      	str	r2, [r3, #16]

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 800b624:	6878      	ldr	r0, [r7, #4]
 800b626:	f000 fa51 	bl	800bacc <RTC_ExitInitMode>
 800b62a:	4603      	mov	r3, r0
 800b62c:	73fb      	strb	r3, [r7, #15]

      if(status == HAL_OK)
 800b62e:	7bfb      	ldrb	r3, [r7, #15]
 800b630:	2b00      	cmp	r3, #0
 800b632:	d113      	bne.n	800b65c <HAL_RTC_Init+0xcc>
        hrtc->Instance->CR &= ~(RTC_CR_TAMPALRM_PU | RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN);
        hrtc->Instance->CR |= (hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
#endif /* RTC_CR_TAMPALRM_TYPE && RTC_CR_OUT2EN && RTC_CR_TAMPALRM_PU */

#if defined(RTC_OR_ALARMOUTTYPE) && defined(RTC_OR_OUT_RMP)
        hrtc->Instance->OR &= ~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 800b634:	687b      	ldr	r3, [r7, #4]
 800b636:	681b      	ldr	r3, [r3, #0]
 800b638:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800b63a:	687b      	ldr	r3, [r7, #4]
 800b63c:	681b      	ldr	r3, [r3, #0]
 800b63e:	f022 0203 	bic.w	r2, r2, #3
 800b642:	64da      	str	r2, [r3, #76]	; 0x4c
        hrtc->Instance->OR |= (hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 800b644:	687b      	ldr	r3, [r7, #4]
 800b646:	681b      	ldr	r3, [r3, #0]
 800b648:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 800b64a:	687b      	ldr	r3, [r7, #4]
 800b64c:	69da      	ldr	r2, [r3, #28]
 800b64e:	687b      	ldr	r3, [r7, #4]
 800b650:	695b      	ldr	r3, [r3, #20]
 800b652:	431a      	orrs	r2, r3
 800b654:	687b      	ldr	r3, [r7, #4]
 800b656:	681b      	ldr	r3, [r3, #0]
 800b658:	430a      	orrs	r2, r1
 800b65a:	64da      	str	r2, [r3, #76]	; 0x4c
#endif /* ALARMOUTTYPE && RTC_OR_OUT_RMP */
      }
    }
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800b65c:	687b      	ldr	r3, [r7, #4]
 800b65e:	681b      	ldr	r3, [r3, #0]
 800b660:	22ff      	movs	r2, #255	; 0xff
 800b662:	625a      	str	r2, [r3, #36]	; 0x24
    if (status == HAL_OK)
 800b664:	7bfb      	ldrb	r3, [r7, #15]
 800b666:	2b00      	cmp	r3, #0
 800b668:	d103      	bne.n	800b672 <HAL_RTC_Init+0xe2>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_READY;
 800b66a:	687b      	ldr	r3, [r7, #4]
 800b66c:	2201      	movs	r2, #1
 800b66e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
  }

  /* return status */
  return status;
 800b672:	7bfb      	ldrb	r3, [r7, #15]
}
 800b674:	4618      	mov	r0, r3
 800b676:	3710      	adds	r7, #16
 800b678:	46bd      	mov	sp, r7
 800b67a:	bd80      	pop	{r7, pc}
 800b67c:	ff8fffbf 	.word	0xff8fffbf

0800b680 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 800b680:	b590      	push	{r4, r7, lr}
 800b682:	b087      	sub	sp, #28
 800b684:	af00      	add	r7, sp, #0
 800b686:	60f8      	str	r0, [r7, #12]
 800b688:	60b9      	str	r1, [r7, #8]
 800b68a:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800b68c:	68fb      	ldr	r3, [r7, #12]
 800b68e:	f893 3020 	ldrb.w	r3, [r3, #32]
 800b692:	2b01      	cmp	r3, #1
 800b694:	d101      	bne.n	800b69a <HAL_RTC_SetTime+0x1a>
 800b696:	2302      	movs	r3, #2
 800b698:	e089      	b.n	800b7ae <HAL_RTC_SetTime+0x12e>
 800b69a:	68fb      	ldr	r3, [r7, #12]
 800b69c:	2201      	movs	r2, #1
 800b69e:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800b6a2:	68fb      	ldr	r3, [r7, #12]
 800b6a4:	2202      	movs	r2, #2
 800b6a6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800b6aa:	68fb      	ldr	r3, [r7, #12]
 800b6ac:	681b      	ldr	r3, [r3, #0]
 800b6ae:	22ca      	movs	r2, #202	; 0xca
 800b6b0:	625a      	str	r2, [r3, #36]	; 0x24
 800b6b2:	68fb      	ldr	r3, [r7, #12]
 800b6b4:	681b      	ldr	r3, [r3, #0]
 800b6b6:	2253      	movs	r2, #83	; 0x53
 800b6b8:	625a      	str	r2, [r3, #36]	; 0x24
 /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 800b6ba:	68f8      	ldr	r0, [r7, #12]
 800b6bc:	f000 f9d6 	bl	800ba6c <RTC_EnterInitMode>
 800b6c0:	4603      	mov	r3, r0
 800b6c2:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 800b6c4:	7cfb      	ldrb	r3, [r7, #19]
 800b6c6:	2b00      	cmp	r3, #0
 800b6c8:	d161      	bne.n	800b78e <HAL_RTC_SetTime+0x10e>
  {
    if(Format == RTC_FORMAT_BIN)
 800b6ca:	687b      	ldr	r3, [r7, #4]
 800b6cc:	2b00      	cmp	r3, #0
 800b6ce:	d126      	bne.n	800b71e <HAL_RTC_SetTime+0x9e>
    {
      if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800b6d0:	68fb      	ldr	r3, [r7, #12]
 800b6d2:	681b      	ldr	r3, [r3, #0]
 800b6d4:	689b      	ldr	r3, [r3, #8]
 800b6d6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b6da:	2b00      	cmp	r3, #0
 800b6dc:	d102      	bne.n	800b6e4 <HAL_RTC_SetTime+0x64>
        assert_param(IS_RTC_HOUR12(sTime->Hours));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 800b6de:	68bb      	ldr	r3, [r7, #8]
 800b6e0:	2200      	movs	r2, #0
 800b6e2:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(sTime->Hours));
      }
      assert_param(IS_RTC_MINUTES(sTime->Minutes));
      assert_param(IS_RTC_SECONDS(sTime->Seconds));

      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800b6e4:	68bb      	ldr	r3, [r7, #8]
 800b6e6:	781b      	ldrb	r3, [r3, #0]
 800b6e8:	4618      	mov	r0, r3
 800b6ea:	f000 fa2d 	bl	800bb48 <RTC_ByteToBcd2>
 800b6ee:	4603      	mov	r3, r0
 800b6f0:	041c      	lsls	r4, r3, #16
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800b6f2:	68bb      	ldr	r3, [r7, #8]
 800b6f4:	785b      	ldrb	r3, [r3, #1]
 800b6f6:	4618      	mov	r0, r3
 800b6f8:	f000 fa26 	bl	800bb48 <RTC_ByteToBcd2>
 800b6fc:	4603      	mov	r3, r0
 800b6fe:	021b      	lsls	r3, r3, #8
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800b700:	431c      	orrs	r4, r3
                          ((uint32_t)RTC_ByteToBcd2(sTime->Seconds) << RTC_TR_SU_Pos)  | \
 800b702:	68bb      	ldr	r3, [r7, #8]
 800b704:	789b      	ldrb	r3, [r3, #2]
 800b706:	4618      	mov	r0, r3
 800b708:	f000 fa1e 	bl	800bb48 <RTC_ByteToBcd2>
 800b70c:	4603      	mov	r3, r0
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800b70e:	ea44 0203 	orr.w	r2, r4, r3
                          (((uint32_t)sTime->TimeFormat) << RTC_TR_PM_Pos));
 800b712:	68bb      	ldr	r3, [r7, #8]
 800b714:	78db      	ldrb	r3, [r3, #3]
 800b716:	059b      	lsls	r3, r3, #22
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800b718:	4313      	orrs	r3, r2
 800b71a:	617b      	str	r3, [r7, #20]
 800b71c:	e018      	b.n	800b750 <HAL_RTC_SetTime+0xd0>
    }
    else
    {
      if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800b71e:	68fb      	ldr	r3, [r7, #12]
 800b720:	681b      	ldr	r3, [r3, #0]
 800b722:	689b      	ldr	r3, [r3, #8]
 800b724:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b728:	2b00      	cmp	r3, #0
 800b72a:	d102      	bne.n	800b732 <HAL_RTC_SetTime+0xb2>
        assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 800b72c:	68bb      	ldr	r3, [r7, #8]
 800b72e:	2200      	movs	r2, #0
 800b730:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
      }
      assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
      assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
      tmpreg = (((uint32_t)(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800b732:	68bb      	ldr	r3, [r7, #8]
 800b734:	781b      	ldrb	r3, [r3, #0]
 800b736:	041a      	lsls	r2, r3, #16
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800b738:	68bb      	ldr	r3, [r7, #8]
 800b73a:	785b      	ldrb	r3, [r3, #1]
 800b73c:	021b      	lsls	r3, r3, #8
      tmpreg = (((uint32_t)(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800b73e:	4313      	orrs	r3, r2
                ((uint32_t)(sTime->Seconds) << RTC_TR_SU_Pos)  | \
 800b740:	68ba      	ldr	r2, [r7, #8]
 800b742:	7892      	ldrb	r2, [r2, #2]
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800b744:	431a      	orrs	r2, r3
                ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 800b746:	68bb      	ldr	r3, [r7, #8]
 800b748:	78db      	ldrb	r3, [r3, #3]
 800b74a:	059b      	lsls	r3, r3, #22
      tmpreg = (((uint32_t)(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800b74c:	4313      	orrs	r3, r2
 800b74e:	617b      	str	r3, [r7, #20]
    }

    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 800b750:	68fb      	ldr	r3, [r7, #12]
 800b752:	681a      	ldr	r2, [r3, #0]
 800b754:	6979      	ldr	r1, [r7, #20]
 800b756:	4b18      	ldr	r3, [pc, #96]	; (800b7b8 <HAL_RTC_SetTime+0x138>)
 800b758:	400b      	ands	r3, r1
 800b75a:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured */
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BKP);
 800b75c:	68fb      	ldr	r3, [r7, #12]
 800b75e:	681b      	ldr	r3, [r3, #0]
 800b760:	689a      	ldr	r2, [r3, #8]
 800b762:	68fb      	ldr	r3, [r7, #12]
 800b764:	681b      	ldr	r3, [r3, #0]
 800b766:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800b76a:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 800b76c:	68fb      	ldr	r3, [r7, #12]
 800b76e:	681b      	ldr	r3, [r3, #0]
 800b770:	6899      	ldr	r1, [r3, #8]
 800b772:	68bb      	ldr	r3, [r7, #8]
 800b774:	68da      	ldr	r2, [r3, #12]
 800b776:	68bb      	ldr	r3, [r7, #8]
 800b778:	691b      	ldr	r3, [r3, #16]
 800b77a:	431a      	orrs	r2, r3
 800b77c:	68fb      	ldr	r3, [r7, #12]
 800b77e:	681b      	ldr	r3, [r3, #0]
 800b780:	430a      	orrs	r2, r1
 800b782:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 800b784:	68f8      	ldr	r0, [r7, #12]
 800b786:	f000 f9a1 	bl	800bacc <RTC_ExitInitMode>
 800b78a:	4603      	mov	r3, r0
 800b78c:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800b78e:	68fb      	ldr	r3, [r7, #12]
 800b790:	681b      	ldr	r3, [r3, #0]
 800b792:	22ff      	movs	r2, #255	; 0xff
 800b794:	625a      	str	r2, [r3, #36]	; 0x24

  if (status == HAL_OK)
 800b796:	7cfb      	ldrb	r3, [r7, #19]
 800b798:	2b00      	cmp	r3, #0
 800b79a:	d103      	bne.n	800b7a4 <HAL_RTC_SetTime+0x124>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 800b79c:	68fb      	ldr	r3, [r7, #12]
 800b79e:	2201      	movs	r2, #1
 800b7a0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800b7a4:	68fb      	ldr	r3, [r7, #12]
 800b7a6:	2200      	movs	r2, #0
 800b7a8:	f883 2020 	strb.w	r2, [r3, #32]

  return status;
 800b7ac:	7cfb      	ldrb	r3, [r7, #19]
}
 800b7ae:	4618      	mov	r0, r3
 800b7b0:	371c      	adds	r7, #28
 800b7b2:	46bd      	mov	sp, r7
 800b7b4:	bd90      	pop	{r4, r7, pc}
 800b7b6:	bf00      	nop
 800b7b8:	007f7f7f 	.word	0x007f7f7f

0800b7bc <HAL_RTC_GetTime>:
  *        Reading RTC current time locks the values in calendar shadow registers until Current date is read
  *        to ensure consistency between the time and date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 800b7bc:	b580      	push	{r7, lr}
 800b7be:	b086      	sub	sp, #24
 800b7c0:	af00      	add	r7, sp, #0
 800b7c2:	60f8      	str	r0, [r7, #12]
 800b7c4:	60b9      	str	r1, [r7, #8]
 800b7c6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds structure field from the corresponding register*/
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 800b7c8:	68fb      	ldr	r3, [r7, #12]
 800b7ca:	681b      	ldr	r3, [r3, #0]
 800b7cc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800b7ce:	68bb      	ldr	r3, [r7, #8]
 800b7d0:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 800b7d2:	68fb      	ldr	r3, [r7, #12]
 800b7d4:	681b      	ldr	r3, [r3, #0]
 800b7d6:	691b      	ldr	r3, [r3, #16]
 800b7d8:	f3c3 020e 	ubfx	r2, r3, #0, #15
 800b7dc:	68bb      	ldr	r3, [r7, #8]
 800b7de:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 800b7e0:	68fb      	ldr	r3, [r7, #12]
 800b7e2:	681b      	ldr	r3, [r3, #0]
 800b7e4:	681a      	ldr	r2, [r3, #0]
 800b7e6:	4b22      	ldr	r3, [pc, #136]	; (800b870 <HAL_RTC_GetTime+0xb4>)
 800b7e8:	4013      	ands	r3, r2
 800b7ea:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours      = (uint8_t)((tmpreg & (RTC_TR_HT  | RTC_TR_HU))  >> RTC_TR_HU_Pos);
 800b7ec:	697b      	ldr	r3, [r7, #20]
 800b7ee:	0c1b      	lsrs	r3, r3, #16
 800b7f0:	b2db      	uxtb	r3, r3
 800b7f2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800b7f6:	b2da      	uxtb	r2, r3
 800b7f8:	68bb      	ldr	r3, [r7, #8]
 800b7fa:	701a      	strb	r2, [r3, #0]
  sTime->Minutes    = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 800b7fc:	697b      	ldr	r3, [r7, #20]
 800b7fe:	0a1b      	lsrs	r3, r3, #8
 800b800:	b2db      	uxtb	r3, r3
 800b802:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b806:	b2da      	uxtb	r2, r3
 800b808:	68bb      	ldr	r3, [r7, #8]
 800b80a:	705a      	strb	r2, [r3, #1]
  sTime->Seconds    = (uint8_t)((tmpreg & (RTC_TR_ST  | RTC_TR_SU))  >> RTC_TR_SU_Pos);
 800b80c:	697b      	ldr	r3, [r7, #20]
 800b80e:	b2db      	uxtb	r3, r3
 800b810:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b814:	b2da      	uxtb	r2, r3
 800b816:	68bb      	ldr	r3, [r7, #8]
 800b818:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM))               >> RTC_TR_PM_Pos);
 800b81a:	697b      	ldr	r3, [r7, #20]
 800b81c:	0d9b      	lsrs	r3, r3, #22
 800b81e:	b2db      	uxtb	r3, r3
 800b820:	f003 0301 	and.w	r3, r3, #1
 800b824:	b2da      	uxtb	r2, r3
 800b826:	68bb      	ldr	r3, [r7, #8]
 800b828:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if(Format == RTC_FORMAT_BIN)
 800b82a:	687b      	ldr	r3, [r7, #4]
 800b82c:	2b00      	cmp	r3, #0
 800b82e:	d11a      	bne.n	800b866 <HAL_RTC_GetTime+0xaa>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours   = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 800b830:	68bb      	ldr	r3, [r7, #8]
 800b832:	781b      	ldrb	r3, [r3, #0]
 800b834:	4618      	mov	r0, r3
 800b836:	f000 f9a7 	bl	800bb88 <RTC_Bcd2ToByte>
 800b83a:	4603      	mov	r3, r0
 800b83c:	461a      	mov	r2, r3
 800b83e:	68bb      	ldr	r3, [r7, #8]
 800b840:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 800b842:	68bb      	ldr	r3, [r7, #8]
 800b844:	785b      	ldrb	r3, [r3, #1]
 800b846:	4618      	mov	r0, r3
 800b848:	f000 f99e 	bl	800bb88 <RTC_Bcd2ToByte>
 800b84c:	4603      	mov	r3, r0
 800b84e:	461a      	mov	r2, r3
 800b850:	68bb      	ldr	r3, [r7, #8]
 800b852:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 800b854:	68bb      	ldr	r3, [r7, #8]
 800b856:	789b      	ldrb	r3, [r3, #2]
 800b858:	4618      	mov	r0, r3
 800b85a:	f000 f995 	bl	800bb88 <RTC_Bcd2ToByte>
 800b85e:	4603      	mov	r3, r0
 800b860:	461a      	mov	r2, r3
 800b862:	68bb      	ldr	r3, [r7, #8]
 800b864:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 800b866:	2300      	movs	r3, #0
}
 800b868:	4618      	mov	r0, r3
 800b86a:	3718      	adds	r7, #24
 800b86c:	46bd      	mov	sp, r7
 800b86e:	bd80      	pop	{r7, pc}
 800b870:	007f7f7f 	.word	0x007f7f7f

0800b874 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 800b874:	b590      	push	{r4, r7, lr}
 800b876:	b087      	sub	sp, #28
 800b878:	af00      	add	r7, sp, #0
 800b87a:	60f8      	str	r0, [r7, #12]
 800b87c:	60b9      	str	r1, [r7, #8]
 800b87e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800b880:	68fb      	ldr	r3, [r7, #12]
 800b882:	f893 3020 	ldrb.w	r3, [r3, #32]
 800b886:	2b01      	cmp	r3, #1
 800b888:	d101      	bne.n	800b88e <HAL_RTC_SetDate+0x1a>
 800b88a:	2302      	movs	r3, #2
 800b88c:	e073      	b.n	800b976 <HAL_RTC_SetDate+0x102>
 800b88e:	68fb      	ldr	r3, [r7, #12]
 800b890:	2201      	movs	r2, #1
 800b892:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800b896:	68fb      	ldr	r3, [r7, #12]
 800b898:	2202      	movs	r2, #2
 800b89a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  if((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 800b89e:	687b      	ldr	r3, [r7, #4]
 800b8a0:	2b00      	cmp	r3, #0
 800b8a2:	d10e      	bne.n	800b8c2 <HAL_RTC_SetDate+0x4e>
 800b8a4:	68bb      	ldr	r3, [r7, #8]
 800b8a6:	785b      	ldrb	r3, [r3, #1]
 800b8a8:	f003 0310 	and.w	r3, r3, #16
 800b8ac:	2b00      	cmp	r3, #0
 800b8ae:	d008      	beq.n	800b8c2 <HAL_RTC_SetDate+0x4e>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 800b8b0:	68bb      	ldr	r3, [r7, #8]
 800b8b2:	785b      	ldrb	r3, [r3, #1]
 800b8b4:	f023 0310 	bic.w	r3, r3, #16
 800b8b8:	b2db      	uxtb	r3, r3
 800b8ba:	330a      	adds	r3, #10
 800b8bc:	b2da      	uxtb	r2, r3
 800b8be:	68bb      	ldr	r3, [r7, #8]
 800b8c0:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if(Format == RTC_FORMAT_BIN)
 800b8c2:	687b      	ldr	r3, [r7, #4]
 800b8c4:	2b00      	cmp	r3, #0
 800b8c6:	d11c      	bne.n	800b902 <HAL_RTC_SetDate+0x8e>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 800b8c8:	68bb      	ldr	r3, [r7, #8]
 800b8ca:	78db      	ldrb	r3, [r3, #3]
 800b8cc:	4618      	mov	r0, r3
 800b8ce:	f000 f93b 	bl	800bb48 <RTC_ByteToBcd2>
 800b8d2:	4603      	mov	r3, r0
 800b8d4:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 800b8d6:	68bb      	ldr	r3, [r7, #8]
 800b8d8:	785b      	ldrb	r3, [r3, #1]
 800b8da:	4618      	mov	r0, r3
 800b8dc:	f000 f934 	bl	800bb48 <RTC_ByteToBcd2>
 800b8e0:	4603      	mov	r3, r0
 800b8e2:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 800b8e4:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date)  << RTC_DR_DU_Pos) | \
 800b8e6:	68bb      	ldr	r3, [r7, #8]
 800b8e8:	789b      	ldrb	r3, [r3, #2]
 800b8ea:	4618      	mov	r0, r3
 800b8ec:	f000 f92c 	bl	800bb48 <RTC_ByteToBcd2>
 800b8f0:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 800b8f2:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay               << RTC_DR_WDU_Pos));
 800b8f6:	68bb      	ldr	r3, [r7, #8]
 800b8f8:	781b      	ldrb	r3, [r3, #0]
 800b8fa:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 800b8fc:	4313      	orrs	r3, r2
 800b8fe:	617b      	str	r3, [r7, #20]
 800b900:	e00e      	b.n	800b920 <HAL_RTC_SetDate+0xac>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 800b902:	68bb      	ldr	r3, [r7, #8]
 800b904:	78db      	ldrb	r3, [r3, #3]
 800b906:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 800b908:	68bb      	ldr	r3, [r7, #8]
 800b90a:	785b      	ldrb	r3, [r3, #1]
 800b90c:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 800b90e:	4313      	orrs	r3, r2
                  (((uint32_t)sDate->Date)    << RTC_DR_DU_Pos) | \
 800b910:	68ba      	ldr	r2, [r7, #8]
 800b912:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 800b914:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 800b916:	68bb      	ldr	r3, [r7, #8]
 800b918:	781b      	ldrb	r3, [r3, #0]
 800b91a:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 800b91c:	4313      	orrs	r3, r2
 800b91e:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800b920:	68fb      	ldr	r3, [r7, #12]
 800b922:	681b      	ldr	r3, [r3, #0]
 800b924:	22ca      	movs	r2, #202	; 0xca
 800b926:	625a      	str	r2, [r3, #36]	; 0x24
 800b928:	68fb      	ldr	r3, [r7, #12]
 800b92a:	681b      	ldr	r3, [r3, #0]
 800b92c:	2253      	movs	r2, #83	; 0x53
 800b92e:	625a      	str	r2, [r3, #36]	; 0x24


  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 800b930:	68f8      	ldr	r0, [r7, #12]
 800b932:	f000 f89b 	bl	800ba6c <RTC_EnterInitMode>
 800b936:	4603      	mov	r3, r0
 800b938:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 800b93a:	7cfb      	ldrb	r3, [r7, #19]
 800b93c:	2b00      	cmp	r3, #0
 800b93e:	d10a      	bne.n	800b956 <HAL_RTC_SetDate+0xe2>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 800b940:	68fb      	ldr	r3, [r7, #12]
 800b942:	681a      	ldr	r2, [r3, #0]
 800b944:	6979      	ldr	r1, [r7, #20]
 800b946:	4b0e      	ldr	r3, [pc, #56]	; (800b980 <HAL_RTC_SetDate+0x10c>)
 800b948:	400b      	ands	r3, r1
 800b94a:	6053      	str	r3, [r2, #4]


    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 800b94c:	68f8      	ldr	r0, [r7, #12]
 800b94e:	f000 f8bd 	bl	800bacc <RTC_ExitInitMode>
 800b952:	4603      	mov	r3, r0
 800b954:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800b956:	68fb      	ldr	r3, [r7, #12]
 800b958:	681b      	ldr	r3, [r3, #0]
 800b95a:	22ff      	movs	r2, #255	; 0xff
 800b95c:	625a      	str	r2, [r3, #36]	; 0x24

  if (status == HAL_OK)
 800b95e:	7cfb      	ldrb	r3, [r7, #19]
 800b960:	2b00      	cmp	r3, #0
 800b962:	d103      	bne.n	800b96c <HAL_RTC_SetDate+0xf8>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 800b964:	68fb      	ldr	r3, [r7, #12]
 800b966:	2201      	movs	r2, #1
 800b968:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800b96c:	68fb      	ldr	r3, [r7, #12]
 800b96e:	2200      	movs	r2, #0
 800b970:	f883 2020 	strb.w	r2, [r3, #32]

  return status;
 800b974:	7cfb      	ldrb	r3, [r7, #19]


}
 800b976:	4618      	mov	r0, r3
 800b978:	371c      	adds	r7, #28
 800b97a:	46bd      	mov	sp, r7
 800b97c:	bd90      	pop	{r4, r7, pc}
 800b97e:	bf00      	nop
 800b980:	00ffff3f 	.word	0x00ffff3f

0800b984 <HAL_RTC_GetDate>:
  *        in the higher-order calendar shadow registers to ensure consistency between the time and date values.
  *        Reading RTC current time locks the values in calendar shadow registers until Current date is read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 800b984:	b580      	push	{r7, lr}
 800b986:	b086      	sub	sp, #24
 800b988:	af00      	add	r7, sp, #0
 800b98a:	60f8      	str	r0, [r7, #12]
 800b98c:	60b9      	str	r1, [r7, #8]
 800b98e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 800b990:	68fb      	ldr	r3, [r7, #12]
 800b992:	681b      	ldr	r3, [r3, #0]
 800b994:	685a      	ldr	r2, [r3, #4]
 800b996:	4b21      	ldr	r3, [pc, #132]	; (800ba1c <HAL_RTC_GetDate+0x98>)
 800b998:	4013      	ands	r3, r2
 800b99a:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year    = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 800b99c:	697b      	ldr	r3, [r7, #20]
 800b99e:	0c1b      	lsrs	r3, r3, #16
 800b9a0:	b2da      	uxtb	r2, r3
 800b9a2:	68bb      	ldr	r3, [r7, #8]
 800b9a4:	70da      	strb	r2, [r3, #3]
  sDate->Month   = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 800b9a6:	697b      	ldr	r3, [r7, #20]
 800b9a8:	0a1b      	lsrs	r3, r3, #8
 800b9aa:	b2db      	uxtb	r3, r3
 800b9ac:	f003 031f 	and.w	r3, r3, #31
 800b9b0:	b2da      	uxtb	r2, r3
 800b9b2:	68bb      	ldr	r3, [r7, #8]
 800b9b4:	705a      	strb	r2, [r3, #1]
  sDate->Date    = (uint8_t)((datetmpreg & (RTC_DR_DT | RTC_DR_DU)) >> RTC_DR_DU_Pos);
 800b9b6:	697b      	ldr	r3, [r7, #20]
 800b9b8:	b2db      	uxtb	r3, r3
 800b9ba:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800b9be:	b2da      	uxtb	r2, r3
 800b9c0:	68bb      	ldr	r3, [r7, #8]
 800b9c2:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU))            >> RTC_DR_WDU_Pos);
 800b9c4:	697b      	ldr	r3, [r7, #20]
 800b9c6:	0b5b      	lsrs	r3, r3, #13
 800b9c8:	b2db      	uxtb	r3, r3
 800b9ca:	f003 0307 	and.w	r3, r3, #7
 800b9ce:	b2da      	uxtb	r2, r3
 800b9d0:	68bb      	ldr	r3, [r7, #8]
 800b9d2:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if(Format == RTC_FORMAT_BIN)
 800b9d4:	687b      	ldr	r3, [r7, #4]
 800b9d6:	2b00      	cmp	r3, #0
 800b9d8:	d11a      	bne.n	800ba10 <HAL_RTC_GetDate+0x8c>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 800b9da:	68bb      	ldr	r3, [r7, #8]
 800b9dc:	78db      	ldrb	r3, [r3, #3]
 800b9de:	4618      	mov	r0, r3
 800b9e0:	f000 f8d2 	bl	800bb88 <RTC_Bcd2ToByte>
 800b9e4:	4603      	mov	r3, r0
 800b9e6:	461a      	mov	r2, r3
 800b9e8:	68bb      	ldr	r3, [r7, #8]
 800b9ea:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 800b9ec:	68bb      	ldr	r3, [r7, #8]
 800b9ee:	785b      	ldrb	r3, [r3, #1]
 800b9f0:	4618      	mov	r0, r3
 800b9f2:	f000 f8c9 	bl	800bb88 <RTC_Bcd2ToByte>
 800b9f6:	4603      	mov	r3, r0
 800b9f8:	461a      	mov	r2, r3
 800b9fa:	68bb      	ldr	r3, [r7, #8]
 800b9fc:	705a      	strb	r2, [r3, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 800b9fe:	68bb      	ldr	r3, [r7, #8]
 800ba00:	789b      	ldrb	r3, [r3, #2]
 800ba02:	4618      	mov	r0, r3
 800ba04:	f000 f8c0 	bl	800bb88 <RTC_Bcd2ToByte>
 800ba08:	4603      	mov	r3, r0
 800ba0a:	461a      	mov	r2, r3
 800ba0c:	68bb      	ldr	r3, [r7, #8]
 800ba0e:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 800ba10:	2300      	movs	r3, #0
}
 800ba12:	4618      	mov	r0, r3
 800ba14:	3718      	adds	r7, #24
 800ba16:	46bd      	mov	sp, r7
 800ba18:	bd80      	pop	{r7, pc}
 800ba1a:	bf00      	nop
 800ba1c:	00ffff3f 	.word	0x00ffff3f

0800ba20 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 800ba20:	b580      	push	{r7, lr}
 800ba22:	b084      	sub	sp, #16
 800ba24:	af00      	add	r7, sp, #0
 800ba26:	6078      	str	r0, [r7, #4]
  /* Clear RSF flag */
#if defined(RTC_ICSR_RSF)
  hrtc->Instance->ICSR &= (uint32_t)RTC_RSF_MASK;
#endif /* RTC_ICSR_RSF */
#if defined(RTC_ISR_RSF)
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 800ba28:	687b      	ldr	r3, [r7, #4]
 800ba2a:	681b      	ldr	r3, [r3, #0]
 800ba2c:	68da      	ldr	r2, [r3, #12]
 800ba2e:	687b      	ldr	r3, [r7, #4]
 800ba30:	681b      	ldr	r3, [r3, #0]
 800ba32:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800ba36:	60da      	str	r2, [r3, #12]
#endif /* RTC_ISR_RSF */

  tickstart = HAL_GetTick();
 800ba38:	f7f7 fe5e 	bl	80036f8 <HAL_GetTick>
 800ba3c:	60f8      	str	r0, [r7, #12]
  /* Wait the registers to be synchronised */
#if defined(RTC_ICSR_RSF)
  while ((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
#endif /* RTC_ICSR_RSF */
#if defined(RTC_ISR_RSF)
    while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800ba3e:	e009      	b.n	800ba54 <HAL_RTC_WaitForSynchro+0x34>
#endif /* RTC_ISR_RSF */
    {
      if((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800ba40:	f7f7 fe5a 	bl	80036f8 <HAL_GetTick>
 800ba44:	4602      	mov	r2, r0
 800ba46:	68fb      	ldr	r3, [r7, #12]
 800ba48:	1ad3      	subs	r3, r2, r3
 800ba4a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800ba4e:	d901      	bls.n	800ba54 <HAL_RTC_WaitForSynchro+0x34>
      {
        return HAL_TIMEOUT;
 800ba50:	2303      	movs	r3, #3
 800ba52:	e007      	b.n	800ba64 <HAL_RTC_WaitForSynchro+0x44>
    while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800ba54:	687b      	ldr	r3, [r7, #4]
 800ba56:	681b      	ldr	r3, [r3, #0]
 800ba58:	68db      	ldr	r3, [r3, #12]
 800ba5a:	f003 0320 	and.w	r3, r3, #32
 800ba5e:	2b00      	cmp	r3, #0
 800ba60:	d0ee      	beq.n	800ba40 <HAL_RTC_WaitForSynchro+0x20>
      }
    }

  return HAL_OK;
 800ba62:	2300      	movs	r3, #0
}
 800ba64:	4618      	mov	r0, r3
 800ba66:	3710      	adds	r7, #16
 800ba68:	46bd      	mov	sp, r7
 800ba6a:	bd80      	pop	{r7, pc}

0800ba6c <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 800ba6c:	b580      	push	{r7, lr}
 800ba6e:	b084      	sub	sp, #16
 800ba70:	af00      	add	r7, sp, #0
 800ba72:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800ba74:	2300      	movs	r3, #0
 800ba76:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#endif /* RTC_ICSR_INITF */
#if defined(RTC_ISR_INITF)
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 800ba78:	687b      	ldr	r3, [r7, #4]
 800ba7a:	681b      	ldr	r3, [r3, #0]
 800ba7c:	68db      	ldr	r3, [r3, #12]
 800ba7e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ba82:	2b00      	cmp	r3, #0
 800ba84:	d11d      	bne.n	800bac2 <RTC_EnterInitMode+0x56>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 800ba86:	687b      	ldr	r3, [r7, #4]
 800ba88:	681b      	ldr	r3, [r3, #0]
 800ba8a:	f04f 32ff 	mov.w	r2, #4294967295
 800ba8e:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 800ba90:	f7f7 fe32 	bl	80036f8 <HAL_GetTick>
 800ba94:	60b8      	str	r0, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 800ba96:	e00d      	b.n	800bab4 <RTC_EnterInitMode+0x48>
    {
      if((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 800ba98:	f7f7 fe2e 	bl	80036f8 <HAL_GetTick>
 800ba9c:	4602      	mov	r2, r0
 800ba9e:	68bb      	ldr	r3, [r7, #8]
 800baa0:	1ad3      	subs	r3, r2, r3
 800baa2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800baa6:	d905      	bls.n	800bab4 <RTC_EnterInitMode+0x48>
      {
        status = HAL_TIMEOUT;
 800baa8:	2303      	movs	r3, #3
 800baaa:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800baac:	687b      	ldr	r3, [r7, #4]
 800baae:	2203      	movs	r2, #3
 800bab0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 800bab4:	687b      	ldr	r3, [r7, #4]
 800bab6:	681b      	ldr	r3, [r3, #0]
 800bab8:	68db      	ldr	r3, [r3, #12]
 800baba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800babe:	2b00      	cmp	r3, #0
 800bac0:	d0ea      	beq.n	800ba98 <RTC_EnterInitMode+0x2c>
      }
    }
  }
#endif /* RTC_ISR_INITF */

  return status;
 800bac2:	7bfb      	ldrb	r3, [r7, #15]
}
 800bac4:	4618      	mov	r0, r3
 800bac6:	3710      	adds	r7, #16
 800bac8:	46bd      	mov	sp, r7
 800baca:	bd80      	pop	{r7, pc}

0800bacc <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 800bacc:	b580      	push	{r7, lr}
 800bace:	b084      	sub	sp, #16
 800bad0:	af00      	add	r7, sp, #0
 800bad2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800bad4:	2300      	movs	r3, #0
 800bad6:	73fb      	strb	r3, [r7, #15]
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);

#elif defined(RTC_ISR_INITF)

  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ISR, RTC_ISR_INITF);
 800bad8:	4b1a      	ldr	r3, [pc, #104]	; (800bb44 <RTC_ExitInitMode+0x78>)
 800bada:	68db      	ldr	r3, [r3, #12]
 800badc:	4a19      	ldr	r2, [pc, #100]	; (800bb44 <RTC_ExitInitMode+0x78>)
 800bade:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800bae2:	60d3      	str	r3, [r2, #12]

#endif /* RTC_ISR_INITF */
  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 800bae4:	4b17      	ldr	r3, [pc, #92]	; (800bb44 <RTC_ExitInitMode+0x78>)
 800bae6:	689b      	ldr	r3, [r3, #8]
 800bae8:	f003 0320 	and.w	r3, r3, #32
 800baec:	2b00      	cmp	r3, #0
 800baee:	d10c      	bne.n	800bb0a <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800baf0:	6878      	ldr	r0, [r7, #4]
 800baf2:	f7ff ff95 	bl	800ba20 <HAL_RTC_WaitForSynchro>
 800baf6:	4603      	mov	r3, r0
 800baf8:	2b00      	cmp	r3, #0
 800bafa:	d01e      	beq.n	800bb3a <RTC_ExitInitMode+0x6e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800bafc:	687b      	ldr	r3, [r7, #4]
 800bafe:	2203      	movs	r2, #3
 800bb00:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 800bb04:	2303      	movs	r3, #3
 800bb06:	73fb      	strb	r3, [r7, #15]
 800bb08:	e017      	b.n	800bb3a <RTC_ExitInitMode+0x6e>
    }
  }
  else
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 800bb0a:	4b0e      	ldr	r3, [pc, #56]	; (800bb44 <RTC_ExitInitMode+0x78>)
 800bb0c:	689b      	ldr	r3, [r3, #8]
 800bb0e:	4a0d      	ldr	r2, [pc, #52]	; (800bb44 <RTC_ExitInitMode+0x78>)
 800bb10:	f023 0320 	bic.w	r3, r3, #32
 800bb14:	6093      	str	r3, [r2, #8]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800bb16:	6878      	ldr	r0, [r7, #4]
 800bb18:	f7ff ff82 	bl	800ba20 <HAL_RTC_WaitForSynchro>
 800bb1c:	4603      	mov	r3, r0
 800bb1e:	2b00      	cmp	r3, #0
 800bb20:	d005      	beq.n	800bb2e <RTC_ExitInitMode+0x62>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800bb22:	687b      	ldr	r3, [r7, #4]
 800bb24:	2203      	movs	r2, #3
 800bb26:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 800bb2a:	2303      	movs	r3, #3
 800bb2c:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 800bb2e:	4b05      	ldr	r3, [pc, #20]	; (800bb44 <RTC_ExitInitMode+0x78>)
 800bb30:	689b      	ldr	r3, [r3, #8]
 800bb32:	4a04      	ldr	r2, [pc, #16]	; (800bb44 <RTC_ExitInitMode+0x78>)
 800bb34:	f043 0320 	orr.w	r3, r3, #32
 800bb38:	6093      	str	r3, [r2, #8]
  }

  return status;
 800bb3a:	7bfb      	ldrb	r3, [r7, #15]
}
 800bb3c:	4618      	mov	r0, r3
 800bb3e:	3710      	adds	r7, #16
 800bb40:	46bd      	mov	sp, r7
 800bb42:	bd80      	pop	{r7, pc}
 800bb44:	58004000 	.word	0x58004000

0800bb48 <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 800bb48:	b480      	push	{r7}
 800bb4a:	b085      	sub	sp, #20
 800bb4c:	af00      	add	r7, sp, #0
 800bb4e:	4603      	mov	r3, r0
 800bb50:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 800bb52:	2300      	movs	r3, #0
 800bb54:	60fb      	str	r3, [r7, #12]
  uint8_t  bcdlow  = Value;
 800bb56:	79fb      	ldrb	r3, [r7, #7]
 800bb58:	72fb      	strb	r3, [r7, #11]

  while (bcdlow >= 10U)
 800bb5a:	e005      	b.n	800bb68 <RTC_ByteToBcd2+0x20>
  {
    bcdhigh++;
 800bb5c:	68fb      	ldr	r3, [r7, #12]
 800bb5e:	3301      	adds	r3, #1
 800bb60:	60fb      	str	r3, [r7, #12]
    bcdlow -= 10U;
 800bb62:	7afb      	ldrb	r3, [r7, #11]
 800bb64:	3b0a      	subs	r3, #10
 800bb66:	72fb      	strb	r3, [r7, #11]
  while (bcdlow >= 10U)
 800bb68:	7afb      	ldrb	r3, [r7, #11]
 800bb6a:	2b09      	cmp	r3, #9
 800bb6c:	d8f6      	bhi.n	800bb5c <RTC_ByteToBcd2+0x14>
  }

  return ((uint8_t)(bcdhigh << 4U) | bcdlow);
 800bb6e:	68fb      	ldr	r3, [r7, #12]
 800bb70:	b2db      	uxtb	r3, r3
 800bb72:	011b      	lsls	r3, r3, #4
 800bb74:	b2da      	uxtb	r2, r3
 800bb76:	7afb      	ldrb	r3, [r7, #11]
 800bb78:	4313      	orrs	r3, r2
 800bb7a:	b2db      	uxtb	r3, r3
}
 800bb7c:	4618      	mov	r0, r3
 800bb7e:	3714      	adds	r7, #20
 800bb80:	46bd      	mov	sp, r7
 800bb82:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb86:	4770      	bx	lr

0800bb88 <RTC_Bcd2ToByte>:
  * @brief  Convert from 2 digit BCD to Binary.
  * @param  Value BCD value to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 800bb88:	b480      	push	{r7}
 800bb8a:	b085      	sub	sp, #20
 800bb8c:	af00      	add	r7, sp, #0
 800bb8e:	4603      	mov	r3, r0
 800bb90:	71fb      	strb	r3, [r7, #7]
  uint8_t tmp;
  tmp = ((Value & 0xF0U) >> 4U) * 10U;
 800bb92:	79fb      	ldrb	r3, [r7, #7]
 800bb94:	091b      	lsrs	r3, r3, #4
 800bb96:	b2db      	uxtb	r3, r3
 800bb98:	461a      	mov	r2, r3
 800bb9a:	0092      	lsls	r2, r2, #2
 800bb9c:	4413      	add	r3, r2
 800bb9e:	005b      	lsls	r3, r3, #1
 800bba0:	73fb      	strb	r3, [r7, #15]
  return (tmp + (Value & 0x0FU));
 800bba2:	79fb      	ldrb	r3, [r7, #7]
 800bba4:	f003 030f 	and.w	r3, r3, #15
 800bba8:	b2da      	uxtb	r2, r3
 800bbaa:	7bfb      	ldrb	r3, [r7, #15]
 800bbac:	4413      	add	r3, r2
 800bbae:	b2db      	uxtb	r3, r3
}
 800bbb0:	4618      	mov	r0, r3
 800bbb2:	3714      	adds	r7, #20
 800bbb4:	46bd      	mov	sp, r7
 800bbb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbba:	4770      	bx	lr

0800bbbc <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 800bbbc:	b580      	push	{r7, lr}
 800bbbe:	b08a      	sub	sp, #40	; 0x28
 800bbc0:	af00      	add	r7, sp, #0
 800bbc2:	6078      	str	r0, [r7, #4]
  HAL_SD_CardStatusTypeDef CardStatus;
  uint32_t speedgrade, unitsize;
  uint32_t tickstart;

  /* Check the SD handle allocation */
  if(hsd == NULL)
 800bbc4:	687b      	ldr	r3, [r7, #4]
 800bbc6:	2b00      	cmp	r3, #0
 800bbc8:	d101      	bne.n	800bbce <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 800bbca:	2301      	movs	r3, #1
 800bbcc:	e07c      	b.n	800bcc8 <HAL_SD_Init+0x10c>
  assert_param(IS_SDMMC_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDMMC_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 800bbce:	687b      	ldr	r3, [r7, #4]
 800bbd0:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800bbd4:	b2db      	uxtb	r3, r3
 800bbd6:	2b00      	cmp	r3, #0
 800bbd8:	d10c      	bne.n	800bbf4 <HAL_SD_Init+0x38>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 800bbda:	687b      	ldr	r3, [r7, #4]
 800bbdc:	2200      	movs	r2, #0
 800bbde:	771a      	strb	r2, [r3, #28]

#if (USE_SD_TRANSCEIVER != 0U)
    /* Force  SDMMC_TRANSCEIVER_PRESENT for Legacy usage */
    if (hsd->Init.TranceiverPresent == SDMMC_TRANSCEIVER_UNKNOWN)
 800bbe0:	687b      	ldr	r3, [r7, #4]
 800bbe2:	699b      	ldr	r3, [r3, #24]
 800bbe4:	2b00      	cmp	r3, #0
 800bbe6:	d102      	bne.n	800bbee <HAL_SD_Init+0x32>
    {
      hsd->Init.TranceiverPresent = SDMMC_TRANSCEIVER_PRESENT;
 800bbe8:	687b      	ldr	r3, [r7, #4]
 800bbea:	2202      	movs	r2, #2
 800bbec:	619a      	str	r2, [r3, #24]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 800bbee:	6878      	ldr	r0, [r7, #4]
 800bbf0:	f7f7 f9e0 	bl	8002fb4 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 800bbf4:	687b      	ldr	r3, [r7, #4]
 800bbf6:	2203      	movs	r2, #3
 800bbf8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 800bbfc:	6878      	ldr	r0, [r7, #4]
 800bbfe:	f000 f867 	bl	800bcd0 <HAL_SD_InitCard>
 800bc02:	4603      	mov	r3, r0
 800bc04:	2b00      	cmp	r3, #0
 800bc06:	d001      	beq.n	800bc0c <HAL_SD_Init+0x50>
  {
    return HAL_ERROR;
 800bc08:	2301      	movs	r3, #1
 800bc0a:	e05d      	b.n	800bcc8 <HAL_SD_Init+0x10c>
  }

  if( HAL_SD_GetCardStatus(hsd, &CardStatus) != HAL_OK)
 800bc0c:	f107 0308 	add.w	r3, r7, #8
 800bc10:	4619      	mov	r1, r3
 800bc12:	6878      	ldr	r0, [r7, #4]
 800bc14:	f001 f8ce 	bl	800cdb4 <HAL_SD_GetCardStatus>
 800bc18:	4603      	mov	r3, r0
 800bc1a:	2b00      	cmp	r3, #0
 800bc1c:	d001      	beq.n	800bc22 <HAL_SD_Init+0x66>
  {
    return HAL_ERROR;
 800bc1e:	2301      	movs	r3, #1
 800bc20:	e052      	b.n	800bcc8 <HAL_SD_Init+0x10c>
  }
  /* Get Initial Card Speed from Card Status*/
  speedgrade = CardStatus.UhsSpeedGrade;
 800bc22:	7e3b      	ldrb	r3, [r7, #24]
 800bc24:	b2db      	uxtb	r3, r3
 800bc26:	627b      	str	r3, [r7, #36]	; 0x24
  unitsize = CardStatus.UhsAllocationUnitSize;
 800bc28:	7e7b      	ldrb	r3, [r7, #25]
 800bc2a:	b2db      	uxtb	r3, r3
 800bc2c:	623b      	str	r3, [r7, #32]
  if ((hsd->SdCard.CardType == CARD_SDHC_SDXC) && ((speedgrade != 0U) || (unitsize != 0U)))
 800bc2e:	687b      	ldr	r3, [r7, #4]
 800bc30:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bc32:	2b01      	cmp	r3, #1
 800bc34:	d10a      	bne.n	800bc4c <HAL_SD_Init+0x90>
 800bc36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bc38:	2b00      	cmp	r3, #0
 800bc3a:	d102      	bne.n	800bc42 <HAL_SD_Init+0x86>
 800bc3c:	6a3b      	ldr	r3, [r7, #32]
 800bc3e:	2b00      	cmp	r3, #0
 800bc40:	d004      	beq.n	800bc4c <HAL_SD_Init+0x90>
  {
    hsd->SdCard.CardSpeed = CARD_ULTRA_HIGH_SPEED;
 800bc42:	687b      	ldr	r3, [r7, #4]
 800bc44:	f44f 7200 	mov.w	r2, #512	; 0x200
 800bc48:	65da      	str	r2, [r3, #92]	; 0x5c
 800bc4a:	e00b      	b.n	800bc64 <HAL_SD_Init+0xa8>
  }
  else
  {
    if (hsd->SdCard.CardType == CARD_SDHC_SDXC)
 800bc4c:	687b      	ldr	r3, [r7, #4]
 800bc4e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bc50:	2b01      	cmp	r3, #1
 800bc52:	d104      	bne.n	800bc5e <HAL_SD_Init+0xa2>
    {
      hsd->SdCard.CardSpeed  = CARD_HIGH_SPEED;
 800bc54:	687b      	ldr	r3, [r7, #4]
 800bc56:	f44f 7280 	mov.w	r2, #256	; 0x100
 800bc5a:	65da      	str	r2, [r3, #92]	; 0x5c
 800bc5c:	e002      	b.n	800bc64 <HAL_SD_Init+0xa8>
    }
    else
    {
      hsd->SdCard.CardSpeed  = CARD_NORMAL_SPEED;
 800bc5e:	687b      	ldr	r3, [r7, #4]
 800bc60:	2200      	movs	r2, #0
 800bc62:	65da      	str	r2, [r3, #92]	; 0x5c
    }

  }
  /* Configure the bus wide */
  if(HAL_SD_ConfigWideBusOperation(hsd, hsd->Init.BusWide) != HAL_OK)
 800bc64:	687b      	ldr	r3, [r7, #4]
 800bc66:	68db      	ldr	r3, [r3, #12]
 800bc68:	4619      	mov	r1, r3
 800bc6a:	6878      	ldr	r0, [r7, #4]
 800bc6c:	f001 f984 	bl	800cf78 <HAL_SD_ConfigWideBusOperation>
 800bc70:	4603      	mov	r3, r0
 800bc72:	2b00      	cmp	r3, #0
 800bc74:	d001      	beq.n	800bc7a <HAL_SD_Init+0xbe>
  {
    return HAL_ERROR;
 800bc76:	2301      	movs	r3, #1
 800bc78:	e026      	b.n	800bcc8 <HAL_SD_Init+0x10c>
  }

  /* Verify that SD card is ready to use after Initialization */
  tickstart = HAL_GetTick();
 800bc7a:	f7f7 fd3d 	bl	80036f8 <HAL_GetTick>
 800bc7e:	61f8      	str	r0, [r7, #28]
  while((HAL_SD_GetCardState(hsd) != HAL_SD_CARD_TRANSFER))
 800bc80:	e011      	b.n	800bca6 <HAL_SD_Init+0xea>
  {
    if((HAL_GetTick()-tickstart) >=  SDMMC_DATATIMEOUT)
 800bc82:	f7f7 fd39 	bl	80036f8 <HAL_GetTick>
 800bc86:	4602      	mov	r2, r0
 800bc88:	69fb      	ldr	r3, [r7, #28]
 800bc8a:	1ad3      	subs	r3, r2, r3
 800bc8c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bc90:	d109      	bne.n	800bca6 <HAL_SD_Init+0xea>
    {
      hsd->ErrorCode = HAL_SD_ERROR_TIMEOUT;
 800bc92:	687b      	ldr	r3, [r7, #4]
 800bc94:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800bc98:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State= HAL_SD_STATE_READY;
 800bc9a:	687b      	ldr	r3, [r7, #4]
 800bc9c:	2201      	movs	r2, #1
 800bc9e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_TIMEOUT;
 800bca2:	2303      	movs	r3, #3
 800bca4:	e010      	b.n	800bcc8 <HAL_SD_Init+0x10c>
  while((HAL_SD_GetCardState(hsd) != HAL_SD_CARD_TRANSFER))
 800bca6:	6878      	ldr	r0, [r7, #4]
 800bca8:	f001 fa10 	bl	800d0cc <HAL_SD_GetCardState>
 800bcac:	4603      	mov	r3, r0
 800bcae:	2b04      	cmp	r3, #4
 800bcb0:	d1e7      	bne.n	800bc82 <HAL_SD_Init+0xc6>
    }
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800bcb2:	687b      	ldr	r3, [r7, #4]
 800bcb4:	2200      	movs	r2, #0
 800bcb6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 800bcb8:	687b      	ldr	r3, [r7, #4]
 800bcba:	2200      	movs	r2, #0
 800bcbc:	631a      	str	r2, [r3, #48]	; 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 800bcbe:	687b      	ldr	r3, [r7, #4]
 800bcc0:	2201      	movs	r2, #1
 800bcc2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 800bcc6:	2300      	movs	r3, #0
}
 800bcc8:	4618      	mov	r0, r3
 800bcca:	3728      	adds	r7, #40	; 0x28
 800bccc:	46bd      	mov	sp, r7
 800bcce:	bd80      	pop	{r7, pc}

0800bcd0 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 800bcd0:	b5b0      	push	{r4, r5, r7, lr}
 800bcd2:	b08e      	sub	sp, #56	; 0x38
 800bcd4:	af04      	add	r7, sp, #16
 800bcd6:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  SD_InitTypeDef Init;
  uint32_t sdmmc_clk;

  /* Default SDMMC peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 800bcd8:	2300      	movs	r3, #0
 800bcda:	60bb      	str	r3, [r7, #8]
  Init.ClockPowerSave      = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 800bcdc:	2300      	movs	r3, #0
 800bcde:	60fb      	str	r3, [r7, #12]
  Init.BusWide             = SDMMC_BUS_WIDE_1B;
 800bce0:	2300      	movs	r3, #0
 800bce2:	613b      	str	r3, [r7, #16]
  Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 800bce4:	2300      	movs	r3, #0
 800bce6:	617b      	str	r3, [r7, #20]

  /* Init Clock should be less or equal to 400Khz*/
  sdmmc_clk     = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC);
 800bce8:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 800bcec:	f7fe fc7a 	bl	800a5e4 <HAL_RCCEx_GetPeriphCLKFreq>
 800bcf0:	6278      	str	r0, [r7, #36]	; 0x24
  Init.ClockDiv = sdmmc_clk/(2U*400000U);
 800bcf2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bcf4:	0a1b      	lsrs	r3, r3, #8
 800bcf6:	4a40      	ldr	r2, [pc, #256]	; (800bdf8 <HAL_SD_InitCard+0x128>)
 800bcf8:	fba2 2303 	umull	r2, r3, r2, r3
 800bcfc:	091b      	lsrs	r3, r3, #4
 800bcfe:	61bb      	str	r3, [r7, #24]

#if (USE_SD_TRANSCEIVER != 0U)
  if (hsd->Init.TranceiverPresent == SDMMC_TRANSCEIVER_PRESENT)
 800bd00:	687b      	ldr	r3, [r7, #4]
 800bd02:	699b      	ldr	r3, [r3, #24]
 800bd04:	2b02      	cmp	r3, #2
 800bd06:	d107      	bne.n	800bd18 <HAL_SD_InitCard+0x48>
  {
    /* Set Transceiver polarity */
    hsd->Instance->POWER |= SDMMC_POWER_DIRPOL;
 800bd08:	687b      	ldr	r3, [r7, #4]
 800bd0a:	681b      	ldr	r3, [r3, #0]
 800bd0c:	681a      	ldr	r2, [r3, #0]
 800bd0e:	687b      	ldr	r3, [r7, #4]
 800bd10:	681b      	ldr	r3, [r3, #0]
 800bd12:	f042 0210 	orr.w	r2, r2, #16
 800bd16:	601a      	str	r2, [r3, #0]
    /* Set Transceiver polarity */
    hsd->Instance->POWER |= SDMMC_POWER_DIRPOL;
#endif /* USE_SD_TRANSCEIVER  */

  /* Initialize SDMMC peripheral interface with default configuration */
  (void)SDMMC_Init(hsd->Instance, Init);
 800bd18:	687b      	ldr	r3, [r7, #4]
 800bd1a:	681d      	ldr	r5, [r3, #0]
 800bd1c:	466c      	mov	r4, sp
 800bd1e:	f107 0314 	add.w	r3, r7, #20
 800bd22:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800bd26:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800bd2a:	f107 0308 	add.w	r3, r7, #8
 800bd2e:	cb0e      	ldmia	r3, {r1, r2, r3}
 800bd30:	4628      	mov	r0, r5
 800bd32:	f004 f9f5 	bl	8010120 <SDMMC_Init>

  /* Set Power State to ON */
  (void)SDMMC_PowerState_ON(hsd->Instance);
 800bd36:	687b      	ldr	r3, [r7, #4]
 800bd38:	681b      	ldr	r3, [r3, #0]
 800bd3a:	4618      	mov	r0, r3
 800bd3c:	f004 fa38 	bl	80101b0 <SDMMC_PowerState_ON>

  /* wait 74 Cycles: required power up waiting time before starting
     the SD initialization sequence */
  sdmmc_clk = sdmmc_clk/(2U*Init.ClockDiv);
 800bd40:	69bb      	ldr	r3, [r7, #24]
 800bd42:	005b      	lsls	r3, r3, #1
 800bd44:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800bd46:	fbb2 f3f3 	udiv	r3, r2, r3
 800bd4a:	627b      	str	r3, [r7, #36]	; 0x24

  if(sdmmc_clk != 0U)
 800bd4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bd4e:	2b00      	cmp	r3, #0
 800bd50:	d008      	beq.n	800bd64 <HAL_SD_InitCard+0x94>
  {
    HAL_Delay(1U+ (74U*1000U/(sdmmc_clk)));
 800bd52:	4a2a      	ldr	r2, [pc, #168]	; (800bdfc <HAL_SD_InitCard+0x12c>)
 800bd54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bd56:	fbb2 f3f3 	udiv	r3, r2, r3
 800bd5a:	3301      	adds	r3, #1
 800bd5c:	4618      	mov	r0, r3
 800bd5e:	f7f7 fcd7 	bl	8003710 <HAL_Delay>
 800bd62:	e002      	b.n	800bd6a <HAL_SD_InitCard+0x9a>
  }
  else
  {
    HAL_Delay(2U);
 800bd64:	2002      	movs	r0, #2
 800bd66:	f7f7 fcd3 	bl	8003710 <HAL_Delay>
  }

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 800bd6a:	6878      	ldr	r0, [r7, #4]
 800bd6c:	f001 fa8c 	bl	800d288 <SD_PowerON>
 800bd70:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800bd72:	6a3b      	ldr	r3, [r7, #32]
 800bd74:	2b00      	cmp	r3, #0
 800bd76:	d00b      	beq.n	800bd90 <HAL_SD_InitCard+0xc0>
  {
    hsd->State = HAL_SD_STATE_READY;
 800bd78:	687b      	ldr	r3, [r7, #4]
 800bd7a:	2201      	movs	r2, #1
 800bd7c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 800bd80:	687b      	ldr	r3, [r7, #4]
 800bd82:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800bd84:	6a3b      	ldr	r3, [r7, #32]
 800bd86:	431a      	orrs	r2, r3
 800bd88:	687b      	ldr	r3, [r7, #4]
 800bd8a:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800bd8c:	2301      	movs	r3, #1
 800bd8e:	e02e      	b.n	800bdee <HAL_SD_InitCard+0x11e>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 800bd90:	6878      	ldr	r0, [r7, #4]
 800bd92:	f001 f9bb 	bl	800d10c <SD_InitCard>
 800bd96:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800bd98:	6a3b      	ldr	r3, [r7, #32]
 800bd9a:	2b00      	cmp	r3, #0
 800bd9c:	d00b      	beq.n	800bdb6 <HAL_SD_InitCard+0xe6>
  {
    hsd->State = HAL_SD_STATE_READY;
 800bd9e:	687b      	ldr	r3, [r7, #4]
 800bda0:	2201      	movs	r2, #1
 800bda2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 800bda6:	687b      	ldr	r3, [r7, #4]
 800bda8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800bdaa:	6a3b      	ldr	r3, [r7, #32]
 800bdac:	431a      	orrs	r2, r3
 800bdae:	687b      	ldr	r3, [r7, #4]
 800bdb0:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800bdb2:	2301      	movs	r3, #1
 800bdb4:	e01b      	b.n	800bdee <HAL_SD_InitCard+0x11e>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800bdb6:	687b      	ldr	r3, [r7, #4]
 800bdb8:	681b      	ldr	r3, [r3, #0]
 800bdba:	f44f 7100 	mov.w	r1, #512	; 0x200
 800bdbe:	4618      	mov	r0, r3
 800bdc0:	f004 fa8c 	bl	80102dc <SDMMC_CmdBlockLength>
 800bdc4:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800bdc6:	6a3b      	ldr	r3, [r7, #32]
 800bdc8:	2b00      	cmp	r3, #0
 800bdca:	d00f      	beq.n	800bdec <HAL_SD_InitCard+0x11c>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800bdcc:	687b      	ldr	r3, [r7, #4]
 800bdce:	681b      	ldr	r3, [r3, #0]
 800bdd0:	4a0b      	ldr	r2, [pc, #44]	; (800be00 <HAL_SD_InitCard+0x130>)
 800bdd2:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 800bdd4:	687b      	ldr	r3, [r7, #4]
 800bdd6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800bdd8:	6a3b      	ldr	r3, [r7, #32]
 800bdda:	431a      	orrs	r2, r3
 800bddc:	687b      	ldr	r3, [r7, #4]
 800bdde:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 800bde0:	687b      	ldr	r3, [r7, #4]
 800bde2:	2201      	movs	r2, #1
 800bde4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 800bde8:	2301      	movs	r3, #1
 800bdea:	e000      	b.n	800bdee <HAL_SD_InitCard+0x11e>
  }

  return HAL_OK;
 800bdec:	2300      	movs	r3, #0
}
 800bdee:	4618      	mov	r0, r3
 800bdf0:	3728      	adds	r7, #40	; 0x28
 800bdf2:	46bd      	mov	sp, r7
 800bdf4:	bdb0      	pop	{r4, r5, r7, pc}
 800bdf6:	bf00      	nop
 800bdf8:	014f8b59 	.word	0x014f8b59
 800bdfc:	00012110 	.word	0x00012110
 800be00:	1fe00fff 	.word	0x1fe00fff

0800be04 <HAL_SD_ReadBlocks>:
  * @param  NumberOfBlocks: Number of SD blocks to read
  * @param  Timeout: Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks, uint32_t Timeout)
{
 800be04:	b580      	push	{r7, lr}
 800be06:	b092      	sub	sp, #72	; 0x48
 800be08:	af00      	add	r7, sp, #0
 800be0a:	60f8      	str	r0, [r7, #12]
 800be0c:	60b9      	str	r1, [r7, #8]
 800be0e:	607a      	str	r2, [r7, #4]
 800be10:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800be12:	f7f7 fc71 	bl	80036f8 <HAL_GetTick>
 800be16:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t count, data, dataremaining;
  uint32_t add = BlockAdd;
 800be18:	687b      	ldr	r3, [r7, #4]
 800be1a:	63bb      	str	r3, [r7, #56]	; 0x38
  uint8_t *tempbuff = pData;
 800be1c:	68bb      	ldr	r3, [r7, #8]
 800be1e:	637b      	str	r3, [r7, #52]	; 0x34

  if(NULL == pData)
 800be20:	68bb      	ldr	r3, [r7, #8]
 800be22:	2b00      	cmp	r3, #0
 800be24:	d107      	bne.n	800be36 <HAL_SD_ReadBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800be26:	68fb      	ldr	r3, [r7, #12]
 800be28:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800be2a:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800be2e:	68fb      	ldr	r3, [r7, #12]
 800be30:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800be32:	2301      	movs	r3, #1
 800be34:	e167      	b.n	800c106 <HAL_SD_ReadBlocks+0x302>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 800be36:	68fb      	ldr	r3, [r7, #12]
 800be38:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800be3c:	b2db      	uxtb	r3, r3
 800be3e:	2b01      	cmp	r3, #1
 800be40:	f040 815a 	bne.w	800c0f8 <HAL_SD_ReadBlocks+0x2f4>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800be44:	68fb      	ldr	r3, [r7, #12]
 800be46:	2200      	movs	r2, #0
 800be48:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800be4a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800be4c:	683b      	ldr	r3, [r7, #0]
 800be4e:	441a      	add	r2, r3
 800be50:	68fb      	ldr	r3, [r7, #12]
 800be52:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800be54:	429a      	cmp	r2, r3
 800be56:	d907      	bls.n	800be68 <HAL_SD_ReadBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800be58:	68fb      	ldr	r3, [r7, #12]
 800be5a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800be5c:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800be60:	68fb      	ldr	r3, [r7, #12]
 800be62:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 800be64:	2301      	movs	r3, #1
 800be66:	e14e      	b.n	800c106 <HAL_SD_ReadBlocks+0x302>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 800be68:	68fb      	ldr	r3, [r7, #12]
 800be6a:	2203      	movs	r2, #3
 800be6c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 800be70:	68fb      	ldr	r3, [r7, #12]
 800be72:	681b      	ldr	r3, [r3, #0]
 800be74:	2200      	movs	r2, #0
 800be76:	62da      	str	r2, [r3, #44]	; 0x2c

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800be78:	68fb      	ldr	r3, [r7, #12]
 800be7a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800be7c:	2b01      	cmp	r3, #1
 800be7e:	d002      	beq.n	800be86 <HAL_SD_ReadBlocks+0x82>
    {
      add *= 512U;
 800be80:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800be82:	025b      	lsls	r3, r3, #9
 800be84:	63bb      	str	r3, [r7, #56]	; 0x38
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800be86:	f04f 33ff 	mov.w	r3, #4294967295
 800be8a:	617b      	str	r3, [r7, #20]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 800be8c:	683b      	ldr	r3, [r7, #0]
 800be8e:	025b      	lsls	r3, r3, #9
 800be90:	61bb      	str	r3, [r7, #24]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 800be92:	2390      	movs	r3, #144	; 0x90
 800be94:	61fb      	str	r3, [r7, #28]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 800be96:	2302      	movs	r3, #2
 800be98:	623b      	str	r3, [r7, #32]
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800be9a:	2300      	movs	r3, #0
 800be9c:	627b      	str	r3, [r7, #36]	; 0x24
    config.DPSM          = SDMMC_DPSM_DISABLE;
 800be9e:	2300      	movs	r3, #0
 800bea0:	62bb      	str	r3, [r7, #40]	; 0x28
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 800bea2:	68fb      	ldr	r3, [r7, #12]
 800bea4:	681b      	ldr	r3, [r3, #0]
 800bea6:	f107 0214 	add.w	r2, r7, #20
 800beaa:	4611      	mov	r1, r2
 800beac:	4618      	mov	r0, r3
 800beae:	f004 f9e9 	bl	8010284 <SDMMC_ConfigData>
    __SDMMC_CMDTRANS_ENABLE( hsd->Instance);
 800beb2:	68fb      	ldr	r3, [r7, #12]
 800beb4:	681b      	ldr	r3, [r3, #0]
 800beb6:	68da      	ldr	r2, [r3, #12]
 800beb8:	68fb      	ldr	r3, [r7, #12]
 800beba:	681b      	ldr	r3, [r3, #0]
 800bebc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800bec0:	60da      	str	r2, [r3, #12]

    /* Read block(s) in polling mode */
    if(NumberOfBlocks > 1U)
 800bec2:	683b      	ldr	r3, [r7, #0]
 800bec4:	2b01      	cmp	r3, #1
 800bec6:	d90a      	bls.n	800bede <HAL_SD_ReadBlocks+0xda>
    {
      hsd->Context = SD_CONTEXT_READ_MULTIPLE_BLOCK;
 800bec8:	68fb      	ldr	r3, [r7, #12]
 800beca:	2202      	movs	r2, #2
 800becc:	631a      	str	r2, [r3, #48]	; 0x30

      /* Read Multi Block command */
      errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 800bece:	68fb      	ldr	r3, [r7, #12]
 800bed0:	681b      	ldr	r3, [r3, #0]
 800bed2:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800bed4:	4618      	mov	r0, r3
 800bed6:	f004 fa47 	bl	8010368 <SDMMC_CmdReadMultiBlock>
 800beda:	6478      	str	r0, [r7, #68]	; 0x44
 800bedc:	e009      	b.n	800bef2 <HAL_SD_ReadBlocks+0xee>
    }
    else
    {
      hsd->Context = SD_CONTEXT_READ_SINGLE_BLOCK;
 800bede:	68fb      	ldr	r3, [r7, #12]
 800bee0:	2201      	movs	r2, #1
 800bee2:	631a      	str	r2, [r3, #48]	; 0x30

      /* Read Single Block command */
      errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 800bee4:	68fb      	ldr	r3, [r7, #12]
 800bee6:	681b      	ldr	r3, [r3, #0]
 800bee8:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800beea:	4618      	mov	r0, r3
 800beec:	f004 fa19 	bl	8010322 <SDMMC_CmdReadSingleBlock>
 800bef0:	6478      	str	r0, [r7, #68]	; 0x44
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 800bef2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800bef4:	2b00      	cmp	r3, #0
 800bef6:	d012      	beq.n	800bf1e <HAL_SD_ReadBlocks+0x11a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800bef8:	68fb      	ldr	r3, [r7, #12]
 800befa:	681b      	ldr	r3, [r3, #0]
 800befc:	4a84      	ldr	r2, [pc, #528]	; (800c110 <HAL_SD_ReadBlocks+0x30c>)
 800befe:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 800bf00:	68fb      	ldr	r3, [r7, #12]
 800bf02:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800bf04:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800bf06:	431a      	orrs	r2, r3
 800bf08:	68fb      	ldr	r3, [r7, #12]
 800bf0a:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800bf0c:	68fb      	ldr	r3, [r7, #12]
 800bf0e:	2201      	movs	r2, #1
 800bf10:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800bf14:	68fb      	ldr	r3, [r7, #12]
 800bf16:	2200      	movs	r2, #0
 800bf18:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800bf1a:	2301      	movs	r3, #1
 800bf1c:	e0f3      	b.n	800c106 <HAL_SD_ReadBlocks+0x302>
    }

    /* Poll on SDMMC flags */
    dataremaining = config.DataLength;
 800bf1e:	69bb      	ldr	r3, [r7, #24]
 800bf20:	63fb      	str	r3, [r7, #60]	; 0x3c
    while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 800bf22:	e058      	b.n	800bfd6 <HAL_SD_ReadBlocks+0x1d2>
    {
      if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF) && (dataremaining >= 32U))
 800bf24:	68fb      	ldr	r3, [r7, #12]
 800bf26:	681b      	ldr	r3, [r3, #0]
 800bf28:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bf2a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800bf2e:	2b00      	cmp	r3, #0
 800bf30:	d033      	beq.n	800bf9a <HAL_SD_ReadBlocks+0x196>
 800bf32:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bf34:	2b1f      	cmp	r3, #31
 800bf36:	d930      	bls.n	800bf9a <HAL_SD_ReadBlocks+0x196>
      {
        /* Read data from SDMMC Rx FIFO */
        for(count = 0U; count < 8U; count++)
 800bf38:	2300      	movs	r3, #0
 800bf3a:	643b      	str	r3, [r7, #64]	; 0x40
 800bf3c:	e027      	b.n	800bf8e <HAL_SD_ReadBlocks+0x18a>
        {
          data = SDMMC_ReadFIFO(hsd->Instance);
 800bf3e:	68fb      	ldr	r3, [r7, #12]
 800bf40:	681b      	ldr	r3, [r3, #0]
 800bf42:	4618      	mov	r0, r3
 800bf44:	f004 f916 	bl	8010174 <SDMMC_ReadFIFO>
 800bf48:	62f8      	str	r0, [r7, #44]	; 0x2c
          *tempbuff = (uint8_t)(data & 0xFFU);
 800bf4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bf4c:	b2da      	uxtb	r2, r3
 800bf4e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bf50:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 800bf52:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bf54:	3301      	adds	r3, #1
 800bf56:	637b      	str	r3, [r7, #52]	; 0x34
          *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
 800bf58:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bf5a:	0a1b      	lsrs	r3, r3, #8
 800bf5c:	b2da      	uxtb	r2, r3
 800bf5e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bf60:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 800bf62:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bf64:	3301      	adds	r3, #1
 800bf66:	637b      	str	r3, [r7, #52]	; 0x34
          *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
 800bf68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bf6a:	0c1b      	lsrs	r3, r3, #16
 800bf6c:	b2da      	uxtb	r2, r3
 800bf6e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bf70:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 800bf72:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bf74:	3301      	adds	r3, #1
 800bf76:	637b      	str	r3, [r7, #52]	; 0x34
          *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
 800bf78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bf7a:	0e1b      	lsrs	r3, r3, #24
 800bf7c:	b2da      	uxtb	r2, r3
 800bf7e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bf80:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 800bf82:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bf84:	3301      	adds	r3, #1
 800bf86:	637b      	str	r3, [r7, #52]	; 0x34
        for(count = 0U; count < 8U; count++)
 800bf88:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800bf8a:	3301      	adds	r3, #1
 800bf8c:	643b      	str	r3, [r7, #64]	; 0x40
 800bf8e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800bf90:	2b07      	cmp	r3, #7
 800bf92:	d9d4      	bls.n	800bf3e <HAL_SD_ReadBlocks+0x13a>
        }
        dataremaining -= 32U;
 800bf94:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bf96:	3b20      	subs	r3, #32
 800bf98:	63fb      	str	r3, [r7, #60]	; 0x3c
      }

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 800bf9a:	f7f7 fbad 	bl	80036f8 <HAL_GetTick>
 800bf9e:	4602      	mov	r2, r0
 800bfa0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bfa2:	1ad3      	subs	r3, r2, r3
 800bfa4:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800bfa6:	429a      	cmp	r2, r3
 800bfa8:	d902      	bls.n	800bfb0 <HAL_SD_ReadBlocks+0x1ac>
 800bfaa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800bfac:	2b00      	cmp	r3, #0
 800bfae:	d112      	bne.n	800bfd6 <HAL_SD_ReadBlocks+0x1d2>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800bfb0:	68fb      	ldr	r3, [r7, #12]
 800bfb2:	681b      	ldr	r3, [r3, #0]
 800bfb4:	4a56      	ldr	r2, [pc, #344]	; (800c110 <HAL_SD_ReadBlocks+0x30c>)
 800bfb6:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 800bfb8:	68fb      	ldr	r3, [r7, #12]
 800bfba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bfbc:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 800bfc0:	68fb      	ldr	r3, [r7, #12]
 800bfc2:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State= HAL_SD_STATE_READY;
 800bfc4:	68fb      	ldr	r3, [r7, #12]
 800bfc6:	2201      	movs	r2, #1
 800bfc8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 800bfcc:	68fb      	ldr	r3, [r7, #12]
 800bfce:	2200      	movs	r2, #0
 800bfd0:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_TIMEOUT;
 800bfd2:	2303      	movs	r3, #3
 800bfd4:	e097      	b.n	800c106 <HAL_SD_ReadBlocks+0x302>
    while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 800bfd6:	68fb      	ldr	r3, [r7, #12]
 800bfd8:	681b      	ldr	r3, [r3, #0]
 800bfda:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bfdc:	f403 7395 	and.w	r3, r3, #298	; 0x12a
 800bfe0:	2b00      	cmp	r3, #0
 800bfe2:	d09f      	beq.n	800bf24 <HAL_SD_ReadBlocks+0x120>
      }
    }
    __SDMMC_CMDTRANS_DISABLE( hsd->Instance);
 800bfe4:	68fb      	ldr	r3, [r7, #12]
 800bfe6:	681b      	ldr	r3, [r3, #0]
 800bfe8:	68da      	ldr	r2, [r3, #12]
 800bfea:	68fb      	ldr	r3, [r7, #12]
 800bfec:	681b      	ldr	r3, [r3, #0]
 800bfee:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800bff2:	60da      	str	r2, [r3, #12]

    /* Send stop transmission command in case of multiblock read */
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 800bff4:	68fb      	ldr	r3, [r7, #12]
 800bff6:	681b      	ldr	r3, [r3, #0]
 800bff8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bffa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800bffe:	2b00      	cmp	r3, #0
 800c000:	d022      	beq.n	800c048 <HAL_SD_ReadBlocks+0x244>
 800c002:	683b      	ldr	r3, [r7, #0]
 800c004:	2b01      	cmp	r3, #1
 800c006:	d91f      	bls.n	800c048 <HAL_SD_ReadBlocks+0x244>
    {
      if(hsd->SdCard.CardType != CARD_SECURED)
 800c008:	68fb      	ldr	r3, [r7, #12]
 800c00a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c00c:	2b03      	cmp	r3, #3
 800c00e:	d01b      	beq.n	800c048 <HAL_SD_ReadBlocks+0x244>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800c010:	68fb      	ldr	r3, [r7, #12]
 800c012:	681b      	ldr	r3, [r3, #0]
 800c014:	4618      	mov	r0, r3
 800c016:	f004 fa11 	bl	801043c <SDMMC_CmdStopTransfer>
 800c01a:	6478      	str	r0, [r7, #68]	; 0x44
        if(errorstate != HAL_SD_ERROR_NONE)
 800c01c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c01e:	2b00      	cmp	r3, #0
 800c020:	d012      	beq.n	800c048 <HAL_SD_ReadBlocks+0x244>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800c022:	68fb      	ldr	r3, [r7, #12]
 800c024:	681b      	ldr	r3, [r3, #0]
 800c026:	4a3a      	ldr	r2, [pc, #232]	; (800c110 <HAL_SD_ReadBlocks+0x30c>)
 800c028:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->ErrorCode |= errorstate;
 800c02a:	68fb      	ldr	r3, [r7, #12]
 800c02c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800c02e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c030:	431a      	orrs	r2, r3
 800c032:	68fb      	ldr	r3, [r7, #12]
 800c034:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->State = HAL_SD_STATE_READY;
 800c036:	68fb      	ldr	r3, [r7, #12]
 800c038:	2201      	movs	r2, #1
 800c03a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          hsd->Context = SD_CONTEXT_NONE;
 800c03e:	68fb      	ldr	r3, [r7, #12]
 800c040:	2200      	movs	r2, #0
 800c042:	631a      	str	r2, [r3, #48]	; 0x30
          return HAL_ERROR;
 800c044:	2301      	movs	r3, #1
 800c046:	e05e      	b.n	800c106 <HAL_SD_ReadBlocks+0x302>
        }
      }
    }

    /* Get error state */
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 800c048:	68fb      	ldr	r3, [r7, #12]
 800c04a:	681b      	ldr	r3, [r3, #0]
 800c04c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c04e:	f003 0308 	and.w	r3, r3, #8
 800c052:	2b00      	cmp	r3, #0
 800c054:	d012      	beq.n	800c07c <HAL_SD_ReadBlocks+0x278>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800c056:	68fb      	ldr	r3, [r7, #12]
 800c058:	681b      	ldr	r3, [r3, #0]
 800c05a:	4a2d      	ldr	r2, [pc, #180]	; (800c110 <HAL_SD_ReadBlocks+0x30c>)
 800c05c:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 800c05e:	68fb      	ldr	r3, [r7, #12]
 800c060:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c062:	f043 0208 	orr.w	r2, r3, #8
 800c066:	68fb      	ldr	r3, [r7, #12]
 800c068:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800c06a:	68fb      	ldr	r3, [r7, #12]
 800c06c:	2201      	movs	r2, #1
 800c06e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800c072:	68fb      	ldr	r3, [r7, #12]
 800c074:	2200      	movs	r2, #0
 800c076:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800c078:	2301      	movs	r3, #1
 800c07a:	e044      	b.n	800c106 <HAL_SD_ReadBlocks+0x302>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 800c07c:	68fb      	ldr	r3, [r7, #12]
 800c07e:	681b      	ldr	r3, [r3, #0]
 800c080:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c082:	f003 0302 	and.w	r3, r3, #2
 800c086:	2b00      	cmp	r3, #0
 800c088:	d012      	beq.n	800c0b0 <HAL_SD_ReadBlocks+0x2ac>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800c08a:	68fb      	ldr	r3, [r7, #12]
 800c08c:	681b      	ldr	r3, [r3, #0]
 800c08e:	4a20      	ldr	r2, [pc, #128]	; (800c110 <HAL_SD_ReadBlocks+0x30c>)
 800c090:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 800c092:	68fb      	ldr	r3, [r7, #12]
 800c094:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c096:	f043 0202 	orr.w	r2, r3, #2
 800c09a:	68fb      	ldr	r3, [r7, #12]
 800c09c:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800c09e:	68fb      	ldr	r3, [r7, #12]
 800c0a0:	2201      	movs	r2, #1
 800c0a2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800c0a6:	68fb      	ldr	r3, [r7, #12]
 800c0a8:	2200      	movs	r2, #0
 800c0aa:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800c0ac:	2301      	movs	r3, #1
 800c0ae:	e02a      	b.n	800c106 <HAL_SD_ReadBlocks+0x302>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 800c0b0:	68fb      	ldr	r3, [r7, #12]
 800c0b2:	681b      	ldr	r3, [r3, #0]
 800c0b4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c0b6:	f003 0320 	and.w	r3, r3, #32
 800c0ba:	2b00      	cmp	r3, #0
 800c0bc:	d012      	beq.n	800c0e4 <HAL_SD_ReadBlocks+0x2e0>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800c0be:	68fb      	ldr	r3, [r7, #12]
 800c0c0:	681b      	ldr	r3, [r3, #0]
 800c0c2:	4a13      	ldr	r2, [pc, #76]	; (800c110 <HAL_SD_ReadBlocks+0x30c>)
 800c0c4:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 800c0c6:	68fb      	ldr	r3, [r7, #12]
 800c0c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c0ca:	f043 0220 	orr.w	r2, r3, #32
 800c0ce:	68fb      	ldr	r3, [r7, #12]
 800c0d0:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800c0d2:	68fb      	ldr	r3, [r7, #12]
 800c0d4:	2201      	movs	r2, #1
 800c0d6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800c0da:	68fb      	ldr	r3, [r7, #12]
 800c0dc:	2200      	movs	r2, #0
 800c0de:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800c0e0:	2301      	movs	r3, #1
 800c0e2:	e010      	b.n	800c106 <HAL_SD_ReadBlocks+0x302>
    {
      /* Nothing to do */
    }

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800c0e4:	68fb      	ldr	r3, [r7, #12]
 800c0e6:	681b      	ldr	r3, [r3, #0]
 800c0e8:	4a0a      	ldr	r2, [pc, #40]	; (800c114 <HAL_SD_ReadBlocks+0x310>)
 800c0ea:	639a      	str	r2, [r3, #56]	; 0x38

    hsd->State = HAL_SD_STATE_READY;
 800c0ec:	68fb      	ldr	r3, [r7, #12]
 800c0ee:	2201      	movs	r2, #1
 800c0f0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_OK;
 800c0f4:	2300      	movs	r3, #0
 800c0f6:	e006      	b.n	800c106 <HAL_SD_ReadBlocks+0x302>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 800c0f8:	68fb      	ldr	r3, [r7, #12]
 800c0fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c0fc:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800c100:	68fb      	ldr	r3, [r7, #12]
 800c102:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800c104:	2301      	movs	r3, #1
  }
}
 800c106:	4618      	mov	r0, r3
 800c108:	3748      	adds	r7, #72	; 0x48
 800c10a:	46bd      	mov	sp, r7
 800c10c:	bd80      	pop	{r7, pc}
 800c10e:	bf00      	nop
 800c110:	1fe00fff 	.word	0x1fe00fff
 800c114:	18000f3a 	.word	0x18000f3a

0800c118 <HAL_SD_WriteBlocks>:
  * @param  NumberOfBlocks: Number of SD blocks to write
  * @param  Timeout: Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks, uint32_t Timeout)
{
 800c118:	b580      	push	{r7, lr}
 800c11a:	b092      	sub	sp, #72	; 0x48
 800c11c:	af00      	add	r7, sp, #0
 800c11e:	60f8      	str	r0, [r7, #12]
 800c120:	60b9      	str	r1, [r7, #8]
 800c122:	607a      	str	r2, [r7, #4]
 800c124:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800c126:	f7f7 fae7 	bl	80036f8 <HAL_GetTick>
 800c12a:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t count, data, dataremaining;
  uint32_t add = BlockAdd;
 800c12c:	687b      	ldr	r3, [r7, #4]
 800c12e:	63bb      	str	r3, [r7, #56]	; 0x38
  uint8_t *tempbuff = pData;
 800c130:	68bb      	ldr	r3, [r7, #8]
 800c132:	637b      	str	r3, [r7, #52]	; 0x34

  if(NULL == pData)
 800c134:	68bb      	ldr	r3, [r7, #8]
 800c136:	2b00      	cmp	r3, #0
 800c138:	d107      	bne.n	800c14a <HAL_SD_WriteBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800c13a:	68fb      	ldr	r3, [r7, #12]
 800c13c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c13e:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800c142:	68fb      	ldr	r3, [r7, #12]
 800c144:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800c146:	2301      	movs	r3, #1
 800c148:	e16b      	b.n	800c422 <HAL_SD_WriteBlocks+0x30a>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 800c14a:	68fb      	ldr	r3, [r7, #12]
 800c14c:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800c150:	b2db      	uxtb	r3, r3
 800c152:	2b01      	cmp	r3, #1
 800c154:	f040 815e 	bne.w	800c414 <HAL_SD_WriteBlocks+0x2fc>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800c158:	68fb      	ldr	r3, [r7, #12]
 800c15a:	2200      	movs	r2, #0
 800c15c:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800c15e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800c160:	683b      	ldr	r3, [r7, #0]
 800c162:	441a      	add	r2, r3
 800c164:	68fb      	ldr	r3, [r7, #12]
 800c166:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c168:	429a      	cmp	r2, r3
 800c16a:	d907      	bls.n	800c17c <HAL_SD_WriteBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800c16c:	68fb      	ldr	r3, [r7, #12]
 800c16e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c170:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800c174:	68fb      	ldr	r3, [r7, #12]
 800c176:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 800c178:	2301      	movs	r3, #1
 800c17a:	e152      	b.n	800c422 <HAL_SD_WriteBlocks+0x30a>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 800c17c:	68fb      	ldr	r3, [r7, #12]
 800c17e:	2203      	movs	r2, #3
 800c180:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 800c184:	68fb      	ldr	r3, [r7, #12]
 800c186:	681b      	ldr	r3, [r3, #0]
 800c188:	2200      	movs	r2, #0
 800c18a:	62da      	str	r2, [r3, #44]	; 0x2c

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800c18c:	68fb      	ldr	r3, [r7, #12]
 800c18e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c190:	2b01      	cmp	r3, #1
 800c192:	d002      	beq.n	800c19a <HAL_SD_WriteBlocks+0x82>
    {
      add *= 512U;
 800c194:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c196:	025b      	lsls	r3, r3, #9
 800c198:	63bb      	str	r3, [r7, #56]	; 0x38
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800c19a:	f04f 33ff 	mov.w	r3, #4294967295
 800c19e:	61bb      	str	r3, [r7, #24]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 800c1a0:	683b      	ldr	r3, [r7, #0]
 800c1a2:	025b      	lsls	r3, r3, #9
 800c1a4:	61fb      	str	r3, [r7, #28]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 800c1a6:	2390      	movs	r3, #144	; 0x90
 800c1a8:	623b      	str	r3, [r7, #32]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_CARD;
 800c1aa:	2300      	movs	r3, #0
 800c1ac:	627b      	str	r3, [r7, #36]	; 0x24
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800c1ae:	2300      	movs	r3, #0
 800c1b0:	62bb      	str	r3, [r7, #40]	; 0x28
    config.DPSM          = SDMMC_DPSM_DISABLE;
 800c1b2:	2300      	movs	r3, #0
 800c1b4:	62fb      	str	r3, [r7, #44]	; 0x2c
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 800c1b6:	68fb      	ldr	r3, [r7, #12]
 800c1b8:	681b      	ldr	r3, [r3, #0]
 800c1ba:	f107 0218 	add.w	r2, r7, #24
 800c1be:	4611      	mov	r1, r2
 800c1c0:	4618      	mov	r0, r3
 800c1c2:	f004 f85f 	bl	8010284 <SDMMC_ConfigData>
    __SDMMC_CMDTRANS_ENABLE( hsd->Instance);
 800c1c6:	68fb      	ldr	r3, [r7, #12]
 800c1c8:	681b      	ldr	r3, [r3, #0]
 800c1ca:	68da      	ldr	r2, [r3, #12]
 800c1cc:	68fb      	ldr	r3, [r7, #12]
 800c1ce:	681b      	ldr	r3, [r3, #0]
 800c1d0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800c1d4:	60da      	str	r2, [r3, #12]

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 800c1d6:	683b      	ldr	r3, [r7, #0]
 800c1d8:	2b01      	cmp	r3, #1
 800c1da:	d90a      	bls.n	800c1f2 <HAL_SD_WriteBlocks+0xda>
    {
      hsd->Context = SD_CONTEXT_WRITE_MULTIPLE_BLOCK;
 800c1dc:	68fb      	ldr	r3, [r7, #12]
 800c1de:	2220      	movs	r2, #32
 800c1e0:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 800c1e2:	68fb      	ldr	r3, [r7, #12]
 800c1e4:	681b      	ldr	r3, [r3, #0]
 800c1e6:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800c1e8:	4618      	mov	r0, r3
 800c1ea:	f004 f903 	bl	80103f4 <SDMMC_CmdWriteMultiBlock>
 800c1ee:	6478      	str	r0, [r7, #68]	; 0x44
 800c1f0:	e009      	b.n	800c206 <HAL_SD_WriteBlocks+0xee>
    }
    else
    {
      hsd->Context = SD_CONTEXT_WRITE_SINGLE_BLOCK;
 800c1f2:	68fb      	ldr	r3, [r7, #12]
 800c1f4:	2210      	movs	r2, #16
 800c1f6:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 800c1f8:	68fb      	ldr	r3, [r7, #12]
 800c1fa:	681b      	ldr	r3, [r3, #0]
 800c1fc:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800c1fe:	4618      	mov	r0, r3
 800c200:	f004 f8d5 	bl	80103ae <SDMMC_CmdWriteSingleBlock>
 800c204:	6478      	str	r0, [r7, #68]	; 0x44
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 800c206:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c208:	2b00      	cmp	r3, #0
 800c20a:	d012      	beq.n	800c232 <HAL_SD_WriteBlocks+0x11a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800c20c:	68fb      	ldr	r3, [r7, #12]
 800c20e:	681b      	ldr	r3, [r3, #0]
 800c210:	4a86      	ldr	r2, [pc, #536]	; (800c42c <HAL_SD_WriteBlocks+0x314>)
 800c212:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 800c214:	68fb      	ldr	r3, [r7, #12]
 800c216:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800c218:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c21a:	431a      	orrs	r2, r3
 800c21c:	68fb      	ldr	r3, [r7, #12]
 800c21e:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800c220:	68fb      	ldr	r3, [r7, #12]
 800c222:	2201      	movs	r2, #1
 800c224:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800c228:	68fb      	ldr	r3, [r7, #12]
 800c22a:	2200      	movs	r2, #0
 800c22c:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800c22e:	2301      	movs	r3, #1
 800c230:	e0f7      	b.n	800c422 <HAL_SD_WriteBlocks+0x30a>
    }

    /* Write block(s) in polling mode */
    dataremaining = config.DataLength;
 800c232:	69fb      	ldr	r3, [r7, #28]
 800c234:	63fb      	str	r3, [r7, #60]	; 0x3c
    while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 800c236:	e05c      	b.n	800c2f2 <HAL_SD_WriteBlocks+0x1da>
    {
      if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXFIFOHE) && (dataremaining >= 32U))
 800c238:	68fb      	ldr	r3, [r7, #12]
 800c23a:	681b      	ldr	r3, [r3, #0]
 800c23c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c23e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800c242:	2b00      	cmp	r3, #0
 800c244:	d037      	beq.n	800c2b6 <HAL_SD_WriteBlocks+0x19e>
 800c246:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c248:	2b1f      	cmp	r3, #31
 800c24a:	d934      	bls.n	800c2b6 <HAL_SD_WriteBlocks+0x19e>
      {
        /* Write data to SDMMC Tx FIFO */
        for(count = 0U; count < 8U; count++)
 800c24c:	2300      	movs	r3, #0
 800c24e:	643b      	str	r3, [r7, #64]	; 0x40
 800c250:	e02b      	b.n	800c2aa <HAL_SD_WriteBlocks+0x192>
        {
          data = (uint32_t)(*tempbuff);
 800c252:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c254:	781b      	ldrb	r3, [r3, #0]
 800c256:	617b      	str	r3, [r7, #20]
          tempbuff++;
 800c258:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c25a:	3301      	adds	r3, #1
 800c25c:	637b      	str	r3, [r7, #52]	; 0x34
          data |= ((uint32_t)(*tempbuff) << 8U);
 800c25e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c260:	781b      	ldrb	r3, [r3, #0]
 800c262:	021a      	lsls	r2, r3, #8
 800c264:	697b      	ldr	r3, [r7, #20]
 800c266:	4313      	orrs	r3, r2
 800c268:	617b      	str	r3, [r7, #20]
          tempbuff++;
 800c26a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c26c:	3301      	adds	r3, #1
 800c26e:	637b      	str	r3, [r7, #52]	; 0x34
          data |= ((uint32_t)(*tempbuff) << 16U);
 800c270:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c272:	781b      	ldrb	r3, [r3, #0]
 800c274:	041a      	lsls	r2, r3, #16
 800c276:	697b      	ldr	r3, [r7, #20]
 800c278:	4313      	orrs	r3, r2
 800c27a:	617b      	str	r3, [r7, #20]
          tempbuff++;
 800c27c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c27e:	3301      	adds	r3, #1
 800c280:	637b      	str	r3, [r7, #52]	; 0x34
          data |= ((uint32_t)(*tempbuff) << 24U);
 800c282:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c284:	781b      	ldrb	r3, [r3, #0]
 800c286:	061a      	lsls	r2, r3, #24
 800c288:	697b      	ldr	r3, [r7, #20]
 800c28a:	4313      	orrs	r3, r2
 800c28c:	617b      	str	r3, [r7, #20]
          tempbuff++;
 800c28e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c290:	3301      	adds	r3, #1
 800c292:	637b      	str	r3, [r7, #52]	; 0x34
          (void)SDMMC_WriteFIFO(hsd->Instance, &data);
 800c294:	68fb      	ldr	r3, [r7, #12]
 800c296:	681b      	ldr	r3, [r3, #0]
 800c298:	f107 0214 	add.w	r2, r7, #20
 800c29c:	4611      	mov	r1, r2
 800c29e:	4618      	mov	r0, r3
 800c2a0:	f003 ff75 	bl	801018e <SDMMC_WriteFIFO>
        for(count = 0U; count < 8U; count++)
 800c2a4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c2a6:	3301      	adds	r3, #1
 800c2a8:	643b      	str	r3, [r7, #64]	; 0x40
 800c2aa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c2ac:	2b07      	cmp	r3, #7
 800c2ae:	d9d0      	bls.n	800c252 <HAL_SD_WriteBlocks+0x13a>
        }
        dataremaining -= 32U;
 800c2b0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c2b2:	3b20      	subs	r3, #32
 800c2b4:	63fb      	str	r3, [r7, #60]	; 0x3c
      }

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 800c2b6:	f7f7 fa1f 	bl	80036f8 <HAL_GetTick>
 800c2ba:	4602      	mov	r2, r0
 800c2bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c2be:	1ad3      	subs	r3, r2, r3
 800c2c0:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800c2c2:	429a      	cmp	r2, r3
 800c2c4:	d902      	bls.n	800c2cc <HAL_SD_WriteBlocks+0x1b4>
 800c2c6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c2c8:	2b00      	cmp	r3, #0
 800c2ca:	d112      	bne.n	800c2f2 <HAL_SD_WriteBlocks+0x1da>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800c2cc:	68fb      	ldr	r3, [r7, #12]
 800c2ce:	681b      	ldr	r3, [r3, #0]
 800c2d0:	4a56      	ldr	r2, [pc, #344]	; (800c42c <HAL_SD_WriteBlocks+0x314>)
 800c2d2:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 800c2d4:	68fb      	ldr	r3, [r7, #12]
 800c2d6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800c2d8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c2da:	431a      	orrs	r2, r3
 800c2dc:	68fb      	ldr	r3, [r7, #12]
 800c2de:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 800c2e0:	68fb      	ldr	r3, [r7, #12]
 800c2e2:	2201      	movs	r2, #1
 800c2e4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 800c2e8:	68fb      	ldr	r3, [r7, #12]
 800c2ea:	2200      	movs	r2, #0
 800c2ec:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_TIMEOUT;
 800c2ee:	2303      	movs	r3, #3
 800c2f0:	e097      	b.n	800c422 <HAL_SD_WriteBlocks+0x30a>
    while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 800c2f2:	68fb      	ldr	r3, [r7, #12]
 800c2f4:	681b      	ldr	r3, [r3, #0]
 800c2f6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c2f8:	f403 738d 	and.w	r3, r3, #282	; 0x11a
 800c2fc:	2b00      	cmp	r3, #0
 800c2fe:	d09b      	beq.n	800c238 <HAL_SD_WriteBlocks+0x120>
      }
    }
    __SDMMC_CMDTRANS_DISABLE( hsd->Instance);
 800c300:	68fb      	ldr	r3, [r7, #12]
 800c302:	681b      	ldr	r3, [r3, #0]
 800c304:	68da      	ldr	r2, [r3, #12]
 800c306:	68fb      	ldr	r3, [r7, #12]
 800c308:	681b      	ldr	r3, [r3, #0]
 800c30a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800c30e:	60da      	str	r2, [r3, #12]

    /* Send stop transmission command in case of multiblock write */
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 800c310:	68fb      	ldr	r3, [r7, #12]
 800c312:	681b      	ldr	r3, [r3, #0]
 800c314:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c316:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c31a:	2b00      	cmp	r3, #0
 800c31c:	d022      	beq.n	800c364 <HAL_SD_WriteBlocks+0x24c>
 800c31e:	683b      	ldr	r3, [r7, #0]
 800c320:	2b01      	cmp	r3, #1
 800c322:	d91f      	bls.n	800c364 <HAL_SD_WriteBlocks+0x24c>
    {
      if(hsd->SdCard.CardType != CARD_SECURED)
 800c324:	68fb      	ldr	r3, [r7, #12]
 800c326:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c328:	2b03      	cmp	r3, #3
 800c32a:	d01b      	beq.n	800c364 <HAL_SD_WriteBlocks+0x24c>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800c32c:	68fb      	ldr	r3, [r7, #12]
 800c32e:	681b      	ldr	r3, [r3, #0]
 800c330:	4618      	mov	r0, r3
 800c332:	f004 f883 	bl	801043c <SDMMC_CmdStopTransfer>
 800c336:	6478      	str	r0, [r7, #68]	; 0x44
        if(errorstate != HAL_SD_ERROR_NONE)
 800c338:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c33a:	2b00      	cmp	r3, #0
 800c33c:	d012      	beq.n	800c364 <HAL_SD_WriteBlocks+0x24c>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800c33e:	68fb      	ldr	r3, [r7, #12]
 800c340:	681b      	ldr	r3, [r3, #0]
 800c342:	4a3a      	ldr	r2, [pc, #232]	; (800c42c <HAL_SD_WriteBlocks+0x314>)
 800c344:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->ErrorCode |= errorstate;
 800c346:	68fb      	ldr	r3, [r7, #12]
 800c348:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800c34a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c34c:	431a      	orrs	r2, r3
 800c34e:	68fb      	ldr	r3, [r7, #12]
 800c350:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->State = HAL_SD_STATE_READY;
 800c352:	68fb      	ldr	r3, [r7, #12]
 800c354:	2201      	movs	r2, #1
 800c356:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          hsd->Context = SD_CONTEXT_NONE;
 800c35a:	68fb      	ldr	r3, [r7, #12]
 800c35c:	2200      	movs	r2, #0
 800c35e:	631a      	str	r2, [r3, #48]	; 0x30
          return HAL_ERROR;
 800c360:	2301      	movs	r3, #1
 800c362:	e05e      	b.n	800c422 <HAL_SD_WriteBlocks+0x30a>
        }
      }
    }

    /* Get error state */
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 800c364:	68fb      	ldr	r3, [r7, #12]
 800c366:	681b      	ldr	r3, [r3, #0]
 800c368:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c36a:	f003 0308 	and.w	r3, r3, #8
 800c36e:	2b00      	cmp	r3, #0
 800c370:	d012      	beq.n	800c398 <HAL_SD_WriteBlocks+0x280>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800c372:	68fb      	ldr	r3, [r7, #12]
 800c374:	681b      	ldr	r3, [r3, #0]
 800c376:	4a2d      	ldr	r2, [pc, #180]	; (800c42c <HAL_SD_WriteBlocks+0x314>)
 800c378:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 800c37a:	68fb      	ldr	r3, [r7, #12]
 800c37c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c37e:	f043 0208 	orr.w	r2, r3, #8
 800c382:	68fb      	ldr	r3, [r7, #12]
 800c384:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800c386:	68fb      	ldr	r3, [r7, #12]
 800c388:	2201      	movs	r2, #1
 800c38a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800c38e:	68fb      	ldr	r3, [r7, #12]
 800c390:	2200      	movs	r2, #0
 800c392:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800c394:	2301      	movs	r3, #1
 800c396:	e044      	b.n	800c422 <HAL_SD_WriteBlocks+0x30a>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 800c398:	68fb      	ldr	r3, [r7, #12]
 800c39a:	681b      	ldr	r3, [r3, #0]
 800c39c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c39e:	f003 0302 	and.w	r3, r3, #2
 800c3a2:	2b00      	cmp	r3, #0
 800c3a4:	d012      	beq.n	800c3cc <HAL_SD_WriteBlocks+0x2b4>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800c3a6:	68fb      	ldr	r3, [r7, #12]
 800c3a8:	681b      	ldr	r3, [r3, #0]
 800c3aa:	4a20      	ldr	r2, [pc, #128]	; (800c42c <HAL_SD_WriteBlocks+0x314>)
 800c3ac:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 800c3ae:	68fb      	ldr	r3, [r7, #12]
 800c3b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c3b2:	f043 0202 	orr.w	r2, r3, #2
 800c3b6:	68fb      	ldr	r3, [r7, #12]
 800c3b8:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800c3ba:	68fb      	ldr	r3, [r7, #12]
 800c3bc:	2201      	movs	r2, #1
 800c3be:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800c3c2:	68fb      	ldr	r3, [r7, #12]
 800c3c4:	2200      	movs	r2, #0
 800c3c6:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800c3c8:	2301      	movs	r3, #1
 800c3ca:	e02a      	b.n	800c422 <HAL_SD_WriteBlocks+0x30a>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR))
 800c3cc:	68fb      	ldr	r3, [r7, #12]
 800c3ce:	681b      	ldr	r3, [r3, #0]
 800c3d0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c3d2:	f003 0310 	and.w	r3, r3, #16
 800c3d6:	2b00      	cmp	r3, #0
 800c3d8:	d012      	beq.n	800c400 <HAL_SD_WriteBlocks+0x2e8>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800c3da:	68fb      	ldr	r3, [r7, #12]
 800c3dc:	681b      	ldr	r3, [r3, #0]
 800c3de:	4a13      	ldr	r2, [pc, #76]	; (800c42c <HAL_SD_WriteBlocks+0x314>)
 800c3e0:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 800c3e2:	68fb      	ldr	r3, [r7, #12]
 800c3e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c3e6:	f043 0210 	orr.w	r2, r3, #16
 800c3ea:	68fb      	ldr	r3, [r7, #12]
 800c3ec:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800c3ee:	68fb      	ldr	r3, [r7, #12]
 800c3f0:	2201      	movs	r2, #1
 800c3f2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800c3f6:	68fb      	ldr	r3, [r7, #12]
 800c3f8:	2200      	movs	r2, #0
 800c3fa:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800c3fc:	2301      	movs	r3, #1
 800c3fe:	e010      	b.n	800c422 <HAL_SD_WriteBlocks+0x30a>
    {
      /* Nothing to do */
    }

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800c400:	68fb      	ldr	r3, [r7, #12]
 800c402:	681b      	ldr	r3, [r3, #0]
 800c404:	4a0a      	ldr	r2, [pc, #40]	; (800c430 <HAL_SD_WriteBlocks+0x318>)
 800c406:	639a      	str	r2, [r3, #56]	; 0x38

    hsd->State = HAL_SD_STATE_READY;
 800c408:	68fb      	ldr	r3, [r7, #12]
 800c40a:	2201      	movs	r2, #1
 800c40c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_OK;
 800c410:	2300      	movs	r3, #0
 800c412:	e006      	b.n	800c422 <HAL_SD_WriteBlocks+0x30a>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 800c414:	68fb      	ldr	r3, [r7, #12]
 800c416:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c418:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800c41c:	68fb      	ldr	r3, [r7, #12]
 800c41e:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800c420:	2301      	movs	r3, #1
  }
}
 800c422:	4618      	mov	r0, r3
 800c424:	3748      	adds	r7, #72	; 0x48
 800c426:	46bd      	mov	sp, r7
 800c428:	bd80      	pop	{r7, pc}
 800c42a:	bf00      	nop
 800c42c:	1fe00fff 	.word	0x1fe00fff
 800c430:	18000f3a 	.word	0x18000f3a

0800c434 <HAL_SD_ReadBlocks_DMA>:
  * @param  BlockAdd: Block Address from where data is to be read
  * @param  NumberOfBlocks: Number of blocks to read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 800c434:	b580      	push	{r7, lr}
 800c436:	b08c      	sub	sp, #48	; 0x30
 800c438:	af00      	add	r7, sp, #0
 800c43a:	60f8      	str	r0, [r7, #12]
 800c43c:	60b9      	str	r1, [r7, #8]
 800c43e:	607a      	str	r2, [r7, #4]
 800c440:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 800c442:	687b      	ldr	r3, [r7, #4]
 800c444:	62bb      	str	r3, [r7, #40]	; 0x28

  if(NULL == pData)
 800c446:	68bb      	ldr	r3, [r7, #8]
 800c448:	2b00      	cmp	r3, #0
 800c44a:	d107      	bne.n	800c45c <HAL_SD_ReadBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800c44c:	68fb      	ldr	r3, [r7, #12]
 800c44e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c450:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800c454:	68fb      	ldr	r3, [r7, #12]
 800c456:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800c458:	2301      	movs	r3, #1
 800c45a:	e08d      	b.n	800c578 <HAL_SD_ReadBlocks_DMA+0x144>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 800c45c:	68fb      	ldr	r3, [r7, #12]
 800c45e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800c462:	b2db      	uxtb	r3, r3
 800c464:	2b01      	cmp	r3, #1
 800c466:	f040 8086 	bne.w	800c576 <HAL_SD_ReadBlocks_DMA+0x142>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800c46a:	68fb      	ldr	r3, [r7, #12]
 800c46c:	2200      	movs	r2, #0
 800c46e:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800c470:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c472:	683b      	ldr	r3, [r7, #0]
 800c474:	441a      	add	r2, r3
 800c476:	68fb      	ldr	r3, [r7, #12]
 800c478:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c47a:	429a      	cmp	r2, r3
 800c47c:	d907      	bls.n	800c48e <HAL_SD_ReadBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800c47e:	68fb      	ldr	r3, [r7, #12]
 800c480:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c482:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800c486:	68fb      	ldr	r3, [r7, #12]
 800c488:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 800c48a:	2301      	movs	r3, #1
 800c48c:	e074      	b.n	800c578 <HAL_SD_ReadBlocks_DMA+0x144>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 800c48e:	68fb      	ldr	r3, [r7, #12]
 800c490:	2203      	movs	r2, #3
 800c492:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 800c496:	68fb      	ldr	r3, [r7, #12]
 800c498:	681b      	ldr	r3, [r3, #0]
 800c49a:	2200      	movs	r2, #0
 800c49c:	62da      	str	r2, [r3, #44]	; 0x2c

    hsd->pRxBuffPtr = pData;
 800c49e:	68fb      	ldr	r3, [r7, #12]
 800c4a0:	68ba      	ldr	r2, [r7, #8]
 800c4a2:	629a      	str	r2, [r3, #40]	; 0x28
    hsd->RxXferSize = BLOCKSIZE * NumberOfBlocks;
 800c4a4:	683b      	ldr	r3, [r7, #0]
 800c4a6:	025a      	lsls	r2, r3, #9
 800c4a8:	68fb      	ldr	r3, [r7, #12]
 800c4aa:	62da      	str	r2, [r3, #44]	; 0x2c

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800c4ac:	68fb      	ldr	r3, [r7, #12]
 800c4ae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c4b0:	2b01      	cmp	r3, #1
 800c4b2:	d002      	beq.n	800c4ba <HAL_SD_ReadBlocks_DMA+0x86>
    {
      add *= 512U;
 800c4b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c4b6:	025b      	lsls	r3, r3, #9
 800c4b8:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800c4ba:	f04f 33ff 	mov.w	r3, #4294967295
 800c4be:	613b      	str	r3, [r7, #16]
    config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 800c4c0:	683b      	ldr	r3, [r7, #0]
 800c4c2:	025b      	lsls	r3, r3, #9
 800c4c4:	617b      	str	r3, [r7, #20]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 800c4c6:	2390      	movs	r3, #144	; 0x90
 800c4c8:	61bb      	str	r3, [r7, #24]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 800c4ca:	2302      	movs	r3, #2
 800c4cc:	61fb      	str	r3, [r7, #28]
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800c4ce:	2300      	movs	r3, #0
 800c4d0:	623b      	str	r3, [r7, #32]
    config.DPSM          = SDMMC_DPSM_DISABLE;
 800c4d2:	2300      	movs	r3, #0
 800c4d4:	627b      	str	r3, [r7, #36]	; 0x24
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 800c4d6:	68fb      	ldr	r3, [r7, #12]
 800c4d8:	681b      	ldr	r3, [r3, #0]
 800c4da:	f107 0210 	add.w	r2, r7, #16
 800c4de:	4611      	mov	r1, r2
 800c4e0:	4618      	mov	r0, r3
 800c4e2:	f003 fecf 	bl	8010284 <SDMMC_ConfigData>

    __SDMMC_CMDTRANS_ENABLE( hsd->Instance);
 800c4e6:	68fb      	ldr	r3, [r7, #12]
 800c4e8:	681b      	ldr	r3, [r3, #0]
 800c4ea:	68da      	ldr	r2, [r3, #12]
 800c4ec:	68fb      	ldr	r3, [r7, #12]
 800c4ee:	681b      	ldr	r3, [r3, #0]
 800c4f0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800c4f4:	60da      	str	r2, [r3, #12]
    hsd->Instance->IDMABASE0 = (uint32_t) pData ;
 800c4f6:	68fb      	ldr	r3, [r7, #12]
 800c4f8:	681b      	ldr	r3, [r3, #0]
 800c4fa:	68ba      	ldr	r2, [r7, #8]
 800c4fc:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->Instance->IDMACTRL  = SDMMC_ENABLE_IDMA_SINGLE_BUFF;
 800c4fe:	68fb      	ldr	r3, [r7, #12]
 800c500:	681b      	ldr	r3, [r3, #0]
 800c502:	2201      	movs	r2, #1
 800c504:	651a      	str	r2, [r3, #80]	; 0x50

    /* Read Blocks in DMA mode */
    if(NumberOfBlocks > 1U)
 800c506:	683b      	ldr	r3, [r7, #0]
 800c508:	2b01      	cmp	r3, #1
 800c50a:	d90a      	bls.n	800c522 <HAL_SD_ReadBlocks_DMA+0xee>
    {
      hsd->Context = (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 800c50c:	68fb      	ldr	r3, [r7, #12]
 800c50e:	2282      	movs	r2, #130	; 0x82
 800c510:	631a      	str	r2, [r3, #48]	; 0x30

      /* Read Multi Block command */
      errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 800c512:	68fb      	ldr	r3, [r7, #12]
 800c514:	681b      	ldr	r3, [r3, #0]
 800c516:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800c518:	4618      	mov	r0, r3
 800c51a:	f003 ff25 	bl	8010368 <SDMMC_CmdReadMultiBlock>
 800c51e:	62f8      	str	r0, [r7, #44]	; 0x2c
 800c520:	e009      	b.n	800c536 <HAL_SD_ReadBlocks_DMA+0x102>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_READ_SINGLE_BLOCK | SD_CONTEXT_DMA);
 800c522:	68fb      	ldr	r3, [r7, #12]
 800c524:	2281      	movs	r2, #129	; 0x81
 800c526:	631a      	str	r2, [r3, #48]	; 0x30

      /* Read Single Block command */
      errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 800c528:	68fb      	ldr	r3, [r7, #12]
 800c52a:	681b      	ldr	r3, [r3, #0]
 800c52c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800c52e:	4618      	mov	r0, r3
 800c530:	f003 fef7 	bl	8010322 <SDMMC_CmdReadSingleBlock>
 800c534:	62f8      	str	r0, [r7, #44]	; 0x2c
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 800c536:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c538:	2b00      	cmp	r3, #0
 800c53a:	d012      	beq.n	800c562 <HAL_SD_ReadBlocks_DMA+0x12e>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800c53c:	68fb      	ldr	r3, [r7, #12]
 800c53e:	681b      	ldr	r3, [r3, #0]
 800c540:	4a0f      	ldr	r2, [pc, #60]	; (800c580 <HAL_SD_ReadBlocks_DMA+0x14c>)
 800c542:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 800c544:	68fb      	ldr	r3, [r7, #12]
 800c546:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800c548:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c54a:	431a      	orrs	r2, r3
 800c54c:	68fb      	ldr	r3, [r7, #12]
 800c54e:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800c550:	68fb      	ldr	r3, [r7, #12]
 800c552:	2201      	movs	r2, #1
 800c554:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800c558:	68fb      	ldr	r3, [r7, #12]
 800c55a:	2200      	movs	r2, #0
 800c55c:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800c55e:	2301      	movs	r3, #1
 800c560:	e00a      	b.n	800c578 <HAL_SD_ReadBlocks_DMA+0x144>
    }

    /* Enable transfer interrupts */
    __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_RXOVERR | SDMMC_IT_DATAEND));
 800c562:	68fb      	ldr	r3, [r7, #12]
 800c564:	681b      	ldr	r3, [r3, #0]
 800c566:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800c568:	68fb      	ldr	r3, [r7, #12]
 800c56a:	681b      	ldr	r3, [r3, #0]
 800c56c:	f442 7295 	orr.w	r2, r2, #298	; 0x12a
 800c570:	63da      	str	r2, [r3, #60]	; 0x3c


    return HAL_OK;
 800c572:	2300      	movs	r3, #0
 800c574:	e000      	b.n	800c578 <HAL_SD_ReadBlocks_DMA+0x144>
  }
  else
  {
    return HAL_BUSY;
 800c576:	2302      	movs	r3, #2
  }
}
 800c578:	4618      	mov	r0, r3
 800c57a:	3730      	adds	r7, #48	; 0x30
 800c57c:	46bd      	mov	sp, r7
 800c57e:	bd80      	pop	{r7, pc}
 800c580:	1fe00fff 	.word	0x1fe00fff

0800c584 <HAL_SD_WriteBlocks_DMA>:
  * @param  BlockAdd: Block Address where data will be written
  * @param  NumberOfBlocks: Number of blocks to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 800c584:	b580      	push	{r7, lr}
 800c586:	b08c      	sub	sp, #48	; 0x30
 800c588:	af00      	add	r7, sp, #0
 800c58a:	60f8      	str	r0, [r7, #12]
 800c58c:	60b9      	str	r1, [r7, #8]
 800c58e:	607a      	str	r2, [r7, #4]
 800c590:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 800c592:	687b      	ldr	r3, [r7, #4]
 800c594:	62bb      	str	r3, [r7, #40]	; 0x28

  if(NULL == pData)
 800c596:	68bb      	ldr	r3, [r7, #8]
 800c598:	2b00      	cmp	r3, #0
 800c59a:	d107      	bne.n	800c5ac <HAL_SD_WriteBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800c59c:	68fb      	ldr	r3, [r7, #12]
 800c59e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c5a0:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800c5a4:	68fb      	ldr	r3, [r7, #12]
 800c5a6:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800c5a8:	2301      	movs	r3, #1
 800c5aa:	e08d      	b.n	800c6c8 <HAL_SD_WriteBlocks_DMA+0x144>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 800c5ac:	68fb      	ldr	r3, [r7, #12]
 800c5ae:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800c5b2:	b2db      	uxtb	r3, r3
 800c5b4:	2b01      	cmp	r3, #1
 800c5b6:	f040 8086 	bne.w	800c6c6 <HAL_SD_WriteBlocks_DMA+0x142>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800c5ba:	68fb      	ldr	r3, [r7, #12]
 800c5bc:	2200      	movs	r2, #0
 800c5be:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800c5c0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c5c2:	683b      	ldr	r3, [r7, #0]
 800c5c4:	441a      	add	r2, r3
 800c5c6:	68fb      	ldr	r3, [r7, #12]
 800c5c8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c5ca:	429a      	cmp	r2, r3
 800c5cc:	d907      	bls.n	800c5de <HAL_SD_WriteBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800c5ce:	68fb      	ldr	r3, [r7, #12]
 800c5d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c5d2:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800c5d6:	68fb      	ldr	r3, [r7, #12]
 800c5d8:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 800c5da:	2301      	movs	r3, #1
 800c5dc:	e074      	b.n	800c6c8 <HAL_SD_WriteBlocks_DMA+0x144>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 800c5de:	68fb      	ldr	r3, [r7, #12]
 800c5e0:	2203      	movs	r2, #3
 800c5e2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 800c5e6:	68fb      	ldr	r3, [r7, #12]
 800c5e8:	681b      	ldr	r3, [r3, #0]
 800c5ea:	2200      	movs	r2, #0
 800c5ec:	62da      	str	r2, [r3, #44]	; 0x2c

    hsd->pTxBuffPtr = pData;
 800c5ee:	68fb      	ldr	r3, [r7, #12]
 800c5f0:	68ba      	ldr	r2, [r7, #8]
 800c5f2:	621a      	str	r2, [r3, #32]
    hsd->TxXferSize = BLOCKSIZE * NumberOfBlocks;
 800c5f4:	683b      	ldr	r3, [r7, #0]
 800c5f6:	025a      	lsls	r2, r3, #9
 800c5f8:	68fb      	ldr	r3, [r7, #12]
 800c5fa:	625a      	str	r2, [r3, #36]	; 0x24

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800c5fc:	68fb      	ldr	r3, [r7, #12]
 800c5fe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c600:	2b01      	cmp	r3, #1
 800c602:	d002      	beq.n	800c60a <HAL_SD_WriteBlocks_DMA+0x86>
    {
      add *= 512U;
 800c604:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c606:	025b      	lsls	r3, r3, #9
 800c608:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800c60a:	f04f 33ff 	mov.w	r3, #4294967295
 800c60e:	613b      	str	r3, [r7, #16]
    config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 800c610:	683b      	ldr	r3, [r7, #0]
 800c612:	025b      	lsls	r3, r3, #9
 800c614:	617b      	str	r3, [r7, #20]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 800c616:	2390      	movs	r3, #144	; 0x90
 800c618:	61bb      	str	r3, [r7, #24]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_CARD;
 800c61a:	2300      	movs	r3, #0
 800c61c:	61fb      	str	r3, [r7, #28]
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800c61e:	2300      	movs	r3, #0
 800c620:	623b      	str	r3, [r7, #32]
    config.DPSM          = SDMMC_DPSM_DISABLE;
 800c622:	2300      	movs	r3, #0
 800c624:	627b      	str	r3, [r7, #36]	; 0x24
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 800c626:	68fb      	ldr	r3, [r7, #12]
 800c628:	681b      	ldr	r3, [r3, #0]
 800c62a:	f107 0210 	add.w	r2, r7, #16
 800c62e:	4611      	mov	r1, r2
 800c630:	4618      	mov	r0, r3
 800c632:	f003 fe27 	bl	8010284 <SDMMC_ConfigData>


    __SDMMC_CMDTRANS_ENABLE( hsd->Instance);
 800c636:	68fb      	ldr	r3, [r7, #12]
 800c638:	681b      	ldr	r3, [r3, #0]
 800c63a:	68da      	ldr	r2, [r3, #12]
 800c63c:	68fb      	ldr	r3, [r7, #12]
 800c63e:	681b      	ldr	r3, [r3, #0]
 800c640:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800c644:	60da      	str	r2, [r3, #12]

    hsd->Instance->IDMABASE0 = (uint32_t) pData ;
 800c646:	68fb      	ldr	r3, [r7, #12]
 800c648:	681b      	ldr	r3, [r3, #0]
 800c64a:	68ba      	ldr	r2, [r7, #8]
 800c64c:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->Instance->IDMACTRL  = SDMMC_ENABLE_IDMA_SINGLE_BUFF;
 800c64e:	68fb      	ldr	r3, [r7, #12]
 800c650:	681b      	ldr	r3, [r3, #0]
 800c652:	2201      	movs	r2, #1
 800c654:	651a      	str	r2, [r3, #80]	; 0x50

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 800c656:	683b      	ldr	r3, [r7, #0]
 800c658:	2b01      	cmp	r3, #1
 800c65a:	d90a      	bls.n	800c672 <HAL_SD_WriteBlocks_DMA+0xee>
    {
      hsd->Context = (SD_CONTEXT_WRITE_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 800c65c:	68fb      	ldr	r3, [r7, #12]
 800c65e:	22a0      	movs	r2, #160	; 0xa0
 800c660:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 800c662:	68fb      	ldr	r3, [r7, #12]
 800c664:	681b      	ldr	r3, [r3, #0]
 800c666:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800c668:	4618      	mov	r0, r3
 800c66a:	f003 fec3 	bl	80103f4 <SDMMC_CmdWriteMultiBlock>
 800c66e:	62f8      	str	r0, [r7, #44]	; 0x2c
 800c670:	e009      	b.n	800c686 <HAL_SD_WriteBlocks_DMA+0x102>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_WRITE_SINGLE_BLOCK | SD_CONTEXT_DMA);
 800c672:	68fb      	ldr	r3, [r7, #12]
 800c674:	2290      	movs	r2, #144	; 0x90
 800c676:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 800c678:	68fb      	ldr	r3, [r7, #12]
 800c67a:	681b      	ldr	r3, [r3, #0]
 800c67c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800c67e:	4618      	mov	r0, r3
 800c680:	f003 fe95 	bl	80103ae <SDMMC_CmdWriteSingleBlock>
 800c684:	62f8      	str	r0, [r7, #44]	; 0x2c
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 800c686:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c688:	2b00      	cmp	r3, #0
 800c68a:	d012      	beq.n	800c6b2 <HAL_SD_WriteBlocks_DMA+0x12e>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800c68c:	68fb      	ldr	r3, [r7, #12]
 800c68e:	681b      	ldr	r3, [r3, #0]
 800c690:	4a0f      	ldr	r2, [pc, #60]	; (800c6d0 <HAL_SD_WriteBlocks_DMA+0x14c>)
 800c692:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 800c694:	68fb      	ldr	r3, [r7, #12]
 800c696:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800c698:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c69a:	431a      	orrs	r2, r3
 800c69c:	68fb      	ldr	r3, [r7, #12]
 800c69e:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800c6a0:	68fb      	ldr	r3, [r7, #12]
 800c6a2:	2201      	movs	r2, #1
 800c6a4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800c6a8:	68fb      	ldr	r3, [r7, #12]
 800c6aa:	2200      	movs	r2, #0
 800c6ac:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800c6ae:	2301      	movs	r3, #1
 800c6b0:	e00a      	b.n	800c6c8 <HAL_SD_WriteBlocks_DMA+0x144>
    }

    /* Enable transfer interrupts */
    __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_TXUNDERR | SDMMC_IT_DATAEND));
 800c6b2:	68fb      	ldr	r3, [r7, #12]
 800c6b4:	681b      	ldr	r3, [r3, #0]
 800c6b6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800c6b8:	68fb      	ldr	r3, [r7, #12]
 800c6ba:	681b      	ldr	r3, [r3, #0]
 800c6bc:	f442 728d 	orr.w	r2, r2, #282	; 0x11a
 800c6c0:	63da      	str	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800c6c2:	2300      	movs	r3, #0
 800c6c4:	e000      	b.n	800c6c8 <HAL_SD_WriteBlocks_DMA+0x144>
  }
  else
  {
    return HAL_BUSY;
 800c6c6:	2302      	movs	r3, #2
  }
}
 800c6c8:	4618      	mov	r0, r3
 800c6ca:	3730      	adds	r7, #48	; 0x30
 800c6cc:	46bd      	mov	sp, r7
 800c6ce:	bd80      	pop	{r7, pc}
 800c6d0:	1fe00fff 	.word	0x1fe00fff

0800c6d4 <HAL_SD_IRQHandler>:
  * @brief  This function handles SD card interrupt request.
  * @param  hsd: Pointer to SD handle
  * @retval None
  */
void HAL_SD_IRQHandler(SD_HandleTypeDef *hsd)
{
 800c6d4:	b580      	push	{r7, lr}
 800c6d6:	b084      	sub	sp, #16
 800c6d8:	af00      	add	r7, sp, #0
 800c6da:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  uint32_t context = hsd->Context;
 800c6dc:	687b      	ldr	r3, [r7, #4]
 800c6de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c6e0:	60fb      	str	r3, [r7, #12]

  /* Check for SDMMC interrupt flags */
  if((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 800c6e2:	687b      	ldr	r3, [r7, #4]
 800c6e4:	681b      	ldr	r3, [r3, #0]
 800c6e6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c6e8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800c6ec:	2b00      	cmp	r3, #0
 800c6ee:	d008      	beq.n	800c702 <HAL_SD_IRQHandler+0x2e>
 800c6f0:	68fb      	ldr	r3, [r7, #12]
 800c6f2:	f003 0308 	and.w	r3, r3, #8
 800c6f6:	2b00      	cmp	r3, #0
 800c6f8:	d003      	beq.n	800c702 <HAL_SD_IRQHandler+0x2e>
  {
    SD_Read_IT(hsd);
 800c6fa:	6878      	ldr	r0, [r7, #4]
 800c6fc:	f001 f92a 	bl	800d954 <SD_Read_IT>
 800c700:	e19a      	b.n	800ca38 <HAL_SD_IRQHandler+0x364>
  }

  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) != RESET)
 800c702:	687b      	ldr	r3, [r7, #4]
 800c704:	681b      	ldr	r3, [r3, #0]
 800c706:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c708:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c70c:	2b00      	cmp	r3, #0
 800c70e:	f000 80ac 	beq.w	800c86a <HAL_SD_IRQHandler+0x196>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DATAEND);
 800c712:	687b      	ldr	r3, [r7, #4]
 800c714:	681b      	ldr	r3, [r3, #0]
 800c716:	f44f 7280 	mov.w	r2, #256	; 0x100
 800c71a:	639a      	str	r2, [r3, #56]	; 0x38

    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND  | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT |\
 800c71c:	687b      	ldr	r3, [r7, #4]
 800c71e:	681b      	ldr	r3, [r3, #0]
 800c720:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 800c722:	687b      	ldr	r3, [r7, #4]
 800c724:	681a      	ldr	r2, [r3, #0]
 800c726:	4b9d      	ldr	r3, [pc, #628]	; (800c99c <HAL_SD_IRQHandler+0x2c8>)
 800c728:	400b      	ands	r3, r1
 800c72a:	63d3      	str	r3, [r2, #60]	; 0x3c
                             SDMMC_IT_TXUNDERR | SDMMC_IT_RXOVERR  | SDMMC_IT_TXFIFOHE |\
                             SDMMC_IT_RXFIFOHF);

    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_IDMABTC);
 800c72c:	687b      	ldr	r3, [r7, #4]
 800c72e:	681b      	ldr	r3, [r3, #0]
 800c730:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800c732:	687b      	ldr	r3, [r7, #4]
 800c734:	681b      	ldr	r3, [r3, #0]
 800c736:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 800c73a:	63da      	str	r2, [r3, #60]	; 0x3c
    __SDMMC_CMDTRANS_DISABLE( hsd->Instance);
 800c73c:	687b      	ldr	r3, [r7, #4]
 800c73e:	681b      	ldr	r3, [r3, #0]
 800c740:	68da      	ldr	r2, [r3, #12]
 800c742:	687b      	ldr	r3, [r7, #4]
 800c744:	681b      	ldr	r3, [r3, #0]
 800c746:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800c74a:	60da      	str	r2, [r3, #12]

    if((context & SD_CONTEXT_IT) != 0U)
 800c74c:	68fb      	ldr	r3, [r7, #12]
 800c74e:	f003 0308 	and.w	r3, r3, #8
 800c752:	2b00      	cmp	r3, #0
 800c754:	d038      	beq.n	800c7c8 <HAL_SD_IRQHandler+0xf4>
    {
      if(((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 800c756:	68fb      	ldr	r3, [r7, #12]
 800c758:	f003 0302 	and.w	r3, r3, #2
 800c75c:	2b00      	cmp	r3, #0
 800c75e:	d104      	bne.n	800c76a <HAL_SD_IRQHandler+0x96>
 800c760:	68fb      	ldr	r3, [r7, #12]
 800c762:	f003 0320 	and.w	r3, r3, #32
 800c766:	2b00      	cmp	r3, #0
 800c768:	d011      	beq.n	800c78e <HAL_SD_IRQHandler+0xba>
      {
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800c76a:	687b      	ldr	r3, [r7, #4]
 800c76c:	681b      	ldr	r3, [r3, #0]
 800c76e:	4618      	mov	r0, r3
 800c770:	f003 fe64 	bl	801043c <SDMMC_CmdStopTransfer>
 800c774:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 800c776:	68bb      	ldr	r3, [r7, #8]
 800c778:	2b00      	cmp	r3, #0
 800c77a:	d008      	beq.n	800c78e <HAL_SD_IRQHandler+0xba>
        {
          hsd->ErrorCode |= errorstate;
 800c77c:	687b      	ldr	r3, [r7, #4]
 800c77e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800c780:	68bb      	ldr	r3, [r7, #8]
 800c782:	431a      	orrs	r2, r3
 800c784:	687b      	ldr	r3, [r7, #4]
 800c786:	639a      	str	r2, [r3, #56]	; 0x38
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
          hsd->ErrorCallback(hsd);
#else
          HAL_SD_ErrorCallback(hsd);
 800c788:	6878      	ldr	r0, [r7, #4]
 800c78a:	f000 f959 	bl	800ca40 <HAL_SD_ErrorCallback>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
        }
      }

      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800c78e:	687b      	ldr	r3, [r7, #4]
 800c790:	681b      	ldr	r3, [r3, #0]
 800c792:	4a83      	ldr	r2, [pc, #524]	; (800c9a0 <HAL_SD_IRQHandler+0x2cc>)
 800c794:	639a      	str	r2, [r3, #56]	; 0x38

      hsd->State = HAL_SD_STATE_READY;
 800c796:	687b      	ldr	r3, [r7, #4]
 800c798:	2201      	movs	r2, #1
 800c79a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800c79e:	687b      	ldr	r3, [r7, #4]
 800c7a0:	2200      	movs	r2, #0
 800c7a2:	631a      	str	r2, [r3, #48]	; 0x30
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 800c7a4:	68fb      	ldr	r3, [r7, #12]
 800c7a6:	f003 0301 	and.w	r3, r3, #1
 800c7aa:	2b00      	cmp	r3, #0
 800c7ac:	d104      	bne.n	800c7b8 <HAL_SD_IRQHandler+0xe4>
 800c7ae:	68fb      	ldr	r3, [r7, #12]
 800c7b0:	f003 0302 	and.w	r3, r3, #2
 800c7b4:	2b00      	cmp	r3, #0
 800c7b6:	d003      	beq.n	800c7c0 <HAL_SD_IRQHandler+0xec>
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->RxCpltCallback(hsd);
#else
        HAL_SD_RxCpltCallback(hsd);
 800c7b8:	6878      	ldr	r0, [r7, #4]
 800c7ba:	f005 fe55 	bl	8012468 <HAL_SD_RxCpltCallback>
 800c7be:	e13b      	b.n	800ca38 <HAL_SD_IRQHandler+0x364>
      else
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->TxCpltCallback(hsd);
#else
        HAL_SD_TxCpltCallback(hsd);
 800c7c0:	6878      	ldr	r0, [r7, #4]
 800c7c2:	f005 fe47 	bl	8012454 <HAL_SD_TxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 800c7c6:	e137      	b.n	800ca38 <HAL_SD_IRQHandler+0x364>
    else if((context & SD_CONTEXT_DMA) != 0U)
 800c7c8:	68fb      	ldr	r3, [r7, #12]
 800c7ca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c7ce:	2b00      	cmp	r3, #0
 800c7d0:	f000 8132 	beq.w	800ca38 <HAL_SD_IRQHandler+0x364>
      hsd->Instance->DLEN = 0;
 800c7d4:	687b      	ldr	r3, [r7, #4]
 800c7d6:	681b      	ldr	r3, [r3, #0]
 800c7d8:	2200      	movs	r2, #0
 800c7da:	629a      	str	r2, [r3, #40]	; 0x28
      hsd->Instance->DCTRL = 0;
 800c7dc:	687b      	ldr	r3, [r7, #4]
 800c7de:	681b      	ldr	r3, [r3, #0]
 800c7e0:	2200      	movs	r2, #0
 800c7e2:	62da      	str	r2, [r3, #44]	; 0x2c
      hsd->Instance->IDMACTRL = SDMMC_DISABLE_IDMA;
 800c7e4:	687b      	ldr	r3, [r7, #4]
 800c7e6:	681b      	ldr	r3, [r3, #0]
 800c7e8:	2200      	movs	r2, #0
 800c7ea:	651a      	str	r2, [r3, #80]	; 0x50
      if(((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 800c7ec:	68fb      	ldr	r3, [r7, #12]
 800c7ee:	f003 0302 	and.w	r3, r3, #2
 800c7f2:	2b00      	cmp	r3, #0
 800c7f4:	d104      	bne.n	800c800 <HAL_SD_IRQHandler+0x12c>
 800c7f6:	68fb      	ldr	r3, [r7, #12]
 800c7f8:	f003 0320 	and.w	r3, r3, #32
 800c7fc:	2b00      	cmp	r3, #0
 800c7fe:	d011      	beq.n	800c824 <HAL_SD_IRQHandler+0x150>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800c800:	687b      	ldr	r3, [r7, #4]
 800c802:	681b      	ldr	r3, [r3, #0]
 800c804:	4618      	mov	r0, r3
 800c806:	f003 fe19 	bl	801043c <SDMMC_CmdStopTransfer>
 800c80a:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 800c80c:	68bb      	ldr	r3, [r7, #8]
 800c80e:	2b00      	cmp	r3, #0
 800c810:	d008      	beq.n	800c824 <HAL_SD_IRQHandler+0x150>
          hsd->ErrorCode |= errorstate;
 800c812:	687b      	ldr	r3, [r7, #4]
 800c814:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800c816:	68bb      	ldr	r3, [r7, #8]
 800c818:	431a      	orrs	r2, r3
 800c81a:	687b      	ldr	r3, [r7, #4]
 800c81c:	639a      	str	r2, [r3, #56]	; 0x38
          HAL_SD_ErrorCallback(hsd);
 800c81e:	6878      	ldr	r0, [r7, #4]
 800c820:	f000 f90e 	bl	800ca40 <HAL_SD_ErrorCallback>
      hsd->State = HAL_SD_STATE_READY;
 800c824:	687b      	ldr	r3, [r7, #4]
 800c826:	2201      	movs	r2, #1
 800c828:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800c82c:	687b      	ldr	r3, [r7, #4]
 800c82e:	2200      	movs	r2, #0
 800c830:	631a      	str	r2, [r3, #48]	; 0x30
      if(((context & SD_CONTEXT_WRITE_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 800c832:	68fb      	ldr	r3, [r7, #12]
 800c834:	f003 0310 	and.w	r3, r3, #16
 800c838:	2b00      	cmp	r3, #0
 800c83a:	d104      	bne.n	800c846 <HAL_SD_IRQHandler+0x172>
 800c83c:	68fb      	ldr	r3, [r7, #12]
 800c83e:	f003 0320 	and.w	r3, r3, #32
 800c842:	2b00      	cmp	r3, #0
 800c844:	d002      	beq.n	800c84c <HAL_SD_IRQHandler+0x178>
        HAL_SD_TxCpltCallback(hsd);
 800c846:	6878      	ldr	r0, [r7, #4]
 800c848:	f005 fe04 	bl	8012454 <HAL_SD_TxCpltCallback>
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 800c84c:	68fb      	ldr	r3, [r7, #12]
 800c84e:	f003 0301 	and.w	r3, r3, #1
 800c852:	2b00      	cmp	r3, #0
 800c854:	d105      	bne.n	800c862 <HAL_SD_IRQHandler+0x18e>
 800c856:	68fb      	ldr	r3, [r7, #12]
 800c858:	f003 0302 	and.w	r3, r3, #2
 800c85c:	2b00      	cmp	r3, #0
 800c85e:	f000 80eb 	beq.w	800ca38 <HAL_SD_IRQHandler+0x364>
        HAL_SD_RxCpltCallback(hsd);
 800c862:	6878      	ldr	r0, [r7, #4]
 800c864:	f005 fe00 	bl	8012468 <HAL_SD_RxCpltCallback>
}
 800c868:	e0e6      	b.n	800ca38 <HAL_SD_IRQHandler+0x364>
  else if((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXFIFOHE) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 800c86a:	687b      	ldr	r3, [r7, #4]
 800c86c:	681b      	ldr	r3, [r3, #0]
 800c86e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c870:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800c874:	2b00      	cmp	r3, #0
 800c876:	d008      	beq.n	800c88a <HAL_SD_IRQHandler+0x1b6>
 800c878:	68fb      	ldr	r3, [r7, #12]
 800c87a:	f003 0308 	and.w	r3, r3, #8
 800c87e:	2b00      	cmp	r3, #0
 800c880:	d003      	beq.n	800c88a <HAL_SD_IRQHandler+0x1b6>
    SD_Write_IT(hsd);
 800c882:	6878      	ldr	r0, [r7, #4]
 800c884:	f001 f8ac 	bl	800d9e0 <SD_Write_IT>
 800c888:	e0d6      	b.n	800ca38 <HAL_SD_IRQHandler+0x364>
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_RXOVERR | SDMMC_FLAG_TXUNDERR) != RESET)
 800c88a:	687b      	ldr	r3, [r7, #4]
 800c88c:	681b      	ldr	r3, [r3, #0]
 800c88e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c890:	f003 033a 	and.w	r3, r3, #58	; 0x3a
 800c894:	2b00      	cmp	r3, #0
 800c896:	f000 80a2 	beq.w	800c9de <HAL_SD_IRQHandler+0x30a>
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_IT_DCRCFAIL) != RESET)
 800c89a:	687b      	ldr	r3, [r7, #4]
 800c89c:	681b      	ldr	r3, [r3, #0]
 800c89e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c8a0:	f003 0302 	and.w	r3, r3, #2
 800c8a4:	2b00      	cmp	r3, #0
 800c8a6:	d005      	beq.n	800c8b4 <HAL_SD_IRQHandler+0x1e0>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 800c8a8:	687b      	ldr	r3, [r7, #4]
 800c8aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c8ac:	f043 0202 	orr.w	r2, r3, #2
 800c8b0:	687b      	ldr	r3, [r7, #4]
 800c8b2:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_IT_DTIMEOUT) != RESET)
 800c8b4:	687b      	ldr	r3, [r7, #4]
 800c8b6:	681b      	ldr	r3, [r3, #0]
 800c8b8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c8ba:	f003 0308 	and.w	r3, r3, #8
 800c8be:	2b00      	cmp	r3, #0
 800c8c0:	d005      	beq.n	800c8ce <HAL_SD_IRQHandler+0x1fa>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 800c8c2:	687b      	ldr	r3, [r7, #4]
 800c8c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c8c6:	f043 0208 	orr.w	r2, r3, #8
 800c8ca:	687b      	ldr	r3, [r7, #4]
 800c8cc:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_IT_RXOVERR) != RESET)
 800c8ce:	687b      	ldr	r3, [r7, #4]
 800c8d0:	681b      	ldr	r3, [r3, #0]
 800c8d2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c8d4:	f003 0320 	and.w	r3, r3, #32
 800c8d8:	2b00      	cmp	r3, #0
 800c8da:	d005      	beq.n	800c8e8 <HAL_SD_IRQHandler+0x214>
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 800c8dc:	687b      	ldr	r3, [r7, #4]
 800c8de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c8e0:	f043 0220 	orr.w	r2, r3, #32
 800c8e4:	687b      	ldr	r3, [r7, #4]
 800c8e6:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_IT_TXUNDERR) != RESET)
 800c8e8:	687b      	ldr	r3, [r7, #4]
 800c8ea:	681b      	ldr	r3, [r3, #0]
 800c8ec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c8ee:	f003 0310 	and.w	r3, r3, #16
 800c8f2:	2b00      	cmp	r3, #0
 800c8f4:	d005      	beq.n	800c902 <HAL_SD_IRQHandler+0x22e>
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 800c8f6:	687b      	ldr	r3, [r7, #4]
 800c8f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c8fa:	f043 0210 	orr.w	r2, r3, #16
 800c8fe:	687b      	ldr	r3, [r7, #4]
 800c900:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800c902:	687b      	ldr	r3, [r7, #4]
 800c904:	681b      	ldr	r3, [r3, #0]
 800c906:	4a26      	ldr	r2, [pc, #152]	; (800c9a0 <HAL_SD_IRQHandler+0x2cc>)
 800c908:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT|\
 800c90a:	687b      	ldr	r3, [r7, #4]
 800c90c:	681b      	ldr	r3, [r3, #0]
 800c90e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800c910:	687b      	ldr	r3, [r7, #4]
 800c912:	681b      	ldr	r3, [r3, #0]
 800c914:	f422 729d 	bic.w	r2, r2, #314	; 0x13a
 800c918:	63da      	str	r2, [r3, #60]	; 0x3c
    __SDMMC_CMDTRANS_DISABLE( hsd->Instance);
 800c91a:	687b      	ldr	r3, [r7, #4]
 800c91c:	681b      	ldr	r3, [r3, #0]
 800c91e:	68da      	ldr	r2, [r3, #12]
 800c920:	687b      	ldr	r3, [r7, #4]
 800c922:	681b      	ldr	r3, [r3, #0]
 800c924:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800c928:	60da      	str	r2, [r3, #12]
    hsd->Instance->DCTRL |= SDMMC_DCTRL_FIFORST;
 800c92a:	687b      	ldr	r3, [r7, #4]
 800c92c:	681b      	ldr	r3, [r3, #0]
 800c92e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c930:	687b      	ldr	r3, [r7, #4]
 800c932:	681b      	ldr	r3, [r3, #0]
 800c934:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800c938:	62da      	str	r2, [r3, #44]	; 0x2c
    hsd->Instance->CMD |= SDMMC_CMD_CMDSTOP;
 800c93a:	687b      	ldr	r3, [r7, #4]
 800c93c:	681b      	ldr	r3, [r3, #0]
 800c93e:	68da      	ldr	r2, [r3, #12]
 800c940:	687b      	ldr	r3, [r7, #4]
 800c942:	681b      	ldr	r3, [r3, #0]
 800c944:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800c948:	60da      	str	r2, [r3, #12]
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800c94a:	687b      	ldr	r3, [r7, #4]
 800c94c:	681b      	ldr	r3, [r3, #0]
 800c94e:	4618      	mov	r0, r3
 800c950:	f003 fd74 	bl	801043c <SDMMC_CmdStopTransfer>
 800c954:	4602      	mov	r2, r0
 800c956:	687b      	ldr	r3, [r7, #4]
 800c958:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c95a:	431a      	orrs	r2, r3
 800c95c:	687b      	ldr	r3, [r7, #4]
 800c95e:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->Instance->CMD &= ~(SDMMC_CMD_CMDSTOP);
 800c960:	687b      	ldr	r3, [r7, #4]
 800c962:	681b      	ldr	r3, [r3, #0]
 800c964:	68da      	ldr	r2, [r3, #12]
 800c966:	687b      	ldr	r3, [r7, #4]
 800c968:	681b      	ldr	r3, [r3, #0]
 800c96a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800c96e:	60da      	str	r2, [r3, #12]
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DABORT);
 800c970:	687b      	ldr	r3, [r7, #4]
 800c972:	681b      	ldr	r3, [r3, #0]
 800c974:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800c978:	639a      	str	r2, [r3, #56]	; 0x38
    if((context & SD_CONTEXT_IT) != 0U)
 800c97a:	68fb      	ldr	r3, [r7, #12]
 800c97c:	f003 0308 	and.w	r3, r3, #8
 800c980:	2b00      	cmp	r3, #0
 800c982:	d00f      	beq.n	800c9a4 <HAL_SD_IRQHandler+0x2d0>
      hsd->State = HAL_SD_STATE_READY;
 800c984:	687b      	ldr	r3, [r7, #4]
 800c986:	2201      	movs	r2, #1
 800c988:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800c98c:	687b      	ldr	r3, [r7, #4]
 800c98e:	2200      	movs	r2, #0
 800c990:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_SD_ErrorCallback(hsd);
 800c992:	6878      	ldr	r0, [r7, #4]
 800c994:	f000 f854 	bl	800ca40 <HAL_SD_ErrorCallback>
}
 800c998:	e04e      	b.n	800ca38 <HAL_SD_IRQHandler+0x364>
 800c99a:	bf00      	nop
 800c99c:	ffff3ec5 	.word	0xffff3ec5
 800c9a0:	18000f3a 	.word	0x18000f3a
    else if((context & SD_CONTEXT_DMA) != 0U)
 800c9a4:	68fb      	ldr	r3, [r7, #12]
 800c9a6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c9aa:	2b00      	cmp	r3, #0
 800c9ac:	d044      	beq.n	800ca38 <HAL_SD_IRQHandler+0x364>
      if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 800c9ae:	687b      	ldr	r3, [r7, #4]
 800c9b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c9b2:	2b00      	cmp	r3, #0
 800c9b4:	d040      	beq.n	800ca38 <HAL_SD_IRQHandler+0x364>
        __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_IDMABTC);
 800c9b6:	687b      	ldr	r3, [r7, #4]
 800c9b8:	681b      	ldr	r3, [r3, #0]
 800c9ba:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800c9bc:	687b      	ldr	r3, [r7, #4]
 800c9be:	681b      	ldr	r3, [r3, #0]
 800c9c0:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 800c9c4:	63da      	str	r2, [r3, #60]	; 0x3c
        hsd->Instance->IDMACTRL = SDMMC_DISABLE_IDMA;
 800c9c6:	687b      	ldr	r3, [r7, #4]
 800c9c8:	681b      	ldr	r3, [r3, #0]
 800c9ca:	2200      	movs	r2, #0
 800c9cc:	651a      	str	r2, [r3, #80]	; 0x50
        hsd->State = HAL_SD_STATE_READY;
 800c9ce:	687b      	ldr	r3, [r7, #4]
 800c9d0:	2201      	movs	r2, #1
 800c9d2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        HAL_SD_ErrorCallback(hsd);
 800c9d6:	6878      	ldr	r0, [r7, #4]
 800c9d8:	f000 f832 	bl	800ca40 <HAL_SD_ErrorCallback>
}
 800c9dc:	e02c      	b.n	800ca38 <HAL_SD_IRQHandler+0x364>
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_IDMABTC) != RESET)
 800c9de:	687b      	ldr	r3, [r7, #4]
 800c9e0:	681b      	ldr	r3, [r3, #0]
 800c9e2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c9e4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800c9e8:	2b00      	cmp	r3, #0
 800c9ea:	d025      	beq.n	800ca38 <HAL_SD_IRQHandler+0x364>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_IDMABTC);
 800c9ec:	687b      	ldr	r3, [r7, #4]
 800c9ee:	681b      	ldr	r3, [r3, #0]
 800c9f0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c9f4:	639a      	str	r2, [r3, #56]	; 0x38
    if(READ_BIT(hsd->Instance->IDMACTRL, SDMMC_IDMA_IDMABACT) == 0U)
 800c9f6:	687b      	ldr	r3, [r7, #4]
 800c9f8:	681b      	ldr	r3, [r3, #0]
 800c9fa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c9fc:	f003 0304 	and.w	r3, r3, #4
 800ca00:	2b00      	cmp	r3, #0
 800ca02:	d10c      	bne.n	800ca1e <HAL_SD_IRQHandler+0x34a>
      if((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 800ca04:	68fb      	ldr	r3, [r7, #12]
 800ca06:	f003 0320 	and.w	r3, r3, #32
 800ca0a:	2b00      	cmp	r3, #0
 800ca0c:	d003      	beq.n	800ca16 <HAL_SD_IRQHandler+0x342>
        HAL_SDEx_Write_DMADoubleBuf1CpltCallback(hsd);
 800ca0e:	6878      	ldr	r0, [r7, #4]
 800ca10:	f001 f84e 	bl	800dab0 <HAL_SDEx_Write_DMADoubleBuf1CpltCallback>
}
 800ca14:	e010      	b.n	800ca38 <HAL_SD_IRQHandler+0x364>
        HAL_SDEx_Read_DMADoubleBuf1CpltCallback(hsd);
 800ca16:	6878      	ldr	r0, [r7, #4]
 800ca18:	f001 f836 	bl	800da88 <HAL_SDEx_Read_DMADoubleBuf1CpltCallback>
}
 800ca1c:	e00c      	b.n	800ca38 <HAL_SD_IRQHandler+0x364>
      if((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 800ca1e:	68fb      	ldr	r3, [r7, #12]
 800ca20:	f003 0320 	and.w	r3, r3, #32
 800ca24:	2b00      	cmp	r3, #0
 800ca26:	d003      	beq.n	800ca30 <HAL_SD_IRQHandler+0x35c>
        HAL_SDEx_Write_DMADoubleBuf0CpltCallback(hsd);
 800ca28:	6878      	ldr	r0, [r7, #4]
 800ca2a:	f001 f837 	bl	800da9c <HAL_SDEx_Write_DMADoubleBuf0CpltCallback>
}
 800ca2e:	e003      	b.n	800ca38 <HAL_SD_IRQHandler+0x364>
        HAL_SDEx_Read_DMADoubleBuf0CpltCallback(hsd);
 800ca30:	6878      	ldr	r0, [r7, #4]
 800ca32:	f001 f81f 	bl	800da74 <HAL_SDEx_Read_DMADoubleBuf0CpltCallback>
}
 800ca36:	e7ff      	b.n	800ca38 <HAL_SD_IRQHandler+0x364>
 800ca38:	bf00      	nop
 800ca3a:	3710      	adds	r7, #16
 800ca3c:	46bd      	mov	sp, r7
 800ca3e:	bd80      	pop	{r7, pc}

0800ca40 <HAL_SD_ErrorCallback>:
  * @brief SD error callbacks
  * @param hsd: Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_ErrorCallback(SD_HandleTypeDef *hsd)
{
 800ca40:	b480      	push	{r7}
 800ca42:	b083      	sub	sp, #12
 800ca44:	af00      	add	r7, sp, #0
 800ca46:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_ErrorCallback can be implemented in the user file
   */
}
 800ca48:	bf00      	nop
 800ca4a:	370c      	adds	r7, #12
 800ca4c:	46bd      	mov	sp, r7
 800ca4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca52:	4770      	bx	lr

0800ca54 <HAL_SD_DriveTransceiver_1_8V_Callback>:
  * @brief  Enable/Disable the SD Transceiver 1.8V Mode Callback.
  * @param  status: Voltage Switch State
  * @retval None
  */
__weak  void HAL_SD_DriveTransceiver_1_8V_Callback(FlagStatus status)
{
 800ca54:	b480      	push	{r7}
 800ca56:	b083      	sub	sp, #12
 800ca58:	af00      	add	r7, sp, #0
 800ca5a:	4603      	mov	r3, r0
 800ca5c:	71fb      	strb	r3, [r7, #7]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(status);
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_EnableTransceiver could be implemented in the user file
   */
}
 800ca5e:	bf00      	nop
 800ca60:	370c      	adds	r7, #12
 800ca62:	46bd      	mov	sp, r7
 800ca64:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca68:	4770      	bx	lr
	...

0800ca6c <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 800ca6c:	b480      	push	{r7}
 800ca6e:	b083      	sub	sp, #12
 800ca70:	af00      	add	r7, sp, #0
 800ca72:	6078      	str	r0, [r7, #4]
 800ca74:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 800ca76:	687b      	ldr	r3, [r7, #4]
 800ca78:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800ca7a:	0f9b      	lsrs	r3, r3, #30
 800ca7c:	b2da      	uxtb	r2, r3
 800ca7e:	683b      	ldr	r3, [r7, #0]
 800ca80:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 800ca82:	687b      	ldr	r3, [r7, #4]
 800ca84:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800ca86:	0e9b      	lsrs	r3, r3, #26
 800ca88:	b2db      	uxtb	r3, r3
 800ca8a:	f003 030f 	and.w	r3, r3, #15
 800ca8e:	b2da      	uxtb	r2, r3
 800ca90:	683b      	ldr	r3, [r7, #0]
 800ca92:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 800ca94:	687b      	ldr	r3, [r7, #4]
 800ca96:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800ca98:	0e1b      	lsrs	r3, r3, #24
 800ca9a:	b2db      	uxtb	r3, r3
 800ca9c:	f003 0303 	and.w	r3, r3, #3
 800caa0:	b2da      	uxtb	r2, r3
 800caa2:	683b      	ldr	r3, [r7, #0]
 800caa4:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 800caa6:	687b      	ldr	r3, [r7, #4]
 800caa8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800caaa:	0c1b      	lsrs	r3, r3, #16
 800caac:	b2da      	uxtb	r2, r3
 800caae:	683b      	ldr	r3, [r7, #0]
 800cab0:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 800cab2:	687b      	ldr	r3, [r7, #4]
 800cab4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800cab6:	0a1b      	lsrs	r3, r3, #8
 800cab8:	b2da      	uxtb	r2, r3
 800caba:	683b      	ldr	r3, [r7, #0]
 800cabc:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 800cabe:	687b      	ldr	r3, [r7, #4]
 800cac0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800cac2:	b2da      	uxtb	r2, r3
 800cac4:	683b      	ldr	r3, [r7, #0]
 800cac6:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 800cac8:	687b      	ldr	r3, [r7, #4]
 800caca:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800cacc:	0d1b      	lsrs	r3, r3, #20
 800cace:	b29a      	uxth	r2, r3
 800cad0:	683b      	ldr	r3, [r7, #0]
 800cad2:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 800cad4:	687b      	ldr	r3, [r7, #4]
 800cad6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800cad8:	0c1b      	lsrs	r3, r3, #16
 800cada:	b2db      	uxtb	r3, r3
 800cadc:	f003 030f 	and.w	r3, r3, #15
 800cae0:	b2da      	uxtb	r2, r3
 800cae2:	683b      	ldr	r3, [r7, #0]
 800cae4:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 800cae6:	687b      	ldr	r3, [r7, #4]
 800cae8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800caea:	0bdb      	lsrs	r3, r3, #15
 800caec:	b2db      	uxtb	r3, r3
 800caee:	f003 0301 	and.w	r3, r3, #1
 800caf2:	b2da      	uxtb	r2, r3
 800caf4:	683b      	ldr	r3, [r7, #0]
 800caf6:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 800caf8:	687b      	ldr	r3, [r7, #4]
 800cafa:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800cafc:	0b9b      	lsrs	r3, r3, #14
 800cafe:	b2db      	uxtb	r3, r3
 800cb00:	f003 0301 	and.w	r3, r3, #1
 800cb04:	b2da      	uxtb	r2, r3
 800cb06:	683b      	ldr	r3, [r7, #0]
 800cb08:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 800cb0a:	687b      	ldr	r3, [r7, #4]
 800cb0c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800cb0e:	0b5b      	lsrs	r3, r3, #13
 800cb10:	b2db      	uxtb	r3, r3
 800cb12:	f003 0301 	and.w	r3, r3, #1
 800cb16:	b2da      	uxtb	r2, r3
 800cb18:	683b      	ldr	r3, [r7, #0]
 800cb1a:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 800cb1c:	687b      	ldr	r3, [r7, #4]
 800cb1e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800cb20:	0b1b      	lsrs	r3, r3, #12
 800cb22:	b2db      	uxtb	r3, r3
 800cb24:	f003 0301 	and.w	r3, r3, #1
 800cb28:	b2da      	uxtb	r2, r3
 800cb2a:	683b      	ldr	r3, [r7, #0]
 800cb2c:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 800cb2e:	683b      	ldr	r3, [r7, #0]
 800cb30:	2200      	movs	r2, #0
 800cb32:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 800cb34:	687b      	ldr	r3, [r7, #4]
 800cb36:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cb38:	2b00      	cmp	r3, #0
 800cb3a:	d163      	bne.n	800cc04 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 800cb3c:	687b      	ldr	r3, [r7, #4]
 800cb3e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800cb40:	009a      	lsls	r2, r3, #2
 800cb42:	f640 73fc 	movw	r3, #4092	; 0xffc
 800cb46:	4013      	ands	r3, r2
 800cb48:	687a      	ldr	r2, [r7, #4]
 800cb4a:	6e92      	ldr	r2, [r2, #104]	; 0x68
 800cb4c:	0f92      	lsrs	r2, r2, #30
 800cb4e:	431a      	orrs	r2, r3
 800cb50:	683b      	ldr	r3, [r7, #0]
 800cb52:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 800cb54:	687b      	ldr	r3, [r7, #4]
 800cb56:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800cb58:	0edb      	lsrs	r3, r3, #27
 800cb5a:	b2db      	uxtb	r3, r3
 800cb5c:	f003 0307 	and.w	r3, r3, #7
 800cb60:	b2da      	uxtb	r2, r3
 800cb62:	683b      	ldr	r3, [r7, #0]
 800cb64:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 800cb66:	687b      	ldr	r3, [r7, #4]
 800cb68:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800cb6a:	0e1b      	lsrs	r3, r3, #24
 800cb6c:	b2db      	uxtb	r3, r3
 800cb6e:	f003 0307 	and.w	r3, r3, #7
 800cb72:	b2da      	uxtb	r2, r3
 800cb74:	683b      	ldr	r3, [r7, #0]
 800cb76:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 800cb78:	687b      	ldr	r3, [r7, #4]
 800cb7a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800cb7c:	0d5b      	lsrs	r3, r3, #21
 800cb7e:	b2db      	uxtb	r3, r3
 800cb80:	f003 0307 	and.w	r3, r3, #7
 800cb84:	b2da      	uxtb	r2, r3
 800cb86:	683b      	ldr	r3, [r7, #0]
 800cb88:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 800cb8a:	687b      	ldr	r3, [r7, #4]
 800cb8c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800cb8e:	0c9b      	lsrs	r3, r3, #18
 800cb90:	b2db      	uxtb	r3, r3
 800cb92:	f003 0307 	and.w	r3, r3, #7
 800cb96:	b2da      	uxtb	r2, r3
 800cb98:	683b      	ldr	r3, [r7, #0]
 800cb9a:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 800cb9c:	687b      	ldr	r3, [r7, #4]
 800cb9e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800cba0:	0bdb      	lsrs	r3, r3, #15
 800cba2:	b2db      	uxtb	r3, r3
 800cba4:	f003 0307 	and.w	r3, r3, #7
 800cba8:	b2da      	uxtb	r2, r3
 800cbaa:	683b      	ldr	r3, [r7, #0]
 800cbac:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 800cbae:	683b      	ldr	r3, [r7, #0]
 800cbb0:	691b      	ldr	r3, [r3, #16]
 800cbb2:	1c5a      	adds	r2, r3, #1
 800cbb4:	687b      	ldr	r3, [r7, #4]
 800cbb6:	64da      	str	r2, [r3, #76]	; 0x4c
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 800cbb8:	683b      	ldr	r3, [r7, #0]
 800cbba:	7e1b      	ldrb	r3, [r3, #24]
 800cbbc:	b2db      	uxtb	r3, r3
 800cbbe:	f003 0307 	and.w	r3, r3, #7
 800cbc2:	3302      	adds	r3, #2
 800cbc4:	2201      	movs	r2, #1
 800cbc6:	fa02 f303 	lsl.w	r3, r2, r3
 800cbca:	687a      	ldr	r2, [r7, #4]
 800cbcc:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 800cbce:	fb02 f203 	mul.w	r2, r2, r3
 800cbd2:	687b      	ldr	r3, [r7, #4]
 800cbd4:	64da      	str	r2, [r3, #76]	; 0x4c
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 800cbd6:	683b      	ldr	r3, [r7, #0]
 800cbd8:	7a1b      	ldrb	r3, [r3, #8]
 800cbda:	b2db      	uxtb	r3, r3
 800cbdc:	f003 030f 	and.w	r3, r3, #15
 800cbe0:	2201      	movs	r2, #1
 800cbe2:	409a      	lsls	r2, r3
 800cbe4:	687b      	ldr	r3, [r7, #4]
 800cbe6:	651a      	str	r2, [r3, #80]	; 0x50

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 800cbe8:	687b      	ldr	r3, [r7, #4]
 800cbea:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800cbec:	687a      	ldr	r2, [r7, #4]
 800cbee:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800cbf0:	0a52      	lsrs	r2, r2, #9
 800cbf2:	fb02 f203 	mul.w	r2, r2, r3
 800cbf6:	687b      	ldr	r3, [r7, #4]
 800cbf8:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.LogBlockSize = 512U;
 800cbfa:	687b      	ldr	r3, [r7, #4]
 800cbfc:	f44f 7200 	mov.w	r2, #512	; 0x200
 800cc00:	659a      	str	r2, [r3, #88]	; 0x58
 800cc02:	e031      	b.n	800cc68 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 800cc04:	687b      	ldr	r3, [r7, #4]
 800cc06:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cc08:	2b01      	cmp	r3, #1
 800cc0a:	d11d      	bne.n	800cc48 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 800cc0c:	687b      	ldr	r3, [r7, #4]
 800cc0e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800cc10:	041b      	lsls	r3, r3, #16
 800cc12:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 800cc16:	687b      	ldr	r3, [r7, #4]
 800cc18:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800cc1a:	0c1b      	lsrs	r3, r3, #16
 800cc1c:	431a      	orrs	r2, r3
 800cc1e:	683b      	ldr	r3, [r7, #0]
 800cc20:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 800cc22:	683b      	ldr	r3, [r7, #0]
 800cc24:	691b      	ldr	r3, [r3, #16]
 800cc26:	3301      	adds	r3, #1
 800cc28:	029a      	lsls	r2, r3, #10
 800cc2a:	687b      	ldr	r3, [r7, #4]
 800cc2c:	64da      	str	r2, [r3, #76]	; 0x4c
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 800cc2e:	687b      	ldr	r3, [r7, #4]
 800cc30:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800cc32:	687b      	ldr	r3, [r7, #4]
 800cc34:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockSize = 512U;
 800cc36:	687b      	ldr	r3, [r7, #4]
 800cc38:	f44f 7200 	mov.w	r2, #512	; 0x200
 800cc3c:	651a      	str	r2, [r3, #80]	; 0x50
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 800cc3e:	687b      	ldr	r3, [r7, #4]
 800cc40:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800cc42:	687b      	ldr	r3, [r7, #4]
 800cc44:	659a      	str	r2, [r3, #88]	; 0x58
 800cc46:	e00f      	b.n	800cc68 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800cc48:	687b      	ldr	r3, [r7, #4]
 800cc4a:	681b      	ldr	r3, [r3, #0]
 800cc4c:	4a58      	ldr	r2, [pc, #352]	; (800cdb0 <HAL_SD_GetCardCSD+0x344>)
 800cc4e:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800cc50:	687b      	ldr	r3, [r7, #4]
 800cc52:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cc54:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800cc58:	687b      	ldr	r3, [r7, #4]
 800cc5a:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 800cc5c:	687b      	ldr	r3, [r7, #4]
 800cc5e:	2201      	movs	r2, #1
 800cc60:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 800cc64:	2301      	movs	r3, #1
 800cc66:	e09d      	b.n	800cda4 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 800cc68:	687b      	ldr	r3, [r7, #4]
 800cc6a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800cc6c:	0b9b      	lsrs	r3, r3, #14
 800cc6e:	b2db      	uxtb	r3, r3
 800cc70:	f003 0301 	and.w	r3, r3, #1
 800cc74:	b2da      	uxtb	r2, r3
 800cc76:	683b      	ldr	r3, [r7, #0]
 800cc78:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 800cc7a:	687b      	ldr	r3, [r7, #4]
 800cc7c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800cc7e:	09db      	lsrs	r3, r3, #7
 800cc80:	b2db      	uxtb	r3, r3
 800cc82:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800cc86:	b2da      	uxtb	r2, r3
 800cc88:	683b      	ldr	r3, [r7, #0]
 800cc8a:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 800cc8c:	687b      	ldr	r3, [r7, #4]
 800cc8e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800cc90:	b2db      	uxtb	r3, r3
 800cc92:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800cc96:	b2da      	uxtb	r2, r3
 800cc98:	683b      	ldr	r3, [r7, #0]
 800cc9a:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 800cc9c:	687b      	ldr	r3, [r7, #4]
 800cc9e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800cca0:	0fdb      	lsrs	r3, r3, #31
 800cca2:	b2da      	uxtb	r2, r3
 800cca4:	683b      	ldr	r3, [r7, #0]
 800cca6:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 800cca8:	687b      	ldr	r3, [r7, #4]
 800ccaa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ccac:	0f5b      	lsrs	r3, r3, #29
 800ccae:	b2db      	uxtb	r3, r3
 800ccb0:	f003 0303 	and.w	r3, r3, #3
 800ccb4:	b2da      	uxtb	r2, r3
 800ccb6:	683b      	ldr	r3, [r7, #0]
 800ccb8:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 800ccba:	687b      	ldr	r3, [r7, #4]
 800ccbc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ccbe:	0e9b      	lsrs	r3, r3, #26
 800ccc0:	b2db      	uxtb	r3, r3
 800ccc2:	f003 0307 	and.w	r3, r3, #7
 800ccc6:	b2da      	uxtb	r2, r3
 800ccc8:	683b      	ldr	r3, [r7, #0]
 800ccca:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 800cccc:	687b      	ldr	r3, [r7, #4]
 800ccce:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ccd0:	0d9b      	lsrs	r3, r3, #22
 800ccd2:	b2db      	uxtb	r3, r3
 800ccd4:	f003 030f 	and.w	r3, r3, #15
 800ccd8:	b2da      	uxtb	r2, r3
 800ccda:	683b      	ldr	r3, [r7, #0]
 800ccdc:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 800ccde:	687b      	ldr	r3, [r7, #4]
 800cce0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800cce2:	0d5b      	lsrs	r3, r3, #21
 800cce4:	b2db      	uxtb	r3, r3
 800cce6:	f003 0301 	and.w	r3, r3, #1
 800ccea:	b2da      	uxtb	r2, r3
 800ccec:	683b      	ldr	r3, [r7, #0]
 800ccee:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 800ccf2:	683b      	ldr	r3, [r7, #0]
 800ccf4:	2200      	movs	r2, #0
 800ccf6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 800ccfa:	687b      	ldr	r3, [r7, #4]
 800ccfc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ccfe:	0c1b      	lsrs	r3, r3, #16
 800cd00:	b2db      	uxtb	r3, r3
 800cd02:	f003 0301 	and.w	r3, r3, #1
 800cd06:	b2da      	uxtb	r2, r3
 800cd08:	683b      	ldr	r3, [r7, #0]
 800cd0a:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 800cd0e:	687b      	ldr	r3, [r7, #4]
 800cd10:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800cd12:	0bdb      	lsrs	r3, r3, #15
 800cd14:	b2db      	uxtb	r3, r3
 800cd16:	f003 0301 	and.w	r3, r3, #1
 800cd1a:	b2da      	uxtb	r2, r3
 800cd1c:	683b      	ldr	r3, [r7, #0]
 800cd1e:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 800cd22:	687b      	ldr	r3, [r7, #4]
 800cd24:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800cd26:	0b9b      	lsrs	r3, r3, #14
 800cd28:	b2db      	uxtb	r3, r3
 800cd2a:	f003 0301 	and.w	r3, r3, #1
 800cd2e:	b2da      	uxtb	r2, r3
 800cd30:	683b      	ldr	r3, [r7, #0]
 800cd32:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 800cd36:	687b      	ldr	r3, [r7, #4]
 800cd38:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800cd3a:	0b5b      	lsrs	r3, r3, #13
 800cd3c:	b2db      	uxtb	r3, r3
 800cd3e:	f003 0301 	and.w	r3, r3, #1
 800cd42:	b2da      	uxtb	r2, r3
 800cd44:	683b      	ldr	r3, [r7, #0]
 800cd46:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 800cd4a:	687b      	ldr	r3, [r7, #4]
 800cd4c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800cd4e:	0b1b      	lsrs	r3, r3, #12
 800cd50:	b2db      	uxtb	r3, r3
 800cd52:	f003 0301 	and.w	r3, r3, #1
 800cd56:	b2da      	uxtb	r2, r3
 800cd58:	683b      	ldr	r3, [r7, #0]
 800cd5a:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 800cd5e:	687b      	ldr	r3, [r7, #4]
 800cd60:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800cd62:	0a9b      	lsrs	r3, r3, #10
 800cd64:	b2db      	uxtb	r3, r3
 800cd66:	f003 0303 	and.w	r3, r3, #3
 800cd6a:	b2da      	uxtb	r2, r3
 800cd6c:	683b      	ldr	r3, [r7, #0]
 800cd6e:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 800cd72:	687b      	ldr	r3, [r7, #4]
 800cd74:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800cd76:	0a1b      	lsrs	r3, r3, #8
 800cd78:	b2db      	uxtb	r3, r3
 800cd7a:	f003 0303 	and.w	r3, r3, #3
 800cd7e:	b2da      	uxtb	r2, r3
 800cd80:	683b      	ldr	r3, [r7, #0]
 800cd82:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 800cd86:	687b      	ldr	r3, [r7, #4]
 800cd88:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800cd8a:	085b      	lsrs	r3, r3, #1
 800cd8c:	b2db      	uxtb	r3, r3
 800cd8e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800cd92:	b2da      	uxtb	r2, r3
 800cd94:	683b      	ldr	r3, [r7, #0]
 800cd96:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 800cd9a:	683b      	ldr	r3, [r7, #0]
 800cd9c:	2201      	movs	r2, #1
 800cd9e:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 800cda2:	2300      	movs	r3, #0
}
 800cda4:	4618      	mov	r0, r3
 800cda6:	370c      	adds	r7, #12
 800cda8:	46bd      	mov	sp, r7
 800cdaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cdae:	4770      	bx	lr
 800cdb0:	1fe00fff 	.word	0x1fe00fff

0800cdb4 <HAL_SD_GetCardStatus>:
  * @param  pStatus: Pointer to the HAL_SD_CardStatusTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardStatus(SD_HandleTypeDef *hsd, HAL_SD_CardStatusTypeDef *pStatus)
{
 800cdb4:	b580      	push	{r7, lr}
 800cdb6:	b094      	sub	sp, #80	; 0x50
 800cdb8:	af00      	add	r7, sp, #0
 800cdba:	6078      	str	r0, [r7, #4]
 800cdbc:	6039      	str	r1, [r7, #0]
  uint32_t sd_status[16];
  uint32_t errorstate;
  HAL_StatusTypeDef status = HAL_OK;
 800cdbe:	2300      	movs	r3, #0
 800cdc0:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f

  errorstate = SD_SendSDStatus(hsd, sd_status);
 800cdc4:	f107 0308 	add.w	r3, r7, #8
 800cdc8:	4619      	mov	r1, r3
 800cdca:	6878      	ldr	r0, [r7, #4]
 800cdcc:	f000 fb64 	bl	800d498 <SD_SendSDStatus>
 800cdd0:	64b8      	str	r0, [r7, #72]	; 0x48
  if(errorstate != HAL_SD_ERROR_NONE)
 800cdd2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800cdd4:	2b00      	cmp	r3, #0
 800cdd6:	d011      	beq.n	800cdfc <HAL_SD_GetCardStatus+0x48>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800cdd8:	687b      	ldr	r3, [r7, #4]
 800cdda:	681b      	ldr	r3, [r3, #0]
 800cddc:	4a4f      	ldr	r2, [pc, #316]	; (800cf1c <HAL_SD_GetCardStatus+0x168>)
 800cdde:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 800cde0:	687b      	ldr	r3, [r7, #4]
 800cde2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800cde4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800cde6:	431a      	orrs	r2, r3
 800cde8:	687b      	ldr	r3, [r7, #4]
 800cdea:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 800cdec:	687b      	ldr	r3, [r7, #4]
 800cdee:	2201      	movs	r2, #1
 800cdf0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    status = HAL_ERROR;
 800cdf4:	2301      	movs	r3, #1
 800cdf6:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 800cdfa:	e070      	b.n	800cede <HAL_SD_GetCardStatus+0x12a>
  }
  else
  {
    pStatus->DataBusWidth = (uint8_t)((sd_status[0] & 0xC0U) >> 6U);
 800cdfc:	68bb      	ldr	r3, [r7, #8]
 800cdfe:	099b      	lsrs	r3, r3, #6
 800ce00:	b2db      	uxtb	r3, r3
 800ce02:	f003 0303 	and.w	r3, r3, #3
 800ce06:	b2da      	uxtb	r2, r3
 800ce08:	683b      	ldr	r3, [r7, #0]
 800ce0a:	701a      	strb	r2, [r3, #0]

    pStatus->SecuredMode = (uint8_t)((sd_status[0] & 0x20U) >> 5U);
 800ce0c:	68bb      	ldr	r3, [r7, #8]
 800ce0e:	095b      	lsrs	r3, r3, #5
 800ce10:	b2db      	uxtb	r3, r3
 800ce12:	f003 0301 	and.w	r3, r3, #1
 800ce16:	b2da      	uxtb	r2, r3
 800ce18:	683b      	ldr	r3, [r7, #0]
 800ce1a:	705a      	strb	r2, [r3, #1]

    pStatus->CardType = (uint16_t)(((sd_status[0] & 0x00FF0000U) >> 8U) | ((sd_status[0] & 0xFF000000U) >> 24U));
 800ce1c:	68bb      	ldr	r3, [r7, #8]
 800ce1e:	0a1b      	lsrs	r3, r3, #8
 800ce20:	b29b      	uxth	r3, r3
 800ce22:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800ce26:	b29a      	uxth	r2, r3
 800ce28:	68bb      	ldr	r3, [r7, #8]
 800ce2a:	0e1b      	lsrs	r3, r3, #24
 800ce2c:	b29b      	uxth	r3, r3
 800ce2e:	4313      	orrs	r3, r2
 800ce30:	b29a      	uxth	r2, r3
 800ce32:	683b      	ldr	r3, [r7, #0]
 800ce34:	805a      	strh	r2, [r3, #2]

    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 800ce36:	68fb      	ldr	r3, [r7, #12]
 800ce38:	061a      	lsls	r2, r3, #24
 800ce3a:	68fb      	ldr	r3, [r7, #12]
 800ce3c:	021b      	lsls	r3, r3, #8
 800ce3e:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800ce42:	431a      	orrs	r2, r3
                                  ((sd_status[1] & 0xFF0000U) >> 8U) | ((sd_status[1] & 0xFF000000U) >> 24U));
 800ce44:	68fb      	ldr	r3, [r7, #12]
 800ce46:	0a1b      	lsrs	r3, r3, #8
 800ce48:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 800ce4c:	431a      	orrs	r2, r3
                                  ((sd_status[1] & 0xFF0000U) >> 8U) | ((sd_status[1] & 0xFF000000U) >> 24U));
 800ce4e:	68fb      	ldr	r3, [r7, #12]
 800ce50:	0e1b      	lsrs	r3, r3, #24
 800ce52:	431a      	orrs	r2, r3
    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 800ce54:	683b      	ldr	r3, [r7, #0]
 800ce56:	605a      	str	r2, [r3, #4]

    pStatus->SpeedClass = (uint8_t)(sd_status[2] & 0xFFU);
 800ce58:	693b      	ldr	r3, [r7, #16]
 800ce5a:	b2da      	uxtb	r2, r3
 800ce5c:	683b      	ldr	r3, [r7, #0]
 800ce5e:	721a      	strb	r2, [r3, #8]

    pStatus->PerformanceMove = (uint8_t)((sd_status[2] & 0xFF00U) >> 8U);
 800ce60:	693b      	ldr	r3, [r7, #16]
 800ce62:	0a1b      	lsrs	r3, r3, #8
 800ce64:	b2da      	uxtb	r2, r3
 800ce66:	683b      	ldr	r3, [r7, #0]
 800ce68:	725a      	strb	r2, [r3, #9]

    pStatus->AllocationUnitSize = (uint8_t)((sd_status[2] & 0xF00000U) >> 20U);
 800ce6a:	693b      	ldr	r3, [r7, #16]
 800ce6c:	0d1b      	lsrs	r3, r3, #20
 800ce6e:	b2db      	uxtb	r3, r3
 800ce70:	f003 030f 	and.w	r3, r3, #15
 800ce74:	b2da      	uxtb	r2, r3
 800ce76:	683b      	ldr	r3, [r7, #0]
 800ce78:	729a      	strb	r2, [r3, #10]

    pStatus->EraseSize = (uint16_t)(((sd_status[2] & 0xFF000000U) >> 16U) | (sd_status[3] & 0xFFU));
 800ce7a:	693b      	ldr	r3, [r7, #16]
 800ce7c:	0c1b      	lsrs	r3, r3, #16
 800ce7e:	b29b      	uxth	r3, r3
 800ce80:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800ce84:	b29a      	uxth	r2, r3
 800ce86:	697b      	ldr	r3, [r7, #20]
 800ce88:	b29b      	uxth	r3, r3
 800ce8a:	b2db      	uxtb	r3, r3
 800ce8c:	b29b      	uxth	r3, r3
 800ce8e:	4313      	orrs	r3, r2
 800ce90:	b29a      	uxth	r2, r3
 800ce92:	683b      	ldr	r3, [r7, #0]
 800ce94:	819a      	strh	r2, [r3, #12]

    pStatus->EraseTimeout = (uint8_t)((sd_status[3] & 0xFC00U) >> 10U);
 800ce96:	697b      	ldr	r3, [r7, #20]
 800ce98:	0a9b      	lsrs	r3, r3, #10
 800ce9a:	b2db      	uxtb	r3, r3
 800ce9c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800cea0:	b2da      	uxtb	r2, r3
 800cea2:	683b      	ldr	r3, [r7, #0]
 800cea4:	739a      	strb	r2, [r3, #14]

    pStatus->EraseOffset = (uint8_t)((sd_status[3] & 0x0300U) >> 8U);
 800cea6:	697b      	ldr	r3, [r7, #20]
 800cea8:	0a1b      	lsrs	r3, r3, #8
 800ceaa:	b2db      	uxtb	r3, r3
 800ceac:	f003 0303 	and.w	r3, r3, #3
 800ceb0:	b2da      	uxtb	r2, r3
 800ceb2:	683b      	ldr	r3, [r7, #0]
 800ceb4:	73da      	strb	r2, [r3, #15]

    pStatus->UhsSpeedGrade = (uint8_t)((sd_status[3] & 0x00F0U) >> 4U);
 800ceb6:	697b      	ldr	r3, [r7, #20]
 800ceb8:	091b      	lsrs	r3, r3, #4
 800ceba:	b2db      	uxtb	r3, r3
 800cebc:	f003 030f 	and.w	r3, r3, #15
 800cec0:	b2da      	uxtb	r2, r3
 800cec2:	683b      	ldr	r3, [r7, #0]
 800cec4:	741a      	strb	r2, [r3, #16]
    pStatus->UhsAllocationUnitSize = (uint8_t)(sd_status[3] & 0x000FU) ;
 800cec6:	697b      	ldr	r3, [r7, #20]
 800cec8:	b2db      	uxtb	r3, r3
 800ceca:	f003 030f 	and.w	r3, r3, #15
 800cece:	b2da      	uxtb	r2, r3
 800ced0:	683b      	ldr	r3, [r7, #0]
 800ced2:	745a      	strb	r2, [r3, #17]
    pStatus->VideoSpeedClass = (uint8_t)((sd_status[4] & 0xFF000000U) >> 24U);
 800ced4:	69bb      	ldr	r3, [r7, #24]
 800ced6:	0e1b      	lsrs	r3, r3, #24
 800ced8:	b2da      	uxtb	r2, r3
 800ceda:	683b      	ldr	r3, [r7, #0]
 800cedc:	749a      	strb	r2, [r3, #18]
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800cede:	687b      	ldr	r3, [r7, #4]
 800cee0:	681b      	ldr	r3, [r3, #0]
 800cee2:	f44f 7100 	mov.w	r1, #512	; 0x200
 800cee6:	4618      	mov	r0, r3
 800cee8:	f003 f9f8 	bl	80102dc <SDMMC_CmdBlockLength>
 800ceec:	64b8      	str	r0, [r7, #72]	; 0x48
  if(errorstate != HAL_SD_ERROR_NONE)
 800ceee:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800cef0:	2b00      	cmp	r3, #0
 800cef2:	d00d      	beq.n	800cf10 <HAL_SD_GetCardStatus+0x15c>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800cef4:	687b      	ldr	r3, [r7, #4]
 800cef6:	681b      	ldr	r3, [r3, #0]
 800cef8:	4a08      	ldr	r2, [pc, #32]	; (800cf1c <HAL_SD_GetCardStatus+0x168>)
 800cefa:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode = errorstate;
 800cefc:	687b      	ldr	r3, [r7, #4]
 800cefe:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800cf00:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 800cf02:	687b      	ldr	r3, [r7, #4]
 800cf04:	2201      	movs	r2, #1
 800cf06:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    status = HAL_ERROR;
 800cf0a:	2301      	movs	r3, #1
 800cf0c:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
  }

  return status;
 800cf10:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
}
 800cf14:	4618      	mov	r0, r3
 800cf16:	3750      	adds	r7, #80	; 0x50
 800cf18:	46bd      	mov	sp, r7
 800cf1a:	bd80      	pop	{r7, pc}
 800cf1c:	1fe00fff 	.word	0x1fe00fff

0800cf20 <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 800cf20:	b480      	push	{r7}
 800cf22:	b083      	sub	sp, #12
 800cf24:	af00      	add	r7, sp, #0
 800cf26:	6078      	str	r0, [r7, #4]
 800cf28:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 800cf2a:	687b      	ldr	r3, [r7, #4]
 800cf2c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800cf2e:	683b      	ldr	r3, [r7, #0]
 800cf30:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 800cf32:	687b      	ldr	r3, [r7, #4]
 800cf34:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800cf36:	683b      	ldr	r3, [r7, #0]
 800cf38:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 800cf3a:	687b      	ldr	r3, [r7, #4]
 800cf3c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800cf3e:	683b      	ldr	r3, [r7, #0]
 800cf40:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 800cf42:	687b      	ldr	r3, [r7, #4]
 800cf44:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800cf46:	683b      	ldr	r3, [r7, #0]
 800cf48:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 800cf4a:	687b      	ldr	r3, [r7, #4]
 800cf4c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800cf4e:	683b      	ldr	r3, [r7, #0]
 800cf50:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 800cf52:	687b      	ldr	r3, [r7, #4]
 800cf54:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800cf56:	683b      	ldr	r3, [r7, #0]
 800cf58:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 800cf5a:	687b      	ldr	r3, [r7, #4]
 800cf5c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800cf5e:	683b      	ldr	r3, [r7, #0]
 800cf60:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 800cf62:	687b      	ldr	r3, [r7, #4]
 800cf64:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800cf66:	683b      	ldr	r3, [r7, #0]
 800cf68:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 800cf6a:	2300      	movs	r3, #0
}
 800cf6c:	4618      	mov	r0, r3
 800cf6e:	370c      	adds	r7, #12
 800cf70:	46bd      	mov	sp, r7
 800cf72:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf76:	4770      	bx	lr

0800cf78 <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDMMC_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDMMC_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 800cf78:	b5b0      	push	{r4, r5, r7, lr}
 800cf7a:	b08e      	sub	sp, #56	; 0x38
 800cf7c:	af04      	add	r7, sp, #16
 800cf7e:	6078      	str	r0, [r7, #4]
 800cf80:	6039      	str	r1, [r7, #0]
  SDMMC_InitTypeDef Init;
  uint32_t errorstate;
  HAL_StatusTypeDef status = HAL_OK;
 800cf82:	2300      	movs	r3, #0
 800cf84:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  /* Check the parameters */
  assert_param(IS_SDMMC_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 800cf88:	687b      	ldr	r3, [r7, #4]
 800cf8a:	2203      	movs	r2, #3
 800cf8c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(hsd->SdCard.CardType != CARD_SECURED)
 800cf90:	687b      	ldr	r3, [r7, #4]
 800cf92:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cf94:	2b03      	cmp	r3, #3
 800cf96:	d02e      	beq.n	800cff6 <HAL_SD_ConfigWideBusOperation+0x7e>
  {
    if(WideMode == SDMMC_BUS_WIDE_8B)
 800cf98:	683b      	ldr	r3, [r7, #0]
 800cf9a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800cf9e:	d106      	bne.n	800cfae <HAL_SD_ConfigWideBusOperation+0x36>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800cfa0:	687b      	ldr	r3, [r7, #4]
 800cfa2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cfa4:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800cfa8:	687b      	ldr	r3, [r7, #4]
 800cfaa:	639a      	str	r2, [r3, #56]	; 0x38
 800cfac:	e029      	b.n	800d002 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDMMC_BUS_WIDE_4B)
 800cfae:	683b      	ldr	r3, [r7, #0]
 800cfb0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800cfb4:	d10a      	bne.n	800cfcc <HAL_SD_ConfigWideBusOperation+0x54>
    {
      errorstate = SD_WideBus_Enable(hsd);
 800cfb6:	6878      	ldr	r0, [r7, #4]
 800cfb8:	f000 fb66 	bl	800d688 <SD_WideBus_Enable>
 800cfbc:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 800cfbe:	687b      	ldr	r3, [r7, #4]
 800cfc0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800cfc2:	6a3b      	ldr	r3, [r7, #32]
 800cfc4:	431a      	orrs	r2, r3
 800cfc6:	687b      	ldr	r3, [r7, #4]
 800cfc8:	639a      	str	r2, [r3, #56]	; 0x38
 800cfca:	e01a      	b.n	800d002 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDMMC_BUS_WIDE_1B)
 800cfcc:	683b      	ldr	r3, [r7, #0]
 800cfce:	2b00      	cmp	r3, #0
 800cfd0:	d10a      	bne.n	800cfe8 <HAL_SD_ConfigWideBusOperation+0x70>
    {
      errorstate = SD_WideBus_Disable(hsd);
 800cfd2:	6878      	ldr	r0, [r7, #4]
 800cfd4:	f000 fba3 	bl	800d71e <SD_WideBus_Disable>
 800cfd8:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 800cfda:	687b      	ldr	r3, [r7, #4]
 800cfdc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800cfde:	6a3b      	ldr	r3, [r7, #32]
 800cfe0:	431a      	orrs	r2, r3
 800cfe2:	687b      	ldr	r3, [r7, #4]
 800cfe4:	639a      	str	r2, [r3, #56]	; 0x38
 800cfe6:	e00c      	b.n	800d002 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800cfe8:	687b      	ldr	r3, [r7, #4]
 800cfea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cfec:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800cff0:	687b      	ldr	r3, [r7, #4]
 800cff2:	639a      	str	r2, [r3, #56]	; 0x38
 800cff4:	e005      	b.n	800d002 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
  }
  else
  {
    /* MMC Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800cff6:	687b      	ldr	r3, [r7, #4]
 800cff8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cffa:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800cffe:	687b      	ldr	r3, [r7, #4]
 800d000:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 800d002:	687b      	ldr	r3, [r7, #4]
 800d004:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d006:	2b00      	cmp	r3, #0
 800d008:	d007      	beq.n	800d01a <HAL_SD_ConfigWideBusOperation+0xa2>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800d00a:	687b      	ldr	r3, [r7, #4]
 800d00c:	681b      	ldr	r3, [r3, #0]
 800d00e:	4a2e      	ldr	r2, [pc, #184]	; (800d0c8 <HAL_SD_ConfigWideBusOperation+0x150>)
 800d010:	639a      	str	r2, [r3, #56]	; 0x38
    status = HAL_ERROR;
 800d012:	2301      	movs	r3, #1
 800d014:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800d018:	e034      	b.n	800d084 <HAL_SD_ConfigWideBusOperation+0x10c>
  }
  else
  {
    /* Configure the SDMMC peripheral */
    Init.ClockEdge           = hsd->Init.ClockEdge;
 800d01a:	687b      	ldr	r3, [r7, #4]
 800d01c:	685b      	ldr	r3, [r3, #4]
 800d01e:	60bb      	str	r3, [r7, #8]
    Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 800d020:	687b      	ldr	r3, [r7, #4]
 800d022:	689b      	ldr	r3, [r3, #8]
 800d024:	60fb      	str	r3, [r7, #12]
    Init.BusWide             = WideMode;
 800d026:	683b      	ldr	r3, [r7, #0]
 800d028:	613b      	str	r3, [r7, #16]
    Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 800d02a:	687b      	ldr	r3, [r7, #4]
 800d02c:	691b      	ldr	r3, [r3, #16]
 800d02e:	617b      	str	r3, [r7, #20]

    /* Check if user Clock div < Normal speed 25Mhz, no change in Clockdiv */
    if(hsd->Init.ClockDiv >= SDMMC_NSpeed_CLK_DIV)
 800d030:	687b      	ldr	r3, [r7, #4]
 800d032:	695b      	ldr	r3, [r3, #20]
 800d034:	2b03      	cmp	r3, #3
 800d036:	d903      	bls.n	800d040 <HAL_SD_ConfigWideBusOperation+0xc8>
    {
      Init.ClockDiv = hsd->Init.ClockDiv;
 800d038:	687b      	ldr	r3, [r7, #4]
 800d03a:	695b      	ldr	r3, [r3, #20]
 800d03c:	61bb      	str	r3, [r7, #24]
 800d03e:	e012      	b.n	800d066 <HAL_SD_ConfigWideBusOperation+0xee>
    }
    else if (hsd->SdCard.CardSpeed == CARD_ULTRA_HIGH_SPEED)
 800d040:	687b      	ldr	r3, [r7, #4]
 800d042:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800d044:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800d048:	d103      	bne.n	800d052 <HAL_SD_ConfigWideBusOperation+0xda>
    {
      /* UltraHigh speed SD card,user Clock div */
      Init.ClockDiv = hsd->Init.ClockDiv;
 800d04a:	687b      	ldr	r3, [r7, #4]
 800d04c:	695b      	ldr	r3, [r3, #20]
 800d04e:	61bb      	str	r3, [r7, #24]
 800d050:	e009      	b.n	800d066 <HAL_SD_ConfigWideBusOperation+0xee>
    }
    else if (hsd->SdCard.CardSpeed == CARD_HIGH_SPEED)
 800d052:	687b      	ldr	r3, [r7, #4]
 800d054:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800d056:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800d05a:	d102      	bne.n	800d062 <HAL_SD_ConfigWideBusOperation+0xea>
    {
      /* High speed SD card, Max Frequency = 50Mhz */
      Init.ClockDiv = SDMMC_HSpeed_CLK_DIV;
 800d05c:	2302      	movs	r3, #2
 800d05e:	61bb      	str	r3, [r7, #24]
 800d060:	e001      	b.n	800d066 <HAL_SD_ConfigWideBusOperation+0xee>
    }
    else
    {
      /* No High speed SD card, Max Frequency = 25Mhz */
      Init.ClockDiv = SDMMC_NSpeed_CLK_DIV;
 800d062:	2304      	movs	r3, #4
 800d064:	61bb      	str	r3, [r7, #24]
    }

    (void)SDMMC_Init(hsd->Instance, Init);
 800d066:	687b      	ldr	r3, [r7, #4]
 800d068:	681d      	ldr	r5, [r3, #0]
 800d06a:	466c      	mov	r4, sp
 800d06c:	f107 0314 	add.w	r3, r7, #20
 800d070:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800d074:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800d078:	f107 0308 	add.w	r3, r7, #8
 800d07c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800d07e:	4628      	mov	r0, r5
 800d080:	f003 f84e 	bl	8010120 <SDMMC_Init>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800d084:	687b      	ldr	r3, [r7, #4]
 800d086:	681b      	ldr	r3, [r3, #0]
 800d088:	f44f 7100 	mov.w	r1, #512	; 0x200
 800d08c:	4618      	mov	r0, r3
 800d08e:	f003 f925 	bl	80102dc <SDMMC_CmdBlockLength>
 800d092:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800d094:	6a3b      	ldr	r3, [r7, #32]
 800d096:	2b00      	cmp	r3, #0
 800d098:	d00c      	beq.n	800d0b4 <HAL_SD_ConfigWideBusOperation+0x13c>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800d09a:	687b      	ldr	r3, [r7, #4]
 800d09c:	681b      	ldr	r3, [r3, #0]
 800d09e:	4a0a      	ldr	r2, [pc, #40]	; (800d0c8 <HAL_SD_ConfigWideBusOperation+0x150>)
 800d0a0:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 800d0a2:	687b      	ldr	r3, [r7, #4]
 800d0a4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800d0a6:	6a3b      	ldr	r3, [r7, #32]
 800d0a8:	431a      	orrs	r2, r3
 800d0aa:	687b      	ldr	r3, [r7, #4]
 800d0ac:	639a      	str	r2, [r3, #56]	; 0x38
    status = HAL_ERROR;
 800d0ae:	2301      	movs	r3, #1
 800d0b0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 800d0b4:	687b      	ldr	r3, [r7, #4]
 800d0b6:	2201      	movs	r2, #1
 800d0b8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return status;
 800d0bc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800d0c0:	4618      	mov	r0, r3
 800d0c2:	3728      	adds	r7, #40	; 0x28
 800d0c4:	46bd      	mov	sp, r7
 800d0c6:	bdb0      	pop	{r4, r5, r7, pc}
 800d0c8:	1fe00fff 	.word	0x1fe00fff

0800d0cc <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 800d0cc:	b580      	push	{r7, lr}
 800d0ce:	b086      	sub	sp, #24
 800d0d0:	af00      	add	r7, sp, #0
 800d0d2:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 800d0d4:	2300      	movs	r3, #0
 800d0d6:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 800d0d8:	f107 030c 	add.w	r3, r7, #12
 800d0dc:	4619      	mov	r1, r3
 800d0de:	6878      	ldr	r0, [r7, #4]
 800d0e0:	f000 faaa 	bl	800d638 <SD_SendStatus>
 800d0e4:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 800d0e6:	697b      	ldr	r3, [r7, #20]
 800d0e8:	2b00      	cmp	r3, #0
 800d0ea:	d005      	beq.n	800d0f8 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 800d0ec:	687b      	ldr	r3, [r7, #4]
 800d0ee:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800d0f0:	697b      	ldr	r3, [r7, #20]
 800d0f2:	431a      	orrs	r2, r3
 800d0f4:	687b      	ldr	r3, [r7, #4]
 800d0f6:	639a      	str	r2, [r3, #56]	; 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 800d0f8:	68fb      	ldr	r3, [r7, #12]
 800d0fa:	0a5b      	lsrs	r3, r3, #9
 800d0fc:	f003 030f 	and.w	r3, r3, #15
 800d100:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 800d102:	693b      	ldr	r3, [r7, #16]
}
 800d104:	4618      	mov	r0, r3
 800d106:	3718      	adds	r7, #24
 800d108:	46bd      	mov	sp, r7
 800d10a:	bd80      	pop	{r7, pc}

0800d10c <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 800d10c:	b590      	push	{r4, r7, lr}
 800d10e:	b091      	sub	sp, #68	; 0x44
 800d110:	af00      	add	r7, sp, #0
 800d112:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 800d114:	2301      	movs	r3, #1
 800d116:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDMMC_GetPowerState(hsd->Instance) == 0U)
 800d118:	687b      	ldr	r3, [r7, #4]
 800d11a:	681b      	ldr	r3, [r3, #0]
 800d11c:	4618      	mov	r0, r3
 800d11e:	f003 f858 	bl	80101d2 <SDMMC_GetPowerState>
 800d122:	4603      	mov	r3, r0
 800d124:	2b00      	cmp	r3, #0
 800d126:	d102      	bne.n	800d12e <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800d128:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 800d12c:	e0a8      	b.n	800d280 <SD_InitCard+0x174>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 800d12e:	687b      	ldr	r3, [r7, #4]
 800d130:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d132:	2b03      	cmp	r3, #3
 800d134:	d02e      	beq.n	800d194 <SD_InitCard+0x88>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 800d136:	687b      	ldr	r3, [r7, #4]
 800d138:	681b      	ldr	r3, [r3, #0]
 800d13a:	4618      	mov	r0, r3
 800d13c:	f003 faa4 	bl	8010688 <SDMMC_CmdSendCID>
 800d140:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800d142:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d144:	2b00      	cmp	r3, #0
 800d146:	d001      	beq.n	800d14c <SD_InitCard+0x40>
    {
      return errorstate;
 800d148:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d14a:	e099      	b.n	800d280 <SD_InitCard+0x174>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800d14c:	687b      	ldr	r3, [r7, #4]
 800d14e:	681b      	ldr	r3, [r3, #0]
 800d150:	2100      	movs	r1, #0
 800d152:	4618      	mov	r0, r3
 800d154:	f003 f883 	bl	801025e <SDMMC_GetResponse>
 800d158:	4602      	mov	r2, r0
 800d15a:	687b      	ldr	r3, [r7, #4]
 800d15c:	671a      	str	r2, [r3, #112]	; 0x70
      hsd->CID[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 800d15e:	687b      	ldr	r3, [r7, #4]
 800d160:	681b      	ldr	r3, [r3, #0]
 800d162:	2104      	movs	r1, #4
 800d164:	4618      	mov	r0, r3
 800d166:	f003 f87a 	bl	801025e <SDMMC_GetResponse>
 800d16a:	4602      	mov	r2, r0
 800d16c:	687b      	ldr	r3, [r7, #4]
 800d16e:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 800d170:	687b      	ldr	r3, [r7, #4]
 800d172:	681b      	ldr	r3, [r3, #0]
 800d174:	2108      	movs	r1, #8
 800d176:	4618      	mov	r0, r3
 800d178:	f003 f871 	bl	801025e <SDMMC_GetResponse>
 800d17c:	4602      	mov	r2, r0
 800d17e:	687b      	ldr	r3, [r7, #4]
 800d180:	679a      	str	r2, [r3, #120]	; 0x78
      hsd->CID[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 800d182:	687b      	ldr	r3, [r7, #4]
 800d184:	681b      	ldr	r3, [r3, #0]
 800d186:	210c      	movs	r1, #12
 800d188:	4618      	mov	r0, r3
 800d18a:	f003 f868 	bl	801025e <SDMMC_GetResponse>
 800d18e:	4602      	mov	r2, r0
 800d190:	687b      	ldr	r3, [r7, #4]
 800d192:	67da      	str	r2, [r3, #124]	; 0x7c
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 800d194:	687b      	ldr	r3, [r7, #4]
 800d196:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d198:	2b03      	cmp	r3, #3
 800d19a:	d00d      	beq.n	800d1b8 <SD_InitCard+0xac>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 800d19c:	687b      	ldr	r3, [r7, #4]
 800d19e:	681b      	ldr	r3, [r3, #0]
 800d1a0:	f107 020e 	add.w	r2, r7, #14
 800d1a4:	4611      	mov	r1, r2
 800d1a6:	4618      	mov	r0, r3
 800d1a8:	f003 faad 	bl	8010706 <SDMMC_CmdSetRelAdd>
 800d1ac:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800d1ae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d1b0:	2b00      	cmp	r3, #0
 800d1b2:	d001      	beq.n	800d1b8 <SD_InitCard+0xac>
    {
      return errorstate;
 800d1b4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d1b6:	e063      	b.n	800d280 <SD_InitCard+0x174>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 800d1b8:	687b      	ldr	r3, [r7, #4]
 800d1ba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d1bc:	2b03      	cmp	r3, #3
 800d1be:	d036      	beq.n	800d22e <SD_InitCard+0x122>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 800d1c0:	89fb      	ldrh	r3, [r7, #14]
 800d1c2:	461a      	mov	r2, r3
 800d1c4:	687b      	ldr	r3, [r7, #4]
 800d1c6:	649a      	str	r2, [r3, #72]	; 0x48

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800d1c8:	687b      	ldr	r3, [r7, #4]
 800d1ca:	681a      	ldr	r2, [r3, #0]
 800d1cc:	687b      	ldr	r3, [r7, #4]
 800d1ce:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800d1d0:	041b      	lsls	r3, r3, #16
 800d1d2:	4619      	mov	r1, r3
 800d1d4:	4610      	mov	r0, r2
 800d1d6:	f003 fa76 	bl	80106c6 <SDMMC_CmdSendCSD>
 800d1da:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800d1dc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d1de:	2b00      	cmp	r3, #0
 800d1e0:	d001      	beq.n	800d1e6 <SD_InitCard+0xda>
    {
      return errorstate;
 800d1e2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d1e4:	e04c      	b.n	800d280 <SD_InitCard+0x174>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800d1e6:	687b      	ldr	r3, [r7, #4]
 800d1e8:	681b      	ldr	r3, [r3, #0]
 800d1ea:	2100      	movs	r1, #0
 800d1ec:	4618      	mov	r0, r3
 800d1ee:	f003 f836 	bl	801025e <SDMMC_GetResponse>
 800d1f2:	4602      	mov	r2, r0
 800d1f4:	687b      	ldr	r3, [r7, #4]
 800d1f6:	661a      	str	r2, [r3, #96]	; 0x60
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 800d1f8:	687b      	ldr	r3, [r7, #4]
 800d1fa:	681b      	ldr	r3, [r3, #0]
 800d1fc:	2104      	movs	r1, #4
 800d1fe:	4618      	mov	r0, r3
 800d200:	f003 f82d 	bl	801025e <SDMMC_GetResponse>
 800d204:	4602      	mov	r2, r0
 800d206:	687b      	ldr	r3, [r7, #4]
 800d208:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 800d20a:	687b      	ldr	r3, [r7, #4]
 800d20c:	681b      	ldr	r3, [r3, #0]
 800d20e:	2108      	movs	r1, #8
 800d210:	4618      	mov	r0, r3
 800d212:	f003 f824 	bl	801025e <SDMMC_GetResponse>
 800d216:	4602      	mov	r2, r0
 800d218:	687b      	ldr	r3, [r7, #4]
 800d21a:	669a      	str	r2, [r3, #104]	; 0x68
      hsd->CSD[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 800d21c:	687b      	ldr	r3, [r7, #4]
 800d21e:	681b      	ldr	r3, [r3, #0]
 800d220:	210c      	movs	r1, #12
 800d222:	4618      	mov	r0, r3
 800d224:	f003 f81b 	bl	801025e <SDMMC_GetResponse>
 800d228:	4602      	mov	r2, r0
 800d22a:	687b      	ldr	r3, [r7, #4]
 800d22c:	66da      	str	r2, [r3, #108]	; 0x6c
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2) >> 20U);
 800d22e:	687b      	ldr	r3, [r7, #4]
 800d230:	681b      	ldr	r3, [r3, #0]
 800d232:	2104      	movs	r1, #4
 800d234:	4618      	mov	r0, r3
 800d236:	f003 f812 	bl	801025e <SDMMC_GetResponse>
 800d23a:	4603      	mov	r3, r0
 800d23c:	0d1a      	lsrs	r2, r3, #20
 800d23e:	687b      	ldr	r3, [r7, #4]
 800d240:	645a      	str	r2, [r3, #68]	; 0x44

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 800d242:	f107 0310 	add.w	r3, r7, #16
 800d246:	4619      	mov	r1, r3
 800d248:	6878      	ldr	r0, [r7, #4]
 800d24a:	f7ff fc0f 	bl	800ca6c <HAL_SD_GetCardCSD>
 800d24e:	4603      	mov	r3, r0
 800d250:	2b00      	cmp	r3, #0
 800d252:	d002      	beq.n	800d25a <SD_InitCard+0x14e>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800d254:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800d258:	e012      	b.n	800d280 <SD_InitCard+0x174>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 800d25a:	687b      	ldr	r3, [r7, #4]
 800d25c:	6819      	ldr	r1, [r3, #0]
 800d25e:	687b      	ldr	r3, [r7, #4]
 800d260:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800d262:	041b      	lsls	r3, r3, #16
 800d264:	f04f 0400 	mov.w	r4, #0
 800d268:	461a      	mov	r2, r3
 800d26a:	4623      	mov	r3, r4
 800d26c:	4608      	mov	r0, r1
 800d26e:	f003 f921 	bl	80104b4 <SDMMC_CmdSelDesel>
 800d272:	63f8      	str	r0, [r7, #60]	; 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 800d274:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d276:	2b00      	cmp	r3, #0
 800d278:	d001      	beq.n	800d27e <SD_InitCard+0x172>
  {
    return errorstate;
 800d27a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d27c:	e000      	b.n	800d280 <SD_InitCard+0x174>
  }

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 800d27e:	2300      	movs	r3, #0
}
 800d280:	4618      	mov	r0, r3
 800d282:	3744      	adds	r7, #68	; 0x44
 800d284:	46bd      	mov	sp, r7
 800d286:	bd90      	pop	{r4, r7, pc}

0800d288 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 800d288:	b580      	push	{r7, lr}
 800d28a:	b088      	sub	sp, #32
 800d28c:	af00      	add	r7, sp, #0
 800d28e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800d290:	2300      	movs	r3, #0
 800d292:	60fb      	str	r3, [r7, #12]
  uint32_t response = 0U, validvoltage = 0U;
 800d294:	2300      	movs	r3, #0
 800d296:	61fb      	str	r3, [r7, #28]
 800d298:	2300      	movs	r3, #0
 800d29a:	61bb      	str	r3, [r7, #24]
  uint32_t errorstate;
#if (USE_SD_TRANSCEIVER != 0U)
  uint32_t tickstart = HAL_GetTick();
 800d29c:	f7f6 fa2c 	bl	80036f8 <HAL_GetTick>
 800d2a0:	6178      	str	r0, [r7, #20]
#endif /* USE_SD_TRANSCEIVER  */

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800d2a2:	687b      	ldr	r3, [r7, #4]
 800d2a4:	681b      	ldr	r3, [r3, #0]
 800d2a6:	4618      	mov	r0, r3
 800d2a8:	f003 f928 	bl	80104fc <SDMMC_CmdGoIdleState>
 800d2ac:	6138      	str	r0, [r7, #16]
  if(errorstate != HAL_SD_ERROR_NONE)
 800d2ae:	693b      	ldr	r3, [r7, #16]
 800d2b0:	2b00      	cmp	r3, #0
 800d2b2:	d001      	beq.n	800d2b8 <SD_PowerON+0x30>
  {
    return errorstate;
 800d2b4:	693b      	ldr	r3, [r7, #16]
 800d2b6:	e0e9      	b.n	800d48c <SD_PowerON+0x204>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 800d2b8:	687b      	ldr	r3, [r7, #4]
 800d2ba:	681b      	ldr	r3, [r3, #0]
 800d2bc:	4618      	mov	r0, r3
 800d2be:	f003 f93b 	bl	8010538 <SDMMC_CmdOperCond>
 800d2c2:	6138      	str	r0, [r7, #16]
  if(errorstate != HAL_SD_ERROR_NONE)
 800d2c4:	693b      	ldr	r3, [r7, #16]
 800d2c6:	2b00      	cmp	r3, #0
 800d2c8:	d00d      	beq.n	800d2e6 <SD_PowerON+0x5e>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 800d2ca:	687b      	ldr	r3, [r7, #4]
 800d2cc:	2200      	movs	r2, #0
 800d2ce:	641a      	str	r2, [r3, #64]	; 0x40
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800d2d0:	687b      	ldr	r3, [r7, #4]
 800d2d2:	681b      	ldr	r3, [r3, #0]
 800d2d4:	4618      	mov	r0, r3
 800d2d6:	f003 f911 	bl	80104fc <SDMMC_CmdGoIdleState>
 800d2da:	6138      	str	r0, [r7, #16]
    if(errorstate != HAL_SD_ERROR_NONE)
 800d2dc:	693b      	ldr	r3, [r7, #16]
 800d2de:	2b00      	cmp	r3, #0
 800d2e0:	d004      	beq.n	800d2ec <SD_PowerON+0x64>
    {
      return errorstate;
 800d2e2:	693b      	ldr	r3, [r7, #16]
 800d2e4:	e0d2      	b.n	800d48c <SD_PowerON+0x204>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 800d2e6:	687b      	ldr	r3, [r7, #4]
 800d2e8:	2201      	movs	r2, #1
 800d2ea:	641a      	str	r2, [r3, #64]	; 0x40
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 800d2ec:	687b      	ldr	r3, [r7, #4]
 800d2ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d2f0:	2b01      	cmp	r3, #1
 800d2f2:	d137      	bne.n	800d364 <SD_PowerON+0xdc>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800d2f4:	687b      	ldr	r3, [r7, #4]
 800d2f6:	681b      	ldr	r3, [r3, #0]
 800d2f8:	2100      	movs	r1, #0
 800d2fa:	4618      	mov	r0, r3
 800d2fc:	f003 f93c 	bl	8010578 <SDMMC_CmdAppCommand>
 800d300:	6138      	str	r0, [r7, #16]
    if(errorstate != HAL_SD_ERROR_NONE)
 800d302:	693b      	ldr	r3, [r7, #16]
 800d304:	2b00      	cmp	r3, #0
 800d306:	d02d      	beq.n	800d364 <SD_PowerON+0xdc>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800d308:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800d30c:	e0be      	b.n	800d48c <SD_PowerON+0x204>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800d30e:	687b      	ldr	r3, [r7, #4]
 800d310:	681b      	ldr	r3, [r3, #0]
 800d312:	2100      	movs	r1, #0
 800d314:	4618      	mov	r0, r3
 800d316:	f003 f92f 	bl	8010578 <SDMMC_CmdAppCommand>
 800d31a:	6138      	str	r0, [r7, #16]
    if(errorstate != HAL_SD_ERROR_NONE)
 800d31c:	693b      	ldr	r3, [r7, #16]
 800d31e:	2b00      	cmp	r3, #0
 800d320:	d001      	beq.n	800d326 <SD_PowerON+0x9e>
    {
      return errorstate;
 800d322:	693b      	ldr	r3, [r7, #16]
 800d324:	e0b2      	b.n	800d48c <SD_PowerON+0x204>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 800d326:	687b      	ldr	r3, [r7, #4]
 800d328:	681b      	ldr	r3, [r3, #0]
 800d32a:	495a      	ldr	r1, [pc, #360]	; (800d494 <SD_PowerON+0x20c>)
 800d32c:	4618      	mov	r0, r3
 800d32e:	f003 f946 	bl	80105be <SDMMC_CmdAppOperCommand>
 800d332:	6138      	str	r0, [r7, #16]
    if(errorstate != HAL_SD_ERROR_NONE)
 800d334:	693b      	ldr	r3, [r7, #16]
 800d336:	2b00      	cmp	r3, #0
 800d338:	d002      	beq.n	800d340 <SD_PowerON+0xb8>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800d33a:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800d33e:	e0a5      	b.n	800d48c <SD_PowerON+0x204>
    }

    /* Get command response */
    response = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800d340:	687b      	ldr	r3, [r7, #4]
 800d342:	681b      	ldr	r3, [r3, #0]
 800d344:	2100      	movs	r1, #0
 800d346:	4618      	mov	r0, r3
 800d348:	f002 ff89 	bl	801025e <SDMMC_GetResponse>
 800d34c:	61f8      	str	r0, [r7, #28]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 800d34e:	69fb      	ldr	r3, [r7, #28]
 800d350:	0fdb      	lsrs	r3, r3, #31
 800d352:	2b01      	cmp	r3, #1
 800d354:	d101      	bne.n	800d35a <SD_PowerON+0xd2>
 800d356:	2301      	movs	r3, #1
 800d358:	e000      	b.n	800d35c <SD_PowerON+0xd4>
 800d35a:	2300      	movs	r3, #0
 800d35c:	61bb      	str	r3, [r7, #24]

    count++;
 800d35e:	68fb      	ldr	r3, [r7, #12]
 800d360:	3301      	adds	r3, #1
 800d362:	60fb      	str	r3, [r7, #12]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 800d364:	68fb      	ldr	r3, [r7, #12]
 800d366:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800d36a:	4293      	cmp	r3, r2
 800d36c:	d802      	bhi.n	800d374 <SD_PowerON+0xec>
 800d36e:	69bb      	ldr	r3, [r7, #24]
 800d370:	2b00      	cmp	r3, #0
 800d372:	d0cc      	beq.n	800d30e <SD_PowerON+0x86>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 800d374:	68fb      	ldr	r3, [r7, #12]
 800d376:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800d37a:	4293      	cmp	r3, r2
 800d37c:	d902      	bls.n	800d384 <SD_PowerON+0xfc>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 800d37e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800d382:	e083      	b.n	800d48c <SD_PowerON+0x204>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 800d384:	69fb      	ldr	r3, [r7, #28]
 800d386:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800d38a:	2b00      	cmp	r3, #0
 800d38c:	d07d      	beq.n	800d48a <SD_PowerON+0x202>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 800d38e:	687b      	ldr	r3, [r7, #4]
 800d390:	2201      	movs	r2, #1
 800d392:	63da      	str	r2, [r3, #60]	; 0x3c
#if (USE_SD_TRANSCEIVER != 0U)
    if (hsd->Init.TranceiverPresent == SDMMC_TRANSCEIVER_PRESENT)
 800d394:	687b      	ldr	r3, [r7, #4]
 800d396:	699b      	ldr	r3, [r3, #24]
 800d398:	2b02      	cmp	r3, #2
 800d39a:	d176      	bne.n	800d48a <SD_PowerON+0x202>
    {
      if((response & SD_SWITCH_1_8V_CAPACITY) == SD_SWITCH_1_8V_CAPACITY)
 800d39c:	69fb      	ldr	r3, [r7, #28]
 800d39e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800d3a2:	2b00      	cmp	r3, #0
 800d3a4:	d071      	beq.n	800d48a <SD_PowerON+0x202>
      {
        hsd->SdCard.CardSpeed = CARD_ULTRA_HIGH_SPEED;
 800d3a6:	687b      	ldr	r3, [r7, #4]
 800d3a8:	f44f 7200 	mov.w	r2, #512	; 0x200
 800d3ac:	65da      	str	r2, [r3, #92]	; 0x5c

        /* Start switching procedue */
        hsd->Instance->POWER |= SDMMC_POWER_VSWITCHEN;
 800d3ae:	687b      	ldr	r3, [r7, #4]
 800d3b0:	681b      	ldr	r3, [r3, #0]
 800d3b2:	681a      	ldr	r2, [r3, #0]
 800d3b4:	687b      	ldr	r3, [r7, #4]
 800d3b6:	681b      	ldr	r3, [r3, #0]
 800d3b8:	f042 0208 	orr.w	r2, r2, #8
 800d3bc:	601a      	str	r2, [r3, #0]

        /* Send CMD11 to switch 1.8V mode */
        errorstate = SDMMC_CmdVoltageSwitch(hsd->Instance);
 800d3be:	687b      	ldr	r3, [r7, #4]
 800d3c0:	681b      	ldr	r3, [r3, #0]
 800d3c2:	4618      	mov	r0, r3
 800d3c4:	f003 fa06 	bl	80107d4 <SDMMC_CmdVoltageSwitch>
 800d3c8:	6138      	str	r0, [r7, #16]
        if(errorstate != HAL_SD_ERROR_NONE)
 800d3ca:	693b      	ldr	r3, [r7, #16]
 800d3cc:	2b00      	cmp	r3, #0
 800d3ce:	d00c      	beq.n	800d3ea <SD_PowerON+0x162>
        {
          return errorstate;
 800d3d0:	693b      	ldr	r3, [r7, #16]
 800d3d2:	e05b      	b.n	800d48c <SD_PowerON+0x204>
        }

        /* Check to CKSTOP */
        while(( hsd->Instance->STA & SDMMC_FLAG_CKSTOP) != SDMMC_FLAG_CKSTOP)
        {
          if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800d3d4:	f7f6 f990 	bl	80036f8 <HAL_GetTick>
 800d3d8:	4602      	mov	r2, r0
 800d3da:	697b      	ldr	r3, [r7, #20]
 800d3dc:	1ad3      	subs	r3, r2, r3
 800d3de:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d3e2:	d102      	bne.n	800d3ea <SD_PowerON+0x162>
          {
            return HAL_SD_ERROR_TIMEOUT;
 800d3e4:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800d3e8:	e050      	b.n	800d48c <SD_PowerON+0x204>
        while(( hsd->Instance->STA & SDMMC_FLAG_CKSTOP) != SDMMC_FLAG_CKSTOP)
 800d3ea:	687b      	ldr	r3, [r7, #4]
 800d3ec:	681b      	ldr	r3, [r3, #0]
 800d3ee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d3f0:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800d3f4:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800d3f8:	d1ec      	bne.n	800d3d4 <SD_PowerON+0x14c>
          }
        }

        /* Clear CKSTOP Flag */
        hsd->Instance->ICR = SDMMC_FLAG_CKSTOP;
 800d3fa:	687b      	ldr	r3, [r7, #4]
 800d3fc:	681b      	ldr	r3, [r3, #0]
 800d3fe:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 800d402:	639a      	str	r2, [r3, #56]	; 0x38

        /* Check to BusyD0 */
        if(( hsd->Instance->STA & SDMMC_FLAG_BUSYD0) != SDMMC_FLAG_BUSYD0)
 800d404:	687b      	ldr	r3, [r7, #4]
 800d406:	681b      	ldr	r3, [r3, #0]
 800d408:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d40a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800d40e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800d412:	d002      	beq.n	800d41a <SD_PowerON+0x192>
        {
          /* Error when activate Voltage Switch in SDMMC Peripheral */
          return SDMMC_ERROR_UNSUPPORTED_FEATURE;
 800d414:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800d418:	e038      	b.n	800d48c <SD_PowerON+0x204>
        {
          /* Enable Transceiver Switch PIN */
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
          hsd->DriveTransceiver_1_8V_Callback(SET);
#else
          HAL_SD_DriveTransceiver_1_8V_Callback(SET);
 800d41a:	2001      	movs	r0, #1
 800d41c:	f7ff fb1a 	bl	800ca54 <HAL_SD_DriveTransceiver_1_8V_Callback>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */

          /* Switch ready */
          hsd->Instance->POWER |= SDMMC_POWER_VSWITCH;
 800d420:	687b      	ldr	r3, [r7, #4]
 800d422:	681b      	ldr	r3, [r3, #0]
 800d424:	681a      	ldr	r2, [r3, #0]
 800d426:	687b      	ldr	r3, [r7, #4]
 800d428:	681b      	ldr	r3, [r3, #0]
 800d42a:	f042 0204 	orr.w	r2, r2, #4
 800d42e:	601a      	str	r2, [r3, #0]

          /* Check VSWEND Flag */
          while(( hsd->Instance->STA & SDMMC_FLAG_VSWEND) != SDMMC_FLAG_VSWEND)
 800d430:	e00a      	b.n	800d448 <SD_PowerON+0x1c0>
          {
            if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800d432:	f7f6 f961 	bl	80036f8 <HAL_GetTick>
 800d436:	4602      	mov	r2, r0
 800d438:	697b      	ldr	r3, [r7, #20]
 800d43a:	1ad3      	subs	r3, r2, r3
 800d43c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d440:	d102      	bne.n	800d448 <SD_PowerON+0x1c0>
            {
              return HAL_SD_ERROR_TIMEOUT;
 800d442:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800d446:	e021      	b.n	800d48c <SD_PowerON+0x204>
          while(( hsd->Instance->STA & SDMMC_FLAG_VSWEND) != SDMMC_FLAG_VSWEND)
 800d448:	687b      	ldr	r3, [r7, #4]
 800d44a:	681b      	ldr	r3, [r3, #0]
 800d44c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d44e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800d452:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800d456:	d1ec      	bne.n	800d432 <SD_PowerON+0x1aa>
            }
          }

          /* Clear VSWEND Flag */
          hsd->Instance->ICR = SDMMC_FLAG_VSWEND;
 800d458:	687b      	ldr	r3, [r7, #4]
 800d45a:	681b      	ldr	r3, [r3, #0]
 800d45c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800d460:	639a      	str	r2, [r3, #56]	; 0x38

          /* Check BusyD0 status */
          if(( hsd->Instance->STA & SDMMC_FLAG_BUSYD0) == SDMMC_FLAG_BUSYD0)
 800d462:	687b      	ldr	r3, [r7, #4]
 800d464:	681b      	ldr	r3, [r3, #0]
 800d466:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d468:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800d46c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800d470:	d102      	bne.n	800d478 <SD_PowerON+0x1f0>
          {
            /* Error when enabling 1.8V mode */
            return HAL_SD_ERROR_INVALID_VOLTRANGE;
 800d472:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800d476:	e009      	b.n	800d48c <SD_PowerON+0x204>
          }
          /* Switch to 1.8V OK */

          /* Disable VSWITCH FLAG from SDMMC Peripheral */
          hsd->Instance->POWER = 0x13U;
 800d478:	687b      	ldr	r3, [r7, #4]
 800d47a:	681b      	ldr	r3, [r3, #0]
 800d47c:	2213      	movs	r2, #19
 800d47e:	601a      	str	r2, [r3, #0]

          /* Clean Status flags */
          hsd->Instance->ICR = 0xFFFFFFFFU;
 800d480:	687b      	ldr	r3, [r7, #4]
 800d482:	681b      	ldr	r3, [r3, #0]
 800d484:	f04f 32ff 	mov.w	r2, #4294967295
 800d488:	639a      	str	r2, [r3, #56]	; 0x38
      }
    }
#endif /* USE_SD_TRANSCEIVER  */
  }

  return HAL_SD_ERROR_NONE;
 800d48a:	2300      	movs	r3, #0
}
 800d48c:	4618      	mov	r0, r3
 800d48e:	3720      	adds	r7, #32
 800d490:	46bd      	mov	sp, r7
 800d492:	bd80      	pop	{r7, pc}
 800d494:	c1100000 	.word	0xc1100000

0800d498 <SD_SendSDStatus>:
  * @param  pSDstatus: Pointer to the buffer that will contain the SD card status
  *         SD Status register)
  * @retval error state
  */
static uint32_t SD_SendSDStatus(SD_HandleTypeDef *hsd, uint32_t *pSDstatus)
{
 800d498:	b580      	push	{r7, lr}
 800d49a:	b08c      	sub	sp, #48	; 0x30
 800d49c:	af00      	add	r7, sp, #0
 800d49e:	6078      	str	r0, [r7, #4]
 800d4a0:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800d4a2:	f7f6 f929 	bl	80036f8 <HAL_GetTick>
 800d4a6:	6278      	str	r0, [r7, #36]	; 0x24
  uint32_t count;
  uint32_t *pData = pSDstatus;
 800d4a8:	683b      	ldr	r3, [r7, #0]
 800d4aa:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check SD response */
  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800d4ac:	687b      	ldr	r3, [r7, #4]
 800d4ae:	681b      	ldr	r3, [r3, #0]
 800d4b0:	2100      	movs	r1, #0
 800d4b2:	4618      	mov	r0, r3
 800d4b4:	f002 fed3 	bl	801025e <SDMMC_GetResponse>
 800d4b8:	4603      	mov	r3, r0
 800d4ba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800d4be:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800d4c2:	d102      	bne.n	800d4ca <SD_SendSDStatus+0x32>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800d4c4:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800d4c8:	e0b0      	b.n	800d62c <SD_SendSDStatus+0x194>
  }

  /* Set block size for card if it is not equal to current block size for card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 64U);
 800d4ca:	687b      	ldr	r3, [r7, #4]
 800d4cc:	681b      	ldr	r3, [r3, #0]
 800d4ce:	2140      	movs	r1, #64	; 0x40
 800d4d0:	4618      	mov	r0, r3
 800d4d2:	f002 ff03 	bl	80102dc <SDMMC_CmdBlockLength>
 800d4d6:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800d4d8:	6a3b      	ldr	r3, [r7, #32]
 800d4da:	2b00      	cmp	r3, #0
 800d4dc:	d005      	beq.n	800d4ea <SD_SendSDStatus+0x52>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 800d4de:	687b      	ldr	r3, [r7, #4]
 800d4e0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800d4e2:	687b      	ldr	r3, [r7, #4]
 800d4e4:	639a      	str	r2, [r3, #56]	; 0x38
    return errorstate;
 800d4e6:	6a3b      	ldr	r3, [r7, #32]
 800d4e8:	e0a0      	b.n	800d62c <SD_SendSDStatus+0x194>
  }

  /* Send CMD55 */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800d4ea:	687b      	ldr	r3, [r7, #4]
 800d4ec:	681a      	ldr	r2, [r3, #0]
 800d4ee:	687b      	ldr	r3, [r7, #4]
 800d4f0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800d4f2:	041b      	lsls	r3, r3, #16
 800d4f4:	4619      	mov	r1, r3
 800d4f6:	4610      	mov	r0, r2
 800d4f8:	f003 f83e 	bl	8010578 <SDMMC_CmdAppCommand>
 800d4fc:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800d4fe:	6a3b      	ldr	r3, [r7, #32]
 800d500:	2b00      	cmp	r3, #0
 800d502:	d005      	beq.n	800d510 <SD_SendSDStatus+0x78>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 800d504:	687b      	ldr	r3, [r7, #4]
 800d506:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800d508:	687b      	ldr	r3, [r7, #4]
 800d50a:	639a      	str	r2, [r3, #56]	; 0x38
    return errorstate;
 800d50c:	6a3b      	ldr	r3, [r7, #32]
 800d50e:	e08d      	b.n	800d62c <SD_SendSDStatus+0x194>
  }

  /* Configure the SD DPSM (Data Path State Machine) */
  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800d510:	f04f 33ff 	mov.w	r3, #4294967295
 800d514:	60bb      	str	r3, [r7, #8]
  config.DataLength    = 64U;
 800d516:	2340      	movs	r3, #64	; 0x40
 800d518:	60fb      	str	r3, [r7, #12]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_64B;
 800d51a:	2360      	movs	r3, #96	; 0x60
 800d51c:	613b      	str	r3, [r7, #16]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 800d51e:	2302      	movs	r3, #2
 800d520:	617b      	str	r3, [r7, #20]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800d522:	2300      	movs	r3, #0
 800d524:	61bb      	str	r3, [r7, #24]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 800d526:	2301      	movs	r3, #1
 800d528:	61fb      	str	r3, [r7, #28]
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 800d52a:	687b      	ldr	r3, [r7, #4]
 800d52c:	681b      	ldr	r3, [r3, #0]
 800d52e:	f107 0208 	add.w	r2, r7, #8
 800d532:	4611      	mov	r1, r2
 800d534:	4618      	mov	r0, r3
 800d536:	f002 fea5 	bl	8010284 <SDMMC_ConfigData>

  /* Send ACMD13 (SD_APP_STAUS)  with argument as card's RCA */
  errorstate = SDMMC_CmdStatusRegister(hsd->Instance);
 800d53a:	687b      	ldr	r3, [r7, #4]
 800d53c:	681b      	ldr	r3, [r3, #0]
 800d53e:	4618      	mov	r0, r3
 800d540:	f003 f926 	bl	8010790 <SDMMC_CmdStatusRegister>
 800d544:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800d546:	6a3b      	ldr	r3, [r7, #32]
 800d548:	2b00      	cmp	r3, #0
 800d54a:	d02b      	beq.n	800d5a4 <SD_SendSDStatus+0x10c>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 800d54c:	687b      	ldr	r3, [r7, #4]
 800d54e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800d550:	687b      	ldr	r3, [r7, #4]
 800d552:	639a      	str	r2, [r3, #56]	; 0x38
    return errorstate;
 800d554:	6a3b      	ldr	r3, [r7, #32]
 800d556:	e069      	b.n	800d62c <SD_SendSDStatus+0x194>
  }

  /* Get status data */
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
  {
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF))
 800d558:	687b      	ldr	r3, [r7, #4]
 800d55a:	681b      	ldr	r3, [r3, #0]
 800d55c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d55e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800d562:	2b00      	cmp	r3, #0
 800d564:	d013      	beq.n	800d58e <SD_SendSDStatus+0xf6>
    {
      for(count = 0U; count < 8U; count++)
 800d566:	2300      	movs	r3, #0
 800d568:	62fb      	str	r3, [r7, #44]	; 0x2c
 800d56a:	e00d      	b.n	800d588 <SD_SendSDStatus+0xf0>
      {
        *pData = SDMMC_ReadFIFO(hsd->Instance);
 800d56c:	687b      	ldr	r3, [r7, #4]
 800d56e:	681b      	ldr	r3, [r3, #0]
 800d570:	4618      	mov	r0, r3
 800d572:	f002 fdff 	bl	8010174 <SDMMC_ReadFIFO>
 800d576:	4602      	mov	r2, r0
 800d578:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d57a:	601a      	str	r2, [r3, #0]
        pData++;
 800d57c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d57e:	3304      	adds	r3, #4
 800d580:	62bb      	str	r3, [r7, #40]	; 0x28
      for(count = 0U; count < 8U; count++)
 800d582:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d584:	3301      	adds	r3, #1
 800d586:	62fb      	str	r3, [r7, #44]	; 0x2c
 800d588:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d58a:	2b07      	cmp	r3, #7
 800d58c:	d9ee      	bls.n	800d56c <SD_SendSDStatus+0xd4>
      }
    }

    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800d58e:	f7f6 f8b3 	bl	80036f8 <HAL_GetTick>
 800d592:	4602      	mov	r2, r0
 800d594:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d596:	1ad3      	subs	r3, r2, r3
 800d598:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d59c:	d102      	bne.n	800d5a4 <SD_SendSDStatus+0x10c>
    {
      return HAL_SD_ERROR_TIMEOUT;
 800d59e:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800d5a2:	e043      	b.n	800d62c <SD_SendSDStatus+0x194>
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 800d5a4:	687b      	ldr	r3, [r7, #4]
 800d5a6:	681b      	ldr	r3, [r3, #0]
 800d5a8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d5aa:	f403 7395 	and.w	r3, r3, #298	; 0x12a
 800d5ae:	2b00      	cmp	r3, #0
 800d5b0:	d0d2      	beq.n	800d558 <SD_SendSDStatus+0xc0>
    }
  }

  if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 800d5b2:	687b      	ldr	r3, [r7, #4]
 800d5b4:	681b      	ldr	r3, [r3, #0]
 800d5b6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d5b8:	f003 0308 	and.w	r3, r3, #8
 800d5bc:	2b00      	cmp	r3, #0
 800d5be:	d001      	beq.n	800d5c4 <SD_SendSDStatus+0x12c>
  {
    return HAL_SD_ERROR_DATA_TIMEOUT;
 800d5c0:	2308      	movs	r3, #8
 800d5c2:	e033      	b.n	800d62c <SD_SendSDStatus+0x194>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 800d5c4:	687b      	ldr	r3, [r7, #4]
 800d5c6:	681b      	ldr	r3, [r3, #0]
 800d5c8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d5ca:	f003 0302 	and.w	r3, r3, #2
 800d5ce:	2b00      	cmp	r3, #0
 800d5d0:	d001      	beq.n	800d5d6 <SD_SendSDStatus+0x13e>
  {
    return HAL_SD_ERROR_DATA_CRC_FAIL;
 800d5d2:	2302      	movs	r3, #2
 800d5d4:	e02a      	b.n	800d62c <SD_SendSDStatus+0x194>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 800d5d6:	687b      	ldr	r3, [r7, #4]
 800d5d8:	681b      	ldr	r3, [r3, #0]
 800d5da:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d5dc:	f003 0320 	and.w	r3, r3, #32
 800d5e0:	2b00      	cmp	r3, #0
 800d5e2:	d017      	beq.n	800d614 <SD_SendSDStatus+0x17c>
  {
    return HAL_SD_ERROR_RX_OVERRUN;
 800d5e4:	2320      	movs	r3, #32
 800d5e6:	e021      	b.n	800d62c <SD_SendSDStatus+0x194>
    /* Nothing to do */
  }

  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DPSMACT)))
  {
    *pData = SDMMC_ReadFIFO(hsd->Instance);
 800d5e8:	687b      	ldr	r3, [r7, #4]
 800d5ea:	681b      	ldr	r3, [r3, #0]
 800d5ec:	4618      	mov	r0, r3
 800d5ee:	f002 fdc1 	bl	8010174 <SDMMC_ReadFIFO>
 800d5f2:	4602      	mov	r2, r0
 800d5f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d5f6:	601a      	str	r2, [r3, #0]
    pData++;
 800d5f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d5fa:	3304      	adds	r3, #4
 800d5fc:	62bb      	str	r3, [r7, #40]	; 0x28

    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800d5fe:	f7f6 f87b 	bl	80036f8 <HAL_GetTick>
 800d602:	4602      	mov	r2, r0
 800d604:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d606:	1ad3      	subs	r3, r2, r3
 800d608:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d60c:	d102      	bne.n	800d614 <SD_SendSDStatus+0x17c>
    {
      return HAL_SD_ERROR_TIMEOUT;
 800d60e:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800d612:	e00b      	b.n	800d62c <SD_SendSDStatus+0x194>
  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DPSMACT)))
 800d614:	687b      	ldr	r3, [r7, #4]
 800d616:	681b      	ldr	r3, [r3, #0]
 800d618:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d61a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800d61e:	2b00      	cmp	r3, #0
 800d620:	d1e2      	bne.n	800d5e8 <SD_SendSDStatus+0x150>
    }
  }

  /* Clear all the static status flags*/
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800d622:	687b      	ldr	r3, [r7, #4]
 800d624:	681b      	ldr	r3, [r3, #0]
 800d626:	4a03      	ldr	r2, [pc, #12]	; (800d634 <SD_SendSDStatus+0x19c>)
 800d628:	639a      	str	r2, [r3, #56]	; 0x38

  return HAL_SD_ERROR_NONE;
 800d62a:	2300      	movs	r3, #0
}
 800d62c:	4618      	mov	r0, r3
 800d62e:	3730      	adds	r7, #48	; 0x30
 800d630:	46bd      	mov	sp, r7
 800d632:	bd80      	pop	{r7, pc}
 800d634:	18000f3a 	.word	0x18000f3a

0800d638 <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 800d638:	b580      	push	{r7, lr}
 800d63a:	b084      	sub	sp, #16
 800d63c:	af00      	add	r7, sp, #0
 800d63e:	6078      	str	r0, [r7, #4]
 800d640:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 800d642:	683b      	ldr	r3, [r7, #0]
 800d644:	2b00      	cmp	r3, #0
 800d646:	d102      	bne.n	800d64e <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 800d648:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800d64c:	e018      	b.n	800d680 <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800d64e:	687b      	ldr	r3, [r7, #4]
 800d650:	681a      	ldr	r2, [r3, #0]
 800d652:	687b      	ldr	r3, [r7, #4]
 800d654:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800d656:	041b      	lsls	r3, r3, #16
 800d658:	4619      	mov	r1, r3
 800d65a:	4610      	mov	r0, r2
 800d65c:	f003 f875 	bl	801074a <SDMMC_CmdSendStatus>
 800d660:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800d662:	68fb      	ldr	r3, [r7, #12]
 800d664:	2b00      	cmp	r3, #0
 800d666:	d001      	beq.n	800d66c <SD_SendStatus+0x34>
  {
    return errorstate;
 800d668:	68fb      	ldr	r3, [r7, #12]
 800d66a:	e009      	b.n	800d680 <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800d66c:	687b      	ldr	r3, [r7, #4]
 800d66e:	681b      	ldr	r3, [r3, #0]
 800d670:	2100      	movs	r1, #0
 800d672:	4618      	mov	r0, r3
 800d674:	f002 fdf3 	bl	801025e <SDMMC_GetResponse>
 800d678:	4602      	mov	r2, r0
 800d67a:	683b      	ldr	r3, [r7, #0]
 800d67c:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 800d67e:	2300      	movs	r3, #0
}
 800d680:	4618      	mov	r0, r3
 800d682:	3710      	adds	r7, #16
 800d684:	46bd      	mov	sp, r7
 800d686:	bd80      	pop	{r7, pc}

0800d688 <SD_WideBus_Enable>:
  * @brief  Enables the SDMMC wide bus mode.
  * @param  hsd: pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 800d688:	b580      	push	{r7, lr}
 800d68a:	b086      	sub	sp, #24
 800d68c:	af00      	add	r7, sp, #0
 800d68e:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0UL, 0UL};
 800d690:	2300      	movs	r3, #0
 800d692:	60fb      	str	r3, [r7, #12]
 800d694:	2300      	movs	r3, #0
 800d696:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800d698:	687b      	ldr	r3, [r7, #4]
 800d69a:	681b      	ldr	r3, [r3, #0]
 800d69c:	2100      	movs	r1, #0
 800d69e:	4618      	mov	r0, r3
 800d6a0:	f002 fddd 	bl	801025e <SDMMC_GetResponse>
 800d6a4:	4603      	mov	r3, r0
 800d6a6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800d6aa:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800d6ae:	d102      	bne.n	800d6b6 <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800d6b0:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800d6b4:	e02f      	b.n	800d716 <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 800d6b6:	f107 030c 	add.w	r3, r7, #12
 800d6ba:	4619      	mov	r1, r3
 800d6bc:	6878      	ldr	r0, [r7, #4]
 800d6be:	f000 f879 	bl	800d7b4 <SD_FindSCR>
 800d6c2:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 800d6c4:	697b      	ldr	r3, [r7, #20]
 800d6c6:	2b00      	cmp	r3, #0
 800d6c8:	d001      	beq.n	800d6ce <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 800d6ca:	697b      	ldr	r3, [r7, #20]
 800d6cc:	e023      	b.n	800d716 <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800d6ce:	693b      	ldr	r3, [r7, #16]
 800d6d0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800d6d4:	2b00      	cmp	r3, #0
 800d6d6:	d01c      	beq.n	800d712 <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800d6d8:	687b      	ldr	r3, [r7, #4]
 800d6da:	681a      	ldr	r2, [r3, #0]
 800d6dc:	687b      	ldr	r3, [r7, #4]
 800d6de:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800d6e0:	041b      	lsls	r3, r3, #16
 800d6e2:	4619      	mov	r1, r3
 800d6e4:	4610      	mov	r0, r2
 800d6e6:	f002 ff47 	bl	8010578 <SDMMC_CmdAppCommand>
 800d6ea:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800d6ec:	697b      	ldr	r3, [r7, #20]
 800d6ee:	2b00      	cmp	r3, #0
 800d6f0:	d001      	beq.n	800d6f6 <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 800d6f2:	697b      	ldr	r3, [r7, #20]
 800d6f4:	e00f      	b.n	800d716 <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 800d6f6:	687b      	ldr	r3, [r7, #4]
 800d6f8:	681b      	ldr	r3, [r3, #0]
 800d6fa:	2102      	movs	r1, #2
 800d6fc:	4618      	mov	r0, r3
 800d6fe:	f002 ff7e 	bl	80105fe <SDMMC_CmdBusWidth>
 800d702:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800d704:	697b      	ldr	r3, [r7, #20]
 800d706:	2b00      	cmp	r3, #0
 800d708:	d001      	beq.n	800d70e <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 800d70a:	697b      	ldr	r3, [r7, #20]
 800d70c:	e003      	b.n	800d716 <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 800d70e:	2300      	movs	r3, #0
 800d710:	e001      	b.n	800d716 <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800d712:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 800d716:	4618      	mov	r0, r3
 800d718:	3718      	adds	r7, #24
 800d71a:	46bd      	mov	sp, r7
 800d71c:	bd80      	pop	{r7, pc}

0800d71e <SD_WideBus_Disable>:
  * @brief  Disables the SDMMC wide bus mode.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 800d71e:	b580      	push	{r7, lr}
 800d720:	b086      	sub	sp, #24
 800d722:	af00      	add	r7, sp, #0
 800d724:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0UL, 0UL};
 800d726:	2300      	movs	r3, #0
 800d728:	60fb      	str	r3, [r7, #12]
 800d72a:	2300      	movs	r3, #0
 800d72c:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800d72e:	687b      	ldr	r3, [r7, #4]
 800d730:	681b      	ldr	r3, [r3, #0]
 800d732:	2100      	movs	r1, #0
 800d734:	4618      	mov	r0, r3
 800d736:	f002 fd92 	bl	801025e <SDMMC_GetResponse>
 800d73a:	4603      	mov	r3, r0
 800d73c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800d740:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800d744:	d102      	bne.n	800d74c <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800d746:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800d74a:	e02f      	b.n	800d7ac <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 800d74c:	f107 030c 	add.w	r3, r7, #12
 800d750:	4619      	mov	r1, r3
 800d752:	6878      	ldr	r0, [r7, #4]
 800d754:	f000 f82e 	bl	800d7b4 <SD_FindSCR>
 800d758:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 800d75a:	697b      	ldr	r3, [r7, #20]
 800d75c:	2b00      	cmp	r3, #0
 800d75e:	d001      	beq.n	800d764 <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 800d760:	697b      	ldr	r3, [r7, #20]
 800d762:	e023      	b.n	800d7ac <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800d764:	693b      	ldr	r3, [r7, #16]
 800d766:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800d76a:	2b00      	cmp	r3, #0
 800d76c:	d01c      	beq.n	800d7a8 <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800d76e:	687b      	ldr	r3, [r7, #4]
 800d770:	681a      	ldr	r2, [r3, #0]
 800d772:	687b      	ldr	r3, [r7, #4]
 800d774:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800d776:	041b      	lsls	r3, r3, #16
 800d778:	4619      	mov	r1, r3
 800d77a:	4610      	mov	r0, r2
 800d77c:	f002 fefc 	bl	8010578 <SDMMC_CmdAppCommand>
 800d780:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800d782:	697b      	ldr	r3, [r7, #20]
 800d784:	2b00      	cmp	r3, #0
 800d786:	d001      	beq.n	800d78c <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 800d788:	697b      	ldr	r3, [r7, #20]
 800d78a:	e00f      	b.n	800d7ac <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 800d78c:	687b      	ldr	r3, [r7, #4]
 800d78e:	681b      	ldr	r3, [r3, #0]
 800d790:	2100      	movs	r1, #0
 800d792:	4618      	mov	r0, r3
 800d794:	f002 ff33 	bl	80105fe <SDMMC_CmdBusWidth>
 800d798:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800d79a:	697b      	ldr	r3, [r7, #20]
 800d79c:	2b00      	cmp	r3, #0
 800d79e:	d001      	beq.n	800d7a4 <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 800d7a0:	697b      	ldr	r3, [r7, #20]
 800d7a2:	e003      	b.n	800d7ac <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 800d7a4:	2300      	movs	r3, #0
 800d7a6:	e001      	b.n	800d7ac <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800d7a8:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 800d7ac:	4618      	mov	r0, r3
 800d7ae:	3718      	adds	r7, #24
 800d7b0:	46bd      	mov	sp, r7
 800d7b2:	bd80      	pop	{r7, pc}

0800d7b4 <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 800d7b4:	b580      	push	{r7, lr}
 800d7b6:	b08e      	sub	sp, #56	; 0x38
 800d7b8:	af00      	add	r7, sp, #0
 800d7ba:	6078      	str	r0, [r7, #4]
 800d7bc:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800d7be:	f7f5 ff9b 	bl	80036f8 <HAL_GetTick>
 800d7c2:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t index = 0U;
 800d7c4:	2300      	movs	r3, #0
 800d7c6:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tempscr[2U] = {0UL, 0UL};
 800d7c8:	2300      	movs	r3, #0
 800d7ca:	60bb      	str	r3, [r7, #8]
 800d7cc:	2300      	movs	r3, #0
 800d7ce:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 800d7d0:	683b      	ldr	r3, [r7, #0]
 800d7d2:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 800d7d4:	687b      	ldr	r3, [r7, #4]
 800d7d6:	681b      	ldr	r3, [r3, #0]
 800d7d8:	2108      	movs	r1, #8
 800d7da:	4618      	mov	r0, r3
 800d7dc:	f002 fd7e 	bl	80102dc <SDMMC_CmdBlockLength>
 800d7e0:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 800d7e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d7e4:	2b00      	cmp	r3, #0
 800d7e6:	d001      	beq.n	800d7ec <SD_FindSCR+0x38>
  {
    return errorstate;
 800d7e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d7ea:	e0ad      	b.n	800d948 <SD_FindSCR+0x194>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 800d7ec:	687b      	ldr	r3, [r7, #4]
 800d7ee:	681a      	ldr	r2, [r3, #0]
 800d7f0:	687b      	ldr	r3, [r7, #4]
 800d7f2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800d7f4:	041b      	lsls	r3, r3, #16
 800d7f6:	4619      	mov	r1, r3
 800d7f8:	4610      	mov	r0, r2
 800d7fa:	f002 febd 	bl	8010578 <SDMMC_CmdAppCommand>
 800d7fe:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 800d800:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d802:	2b00      	cmp	r3, #0
 800d804:	d001      	beq.n	800d80a <SD_FindSCR+0x56>
  {
    return errorstate;
 800d806:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d808:	e09e      	b.n	800d948 <SD_FindSCR+0x194>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800d80a:	f04f 33ff 	mov.w	r3, #4294967295
 800d80e:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 800d810:	2308      	movs	r3, #8
 800d812:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_8B;
 800d814:	2330      	movs	r3, #48	; 0x30
 800d816:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 800d818:	2302      	movs	r3, #2
 800d81a:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800d81c:	2300      	movs	r3, #0
 800d81e:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 800d820:	2301      	movs	r3, #1
 800d822:	627b      	str	r3, [r7, #36]	; 0x24
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 800d824:	687b      	ldr	r3, [r7, #4]
 800d826:	681b      	ldr	r3, [r3, #0]
 800d828:	f107 0210 	add.w	r2, r7, #16
 800d82c:	4611      	mov	r1, r2
 800d82e:	4618      	mov	r0, r3
 800d830:	f002 fd28 	bl	8010284 <SDMMC_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 800d834:	687b      	ldr	r3, [r7, #4]
 800d836:	681b      	ldr	r3, [r3, #0]
 800d838:	4618      	mov	r0, r3
 800d83a:	f002 ff03 	bl	8010644 <SDMMC_CmdSendSCR>
 800d83e:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 800d840:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d842:	2b00      	cmp	r3, #0
 800d844:	d027      	beq.n	800d896 <SD_FindSCR+0xe2>
  {
    return errorstate;
 800d846:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d848:	e07e      	b.n	800d948 <SD_FindSCR+0x194>
  }

  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND | SDMMC_FLAG_DATAEND))
  {
    if((!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOE)) && (index == 0U))
 800d84a:	687b      	ldr	r3, [r7, #4]
 800d84c:	681b      	ldr	r3, [r3, #0]
 800d84e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d850:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800d854:	2b00      	cmp	r3, #0
 800d856:	d113      	bne.n	800d880 <SD_FindSCR+0xcc>
 800d858:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d85a:	2b00      	cmp	r3, #0
 800d85c:	d110      	bne.n	800d880 <SD_FindSCR+0xcc>
    {
      tempscr[0] = SDMMC_ReadFIFO(hsd->Instance);
 800d85e:	687b      	ldr	r3, [r7, #4]
 800d860:	681b      	ldr	r3, [r3, #0]
 800d862:	4618      	mov	r0, r3
 800d864:	f002 fc86 	bl	8010174 <SDMMC_ReadFIFO>
 800d868:	4603      	mov	r3, r0
 800d86a:	60bb      	str	r3, [r7, #8]
      tempscr[1] = SDMMC_ReadFIFO(hsd->Instance);
 800d86c:	687b      	ldr	r3, [r7, #4]
 800d86e:	681b      	ldr	r3, [r3, #0]
 800d870:	4618      	mov	r0, r3
 800d872:	f002 fc7f 	bl	8010174 <SDMMC_ReadFIFO>
 800d876:	4603      	mov	r3, r0
 800d878:	60fb      	str	r3, [r7, #12]
      index++;
 800d87a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d87c:	3301      	adds	r3, #1
 800d87e:	637b      	str	r3, [r7, #52]	; 0x34
    }


    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800d880:	f7f5 ff3a 	bl	80036f8 <HAL_GetTick>
 800d884:	4602      	mov	r2, r0
 800d886:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d888:	1ad3      	subs	r3, r2, r3
 800d88a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d88e:	d102      	bne.n	800d896 <SD_FindSCR+0xe2>
    {
      return HAL_SD_ERROR_TIMEOUT;
 800d890:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800d894:	e058      	b.n	800d948 <SD_FindSCR+0x194>
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND | SDMMC_FLAG_DATAEND))
 800d896:	687b      	ldr	r3, [r7, #4]
 800d898:	681b      	ldr	r3, [r3, #0]
 800d89a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800d89c:	f240 532a 	movw	r3, #1322	; 0x52a
 800d8a0:	4013      	ands	r3, r2
 800d8a2:	2b00      	cmp	r3, #0
 800d8a4:	d0d1      	beq.n	800d84a <SD_FindSCR+0x96>
    }
  }

  if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 800d8a6:	687b      	ldr	r3, [r7, #4]
 800d8a8:	681b      	ldr	r3, [r3, #0]
 800d8aa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d8ac:	f003 0308 	and.w	r3, r3, #8
 800d8b0:	2b00      	cmp	r3, #0
 800d8b2:	d005      	beq.n	800d8c0 <SD_FindSCR+0x10c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DTIMEOUT);
 800d8b4:	687b      	ldr	r3, [r7, #4]
 800d8b6:	681b      	ldr	r3, [r3, #0]
 800d8b8:	2208      	movs	r2, #8
 800d8ba:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 800d8bc:	2308      	movs	r3, #8
 800d8be:	e043      	b.n	800d948 <SD_FindSCR+0x194>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 800d8c0:	687b      	ldr	r3, [r7, #4]
 800d8c2:	681b      	ldr	r3, [r3, #0]
 800d8c4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d8c6:	f003 0302 	and.w	r3, r3, #2
 800d8ca:	2b00      	cmp	r3, #0
 800d8cc:	d005      	beq.n	800d8da <SD_FindSCR+0x126>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DCRCFAIL);
 800d8ce:	687b      	ldr	r3, [r7, #4]
 800d8d0:	681b      	ldr	r3, [r3, #0]
 800d8d2:	2202      	movs	r2, #2
 800d8d4:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 800d8d6:	2302      	movs	r3, #2
 800d8d8:	e036      	b.n	800d948 <SD_FindSCR+0x194>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 800d8da:	687b      	ldr	r3, [r7, #4]
 800d8dc:	681b      	ldr	r3, [r3, #0]
 800d8de:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d8e0:	f003 0320 	and.w	r3, r3, #32
 800d8e4:	2b00      	cmp	r3, #0
 800d8e6:	d005      	beq.n	800d8f4 <SD_FindSCR+0x140>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_RXOVERR);
 800d8e8:	687b      	ldr	r3, [r7, #4]
 800d8ea:	681b      	ldr	r3, [r3, #0]
 800d8ec:	2220      	movs	r2, #32
 800d8ee:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 800d8f0:	2320      	movs	r3, #32
 800d8f2:	e029      	b.n	800d948 <SD_FindSCR+0x194>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800d8f4:	687b      	ldr	r3, [r7, #4]
 800d8f6:	681b      	ldr	r3, [r3, #0]
 800d8f8:	4a15      	ldr	r2, [pc, #84]	; (800d950 <SD_FindSCR+0x19c>)
 800d8fa:	639a      	str	r2, [r3, #56]	; 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 800d8fc:	68fb      	ldr	r3, [r7, #12]
 800d8fe:	061a      	lsls	r2, r3, #24
 800d900:	68fb      	ldr	r3, [r7, #12]
 800d902:	021b      	lsls	r3, r3, #8
 800d904:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800d908:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 800d90a:	68fb      	ldr	r3, [r7, #12]
 800d90c:	0a1b      	lsrs	r3, r3, #8
 800d90e:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 800d912:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 800d914:	68fb      	ldr	r3, [r7, #12]
 800d916:	0e1b      	lsrs	r3, r3, #24
 800d918:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 800d91a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d91c:	601a      	str	r2, [r3, #0]
    scr++;
 800d91e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d920:	3304      	adds	r3, #4
 800d922:	62fb      	str	r3, [r7, #44]	; 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 800d924:	68bb      	ldr	r3, [r7, #8]
 800d926:	061a      	lsls	r2, r3, #24
 800d928:	68bb      	ldr	r3, [r7, #8]
 800d92a:	021b      	lsls	r3, r3, #8
 800d92c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800d930:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 800d932:	68bb      	ldr	r3, [r7, #8]
 800d934:	0a1b      	lsrs	r3, r3, #8
 800d936:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 800d93a:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 800d93c:	68bb      	ldr	r3, [r7, #8]
 800d93e:	0e1b      	lsrs	r3, r3, #24
 800d940:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 800d942:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d944:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 800d946:	2300      	movs	r3, #0
}
 800d948:	4618      	mov	r0, r3
 800d94a:	3738      	adds	r7, #56	; 0x38
 800d94c:	46bd      	mov	sp, r7
 800d94e:	bd80      	pop	{r7, pc}
 800d950:	18000f3a 	.word	0x18000f3a

0800d954 <SD_Read_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Read_IT(SD_HandleTypeDef *hsd)
{
 800d954:	b580      	push	{r7, lr}
 800d956:	b086      	sub	sp, #24
 800d958:	af00      	add	r7, sp, #0
 800d95a:	6078      	str	r0, [r7, #4]
  uint32_t count, data;
  uint8_t* tmp;

  tmp = hsd->pRxBuffPtr;
 800d95c:	687b      	ldr	r3, [r7, #4]
 800d95e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d960:	613b      	str	r3, [r7, #16]

  if (hsd->RxXferSize >= 32U)
 800d962:	687b      	ldr	r3, [r7, #4]
 800d964:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d966:	2b1f      	cmp	r3, #31
 800d968:	d936      	bls.n	800d9d8 <SD_Read_IT+0x84>
  {
    /* Read data from SDMMC Rx FIFO */
    for(count = 0U; count < 8U; count++)
 800d96a:	2300      	movs	r3, #0
 800d96c:	617b      	str	r3, [r7, #20]
 800d96e:	e027      	b.n	800d9c0 <SD_Read_IT+0x6c>
    {
      data = SDMMC_ReadFIFO(hsd->Instance);
 800d970:	687b      	ldr	r3, [r7, #4]
 800d972:	681b      	ldr	r3, [r3, #0]
 800d974:	4618      	mov	r0, r3
 800d976:	f002 fbfd 	bl	8010174 <SDMMC_ReadFIFO>
 800d97a:	60f8      	str	r0, [r7, #12]
      *tmp = (uint8_t)(data & 0xFFU);
 800d97c:	68fb      	ldr	r3, [r7, #12]
 800d97e:	b2da      	uxtb	r2, r3
 800d980:	693b      	ldr	r3, [r7, #16]
 800d982:	701a      	strb	r2, [r3, #0]
      tmp++;
 800d984:	693b      	ldr	r3, [r7, #16]
 800d986:	3301      	adds	r3, #1
 800d988:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 8U) & 0xFFU);
 800d98a:	68fb      	ldr	r3, [r7, #12]
 800d98c:	0a1b      	lsrs	r3, r3, #8
 800d98e:	b2da      	uxtb	r2, r3
 800d990:	693b      	ldr	r3, [r7, #16]
 800d992:	701a      	strb	r2, [r3, #0]
      tmp++;
 800d994:	693b      	ldr	r3, [r7, #16]
 800d996:	3301      	adds	r3, #1
 800d998:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 16U) & 0xFFU);
 800d99a:	68fb      	ldr	r3, [r7, #12]
 800d99c:	0c1b      	lsrs	r3, r3, #16
 800d99e:	b2da      	uxtb	r2, r3
 800d9a0:	693b      	ldr	r3, [r7, #16]
 800d9a2:	701a      	strb	r2, [r3, #0]
      tmp++;
 800d9a4:	693b      	ldr	r3, [r7, #16]
 800d9a6:	3301      	adds	r3, #1
 800d9a8:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 24U) & 0xFFU);
 800d9aa:	68fb      	ldr	r3, [r7, #12]
 800d9ac:	0e1b      	lsrs	r3, r3, #24
 800d9ae:	b2da      	uxtb	r2, r3
 800d9b0:	693b      	ldr	r3, [r7, #16]
 800d9b2:	701a      	strb	r2, [r3, #0]
      tmp++;
 800d9b4:	693b      	ldr	r3, [r7, #16]
 800d9b6:	3301      	adds	r3, #1
 800d9b8:	613b      	str	r3, [r7, #16]
    for(count = 0U; count < 8U; count++)
 800d9ba:	697b      	ldr	r3, [r7, #20]
 800d9bc:	3301      	adds	r3, #1
 800d9be:	617b      	str	r3, [r7, #20]
 800d9c0:	697b      	ldr	r3, [r7, #20]
 800d9c2:	2b07      	cmp	r3, #7
 800d9c4:	d9d4      	bls.n	800d970 <SD_Read_IT+0x1c>
    }

    hsd->pRxBuffPtr = tmp;
 800d9c6:	687b      	ldr	r3, [r7, #4]
 800d9c8:	693a      	ldr	r2, [r7, #16]
 800d9ca:	629a      	str	r2, [r3, #40]	; 0x28
    hsd->RxXferSize -= 32U;
 800d9cc:	687b      	ldr	r3, [r7, #4]
 800d9ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d9d0:	f1a3 0220 	sub.w	r2, r3, #32
 800d9d4:	687b      	ldr	r3, [r7, #4]
 800d9d6:	62da      	str	r2, [r3, #44]	; 0x2c
  }
}
 800d9d8:	bf00      	nop
 800d9da:	3718      	adds	r7, #24
 800d9dc:	46bd      	mov	sp, r7
 800d9de:	bd80      	pop	{r7, pc}

0800d9e0 <SD_Write_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Write_IT(SD_HandleTypeDef *hsd)
{
 800d9e0:	b580      	push	{r7, lr}
 800d9e2:	b086      	sub	sp, #24
 800d9e4:	af00      	add	r7, sp, #0
 800d9e6:	6078      	str	r0, [r7, #4]
  uint32_t count, data;
  uint8_t* tmp;

  tmp = hsd->pTxBuffPtr;
 800d9e8:	687b      	ldr	r3, [r7, #4]
 800d9ea:	6a1b      	ldr	r3, [r3, #32]
 800d9ec:	613b      	str	r3, [r7, #16]

  if (hsd->TxXferSize >= 32U)
 800d9ee:	687b      	ldr	r3, [r7, #4]
 800d9f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d9f2:	2b1f      	cmp	r3, #31
 800d9f4:	d93a      	bls.n	800da6c <SD_Write_IT+0x8c>
  {
    /* Write data to SDMMC Tx FIFO */
    for(count = 0U; count < 8U; count++)
 800d9f6:	2300      	movs	r3, #0
 800d9f8:	617b      	str	r3, [r7, #20]
 800d9fa:	e02b      	b.n	800da54 <SD_Write_IT+0x74>
    {
      data = (uint32_t)(*tmp);
 800d9fc:	693b      	ldr	r3, [r7, #16]
 800d9fe:	781b      	ldrb	r3, [r3, #0]
 800da00:	60fb      	str	r3, [r7, #12]
      tmp++;
 800da02:	693b      	ldr	r3, [r7, #16]
 800da04:	3301      	adds	r3, #1
 800da06:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 8U);
 800da08:	693b      	ldr	r3, [r7, #16]
 800da0a:	781b      	ldrb	r3, [r3, #0]
 800da0c:	021a      	lsls	r2, r3, #8
 800da0e:	68fb      	ldr	r3, [r7, #12]
 800da10:	4313      	orrs	r3, r2
 800da12:	60fb      	str	r3, [r7, #12]
      tmp++;
 800da14:	693b      	ldr	r3, [r7, #16]
 800da16:	3301      	adds	r3, #1
 800da18:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 16U);
 800da1a:	693b      	ldr	r3, [r7, #16]
 800da1c:	781b      	ldrb	r3, [r3, #0]
 800da1e:	041a      	lsls	r2, r3, #16
 800da20:	68fb      	ldr	r3, [r7, #12]
 800da22:	4313      	orrs	r3, r2
 800da24:	60fb      	str	r3, [r7, #12]
      tmp++;
 800da26:	693b      	ldr	r3, [r7, #16]
 800da28:	3301      	adds	r3, #1
 800da2a:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 24U);
 800da2c:	693b      	ldr	r3, [r7, #16]
 800da2e:	781b      	ldrb	r3, [r3, #0]
 800da30:	061a      	lsls	r2, r3, #24
 800da32:	68fb      	ldr	r3, [r7, #12]
 800da34:	4313      	orrs	r3, r2
 800da36:	60fb      	str	r3, [r7, #12]
      tmp++;
 800da38:	693b      	ldr	r3, [r7, #16]
 800da3a:	3301      	adds	r3, #1
 800da3c:	613b      	str	r3, [r7, #16]
      (void)SDMMC_WriteFIFO(hsd->Instance, &data);
 800da3e:	687b      	ldr	r3, [r7, #4]
 800da40:	681b      	ldr	r3, [r3, #0]
 800da42:	f107 020c 	add.w	r2, r7, #12
 800da46:	4611      	mov	r1, r2
 800da48:	4618      	mov	r0, r3
 800da4a:	f002 fba0 	bl	801018e <SDMMC_WriteFIFO>
    for(count = 0U; count < 8U; count++)
 800da4e:	697b      	ldr	r3, [r7, #20]
 800da50:	3301      	adds	r3, #1
 800da52:	617b      	str	r3, [r7, #20]
 800da54:	697b      	ldr	r3, [r7, #20]
 800da56:	2b07      	cmp	r3, #7
 800da58:	d9d0      	bls.n	800d9fc <SD_Write_IT+0x1c>
    }

    hsd->pTxBuffPtr = tmp;
 800da5a:	687b      	ldr	r3, [r7, #4]
 800da5c:	693a      	ldr	r2, [r7, #16]
 800da5e:	621a      	str	r2, [r3, #32]
    hsd->TxXferSize -= 32U;
 800da60:	687b      	ldr	r3, [r7, #4]
 800da62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800da64:	f1a3 0220 	sub.w	r2, r3, #32
 800da68:	687b      	ldr	r3, [r7, #4]
 800da6a:	625a      	str	r2, [r3, #36]	; 0x24
  }
}
 800da6c:	bf00      	nop
 800da6e:	3718      	adds	r7, #24
 800da70:	46bd      	mov	sp, r7
 800da72:	bd80      	pop	{r7, pc}

0800da74 <HAL_SDEx_Read_DMADoubleBuf0CpltCallback>:
  * @brief Read DMA Buffer 0 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Read_DMADoubleBuf0CpltCallback(SD_HandleTypeDef *hsd)
{
 800da74:	b480      	push	{r7}
 800da76:	b083      	sub	sp, #12
 800da78:	af00      	add	r7, sp, #0
 800da7a:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Read_DMADoubleBuf0CpltCallback can be implemented in the user file
   */
}
 800da7c:	bf00      	nop
 800da7e:	370c      	adds	r7, #12
 800da80:	46bd      	mov	sp, r7
 800da82:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da86:	4770      	bx	lr

0800da88 <HAL_SDEx_Read_DMADoubleBuf1CpltCallback>:
  * @brief Read DMA Buffer 1 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Read_DMADoubleBuf1CpltCallback(SD_HandleTypeDef *hsd)
{
 800da88:	b480      	push	{r7}
 800da8a:	b083      	sub	sp, #12
 800da8c:	af00      	add	r7, sp, #0
 800da8e:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Read_DMADoubleBuf1CpltCallback can be implemented in the user file
   */
}
 800da90:	bf00      	nop
 800da92:	370c      	adds	r7, #12
 800da94:	46bd      	mov	sp, r7
 800da96:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da9a:	4770      	bx	lr

0800da9c <HAL_SDEx_Write_DMADoubleBuf0CpltCallback>:
  * @brief Write DMA Buffer 0 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Write_DMADoubleBuf0CpltCallback(SD_HandleTypeDef *hsd)
{
 800da9c:	b480      	push	{r7}
 800da9e:	b083      	sub	sp, #12
 800daa0:	af00      	add	r7, sp, #0
 800daa2:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Write_DMADoubleBuf0CpltCallback can be implemented in the user file
   */
}
 800daa4:	bf00      	nop
 800daa6:	370c      	adds	r7, #12
 800daa8:	46bd      	mov	sp, r7
 800daaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800daae:	4770      	bx	lr

0800dab0 <HAL_SDEx_Write_DMADoubleBuf1CpltCallback>:
  * @brief Write DMA Buffer 1 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Write_DMADoubleBuf1CpltCallback(SD_HandleTypeDef *hsd)
{
 800dab0:	b480      	push	{r7}
 800dab2:	b083      	sub	sp, #12
 800dab4:	af00      	add	r7, sp, #0
 800dab6:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Write_DMADoubleBuf1CpltCallback can be implemented in the user file
   */
}
 800dab8:	bf00      	nop
 800daba:	370c      	adds	r7, #12
 800dabc:	46bd      	mov	sp, r7
 800dabe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dac2:	4770      	bx	lr

0800dac4 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800dac4:	b580      	push	{r7, lr}
 800dac6:	b084      	sub	sp, #16
 800dac8:	af00      	add	r7, sp, #0
 800daca:	6078      	str	r0, [r7, #4]
  uint32_t crc_length = 0UL;
 800dacc:	2300      	movs	r3, #0
 800dace:	60fb      	str	r3, [r7, #12]
  uint32_t packet_length;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800dad0:	687b      	ldr	r3, [r7, #4]
 800dad2:	2b00      	cmp	r3, #0
 800dad4:	d101      	bne.n	800dada <HAL_SPI_Init+0x16>
  {
    return HAL_ERROR;
 800dad6:	2301      	movs	r3, #1
 800dad8:	e0e2      	b.n	800dca0 <HAL_SPI_Init+0x1dc>
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800dada:	687b      	ldr	r3, [r7, #4]
 800dadc:	2200      	movs	r2, #0
 800dade:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 800dae0:	687b      	ldr	r3, [r7, #4]
 800dae2:	681b      	ldr	r3, [r3, #0]
 800dae4:	4a70      	ldr	r2, [pc, #448]	; (800dca8 <HAL_SPI_Init+0x1e4>)
 800dae6:	4293      	cmp	r3, r2
 800dae8:	d00f      	beq.n	800db0a <HAL_SPI_Init+0x46>
 800daea:	687b      	ldr	r3, [r7, #4]
 800daec:	681b      	ldr	r3, [r3, #0]
 800daee:	4a6f      	ldr	r2, [pc, #444]	; (800dcac <HAL_SPI_Init+0x1e8>)
 800daf0:	4293      	cmp	r3, r2
 800daf2:	d00a      	beq.n	800db0a <HAL_SPI_Init+0x46>
 800daf4:	687b      	ldr	r3, [r7, #4]
 800daf6:	681b      	ldr	r3, [r3, #0]
 800daf8:	4a6d      	ldr	r2, [pc, #436]	; (800dcb0 <HAL_SPI_Init+0x1ec>)
 800dafa:	4293      	cmp	r3, r2
 800dafc:	d005      	beq.n	800db0a <HAL_SPI_Init+0x46>
 800dafe:	687b      	ldr	r3, [r7, #4]
 800db00:	68db      	ldr	r3, [r3, #12]
 800db02:	2b0f      	cmp	r3, #15
 800db04:	d901      	bls.n	800db0a <HAL_SPI_Init+0x46>
  {
    return HAL_ERROR;
 800db06:	2301      	movs	r3, #1
 800db08:	e0ca      	b.n	800dca0 <HAL_SPI_Init+0x1dc>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 800db0a:	6878      	ldr	r0, [r7, #4]
 800db0c:	f001 f870 	bl	800ebf0 <SPI_GetPacketSize>
 800db10:	60b8      	str	r0, [r7, #8]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800db12:	687b      	ldr	r3, [r7, #4]
 800db14:	681b      	ldr	r3, [r3, #0]
 800db16:	4a64      	ldr	r2, [pc, #400]	; (800dca8 <HAL_SPI_Init+0x1e4>)
 800db18:	4293      	cmp	r3, r2
 800db1a:	d00c      	beq.n	800db36 <HAL_SPI_Init+0x72>
 800db1c:	687b      	ldr	r3, [r7, #4]
 800db1e:	681b      	ldr	r3, [r3, #0]
 800db20:	4a62      	ldr	r2, [pc, #392]	; (800dcac <HAL_SPI_Init+0x1e8>)
 800db22:	4293      	cmp	r3, r2
 800db24:	d007      	beq.n	800db36 <HAL_SPI_Init+0x72>
 800db26:	687b      	ldr	r3, [r7, #4]
 800db28:	681b      	ldr	r3, [r3, #0]
 800db2a:	4a61      	ldr	r2, [pc, #388]	; (800dcb0 <HAL_SPI_Init+0x1ec>)
 800db2c:	4293      	cmp	r3, r2
 800db2e:	d002      	beq.n	800db36 <HAL_SPI_Init+0x72>
 800db30:	68bb      	ldr	r3, [r7, #8]
 800db32:	2b08      	cmp	r3, #8
 800db34:	d811      	bhi.n	800db5a <HAL_SPI_Init+0x96>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800db36:	687b      	ldr	r3, [r7, #4]
 800db38:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800db3a:	4a5b      	ldr	r2, [pc, #364]	; (800dca8 <HAL_SPI_Init+0x1e4>)
 800db3c:	4293      	cmp	r3, r2
 800db3e:	d009      	beq.n	800db54 <HAL_SPI_Init+0x90>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800db40:	687b      	ldr	r3, [r7, #4]
 800db42:	681b      	ldr	r3, [r3, #0]
 800db44:	4a59      	ldr	r2, [pc, #356]	; (800dcac <HAL_SPI_Init+0x1e8>)
 800db46:	4293      	cmp	r3, r2
 800db48:	d004      	beq.n	800db54 <HAL_SPI_Init+0x90>
 800db4a:	687b      	ldr	r3, [r7, #4]
 800db4c:	681b      	ldr	r3, [r3, #0]
 800db4e:	4a58      	ldr	r2, [pc, #352]	; (800dcb0 <HAL_SPI_Init+0x1ec>)
 800db50:	4293      	cmp	r3, r2
 800db52:	d104      	bne.n	800db5e <HAL_SPI_Init+0x9a>
 800db54:	68bb      	ldr	r3, [r7, #8]
 800db56:	2b10      	cmp	r3, #16
 800db58:	d901      	bls.n	800db5e <HAL_SPI_Init+0x9a>
  {
    return HAL_ERROR;
 800db5a:	2301      	movs	r3, #1
 800db5c:	e0a0      	b.n	800dca0 <HAL_SPI_Init+0x1dc>
      return HAL_ERROR;
    }
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800db5e:	687b      	ldr	r3, [r7, #4]
 800db60:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800db64:	b2db      	uxtb	r3, r3
 800db66:	2b00      	cmp	r3, #0
 800db68:	d106      	bne.n	800db78 <HAL_SPI_Init+0xb4>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800db6a:	687b      	ldr	r3, [r7, #4]
 800db6c:	2200      	movs	r2, #0
 800db6e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800db72:	6878      	ldr	r0, [r7, #4]
 800db74:	f7f5 fa92 	bl	800309c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800db78:	687b      	ldr	r3, [r7, #4]
 800db7a:	2202      	movs	r2, #2
 800db7c:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800db80:	687b      	ldr	r3, [r7, #4]
 800db82:	681b      	ldr	r3, [r3, #0]
 800db84:	681a      	ldr	r2, [r3, #0]
 800db86:	687b      	ldr	r3, [r7, #4]
 800db88:	681b      	ldr	r3, [r3, #0]
 800db8a:	f022 0201 	bic.w	r2, r2, #1
 800db8e:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW))
 800db90:	687b      	ldr	r3, [r7, #4]
 800db92:	699b      	ldr	r3, [r3, #24]
 800db94:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800db98:	d110      	bne.n	800dbbc <HAL_SPI_Init+0xf8>
 800db9a:	687b      	ldr	r3, [r7, #4]
 800db9c:	685b      	ldr	r3, [r3, #4]
 800db9e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800dba2:	d10b      	bne.n	800dbbc <HAL_SPI_Init+0xf8>
 800dba4:	687b      	ldr	r3, [r7, #4]
 800dba6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dba8:	2b00      	cmp	r3, #0
 800dbaa:	d107      	bne.n	800dbbc <HAL_SPI_Init+0xf8>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 800dbac:	687b      	ldr	r3, [r7, #4]
 800dbae:	681b      	ldr	r3, [r3, #0]
 800dbb0:	681a      	ldr	r2, [r3, #0]
 800dbb2:	687b      	ldr	r3, [r7, #4]
 800dbb4:	681b      	ldr	r3, [r3, #0]
 800dbb6:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800dbba:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 800dbbc:	687b      	ldr	r3, [r7, #4]
 800dbbe:	69da      	ldr	r2, [r3, #28]
 800dbc0:	687b      	ldr	r3, [r7, #4]
 800dbc2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800dbc4:	431a      	orrs	r2, r3
 800dbc6:	68fb      	ldr	r3, [r7, #12]
 800dbc8:	431a      	orrs	r2, r3
 800dbca:	687b      	ldr	r3, [r7, #4]
 800dbcc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800dbce:	ea42 0103 	orr.w	r1, r2, r3
 800dbd2:	687b      	ldr	r3, [r7, #4]
 800dbd4:	68da      	ldr	r2, [r3, #12]
 800dbd6:	687b      	ldr	r3, [r7, #4]
 800dbd8:	681b      	ldr	r3, [r3, #0]
 800dbda:	430a      	orrs	r2, r1
 800dbdc:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode     | hspi->Init.TIMode           | hspi->Init.NSSPolarity             |
 800dbde:	687b      	ldr	r3, [r7, #4]
 800dbe0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800dbe2:	687b      	ldr	r3, [r7, #4]
 800dbe4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dbe6:	431a      	orrs	r2, r3
 800dbe8:	687b      	ldr	r3, [r7, #4]
 800dbea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dbec:	431a      	orrs	r2, r3
 800dbee:	687b      	ldr	r3, [r7, #4]
 800dbf0:	699b      	ldr	r3, [r3, #24]
 800dbf2:	431a      	orrs	r2, r3
 800dbf4:	687b      	ldr	r3, [r7, #4]
 800dbf6:	691b      	ldr	r3, [r3, #16]
 800dbf8:	431a      	orrs	r2, r3
 800dbfa:	687b      	ldr	r3, [r7, #4]
 800dbfc:	695b      	ldr	r3, [r3, #20]
 800dbfe:	431a      	orrs	r2, r3
 800dc00:	687b      	ldr	r3, [r7, #4]
 800dc02:	6a1b      	ldr	r3, [r3, #32]
 800dc04:	431a      	orrs	r2, r3
 800dc06:	687b      	ldr	r3, [r7, #4]
 800dc08:	685b      	ldr	r3, [r3, #4]
 800dc0a:	431a      	orrs	r2, r3
 800dc0c:	687b      	ldr	r3, [r7, #4]
 800dc0e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800dc10:	431a      	orrs	r2, r3
 800dc12:	687b      	ldr	r3, [r7, #4]
 800dc14:	689b      	ldr	r3, [r3, #8]
 800dc16:	431a      	orrs	r2, r3
 800dc18:	687b      	ldr	r3, [r7, #4]
 800dc1a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800dc1c:	ea42 0103 	orr.w	r1, r2, r3
 800dc20:	687b      	ldr	r3, [r7, #4]
 800dc22:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800dc24:	687b      	ldr	r3, [r7, #4]
 800dc26:	681b      	ldr	r3, [r3, #0]
 800dc28:	430a      	orrs	r2, r1
 800dc2a:	60da      	str	r2, [r3, #12]
    WRITE_REG(hspi->Instance->CRCPOLY, hspi->Init.CRCPolynomial);
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 800dc2c:	687b      	ldr	r3, [r7, #4]
 800dc2e:	685b      	ldr	r3, [r3, #4]
 800dc30:	2b00      	cmp	r3, #0
 800dc32:	d113      	bne.n	800dc5c <HAL_SPI_Init+0x198>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 800dc34:	687b      	ldr	r3, [r7, #4]
 800dc36:	681b      	ldr	r3, [r3, #0]
 800dc38:	689b      	ldr	r3, [r3, #8]
 800dc3a:	f423 52c0 	bic.w	r2, r3, #6144	; 0x1800
 800dc3e:	687b      	ldr	r3, [r7, #4]
 800dc40:	681b      	ldr	r3, [r3, #0]
 800dc42:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800dc46:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 800dc48:	687b      	ldr	r3, [r7, #4]
 800dc4a:	681b      	ldr	r3, [r3, #0]
 800dc4c:	689b      	ldr	r3, [r3, #8]
 800dc4e:	f423 62c0 	bic.w	r2, r3, #1536	; 0x600
 800dc52:	687b      	ldr	r3, [r7, #4]
 800dc54:	681b      	ldr	r3, [r3, #0]
 800dc56:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800dc5a:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800dc5c:	687b      	ldr	r3, [r7, #4]
 800dc5e:	681b      	ldr	r3, [r3, #0]
 800dc60:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800dc62:	687b      	ldr	r3, [r7, #4]
 800dc64:	681b      	ldr	r3, [r3, #0]
 800dc66:	f022 0201 	bic.w	r2, r2, #1
 800dc6a:	651a      	str	r2, [r3, #80]	; 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 800dc6c:	687b      	ldr	r3, [r7, #4]
 800dc6e:	685b      	ldr	r3, [r3, #4]
 800dc70:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800dc74:	2b00      	cmp	r3, #0
 800dc76:	d00a      	beq.n	800dc8e <HAL_SPI_Init+0x1ca>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 800dc78:	687b      	ldr	r3, [r7, #4]
 800dc7a:	681b      	ldr	r3, [r3, #0]
 800dc7c:	68db      	ldr	r3, [r3, #12]
 800dc7e:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800dc82:	687b      	ldr	r3, [r7, #4]
 800dc84:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800dc86:	687b      	ldr	r3, [r7, #4]
 800dc88:	681b      	ldr	r3, [r3, #0]
 800dc8a:	430a      	orrs	r2, r1
 800dc8c:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800dc8e:	687b      	ldr	r3, [r7, #4]
 800dc90:	2200      	movs	r2, #0
 800dc92:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 800dc96:	687b      	ldr	r3, [r7, #4]
 800dc98:	2201      	movs	r2, #1
 800dc9a:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  return HAL_OK;
 800dc9e:	2300      	movs	r3, #0
}
 800dca0:	4618      	mov	r0, r3
 800dca2:	3710      	adds	r7, #16
 800dca4:	46bd      	mov	sp, r7
 800dca6:	bd80      	pop	{r7, pc}
 800dca8:	40013000 	.word	0x40013000
 800dcac:	40003800 	.word	0x40003800
 800dcb0:	40003c00 	.word	0x40003c00

0800dcb4 <HAL_SPI_Transmit>:
  * @param  Size   : amount of data to be sent
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800dcb4:	b580      	push	{r7, lr}
 800dcb6:	b08a      	sub	sp, #40	; 0x28
 800dcb8:	af02      	add	r7, sp, #8
 800dcba:	60f8      	str	r0, [r7, #12]
 800dcbc:	60b9      	str	r1, [r7, #8]
 800dcbe:	603b      	str	r3, [r7, #0]
 800dcc0:	4613      	mov	r3, r2
 800dcc2:	80fb      	strh	r3, [r7, #6]
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 800dcc4:	68fb      	ldr	r3, [r7, #12]
 800dcc6:	681b      	ldr	r3, [r3, #0]
 800dcc8:	3320      	adds	r3, #32
 800dcca:	61fb      	str	r3, [r7, #28]
#endif /* __GNUC__ */

  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800dccc:	2300      	movs	r3, #0
 800dcce:	76fb      	strb	r3, [r7, #27]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_TXONLY(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800dcd0:	68fb      	ldr	r3, [r7, #12]
 800dcd2:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800dcd6:	2b01      	cmp	r3, #1
 800dcd8:	d101      	bne.n	800dcde <HAL_SPI_Transmit+0x2a>
 800dcda:	2302      	movs	r3, #2
 800dcdc:	e1d7      	b.n	800e08e <HAL_SPI_Transmit+0x3da>
 800dcde:	68fb      	ldr	r3, [r7, #12]
 800dce0:	2201      	movs	r2, #1
 800dce2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800dce6:	f7f5 fd07 	bl	80036f8 <HAL_GetTick>
 800dcea:	6178      	str	r0, [r7, #20]

  if (hspi->State != HAL_SPI_STATE_READY)
 800dcec:	68fb      	ldr	r3, [r7, #12]
 800dcee:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800dcf2:	b2db      	uxtb	r3, r3
 800dcf4:	2b01      	cmp	r3, #1
 800dcf6:	d007      	beq.n	800dd08 <HAL_SPI_Transmit+0x54>
  {
    errorcode = HAL_BUSY;
 800dcf8:	2302      	movs	r3, #2
 800dcfa:	76fb      	strb	r3, [r7, #27]
    __HAL_UNLOCK(hspi);
 800dcfc:	68fb      	ldr	r3, [r7, #12]
 800dcfe:	2200      	movs	r2, #0
 800dd00:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 800dd04:	7efb      	ldrb	r3, [r7, #27]
 800dd06:	e1c2      	b.n	800e08e <HAL_SPI_Transmit+0x3da>
  }

  if ((pData == NULL) || (Size == 0UL))
 800dd08:	68bb      	ldr	r3, [r7, #8]
 800dd0a:	2b00      	cmp	r3, #0
 800dd0c:	d002      	beq.n	800dd14 <HAL_SPI_Transmit+0x60>
 800dd0e:	88fb      	ldrh	r3, [r7, #6]
 800dd10:	2b00      	cmp	r3, #0
 800dd12:	d107      	bne.n	800dd24 <HAL_SPI_Transmit+0x70>
  {
    errorcode = HAL_ERROR;
 800dd14:	2301      	movs	r3, #1
 800dd16:	76fb      	strb	r3, [r7, #27]
    __HAL_UNLOCK(hspi);
 800dd18:	68fb      	ldr	r3, [r7, #12]
 800dd1a:	2200      	movs	r2, #0
 800dd1c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 800dd20:	7efb      	ldrb	r3, [r7, #27]
 800dd22:	e1b4      	b.n	800e08e <HAL_SPI_Transmit+0x3da>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800dd24:	68fb      	ldr	r3, [r7, #12]
 800dd26:	2203      	movs	r2, #3
 800dd28:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800dd2c:	68fb      	ldr	r3, [r7, #12]
 800dd2e:	2200      	movs	r2, #0
 800dd30:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800dd34:	68fb      	ldr	r3, [r7, #12]
 800dd36:	68ba      	ldr	r2, [r7, #8]
 800dd38:	65da      	str	r2, [r3, #92]	; 0x5c
  hspi->TxXferSize  = Size;
 800dd3a:	68fb      	ldr	r3, [r7, #12]
 800dd3c:	88fa      	ldrh	r2, [r7, #6]
 800dd3e:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
  hspi->TxXferCount = Size;
 800dd42:	68fb      	ldr	r3, [r7, #12]
 800dd44:	88fa      	ldrh	r2, [r7, #6]
 800dd46:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = NULL;
 800dd4a:	68fb      	ldr	r3, [r7, #12]
 800dd4c:	2200      	movs	r2, #0
 800dd4e:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->RxXferSize  = (uint16_t) 0UL;
 800dd50:	68fb      	ldr	r3, [r7, #12]
 800dd52:	2200      	movs	r2, #0
 800dd54:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  hspi->RxXferCount = (uint16_t) 0UL;
 800dd58:	68fb      	ldr	r3, [r7, #12]
 800dd5a:	2200      	movs	r2, #0
 800dd5c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  hspi->TxISR       = NULL;
 800dd60:	68fb      	ldr	r3, [r7, #12]
 800dd62:	2200      	movs	r2, #0
 800dd64:	675a      	str	r2, [r3, #116]	; 0x74
  hspi->RxISR       = NULL;
 800dd66:	68fb      	ldr	r3, [r7, #12]
 800dd68:	2200      	movs	r2, #0
 800dd6a:	671a      	str	r2, [r3, #112]	; 0x70

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800dd6c:	68fb      	ldr	r3, [r7, #12]
 800dd6e:	689b      	ldr	r3, [r3, #8]
 800dd70:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
 800dd74:	d107      	bne.n	800dd86 <HAL_SPI_Transmit+0xd2>
  {
    SPI_1LINE_TX(hspi);
 800dd76:	68fb      	ldr	r3, [r7, #12]
 800dd78:	681b      	ldr	r3, [r3, #0]
 800dd7a:	681a      	ldr	r2, [r3, #0]
 800dd7c:	68fb      	ldr	r3, [r7, #12]
 800dd7e:	681b      	ldr	r3, [r3, #0]
 800dd80:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800dd84:	601a      	str	r2, [r3, #0]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 800dd86:	68fb      	ldr	r3, [r7, #12]
 800dd88:	681b      	ldr	r3, [r3, #0]
 800dd8a:	685a      	ldr	r2, [r3, #4]
 800dd8c:	4b96      	ldr	r3, [pc, #600]	; (800dfe8 <HAL_SPI_Transmit+0x334>)
 800dd8e:	4013      	ands	r3, r2
 800dd90:	88f9      	ldrh	r1, [r7, #6]
 800dd92:	68fa      	ldr	r2, [r7, #12]
 800dd94:	6812      	ldr	r2, [r2, #0]
 800dd96:	430b      	orrs	r3, r1
 800dd98:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 800dd9a:	68fb      	ldr	r3, [r7, #12]
 800dd9c:	681b      	ldr	r3, [r3, #0]
 800dd9e:	681a      	ldr	r2, [r3, #0]
 800dda0:	68fb      	ldr	r3, [r7, #12]
 800dda2:	681b      	ldr	r3, [r3, #0]
 800dda4:	f042 0201 	orr.w	r2, r2, #1
 800dda8:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800ddaa:	68fb      	ldr	r3, [r7, #12]
 800ddac:	685b      	ldr	r3, [r3, #4]
 800ddae:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800ddb2:	d107      	bne.n	800ddc4 <HAL_SPI_Transmit+0x110>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 800ddb4:	68fb      	ldr	r3, [r7, #12]
 800ddb6:	681b      	ldr	r3, [r3, #0]
 800ddb8:	681a      	ldr	r2, [r3, #0]
 800ddba:	68fb      	ldr	r3, [r7, #12]
 800ddbc:	681b      	ldr	r3, [r3, #0]
 800ddbe:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800ddc2:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 800ddc4:	68fb      	ldr	r3, [r7, #12]
 800ddc6:	68db      	ldr	r3, [r3, #12]
 800ddc8:	2b0f      	cmp	r3, #15
 800ddca:	d947      	bls.n	800de5c <HAL_SPI_Transmit+0x1a8>
  {
    /* Transmit data in 32 Bit mode */
    while (hspi->TxXferCount > 0UL)
 800ddcc:	e03f      	b.n	800de4e <HAL_SPI_Transmit+0x19a>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 800ddce:	68fb      	ldr	r3, [r7, #12]
 800ddd0:	681b      	ldr	r3, [r3, #0]
 800ddd2:	695b      	ldr	r3, [r3, #20]
 800ddd4:	f003 0302 	and.w	r3, r3, #2
 800ddd8:	2b02      	cmp	r3, #2
 800ddda:	d114      	bne.n	800de06 <HAL_SPI_Transmit+0x152>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 800dddc:	68fb      	ldr	r3, [r7, #12]
 800ddde:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800dde0:	68fb      	ldr	r3, [r7, #12]
 800dde2:	681b      	ldr	r3, [r3, #0]
 800dde4:	6812      	ldr	r2, [r2, #0]
 800dde6:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 800dde8:	68fb      	ldr	r3, [r7, #12]
 800ddea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800ddec:	1d1a      	adds	r2, r3, #4
 800ddee:	68fb      	ldr	r3, [r7, #12]
 800ddf0:	65da      	str	r2, [r3, #92]	; 0x5c
        hspi->TxXferCount--;
 800ddf2:	68fb      	ldr	r3, [r7, #12]
 800ddf4:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800ddf8:	b29b      	uxth	r3, r3
 800ddfa:	3b01      	subs	r3, #1
 800ddfc:	b29a      	uxth	r2, r3
 800ddfe:	68fb      	ldr	r3, [r7, #12]
 800de00:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 800de04:	e023      	b.n	800de4e <HAL_SPI_Transmit+0x19a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800de06:	f7f5 fc77 	bl	80036f8 <HAL_GetTick>
 800de0a:	4602      	mov	r2, r0
 800de0c:	697b      	ldr	r3, [r7, #20]
 800de0e:	1ad3      	subs	r3, r2, r3
 800de10:	683a      	ldr	r2, [r7, #0]
 800de12:	429a      	cmp	r2, r3
 800de14:	d803      	bhi.n	800de1e <HAL_SPI_Transmit+0x16a>
 800de16:	683b      	ldr	r3, [r7, #0]
 800de18:	f1b3 3fff 	cmp.w	r3, #4294967295
 800de1c:	d102      	bne.n	800de24 <HAL_SPI_Transmit+0x170>
 800de1e:	683b      	ldr	r3, [r7, #0]
 800de20:	2b00      	cmp	r3, #0
 800de22:	d114      	bne.n	800de4e <HAL_SPI_Transmit+0x19a>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800de24:	68f8      	ldr	r0, [r7, #12]
 800de26:	f000 fe15 	bl	800ea54 <SPI_CloseTransfer>

          /* Process Unlocked */
          __HAL_UNLOCK(hspi);
 800de2a:	68fb      	ldr	r3, [r7, #12]
 800de2c:	2200      	movs	r2, #0
 800de2e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800de32:	68fb      	ldr	r3, [r7, #12]
 800de34:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800de38:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800de3c:	68fb      	ldr	r3, [r7, #12]
 800de3e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800de42:	68fb      	ldr	r3, [r7, #12]
 800de44:	2201      	movs	r2, #1
 800de46:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_ERROR;
 800de4a:	2301      	movs	r3, #1
 800de4c:	e11f      	b.n	800e08e <HAL_SPI_Transmit+0x3da>
    while (hspi->TxXferCount > 0UL)
 800de4e:	68fb      	ldr	r3, [r7, #12]
 800de50:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800de54:	b29b      	uxth	r3, r3
 800de56:	2b00      	cmp	r3, #0
 800de58:	d1b9      	bne.n	800ddce <HAL_SPI_Transmit+0x11a>
 800de5a:	e0f2      	b.n	800e042 <HAL_SPI_Transmit+0x38e>
        }
      }
    }
  }
  /* Transmit data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800de5c:	68fb      	ldr	r3, [r7, #12]
 800de5e:	68db      	ldr	r3, [r3, #12]
 800de60:	2b07      	cmp	r3, #7
 800de62:	f240 80e7 	bls.w	800e034 <HAL_SPI_Transmit+0x380>
  {
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0UL)
 800de66:	e05d      	b.n	800df24 <HAL_SPI_Transmit+0x270>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 800de68:	68fb      	ldr	r3, [r7, #12]
 800de6a:	681b      	ldr	r3, [r3, #0]
 800de6c:	695b      	ldr	r3, [r3, #20]
 800de6e:	f003 0302 	and.w	r3, r3, #2
 800de72:	2b02      	cmp	r3, #2
 800de74:	d132      	bne.n	800dedc <HAL_SPI_Transmit+0x228>
      {
        if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 800de76:	68fb      	ldr	r3, [r7, #12]
 800de78:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800de7c:	b29b      	uxth	r3, r3
 800de7e:	2b01      	cmp	r3, #1
 800de80:	d918      	bls.n	800deb4 <HAL_SPI_Transmit+0x200>
 800de82:	68fb      	ldr	r3, [r7, #12]
 800de84:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800de86:	2b00      	cmp	r3, #0
 800de88:	d014      	beq.n	800deb4 <HAL_SPI_Transmit+0x200>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 800de8a:	68fb      	ldr	r3, [r7, #12]
 800de8c:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800de8e:	68fb      	ldr	r3, [r7, #12]
 800de90:	681b      	ldr	r3, [r3, #0]
 800de92:	6812      	ldr	r2, [r2, #0]
 800de94:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 800de96:	68fb      	ldr	r3, [r7, #12]
 800de98:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800de9a:	1d1a      	adds	r2, r3, #4
 800de9c:	68fb      	ldr	r3, [r7, #12]
 800de9e:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 800dea0:	68fb      	ldr	r3, [r7, #12]
 800dea2:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800dea6:	b29b      	uxth	r3, r3
 800dea8:	3b02      	subs	r3, #2
 800deaa:	b29a      	uxth	r2, r3
 800deac:	68fb      	ldr	r3, [r7, #12]
 800deae:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 800deb2:	e037      	b.n	800df24 <HAL_SPI_Transmit+0x270>
        }
        else
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((uint16_t *)hspi->pTxBuffPtr);
 800deb4:	68fb      	ldr	r3, [r7, #12]
 800deb6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800deb8:	881a      	ldrh	r2, [r3, #0]
 800deba:	69fb      	ldr	r3, [r7, #28]
 800debc:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800debe:	68fb      	ldr	r3, [r7, #12]
 800dec0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800dec2:	1c9a      	adds	r2, r3, #2
 800dec4:	68fb      	ldr	r3, [r7, #12]
 800dec6:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount--;
 800dec8:	68fb      	ldr	r3, [r7, #12]
 800deca:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800dece:	b29b      	uxth	r3, r3
 800ded0:	3b01      	subs	r3, #1
 800ded2:	b29a      	uxth	r2, r3
 800ded4:	68fb      	ldr	r3, [r7, #12]
 800ded6:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 800deda:	e023      	b.n	800df24 <HAL_SPI_Transmit+0x270>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800dedc:	f7f5 fc0c 	bl	80036f8 <HAL_GetTick>
 800dee0:	4602      	mov	r2, r0
 800dee2:	697b      	ldr	r3, [r7, #20]
 800dee4:	1ad3      	subs	r3, r2, r3
 800dee6:	683a      	ldr	r2, [r7, #0]
 800dee8:	429a      	cmp	r2, r3
 800deea:	d803      	bhi.n	800def4 <HAL_SPI_Transmit+0x240>
 800deec:	683b      	ldr	r3, [r7, #0]
 800deee:	f1b3 3fff 	cmp.w	r3, #4294967295
 800def2:	d102      	bne.n	800defa <HAL_SPI_Transmit+0x246>
 800def4:	683b      	ldr	r3, [r7, #0]
 800def6:	2b00      	cmp	r3, #0
 800def8:	d114      	bne.n	800df24 <HAL_SPI_Transmit+0x270>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800defa:	68f8      	ldr	r0, [r7, #12]
 800defc:	f000 fdaa 	bl	800ea54 <SPI_CloseTransfer>

          /* Process Unlocked */
          __HAL_UNLOCK(hspi);
 800df00:	68fb      	ldr	r3, [r7, #12]
 800df02:	2200      	movs	r2, #0
 800df04:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800df08:	68fb      	ldr	r3, [r7, #12]
 800df0a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800df0e:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800df12:	68fb      	ldr	r3, [r7, #12]
 800df14:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800df18:	68fb      	ldr	r3, [r7, #12]
 800df1a:	2201      	movs	r2, #1
 800df1c:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_ERROR;
 800df20:	2301      	movs	r3, #1
 800df22:	e0b4      	b.n	800e08e <HAL_SPI_Transmit+0x3da>
    while (hspi->TxXferCount > 0UL)
 800df24:	68fb      	ldr	r3, [r7, #12]
 800df26:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800df2a:	b29b      	uxth	r3, r3
 800df2c:	2b00      	cmp	r3, #0
 800df2e:	d19b      	bne.n	800de68 <HAL_SPI_Transmit+0x1b4>
 800df30:	e087      	b.n	800e042 <HAL_SPI_Transmit+0x38e>
  else
  {
    while (hspi->TxXferCount > 0UL)
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 800df32:	68fb      	ldr	r3, [r7, #12]
 800df34:	681b      	ldr	r3, [r3, #0]
 800df36:	695b      	ldr	r3, [r3, #20]
 800df38:	f003 0302 	and.w	r3, r3, #2
 800df3c:	2b02      	cmp	r3, #2
 800df3e:	d155      	bne.n	800dfec <HAL_SPI_Transmit+0x338>
      {
        if ((hspi->TxXferCount > 3UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_03DATA))
 800df40:	68fb      	ldr	r3, [r7, #12]
 800df42:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800df46:	b29b      	uxth	r3, r3
 800df48:	2b03      	cmp	r3, #3
 800df4a:	d918      	bls.n	800df7e <HAL_SPI_Transmit+0x2ca>
 800df4c:	68fb      	ldr	r3, [r7, #12]
 800df4e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800df50:	2b40      	cmp	r3, #64	; 0x40
 800df52:	d914      	bls.n	800df7e <HAL_SPI_Transmit+0x2ca>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 800df54:	68fb      	ldr	r3, [r7, #12]
 800df56:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800df58:	68fb      	ldr	r3, [r7, #12]
 800df5a:	681b      	ldr	r3, [r3, #0]
 800df5c:	6812      	ldr	r2, [r2, #0]
 800df5e:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 800df60:	68fb      	ldr	r3, [r7, #12]
 800df62:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800df64:	1d1a      	adds	r2, r3, #4
 800df66:	68fb      	ldr	r3, [r7, #12]
 800df68:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)4UL;
 800df6a:	68fb      	ldr	r3, [r7, #12]
 800df6c:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800df70:	b29b      	uxth	r3, r3
 800df72:	3b04      	subs	r3, #4
 800df74:	b29a      	uxth	r2, r3
 800df76:	68fb      	ldr	r3, [r7, #12]
 800df78:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 800df7c:	e05a      	b.n	800e034 <HAL_SPI_Transmit+0x380>
        }
        else if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 800df7e:	68fb      	ldr	r3, [r7, #12]
 800df80:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800df84:	b29b      	uxth	r3, r3
 800df86:	2b01      	cmp	r3, #1
 800df88:	d917      	bls.n	800dfba <HAL_SPI_Transmit+0x306>
 800df8a:	68fb      	ldr	r3, [r7, #12]
 800df8c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800df8e:	2b00      	cmp	r3, #0
 800df90:	d013      	beq.n	800dfba <HAL_SPI_Transmit+0x306>
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((uint16_t *)hspi->pTxBuffPtr);
 800df92:	68fb      	ldr	r3, [r7, #12]
 800df94:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800df96:	881a      	ldrh	r2, [r3, #0]
 800df98:	69fb      	ldr	r3, [r7, #28]
 800df9a:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800df9c:	68fb      	ldr	r3, [r7, #12]
 800df9e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800dfa0:	1c9a      	adds	r2, r3, #2
 800dfa2:	68fb      	ldr	r3, [r7, #12]
 800dfa4:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 800dfa6:	68fb      	ldr	r3, [r7, #12]
 800dfa8:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800dfac:	b29b      	uxth	r3, r3
 800dfae:	3b02      	subs	r3, #2
 800dfb0:	b29a      	uxth	r2, r3
 800dfb2:	68fb      	ldr	r3, [r7, #12]
 800dfb4:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 800dfb8:	e03c      	b.n	800e034 <HAL_SPI_Transmit+0x380>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->TXDR) = *((uint8_t *)hspi->pTxBuffPtr);
 800dfba:	68fb      	ldr	r3, [r7, #12]
 800dfbc:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800dfbe:	68fb      	ldr	r3, [r7, #12]
 800dfc0:	681b      	ldr	r3, [r3, #0]
 800dfc2:	3320      	adds	r3, #32
 800dfc4:	7812      	ldrb	r2, [r2, #0]
 800dfc6:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr += sizeof(uint8_t);
 800dfc8:	68fb      	ldr	r3, [r7, #12]
 800dfca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800dfcc:	1c5a      	adds	r2, r3, #1
 800dfce:	68fb      	ldr	r3, [r7, #12]
 800dfd0:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount--;
 800dfd2:	68fb      	ldr	r3, [r7, #12]
 800dfd4:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800dfd8:	b29b      	uxth	r3, r3
 800dfda:	3b01      	subs	r3, #1
 800dfdc:	b29a      	uxth	r2, r3
 800dfde:	68fb      	ldr	r3, [r7, #12]
 800dfe0:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 800dfe4:	e026      	b.n	800e034 <HAL_SPI_Transmit+0x380>
 800dfe6:	bf00      	nop
 800dfe8:	ffff0000 	.word	0xffff0000
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800dfec:	f7f5 fb84 	bl	80036f8 <HAL_GetTick>
 800dff0:	4602      	mov	r2, r0
 800dff2:	697b      	ldr	r3, [r7, #20]
 800dff4:	1ad3      	subs	r3, r2, r3
 800dff6:	683a      	ldr	r2, [r7, #0]
 800dff8:	429a      	cmp	r2, r3
 800dffa:	d803      	bhi.n	800e004 <HAL_SPI_Transmit+0x350>
 800dffc:	683b      	ldr	r3, [r7, #0]
 800dffe:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e002:	d102      	bne.n	800e00a <HAL_SPI_Transmit+0x356>
 800e004:	683b      	ldr	r3, [r7, #0]
 800e006:	2b00      	cmp	r3, #0
 800e008:	d114      	bne.n	800e034 <HAL_SPI_Transmit+0x380>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800e00a:	68f8      	ldr	r0, [r7, #12]
 800e00c:	f000 fd22 	bl	800ea54 <SPI_CloseTransfer>

          /* Process Unlocked */
          __HAL_UNLOCK(hspi);
 800e010:	68fb      	ldr	r3, [r7, #12]
 800e012:	2200      	movs	r2, #0
 800e014:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800e018:	68fb      	ldr	r3, [r7, #12]
 800e01a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800e01e:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800e022:	68fb      	ldr	r3, [r7, #12]
 800e024:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800e028:	68fb      	ldr	r3, [r7, #12]
 800e02a:	2201      	movs	r2, #1
 800e02c:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_ERROR;
 800e030:	2301      	movs	r3, #1
 800e032:	e02c      	b.n	800e08e <HAL_SPI_Transmit+0x3da>
    while (hspi->TxXferCount > 0UL)
 800e034:	68fb      	ldr	r3, [r7, #12]
 800e036:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800e03a:	b29b      	uxth	r3, r3
 800e03c:	2b00      	cmp	r3, #0
 800e03e:	f47f af78 	bne.w	800df32 <HAL_SPI_Transmit+0x27e>
      }
    }
  }

  /* Wait for Tx (and CRC) data to be sent */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, tickstart, Timeout) != HAL_OK)
 800e042:	683b      	ldr	r3, [r7, #0]
 800e044:	9300      	str	r3, [sp, #0]
 800e046:	697b      	ldr	r3, [r7, #20]
 800e048:	2200      	movs	r2, #0
 800e04a:	2108      	movs	r1, #8
 800e04c:	68f8      	ldr	r0, [r7, #12]
 800e04e:	f000 fda1 	bl	800eb94 <SPI_WaitOnFlagUntilTimeout>
 800e052:	4603      	mov	r3, r0
 800e054:	2b00      	cmp	r3, #0
 800e056:	d007      	beq.n	800e068 <HAL_SPI_Transmit+0x3b4>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800e058:	68fb      	ldr	r3, [r7, #12]
 800e05a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800e05e:	f043 0220 	orr.w	r2, r3, #32
 800e062:	68fb      	ldr	r3, [r7, #12]
 800e064:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 800e068:	68f8      	ldr	r0, [r7, #12]
 800e06a:	f000 fcf3 	bl	800ea54 <SPI_CloseTransfer>

  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800e06e:	68fb      	ldr	r3, [r7, #12]
 800e070:	2200      	movs	r2, #0
 800e072:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  hspi->State = HAL_SPI_STATE_READY;
 800e076:	68fb      	ldr	r3, [r7, #12]
 800e078:	2201      	movs	r2, #1
 800e07a:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800e07e:	68fb      	ldr	r3, [r7, #12]
 800e080:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800e084:	2b00      	cmp	r3, #0
 800e086:	d001      	beq.n	800e08c <HAL_SPI_Transmit+0x3d8>
  {
    return HAL_ERROR;
 800e088:	2301      	movs	r3, #1
 800e08a:	e000      	b.n	800e08e <HAL_SPI_Transmit+0x3da>
  }
  return errorcode;
 800e08c:	7efb      	ldrb	r3, [r7, #27]
}
 800e08e:	4618      	mov	r0, r3
 800e090:	3720      	adds	r7, #32
 800e092:	46bd      	mov	sp, r7
 800e094:	bd80      	pop	{r7, pc}
 800e096:	bf00      	nop

0800e098 <HAL_SPI_Receive>:
  * @param  Size   : amount of data to be received
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800e098:	b580      	push	{r7, lr}
 800e09a:	b08a      	sub	sp, #40	; 0x28
 800e09c:	af02      	add	r7, sp, #8
 800e09e:	60f8      	str	r0, [r7, #12]
 800e0a0:	60b9      	str	r1, [r7, #8]
 800e0a2:	603b      	str	r3, [r7, #0]
 800e0a4:	4613      	mov	r3, r2
 800e0a6:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800e0a8:	2300      	movs	r3, #0
 800e0aa:	77fb      	strb	r3, [r7, #31]
#if defined (__GNUC__)
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 800e0ac:	68fb      	ldr	r3, [r7, #12]
 800e0ae:	681b      	ldr	r3, [r3, #0]
 800e0b0:	3330      	adds	r3, #48	; 0x30
 800e0b2:	61bb      	str	r3, [r7, #24]
#endif /* __GNUC__ */

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_RXONLY(hspi->Init.Direction));

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 800e0b4:	68fb      	ldr	r3, [r7, #12]
 800e0b6:	685b      	ldr	r3, [r3, #4]
 800e0b8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800e0bc:	d112      	bne.n	800e0e4 <HAL_SPI_Receive+0x4c>
 800e0be:	68fb      	ldr	r3, [r7, #12]
 800e0c0:	689b      	ldr	r3, [r3, #8]
 800e0c2:	2b00      	cmp	r3, #0
 800e0c4:	d10e      	bne.n	800e0e4 <HAL_SPI_Receive+0x4c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 800e0c6:	68fb      	ldr	r3, [r7, #12]
 800e0c8:	2204      	movs	r2, #4
 800e0ca:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 800e0ce:	88fa      	ldrh	r2, [r7, #6]
 800e0d0:	683b      	ldr	r3, [r7, #0]
 800e0d2:	9300      	str	r3, [sp, #0]
 800e0d4:	4613      	mov	r3, r2
 800e0d6:	68ba      	ldr	r2, [r7, #8]
 800e0d8:	68b9      	ldr	r1, [r7, #8]
 800e0da:	68f8      	ldr	r0, [r7, #12]
 800e0dc:	f000 f9ce 	bl	800e47c <HAL_SPI_TransmitReceive>
 800e0e0:	4603      	mov	r3, r0
 800e0e2:	e1c7      	b.n	800e474 <HAL_SPI_Receive+0x3dc>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800e0e4:	68fb      	ldr	r3, [r7, #12]
 800e0e6:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800e0ea:	2b01      	cmp	r3, #1
 800e0ec:	d101      	bne.n	800e0f2 <HAL_SPI_Receive+0x5a>
 800e0ee:	2302      	movs	r3, #2
 800e0f0:	e1c0      	b.n	800e474 <HAL_SPI_Receive+0x3dc>
 800e0f2:	68fb      	ldr	r3, [r7, #12]
 800e0f4:	2201      	movs	r2, #1
 800e0f6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800e0fa:	f7f5 fafd 	bl	80036f8 <HAL_GetTick>
 800e0fe:	6178      	str	r0, [r7, #20]

  if (hspi->State != HAL_SPI_STATE_READY)
 800e100:	68fb      	ldr	r3, [r7, #12]
 800e102:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800e106:	b2db      	uxtb	r3, r3
 800e108:	2b01      	cmp	r3, #1
 800e10a:	d007      	beq.n	800e11c <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_BUSY;
 800e10c:	2302      	movs	r3, #2
 800e10e:	77fb      	strb	r3, [r7, #31]
    __HAL_UNLOCK(hspi);
 800e110:	68fb      	ldr	r3, [r7, #12]
 800e112:	2200      	movs	r2, #0
 800e114:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 800e118:	7ffb      	ldrb	r3, [r7, #31]
 800e11a:	e1ab      	b.n	800e474 <HAL_SPI_Receive+0x3dc>
  }

  if ((pData == NULL) || (Size == 0UL))
 800e11c:	68bb      	ldr	r3, [r7, #8]
 800e11e:	2b00      	cmp	r3, #0
 800e120:	d002      	beq.n	800e128 <HAL_SPI_Receive+0x90>
 800e122:	88fb      	ldrh	r3, [r7, #6]
 800e124:	2b00      	cmp	r3, #0
 800e126:	d107      	bne.n	800e138 <HAL_SPI_Receive+0xa0>
  {
    errorcode = HAL_ERROR;
 800e128:	2301      	movs	r3, #1
 800e12a:	77fb      	strb	r3, [r7, #31]
    __HAL_UNLOCK(hspi);
 800e12c:	68fb      	ldr	r3, [r7, #12]
 800e12e:	2200      	movs	r2, #0
 800e130:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 800e134:	7ffb      	ldrb	r3, [r7, #31]
 800e136:	e19d      	b.n	800e474 <HAL_SPI_Receive+0x3dc>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800e138:	68fb      	ldr	r3, [r7, #12]
 800e13a:	2204      	movs	r2, #4
 800e13c:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800e140:	68fb      	ldr	r3, [r7, #12]
 800e142:	2200      	movs	r2, #0
 800e144:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800e148:	68fb      	ldr	r3, [r7, #12]
 800e14a:	68ba      	ldr	r2, [r7, #8]
 800e14c:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->RxXferSize  = Size;
 800e14e:	68fb      	ldr	r3, [r7, #12]
 800e150:	88fa      	ldrh	r2, [r7, #6]
 800e152:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  hspi->RxXferCount = Size;
 800e156:	68fb      	ldr	r3, [r7, #12]
 800e158:	88fa      	ldrh	r2, [r7, #6]
 800e15a:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = NULL;
 800e15e:	68fb      	ldr	r3, [r7, #12]
 800e160:	2200      	movs	r2, #0
 800e162:	65da      	str	r2, [r3, #92]	; 0x5c
  hspi->TxXferSize  = (uint16_t) 0UL;
 800e164:	68fb      	ldr	r3, [r7, #12]
 800e166:	2200      	movs	r2, #0
 800e168:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
  hspi->TxXferCount = (uint16_t) 0UL;
 800e16c:	68fb      	ldr	r3, [r7, #12]
 800e16e:	2200      	movs	r2, #0
 800e170:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->RxISR       = NULL;
 800e174:	68fb      	ldr	r3, [r7, #12]
 800e176:	2200      	movs	r2, #0
 800e178:	671a      	str	r2, [r3, #112]	; 0x70
  hspi->TxISR       = NULL;
 800e17a:	68fb      	ldr	r3, [r7, #12]
 800e17c:	2200      	movs	r2, #0
 800e17e:	675a      	str	r2, [r3, #116]	; 0x74

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800e180:	68fb      	ldr	r3, [r7, #12]
 800e182:	689b      	ldr	r3, [r3, #8]
 800e184:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
 800e188:	d107      	bne.n	800e19a <HAL_SPI_Receive+0x102>
  {
    SPI_1LINE_RX(hspi);
 800e18a:	68fb      	ldr	r3, [r7, #12]
 800e18c:	681b      	ldr	r3, [r3, #0]
 800e18e:	681a      	ldr	r2, [r3, #0]
 800e190:	68fb      	ldr	r3, [r7, #12]
 800e192:	681b      	ldr	r3, [r3, #0]
 800e194:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800e198:	601a      	str	r2, [r3, #0]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 800e19a:	68fb      	ldr	r3, [r7, #12]
 800e19c:	681b      	ldr	r3, [r3, #0]
 800e19e:	685a      	ldr	r2, [r3, #4]
 800e1a0:	4b94      	ldr	r3, [pc, #592]	; (800e3f4 <HAL_SPI_Receive+0x35c>)
 800e1a2:	4013      	ands	r3, r2
 800e1a4:	88f9      	ldrh	r1, [r7, #6]
 800e1a6:	68fa      	ldr	r2, [r7, #12]
 800e1a8:	6812      	ldr	r2, [r2, #0]
 800e1aa:	430b      	orrs	r3, r1
 800e1ac:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 800e1ae:	68fb      	ldr	r3, [r7, #12]
 800e1b0:	681b      	ldr	r3, [r3, #0]
 800e1b2:	681a      	ldr	r2, [r3, #0]
 800e1b4:	68fb      	ldr	r3, [r7, #12]
 800e1b6:	681b      	ldr	r3, [r3, #0]
 800e1b8:	f042 0201 	orr.w	r2, r2, #1
 800e1bc:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800e1be:	68fb      	ldr	r3, [r7, #12]
 800e1c0:	685b      	ldr	r3, [r3, #4]
 800e1c2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800e1c6:	d107      	bne.n	800e1d8 <HAL_SPI_Receive+0x140>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 800e1c8:	68fb      	ldr	r3, [r7, #12]
 800e1ca:	681b      	ldr	r3, [r3, #0]
 800e1cc:	681a      	ldr	r2, [r3, #0]
 800e1ce:	68fb      	ldr	r3, [r7, #12]
 800e1d0:	681b      	ldr	r3, [r3, #0]
 800e1d2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800e1d6:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 800e1d8:	68fb      	ldr	r3, [r7, #12]
 800e1da:	68db      	ldr	r3, [r3, #12]
 800e1dc:	2b0f      	cmp	r3, #15
 800e1de:	d948      	bls.n	800e272 <HAL_SPI_Receive+0x1da>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
 800e1e0:	e040      	b.n	800e264 <HAL_SPI_Receive+0x1cc>
    {
      /* Check the RXWNE/EOT flag */
      if ((hspi->Instance->SR & (SPI_FLAG_RXWNE | SPI_FLAG_EOT)) != 0UL)
 800e1e2:	68fb      	ldr	r3, [r7, #12]
 800e1e4:	681b      	ldr	r3, [r3, #0]
 800e1e6:	695a      	ldr	r2, [r3, #20]
 800e1e8:	f248 0308 	movw	r3, #32776	; 0x8008
 800e1ec:	4013      	ands	r3, r2
 800e1ee:	2b00      	cmp	r3, #0
 800e1f0:	d014      	beq.n	800e21c <HAL_SPI_Receive+0x184>
      {
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 800e1f2:	68fb      	ldr	r3, [r7, #12]
 800e1f4:	681a      	ldr	r2, [r3, #0]
 800e1f6:	68fb      	ldr	r3, [r7, #12]
 800e1f8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e1fa:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800e1fc:	601a      	str	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint32_t);
 800e1fe:	68fb      	ldr	r3, [r7, #12]
 800e200:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e202:	1d1a      	adds	r2, r3, #4
 800e204:	68fb      	ldr	r3, [r7, #12]
 800e206:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount--;
 800e208:	68fb      	ldr	r3, [r7, #12]
 800e20a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800e20e:	b29b      	uxth	r3, r3
 800e210:	3b01      	subs	r3, #1
 800e212:	b29a      	uxth	r2, r3
 800e214:	68fb      	ldr	r3, [r7, #12]
 800e216:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800e21a:	e023      	b.n	800e264 <HAL_SPI_Receive+0x1cc>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800e21c:	f7f5 fa6c 	bl	80036f8 <HAL_GetTick>
 800e220:	4602      	mov	r2, r0
 800e222:	697b      	ldr	r3, [r7, #20]
 800e224:	1ad3      	subs	r3, r2, r3
 800e226:	683a      	ldr	r2, [r7, #0]
 800e228:	429a      	cmp	r2, r3
 800e22a:	d803      	bhi.n	800e234 <HAL_SPI_Receive+0x19c>
 800e22c:	683b      	ldr	r3, [r7, #0]
 800e22e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e232:	d102      	bne.n	800e23a <HAL_SPI_Receive+0x1a2>
 800e234:	683b      	ldr	r3, [r7, #0]
 800e236:	2b00      	cmp	r3, #0
 800e238:	d114      	bne.n	800e264 <HAL_SPI_Receive+0x1cc>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800e23a:	68f8      	ldr	r0, [r7, #12]
 800e23c:	f000 fc0a 	bl	800ea54 <SPI_CloseTransfer>

          /* Process Unlocked */
          __HAL_UNLOCK(hspi);
 800e240:	68fb      	ldr	r3, [r7, #12]
 800e242:	2200      	movs	r2, #0
 800e244:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800e248:	68fb      	ldr	r3, [r7, #12]
 800e24a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800e24e:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800e252:	68fb      	ldr	r3, [r7, #12]
 800e254:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800e258:	68fb      	ldr	r3, [r7, #12]
 800e25a:	2201      	movs	r2, #1
 800e25c:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_ERROR;
 800e260:	2301      	movs	r3, #1
 800e262:	e107      	b.n	800e474 <HAL_SPI_Receive+0x3dc>
    while (hspi->RxXferCount > 0UL)
 800e264:	68fb      	ldr	r3, [r7, #12]
 800e266:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800e26a:	b29b      	uxth	r3, r3
 800e26c:	2b00      	cmp	r3, #0
 800e26e:	d1b8      	bne.n	800e1e2 <HAL_SPI_Receive+0x14a>
 800e270:	e0ed      	b.n	800e44e <HAL_SPI_Receive+0x3b6>
        }
      }
    }
  }
  /* Receive data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800e272:	68fb      	ldr	r3, [r7, #12]
 800e274:	68db      	ldr	r3, [r3, #12]
 800e276:	2b07      	cmp	r3, #7
 800e278:	f240 80e2 	bls.w	800e440 <HAL_SPI_Receive+0x3a8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
 800e27c:	e05b      	b.n	800e336 <HAL_SPI_Receive+0x29e>
    {
      /* Check the RXWNE/FRLVL flag */
      if ((hspi->Instance->SR & (SPI_FLAG_RXWNE | SPI_FLAG_FRLVL)) != 0UL)
 800e27e:	68fb      	ldr	r3, [r7, #12]
 800e280:	681b      	ldr	r3, [r3, #0]
 800e282:	695b      	ldr	r3, [r3, #20]
 800e284:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 800e288:	2b00      	cmp	r3, #0
 800e28a:	d030      	beq.n	800e2ee <HAL_SPI_Receive+0x256>
      {
        if ((hspi->Instance->SR & SPI_FLAG_RXWNE) != 0UL)
 800e28c:	68fb      	ldr	r3, [r7, #12]
 800e28e:	681b      	ldr	r3, [r3, #0]
 800e290:	695b      	ldr	r3, [r3, #20]
 800e292:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800e296:	2b00      	cmp	r3, #0
 800e298:	d014      	beq.n	800e2c4 <HAL_SPI_Receive+0x22c>
        {
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 800e29a:	68fb      	ldr	r3, [r7, #12]
 800e29c:	681a      	ldr	r2, [r3, #0]
 800e29e:	68fb      	ldr	r3, [r7, #12]
 800e2a0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e2a2:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800e2a4:	601a      	str	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint32_t);
 800e2a6:	68fb      	ldr	r3, [r7, #12]
 800e2a8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e2aa:	1d1a      	adds	r2, r3, #4
 800e2ac:	68fb      	ldr	r3, [r7, #12]
 800e2ae:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount -= (uint16_t)2UL;
 800e2b0:	68fb      	ldr	r3, [r7, #12]
 800e2b2:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800e2b6:	b29b      	uxth	r3, r3
 800e2b8:	3b02      	subs	r3, #2
 800e2ba:	b29a      	uxth	r2, r3
 800e2bc:	68fb      	ldr	r3, [r7, #12]
 800e2be:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800e2c2:	e038      	b.n	800e336 <HAL_SPI_Receive+0x29e>
        }
        else
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800e2c4:	68fb      	ldr	r3, [r7, #12]
 800e2c6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e2c8:	69ba      	ldr	r2, [r7, #24]
 800e2ca:	8812      	ldrh	r2, [r2, #0]
 800e2cc:	b292      	uxth	r2, r2
 800e2ce:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 800e2d0:	68fb      	ldr	r3, [r7, #12]
 800e2d2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e2d4:	1c9a      	adds	r2, r3, #2
 800e2d6:	68fb      	ldr	r3, [r7, #12]
 800e2d8:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount--;
 800e2da:	68fb      	ldr	r3, [r7, #12]
 800e2dc:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800e2e0:	b29b      	uxth	r3, r3
 800e2e2:	3b01      	subs	r3, #1
 800e2e4:	b29a      	uxth	r2, r3
 800e2e6:	68fb      	ldr	r3, [r7, #12]
 800e2e8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800e2ec:	e023      	b.n	800e336 <HAL_SPI_Receive+0x29e>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800e2ee:	f7f5 fa03 	bl	80036f8 <HAL_GetTick>
 800e2f2:	4602      	mov	r2, r0
 800e2f4:	697b      	ldr	r3, [r7, #20]
 800e2f6:	1ad3      	subs	r3, r2, r3
 800e2f8:	683a      	ldr	r2, [r7, #0]
 800e2fa:	429a      	cmp	r2, r3
 800e2fc:	d803      	bhi.n	800e306 <HAL_SPI_Receive+0x26e>
 800e2fe:	683b      	ldr	r3, [r7, #0]
 800e300:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e304:	d102      	bne.n	800e30c <HAL_SPI_Receive+0x274>
 800e306:	683b      	ldr	r3, [r7, #0]
 800e308:	2b00      	cmp	r3, #0
 800e30a:	d114      	bne.n	800e336 <HAL_SPI_Receive+0x29e>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800e30c:	68f8      	ldr	r0, [r7, #12]
 800e30e:	f000 fba1 	bl	800ea54 <SPI_CloseTransfer>

          /* Process Unlocked */
          __HAL_UNLOCK(hspi);
 800e312:	68fb      	ldr	r3, [r7, #12]
 800e314:	2200      	movs	r2, #0
 800e316:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800e31a:	68fb      	ldr	r3, [r7, #12]
 800e31c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800e320:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800e324:	68fb      	ldr	r3, [r7, #12]
 800e326:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800e32a:	68fb      	ldr	r3, [r7, #12]
 800e32c:	2201      	movs	r2, #1
 800e32e:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_ERROR;
 800e332:	2301      	movs	r3, #1
 800e334:	e09e      	b.n	800e474 <HAL_SPI_Receive+0x3dc>
    while (hspi->RxXferCount > 0UL)
 800e336:	68fb      	ldr	r3, [r7, #12]
 800e338:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800e33c:	b29b      	uxth	r3, r3
 800e33e:	2b00      	cmp	r3, #0
 800e340:	d19d      	bne.n	800e27e <HAL_SPI_Receive+0x1e6>
 800e342:	e084      	b.n	800e44e <HAL_SPI_Receive+0x3b6>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
    {
      /* Check the RXWNE/FRLVL flag */
      if ((hspi->Instance->SR & (SPI_FLAG_RXWNE | SPI_FLAG_FRLVL)) != 0UL)
 800e344:	68fb      	ldr	r3, [r7, #12]
 800e346:	681b      	ldr	r3, [r3, #0]
 800e348:	695b      	ldr	r3, [r3, #20]
 800e34a:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 800e34e:	2b00      	cmp	r3, #0
 800e350:	d052      	beq.n	800e3f8 <HAL_SPI_Receive+0x360>
      {
        if ((hspi->Instance->SR & SPI_FLAG_RXWNE) != 0UL)
 800e352:	68fb      	ldr	r3, [r7, #12]
 800e354:	681b      	ldr	r3, [r3, #0]
 800e356:	695b      	ldr	r3, [r3, #20]
 800e358:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800e35c:	2b00      	cmp	r3, #0
 800e35e:	d014      	beq.n	800e38a <HAL_SPI_Receive+0x2f2>
        {
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 800e360:	68fb      	ldr	r3, [r7, #12]
 800e362:	681a      	ldr	r2, [r3, #0]
 800e364:	68fb      	ldr	r3, [r7, #12]
 800e366:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e368:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800e36a:	601a      	str	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint32_t);
 800e36c:	68fb      	ldr	r3, [r7, #12]
 800e36e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e370:	1d1a      	adds	r2, r3, #4
 800e372:	68fb      	ldr	r3, [r7, #12]
 800e374:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount -= (uint16_t)4UL;
 800e376:	68fb      	ldr	r3, [r7, #12]
 800e378:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800e37c:	b29b      	uxth	r3, r3
 800e37e:	3b04      	subs	r3, #4
 800e380:	b29a      	uxth	r2, r3
 800e382:	68fb      	ldr	r3, [r7, #12]
 800e384:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800e388:	e05a      	b.n	800e440 <HAL_SPI_Receive+0x3a8>
        }
        else if ((hspi->Instance->SR & SPI_FLAG_FRLVL) > SPI_RX_FIFO_1PACKET)
 800e38a:	68fb      	ldr	r3, [r7, #12]
 800e38c:	681b      	ldr	r3, [r3, #0]
 800e38e:	695b      	ldr	r3, [r3, #20]
 800e390:	f403 43c0 	and.w	r3, r3, #24576	; 0x6000
 800e394:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800e398:	d914      	bls.n	800e3c4 <HAL_SPI_Receive+0x32c>
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800e39a:	68fb      	ldr	r3, [r7, #12]
 800e39c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e39e:	69ba      	ldr	r2, [r7, #24]
 800e3a0:	8812      	ldrh	r2, [r2, #0]
 800e3a2:	b292      	uxth	r2, r2
 800e3a4:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 800e3a6:	68fb      	ldr	r3, [r7, #12]
 800e3a8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e3aa:	1c9a      	adds	r2, r3, #2
 800e3ac:	68fb      	ldr	r3, [r7, #12]
 800e3ae:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount -= (uint16_t)2UL;
 800e3b0:	68fb      	ldr	r3, [r7, #12]
 800e3b2:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800e3b6:	b29b      	uxth	r3, r3
 800e3b8:	3b02      	subs	r3, #2
 800e3ba:	b29a      	uxth	r2, r3
 800e3bc:	68fb      	ldr	r3, [r7, #12]
 800e3be:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800e3c2:	e03d      	b.n	800e440 <HAL_SPI_Receive+0x3a8>
        }
        else
        {
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800e3c4:	68fb      	ldr	r3, [r7, #12]
 800e3c6:	681b      	ldr	r3, [r3, #0]
 800e3c8:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800e3cc:	68fb      	ldr	r3, [r7, #12]
 800e3ce:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e3d0:	7812      	ldrb	r2, [r2, #0]
 800e3d2:	b2d2      	uxtb	r2, r2
 800e3d4:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 800e3d6:	68fb      	ldr	r3, [r7, #12]
 800e3d8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e3da:	1c5a      	adds	r2, r3, #1
 800e3dc:	68fb      	ldr	r3, [r7, #12]
 800e3de:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount--;
 800e3e0:	68fb      	ldr	r3, [r7, #12]
 800e3e2:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800e3e6:	b29b      	uxth	r3, r3
 800e3e8:	3b01      	subs	r3, #1
 800e3ea:	b29a      	uxth	r2, r3
 800e3ec:	68fb      	ldr	r3, [r7, #12]
 800e3ee:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800e3f2:	e025      	b.n	800e440 <HAL_SPI_Receive+0x3a8>
 800e3f4:	ffff0000 	.word	0xffff0000
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800e3f8:	f7f5 f97e 	bl	80036f8 <HAL_GetTick>
 800e3fc:	4602      	mov	r2, r0
 800e3fe:	697b      	ldr	r3, [r7, #20]
 800e400:	1ad3      	subs	r3, r2, r3
 800e402:	683a      	ldr	r2, [r7, #0]
 800e404:	429a      	cmp	r2, r3
 800e406:	d803      	bhi.n	800e410 <HAL_SPI_Receive+0x378>
 800e408:	683b      	ldr	r3, [r7, #0]
 800e40a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e40e:	d102      	bne.n	800e416 <HAL_SPI_Receive+0x37e>
 800e410:	683b      	ldr	r3, [r7, #0]
 800e412:	2b00      	cmp	r3, #0
 800e414:	d114      	bne.n	800e440 <HAL_SPI_Receive+0x3a8>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800e416:	68f8      	ldr	r0, [r7, #12]
 800e418:	f000 fb1c 	bl	800ea54 <SPI_CloseTransfer>

          /* Process Unlocked */
          __HAL_UNLOCK(hspi);
 800e41c:	68fb      	ldr	r3, [r7, #12]
 800e41e:	2200      	movs	r2, #0
 800e420:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800e424:	68fb      	ldr	r3, [r7, #12]
 800e426:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800e42a:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800e42e:	68fb      	ldr	r3, [r7, #12]
 800e430:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800e434:	68fb      	ldr	r3, [r7, #12]
 800e436:	2201      	movs	r2, #1
 800e438:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_ERROR;
 800e43c:	2301      	movs	r3, #1
 800e43e:	e019      	b.n	800e474 <HAL_SPI_Receive+0x3dc>
    while (hspi->RxXferCount > 0UL)
 800e440:	68fb      	ldr	r3, [r7, #12]
 800e442:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800e446:	b29b      	uxth	r3, r3
 800e448:	2b00      	cmp	r3, #0
 800e44a:	f47f af7b 	bne.w	800e344 <HAL_SPI_Receive+0x2ac>
    }
  }
#endif /* USE_SPI_CRC */

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 800e44e:	68f8      	ldr	r0, [r7, #12]
 800e450:	f000 fb00 	bl	800ea54 <SPI_CloseTransfer>

  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800e454:	68fb      	ldr	r3, [r7, #12]
 800e456:	2200      	movs	r2, #0
 800e458:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  hspi->State = HAL_SPI_STATE_READY;
 800e45c:	68fb      	ldr	r3, [r7, #12]
 800e45e:	2201      	movs	r2, #1
 800e460:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800e464:	68fb      	ldr	r3, [r7, #12]
 800e466:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800e46a:	2b00      	cmp	r3, #0
 800e46c:	d001      	beq.n	800e472 <HAL_SPI_Receive+0x3da>
  {
    return HAL_ERROR;
 800e46e:	2301      	movs	r3, #1
 800e470:	e000      	b.n	800e474 <HAL_SPI_Receive+0x3dc>
  }
  return errorcode;
 800e472:	7ffb      	ldrb	r3, [r7, #31]
}
 800e474:	4618      	mov	r0, r3
 800e476:	3720      	adds	r7, #32
 800e478:	46bd      	mov	sp, r7
 800e47a:	bd80      	pop	{r7, pc}

0800e47c <HAL_SPI_TransmitReceive>:
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800e47c:	b580      	push	{r7, lr}
 800e47e:	b08e      	sub	sp, #56	; 0x38
 800e480:	af02      	add	r7, sp, #8
 800e482:	60f8      	str	r0, [r7, #12]
 800e484:	60b9      	str	r1, [r7, #8]
 800e486:	607a      	str	r2, [r7, #4]
 800e488:	807b      	strh	r3, [r7, #2]
  HAL_SPI_StateTypeDef tmp_state;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800e48a:	2300      	movs	r3, #0
 800e48c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 800e490:	68fb      	ldr	r3, [r7, #12]
 800e492:	681b      	ldr	r3, [r3, #0]
 800e494:	3320      	adds	r3, #32
 800e496:	627b      	str	r3, [r7, #36]	; 0x24
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 800e498:	68fb      	ldr	r3, [r7, #12]
 800e49a:	681b      	ldr	r3, [r3, #0]
 800e49c:	3330      	adds	r3, #48	; 0x30
 800e49e:	623b      	str	r3, [r7, #32]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800e4a0:	68fb      	ldr	r3, [r7, #12]
 800e4a2:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800e4a6:	2b01      	cmp	r3, #1
 800e4a8:	d101      	bne.n	800e4ae <HAL_SPI_TransmitReceive+0x32>
 800e4aa:	2302      	movs	r3, #2
 800e4ac:	e2ce      	b.n	800ea4c <HAL_SPI_TransmitReceive+0x5d0>
 800e4ae:	68fb      	ldr	r3, [r7, #12]
 800e4b0:	2201      	movs	r2, #1
 800e4b2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800e4b6:	f7f5 f91f 	bl	80036f8 <HAL_GetTick>
 800e4ba:	61f8      	str	r0, [r7, #28]

  initial_TxXferCount = Size;
 800e4bc:	887b      	ldrh	r3, [r7, #2]
 800e4be:	85fb      	strh	r3, [r7, #46]	; 0x2e
  initial_RxXferCount = Size;
 800e4c0:	887b      	ldrh	r3, [r7, #2]
 800e4c2:	85bb      	strh	r3, [r7, #44]	; 0x2c
  tmp_state           = hspi->State;
 800e4c4:	68fb      	ldr	r3, [r7, #12]
 800e4c6:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800e4ca:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 800e4cc:	68fb      	ldr	r3, [r7, #12]
 800e4ce:	685b      	ldr	r3, [r3, #4]
 800e4d0:	617b      	str	r3, [r7, #20]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800e4d2:	7efb      	ldrb	r3, [r7, #27]
 800e4d4:	2b01      	cmp	r3, #1
 800e4d6:	d014      	beq.n	800e502 <HAL_SPI_TransmitReceive+0x86>
 800e4d8:	697b      	ldr	r3, [r7, #20]
 800e4da:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800e4de:	d106      	bne.n	800e4ee <HAL_SPI_TransmitReceive+0x72>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800e4e0:	68fb      	ldr	r3, [r7, #12]
 800e4e2:	689b      	ldr	r3, [r3, #8]
 800e4e4:	2b00      	cmp	r3, #0
 800e4e6:	d102      	bne.n	800e4ee <HAL_SPI_TransmitReceive+0x72>
 800e4e8:	7efb      	ldrb	r3, [r7, #27]
 800e4ea:	2b04      	cmp	r3, #4
 800e4ec:	d009      	beq.n	800e502 <HAL_SPI_TransmitReceive+0x86>
  {
    errorcode = HAL_BUSY;
 800e4ee:	2302      	movs	r3, #2
 800e4f0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    __HAL_UNLOCK(hspi);
 800e4f4:	68fb      	ldr	r3, [r7, #12]
 800e4f6:	2200      	movs	r2, #0
 800e4f8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 800e4fc:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800e500:	e2a4      	b.n	800ea4c <HAL_SPI_TransmitReceive+0x5d0>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0UL))
 800e502:	68bb      	ldr	r3, [r7, #8]
 800e504:	2b00      	cmp	r3, #0
 800e506:	d005      	beq.n	800e514 <HAL_SPI_TransmitReceive+0x98>
 800e508:	687b      	ldr	r3, [r7, #4]
 800e50a:	2b00      	cmp	r3, #0
 800e50c:	d002      	beq.n	800e514 <HAL_SPI_TransmitReceive+0x98>
 800e50e:	887b      	ldrh	r3, [r7, #2]
 800e510:	2b00      	cmp	r3, #0
 800e512:	d109      	bne.n	800e528 <HAL_SPI_TransmitReceive+0xac>
  {
    errorcode = HAL_ERROR;
 800e514:	2301      	movs	r3, #1
 800e516:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    __HAL_UNLOCK(hspi);
 800e51a:	68fb      	ldr	r3, [r7, #12]
 800e51c:	2200      	movs	r2, #0
 800e51e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 800e522:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800e526:	e291      	b.n	800ea4c <HAL_SPI_TransmitReceive+0x5d0>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800e528:	68fb      	ldr	r3, [r7, #12]
 800e52a:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800e52e:	b2db      	uxtb	r3, r3
 800e530:	2b04      	cmp	r3, #4
 800e532:	d003      	beq.n	800e53c <HAL_SPI_TransmitReceive+0xc0>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800e534:	68fb      	ldr	r3, [r7, #12]
 800e536:	2205      	movs	r2, #5
 800e538:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800e53c:	68fb      	ldr	r3, [r7, #12]
 800e53e:	2200      	movs	r2, #0
 800e540:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800e544:	68fb      	ldr	r3, [r7, #12]
 800e546:	687a      	ldr	r2, [r7, #4]
 800e548:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->RxXferCount = Size;
 800e54a:	68fb      	ldr	r3, [r7, #12]
 800e54c:	887a      	ldrh	r2, [r7, #2]
 800e54e:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  hspi->RxXferSize  = Size;
 800e552:	68fb      	ldr	r3, [r7, #12]
 800e554:	887a      	ldrh	r2, [r7, #2]
 800e556:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800e55a:	68fb      	ldr	r3, [r7, #12]
 800e55c:	68ba      	ldr	r2, [r7, #8]
 800e55e:	65da      	str	r2, [r3, #92]	; 0x5c
  hspi->TxXferCount = Size;
 800e560:	68fb      	ldr	r3, [r7, #12]
 800e562:	887a      	ldrh	r2, [r7, #2]
 800e564:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->TxXferSize  = Size;
 800e568:	68fb      	ldr	r3, [r7, #12]
 800e56a:	887a      	ldrh	r2, [r7, #2]
 800e56c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800e570:	68fb      	ldr	r3, [r7, #12]
 800e572:	2200      	movs	r2, #0
 800e574:	671a      	str	r2, [r3, #112]	; 0x70
  hspi->TxISR       = NULL;
 800e576:	68fb      	ldr	r3, [r7, #12]
 800e578:	2200      	movs	r2, #0
 800e57a:	675a      	str	r2, [r3, #116]	; 0x74

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 800e57c:	68fb      	ldr	r3, [r7, #12]
 800e57e:	681b      	ldr	r3, [r3, #0]
 800e580:	685a      	ldr	r2, [r3, #4]
 800e582:	4b9f      	ldr	r3, [pc, #636]	; (800e800 <HAL_SPI_TransmitReceive+0x384>)
 800e584:	4013      	ands	r3, r2
 800e586:	8879      	ldrh	r1, [r7, #2]
 800e588:	68fa      	ldr	r2, [r7, #12]
 800e58a:	6812      	ldr	r2, [r2, #0]
 800e58c:	430b      	orrs	r3, r1
 800e58e:	6053      	str	r3, [r2, #4]

  __HAL_SPI_ENABLE(hspi);
 800e590:	68fb      	ldr	r3, [r7, #12]
 800e592:	681b      	ldr	r3, [r3, #0]
 800e594:	681a      	ldr	r2, [r3, #0]
 800e596:	68fb      	ldr	r3, [r7, #12]
 800e598:	681b      	ldr	r3, [r3, #0]
 800e59a:	f042 0201 	orr.w	r2, r2, #1
 800e59e:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800e5a0:	68fb      	ldr	r3, [r7, #12]
 800e5a2:	685b      	ldr	r3, [r3, #4]
 800e5a4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800e5a8:	d107      	bne.n	800e5ba <HAL_SPI_TransmitReceive+0x13e>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 800e5aa:	68fb      	ldr	r3, [r7, #12]
 800e5ac:	681b      	ldr	r3, [r3, #0]
 800e5ae:	681a      	ldr	r2, [r3, #0]
 800e5b0:	68fb      	ldr	r3, [r7, #12]
 800e5b2:	681b      	ldr	r3, [r3, #0]
 800e5b4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800e5b8:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 800e5ba:	68fb      	ldr	r3, [r7, #12]
 800e5bc:	68db      	ldr	r3, [r3, #12]
 800e5be:	2b0f      	cmp	r3, #15
 800e5c0:	d970      	bls.n	800e6a4 <HAL_SPI_TransmitReceive+0x228>
  {
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 800e5c2:	e068      	b.n	800e696 <HAL_SPI_TransmitReceive+0x21a>
    {
      /* Check TXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL))
 800e5c4:	68fb      	ldr	r3, [r7, #12]
 800e5c6:	681b      	ldr	r3, [r3, #0]
 800e5c8:	695b      	ldr	r3, [r3, #20]
 800e5ca:	f003 0302 	and.w	r3, r3, #2
 800e5ce:	2b02      	cmp	r3, #2
 800e5d0:	d11a      	bne.n	800e608 <HAL_SPI_TransmitReceive+0x18c>
 800e5d2:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800e5d4:	2b00      	cmp	r3, #0
 800e5d6:	d017      	beq.n	800e608 <HAL_SPI_TransmitReceive+0x18c>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 800e5d8:	68fb      	ldr	r3, [r7, #12]
 800e5da:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800e5dc:	68fb      	ldr	r3, [r7, #12]
 800e5de:	681b      	ldr	r3, [r3, #0]
 800e5e0:	6812      	ldr	r2, [r2, #0]
 800e5e2:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 800e5e4:	68fb      	ldr	r3, [r7, #12]
 800e5e6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800e5e8:	1d1a      	adds	r2, r3, #4
 800e5ea:	68fb      	ldr	r3, [r7, #12]
 800e5ec:	65da      	str	r2, [r3, #92]	; 0x5c
        hspi->TxXferCount --;
 800e5ee:	68fb      	ldr	r3, [r7, #12]
 800e5f0:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800e5f4:	b29b      	uxth	r3, r3
 800e5f6:	3b01      	subs	r3, #1
 800e5f8:	b29a      	uxth	r2, r3
 800e5fa:	68fb      	ldr	r3, [r7, #12]
 800e5fc:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        initial_TxXferCount = hspi->TxXferCount;
 800e600:	68fb      	ldr	r3, [r7, #12]
 800e602:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800e606:	85fb      	strh	r3, [r7, #46]	; 0x2e
      }

      /* Check RXWNE/EOT flag */
      if (((hspi->Instance->SR & (SPI_FLAG_RXWNE | SPI_FLAG_EOT)) != 0UL) && (initial_RxXferCount > 0UL))
 800e608:	68fb      	ldr	r3, [r7, #12]
 800e60a:	681b      	ldr	r3, [r3, #0]
 800e60c:	695a      	ldr	r2, [r3, #20]
 800e60e:	f248 0308 	movw	r3, #32776	; 0x8008
 800e612:	4013      	ands	r3, r2
 800e614:	2b00      	cmp	r3, #0
 800e616:	d01a      	beq.n	800e64e <HAL_SPI_TransmitReceive+0x1d2>
 800e618:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800e61a:	2b00      	cmp	r3, #0
 800e61c:	d017      	beq.n	800e64e <HAL_SPI_TransmitReceive+0x1d2>
      {
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 800e61e:	68fb      	ldr	r3, [r7, #12]
 800e620:	681a      	ldr	r2, [r3, #0]
 800e622:	68fb      	ldr	r3, [r7, #12]
 800e624:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e626:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800e628:	601a      	str	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint32_t);
 800e62a:	68fb      	ldr	r3, [r7, #12]
 800e62c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e62e:	1d1a      	adds	r2, r3, #4
 800e630:	68fb      	ldr	r3, [r7, #12]
 800e632:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount --;
 800e634:	68fb      	ldr	r3, [r7, #12]
 800e636:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800e63a:	b29b      	uxth	r3, r3
 800e63c:	3b01      	subs	r3, #1
 800e63e:	b29a      	uxth	r2, r3
 800e640:	68fb      	ldr	r3, [r7, #12]
 800e642:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
        initial_RxXferCount = hspi->RxXferCount;
 800e646:	68fb      	ldr	r3, [r7, #12]
 800e648:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800e64c:	85bb      	strh	r3, [r7, #44]	; 0x2c
      }

      /* Timeout management */
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800e64e:	f7f5 f853 	bl	80036f8 <HAL_GetTick>
 800e652:	4602      	mov	r2, r0
 800e654:	69fb      	ldr	r3, [r7, #28]
 800e656:	1ad3      	subs	r3, r2, r3
 800e658:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800e65a:	429a      	cmp	r2, r3
 800e65c:	d803      	bhi.n	800e666 <HAL_SPI_TransmitReceive+0x1ea>
 800e65e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e660:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e664:	d102      	bne.n	800e66c <HAL_SPI_TransmitReceive+0x1f0>
 800e666:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e668:	2b00      	cmp	r3, #0
 800e66a:	d114      	bne.n	800e696 <HAL_SPI_TransmitReceive+0x21a>
      {
        /* Call standard close procedure with error check */
        SPI_CloseTransfer(hspi);
 800e66c:	68f8      	ldr	r0, [r7, #12]
 800e66e:	f000 f9f1 	bl	800ea54 <SPI_CloseTransfer>
      
        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800e672:	68fb      	ldr	r3, [r7, #12]
 800e674:	2200      	movs	r2, #0
 800e676:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
      
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800e67a:	68fb      	ldr	r3, [r7, #12]
 800e67c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800e680:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800e684:	68fb      	ldr	r3, [r7, #12]
 800e686:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        hspi->State = HAL_SPI_STATE_READY;
 800e68a:	68fb      	ldr	r3, [r7, #12]
 800e68c:	2201      	movs	r2, #1
 800e68e:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
        return HAL_ERROR;
 800e692:	2301      	movs	r3, #1
 800e694:	e1da      	b.n	800ea4c <HAL_SPI_TransmitReceive+0x5d0>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 800e696:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800e698:	2b00      	cmp	r3, #0
 800e69a:	d193      	bne.n	800e5c4 <HAL_SPI_TransmitReceive+0x148>
 800e69c:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800e69e:	2b00      	cmp	r3, #0
 800e6a0:	d190      	bne.n	800e5c4 <HAL_SPI_TransmitReceive+0x148>
 800e6a2:	e1ac      	b.n	800e9fe <HAL_SPI_TransmitReceive+0x582>
      }
    }
  }
  /* Transmit and Receive data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800e6a4:	68fb      	ldr	r3, [r7, #12]
 800e6a6:	68db      	ldr	r3, [r3, #12]
 800e6a8:	2b07      	cmp	r3, #7
 800e6aa:	f240 81a0 	bls.w	800e9ee <HAL_SPI_TransmitReceive+0x572>
  {
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 800e6ae:	e0a9      	b.n	800e804 <HAL_SPI_TransmitReceive+0x388>
    {
      /* Check TXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP) && (initial_TxXferCount > 0UL))
 800e6b0:	68fb      	ldr	r3, [r7, #12]
 800e6b2:	681b      	ldr	r3, [r3, #0]
 800e6b4:	695b      	ldr	r3, [r3, #20]
 800e6b6:	f003 0302 	and.w	r3, r3, #2
 800e6ba:	2b02      	cmp	r3, #2
 800e6bc:	d139      	bne.n	800e732 <HAL_SPI_TransmitReceive+0x2b6>
 800e6be:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800e6c0:	2b00      	cmp	r3, #0
 800e6c2:	d036      	beq.n	800e732 <HAL_SPI_TransmitReceive+0x2b6>
      {
        if ((initial_TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 800e6c4:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800e6c6:	2b01      	cmp	r3, #1
 800e6c8:	d91c      	bls.n	800e704 <HAL_SPI_TransmitReceive+0x288>
 800e6ca:	68fb      	ldr	r3, [r7, #12]
 800e6cc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e6ce:	2b00      	cmp	r3, #0
 800e6d0:	d018      	beq.n	800e704 <HAL_SPI_TransmitReceive+0x288>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 800e6d2:	68fb      	ldr	r3, [r7, #12]
 800e6d4:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800e6d6:	68fb      	ldr	r3, [r7, #12]
 800e6d8:	681b      	ldr	r3, [r3, #0]
 800e6da:	6812      	ldr	r2, [r2, #0]
 800e6dc:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 800e6de:	68fb      	ldr	r3, [r7, #12]
 800e6e0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800e6e2:	1d1a      	adds	r2, r3, #4
 800e6e4:	68fb      	ldr	r3, [r7, #12]
 800e6e6:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 800e6e8:	68fb      	ldr	r3, [r7, #12]
 800e6ea:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800e6ee:	b29b      	uxth	r3, r3
 800e6f0:	3b02      	subs	r3, #2
 800e6f2:	b29a      	uxth	r2, r3
 800e6f4:	68fb      	ldr	r3, [r7, #12]
 800e6f6:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
          initial_TxXferCount = hspi->TxXferCount;
 800e6fa:	68fb      	ldr	r3, [r7, #12]
 800e6fc:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800e700:	85fb      	strh	r3, [r7, #46]	; 0x2e
 800e702:	e016      	b.n	800e732 <HAL_SPI_TransmitReceive+0x2b6>
        }
        else
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((uint16_t *)hspi->pTxBuffPtr);
 800e704:	68fb      	ldr	r3, [r7, #12]
 800e706:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800e708:	881a      	ldrh	r2, [r3, #0]
 800e70a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e70c:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800e70e:	68fb      	ldr	r3, [r7, #12]
 800e710:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800e712:	1c9a      	adds	r2, r3, #2
 800e714:	68fb      	ldr	r3, [r7, #12]
 800e716:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount--;
 800e718:	68fb      	ldr	r3, [r7, #12]
 800e71a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800e71e:	b29b      	uxth	r3, r3
 800e720:	3b01      	subs	r3, #1
 800e722:	b29a      	uxth	r2, r3
 800e724:	68fb      	ldr	r3, [r7, #12]
 800e726:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
          initial_TxXferCount = hspi->TxXferCount;
 800e72a:	68fb      	ldr	r3, [r7, #12]
 800e72c:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800e730:	85fb      	strh	r3, [r7, #46]	; 0x2e
        }
      }

      /* Check RXWNE/FRLVL flag */
      if (((hspi->Instance->SR & (SPI_FLAG_RXWNE | SPI_FLAG_FRLVL)) != 0UL) && (initial_RxXferCount > 0UL))
 800e732:	68fb      	ldr	r3, [r7, #12]
 800e734:	681b      	ldr	r3, [r3, #0]
 800e736:	695b      	ldr	r3, [r3, #20]
 800e738:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 800e73c:	2b00      	cmp	r3, #0
 800e73e:	d03a      	beq.n	800e7b6 <HAL_SPI_TransmitReceive+0x33a>
 800e740:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800e742:	2b00      	cmp	r3, #0
 800e744:	d037      	beq.n	800e7b6 <HAL_SPI_TransmitReceive+0x33a>
      {
        if ((hspi->Instance->SR & SPI_FLAG_RXWNE) != 0UL)
 800e746:	68fb      	ldr	r3, [r7, #12]
 800e748:	681b      	ldr	r3, [r3, #0]
 800e74a:	695b      	ldr	r3, [r3, #20]
 800e74c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800e750:	2b00      	cmp	r3, #0
 800e752:	d018      	beq.n	800e786 <HAL_SPI_TransmitReceive+0x30a>
        {
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 800e754:	68fb      	ldr	r3, [r7, #12]
 800e756:	681a      	ldr	r2, [r3, #0]
 800e758:	68fb      	ldr	r3, [r7, #12]
 800e75a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e75c:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800e75e:	601a      	str	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint32_t);
 800e760:	68fb      	ldr	r3, [r7, #12]
 800e762:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e764:	1d1a      	adds	r2, r3, #4
 800e766:	68fb      	ldr	r3, [r7, #12]
 800e768:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount -= (uint16_t)2UL;
 800e76a:	68fb      	ldr	r3, [r7, #12]
 800e76c:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800e770:	b29b      	uxth	r3, r3
 800e772:	3b02      	subs	r3, #2
 800e774:	b29a      	uxth	r2, r3
 800e776:	68fb      	ldr	r3, [r7, #12]
 800e778:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 800e77c:	68fb      	ldr	r3, [r7, #12]
 800e77e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800e782:	85bb      	strh	r3, [r7, #44]	; 0x2c
 800e784:	e017      	b.n	800e7b6 <HAL_SPI_TransmitReceive+0x33a>
        }
        else
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800e786:	68fb      	ldr	r3, [r7, #12]
 800e788:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e78a:	6a3a      	ldr	r2, [r7, #32]
 800e78c:	8812      	ldrh	r2, [r2, #0]
 800e78e:	b292      	uxth	r2, r2
 800e790:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 800e792:	68fb      	ldr	r3, [r7, #12]
 800e794:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e796:	1c9a      	adds	r2, r3, #2
 800e798:	68fb      	ldr	r3, [r7, #12]
 800e79a:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount--;
 800e79c:	68fb      	ldr	r3, [r7, #12]
 800e79e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800e7a2:	b29b      	uxth	r3, r3
 800e7a4:	3b01      	subs	r3, #1
 800e7a6:	b29a      	uxth	r2, r3
 800e7a8:	68fb      	ldr	r3, [r7, #12]
 800e7aa:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 800e7ae:	68fb      	ldr	r3, [r7, #12]
 800e7b0:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800e7b4:	85bb      	strh	r3, [r7, #44]	; 0x2c
        }
      }

      /* Timeout management */
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800e7b6:	f7f4 ff9f 	bl	80036f8 <HAL_GetTick>
 800e7ba:	4602      	mov	r2, r0
 800e7bc:	69fb      	ldr	r3, [r7, #28]
 800e7be:	1ad3      	subs	r3, r2, r3
 800e7c0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800e7c2:	429a      	cmp	r2, r3
 800e7c4:	d803      	bhi.n	800e7ce <HAL_SPI_TransmitReceive+0x352>
 800e7c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e7c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e7cc:	d102      	bne.n	800e7d4 <HAL_SPI_TransmitReceive+0x358>
 800e7ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e7d0:	2b00      	cmp	r3, #0
 800e7d2:	d117      	bne.n	800e804 <HAL_SPI_TransmitReceive+0x388>
      {
        /* Call standard close procedure with error check */
        SPI_CloseTransfer(hspi);
 800e7d4:	68f8      	ldr	r0, [r7, #12]
 800e7d6:	f000 f93d 	bl	800ea54 <SPI_CloseTransfer>

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800e7da:	68fb      	ldr	r3, [r7, #12]
 800e7dc:	2200      	movs	r2, #0
 800e7de:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800e7e2:	68fb      	ldr	r3, [r7, #12]
 800e7e4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800e7e8:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800e7ec:	68fb      	ldr	r3, [r7, #12]
 800e7ee:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        hspi->State = HAL_SPI_STATE_READY;
 800e7f2:	68fb      	ldr	r3, [r7, #12]
 800e7f4:	2201      	movs	r2, #1
 800e7f6:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
        return HAL_ERROR;
 800e7fa:	2301      	movs	r3, #1
 800e7fc:	e126      	b.n	800ea4c <HAL_SPI_TransmitReceive+0x5d0>
 800e7fe:	bf00      	nop
 800e800:	ffff0000 	.word	0xffff0000
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 800e804:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800e806:	2b00      	cmp	r3, #0
 800e808:	f47f af52 	bne.w	800e6b0 <HAL_SPI_TransmitReceive+0x234>
 800e80c:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800e80e:	2b00      	cmp	r3, #0
 800e810:	f47f af4e 	bne.w	800e6b0 <HAL_SPI_TransmitReceive+0x234>
 800e814:	e0f3      	b.n	800e9fe <HAL_SPI_TransmitReceive+0x582>
  else
  {
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
    {
      /* check TXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL))
 800e816:	68fb      	ldr	r3, [r7, #12]
 800e818:	681b      	ldr	r3, [r3, #0]
 800e81a:	695b      	ldr	r3, [r3, #20]
 800e81c:	f003 0302 	and.w	r3, r3, #2
 800e820:	2b02      	cmp	r3, #2
 800e822:	d15a      	bne.n	800e8da <HAL_SPI_TransmitReceive+0x45e>
 800e824:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800e826:	2b00      	cmp	r3, #0
 800e828:	d057      	beq.n	800e8da <HAL_SPI_TransmitReceive+0x45e>
      {
        if ((initial_TxXferCount > 3UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_03DATA))
 800e82a:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800e82c:	2b03      	cmp	r3, #3
 800e82e:	d91c      	bls.n	800e86a <HAL_SPI_TransmitReceive+0x3ee>
 800e830:	68fb      	ldr	r3, [r7, #12]
 800e832:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e834:	2b40      	cmp	r3, #64	; 0x40
 800e836:	d918      	bls.n	800e86a <HAL_SPI_TransmitReceive+0x3ee>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 800e838:	68fb      	ldr	r3, [r7, #12]
 800e83a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800e83c:	68fb      	ldr	r3, [r7, #12]
 800e83e:	681b      	ldr	r3, [r3, #0]
 800e840:	6812      	ldr	r2, [r2, #0]
 800e842:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 800e844:	68fb      	ldr	r3, [r7, #12]
 800e846:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800e848:	1d1a      	adds	r2, r3, #4
 800e84a:	68fb      	ldr	r3, [r7, #12]
 800e84c:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)4UL;
 800e84e:	68fb      	ldr	r3, [r7, #12]
 800e850:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800e854:	b29b      	uxth	r3, r3
 800e856:	3b04      	subs	r3, #4
 800e858:	b29a      	uxth	r2, r3
 800e85a:	68fb      	ldr	r3, [r7, #12]
 800e85c:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
          initial_TxXferCount = hspi->TxXferCount;
 800e860:	68fb      	ldr	r3, [r7, #12]
 800e862:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800e866:	85fb      	strh	r3, [r7, #46]	; 0x2e
 800e868:	e037      	b.n	800e8da <HAL_SPI_TransmitReceive+0x45e>
        }
        else if ((initial_TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 800e86a:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800e86c:	2b01      	cmp	r3, #1
 800e86e:	d91b      	bls.n	800e8a8 <HAL_SPI_TransmitReceive+0x42c>
 800e870:	68fb      	ldr	r3, [r7, #12]
 800e872:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e874:	2b00      	cmp	r3, #0
 800e876:	d017      	beq.n	800e8a8 <HAL_SPI_TransmitReceive+0x42c>
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((uint16_t *)hspi->pTxBuffPtr);
 800e878:	68fb      	ldr	r3, [r7, #12]
 800e87a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800e87c:	881a      	ldrh	r2, [r3, #0]
 800e87e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e880:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800e882:	68fb      	ldr	r3, [r7, #12]
 800e884:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800e886:	1c9a      	adds	r2, r3, #2
 800e888:	68fb      	ldr	r3, [r7, #12]
 800e88a:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 800e88c:	68fb      	ldr	r3, [r7, #12]
 800e88e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800e892:	b29b      	uxth	r3, r3
 800e894:	3b02      	subs	r3, #2
 800e896:	b29a      	uxth	r2, r3
 800e898:	68fb      	ldr	r3, [r7, #12]
 800e89a:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
          initial_TxXferCount = hspi->TxXferCount;
 800e89e:	68fb      	ldr	r3, [r7, #12]
 800e8a0:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800e8a4:	85fb      	strh	r3, [r7, #46]	; 0x2e
 800e8a6:	e018      	b.n	800e8da <HAL_SPI_TransmitReceive+0x45e>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->TXDR) = *((uint8_t *)hspi->pTxBuffPtr);
 800e8a8:	68fb      	ldr	r3, [r7, #12]
 800e8aa:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800e8ac:	68fb      	ldr	r3, [r7, #12]
 800e8ae:	681b      	ldr	r3, [r3, #0]
 800e8b0:	3320      	adds	r3, #32
 800e8b2:	7812      	ldrb	r2, [r2, #0]
 800e8b4:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr += sizeof(uint8_t);
 800e8b6:	68fb      	ldr	r3, [r7, #12]
 800e8b8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800e8ba:	1c5a      	adds	r2, r3, #1
 800e8bc:	68fb      	ldr	r3, [r7, #12]
 800e8be:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount--;
 800e8c0:	68fb      	ldr	r3, [r7, #12]
 800e8c2:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800e8c6:	b29b      	uxth	r3, r3
 800e8c8:	3b01      	subs	r3, #1
 800e8ca:	b29a      	uxth	r2, r3
 800e8cc:	68fb      	ldr	r3, [r7, #12]
 800e8ce:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
          initial_TxXferCount = hspi->TxXferCount;
 800e8d2:	68fb      	ldr	r3, [r7, #12]
 800e8d4:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800e8d8:	85fb      	strh	r3, [r7, #46]	; 0x2e
        }
      }

      /* Wait until RXWNE/FRLVL flag is reset */
      if (((hspi->Instance->SR & (SPI_FLAG_RXWNE | SPI_FLAG_FRLVL)) != 0UL) && (initial_RxXferCount > 0UL))
 800e8da:	68fb      	ldr	r3, [r7, #12]
 800e8dc:	681b      	ldr	r3, [r3, #0]
 800e8de:	695b      	ldr	r3, [r3, #20]
 800e8e0:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 800e8e4:	2b00      	cmp	r3, #0
 800e8e6:	d05e      	beq.n	800e9a6 <HAL_SPI_TransmitReceive+0x52a>
 800e8e8:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800e8ea:	2b00      	cmp	r3, #0
 800e8ec:	d05b      	beq.n	800e9a6 <HAL_SPI_TransmitReceive+0x52a>
      {
        if ((hspi->Instance->SR & SPI_FLAG_RXWNE) != 0UL)
 800e8ee:	68fb      	ldr	r3, [r7, #12]
 800e8f0:	681b      	ldr	r3, [r3, #0]
 800e8f2:	695b      	ldr	r3, [r3, #20]
 800e8f4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800e8f8:	2b00      	cmp	r3, #0
 800e8fa:	d018      	beq.n	800e92e <HAL_SPI_TransmitReceive+0x4b2>
        {
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 800e8fc:	68fb      	ldr	r3, [r7, #12]
 800e8fe:	681a      	ldr	r2, [r3, #0]
 800e900:	68fb      	ldr	r3, [r7, #12]
 800e902:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e904:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800e906:	601a      	str	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint32_t);
 800e908:	68fb      	ldr	r3, [r7, #12]
 800e90a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e90c:	1d1a      	adds	r2, r3, #4
 800e90e:	68fb      	ldr	r3, [r7, #12]
 800e910:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount -= (uint16_t)4UL;
 800e912:	68fb      	ldr	r3, [r7, #12]
 800e914:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800e918:	b29b      	uxth	r3, r3
 800e91a:	3b04      	subs	r3, #4
 800e91c:	b29a      	uxth	r2, r3
 800e91e:	68fb      	ldr	r3, [r7, #12]
 800e920:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 800e924:	68fb      	ldr	r3, [r7, #12]
 800e926:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800e92a:	85bb      	strh	r3, [r7, #44]	; 0x2c
 800e92c:	e03b      	b.n	800e9a6 <HAL_SPI_TransmitReceive+0x52a>
        }
        else if ((hspi->Instance->SR & SPI_FLAG_FRLVL) > SPI_RX_FIFO_1PACKET)
 800e92e:	68fb      	ldr	r3, [r7, #12]
 800e930:	681b      	ldr	r3, [r3, #0]
 800e932:	695b      	ldr	r3, [r3, #20]
 800e934:	f403 43c0 	and.w	r3, r3, #24576	; 0x6000
 800e938:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800e93c:	d918      	bls.n	800e970 <HAL_SPI_TransmitReceive+0x4f4>
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800e93e:	68fb      	ldr	r3, [r7, #12]
 800e940:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e942:	6a3a      	ldr	r2, [r7, #32]
 800e944:	8812      	ldrh	r2, [r2, #0]
 800e946:	b292      	uxth	r2, r2
 800e948:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 800e94a:	68fb      	ldr	r3, [r7, #12]
 800e94c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e94e:	1c9a      	adds	r2, r3, #2
 800e950:	68fb      	ldr	r3, [r7, #12]
 800e952:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount -= (uint16_t)2UL;
 800e954:	68fb      	ldr	r3, [r7, #12]
 800e956:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800e95a:	b29b      	uxth	r3, r3
 800e95c:	3b02      	subs	r3, #2
 800e95e:	b29a      	uxth	r2, r3
 800e960:	68fb      	ldr	r3, [r7, #12]
 800e962:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 800e966:	68fb      	ldr	r3, [r7, #12]
 800e968:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800e96c:	85bb      	strh	r3, [r7, #44]	; 0x2c
 800e96e:	e01a      	b.n	800e9a6 <HAL_SPI_TransmitReceive+0x52a>
        }
        else
        {
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800e970:	68fb      	ldr	r3, [r7, #12]
 800e972:	681b      	ldr	r3, [r3, #0]
 800e974:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800e978:	68fb      	ldr	r3, [r7, #12]
 800e97a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e97c:	7812      	ldrb	r2, [r2, #0]
 800e97e:	b2d2      	uxtb	r2, r2
 800e980:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 800e982:	68fb      	ldr	r3, [r7, #12]
 800e984:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e986:	1c5a      	adds	r2, r3, #1
 800e988:	68fb      	ldr	r3, [r7, #12]
 800e98a:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount--;
 800e98c:	68fb      	ldr	r3, [r7, #12]
 800e98e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800e992:	b29b      	uxth	r3, r3
 800e994:	3b01      	subs	r3, #1
 800e996:	b29a      	uxth	r2, r3
 800e998:	68fb      	ldr	r3, [r7, #12]
 800e99a:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 800e99e:	68fb      	ldr	r3, [r7, #12]
 800e9a0:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800e9a4:	85bb      	strh	r3, [r7, #44]	; 0x2c
        }
      }

      /* Timeout management */
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800e9a6:	f7f4 fea7 	bl	80036f8 <HAL_GetTick>
 800e9aa:	4602      	mov	r2, r0
 800e9ac:	69fb      	ldr	r3, [r7, #28]
 800e9ae:	1ad3      	subs	r3, r2, r3
 800e9b0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800e9b2:	429a      	cmp	r2, r3
 800e9b4:	d803      	bhi.n	800e9be <HAL_SPI_TransmitReceive+0x542>
 800e9b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e9b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e9bc:	d102      	bne.n	800e9c4 <HAL_SPI_TransmitReceive+0x548>
 800e9be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e9c0:	2b00      	cmp	r3, #0
 800e9c2:	d114      	bne.n	800e9ee <HAL_SPI_TransmitReceive+0x572>
      {
        /* Call standard close procedure with error check */
        SPI_CloseTransfer(hspi);
 800e9c4:	68f8      	ldr	r0, [r7, #12]
 800e9c6:	f000 f845 	bl	800ea54 <SPI_CloseTransfer>

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800e9ca:	68fb      	ldr	r3, [r7, #12]
 800e9cc:	2200      	movs	r2, #0
 800e9ce:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800e9d2:	68fb      	ldr	r3, [r7, #12]
 800e9d4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800e9d8:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800e9dc:	68fb      	ldr	r3, [r7, #12]
 800e9de:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        hspi->State = HAL_SPI_STATE_READY;
 800e9e2:	68fb      	ldr	r3, [r7, #12]
 800e9e4:	2201      	movs	r2, #1
 800e9e6:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
        return HAL_ERROR;
 800e9ea:	2301      	movs	r3, #1
 800e9ec:	e02e      	b.n	800ea4c <HAL_SPI_TransmitReceive+0x5d0>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 800e9ee:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800e9f0:	2b00      	cmp	r3, #0
 800e9f2:	f47f af10 	bne.w	800e816 <HAL_SPI_TransmitReceive+0x39a>
 800e9f6:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800e9f8:	2b00      	cmp	r3, #0
 800e9fa:	f47f af0c 	bne.w	800e816 <HAL_SPI_TransmitReceive+0x39a>
      }
    }
  }

  /* Wait for Tx/Rx (and CRC) data to be sent/received */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, tickstart, Timeout) != HAL_OK)
 800e9fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ea00:	9300      	str	r3, [sp, #0]
 800ea02:	69fb      	ldr	r3, [r7, #28]
 800ea04:	2200      	movs	r2, #0
 800ea06:	2108      	movs	r1, #8
 800ea08:	68f8      	ldr	r0, [r7, #12]
 800ea0a:	f000 f8c3 	bl	800eb94 <SPI_WaitOnFlagUntilTimeout>
 800ea0e:	4603      	mov	r3, r0
 800ea10:	2b00      	cmp	r3, #0
 800ea12:	d007      	beq.n	800ea24 <HAL_SPI_TransmitReceive+0x5a8>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800ea14:	68fb      	ldr	r3, [r7, #12]
 800ea16:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800ea1a:	f043 0220 	orr.w	r2, r3, #32
 800ea1e:	68fb      	ldr	r3, [r7, #12]
 800ea20:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 800ea24:	68f8      	ldr	r0, [r7, #12]
 800ea26:	f000 f815 	bl	800ea54 <SPI_CloseTransfer>

  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800ea2a:	68fb      	ldr	r3, [r7, #12]
 800ea2c:	2200      	movs	r2, #0
 800ea2e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  hspi->State = HAL_SPI_STATE_READY;
 800ea32:	68fb      	ldr	r3, [r7, #12]
 800ea34:	2201      	movs	r2, #1
 800ea36:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800ea3a:	68fb      	ldr	r3, [r7, #12]
 800ea3c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800ea40:	2b00      	cmp	r3, #0
 800ea42:	d001      	beq.n	800ea48 <HAL_SPI_TransmitReceive+0x5cc>
  {
    return HAL_ERROR;
 800ea44:	2301      	movs	r3, #1
 800ea46:	e001      	b.n	800ea4c <HAL_SPI_TransmitReceive+0x5d0>
  }
  return errorcode;
 800ea48:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 800ea4c:	4618      	mov	r0, r3
 800ea4e:	3730      	adds	r7, #48	; 0x30
 800ea50:	46bd      	mov	sp, r7
 800ea52:	bd80      	pop	{r7, pc}

0800ea54 <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
*         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 800ea54:	b480      	push	{r7}
 800ea56:	b085      	sub	sp, #20
 800ea58:	af00      	add	r7, sp, #0
 800ea5a:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 800ea5c:	687b      	ldr	r3, [r7, #4]
 800ea5e:	681b      	ldr	r3, [r3, #0]
 800ea60:	695b      	ldr	r3, [r3, #20]
 800ea62:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 800ea64:	687b      	ldr	r3, [r7, #4]
 800ea66:	681b      	ldr	r3, [r3, #0]
 800ea68:	699a      	ldr	r2, [r3, #24]
 800ea6a:	687b      	ldr	r3, [r7, #4]
 800ea6c:	681b      	ldr	r3, [r3, #0]
 800ea6e:	f042 0208 	orr.w	r2, r2, #8
 800ea72:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 800ea74:	687b      	ldr	r3, [r7, #4]
 800ea76:	681b      	ldr	r3, [r3, #0]
 800ea78:	699a      	ldr	r2, [r3, #24]
 800ea7a:	687b      	ldr	r3, [r7, #4]
 800ea7c:	681b      	ldr	r3, [r3, #0]
 800ea7e:	f042 0210 	orr.w	r2, r2, #16
 800ea82:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800ea84:	687b      	ldr	r3, [r7, #4]
 800ea86:	681b      	ldr	r3, [r3, #0]
 800ea88:	681a      	ldr	r2, [r3, #0]
 800ea8a:	687b      	ldr	r3, [r7, #4]
 800ea8c:	681b      	ldr	r3, [r3, #0]
 800ea8e:	f022 0201 	bic.w	r2, r2, #1
 800ea92:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | SPI_IT_FRE | SPI_IT_MODF));
 800ea94:	687b      	ldr	r3, [r7, #4]
 800ea96:	681b      	ldr	r3, [r3, #0]
 800ea98:	6919      	ldr	r1, [r3, #16]
 800ea9a:	687b      	ldr	r3, [r7, #4]
 800ea9c:	681a      	ldr	r2, [r3, #0]
 800ea9e:	4b3c      	ldr	r3, [pc, #240]	; (800eb90 <SPI_CloseTransfer+0x13c>)
 800eaa0:	400b      	ands	r3, r1
 800eaa2:	6113      	str	r3, [r2, #16]

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 800eaa4:	687b      	ldr	r3, [r7, #4]
 800eaa6:	681b      	ldr	r3, [r3, #0]
 800eaa8:	689a      	ldr	r2, [r3, #8]
 800eaaa:	687b      	ldr	r3, [r7, #4]
 800eaac:	681b      	ldr	r3, [r3, #0]
 800eaae:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 800eab2:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800eab4:	687b      	ldr	r3, [r7, #4]
 800eab6:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800eaba:	b2db      	uxtb	r3, r3
 800eabc:	2b04      	cmp	r3, #4
 800eabe:	d014      	beq.n	800eaea <SPI_CloseTransfer+0x96>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 800eac0:	68fb      	ldr	r3, [r7, #12]
 800eac2:	f003 0320 	and.w	r3, r3, #32
 800eac6:	2b00      	cmp	r3, #0
 800eac8:	d00f      	beq.n	800eaea <SPI_CloseTransfer+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 800eaca:	687b      	ldr	r3, [r7, #4]
 800eacc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800ead0:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800ead4:	687b      	ldr	r3, [r7, #4]
 800ead6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 800eada:	687b      	ldr	r3, [r7, #4]
 800eadc:	681b      	ldr	r3, [r3, #0]
 800eade:	699a      	ldr	r2, [r3, #24]
 800eae0:	687b      	ldr	r3, [r7, #4]
 800eae2:	681b      	ldr	r3, [r3, #0]
 800eae4:	f042 0220 	orr.w	r2, r2, #32
 800eae8:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800eaea:	687b      	ldr	r3, [r7, #4]
 800eaec:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800eaf0:	b2db      	uxtb	r3, r3
 800eaf2:	2b03      	cmp	r3, #3
 800eaf4:	d014      	beq.n	800eb20 <SPI_CloseTransfer+0xcc>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 800eaf6:	68fb      	ldr	r3, [r7, #12]
 800eaf8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800eafc:	2b00      	cmp	r3, #0
 800eafe:	d00f      	beq.n	800eb20 <SPI_CloseTransfer+0xcc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800eb00:	687b      	ldr	r3, [r7, #4]
 800eb02:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800eb06:	f043 0204 	orr.w	r2, r3, #4
 800eb0a:	687b      	ldr	r3, [r7, #4]
 800eb0c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800eb10:	687b      	ldr	r3, [r7, #4]
 800eb12:	681b      	ldr	r3, [r3, #0]
 800eb14:	699a      	ldr	r2, [r3, #24]
 800eb16:	687b      	ldr	r3, [r7, #4]
 800eb18:	681b      	ldr	r3, [r3, #0]
 800eb1a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800eb1e:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 800eb20:	68fb      	ldr	r3, [r7, #12]
 800eb22:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800eb26:	2b00      	cmp	r3, #0
 800eb28:	d00f      	beq.n	800eb4a <SPI_CloseTransfer+0xf6>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800eb2a:	687b      	ldr	r3, [r7, #4]
 800eb2c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800eb30:	f043 0201 	orr.w	r2, r3, #1
 800eb34:	687b      	ldr	r3, [r7, #4]
 800eb36:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800eb3a:	687b      	ldr	r3, [r7, #4]
 800eb3c:	681b      	ldr	r3, [r3, #0]
 800eb3e:	699a      	ldr	r2, [r3, #24]
 800eb40:	687b      	ldr	r3, [r7, #4]
 800eb42:	681b      	ldr	r3, [r3, #0]
 800eb44:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800eb48:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 800eb4a:	68fb      	ldr	r3, [r7, #12]
 800eb4c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800eb50:	2b00      	cmp	r3, #0
 800eb52:	d00f      	beq.n	800eb74 <SPI_CloseTransfer+0x120>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800eb54:	687b      	ldr	r3, [r7, #4]
 800eb56:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800eb5a:	f043 0208 	orr.w	r2, r3, #8
 800eb5e:	687b      	ldr	r3, [r7, #4]
 800eb60:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 800eb64:	687b      	ldr	r3, [r7, #4]
 800eb66:	681b      	ldr	r3, [r3, #0]
 800eb68:	699a      	ldr	r2, [r3, #24]
 800eb6a:	687b      	ldr	r3, [r7, #4]
 800eb6c:	681b      	ldr	r3, [r3, #0]
 800eb6e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800eb72:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 800eb74:	687b      	ldr	r3, [r7, #4]
 800eb76:	2200      	movs	r2, #0
 800eb78:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 800eb7c:	687b      	ldr	r3, [r7, #4]
 800eb7e:	2200      	movs	r2, #0
 800eb80:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
}
 800eb84:	bf00      	nop
 800eb86:	3714      	adds	r7, #20
 800eb88:	46bd      	mov	sp, r7
 800eb8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb8e:	4770      	bx	lr
 800eb90:	fffffc90 	.word	0xfffffc90

0800eb94 <SPI_WaitOnFlagUntilTimeout>:
  * @param Tickstart: Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitOnFlagUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Tickstart, uint32_t Timeout)
{
 800eb94:	b580      	push	{r7, lr}
 800eb96:	b084      	sub	sp, #16
 800eb98:	af00      	add	r7, sp, #0
 800eb9a:	60f8      	str	r0, [r7, #12]
 800eb9c:	60b9      	str	r1, [r7, #8]
 800eb9e:	603b      	str	r3, [r7, #0]
 800eba0:	4613      	mov	r3, r2
 800eba2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 800eba4:	e010      	b.n	800ebc8 <SPI_WaitOnFlagUntilTimeout+0x34>
  {
    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800eba6:	f7f4 fda7 	bl	80036f8 <HAL_GetTick>
 800ebaa:	4602      	mov	r2, r0
 800ebac:	683b      	ldr	r3, [r7, #0]
 800ebae:	1ad3      	subs	r3, r2, r3
 800ebb0:	69ba      	ldr	r2, [r7, #24]
 800ebb2:	429a      	cmp	r2, r3
 800ebb4:	d803      	bhi.n	800ebbe <SPI_WaitOnFlagUntilTimeout+0x2a>
 800ebb6:	69bb      	ldr	r3, [r7, #24]
 800ebb8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ebbc:	d102      	bne.n	800ebc4 <SPI_WaitOnFlagUntilTimeout+0x30>
 800ebbe:	69bb      	ldr	r3, [r7, #24]
 800ebc0:	2b00      	cmp	r3, #0
 800ebc2:	d101      	bne.n	800ebc8 <SPI_WaitOnFlagUntilTimeout+0x34>
    {
      return HAL_TIMEOUT;
 800ebc4:	2303      	movs	r3, #3
 800ebc6:	e00f      	b.n	800ebe8 <SPI_WaitOnFlagUntilTimeout+0x54>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 800ebc8:	68fb      	ldr	r3, [r7, #12]
 800ebca:	681b      	ldr	r3, [r3, #0]
 800ebcc:	695a      	ldr	r2, [r3, #20]
 800ebce:	68bb      	ldr	r3, [r7, #8]
 800ebd0:	4013      	ands	r3, r2
 800ebd2:	68ba      	ldr	r2, [r7, #8]
 800ebd4:	429a      	cmp	r2, r3
 800ebd6:	bf0c      	ite	eq
 800ebd8:	2301      	moveq	r3, #1
 800ebda:	2300      	movne	r3, #0
 800ebdc:	b2db      	uxtb	r3, r3
 800ebde:	461a      	mov	r2, r3
 800ebe0:	79fb      	ldrb	r3, [r7, #7]
 800ebe2:	429a      	cmp	r2, r3
 800ebe4:	d0df      	beq.n	800eba6 <SPI_WaitOnFlagUntilTimeout+0x12>
    }
  }
  return HAL_OK;
 800ebe6:	2300      	movs	r3, #0
}
 800ebe8:	4618      	mov	r0, r3
 800ebea:	3710      	adds	r7, #16
 800ebec:	46bd      	mov	sp, r7
 800ebee:	bd80      	pop	{r7, pc}

0800ebf0 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(SPI_HandleTypeDef *hspi)
{
 800ebf0:	b480      	push	{r7}
 800ebf2:	b085      	sub	sp, #20
 800ebf4:	af00      	add	r7, sp, #0
 800ebf6:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 800ebf8:	687b      	ldr	r3, [r7, #4]
 800ebfa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ebfc:	095b      	lsrs	r3, r3, #5
 800ebfe:	3301      	adds	r3, #1
 800ec00:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 800ec02:	687b      	ldr	r3, [r7, #4]
 800ec04:	68db      	ldr	r3, [r3, #12]
 800ec06:	3301      	adds	r3, #1
 800ec08:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 800ec0a:	68bb      	ldr	r3, [r7, #8]
 800ec0c:	3307      	adds	r3, #7
 800ec0e:	08db      	lsrs	r3, r3, #3
 800ec10:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 800ec12:	68bb      	ldr	r3, [r7, #8]
 800ec14:	68fa      	ldr	r2, [r7, #12]
 800ec16:	fb02 f303 	mul.w	r3, r2, r3
}
 800ec1a:	4618      	mov	r0, r3
 800ec1c:	3714      	adds	r7, #20
 800ec1e:	46bd      	mov	sp, r7
 800ec20:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec24:	4770      	bx	lr

0800ec26 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800ec26:	b580      	push	{r7, lr}
 800ec28:	b082      	sub	sp, #8
 800ec2a:	af00      	add	r7, sp, #0
 800ec2c:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800ec2e:	687b      	ldr	r3, [r7, #4]
 800ec30:	2b00      	cmp	r3, #0
 800ec32:	d101      	bne.n	800ec38 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800ec34:	2301      	movs	r3, #1
 800ec36:	e042      	b.n	800ecbe <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800ec38:	687b      	ldr	r3, [r7, #4]
 800ec3a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800ec3e:	2b00      	cmp	r3, #0
 800ec40:	d106      	bne.n	800ec50 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800ec42:	687b      	ldr	r3, [r7, #4]
 800ec44:	2200      	movs	r2, #0
 800ec46:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800ec4a:	6878      	ldr	r0, [r7, #4]
 800ec4c:	f7f4 fa70 	bl	8003130 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800ec50:	687b      	ldr	r3, [r7, #4]
 800ec52:	2224      	movs	r2, #36	; 0x24
 800ec54:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  __HAL_UART_DISABLE(huart);
 800ec58:	687b      	ldr	r3, [r7, #4]
 800ec5a:	681b      	ldr	r3, [r3, #0]
 800ec5c:	681a      	ldr	r2, [r3, #0]
 800ec5e:	687b      	ldr	r3, [r7, #4]
 800ec60:	681b      	ldr	r3, [r3, #0]
 800ec62:	f022 0201 	bic.w	r2, r2, #1
 800ec66:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800ec68:	6878      	ldr	r0, [r7, #4]
 800ec6a:	f000 f95f 	bl	800ef2c <UART_SetConfig>
 800ec6e:	4603      	mov	r3, r0
 800ec70:	2b01      	cmp	r3, #1
 800ec72:	d101      	bne.n	800ec78 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800ec74:	2301      	movs	r3, #1
 800ec76:	e022      	b.n	800ecbe <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800ec78:	687b      	ldr	r3, [r7, #4]
 800ec7a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ec7c:	2b00      	cmp	r3, #0
 800ec7e:	d002      	beq.n	800ec86 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 800ec80:	6878      	ldr	r0, [r7, #4]
 800ec82:	f000 ff03 	bl	800fa8c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800ec86:	687b      	ldr	r3, [r7, #4]
 800ec88:	681b      	ldr	r3, [r3, #0]
 800ec8a:	685a      	ldr	r2, [r3, #4]
 800ec8c:	687b      	ldr	r3, [r7, #4]
 800ec8e:	681b      	ldr	r3, [r3, #0]
 800ec90:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800ec94:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800ec96:	687b      	ldr	r3, [r7, #4]
 800ec98:	681b      	ldr	r3, [r3, #0]
 800ec9a:	689a      	ldr	r2, [r3, #8]
 800ec9c:	687b      	ldr	r3, [r7, #4]
 800ec9e:	681b      	ldr	r3, [r3, #0]
 800eca0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800eca4:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800eca6:	687b      	ldr	r3, [r7, #4]
 800eca8:	681b      	ldr	r3, [r3, #0]
 800ecaa:	681a      	ldr	r2, [r3, #0]
 800ecac:	687b      	ldr	r3, [r7, #4]
 800ecae:	681b      	ldr	r3, [r3, #0]
 800ecb0:	f042 0201 	orr.w	r2, r2, #1
 800ecb4:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800ecb6:	6878      	ldr	r0, [r7, #4]
 800ecb8:	f000 ff8a 	bl	800fbd0 <UART_CheckIdleState>
 800ecbc:	4603      	mov	r3, r0
}
 800ecbe:	4618      	mov	r0, r3
 800ecc0:	3708      	adds	r7, #8
 800ecc2:	46bd      	mov	sp, r7
 800ecc4:	bd80      	pop	{r7, pc}

0800ecc6 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800ecc6:	b580      	push	{r7, lr}
 800ecc8:	b08a      	sub	sp, #40	; 0x28
 800ecca:	af02      	add	r7, sp, #8
 800eccc:	60f8      	str	r0, [r7, #12]
 800ecce:	60b9      	str	r1, [r7, #8]
 800ecd0:	603b      	str	r3, [r7, #0]
 800ecd2:	4613      	mov	r3, r2
 800ecd4:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800ecd6:	68fb      	ldr	r3, [r7, #12]
 800ecd8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800ecdc:	2b20      	cmp	r3, #32
 800ecde:	f040 8083 	bne.w	800ede8 <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 800ece2:	68bb      	ldr	r3, [r7, #8]
 800ece4:	2b00      	cmp	r3, #0
 800ece6:	d002      	beq.n	800ecee <HAL_UART_Transmit+0x28>
 800ece8:	88fb      	ldrh	r3, [r7, #6]
 800ecea:	2b00      	cmp	r3, #0
 800ecec:	d101      	bne.n	800ecf2 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 800ecee:	2301      	movs	r3, #1
 800ecf0:	e07b      	b.n	800edea <HAL_UART_Transmit+0x124>
    }

    __HAL_LOCK(huart);
 800ecf2:	68fb      	ldr	r3, [r7, #12]
 800ecf4:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 800ecf8:	2b01      	cmp	r3, #1
 800ecfa:	d101      	bne.n	800ed00 <HAL_UART_Transmit+0x3a>
 800ecfc:	2302      	movs	r3, #2
 800ecfe:	e074      	b.n	800edea <HAL_UART_Transmit+0x124>
 800ed00:	68fb      	ldr	r3, [r7, #12]
 800ed02:	2201      	movs	r2, #1
 800ed04:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ed08:	68fb      	ldr	r3, [r7, #12]
 800ed0a:	2200      	movs	r2, #0
 800ed0c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800ed10:	68fb      	ldr	r3, [r7, #12]
 800ed12:	2221      	movs	r2, #33	; 0x21
 800ed14:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 800ed18:	f7f4 fcee 	bl	80036f8 <HAL_GetTick>
 800ed1c:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800ed1e:	68fb      	ldr	r3, [r7, #12]
 800ed20:	88fa      	ldrh	r2, [r7, #6]
 800ed22:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 800ed26:	68fb      	ldr	r3, [r7, #12]
 800ed28:	88fa      	ldrh	r2, [r7, #6]
 800ed2a:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800ed2e:	68fb      	ldr	r3, [r7, #12]
 800ed30:	689b      	ldr	r3, [r3, #8]
 800ed32:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ed36:	d108      	bne.n	800ed4a <HAL_UART_Transmit+0x84>
 800ed38:	68fb      	ldr	r3, [r7, #12]
 800ed3a:	691b      	ldr	r3, [r3, #16]
 800ed3c:	2b00      	cmp	r3, #0
 800ed3e:	d104      	bne.n	800ed4a <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 800ed40:	2300      	movs	r3, #0
 800ed42:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800ed44:	68bb      	ldr	r3, [r7, #8]
 800ed46:	61bb      	str	r3, [r7, #24]
 800ed48:	e003      	b.n	800ed52 <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 800ed4a:	68bb      	ldr	r3, [r7, #8]
 800ed4c:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800ed4e:	2300      	movs	r3, #0
 800ed50:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 800ed52:	68fb      	ldr	r3, [r7, #12]
 800ed54:	2200      	movs	r2, #0
 800ed56:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    while (huart->TxXferCount > 0U)
 800ed5a:	e02c      	b.n	800edb6 <HAL_UART_Transmit+0xf0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800ed5c:	683b      	ldr	r3, [r7, #0]
 800ed5e:	9300      	str	r3, [sp, #0]
 800ed60:	697b      	ldr	r3, [r7, #20]
 800ed62:	2200      	movs	r2, #0
 800ed64:	2180      	movs	r1, #128	; 0x80
 800ed66:	68f8      	ldr	r0, [r7, #12]
 800ed68:	f000 ff7a 	bl	800fc60 <UART_WaitOnFlagUntilTimeout>
 800ed6c:	4603      	mov	r3, r0
 800ed6e:	2b00      	cmp	r3, #0
 800ed70:	d001      	beq.n	800ed76 <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 800ed72:	2303      	movs	r3, #3
 800ed74:	e039      	b.n	800edea <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 800ed76:	69fb      	ldr	r3, [r7, #28]
 800ed78:	2b00      	cmp	r3, #0
 800ed7a:	d10b      	bne.n	800ed94 <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800ed7c:	69bb      	ldr	r3, [r7, #24]
 800ed7e:	881b      	ldrh	r3, [r3, #0]
 800ed80:	461a      	mov	r2, r3
 800ed82:	68fb      	ldr	r3, [r7, #12]
 800ed84:	681b      	ldr	r3, [r3, #0]
 800ed86:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800ed8a:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800ed8c:	69bb      	ldr	r3, [r7, #24]
 800ed8e:	3302      	adds	r3, #2
 800ed90:	61bb      	str	r3, [r7, #24]
 800ed92:	e007      	b.n	800eda4 <HAL_UART_Transmit+0xde>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800ed94:	69fb      	ldr	r3, [r7, #28]
 800ed96:	781a      	ldrb	r2, [r3, #0]
 800ed98:	68fb      	ldr	r3, [r7, #12]
 800ed9a:	681b      	ldr	r3, [r3, #0]
 800ed9c:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800ed9e:	69fb      	ldr	r3, [r7, #28]
 800eda0:	3301      	adds	r3, #1
 800eda2:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800eda4:	68fb      	ldr	r3, [r7, #12]
 800eda6:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800edaa:	b29b      	uxth	r3, r3
 800edac:	3b01      	subs	r3, #1
 800edae:	b29a      	uxth	r2, r3
 800edb0:	68fb      	ldr	r3, [r7, #12]
 800edb2:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 800edb6:	68fb      	ldr	r3, [r7, #12]
 800edb8:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800edbc:	b29b      	uxth	r3, r3
 800edbe:	2b00      	cmp	r3, #0
 800edc0:	d1cc      	bne.n	800ed5c <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800edc2:	683b      	ldr	r3, [r7, #0]
 800edc4:	9300      	str	r3, [sp, #0]
 800edc6:	697b      	ldr	r3, [r7, #20]
 800edc8:	2200      	movs	r2, #0
 800edca:	2140      	movs	r1, #64	; 0x40
 800edcc:	68f8      	ldr	r0, [r7, #12]
 800edce:	f000 ff47 	bl	800fc60 <UART_WaitOnFlagUntilTimeout>
 800edd2:	4603      	mov	r3, r0
 800edd4:	2b00      	cmp	r3, #0
 800edd6:	d001      	beq.n	800eddc <HAL_UART_Transmit+0x116>
    {
      return HAL_TIMEOUT;
 800edd8:	2303      	movs	r3, #3
 800edda:	e006      	b.n	800edea <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800eddc:	68fb      	ldr	r3, [r7, #12]
 800edde:	2220      	movs	r2, #32
 800ede0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    return HAL_OK;
 800ede4:	2300      	movs	r3, #0
 800ede6:	e000      	b.n	800edea <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 800ede8:	2302      	movs	r3, #2
  }
}
 800edea:	4618      	mov	r0, r3
 800edec:	3720      	adds	r7, #32
 800edee:	46bd      	mov	sp, r7
 800edf0:	bd80      	pop	{r7, pc}
	...

0800edf4 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800edf4:	b580      	push	{r7, lr}
 800edf6:	b084      	sub	sp, #16
 800edf8:	af00      	add	r7, sp, #0
 800edfa:	60f8      	str	r0, [r7, #12]
 800edfc:	60b9      	str	r1, [r7, #8]
 800edfe:	4613      	mov	r3, r2
 800ee00:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800ee02:	68fb      	ldr	r3, [r7, #12]
 800ee04:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800ee08:	2b20      	cmp	r3, #32
 800ee0a:	d170      	bne.n	800eeee <HAL_UART_Receive_DMA+0xfa>
  {
    if ((pData == NULL) || (Size == 0U))
 800ee0c:	68bb      	ldr	r3, [r7, #8]
 800ee0e:	2b00      	cmp	r3, #0
 800ee10:	d002      	beq.n	800ee18 <HAL_UART_Receive_DMA+0x24>
 800ee12:	88fb      	ldrh	r3, [r7, #6]
 800ee14:	2b00      	cmp	r3, #0
 800ee16:	d101      	bne.n	800ee1c <HAL_UART_Receive_DMA+0x28>
    {
      return HAL_ERROR;
 800ee18:	2301      	movs	r3, #1
 800ee1a:	e069      	b.n	800eef0 <HAL_UART_Receive_DMA+0xfc>
    }

    __HAL_LOCK(huart);
 800ee1c:	68fb      	ldr	r3, [r7, #12]
 800ee1e:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 800ee22:	2b01      	cmp	r3, #1
 800ee24:	d101      	bne.n	800ee2a <HAL_UART_Receive_DMA+0x36>
 800ee26:	2302      	movs	r3, #2
 800ee28:	e062      	b.n	800eef0 <HAL_UART_Receive_DMA+0xfc>
 800ee2a:	68fb      	ldr	r3, [r7, #12]
 800ee2c:	2201      	movs	r2, #1
 800ee2e:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    huart->pRxBuffPtr = pData;
 800ee32:	68fb      	ldr	r3, [r7, #12]
 800ee34:	68ba      	ldr	r2, [r7, #8]
 800ee36:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferSize = Size;
 800ee38:	68fb      	ldr	r3, [r7, #12]
 800ee3a:	88fa      	ldrh	r2, [r7, #6]
 800ee3c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ee40:	68fb      	ldr	r3, [r7, #12]
 800ee42:	2200      	movs	r2, #0
 800ee44:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800ee48:	68fb      	ldr	r3, [r7, #12]
 800ee4a:	2222      	movs	r2, #34	; 0x22
 800ee4c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    if (huart->hdmarx != NULL)
 800ee50:	68fb      	ldr	r3, [r7, #12]
 800ee52:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800ee54:	2b00      	cmp	r3, #0
 800ee56:	d02c      	beq.n	800eeb2 <HAL_UART_Receive_DMA+0xbe>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800ee58:	68fb      	ldr	r3, [r7, #12]
 800ee5a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800ee5c:	4a26      	ldr	r2, [pc, #152]	; (800eef8 <HAL_UART_Receive_DMA+0x104>)
 800ee5e:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800ee60:	68fb      	ldr	r3, [r7, #12]
 800ee62:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800ee64:	4a25      	ldr	r2, [pc, #148]	; (800eefc <HAL_UART_Receive_DMA+0x108>)
 800ee66:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      huart->hdmarx->XferErrorCallback = UART_DMAError;
 800ee68:	68fb      	ldr	r3, [r7, #12]
 800ee6a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800ee6c:	4a24      	ldr	r2, [pc, #144]	; (800ef00 <HAL_UART_Receive_DMA+0x10c>)
 800ee6e:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Set the DMA abort callback */
      huart->hdmarx->XferAbortCallback = NULL;
 800ee70:	68fb      	ldr	r3, [r7, #12]
 800ee72:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800ee74:	2200      	movs	r2, #0
 800ee76:	651a      	str	r2, [r3, #80]	; 0x50

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 800ee78:	68fb      	ldr	r3, [r7, #12]
 800ee7a:	6f98      	ldr	r0, [r3, #120]	; 0x78
 800ee7c:	68fb      	ldr	r3, [r7, #12]
 800ee7e:	681b      	ldr	r3, [r3, #0]
 800ee80:	3324      	adds	r3, #36	; 0x24
 800ee82:	4619      	mov	r1, r3
 800ee84:	68fb      	ldr	r3, [r7, #12]
 800ee86:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ee88:	461a      	mov	r2, r3
 800ee8a:	88fb      	ldrh	r3, [r7, #6]
 800ee8c:	f7f5 f8da 	bl	8004044 <HAL_DMA_Start_IT>
 800ee90:	4603      	mov	r3, r0
 800ee92:	2b00      	cmp	r3, #0
 800ee94:	d00d      	beq.n	800eeb2 <HAL_UART_Receive_DMA+0xbe>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 800ee96:	68fb      	ldr	r3, [r7, #12]
 800ee98:	2210      	movs	r2, #16
 800ee9a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 800ee9e:	68fb      	ldr	r3, [r7, #12]
 800eea0:	2200      	movs	r2, #0
 800eea2:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 800eea6:	68fb      	ldr	r3, [r7, #12]
 800eea8:	2220      	movs	r2, #32
 800eeaa:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        return HAL_ERROR;
 800eeae:	2301      	movs	r3, #1
 800eeb0:	e01e      	b.n	800eef0 <HAL_UART_Receive_DMA+0xfc>
      }
    }
    __HAL_UNLOCK(huart);
 800eeb2:	68fb      	ldr	r3, [r7, #12]
 800eeb4:	2200      	movs	r2, #0
 800eeb6:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    /* Enable the UART Parity Error Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800eeba:	68fb      	ldr	r3, [r7, #12]
 800eebc:	681b      	ldr	r3, [r3, #0]
 800eebe:	681a      	ldr	r2, [r3, #0]
 800eec0:	68fb      	ldr	r3, [r7, #12]
 800eec2:	681b      	ldr	r3, [r3, #0]
 800eec4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800eec8:	601a      	str	r2, [r3, #0]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800eeca:	68fb      	ldr	r3, [r7, #12]
 800eecc:	681b      	ldr	r3, [r3, #0]
 800eece:	689a      	ldr	r2, [r3, #8]
 800eed0:	68fb      	ldr	r3, [r7, #12]
 800eed2:	681b      	ldr	r3, [r3, #0]
 800eed4:	f042 0201 	orr.w	r2, r2, #1
 800eed8:	609a      	str	r2, [r3, #8]

    /* Enable the DMA transfer for the receiver request by setting the DMAR bit
    in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800eeda:	68fb      	ldr	r3, [r7, #12]
 800eedc:	681b      	ldr	r3, [r3, #0]
 800eede:	689a      	ldr	r2, [r3, #8]
 800eee0:	68fb      	ldr	r3, [r7, #12]
 800eee2:	681b      	ldr	r3, [r3, #0]
 800eee4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800eee8:	609a      	str	r2, [r3, #8]

    return HAL_OK;
 800eeea:	2300      	movs	r3, #0
 800eeec:	e000      	b.n	800eef0 <HAL_UART_Receive_DMA+0xfc>
  }
  else
  {
    return HAL_BUSY;
 800eeee:	2302      	movs	r3, #2
  }
}
 800eef0:	4618      	mov	r0, r3
 800eef2:	3710      	adds	r7, #16
 800eef4:	46bd      	mov	sp, r7
 800eef6:	bd80      	pop	{r7, pc}
 800eef8:	0800fde5 	.word	0x0800fde5
 800eefc:	0800fe4b 	.word	0x0800fe4b
 800ef00:	0800fe67 	.word	0x0800fe67

0800ef04 <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800ef04:	b480      	push	{r7}
 800ef06:	b083      	sub	sp, #12
 800ef08:	af00      	add	r7, sp, #0
 800ef0a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 800ef0c:	bf00      	nop
 800ef0e:	370c      	adds	r7, #12
 800ef10:	46bd      	mov	sp, r7
 800ef12:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef16:	4770      	bx	lr

0800ef18 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800ef18:	b480      	push	{r7}
 800ef1a:	b083      	sub	sp, #12
 800ef1c:	af00      	add	r7, sp, #0
 800ef1e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800ef20:	bf00      	nop
 800ef22:	370c      	adds	r7, #12
 800ef24:	46bd      	mov	sp, r7
 800ef26:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef2a:	4770      	bx	lr

0800ef2c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800ef2c:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 800ef30:	b08e      	sub	sp, #56	; 0x38
 800ef32:	af00      	add	r7, sp, #0
 800ef34:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800ef36:	2300      	movs	r3, #0
 800ef38:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800ef3c:	687b      	ldr	r3, [r7, #4]
 800ef3e:	689a      	ldr	r2, [r3, #8]
 800ef40:	687b      	ldr	r3, [r7, #4]
 800ef42:	691b      	ldr	r3, [r3, #16]
 800ef44:	431a      	orrs	r2, r3
 800ef46:	687b      	ldr	r3, [r7, #4]
 800ef48:	695b      	ldr	r3, [r3, #20]
 800ef4a:	431a      	orrs	r2, r3
 800ef4c:	687b      	ldr	r3, [r7, #4]
 800ef4e:	69db      	ldr	r3, [r3, #28]
 800ef50:	4313      	orrs	r3, r2
 800ef52:	637b      	str	r3, [r7, #52]	; 0x34
  tmpreg |= (uint32_t)huart->FifoMode;
 800ef54:	687b      	ldr	r3, [r7, #4]
 800ef56:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800ef58:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800ef5a:	4313      	orrs	r3, r2
 800ef5c:	637b      	str	r3, [r7, #52]	; 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800ef5e:	687b      	ldr	r3, [r7, #4]
 800ef60:	681b      	ldr	r3, [r3, #0]
 800ef62:	681a      	ldr	r2, [r3, #0]
 800ef64:	4bc1      	ldr	r3, [pc, #772]	; (800f26c <UART_SetConfig+0x340>)
 800ef66:	4013      	ands	r3, r2
 800ef68:	687a      	ldr	r2, [r7, #4]
 800ef6a:	6812      	ldr	r2, [r2, #0]
 800ef6c:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800ef6e:	430b      	orrs	r3, r1
 800ef70:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800ef72:	687b      	ldr	r3, [r7, #4]
 800ef74:	681b      	ldr	r3, [r3, #0]
 800ef76:	685b      	ldr	r3, [r3, #4]
 800ef78:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800ef7c:	687b      	ldr	r3, [r7, #4]
 800ef7e:	68da      	ldr	r2, [r3, #12]
 800ef80:	687b      	ldr	r3, [r7, #4]
 800ef82:	681b      	ldr	r3, [r3, #0]
 800ef84:	430a      	orrs	r2, r1
 800ef86:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800ef88:	687b      	ldr	r3, [r7, #4]
 800ef8a:	699b      	ldr	r3, [r3, #24]
 800ef8c:	637b      	str	r3, [r7, #52]	; 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800ef8e:	687b      	ldr	r3, [r7, #4]
 800ef90:	681b      	ldr	r3, [r3, #0]
 800ef92:	4ab7      	ldr	r2, [pc, #732]	; (800f270 <UART_SetConfig+0x344>)
 800ef94:	4293      	cmp	r3, r2
 800ef96:	d004      	beq.n	800efa2 <UART_SetConfig+0x76>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800ef98:	687b      	ldr	r3, [r7, #4]
 800ef9a:	6a1b      	ldr	r3, [r3, #32]
 800ef9c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800ef9e:	4313      	orrs	r3, r2
 800efa0:	637b      	str	r3, [r7, #52]	; 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800efa2:	687b      	ldr	r3, [r7, #4]
 800efa4:	681b      	ldr	r3, [r3, #0]
 800efa6:	689a      	ldr	r2, [r3, #8]
 800efa8:	4bb2      	ldr	r3, [pc, #712]	; (800f274 <UART_SetConfig+0x348>)
 800efaa:	4013      	ands	r3, r2
 800efac:	687a      	ldr	r2, [r7, #4]
 800efae:	6812      	ldr	r2, [r2, #0]
 800efb0:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800efb2:	430b      	orrs	r3, r1
 800efb4:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800efb6:	687b      	ldr	r3, [r7, #4]
 800efb8:	681b      	ldr	r3, [r3, #0]
 800efba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800efbc:	f023 010f 	bic.w	r1, r3, #15
 800efc0:	687b      	ldr	r3, [r7, #4]
 800efc2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800efc4:	687b      	ldr	r3, [r7, #4]
 800efc6:	681b      	ldr	r3, [r3, #0]
 800efc8:	430a      	orrs	r2, r1
 800efca:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800efcc:	687b      	ldr	r3, [r7, #4]
 800efce:	681b      	ldr	r3, [r3, #0]
 800efd0:	4aa9      	ldr	r2, [pc, #676]	; (800f278 <UART_SetConfig+0x34c>)
 800efd2:	4293      	cmp	r3, r2
 800efd4:	d177      	bne.n	800f0c6 <UART_SetConfig+0x19a>
 800efd6:	4ba9      	ldr	r3, [pc, #676]	; (800f27c <UART_SetConfig+0x350>)
 800efd8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800efda:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800efde:	2b28      	cmp	r3, #40	; 0x28
 800efe0:	d86c      	bhi.n	800f0bc <UART_SetConfig+0x190>
 800efe2:	a201      	add	r2, pc, #4	; (adr r2, 800efe8 <UART_SetConfig+0xbc>)
 800efe4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800efe8:	0800f08d 	.word	0x0800f08d
 800efec:	0800f0bd 	.word	0x0800f0bd
 800eff0:	0800f0bd 	.word	0x0800f0bd
 800eff4:	0800f0bd 	.word	0x0800f0bd
 800eff8:	0800f0bd 	.word	0x0800f0bd
 800effc:	0800f0bd 	.word	0x0800f0bd
 800f000:	0800f0bd 	.word	0x0800f0bd
 800f004:	0800f0bd 	.word	0x0800f0bd
 800f008:	0800f095 	.word	0x0800f095
 800f00c:	0800f0bd 	.word	0x0800f0bd
 800f010:	0800f0bd 	.word	0x0800f0bd
 800f014:	0800f0bd 	.word	0x0800f0bd
 800f018:	0800f0bd 	.word	0x0800f0bd
 800f01c:	0800f0bd 	.word	0x0800f0bd
 800f020:	0800f0bd 	.word	0x0800f0bd
 800f024:	0800f0bd 	.word	0x0800f0bd
 800f028:	0800f09d 	.word	0x0800f09d
 800f02c:	0800f0bd 	.word	0x0800f0bd
 800f030:	0800f0bd 	.word	0x0800f0bd
 800f034:	0800f0bd 	.word	0x0800f0bd
 800f038:	0800f0bd 	.word	0x0800f0bd
 800f03c:	0800f0bd 	.word	0x0800f0bd
 800f040:	0800f0bd 	.word	0x0800f0bd
 800f044:	0800f0bd 	.word	0x0800f0bd
 800f048:	0800f0a5 	.word	0x0800f0a5
 800f04c:	0800f0bd 	.word	0x0800f0bd
 800f050:	0800f0bd 	.word	0x0800f0bd
 800f054:	0800f0bd 	.word	0x0800f0bd
 800f058:	0800f0bd 	.word	0x0800f0bd
 800f05c:	0800f0bd 	.word	0x0800f0bd
 800f060:	0800f0bd 	.word	0x0800f0bd
 800f064:	0800f0bd 	.word	0x0800f0bd
 800f068:	0800f0ad 	.word	0x0800f0ad
 800f06c:	0800f0bd 	.word	0x0800f0bd
 800f070:	0800f0bd 	.word	0x0800f0bd
 800f074:	0800f0bd 	.word	0x0800f0bd
 800f078:	0800f0bd 	.word	0x0800f0bd
 800f07c:	0800f0bd 	.word	0x0800f0bd
 800f080:	0800f0bd 	.word	0x0800f0bd
 800f084:	0800f0bd 	.word	0x0800f0bd
 800f088:	0800f0b5 	.word	0x0800f0b5
 800f08c:	2301      	movs	r3, #1
 800f08e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800f092:	e233      	b.n	800f4fc <UART_SetConfig+0x5d0>
 800f094:	2304      	movs	r3, #4
 800f096:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800f09a:	e22f      	b.n	800f4fc <UART_SetConfig+0x5d0>
 800f09c:	2308      	movs	r3, #8
 800f09e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800f0a2:	e22b      	b.n	800f4fc <UART_SetConfig+0x5d0>
 800f0a4:	2310      	movs	r3, #16
 800f0a6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800f0aa:	e227      	b.n	800f4fc <UART_SetConfig+0x5d0>
 800f0ac:	2320      	movs	r3, #32
 800f0ae:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800f0b2:	e223      	b.n	800f4fc <UART_SetConfig+0x5d0>
 800f0b4:	2340      	movs	r3, #64	; 0x40
 800f0b6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800f0ba:	e21f      	b.n	800f4fc <UART_SetConfig+0x5d0>
 800f0bc:	2380      	movs	r3, #128	; 0x80
 800f0be:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800f0c2:	bf00      	nop
 800f0c4:	e21a      	b.n	800f4fc <UART_SetConfig+0x5d0>
 800f0c6:	687b      	ldr	r3, [r7, #4]
 800f0c8:	681b      	ldr	r3, [r3, #0]
 800f0ca:	4a6d      	ldr	r2, [pc, #436]	; (800f280 <UART_SetConfig+0x354>)
 800f0cc:	4293      	cmp	r3, r2
 800f0ce:	d132      	bne.n	800f136 <UART_SetConfig+0x20a>
 800f0d0:	4b6a      	ldr	r3, [pc, #424]	; (800f27c <UART_SetConfig+0x350>)
 800f0d2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f0d4:	f003 0307 	and.w	r3, r3, #7
 800f0d8:	2b05      	cmp	r3, #5
 800f0da:	d827      	bhi.n	800f12c <UART_SetConfig+0x200>
 800f0dc:	a201      	add	r2, pc, #4	; (adr r2, 800f0e4 <UART_SetConfig+0x1b8>)
 800f0de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f0e2:	bf00      	nop
 800f0e4:	0800f0fd 	.word	0x0800f0fd
 800f0e8:	0800f105 	.word	0x0800f105
 800f0ec:	0800f10d 	.word	0x0800f10d
 800f0f0:	0800f115 	.word	0x0800f115
 800f0f4:	0800f11d 	.word	0x0800f11d
 800f0f8:	0800f125 	.word	0x0800f125
 800f0fc:	2300      	movs	r3, #0
 800f0fe:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800f102:	e1fb      	b.n	800f4fc <UART_SetConfig+0x5d0>
 800f104:	2304      	movs	r3, #4
 800f106:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800f10a:	e1f7      	b.n	800f4fc <UART_SetConfig+0x5d0>
 800f10c:	2308      	movs	r3, #8
 800f10e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800f112:	e1f3      	b.n	800f4fc <UART_SetConfig+0x5d0>
 800f114:	2310      	movs	r3, #16
 800f116:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800f11a:	e1ef      	b.n	800f4fc <UART_SetConfig+0x5d0>
 800f11c:	2320      	movs	r3, #32
 800f11e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800f122:	e1eb      	b.n	800f4fc <UART_SetConfig+0x5d0>
 800f124:	2340      	movs	r3, #64	; 0x40
 800f126:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800f12a:	e1e7      	b.n	800f4fc <UART_SetConfig+0x5d0>
 800f12c:	2380      	movs	r3, #128	; 0x80
 800f12e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800f132:	bf00      	nop
 800f134:	e1e2      	b.n	800f4fc <UART_SetConfig+0x5d0>
 800f136:	687b      	ldr	r3, [r7, #4]
 800f138:	681b      	ldr	r3, [r3, #0]
 800f13a:	4a52      	ldr	r2, [pc, #328]	; (800f284 <UART_SetConfig+0x358>)
 800f13c:	4293      	cmp	r3, r2
 800f13e:	d132      	bne.n	800f1a6 <UART_SetConfig+0x27a>
 800f140:	4b4e      	ldr	r3, [pc, #312]	; (800f27c <UART_SetConfig+0x350>)
 800f142:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f144:	f003 0307 	and.w	r3, r3, #7
 800f148:	2b05      	cmp	r3, #5
 800f14a:	d827      	bhi.n	800f19c <UART_SetConfig+0x270>
 800f14c:	a201      	add	r2, pc, #4	; (adr r2, 800f154 <UART_SetConfig+0x228>)
 800f14e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f152:	bf00      	nop
 800f154:	0800f16d 	.word	0x0800f16d
 800f158:	0800f175 	.word	0x0800f175
 800f15c:	0800f17d 	.word	0x0800f17d
 800f160:	0800f185 	.word	0x0800f185
 800f164:	0800f18d 	.word	0x0800f18d
 800f168:	0800f195 	.word	0x0800f195
 800f16c:	2300      	movs	r3, #0
 800f16e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800f172:	e1c3      	b.n	800f4fc <UART_SetConfig+0x5d0>
 800f174:	2304      	movs	r3, #4
 800f176:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800f17a:	e1bf      	b.n	800f4fc <UART_SetConfig+0x5d0>
 800f17c:	2308      	movs	r3, #8
 800f17e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800f182:	e1bb      	b.n	800f4fc <UART_SetConfig+0x5d0>
 800f184:	2310      	movs	r3, #16
 800f186:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800f18a:	e1b7      	b.n	800f4fc <UART_SetConfig+0x5d0>
 800f18c:	2320      	movs	r3, #32
 800f18e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800f192:	e1b3      	b.n	800f4fc <UART_SetConfig+0x5d0>
 800f194:	2340      	movs	r3, #64	; 0x40
 800f196:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800f19a:	e1af      	b.n	800f4fc <UART_SetConfig+0x5d0>
 800f19c:	2380      	movs	r3, #128	; 0x80
 800f19e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800f1a2:	bf00      	nop
 800f1a4:	e1aa      	b.n	800f4fc <UART_SetConfig+0x5d0>
 800f1a6:	687b      	ldr	r3, [r7, #4]
 800f1a8:	681b      	ldr	r3, [r3, #0]
 800f1aa:	4a37      	ldr	r2, [pc, #220]	; (800f288 <UART_SetConfig+0x35c>)
 800f1ac:	4293      	cmp	r3, r2
 800f1ae:	d132      	bne.n	800f216 <UART_SetConfig+0x2ea>
 800f1b0:	4b32      	ldr	r3, [pc, #200]	; (800f27c <UART_SetConfig+0x350>)
 800f1b2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f1b4:	f003 0307 	and.w	r3, r3, #7
 800f1b8:	2b05      	cmp	r3, #5
 800f1ba:	d827      	bhi.n	800f20c <UART_SetConfig+0x2e0>
 800f1bc:	a201      	add	r2, pc, #4	; (adr r2, 800f1c4 <UART_SetConfig+0x298>)
 800f1be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f1c2:	bf00      	nop
 800f1c4:	0800f1dd 	.word	0x0800f1dd
 800f1c8:	0800f1e5 	.word	0x0800f1e5
 800f1cc:	0800f1ed 	.word	0x0800f1ed
 800f1d0:	0800f1f5 	.word	0x0800f1f5
 800f1d4:	0800f1fd 	.word	0x0800f1fd
 800f1d8:	0800f205 	.word	0x0800f205
 800f1dc:	2300      	movs	r3, #0
 800f1de:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800f1e2:	e18b      	b.n	800f4fc <UART_SetConfig+0x5d0>
 800f1e4:	2304      	movs	r3, #4
 800f1e6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800f1ea:	e187      	b.n	800f4fc <UART_SetConfig+0x5d0>
 800f1ec:	2308      	movs	r3, #8
 800f1ee:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800f1f2:	e183      	b.n	800f4fc <UART_SetConfig+0x5d0>
 800f1f4:	2310      	movs	r3, #16
 800f1f6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800f1fa:	e17f      	b.n	800f4fc <UART_SetConfig+0x5d0>
 800f1fc:	2320      	movs	r3, #32
 800f1fe:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800f202:	e17b      	b.n	800f4fc <UART_SetConfig+0x5d0>
 800f204:	2340      	movs	r3, #64	; 0x40
 800f206:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800f20a:	e177      	b.n	800f4fc <UART_SetConfig+0x5d0>
 800f20c:	2380      	movs	r3, #128	; 0x80
 800f20e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800f212:	bf00      	nop
 800f214:	e172      	b.n	800f4fc <UART_SetConfig+0x5d0>
 800f216:	687b      	ldr	r3, [r7, #4]
 800f218:	681b      	ldr	r3, [r3, #0]
 800f21a:	4a1c      	ldr	r2, [pc, #112]	; (800f28c <UART_SetConfig+0x360>)
 800f21c:	4293      	cmp	r3, r2
 800f21e:	d144      	bne.n	800f2aa <UART_SetConfig+0x37e>
 800f220:	4b16      	ldr	r3, [pc, #88]	; (800f27c <UART_SetConfig+0x350>)
 800f222:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f224:	f003 0307 	and.w	r3, r3, #7
 800f228:	2b05      	cmp	r3, #5
 800f22a:	d839      	bhi.n	800f2a0 <UART_SetConfig+0x374>
 800f22c:	a201      	add	r2, pc, #4	; (adr r2, 800f234 <UART_SetConfig+0x308>)
 800f22e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f232:	bf00      	nop
 800f234:	0800f24d 	.word	0x0800f24d
 800f238:	0800f255 	.word	0x0800f255
 800f23c:	0800f25d 	.word	0x0800f25d
 800f240:	0800f265 	.word	0x0800f265
 800f244:	0800f291 	.word	0x0800f291
 800f248:	0800f299 	.word	0x0800f299
 800f24c:	2300      	movs	r3, #0
 800f24e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800f252:	e153      	b.n	800f4fc <UART_SetConfig+0x5d0>
 800f254:	2304      	movs	r3, #4
 800f256:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800f25a:	e14f      	b.n	800f4fc <UART_SetConfig+0x5d0>
 800f25c:	2308      	movs	r3, #8
 800f25e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800f262:	e14b      	b.n	800f4fc <UART_SetConfig+0x5d0>
 800f264:	2310      	movs	r3, #16
 800f266:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800f26a:	e147      	b.n	800f4fc <UART_SetConfig+0x5d0>
 800f26c:	cfff69f3 	.word	0xcfff69f3
 800f270:	58000c00 	.word	0x58000c00
 800f274:	11fff4ff 	.word	0x11fff4ff
 800f278:	40011000 	.word	0x40011000
 800f27c:	58024400 	.word	0x58024400
 800f280:	40004400 	.word	0x40004400
 800f284:	40004800 	.word	0x40004800
 800f288:	40004c00 	.word	0x40004c00
 800f28c:	40005000 	.word	0x40005000
 800f290:	2320      	movs	r3, #32
 800f292:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800f296:	e131      	b.n	800f4fc <UART_SetConfig+0x5d0>
 800f298:	2340      	movs	r3, #64	; 0x40
 800f29a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800f29e:	e12d      	b.n	800f4fc <UART_SetConfig+0x5d0>
 800f2a0:	2380      	movs	r3, #128	; 0x80
 800f2a2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800f2a6:	bf00      	nop
 800f2a8:	e128      	b.n	800f4fc <UART_SetConfig+0x5d0>
 800f2aa:	687b      	ldr	r3, [r7, #4]
 800f2ac:	681b      	ldr	r3, [r3, #0]
 800f2ae:	4ab6      	ldr	r2, [pc, #728]	; (800f588 <UART_SetConfig+0x65c>)
 800f2b0:	4293      	cmp	r3, r2
 800f2b2:	d178      	bne.n	800f3a6 <UART_SetConfig+0x47a>
 800f2b4:	4bb5      	ldr	r3, [pc, #724]	; (800f58c <UART_SetConfig+0x660>)
 800f2b6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f2b8:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800f2bc:	2b28      	cmp	r3, #40	; 0x28
 800f2be:	d86d      	bhi.n	800f39c <UART_SetConfig+0x470>
 800f2c0:	a201      	add	r2, pc, #4	; (adr r2, 800f2c8 <UART_SetConfig+0x39c>)
 800f2c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f2c6:	bf00      	nop
 800f2c8:	0800f36d 	.word	0x0800f36d
 800f2cc:	0800f39d 	.word	0x0800f39d
 800f2d0:	0800f39d 	.word	0x0800f39d
 800f2d4:	0800f39d 	.word	0x0800f39d
 800f2d8:	0800f39d 	.word	0x0800f39d
 800f2dc:	0800f39d 	.word	0x0800f39d
 800f2e0:	0800f39d 	.word	0x0800f39d
 800f2e4:	0800f39d 	.word	0x0800f39d
 800f2e8:	0800f375 	.word	0x0800f375
 800f2ec:	0800f39d 	.word	0x0800f39d
 800f2f0:	0800f39d 	.word	0x0800f39d
 800f2f4:	0800f39d 	.word	0x0800f39d
 800f2f8:	0800f39d 	.word	0x0800f39d
 800f2fc:	0800f39d 	.word	0x0800f39d
 800f300:	0800f39d 	.word	0x0800f39d
 800f304:	0800f39d 	.word	0x0800f39d
 800f308:	0800f37d 	.word	0x0800f37d
 800f30c:	0800f39d 	.word	0x0800f39d
 800f310:	0800f39d 	.word	0x0800f39d
 800f314:	0800f39d 	.word	0x0800f39d
 800f318:	0800f39d 	.word	0x0800f39d
 800f31c:	0800f39d 	.word	0x0800f39d
 800f320:	0800f39d 	.word	0x0800f39d
 800f324:	0800f39d 	.word	0x0800f39d
 800f328:	0800f385 	.word	0x0800f385
 800f32c:	0800f39d 	.word	0x0800f39d
 800f330:	0800f39d 	.word	0x0800f39d
 800f334:	0800f39d 	.word	0x0800f39d
 800f338:	0800f39d 	.word	0x0800f39d
 800f33c:	0800f39d 	.word	0x0800f39d
 800f340:	0800f39d 	.word	0x0800f39d
 800f344:	0800f39d 	.word	0x0800f39d
 800f348:	0800f38d 	.word	0x0800f38d
 800f34c:	0800f39d 	.word	0x0800f39d
 800f350:	0800f39d 	.word	0x0800f39d
 800f354:	0800f39d 	.word	0x0800f39d
 800f358:	0800f39d 	.word	0x0800f39d
 800f35c:	0800f39d 	.word	0x0800f39d
 800f360:	0800f39d 	.word	0x0800f39d
 800f364:	0800f39d 	.word	0x0800f39d
 800f368:	0800f395 	.word	0x0800f395
 800f36c:	2301      	movs	r3, #1
 800f36e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800f372:	e0c3      	b.n	800f4fc <UART_SetConfig+0x5d0>
 800f374:	2304      	movs	r3, #4
 800f376:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800f37a:	e0bf      	b.n	800f4fc <UART_SetConfig+0x5d0>
 800f37c:	2308      	movs	r3, #8
 800f37e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800f382:	e0bb      	b.n	800f4fc <UART_SetConfig+0x5d0>
 800f384:	2310      	movs	r3, #16
 800f386:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800f38a:	e0b7      	b.n	800f4fc <UART_SetConfig+0x5d0>
 800f38c:	2320      	movs	r3, #32
 800f38e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800f392:	e0b3      	b.n	800f4fc <UART_SetConfig+0x5d0>
 800f394:	2340      	movs	r3, #64	; 0x40
 800f396:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800f39a:	e0af      	b.n	800f4fc <UART_SetConfig+0x5d0>
 800f39c:	2380      	movs	r3, #128	; 0x80
 800f39e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800f3a2:	bf00      	nop
 800f3a4:	e0aa      	b.n	800f4fc <UART_SetConfig+0x5d0>
 800f3a6:	687b      	ldr	r3, [r7, #4]
 800f3a8:	681b      	ldr	r3, [r3, #0]
 800f3aa:	4a79      	ldr	r2, [pc, #484]	; (800f590 <UART_SetConfig+0x664>)
 800f3ac:	4293      	cmp	r3, r2
 800f3ae:	d132      	bne.n	800f416 <UART_SetConfig+0x4ea>
 800f3b0:	4b76      	ldr	r3, [pc, #472]	; (800f58c <UART_SetConfig+0x660>)
 800f3b2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f3b4:	f003 0307 	and.w	r3, r3, #7
 800f3b8:	2b05      	cmp	r3, #5
 800f3ba:	d827      	bhi.n	800f40c <UART_SetConfig+0x4e0>
 800f3bc:	a201      	add	r2, pc, #4	; (adr r2, 800f3c4 <UART_SetConfig+0x498>)
 800f3be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f3c2:	bf00      	nop
 800f3c4:	0800f3dd 	.word	0x0800f3dd
 800f3c8:	0800f3e5 	.word	0x0800f3e5
 800f3cc:	0800f3ed 	.word	0x0800f3ed
 800f3d0:	0800f3f5 	.word	0x0800f3f5
 800f3d4:	0800f3fd 	.word	0x0800f3fd
 800f3d8:	0800f405 	.word	0x0800f405
 800f3dc:	2300      	movs	r3, #0
 800f3de:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800f3e2:	e08b      	b.n	800f4fc <UART_SetConfig+0x5d0>
 800f3e4:	2304      	movs	r3, #4
 800f3e6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800f3ea:	e087      	b.n	800f4fc <UART_SetConfig+0x5d0>
 800f3ec:	2308      	movs	r3, #8
 800f3ee:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800f3f2:	e083      	b.n	800f4fc <UART_SetConfig+0x5d0>
 800f3f4:	2310      	movs	r3, #16
 800f3f6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800f3fa:	e07f      	b.n	800f4fc <UART_SetConfig+0x5d0>
 800f3fc:	2320      	movs	r3, #32
 800f3fe:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800f402:	e07b      	b.n	800f4fc <UART_SetConfig+0x5d0>
 800f404:	2340      	movs	r3, #64	; 0x40
 800f406:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800f40a:	e077      	b.n	800f4fc <UART_SetConfig+0x5d0>
 800f40c:	2380      	movs	r3, #128	; 0x80
 800f40e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800f412:	bf00      	nop
 800f414:	e072      	b.n	800f4fc <UART_SetConfig+0x5d0>
 800f416:	687b      	ldr	r3, [r7, #4]
 800f418:	681b      	ldr	r3, [r3, #0]
 800f41a:	4a5e      	ldr	r2, [pc, #376]	; (800f594 <UART_SetConfig+0x668>)
 800f41c:	4293      	cmp	r3, r2
 800f41e:	d132      	bne.n	800f486 <UART_SetConfig+0x55a>
 800f420:	4b5a      	ldr	r3, [pc, #360]	; (800f58c <UART_SetConfig+0x660>)
 800f422:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f424:	f003 0307 	and.w	r3, r3, #7
 800f428:	2b05      	cmp	r3, #5
 800f42a:	d827      	bhi.n	800f47c <UART_SetConfig+0x550>
 800f42c:	a201      	add	r2, pc, #4	; (adr r2, 800f434 <UART_SetConfig+0x508>)
 800f42e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f432:	bf00      	nop
 800f434:	0800f44d 	.word	0x0800f44d
 800f438:	0800f455 	.word	0x0800f455
 800f43c:	0800f45d 	.word	0x0800f45d
 800f440:	0800f465 	.word	0x0800f465
 800f444:	0800f46d 	.word	0x0800f46d
 800f448:	0800f475 	.word	0x0800f475
 800f44c:	2300      	movs	r3, #0
 800f44e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800f452:	e053      	b.n	800f4fc <UART_SetConfig+0x5d0>
 800f454:	2304      	movs	r3, #4
 800f456:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800f45a:	e04f      	b.n	800f4fc <UART_SetConfig+0x5d0>
 800f45c:	2308      	movs	r3, #8
 800f45e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800f462:	e04b      	b.n	800f4fc <UART_SetConfig+0x5d0>
 800f464:	2310      	movs	r3, #16
 800f466:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800f46a:	e047      	b.n	800f4fc <UART_SetConfig+0x5d0>
 800f46c:	2320      	movs	r3, #32
 800f46e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800f472:	e043      	b.n	800f4fc <UART_SetConfig+0x5d0>
 800f474:	2340      	movs	r3, #64	; 0x40
 800f476:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800f47a:	e03f      	b.n	800f4fc <UART_SetConfig+0x5d0>
 800f47c:	2380      	movs	r3, #128	; 0x80
 800f47e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800f482:	bf00      	nop
 800f484:	e03a      	b.n	800f4fc <UART_SetConfig+0x5d0>
 800f486:	687b      	ldr	r3, [r7, #4]
 800f488:	681b      	ldr	r3, [r3, #0]
 800f48a:	4a43      	ldr	r2, [pc, #268]	; (800f598 <UART_SetConfig+0x66c>)
 800f48c:	4293      	cmp	r3, r2
 800f48e:	d132      	bne.n	800f4f6 <UART_SetConfig+0x5ca>
 800f490:	4b3e      	ldr	r3, [pc, #248]	; (800f58c <UART_SetConfig+0x660>)
 800f492:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800f494:	f003 0307 	and.w	r3, r3, #7
 800f498:	2b05      	cmp	r3, #5
 800f49a:	d827      	bhi.n	800f4ec <UART_SetConfig+0x5c0>
 800f49c:	a201      	add	r2, pc, #4	; (adr r2, 800f4a4 <UART_SetConfig+0x578>)
 800f49e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f4a2:	bf00      	nop
 800f4a4:	0800f4bd 	.word	0x0800f4bd
 800f4a8:	0800f4c5 	.word	0x0800f4c5
 800f4ac:	0800f4cd 	.word	0x0800f4cd
 800f4b0:	0800f4d5 	.word	0x0800f4d5
 800f4b4:	0800f4dd 	.word	0x0800f4dd
 800f4b8:	0800f4e5 	.word	0x0800f4e5
 800f4bc:	2302      	movs	r3, #2
 800f4be:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800f4c2:	e01b      	b.n	800f4fc <UART_SetConfig+0x5d0>
 800f4c4:	2304      	movs	r3, #4
 800f4c6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800f4ca:	e017      	b.n	800f4fc <UART_SetConfig+0x5d0>
 800f4cc:	2308      	movs	r3, #8
 800f4ce:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800f4d2:	e013      	b.n	800f4fc <UART_SetConfig+0x5d0>
 800f4d4:	2310      	movs	r3, #16
 800f4d6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800f4da:	e00f      	b.n	800f4fc <UART_SetConfig+0x5d0>
 800f4dc:	2320      	movs	r3, #32
 800f4de:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800f4e2:	e00b      	b.n	800f4fc <UART_SetConfig+0x5d0>
 800f4e4:	2340      	movs	r3, #64	; 0x40
 800f4e6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800f4ea:	e007      	b.n	800f4fc <UART_SetConfig+0x5d0>
 800f4ec:	2380      	movs	r3, #128	; 0x80
 800f4ee:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800f4f2:	bf00      	nop
 800f4f4:	e002      	b.n	800f4fc <UART_SetConfig+0x5d0>
 800f4f6:	2380      	movs	r3, #128	; 0x80
 800f4f8:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800f4fc:	687b      	ldr	r3, [r7, #4]
 800f4fe:	681b      	ldr	r3, [r3, #0]
 800f500:	4a25      	ldr	r2, [pc, #148]	; (800f598 <UART_SetConfig+0x66c>)
 800f502:	4293      	cmp	r3, r2
 800f504:	f040 80b8 	bne.w	800f678 <UART_SetConfig+0x74c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800f508:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800f50c:	2b08      	cmp	r3, #8
 800f50e:	d019      	beq.n	800f544 <UART_SetConfig+0x618>
 800f510:	2b08      	cmp	r3, #8
 800f512:	dc04      	bgt.n	800f51e <UART_SetConfig+0x5f2>
 800f514:	2b02      	cmp	r3, #2
 800f516:	d009      	beq.n	800f52c <UART_SetConfig+0x600>
 800f518:	2b04      	cmp	r3, #4
 800f51a:	d00b      	beq.n	800f534 <UART_SetConfig+0x608>
 800f51c:	e042      	b.n	800f5a4 <UART_SetConfig+0x678>
 800f51e:	2b20      	cmp	r3, #32
 800f520:	d02b      	beq.n	800f57a <UART_SetConfig+0x64e>
 800f522:	2b40      	cmp	r3, #64	; 0x40
 800f524:	d02c      	beq.n	800f580 <UART_SetConfig+0x654>
 800f526:	2b10      	cmp	r3, #16
 800f528:	d014      	beq.n	800f554 <UART_SetConfig+0x628>
 800f52a:	e03b      	b.n	800f5a4 <UART_SetConfig+0x678>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800f52c:	f7fb fad2 	bl	800aad4 <HAL_RCCEx_GetD3PCLK1Freq>
 800f530:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800f532:	e03d      	b.n	800f5b0 <UART_SetConfig+0x684>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800f534:	f107 0314 	add.w	r3, r7, #20
 800f538:	4618      	mov	r0, r3
 800f53a:	f7fb fae1 	bl	800ab00 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800f53e:	69bb      	ldr	r3, [r7, #24]
 800f540:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800f542:	e035      	b.n	800f5b0 <UART_SetConfig+0x684>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800f544:	f107 0308 	add.w	r3, r7, #8
 800f548:	4618      	mov	r0, r3
 800f54a:	f7fb fc25 	bl	800ad98 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800f54e:	68fb      	ldr	r3, [r7, #12]
 800f550:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800f552:	e02d      	b.n	800f5b0 <UART_SetConfig+0x684>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800f554:	4b0d      	ldr	r3, [pc, #52]	; (800f58c <UART_SetConfig+0x660>)
 800f556:	681b      	ldr	r3, [r3, #0]
 800f558:	f003 0320 	and.w	r3, r3, #32
 800f55c:	2b00      	cmp	r3, #0
 800f55e:	d009      	beq.n	800f574 <UART_SetConfig+0x648>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800f560:	4b0a      	ldr	r3, [pc, #40]	; (800f58c <UART_SetConfig+0x660>)
 800f562:	681b      	ldr	r3, [r3, #0]
 800f564:	08db      	lsrs	r3, r3, #3
 800f566:	f003 0303 	and.w	r3, r3, #3
 800f56a:	4a0c      	ldr	r2, [pc, #48]	; (800f59c <UART_SetConfig+0x670>)
 800f56c:	fa22 f303 	lsr.w	r3, r2, r3
 800f570:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800f572:	e01d      	b.n	800f5b0 <UART_SetConfig+0x684>
          pclk = (uint32_t) HSI_VALUE;
 800f574:	4b09      	ldr	r3, [pc, #36]	; (800f59c <UART_SetConfig+0x670>)
 800f576:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800f578:	e01a      	b.n	800f5b0 <UART_SetConfig+0x684>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800f57a:	4b09      	ldr	r3, [pc, #36]	; (800f5a0 <UART_SetConfig+0x674>)
 800f57c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800f57e:	e017      	b.n	800f5b0 <UART_SetConfig+0x684>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800f580:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800f584:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800f586:	e013      	b.n	800f5b0 <UART_SetConfig+0x684>
 800f588:	40011400 	.word	0x40011400
 800f58c:	58024400 	.word	0x58024400
 800f590:	40007800 	.word	0x40007800
 800f594:	40007c00 	.word	0x40007c00
 800f598:	58000c00 	.word	0x58000c00
 800f59c:	03d09000 	.word	0x03d09000
 800f5a0:	003d0900 	.word	0x003d0900
      default:
        pclk = 0U;
 800f5a4:	2300      	movs	r3, #0
 800f5a6:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 800f5a8:	2301      	movs	r3, #1
 800f5aa:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 800f5ae:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800f5b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f5b2:	2b00      	cmp	r3, #0
 800f5b4:	f000 824d 	beq.w	800fa52 <UART_SetConfig+0xb26>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800f5b8:	687b      	ldr	r3, [r7, #4]
 800f5ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f5bc:	4aad      	ldr	r2, [pc, #692]	; (800f874 <UART_SetConfig+0x948>)
 800f5be:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800f5c2:	461a      	mov	r2, r3
 800f5c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f5c6:	fbb3 f3f2 	udiv	r3, r3, r2
 800f5ca:	623b      	str	r3, [r7, #32]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800f5cc:	687b      	ldr	r3, [r7, #4]
 800f5ce:	685a      	ldr	r2, [r3, #4]
 800f5d0:	4613      	mov	r3, r2
 800f5d2:	005b      	lsls	r3, r3, #1
 800f5d4:	4413      	add	r3, r2
 800f5d6:	6a3a      	ldr	r2, [r7, #32]
 800f5d8:	429a      	cmp	r2, r3
 800f5da:	d305      	bcc.n	800f5e8 <UART_SetConfig+0x6bc>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800f5dc:	687b      	ldr	r3, [r7, #4]
 800f5de:	685b      	ldr	r3, [r3, #4]
 800f5e0:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800f5e2:	6a3a      	ldr	r2, [r7, #32]
 800f5e4:	429a      	cmp	r2, r3
 800f5e6:	d903      	bls.n	800f5f0 <UART_SetConfig+0x6c4>
      {
        ret = HAL_ERROR;
 800f5e8:	2301      	movs	r3, #1
 800f5ea:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 800f5ee:	e230      	b.n	800fa52 <UART_SetConfig+0xb26>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, (uint64_t)huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800f5f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f5f2:	4618      	mov	r0, r3
 800f5f4:	f04f 0100 	mov.w	r1, #0
 800f5f8:	687b      	ldr	r3, [r7, #4]
 800f5fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f5fc:	4a9d      	ldr	r2, [pc, #628]	; (800f874 <UART_SetConfig+0x948>)
 800f5fe:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800f602:	b29b      	uxth	r3, r3
 800f604:	f04f 0400 	mov.w	r4, #0
 800f608:	461a      	mov	r2, r3
 800f60a:	4623      	mov	r3, r4
 800f60c:	f7f0 fec0 	bl	8000390 <__aeabi_uldivmod>
 800f610:	4603      	mov	r3, r0
 800f612:	460c      	mov	r4, r1
 800f614:	4619      	mov	r1, r3
 800f616:	4622      	mov	r2, r4
 800f618:	f04f 0300 	mov.w	r3, #0
 800f61c:	f04f 0400 	mov.w	r4, #0
 800f620:	0214      	lsls	r4, r2, #8
 800f622:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 800f626:	020b      	lsls	r3, r1, #8
 800f628:	687a      	ldr	r2, [r7, #4]
 800f62a:	6852      	ldr	r2, [r2, #4]
 800f62c:	0852      	lsrs	r2, r2, #1
 800f62e:	4611      	mov	r1, r2
 800f630:	f04f 0200 	mov.w	r2, #0
 800f634:	eb13 0b01 	adds.w	fp, r3, r1
 800f638:	eb44 0c02 	adc.w	ip, r4, r2
 800f63c:	4658      	mov	r0, fp
 800f63e:	4661      	mov	r1, ip
 800f640:	687b      	ldr	r3, [r7, #4]
 800f642:	685b      	ldr	r3, [r3, #4]
 800f644:	f04f 0400 	mov.w	r4, #0
 800f648:	461a      	mov	r2, r3
 800f64a:	4623      	mov	r3, r4
 800f64c:	f7f0 fea0 	bl	8000390 <__aeabi_uldivmod>
 800f650:	4603      	mov	r3, r0
 800f652:	460c      	mov	r4, r1
 800f654:	62bb      	str	r3, [r7, #40]	; 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800f656:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f658:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800f65c:	d308      	bcc.n	800f670 <UART_SetConfig+0x744>
 800f65e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f660:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800f664:	d204      	bcs.n	800f670 <UART_SetConfig+0x744>
        {
          huart->Instance->BRR = usartdiv;
 800f666:	687b      	ldr	r3, [r7, #4]
 800f668:	681b      	ldr	r3, [r3, #0]
 800f66a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800f66c:	60da      	str	r2, [r3, #12]
 800f66e:	e1f0      	b.n	800fa52 <UART_SetConfig+0xb26>
        }
        else
        {
          ret = HAL_ERROR;
 800f670:	2301      	movs	r3, #1
 800f672:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 800f676:	e1ec      	b.n	800fa52 <UART_SetConfig+0xb26>
        }
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800f678:	687b      	ldr	r3, [r7, #4]
 800f67a:	69db      	ldr	r3, [r3, #28]
 800f67c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800f680:	f040 8100 	bne.w	800f884 <UART_SetConfig+0x958>
  {
    switch (clocksource)
 800f684:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800f688:	2b40      	cmp	r3, #64	; 0x40
 800f68a:	f200 80b7 	bhi.w	800f7fc <UART_SetConfig+0x8d0>
 800f68e:	a201      	add	r2, pc, #4	; (adr r2, 800f694 <UART_SetConfig+0x768>)
 800f690:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f694:	0800f799 	.word	0x0800f799
 800f698:	0800f7a1 	.word	0x0800f7a1
 800f69c:	0800f7fd 	.word	0x0800f7fd
 800f6a0:	0800f7fd 	.word	0x0800f7fd
 800f6a4:	0800f7a9 	.word	0x0800f7a9
 800f6a8:	0800f7fd 	.word	0x0800f7fd
 800f6ac:	0800f7fd 	.word	0x0800f7fd
 800f6b0:	0800f7fd 	.word	0x0800f7fd
 800f6b4:	0800f7b9 	.word	0x0800f7b9
 800f6b8:	0800f7fd 	.word	0x0800f7fd
 800f6bc:	0800f7fd 	.word	0x0800f7fd
 800f6c0:	0800f7fd 	.word	0x0800f7fd
 800f6c4:	0800f7fd 	.word	0x0800f7fd
 800f6c8:	0800f7fd 	.word	0x0800f7fd
 800f6cc:	0800f7fd 	.word	0x0800f7fd
 800f6d0:	0800f7fd 	.word	0x0800f7fd
 800f6d4:	0800f7c9 	.word	0x0800f7c9
 800f6d8:	0800f7fd 	.word	0x0800f7fd
 800f6dc:	0800f7fd 	.word	0x0800f7fd
 800f6e0:	0800f7fd 	.word	0x0800f7fd
 800f6e4:	0800f7fd 	.word	0x0800f7fd
 800f6e8:	0800f7fd 	.word	0x0800f7fd
 800f6ec:	0800f7fd 	.word	0x0800f7fd
 800f6f0:	0800f7fd 	.word	0x0800f7fd
 800f6f4:	0800f7fd 	.word	0x0800f7fd
 800f6f8:	0800f7fd 	.word	0x0800f7fd
 800f6fc:	0800f7fd 	.word	0x0800f7fd
 800f700:	0800f7fd 	.word	0x0800f7fd
 800f704:	0800f7fd 	.word	0x0800f7fd
 800f708:	0800f7fd 	.word	0x0800f7fd
 800f70c:	0800f7fd 	.word	0x0800f7fd
 800f710:	0800f7fd 	.word	0x0800f7fd
 800f714:	0800f7ef 	.word	0x0800f7ef
 800f718:	0800f7fd 	.word	0x0800f7fd
 800f71c:	0800f7fd 	.word	0x0800f7fd
 800f720:	0800f7fd 	.word	0x0800f7fd
 800f724:	0800f7fd 	.word	0x0800f7fd
 800f728:	0800f7fd 	.word	0x0800f7fd
 800f72c:	0800f7fd 	.word	0x0800f7fd
 800f730:	0800f7fd 	.word	0x0800f7fd
 800f734:	0800f7fd 	.word	0x0800f7fd
 800f738:	0800f7fd 	.word	0x0800f7fd
 800f73c:	0800f7fd 	.word	0x0800f7fd
 800f740:	0800f7fd 	.word	0x0800f7fd
 800f744:	0800f7fd 	.word	0x0800f7fd
 800f748:	0800f7fd 	.word	0x0800f7fd
 800f74c:	0800f7fd 	.word	0x0800f7fd
 800f750:	0800f7fd 	.word	0x0800f7fd
 800f754:	0800f7fd 	.word	0x0800f7fd
 800f758:	0800f7fd 	.word	0x0800f7fd
 800f75c:	0800f7fd 	.word	0x0800f7fd
 800f760:	0800f7fd 	.word	0x0800f7fd
 800f764:	0800f7fd 	.word	0x0800f7fd
 800f768:	0800f7fd 	.word	0x0800f7fd
 800f76c:	0800f7fd 	.word	0x0800f7fd
 800f770:	0800f7fd 	.word	0x0800f7fd
 800f774:	0800f7fd 	.word	0x0800f7fd
 800f778:	0800f7fd 	.word	0x0800f7fd
 800f77c:	0800f7fd 	.word	0x0800f7fd
 800f780:	0800f7fd 	.word	0x0800f7fd
 800f784:	0800f7fd 	.word	0x0800f7fd
 800f788:	0800f7fd 	.word	0x0800f7fd
 800f78c:	0800f7fd 	.word	0x0800f7fd
 800f790:	0800f7fd 	.word	0x0800f7fd
 800f794:	0800f7f5 	.word	0x0800f7f5
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800f798:	f7f9 ffee 	bl	8009778 <HAL_RCC_GetPCLK1Freq>
 800f79c:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800f79e:	e033      	b.n	800f808 <UART_SetConfig+0x8dc>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800f7a0:	f7fa f800 	bl	80097a4 <HAL_RCC_GetPCLK2Freq>
 800f7a4:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800f7a6:	e02f      	b.n	800f808 <UART_SetConfig+0x8dc>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800f7a8:	f107 0314 	add.w	r3, r7, #20
 800f7ac:	4618      	mov	r0, r3
 800f7ae:	f7fb f9a7 	bl	800ab00 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800f7b2:	69bb      	ldr	r3, [r7, #24]
 800f7b4:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800f7b6:	e027      	b.n	800f808 <UART_SetConfig+0x8dc>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800f7b8:	f107 0308 	add.w	r3, r7, #8
 800f7bc:	4618      	mov	r0, r3
 800f7be:	f7fb faeb 	bl	800ad98 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800f7c2:	68fb      	ldr	r3, [r7, #12]
 800f7c4:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800f7c6:	e01f      	b.n	800f808 <UART_SetConfig+0x8dc>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800f7c8:	4b2b      	ldr	r3, [pc, #172]	; (800f878 <UART_SetConfig+0x94c>)
 800f7ca:	681b      	ldr	r3, [r3, #0]
 800f7cc:	f003 0320 	and.w	r3, r3, #32
 800f7d0:	2b00      	cmp	r3, #0
 800f7d2:	d009      	beq.n	800f7e8 <UART_SetConfig+0x8bc>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800f7d4:	4b28      	ldr	r3, [pc, #160]	; (800f878 <UART_SetConfig+0x94c>)
 800f7d6:	681b      	ldr	r3, [r3, #0]
 800f7d8:	08db      	lsrs	r3, r3, #3
 800f7da:	f003 0303 	and.w	r3, r3, #3
 800f7de:	4a27      	ldr	r2, [pc, #156]	; (800f87c <UART_SetConfig+0x950>)
 800f7e0:	fa22 f303 	lsr.w	r3, r2, r3
 800f7e4:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800f7e6:	e00f      	b.n	800f808 <UART_SetConfig+0x8dc>
          pclk = (uint32_t) HSI_VALUE;
 800f7e8:	4b24      	ldr	r3, [pc, #144]	; (800f87c <UART_SetConfig+0x950>)
 800f7ea:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800f7ec:	e00c      	b.n	800f808 <UART_SetConfig+0x8dc>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800f7ee:	4b24      	ldr	r3, [pc, #144]	; (800f880 <UART_SetConfig+0x954>)
 800f7f0:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800f7f2:	e009      	b.n	800f808 <UART_SetConfig+0x8dc>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800f7f4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800f7f8:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800f7fa:	e005      	b.n	800f808 <UART_SetConfig+0x8dc>
      default:
        pclk = 0U;
 800f7fc:	2300      	movs	r3, #0
 800f7fe:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 800f800:	2301      	movs	r3, #1
 800f802:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 800f806:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800f808:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f80a:	2b00      	cmp	r3, #0
 800f80c:	f000 8121 	beq.w	800fa52 <UART_SetConfig+0xb26>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800f810:	687b      	ldr	r3, [r7, #4]
 800f812:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f814:	4a17      	ldr	r2, [pc, #92]	; (800f874 <UART_SetConfig+0x948>)
 800f816:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800f81a:	461a      	mov	r2, r3
 800f81c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f81e:	fbb3 f3f2 	udiv	r3, r3, r2
 800f822:	005a      	lsls	r2, r3, #1
 800f824:	687b      	ldr	r3, [r7, #4]
 800f826:	685b      	ldr	r3, [r3, #4]
 800f828:	085b      	lsrs	r3, r3, #1
 800f82a:	441a      	add	r2, r3
 800f82c:	687b      	ldr	r3, [r7, #4]
 800f82e:	685b      	ldr	r3, [r3, #4]
 800f830:	fbb2 f3f3 	udiv	r3, r2, r3
 800f834:	b29b      	uxth	r3, r3
 800f836:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800f838:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f83a:	2b0f      	cmp	r3, #15
 800f83c:	d916      	bls.n	800f86c <UART_SetConfig+0x940>
 800f83e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f840:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800f844:	d212      	bcs.n	800f86c <UART_SetConfig+0x940>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800f846:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f848:	b29b      	uxth	r3, r3
 800f84a:	f023 030f 	bic.w	r3, r3, #15
 800f84e:	84fb      	strh	r3, [r7, #38]	; 0x26
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800f850:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f852:	085b      	lsrs	r3, r3, #1
 800f854:	b29b      	uxth	r3, r3
 800f856:	f003 0307 	and.w	r3, r3, #7
 800f85a:	b29a      	uxth	r2, r3
 800f85c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800f85e:	4313      	orrs	r3, r2
 800f860:	84fb      	strh	r3, [r7, #38]	; 0x26
        huart->Instance->BRR = brrtemp;
 800f862:	687b      	ldr	r3, [r7, #4]
 800f864:	681b      	ldr	r3, [r3, #0]
 800f866:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800f868:	60da      	str	r2, [r3, #12]
 800f86a:	e0f2      	b.n	800fa52 <UART_SetConfig+0xb26>
      }
      else
      {
        ret = HAL_ERROR;
 800f86c:	2301      	movs	r3, #1
 800f86e:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 800f872:	e0ee      	b.n	800fa52 <UART_SetConfig+0xb26>
 800f874:	0801a03c 	.word	0x0801a03c
 800f878:	58024400 	.word	0x58024400
 800f87c:	03d09000 	.word	0x03d09000
 800f880:	003d0900 	.word	0x003d0900
      }
    }
  }
  else
  {
    switch (clocksource)
 800f884:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800f888:	2b40      	cmp	r3, #64	; 0x40
 800f88a:	f200 80b7 	bhi.w	800f9fc <UART_SetConfig+0xad0>
 800f88e:	a201      	add	r2, pc, #4	; (adr r2, 800f894 <UART_SetConfig+0x968>)
 800f890:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f894:	0800f999 	.word	0x0800f999
 800f898:	0800f9a1 	.word	0x0800f9a1
 800f89c:	0800f9fd 	.word	0x0800f9fd
 800f8a0:	0800f9fd 	.word	0x0800f9fd
 800f8a4:	0800f9a9 	.word	0x0800f9a9
 800f8a8:	0800f9fd 	.word	0x0800f9fd
 800f8ac:	0800f9fd 	.word	0x0800f9fd
 800f8b0:	0800f9fd 	.word	0x0800f9fd
 800f8b4:	0800f9b9 	.word	0x0800f9b9
 800f8b8:	0800f9fd 	.word	0x0800f9fd
 800f8bc:	0800f9fd 	.word	0x0800f9fd
 800f8c0:	0800f9fd 	.word	0x0800f9fd
 800f8c4:	0800f9fd 	.word	0x0800f9fd
 800f8c8:	0800f9fd 	.word	0x0800f9fd
 800f8cc:	0800f9fd 	.word	0x0800f9fd
 800f8d0:	0800f9fd 	.word	0x0800f9fd
 800f8d4:	0800f9c9 	.word	0x0800f9c9
 800f8d8:	0800f9fd 	.word	0x0800f9fd
 800f8dc:	0800f9fd 	.word	0x0800f9fd
 800f8e0:	0800f9fd 	.word	0x0800f9fd
 800f8e4:	0800f9fd 	.word	0x0800f9fd
 800f8e8:	0800f9fd 	.word	0x0800f9fd
 800f8ec:	0800f9fd 	.word	0x0800f9fd
 800f8f0:	0800f9fd 	.word	0x0800f9fd
 800f8f4:	0800f9fd 	.word	0x0800f9fd
 800f8f8:	0800f9fd 	.word	0x0800f9fd
 800f8fc:	0800f9fd 	.word	0x0800f9fd
 800f900:	0800f9fd 	.word	0x0800f9fd
 800f904:	0800f9fd 	.word	0x0800f9fd
 800f908:	0800f9fd 	.word	0x0800f9fd
 800f90c:	0800f9fd 	.word	0x0800f9fd
 800f910:	0800f9fd 	.word	0x0800f9fd
 800f914:	0800f9ef 	.word	0x0800f9ef
 800f918:	0800f9fd 	.word	0x0800f9fd
 800f91c:	0800f9fd 	.word	0x0800f9fd
 800f920:	0800f9fd 	.word	0x0800f9fd
 800f924:	0800f9fd 	.word	0x0800f9fd
 800f928:	0800f9fd 	.word	0x0800f9fd
 800f92c:	0800f9fd 	.word	0x0800f9fd
 800f930:	0800f9fd 	.word	0x0800f9fd
 800f934:	0800f9fd 	.word	0x0800f9fd
 800f938:	0800f9fd 	.word	0x0800f9fd
 800f93c:	0800f9fd 	.word	0x0800f9fd
 800f940:	0800f9fd 	.word	0x0800f9fd
 800f944:	0800f9fd 	.word	0x0800f9fd
 800f948:	0800f9fd 	.word	0x0800f9fd
 800f94c:	0800f9fd 	.word	0x0800f9fd
 800f950:	0800f9fd 	.word	0x0800f9fd
 800f954:	0800f9fd 	.word	0x0800f9fd
 800f958:	0800f9fd 	.word	0x0800f9fd
 800f95c:	0800f9fd 	.word	0x0800f9fd
 800f960:	0800f9fd 	.word	0x0800f9fd
 800f964:	0800f9fd 	.word	0x0800f9fd
 800f968:	0800f9fd 	.word	0x0800f9fd
 800f96c:	0800f9fd 	.word	0x0800f9fd
 800f970:	0800f9fd 	.word	0x0800f9fd
 800f974:	0800f9fd 	.word	0x0800f9fd
 800f978:	0800f9fd 	.word	0x0800f9fd
 800f97c:	0800f9fd 	.word	0x0800f9fd
 800f980:	0800f9fd 	.word	0x0800f9fd
 800f984:	0800f9fd 	.word	0x0800f9fd
 800f988:	0800f9fd 	.word	0x0800f9fd
 800f98c:	0800f9fd 	.word	0x0800f9fd
 800f990:	0800f9fd 	.word	0x0800f9fd
 800f994:	0800f9f5 	.word	0x0800f9f5
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800f998:	f7f9 feee 	bl	8009778 <HAL_RCC_GetPCLK1Freq>
 800f99c:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800f99e:	e033      	b.n	800fa08 <UART_SetConfig+0xadc>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800f9a0:	f7f9 ff00 	bl	80097a4 <HAL_RCC_GetPCLK2Freq>
 800f9a4:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800f9a6:	e02f      	b.n	800fa08 <UART_SetConfig+0xadc>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800f9a8:	f107 0314 	add.w	r3, r7, #20
 800f9ac:	4618      	mov	r0, r3
 800f9ae:	f7fb f8a7 	bl	800ab00 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800f9b2:	69bb      	ldr	r3, [r7, #24]
 800f9b4:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800f9b6:	e027      	b.n	800fa08 <UART_SetConfig+0xadc>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800f9b8:	f107 0308 	add.w	r3, r7, #8
 800f9bc:	4618      	mov	r0, r3
 800f9be:	f7fb f9eb 	bl	800ad98 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800f9c2:	68fb      	ldr	r3, [r7, #12]
 800f9c4:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800f9c6:	e01f      	b.n	800fa08 <UART_SetConfig+0xadc>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800f9c8:	4b2c      	ldr	r3, [pc, #176]	; (800fa7c <UART_SetConfig+0xb50>)
 800f9ca:	681b      	ldr	r3, [r3, #0]
 800f9cc:	f003 0320 	and.w	r3, r3, #32
 800f9d0:	2b00      	cmp	r3, #0
 800f9d2:	d009      	beq.n	800f9e8 <UART_SetConfig+0xabc>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800f9d4:	4b29      	ldr	r3, [pc, #164]	; (800fa7c <UART_SetConfig+0xb50>)
 800f9d6:	681b      	ldr	r3, [r3, #0]
 800f9d8:	08db      	lsrs	r3, r3, #3
 800f9da:	f003 0303 	and.w	r3, r3, #3
 800f9de:	4a28      	ldr	r2, [pc, #160]	; (800fa80 <UART_SetConfig+0xb54>)
 800f9e0:	fa22 f303 	lsr.w	r3, r2, r3
 800f9e4:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800f9e6:	e00f      	b.n	800fa08 <UART_SetConfig+0xadc>
          pclk = (uint32_t) HSI_VALUE;
 800f9e8:	4b25      	ldr	r3, [pc, #148]	; (800fa80 <UART_SetConfig+0xb54>)
 800f9ea:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800f9ec:	e00c      	b.n	800fa08 <UART_SetConfig+0xadc>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800f9ee:	4b25      	ldr	r3, [pc, #148]	; (800fa84 <UART_SetConfig+0xb58>)
 800f9f0:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800f9f2:	e009      	b.n	800fa08 <UART_SetConfig+0xadc>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800f9f4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800f9f8:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800f9fa:	e005      	b.n	800fa08 <UART_SetConfig+0xadc>
      default:
        pclk = 0U;
 800f9fc:	2300      	movs	r3, #0
 800f9fe:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 800fa00:	2301      	movs	r3, #1
 800fa02:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 800fa06:	bf00      	nop
    }

    if (pclk != 0U)
 800fa08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fa0a:	2b00      	cmp	r3, #0
 800fa0c:	d021      	beq.n	800fa52 <UART_SetConfig+0xb26>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800fa0e:	687b      	ldr	r3, [r7, #4]
 800fa10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fa12:	4a1d      	ldr	r2, [pc, #116]	; (800fa88 <UART_SetConfig+0xb5c>)
 800fa14:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800fa18:	461a      	mov	r2, r3
 800fa1a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fa1c:	fbb3 f2f2 	udiv	r2, r3, r2
 800fa20:	687b      	ldr	r3, [r7, #4]
 800fa22:	685b      	ldr	r3, [r3, #4]
 800fa24:	085b      	lsrs	r3, r3, #1
 800fa26:	441a      	add	r2, r3
 800fa28:	687b      	ldr	r3, [r7, #4]
 800fa2a:	685b      	ldr	r3, [r3, #4]
 800fa2c:	fbb2 f3f3 	udiv	r3, r2, r3
 800fa30:	b29b      	uxth	r3, r3
 800fa32:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800fa34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fa36:	2b0f      	cmp	r3, #15
 800fa38:	d908      	bls.n	800fa4c <UART_SetConfig+0xb20>
 800fa3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fa3c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800fa40:	d204      	bcs.n	800fa4c <UART_SetConfig+0xb20>
      {
        huart->Instance->BRR = usartdiv;
 800fa42:	687b      	ldr	r3, [r7, #4]
 800fa44:	681b      	ldr	r3, [r3, #0]
 800fa46:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800fa48:	60da      	str	r2, [r3, #12]
 800fa4a:	e002      	b.n	800fa52 <UART_SetConfig+0xb26>
      }
      else
      {
        ret = HAL_ERROR;
 800fa4c:	2301      	movs	r3, #1
 800fa4e:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800fa52:	687b      	ldr	r3, [r7, #4]
 800fa54:	2201      	movs	r2, #1
 800fa56:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800fa5a:	687b      	ldr	r3, [r7, #4]
 800fa5c:	2201      	movs	r2, #1
 800fa5e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800fa62:	687b      	ldr	r3, [r7, #4]
 800fa64:	2200      	movs	r2, #0
 800fa66:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->TxISR = NULL;
 800fa68:	687b      	ldr	r3, [r7, #4]
 800fa6a:	2200      	movs	r2, #0
 800fa6c:	671a      	str	r2, [r3, #112]	; 0x70

  return ret;
 800fa6e:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
}
 800fa72:	4618      	mov	r0, r3
 800fa74:	3738      	adds	r7, #56	; 0x38
 800fa76:	46bd      	mov	sp, r7
 800fa78:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}
 800fa7c:	58024400 	.word	0x58024400
 800fa80:	03d09000 	.word	0x03d09000
 800fa84:	003d0900 	.word	0x003d0900
 800fa88:	0801a03c 	.word	0x0801a03c

0800fa8c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800fa8c:	b480      	push	{r7}
 800fa8e:	b083      	sub	sp, #12
 800fa90:	af00      	add	r7, sp, #0
 800fa92:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800fa94:	687b      	ldr	r3, [r7, #4]
 800fa96:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800fa98:	f003 0301 	and.w	r3, r3, #1
 800fa9c:	2b00      	cmp	r3, #0
 800fa9e:	d00a      	beq.n	800fab6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800faa0:	687b      	ldr	r3, [r7, #4]
 800faa2:	681b      	ldr	r3, [r3, #0]
 800faa4:	685b      	ldr	r3, [r3, #4]
 800faa6:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800faaa:	687b      	ldr	r3, [r7, #4]
 800faac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800faae:	687b      	ldr	r3, [r7, #4]
 800fab0:	681b      	ldr	r3, [r3, #0]
 800fab2:	430a      	orrs	r2, r1
 800fab4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800fab6:	687b      	ldr	r3, [r7, #4]
 800fab8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800faba:	f003 0302 	and.w	r3, r3, #2
 800fabe:	2b00      	cmp	r3, #0
 800fac0:	d00a      	beq.n	800fad8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800fac2:	687b      	ldr	r3, [r7, #4]
 800fac4:	681b      	ldr	r3, [r3, #0]
 800fac6:	685b      	ldr	r3, [r3, #4]
 800fac8:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800facc:	687b      	ldr	r3, [r7, #4]
 800face:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800fad0:	687b      	ldr	r3, [r7, #4]
 800fad2:	681b      	ldr	r3, [r3, #0]
 800fad4:	430a      	orrs	r2, r1
 800fad6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800fad8:	687b      	ldr	r3, [r7, #4]
 800fada:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800fadc:	f003 0304 	and.w	r3, r3, #4
 800fae0:	2b00      	cmp	r3, #0
 800fae2:	d00a      	beq.n	800fafa <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800fae4:	687b      	ldr	r3, [r7, #4]
 800fae6:	681b      	ldr	r3, [r3, #0]
 800fae8:	685b      	ldr	r3, [r3, #4]
 800faea:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800faee:	687b      	ldr	r3, [r7, #4]
 800faf0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800faf2:	687b      	ldr	r3, [r7, #4]
 800faf4:	681b      	ldr	r3, [r3, #0]
 800faf6:	430a      	orrs	r2, r1
 800faf8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800fafa:	687b      	ldr	r3, [r7, #4]
 800fafc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800fafe:	f003 0308 	and.w	r3, r3, #8
 800fb02:	2b00      	cmp	r3, #0
 800fb04:	d00a      	beq.n	800fb1c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800fb06:	687b      	ldr	r3, [r7, #4]
 800fb08:	681b      	ldr	r3, [r3, #0]
 800fb0a:	685b      	ldr	r3, [r3, #4]
 800fb0c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800fb10:	687b      	ldr	r3, [r7, #4]
 800fb12:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800fb14:	687b      	ldr	r3, [r7, #4]
 800fb16:	681b      	ldr	r3, [r3, #0]
 800fb18:	430a      	orrs	r2, r1
 800fb1a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800fb1c:	687b      	ldr	r3, [r7, #4]
 800fb1e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800fb20:	f003 0310 	and.w	r3, r3, #16
 800fb24:	2b00      	cmp	r3, #0
 800fb26:	d00a      	beq.n	800fb3e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800fb28:	687b      	ldr	r3, [r7, #4]
 800fb2a:	681b      	ldr	r3, [r3, #0]
 800fb2c:	689b      	ldr	r3, [r3, #8]
 800fb2e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800fb32:	687b      	ldr	r3, [r7, #4]
 800fb34:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800fb36:	687b      	ldr	r3, [r7, #4]
 800fb38:	681b      	ldr	r3, [r3, #0]
 800fb3a:	430a      	orrs	r2, r1
 800fb3c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800fb3e:	687b      	ldr	r3, [r7, #4]
 800fb40:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800fb42:	f003 0320 	and.w	r3, r3, #32
 800fb46:	2b00      	cmp	r3, #0
 800fb48:	d00a      	beq.n	800fb60 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800fb4a:	687b      	ldr	r3, [r7, #4]
 800fb4c:	681b      	ldr	r3, [r3, #0]
 800fb4e:	689b      	ldr	r3, [r3, #8]
 800fb50:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800fb54:	687b      	ldr	r3, [r7, #4]
 800fb56:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800fb58:	687b      	ldr	r3, [r7, #4]
 800fb5a:	681b      	ldr	r3, [r3, #0]
 800fb5c:	430a      	orrs	r2, r1
 800fb5e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800fb60:	687b      	ldr	r3, [r7, #4]
 800fb62:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800fb64:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800fb68:	2b00      	cmp	r3, #0
 800fb6a:	d01a      	beq.n	800fba2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800fb6c:	687b      	ldr	r3, [r7, #4]
 800fb6e:	681b      	ldr	r3, [r3, #0]
 800fb70:	685b      	ldr	r3, [r3, #4]
 800fb72:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800fb76:	687b      	ldr	r3, [r7, #4]
 800fb78:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800fb7a:	687b      	ldr	r3, [r7, #4]
 800fb7c:	681b      	ldr	r3, [r3, #0]
 800fb7e:	430a      	orrs	r2, r1
 800fb80:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800fb82:	687b      	ldr	r3, [r7, #4]
 800fb84:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800fb86:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800fb8a:	d10a      	bne.n	800fba2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800fb8c:	687b      	ldr	r3, [r7, #4]
 800fb8e:	681b      	ldr	r3, [r3, #0]
 800fb90:	685b      	ldr	r3, [r3, #4]
 800fb92:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800fb96:	687b      	ldr	r3, [r7, #4]
 800fb98:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800fb9a:	687b      	ldr	r3, [r7, #4]
 800fb9c:	681b      	ldr	r3, [r3, #0]
 800fb9e:	430a      	orrs	r2, r1
 800fba0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800fba2:	687b      	ldr	r3, [r7, #4]
 800fba4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800fba6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800fbaa:	2b00      	cmp	r3, #0
 800fbac:	d00a      	beq.n	800fbc4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800fbae:	687b      	ldr	r3, [r7, #4]
 800fbb0:	681b      	ldr	r3, [r3, #0]
 800fbb2:	685b      	ldr	r3, [r3, #4]
 800fbb4:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800fbb8:	687b      	ldr	r3, [r7, #4]
 800fbba:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800fbbc:	687b      	ldr	r3, [r7, #4]
 800fbbe:	681b      	ldr	r3, [r3, #0]
 800fbc0:	430a      	orrs	r2, r1
 800fbc2:	605a      	str	r2, [r3, #4]
  }
}
 800fbc4:	bf00      	nop
 800fbc6:	370c      	adds	r7, #12
 800fbc8:	46bd      	mov	sp, r7
 800fbca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fbce:	4770      	bx	lr

0800fbd0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800fbd0:	b580      	push	{r7, lr}
 800fbd2:	b086      	sub	sp, #24
 800fbd4:	af02      	add	r7, sp, #8
 800fbd6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800fbd8:	687b      	ldr	r3, [r7, #4]
 800fbda:	2200      	movs	r2, #0
 800fbdc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 800fbe0:	f7f3 fd8a 	bl	80036f8 <HAL_GetTick>
 800fbe4:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800fbe6:	687b      	ldr	r3, [r7, #4]
 800fbe8:	681b      	ldr	r3, [r3, #0]
 800fbea:	681b      	ldr	r3, [r3, #0]
 800fbec:	f003 0308 	and.w	r3, r3, #8
 800fbf0:	2b08      	cmp	r3, #8
 800fbf2:	d10e      	bne.n	800fc12 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800fbf4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800fbf8:	9300      	str	r3, [sp, #0]
 800fbfa:	68fb      	ldr	r3, [r7, #12]
 800fbfc:	2200      	movs	r2, #0
 800fbfe:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800fc02:	6878      	ldr	r0, [r7, #4]
 800fc04:	f000 f82c 	bl	800fc60 <UART_WaitOnFlagUntilTimeout>
 800fc08:	4603      	mov	r3, r0
 800fc0a:	2b00      	cmp	r3, #0
 800fc0c:	d001      	beq.n	800fc12 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800fc0e:	2303      	movs	r3, #3
 800fc10:	e022      	b.n	800fc58 <UART_CheckIdleState+0x88>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800fc12:	687b      	ldr	r3, [r7, #4]
 800fc14:	681b      	ldr	r3, [r3, #0]
 800fc16:	681b      	ldr	r3, [r3, #0]
 800fc18:	f003 0304 	and.w	r3, r3, #4
 800fc1c:	2b04      	cmp	r3, #4
 800fc1e:	d10e      	bne.n	800fc3e <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800fc20:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800fc24:	9300      	str	r3, [sp, #0]
 800fc26:	68fb      	ldr	r3, [r7, #12]
 800fc28:	2200      	movs	r2, #0
 800fc2a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800fc2e:	6878      	ldr	r0, [r7, #4]
 800fc30:	f000 f816 	bl	800fc60 <UART_WaitOnFlagUntilTimeout>
 800fc34:	4603      	mov	r3, r0
 800fc36:	2b00      	cmp	r3, #0
 800fc38:	d001      	beq.n	800fc3e <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800fc3a:	2303      	movs	r3, #3
 800fc3c:	e00c      	b.n	800fc58 <UART_CheckIdleState+0x88>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800fc3e:	687b      	ldr	r3, [r7, #4]
 800fc40:	2220      	movs	r2, #32
 800fc42:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_READY;
 800fc46:	687b      	ldr	r3, [r7, #4]
 800fc48:	2220      	movs	r2, #32
 800fc4a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UNLOCK(huart);
 800fc4e:	687b      	ldr	r3, [r7, #4]
 800fc50:	2200      	movs	r2, #0
 800fc52:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 800fc56:	2300      	movs	r3, #0
}
 800fc58:	4618      	mov	r0, r3
 800fc5a:	3710      	adds	r7, #16
 800fc5c:	46bd      	mov	sp, r7
 800fc5e:	bd80      	pop	{r7, pc}

0800fc60 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800fc60:	b580      	push	{r7, lr}
 800fc62:	b084      	sub	sp, #16
 800fc64:	af00      	add	r7, sp, #0
 800fc66:	60f8      	str	r0, [r7, #12]
 800fc68:	60b9      	str	r1, [r7, #8]
 800fc6a:	603b      	str	r3, [r7, #0]
 800fc6c:	4613      	mov	r3, r2
 800fc6e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800fc70:	e062      	b.n	800fd38 <UART_WaitOnFlagUntilTimeout+0xd8>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800fc72:	69bb      	ldr	r3, [r7, #24]
 800fc74:	f1b3 3fff 	cmp.w	r3, #4294967295
 800fc78:	d05e      	beq.n	800fd38 <UART_WaitOnFlagUntilTimeout+0xd8>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800fc7a:	f7f3 fd3d 	bl	80036f8 <HAL_GetTick>
 800fc7e:	4602      	mov	r2, r0
 800fc80:	683b      	ldr	r3, [r7, #0]
 800fc82:	1ad3      	subs	r3, r2, r3
 800fc84:	69ba      	ldr	r2, [r7, #24]
 800fc86:	429a      	cmp	r2, r3
 800fc88:	d302      	bcc.n	800fc90 <UART_WaitOnFlagUntilTimeout+0x30>
 800fc8a:	69bb      	ldr	r3, [r7, #24]
 800fc8c:	2b00      	cmp	r3, #0
 800fc8e:	d11d      	bne.n	800fccc <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 800fc90:	68fb      	ldr	r3, [r7, #12]
 800fc92:	681b      	ldr	r3, [r3, #0]
 800fc94:	681a      	ldr	r2, [r3, #0]
 800fc96:	68fb      	ldr	r3, [r7, #12]
 800fc98:	681b      	ldr	r3, [r3, #0]
 800fc9a:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800fc9e:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800fca0:	68fb      	ldr	r3, [r7, #12]
 800fca2:	681b      	ldr	r3, [r3, #0]
 800fca4:	689a      	ldr	r2, [r3, #8]
 800fca6:	68fb      	ldr	r3, [r7, #12]
 800fca8:	681b      	ldr	r3, [r3, #0]
 800fcaa:	f022 0201 	bic.w	r2, r2, #1
 800fcae:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 800fcb0:	68fb      	ldr	r3, [r7, #12]
 800fcb2:	2220      	movs	r2, #32
 800fcb4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->RxState = HAL_UART_STATE_READY;
 800fcb8:	68fb      	ldr	r3, [r7, #12]
 800fcba:	2220      	movs	r2, #32
 800fcbc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        __HAL_UNLOCK(huart);
 800fcc0:	68fb      	ldr	r3, [r7, #12]
 800fcc2:	2200      	movs	r2, #0
 800fcc4:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 800fcc8:	2303      	movs	r3, #3
 800fcca:	e045      	b.n	800fd58 <UART_WaitOnFlagUntilTimeout+0xf8>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800fccc:	68fb      	ldr	r3, [r7, #12]
 800fcce:	681b      	ldr	r3, [r3, #0]
 800fcd0:	681b      	ldr	r3, [r3, #0]
 800fcd2:	f003 0304 	and.w	r3, r3, #4
 800fcd6:	2b00      	cmp	r3, #0
 800fcd8:	d02e      	beq.n	800fd38 <UART_WaitOnFlagUntilTimeout+0xd8>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800fcda:	68fb      	ldr	r3, [r7, #12]
 800fcdc:	681b      	ldr	r3, [r3, #0]
 800fcde:	69db      	ldr	r3, [r3, #28]
 800fce0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800fce4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800fce8:	d126      	bne.n	800fd38 <UART_WaitOnFlagUntilTimeout+0xd8>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800fcea:	68fb      	ldr	r3, [r7, #12]
 800fcec:	681b      	ldr	r3, [r3, #0]
 800fcee:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800fcf2:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 800fcf4:	68fb      	ldr	r3, [r7, #12]
 800fcf6:	681b      	ldr	r3, [r3, #0]
 800fcf8:	681a      	ldr	r2, [r3, #0]
 800fcfa:	68fb      	ldr	r3, [r7, #12]
 800fcfc:	681b      	ldr	r3, [r3, #0]
 800fcfe:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800fd02:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800fd04:	68fb      	ldr	r3, [r7, #12]
 800fd06:	681b      	ldr	r3, [r3, #0]
 800fd08:	689a      	ldr	r2, [r3, #8]
 800fd0a:	68fb      	ldr	r3, [r7, #12]
 800fd0c:	681b      	ldr	r3, [r3, #0]
 800fd0e:	f022 0201 	bic.w	r2, r2, #1
 800fd12:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 800fd14:	68fb      	ldr	r3, [r7, #12]
 800fd16:	2220      	movs	r2, #32
 800fd18:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->RxState = HAL_UART_STATE_READY;
 800fd1c:	68fb      	ldr	r3, [r7, #12]
 800fd1e:	2220      	movs	r2, #32
 800fd20:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800fd24:	68fb      	ldr	r3, [r7, #12]
 800fd26:	2220      	movs	r2, #32
 800fd28:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800fd2c:	68fb      	ldr	r3, [r7, #12]
 800fd2e:	2200      	movs	r2, #0
 800fd30:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

          return HAL_TIMEOUT;
 800fd34:	2303      	movs	r3, #3
 800fd36:	e00f      	b.n	800fd58 <UART_WaitOnFlagUntilTimeout+0xf8>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800fd38:	68fb      	ldr	r3, [r7, #12]
 800fd3a:	681b      	ldr	r3, [r3, #0]
 800fd3c:	69da      	ldr	r2, [r3, #28]
 800fd3e:	68bb      	ldr	r3, [r7, #8]
 800fd40:	4013      	ands	r3, r2
 800fd42:	68ba      	ldr	r2, [r7, #8]
 800fd44:	429a      	cmp	r2, r3
 800fd46:	bf0c      	ite	eq
 800fd48:	2301      	moveq	r3, #1
 800fd4a:	2300      	movne	r3, #0
 800fd4c:	b2db      	uxtb	r3, r3
 800fd4e:	461a      	mov	r2, r3
 800fd50:	79fb      	ldrb	r3, [r7, #7]
 800fd52:	429a      	cmp	r2, r3
 800fd54:	d08d      	beq.n	800fc72 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800fd56:	2300      	movs	r3, #0
}
 800fd58:	4618      	mov	r0, r3
 800fd5a:	3710      	adds	r7, #16
 800fd5c:	46bd      	mov	sp, r7
 800fd5e:	bd80      	pop	{r7, pc}

0800fd60 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800fd60:	b480      	push	{r7}
 800fd62:	b083      	sub	sp, #12
 800fd64:	af00      	add	r7, sp, #0
 800fd66:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 800fd68:	687b      	ldr	r3, [r7, #4]
 800fd6a:	681b      	ldr	r3, [r3, #0]
 800fd6c:	681a      	ldr	r2, [r3, #0]
 800fd6e:	687b      	ldr	r3, [r7, #4]
 800fd70:	681b      	ldr	r3, [r3, #0]
 800fd72:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 800fd76:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 800fd78:	687b      	ldr	r3, [r7, #4]
 800fd7a:	681b      	ldr	r3, [r3, #0]
 800fd7c:	689a      	ldr	r2, [r3, #8]
 800fd7e:	687b      	ldr	r3, [r7, #4]
 800fd80:	681b      	ldr	r3, [r3, #0]
 800fd82:	f422 0200 	bic.w	r2, r2, #8388608	; 0x800000
 800fd86:	609a      	str	r2, [r3, #8]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800fd88:	687b      	ldr	r3, [r7, #4]
 800fd8a:	2220      	movs	r2, #32
 800fd8c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
}
 800fd90:	bf00      	nop
 800fd92:	370c      	adds	r7, #12
 800fd94:	46bd      	mov	sp, r7
 800fd96:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd9a:	4770      	bx	lr

0800fd9c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800fd9c:	b480      	push	{r7}
 800fd9e:	b083      	sub	sp, #12
 800fda0:	af00      	add	r7, sp, #0
 800fda2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800fda4:	687b      	ldr	r3, [r7, #4]
 800fda6:	681b      	ldr	r3, [r3, #0]
 800fda8:	681a      	ldr	r2, [r3, #0]
 800fdaa:	687b      	ldr	r3, [r7, #4]
 800fdac:	681b      	ldr	r3, [r3, #0]
 800fdae:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800fdb2:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800fdb4:	687b      	ldr	r3, [r7, #4]
 800fdb6:	681b      	ldr	r3, [r3, #0]
 800fdb8:	6899      	ldr	r1, [r3, #8]
 800fdba:	687b      	ldr	r3, [r7, #4]
 800fdbc:	681a      	ldr	r2, [r3, #0]
 800fdbe:	4b08      	ldr	r3, [pc, #32]	; (800fde0 <UART_EndRxTransfer+0x44>)
 800fdc0:	400b      	ands	r3, r1
 800fdc2:	6093      	str	r3, [r2, #8]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800fdc4:	687b      	ldr	r3, [r7, #4]
 800fdc6:	2220      	movs	r2, #32
 800fdc8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800fdcc:	687b      	ldr	r3, [r7, #4]
 800fdce:	2200      	movs	r2, #0
 800fdd0:	66da      	str	r2, [r3, #108]	; 0x6c
}
 800fdd2:	bf00      	nop
 800fdd4:	370c      	adds	r7, #12
 800fdd6:	46bd      	mov	sp, r7
 800fdd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fddc:	4770      	bx	lr
 800fdde:	bf00      	nop
 800fde0:	effffffe 	.word	0xeffffffe

0800fde4 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800fde4:	b580      	push	{r7, lr}
 800fde6:	b084      	sub	sp, #16
 800fde8:	af00      	add	r7, sp, #0
 800fdea:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800fdec:	687b      	ldr	r3, [r7, #4]
 800fdee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800fdf0:	60fb      	str	r3, [r7, #12]

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 800fdf2:	687b      	ldr	r3, [r7, #4]
 800fdf4:	69db      	ldr	r3, [r3, #28]
 800fdf6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800fdfa:	d01f      	beq.n	800fe3c <UART_DMAReceiveCplt+0x58>
  {
    huart->RxXferCount = 0U;
 800fdfc:	68fb      	ldr	r3, [r7, #12]
 800fdfe:	2200      	movs	r2, #0
 800fe00:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800fe04:	68fb      	ldr	r3, [r7, #12]
 800fe06:	681b      	ldr	r3, [r3, #0]
 800fe08:	681a      	ldr	r2, [r3, #0]
 800fe0a:	68fb      	ldr	r3, [r7, #12]
 800fe0c:	681b      	ldr	r3, [r3, #0]
 800fe0e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800fe12:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800fe14:	68fb      	ldr	r3, [r7, #12]
 800fe16:	681b      	ldr	r3, [r3, #0]
 800fe18:	689a      	ldr	r2, [r3, #8]
 800fe1a:	68fb      	ldr	r3, [r7, #12]
 800fe1c:	681b      	ldr	r3, [r3, #0]
 800fe1e:	f022 0201 	bic.w	r2, r2, #1
 800fe22:	609a      	str	r2, [r3, #8]

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800fe24:	68fb      	ldr	r3, [r7, #12]
 800fe26:	681b      	ldr	r3, [r3, #0]
 800fe28:	689a      	ldr	r2, [r3, #8]
 800fe2a:	68fb      	ldr	r3, [r7, #12]
 800fe2c:	681b      	ldr	r3, [r3, #0]
 800fe2e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800fe32:	609a      	str	r2, [r3, #8]

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800fe34:	68fb      	ldr	r3, [r7, #12]
 800fe36:	2220      	movs	r2, #32
 800fe38:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx complete callback*/
  huart->RxCpltCallback(huart);
#else
  /*Call legacy weak Rx complete callback*/
  HAL_UART_RxCpltCallback(huart);
 800fe3c:	68f8      	ldr	r0, [r7, #12]
 800fe3e:	f7ff f861 	bl	800ef04 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800fe42:	bf00      	nop
 800fe44:	3710      	adds	r7, #16
 800fe46:	46bd      	mov	sp, r7
 800fe48:	bd80      	pop	{r7, pc}

0800fe4a <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800fe4a:	b580      	push	{r7, lr}
 800fe4c:	b084      	sub	sp, #16
 800fe4e:	af00      	add	r7, sp, #0
 800fe50:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800fe52:	687b      	ldr	r3, [r7, #4]
 800fe54:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800fe56:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx Half complete callback*/
  huart->RxHalfCpltCallback(huart);
#else
  /*Call legacy weak Rx Half complete callback*/
  HAL_UART_RxHalfCpltCallback(huart);
 800fe58:	68f8      	ldr	r0, [r7, #12]
 800fe5a:	f7f0 fe67 	bl	8000b2c <HAL_UART_RxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800fe5e:	bf00      	nop
 800fe60:	3710      	adds	r7, #16
 800fe62:	46bd      	mov	sp, r7
 800fe64:	bd80      	pop	{r7, pc}

0800fe66 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800fe66:	b580      	push	{r7, lr}
 800fe68:	b086      	sub	sp, #24
 800fe6a:	af00      	add	r7, sp, #0
 800fe6c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800fe6e:	687b      	ldr	r3, [r7, #4]
 800fe70:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800fe72:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800fe74:	697b      	ldr	r3, [r7, #20]
 800fe76:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800fe7a:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800fe7c:	697b      	ldr	r3, [r7, #20]
 800fe7e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800fe82:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800fe84:	697b      	ldr	r3, [r7, #20]
 800fe86:	681b      	ldr	r3, [r3, #0]
 800fe88:	689b      	ldr	r3, [r3, #8]
 800fe8a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800fe8e:	2b80      	cmp	r3, #128	; 0x80
 800fe90:	d109      	bne.n	800fea6 <UART_DMAError+0x40>
 800fe92:	693b      	ldr	r3, [r7, #16]
 800fe94:	2b21      	cmp	r3, #33	; 0x21
 800fe96:	d106      	bne.n	800fea6 <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 800fe98:	697b      	ldr	r3, [r7, #20]
 800fe9a:	2200      	movs	r2, #0
 800fe9c:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    UART_EndTxTransfer(huart);
 800fea0:	6978      	ldr	r0, [r7, #20]
 800fea2:	f7ff ff5d 	bl	800fd60 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800fea6:	697b      	ldr	r3, [r7, #20]
 800fea8:	681b      	ldr	r3, [r3, #0]
 800feaa:	689b      	ldr	r3, [r3, #8]
 800feac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800feb0:	2b40      	cmp	r3, #64	; 0x40
 800feb2:	d109      	bne.n	800fec8 <UART_DMAError+0x62>
 800feb4:	68fb      	ldr	r3, [r7, #12]
 800feb6:	2b22      	cmp	r3, #34	; 0x22
 800feb8:	d106      	bne.n	800fec8 <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 800feba:	697b      	ldr	r3, [r7, #20]
 800febc:	2200      	movs	r2, #0
 800febe:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    UART_EndRxTransfer(huart);
 800fec2:	6978      	ldr	r0, [r7, #20]
 800fec4:	f7ff ff6a 	bl	800fd9c <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800fec8:	697b      	ldr	r3, [r7, #20]
 800feca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800fece:	f043 0210 	orr.w	r2, r3, #16
 800fed2:	697b      	ldr	r3, [r7, #20]
 800fed4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800fed8:	6978      	ldr	r0, [r7, #20]
 800feda:	f7ff f81d 	bl	800ef18 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800fede:	bf00      	nop
 800fee0:	3718      	adds	r7, #24
 800fee2:	46bd      	mov	sp, r7
 800fee4:	bd80      	pop	{r7, pc}

0800fee6 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800fee6:	b480      	push	{r7}
 800fee8:	b085      	sub	sp, #20
 800feea:	af00      	add	r7, sp, #0
 800feec:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800feee:	687b      	ldr	r3, [r7, #4]
 800fef0:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 800fef4:	2b01      	cmp	r3, #1
 800fef6:	d101      	bne.n	800fefc <HAL_UARTEx_DisableFifoMode+0x16>
 800fef8:	2302      	movs	r3, #2
 800fefa:	e027      	b.n	800ff4c <HAL_UARTEx_DisableFifoMode+0x66>
 800fefc:	687b      	ldr	r3, [r7, #4]
 800fefe:	2201      	movs	r2, #1
 800ff00:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 800ff04:	687b      	ldr	r3, [r7, #4]
 800ff06:	2224      	movs	r2, #36	; 0x24
 800ff08:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800ff0c:	687b      	ldr	r3, [r7, #4]
 800ff0e:	681b      	ldr	r3, [r3, #0]
 800ff10:	681b      	ldr	r3, [r3, #0]
 800ff12:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800ff14:	687b      	ldr	r3, [r7, #4]
 800ff16:	681b      	ldr	r3, [r3, #0]
 800ff18:	681a      	ldr	r2, [r3, #0]
 800ff1a:	687b      	ldr	r3, [r7, #4]
 800ff1c:	681b      	ldr	r3, [r3, #0]
 800ff1e:	f022 0201 	bic.w	r2, r2, #1
 800ff22:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800ff24:	68fb      	ldr	r3, [r7, #12]
 800ff26:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800ff2a:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800ff2c:	687b      	ldr	r3, [r7, #4]
 800ff2e:	2200      	movs	r2, #0
 800ff30:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800ff32:	687b      	ldr	r3, [r7, #4]
 800ff34:	681b      	ldr	r3, [r3, #0]
 800ff36:	68fa      	ldr	r2, [r7, #12]
 800ff38:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800ff3a:	687b      	ldr	r3, [r7, #4]
 800ff3c:	2220      	movs	r2, #32
 800ff3e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800ff42:	687b      	ldr	r3, [r7, #4]
 800ff44:	2200      	movs	r2, #0
 800ff46:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 800ff4a:	2300      	movs	r3, #0
}
 800ff4c:	4618      	mov	r0, r3
 800ff4e:	3714      	adds	r7, #20
 800ff50:	46bd      	mov	sp, r7
 800ff52:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff56:	4770      	bx	lr

0800ff58 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800ff58:	b580      	push	{r7, lr}
 800ff5a:	b084      	sub	sp, #16
 800ff5c:	af00      	add	r7, sp, #0
 800ff5e:	6078      	str	r0, [r7, #4]
 800ff60:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800ff62:	687b      	ldr	r3, [r7, #4]
 800ff64:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 800ff68:	2b01      	cmp	r3, #1
 800ff6a:	d101      	bne.n	800ff70 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800ff6c:	2302      	movs	r3, #2
 800ff6e:	e02d      	b.n	800ffcc <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800ff70:	687b      	ldr	r3, [r7, #4]
 800ff72:	2201      	movs	r2, #1
 800ff74:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 800ff78:	687b      	ldr	r3, [r7, #4]
 800ff7a:	2224      	movs	r2, #36	; 0x24
 800ff7c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800ff80:	687b      	ldr	r3, [r7, #4]
 800ff82:	681b      	ldr	r3, [r3, #0]
 800ff84:	681b      	ldr	r3, [r3, #0]
 800ff86:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800ff88:	687b      	ldr	r3, [r7, #4]
 800ff8a:	681b      	ldr	r3, [r3, #0]
 800ff8c:	681a      	ldr	r2, [r3, #0]
 800ff8e:	687b      	ldr	r3, [r7, #4]
 800ff90:	681b      	ldr	r3, [r3, #0]
 800ff92:	f022 0201 	bic.w	r2, r2, #1
 800ff96:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800ff98:	687b      	ldr	r3, [r7, #4]
 800ff9a:	681b      	ldr	r3, [r3, #0]
 800ff9c:	689b      	ldr	r3, [r3, #8]
 800ff9e:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800ffa2:	687b      	ldr	r3, [r7, #4]
 800ffa4:	681b      	ldr	r3, [r3, #0]
 800ffa6:	683a      	ldr	r2, [r7, #0]
 800ffa8:	430a      	orrs	r2, r1
 800ffaa:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800ffac:	6878      	ldr	r0, [r7, #4]
 800ffae:	f000 f84f 	bl	8010050 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800ffb2:	687b      	ldr	r3, [r7, #4]
 800ffb4:	681b      	ldr	r3, [r3, #0]
 800ffb6:	68fa      	ldr	r2, [r7, #12]
 800ffb8:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800ffba:	687b      	ldr	r3, [r7, #4]
 800ffbc:	2220      	movs	r2, #32
 800ffbe:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800ffc2:	687b      	ldr	r3, [r7, #4]
 800ffc4:	2200      	movs	r2, #0
 800ffc6:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 800ffca:	2300      	movs	r3, #0
}
 800ffcc:	4618      	mov	r0, r3
 800ffce:	3710      	adds	r7, #16
 800ffd0:	46bd      	mov	sp, r7
 800ffd2:	bd80      	pop	{r7, pc}

0800ffd4 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800ffd4:	b580      	push	{r7, lr}
 800ffd6:	b084      	sub	sp, #16
 800ffd8:	af00      	add	r7, sp, #0
 800ffda:	6078      	str	r0, [r7, #4]
 800ffdc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800ffde:	687b      	ldr	r3, [r7, #4]
 800ffe0:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 800ffe4:	2b01      	cmp	r3, #1
 800ffe6:	d101      	bne.n	800ffec <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800ffe8:	2302      	movs	r3, #2
 800ffea:	e02d      	b.n	8010048 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800ffec:	687b      	ldr	r3, [r7, #4]
 800ffee:	2201      	movs	r2, #1
 800fff0:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 800fff4:	687b      	ldr	r3, [r7, #4]
 800fff6:	2224      	movs	r2, #36	; 0x24
 800fff8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800fffc:	687b      	ldr	r3, [r7, #4]
 800fffe:	681b      	ldr	r3, [r3, #0]
 8010000:	681b      	ldr	r3, [r3, #0]
 8010002:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8010004:	687b      	ldr	r3, [r7, #4]
 8010006:	681b      	ldr	r3, [r3, #0]
 8010008:	681a      	ldr	r2, [r3, #0]
 801000a:	687b      	ldr	r3, [r7, #4]
 801000c:	681b      	ldr	r3, [r3, #0]
 801000e:	f022 0201 	bic.w	r2, r2, #1
 8010012:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8010014:	687b      	ldr	r3, [r7, #4]
 8010016:	681b      	ldr	r3, [r3, #0]
 8010018:	689b      	ldr	r3, [r3, #8]
 801001a:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 801001e:	687b      	ldr	r3, [r7, #4]
 8010020:	681b      	ldr	r3, [r3, #0]
 8010022:	683a      	ldr	r2, [r7, #0]
 8010024:	430a      	orrs	r2, r1
 8010026:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8010028:	6878      	ldr	r0, [r7, #4]
 801002a:	f000 f811 	bl	8010050 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 801002e:	687b      	ldr	r3, [r7, #4]
 8010030:	681b      	ldr	r3, [r3, #0]
 8010032:	68fa      	ldr	r2, [r7, #12]
 8010034:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8010036:	687b      	ldr	r3, [r7, #4]
 8010038:	2220      	movs	r2, #32
 801003a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 801003e:	687b      	ldr	r3, [r7, #4]
 8010040:	2200      	movs	r2, #0
 8010042:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8010046:	2300      	movs	r3, #0
}
 8010048:	4618      	mov	r0, r3
 801004a:	3710      	adds	r7, #16
 801004c:	46bd      	mov	sp, r7
 801004e:	bd80      	pop	{r7, pc}

08010050 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8010050:	b480      	push	{r7}
 8010052:	b089      	sub	sp, #36	; 0x24
 8010054:	af00      	add	r7, sp, #0
 8010056:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_depth;
  uint8_t tx_fifo_depth;
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
 8010058:	4a2f      	ldr	r2, [pc, #188]	; (8010118 <UARTEx_SetNbDataToProcess+0xc8>)
 801005a:	f107 0314 	add.w	r3, r7, #20
 801005e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8010062:	e883 0003 	stmia.w	r3, {r0, r1}
  uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};
 8010066:	4a2d      	ldr	r2, [pc, #180]	; (801011c <UARTEx_SetNbDataToProcess+0xcc>)
 8010068:	f107 030c 	add.w	r3, r7, #12
 801006c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8010070:	e883 0003 	stmia.w	r3, {r0, r1}

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8010074:	687b      	ldr	r3, [r7, #4]
 8010076:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8010078:	2b00      	cmp	r3, #0
 801007a:	d108      	bne.n	801008e <UARTEx_SetNbDataToProcess+0x3e>
  {
    huart->NbTxDataToProcess = 1U;
 801007c:	687b      	ldr	r3, [r7, #4]
 801007e:	2201      	movs	r2, #1
 8010080:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8010084:	687b      	ldr	r3, [r7, #4]
 8010086:	2201      	movs	r2, #1
 8010088:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
  }
}
 801008c:	e03d      	b.n	801010a <UARTEx_SetNbDataToProcess+0xba>
    rx_fifo_depth = RX_FIFO_DEPTH;
 801008e:	2310      	movs	r3, #16
 8010090:	77fb      	strb	r3, [r7, #31]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8010092:	2310      	movs	r3, #16
 8010094:	77bb      	strb	r3, [r7, #30]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8010096:	687b      	ldr	r3, [r7, #4]
 8010098:	681b      	ldr	r3, [r3, #0]
 801009a:	689b      	ldr	r3, [r3, #8]
 801009c:	0e5b      	lsrs	r3, r3, #25
 801009e:	b2db      	uxtb	r3, r3
 80100a0:	f003 0307 	and.w	r3, r3, #7
 80100a4:	777b      	strb	r3, [r7, #29]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80100a6:	687b      	ldr	r3, [r7, #4]
 80100a8:	681b      	ldr	r3, [r3, #0]
 80100aa:	689b      	ldr	r3, [r3, #8]
 80100ac:	0f5b      	lsrs	r3, r3, #29
 80100ae:	b2db      	uxtb	r3, r3
 80100b0:	f003 0307 	and.w	r3, r3, #7
 80100b4:	773b      	strb	r3, [r7, #28]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
 80100b6:	7fbb      	ldrb	r3, [r7, #30]
 80100b8:	7f3a      	ldrb	r2, [r7, #28]
 80100ba:	f107 0120 	add.w	r1, r7, #32
 80100be:	440a      	add	r2, r1
 80100c0:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 80100c4:	fb02 f303 	mul.w	r3, r2, r3
 80100c8:	7f3a      	ldrb	r2, [r7, #28]
 80100ca:	f107 0120 	add.w	r1, r7, #32
 80100ce:	440a      	add	r2, r1
 80100d0:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 80100d4:	fb93 f3f2 	sdiv	r3, r3, r2
 80100d8:	b29a      	uxth	r2, r3
 80100da:	687b      	ldr	r3, [r7, #4]
 80100dc:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
 80100e0:	7ffb      	ldrb	r3, [r7, #31]
 80100e2:	7f7a      	ldrb	r2, [r7, #29]
 80100e4:	f107 0120 	add.w	r1, r7, #32
 80100e8:	440a      	add	r2, r1
 80100ea:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 80100ee:	fb02 f303 	mul.w	r3, r2, r3
 80100f2:	7f7a      	ldrb	r2, [r7, #29]
 80100f4:	f107 0120 	add.w	r1, r7, #32
 80100f8:	440a      	add	r2, r1
 80100fa:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 80100fe:	fb93 f3f2 	sdiv	r3, r3, r2
 8010102:	b29a      	uxth	r2, r3
 8010104:	687b      	ldr	r3, [r7, #4]
 8010106:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 801010a:	bf00      	nop
 801010c:	3724      	adds	r7, #36	; 0x24
 801010e:	46bd      	mov	sp, r7
 8010110:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010114:	4770      	bx	lr
 8010116:	bf00      	nop
 8010118:	08019f7c 	.word	0x08019f7c
 801011c:	08019f84 	.word	0x08019f84

08010120 <SDMMC_Init>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_Init(SDMMC_TypeDef *SDMMCx, SDMMC_InitTypeDef Init)
{
 8010120:	b084      	sub	sp, #16
 8010122:	b480      	push	{r7}
 8010124:	b085      	sub	sp, #20
 8010126:	af00      	add	r7, sp, #0
 8010128:	6078      	str	r0, [r7, #4]
 801012a:	f107 001c 	add.w	r0, r7, #28
 801012e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 8010132:	2300      	movs	r3, #0
 8010134:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(Init.ClockDiv));

  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 8010136:	69fa      	ldr	r2, [r7, #28]
             Init.ClockPowerSave      |\
 8010138:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 801013a:	431a      	orrs	r2, r3
             Init.BusWide             |\
 801013c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockPowerSave      |\
 801013e:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 8010140:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.BusWide             |\
 8010142:	431a      	orrs	r2, r3
             Init.ClockDiv
 8010144:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.HardwareFlowControl |\
 8010146:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 8010148:	68fa      	ldr	r2, [r7, #12]
 801014a:	4313      	orrs	r3, r2
 801014c:	60fb      	str	r3, [r7, #12]
             );

  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);
 801014e:	687b      	ldr	r3, [r7, #4]
 8010150:	685a      	ldr	r2, [r3, #4]
 8010152:	4b07      	ldr	r3, [pc, #28]	; (8010170 <SDMMC_Init+0x50>)
 8010154:	4013      	ands	r3, r2
 8010156:	68fa      	ldr	r2, [r7, #12]
 8010158:	431a      	orrs	r2, r3
 801015a:	687b      	ldr	r3, [r7, #4]
 801015c:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 801015e:	2300      	movs	r3, #0
}
 8010160:	4618      	mov	r0, r3
 8010162:	3714      	adds	r7, #20
 8010164:	46bd      	mov	sp, r7
 8010166:	f85d 7b04 	ldr.w	r7, [sp], #4
 801016a:	b004      	add	sp, #16
 801016c:	4770      	bx	lr
 801016e:	bf00      	nop
 8010170:	ffc02c00 	.word	0xffc02c00

08010174 <SDMMC_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling)
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_ReadFIFO(SDMMC_TypeDef *SDMMCx)
{
 8010174:	b480      	push	{r7}
 8010176:	b083      	sub	sp, #12
 8010178:	af00      	add	r7, sp, #0
 801017a:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */
  return (SDMMCx->FIFO);
 801017c:	687b      	ldr	r3, [r7, #4]
 801017e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 8010182:	4618      	mov	r0, r3
 8010184:	370c      	adds	r7, #12
 8010186:	46bd      	mov	sp, r7
 8010188:	f85d 7b04 	ldr.w	r7, [sp], #4
 801018c:	4770      	bx	lr

0801018e <SDMMC_WriteFIFO>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_WriteFIFO(SDMMC_TypeDef *SDMMCx, uint32_t *pWriteData)
{
 801018e:	b480      	push	{r7}
 8010190:	b083      	sub	sp, #12
 8010192:	af00      	add	r7, sp, #0
 8010194:	6078      	str	r0, [r7, #4]
 8010196:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */
  SDMMCx->FIFO = *pWriteData;
 8010198:	683b      	ldr	r3, [r7, #0]
 801019a:	681a      	ldr	r2, [r3, #0]
 801019c:	687b      	ldr	r3, [r7, #4]
 801019e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80101a2:	2300      	movs	r3, #0
}
 80101a4:	4618      	mov	r0, r3
 80101a6:	370c      	adds	r7, #12
 80101a8:	46bd      	mov	sp, r7
 80101aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80101ae:	4770      	bx	lr

080101b0 <SDMMC_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_PowerState_ON(SDMMC_TypeDef *SDMMCx)
{
 80101b0:	b480      	push	{r7}
 80101b2:	b083      	sub	sp, #12
 80101b4:	af00      	add	r7, sp, #0
 80101b6:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */
  SDMMCx->POWER |= SDMMC_POWER_PWRCTRL;
 80101b8:	687b      	ldr	r3, [r7, #4]
 80101ba:	681b      	ldr	r3, [r3, #0]
 80101bc:	f043 0203 	orr.w	r2, r3, #3
 80101c0:	687b      	ldr	r3, [r7, #4]
 80101c2:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 80101c4:	2300      	movs	r3, #0
}
 80101c6:	4618      	mov	r0, r3
 80101c8:	370c      	adds	r7, #12
 80101ca:	46bd      	mov	sp, r7
 80101cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80101d0:	4770      	bx	lr

080101d2 <SDMMC_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON
  */
uint32_t SDMMC_GetPowerState(SDMMC_TypeDef *SDMMCx)
{
 80101d2:	b480      	push	{r7}
 80101d4:	b083      	sub	sp, #12
 80101d6:	af00      	add	r7, sp, #0
 80101d8:	6078      	str	r0, [r7, #4]
  return (SDMMCx->POWER & SDMMC_POWER_PWRCTRL);
 80101da:	687b      	ldr	r3, [r7, #4]
 80101dc:	681b      	ldr	r3, [r3, #0]
 80101de:	f003 0303 	and.w	r3, r3, #3
}
 80101e2:	4618      	mov	r0, r3
 80101e4:	370c      	adds	r7, #12
 80101e6:	46bd      	mov	sp, r7
 80101e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80101ec:	4770      	bx	lr
	...

080101f0 <SDMMC_SendCommand>:
  * @param  Command: pointer to a SDMMC_CmdInitTypeDef structure that contains
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_SendCommand(SDMMC_TypeDef *SDMMCx, SDMMC_CmdInitTypeDef *Command)
{
 80101f0:	b480      	push	{r7}
 80101f2:	b085      	sub	sp, #20
 80101f4:	af00      	add	r7, sp, #0
 80101f6:	6078      	str	r0, [r7, #4]
 80101f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 80101fa:	2300      	movs	r3, #0
 80101fc:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_RESPONSE(Command->Response));
  assert_param(IS_SDMMC_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDMMC_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDMMCx->ARG = Command->Argument;
 80101fe:	683b      	ldr	r3, [r7, #0]
 8010200:	681a      	ldr	r2, [r3, #0]
 8010202:	687b      	ldr	r3, [r7, #4]
 8010204:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8010206:	683b      	ldr	r3, [r7, #0]
 8010208:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 801020a:	683b      	ldr	r3, [r7, #0]
 801020c:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 801020e:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 8010210:	683b      	ldr	r3, [r7, #0]
 8010212:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 8010214:	431a      	orrs	r2, r3
                       Command->CPSM);
 8010216:	683b      	ldr	r3, [r7, #0]
 8010218:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 801021a:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 801021c:	68fa      	ldr	r2, [r7, #12]
 801021e:	4313      	orrs	r3, r2
 8010220:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC CMD register */
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8010222:	687b      	ldr	r3, [r7, #4]
 8010224:	68da      	ldr	r2, [r3, #12]
 8010226:	4b06      	ldr	r3, [pc, #24]	; (8010240 <SDMMC_SendCommand+0x50>)
 8010228:	4013      	ands	r3, r2
 801022a:	68fa      	ldr	r2, [r7, #12]
 801022c:	431a      	orrs	r2, r3
 801022e:	687b      	ldr	r3, [r7, #4]
 8010230:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8010232:	2300      	movs	r3, #0
}
 8010234:	4618      	mov	r0, r3
 8010236:	3714      	adds	r7, #20
 8010238:	46bd      	mov	sp, r7
 801023a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801023e:	4770      	bx	lr
 8010240:	fffee0c0 	.word	0xfffee0c0

08010244 <SDMMC_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDMMC_GetCommandResponse(SDMMC_TypeDef *SDMMCx)
{
 8010244:	b480      	push	{r7}
 8010246:	b083      	sub	sp, #12
 8010248:	af00      	add	r7, sp, #0
 801024a:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDMMCx->RESPCMD);
 801024c:	687b      	ldr	r3, [r7, #4]
 801024e:	691b      	ldr	r3, [r3, #16]
 8010250:	b2db      	uxtb	r3, r3
}
 8010252:	4618      	mov	r0, r3
 8010254:	370c      	adds	r7, #12
 8010256:	46bd      	mov	sp, r7
 8010258:	f85d 7b04 	ldr.w	r7, [sp], #4
 801025c:	4770      	bx	lr

0801025e <SDMMC_GetResponse>:
  *            @arg SDMMC_RESP3: Response Register 3
  *            @arg SDMMC_RESP4: Response Register 4
  * @retval The Corresponding response register value
  */
uint32_t SDMMC_GetResponse(SDMMC_TypeDef *SDMMCx, uint32_t Response)
{
 801025e:	b480      	push	{r7}
 8010260:	b085      	sub	sp, #20
 8010262:	af00      	add	r7, sp, #0
 8010264:	6078      	str	r0, [r7, #4]
 8010266:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDMMC_RESP(Response));

  /* Get the response */
  tmp = (uint32_t)(&(SDMMCx->RESP1)) + Response;
 8010268:	687b      	ldr	r3, [r7, #4]
 801026a:	3314      	adds	r3, #20
 801026c:	461a      	mov	r2, r3
 801026e:	683b      	ldr	r3, [r7, #0]
 8010270:	4413      	add	r3, r2
 8010272:	60fb      	str	r3, [r7, #12]

  return (*(__IO uint32_t *) tmp);
 8010274:	68fb      	ldr	r3, [r7, #12]
 8010276:	681b      	ldr	r3, [r3, #0]
}
 8010278:	4618      	mov	r0, r3
 801027a:	3714      	adds	r7, #20
 801027c:	46bd      	mov	sp, r7
 801027e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010282:	4770      	bx	lr

08010284 <SDMMC_ConfigData>:
  * @param  Data : pointer to a SDMMC_DataInitTypeDef structure
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_ConfigData(SDMMC_TypeDef *SDMMCx, SDMMC_DataInitTypeDef* Data)
{
 8010284:	b480      	push	{r7}
 8010286:	b085      	sub	sp, #20
 8010288:	af00      	add	r7, sp, #0
 801028a:	6078      	str	r0, [r7, #4]
 801028c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 801028e:	2300      	movs	r3, #0
 8010290:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDMMC_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDMMC_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDMMCx->DTIMER = Data->DataTimeOut;
 8010292:	683b      	ldr	r3, [r7, #0]
 8010294:	681a      	ldr	r2, [r3, #0]
 8010296:	687b      	ldr	r3, [r7, #4]
 8010298:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDMMCx->DLEN = Data->DataLength;
 801029a:	683b      	ldr	r3, [r7, #0]
 801029c:	685a      	ldr	r2, [r3, #4]
 801029e:	687b      	ldr	r3, [r7, #4]
 80102a0:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 80102a2:	683b      	ldr	r3, [r7, #0]
 80102a4:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 80102a6:	683b      	ldr	r3, [r7, #0]
 80102a8:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 80102aa:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 80102ac:	683b      	ldr	r3, [r7, #0]
 80102ae:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 80102b0:	431a      	orrs	r2, r3
                       Data->DPSM);
 80102b2:	683b      	ldr	r3, [r7, #0]
 80102b4:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 80102b6:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 80102b8:	68fa      	ldr	r2, [r7, #12]
 80102ba:	4313      	orrs	r3, r2
 80102bc:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 80102be:	687b      	ldr	r3, [r7, #4]
 80102c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80102c2:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80102c6:	68fb      	ldr	r3, [r7, #12]
 80102c8:	431a      	orrs	r2, r3
 80102ca:	687b      	ldr	r3, [r7, #4]
 80102cc:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 80102ce:	2300      	movs	r3, #0

}
 80102d0:	4618      	mov	r0, r3
 80102d2:	3714      	adds	r7, #20
 80102d4:	46bd      	mov	sp, r7
 80102d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80102da:	4770      	bx	lr

080102dc <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Lenght command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDMMC_TypeDef *SDMMCx, uint32_t BlockSize)
{
 80102dc:	b580      	push	{r7, lr}
 80102de:	b088      	sub	sp, #32
 80102e0:	af00      	add	r7, sp, #0
 80102e2:	6078      	str	r0, [r7, #4]
 80102e4:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 80102e6:	683b      	ldr	r3, [r7, #0]
 80102e8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 80102ea:	2310      	movs	r3, #16
 80102ec:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80102ee:	f44f 7380 	mov.w	r3, #256	; 0x100
 80102f2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80102f4:	2300      	movs	r3, #0
 80102f6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80102f8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80102fc:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80102fe:	f107 0308 	add.w	r3, r7, #8
 8010302:	4619      	mov	r1, r3
 8010304:	6878      	ldr	r0, [r7, #4]
 8010306:	f7ff ff73 	bl	80101f0 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SET_BLOCKLEN, SDMMC_CMDTIMEOUT);
 801030a:	f241 3288 	movw	r2, #5000	; 0x1388
 801030e:	2110      	movs	r1, #16
 8010310:	6878      	ldr	r0, [r7, #4]
 8010312:	f000 faaf 	bl	8010874 <SDMMC_GetCmdResp1>
 8010316:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8010318:	69fb      	ldr	r3, [r7, #28]
}
 801031a:	4618      	mov	r0, r3
 801031c:	3720      	adds	r7, #32
 801031e:	46bd      	mov	sp, r7
 8010320:	bd80      	pop	{r7, pc}

08010322 <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 8010322:	b580      	push	{r7, lr}
 8010324:	b088      	sub	sp, #32
 8010326:	af00      	add	r7, sp, #0
 8010328:	6078      	str	r0, [r7, #4]
 801032a:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 801032c:	683b      	ldr	r3, [r7, #0]
 801032e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 8010330:	2311      	movs	r3, #17
 8010332:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8010334:	f44f 7380 	mov.w	r3, #256	; 0x100
 8010338:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 801033a:	2300      	movs	r3, #0
 801033c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 801033e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8010342:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8010344:	f107 0308 	add.w	r3, r7, #8
 8010348:	4619      	mov	r1, r3
 801034a:	6878      	ldr	r0, [r7, #4]
 801034c:	f7ff ff50 	bl	80101f0 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 8010350:	f241 3288 	movw	r2, #5000	; 0x1388
 8010354:	2111      	movs	r1, #17
 8010356:	6878      	ldr	r0, [r7, #4]
 8010358:	f000 fa8c 	bl	8010874 <SDMMC_GetCmdResp1>
 801035c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 801035e:	69fb      	ldr	r3, [r7, #28]
}
 8010360:	4618      	mov	r0, r3
 8010362:	3720      	adds	r7, #32
 8010364:	46bd      	mov	sp, r7
 8010366:	bd80      	pop	{r7, pc}

08010368 <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 8010368:	b580      	push	{r7, lr}
 801036a:	b088      	sub	sp, #32
 801036c:	af00      	add	r7, sp, #0
 801036e:	6078      	str	r0, [r7, #4]
 8010370:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8010372:	683b      	ldr	r3, [r7, #0]
 8010374:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 8010376:	2312      	movs	r3, #18
 8010378:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 801037a:	f44f 7380 	mov.w	r3, #256	; 0x100
 801037e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8010380:	2300      	movs	r3, #0
 8010382:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8010384:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8010388:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 801038a:	f107 0308 	add.w	r3, r7, #8
 801038e:	4619      	mov	r1, r3
 8010390:	6878      	ldr	r0, [r7, #4]
 8010392:	f7ff ff2d 	bl	80101f0 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 8010396:	f241 3288 	movw	r2, #5000	; 0x1388
 801039a:	2112      	movs	r1, #18
 801039c:	6878      	ldr	r0, [r7, #4]
 801039e:	f000 fa69 	bl	8010874 <SDMMC_GetCmdResp1>
 80103a2:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80103a4:	69fb      	ldr	r3, [r7, #28]
}
 80103a6:	4618      	mov	r0, r3
 80103a8:	3720      	adds	r7, #32
 80103aa:	46bd      	mov	sp, r7
 80103ac:	bd80      	pop	{r7, pc}

080103ae <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 80103ae:	b580      	push	{r7, lr}
 80103b0:	b088      	sub	sp, #32
 80103b2:	af00      	add	r7, sp, #0
 80103b4:	6078      	str	r0, [r7, #4]
 80103b6:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 80103b8:	683b      	ldr	r3, [r7, #0]
 80103ba:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 80103bc:	2318      	movs	r3, #24
 80103be:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80103c0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80103c4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80103c6:	2300      	movs	r3, #0
 80103c8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80103ca:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80103ce:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80103d0:	f107 0308 	add.w	r3, r7, #8
 80103d4:	4619      	mov	r1, r3
 80103d6:	6878      	ldr	r0, [r7, #4]
 80103d8:	f7ff ff0a 	bl	80101f0 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 80103dc:	f241 3288 	movw	r2, #5000	; 0x1388
 80103e0:	2118      	movs	r1, #24
 80103e2:	6878      	ldr	r0, [r7, #4]
 80103e4:	f000 fa46 	bl	8010874 <SDMMC_GetCmdResp1>
 80103e8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80103ea:	69fb      	ldr	r3, [r7, #28]
}
 80103ec:	4618      	mov	r0, r3
 80103ee:	3720      	adds	r7, #32
 80103f0:	46bd      	mov	sp, r7
 80103f2:	bd80      	pop	{r7, pc}

080103f4 <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 80103f4:	b580      	push	{r7, lr}
 80103f6:	b088      	sub	sp, #32
 80103f8:	af00      	add	r7, sp, #0
 80103fa:	6078      	str	r0, [r7, #4]
 80103fc:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 80103fe:	683b      	ldr	r3, [r7, #0]
 8010400:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 8010402:	2319      	movs	r3, #25
 8010404:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8010406:	f44f 7380 	mov.w	r3, #256	; 0x100
 801040a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 801040c:	2300      	movs	r3, #0
 801040e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8010410:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8010414:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8010416:	f107 0308 	add.w	r3, r7, #8
 801041a:	4619      	mov	r1, r3
 801041c:	6878      	ldr	r0, [r7, #4]
 801041e:	f7ff fee7 	bl	80101f0 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 8010422:	f241 3288 	movw	r2, #5000	; 0x1388
 8010426:	2119      	movs	r1, #25
 8010428:	6878      	ldr	r0, [r7, #4]
 801042a:	f000 fa23 	bl	8010874 <SDMMC_GetCmdResp1>
 801042e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8010430:	69fb      	ldr	r3, [r7, #28]
}
 8010432:	4618      	mov	r0, r3
 8010434:	3720      	adds	r7, #32
 8010436:	46bd      	mov	sp, r7
 8010438:	bd80      	pop	{r7, pc}
	...

0801043c <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDMMC_TypeDef *SDMMCx)
{
 801043c:	b580      	push	{r7, lr}
 801043e:	b088      	sub	sp, #32
 8010440:	af00      	add	r7, sp, #0
 8010442:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 8010444:	2300      	movs	r3, #0
 8010446:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 8010448:	230c      	movs	r3, #12
 801044a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 801044c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8010450:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8010452:	2300      	movs	r3, #0
 8010454:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8010456:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 801045a:	61bb      	str	r3, [r7, #24]

  __SDMMC_CMDSTOP_ENABLE(SDMMCx);
 801045c:	687b      	ldr	r3, [r7, #4]
 801045e:	68db      	ldr	r3, [r3, #12]
 8010460:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8010464:	687b      	ldr	r3, [r7, #4]
 8010466:	60da      	str	r2, [r3, #12]
  __SDMMC_CMDTRANS_DISABLE(SDMMCx);
 8010468:	687b      	ldr	r3, [r7, #4]
 801046a:	68db      	ldr	r3, [r3, #12]
 801046c:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8010470:	687b      	ldr	r3, [r7, #4]
 8010472:	60da      	str	r2, [r3, #12]

  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8010474:	f107 0308 	add.w	r3, r7, #8
 8010478:	4619      	mov	r1, r3
 801047a:	6878      	ldr	r0, [r7, #4]
 801047c:	f7ff feb8 	bl	80101f0 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_STOP_TRANSMISSION, SDMMC_STOPTRANSFERTIMEOUT);
 8010480:	4a0b      	ldr	r2, [pc, #44]	; (80104b0 <SDMMC_CmdStopTransfer+0x74>)
 8010482:	210c      	movs	r1, #12
 8010484:	6878      	ldr	r0, [r7, #4]
 8010486:	f000 f9f5 	bl	8010874 <SDMMC_GetCmdResp1>
 801048a:	61f8      	str	r0, [r7, #28]

  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 801048c:	687b      	ldr	r3, [r7, #4]
 801048e:	68db      	ldr	r3, [r3, #12]
 8010490:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8010494:	687b      	ldr	r3, [r7, #4]
 8010496:	60da      	str	r2, [r3, #12]

  /* Ignore Address Out Of Range Error, Not relevant at end of memory */
  if (errorstate == SDMMC_ERROR_ADDR_OUT_OF_RANGE)
 8010498:	69fb      	ldr	r3, [r7, #28]
 801049a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 801049e:	d101      	bne.n	80104a4 <SDMMC_CmdStopTransfer+0x68>
  {
    errorstate = SDMMC_ERROR_NONE;
 80104a0:	2300      	movs	r3, #0
 80104a2:	61fb      	str	r3, [r7, #28]
  }

  return errorstate;
 80104a4:	69fb      	ldr	r3, [r7, #28]
}
 80104a6:	4618      	mov	r0, r3
 80104a8:	3720      	adds	r7, #32
 80104aa:	46bd      	mov	sp, r7
 80104ac:	bd80      	pop	{r7, pc}
 80104ae:	bf00      	nop
 80104b0:	05f5e100 	.word	0x05f5e100

080104b4 <SDMMC_CmdSelDesel>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  addr: Address of the card to be selected
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDMMC_TypeDef *SDMMCx, uint64_t Addr)
{
 80104b4:	b580      	push	{r7, lr}
 80104b6:	b08a      	sub	sp, #40	; 0x28
 80104b8:	af00      	add	r7, sp, #0
 80104ba:	60f8      	str	r0, [r7, #12]
 80104bc:	e9c7 2300 	strd	r2, r3, [r7]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 80104c0:	683b      	ldr	r3, [r7, #0]
 80104c2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 80104c4:	2307      	movs	r3, #7
 80104c6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80104c8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80104cc:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80104ce:	2300      	movs	r3, #0
 80104d0:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80104d2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80104d6:	623b      	str	r3, [r7, #32]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80104d8:	f107 0310 	add.w	r3, r7, #16
 80104dc:	4619      	mov	r1, r3
 80104de:	68f8      	ldr	r0, [r7, #12]
 80104e0:	f7ff fe86 	bl	80101f0 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEL_DESEL_CARD, SDMMC_CMDTIMEOUT);
 80104e4:	f241 3288 	movw	r2, #5000	; 0x1388
 80104e8:	2107      	movs	r1, #7
 80104ea:	68f8      	ldr	r0, [r7, #12]
 80104ec:	f000 f9c2 	bl	8010874 <SDMMC_GetCmdResp1>
 80104f0:	6278      	str	r0, [r7, #36]	; 0x24

  return errorstate;
 80104f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80104f4:	4618      	mov	r0, r3
 80104f6:	3728      	adds	r7, #40	; 0x28
 80104f8:	46bd      	mov	sp, r7
 80104fa:	bd80      	pop	{r7, pc}

080104fc <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDMMC_TypeDef *SDMMCx)
{
 80104fc:	b580      	push	{r7, lr}
 80104fe:	b088      	sub	sp, #32
 8010500:	af00      	add	r7, sp, #0
 8010502:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0U;
 8010504:	2300      	movs	r3, #0
 8010506:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 8010508:	2300      	movs	r3, #0
 801050a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_NO;
 801050c:	2300      	movs	r3, #0
 801050e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8010510:	2300      	movs	r3, #0
 8010512:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8010514:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8010518:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 801051a:	f107 0308 	add.w	r3, r7, #8
 801051e:	4619      	mov	r1, r3
 8010520:	6878      	ldr	r0, [r7, #4]
 8010522:	f7ff fe65 	bl	80101f0 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDMMCx);
 8010526:	6878      	ldr	r0, [r7, #4]
 8010528:	f000 f976 	bl	8010818 <SDMMC_GetCmdError>
 801052c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 801052e:	69fb      	ldr	r3, [r7, #28]
}
 8010530:	4618      	mov	r0, r3
 8010532:	3720      	adds	r7, #32
 8010534:	46bd      	mov	sp, r7
 8010536:	bd80      	pop	{r7, pc}

08010538 <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDMMC_TypeDef *SDMMCx)
{
 8010538:	b580      	push	{r7, lr}
 801053a:	b088      	sub	sp, #32
 801053c:	af00      	add	r7, sp, #0
 801053e:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 8010540:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 8010544:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 8010546:	2308      	movs	r3, #8
 8010548:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 801054a:	f44f 7380 	mov.w	r3, #256	; 0x100
 801054e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8010550:	2300      	movs	r3, #0
 8010552:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8010554:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8010558:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 801055a:	f107 0308 	add.w	r3, r7, #8
 801055e:	4619      	mov	r1, r3
 8010560:	6878      	ldr	r0, [r7, #4]
 8010562:	f7ff fe45 	bl	80101f0 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDMMCx);
 8010566:	6878      	ldr	r0, [r7, #4]
 8010568:	f000 fb78 	bl	8010c5c <SDMMC_GetCmdResp7>
 801056c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 801056e:	69fb      	ldr	r3, [r7, #28]
}
 8010570:	4618      	mov	r0, r3
 8010572:	3720      	adds	r7, #32
 8010574:	46bd      	mov	sp, r7
 8010576:	bd80      	pop	{r7, pc}

08010578 <SDMMC_CmdAppCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8010578:	b580      	push	{r7, lr}
 801057a:	b088      	sub	sp, #32
 801057c:	af00      	add	r7, sp, #0
 801057e:	6078      	str	r0, [r7, #4]
 8010580:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 8010582:	683b      	ldr	r3, [r7, #0]
 8010584:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 8010586:	2337      	movs	r3, #55	; 0x37
 8010588:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 801058a:	f44f 7380 	mov.w	r3, #256	; 0x100
 801058e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8010590:	2300      	movs	r3, #0
 8010592:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8010594:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8010598:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 801059a:	f107 0308 	add.w	r3, r7, #8
 801059e:	4619      	mov	r1, r3
 80105a0:	6878      	ldr	r0, [r7, #4]
 80105a2:	f7ff fe25 	bl	80101f0 <SDMMC_SendCommand>

  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_CMD, SDMMC_CMDTIMEOUT);
 80105a6:	f241 3288 	movw	r2, #5000	; 0x1388
 80105aa:	2137      	movs	r1, #55	; 0x37
 80105ac:	6878      	ldr	r0, [r7, #4]
 80105ae:	f000 f961 	bl	8010874 <SDMMC_GetCmdResp1>
 80105b2:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80105b4:	69fb      	ldr	r3, [r7, #28]
}
 80105b6:	4618      	mov	r0, r3
 80105b8:	3720      	adds	r7, #32
 80105ba:	46bd      	mov	sp, r7
 80105bc:	bd80      	pop	{r7, pc}

080105be <SDMMC_CmdAppOperCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 80105be:	b580      	push	{r7, lr}
 80105c0:	b088      	sub	sp, #32
 80105c2:	af00      	add	r7, sp, #0
 80105c4:	6078      	str	r0, [r7, #4]
 80105c6:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = Argument;
 80105c8:	683b      	ldr	r3, [r7, #0]
 80105ca:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 80105cc:	2329      	movs	r3, #41	; 0x29
 80105ce:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80105d0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80105d4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80105d6:	2300      	movs	r3, #0
 80105d8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80105da:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80105de:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80105e0:	f107 0308 	add.w	r3, r7, #8
 80105e4:	4619      	mov	r1, r3
 80105e6:	6878      	ldr	r0, [r7, #4]
 80105e8:	f7ff fe02 	bl	80101f0 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDMMCx);
 80105ec:	6878      	ldr	r0, [r7, #4]
 80105ee:	f000 fa7d 	bl	8010aec <SDMMC_GetCmdResp3>
 80105f2:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80105f4:	69fb      	ldr	r3, [r7, #28]
}
 80105f6:	4618      	mov	r0, r3
 80105f8:	3720      	adds	r7, #32
 80105fa:	46bd      	mov	sp, r7
 80105fc:	bd80      	pop	{r7, pc}

080105fe <SDMMC_CmdBusWidth>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  BusWidth: BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDMMC_TypeDef *SDMMCx, uint32_t BusWidth)
{
 80105fe:	b580      	push	{r7, lr}
 8010600:	b088      	sub	sp, #32
 8010602:	af00      	add	r7, sp, #0
 8010604:	6078      	str	r0, [r7, #4]
 8010606:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 8010608:	683b      	ldr	r3, [r7, #0]
 801060a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 801060c:	2306      	movs	r3, #6
 801060e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8010610:	f44f 7380 	mov.w	r3, #256	; 0x100
 8010614:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8010616:	2300      	movs	r3, #0
 8010618:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 801061a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 801061e:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8010620:	f107 0308 	add.w	r3, r7, #8
 8010624:	4619      	mov	r1, r3
 8010626:	6878      	ldr	r0, [r7, #4]
 8010628:	f7ff fde2 	bl	80101f0 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDMMC_CMDTIMEOUT);
 801062c:	f241 3288 	movw	r2, #5000	; 0x1388
 8010630:	2106      	movs	r1, #6
 8010632:	6878      	ldr	r0, [r7, #4]
 8010634:	f000 f91e 	bl	8010874 <SDMMC_GetCmdResp1>
 8010638:	61f8      	str	r0, [r7, #28]

  return errorstate;
 801063a:	69fb      	ldr	r3, [r7, #28]
}
 801063c:	4618      	mov	r0, r3
 801063e:	3720      	adds	r7, #32
 8010640:	46bd      	mov	sp, r7
 8010642:	bd80      	pop	{r7, pc}

08010644 <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDMMC_TypeDef *SDMMCx)
{
 8010644:	b580      	push	{r7, lr}
 8010646:	b088      	sub	sp, #32
 8010648:	af00      	add	r7, sp, #0
 801064a:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 801064c:	2300      	movs	r3, #0
 801064e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 8010650:	2333      	movs	r3, #51	; 0x33
 8010652:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8010654:	f44f 7380 	mov.w	r3, #256	; 0x100
 8010658:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 801065a:	2300      	movs	r3, #0
 801065c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 801065e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8010662:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8010664:	f107 0308 	add.w	r3, r7, #8
 8010668:	4619      	mov	r1, r3
 801066a:	6878      	ldr	r0, [r7, #4]
 801066c:	f7ff fdc0 	bl	80101f0 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_SEND_SCR, SDMMC_CMDTIMEOUT);
 8010670:	f241 3288 	movw	r2, #5000	; 0x1388
 8010674:	2133      	movs	r1, #51	; 0x33
 8010676:	6878      	ldr	r0, [r7, #4]
 8010678:	f000 f8fc 	bl	8010874 <SDMMC_GetCmdResp1>
 801067c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 801067e:	69fb      	ldr	r3, [r7, #28]
}
 8010680:	4618      	mov	r0, r3
 8010682:	3720      	adds	r7, #32
 8010684:	46bd      	mov	sp, r7
 8010686:	bd80      	pop	{r7, pc}

08010688 <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDMMC_TypeDef *SDMMCx)
{
 8010688:	b580      	push	{r7, lr}
 801068a:	b088      	sub	sp, #32
 801068c:	af00      	add	r7, sp, #0
 801068e:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 8010690:	2300      	movs	r3, #0
 8010692:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 8010694:	2302      	movs	r3, #2
 8010696:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 8010698:	f44f 7340 	mov.w	r3, #768	; 0x300
 801069c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 801069e:	2300      	movs	r3, #0
 80106a0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80106a2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80106a6:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80106a8:	f107 0308 	add.w	r3, r7, #8
 80106ac:	4619      	mov	r1, r3
 80106ae:	6878      	ldr	r0, [r7, #4]
 80106b0:	f7ff fd9e 	bl	80101f0 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 80106b4:	6878      	ldr	r0, [r7, #4]
 80106b6:	f000 f9cf 	bl	8010a58 <SDMMC_GetCmdResp2>
 80106ba:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80106bc:	69fb      	ldr	r3, [r7, #28]
}
 80106be:	4618      	mov	r0, r3
 80106c0:	3720      	adds	r7, #32
 80106c2:	46bd      	mov	sp, r7
 80106c4:	bd80      	pop	{r7, pc}

080106c6 <SDMMC_CmdSendCSD>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 80106c6:	b580      	push	{r7, lr}
 80106c8:	b088      	sub	sp, #32
 80106ca:	af00      	add	r7, sp, #0
 80106cc:	6078      	str	r0, [r7, #4]
 80106ce:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 80106d0:	683b      	ldr	r3, [r7, #0]
 80106d2:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 80106d4:	2309      	movs	r3, #9
 80106d6:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 80106d8:	f44f 7340 	mov.w	r3, #768	; 0x300
 80106dc:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80106de:	2300      	movs	r3, #0
 80106e0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80106e2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80106e6:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80106e8:	f107 0308 	add.w	r3, r7, #8
 80106ec:	4619      	mov	r1, r3
 80106ee:	6878      	ldr	r0, [r7, #4]
 80106f0:	f7ff fd7e 	bl	80101f0 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 80106f4:	6878      	ldr	r0, [r7, #4]
 80106f6:	f000 f9af 	bl	8010a58 <SDMMC_GetCmdResp2>
 80106fa:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80106fc:	69fb      	ldr	r3, [r7, #28]
}
 80106fe:	4618      	mov	r0, r3
 8010700:	3720      	adds	r7, #32
 8010702:	46bd      	mov	sp, r7
 8010704:	bd80      	pop	{r7, pc}

08010706 <SDMMC_CmdSetRelAdd>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  pRCA: Card RCA
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDMMC_TypeDef *SDMMCx, uint16_t *pRCA)
{
 8010706:	b580      	push	{r7, lr}
 8010708:	b088      	sub	sp, #32
 801070a:	af00      	add	r7, sp, #0
 801070c:	6078      	str	r0, [r7, #4]
 801070e:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 8010710:	2300      	movs	r3, #0
 8010712:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 8010714:	2303      	movs	r3, #3
 8010716:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8010718:	f44f 7380 	mov.w	r3, #256	; 0x100
 801071c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 801071e:	2300      	movs	r3, #0
 8010720:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8010722:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8010726:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8010728:	f107 0308 	add.w	r3, r7, #8
 801072c:	4619      	mov	r1, r3
 801072e:	6878      	ldr	r0, [r7, #4]
 8010730:	f7ff fd5e 	bl	80101f0 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDMMCx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 8010734:	683a      	ldr	r2, [r7, #0]
 8010736:	2103      	movs	r1, #3
 8010738:	6878      	ldr	r0, [r7, #4]
 801073a:	f000 fa17 	bl	8010b6c <SDMMC_GetCmdResp6>
 801073e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8010740:	69fb      	ldr	r3, [r7, #28]
}
 8010742:	4618      	mov	r0, r3
 8010744:	3720      	adds	r7, #32
 8010746:	46bd      	mov	sp, r7
 8010748:	bd80      	pop	{r7, pc}

0801074a <SDMMC_CmdSendStatus>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 801074a:	b580      	push	{r7, lr}
 801074c:	b088      	sub	sp, #32
 801074e:	af00      	add	r7, sp, #0
 8010750:	6078      	str	r0, [r7, #4]
 8010752:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = Argument;
 8010754:	683b      	ldr	r3, [r7, #0]
 8010756:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 8010758:	230d      	movs	r3, #13
 801075a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 801075c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8010760:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8010762:	2300      	movs	r3, #0
 8010764:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8010766:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 801076a:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 801076c:	f107 0308 	add.w	r3, r7, #8
 8010770:	4619      	mov	r1, r3
 8010772:	6878      	ldr	r0, [r7, #4]
 8010774:	f7ff fd3c 	bl	80101f0 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEND_STATUS, SDMMC_CMDTIMEOUT);
 8010778:	f241 3288 	movw	r2, #5000	; 0x1388
 801077c:	210d      	movs	r1, #13
 801077e:	6878      	ldr	r0, [r7, #4]
 8010780:	f000 f878 	bl	8010874 <SDMMC_GetCmdResp1>
 8010784:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8010786:	69fb      	ldr	r3, [r7, #28]
}
 8010788:	4618      	mov	r0, r3
 801078a:	3720      	adds	r7, #32
 801078c:	46bd      	mov	sp, r7
 801078e:	bd80      	pop	{r7, pc}

08010790 <SDMMC_CmdStatusRegister>:
  * @brief  Send the Status register command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdStatusRegister(SDMMC_TypeDef *SDMMCx)
{
 8010790:	b580      	push	{r7, lr}
 8010792:	b088      	sub	sp, #32
 8010794:	af00      	add	r7, sp, #0
 8010796:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0U;
 8010798:	2300      	movs	r3, #0
 801079a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_STATUS;
 801079c:	230d      	movs	r3, #13
 801079e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80107a0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80107a4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80107a6:	2300      	movs	r3, #0
 80107a8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80107aa:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80107ae:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80107b0:	f107 0308 	add.w	r3, r7, #8
 80107b4:	4619      	mov	r1, r3
 80107b6:	6878      	ldr	r0, [r7, #4]
 80107b8:	f7ff fd1a 	bl	80101f0 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_STATUS, SDMMC_CMDTIMEOUT);
 80107bc:	f241 3288 	movw	r2, #5000	; 0x1388
 80107c0:	210d      	movs	r1, #13
 80107c2:	6878      	ldr	r0, [r7, #4]
 80107c4:	f000 f856 	bl	8010874 <SDMMC_GetCmdResp1>
 80107c8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80107ca:	69fb      	ldr	r3, [r7, #28]
}
 80107cc:	4618      	mov	r0, r3
 80107ce:	3720      	adds	r7, #32
 80107d0:	46bd      	mov	sp, r7
 80107d2:	bd80      	pop	{r7, pc}

080107d4 <SDMMC_CmdVoltageSwitch>:
  *         condition register (OCR)
  * @param  None
  * @retval HAL status
  */
uint32_t SDMMC_CmdVoltageSwitch(SDMMC_TypeDef *SDMMCx)
{
 80107d4:	b580      	push	{r7, lr}
 80107d6:	b088      	sub	sp, #32
 80107d8:	af00      	add	r7, sp, #0
 80107da:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0x00000000;
 80107dc:	2300      	movs	r3, #0
 80107de:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_VOLTAGE_SWITCH;
 80107e0:	230b      	movs	r3, #11
 80107e2:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80107e4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80107e8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80107ea:	2300      	movs	r3, #0
 80107ec:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80107ee:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80107f2:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80107f4:	f107 0308 	add.w	r3, r7, #8
 80107f8:	4619      	mov	r1, r3
 80107fa:	6878      	ldr	r0, [r7, #4]
 80107fc:	f7ff fcf8 	bl	80101f0 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_VOLTAGE_SWITCH, SDMMC_CMDTIMEOUT);
 8010800:	f241 3288 	movw	r2, #5000	; 0x1388
 8010804:	210b      	movs	r1, #11
 8010806:	6878      	ldr	r0, [r7, #4]
 8010808:	f000 f834 	bl	8010874 <SDMMC_GetCmdResp1>
 801080c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 801080e:	69fb      	ldr	r3, [r7, #28]
}
 8010810:	4618      	mov	r0, r3
 8010812:	3720      	adds	r7, #32
 8010814:	46bd      	mov	sp, r7
 8010816:	bd80      	pop	{r7, pc}

08010818 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDMMC_TypeDef *SDMMCx)
{
 8010818:	b480      	push	{r7}
 801081a:	b085      	sub	sp, #20
 801081c:	af00      	add	r7, sp, #0
 801081e:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8010820:	4b11      	ldr	r3, [pc, #68]	; (8010868 <SDMMC_GetCmdError+0x50>)
 8010822:	681b      	ldr	r3, [r3, #0]
 8010824:	4a11      	ldr	r2, [pc, #68]	; (801086c <SDMMC_GetCmdError+0x54>)
 8010826:	fba2 2303 	umull	r2, r3, r2, r3
 801082a:	0a5b      	lsrs	r3, r3, #9
 801082c:	f241 3288 	movw	r2, #5000	; 0x1388
 8010830:	fb02 f303 	mul.w	r3, r2, r3
 8010834:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 8010836:	68fb      	ldr	r3, [r7, #12]
 8010838:	1e5a      	subs	r2, r3, #1
 801083a:	60fa      	str	r2, [r7, #12]
 801083c:	2b00      	cmp	r3, #0
 801083e:	d102      	bne.n	8010846 <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8010840:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8010844:	e009      	b.n	801085a <SDMMC_GetCmdError+0x42>
    }

  }while(!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDSENT));
 8010846:	687b      	ldr	r3, [r7, #4]
 8010848:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801084a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801084e:	2b00      	cmp	r3, #0
 8010850:	d0f1      	beq.n	8010836 <SDMMC_GetCmdError+0x1e>

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8010852:	687b      	ldr	r3, [r7, #4]
 8010854:	4a06      	ldr	r2, [pc, #24]	; (8010870 <SDMMC_GetCmdError+0x58>)
 8010856:	639a      	str	r2, [r3, #56]	; 0x38

  return SDMMC_ERROR_NONE;
 8010858:	2300      	movs	r3, #0
}
 801085a:	4618      	mov	r0, r3
 801085c:	3714      	adds	r7, #20
 801085e:	46bd      	mov	sp, r7
 8010860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010864:	4770      	bx	lr
 8010866:	bf00      	nop
 8010868:	2400000c 	.word	0x2400000c
 801086c:	10624dd3 	.word	0x10624dd3
 8010870:	002000c5 	.word	0x002000c5

08010874 <SDMMC_GetCmdResp1>:
  * @param  hsd: SD handle
  * @param  SD_CMD: The sent command index
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp1(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint32_t Timeout)
{
 8010874:	b580      	push	{r7, lr}
 8010876:	b088      	sub	sp, #32
 8010878:	af00      	add	r7, sp, #0
 801087a:	60f8      	str	r0, [r7, #12]
 801087c:	460b      	mov	r3, r1
 801087e:	607a      	str	r2, [r7, #4]
 8010880:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8010882:	4b70      	ldr	r3, [pc, #448]	; (8010a44 <SDMMC_GetCmdResp1+0x1d0>)
 8010884:	681b      	ldr	r3, [r3, #0]
 8010886:	4a70      	ldr	r2, [pc, #448]	; (8010a48 <SDMMC_GetCmdResp1+0x1d4>)
 8010888:	fba2 2303 	umull	r2, r3, r2, r3
 801088c:	0a5a      	lsrs	r2, r3, #9
 801088e:	687b      	ldr	r3, [r7, #4]
 8010890:	fb02 f303 	mul.w	r3, r2, r3
 8010894:	61fb      	str	r3, [r7, #28]

  do
  {
    if (count-- == 0U)
 8010896:	69fb      	ldr	r3, [r7, #28]
 8010898:	1e5a      	subs	r2, r3, #1
 801089a:	61fa      	str	r2, [r7, #28]
 801089c:	2b00      	cmp	r3, #0
 801089e:	d102      	bne.n	80108a6 <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 80108a0:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80108a4:	e0c9      	b.n	8010a3a <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDMMCx->STA;
 80108a6:	68fb      	ldr	r3, [r7, #12]
 80108a8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80108aa:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT | SDMMC_FLAG_BUSYD0END)) == 0U) ||
 80108ac:	69ba      	ldr	r2, [r7, #24]
 80108ae:	4b67      	ldr	r3, [pc, #412]	; (8010a4c <SDMMC_GetCmdResp1+0x1d8>)
 80108b0:	4013      	ands	r3, r2
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 80108b2:	2b00      	cmp	r3, #0
 80108b4:	d0ef      	beq.n	8010896 <SDMMC_GetCmdResp1+0x22>
 80108b6:	69bb      	ldr	r3, [r7, #24]
 80108b8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT | SDMMC_FLAG_BUSYD0END)) == 0U) ||
 80108bc:	2b00      	cmp	r3, #0
 80108be:	d1ea      	bne.n	8010896 <SDMMC_GetCmdResp1+0x22>

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 80108c0:	68fb      	ldr	r3, [r7, #12]
 80108c2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80108c4:	f003 0304 	and.w	r3, r3, #4
 80108c8:	2b00      	cmp	r3, #0
 80108ca:	d004      	beq.n	80108d6 <SDMMC_GetCmdResp1+0x62>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 80108cc:	68fb      	ldr	r3, [r7, #12]
 80108ce:	2204      	movs	r2, #4
 80108d0:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80108d2:	2304      	movs	r3, #4
 80108d4:	e0b1      	b.n	8010a3a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 80108d6:	68fb      	ldr	r3, [r7, #12]
 80108d8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80108da:	f003 0301 	and.w	r3, r3, #1
 80108de:	2b00      	cmp	r3, #0
 80108e0:	d004      	beq.n	80108ec <SDMMC_GetCmdResp1+0x78>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 80108e2:	68fb      	ldr	r3, [r7, #12]
 80108e4:	2201      	movs	r2, #1
 80108e6:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 80108e8:	2301      	movs	r3, #1
 80108ea:	e0a6      	b.n	8010a3a <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 80108ec:	68fb      	ldr	r3, [r7, #12]
 80108ee:	4a58      	ldr	r2, [pc, #352]	; (8010a50 <SDMMC_GetCmdResp1+0x1dc>)
 80108f0:	639a      	str	r2, [r3, #56]	; 0x38

  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 80108f2:	68f8      	ldr	r0, [r7, #12]
 80108f4:	f7ff fca6 	bl	8010244 <SDMMC_GetCommandResponse>
 80108f8:	4603      	mov	r3, r0
 80108fa:	461a      	mov	r2, r3
 80108fc:	7afb      	ldrb	r3, [r7, #11]
 80108fe:	4293      	cmp	r3, r2
 8010900:	d001      	beq.n	8010906 <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8010902:	2301      	movs	r3, #1
 8010904:	e099      	b.n	8010a3a <SDMMC_GetCmdResp1+0x1c6>
  }

  /* We have received response, retrieve it for analysis  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 8010906:	2100      	movs	r1, #0
 8010908:	68f8      	ldr	r0, [r7, #12]
 801090a:	f7ff fca8 	bl	801025e <SDMMC_GetResponse>
 801090e:	6178      	str	r0, [r7, #20]

  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 8010910:	697a      	ldr	r2, [r7, #20]
 8010912:	4b50      	ldr	r3, [pc, #320]	; (8010a54 <SDMMC_GetCmdResp1+0x1e0>)
 8010914:	4013      	ands	r3, r2
 8010916:	2b00      	cmp	r3, #0
 8010918:	d101      	bne.n	801091e <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 801091a:	2300      	movs	r3, #0
 801091c:	e08d      	b.n	8010a3a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 801091e:	697b      	ldr	r3, [r7, #20]
 8010920:	2b00      	cmp	r3, #0
 8010922:	da02      	bge.n	801092a <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 8010924:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8010928:	e087      	b.n	8010a3a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 801092a:	697b      	ldr	r3, [r7, #20]
 801092c:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8010930:	2b00      	cmp	r3, #0
 8010932:	d001      	beq.n	8010938 <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 8010934:	2340      	movs	r3, #64	; 0x40
 8010936:	e080      	b.n	8010a3a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 8010938:	697b      	ldr	r3, [r7, #20]
 801093a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 801093e:	2b00      	cmp	r3, #0
 8010940:	d001      	beq.n	8010946 <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 8010942:	2380      	movs	r3, #128	; 0x80
 8010944:	e079      	b.n	8010a3a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 8010946:	697b      	ldr	r3, [r7, #20]
 8010948:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 801094c:	2b00      	cmp	r3, #0
 801094e:	d002      	beq.n	8010956 <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 8010950:	f44f 7380 	mov.w	r3, #256	; 0x100
 8010954:	e071      	b.n	8010a3a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 8010956:	697b      	ldr	r3, [r7, #20]
 8010958:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 801095c:	2b00      	cmp	r3, #0
 801095e:	d002      	beq.n	8010966 <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 8010960:	f44f 7300 	mov.w	r3, #512	; 0x200
 8010964:	e069      	b.n	8010a3a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 8010966:	697b      	ldr	r3, [r7, #20]
 8010968:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 801096c:	2b00      	cmp	r3, #0
 801096e:	d002      	beq.n	8010976 <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 8010970:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8010974:	e061      	b.n	8010a3a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 8010976:	697b      	ldr	r3, [r7, #20]
 8010978:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 801097c:	2b00      	cmp	r3, #0
 801097e:	d002      	beq.n	8010986 <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 8010980:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8010984:	e059      	b.n	8010a3a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 8010986:	697b      	ldr	r3, [r7, #20]
 8010988:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 801098c:	2b00      	cmp	r3, #0
 801098e:	d002      	beq.n	8010996 <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8010990:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8010994:	e051      	b.n	8010a3a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 8010996:	697b      	ldr	r3, [r7, #20]
 8010998:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 801099c:	2b00      	cmp	r3, #0
 801099e:	d002      	beq.n	80109a6 <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 80109a0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80109a4:	e049      	b.n	8010a3a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 80109a6:	697b      	ldr	r3, [r7, #20]
 80109a8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80109ac:	2b00      	cmp	r3, #0
 80109ae:	d002      	beq.n	80109b6 <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 80109b0:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80109b4:	e041      	b.n	8010a3a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 80109b6:	697b      	ldr	r3, [r7, #20]
 80109b8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80109bc:	2b00      	cmp	r3, #0
 80109be:	d002      	beq.n	80109c6 <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 80109c0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80109c4:	e039      	b.n	8010a3a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 80109c6:	697b      	ldr	r3, [r7, #20]
 80109c8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80109cc:	2b00      	cmp	r3, #0
 80109ce:	d002      	beq.n	80109d6 <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 80109d0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80109d4:	e031      	b.n	8010a3a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 80109d6:	697b      	ldr	r3, [r7, #20]
 80109d8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80109dc:	2b00      	cmp	r3, #0
 80109de:	d002      	beq.n	80109e6 <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 80109e0:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80109e4:	e029      	b.n	8010a3a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 80109e6:	697b      	ldr	r3, [r7, #20]
 80109e8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80109ec:	2b00      	cmp	r3, #0
 80109ee:	d002      	beq.n	80109f6 <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 80109f0:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80109f4:	e021      	b.n	8010a3a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 80109f6:	697b      	ldr	r3, [r7, #20]
 80109f8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80109fc:	2b00      	cmp	r3, #0
 80109fe:	d002      	beq.n	8010a06 <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 8010a00:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8010a04:	e019      	b.n	8010a3a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 8010a06:	697b      	ldr	r3, [r7, #20]
 8010a08:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8010a0c:	2b00      	cmp	r3, #0
 8010a0e:	d002      	beq.n	8010a16 <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 8010a10:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8010a14:	e011      	b.n	8010a3a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 8010a16:	697b      	ldr	r3, [r7, #20]
 8010a18:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8010a1c:	2b00      	cmp	r3, #0
 8010a1e:	d002      	beq.n	8010a26 <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 8010a20:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8010a24:	e009      	b.n	8010a3a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 8010a26:	697b      	ldr	r3, [r7, #20]
 8010a28:	f003 0308 	and.w	r3, r3, #8
 8010a2c:	2b00      	cmp	r3, #0
 8010a2e:	d002      	beq.n	8010a36 <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 8010a30:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8010a34:	e001      	b.n	8010a3a <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8010a36:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 8010a3a:	4618      	mov	r0, r3
 8010a3c:	3720      	adds	r7, #32
 8010a3e:	46bd      	mov	sp, r7
 8010a40:	bd80      	pop	{r7, pc}
 8010a42:	bf00      	nop
 8010a44:	2400000c 	.word	0x2400000c
 8010a48:	10624dd3 	.word	0x10624dd3
 8010a4c:	00200045 	.word	0x00200045
 8010a50:	002000c5 	.word	0x002000c5
 8010a54:	fdffe008 	.word	0xfdffe008

08010a58 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp2(SDMMC_TypeDef *SDMMCx)
{
 8010a58:	b480      	push	{r7}
 8010a5a:	b085      	sub	sp, #20
 8010a5c:	af00      	add	r7, sp, #0
 8010a5e:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8010a60:	4b1f      	ldr	r3, [pc, #124]	; (8010ae0 <SDMMC_GetCmdResp2+0x88>)
 8010a62:	681b      	ldr	r3, [r3, #0]
 8010a64:	4a1f      	ldr	r2, [pc, #124]	; (8010ae4 <SDMMC_GetCmdResp2+0x8c>)
 8010a66:	fba2 2303 	umull	r2, r3, r2, r3
 8010a6a:	0a5b      	lsrs	r3, r3, #9
 8010a6c:	f241 3288 	movw	r2, #5000	; 0x1388
 8010a70:	fb02 f303 	mul.w	r3, r2, r3
 8010a74:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 8010a76:	68fb      	ldr	r3, [r7, #12]
 8010a78:	1e5a      	subs	r2, r3, #1
 8010a7a:	60fa      	str	r2, [r7, #12]
 8010a7c:	2b00      	cmp	r3, #0
 8010a7e:	d102      	bne.n	8010a86 <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8010a80:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8010a84:	e026      	b.n	8010ad4 <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDMMCx->STA;
 8010a86:	687b      	ldr	r3, [r7, #4]
 8010a88:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010a8a:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8010a8c:	68bb      	ldr	r3, [r7, #8]
 8010a8e:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 8010a92:	2b00      	cmp	r3, #0
 8010a94:	d0ef      	beq.n	8010a76 <SDMMC_GetCmdResp2+0x1e>
 8010a96:	68bb      	ldr	r3, [r7, #8]
 8010a98:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8010a9c:	2b00      	cmp	r3, #0
 8010a9e:	d1ea      	bne.n	8010a76 <SDMMC_GetCmdResp2+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8010aa0:	687b      	ldr	r3, [r7, #4]
 8010aa2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010aa4:	f003 0304 	and.w	r3, r3, #4
 8010aa8:	2b00      	cmp	r3, #0
 8010aaa:	d004      	beq.n	8010ab6 <SDMMC_GetCmdResp2+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8010aac:	687b      	ldr	r3, [r7, #4]
 8010aae:	2204      	movs	r2, #4
 8010ab0:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8010ab2:	2304      	movs	r3, #4
 8010ab4:	e00e      	b.n	8010ad4 <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8010ab6:	687b      	ldr	r3, [r7, #4]
 8010ab8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010aba:	f003 0301 	and.w	r3, r3, #1
 8010abe:	2b00      	cmp	r3, #0
 8010ac0:	d004      	beq.n	8010acc <SDMMC_GetCmdResp2+0x74>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8010ac2:	687b      	ldr	r3, [r7, #4]
 8010ac4:	2201      	movs	r2, #1
 8010ac6:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 8010ac8:	2301      	movs	r3, #1
 8010aca:	e003      	b.n	8010ad4 <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8010acc:	687b      	ldr	r3, [r7, #4]
 8010ace:	4a06      	ldr	r2, [pc, #24]	; (8010ae8 <SDMMC_GetCmdResp2+0x90>)
 8010ad0:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 8010ad2:	2300      	movs	r3, #0
}
 8010ad4:	4618      	mov	r0, r3
 8010ad6:	3714      	adds	r7, #20
 8010ad8:	46bd      	mov	sp, r7
 8010ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010ade:	4770      	bx	lr
 8010ae0:	2400000c 	.word	0x2400000c
 8010ae4:	10624dd3 	.word	0x10624dd3
 8010ae8:	002000c5 	.word	0x002000c5

08010aec <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp3(SDMMC_TypeDef *SDMMCx)
{
 8010aec:	b480      	push	{r7}
 8010aee:	b085      	sub	sp, #20
 8010af0:	af00      	add	r7, sp, #0
 8010af2:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8010af4:	4b1a      	ldr	r3, [pc, #104]	; (8010b60 <SDMMC_GetCmdResp3+0x74>)
 8010af6:	681b      	ldr	r3, [r3, #0]
 8010af8:	4a1a      	ldr	r2, [pc, #104]	; (8010b64 <SDMMC_GetCmdResp3+0x78>)
 8010afa:	fba2 2303 	umull	r2, r3, r2, r3
 8010afe:	0a5b      	lsrs	r3, r3, #9
 8010b00:	f241 3288 	movw	r2, #5000	; 0x1388
 8010b04:	fb02 f303 	mul.w	r3, r2, r3
 8010b08:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 8010b0a:	68fb      	ldr	r3, [r7, #12]
 8010b0c:	1e5a      	subs	r2, r3, #1
 8010b0e:	60fa      	str	r2, [r7, #12]
 8010b10:	2b00      	cmp	r3, #0
 8010b12:	d102      	bne.n	8010b1a <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8010b14:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8010b18:	e01b      	b.n	8010b52 <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDMMCx->STA;
 8010b1a:	687b      	ldr	r3, [r7, #4]
 8010b1c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010b1e:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8010b20:	68bb      	ldr	r3, [r7, #8]
 8010b22:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 8010b26:	2b00      	cmp	r3, #0
 8010b28:	d0ef      	beq.n	8010b0a <SDMMC_GetCmdResp3+0x1e>
 8010b2a:	68bb      	ldr	r3, [r7, #8]
 8010b2c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8010b30:	2b00      	cmp	r3, #0
 8010b32:	d1ea      	bne.n	8010b0a <SDMMC_GetCmdResp3+0x1e>

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8010b34:	687b      	ldr	r3, [r7, #4]
 8010b36:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010b38:	f003 0304 	and.w	r3, r3, #4
 8010b3c:	2b00      	cmp	r3, #0
 8010b3e:	d004      	beq.n	8010b4a <SDMMC_GetCmdResp3+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8010b40:	687b      	ldr	r3, [r7, #4]
 8010b42:	2204      	movs	r2, #4
 8010b44:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8010b46:	2304      	movs	r3, #4
 8010b48:	e003      	b.n	8010b52 <SDMMC_GetCmdResp3+0x66>
  }
  else
  {
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8010b4a:	687b      	ldr	r3, [r7, #4]
 8010b4c:	4a06      	ldr	r2, [pc, #24]	; (8010b68 <SDMMC_GetCmdResp3+0x7c>)
 8010b4e:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 8010b50:	2300      	movs	r3, #0
}
 8010b52:	4618      	mov	r0, r3
 8010b54:	3714      	adds	r7, #20
 8010b56:	46bd      	mov	sp, r7
 8010b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010b5c:	4770      	bx	lr
 8010b5e:	bf00      	nop
 8010b60:	2400000c 	.word	0x2400000c
 8010b64:	10624dd3 	.word	0x10624dd3
 8010b68:	002000c5 	.word	0x002000c5

08010b6c <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative
  *         address RCA
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp6(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint16_t *pRCA)
{
 8010b6c:	b580      	push	{r7, lr}
 8010b6e:	b088      	sub	sp, #32
 8010b70:	af00      	add	r7, sp, #0
 8010b72:	60f8      	str	r0, [r7, #12]
 8010b74:	460b      	mov	r3, r1
 8010b76:	607a      	str	r2, [r7, #4]
 8010b78:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8010b7a:	4b35      	ldr	r3, [pc, #212]	; (8010c50 <SDMMC_GetCmdResp6+0xe4>)
 8010b7c:	681b      	ldr	r3, [r3, #0]
 8010b7e:	4a35      	ldr	r2, [pc, #212]	; (8010c54 <SDMMC_GetCmdResp6+0xe8>)
 8010b80:	fba2 2303 	umull	r2, r3, r2, r3
 8010b84:	0a5b      	lsrs	r3, r3, #9
 8010b86:	f241 3288 	movw	r2, #5000	; 0x1388
 8010b8a:	fb02 f303 	mul.w	r3, r2, r3
 8010b8e:	61fb      	str	r3, [r7, #28]

  do
  {
    if (count-- == 0U)
 8010b90:	69fb      	ldr	r3, [r7, #28]
 8010b92:	1e5a      	subs	r2, r3, #1
 8010b94:	61fa      	str	r2, [r7, #28]
 8010b96:	2b00      	cmp	r3, #0
 8010b98:	d102      	bne.n	8010ba0 <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 8010b9a:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8010b9e:	e052      	b.n	8010c46 <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDMMCx->STA;
 8010ba0:	68fb      	ldr	r3, [r7, #12]
 8010ba2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010ba4:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8010ba6:	69bb      	ldr	r3, [r7, #24]
 8010ba8:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 8010bac:	2b00      	cmp	r3, #0
 8010bae:	d0ef      	beq.n	8010b90 <SDMMC_GetCmdResp6+0x24>
 8010bb0:	69bb      	ldr	r3, [r7, #24]
 8010bb2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8010bb6:	2b00      	cmp	r3, #0
 8010bb8:	d1ea      	bne.n	8010b90 <SDMMC_GetCmdResp6+0x24>

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8010bba:	68fb      	ldr	r3, [r7, #12]
 8010bbc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010bbe:	f003 0304 	and.w	r3, r3, #4
 8010bc2:	2b00      	cmp	r3, #0
 8010bc4:	d004      	beq.n	8010bd0 <SDMMC_GetCmdResp6+0x64>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8010bc6:	68fb      	ldr	r3, [r7, #12]
 8010bc8:	2204      	movs	r2, #4
 8010bca:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8010bcc:	2304      	movs	r3, #4
 8010bce:	e03a      	b.n	8010c46 <SDMMC_GetCmdResp6+0xda>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8010bd0:	68fb      	ldr	r3, [r7, #12]
 8010bd2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010bd4:	f003 0301 	and.w	r3, r3, #1
 8010bd8:	2b00      	cmp	r3, #0
 8010bda:	d004      	beq.n	8010be6 <SDMMC_GetCmdResp6+0x7a>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8010bdc:	68fb      	ldr	r3, [r7, #12]
 8010bde:	2201      	movs	r2, #1
 8010be0:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 8010be2:	2301      	movs	r3, #1
 8010be4:	e02f      	b.n	8010c46 <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }

  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 8010be6:	68f8      	ldr	r0, [r7, #12]
 8010be8:	f7ff fb2c 	bl	8010244 <SDMMC_GetCommandResponse>
 8010bec:	4603      	mov	r3, r0
 8010bee:	461a      	mov	r2, r3
 8010bf0:	7afb      	ldrb	r3, [r7, #11]
 8010bf2:	4293      	cmp	r3, r2
 8010bf4:	d001      	beq.n	8010bfa <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8010bf6:	2301      	movs	r3, #1
 8010bf8:	e025      	b.n	8010c46 <SDMMC_GetCmdResp6+0xda>
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8010bfa:	68fb      	ldr	r3, [r7, #12]
 8010bfc:	4a16      	ldr	r2, [pc, #88]	; (8010c58 <SDMMC_GetCmdResp6+0xec>)
 8010bfe:	639a      	str	r2, [r3, #56]	; 0x38

  /* We have received response, retrieve it.  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 8010c00:	2100      	movs	r1, #0
 8010c02:	68f8      	ldr	r0, [r7, #12]
 8010c04:	f7ff fb2b 	bl	801025e <SDMMC_GetResponse>
 8010c08:	6178      	str	r0, [r7, #20]

  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 8010c0a:	697b      	ldr	r3, [r7, #20]
 8010c0c:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8010c10:	2b00      	cmp	r3, #0
 8010c12:	d106      	bne.n	8010c22 <SDMMC_GetCmdResp6+0xb6>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 8010c14:	697b      	ldr	r3, [r7, #20]
 8010c16:	0c1b      	lsrs	r3, r3, #16
 8010c18:	b29a      	uxth	r2, r3
 8010c1a:	687b      	ldr	r3, [r7, #4]
 8010c1c:	801a      	strh	r2, [r3, #0]

    return SDMMC_ERROR_NONE;
 8010c1e:	2300      	movs	r3, #0
 8010c20:	e011      	b.n	8010c46 <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 8010c22:	697b      	ldr	r3, [r7, #20]
 8010c24:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8010c28:	2b00      	cmp	r3, #0
 8010c2a:	d002      	beq.n	8010c32 <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8010c2c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8010c30:	e009      	b.n	8010c46 <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 8010c32:	697b      	ldr	r3, [r7, #20]
 8010c34:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8010c38:	2b00      	cmp	r3, #0
 8010c3a:	d002      	beq.n	8010c42 <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8010c3c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8010c40:	e001      	b.n	8010c46 <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8010c42:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 8010c46:	4618      	mov	r0, r3
 8010c48:	3720      	adds	r7, #32
 8010c4a:	46bd      	mov	sp, r7
 8010c4c:	bd80      	pop	{r7, pc}
 8010c4e:	bf00      	nop
 8010c50:	2400000c 	.word	0x2400000c
 8010c54:	10624dd3 	.word	0x10624dd3
 8010c58:	002000c5 	.word	0x002000c5

08010c5c <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp7(SDMMC_TypeDef *SDMMCx)
{
 8010c5c:	b480      	push	{r7}
 8010c5e:	b085      	sub	sp, #20
 8010c60:	af00      	add	r7, sp, #0
 8010c62:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8010c64:	4b22      	ldr	r3, [pc, #136]	; (8010cf0 <SDMMC_GetCmdResp7+0x94>)
 8010c66:	681b      	ldr	r3, [r3, #0]
 8010c68:	4a22      	ldr	r2, [pc, #136]	; (8010cf4 <SDMMC_GetCmdResp7+0x98>)
 8010c6a:	fba2 2303 	umull	r2, r3, r2, r3
 8010c6e:	0a5b      	lsrs	r3, r3, #9
 8010c70:	f241 3288 	movw	r2, #5000	; 0x1388
 8010c74:	fb02 f303 	mul.w	r3, r2, r3
 8010c78:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 8010c7a:	68fb      	ldr	r3, [r7, #12]
 8010c7c:	1e5a      	subs	r2, r3, #1
 8010c7e:	60fa      	str	r2, [r7, #12]
 8010c80:	2b00      	cmp	r3, #0
 8010c82:	d102      	bne.n	8010c8a <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8010c84:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8010c88:	e02c      	b.n	8010ce4 <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDMMCx->STA;
 8010c8a:	687b      	ldr	r3, [r7, #4]
 8010c8c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010c8e:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8010c90:	68bb      	ldr	r3, [r7, #8]
 8010c92:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 8010c96:	2b00      	cmp	r3, #0
 8010c98:	d0ef      	beq.n	8010c7a <SDMMC_GetCmdResp7+0x1e>
 8010c9a:	68bb      	ldr	r3, [r7, #8]
 8010c9c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8010ca0:	2b00      	cmp	r3, #0
 8010ca2:	d1ea      	bne.n	8010c7a <SDMMC_GetCmdResp7+0x1e>

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8010ca4:	687b      	ldr	r3, [r7, #4]
 8010ca6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010ca8:	f003 0304 	and.w	r3, r3, #4
 8010cac:	2b00      	cmp	r3, #0
 8010cae:	d004      	beq.n	8010cba <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8010cb0:	687b      	ldr	r3, [r7, #4]
 8010cb2:	2204      	movs	r2, #4
 8010cb4:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8010cb6:	2304      	movs	r3, #4
 8010cb8:	e014      	b.n	8010ce4 <SDMMC_GetCmdResp7+0x88>
  }

  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8010cba:	687b      	ldr	r3, [r7, #4]
 8010cbc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010cbe:	f003 0301 	and.w	r3, r3, #1
 8010cc2:	2b00      	cmp	r3, #0
 8010cc4:	d004      	beq.n	8010cd0 <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8010cc6:	687b      	ldr	r3, [r7, #4]
 8010cc8:	2201      	movs	r2, #1
 8010cca:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 8010ccc:	2301      	movs	r3, #1
 8010cce:	e009      	b.n	8010ce4 <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDREND))
 8010cd0:	687b      	ldr	r3, [r7, #4]
 8010cd2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010cd4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8010cd8:	2b00      	cmp	r3, #0
 8010cda:	d002      	beq.n	8010ce2 <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CMDREND);
 8010cdc:	687b      	ldr	r3, [r7, #4]
 8010cde:	2240      	movs	r2, #64	; 0x40
 8010ce0:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 8010ce2:	2300      	movs	r3, #0

}
 8010ce4:	4618      	mov	r0, r3
 8010ce6:	3714      	adds	r7, #20
 8010ce8:	46bd      	mov	sp, r7
 8010cea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010cee:	4770      	bx	lr
 8010cf0:	2400000c 	.word	0x2400000c
 8010cf4:	10624dd3 	.word	0x10624dd3

08010cf8 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8010cf8:	b084      	sub	sp, #16
 8010cfa:	b580      	push	{r7, lr}
 8010cfc:	b084      	sub	sp, #16
 8010cfe:	af00      	add	r7, sp, #0
 8010d00:	6078      	str	r0, [r7, #4]
 8010d02:	f107 001c 	add.w	r0, r7, #28
 8010d06:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8010d0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010d0c:	2b01      	cmp	r3, #1
 8010d0e:	d120      	bne.n	8010d52 <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8010d10:	687b      	ldr	r3, [r7, #4]
 8010d12:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010d14:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8010d18:	687b      	ldr	r3, [r7, #4]
 8010d1a:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8010d1c:	687b      	ldr	r3, [r7, #4]
 8010d1e:	68da      	ldr	r2, [r3, #12]
 8010d20:	4b25      	ldr	r3, [pc, #148]	; (8010db8 <USB_CoreInit+0xc0>)
 8010d22:	4013      	ands	r3, r2
 8010d24:	687a      	ldr	r2, [r7, #4]
 8010d26:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8010d28:	687b      	ldr	r3, [r7, #4]
 8010d2a:	68db      	ldr	r3, [r3, #12]
 8010d2c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8010d30:	687b      	ldr	r3, [r7, #4]
 8010d32:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8010d34:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010d36:	2b01      	cmp	r3, #1
 8010d38:	d105      	bne.n	8010d46 <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8010d3a:	687b      	ldr	r3, [r7, #4]
 8010d3c:	68db      	ldr	r3, [r3, #12]
 8010d3e:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8010d42:	687b      	ldr	r3, [r7, #4]
 8010d44:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 8010d46:	6878      	ldr	r0, [r7, #4]
 8010d48:	f001 fabe 	bl	80122c8 <USB_CoreReset>
 8010d4c:	4603      	mov	r3, r0
 8010d4e:	73fb      	strb	r3, [r7, #15]
 8010d50:	e01a      	b.n	8010d88 <USB_CoreInit+0x90>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8010d52:	687b      	ldr	r3, [r7, #4]
 8010d54:	68db      	ldr	r3, [r3, #12]
 8010d56:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8010d5a:	687b      	ldr	r3, [r7, #4]
 8010d5c:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select and set Host mode */
    ret = USB_CoreReset(USBx);
 8010d5e:	6878      	ldr	r0, [r7, #4]
 8010d60:	f001 fab2 	bl	80122c8 <USB_CoreReset>
 8010d64:	4603      	mov	r3, r0
 8010d66:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8010d68:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8010d6a:	2b00      	cmp	r3, #0
 8010d6c:	d106      	bne.n	8010d7c <USB_CoreInit+0x84>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8010d6e:	687b      	ldr	r3, [r7, #4]
 8010d70:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010d72:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8010d76:	687b      	ldr	r3, [r7, #4]
 8010d78:	639a      	str	r2, [r3, #56]	; 0x38
 8010d7a:	e005      	b.n	8010d88 <USB_CoreInit+0x90>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8010d7c:	687b      	ldr	r3, [r7, #4]
 8010d7e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010d80:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8010d84:	687b      	ldr	r3, [r7, #4]
 8010d86:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8010d88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010d8a:	2b01      	cmp	r3, #1
 8010d8c:	d10b      	bne.n	8010da6 <USB_CoreInit+0xae>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8010d8e:	687b      	ldr	r3, [r7, #4]
 8010d90:	689b      	ldr	r3, [r3, #8]
 8010d92:	f043 0206 	orr.w	r2, r3, #6
 8010d96:	687b      	ldr	r3, [r7, #4]
 8010d98:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8010d9a:	687b      	ldr	r3, [r7, #4]
 8010d9c:	689b      	ldr	r3, [r3, #8]
 8010d9e:	f043 0220 	orr.w	r2, r3, #32
 8010da2:	687b      	ldr	r3, [r7, #4]
 8010da4:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8010da6:	7bfb      	ldrb	r3, [r7, #15]
}
 8010da8:	4618      	mov	r0, r3
 8010daa:	3710      	adds	r7, #16
 8010dac:	46bd      	mov	sp, r7
 8010dae:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8010db2:	b004      	add	sp, #16
 8010db4:	4770      	bx	lr
 8010db6:	bf00      	nop
 8010db8:	ffbdffbf 	.word	0xffbdffbf

08010dbc <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8010dbc:	b480      	push	{r7}
 8010dbe:	b087      	sub	sp, #28
 8010dc0:	af00      	add	r7, sp, #0
 8010dc2:	60f8      	str	r0, [r7, #12]
 8010dc4:	60b9      	str	r1, [r7, #8]
 8010dc6:	4613      	mov	r3, r2
 8010dc8:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8010dca:	79fb      	ldrb	r3, [r7, #7]
 8010dcc:	2b02      	cmp	r3, #2
 8010dce:	d165      	bne.n	8010e9c <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8010dd0:	68bb      	ldr	r3, [r7, #8]
 8010dd2:	4a41      	ldr	r2, [pc, #260]	; (8010ed8 <USB_SetTurnaroundTime+0x11c>)
 8010dd4:	4293      	cmp	r3, r2
 8010dd6:	d906      	bls.n	8010de6 <USB_SetTurnaroundTime+0x2a>
 8010dd8:	68bb      	ldr	r3, [r7, #8]
 8010dda:	4a40      	ldr	r2, [pc, #256]	; (8010edc <USB_SetTurnaroundTime+0x120>)
 8010ddc:	4293      	cmp	r3, r2
 8010dde:	d802      	bhi.n	8010de6 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8010de0:	230f      	movs	r3, #15
 8010de2:	617b      	str	r3, [r7, #20]
 8010de4:	e062      	b.n	8010eac <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8010de6:	68bb      	ldr	r3, [r7, #8]
 8010de8:	4a3c      	ldr	r2, [pc, #240]	; (8010edc <USB_SetTurnaroundTime+0x120>)
 8010dea:	4293      	cmp	r3, r2
 8010dec:	d906      	bls.n	8010dfc <USB_SetTurnaroundTime+0x40>
 8010dee:	68bb      	ldr	r3, [r7, #8]
 8010df0:	4a3b      	ldr	r2, [pc, #236]	; (8010ee0 <USB_SetTurnaroundTime+0x124>)
 8010df2:	4293      	cmp	r3, r2
 8010df4:	d802      	bhi.n	8010dfc <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8010df6:	230e      	movs	r3, #14
 8010df8:	617b      	str	r3, [r7, #20]
 8010dfa:	e057      	b.n	8010eac <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8010dfc:	68bb      	ldr	r3, [r7, #8]
 8010dfe:	4a38      	ldr	r2, [pc, #224]	; (8010ee0 <USB_SetTurnaroundTime+0x124>)
 8010e00:	4293      	cmp	r3, r2
 8010e02:	d906      	bls.n	8010e12 <USB_SetTurnaroundTime+0x56>
 8010e04:	68bb      	ldr	r3, [r7, #8]
 8010e06:	4a37      	ldr	r2, [pc, #220]	; (8010ee4 <USB_SetTurnaroundTime+0x128>)
 8010e08:	4293      	cmp	r3, r2
 8010e0a:	d802      	bhi.n	8010e12 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8010e0c:	230d      	movs	r3, #13
 8010e0e:	617b      	str	r3, [r7, #20]
 8010e10:	e04c      	b.n	8010eac <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8010e12:	68bb      	ldr	r3, [r7, #8]
 8010e14:	4a33      	ldr	r2, [pc, #204]	; (8010ee4 <USB_SetTurnaroundTime+0x128>)
 8010e16:	4293      	cmp	r3, r2
 8010e18:	d906      	bls.n	8010e28 <USB_SetTurnaroundTime+0x6c>
 8010e1a:	68bb      	ldr	r3, [r7, #8]
 8010e1c:	4a32      	ldr	r2, [pc, #200]	; (8010ee8 <USB_SetTurnaroundTime+0x12c>)
 8010e1e:	4293      	cmp	r3, r2
 8010e20:	d802      	bhi.n	8010e28 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8010e22:	230c      	movs	r3, #12
 8010e24:	617b      	str	r3, [r7, #20]
 8010e26:	e041      	b.n	8010eac <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8010e28:	68bb      	ldr	r3, [r7, #8]
 8010e2a:	4a2f      	ldr	r2, [pc, #188]	; (8010ee8 <USB_SetTurnaroundTime+0x12c>)
 8010e2c:	4293      	cmp	r3, r2
 8010e2e:	d906      	bls.n	8010e3e <USB_SetTurnaroundTime+0x82>
 8010e30:	68bb      	ldr	r3, [r7, #8]
 8010e32:	4a2e      	ldr	r2, [pc, #184]	; (8010eec <USB_SetTurnaroundTime+0x130>)
 8010e34:	4293      	cmp	r3, r2
 8010e36:	d802      	bhi.n	8010e3e <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8010e38:	230b      	movs	r3, #11
 8010e3a:	617b      	str	r3, [r7, #20]
 8010e3c:	e036      	b.n	8010eac <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8010e3e:	68bb      	ldr	r3, [r7, #8]
 8010e40:	4a2a      	ldr	r2, [pc, #168]	; (8010eec <USB_SetTurnaroundTime+0x130>)
 8010e42:	4293      	cmp	r3, r2
 8010e44:	d906      	bls.n	8010e54 <USB_SetTurnaroundTime+0x98>
 8010e46:	68bb      	ldr	r3, [r7, #8]
 8010e48:	4a29      	ldr	r2, [pc, #164]	; (8010ef0 <USB_SetTurnaroundTime+0x134>)
 8010e4a:	4293      	cmp	r3, r2
 8010e4c:	d802      	bhi.n	8010e54 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8010e4e:	230a      	movs	r3, #10
 8010e50:	617b      	str	r3, [r7, #20]
 8010e52:	e02b      	b.n	8010eac <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8010e54:	68bb      	ldr	r3, [r7, #8]
 8010e56:	4a26      	ldr	r2, [pc, #152]	; (8010ef0 <USB_SetTurnaroundTime+0x134>)
 8010e58:	4293      	cmp	r3, r2
 8010e5a:	d906      	bls.n	8010e6a <USB_SetTurnaroundTime+0xae>
 8010e5c:	68bb      	ldr	r3, [r7, #8]
 8010e5e:	4a25      	ldr	r2, [pc, #148]	; (8010ef4 <USB_SetTurnaroundTime+0x138>)
 8010e60:	4293      	cmp	r3, r2
 8010e62:	d802      	bhi.n	8010e6a <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8010e64:	2309      	movs	r3, #9
 8010e66:	617b      	str	r3, [r7, #20]
 8010e68:	e020      	b.n	8010eac <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8010e6a:	68bb      	ldr	r3, [r7, #8]
 8010e6c:	4a21      	ldr	r2, [pc, #132]	; (8010ef4 <USB_SetTurnaroundTime+0x138>)
 8010e6e:	4293      	cmp	r3, r2
 8010e70:	d906      	bls.n	8010e80 <USB_SetTurnaroundTime+0xc4>
 8010e72:	68bb      	ldr	r3, [r7, #8]
 8010e74:	4a20      	ldr	r2, [pc, #128]	; (8010ef8 <USB_SetTurnaroundTime+0x13c>)
 8010e76:	4293      	cmp	r3, r2
 8010e78:	d802      	bhi.n	8010e80 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8010e7a:	2308      	movs	r3, #8
 8010e7c:	617b      	str	r3, [r7, #20]
 8010e7e:	e015      	b.n	8010eac <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8010e80:	68bb      	ldr	r3, [r7, #8]
 8010e82:	4a1d      	ldr	r2, [pc, #116]	; (8010ef8 <USB_SetTurnaroundTime+0x13c>)
 8010e84:	4293      	cmp	r3, r2
 8010e86:	d906      	bls.n	8010e96 <USB_SetTurnaroundTime+0xda>
 8010e88:	68bb      	ldr	r3, [r7, #8]
 8010e8a:	4a1c      	ldr	r2, [pc, #112]	; (8010efc <USB_SetTurnaroundTime+0x140>)
 8010e8c:	4293      	cmp	r3, r2
 8010e8e:	d802      	bhi.n	8010e96 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8010e90:	2307      	movs	r3, #7
 8010e92:	617b      	str	r3, [r7, #20]
 8010e94:	e00a      	b.n	8010eac <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8010e96:	2306      	movs	r3, #6
 8010e98:	617b      	str	r3, [r7, #20]
 8010e9a:	e007      	b.n	8010eac <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8010e9c:	79fb      	ldrb	r3, [r7, #7]
 8010e9e:	2b00      	cmp	r3, #0
 8010ea0:	d102      	bne.n	8010ea8 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8010ea2:	2309      	movs	r3, #9
 8010ea4:	617b      	str	r3, [r7, #20]
 8010ea6:	e001      	b.n	8010eac <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8010ea8:	2309      	movs	r3, #9
 8010eaa:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8010eac:	68fb      	ldr	r3, [r7, #12]
 8010eae:	68db      	ldr	r3, [r3, #12]
 8010eb0:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8010eb4:	68fb      	ldr	r3, [r7, #12]
 8010eb6:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8010eb8:	68fb      	ldr	r3, [r7, #12]
 8010eba:	68da      	ldr	r2, [r3, #12]
 8010ebc:	697b      	ldr	r3, [r7, #20]
 8010ebe:	029b      	lsls	r3, r3, #10
 8010ec0:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8010ec4:	431a      	orrs	r2, r3
 8010ec6:	68fb      	ldr	r3, [r7, #12]
 8010ec8:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8010eca:	2300      	movs	r3, #0
}
 8010ecc:	4618      	mov	r0, r3
 8010ece:	371c      	adds	r7, #28
 8010ed0:	46bd      	mov	sp, r7
 8010ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010ed6:	4770      	bx	lr
 8010ed8:	00d8acbf 	.word	0x00d8acbf
 8010edc:	00e4e1bf 	.word	0x00e4e1bf
 8010ee0:	00f423ff 	.word	0x00f423ff
 8010ee4:	0106737f 	.word	0x0106737f
 8010ee8:	011a499f 	.word	0x011a499f
 8010eec:	01312cff 	.word	0x01312cff
 8010ef0:	014ca43f 	.word	0x014ca43f
 8010ef4:	016e35ff 	.word	0x016e35ff
 8010ef8:	01a6ab1f 	.word	0x01a6ab1f
 8010efc:	01e847ff 	.word	0x01e847ff

08010f00 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8010f00:	b480      	push	{r7}
 8010f02:	b083      	sub	sp, #12
 8010f04:	af00      	add	r7, sp, #0
 8010f06:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8010f08:	687b      	ldr	r3, [r7, #4]
 8010f0a:	689b      	ldr	r3, [r3, #8]
 8010f0c:	f043 0201 	orr.w	r2, r3, #1
 8010f10:	687b      	ldr	r3, [r7, #4]
 8010f12:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8010f14:	2300      	movs	r3, #0
}
 8010f16:	4618      	mov	r0, r3
 8010f18:	370c      	adds	r7, #12
 8010f1a:	46bd      	mov	sp, r7
 8010f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010f20:	4770      	bx	lr

08010f22 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8010f22:	b480      	push	{r7}
 8010f24:	b083      	sub	sp, #12
 8010f26:	af00      	add	r7, sp, #0
 8010f28:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8010f2a:	687b      	ldr	r3, [r7, #4]
 8010f2c:	689b      	ldr	r3, [r3, #8]
 8010f2e:	f023 0201 	bic.w	r2, r3, #1
 8010f32:	687b      	ldr	r3, [r7, #4]
 8010f34:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8010f36:	2300      	movs	r3, #0
}
 8010f38:	4618      	mov	r0, r3
 8010f3a:	370c      	adds	r7, #12
 8010f3c:	46bd      	mov	sp, r7
 8010f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010f42:	4770      	bx	lr

08010f44 <USB_SetCurrentMode>:
  *            @arg USB_HOST_MODE: Host mode
  *            @arg USB_DRD_MODE: Dual Role Device mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8010f44:	b580      	push	{r7, lr}
 8010f46:	b082      	sub	sp, #8
 8010f48:	af00      	add	r7, sp, #0
 8010f4a:	6078      	str	r0, [r7, #4]
 8010f4c:	460b      	mov	r3, r1
 8010f4e:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8010f50:	687b      	ldr	r3, [r7, #4]
 8010f52:	68db      	ldr	r3, [r3, #12]
 8010f54:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8010f58:	687b      	ldr	r3, [r7, #4]
 8010f5a:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8010f5c:	78fb      	ldrb	r3, [r7, #3]
 8010f5e:	2b01      	cmp	r3, #1
 8010f60:	d106      	bne.n	8010f70 <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8010f62:	687b      	ldr	r3, [r7, #4]
 8010f64:	68db      	ldr	r3, [r3, #12]
 8010f66:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8010f6a:	687b      	ldr	r3, [r7, #4]
 8010f6c:	60da      	str	r2, [r3, #12]
 8010f6e:	e00b      	b.n	8010f88 <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 8010f70:	78fb      	ldrb	r3, [r7, #3]
 8010f72:	2b00      	cmp	r3, #0
 8010f74:	d106      	bne.n	8010f84 <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8010f76:	687b      	ldr	r3, [r7, #4]
 8010f78:	68db      	ldr	r3, [r3, #12]
 8010f7a:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8010f7e:	687b      	ldr	r3, [r7, #4]
 8010f80:	60da      	str	r2, [r3, #12]
 8010f82:	e001      	b.n	8010f88 <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 8010f84:	2301      	movs	r3, #1
 8010f86:	e003      	b.n	8010f90 <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 8010f88:	2032      	movs	r0, #50	; 0x32
 8010f8a:	f7f2 fbc1 	bl	8003710 <HAL_Delay>

  return HAL_OK;
 8010f8e:	2300      	movs	r3, #0
}
 8010f90:	4618      	mov	r0, r3
 8010f92:	3708      	adds	r7, #8
 8010f94:	46bd      	mov	sp, r7
 8010f96:	bd80      	pop	{r7, pc}

08010f98 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8010f98:	b084      	sub	sp, #16
 8010f9a:	b580      	push	{r7, lr}
 8010f9c:	b086      	sub	sp, #24
 8010f9e:	af00      	add	r7, sp, #0
 8010fa0:	6078      	str	r0, [r7, #4]
 8010fa2:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8010fa6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8010faa:	2300      	movs	r3, #0
 8010fac:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8010fae:	687b      	ldr	r3, [r7, #4]
 8010fb0:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8010fb2:	2300      	movs	r3, #0
 8010fb4:	613b      	str	r3, [r7, #16]
 8010fb6:	e009      	b.n	8010fcc <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8010fb8:	687a      	ldr	r2, [r7, #4]
 8010fba:	693b      	ldr	r3, [r7, #16]
 8010fbc:	3340      	adds	r3, #64	; 0x40
 8010fbe:	009b      	lsls	r3, r3, #2
 8010fc0:	4413      	add	r3, r2
 8010fc2:	2200      	movs	r2, #0
 8010fc4:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8010fc6:	693b      	ldr	r3, [r7, #16]
 8010fc8:	3301      	adds	r3, #1
 8010fca:	613b      	str	r3, [r7, #16]
 8010fcc:	693b      	ldr	r3, [r7, #16]
 8010fce:	2b0e      	cmp	r3, #14
 8010fd0:	d9f2      	bls.n	8010fb8 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8010fd2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010fd4:	2b00      	cmp	r3, #0
 8010fd6:	d11c      	bne.n	8011012 <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8010fd8:	68fb      	ldr	r3, [r7, #12]
 8010fda:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8010fde:	685b      	ldr	r3, [r3, #4]
 8010fe0:	68fa      	ldr	r2, [r7, #12]
 8010fe2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8010fe6:	f043 0302 	orr.w	r3, r3, #2
 8010fea:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8010fec:	687b      	ldr	r3, [r7, #4]
 8010fee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010ff0:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8010ff4:	687b      	ldr	r3, [r7, #4]
 8010ff6:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8010ff8:	687b      	ldr	r3, [r7, #4]
 8010ffa:	681b      	ldr	r3, [r3, #0]
 8010ffc:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8011000:	687b      	ldr	r3, [r7, #4]
 8011002:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8011004:	687b      	ldr	r3, [r7, #4]
 8011006:	681b      	ldr	r3, [r3, #0]
 8011008:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 801100c:	687b      	ldr	r3, [r7, #4]
 801100e:	601a      	str	r2, [r3, #0]
 8011010:	e005      	b.n	801101e <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8011012:	687b      	ldr	r3, [r7, #4]
 8011014:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011016:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 801101a:	687b      	ldr	r3, [r7, #4]
 801101c:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 801101e:	68fb      	ldr	r3, [r7, #12]
 8011020:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8011024:	461a      	mov	r2, r3
 8011026:	2300      	movs	r3, #0
 8011028:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 801102a:	68fb      	ldr	r3, [r7, #12]
 801102c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8011030:	4619      	mov	r1, r3
 8011032:	68fb      	ldr	r3, [r7, #12]
 8011034:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8011038:	461a      	mov	r2, r3
 801103a:	680b      	ldr	r3, [r1, #0]
 801103c:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 801103e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011040:	2b01      	cmp	r3, #1
 8011042:	d10c      	bne.n	801105e <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8011044:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011046:	2b00      	cmp	r3, #0
 8011048:	d104      	bne.n	8011054 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 801104a:	2100      	movs	r1, #0
 801104c:	6878      	ldr	r0, [r7, #4]
 801104e:	f000 f949 	bl	80112e4 <USB_SetDevSpeed>
 8011052:	e008      	b.n	8011066 <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8011054:	2101      	movs	r1, #1
 8011056:	6878      	ldr	r0, [r7, #4]
 8011058:	f000 f944 	bl	80112e4 <USB_SetDevSpeed>
 801105c:	e003      	b.n	8011066 <USB_DevInit+0xce>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 801105e:	2103      	movs	r1, #3
 8011060:	6878      	ldr	r0, [r7, #4]
 8011062:	f000 f93f 	bl	80112e4 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8011066:	2110      	movs	r1, #16
 8011068:	6878      	ldr	r0, [r7, #4]
 801106a:	f000 f8f3 	bl	8011254 <USB_FlushTxFifo>
 801106e:	4603      	mov	r3, r0
 8011070:	2b00      	cmp	r3, #0
 8011072:	d001      	beq.n	8011078 <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 8011074:	2301      	movs	r3, #1
 8011076:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8011078:	6878      	ldr	r0, [r7, #4]
 801107a:	f000 f911 	bl	80112a0 <USB_FlushRxFifo>
 801107e:	4603      	mov	r3, r0
 8011080:	2b00      	cmp	r3, #0
 8011082:	d001      	beq.n	8011088 <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 8011084:	2301      	movs	r3, #1
 8011086:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8011088:	68fb      	ldr	r3, [r7, #12]
 801108a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801108e:	461a      	mov	r2, r3
 8011090:	2300      	movs	r3, #0
 8011092:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8011094:	68fb      	ldr	r3, [r7, #12]
 8011096:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801109a:	461a      	mov	r2, r3
 801109c:	2300      	movs	r3, #0
 801109e:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 80110a0:	68fb      	ldr	r3, [r7, #12]
 80110a2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80110a6:	461a      	mov	r2, r3
 80110a8:	2300      	movs	r3, #0
 80110aa:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80110ac:	2300      	movs	r3, #0
 80110ae:	613b      	str	r3, [r7, #16]
 80110b0:	e043      	b.n	801113a <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80110b2:	693b      	ldr	r3, [r7, #16]
 80110b4:	015a      	lsls	r2, r3, #5
 80110b6:	68fb      	ldr	r3, [r7, #12]
 80110b8:	4413      	add	r3, r2
 80110ba:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80110be:	681b      	ldr	r3, [r3, #0]
 80110c0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80110c4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80110c8:	d118      	bne.n	80110fc <USB_DevInit+0x164>
    {
      if (i == 0U)
 80110ca:	693b      	ldr	r3, [r7, #16]
 80110cc:	2b00      	cmp	r3, #0
 80110ce:	d10a      	bne.n	80110e6 <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80110d0:	693b      	ldr	r3, [r7, #16]
 80110d2:	015a      	lsls	r2, r3, #5
 80110d4:	68fb      	ldr	r3, [r7, #12]
 80110d6:	4413      	add	r3, r2
 80110d8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80110dc:	461a      	mov	r2, r3
 80110de:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80110e2:	6013      	str	r3, [r2, #0]
 80110e4:	e013      	b.n	801110e <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80110e6:	693b      	ldr	r3, [r7, #16]
 80110e8:	015a      	lsls	r2, r3, #5
 80110ea:	68fb      	ldr	r3, [r7, #12]
 80110ec:	4413      	add	r3, r2
 80110ee:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80110f2:	461a      	mov	r2, r3
 80110f4:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80110f8:	6013      	str	r3, [r2, #0]
 80110fa:	e008      	b.n	801110e <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 80110fc:	693b      	ldr	r3, [r7, #16]
 80110fe:	015a      	lsls	r2, r3, #5
 8011100:	68fb      	ldr	r3, [r7, #12]
 8011102:	4413      	add	r3, r2
 8011104:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8011108:	461a      	mov	r2, r3
 801110a:	2300      	movs	r3, #0
 801110c:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 801110e:	693b      	ldr	r3, [r7, #16]
 8011110:	015a      	lsls	r2, r3, #5
 8011112:	68fb      	ldr	r3, [r7, #12]
 8011114:	4413      	add	r3, r2
 8011116:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801111a:	461a      	mov	r2, r3
 801111c:	2300      	movs	r3, #0
 801111e:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8011120:	693b      	ldr	r3, [r7, #16]
 8011122:	015a      	lsls	r2, r3, #5
 8011124:	68fb      	ldr	r3, [r7, #12]
 8011126:	4413      	add	r3, r2
 8011128:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801112c:	461a      	mov	r2, r3
 801112e:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8011132:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8011134:	693b      	ldr	r3, [r7, #16]
 8011136:	3301      	adds	r3, #1
 8011138:	613b      	str	r3, [r7, #16]
 801113a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801113c:	693a      	ldr	r2, [r7, #16]
 801113e:	429a      	cmp	r2, r3
 8011140:	d3b7      	bcc.n	80110b2 <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8011142:	2300      	movs	r3, #0
 8011144:	613b      	str	r3, [r7, #16]
 8011146:	e043      	b.n	80111d0 <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8011148:	693b      	ldr	r3, [r7, #16]
 801114a:	015a      	lsls	r2, r3, #5
 801114c:	68fb      	ldr	r3, [r7, #12]
 801114e:	4413      	add	r3, r2
 8011150:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8011154:	681b      	ldr	r3, [r3, #0]
 8011156:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 801115a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 801115e:	d118      	bne.n	8011192 <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 8011160:	693b      	ldr	r3, [r7, #16]
 8011162:	2b00      	cmp	r3, #0
 8011164:	d10a      	bne.n	801117c <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8011166:	693b      	ldr	r3, [r7, #16]
 8011168:	015a      	lsls	r2, r3, #5
 801116a:	68fb      	ldr	r3, [r7, #12]
 801116c:	4413      	add	r3, r2
 801116e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8011172:	461a      	mov	r2, r3
 8011174:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8011178:	6013      	str	r3, [r2, #0]
 801117a:	e013      	b.n	80111a4 <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 801117c:	693b      	ldr	r3, [r7, #16]
 801117e:	015a      	lsls	r2, r3, #5
 8011180:	68fb      	ldr	r3, [r7, #12]
 8011182:	4413      	add	r3, r2
 8011184:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8011188:	461a      	mov	r2, r3
 801118a:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 801118e:	6013      	str	r3, [r2, #0]
 8011190:	e008      	b.n	80111a4 <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8011192:	693b      	ldr	r3, [r7, #16]
 8011194:	015a      	lsls	r2, r3, #5
 8011196:	68fb      	ldr	r3, [r7, #12]
 8011198:	4413      	add	r3, r2
 801119a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801119e:	461a      	mov	r2, r3
 80111a0:	2300      	movs	r3, #0
 80111a2:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 80111a4:	693b      	ldr	r3, [r7, #16]
 80111a6:	015a      	lsls	r2, r3, #5
 80111a8:	68fb      	ldr	r3, [r7, #12]
 80111aa:	4413      	add	r3, r2
 80111ac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80111b0:	461a      	mov	r2, r3
 80111b2:	2300      	movs	r3, #0
 80111b4:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80111b6:	693b      	ldr	r3, [r7, #16]
 80111b8:	015a      	lsls	r2, r3, #5
 80111ba:	68fb      	ldr	r3, [r7, #12]
 80111bc:	4413      	add	r3, r2
 80111be:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80111c2:	461a      	mov	r2, r3
 80111c4:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80111c8:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80111ca:	693b      	ldr	r3, [r7, #16]
 80111cc:	3301      	adds	r3, #1
 80111ce:	613b      	str	r3, [r7, #16]
 80111d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80111d2:	693a      	ldr	r2, [r7, #16]
 80111d4:	429a      	cmp	r2, r3
 80111d6:	d3b7      	bcc.n	8011148 <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80111d8:	68fb      	ldr	r3, [r7, #12]
 80111da:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80111de:	691b      	ldr	r3, [r3, #16]
 80111e0:	68fa      	ldr	r2, [r7, #12]
 80111e2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80111e6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80111ea:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80111ec:	687b      	ldr	r3, [r7, #4]
 80111ee:	2200      	movs	r2, #0
 80111f0:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 80111f2:	687b      	ldr	r3, [r7, #4]
 80111f4:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 80111f8:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80111fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80111fc:	2b00      	cmp	r3, #0
 80111fe:	d105      	bne.n	801120c <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8011200:	687b      	ldr	r3, [r7, #4]
 8011202:	699b      	ldr	r3, [r3, #24]
 8011204:	f043 0210 	orr.w	r2, r3, #16
 8011208:	687b      	ldr	r3, [r7, #4]
 801120a:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 801120c:	687b      	ldr	r3, [r7, #4]
 801120e:	699a      	ldr	r2, [r3, #24]
 8011210:	4b0e      	ldr	r3, [pc, #56]	; (801124c <USB_DevInit+0x2b4>)
 8011212:	4313      	orrs	r3, r2
 8011214:	687a      	ldr	r2, [r7, #4]
 8011216:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8011218:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801121a:	2b00      	cmp	r3, #0
 801121c:	d005      	beq.n	801122a <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 801121e:	687b      	ldr	r3, [r7, #4]
 8011220:	699b      	ldr	r3, [r3, #24]
 8011222:	f043 0208 	orr.w	r2, r3, #8
 8011226:	687b      	ldr	r3, [r7, #4]
 8011228:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 801122a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801122c:	2b01      	cmp	r3, #1
 801122e:	d105      	bne.n	801123c <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8011230:	687b      	ldr	r3, [r7, #4]
 8011232:	699a      	ldr	r2, [r3, #24]
 8011234:	4b06      	ldr	r3, [pc, #24]	; (8011250 <USB_DevInit+0x2b8>)
 8011236:	4313      	orrs	r3, r2
 8011238:	687a      	ldr	r2, [r7, #4]
 801123a:	6193      	str	r3, [r2, #24]
  }

  return ret;
 801123c:	7dfb      	ldrb	r3, [r7, #23]
}
 801123e:	4618      	mov	r0, r3
 8011240:	3718      	adds	r7, #24
 8011242:	46bd      	mov	sp, r7
 8011244:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8011248:	b004      	add	sp, #16
 801124a:	4770      	bx	lr
 801124c:	803c3800 	.word	0x803c3800
 8011250:	40000004 	.word	0x40000004

08011254 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8011254:	b480      	push	{r7}
 8011256:	b085      	sub	sp, #20
 8011258:	af00      	add	r7, sp, #0
 801125a:	6078      	str	r0, [r7, #4]
 801125c:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 801125e:	2300      	movs	r3, #0
 8011260:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8011262:	683b      	ldr	r3, [r7, #0]
 8011264:	019b      	lsls	r3, r3, #6
 8011266:	f043 0220 	orr.w	r2, r3, #32
 801126a:	687b      	ldr	r3, [r7, #4]
 801126c:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 801126e:	68fb      	ldr	r3, [r7, #12]
 8011270:	3301      	adds	r3, #1
 8011272:	60fb      	str	r3, [r7, #12]
 8011274:	68fb      	ldr	r3, [r7, #12]
 8011276:	4a09      	ldr	r2, [pc, #36]	; (801129c <USB_FlushTxFifo+0x48>)
 8011278:	4293      	cmp	r3, r2
 801127a:	d901      	bls.n	8011280 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 801127c:	2303      	movs	r3, #3
 801127e:	e006      	b.n	801128e <USB_FlushTxFifo+0x3a>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8011280:	687b      	ldr	r3, [r7, #4]
 8011282:	691b      	ldr	r3, [r3, #16]
 8011284:	f003 0320 	and.w	r3, r3, #32
 8011288:	2b20      	cmp	r3, #32
 801128a:	d0f0      	beq.n	801126e <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 801128c:	2300      	movs	r3, #0
}
 801128e:	4618      	mov	r0, r3
 8011290:	3714      	adds	r7, #20
 8011292:	46bd      	mov	sp, r7
 8011294:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011298:	4770      	bx	lr
 801129a:	bf00      	nop
 801129c:	00030d40 	.word	0x00030d40

080112a0 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80112a0:	b480      	push	{r7}
 80112a2:	b085      	sub	sp, #20
 80112a4:	af00      	add	r7, sp, #0
 80112a6:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 80112a8:	2300      	movs	r3, #0
 80112aa:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80112ac:	687b      	ldr	r3, [r7, #4]
 80112ae:	2210      	movs	r2, #16
 80112b0:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80112b2:	68fb      	ldr	r3, [r7, #12]
 80112b4:	3301      	adds	r3, #1
 80112b6:	60fb      	str	r3, [r7, #12]
 80112b8:	68fb      	ldr	r3, [r7, #12]
 80112ba:	4a09      	ldr	r2, [pc, #36]	; (80112e0 <USB_FlushRxFifo+0x40>)
 80112bc:	4293      	cmp	r3, r2
 80112be:	d901      	bls.n	80112c4 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 80112c0:	2303      	movs	r3, #3
 80112c2:	e006      	b.n	80112d2 <USB_FlushRxFifo+0x32>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80112c4:	687b      	ldr	r3, [r7, #4]
 80112c6:	691b      	ldr	r3, [r3, #16]
 80112c8:	f003 0310 	and.w	r3, r3, #16
 80112cc:	2b10      	cmp	r3, #16
 80112ce:	d0f0      	beq.n	80112b2 <USB_FlushRxFifo+0x12>

  return HAL_OK;
 80112d0:	2300      	movs	r3, #0
}
 80112d2:	4618      	mov	r0, r3
 80112d4:	3714      	adds	r7, #20
 80112d6:	46bd      	mov	sp, r7
 80112d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80112dc:	4770      	bx	lr
 80112de:	bf00      	nop
 80112e0:	00030d40 	.word	0x00030d40

080112e4 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 80112e4:	b480      	push	{r7}
 80112e6:	b085      	sub	sp, #20
 80112e8:	af00      	add	r7, sp, #0
 80112ea:	6078      	str	r0, [r7, #4]
 80112ec:	460b      	mov	r3, r1
 80112ee:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80112f0:	687b      	ldr	r3, [r7, #4]
 80112f2:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 80112f4:	68fb      	ldr	r3, [r7, #12]
 80112f6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80112fa:	681a      	ldr	r2, [r3, #0]
 80112fc:	78fb      	ldrb	r3, [r7, #3]
 80112fe:	68f9      	ldr	r1, [r7, #12]
 8011300:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8011304:	4313      	orrs	r3, r2
 8011306:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8011308:	2300      	movs	r3, #0
}
 801130a:	4618      	mov	r0, r3
 801130c:	3714      	adds	r7, #20
 801130e:	46bd      	mov	sp, r7
 8011310:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011314:	4770      	bx	lr

08011316 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg PCD_SPEED_HIGH: High speed mode
  *            @arg PCD_SPEED_FULL: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8011316:	b480      	push	{r7}
 8011318:	b087      	sub	sp, #28
 801131a:	af00      	add	r7, sp, #0
 801131c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801131e:	687b      	ldr	r3, [r7, #4]
 8011320:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8011322:	693b      	ldr	r3, [r7, #16]
 8011324:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8011328:	689b      	ldr	r3, [r3, #8]
 801132a:	f003 0306 	and.w	r3, r3, #6
 801132e:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8011330:	68fb      	ldr	r3, [r7, #12]
 8011332:	2b00      	cmp	r3, #0
 8011334:	d102      	bne.n	801133c <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8011336:	2300      	movs	r3, #0
 8011338:	75fb      	strb	r3, [r7, #23]
 801133a:	e00a      	b.n	8011352 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 801133c:	68fb      	ldr	r3, [r7, #12]
 801133e:	2b02      	cmp	r3, #2
 8011340:	d002      	beq.n	8011348 <USB_GetDevSpeed+0x32>
 8011342:	68fb      	ldr	r3, [r7, #12]
 8011344:	2b06      	cmp	r3, #6
 8011346:	d102      	bne.n	801134e <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8011348:	2302      	movs	r3, #2
 801134a:	75fb      	strb	r3, [r7, #23]
 801134c:	e001      	b.n	8011352 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 801134e:	230f      	movs	r3, #15
 8011350:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8011352:	7dfb      	ldrb	r3, [r7, #23]
}
 8011354:	4618      	mov	r0, r3
 8011356:	371c      	adds	r7, #28
 8011358:	46bd      	mov	sp, r7
 801135a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801135e:	4770      	bx	lr

08011360 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8011360:	b480      	push	{r7}
 8011362:	b085      	sub	sp, #20
 8011364:	af00      	add	r7, sp, #0
 8011366:	6078      	str	r0, [r7, #4]
 8011368:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801136a:	687b      	ldr	r3, [r7, #4]
 801136c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 801136e:	683b      	ldr	r3, [r7, #0]
 8011370:	781b      	ldrb	r3, [r3, #0]
 8011372:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8011374:	683b      	ldr	r3, [r7, #0]
 8011376:	785b      	ldrb	r3, [r3, #1]
 8011378:	2b01      	cmp	r3, #1
 801137a:	d139      	bne.n	80113f0 <USB_ActivateEndpoint+0x90>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 801137c:	68fb      	ldr	r3, [r7, #12]
 801137e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8011382:	69da      	ldr	r2, [r3, #28]
 8011384:	683b      	ldr	r3, [r7, #0]
 8011386:	781b      	ldrb	r3, [r3, #0]
 8011388:	f003 030f 	and.w	r3, r3, #15
 801138c:	2101      	movs	r1, #1
 801138e:	fa01 f303 	lsl.w	r3, r1, r3
 8011392:	b29b      	uxth	r3, r3
 8011394:	68f9      	ldr	r1, [r7, #12]
 8011396:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 801139a:	4313      	orrs	r3, r2
 801139c:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 801139e:	68bb      	ldr	r3, [r7, #8]
 80113a0:	015a      	lsls	r2, r3, #5
 80113a2:	68fb      	ldr	r3, [r7, #12]
 80113a4:	4413      	add	r3, r2
 80113a6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80113aa:	681b      	ldr	r3, [r3, #0]
 80113ac:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80113b0:	2b00      	cmp	r3, #0
 80113b2:	d153      	bne.n	801145c <USB_ActivateEndpoint+0xfc>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80113b4:	68bb      	ldr	r3, [r7, #8]
 80113b6:	015a      	lsls	r2, r3, #5
 80113b8:	68fb      	ldr	r3, [r7, #12]
 80113ba:	4413      	add	r3, r2
 80113bc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80113c0:	681a      	ldr	r2, [r3, #0]
 80113c2:	683b      	ldr	r3, [r7, #0]
 80113c4:	689b      	ldr	r3, [r3, #8]
 80113c6:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80113ca:	683b      	ldr	r3, [r7, #0]
 80113cc:	78db      	ldrb	r3, [r3, #3]
 80113ce:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80113d0:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80113d2:	68bb      	ldr	r3, [r7, #8]
 80113d4:	059b      	lsls	r3, r3, #22
 80113d6:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80113d8:	431a      	orrs	r2, r3
 80113da:	68bb      	ldr	r3, [r7, #8]
 80113dc:	0159      	lsls	r1, r3, #5
 80113de:	68fb      	ldr	r3, [r7, #12]
 80113e0:	440b      	add	r3, r1
 80113e2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80113e6:	4619      	mov	r1, r3
 80113e8:	4b20      	ldr	r3, [pc, #128]	; (801146c <USB_ActivateEndpoint+0x10c>)
 80113ea:	4313      	orrs	r3, r2
 80113ec:	600b      	str	r3, [r1, #0]
 80113ee:	e035      	b.n	801145c <USB_ActivateEndpoint+0xfc>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 80113f0:	68fb      	ldr	r3, [r7, #12]
 80113f2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80113f6:	69da      	ldr	r2, [r3, #28]
 80113f8:	683b      	ldr	r3, [r7, #0]
 80113fa:	781b      	ldrb	r3, [r3, #0]
 80113fc:	f003 030f 	and.w	r3, r3, #15
 8011400:	2101      	movs	r1, #1
 8011402:	fa01 f303 	lsl.w	r3, r1, r3
 8011406:	041b      	lsls	r3, r3, #16
 8011408:	68f9      	ldr	r1, [r7, #12]
 801140a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 801140e:	4313      	orrs	r3, r2
 8011410:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8011412:	68bb      	ldr	r3, [r7, #8]
 8011414:	015a      	lsls	r2, r3, #5
 8011416:	68fb      	ldr	r3, [r7, #12]
 8011418:	4413      	add	r3, r2
 801141a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801141e:	681b      	ldr	r3, [r3, #0]
 8011420:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8011424:	2b00      	cmp	r3, #0
 8011426:	d119      	bne.n	801145c <USB_ActivateEndpoint+0xfc>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8011428:	68bb      	ldr	r3, [r7, #8]
 801142a:	015a      	lsls	r2, r3, #5
 801142c:	68fb      	ldr	r3, [r7, #12]
 801142e:	4413      	add	r3, r2
 8011430:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8011434:	681a      	ldr	r2, [r3, #0]
 8011436:	683b      	ldr	r3, [r7, #0]
 8011438:	689b      	ldr	r3, [r3, #8]
 801143a:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 801143e:	683b      	ldr	r3, [r7, #0]
 8011440:	78db      	ldrb	r3, [r3, #3]
 8011442:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8011444:	430b      	orrs	r3, r1
 8011446:	431a      	orrs	r2, r3
 8011448:	68bb      	ldr	r3, [r7, #8]
 801144a:	0159      	lsls	r1, r3, #5
 801144c:	68fb      	ldr	r3, [r7, #12]
 801144e:	440b      	add	r3, r1
 8011450:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8011454:	4619      	mov	r1, r3
 8011456:	4b05      	ldr	r3, [pc, #20]	; (801146c <USB_ActivateEndpoint+0x10c>)
 8011458:	4313      	orrs	r3, r2
 801145a:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 801145c:	2300      	movs	r3, #0
}
 801145e:	4618      	mov	r0, r3
 8011460:	3714      	adds	r7, #20
 8011462:	46bd      	mov	sp, r7
 8011464:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011468:	4770      	bx	lr
 801146a:	bf00      	nop
 801146c:	10008000 	.word	0x10008000

08011470 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8011470:	b480      	push	{r7}
 8011472:	b085      	sub	sp, #20
 8011474:	af00      	add	r7, sp, #0
 8011476:	6078      	str	r0, [r7, #4]
 8011478:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801147a:	687b      	ldr	r3, [r7, #4]
 801147c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 801147e:	683b      	ldr	r3, [r7, #0]
 8011480:	781b      	ldrb	r3, [r3, #0]
 8011482:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8011484:	683b      	ldr	r3, [r7, #0]
 8011486:	785b      	ldrb	r3, [r3, #1]
 8011488:	2b01      	cmp	r3, #1
 801148a:	d161      	bne.n	8011550 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 801148c:	68bb      	ldr	r3, [r7, #8]
 801148e:	015a      	lsls	r2, r3, #5
 8011490:	68fb      	ldr	r3, [r7, #12]
 8011492:	4413      	add	r3, r2
 8011494:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8011498:	681b      	ldr	r3, [r3, #0]
 801149a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 801149e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80114a2:	d11f      	bne.n	80114e4 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 80114a4:	68bb      	ldr	r3, [r7, #8]
 80114a6:	015a      	lsls	r2, r3, #5
 80114a8:	68fb      	ldr	r3, [r7, #12]
 80114aa:	4413      	add	r3, r2
 80114ac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80114b0:	681b      	ldr	r3, [r3, #0]
 80114b2:	68ba      	ldr	r2, [r7, #8]
 80114b4:	0151      	lsls	r1, r2, #5
 80114b6:	68fa      	ldr	r2, [r7, #12]
 80114b8:	440a      	add	r2, r1
 80114ba:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80114be:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80114c2:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 80114c4:	68bb      	ldr	r3, [r7, #8]
 80114c6:	015a      	lsls	r2, r3, #5
 80114c8:	68fb      	ldr	r3, [r7, #12]
 80114ca:	4413      	add	r3, r2
 80114cc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80114d0:	681b      	ldr	r3, [r3, #0]
 80114d2:	68ba      	ldr	r2, [r7, #8]
 80114d4:	0151      	lsls	r1, r2, #5
 80114d6:	68fa      	ldr	r2, [r7, #12]
 80114d8:	440a      	add	r2, r1
 80114da:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80114de:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80114e2:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80114e4:	68fb      	ldr	r3, [r7, #12]
 80114e6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80114ea:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80114ec:	683b      	ldr	r3, [r7, #0]
 80114ee:	781b      	ldrb	r3, [r3, #0]
 80114f0:	f003 030f 	and.w	r3, r3, #15
 80114f4:	2101      	movs	r1, #1
 80114f6:	fa01 f303 	lsl.w	r3, r1, r3
 80114fa:	b29b      	uxth	r3, r3
 80114fc:	43db      	mvns	r3, r3
 80114fe:	68f9      	ldr	r1, [r7, #12]
 8011500:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8011504:	4013      	ands	r3, r2
 8011506:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8011508:	68fb      	ldr	r3, [r7, #12]
 801150a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801150e:	69da      	ldr	r2, [r3, #28]
 8011510:	683b      	ldr	r3, [r7, #0]
 8011512:	781b      	ldrb	r3, [r3, #0]
 8011514:	f003 030f 	and.w	r3, r3, #15
 8011518:	2101      	movs	r1, #1
 801151a:	fa01 f303 	lsl.w	r3, r1, r3
 801151e:	b29b      	uxth	r3, r3
 8011520:	43db      	mvns	r3, r3
 8011522:	68f9      	ldr	r1, [r7, #12]
 8011524:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8011528:	4013      	ands	r3, r2
 801152a:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 801152c:	68bb      	ldr	r3, [r7, #8]
 801152e:	015a      	lsls	r2, r3, #5
 8011530:	68fb      	ldr	r3, [r7, #12]
 8011532:	4413      	add	r3, r2
 8011534:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8011538:	681a      	ldr	r2, [r3, #0]
 801153a:	68bb      	ldr	r3, [r7, #8]
 801153c:	0159      	lsls	r1, r3, #5
 801153e:	68fb      	ldr	r3, [r7, #12]
 8011540:	440b      	add	r3, r1
 8011542:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8011546:	4619      	mov	r1, r3
 8011548:	4b35      	ldr	r3, [pc, #212]	; (8011620 <USB_DeactivateEndpoint+0x1b0>)
 801154a:	4013      	ands	r3, r2
 801154c:	600b      	str	r3, [r1, #0]
 801154e:	e060      	b.n	8011612 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8011550:	68bb      	ldr	r3, [r7, #8]
 8011552:	015a      	lsls	r2, r3, #5
 8011554:	68fb      	ldr	r3, [r7, #12]
 8011556:	4413      	add	r3, r2
 8011558:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801155c:	681b      	ldr	r3, [r3, #0]
 801155e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8011562:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8011566:	d11f      	bne.n	80115a8 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8011568:	68bb      	ldr	r3, [r7, #8]
 801156a:	015a      	lsls	r2, r3, #5
 801156c:	68fb      	ldr	r3, [r7, #12]
 801156e:	4413      	add	r3, r2
 8011570:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8011574:	681b      	ldr	r3, [r3, #0]
 8011576:	68ba      	ldr	r2, [r7, #8]
 8011578:	0151      	lsls	r1, r2, #5
 801157a:	68fa      	ldr	r2, [r7, #12]
 801157c:	440a      	add	r2, r1
 801157e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8011582:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8011586:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8011588:	68bb      	ldr	r3, [r7, #8]
 801158a:	015a      	lsls	r2, r3, #5
 801158c:	68fb      	ldr	r3, [r7, #12]
 801158e:	4413      	add	r3, r2
 8011590:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8011594:	681b      	ldr	r3, [r3, #0]
 8011596:	68ba      	ldr	r2, [r7, #8]
 8011598:	0151      	lsls	r1, r2, #5
 801159a:	68fa      	ldr	r2, [r7, #12]
 801159c:	440a      	add	r2, r1
 801159e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80115a2:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80115a6:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80115a8:	68fb      	ldr	r3, [r7, #12]
 80115aa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80115ae:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80115b0:	683b      	ldr	r3, [r7, #0]
 80115b2:	781b      	ldrb	r3, [r3, #0]
 80115b4:	f003 030f 	and.w	r3, r3, #15
 80115b8:	2101      	movs	r1, #1
 80115ba:	fa01 f303 	lsl.w	r3, r1, r3
 80115be:	041b      	lsls	r3, r3, #16
 80115c0:	43db      	mvns	r3, r3
 80115c2:	68f9      	ldr	r1, [r7, #12]
 80115c4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80115c8:	4013      	ands	r3, r2
 80115ca:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80115cc:	68fb      	ldr	r3, [r7, #12]
 80115ce:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80115d2:	69da      	ldr	r2, [r3, #28]
 80115d4:	683b      	ldr	r3, [r7, #0]
 80115d6:	781b      	ldrb	r3, [r3, #0]
 80115d8:	f003 030f 	and.w	r3, r3, #15
 80115dc:	2101      	movs	r1, #1
 80115de:	fa01 f303 	lsl.w	r3, r1, r3
 80115e2:	041b      	lsls	r3, r3, #16
 80115e4:	43db      	mvns	r3, r3
 80115e6:	68f9      	ldr	r1, [r7, #12]
 80115e8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80115ec:	4013      	ands	r3, r2
 80115ee:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 80115f0:	68bb      	ldr	r3, [r7, #8]
 80115f2:	015a      	lsls	r2, r3, #5
 80115f4:	68fb      	ldr	r3, [r7, #12]
 80115f6:	4413      	add	r3, r2
 80115f8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80115fc:	681a      	ldr	r2, [r3, #0]
 80115fe:	68bb      	ldr	r3, [r7, #8]
 8011600:	0159      	lsls	r1, r3, #5
 8011602:	68fb      	ldr	r3, [r7, #12]
 8011604:	440b      	add	r3, r1
 8011606:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801160a:	4619      	mov	r1, r3
 801160c:	4b05      	ldr	r3, [pc, #20]	; (8011624 <USB_DeactivateEndpoint+0x1b4>)
 801160e:	4013      	ands	r3, r2
 8011610:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8011612:	2300      	movs	r3, #0
}
 8011614:	4618      	mov	r0, r3
 8011616:	3714      	adds	r7, #20
 8011618:	46bd      	mov	sp, r7
 801161a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801161e:	4770      	bx	lr
 8011620:	ec337800 	.word	0xec337800
 8011624:	eff37800 	.word	0xeff37800

08011628 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8011628:	b580      	push	{r7, lr}
 801162a:	b08a      	sub	sp, #40	; 0x28
 801162c:	af02      	add	r7, sp, #8
 801162e:	60f8      	str	r0, [r7, #12]
 8011630:	60b9      	str	r1, [r7, #8]
 8011632:	4613      	mov	r3, r2
 8011634:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8011636:	68fb      	ldr	r3, [r7, #12]
 8011638:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 801163a:	68bb      	ldr	r3, [r7, #8]
 801163c:	781b      	ldrb	r3, [r3, #0]
 801163e:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8011640:	68bb      	ldr	r3, [r7, #8]
 8011642:	785b      	ldrb	r3, [r3, #1]
 8011644:	2b01      	cmp	r3, #1
 8011646:	f040 8163 	bne.w	8011910 <USB_EPStartXfer+0x2e8>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 801164a:	68bb      	ldr	r3, [r7, #8]
 801164c:	695b      	ldr	r3, [r3, #20]
 801164e:	2b00      	cmp	r3, #0
 8011650:	d132      	bne.n	80116b8 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8011652:	69bb      	ldr	r3, [r7, #24]
 8011654:	015a      	lsls	r2, r3, #5
 8011656:	69fb      	ldr	r3, [r7, #28]
 8011658:	4413      	add	r3, r2
 801165a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801165e:	691a      	ldr	r2, [r3, #16]
 8011660:	69bb      	ldr	r3, [r7, #24]
 8011662:	0159      	lsls	r1, r3, #5
 8011664:	69fb      	ldr	r3, [r7, #28]
 8011666:	440b      	add	r3, r1
 8011668:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801166c:	4619      	mov	r1, r3
 801166e:	4ba5      	ldr	r3, [pc, #660]	; (8011904 <USB_EPStartXfer+0x2dc>)
 8011670:	4013      	ands	r3, r2
 8011672:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8011674:	69bb      	ldr	r3, [r7, #24]
 8011676:	015a      	lsls	r2, r3, #5
 8011678:	69fb      	ldr	r3, [r7, #28]
 801167a:	4413      	add	r3, r2
 801167c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8011680:	691b      	ldr	r3, [r3, #16]
 8011682:	69ba      	ldr	r2, [r7, #24]
 8011684:	0151      	lsls	r1, r2, #5
 8011686:	69fa      	ldr	r2, [r7, #28]
 8011688:	440a      	add	r2, r1
 801168a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801168e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8011692:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8011694:	69bb      	ldr	r3, [r7, #24]
 8011696:	015a      	lsls	r2, r3, #5
 8011698:	69fb      	ldr	r3, [r7, #28]
 801169a:	4413      	add	r3, r2
 801169c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80116a0:	691a      	ldr	r2, [r3, #16]
 80116a2:	69bb      	ldr	r3, [r7, #24]
 80116a4:	0159      	lsls	r1, r3, #5
 80116a6:	69fb      	ldr	r3, [r7, #28]
 80116a8:	440b      	add	r3, r1
 80116aa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80116ae:	4619      	mov	r1, r3
 80116b0:	4b95      	ldr	r3, [pc, #596]	; (8011908 <USB_EPStartXfer+0x2e0>)
 80116b2:	4013      	ands	r3, r2
 80116b4:	610b      	str	r3, [r1, #16]
 80116b6:	e074      	b.n	80117a2 <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80116b8:	69bb      	ldr	r3, [r7, #24]
 80116ba:	015a      	lsls	r2, r3, #5
 80116bc:	69fb      	ldr	r3, [r7, #28]
 80116be:	4413      	add	r3, r2
 80116c0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80116c4:	691a      	ldr	r2, [r3, #16]
 80116c6:	69bb      	ldr	r3, [r7, #24]
 80116c8:	0159      	lsls	r1, r3, #5
 80116ca:	69fb      	ldr	r3, [r7, #28]
 80116cc:	440b      	add	r3, r1
 80116ce:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80116d2:	4619      	mov	r1, r3
 80116d4:	4b8c      	ldr	r3, [pc, #560]	; (8011908 <USB_EPStartXfer+0x2e0>)
 80116d6:	4013      	ands	r3, r2
 80116d8:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80116da:	69bb      	ldr	r3, [r7, #24]
 80116dc:	015a      	lsls	r2, r3, #5
 80116de:	69fb      	ldr	r3, [r7, #28]
 80116e0:	4413      	add	r3, r2
 80116e2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80116e6:	691a      	ldr	r2, [r3, #16]
 80116e8:	69bb      	ldr	r3, [r7, #24]
 80116ea:	0159      	lsls	r1, r3, #5
 80116ec:	69fb      	ldr	r3, [r7, #28]
 80116ee:	440b      	add	r3, r1
 80116f0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80116f4:	4619      	mov	r1, r3
 80116f6:	4b83      	ldr	r3, [pc, #524]	; (8011904 <USB_EPStartXfer+0x2dc>)
 80116f8:	4013      	ands	r3, r2
 80116fa:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 80116fc:	69bb      	ldr	r3, [r7, #24]
 80116fe:	015a      	lsls	r2, r3, #5
 8011700:	69fb      	ldr	r3, [r7, #28]
 8011702:	4413      	add	r3, r2
 8011704:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8011708:	691a      	ldr	r2, [r3, #16]
 801170a:	68bb      	ldr	r3, [r7, #8]
 801170c:	6959      	ldr	r1, [r3, #20]
 801170e:	68bb      	ldr	r3, [r7, #8]
 8011710:	689b      	ldr	r3, [r3, #8]
 8011712:	440b      	add	r3, r1
 8011714:	1e59      	subs	r1, r3, #1
 8011716:	68bb      	ldr	r3, [r7, #8]
 8011718:	689b      	ldr	r3, [r3, #8]
 801171a:	fbb1 f3f3 	udiv	r3, r1, r3
 801171e:	04d9      	lsls	r1, r3, #19
 8011720:	4b7a      	ldr	r3, [pc, #488]	; (801190c <USB_EPStartXfer+0x2e4>)
 8011722:	400b      	ands	r3, r1
 8011724:	69b9      	ldr	r1, [r7, #24]
 8011726:	0148      	lsls	r0, r1, #5
 8011728:	69f9      	ldr	r1, [r7, #28]
 801172a:	4401      	add	r1, r0
 801172c:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8011730:	4313      	orrs	r3, r2
 8011732:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8011734:	69bb      	ldr	r3, [r7, #24]
 8011736:	015a      	lsls	r2, r3, #5
 8011738:	69fb      	ldr	r3, [r7, #28]
 801173a:	4413      	add	r3, r2
 801173c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8011740:	691a      	ldr	r2, [r3, #16]
 8011742:	68bb      	ldr	r3, [r7, #8]
 8011744:	695b      	ldr	r3, [r3, #20]
 8011746:	f3c3 0312 	ubfx	r3, r3, #0, #19
 801174a:	69b9      	ldr	r1, [r7, #24]
 801174c:	0148      	lsls	r0, r1, #5
 801174e:	69f9      	ldr	r1, [r7, #28]
 8011750:	4401      	add	r1, r0
 8011752:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8011756:	4313      	orrs	r3, r2
 8011758:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 801175a:	68bb      	ldr	r3, [r7, #8]
 801175c:	78db      	ldrb	r3, [r3, #3]
 801175e:	2b01      	cmp	r3, #1
 8011760:	d11f      	bne.n	80117a2 <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8011762:	69bb      	ldr	r3, [r7, #24]
 8011764:	015a      	lsls	r2, r3, #5
 8011766:	69fb      	ldr	r3, [r7, #28]
 8011768:	4413      	add	r3, r2
 801176a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801176e:	691b      	ldr	r3, [r3, #16]
 8011770:	69ba      	ldr	r2, [r7, #24]
 8011772:	0151      	lsls	r1, r2, #5
 8011774:	69fa      	ldr	r2, [r7, #28]
 8011776:	440a      	add	r2, r1
 8011778:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801177c:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8011780:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8011782:	69bb      	ldr	r3, [r7, #24]
 8011784:	015a      	lsls	r2, r3, #5
 8011786:	69fb      	ldr	r3, [r7, #28]
 8011788:	4413      	add	r3, r2
 801178a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801178e:	691b      	ldr	r3, [r3, #16]
 8011790:	69ba      	ldr	r2, [r7, #24]
 8011792:	0151      	lsls	r1, r2, #5
 8011794:	69fa      	ldr	r2, [r7, #28]
 8011796:	440a      	add	r2, r1
 8011798:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801179c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80117a0:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 80117a2:	79fb      	ldrb	r3, [r7, #7]
 80117a4:	2b01      	cmp	r3, #1
 80117a6:	d14b      	bne.n	8011840 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 80117a8:	68bb      	ldr	r3, [r7, #8]
 80117aa:	691b      	ldr	r3, [r3, #16]
 80117ac:	2b00      	cmp	r3, #0
 80117ae:	d009      	beq.n	80117c4 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 80117b0:	69bb      	ldr	r3, [r7, #24]
 80117b2:	015a      	lsls	r2, r3, #5
 80117b4:	69fb      	ldr	r3, [r7, #28]
 80117b6:	4413      	add	r3, r2
 80117b8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80117bc:	461a      	mov	r2, r3
 80117be:	68bb      	ldr	r3, [r7, #8]
 80117c0:	691b      	ldr	r3, [r3, #16]
 80117c2:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 80117c4:	68bb      	ldr	r3, [r7, #8]
 80117c6:	78db      	ldrb	r3, [r3, #3]
 80117c8:	2b01      	cmp	r3, #1
 80117ca:	d128      	bne.n	801181e <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80117cc:	69fb      	ldr	r3, [r7, #28]
 80117ce:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80117d2:	689b      	ldr	r3, [r3, #8]
 80117d4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80117d8:	2b00      	cmp	r3, #0
 80117da:	d110      	bne.n	80117fe <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80117dc:	69bb      	ldr	r3, [r7, #24]
 80117de:	015a      	lsls	r2, r3, #5
 80117e0:	69fb      	ldr	r3, [r7, #28]
 80117e2:	4413      	add	r3, r2
 80117e4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80117e8:	681b      	ldr	r3, [r3, #0]
 80117ea:	69ba      	ldr	r2, [r7, #24]
 80117ec:	0151      	lsls	r1, r2, #5
 80117ee:	69fa      	ldr	r2, [r7, #28]
 80117f0:	440a      	add	r2, r1
 80117f2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80117f6:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80117fa:	6013      	str	r3, [r2, #0]
 80117fc:	e00f      	b.n	801181e <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80117fe:	69bb      	ldr	r3, [r7, #24]
 8011800:	015a      	lsls	r2, r3, #5
 8011802:	69fb      	ldr	r3, [r7, #28]
 8011804:	4413      	add	r3, r2
 8011806:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801180a:	681b      	ldr	r3, [r3, #0]
 801180c:	69ba      	ldr	r2, [r7, #24]
 801180e:	0151      	lsls	r1, r2, #5
 8011810:	69fa      	ldr	r2, [r7, #28]
 8011812:	440a      	add	r2, r1
 8011814:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8011818:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 801181c:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 801181e:	69bb      	ldr	r3, [r7, #24]
 8011820:	015a      	lsls	r2, r3, #5
 8011822:	69fb      	ldr	r3, [r7, #28]
 8011824:	4413      	add	r3, r2
 8011826:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801182a:	681b      	ldr	r3, [r3, #0]
 801182c:	69ba      	ldr	r2, [r7, #24]
 801182e:	0151      	lsls	r1, r2, #5
 8011830:	69fa      	ldr	r2, [r7, #28]
 8011832:	440a      	add	r2, r1
 8011834:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8011838:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 801183c:	6013      	str	r3, [r2, #0]
 801183e:	e133      	b.n	8011aa8 <USB_EPStartXfer+0x480>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8011840:	69bb      	ldr	r3, [r7, #24]
 8011842:	015a      	lsls	r2, r3, #5
 8011844:	69fb      	ldr	r3, [r7, #28]
 8011846:	4413      	add	r3, r2
 8011848:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801184c:	681b      	ldr	r3, [r3, #0]
 801184e:	69ba      	ldr	r2, [r7, #24]
 8011850:	0151      	lsls	r1, r2, #5
 8011852:	69fa      	ldr	r2, [r7, #28]
 8011854:	440a      	add	r2, r1
 8011856:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801185a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 801185e:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8011860:	68bb      	ldr	r3, [r7, #8]
 8011862:	78db      	ldrb	r3, [r3, #3]
 8011864:	2b01      	cmp	r3, #1
 8011866:	d015      	beq.n	8011894 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8011868:	68bb      	ldr	r3, [r7, #8]
 801186a:	695b      	ldr	r3, [r3, #20]
 801186c:	2b00      	cmp	r3, #0
 801186e:	f000 811b 	beq.w	8011aa8 <USB_EPStartXfer+0x480>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8011872:	69fb      	ldr	r3, [r7, #28]
 8011874:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8011878:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 801187a:	68bb      	ldr	r3, [r7, #8]
 801187c:	781b      	ldrb	r3, [r3, #0]
 801187e:	f003 030f 	and.w	r3, r3, #15
 8011882:	2101      	movs	r1, #1
 8011884:	fa01 f303 	lsl.w	r3, r1, r3
 8011888:	69f9      	ldr	r1, [r7, #28]
 801188a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 801188e:	4313      	orrs	r3, r2
 8011890:	634b      	str	r3, [r1, #52]	; 0x34
 8011892:	e109      	b.n	8011aa8 <USB_EPStartXfer+0x480>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8011894:	69fb      	ldr	r3, [r7, #28]
 8011896:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801189a:	689b      	ldr	r3, [r3, #8]
 801189c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80118a0:	2b00      	cmp	r3, #0
 80118a2:	d110      	bne.n	80118c6 <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80118a4:	69bb      	ldr	r3, [r7, #24]
 80118a6:	015a      	lsls	r2, r3, #5
 80118a8:	69fb      	ldr	r3, [r7, #28]
 80118aa:	4413      	add	r3, r2
 80118ac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80118b0:	681b      	ldr	r3, [r3, #0]
 80118b2:	69ba      	ldr	r2, [r7, #24]
 80118b4:	0151      	lsls	r1, r2, #5
 80118b6:	69fa      	ldr	r2, [r7, #28]
 80118b8:	440a      	add	r2, r1
 80118ba:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80118be:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80118c2:	6013      	str	r3, [r2, #0]
 80118c4:	e00f      	b.n	80118e6 <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80118c6:	69bb      	ldr	r3, [r7, #24]
 80118c8:	015a      	lsls	r2, r3, #5
 80118ca:	69fb      	ldr	r3, [r7, #28]
 80118cc:	4413      	add	r3, r2
 80118ce:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80118d2:	681b      	ldr	r3, [r3, #0]
 80118d4:	69ba      	ldr	r2, [r7, #24]
 80118d6:	0151      	lsls	r1, r2, #5
 80118d8:	69fa      	ldr	r2, [r7, #28]
 80118da:	440a      	add	r2, r1
 80118dc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80118e0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80118e4:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 80118e6:	68bb      	ldr	r3, [r7, #8]
 80118e8:	68d9      	ldr	r1, [r3, #12]
 80118ea:	68bb      	ldr	r3, [r7, #8]
 80118ec:	781a      	ldrb	r2, [r3, #0]
 80118ee:	68bb      	ldr	r3, [r7, #8]
 80118f0:	695b      	ldr	r3, [r3, #20]
 80118f2:	b298      	uxth	r0, r3
 80118f4:	79fb      	ldrb	r3, [r7, #7]
 80118f6:	9300      	str	r3, [sp, #0]
 80118f8:	4603      	mov	r3, r0
 80118fa:	68f8      	ldr	r0, [r7, #12]
 80118fc:	f000 fa38 	bl	8011d70 <USB_WritePacket>
 8011900:	e0d2      	b.n	8011aa8 <USB_EPStartXfer+0x480>
 8011902:	bf00      	nop
 8011904:	e007ffff 	.word	0xe007ffff
 8011908:	fff80000 	.word	0xfff80000
 801190c:	1ff80000 	.word	0x1ff80000
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8011910:	69bb      	ldr	r3, [r7, #24]
 8011912:	015a      	lsls	r2, r3, #5
 8011914:	69fb      	ldr	r3, [r7, #28]
 8011916:	4413      	add	r3, r2
 8011918:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801191c:	691a      	ldr	r2, [r3, #16]
 801191e:	69bb      	ldr	r3, [r7, #24]
 8011920:	0159      	lsls	r1, r3, #5
 8011922:	69fb      	ldr	r3, [r7, #28]
 8011924:	440b      	add	r3, r1
 8011926:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801192a:	4619      	mov	r1, r3
 801192c:	4b61      	ldr	r3, [pc, #388]	; (8011ab4 <USB_EPStartXfer+0x48c>)
 801192e:	4013      	ands	r3, r2
 8011930:	610b      	str	r3, [r1, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8011932:	69bb      	ldr	r3, [r7, #24]
 8011934:	015a      	lsls	r2, r3, #5
 8011936:	69fb      	ldr	r3, [r7, #28]
 8011938:	4413      	add	r3, r2
 801193a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801193e:	691a      	ldr	r2, [r3, #16]
 8011940:	69bb      	ldr	r3, [r7, #24]
 8011942:	0159      	lsls	r1, r3, #5
 8011944:	69fb      	ldr	r3, [r7, #28]
 8011946:	440b      	add	r3, r1
 8011948:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801194c:	4619      	mov	r1, r3
 801194e:	4b5a      	ldr	r3, [pc, #360]	; (8011ab8 <USB_EPStartXfer+0x490>)
 8011950:	4013      	ands	r3, r2
 8011952:	610b      	str	r3, [r1, #16]

    if (ep->xfer_len == 0U)
 8011954:	68bb      	ldr	r3, [r7, #8]
 8011956:	695b      	ldr	r3, [r3, #20]
 8011958:	2b00      	cmp	r3, #0
 801195a:	d123      	bne.n	80119a4 <USB_EPStartXfer+0x37c>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 801195c:	69bb      	ldr	r3, [r7, #24]
 801195e:	015a      	lsls	r2, r3, #5
 8011960:	69fb      	ldr	r3, [r7, #28]
 8011962:	4413      	add	r3, r2
 8011964:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8011968:	691a      	ldr	r2, [r3, #16]
 801196a:	68bb      	ldr	r3, [r7, #8]
 801196c:	689b      	ldr	r3, [r3, #8]
 801196e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8011972:	69b9      	ldr	r1, [r7, #24]
 8011974:	0148      	lsls	r0, r1, #5
 8011976:	69f9      	ldr	r1, [r7, #28]
 8011978:	4401      	add	r1, r0
 801197a:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 801197e:	4313      	orrs	r3, r2
 8011980:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8011982:	69bb      	ldr	r3, [r7, #24]
 8011984:	015a      	lsls	r2, r3, #5
 8011986:	69fb      	ldr	r3, [r7, #28]
 8011988:	4413      	add	r3, r2
 801198a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801198e:	691b      	ldr	r3, [r3, #16]
 8011990:	69ba      	ldr	r2, [r7, #24]
 8011992:	0151      	lsls	r1, r2, #5
 8011994:	69fa      	ldr	r2, [r7, #28]
 8011996:	440a      	add	r2, r1
 8011998:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 801199c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80119a0:	6113      	str	r3, [r2, #16]
 80119a2:	e033      	b.n	8011a0c <USB_EPStartXfer+0x3e4>
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 80119a4:	68bb      	ldr	r3, [r7, #8]
 80119a6:	695a      	ldr	r2, [r3, #20]
 80119a8:	68bb      	ldr	r3, [r7, #8]
 80119aa:	689b      	ldr	r3, [r3, #8]
 80119ac:	4413      	add	r3, r2
 80119ae:	1e5a      	subs	r2, r3, #1
 80119b0:	68bb      	ldr	r3, [r7, #8]
 80119b2:	689b      	ldr	r3, [r3, #8]
 80119b4:	fbb2 f3f3 	udiv	r3, r2, r3
 80119b8:	82fb      	strh	r3, [r7, #22]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 80119ba:	69bb      	ldr	r3, [r7, #24]
 80119bc:	015a      	lsls	r2, r3, #5
 80119be:	69fb      	ldr	r3, [r7, #28]
 80119c0:	4413      	add	r3, r2
 80119c2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80119c6:	691a      	ldr	r2, [r3, #16]
 80119c8:	8afb      	ldrh	r3, [r7, #22]
 80119ca:	04d9      	lsls	r1, r3, #19
 80119cc:	4b3b      	ldr	r3, [pc, #236]	; (8011abc <USB_EPStartXfer+0x494>)
 80119ce:	400b      	ands	r3, r1
 80119d0:	69b9      	ldr	r1, [r7, #24]
 80119d2:	0148      	lsls	r0, r1, #5
 80119d4:	69f9      	ldr	r1, [r7, #28]
 80119d6:	4401      	add	r1, r0
 80119d8:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80119dc:	4313      	orrs	r3, r2
 80119de:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 80119e0:	69bb      	ldr	r3, [r7, #24]
 80119e2:	015a      	lsls	r2, r3, #5
 80119e4:	69fb      	ldr	r3, [r7, #28]
 80119e6:	4413      	add	r3, r2
 80119e8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80119ec:	691a      	ldr	r2, [r3, #16]
 80119ee:	68bb      	ldr	r3, [r7, #8]
 80119f0:	689b      	ldr	r3, [r3, #8]
 80119f2:	8af9      	ldrh	r1, [r7, #22]
 80119f4:	fb01 f303 	mul.w	r3, r1, r3
 80119f8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80119fc:	69b9      	ldr	r1, [r7, #24]
 80119fe:	0148      	lsls	r0, r1, #5
 8011a00:	69f9      	ldr	r1, [r7, #28]
 8011a02:	4401      	add	r1, r0
 8011a04:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8011a08:	4313      	orrs	r3, r2
 8011a0a:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8011a0c:	79fb      	ldrb	r3, [r7, #7]
 8011a0e:	2b01      	cmp	r3, #1
 8011a10:	d10d      	bne.n	8011a2e <USB_EPStartXfer+0x406>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8011a12:	68bb      	ldr	r3, [r7, #8]
 8011a14:	68db      	ldr	r3, [r3, #12]
 8011a16:	2b00      	cmp	r3, #0
 8011a18:	d009      	beq.n	8011a2e <USB_EPStartXfer+0x406>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8011a1a:	68bb      	ldr	r3, [r7, #8]
 8011a1c:	68d9      	ldr	r1, [r3, #12]
 8011a1e:	69bb      	ldr	r3, [r7, #24]
 8011a20:	015a      	lsls	r2, r3, #5
 8011a22:	69fb      	ldr	r3, [r7, #28]
 8011a24:	4413      	add	r3, r2
 8011a26:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8011a2a:	460a      	mov	r2, r1
 8011a2c:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8011a2e:	68bb      	ldr	r3, [r7, #8]
 8011a30:	78db      	ldrb	r3, [r3, #3]
 8011a32:	2b01      	cmp	r3, #1
 8011a34:	d128      	bne.n	8011a88 <USB_EPStartXfer+0x460>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8011a36:	69fb      	ldr	r3, [r7, #28]
 8011a38:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8011a3c:	689b      	ldr	r3, [r3, #8]
 8011a3e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8011a42:	2b00      	cmp	r3, #0
 8011a44:	d110      	bne.n	8011a68 <USB_EPStartXfer+0x440>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8011a46:	69bb      	ldr	r3, [r7, #24]
 8011a48:	015a      	lsls	r2, r3, #5
 8011a4a:	69fb      	ldr	r3, [r7, #28]
 8011a4c:	4413      	add	r3, r2
 8011a4e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8011a52:	681b      	ldr	r3, [r3, #0]
 8011a54:	69ba      	ldr	r2, [r7, #24]
 8011a56:	0151      	lsls	r1, r2, #5
 8011a58:	69fa      	ldr	r2, [r7, #28]
 8011a5a:	440a      	add	r2, r1
 8011a5c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8011a60:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8011a64:	6013      	str	r3, [r2, #0]
 8011a66:	e00f      	b.n	8011a88 <USB_EPStartXfer+0x460>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8011a68:	69bb      	ldr	r3, [r7, #24]
 8011a6a:	015a      	lsls	r2, r3, #5
 8011a6c:	69fb      	ldr	r3, [r7, #28]
 8011a6e:	4413      	add	r3, r2
 8011a70:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8011a74:	681b      	ldr	r3, [r3, #0]
 8011a76:	69ba      	ldr	r2, [r7, #24]
 8011a78:	0151      	lsls	r1, r2, #5
 8011a7a:	69fa      	ldr	r2, [r7, #28]
 8011a7c:	440a      	add	r2, r1
 8011a7e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8011a82:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8011a86:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8011a88:	69bb      	ldr	r3, [r7, #24]
 8011a8a:	015a      	lsls	r2, r3, #5
 8011a8c:	69fb      	ldr	r3, [r7, #28]
 8011a8e:	4413      	add	r3, r2
 8011a90:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8011a94:	681b      	ldr	r3, [r3, #0]
 8011a96:	69ba      	ldr	r2, [r7, #24]
 8011a98:	0151      	lsls	r1, r2, #5
 8011a9a:	69fa      	ldr	r2, [r7, #28]
 8011a9c:	440a      	add	r2, r1
 8011a9e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8011aa2:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8011aa6:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8011aa8:	2300      	movs	r3, #0
}
 8011aaa:	4618      	mov	r0, r3
 8011aac:	3720      	adds	r7, #32
 8011aae:	46bd      	mov	sp, r7
 8011ab0:	bd80      	pop	{r7, pc}
 8011ab2:	bf00      	nop
 8011ab4:	fff80000 	.word	0xfff80000
 8011ab8:	e007ffff 	.word	0xe007ffff
 8011abc:	1ff80000 	.word	0x1ff80000

08011ac0 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8011ac0:	b480      	push	{r7}
 8011ac2:	b087      	sub	sp, #28
 8011ac4:	af00      	add	r7, sp, #0
 8011ac6:	60f8      	str	r0, [r7, #12]
 8011ac8:	60b9      	str	r1, [r7, #8]
 8011aca:	4613      	mov	r3, r2
 8011acc:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8011ace:	68fb      	ldr	r3, [r7, #12]
 8011ad0:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 8011ad2:	68bb      	ldr	r3, [r7, #8]
 8011ad4:	781b      	ldrb	r3, [r3, #0]
 8011ad6:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8011ad8:	68bb      	ldr	r3, [r7, #8]
 8011ada:	785b      	ldrb	r3, [r3, #1]
 8011adc:	2b01      	cmp	r3, #1
 8011ade:	f040 80cd 	bne.w	8011c7c <USB_EP0StartXfer+0x1bc>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8011ae2:	68bb      	ldr	r3, [r7, #8]
 8011ae4:	695b      	ldr	r3, [r3, #20]
 8011ae6:	2b00      	cmp	r3, #0
 8011ae8:	d132      	bne.n	8011b50 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8011aea:	693b      	ldr	r3, [r7, #16]
 8011aec:	015a      	lsls	r2, r3, #5
 8011aee:	697b      	ldr	r3, [r7, #20]
 8011af0:	4413      	add	r3, r2
 8011af2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8011af6:	691a      	ldr	r2, [r3, #16]
 8011af8:	693b      	ldr	r3, [r7, #16]
 8011afa:	0159      	lsls	r1, r3, #5
 8011afc:	697b      	ldr	r3, [r7, #20]
 8011afe:	440b      	add	r3, r1
 8011b00:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8011b04:	4619      	mov	r1, r3
 8011b06:	4b98      	ldr	r3, [pc, #608]	; (8011d68 <USB_EP0StartXfer+0x2a8>)
 8011b08:	4013      	ands	r3, r2
 8011b0a:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8011b0c:	693b      	ldr	r3, [r7, #16]
 8011b0e:	015a      	lsls	r2, r3, #5
 8011b10:	697b      	ldr	r3, [r7, #20]
 8011b12:	4413      	add	r3, r2
 8011b14:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8011b18:	691b      	ldr	r3, [r3, #16]
 8011b1a:	693a      	ldr	r2, [r7, #16]
 8011b1c:	0151      	lsls	r1, r2, #5
 8011b1e:	697a      	ldr	r2, [r7, #20]
 8011b20:	440a      	add	r2, r1
 8011b22:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8011b26:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8011b2a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8011b2c:	693b      	ldr	r3, [r7, #16]
 8011b2e:	015a      	lsls	r2, r3, #5
 8011b30:	697b      	ldr	r3, [r7, #20]
 8011b32:	4413      	add	r3, r2
 8011b34:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8011b38:	691a      	ldr	r2, [r3, #16]
 8011b3a:	693b      	ldr	r3, [r7, #16]
 8011b3c:	0159      	lsls	r1, r3, #5
 8011b3e:	697b      	ldr	r3, [r7, #20]
 8011b40:	440b      	add	r3, r1
 8011b42:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8011b46:	4619      	mov	r1, r3
 8011b48:	4b88      	ldr	r3, [pc, #544]	; (8011d6c <USB_EP0StartXfer+0x2ac>)
 8011b4a:	4013      	ands	r3, r2
 8011b4c:	610b      	str	r3, [r1, #16]
 8011b4e:	e04e      	b.n	8011bee <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8011b50:	693b      	ldr	r3, [r7, #16]
 8011b52:	015a      	lsls	r2, r3, #5
 8011b54:	697b      	ldr	r3, [r7, #20]
 8011b56:	4413      	add	r3, r2
 8011b58:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8011b5c:	691a      	ldr	r2, [r3, #16]
 8011b5e:	693b      	ldr	r3, [r7, #16]
 8011b60:	0159      	lsls	r1, r3, #5
 8011b62:	697b      	ldr	r3, [r7, #20]
 8011b64:	440b      	add	r3, r1
 8011b66:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8011b6a:	4619      	mov	r1, r3
 8011b6c:	4b7f      	ldr	r3, [pc, #508]	; (8011d6c <USB_EP0StartXfer+0x2ac>)
 8011b6e:	4013      	ands	r3, r2
 8011b70:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8011b72:	693b      	ldr	r3, [r7, #16]
 8011b74:	015a      	lsls	r2, r3, #5
 8011b76:	697b      	ldr	r3, [r7, #20]
 8011b78:	4413      	add	r3, r2
 8011b7a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8011b7e:	691a      	ldr	r2, [r3, #16]
 8011b80:	693b      	ldr	r3, [r7, #16]
 8011b82:	0159      	lsls	r1, r3, #5
 8011b84:	697b      	ldr	r3, [r7, #20]
 8011b86:	440b      	add	r3, r1
 8011b88:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8011b8c:	4619      	mov	r1, r3
 8011b8e:	4b76      	ldr	r3, [pc, #472]	; (8011d68 <USB_EP0StartXfer+0x2a8>)
 8011b90:	4013      	ands	r3, r2
 8011b92:	610b      	str	r3, [r1, #16]

      if (ep->xfer_len > ep->maxpacket)
 8011b94:	68bb      	ldr	r3, [r7, #8]
 8011b96:	695a      	ldr	r2, [r3, #20]
 8011b98:	68bb      	ldr	r3, [r7, #8]
 8011b9a:	689b      	ldr	r3, [r3, #8]
 8011b9c:	429a      	cmp	r2, r3
 8011b9e:	d903      	bls.n	8011ba8 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 8011ba0:	68bb      	ldr	r3, [r7, #8]
 8011ba2:	689a      	ldr	r2, [r3, #8]
 8011ba4:	68bb      	ldr	r3, [r7, #8]
 8011ba6:	615a      	str	r2, [r3, #20]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8011ba8:	693b      	ldr	r3, [r7, #16]
 8011baa:	015a      	lsls	r2, r3, #5
 8011bac:	697b      	ldr	r3, [r7, #20]
 8011bae:	4413      	add	r3, r2
 8011bb0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8011bb4:	691b      	ldr	r3, [r3, #16]
 8011bb6:	693a      	ldr	r2, [r7, #16]
 8011bb8:	0151      	lsls	r1, r2, #5
 8011bba:	697a      	ldr	r2, [r7, #20]
 8011bbc:	440a      	add	r2, r1
 8011bbe:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8011bc2:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8011bc6:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8011bc8:	693b      	ldr	r3, [r7, #16]
 8011bca:	015a      	lsls	r2, r3, #5
 8011bcc:	697b      	ldr	r3, [r7, #20]
 8011bce:	4413      	add	r3, r2
 8011bd0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8011bd4:	691a      	ldr	r2, [r3, #16]
 8011bd6:	68bb      	ldr	r3, [r7, #8]
 8011bd8:	695b      	ldr	r3, [r3, #20]
 8011bda:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8011bde:	6939      	ldr	r1, [r7, #16]
 8011be0:	0148      	lsls	r0, r1, #5
 8011be2:	6979      	ldr	r1, [r7, #20]
 8011be4:	4401      	add	r1, r0
 8011be6:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8011bea:	4313      	orrs	r3, r2
 8011bec:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8011bee:	79fb      	ldrb	r3, [r7, #7]
 8011bf0:	2b01      	cmp	r3, #1
 8011bf2:	d11e      	bne.n	8011c32 <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8011bf4:	68bb      	ldr	r3, [r7, #8]
 8011bf6:	691b      	ldr	r3, [r3, #16]
 8011bf8:	2b00      	cmp	r3, #0
 8011bfa:	d009      	beq.n	8011c10 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8011bfc:	693b      	ldr	r3, [r7, #16]
 8011bfe:	015a      	lsls	r2, r3, #5
 8011c00:	697b      	ldr	r3, [r7, #20]
 8011c02:	4413      	add	r3, r2
 8011c04:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8011c08:	461a      	mov	r2, r3
 8011c0a:	68bb      	ldr	r3, [r7, #8]
 8011c0c:	691b      	ldr	r3, [r3, #16]
 8011c0e:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8011c10:	693b      	ldr	r3, [r7, #16]
 8011c12:	015a      	lsls	r2, r3, #5
 8011c14:	697b      	ldr	r3, [r7, #20]
 8011c16:	4413      	add	r3, r2
 8011c18:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8011c1c:	681b      	ldr	r3, [r3, #0]
 8011c1e:	693a      	ldr	r2, [r7, #16]
 8011c20:	0151      	lsls	r1, r2, #5
 8011c22:	697a      	ldr	r2, [r7, #20]
 8011c24:	440a      	add	r2, r1
 8011c26:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8011c2a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8011c2e:	6013      	str	r3, [r2, #0]
 8011c30:	e092      	b.n	8011d58 <USB_EP0StartXfer+0x298>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8011c32:	693b      	ldr	r3, [r7, #16]
 8011c34:	015a      	lsls	r2, r3, #5
 8011c36:	697b      	ldr	r3, [r7, #20]
 8011c38:	4413      	add	r3, r2
 8011c3a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8011c3e:	681b      	ldr	r3, [r3, #0]
 8011c40:	693a      	ldr	r2, [r7, #16]
 8011c42:	0151      	lsls	r1, r2, #5
 8011c44:	697a      	ldr	r2, [r7, #20]
 8011c46:	440a      	add	r2, r1
 8011c48:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8011c4c:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8011c50:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 8011c52:	68bb      	ldr	r3, [r7, #8]
 8011c54:	695b      	ldr	r3, [r3, #20]
 8011c56:	2b00      	cmp	r3, #0
 8011c58:	d07e      	beq.n	8011d58 <USB_EP0StartXfer+0x298>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8011c5a:	697b      	ldr	r3, [r7, #20]
 8011c5c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8011c60:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8011c62:	68bb      	ldr	r3, [r7, #8]
 8011c64:	781b      	ldrb	r3, [r3, #0]
 8011c66:	f003 030f 	and.w	r3, r3, #15
 8011c6a:	2101      	movs	r1, #1
 8011c6c:	fa01 f303 	lsl.w	r3, r1, r3
 8011c70:	6979      	ldr	r1, [r7, #20]
 8011c72:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8011c76:	4313      	orrs	r3, r2
 8011c78:	634b      	str	r3, [r1, #52]	; 0x34
 8011c7a:	e06d      	b.n	8011d58 <USB_EP0StartXfer+0x298>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8011c7c:	693b      	ldr	r3, [r7, #16]
 8011c7e:	015a      	lsls	r2, r3, #5
 8011c80:	697b      	ldr	r3, [r7, #20]
 8011c82:	4413      	add	r3, r2
 8011c84:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8011c88:	691a      	ldr	r2, [r3, #16]
 8011c8a:	693b      	ldr	r3, [r7, #16]
 8011c8c:	0159      	lsls	r1, r3, #5
 8011c8e:	697b      	ldr	r3, [r7, #20]
 8011c90:	440b      	add	r3, r1
 8011c92:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8011c96:	4619      	mov	r1, r3
 8011c98:	4b34      	ldr	r3, [pc, #208]	; (8011d6c <USB_EP0StartXfer+0x2ac>)
 8011c9a:	4013      	ands	r3, r2
 8011c9c:	610b      	str	r3, [r1, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8011c9e:	693b      	ldr	r3, [r7, #16]
 8011ca0:	015a      	lsls	r2, r3, #5
 8011ca2:	697b      	ldr	r3, [r7, #20]
 8011ca4:	4413      	add	r3, r2
 8011ca6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8011caa:	691a      	ldr	r2, [r3, #16]
 8011cac:	693b      	ldr	r3, [r7, #16]
 8011cae:	0159      	lsls	r1, r3, #5
 8011cb0:	697b      	ldr	r3, [r7, #20]
 8011cb2:	440b      	add	r3, r1
 8011cb4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8011cb8:	4619      	mov	r1, r3
 8011cba:	4b2b      	ldr	r3, [pc, #172]	; (8011d68 <USB_EP0StartXfer+0x2a8>)
 8011cbc:	4013      	ands	r3, r2
 8011cbe:	610b      	str	r3, [r1, #16]

    if (ep->xfer_len > 0U)
 8011cc0:	68bb      	ldr	r3, [r7, #8]
 8011cc2:	695b      	ldr	r3, [r3, #20]
 8011cc4:	2b00      	cmp	r3, #0
 8011cc6:	d003      	beq.n	8011cd0 <USB_EP0StartXfer+0x210>
    {
      ep->xfer_len = ep->maxpacket;
 8011cc8:	68bb      	ldr	r3, [r7, #8]
 8011cca:	689a      	ldr	r2, [r3, #8]
 8011ccc:	68bb      	ldr	r3, [r7, #8]
 8011cce:	615a      	str	r2, [r3, #20]
    }

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8011cd0:	693b      	ldr	r3, [r7, #16]
 8011cd2:	015a      	lsls	r2, r3, #5
 8011cd4:	697b      	ldr	r3, [r7, #20]
 8011cd6:	4413      	add	r3, r2
 8011cd8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8011cdc:	691b      	ldr	r3, [r3, #16]
 8011cde:	693a      	ldr	r2, [r7, #16]
 8011ce0:	0151      	lsls	r1, r2, #5
 8011ce2:	697a      	ldr	r2, [r7, #20]
 8011ce4:	440a      	add	r2, r1
 8011ce6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8011cea:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8011cee:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 8011cf0:	693b      	ldr	r3, [r7, #16]
 8011cf2:	015a      	lsls	r2, r3, #5
 8011cf4:	697b      	ldr	r3, [r7, #20]
 8011cf6:	4413      	add	r3, r2
 8011cf8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8011cfc:	691a      	ldr	r2, [r3, #16]
 8011cfe:	68bb      	ldr	r3, [r7, #8]
 8011d00:	689b      	ldr	r3, [r3, #8]
 8011d02:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8011d06:	6939      	ldr	r1, [r7, #16]
 8011d08:	0148      	lsls	r0, r1, #5
 8011d0a:	6979      	ldr	r1, [r7, #20]
 8011d0c:	4401      	add	r1, r0
 8011d0e:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8011d12:	4313      	orrs	r3, r2
 8011d14:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 8011d16:	79fb      	ldrb	r3, [r7, #7]
 8011d18:	2b01      	cmp	r3, #1
 8011d1a:	d10d      	bne.n	8011d38 <USB_EP0StartXfer+0x278>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8011d1c:	68bb      	ldr	r3, [r7, #8]
 8011d1e:	68db      	ldr	r3, [r3, #12]
 8011d20:	2b00      	cmp	r3, #0
 8011d22:	d009      	beq.n	8011d38 <USB_EP0StartXfer+0x278>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8011d24:	68bb      	ldr	r3, [r7, #8]
 8011d26:	68d9      	ldr	r1, [r3, #12]
 8011d28:	693b      	ldr	r3, [r7, #16]
 8011d2a:	015a      	lsls	r2, r3, #5
 8011d2c:	697b      	ldr	r3, [r7, #20]
 8011d2e:	4413      	add	r3, r2
 8011d30:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8011d34:	460a      	mov	r2, r1
 8011d36:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8011d38:	693b      	ldr	r3, [r7, #16]
 8011d3a:	015a      	lsls	r2, r3, #5
 8011d3c:	697b      	ldr	r3, [r7, #20]
 8011d3e:	4413      	add	r3, r2
 8011d40:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8011d44:	681b      	ldr	r3, [r3, #0]
 8011d46:	693a      	ldr	r2, [r7, #16]
 8011d48:	0151      	lsls	r1, r2, #5
 8011d4a:	697a      	ldr	r2, [r7, #20]
 8011d4c:	440a      	add	r2, r1
 8011d4e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8011d52:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8011d56:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8011d58:	2300      	movs	r3, #0
}
 8011d5a:	4618      	mov	r0, r3
 8011d5c:	371c      	adds	r7, #28
 8011d5e:	46bd      	mov	sp, r7
 8011d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011d64:	4770      	bx	lr
 8011d66:	bf00      	nop
 8011d68:	e007ffff 	.word	0xe007ffff
 8011d6c:	fff80000 	.word	0xfff80000

08011d70 <USB_WritePacket>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src, uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8011d70:	b480      	push	{r7}
 8011d72:	b089      	sub	sp, #36	; 0x24
 8011d74:	af00      	add	r7, sp, #0
 8011d76:	60f8      	str	r0, [r7, #12]
 8011d78:	60b9      	str	r1, [r7, #8]
 8011d7a:	4611      	mov	r1, r2
 8011d7c:	461a      	mov	r2, r3
 8011d7e:	460b      	mov	r3, r1
 8011d80:	71fb      	strb	r3, [r7, #7]
 8011d82:	4613      	mov	r3, r2
 8011d84:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8011d86:	68fb      	ldr	r3, [r7, #12]
 8011d88:	617b      	str	r3, [r7, #20]
  uint32_t *pSrc = (uint32_t *)src;
 8011d8a:	68bb      	ldr	r3, [r7, #8]
 8011d8c:	61fb      	str	r3, [r7, #28]
  uint32_t count32b, i;

  if (dma == 0U)
 8011d8e:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8011d92:	2b00      	cmp	r3, #0
 8011d94:	d11a      	bne.n	8011dcc <USB_WritePacket+0x5c>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8011d96:	88bb      	ldrh	r3, [r7, #4]
 8011d98:	3303      	adds	r3, #3
 8011d9a:	089b      	lsrs	r3, r3, #2
 8011d9c:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8011d9e:	2300      	movs	r3, #0
 8011da0:	61bb      	str	r3, [r7, #24]
 8011da2:	e00f      	b.n	8011dc4 <USB_WritePacket+0x54>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8011da4:	79fb      	ldrb	r3, [r7, #7]
 8011da6:	031a      	lsls	r2, r3, #12
 8011da8:	697b      	ldr	r3, [r7, #20]
 8011daa:	4413      	add	r3, r2
 8011dac:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8011db0:	461a      	mov	r2, r3
 8011db2:	69fb      	ldr	r3, [r7, #28]
 8011db4:	681b      	ldr	r3, [r3, #0]
 8011db6:	6013      	str	r3, [r2, #0]
      pSrc++;
 8011db8:	69fb      	ldr	r3, [r7, #28]
 8011dba:	3304      	adds	r3, #4
 8011dbc:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8011dbe:	69bb      	ldr	r3, [r7, #24]
 8011dc0:	3301      	adds	r3, #1
 8011dc2:	61bb      	str	r3, [r7, #24]
 8011dc4:	69ba      	ldr	r2, [r7, #24]
 8011dc6:	693b      	ldr	r3, [r7, #16]
 8011dc8:	429a      	cmp	r2, r3
 8011dca:	d3eb      	bcc.n	8011da4 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8011dcc:	2300      	movs	r3, #0
}
 8011dce:	4618      	mov	r0, r3
 8011dd0:	3724      	adds	r7, #36	; 0x24
 8011dd2:	46bd      	mov	sp, r7
 8011dd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011dd8:	4770      	bx	lr

08011dda <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8011dda:	b480      	push	{r7}
 8011ddc:	b089      	sub	sp, #36	; 0x24
 8011dde:	af00      	add	r7, sp, #0
 8011de0:	60f8      	str	r0, [r7, #12]
 8011de2:	60b9      	str	r1, [r7, #8]
 8011de4:	4613      	mov	r3, r2
 8011de6:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8011de8:	68fb      	ldr	r3, [r7, #12]
 8011dea:	617b      	str	r3, [r7, #20]
  uint32_t *pDest = (uint32_t *)dest;
 8011dec:	68bb      	ldr	r3, [r7, #8]
 8011dee:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 8011df0:	88fb      	ldrh	r3, [r7, #6]
 8011df2:	3303      	adds	r3, #3
 8011df4:	089b      	lsrs	r3, r3, #2
 8011df6:	613b      	str	r3, [r7, #16]

  for (i = 0U; i < count32b; i++)
 8011df8:	2300      	movs	r3, #0
 8011dfa:	61bb      	str	r3, [r7, #24]
 8011dfc:	e00b      	b.n	8011e16 <USB_ReadPacket+0x3c>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8011dfe:	697b      	ldr	r3, [r7, #20]
 8011e00:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8011e04:	681a      	ldr	r2, [r3, #0]
 8011e06:	69fb      	ldr	r3, [r7, #28]
 8011e08:	601a      	str	r2, [r3, #0]
    pDest++;
 8011e0a:	69fb      	ldr	r3, [r7, #28]
 8011e0c:	3304      	adds	r3, #4
 8011e0e:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 8011e10:	69bb      	ldr	r3, [r7, #24]
 8011e12:	3301      	adds	r3, #1
 8011e14:	61bb      	str	r3, [r7, #24]
 8011e16:	69ba      	ldr	r2, [r7, #24]
 8011e18:	693b      	ldr	r3, [r7, #16]
 8011e1a:	429a      	cmp	r2, r3
 8011e1c:	d3ef      	bcc.n	8011dfe <USB_ReadPacket+0x24>
  }

  return ((void *)pDest);
 8011e1e:	69fb      	ldr	r3, [r7, #28]
}
 8011e20:	4618      	mov	r0, r3
 8011e22:	3724      	adds	r7, #36	; 0x24
 8011e24:	46bd      	mov	sp, r7
 8011e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011e2a:	4770      	bx	lr

08011e2c <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8011e2c:	b480      	push	{r7}
 8011e2e:	b085      	sub	sp, #20
 8011e30:	af00      	add	r7, sp, #0
 8011e32:	6078      	str	r0, [r7, #4]
 8011e34:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8011e36:	687b      	ldr	r3, [r7, #4]
 8011e38:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8011e3a:	683b      	ldr	r3, [r7, #0]
 8011e3c:	781b      	ldrb	r3, [r3, #0]
 8011e3e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8011e40:	683b      	ldr	r3, [r7, #0]
 8011e42:	785b      	ldrb	r3, [r3, #1]
 8011e44:	2b01      	cmp	r3, #1
 8011e46:	d12c      	bne.n	8011ea2 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8011e48:	68bb      	ldr	r3, [r7, #8]
 8011e4a:	015a      	lsls	r2, r3, #5
 8011e4c:	68fb      	ldr	r3, [r7, #12]
 8011e4e:	4413      	add	r3, r2
 8011e50:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8011e54:	681b      	ldr	r3, [r3, #0]
 8011e56:	2b00      	cmp	r3, #0
 8011e58:	db12      	blt.n	8011e80 <USB_EPSetStall+0x54>
 8011e5a:	68bb      	ldr	r3, [r7, #8]
 8011e5c:	2b00      	cmp	r3, #0
 8011e5e:	d00f      	beq.n	8011e80 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8011e60:	68bb      	ldr	r3, [r7, #8]
 8011e62:	015a      	lsls	r2, r3, #5
 8011e64:	68fb      	ldr	r3, [r7, #12]
 8011e66:	4413      	add	r3, r2
 8011e68:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8011e6c:	681b      	ldr	r3, [r3, #0]
 8011e6e:	68ba      	ldr	r2, [r7, #8]
 8011e70:	0151      	lsls	r1, r2, #5
 8011e72:	68fa      	ldr	r2, [r7, #12]
 8011e74:	440a      	add	r2, r1
 8011e76:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8011e7a:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8011e7e:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8011e80:	68bb      	ldr	r3, [r7, #8]
 8011e82:	015a      	lsls	r2, r3, #5
 8011e84:	68fb      	ldr	r3, [r7, #12]
 8011e86:	4413      	add	r3, r2
 8011e88:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8011e8c:	681b      	ldr	r3, [r3, #0]
 8011e8e:	68ba      	ldr	r2, [r7, #8]
 8011e90:	0151      	lsls	r1, r2, #5
 8011e92:	68fa      	ldr	r2, [r7, #12]
 8011e94:	440a      	add	r2, r1
 8011e96:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8011e9a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8011e9e:	6013      	str	r3, [r2, #0]
 8011ea0:	e02b      	b.n	8011efa <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8011ea2:	68bb      	ldr	r3, [r7, #8]
 8011ea4:	015a      	lsls	r2, r3, #5
 8011ea6:	68fb      	ldr	r3, [r7, #12]
 8011ea8:	4413      	add	r3, r2
 8011eaa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8011eae:	681b      	ldr	r3, [r3, #0]
 8011eb0:	2b00      	cmp	r3, #0
 8011eb2:	db12      	blt.n	8011eda <USB_EPSetStall+0xae>
 8011eb4:	68bb      	ldr	r3, [r7, #8]
 8011eb6:	2b00      	cmp	r3, #0
 8011eb8:	d00f      	beq.n	8011eda <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8011eba:	68bb      	ldr	r3, [r7, #8]
 8011ebc:	015a      	lsls	r2, r3, #5
 8011ebe:	68fb      	ldr	r3, [r7, #12]
 8011ec0:	4413      	add	r3, r2
 8011ec2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8011ec6:	681b      	ldr	r3, [r3, #0]
 8011ec8:	68ba      	ldr	r2, [r7, #8]
 8011eca:	0151      	lsls	r1, r2, #5
 8011ecc:	68fa      	ldr	r2, [r7, #12]
 8011ece:	440a      	add	r2, r1
 8011ed0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8011ed4:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8011ed8:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8011eda:	68bb      	ldr	r3, [r7, #8]
 8011edc:	015a      	lsls	r2, r3, #5
 8011ede:	68fb      	ldr	r3, [r7, #12]
 8011ee0:	4413      	add	r3, r2
 8011ee2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8011ee6:	681b      	ldr	r3, [r3, #0]
 8011ee8:	68ba      	ldr	r2, [r7, #8]
 8011eea:	0151      	lsls	r1, r2, #5
 8011eec:	68fa      	ldr	r2, [r7, #12]
 8011eee:	440a      	add	r2, r1
 8011ef0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8011ef4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8011ef8:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8011efa:	2300      	movs	r3, #0
}
 8011efc:	4618      	mov	r0, r3
 8011efe:	3714      	adds	r7, #20
 8011f00:	46bd      	mov	sp, r7
 8011f02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011f06:	4770      	bx	lr

08011f08 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8011f08:	b480      	push	{r7}
 8011f0a:	b085      	sub	sp, #20
 8011f0c:	af00      	add	r7, sp, #0
 8011f0e:	6078      	str	r0, [r7, #4]
 8011f10:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8011f12:	687b      	ldr	r3, [r7, #4]
 8011f14:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8011f16:	683b      	ldr	r3, [r7, #0]
 8011f18:	781b      	ldrb	r3, [r3, #0]
 8011f1a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8011f1c:	683b      	ldr	r3, [r7, #0]
 8011f1e:	785b      	ldrb	r3, [r3, #1]
 8011f20:	2b01      	cmp	r3, #1
 8011f22:	d128      	bne.n	8011f76 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8011f24:	68bb      	ldr	r3, [r7, #8]
 8011f26:	015a      	lsls	r2, r3, #5
 8011f28:	68fb      	ldr	r3, [r7, #12]
 8011f2a:	4413      	add	r3, r2
 8011f2c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8011f30:	681b      	ldr	r3, [r3, #0]
 8011f32:	68ba      	ldr	r2, [r7, #8]
 8011f34:	0151      	lsls	r1, r2, #5
 8011f36:	68fa      	ldr	r2, [r7, #12]
 8011f38:	440a      	add	r2, r1
 8011f3a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8011f3e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8011f42:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8011f44:	683b      	ldr	r3, [r7, #0]
 8011f46:	78db      	ldrb	r3, [r3, #3]
 8011f48:	2b03      	cmp	r3, #3
 8011f4a:	d003      	beq.n	8011f54 <USB_EPClearStall+0x4c>
 8011f4c:	683b      	ldr	r3, [r7, #0]
 8011f4e:	78db      	ldrb	r3, [r3, #3]
 8011f50:	2b02      	cmp	r3, #2
 8011f52:	d138      	bne.n	8011fc6 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8011f54:	68bb      	ldr	r3, [r7, #8]
 8011f56:	015a      	lsls	r2, r3, #5
 8011f58:	68fb      	ldr	r3, [r7, #12]
 8011f5a:	4413      	add	r3, r2
 8011f5c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8011f60:	681b      	ldr	r3, [r3, #0]
 8011f62:	68ba      	ldr	r2, [r7, #8]
 8011f64:	0151      	lsls	r1, r2, #5
 8011f66:	68fa      	ldr	r2, [r7, #12]
 8011f68:	440a      	add	r2, r1
 8011f6a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8011f6e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8011f72:	6013      	str	r3, [r2, #0]
 8011f74:	e027      	b.n	8011fc6 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8011f76:	68bb      	ldr	r3, [r7, #8]
 8011f78:	015a      	lsls	r2, r3, #5
 8011f7a:	68fb      	ldr	r3, [r7, #12]
 8011f7c:	4413      	add	r3, r2
 8011f7e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8011f82:	681b      	ldr	r3, [r3, #0]
 8011f84:	68ba      	ldr	r2, [r7, #8]
 8011f86:	0151      	lsls	r1, r2, #5
 8011f88:	68fa      	ldr	r2, [r7, #12]
 8011f8a:	440a      	add	r2, r1
 8011f8c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8011f90:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8011f94:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8011f96:	683b      	ldr	r3, [r7, #0]
 8011f98:	78db      	ldrb	r3, [r3, #3]
 8011f9a:	2b03      	cmp	r3, #3
 8011f9c:	d003      	beq.n	8011fa6 <USB_EPClearStall+0x9e>
 8011f9e:	683b      	ldr	r3, [r7, #0]
 8011fa0:	78db      	ldrb	r3, [r3, #3]
 8011fa2:	2b02      	cmp	r3, #2
 8011fa4:	d10f      	bne.n	8011fc6 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8011fa6:	68bb      	ldr	r3, [r7, #8]
 8011fa8:	015a      	lsls	r2, r3, #5
 8011faa:	68fb      	ldr	r3, [r7, #12]
 8011fac:	4413      	add	r3, r2
 8011fae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8011fb2:	681b      	ldr	r3, [r3, #0]
 8011fb4:	68ba      	ldr	r2, [r7, #8]
 8011fb6:	0151      	lsls	r1, r2, #5
 8011fb8:	68fa      	ldr	r2, [r7, #12]
 8011fba:	440a      	add	r2, r1
 8011fbc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8011fc0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8011fc4:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8011fc6:	2300      	movs	r3, #0
}
 8011fc8:	4618      	mov	r0, r3
 8011fca:	3714      	adds	r7, #20
 8011fcc:	46bd      	mov	sp, r7
 8011fce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011fd2:	4770      	bx	lr

08011fd4 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8011fd4:	b480      	push	{r7}
 8011fd6:	b085      	sub	sp, #20
 8011fd8:	af00      	add	r7, sp, #0
 8011fda:	6078      	str	r0, [r7, #4]
 8011fdc:	460b      	mov	r3, r1
 8011fde:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8011fe0:	687b      	ldr	r3, [r7, #4]
 8011fe2:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8011fe4:	68fb      	ldr	r3, [r7, #12]
 8011fe6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8011fea:	681b      	ldr	r3, [r3, #0]
 8011fec:	68fa      	ldr	r2, [r7, #12]
 8011fee:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8011ff2:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8011ff6:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8011ff8:	68fb      	ldr	r3, [r7, #12]
 8011ffa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8011ffe:	681a      	ldr	r2, [r3, #0]
 8012000:	78fb      	ldrb	r3, [r7, #3]
 8012002:	011b      	lsls	r3, r3, #4
 8012004:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8012008:	68f9      	ldr	r1, [r7, #12]
 801200a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 801200e:	4313      	orrs	r3, r2
 8012010:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8012012:	2300      	movs	r3, #0
}
 8012014:	4618      	mov	r0, r3
 8012016:	3714      	adds	r7, #20
 8012018:	46bd      	mov	sp, r7
 801201a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801201e:	4770      	bx	lr

08012020 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 8012020:	b580      	push	{r7, lr}
 8012022:	b084      	sub	sp, #16
 8012024:	af00      	add	r7, sp, #0
 8012026:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8012028:	687b      	ldr	r3, [r7, #4]
 801202a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 801202c:	68fb      	ldr	r3, [r7, #12]
 801202e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8012032:	685b      	ldr	r3, [r3, #4]
 8012034:	68fa      	ldr	r2, [r7, #12]
 8012036:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 801203a:	f023 0302 	bic.w	r3, r3, #2
 801203e:	6053      	str	r3, [r2, #4]
  HAL_Delay(3U);
 8012040:	2003      	movs	r0, #3
 8012042:	f7f1 fb65 	bl	8003710 <HAL_Delay>

  return HAL_OK;
 8012046:	2300      	movs	r3, #0
}
 8012048:	4618      	mov	r0, r3
 801204a:	3710      	adds	r7, #16
 801204c:	46bd      	mov	sp, r7
 801204e:	bd80      	pop	{r7, pc}

08012050 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8012050:	b580      	push	{r7, lr}
 8012052:	b084      	sub	sp, #16
 8012054:	af00      	add	r7, sp, #0
 8012056:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8012058:	687b      	ldr	r3, [r7, #4]
 801205a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 801205c:	68fb      	ldr	r3, [r7, #12]
 801205e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8012062:	685b      	ldr	r3, [r3, #4]
 8012064:	68fa      	ldr	r2, [r7, #12]
 8012066:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 801206a:	f043 0302 	orr.w	r3, r3, #2
 801206e:	6053      	str	r3, [r2, #4]
  HAL_Delay(3U);
 8012070:	2003      	movs	r0, #3
 8012072:	f7f1 fb4d 	bl	8003710 <HAL_Delay>

  return HAL_OK;
 8012076:	2300      	movs	r3, #0
}
 8012078:	4618      	mov	r0, r3
 801207a:	3710      	adds	r7, #16
 801207c:	46bd      	mov	sp, r7
 801207e:	bd80      	pop	{r7, pc}

08012080 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8012080:	b480      	push	{r7}
 8012082:	b085      	sub	sp, #20
 8012084:	af00      	add	r7, sp, #0
 8012086:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8012088:	687b      	ldr	r3, [r7, #4]
 801208a:	695b      	ldr	r3, [r3, #20]
 801208c:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 801208e:	687b      	ldr	r3, [r7, #4]
 8012090:	699b      	ldr	r3, [r3, #24]
 8012092:	68fa      	ldr	r2, [r7, #12]
 8012094:	4013      	ands	r3, r2
 8012096:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8012098:	68fb      	ldr	r3, [r7, #12]
}
 801209a:	4618      	mov	r0, r3
 801209c:	3714      	adds	r7, #20
 801209e:	46bd      	mov	sp, r7
 80120a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80120a4:	4770      	bx	lr

080120a6 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 80120a6:	b480      	push	{r7}
 80120a8:	b085      	sub	sp, #20
 80120aa:	af00      	add	r7, sp, #0
 80120ac:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80120ae:	687b      	ldr	r3, [r7, #4]
 80120b0:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80120b2:	68fb      	ldr	r3, [r7, #12]
 80120b4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80120b8:	699b      	ldr	r3, [r3, #24]
 80120ba:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80120bc:	68fb      	ldr	r3, [r7, #12]
 80120be:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80120c2:	69db      	ldr	r3, [r3, #28]
 80120c4:	68ba      	ldr	r2, [r7, #8]
 80120c6:	4013      	ands	r3, r2
 80120c8:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 80120ca:	68bb      	ldr	r3, [r7, #8]
 80120cc:	0c1b      	lsrs	r3, r3, #16
}
 80120ce:	4618      	mov	r0, r3
 80120d0:	3714      	adds	r7, #20
 80120d2:	46bd      	mov	sp, r7
 80120d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80120d8:	4770      	bx	lr

080120da <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 80120da:	b480      	push	{r7}
 80120dc:	b085      	sub	sp, #20
 80120de:	af00      	add	r7, sp, #0
 80120e0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80120e2:	687b      	ldr	r3, [r7, #4]
 80120e4:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80120e6:	68fb      	ldr	r3, [r7, #12]
 80120e8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80120ec:	699b      	ldr	r3, [r3, #24]
 80120ee:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80120f0:	68fb      	ldr	r3, [r7, #12]
 80120f2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80120f6:	69db      	ldr	r3, [r3, #28]
 80120f8:	68ba      	ldr	r2, [r7, #8]
 80120fa:	4013      	ands	r3, r2
 80120fc:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 80120fe:	68bb      	ldr	r3, [r7, #8]
 8012100:	b29b      	uxth	r3, r3
}
 8012102:	4618      	mov	r0, r3
 8012104:	3714      	adds	r7, #20
 8012106:	46bd      	mov	sp, r7
 8012108:	f85d 7b04 	ldr.w	r7, [sp], #4
 801210c:	4770      	bx	lr

0801210e <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 801210e:	b480      	push	{r7}
 8012110:	b085      	sub	sp, #20
 8012112:	af00      	add	r7, sp, #0
 8012114:	6078      	str	r0, [r7, #4]
 8012116:	460b      	mov	r3, r1
 8012118:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801211a:	687b      	ldr	r3, [r7, #4]
 801211c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 801211e:	78fb      	ldrb	r3, [r7, #3]
 8012120:	015a      	lsls	r2, r3, #5
 8012122:	68fb      	ldr	r3, [r7, #12]
 8012124:	4413      	add	r3, r2
 8012126:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801212a:	689b      	ldr	r3, [r3, #8]
 801212c:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 801212e:	68fb      	ldr	r3, [r7, #12]
 8012130:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8012134:	695b      	ldr	r3, [r3, #20]
 8012136:	68ba      	ldr	r2, [r7, #8]
 8012138:	4013      	ands	r3, r2
 801213a:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 801213c:	68bb      	ldr	r3, [r7, #8]
}
 801213e:	4618      	mov	r0, r3
 8012140:	3714      	adds	r7, #20
 8012142:	46bd      	mov	sp, r7
 8012144:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012148:	4770      	bx	lr

0801214a <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 801214a:	b480      	push	{r7}
 801214c:	b087      	sub	sp, #28
 801214e:	af00      	add	r7, sp, #0
 8012150:	6078      	str	r0, [r7, #4]
 8012152:	460b      	mov	r3, r1
 8012154:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8012156:	687b      	ldr	r3, [r7, #4]
 8012158:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg, msk, emp;

  msk = USBx_DEVICE->DIEPMSK;
 801215a:	697b      	ldr	r3, [r7, #20]
 801215c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8012160:	691b      	ldr	r3, [r3, #16]
 8012162:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8012164:	697b      	ldr	r3, [r7, #20]
 8012166:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801216a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801216c:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 801216e:	78fb      	ldrb	r3, [r7, #3]
 8012170:	f003 030f 	and.w	r3, r3, #15
 8012174:	68fa      	ldr	r2, [r7, #12]
 8012176:	fa22 f303 	lsr.w	r3, r2, r3
 801217a:	01db      	lsls	r3, r3, #7
 801217c:	b2db      	uxtb	r3, r3
 801217e:	693a      	ldr	r2, [r7, #16]
 8012180:	4313      	orrs	r3, r2
 8012182:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8012184:	78fb      	ldrb	r3, [r7, #3]
 8012186:	015a      	lsls	r2, r3, #5
 8012188:	697b      	ldr	r3, [r7, #20]
 801218a:	4413      	add	r3, r2
 801218c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8012190:	689b      	ldr	r3, [r3, #8]
 8012192:	693a      	ldr	r2, [r7, #16]
 8012194:	4013      	ands	r3, r2
 8012196:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8012198:	68bb      	ldr	r3, [r7, #8]
}
 801219a:	4618      	mov	r0, r3
 801219c:	371c      	adds	r7, #28
 801219e:	46bd      	mov	sp, r7
 80121a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80121a4:	4770      	bx	lr

080121a6 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 80121a6:	b480      	push	{r7}
 80121a8:	b083      	sub	sp, #12
 80121aa:	af00      	add	r7, sp, #0
 80121ac:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80121ae:	687b      	ldr	r3, [r7, #4]
 80121b0:	695b      	ldr	r3, [r3, #20]
 80121b2:	f003 0301 	and.w	r3, r3, #1
}
 80121b6:	4618      	mov	r0, r3
 80121b8:	370c      	adds	r7, #12
 80121ba:	46bd      	mov	sp, r7
 80121bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80121c0:	4770      	bx	lr
	...

080121c4 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 80121c4:	b480      	push	{r7}
 80121c6:	b085      	sub	sp, #20
 80121c8:	af00      	add	r7, sp, #0
 80121ca:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80121cc:	687b      	ldr	r3, [r7, #4]
 80121ce:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 80121d0:	68fb      	ldr	r3, [r7, #12]
 80121d2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80121d6:	681a      	ldr	r2, [r3, #0]
 80121d8:	68fb      	ldr	r3, [r7, #12]
 80121da:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80121de:	4619      	mov	r1, r3
 80121e0:	4b09      	ldr	r3, [pc, #36]	; (8012208 <USB_ActivateSetup+0x44>)
 80121e2:	4013      	ands	r3, r2
 80121e4:	600b      	str	r3, [r1, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 80121e6:	68fb      	ldr	r3, [r7, #12]
 80121e8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80121ec:	685b      	ldr	r3, [r3, #4]
 80121ee:	68fa      	ldr	r2, [r7, #12]
 80121f0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80121f4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80121f8:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80121fa:	2300      	movs	r3, #0
}
 80121fc:	4618      	mov	r0, r3
 80121fe:	3714      	adds	r7, #20
 8012200:	46bd      	mov	sp, r7
 8012202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012206:	4770      	bx	lr
 8012208:	fffff800 	.word	0xfffff800

0801220c <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 801220c:	b480      	push	{r7}
 801220e:	b087      	sub	sp, #28
 8012210:	af00      	add	r7, sp, #0
 8012212:	60f8      	str	r0, [r7, #12]
 8012214:	460b      	mov	r3, r1
 8012216:	607a      	str	r2, [r7, #4]
 8012218:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801221a:	68fb      	ldr	r3, [r7, #12]
 801221c:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 801221e:	68fb      	ldr	r3, [r7, #12]
 8012220:	333c      	adds	r3, #60	; 0x3c
 8012222:	3304      	adds	r3, #4
 8012224:	681b      	ldr	r3, [r3, #0]
 8012226:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8012228:	693b      	ldr	r3, [r7, #16]
 801222a:	4a26      	ldr	r2, [pc, #152]	; (80122c4 <USB_EP0_OutStart+0xb8>)
 801222c:	4293      	cmp	r3, r2
 801222e:	d90a      	bls.n	8012246 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8012230:	697b      	ldr	r3, [r7, #20]
 8012232:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8012236:	681b      	ldr	r3, [r3, #0]
 8012238:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 801223c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8012240:	d101      	bne.n	8012246 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8012242:	2300      	movs	r3, #0
 8012244:	e037      	b.n	80122b6 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8012246:	697b      	ldr	r3, [r7, #20]
 8012248:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801224c:	461a      	mov	r2, r3
 801224e:	2300      	movs	r3, #0
 8012250:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8012252:	697b      	ldr	r3, [r7, #20]
 8012254:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8012258:	691b      	ldr	r3, [r3, #16]
 801225a:	697a      	ldr	r2, [r7, #20]
 801225c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8012260:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8012264:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8012266:	697b      	ldr	r3, [r7, #20]
 8012268:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801226c:	691b      	ldr	r3, [r3, #16]
 801226e:	697a      	ldr	r2, [r7, #20]
 8012270:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8012274:	f043 0318 	orr.w	r3, r3, #24
 8012278:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 801227a:	697b      	ldr	r3, [r7, #20]
 801227c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8012280:	691b      	ldr	r3, [r3, #16]
 8012282:	697a      	ldr	r2, [r7, #20]
 8012284:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8012288:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 801228c:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 801228e:	7afb      	ldrb	r3, [r7, #11]
 8012290:	2b01      	cmp	r3, #1
 8012292:	d10f      	bne.n	80122b4 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8012294:	697b      	ldr	r3, [r7, #20]
 8012296:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801229a:	461a      	mov	r2, r3
 801229c:	687b      	ldr	r3, [r7, #4]
 801229e:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 80122a0:	697b      	ldr	r3, [r7, #20]
 80122a2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80122a6:	681b      	ldr	r3, [r3, #0]
 80122a8:	697a      	ldr	r2, [r7, #20]
 80122aa:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80122ae:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 80122b2:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80122b4:	2300      	movs	r3, #0
}
 80122b6:	4618      	mov	r0, r3
 80122b8:	371c      	adds	r7, #28
 80122ba:	46bd      	mov	sp, r7
 80122bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80122c0:	4770      	bx	lr
 80122c2:	bf00      	nop
 80122c4:	4f54300a 	.word	0x4f54300a

080122c8 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80122c8:	b480      	push	{r7}
 80122ca:	b085      	sub	sp, #20
 80122cc:	af00      	add	r7, sp, #0
 80122ce:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 80122d0:	2300      	movs	r3, #0
 80122d2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 80122d4:	68fb      	ldr	r3, [r7, #12]
 80122d6:	3301      	adds	r3, #1
 80122d8:	60fb      	str	r3, [r7, #12]
 80122da:	68fb      	ldr	r3, [r7, #12]
 80122dc:	4a13      	ldr	r2, [pc, #76]	; (801232c <USB_CoreReset+0x64>)
 80122de:	4293      	cmp	r3, r2
 80122e0:	d901      	bls.n	80122e6 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80122e2:	2303      	movs	r3, #3
 80122e4:	e01b      	b.n	801231e <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80122e6:	687b      	ldr	r3, [r7, #4]
 80122e8:	691b      	ldr	r3, [r3, #16]
 80122ea:	2b00      	cmp	r3, #0
 80122ec:	daf2      	bge.n	80122d4 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80122ee:	2300      	movs	r3, #0
 80122f0:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80122f2:	687b      	ldr	r3, [r7, #4]
 80122f4:	691b      	ldr	r3, [r3, #16]
 80122f6:	f043 0201 	orr.w	r2, r3, #1
 80122fa:	687b      	ldr	r3, [r7, #4]
 80122fc:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80122fe:	68fb      	ldr	r3, [r7, #12]
 8012300:	3301      	adds	r3, #1
 8012302:	60fb      	str	r3, [r7, #12]
 8012304:	68fb      	ldr	r3, [r7, #12]
 8012306:	4a09      	ldr	r2, [pc, #36]	; (801232c <USB_CoreReset+0x64>)
 8012308:	4293      	cmp	r3, r2
 801230a:	d901      	bls.n	8012310 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 801230c:	2303      	movs	r3, #3
 801230e:	e006      	b.n	801231e <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8012310:	687b      	ldr	r3, [r7, #4]
 8012312:	691b      	ldr	r3, [r3, #16]
 8012314:	f003 0301 	and.w	r3, r3, #1
 8012318:	2b01      	cmp	r3, #1
 801231a:	d0f0      	beq.n	80122fe <USB_CoreReset+0x36>

  return HAL_OK;
 801231c:	2300      	movs	r3, #0
}
 801231e:	4618      	mov	r0, r3
 8012320:	3714      	adds	r7, #20
 8012322:	46bd      	mov	sp, r7
 8012324:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012328:	4770      	bx	lr
 801232a:	bf00      	nop
 801232c:	00030d40 	.word	0x00030d40

08012330 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8012330:	b580      	push	{r7, lr}
 8012332:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 8012334:	4904      	ldr	r1, [pc, #16]	; (8012348 <MX_FATFS_Init+0x18>)
 8012336:	4805      	ldr	r0, [pc, #20]	; (801234c <MX_FATFS_Init+0x1c>)
 8012338:	f005 fbec 	bl	8017b14 <FATFS_LinkDriver>
 801233c:	4603      	mov	r3, r0
 801233e:	461a      	mov	r2, r3
 8012340:	4b03      	ldr	r3, [pc, #12]	; (8012350 <MX_FATFS_Init+0x20>)
 8012342:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8012344:	bf00      	nop
 8012346:	bd80      	pop	{r7, pc}
 8012348:	24001748 	.word	0x24001748
 801234c:	0801a054 	.word	0x0801a054
 8012350:	24001744 	.word	0x24001744

08012354 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 8012354:	b480      	push	{r7}
 8012356:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 8012358:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 801235a:	4618      	mov	r0, r3
 801235c:	46bd      	mov	sp, r7
 801235e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012362:	4770      	bx	lr

08012364 <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 8012364:	b580      	push	{r7, lr}
 8012366:	b082      	sub	sp, #8
 8012368:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 801236a:	2300      	movs	r3, #0
 801236c:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 801236e:	f000 f885 	bl	801247c <BSP_SD_IsDetected>
 8012372:	4603      	mov	r3, r0
 8012374:	2b01      	cmp	r3, #1
 8012376:	d001      	beq.n	801237c <BSP_SD_Init+0x18>
  {
    return MSD_ERROR_SD_NOT_PRESENT;
 8012378:	2302      	movs	r3, #2
 801237a:	e012      	b.n	80123a2 <BSP_SD_Init+0x3e>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd1);
 801237c:	480b      	ldr	r0, [pc, #44]	; (80123ac <BSP_SD_Init+0x48>)
 801237e:	f7f9 fc1d 	bl	800bbbc <HAL_SD_Init>
 8012382:	4603      	mov	r3, r0
 8012384:	71fb      	strb	r3, [r7, #7]
  /* Configure SD Bus width (4 bits mode selected) */
  if (sd_state == MSD_OK)
 8012386:	79fb      	ldrb	r3, [r7, #7]
 8012388:	2b00      	cmp	r3, #0
 801238a:	d109      	bne.n	80123a0 <BSP_SD_Init+0x3c>
  {
    /* Enable wide operation */
    if (HAL_SD_ConfigWideBusOperation(&hsd1, SDMMC_BUS_WIDE_4B) != HAL_OK)
 801238c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8012390:	4806      	ldr	r0, [pc, #24]	; (80123ac <BSP_SD_Init+0x48>)
 8012392:	f7fa fdf1 	bl	800cf78 <HAL_SD_ConfigWideBusOperation>
 8012396:	4603      	mov	r3, r0
 8012398:	2b00      	cmp	r3, #0
 801239a:	d001      	beq.n	80123a0 <BSP_SD_Init+0x3c>
    {
      sd_state = MSD_ERROR;
 801239c:	2301      	movs	r3, #1
 801239e:	71fb      	strb	r3, [r7, #7]
    }
  }

  return sd_state;
 80123a0:	79fb      	ldrb	r3, [r7, #7]
}
 80123a2:	4618      	mov	r0, r3
 80123a4:	3708      	adds	r7, #8
 80123a6:	46bd      	mov	sp, r7
 80123a8:	bd80      	pop	{r7, pc}
 80123aa:	bf00      	nop
 80123ac:	24001448 	.word	0x24001448

080123b0 <BSP_SD_ReadBlocks_DMA>:
  * @param  ReadAddr: Address from where data is to be read
  * @param  NumOfBlocks: Number of SD blocks to read
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks_DMA(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks)
{
 80123b0:	b580      	push	{r7, lr}
 80123b2:	b086      	sub	sp, #24
 80123b4:	af00      	add	r7, sp, #0
 80123b6:	60f8      	str	r0, [r7, #12]
 80123b8:	60b9      	str	r1, [r7, #8]
 80123ba:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 80123bc:	2300      	movs	r3, #0
 80123be:	75fb      	strb	r3, [r7, #23]

  /* Read block(s) in DMA transfer mode */
  if (HAL_SD_ReadBlocks_DMA(&hsd1, (uint8_t *)pData, ReadAddr, NumOfBlocks) != HAL_OK)
 80123c0:	687b      	ldr	r3, [r7, #4]
 80123c2:	68ba      	ldr	r2, [r7, #8]
 80123c4:	68f9      	ldr	r1, [r7, #12]
 80123c6:	4806      	ldr	r0, [pc, #24]	; (80123e0 <BSP_SD_ReadBlocks_DMA+0x30>)
 80123c8:	f7fa f834 	bl	800c434 <HAL_SD_ReadBlocks_DMA>
 80123cc:	4603      	mov	r3, r0
 80123ce:	2b00      	cmp	r3, #0
 80123d0:	d001      	beq.n	80123d6 <BSP_SD_ReadBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 80123d2:	2301      	movs	r3, #1
 80123d4:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 80123d6:	7dfb      	ldrb	r3, [r7, #23]
}
 80123d8:	4618      	mov	r0, r3
 80123da:	3718      	adds	r7, #24
 80123dc:	46bd      	mov	sp, r7
 80123de:	bd80      	pop	{r7, pc}
 80123e0:	24001448 	.word	0x24001448

080123e4 <BSP_SD_WriteBlocks_DMA>:
  * @param  WriteAddr: Address from where data is to be written
  * @param  NumOfBlocks: Number of SD blocks to write
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks_DMA(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks)
{
 80123e4:	b580      	push	{r7, lr}
 80123e6:	b086      	sub	sp, #24
 80123e8:	af00      	add	r7, sp, #0
 80123ea:	60f8      	str	r0, [r7, #12]
 80123ec:	60b9      	str	r1, [r7, #8]
 80123ee:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 80123f0:	2300      	movs	r3, #0
 80123f2:	75fb      	strb	r3, [r7, #23]

  /* Write block(s) in DMA transfer mode */
  if (HAL_SD_WriteBlocks_DMA(&hsd1, (uint8_t *)pData, WriteAddr, NumOfBlocks) != HAL_OK)
 80123f4:	687b      	ldr	r3, [r7, #4]
 80123f6:	68ba      	ldr	r2, [r7, #8]
 80123f8:	68f9      	ldr	r1, [r7, #12]
 80123fa:	4806      	ldr	r0, [pc, #24]	; (8012414 <BSP_SD_WriteBlocks_DMA+0x30>)
 80123fc:	f7fa f8c2 	bl	800c584 <HAL_SD_WriteBlocks_DMA>
 8012400:	4603      	mov	r3, r0
 8012402:	2b00      	cmp	r3, #0
 8012404:	d001      	beq.n	801240a <BSP_SD_WriteBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 8012406:	2301      	movs	r3, #1
 8012408:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 801240a:	7dfb      	ldrb	r3, [r7, #23]
}
 801240c:	4618      	mov	r0, r3
 801240e:	3718      	adds	r7, #24
 8012410:	46bd      	mov	sp, r7
 8012412:	bd80      	pop	{r7, pc}
 8012414:	24001448 	.word	0x24001448

08012418 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 8012418:	b580      	push	{r7, lr}
 801241a:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd1) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 801241c:	4805      	ldr	r0, [pc, #20]	; (8012434 <BSP_SD_GetCardState+0x1c>)
 801241e:	f7fa fe55 	bl	800d0cc <HAL_SD_GetCardState>
 8012422:	4603      	mov	r3, r0
 8012424:	2b04      	cmp	r3, #4
 8012426:	bf14      	ite	ne
 8012428:	2301      	movne	r3, #1
 801242a:	2300      	moveq	r3, #0
 801242c:	b2db      	uxtb	r3, r3
}
 801242e:	4618      	mov	r0, r3
 8012430:	bd80      	pop	{r7, pc}
 8012432:	bf00      	nop
 8012434:	24001448 	.word	0x24001448

08012438 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 8012438:	b580      	push	{r7, lr}
 801243a:	b082      	sub	sp, #8
 801243c:	af00      	add	r7, sp, #0
 801243e:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd1, CardInfo);
 8012440:	6879      	ldr	r1, [r7, #4]
 8012442:	4803      	ldr	r0, [pc, #12]	; (8012450 <BSP_SD_GetCardInfo+0x18>)
 8012444:	f7fa fd6c 	bl	800cf20 <HAL_SD_GetCardInfo>
}
 8012448:	bf00      	nop
 801244a:	3708      	adds	r7, #8
 801244c:	46bd      	mov	sp, r7
 801244e:	bd80      	pop	{r7, pc}
 8012450:	24001448 	.word	0x24001448

08012454 <HAL_SD_TxCpltCallback>:
  * @brief Tx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_TxCpltCallback(SD_HandleTypeDef *hsd)
{
 8012454:	b580      	push	{r7, lr}
 8012456:	b082      	sub	sp, #8
 8012458:	af00      	add	r7, sp, #0
 801245a:	6078      	str	r0, [r7, #4]
  BSP_SD_WriteCpltCallback();
 801245c:	f000 f9a0 	bl	80127a0 <BSP_SD_WriteCpltCallback>
}
 8012460:	bf00      	nop
 8012462:	3708      	adds	r7, #8
 8012464:	46bd      	mov	sp, r7
 8012466:	bd80      	pop	{r7, pc}

08012468 <HAL_SD_RxCpltCallback>:
  * @brief Rx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_RxCpltCallback(SD_HandleTypeDef *hsd)
{
 8012468:	b580      	push	{r7, lr}
 801246a:	b082      	sub	sp, #8
 801246c:	af00      	add	r7, sp, #0
 801246e:	6078      	str	r0, [r7, #4]
  BSP_SD_ReadCpltCallback();
 8012470:	f000 f9a2 	bl	80127b8 <BSP_SD_ReadCpltCallback>
}
 8012474:	bf00      	nop
 8012476:	3708      	adds	r7, #8
 8012478:	46bd      	mov	sp, r7
 801247a:	bd80      	pop	{r7, pc}

0801247c <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 801247c:	b580      	push	{r7, lr}
 801247e:	b082      	sub	sp, #8
 8012480:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 8012482:	2301      	movs	r3, #1
 8012484:	71fb      	strb	r3, [r7, #7]

  if (BSP_PlatformIsDetected() == 0x0)
 8012486:	f000 f80b 	bl	80124a0 <BSP_PlatformIsDetected>
 801248a:	4603      	mov	r3, r0
 801248c:	2b00      	cmp	r3, #0
 801248e:	d101      	bne.n	8012494 <BSP_SD_IsDetected+0x18>
  {
    status = SD_NOT_PRESENT;
 8012490:	2300      	movs	r3, #0
 8012492:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 8012494:	79fb      	ldrb	r3, [r7, #7]
 8012496:	b2db      	uxtb	r3, r3
}
 8012498:	4618      	mov	r0, r3
 801249a:	3708      	adds	r7, #8
 801249c:	46bd      	mov	sp, r7
 801249e:	bd80      	pop	{r7, pc}

080124a0 <BSP_PlatformIsDetected>:
  *
  ******************************************************************************
*/
#include "fatfs_platform.h"

uint8_t	BSP_PlatformIsDetected(void) {
 80124a0:	b580      	push	{r7, lr}
 80124a2:	b082      	sub	sp, #8
 80124a4:	af00      	add	r7, sp, #0
    uint8_t status = SD_PRESENT;
 80124a6:	2301      	movs	r3, #1
 80124a8:	71fb      	strb	r3, [r7, #7]
    /* Check SD card detect pin */
    if(HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) != GPIO_PIN_RESET)
 80124aa:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80124ae:	4806      	ldr	r0, [pc, #24]	; (80124c8 <BSP_PlatformIsDetected+0x28>)
 80124b0:	f7f4 fe30 	bl	8007114 <HAL_GPIO_ReadPin>
 80124b4:	4603      	mov	r3, r0
 80124b6:	2b00      	cmp	r3, #0
 80124b8:	d001      	beq.n	80124be <BSP_PlatformIsDetected+0x1e>
    {
        status = SD_NOT_PRESENT;
 80124ba:	2300      	movs	r3, #0
 80124bc:	71fb      	strb	r3, [r7, #7]
    }
    /* USER CODE BEGIN 1 */
    /* user code can be inserted here */
    /* USER CODE END 1 */
    return status;
 80124be:	79fb      	ldrb	r3, [r7, #7]
}
 80124c0:	4618      	mov	r0, r3
 80124c2:	3708      	adds	r7, #8
 80124c4:	46bd      	mov	sp, r7
 80124c6:	bd80      	pop	{r7, pc}
 80124c8:	58020000 	.word	0x58020000

080124cc <SD_CheckStatusWithTimeout>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static int SD_CheckStatusWithTimeout(uint32_t timeout)
{
 80124cc:	b580      	push	{r7, lr}
 80124ce:	b084      	sub	sp, #16
 80124d0:	af00      	add	r7, sp, #0
 80124d2:	6078      	str	r0, [r7, #4]
  uint32_t timer = HAL_GetTick();
 80124d4:	f7f1 f910 	bl	80036f8 <HAL_GetTick>
 80124d8:	60f8      	str	r0, [r7, #12]
  /* block until SDIO IP is ready again or a timeout occur */
  while(HAL_GetTick() - timer < timeout)
 80124da:	e006      	b.n	80124ea <SD_CheckStatusWithTimeout+0x1e>
  {
    if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 80124dc:	f7ff ff9c 	bl	8012418 <BSP_SD_GetCardState>
 80124e0:	4603      	mov	r3, r0
 80124e2:	2b00      	cmp	r3, #0
 80124e4:	d101      	bne.n	80124ea <SD_CheckStatusWithTimeout+0x1e>
    {
      return 0;
 80124e6:	2300      	movs	r3, #0
 80124e8:	e009      	b.n	80124fe <SD_CheckStatusWithTimeout+0x32>
  while(HAL_GetTick() - timer < timeout)
 80124ea:	f7f1 f905 	bl	80036f8 <HAL_GetTick>
 80124ee:	4602      	mov	r2, r0
 80124f0:	68fb      	ldr	r3, [r7, #12]
 80124f2:	1ad3      	subs	r3, r2, r3
 80124f4:	687a      	ldr	r2, [r7, #4]
 80124f6:	429a      	cmp	r2, r3
 80124f8:	d8f0      	bhi.n	80124dc <SD_CheckStatusWithTimeout+0x10>
    }
  }

  return -1;
 80124fa:	f04f 33ff 	mov.w	r3, #4294967295
}
 80124fe:	4618      	mov	r0, r3
 8012500:	3710      	adds	r7, #16
 8012502:	46bd      	mov	sp, r7
 8012504:	bd80      	pop	{r7, pc}
	...

08012508 <SD_CheckStatus>:

static DSTATUS SD_CheckStatus(BYTE lun)
{
 8012508:	b580      	push	{r7, lr}
 801250a:	b082      	sub	sp, #8
 801250c:	af00      	add	r7, sp, #0
 801250e:	4603      	mov	r3, r0
 8012510:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 8012512:	4b0b      	ldr	r3, [pc, #44]	; (8012540 <SD_CheckStatus+0x38>)
 8012514:	2201      	movs	r2, #1
 8012516:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 8012518:	f7ff ff7e 	bl	8012418 <BSP_SD_GetCardState>
 801251c:	4603      	mov	r3, r0
 801251e:	2b00      	cmp	r3, #0
 8012520:	d107      	bne.n	8012532 <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 8012522:	4b07      	ldr	r3, [pc, #28]	; (8012540 <SD_CheckStatus+0x38>)
 8012524:	781b      	ldrb	r3, [r3, #0]
 8012526:	b2db      	uxtb	r3, r3
 8012528:	f023 0301 	bic.w	r3, r3, #1
 801252c:	b2da      	uxtb	r2, r3
 801252e:	4b04      	ldr	r3, [pc, #16]	; (8012540 <SD_CheckStatus+0x38>)
 8012530:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 8012532:	4b03      	ldr	r3, [pc, #12]	; (8012540 <SD_CheckStatus+0x38>)
 8012534:	781b      	ldrb	r3, [r3, #0]
 8012536:	b2db      	uxtb	r3, r3
}
 8012538:	4618      	mov	r0, r3
 801253a:	3708      	adds	r7, #8
 801253c:	46bd      	mov	sp, r7
 801253e:	bd80      	pop	{r7, pc}
 8012540:	24000019 	.word	0x24000019

08012544 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 8012544:	b580      	push	{r7, lr}
 8012546:	b082      	sub	sp, #8
 8012548:	af00      	add	r7, sp, #0
 801254a:	4603      	mov	r3, r0
 801254c:	71fb      	strb	r3, [r7, #7]

#if !defined(DISABLE_SD_INIT)

  if(BSP_SD_Init() == MSD_OK)
 801254e:	f7ff ff09 	bl	8012364 <BSP_SD_Init>
 8012552:	4603      	mov	r3, r0
 8012554:	2b00      	cmp	r3, #0
 8012556:	d107      	bne.n	8012568 <SD_initialize+0x24>
  {
    Stat = SD_CheckStatus(lun);
 8012558:	79fb      	ldrb	r3, [r7, #7]
 801255a:	4618      	mov	r0, r3
 801255c:	f7ff ffd4 	bl	8012508 <SD_CheckStatus>
 8012560:	4603      	mov	r3, r0
 8012562:	461a      	mov	r2, r3
 8012564:	4b04      	ldr	r3, [pc, #16]	; (8012578 <SD_initialize+0x34>)
 8012566:	701a      	strb	r2, [r3, #0]

#else
  Stat = SD_CheckStatus(lun);
#endif

  return Stat;
 8012568:	4b03      	ldr	r3, [pc, #12]	; (8012578 <SD_initialize+0x34>)
 801256a:	781b      	ldrb	r3, [r3, #0]
 801256c:	b2db      	uxtb	r3, r3
}
 801256e:	4618      	mov	r0, r3
 8012570:	3708      	adds	r7, #8
 8012572:	46bd      	mov	sp, r7
 8012574:	bd80      	pop	{r7, pc}
 8012576:	bf00      	nop
 8012578:	24000019 	.word	0x24000019

0801257c <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 801257c:	b580      	push	{r7, lr}
 801257e:	b082      	sub	sp, #8
 8012580:	af00      	add	r7, sp, #0
 8012582:	4603      	mov	r3, r0
 8012584:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 8012586:	79fb      	ldrb	r3, [r7, #7]
 8012588:	4618      	mov	r0, r3
 801258a:	f7ff ffbd 	bl	8012508 <SD_CheckStatus>
 801258e:	4603      	mov	r3, r0
}
 8012590:	4618      	mov	r0, r3
 8012592:	3708      	adds	r7, #8
 8012594:	46bd      	mov	sp, r7
 8012596:	bd80      	pop	{r7, pc}

08012598 <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 8012598:	b580      	push	{r7, lr}
 801259a:	b086      	sub	sp, #24
 801259c:	af00      	add	r7, sp, #0
 801259e:	60b9      	str	r1, [r7, #8]
 80125a0:	607a      	str	r2, [r7, #4]
 80125a2:	603b      	str	r3, [r7, #0]
 80125a4:	4603      	mov	r3, r0
 80125a6:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 80125a8:	2301      	movs	r3, #1
 80125aa:	75fb      	strb	r3, [r7, #23]

  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 80125ac:	f247 5030 	movw	r0, #30000	; 0x7530
 80125b0:	f7ff ff8c 	bl	80124cc <SD_CheckStatusWithTimeout>
 80125b4:	4603      	mov	r3, r0
 80125b6:	2b00      	cmp	r3, #0
 80125b8:	da01      	bge.n	80125be <SD_read+0x26>
  {
    return res;
 80125ba:	7dfb      	ldrb	r3, [r7, #23]
 80125bc:	e03b      	b.n	8012636 <SD_read+0x9e>

#if defined(ENABLE_SCRATCH_BUFFER)
  if (!((uint32_t)buff & 0x3))
  {
#endif
    if(BSP_SD_ReadBlocks_DMA((uint32_t*)buff,
 80125be:	683a      	ldr	r2, [r7, #0]
 80125c0:	6879      	ldr	r1, [r7, #4]
 80125c2:	68b8      	ldr	r0, [r7, #8]
 80125c4:	f7ff fef4 	bl	80123b0 <BSP_SD_ReadBlocks_DMA>
 80125c8:	4603      	mov	r3, r0
 80125ca:	2b00      	cmp	r3, #0
 80125cc:	d132      	bne.n	8012634 <SD_read+0x9c>
                             (uint32_t) (sector),
                             count) == MSD_OK)
    {
      ReadStatus = 0;
 80125ce:	4b1c      	ldr	r3, [pc, #112]	; (8012640 <SD_read+0xa8>)
 80125d0:	2200      	movs	r2, #0
 80125d2:	601a      	str	r2, [r3, #0]
      /* Wait that the reading process is completed or a timeout occurs */
      timeout = HAL_GetTick();
 80125d4:	f7f1 f890 	bl	80036f8 <HAL_GetTick>
 80125d8:	6138      	str	r0, [r7, #16]
      while((ReadStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 80125da:	bf00      	nop
 80125dc:	4b18      	ldr	r3, [pc, #96]	; (8012640 <SD_read+0xa8>)
 80125de:	681b      	ldr	r3, [r3, #0]
 80125e0:	2b00      	cmp	r3, #0
 80125e2:	d108      	bne.n	80125f6 <SD_read+0x5e>
 80125e4:	f7f1 f888 	bl	80036f8 <HAL_GetTick>
 80125e8:	4602      	mov	r2, r0
 80125ea:	693b      	ldr	r3, [r7, #16]
 80125ec:	1ad3      	subs	r3, r2, r3
 80125ee:	f247 522f 	movw	r2, #29999	; 0x752f
 80125f2:	4293      	cmp	r3, r2
 80125f4:	d9f2      	bls.n	80125dc <SD_read+0x44>
      {
      }
      /* incase of a timeout return error */
      if (ReadStatus == 0)
 80125f6:	4b12      	ldr	r3, [pc, #72]	; (8012640 <SD_read+0xa8>)
 80125f8:	681b      	ldr	r3, [r3, #0]
 80125fa:	2b00      	cmp	r3, #0
 80125fc:	d102      	bne.n	8012604 <SD_read+0x6c>
      {
        res = RES_ERROR;
 80125fe:	2301      	movs	r3, #1
 8012600:	75fb      	strb	r3, [r7, #23]
 8012602:	e017      	b.n	8012634 <SD_read+0x9c>
      }
      else
      {
        ReadStatus = 0;
 8012604:	4b0e      	ldr	r3, [pc, #56]	; (8012640 <SD_read+0xa8>)
 8012606:	2200      	movs	r2, #0
 8012608:	601a      	str	r2, [r3, #0]
        timeout = HAL_GetTick();
 801260a:	f7f1 f875 	bl	80036f8 <HAL_GetTick>
 801260e:	6138      	str	r0, [r7, #16]

        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 8012610:	e007      	b.n	8012622 <SD_read+0x8a>
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 8012612:	f7ff ff01 	bl	8012418 <BSP_SD_GetCardState>
 8012616:	4603      	mov	r3, r0
 8012618:	2b00      	cmp	r3, #0
 801261a:	d102      	bne.n	8012622 <SD_read+0x8a>
          {
            res = RES_OK;
 801261c:	2300      	movs	r3, #0
 801261e:	75fb      	strb	r3, [r7, #23]
            adjust the address and the D-Cache size to invalidate accordingly.
            */
            alignedAddr = (uint32_t)buff & ~0x1F;
            SCB_InvalidateDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif
            break;
 8012620:	e008      	b.n	8012634 <SD_read+0x9c>
        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 8012622:	f7f1 f869 	bl	80036f8 <HAL_GetTick>
 8012626:	4602      	mov	r2, r0
 8012628:	693b      	ldr	r3, [r7, #16]
 801262a:	1ad3      	subs	r3, r2, r3
 801262c:	f247 522f 	movw	r2, #29999	; 0x752f
 8012630:	4293      	cmp	r3, r2
 8012632:	d9ee      	bls.n	8012612 <SD_read+0x7a>
      if ((i == count) && (ret == MSD_OK))
        res = RES_OK;
    }
#endif

  return res;
 8012634:	7dfb      	ldrb	r3, [r7, #23]
}
 8012636:	4618      	mov	r0, r3
 8012638:	3718      	adds	r7, #24
 801263a:	46bd      	mov	sp, r7
 801263c:	bd80      	pop	{r7, pc}
 801263e:	bf00      	nop
 8012640:	24000b48 	.word	0x24000b48

08012644 <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 8012644:	b580      	push	{r7, lr}
 8012646:	b086      	sub	sp, #24
 8012648:	af00      	add	r7, sp, #0
 801264a:	60b9      	str	r1, [r7, #8]
 801264c:	607a      	str	r2, [r7, #4]
 801264e:	603b      	str	r3, [r7, #0]
 8012650:	4603      	mov	r3, r0
 8012652:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8012654:	2301      	movs	r3, #1
 8012656:	75fb      	strb	r3, [r7, #23]
#if defined(ENABLE_SCRATCH_BUFFER)
  uint8_t ret;
  int i;
#endif

   WriteStatus = 0;
 8012658:	4b24      	ldr	r3, [pc, #144]	; (80126ec <SD_write+0xa8>)
 801265a:	2200      	movs	r2, #0
 801265c:	601a      	str	r2, [r3, #0]
#if (ENABLE_SD_DMA_CACHE_MAINTENANCE == 1)
  uint32_t alignedAddr;
#endif

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 801265e:	f247 5030 	movw	r0, #30000	; 0x7530
 8012662:	f7ff ff33 	bl	80124cc <SD_CheckStatusWithTimeout>
 8012666:	4603      	mov	r3, r0
 8012668:	2b00      	cmp	r3, #0
 801266a:	da01      	bge.n	8012670 <SD_write+0x2c>
  {
    return res;
 801266c:	7dfb      	ldrb	r3, [r7, #23]
 801266e:	e038      	b.n	80126e2 <SD_write+0x9e>
    */
    alignedAddr = (uint32_t)buff &  ~0x1F;
    SCB_CleanDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif

    if(BSP_SD_WriteBlocks_DMA((uint32_t*)buff,
 8012670:	683a      	ldr	r2, [r7, #0]
 8012672:	6879      	ldr	r1, [r7, #4]
 8012674:	68b8      	ldr	r0, [r7, #8]
 8012676:	f7ff feb5 	bl	80123e4 <BSP_SD_WriteBlocks_DMA>
 801267a:	4603      	mov	r3, r0
 801267c:	2b00      	cmp	r3, #0
 801267e:	d12f      	bne.n	80126e0 <SD_write+0x9c>
                              (uint32_t)(sector),
                              count) == MSD_OK)
    {
      /* Wait that writing process is completed or a timeout occurs */

      timeout = HAL_GetTick();
 8012680:	f7f1 f83a 	bl	80036f8 <HAL_GetTick>
 8012684:	6138      	str	r0, [r7, #16]
      while((WriteStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 8012686:	bf00      	nop
 8012688:	4b18      	ldr	r3, [pc, #96]	; (80126ec <SD_write+0xa8>)
 801268a:	681b      	ldr	r3, [r3, #0]
 801268c:	2b00      	cmp	r3, #0
 801268e:	d108      	bne.n	80126a2 <SD_write+0x5e>
 8012690:	f7f1 f832 	bl	80036f8 <HAL_GetTick>
 8012694:	4602      	mov	r2, r0
 8012696:	693b      	ldr	r3, [r7, #16]
 8012698:	1ad3      	subs	r3, r2, r3
 801269a:	f247 522f 	movw	r2, #29999	; 0x752f
 801269e:	4293      	cmp	r3, r2
 80126a0:	d9f2      	bls.n	8012688 <SD_write+0x44>
      {
      }
      /* incase of a timeout return error */
      if (WriteStatus == 0)
 80126a2:	4b12      	ldr	r3, [pc, #72]	; (80126ec <SD_write+0xa8>)
 80126a4:	681b      	ldr	r3, [r3, #0]
 80126a6:	2b00      	cmp	r3, #0
 80126a8:	d102      	bne.n	80126b0 <SD_write+0x6c>
      {
        res = RES_ERROR;
 80126aa:	2301      	movs	r3, #1
 80126ac:	75fb      	strb	r3, [r7, #23]
 80126ae:	e017      	b.n	80126e0 <SD_write+0x9c>
      }
      else
      {
        WriteStatus = 0;
 80126b0:	4b0e      	ldr	r3, [pc, #56]	; (80126ec <SD_write+0xa8>)
 80126b2:	2200      	movs	r2, #0
 80126b4:	601a      	str	r2, [r3, #0]
        timeout = HAL_GetTick();
 80126b6:	f7f1 f81f 	bl	80036f8 <HAL_GetTick>
 80126ba:	6138      	str	r0, [r7, #16]

        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 80126bc:	e007      	b.n	80126ce <SD_write+0x8a>
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 80126be:	f7ff feab 	bl	8012418 <BSP_SD_GetCardState>
 80126c2:	4603      	mov	r3, r0
 80126c4:	2b00      	cmp	r3, #0
 80126c6:	d102      	bne.n	80126ce <SD_write+0x8a>
          {
            res = RES_OK;
 80126c8:	2300      	movs	r3, #0
 80126ca:	75fb      	strb	r3, [r7, #23]
            break;
 80126cc:	e008      	b.n	80126e0 <SD_write+0x9c>
        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 80126ce:	f7f1 f813 	bl	80036f8 <HAL_GetTick>
 80126d2:	4602      	mov	r2, r0
 80126d4:	693b      	ldr	r3, [r7, #16]
 80126d6:	1ad3      	subs	r3, r2, r3
 80126d8:	f247 522f 	movw	r2, #29999	; 0x752f
 80126dc:	4293      	cmp	r3, r2
 80126de:	d9ee      	bls.n	80126be <SD_write+0x7a>
      }
      if ((i == count) && (ret == MSD_OK))
        res = RES_OK;
    }
#endif
  return res;
 80126e0:	7dfb      	ldrb	r3, [r7, #23]
}
 80126e2:	4618      	mov	r0, r3
 80126e4:	3718      	adds	r7, #24
 80126e6:	46bd      	mov	sp, r7
 80126e8:	bd80      	pop	{r7, pc}
 80126ea:	bf00      	nop
 80126ec:	24000b44 	.word	0x24000b44

080126f0 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 80126f0:	b580      	push	{r7, lr}
 80126f2:	b08c      	sub	sp, #48	; 0x30
 80126f4:	af00      	add	r7, sp, #0
 80126f6:	4603      	mov	r3, r0
 80126f8:	603a      	str	r2, [r7, #0]
 80126fa:	71fb      	strb	r3, [r7, #7]
 80126fc:	460b      	mov	r3, r1
 80126fe:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 8012700:	2301      	movs	r3, #1
 8012702:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 8012706:	4b25      	ldr	r3, [pc, #148]	; (801279c <SD_ioctl+0xac>)
 8012708:	781b      	ldrb	r3, [r3, #0]
 801270a:	b2db      	uxtb	r3, r3
 801270c:	f003 0301 	and.w	r3, r3, #1
 8012710:	2b00      	cmp	r3, #0
 8012712:	d001      	beq.n	8012718 <SD_ioctl+0x28>
 8012714:	2303      	movs	r3, #3
 8012716:	e03c      	b.n	8012792 <SD_ioctl+0xa2>

  switch (cmd)
 8012718:	79bb      	ldrb	r3, [r7, #6]
 801271a:	2b03      	cmp	r3, #3
 801271c:	d834      	bhi.n	8012788 <SD_ioctl+0x98>
 801271e:	a201      	add	r2, pc, #4	; (adr r2, 8012724 <SD_ioctl+0x34>)
 8012720:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012724:	08012735 	.word	0x08012735
 8012728:	0801273d 	.word	0x0801273d
 801272c:	08012755 	.word	0x08012755
 8012730:	0801276f 	.word	0x0801276f
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 8012734:	2300      	movs	r3, #0
 8012736:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 801273a:	e028      	b.n	801278e <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 801273c:	f107 0308 	add.w	r3, r7, #8
 8012740:	4618      	mov	r0, r3
 8012742:	f7ff fe79 	bl	8012438 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 8012746:	6a3a      	ldr	r2, [r7, #32]
 8012748:	683b      	ldr	r3, [r7, #0]
 801274a:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 801274c:	2300      	movs	r3, #0
 801274e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8012752:	e01c      	b.n	801278e <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 8012754:	f107 0308 	add.w	r3, r7, #8
 8012758:	4618      	mov	r0, r3
 801275a:	f7ff fe6d 	bl	8012438 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 801275e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012760:	b29a      	uxth	r2, r3
 8012762:	683b      	ldr	r3, [r7, #0]
 8012764:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 8012766:	2300      	movs	r3, #0
 8012768:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 801276c:	e00f      	b.n	801278e <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 801276e:	f107 0308 	add.w	r3, r7, #8
 8012772:	4618      	mov	r0, r3
 8012774:	f7ff fe60 	bl	8012438 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 8012778:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801277a:	0a5a      	lsrs	r2, r3, #9
 801277c:	683b      	ldr	r3, [r7, #0]
 801277e:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 8012780:	2300      	movs	r3, #0
 8012782:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8012786:	e002      	b.n	801278e <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 8012788:	2304      	movs	r3, #4
 801278a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  return res;
 801278e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8012792:	4618      	mov	r0, r3
 8012794:	3730      	adds	r7, #48	; 0x30
 8012796:	46bd      	mov	sp, r7
 8012798:	bd80      	pop	{r7, pc}
 801279a:	bf00      	nop
 801279c:	24000019 	.word	0x24000019

080127a0 <BSP_SD_WriteCpltCallback>:
  * @brief Tx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_WriteCpltCallback(void)
{
 80127a0:	b480      	push	{r7}
 80127a2:	af00      	add	r7, sp, #0

  WriteStatus = 1;
 80127a4:	4b03      	ldr	r3, [pc, #12]	; (80127b4 <BSP_SD_WriteCpltCallback+0x14>)
 80127a6:	2201      	movs	r2, #1
 80127a8:	601a      	str	r2, [r3, #0]
}
 80127aa:	bf00      	nop
 80127ac:	46bd      	mov	sp, r7
 80127ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80127b2:	4770      	bx	lr
 80127b4:	24000b44 	.word	0x24000b44

080127b8 <BSP_SD_ReadCpltCallback>:
  * @brief Rx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_ReadCpltCallback(void)
{
 80127b8:	b480      	push	{r7}
 80127ba:	af00      	add	r7, sp, #0
  ReadStatus = 1;
 80127bc:	4b03      	ldr	r3, [pc, #12]	; (80127cc <BSP_SD_ReadCpltCallback+0x14>)
 80127be:	2201      	movs	r2, #1
 80127c0:	601a      	str	r2, [r3, #0]
}
 80127c2:	bf00      	nop
 80127c4:	46bd      	mov	sp, r7
 80127c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80127ca:	4770      	bx	lr
 80127cc:	24000b48 	.word	0x24000b48

080127d0 <USBD_MSC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
uint8_t USBD_MSC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80127d0:	b580      	push	{r7, lr}
 80127d2:	b084      	sub	sp, #16
 80127d4:	af00      	add	r7, sp, #0
 80127d6:	6078      	str	r0, [r7, #4]
 80127d8:	460b      	mov	r3, r1
 80127da:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_MSC_BOT_HandleTypeDef *hmsc;

  hmsc = USBD_malloc(sizeof(USBD_MSC_BOT_HandleTypeDef));
 80127dc:	f248 0074 	movw	r0, #32884	; 0x8074
 80127e0:	f005 fed0 	bl	8018584 <malloc>
 80127e4:	4603      	mov	r3, r0
 80127e6:	60fb      	str	r3, [r7, #12]

  if (hmsc == NULL)
 80127e8:	68fb      	ldr	r3, [r7, #12]
 80127ea:	2b00      	cmp	r3, #0
 80127ec:	d105      	bne.n	80127fa <USBD_MSC_Init+0x2a>
  {
    pdev->pClassData = NULL;
 80127ee:	687b      	ldr	r3, [r7, #4]
 80127f0:	2200      	movs	r2, #0
 80127f2:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 80127f6:	2302      	movs	r3, #2
 80127f8:	e034      	b.n	8012864 <USBD_MSC_Init+0x94>
  }

  pdev->pClassData = (void *)hmsc;
 80127fa:	687b      	ldr	r3, [r7, #4]
 80127fc:	68fa      	ldr	r2, [r7, #12]
 80127fe:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8012802:	687b      	ldr	r3, [r7, #4]
 8012804:	7c1b      	ldrb	r3, [r3, #16]
 8012806:	2b00      	cmp	r3, #0
 8012808:	d115      	bne.n	8012836 <USBD_MSC_Init+0x66>
  {
    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, MSC_EPOUT_ADDR, USBD_EP_TYPE_BULK, MSC_MAX_HS_PACKET);
 801280a:	f44f 7300 	mov.w	r3, #512	; 0x200
 801280e:	2202      	movs	r2, #2
 8012810:	2101      	movs	r1, #1
 8012812:	6878      	ldr	r0, [r7, #4]
 8012814:	f005 fd1d 	bl	8018252 <USBD_LL_OpenEP>
    pdev->ep_out[MSC_EPOUT_ADDR & 0xFU].is_used = 1U;
 8012818:	687b      	ldr	r3, [r7, #4]
 801281a:	2201      	movs	r2, #1
 801281c:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, MSC_EPIN_ADDR, USBD_EP_TYPE_BULK, MSC_MAX_HS_PACKET);
 8012820:	f44f 7300 	mov.w	r3, #512	; 0x200
 8012824:	2202      	movs	r2, #2
 8012826:	2181      	movs	r1, #129	; 0x81
 8012828:	6878      	ldr	r0, [r7, #4]
 801282a:	f005 fd12 	bl	8018252 <USBD_LL_OpenEP>
    pdev->ep_in[MSC_EPIN_ADDR & 0xFU].is_used = 1U;
 801282e:	687b      	ldr	r3, [r7, #4]
 8012830:	2201      	movs	r2, #1
 8012832:	871a      	strh	r2, [r3, #56]	; 0x38
 8012834:	e012      	b.n	801285c <USBD_MSC_Init+0x8c>
  }
  else
  {
    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, MSC_EPOUT_ADDR, USBD_EP_TYPE_BULK, MSC_MAX_FS_PACKET);
 8012836:	2340      	movs	r3, #64	; 0x40
 8012838:	2202      	movs	r2, #2
 801283a:	2101      	movs	r1, #1
 801283c:	6878      	ldr	r0, [r7, #4]
 801283e:	f005 fd08 	bl	8018252 <USBD_LL_OpenEP>
    pdev->ep_out[MSC_EPOUT_ADDR & 0xFU].is_used = 1U;
 8012842:	687b      	ldr	r3, [r7, #4]
 8012844:	2201      	movs	r2, #1
 8012846:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, MSC_EPIN_ADDR, USBD_EP_TYPE_BULK, MSC_MAX_FS_PACKET);
 801284a:	2340      	movs	r3, #64	; 0x40
 801284c:	2202      	movs	r2, #2
 801284e:	2181      	movs	r1, #129	; 0x81
 8012850:	6878      	ldr	r0, [r7, #4]
 8012852:	f005 fcfe 	bl	8018252 <USBD_LL_OpenEP>
    pdev->ep_in[MSC_EPIN_ADDR & 0xFU].is_used = 1U;
 8012856:	687b      	ldr	r3, [r7, #4]
 8012858:	2201      	movs	r2, #1
 801285a:	871a      	strh	r2, [r3, #56]	; 0x38
  }

  /* Init the BOT  layer */
  MSC_BOT_Init(pdev);
 801285c:	6878      	ldr	r0, [r7, #4]
 801285e:	f000 f98e 	bl	8012b7e <MSC_BOT_Init>

  return (uint8_t)USBD_OK;
 8012862:	2300      	movs	r3, #0
}
 8012864:	4618      	mov	r0, r3
 8012866:	3710      	adds	r7, #16
 8012868:	46bd      	mov	sp, r7
 801286a:	bd80      	pop	{r7, pc}

0801286c <USBD_MSC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
uint8_t USBD_MSC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 801286c:	b580      	push	{r7, lr}
 801286e:	b082      	sub	sp, #8
 8012870:	af00      	add	r7, sp, #0
 8012872:	6078      	str	r0, [r7, #4]
 8012874:	460b      	mov	r3, r1
 8012876:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  /* Close MSC EPs */
  (void)USBD_LL_CloseEP(pdev, MSC_EPOUT_ADDR);
 8012878:	2101      	movs	r1, #1
 801287a:	6878      	ldr	r0, [r7, #4]
 801287c:	f005 fd0f 	bl	801829e <USBD_LL_CloseEP>
  pdev->ep_out[MSC_EPOUT_ADDR & 0xFU].is_used = 0U;
 8012880:	687b      	ldr	r3, [r7, #4]
 8012882:	2200      	movs	r2, #0
 8012884:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, MSC_EPIN_ADDR);
 8012888:	2181      	movs	r1, #129	; 0x81
 801288a:	6878      	ldr	r0, [r7, #4]
 801288c:	f005 fd07 	bl	801829e <USBD_LL_CloseEP>
  pdev->ep_in[MSC_EPIN_ADDR & 0xFU].is_used = 0U;
 8012890:	687b      	ldr	r3, [r7, #4]
 8012892:	2200      	movs	r2, #0
 8012894:	871a      	strh	r2, [r3, #56]	; 0x38

  /* De-Init the BOT layer */
  MSC_BOT_DeInit(pdev);
 8012896:	6878      	ldr	r0, [r7, #4]
 8012898:	f000 f9cf 	bl	8012c3a <MSC_BOT_DeInit>

  /* Free MSC Class Resources */
  if (pdev->pClassData != NULL)
 801289c:	687b      	ldr	r3, [r7, #4]
 801289e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80128a2:	2b00      	cmp	r3, #0
 80128a4:	d009      	beq.n	80128ba <USBD_MSC_DeInit+0x4e>
  {
    (void)USBD_free(pdev->pClassData);
 80128a6:	687b      	ldr	r3, [r7, #4]
 80128a8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80128ac:	4618      	mov	r0, r3
 80128ae:	f005 fe71 	bl	8018594 <free>
    pdev->pClassData = NULL;
 80128b2:	687b      	ldr	r3, [r7, #4]
 80128b4:	2200      	movs	r2, #0
 80128b6:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 80128ba:	2300      	movs	r3, #0
}
 80128bc:	4618      	mov	r0, r3
 80128be:	3708      	adds	r7, #8
 80128c0:	46bd      	mov	sp, r7
 80128c2:	bd80      	pop	{r7, pc}

080128c4 <USBD_MSC_Setup>:
* @param  pdev: device instance
* @param  req: USB request
* @retval status
*/
uint8_t USBD_MSC_Setup(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80128c4:	b580      	push	{r7, lr}
 80128c6:	b086      	sub	sp, #24
 80128c8:	af00      	add	r7, sp, #0
 80128ca:	6078      	str	r0, [r7, #4]
 80128cc:	6039      	str	r1, [r7, #0]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 80128ce:	687b      	ldr	r3, [r7, #4]
 80128d0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80128d4:	613b      	str	r3, [r7, #16]
  USBD_StatusTypeDef ret = USBD_OK;
 80128d6:	2300      	movs	r3, #0
 80128d8:	75fb      	strb	r3, [r7, #23]
  uint16_t status_info = 0U;
 80128da:	2300      	movs	r3, #0
 80128dc:	81fb      	strh	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80128de:	683b      	ldr	r3, [r7, #0]
 80128e0:	781b      	ldrb	r3, [r3, #0]
 80128e2:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80128e6:	2b00      	cmp	r3, #0
 80128e8:	d04d      	beq.n	8012986 <USBD_MSC_Setup+0xc2>
 80128ea:	2b20      	cmp	r3, #32
 80128ec:	f040 80c6 	bne.w	8012a7c <USBD_MSC_Setup+0x1b8>
  {
    /* Class request */
  case USB_REQ_TYPE_CLASS:
    switch (req->bRequest)
 80128f0:	683b      	ldr	r3, [r7, #0]
 80128f2:	785b      	ldrb	r3, [r3, #1]
 80128f4:	2bfe      	cmp	r3, #254	; 0xfe
 80128f6:	d002      	beq.n	80128fe <USBD_MSC_Setup+0x3a>
 80128f8:	2bff      	cmp	r3, #255	; 0xff
 80128fa:	d024      	beq.n	8012946 <USBD_MSC_Setup+0x82>
 80128fc:	e03b      	b.n	8012976 <USBD_MSC_Setup+0xb2>
    {
    case BOT_GET_MAX_LUN:
      if ((req->wValue  == 0U) && (req->wLength == 1U) &&
 80128fe:	683b      	ldr	r3, [r7, #0]
 8012900:	885b      	ldrh	r3, [r3, #2]
 8012902:	2b00      	cmp	r3, #0
 8012904:	d118      	bne.n	8012938 <USBD_MSC_Setup+0x74>
 8012906:	683b      	ldr	r3, [r7, #0]
 8012908:	88db      	ldrh	r3, [r3, #6]
 801290a:	2b01      	cmp	r3, #1
 801290c:	d114      	bne.n	8012938 <USBD_MSC_Setup+0x74>
          ((req->bmRequest & 0x80U) == 0x80U))
 801290e:	683b      	ldr	r3, [r7, #0]
 8012910:	781b      	ldrb	r3, [r3, #0]
 8012912:	b25b      	sxtb	r3, r3
      if ((req->wValue  == 0U) && (req->wLength == 1U) &&
 8012914:	2b00      	cmp	r3, #0
 8012916:	da0f      	bge.n	8012938 <USBD_MSC_Setup+0x74>
      {
        hmsc->max_lun = (uint32_t)((USBD_StorageTypeDef *)pdev->pUserData)->GetMaxLun();
 8012918:	687b      	ldr	r3, [r7, #4]
 801291a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 801291e:	699b      	ldr	r3, [r3, #24]
 8012920:	4798      	blx	r3
 8012922:	4603      	mov	r3, r0
 8012924:	461a      	mov	r2, r3
 8012926:	693b      	ldr	r3, [r7, #16]
 8012928:	601a      	str	r2, [r3, #0]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&hmsc->max_lun, 1U);
 801292a:	693b      	ldr	r3, [r7, #16]
 801292c:	2201      	movs	r2, #1
 801292e:	4619      	mov	r1, r3
 8012930:	6878      	ldr	r0, [r7, #4]
 8012932:	f002 fdaa 	bl	801548a <USBD_CtlSendData>
      else
      {
        USBD_CtlError(pdev, req);
        ret = USBD_FAIL;
      }
      break;
 8012936:	e025      	b.n	8012984 <USBD_MSC_Setup+0xc0>
        USBD_CtlError(pdev, req);
 8012938:	6839      	ldr	r1, [r7, #0]
 801293a:	6878      	ldr	r0, [r7, #4]
 801293c:	f002 fd34 	bl	80153a8 <USBD_CtlError>
        ret = USBD_FAIL;
 8012940:	2303      	movs	r3, #3
 8012942:	75fb      	strb	r3, [r7, #23]
      break;
 8012944:	e01e      	b.n	8012984 <USBD_MSC_Setup+0xc0>

    case BOT_RESET :
      if ((req->wValue  == 0U) && (req->wLength == 0U) &&
 8012946:	683b      	ldr	r3, [r7, #0]
 8012948:	885b      	ldrh	r3, [r3, #2]
 801294a:	2b00      	cmp	r3, #0
 801294c:	d10c      	bne.n	8012968 <USBD_MSC_Setup+0xa4>
 801294e:	683b      	ldr	r3, [r7, #0]
 8012950:	88db      	ldrh	r3, [r3, #6]
 8012952:	2b00      	cmp	r3, #0
 8012954:	d108      	bne.n	8012968 <USBD_MSC_Setup+0xa4>
          ((req->bmRequest & 0x80U) != 0x80U))
 8012956:	683b      	ldr	r3, [r7, #0]
 8012958:	781b      	ldrb	r3, [r3, #0]
 801295a:	b25b      	sxtb	r3, r3
      if ((req->wValue  == 0U) && (req->wLength == 0U) &&
 801295c:	2b00      	cmp	r3, #0
 801295e:	db03      	blt.n	8012968 <USBD_MSC_Setup+0xa4>
      {
        MSC_BOT_Reset(pdev);
 8012960:	6878      	ldr	r0, [r7, #4]
 8012962:	f000 f947 	bl	8012bf4 <MSC_BOT_Reset>
      else
      {
        USBD_CtlError(pdev, req);
        ret = USBD_FAIL;
      }
      break;
 8012966:	e00d      	b.n	8012984 <USBD_MSC_Setup+0xc0>
        USBD_CtlError(pdev, req);
 8012968:	6839      	ldr	r1, [r7, #0]
 801296a:	6878      	ldr	r0, [r7, #4]
 801296c:	f002 fd1c 	bl	80153a8 <USBD_CtlError>
        ret = USBD_FAIL;
 8012970:	2303      	movs	r3, #3
 8012972:	75fb      	strb	r3, [r7, #23]
      break;
 8012974:	e006      	b.n	8012984 <USBD_MSC_Setup+0xc0>

    default:
      USBD_CtlError(pdev, req);
 8012976:	6839      	ldr	r1, [r7, #0]
 8012978:	6878      	ldr	r0, [r7, #4]
 801297a:	f002 fd15 	bl	80153a8 <USBD_CtlError>
      ret = USBD_FAIL;
 801297e:	2303      	movs	r3, #3
 8012980:	75fb      	strb	r3, [r7, #23]
      break;
 8012982:	bf00      	nop
    }
    break;
 8012984:	e081      	b.n	8012a8a <USBD_MSC_Setup+0x1c6>
    /* Interface & Endpoint request */
  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 8012986:	683b      	ldr	r3, [r7, #0]
 8012988:	785b      	ldrb	r3, [r3, #1]
 801298a:	2b0b      	cmp	r3, #11
 801298c:	d86d      	bhi.n	8012a6a <USBD_MSC_Setup+0x1a6>
 801298e:	a201      	add	r2, pc, #4	; (adr r2, 8012994 <USBD_MSC_Setup+0xd0>)
 8012990:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012994:	080129c5 	.word	0x080129c5
 8012998:	08012a3b 	.word	0x08012a3b
 801299c:	08012a6b 	.word	0x08012a6b
 80129a0:	08012a6b 	.word	0x08012a6b
 80129a4:	08012a6b 	.word	0x08012a6b
 80129a8:	08012a6b 	.word	0x08012a6b
 80129ac:	08012a6b 	.word	0x08012a6b
 80129b0:	08012a6b 	.word	0x08012a6b
 80129b4:	08012a6b 	.word	0x08012a6b
 80129b8:	08012a6b 	.word	0x08012a6b
 80129bc:	080129ed 	.word	0x080129ed
 80129c0:	08012a15 	.word	0x08012a15
    {
    case USB_REQ_GET_STATUS:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80129c4:	687b      	ldr	r3, [r7, #4]
 80129c6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80129ca:	2b03      	cmp	r3, #3
 80129cc:	d107      	bne.n	80129de <USBD_MSC_Setup+0x11a>
      {
        (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 80129ce:	f107 030e 	add.w	r3, r7, #14
 80129d2:	2202      	movs	r2, #2
 80129d4:	4619      	mov	r1, r3
 80129d6:	6878      	ldr	r0, [r7, #4]
 80129d8:	f002 fd57 	bl	801548a <USBD_CtlSendData>
      else
      {
        USBD_CtlError(pdev, req);
        ret = USBD_FAIL;
      }
      break;
 80129dc:	e04d      	b.n	8012a7a <USBD_MSC_Setup+0x1b6>
        USBD_CtlError(pdev, req);
 80129de:	6839      	ldr	r1, [r7, #0]
 80129e0:	6878      	ldr	r0, [r7, #4]
 80129e2:	f002 fce1 	bl	80153a8 <USBD_CtlError>
        ret = USBD_FAIL;
 80129e6:	2303      	movs	r3, #3
 80129e8:	75fb      	strb	r3, [r7, #23]
      break;
 80129ea:	e046      	b.n	8012a7a <USBD_MSC_Setup+0x1b6>

    case USB_REQ_GET_INTERFACE:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80129ec:	687b      	ldr	r3, [r7, #4]
 80129ee:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80129f2:	2b03      	cmp	r3, #3
 80129f4:	d107      	bne.n	8012a06 <USBD_MSC_Setup+0x142>
      {
        (void)USBD_CtlSendData(pdev, (uint8_t *)&hmsc->interface, 1U);
 80129f6:	693b      	ldr	r3, [r7, #16]
 80129f8:	3304      	adds	r3, #4
 80129fa:	2201      	movs	r2, #1
 80129fc:	4619      	mov	r1, r3
 80129fe:	6878      	ldr	r0, [r7, #4]
 8012a00:	f002 fd43 	bl	801548a <USBD_CtlSendData>
      else
      {
        USBD_CtlError(pdev, req);
        ret = USBD_FAIL;
      }
      break;
 8012a04:	e039      	b.n	8012a7a <USBD_MSC_Setup+0x1b6>
        USBD_CtlError(pdev, req);
 8012a06:	6839      	ldr	r1, [r7, #0]
 8012a08:	6878      	ldr	r0, [r7, #4]
 8012a0a:	f002 fccd 	bl	80153a8 <USBD_CtlError>
        ret = USBD_FAIL;
 8012a0e:	2303      	movs	r3, #3
 8012a10:	75fb      	strb	r3, [r7, #23]
      break;
 8012a12:	e032      	b.n	8012a7a <USBD_MSC_Setup+0x1b6>

    case USB_REQ_SET_INTERFACE:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8012a14:	687b      	ldr	r3, [r7, #4]
 8012a16:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8012a1a:	2b03      	cmp	r3, #3
 8012a1c:	d106      	bne.n	8012a2c <USBD_MSC_Setup+0x168>
      {
        hmsc->interface = (uint8_t)(req->wValue);
 8012a1e:	683b      	ldr	r3, [r7, #0]
 8012a20:	885b      	ldrh	r3, [r3, #2]
 8012a22:	b2db      	uxtb	r3, r3
 8012a24:	461a      	mov	r2, r3
 8012a26:	693b      	ldr	r3, [r7, #16]
 8012a28:	605a      	str	r2, [r3, #4]
      else
      {
        USBD_CtlError(pdev, req);
        ret = USBD_FAIL;
      }
      break;
 8012a2a:	e026      	b.n	8012a7a <USBD_MSC_Setup+0x1b6>
        USBD_CtlError(pdev, req);
 8012a2c:	6839      	ldr	r1, [r7, #0]
 8012a2e:	6878      	ldr	r0, [r7, #4]
 8012a30:	f002 fcba 	bl	80153a8 <USBD_CtlError>
        ret = USBD_FAIL;
 8012a34:	2303      	movs	r3, #3
 8012a36:	75fb      	strb	r3, [r7, #23]
      break;
 8012a38:	e01f      	b.n	8012a7a <USBD_MSC_Setup+0x1b6>

    case USB_REQ_CLEAR_FEATURE:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8012a3a:	687b      	ldr	r3, [r7, #4]
 8012a3c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8012a40:	2b03      	cmp	r3, #3
 8012a42:	d119      	bne.n	8012a78 <USBD_MSC_Setup+0x1b4>
      {
        if (req->wValue == USB_FEATURE_EP_HALT)
 8012a44:	683b      	ldr	r3, [r7, #0]
 8012a46:	885b      	ldrh	r3, [r3, #2]
 8012a48:	2b00      	cmp	r3, #0
 8012a4a:	d115      	bne.n	8012a78 <USBD_MSC_Setup+0x1b4>
        {
          /* Flush the FIFO */
          (void)USBD_LL_FlushEP(pdev, (uint8_t)req->wIndex);
 8012a4c:	683b      	ldr	r3, [r7, #0]
 8012a4e:	889b      	ldrh	r3, [r3, #4]
 8012a50:	b2db      	uxtb	r3, r3
 8012a52:	4619      	mov	r1, r3
 8012a54:	6878      	ldr	r0, [r7, #4]
 8012a56:	f005 fc41 	bl	80182dc <USBD_LL_FlushEP>

          /* Handle BOT error */
          MSC_BOT_CplClrFeature(pdev, (uint8_t)req->wIndex);
 8012a5a:	683b      	ldr	r3, [r7, #0]
 8012a5c:	889b      	ldrh	r3, [r3, #4]
 8012a5e:	b2db      	uxtb	r3, r3
 8012a60:	4619      	mov	r1, r3
 8012a62:	6878      	ldr	r0, [r7, #4]
 8012a64:	f000 fa90 	bl	8012f88 <MSC_BOT_CplClrFeature>
        }
      }
      break;
 8012a68:	e006      	b.n	8012a78 <USBD_MSC_Setup+0x1b4>

    default:
      USBD_CtlError(pdev, req);
 8012a6a:	6839      	ldr	r1, [r7, #0]
 8012a6c:	6878      	ldr	r0, [r7, #4]
 8012a6e:	f002 fc9b 	bl	80153a8 <USBD_CtlError>
      ret = USBD_FAIL;
 8012a72:	2303      	movs	r3, #3
 8012a74:	75fb      	strb	r3, [r7, #23]
      break;
 8012a76:	e000      	b.n	8012a7a <USBD_MSC_Setup+0x1b6>
      break;
 8012a78:	bf00      	nop
    }
    break;
 8012a7a:	e006      	b.n	8012a8a <USBD_MSC_Setup+0x1c6>

  default:
    USBD_CtlError(pdev, req);
 8012a7c:	6839      	ldr	r1, [r7, #0]
 8012a7e:	6878      	ldr	r0, [r7, #4]
 8012a80:	f002 fc92 	bl	80153a8 <USBD_CtlError>
    ret = USBD_FAIL;
 8012a84:	2303      	movs	r3, #3
 8012a86:	75fb      	strb	r3, [r7, #23]
    break;
 8012a88:	bf00      	nop
  }

  return (uint8_t)ret;
 8012a8a:	7dfb      	ldrb	r3, [r7, #23]
}
 8012a8c:	4618      	mov	r0, r3
 8012a8e:	3718      	adds	r7, #24
 8012a90:	46bd      	mov	sp, r7
 8012a92:	bd80      	pop	{r7, pc}

08012a94 <USBD_MSC_DataIn>:
* @param  pdev: device instance
* @param  epnum: endpoint index
* @retval status
*/
uint8_t USBD_MSC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8012a94:	b580      	push	{r7, lr}
 8012a96:	b082      	sub	sp, #8
 8012a98:	af00      	add	r7, sp, #0
 8012a9a:	6078      	str	r0, [r7, #4]
 8012a9c:	460b      	mov	r3, r1
 8012a9e:	70fb      	strb	r3, [r7, #3]
  MSC_BOT_DataIn(pdev, epnum);
 8012aa0:	78fb      	ldrb	r3, [r7, #3]
 8012aa2:	4619      	mov	r1, r3
 8012aa4:	6878      	ldr	r0, [r7, #4]
 8012aa6:	f000 f8d9 	bl	8012c5c <MSC_BOT_DataIn>

  return (uint8_t)USBD_OK;
 8012aaa:	2300      	movs	r3, #0
}
 8012aac:	4618      	mov	r0, r3
 8012aae:	3708      	adds	r7, #8
 8012ab0:	46bd      	mov	sp, r7
 8012ab2:	bd80      	pop	{r7, pc}

08012ab4 <USBD_MSC_DataOut>:
* @param  pdev: device instance
* @param  epnum: endpoint index
* @retval status
*/
uint8_t USBD_MSC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8012ab4:	b580      	push	{r7, lr}
 8012ab6:	b082      	sub	sp, #8
 8012ab8:	af00      	add	r7, sp, #0
 8012aba:	6078      	str	r0, [r7, #4]
 8012abc:	460b      	mov	r3, r1
 8012abe:	70fb      	strb	r3, [r7, #3]
  MSC_BOT_DataOut(pdev, epnum);
 8012ac0:	78fb      	ldrb	r3, [r7, #3]
 8012ac2:	4619      	mov	r1, r3
 8012ac4:	6878      	ldr	r0, [r7, #4]
 8012ac6:	f000 f8fd 	bl	8012cc4 <MSC_BOT_DataOut>

  return (uint8_t)USBD_OK;
 8012aca:	2300      	movs	r3, #0
}
 8012acc:	4618      	mov	r0, r3
 8012ace:	3708      	adds	r7, #8
 8012ad0:	46bd      	mov	sp, r7
 8012ad2:	bd80      	pop	{r7, pc}

08012ad4 <USBD_MSC_GetHSCfgDesc>:
*         return configuration descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t *USBD_MSC_GetHSCfgDesc(uint16_t *length)
{
 8012ad4:	b480      	push	{r7}
 8012ad6:	b083      	sub	sp, #12
 8012ad8:	af00      	add	r7, sp, #0
 8012ada:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_MSC_CfgHSDesc);
 8012adc:	687b      	ldr	r3, [r7, #4]
 8012ade:	2220      	movs	r2, #32
 8012ae0:	801a      	strh	r2, [r3, #0]

  return USBD_MSC_CfgHSDesc;
 8012ae2:	4b03      	ldr	r3, [pc, #12]	; (8012af0 <USBD_MSC_GetHSCfgDesc+0x1c>)
}
 8012ae4:	4618      	mov	r0, r3
 8012ae6:	370c      	adds	r7, #12
 8012ae8:	46bd      	mov	sp, r7
 8012aea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012aee:	4770      	bx	lr
 8012af0:	24000054 	.word	0x24000054

08012af4 <USBD_MSC_GetFSCfgDesc>:
*         return configuration descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t *USBD_MSC_GetFSCfgDesc(uint16_t *length)
{
 8012af4:	b480      	push	{r7}
 8012af6:	b083      	sub	sp, #12
 8012af8:	af00      	add	r7, sp, #0
 8012afa:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_MSC_CfgFSDesc);
 8012afc:	687b      	ldr	r3, [r7, #4]
 8012afe:	2220      	movs	r2, #32
 8012b00:	801a      	strh	r2, [r3, #0]

  return USBD_MSC_CfgFSDesc;
 8012b02:	4b03      	ldr	r3, [pc, #12]	; (8012b10 <USBD_MSC_GetFSCfgDesc+0x1c>)
}
 8012b04:	4618      	mov	r0, r3
 8012b06:	370c      	adds	r7, #12
 8012b08:	46bd      	mov	sp, r7
 8012b0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012b0e:	4770      	bx	lr
 8012b10:	24000074 	.word	0x24000074

08012b14 <USBD_MSC_GetOtherSpeedCfgDesc>:
*         return other speed configuration descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t *USBD_MSC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8012b14:	b480      	push	{r7}
 8012b16:	b083      	sub	sp, #12
 8012b18:	af00      	add	r7, sp, #0
 8012b1a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_MSC_OtherSpeedCfgDesc);
 8012b1c:	687b      	ldr	r3, [r7, #4]
 8012b1e:	2220      	movs	r2, #32
 8012b20:	801a      	strh	r2, [r3, #0]

  return USBD_MSC_OtherSpeedCfgDesc;
 8012b22:	4b03      	ldr	r3, [pc, #12]	; (8012b30 <USBD_MSC_GetOtherSpeedCfgDesc+0x1c>)
}
 8012b24:	4618      	mov	r0, r3
 8012b26:	370c      	adds	r7, #12
 8012b28:	46bd      	mov	sp, r7
 8012b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012b2e:	4770      	bx	lr
 8012b30:	24000094 	.word	0x24000094

08012b34 <USBD_MSC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t *USBD_MSC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8012b34:	b480      	push	{r7}
 8012b36:	b083      	sub	sp, #12
 8012b38:	af00      	add	r7, sp, #0
 8012b3a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_MSC_DeviceQualifierDesc);
 8012b3c:	687b      	ldr	r3, [r7, #4]
 8012b3e:	220a      	movs	r2, #10
 8012b40:	801a      	strh	r2, [r3, #0]

  return USBD_MSC_DeviceQualifierDesc;
 8012b42:	4b03      	ldr	r3, [pc, #12]	; (8012b50 <USBD_MSC_GetDeviceQualifierDescriptor+0x1c>)
}
 8012b44:	4618      	mov	r0, r3
 8012b46:	370c      	adds	r7, #12
 8012b48:	46bd      	mov	sp, r7
 8012b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012b4e:	4770      	bx	lr
 8012b50:	240000b4 	.word	0x240000b4

08012b54 <USBD_MSC_RegisterStorage>:
* @brief  USBD_MSC_RegisterStorage
* @param  fops: storage callback
* @retval status
*/
uint8_t USBD_MSC_RegisterStorage(USBD_HandleTypeDef *pdev, USBD_StorageTypeDef *fops)
{
 8012b54:	b480      	push	{r7}
 8012b56:	b083      	sub	sp, #12
 8012b58:	af00      	add	r7, sp, #0
 8012b5a:	6078      	str	r0, [r7, #4]
 8012b5c:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8012b5e:	683b      	ldr	r3, [r7, #0]
 8012b60:	2b00      	cmp	r3, #0
 8012b62:	d101      	bne.n	8012b68 <USBD_MSC_RegisterStorage+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8012b64:	2303      	movs	r3, #3
 8012b66:	e004      	b.n	8012b72 <USBD_MSC_RegisterStorage+0x1e>
  }

  pdev->pUserData = fops;
 8012b68:	687b      	ldr	r3, [r7, #4]
 8012b6a:	683a      	ldr	r2, [r7, #0]
 8012b6c:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 8012b70:	2300      	movs	r3, #0
}
 8012b72:	4618      	mov	r0, r3
 8012b74:	370c      	adds	r7, #12
 8012b76:	46bd      	mov	sp, r7
 8012b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012b7c:	4770      	bx	lr

08012b7e <MSC_BOT_Init>:
*         Initialize the BOT Process
* @param  pdev: device instance
* @retval None
*/
void MSC_BOT_Init(USBD_HandleTypeDef *pdev)
{
 8012b7e:	b580      	push	{r7, lr}
 8012b80:	b084      	sub	sp, #16
 8012b82:	af00      	add	r7, sp, #0
 8012b84:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8012b86:	687b      	ldr	r3, [r7, #4]
 8012b88:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8012b8c:	60fb      	str	r3, [r7, #12]

  hmsc->bot_state = USBD_BOT_IDLE;
 8012b8e:	68fb      	ldr	r3, [r7, #12]
 8012b90:	2200      	movs	r2, #0
 8012b92:	721a      	strb	r2, [r3, #8]
  hmsc->bot_status = USBD_BOT_STATUS_NORMAL;
 8012b94:	68fb      	ldr	r3, [r7, #12]
 8012b96:	2200      	movs	r2, #0
 8012b98:	725a      	strb	r2, [r3, #9]

  hmsc->scsi_sense_tail = 0U;
 8012b9a:	68fa      	ldr	r2, [r7, #12]
 8012b9c:	f248 0361 	movw	r3, #32865	; 0x8061
 8012ba0:	4413      	add	r3, r2
 8012ba2:	2200      	movs	r2, #0
 8012ba4:	701a      	strb	r2, [r3, #0]
  hmsc->scsi_sense_head = 0U;
 8012ba6:	68fa      	ldr	r2, [r7, #12]
 8012ba8:	f248 0360 	movw	r3, #32864	; 0x8060
 8012bac:	4413      	add	r3, r2
 8012bae:	2200      	movs	r2, #0
 8012bb0:	701a      	strb	r2, [r3, #0]
  hmsc->scsi_medium_state = SCSI_MEDIUM_UNLOCKED;
 8012bb2:	68fa      	ldr	r2, [r7, #12]
 8012bb4:	f248 0362 	movw	r3, #32866	; 0x8062
 8012bb8:	4413      	add	r3, r2
 8012bba:	2200      	movs	r2, #0
 8012bbc:	701a      	strb	r2, [r3, #0]

  ((USBD_StorageTypeDef *)pdev->pUserData)->Init(0U);
 8012bbe:	687b      	ldr	r3, [r7, #4]
 8012bc0:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8012bc4:	681b      	ldr	r3, [r3, #0]
 8012bc6:	2000      	movs	r0, #0
 8012bc8:	4798      	blx	r3

  (void)USBD_LL_FlushEP(pdev, MSC_EPOUT_ADDR);
 8012bca:	2101      	movs	r1, #1
 8012bcc:	6878      	ldr	r0, [r7, #4]
 8012bce:	f005 fb85 	bl	80182dc <USBD_LL_FlushEP>
  (void)USBD_LL_FlushEP(pdev, MSC_EPIN_ADDR);
 8012bd2:	2181      	movs	r1, #129	; 0x81
 8012bd4:	6878      	ldr	r0, [r7, #4]
 8012bd6:	f005 fb81 	bl	80182dc <USBD_LL_FlushEP>

  /* Prapare EP to Receive First BOT Cmd */
  (void)USBD_LL_PrepareReceive(pdev, MSC_EPOUT_ADDR, (uint8_t *)&hmsc->cbw,
 8012bda:	68fb      	ldr	r3, [r7, #12]
 8012bdc:	f248 0210 	movw	r2, #32784	; 0x8010
 8012be0:	441a      	add	r2, r3
 8012be2:	231f      	movs	r3, #31
 8012be4:	2101      	movs	r1, #1
 8012be6:	6878      	ldr	r0, [r7, #4]
 8012be8:	f005 fc41 	bl	801846e <USBD_LL_PrepareReceive>
                               USBD_BOT_CBW_LENGTH);
}
 8012bec:	bf00      	nop
 8012bee:	3710      	adds	r7, #16
 8012bf0:	46bd      	mov	sp, r7
 8012bf2:	bd80      	pop	{r7, pc}

08012bf4 <MSC_BOT_Reset>:
*         Reset the BOT Machine
* @param  pdev: device instance
* @retval  None
*/
void MSC_BOT_Reset(USBD_HandleTypeDef *pdev)
{
 8012bf4:	b580      	push	{r7, lr}
 8012bf6:	b084      	sub	sp, #16
 8012bf8:	af00      	add	r7, sp, #0
 8012bfa:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8012bfc:	687b      	ldr	r3, [r7, #4]
 8012bfe:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8012c02:	60fb      	str	r3, [r7, #12]

  hmsc->bot_state  = USBD_BOT_IDLE;
 8012c04:	68fb      	ldr	r3, [r7, #12]
 8012c06:	2200      	movs	r2, #0
 8012c08:	721a      	strb	r2, [r3, #8]
  hmsc->bot_status = USBD_BOT_STATUS_RECOVERY;
 8012c0a:	68fb      	ldr	r3, [r7, #12]
 8012c0c:	2201      	movs	r2, #1
 8012c0e:	725a      	strb	r2, [r3, #9]

  (void)USBD_LL_ClearStallEP(pdev, MSC_EPIN_ADDR);
 8012c10:	2181      	movs	r1, #129	; 0x81
 8012c12:	6878      	ldr	r0, [r7, #4]
 8012c14:	f005 fba0 	bl	8018358 <USBD_LL_ClearStallEP>
  (void)USBD_LL_ClearStallEP(pdev, MSC_EPOUT_ADDR);
 8012c18:	2101      	movs	r1, #1
 8012c1a:	6878      	ldr	r0, [r7, #4]
 8012c1c:	f005 fb9c 	bl	8018358 <USBD_LL_ClearStallEP>

  /* Prapare EP to Receive First BOT Cmd */
  (void)USBD_LL_PrepareReceive(pdev, MSC_EPOUT_ADDR, (uint8_t *)&hmsc->cbw,
 8012c20:	68fb      	ldr	r3, [r7, #12]
 8012c22:	f248 0210 	movw	r2, #32784	; 0x8010
 8012c26:	441a      	add	r2, r3
 8012c28:	231f      	movs	r3, #31
 8012c2a:	2101      	movs	r1, #1
 8012c2c:	6878      	ldr	r0, [r7, #4]
 8012c2e:	f005 fc1e 	bl	801846e <USBD_LL_PrepareReceive>
                               USBD_BOT_CBW_LENGTH);
}
 8012c32:	bf00      	nop
 8012c34:	3710      	adds	r7, #16
 8012c36:	46bd      	mov	sp, r7
 8012c38:	bd80      	pop	{r7, pc}

08012c3a <MSC_BOT_DeInit>:
*         Deinitialize the BOT Machine
* @param  pdev: device instance
* @retval None
*/
void MSC_BOT_DeInit(USBD_HandleTypeDef  *pdev)
{
 8012c3a:	b480      	push	{r7}
 8012c3c:	b085      	sub	sp, #20
 8012c3e:	af00      	add	r7, sp, #0
 8012c40:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8012c42:	687b      	ldr	r3, [r7, #4]
 8012c44:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8012c48:	60fb      	str	r3, [r7, #12]
  hmsc->bot_state = USBD_BOT_IDLE;
 8012c4a:	68fb      	ldr	r3, [r7, #12]
 8012c4c:	2200      	movs	r2, #0
 8012c4e:	721a      	strb	r2, [r3, #8]
}
 8012c50:	bf00      	nop
 8012c52:	3714      	adds	r7, #20
 8012c54:	46bd      	mov	sp, r7
 8012c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012c5a:	4770      	bx	lr

08012c5c <MSC_BOT_DataIn>:
* @param  pdev: device instance
* @param  epnum: endpoint index
* @retval None
*/
void MSC_BOT_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8012c5c:	b580      	push	{r7, lr}
 8012c5e:	b084      	sub	sp, #16
 8012c60:	af00      	add	r7, sp, #0
 8012c62:	6078      	str	r0, [r7, #4]
 8012c64:	460b      	mov	r3, r1
 8012c66:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);

  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8012c68:	687b      	ldr	r3, [r7, #4]
 8012c6a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8012c6e:	60fb      	str	r3, [r7, #12]

  switch (hmsc->bot_state)
 8012c70:	68fb      	ldr	r3, [r7, #12]
 8012c72:	7a1b      	ldrb	r3, [r3, #8]
 8012c74:	2b02      	cmp	r3, #2
 8012c76:	d004      	beq.n	8012c82 <MSC_BOT_DataIn+0x26>
 8012c78:	2b02      	cmp	r3, #2
 8012c7a:	db1c      	blt.n	8012cb6 <MSC_BOT_DataIn+0x5a>
 8012c7c:	2b04      	cmp	r3, #4
 8012c7e:	dc1a      	bgt.n	8012cb6 <MSC_BOT_DataIn+0x5a>
 8012c80:	e014      	b.n	8012cac <MSC_BOT_DataIn+0x50>
  {
  case USBD_BOT_DATA_IN:
    if (SCSI_ProcessCmd(pdev, hmsc->cbw.bLUN, &hmsc->cbw.CB[0]) < 0)
 8012c82:	68fa      	ldr	r2, [r7, #12]
 8012c84:	f248 031d 	movw	r3, #32797	; 0x801d
 8012c88:	4413      	add	r3, r2
 8012c8a:	7819      	ldrb	r1, [r3, #0]
 8012c8c:	68fa      	ldr	r2, [r7, #12]
 8012c8e:	f248 031f 	movw	r3, #32799	; 0x801f
 8012c92:	4413      	add	r3, r2
 8012c94:	461a      	mov	r2, r3
 8012c96:	6878      	ldr	r0, [r7, #4]
 8012c98:	f000 f99e 	bl	8012fd8 <SCSI_ProcessCmd>
 8012c9c:	4603      	mov	r3, r0
 8012c9e:	2b00      	cmp	r3, #0
 8012ca0:	da0b      	bge.n	8012cba <MSC_BOT_DataIn+0x5e>
    {
      MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
 8012ca2:	2101      	movs	r1, #1
 8012ca4:	6878      	ldr	r0, [r7, #4]
 8012ca6:	f000 f90b 	bl	8012ec0 <MSC_BOT_SendCSW>
    }
    break;
 8012caa:	e006      	b.n	8012cba <MSC_BOT_DataIn+0x5e>

  case USBD_BOT_SEND_DATA:
  case USBD_BOT_LAST_DATA_IN:
    MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_PASSED);
 8012cac:	2100      	movs	r1, #0
 8012cae:	6878      	ldr	r0, [r7, #4]
 8012cb0:	f000 f906 	bl	8012ec0 <MSC_BOT_SendCSW>
    break;
 8012cb4:	e002      	b.n	8012cbc <MSC_BOT_DataIn+0x60>

  default:
    break;
 8012cb6:	bf00      	nop
 8012cb8:	e000      	b.n	8012cbc <MSC_BOT_DataIn+0x60>
    break;
 8012cba:	bf00      	nop
  }
}
 8012cbc:	bf00      	nop
 8012cbe:	3710      	adds	r7, #16
 8012cc0:	46bd      	mov	sp, r7
 8012cc2:	bd80      	pop	{r7, pc}

08012cc4 <MSC_BOT_DataOut>:
* @param  pdev: device instance
* @param  epnum: endpoint index
* @retval None
*/
void MSC_BOT_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8012cc4:	b580      	push	{r7, lr}
 8012cc6:	b084      	sub	sp, #16
 8012cc8:	af00      	add	r7, sp, #0
 8012cca:	6078      	str	r0, [r7, #4]
 8012ccc:	460b      	mov	r3, r1
 8012cce:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);

  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8012cd0:	687b      	ldr	r3, [r7, #4]
 8012cd2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8012cd6:	60fb      	str	r3, [r7, #12]

  switch (hmsc->bot_state)
 8012cd8:	68fb      	ldr	r3, [r7, #12]
 8012cda:	7a1b      	ldrb	r3, [r3, #8]
 8012cdc:	2b00      	cmp	r3, #0
 8012cde:	d002      	beq.n	8012ce6 <MSC_BOT_DataOut+0x22>
 8012ce0:	2b01      	cmp	r3, #1
 8012ce2:	d004      	beq.n	8012cee <MSC_BOT_DataOut+0x2a>
        MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
      }
      break;

    default:
      break;
 8012ce4:	e018      	b.n	8012d18 <MSC_BOT_DataOut+0x54>
      MSC_BOT_CBW_Decode(pdev);
 8012ce6:	6878      	ldr	r0, [r7, #4]
 8012ce8:	f000 f81a 	bl	8012d20 <MSC_BOT_CBW_Decode>
      break;
 8012cec:	e014      	b.n	8012d18 <MSC_BOT_DataOut+0x54>
      if (SCSI_ProcessCmd(pdev, hmsc->cbw.bLUN, &hmsc->cbw.CB[0]) < 0)
 8012cee:	68fa      	ldr	r2, [r7, #12]
 8012cf0:	f248 031d 	movw	r3, #32797	; 0x801d
 8012cf4:	4413      	add	r3, r2
 8012cf6:	7819      	ldrb	r1, [r3, #0]
 8012cf8:	68fa      	ldr	r2, [r7, #12]
 8012cfa:	f248 031f 	movw	r3, #32799	; 0x801f
 8012cfe:	4413      	add	r3, r2
 8012d00:	461a      	mov	r2, r3
 8012d02:	6878      	ldr	r0, [r7, #4]
 8012d04:	f000 f968 	bl	8012fd8 <SCSI_ProcessCmd>
 8012d08:	4603      	mov	r3, r0
 8012d0a:	2b00      	cmp	r3, #0
 8012d0c:	da03      	bge.n	8012d16 <MSC_BOT_DataOut+0x52>
        MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
 8012d0e:	2101      	movs	r1, #1
 8012d10:	6878      	ldr	r0, [r7, #4]
 8012d12:	f000 f8d5 	bl	8012ec0 <MSC_BOT_SendCSW>
      break;
 8012d16:	bf00      	nop
  }
}
 8012d18:	bf00      	nop
 8012d1a:	3710      	adds	r7, #16
 8012d1c:	46bd      	mov	sp, r7
 8012d1e:	bd80      	pop	{r7, pc}

08012d20 <MSC_BOT_CBW_Decode>:
*         Decode the CBW command and set the BOT state machine accordingly
* @param  pdev: device instance
* @retval None
*/
static void  MSC_BOT_CBW_Decode(USBD_HandleTypeDef *pdev)
{
 8012d20:	b580      	push	{r7, lr}
 8012d22:	b084      	sub	sp, #16
 8012d24:	af00      	add	r7, sp, #0
 8012d26:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8012d28:	687b      	ldr	r3, [r7, #4]
 8012d2a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8012d2e:	60fb      	str	r3, [r7, #12]

  hmsc->csw.dTag = hmsc->cbw.dTag;
 8012d30:	68fa      	ldr	r2, [r7, #12]
 8012d32:	f248 0314 	movw	r3, #32788	; 0x8014
 8012d36:	4413      	add	r3, r2
 8012d38:	681a      	ldr	r2, [r3, #0]
 8012d3a:	68f9      	ldr	r1, [r7, #12]
 8012d3c:	f248 0334 	movw	r3, #32820	; 0x8034
 8012d40:	440b      	add	r3, r1
 8012d42:	601a      	str	r2, [r3, #0]
  hmsc->csw.dDataResidue = hmsc->cbw.dDataLength;
 8012d44:	68fa      	ldr	r2, [r7, #12]
 8012d46:	f248 0318 	movw	r3, #32792	; 0x8018
 8012d4a:	4413      	add	r3, r2
 8012d4c:	681a      	ldr	r2, [r3, #0]
 8012d4e:	68f9      	ldr	r1, [r7, #12]
 8012d50:	f248 0338 	movw	r3, #32824	; 0x8038
 8012d54:	440b      	add	r3, r1
 8012d56:	601a      	str	r2, [r3, #0]

  if ((USBD_LL_GetRxDataSize(pdev, MSC_EPOUT_ADDR) != USBD_BOT_CBW_LENGTH) ||
 8012d58:	2101      	movs	r1, #1
 8012d5a:	6878      	ldr	r0, [r7, #4]
 8012d5c:	f005 fba8 	bl	80184b0 <USBD_LL_GetRxDataSize>
 8012d60:	4603      	mov	r3, r0
 8012d62:	2b1f      	cmp	r3, #31
 8012d64:	d11c      	bne.n	8012da0 <MSC_BOT_CBW_Decode+0x80>
      (hmsc->cbw.dSignature != USBD_BOT_CBW_SIGNATURE) ||
 8012d66:	68fa      	ldr	r2, [r7, #12]
 8012d68:	f248 0310 	movw	r3, #32784	; 0x8010
 8012d6c:	4413      	add	r3, r2
 8012d6e:	681b      	ldr	r3, [r3, #0]
  if ((USBD_LL_GetRxDataSize(pdev, MSC_EPOUT_ADDR) != USBD_BOT_CBW_LENGTH) ||
 8012d70:	4a38      	ldr	r2, [pc, #224]	; (8012e54 <MSC_BOT_CBW_Decode+0x134>)
 8012d72:	4293      	cmp	r3, r2
 8012d74:	d114      	bne.n	8012da0 <MSC_BOT_CBW_Decode+0x80>
      (hmsc->cbw.bLUN > 1U) || (hmsc->cbw.bCBLength < 1U) ||
 8012d76:	68fa      	ldr	r2, [r7, #12]
 8012d78:	f248 031d 	movw	r3, #32797	; 0x801d
 8012d7c:	4413      	add	r3, r2
 8012d7e:	781b      	ldrb	r3, [r3, #0]
      (hmsc->cbw.dSignature != USBD_BOT_CBW_SIGNATURE) ||
 8012d80:	2b01      	cmp	r3, #1
 8012d82:	d80d      	bhi.n	8012da0 <MSC_BOT_CBW_Decode+0x80>
      (hmsc->cbw.bLUN > 1U) || (hmsc->cbw.bCBLength < 1U) ||
 8012d84:	68fa      	ldr	r2, [r7, #12]
 8012d86:	f248 031e 	movw	r3, #32798	; 0x801e
 8012d8a:	4413      	add	r3, r2
 8012d8c:	781b      	ldrb	r3, [r3, #0]
 8012d8e:	2b00      	cmp	r3, #0
 8012d90:	d006      	beq.n	8012da0 <MSC_BOT_CBW_Decode+0x80>
      (hmsc->cbw.bCBLength > 16U))
 8012d92:	68fa      	ldr	r2, [r7, #12]
 8012d94:	f248 031e 	movw	r3, #32798	; 0x801e
 8012d98:	4413      	add	r3, r2
 8012d9a:	781b      	ldrb	r3, [r3, #0]
      (hmsc->cbw.bLUN > 1U) || (hmsc->cbw.bCBLength < 1U) ||
 8012d9c:	2b10      	cmp	r3, #16
 8012d9e:	d910      	bls.n	8012dc2 <MSC_BOT_CBW_Decode+0xa2>
  {
    SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8012da0:	68fa      	ldr	r2, [r7, #12]
 8012da2:	f248 031d 	movw	r3, #32797	; 0x801d
 8012da6:	4413      	add	r3, r2
 8012da8:	7819      	ldrb	r1, [r3, #0]
 8012daa:	2320      	movs	r3, #32
 8012dac:	2205      	movs	r2, #5
 8012dae:	6878      	ldr	r0, [r7, #4]
 8012db0:	f000 fd36 	bl	8013820 <SCSI_SenseCode>

    hmsc->bot_status = USBD_BOT_STATUS_ERROR;
 8012db4:	68fb      	ldr	r3, [r7, #12]
 8012db6:	2202      	movs	r2, #2
 8012db8:	725a      	strb	r2, [r3, #9]
    MSC_BOT_Abort(pdev);
 8012dba:	6878      	ldr	r0, [r7, #4]
 8012dbc:	f000 f8b2 	bl	8012f24 <MSC_BOT_Abort>
 8012dc0:	e044      	b.n	8012e4c <MSC_BOT_CBW_Decode+0x12c>
  }
  else
  {
    if (SCSI_ProcessCmd(pdev, hmsc->cbw.bLUN, &hmsc->cbw.CB[0]) < 0)
 8012dc2:	68fa      	ldr	r2, [r7, #12]
 8012dc4:	f248 031d 	movw	r3, #32797	; 0x801d
 8012dc8:	4413      	add	r3, r2
 8012dca:	7819      	ldrb	r1, [r3, #0]
 8012dcc:	68fa      	ldr	r2, [r7, #12]
 8012dce:	f248 031f 	movw	r3, #32799	; 0x801f
 8012dd2:	4413      	add	r3, r2
 8012dd4:	461a      	mov	r2, r3
 8012dd6:	6878      	ldr	r0, [r7, #4]
 8012dd8:	f000 f8fe 	bl	8012fd8 <SCSI_ProcessCmd>
 8012ddc:	4603      	mov	r3, r0
 8012dde:	2b00      	cmp	r3, #0
 8012de0:	da0c      	bge.n	8012dfc <MSC_BOT_CBW_Decode+0xdc>
    {
      if (hmsc->bot_state == USBD_BOT_NO_DATA)
 8012de2:	68fb      	ldr	r3, [r7, #12]
 8012de4:	7a1b      	ldrb	r3, [r3, #8]
 8012de6:	2b05      	cmp	r3, #5
 8012de8:	d104      	bne.n	8012df4 <MSC_BOT_CBW_Decode+0xd4>
      {
        MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
 8012dea:	2101      	movs	r1, #1
 8012dec:	6878      	ldr	r0, [r7, #4]
 8012dee:	f000 f867 	bl	8012ec0 <MSC_BOT_SendCSW>
 8012df2:	e02b      	b.n	8012e4c <MSC_BOT_CBW_Decode+0x12c>
      }
      else
      {
        MSC_BOT_Abort(pdev);
 8012df4:	6878      	ldr	r0, [r7, #4]
 8012df6:	f000 f895 	bl	8012f24 <MSC_BOT_Abort>
 8012dfa:	e027      	b.n	8012e4c <MSC_BOT_CBW_Decode+0x12c>
      }
    }
    /* Burst xfer handled internally */
    else if ((hmsc->bot_state != USBD_BOT_DATA_IN) &&
 8012dfc:	68fb      	ldr	r3, [r7, #12]
 8012dfe:	7a1b      	ldrb	r3, [r3, #8]
 8012e00:	2b02      	cmp	r3, #2
 8012e02:	d022      	beq.n	8012e4a <MSC_BOT_CBW_Decode+0x12a>
             (hmsc->bot_state != USBD_BOT_DATA_OUT) &&
 8012e04:	68fb      	ldr	r3, [r7, #12]
 8012e06:	7a1b      	ldrb	r3, [r3, #8]
    else if ((hmsc->bot_state != USBD_BOT_DATA_IN) &&
 8012e08:	2b01      	cmp	r3, #1
 8012e0a:	d01e      	beq.n	8012e4a <MSC_BOT_CBW_Decode+0x12a>
             (hmsc->bot_state != USBD_BOT_LAST_DATA_IN))
 8012e0c:	68fb      	ldr	r3, [r7, #12]
 8012e0e:	7a1b      	ldrb	r3, [r3, #8]
             (hmsc->bot_state != USBD_BOT_DATA_OUT) &&
 8012e10:	2b03      	cmp	r3, #3
 8012e12:	d01a      	beq.n	8012e4a <MSC_BOT_CBW_Decode+0x12a>
    {
      if (hmsc->bot_data_length > 0U)
 8012e14:	68fb      	ldr	r3, [r7, #12]
 8012e16:	68db      	ldr	r3, [r3, #12]
 8012e18:	2b00      	cmp	r3, #0
 8012e1a:	d009      	beq.n	8012e30 <MSC_BOT_CBW_Decode+0x110>
      {
        MSC_BOT_SendData(pdev, hmsc->bot_data, hmsc->bot_data_length);
 8012e1c:	68fb      	ldr	r3, [r7, #12]
 8012e1e:	f103 0110 	add.w	r1, r3, #16
 8012e22:	68fb      	ldr	r3, [r7, #12]
 8012e24:	68db      	ldr	r3, [r3, #12]
 8012e26:	461a      	mov	r2, r3
 8012e28:	6878      	ldr	r0, [r7, #4]
 8012e2a:	f000 f815 	bl	8012e58 <MSC_BOT_SendData>
      if (hmsc->bot_data_length > 0U)
 8012e2e:	e00d      	b.n	8012e4c <MSC_BOT_CBW_Decode+0x12c>
      }
      else if (hmsc->bot_data_length == 0U)
 8012e30:	68fb      	ldr	r3, [r7, #12]
 8012e32:	68db      	ldr	r3, [r3, #12]
 8012e34:	2b00      	cmp	r3, #0
 8012e36:	d104      	bne.n	8012e42 <MSC_BOT_CBW_Decode+0x122>
      {
        MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_PASSED);
 8012e38:	2100      	movs	r1, #0
 8012e3a:	6878      	ldr	r0, [r7, #4]
 8012e3c:	f000 f840 	bl	8012ec0 <MSC_BOT_SendCSW>
      if (hmsc->bot_data_length > 0U)
 8012e40:	e004      	b.n	8012e4c <MSC_BOT_CBW_Decode+0x12c>
      }
      else
      {
        MSC_BOT_Abort(pdev);
 8012e42:	6878      	ldr	r0, [r7, #4]
 8012e44:	f000 f86e 	bl	8012f24 <MSC_BOT_Abort>
      if (hmsc->bot_data_length > 0U)
 8012e48:	e000      	b.n	8012e4c <MSC_BOT_CBW_Decode+0x12c>
      }
    }
    else
    {
      return;
 8012e4a:	bf00      	nop
    }
  }
}
 8012e4c:	3710      	adds	r7, #16
 8012e4e:	46bd      	mov	sp, r7
 8012e50:	bd80      	pop	{r7, pc}
 8012e52:	bf00      	nop
 8012e54:	43425355 	.word	0x43425355

08012e58 <MSC_BOT_SendData>:
* @param  buf: pointer to data buffer
* @param  len: Data Length
* @retval None
*/
static void  MSC_BOT_SendData(USBD_HandleTypeDef *pdev, uint8_t *pbuf, uint32_t len)
{
 8012e58:	b580      	push	{r7, lr}
 8012e5a:	b086      	sub	sp, #24
 8012e5c:	af00      	add	r7, sp, #0
 8012e5e:	60f8      	str	r0, [r7, #12]
 8012e60:	60b9      	str	r1, [r7, #8]
 8012e62:	607a      	str	r2, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8012e64:	68fb      	ldr	r3, [r7, #12]
 8012e66:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8012e6a:	617b      	str	r3, [r7, #20]

  uint32_t length = MIN(hmsc->cbw.dDataLength, len);
 8012e6c:	697a      	ldr	r2, [r7, #20]
 8012e6e:	f248 0318 	movw	r3, #32792	; 0x8018
 8012e72:	4413      	add	r3, r2
 8012e74:	681b      	ldr	r3, [r3, #0]
 8012e76:	687a      	ldr	r2, [r7, #4]
 8012e78:	4293      	cmp	r3, r2
 8012e7a:	bf28      	it	cs
 8012e7c:	4613      	movcs	r3, r2
 8012e7e:	613b      	str	r3, [r7, #16]

  hmsc->csw.dDataResidue -= len;
 8012e80:	697a      	ldr	r2, [r7, #20]
 8012e82:	f248 0338 	movw	r3, #32824	; 0x8038
 8012e86:	4413      	add	r3, r2
 8012e88:	681a      	ldr	r2, [r3, #0]
 8012e8a:	687b      	ldr	r3, [r7, #4]
 8012e8c:	1ad2      	subs	r2, r2, r3
 8012e8e:	6979      	ldr	r1, [r7, #20]
 8012e90:	f248 0338 	movw	r3, #32824	; 0x8038
 8012e94:	440b      	add	r3, r1
 8012e96:	601a      	str	r2, [r3, #0]
  hmsc->csw.bStatus = USBD_CSW_CMD_PASSED;
 8012e98:	697a      	ldr	r2, [r7, #20]
 8012e9a:	f248 033c 	movw	r3, #32828	; 0x803c
 8012e9e:	4413      	add	r3, r2
 8012ea0:	2200      	movs	r2, #0
 8012ea2:	701a      	strb	r2, [r3, #0]
  hmsc->bot_state = USBD_BOT_SEND_DATA;
 8012ea4:	697b      	ldr	r3, [r7, #20]
 8012ea6:	2204      	movs	r2, #4
 8012ea8:	721a      	strb	r2, [r3, #8]

  (void)USBD_LL_Transmit(pdev, MSC_EPIN_ADDR, pbuf, length);
 8012eaa:	693b      	ldr	r3, [r7, #16]
 8012eac:	68ba      	ldr	r2, [r7, #8]
 8012eae:	2181      	movs	r1, #129	; 0x81
 8012eb0:	68f8      	ldr	r0, [r7, #12]
 8012eb2:	f005 fabb 	bl	801842c <USBD_LL_Transmit>
}
 8012eb6:	bf00      	nop
 8012eb8:	3718      	adds	r7, #24
 8012eba:	46bd      	mov	sp, r7
 8012ebc:	bd80      	pop	{r7, pc}
	...

08012ec0 <MSC_BOT_SendCSW>:
* @param  pdev: device instance
* @param  status : CSW status
* @retval None
*/
void  MSC_BOT_SendCSW(USBD_HandleTypeDef *pdev, uint8_t CSW_Status)
{
 8012ec0:	b580      	push	{r7, lr}
 8012ec2:	b084      	sub	sp, #16
 8012ec4:	af00      	add	r7, sp, #0
 8012ec6:	6078      	str	r0, [r7, #4]
 8012ec8:	460b      	mov	r3, r1
 8012eca:	70fb      	strb	r3, [r7, #3]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8012ecc:	687b      	ldr	r3, [r7, #4]
 8012ece:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8012ed2:	60fb      	str	r3, [r7, #12]

  hmsc->csw.dSignature = USBD_BOT_CSW_SIGNATURE;
 8012ed4:	68fa      	ldr	r2, [r7, #12]
 8012ed6:	f248 0330 	movw	r3, #32816	; 0x8030
 8012eda:	4413      	add	r3, r2
 8012edc:	4a10      	ldr	r2, [pc, #64]	; (8012f20 <MSC_BOT_SendCSW+0x60>)
 8012ede:	601a      	str	r2, [r3, #0]
  hmsc->csw.bStatus = CSW_Status;
 8012ee0:	68fa      	ldr	r2, [r7, #12]
 8012ee2:	f248 033c 	movw	r3, #32828	; 0x803c
 8012ee6:	4413      	add	r3, r2
 8012ee8:	78fa      	ldrb	r2, [r7, #3]
 8012eea:	701a      	strb	r2, [r3, #0]
  hmsc->bot_state = USBD_BOT_IDLE;
 8012eec:	68fb      	ldr	r3, [r7, #12]
 8012eee:	2200      	movs	r2, #0
 8012ef0:	721a      	strb	r2, [r3, #8]

  (void)USBD_LL_Transmit(pdev, MSC_EPIN_ADDR, (uint8_t *)&hmsc->csw,
 8012ef2:	68fb      	ldr	r3, [r7, #12]
 8012ef4:	f248 0230 	movw	r2, #32816	; 0x8030
 8012ef8:	441a      	add	r2, r3
 8012efa:	230d      	movs	r3, #13
 8012efc:	2181      	movs	r1, #129	; 0x81
 8012efe:	6878      	ldr	r0, [r7, #4]
 8012f00:	f005 fa94 	bl	801842c <USBD_LL_Transmit>
                         USBD_BOT_CSW_LENGTH);

  /* Prepare EP to Receive next Cmd */
  (void)USBD_LL_PrepareReceive(pdev, MSC_EPOUT_ADDR, (uint8_t *)&hmsc->cbw,
 8012f04:	68fb      	ldr	r3, [r7, #12]
 8012f06:	f248 0210 	movw	r2, #32784	; 0x8010
 8012f0a:	441a      	add	r2, r3
 8012f0c:	231f      	movs	r3, #31
 8012f0e:	2101      	movs	r1, #1
 8012f10:	6878      	ldr	r0, [r7, #4]
 8012f12:	f005 faac 	bl	801846e <USBD_LL_PrepareReceive>
                               USBD_BOT_CBW_LENGTH);
}
 8012f16:	bf00      	nop
 8012f18:	3710      	adds	r7, #16
 8012f1a:	46bd      	mov	sp, r7
 8012f1c:	bd80      	pop	{r7, pc}
 8012f1e:	bf00      	nop
 8012f20:	53425355 	.word	0x53425355

08012f24 <MSC_BOT_Abort>:
* @param  pdev: device instance
* @retval status
*/

static void  MSC_BOT_Abort(USBD_HandleTypeDef *pdev)
{
 8012f24:	b580      	push	{r7, lr}
 8012f26:	b084      	sub	sp, #16
 8012f28:	af00      	add	r7, sp, #0
 8012f2a:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8012f2c:	687b      	ldr	r3, [r7, #4]
 8012f2e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8012f32:	60fb      	str	r3, [r7, #12]

  if ((hmsc->cbw.bmFlags == 0U) &&
 8012f34:	68fa      	ldr	r2, [r7, #12]
 8012f36:	f248 031c 	movw	r3, #32796	; 0x801c
 8012f3a:	4413      	add	r3, r2
 8012f3c:	781b      	ldrb	r3, [r3, #0]
 8012f3e:	2b00      	cmp	r3, #0
 8012f40:	d10e      	bne.n	8012f60 <MSC_BOT_Abort+0x3c>
      (hmsc->cbw.dDataLength != 0U) &&
 8012f42:	68fa      	ldr	r2, [r7, #12]
 8012f44:	f248 0318 	movw	r3, #32792	; 0x8018
 8012f48:	4413      	add	r3, r2
 8012f4a:	681b      	ldr	r3, [r3, #0]
  if ((hmsc->cbw.bmFlags == 0U) &&
 8012f4c:	2b00      	cmp	r3, #0
 8012f4e:	d007      	beq.n	8012f60 <MSC_BOT_Abort+0x3c>
      (hmsc->bot_status == USBD_BOT_STATUS_NORMAL))
 8012f50:	68fb      	ldr	r3, [r7, #12]
 8012f52:	7a5b      	ldrb	r3, [r3, #9]
      (hmsc->cbw.dDataLength != 0U) &&
 8012f54:	2b00      	cmp	r3, #0
 8012f56:	d103      	bne.n	8012f60 <MSC_BOT_Abort+0x3c>
  {
    (void)USBD_LL_StallEP(pdev, MSC_EPOUT_ADDR);
 8012f58:	2101      	movs	r1, #1
 8012f5a:	6878      	ldr	r0, [r7, #4]
 8012f5c:	f005 f9dd 	bl	801831a <USBD_LL_StallEP>
  }

  (void)USBD_LL_StallEP(pdev, MSC_EPIN_ADDR);
 8012f60:	2181      	movs	r1, #129	; 0x81
 8012f62:	6878      	ldr	r0, [r7, #4]
 8012f64:	f005 f9d9 	bl	801831a <USBD_LL_StallEP>

  if (hmsc->bot_status == USBD_BOT_STATUS_ERROR)
 8012f68:	68fb      	ldr	r3, [r7, #12]
 8012f6a:	7a5b      	ldrb	r3, [r3, #9]
 8012f6c:	2b02      	cmp	r3, #2
 8012f6e:	d107      	bne.n	8012f80 <MSC_BOT_Abort+0x5c>
  {
    (void)USBD_LL_StallEP(pdev, MSC_EPIN_ADDR);
 8012f70:	2181      	movs	r1, #129	; 0x81
 8012f72:	6878      	ldr	r0, [r7, #4]
 8012f74:	f005 f9d1 	bl	801831a <USBD_LL_StallEP>
    (void)USBD_LL_StallEP(pdev, MSC_EPOUT_ADDR);
 8012f78:	2101      	movs	r1, #1
 8012f7a:	6878      	ldr	r0, [r7, #4]
 8012f7c:	f005 f9cd 	bl	801831a <USBD_LL_StallEP>
  }
}
 8012f80:	bf00      	nop
 8012f82:	3710      	adds	r7, #16
 8012f84:	46bd      	mov	sp, r7
 8012f86:	bd80      	pop	{r7, pc}

08012f88 <MSC_BOT_CplClrFeature>:
* @param  epnum: endpoint index
* @retval None
*/

void  MSC_BOT_CplClrFeature(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8012f88:	b580      	push	{r7, lr}
 8012f8a:	b084      	sub	sp, #16
 8012f8c:	af00      	add	r7, sp, #0
 8012f8e:	6078      	str	r0, [r7, #4]
 8012f90:	460b      	mov	r3, r1
 8012f92:	70fb      	strb	r3, [r7, #3]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8012f94:	687b      	ldr	r3, [r7, #4]
 8012f96:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8012f9a:	60fb      	str	r3, [r7, #12]

  if (hmsc->bot_status == USBD_BOT_STATUS_ERROR) /* Bad CBW Signature */
 8012f9c:	68fb      	ldr	r3, [r7, #12]
 8012f9e:	7a5b      	ldrb	r3, [r3, #9]
 8012fa0:	2b02      	cmp	r3, #2
 8012fa2:	d108      	bne.n	8012fb6 <MSC_BOT_CplClrFeature+0x2e>
  {
    (void)USBD_LL_StallEP(pdev, MSC_EPIN_ADDR);
 8012fa4:	2181      	movs	r1, #129	; 0x81
 8012fa6:	6878      	ldr	r0, [r7, #4]
 8012fa8:	f005 f9b7 	bl	801831a <USBD_LL_StallEP>
    (void)USBD_LL_StallEP(pdev, MSC_EPOUT_ADDR);
 8012fac:	2101      	movs	r1, #1
 8012fae:	6878      	ldr	r0, [r7, #4]
 8012fb0:	f005 f9b3 	bl	801831a <USBD_LL_StallEP>
 8012fb4:	e00d      	b.n	8012fd2 <MSC_BOT_CplClrFeature+0x4a>
  }
  else if (((epnum & 0x80U) == 0x80U) && (hmsc->bot_status != USBD_BOT_STATUS_RECOVERY))
 8012fb6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8012fba:	2b00      	cmp	r3, #0
 8012fbc:	da08      	bge.n	8012fd0 <MSC_BOT_CplClrFeature+0x48>
 8012fbe:	68fb      	ldr	r3, [r7, #12]
 8012fc0:	7a5b      	ldrb	r3, [r3, #9]
 8012fc2:	2b01      	cmp	r3, #1
 8012fc4:	d004      	beq.n	8012fd0 <MSC_BOT_CplClrFeature+0x48>
  {
    MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
 8012fc6:	2101      	movs	r1, #1
 8012fc8:	6878      	ldr	r0, [r7, #4]
 8012fca:	f7ff ff79 	bl	8012ec0 <MSC_BOT_SendCSW>
 8012fce:	e000      	b.n	8012fd2 <MSC_BOT_CplClrFeature+0x4a>
  }
  else
  {
    return;
 8012fd0:	bf00      	nop
  }
}
 8012fd2:	3710      	adds	r7, #16
 8012fd4:	46bd      	mov	sp, r7
 8012fd6:	bd80      	pop	{r7, pc}

08012fd8 <SCSI_ProcessCmd>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
int8_t SCSI_ProcessCmd(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *cmd)
{
 8012fd8:	b580      	push	{r7, lr}
 8012fda:	b086      	sub	sp, #24
 8012fdc:	af00      	add	r7, sp, #0
 8012fde:	60f8      	str	r0, [r7, #12]
 8012fe0:	460b      	mov	r3, r1
 8012fe2:	607a      	str	r2, [r7, #4]
 8012fe4:	72fb      	strb	r3, [r7, #11]
  int8_t ret;
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8012fe6:	68fb      	ldr	r3, [r7, #12]
 8012fe8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8012fec:	613b      	str	r3, [r7, #16]

  switch (cmd[0])
 8012fee:	687b      	ldr	r3, [r7, #4]
 8012ff0:	781b      	ldrb	r3, [r3, #0]
 8012ff2:	2b25      	cmp	r3, #37	; 0x25
 8012ff4:	d06e      	beq.n	80130d4 <SCSI_ProcessCmd+0xfc>
 8012ff6:	2b25      	cmp	r3, #37	; 0x25
 8012ff8:	dc11      	bgt.n	801301e <SCSI_ProcessCmd+0x46>
 8012ffa:	2b1a      	cmp	r3, #26
 8012ffc:	d04f      	beq.n	801309e <SCSI_ProcessCmd+0xc6>
 8012ffe:	2b1a      	cmp	r3, #26
 8013000:	dc06      	bgt.n	8013010 <SCSI_ProcessCmd+0x38>
 8013002:	2b03      	cmp	r3, #3
 8013004:	d027      	beq.n	8013056 <SCSI_ProcessCmd+0x7e>
 8013006:	2b12      	cmp	r3, #18
 8013008:	d02e      	beq.n	8013068 <SCSI_ProcessCmd+0x90>
 801300a:	2b00      	cmp	r3, #0
 801300c:	d01a      	beq.n	8013044 <SCSI_ProcessCmd+0x6c>
 801300e:	e0a0      	b.n	8013152 <SCSI_ProcessCmd+0x17a>
 8013010:	2b1e      	cmp	r3, #30
 8013012:	d03b      	beq.n	801308c <SCSI_ProcessCmd+0xb4>
 8013014:	2b23      	cmp	r3, #35	; 0x23
 8013016:	d054      	beq.n	80130c2 <SCSI_ProcessCmd+0xea>
 8013018:	2b1b      	cmp	r3, #27
 801301a:	d02e      	beq.n	801307a <SCSI_ProcessCmd+0xa2>
 801301c:	e099      	b.n	8013152 <SCSI_ProcessCmd+0x17a>
 801301e:	2b5a      	cmp	r3, #90	; 0x5a
 8013020:	d046      	beq.n	80130b0 <SCSI_ProcessCmd+0xd8>
 8013022:	2b5a      	cmp	r3, #90	; 0x5a
 8013024:	dc07      	bgt.n	8013036 <SCSI_ProcessCmd+0x5e>
 8013026:	2b2a      	cmp	r3, #42	; 0x2a
 8013028:	d078      	beq.n	801311c <SCSI_ProcessCmd+0x144>
 801302a:	2b2f      	cmp	r3, #47	; 0x2f
 801302c:	f000 8088 	beq.w	8013140 <SCSI_ProcessCmd+0x168>
 8013030:	2b28      	cmp	r3, #40	; 0x28
 8013032:	d061      	beq.n	80130f8 <SCSI_ProcessCmd+0x120>
 8013034:	e08d      	b.n	8013152 <SCSI_ProcessCmd+0x17a>
 8013036:	2ba8      	cmp	r3, #168	; 0xa8
 8013038:	d067      	beq.n	801310a <SCSI_ProcessCmd+0x132>
 801303a:	2baa      	cmp	r3, #170	; 0xaa
 801303c:	d077      	beq.n	801312e <SCSI_ProcessCmd+0x156>
 801303e:	2b9e      	cmp	r3, #158	; 0x9e
 8013040:	d051      	beq.n	80130e6 <SCSI_ProcessCmd+0x10e>
 8013042:	e086      	b.n	8013152 <SCSI_ProcessCmd+0x17a>
  {
  case SCSI_TEST_UNIT_READY:
    ret = SCSI_TestUnitReady(pdev, lun, cmd);
 8013044:	7afb      	ldrb	r3, [r7, #11]
 8013046:	687a      	ldr	r2, [r7, #4]
 8013048:	4619      	mov	r1, r3
 801304a:	68f8      	ldr	r0, [r7, #12]
 801304c:	f000 f893 	bl	8013176 <SCSI_TestUnitReady>
 8013050:	4603      	mov	r3, r0
 8013052:	75fb      	strb	r3, [r7, #23]
    break;
 8013054:	e089      	b.n	801316a <SCSI_ProcessCmd+0x192>

  case SCSI_REQUEST_SENSE:
    ret = SCSI_RequestSense(pdev, lun, cmd);
 8013056:	7afb      	ldrb	r3, [r7, #11]
 8013058:	687a      	ldr	r2, [r7, #4]
 801305a:	4619      	mov	r1, r3
 801305c:	68f8      	ldr	r0, [r7, #12]
 801305e:	f000 fb47 	bl	80136f0 <SCSI_RequestSense>
 8013062:	4603      	mov	r3, r0
 8013064:	75fb      	strb	r3, [r7, #23]
    break;
 8013066:	e080      	b.n	801316a <SCSI_ProcessCmd+0x192>

  case SCSI_INQUIRY:
    ret = SCSI_Inquiry(pdev, lun, cmd);
 8013068:	7afb      	ldrb	r3, [r7, #11]
 801306a:	687a      	ldr	r2, [r7, #4]
 801306c:	4619      	mov	r1, r3
 801306e:	68f8      	ldr	r0, [r7, #12]
 8013070:	f000 f8d2 	bl	8013218 <SCSI_Inquiry>
 8013074:	4603      	mov	r3, r0
 8013076:	75fb      	strb	r3, [r7, #23]
    break;
 8013078:	e077      	b.n	801316a <SCSI_ProcessCmd+0x192>

  case SCSI_START_STOP_UNIT:
    ret = SCSI_StartStopUnit(pdev, lun, cmd);
 801307a:	7afb      	ldrb	r3, [r7, #11]
 801307c:	687a      	ldr	r2, [r7, #4]
 801307e:	4619      	mov	r1, r3
 8013080:	68f8      	ldr	r0, [r7, #12]
 8013082:	f000 fc27 	bl	80138d4 <SCSI_StartStopUnit>
 8013086:	4603      	mov	r3, r0
 8013088:	75fb      	strb	r3, [r7, #23]
    break;
 801308a:	e06e      	b.n	801316a <SCSI_ProcessCmd+0x192>

  case SCSI_ALLOW_MEDIUM_REMOVAL:
    ret = SCSI_AllowPreventRemovable(pdev, lun, cmd);
 801308c:	7afb      	ldrb	r3, [r7, #11]
 801308e:	687a      	ldr	r2, [r7, #4]
 8013090:	4619      	mov	r1, r3
 8013092:	68f8      	ldr	r0, [r7, #12]
 8013094:	f000 fc71 	bl	801397a <SCSI_AllowPreventRemovable>
 8013098:	4603      	mov	r3, r0
 801309a:	75fb      	strb	r3, [r7, #23]
    break;
 801309c:	e065      	b.n	801316a <SCSI_ProcessCmd+0x192>

  case SCSI_MODE_SENSE6:
    ret = SCSI_ModeSense6(pdev, lun, cmd);
 801309e:	7afb      	ldrb	r3, [r7, #11]
 80130a0:	687a      	ldr	r2, [r7, #4]
 80130a2:	4619      	mov	r1, r3
 80130a4:	68f8      	ldr	r0, [r7, #12]
 80130a6:	f000 fad7 	bl	8013658 <SCSI_ModeSense6>
 80130aa:	4603      	mov	r3, r0
 80130ac:	75fb      	strb	r3, [r7, #23]
    break;
 80130ae:	e05c      	b.n	801316a <SCSI_ProcessCmd+0x192>

  case SCSI_MODE_SENSE10:
    ret = SCSI_ModeSense10(pdev, lun, cmd);
 80130b0:	7afb      	ldrb	r3, [r7, #11]
 80130b2:	687a      	ldr	r2, [r7, #4]
 80130b4:	4619      	mov	r1, r3
 80130b6:	68f8      	ldr	r0, [r7, #12]
 80130b8:	f000 faf4 	bl	80136a4 <SCSI_ModeSense10>
 80130bc:	4603      	mov	r3, r0
 80130be:	75fb      	strb	r3, [r7, #23]
    break;
 80130c0:	e053      	b.n	801316a <SCSI_ProcessCmd+0x192>

  case SCSI_READ_FORMAT_CAPACITIES:
    ret = SCSI_ReadFormatCapacity(pdev, lun, cmd);
 80130c2:	7afb      	ldrb	r3, [r7, #11]
 80130c4:	687a      	ldr	r2, [r7, #4]
 80130c6:	4619      	mov	r1, r3
 80130c8:	68f8      	ldr	r0, [r7, #12]
 80130ca:	f000 fa56 	bl	801357a <SCSI_ReadFormatCapacity>
 80130ce:	4603      	mov	r3, r0
 80130d0:	75fb      	strb	r3, [r7, #23]
    break;
 80130d2:	e04a      	b.n	801316a <SCSI_ProcessCmd+0x192>

  case SCSI_READ_CAPACITY10:
    ret = SCSI_ReadCapacity10(pdev, lun, cmd);
 80130d4:	7afb      	ldrb	r3, [r7, #11]
 80130d6:	687a      	ldr	r2, [r7, #4]
 80130d8:	4619      	mov	r1, r3
 80130da:	68f8      	ldr	r0, [r7, #12]
 80130dc:	f000 f910 	bl	8013300 <SCSI_ReadCapacity10>
 80130e0:	4603      	mov	r3, r0
 80130e2:	75fb      	strb	r3, [r7, #23]
    break;
 80130e4:	e041      	b.n	801316a <SCSI_ProcessCmd+0x192>

  case SCSI_READ_CAPACITY16:
    ret = SCSI_ReadCapacity16(pdev, lun, cmd);
 80130e6:	7afb      	ldrb	r3, [r7, #11]
 80130e8:	687a      	ldr	r2, [r7, #4]
 80130ea:	4619      	mov	r1, r3
 80130ec:	68f8      	ldr	r0, [r7, #12]
 80130ee:	f000 f98b 	bl	8013408 <SCSI_ReadCapacity16>
 80130f2:	4603      	mov	r3, r0
 80130f4:	75fb      	strb	r3, [r7, #23]
    break;
 80130f6:	e038      	b.n	801316a <SCSI_ProcessCmd+0x192>

  case SCSI_READ10:
    ret = SCSI_Read10(pdev, lun, cmd);
 80130f8:	7afb      	ldrb	r3, [r7, #11]
 80130fa:	687a      	ldr	r2, [r7, #4]
 80130fc:	4619      	mov	r1, r3
 80130fe:	68f8      	ldr	r0, [r7, #12]
 8013100:	f000 fc62 	bl	80139c8 <SCSI_Read10>
 8013104:	4603      	mov	r3, r0
 8013106:	75fb      	strb	r3, [r7, #23]
    break;
 8013108:	e02f      	b.n	801316a <SCSI_ProcessCmd+0x192>

  case SCSI_READ12:
    ret = SCSI_Read12(pdev, lun, cmd);
 801310a:	7afb      	ldrb	r3, [r7, #11]
 801310c:	687a      	ldr	r2, [r7, #4]
 801310e:	4619      	mov	r1, r3
 8013110:	68f8      	ldr	r0, [r7, #12]
 8013112:	f000 fd0b 	bl	8013b2c <SCSI_Read12>
 8013116:	4603      	mov	r3, r0
 8013118:	75fb      	strb	r3, [r7, #23]
    break;
 801311a:	e026      	b.n	801316a <SCSI_ProcessCmd+0x192>

  case SCSI_WRITE10:
    ret = SCSI_Write10(pdev, lun, cmd);
 801311c:	7afb      	ldrb	r3, [r7, #11]
 801311e:	687a      	ldr	r2, [r7, #4]
 8013120:	4619      	mov	r1, r3
 8013122:	68f8      	ldr	r0, [r7, #12]
 8013124:	f000 fdbe 	bl	8013ca4 <SCSI_Write10>
 8013128:	4603      	mov	r3, r0
 801312a:	75fb      	strb	r3, [r7, #23]
    break;
 801312c:	e01d      	b.n	801316a <SCSI_ProcessCmd+0x192>

  case SCSI_WRITE12:
    ret = SCSI_Write12(pdev, lun, cmd);
 801312e:	7afb      	ldrb	r3, [r7, #11]
 8013130:	687a      	ldr	r2, [r7, #4]
 8013132:	4619      	mov	r1, r3
 8013134:	68f8      	ldr	r0, [r7, #12]
 8013136:	f000 fe8d 	bl	8013e54 <SCSI_Write12>
 801313a:	4603      	mov	r3, r0
 801313c:	75fb      	strb	r3, [r7, #23]
    break;
 801313e:	e014      	b.n	801316a <SCSI_ProcessCmd+0x192>

  case SCSI_VERIFY10:
    ret = SCSI_Verify10(pdev, lun, cmd);
 8013140:	7afb      	ldrb	r3, [r7, #11]
 8013142:	687a      	ldr	r2, [r7, #4]
 8013144:	4619      	mov	r1, r3
 8013146:	68f8      	ldr	r0, [r7, #12]
 8013148:	f000 ff6c 	bl	8014024 <SCSI_Verify10>
 801314c:	4603      	mov	r3, r0
 801314e:	75fb      	strb	r3, [r7, #23]
    break;
 8013150:	e00b      	b.n	801316a <SCSI_ProcessCmd+0x192>

  default:
    SCSI_SenseCode(pdev, lun, ILLEGAL_REQUEST, INVALID_CDB);
 8013152:	7af9      	ldrb	r1, [r7, #11]
 8013154:	2320      	movs	r3, #32
 8013156:	2205      	movs	r2, #5
 8013158:	68f8      	ldr	r0, [r7, #12]
 801315a:	f000 fb61 	bl	8013820 <SCSI_SenseCode>
    hmsc->bot_status = USBD_BOT_STATUS_ERROR;
 801315e:	693b      	ldr	r3, [r7, #16]
 8013160:	2202      	movs	r2, #2
 8013162:	725a      	strb	r2, [r3, #9]
    ret = -1;
 8013164:	23ff      	movs	r3, #255	; 0xff
 8013166:	75fb      	strb	r3, [r7, #23]
    break;
 8013168:	bf00      	nop
  }

  return ret;
 801316a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 801316e:	4618      	mov	r0, r3
 8013170:	3718      	adds	r7, #24
 8013172:	46bd      	mov	sp, r7
 8013174:	bd80      	pop	{r7, pc}

08013176 <SCSI_TestUnitReady>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
static int8_t SCSI_TestUnitReady(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8013176:	b580      	push	{r7, lr}
 8013178:	b086      	sub	sp, #24
 801317a:	af00      	add	r7, sp, #0
 801317c:	60f8      	str	r0, [r7, #12]
 801317e:	460b      	mov	r3, r1
 8013180:	607a      	str	r2, [r7, #4]
 8013182:	72fb      	strb	r3, [r7, #11]
  UNUSED(params);
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8013184:	68fb      	ldr	r3, [r7, #12]
 8013186:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 801318a:	617b      	str	r3, [r7, #20]

  /* case 9 : Hi > D0 */
  if (hmsc->cbw.dDataLength != 0U)
 801318c:	697a      	ldr	r2, [r7, #20]
 801318e:	f248 0318 	movw	r3, #32792	; 0x8018
 8013192:	4413      	add	r3, r2
 8013194:	681b      	ldr	r3, [r3, #0]
 8013196:	2b00      	cmp	r3, #0
 8013198:	d00c      	beq.n	80131b4 <SCSI_TestUnitReady+0x3e>
  {
    SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 801319a:	697a      	ldr	r2, [r7, #20]
 801319c:	f248 031d 	movw	r3, #32797	; 0x801d
 80131a0:	4413      	add	r3, r2
 80131a2:	7819      	ldrb	r1, [r3, #0]
 80131a4:	2320      	movs	r3, #32
 80131a6:	2205      	movs	r2, #5
 80131a8:	68f8      	ldr	r0, [r7, #12]
 80131aa:	f000 fb39 	bl	8013820 <SCSI_SenseCode>

    return -1;
 80131ae:	f04f 33ff 	mov.w	r3, #4294967295
 80131b2:	e02c      	b.n	801320e <SCSI_TestUnitReady+0x98>
  }

  if (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED)
 80131b4:	697a      	ldr	r2, [r7, #20]
 80131b6:	f248 0362 	movw	r3, #32866	; 0x8062
 80131ba:	4413      	add	r3, r2
 80131bc:	781b      	ldrb	r3, [r3, #0]
 80131be:	2b02      	cmp	r3, #2
 80131c0:	d10b      	bne.n	80131da <SCSI_TestUnitReady+0x64>
  {
    SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 80131c2:	7af9      	ldrb	r1, [r7, #11]
 80131c4:	233a      	movs	r3, #58	; 0x3a
 80131c6:	2202      	movs	r2, #2
 80131c8:	68f8      	ldr	r0, [r7, #12]
 80131ca:	f000 fb29 	bl	8013820 <SCSI_SenseCode>
    hmsc->bot_state = USBD_BOT_NO_DATA;
 80131ce:	697b      	ldr	r3, [r7, #20]
 80131d0:	2205      	movs	r2, #5
 80131d2:	721a      	strb	r2, [r3, #8]
    return -1;
 80131d4:	f04f 33ff 	mov.w	r3, #4294967295
 80131d8:	e019      	b.n	801320e <SCSI_TestUnitReady+0x98>
  }

  if (((USBD_StorageTypeDef *)pdev->pUserData)->IsReady(lun) != 0)
 80131da:	68fb      	ldr	r3, [r7, #12]
 80131dc:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80131e0:	689b      	ldr	r3, [r3, #8]
 80131e2:	7afa      	ldrb	r2, [r7, #11]
 80131e4:	4610      	mov	r0, r2
 80131e6:	4798      	blx	r3
 80131e8:	4603      	mov	r3, r0
 80131ea:	2b00      	cmp	r3, #0
 80131ec:	d00b      	beq.n	8013206 <SCSI_TestUnitReady+0x90>
  {
    SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 80131ee:	7af9      	ldrb	r1, [r7, #11]
 80131f0:	233a      	movs	r3, #58	; 0x3a
 80131f2:	2202      	movs	r2, #2
 80131f4:	68f8      	ldr	r0, [r7, #12]
 80131f6:	f000 fb13 	bl	8013820 <SCSI_SenseCode>
    hmsc->bot_state = USBD_BOT_NO_DATA;
 80131fa:	697b      	ldr	r3, [r7, #20]
 80131fc:	2205      	movs	r2, #5
 80131fe:	721a      	strb	r2, [r3, #8]

    return -1;
 8013200:	f04f 33ff 	mov.w	r3, #4294967295
 8013204:	e003      	b.n	801320e <SCSI_TestUnitReady+0x98>
  }
  hmsc->bot_data_length = 0U;
 8013206:	697b      	ldr	r3, [r7, #20]
 8013208:	2200      	movs	r2, #0
 801320a:	60da      	str	r2, [r3, #12]

  return 0;
 801320c:	2300      	movs	r3, #0
}
 801320e:	4618      	mov	r0, r3
 8013210:	3718      	adds	r7, #24
 8013212:	46bd      	mov	sp, r7
 8013214:	bd80      	pop	{r7, pc}
	...

08013218 <SCSI_Inquiry>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
static int8_t SCSI_Inquiry(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8013218:	b580      	push	{r7, lr}
 801321a:	b088      	sub	sp, #32
 801321c:	af00      	add	r7, sp, #0
 801321e:	60f8      	str	r0, [r7, #12]
 8013220:	460b      	mov	r3, r1
 8013222:	607a      	str	r2, [r7, #4]
 8013224:	72fb      	strb	r3, [r7, #11]
  uint8_t *pPage;
  uint16_t len;
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8013226:	68fb      	ldr	r3, [r7, #12]
 8013228:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 801322c:	61bb      	str	r3, [r7, #24]

  if (hmsc->cbw.dDataLength == 0U)
 801322e:	69ba      	ldr	r2, [r7, #24]
 8013230:	f248 0318 	movw	r3, #32792	; 0x8018
 8013234:	4413      	add	r3, r2
 8013236:	681b      	ldr	r3, [r3, #0]
 8013238:	2b00      	cmp	r3, #0
 801323a:	d10c      	bne.n	8013256 <SCSI_Inquiry+0x3e>
  {
    SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 801323c:	69ba      	ldr	r2, [r7, #24]
 801323e:	f248 031d 	movw	r3, #32797	; 0x801d
 8013242:	4413      	add	r3, r2
 8013244:	7819      	ldrb	r1, [r3, #0]
 8013246:	2320      	movs	r3, #32
 8013248:	2205      	movs	r2, #5
 801324a:	68f8      	ldr	r0, [r7, #12]
 801324c:	f000 fae8 	bl	8013820 <SCSI_SenseCode>
    return -1;
 8013250:	f04f 33ff 	mov.w	r3, #4294967295
 8013254:	e04c      	b.n	80132f0 <SCSI_Inquiry+0xd8>
  }

  if ((params[1] & 0x01U) != 0U) /* Evpd is set */
 8013256:	687b      	ldr	r3, [r7, #4]
 8013258:	3301      	adds	r3, #1
 801325a:	781b      	ldrb	r3, [r3, #0]
 801325c:	f003 0301 	and.w	r3, r3, #1
 8013260:	2b00      	cmp	r3, #0
 8013262:	d022      	beq.n	80132aa <SCSI_Inquiry+0x92>
  {
    if (params[2] == 0U) /* Request for Supported Vital Product Data Pages*/
 8013264:	687b      	ldr	r3, [r7, #4]
 8013266:	3302      	adds	r3, #2
 8013268:	781b      	ldrb	r3, [r3, #0]
 801326a:	2b00      	cmp	r3, #0
 801326c:	d105      	bne.n	801327a <SCSI_Inquiry+0x62>
    {
      (void)SCSI_UpdateBotData(hmsc, MSC_Page00_Inquiry_Data, LENGTH_INQUIRY_PAGE00);
 801326e:	2206      	movs	r2, #6
 8013270:	4921      	ldr	r1, [pc, #132]	; (80132f8 <SCSI_Inquiry+0xe0>)
 8013272:	69b8      	ldr	r0, [r7, #24]
 8013274:	f001 f862 	bl	801433c <SCSI_UpdateBotData>
 8013278:	e039      	b.n	80132ee <SCSI_Inquiry+0xd6>
    }
    else if (params[2] == 0x80U) /* Request for VPD page 0x80 Unit Serial Number */
 801327a:	687b      	ldr	r3, [r7, #4]
 801327c:	3302      	adds	r3, #2
 801327e:	781b      	ldrb	r3, [r3, #0]
 8013280:	2b80      	cmp	r3, #128	; 0x80
 8013282:	d105      	bne.n	8013290 <SCSI_Inquiry+0x78>
    {
      (void)SCSI_UpdateBotData(hmsc, MSC_Page80_Inquiry_Data, LENGTH_INQUIRY_PAGE80);
 8013284:	2208      	movs	r2, #8
 8013286:	491d      	ldr	r1, [pc, #116]	; (80132fc <SCSI_Inquiry+0xe4>)
 8013288:	69b8      	ldr	r0, [r7, #24]
 801328a:	f001 f857 	bl	801433c <SCSI_UpdateBotData>
 801328e:	e02e      	b.n	80132ee <SCSI_Inquiry+0xd6>
    }
    else /* Request Not supported */
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST,
 8013290:	69ba      	ldr	r2, [r7, #24]
 8013292:	f248 031d 	movw	r3, #32797	; 0x801d
 8013296:	4413      	add	r3, r2
 8013298:	7819      	ldrb	r1, [r3, #0]
 801329a:	2324      	movs	r3, #36	; 0x24
 801329c:	2205      	movs	r2, #5
 801329e:	68f8      	ldr	r0, [r7, #12]
 80132a0:	f000 fabe 	bl	8013820 <SCSI_SenseCode>
                     INVALID_FIELED_IN_COMMAND);

      return -1;
 80132a4:	f04f 33ff 	mov.w	r3, #4294967295
 80132a8:	e022      	b.n	80132f0 <SCSI_Inquiry+0xd8>
    }
  }
  else
  {
    pPage = (uint8_t *)&((USBD_StorageTypeDef *)pdev->pUserData)->pInquiry[lun * STANDARD_INQUIRY_DATA_LEN];
 80132aa:	68fb      	ldr	r3, [r7, #12]
 80132ac:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80132b0:	69d9      	ldr	r1, [r3, #28]
 80132b2:	7afa      	ldrb	r2, [r7, #11]
 80132b4:	4613      	mov	r3, r2
 80132b6:	00db      	lsls	r3, r3, #3
 80132b8:	4413      	add	r3, r2
 80132ba:	009b      	lsls	r3, r3, #2
 80132bc:	440b      	add	r3, r1
 80132be:	617b      	str	r3, [r7, #20]
    len = (uint16_t)pPage[4] + 5U;
 80132c0:	697b      	ldr	r3, [r7, #20]
 80132c2:	3304      	adds	r3, #4
 80132c4:	781b      	ldrb	r3, [r3, #0]
 80132c6:	b29b      	uxth	r3, r3
 80132c8:	3305      	adds	r3, #5
 80132ca:	83fb      	strh	r3, [r7, #30]

    if (params[4] <= len)
 80132cc:	687b      	ldr	r3, [r7, #4]
 80132ce:	3304      	adds	r3, #4
 80132d0:	781b      	ldrb	r3, [r3, #0]
 80132d2:	b29b      	uxth	r3, r3
 80132d4:	8bfa      	ldrh	r2, [r7, #30]
 80132d6:	429a      	cmp	r2, r3
 80132d8:	d303      	bcc.n	80132e2 <SCSI_Inquiry+0xca>
    {
      len = params[4];
 80132da:	687b      	ldr	r3, [r7, #4]
 80132dc:	3304      	adds	r3, #4
 80132de:	781b      	ldrb	r3, [r3, #0]
 80132e0:	83fb      	strh	r3, [r7, #30]
    }

    (void)SCSI_UpdateBotData(hmsc, pPage, len);
 80132e2:	8bfb      	ldrh	r3, [r7, #30]
 80132e4:	461a      	mov	r2, r3
 80132e6:	6979      	ldr	r1, [r7, #20]
 80132e8:	69b8      	ldr	r0, [r7, #24]
 80132ea:	f001 f827 	bl	801433c <SCSI_UpdateBotData>
  }

  return 0;
 80132ee:	2300      	movs	r3, #0
}
 80132f0:	4618      	mov	r0, r3
 80132f2:	3720      	adds	r7, #32
 80132f4:	46bd      	mov	sp, r7
 80132f6:	bd80      	pop	{r7, pc}
 80132f8:	240000c0 	.word	0x240000c0
 80132fc:	240000c8 	.word	0x240000c8

08013300 <SCSI_ReadCapacity10>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
static int8_t SCSI_ReadCapacity10(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8013300:	b590      	push	{r4, r7, lr}
 8013302:	b087      	sub	sp, #28
 8013304:	af00      	add	r7, sp, #0
 8013306:	60f8      	str	r0, [r7, #12]
 8013308:	460b      	mov	r3, r1
 801330a:	607a      	str	r2, [r7, #4]
 801330c:	72fb      	strb	r3, [r7, #11]
  UNUSED(params);
  int8_t ret;
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 801330e:	68fb      	ldr	r3, [r7, #12]
 8013310:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8013314:	617b      	str	r3, [r7, #20]

  ret = ((USBD_StorageTypeDef *)pdev->pUserData)->GetCapacity(lun, &hmsc->scsi_blk_nbr, &hmsc->scsi_blk_size);
 8013316:	68fb      	ldr	r3, [r7, #12]
 8013318:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 801331c:	685c      	ldr	r4, [r3, #4]
 801331e:	697a      	ldr	r2, [r7, #20]
 8013320:	f248 0368 	movw	r3, #32872	; 0x8068
 8013324:	4413      	add	r3, r2
 8013326:	6979      	ldr	r1, [r7, #20]
 8013328:	f248 0264 	movw	r2, #32868	; 0x8064
 801332c:	440a      	add	r2, r1
 801332e:	7af8      	ldrb	r0, [r7, #11]
 8013330:	4619      	mov	r1, r3
 8013332:	47a0      	blx	r4
 8013334:	4603      	mov	r3, r0
 8013336:	74fb      	strb	r3, [r7, #19]

  if ((ret != 0) || (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED))
 8013338:	f997 3013 	ldrsb.w	r3, [r7, #19]
 801333c:	2b00      	cmp	r3, #0
 801333e:	d106      	bne.n	801334e <SCSI_ReadCapacity10+0x4e>
 8013340:	697a      	ldr	r2, [r7, #20]
 8013342:	f248 0362 	movw	r3, #32866	; 0x8062
 8013346:	4413      	add	r3, r2
 8013348:	781b      	ldrb	r3, [r3, #0]
 801334a:	2b02      	cmp	r3, #2
 801334c:	d108      	bne.n	8013360 <SCSI_ReadCapacity10+0x60>
  {
    SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 801334e:	7af9      	ldrb	r1, [r7, #11]
 8013350:	233a      	movs	r3, #58	; 0x3a
 8013352:	2202      	movs	r2, #2
 8013354:	68f8      	ldr	r0, [r7, #12]
 8013356:	f000 fa63 	bl	8013820 <SCSI_SenseCode>
    return -1;
 801335a:	f04f 33ff 	mov.w	r3, #4294967295
 801335e:	e04f      	b.n	8013400 <SCSI_ReadCapacity10+0x100>
  }

  hmsc->bot_data[0] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >> 24);
 8013360:	697a      	ldr	r2, [r7, #20]
 8013362:	f248 0368 	movw	r3, #32872	; 0x8068
 8013366:	4413      	add	r3, r2
 8013368:	681b      	ldr	r3, [r3, #0]
 801336a:	3b01      	subs	r3, #1
 801336c:	0e1b      	lsrs	r3, r3, #24
 801336e:	b2da      	uxtb	r2, r3
 8013370:	697b      	ldr	r3, [r7, #20]
 8013372:	741a      	strb	r2, [r3, #16]
  hmsc->bot_data[1] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >> 16);
 8013374:	697a      	ldr	r2, [r7, #20]
 8013376:	f248 0368 	movw	r3, #32872	; 0x8068
 801337a:	4413      	add	r3, r2
 801337c:	681b      	ldr	r3, [r3, #0]
 801337e:	3b01      	subs	r3, #1
 8013380:	0c1b      	lsrs	r3, r3, #16
 8013382:	b2da      	uxtb	r2, r3
 8013384:	697b      	ldr	r3, [r7, #20]
 8013386:	745a      	strb	r2, [r3, #17]
  hmsc->bot_data[2] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >>  8);
 8013388:	697a      	ldr	r2, [r7, #20]
 801338a:	f248 0368 	movw	r3, #32872	; 0x8068
 801338e:	4413      	add	r3, r2
 8013390:	681b      	ldr	r3, [r3, #0]
 8013392:	3b01      	subs	r3, #1
 8013394:	0a1b      	lsrs	r3, r3, #8
 8013396:	b2da      	uxtb	r2, r3
 8013398:	697b      	ldr	r3, [r7, #20]
 801339a:	749a      	strb	r2, [r3, #18]
  hmsc->bot_data[3] = (uint8_t)(hmsc->scsi_blk_nbr - 1U);
 801339c:	697a      	ldr	r2, [r7, #20]
 801339e:	f248 0368 	movw	r3, #32872	; 0x8068
 80133a2:	4413      	add	r3, r2
 80133a4:	681b      	ldr	r3, [r3, #0]
 80133a6:	b2db      	uxtb	r3, r3
 80133a8:	3b01      	subs	r3, #1
 80133aa:	b2da      	uxtb	r2, r3
 80133ac:	697b      	ldr	r3, [r7, #20]
 80133ae:	74da      	strb	r2, [r3, #19]

  hmsc->bot_data[4] = (uint8_t)(hmsc->scsi_blk_size >>  24);
 80133b0:	697a      	ldr	r2, [r7, #20]
 80133b2:	f248 0364 	movw	r3, #32868	; 0x8064
 80133b6:	4413      	add	r3, r2
 80133b8:	881b      	ldrh	r3, [r3, #0]
 80133ba:	161b      	asrs	r3, r3, #24
 80133bc:	b2da      	uxtb	r2, r3
 80133be:	697b      	ldr	r3, [r7, #20]
 80133c0:	751a      	strb	r2, [r3, #20]
  hmsc->bot_data[5] = (uint8_t)(hmsc->scsi_blk_size >>  16);
 80133c2:	697a      	ldr	r2, [r7, #20]
 80133c4:	f248 0364 	movw	r3, #32868	; 0x8064
 80133c8:	4413      	add	r3, r2
 80133ca:	881b      	ldrh	r3, [r3, #0]
 80133cc:	141b      	asrs	r3, r3, #16
 80133ce:	b2da      	uxtb	r2, r3
 80133d0:	697b      	ldr	r3, [r7, #20]
 80133d2:	755a      	strb	r2, [r3, #21]
  hmsc->bot_data[6] = (uint8_t)(hmsc->scsi_blk_size >>  8);
 80133d4:	697a      	ldr	r2, [r7, #20]
 80133d6:	f248 0364 	movw	r3, #32868	; 0x8064
 80133da:	4413      	add	r3, r2
 80133dc:	881b      	ldrh	r3, [r3, #0]
 80133de:	0a1b      	lsrs	r3, r3, #8
 80133e0:	b29b      	uxth	r3, r3
 80133e2:	b2da      	uxtb	r2, r3
 80133e4:	697b      	ldr	r3, [r7, #20]
 80133e6:	759a      	strb	r2, [r3, #22]
  hmsc->bot_data[7] = (uint8_t)(hmsc->scsi_blk_size);
 80133e8:	697a      	ldr	r2, [r7, #20]
 80133ea:	f248 0364 	movw	r3, #32868	; 0x8064
 80133ee:	4413      	add	r3, r2
 80133f0:	881b      	ldrh	r3, [r3, #0]
 80133f2:	b2da      	uxtb	r2, r3
 80133f4:	697b      	ldr	r3, [r7, #20]
 80133f6:	75da      	strb	r2, [r3, #23]

  hmsc->bot_data_length = 8U;
 80133f8:	697b      	ldr	r3, [r7, #20]
 80133fa:	2208      	movs	r2, #8
 80133fc:	60da      	str	r2, [r3, #12]

  return 0;
 80133fe:	2300      	movs	r3, #0

}
 8013400:	4618      	mov	r0, r3
 8013402:	371c      	adds	r7, #28
 8013404:	46bd      	mov	sp, r7
 8013406:	bd90      	pop	{r4, r7, pc}

08013408 <SCSI_ReadCapacity16>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
static int8_t SCSI_ReadCapacity16(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8013408:	b590      	push	{r4, r7, lr}
 801340a:	b089      	sub	sp, #36	; 0x24
 801340c:	af00      	add	r7, sp, #0
 801340e:	60f8      	str	r0, [r7, #12]
 8013410:	460b      	mov	r3, r1
 8013412:	607a      	str	r2, [r7, #4]
 8013414:	72fb      	strb	r3, [r7, #11]
  UNUSED(params);
  uint8_t idx;
  int8_t ret;
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8013416:	68fb      	ldr	r3, [r7, #12]
 8013418:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 801341c:	61bb      	str	r3, [r7, #24]

  ret = ((USBD_StorageTypeDef *)pdev->pUserData)->GetCapacity(lun, &hmsc->scsi_blk_nbr, &hmsc->scsi_blk_size);
 801341e:	68fb      	ldr	r3, [r7, #12]
 8013420:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8013424:	685c      	ldr	r4, [r3, #4]
 8013426:	69ba      	ldr	r2, [r7, #24]
 8013428:	f248 0368 	movw	r3, #32872	; 0x8068
 801342c:	4413      	add	r3, r2
 801342e:	69b9      	ldr	r1, [r7, #24]
 8013430:	f248 0264 	movw	r2, #32868	; 0x8064
 8013434:	440a      	add	r2, r1
 8013436:	7af8      	ldrb	r0, [r7, #11]
 8013438:	4619      	mov	r1, r3
 801343a:	47a0      	blx	r4
 801343c:	4603      	mov	r3, r0
 801343e:	75fb      	strb	r3, [r7, #23]

  if ((ret != 0) || (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED))
 8013440:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8013444:	2b00      	cmp	r3, #0
 8013446:	d106      	bne.n	8013456 <SCSI_ReadCapacity16+0x4e>
 8013448:	69ba      	ldr	r2, [r7, #24]
 801344a:	f248 0362 	movw	r3, #32866	; 0x8062
 801344e:	4413      	add	r3, r2
 8013450:	781b      	ldrb	r3, [r3, #0]
 8013452:	2b02      	cmp	r3, #2
 8013454:	d108      	bne.n	8013468 <SCSI_ReadCapacity16+0x60>
  {
    SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 8013456:	7af9      	ldrb	r1, [r7, #11]
 8013458:	233a      	movs	r3, #58	; 0x3a
 801345a:	2202      	movs	r2, #2
 801345c:	68f8      	ldr	r0, [r7, #12]
 801345e:	f000 f9df 	bl	8013820 <SCSI_SenseCode>
    return -1;
 8013462:	f04f 33ff 	mov.w	r3, #4294967295
 8013466:	e084      	b.n	8013572 <SCSI_ReadCapacity16+0x16a>
  }

  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 8013468:	687b      	ldr	r3, [r7, #4]
 801346a:	330a      	adds	r3, #10
 801346c:	781b      	ldrb	r3, [r3, #0]
 801346e:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[11] << 16) |
 8013470:	687b      	ldr	r3, [r7, #4]
 8013472:	330b      	adds	r3, #11
 8013474:	781b      	ldrb	r3, [r3, #0]
 8013476:	041b      	lsls	r3, r3, #16
  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 8013478:	431a      	orrs	r2, r3
                          ((uint32_t)params[12] <<  8) |
 801347a:	687b      	ldr	r3, [r7, #4]
 801347c:	330c      	adds	r3, #12
 801347e:	781b      	ldrb	r3, [r3, #0]
 8013480:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[11] << 16) |
 8013482:	4313      	orrs	r3, r2
                           (uint32_t)params[13];
 8013484:	687a      	ldr	r2, [r7, #4]
 8013486:	320d      	adds	r2, #13
 8013488:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[12] <<  8) |
 801348a:	431a      	orrs	r2, r3
  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 801348c:	69bb      	ldr	r3, [r7, #24]
 801348e:	60da      	str	r2, [r3, #12]

  for (idx = 0U; idx < hmsc->bot_data_length; idx++)
 8013490:	2300      	movs	r3, #0
 8013492:	77fb      	strb	r3, [r7, #31]
 8013494:	e007      	b.n	80134a6 <SCSI_ReadCapacity16+0x9e>
  {
    hmsc->bot_data[idx] = 0U;
 8013496:	7ffb      	ldrb	r3, [r7, #31]
 8013498:	69ba      	ldr	r2, [r7, #24]
 801349a:	4413      	add	r3, r2
 801349c:	2200      	movs	r2, #0
 801349e:	741a      	strb	r2, [r3, #16]
  for (idx = 0U; idx < hmsc->bot_data_length; idx++)
 80134a0:	7ffb      	ldrb	r3, [r7, #31]
 80134a2:	3301      	adds	r3, #1
 80134a4:	77fb      	strb	r3, [r7, #31]
 80134a6:	7ffa      	ldrb	r2, [r7, #31]
 80134a8:	69bb      	ldr	r3, [r7, #24]
 80134aa:	68db      	ldr	r3, [r3, #12]
 80134ac:	429a      	cmp	r2, r3
 80134ae:	d3f2      	bcc.n	8013496 <SCSI_ReadCapacity16+0x8e>
  }

  hmsc->bot_data[4] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >> 24);
 80134b0:	69ba      	ldr	r2, [r7, #24]
 80134b2:	f248 0368 	movw	r3, #32872	; 0x8068
 80134b6:	4413      	add	r3, r2
 80134b8:	681b      	ldr	r3, [r3, #0]
 80134ba:	3b01      	subs	r3, #1
 80134bc:	0e1b      	lsrs	r3, r3, #24
 80134be:	b2da      	uxtb	r2, r3
 80134c0:	69bb      	ldr	r3, [r7, #24]
 80134c2:	751a      	strb	r2, [r3, #20]
  hmsc->bot_data[5] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >> 16);
 80134c4:	69ba      	ldr	r2, [r7, #24]
 80134c6:	f248 0368 	movw	r3, #32872	; 0x8068
 80134ca:	4413      	add	r3, r2
 80134cc:	681b      	ldr	r3, [r3, #0]
 80134ce:	3b01      	subs	r3, #1
 80134d0:	0c1b      	lsrs	r3, r3, #16
 80134d2:	b2da      	uxtb	r2, r3
 80134d4:	69bb      	ldr	r3, [r7, #24]
 80134d6:	755a      	strb	r2, [r3, #21]
  hmsc->bot_data[6] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >>  8);
 80134d8:	69ba      	ldr	r2, [r7, #24]
 80134da:	f248 0368 	movw	r3, #32872	; 0x8068
 80134de:	4413      	add	r3, r2
 80134e0:	681b      	ldr	r3, [r3, #0]
 80134e2:	3b01      	subs	r3, #1
 80134e4:	0a1b      	lsrs	r3, r3, #8
 80134e6:	b2da      	uxtb	r2, r3
 80134e8:	69bb      	ldr	r3, [r7, #24]
 80134ea:	759a      	strb	r2, [r3, #22]
  hmsc->bot_data[7] = (uint8_t)(hmsc->scsi_blk_nbr - 1U);
 80134ec:	69ba      	ldr	r2, [r7, #24]
 80134ee:	f248 0368 	movw	r3, #32872	; 0x8068
 80134f2:	4413      	add	r3, r2
 80134f4:	681b      	ldr	r3, [r3, #0]
 80134f6:	b2db      	uxtb	r3, r3
 80134f8:	3b01      	subs	r3, #1
 80134fa:	b2da      	uxtb	r2, r3
 80134fc:	69bb      	ldr	r3, [r7, #24]
 80134fe:	75da      	strb	r2, [r3, #23]

  hmsc->bot_data[8] = (uint8_t)(hmsc->scsi_blk_size >>  24);
 8013500:	69ba      	ldr	r2, [r7, #24]
 8013502:	f248 0364 	movw	r3, #32868	; 0x8064
 8013506:	4413      	add	r3, r2
 8013508:	881b      	ldrh	r3, [r3, #0]
 801350a:	161b      	asrs	r3, r3, #24
 801350c:	b2da      	uxtb	r2, r3
 801350e:	69bb      	ldr	r3, [r7, #24]
 8013510:	761a      	strb	r2, [r3, #24]
  hmsc->bot_data[9] = (uint8_t)(hmsc->scsi_blk_size >>  16);
 8013512:	69ba      	ldr	r2, [r7, #24]
 8013514:	f248 0364 	movw	r3, #32868	; 0x8064
 8013518:	4413      	add	r3, r2
 801351a:	881b      	ldrh	r3, [r3, #0]
 801351c:	141b      	asrs	r3, r3, #16
 801351e:	b2da      	uxtb	r2, r3
 8013520:	69bb      	ldr	r3, [r7, #24]
 8013522:	765a      	strb	r2, [r3, #25]
  hmsc->bot_data[10] = (uint8_t)(hmsc->scsi_blk_size >>  8);
 8013524:	69ba      	ldr	r2, [r7, #24]
 8013526:	f248 0364 	movw	r3, #32868	; 0x8064
 801352a:	4413      	add	r3, r2
 801352c:	881b      	ldrh	r3, [r3, #0]
 801352e:	0a1b      	lsrs	r3, r3, #8
 8013530:	b29b      	uxth	r3, r3
 8013532:	b2da      	uxtb	r2, r3
 8013534:	69bb      	ldr	r3, [r7, #24]
 8013536:	769a      	strb	r2, [r3, #26]
  hmsc->bot_data[11] = (uint8_t)(hmsc->scsi_blk_size);
 8013538:	69ba      	ldr	r2, [r7, #24]
 801353a:	f248 0364 	movw	r3, #32868	; 0x8064
 801353e:	4413      	add	r3, r2
 8013540:	881b      	ldrh	r3, [r3, #0]
 8013542:	b2da      	uxtb	r2, r3
 8013544:	69bb      	ldr	r3, [r7, #24]
 8013546:	76da      	strb	r2, [r3, #27]

  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 8013548:	687b      	ldr	r3, [r7, #4]
 801354a:	330a      	adds	r3, #10
 801354c:	781b      	ldrb	r3, [r3, #0]
 801354e:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[11] << 16) |
 8013550:	687b      	ldr	r3, [r7, #4]
 8013552:	330b      	adds	r3, #11
 8013554:	781b      	ldrb	r3, [r3, #0]
 8013556:	041b      	lsls	r3, r3, #16
  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 8013558:	431a      	orrs	r2, r3
                          ((uint32_t)params[12] <<  8) |
 801355a:	687b      	ldr	r3, [r7, #4]
 801355c:	330c      	adds	r3, #12
 801355e:	781b      	ldrb	r3, [r3, #0]
 8013560:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[11] << 16) |
 8013562:	4313      	orrs	r3, r2
                           (uint32_t)params[13];
 8013564:	687a      	ldr	r2, [r7, #4]
 8013566:	320d      	adds	r2, #13
 8013568:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[12] <<  8) |
 801356a:	431a      	orrs	r2, r3
  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 801356c:	69bb      	ldr	r3, [r7, #24]
 801356e:	60da      	str	r2, [r3, #12]

  return 0;
 8013570:	2300      	movs	r3, #0
}
 8013572:	4618      	mov	r0, r3
 8013574:	3724      	adds	r7, #36	; 0x24
 8013576:	46bd      	mov	sp, r7
 8013578:	bd90      	pop	{r4, r7, pc}

0801357a <SCSI_ReadFormatCapacity>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
static int8_t SCSI_ReadFormatCapacity(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 801357a:	b580      	push	{r7, lr}
 801357c:	b088      	sub	sp, #32
 801357e:	af00      	add	r7, sp, #0
 8013580:	60f8      	str	r0, [r7, #12]
 8013582:	460b      	mov	r3, r1
 8013584:	607a      	str	r2, [r7, #4]
 8013586:	72fb      	strb	r3, [r7, #11]
  UNUSED(params);
  uint16_t blk_size;
  uint32_t blk_nbr;
  uint16_t i;
  int8_t ret;
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8013588:	68fb      	ldr	r3, [r7, #12]
 801358a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 801358e:	61bb      	str	r3, [r7, #24]

  ret = ((USBD_StorageTypeDef *)pdev->pUserData)->GetCapacity(lun, &blk_nbr, &blk_size);
 8013590:	68fb      	ldr	r3, [r7, #12]
 8013592:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8013596:	685b      	ldr	r3, [r3, #4]
 8013598:	f107 0214 	add.w	r2, r7, #20
 801359c:	f107 0110 	add.w	r1, r7, #16
 80135a0:	7af8      	ldrb	r0, [r7, #11]
 80135a2:	4798      	blx	r3
 80135a4:	4603      	mov	r3, r0
 80135a6:	75fb      	strb	r3, [r7, #23]

  if ((ret != 0) || (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED))
 80135a8:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80135ac:	2b00      	cmp	r3, #0
 80135ae:	d106      	bne.n	80135be <SCSI_ReadFormatCapacity+0x44>
 80135b0:	69ba      	ldr	r2, [r7, #24]
 80135b2:	f248 0362 	movw	r3, #32866	; 0x8062
 80135b6:	4413      	add	r3, r2
 80135b8:	781b      	ldrb	r3, [r3, #0]
 80135ba:	2b02      	cmp	r3, #2
 80135bc:	d108      	bne.n	80135d0 <SCSI_ReadFormatCapacity+0x56>
  {
    SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 80135be:	7af9      	ldrb	r1, [r7, #11]
 80135c0:	233a      	movs	r3, #58	; 0x3a
 80135c2:	2202      	movs	r2, #2
 80135c4:	68f8      	ldr	r0, [r7, #12]
 80135c6:	f000 f92b 	bl	8013820 <SCSI_SenseCode>
    return -1;
 80135ca:	f04f 33ff 	mov.w	r3, #4294967295
 80135ce:	e03e      	b.n	801364e <SCSI_ReadFormatCapacity+0xd4>
  }

  for (i = 0U; i < 12U ; i++)
 80135d0:	2300      	movs	r3, #0
 80135d2:	83fb      	strh	r3, [r7, #30]
 80135d4:	e007      	b.n	80135e6 <SCSI_ReadFormatCapacity+0x6c>
  {
    hmsc->bot_data[i] = 0U;
 80135d6:	8bfb      	ldrh	r3, [r7, #30]
 80135d8:	69ba      	ldr	r2, [r7, #24]
 80135da:	4413      	add	r3, r2
 80135dc:	2200      	movs	r2, #0
 80135de:	741a      	strb	r2, [r3, #16]
  for (i = 0U; i < 12U ; i++)
 80135e0:	8bfb      	ldrh	r3, [r7, #30]
 80135e2:	3301      	adds	r3, #1
 80135e4:	83fb      	strh	r3, [r7, #30]
 80135e6:	8bfb      	ldrh	r3, [r7, #30]
 80135e8:	2b0b      	cmp	r3, #11
 80135ea:	d9f4      	bls.n	80135d6 <SCSI_ReadFormatCapacity+0x5c>
  }

  hmsc->bot_data[3] = 0x08U;
 80135ec:	69bb      	ldr	r3, [r7, #24]
 80135ee:	2208      	movs	r2, #8
 80135f0:	74da      	strb	r2, [r3, #19]
  hmsc->bot_data[4] = (uint8_t)((blk_nbr - 1U) >> 24);
 80135f2:	693b      	ldr	r3, [r7, #16]
 80135f4:	3b01      	subs	r3, #1
 80135f6:	0e1b      	lsrs	r3, r3, #24
 80135f8:	b2da      	uxtb	r2, r3
 80135fa:	69bb      	ldr	r3, [r7, #24]
 80135fc:	751a      	strb	r2, [r3, #20]
  hmsc->bot_data[5] = (uint8_t)((blk_nbr - 1U) >> 16);
 80135fe:	693b      	ldr	r3, [r7, #16]
 8013600:	3b01      	subs	r3, #1
 8013602:	0c1b      	lsrs	r3, r3, #16
 8013604:	b2da      	uxtb	r2, r3
 8013606:	69bb      	ldr	r3, [r7, #24]
 8013608:	755a      	strb	r2, [r3, #21]
  hmsc->bot_data[6] = (uint8_t)((blk_nbr - 1U) >>  8);
 801360a:	693b      	ldr	r3, [r7, #16]
 801360c:	3b01      	subs	r3, #1
 801360e:	0a1b      	lsrs	r3, r3, #8
 8013610:	b2da      	uxtb	r2, r3
 8013612:	69bb      	ldr	r3, [r7, #24]
 8013614:	759a      	strb	r2, [r3, #22]
  hmsc->bot_data[7] = (uint8_t)(blk_nbr - 1U);
 8013616:	693b      	ldr	r3, [r7, #16]
 8013618:	b2db      	uxtb	r3, r3
 801361a:	3b01      	subs	r3, #1
 801361c:	b2da      	uxtb	r2, r3
 801361e:	69bb      	ldr	r3, [r7, #24]
 8013620:	75da      	strb	r2, [r3, #23]

  hmsc->bot_data[8] = 0x02U;
 8013622:	69bb      	ldr	r3, [r7, #24]
 8013624:	2202      	movs	r2, #2
 8013626:	761a      	strb	r2, [r3, #24]
  hmsc->bot_data[9] = (uint8_t)(blk_size >>  16);
 8013628:	8abb      	ldrh	r3, [r7, #20]
 801362a:	141b      	asrs	r3, r3, #16
 801362c:	b2da      	uxtb	r2, r3
 801362e:	69bb      	ldr	r3, [r7, #24]
 8013630:	765a      	strb	r2, [r3, #25]
  hmsc->bot_data[10] = (uint8_t)(blk_size >>  8);
 8013632:	8abb      	ldrh	r3, [r7, #20]
 8013634:	0a1b      	lsrs	r3, r3, #8
 8013636:	b29b      	uxth	r3, r3
 8013638:	b2da      	uxtb	r2, r3
 801363a:	69bb      	ldr	r3, [r7, #24]
 801363c:	769a      	strb	r2, [r3, #26]
  hmsc->bot_data[11] = (uint8_t)(blk_size);
 801363e:	8abb      	ldrh	r3, [r7, #20]
 8013640:	b2da      	uxtb	r2, r3
 8013642:	69bb      	ldr	r3, [r7, #24]
 8013644:	76da      	strb	r2, [r3, #27]

  hmsc->bot_data_length = 12U;
 8013646:	69bb      	ldr	r3, [r7, #24]
 8013648:	220c      	movs	r2, #12
 801364a:	60da      	str	r2, [r3, #12]

  return 0;
 801364c:	2300      	movs	r3, #0
}
 801364e:	4618      	mov	r0, r3
 8013650:	3720      	adds	r7, #32
 8013652:	46bd      	mov	sp, r7
 8013654:	bd80      	pop	{r7, pc}
	...

08013658 <SCSI_ModeSense6>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
static int8_t SCSI_ModeSense6(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8013658:	b580      	push	{r7, lr}
 801365a:	b086      	sub	sp, #24
 801365c:	af00      	add	r7, sp, #0
 801365e:	60f8      	str	r0, [r7, #12]
 8013660:	460b      	mov	r3, r1
 8013662:	607a      	str	r2, [r7, #4]
 8013664:	72fb      	strb	r3, [r7, #11]
  UNUSED(lun);
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8013666:	68fb      	ldr	r3, [r7, #12]
 8013668:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 801366c:	613b      	str	r3, [r7, #16]
  uint16_t len = MODE_SENSE6_LEN;
 801366e:	2317      	movs	r3, #23
 8013670:	82fb      	strh	r3, [r7, #22]

  if (params[4] <= len)
 8013672:	687b      	ldr	r3, [r7, #4]
 8013674:	3304      	adds	r3, #4
 8013676:	781b      	ldrb	r3, [r3, #0]
 8013678:	b29b      	uxth	r3, r3
 801367a:	8afa      	ldrh	r2, [r7, #22]
 801367c:	429a      	cmp	r2, r3
 801367e:	d303      	bcc.n	8013688 <SCSI_ModeSense6+0x30>
  {
    len = params[4];
 8013680:	687b      	ldr	r3, [r7, #4]
 8013682:	3304      	adds	r3, #4
 8013684:	781b      	ldrb	r3, [r3, #0]
 8013686:	82fb      	strh	r3, [r7, #22]
  }

  (void)SCSI_UpdateBotData(hmsc, MSC_Mode_Sense6_data, len);
 8013688:	8afb      	ldrh	r3, [r7, #22]
 801368a:	461a      	mov	r2, r3
 801368c:	4904      	ldr	r1, [pc, #16]	; (80136a0 <SCSI_ModeSense6+0x48>)
 801368e:	6938      	ldr	r0, [r7, #16]
 8013690:	f000 fe54 	bl	801433c <SCSI_UpdateBotData>

  return 0;
 8013694:	2300      	movs	r3, #0
}
 8013696:	4618      	mov	r0, r3
 8013698:	3718      	adds	r7, #24
 801369a:	46bd      	mov	sp, r7
 801369c:	bd80      	pop	{r7, pc}
 801369e:	bf00      	nop
 80136a0:	240000d0 	.word	0x240000d0

080136a4 <SCSI_ModeSense10>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
static int8_t SCSI_ModeSense10(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 80136a4:	b580      	push	{r7, lr}
 80136a6:	b086      	sub	sp, #24
 80136a8:	af00      	add	r7, sp, #0
 80136aa:	60f8      	str	r0, [r7, #12]
 80136ac:	460b      	mov	r3, r1
 80136ae:	607a      	str	r2, [r7, #4]
 80136b0:	72fb      	strb	r3, [r7, #11]
  UNUSED(lun);
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 80136b2:	68fb      	ldr	r3, [r7, #12]
 80136b4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80136b8:	613b      	str	r3, [r7, #16]
  uint16_t len = MODE_SENSE10_LEN;
 80136ba:	231b      	movs	r3, #27
 80136bc:	82fb      	strh	r3, [r7, #22]

  if (params[8] <= len)
 80136be:	687b      	ldr	r3, [r7, #4]
 80136c0:	3308      	adds	r3, #8
 80136c2:	781b      	ldrb	r3, [r3, #0]
 80136c4:	b29b      	uxth	r3, r3
 80136c6:	8afa      	ldrh	r2, [r7, #22]
 80136c8:	429a      	cmp	r2, r3
 80136ca:	d303      	bcc.n	80136d4 <SCSI_ModeSense10+0x30>
  {
    len = params[8];
 80136cc:	687b      	ldr	r3, [r7, #4]
 80136ce:	3308      	adds	r3, #8
 80136d0:	781b      	ldrb	r3, [r3, #0]
 80136d2:	82fb      	strh	r3, [r7, #22]
  }

  (void)SCSI_UpdateBotData(hmsc, MSC_Mode_Sense10_data, len);
 80136d4:	8afb      	ldrh	r3, [r7, #22]
 80136d6:	461a      	mov	r2, r3
 80136d8:	4904      	ldr	r1, [pc, #16]	; (80136ec <SCSI_ModeSense10+0x48>)
 80136da:	6938      	ldr	r0, [r7, #16]
 80136dc:	f000 fe2e 	bl	801433c <SCSI_UpdateBotData>

  return 0;
 80136e0:	2300      	movs	r3, #0
}
 80136e2:	4618      	mov	r0, r3
 80136e4:	3718      	adds	r7, #24
 80136e6:	46bd      	mov	sp, r7
 80136e8:	bd80      	pop	{r7, pc}
 80136ea:	bf00      	nop
 80136ec:	240000e8 	.word	0x240000e8

080136f0 <SCSI_RequestSense>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
static int8_t SCSI_RequestSense(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 80136f0:	b580      	push	{r7, lr}
 80136f2:	b086      	sub	sp, #24
 80136f4:	af00      	add	r7, sp, #0
 80136f6:	60f8      	str	r0, [r7, #12]
 80136f8:	460b      	mov	r3, r1
 80136fa:	607a      	str	r2, [r7, #4]
 80136fc:	72fb      	strb	r3, [r7, #11]
  UNUSED(lun);
  uint8_t i;
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 80136fe:	68fb      	ldr	r3, [r7, #12]
 8013700:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8013704:	613b      	str	r3, [r7, #16]

  if (hmsc->cbw.dDataLength == 0U)
 8013706:	693a      	ldr	r2, [r7, #16]
 8013708:	f248 0318 	movw	r3, #32792	; 0x8018
 801370c:	4413      	add	r3, r2
 801370e:	681b      	ldr	r3, [r3, #0]
 8013710:	2b00      	cmp	r3, #0
 8013712:	d10c      	bne.n	801372e <SCSI_RequestSense+0x3e>
  {
    SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8013714:	693a      	ldr	r2, [r7, #16]
 8013716:	f248 031d 	movw	r3, #32797	; 0x801d
 801371a:	4413      	add	r3, r2
 801371c:	7819      	ldrb	r1, [r3, #0]
 801371e:	2320      	movs	r3, #32
 8013720:	2205      	movs	r2, #5
 8013722:	68f8      	ldr	r0, [r7, #12]
 8013724:	f000 f87c 	bl	8013820 <SCSI_SenseCode>
    return -1;
 8013728:	f04f 33ff 	mov.w	r3, #4294967295
 801372c:	e074      	b.n	8013818 <SCSI_RequestSense+0x128>
  }

  for (i = 0U; i < REQUEST_SENSE_DATA_LEN; i++)
 801372e:	2300      	movs	r3, #0
 8013730:	75fb      	strb	r3, [r7, #23]
 8013732:	e007      	b.n	8013744 <SCSI_RequestSense+0x54>
  {
    hmsc->bot_data[i] = 0U;
 8013734:	7dfb      	ldrb	r3, [r7, #23]
 8013736:	693a      	ldr	r2, [r7, #16]
 8013738:	4413      	add	r3, r2
 801373a:	2200      	movs	r2, #0
 801373c:	741a      	strb	r2, [r3, #16]
  for (i = 0U; i < REQUEST_SENSE_DATA_LEN; i++)
 801373e:	7dfb      	ldrb	r3, [r7, #23]
 8013740:	3301      	adds	r3, #1
 8013742:	75fb      	strb	r3, [r7, #23]
 8013744:	7dfb      	ldrb	r3, [r7, #23]
 8013746:	2b11      	cmp	r3, #17
 8013748:	d9f4      	bls.n	8013734 <SCSI_RequestSense+0x44>
  }

  hmsc->bot_data[0] = 0x70U;
 801374a:	693b      	ldr	r3, [r7, #16]
 801374c:	2270      	movs	r2, #112	; 0x70
 801374e:	741a      	strb	r2, [r3, #16]
  hmsc->bot_data[7] = REQUEST_SENSE_DATA_LEN - 6U;
 8013750:	693b      	ldr	r3, [r7, #16]
 8013752:	220c      	movs	r2, #12
 8013754:	75da      	strb	r2, [r3, #23]

  if ((hmsc->scsi_sense_head != hmsc->scsi_sense_tail))
 8013756:	693a      	ldr	r2, [r7, #16]
 8013758:	f248 0360 	movw	r3, #32864	; 0x8060
 801375c:	4413      	add	r3, r2
 801375e:	781a      	ldrb	r2, [r3, #0]
 8013760:	6939      	ldr	r1, [r7, #16]
 8013762:	f248 0361 	movw	r3, #32865	; 0x8061
 8013766:	440b      	add	r3, r1
 8013768:	781b      	ldrb	r3, [r3, #0]
 801376a:	429a      	cmp	r2, r3
 801376c:	d045      	beq.n	80137fa <SCSI_RequestSense+0x10a>
  {
    hmsc->bot_data[2] = (uint8_t)hmsc->scsi_sense[hmsc->scsi_sense_head].Skey;
 801376e:	693a      	ldr	r2, [r7, #16]
 8013770:	f248 0360 	movw	r3, #32864	; 0x8060
 8013774:	4413      	add	r3, r2
 8013776:	781b      	ldrb	r3, [r3, #0]
 8013778:	4619      	mov	r1, r3
 801377a:	693a      	ldr	r2, [r7, #16]
 801377c:	f241 0308 	movw	r3, #4104	; 0x1008
 8013780:	440b      	add	r3, r1
 8013782:	f812 2033 	ldrb.w	r2, [r2, r3, lsl #3]
 8013786:	693b      	ldr	r3, [r7, #16]
 8013788:	749a      	strb	r2, [r3, #18]
    hmsc->bot_data[12] = (uint8_t)hmsc->scsi_sense[hmsc->scsi_sense_head].w.b.ASC;
 801378a:	693a      	ldr	r2, [r7, #16]
 801378c:	f248 0360 	movw	r3, #32864	; 0x8060
 8013790:	4413      	add	r3, r2
 8013792:	781b      	ldrb	r3, [r3, #0]
 8013794:	4619      	mov	r1, r3
 8013796:	693a      	ldr	r2, [r7, #16]
 8013798:	f241 0308 	movw	r3, #4104	; 0x1008
 801379c:	440b      	add	r3, r1
 801379e:	00db      	lsls	r3, r3, #3
 80137a0:	4413      	add	r3, r2
 80137a2:	791a      	ldrb	r2, [r3, #4]
 80137a4:	693b      	ldr	r3, [r7, #16]
 80137a6:	771a      	strb	r2, [r3, #28]
    hmsc->bot_data[13] = (uint8_t)hmsc->scsi_sense[hmsc->scsi_sense_head].w.b.ASCQ;
 80137a8:	693a      	ldr	r2, [r7, #16]
 80137aa:	f248 0360 	movw	r3, #32864	; 0x8060
 80137ae:	4413      	add	r3, r2
 80137b0:	781b      	ldrb	r3, [r3, #0]
 80137b2:	4619      	mov	r1, r3
 80137b4:	693a      	ldr	r2, [r7, #16]
 80137b6:	f241 0308 	movw	r3, #4104	; 0x1008
 80137ba:	440b      	add	r3, r1
 80137bc:	00db      	lsls	r3, r3, #3
 80137be:	4413      	add	r3, r2
 80137c0:	795a      	ldrb	r2, [r3, #5]
 80137c2:	693b      	ldr	r3, [r7, #16]
 80137c4:	775a      	strb	r2, [r3, #29]
    hmsc->scsi_sense_head++;
 80137c6:	693a      	ldr	r2, [r7, #16]
 80137c8:	f248 0360 	movw	r3, #32864	; 0x8060
 80137cc:	4413      	add	r3, r2
 80137ce:	781b      	ldrb	r3, [r3, #0]
 80137d0:	3301      	adds	r3, #1
 80137d2:	b2d9      	uxtb	r1, r3
 80137d4:	693a      	ldr	r2, [r7, #16]
 80137d6:	f248 0360 	movw	r3, #32864	; 0x8060
 80137da:	4413      	add	r3, r2
 80137dc:	460a      	mov	r2, r1
 80137de:	701a      	strb	r2, [r3, #0]

    if (hmsc->scsi_sense_head == SENSE_LIST_DEEPTH)
 80137e0:	693a      	ldr	r2, [r7, #16]
 80137e2:	f248 0360 	movw	r3, #32864	; 0x8060
 80137e6:	4413      	add	r3, r2
 80137e8:	781b      	ldrb	r3, [r3, #0]
 80137ea:	2b04      	cmp	r3, #4
 80137ec:	d105      	bne.n	80137fa <SCSI_RequestSense+0x10a>
    {
      hmsc->scsi_sense_head = 0U;
 80137ee:	693a      	ldr	r2, [r7, #16]
 80137f0:	f248 0360 	movw	r3, #32864	; 0x8060
 80137f4:	4413      	add	r3, r2
 80137f6:	2200      	movs	r2, #0
 80137f8:	701a      	strb	r2, [r3, #0]
    }
  }

  hmsc->bot_data_length = REQUEST_SENSE_DATA_LEN;
 80137fa:	693b      	ldr	r3, [r7, #16]
 80137fc:	2212      	movs	r2, #18
 80137fe:	60da      	str	r2, [r3, #12]

  if (params[4] <= REQUEST_SENSE_DATA_LEN)
 8013800:	687b      	ldr	r3, [r7, #4]
 8013802:	3304      	adds	r3, #4
 8013804:	781b      	ldrb	r3, [r3, #0]
 8013806:	2b12      	cmp	r3, #18
 8013808:	d805      	bhi.n	8013816 <SCSI_RequestSense+0x126>
  {
    hmsc->bot_data_length = params[4];
 801380a:	687b      	ldr	r3, [r7, #4]
 801380c:	3304      	adds	r3, #4
 801380e:	781b      	ldrb	r3, [r3, #0]
 8013810:	461a      	mov	r2, r3
 8013812:	693b      	ldr	r3, [r7, #16]
 8013814:	60da      	str	r2, [r3, #12]
  }

  return 0;
 8013816:	2300      	movs	r3, #0
}
 8013818:	4618      	mov	r0, r3
 801381a:	3718      	adds	r7, #24
 801381c:	46bd      	mov	sp, r7
 801381e:	bd80      	pop	{r7, pc}

08013820 <SCSI_SenseCode>:
* @param  ASC: Additional Sense Code
* @retval none

*/
void SCSI_SenseCode(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t sKey, uint8_t ASC)
{
 8013820:	b480      	push	{r7}
 8013822:	b085      	sub	sp, #20
 8013824:	af00      	add	r7, sp, #0
 8013826:	6078      	str	r0, [r7, #4]
 8013828:	4608      	mov	r0, r1
 801382a:	4611      	mov	r1, r2
 801382c:	461a      	mov	r2, r3
 801382e:	4603      	mov	r3, r0
 8013830:	70fb      	strb	r3, [r7, #3]
 8013832:	460b      	mov	r3, r1
 8013834:	70bb      	strb	r3, [r7, #2]
 8013836:	4613      	mov	r3, r2
 8013838:	707b      	strb	r3, [r7, #1]
  UNUSED(lun);
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 801383a:	687b      	ldr	r3, [r7, #4]
 801383c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8013840:	60fb      	str	r3, [r7, #12]

  hmsc->scsi_sense[hmsc->scsi_sense_tail].Skey = sKey;
 8013842:	68fa      	ldr	r2, [r7, #12]
 8013844:	f248 0361 	movw	r3, #32865	; 0x8061
 8013848:	4413      	add	r3, r2
 801384a:	781b      	ldrb	r3, [r3, #0]
 801384c:	4619      	mov	r1, r3
 801384e:	68fa      	ldr	r2, [r7, #12]
 8013850:	f241 0308 	movw	r3, #4104	; 0x1008
 8013854:	440b      	add	r3, r1
 8013856:	78b9      	ldrb	r1, [r7, #2]
 8013858:	f802 1033 	strb.w	r1, [r2, r3, lsl #3]
  hmsc->scsi_sense[hmsc->scsi_sense_tail].w.b.ASC = ASC;
 801385c:	68fa      	ldr	r2, [r7, #12]
 801385e:	f248 0361 	movw	r3, #32865	; 0x8061
 8013862:	4413      	add	r3, r2
 8013864:	781b      	ldrb	r3, [r3, #0]
 8013866:	4619      	mov	r1, r3
 8013868:	68fa      	ldr	r2, [r7, #12]
 801386a:	f241 0308 	movw	r3, #4104	; 0x1008
 801386e:	440b      	add	r3, r1
 8013870:	00db      	lsls	r3, r3, #3
 8013872:	4413      	add	r3, r2
 8013874:	787a      	ldrb	r2, [r7, #1]
 8013876:	711a      	strb	r2, [r3, #4]
  hmsc->scsi_sense[hmsc->scsi_sense_tail].w.b.ASCQ = 0U;
 8013878:	68fa      	ldr	r2, [r7, #12]
 801387a:	f248 0361 	movw	r3, #32865	; 0x8061
 801387e:	4413      	add	r3, r2
 8013880:	781b      	ldrb	r3, [r3, #0]
 8013882:	4619      	mov	r1, r3
 8013884:	68fa      	ldr	r2, [r7, #12]
 8013886:	f241 0308 	movw	r3, #4104	; 0x1008
 801388a:	440b      	add	r3, r1
 801388c:	00db      	lsls	r3, r3, #3
 801388e:	4413      	add	r3, r2
 8013890:	2200      	movs	r2, #0
 8013892:	715a      	strb	r2, [r3, #5]
  hmsc->scsi_sense_tail++;
 8013894:	68fa      	ldr	r2, [r7, #12]
 8013896:	f248 0361 	movw	r3, #32865	; 0x8061
 801389a:	4413      	add	r3, r2
 801389c:	781b      	ldrb	r3, [r3, #0]
 801389e:	3301      	adds	r3, #1
 80138a0:	b2d9      	uxtb	r1, r3
 80138a2:	68fa      	ldr	r2, [r7, #12]
 80138a4:	f248 0361 	movw	r3, #32865	; 0x8061
 80138a8:	4413      	add	r3, r2
 80138aa:	460a      	mov	r2, r1
 80138ac:	701a      	strb	r2, [r3, #0]

  if (hmsc->scsi_sense_tail == SENSE_LIST_DEEPTH)
 80138ae:	68fa      	ldr	r2, [r7, #12]
 80138b0:	f248 0361 	movw	r3, #32865	; 0x8061
 80138b4:	4413      	add	r3, r2
 80138b6:	781b      	ldrb	r3, [r3, #0]
 80138b8:	2b04      	cmp	r3, #4
 80138ba:	d105      	bne.n	80138c8 <SCSI_SenseCode+0xa8>
  {
    hmsc->scsi_sense_tail = 0U;
 80138bc:	68fa      	ldr	r2, [r7, #12]
 80138be:	f248 0361 	movw	r3, #32865	; 0x8061
 80138c2:	4413      	add	r3, r2
 80138c4:	2200      	movs	r2, #0
 80138c6:	701a      	strb	r2, [r3, #0]
  }
}
 80138c8:	bf00      	nop
 80138ca:	3714      	adds	r7, #20
 80138cc:	46bd      	mov	sp, r7
 80138ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80138d2:	4770      	bx	lr

080138d4 <SCSI_StartStopUnit>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
static int8_t SCSI_StartStopUnit(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 80138d4:	b580      	push	{r7, lr}
 80138d6:	b086      	sub	sp, #24
 80138d8:	af00      	add	r7, sp, #0
 80138da:	60f8      	str	r0, [r7, #12]
 80138dc:	460b      	mov	r3, r1
 80138de:	607a      	str	r2, [r7, #4]
 80138e0:	72fb      	strb	r3, [r7, #11]
  UNUSED(lun);
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 80138e2:	68fb      	ldr	r3, [r7, #12]
 80138e4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80138e8:	617b      	str	r3, [r7, #20]

  if ((hmsc->scsi_medium_state == SCSI_MEDIUM_LOCKED) && ((params[4] & 0x3U) == 2U))
 80138ea:	697a      	ldr	r2, [r7, #20]
 80138ec:	f248 0362 	movw	r3, #32866	; 0x8062
 80138f0:	4413      	add	r3, r2
 80138f2:	781b      	ldrb	r3, [r3, #0]
 80138f4:	2b01      	cmp	r3, #1
 80138f6:	d10f      	bne.n	8013918 <SCSI_StartStopUnit+0x44>
 80138f8:	687b      	ldr	r3, [r7, #4]
 80138fa:	3304      	adds	r3, #4
 80138fc:	781b      	ldrb	r3, [r3, #0]
 80138fe:	f003 0303 	and.w	r3, r3, #3
 8013902:	2b02      	cmp	r3, #2
 8013904:	d108      	bne.n	8013918 <SCSI_StartStopUnit+0x44>
  {
    SCSI_SenseCode(pdev, lun, ILLEGAL_REQUEST, INVALID_FIELED_IN_COMMAND);
 8013906:	7af9      	ldrb	r1, [r7, #11]
 8013908:	2324      	movs	r3, #36	; 0x24
 801390a:	2205      	movs	r2, #5
 801390c:	68f8      	ldr	r0, [r7, #12]
 801390e:	f7ff ff87 	bl	8013820 <SCSI_SenseCode>

    return -1;
 8013912:	f04f 33ff 	mov.w	r3, #4294967295
 8013916:	e02c      	b.n	8013972 <SCSI_StartStopUnit+0x9e>
  }

  if ((params[4] & 0x3U) == 0x1U) /* START=1 */
 8013918:	687b      	ldr	r3, [r7, #4]
 801391a:	3304      	adds	r3, #4
 801391c:	781b      	ldrb	r3, [r3, #0]
 801391e:	f003 0303 	and.w	r3, r3, #3
 8013922:	2b01      	cmp	r3, #1
 8013924:	d106      	bne.n	8013934 <SCSI_StartStopUnit+0x60>
  {
    hmsc->scsi_medium_state = SCSI_MEDIUM_UNLOCKED;
 8013926:	697a      	ldr	r2, [r7, #20]
 8013928:	f248 0362 	movw	r3, #32866	; 0x8062
 801392c:	4413      	add	r3, r2
 801392e:	2200      	movs	r2, #0
 8013930:	701a      	strb	r2, [r3, #0]
 8013932:	e01a      	b.n	801396a <SCSI_StartStopUnit+0x96>
  }
  else if ((params[4] & 0x3U) == 0x2U) /* START=0 and LOEJ Load Eject=1 */
 8013934:	687b      	ldr	r3, [r7, #4]
 8013936:	3304      	adds	r3, #4
 8013938:	781b      	ldrb	r3, [r3, #0]
 801393a:	f003 0303 	and.w	r3, r3, #3
 801393e:	2b02      	cmp	r3, #2
 8013940:	d106      	bne.n	8013950 <SCSI_StartStopUnit+0x7c>
  {
    hmsc->scsi_medium_state = SCSI_MEDIUM_EJECTED;
 8013942:	697a      	ldr	r2, [r7, #20]
 8013944:	f248 0362 	movw	r3, #32866	; 0x8062
 8013948:	4413      	add	r3, r2
 801394a:	2202      	movs	r2, #2
 801394c:	701a      	strb	r2, [r3, #0]
 801394e:	e00c      	b.n	801396a <SCSI_StartStopUnit+0x96>
  }
  else if ((params[4] & 0x3U) == 0x3U) /* START=1 and LOEJ Load Eject=1 */
 8013950:	687b      	ldr	r3, [r7, #4]
 8013952:	3304      	adds	r3, #4
 8013954:	781b      	ldrb	r3, [r3, #0]
 8013956:	f003 0303 	and.w	r3, r3, #3
 801395a:	2b03      	cmp	r3, #3
 801395c:	d105      	bne.n	801396a <SCSI_StartStopUnit+0x96>
  {
    hmsc->scsi_medium_state = SCSI_MEDIUM_UNLOCKED;
 801395e:	697a      	ldr	r2, [r7, #20]
 8013960:	f248 0362 	movw	r3, #32866	; 0x8062
 8013964:	4413      	add	r3, r2
 8013966:	2200      	movs	r2, #0
 8013968:	701a      	strb	r2, [r3, #0]
  }
  else
  {
    /* .. */
  }
  hmsc->bot_data_length = 0U;
 801396a:	697b      	ldr	r3, [r7, #20]
 801396c:	2200      	movs	r2, #0
 801396e:	60da      	str	r2, [r3, #12]

  return 0;
 8013970:	2300      	movs	r3, #0
}
 8013972:	4618      	mov	r0, r3
 8013974:	3718      	adds	r7, #24
 8013976:	46bd      	mov	sp, r7
 8013978:	bd80      	pop	{r7, pc}

0801397a <SCSI_AllowPreventRemovable>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
static int8_t SCSI_AllowPreventRemovable(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 801397a:	b480      	push	{r7}
 801397c:	b087      	sub	sp, #28
 801397e:	af00      	add	r7, sp, #0
 8013980:	60f8      	str	r0, [r7, #12]
 8013982:	460b      	mov	r3, r1
 8013984:	607a      	str	r2, [r7, #4]
 8013986:	72fb      	strb	r3, [r7, #11]
  UNUSED(lun);
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8013988:	68fb      	ldr	r3, [r7, #12]
 801398a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 801398e:	617b      	str	r3, [r7, #20]

  if (params[4] == 0U)
 8013990:	687b      	ldr	r3, [r7, #4]
 8013992:	3304      	adds	r3, #4
 8013994:	781b      	ldrb	r3, [r3, #0]
 8013996:	2b00      	cmp	r3, #0
 8013998:	d106      	bne.n	80139a8 <SCSI_AllowPreventRemovable+0x2e>
  {
    hmsc->scsi_medium_state = SCSI_MEDIUM_UNLOCKED;
 801399a:	697a      	ldr	r2, [r7, #20]
 801399c:	f248 0362 	movw	r3, #32866	; 0x8062
 80139a0:	4413      	add	r3, r2
 80139a2:	2200      	movs	r2, #0
 80139a4:	701a      	strb	r2, [r3, #0]
 80139a6:	e005      	b.n	80139b4 <SCSI_AllowPreventRemovable+0x3a>
  }
  else
  {
    hmsc->scsi_medium_state = SCSI_MEDIUM_LOCKED;
 80139a8:	697a      	ldr	r2, [r7, #20]
 80139aa:	f248 0362 	movw	r3, #32866	; 0x8062
 80139ae:	4413      	add	r3, r2
 80139b0:	2201      	movs	r2, #1
 80139b2:	701a      	strb	r2, [r3, #0]
  }

  hmsc->bot_data_length = 0U;
 80139b4:	697b      	ldr	r3, [r7, #20]
 80139b6:	2200      	movs	r2, #0
 80139b8:	60da      	str	r2, [r3, #12]

  return 0;
 80139ba:	2300      	movs	r3, #0
}
 80139bc:	4618      	mov	r0, r3
 80139be:	371c      	adds	r7, #28
 80139c0:	46bd      	mov	sp, r7
 80139c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80139c6:	4770      	bx	lr

080139c8 <SCSI_Read10>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
static int8_t SCSI_Read10(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 80139c8:	b580      	push	{r7, lr}
 80139ca:	b086      	sub	sp, #24
 80139cc:	af00      	add	r7, sp, #0
 80139ce:	60f8      	str	r0, [r7, #12]
 80139d0:	460b      	mov	r3, r1
 80139d2:	607a      	str	r2, [r7, #4]
 80139d4:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 80139d6:	68fb      	ldr	r3, [r7, #12]
 80139d8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80139dc:	617b      	str	r3, [r7, #20]

  if (hmsc->bot_state == USBD_BOT_IDLE) /* Idle */
 80139de:	697b      	ldr	r3, [r7, #20]
 80139e0:	7a1b      	ldrb	r3, [r3, #8]
 80139e2:	2b00      	cmp	r3, #0
 80139e4:	f040 8094 	bne.w	8013b10 <SCSI_Read10+0x148>
  {
    /* case 10 : Ho <> Di */
    if ((hmsc->cbw.bmFlags & 0x80U) != 0x80U)
 80139e8:	697a      	ldr	r2, [r7, #20]
 80139ea:	f248 031c 	movw	r3, #32796	; 0x801c
 80139ee:	4413      	add	r3, r2
 80139f0:	781b      	ldrb	r3, [r3, #0]
 80139f2:	b25b      	sxtb	r3, r3
 80139f4:	2b00      	cmp	r3, #0
 80139f6:	db0c      	blt.n	8013a12 <SCSI_Read10+0x4a>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 80139f8:	697a      	ldr	r2, [r7, #20]
 80139fa:	f248 031d 	movw	r3, #32797	; 0x801d
 80139fe:	4413      	add	r3, r2
 8013a00:	7819      	ldrb	r1, [r3, #0]
 8013a02:	2320      	movs	r3, #32
 8013a04:	2205      	movs	r2, #5
 8013a06:	68f8      	ldr	r0, [r7, #12]
 8013a08:	f7ff ff0a 	bl	8013820 <SCSI_SenseCode>
      return -1;
 8013a0c:	f04f 33ff 	mov.w	r3, #4294967295
 8013a10:	e088      	b.n	8013b24 <SCSI_Read10+0x15c>
    }

    if (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED)
 8013a12:	697a      	ldr	r2, [r7, #20]
 8013a14:	f248 0362 	movw	r3, #32866	; 0x8062
 8013a18:	4413      	add	r3, r2
 8013a1a:	781b      	ldrb	r3, [r3, #0]
 8013a1c:	2b02      	cmp	r3, #2
 8013a1e:	d108      	bne.n	8013a32 <SCSI_Read10+0x6a>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 8013a20:	7af9      	ldrb	r1, [r7, #11]
 8013a22:	233a      	movs	r3, #58	; 0x3a
 8013a24:	2202      	movs	r2, #2
 8013a26:	68f8      	ldr	r0, [r7, #12]
 8013a28:	f7ff fefa 	bl	8013820 <SCSI_SenseCode>

      return -1;
 8013a2c:	f04f 33ff 	mov.w	r3, #4294967295
 8013a30:	e078      	b.n	8013b24 <SCSI_Read10+0x15c>
    }

    if (((USBD_StorageTypeDef *)pdev->pUserData)->IsReady(lun) != 0)
 8013a32:	68fb      	ldr	r3, [r7, #12]
 8013a34:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8013a38:	689b      	ldr	r3, [r3, #8]
 8013a3a:	7afa      	ldrb	r2, [r7, #11]
 8013a3c:	4610      	mov	r0, r2
 8013a3e:	4798      	blx	r3
 8013a40:	4603      	mov	r3, r0
 8013a42:	2b00      	cmp	r3, #0
 8013a44:	d008      	beq.n	8013a58 <SCSI_Read10+0x90>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 8013a46:	7af9      	ldrb	r1, [r7, #11]
 8013a48:	233a      	movs	r3, #58	; 0x3a
 8013a4a:	2202      	movs	r2, #2
 8013a4c:	68f8      	ldr	r0, [r7, #12]
 8013a4e:	f7ff fee7 	bl	8013820 <SCSI_SenseCode>
      return -1;
 8013a52:	f04f 33ff 	mov.w	r3, #4294967295
 8013a56:	e065      	b.n	8013b24 <SCSI_Read10+0x15c>
    }

    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 8013a58:	687b      	ldr	r3, [r7, #4]
 8013a5a:	3302      	adds	r3, #2
 8013a5c:	781b      	ldrb	r3, [r3, #0]
 8013a5e:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[3] << 16) |
 8013a60:	687b      	ldr	r3, [r7, #4]
 8013a62:	3303      	adds	r3, #3
 8013a64:	781b      	ldrb	r3, [r3, #0]
 8013a66:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 8013a68:	431a      	orrs	r2, r3
                          ((uint32_t)params[4] <<  8) |
 8013a6a:	687b      	ldr	r3, [r7, #4]
 8013a6c:	3304      	adds	r3, #4
 8013a6e:	781b      	ldrb	r3, [r3, #0]
 8013a70:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[3] << 16) |
 8013a72:	4313      	orrs	r3, r2
                          (uint32_t)params[5];
 8013a74:	687a      	ldr	r2, [r7, #4]
 8013a76:	3205      	adds	r2, #5
 8013a78:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[4] <<  8) |
 8013a7a:	431a      	orrs	r2, r3
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 8013a7c:	6979      	ldr	r1, [r7, #20]
 8013a7e:	f248 036c 	movw	r3, #32876	; 0x806c
 8013a82:	440b      	add	r3, r1
 8013a84:	601a      	str	r2, [r3, #0]

    hmsc->scsi_blk_len = ((uint32_t)params[7] <<  8) | (uint32_t)params[8];
 8013a86:	687b      	ldr	r3, [r7, #4]
 8013a88:	3307      	adds	r3, #7
 8013a8a:	781b      	ldrb	r3, [r3, #0]
 8013a8c:	021b      	lsls	r3, r3, #8
 8013a8e:	687a      	ldr	r2, [r7, #4]
 8013a90:	3208      	adds	r2, #8
 8013a92:	7812      	ldrb	r2, [r2, #0]
 8013a94:	431a      	orrs	r2, r3
 8013a96:	6979      	ldr	r1, [r7, #20]
 8013a98:	f248 0370 	movw	r3, #32880	; 0x8070
 8013a9c:	440b      	add	r3, r1
 8013a9e:	601a      	str	r2, [r3, #0]

    if (SCSI_CheckAddressRange(pdev, lun, hmsc->scsi_blk_addr,
 8013aa0:	697a      	ldr	r2, [r7, #20]
 8013aa2:	f248 036c 	movw	r3, #32876	; 0x806c
 8013aa6:	4413      	add	r3, r2
 8013aa8:	6818      	ldr	r0, [r3, #0]
 8013aaa:	697a      	ldr	r2, [r7, #20]
 8013aac:	f248 0370 	movw	r3, #32880	; 0x8070
 8013ab0:	4413      	add	r3, r2
 8013ab2:	681b      	ldr	r3, [r3, #0]
 8013ab4:	7af9      	ldrb	r1, [r7, #11]
 8013ab6:	4602      	mov	r2, r0
 8013ab8:	68f8      	ldr	r0, [r7, #12]
 8013aba:	f000 faeb 	bl	8014094 <SCSI_CheckAddressRange>
 8013abe:	4603      	mov	r3, r0
 8013ac0:	2b00      	cmp	r3, #0
 8013ac2:	da02      	bge.n	8013aca <SCSI_Read10+0x102>
                               hmsc->scsi_blk_len) < 0)
    {
      return -1; /* error */
 8013ac4:	f04f 33ff 	mov.w	r3, #4294967295
 8013ac8:	e02c      	b.n	8013b24 <SCSI_Read10+0x15c>
    }

    /* cases 4,5 : Hi <> Dn */
    if (hmsc->cbw.dDataLength != (hmsc->scsi_blk_len * hmsc->scsi_blk_size))
 8013aca:	697a      	ldr	r2, [r7, #20]
 8013acc:	f248 0318 	movw	r3, #32792	; 0x8018
 8013ad0:	4413      	add	r3, r2
 8013ad2:	681a      	ldr	r2, [r3, #0]
 8013ad4:	6979      	ldr	r1, [r7, #20]
 8013ad6:	f248 0370 	movw	r3, #32880	; 0x8070
 8013ada:	440b      	add	r3, r1
 8013adc:	6819      	ldr	r1, [r3, #0]
 8013ade:	6978      	ldr	r0, [r7, #20]
 8013ae0:	f248 0364 	movw	r3, #32868	; 0x8064
 8013ae4:	4403      	add	r3, r0
 8013ae6:	881b      	ldrh	r3, [r3, #0]
 8013ae8:	fb03 f301 	mul.w	r3, r3, r1
 8013aec:	429a      	cmp	r2, r3
 8013aee:	d00c      	beq.n	8013b0a <SCSI_Read10+0x142>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8013af0:	697a      	ldr	r2, [r7, #20]
 8013af2:	f248 031d 	movw	r3, #32797	; 0x801d
 8013af6:	4413      	add	r3, r2
 8013af8:	7819      	ldrb	r1, [r3, #0]
 8013afa:	2320      	movs	r3, #32
 8013afc:	2205      	movs	r2, #5
 8013afe:	68f8      	ldr	r0, [r7, #12]
 8013b00:	f7ff fe8e 	bl	8013820 <SCSI_SenseCode>
      return -1;
 8013b04:	f04f 33ff 	mov.w	r3, #4294967295
 8013b08:	e00c      	b.n	8013b24 <SCSI_Read10+0x15c>
    }

    hmsc->bot_state = USBD_BOT_DATA_IN;
 8013b0a:	697b      	ldr	r3, [r7, #20]
 8013b0c:	2202      	movs	r2, #2
 8013b0e:	721a      	strb	r2, [r3, #8]
  }
  hmsc->bot_data_length = MSC_MEDIA_PACKET;
 8013b10:	697b      	ldr	r3, [r7, #20]
 8013b12:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8013b16:	60da      	str	r2, [r3, #12]

  return SCSI_ProcessRead(pdev, lun);
 8013b18:	7afb      	ldrb	r3, [r7, #11]
 8013b1a:	4619      	mov	r1, r3
 8013b1c:	68f8      	ldr	r0, [r7, #12]
 8013b1e:	f000 fadd 	bl	80140dc <SCSI_ProcessRead>
 8013b22:	4603      	mov	r3, r0
}
 8013b24:	4618      	mov	r0, r3
 8013b26:	3718      	adds	r7, #24
 8013b28:	46bd      	mov	sp, r7
 8013b2a:	bd80      	pop	{r7, pc}

08013b2c <SCSI_Read12>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
static int8_t SCSI_Read12(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8013b2c:	b580      	push	{r7, lr}
 8013b2e:	b086      	sub	sp, #24
 8013b30:	af00      	add	r7, sp, #0
 8013b32:	60f8      	str	r0, [r7, #12]
 8013b34:	460b      	mov	r3, r1
 8013b36:	607a      	str	r2, [r7, #4]
 8013b38:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8013b3a:	68fb      	ldr	r3, [r7, #12]
 8013b3c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8013b40:	617b      	str	r3, [r7, #20]

  if (hmsc->bot_state == USBD_BOT_IDLE) /* Idle */
 8013b42:	697b      	ldr	r3, [r7, #20]
 8013b44:	7a1b      	ldrb	r3, [r3, #8]
 8013b46:	2b00      	cmp	r3, #0
 8013b48:	f040 809e 	bne.w	8013c88 <SCSI_Read12+0x15c>
  {
    /* case 10 : Ho <> Di */
    if ((hmsc->cbw.bmFlags & 0x80U) != 0x80U)
 8013b4c:	697a      	ldr	r2, [r7, #20]
 8013b4e:	f248 031c 	movw	r3, #32796	; 0x801c
 8013b52:	4413      	add	r3, r2
 8013b54:	781b      	ldrb	r3, [r3, #0]
 8013b56:	b25b      	sxtb	r3, r3
 8013b58:	2b00      	cmp	r3, #0
 8013b5a:	db0c      	blt.n	8013b76 <SCSI_Read12+0x4a>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8013b5c:	697a      	ldr	r2, [r7, #20]
 8013b5e:	f248 031d 	movw	r3, #32797	; 0x801d
 8013b62:	4413      	add	r3, r2
 8013b64:	7819      	ldrb	r1, [r3, #0]
 8013b66:	2320      	movs	r3, #32
 8013b68:	2205      	movs	r2, #5
 8013b6a:	68f8      	ldr	r0, [r7, #12]
 8013b6c:	f7ff fe58 	bl	8013820 <SCSI_SenseCode>
      return -1;
 8013b70:	f04f 33ff 	mov.w	r3, #4294967295
 8013b74:	e092      	b.n	8013c9c <SCSI_Read12+0x170>
    }

    if (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED)
 8013b76:	697a      	ldr	r2, [r7, #20]
 8013b78:	f248 0362 	movw	r3, #32866	; 0x8062
 8013b7c:	4413      	add	r3, r2
 8013b7e:	781b      	ldrb	r3, [r3, #0]
 8013b80:	2b02      	cmp	r3, #2
 8013b82:	d108      	bne.n	8013b96 <SCSI_Read12+0x6a>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 8013b84:	7af9      	ldrb	r1, [r7, #11]
 8013b86:	233a      	movs	r3, #58	; 0x3a
 8013b88:	2202      	movs	r2, #2
 8013b8a:	68f8      	ldr	r0, [r7, #12]
 8013b8c:	f7ff fe48 	bl	8013820 <SCSI_SenseCode>
      return -1;
 8013b90:	f04f 33ff 	mov.w	r3, #4294967295
 8013b94:	e082      	b.n	8013c9c <SCSI_Read12+0x170>
    }

    if (((USBD_StorageTypeDef *)pdev->pUserData)->IsReady(lun) != 0)
 8013b96:	68fb      	ldr	r3, [r7, #12]
 8013b98:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8013b9c:	689b      	ldr	r3, [r3, #8]
 8013b9e:	7afa      	ldrb	r2, [r7, #11]
 8013ba0:	4610      	mov	r0, r2
 8013ba2:	4798      	blx	r3
 8013ba4:	4603      	mov	r3, r0
 8013ba6:	2b00      	cmp	r3, #0
 8013ba8:	d008      	beq.n	8013bbc <SCSI_Read12+0x90>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 8013baa:	7af9      	ldrb	r1, [r7, #11]
 8013bac:	233a      	movs	r3, #58	; 0x3a
 8013bae:	2202      	movs	r2, #2
 8013bb0:	68f8      	ldr	r0, [r7, #12]
 8013bb2:	f7ff fe35 	bl	8013820 <SCSI_SenseCode>
      return -1;
 8013bb6:	f04f 33ff 	mov.w	r3, #4294967295
 8013bba:	e06f      	b.n	8013c9c <SCSI_Read12+0x170>
    }

    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 8013bbc:	687b      	ldr	r3, [r7, #4]
 8013bbe:	3302      	adds	r3, #2
 8013bc0:	781b      	ldrb	r3, [r3, #0]
 8013bc2:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[3] << 16) |
 8013bc4:	687b      	ldr	r3, [r7, #4]
 8013bc6:	3303      	adds	r3, #3
 8013bc8:	781b      	ldrb	r3, [r3, #0]
 8013bca:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 8013bcc:	431a      	orrs	r2, r3
                          ((uint32_t)params[4] <<  8) |
 8013bce:	687b      	ldr	r3, [r7, #4]
 8013bd0:	3304      	adds	r3, #4
 8013bd2:	781b      	ldrb	r3, [r3, #0]
 8013bd4:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[3] << 16) |
 8013bd6:	4313      	orrs	r3, r2
                          (uint32_t)params[5];
 8013bd8:	687a      	ldr	r2, [r7, #4]
 8013bda:	3205      	adds	r2, #5
 8013bdc:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[4] <<  8) |
 8013bde:	431a      	orrs	r2, r3
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 8013be0:	6979      	ldr	r1, [r7, #20]
 8013be2:	f248 036c 	movw	r3, #32876	; 0x806c
 8013be6:	440b      	add	r3, r1
 8013be8:	601a      	str	r2, [r3, #0]

    hmsc->scsi_blk_len = ((uint32_t)params[6] << 24) |
 8013bea:	687b      	ldr	r3, [r7, #4]
 8013bec:	3306      	adds	r3, #6
 8013bee:	781b      	ldrb	r3, [r3, #0]
 8013bf0:	061a      	lsls	r2, r3, #24
                         ((uint32_t)params[7] << 16) |
 8013bf2:	687b      	ldr	r3, [r7, #4]
 8013bf4:	3307      	adds	r3, #7
 8013bf6:	781b      	ldrb	r3, [r3, #0]
 8013bf8:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_len = ((uint32_t)params[6] << 24) |
 8013bfa:	431a      	orrs	r2, r3
                         ((uint32_t)params[8] << 8) |
 8013bfc:	687b      	ldr	r3, [r7, #4]
 8013bfe:	3308      	adds	r3, #8
 8013c00:	781b      	ldrb	r3, [r3, #0]
 8013c02:	021b      	lsls	r3, r3, #8
                         ((uint32_t)params[7] << 16) |
 8013c04:	4313      	orrs	r3, r2
                         (uint32_t)params[9];
 8013c06:	687a      	ldr	r2, [r7, #4]
 8013c08:	3209      	adds	r2, #9
 8013c0a:	7812      	ldrb	r2, [r2, #0]
                         ((uint32_t)params[8] << 8) |
 8013c0c:	431a      	orrs	r2, r3
    hmsc->scsi_blk_len = ((uint32_t)params[6] << 24) |
 8013c0e:	6979      	ldr	r1, [r7, #20]
 8013c10:	f248 0370 	movw	r3, #32880	; 0x8070
 8013c14:	440b      	add	r3, r1
 8013c16:	601a      	str	r2, [r3, #0]

    if (SCSI_CheckAddressRange(pdev, lun, hmsc->scsi_blk_addr,
 8013c18:	697a      	ldr	r2, [r7, #20]
 8013c1a:	f248 036c 	movw	r3, #32876	; 0x806c
 8013c1e:	4413      	add	r3, r2
 8013c20:	6818      	ldr	r0, [r3, #0]
 8013c22:	697a      	ldr	r2, [r7, #20]
 8013c24:	f248 0370 	movw	r3, #32880	; 0x8070
 8013c28:	4413      	add	r3, r2
 8013c2a:	681b      	ldr	r3, [r3, #0]
 8013c2c:	7af9      	ldrb	r1, [r7, #11]
 8013c2e:	4602      	mov	r2, r0
 8013c30:	68f8      	ldr	r0, [r7, #12]
 8013c32:	f000 fa2f 	bl	8014094 <SCSI_CheckAddressRange>
 8013c36:	4603      	mov	r3, r0
 8013c38:	2b00      	cmp	r3, #0
 8013c3a:	da02      	bge.n	8013c42 <SCSI_Read12+0x116>
                               hmsc->scsi_blk_len) < 0)
    {
      return -1; /* error */
 8013c3c:	f04f 33ff 	mov.w	r3, #4294967295
 8013c40:	e02c      	b.n	8013c9c <SCSI_Read12+0x170>
    }

    /* cases 4,5 : Hi <> Dn */
    if (hmsc->cbw.dDataLength != (hmsc->scsi_blk_len * hmsc->scsi_blk_size))
 8013c42:	697a      	ldr	r2, [r7, #20]
 8013c44:	f248 0318 	movw	r3, #32792	; 0x8018
 8013c48:	4413      	add	r3, r2
 8013c4a:	681a      	ldr	r2, [r3, #0]
 8013c4c:	6979      	ldr	r1, [r7, #20]
 8013c4e:	f248 0370 	movw	r3, #32880	; 0x8070
 8013c52:	440b      	add	r3, r1
 8013c54:	6819      	ldr	r1, [r3, #0]
 8013c56:	6978      	ldr	r0, [r7, #20]
 8013c58:	f248 0364 	movw	r3, #32868	; 0x8064
 8013c5c:	4403      	add	r3, r0
 8013c5e:	881b      	ldrh	r3, [r3, #0]
 8013c60:	fb03 f301 	mul.w	r3, r3, r1
 8013c64:	429a      	cmp	r2, r3
 8013c66:	d00c      	beq.n	8013c82 <SCSI_Read12+0x156>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8013c68:	697a      	ldr	r2, [r7, #20]
 8013c6a:	f248 031d 	movw	r3, #32797	; 0x801d
 8013c6e:	4413      	add	r3, r2
 8013c70:	7819      	ldrb	r1, [r3, #0]
 8013c72:	2320      	movs	r3, #32
 8013c74:	2205      	movs	r2, #5
 8013c76:	68f8      	ldr	r0, [r7, #12]
 8013c78:	f7ff fdd2 	bl	8013820 <SCSI_SenseCode>
      return -1;
 8013c7c:	f04f 33ff 	mov.w	r3, #4294967295
 8013c80:	e00c      	b.n	8013c9c <SCSI_Read12+0x170>
    }

    hmsc->bot_state = USBD_BOT_DATA_IN;
 8013c82:	697b      	ldr	r3, [r7, #20]
 8013c84:	2202      	movs	r2, #2
 8013c86:	721a      	strb	r2, [r3, #8]
  }
  hmsc->bot_data_length = MSC_MEDIA_PACKET;
 8013c88:	697b      	ldr	r3, [r7, #20]
 8013c8a:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8013c8e:	60da      	str	r2, [r3, #12]

  return SCSI_ProcessRead(pdev, lun);
 8013c90:	7afb      	ldrb	r3, [r7, #11]
 8013c92:	4619      	mov	r1, r3
 8013c94:	68f8      	ldr	r0, [r7, #12]
 8013c96:	f000 fa21 	bl	80140dc <SCSI_ProcessRead>
 8013c9a:	4603      	mov	r3, r0
}
 8013c9c:	4618      	mov	r0, r3
 8013c9e:	3718      	adds	r7, #24
 8013ca0:	46bd      	mov	sp, r7
 8013ca2:	bd80      	pop	{r7, pc}

08013ca4 <SCSI_Write10>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
static int8_t SCSI_Write10(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8013ca4:	b580      	push	{r7, lr}
 8013ca6:	b086      	sub	sp, #24
 8013ca8:	af00      	add	r7, sp, #0
 8013caa:	60f8      	str	r0, [r7, #12]
 8013cac:	460b      	mov	r3, r1
 8013cae:	607a      	str	r2, [r7, #4]
 8013cb0:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8013cb2:	68fb      	ldr	r3, [r7, #12]
 8013cb4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8013cb8:	617b      	str	r3, [r7, #20]
  uint32_t len;

  if (hmsc->bot_state == USBD_BOT_IDLE) /* Idle */
 8013cba:	697b      	ldr	r3, [r7, #20]
 8013cbc:	7a1b      	ldrb	r3, [r3, #8]
 8013cbe:	2b00      	cmp	r3, #0
 8013cc0:	f040 80be 	bne.w	8013e40 <SCSI_Write10+0x19c>
  {
    if (hmsc->cbw.dDataLength == 0U)
 8013cc4:	697a      	ldr	r2, [r7, #20]
 8013cc6:	f248 0318 	movw	r3, #32792	; 0x8018
 8013cca:	4413      	add	r3, r2
 8013ccc:	681b      	ldr	r3, [r3, #0]
 8013cce:	2b00      	cmp	r3, #0
 8013cd0:	d10c      	bne.n	8013cec <SCSI_Write10+0x48>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8013cd2:	697a      	ldr	r2, [r7, #20]
 8013cd4:	f248 031d 	movw	r3, #32797	; 0x801d
 8013cd8:	4413      	add	r3, r2
 8013cda:	7819      	ldrb	r1, [r3, #0]
 8013cdc:	2320      	movs	r3, #32
 8013cde:	2205      	movs	r2, #5
 8013ce0:	68f8      	ldr	r0, [r7, #12]
 8013ce2:	f7ff fd9d 	bl	8013820 <SCSI_SenseCode>
      return -1;
 8013ce6:	f04f 33ff 	mov.w	r3, #4294967295
 8013cea:	e0af      	b.n	8013e4c <SCSI_Write10+0x1a8>
    }

    /* case 8 : Hi <> Do */
    if ((hmsc->cbw.bmFlags & 0x80U) == 0x80U)
 8013cec:	697a      	ldr	r2, [r7, #20]
 8013cee:	f248 031c 	movw	r3, #32796	; 0x801c
 8013cf2:	4413      	add	r3, r2
 8013cf4:	781b      	ldrb	r3, [r3, #0]
 8013cf6:	b25b      	sxtb	r3, r3
 8013cf8:	2b00      	cmp	r3, #0
 8013cfa:	da0c      	bge.n	8013d16 <SCSI_Write10+0x72>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8013cfc:	697a      	ldr	r2, [r7, #20]
 8013cfe:	f248 031d 	movw	r3, #32797	; 0x801d
 8013d02:	4413      	add	r3, r2
 8013d04:	7819      	ldrb	r1, [r3, #0]
 8013d06:	2320      	movs	r3, #32
 8013d08:	2205      	movs	r2, #5
 8013d0a:	68f8      	ldr	r0, [r7, #12]
 8013d0c:	f7ff fd88 	bl	8013820 <SCSI_SenseCode>
      return -1;
 8013d10:	f04f 33ff 	mov.w	r3, #4294967295
 8013d14:	e09a      	b.n	8013e4c <SCSI_Write10+0x1a8>
    }

    /* Check whether Media is ready */
    if (((USBD_StorageTypeDef *)pdev->pUserData)->IsReady(lun) != 0)
 8013d16:	68fb      	ldr	r3, [r7, #12]
 8013d18:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8013d1c:	689b      	ldr	r3, [r3, #8]
 8013d1e:	7afa      	ldrb	r2, [r7, #11]
 8013d20:	4610      	mov	r0, r2
 8013d22:	4798      	blx	r3
 8013d24:	4603      	mov	r3, r0
 8013d26:	2b00      	cmp	r3, #0
 8013d28:	d008      	beq.n	8013d3c <SCSI_Write10+0x98>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 8013d2a:	7af9      	ldrb	r1, [r7, #11]
 8013d2c:	233a      	movs	r3, #58	; 0x3a
 8013d2e:	2202      	movs	r2, #2
 8013d30:	68f8      	ldr	r0, [r7, #12]
 8013d32:	f7ff fd75 	bl	8013820 <SCSI_SenseCode>
      return -1;
 8013d36:	f04f 33ff 	mov.w	r3, #4294967295
 8013d3a:	e087      	b.n	8013e4c <SCSI_Write10+0x1a8>
    }

    /* Check If media is write-protected */
    if (((USBD_StorageTypeDef *)pdev->pUserData)->IsWriteProtected(lun) != 0)
 8013d3c:	68fb      	ldr	r3, [r7, #12]
 8013d3e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8013d42:	68db      	ldr	r3, [r3, #12]
 8013d44:	7afa      	ldrb	r2, [r7, #11]
 8013d46:	4610      	mov	r0, r2
 8013d48:	4798      	blx	r3
 8013d4a:	4603      	mov	r3, r0
 8013d4c:	2b00      	cmp	r3, #0
 8013d4e:	d008      	beq.n	8013d62 <SCSI_Write10+0xbe>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, WRITE_PROTECTED);
 8013d50:	7af9      	ldrb	r1, [r7, #11]
 8013d52:	2327      	movs	r3, #39	; 0x27
 8013d54:	2202      	movs	r2, #2
 8013d56:	68f8      	ldr	r0, [r7, #12]
 8013d58:	f7ff fd62 	bl	8013820 <SCSI_SenseCode>
      return -1;
 8013d5c:	f04f 33ff 	mov.w	r3, #4294967295
 8013d60:	e074      	b.n	8013e4c <SCSI_Write10+0x1a8>
    }

    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 8013d62:	687b      	ldr	r3, [r7, #4]
 8013d64:	3302      	adds	r3, #2
 8013d66:	781b      	ldrb	r3, [r3, #0]
 8013d68:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[3] << 16) |
 8013d6a:	687b      	ldr	r3, [r7, #4]
 8013d6c:	3303      	adds	r3, #3
 8013d6e:	781b      	ldrb	r3, [r3, #0]
 8013d70:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 8013d72:	431a      	orrs	r2, r3
                          ((uint32_t)params[4] << 8) |
 8013d74:	687b      	ldr	r3, [r7, #4]
 8013d76:	3304      	adds	r3, #4
 8013d78:	781b      	ldrb	r3, [r3, #0]
 8013d7a:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[3] << 16) |
 8013d7c:	4313      	orrs	r3, r2
                          (uint32_t)params[5];
 8013d7e:	687a      	ldr	r2, [r7, #4]
 8013d80:	3205      	adds	r2, #5
 8013d82:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[4] << 8) |
 8013d84:	431a      	orrs	r2, r3
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 8013d86:	6979      	ldr	r1, [r7, #20]
 8013d88:	f248 036c 	movw	r3, #32876	; 0x806c
 8013d8c:	440b      	add	r3, r1
 8013d8e:	601a      	str	r2, [r3, #0]

    hmsc->scsi_blk_len = ((uint32_t)params[7] << 8) |
 8013d90:	687b      	ldr	r3, [r7, #4]
 8013d92:	3307      	adds	r3, #7
 8013d94:	781b      	ldrb	r3, [r3, #0]
 8013d96:	021b      	lsls	r3, r3, #8
                         (uint32_t)params[8];
 8013d98:	687a      	ldr	r2, [r7, #4]
 8013d9a:	3208      	adds	r2, #8
 8013d9c:	7812      	ldrb	r2, [r2, #0]
    hmsc->scsi_blk_len = ((uint32_t)params[7] << 8) |
 8013d9e:	431a      	orrs	r2, r3
 8013da0:	6979      	ldr	r1, [r7, #20]
 8013da2:	f248 0370 	movw	r3, #32880	; 0x8070
 8013da6:	440b      	add	r3, r1
 8013da8:	601a      	str	r2, [r3, #0]

    /* check if LBA address is in the right range */
    if (SCSI_CheckAddressRange(pdev, lun, hmsc->scsi_blk_addr,
 8013daa:	697a      	ldr	r2, [r7, #20]
 8013dac:	f248 036c 	movw	r3, #32876	; 0x806c
 8013db0:	4413      	add	r3, r2
 8013db2:	6818      	ldr	r0, [r3, #0]
 8013db4:	697a      	ldr	r2, [r7, #20]
 8013db6:	f248 0370 	movw	r3, #32880	; 0x8070
 8013dba:	4413      	add	r3, r2
 8013dbc:	681b      	ldr	r3, [r3, #0]
 8013dbe:	7af9      	ldrb	r1, [r7, #11]
 8013dc0:	4602      	mov	r2, r0
 8013dc2:	68f8      	ldr	r0, [r7, #12]
 8013dc4:	f000 f966 	bl	8014094 <SCSI_CheckAddressRange>
 8013dc8:	4603      	mov	r3, r0
 8013dca:	2b00      	cmp	r3, #0
 8013dcc:	da02      	bge.n	8013dd4 <SCSI_Write10+0x130>
                               hmsc->scsi_blk_len) < 0)
    {
      return -1; /* error */
 8013dce:	f04f 33ff 	mov.w	r3, #4294967295
 8013dd2:	e03b      	b.n	8013e4c <SCSI_Write10+0x1a8>
    }

    len = hmsc->scsi_blk_len * hmsc->scsi_blk_size;
 8013dd4:	697a      	ldr	r2, [r7, #20]
 8013dd6:	f248 0370 	movw	r3, #32880	; 0x8070
 8013dda:	4413      	add	r3, r2
 8013ddc:	681a      	ldr	r2, [r3, #0]
 8013dde:	6979      	ldr	r1, [r7, #20]
 8013de0:	f248 0364 	movw	r3, #32868	; 0x8064
 8013de4:	440b      	add	r3, r1
 8013de6:	881b      	ldrh	r3, [r3, #0]
 8013de8:	fb03 f302 	mul.w	r3, r3, r2
 8013dec:	613b      	str	r3, [r7, #16]

    /* cases 3,11,13 : Hn,Ho <> D0 */
    if (hmsc->cbw.dDataLength != len)
 8013dee:	697a      	ldr	r2, [r7, #20]
 8013df0:	f248 0318 	movw	r3, #32792	; 0x8018
 8013df4:	4413      	add	r3, r2
 8013df6:	681b      	ldr	r3, [r3, #0]
 8013df8:	693a      	ldr	r2, [r7, #16]
 8013dfa:	429a      	cmp	r2, r3
 8013dfc:	d00c      	beq.n	8013e18 <SCSI_Write10+0x174>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8013dfe:	697a      	ldr	r2, [r7, #20]
 8013e00:	f248 031d 	movw	r3, #32797	; 0x801d
 8013e04:	4413      	add	r3, r2
 8013e06:	7819      	ldrb	r1, [r3, #0]
 8013e08:	2320      	movs	r3, #32
 8013e0a:	2205      	movs	r2, #5
 8013e0c:	68f8      	ldr	r0, [r7, #12]
 8013e0e:	f7ff fd07 	bl	8013820 <SCSI_SenseCode>
      return -1;
 8013e12:	f04f 33ff 	mov.w	r3, #4294967295
 8013e16:	e019      	b.n	8013e4c <SCSI_Write10+0x1a8>
    }

    len = MIN(len, MSC_MEDIA_PACKET);
 8013e18:	693b      	ldr	r3, [r7, #16]
 8013e1a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8013e1e:	bf28      	it	cs
 8013e20:	f44f 4300 	movcs.w	r3, #32768	; 0x8000
 8013e24:	613b      	str	r3, [r7, #16]

    /* Prepare EP to receive first data packet */
    hmsc->bot_state = USBD_BOT_DATA_OUT;
 8013e26:	697b      	ldr	r3, [r7, #20]
 8013e28:	2201      	movs	r2, #1
 8013e2a:	721a      	strb	r2, [r3, #8]
    (void)USBD_LL_PrepareReceive(pdev, MSC_EPOUT_ADDR, hmsc->bot_data, len);
 8013e2c:	697b      	ldr	r3, [r7, #20]
 8013e2e:	f103 0210 	add.w	r2, r3, #16
 8013e32:	693b      	ldr	r3, [r7, #16]
 8013e34:	2101      	movs	r1, #1
 8013e36:	68f8      	ldr	r0, [r7, #12]
 8013e38:	f004 fb19 	bl	801846e <USBD_LL_PrepareReceive>
  else /* Write Process ongoing */
  {
    return SCSI_ProcessWrite(pdev, lun);
  }

  return 0;
 8013e3c:	2300      	movs	r3, #0
 8013e3e:	e005      	b.n	8013e4c <SCSI_Write10+0x1a8>
    return SCSI_ProcessWrite(pdev, lun);
 8013e40:	7afb      	ldrb	r3, [r7, #11]
 8013e42:	4619      	mov	r1, r3
 8013e44:	68f8      	ldr	r0, [r7, #12]
 8013e46:	f000 f9d7 	bl	80141f8 <SCSI_ProcessWrite>
 8013e4a:	4603      	mov	r3, r0
}
 8013e4c:	4618      	mov	r0, r3
 8013e4e:	3718      	adds	r7, #24
 8013e50:	46bd      	mov	sp, r7
 8013e52:	bd80      	pop	{r7, pc}

08013e54 <SCSI_Write12>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
static int8_t SCSI_Write12(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8013e54:	b580      	push	{r7, lr}
 8013e56:	b086      	sub	sp, #24
 8013e58:	af00      	add	r7, sp, #0
 8013e5a:	60f8      	str	r0, [r7, #12]
 8013e5c:	460b      	mov	r3, r1
 8013e5e:	607a      	str	r2, [r7, #4]
 8013e60:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8013e62:	68fb      	ldr	r3, [r7, #12]
 8013e64:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8013e68:	617b      	str	r3, [r7, #20]
  uint32_t len;

  if (hmsc->bot_state == USBD_BOT_IDLE) /* Idle */
 8013e6a:	697b      	ldr	r3, [r7, #20]
 8013e6c:	7a1b      	ldrb	r3, [r3, #8]
 8013e6e:	2b00      	cmp	r3, #0
 8013e70:	f040 80ce 	bne.w	8014010 <SCSI_Write12+0x1bc>
  {
    if (hmsc->cbw.dDataLength == 0U)
 8013e74:	697a      	ldr	r2, [r7, #20]
 8013e76:	f248 0318 	movw	r3, #32792	; 0x8018
 8013e7a:	4413      	add	r3, r2
 8013e7c:	681b      	ldr	r3, [r3, #0]
 8013e7e:	2b00      	cmp	r3, #0
 8013e80:	d10c      	bne.n	8013e9c <SCSI_Write12+0x48>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8013e82:	697a      	ldr	r2, [r7, #20]
 8013e84:	f248 031d 	movw	r3, #32797	; 0x801d
 8013e88:	4413      	add	r3, r2
 8013e8a:	7819      	ldrb	r1, [r3, #0]
 8013e8c:	2320      	movs	r3, #32
 8013e8e:	2205      	movs	r2, #5
 8013e90:	68f8      	ldr	r0, [r7, #12]
 8013e92:	f7ff fcc5 	bl	8013820 <SCSI_SenseCode>
      return -1;
 8013e96:	f04f 33ff 	mov.w	r3, #4294967295
 8013e9a:	e0bf      	b.n	801401c <SCSI_Write12+0x1c8>
    }

    /* case 8 : Hi <> Do */
    if ((hmsc->cbw.bmFlags & 0x80U) == 0x80U)
 8013e9c:	697a      	ldr	r2, [r7, #20]
 8013e9e:	f248 031c 	movw	r3, #32796	; 0x801c
 8013ea2:	4413      	add	r3, r2
 8013ea4:	781b      	ldrb	r3, [r3, #0]
 8013ea6:	b25b      	sxtb	r3, r3
 8013ea8:	2b00      	cmp	r3, #0
 8013eaa:	da0c      	bge.n	8013ec6 <SCSI_Write12+0x72>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8013eac:	697a      	ldr	r2, [r7, #20]
 8013eae:	f248 031d 	movw	r3, #32797	; 0x801d
 8013eb2:	4413      	add	r3, r2
 8013eb4:	7819      	ldrb	r1, [r3, #0]
 8013eb6:	2320      	movs	r3, #32
 8013eb8:	2205      	movs	r2, #5
 8013eba:	68f8      	ldr	r0, [r7, #12]
 8013ebc:	f7ff fcb0 	bl	8013820 <SCSI_SenseCode>
      return -1;
 8013ec0:	f04f 33ff 	mov.w	r3, #4294967295
 8013ec4:	e0aa      	b.n	801401c <SCSI_Write12+0x1c8>
    }

    /* Check whether Media is ready */
    if (((USBD_StorageTypeDef *)pdev->pUserData)->IsReady(lun) != 0)
 8013ec6:	68fb      	ldr	r3, [r7, #12]
 8013ec8:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8013ecc:	689b      	ldr	r3, [r3, #8]
 8013ece:	7afa      	ldrb	r2, [r7, #11]
 8013ed0:	4610      	mov	r0, r2
 8013ed2:	4798      	blx	r3
 8013ed4:	4603      	mov	r3, r0
 8013ed6:	2b00      	cmp	r3, #0
 8013ed8:	d00b      	beq.n	8013ef2 <SCSI_Write12+0x9e>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 8013eda:	7af9      	ldrb	r1, [r7, #11]
 8013edc:	233a      	movs	r3, #58	; 0x3a
 8013ede:	2202      	movs	r2, #2
 8013ee0:	68f8      	ldr	r0, [r7, #12]
 8013ee2:	f7ff fc9d 	bl	8013820 <SCSI_SenseCode>
      hmsc->bot_state = USBD_BOT_NO_DATA;
 8013ee6:	697b      	ldr	r3, [r7, #20]
 8013ee8:	2205      	movs	r2, #5
 8013eea:	721a      	strb	r2, [r3, #8]
      return -1;
 8013eec:	f04f 33ff 	mov.w	r3, #4294967295
 8013ef0:	e094      	b.n	801401c <SCSI_Write12+0x1c8>
    }

    /* Check If media is write-protected */
    if (((USBD_StorageTypeDef *)pdev->pUserData)->IsWriteProtected(lun) != 0)
 8013ef2:	68fb      	ldr	r3, [r7, #12]
 8013ef4:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8013ef8:	68db      	ldr	r3, [r3, #12]
 8013efa:	7afa      	ldrb	r2, [r7, #11]
 8013efc:	4610      	mov	r0, r2
 8013efe:	4798      	blx	r3
 8013f00:	4603      	mov	r3, r0
 8013f02:	2b00      	cmp	r3, #0
 8013f04:	d00b      	beq.n	8013f1e <SCSI_Write12+0xca>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, WRITE_PROTECTED);
 8013f06:	7af9      	ldrb	r1, [r7, #11]
 8013f08:	2327      	movs	r3, #39	; 0x27
 8013f0a:	2202      	movs	r2, #2
 8013f0c:	68f8      	ldr	r0, [r7, #12]
 8013f0e:	f7ff fc87 	bl	8013820 <SCSI_SenseCode>
      hmsc->bot_state = USBD_BOT_NO_DATA;
 8013f12:	697b      	ldr	r3, [r7, #20]
 8013f14:	2205      	movs	r2, #5
 8013f16:	721a      	strb	r2, [r3, #8]
      return -1;
 8013f18:	f04f 33ff 	mov.w	r3, #4294967295
 8013f1c:	e07e      	b.n	801401c <SCSI_Write12+0x1c8>
    }

    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 8013f1e:	687b      	ldr	r3, [r7, #4]
 8013f20:	3302      	adds	r3, #2
 8013f22:	781b      	ldrb	r3, [r3, #0]
 8013f24:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[3] << 16) |
 8013f26:	687b      	ldr	r3, [r7, #4]
 8013f28:	3303      	adds	r3, #3
 8013f2a:	781b      	ldrb	r3, [r3, #0]
 8013f2c:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 8013f2e:	431a      	orrs	r2, r3
                          ((uint32_t)params[4] << 8) |
 8013f30:	687b      	ldr	r3, [r7, #4]
 8013f32:	3304      	adds	r3, #4
 8013f34:	781b      	ldrb	r3, [r3, #0]
 8013f36:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[3] << 16) |
 8013f38:	4313      	orrs	r3, r2
                          (uint32_t)params[5];
 8013f3a:	687a      	ldr	r2, [r7, #4]
 8013f3c:	3205      	adds	r2, #5
 8013f3e:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[4] << 8) |
 8013f40:	431a      	orrs	r2, r3
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 8013f42:	6979      	ldr	r1, [r7, #20]
 8013f44:	f248 036c 	movw	r3, #32876	; 0x806c
 8013f48:	440b      	add	r3, r1
 8013f4a:	601a      	str	r2, [r3, #0]

    hmsc->scsi_blk_len = ((uint32_t)params[6] << 24) |
 8013f4c:	687b      	ldr	r3, [r7, #4]
 8013f4e:	3306      	adds	r3, #6
 8013f50:	781b      	ldrb	r3, [r3, #0]
 8013f52:	061a      	lsls	r2, r3, #24
                         ((uint32_t)params[7] << 16) |
 8013f54:	687b      	ldr	r3, [r7, #4]
 8013f56:	3307      	adds	r3, #7
 8013f58:	781b      	ldrb	r3, [r3, #0]
 8013f5a:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_len = ((uint32_t)params[6] << 24) |
 8013f5c:	431a      	orrs	r2, r3
                         ((uint32_t)params[8] << 8) |
 8013f5e:	687b      	ldr	r3, [r7, #4]
 8013f60:	3308      	adds	r3, #8
 8013f62:	781b      	ldrb	r3, [r3, #0]
 8013f64:	021b      	lsls	r3, r3, #8
                         ((uint32_t)params[7] << 16) |
 8013f66:	4313      	orrs	r3, r2
                         (uint32_t)params[9];
 8013f68:	687a      	ldr	r2, [r7, #4]
 8013f6a:	3209      	adds	r2, #9
 8013f6c:	7812      	ldrb	r2, [r2, #0]
                         ((uint32_t)params[8] << 8) |
 8013f6e:	431a      	orrs	r2, r3
    hmsc->scsi_blk_len = ((uint32_t)params[6] << 24) |
 8013f70:	6979      	ldr	r1, [r7, #20]
 8013f72:	f248 0370 	movw	r3, #32880	; 0x8070
 8013f76:	440b      	add	r3, r1
 8013f78:	601a      	str	r2, [r3, #0]

    /* check if LBA address is in the right range */
    if (SCSI_CheckAddressRange(pdev, lun, hmsc->scsi_blk_addr,
 8013f7a:	697a      	ldr	r2, [r7, #20]
 8013f7c:	f248 036c 	movw	r3, #32876	; 0x806c
 8013f80:	4413      	add	r3, r2
 8013f82:	6818      	ldr	r0, [r3, #0]
 8013f84:	697a      	ldr	r2, [r7, #20]
 8013f86:	f248 0370 	movw	r3, #32880	; 0x8070
 8013f8a:	4413      	add	r3, r2
 8013f8c:	681b      	ldr	r3, [r3, #0]
 8013f8e:	7af9      	ldrb	r1, [r7, #11]
 8013f90:	4602      	mov	r2, r0
 8013f92:	68f8      	ldr	r0, [r7, #12]
 8013f94:	f000 f87e 	bl	8014094 <SCSI_CheckAddressRange>
 8013f98:	4603      	mov	r3, r0
 8013f9a:	2b00      	cmp	r3, #0
 8013f9c:	da02      	bge.n	8013fa4 <SCSI_Write12+0x150>
                               hmsc->scsi_blk_len) < 0)
    {
      return -1; /* error */
 8013f9e:	f04f 33ff 	mov.w	r3, #4294967295
 8013fa2:	e03b      	b.n	801401c <SCSI_Write12+0x1c8>
    }

    len = hmsc->scsi_blk_len * hmsc->scsi_blk_size;
 8013fa4:	697a      	ldr	r2, [r7, #20]
 8013fa6:	f248 0370 	movw	r3, #32880	; 0x8070
 8013faa:	4413      	add	r3, r2
 8013fac:	681a      	ldr	r2, [r3, #0]
 8013fae:	6979      	ldr	r1, [r7, #20]
 8013fb0:	f248 0364 	movw	r3, #32868	; 0x8064
 8013fb4:	440b      	add	r3, r1
 8013fb6:	881b      	ldrh	r3, [r3, #0]
 8013fb8:	fb03 f302 	mul.w	r3, r3, r2
 8013fbc:	613b      	str	r3, [r7, #16]

    /* cases 3,11,13 : Hn,Ho <> D0 */
    if (hmsc->cbw.dDataLength != len)
 8013fbe:	697a      	ldr	r2, [r7, #20]
 8013fc0:	f248 0318 	movw	r3, #32792	; 0x8018
 8013fc4:	4413      	add	r3, r2
 8013fc6:	681b      	ldr	r3, [r3, #0]
 8013fc8:	693a      	ldr	r2, [r7, #16]
 8013fca:	429a      	cmp	r2, r3
 8013fcc:	d00c      	beq.n	8013fe8 <SCSI_Write12+0x194>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8013fce:	697a      	ldr	r2, [r7, #20]
 8013fd0:	f248 031d 	movw	r3, #32797	; 0x801d
 8013fd4:	4413      	add	r3, r2
 8013fd6:	7819      	ldrb	r1, [r3, #0]
 8013fd8:	2320      	movs	r3, #32
 8013fda:	2205      	movs	r2, #5
 8013fdc:	68f8      	ldr	r0, [r7, #12]
 8013fde:	f7ff fc1f 	bl	8013820 <SCSI_SenseCode>
      return -1;
 8013fe2:	f04f 33ff 	mov.w	r3, #4294967295
 8013fe6:	e019      	b.n	801401c <SCSI_Write12+0x1c8>
    }

    len = MIN(len, MSC_MEDIA_PACKET);
 8013fe8:	693b      	ldr	r3, [r7, #16]
 8013fea:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8013fee:	bf28      	it	cs
 8013ff0:	f44f 4300 	movcs.w	r3, #32768	; 0x8000
 8013ff4:	613b      	str	r3, [r7, #16]

    /* Prepare EP to receive first data packet */
    hmsc->bot_state = USBD_BOT_DATA_OUT;
 8013ff6:	697b      	ldr	r3, [r7, #20]
 8013ff8:	2201      	movs	r2, #1
 8013ffa:	721a      	strb	r2, [r3, #8]
    (void)USBD_LL_PrepareReceive(pdev, MSC_EPOUT_ADDR, hmsc->bot_data, len);
 8013ffc:	697b      	ldr	r3, [r7, #20]
 8013ffe:	f103 0210 	add.w	r2, r3, #16
 8014002:	693b      	ldr	r3, [r7, #16]
 8014004:	2101      	movs	r1, #1
 8014006:	68f8      	ldr	r0, [r7, #12]
 8014008:	f004 fa31 	bl	801846e <USBD_LL_PrepareReceive>
  else /* Write Process ongoing */
  {
    return SCSI_ProcessWrite(pdev, lun);
  }

  return 0;
 801400c:	2300      	movs	r3, #0
 801400e:	e005      	b.n	801401c <SCSI_Write12+0x1c8>
    return SCSI_ProcessWrite(pdev, lun);
 8014010:	7afb      	ldrb	r3, [r7, #11]
 8014012:	4619      	mov	r1, r3
 8014014:	68f8      	ldr	r0, [r7, #12]
 8014016:	f000 f8ef 	bl	80141f8 <SCSI_ProcessWrite>
 801401a:	4603      	mov	r3, r0
}
 801401c:	4618      	mov	r0, r3
 801401e:	3718      	adds	r7, #24
 8014020:	46bd      	mov	sp, r7
 8014022:	bd80      	pop	{r7, pc}

08014024 <SCSI_Verify10>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
static int8_t SCSI_Verify10(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8014024:	b580      	push	{r7, lr}
 8014026:	b086      	sub	sp, #24
 8014028:	af00      	add	r7, sp, #0
 801402a:	60f8      	str	r0, [r7, #12]
 801402c:	460b      	mov	r3, r1
 801402e:	607a      	str	r2, [r7, #4]
 8014030:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8014032:	68fb      	ldr	r3, [r7, #12]
 8014034:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8014038:	617b      	str	r3, [r7, #20]

  if ((params[1] & 0x02U) == 0x02U)
 801403a:	687b      	ldr	r3, [r7, #4]
 801403c:	3301      	adds	r3, #1
 801403e:	781b      	ldrb	r3, [r3, #0]
 8014040:	f003 0302 	and.w	r3, r3, #2
 8014044:	2b00      	cmp	r3, #0
 8014046:	d008      	beq.n	801405a <SCSI_Verify10+0x36>
  {
    SCSI_SenseCode(pdev, lun, ILLEGAL_REQUEST, INVALID_FIELED_IN_COMMAND);
 8014048:	7af9      	ldrb	r1, [r7, #11]
 801404a:	2324      	movs	r3, #36	; 0x24
 801404c:	2205      	movs	r2, #5
 801404e:	68f8      	ldr	r0, [r7, #12]
 8014050:	f7ff fbe6 	bl	8013820 <SCSI_SenseCode>
    return -1; /* Error, Verify Mode Not supported*/
 8014054:	f04f 33ff 	mov.w	r3, #4294967295
 8014058:	e018      	b.n	801408c <SCSI_Verify10+0x68>
  }

  if (SCSI_CheckAddressRange(pdev, lun, hmsc->scsi_blk_addr, hmsc->scsi_blk_len) < 0)
 801405a:	697a      	ldr	r2, [r7, #20]
 801405c:	f248 036c 	movw	r3, #32876	; 0x806c
 8014060:	4413      	add	r3, r2
 8014062:	6818      	ldr	r0, [r3, #0]
 8014064:	697a      	ldr	r2, [r7, #20]
 8014066:	f248 0370 	movw	r3, #32880	; 0x8070
 801406a:	4413      	add	r3, r2
 801406c:	681b      	ldr	r3, [r3, #0]
 801406e:	7af9      	ldrb	r1, [r7, #11]
 8014070:	4602      	mov	r2, r0
 8014072:	68f8      	ldr	r0, [r7, #12]
 8014074:	f000 f80e 	bl	8014094 <SCSI_CheckAddressRange>
 8014078:	4603      	mov	r3, r0
 801407a:	2b00      	cmp	r3, #0
 801407c:	da02      	bge.n	8014084 <SCSI_Verify10+0x60>
  {
    return -1; /* error */
 801407e:	f04f 33ff 	mov.w	r3, #4294967295
 8014082:	e003      	b.n	801408c <SCSI_Verify10+0x68>
  }

  hmsc->bot_data_length = 0U;
 8014084:	697b      	ldr	r3, [r7, #20]
 8014086:	2200      	movs	r2, #0
 8014088:	60da      	str	r2, [r3, #12]

  return 0;
 801408a:	2300      	movs	r3, #0
}
 801408c:	4618      	mov	r0, r3
 801408e:	3718      	adds	r7, #24
 8014090:	46bd      	mov	sp, r7
 8014092:	bd80      	pop	{r7, pc}

08014094 <SCSI_CheckAddressRange>:
* @param  blk_nbr: number of block to be processed
* @retval status
*/
static int8_t SCSI_CheckAddressRange(USBD_HandleTypeDef *pdev, uint8_t lun,
                                     uint32_t blk_offset, uint32_t blk_nbr)
{
 8014094:	b580      	push	{r7, lr}
 8014096:	b086      	sub	sp, #24
 8014098:	af00      	add	r7, sp, #0
 801409a:	60f8      	str	r0, [r7, #12]
 801409c:	607a      	str	r2, [r7, #4]
 801409e:	603b      	str	r3, [r7, #0]
 80140a0:	460b      	mov	r3, r1
 80140a2:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 80140a4:	68fb      	ldr	r3, [r7, #12]
 80140a6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80140aa:	617b      	str	r3, [r7, #20]

  if ((blk_offset + blk_nbr) > hmsc->scsi_blk_nbr)
 80140ac:	687a      	ldr	r2, [r7, #4]
 80140ae:	683b      	ldr	r3, [r7, #0]
 80140b0:	441a      	add	r2, r3
 80140b2:	6979      	ldr	r1, [r7, #20]
 80140b4:	f248 0368 	movw	r3, #32872	; 0x8068
 80140b8:	440b      	add	r3, r1
 80140ba:	681b      	ldr	r3, [r3, #0]
 80140bc:	429a      	cmp	r2, r3
 80140be:	d908      	bls.n	80140d2 <SCSI_CheckAddressRange+0x3e>
  {
    SCSI_SenseCode(pdev, lun, ILLEGAL_REQUEST, ADDRESS_OUT_OF_RANGE);
 80140c0:	7af9      	ldrb	r1, [r7, #11]
 80140c2:	2321      	movs	r3, #33	; 0x21
 80140c4:	2205      	movs	r2, #5
 80140c6:	68f8      	ldr	r0, [r7, #12]
 80140c8:	f7ff fbaa 	bl	8013820 <SCSI_SenseCode>
    return -1;
 80140cc:	f04f 33ff 	mov.w	r3, #4294967295
 80140d0:	e000      	b.n	80140d4 <SCSI_CheckAddressRange+0x40>
  }

  return 0;
 80140d2:	2300      	movs	r3, #0
}
 80140d4:	4618      	mov	r0, r3
 80140d6:	3718      	adds	r7, #24
 80140d8:	46bd      	mov	sp, r7
 80140da:	bd80      	pop	{r7, pc}

080140dc <SCSI_ProcessRead>:
*         Handle Read Process
* @param  lun: Logical unit number
* @retval status
*/
static int8_t SCSI_ProcessRead(USBD_HandleTypeDef *pdev, uint8_t lun)
{
 80140dc:	b5b0      	push	{r4, r5, r7, lr}
 80140de:	b084      	sub	sp, #16
 80140e0:	af00      	add	r7, sp, #0
 80140e2:	6078      	str	r0, [r7, #4]
 80140e4:	460b      	mov	r3, r1
 80140e6:	70fb      	strb	r3, [r7, #3]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 80140e8:	687b      	ldr	r3, [r7, #4]
 80140ea:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80140ee:	60fb      	str	r3, [r7, #12]
  uint32_t len = hmsc->scsi_blk_len * hmsc->scsi_blk_size;
 80140f0:	68fa      	ldr	r2, [r7, #12]
 80140f2:	f248 0370 	movw	r3, #32880	; 0x8070
 80140f6:	4413      	add	r3, r2
 80140f8:	681a      	ldr	r2, [r3, #0]
 80140fa:	68f9      	ldr	r1, [r7, #12]
 80140fc:	f248 0364 	movw	r3, #32868	; 0x8064
 8014100:	440b      	add	r3, r1
 8014102:	881b      	ldrh	r3, [r3, #0]
 8014104:	fb03 f302 	mul.w	r3, r3, r2
 8014108:	60bb      	str	r3, [r7, #8]

  len = MIN(len, MSC_MEDIA_PACKET);
 801410a:	68bb      	ldr	r3, [r7, #8]
 801410c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8014110:	bf28      	it	cs
 8014112:	f44f 4300 	movcs.w	r3, #32768	; 0x8000
 8014116:	60bb      	str	r3, [r7, #8]

  if (((USBD_StorageTypeDef *)pdev->pUserData)->Read(lun, hmsc->bot_data,
 8014118:	687b      	ldr	r3, [r7, #4]
 801411a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 801411e:	691c      	ldr	r4, [r3, #16]
 8014120:	68fb      	ldr	r3, [r7, #12]
 8014122:	f103 0110 	add.w	r1, r3, #16
 8014126:	68fa      	ldr	r2, [r7, #12]
 8014128:	f248 036c 	movw	r3, #32876	; 0x806c
 801412c:	4413      	add	r3, r2
 801412e:	681d      	ldr	r5, [r3, #0]
                                                     hmsc->scsi_blk_addr,
                                                     (len / hmsc->scsi_blk_size)) < 0)
 8014130:	68fa      	ldr	r2, [r7, #12]
 8014132:	f248 0364 	movw	r3, #32868	; 0x8064
 8014136:	4413      	add	r3, r2
 8014138:	881b      	ldrh	r3, [r3, #0]
 801413a:	461a      	mov	r2, r3
 801413c:	68bb      	ldr	r3, [r7, #8]
 801413e:	fbb3 f3f2 	udiv	r3, r3, r2
  if (((USBD_StorageTypeDef *)pdev->pUserData)->Read(lun, hmsc->bot_data,
 8014142:	b29b      	uxth	r3, r3
 8014144:	78f8      	ldrb	r0, [r7, #3]
 8014146:	462a      	mov	r2, r5
 8014148:	47a0      	blx	r4
 801414a:	4603      	mov	r3, r0
 801414c:	2b00      	cmp	r3, #0
 801414e:	da08      	bge.n	8014162 <SCSI_ProcessRead+0x86>
  {
    SCSI_SenseCode(pdev, lun, HARDWARE_ERROR, UNRECOVERED_READ_ERROR);
 8014150:	78f9      	ldrb	r1, [r7, #3]
 8014152:	2311      	movs	r3, #17
 8014154:	2204      	movs	r2, #4
 8014156:	6878      	ldr	r0, [r7, #4]
 8014158:	f7ff fb62 	bl	8013820 <SCSI_SenseCode>
    return -1;
 801415c:	f04f 33ff 	mov.w	r3, #4294967295
 8014160:	e046      	b.n	80141f0 <SCSI_ProcessRead+0x114>
  }

  (void)USBD_LL_Transmit(pdev, MSC_EPIN_ADDR, hmsc->bot_data, len);
 8014162:	68fb      	ldr	r3, [r7, #12]
 8014164:	f103 0210 	add.w	r2, r3, #16
 8014168:	68bb      	ldr	r3, [r7, #8]
 801416a:	2181      	movs	r1, #129	; 0x81
 801416c:	6878      	ldr	r0, [r7, #4]
 801416e:	f004 f95d 	bl	801842c <USBD_LL_Transmit>

  hmsc->scsi_blk_addr += (len / hmsc->scsi_blk_size);
 8014172:	68fa      	ldr	r2, [r7, #12]
 8014174:	f248 036c 	movw	r3, #32876	; 0x806c
 8014178:	4413      	add	r3, r2
 801417a:	681a      	ldr	r2, [r3, #0]
 801417c:	68f9      	ldr	r1, [r7, #12]
 801417e:	f248 0364 	movw	r3, #32868	; 0x8064
 8014182:	440b      	add	r3, r1
 8014184:	881b      	ldrh	r3, [r3, #0]
 8014186:	4619      	mov	r1, r3
 8014188:	68bb      	ldr	r3, [r7, #8]
 801418a:	fbb3 f3f1 	udiv	r3, r3, r1
 801418e:	441a      	add	r2, r3
 8014190:	68f9      	ldr	r1, [r7, #12]
 8014192:	f248 036c 	movw	r3, #32876	; 0x806c
 8014196:	440b      	add	r3, r1
 8014198:	601a      	str	r2, [r3, #0]
  hmsc->scsi_blk_len -= (len / hmsc->scsi_blk_size);
 801419a:	68fa      	ldr	r2, [r7, #12]
 801419c:	f248 0370 	movw	r3, #32880	; 0x8070
 80141a0:	4413      	add	r3, r2
 80141a2:	681a      	ldr	r2, [r3, #0]
 80141a4:	68f9      	ldr	r1, [r7, #12]
 80141a6:	f248 0364 	movw	r3, #32868	; 0x8064
 80141aa:	440b      	add	r3, r1
 80141ac:	881b      	ldrh	r3, [r3, #0]
 80141ae:	4619      	mov	r1, r3
 80141b0:	68bb      	ldr	r3, [r7, #8]
 80141b2:	fbb3 f3f1 	udiv	r3, r3, r1
 80141b6:	1ad2      	subs	r2, r2, r3
 80141b8:	68f9      	ldr	r1, [r7, #12]
 80141ba:	f248 0370 	movw	r3, #32880	; 0x8070
 80141be:	440b      	add	r3, r1
 80141c0:	601a      	str	r2, [r3, #0]

  /* case 6 : Hi = Di */
  hmsc->csw.dDataResidue -= len;
 80141c2:	68fa      	ldr	r2, [r7, #12]
 80141c4:	f248 0338 	movw	r3, #32824	; 0x8038
 80141c8:	4413      	add	r3, r2
 80141ca:	681a      	ldr	r2, [r3, #0]
 80141cc:	68bb      	ldr	r3, [r7, #8]
 80141ce:	1ad2      	subs	r2, r2, r3
 80141d0:	68f9      	ldr	r1, [r7, #12]
 80141d2:	f248 0338 	movw	r3, #32824	; 0x8038
 80141d6:	440b      	add	r3, r1
 80141d8:	601a      	str	r2, [r3, #0]

  if (hmsc->scsi_blk_len == 0U)
 80141da:	68fa      	ldr	r2, [r7, #12]
 80141dc:	f248 0370 	movw	r3, #32880	; 0x8070
 80141e0:	4413      	add	r3, r2
 80141e2:	681b      	ldr	r3, [r3, #0]
 80141e4:	2b00      	cmp	r3, #0
 80141e6:	d102      	bne.n	80141ee <SCSI_ProcessRead+0x112>
  {
    hmsc->bot_state = USBD_BOT_LAST_DATA_IN;
 80141e8:	68fb      	ldr	r3, [r7, #12]
 80141ea:	2203      	movs	r2, #3
 80141ec:	721a      	strb	r2, [r3, #8]
  }

  return 0;
 80141ee:	2300      	movs	r3, #0
}
 80141f0:	4618      	mov	r0, r3
 80141f2:	3710      	adds	r7, #16
 80141f4:	46bd      	mov	sp, r7
 80141f6:	bdb0      	pop	{r4, r5, r7, pc}

080141f8 <SCSI_ProcessWrite>:
*         Handle Write Process
* @param  lun: Logical unit number
* @retval status
*/
static int8_t SCSI_ProcessWrite(USBD_HandleTypeDef *pdev, uint8_t lun)
{
 80141f8:	b5b0      	push	{r4, r5, r7, lr}
 80141fa:	b084      	sub	sp, #16
 80141fc:	af00      	add	r7, sp, #0
 80141fe:	6078      	str	r0, [r7, #4]
 8014200:	460b      	mov	r3, r1
 8014202:	70fb      	strb	r3, [r7, #3]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8014204:	687b      	ldr	r3, [r7, #4]
 8014206:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 801420a:	60fb      	str	r3, [r7, #12]
  uint32_t len = hmsc->scsi_blk_len * hmsc->scsi_blk_size;
 801420c:	68fa      	ldr	r2, [r7, #12]
 801420e:	f248 0370 	movw	r3, #32880	; 0x8070
 8014212:	4413      	add	r3, r2
 8014214:	681a      	ldr	r2, [r3, #0]
 8014216:	68f9      	ldr	r1, [r7, #12]
 8014218:	f248 0364 	movw	r3, #32868	; 0x8064
 801421c:	440b      	add	r3, r1
 801421e:	881b      	ldrh	r3, [r3, #0]
 8014220:	fb03 f302 	mul.w	r3, r3, r2
 8014224:	60bb      	str	r3, [r7, #8]

  len = MIN(len, MSC_MEDIA_PACKET);
 8014226:	68bb      	ldr	r3, [r7, #8]
 8014228:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 801422c:	bf28      	it	cs
 801422e:	f44f 4300 	movcs.w	r3, #32768	; 0x8000
 8014232:	60bb      	str	r3, [r7, #8]

  if (((USBD_StorageTypeDef *)pdev->pUserData)->Write(lun, hmsc->bot_data,
 8014234:	687b      	ldr	r3, [r7, #4]
 8014236:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 801423a:	695c      	ldr	r4, [r3, #20]
 801423c:	68fb      	ldr	r3, [r7, #12]
 801423e:	f103 0110 	add.w	r1, r3, #16
 8014242:	68fa      	ldr	r2, [r7, #12]
 8014244:	f248 036c 	movw	r3, #32876	; 0x806c
 8014248:	4413      	add	r3, r2
 801424a:	681d      	ldr	r5, [r3, #0]
                                                      hmsc->scsi_blk_addr,
                                                      (len / hmsc->scsi_blk_size)) < 0)
 801424c:	68fa      	ldr	r2, [r7, #12]
 801424e:	f248 0364 	movw	r3, #32868	; 0x8064
 8014252:	4413      	add	r3, r2
 8014254:	881b      	ldrh	r3, [r3, #0]
 8014256:	461a      	mov	r2, r3
 8014258:	68bb      	ldr	r3, [r7, #8]
 801425a:	fbb3 f3f2 	udiv	r3, r3, r2
  if (((USBD_StorageTypeDef *)pdev->pUserData)->Write(lun, hmsc->bot_data,
 801425e:	b29b      	uxth	r3, r3
 8014260:	78f8      	ldrb	r0, [r7, #3]
 8014262:	462a      	mov	r2, r5
 8014264:	47a0      	blx	r4
 8014266:	4603      	mov	r3, r0
 8014268:	2b00      	cmp	r3, #0
 801426a:	da08      	bge.n	801427e <SCSI_ProcessWrite+0x86>
  {
    SCSI_SenseCode(pdev, lun, HARDWARE_ERROR, WRITE_FAULT);
 801426c:	78f9      	ldrb	r1, [r7, #3]
 801426e:	2303      	movs	r3, #3
 8014270:	2204      	movs	r2, #4
 8014272:	6878      	ldr	r0, [r7, #4]
 8014274:	f7ff fad4 	bl	8013820 <SCSI_SenseCode>
    return -1;
 8014278:	f04f 33ff 	mov.w	r3, #4294967295
 801427c:	e05a      	b.n	8014334 <SCSI_ProcessWrite+0x13c>
  }

  hmsc->scsi_blk_addr += (len / hmsc->scsi_blk_size);
 801427e:	68fa      	ldr	r2, [r7, #12]
 8014280:	f248 036c 	movw	r3, #32876	; 0x806c
 8014284:	4413      	add	r3, r2
 8014286:	681a      	ldr	r2, [r3, #0]
 8014288:	68f9      	ldr	r1, [r7, #12]
 801428a:	f248 0364 	movw	r3, #32868	; 0x8064
 801428e:	440b      	add	r3, r1
 8014290:	881b      	ldrh	r3, [r3, #0]
 8014292:	4619      	mov	r1, r3
 8014294:	68bb      	ldr	r3, [r7, #8]
 8014296:	fbb3 f3f1 	udiv	r3, r3, r1
 801429a:	441a      	add	r2, r3
 801429c:	68f9      	ldr	r1, [r7, #12]
 801429e:	f248 036c 	movw	r3, #32876	; 0x806c
 80142a2:	440b      	add	r3, r1
 80142a4:	601a      	str	r2, [r3, #0]
  hmsc->scsi_blk_len -= (len / hmsc->scsi_blk_size);
 80142a6:	68fa      	ldr	r2, [r7, #12]
 80142a8:	f248 0370 	movw	r3, #32880	; 0x8070
 80142ac:	4413      	add	r3, r2
 80142ae:	681a      	ldr	r2, [r3, #0]
 80142b0:	68f9      	ldr	r1, [r7, #12]
 80142b2:	f248 0364 	movw	r3, #32868	; 0x8064
 80142b6:	440b      	add	r3, r1
 80142b8:	881b      	ldrh	r3, [r3, #0]
 80142ba:	4619      	mov	r1, r3
 80142bc:	68bb      	ldr	r3, [r7, #8]
 80142be:	fbb3 f3f1 	udiv	r3, r3, r1
 80142c2:	1ad2      	subs	r2, r2, r3
 80142c4:	68f9      	ldr	r1, [r7, #12]
 80142c6:	f248 0370 	movw	r3, #32880	; 0x8070
 80142ca:	440b      	add	r3, r1
 80142cc:	601a      	str	r2, [r3, #0]

  /* case 12 : Ho = Do */
  hmsc->csw.dDataResidue -= len;
 80142ce:	68fa      	ldr	r2, [r7, #12]
 80142d0:	f248 0338 	movw	r3, #32824	; 0x8038
 80142d4:	4413      	add	r3, r2
 80142d6:	681a      	ldr	r2, [r3, #0]
 80142d8:	68bb      	ldr	r3, [r7, #8]
 80142da:	1ad2      	subs	r2, r2, r3
 80142dc:	68f9      	ldr	r1, [r7, #12]
 80142de:	f248 0338 	movw	r3, #32824	; 0x8038
 80142e2:	440b      	add	r3, r1
 80142e4:	601a      	str	r2, [r3, #0]

  if (hmsc->scsi_blk_len == 0U)
 80142e6:	68fa      	ldr	r2, [r7, #12]
 80142e8:	f248 0370 	movw	r3, #32880	; 0x8070
 80142ec:	4413      	add	r3, r2
 80142ee:	681b      	ldr	r3, [r3, #0]
 80142f0:	2b00      	cmp	r3, #0
 80142f2:	d104      	bne.n	80142fe <SCSI_ProcessWrite+0x106>
  {
    MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_PASSED);
 80142f4:	2100      	movs	r1, #0
 80142f6:	6878      	ldr	r0, [r7, #4]
 80142f8:	f7fe fde2 	bl	8012ec0 <MSC_BOT_SendCSW>
 80142fc:	e019      	b.n	8014332 <SCSI_ProcessWrite+0x13a>
  }
  else
  {
    len = MIN((hmsc->scsi_blk_len * hmsc->scsi_blk_size), MSC_MEDIA_PACKET);
 80142fe:	68fa      	ldr	r2, [r7, #12]
 8014300:	f248 0370 	movw	r3, #32880	; 0x8070
 8014304:	4413      	add	r3, r2
 8014306:	681a      	ldr	r2, [r3, #0]
 8014308:	68f9      	ldr	r1, [r7, #12]
 801430a:	f248 0364 	movw	r3, #32868	; 0x8064
 801430e:	440b      	add	r3, r1
 8014310:	881b      	ldrh	r3, [r3, #0]
 8014312:	fb03 f302 	mul.w	r3, r3, r2
 8014316:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 801431a:	bf28      	it	cs
 801431c:	f44f 4300 	movcs.w	r3, #32768	; 0x8000
 8014320:	60bb      	str	r3, [r7, #8]

    /* Prepare EP to Receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, MSC_EPOUT_ADDR, hmsc->bot_data, len);
 8014322:	68fb      	ldr	r3, [r7, #12]
 8014324:	f103 0210 	add.w	r2, r3, #16
 8014328:	68bb      	ldr	r3, [r7, #8]
 801432a:	2101      	movs	r1, #1
 801432c:	6878      	ldr	r0, [r7, #4]
 801432e:	f004 f89e 	bl	801846e <USBD_LL_PrepareReceive>
  }

  return 0;
 8014332:	2300      	movs	r3, #0
}
 8014334:	4618      	mov	r0, r3
 8014336:	3710      	adds	r7, #16
 8014338:	46bd      	mov	sp, r7
 801433a:	bdb0      	pop	{r4, r5, r7, pc}

0801433c <SCSI_UpdateBotData>:
* @param  length: Data length
* @retval status
*/
static int8_t SCSI_UpdateBotData(USBD_MSC_BOT_HandleTypeDef *hmsc,
                                 uint8_t *pBuff, uint16_t length)
{
 801433c:	b480      	push	{r7}
 801433e:	b087      	sub	sp, #28
 8014340:	af00      	add	r7, sp, #0
 8014342:	60f8      	str	r0, [r7, #12]
 8014344:	60b9      	str	r1, [r7, #8]
 8014346:	4613      	mov	r3, r2
 8014348:	80fb      	strh	r3, [r7, #6]
  uint16_t len = length;
 801434a:	88fb      	ldrh	r3, [r7, #6]
 801434c:	82fb      	strh	r3, [r7, #22]

  hmsc->bot_data_length = len;
 801434e:	8afa      	ldrh	r2, [r7, #22]
 8014350:	68fb      	ldr	r3, [r7, #12]
 8014352:	60da      	str	r2, [r3, #12]

  while (len != 0U)
 8014354:	e00b      	b.n	801436e <SCSI_UpdateBotData+0x32>
  {
    len--;
 8014356:	8afb      	ldrh	r3, [r7, #22]
 8014358:	3b01      	subs	r3, #1
 801435a:	82fb      	strh	r3, [r7, #22]
    hmsc->bot_data[len] = pBuff[len];
 801435c:	8afb      	ldrh	r3, [r7, #22]
 801435e:	68ba      	ldr	r2, [r7, #8]
 8014360:	441a      	add	r2, r3
 8014362:	8afb      	ldrh	r3, [r7, #22]
 8014364:	7811      	ldrb	r1, [r2, #0]
 8014366:	68fa      	ldr	r2, [r7, #12]
 8014368:	4413      	add	r3, r2
 801436a:	460a      	mov	r2, r1
 801436c:	741a      	strb	r2, [r3, #16]
  while (len != 0U)
 801436e:	8afb      	ldrh	r3, [r7, #22]
 8014370:	2b00      	cmp	r3, #0
 8014372:	d1f0      	bne.n	8014356 <SCSI_UpdateBotData+0x1a>
  }

  return 0;
 8014374:	2300      	movs	r3, #0
}
 8014376:	4618      	mov	r0, r3
 8014378:	371c      	adds	r7, #28
 801437a:	46bd      	mov	sp, r7
 801437c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014380:	4770      	bx	lr

08014382 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8014382:	b580      	push	{r7, lr}
 8014384:	b086      	sub	sp, #24
 8014386:	af00      	add	r7, sp, #0
 8014388:	60f8      	str	r0, [r7, #12]
 801438a:	60b9      	str	r1, [r7, #8]
 801438c:	4613      	mov	r3, r2
 801438e:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8014390:	68fb      	ldr	r3, [r7, #12]
 8014392:	2b00      	cmp	r3, #0
 8014394:	d101      	bne.n	801439a <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8014396:	2303      	movs	r3, #3
 8014398:	e025      	b.n	80143e6 <USBD_Init+0x64>
  }

  /* Unlink previous class */
  if (pdev->pClass != NULL)
 801439a:	68fb      	ldr	r3, [r7, #12]
 801439c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80143a0:	2b00      	cmp	r3, #0
 80143a2:	d003      	beq.n	80143ac <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 80143a4:	68fb      	ldr	r3, [r7, #12]
 80143a6:	2200      	movs	r2, #0
 80143a8:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }

  if (pdev->pConfDesc != NULL)
 80143ac:	68fb      	ldr	r3, [r7, #12]
 80143ae:	f8d3 32cc 	ldr.w	r3, [r3, #716]	; 0x2cc
 80143b2:	2b00      	cmp	r3, #0
 80143b4:	d003      	beq.n	80143be <USBD_Init+0x3c>
  {
    pdev->pConfDesc = NULL;
 80143b6:	68fb      	ldr	r3, [r7, #12]
 80143b8:	2200      	movs	r2, #0
 80143ba:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 80143be:	68bb      	ldr	r3, [r7, #8]
 80143c0:	2b00      	cmp	r3, #0
 80143c2:	d003      	beq.n	80143cc <USBD_Init+0x4a>
  {
    pdev->pDesc = pdesc;
 80143c4:	68fb      	ldr	r3, [r7, #12]
 80143c6:	68ba      	ldr	r2, [r7, #8]
 80143c8:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80143cc:	68fb      	ldr	r3, [r7, #12]
 80143ce:	2201      	movs	r2, #1
 80143d0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 80143d4:	68fb      	ldr	r3, [r7, #12]
 80143d6:	79fa      	ldrb	r2, [r7, #7]
 80143d8:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 80143da:	68f8      	ldr	r0, [r7, #12]
 80143dc:	f003 fece 	bl	801817c <USBD_LL_Init>
 80143e0:	4603      	mov	r3, r0
 80143e2:	75fb      	strb	r3, [r7, #23]

  return ret;
 80143e4:	7dfb      	ldrb	r3, [r7, #23]
}
 80143e6:	4618      	mov	r0, r3
 80143e8:	3718      	adds	r7, #24
 80143ea:	46bd      	mov	sp, r7
 80143ec:	bd80      	pop	{r7, pc}

080143ee <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 80143ee:	b580      	push	{r7, lr}
 80143f0:	b084      	sub	sp, #16
 80143f2:	af00      	add	r7, sp, #0
 80143f4:	6078      	str	r0, [r7, #4]
 80143f6:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80143f8:	2300      	movs	r3, #0
 80143fa:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 80143fc:	683b      	ldr	r3, [r7, #0]
 80143fe:	2b00      	cmp	r3, #0
 8014400:	d101      	bne.n	8014406 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 8014402:	2303      	movs	r3, #3
 8014404:	e010      	b.n	8014428 <USBD_RegisterClass+0x3a>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 8014406:	687b      	ldr	r3, [r7, #4]
 8014408:	683a      	ldr	r2, [r7, #0]
 801440a:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  /* Get Device Configuration Descriptor */
#ifdef USE_USB_FS
  pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
#else /* USE_USB_HS */
  pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
 801440e:	687b      	ldr	r3, [r7, #4]
 8014410:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8014414:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8014416:	f107 020e 	add.w	r2, r7, #14
 801441a:	4610      	mov	r0, r2
 801441c:	4798      	blx	r3
 801441e:	4602      	mov	r2, r0
 8014420:	687b      	ldr	r3, [r7, #4]
 8014422:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
#endif /* USE_USB_FS */


  return USBD_OK;
 8014426:	2300      	movs	r3, #0
}
 8014428:	4618      	mov	r0, r3
 801442a:	3710      	adds	r7, #16
 801442c:	46bd      	mov	sp, r7
 801442e:	bd80      	pop	{r7, pc}

08014430 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8014430:	b580      	push	{r7, lr}
 8014432:	b082      	sub	sp, #8
 8014434:	af00      	add	r7, sp, #0
 8014436:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8014438:	6878      	ldr	r0, [r7, #4]
 801443a:	f003 feef 	bl	801821c <USBD_LL_Start>
 801443e:	4603      	mov	r3, r0
}
 8014440:	4618      	mov	r0, r3
 8014442:	3708      	adds	r7, #8
 8014444:	46bd      	mov	sp, r7
 8014446:	bd80      	pop	{r7, pc}

08014448 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8014448:	b480      	push	{r7}
 801444a:	b083      	sub	sp, #12
 801444c:	af00      	add	r7, sp, #0
 801444e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8014450:	2300      	movs	r3, #0
}
 8014452:	4618      	mov	r0, r3
 8014454:	370c      	adds	r7, #12
 8014456:	46bd      	mov	sp, r7
 8014458:	f85d 7b04 	ldr.w	r7, [sp], #4
 801445c:	4770      	bx	lr

0801445e <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 801445e:	b580      	push	{r7, lr}
 8014460:	b084      	sub	sp, #16
 8014462:	af00      	add	r7, sp, #0
 8014464:	6078      	str	r0, [r7, #4]
 8014466:	460b      	mov	r3, r1
 8014468:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 801446a:	2303      	movs	r3, #3
 801446c:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 801446e:	687b      	ldr	r3, [r7, #4]
 8014470:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8014474:	2b00      	cmp	r3, #0
 8014476:	d009      	beq.n	801448c <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 8014478:	687b      	ldr	r3, [r7, #4]
 801447a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801447e:	681b      	ldr	r3, [r3, #0]
 8014480:	78fa      	ldrb	r2, [r7, #3]
 8014482:	4611      	mov	r1, r2
 8014484:	6878      	ldr	r0, [r7, #4]
 8014486:	4798      	blx	r3
 8014488:	4603      	mov	r3, r0
 801448a:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 801448c:	7bfb      	ldrb	r3, [r7, #15]
}
 801448e:	4618      	mov	r0, r3
 8014490:	3710      	adds	r7, #16
 8014492:	46bd      	mov	sp, r7
 8014494:	bd80      	pop	{r7, pc}

08014496 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8014496:	b580      	push	{r7, lr}
 8014498:	b082      	sub	sp, #8
 801449a:	af00      	add	r7, sp, #0
 801449c:	6078      	str	r0, [r7, #4]
 801449e:	460b      	mov	r3, r1
 80144a0:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 80144a2:	687b      	ldr	r3, [r7, #4]
 80144a4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80144a8:	2b00      	cmp	r3, #0
 80144aa:	d007      	beq.n	80144bc <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 80144ac:	687b      	ldr	r3, [r7, #4]
 80144ae:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80144b2:	685b      	ldr	r3, [r3, #4]
 80144b4:	78fa      	ldrb	r2, [r7, #3]
 80144b6:	4611      	mov	r1, r2
 80144b8:	6878      	ldr	r0, [r7, #4]
 80144ba:	4798      	blx	r3
  }

  return USBD_OK;
 80144bc:	2300      	movs	r3, #0
}
 80144be:	4618      	mov	r0, r3
 80144c0:	3708      	adds	r7, #8
 80144c2:	46bd      	mov	sp, r7
 80144c4:	bd80      	pop	{r7, pc}

080144c6 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 80144c6:	b580      	push	{r7, lr}
 80144c8:	b084      	sub	sp, #16
 80144ca:	af00      	add	r7, sp, #0
 80144cc:	6078      	str	r0, [r7, #4]
 80144ce:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 80144d0:	687b      	ldr	r3, [r7, #4]
 80144d2:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80144d6:	6839      	ldr	r1, [r7, #0]
 80144d8:	4618      	mov	r0, r3
 80144da:	f000 ff2b 	bl	8015334 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 80144de:	687b      	ldr	r3, [r7, #4]
 80144e0:	2201      	movs	r2, #1
 80144e2:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 80144e6:	687b      	ldr	r3, [r7, #4]
 80144e8:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 80144ec:	461a      	mov	r2, r3
 80144ee:	687b      	ldr	r3, [r7, #4]
 80144f0:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 80144f4:	687b      	ldr	r3, [r7, #4]
 80144f6:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 80144fa:	f003 031f 	and.w	r3, r3, #31
 80144fe:	2b01      	cmp	r3, #1
 8014500:	d00e      	beq.n	8014520 <USBD_LL_SetupStage+0x5a>
 8014502:	2b01      	cmp	r3, #1
 8014504:	d302      	bcc.n	801450c <USBD_LL_SetupStage+0x46>
 8014506:	2b02      	cmp	r3, #2
 8014508:	d014      	beq.n	8014534 <USBD_LL_SetupStage+0x6e>
 801450a:	e01d      	b.n	8014548 <USBD_LL_SetupStage+0x82>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 801450c:	687b      	ldr	r3, [r7, #4]
 801450e:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8014512:	4619      	mov	r1, r3
 8014514:	6878      	ldr	r0, [r7, #4]
 8014516:	f000 fa17 	bl	8014948 <USBD_StdDevReq>
 801451a:	4603      	mov	r3, r0
 801451c:	73fb      	strb	r3, [r7, #15]
      break;
 801451e:	e020      	b.n	8014562 <USBD_LL_SetupStage+0x9c>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8014520:	687b      	ldr	r3, [r7, #4]
 8014522:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8014526:	4619      	mov	r1, r3
 8014528:	6878      	ldr	r0, [r7, #4]
 801452a:	f000 fa7b 	bl	8014a24 <USBD_StdItfReq>
 801452e:	4603      	mov	r3, r0
 8014530:	73fb      	strb	r3, [r7, #15]
      break;
 8014532:	e016      	b.n	8014562 <USBD_LL_SetupStage+0x9c>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8014534:	687b      	ldr	r3, [r7, #4]
 8014536:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 801453a:	4619      	mov	r1, r3
 801453c:	6878      	ldr	r0, [r7, #4]
 801453e:	f000 fab7 	bl	8014ab0 <USBD_StdEPReq>
 8014542:	4603      	mov	r3, r0
 8014544:	73fb      	strb	r3, [r7, #15]
      break;
 8014546:	e00c      	b.n	8014562 <USBD_LL_SetupStage+0x9c>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8014548:	687b      	ldr	r3, [r7, #4]
 801454a:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 801454e:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8014552:	b2db      	uxtb	r3, r3
 8014554:	4619      	mov	r1, r3
 8014556:	6878      	ldr	r0, [r7, #4]
 8014558:	f003 fedf 	bl	801831a <USBD_LL_StallEP>
 801455c:	4603      	mov	r3, r0
 801455e:	73fb      	strb	r3, [r7, #15]
      break;
 8014560:	bf00      	nop
  }

  return ret;
 8014562:	7bfb      	ldrb	r3, [r7, #15]
}
 8014564:	4618      	mov	r0, r3
 8014566:	3710      	adds	r7, #16
 8014568:	46bd      	mov	sp, r7
 801456a:	bd80      	pop	{r7, pc}

0801456c <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 801456c:	b580      	push	{r7, lr}
 801456e:	b086      	sub	sp, #24
 8014570:	af00      	add	r7, sp, #0
 8014572:	60f8      	str	r0, [r7, #12]
 8014574:	460b      	mov	r3, r1
 8014576:	607a      	str	r2, [r7, #4]
 8014578:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 801457a:	7afb      	ldrb	r3, [r7, #11]
 801457c:	2b00      	cmp	r3, #0
 801457e:	d137      	bne.n	80145f0 <USBD_LL_DataOutStage+0x84>
  {
    pep = &pdev->ep_out[0];
 8014580:	68fb      	ldr	r3, [r7, #12]
 8014582:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8014586:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8014588:	68fb      	ldr	r3, [r7, #12]
 801458a:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 801458e:	2b03      	cmp	r3, #3
 8014590:	d14a      	bne.n	8014628 <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 8014592:	693b      	ldr	r3, [r7, #16]
 8014594:	689a      	ldr	r2, [r3, #8]
 8014596:	693b      	ldr	r3, [r7, #16]
 8014598:	68db      	ldr	r3, [r3, #12]
 801459a:	429a      	cmp	r2, r3
 801459c:	d913      	bls.n	80145c6 <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 801459e:	693b      	ldr	r3, [r7, #16]
 80145a0:	689a      	ldr	r2, [r3, #8]
 80145a2:	693b      	ldr	r3, [r7, #16]
 80145a4:	68db      	ldr	r3, [r3, #12]
 80145a6:	1ad2      	subs	r2, r2, r3
 80145a8:	693b      	ldr	r3, [r7, #16]
 80145aa:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 80145ac:	693b      	ldr	r3, [r7, #16]
 80145ae:	68da      	ldr	r2, [r3, #12]
 80145b0:	693b      	ldr	r3, [r7, #16]
 80145b2:	689b      	ldr	r3, [r3, #8]
 80145b4:	4293      	cmp	r3, r2
 80145b6:	bf28      	it	cs
 80145b8:	4613      	movcs	r3, r2
 80145ba:	461a      	mov	r2, r3
 80145bc:	6879      	ldr	r1, [r7, #4]
 80145be:	68f8      	ldr	r0, [r7, #12]
 80145c0:	f000 ff8f 	bl	80154e2 <USBD_CtlContinueRx>
 80145c4:	e030      	b.n	8014628 <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 80145c6:	68fb      	ldr	r3, [r7, #12]
 80145c8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80145cc:	691b      	ldr	r3, [r3, #16]
 80145ce:	2b00      	cmp	r3, #0
 80145d0:	d00a      	beq.n	80145e8 <USBD_LL_DataOutStage+0x7c>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 80145d2:	68fb      	ldr	r3, [r7, #12]
 80145d4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 80145d8:	2b03      	cmp	r3, #3
 80145da:	d105      	bne.n	80145e8 <USBD_LL_DataOutStage+0x7c>
        {
          pdev->pClass->EP0_RxReady(pdev);
 80145dc:	68fb      	ldr	r3, [r7, #12]
 80145de:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80145e2:	691b      	ldr	r3, [r3, #16]
 80145e4:	68f8      	ldr	r0, [r7, #12]
 80145e6:	4798      	blx	r3
        }
        (void)USBD_CtlSendStatus(pdev);
 80145e8:	68f8      	ldr	r0, [r7, #12]
 80145ea:	f000 ff8b 	bl	8015504 <USBD_CtlSendStatus>
 80145ee:	e01b      	b.n	8014628 <USBD_LL_DataOutStage+0xbc>
        (void)USBD_LL_StallEP(pdev, 0U);
      }
#endif
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 80145f0:	68fb      	ldr	r3, [r7, #12]
 80145f2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80145f6:	699b      	ldr	r3, [r3, #24]
 80145f8:	2b00      	cmp	r3, #0
 80145fa:	d013      	beq.n	8014624 <USBD_LL_DataOutStage+0xb8>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 80145fc:	68fb      	ldr	r3, [r7, #12]
 80145fe:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 8014602:	2b03      	cmp	r3, #3
 8014604:	d10e      	bne.n	8014624 <USBD_LL_DataOutStage+0xb8>
  {
    ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 8014606:	68fb      	ldr	r3, [r7, #12]
 8014608:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801460c:	699b      	ldr	r3, [r3, #24]
 801460e:	7afa      	ldrb	r2, [r7, #11]
 8014610:	4611      	mov	r1, r2
 8014612:	68f8      	ldr	r0, [r7, #12]
 8014614:	4798      	blx	r3
 8014616:	4603      	mov	r3, r0
 8014618:	75fb      	strb	r3, [r7, #23]

    if (ret != USBD_OK)
 801461a:	7dfb      	ldrb	r3, [r7, #23]
 801461c:	2b00      	cmp	r3, #0
 801461e:	d003      	beq.n	8014628 <USBD_LL_DataOutStage+0xbc>
    {
      return ret;
 8014620:	7dfb      	ldrb	r3, [r7, #23]
 8014622:	e002      	b.n	801462a <USBD_LL_DataOutStage+0xbe>
    }
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8014624:	2303      	movs	r3, #3
 8014626:	e000      	b.n	801462a <USBD_LL_DataOutStage+0xbe>
  }

  return USBD_OK;
 8014628:	2300      	movs	r3, #0
}
 801462a:	4618      	mov	r0, r3
 801462c:	3718      	adds	r7, #24
 801462e:	46bd      	mov	sp, r7
 8014630:	bd80      	pop	{r7, pc}

08014632 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8014632:	b580      	push	{r7, lr}
 8014634:	b086      	sub	sp, #24
 8014636:	af00      	add	r7, sp, #0
 8014638:	60f8      	str	r0, [r7, #12]
 801463a:	460b      	mov	r3, r1
 801463c:	607a      	str	r2, [r7, #4]
 801463e:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8014640:	7afb      	ldrb	r3, [r7, #11]
 8014642:	2b00      	cmp	r3, #0
 8014644:	d16a      	bne.n	801471c <USBD_LL_DataInStage+0xea>
  {
    pep = &pdev->ep_in[0];
 8014646:	68fb      	ldr	r3, [r7, #12]
 8014648:	3314      	adds	r3, #20
 801464a:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 801464c:	68fb      	ldr	r3, [r7, #12]
 801464e:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8014652:	2b02      	cmp	r3, #2
 8014654:	d155      	bne.n	8014702 <USBD_LL_DataInStage+0xd0>
    {
      if (pep->rem_length > pep->maxpacket)
 8014656:	693b      	ldr	r3, [r7, #16]
 8014658:	689a      	ldr	r2, [r3, #8]
 801465a:	693b      	ldr	r3, [r7, #16]
 801465c:	68db      	ldr	r3, [r3, #12]
 801465e:	429a      	cmp	r2, r3
 8014660:	d914      	bls.n	801468c <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8014662:	693b      	ldr	r3, [r7, #16]
 8014664:	689a      	ldr	r2, [r3, #8]
 8014666:	693b      	ldr	r3, [r7, #16]
 8014668:	68db      	ldr	r3, [r3, #12]
 801466a:	1ad2      	subs	r2, r2, r3
 801466c:	693b      	ldr	r3, [r7, #16]
 801466e:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8014670:	693b      	ldr	r3, [r7, #16]
 8014672:	689b      	ldr	r3, [r3, #8]
 8014674:	461a      	mov	r2, r3
 8014676:	6879      	ldr	r1, [r7, #4]
 8014678:	68f8      	ldr	r0, [r7, #12]
 801467a:	f000 ff21 	bl	80154c0 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
       (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 801467e:	2300      	movs	r3, #0
 8014680:	2200      	movs	r2, #0
 8014682:	2100      	movs	r1, #0
 8014684:	68f8      	ldr	r0, [r7, #12]
 8014686:	f003 fef2 	bl	801846e <USBD_LL_PrepareReceive>
 801468a:	e03a      	b.n	8014702 <USBD_LL_DataInStage+0xd0>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 801468c:	693b      	ldr	r3, [r7, #16]
 801468e:	68da      	ldr	r2, [r3, #12]
 8014690:	693b      	ldr	r3, [r7, #16]
 8014692:	689b      	ldr	r3, [r3, #8]
 8014694:	429a      	cmp	r2, r3
 8014696:	d11c      	bne.n	80146d2 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8014698:	693b      	ldr	r3, [r7, #16]
 801469a:	685a      	ldr	r2, [r3, #4]
 801469c:	693b      	ldr	r3, [r7, #16]
 801469e:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 80146a0:	429a      	cmp	r2, r3
 80146a2:	d316      	bcc.n	80146d2 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 80146a4:	693b      	ldr	r3, [r7, #16]
 80146a6:	685a      	ldr	r2, [r3, #4]
 80146a8:	68fb      	ldr	r3, [r7, #12]
 80146aa:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 80146ae:	429a      	cmp	r2, r3
 80146b0:	d20f      	bcs.n	80146d2 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 80146b2:	2200      	movs	r2, #0
 80146b4:	2100      	movs	r1, #0
 80146b6:	68f8      	ldr	r0, [r7, #12]
 80146b8:	f000 ff02 	bl	80154c0 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 80146bc:	68fb      	ldr	r3, [r7, #12]
 80146be:	2200      	movs	r2, #0
 80146c0:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80146c4:	2300      	movs	r3, #0
 80146c6:	2200      	movs	r2, #0
 80146c8:	2100      	movs	r1, #0
 80146ca:	68f8      	ldr	r0, [r7, #12]
 80146cc:	f003 fecf 	bl	801846e <USBD_LL_PrepareReceive>
 80146d0:	e017      	b.n	8014702 <USBD_LL_DataInStage+0xd0>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 80146d2:	68fb      	ldr	r3, [r7, #12]
 80146d4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80146d8:	68db      	ldr	r3, [r3, #12]
 80146da:	2b00      	cmp	r3, #0
 80146dc:	d00a      	beq.n	80146f4 <USBD_LL_DataInStage+0xc2>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 80146de:	68fb      	ldr	r3, [r7, #12]
 80146e0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 80146e4:	2b03      	cmp	r3, #3
 80146e6:	d105      	bne.n	80146f4 <USBD_LL_DataInStage+0xc2>
          {
            pdev->pClass->EP0_TxSent(pdev);
 80146e8:	68fb      	ldr	r3, [r7, #12]
 80146ea:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80146ee:	68db      	ldr	r3, [r3, #12]
 80146f0:	68f8      	ldr	r0, [r7, #12]
 80146f2:	4798      	blx	r3
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 80146f4:	2180      	movs	r1, #128	; 0x80
 80146f6:	68f8      	ldr	r0, [r7, #12]
 80146f8:	f003 fe0f 	bl	801831a <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 80146fc:	68f8      	ldr	r0, [r7, #12]
 80146fe:	f000 ff14 	bl	801552a <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 8014702:	68fb      	ldr	r3, [r7, #12]
 8014704:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8014708:	2b01      	cmp	r3, #1
 801470a:	d123      	bne.n	8014754 <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 801470c:	68f8      	ldr	r0, [r7, #12]
 801470e:	f7ff fe9b 	bl	8014448 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8014712:	68fb      	ldr	r3, [r7, #12]
 8014714:	2200      	movs	r2, #0
 8014716:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 801471a:	e01b      	b.n	8014754 <USBD_LL_DataInStage+0x122>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 801471c:	68fb      	ldr	r3, [r7, #12]
 801471e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8014722:	695b      	ldr	r3, [r3, #20]
 8014724:	2b00      	cmp	r3, #0
 8014726:	d013      	beq.n	8014750 <USBD_LL_DataInStage+0x11e>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8014728:	68fb      	ldr	r3, [r7, #12]
 801472a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 801472e:	2b03      	cmp	r3, #3
 8014730:	d10e      	bne.n	8014750 <USBD_LL_DataInStage+0x11e>
  {
    ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 8014732:	68fb      	ldr	r3, [r7, #12]
 8014734:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8014738:	695b      	ldr	r3, [r3, #20]
 801473a:	7afa      	ldrb	r2, [r7, #11]
 801473c:	4611      	mov	r1, r2
 801473e:	68f8      	ldr	r0, [r7, #12]
 8014740:	4798      	blx	r3
 8014742:	4603      	mov	r3, r0
 8014744:	75fb      	strb	r3, [r7, #23]

    if (ret != USBD_OK)
 8014746:	7dfb      	ldrb	r3, [r7, #23]
 8014748:	2b00      	cmp	r3, #0
 801474a:	d003      	beq.n	8014754 <USBD_LL_DataInStage+0x122>
    {
      return ret;
 801474c:	7dfb      	ldrb	r3, [r7, #23]
 801474e:	e002      	b.n	8014756 <USBD_LL_DataInStage+0x124>
    }
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8014750:	2303      	movs	r3, #3
 8014752:	e000      	b.n	8014756 <USBD_LL_DataInStage+0x124>
  }

  return USBD_OK;
 8014754:	2300      	movs	r3, #0
}
 8014756:	4618      	mov	r0, r3
 8014758:	3718      	adds	r7, #24
 801475a:	46bd      	mov	sp, r7
 801475c:	bd80      	pop	{r7, pc}

0801475e <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 801475e:	b580      	push	{r7, lr}
 8014760:	b082      	sub	sp, #8
 8014762:	af00      	add	r7, sp, #0
 8014764:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8014766:	687b      	ldr	r3, [r7, #4]
 8014768:	2201      	movs	r2, #1
 801476a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 801476e:	687b      	ldr	r3, [r7, #4]
 8014770:	2200      	movs	r2, #0
 8014772:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8014776:	687b      	ldr	r3, [r7, #4]
 8014778:	2200      	movs	r2, #0
 801477a:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 801477c:	687b      	ldr	r3, [r7, #4]
 801477e:	2200      	movs	r2, #0
 8014780:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData != NULL)
 8014784:	687b      	ldr	r3, [r7, #4]
 8014786:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 801478a:	2b00      	cmp	r3, #0
 801478c:	d009      	beq.n	80147a2 <USBD_LL_Reset+0x44>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 801478e:	687b      	ldr	r3, [r7, #4]
 8014790:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8014794:	685b      	ldr	r3, [r3, #4]
 8014796:	687a      	ldr	r2, [r7, #4]
 8014798:	6852      	ldr	r2, [r2, #4]
 801479a:	b2d2      	uxtb	r2, r2
 801479c:	4611      	mov	r1, r2
 801479e:	6878      	ldr	r0, [r7, #4]
 80147a0:	4798      	blx	r3
  }

    /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80147a2:	2340      	movs	r3, #64	; 0x40
 80147a4:	2200      	movs	r2, #0
 80147a6:	2100      	movs	r1, #0
 80147a8:	6878      	ldr	r0, [r7, #4]
 80147aa:	f003 fd52 	bl	8018252 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 80147ae:	687b      	ldr	r3, [r7, #4]
 80147b0:	2201      	movs	r2, #1
 80147b2:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 80147b6:	687b      	ldr	r3, [r7, #4]
 80147b8:	2240      	movs	r2, #64	; 0x40
 80147ba:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80147be:	2340      	movs	r3, #64	; 0x40
 80147c0:	2200      	movs	r2, #0
 80147c2:	2180      	movs	r1, #128	; 0x80
 80147c4:	6878      	ldr	r0, [r7, #4]
 80147c6:	f003 fd44 	bl	8018252 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 80147ca:	687b      	ldr	r3, [r7, #4]
 80147cc:	2201      	movs	r2, #1
 80147ce:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 80147d0:	687b      	ldr	r3, [r7, #4]
 80147d2:	2240      	movs	r2, #64	; 0x40
 80147d4:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 80147d6:	2300      	movs	r3, #0
}
 80147d8:	4618      	mov	r0, r3
 80147da:	3708      	adds	r7, #8
 80147dc:	46bd      	mov	sp, r7
 80147de:	bd80      	pop	{r7, pc}

080147e0 <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 80147e0:	b480      	push	{r7}
 80147e2:	b083      	sub	sp, #12
 80147e4:	af00      	add	r7, sp, #0
 80147e6:	6078      	str	r0, [r7, #4]
 80147e8:	460b      	mov	r3, r1
 80147ea:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 80147ec:	687b      	ldr	r3, [r7, #4]
 80147ee:	78fa      	ldrb	r2, [r7, #3]
 80147f0:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 80147f2:	2300      	movs	r3, #0
}
 80147f4:	4618      	mov	r0, r3
 80147f6:	370c      	adds	r7, #12
 80147f8:	46bd      	mov	sp, r7
 80147fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80147fe:	4770      	bx	lr

08014800 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8014800:	b480      	push	{r7}
 8014802:	b083      	sub	sp, #12
 8014804:	af00      	add	r7, sp, #0
 8014806:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 8014808:	687b      	ldr	r3, [r7, #4]
 801480a:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 801480e:	687b      	ldr	r3, [r7, #4]
 8014810:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 8014814:	687b      	ldr	r3, [r7, #4]
 8014816:	2204      	movs	r2, #4
 8014818:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 801481c:	2300      	movs	r3, #0
}
 801481e:	4618      	mov	r0, r3
 8014820:	370c      	adds	r7, #12
 8014822:	46bd      	mov	sp, r7
 8014824:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014828:	4770      	bx	lr

0801482a <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 801482a:	b480      	push	{r7}
 801482c:	b083      	sub	sp, #12
 801482e:	af00      	add	r7, sp, #0
 8014830:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8014832:	687b      	ldr	r3, [r7, #4]
 8014834:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8014838:	2b04      	cmp	r3, #4
 801483a:	d105      	bne.n	8014848 <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 801483c:	687b      	ldr	r3, [r7, #4]
 801483e:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 8014842:	687b      	ldr	r3, [r7, #4]
 8014844:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8014848:	2300      	movs	r3, #0
}
 801484a:	4618      	mov	r0, r3
 801484c:	370c      	adds	r7, #12
 801484e:	46bd      	mov	sp, r7
 8014850:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014854:	4770      	bx	lr

08014856 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8014856:	b580      	push	{r7, lr}
 8014858:	b082      	sub	sp, #8
 801485a:	af00      	add	r7, sp, #0
 801485c:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801485e:	687b      	ldr	r3, [r7, #4]
 8014860:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8014864:	2b03      	cmp	r3, #3
 8014866:	d10b      	bne.n	8014880 <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 8014868:	687b      	ldr	r3, [r7, #4]
 801486a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801486e:	69db      	ldr	r3, [r3, #28]
 8014870:	2b00      	cmp	r3, #0
 8014872:	d005      	beq.n	8014880 <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 8014874:	687b      	ldr	r3, [r7, #4]
 8014876:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801487a:	69db      	ldr	r3, [r3, #28]
 801487c:	6878      	ldr	r0, [r7, #4]
 801487e:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8014880:	2300      	movs	r3, #0
}
 8014882:	4618      	mov	r0, r3
 8014884:	3708      	adds	r7, #8
 8014886:	46bd      	mov	sp, r7
 8014888:	bd80      	pop	{r7, pc}

0801488a <USBD_LL_IsoINIncomplete>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 801488a:	b480      	push	{r7}
 801488c:	b083      	sub	sp, #12
 801488e:	af00      	add	r7, sp, #0
 8014890:	6078      	str	r0, [r7, #4]
 8014892:	460b      	mov	r3, r1
 8014894:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 8014896:	2300      	movs	r3, #0
}
 8014898:	4618      	mov	r0, r3
 801489a:	370c      	adds	r7, #12
 801489c:	46bd      	mov	sp, r7
 801489e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80148a2:	4770      	bx	lr

080148a4 <USBD_LL_IsoOUTIncomplete>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 80148a4:	b480      	push	{r7}
 80148a6:	b083      	sub	sp, #12
 80148a8:	af00      	add	r7, sp, #0
 80148aa:	6078      	str	r0, [r7, #4]
 80148ac:	460b      	mov	r3, r1
 80148ae:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 80148b0:	2300      	movs	r3, #0
}
 80148b2:	4618      	mov	r0, r3
 80148b4:	370c      	adds	r7, #12
 80148b6:	46bd      	mov	sp, r7
 80148b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80148bc:	4770      	bx	lr

080148be <USBD_LL_DevConnected>:
*         Handle device connection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 80148be:	b480      	push	{r7}
 80148c0:	b083      	sub	sp, #12
 80148c2:	af00      	add	r7, sp, #0
 80148c4:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80148c6:	2300      	movs	r3, #0
}
 80148c8:	4618      	mov	r0, r3
 80148ca:	370c      	adds	r7, #12
 80148cc:	46bd      	mov	sp, r7
 80148ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80148d2:	4770      	bx	lr

080148d4 <USBD_LL_DevDisconnected>:
*         Handle device disconnection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 80148d4:	b580      	push	{r7, lr}
 80148d6:	b082      	sub	sp, #8
 80148d8:	af00      	add	r7, sp, #0
 80148da:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80148dc:	687b      	ldr	r3, [r7, #4]
 80148de:	2201      	movs	r2, #1
 80148e0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  if (pdev->pClass != NULL)
 80148e4:	687b      	ldr	r3, [r7, #4]
 80148e6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80148ea:	2b00      	cmp	r3, #0
 80148ec:	d009      	beq.n	8014902 <USBD_LL_DevDisconnected+0x2e>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 80148ee:	687b      	ldr	r3, [r7, #4]
 80148f0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80148f4:	685b      	ldr	r3, [r3, #4]
 80148f6:	687a      	ldr	r2, [r7, #4]
 80148f8:	6852      	ldr	r2, [r2, #4]
 80148fa:	b2d2      	uxtb	r2, r2
 80148fc:	4611      	mov	r1, r2
 80148fe:	6878      	ldr	r0, [r7, #4]
 8014900:	4798      	blx	r3
  }

  return USBD_OK;
 8014902:	2300      	movs	r3, #0
}
 8014904:	4618      	mov	r0, r3
 8014906:	3708      	adds	r7, #8
 8014908:	46bd      	mov	sp, r7
 801490a:	bd80      	pop	{r7, pc}

0801490c <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 801490c:	b480      	push	{r7}
 801490e:	b087      	sub	sp, #28
 8014910:	af00      	add	r7, sp, #0
 8014912:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 8014914:	687b      	ldr	r3, [r7, #4]
 8014916:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8014918:	697b      	ldr	r3, [r7, #20]
 801491a:	781b      	ldrb	r3, [r3, #0]
 801491c:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 801491e:	697b      	ldr	r3, [r7, #20]
 8014920:	3301      	adds	r3, #1
 8014922:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8014924:	697b      	ldr	r3, [r7, #20]
 8014926:	781b      	ldrb	r3, [r3, #0]
 8014928:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 801492a:	8a3b      	ldrh	r3, [r7, #16]
 801492c:	021b      	lsls	r3, r3, #8
 801492e:	b21a      	sxth	r2, r3
 8014930:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8014934:	4313      	orrs	r3, r2
 8014936:	b21b      	sxth	r3, r3
 8014938:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 801493a:	89fb      	ldrh	r3, [r7, #14]
}
 801493c:	4618      	mov	r0, r3
 801493e:	371c      	adds	r7, #28
 8014940:	46bd      	mov	sp, r7
 8014942:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014946:	4770      	bx	lr

08014948 <USBD_StdDevReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8014948:	b580      	push	{r7, lr}
 801494a:	b084      	sub	sp, #16
 801494c:	af00      	add	r7, sp, #0
 801494e:	6078      	str	r0, [r7, #4]
 8014950:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8014952:	2300      	movs	r3, #0
 8014954:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8014956:	683b      	ldr	r3, [r7, #0]
 8014958:	781b      	ldrb	r3, [r3, #0]
 801495a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 801495e:	2b20      	cmp	r3, #32
 8014960:	d004      	beq.n	801496c <USBD_StdDevReq+0x24>
 8014962:	2b40      	cmp	r3, #64	; 0x40
 8014964:	d002      	beq.n	801496c <USBD_StdDevReq+0x24>
 8014966:	2b00      	cmp	r3, #0
 8014968:	d00a      	beq.n	8014980 <USBD_StdDevReq+0x38>
 801496a:	e050      	b.n	8014a0e <USBD_StdDevReq+0xc6>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 801496c:	687b      	ldr	r3, [r7, #4]
 801496e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8014972:	689b      	ldr	r3, [r3, #8]
 8014974:	6839      	ldr	r1, [r7, #0]
 8014976:	6878      	ldr	r0, [r7, #4]
 8014978:	4798      	blx	r3
 801497a:	4603      	mov	r3, r0
 801497c:	73fb      	strb	r3, [r7, #15]
    break;
 801497e:	e04b      	b.n	8014a18 <USBD_StdDevReq+0xd0>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 8014980:	683b      	ldr	r3, [r7, #0]
 8014982:	785b      	ldrb	r3, [r3, #1]
 8014984:	2b09      	cmp	r3, #9
 8014986:	d83c      	bhi.n	8014a02 <USBD_StdDevReq+0xba>
 8014988:	a201      	add	r2, pc, #4	; (adr r2, 8014990 <USBD_StdDevReq+0x48>)
 801498a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801498e:	bf00      	nop
 8014990:	080149e5 	.word	0x080149e5
 8014994:	080149f9 	.word	0x080149f9
 8014998:	08014a03 	.word	0x08014a03
 801499c:	080149ef 	.word	0x080149ef
 80149a0:	08014a03 	.word	0x08014a03
 80149a4:	080149c3 	.word	0x080149c3
 80149a8:	080149b9 	.word	0x080149b9
 80149ac:	08014a03 	.word	0x08014a03
 80149b0:	080149db 	.word	0x080149db
 80149b4:	080149cd 	.word	0x080149cd
    {
    case USB_REQ_GET_DESCRIPTOR:
      USBD_GetDescriptor(pdev, req);
 80149b8:	6839      	ldr	r1, [r7, #0]
 80149ba:	6878      	ldr	r0, [r7, #4]
 80149bc:	f000 f9ce 	bl	8014d5c <USBD_GetDescriptor>
      break;
 80149c0:	e024      	b.n	8014a0c <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_ADDRESS:
      USBD_SetAddress(pdev, req);
 80149c2:	6839      	ldr	r1, [r7, #0]
 80149c4:	6878      	ldr	r0, [r7, #4]
 80149c6:	f000 fb33 	bl	8015030 <USBD_SetAddress>
      break;
 80149ca:	e01f      	b.n	8014a0c <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_CONFIGURATION:
      ret = USBD_SetConfig(pdev, req);
 80149cc:	6839      	ldr	r1, [r7, #0]
 80149ce:	6878      	ldr	r0, [r7, #4]
 80149d0:	f000 fb70 	bl	80150b4 <USBD_SetConfig>
 80149d4:	4603      	mov	r3, r0
 80149d6:	73fb      	strb	r3, [r7, #15]
      break;
 80149d8:	e018      	b.n	8014a0c <USBD_StdDevReq+0xc4>

    case USB_REQ_GET_CONFIGURATION:
      USBD_GetConfig(pdev, req);
 80149da:	6839      	ldr	r1, [r7, #0]
 80149dc:	6878      	ldr	r0, [r7, #4]
 80149de:	f000 fc0d 	bl	80151fc <USBD_GetConfig>
      break;
 80149e2:	e013      	b.n	8014a0c <USBD_StdDevReq+0xc4>

    case USB_REQ_GET_STATUS:
      USBD_GetStatus(pdev, req);
 80149e4:	6839      	ldr	r1, [r7, #0]
 80149e6:	6878      	ldr	r0, [r7, #4]
 80149e8:	f000 fc3c 	bl	8015264 <USBD_GetStatus>
      break;
 80149ec:	e00e      	b.n	8014a0c <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_FEATURE:
      USBD_SetFeature(pdev, req);
 80149ee:	6839      	ldr	r1, [r7, #0]
 80149f0:	6878      	ldr	r0, [r7, #4]
 80149f2:	f000 fc6a 	bl	80152ca <USBD_SetFeature>
      break;
 80149f6:	e009      	b.n	8014a0c <USBD_StdDevReq+0xc4>

    case USB_REQ_CLEAR_FEATURE:
      USBD_ClrFeature(pdev, req);
 80149f8:	6839      	ldr	r1, [r7, #0]
 80149fa:	6878      	ldr	r0, [r7, #4]
 80149fc:	f000 fc79 	bl	80152f2 <USBD_ClrFeature>
      break;
 8014a00:	e004      	b.n	8014a0c <USBD_StdDevReq+0xc4>

    default:
      USBD_CtlError(pdev, req);
 8014a02:	6839      	ldr	r1, [r7, #0]
 8014a04:	6878      	ldr	r0, [r7, #4]
 8014a06:	f000 fccf 	bl	80153a8 <USBD_CtlError>
      break;
 8014a0a:	bf00      	nop
    }
    break;
 8014a0c:	e004      	b.n	8014a18 <USBD_StdDevReq+0xd0>

  default:
    USBD_CtlError(pdev, req);
 8014a0e:	6839      	ldr	r1, [r7, #0]
 8014a10:	6878      	ldr	r0, [r7, #4]
 8014a12:	f000 fcc9 	bl	80153a8 <USBD_CtlError>
    break;
 8014a16:	bf00      	nop
  }

  return ret;
 8014a18:	7bfb      	ldrb	r3, [r7, #15]
}
 8014a1a:	4618      	mov	r0, r3
 8014a1c:	3710      	adds	r7, #16
 8014a1e:	46bd      	mov	sp, r7
 8014a20:	bd80      	pop	{r7, pc}
 8014a22:	bf00      	nop

08014a24 <USBD_StdItfReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8014a24:	b580      	push	{r7, lr}
 8014a26:	b084      	sub	sp, #16
 8014a28:	af00      	add	r7, sp, #0
 8014a2a:	6078      	str	r0, [r7, #4]
 8014a2c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8014a2e:	2300      	movs	r3, #0
 8014a30:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8014a32:	683b      	ldr	r3, [r7, #0]
 8014a34:	781b      	ldrb	r3, [r3, #0]
 8014a36:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8014a3a:	2b20      	cmp	r3, #32
 8014a3c:	d003      	beq.n	8014a46 <USBD_StdItfReq+0x22>
 8014a3e:	2b40      	cmp	r3, #64	; 0x40
 8014a40:	d001      	beq.n	8014a46 <USBD_StdItfReq+0x22>
 8014a42:	2b00      	cmp	r3, #0
 8014a44:	d12a      	bne.n	8014a9c <USBD_StdItfReq+0x78>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
  case USB_REQ_TYPE_STANDARD:
    switch (pdev->dev_state)
 8014a46:	687b      	ldr	r3, [r7, #4]
 8014a48:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8014a4c:	3b01      	subs	r3, #1
 8014a4e:	2b02      	cmp	r3, #2
 8014a50:	d81d      	bhi.n	8014a8e <USBD_StdItfReq+0x6a>
    {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:

      if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8014a52:	683b      	ldr	r3, [r7, #0]
 8014a54:	889b      	ldrh	r3, [r3, #4]
 8014a56:	b2db      	uxtb	r3, r3
 8014a58:	2b01      	cmp	r3, #1
 8014a5a:	d813      	bhi.n	8014a84 <USBD_StdItfReq+0x60>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8014a5c:	687b      	ldr	r3, [r7, #4]
 8014a5e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8014a62:	689b      	ldr	r3, [r3, #8]
 8014a64:	6839      	ldr	r1, [r7, #0]
 8014a66:	6878      	ldr	r0, [r7, #4]
 8014a68:	4798      	blx	r3
 8014a6a:	4603      	mov	r3, r0
 8014a6c:	73fb      	strb	r3, [r7, #15]

        if ((req->wLength == 0U) && (ret == USBD_OK))
 8014a6e:	683b      	ldr	r3, [r7, #0]
 8014a70:	88db      	ldrh	r3, [r3, #6]
 8014a72:	2b00      	cmp	r3, #0
 8014a74:	d110      	bne.n	8014a98 <USBD_StdItfReq+0x74>
 8014a76:	7bfb      	ldrb	r3, [r7, #15]
 8014a78:	2b00      	cmp	r3, #0
 8014a7a:	d10d      	bne.n	8014a98 <USBD_StdItfReq+0x74>
        {
          (void)USBD_CtlSendStatus(pdev);
 8014a7c:	6878      	ldr	r0, [r7, #4]
 8014a7e:	f000 fd41 	bl	8015504 <USBD_CtlSendStatus>
      }
      else
      {
        USBD_CtlError(pdev, req);
      }
      break;
 8014a82:	e009      	b.n	8014a98 <USBD_StdItfReq+0x74>
        USBD_CtlError(pdev, req);
 8014a84:	6839      	ldr	r1, [r7, #0]
 8014a86:	6878      	ldr	r0, [r7, #4]
 8014a88:	f000 fc8e 	bl	80153a8 <USBD_CtlError>
      break;
 8014a8c:	e004      	b.n	8014a98 <USBD_StdItfReq+0x74>

    default:
      USBD_CtlError(pdev, req);
 8014a8e:	6839      	ldr	r1, [r7, #0]
 8014a90:	6878      	ldr	r0, [r7, #4]
 8014a92:	f000 fc89 	bl	80153a8 <USBD_CtlError>
      break;
 8014a96:	e000      	b.n	8014a9a <USBD_StdItfReq+0x76>
      break;
 8014a98:	bf00      	nop
    }
    break;
 8014a9a:	e004      	b.n	8014aa6 <USBD_StdItfReq+0x82>

  default:
    USBD_CtlError(pdev, req);
 8014a9c:	6839      	ldr	r1, [r7, #0]
 8014a9e:	6878      	ldr	r0, [r7, #4]
 8014aa0:	f000 fc82 	bl	80153a8 <USBD_CtlError>
    break;
 8014aa4:	bf00      	nop
  }

  return ret;
 8014aa6:	7bfb      	ldrb	r3, [r7, #15]
}
 8014aa8:	4618      	mov	r0, r3
 8014aaa:	3710      	adds	r7, #16
 8014aac:	46bd      	mov	sp, r7
 8014aae:	bd80      	pop	{r7, pc}

08014ab0 <USBD_StdEPReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8014ab0:	b580      	push	{r7, lr}
 8014ab2:	b084      	sub	sp, #16
 8014ab4:	af00      	add	r7, sp, #0
 8014ab6:	6078      	str	r0, [r7, #4]
 8014ab8:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8014aba:	2300      	movs	r3, #0
 8014abc:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 8014abe:	683b      	ldr	r3, [r7, #0]
 8014ac0:	889b      	ldrh	r3, [r3, #4]
 8014ac2:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8014ac4:	683b      	ldr	r3, [r7, #0]
 8014ac6:	781b      	ldrb	r3, [r3, #0]
 8014ac8:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8014acc:	2b20      	cmp	r3, #32
 8014ace:	d004      	beq.n	8014ada <USBD_StdEPReq+0x2a>
 8014ad0:	2b40      	cmp	r3, #64	; 0x40
 8014ad2:	d002      	beq.n	8014ada <USBD_StdEPReq+0x2a>
 8014ad4:	2b00      	cmp	r3, #0
 8014ad6:	d00a      	beq.n	8014aee <USBD_StdEPReq+0x3e>
 8014ad8:	e135      	b.n	8014d46 <USBD_StdEPReq+0x296>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8014ada:	687b      	ldr	r3, [r7, #4]
 8014adc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8014ae0:	689b      	ldr	r3, [r3, #8]
 8014ae2:	6839      	ldr	r1, [r7, #0]
 8014ae4:	6878      	ldr	r0, [r7, #4]
 8014ae6:	4798      	blx	r3
 8014ae8:	4603      	mov	r3, r0
 8014aea:	73fb      	strb	r3, [r7, #15]
    break;
 8014aec:	e130      	b.n	8014d50 <USBD_StdEPReq+0x2a0>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 8014aee:	683b      	ldr	r3, [r7, #0]
 8014af0:	785b      	ldrb	r3, [r3, #1]
 8014af2:	2b01      	cmp	r3, #1
 8014af4:	d03e      	beq.n	8014b74 <USBD_StdEPReq+0xc4>
 8014af6:	2b03      	cmp	r3, #3
 8014af8:	d002      	beq.n	8014b00 <USBD_StdEPReq+0x50>
 8014afa:	2b00      	cmp	r3, #0
 8014afc:	d077      	beq.n	8014bee <USBD_StdEPReq+0x13e>
 8014afe:	e11c      	b.n	8014d3a <USBD_StdEPReq+0x28a>
    {
    case USB_REQ_SET_FEATURE:
      switch (pdev->dev_state)
 8014b00:	687b      	ldr	r3, [r7, #4]
 8014b02:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8014b06:	2b02      	cmp	r3, #2
 8014b08:	d002      	beq.n	8014b10 <USBD_StdEPReq+0x60>
 8014b0a:	2b03      	cmp	r3, #3
 8014b0c:	d015      	beq.n	8014b3a <USBD_StdEPReq+0x8a>
 8014b0e:	e02b      	b.n	8014b68 <USBD_StdEPReq+0xb8>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8014b10:	7bbb      	ldrb	r3, [r7, #14]
 8014b12:	2b00      	cmp	r3, #0
 8014b14:	d00c      	beq.n	8014b30 <USBD_StdEPReq+0x80>
 8014b16:	7bbb      	ldrb	r3, [r7, #14]
 8014b18:	2b80      	cmp	r3, #128	; 0x80
 8014b1a:	d009      	beq.n	8014b30 <USBD_StdEPReq+0x80>
        {
          (void)USBD_LL_StallEP(pdev, ep_addr);
 8014b1c:	7bbb      	ldrb	r3, [r7, #14]
 8014b1e:	4619      	mov	r1, r3
 8014b20:	6878      	ldr	r0, [r7, #4]
 8014b22:	f003 fbfa 	bl	801831a <USBD_LL_StallEP>
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8014b26:	2180      	movs	r1, #128	; 0x80
 8014b28:	6878      	ldr	r0, [r7, #4]
 8014b2a:	f003 fbf6 	bl	801831a <USBD_LL_StallEP>
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 8014b2e:	e020      	b.n	8014b72 <USBD_StdEPReq+0xc2>
          USBD_CtlError(pdev, req);
 8014b30:	6839      	ldr	r1, [r7, #0]
 8014b32:	6878      	ldr	r0, [r7, #4]
 8014b34:	f000 fc38 	bl	80153a8 <USBD_CtlError>
        break;
 8014b38:	e01b      	b.n	8014b72 <USBD_StdEPReq+0xc2>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 8014b3a:	683b      	ldr	r3, [r7, #0]
 8014b3c:	885b      	ldrh	r3, [r3, #2]
 8014b3e:	2b00      	cmp	r3, #0
 8014b40:	d10e      	bne.n	8014b60 <USBD_StdEPReq+0xb0>
        {
          if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8014b42:	7bbb      	ldrb	r3, [r7, #14]
 8014b44:	2b00      	cmp	r3, #0
 8014b46:	d00b      	beq.n	8014b60 <USBD_StdEPReq+0xb0>
 8014b48:	7bbb      	ldrb	r3, [r7, #14]
 8014b4a:	2b80      	cmp	r3, #128	; 0x80
 8014b4c:	d008      	beq.n	8014b60 <USBD_StdEPReq+0xb0>
 8014b4e:	683b      	ldr	r3, [r7, #0]
 8014b50:	88db      	ldrh	r3, [r3, #6]
 8014b52:	2b00      	cmp	r3, #0
 8014b54:	d104      	bne.n	8014b60 <USBD_StdEPReq+0xb0>
          {
            (void)USBD_LL_StallEP(pdev, ep_addr);
 8014b56:	7bbb      	ldrb	r3, [r7, #14]
 8014b58:	4619      	mov	r1, r3
 8014b5a:	6878      	ldr	r0, [r7, #4]
 8014b5c:	f003 fbdd 	bl	801831a <USBD_LL_StallEP>
          }
        }
        (void)USBD_CtlSendStatus(pdev);
 8014b60:	6878      	ldr	r0, [r7, #4]
 8014b62:	f000 fccf 	bl	8015504 <USBD_CtlSendStatus>

        break;
 8014b66:	e004      	b.n	8014b72 <USBD_StdEPReq+0xc2>

      default:
        USBD_CtlError(pdev, req);
 8014b68:	6839      	ldr	r1, [r7, #0]
 8014b6a:	6878      	ldr	r0, [r7, #4]
 8014b6c:	f000 fc1c 	bl	80153a8 <USBD_CtlError>
        break;
 8014b70:	bf00      	nop
      }
      break;
 8014b72:	e0e7      	b.n	8014d44 <USBD_StdEPReq+0x294>

    case USB_REQ_CLEAR_FEATURE:

      switch (pdev->dev_state)
 8014b74:	687b      	ldr	r3, [r7, #4]
 8014b76:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8014b7a:	2b02      	cmp	r3, #2
 8014b7c:	d002      	beq.n	8014b84 <USBD_StdEPReq+0xd4>
 8014b7e:	2b03      	cmp	r3, #3
 8014b80:	d015      	beq.n	8014bae <USBD_StdEPReq+0xfe>
 8014b82:	e02d      	b.n	8014be0 <USBD_StdEPReq+0x130>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8014b84:	7bbb      	ldrb	r3, [r7, #14]
 8014b86:	2b00      	cmp	r3, #0
 8014b88:	d00c      	beq.n	8014ba4 <USBD_StdEPReq+0xf4>
 8014b8a:	7bbb      	ldrb	r3, [r7, #14]
 8014b8c:	2b80      	cmp	r3, #128	; 0x80
 8014b8e:	d009      	beq.n	8014ba4 <USBD_StdEPReq+0xf4>
        {
          (void)USBD_LL_StallEP(pdev, ep_addr);
 8014b90:	7bbb      	ldrb	r3, [r7, #14]
 8014b92:	4619      	mov	r1, r3
 8014b94:	6878      	ldr	r0, [r7, #4]
 8014b96:	f003 fbc0 	bl	801831a <USBD_LL_StallEP>
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8014b9a:	2180      	movs	r1, #128	; 0x80
 8014b9c:	6878      	ldr	r0, [r7, #4]
 8014b9e:	f003 fbbc 	bl	801831a <USBD_LL_StallEP>
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 8014ba2:	e023      	b.n	8014bec <USBD_StdEPReq+0x13c>
          USBD_CtlError(pdev, req);
 8014ba4:	6839      	ldr	r1, [r7, #0]
 8014ba6:	6878      	ldr	r0, [r7, #4]
 8014ba8:	f000 fbfe 	bl	80153a8 <USBD_CtlError>
        break;
 8014bac:	e01e      	b.n	8014bec <USBD_StdEPReq+0x13c>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 8014bae:	683b      	ldr	r3, [r7, #0]
 8014bb0:	885b      	ldrh	r3, [r3, #2]
 8014bb2:	2b00      	cmp	r3, #0
 8014bb4:	d119      	bne.n	8014bea <USBD_StdEPReq+0x13a>
        {
          if ((ep_addr & 0x7FU) != 0x00U)
 8014bb6:	7bbb      	ldrb	r3, [r7, #14]
 8014bb8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8014bbc:	2b00      	cmp	r3, #0
 8014bbe:	d004      	beq.n	8014bca <USBD_StdEPReq+0x11a>
          {
            (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8014bc0:	7bbb      	ldrb	r3, [r7, #14]
 8014bc2:	4619      	mov	r1, r3
 8014bc4:	6878      	ldr	r0, [r7, #4]
 8014bc6:	f003 fbc7 	bl	8018358 <USBD_LL_ClearStallEP>
          }
          (void)USBD_CtlSendStatus(pdev);
 8014bca:	6878      	ldr	r0, [r7, #4]
 8014bcc:	f000 fc9a 	bl	8015504 <USBD_CtlSendStatus>
          (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8014bd0:	687b      	ldr	r3, [r7, #4]
 8014bd2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8014bd6:	689b      	ldr	r3, [r3, #8]
 8014bd8:	6839      	ldr	r1, [r7, #0]
 8014bda:	6878      	ldr	r0, [r7, #4]
 8014bdc:	4798      	blx	r3
        }
        break;
 8014bde:	e004      	b.n	8014bea <USBD_StdEPReq+0x13a>

      default:
        USBD_CtlError(pdev, req);
 8014be0:	6839      	ldr	r1, [r7, #0]
 8014be2:	6878      	ldr	r0, [r7, #4]
 8014be4:	f000 fbe0 	bl	80153a8 <USBD_CtlError>
        break;
 8014be8:	e000      	b.n	8014bec <USBD_StdEPReq+0x13c>
        break;
 8014bea:	bf00      	nop
      }
      break;
 8014bec:	e0aa      	b.n	8014d44 <USBD_StdEPReq+0x294>

    case USB_REQ_GET_STATUS:
      switch (pdev->dev_state)
 8014bee:	687b      	ldr	r3, [r7, #4]
 8014bf0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8014bf4:	2b02      	cmp	r3, #2
 8014bf6:	d002      	beq.n	8014bfe <USBD_StdEPReq+0x14e>
 8014bf8:	2b03      	cmp	r3, #3
 8014bfa:	d032      	beq.n	8014c62 <USBD_StdEPReq+0x1b2>
 8014bfc:	e097      	b.n	8014d2e <USBD_StdEPReq+0x27e>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8014bfe:	7bbb      	ldrb	r3, [r7, #14]
 8014c00:	2b00      	cmp	r3, #0
 8014c02:	d007      	beq.n	8014c14 <USBD_StdEPReq+0x164>
 8014c04:	7bbb      	ldrb	r3, [r7, #14]
 8014c06:	2b80      	cmp	r3, #128	; 0x80
 8014c08:	d004      	beq.n	8014c14 <USBD_StdEPReq+0x164>
        {
          USBD_CtlError(pdev, req);
 8014c0a:	6839      	ldr	r1, [r7, #0]
 8014c0c:	6878      	ldr	r0, [r7, #4]
 8014c0e:	f000 fbcb 	bl	80153a8 <USBD_CtlError>
          break;
 8014c12:	e091      	b.n	8014d38 <USBD_StdEPReq+0x288>
        }
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8014c14:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8014c18:	2b00      	cmp	r3, #0
 8014c1a:	da0b      	bge.n	8014c34 <USBD_StdEPReq+0x184>
 8014c1c:	7bbb      	ldrb	r3, [r7, #14]
 8014c1e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8014c22:	4613      	mov	r3, r2
 8014c24:	009b      	lsls	r3, r3, #2
 8014c26:	4413      	add	r3, r2
 8014c28:	009b      	lsls	r3, r3, #2
 8014c2a:	3310      	adds	r3, #16
 8014c2c:	687a      	ldr	r2, [r7, #4]
 8014c2e:	4413      	add	r3, r2
 8014c30:	3304      	adds	r3, #4
 8014c32:	e00b      	b.n	8014c4c <USBD_StdEPReq+0x19c>
              &pdev->ep_out[ep_addr & 0x7FU];
 8014c34:	7bbb      	ldrb	r3, [r7, #14]
 8014c36:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8014c3a:	4613      	mov	r3, r2
 8014c3c:	009b      	lsls	r3, r3, #2
 8014c3e:	4413      	add	r3, r2
 8014c40:	009b      	lsls	r3, r3, #2
 8014c42:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8014c46:	687a      	ldr	r2, [r7, #4]
 8014c48:	4413      	add	r3, r2
 8014c4a:	3304      	adds	r3, #4
 8014c4c:	60bb      	str	r3, [r7, #8]

        pep->status = 0x0000U;
 8014c4e:	68bb      	ldr	r3, [r7, #8]
 8014c50:	2200      	movs	r2, #0
 8014c52:	601a      	str	r2, [r3, #0]

        (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8014c54:	68bb      	ldr	r3, [r7, #8]
 8014c56:	2202      	movs	r2, #2
 8014c58:	4619      	mov	r1, r3
 8014c5a:	6878      	ldr	r0, [r7, #4]
 8014c5c:	f000 fc15 	bl	801548a <USBD_CtlSendData>
        break;
 8014c60:	e06a      	b.n	8014d38 <USBD_StdEPReq+0x288>

      case USBD_STATE_CONFIGURED:
        if ((ep_addr & 0x80U) == 0x80U)
 8014c62:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8014c66:	2b00      	cmp	r3, #0
 8014c68:	da11      	bge.n	8014c8e <USBD_StdEPReq+0x1de>
        {
          if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8014c6a:	7bbb      	ldrb	r3, [r7, #14]
 8014c6c:	f003 020f 	and.w	r2, r3, #15
 8014c70:	6879      	ldr	r1, [r7, #4]
 8014c72:	4613      	mov	r3, r2
 8014c74:	009b      	lsls	r3, r3, #2
 8014c76:	4413      	add	r3, r2
 8014c78:	009b      	lsls	r3, r3, #2
 8014c7a:	440b      	add	r3, r1
 8014c7c:	3324      	adds	r3, #36	; 0x24
 8014c7e:	881b      	ldrh	r3, [r3, #0]
 8014c80:	2b00      	cmp	r3, #0
 8014c82:	d117      	bne.n	8014cb4 <USBD_StdEPReq+0x204>
          {
            USBD_CtlError(pdev, req);
 8014c84:	6839      	ldr	r1, [r7, #0]
 8014c86:	6878      	ldr	r0, [r7, #4]
 8014c88:	f000 fb8e 	bl	80153a8 <USBD_CtlError>
            break;
 8014c8c:	e054      	b.n	8014d38 <USBD_StdEPReq+0x288>
          }
        }
        else
        {
          if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8014c8e:	7bbb      	ldrb	r3, [r7, #14]
 8014c90:	f003 020f 	and.w	r2, r3, #15
 8014c94:	6879      	ldr	r1, [r7, #4]
 8014c96:	4613      	mov	r3, r2
 8014c98:	009b      	lsls	r3, r3, #2
 8014c9a:	4413      	add	r3, r2
 8014c9c:	009b      	lsls	r3, r3, #2
 8014c9e:	440b      	add	r3, r1
 8014ca0:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8014ca4:	881b      	ldrh	r3, [r3, #0]
 8014ca6:	2b00      	cmp	r3, #0
 8014ca8:	d104      	bne.n	8014cb4 <USBD_StdEPReq+0x204>
          {
            USBD_CtlError(pdev, req);
 8014caa:	6839      	ldr	r1, [r7, #0]
 8014cac:	6878      	ldr	r0, [r7, #4]
 8014cae:	f000 fb7b 	bl	80153a8 <USBD_CtlError>
            break;
 8014cb2:	e041      	b.n	8014d38 <USBD_StdEPReq+0x288>
          }
        }

        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8014cb4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8014cb8:	2b00      	cmp	r3, #0
 8014cba:	da0b      	bge.n	8014cd4 <USBD_StdEPReq+0x224>
 8014cbc:	7bbb      	ldrb	r3, [r7, #14]
 8014cbe:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8014cc2:	4613      	mov	r3, r2
 8014cc4:	009b      	lsls	r3, r3, #2
 8014cc6:	4413      	add	r3, r2
 8014cc8:	009b      	lsls	r3, r3, #2
 8014cca:	3310      	adds	r3, #16
 8014ccc:	687a      	ldr	r2, [r7, #4]
 8014cce:	4413      	add	r3, r2
 8014cd0:	3304      	adds	r3, #4
 8014cd2:	e00b      	b.n	8014cec <USBD_StdEPReq+0x23c>
              &pdev->ep_out[ep_addr & 0x7FU];
 8014cd4:	7bbb      	ldrb	r3, [r7, #14]
 8014cd6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8014cda:	4613      	mov	r3, r2
 8014cdc:	009b      	lsls	r3, r3, #2
 8014cde:	4413      	add	r3, r2
 8014ce0:	009b      	lsls	r3, r3, #2
 8014ce2:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8014ce6:	687a      	ldr	r2, [r7, #4]
 8014ce8:	4413      	add	r3, r2
 8014cea:	3304      	adds	r3, #4
 8014cec:	60bb      	str	r3, [r7, #8]

          if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8014cee:	7bbb      	ldrb	r3, [r7, #14]
 8014cf0:	2b00      	cmp	r3, #0
 8014cf2:	d002      	beq.n	8014cfa <USBD_StdEPReq+0x24a>
 8014cf4:	7bbb      	ldrb	r3, [r7, #14]
 8014cf6:	2b80      	cmp	r3, #128	; 0x80
 8014cf8:	d103      	bne.n	8014d02 <USBD_StdEPReq+0x252>
          {
            pep->status = 0x0000U;
 8014cfa:	68bb      	ldr	r3, [r7, #8]
 8014cfc:	2200      	movs	r2, #0
 8014cfe:	601a      	str	r2, [r3, #0]
 8014d00:	e00e      	b.n	8014d20 <USBD_StdEPReq+0x270>
          }
          else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8014d02:	7bbb      	ldrb	r3, [r7, #14]
 8014d04:	4619      	mov	r1, r3
 8014d06:	6878      	ldr	r0, [r7, #4]
 8014d08:	f003 fb45 	bl	8018396 <USBD_LL_IsStallEP>
 8014d0c:	4603      	mov	r3, r0
 8014d0e:	2b00      	cmp	r3, #0
 8014d10:	d003      	beq.n	8014d1a <USBD_StdEPReq+0x26a>
          {
            pep->status = 0x0001U;
 8014d12:	68bb      	ldr	r3, [r7, #8]
 8014d14:	2201      	movs	r2, #1
 8014d16:	601a      	str	r2, [r3, #0]
 8014d18:	e002      	b.n	8014d20 <USBD_StdEPReq+0x270>
          }
          else
          {
            pep->status = 0x0000U;
 8014d1a:	68bb      	ldr	r3, [r7, #8]
 8014d1c:	2200      	movs	r2, #0
 8014d1e:	601a      	str	r2, [r3, #0]
          }

          (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8014d20:	68bb      	ldr	r3, [r7, #8]
 8014d22:	2202      	movs	r2, #2
 8014d24:	4619      	mov	r1, r3
 8014d26:	6878      	ldr	r0, [r7, #4]
 8014d28:	f000 fbaf 	bl	801548a <USBD_CtlSendData>
          break;
 8014d2c:	e004      	b.n	8014d38 <USBD_StdEPReq+0x288>

      default:
        USBD_CtlError(pdev, req);
 8014d2e:	6839      	ldr	r1, [r7, #0]
 8014d30:	6878      	ldr	r0, [r7, #4]
 8014d32:	f000 fb39 	bl	80153a8 <USBD_CtlError>
        break;
 8014d36:	bf00      	nop
      }
      break;
 8014d38:	e004      	b.n	8014d44 <USBD_StdEPReq+0x294>

    default:
      USBD_CtlError(pdev, req);
 8014d3a:	6839      	ldr	r1, [r7, #0]
 8014d3c:	6878      	ldr	r0, [r7, #4]
 8014d3e:	f000 fb33 	bl	80153a8 <USBD_CtlError>
      break;
 8014d42:	bf00      	nop
    }
    break;
 8014d44:	e004      	b.n	8014d50 <USBD_StdEPReq+0x2a0>

  default:
    USBD_CtlError(pdev, req);
 8014d46:	6839      	ldr	r1, [r7, #0]
 8014d48:	6878      	ldr	r0, [r7, #4]
 8014d4a:	f000 fb2d 	bl	80153a8 <USBD_CtlError>
    break;
 8014d4e:	bf00      	nop
  }

  return ret;
 8014d50:	7bfb      	ldrb	r3, [r7, #15]
}
 8014d52:	4618      	mov	r0, r3
 8014d54:	3710      	adds	r7, #16
 8014d56:	46bd      	mov	sp, r7
 8014d58:	bd80      	pop	{r7, pc}
	...

08014d5c <USBD_GetDescriptor>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8014d5c:	b580      	push	{r7, lr}
 8014d5e:	b084      	sub	sp, #16
 8014d60:	af00      	add	r7, sp, #0
 8014d62:	6078      	str	r0, [r7, #4]
 8014d64:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8014d66:	2300      	movs	r3, #0
 8014d68:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8014d6a:	2300      	movs	r3, #0
 8014d6c:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8014d6e:	2300      	movs	r3, #0
 8014d70:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8014d72:	683b      	ldr	r3, [r7, #0]
 8014d74:	885b      	ldrh	r3, [r3, #2]
 8014d76:	0a1b      	lsrs	r3, r3, #8
 8014d78:	b29b      	uxth	r3, r3
 8014d7a:	3b01      	subs	r3, #1
 8014d7c:	2b06      	cmp	r3, #6
 8014d7e:	f200 8128 	bhi.w	8014fd2 <USBD_GetDescriptor+0x276>
 8014d82:	a201      	add	r2, pc, #4	; (adr r2, 8014d88 <USBD_GetDescriptor+0x2c>)
 8014d84:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8014d88:	08014da5 	.word	0x08014da5
 8014d8c:	08014dbd 	.word	0x08014dbd
 8014d90:	08014dfd 	.word	0x08014dfd
 8014d94:	08014fd3 	.word	0x08014fd3
 8014d98:	08014fd3 	.word	0x08014fd3
 8014d9c:	08014f73 	.word	0x08014f73
 8014da0:	08014f9f 	.word	0x08014f9f
      err++;
    }
    break;
#endif
  case USB_DESC_TYPE_DEVICE:
    pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8014da4:	687b      	ldr	r3, [r7, #4]
 8014da6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8014daa:	681b      	ldr	r3, [r3, #0]
 8014dac:	687a      	ldr	r2, [r7, #4]
 8014dae:	7c12      	ldrb	r2, [r2, #16]
 8014db0:	f107 0108 	add.w	r1, r7, #8
 8014db4:	4610      	mov	r0, r2
 8014db6:	4798      	blx	r3
 8014db8:	60f8      	str	r0, [r7, #12]
    break;
 8014dba:	e112      	b.n	8014fe2 <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_CONFIGURATION:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8014dbc:	687b      	ldr	r3, [r7, #4]
 8014dbe:	7c1b      	ldrb	r3, [r3, #16]
 8014dc0:	2b00      	cmp	r3, #0
 8014dc2:	d10d      	bne.n	8014de0 <USBD_GetDescriptor+0x84>
    {
      pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8014dc4:	687b      	ldr	r3, [r7, #4]
 8014dc6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8014dca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8014dcc:	f107 0208 	add.w	r2, r7, #8
 8014dd0:	4610      	mov	r0, r2
 8014dd2:	4798      	blx	r3
 8014dd4:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8014dd6:	68fb      	ldr	r3, [r7, #12]
 8014dd8:	3301      	adds	r3, #1
 8014dda:	2202      	movs	r2, #2
 8014ddc:	701a      	strb	r2, [r3, #0]
    else
    {
      pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
    }
    break;
 8014dde:	e100      	b.n	8014fe2 <USBD_GetDescriptor+0x286>
      pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8014de0:	687b      	ldr	r3, [r7, #4]
 8014de2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8014de6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014de8:	f107 0208 	add.w	r2, r7, #8
 8014dec:	4610      	mov	r0, r2
 8014dee:	4798      	blx	r3
 8014df0:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8014df2:	68fb      	ldr	r3, [r7, #12]
 8014df4:	3301      	adds	r3, #1
 8014df6:	2202      	movs	r2, #2
 8014df8:	701a      	strb	r2, [r3, #0]
    break;
 8014dfa:	e0f2      	b.n	8014fe2 <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_STRING:
    switch ((uint8_t)(req->wValue))
 8014dfc:	683b      	ldr	r3, [r7, #0]
 8014dfe:	885b      	ldrh	r3, [r3, #2]
 8014e00:	b2db      	uxtb	r3, r3
 8014e02:	2b05      	cmp	r3, #5
 8014e04:	f200 80ac 	bhi.w	8014f60 <USBD_GetDescriptor+0x204>
 8014e08:	a201      	add	r2, pc, #4	; (adr r2, 8014e10 <USBD_GetDescriptor+0xb4>)
 8014e0a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8014e0e:	bf00      	nop
 8014e10:	08014e29 	.word	0x08014e29
 8014e14:	08014e5d 	.word	0x08014e5d
 8014e18:	08014e91 	.word	0x08014e91
 8014e1c:	08014ec5 	.word	0x08014ec5
 8014e20:	08014ef9 	.word	0x08014ef9
 8014e24:	08014f2d 	.word	0x08014f2d
    {
    case USBD_IDX_LANGID_STR:
      if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8014e28:	687b      	ldr	r3, [r7, #4]
 8014e2a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8014e2e:	685b      	ldr	r3, [r3, #4]
 8014e30:	2b00      	cmp	r3, #0
 8014e32:	d00b      	beq.n	8014e4c <USBD_GetDescriptor+0xf0>
      {
        pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8014e34:	687b      	ldr	r3, [r7, #4]
 8014e36:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8014e3a:	685b      	ldr	r3, [r3, #4]
 8014e3c:	687a      	ldr	r2, [r7, #4]
 8014e3e:	7c12      	ldrb	r2, [r2, #16]
 8014e40:	f107 0108 	add.w	r1, r7, #8
 8014e44:	4610      	mov	r0, r2
 8014e46:	4798      	blx	r3
 8014e48:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8014e4a:	e091      	b.n	8014f70 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 8014e4c:	6839      	ldr	r1, [r7, #0]
 8014e4e:	6878      	ldr	r0, [r7, #4]
 8014e50:	f000 faaa 	bl	80153a8 <USBD_CtlError>
        err++;
 8014e54:	7afb      	ldrb	r3, [r7, #11]
 8014e56:	3301      	adds	r3, #1
 8014e58:	72fb      	strb	r3, [r7, #11]
      break;
 8014e5a:	e089      	b.n	8014f70 <USBD_GetDescriptor+0x214>

    case USBD_IDX_MFC_STR:
      if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8014e5c:	687b      	ldr	r3, [r7, #4]
 8014e5e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8014e62:	689b      	ldr	r3, [r3, #8]
 8014e64:	2b00      	cmp	r3, #0
 8014e66:	d00b      	beq.n	8014e80 <USBD_GetDescriptor+0x124>
      {
        pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8014e68:	687b      	ldr	r3, [r7, #4]
 8014e6a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8014e6e:	689b      	ldr	r3, [r3, #8]
 8014e70:	687a      	ldr	r2, [r7, #4]
 8014e72:	7c12      	ldrb	r2, [r2, #16]
 8014e74:	f107 0108 	add.w	r1, r7, #8
 8014e78:	4610      	mov	r0, r2
 8014e7a:	4798      	blx	r3
 8014e7c:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8014e7e:	e077      	b.n	8014f70 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 8014e80:	6839      	ldr	r1, [r7, #0]
 8014e82:	6878      	ldr	r0, [r7, #4]
 8014e84:	f000 fa90 	bl	80153a8 <USBD_CtlError>
        err++;
 8014e88:	7afb      	ldrb	r3, [r7, #11]
 8014e8a:	3301      	adds	r3, #1
 8014e8c:	72fb      	strb	r3, [r7, #11]
      break;
 8014e8e:	e06f      	b.n	8014f70 <USBD_GetDescriptor+0x214>

    case USBD_IDX_PRODUCT_STR:
      if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8014e90:	687b      	ldr	r3, [r7, #4]
 8014e92:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8014e96:	68db      	ldr	r3, [r3, #12]
 8014e98:	2b00      	cmp	r3, #0
 8014e9a:	d00b      	beq.n	8014eb4 <USBD_GetDescriptor+0x158>
      {
        pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8014e9c:	687b      	ldr	r3, [r7, #4]
 8014e9e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8014ea2:	68db      	ldr	r3, [r3, #12]
 8014ea4:	687a      	ldr	r2, [r7, #4]
 8014ea6:	7c12      	ldrb	r2, [r2, #16]
 8014ea8:	f107 0108 	add.w	r1, r7, #8
 8014eac:	4610      	mov	r0, r2
 8014eae:	4798      	blx	r3
 8014eb0:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8014eb2:	e05d      	b.n	8014f70 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 8014eb4:	6839      	ldr	r1, [r7, #0]
 8014eb6:	6878      	ldr	r0, [r7, #4]
 8014eb8:	f000 fa76 	bl	80153a8 <USBD_CtlError>
        err++;
 8014ebc:	7afb      	ldrb	r3, [r7, #11]
 8014ebe:	3301      	adds	r3, #1
 8014ec0:	72fb      	strb	r3, [r7, #11]
      break;
 8014ec2:	e055      	b.n	8014f70 <USBD_GetDescriptor+0x214>

    case USBD_IDX_SERIAL_STR:
      if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8014ec4:	687b      	ldr	r3, [r7, #4]
 8014ec6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8014eca:	691b      	ldr	r3, [r3, #16]
 8014ecc:	2b00      	cmp	r3, #0
 8014ece:	d00b      	beq.n	8014ee8 <USBD_GetDescriptor+0x18c>
      {
        pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8014ed0:	687b      	ldr	r3, [r7, #4]
 8014ed2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8014ed6:	691b      	ldr	r3, [r3, #16]
 8014ed8:	687a      	ldr	r2, [r7, #4]
 8014eda:	7c12      	ldrb	r2, [r2, #16]
 8014edc:	f107 0108 	add.w	r1, r7, #8
 8014ee0:	4610      	mov	r0, r2
 8014ee2:	4798      	blx	r3
 8014ee4:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8014ee6:	e043      	b.n	8014f70 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 8014ee8:	6839      	ldr	r1, [r7, #0]
 8014eea:	6878      	ldr	r0, [r7, #4]
 8014eec:	f000 fa5c 	bl	80153a8 <USBD_CtlError>
        err++;
 8014ef0:	7afb      	ldrb	r3, [r7, #11]
 8014ef2:	3301      	adds	r3, #1
 8014ef4:	72fb      	strb	r3, [r7, #11]
      break;
 8014ef6:	e03b      	b.n	8014f70 <USBD_GetDescriptor+0x214>

    case USBD_IDX_CONFIG_STR:
      if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8014ef8:	687b      	ldr	r3, [r7, #4]
 8014efa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8014efe:	695b      	ldr	r3, [r3, #20]
 8014f00:	2b00      	cmp	r3, #0
 8014f02:	d00b      	beq.n	8014f1c <USBD_GetDescriptor+0x1c0>
      {
        pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8014f04:	687b      	ldr	r3, [r7, #4]
 8014f06:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8014f0a:	695b      	ldr	r3, [r3, #20]
 8014f0c:	687a      	ldr	r2, [r7, #4]
 8014f0e:	7c12      	ldrb	r2, [r2, #16]
 8014f10:	f107 0108 	add.w	r1, r7, #8
 8014f14:	4610      	mov	r0, r2
 8014f16:	4798      	blx	r3
 8014f18:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8014f1a:	e029      	b.n	8014f70 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 8014f1c:	6839      	ldr	r1, [r7, #0]
 8014f1e:	6878      	ldr	r0, [r7, #4]
 8014f20:	f000 fa42 	bl	80153a8 <USBD_CtlError>
        err++;
 8014f24:	7afb      	ldrb	r3, [r7, #11]
 8014f26:	3301      	adds	r3, #1
 8014f28:	72fb      	strb	r3, [r7, #11]
      break;
 8014f2a:	e021      	b.n	8014f70 <USBD_GetDescriptor+0x214>

    case USBD_IDX_INTERFACE_STR:
      if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8014f2c:	687b      	ldr	r3, [r7, #4]
 8014f2e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8014f32:	699b      	ldr	r3, [r3, #24]
 8014f34:	2b00      	cmp	r3, #0
 8014f36:	d00b      	beq.n	8014f50 <USBD_GetDescriptor+0x1f4>
      {
        pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8014f38:	687b      	ldr	r3, [r7, #4]
 8014f3a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8014f3e:	699b      	ldr	r3, [r3, #24]
 8014f40:	687a      	ldr	r2, [r7, #4]
 8014f42:	7c12      	ldrb	r2, [r2, #16]
 8014f44:	f107 0108 	add.w	r1, r7, #8
 8014f48:	4610      	mov	r0, r2
 8014f4a:	4798      	blx	r3
 8014f4c:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8014f4e:	e00f      	b.n	8014f70 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 8014f50:	6839      	ldr	r1, [r7, #0]
 8014f52:	6878      	ldr	r0, [r7, #4]
 8014f54:	f000 fa28 	bl	80153a8 <USBD_CtlError>
        err++;
 8014f58:	7afb      	ldrb	r3, [r7, #11]
 8014f5a:	3301      	adds	r3, #1
 8014f5c:	72fb      	strb	r3, [r7, #11]
      break;
 8014f5e:	e007      	b.n	8014f70 <USBD_GetDescriptor+0x214>
      {
        USBD_CtlError(pdev, req);
        err++;
      }
#else
      USBD_CtlError(pdev, req);
 8014f60:	6839      	ldr	r1, [r7, #0]
 8014f62:	6878      	ldr	r0, [r7, #4]
 8014f64:	f000 fa20 	bl	80153a8 <USBD_CtlError>
      err++;
 8014f68:	7afb      	ldrb	r3, [r7, #11]
 8014f6a:	3301      	adds	r3, #1
 8014f6c:	72fb      	strb	r3, [r7, #11]
#endif
      break;
 8014f6e:	bf00      	nop
    }
    break;
 8014f70:	e037      	b.n	8014fe2 <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_DEVICE_QUALIFIER:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8014f72:	687b      	ldr	r3, [r7, #4]
 8014f74:	7c1b      	ldrb	r3, [r3, #16]
 8014f76:	2b00      	cmp	r3, #0
 8014f78:	d109      	bne.n	8014f8e <USBD_GetDescriptor+0x232>
    {
      pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8014f7a:	687b      	ldr	r3, [r7, #4]
 8014f7c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8014f80:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8014f82:	f107 0208 	add.w	r2, r7, #8
 8014f86:	4610      	mov	r0, r2
 8014f88:	4798      	blx	r3
 8014f8a:	60f8      	str	r0, [r7, #12]
    else
    {
      USBD_CtlError(pdev, req);
      err++;
    }
    break;
 8014f8c:	e029      	b.n	8014fe2 <USBD_GetDescriptor+0x286>
      USBD_CtlError(pdev, req);
 8014f8e:	6839      	ldr	r1, [r7, #0]
 8014f90:	6878      	ldr	r0, [r7, #4]
 8014f92:	f000 fa09 	bl	80153a8 <USBD_CtlError>
      err++;
 8014f96:	7afb      	ldrb	r3, [r7, #11]
 8014f98:	3301      	adds	r3, #1
 8014f9a:	72fb      	strb	r3, [r7, #11]
    break;
 8014f9c:	e021      	b.n	8014fe2 <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8014f9e:	687b      	ldr	r3, [r7, #4]
 8014fa0:	7c1b      	ldrb	r3, [r3, #16]
 8014fa2:	2b00      	cmp	r3, #0
 8014fa4:	d10d      	bne.n	8014fc2 <USBD_GetDescriptor+0x266>
    {
      pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8014fa6:	687b      	ldr	r3, [r7, #4]
 8014fa8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8014fac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8014fae:	f107 0208 	add.w	r2, r7, #8
 8014fb2:	4610      	mov	r0, r2
 8014fb4:	4798      	blx	r3
 8014fb6:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8014fb8:	68fb      	ldr	r3, [r7, #12]
 8014fba:	3301      	adds	r3, #1
 8014fbc:	2207      	movs	r2, #7
 8014fbe:	701a      	strb	r2, [r3, #0]
    else
    {
      USBD_CtlError(pdev, req);
      err++;
    }
    break;
 8014fc0:	e00f      	b.n	8014fe2 <USBD_GetDescriptor+0x286>
      USBD_CtlError(pdev, req);
 8014fc2:	6839      	ldr	r1, [r7, #0]
 8014fc4:	6878      	ldr	r0, [r7, #4]
 8014fc6:	f000 f9ef 	bl	80153a8 <USBD_CtlError>
      err++;
 8014fca:	7afb      	ldrb	r3, [r7, #11]
 8014fcc:	3301      	adds	r3, #1
 8014fce:	72fb      	strb	r3, [r7, #11]
    break;
 8014fd0:	e007      	b.n	8014fe2 <USBD_GetDescriptor+0x286>

  default:
    USBD_CtlError(pdev, req);
 8014fd2:	6839      	ldr	r1, [r7, #0]
 8014fd4:	6878      	ldr	r0, [r7, #4]
 8014fd6:	f000 f9e7 	bl	80153a8 <USBD_CtlError>
    err++;
 8014fda:	7afb      	ldrb	r3, [r7, #11]
 8014fdc:	3301      	adds	r3, #1
 8014fde:	72fb      	strb	r3, [r7, #11]
    break;
 8014fe0:	bf00      	nop
  }

  if (err != 0U)
 8014fe2:	7afb      	ldrb	r3, [r7, #11]
 8014fe4:	2b00      	cmp	r3, #0
 8014fe6:	d11e      	bne.n	8015026 <USBD_GetDescriptor+0x2ca>
  {
    return;
  }
  else
  {
    if (req->wLength != 0U)
 8014fe8:	683b      	ldr	r3, [r7, #0]
 8014fea:	88db      	ldrh	r3, [r3, #6]
 8014fec:	2b00      	cmp	r3, #0
 8014fee:	d016      	beq.n	801501e <USBD_GetDescriptor+0x2c2>
    {
      if (len != 0U)
 8014ff0:	893b      	ldrh	r3, [r7, #8]
 8014ff2:	2b00      	cmp	r3, #0
 8014ff4:	d00e      	beq.n	8015014 <USBD_GetDescriptor+0x2b8>
      {
        len = MIN(len, req->wLength);
 8014ff6:	683b      	ldr	r3, [r7, #0]
 8014ff8:	88da      	ldrh	r2, [r3, #6]
 8014ffa:	893b      	ldrh	r3, [r7, #8]
 8014ffc:	4293      	cmp	r3, r2
 8014ffe:	bf28      	it	cs
 8015000:	4613      	movcs	r3, r2
 8015002:	b29b      	uxth	r3, r3
 8015004:	813b      	strh	r3, [r7, #8]
        (void)USBD_CtlSendData(pdev, pbuf, len);
 8015006:	893b      	ldrh	r3, [r7, #8]
 8015008:	461a      	mov	r2, r3
 801500a:	68f9      	ldr	r1, [r7, #12]
 801500c:	6878      	ldr	r0, [r7, #4]
 801500e:	f000 fa3c 	bl	801548a <USBD_CtlSendData>
 8015012:	e009      	b.n	8015028 <USBD_GetDescriptor+0x2cc>
      }
      else
      {
        USBD_CtlError(pdev, req);
 8015014:	6839      	ldr	r1, [r7, #0]
 8015016:	6878      	ldr	r0, [r7, #4]
 8015018:	f000 f9c6 	bl	80153a8 <USBD_CtlError>
 801501c:	e004      	b.n	8015028 <USBD_GetDescriptor+0x2cc>
      }
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
 801501e:	6878      	ldr	r0, [r7, #4]
 8015020:	f000 fa70 	bl	8015504 <USBD_CtlSendStatus>
 8015024:	e000      	b.n	8015028 <USBD_GetDescriptor+0x2cc>
    return;
 8015026:	bf00      	nop
    }
  }
}
 8015028:	3710      	adds	r7, #16
 801502a:	46bd      	mov	sp, r7
 801502c:	bd80      	pop	{r7, pc}
 801502e:	bf00      	nop

08015030 <USBD_SetAddress>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8015030:	b580      	push	{r7, lr}
 8015032:	b084      	sub	sp, #16
 8015034:	af00      	add	r7, sp, #0
 8015036:	6078      	str	r0, [r7, #4]
 8015038:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 801503a:	683b      	ldr	r3, [r7, #0]
 801503c:	889b      	ldrh	r3, [r3, #4]
 801503e:	2b00      	cmp	r3, #0
 8015040:	d130      	bne.n	80150a4 <USBD_SetAddress+0x74>
 8015042:	683b      	ldr	r3, [r7, #0]
 8015044:	88db      	ldrh	r3, [r3, #6]
 8015046:	2b00      	cmp	r3, #0
 8015048:	d12c      	bne.n	80150a4 <USBD_SetAddress+0x74>
 801504a:	683b      	ldr	r3, [r7, #0]
 801504c:	885b      	ldrh	r3, [r3, #2]
 801504e:	2b7f      	cmp	r3, #127	; 0x7f
 8015050:	d828      	bhi.n	80150a4 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8015052:	683b      	ldr	r3, [r7, #0]
 8015054:	885b      	ldrh	r3, [r3, #2]
 8015056:	b2db      	uxtb	r3, r3
 8015058:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801505c:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801505e:	687b      	ldr	r3, [r7, #4]
 8015060:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8015064:	2b03      	cmp	r3, #3
 8015066:	d104      	bne.n	8015072 <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 8015068:	6839      	ldr	r1, [r7, #0]
 801506a:	6878      	ldr	r0, [r7, #4]
 801506c:	f000 f99c 	bl	80153a8 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8015070:	e01c      	b.n	80150ac <USBD_SetAddress+0x7c>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8015072:	687b      	ldr	r3, [r7, #4]
 8015074:	7bfa      	ldrb	r2, [r7, #15]
 8015076:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 801507a:	7bfb      	ldrb	r3, [r7, #15]
 801507c:	4619      	mov	r1, r3
 801507e:	6878      	ldr	r0, [r7, #4]
 8015080:	f003 f9b5 	bl	80183ee <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8015084:	6878      	ldr	r0, [r7, #4]
 8015086:	f000 fa3d 	bl	8015504 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 801508a:	7bfb      	ldrb	r3, [r7, #15]
 801508c:	2b00      	cmp	r3, #0
 801508e:	d004      	beq.n	801509a <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8015090:	687b      	ldr	r3, [r7, #4]
 8015092:	2202      	movs	r2, #2
 8015094:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8015098:	e008      	b.n	80150ac <USBD_SetAddress+0x7c>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 801509a:	687b      	ldr	r3, [r7, #4]
 801509c:	2201      	movs	r2, #1
 801509e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80150a2:	e003      	b.n	80150ac <USBD_SetAddress+0x7c>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 80150a4:	6839      	ldr	r1, [r7, #0]
 80150a6:	6878      	ldr	r0, [r7, #4]
 80150a8:	f000 f97e 	bl	80153a8 <USBD_CtlError>
  }
}
 80150ac:	bf00      	nop
 80150ae:	3710      	adds	r7, #16
 80150b0:	46bd      	mov	sp, r7
 80150b2:	bd80      	pop	{r7, pc}

080150b4 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80150b4:	b580      	push	{r7, lr}
 80150b6:	b084      	sub	sp, #16
 80150b8:	af00      	add	r7, sp, #0
 80150ba:	6078      	str	r0, [r7, #4]
 80150bc:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80150be:	2300      	movs	r3, #0
 80150c0:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 80150c2:	683b      	ldr	r3, [r7, #0]
 80150c4:	885b      	ldrh	r3, [r3, #2]
 80150c6:	b2da      	uxtb	r2, r3
 80150c8:	4b4b      	ldr	r3, [pc, #300]	; (80151f8 <USBD_SetConfig+0x144>)
 80150ca:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 80150cc:	4b4a      	ldr	r3, [pc, #296]	; (80151f8 <USBD_SetConfig+0x144>)
 80150ce:	781b      	ldrb	r3, [r3, #0]
 80150d0:	2b01      	cmp	r3, #1
 80150d2:	d905      	bls.n	80150e0 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 80150d4:	6839      	ldr	r1, [r7, #0]
 80150d6:	6878      	ldr	r0, [r7, #4]
 80150d8:	f000 f966 	bl	80153a8 <USBD_CtlError>
    return USBD_FAIL;
 80150dc:	2303      	movs	r3, #3
 80150de:	e087      	b.n	80151f0 <USBD_SetConfig+0x13c>
  }

  switch (pdev->dev_state)
 80150e0:	687b      	ldr	r3, [r7, #4]
 80150e2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80150e6:	2b02      	cmp	r3, #2
 80150e8:	d002      	beq.n	80150f0 <USBD_SetConfig+0x3c>
 80150ea:	2b03      	cmp	r3, #3
 80150ec:	d025      	beq.n	801513a <USBD_SetConfig+0x86>
 80150ee:	e071      	b.n	80151d4 <USBD_SetConfig+0x120>
  {
  case USBD_STATE_ADDRESSED:
    if (cfgidx != 0U)
 80150f0:	4b41      	ldr	r3, [pc, #260]	; (80151f8 <USBD_SetConfig+0x144>)
 80150f2:	781b      	ldrb	r3, [r3, #0]
 80150f4:	2b00      	cmp	r3, #0
 80150f6:	d01c      	beq.n	8015132 <USBD_SetConfig+0x7e>
    {
      pdev->dev_config = cfgidx;
 80150f8:	4b3f      	ldr	r3, [pc, #252]	; (80151f8 <USBD_SetConfig+0x144>)
 80150fa:	781b      	ldrb	r3, [r3, #0]
 80150fc:	461a      	mov	r2, r3
 80150fe:	687b      	ldr	r3, [r7, #4]
 8015100:	605a      	str	r2, [r3, #4]

      ret = USBD_SetClassConfig(pdev, cfgidx);
 8015102:	4b3d      	ldr	r3, [pc, #244]	; (80151f8 <USBD_SetConfig+0x144>)
 8015104:	781b      	ldrb	r3, [r3, #0]
 8015106:	4619      	mov	r1, r3
 8015108:	6878      	ldr	r0, [r7, #4]
 801510a:	f7ff f9a8 	bl	801445e <USBD_SetClassConfig>
 801510e:	4603      	mov	r3, r0
 8015110:	73fb      	strb	r3, [r7, #15]

      if (ret != USBD_OK)
 8015112:	7bfb      	ldrb	r3, [r7, #15]
 8015114:	2b00      	cmp	r3, #0
 8015116:	d004      	beq.n	8015122 <USBD_SetConfig+0x6e>
      {
        USBD_CtlError(pdev, req);
 8015118:	6839      	ldr	r1, [r7, #0]
 801511a:	6878      	ldr	r0, [r7, #4]
 801511c:	f000 f944 	bl	80153a8 <USBD_CtlError>
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
    }
    break;
 8015120:	e065      	b.n	80151ee <USBD_SetConfig+0x13a>
        (void)USBD_CtlSendStatus(pdev);
 8015122:	6878      	ldr	r0, [r7, #4]
 8015124:	f000 f9ee 	bl	8015504 <USBD_CtlSendStatus>
        pdev->dev_state = USBD_STATE_CONFIGURED;
 8015128:	687b      	ldr	r3, [r7, #4]
 801512a:	2203      	movs	r2, #3
 801512c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    break;
 8015130:	e05d      	b.n	80151ee <USBD_SetConfig+0x13a>
      (void)USBD_CtlSendStatus(pdev);
 8015132:	6878      	ldr	r0, [r7, #4]
 8015134:	f000 f9e6 	bl	8015504 <USBD_CtlSendStatus>
    break;
 8015138:	e059      	b.n	80151ee <USBD_SetConfig+0x13a>

  case USBD_STATE_CONFIGURED:
    if (cfgidx == 0U)
 801513a:	4b2f      	ldr	r3, [pc, #188]	; (80151f8 <USBD_SetConfig+0x144>)
 801513c:	781b      	ldrb	r3, [r3, #0]
 801513e:	2b00      	cmp	r3, #0
 8015140:	d112      	bne.n	8015168 <USBD_SetConfig+0xb4>
    {
      pdev->dev_state = USBD_STATE_ADDRESSED;
 8015142:	687b      	ldr	r3, [r7, #4]
 8015144:	2202      	movs	r2, #2
 8015146:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      pdev->dev_config = cfgidx;
 801514a:	4b2b      	ldr	r3, [pc, #172]	; (80151f8 <USBD_SetConfig+0x144>)
 801514c:	781b      	ldrb	r3, [r3, #0]
 801514e:	461a      	mov	r2, r3
 8015150:	687b      	ldr	r3, [r7, #4]
 8015152:	605a      	str	r2, [r3, #4]
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8015154:	4b28      	ldr	r3, [pc, #160]	; (80151f8 <USBD_SetConfig+0x144>)
 8015156:	781b      	ldrb	r3, [r3, #0]
 8015158:	4619      	mov	r1, r3
 801515a:	6878      	ldr	r0, [r7, #4]
 801515c:	f7ff f99b 	bl	8014496 <USBD_ClrClassConfig>
      (void)USBD_CtlSendStatus(pdev);
 8015160:	6878      	ldr	r0, [r7, #4]
 8015162:	f000 f9cf 	bl	8015504 <USBD_CtlSendStatus>
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
    }
    break;
 8015166:	e042      	b.n	80151ee <USBD_SetConfig+0x13a>
    else if (cfgidx != pdev->dev_config)
 8015168:	4b23      	ldr	r3, [pc, #140]	; (80151f8 <USBD_SetConfig+0x144>)
 801516a:	781b      	ldrb	r3, [r3, #0]
 801516c:	461a      	mov	r2, r3
 801516e:	687b      	ldr	r3, [r7, #4]
 8015170:	685b      	ldr	r3, [r3, #4]
 8015172:	429a      	cmp	r2, r3
 8015174:	d02a      	beq.n	80151cc <USBD_SetConfig+0x118>
      (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8015176:	687b      	ldr	r3, [r7, #4]
 8015178:	685b      	ldr	r3, [r3, #4]
 801517a:	b2db      	uxtb	r3, r3
 801517c:	4619      	mov	r1, r3
 801517e:	6878      	ldr	r0, [r7, #4]
 8015180:	f7ff f989 	bl	8014496 <USBD_ClrClassConfig>
      pdev->dev_config = cfgidx;
 8015184:	4b1c      	ldr	r3, [pc, #112]	; (80151f8 <USBD_SetConfig+0x144>)
 8015186:	781b      	ldrb	r3, [r3, #0]
 8015188:	461a      	mov	r2, r3
 801518a:	687b      	ldr	r3, [r7, #4]
 801518c:	605a      	str	r2, [r3, #4]
      ret = USBD_SetClassConfig(pdev, cfgidx);
 801518e:	4b1a      	ldr	r3, [pc, #104]	; (80151f8 <USBD_SetConfig+0x144>)
 8015190:	781b      	ldrb	r3, [r3, #0]
 8015192:	4619      	mov	r1, r3
 8015194:	6878      	ldr	r0, [r7, #4]
 8015196:	f7ff f962 	bl	801445e <USBD_SetClassConfig>
 801519a:	4603      	mov	r3, r0
 801519c:	73fb      	strb	r3, [r7, #15]
      if (ret != USBD_OK)
 801519e:	7bfb      	ldrb	r3, [r7, #15]
 80151a0:	2b00      	cmp	r3, #0
 80151a2:	d00f      	beq.n	80151c4 <USBD_SetConfig+0x110>
        USBD_CtlError(pdev, req);
 80151a4:	6839      	ldr	r1, [r7, #0]
 80151a6:	6878      	ldr	r0, [r7, #4]
 80151a8:	f000 f8fe 	bl	80153a8 <USBD_CtlError>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80151ac:	687b      	ldr	r3, [r7, #4]
 80151ae:	685b      	ldr	r3, [r3, #4]
 80151b0:	b2db      	uxtb	r3, r3
 80151b2:	4619      	mov	r1, r3
 80151b4:	6878      	ldr	r0, [r7, #4]
 80151b6:	f7ff f96e 	bl	8014496 <USBD_ClrClassConfig>
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80151ba:	687b      	ldr	r3, [r7, #4]
 80151bc:	2202      	movs	r2, #2
 80151be:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    break;
 80151c2:	e014      	b.n	80151ee <USBD_SetConfig+0x13a>
        (void)USBD_CtlSendStatus(pdev);
 80151c4:	6878      	ldr	r0, [r7, #4]
 80151c6:	f000 f99d 	bl	8015504 <USBD_CtlSendStatus>
    break;
 80151ca:	e010      	b.n	80151ee <USBD_SetConfig+0x13a>
      (void)USBD_CtlSendStatus(pdev);
 80151cc:	6878      	ldr	r0, [r7, #4]
 80151ce:	f000 f999 	bl	8015504 <USBD_CtlSendStatus>
    break;
 80151d2:	e00c      	b.n	80151ee <USBD_SetConfig+0x13a>

  default:
    USBD_CtlError(pdev, req);
 80151d4:	6839      	ldr	r1, [r7, #0]
 80151d6:	6878      	ldr	r0, [r7, #4]
 80151d8:	f000 f8e6 	bl	80153a8 <USBD_CtlError>
    (void)USBD_ClrClassConfig(pdev, cfgidx);
 80151dc:	4b06      	ldr	r3, [pc, #24]	; (80151f8 <USBD_SetConfig+0x144>)
 80151de:	781b      	ldrb	r3, [r3, #0]
 80151e0:	4619      	mov	r1, r3
 80151e2:	6878      	ldr	r0, [r7, #4]
 80151e4:	f7ff f957 	bl	8014496 <USBD_ClrClassConfig>
    ret = USBD_FAIL;
 80151e8:	2303      	movs	r3, #3
 80151ea:	73fb      	strb	r3, [r7, #15]
    break;
 80151ec:	bf00      	nop
  }

  return ret;
 80151ee:	7bfb      	ldrb	r3, [r7, #15]
}
 80151f0:	4618      	mov	r0, r3
 80151f2:	3710      	adds	r7, #16
 80151f4:	46bd      	mov	sp, r7
 80151f6:	bd80      	pop	{r7, pc}
 80151f8:	24000b4c 	.word	0x24000b4c

080151fc <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80151fc:	b580      	push	{r7, lr}
 80151fe:	b082      	sub	sp, #8
 8015200:	af00      	add	r7, sp, #0
 8015202:	6078      	str	r0, [r7, #4]
 8015204:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8015206:	683b      	ldr	r3, [r7, #0]
 8015208:	88db      	ldrh	r3, [r3, #6]
 801520a:	2b01      	cmp	r3, #1
 801520c:	d004      	beq.n	8015218 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 801520e:	6839      	ldr	r1, [r7, #0]
 8015210:	6878      	ldr	r0, [r7, #4]
 8015212:	f000 f8c9 	bl	80153a8 <USBD_CtlError>
    default:
      USBD_CtlError(pdev, req);
      break;
    }
  }
}
 8015216:	e021      	b.n	801525c <USBD_GetConfig+0x60>
    switch (pdev->dev_state)
 8015218:	687b      	ldr	r3, [r7, #4]
 801521a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801521e:	2b01      	cmp	r3, #1
 8015220:	db17      	blt.n	8015252 <USBD_GetConfig+0x56>
 8015222:	2b02      	cmp	r3, #2
 8015224:	dd02      	ble.n	801522c <USBD_GetConfig+0x30>
 8015226:	2b03      	cmp	r3, #3
 8015228:	d00b      	beq.n	8015242 <USBD_GetConfig+0x46>
 801522a:	e012      	b.n	8015252 <USBD_GetConfig+0x56>
      pdev->dev_default_config = 0U;
 801522c:	687b      	ldr	r3, [r7, #4]
 801522e:	2200      	movs	r2, #0
 8015230:	609a      	str	r2, [r3, #8]
      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8015232:	687b      	ldr	r3, [r7, #4]
 8015234:	3308      	adds	r3, #8
 8015236:	2201      	movs	r2, #1
 8015238:	4619      	mov	r1, r3
 801523a:	6878      	ldr	r0, [r7, #4]
 801523c:	f000 f925 	bl	801548a <USBD_CtlSendData>
      break;
 8015240:	e00c      	b.n	801525c <USBD_GetConfig+0x60>
      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8015242:	687b      	ldr	r3, [r7, #4]
 8015244:	3304      	adds	r3, #4
 8015246:	2201      	movs	r2, #1
 8015248:	4619      	mov	r1, r3
 801524a:	6878      	ldr	r0, [r7, #4]
 801524c:	f000 f91d 	bl	801548a <USBD_CtlSendData>
      break;
 8015250:	e004      	b.n	801525c <USBD_GetConfig+0x60>
      USBD_CtlError(pdev, req);
 8015252:	6839      	ldr	r1, [r7, #0]
 8015254:	6878      	ldr	r0, [r7, #4]
 8015256:	f000 f8a7 	bl	80153a8 <USBD_CtlError>
      break;
 801525a:	bf00      	nop
}
 801525c:	bf00      	nop
 801525e:	3708      	adds	r7, #8
 8015260:	46bd      	mov	sp, r7
 8015262:	bd80      	pop	{r7, pc}

08015264 <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8015264:	b580      	push	{r7, lr}
 8015266:	b082      	sub	sp, #8
 8015268:	af00      	add	r7, sp, #0
 801526a:	6078      	str	r0, [r7, #4]
 801526c:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 801526e:	687b      	ldr	r3, [r7, #4]
 8015270:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8015274:	3b01      	subs	r3, #1
 8015276:	2b02      	cmp	r3, #2
 8015278:	d81e      	bhi.n	80152b8 <USBD_GetStatus+0x54>
  {
  case USBD_STATE_DEFAULT:
  case USBD_STATE_ADDRESSED:
  case USBD_STATE_CONFIGURED:
    if (req->wLength != 0x2U)
 801527a:	683b      	ldr	r3, [r7, #0]
 801527c:	88db      	ldrh	r3, [r3, #6]
 801527e:	2b02      	cmp	r3, #2
 8015280:	d004      	beq.n	801528c <USBD_GetStatus+0x28>
    {
      USBD_CtlError(pdev, req);
 8015282:	6839      	ldr	r1, [r7, #0]
 8015284:	6878      	ldr	r0, [r7, #4]
 8015286:	f000 f88f 	bl	80153a8 <USBD_CtlError>
      break;
 801528a:	e01a      	b.n	80152c2 <USBD_GetStatus+0x5e>
    }

#if (USBD_SELF_POWERED == 1U)
    pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 801528c:	687b      	ldr	r3, [r7, #4]
 801528e:	2201      	movs	r2, #1
 8015290:	60da      	str	r2, [r3, #12]
#else
    pdev->dev_config_status = 0U;
#endif

    if (pdev->dev_remote_wakeup != 0U)
 8015292:	687b      	ldr	r3, [r7, #4]
 8015294:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8015298:	2b00      	cmp	r3, #0
 801529a:	d005      	beq.n	80152a8 <USBD_GetStatus+0x44>
    {
      pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 801529c:	687b      	ldr	r3, [r7, #4]
 801529e:	68db      	ldr	r3, [r3, #12]
 80152a0:	f043 0202 	orr.w	r2, r3, #2
 80152a4:	687b      	ldr	r3, [r7, #4]
 80152a6:	60da      	str	r2, [r3, #12]
    }

    (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 80152a8:	687b      	ldr	r3, [r7, #4]
 80152aa:	330c      	adds	r3, #12
 80152ac:	2202      	movs	r2, #2
 80152ae:	4619      	mov	r1, r3
 80152b0:	6878      	ldr	r0, [r7, #4]
 80152b2:	f000 f8ea 	bl	801548a <USBD_CtlSendData>
    break;
 80152b6:	e004      	b.n	80152c2 <USBD_GetStatus+0x5e>

  default:
    USBD_CtlError(pdev, req);
 80152b8:	6839      	ldr	r1, [r7, #0]
 80152ba:	6878      	ldr	r0, [r7, #4]
 80152bc:	f000 f874 	bl	80153a8 <USBD_CtlError>
    break;
 80152c0:	bf00      	nop
  }
}
 80152c2:	bf00      	nop
 80152c4:	3708      	adds	r7, #8
 80152c6:	46bd      	mov	sp, r7
 80152c8:	bd80      	pop	{r7, pc}

080152ca <USBD_SetFeature>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80152ca:	b580      	push	{r7, lr}
 80152cc:	b082      	sub	sp, #8
 80152ce:	af00      	add	r7, sp, #0
 80152d0:	6078      	str	r0, [r7, #4]
 80152d2:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80152d4:	683b      	ldr	r3, [r7, #0]
 80152d6:	885b      	ldrh	r3, [r3, #2]
 80152d8:	2b01      	cmp	r3, #1
 80152da:	d106      	bne.n	80152ea <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 80152dc:	687b      	ldr	r3, [r7, #4]
 80152de:	2201      	movs	r2, #1
 80152e0:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 80152e4:	6878      	ldr	r0, [r7, #4]
 80152e6:	f000 f90d 	bl	8015504 <USBD_CtlSendStatus>
  }
}
 80152ea:	bf00      	nop
 80152ec:	3708      	adds	r7, #8
 80152ee:	46bd      	mov	sp, r7
 80152f0:	bd80      	pop	{r7, pc}

080152f2 <USBD_ClrFeature>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80152f2:	b580      	push	{r7, lr}
 80152f4:	b082      	sub	sp, #8
 80152f6:	af00      	add	r7, sp, #0
 80152f8:	6078      	str	r0, [r7, #4]
 80152fa:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80152fc:	687b      	ldr	r3, [r7, #4]
 80152fe:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8015302:	3b01      	subs	r3, #1
 8015304:	2b02      	cmp	r3, #2
 8015306:	d80b      	bhi.n	8015320 <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8015308:	683b      	ldr	r3, [r7, #0]
 801530a:	885b      	ldrh	r3, [r3, #2]
 801530c:	2b01      	cmp	r3, #1
 801530e:	d10c      	bne.n	801532a <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 8015310:	687b      	ldr	r3, [r7, #4]
 8015312:	2200      	movs	r2, #0
 8015314:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8015318:	6878      	ldr	r0, [r7, #4]
 801531a:	f000 f8f3 	bl	8015504 <USBD_CtlSendStatus>
      }
      break;
 801531e:	e004      	b.n	801532a <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 8015320:	6839      	ldr	r1, [r7, #0]
 8015322:	6878      	ldr	r0, [r7, #4]
 8015324:	f000 f840 	bl	80153a8 <USBD_CtlError>
      break;
 8015328:	e000      	b.n	801532c <USBD_ClrFeature+0x3a>
      break;
 801532a:	bf00      	nop
  }
}
 801532c:	bf00      	nop
 801532e:	3708      	adds	r7, #8
 8015330:	46bd      	mov	sp, r7
 8015332:	bd80      	pop	{r7, pc}

08015334 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8015334:	b580      	push	{r7, lr}
 8015336:	b084      	sub	sp, #16
 8015338:	af00      	add	r7, sp, #0
 801533a:	6078      	str	r0, [r7, #4]
 801533c:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 801533e:	683b      	ldr	r3, [r7, #0]
 8015340:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8015342:	68fb      	ldr	r3, [r7, #12]
 8015344:	781a      	ldrb	r2, [r3, #0]
 8015346:	687b      	ldr	r3, [r7, #4]
 8015348:	701a      	strb	r2, [r3, #0]

  pbuff++;
 801534a:	68fb      	ldr	r3, [r7, #12]
 801534c:	3301      	adds	r3, #1
 801534e:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8015350:	68fb      	ldr	r3, [r7, #12]
 8015352:	781a      	ldrb	r2, [r3, #0]
 8015354:	687b      	ldr	r3, [r7, #4]
 8015356:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8015358:	68fb      	ldr	r3, [r7, #12]
 801535a:	3301      	adds	r3, #1
 801535c:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 801535e:	68f8      	ldr	r0, [r7, #12]
 8015360:	f7ff fad4 	bl	801490c <SWAPBYTE>
 8015364:	4603      	mov	r3, r0
 8015366:	461a      	mov	r2, r3
 8015368:	687b      	ldr	r3, [r7, #4]
 801536a:	805a      	strh	r2, [r3, #2]

  pbuff++;
 801536c:	68fb      	ldr	r3, [r7, #12]
 801536e:	3301      	adds	r3, #1
 8015370:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8015372:	68fb      	ldr	r3, [r7, #12]
 8015374:	3301      	adds	r3, #1
 8015376:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8015378:	68f8      	ldr	r0, [r7, #12]
 801537a:	f7ff fac7 	bl	801490c <SWAPBYTE>
 801537e:	4603      	mov	r3, r0
 8015380:	461a      	mov	r2, r3
 8015382:	687b      	ldr	r3, [r7, #4]
 8015384:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8015386:	68fb      	ldr	r3, [r7, #12]
 8015388:	3301      	adds	r3, #1
 801538a:	60fb      	str	r3, [r7, #12]
  pbuff++;
 801538c:	68fb      	ldr	r3, [r7, #12]
 801538e:	3301      	adds	r3, #1
 8015390:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8015392:	68f8      	ldr	r0, [r7, #12]
 8015394:	f7ff faba 	bl	801490c <SWAPBYTE>
 8015398:	4603      	mov	r3, r0
 801539a:	461a      	mov	r2, r3
 801539c:	687b      	ldr	r3, [r7, #4]
 801539e:	80da      	strh	r2, [r3, #6]
}
 80153a0:	bf00      	nop
 80153a2:	3710      	adds	r7, #16
 80153a4:	46bd      	mov	sp, r7
 80153a6:	bd80      	pop	{r7, pc}

080153a8 <USBD_CtlError>:
* @param  req: usb request
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80153a8:	b580      	push	{r7, lr}
 80153aa:	b082      	sub	sp, #8
 80153ac:	af00      	add	r7, sp, #0
 80153ae:	6078      	str	r0, [r7, #4]
 80153b0:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 80153b2:	2180      	movs	r1, #128	; 0x80
 80153b4:	6878      	ldr	r0, [r7, #4]
 80153b6:	f002 ffb0 	bl	801831a <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 80153ba:	2100      	movs	r1, #0
 80153bc:	6878      	ldr	r0, [r7, #4]
 80153be:	f002 ffac 	bl	801831a <USBD_LL_StallEP>
}
 80153c2:	bf00      	nop
 80153c4:	3708      	adds	r7, #8
 80153c6:	46bd      	mov	sp, r7
 80153c8:	bd80      	pop	{r7, pc}

080153ca <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 80153ca:	b580      	push	{r7, lr}
 80153cc:	b086      	sub	sp, #24
 80153ce:	af00      	add	r7, sp, #0
 80153d0:	60f8      	str	r0, [r7, #12]
 80153d2:	60b9      	str	r1, [r7, #8]
 80153d4:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 80153d6:	2300      	movs	r3, #0
 80153d8:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 80153da:	68fb      	ldr	r3, [r7, #12]
 80153dc:	2b00      	cmp	r3, #0
 80153de:	d036      	beq.n	801544e <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 80153e0:	68fb      	ldr	r3, [r7, #12]
 80153e2:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 80153e4:	6938      	ldr	r0, [r7, #16]
 80153e6:	f000 f836 	bl	8015456 <USBD_GetLen>
 80153ea:	4603      	mov	r3, r0
 80153ec:	3301      	adds	r3, #1
 80153ee:	b29b      	uxth	r3, r3
 80153f0:	005b      	lsls	r3, r3, #1
 80153f2:	b29a      	uxth	r2, r3
 80153f4:	687b      	ldr	r3, [r7, #4]
 80153f6:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 80153f8:	7dfb      	ldrb	r3, [r7, #23]
 80153fa:	68ba      	ldr	r2, [r7, #8]
 80153fc:	4413      	add	r3, r2
 80153fe:	687a      	ldr	r2, [r7, #4]
 8015400:	7812      	ldrb	r2, [r2, #0]
 8015402:	701a      	strb	r2, [r3, #0]
  idx++;
 8015404:	7dfb      	ldrb	r3, [r7, #23]
 8015406:	3301      	adds	r3, #1
 8015408:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 801540a:	7dfb      	ldrb	r3, [r7, #23]
 801540c:	68ba      	ldr	r2, [r7, #8]
 801540e:	4413      	add	r3, r2
 8015410:	2203      	movs	r2, #3
 8015412:	701a      	strb	r2, [r3, #0]
  idx++;
 8015414:	7dfb      	ldrb	r3, [r7, #23]
 8015416:	3301      	adds	r3, #1
 8015418:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 801541a:	e013      	b.n	8015444 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 801541c:	7dfb      	ldrb	r3, [r7, #23]
 801541e:	68ba      	ldr	r2, [r7, #8]
 8015420:	4413      	add	r3, r2
 8015422:	693a      	ldr	r2, [r7, #16]
 8015424:	7812      	ldrb	r2, [r2, #0]
 8015426:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8015428:	693b      	ldr	r3, [r7, #16]
 801542a:	3301      	adds	r3, #1
 801542c:	613b      	str	r3, [r7, #16]
    idx++;
 801542e:	7dfb      	ldrb	r3, [r7, #23]
 8015430:	3301      	adds	r3, #1
 8015432:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8015434:	7dfb      	ldrb	r3, [r7, #23]
 8015436:	68ba      	ldr	r2, [r7, #8]
 8015438:	4413      	add	r3, r2
 801543a:	2200      	movs	r2, #0
 801543c:	701a      	strb	r2, [r3, #0]
    idx++;
 801543e:	7dfb      	ldrb	r3, [r7, #23]
 8015440:	3301      	adds	r3, #1
 8015442:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8015444:	693b      	ldr	r3, [r7, #16]
 8015446:	781b      	ldrb	r3, [r3, #0]
 8015448:	2b00      	cmp	r3, #0
 801544a:	d1e7      	bne.n	801541c <USBD_GetString+0x52>
 801544c:	e000      	b.n	8015450 <USBD_GetString+0x86>
    return;
 801544e:	bf00      	nop
  }
}
 8015450:	3718      	adds	r7, #24
 8015452:	46bd      	mov	sp, r7
 8015454:	bd80      	pop	{r7, pc}

08015456 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8015456:	b480      	push	{r7}
 8015458:	b085      	sub	sp, #20
 801545a:	af00      	add	r7, sp, #0
 801545c:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 801545e:	2300      	movs	r3, #0
 8015460:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8015462:	687b      	ldr	r3, [r7, #4]
 8015464:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8015466:	e005      	b.n	8015474 <USBD_GetLen+0x1e>
  {
    len++;
 8015468:	7bfb      	ldrb	r3, [r7, #15]
 801546a:	3301      	adds	r3, #1
 801546c:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 801546e:	68bb      	ldr	r3, [r7, #8]
 8015470:	3301      	adds	r3, #1
 8015472:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8015474:	68bb      	ldr	r3, [r7, #8]
 8015476:	781b      	ldrb	r3, [r3, #0]
 8015478:	2b00      	cmp	r3, #0
 801547a:	d1f5      	bne.n	8015468 <USBD_GetLen+0x12>
  }

  return len;
 801547c:	7bfb      	ldrb	r3, [r7, #15]
}
 801547e:	4618      	mov	r0, r3
 8015480:	3714      	adds	r7, #20
 8015482:	46bd      	mov	sp, r7
 8015484:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015488:	4770      	bx	lr

0801548a <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 801548a:	b580      	push	{r7, lr}
 801548c:	b084      	sub	sp, #16
 801548e:	af00      	add	r7, sp, #0
 8015490:	60f8      	str	r0, [r7, #12]
 8015492:	60b9      	str	r1, [r7, #8]
 8015494:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8015496:	68fb      	ldr	r3, [r7, #12]
 8015498:	2202      	movs	r2, #2
 801549a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 801549e:	68fb      	ldr	r3, [r7, #12]
 80154a0:	687a      	ldr	r2, [r7, #4]
 80154a2:	619a      	str	r2, [r3, #24]
  pdev->ep_in[0].rem_length = len;
 80154a4:	68fb      	ldr	r3, [r7, #12]
 80154a6:	687a      	ldr	r2, [r7, #4]
 80154a8:	61da      	str	r2, [r3, #28]

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80154aa:	687b      	ldr	r3, [r7, #4]
 80154ac:	68ba      	ldr	r2, [r7, #8]
 80154ae:	2100      	movs	r1, #0
 80154b0:	68f8      	ldr	r0, [r7, #12]
 80154b2:	f002 ffbb 	bl	801842c <USBD_LL_Transmit>

  return USBD_OK;
 80154b6:	2300      	movs	r3, #0
}
 80154b8:	4618      	mov	r0, r3
 80154ba:	3710      	adds	r7, #16
 80154bc:	46bd      	mov	sp, r7
 80154be:	bd80      	pop	{r7, pc}

080154c0 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 80154c0:	b580      	push	{r7, lr}
 80154c2:	b084      	sub	sp, #16
 80154c4:	af00      	add	r7, sp, #0
 80154c6:	60f8      	str	r0, [r7, #12]
 80154c8:	60b9      	str	r1, [r7, #8]
 80154ca:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80154cc:	687b      	ldr	r3, [r7, #4]
 80154ce:	68ba      	ldr	r2, [r7, #8]
 80154d0:	2100      	movs	r1, #0
 80154d2:	68f8      	ldr	r0, [r7, #12]
 80154d4:	f002 ffaa 	bl	801842c <USBD_LL_Transmit>

  return USBD_OK;
 80154d8:	2300      	movs	r3, #0
}
 80154da:	4618      	mov	r0, r3
 80154dc:	3710      	adds	r7, #16
 80154de:	46bd      	mov	sp, r7
 80154e0:	bd80      	pop	{r7, pc}

080154e2 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 80154e2:	b580      	push	{r7, lr}
 80154e4:	b084      	sub	sp, #16
 80154e6:	af00      	add	r7, sp, #0
 80154e8:	60f8      	str	r0, [r7, #12]
 80154ea:	60b9      	str	r1, [r7, #8]
 80154ec:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80154ee:	687b      	ldr	r3, [r7, #4]
 80154f0:	68ba      	ldr	r2, [r7, #8]
 80154f2:	2100      	movs	r1, #0
 80154f4:	68f8      	ldr	r0, [r7, #12]
 80154f6:	f002 ffba 	bl	801846e <USBD_LL_PrepareReceive>

  return USBD_OK;
 80154fa:	2300      	movs	r3, #0
}
 80154fc:	4618      	mov	r0, r3
 80154fe:	3710      	adds	r7, #16
 8015500:	46bd      	mov	sp, r7
 8015502:	bd80      	pop	{r7, pc}

08015504 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8015504:	b580      	push	{r7, lr}
 8015506:	b082      	sub	sp, #8
 8015508:	af00      	add	r7, sp, #0
 801550a:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 801550c:	687b      	ldr	r3, [r7, #4]
 801550e:	2204      	movs	r2, #4
 8015510:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8015514:	2300      	movs	r3, #0
 8015516:	2200      	movs	r2, #0
 8015518:	2100      	movs	r1, #0
 801551a:	6878      	ldr	r0, [r7, #4]
 801551c:	f002 ff86 	bl	801842c <USBD_LL_Transmit>

  return USBD_OK;
 8015520:	2300      	movs	r3, #0
}
 8015522:	4618      	mov	r0, r3
 8015524:	3708      	adds	r7, #8
 8015526:	46bd      	mov	sp, r7
 8015528:	bd80      	pop	{r7, pc}

0801552a <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 801552a:	b580      	push	{r7, lr}
 801552c:	b082      	sub	sp, #8
 801552e:	af00      	add	r7, sp, #0
 8015530:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8015532:	687b      	ldr	r3, [r7, #4]
 8015534:	2205      	movs	r2, #5
 8015536:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 801553a:	2300      	movs	r3, #0
 801553c:	2200      	movs	r2, #0
 801553e:	2100      	movs	r1, #0
 8015540:	6878      	ldr	r0, [r7, #4]
 8015542:	f002 ff94 	bl	801846e <USBD_LL_PrepareReceive>

  return USBD_OK;
 8015546:	2300      	movs	r3, #0
}
 8015548:	4618      	mov	r0, r3
 801554a:	3708      	adds	r7, #8
 801554c:	46bd      	mov	sp, r7
 801554e:	bd80      	pop	{r7, pc}

08015550 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 8015550:	b580      	push	{r7, lr}
 8015552:	b084      	sub	sp, #16
 8015554:	af00      	add	r7, sp, #0
 8015556:	4603      	mov	r3, r0
 8015558:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 801555a:	79fb      	ldrb	r3, [r7, #7]
 801555c:	4a08      	ldr	r2, [pc, #32]	; (8015580 <disk_status+0x30>)
 801555e:	009b      	lsls	r3, r3, #2
 8015560:	4413      	add	r3, r2
 8015562:	685b      	ldr	r3, [r3, #4]
 8015564:	685b      	ldr	r3, [r3, #4]
 8015566:	79fa      	ldrb	r2, [r7, #7]
 8015568:	4905      	ldr	r1, [pc, #20]	; (8015580 <disk_status+0x30>)
 801556a:	440a      	add	r2, r1
 801556c:	7a12      	ldrb	r2, [r2, #8]
 801556e:	4610      	mov	r0, r2
 8015570:	4798      	blx	r3
 8015572:	4603      	mov	r3, r0
 8015574:	73fb      	strb	r3, [r7, #15]
  return stat;
 8015576:	7bfb      	ldrb	r3, [r7, #15]
}
 8015578:	4618      	mov	r0, r3
 801557a:	3710      	adds	r7, #16
 801557c:	46bd      	mov	sp, r7
 801557e:	bd80      	pop	{r7, pc}
 8015580:	24000b78 	.word	0x24000b78

08015584 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 8015584:	b580      	push	{r7, lr}
 8015586:	b084      	sub	sp, #16
 8015588:	af00      	add	r7, sp, #0
 801558a:	4603      	mov	r3, r0
 801558c:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 801558e:	2300      	movs	r3, #0
 8015590:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 8015592:	79fb      	ldrb	r3, [r7, #7]
 8015594:	4a0d      	ldr	r2, [pc, #52]	; (80155cc <disk_initialize+0x48>)
 8015596:	5cd3      	ldrb	r3, [r2, r3]
 8015598:	2b00      	cmp	r3, #0
 801559a:	d111      	bne.n	80155c0 <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 801559c:	79fb      	ldrb	r3, [r7, #7]
 801559e:	4a0b      	ldr	r2, [pc, #44]	; (80155cc <disk_initialize+0x48>)
 80155a0:	2101      	movs	r1, #1
 80155a2:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 80155a4:	79fb      	ldrb	r3, [r7, #7]
 80155a6:	4a09      	ldr	r2, [pc, #36]	; (80155cc <disk_initialize+0x48>)
 80155a8:	009b      	lsls	r3, r3, #2
 80155aa:	4413      	add	r3, r2
 80155ac:	685b      	ldr	r3, [r3, #4]
 80155ae:	681b      	ldr	r3, [r3, #0]
 80155b0:	79fa      	ldrb	r2, [r7, #7]
 80155b2:	4906      	ldr	r1, [pc, #24]	; (80155cc <disk_initialize+0x48>)
 80155b4:	440a      	add	r2, r1
 80155b6:	7a12      	ldrb	r2, [r2, #8]
 80155b8:	4610      	mov	r0, r2
 80155ba:	4798      	blx	r3
 80155bc:	4603      	mov	r3, r0
 80155be:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 80155c0:	7bfb      	ldrb	r3, [r7, #15]
}
 80155c2:	4618      	mov	r0, r3
 80155c4:	3710      	adds	r7, #16
 80155c6:	46bd      	mov	sp, r7
 80155c8:	bd80      	pop	{r7, pc}
 80155ca:	bf00      	nop
 80155cc:	24000b78 	.word	0x24000b78

080155d0 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 80155d0:	b590      	push	{r4, r7, lr}
 80155d2:	b087      	sub	sp, #28
 80155d4:	af00      	add	r7, sp, #0
 80155d6:	60b9      	str	r1, [r7, #8]
 80155d8:	607a      	str	r2, [r7, #4]
 80155da:	603b      	str	r3, [r7, #0]
 80155dc:	4603      	mov	r3, r0
 80155de:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 80155e0:	7bfb      	ldrb	r3, [r7, #15]
 80155e2:	4a0a      	ldr	r2, [pc, #40]	; (801560c <disk_read+0x3c>)
 80155e4:	009b      	lsls	r3, r3, #2
 80155e6:	4413      	add	r3, r2
 80155e8:	685b      	ldr	r3, [r3, #4]
 80155ea:	689c      	ldr	r4, [r3, #8]
 80155ec:	7bfb      	ldrb	r3, [r7, #15]
 80155ee:	4a07      	ldr	r2, [pc, #28]	; (801560c <disk_read+0x3c>)
 80155f0:	4413      	add	r3, r2
 80155f2:	7a18      	ldrb	r0, [r3, #8]
 80155f4:	683b      	ldr	r3, [r7, #0]
 80155f6:	687a      	ldr	r2, [r7, #4]
 80155f8:	68b9      	ldr	r1, [r7, #8]
 80155fa:	47a0      	blx	r4
 80155fc:	4603      	mov	r3, r0
 80155fe:	75fb      	strb	r3, [r7, #23]
  return res;
 8015600:	7dfb      	ldrb	r3, [r7, #23]
}
 8015602:	4618      	mov	r0, r3
 8015604:	371c      	adds	r7, #28
 8015606:	46bd      	mov	sp, r7
 8015608:	bd90      	pop	{r4, r7, pc}
 801560a:	bf00      	nop
 801560c:	24000b78 	.word	0x24000b78

08015610 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 8015610:	b590      	push	{r4, r7, lr}
 8015612:	b087      	sub	sp, #28
 8015614:	af00      	add	r7, sp, #0
 8015616:	60b9      	str	r1, [r7, #8]
 8015618:	607a      	str	r2, [r7, #4]
 801561a:	603b      	str	r3, [r7, #0]
 801561c:	4603      	mov	r3, r0
 801561e:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8015620:	7bfb      	ldrb	r3, [r7, #15]
 8015622:	4a0a      	ldr	r2, [pc, #40]	; (801564c <disk_write+0x3c>)
 8015624:	009b      	lsls	r3, r3, #2
 8015626:	4413      	add	r3, r2
 8015628:	685b      	ldr	r3, [r3, #4]
 801562a:	68dc      	ldr	r4, [r3, #12]
 801562c:	7bfb      	ldrb	r3, [r7, #15]
 801562e:	4a07      	ldr	r2, [pc, #28]	; (801564c <disk_write+0x3c>)
 8015630:	4413      	add	r3, r2
 8015632:	7a18      	ldrb	r0, [r3, #8]
 8015634:	683b      	ldr	r3, [r7, #0]
 8015636:	687a      	ldr	r2, [r7, #4]
 8015638:	68b9      	ldr	r1, [r7, #8]
 801563a:	47a0      	blx	r4
 801563c:	4603      	mov	r3, r0
 801563e:	75fb      	strb	r3, [r7, #23]
  return res;
 8015640:	7dfb      	ldrb	r3, [r7, #23]
}
 8015642:	4618      	mov	r0, r3
 8015644:	371c      	adds	r7, #28
 8015646:	46bd      	mov	sp, r7
 8015648:	bd90      	pop	{r4, r7, pc}
 801564a:	bf00      	nop
 801564c:	24000b78 	.word	0x24000b78

08015650 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 8015650:	b580      	push	{r7, lr}
 8015652:	b084      	sub	sp, #16
 8015654:	af00      	add	r7, sp, #0
 8015656:	4603      	mov	r3, r0
 8015658:	603a      	str	r2, [r7, #0]
 801565a:	71fb      	strb	r3, [r7, #7]
 801565c:	460b      	mov	r3, r1
 801565e:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 8015660:	79fb      	ldrb	r3, [r7, #7]
 8015662:	4a09      	ldr	r2, [pc, #36]	; (8015688 <disk_ioctl+0x38>)
 8015664:	009b      	lsls	r3, r3, #2
 8015666:	4413      	add	r3, r2
 8015668:	685b      	ldr	r3, [r3, #4]
 801566a:	691b      	ldr	r3, [r3, #16]
 801566c:	79fa      	ldrb	r2, [r7, #7]
 801566e:	4906      	ldr	r1, [pc, #24]	; (8015688 <disk_ioctl+0x38>)
 8015670:	440a      	add	r2, r1
 8015672:	7a10      	ldrb	r0, [r2, #8]
 8015674:	79b9      	ldrb	r1, [r7, #6]
 8015676:	683a      	ldr	r2, [r7, #0]
 8015678:	4798      	blx	r3
 801567a:	4603      	mov	r3, r0
 801567c:	73fb      	strb	r3, [r7, #15]
  return res;
 801567e:	7bfb      	ldrb	r3, [r7, #15]
}
 8015680:	4618      	mov	r0, r3
 8015682:	3710      	adds	r7, #16
 8015684:	46bd      	mov	sp, r7
 8015686:	bd80      	pop	{r7, pc}
 8015688:	24000b78 	.word	0x24000b78

0801568c <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 801568c:	b480      	push	{r7}
 801568e:	b085      	sub	sp, #20
 8015690:	af00      	add	r7, sp, #0
 8015692:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 8015694:	687b      	ldr	r3, [r7, #4]
 8015696:	3301      	adds	r3, #1
 8015698:	781b      	ldrb	r3, [r3, #0]
 801569a:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 801569c:	89fb      	ldrh	r3, [r7, #14]
 801569e:	021b      	lsls	r3, r3, #8
 80156a0:	b21a      	sxth	r2, r3
 80156a2:	687b      	ldr	r3, [r7, #4]
 80156a4:	781b      	ldrb	r3, [r3, #0]
 80156a6:	b21b      	sxth	r3, r3
 80156a8:	4313      	orrs	r3, r2
 80156aa:	b21b      	sxth	r3, r3
 80156ac:	81fb      	strh	r3, [r7, #14]
	return rv;
 80156ae:	89fb      	ldrh	r3, [r7, #14]
}
 80156b0:	4618      	mov	r0, r3
 80156b2:	3714      	adds	r7, #20
 80156b4:	46bd      	mov	sp, r7
 80156b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80156ba:	4770      	bx	lr

080156bc <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 80156bc:	b480      	push	{r7}
 80156be:	b085      	sub	sp, #20
 80156c0:	af00      	add	r7, sp, #0
 80156c2:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 80156c4:	687b      	ldr	r3, [r7, #4]
 80156c6:	3303      	adds	r3, #3
 80156c8:	781b      	ldrb	r3, [r3, #0]
 80156ca:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 80156cc:	68fb      	ldr	r3, [r7, #12]
 80156ce:	021b      	lsls	r3, r3, #8
 80156d0:	687a      	ldr	r2, [r7, #4]
 80156d2:	3202      	adds	r2, #2
 80156d4:	7812      	ldrb	r2, [r2, #0]
 80156d6:	4313      	orrs	r3, r2
 80156d8:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 80156da:	68fb      	ldr	r3, [r7, #12]
 80156dc:	021b      	lsls	r3, r3, #8
 80156de:	687a      	ldr	r2, [r7, #4]
 80156e0:	3201      	adds	r2, #1
 80156e2:	7812      	ldrb	r2, [r2, #0]
 80156e4:	4313      	orrs	r3, r2
 80156e6:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 80156e8:	68fb      	ldr	r3, [r7, #12]
 80156ea:	021b      	lsls	r3, r3, #8
 80156ec:	687a      	ldr	r2, [r7, #4]
 80156ee:	7812      	ldrb	r2, [r2, #0]
 80156f0:	4313      	orrs	r3, r2
 80156f2:	60fb      	str	r3, [r7, #12]
	return rv;
 80156f4:	68fb      	ldr	r3, [r7, #12]
}
 80156f6:	4618      	mov	r0, r3
 80156f8:	3714      	adds	r7, #20
 80156fa:	46bd      	mov	sp, r7
 80156fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015700:	4770      	bx	lr

08015702 <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 8015702:	b480      	push	{r7}
 8015704:	b083      	sub	sp, #12
 8015706:	af00      	add	r7, sp, #0
 8015708:	6078      	str	r0, [r7, #4]
 801570a:	460b      	mov	r3, r1
 801570c:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 801570e:	687b      	ldr	r3, [r7, #4]
 8015710:	1c5a      	adds	r2, r3, #1
 8015712:	607a      	str	r2, [r7, #4]
 8015714:	887a      	ldrh	r2, [r7, #2]
 8015716:	b2d2      	uxtb	r2, r2
 8015718:	701a      	strb	r2, [r3, #0]
 801571a:	887b      	ldrh	r3, [r7, #2]
 801571c:	0a1b      	lsrs	r3, r3, #8
 801571e:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 8015720:	687b      	ldr	r3, [r7, #4]
 8015722:	1c5a      	adds	r2, r3, #1
 8015724:	607a      	str	r2, [r7, #4]
 8015726:	887a      	ldrh	r2, [r7, #2]
 8015728:	b2d2      	uxtb	r2, r2
 801572a:	701a      	strb	r2, [r3, #0]
}
 801572c:	bf00      	nop
 801572e:	370c      	adds	r7, #12
 8015730:	46bd      	mov	sp, r7
 8015732:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015736:	4770      	bx	lr

08015738 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 8015738:	b480      	push	{r7}
 801573a:	b083      	sub	sp, #12
 801573c:	af00      	add	r7, sp, #0
 801573e:	6078      	str	r0, [r7, #4]
 8015740:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8015742:	687b      	ldr	r3, [r7, #4]
 8015744:	1c5a      	adds	r2, r3, #1
 8015746:	607a      	str	r2, [r7, #4]
 8015748:	683a      	ldr	r2, [r7, #0]
 801574a:	b2d2      	uxtb	r2, r2
 801574c:	701a      	strb	r2, [r3, #0]
 801574e:	683b      	ldr	r3, [r7, #0]
 8015750:	0a1b      	lsrs	r3, r3, #8
 8015752:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8015754:	687b      	ldr	r3, [r7, #4]
 8015756:	1c5a      	adds	r2, r3, #1
 8015758:	607a      	str	r2, [r7, #4]
 801575a:	683a      	ldr	r2, [r7, #0]
 801575c:	b2d2      	uxtb	r2, r2
 801575e:	701a      	strb	r2, [r3, #0]
 8015760:	683b      	ldr	r3, [r7, #0]
 8015762:	0a1b      	lsrs	r3, r3, #8
 8015764:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8015766:	687b      	ldr	r3, [r7, #4]
 8015768:	1c5a      	adds	r2, r3, #1
 801576a:	607a      	str	r2, [r7, #4]
 801576c:	683a      	ldr	r2, [r7, #0]
 801576e:	b2d2      	uxtb	r2, r2
 8015770:	701a      	strb	r2, [r3, #0]
 8015772:	683b      	ldr	r3, [r7, #0]
 8015774:	0a1b      	lsrs	r3, r3, #8
 8015776:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 8015778:	687b      	ldr	r3, [r7, #4]
 801577a:	1c5a      	adds	r2, r3, #1
 801577c:	607a      	str	r2, [r7, #4]
 801577e:	683a      	ldr	r2, [r7, #0]
 8015780:	b2d2      	uxtb	r2, r2
 8015782:	701a      	strb	r2, [r3, #0]
}
 8015784:	bf00      	nop
 8015786:	370c      	adds	r7, #12
 8015788:	46bd      	mov	sp, r7
 801578a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801578e:	4770      	bx	lr

08015790 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 8015790:	b480      	push	{r7}
 8015792:	b087      	sub	sp, #28
 8015794:	af00      	add	r7, sp, #0
 8015796:	60f8      	str	r0, [r7, #12]
 8015798:	60b9      	str	r1, [r7, #8]
 801579a:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 801579c:	68fb      	ldr	r3, [r7, #12]
 801579e:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 80157a0:	68bb      	ldr	r3, [r7, #8]
 80157a2:	613b      	str	r3, [r7, #16]

	if (cnt) {
 80157a4:	687b      	ldr	r3, [r7, #4]
 80157a6:	2b00      	cmp	r3, #0
 80157a8:	d00d      	beq.n	80157c6 <mem_cpy+0x36>
		do {
			*d++ = *s++;
 80157aa:	693a      	ldr	r2, [r7, #16]
 80157ac:	1c53      	adds	r3, r2, #1
 80157ae:	613b      	str	r3, [r7, #16]
 80157b0:	697b      	ldr	r3, [r7, #20]
 80157b2:	1c59      	adds	r1, r3, #1
 80157b4:	6179      	str	r1, [r7, #20]
 80157b6:	7812      	ldrb	r2, [r2, #0]
 80157b8:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 80157ba:	687b      	ldr	r3, [r7, #4]
 80157bc:	3b01      	subs	r3, #1
 80157be:	607b      	str	r3, [r7, #4]
 80157c0:	687b      	ldr	r3, [r7, #4]
 80157c2:	2b00      	cmp	r3, #0
 80157c4:	d1f1      	bne.n	80157aa <mem_cpy+0x1a>
	}
}
 80157c6:	bf00      	nop
 80157c8:	371c      	adds	r7, #28
 80157ca:	46bd      	mov	sp, r7
 80157cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80157d0:	4770      	bx	lr

080157d2 <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 80157d2:	b480      	push	{r7}
 80157d4:	b087      	sub	sp, #28
 80157d6:	af00      	add	r7, sp, #0
 80157d8:	60f8      	str	r0, [r7, #12]
 80157da:	60b9      	str	r1, [r7, #8]
 80157dc:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 80157de:	68fb      	ldr	r3, [r7, #12]
 80157e0:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 80157e2:	697b      	ldr	r3, [r7, #20]
 80157e4:	1c5a      	adds	r2, r3, #1
 80157e6:	617a      	str	r2, [r7, #20]
 80157e8:	68ba      	ldr	r2, [r7, #8]
 80157ea:	b2d2      	uxtb	r2, r2
 80157ec:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 80157ee:	687b      	ldr	r3, [r7, #4]
 80157f0:	3b01      	subs	r3, #1
 80157f2:	607b      	str	r3, [r7, #4]
 80157f4:	687b      	ldr	r3, [r7, #4]
 80157f6:	2b00      	cmp	r3, #0
 80157f8:	d1f3      	bne.n	80157e2 <mem_set+0x10>
}
 80157fa:	bf00      	nop
 80157fc:	371c      	adds	r7, #28
 80157fe:	46bd      	mov	sp, r7
 8015800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015804:	4770      	bx	lr

08015806 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 8015806:	b480      	push	{r7}
 8015808:	b089      	sub	sp, #36	; 0x24
 801580a:	af00      	add	r7, sp, #0
 801580c:	60f8      	str	r0, [r7, #12]
 801580e:	60b9      	str	r1, [r7, #8]
 8015810:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 8015812:	68fb      	ldr	r3, [r7, #12]
 8015814:	61fb      	str	r3, [r7, #28]
 8015816:	68bb      	ldr	r3, [r7, #8]
 8015818:	61bb      	str	r3, [r7, #24]
	int r = 0;
 801581a:	2300      	movs	r3, #0
 801581c:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 801581e:	69fb      	ldr	r3, [r7, #28]
 8015820:	1c5a      	adds	r2, r3, #1
 8015822:	61fa      	str	r2, [r7, #28]
 8015824:	781b      	ldrb	r3, [r3, #0]
 8015826:	4619      	mov	r1, r3
 8015828:	69bb      	ldr	r3, [r7, #24]
 801582a:	1c5a      	adds	r2, r3, #1
 801582c:	61ba      	str	r2, [r7, #24]
 801582e:	781b      	ldrb	r3, [r3, #0]
 8015830:	1acb      	subs	r3, r1, r3
 8015832:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 8015834:	687b      	ldr	r3, [r7, #4]
 8015836:	3b01      	subs	r3, #1
 8015838:	607b      	str	r3, [r7, #4]
 801583a:	687b      	ldr	r3, [r7, #4]
 801583c:	2b00      	cmp	r3, #0
 801583e:	d002      	beq.n	8015846 <mem_cmp+0x40>
 8015840:	697b      	ldr	r3, [r7, #20]
 8015842:	2b00      	cmp	r3, #0
 8015844:	d0eb      	beq.n	801581e <mem_cmp+0x18>

	return r;
 8015846:	697b      	ldr	r3, [r7, #20]
}
 8015848:	4618      	mov	r0, r3
 801584a:	3724      	adds	r7, #36	; 0x24
 801584c:	46bd      	mov	sp, r7
 801584e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015852:	4770      	bx	lr

08015854 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 8015854:	b480      	push	{r7}
 8015856:	b083      	sub	sp, #12
 8015858:	af00      	add	r7, sp, #0
 801585a:	6078      	str	r0, [r7, #4]
 801585c:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 801585e:	e002      	b.n	8015866 <chk_chr+0x12>
 8015860:	687b      	ldr	r3, [r7, #4]
 8015862:	3301      	adds	r3, #1
 8015864:	607b      	str	r3, [r7, #4]
 8015866:	687b      	ldr	r3, [r7, #4]
 8015868:	781b      	ldrb	r3, [r3, #0]
 801586a:	2b00      	cmp	r3, #0
 801586c:	d005      	beq.n	801587a <chk_chr+0x26>
 801586e:	687b      	ldr	r3, [r7, #4]
 8015870:	781b      	ldrb	r3, [r3, #0]
 8015872:	461a      	mov	r2, r3
 8015874:	683b      	ldr	r3, [r7, #0]
 8015876:	4293      	cmp	r3, r2
 8015878:	d1f2      	bne.n	8015860 <chk_chr+0xc>
	return *str;
 801587a:	687b      	ldr	r3, [r7, #4]
 801587c:	781b      	ldrb	r3, [r3, #0]
}
 801587e:	4618      	mov	r0, r3
 8015880:	370c      	adds	r7, #12
 8015882:	46bd      	mov	sp, r7
 8015884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015888:	4770      	bx	lr
	...

0801588c <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 801588c:	b480      	push	{r7}
 801588e:	b085      	sub	sp, #20
 8015890:	af00      	add	r7, sp, #0
 8015892:	6078      	str	r0, [r7, #4]
 8015894:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 8015896:	2300      	movs	r3, #0
 8015898:	60bb      	str	r3, [r7, #8]
 801589a:	68bb      	ldr	r3, [r7, #8]
 801589c:	60fb      	str	r3, [r7, #12]
 801589e:	e029      	b.n	80158f4 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 80158a0:	4a27      	ldr	r2, [pc, #156]	; (8015940 <chk_lock+0xb4>)
 80158a2:	68fb      	ldr	r3, [r7, #12]
 80158a4:	011b      	lsls	r3, r3, #4
 80158a6:	4413      	add	r3, r2
 80158a8:	681b      	ldr	r3, [r3, #0]
 80158aa:	2b00      	cmp	r3, #0
 80158ac:	d01d      	beq.n	80158ea <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 80158ae:	4a24      	ldr	r2, [pc, #144]	; (8015940 <chk_lock+0xb4>)
 80158b0:	68fb      	ldr	r3, [r7, #12]
 80158b2:	011b      	lsls	r3, r3, #4
 80158b4:	4413      	add	r3, r2
 80158b6:	681a      	ldr	r2, [r3, #0]
 80158b8:	687b      	ldr	r3, [r7, #4]
 80158ba:	681b      	ldr	r3, [r3, #0]
 80158bc:	429a      	cmp	r2, r3
 80158be:	d116      	bne.n	80158ee <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 80158c0:	4a1f      	ldr	r2, [pc, #124]	; (8015940 <chk_lock+0xb4>)
 80158c2:	68fb      	ldr	r3, [r7, #12]
 80158c4:	011b      	lsls	r3, r3, #4
 80158c6:	4413      	add	r3, r2
 80158c8:	3304      	adds	r3, #4
 80158ca:	681a      	ldr	r2, [r3, #0]
 80158cc:	687b      	ldr	r3, [r7, #4]
 80158ce:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 80158d0:	429a      	cmp	r2, r3
 80158d2:	d10c      	bne.n	80158ee <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 80158d4:	4a1a      	ldr	r2, [pc, #104]	; (8015940 <chk_lock+0xb4>)
 80158d6:	68fb      	ldr	r3, [r7, #12]
 80158d8:	011b      	lsls	r3, r3, #4
 80158da:	4413      	add	r3, r2
 80158dc:	3308      	adds	r3, #8
 80158de:	681a      	ldr	r2, [r3, #0]
 80158e0:	687b      	ldr	r3, [r7, #4]
 80158e2:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 80158e4:	429a      	cmp	r2, r3
 80158e6:	d102      	bne.n	80158ee <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 80158e8:	e007      	b.n	80158fa <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 80158ea:	2301      	movs	r3, #1
 80158ec:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 80158ee:	68fb      	ldr	r3, [r7, #12]
 80158f0:	3301      	adds	r3, #1
 80158f2:	60fb      	str	r3, [r7, #12]
 80158f4:	68fb      	ldr	r3, [r7, #12]
 80158f6:	2b01      	cmp	r3, #1
 80158f8:	d9d2      	bls.n	80158a0 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 80158fa:	68fb      	ldr	r3, [r7, #12]
 80158fc:	2b02      	cmp	r3, #2
 80158fe:	d109      	bne.n	8015914 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 8015900:	68bb      	ldr	r3, [r7, #8]
 8015902:	2b00      	cmp	r3, #0
 8015904:	d102      	bne.n	801590c <chk_lock+0x80>
 8015906:	683b      	ldr	r3, [r7, #0]
 8015908:	2b02      	cmp	r3, #2
 801590a:	d101      	bne.n	8015910 <chk_lock+0x84>
 801590c:	2300      	movs	r3, #0
 801590e:	e010      	b.n	8015932 <chk_lock+0xa6>
 8015910:	2312      	movs	r3, #18
 8015912:	e00e      	b.n	8015932 <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 8015914:	683b      	ldr	r3, [r7, #0]
 8015916:	2b00      	cmp	r3, #0
 8015918:	d108      	bne.n	801592c <chk_lock+0xa0>
 801591a:	4a09      	ldr	r2, [pc, #36]	; (8015940 <chk_lock+0xb4>)
 801591c:	68fb      	ldr	r3, [r7, #12]
 801591e:	011b      	lsls	r3, r3, #4
 8015920:	4413      	add	r3, r2
 8015922:	330c      	adds	r3, #12
 8015924:	881b      	ldrh	r3, [r3, #0]
 8015926:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801592a:	d101      	bne.n	8015930 <chk_lock+0xa4>
 801592c:	2310      	movs	r3, #16
 801592e:	e000      	b.n	8015932 <chk_lock+0xa6>
 8015930:	2300      	movs	r3, #0
}
 8015932:	4618      	mov	r0, r3
 8015934:	3714      	adds	r7, #20
 8015936:	46bd      	mov	sp, r7
 8015938:	f85d 7b04 	ldr.w	r7, [sp], #4
 801593c:	4770      	bx	lr
 801593e:	bf00      	nop
 8015940:	24000b58 	.word	0x24000b58

08015944 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 8015944:	b480      	push	{r7}
 8015946:	b083      	sub	sp, #12
 8015948:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 801594a:	2300      	movs	r3, #0
 801594c:	607b      	str	r3, [r7, #4]
 801594e:	e002      	b.n	8015956 <enq_lock+0x12>
 8015950:	687b      	ldr	r3, [r7, #4]
 8015952:	3301      	adds	r3, #1
 8015954:	607b      	str	r3, [r7, #4]
 8015956:	687b      	ldr	r3, [r7, #4]
 8015958:	2b01      	cmp	r3, #1
 801595a:	d806      	bhi.n	801596a <enq_lock+0x26>
 801595c:	4a09      	ldr	r2, [pc, #36]	; (8015984 <enq_lock+0x40>)
 801595e:	687b      	ldr	r3, [r7, #4]
 8015960:	011b      	lsls	r3, r3, #4
 8015962:	4413      	add	r3, r2
 8015964:	681b      	ldr	r3, [r3, #0]
 8015966:	2b00      	cmp	r3, #0
 8015968:	d1f2      	bne.n	8015950 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 801596a:	687b      	ldr	r3, [r7, #4]
 801596c:	2b02      	cmp	r3, #2
 801596e:	bf14      	ite	ne
 8015970:	2301      	movne	r3, #1
 8015972:	2300      	moveq	r3, #0
 8015974:	b2db      	uxtb	r3, r3
}
 8015976:	4618      	mov	r0, r3
 8015978:	370c      	adds	r7, #12
 801597a:	46bd      	mov	sp, r7
 801597c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015980:	4770      	bx	lr
 8015982:	bf00      	nop
 8015984:	24000b58 	.word	0x24000b58

08015988 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8015988:	b480      	push	{r7}
 801598a:	b085      	sub	sp, #20
 801598c:	af00      	add	r7, sp, #0
 801598e:	6078      	str	r0, [r7, #4]
 8015990:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8015992:	2300      	movs	r3, #0
 8015994:	60fb      	str	r3, [r7, #12]
 8015996:	e01f      	b.n	80159d8 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 8015998:	4a41      	ldr	r2, [pc, #260]	; (8015aa0 <inc_lock+0x118>)
 801599a:	68fb      	ldr	r3, [r7, #12]
 801599c:	011b      	lsls	r3, r3, #4
 801599e:	4413      	add	r3, r2
 80159a0:	681a      	ldr	r2, [r3, #0]
 80159a2:	687b      	ldr	r3, [r7, #4]
 80159a4:	681b      	ldr	r3, [r3, #0]
 80159a6:	429a      	cmp	r2, r3
 80159a8:	d113      	bne.n	80159d2 <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 80159aa:	4a3d      	ldr	r2, [pc, #244]	; (8015aa0 <inc_lock+0x118>)
 80159ac:	68fb      	ldr	r3, [r7, #12]
 80159ae:	011b      	lsls	r3, r3, #4
 80159b0:	4413      	add	r3, r2
 80159b2:	3304      	adds	r3, #4
 80159b4:	681a      	ldr	r2, [r3, #0]
 80159b6:	687b      	ldr	r3, [r7, #4]
 80159b8:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 80159ba:	429a      	cmp	r2, r3
 80159bc:	d109      	bne.n	80159d2 <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 80159be:	4a38      	ldr	r2, [pc, #224]	; (8015aa0 <inc_lock+0x118>)
 80159c0:	68fb      	ldr	r3, [r7, #12]
 80159c2:	011b      	lsls	r3, r3, #4
 80159c4:	4413      	add	r3, r2
 80159c6:	3308      	adds	r3, #8
 80159c8:	681a      	ldr	r2, [r3, #0]
 80159ca:	687b      	ldr	r3, [r7, #4]
 80159cc:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 80159ce:	429a      	cmp	r2, r3
 80159d0:	d006      	beq.n	80159e0 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 80159d2:	68fb      	ldr	r3, [r7, #12]
 80159d4:	3301      	adds	r3, #1
 80159d6:	60fb      	str	r3, [r7, #12]
 80159d8:	68fb      	ldr	r3, [r7, #12]
 80159da:	2b01      	cmp	r3, #1
 80159dc:	d9dc      	bls.n	8015998 <inc_lock+0x10>
 80159de:	e000      	b.n	80159e2 <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 80159e0:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 80159e2:	68fb      	ldr	r3, [r7, #12]
 80159e4:	2b02      	cmp	r3, #2
 80159e6:	d132      	bne.n	8015a4e <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 80159e8:	2300      	movs	r3, #0
 80159ea:	60fb      	str	r3, [r7, #12]
 80159ec:	e002      	b.n	80159f4 <inc_lock+0x6c>
 80159ee:	68fb      	ldr	r3, [r7, #12]
 80159f0:	3301      	adds	r3, #1
 80159f2:	60fb      	str	r3, [r7, #12]
 80159f4:	68fb      	ldr	r3, [r7, #12]
 80159f6:	2b01      	cmp	r3, #1
 80159f8:	d806      	bhi.n	8015a08 <inc_lock+0x80>
 80159fa:	4a29      	ldr	r2, [pc, #164]	; (8015aa0 <inc_lock+0x118>)
 80159fc:	68fb      	ldr	r3, [r7, #12]
 80159fe:	011b      	lsls	r3, r3, #4
 8015a00:	4413      	add	r3, r2
 8015a02:	681b      	ldr	r3, [r3, #0]
 8015a04:	2b00      	cmp	r3, #0
 8015a06:	d1f2      	bne.n	80159ee <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 8015a08:	68fb      	ldr	r3, [r7, #12]
 8015a0a:	2b02      	cmp	r3, #2
 8015a0c:	d101      	bne.n	8015a12 <inc_lock+0x8a>
 8015a0e:	2300      	movs	r3, #0
 8015a10:	e040      	b.n	8015a94 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 8015a12:	687b      	ldr	r3, [r7, #4]
 8015a14:	681a      	ldr	r2, [r3, #0]
 8015a16:	4922      	ldr	r1, [pc, #136]	; (8015aa0 <inc_lock+0x118>)
 8015a18:	68fb      	ldr	r3, [r7, #12]
 8015a1a:	011b      	lsls	r3, r3, #4
 8015a1c:	440b      	add	r3, r1
 8015a1e:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 8015a20:	687b      	ldr	r3, [r7, #4]
 8015a22:	689a      	ldr	r2, [r3, #8]
 8015a24:	491e      	ldr	r1, [pc, #120]	; (8015aa0 <inc_lock+0x118>)
 8015a26:	68fb      	ldr	r3, [r7, #12]
 8015a28:	011b      	lsls	r3, r3, #4
 8015a2a:	440b      	add	r3, r1
 8015a2c:	3304      	adds	r3, #4
 8015a2e:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 8015a30:	687b      	ldr	r3, [r7, #4]
 8015a32:	695a      	ldr	r2, [r3, #20]
 8015a34:	491a      	ldr	r1, [pc, #104]	; (8015aa0 <inc_lock+0x118>)
 8015a36:	68fb      	ldr	r3, [r7, #12]
 8015a38:	011b      	lsls	r3, r3, #4
 8015a3a:	440b      	add	r3, r1
 8015a3c:	3308      	adds	r3, #8
 8015a3e:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 8015a40:	4a17      	ldr	r2, [pc, #92]	; (8015aa0 <inc_lock+0x118>)
 8015a42:	68fb      	ldr	r3, [r7, #12]
 8015a44:	011b      	lsls	r3, r3, #4
 8015a46:	4413      	add	r3, r2
 8015a48:	330c      	adds	r3, #12
 8015a4a:	2200      	movs	r2, #0
 8015a4c:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 8015a4e:	683b      	ldr	r3, [r7, #0]
 8015a50:	2b00      	cmp	r3, #0
 8015a52:	d009      	beq.n	8015a68 <inc_lock+0xe0>
 8015a54:	4a12      	ldr	r2, [pc, #72]	; (8015aa0 <inc_lock+0x118>)
 8015a56:	68fb      	ldr	r3, [r7, #12]
 8015a58:	011b      	lsls	r3, r3, #4
 8015a5a:	4413      	add	r3, r2
 8015a5c:	330c      	adds	r3, #12
 8015a5e:	881b      	ldrh	r3, [r3, #0]
 8015a60:	2b00      	cmp	r3, #0
 8015a62:	d001      	beq.n	8015a68 <inc_lock+0xe0>
 8015a64:	2300      	movs	r3, #0
 8015a66:	e015      	b.n	8015a94 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 8015a68:	683b      	ldr	r3, [r7, #0]
 8015a6a:	2b00      	cmp	r3, #0
 8015a6c:	d108      	bne.n	8015a80 <inc_lock+0xf8>
 8015a6e:	4a0c      	ldr	r2, [pc, #48]	; (8015aa0 <inc_lock+0x118>)
 8015a70:	68fb      	ldr	r3, [r7, #12]
 8015a72:	011b      	lsls	r3, r3, #4
 8015a74:	4413      	add	r3, r2
 8015a76:	330c      	adds	r3, #12
 8015a78:	881b      	ldrh	r3, [r3, #0]
 8015a7a:	3301      	adds	r3, #1
 8015a7c:	b29a      	uxth	r2, r3
 8015a7e:	e001      	b.n	8015a84 <inc_lock+0xfc>
 8015a80:	f44f 7280 	mov.w	r2, #256	; 0x100
 8015a84:	4906      	ldr	r1, [pc, #24]	; (8015aa0 <inc_lock+0x118>)
 8015a86:	68fb      	ldr	r3, [r7, #12]
 8015a88:	011b      	lsls	r3, r3, #4
 8015a8a:	440b      	add	r3, r1
 8015a8c:	330c      	adds	r3, #12
 8015a8e:	801a      	strh	r2, [r3, #0]

	return i + 1;
 8015a90:	68fb      	ldr	r3, [r7, #12]
 8015a92:	3301      	adds	r3, #1
}
 8015a94:	4618      	mov	r0, r3
 8015a96:	3714      	adds	r7, #20
 8015a98:	46bd      	mov	sp, r7
 8015a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015a9e:	4770      	bx	lr
 8015aa0:	24000b58 	.word	0x24000b58

08015aa4 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 8015aa4:	b480      	push	{r7}
 8015aa6:	b085      	sub	sp, #20
 8015aa8:	af00      	add	r7, sp, #0
 8015aaa:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 8015aac:	687b      	ldr	r3, [r7, #4]
 8015aae:	3b01      	subs	r3, #1
 8015ab0:	607b      	str	r3, [r7, #4]
 8015ab2:	687b      	ldr	r3, [r7, #4]
 8015ab4:	2b01      	cmp	r3, #1
 8015ab6:	d825      	bhi.n	8015b04 <dec_lock+0x60>
		n = Files[i].ctr;
 8015ab8:	4a17      	ldr	r2, [pc, #92]	; (8015b18 <dec_lock+0x74>)
 8015aba:	687b      	ldr	r3, [r7, #4]
 8015abc:	011b      	lsls	r3, r3, #4
 8015abe:	4413      	add	r3, r2
 8015ac0:	330c      	adds	r3, #12
 8015ac2:	881b      	ldrh	r3, [r3, #0]
 8015ac4:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 8015ac6:	89fb      	ldrh	r3, [r7, #14]
 8015ac8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8015acc:	d101      	bne.n	8015ad2 <dec_lock+0x2e>
 8015ace:	2300      	movs	r3, #0
 8015ad0:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 8015ad2:	89fb      	ldrh	r3, [r7, #14]
 8015ad4:	2b00      	cmp	r3, #0
 8015ad6:	d002      	beq.n	8015ade <dec_lock+0x3a>
 8015ad8:	89fb      	ldrh	r3, [r7, #14]
 8015ada:	3b01      	subs	r3, #1
 8015adc:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 8015ade:	4a0e      	ldr	r2, [pc, #56]	; (8015b18 <dec_lock+0x74>)
 8015ae0:	687b      	ldr	r3, [r7, #4]
 8015ae2:	011b      	lsls	r3, r3, #4
 8015ae4:	4413      	add	r3, r2
 8015ae6:	330c      	adds	r3, #12
 8015ae8:	89fa      	ldrh	r2, [r7, #14]
 8015aea:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 8015aec:	89fb      	ldrh	r3, [r7, #14]
 8015aee:	2b00      	cmp	r3, #0
 8015af0:	d105      	bne.n	8015afe <dec_lock+0x5a>
 8015af2:	4a09      	ldr	r2, [pc, #36]	; (8015b18 <dec_lock+0x74>)
 8015af4:	687b      	ldr	r3, [r7, #4]
 8015af6:	011b      	lsls	r3, r3, #4
 8015af8:	4413      	add	r3, r2
 8015afa:	2200      	movs	r2, #0
 8015afc:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 8015afe:	2300      	movs	r3, #0
 8015b00:	737b      	strb	r3, [r7, #13]
 8015b02:	e001      	b.n	8015b08 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 8015b04:	2302      	movs	r3, #2
 8015b06:	737b      	strb	r3, [r7, #13]
	}
	return res;
 8015b08:	7b7b      	ldrb	r3, [r7, #13]
}
 8015b0a:	4618      	mov	r0, r3
 8015b0c:	3714      	adds	r7, #20
 8015b0e:	46bd      	mov	sp, r7
 8015b10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015b14:	4770      	bx	lr
 8015b16:	bf00      	nop
 8015b18:	24000b58 	.word	0x24000b58

08015b1c <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 8015b1c:	b480      	push	{r7}
 8015b1e:	b085      	sub	sp, #20
 8015b20:	af00      	add	r7, sp, #0
 8015b22:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 8015b24:	2300      	movs	r3, #0
 8015b26:	60fb      	str	r3, [r7, #12]
 8015b28:	e010      	b.n	8015b4c <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 8015b2a:	4a0d      	ldr	r2, [pc, #52]	; (8015b60 <clear_lock+0x44>)
 8015b2c:	68fb      	ldr	r3, [r7, #12]
 8015b2e:	011b      	lsls	r3, r3, #4
 8015b30:	4413      	add	r3, r2
 8015b32:	681b      	ldr	r3, [r3, #0]
 8015b34:	687a      	ldr	r2, [r7, #4]
 8015b36:	429a      	cmp	r2, r3
 8015b38:	d105      	bne.n	8015b46 <clear_lock+0x2a>
 8015b3a:	4a09      	ldr	r2, [pc, #36]	; (8015b60 <clear_lock+0x44>)
 8015b3c:	68fb      	ldr	r3, [r7, #12]
 8015b3e:	011b      	lsls	r3, r3, #4
 8015b40:	4413      	add	r3, r2
 8015b42:	2200      	movs	r2, #0
 8015b44:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 8015b46:	68fb      	ldr	r3, [r7, #12]
 8015b48:	3301      	adds	r3, #1
 8015b4a:	60fb      	str	r3, [r7, #12]
 8015b4c:	68fb      	ldr	r3, [r7, #12]
 8015b4e:	2b01      	cmp	r3, #1
 8015b50:	d9eb      	bls.n	8015b2a <clear_lock+0xe>
	}
}
 8015b52:	bf00      	nop
 8015b54:	3714      	adds	r7, #20
 8015b56:	46bd      	mov	sp, r7
 8015b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015b5c:	4770      	bx	lr
 8015b5e:	bf00      	nop
 8015b60:	24000b58 	.word	0x24000b58

08015b64 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 8015b64:	b580      	push	{r7, lr}
 8015b66:	b086      	sub	sp, #24
 8015b68:	af00      	add	r7, sp, #0
 8015b6a:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 8015b6c:	2300      	movs	r3, #0
 8015b6e:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8015b70:	687b      	ldr	r3, [r7, #4]
 8015b72:	78db      	ldrb	r3, [r3, #3]
 8015b74:	2b00      	cmp	r3, #0
 8015b76:	d034      	beq.n	8015be2 <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 8015b78:	687b      	ldr	r3, [r7, #4]
 8015b7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8015b7c:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 8015b7e:	687b      	ldr	r3, [r7, #4]
 8015b80:	7858      	ldrb	r0, [r3, #1]
 8015b82:	687b      	ldr	r3, [r7, #4]
 8015b84:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8015b88:	2301      	movs	r3, #1
 8015b8a:	697a      	ldr	r2, [r7, #20]
 8015b8c:	f7ff fd40 	bl	8015610 <disk_write>
 8015b90:	4603      	mov	r3, r0
 8015b92:	2b00      	cmp	r3, #0
 8015b94:	d002      	beq.n	8015b9c <sync_window+0x38>
			res = FR_DISK_ERR;
 8015b96:	2301      	movs	r3, #1
 8015b98:	73fb      	strb	r3, [r7, #15]
 8015b9a:	e022      	b.n	8015be2 <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 8015b9c:	687b      	ldr	r3, [r7, #4]
 8015b9e:	2200      	movs	r2, #0
 8015ba0:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8015ba2:	687b      	ldr	r3, [r7, #4]
 8015ba4:	6a1b      	ldr	r3, [r3, #32]
 8015ba6:	697a      	ldr	r2, [r7, #20]
 8015ba8:	1ad2      	subs	r2, r2, r3
 8015baa:	687b      	ldr	r3, [r7, #4]
 8015bac:	699b      	ldr	r3, [r3, #24]
 8015bae:	429a      	cmp	r2, r3
 8015bb0:	d217      	bcs.n	8015be2 <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8015bb2:	687b      	ldr	r3, [r7, #4]
 8015bb4:	789b      	ldrb	r3, [r3, #2]
 8015bb6:	613b      	str	r3, [r7, #16]
 8015bb8:	e010      	b.n	8015bdc <sync_window+0x78>
					wsect += fs->fsize;
 8015bba:	687b      	ldr	r3, [r7, #4]
 8015bbc:	699b      	ldr	r3, [r3, #24]
 8015bbe:	697a      	ldr	r2, [r7, #20]
 8015bc0:	4413      	add	r3, r2
 8015bc2:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 8015bc4:	687b      	ldr	r3, [r7, #4]
 8015bc6:	7858      	ldrb	r0, [r3, #1]
 8015bc8:	687b      	ldr	r3, [r7, #4]
 8015bca:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8015bce:	2301      	movs	r3, #1
 8015bd0:	697a      	ldr	r2, [r7, #20]
 8015bd2:	f7ff fd1d 	bl	8015610 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8015bd6:	693b      	ldr	r3, [r7, #16]
 8015bd8:	3b01      	subs	r3, #1
 8015bda:	613b      	str	r3, [r7, #16]
 8015bdc:	693b      	ldr	r3, [r7, #16]
 8015bde:	2b01      	cmp	r3, #1
 8015be0:	d8eb      	bhi.n	8015bba <sync_window+0x56>
				}
			}
		}
	}
	return res;
 8015be2:	7bfb      	ldrb	r3, [r7, #15]
}
 8015be4:	4618      	mov	r0, r3
 8015be6:	3718      	adds	r7, #24
 8015be8:	46bd      	mov	sp, r7
 8015bea:	bd80      	pop	{r7, pc}

08015bec <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 8015bec:	b580      	push	{r7, lr}
 8015bee:	b084      	sub	sp, #16
 8015bf0:	af00      	add	r7, sp, #0
 8015bf2:	6078      	str	r0, [r7, #4]
 8015bf4:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 8015bf6:	2300      	movs	r3, #0
 8015bf8:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 8015bfa:	687b      	ldr	r3, [r7, #4]
 8015bfc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8015bfe:	683a      	ldr	r2, [r7, #0]
 8015c00:	429a      	cmp	r2, r3
 8015c02:	d01b      	beq.n	8015c3c <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 8015c04:	6878      	ldr	r0, [r7, #4]
 8015c06:	f7ff ffad 	bl	8015b64 <sync_window>
 8015c0a:	4603      	mov	r3, r0
 8015c0c:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 8015c0e:	7bfb      	ldrb	r3, [r7, #15]
 8015c10:	2b00      	cmp	r3, #0
 8015c12:	d113      	bne.n	8015c3c <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 8015c14:	687b      	ldr	r3, [r7, #4]
 8015c16:	7858      	ldrb	r0, [r3, #1]
 8015c18:	687b      	ldr	r3, [r7, #4]
 8015c1a:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8015c1e:	2301      	movs	r3, #1
 8015c20:	683a      	ldr	r2, [r7, #0]
 8015c22:	f7ff fcd5 	bl	80155d0 <disk_read>
 8015c26:	4603      	mov	r3, r0
 8015c28:	2b00      	cmp	r3, #0
 8015c2a:	d004      	beq.n	8015c36 <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 8015c2c:	f04f 33ff 	mov.w	r3, #4294967295
 8015c30:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 8015c32:	2301      	movs	r3, #1
 8015c34:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 8015c36:	687b      	ldr	r3, [r7, #4]
 8015c38:	683a      	ldr	r2, [r7, #0]
 8015c3a:	62da      	str	r2, [r3, #44]	; 0x2c
		}
	}
	return res;
 8015c3c:	7bfb      	ldrb	r3, [r7, #15]
}
 8015c3e:	4618      	mov	r0, r3
 8015c40:	3710      	adds	r7, #16
 8015c42:	46bd      	mov	sp, r7
 8015c44:	bd80      	pop	{r7, pc}
	...

08015c48 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 8015c48:	b580      	push	{r7, lr}
 8015c4a:	b084      	sub	sp, #16
 8015c4c:	af00      	add	r7, sp, #0
 8015c4e:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 8015c50:	6878      	ldr	r0, [r7, #4]
 8015c52:	f7ff ff87 	bl	8015b64 <sync_window>
 8015c56:	4603      	mov	r3, r0
 8015c58:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8015c5a:	7bfb      	ldrb	r3, [r7, #15]
 8015c5c:	2b00      	cmp	r3, #0
 8015c5e:	d158      	bne.n	8015d12 <sync_fs+0xca>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 8015c60:	687b      	ldr	r3, [r7, #4]
 8015c62:	781b      	ldrb	r3, [r3, #0]
 8015c64:	2b03      	cmp	r3, #3
 8015c66:	d148      	bne.n	8015cfa <sync_fs+0xb2>
 8015c68:	687b      	ldr	r3, [r7, #4]
 8015c6a:	791b      	ldrb	r3, [r3, #4]
 8015c6c:	2b01      	cmp	r3, #1
 8015c6e:	d144      	bne.n	8015cfa <sync_fs+0xb2>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 8015c70:	687b      	ldr	r3, [r7, #4]
 8015c72:	3330      	adds	r3, #48	; 0x30
 8015c74:	f44f 7200 	mov.w	r2, #512	; 0x200
 8015c78:	2100      	movs	r1, #0
 8015c7a:	4618      	mov	r0, r3
 8015c7c:	f7ff fda9 	bl	80157d2 <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 8015c80:	687b      	ldr	r3, [r7, #4]
 8015c82:	3330      	adds	r3, #48	; 0x30
 8015c84:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8015c88:	f64a 2155 	movw	r1, #43605	; 0xaa55
 8015c8c:	4618      	mov	r0, r3
 8015c8e:	f7ff fd38 	bl	8015702 <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 8015c92:	687b      	ldr	r3, [r7, #4]
 8015c94:	3330      	adds	r3, #48	; 0x30
 8015c96:	4921      	ldr	r1, [pc, #132]	; (8015d1c <sync_fs+0xd4>)
 8015c98:	4618      	mov	r0, r3
 8015c9a:	f7ff fd4d 	bl	8015738 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 8015c9e:	687b      	ldr	r3, [r7, #4]
 8015ca0:	3330      	adds	r3, #48	; 0x30
 8015ca2:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8015ca6:	491e      	ldr	r1, [pc, #120]	; (8015d20 <sync_fs+0xd8>)
 8015ca8:	4618      	mov	r0, r3
 8015caa:	f7ff fd45 	bl	8015738 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 8015cae:	687b      	ldr	r3, [r7, #4]
 8015cb0:	3330      	adds	r3, #48	; 0x30
 8015cb2:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 8015cb6:	687b      	ldr	r3, [r7, #4]
 8015cb8:	691b      	ldr	r3, [r3, #16]
 8015cba:	4619      	mov	r1, r3
 8015cbc:	4610      	mov	r0, r2
 8015cbe:	f7ff fd3b 	bl	8015738 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 8015cc2:	687b      	ldr	r3, [r7, #4]
 8015cc4:	3330      	adds	r3, #48	; 0x30
 8015cc6:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 8015cca:	687b      	ldr	r3, [r7, #4]
 8015ccc:	68db      	ldr	r3, [r3, #12]
 8015cce:	4619      	mov	r1, r3
 8015cd0:	4610      	mov	r0, r2
 8015cd2:	f7ff fd31 	bl	8015738 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 8015cd6:	687b      	ldr	r3, [r7, #4]
 8015cd8:	69db      	ldr	r3, [r3, #28]
 8015cda:	1c5a      	adds	r2, r3, #1
 8015cdc:	687b      	ldr	r3, [r7, #4]
 8015cde:	62da      	str	r2, [r3, #44]	; 0x2c
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 8015ce0:	687b      	ldr	r3, [r7, #4]
 8015ce2:	7858      	ldrb	r0, [r3, #1]
 8015ce4:	687b      	ldr	r3, [r7, #4]
 8015ce6:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8015cea:	687b      	ldr	r3, [r7, #4]
 8015cec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8015cee:	2301      	movs	r3, #1
 8015cf0:	f7ff fc8e 	bl	8015610 <disk_write>
			fs->fsi_flag = 0;
 8015cf4:	687b      	ldr	r3, [r7, #4]
 8015cf6:	2200      	movs	r2, #0
 8015cf8:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 8015cfa:	687b      	ldr	r3, [r7, #4]
 8015cfc:	785b      	ldrb	r3, [r3, #1]
 8015cfe:	2200      	movs	r2, #0
 8015d00:	2100      	movs	r1, #0
 8015d02:	4618      	mov	r0, r3
 8015d04:	f7ff fca4 	bl	8015650 <disk_ioctl>
 8015d08:	4603      	mov	r3, r0
 8015d0a:	2b00      	cmp	r3, #0
 8015d0c:	d001      	beq.n	8015d12 <sync_fs+0xca>
 8015d0e:	2301      	movs	r3, #1
 8015d10:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 8015d12:	7bfb      	ldrb	r3, [r7, #15]
}
 8015d14:	4618      	mov	r0, r3
 8015d16:	3710      	adds	r7, #16
 8015d18:	46bd      	mov	sp, r7
 8015d1a:	bd80      	pop	{r7, pc}
 8015d1c:	41615252 	.word	0x41615252
 8015d20:	61417272 	.word	0x61417272

08015d24 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 8015d24:	b480      	push	{r7}
 8015d26:	b083      	sub	sp, #12
 8015d28:	af00      	add	r7, sp, #0
 8015d2a:	6078      	str	r0, [r7, #4]
 8015d2c:	6039      	str	r1, [r7, #0]
	clst -= 2;
 8015d2e:	683b      	ldr	r3, [r7, #0]
 8015d30:	3b02      	subs	r3, #2
 8015d32:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8015d34:	687b      	ldr	r3, [r7, #4]
 8015d36:	695b      	ldr	r3, [r3, #20]
 8015d38:	3b02      	subs	r3, #2
 8015d3a:	683a      	ldr	r2, [r7, #0]
 8015d3c:	429a      	cmp	r2, r3
 8015d3e:	d301      	bcc.n	8015d44 <clust2sect+0x20>
 8015d40:	2300      	movs	r3, #0
 8015d42:	e008      	b.n	8015d56 <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 8015d44:	687b      	ldr	r3, [r7, #4]
 8015d46:	895b      	ldrh	r3, [r3, #10]
 8015d48:	461a      	mov	r2, r3
 8015d4a:	683b      	ldr	r3, [r7, #0]
 8015d4c:	fb03 f202 	mul.w	r2, r3, r2
 8015d50:	687b      	ldr	r3, [r7, #4]
 8015d52:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8015d54:	4413      	add	r3, r2
}
 8015d56:	4618      	mov	r0, r3
 8015d58:	370c      	adds	r7, #12
 8015d5a:	46bd      	mov	sp, r7
 8015d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015d60:	4770      	bx	lr

08015d62 <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 8015d62:	b580      	push	{r7, lr}
 8015d64:	b086      	sub	sp, #24
 8015d66:	af00      	add	r7, sp, #0
 8015d68:	6078      	str	r0, [r7, #4]
 8015d6a:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 8015d6c:	687b      	ldr	r3, [r7, #4]
 8015d6e:	681b      	ldr	r3, [r3, #0]
 8015d70:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 8015d72:	683b      	ldr	r3, [r7, #0]
 8015d74:	2b01      	cmp	r3, #1
 8015d76:	d904      	bls.n	8015d82 <get_fat+0x20>
 8015d78:	693b      	ldr	r3, [r7, #16]
 8015d7a:	695b      	ldr	r3, [r3, #20]
 8015d7c:	683a      	ldr	r2, [r7, #0]
 8015d7e:	429a      	cmp	r2, r3
 8015d80:	d302      	bcc.n	8015d88 <get_fat+0x26>
		val = 1;	/* Internal error */
 8015d82:	2301      	movs	r3, #1
 8015d84:	617b      	str	r3, [r7, #20]
 8015d86:	e08c      	b.n	8015ea2 <get_fat+0x140>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 8015d88:	f04f 33ff 	mov.w	r3, #4294967295
 8015d8c:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 8015d8e:	693b      	ldr	r3, [r7, #16]
 8015d90:	781b      	ldrb	r3, [r3, #0]
 8015d92:	2b02      	cmp	r3, #2
 8015d94:	d045      	beq.n	8015e22 <get_fat+0xc0>
 8015d96:	2b03      	cmp	r3, #3
 8015d98:	d05d      	beq.n	8015e56 <get_fat+0xf4>
 8015d9a:	2b01      	cmp	r3, #1
 8015d9c:	d177      	bne.n	8015e8e <get_fat+0x12c>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 8015d9e:	683b      	ldr	r3, [r7, #0]
 8015da0:	60fb      	str	r3, [r7, #12]
 8015da2:	68fb      	ldr	r3, [r7, #12]
 8015da4:	085b      	lsrs	r3, r3, #1
 8015da6:	68fa      	ldr	r2, [r7, #12]
 8015da8:	4413      	add	r3, r2
 8015daa:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8015dac:	693b      	ldr	r3, [r7, #16]
 8015dae:	6a1a      	ldr	r2, [r3, #32]
 8015db0:	68fb      	ldr	r3, [r7, #12]
 8015db2:	0a5b      	lsrs	r3, r3, #9
 8015db4:	4413      	add	r3, r2
 8015db6:	4619      	mov	r1, r3
 8015db8:	6938      	ldr	r0, [r7, #16]
 8015dba:	f7ff ff17 	bl	8015bec <move_window>
 8015dbe:	4603      	mov	r3, r0
 8015dc0:	2b00      	cmp	r3, #0
 8015dc2:	d167      	bne.n	8015e94 <get_fat+0x132>
			wc = fs->win[bc++ % SS(fs)];
 8015dc4:	68fb      	ldr	r3, [r7, #12]
 8015dc6:	1c5a      	adds	r2, r3, #1
 8015dc8:	60fa      	str	r2, [r7, #12]
 8015dca:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8015dce:	693a      	ldr	r2, [r7, #16]
 8015dd0:	4413      	add	r3, r2
 8015dd2:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8015dd6:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8015dd8:	693b      	ldr	r3, [r7, #16]
 8015dda:	6a1a      	ldr	r2, [r3, #32]
 8015ddc:	68fb      	ldr	r3, [r7, #12]
 8015dde:	0a5b      	lsrs	r3, r3, #9
 8015de0:	4413      	add	r3, r2
 8015de2:	4619      	mov	r1, r3
 8015de4:	6938      	ldr	r0, [r7, #16]
 8015de6:	f7ff ff01 	bl	8015bec <move_window>
 8015dea:	4603      	mov	r3, r0
 8015dec:	2b00      	cmp	r3, #0
 8015dee:	d153      	bne.n	8015e98 <get_fat+0x136>
			wc |= fs->win[bc % SS(fs)] << 8;
 8015df0:	68fb      	ldr	r3, [r7, #12]
 8015df2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8015df6:	693a      	ldr	r2, [r7, #16]
 8015df8:	4413      	add	r3, r2
 8015dfa:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8015dfe:	021b      	lsls	r3, r3, #8
 8015e00:	461a      	mov	r2, r3
 8015e02:	68bb      	ldr	r3, [r7, #8]
 8015e04:	4313      	orrs	r3, r2
 8015e06:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 8015e08:	683b      	ldr	r3, [r7, #0]
 8015e0a:	f003 0301 	and.w	r3, r3, #1
 8015e0e:	2b00      	cmp	r3, #0
 8015e10:	d002      	beq.n	8015e18 <get_fat+0xb6>
 8015e12:	68bb      	ldr	r3, [r7, #8]
 8015e14:	091b      	lsrs	r3, r3, #4
 8015e16:	e002      	b.n	8015e1e <get_fat+0xbc>
 8015e18:	68bb      	ldr	r3, [r7, #8]
 8015e1a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8015e1e:	617b      	str	r3, [r7, #20]
			break;
 8015e20:	e03f      	b.n	8015ea2 <get_fat+0x140>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8015e22:	693b      	ldr	r3, [r7, #16]
 8015e24:	6a1a      	ldr	r2, [r3, #32]
 8015e26:	683b      	ldr	r3, [r7, #0]
 8015e28:	0a1b      	lsrs	r3, r3, #8
 8015e2a:	4413      	add	r3, r2
 8015e2c:	4619      	mov	r1, r3
 8015e2e:	6938      	ldr	r0, [r7, #16]
 8015e30:	f7ff fedc 	bl	8015bec <move_window>
 8015e34:	4603      	mov	r3, r0
 8015e36:	2b00      	cmp	r3, #0
 8015e38:	d130      	bne.n	8015e9c <get_fat+0x13a>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 8015e3a:	693b      	ldr	r3, [r7, #16]
 8015e3c:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8015e40:	683b      	ldr	r3, [r7, #0]
 8015e42:	005b      	lsls	r3, r3, #1
 8015e44:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 8015e48:	4413      	add	r3, r2
 8015e4a:	4618      	mov	r0, r3
 8015e4c:	f7ff fc1e 	bl	801568c <ld_word>
 8015e50:	4603      	mov	r3, r0
 8015e52:	617b      	str	r3, [r7, #20]
			break;
 8015e54:	e025      	b.n	8015ea2 <get_fat+0x140>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8015e56:	693b      	ldr	r3, [r7, #16]
 8015e58:	6a1a      	ldr	r2, [r3, #32]
 8015e5a:	683b      	ldr	r3, [r7, #0]
 8015e5c:	09db      	lsrs	r3, r3, #7
 8015e5e:	4413      	add	r3, r2
 8015e60:	4619      	mov	r1, r3
 8015e62:	6938      	ldr	r0, [r7, #16]
 8015e64:	f7ff fec2 	bl	8015bec <move_window>
 8015e68:	4603      	mov	r3, r0
 8015e6a:	2b00      	cmp	r3, #0
 8015e6c:	d118      	bne.n	8015ea0 <get_fat+0x13e>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 8015e6e:	693b      	ldr	r3, [r7, #16]
 8015e70:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8015e74:	683b      	ldr	r3, [r7, #0]
 8015e76:	009b      	lsls	r3, r3, #2
 8015e78:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 8015e7c:	4413      	add	r3, r2
 8015e7e:	4618      	mov	r0, r3
 8015e80:	f7ff fc1c 	bl	80156bc <ld_dword>
 8015e84:	4603      	mov	r3, r0
 8015e86:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8015e8a:	617b      	str	r3, [r7, #20]
			break;
 8015e8c:	e009      	b.n	8015ea2 <get_fat+0x140>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 8015e8e:	2301      	movs	r3, #1
 8015e90:	617b      	str	r3, [r7, #20]
 8015e92:	e006      	b.n	8015ea2 <get_fat+0x140>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8015e94:	bf00      	nop
 8015e96:	e004      	b.n	8015ea2 <get_fat+0x140>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8015e98:	bf00      	nop
 8015e9a:	e002      	b.n	8015ea2 <get_fat+0x140>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8015e9c:	bf00      	nop
 8015e9e:	e000      	b.n	8015ea2 <get_fat+0x140>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8015ea0:	bf00      	nop
		}
	}

	return val;
 8015ea2:	697b      	ldr	r3, [r7, #20]
}
 8015ea4:	4618      	mov	r0, r3
 8015ea6:	3718      	adds	r7, #24
 8015ea8:	46bd      	mov	sp, r7
 8015eaa:	bd80      	pop	{r7, pc}

08015eac <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 8015eac:	b590      	push	{r4, r7, lr}
 8015eae:	b089      	sub	sp, #36	; 0x24
 8015eb0:	af00      	add	r7, sp, #0
 8015eb2:	60f8      	str	r0, [r7, #12]
 8015eb4:	60b9      	str	r1, [r7, #8]
 8015eb6:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 8015eb8:	2302      	movs	r3, #2
 8015eba:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 8015ebc:	68bb      	ldr	r3, [r7, #8]
 8015ebe:	2b01      	cmp	r3, #1
 8015ec0:	f240 80d6 	bls.w	8016070 <put_fat+0x1c4>
 8015ec4:	68fb      	ldr	r3, [r7, #12]
 8015ec6:	695b      	ldr	r3, [r3, #20]
 8015ec8:	68ba      	ldr	r2, [r7, #8]
 8015eca:	429a      	cmp	r2, r3
 8015ecc:	f080 80d0 	bcs.w	8016070 <put_fat+0x1c4>
		switch (fs->fs_type) {
 8015ed0:	68fb      	ldr	r3, [r7, #12]
 8015ed2:	781b      	ldrb	r3, [r3, #0]
 8015ed4:	2b02      	cmp	r3, #2
 8015ed6:	d073      	beq.n	8015fc0 <put_fat+0x114>
 8015ed8:	2b03      	cmp	r3, #3
 8015eda:	f000 8091 	beq.w	8016000 <put_fat+0x154>
 8015ede:	2b01      	cmp	r3, #1
 8015ee0:	f040 80c6 	bne.w	8016070 <put_fat+0x1c4>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 8015ee4:	68bb      	ldr	r3, [r7, #8]
 8015ee6:	61bb      	str	r3, [r7, #24]
 8015ee8:	69bb      	ldr	r3, [r7, #24]
 8015eea:	085b      	lsrs	r3, r3, #1
 8015eec:	69ba      	ldr	r2, [r7, #24]
 8015eee:	4413      	add	r3, r2
 8015ef0:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8015ef2:	68fb      	ldr	r3, [r7, #12]
 8015ef4:	6a1a      	ldr	r2, [r3, #32]
 8015ef6:	69bb      	ldr	r3, [r7, #24]
 8015ef8:	0a5b      	lsrs	r3, r3, #9
 8015efa:	4413      	add	r3, r2
 8015efc:	4619      	mov	r1, r3
 8015efe:	68f8      	ldr	r0, [r7, #12]
 8015f00:	f7ff fe74 	bl	8015bec <move_window>
 8015f04:	4603      	mov	r3, r0
 8015f06:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8015f08:	7ffb      	ldrb	r3, [r7, #31]
 8015f0a:	2b00      	cmp	r3, #0
 8015f0c:	f040 80a9 	bne.w	8016062 <put_fat+0x1b6>
			p = fs->win + bc++ % SS(fs);
 8015f10:	68fb      	ldr	r3, [r7, #12]
 8015f12:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8015f16:	69bb      	ldr	r3, [r7, #24]
 8015f18:	1c59      	adds	r1, r3, #1
 8015f1a:	61b9      	str	r1, [r7, #24]
 8015f1c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8015f20:	4413      	add	r3, r2
 8015f22:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 8015f24:	68bb      	ldr	r3, [r7, #8]
 8015f26:	f003 0301 	and.w	r3, r3, #1
 8015f2a:	2b00      	cmp	r3, #0
 8015f2c:	d00d      	beq.n	8015f4a <put_fat+0x9e>
 8015f2e:	697b      	ldr	r3, [r7, #20]
 8015f30:	781b      	ldrb	r3, [r3, #0]
 8015f32:	b25b      	sxtb	r3, r3
 8015f34:	f003 030f 	and.w	r3, r3, #15
 8015f38:	b25a      	sxtb	r2, r3
 8015f3a:	687b      	ldr	r3, [r7, #4]
 8015f3c:	b2db      	uxtb	r3, r3
 8015f3e:	011b      	lsls	r3, r3, #4
 8015f40:	b25b      	sxtb	r3, r3
 8015f42:	4313      	orrs	r3, r2
 8015f44:	b25b      	sxtb	r3, r3
 8015f46:	b2db      	uxtb	r3, r3
 8015f48:	e001      	b.n	8015f4e <put_fat+0xa2>
 8015f4a:	687b      	ldr	r3, [r7, #4]
 8015f4c:	b2db      	uxtb	r3, r3
 8015f4e:	697a      	ldr	r2, [r7, #20]
 8015f50:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8015f52:	68fb      	ldr	r3, [r7, #12]
 8015f54:	2201      	movs	r2, #1
 8015f56:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8015f58:	68fb      	ldr	r3, [r7, #12]
 8015f5a:	6a1a      	ldr	r2, [r3, #32]
 8015f5c:	69bb      	ldr	r3, [r7, #24]
 8015f5e:	0a5b      	lsrs	r3, r3, #9
 8015f60:	4413      	add	r3, r2
 8015f62:	4619      	mov	r1, r3
 8015f64:	68f8      	ldr	r0, [r7, #12]
 8015f66:	f7ff fe41 	bl	8015bec <move_window>
 8015f6a:	4603      	mov	r3, r0
 8015f6c:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8015f6e:	7ffb      	ldrb	r3, [r7, #31]
 8015f70:	2b00      	cmp	r3, #0
 8015f72:	d178      	bne.n	8016066 <put_fat+0x1ba>
			p = fs->win + bc % SS(fs);
 8015f74:	68fb      	ldr	r3, [r7, #12]
 8015f76:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8015f7a:	69bb      	ldr	r3, [r7, #24]
 8015f7c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8015f80:	4413      	add	r3, r2
 8015f82:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 8015f84:	68bb      	ldr	r3, [r7, #8]
 8015f86:	f003 0301 	and.w	r3, r3, #1
 8015f8a:	2b00      	cmp	r3, #0
 8015f8c:	d003      	beq.n	8015f96 <put_fat+0xea>
 8015f8e:	687b      	ldr	r3, [r7, #4]
 8015f90:	091b      	lsrs	r3, r3, #4
 8015f92:	b2db      	uxtb	r3, r3
 8015f94:	e00e      	b.n	8015fb4 <put_fat+0x108>
 8015f96:	697b      	ldr	r3, [r7, #20]
 8015f98:	781b      	ldrb	r3, [r3, #0]
 8015f9a:	b25b      	sxtb	r3, r3
 8015f9c:	f023 030f 	bic.w	r3, r3, #15
 8015fa0:	b25a      	sxtb	r2, r3
 8015fa2:	687b      	ldr	r3, [r7, #4]
 8015fa4:	0a1b      	lsrs	r3, r3, #8
 8015fa6:	b25b      	sxtb	r3, r3
 8015fa8:	f003 030f 	and.w	r3, r3, #15
 8015fac:	b25b      	sxtb	r3, r3
 8015fae:	4313      	orrs	r3, r2
 8015fb0:	b25b      	sxtb	r3, r3
 8015fb2:	b2db      	uxtb	r3, r3
 8015fb4:	697a      	ldr	r2, [r7, #20]
 8015fb6:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8015fb8:	68fb      	ldr	r3, [r7, #12]
 8015fba:	2201      	movs	r2, #1
 8015fbc:	70da      	strb	r2, [r3, #3]
			break;
 8015fbe:	e057      	b.n	8016070 <put_fat+0x1c4>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 8015fc0:	68fb      	ldr	r3, [r7, #12]
 8015fc2:	6a1a      	ldr	r2, [r3, #32]
 8015fc4:	68bb      	ldr	r3, [r7, #8]
 8015fc6:	0a1b      	lsrs	r3, r3, #8
 8015fc8:	4413      	add	r3, r2
 8015fca:	4619      	mov	r1, r3
 8015fcc:	68f8      	ldr	r0, [r7, #12]
 8015fce:	f7ff fe0d 	bl	8015bec <move_window>
 8015fd2:	4603      	mov	r3, r0
 8015fd4:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8015fd6:	7ffb      	ldrb	r3, [r7, #31]
 8015fd8:	2b00      	cmp	r3, #0
 8015fda:	d146      	bne.n	801606a <put_fat+0x1be>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 8015fdc:	68fb      	ldr	r3, [r7, #12]
 8015fde:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8015fe2:	68bb      	ldr	r3, [r7, #8]
 8015fe4:	005b      	lsls	r3, r3, #1
 8015fe6:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 8015fea:	4413      	add	r3, r2
 8015fec:	687a      	ldr	r2, [r7, #4]
 8015fee:	b292      	uxth	r2, r2
 8015ff0:	4611      	mov	r1, r2
 8015ff2:	4618      	mov	r0, r3
 8015ff4:	f7ff fb85 	bl	8015702 <st_word>
			fs->wflag = 1;
 8015ff8:	68fb      	ldr	r3, [r7, #12]
 8015ffa:	2201      	movs	r2, #1
 8015ffc:	70da      	strb	r2, [r3, #3]
			break;
 8015ffe:	e037      	b.n	8016070 <put_fat+0x1c4>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 8016000:	68fb      	ldr	r3, [r7, #12]
 8016002:	6a1a      	ldr	r2, [r3, #32]
 8016004:	68bb      	ldr	r3, [r7, #8]
 8016006:	09db      	lsrs	r3, r3, #7
 8016008:	4413      	add	r3, r2
 801600a:	4619      	mov	r1, r3
 801600c:	68f8      	ldr	r0, [r7, #12]
 801600e:	f7ff fded 	bl	8015bec <move_window>
 8016012:	4603      	mov	r3, r0
 8016014:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8016016:	7ffb      	ldrb	r3, [r7, #31]
 8016018:	2b00      	cmp	r3, #0
 801601a:	d128      	bne.n	801606e <put_fat+0x1c2>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 801601c:	687b      	ldr	r3, [r7, #4]
 801601e:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 8016022:	68fb      	ldr	r3, [r7, #12]
 8016024:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8016028:	68bb      	ldr	r3, [r7, #8]
 801602a:	009b      	lsls	r3, r3, #2
 801602c:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 8016030:	4413      	add	r3, r2
 8016032:	4618      	mov	r0, r3
 8016034:	f7ff fb42 	bl	80156bc <ld_dword>
 8016038:	4603      	mov	r3, r0
 801603a:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 801603e:	4323      	orrs	r3, r4
 8016040:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 8016042:	68fb      	ldr	r3, [r7, #12]
 8016044:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8016048:	68bb      	ldr	r3, [r7, #8]
 801604a:	009b      	lsls	r3, r3, #2
 801604c:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 8016050:	4413      	add	r3, r2
 8016052:	6879      	ldr	r1, [r7, #4]
 8016054:	4618      	mov	r0, r3
 8016056:	f7ff fb6f 	bl	8015738 <st_dword>
			fs->wflag = 1;
 801605a:	68fb      	ldr	r3, [r7, #12]
 801605c:	2201      	movs	r2, #1
 801605e:	70da      	strb	r2, [r3, #3]
			break;
 8016060:	e006      	b.n	8016070 <put_fat+0x1c4>
			if (res != FR_OK) break;
 8016062:	bf00      	nop
 8016064:	e004      	b.n	8016070 <put_fat+0x1c4>
			if (res != FR_OK) break;
 8016066:	bf00      	nop
 8016068:	e002      	b.n	8016070 <put_fat+0x1c4>
			if (res != FR_OK) break;
 801606a:	bf00      	nop
 801606c:	e000      	b.n	8016070 <put_fat+0x1c4>
			if (res != FR_OK) break;
 801606e:	bf00      	nop
		}
	}
	return res;
 8016070:	7ffb      	ldrb	r3, [r7, #31]
}
 8016072:	4618      	mov	r0, r3
 8016074:	3724      	adds	r7, #36	; 0x24
 8016076:	46bd      	mov	sp, r7
 8016078:	bd90      	pop	{r4, r7, pc}

0801607a <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 801607a:	b580      	push	{r7, lr}
 801607c:	b088      	sub	sp, #32
 801607e:	af00      	add	r7, sp, #0
 8016080:	60f8      	str	r0, [r7, #12]
 8016082:	60b9      	str	r1, [r7, #8]
 8016084:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 8016086:	2300      	movs	r3, #0
 8016088:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 801608a:	68fb      	ldr	r3, [r7, #12]
 801608c:	681b      	ldr	r3, [r3, #0]
 801608e:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 8016090:	68bb      	ldr	r3, [r7, #8]
 8016092:	2b01      	cmp	r3, #1
 8016094:	d904      	bls.n	80160a0 <remove_chain+0x26>
 8016096:	69bb      	ldr	r3, [r7, #24]
 8016098:	695b      	ldr	r3, [r3, #20]
 801609a:	68ba      	ldr	r2, [r7, #8]
 801609c:	429a      	cmp	r2, r3
 801609e:	d301      	bcc.n	80160a4 <remove_chain+0x2a>
 80160a0:	2302      	movs	r3, #2
 80160a2:	e04b      	b.n	801613c <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 80160a4:	687b      	ldr	r3, [r7, #4]
 80160a6:	2b00      	cmp	r3, #0
 80160a8:	d00c      	beq.n	80160c4 <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 80160aa:	f04f 32ff 	mov.w	r2, #4294967295
 80160ae:	6879      	ldr	r1, [r7, #4]
 80160b0:	69b8      	ldr	r0, [r7, #24]
 80160b2:	f7ff fefb 	bl	8015eac <put_fat>
 80160b6:	4603      	mov	r3, r0
 80160b8:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 80160ba:	7ffb      	ldrb	r3, [r7, #31]
 80160bc:	2b00      	cmp	r3, #0
 80160be:	d001      	beq.n	80160c4 <remove_chain+0x4a>
 80160c0:	7ffb      	ldrb	r3, [r7, #31]
 80160c2:	e03b      	b.n	801613c <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 80160c4:	68b9      	ldr	r1, [r7, #8]
 80160c6:	68f8      	ldr	r0, [r7, #12]
 80160c8:	f7ff fe4b 	bl	8015d62 <get_fat>
 80160cc:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 80160ce:	697b      	ldr	r3, [r7, #20]
 80160d0:	2b00      	cmp	r3, #0
 80160d2:	d031      	beq.n	8016138 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 80160d4:	697b      	ldr	r3, [r7, #20]
 80160d6:	2b01      	cmp	r3, #1
 80160d8:	d101      	bne.n	80160de <remove_chain+0x64>
 80160da:	2302      	movs	r3, #2
 80160dc:	e02e      	b.n	801613c <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 80160de:	697b      	ldr	r3, [r7, #20]
 80160e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80160e4:	d101      	bne.n	80160ea <remove_chain+0x70>
 80160e6:	2301      	movs	r3, #1
 80160e8:	e028      	b.n	801613c <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 80160ea:	2200      	movs	r2, #0
 80160ec:	68b9      	ldr	r1, [r7, #8]
 80160ee:	69b8      	ldr	r0, [r7, #24]
 80160f0:	f7ff fedc 	bl	8015eac <put_fat>
 80160f4:	4603      	mov	r3, r0
 80160f6:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 80160f8:	7ffb      	ldrb	r3, [r7, #31]
 80160fa:	2b00      	cmp	r3, #0
 80160fc:	d001      	beq.n	8016102 <remove_chain+0x88>
 80160fe:	7ffb      	ldrb	r3, [r7, #31]
 8016100:	e01c      	b.n	801613c <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 8016102:	69bb      	ldr	r3, [r7, #24]
 8016104:	691a      	ldr	r2, [r3, #16]
 8016106:	69bb      	ldr	r3, [r7, #24]
 8016108:	695b      	ldr	r3, [r3, #20]
 801610a:	3b02      	subs	r3, #2
 801610c:	429a      	cmp	r2, r3
 801610e:	d20b      	bcs.n	8016128 <remove_chain+0xae>
			fs->free_clst++;
 8016110:	69bb      	ldr	r3, [r7, #24]
 8016112:	691b      	ldr	r3, [r3, #16]
 8016114:	1c5a      	adds	r2, r3, #1
 8016116:	69bb      	ldr	r3, [r7, #24]
 8016118:	611a      	str	r2, [r3, #16]
			fs->fsi_flag |= 1;
 801611a:	69bb      	ldr	r3, [r7, #24]
 801611c:	791b      	ldrb	r3, [r3, #4]
 801611e:	f043 0301 	orr.w	r3, r3, #1
 8016122:	b2da      	uxtb	r2, r3
 8016124:	69bb      	ldr	r3, [r7, #24]
 8016126:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 8016128:	697b      	ldr	r3, [r7, #20]
 801612a:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 801612c:	69bb      	ldr	r3, [r7, #24]
 801612e:	695b      	ldr	r3, [r3, #20]
 8016130:	68ba      	ldr	r2, [r7, #8]
 8016132:	429a      	cmp	r2, r3
 8016134:	d3c6      	bcc.n	80160c4 <remove_chain+0x4a>
 8016136:	e000      	b.n	801613a <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 8016138:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 801613a:	2300      	movs	r3, #0
}
 801613c:	4618      	mov	r0, r3
 801613e:	3720      	adds	r7, #32
 8016140:	46bd      	mov	sp, r7
 8016142:	bd80      	pop	{r7, pc}

08016144 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 8016144:	b580      	push	{r7, lr}
 8016146:	b088      	sub	sp, #32
 8016148:	af00      	add	r7, sp, #0
 801614a:	6078      	str	r0, [r7, #4]
 801614c:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 801614e:	687b      	ldr	r3, [r7, #4]
 8016150:	681b      	ldr	r3, [r3, #0]
 8016152:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 8016154:	683b      	ldr	r3, [r7, #0]
 8016156:	2b00      	cmp	r3, #0
 8016158:	d10d      	bne.n	8016176 <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 801615a:	693b      	ldr	r3, [r7, #16]
 801615c:	68db      	ldr	r3, [r3, #12]
 801615e:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 8016160:	69bb      	ldr	r3, [r7, #24]
 8016162:	2b00      	cmp	r3, #0
 8016164:	d004      	beq.n	8016170 <create_chain+0x2c>
 8016166:	693b      	ldr	r3, [r7, #16]
 8016168:	695b      	ldr	r3, [r3, #20]
 801616a:	69ba      	ldr	r2, [r7, #24]
 801616c:	429a      	cmp	r2, r3
 801616e:	d31b      	bcc.n	80161a8 <create_chain+0x64>
 8016170:	2301      	movs	r3, #1
 8016172:	61bb      	str	r3, [r7, #24]
 8016174:	e018      	b.n	80161a8 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 8016176:	6839      	ldr	r1, [r7, #0]
 8016178:	6878      	ldr	r0, [r7, #4]
 801617a:	f7ff fdf2 	bl	8015d62 <get_fat>
 801617e:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 8016180:	68fb      	ldr	r3, [r7, #12]
 8016182:	2b01      	cmp	r3, #1
 8016184:	d801      	bhi.n	801618a <create_chain+0x46>
 8016186:	2301      	movs	r3, #1
 8016188:	e070      	b.n	801626c <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 801618a:	68fb      	ldr	r3, [r7, #12]
 801618c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8016190:	d101      	bne.n	8016196 <create_chain+0x52>
 8016192:	68fb      	ldr	r3, [r7, #12]
 8016194:	e06a      	b.n	801626c <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 8016196:	693b      	ldr	r3, [r7, #16]
 8016198:	695b      	ldr	r3, [r3, #20]
 801619a:	68fa      	ldr	r2, [r7, #12]
 801619c:	429a      	cmp	r2, r3
 801619e:	d201      	bcs.n	80161a4 <create_chain+0x60>
 80161a0:	68fb      	ldr	r3, [r7, #12]
 80161a2:	e063      	b.n	801626c <create_chain+0x128>
		scl = clst;
 80161a4:	683b      	ldr	r3, [r7, #0]
 80161a6:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 80161a8:	69bb      	ldr	r3, [r7, #24]
 80161aa:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 80161ac:	69fb      	ldr	r3, [r7, #28]
 80161ae:	3301      	adds	r3, #1
 80161b0:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 80161b2:	693b      	ldr	r3, [r7, #16]
 80161b4:	695b      	ldr	r3, [r3, #20]
 80161b6:	69fa      	ldr	r2, [r7, #28]
 80161b8:	429a      	cmp	r2, r3
 80161ba:	d307      	bcc.n	80161cc <create_chain+0x88>
				ncl = 2;
 80161bc:	2302      	movs	r3, #2
 80161be:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 80161c0:	69fa      	ldr	r2, [r7, #28]
 80161c2:	69bb      	ldr	r3, [r7, #24]
 80161c4:	429a      	cmp	r2, r3
 80161c6:	d901      	bls.n	80161cc <create_chain+0x88>
 80161c8:	2300      	movs	r3, #0
 80161ca:	e04f      	b.n	801626c <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 80161cc:	69f9      	ldr	r1, [r7, #28]
 80161ce:	6878      	ldr	r0, [r7, #4]
 80161d0:	f7ff fdc7 	bl	8015d62 <get_fat>
 80161d4:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 80161d6:	68fb      	ldr	r3, [r7, #12]
 80161d8:	2b00      	cmp	r3, #0
 80161da:	d00e      	beq.n	80161fa <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 80161dc:	68fb      	ldr	r3, [r7, #12]
 80161de:	2b01      	cmp	r3, #1
 80161e0:	d003      	beq.n	80161ea <create_chain+0xa6>
 80161e2:	68fb      	ldr	r3, [r7, #12]
 80161e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80161e8:	d101      	bne.n	80161ee <create_chain+0xaa>
 80161ea:	68fb      	ldr	r3, [r7, #12]
 80161ec:	e03e      	b.n	801626c <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 80161ee:	69fa      	ldr	r2, [r7, #28]
 80161f0:	69bb      	ldr	r3, [r7, #24]
 80161f2:	429a      	cmp	r2, r3
 80161f4:	d1da      	bne.n	80161ac <create_chain+0x68>
 80161f6:	2300      	movs	r3, #0
 80161f8:	e038      	b.n	801626c <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 80161fa:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 80161fc:	f04f 32ff 	mov.w	r2, #4294967295
 8016200:	69f9      	ldr	r1, [r7, #28]
 8016202:	6938      	ldr	r0, [r7, #16]
 8016204:	f7ff fe52 	bl	8015eac <put_fat>
 8016208:	4603      	mov	r3, r0
 801620a:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 801620c:	7dfb      	ldrb	r3, [r7, #23]
 801620e:	2b00      	cmp	r3, #0
 8016210:	d109      	bne.n	8016226 <create_chain+0xe2>
 8016212:	683b      	ldr	r3, [r7, #0]
 8016214:	2b00      	cmp	r3, #0
 8016216:	d006      	beq.n	8016226 <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 8016218:	69fa      	ldr	r2, [r7, #28]
 801621a:	6839      	ldr	r1, [r7, #0]
 801621c:	6938      	ldr	r0, [r7, #16]
 801621e:	f7ff fe45 	bl	8015eac <put_fat>
 8016222:	4603      	mov	r3, r0
 8016224:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 8016226:	7dfb      	ldrb	r3, [r7, #23]
 8016228:	2b00      	cmp	r3, #0
 801622a:	d116      	bne.n	801625a <create_chain+0x116>
		fs->last_clst = ncl;
 801622c:	693b      	ldr	r3, [r7, #16]
 801622e:	69fa      	ldr	r2, [r7, #28]
 8016230:	60da      	str	r2, [r3, #12]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 8016232:	693b      	ldr	r3, [r7, #16]
 8016234:	691a      	ldr	r2, [r3, #16]
 8016236:	693b      	ldr	r3, [r7, #16]
 8016238:	695b      	ldr	r3, [r3, #20]
 801623a:	3b02      	subs	r3, #2
 801623c:	429a      	cmp	r2, r3
 801623e:	d804      	bhi.n	801624a <create_chain+0x106>
 8016240:	693b      	ldr	r3, [r7, #16]
 8016242:	691b      	ldr	r3, [r3, #16]
 8016244:	1e5a      	subs	r2, r3, #1
 8016246:	693b      	ldr	r3, [r7, #16]
 8016248:	611a      	str	r2, [r3, #16]
		fs->fsi_flag |= 1;
 801624a:	693b      	ldr	r3, [r7, #16]
 801624c:	791b      	ldrb	r3, [r3, #4]
 801624e:	f043 0301 	orr.w	r3, r3, #1
 8016252:	b2da      	uxtb	r2, r3
 8016254:	693b      	ldr	r3, [r7, #16]
 8016256:	711a      	strb	r2, [r3, #4]
 8016258:	e007      	b.n	801626a <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 801625a:	7dfb      	ldrb	r3, [r7, #23]
 801625c:	2b01      	cmp	r3, #1
 801625e:	d102      	bne.n	8016266 <create_chain+0x122>
 8016260:	f04f 33ff 	mov.w	r3, #4294967295
 8016264:	e000      	b.n	8016268 <create_chain+0x124>
 8016266:	2301      	movs	r3, #1
 8016268:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 801626a:	69fb      	ldr	r3, [r7, #28]
}
 801626c:	4618      	mov	r0, r3
 801626e:	3720      	adds	r7, #32
 8016270:	46bd      	mov	sp, r7
 8016272:	bd80      	pop	{r7, pc}

08016274 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 8016274:	b480      	push	{r7}
 8016276:	b087      	sub	sp, #28
 8016278:	af00      	add	r7, sp, #0
 801627a:	6078      	str	r0, [r7, #4]
 801627c:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 801627e:	687b      	ldr	r3, [r7, #4]
 8016280:	681b      	ldr	r3, [r3, #0]
 8016282:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 8016284:	687b      	ldr	r3, [r7, #4]
 8016286:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8016288:	3304      	adds	r3, #4
 801628a:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 801628c:	683b      	ldr	r3, [r7, #0]
 801628e:	0a5b      	lsrs	r3, r3, #9
 8016290:	68fa      	ldr	r2, [r7, #12]
 8016292:	8952      	ldrh	r2, [r2, #10]
 8016294:	fbb3 f3f2 	udiv	r3, r3, r2
 8016298:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 801629a:	693b      	ldr	r3, [r7, #16]
 801629c:	1d1a      	adds	r2, r3, #4
 801629e:	613a      	str	r2, [r7, #16]
 80162a0:	681b      	ldr	r3, [r3, #0]
 80162a2:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 80162a4:	68bb      	ldr	r3, [r7, #8]
 80162a6:	2b00      	cmp	r3, #0
 80162a8:	d101      	bne.n	80162ae <clmt_clust+0x3a>
 80162aa:	2300      	movs	r3, #0
 80162ac:	e010      	b.n	80162d0 <clmt_clust+0x5c>
		if (cl < ncl) break;	/* In this fragment? */
 80162ae:	697a      	ldr	r2, [r7, #20]
 80162b0:	68bb      	ldr	r3, [r7, #8]
 80162b2:	429a      	cmp	r2, r3
 80162b4:	d307      	bcc.n	80162c6 <clmt_clust+0x52>
		cl -= ncl; tbl++;		/* Next fragment */
 80162b6:	697a      	ldr	r2, [r7, #20]
 80162b8:	68bb      	ldr	r3, [r7, #8]
 80162ba:	1ad3      	subs	r3, r2, r3
 80162bc:	617b      	str	r3, [r7, #20]
 80162be:	693b      	ldr	r3, [r7, #16]
 80162c0:	3304      	adds	r3, #4
 80162c2:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 80162c4:	e7e9      	b.n	801629a <clmt_clust+0x26>
		if (cl < ncl) break;	/* In this fragment? */
 80162c6:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 80162c8:	693b      	ldr	r3, [r7, #16]
 80162ca:	681a      	ldr	r2, [r3, #0]
 80162cc:	697b      	ldr	r3, [r7, #20]
 80162ce:	4413      	add	r3, r2
}
 80162d0:	4618      	mov	r0, r3
 80162d2:	371c      	adds	r7, #28
 80162d4:	46bd      	mov	sp, r7
 80162d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80162da:	4770      	bx	lr

080162dc <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 80162dc:	b580      	push	{r7, lr}
 80162de:	b086      	sub	sp, #24
 80162e0:	af00      	add	r7, sp, #0
 80162e2:	6078      	str	r0, [r7, #4]
 80162e4:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 80162e6:	687b      	ldr	r3, [r7, #4]
 80162e8:	681b      	ldr	r3, [r3, #0]
 80162ea:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 80162ec:	683b      	ldr	r3, [r7, #0]
 80162ee:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80162f2:	d204      	bcs.n	80162fe <dir_sdi+0x22>
 80162f4:	683b      	ldr	r3, [r7, #0]
 80162f6:	f003 031f 	and.w	r3, r3, #31
 80162fa:	2b00      	cmp	r3, #0
 80162fc:	d001      	beq.n	8016302 <dir_sdi+0x26>
		return FR_INT_ERR;
 80162fe:	2302      	movs	r3, #2
 8016300:	e063      	b.n	80163ca <dir_sdi+0xee>
	}
	dp->dptr = ofs;				/* Set current offset */
 8016302:	687b      	ldr	r3, [r7, #4]
 8016304:	683a      	ldr	r2, [r7, #0]
 8016306:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 8016308:	687b      	ldr	r3, [r7, #4]
 801630a:	689b      	ldr	r3, [r3, #8]
 801630c:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 801630e:	697b      	ldr	r3, [r7, #20]
 8016310:	2b00      	cmp	r3, #0
 8016312:	d106      	bne.n	8016322 <dir_sdi+0x46>
 8016314:	693b      	ldr	r3, [r7, #16]
 8016316:	781b      	ldrb	r3, [r3, #0]
 8016318:	2b02      	cmp	r3, #2
 801631a:	d902      	bls.n	8016322 <dir_sdi+0x46>
		clst = fs->dirbase;
 801631c:	693b      	ldr	r3, [r7, #16]
 801631e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8016320:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 8016322:	697b      	ldr	r3, [r7, #20]
 8016324:	2b00      	cmp	r3, #0
 8016326:	d10c      	bne.n	8016342 <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 8016328:	683b      	ldr	r3, [r7, #0]
 801632a:	095b      	lsrs	r3, r3, #5
 801632c:	693a      	ldr	r2, [r7, #16]
 801632e:	8912      	ldrh	r2, [r2, #8]
 8016330:	4293      	cmp	r3, r2
 8016332:	d301      	bcc.n	8016338 <dir_sdi+0x5c>
 8016334:	2302      	movs	r3, #2
 8016336:	e048      	b.n	80163ca <dir_sdi+0xee>
		dp->sect = fs->dirbase;
 8016338:	693b      	ldr	r3, [r7, #16]
 801633a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 801633c:	687b      	ldr	r3, [r7, #4]
 801633e:	61da      	str	r2, [r3, #28]
 8016340:	e029      	b.n	8016396 <dir_sdi+0xba>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 8016342:	693b      	ldr	r3, [r7, #16]
 8016344:	895b      	ldrh	r3, [r3, #10]
 8016346:	025b      	lsls	r3, r3, #9
 8016348:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 801634a:	e019      	b.n	8016380 <dir_sdi+0xa4>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 801634c:	687b      	ldr	r3, [r7, #4]
 801634e:	6979      	ldr	r1, [r7, #20]
 8016350:	4618      	mov	r0, r3
 8016352:	f7ff fd06 	bl	8015d62 <get_fat>
 8016356:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8016358:	697b      	ldr	r3, [r7, #20]
 801635a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801635e:	d101      	bne.n	8016364 <dir_sdi+0x88>
 8016360:	2301      	movs	r3, #1
 8016362:	e032      	b.n	80163ca <dir_sdi+0xee>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 8016364:	697b      	ldr	r3, [r7, #20]
 8016366:	2b01      	cmp	r3, #1
 8016368:	d904      	bls.n	8016374 <dir_sdi+0x98>
 801636a:	693b      	ldr	r3, [r7, #16]
 801636c:	695b      	ldr	r3, [r3, #20]
 801636e:	697a      	ldr	r2, [r7, #20]
 8016370:	429a      	cmp	r2, r3
 8016372:	d301      	bcc.n	8016378 <dir_sdi+0x9c>
 8016374:	2302      	movs	r3, #2
 8016376:	e028      	b.n	80163ca <dir_sdi+0xee>
			ofs -= csz;
 8016378:	683a      	ldr	r2, [r7, #0]
 801637a:	68fb      	ldr	r3, [r7, #12]
 801637c:	1ad3      	subs	r3, r2, r3
 801637e:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 8016380:	683a      	ldr	r2, [r7, #0]
 8016382:	68fb      	ldr	r3, [r7, #12]
 8016384:	429a      	cmp	r2, r3
 8016386:	d2e1      	bcs.n	801634c <dir_sdi+0x70>
		}
		dp->sect = clust2sect(fs, clst);
 8016388:	6979      	ldr	r1, [r7, #20]
 801638a:	6938      	ldr	r0, [r7, #16]
 801638c:	f7ff fcca 	bl	8015d24 <clust2sect>
 8016390:	4602      	mov	r2, r0
 8016392:	687b      	ldr	r3, [r7, #4]
 8016394:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 8016396:	687b      	ldr	r3, [r7, #4]
 8016398:	697a      	ldr	r2, [r7, #20]
 801639a:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 801639c:	687b      	ldr	r3, [r7, #4]
 801639e:	69db      	ldr	r3, [r3, #28]
 80163a0:	2b00      	cmp	r3, #0
 80163a2:	d101      	bne.n	80163a8 <dir_sdi+0xcc>
 80163a4:	2302      	movs	r3, #2
 80163a6:	e010      	b.n	80163ca <dir_sdi+0xee>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 80163a8:	687b      	ldr	r3, [r7, #4]
 80163aa:	69da      	ldr	r2, [r3, #28]
 80163ac:	683b      	ldr	r3, [r7, #0]
 80163ae:	0a5b      	lsrs	r3, r3, #9
 80163b0:	441a      	add	r2, r3
 80163b2:	687b      	ldr	r3, [r7, #4]
 80163b4:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 80163b6:	693b      	ldr	r3, [r7, #16]
 80163b8:	f103 0230 	add.w	r2, r3, #48	; 0x30
 80163bc:	683b      	ldr	r3, [r7, #0]
 80163be:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80163c2:	441a      	add	r2, r3
 80163c4:	687b      	ldr	r3, [r7, #4]
 80163c6:	621a      	str	r2, [r3, #32]

	return FR_OK;
 80163c8:	2300      	movs	r3, #0
}
 80163ca:	4618      	mov	r0, r3
 80163cc:	3718      	adds	r7, #24
 80163ce:	46bd      	mov	sp, r7
 80163d0:	bd80      	pop	{r7, pc}

080163d2 <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 80163d2:	b580      	push	{r7, lr}
 80163d4:	b086      	sub	sp, #24
 80163d6:	af00      	add	r7, sp, #0
 80163d8:	6078      	str	r0, [r7, #4]
 80163da:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 80163dc:	687b      	ldr	r3, [r7, #4]
 80163de:	681b      	ldr	r3, [r3, #0]
 80163e0:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 80163e2:	687b      	ldr	r3, [r7, #4]
 80163e4:	695b      	ldr	r3, [r3, #20]
 80163e6:	3320      	adds	r3, #32
 80163e8:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 80163ea:	687b      	ldr	r3, [r7, #4]
 80163ec:	69db      	ldr	r3, [r3, #28]
 80163ee:	2b00      	cmp	r3, #0
 80163f0:	d003      	beq.n	80163fa <dir_next+0x28>
 80163f2:	68bb      	ldr	r3, [r7, #8]
 80163f4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80163f8:	d301      	bcc.n	80163fe <dir_next+0x2c>
 80163fa:	2304      	movs	r3, #4
 80163fc:	e0aa      	b.n	8016554 <dir_next+0x182>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 80163fe:	68bb      	ldr	r3, [r7, #8]
 8016400:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8016404:	2b00      	cmp	r3, #0
 8016406:	f040 8098 	bne.w	801653a <dir_next+0x168>
		dp->sect++;				/* Next sector */
 801640a:	687b      	ldr	r3, [r7, #4]
 801640c:	69db      	ldr	r3, [r3, #28]
 801640e:	1c5a      	adds	r2, r3, #1
 8016410:	687b      	ldr	r3, [r7, #4]
 8016412:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 8016414:	687b      	ldr	r3, [r7, #4]
 8016416:	699b      	ldr	r3, [r3, #24]
 8016418:	2b00      	cmp	r3, #0
 801641a:	d10b      	bne.n	8016434 <dir_next+0x62>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 801641c:	68bb      	ldr	r3, [r7, #8]
 801641e:	095b      	lsrs	r3, r3, #5
 8016420:	68fa      	ldr	r2, [r7, #12]
 8016422:	8912      	ldrh	r2, [r2, #8]
 8016424:	4293      	cmp	r3, r2
 8016426:	f0c0 8088 	bcc.w	801653a <dir_next+0x168>
				dp->sect = 0; return FR_NO_FILE;
 801642a:	687b      	ldr	r3, [r7, #4]
 801642c:	2200      	movs	r2, #0
 801642e:	61da      	str	r2, [r3, #28]
 8016430:	2304      	movs	r3, #4
 8016432:	e08f      	b.n	8016554 <dir_next+0x182>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 8016434:	68bb      	ldr	r3, [r7, #8]
 8016436:	0a5b      	lsrs	r3, r3, #9
 8016438:	68fa      	ldr	r2, [r7, #12]
 801643a:	8952      	ldrh	r2, [r2, #10]
 801643c:	3a01      	subs	r2, #1
 801643e:	4013      	ands	r3, r2
 8016440:	2b00      	cmp	r3, #0
 8016442:	d17a      	bne.n	801653a <dir_next+0x168>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 8016444:	687a      	ldr	r2, [r7, #4]
 8016446:	687b      	ldr	r3, [r7, #4]
 8016448:	699b      	ldr	r3, [r3, #24]
 801644a:	4619      	mov	r1, r3
 801644c:	4610      	mov	r0, r2
 801644e:	f7ff fc88 	bl	8015d62 <get_fat>
 8016452:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 8016454:	697b      	ldr	r3, [r7, #20]
 8016456:	2b01      	cmp	r3, #1
 8016458:	d801      	bhi.n	801645e <dir_next+0x8c>
 801645a:	2302      	movs	r3, #2
 801645c:	e07a      	b.n	8016554 <dir_next+0x182>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 801645e:	697b      	ldr	r3, [r7, #20]
 8016460:	f1b3 3fff 	cmp.w	r3, #4294967295
 8016464:	d101      	bne.n	801646a <dir_next+0x98>
 8016466:	2301      	movs	r3, #1
 8016468:	e074      	b.n	8016554 <dir_next+0x182>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 801646a:	68fb      	ldr	r3, [r7, #12]
 801646c:	695b      	ldr	r3, [r3, #20]
 801646e:	697a      	ldr	r2, [r7, #20]
 8016470:	429a      	cmp	r2, r3
 8016472:	d358      	bcc.n	8016526 <dir_next+0x154>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 8016474:	683b      	ldr	r3, [r7, #0]
 8016476:	2b00      	cmp	r3, #0
 8016478:	d104      	bne.n	8016484 <dir_next+0xb2>
						dp->sect = 0; return FR_NO_FILE;
 801647a:	687b      	ldr	r3, [r7, #4]
 801647c:	2200      	movs	r2, #0
 801647e:	61da      	str	r2, [r3, #28]
 8016480:	2304      	movs	r3, #4
 8016482:	e067      	b.n	8016554 <dir_next+0x182>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 8016484:	687a      	ldr	r2, [r7, #4]
 8016486:	687b      	ldr	r3, [r7, #4]
 8016488:	699b      	ldr	r3, [r3, #24]
 801648a:	4619      	mov	r1, r3
 801648c:	4610      	mov	r0, r2
 801648e:	f7ff fe59 	bl	8016144 <create_chain>
 8016492:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 8016494:	697b      	ldr	r3, [r7, #20]
 8016496:	2b00      	cmp	r3, #0
 8016498:	d101      	bne.n	801649e <dir_next+0xcc>
 801649a:	2307      	movs	r3, #7
 801649c:	e05a      	b.n	8016554 <dir_next+0x182>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 801649e:	697b      	ldr	r3, [r7, #20]
 80164a0:	2b01      	cmp	r3, #1
 80164a2:	d101      	bne.n	80164a8 <dir_next+0xd6>
 80164a4:	2302      	movs	r3, #2
 80164a6:	e055      	b.n	8016554 <dir_next+0x182>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 80164a8:	697b      	ldr	r3, [r7, #20]
 80164aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80164ae:	d101      	bne.n	80164b4 <dir_next+0xe2>
 80164b0:	2301      	movs	r3, #1
 80164b2:	e04f      	b.n	8016554 <dir_next+0x182>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 80164b4:	68f8      	ldr	r0, [r7, #12]
 80164b6:	f7ff fb55 	bl	8015b64 <sync_window>
 80164ba:	4603      	mov	r3, r0
 80164bc:	2b00      	cmp	r3, #0
 80164be:	d001      	beq.n	80164c4 <dir_next+0xf2>
 80164c0:	2301      	movs	r3, #1
 80164c2:	e047      	b.n	8016554 <dir_next+0x182>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 80164c4:	68fb      	ldr	r3, [r7, #12]
 80164c6:	3330      	adds	r3, #48	; 0x30
 80164c8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80164cc:	2100      	movs	r1, #0
 80164ce:	4618      	mov	r0, r3
 80164d0:	f7ff f97f 	bl	80157d2 <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 80164d4:	2300      	movs	r3, #0
 80164d6:	613b      	str	r3, [r7, #16]
 80164d8:	6979      	ldr	r1, [r7, #20]
 80164da:	68f8      	ldr	r0, [r7, #12]
 80164dc:	f7ff fc22 	bl	8015d24 <clust2sect>
 80164e0:	4602      	mov	r2, r0
 80164e2:	68fb      	ldr	r3, [r7, #12]
 80164e4:	62da      	str	r2, [r3, #44]	; 0x2c
 80164e6:	e012      	b.n	801650e <dir_next+0x13c>
						fs->wflag = 1;
 80164e8:	68fb      	ldr	r3, [r7, #12]
 80164ea:	2201      	movs	r2, #1
 80164ec:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 80164ee:	68f8      	ldr	r0, [r7, #12]
 80164f0:	f7ff fb38 	bl	8015b64 <sync_window>
 80164f4:	4603      	mov	r3, r0
 80164f6:	2b00      	cmp	r3, #0
 80164f8:	d001      	beq.n	80164fe <dir_next+0x12c>
 80164fa:	2301      	movs	r3, #1
 80164fc:	e02a      	b.n	8016554 <dir_next+0x182>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 80164fe:	693b      	ldr	r3, [r7, #16]
 8016500:	3301      	adds	r3, #1
 8016502:	613b      	str	r3, [r7, #16]
 8016504:	68fb      	ldr	r3, [r7, #12]
 8016506:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8016508:	1c5a      	adds	r2, r3, #1
 801650a:	68fb      	ldr	r3, [r7, #12]
 801650c:	62da      	str	r2, [r3, #44]	; 0x2c
 801650e:	68fb      	ldr	r3, [r7, #12]
 8016510:	895b      	ldrh	r3, [r3, #10]
 8016512:	461a      	mov	r2, r3
 8016514:	693b      	ldr	r3, [r7, #16]
 8016516:	4293      	cmp	r3, r2
 8016518:	d3e6      	bcc.n	80164e8 <dir_next+0x116>
					}
					fs->winsect -= n;							/* Restore window offset */
 801651a:	68fb      	ldr	r3, [r7, #12]
 801651c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801651e:	693b      	ldr	r3, [r7, #16]
 8016520:	1ad2      	subs	r2, r2, r3
 8016522:	68fb      	ldr	r3, [r7, #12]
 8016524:	62da      	str	r2, [r3, #44]	; 0x2c
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 8016526:	687b      	ldr	r3, [r7, #4]
 8016528:	697a      	ldr	r2, [r7, #20]
 801652a:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 801652c:	6979      	ldr	r1, [r7, #20]
 801652e:	68f8      	ldr	r0, [r7, #12]
 8016530:	f7ff fbf8 	bl	8015d24 <clust2sect>
 8016534:	4602      	mov	r2, r0
 8016536:	687b      	ldr	r3, [r7, #4]
 8016538:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 801653a:	687b      	ldr	r3, [r7, #4]
 801653c:	68ba      	ldr	r2, [r7, #8]
 801653e:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 8016540:	68fb      	ldr	r3, [r7, #12]
 8016542:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8016546:	68bb      	ldr	r3, [r7, #8]
 8016548:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801654c:	441a      	add	r2, r3
 801654e:	687b      	ldr	r3, [r7, #4]
 8016550:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8016552:	2300      	movs	r3, #0
}
 8016554:	4618      	mov	r0, r3
 8016556:	3718      	adds	r7, #24
 8016558:	46bd      	mov	sp, r7
 801655a:	bd80      	pop	{r7, pc}

0801655c <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 801655c:	b580      	push	{r7, lr}
 801655e:	b086      	sub	sp, #24
 8016560:	af00      	add	r7, sp, #0
 8016562:	6078      	str	r0, [r7, #4]
 8016564:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 8016566:	687b      	ldr	r3, [r7, #4]
 8016568:	681b      	ldr	r3, [r3, #0]
 801656a:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 801656c:	2100      	movs	r1, #0
 801656e:	6878      	ldr	r0, [r7, #4]
 8016570:	f7ff feb4 	bl	80162dc <dir_sdi>
 8016574:	4603      	mov	r3, r0
 8016576:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8016578:	7dfb      	ldrb	r3, [r7, #23]
 801657a:	2b00      	cmp	r3, #0
 801657c:	d12b      	bne.n	80165d6 <dir_alloc+0x7a>
		n = 0;
 801657e:	2300      	movs	r3, #0
 8016580:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 8016582:	687b      	ldr	r3, [r7, #4]
 8016584:	69db      	ldr	r3, [r3, #28]
 8016586:	4619      	mov	r1, r3
 8016588:	68f8      	ldr	r0, [r7, #12]
 801658a:	f7ff fb2f 	bl	8015bec <move_window>
 801658e:	4603      	mov	r3, r0
 8016590:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8016592:	7dfb      	ldrb	r3, [r7, #23]
 8016594:	2b00      	cmp	r3, #0
 8016596:	d11d      	bne.n	80165d4 <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 8016598:	687b      	ldr	r3, [r7, #4]
 801659a:	6a1b      	ldr	r3, [r3, #32]
 801659c:	781b      	ldrb	r3, [r3, #0]
 801659e:	2be5      	cmp	r3, #229	; 0xe5
 80165a0:	d004      	beq.n	80165ac <dir_alloc+0x50>
 80165a2:	687b      	ldr	r3, [r7, #4]
 80165a4:	6a1b      	ldr	r3, [r3, #32]
 80165a6:	781b      	ldrb	r3, [r3, #0]
 80165a8:	2b00      	cmp	r3, #0
 80165aa:	d107      	bne.n	80165bc <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 80165ac:	693b      	ldr	r3, [r7, #16]
 80165ae:	3301      	adds	r3, #1
 80165b0:	613b      	str	r3, [r7, #16]
 80165b2:	693a      	ldr	r2, [r7, #16]
 80165b4:	683b      	ldr	r3, [r7, #0]
 80165b6:	429a      	cmp	r2, r3
 80165b8:	d102      	bne.n	80165c0 <dir_alloc+0x64>
 80165ba:	e00c      	b.n	80165d6 <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 80165bc:	2300      	movs	r3, #0
 80165be:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 80165c0:	2101      	movs	r1, #1
 80165c2:	6878      	ldr	r0, [r7, #4]
 80165c4:	f7ff ff05 	bl	80163d2 <dir_next>
 80165c8:	4603      	mov	r3, r0
 80165ca:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 80165cc:	7dfb      	ldrb	r3, [r7, #23]
 80165ce:	2b00      	cmp	r3, #0
 80165d0:	d0d7      	beq.n	8016582 <dir_alloc+0x26>
 80165d2:	e000      	b.n	80165d6 <dir_alloc+0x7a>
			if (res != FR_OK) break;
 80165d4:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 80165d6:	7dfb      	ldrb	r3, [r7, #23]
 80165d8:	2b04      	cmp	r3, #4
 80165da:	d101      	bne.n	80165e0 <dir_alloc+0x84>
 80165dc:	2307      	movs	r3, #7
 80165de:	75fb      	strb	r3, [r7, #23]
	return res;
 80165e0:	7dfb      	ldrb	r3, [r7, #23]
}
 80165e2:	4618      	mov	r0, r3
 80165e4:	3718      	adds	r7, #24
 80165e6:	46bd      	mov	sp, r7
 80165e8:	bd80      	pop	{r7, pc}

080165ea <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 80165ea:	b580      	push	{r7, lr}
 80165ec:	b084      	sub	sp, #16
 80165ee:	af00      	add	r7, sp, #0
 80165f0:	6078      	str	r0, [r7, #4]
 80165f2:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 80165f4:	683b      	ldr	r3, [r7, #0]
 80165f6:	331a      	adds	r3, #26
 80165f8:	4618      	mov	r0, r3
 80165fa:	f7ff f847 	bl	801568c <ld_word>
 80165fe:	4603      	mov	r3, r0
 8016600:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 8016602:	687b      	ldr	r3, [r7, #4]
 8016604:	781b      	ldrb	r3, [r3, #0]
 8016606:	2b03      	cmp	r3, #3
 8016608:	d109      	bne.n	801661e <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 801660a:	683b      	ldr	r3, [r7, #0]
 801660c:	3314      	adds	r3, #20
 801660e:	4618      	mov	r0, r3
 8016610:	f7ff f83c 	bl	801568c <ld_word>
 8016614:	4603      	mov	r3, r0
 8016616:	041b      	lsls	r3, r3, #16
 8016618:	68fa      	ldr	r2, [r7, #12]
 801661a:	4313      	orrs	r3, r2
 801661c:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 801661e:	68fb      	ldr	r3, [r7, #12]
}
 8016620:	4618      	mov	r0, r3
 8016622:	3710      	adds	r7, #16
 8016624:	46bd      	mov	sp, r7
 8016626:	bd80      	pop	{r7, pc}

08016628 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 8016628:	b580      	push	{r7, lr}
 801662a:	b084      	sub	sp, #16
 801662c:	af00      	add	r7, sp, #0
 801662e:	60f8      	str	r0, [r7, #12]
 8016630:	60b9      	str	r1, [r7, #8]
 8016632:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 8016634:	68bb      	ldr	r3, [r7, #8]
 8016636:	331a      	adds	r3, #26
 8016638:	687a      	ldr	r2, [r7, #4]
 801663a:	b292      	uxth	r2, r2
 801663c:	4611      	mov	r1, r2
 801663e:	4618      	mov	r0, r3
 8016640:	f7ff f85f 	bl	8015702 <st_word>
	if (fs->fs_type == FS_FAT32) {
 8016644:	68fb      	ldr	r3, [r7, #12]
 8016646:	781b      	ldrb	r3, [r3, #0]
 8016648:	2b03      	cmp	r3, #3
 801664a:	d109      	bne.n	8016660 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 801664c:	68bb      	ldr	r3, [r7, #8]
 801664e:	f103 0214 	add.w	r2, r3, #20
 8016652:	687b      	ldr	r3, [r7, #4]
 8016654:	0c1b      	lsrs	r3, r3, #16
 8016656:	b29b      	uxth	r3, r3
 8016658:	4619      	mov	r1, r3
 801665a:	4610      	mov	r0, r2
 801665c:	f7ff f851 	bl	8015702 <st_word>
	}
}
 8016660:	bf00      	nop
 8016662:	3710      	adds	r7, #16
 8016664:	46bd      	mov	sp, r7
 8016666:	bd80      	pop	{r7, pc}

08016668 <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 8016668:	b580      	push	{r7, lr}
 801666a:	b086      	sub	sp, #24
 801666c:	af00      	add	r7, sp, #0
 801666e:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8016670:	687b      	ldr	r3, [r7, #4]
 8016672:	681b      	ldr	r3, [r3, #0]
 8016674:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 8016676:	2100      	movs	r1, #0
 8016678:	6878      	ldr	r0, [r7, #4]
 801667a:	f7ff fe2f 	bl	80162dc <dir_sdi>
 801667e:	4603      	mov	r3, r0
 8016680:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 8016682:	7dfb      	ldrb	r3, [r7, #23]
 8016684:	2b00      	cmp	r3, #0
 8016686:	d001      	beq.n	801668c <dir_find+0x24>
 8016688:	7dfb      	ldrb	r3, [r7, #23]
 801668a:	e03e      	b.n	801670a <dir_find+0xa2>
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(fs, dp->sect);
 801668c:	687b      	ldr	r3, [r7, #4]
 801668e:	69db      	ldr	r3, [r3, #28]
 8016690:	4619      	mov	r1, r3
 8016692:	6938      	ldr	r0, [r7, #16]
 8016694:	f7ff faaa 	bl	8015bec <move_window>
 8016698:	4603      	mov	r3, r0
 801669a:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 801669c:	7dfb      	ldrb	r3, [r7, #23]
 801669e:	2b00      	cmp	r3, #0
 80166a0:	d12f      	bne.n	8016702 <dir_find+0x9a>
		c = dp->dir[DIR_Name];
 80166a2:	687b      	ldr	r3, [r7, #4]
 80166a4:	6a1b      	ldr	r3, [r3, #32]
 80166a6:	781b      	ldrb	r3, [r3, #0]
 80166a8:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 80166aa:	7bfb      	ldrb	r3, [r7, #15]
 80166ac:	2b00      	cmp	r3, #0
 80166ae:	d102      	bne.n	80166b6 <dir_find+0x4e>
 80166b0:	2304      	movs	r3, #4
 80166b2:	75fb      	strb	r3, [r7, #23]
 80166b4:	e028      	b.n	8016708 <dir_find+0xa0>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 80166b6:	687b      	ldr	r3, [r7, #4]
 80166b8:	6a1b      	ldr	r3, [r3, #32]
 80166ba:	330b      	adds	r3, #11
 80166bc:	781b      	ldrb	r3, [r3, #0]
 80166be:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80166c2:	b2da      	uxtb	r2, r3
 80166c4:	687b      	ldr	r3, [r7, #4]
 80166c6:	719a      	strb	r2, [r3, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 80166c8:	687b      	ldr	r3, [r7, #4]
 80166ca:	6a1b      	ldr	r3, [r3, #32]
 80166cc:	330b      	adds	r3, #11
 80166ce:	781b      	ldrb	r3, [r3, #0]
 80166d0:	f003 0308 	and.w	r3, r3, #8
 80166d4:	2b00      	cmp	r3, #0
 80166d6:	d10a      	bne.n	80166ee <dir_find+0x86>
 80166d8:	687b      	ldr	r3, [r7, #4]
 80166da:	6a18      	ldr	r0, [r3, #32]
 80166dc:	687b      	ldr	r3, [r7, #4]
 80166de:	3324      	adds	r3, #36	; 0x24
 80166e0:	220b      	movs	r2, #11
 80166e2:	4619      	mov	r1, r3
 80166e4:	f7ff f88f 	bl	8015806 <mem_cmp>
 80166e8:	4603      	mov	r3, r0
 80166ea:	2b00      	cmp	r3, #0
 80166ec:	d00b      	beq.n	8016706 <dir_find+0x9e>
#endif
		res = dir_next(dp, 0);	/* Next entry */
 80166ee:	2100      	movs	r1, #0
 80166f0:	6878      	ldr	r0, [r7, #4]
 80166f2:	f7ff fe6e 	bl	80163d2 <dir_next>
 80166f6:	4603      	mov	r3, r0
 80166f8:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 80166fa:	7dfb      	ldrb	r3, [r7, #23]
 80166fc:	2b00      	cmp	r3, #0
 80166fe:	d0c5      	beq.n	801668c <dir_find+0x24>
 8016700:	e002      	b.n	8016708 <dir_find+0xa0>
		if (res != FR_OK) break;
 8016702:	bf00      	nop
 8016704:	e000      	b.n	8016708 <dir_find+0xa0>
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 8016706:	bf00      	nop

	return res;
 8016708:	7dfb      	ldrb	r3, [r7, #23]
}
 801670a:	4618      	mov	r0, r3
 801670c:	3718      	adds	r7, #24
 801670e:	46bd      	mov	sp, r7
 8016710:	bd80      	pop	{r7, pc}

08016712 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 8016712:	b580      	push	{r7, lr}
 8016714:	b084      	sub	sp, #16
 8016716:	af00      	add	r7, sp, #0
 8016718:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 801671a:	687b      	ldr	r3, [r7, #4]
 801671c:	681b      	ldr	r3, [r3, #0]
 801671e:	60bb      	str	r3, [r7, #8]
			} while (res == FR_OK && --nent);
		}
	}

#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 8016720:	2101      	movs	r1, #1
 8016722:	6878      	ldr	r0, [r7, #4]
 8016724:	f7ff ff1a 	bl	801655c <dir_alloc>
 8016728:	4603      	mov	r3, r0
 801672a:	73fb      	strb	r3, [r7, #15]

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 801672c:	7bfb      	ldrb	r3, [r7, #15]
 801672e:	2b00      	cmp	r3, #0
 8016730:	d11c      	bne.n	801676c <dir_register+0x5a>
		res = move_window(fs, dp->sect);
 8016732:	687b      	ldr	r3, [r7, #4]
 8016734:	69db      	ldr	r3, [r3, #28]
 8016736:	4619      	mov	r1, r3
 8016738:	68b8      	ldr	r0, [r7, #8]
 801673a:	f7ff fa57 	bl	8015bec <move_window>
 801673e:	4603      	mov	r3, r0
 8016740:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8016742:	7bfb      	ldrb	r3, [r7, #15]
 8016744:	2b00      	cmp	r3, #0
 8016746:	d111      	bne.n	801676c <dir_register+0x5a>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 8016748:	687b      	ldr	r3, [r7, #4]
 801674a:	6a1b      	ldr	r3, [r3, #32]
 801674c:	2220      	movs	r2, #32
 801674e:	2100      	movs	r1, #0
 8016750:	4618      	mov	r0, r3
 8016752:	f7ff f83e 	bl	80157d2 <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 8016756:	687b      	ldr	r3, [r7, #4]
 8016758:	6a18      	ldr	r0, [r3, #32]
 801675a:	687b      	ldr	r3, [r7, #4]
 801675c:	3324      	adds	r3, #36	; 0x24
 801675e:	220b      	movs	r2, #11
 8016760:	4619      	mov	r1, r3
 8016762:	f7ff f815 	bl	8015790 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			fs->wflag = 1;
 8016766:	68bb      	ldr	r3, [r7, #8]
 8016768:	2201      	movs	r2, #1
 801676a:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 801676c:	7bfb      	ldrb	r3, [r7, #15]
}
 801676e:	4618      	mov	r0, r3
 8016770:	3710      	adds	r7, #16
 8016772:	46bd      	mov	sp, r7
 8016774:	bd80      	pop	{r7, pc}
	...

08016778 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 8016778:	b580      	push	{r7, lr}
 801677a:	b088      	sub	sp, #32
 801677c:	af00      	add	r7, sp, #0
 801677e:	6078      	str	r0, [r7, #4]
 8016780:	6039      	str	r1, [r7, #0]
	BYTE c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	p = *path; sfn = dp->fn;
 8016782:	683b      	ldr	r3, [r7, #0]
 8016784:	681b      	ldr	r3, [r3, #0]
 8016786:	60fb      	str	r3, [r7, #12]
 8016788:	687b      	ldr	r3, [r7, #4]
 801678a:	3324      	adds	r3, #36	; 0x24
 801678c:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 801678e:	220b      	movs	r2, #11
 8016790:	2120      	movs	r1, #32
 8016792:	68b8      	ldr	r0, [r7, #8]
 8016794:	f7ff f81d 	bl	80157d2 <mem_set>
	si = i = 0; ni = 8;
 8016798:	2300      	movs	r3, #0
 801679a:	613b      	str	r3, [r7, #16]
 801679c:	693b      	ldr	r3, [r7, #16]
 801679e:	617b      	str	r3, [r7, #20]
 80167a0:	2308      	movs	r3, #8
 80167a2:	61bb      	str	r3, [r7, #24]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of the path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 80167a4:	697b      	ldr	r3, [r7, #20]
 80167a6:	1c5a      	adds	r2, r3, #1
 80167a8:	617a      	str	r2, [r7, #20]
 80167aa:	68fa      	ldr	r2, [r7, #12]
 80167ac:	4413      	add	r3, r2
 80167ae:	781b      	ldrb	r3, [r3, #0]
 80167b0:	77fb      	strb	r3, [r7, #31]
		if (c <= ' ') break; 			/* Break if end of the path name */
 80167b2:	7ffb      	ldrb	r3, [r7, #31]
 80167b4:	2b20      	cmp	r3, #32
 80167b6:	d94e      	bls.n	8016856 <create_name+0xde>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 80167b8:	7ffb      	ldrb	r3, [r7, #31]
 80167ba:	2b2f      	cmp	r3, #47	; 0x2f
 80167bc:	d006      	beq.n	80167cc <create_name+0x54>
 80167be:	7ffb      	ldrb	r3, [r7, #31]
 80167c0:	2b5c      	cmp	r3, #92	; 0x5c
 80167c2:	d110      	bne.n	80167e6 <create_name+0x6e>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 80167c4:	e002      	b.n	80167cc <create_name+0x54>
 80167c6:	697b      	ldr	r3, [r7, #20]
 80167c8:	3301      	adds	r3, #1
 80167ca:	617b      	str	r3, [r7, #20]
 80167cc:	68fa      	ldr	r2, [r7, #12]
 80167ce:	697b      	ldr	r3, [r7, #20]
 80167d0:	4413      	add	r3, r2
 80167d2:	781b      	ldrb	r3, [r3, #0]
 80167d4:	2b2f      	cmp	r3, #47	; 0x2f
 80167d6:	d0f6      	beq.n	80167c6 <create_name+0x4e>
 80167d8:	68fa      	ldr	r2, [r7, #12]
 80167da:	697b      	ldr	r3, [r7, #20]
 80167dc:	4413      	add	r3, r2
 80167de:	781b      	ldrb	r3, [r3, #0]
 80167e0:	2b5c      	cmp	r3, #92	; 0x5c
 80167e2:	d0f0      	beq.n	80167c6 <create_name+0x4e>
			break;
 80167e4:	e038      	b.n	8016858 <create_name+0xe0>
		}
		if (c == '.' || i >= ni) {		/* End of body or over size? */
 80167e6:	7ffb      	ldrb	r3, [r7, #31]
 80167e8:	2b2e      	cmp	r3, #46	; 0x2e
 80167ea:	d003      	beq.n	80167f4 <create_name+0x7c>
 80167ec:	693a      	ldr	r2, [r7, #16]
 80167ee:	69bb      	ldr	r3, [r7, #24]
 80167f0:	429a      	cmp	r2, r3
 80167f2:	d30c      	bcc.n	801680e <create_name+0x96>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 80167f4:	69bb      	ldr	r3, [r7, #24]
 80167f6:	2b0b      	cmp	r3, #11
 80167f8:	d002      	beq.n	8016800 <create_name+0x88>
 80167fa:	7ffb      	ldrb	r3, [r7, #31]
 80167fc:	2b2e      	cmp	r3, #46	; 0x2e
 80167fe:	d001      	beq.n	8016804 <create_name+0x8c>
 8016800:	2306      	movs	r3, #6
 8016802:	e044      	b.n	801688e <create_name+0x116>
			i = 8; ni = 11;				/* Goto extension */
 8016804:	2308      	movs	r3, #8
 8016806:	613b      	str	r3, [r7, #16]
 8016808:	230b      	movs	r3, #11
 801680a:	61bb      	str	r3, [r7, #24]
			continue;
 801680c:	e022      	b.n	8016854 <create_name+0xdc>
		}
		if (c >= 0x80) {				/* Extended character? */
 801680e:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8016812:	2b00      	cmp	r3, #0
 8016814:	da04      	bge.n	8016820 <create_name+0xa8>
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 8016816:	7ffb      	ldrb	r3, [r7, #31]
 8016818:	3b80      	subs	r3, #128	; 0x80
 801681a:	4a1f      	ldr	r2, [pc, #124]	; (8016898 <create_name+0x120>)
 801681c:	5cd3      	ldrb	r3, [r2, r3]
 801681e:	77fb      	strb	r3, [r7, #31]
			d = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 8016820:	7ffb      	ldrb	r3, [r7, #31]
 8016822:	4619      	mov	r1, r3
 8016824:	481d      	ldr	r0, [pc, #116]	; (801689c <create_name+0x124>)
 8016826:	f7ff f815 	bl	8015854 <chk_chr>
 801682a:	4603      	mov	r3, r0
 801682c:	2b00      	cmp	r3, #0
 801682e:	d001      	beq.n	8016834 <create_name+0xbc>
 8016830:	2306      	movs	r3, #6
 8016832:	e02c      	b.n	801688e <create_name+0x116>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 8016834:	7ffb      	ldrb	r3, [r7, #31]
 8016836:	2b60      	cmp	r3, #96	; 0x60
 8016838:	d905      	bls.n	8016846 <create_name+0xce>
 801683a:	7ffb      	ldrb	r3, [r7, #31]
 801683c:	2b7a      	cmp	r3, #122	; 0x7a
 801683e:	d802      	bhi.n	8016846 <create_name+0xce>
 8016840:	7ffb      	ldrb	r3, [r7, #31]
 8016842:	3b20      	subs	r3, #32
 8016844:	77fb      	strb	r3, [r7, #31]
			sfn[i++] = c;
 8016846:	693b      	ldr	r3, [r7, #16]
 8016848:	1c5a      	adds	r2, r3, #1
 801684a:	613a      	str	r2, [r7, #16]
 801684c:	68ba      	ldr	r2, [r7, #8]
 801684e:	4413      	add	r3, r2
 8016850:	7ffa      	ldrb	r2, [r7, #31]
 8016852:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 8016854:	e7a6      	b.n	80167a4 <create_name+0x2c>
		if (c <= ' ') break; 			/* Break if end of the path name */
 8016856:	bf00      	nop
		}
	}
	*path = p + si;						/* Return pointer to the next segment */
 8016858:	68fa      	ldr	r2, [r7, #12]
 801685a:	697b      	ldr	r3, [r7, #20]
 801685c:	441a      	add	r2, r3
 801685e:	683b      	ldr	r3, [r7, #0]
 8016860:	601a      	str	r2, [r3, #0]
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 8016862:	693b      	ldr	r3, [r7, #16]
 8016864:	2b00      	cmp	r3, #0
 8016866:	d101      	bne.n	801686c <create_name+0xf4>
 8016868:	2306      	movs	r3, #6
 801686a:	e010      	b.n	801688e <create_name+0x116>

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 801686c:	68bb      	ldr	r3, [r7, #8]
 801686e:	781b      	ldrb	r3, [r3, #0]
 8016870:	2be5      	cmp	r3, #229	; 0xe5
 8016872:	d102      	bne.n	801687a <create_name+0x102>
 8016874:	68bb      	ldr	r3, [r7, #8]
 8016876:	2205      	movs	r2, #5
 8016878:	701a      	strb	r2, [r3, #0]
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 801687a:	7ffb      	ldrb	r3, [r7, #31]
 801687c:	2b20      	cmp	r3, #32
 801687e:	d801      	bhi.n	8016884 <create_name+0x10c>
 8016880:	2204      	movs	r2, #4
 8016882:	e000      	b.n	8016886 <create_name+0x10e>
 8016884:	2200      	movs	r2, #0
 8016886:	68bb      	ldr	r3, [r7, #8]
 8016888:	330b      	adds	r3, #11
 801688a:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 801688c:	2300      	movs	r3, #0
#endif /* _USE_LFN != 0 */
}
 801688e:	4618      	mov	r0, r3
 8016890:	3720      	adds	r7, #32
 8016892:	46bd      	mov	sp, r7
 8016894:	bd80      	pop	{r7, pc}
 8016896:	bf00      	nop
 8016898:	0801a068 	.word	0x0801a068
 801689c:	08019f8c 	.word	0x08019f8c

080168a0 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 80168a0:	b580      	push	{r7, lr}
 80168a2:	b086      	sub	sp, #24
 80168a4:	af00      	add	r7, sp, #0
 80168a6:	6078      	str	r0, [r7, #4]
 80168a8:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 80168aa:	687b      	ldr	r3, [r7, #4]
 80168ac:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 80168ae:	693b      	ldr	r3, [r7, #16]
 80168b0:	681b      	ldr	r3, [r3, #0]
 80168b2:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 80168b4:	e002      	b.n	80168bc <follow_path+0x1c>
 80168b6:	683b      	ldr	r3, [r7, #0]
 80168b8:	3301      	adds	r3, #1
 80168ba:	603b      	str	r3, [r7, #0]
 80168bc:	683b      	ldr	r3, [r7, #0]
 80168be:	781b      	ldrb	r3, [r3, #0]
 80168c0:	2b2f      	cmp	r3, #47	; 0x2f
 80168c2:	d0f8      	beq.n	80168b6 <follow_path+0x16>
 80168c4:	683b      	ldr	r3, [r7, #0]
 80168c6:	781b      	ldrb	r3, [r3, #0]
 80168c8:	2b5c      	cmp	r3, #92	; 0x5c
 80168ca:	d0f4      	beq.n	80168b6 <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 80168cc:	693b      	ldr	r3, [r7, #16]
 80168ce:	2200      	movs	r2, #0
 80168d0:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 80168d2:	683b      	ldr	r3, [r7, #0]
 80168d4:	781b      	ldrb	r3, [r3, #0]
 80168d6:	2b1f      	cmp	r3, #31
 80168d8:	d80a      	bhi.n	80168f0 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 80168da:	687b      	ldr	r3, [r7, #4]
 80168dc:	2280      	movs	r2, #128	; 0x80
 80168de:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 80168e2:	2100      	movs	r1, #0
 80168e4:	6878      	ldr	r0, [r7, #4]
 80168e6:	f7ff fcf9 	bl	80162dc <dir_sdi>
 80168ea:	4603      	mov	r3, r0
 80168ec:	75fb      	strb	r3, [r7, #23]
 80168ee:	e043      	b.n	8016978 <follow_path+0xd8>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 80168f0:	463b      	mov	r3, r7
 80168f2:	4619      	mov	r1, r3
 80168f4:	6878      	ldr	r0, [r7, #4]
 80168f6:	f7ff ff3f 	bl	8016778 <create_name>
 80168fa:	4603      	mov	r3, r0
 80168fc:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 80168fe:	7dfb      	ldrb	r3, [r7, #23]
 8016900:	2b00      	cmp	r3, #0
 8016902:	d134      	bne.n	801696e <follow_path+0xce>
			res = dir_find(dp);				/* Find an object with the segment name */
 8016904:	6878      	ldr	r0, [r7, #4]
 8016906:	f7ff feaf 	bl	8016668 <dir_find>
 801690a:	4603      	mov	r3, r0
 801690c:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 801690e:	687b      	ldr	r3, [r7, #4]
 8016910:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8016914:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 8016916:	7dfb      	ldrb	r3, [r7, #23]
 8016918:	2b00      	cmp	r3, #0
 801691a:	d00a      	beq.n	8016932 <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 801691c:	7dfb      	ldrb	r3, [r7, #23]
 801691e:	2b04      	cmp	r3, #4
 8016920:	d127      	bne.n	8016972 <follow_path+0xd2>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 8016922:	7afb      	ldrb	r3, [r7, #11]
 8016924:	f003 0304 	and.w	r3, r3, #4
 8016928:	2b00      	cmp	r3, #0
 801692a:	d122      	bne.n	8016972 <follow_path+0xd2>
 801692c:	2305      	movs	r3, #5
 801692e:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 8016930:	e01f      	b.n	8016972 <follow_path+0xd2>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8016932:	7afb      	ldrb	r3, [r7, #11]
 8016934:	f003 0304 	and.w	r3, r3, #4
 8016938:	2b00      	cmp	r3, #0
 801693a:	d11c      	bne.n	8016976 <follow_path+0xd6>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 801693c:	693b      	ldr	r3, [r7, #16]
 801693e:	799b      	ldrb	r3, [r3, #6]
 8016940:	f003 0310 	and.w	r3, r3, #16
 8016944:	2b00      	cmp	r3, #0
 8016946:	d102      	bne.n	801694e <follow_path+0xae>
				res = FR_NO_PATH; break;
 8016948:	2305      	movs	r3, #5
 801694a:	75fb      	strb	r3, [r7, #23]
 801694c:	e014      	b.n	8016978 <follow_path+0xd8>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 801694e:	68fb      	ldr	r3, [r7, #12]
 8016950:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8016954:	687b      	ldr	r3, [r7, #4]
 8016956:	695b      	ldr	r3, [r3, #20]
 8016958:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801695c:	4413      	add	r3, r2
 801695e:	4619      	mov	r1, r3
 8016960:	68f8      	ldr	r0, [r7, #12]
 8016962:	f7ff fe42 	bl	80165ea <ld_clust>
 8016966:	4602      	mov	r2, r0
 8016968:	693b      	ldr	r3, [r7, #16]
 801696a:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 801696c:	e7c0      	b.n	80168f0 <follow_path+0x50>
			if (res != FR_OK) break;
 801696e:	bf00      	nop
 8016970:	e002      	b.n	8016978 <follow_path+0xd8>
				break;
 8016972:	bf00      	nop
 8016974:	e000      	b.n	8016978 <follow_path+0xd8>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8016976:	bf00      	nop
			}
		}
	}

	return res;
 8016978:	7dfb      	ldrb	r3, [r7, #23]
}
 801697a:	4618      	mov	r0, r3
 801697c:	3718      	adds	r7, #24
 801697e:	46bd      	mov	sp, r7
 8016980:	bd80      	pop	{r7, pc}

08016982 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 8016982:	b480      	push	{r7}
 8016984:	b087      	sub	sp, #28
 8016986:	af00      	add	r7, sp, #0
 8016988:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 801698a:	f04f 33ff 	mov.w	r3, #4294967295
 801698e:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 8016990:	687b      	ldr	r3, [r7, #4]
 8016992:	681b      	ldr	r3, [r3, #0]
 8016994:	2b00      	cmp	r3, #0
 8016996:	d031      	beq.n	80169fc <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 8016998:	687b      	ldr	r3, [r7, #4]
 801699a:	681b      	ldr	r3, [r3, #0]
 801699c:	617b      	str	r3, [r7, #20]
 801699e:	e002      	b.n	80169a6 <get_ldnumber+0x24>
 80169a0:	697b      	ldr	r3, [r7, #20]
 80169a2:	3301      	adds	r3, #1
 80169a4:	617b      	str	r3, [r7, #20]
 80169a6:	697b      	ldr	r3, [r7, #20]
 80169a8:	781b      	ldrb	r3, [r3, #0]
 80169aa:	2b20      	cmp	r3, #32
 80169ac:	d903      	bls.n	80169b6 <get_ldnumber+0x34>
 80169ae:	697b      	ldr	r3, [r7, #20]
 80169b0:	781b      	ldrb	r3, [r3, #0]
 80169b2:	2b3a      	cmp	r3, #58	; 0x3a
 80169b4:	d1f4      	bne.n	80169a0 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 80169b6:	697b      	ldr	r3, [r7, #20]
 80169b8:	781b      	ldrb	r3, [r3, #0]
 80169ba:	2b3a      	cmp	r3, #58	; 0x3a
 80169bc:	d11c      	bne.n	80169f8 <get_ldnumber+0x76>
			tp = *path;
 80169be:	687b      	ldr	r3, [r7, #4]
 80169c0:	681b      	ldr	r3, [r3, #0]
 80169c2:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 80169c4:	68fb      	ldr	r3, [r7, #12]
 80169c6:	1c5a      	adds	r2, r3, #1
 80169c8:	60fa      	str	r2, [r7, #12]
 80169ca:	781b      	ldrb	r3, [r3, #0]
 80169cc:	3b30      	subs	r3, #48	; 0x30
 80169ce:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 80169d0:	68bb      	ldr	r3, [r7, #8]
 80169d2:	2b09      	cmp	r3, #9
 80169d4:	d80e      	bhi.n	80169f4 <get_ldnumber+0x72>
 80169d6:	68fa      	ldr	r2, [r7, #12]
 80169d8:	697b      	ldr	r3, [r7, #20]
 80169da:	429a      	cmp	r2, r3
 80169dc:	d10a      	bne.n	80169f4 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 80169de:	68bb      	ldr	r3, [r7, #8]
 80169e0:	2b00      	cmp	r3, #0
 80169e2:	d107      	bne.n	80169f4 <get_ldnumber+0x72>
					vol = (int)i;
 80169e4:	68bb      	ldr	r3, [r7, #8]
 80169e6:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 80169e8:	697b      	ldr	r3, [r7, #20]
 80169ea:	3301      	adds	r3, #1
 80169ec:	617b      	str	r3, [r7, #20]
 80169ee:	687b      	ldr	r3, [r7, #4]
 80169f0:	697a      	ldr	r2, [r7, #20]
 80169f2:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 80169f4:	693b      	ldr	r3, [r7, #16]
 80169f6:	e002      	b.n	80169fe <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 80169f8:	2300      	movs	r3, #0
 80169fa:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 80169fc:	693b      	ldr	r3, [r7, #16]
}
 80169fe:	4618      	mov	r0, r3
 8016a00:	371c      	adds	r7, #28
 8016a02:	46bd      	mov	sp, r7
 8016a04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016a08:	4770      	bx	lr
	...

08016a0c <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 8016a0c:	b580      	push	{r7, lr}
 8016a0e:	b082      	sub	sp, #8
 8016a10:	af00      	add	r7, sp, #0
 8016a12:	6078      	str	r0, [r7, #4]
 8016a14:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 8016a16:	687b      	ldr	r3, [r7, #4]
 8016a18:	2200      	movs	r2, #0
 8016a1a:	70da      	strb	r2, [r3, #3]
 8016a1c:	687b      	ldr	r3, [r7, #4]
 8016a1e:	f04f 32ff 	mov.w	r2, #4294967295
 8016a22:	62da      	str	r2, [r3, #44]	; 0x2c
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 8016a24:	6839      	ldr	r1, [r7, #0]
 8016a26:	6878      	ldr	r0, [r7, #4]
 8016a28:	f7ff f8e0 	bl	8015bec <move_window>
 8016a2c:	4603      	mov	r3, r0
 8016a2e:	2b00      	cmp	r3, #0
 8016a30:	d001      	beq.n	8016a36 <check_fs+0x2a>
 8016a32:	2304      	movs	r3, #4
 8016a34:	e038      	b.n	8016aa8 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 8016a36:	687b      	ldr	r3, [r7, #4]
 8016a38:	3330      	adds	r3, #48	; 0x30
 8016a3a:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8016a3e:	4618      	mov	r0, r3
 8016a40:	f7fe fe24 	bl	801568c <ld_word>
 8016a44:	4603      	mov	r3, r0
 8016a46:	461a      	mov	r2, r3
 8016a48:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8016a4c:	429a      	cmp	r2, r3
 8016a4e:	d001      	beq.n	8016a54 <check_fs+0x48>
 8016a50:	2303      	movs	r3, #3
 8016a52:	e029      	b.n	8016aa8 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 8016a54:	687b      	ldr	r3, [r7, #4]
 8016a56:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8016a5a:	2be9      	cmp	r3, #233	; 0xe9
 8016a5c:	d009      	beq.n	8016a72 <check_fs+0x66>
 8016a5e:	687b      	ldr	r3, [r7, #4]
 8016a60:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8016a64:	2beb      	cmp	r3, #235	; 0xeb
 8016a66:	d11e      	bne.n	8016aa6 <check_fs+0x9a>
 8016a68:	687b      	ldr	r3, [r7, #4]
 8016a6a:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8016a6e:	2b90      	cmp	r3, #144	; 0x90
 8016a70:	d119      	bne.n	8016aa6 <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 8016a72:	687b      	ldr	r3, [r7, #4]
 8016a74:	3330      	adds	r3, #48	; 0x30
 8016a76:	3336      	adds	r3, #54	; 0x36
 8016a78:	4618      	mov	r0, r3
 8016a7a:	f7fe fe1f 	bl	80156bc <ld_dword>
 8016a7e:	4603      	mov	r3, r0
 8016a80:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8016a84:	4a0a      	ldr	r2, [pc, #40]	; (8016ab0 <check_fs+0xa4>)
 8016a86:	4293      	cmp	r3, r2
 8016a88:	d101      	bne.n	8016a8e <check_fs+0x82>
 8016a8a:	2300      	movs	r3, #0
 8016a8c:	e00c      	b.n	8016aa8 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 8016a8e:	687b      	ldr	r3, [r7, #4]
 8016a90:	3330      	adds	r3, #48	; 0x30
 8016a92:	3352      	adds	r3, #82	; 0x52
 8016a94:	4618      	mov	r0, r3
 8016a96:	f7fe fe11 	bl	80156bc <ld_dword>
 8016a9a:	4602      	mov	r2, r0
 8016a9c:	4b05      	ldr	r3, [pc, #20]	; (8016ab4 <check_fs+0xa8>)
 8016a9e:	429a      	cmp	r2, r3
 8016aa0:	d101      	bne.n	8016aa6 <check_fs+0x9a>
 8016aa2:	2300      	movs	r3, #0
 8016aa4:	e000      	b.n	8016aa8 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 8016aa6:	2302      	movs	r3, #2
}
 8016aa8:	4618      	mov	r0, r3
 8016aaa:	3708      	adds	r7, #8
 8016aac:	46bd      	mov	sp, r7
 8016aae:	bd80      	pop	{r7, pc}
 8016ab0:	00544146 	.word	0x00544146
 8016ab4:	33544146 	.word	0x33544146

08016ab8 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 8016ab8:	b580      	push	{r7, lr}
 8016aba:	b096      	sub	sp, #88	; 0x58
 8016abc:	af00      	add	r7, sp, #0
 8016abe:	60f8      	str	r0, [r7, #12]
 8016ac0:	60b9      	str	r1, [r7, #8]
 8016ac2:	4613      	mov	r3, r2
 8016ac4:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 8016ac6:	68bb      	ldr	r3, [r7, #8]
 8016ac8:	2200      	movs	r2, #0
 8016aca:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 8016acc:	68f8      	ldr	r0, [r7, #12]
 8016ace:	f7ff ff58 	bl	8016982 <get_ldnumber>
 8016ad2:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 8016ad4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8016ad6:	2b00      	cmp	r3, #0
 8016ad8:	da01      	bge.n	8016ade <find_volume+0x26>
 8016ada:	230b      	movs	r3, #11
 8016adc:	e22e      	b.n	8016f3c <find_volume+0x484>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 8016ade:	4aa8      	ldr	r2, [pc, #672]	; (8016d80 <find_volume+0x2c8>)
 8016ae0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8016ae2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8016ae6:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 8016ae8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016aea:	2b00      	cmp	r3, #0
 8016aec:	d101      	bne.n	8016af2 <find_volume+0x3a>
 8016aee:	230c      	movs	r3, #12
 8016af0:	e224      	b.n	8016f3c <find_volume+0x484>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 8016af2:	68bb      	ldr	r3, [r7, #8]
 8016af4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8016af6:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 8016af8:	79fb      	ldrb	r3, [r7, #7]
 8016afa:	f023 0301 	bic.w	r3, r3, #1
 8016afe:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 8016b00:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016b02:	781b      	ldrb	r3, [r3, #0]
 8016b04:	2b00      	cmp	r3, #0
 8016b06:	d01a      	beq.n	8016b3e <find_volume+0x86>
		stat = disk_status(fs->drv);
 8016b08:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016b0a:	785b      	ldrb	r3, [r3, #1]
 8016b0c:	4618      	mov	r0, r3
 8016b0e:	f7fe fd1f 	bl	8015550 <disk_status>
 8016b12:	4603      	mov	r3, r0
 8016b14:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 8016b18:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8016b1c:	f003 0301 	and.w	r3, r3, #1
 8016b20:	2b00      	cmp	r3, #0
 8016b22:	d10c      	bne.n	8016b3e <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 8016b24:	79fb      	ldrb	r3, [r7, #7]
 8016b26:	2b00      	cmp	r3, #0
 8016b28:	d007      	beq.n	8016b3a <find_volume+0x82>
 8016b2a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8016b2e:	f003 0304 	and.w	r3, r3, #4
 8016b32:	2b00      	cmp	r3, #0
 8016b34:	d001      	beq.n	8016b3a <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 8016b36:	230a      	movs	r3, #10
 8016b38:	e200      	b.n	8016f3c <find_volume+0x484>
			}
			return FR_OK;				/* The file system object is valid */
 8016b3a:	2300      	movs	r3, #0
 8016b3c:	e1fe      	b.n	8016f3c <find_volume+0x484>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 8016b3e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016b40:	2200      	movs	r2, #0
 8016b42:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 8016b44:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8016b46:	b2da      	uxtb	r2, r3
 8016b48:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016b4a:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 8016b4c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016b4e:	785b      	ldrb	r3, [r3, #1]
 8016b50:	4618      	mov	r0, r3
 8016b52:	f7fe fd17 	bl	8015584 <disk_initialize>
 8016b56:	4603      	mov	r3, r0
 8016b58:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 8016b5c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8016b60:	f003 0301 	and.w	r3, r3, #1
 8016b64:	2b00      	cmp	r3, #0
 8016b66:	d001      	beq.n	8016b6c <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 8016b68:	2303      	movs	r3, #3
 8016b6a:	e1e7      	b.n	8016f3c <find_volume+0x484>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 8016b6c:	79fb      	ldrb	r3, [r7, #7]
 8016b6e:	2b00      	cmp	r3, #0
 8016b70:	d007      	beq.n	8016b82 <find_volume+0xca>
 8016b72:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8016b76:	f003 0304 	and.w	r3, r3, #4
 8016b7a:	2b00      	cmp	r3, #0
 8016b7c:	d001      	beq.n	8016b82 <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 8016b7e:	230a      	movs	r3, #10
 8016b80:	e1dc      	b.n	8016f3c <find_volume+0x484>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 8016b82:	2300      	movs	r3, #0
 8016b84:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 8016b86:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8016b88:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8016b8a:	f7ff ff3f 	bl	8016a0c <check_fs>
 8016b8e:	4603      	mov	r3, r0
 8016b90:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 8016b94:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8016b98:	2b02      	cmp	r3, #2
 8016b9a:	d14b      	bne.n	8016c34 <find_volume+0x17c>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8016b9c:	2300      	movs	r3, #0
 8016b9e:	643b      	str	r3, [r7, #64]	; 0x40
 8016ba0:	e01f      	b.n	8016be2 <find_volume+0x12a>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 8016ba2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016ba4:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8016ba8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8016baa:	011b      	lsls	r3, r3, #4
 8016bac:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 8016bb0:	4413      	add	r3, r2
 8016bb2:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 8016bb4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016bb6:	3304      	adds	r3, #4
 8016bb8:	781b      	ldrb	r3, [r3, #0]
 8016bba:	2b00      	cmp	r3, #0
 8016bbc:	d006      	beq.n	8016bcc <find_volume+0x114>
 8016bbe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016bc0:	3308      	adds	r3, #8
 8016bc2:	4618      	mov	r0, r3
 8016bc4:	f7fe fd7a 	bl	80156bc <ld_dword>
 8016bc8:	4602      	mov	r2, r0
 8016bca:	e000      	b.n	8016bce <find_volume+0x116>
 8016bcc:	2200      	movs	r2, #0
 8016bce:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8016bd0:	009b      	lsls	r3, r3, #2
 8016bd2:	f107 0158 	add.w	r1, r7, #88	; 0x58
 8016bd6:	440b      	add	r3, r1
 8016bd8:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8016bdc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8016bde:	3301      	adds	r3, #1
 8016be0:	643b      	str	r3, [r7, #64]	; 0x40
 8016be2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8016be4:	2b03      	cmp	r3, #3
 8016be6:	d9dc      	bls.n	8016ba2 <find_volume+0xea>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 8016be8:	2300      	movs	r3, #0
 8016bea:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 8016bec:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8016bee:	2b00      	cmp	r3, #0
 8016bf0:	d002      	beq.n	8016bf8 <find_volume+0x140>
 8016bf2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8016bf4:	3b01      	subs	r3, #1
 8016bf6:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 8016bf8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8016bfa:	009b      	lsls	r3, r3, #2
 8016bfc:	f107 0258 	add.w	r2, r7, #88	; 0x58
 8016c00:	4413      	add	r3, r2
 8016c02:	f853 3c44 	ldr.w	r3, [r3, #-68]
 8016c06:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 8016c08:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8016c0a:	2b00      	cmp	r3, #0
 8016c0c:	d005      	beq.n	8016c1a <find_volume+0x162>
 8016c0e:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8016c10:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8016c12:	f7ff fefb 	bl	8016a0c <check_fs>
 8016c16:	4603      	mov	r3, r0
 8016c18:	e000      	b.n	8016c1c <find_volume+0x164>
 8016c1a:	2303      	movs	r3, #3
 8016c1c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 8016c20:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8016c24:	2b01      	cmp	r3, #1
 8016c26:	d905      	bls.n	8016c34 <find_volume+0x17c>
 8016c28:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8016c2a:	3301      	adds	r3, #1
 8016c2c:	643b      	str	r3, [r7, #64]	; 0x40
 8016c2e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8016c30:	2b03      	cmp	r3, #3
 8016c32:	d9e1      	bls.n	8016bf8 <find_volume+0x140>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 8016c34:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8016c38:	2b04      	cmp	r3, #4
 8016c3a:	d101      	bne.n	8016c40 <find_volume+0x188>
 8016c3c:	2301      	movs	r3, #1
 8016c3e:	e17d      	b.n	8016f3c <find_volume+0x484>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 8016c40:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8016c44:	2b01      	cmp	r3, #1
 8016c46:	d901      	bls.n	8016c4c <find_volume+0x194>
 8016c48:	230d      	movs	r3, #13
 8016c4a:	e177      	b.n	8016f3c <find_volume+0x484>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 8016c4c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016c4e:	3330      	adds	r3, #48	; 0x30
 8016c50:	330b      	adds	r3, #11
 8016c52:	4618      	mov	r0, r3
 8016c54:	f7fe fd1a 	bl	801568c <ld_word>
 8016c58:	4603      	mov	r3, r0
 8016c5a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8016c5e:	d001      	beq.n	8016c64 <find_volume+0x1ac>
 8016c60:	230d      	movs	r3, #13
 8016c62:	e16b      	b.n	8016f3c <find_volume+0x484>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 8016c64:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016c66:	3330      	adds	r3, #48	; 0x30
 8016c68:	3316      	adds	r3, #22
 8016c6a:	4618      	mov	r0, r3
 8016c6c:	f7fe fd0e 	bl	801568c <ld_word>
 8016c70:	4603      	mov	r3, r0
 8016c72:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 8016c74:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8016c76:	2b00      	cmp	r3, #0
 8016c78:	d106      	bne.n	8016c88 <find_volume+0x1d0>
 8016c7a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016c7c:	3330      	adds	r3, #48	; 0x30
 8016c7e:	3324      	adds	r3, #36	; 0x24
 8016c80:	4618      	mov	r0, r3
 8016c82:	f7fe fd1b 	bl	80156bc <ld_dword>
 8016c86:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 8016c88:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016c8a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8016c8c:	619a      	str	r2, [r3, #24]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 8016c8e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016c90:	f893 2040 	ldrb.w	r2, [r3, #64]	; 0x40
 8016c94:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016c96:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 8016c98:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016c9a:	789b      	ldrb	r3, [r3, #2]
 8016c9c:	2b01      	cmp	r3, #1
 8016c9e:	d005      	beq.n	8016cac <find_volume+0x1f4>
 8016ca0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016ca2:	789b      	ldrb	r3, [r3, #2]
 8016ca4:	2b02      	cmp	r3, #2
 8016ca6:	d001      	beq.n	8016cac <find_volume+0x1f4>
 8016ca8:	230d      	movs	r3, #13
 8016caa:	e147      	b.n	8016f3c <find_volume+0x484>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 8016cac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016cae:	789b      	ldrb	r3, [r3, #2]
 8016cb0:	461a      	mov	r2, r3
 8016cb2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8016cb4:	fb02 f303 	mul.w	r3, r2, r3
 8016cb8:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 8016cba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016cbc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8016cc0:	b29a      	uxth	r2, r3
 8016cc2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016cc4:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 8016cc6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016cc8:	895b      	ldrh	r3, [r3, #10]
 8016cca:	2b00      	cmp	r3, #0
 8016ccc:	d008      	beq.n	8016ce0 <find_volume+0x228>
 8016cce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016cd0:	895b      	ldrh	r3, [r3, #10]
 8016cd2:	461a      	mov	r2, r3
 8016cd4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016cd6:	895b      	ldrh	r3, [r3, #10]
 8016cd8:	3b01      	subs	r3, #1
 8016cda:	4013      	ands	r3, r2
 8016cdc:	2b00      	cmp	r3, #0
 8016cde:	d001      	beq.n	8016ce4 <find_volume+0x22c>
 8016ce0:	230d      	movs	r3, #13
 8016ce2:	e12b      	b.n	8016f3c <find_volume+0x484>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 8016ce4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016ce6:	3330      	adds	r3, #48	; 0x30
 8016ce8:	3311      	adds	r3, #17
 8016cea:	4618      	mov	r0, r3
 8016cec:	f7fe fcce 	bl	801568c <ld_word>
 8016cf0:	4603      	mov	r3, r0
 8016cf2:	461a      	mov	r2, r3
 8016cf4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016cf6:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 8016cf8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016cfa:	891b      	ldrh	r3, [r3, #8]
 8016cfc:	f003 030f 	and.w	r3, r3, #15
 8016d00:	b29b      	uxth	r3, r3
 8016d02:	2b00      	cmp	r3, #0
 8016d04:	d001      	beq.n	8016d0a <find_volume+0x252>
 8016d06:	230d      	movs	r3, #13
 8016d08:	e118      	b.n	8016f3c <find_volume+0x484>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 8016d0a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016d0c:	3330      	adds	r3, #48	; 0x30
 8016d0e:	3313      	adds	r3, #19
 8016d10:	4618      	mov	r0, r3
 8016d12:	f7fe fcbb 	bl	801568c <ld_word>
 8016d16:	4603      	mov	r3, r0
 8016d18:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 8016d1a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8016d1c:	2b00      	cmp	r3, #0
 8016d1e:	d106      	bne.n	8016d2e <find_volume+0x276>
 8016d20:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016d22:	3330      	adds	r3, #48	; 0x30
 8016d24:	3320      	adds	r3, #32
 8016d26:	4618      	mov	r0, r3
 8016d28:	f7fe fcc8 	bl	80156bc <ld_dword>
 8016d2c:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 8016d2e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016d30:	3330      	adds	r3, #48	; 0x30
 8016d32:	330e      	adds	r3, #14
 8016d34:	4618      	mov	r0, r3
 8016d36:	f7fe fca9 	bl	801568c <ld_word>
 8016d3a:	4603      	mov	r3, r0
 8016d3c:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 8016d3e:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8016d40:	2b00      	cmp	r3, #0
 8016d42:	d101      	bne.n	8016d48 <find_volume+0x290>
 8016d44:	230d      	movs	r3, #13
 8016d46:	e0f9      	b.n	8016f3c <find_volume+0x484>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 8016d48:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8016d4a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8016d4c:	4413      	add	r3, r2
 8016d4e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8016d50:	8912      	ldrh	r2, [r2, #8]
 8016d52:	0912      	lsrs	r2, r2, #4
 8016d54:	b292      	uxth	r2, r2
 8016d56:	4413      	add	r3, r2
 8016d58:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 8016d5a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8016d5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016d5e:	429a      	cmp	r2, r3
 8016d60:	d201      	bcs.n	8016d66 <find_volume+0x2ae>
 8016d62:	230d      	movs	r3, #13
 8016d64:	e0ea      	b.n	8016f3c <find_volume+0x484>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 8016d66:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8016d68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016d6a:	1ad3      	subs	r3, r2, r3
 8016d6c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8016d6e:	8952      	ldrh	r2, [r2, #10]
 8016d70:	fbb3 f3f2 	udiv	r3, r3, r2
 8016d74:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 8016d76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016d78:	2b00      	cmp	r3, #0
 8016d7a:	d103      	bne.n	8016d84 <find_volume+0x2cc>
 8016d7c:	230d      	movs	r3, #13
 8016d7e:	e0dd      	b.n	8016f3c <find_volume+0x484>
 8016d80:	24000b50 	.word	0x24000b50
		fmt = FS_FAT32;
 8016d84:	2303      	movs	r3, #3
 8016d86:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 8016d8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016d8c:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 8016d90:	4293      	cmp	r3, r2
 8016d92:	d802      	bhi.n	8016d9a <find_volume+0x2e2>
 8016d94:	2302      	movs	r3, #2
 8016d96:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 8016d9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016d9c:	f640 72f5 	movw	r2, #4085	; 0xff5
 8016da0:	4293      	cmp	r3, r2
 8016da2:	d802      	bhi.n	8016daa <find_volume+0x2f2>
 8016da4:	2301      	movs	r3, #1
 8016da6:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 8016daa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016dac:	1c9a      	adds	r2, r3, #2
 8016dae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016db0:	615a      	str	r2, [r3, #20]
		fs->volbase = bsect;							/* Volume start sector */
 8016db2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016db4:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8016db6:	61da      	str	r2, [r3, #28]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 8016db8:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8016dba:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8016dbc:	441a      	add	r2, r3
 8016dbe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016dc0:	621a      	str	r2, [r3, #32]
		fs->database = bsect + sysect;					/* Data start sector */
 8016dc2:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8016dc4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016dc6:	441a      	add	r2, r3
 8016dc8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016dca:	629a      	str	r2, [r3, #40]	; 0x28
		if (fmt == FS_FAT32) {
 8016dcc:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8016dd0:	2b03      	cmp	r3, #3
 8016dd2:	d11e      	bne.n	8016e12 <find_volume+0x35a>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 8016dd4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016dd6:	3330      	adds	r3, #48	; 0x30
 8016dd8:	332a      	adds	r3, #42	; 0x2a
 8016dda:	4618      	mov	r0, r3
 8016ddc:	f7fe fc56 	bl	801568c <ld_word>
 8016de0:	4603      	mov	r3, r0
 8016de2:	2b00      	cmp	r3, #0
 8016de4:	d001      	beq.n	8016dea <find_volume+0x332>
 8016de6:	230d      	movs	r3, #13
 8016de8:	e0a8      	b.n	8016f3c <find_volume+0x484>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 8016dea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016dec:	891b      	ldrh	r3, [r3, #8]
 8016dee:	2b00      	cmp	r3, #0
 8016df0:	d001      	beq.n	8016df6 <find_volume+0x33e>
 8016df2:	230d      	movs	r3, #13
 8016df4:	e0a2      	b.n	8016f3c <find_volume+0x484>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 8016df6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016df8:	3330      	adds	r3, #48	; 0x30
 8016dfa:	332c      	adds	r3, #44	; 0x2c
 8016dfc:	4618      	mov	r0, r3
 8016dfe:	f7fe fc5d 	bl	80156bc <ld_dword>
 8016e02:	4602      	mov	r2, r0
 8016e04:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016e06:	625a      	str	r2, [r3, #36]	; 0x24
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 8016e08:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016e0a:	695b      	ldr	r3, [r3, #20]
 8016e0c:	009b      	lsls	r3, r3, #2
 8016e0e:	647b      	str	r3, [r7, #68]	; 0x44
 8016e10:	e01f      	b.n	8016e52 <find_volume+0x39a>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 8016e12:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016e14:	891b      	ldrh	r3, [r3, #8]
 8016e16:	2b00      	cmp	r3, #0
 8016e18:	d101      	bne.n	8016e1e <find_volume+0x366>
 8016e1a:	230d      	movs	r3, #13
 8016e1c:	e08e      	b.n	8016f3c <find_volume+0x484>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 8016e1e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016e20:	6a1a      	ldr	r2, [r3, #32]
 8016e22:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8016e24:	441a      	add	r2, r3
 8016e26:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016e28:	625a      	str	r2, [r3, #36]	; 0x24
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 8016e2a:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8016e2e:	2b02      	cmp	r3, #2
 8016e30:	d103      	bne.n	8016e3a <find_volume+0x382>
 8016e32:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016e34:	695b      	ldr	r3, [r3, #20]
 8016e36:	005b      	lsls	r3, r3, #1
 8016e38:	e00a      	b.n	8016e50 <find_volume+0x398>
 8016e3a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016e3c:	695a      	ldr	r2, [r3, #20]
 8016e3e:	4613      	mov	r3, r2
 8016e40:	005b      	lsls	r3, r3, #1
 8016e42:	4413      	add	r3, r2
 8016e44:	085a      	lsrs	r2, r3, #1
 8016e46:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016e48:	695b      	ldr	r3, [r3, #20]
 8016e4a:	f003 0301 	and.w	r3, r3, #1
 8016e4e:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 8016e50:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 8016e52:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016e54:	699a      	ldr	r2, [r3, #24]
 8016e56:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8016e58:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8016e5c:	0a5b      	lsrs	r3, r3, #9
 8016e5e:	429a      	cmp	r2, r3
 8016e60:	d201      	bcs.n	8016e66 <find_volume+0x3ae>
 8016e62:	230d      	movs	r3, #13
 8016e64:	e06a      	b.n	8016f3c <find_volume+0x484>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 8016e66:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016e68:	f04f 32ff 	mov.w	r2, #4294967295
 8016e6c:	611a      	str	r2, [r3, #16]
 8016e6e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016e70:	691a      	ldr	r2, [r3, #16]
 8016e72:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016e74:	60da      	str	r2, [r3, #12]
		fs->fsi_flag = 0x80;
 8016e76:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016e78:	2280      	movs	r2, #128	; 0x80
 8016e7a:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 8016e7c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8016e80:	2b03      	cmp	r3, #3
 8016e82:	d149      	bne.n	8016f18 <find_volume+0x460>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 8016e84:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016e86:	3330      	adds	r3, #48	; 0x30
 8016e88:	3330      	adds	r3, #48	; 0x30
 8016e8a:	4618      	mov	r0, r3
 8016e8c:	f7fe fbfe 	bl	801568c <ld_word>
 8016e90:	4603      	mov	r3, r0
 8016e92:	2b01      	cmp	r3, #1
 8016e94:	d140      	bne.n	8016f18 <find_volume+0x460>
			&& move_window(fs, bsect + 1) == FR_OK)
 8016e96:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8016e98:	3301      	adds	r3, #1
 8016e9a:	4619      	mov	r1, r3
 8016e9c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8016e9e:	f7fe fea5 	bl	8015bec <move_window>
 8016ea2:	4603      	mov	r3, r0
 8016ea4:	2b00      	cmp	r3, #0
 8016ea6:	d137      	bne.n	8016f18 <find_volume+0x460>
		{
			fs->fsi_flag = 0;
 8016ea8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016eaa:	2200      	movs	r2, #0
 8016eac:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 8016eae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016eb0:	3330      	adds	r3, #48	; 0x30
 8016eb2:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8016eb6:	4618      	mov	r0, r3
 8016eb8:	f7fe fbe8 	bl	801568c <ld_word>
 8016ebc:	4603      	mov	r3, r0
 8016ebe:	461a      	mov	r2, r3
 8016ec0:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8016ec4:	429a      	cmp	r2, r3
 8016ec6:	d127      	bne.n	8016f18 <find_volume+0x460>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 8016ec8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016eca:	3330      	adds	r3, #48	; 0x30
 8016ecc:	4618      	mov	r0, r3
 8016ece:	f7fe fbf5 	bl	80156bc <ld_dword>
 8016ed2:	4602      	mov	r2, r0
 8016ed4:	4b1b      	ldr	r3, [pc, #108]	; (8016f44 <find_volume+0x48c>)
 8016ed6:	429a      	cmp	r2, r3
 8016ed8:	d11e      	bne.n	8016f18 <find_volume+0x460>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 8016eda:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016edc:	3330      	adds	r3, #48	; 0x30
 8016ede:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8016ee2:	4618      	mov	r0, r3
 8016ee4:	f7fe fbea 	bl	80156bc <ld_dword>
 8016ee8:	4602      	mov	r2, r0
 8016eea:	4b17      	ldr	r3, [pc, #92]	; (8016f48 <find_volume+0x490>)
 8016eec:	429a      	cmp	r2, r3
 8016eee:	d113      	bne.n	8016f18 <find_volume+0x460>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 8016ef0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016ef2:	3330      	adds	r3, #48	; 0x30
 8016ef4:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 8016ef8:	4618      	mov	r0, r3
 8016efa:	f7fe fbdf 	bl	80156bc <ld_dword>
 8016efe:	4602      	mov	r2, r0
 8016f00:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016f02:	611a      	str	r2, [r3, #16]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 8016f04:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016f06:	3330      	adds	r3, #48	; 0x30
 8016f08:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 8016f0c:	4618      	mov	r0, r3
 8016f0e:	f7fe fbd5 	bl	80156bc <ld_dword>
 8016f12:	4602      	mov	r2, r0
 8016f14:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016f16:	60da      	str	r2, [r3, #12]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 8016f18:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016f1a:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 8016f1e:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 8016f20:	4b0a      	ldr	r3, [pc, #40]	; (8016f4c <find_volume+0x494>)
 8016f22:	881b      	ldrh	r3, [r3, #0]
 8016f24:	3301      	adds	r3, #1
 8016f26:	b29a      	uxth	r2, r3
 8016f28:	4b08      	ldr	r3, [pc, #32]	; (8016f4c <find_volume+0x494>)
 8016f2a:	801a      	strh	r2, [r3, #0]
 8016f2c:	4b07      	ldr	r3, [pc, #28]	; (8016f4c <find_volume+0x494>)
 8016f2e:	881a      	ldrh	r2, [r3, #0]
 8016f30:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016f32:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 8016f34:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8016f36:	f7fe fdf1 	bl	8015b1c <clear_lock>
#endif
	return FR_OK;
 8016f3a:	2300      	movs	r3, #0
}
 8016f3c:	4618      	mov	r0, r3
 8016f3e:	3758      	adds	r7, #88	; 0x58
 8016f40:	46bd      	mov	sp, r7
 8016f42:	bd80      	pop	{r7, pc}
 8016f44:	41615252 	.word	0x41615252
 8016f48:	61417272 	.word	0x61417272
 8016f4c:	24000b54 	.word	0x24000b54

08016f50 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 8016f50:	b580      	push	{r7, lr}
 8016f52:	b084      	sub	sp, #16
 8016f54:	af00      	add	r7, sp, #0
 8016f56:	6078      	str	r0, [r7, #4]
 8016f58:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 8016f5a:	2309      	movs	r3, #9
 8016f5c:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 8016f5e:	687b      	ldr	r3, [r7, #4]
 8016f60:	2b00      	cmp	r3, #0
 8016f62:	d01c      	beq.n	8016f9e <validate+0x4e>
 8016f64:	687b      	ldr	r3, [r7, #4]
 8016f66:	681b      	ldr	r3, [r3, #0]
 8016f68:	2b00      	cmp	r3, #0
 8016f6a:	d018      	beq.n	8016f9e <validate+0x4e>
 8016f6c:	687b      	ldr	r3, [r7, #4]
 8016f6e:	681b      	ldr	r3, [r3, #0]
 8016f70:	781b      	ldrb	r3, [r3, #0]
 8016f72:	2b00      	cmp	r3, #0
 8016f74:	d013      	beq.n	8016f9e <validate+0x4e>
 8016f76:	687b      	ldr	r3, [r7, #4]
 8016f78:	889a      	ldrh	r2, [r3, #4]
 8016f7a:	687b      	ldr	r3, [r7, #4]
 8016f7c:	681b      	ldr	r3, [r3, #0]
 8016f7e:	88db      	ldrh	r3, [r3, #6]
 8016f80:	429a      	cmp	r2, r3
 8016f82:	d10c      	bne.n	8016f9e <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 8016f84:	687b      	ldr	r3, [r7, #4]
 8016f86:	681b      	ldr	r3, [r3, #0]
 8016f88:	785b      	ldrb	r3, [r3, #1]
 8016f8a:	4618      	mov	r0, r3
 8016f8c:	f7fe fae0 	bl	8015550 <disk_status>
 8016f90:	4603      	mov	r3, r0
 8016f92:	f003 0301 	and.w	r3, r3, #1
 8016f96:	2b00      	cmp	r3, #0
 8016f98:	d101      	bne.n	8016f9e <validate+0x4e>
			res = FR_OK;
 8016f9a:	2300      	movs	r3, #0
 8016f9c:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 8016f9e:	7bfb      	ldrb	r3, [r7, #15]
 8016fa0:	2b00      	cmp	r3, #0
 8016fa2:	d102      	bne.n	8016faa <validate+0x5a>
 8016fa4:	687b      	ldr	r3, [r7, #4]
 8016fa6:	681b      	ldr	r3, [r3, #0]
 8016fa8:	e000      	b.n	8016fac <validate+0x5c>
 8016faa:	2300      	movs	r3, #0
 8016fac:	683a      	ldr	r2, [r7, #0]
 8016fae:	6013      	str	r3, [r2, #0]
	return res;
 8016fb0:	7bfb      	ldrb	r3, [r7, #15]
}
 8016fb2:	4618      	mov	r0, r3
 8016fb4:	3710      	adds	r7, #16
 8016fb6:	46bd      	mov	sp, r7
 8016fb8:	bd80      	pop	{r7, pc}
	...

08016fbc <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 8016fbc:	b580      	push	{r7, lr}
 8016fbe:	b088      	sub	sp, #32
 8016fc0:	af00      	add	r7, sp, #0
 8016fc2:	60f8      	str	r0, [r7, #12]
 8016fc4:	60b9      	str	r1, [r7, #8]
 8016fc6:	4613      	mov	r3, r2
 8016fc8:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 8016fca:	68bb      	ldr	r3, [r7, #8]
 8016fcc:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 8016fce:	f107 0310 	add.w	r3, r7, #16
 8016fd2:	4618      	mov	r0, r3
 8016fd4:	f7ff fcd5 	bl	8016982 <get_ldnumber>
 8016fd8:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 8016fda:	69fb      	ldr	r3, [r7, #28]
 8016fdc:	2b00      	cmp	r3, #0
 8016fde:	da01      	bge.n	8016fe4 <f_mount+0x28>
 8016fe0:	230b      	movs	r3, #11
 8016fe2:	e02b      	b.n	801703c <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 8016fe4:	4a17      	ldr	r2, [pc, #92]	; (8017044 <f_mount+0x88>)
 8016fe6:	69fb      	ldr	r3, [r7, #28]
 8016fe8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8016fec:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 8016fee:	69bb      	ldr	r3, [r7, #24]
 8016ff0:	2b00      	cmp	r3, #0
 8016ff2:	d005      	beq.n	8017000 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 8016ff4:	69b8      	ldr	r0, [r7, #24]
 8016ff6:	f7fe fd91 	bl	8015b1c <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 8016ffa:	69bb      	ldr	r3, [r7, #24]
 8016ffc:	2200      	movs	r2, #0
 8016ffe:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 8017000:	68fb      	ldr	r3, [r7, #12]
 8017002:	2b00      	cmp	r3, #0
 8017004:	d002      	beq.n	801700c <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 8017006:	68fb      	ldr	r3, [r7, #12]
 8017008:	2200      	movs	r2, #0
 801700a:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 801700c:	68fa      	ldr	r2, [r7, #12]
 801700e:	490d      	ldr	r1, [pc, #52]	; (8017044 <f_mount+0x88>)
 8017010:	69fb      	ldr	r3, [r7, #28]
 8017012:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 8017016:	68fb      	ldr	r3, [r7, #12]
 8017018:	2b00      	cmp	r3, #0
 801701a:	d002      	beq.n	8017022 <f_mount+0x66>
 801701c:	79fb      	ldrb	r3, [r7, #7]
 801701e:	2b01      	cmp	r3, #1
 8017020:	d001      	beq.n	8017026 <f_mount+0x6a>
 8017022:	2300      	movs	r3, #0
 8017024:	e00a      	b.n	801703c <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 8017026:	f107 010c 	add.w	r1, r7, #12
 801702a:	f107 0308 	add.w	r3, r7, #8
 801702e:	2200      	movs	r2, #0
 8017030:	4618      	mov	r0, r3
 8017032:	f7ff fd41 	bl	8016ab8 <find_volume>
 8017036:	4603      	mov	r3, r0
 8017038:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 801703a:	7dfb      	ldrb	r3, [r7, #23]
}
 801703c:	4618      	mov	r0, r3
 801703e:	3720      	adds	r7, #32
 8017040:	46bd      	mov	sp, r7
 8017042:	bd80      	pop	{r7, pc}
 8017044:	24000b50 	.word	0x24000b50

08017048 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 8017048:	b580      	push	{r7, lr}
 801704a:	b098      	sub	sp, #96	; 0x60
 801704c:	af00      	add	r7, sp, #0
 801704e:	60f8      	str	r0, [r7, #12]
 8017050:	60b9      	str	r1, [r7, #8]
 8017052:	4613      	mov	r3, r2
 8017054:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 8017056:	68fb      	ldr	r3, [r7, #12]
 8017058:	2b00      	cmp	r3, #0
 801705a:	d101      	bne.n	8017060 <f_open+0x18>
 801705c:	2309      	movs	r3, #9
 801705e:	e1ad      	b.n	80173bc <f_open+0x374>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 8017060:	79fb      	ldrb	r3, [r7, #7]
 8017062:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8017066:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 8017068:	79fa      	ldrb	r2, [r7, #7]
 801706a:	f107 0110 	add.w	r1, r7, #16
 801706e:	f107 0308 	add.w	r3, r7, #8
 8017072:	4618      	mov	r0, r3
 8017074:	f7ff fd20 	bl	8016ab8 <find_volume>
 8017078:	4603      	mov	r3, r0
 801707a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	if (res == FR_OK) {
 801707e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8017082:	2b00      	cmp	r3, #0
 8017084:	f040 8191 	bne.w	80173aa <f_open+0x362>
		dj.obj.fs = fs;
 8017088:	693b      	ldr	r3, [r7, #16]
 801708a:	617b      	str	r3, [r7, #20]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 801708c:	68ba      	ldr	r2, [r7, #8]
 801708e:	f107 0314 	add.w	r3, r7, #20
 8017092:	4611      	mov	r1, r2
 8017094:	4618      	mov	r0, r3
 8017096:	f7ff fc03 	bl	80168a0 <follow_path>
 801709a:	4603      	mov	r3, r0
 801709c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 80170a0:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80170a4:	2b00      	cmp	r3, #0
 80170a6:	d11a      	bne.n	80170de <f_open+0x96>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 80170a8:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 80170ac:	b25b      	sxtb	r3, r3
 80170ae:	2b00      	cmp	r3, #0
 80170b0:	da03      	bge.n	80170ba <f_open+0x72>
				res = FR_INVALID_NAME;
 80170b2:	2306      	movs	r3, #6
 80170b4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 80170b8:	e011      	b.n	80170de <f_open+0x96>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 80170ba:	79fb      	ldrb	r3, [r7, #7]
 80170bc:	f023 0301 	bic.w	r3, r3, #1
 80170c0:	2b00      	cmp	r3, #0
 80170c2:	bf14      	ite	ne
 80170c4:	2301      	movne	r3, #1
 80170c6:	2300      	moveq	r3, #0
 80170c8:	b2db      	uxtb	r3, r3
 80170ca:	461a      	mov	r2, r3
 80170cc:	f107 0314 	add.w	r3, r7, #20
 80170d0:	4611      	mov	r1, r2
 80170d2:	4618      	mov	r0, r3
 80170d4:	f7fe fbda 	bl	801588c <chk_lock>
 80170d8:	4603      	mov	r3, r0
 80170da:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 80170de:	79fb      	ldrb	r3, [r7, #7]
 80170e0:	f003 031c 	and.w	r3, r3, #28
 80170e4:	2b00      	cmp	r3, #0
 80170e6:	d07f      	beq.n	80171e8 <f_open+0x1a0>
			if (res != FR_OK) {					/* No file, create new */
 80170e8:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80170ec:	2b00      	cmp	r3, #0
 80170ee:	d017      	beq.n	8017120 <f_open+0xd8>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 80170f0:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80170f4:	2b04      	cmp	r3, #4
 80170f6:	d10e      	bne.n	8017116 <f_open+0xce>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 80170f8:	f7fe fc24 	bl	8015944 <enq_lock>
 80170fc:	4603      	mov	r3, r0
 80170fe:	2b00      	cmp	r3, #0
 8017100:	d006      	beq.n	8017110 <f_open+0xc8>
 8017102:	f107 0314 	add.w	r3, r7, #20
 8017106:	4618      	mov	r0, r3
 8017108:	f7ff fb03 	bl	8016712 <dir_register>
 801710c:	4603      	mov	r3, r0
 801710e:	e000      	b.n	8017112 <f_open+0xca>
 8017110:	2312      	movs	r3, #18
 8017112:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 8017116:	79fb      	ldrb	r3, [r7, #7]
 8017118:	f043 0308 	orr.w	r3, r3, #8
 801711c:	71fb      	strb	r3, [r7, #7]
 801711e:	e010      	b.n	8017142 <f_open+0xfa>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 8017120:	7ebb      	ldrb	r3, [r7, #26]
 8017122:	f003 0311 	and.w	r3, r3, #17
 8017126:	2b00      	cmp	r3, #0
 8017128:	d003      	beq.n	8017132 <f_open+0xea>
					res = FR_DENIED;
 801712a:	2307      	movs	r3, #7
 801712c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8017130:	e007      	b.n	8017142 <f_open+0xfa>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 8017132:	79fb      	ldrb	r3, [r7, #7]
 8017134:	f003 0304 	and.w	r3, r3, #4
 8017138:	2b00      	cmp	r3, #0
 801713a:	d002      	beq.n	8017142 <f_open+0xfa>
 801713c:	2308      	movs	r3, #8
 801713e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 8017142:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8017146:	2b00      	cmp	r3, #0
 8017148:	d168      	bne.n	801721c <f_open+0x1d4>
 801714a:	79fb      	ldrb	r3, [r7, #7]
 801714c:	f003 0308 	and.w	r3, r3, #8
 8017150:	2b00      	cmp	r3, #0
 8017152:	d063      	beq.n	801721c <f_open+0x1d4>
				dw = GET_FATTIME();
 8017154:	f7fb f8fe 	bl	8012354 <get_fattime>
 8017158:	6538      	str	r0, [r7, #80]	; 0x50
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 801715a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801715c:	330e      	adds	r3, #14
 801715e:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8017160:	4618      	mov	r0, r3
 8017162:	f7fe fae9 	bl	8015738 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 8017166:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8017168:	3316      	adds	r3, #22
 801716a:	6d39      	ldr	r1, [r7, #80]	; 0x50
 801716c:	4618      	mov	r0, r3
 801716e:	f7fe fae3 	bl	8015738 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 8017172:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8017174:	330b      	adds	r3, #11
 8017176:	2220      	movs	r2, #32
 8017178:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 801717a:	693b      	ldr	r3, [r7, #16]
 801717c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801717e:	4611      	mov	r1, r2
 8017180:	4618      	mov	r0, r3
 8017182:	f7ff fa32 	bl	80165ea <ld_clust>
 8017186:	64f8      	str	r0, [r7, #76]	; 0x4c
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 8017188:	693b      	ldr	r3, [r7, #16]
 801718a:	6b79      	ldr	r1, [r7, #52]	; 0x34
 801718c:	2200      	movs	r2, #0
 801718e:	4618      	mov	r0, r3
 8017190:	f7ff fa4a 	bl	8016628 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 8017194:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8017196:	331c      	adds	r3, #28
 8017198:	2100      	movs	r1, #0
 801719a:	4618      	mov	r0, r3
 801719c:	f7fe facc 	bl	8015738 <st_dword>
					fs->wflag = 1;
 80171a0:	693b      	ldr	r3, [r7, #16]
 80171a2:	2201      	movs	r2, #1
 80171a4:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 80171a6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80171a8:	2b00      	cmp	r3, #0
 80171aa:	d037      	beq.n	801721c <f_open+0x1d4>
						dw = fs->winsect;
 80171ac:	693b      	ldr	r3, [r7, #16]
 80171ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80171b0:	653b      	str	r3, [r7, #80]	; 0x50
						res = remove_chain(&dj.obj, cl, 0);
 80171b2:	f107 0314 	add.w	r3, r7, #20
 80171b6:	2200      	movs	r2, #0
 80171b8:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 80171ba:	4618      	mov	r0, r3
 80171bc:	f7fe ff5d 	bl	801607a <remove_chain>
 80171c0:	4603      	mov	r3, r0
 80171c2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
						if (res == FR_OK) {
 80171c6:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80171ca:	2b00      	cmp	r3, #0
 80171cc:	d126      	bne.n	801721c <f_open+0x1d4>
							res = move_window(fs, dw);
 80171ce:	693b      	ldr	r3, [r7, #16]
 80171d0:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80171d2:	4618      	mov	r0, r3
 80171d4:	f7fe fd0a 	bl	8015bec <move_window>
 80171d8:	4603      	mov	r3, r0
 80171da:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 80171de:	693b      	ldr	r3, [r7, #16]
 80171e0:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80171e2:	3a01      	subs	r2, #1
 80171e4:	60da      	str	r2, [r3, #12]
 80171e6:	e019      	b.n	801721c <f_open+0x1d4>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 80171e8:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80171ec:	2b00      	cmp	r3, #0
 80171ee:	d115      	bne.n	801721c <f_open+0x1d4>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 80171f0:	7ebb      	ldrb	r3, [r7, #26]
 80171f2:	f003 0310 	and.w	r3, r3, #16
 80171f6:	2b00      	cmp	r3, #0
 80171f8:	d003      	beq.n	8017202 <f_open+0x1ba>
					res = FR_NO_FILE;
 80171fa:	2304      	movs	r3, #4
 80171fc:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8017200:	e00c      	b.n	801721c <f_open+0x1d4>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 8017202:	79fb      	ldrb	r3, [r7, #7]
 8017204:	f003 0302 	and.w	r3, r3, #2
 8017208:	2b00      	cmp	r3, #0
 801720a:	d007      	beq.n	801721c <f_open+0x1d4>
 801720c:	7ebb      	ldrb	r3, [r7, #26]
 801720e:	f003 0301 	and.w	r3, r3, #1
 8017212:	2b00      	cmp	r3, #0
 8017214:	d002      	beq.n	801721c <f_open+0x1d4>
						res = FR_DENIED;
 8017216:	2307      	movs	r3, #7
 8017218:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					}
				}
			}
		}
		if (res == FR_OK) {
 801721c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8017220:	2b00      	cmp	r3, #0
 8017222:	d128      	bne.n	8017276 <f_open+0x22e>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 8017224:	79fb      	ldrb	r3, [r7, #7]
 8017226:	f003 0308 	and.w	r3, r3, #8
 801722a:	2b00      	cmp	r3, #0
 801722c:	d003      	beq.n	8017236 <f_open+0x1ee>
				mode |= FA_MODIFIED;
 801722e:	79fb      	ldrb	r3, [r7, #7]
 8017230:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8017234:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 8017236:	693b      	ldr	r3, [r7, #16]
 8017238:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801723a:	68fb      	ldr	r3, [r7, #12]
 801723c:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 801723e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8017240:	68fb      	ldr	r3, [r7, #12]
 8017242:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8017244:	79fb      	ldrb	r3, [r7, #7]
 8017246:	f023 0301 	bic.w	r3, r3, #1
 801724a:	2b00      	cmp	r3, #0
 801724c:	bf14      	ite	ne
 801724e:	2301      	movne	r3, #1
 8017250:	2300      	moveq	r3, #0
 8017252:	b2db      	uxtb	r3, r3
 8017254:	461a      	mov	r2, r3
 8017256:	f107 0314 	add.w	r3, r7, #20
 801725a:	4611      	mov	r1, r2
 801725c:	4618      	mov	r0, r3
 801725e:	f7fe fb93 	bl	8015988 <inc_lock>
 8017262:	4602      	mov	r2, r0
 8017264:	68fb      	ldr	r3, [r7, #12]
 8017266:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 8017268:	68fb      	ldr	r3, [r7, #12]
 801726a:	691b      	ldr	r3, [r3, #16]
 801726c:	2b00      	cmp	r3, #0
 801726e:	d102      	bne.n	8017276 <f_open+0x22e>
 8017270:	2302      	movs	r3, #2
 8017272:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
		}
#endif

		if (res == FR_OK) {
 8017276:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 801727a:	2b00      	cmp	r3, #0
 801727c:	f040 8095 	bne.w	80173aa <f_open+0x362>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 8017280:	693b      	ldr	r3, [r7, #16]
 8017282:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8017284:	4611      	mov	r1, r2
 8017286:	4618      	mov	r0, r3
 8017288:	f7ff f9af 	bl	80165ea <ld_clust>
 801728c:	4602      	mov	r2, r0
 801728e:	68fb      	ldr	r3, [r7, #12]
 8017290:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 8017292:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8017294:	331c      	adds	r3, #28
 8017296:	4618      	mov	r0, r3
 8017298:	f7fe fa10 	bl	80156bc <ld_dword>
 801729c:	4602      	mov	r2, r0
 801729e:	68fb      	ldr	r3, [r7, #12]
 80172a0:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 80172a2:	68fb      	ldr	r3, [r7, #12]
 80172a4:	2200      	movs	r2, #0
 80172a6:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 80172a8:	693a      	ldr	r2, [r7, #16]
 80172aa:	68fb      	ldr	r3, [r7, #12]
 80172ac:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 80172ae:	693b      	ldr	r3, [r7, #16]
 80172b0:	88da      	ldrh	r2, [r3, #6]
 80172b2:	68fb      	ldr	r3, [r7, #12]
 80172b4:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 80172b6:	68fb      	ldr	r3, [r7, #12]
 80172b8:	79fa      	ldrb	r2, [r7, #7]
 80172ba:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 80172bc:	68fb      	ldr	r3, [r7, #12]
 80172be:	2200      	movs	r2, #0
 80172c0:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 80172c2:	68fb      	ldr	r3, [r7, #12]
 80172c4:	2200      	movs	r2, #0
 80172c6:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 80172c8:	68fb      	ldr	r3, [r7, #12]
 80172ca:	2200      	movs	r2, #0
 80172cc:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 80172ce:	68fb      	ldr	r3, [r7, #12]
 80172d0:	3330      	adds	r3, #48	; 0x30
 80172d2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80172d6:	2100      	movs	r1, #0
 80172d8:	4618      	mov	r0, r3
 80172da:	f7fe fa7a 	bl	80157d2 <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 80172de:	79fb      	ldrb	r3, [r7, #7]
 80172e0:	f003 0320 	and.w	r3, r3, #32
 80172e4:	2b00      	cmp	r3, #0
 80172e6:	d060      	beq.n	80173aa <f_open+0x362>
 80172e8:	68fb      	ldr	r3, [r7, #12]
 80172ea:	68db      	ldr	r3, [r3, #12]
 80172ec:	2b00      	cmp	r3, #0
 80172ee:	d05c      	beq.n	80173aa <f_open+0x362>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 80172f0:	68fb      	ldr	r3, [r7, #12]
 80172f2:	68da      	ldr	r2, [r3, #12]
 80172f4:	68fb      	ldr	r3, [r7, #12]
 80172f6:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 80172f8:	693b      	ldr	r3, [r7, #16]
 80172fa:	895b      	ldrh	r3, [r3, #10]
 80172fc:	025b      	lsls	r3, r3, #9
 80172fe:	64bb      	str	r3, [r7, #72]	; 0x48
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 8017300:	68fb      	ldr	r3, [r7, #12]
 8017302:	689b      	ldr	r3, [r3, #8]
 8017304:	65bb      	str	r3, [r7, #88]	; 0x58
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8017306:	68fb      	ldr	r3, [r7, #12]
 8017308:	68db      	ldr	r3, [r3, #12]
 801730a:	657b      	str	r3, [r7, #84]	; 0x54
 801730c:	e016      	b.n	801733c <f_open+0x2f4>
					clst = get_fat(&fp->obj, clst);
 801730e:	68fb      	ldr	r3, [r7, #12]
 8017310:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8017312:	4618      	mov	r0, r3
 8017314:	f7fe fd25 	bl	8015d62 <get_fat>
 8017318:	65b8      	str	r0, [r7, #88]	; 0x58
					if (clst <= 1) res = FR_INT_ERR;
 801731a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 801731c:	2b01      	cmp	r3, #1
 801731e:	d802      	bhi.n	8017326 <f_open+0x2de>
 8017320:	2302      	movs	r3, #2
 8017322:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 8017326:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8017328:	f1b3 3fff 	cmp.w	r3, #4294967295
 801732c:	d102      	bne.n	8017334 <f_open+0x2ec>
 801732e:	2301      	movs	r3, #1
 8017330:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8017334:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8017336:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8017338:	1ad3      	subs	r3, r2, r3
 801733a:	657b      	str	r3, [r7, #84]	; 0x54
 801733c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8017340:	2b00      	cmp	r3, #0
 8017342:	d103      	bne.n	801734c <f_open+0x304>
 8017344:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8017346:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8017348:	429a      	cmp	r2, r3
 801734a:	d8e0      	bhi.n	801730e <f_open+0x2c6>
				}
				fp->clust = clst;
 801734c:	68fb      	ldr	r3, [r7, #12]
 801734e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8017350:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 8017352:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8017356:	2b00      	cmp	r3, #0
 8017358:	d127      	bne.n	80173aa <f_open+0x362>
 801735a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801735c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8017360:	2b00      	cmp	r3, #0
 8017362:	d022      	beq.n	80173aa <f_open+0x362>
					if ((sc = clust2sect(fs, clst)) == 0) {
 8017364:	693b      	ldr	r3, [r7, #16]
 8017366:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8017368:	4618      	mov	r0, r3
 801736a:	f7fe fcdb 	bl	8015d24 <clust2sect>
 801736e:	6478      	str	r0, [r7, #68]	; 0x44
 8017370:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8017372:	2b00      	cmp	r3, #0
 8017374:	d103      	bne.n	801737e <f_open+0x336>
						res = FR_INT_ERR;
 8017376:	2302      	movs	r3, #2
 8017378:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 801737c:	e015      	b.n	80173aa <f_open+0x362>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 801737e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8017380:	0a5a      	lsrs	r2, r3, #9
 8017382:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8017384:	441a      	add	r2, r3
 8017386:	68fb      	ldr	r3, [r7, #12]
 8017388:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 801738a:	693b      	ldr	r3, [r7, #16]
 801738c:	7858      	ldrb	r0, [r3, #1]
 801738e:	68fb      	ldr	r3, [r7, #12]
 8017390:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8017394:	68fb      	ldr	r3, [r7, #12]
 8017396:	6a1a      	ldr	r2, [r3, #32]
 8017398:	2301      	movs	r3, #1
 801739a:	f7fe f919 	bl	80155d0 <disk_read>
 801739e:	4603      	mov	r3, r0
 80173a0:	2b00      	cmp	r3, #0
 80173a2:	d002      	beq.n	80173aa <f_open+0x362>
 80173a4:	2301      	movs	r3, #1
 80173a6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 80173aa:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80173ae:	2b00      	cmp	r3, #0
 80173b0:	d002      	beq.n	80173b8 <f_open+0x370>
 80173b2:	68fb      	ldr	r3, [r7, #12]
 80173b4:	2200      	movs	r2, #0
 80173b6:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 80173b8:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
}
 80173bc:	4618      	mov	r0, r3
 80173be:	3760      	adds	r7, #96	; 0x60
 80173c0:	46bd      	mov	sp, r7
 80173c2:	bd80      	pop	{r7, pc}

080173c4 <f_read>:
	FIL* fp, 	/* Pointer to the file object */
	void* buff,	/* Pointer to data buffer */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Pointer to number of bytes read */
)
{
 80173c4:	b580      	push	{r7, lr}
 80173c6:	b08e      	sub	sp, #56	; 0x38
 80173c8:	af00      	add	r7, sp, #0
 80173ca:	60f8      	str	r0, [r7, #12]
 80173cc:	60b9      	str	r1, [r7, #8]
 80173ce:	607a      	str	r2, [r7, #4]
 80173d0:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;
 80173d2:	68bb      	ldr	r3, [r7, #8]
 80173d4:	627b      	str	r3, [r7, #36]	; 0x24


	*br = 0;	/* Clear read byte counter */
 80173d6:	683b      	ldr	r3, [r7, #0]
 80173d8:	2200      	movs	r2, #0
 80173da:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
 80173dc:	68fb      	ldr	r3, [r7, #12]
 80173de:	f107 0214 	add.w	r2, r7, #20
 80173e2:	4611      	mov	r1, r2
 80173e4:	4618      	mov	r0, r3
 80173e6:	f7ff fdb3 	bl	8016f50 <validate>
 80173ea:	4603      	mov	r3, r0
 80173ec:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 80173f0:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80173f4:	2b00      	cmp	r3, #0
 80173f6:	d107      	bne.n	8017408 <f_read+0x44>
 80173f8:	68fb      	ldr	r3, [r7, #12]
 80173fa:	7d5b      	ldrb	r3, [r3, #21]
 80173fc:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8017400:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8017404:	2b00      	cmp	r3, #0
 8017406:	d002      	beq.n	801740e <f_read+0x4a>
 8017408:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 801740c:	e115      	b.n	801763a <f_read+0x276>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 801740e:	68fb      	ldr	r3, [r7, #12]
 8017410:	7d1b      	ldrb	r3, [r3, #20]
 8017412:	f003 0301 	and.w	r3, r3, #1
 8017416:	2b00      	cmp	r3, #0
 8017418:	d101      	bne.n	801741e <f_read+0x5a>
 801741a:	2307      	movs	r3, #7
 801741c:	e10d      	b.n	801763a <f_read+0x276>
	remain = fp->obj.objsize - fp->fptr;
 801741e:	68fb      	ldr	r3, [r7, #12]
 8017420:	68da      	ldr	r2, [r3, #12]
 8017422:	68fb      	ldr	r3, [r7, #12]
 8017424:	699b      	ldr	r3, [r3, #24]
 8017426:	1ad3      	subs	r3, r2, r3
 8017428:	623b      	str	r3, [r7, #32]
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 801742a:	687a      	ldr	r2, [r7, #4]
 801742c:	6a3b      	ldr	r3, [r7, #32]
 801742e:	429a      	cmp	r2, r3
 8017430:	f240 80fe 	bls.w	8017630 <f_read+0x26c>
 8017434:	6a3b      	ldr	r3, [r7, #32]
 8017436:	607b      	str	r3, [r7, #4]

	for ( ;  btr;								/* Repeat until all data read */
 8017438:	e0fa      	b.n	8017630 <f_read+0x26c>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 801743a:	68fb      	ldr	r3, [r7, #12]
 801743c:	699b      	ldr	r3, [r3, #24]
 801743e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8017442:	2b00      	cmp	r3, #0
 8017444:	f040 80c6 	bne.w	80175d4 <f_read+0x210>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
 8017448:	68fb      	ldr	r3, [r7, #12]
 801744a:	699b      	ldr	r3, [r3, #24]
 801744c:	0a5b      	lsrs	r3, r3, #9
 801744e:	697a      	ldr	r2, [r7, #20]
 8017450:	8952      	ldrh	r2, [r2, #10]
 8017452:	3a01      	subs	r2, #1
 8017454:	4013      	ands	r3, r2
 8017456:	61fb      	str	r3, [r7, #28]
			if (csect == 0) {					/* On the cluster boundary? */
 8017458:	69fb      	ldr	r3, [r7, #28]
 801745a:	2b00      	cmp	r3, #0
 801745c:	d12f      	bne.n	80174be <f_read+0xfa>
				if (fp->fptr == 0) {			/* On the top of the file? */
 801745e:	68fb      	ldr	r3, [r7, #12]
 8017460:	699b      	ldr	r3, [r3, #24]
 8017462:	2b00      	cmp	r3, #0
 8017464:	d103      	bne.n	801746e <f_read+0xaa>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
 8017466:	68fb      	ldr	r3, [r7, #12]
 8017468:	689b      	ldr	r3, [r3, #8]
 801746a:	633b      	str	r3, [r7, #48]	; 0x30
 801746c:	e013      	b.n	8017496 <f_read+0xd2>
				} else {						/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 801746e:	68fb      	ldr	r3, [r7, #12]
 8017470:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8017472:	2b00      	cmp	r3, #0
 8017474:	d007      	beq.n	8017486 <f_read+0xc2>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 8017476:	68fb      	ldr	r3, [r7, #12]
 8017478:	699b      	ldr	r3, [r3, #24]
 801747a:	4619      	mov	r1, r3
 801747c:	68f8      	ldr	r0, [r7, #12]
 801747e:	f7fe fef9 	bl	8016274 <clmt_clust>
 8017482:	6338      	str	r0, [r7, #48]	; 0x30
 8017484:	e007      	b.n	8017496 <f_read+0xd2>
					} else
#endif
					{
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 8017486:	68fa      	ldr	r2, [r7, #12]
 8017488:	68fb      	ldr	r3, [r7, #12]
 801748a:	69db      	ldr	r3, [r3, #28]
 801748c:	4619      	mov	r1, r3
 801748e:	4610      	mov	r0, r2
 8017490:	f7fe fc67 	bl	8015d62 <get_fat>
 8017494:	6338      	str	r0, [r7, #48]	; 0x30
					}
				}
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 8017496:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017498:	2b01      	cmp	r3, #1
 801749a:	d804      	bhi.n	80174a6 <f_read+0xe2>
 801749c:	68fb      	ldr	r3, [r7, #12]
 801749e:	2202      	movs	r2, #2
 80174a0:	755a      	strb	r2, [r3, #21]
 80174a2:	2302      	movs	r3, #2
 80174a4:	e0c9      	b.n	801763a <f_read+0x276>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 80174a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80174a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80174ac:	d104      	bne.n	80174b8 <f_read+0xf4>
 80174ae:	68fb      	ldr	r3, [r7, #12]
 80174b0:	2201      	movs	r2, #1
 80174b2:	755a      	strb	r2, [r3, #21]
 80174b4:	2301      	movs	r3, #1
 80174b6:	e0c0      	b.n	801763a <f_read+0x276>
				fp->clust = clst;				/* Update current cluster */
 80174b8:	68fb      	ldr	r3, [r7, #12]
 80174ba:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80174bc:	61da      	str	r2, [r3, #28]
			}
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 80174be:	697a      	ldr	r2, [r7, #20]
 80174c0:	68fb      	ldr	r3, [r7, #12]
 80174c2:	69db      	ldr	r3, [r3, #28]
 80174c4:	4619      	mov	r1, r3
 80174c6:	4610      	mov	r0, r2
 80174c8:	f7fe fc2c 	bl	8015d24 <clust2sect>
 80174cc:	61b8      	str	r0, [r7, #24]
			if (!sect) ABORT(fs, FR_INT_ERR);
 80174ce:	69bb      	ldr	r3, [r7, #24]
 80174d0:	2b00      	cmp	r3, #0
 80174d2:	d104      	bne.n	80174de <f_read+0x11a>
 80174d4:	68fb      	ldr	r3, [r7, #12]
 80174d6:	2202      	movs	r2, #2
 80174d8:	755a      	strb	r2, [r3, #21]
 80174da:	2302      	movs	r3, #2
 80174dc:	e0ad      	b.n	801763a <f_read+0x276>
			sect += csect;
 80174de:	69ba      	ldr	r2, [r7, #24]
 80174e0:	69fb      	ldr	r3, [r7, #28]
 80174e2:	4413      	add	r3, r2
 80174e4:	61bb      	str	r3, [r7, #24]
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
 80174e6:	687b      	ldr	r3, [r7, #4]
 80174e8:	0a5b      	lsrs	r3, r3, #9
 80174ea:	62bb      	str	r3, [r7, #40]	; 0x28
			if (cc) {							/* Read maximum contiguous sectors directly */
 80174ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80174ee:	2b00      	cmp	r3, #0
 80174f0:	d039      	beq.n	8017566 <f_read+0x1a2>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 80174f2:	69fa      	ldr	r2, [r7, #28]
 80174f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80174f6:	4413      	add	r3, r2
 80174f8:	697a      	ldr	r2, [r7, #20]
 80174fa:	8952      	ldrh	r2, [r2, #10]
 80174fc:	4293      	cmp	r3, r2
 80174fe:	d905      	bls.n	801750c <f_read+0x148>
					cc = fs->csize - csect;
 8017500:	697b      	ldr	r3, [r7, #20]
 8017502:	895b      	ldrh	r3, [r3, #10]
 8017504:	461a      	mov	r2, r3
 8017506:	69fb      	ldr	r3, [r7, #28]
 8017508:	1ad3      	subs	r3, r2, r3
 801750a:	62bb      	str	r3, [r7, #40]	; 0x28
				}
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 801750c:	697b      	ldr	r3, [r7, #20]
 801750e:	7858      	ldrb	r0, [r3, #1]
 8017510:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017512:	69ba      	ldr	r2, [r7, #24]
 8017514:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8017516:	f7fe f85b 	bl	80155d0 <disk_read>
 801751a:	4603      	mov	r3, r0
 801751c:	2b00      	cmp	r3, #0
 801751e:	d004      	beq.n	801752a <f_read+0x166>
 8017520:	68fb      	ldr	r3, [r7, #12]
 8017522:	2201      	movs	r2, #1
 8017524:	755a      	strb	r2, [r3, #21]
 8017526:	2301      	movs	r3, #1
 8017528:	e087      	b.n	801763a <f_read+0x276>
#if _FS_TINY
				if (fs->wflag && fs->winsect - sect < cc) {
					mem_cpy(rbuff + ((fs->winsect - sect) * SS(fs)), fs->win, SS(fs));
				}
#else
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 801752a:	68fb      	ldr	r3, [r7, #12]
 801752c:	7d1b      	ldrb	r3, [r3, #20]
 801752e:	b25b      	sxtb	r3, r3
 8017530:	2b00      	cmp	r3, #0
 8017532:	da14      	bge.n	801755e <f_read+0x19a>
 8017534:	68fb      	ldr	r3, [r7, #12]
 8017536:	6a1a      	ldr	r2, [r3, #32]
 8017538:	69bb      	ldr	r3, [r7, #24]
 801753a:	1ad3      	subs	r3, r2, r3
 801753c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801753e:	429a      	cmp	r2, r3
 8017540:	d90d      	bls.n	801755e <f_read+0x19a>
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
 8017542:	68fb      	ldr	r3, [r7, #12]
 8017544:	6a1a      	ldr	r2, [r3, #32]
 8017546:	69bb      	ldr	r3, [r7, #24]
 8017548:	1ad3      	subs	r3, r2, r3
 801754a:	025b      	lsls	r3, r3, #9
 801754c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801754e:	18d0      	adds	r0, r2, r3
 8017550:	68fb      	ldr	r3, [r7, #12]
 8017552:	3330      	adds	r3, #48	; 0x30
 8017554:	f44f 7200 	mov.w	r2, #512	; 0x200
 8017558:	4619      	mov	r1, r3
 801755a:	f7fe f919 	bl	8015790 <mem_cpy>
				}
#endif
#endif
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
 801755e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017560:	025b      	lsls	r3, r3, #9
 8017562:	62fb      	str	r3, [r7, #44]	; 0x2c
				continue;
 8017564:	e050      	b.n	8017608 <f_read+0x244>
			}
#if !_FS_TINY
			if (fp->sect != sect) {			/* Load data sector if not in cache */
 8017566:	68fb      	ldr	r3, [r7, #12]
 8017568:	6a1b      	ldr	r3, [r3, #32]
 801756a:	69ba      	ldr	r2, [r7, #24]
 801756c:	429a      	cmp	r2, r3
 801756e:	d02e      	beq.n	80175ce <f_read+0x20a>
#if !_FS_READONLY
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 8017570:	68fb      	ldr	r3, [r7, #12]
 8017572:	7d1b      	ldrb	r3, [r3, #20]
 8017574:	b25b      	sxtb	r3, r3
 8017576:	2b00      	cmp	r3, #0
 8017578:	da18      	bge.n	80175ac <f_read+0x1e8>
					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 801757a:	697b      	ldr	r3, [r7, #20]
 801757c:	7858      	ldrb	r0, [r3, #1]
 801757e:	68fb      	ldr	r3, [r7, #12]
 8017580:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8017584:	68fb      	ldr	r3, [r7, #12]
 8017586:	6a1a      	ldr	r2, [r3, #32]
 8017588:	2301      	movs	r3, #1
 801758a:	f7fe f841 	bl	8015610 <disk_write>
 801758e:	4603      	mov	r3, r0
 8017590:	2b00      	cmp	r3, #0
 8017592:	d004      	beq.n	801759e <f_read+0x1da>
 8017594:	68fb      	ldr	r3, [r7, #12]
 8017596:	2201      	movs	r2, #1
 8017598:	755a      	strb	r2, [r3, #21]
 801759a:	2301      	movs	r3, #1
 801759c:	e04d      	b.n	801763a <f_read+0x276>
					fp->flag &= (BYTE)~FA_DIRTY;
 801759e:	68fb      	ldr	r3, [r7, #12]
 80175a0:	7d1b      	ldrb	r3, [r3, #20]
 80175a2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80175a6:	b2da      	uxtb	r2, r3
 80175a8:	68fb      	ldr	r3, [r7, #12]
 80175aa:	751a      	strb	r2, [r3, #20]
				}
#endif
				if (disk_read(fs->drv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 80175ac:	697b      	ldr	r3, [r7, #20]
 80175ae:	7858      	ldrb	r0, [r3, #1]
 80175b0:	68fb      	ldr	r3, [r7, #12]
 80175b2:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80175b6:	2301      	movs	r3, #1
 80175b8:	69ba      	ldr	r2, [r7, #24]
 80175ba:	f7fe f809 	bl	80155d0 <disk_read>
 80175be:	4603      	mov	r3, r0
 80175c0:	2b00      	cmp	r3, #0
 80175c2:	d004      	beq.n	80175ce <f_read+0x20a>
 80175c4:	68fb      	ldr	r3, [r7, #12]
 80175c6:	2201      	movs	r2, #1
 80175c8:	755a      	strb	r2, [r3, #21]
 80175ca:	2301      	movs	r3, #1
 80175cc:	e035      	b.n	801763a <f_read+0x276>
			}
#endif
			fp->sect = sect;
 80175ce:	68fb      	ldr	r3, [r7, #12]
 80175d0:	69ba      	ldr	r2, [r7, #24]
 80175d2:	621a      	str	r2, [r3, #32]
		}
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 80175d4:	68fb      	ldr	r3, [r7, #12]
 80175d6:	699b      	ldr	r3, [r3, #24]
 80175d8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80175dc:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 80175e0:	62fb      	str	r3, [r7, #44]	; 0x2c
		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
 80175e2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80175e4:	687b      	ldr	r3, [r7, #4]
 80175e6:	429a      	cmp	r2, r3
 80175e8:	d901      	bls.n	80175ee <f_read+0x22a>
 80175ea:	687b      	ldr	r3, [r7, #4]
 80175ec:	62fb      	str	r3, [r7, #44]	; 0x2c
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(rbuff, fs->win + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#else
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 80175ee:	68fb      	ldr	r3, [r7, #12]
 80175f0:	f103 0230 	add.w	r2, r3, #48	; 0x30
 80175f4:	68fb      	ldr	r3, [r7, #12]
 80175f6:	699b      	ldr	r3, [r3, #24]
 80175f8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80175fc:	4413      	add	r3, r2
 80175fe:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8017600:	4619      	mov	r1, r3
 8017602:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8017604:	f7fe f8c4 	bl	8015790 <mem_cpy>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 8017608:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801760a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801760c:	4413      	add	r3, r2
 801760e:	627b      	str	r3, [r7, #36]	; 0x24
 8017610:	68fb      	ldr	r3, [r7, #12]
 8017612:	699a      	ldr	r2, [r3, #24]
 8017614:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017616:	441a      	add	r2, r3
 8017618:	68fb      	ldr	r3, [r7, #12]
 801761a:	619a      	str	r2, [r3, #24]
 801761c:	683b      	ldr	r3, [r7, #0]
 801761e:	681a      	ldr	r2, [r3, #0]
 8017620:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017622:	441a      	add	r2, r3
 8017624:	683b      	ldr	r3, [r7, #0]
 8017626:	601a      	str	r2, [r3, #0]
 8017628:	687a      	ldr	r2, [r7, #4]
 801762a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801762c:	1ad3      	subs	r3, r2, r3
 801762e:	607b      	str	r3, [r7, #4]
	for ( ;  btr;								/* Repeat until all data read */
 8017630:	687b      	ldr	r3, [r7, #4]
 8017632:	2b00      	cmp	r3, #0
 8017634:	f47f af01 	bne.w	801743a <f_read+0x76>
#endif
	}

	LEAVE_FF(fs, FR_OK);
 8017638:	2300      	movs	r3, #0
}
 801763a:	4618      	mov	r0, r3
 801763c:	3738      	adds	r7, #56	; 0x38
 801763e:	46bd      	mov	sp, r7
 8017640:	bd80      	pop	{r7, pc}

08017642 <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 8017642:	b580      	push	{r7, lr}
 8017644:	b08c      	sub	sp, #48	; 0x30
 8017646:	af00      	add	r7, sp, #0
 8017648:	60f8      	str	r0, [r7, #12]
 801764a:	60b9      	str	r1, [r7, #8]
 801764c:	607a      	str	r2, [r7, #4]
 801764e:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 8017650:	68bb      	ldr	r3, [r7, #8]
 8017652:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 8017654:	683b      	ldr	r3, [r7, #0]
 8017656:	2200      	movs	r2, #0
 8017658:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 801765a:	68fb      	ldr	r3, [r7, #12]
 801765c:	f107 0210 	add.w	r2, r7, #16
 8017660:	4611      	mov	r1, r2
 8017662:	4618      	mov	r0, r3
 8017664:	f7ff fc74 	bl	8016f50 <validate>
 8017668:	4603      	mov	r3, r0
 801766a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 801766e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8017672:	2b00      	cmp	r3, #0
 8017674:	d107      	bne.n	8017686 <f_write+0x44>
 8017676:	68fb      	ldr	r3, [r7, #12]
 8017678:	7d5b      	ldrb	r3, [r3, #21]
 801767a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 801767e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8017682:	2b00      	cmp	r3, #0
 8017684:	d002      	beq.n	801768c <f_write+0x4a>
 8017686:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 801768a:	e14b      	b.n	8017924 <f_write+0x2e2>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 801768c:	68fb      	ldr	r3, [r7, #12]
 801768e:	7d1b      	ldrb	r3, [r3, #20]
 8017690:	f003 0302 	and.w	r3, r3, #2
 8017694:	2b00      	cmp	r3, #0
 8017696:	d101      	bne.n	801769c <f_write+0x5a>
 8017698:	2307      	movs	r3, #7
 801769a:	e143      	b.n	8017924 <f_write+0x2e2>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 801769c:	68fb      	ldr	r3, [r7, #12]
 801769e:	699a      	ldr	r2, [r3, #24]
 80176a0:	687b      	ldr	r3, [r7, #4]
 80176a2:	441a      	add	r2, r3
 80176a4:	68fb      	ldr	r3, [r7, #12]
 80176a6:	699b      	ldr	r3, [r3, #24]
 80176a8:	429a      	cmp	r2, r3
 80176aa:	f080 812d 	bcs.w	8017908 <f_write+0x2c6>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 80176ae:	68fb      	ldr	r3, [r7, #12]
 80176b0:	699b      	ldr	r3, [r3, #24]
 80176b2:	43db      	mvns	r3, r3
 80176b4:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 80176b6:	e127      	b.n	8017908 <f_write+0x2c6>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 80176b8:	68fb      	ldr	r3, [r7, #12]
 80176ba:	699b      	ldr	r3, [r3, #24]
 80176bc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80176c0:	2b00      	cmp	r3, #0
 80176c2:	f040 80e3 	bne.w	801788c <f_write+0x24a>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 80176c6:	68fb      	ldr	r3, [r7, #12]
 80176c8:	699b      	ldr	r3, [r3, #24]
 80176ca:	0a5b      	lsrs	r3, r3, #9
 80176cc:	693a      	ldr	r2, [r7, #16]
 80176ce:	8952      	ldrh	r2, [r2, #10]
 80176d0:	3a01      	subs	r2, #1
 80176d2:	4013      	ands	r3, r2
 80176d4:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 80176d6:	69bb      	ldr	r3, [r7, #24]
 80176d8:	2b00      	cmp	r3, #0
 80176da:	d143      	bne.n	8017764 <f_write+0x122>
				if (fp->fptr == 0) {		/* On the top of the file? */
 80176dc:	68fb      	ldr	r3, [r7, #12]
 80176de:	699b      	ldr	r3, [r3, #24]
 80176e0:	2b00      	cmp	r3, #0
 80176e2:	d10c      	bne.n	80176fe <f_write+0xbc>
					clst = fp->obj.sclust;	/* Follow from the origin */
 80176e4:	68fb      	ldr	r3, [r7, #12]
 80176e6:	689b      	ldr	r3, [r3, #8]
 80176e8:	62bb      	str	r3, [r7, #40]	; 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 80176ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80176ec:	2b00      	cmp	r3, #0
 80176ee:	d11a      	bne.n	8017726 <f_write+0xe4>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 80176f0:	68fb      	ldr	r3, [r7, #12]
 80176f2:	2100      	movs	r1, #0
 80176f4:	4618      	mov	r0, r3
 80176f6:	f7fe fd25 	bl	8016144 <create_chain>
 80176fa:	62b8      	str	r0, [r7, #40]	; 0x28
 80176fc:	e013      	b.n	8017726 <f_write+0xe4>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 80176fe:	68fb      	ldr	r3, [r7, #12]
 8017700:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8017702:	2b00      	cmp	r3, #0
 8017704:	d007      	beq.n	8017716 <f_write+0xd4>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 8017706:	68fb      	ldr	r3, [r7, #12]
 8017708:	699b      	ldr	r3, [r3, #24]
 801770a:	4619      	mov	r1, r3
 801770c:	68f8      	ldr	r0, [r7, #12]
 801770e:	f7fe fdb1 	bl	8016274 <clmt_clust>
 8017712:	62b8      	str	r0, [r7, #40]	; 0x28
 8017714:	e007      	b.n	8017726 <f_write+0xe4>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 8017716:	68fa      	ldr	r2, [r7, #12]
 8017718:	68fb      	ldr	r3, [r7, #12]
 801771a:	69db      	ldr	r3, [r3, #28]
 801771c:	4619      	mov	r1, r3
 801771e:	4610      	mov	r0, r2
 8017720:	f7fe fd10 	bl	8016144 <create_chain>
 8017724:	62b8      	str	r0, [r7, #40]	; 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8017726:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017728:	2b00      	cmp	r3, #0
 801772a:	f000 80f2 	beq.w	8017912 <f_write+0x2d0>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 801772e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017730:	2b01      	cmp	r3, #1
 8017732:	d104      	bne.n	801773e <f_write+0xfc>
 8017734:	68fb      	ldr	r3, [r7, #12]
 8017736:	2202      	movs	r2, #2
 8017738:	755a      	strb	r2, [r3, #21]
 801773a:	2302      	movs	r3, #2
 801773c:	e0f2      	b.n	8017924 <f_write+0x2e2>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 801773e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017740:	f1b3 3fff 	cmp.w	r3, #4294967295
 8017744:	d104      	bne.n	8017750 <f_write+0x10e>
 8017746:	68fb      	ldr	r3, [r7, #12]
 8017748:	2201      	movs	r2, #1
 801774a:	755a      	strb	r2, [r3, #21]
 801774c:	2301      	movs	r3, #1
 801774e:	e0e9      	b.n	8017924 <f_write+0x2e2>
				fp->clust = clst;			/* Update current cluster */
 8017750:	68fb      	ldr	r3, [r7, #12]
 8017752:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8017754:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 8017756:	68fb      	ldr	r3, [r7, #12]
 8017758:	689b      	ldr	r3, [r3, #8]
 801775a:	2b00      	cmp	r3, #0
 801775c:	d102      	bne.n	8017764 <f_write+0x122>
 801775e:	68fb      	ldr	r3, [r7, #12]
 8017760:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8017762:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 8017764:	68fb      	ldr	r3, [r7, #12]
 8017766:	7d1b      	ldrb	r3, [r3, #20]
 8017768:	b25b      	sxtb	r3, r3
 801776a:	2b00      	cmp	r3, #0
 801776c:	da18      	bge.n	80177a0 <f_write+0x15e>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 801776e:	693b      	ldr	r3, [r7, #16]
 8017770:	7858      	ldrb	r0, [r3, #1]
 8017772:	68fb      	ldr	r3, [r7, #12]
 8017774:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8017778:	68fb      	ldr	r3, [r7, #12]
 801777a:	6a1a      	ldr	r2, [r3, #32]
 801777c:	2301      	movs	r3, #1
 801777e:	f7fd ff47 	bl	8015610 <disk_write>
 8017782:	4603      	mov	r3, r0
 8017784:	2b00      	cmp	r3, #0
 8017786:	d004      	beq.n	8017792 <f_write+0x150>
 8017788:	68fb      	ldr	r3, [r7, #12]
 801778a:	2201      	movs	r2, #1
 801778c:	755a      	strb	r2, [r3, #21]
 801778e:	2301      	movs	r3, #1
 8017790:	e0c8      	b.n	8017924 <f_write+0x2e2>
				fp->flag &= (BYTE)~FA_DIRTY;
 8017792:	68fb      	ldr	r3, [r7, #12]
 8017794:	7d1b      	ldrb	r3, [r3, #20]
 8017796:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801779a:	b2da      	uxtb	r2, r3
 801779c:	68fb      	ldr	r3, [r7, #12]
 801779e:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 80177a0:	693a      	ldr	r2, [r7, #16]
 80177a2:	68fb      	ldr	r3, [r7, #12]
 80177a4:	69db      	ldr	r3, [r3, #28]
 80177a6:	4619      	mov	r1, r3
 80177a8:	4610      	mov	r0, r2
 80177aa:	f7fe fabb 	bl	8015d24 <clust2sect>
 80177ae:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 80177b0:	697b      	ldr	r3, [r7, #20]
 80177b2:	2b00      	cmp	r3, #0
 80177b4:	d104      	bne.n	80177c0 <f_write+0x17e>
 80177b6:	68fb      	ldr	r3, [r7, #12]
 80177b8:	2202      	movs	r2, #2
 80177ba:	755a      	strb	r2, [r3, #21]
 80177bc:	2302      	movs	r3, #2
 80177be:	e0b1      	b.n	8017924 <f_write+0x2e2>
			sect += csect;
 80177c0:	697a      	ldr	r2, [r7, #20]
 80177c2:	69bb      	ldr	r3, [r7, #24]
 80177c4:	4413      	add	r3, r2
 80177c6:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 80177c8:	687b      	ldr	r3, [r7, #4]
 80177ca:	0a5b      	lsrs	r3, r3, #9
 80177cc:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 80177ce:	6a3b      	ldr	r3, [r7, #32]
 80177d0:	2b00      	cmp	r3, #0
 80177d2:	d03c      	beq.n	801784e <f_write+0x20c>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 80177d4:	69ba      	ldr	r2, [r7, #24]
 80177d6:	6a3b      	ldr	r3, [r7, #32]
 80177d8:	4413      	add	r3, r2
 80177da:	693a      	ldr	r2, [r7, #16]
 80177dc:	8952      	ldrh	r2, [r2, #10]
 80177de:	4293      	cmp	r3, r2
 80177e0:	d905      	bls.n	80177ee <f_write+0x1ac>
					cc = fs->csize - csect;
 80177e2:	693b      	ldr	r3, [r7, #16]
 80177e4:	895b      	ldrh	r3, [r3, #10]
 80177e6:	461a      	mov	r2, r3
 80177e8:	69bb      	ldr	r3, [r7, #24]
 80177ea:	1ad3      	subs	r3, r2, r3
 80177ec:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 80177ee:	693b      	ldr	r3, [r7, #16]
 80177f0:	7858      	ldrb	r0, [r3, #1]
 80177f2:	6a3b      	ldr	r3, [r7, #32]
 80177f4:	697a      	ldr	r2, [r7, #20]
 80177f6:	69f9      	ldr	r1, [r7, #28]
 80177f8:	f7fd ff0a 	bl	8015610 <disk_write>
 80177fc:	4603      	mov	r3, r0
 80177fe:	2b00      	cmp	r3, #0
 8017800:	d004      	beq.n	801780c <f_write+0x1ca>
 8017802:	68fb      	ldr	r3, [r7, #12]
 8017804:	2201      	movs	r2, #1
 8017806:	755a      	strb	r2, [r3, #21]
 8017808:	2301      	movs	r3, #1
 801780a:	e08b      	b.n	8017924 <f_write+0x2e2>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 801780c:	68fb      	ldr	r3, [r7, #12]
 801780e:	6a1a      	ldr	r2, [r3, #32]
 8017810:	697b      	ldr	r3, [r7, #20]
 8017812:	1ad3      	subs	r3, r2, r3
 8017814:	6a3a      	ldr	r2, [r7, #32]
 8017816:	429a      	cmp	r2, r3
 8017818:	d915      	bls.n	8017846 <f_write+0x204>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 801781a:	68fb      	ldr	r3, [r7, #12]
 801781c:	f103 0030 	add.w	r0, r3, #48	; 0x30
 8017820:	68fb      	ldr	r3, [r7, #12]
 8017822:	6a1a      	ldr	r2, [r3, #32]
 8017824:	697b      	ldr	r3, [r7, #20]
 8017826:	1ad3      	subs	r3, r2, r3
 8017828:	025b      	lsls	r3, r3, #9
 801782a:	69fa      	ldr	r2, [r7, #28]
 801782c:	4413      	add	r3, r2
 801782e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8017832:	4619      	mov	r1, r3
 8017834:	f7fd ffac 	bl	8015790 <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 8017838:	68fb      	ldr	r3, [r7, #12]
 801783a:	7d1b      	ldrb	r3, [r3, #20]
 801783c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8017840:	b2da      	uxtb	r2, r3
 8017842:	68fb      	ldr	r3, [r7, #12]
 8017844:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 8017846:	6a3b      	ldr	r3, [r7, #32]
 8017848:	025b      	lsls	r3, r3, #9
 801784a:	627b      	str	r3, [r7, #36]	; 0x24
				continue;
 801784c:	e03f      	b.n	80178ce <f_write+0x28c>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 801784e:	68fb      	ldr	r3, [r7, #12]
 8017850:	6a1b      	ldr	r3, [r3, #32]
 8017852:	697a      	ldr	r2, [r7, #20]
 8017854:	429a      	cmp	r2, r3
 8017856:	d016      	beq.n	8017886 <f_write+0x244>
				fp->fptr < fp->obj.objsize &&
 8017858:	68fb      	ldr	r3, [r7, #12]
 801785a:	699a      	ldr	r2, [r3, #24]
 801785c:	68fb      	ldr	r3, [r7, #12]
 801785e:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8017860:	429a      	cmp	r2, r3
 8017862:	d210      	bcs.n	8017886 <f_write+0x244>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 8017864:	693b      	ldr	r3, [r7, #16]
 8017866:	7858      	ldrb	r0, [r3, #1]
 8017868:	68fb      	ldr	r3, [r7, #12]
 801786a:	f103 0130 	add.w	r1, r3, #48	; 0x30
 801786e:	2301      	movs	r3, #1
 8017870:	697a      	ldr	r2, [r7, #20]
 8017872:	f7fd fead 	bl	80155d0 <disk_read>
 8017876:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 8017878:	2b00      	cmp	r3, #0
 801787a:	d004      	beq.n	8017886 <f_write+0x244>
					ABORT(fs, FR_DISK_ERR);
 801787c:	68fb      	ldr	r3, [r7, #12]
 801787e:	2201      	movs	r2, #1
 8017880:	755a      	strb	r2, [r3, #21]
 8017882:	2301      	movs	r3, #1
 8017884:	e04e      	b.n	8017924 <f_write+0x2e2>
			}
#endif
			fp->sect = sect;
 8017886:	68fb      	ldr	r3, [r7, #12]
 8017888:	697a      	ldr	r2, [r7, #20]
 801788a:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 801788c:	68fb      	ldr	r3, [r7, #12]
 801788e:	699b      	ldr	r3, [r3, #24]
 8017890:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8017894:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 8017898:	627b      	str	r3, [r7, #36]	; 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 801789a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801789c:	687b      	ldr	r3, [r7, #4]
 801789e:	429a      	cmp	r2, r3
 80178a0:	d901      	bls.n	80178a6 <f_write+0x264>
 80178a2:	687b      	ldr	r3, [r7, #4]
 80178a4:	627b      	str	r3, [r7, #36]	; 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 80178a6:	68fb      	ldr	r3, [r7, #12]
 80178a8:	f103 0230 	add.w	r2, r3, #48	; 0x30
 80178ac:	68fb      	ldr	r3, [r7, #12]
 80178ae:	699b      	ldr	r3, [r3, #24]
 80178b0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80178b4:	4413      	add	r3, r2
 80178b6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80178b8:	69f9      	ldr	r1, [r7, #28]
 80178ba:	4618      	mov	r0, r3
 80178bc:	f7fd ff68 	bl	8015790 <mem_cpy>
		fp->flag |= FA_DIRTY;
 80178c0:	68fb      	ldr	r3, [r7, #12]
 80178c2:	7d1b      	ldrb	r3, [r3, #20]
 80178c4:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80178c8:	b2da      	uxtb	r2, r3
 80178ca:	68fb      	ldr	r3, [r7, #12]
 80178cc:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 80178ce:	69fa      	ldr	r2, [r7, #28]
 80178d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80178d2:	4413      	add	r3, r2
 80178d4:	61fb      	str	r3, [r7, #28]
 80178d6:	68fb      	ldr	r3, [r7, #12]
 80178d8:	699a      	ldr	r2, [r3, #24]
 80178da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80178dc:	441a      	add	r2, r3
 80178de:	68fb      	ldr	r3, [r7, #12]
 80178e0:	619a      	str	r2, [r3, #24]
 80178e2:	68fb      	ldr	r3, [r7, #12]
 80178e4:	68da      	ldr	r2, [r3, #12]
 80178e6:	68fb      	ldr	r3, [r7, #12]
 80178e8:	699b      	ldr	r3, [r3, #24]
 80178ea:	429a      	cmp	r2, r3
 80178ec:	bf38      	it	cc
 80178ee:	461a      	movcc	r2, r3
 80178f0:	68fb      	ldr	r3, [r7, #12]
 80178f2:	60da      	str	r2, [r3, #12]
 80178f4:	683b      	ldr	r3, [r7, #0]
 80178f6:	681a      	ldr	r2, [r3, #0]
 80178f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80178fa:	441a      	add	r2, r3
 80178fc:	683b      	ldr	r3, [r7, #0]
 80178fe:	601a      	str	r2, [r3, #0]
 8017900:	687a      	ldr	r2, [r7, #4]
 8017902:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017904:	1ad3      	subs	r3, r2, r3
 8017906:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 8017908:	687b      	ldr	r3, [r7, #4]
 801790a:	2b00      	cmp	r3, #0
 801790c:	f47f aed4 	bne.w	80176b8 <f_write+0x76>
 8017910:	e000      	b.n	8017914 <f_write+0x2d2>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8017912:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 8017914:	68fb      	ldr	r3, [r7, #12]
 8017916:	7d1b      	ldrb	r3, [r3, #20]
 8017918:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801791c:	b2da      	uxtb	r2, r3
 801791e:	68fb      	ldr	r3, [r7, #12]
 8017920:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 8017922:	2300      	movs	r3, #0
}
 8017924:	4618      	mov	r0, r3
 8017926:	3730      	adds	r7, #48	; 0x30
 8017928:	46bd      	mov	sp, r7
 801792a:	bd80      	pop	{r7, pc}

0801792c <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 801792c:	b580      	push	{r7, lr}
 801792e:	b086      	sub	sp, #24
 8017930:	af00      	add	r7, sp, #0
 8017932:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 8017934:	687b      	ldr	r3, [r7, #4]
 8017936:	f107 0208 	add.w	r2, r7, #8
 801793a:	4611      	mov	r1, r2
 801793c:	4618      	mov	r0, r3
 801793e:	f7ff fb07 	bl	8016f50 <validate>
 8017942:	4603      	mov	r3, r0
 8017944:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8017946:	7dfb      	ldrb	r3, [r7, #23]
 8017948:	2b00      	cmp	r3, #0
 801794a:	d168      	bne.n	8017a1e <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 801794c:	687b      	ldr	r3, [r7, #4]
 801794e:	7d1b      	ldrb	r3, [r3, #20]
 8017950:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8017954:	2b00      	cmp	r3, #0
 8017956:	d062      	beq.n	8017a1e <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 8017958:	687b      	ldr	r3, [r7, #4]
 801795a:	7d1b      	ldrb	r3, [r3, #20]
 801795c:	b25b      	sxtb	r3, r3
 801795e:	2b00      	cmp	r3, #0
 8017960:	da15      	bge.n	801798e <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 8017962:	68bb      	ldr	r3, [r7, #8]
 8017964:	7858      	ldrb	r0, [r3, #1]
 8017966:	687b      	ldr	r3, [r7, #4]
 8017968:	f103 0130 	add.w	r1, r3, #48	; 0x30
 801796c:	687b      	ldr	r3, [r7, #4]
 801796e:	6a1a      	ldr	r2, [r3, #32]
 8017970:	2301      	movs	r3, #1
 8017972:	f7fd fe4d 	bl	8015610 <disk_write>
 8017976:	4603      	mov	r3, r0
 8017978:	2b00      	cmp	r3, #0
 801797a:	d001      	beq.n	8017980 <f_sync+0x54>
 801797c:	2301      	movs	r3, #1
 801797e:	e04f      	b.n	8017a20 <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 8017980:	687b      	ldr	r3, [r7, #4]
 8017982:	7d1b      	ldrb	r3, [r3, #20]
 8017984:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8017988:	b2da      	uxtb	r2, r3
 801798a:	687b      	ldr	r3, [r7, #4]
 801798c:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 801798e:	f7fa fce1 	bl	8012354 <get_fattime>
 8017992:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 8017994:	68ba      	ldr	r2, [r7, #8]
 8017996:	687b      	ldr	r3, [r7, #4]
 8017998:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801799a:	4619      	mov	r1, r3
 801799c:	4610      	mov	r0, r2
 801799e:	f7fe f925 	bl	8015bec <move_window>
 80179a2:	4603      	mov	r3, r0
 80179a4:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 80179a6:	7dfb      	ldrb	r3, [r7, #23]
 80179a8:	2b00      	cmp	r3, #0
 80179aa:	d138      	bne.n	8017a1e <f_sync+0xf2>
					dir = fp->dir_ptr;
 80179ac:	687b      	ldr	r3, [r7, #4]
 80179ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80179b0:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 80179b2:	68fb      	ldr	r3, [r7, #12]
 80179b4:	330b      	adds	r3, #11
 80179b6:	781a      	ldrb	r2, [r3, #0]
 80179b8:	68fb      	ldr	r3, [r7, #12]
 80179ba:	330b      	adds	r3, #11
 80179bc:	f042 0220 	orr.w	r2, r2, #32
 80179c0:	b2d2      	uxtb	r2, r2
 80179c2:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 80179c4:	687b      	ldr	r3, [r7, #4]
 80179c6:	6818      	ldr	r0, [r3, #0]
 80179c8:	687b      	ldr	r3, [r7, #4]
 80179ca:	689b      	ldr	r3, [r3, #8]
 80179cc:	461a      	mov	r2, r3
 80179ce:	68f9      	ldr	r1, [r7, #12]
 80179d0:	f7fe fe2a 	bl	8016628 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 80179d4:	68fb      	ldr	r3, [r7, #12]
 80179d6:	f103 021c 	add.w	r2, r3, #28
 80179da:	687b      	ldr	r3, [r7, #4]
 80179dc:	68db      	ldr	r3, [r3, #12]
 80179de:	4619      	mov	r1, r3
 80179e0:	4610      	mov	r0, r2
 80179e2:	f7fd fea9 	bl	8015738 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 80179e6:	68fb      	ldr	r3, [r7, #12]
 80179e8:	3316      	adds	r3, #22
 80179ea:	6939      	ldr	r1, [r7, #16]
 80179ec:	4618      	mov	r0, r3
 80179ee:	f7fd fea3 	bl	8015738 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 80179f2:	68fb      	ldr	r3, [r7, #12]
 80179f4:	3312      	adds	r3, #18
 80179f6:	2100      	movs	r1, #0
 80179f8:	4618      	mov	r0, r3
 80179fa:	f7fd fe82 	bl	8015702 <st_word>
					fs->wflag = 1;
 80179fe:	68bb      	ldr	r3, [r7, #8]
 8017a00:	2201      	movs	r2, #1
 8017a02:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 8017a04:	68bb      	ldr	r3, [r7, #8]
 8017a06:	4618      	mov	r0, r3
 8017a08:	f7fe f91e 	bl	8015c48 <sync_fs>
 8017a0c:	4603      	mov	r3, r0
 8017a0e:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 8017a10:	687b      	ldr	r3, [r7, #4]
 8017a12:	7d1b      	ldrb	r3, [r3, #20]
 8017a14:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8017a18:	b2da      	uxtb	r2, r3
 8017a1a:	687b      	ldr	r3, [r7, #4]
 8017a1c:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 8017a1e:	7dfb      	ldrb	r3, [r7, #23]
}
 8017a20:	4618      	mov	r0, r3
 8017a22:	3718      	adds	r7, #24
 8017a24:	46bd      	mov	sp, r7
 8017a26:	bd80      	pop	{r7, pc}

08017a28 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 8017a28:	b580      	push	{r7, lr}
 8017a2a:	b084      	sub	sp, #16
 8017a2c:	af00      	add	r7, sp, #0
 8017a2e:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 8017a30:	6878      	ldr	r0, [r7, #4]
 8017a32:	f7ff ff7b 	bl	801792c <f_sync>
 8017a36:	4603      	mov	r3, r0
 8017a38:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 8017a3a:	7bfb      	ldrb	r3, [r7, #15]
 8017a3c:	2b00      	cmp	r3, #0
 8017a3e:	d118      	bne.n	8017a72 <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 8017a40:	687b      	ldr	r3, [r7, #4]
 8017a42:	f107 0208 	add.w	r2, r7, #8
 8017a46:	4611      	mov	r1, r2
 8017a48:	4618      	mov	r0, r3
 8017a4a:	f7ff fa81 	bl	8016f50 <validate>
 8017a4e:	4603      	mov	r3, r0
 8017a50:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8017a52:	7bfb      	ldrb	r3, [r7, #15]
 8017a54:	2b00      	cmp	r3, #0
 8017a56:	d10c      	bne.n	8017a72 <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 8017a58:	687b      	ldr	r3, [r7, #4]
 8017a5a:	691b      	ldr	r3, [r3, #16]
 8017a5c:	4618      	mov	r0, r3
 8017a5e:	f7fe f821 	bl	8015aa4 <dec_lock>
 8017a62:	4603      	mov	r3, r0
 8017a64:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 8017a66:	7bfb      	ldrb	r3, [r7, #15]
 8017a68:	2b00      	cmp	r3, #0
 8017a6a:	d102      	bne.n	8017a72 <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 8017a6c:	687b      	ldr	r3, [r7, #4]
 8017a6e:	2200      	movs	r2, #0
 8017a70:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 8017a72:	7bfb      	ldrb	r3, [r7, #15]
}
 8017a74:	4618      	mov	r0, r3
 8017a76:	3710      	adds	r7, #16
 8017a78:	46bd      	mov	sp, r7
 8017a7a:	bd80      	pop	{r7, pc}

08017a7c <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8017a7c:	b480      	push	{r7}
 8017a7e:	b087      	sub	sp, #28
 8017a80:	af00      	add	r7, sp, #0
 8017a82:	60f8      	str	r0, [r7, #12]
 8017a84:	60b9      	str	r1, [r7, #8]
 8017a86:	4613      	mov	r3, r2
 8017a88:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 8017a8a:	2301      	movs	r3, #1
 8017a8c:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 8017a8e:	2300      	movs	r3, #0
 8017a90:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 8017a92:	4b1f      	ldr	r3, [pc, #124]	; (8017b10 <FATFS_LinkDriverEx+0x94>)
 8017a94:	7a5b      	ldrb	r3, [r3, #9]
 8017a96:	b2db      	uxtb	r3, r3
 8017a98:	2b00      	cmp	r3, #0
 8017a9a:	d131      	bne.n	8017b00 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8017a9c:	4b1c      	ldr	r3, [pc, #112]	; (8017b10 <FATFS_LinkDriverEx+0x94>)
 8017a9e:	7a5b      	ldrb	r3, [r3, #9]
 8017aa0:	b2db      	uxtb	r3, r3
 8017aa2:	461a      	mov	r2, r3
 8017aa4:	4b1a      	ldr	r3, [pc, #104]	; (8017b10 <FATFS_LinkDriverEx+0x94>)
 8017aa6:	2100      	movs	r1, #0
 8017aa8:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 8017aaa:	4b19      	ldr	r3, [pc, #100]	; (8017b10 <FATFS_LinkDriverEx+0x94>)
 8017aac:	7a5b      	ldrb	r3, [r3, #9]
 8017aae:	b2db      	uxtb	r3, r3
 8017ab0:	4a17      	ldr	r2, [pc, #92]	; (8017b10 <FATFS_LinkDriverEx+0x94>)
 8017ab2:	009b      	lsls	r3, r3, #2
 8017ab4:	4413      	add	r3, r2
 8017ab6:	68fa      	ldr	r2, [r7, #12]
 8017ab8:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 8017aba:	4b15      	ldr	r3, [pc, #84]	; (8017b10 <FATFS_LinkDriverEx+0x94>)
 8017abc:	7a5b      	ldrb	r3, [r3, #9]
 8017abe:	b2db      	uxtb	r3, r3
 8017ac0:	461a      	mov	r2, r3
 8017ac2:	4b13      	ldr	r3, [pc, #76]	; (8017b10 <FATFS_LinkDriverEx+0x94>)
 8017ac4:	4413      	add	r3, r2
 8017ac6:	79fa      	ldrb	r2, [r7, #7]
 8017ac8:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 8017aca:	4b11      	ldr	r3, [pc, #68]	; (8017b10 <FATFS_LinkDriverEx+0x94>)
 8017acc:	7a5b      	ldrb	r3, [r3, #9]
 8017ace:	b2db      	uxtb	r3, r3
 8017ad0:	1c5a      	adds	r2, r3, #1
 8017ad2:	b2d1      	uxtb	r1, r2
 8017ad4:	4a0e      	ldr	r2, [pc, #56]	; (8017b10 <FATFS_LinkDriverEx+0x94>)
 8017ad6:	7251      	strb	r1, [r2, #9]
 8017ad8:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 8017ada:	7dbb      	ldrb	r3, [r7, #22]
 8017adc:	3330      	adds	r3, #48	; 0x30
 8017ade:	b2da      	uxtb	r2, r3
 8017ae0:	68bb      	ldr	r3, [r7, #8]
 8017ae2:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8017ae4:	68bb      	ldr	r3, [r7, #8]
 8017ae6:	3301      	adds	r3, #1
 8017ae8:	223a      	movs	r2, #58	; 0x3a
 8017aea:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8017aec:	68bb      	ldr	r3, [r7, #8]
 8017aee:	3302      	adds	r3, #2
 8017af0:	222f      	movs	r2, #47	; 0x2f
 8017af2:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8017af4:	68bb      	ldr	r3, [r7, #8]
 8017af6:	3303      	adds	r3, #3
 8017af8:	2200      	movs	r2, #0
 8017afa:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8017afc:	2300      	movs	r3, #0
 8017afe:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 8017b00:	7dfb      	ldrb	r3, [r7, #23]
}
 8017b02:	4618      	mov	r0, r3
 8017b04:	371c      	adds	r7, #28
 8017b06:	46bd      	mov	sp, r7
 8017b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017b0c:	4770      	bx	lr
 8017b0e:	bf00      	nop
 8017b10:	24000b78 	.word	0x24000b78

08017b14 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 8017b14:	b580      	push	{r7, lr}
 8017b16:	b082      	sub	sp, #8
 8017b18:	af00      	add	r7, sp, #0
 8017b1a:	6078      	str	r0, [r7, #4]
 8017b1c:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 8017b1e:	2200      	movs	r2, #0
 8017b20:	6839      	ldr	r1, [r7, #0]
 8017b22:	6878      	ldr	r0, [r7, #4]
 8017b24:	f7ff ffaa 	bl	8017a7c <FATFS_LinkDriverEx>
 8017b28:	4603      	mov	r3, r0
}
 8017b2a:	4618      	mov	r0, r3
 8017b2c:	3708      	adds	r7, #8
 8017b2e:	46bd      	mov	sp, r7
 8017b30:	bd80      	pop	{r7, pc}
	...

08017b34 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8017b34:	b580      	push	{r7, lr}
 8017b36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8017b38:	2200      	movs	r2, #0
 8017b3a:	4913      	ldr	r1, [pc, #76]	; (8017b88 <MX_USB_DEVICE_Init+0x54>)
 8017b3c:	4813      	ldr	r0, [pc, #76]	; (8017b8c <MX_USB_DEVICE_Init+0x58>)
 8017b3e:	f7fc fc20 	bl	8014382 <USBD_Init>
 8017b42:	4603      	mov	r3, r0
 8017b44:	2b00      	cmp	r3, #0
 8017b46:	d001      	beq.n	8017b4c <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8017b48:	f7eb f8ee 	bl	8002d28 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_MSC) != USBD_OK)
 8017b4c:	4910      	ldr	r1, [pc, #64]	; (8017b90 <MX_USB_DEVICE_Init+0x5c>)
 8017b4e:	480f      	ldr	r0, [pc, #60]	; (8017b8c <MX_USB_DEVICE_Init+0x58>)
 8017b50:	f7fc fc4d 	bl	80143ee <USBD_RegisterClass>
 8017b54:	4603      	mov	r3, r0
 8017b56:	2b00      	cmp	r3, #0
 8017b58:	d001      	beq.n	8017b5e <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8017b5a:	f7eb f8e5 	bl	8002d28 <Error_Handler>
  }
  if (USBD_MSC_RegisterStorage(&hUsbDeviceFS, &USBD_Storage_Interface_fops_FS) != USBD_OK)
 8017b5e:	490d      	ldr	r1, [pc, #52]	; (8017b94 <MX_USB_DEVICE_Init+0x60>)
 8017b60:	480a      	ldr	r0, [pc, #40]	; (8017b8c <MX_USB_DEVICE_Init+0x58>)
 8017b62:	f7fa fff7 	bl	8012b54 <USBD_MSC_RegisterStorage>
 8017b66:	4603      	mov	r3, r0
 8017b68:	2b00      	cmp	r3, #0
 8017b6a:	d001      	beq.n	8017b70 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8017b6c:	f7eb f8dc 	bl	8002d28 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8017b70:	4806      	ldr	r0, [pc, #24]	; (8017b8c <MX_USB_DEVICE_Init+0x58>)
 8017b72:	f7fc fc5d 	bl	8014430 <USBD_Start>
 8017b76:	4603      	mov	r3, r0
 8017b78:	2b00      	cmp	r3, #0
 8017b7a:	d001      	beq.n	8017b80 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8017b7c:	f7eb f8d4 	bl	8002d28 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */
  HAL_PWREx_EnableUSBVoltageDetector();
 8017b80:	f7f0 fe2e 	bl	80087e0 <HAL_PWREx_EnableUSBVoltageDetector>

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8017b84:	bf00      	nop
 8017b86:	bd80      	pop	{r7, pc}
 8017b88:	24000104 	.word	0x24000104
 8017b8c:	24001bac 	.word	0x24001bac
 8017b90:	2400001c 	.word	0x2400001c
 8017b94:	24000154 	.word	0x24000154

08017b98 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8017b98:	b480      	push	{r7}
 8017b9a:	b083      	sub	sp, #12
 8017b9c:	af00      	add	r7, sp, #0
 8017b9e:	4603      	mov	r3, r0
 8017ba0:	6039      	str	r1, [r7, #0]
 8017ba2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8017ba4:	683b      	ldr	r3, [r7, #0]
 8017ba6:	2212      	movs	r2, #18
 8017ba8:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8017baa:	4b03      	ldr	r3, [pc, #12]	; (8017bb8 <USBD_FS_DeviceDescriptor+0x20>)
}
 8017bac:	4618      	mov	r0, r3
 8017bae:	370c      	adds	r7, #12
 8017bb0:	46bd      	mov	sp, r7
 8017bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017bb6:	4770      	bx	lr
 8017bb8:	24000120 	.word	0x24000120

08017bbc <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8017bbc:	b480      	push	{r7}
 8017bbe:	b083      	sub	sp, #12
 8017bc0:	af00      	add	r7, sp, #0
 8017bc2:	4603      	mov	r3, r0
 8017bc4:	6039      	str	r1, [r7, #0]
 8017bc6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8017bc8:	683b      	ldr	r3, [r7, #0]
 8017bca:	2204      	movs	r2, #4
 8017bcc:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8017bce:	4b03      	ldr	r3, [pc, #12]	; (8017bdc <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8017bd0:	4618      	mov	r0, r3
 8017bd2:	370c      	adds	r7, #12
 8017bd4:	46bd      	mov	sp, r7
 8017bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017bda:	4770      	bx	lr
 8017bdc:	24000134 	.word	0x24000134

08017be0 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8017be0:	b580      	push	{r7, lr}
 8017be2:	b082      	sub	sp, #8
 8017be4:	af00      	add	r7, sp, #0
 8017be6:	4603      	mov	r3, r0
 8017be8:	6039      	str	r1, [r7, #0]
 8017bea:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8017bec:	79fb      	ldrb	r3, [r7, #7]
 8017bee:	2b00      	cmp	r3, #0
 8017bf0:	d105      	bne.n	8017bfe <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8017bf2:	683a      	ldr	r2, [r7, #0]
 8017bf4:	4907      	ldr	r1, [pc, #28]	; (8017c14 <USBD_FS_ProductStrDescriptor+0x34>)
 8017bf6:	4808      	ldr	r0, [pc, #32]	; (8017c18 <USBD_FS_ProductStrDescriptor+0x38>)
 8017bf8:	f7fd fbe7 	bl	80153ca <USBD_GetString>
 8017bfc:	e004      	b.n	8017c08 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8017bfe:	683a      	ldr	r2, [r7, #0]
 8017c00:	4904      	ldr	r1, [pc, #16]	; (8017c14 <USBD_FS_ProductStrDescriptor+0x34>)
 8017c02:	4805      	ldr	r0, [pc, #20]	; (8017c18 <USBD_FS_ProductStrDescriptor+0x38>)
 8017c04:	f7fd fbe1 	bl	80153ca <USBD_GetString>
  }
  return USBD_StrDesc;
 8017c08:	4b02      	ldr	r3, [pc, #8]	; (8017c14 <USBD_FS_ProductStrDescriptor+0x34>)
}
 8017c0a:	4618      	mov	r0, r3
 8017c0c:	3708      	adds	r7, #8
 8017c0e:	46bd      	mov	sp, r7
 8017c10:	bd80      	pop	{r7, pc}
 8017c12:	bf00      	nop
 8017c14:	24001e7c 	.word	0x24001e7c
 8017c18:	08019fd0 	.word	0x08019fd0

08017c1c <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8017c1c:	b580      	push	{r7, lr}
 8017c1e:	b082      	sub	sp, #8
 8017c20:	af00      	add	r7, sp, #0
 8017c22:	4603      	mov	r3, r0
 8017c24:	6039      	str	r1, [r7, #0]
 8017c26:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8017c28:	683a      	ldr	r2, [r7, #0]
 8017c2a:	4904      	ldr	r1, [pc, #16]	; (8017c3c <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8017c2c:	4804      	ldr	r0, [pc, #16]	; (8017c40 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8017c2e:	f7fd fbcc 	bl	80153ca <USBD_GetString>
  return USBD_StrDesc;
 8017c32:	4b02      	ldr	r3, [pc, #8]	; (8017c3c <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8017c34:	4618      	mov	r0, r3
 8017c36:	3708      	adds	r7, #8
 8017c38:	46bd      	mov	sp, r7
 8017c3a:	bd80      	pop	{r7, pc}
 8017c3c:	24001e7c 	.word	0x24001e7c
 8017c40:	08019fe4 	.word	0x08019fe4

08017c44 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8017c44:	b580      	push	{r7, lr}
 8017c46:	b082      	sub	sp, #8
 8017c48:	af00      	add	r7, sp, #0
 8017c4a:	4603      	mov	r3, r0
 8017c4c:	6039      	str	r1, [r7, #0]
 8017c4e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8017c50:	683b      	ldr	r3, [r7, #0]
 8017c52:	221a      	movs	r2, #26
 8017c54:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8017c56:	f000 f843 	bl	8017ce0 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8017c5a:	4b02      	ldr	r3, [pc, #8]	; (8017c64 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8017c5c:	4618      	mov	r0, r3
 8017c5e:	3708      	adds	r7, #8
 8017c60:	46bd      	mov	sp, r7
 8017c62:	bd80      	pop	{r7, pc}
 8017c64:	24000138 	.word	0x24000138

08017c68 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8017c68:	b580      	push	{r7, lr}
 8017c6a:	b082      	sub	sp, #8
 8017c6c:	af00      	add	r7, sp, #0
 8017c6e:	4603      	mov	r3, r0
 8017c70:	6039      	str	r1, [r7, #0]
 8017c72:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8017c74:	79fb      	ldrb	r3, [r7, #7]
 8017c76:	2b00      	cmp	r3, #0
 8017c78:	d105      	bne.n	8017c86 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8017c7a:	683a      	ldr	r2, [r7, #0]
 8017c7c:	4907      	ldr	r1, [pc, #28]	; (8017c9c <USBD_FS_ConfigStrDescriptor+0x34>)
 8017c7e:	4808      	ldr	r0, [pc, #32]	; (8017ca0 <USBD_FS_ConfigStrDescriptor+0x38>)
 8017c80:	f7fd fba3 	bl	80153ca <USBD_GetString>
 8017c84:	e004      	b.n	8017c90 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8017c86:	683a      	ldr	r2, [r7, #0]
 8017c88:	4904      	ldr	r1, [pc, #16]	; (8017c9c <USBD_FS_ConfigStrDescriptor+0x34>)
 8017c8a:	4805      	ldr	r0, [pc, #20]	; (8017ca0 <USBD_FS_ConfigStrDescriptor+0x38>)
 8017c8c:	f7fd fb9d 	bl	80153ca <USBD_GetString>
  }
  return USBD_StrDesc;
 8017c90:	4b02      	ldr	r3, [pc, #8]	; (8017c9c <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8017c92:	4618      	mov	r0, r3
 8017c94:	3708      	adds	r7, #8
 8017c96:	46bd      	mov	sp, r7
 8017c98:	bd80      	pop	{r7, pc}
 8017c9a:	bf00      	nop
 8017c9c:	24001e7c 	.word	0x24001e7c
 8017ca0:	08019ff8 	.word	0x08019ff8

08017ca4 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8017ca4:	b580      	push	{r7, lr}
 8017ca6:	b082      	sub	sp, #8
 8017ca8:	af00      	add	r7, sp, #0
 8017caa:	4603      	mov	r3, r0
 8017cac:	6039      	str	r1, [r7, #0]
 8017cae:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8017cb0:	79fb      	ldrb	r3, [r7, #7]
 8017cb2:	2b00      	cmp	r3, #0
 8017cb4:	d105      	bne.n	8017cc2 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8017cb6:	683a      	ldr	r2, [r7, #0]
 8017cb8:	4907      	ldr	r1, [pc, #28]	; (8017cd8 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8017cba:	4808      	ldr	r0, [pc, #32]	; (8017cdc <USBD_FS_InterfaceStrDescriptor+0x38>)
 8017cbc:	f7fd fb85 	bl	80153ca <USBD_GetString>
 8017cc0:	e004      	b.n	8017ccc <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8017cc2:	683a      	ldr	r2, [r7, #0]
 8017cc4:	4904      	ldr	r1, [pc, #16]	; (8017cd8 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8017cc6:	4805      	ldr	r0, [pc, #20]	; (8017cdc <USBD_FS_InterfaceStrDescriptor+0x38>)
 8017cc8:	f7fd fb7f 	bl	80153ca <USBD_GetString>
  }
  return USBD_StrDesc;
 8017ccc:	4b02      	ldr	r3, [pc, #8]	; (8017cd8 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8017cce:	4618      	mov	r0, r3
 8017cd0:	3708      	adds	r7, #8
 8017cd2:	46bd      	mov	sp, r7
 8017cd4:	bd80      	pop	{r7, pc}
 8017cd6:	bf00      	nop
 8017cd8:	24001e7c 	.word	0x24001e7c
 8017cdc:	0801a004 	.word	0x0801a004

08017ce0 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8017ce0:	b580      	push	{r7, lr}
 8017ce2:	b084      	sub	sp, #16
 8017ce4:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8017ce6:	4b0f      	ldr	r3, [pc, #60]	; (8017d24 <Get_SerialNum+0x44>)
 8017ce8:	681b      	ldr	r3, [r3, #0]
 8017cea:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8017cec:	4b0e      	ldr	r3, [pc, #56]	; (8017d28 <Get_SerialNum+0x48>)
 8017cee:	681b      	ldr	r3, [r3, #0]
 8017cf0:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8017cf2:	4b0e      	ldr	r3, [pc, #56]	; (8017d2c <Get_SerialNum+0x4c>)
 8017cf4:	681b      	ldr	r3, [r3, #0]
 8017cf6:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8017cf8:	68fa      	ldr	r2, [r7, #12]
 8017cfa:	687b      	ldr	r3, [r7, #4]
 8017cfc:	4413      	add	r3, r2
 8017cfe:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8017d00:	68fb      	ldr	r3, [r7, #12]
 8017d02:	2b00      	cmp	r3, #0
 8017d04:	d009      	beq.n	8017d1a <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8017d06:	2208      	movs	r2, #8
 8017d08:	4909      	ldr	r1, [pc, #36]	; (8017d30 <Get_SerialNum+0x50>)
 8017d0a:	68f8      	ldr	r0, [r7, #12]
 8017d0c:	f000 f814 	bl	8017d38 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8017d10:	2204      	movs	r2, #4
 8017d12:	4908      	ldr	r1, [pc, #32]	; (8017d34 <Get_SerialNum+0x54>)
 8017d14:	68b8      	ldr	r0, [r7, #8]
 8017d16:	f000 f80f 	bl	8017d38 <IntToUnicode>
  }
}
 8017d1a:	bf00      	nop
 8017d1c:	3710      	adds	r7, #16
 8017d1e:	46bd      	mov	sp, r7
 8017d20:	bd80      	pop	{r7, pc}
 8017d22:	bf00      	nop
 8017d24:	1ff1e800 	.word	0x1ff1e800
 8017d28:	1ff1e804 	.word	0x1ff1e804
 8017d2c:	1ff1e808 	.word	0x1ff1e808
 8017d30:	2400013a 	.word	0x2400013a
 8017d34:	2400014a 	.word	0x2400014a

08017d38 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8017d38:	b480      	push	{r7}
 8017d3a:	b087      	sub	sp, #28
 8017d3c:	af00      	add	r7, sp, #0
 8017d3e:	60f8      	str	r0, [r7, #12]
 8017d40:	60b9      	str	r1, [r7, #8]
 8017d42:	4613      	mov	r3, r2
 8017d44:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8017d46:	2300      	movs	r3, #0
 8017d48:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8017d4a:	2300      	movs	r3, #0
 8017d4c:	75fb      	strb	r3, [r7, #23]
 8017d4e:	e027      	b.n	8017da0 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8017d50:	68fb      	ldr	r3, [r7, #12]
 8017d52:	0f1b      	lsrs	r3, r3, #28
 8017d54:	2b09      	cmp	r3, #9
 8017d56:	d80b      	bhi.n	8017d70 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8017d58:	68fb      	ldr	r3, [r7, #12]
 8017d5a:	0f1b      	lsrs	r3, r3, #28
 8017d5c:	b2da      	uxtb	r2, r3
 8017d5e:	7dfb      	ldrb	r3, [r7, #23]
 8017d60:	005b      	lsls	r3, r3, #1
 8017d62:	4619      	mov	r1, r3
 8017d64:	68bb      	ldr	r3, [r7, #8]
 8017d66:	440b      	add	r3, r1
 8017d68:	3230      	adds	r2, #48	; 0x30
 8017d6a:	b2d2      	uxtb	r2, r2
 8017d6c:	701a      	strb	r2, [r3, #0]
 8017d6e:	e00a      	b.n	8017d86 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8017d70:	68fb      	ldr	r3, [r7, #12]
 8017d72:	0f1b      	lsrs	r3, r3, #28
 8017d74:	b2da      	uxtb	r2, r3
 8017d76:	7dfb      	ldrb	r3, [r7, #23]
 8017d78:	005b      	lsls	r3, r3, #1
 8017d7a:	4619      	mov	r1, r3
 8017d7c:	68bb      	ldr	r3, [r7, #8]
 8017d7e:	440b      	add	r3, r1
 8017d80:	3237      	adds	r2, #55	; 0x37
 8017d82:	b2d2      	uxtb	r2, r2
 8017d84:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8017d86:	68fb      	ldr	r3, [r7, #12]
 8017d88:	011b      	lsls	r3, r3, #4
 8017d8a:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8017d8c:	7dfb      	ldrb	r3, [r7, #23]
 8017d8e:	005b      	lsls	r3, r3, #1
 8017d90:	3301      	adds	r3, #1
 8017d92:	68ba      	ldr	r2, [r7, #8]
 8017d94:	4413      	add	r3, r2
 8017d96:	2200      	movs	r2, #0
 8017d98:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8017d9a:	7dfb      	ldrb	r3, [r7, #23]
 8017d9c:	3301      	adds	r3, #1
 8017d9e:	75fb      	strb	r3, [r7, #23]
 8017da0:	7dfa      	ldrb	r2, [r7, #23]
 8017da2:	79fb      	ldrb	r3, [r7, #7]
 8017da4:	429a      	cmp	r2, r3
 8017da6:	d3d3      	bcc.n	8017d50 <IntToUnicode+0x18>
  }
}
 8017da8:	bf00      	nop
 8017daa:	371c      	adds	r7, #28
 8017dac:	46bd      	mov	sp, r7
 8017dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017db2:	4770      	bx	lr

08017db4 <STORAGE_Init_FS>:
  * @brief  Initializes over USB FS IP
  * @param  lun:
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_Init_FS(uint8_t lun)
{
 8017db4:	b480      	push	{r7}
 8017db6:	b083      	sub	sp, #12
 8017db8:	af00      	add	r7, sp, #0
 8017dba:	4603      	mov	r3, r0
 8017dbc:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN 2 */
  return (USBD_OK);
 8017dbe:	2300      	movs	r3, #0
  /* USER CODE END 2 */
}
 8017dc0:	4618      	mov	r0, r3
 8017dc2:	370c      	adds	r7, #12
 8017dc4:	46bd      	mov	sp, r7
 8017dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017dca:	4770      	bx	lr

08017dcc <STORAGE_GetCapacity_FS>:
  * @param  block_num: .
  * @param  block_size: .
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_GetCapacity_FS(uint8_t lun, uint32_t *block_num, uint16_t *block_size)
{
 8017dcc:	b580      	push	{r7, lr}
 8017dce:	b08e      	sub	sp, #56	; 0x38
 8017dd0:	af00      	add	r7, sp, #0
 8017dd2:	4603      	mov	r3, r0
 8017dd4:	60b9      	str	r1, [r7, #8]
 8017dd6:	607a      	str	r2, [r7, #4]
 8017dd8:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 3 */
	HAL_SD_CardInfoTypeDef info;
	  int8_t ret = -1;
 8017dda:	23ff      	movs	r3, #255	; 0xff
 8017ddc:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

	  HAL_SD_GetCardInfo(&hsd1, &info);
 8017de0:	f107 0310 	add.w	r3, r7, #16
 8017de4:	4619      	mov	r1, r3
 8017de6:	480a      	ldr	r0, [pc, #40]	; (8017e10 <STORAGE_GetCapacity_FS+0x44>)
 8017de8:	f7f5 f89a 	bl	800cf20 <HAL_SD_GetCardInfo>

	  *block_num =  info.LogBlockNbr  - 1;
 8017dec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017dee:	1e5a      	subs	r2, r3, #1
 8017df0:	68bb      	ldr	r3, [r7, #8]
 8017df2:	601a      	str	r2, [r3, #0]
	  *block_size = info.LogBlockSize;
 8017df4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017df6:	b29a      	uxth	r2, r3
 8017df8:	687b      	ldr	r3, [r7, #4]
 8017dfa:	801a      	strh	r2, [r3, #0]
	  ret = 0;
 8017dfc:	2300      	movs	r3, #0
 8017dfe:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	  return ret;
 8017e02:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
  /* USER CODE END 3 */
}
 8017e06:	4618      	mov	r0, r3
 8017e08:	3738      	adds	r7, #56	; 0x38
 8017e0a:	46bd      	mov	sp, r7
 8017e0c:	bd80      	pop	{r7, pc}
 8017e0e:	bf00      	nop
 8017e10:	24001448 	.word	0x24001448

08017e14 <STORAGE_IsReady_FS>:
  * @brief  .
  * @param  lun: .
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_IsReady_FS(uint8_t lun)
{
 8017e14:	b480      	push	{r7}
 8017e16:	b083      	sub	sp, #12
 8017e18:	af00      	add	r7, sp, #0
 8017e1a:	4603      	mov	r3, r0
 8017e1c:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8017e1e:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8017e20:	4618      	mov	r0, r3
 8017e22:	370c      	adds	r7, #12
 8017e24:	46bd      	mov	sp, r7
 8017e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017e2a:	4770      	bx	lr

08017e2c <STORAGE_IsWriteProtected_FS>:
  * @brief  .
  * @param  lun: .
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_IsWriteProtected_FS(uint8_t lun)
{
 8017e2c:	b480      	push	{r7}
 8017e2e:	b083      	sub	sp, #12
 8017e30:	af00      	add	r7, sp, #0
 8017e32:	4603      	mov	r3, r0
 8017e34:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN 5 */
  return (USBD_OK);
 8017e36:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8017e38:	4618      	mov	r0, r3
 8017e3a:	370c      	adds	r7, #12
 8017e3c:	46bd      	mov	sp, r7
 8017e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017e42:	4770      	bx	lr

08017e44 <STORAGE_Read_FS>:
  * @brief  .
  * @param  lun: .
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_Read_FS(uint8_t lun, uint8_t *buf, uint32_t blk_addr, uint16_t blk_len)
{
 8017e44:	b580      	push	{r7, lr}
 8017e46:	b088      	sub	sp, #32
 8017e48:	af02      	add	r7, sp, #8
 8017e4a:	60b9      	str	r1, [r7, #8]
 8017e4c:	607a      	str	r2, [r7, #4]
 8017e4e:	461a      	mov	r2, r3
 8017e50:	4603      	mov	r3, r0
 8017e52:	73fb      	strb	r3, [r7, #15]
 8017e54:	4613      	mov	r3, r2
 8017e56:	81bb      	strh	r3, [r7, #12]
  /* USER CODE BEGIN 6 */
	int8_t ret = -1;
 8017e58:	23ff      	movs	r3, #255	; 0xff
 8017e5a:	75fb      	strb	r3, [r7, #23]

	HAL_SD_ReadBlocks(&hsd1, buf, blk_addr, blk_len, HAL_MAX_DELAY);
 8017e5c:	89ba      	ldrh	r2, [r7, #12]
 8017e5e:	f04f 33ff 	mov.w	r3, #4294967295
 8017e62:	9300      	str	r3, [sp, #0]
 8017e64:	4613      	mov	r3, r2
 8017e66:	687a      	ldr	r2, [r7, #4]
 8017e68:	68b9      	ldr	r1, [r7, #8]
 8017e6a:	4809      	ldr	r0, [pc, #36]	; (8017e90 <STORAGE_Read_FS+0x4c>)
 8017e6c:	f7f3 ffca 	bl	800be04 <HAL_SD_ReadBlocks>

	/* Wait until SD card is ready to use for new operation */
	while (HAL_SD_GetCardState(&hsd1) != HAL_SD_CARD_TRANSFER){}
 8017e70:	bf00      	nop
 8017e72:	4807      	ldr	r0, [pc, #28]	; (8017e90 <STORAGE_Read_FS+0x4c>)
 8017e74:	f7f5 f92a 	bl	800d0cc <HAL_SD_GetCardState>
 8017e78:	4603      	mov	r3, r0
 8017e7a:	2b04      	cmp	r3, #4
 8017e7c:	d1f9      	bne.n	8017e72 <STORAGE_Read_FS+0x2e>
	ret = 0;
 8017e7e:	2300      	movs	r3, #0
 8017e80:	75fb      	strb	r3, [r7, #23]
	return ret;
 8017e82:	f997 3017 	ldrsb.w	r3, [r7, #23]
  /* USER CODE END 6 */
}
 8017e86:	4618      	mov	r0, r3
 8017e88:	3718      	adds	r7, #24
 8017e8a:	46bd      	mov	sp, r7
 8017e8c:	bd80      	pop	{r7, pc}
 8017e8e:	bf00      	nop
 8017e90:	24001448 	.word	0x24001448

08017e94 <STORAGE_Write_FS>:
  * @brief  .
  * @param  lun: .
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_Write_FS(uint8_t lun, uint8_t *buf, uint32_t blk_addr, uint16_t blk_len)
{
 8017e94:	b580      	push	{r7, lr}
 8017e96:	b088      	sub	sp, #32
 8017e98:	af02      	add	r7, sp, #8
 8017e9a:	60b9      	str	r1, [r7, #8]
 8017e9c:	607a      	str	r2, [r7, #4]
 8017e9e:	461a      	mov	r2, r3
 8017ea0:	4603      	mov	r3, r0
 8017ea2:	73fb      	strb	r3, [r7, #15]
 8017ea4:	4613      	mov	r3, r2
 8017ea6:	81bb      	strh	r3, [r7, #12]
  /* USER CODE BEGIN 7 */
	int8_t ret = -1;
 8017ea8:	23ff      	movs	r3, #255	; 0xff
 8017eaa:	75fb      	strb	r3, [r7, #23]

	HAL_SD_WriteBlocks(&hsd1, buf, blk_addr, blk_len, HAL_MAX_DELAY);
 8017eac:	89ba      	ldrh	r2, [r7, #12]
 8017eae:	f04f 33ff 	mov.w	r3, #4294967295
 8017eb2:	9300      	str	r3, [sp, #0]
 8017eb4:	4613      	mov	r3, r2
 8017eb6:	687a      	ldr	r2, [r7, #4]
 8017eb8:	68b9      	ldr	r1, [r7, #8]
 8017eba:	4809      	ldr	r0, [pc, #36]	; (8017ee0 <STORAGE_Write_FS+0x4c>)
 8017ebc:	f7f4 f92c 	bl	800c118 <HAL_SD_WriteBlocks>


	/* Wait until SD card is ready to use for new operation */
	while (HAL_SD_GetCardState(&hsd1) != HAL_SD_CARD_TRANSFER){}
 8017ec0:	bf00      	nop
 8017ec2:	4807      	ldr	r0, [pc, #28]	; (8017ee0 <STORAGE_Write_FS+0x4c>)
 8017ec4:	f7f5 f902 	bl	800d0cc <HAL_SD_GetCardState>
 8017ec8:	4603      	mov	r3, r0
 8017eca:	2b04      	cmp	r3, #4
 8017ecc:	d1f9      	bne.n	8017ec2 <STORAGE_Write_FS+0x2e>
	ret = 0;
 8017ece:	2300      	movs	r3, #0
 8017ed0:	75fb      	strb	r3, [r7, #23]
	return ret;
 8017ed2:	f997 3017 	ldrsb.w	r3, [r7, #23]
  /* USER CODE END 7 */
}
 8017ed6:	4618      	mov	r0, r3
 8017ed8:	3718      	adds	r7, #24
 8017eda:	46bd      	mov	sp, r7
 8017edc:	bd80      	pop	{r7, pc}
 8017ede:	bf00      	nop
 8017ee0:	24001448 	.word	0x24001448

08017ee4 <STORAGE_GetMaxLun_FS>:
  * @brief  .
  * @param  None
  * @retval .
  */
int8_t STORAGE_GetMaxLun_FS(void)
{
 8017ee4:	b480      	push	{r7}
 8017ee6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 8 */
  return (STORAGE_LUN_NBR - 1);
 8017ee8:	2300      	movs	r3, #0
  /* USER CODE END 8 */
}
 8017eea:	4618      	mov	r0, r3
 8017eec:	46bd      	mov	sp, r7
 8017eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017ef2:	4770      	bx	lr

08017ef4 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8017ef4:	b580      	push	{r7, lr}
 8017ef6:	b08a      	sub	sp, #40	; 0x28
 8017ef8:	af00      	add	r7, sp, #0
 8017efa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8017efc:	f107 0314 	add.w	r3, r7, #20
 8017f00:	2200      	movs	r2, #0
 8017f02:	601a      	str	r2, [r3, #0]
 8017f04:	605a      	str	r2, [r3, #4]
 8017f06:	609a      	str	r2, [r3, #8]
 8017f08:	60da      	str	r2, [r3, #12]
 8017f0a:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8017f0c:	687b      	ldr	r3, [r7, #4]
 8017f0e:	681b      	ldr	r3, [r3, #0]
 8017f10:	4a1e      	ldr	r2, [pc, #120]	; (8017f8c <HAL_PCD_MspInit+0x98>)
 8017f12:	4293      	cmp	r3, r2
 8017f14:	d136      	bne.n	8017f84 <HAL_PCD_MspInit+0x90>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8017f16:	4b1e      	ldr	r3, [pc, #120]	; (8017f90 <HAL_PCD_MspInit+0x9c>)
 8017f18:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8017f1c:	4a1c      	ldr	r2, [pc, #112]	; (8017f90 <HAL_PCD_MspInit+0x9c>)
 8017f1e:	f043 0301 	orr.w	r3, r3, #1
 8017f22:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8017f26:	4b1a      	ldr	r3, [pc, #104]	; (8017f90 <HAL_PCD_MspInit+0x9c>)
 8017f28:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8017f2c:	f003 0301 	and.w	r3, r3, #1
 8017f30:	613b      	str	r3, [r7, #16]
 8017f32:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8017f34:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8017f38:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8017f3a:	2302      	movs	r3, #2
 8017f3c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8017f3e:	2300      	movs	r3, #0
 8017f40:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8017f42:	2300      	movs	r3, #0
 8017f44:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 8017f46:	230a      	movs	r3, #10
 8017f48:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8017f4a:	f107 0314 	add.w	r3, r7, #20
 8017f4e:	4619      	mov	r1, r3
 8017f50:	4810      	ldr	r0, [pc, #64]	; (8017f94 <HAL_PCD_MspInit+0xa0>)
 8017f52:	f7ee ff2f 	bl	8006db4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8017f56:	4b0e      	ldr	r3, [pc, #56]	; (8017f90 <HAL_PCD_MspInit+0x9c>)
 8017f58:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8017f5c:	4a0c      	ldr	r2, [pc, #48]	; (8017f90 <HAL_PCD_MspInit+0x9c>)
 8017f5e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8017f62:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8017f66:	4b0a      	ldr	r3, [pc, #40]	; (8017f90 <HAL_PCD_MspInit+0x9c>)
 8017f68:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8017f6c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8017f70:	60fb      	str	r3, [r7, #12]
 8017f72:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8017f74:	2200      	movs	r2, #0
 8017f76:	2100      	movs	r1, #0
 8017f78:	2065      	movs	r0, #101	; 0x65
 8017f7a:	f7eb fcd2 	bl	8003922 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8017f7e:	2065      	movs	r0, #101	; 0x65
 8017f80:	f7eb fce9 	bl	8003956 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8017f84:	bf00      	nop
 8017f86:	3728      	adds	r7, #40	; 0x28
 8017f88:	46bd      	mov	sp, r7
 8017f8a:	bd80      	pop	{r7, pc}
 8017f8c:	40080000 	.word	0x40080000
 8017f90:	58024400 	.word	0x58024400
 8017f94:	58020000 	.word	0x58020000

08017f98 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8017f98:	b580      	push	{r7, lr}
 8017f9a:	b082      	sub	sp, #8
 8017f9c:	af00      	add	r7, sp, #0
 8017f9e:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8017fa0:	687b      	ldr	r3, [r7, #4]
 8017fa2:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 8017fa6:	687b      	ldr	r3, [r7, #4]
 8017fa8:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8017fac:	4619      	mov	r1, r3
 8017fae:	4610      	mov	r0, r2
 8017fb0:	f7fc fa89 	bl	80144c6 <USBD_LL_SetupStage>
}
 8017fb4:	bf00      	nop
 8017fb6:	3708      	adds	r7, #8
 8017fb8:	46bd      	mov	sp, r7
 8017fba:	bd80      	pop	{r7, pc}

08017fbc <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8017fbc:	b580      	push	{r7, lr}
 8017fbe:	b082      	sub	sp, #8
 8017fc0:	af00      	add	r7, sp, #0
 8017fc2:	6078      	str	r0, [r7, #4]
 8017fc4:	460b      	mov	r3, r1
 8017fc6:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8017fc8:	687b      	ldr	r3, [r7, #4]
 8017fca:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 8017fce:	78fa      	ldrb	r2, [r7, #3]
 8017fd0:	6879      	ldr	r1, [r7, #4]
 8017fd2:	4613      	mov	r3, r2
 8017fd4:	00db      	lsls	r3, r3, #3
 8017fd6:	1a9b      	subs	r3, r3, r2
 8017fd8:	009b      	lsls	r3, r3, #2
 8017fda:	440b      	add	r3, r1
 8017fdc:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8017fe0:	681a      	ldr	r2, [r3, #0]
 8017fe2:	78fb      	ldrb	r3, [r7, #3]
 8017fe4:	4619      	mov	r1, r3
 8017fe6:	f7fc fac1 	bl	801456c <USBD_LL_DataOutStage>
}
 8017fea:	bf00      	nop
 8017fec:	3708      	adds	r7, #8
 8017fee:	46bd      	mov	sp, r7
 8017ff0:	bd80      	pop	{r7, pc}

08017ff2 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8017ff2:	b580      	push	{r7, lr}
 8017ff4:	b082      	sub	sp, #8
 8017ff6:	af00      	add	r7, sp, #0
 8017ff8:	6078      	str	r0, [r7, #4]
 8017ffa:	460b      	mov	r3, r1
 8017ffc:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8017ffe:	687b      	ldr	r3, [r7, #4]
 8018000:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 8018004:	78fa      	ldrb	r2, [r7, #3]
 8018006:	6879      	ldr	r1, [r7, #4]
 8018008:	4613      	mov	r3, r2
 801800a:	00db      	lsls	r3, r3, #3
 801800c:	1a9b      	subs	r3, r3, r2
 801800e:	009b      	lsls	r3, r3, #2
 8018010:	440b      	add	r3, r1
 8018012:	3348      	adds	r3, #72	; 0x48
 8018014:	681a      	ldr	r2, [r3, #0]
 8018016:	78fb      	ldrb	r3, [r7, #3]
 8018018:	4619      	mov	r1, r3
 801801a:	f7fc fb0a 	bl	8014632 <USBD_LL_DataInStage>
}
 801801e:	bf00      	nop
 8018020:	3708      	adds	r7, #8
 8018022:	46bd      	mov	sp, r7
 8018024:	bd80      	pop	{r7, pc}

08018026 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8018026:	b580      	push	{r7, lr}
 8018028:	b082      	sub	sp, #8
 801802a:	af00      	add	r7, sp, #0
 801802c:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 801802e:	687b      	ldr	r3, [r7, #4]
 8018030:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8018034:	4618      	mov	r0, r3
 8018036:	f7fc fc0e 	bl	8014856 <USBD_LL_SOF>
}
 801803a:	bf00      	nop
 801803c:	3708      	adds	r7, #8
 801803e:	46bd      	mov	sp, r7
 8018040:	bd80      	pop	{r7, pc}

08018042 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8018042:	b580      	push	{r7, lr}
 8018044:	b084      	sub	sp, #16
 8018046:	af00      	add	r7, sp, #0
 8018048:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 801804a:	2301      	movs	r3, #1
 801804c:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 801804e:	687b      	ldr	r3, [r7, #4]
 8018050:	68db      	ldr	r3, [r3, #12]
 8018052:	2b00      	cmp	r3, #0
 8018054:	d102      	bne.n	801805c <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 8018056:	2300      	movs	r3, #0
 8018058:	73fb      	strb	r3, [r7, #15]
 801805a:	e008      	b.n	801806e <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 801805c:	687b      	ldr	r3, [r7, #4]
 801805e:	68db      	ldr	r3, [r3, #12]
 8018060:	2b02      	cmp	r3, #2
 8018062:	d102      	bne.n	801806a <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 8018064:	2301      	movs	r3, #1
 8018066:	73fb      	strb	r3, [r7, #15]
 8018068:	e001      	b.n	801806e <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 801806a:	f7ea fe5d 	bl	8002d28 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 801806e:	687b      	ldr	r3, [r7, #4]
 8018070:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8018074:	7bfa      	ldrb	r2, [r7, #15]
 8018076:	4611      	mov	r1, r2
 8018078:	4618      	mov	r0, r3
 801807a:	f7fc fbb1 	bl	80147e0 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 801807e:	687b      	ldr	r3, [r7, #4]
 8018080:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8018084:	4618      	mov	r0, r3
 8018086:	f7fc fb6a 	bl	801475e <USBD_LL_Reset>
}
 801808a:	bf00      	nop
 801808c:	3710      	adds	r7, #16
 801808e:	46bd      	mov	sp, r7
 8018090:	bd80      	pop	{r7, pc}
	...

08018094 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8018094:	b580      	push	{r7, lr}
 8018096:	b082      	sub	sp, #8
 8018098:	af00      	add	r7, sp, #0
 801809a:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 801809c:	687b      	ldr	r3, [r7, #4]
 801809e:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80180a2:	4618      	mov	r0, r3
 80180a4:	f7fc fbac 	bl	8014800 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 80180a8:	687b      	ldr	r3, [r7, #4]
 80180aa:	681b      	ldr	r3, [r3, #0]
 80180ac:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80180b0:	681b      	ldr	r3, [r3, #0]
 80180b2:	687a      	ldr	r2, [r7, #4]
 80180b4:	6812      	ldr	r2, [r2, #0]
 80180b6:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80180ba:	f043 0301 	orr.w	r3, r3, #1
 80180be:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 80180c0:	687b      	ldr	r3, [r7, #4]
 80180c2:	6a1b      	ldr	r3, [r3, #32]
 80180c4:	2b00      	cmp	r3, #0
 80180c6:	d005      	beq.n	80180d4 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80180c8:	4b04      	ldr	r3, [pc, #16]	; (80180dc <HAL_PCD_SuspendCallback+0x48>)
 80180ca:	691b      	ldr	r3, [r3, #16]
 80180cc:	4a03      	ldr	r2, [pc, #12]	; (80180dc <HAL_PCD_SuspendCallback+0x48>)
 80180ce:	f043 0306 	orr.w	r3, r3, #6
 80180d2:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 80180d4:	bf00      	nop
 80180d6:	3708      	adds	r7, #8
 80180d8:	46bd      	mov	sp, r7
 80180da:	bd80      	pop	{r7, pc}
 80180dc:	e000ed00 	.word	0xe000ed00

080180e0 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80180e0:	b580      	push	{r7, lr}
 80180e2:	b082      	sub	sp, #8
 80180e4:	af00      	add	r7, sp, #0
 80180e6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 80180e8:	687b      	ldr	r3, [r7, #4]
 80180ea:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80180ee:	4618      	mov	r0, r3
 80180f0:	f7fc fb9b 	bl	801482a <USBD_LL_Resume>
}
 80180f4:	bf00      	nop
 80180f6:	3708      	adds	r7, #8
 80180f8:	46bd      	mov	sp, r7
 80180fa:	bd80      	pop	{r7, pc}

080180fc <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80180fc:	b580      	push	{r7, lr}
 80180fe:	b082      	sub	sp, #8
 8018100:	af00      	add	r7, sp, #0
 8018102:	6078      	str	r0, [r7, #4]
 8018104:	460b      	mov	r3, r1
 8018106:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8018108:	687b      	ldr	r3, [r7, #4]
 801810a:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 801810e:	78fa      	ldrb	r2, [r7, #3]
 8018110:	4611      	mov	r1, r2
 8018112:	4618      	mov	r0, r3
 8018114:	f7fc fbc6 	bl	80148a4 <USBD_LL_IsoOUTIncomplete>
}
 8018118:	bf00      	nop
 801811a:	3708      	adds	r7, #8
 801811c:	46bd      	mov	sp, r7
 801811e:	bd80      	pop	{r7, pc}

08018120 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8018120:	b580      	push	{r7, lr}
 8018122:	b082      	sub	sp, #8
 8018124:	af00      	add	r7, sp, #0
 8018126:	6078      	str	r0, [r7, #4]
 8018128:	460b      	mov	r3, r1
 801812a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 801812c:	687b      	ldr	r3, [r7, #4]
 801812e:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8018132:	78fa      	ldrb	r2, [r7, #3]
 8018134:	4611      	mov	r1, r2
 8018136:	4618      	mov	r0, r3
 8018138:	f7fc fba7 	bl	801488a <USBD_LL_IsoINIncomplete>
}
 801813c:	bf00      	nop
 801813e:	3708      	adds	r7, #8
 8018140:	46bd      	mov	sp, r7
 8018142:	bd80      	pop	{r7, pc}

08018144 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8018144:	b580      	push	{r7, lr}
 8018146:	b082      	sub	sp, #8
 8018148:	af00      	add	r7, sp, #0
 801814a:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 801814c:	687b      	ldr	r3, [r7, #4]
 801814e:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8018152:	4618      	mov	r0, r3
 8018154:	f7fc fbb3 	bl	80148be <USBD_LL_DevConnected>
}
 8018158:	bf00      	nop
 801815a:	3708      	adds	r7, #8
 801815c:	46bd      	mov	sp, r7
 801815e:	bd80      	pop	{r7, pc}

08018160 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8018160:	b580      	push	{r7, lr}
 8018162:	b082      	sub	sp, #8
 8018164:	af00      	add	r7, sp, #0
 8018166:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8018168:	687b      	ldr	r3, [r7, #4]
 801816a:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 801816e:	4618      	mov	r0, r3
 8018170:	f7fc fbb0 	bl	80148d4 <USBD_LL_DevDisconnected>
}
 8018174:	bf00      	nop
 8018176:	3708      	adds	r7, #8
 8018178:	46bd      	mov	sp, r7
 801817a:	bd80      	pop	{r7, pc}

0801817c <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 801817c:	b580      	push	{r7, lr}
 801817e:	b082      	sub	sp, #8
 8018180:	af00      	add	r7, sp, #0
 8018182:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8018184:	687b      	ldr	r3, [r7, #4]
 8018186:	781b      	ldrb	r3, [r3, #0]
 8018188:	2b00      	cmp	r3, #0
 801818a:	d13e      	bne.n	801820a <USBD_LL_Init+0x8e>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 801818c:	4a21      	ldr	r2, [pc, #132]	; (8018214 <USBD_LL_Init+0x98>)
 801818e:	687b      	ldr	r3, [r7, #4]
 8018190:	f8c2 3404 	str.w	r3, [r2, #1028]	; 0x404
  pdev->pData = &hpcd_USB_OTG_FS;
 8018194:	687b      	ldr	r3, [r7, #4]
 8018196:	4a1f      	ldr	r2, [pc, #124]	; (8018214 <USBD_LL_Init+0x98>)
 8018198:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 801819c:	4b1d      	ldr	r3, [pc, #116]	; (8018214 <USBD_LL_Init+0x98>)
 801819e:	4a1e      	ldr	r2, [pc, #120]	; (8018218 <USBD_LL_Init+0x9c>)
 80181a0:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 9;
 80181a2:	4b1c      	ldr	r3, [pc, #112]	; (8018214 <USBD_LL_Init+0x98>)
 80181a4:	2209      	movs	r2, #9
 80181a6:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 80181a8:	4b1a      	ldr	r3, [pc, #104]	; (8018214 <USBD_LL_Init+0x98>)
 80181aa:	2202      	movs	r2, #2
 80181ac:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 80181ae:	4b19      	ldr	r3, [pc, #100]	; (8018214 <USBD_LL_Init+0x98>)
 80181b0:	2200      	movs	r2, #0
 80181b2:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80181b4:	4b17      	ldr	r3, [pc, #92]	; (8018214 <USBD_LL_Init+0x98>)
 80181b6:	2202      	movs	r2, #2
 80181b8:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 80181ba:	4b16      	ldr	r3, [pc, #88]	; (8018214 <USBD_LL_Init+0x98>)
 80181bc:	2200      	movs	r2, #0
 80181be:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 80181c0:	4b14      	ldr	r3, [pc, #80]	; (8018214 <USBD_LL_Init+0x98>)
 80181c2:	2200      	movs	r2, #0
 80181c4:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 80181c6:	4b13      	ldr	r3, [pc, #76]	; (8018214 <USBD_LL_Init+0x98>)
 80181c8:	2200      	movs	r2, #0
 80181ca:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = DISABLE;
 80181cc:	4b11      	ldr	r3, [pc, #68]	; (8018214 <USBD_LL_Init+0x98>)
 80181ce:	2200      	movs	r2, #0
 80181d0:	629a      	str	r2, [r3, #40]	; 0x28
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 80181d2:	4b10      	ldr	r3, [pc, #64]	; (8018214 <USBD_LL_Init+0x98>)
 80181d4:	2200      	movs	r2, #0
 80181d6:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 80181d8:	4b0e      	ldr	r3, [pc, #56]	; (8018214 <USBD_LL_Init+0x98>)
 80181da:	2200      	movs	r2, #0
 80181dc:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 80181de:	480d      	ldr	r0, [pc, #52]	; (8018214 <USBD_LL_Init+0x98>)
 80181e0:	f7ef f822 	bl	8007228 <HAL_PCD_Init>
 80181e4:	4603      	mov	r3, r0
 80181e6:	2b00      	cmp	r3, #0
 80181e8:	d001      	beq.n	80181ee <USBD_LL_Init+0x72>
  {
    Error_Handler( );
 80181ea:	f7ea fd9d 	bl	8002d28 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 80181ee:	2180      	movs	r1, #128	; 0x80
 80181f0:	4808      	ldr	r0, [pc, #32]	; (8018214 <USBD_LL_Init+0x98>)
 80181f2:	f7f0 f9e0 	bl	80085b6 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 80181f6:	2240      	movs	r2, #64	; 0x40
 80181f8:	2100      	movs	r1, #0
 80181fa:	4806      	ldr	r0, [pc, #24]	; (8018214 <USBD_LL_Init+0x98>)
 80181fc:	f7f0 f994 	bl	8008528 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8018200:	2280      	movs	r2, #128	; 0x80
 8018202:	2101      	movs	r1, #1
 8018204:	4803      	ldr	r0, [pc, #12]	; (8018214 <USBD_LL_Init+0x98>)
 8018206:	f7f0 f98f 	bl	8008528 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 801820a:	2300      	movs	r3, #0
}
 801820c:	4618      	mov	r0, r3
 801820e:	3708      	adds	r7, #8
 8018210:	46bd      	mov	sp, r7
 8018212:	bd80      	pop	{r7, pc}
 8018214:	2400207c 	.word	0x2400207c
 8018218:	40080000 	.word	0x40080000

0801821c <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 801821c:	b580      	push	{r7, lr}
 801821e:	b084      	sub	sp, #16
 8018220:	af00      	add	r7, sp, #0
 8018222:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8018224:	2300      	movs	r3, #0
 8018226:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8018228:	2300      	movs	r3, #0
 801822a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 801822c:	687b      	ldr	r3, [r7, #4]
 801822e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8018232:	4618      	mov	r0, r3
 8018234:	f7ef f91c 	bl	8007470 <HAL_PCD_Start>
 8018238:	4603      	mov	r3, r0
 801823a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801823c:	7bfb      	ldrb	r3, [r7, #15]
 801823e:	4618      	mov	r0, r3
 8018240:	f000 f94a 	bl	80184d8 <USBD_Get_USB_Status>
 8018244:	4603      	mov	r3, r0
 8018246:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8018248:	7bbb      	ldrb	r3, [r7, #14]
}
 801824a:	4618      	mov	r0, r3
 801824c:	3710      	adds	r7, #16
 801824e:	46bd      	mov	sp, r7
 8018250:	bd80      	pop	{r7, pc}

08018252 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8018252:	b580      	push	{r7, lr}
 8018254:	b084      	sub	sp, #16
 8018256:	af00      	add	r7, sp, #0
 8018258:	6078      	str	r0, [r7, #4]
 801825a:	4608      	mov	r0, r1
 801825c:	4611      	mov	r1, r2
 801825e:	461a      	mov	r2, r3
 8018260:	4603      	mov	r3, r0
 8018262:	70fb      	strb	r3, [r7, #3]
 8018264:	460b      	mov	r3, r1
 8018266:	70bb      	strb	r3, [r7, #2]
 8018268:	4613      	mov	r3, r2
 801826a:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801826c:	2300      	movs	r3, #0
 801826e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8018270:	2300      	movs	r3, #0
 8018272:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8018274:	687b      	ldr	r3, [r7, #4]
 8018276:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 801827a:	78bb      	ldrb	r3, [r7, #2]
 801827c:	883a      	ldrh	r2, [r7, #0]
 801827e:	78f9      	ldrb	r1, [r7, #3]
 8018280:	f7ef fd2d 	bl	8007cde <HAL_PCD_EP_Open>
 8018284:	4603      	mov	r3, r0
 8018286:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8018288:	7bfb      	ldrb	r3, [r7, #15]
 801828a:	4618      	mov	r0, r3
 801828c:	f000 f924 	bl	80184d8 <USBD_Get_USB_Status>
 8018290:	4603      	mov	r3, r0
 8018292:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8018294:	7bbb      	ldrb	r3, [r7, #14]
}
 8018296:	4618      	mov	r0, r3
 8018298:	3710      	adds	r7, #16
 801829a:	46bd      	mov	sp, r7
 801829c:	bd80      	pop	{r7, pc}

0801829e <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801829e:	b580      	push	{r7, lr}
 80182a0:	b084      	sub	sp, #16
 80182a2:	af00      	add	r7, sp, #0
 80182a4:	6078      	str	r0, [r7, #4]
 80182a6:	460b      	mov	r3, r1
 80182a8:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80182aa:	2300      	movs	r3, #0
 80182ac:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80182ae:	2300      	movs	r3, #0
 80182b0:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 80182b2:	687b      	ldr	r3, [r7, #4]
 80182b4:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80182b8:	78fa      	ldrb	r2, [r7, #3]
 80182ba:	4611      	mov	r1, r2
 80182bc:	4618      	mov	r0, r3
 80182be:	f7ef fd76 	bl	8007dae <HAL_PCD_EP_Close>
 80182c2:	4603      	mov	r3, r0
 80182c4:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80182c6:	7bfb      	ldrb	r3, [r7, #15]
 80182c8:	4618      	mov	r0, r3
 80182ca:	f000 f905 	bl	80184d8 <USBD_Get_USB_Status>
 80182ce:	4603      	mov	r3, r0
 80182d0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80182d2:	7bbb      	ldrb	r3, [r7, #14]
}
 80182d4:	4618      	mov	r0, r3
 80182d6:	3710      	adds	r7, #16
 80182d8:	46bd      	mov	sp, r7
 80182da:	bd80      	pop	{r7, pc}

080182dc <USBD_LL_FlushEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_FlushEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80182dc:	b580      	push	{r7, lr}
 80182de:	b084      	sub	sp, #16
 80182e0:	af00      	add	r7, sp, #0
 80182e2:	6078      	str	r0, [r7, #4]
 80182e4:	460b      	mov	r3, r1
 80182e6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80182e8:	2300      	movs	r3, #0
 80182ea:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80182ec:	2300      	movs	r3, #0
 80182ee:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Flush(pdev->pData, ep_addr);
 80182f0:	687b      	ldr	r3, [r7, #4]
 80182f2:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80182f6:	78fa      	ldrb	r2, [r7, #3]
 80182f8:	4611      	mov	r1, r2
 80182fa:	4618      	mov	r0, r3
 80182fc:	f7ef ff08 	bl	8008110 <HAL_PCD_EP_Flush>
 8018300:	4603      	mov	r3, r0
 8018302:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8018304:	7bfb      	ldrb	r3, [r7, #15]
 8018306:	4618      	mov	r0, r3
 8018308:	f000 f8e6 	bl	80184d8 <USBD_Get_USB_Status>
 801830c:	4603      	mov	r3, r0
 801830e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8018310:	7bbb      	ldrb	r3, [r7, #14]
}
 8018312:	4618      	mov	r0, r3
 8018314:	3710      	adds	r7, #16
 8018316:	46bd      	mov	sp, r7
 8018318:	bd80      	pop	{r7, pc}

0801831a <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801831a:	b580      	push	{r7, lr}
 801831c:	b084      	sub	sp, #16
 801831e:	af00      	add	r7, sp, #0
 8018320:	6078      	str	r0, [r7, #4]
 8018322:	460b      	mov	r3, r1
 8018324:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8018326:	2300      	movs	r3, #0
 8018328:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801832a:	2300      	movs	r3, #0
 801832c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 801832e:	687b      	ldr	r3, [r7, #4]
 8018330:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8018334:	78fa      	ldrb	r2, [r7, #3]
 8018336:	4611      	mov	r1, r2
 8018338:	4618      	mov	r0, r3
 801833a:	f7ef fe2f 	bl	8007f9c <HAL_PCD_EP_SetStall>
 801833e:	4603      	mov	r3, r0
 8018340:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8018342:	7bfb      	ldrb	r3, [r7, #15]
 8018344:	4618      	mov	r0, r3
 8018346:	f000 f8c7 	bl	80184d8 <USBD_Get_USB_Status>
 801834a:	4603      	mov	r3, r0
 801834c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801834e:	7bbb      	ldrb	r3, [r7, #14]
}
 8018350:	4618      	mov	r0, r3
 8018352:	3710      	adds	r7, #16
 8018354:	46bd      	mov	sp, r7
 8018356:	bd80      	pop	{r7, pc}

08018358 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8018358:	b580      	push	{r7, lr}
 801835a:	b084      	sub	sp, #16
 801835c:	af00      	add	r7, sp, #0
 801835e:	6078      	str	r0, [r7, #4]
 8018360:	460b      	mov	r3, r1
 8018362:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8018364:	2300      	movs	r3, #0
 8018366:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8018368:	2300      	movs	r3, #0
 801836a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 801836c:	687b      	ldr	r3, [r7, #4]
 801836e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8018372:	78fa      	ldrb	r2, [r7, #3]
 8018374:	4611      	mov	r1, r2
 8018376:	4618      	mov	r0, r3
 8018378:	f7ef fe74 	bl	8008064 <HAL_PCD_EP_ClrStall>
 801837c:	4603      	mov	r3, r0
 801837e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8018380:	7bfb      	ldrb	r3, [r7, #15]
 8018382:	4618      	mov	r0, r3
 8018384:	f000 f8a8 	bl	80184d8 <USBD_Get_USB_Status>
 8018388:	4603      	mov	r3, r0
 801838a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801838c:	7bbb      	ldrb	r3, [r7, #14]
}
 801838e:	4618      	mov	r0, r3
 8018390:	3710      	adds	r7, #16
 8018392:	46bd      	mov	sp, r7
 8018394:	bd80      	pop	{r7, pc}

08018396 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8018396:	b480      	push	{r7}
 8018398:	b085      	sub	sp, #20
 801839a:	af00      	add	r7, sp, #0
 801839c:	6078      	str	r0, [r7, #4]
 801839e:	460b      	mov	r3, r1
 80183a0:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 80183a2:	687b      	ldr	r3, [r7, #4]
 80183a4:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80183a8:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 80183aa:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80183ae:	2b00      	cmp	r3, #0
 80183b0:	da0b      	bge.n	80183ca <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 80183b2:	78fb      	ldrb	r3, [r7, #3]
 80183b4:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80183b8:	68f9      	ldr	r1, [r7, #12]
 80183ba:	4613      	mov	r3, r2
 80183bc:	00db      	lsls	r3, r3, #3
 80183be:	1a9b      	subs	r3, r3, r2
 80183c0:	009b      	lsls	r3, r3, #2
 80183c2:	440b      	add	r3, r1
 80183c4:	333e      	adds	r3, #62	; 0x3e
 80183c6:	781b      	ldrb	r3, [r3, #0]
 80183c8:	e00b      	b.n	80183e2 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 80183ca:	78fb      	ldrb	r3, [r7, #3]
 80183cc:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80183d0:	68f9      	ldr	r1, [r7, #12]
 80183d2:	4613      	mov	r3, r2
 80183d4:	00db      	lsls	r3, r3, #3
 80183d6:	1a9b      	subs	r3, r3, r2
 80183d8:	009b      	lsls	r3, r3, #2
 80183da:	440b      	add	r3, r1
 80183dc:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 80183e0:	781b      	ldrb	r3, [r3, #0]
  }
}
 80183e2:	4618      	mov	r0, r3
 80183e4:	3714      	adds	r7, #20
 80183e6:	46bd      	mov	sp, r7
 80183e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80183ec:	4770      	bx	lr

080183ee <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 80183ee:	b580      	push	{r7, lr}
 80183f0:	b084      	sub	sp, #16
 80183f2:	af00      	add	r7, sp, #0
 80183f4:	6078      	str	r0, [r7, #4]
 80183f6:	460b      	mov	r3, r1
 80183f8:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80183fa:	2300      	movs	r3, #0
 80183fc:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80183fe:	2300      	movs	r3, #0
 8018400:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8018402:	687b      	ldr	r3, [r7, #4]
 8018404:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8018408:	78fa      	ldrb	r2, [r7, #3]
 801840a:	4611      	mov	r1, r2
 801840c:	4618      	mov	r0, r3
 801840e:	f7ef fc41 	bl	8007c94 <HAL_PCD_SetAddress>
 8018412:	4603      	mov	r3, r0
 8018414:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8018416:	7bfb      	ldrb	r3, [r7, #15]
 8018418:	4618      	mov	r0, r3
 801841a:	f000 f85d 	bl	80184d8 <USBD_Get_USB_Status>
 801841e:	4603      	mov	r3, r0
 8018420:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8018422:	7bbb      	ldrb	r3, [r7, #14]
}
 8018424:	4618      	mov	r0, r3
 8018426:	3710      	adds	r7, #16
 8018428:	46bd      	mov	sp, r7
 801842a:	bd80      	pop	{r7, pc}

0801842c <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 801842c:	b580      	push	{r7, lr}
 801842e:	b086      	sub	sp, #24
 8018430:	af00      	add	r7, sp, #0
 8018432:	60f8      	str	r0, [r7, #12]
 8018434:	607a      	str	r2, [r7, #4]
 8018436:	603b      	str	r3, [r7, #0]
 8018438:	460b      	mov	r3, r1
 801843a:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801843c:	2300      	movs	r3, #0
 801843e:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8018440:	2300      	movs	r3, #0
 8018442:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8018444:	68fb      	ldr	r3, [r7, #12]
 8018446:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 801844a:	7af9      	ldrb	r1, [r7, #11]
 801844c:	683b      	ldr	r3, [r7, #0]
 801844e:	687a      	ldr	r2, [r7, #4]
 8018450:	f7ef fd5a 	bl	8007f08 <HAL_PCD_EP_Transmit>
 8018454:	4603      	mov	r3, r0
 8018456:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8018458:	7dfb      	ldrb	r3, [r7, #23]
 801845a:	4618      	mov	r0, r3
 801845c:	f000 f83c 	bl	80184d8 <USBD_Get_USB_Status>
 8018460:	4603      	mov	r3, r0
 8018462:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8018464:	7dbb      	ldrb	r3, [r7, #22]
}
 8018466:	4618      	mov	r0, r3
 8018468:	3718      	adds	r7, #24
 801846a:	46bd      	mov	sp, r7
 801846c:	bd80      	pop	{r7, pc}

0801846e <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 801846e:	b580      	push	{r7, lr}
 8018470:	b086      	sub	sp, #24
 8018472:	af00      	add	r7, sp, #0
 8018474:	60f8      	str	r0, [r7, #12]
 8018476:	607a      	str	r2, [r7, #4]
 8018478:	603b      	str	r3, [r7, #0]
 801847a:	460b      	mov	r3, r1
 801847c:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801847e:	2300      	movs	r3, #0
 8018480:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8018482:	2300      	movs	r3, #0
 8018484:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8018486:	68fb      	ldr	r3, [r7, #12]
 8018488:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 801848c:	7af9      	ldrb	r1, [r7, #11]
 801848e:	683b      	ldr	r3, [r7, #0]
 8018490:	687a      	ldr	r2, [r7, #4]
 8018492:	f7ef fcd6 	bl	8007e42 <HAL_PCD_EP_Receive>
 8018496:	4603      	mov	r3, r0
 8018498:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801849a:	7dfb      	ldrb	r3, [r7, #23]
 801849c:	4618      	mov	r0, r3
 801849e:	f000 f81b 	bl	80184d8 <USBD_Get_USB_Status>
 80184a2:	4603      	mov	r3, r0
 80184a4:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 80184a6:	7dbb      	ldrb	r3, [r7, #22]
}
 80184a8:	4618      	mov	r0, r3
 80184aa:	3718      	adds	r7, #24
 80184ac:	46bd      	mov	sp, r7
 80184ae:	bd80      	pop	{r7, pc}

080184b0 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80184b0:	b580      	push	{r7, lr}
 80184b2:	b082      	sub	sp, #8
 80184b4:	af00      	add	r7, sp, #0
 80184b6:	6078      	str	r0, [r7, #4]
 80184b8:	460b      	mov	r3, r1
 80184ba:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 80184bc:	687b      	ldr	r3, [r7, #4]
 80184be:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80184c2:	78fa      	ldrb	r2, [r7, #3]
 80184c4:	4611      	mov	r1, r2
 80184c6:	4618      	mov	r0, r3
 80184c8:	f7ef fd06 	bl	8007ed8 <HAL_PCD_EP_GetRxCount>
 80184cc:	4603      	mov	r3, r0
}
 80184ce:	4618      	mov	r0, r3
 80184d0:	3708      	adds	r7, #8
 80184d2:	46bd      	mov	sp, r7
 80184d4:	bd80      	pop	{r7, pc}
	...

080184d8 <USBD_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 80184d8:	b480      	push	{r7}
 80184da:	b085      	sub	sp, #20
 80184dc:	af00      	add	r7, sp, #0
 80184de:	4603      	mov	r3, r0
 80184e0:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80184e2:	2300      	movs	r3, #0
 80184e4:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 80184e6:	79fb      	ldrb	r3, [r7, #7]
 80184e8:	2b03      	cmp	r3, #3
 80184ea:	d817      	bhi.n	801851c <USBD_Get_USB_Status+0x44>
 80184ec:	a201      	add	r2, pc, #4	; (adr r2, 80184f4 <USBD_Get_USB_Status+0x1c>)
 80184ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80184f2:	bf00      	nop
 80184f4:	08018505 	.word	0x08018505
 80184f8:	0801850b 	.word	0x0801850b
 80184fc:	08018511 	.word	0x08018511
 8018500:	08018517 	.word	0x08018517
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8018504:	2300      	movs	r3, #0
 8018506:	73fb      	strb	r3, [r7, #15]
    break;
 8018508:	e00b      	b.n	8018522 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 801850a:	2303      	movs	r3, #3
 801850c:	73fb      	strb	r3, [r7, #15]
    break;
 801850e:	e008      	b.n	8018522 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8018510:	2301      	movs	r3, #1
 8018512:	73fb      	strb	r3, [r7, #15]
    break;
 8018514:	e005      	b.n	8018522 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8018516:	2303      	movs	r3, #3
 8018518:	73fb      	strb	r3, [r7, #15]
    break;
 801851a:	e002      	b.n	8018522 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 801851c:	2303      	movs	r3, #3
 801851e:	73fb      	strb	r3, [r7, #15]
    break;
 8018520:	bf00      	nop
  }
  return usb_status;
 8018522:	7bfb      	ldrb	r3, [r7, #15]
}
 8018524:	4618      	mov	r0, r3
 8018526:	3714      	adds	r7, #20
 8018528:	46bd      	mov	sp, r7
 801852a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801852e:	4770      	bx	lr

08018530 <__errno>:
 8018530:	4b01      	ldr	r3, [pc, #4]	; (8018538 <__errno+0x8>)
 8018532:	6818      	ldr	r0, [r3, #0]
 8018534:	4770      	bx	lr
 8018536:	bf00      	nop
 8018538:	24000174 	.word	0x24000174

0801853c <__libc_init_array>:
 801853c:	b570      	push	{r4, r5, r6, lr}
 801853e:	4e0d      	ldr	r6, [pc, #52]	; (8018574 <__libc_init_array+0x38>)
 8018540:	4c0d      	ldr	r4, [pc, #52]	; (8018578 <__libc_init_array+0x3c>)
 8018542:	1ba4      	subs	r4, r4, r6
 8018544:	10a4      	asrs	r4, r4, #2
 8018546:	2500      	movs	r5, #0
 8018548:	42a5      	cmp	r5, r4
 801854a:	d109      	bne.n	8018560 <__libc_init_array+0x24>
 801854c:	4e0b      	ldr	r6, [pc, #44]	; (801857c <__libc_init_array+0x40>)
 801854e:	4c0c      	ldr	r4, [pc, #48]	; (8018580 <__libc_init_array+0x44>)
 8018550:	f001 f972 	bl	8019838 <_init>
 8018554:	1ba4      	subs	r4, r4, r6
 8018556:	10a4      	asrs	r4, r4, #2
 8018558:	2500      	movs	r5, #0
 801855a:	42a5      	cmp	r5, r4
 801855c:	d105      	bne.n	801856a <__libc_init_array+0x2e>
 801855e:	bd70      	pop	{r4, r5, r6, pc}
 8018560:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8018564:	4798      	blx	r3
 8018566:	3501      	adds	r5, #1
 8018568:	e7ee      	b.n	8018548 <__libc_init_array+0xc>
 801856a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 801856e:	4798      	blx	r3
 8018570:	3501      	adds	r5, #1
 8018572:	e7f2      	b.n	801855a <__libc_init_array+0x1e>
 8018574:	0801a1ac 	.word	0x0801a1ac
 8018578:	0801a1ac 	.word	0x0801a1ac
 801857c:	0801a1ac 	.word	0x0801a1ac
 8018580:	0801a1b0 	.word	0x0801a1b0

08018584 <malloc>:
 8018584:	4b02      	ldr	r3, [pc, #8]	; (8018590 <malloc+0xc>)
 8018586:	4601      	mov	r1, r0
 8018588:	6818      	ldr	r0, [r3, #0]
 801858a:	f000 b86d 	b.w	8018668 <_malloc_r>
 801858e:	bf00      	nop
 8018590:	24000174 	.word	0x24000174

08018594 <free>:
 8018594:	4b02      	ldr	r3, [pc, #8]	; (80185a0 <free+0xc>)
 8018596:	4601      	mov	r1, r0
 8018598:	6818      	ldr	r0, [r3, #0]
 801859a:	f000 b817 	b.w	80185cc <_free_r>
 801859e:	bf00      	nop
 80185a0:	24000174 	.word	0x24000174

080185a4 <memcpy>:
 80185a4:	b510      	push	{r4, lr}
 80185a6:	1e43      	subs	r3, r0, #1
 80185a8:	440a      	add	r2, r1
 80185aa:	4291      	cmp	r1, r2
 80185ac:	d100      	bne.n	80185b0 <memcpy+0xc>
 80185ae:	bd10      	pop	{r4, pc}
 80185b0:	f811 4b01 	ldrb.w	r4, [r1], #1
 80185b4:	f803 4f01 	strb.w	r4, [r3, #1]!
 80185b8:	e7f7      	b.n	80185aa <memcpy+0x6>

080185ba <memset>:
 80185ba:	4402      	add	r2, r0
 80185bc:	4603      	mov	r3, r0
 80185be:	4293      	cmp	r3, r2
 80185c0:	d100      	bne.n	80185c4 <memset+0xa>
 80185c2:	4770      	bx	lr
 80185c4:	f803 1b01 	strb.w	r1, [r3], #1
 80185c8:	e7f9      	b.n	80185be <memset+0x4>
	...

080185cc <_free_r>:
 80185cc:	b538      	push	{r3, r4, r5, lr}
 80185ce:	4605      	mov	r5, r0
 80185d0:	2900      	cmp	r1, #0
 80185d2:	d045      	beq.n	8018660 <_free_r+0x94>
 80185d4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80185d8:	1f0c      	subs	r4, r1, #4
 80185da:	2b00      	cmp	r3, #0
 80185dc:	bfb8      	it	lt
 80185de:	18e4      	addlt	r4, r4, r3
 80185e0:	f000 fc1a 	bl	8018e18 <__malloc_lock>
 80185e4:	4a1f      	ldr	r2, [pc, #124]	; (8018664 <_free_r+0x98>)
 80185e6:	6813      	ldr	r3, [r2, #0]
 80185e8:	4610      	mov	r0, r2
 80185ea:	b933      	cbnz	r3, 80185fa <_free_r+0x2e>
 80185ec:	6063      	str	r3, [r4, #4]
 80185ee:	6014      	str	r4, [r2, #0]
 80185f0:	4628      	mov	r0, r5
 80185f2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80185f6:	f000 bc10 	b.w	8018e1a <__malloc_unlock>
 80185fa:	42a3      	cmp	r3, r4
 80185fc:	d90c      	bls.n	8018618 <_free_r+0x4c>
 80185fe:	6821      	ldr	r1, [r4, #0]
 8018600:	1862      	adds	r2, r4, r1
 8018602:	4293      	cmp	r3, r2
 8018604:	bf04      	itt	eq
 8018606:	681a      	ldreq	r2, [r3, #0]
 8018608:	685b      	ldreq	r3, [r3, #4]
 801860a:	6063      	str	r3, [r4, #4]
 801860c:	bf04      	itt	eq
 801860e:	1852      	addeq	r2, r2, r1
 8018610:	6022      	streq	r2, [r4, #0]
 8018612:	6004      	str	r4, [r0, #0]
 8018614:	e7ec      	b.n	80185f0 <_free_r+0x24>
 8018616:	4613      	mov	r3, r2
 8018618:	685a      	ldr	r2, [r3, #4]
 801861a:	b10a      	cbz	r2, 8018620 <_free_r+0x54>
 801861c:	42a2      	cmp	r2, r4
 801861e:	d9fa      	bls.n	8018616 <_free_r+0x4a>
 8018620:	6819      	ldr	r1, [r3, #0]
 8018622:	1858      	adds	r0, r3, r1
 8018624:	42a0      	cmp	r0, r4
 8018626:	d10b      	bne.n	8018640 <_free_r+0x74>
 8018628:	6820      	ldr	r0, [r4, #0]
 801862a:	4401      	add	r1, r0
 801862c:	1858      	adds	r0, r3, r1
 801862e:	4282      	cmp	r2, r0
 8018630:	6019      	str	r1, [r3, #0]
 8018632:	d1dd      	bne.n	80185f0 <_free_r+0x24>
 8018634:	6810      	ldr	r0, [r2, #0]
 8018636:	6852      	ldr	r2, [r2, #4]
 8018638:	605a      	str	r2, [r3, #4]
 801863a:	4401      	add	r1, r0
 801863c:	6019      	str	r1, [r3, #0]
 801863e:	e7d7      	b.n	80185f0 <_free_r+0x24>
 8018640:	d902      	bls.n	8018648 <_free_r+0x7c>
 8018642:	230c      	movs	r3, #12
 8018644:	602b      	str	r3, [r5, #0]
 8018646:	e7d3      	b.n	80185f0 <_free_r+0x24>
 8018648:	6820      	ldr	r0, [r4, #0]
 801864a:	1821      	adds	r1, r4, r0
 801864c:	428a      	cmp	r2, r1
 801864e:	bf04      	itt	eq
 8018650:	6811      	ldreq	r1, [r2, #0]
 8018652:	6852      	ldreq	r2, [r2, #4]
 8018654:	6062      	str	r2, [r4, #4]
 8018656:	bf04      	itt	eq
 8018658:	1809      	addeq	r1, r1, r0
 801865a:	6021      	streq	r1, [r4, #0]
 801865c:	605c      	str	r4, [r3, #4]
 801865e:	e7c7      	b.n	80185f0 <_free_r+0x24>
 8018660:	bd38      	pop	{r3, r4, r5, pc}
 8018662:	bf00      	nop
 8018664:	24000b84 	.word	0x24000b84

08018668 <_malloc_r>:
 8018668:	b570      	push	{r4, r5, r6, lr}
 801866a:	1ccd      	adds	r5, r1, #3
 801866c:	f025 0503 	bic.w	r5, r5, #3
 8018670:	3508      	adds	r5, #8
 8018672:	2d0c      	cmp	r5, #12
 8018674:	bf38      	it	cc
 8018676:	250c      	movcc	r5, #12
 8018678:	2d00      	cmp	r5, #0
 801867a:	4606      	mov	r6, r0
 801867c:	db01      	blt.n	8018682 <_malloc_r+0x1a>
 801867e:	42a9      	cmp	r1, r5
 8018680:	d903      	bls.n	801868a <_malloc_r+0x22>
 8018682:	230c      	movs	r3, #12
 8018684:	6033      	str	r3, [r6, #0]
 8018686:	2000      	movs	r0, #0
 8018688:	bd70      	pop	{r4, r5, r6, pc}
 801868a:	f000 fbc5 	bl	8018e18 <__malloc_lock>
 801868e:	4a21      	ldr	r2, [pc, #132]	; (8018714 <_malloc_r+0xac>)
 8018690:	6814      	ldr	r4, [r2, #0]
 8018692:	4621      	mov	r1, r4
 8018694:	b991      	cbnz	r1, 80186bc <_malloc_r+0x54>
 8018696:	4c20      	ldr	r4, [pc, #128]	; (8018718 <_malloc_r+0xb0>)
 8018698:	6823      	ldr	r3, [r4, #0]
 801869a:	b91b      	cbnz	r3, 80186a4 <_malloc_r+0x3c>
 801869c:	4630      	mov	r0, r6
 801869e:	f000 f8b9 	bl	8018814 <_sbrk_r>
 80186a2:	6020      	str	r0, [r4, #0]
 80186a4:	4629      	mov	r1, r5
 80186a6:	4630      	mov	r0, r6
 80186a8:	f000 f8b4 	bl	8018814 <_sbrk_r>
 80186ac:	1c43      	adds	r3, r0, #1
 80186ae:	d124      	bne.n	80186fa <_malloc_r+0x92>
 80186b0:	230c      	movs	r3, #12
 80186b2:	6033      	str	r3, [r6, #0]
 80186b4:	4630      	mov	r0, r6
 80186b6:	f000 fbb0 	bl	8018e1a <__malloc_unlock>
 80186ba:	e7e4      	b.n	8018686 <_malloc_r+0x1e>
 80186bc:	680b      	ldr	r3, [r1, #0]
 80186be:	1b5b      	subs	r3, r3, r5
 80186c0:	d418      	bmi.n	80186f4 <_malloc_r+0x8c>
 80186c2:	2b0b      	cmp	r3, #11
 80186c4:	d90f      	bls.n	80186e6 <_malloc_r+0x7e>
 80186c6:	600b      	str	r3, [r1, #0]
 80186c8:	50cd      	str	r5, [r1, r3]
 80186ca:	18cc      	adds	r4, r1, r3
 80186cc:	4630      	mov	r0, r6
 80186ce:	f000 fba4 	bl	8018e1a <__malloc_unlock>
 80186d2:	f104 000b 	add.w	r0, r4, #11
 80186d6:	1d23      	adds	r3, r4, #4
 80186d8:	f020 0007 	bic.w	r0, r0, #7
 80186dc:	1ac3      	subs	r3, r0, r3
 80186de:	d0d3      	beq.n	8018688 <_malloc_r+0x20>
 80186e0:	425a      	negs	r2, r3
 80186e2:	50e2      	str	r2, [r4, r3]
 80186e4:	e7d0      	b.n	8018688 <_malloc_r+0x20>
 80186e6:	428c      	cmp	r4, r1
 80186e8:	684b      	ldr	r3, [r1, #4]
 80186ea:	bf16      	itet	ne
 80186ec:	6063      	strne	r3, [r4, #4]
 80186ee:	6013      	streq	r3, [r2, #0]
 80186f0:	460c      	movne	r4, r1
 80186f2:	e7eb      	b.n	80186cc <_malloc_r+0x64>
 80186f4:	460c      	mov	r4, r1
 80186f6:	6849      	ldr	r1, [r1, #4]
 80186f8:	e7cc      	b.n	8018694 <_malloc_r+0x2c>
 80186fa:	1cc4      	adds	r4, r0, #3
 80186fc:	f024 0403 	bic.w	r4, r4, #3
 8018700:	42a0      	cmp	r0, r4
 8018702:	d005      	beq.n	8018710 <_malloc_r+0xa8>
 8018704:	1a21      	subs	r1, r4, r0
 8018706:	4630      	mov	r0, r6
 8018708:	f000 f884 	bl	8018814 <_sbrk_r>
 801870c:	3001      	adds	r0, #1
 801870e:	d0cf      	beq.n	80186b0 <_malloc_r+0x48>
 8018710:	6025      	str	r5, [r4, #0]
 8018712:	e7db      	b.n	80186cc <_malloc_r+0x64>
 8018714:	24000b84 	.word	0x24000b84
 8018718:	24000b88 	.word	0x24000b88

0801871c <iprintf>:
 801871c:	b40f      	push	{r0, r1, r2, r3}
 801871e:	4b0a      	ldr	r3, [pc, #40]	; (8018748 <iprintf+0x2c>)
 8018720:	b513      	push	{r0, r1, r4, lr}
 8018722:	681c      	ldr	r4, [r3, #0]
 8018724:	b124      	cbz	r4, 8018730 <iprintf+0x14>
 8018726:	69a3      	ldr	r3, [r4, #24]
 8018728:	b913      	cbnz	r3, 8018730 <iprintf+0x14>
 801872a:	4620      	mov	r0, r4
 801872c:	f000 fa86 	bl	8018c3c <__sinit>
 8018730:	ab05      	add	r3, sp, #20
 8018732:	9a04      	ldr	r2, [sp, #16]
 8018734:	68a1      	ldr	r1, [r4, #8]
 8018736:	9301      	str	r3, [sp, #4]
 8018738:	4620      	mov	r0, r4
 801873a:	f000 fceb 	bl	8019114 <_vfiprintf_r>
 801873e:	b002      	add	sp, #8
 8018740:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8018744:	b004      	add	sp, #16
 8018746:	4770      	bx	lr
 8018748:	24000174 	.word	0x24000174

0801874c <_puts_r>:
 801874c:	b570      	push	{r4, r5, r6, lr}
 801874e:	460e      	mov	r6, r1
 8018750:	4605      	mov	r5, r0
 8018752:	b118      	cbz	r0, 801875c <_puts_r+0x10>
 8018754:	6983      	ldr	r3, [r0, #24]
 8018756:	b90b      	cbnz	r3, 801875c <_puts_r+0x10>
 8018758:	f000 fa70 	bl	8018c3c <__sinit>
 801875c:	69ab      	ldr	r3, [r5, #24]
 801875e:	68ac      	ldr	r4, [r5, #8]
 8018760:	b913      	cbnz	r3, 8018768 <_puts_r+0x1c>
 8018762:	4628      	mov	r0, r5
 8018764:	f000 fa6a 	bl	8018c3c <__sinit>
 8018768:	4b23      	ldr	r3, [pc, #140]	; (80187f8 <_puts_r+0xac>)
 801876a:	429c      	cmp	r4, r3
 801876c:	d117      	bne.n	801879e <_puts_r+0x52>
 801876e:	686c      	ldr	r4, [r5, #4]
 8018770:	89a3      	ldrh	r3, [r4, #12]
 8018772:	071b      	lsls	r3, r3, #28
 8018774:	d51d      	bpl.n	80187b2 <_puts_r+0x66>
 8018776:	6923      	ldr	r3, [r4, #16]
 8018778:	b1db      	cbz	r3, 80187b2 <_puts_r+0x66>
 801877a:	3e01      	subs	r6, #1
 801877c:	68a3      	ldr	r3, [r4, #8]
 801877e:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8018782:	3b01      	subs	r3, #1
 8018784:	60a3      	str	r3, [r4, #8]
 8018786:	b9e9      	cbnz	r1, 80187c4 <_puts_r+0x78>
 8018788:	2b00      	cmp	r3, #0
 801878a:	da2e      	bge.n	80187ea <_puts_r+0x9e>
 801878c:	4622      	mov	r2, r4
 801878e:	210a      	movs	r1, #10
 8018790:	4628      	mov	r0, r5
 8018792:	f000 f8a3 	bl	80188dc <__swbuf_r>
 8018796:	3001      	adds	r0, #1
 8018798:	d011      	beq.n	80187be <_puts_r+0x72>
 801879a:	200a      	movs	r0, #10
 801879c:	e011      	b.n	80187c2 <_puts_r+0x76>
 801879e:	4b17      	ldr	r3, [pc, #92]	; (80187fc <_puts_r+0xb0>)
 80187a0:	429c      	cmp	r4, r3
 80187a2:	d101      	bne.n	80187a8 <_puts_r+0x5c>
 80187a4:	68ac      	ldr	r4, [r5, #8]
 80187a6:	e7e3      	b.n	8018770 <_puts_r+0x24>
 80187a8:	4b15      	ldr	r3, [pc, #84]	; (8018800 <_puts_r+0xb4>)
 80187aa:	429c      	cmp	r4, r3
 80187ac:	bf08      	it	eq
 80187ae:	68ec      	ldreq	r4, [r5, #12]
 80187b0:	e7de      	b.n	8018770 <_puts_r+0x24>
 80187b2:	4621      	mov	r1, r4
 80187b4:	4628      	mov	r0, r5
 80187b6:	f000 f8e3 	bl	8018980 <__swsetup_r>
 80187ba:	2800      	cmp	r0, #0
 80187bc:	d0dd      	beq.n	801877a <_puts_r+0x2e>
 80187be:	f04f 30ff 	mov.w	r0, #4294967295
 80187c2:	bd70      	pop	{r4, r5, r6, pc}
 80187c4:	2b00      	cmp	r3, #0
 80187c6:	da04      	bge.n	80187d2 <_puts_r+0x86>
 80187c8:	69a2      	ldr	r2, [r4, #24]
 80187ca:	429a      	cmp	r2, r3
 80187cc:	dc06      	bgt.n	80187dc <_puts_r+0x90>
 80187ce:	290a      	cmp	r1, #10
 80187d0:	d004      	beq.n	80187dc <_puts_r+0x90>
 80187d2:	6823      	ldr	r3, [r4, #0]
 80187d4:	1c5a      	adds	r2, r3, #1
 80187d6:	6022      	str	r2, [r4, #0]
 80187d8:	7019      	strb	r1, [r3, #0]
 80187da:	e7cf      	b.n	801877c <_puts_r+0x30>
 80187dc:	4622      	mov	r2, r4
 80187de:	4628      	mov	r0, r5
 80187e0:	f000 f87c 	bl	80188dc <__swbuf_r>
 80187e4:	3001      	adds	r0, #1
 80187e6:	d1c9      	bne.n	801877c <_puts_r+0x30>
 80187e8:	e7e9      	b.n	80187be <_puts_r+0x72>
 80187ea:	6823      	ldr	r3, [r4, #0]
 80187ec:	200a      	movs	r0, #10
 80187ee:	1c5a      	adds	r2, r3, #1
 80187f0:	6022      	str	r2, [r4, #0]
 80187f2:	7018      	strb	r0, [r3, #0]
 80187f4:	e7e5      	b.n	80187c2 <_puts_r+0x76>
 80187f6:	bf00      	nop
 80187f8:	0801a130 	.word	0x0801a130
 80187fc:	0801a150 	.word	0x0801a150
 8018800:	0801a110 	.word	0x0801a110

08018804 <puts>:
 8018804:	4b02      	ldr	r3, [pc, #8]	; (8018810 <puts+0xc>)
 8018806:	4601      	mov	r1, r0
 8018808:	6818      	ldr	r0, [r3, #0]
 801880a:	f7ff bf9f 	b.w	801874c <_puts_r>
 801880e:	bf00      	nop
 8018810:	24000174 	.word	0x24000174

08018814 <_sbrk_r>:
 8018814:	b538      	push	{r3, r4, r5, lr}
 8018816:	4c06      	ldr	r4, [pc, #24]	; (8018830 <_sbrk_r+0x1c>)
 8018818:	2300      	movs	r3, #0
 801881a:	4605      	mov	r5, r0
 801881c:	4608      	mov	r0, r1
 801881e:	6023      	str	r3, [r4, #0]
 8018820:	f7ea fdf8 	bl	8003414 <_sbrk>
 8018824:	1c43      	adds	r3, r0, #1
 8018826:	d102      	bne.n	801882e <_sbrk_r+0x1a>
 8018828:	6823      	ldr	r3, [r4, #0]
 801882a:	b103      	cbz	r3, 801882e <_sbrk_r+0x1a>
 801882c:	602b      	str	r3, [r5, #0]
 801882e:	bd38      	pop	{r3, r4, r5, pc}
 8018830:	24002484 	.word	0x24002484

08018834 <sniprintf>:
 8018834:	b40c      	push	{r2, r3}
 8018836:	b530      	push	{r4, r5, lr}
 8018838:	4b17      	ldr	r3, [pc, #92]	; (8018898 <sniprintf+0x64>)
 801883a:	1e0c      	subs	r4, r1, #0
 801883c:	b09d      	sub	sp, #116	; 0x74
 801883e:	681d      	ldr	r5, [r3, #0]
 8018840:	da08      	bge.n	8018854 <sniprintf+0x20>
 8018842:	238b      	movs	r3, #139	; 0x8b
 8018844:	602b      	str	r3, [r5, #0]
 8018846:	f04f 30ff 	mov.w	r0, #4294967295
 801884a:	b01d      	add	sp, #116	; 0x74
 801884c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8018850:	b002      	add	sp, #8
 8018852:	4770      	bx	lr
 8018854:	f44f 7302 	mov.w	r3, #520	; 0x208
 8018858:	f8ad 3014 	strh.w	r3, [sp, #20]
 801885c:	bf14      	ite	ne
 801885e:	f104 33ff 	addne.w	r3, r4, #4294967295
 8018862:	4623      	moveq	r3, r4
 8018864:	9304      	str	r3, [sp, #16]
 8018866:	9307      	str	r3, [sp, #28]
 8018868:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801886c:	9002      	str	r0, [sp, #8]
 801886e:	9006      	str	r0, [sp, #24]
 8018870:	f8ad 3016 	strh.w	r3, [sp, #22]
 8018874:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8018876:	ab21      	add	r3, sp, #132	; 0x84
 8018878:	a902      	add	r1, sp, #8
 801887a:	4628      	mov	r0, r5
 801887c:	9301      	str	r3, [sp, #4]
 801887e:	f000 fb27 	bl	8018ed0 <_svfiprintf_r>
 8018882:	1c43      	adds	r3, r0, #1
 8018884:	bfbc      	itt	lt
 8018886:	238b      	movlt	r3, #139	; 0x8b
 8018888:	602b      	strlt	r3, [r5, #0]
 801888a:	2c00      	cmp	r4, #0
 801888c:	d0dd      	beq.n	801884a <sniprintf+0x16>
 801888e:	9b02      	ldr	r3, [sp, #8]
 8018890:	2200      	movs	r2, #0
 8018892:	701a      	strb	r2, [r3, #0]
 8018894:	e7d9      	b.n	801884a <sniprintf+0x16>
 8018896:	bf00      	nop
 8018898:	24000174 	.word	0x24000174

0801889c <siprintf>:
 801889c:	b40e      	push	{r1, r2, r3}
 801889e:	b500      	push	{lr}
 80188a0:	b09c      	sub	sp, #112	; 0x70
 80188a2:	ab1d      	add	r3, sp, #116	; 0x74
 80188a4:	9002      	str	r0, [sp, #8]
 80188a6:	9006      	str	r0, [sp, #24]
 80188a8:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80188ac:	4809      	ldr	r0, [pc, #36]	; (80188d4 <siprintf+0x38>)
 80188ae:	9107      	str	r1, [sp, #28]
 80188b0:	9104      	str	r1, [sp, #16]
 80188b2:	4909      	ldr	r1, [pc, #36]	; (80188d8 <siprintf+0x3c>)
 80188b4:	f853 2b04 	ldr.w	r2, [r3], #4
 80188b8:	9105      	str	r1, [sp, #20]
 80188ba:	6800      	ldr	r0, [r0, #0]
 80188bc:	9301      	str	r3, [sp, #4]
 80188be:	a902      	add	r1, sp, #8
 80188c0:	f000 fb06 	bl	8018ed0 <_svfiprintf_r>
 80188c4:	9b02      	ldr	r3, [sp, #8]
 80188c6:	2200      	movs	r2, #0
 80188c8:	701a      	strb	r2, [r3, #0]
 80188ca:	b01c      	add	sp, #112	; 0x70
 80188cc:	f85d eb04 	ldr.w	lr, [sp], #4
 80188d0:	b003      	add	sp, #12
 80188d2:	4770      	bx	lr
 80188d4:	24000174 	.word	0x24000174
 80188d8:	ffff0208 	.word	0xffff0208

080188dc <__swbuf_r>:
 80188dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80188de:	460e      	mov	r6, r1
 80188e0:	4614      	mov	r4, r2
 80188e2:	4605      	mov	r5, r0
 80188e4:	b118      	cbz	r0, 80188ee <__swbuf_r+0x12>
 80188e6:	6983      	ldr	r3, [r0, #24]
 80188e8:	b90b      	cbnz	r3, 80188ee <__swbuf_r+0x12>
 80188ea:	f000 f9a7 	bl	8018c3c <__sinit>
 80188ee:	4b21      	ldr	r3, [pc, #132]	; (8018974 <__swbuf_r+0x98>)
 80188f0:	429c      	cmp	r4, r3
 80188f2:	d12a      	bne.n	801894a <__swbuf_r+0x6e>
 80188f4:	686c      	ldr	r4, [r5, #4]
 80188f6:	69a3      	ldr	r3, [r4, #24]
 80188f8:	60a3      	str	r3, [r4, #8]
 80188fa:	89a3      	ldrh	r3, [r4, #12]
 80188fc:	071a      	lsls	r2, r3, #28
 80188fe:	d52e      	bpl.n	801895e <__swbuf_r+0x82>
 8018900:	6923      	ldr	r3, [r4, #16]
 8018902:	b363      	cbz	r3, 801895e <__swbuf_r+0x82>
 8018904:	6923      	ldr	r3, [r4, #16]
 8018906:	6820      	ldr	r0, [r4, #0]
 8018908:	1ac0      	subs	r0, r0, r3
 801890a:	6963      	ldr	r3, [r4, #20]
 801890c:	b2f6      	uxtb	r6, r6
 801890e:	4283      	cmp	r3, r0
 8018910:	4637      	mov	r7, r6
 8018912:	dc04      	bgt.n	801891e <__swbuf_r+0x42>
 8018914:	4621      	mov	r1, r4
 8018916:	4628      	mov	r0, r5
 8018918:	f000 f926 	bl	8018b68 <_fflush_r>
 801891c:	bb28      	cbnz	r0, 801896a <__swbuf_r+0x8e>
 801891e:	68a3      	ldr	r3, [r4, #8]
 8018920:	3b01      	subs	r3, #1
 8018922:	60a3      	str	r3, [r4, #8]
 8018924:	6823      	ldr	r3, [r4, #0]
 8018926:	1c5a      	adds	r2, r3, #1
 8018928:	6022      	str	r2, [r4, #0]
 801892a:	701e      	strb	r6, [r3, #0]
 801892c:	6963      	ldr	r3, [r4, #20]
 801892e:	3001      	adds	r0, #1
 8018930:	4283      	cmp	r3, r0
 8018932:	d004      	beq.n	801893e <__swbuf_r+0x62>
 8018934:	89a3      	ldrh	r3, [r4, #12]
 8018936:	07db      	lsls	r3, r3, #31
 8018938:	d519      	bpl.n	801896e <__swbuf_r+0x92>
 801893a:	2e0a      	cmp	r6, #10
 801893c:	d117      	bne.n	801896e <__swbuf_r+0x92>
 801893e:	4621      	mov	r1, r4
 8018940:	4628      	mov	r0, r5
 8018942:	f000 f911 	bl	8018b68 <_fflush_r>
 8018946:	b190      	cbz	r0, 801896e <__swbuf_r+0x92>
 8018948:	e00f      	b.n	801896a <__swbuf_r+0x8e>
 801894a:	4b0b      	ldr	r3, [pc, #44]	; (8018978 <__swbuf_r+0x9c>)
 801894c:	429c      	cmp	r4, r3
 801894e:	d101      	bne.n	8018954 <__swbuf_r+0x78>
 8018950:	68ac      	ldr	r4, [r5, #8]
 8018952:	e7d0      	b.n	80188f6 <__swbuf_r+0x1a>
 8018954:	4b09      	ldr	r3, [pc, #36]	; (801897c <__swbuf_r+0xa0>)
 8018956:	429c      	cmp	r4, r3
 8018958:	bf08      	it	eq
 801895a:	68ec      	ldreq	r4, [r5, #12]
 801895c:	e7cb      	b.n	80188f6 <__swbuf_r+0x1a>
 801895e:	4621      	mov	r1, r4
 8018960:	4628      	mov	r0, r5
 8018962:	f000 f80d 	bl	8018980 <__swsetup_r>
 8018966:	2800      	cmp	r0, #0
 8018968:	d0cc      	beq.n	8018904 <__swbuf_r+0x28>
 801896a:	f04f 37ff 	mov.w	r7, #4294967295
 801896e:	4638      	mov	r0, r7
 8018970:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8018972:	bf00      	nop
 8018974:	0801a130 	.word	0x0801a130
 8018978:	0801a150 	.word	0x0801a150
 801897c:	0801a110 	.word	0x0801a110

08018980 <__swsetup_r>:
 8018980:	4b32      	ldr	r3, [pc, #200]	; (8018a4c <__swsetup_r+0xcc>)
 8018982:	b570      	push	{r4, r5, r6, lr}
 8018984:	681d      	ldr	r5, [r3, #0]
 8018986:	4606      	mov	r6, r0
 8018988:	460c      	mov	r4, r1
 801898a:	b125      	cbz	r5, 8018996 <__swsetup_r+0x16>
 801898c:	69ab      	ldr	r3, [r5, #24]
 801898e:	b913      	cbnz	r3, 8018996 <__swsetup_r+0x16>
 8018990:	4628      	mov	r0, r5
 8018992:	f000 f953 	bl	8018c3c <__sinit>
 8018996:	4b2e      	ldr	r3, [pc, #184]	; (8018a50 <__swsetup_r+0xd0>)
 8018998:	429c      	cmp	r4, r3
 801899a:	d10f      	bne.n	80189bc <__swsetup_r+0x3c>
 801899c:	686c      	ldr	r4, [r5, #4]
 801899e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80189a2:	b29a      	uxth	r2, r3
 80189a4:	0715      	lsls	r5, r2, #28
 80189a6:	d42c      	bmi.n	8018a02 <__swsetup_r+0x82>
 80189a8:	06d0      	lsls	r0, r2, #27
 80189aa:	d411      	bmi.n	80189d0 <__swsetup_r+0x50>
 80189ac:	2209      	movs	r2, #9
 80189ae:	6032      	str	r2, [r6, #0]
 80189b0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80189b4:	81a3      	strh	r3, [r4, #12]
 80189b6:	f04f 30ff 	mov.w	r0, #4294967295
 80189ba:	e03e      	b.n	8018a3a <__swsetup_r+0xba>
 80189bc:	4b25      	ldr	r3, [pc, #148]	; (8018a54 <__swsetup_r+0xd4>)
 80189be:	429c      	cmp	r4, r3
 80189c0:	d101      	bne.n	80189c6 <__swsetup_r+0x46>
 80189c2:	68ac      	ldr	r4, [r5, #8]
 80189c4:	e7eb      	b.n	801899e <__swsetup_r+0x1e>
 80189c6:	4b24      	ldr	r3, [pc, #144]	; (8018a58 <__swsetup_r+0xd8>)
 80189c8:	429c      	cmp	r4, r3
 80189ca:	bf08      	it	eq
 80189cc:	68ec      	ldreq	r4, [r5, #12]
 80189ce:	e7e6      	b.n	801899e <__swsetup_r+0x1e>
 80189d0:	0751      	lsls	r1, r2, #29
 80189d2:	d512      	bpl.n	80189fa <__swsetup_r+0x7a>
 80189d4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80189d6:	b141      	cbz	r1, 80189ea <__swsetup_r+0x6a>
 80189d8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80189dc:	4299      	cmp	r1, r3
 80189de:	d002      	beq.n	80189e6 <__swsetup_r+0x66>
 80189e0:	4630      	mov	r0, r6
 80189e2:	f7ff fdf3 	bl	80185cc <_free_r>
 80189e6:	2300      	movs	r3, #0
 80189e8:	6363      	str	r3, [r4, #52]	; 0x34
 80189ea:	89a3      	ldrh	r3, [r4, #12]
 80189ec:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80189f0:	81a3      	strh	r3, [r4, #12]
 80189f2:	2300      	movs	r3, #0
 80189f4:	6063      	str	r3, [r4, #4]
 80189f6:	6923      	ldr	r3, [r4, #16]
 80189f8:	6023      	str	r3, [r4, #0]
 80189fa:	89a3      	ldrh	r3, [r4, #12]
 80189fc:	f043 0308 	orr.w	r3, r3, #8
 8018a00:	81a3      	strh	r3, [r4, #12]
 8018a02:	6923      	ldr	r3, [r4, #16]
 8018a04:	b94b      	cbnz	r3, 8018a1a <__swsetup_r+0x9a>
 8018a06:	89a3      	ldrh	r3, [r4, #12]
 8018a08:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8018a0c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8018a10:	d003      	beq.n	8018a1a <__swsetup_r+0x9a>
 8018a12:	4621      	mov	r1, r4
 8018a14:	4630      	mov	r0, r6
 8018a16:	f000 f9bf 	bl	8018d98 <__smakebuf_r>
 8018a1a:	89a2      	ldrh	r2, [r4, #12]
 8018a1c:	f012 0301 	ands.w	r3, r2, #1
 8018a20:	d00c      	beq.n	8018a3c <__swsetup_r+0xbc>
 8018a22:	2300      	movs	r3, #0
 8018a24:	60a3      	str	r3, [r4, #8]
 8018a26:	6963      	ldr	r3, [r4, #20]
 8018a28:	425b      	negs	r3, r3
 8018a2a:	61a3      	str	r3, [r4, #24]
 8018a2c:	6923      	ldr	r3, [r4, #16]
 8018a2e:	b953      	cbnz	r3, 8018a46 <__swsetup_r+0xc6>
 8018a30:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8018a34:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 8018a38:	d1ba      	bne.n	80189b0 <__swsetup_r+0x30>
 8018a3a:	bd70      	pop	{r4, r5, r6, pc}
 8018a3c:	0792      	lsls	r2, r2, #30
 8018a3e:	bf58      	it	pl
 8018a40:	6963      	ldrpl	r3, [r4, #20]
 8018a42:	60a3      	str	r3, [r4, #8]
 8018a44:	e7f2      	b.n	8018a2c <__swsetup_r+0xac>
 8018a46:	2000      	movs	r0, #0
 8018a48:	e7f7      	b.n	8018a3a <__swsetup_r+0xba>
 8018a4a:	bf00      	nop
 8018a4c:	24000174 	.word	0x24000174
 8018a50:	0801a130 	.word	0x0801a130
 8018a54:	0801a150 	.word	0x0801a150
 8018a58:	0801a110 	.word	0x0801a110

08018a5c <__sflush_r>:
 8018a5c:	898a      	ldrh	r2, [r1, #12]
 8018a5e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8018a62:	4605      	mov	r5, r0
 8018a64:	0710      	lsls	r0, r2, #28
 8018a66:	460c      	mov	r4, r1
 8018a68:	d458      	bmi.n	8018b1c <__sflush_r+0xc0>
 8018a6a:	684b      	ldr	r3, [r1, #4]
 8018a6c:	2b00      	cmp	r3, #0
 8018a6e:	dc05      	bgt.n	8018a7c <__sflush_r+0x20>
 8018a70:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8018a72:	2b00      	cmp	r3, #0
 8018a74:	dc02      	bgt.n	8018a7c <__sflush_r+0x20>
 8018a76:	2000      	movs	r0, #0
 8018a78:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8018a7c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8018a7e:	2e00      	cmp	r6, #0
 8018a80:	d0f9      	beq.n	8018a76 <__sflush_r+0x1a>
 8018a82:	2300      	movs	r3, #0
 8018a84:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8018a88:	682f      	ldr	r7, [r5, #0]
 8018a8a:	6a21      	ldr	r1, [r4, #32]
 8018a8c:	602b      	str	r3, [r5, #0]
 8018a8e:	d032      	beq.n	8018af6 <__sflush_r+0x9a>
 8018a90:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8018a92:	89a3      	ldrh	r3, [r4, #12]
 8018a94:	075a      	lsls	r2, r3, #29
 8018a96:	d505      	bpl.n	8018aa4 <__sflush_r+0x48>
 8018a98:	6863      	ldr	r3, [r4, #4]
 8018a9a:	1ac0      	subs	r0, r0, r3
 8018a9c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8018a9e:	b10b      	cbz	r3, 8018aa4 <__sflush_r+0x48>
 8018aa0:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8018aa2:	1ac0      	subs	r0, r0, r3
 8018aa4:	2300      	movs	r3, #0
 8018aa6:	4602      	mov	r2, r0
 8018aa8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8018aaa:	6a21      	ldr	r1, [r4, #32]
 8018aac:	4628      	mov	r0, r5
 8018aae:	47b0      	blx	r6
 8018ab0:	1c43      	adds	r3, r0, #1
 8018ab2:	89a3      	ldrh	r3, [r4, #12]
 8018ab4:	d106      	bne.n	8018ac4 <__sflush_r+0x68>
 8018ab6:	6829      	ldr	r1, [r5, #0]
 8018ab8:	291d      	cmp	r1, #29
 8018aba:	d848      	bhi.n	8018b4e <__sflush_r+0xf2>
 8018abc:	4a29      	ldr	r2, [pc, #164]	; (8018b64 <__sflush_r+0x108>)
 8018abe:	40ca      	lsrs	r2, r1
 8018ac0:	07d6      	lsls	r6, r2, #31
 8018ac2:	d544      	bpl.n	8018b4e <__sflush_r+0xf2>
 8018ac4:	2200      	movs	r2, #0
 8018ac6:	6062      	str	r2, [r4, #4]
 8018ac8:	04d9      	lsls	r1, r3, #19
 8018aca:	6922      	ldr	r2, [r4, #16]
 8018acc:	6022      	str	r2, [r4, #0]
 8018ace:	d504      	bpl.n	8018ada <__sflush_r+0x7e>
 8018ad0:	1c42      	adds	r2, r0, #1
 8018ad2:	d101      	bne.n	8018ad8 <__sflush_r+0x7c>
 8018ad4:	682b      	ldr	r3, [r5, #0]
 8018ad6:	b903      	cbnz	r3, 8018ada <__sflush_r+0x7e>
 8018ad8:	6560      	str	r0, [r4, #84]	; 0x54
 8018ada:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8018adc:	602f      	str	r7, [r5, #0]
 8018ade:	2900      	cmp	r1, #0
 8018ae0:	d0c9      	beq.n	8018a76 <__sflush_r+0x1a>
 8018ae2:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8018ae6:	4299      	cmp	r1, r3
 8018ae8:	d002      	beq.n	8018af0 <__sflush_r+0x94>
 8018aea:	4628      	mov	r0, r5
 8018aec:	f7ff fd6e 	bl	80185cc <_free_r>
 8018af0:	2000      	movs	r0, #0
 8018af2:	6360      	str	r0, [r4, #52]	; 0x34
 8018af4:	e7c0      	b.n	8018a78 <__sflush_r+0x1c>
 8018af6:	2301      	movs	r3, #1
 8018af8:	4628      	mov	r0, r5
 8018afa:	47b0      	blx	r6
 8018afc:	1c41      	adds	r1, r0, #1
 8018afe:	d1c8      	bne.n	8018a92 <__sflush_r+0x36>
 8018b00:	682b      	ldr	r3, [r5, #0]
 8018b02:	2b00      	cmp	r3, #0
 8018b04:	d0c5      	beq.n	8018a92 <__sflush_r+0x36>
 8018b06:	2b1d      	cmp	r3, #29
 8018b08:	d001      	beq.n	8018b0e <__sflush_r+0xb2>
 8018b0a:	2b16      	cmp	r3, #22
 8018b0c:	d101      	bne.n	8018b12 <__sflush_r+0xb6>
 8018b0e:	602f      	str	r7, [r5, #0]
 8018b10:	e7b1      	b.n	8018a76 <__sflush_r+0x1a>
 8018b12:	89a3      	ldrh	r3, [r4, #12]
 8018b14:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8018b18:	81a3      	strh	r3, [r4, #12]
 8018b1a:	e7ad      	b.n	8018a78 <__sflush_r+0x1c>
 8018b1c:	690f      	ldr	r7, [r1, #16]
 8018b1e:	2f00      	cmp	r7, #0
 8018b20:	d0a9      	beq.n	8018a76 <__sflush_r+0x1a>
 8018b22:	0793      	lsls	r3, r2, #30
 8018b24:	680e      	ldr	r6, [r1, #0]
 8018b26:	bf08      	it	eq
 8018b28:	694b      	ldreq	r3, [r1, #20]
 8018b2a:	600f      	str	r7, [r1, #0]
 8018b2c:	bf18      	it	ne
 8018b2e:	2300      	movne	r3, #0
 8018b30:	eba6 0807 	sub.w	r8, r6, r7
 8018b34:	608b      	str	r3, [r1, #8]
 8018b36:	f1b8 0f00 	cmp.w	r8, #0
 8018b3a:	dd9c      	ble.n	8018a76 <__sflush_r+0x1a>
 8018b3c:	4643      	mov	r3, r8
 8018b3e:	463a      	mov	r2, r7
 8018b40:	6a21      	ldr	r1, [r4, #32]
 8018b42:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8018b44:	4628      	mov	r0, r5
 8018b46:	47b0      	blx	r6
 8018b48:	2800      	cmp	r0, #0
 8018b4a:	dc06      	bgt.n	8018b5a <__sflush_r+0xfe>
 8018b4c:	89a3      	ldrh	r3, [r4, #12]
 8018b4e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8018b52:	81a3      	strh	r3, [r4, #12]
 8018b54:	f04f 30ff 	mov.w	r0, #4294967295
 8018b58:	e78e      	b.n	8018a78 <__sflush_r+0x1c>
 8018b5a:	4407      	add	r7, r0
 8018b5c:	eba8 0800 	sub.w	r8, r8, r0
 8018b60:	e7e9      	b.n	8018b36 <__sflush_r+0xda>
 8018b62:	bf00      	nop
 8018b64:	20400001 	.word	0x20400001

08018b68 <_fflush_r>:
 8018b68:	b538      	push	{r3, r4, r5, lr}
 8018b6a:	690b      	ldr	r3, [r1, #16]
 8018b6c:	4605      	mov	r5, r0
 8018b6e:	460c      	mov	r4, r1
 8018b70:	b1db      	cbz	r3, 8018baa <_fflush_r+0x42>
 8018b72:	b118      	cbz	r0, 8018b7c <_fflush_r+0x14>
 8018b74:	6983      	ldr	r3, [r0, #24]
 8018b76:	b90b      	cbnz	r3, 8018b7c <_fflush_r+0x14>
 8018b78:	f000 f860 	bl	8018c3c <__sinit>
 8018b7c:	4b0c      	ldr	r3, [pc, #48]	; (8018bb0 <_fflush_r+0x48>)
 8018b7e:	429c      	cmp	r4, r3
 8018b80:	d109      	bne.n	8018b96 <_fflush_r+0x2e>
 8018b82:	686c      	ldr	r4, [r5, #4]
 8018b84:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8018b88:	b17b      	cbz	r3, 8018baa <_fflush_r+0x42>
 8018b8a:	4621      	mov	r1, r4
 8018b8c:	4628      	mov	r0, r5
 8018b8e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8018b92:	f7ff bf63 	b.w	8018a5c <__sflush_r>
 8018b96:	4b07      	ldr	r3, [pc, #28]	; (8018bb4 <_fflush_r+0x4c>)
 8018b98:	429c      	cmp	r4, r3
 8018b9a:	d101      	bne.n	8018ba0 <_fflush_r+0x38>
 8018b9c:	68ac      	ldr	r4, [r5, #8]
 8018b9e:	e7f1      	b.n	8018b84 <_fflush_r+0x1c>
 8018ba0:	4b05      	ldr	r3, [pc, #20]	; (8018bb8 <_fflush_r+0x50>)
 8018ba2:	429c      	cmp	r4, r3
 8018ba4:	bf08      	it	eq
 8018ba6:	68ec      	ldreq	r4, [r5, #12]
 8018ba8:	e7ec      	b.n	8018b84 <_fflush_r+0x1c>
 8018baa:	2000      	movs	r0, #0
 8018bac:	bd38      	pop	{r3, r4, r5, pc}
 8018bae:	bf00      	nop
 8018bb0:	0801a130 	.word	0x0801a130
 8018bb4:	0801a150 	.word	0x0801a150
 8018bb8:	0801a110 	.word	0x0801a110

08018bbc <std>:
 8018bbc:	2300      	movs	r3, #0
 8018bbe:	b510      	push	{r4, lr}
 8018bc0:	4604      	mov	r4, r0
 8018bc2:	e9c0 3300 	strd	r3, r3, [r0]
 8018bc6:	6083      	str	r3, [r0, #8]
 8018bc8:	8181      	strh	r1, [r0, #12]
 8018bca:	6643      	str	r3, [r0, #100]	; 0x64
 8018bcc:	81c2      	strh	r2, [r0, #14]
 8018bce:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8018bd2:	6183      	str	r3, [r0, #24]
 8018bd4:	4619      	mov	r1, r3
 8018bd6:	2208      	movs	r2, #8
 8018bd8:	305c      	adds	r0, #92	; 0x5c
 8018bda:	f7ff fcee 	bl	80185ba <memset>
 8018bde:	4b05      	ldr	r3, [pc, #20]	; (8018bf4 <std+0x38>)
 8018be0:	6263      	str	r3, [r4, #36]	; 0x24
 8018be2:	4b05      	ldr	r3, [pc, #20]	; (8018bf8 <std+0x3c>)
 8018be4:	62a3      	str	r3, [r4, #40]	; 0x28
 8018be6:	4b05      	ldr	r3, [pc, #20]	; (8018bfc <std+0x40>)
 8018be8:	62e3      	str	r3, [r4, #44]	; 0x2c
 8018bea:	4b05      	ldr	r3, [pc, #20]	; (8018c00 <std+0x44>)
 8018bec:	6224      	str	r4, [r4, #32]
 8018bee:	6323      	str	r3, [r4, #48]	; 0x30
 8018bf0:	bd10      	pop	{r4, pc}
 8018bf2:	bf00      	nop
 8018bf4:	08019651 	.word	0x08019651
 8018bf8:	08019673 	.word	0x08019673
 8018bfc:	080196ab 	.word	0x080196ab
 8018c00:	080196cf 	.word	0x080196cf

08018c04 <_cleanup_r>:
 8018c04:	4901      	ldr	r1, [pc, #4]	; (8018c0c <_cleanup_r+0x8>)
 8018c06:	f000 b885 	b.w	8018d14 <_fwalk_reent>
 8018c0a:	bf00      	nop
 8018c0c:	08018b69 	.word	0x08018b69

08018c10 <__sfmoreglue>:
 8018c10:	b570      	push	{r4, r5, r6, lr}
 8018c12:	1e4a      	subs	r2, r1, #1
 8018c14:	2568      	movs	r5, #104	; 0x68
 8018c16:	4355      	muls	r5, r2
 8018c18:	460e      	mov	r6, r1
 8018c1a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8018c1e:	f7ff fd23 	bl	8018668 <_malloc_r>
 8018c22:	4604      	mov	r4, r0
 8018c24:	b140      	cbz	r0, 8018c38 <__sfmoreglue+0x28>
 8018c26:	2100      	movs	r1, #0
 8018c28:	e9c0 1600 	strd	r1, r6, [r0]
 8018c2c:	300c      	adds	r0, #12
 8018c2e:	60a0      	str	r0, [r4, #8]
 8018c30:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8018c34:	f7ff fcc1 	bl	80185ba <memset>
 8018c38:	4620      	mov	r0, r4
 8018c3a:	bd70      	pop	{r4, r5, r6, pc}

08018c3c <__sinit>:
 8018c3c:	6983      	ldr	r3, [r0, #24]
 8018c3e:	b510      	push	{r4, lr}
 8018c40:	4604      	mov	r4, r0
 8018c42:	bb33      	cbnz	r3, 8018c92 <__sinit+0x56>
 8018c44:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 8018c48:	6503      	str	r3, [r0, #80]	; 0x50
 8018c4a:	4b12      	ldr	r3, [pc, #72]	; (8018c94 <__sinit+0x58>)
 8018c4c:	4a12      	ldr	r2, [pc, #72]	; (8018c98 <__sinit+0x5c>)
 8018c4e:	681b      	ldr	r3, [r3, #0]
 8018c50:	6282      	str	r2, [r0, #40]	; 0x28
 8018c52:	4298      	cmp	r0, r3
 8018c54:	bf04      	itt	eq
 8018c56:	2301      	moveq	r3, #1
 8018c58:	6183      	streq	r3, [r0, #24]
 8018c5a:	f000 f81f 	bl	8018c9c <__sfp>
 8018c5e:	6060      	str	r0, [r4, #4]
 8018c60:	4620      	mov	r0, r4
 8018c62:	f000 f81b 	bl	8018c9c <__sfp>
 8018c66:	60a0      	str	r0, [r4, #8]
 8018c68:	4620      	mov	r0, r4
 8018c6a:	f000 f817 	bl	8018c9c <__sfp>
 8018c6e:	2200      	movs	r2, #0
 8018c70:	60e0      	str	r0, [r4, #12]
 8018c72:	2104      	movs	r1, #4
 8018c74:	6860      	ldr	r0, [r4, #4]
 8018c76:	f7ff ffa1 	bl	8018bbc <std>
 8018c7a:	2201      	movs	r2, #1
 8018c7c:	2109      	movs	r1, #9
 8018c7e:	68a0      	ldr	r0, [r4, #8]
 8018c80:	f7ff ff9c 	bl	8018bbc <std>
 8018c84:	2202      	movs	r2, #2
 8018c86:	2112      	movs	r1, #18
 8018c88:	68e0      	ldr	r0, [r4, #12]
 8018c8a:	f7ff ff97 	bl	8018bbc <std>
 8018c8e:	2301      	movs	r3, #1
 8018c90:	61a3      	str	r3, [r4, #24]
 8018c92:	bd10      	pop	{r4, pc}
 8018c94:	0801a10c 	.word	0x0801a10c
 8018c98:	08018c05 	.word	0x08018c05

08018c9c <__sfp>:
 8018c9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8018c9e:	4b1b      	ldr	r3, [pc, #108]	; (8018d0c <__sfp+0x70>)
 8018ca0:	681e      	ldr	r6, [r3, #0]
 8018ca2:	69b3      	ldr	r3, [r6, #24]
 8018ca4:	4607      	mov	r7, r0
 8018ca6:	b913      	cbnz	r3, 8018cae <__sfp+0x12>
 8018ca8:	4630      	mov	r0, r6
 8018caa:	f7ff ffc7 	bl	8018c3c <__sinit>
 8018cae:	3648      	adds	r6, #72	; 0x48
 8018cb0:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8018cb4:	3b01      	subs	r3, #1
 8018cb6:	d503      	bpl.n	8018cc0 <__sfp+0x24>
 8018cb8:	6833      	ldr	r3, [r6, #0]
 8018cba:	b133      	cbz	r3, 8018cca <__sfp+0x2e>
 8018cbc:	6836      	ldr	r6, [r6, #0]
 8018cbe:	e7f7      	b.n	8018cb0 <__sfp+0x14>
 8018cc0:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8018cc4:	b16d      	cbz	r5, 8018ce2 <__sfp+0x46>
 8018cc6:	3468      	adds	r4, #104	; 0x68
 8018cc8:	e7f4      	b.n	8018cb4 <__sfp+0x18>
 8018cca:	2104      	movs	r1, #4
 8018ccc:	4638      	mov	r0, r7
 8018cce:	f7ff ff9f 	bl	8018c10 <__sfmoreglue>
 8018cd2:	6030      	str	r0, [r6, #0]
 8018cd4:	2800      	cmp	r0, #0
 8018cd6:	d1f1      	bne.n	8018cbc <__sfp+0x20>
 8018cd8:	230c      	movs	r3, #12
 8018cda:	603b      	str	r3, [r7, #0]
 8018cdc:	4604      	mov	r4, r0
 8018cde:	4620      	mov	r0, r4
 8018ce0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8018ce2:	4b0b      	ldr	r3, [pc, #44]	; (8018d10 <__sfp+0x74>)
 8018ce4:	6665      	str	r5, [r4, #100]	; 0x64
 8018ce6:	e9c4 5500 	strd	r5, r5, [r4]
 8018cea:	60a5      	str	r5, [r4, #8]
 8018cec:	e9c4 3503 	strd	r3, r5, [r4, #12]
 8018cf0:	e9c4 5505 	strd	r5, r5, [r4, #20]
 8018cf4:	2208      	movs	r2, #8
 8018cf6:	4629      	mov	r1, r5
 8018cf8:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8018cfc:	f7ff fc5d 	bl	80185ba <memset>
 8018d00:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8018d04:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8018d08:	e7e9      	b.n	8018cde <__sfp+0x42>
 8018d0a:	bf00      	nop
 8018d0c:	0801a10c 	.word	0x0801a10c
 8018d10:	ffff0001 	.word	0xffff0001

08018d14 <_fwalk_reent>:
 8018d14:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8018d18:	4680      	mov	r8, r0
 8018d1a:	4689      	mov	r9, r1
 8018d1c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8018d20:	2600      	movs	r6, #0
 8018d22:	b914      	cbnz	r4, 8018d2a <_fwalk_reent+0x16>
 8018d24:	4630      	mov	r0, r6
 8018d26:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8018d2a:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 8018d2e:	3f01      	subs	r7, #1
 8018d30:	d501      	bpl.n	8018d36 <_fwalk_reent+0x22>
 8018d32:	6824      	ldr	r4, [r4, #0]
 8018d34:	e7f5      	b.n	8018d22 <_fwalk_reent+0xe>
 8018d36:	89ab      	ldrh	r3, [r5, #12]
 8018d38:	2b01      	cmp	r3, #1
 8018d3a:	d907      	bls.n	8018d4c <_fwalk_reent+0x38>
 8018d3c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8018d40:	3301      	adds	r3, #1
 8018d42:	d003      	beq.n	8018d4c <_fwalk_reent+0x38>
 8018d44:	4629      	mov	r1, r5
 8018d46:	4640      	mov	r0, r8
 8018d48:	47c8      	blx	r9
 8018d4a:	4306      	orrs	r6, r0
 8018d4c:	3568      	adds	r5, #104	; 0x68
 8018d4e:	e7ee      	b.n	8018d2e <_fwalk_reent+0x1a>

08018d50 <__swhatbuf_r>:
 8018d50:	b570      	push	{r4, r5, r6, lr}
 8018d52:	460e      	mov	r6, r1
 8018d54:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8018d58:	2900      	cmp	r1, #0
 8018d5a:	b096      	sub	sp, #88	; 0x58
 8018d5c:	4614      	mov	r4, r2
 8018d5e:	461d      	mov	r5, r3
 8018d60:	da07      	bge.n	8018d72 <__swhatbuf_r+0x22>
 8018d62:	2300      	movs	r3, #0
 8018d64:	602b      	str	r3, [r5, #0]
 8018d66:	89b3      	ldrh	r3, [r6, #12]
 8018d68:	061a      	lsls	r2, r3, #24
 8018d6a:	d410      	bmi.n	8018d8e <__swhatbuf_r+0x3e>
 8018d6c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8018d70:	e00e      	b.n	8018d90 <__swhatbuf_r+0x40>
 8018d72:	466a      	mov	r2, sp
 8018d74:	f000 fcd2 	bl	801971c <_fstat_r>
 8018d78:	2800      	cmp	r0, #0
 8018d7a:	dbf2      	blt.n	8018d62 <__swhatbuf_r+0x12>
 8018d7c:	9a01      	ldr	r2, [sp, #4]
 8018d7e:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8018d82:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8018d86:	425a      	negs	r2, r3
 8018d88:	415a      	adcs	r2, r3
 8018d8a:	602a      	str	r2, [r5, #0]
 8018d8c:	e7ee      	b.n	8018d6c <__swhatbuf_r+0x1c>
 8018d8e:	2340      	movs	r3, #64	; 0x40
 8018d90:	2000      	movs	r0, #0
 8018d92:	6023      	str	r3, [r4, #0]
 8018d94:	b016      	add	sp, #88	; 0x58
 8018d96:	bd70      	pop	{r4, r5, r6, pc}

08018d98 <__smakebuf_r>:
 8018d98:	898b      	ldrh	r3, [r1, #12]
 8018d9a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8018d9c:	079d      	lsls	r5, r3, #30
 8018d9e:	4606      	mov	r6, r0
 8018da0:	460c      	mov	r4, r1
 8018da2:	d507      	bpl.n	8018db4 <__smakebuf_r+0x1c>
 8018da4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8018da8:	6023      	str	r3, [r4, #0]
 8018daa:	6123      	str	r3, [r4, #16]
 8018dac:	2301      	movs	r3, #1
 8018dae:	6163      	str	r3, [r4, #20]
 8018db0:	b002      	add	sp, #8
 8018db2:	bd70      	pop	{r4, r5, r6, pc}
 8018db4:	ab01      	add	r3, sp, #4
 8018db6:	466a      	mov	r2, sp
 8018db8:	f7ff ffca 	bl	8018d50 <__swhatbuf_r>
 8018dbc:	9900      	ldr	r1, [sp, #0]
 8018dbe:	4605      	mov	r5, r0
 8018dc0:	4630      	mov	r0, r6
 8018dc2:	f7ff fc51 	bl	8018668 <_malloc_r>
 8018dc6:	b948      	cbnz	r0, 8018ddc <__smakebuf_r+0x44>
 8018dc8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8018dcc:	059a      	lsls	r2, r3, #22
 8018dce:	d4ef      	bmi.n	8018db0 <__smakebuf_r+0x18>
 8018dd0:	f023 0303 	bic.w	r3, r3, #3
 8018dd4:	f043 0302 	orr.w	r3, r3, #2
 8018dd8:	81a3      	strh	r3, [r4, #12]
 8018dda:	e7e3      	b.n	8018da4 <__smakebuf_r+0xc>
 8018ddc:	4b0d      	ldr	r3, [pc, #52]	; (8018e14 <__smakebuf_r+0x7c>)
 8018dde:	62b3      	str	r3, [r6, #40]	; 0x28
 8018de0:	89a3      	ldrh	r3, [r4, #12]
 8018de2:	6020      	str	r0, [r4, #0]
 8018de4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8018de8:	81a3      	strh	r3, [r4, #12]
 8018dea:	9b00      	ldr	r3, [sp, #0]
 8018dec:	6163      	str	r3, [r4, #20]
 8018dee:	9b01      	ldr	r3, [sp, #4]
 8018df0:	6120      	str	r0, [r4, #16]
 8018df2:	b15b      	cbz	r3, 8018e0c <__smakebuf_r+0x74>
 8018df4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8018df8:	4630      	mov	r0, r6
 8018dfa:	f000 fca1 	bl	8019740 <_isatty_r>
 8018dfe:	b128      	cbz	r0, 8018e0c <__smakebuf_r+0x74>
 8018e00:	89a3      	ldrh	r3, [r4, #12]
 8018e02:	f023 0303 	bic.w	r3, r3, #3
 8018e06:	f043 0301 	orr.w	r3, r3, #1
 8018e0a:	81a3      	strh	r3, [r4, #12]
 8018e0c:	89a3      	ldrh	r3, [r4, #12]
 8018e0e:	431d      	orrs	r5, r3
 8018e10:	81a5      	strh	r5, [r4, #12]
 8018e12:	e7cd      	b.n	8018db0 <__smakebuf_r+0x18>
 8018e14:	08018c05 	.word	0x08018c05

08018e18 <__malloc_lock>:
 8018e18:	4770      	bx	lr

08018e1a <__malloc_unlock>:
 8018e1a:	4770      	bx	lr

08018e1c <__ssputs_r>:
 8018e1c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8018e20:	688e      	ldr	r6, [r1, #8]
 8018e22:	429e      	cmp	r6, r3
 8018e24:	4682      	mov	sl, r0
 8018e26:	460c      	mov	r4, r1
 8018e28:	4690      	mov	r8, r2
 8018e2a:	4699      	mov	r9, r3
 8018e2c:	d837      	bhi.n	8018e9e <__ssputs_r+0x82>
 8018e2e:	898a      	ldrh	r2, [r1, #12]
 8018e30:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8018e34:	d031      	beq.n	8018e9a <__ssputs_r+0x7e>
 8018e36:	6825      	ldr	r5, [r4, #0]
 8018e38:	6909      	ldr	r1, [r1, #16]
 8018e3a:	1a6f      	subs	r7, r5, r1
 8018e3c:	6965      	ldr	r5, [r4, #20]
 8018e3e:	2302      	movs	r3, #2
 8018e40:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8018e44:	fb95 f5f3 	sdiv	r5, r5, r3
 8018e48:	f109 0301 	add.w	r3, r9, #1
 8018e4c:	443b      	add	r3, r7
 8018e4e:	429d      	cmp	r5, r3
 8018e50:	bf38      	it	cc
 8018e52:	461d      	movcc	r5, r3
 8018e54:	0553      	lsls	r3, r2, #21
 8018e56:	d530      	bpl.n	8018eba <__ssputs_r+0x9e>
 8018e58:	4629      	mov	r1, r5
 8018e5a:	f7ff fc05 	bl	8018668 <_malloc_r>
 8018e5e:	4606      	mov	r6, r0
 8018e60:	b950      	cbnz	r0, 8018e78 <__ssputs_r+0x5c>
 8018e62:	230c      	movs	r3, #12
 8018e64:	f8ca 3000 	str.w	r3, [sl]
 8018e68:	89a3      	ldrh	r3, [r4, #12]
 8018e6a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8018e6e:	81a3      	strh	r3, [r4, #12]
 8018e70:	f04f 30ff 	mov.w	r0, #4294967295
 8018e74:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8018e78:	463a      	mov	r2, r7
 8018e7a:	6921      	ldr	r1, [r4, #16]
 8018e7c:	f7ff fb92 	bl	80185a4 <memcpy>
 8018e80:	89a3      	ldrh	r3, [r4, #12]
 8018e82:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8018e86:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8018e8a:	81a3      	strh	r3, [r4, #12]
 8018e8c:	6126      	str	r6, [r4, #16]
 8018e8e:	6165      	str	r5, [r4, #20]
 8018e90:	443e      	add	r6, r7
 8018e92:	1bed      	subs	r5, r5, r7
 8018e94:	6026      	str	r6, [r4, #0]
 8018e96:	60a5      	str	r5, [r4, #8]
 8018e98:	464e      	mov	r6, r9
 8018e9a:	454e      	cmp	r6, r9
 8018e9c:	d900      	bls.n	8018ea0 <__ssputs_r+0x84>
 8018e9e:	464e      	mov	r6, r9
 8018ea0:	4632      	mov	r2, r6
 8018ea2:	4641      	mov	r1, r8
 8018ea4:	6820      	ldr	r0, [r4, #0]
 8018ea6:	f000 fc6d 	bl	8019784 <memmove>
 8018eaa:	68a3      	ldr	r3, [r4, #8]
 8018eac:	1b9b      	subs	r3, r3, r6
 8018eae:	60a3      	str	r3, [r4, #8]
 8018eb0:	6823      	ldr	r3, [r4, #0]
 8018eb2:	441e      	add	r6, r3
 8018eb4:	6026      	str	r6, [r4, #0]
 8018eb6:	2000      	movs	r0, #0
 8018eb8:	e7dc      	b.n	8018e74 <__ssputs_r+0x58>
 8018eba:	462a      	mov	r2, r5
 8018ebc:	f000 fc7b 	bl	80197b6 <_realloc_r>
 8018ec0:	4606      	mov	r6, r0
 8018ec2:	2800      	cmp	r0, #0
 8018ec4:	d1e2      	bne.n	8018e8c <__ssputs_r+0x70>
 8018ec6:	6921      	ldr	r1, [r4, #16]
 8018ec8:	4650      	mov	r0, sl
 8018eca:	f7ff fb7f 	bl	80185cc <_free_r>
 8018ece:	e7c8      	b.n	8018e62 <__ssputs_r+0x46>

08018ed0 <_svfiprintf_r>:
 8018ed0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018ed4:	461d      	mov	r5, r3
 8018ed6:	898b      	ldrh	r3, [r1, #12]
 8018ed8:	061f      	lsls	r7, r3, #24
 8018eda:	b09d      	sub	sp, #116	; 0x74
 8018edc:	4680      	mov	r8, r0
 8018ede:	460c      	mov	r4, r1
 8018ee0:	4616      	mov	r6, r2
 8018ee2:	d50f      	bpl.n	8018f04 <_svfiprintf_r+0x34>
 8018ee4:	690b      	ldr	r3, [r1, #16]
 8018ee6:	b96b      	cbnz	r3, 8018f04 <_svfiprintf_r+0x34>
 8018ee8:	2140      	movs	r1, #64	; 0x40
 8018eea:	f7ff fbbd 	bl	8018668 <_malloc_r>
 8018eee:	6020      	str	r0, [r4, #0]
 8018ef0:	6120      	str	r0, [r4, #16]
 8018ef2:	b928      	cbnz	r0, 8018f00 <_svfiprintf_r+0x30>
 8018ef4:	230c      	movs	r3, #12
 8018ef6:	f8c8 3000 	str.w	r3, [r8]
 8018efa:	f04f 30ff 	mov.w	r0, #4294967295
 8018efe:	e0c8      	b.n	8019092 <_svfiprintf_r+0x1c2>
 8018f00:	2340      	movs	r3, #64	; 0x40
 8018f02:	6163      	str	r3, [r4, #20]
 8018f04:	2300      	movs	r3, #0
 8018f06:	9309      	str	r3, [sp, #36]	; 0x24
 8018f08:	2320      	movs	r3, #32
 8018f0a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8018f0e:	2330      	movs	r3, #48	; 0x30
 8018f10:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8018f14:	9503      	str	r5, [sp, #12]
 8018f16:	f04f 0b01 	mov.w	fp, #1
 8018f1a:	4637      	mov	r7, r6
 8018f1c:	463d      	mov	r5, r7
 8018f1e:	f815 3b01 	ldrb.w	r3, [r5], #1
 8018f22:	b10b      	cbz	r3, 8018f28 <_svfiprintf_r+0x58>
 8018f24:	2b25      	cmp	r3, #37	; 0x25
 8018f26:	d13e      	bne.n	8018fa6 <_svfiprintf_r+0xd6>
 8018f28:	ebb7 0a06 	subs.w	sl, r7, r6
 8018f2c:	d00b      	beq.n	8018f46 <_svfiprintf_r+0x76>
 8018f2e:	4653      	mov	r3, sl
 8018f30:	4632      	mov	r2, r6
 8018f32:	4621      	mov	r1, r4
 8018f34:	4640      	mov	r0, r8
 8018f36:	f7ff ff71 	bl	8018e1c <__ssputs_r>
 8018f3a:	3001      	adds	r0, #1
 8018f3c:	f000 80a4 	beq.w	8019088 <_svfiprintf_r+0x1b8>
 8018f40:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8018f42:	4453      	add	r3, sl
 8018f44:	9309      	str	r3, [sp, #36]	; 0x24
 8018f46:	783b      	ldrb	r3, [r7, #0]
 8018f48:	2b00      	cmp	r3, #0
 8018f4a:	f000 809d 	beq.w	8019088 <_svfiprintf_r+0x1b8>
 8018f4e:	2300      	movs	r3, #0
 8018f50:	f04f 32ff 	mov.w	r2, #4294967295
 8018f54:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8018f58:	9304      	str	r3, [sp, #16]
 8018f5a:	9307      	str	r3, [sp, #28]
 8018f5c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8018f60:	931a      	str	r3, [sp, #104]	; 0x68
 8018f62:	462f      	mov	r7, r5
 8018f64:	2205      	movs	r2, #5
 8018f66:	f817 1b01 	ldrb.w	r1, [r7], #1
 8018f6a:	4850      	ldr	r0, [pc, #320]	; (80190ac <_svfiprintf_r+0x1dc>)
 8018f6c:	f7e7 f9c0 	bl	80002f0 <memchr>
 8018f70:	9b04      	ldr	r3, [sp, #16]
 8018f72:	b9d0      	cbnz	r0, 8018faa <_svfiprintf_r+0xda>
 8018f74:	06d9      	lsls	r1, r3, #27
 8018f76:	bf44      	itt	mi
 8018f78:	2220      	movmi	r2, #32
 8018f7a:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8018f7e:	071a      	lsls	r2, r3, #28
 8018f80:	bf44      	itt	mi
 8018f82:	222b      	movmi	r2, #43	; 0x2b
 8018f84:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8018f88:	782a      	ldrb	r2, [r5, #0]
 8018f8a:	2a2a      	cmp	r2, #42	; 0x2a
 8018f8c:	d015      	beq.n	8018fba <_svfiprintf_r+0xea>
 8018f8e:	9a07      	ldr	r2, [sp, #28]
 8018f90:	462f      	mov	r7, r5
 8018f92:	2000      	movs	r0, #0
 8018f94:	250a      	movs	r5, #10
 8018f96:	4639      	mov	r1, r7
 8018f98:	f811 3b01 	ldrb.w	r3, [r1], #1
 8018f9c:	3b30      	subs	r3, #48	; 0x30
 8018f9e:	2b09      	cmp	r3, #9
 8018fa0:	d94d      	bls.n	801903e <_svfiprintf_r+0x16e>
 8018fa2:	b1b8      	cbz	r0, 8018fd4 <_svfiprintf_r+0x104>
 8018fa4:	e00f      	b.n	8018fc6 <_svfiprintf_r+0xf6>
 8018fa6:	462f      	mov	r7, r5
 8018fa8:	e7b8      	b.n	8018f1c <_svfiprintf_r+0x4c>
 8018faa:	4a40      	ldr	r2, [pc, #256]	; (80190ac <_svfiprintf_r+0x1dc>)
 8018fac:	1a80      	subs	r0, r0, r2
 8018fae:	fa0b f000 	lsl.w	r0, fp, r0
 8018fb2:	4318      	orrs	r0, r3
 8018fb4:	9004      	str	r0, [sp, #16]
 8018fb6:	463d      	mov	r5, r7
 8018fb8:	e7d3      	b.n	8018f62 <_svfiprintf_r+0x92>
 8018fba:	9a03      	ldr	r2, [sp, #12]
 8018fbc:	1d11      	adds	r1, r2, #4
 8018fbe:	6812      	ldr	r2, [r2, #0]
 8018fc0:	9103      	str	r1, [sp, #12]
 8018fc2:	2a00      	cmp	r2, #0
 8018fc4:	db01      	blt.n	8018fca <_svfiprintf_r+0xfa>
 8018fc6:	9207      	str	r2, [sp, #28]
 8018fc8:	e004      	b.n	8018fd4 <_svfiprintf_r+0x104>
 8018fca:	4252      	negs	r2, r2
 8018fcc:	f043 0302 	orr.w	r3, r3, #2
 8018fd0:	9207      	str	r2, [sp, #28]
 8018fd2:	9304      	str	r3, [sp, #16]
 8018fd4:	783b      	ldrb	r3, [r7, #0]
 8018fd6:	2b2e      	cmp	r3, #46	; 0x2e
 8018fd8:	d10c      	bne.n	8018ff4 <_svfiprintf_r+0x124>
 8018fda:	787b      	ldrb	r3, [r7, #1]
 8018fdc:	2b2a      	cmp	r3, #42	; 0x2a
 8018fde:	d133      	bne.n	8019048 <_svfiprintf_r+0x178>
 8018fe0:	9b03      	ldr	r3, [sp, #12]
 8018fe2:	1d1a      	adds	r2, r3, #4
 8018fe4:	681b      	ldr	r3, [r3, #0]
 8018fe6:	9203      	str	r2, [sp, #12]
 8018fe8:	2b00      	cmp	r3, #0
 8018fea:	bfb8      	it	lt
 8018fec:	f04f 33ff 	movlt.w	r3, #4294967295
 8018ff0:	3702      	adds	r7, #2
 8018ff2:	9305      	str	r3, [sp, #20]
 8018ff4:	4d2e      	ldr	r5, [pc, #184]	; (80190b0 <_svfiprintf_r+0x1e0>)
 8018ff6:	7839      	ldrb	r1, [r7, #0]
 8018ff8:	2203      	movs	r2, #3
 8018ffa:	4628      	mov	r0, r5
 8018ffc:	f7e7 f978 	bl	80002f0 <memchr>
 8019000:	b138      	cbz	r0, 8019012 <_svfiprintf_r+0x142>
 8019002:	2340      	movs	r3, #64	; 0x40
 8019004:	1b40      	subs	r0, r0, r5
 8019006:	fa03 f000 	lsl.w	r0, r3, r0
 801900a:	9b04      	ldr	r3, [sp, #16]
 801900c:	4303      	orrs	r3, r0
 801900e:	3701      	adds	r7, #1
 8019010:	9304      	str	r3, [sp, #16]
 8019012:	7839      	ldrb	r1, [r7, #0]
 8019014:	4827      	ldr	r0, [pc, #156]	; (80190b4 <_svfiprintf_r+0x1e4>)
 8019016:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801901a:	2206      	movs	r2, #6
 801901c:	1c7e      	adds	r6, r7, #1
 801901e:	f7e7 f967 	bl	80002f0 <memchr>
 8019022:	2800      	cmp	r0, #0
 8019024:	d038      	beq.n	8019098 <_svfiprintf_r+0x1c8>
 8019026:	4b24      	ldr	r3, [pc, #144]	; (80190b8 <_svfiprintf_r+0x1e8>)
 8019028:	bb13      	cbnz	r3, 8019070 <_svfiprintf_r+0x1a0>
 801902a:	9b03      	ldr	r3, [sp, #12]
 801902c:	3307      	adds	r3, #7
 801902e:	f023 0307 	bic.w	r3, r3, #7
 8019032:	3308      	adds	r3, #8
 8019034:	9303      	str	r3, [sp, #12]
 8019036:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8019038:	444b      	add	r3, r9
 801903a:	9309      	str	r3, [sp, #36]	; 0x24
 801903c:	e76d      	b.n	8018f1a <_svfiprintf_r+0x4a>
 801903e:	fb05 3202 	mla	r2, r5, r2, r3
 8019042:	2001      	movs	r0, #1
 8019044:	460f      	mov	r7, r1
 8019046:	e7a6      	b.n	8018f96 <_svfiprintf_r+0xc6>
 8019048:	2300      	movs	r3, #0
 801904a:	3701      	adds	r7, #1
 801904c:	9305      	str	r3, [sp, #20]
 801904e:	4619      	mov	r1, r3
 8019050:	250a      	movs	r5, #10
 8019052:	4638      	mov	r0, r7
 8019054:	f810 2b01 	ldrb.w	r2, [r0], #1
 8019058:	3a30      	subs	r2, #48	; 0x30
 801905a:	2a09      	cmp	r2, #9
 801905c:	d903      	bls.n	8019066 <_svfiprintf_r+0x196>
 801905e:	2b00      	cmp	r3, #0
 8019060:	d0c8      	beq.n	8018ff4 <_svfiprintf_r+0x124>
 8019062:	9105      	str	r1, [sp, #20]
 8019064:	e7c6      	b.n	8018ff4 <_svfiprintf_r+0x124>
 8019066:	fb05 2101 	mla	r1, r5, r1, r2
 801906a:	2301      	movs	r3, #1
 801906c:	4607      	mov	r7, r0
 801906e:	e7f0      	b.n	8019052 <_svfiprintf_r+0x182>
 8019070:	ab03      	add	r3, sp, #12
 8019072:	9300      	str	r3, [sp, #0]
 8019074:	4622      	mov	r2, r4
 8019076:	4b11      	ldr	r3, [pc, #68]	; (80190bc <_svfiprintf_r+0x1ec>)
 8019078:	a904      	add	r1, sp, #16
 801907a:	4640      	mov	r0, r8
 801907c:	f3af 8000 	nop.w
 8019080:	f1b0 3fff 	cmp.w	r0, #4294967295
 8019084:	4681      	mov	r9, r0
 8019086:	d1d6      	bne.n	8019036 <_svfiprintf_r+0x166>
 8019088:	89a3      	ldrh	r3, [r4, #12]
 801908a:	065b      	lsls	r3, r3, #25
 801908c:	f53f af35 	bmi.w	8018efa <_svfiprintf_r+0x2a>
 8019090:	9809      	ldr	r0, [sp, #36]	; 0x24
 8019092:	b01d      	add	sp, #116	; 0x74
 8019094:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019098:	ab03      	add	r3, sp, #12
 801909a:	9300      	str	r3, [sp, #0]
 801909c:	4622      	mov	r2, r4
 801909e:	4b07      	ldr	r3, [pc, #28]	; (80190bc <_svfiprintf_r+0x1ec>)
 80190a0:	a904      	add	r1, sp, #16
 80190a2:	4640      	mov	r0, r8
 80190a4:	f000 f9c2 	bl	801942c <_printf_i>
 80190a8:	e7ea      	b.n	8019080 <_svfiprintf_r+0x1b0>
 80190aa:	bf00      	nop
 80190ac:	0801a170 	.word	0x0801a170
 80190b0:	0801a176 	.word	0x0801a176
 80190b4:	0801a17a 	.word	0x0801a17a
 80190b8:	00000000 	.word	0x00000000
 80190bc:	08018e1d 	.word	0x08018e1d

080190c0 <__sfputc_r>:
 80190c0:	6893      	ldr	r3, [r2, #8]
 80190c2:	3b01      	subs	r3, #1
 80190c4:	2b00      	cmp	r3, #0
 80190c6:	b410      	push	{r4}
 80190c8:	6093      	str	r3, [r2, #8]
 80190ca:	da08      	bge.n	80190de <__sfputc_r+0x1e>
 80190cc:	6994      	ldr	r4, [r2, #24]
 80190ce:	42a3      	cmp	r3, r4
 80190d0:	db01      	blt.n	80190d6 <__sfputc_r+0x16>
 80190d2:	290a      	cmp	r1, #10
 80190d4:	d103      	bne.n	80190de <__sfputc_r+0x1e>
 80190d6:	f85d 4b04 	ldr.w	r4, [sp], #4
 80190da:	f7ff bbff 	b.w	80188dc <__swbuf_r>
 80190de:	6813      	ldr	r3, [r2, #0]
 80190e0:	1c58      	adds	r0, r3, #1
 80190e2:	6010      	str	r0, [r2, #0]
 80190e4:	7019      	strb	r1, [r3, #0]
 80190e6:	4608      	mov	r0, r1
 80190e8:	f85d 4b04 	ldr.w	r4, [sp], #4
 80190ec:	4770      	bx	lr

080190ee <__sfputs_r>:
 80190ee:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80190f0:	4606      	mov	r6, r0
 80190f2:	460f      	mov	r7, r1
 80190f4:	4614      	mov	r4, r2
 80190f6:	18d5      	adds	r5, r2, r3
 80190f8:	42ac      	cmp	r4, r5
 80190fa:	d101      	bne.n	8019100 <__sfputs_r+0x12>
 80190fc:	2000      	movs	r0, #0
 80190fe:	e007      	b.n	8019110 <__sfputs_r+0x22>
 8019100:	463a      	mov	r2, r7
 8019102:	f814 1b01 	ldrb.w	r1, [r4], #1
 8019106:	4630      	mov	r0, r6
 8019108:	f7ff ffda 	bl	80190c0 <__sfputc_r>
 801910c:	1c43      	adds	r3, r0, #1
 801910e:	d1f3      	bne.n	80190f8 <__sfputs_r+0xa>
 8019110:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08019114 <_vfiprintf_r>:
 8019114:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019118:	460c      	mov	r4, r1
 801911a:	b09d      	sub	sp, #116	; 0x74
 801911c:	4617      	mov	r7, r2
 801911e:	461d      	mov	r5, r3
 8019120:	4606      	mov	r6, r0
 8019122:	b118      	cbz	r0, 801912c <_vfiprintf_r+0x18>
 8019124:	6983      	ldr	r3, [r0, #24]
 8019126:	b90b      	cbnz	r3, 801912c <_vfiprintf_r+0x18>
 8019128:	f7ff fd88 	bl	8018c3c <__sinit>
 801912c:	4b7c      	ldr	r3, [pc, #496]	; (8019320 <_vfiprintf_r+0x20c>)
 801912e:	429c      	cmp	r4, r3
 8019130:	d158      	bne.n	80191e4 <_vfiprintf_r+0xd0>
 8019132:	6874      	ldr	r4, [r6, #4]
 8019134:	89a3      	ldrh	r3, [r4, #12]
 8019136:	0718      	lsls	r0, r3, #28
 8019138:	d55e      	bpl.n	80191f8 <_vfiprintf_r+0xe4>
 801913a:	6923      	ldr	r3, [r4, #16]
 801913c:	2b00      	cmp	r3, #0
 801913e:	d05b      	beq.n	80191f8 <_vfiprintf_r+0xe4>
 8019140:	2300      	movs	r3, #0
 8019142:	9309      	str	r3, [sp, #36]	; 0x24
 8019144:	2320      	movs	r3, #32
 8019146:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801914a:	2330      	movs	r3, #48	; 0x30
 801914c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8019150:	9503      	str	r5, [sp, #12]
 8019152:	f04f 0b01 	mov.w	fp, #1
 8019156:	46b8      	mov	r8, r7
 8019158:	4645      	mov	r5, r8
 801915a:	f815 3b01 	ldrb.w	r3, [r5], #1
 801915e:	b10b      	cbz	r3, 8019164 <_vfiprintf_r+0x50>
 8019160:	2b25      	cmp	r3, #37	; 0x25
 8019162:	d154      	bne.n	801920e <_vfiprintf_r+0xfa>
 8019164:	ebb8 0a07 	subs.w	sl, r8, r7
 8019168:	d00b      	beq.n	8019182 <_vfiprintf_r+0x6e>
 801916a:	4653      	mov	r3, sl
 801916c:	463a      	mov	r2, r7
 801916e:	4621      	mov	r1, r4
 8019170:	4630      	mov	r0, r6
 8019172:	f7ff ffbc 	bl	80190ee <__sfputs_r>
 8019176:	3001      	adds	r0, #1
 8019178:	f000 80c2 	beq.w	8019300 <_vfiprintf_r+0x1ec>
 801917c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801917e:	4453      	add	r3, sl
 8019180:	9309      	str	r3, [sp, #36]	; 0x24
 8019182:	f898 3000 	ldrb.w	r3, [r8]
 8019186:	2b00      	cmp	r3, #0
 8019188:	f000 80ba 	beq.w	8019300 <_vfiprintf_r+0x1ec>
 801918c:	2300      	movs	r3, #0
 801918e:	f04f 32ff 	mov.w	r2, #4294967295
 8019192:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8019196:	9304      	str	r3, [sp, #16]
 8019198:	9307      	str	r3, [sp, #28]
 801919a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801919e:	931a      	str	r3, [sp, #104]	; 0x68
 80191a0:	46a8      	mov	r8, r5
 80191a2:	2205      	movs	r2, #5
 80191a4:	f818 1b01 	ldrb.w	r1, [r8], #1
 80191a8:	485e      	ldr	r0, [pc, #376]	; (8019324 <_vfiprintf_r+0x210>)
 80191aa:	f7e7 f8a1 	bl	80002f0 <memchr>
 80191ae:	9b04      	ldr	r3, [sp, #16]
 80191b0:	bb78      	cbnz	r0, 8019212 <_vfiprintf_r+0xfe>
 80191b2:	06d9      	lsls	r1, r3, #27
 80191b4:	bf44      	itt	mi
 80191b6:	2220      	movmi	r2, #32
 80191b8:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80191bc:	071a      	lsls	r2, r3, #28
 80191be:	bf44      	itt	mi
 80191c0:	222b      	movmi	r2, #43	; 0x2b
 80191c2:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80191c6:	782a      	ldrb	r2, [r5, #0]
 80191c8:	2a2a      	cmp	r2, #42	; 0x2a
 80191ca:	d02a      	beq.n	8019222 <_vfiprintf_r+0x10e>
 80191cc:	9a07      	ldr	r2, [sp, #28]
 80191ce:	46a8      	mov	r8, r5
 80191d0:	2000      	movs	r0, #0
 80191d2:	250a      	movs	r5, #10
 80191d4:	4641      	mov	r1, r8
 80191d6:	f811 3b01 	ldrb.w	r3, [r1], #1
 80191da:	3b30      	subs	r3, #48	; 0x30
 80191dc:	2b09      	cmp	r3, #9
 80191de:	d969      	bls.n	80192b4 <_vfiprintf_r+0x1a0>
 80191e0:	b360      	cbz	r0, 801923c <_vfiprintf_r+0x128>
 80191e2:	e024      	b.n	801922e <_vfiprintf_r+0x11a>
 80191e4:	4b50      	ldr	r3, [pc, #320]	; (8019328 <_vfiprintf_r+0x214>)
 80191e6:	429c      	cmp	r4, r3
 80191e8:	d101      	bne.n	80191ee <_vfiprintf_r+0xda>
 80191ea:	68b4      	ldr	r4, [r6, #8]
 80191ec:	e7a2      	b.n	8019134 <_vfiprintf_r+0x20>
 80191ee:	4b4f      	ldr	r3, [pc, #316]	; (801932c <_vfiprintf_r+0x218>)
 80191f0:	429c      	cmp	r4, r3
 80191f2:	bf08      	it	eq
 80191f4:	68f4      	ldreq	r4, [r6, #12]
 80191f6:	e79d      	b.n	8019134 <_vfiprintf_r+0x20>
 80191f8:	4621      	mov	r1, r4
 80191fa:	4630      	mov	r0, r6
 80191fc:	f7ff fbc0 	bl	8018980 <__swsetup_r>
 8019200:	2800      	cmp	r0, #0
 8019202:	d09d      	beq.n	8019140 <_vfiprintf_r+0x2c>
 8019204:	f04f 30ff 	mov.w	r0, #4294967295
 8019208:	b01d      	add	sp, #116	; 0x74
 801920a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801920e:	46a8      	mov	r8, r5
 8019210:	e7a2      	b.n	8019158 <_vfiprintf_r+0x44>
 8019212:	4a44      	ldr	r2, [pc, #272]	; (8019324 <_vfiprintf_r+0x210>)
 8019214:	1a80      	subs	r0, r0, r2
 8019216:	fa0b f000 	lsl.w	r0, fp, r0
 801921a:	4318      	orrs	r0, r3
 801921c:	9004      	str	r0, [sp, #16]
 801921e:	4645      	mov	r5, r8
 8019220:	e7be      	b.n	80191a0 <_vfiprintf_r+0x8c>
 8019222:	9a03      	ldr	r2, [sp, #12]
 8019224:	1d11      	adds	r1, r2, #4
 8019226:	6812      	ldr	r2, [r2, #0]
 8019228:	9103      	str	r1, [sp, #12]
 801922a:	2a00      	cmp	r2, #0
 801922c:	db01      	blt.n	8019232 <_vfiprintf_r+0x11e>
 801922e:	9207      	str	r2, [sp, #28]
 8019230:	e004      	b.n	801923c <_vfiprintf_r+0x128>
 8019232:	4252      	negs	r2, r2
 8019234:	f043 0302 	orr.w	r3, r3, #2
 8019238:	9207      	str	r2, [sp, #28]
 801923a:	9304      	str	r3, [sp, #16]
 801923c:	f898 3000 	ldrb.w	r3, [r8]
 8019240:	2b2e      	cmp	r3, #46	; 0x2e
 8019242:	d10e      	bne.n	8019262 <_vfiprintf_r+0x14e>
 8019244:	f898 3001 	ldrb.w	r3, [r8, #1]
 8019248:	2b2a      	cmp	r3, #42	; 0x2a
 801924a:	d138      	bne.n	80192be <_vfiprintf_r+0x1aa>
 801924c:	9b03      	ldr	r3, [sp, #12]
 801924e:	1d1a      	adds	r2, r3, #4
 8019250:	681b      	ldr	r3, [r3, #0]
 8019252:	9203      	str	r2, [sp, #12]
 8019254:	2b00      	cmp	r3, #0
 8019256:	bfb8      	it	lt
 8019258:	f04f 33ff 	movlt.w	r3, #4294967295
 801925c:	f108 0802 	add.w	r8, r8, #2
 8019260:	9305      	str	r3, [sp, #20]
 8019262:	4d33      	ldr	r5, [pc, #204]	; (8019330 <_vfiprintf_r+0x21c>)
 8019264:	f898 1000 	ldrb.w	r1, [r8]
 8019268:	2203      	movs	r2, #3
 801926a:	4628      	mov	r0, r5
 801926c:	f7e7 f840 	bl	80002f0 <memchr>
 8019270:	b140      	cbz	r0, 8019284 <_vfiprintf_r+0x170>
 8019272:	2340      	movs	r3, #64	; 0x40
 8019274:	1b40      	subs	r0, r0, r5
 8019276:	fa03 f000 	lsl.w	r0, r3, r0
 801927a:	9b04      	ldr	r3, [sp, #16]
 801927c:	4303      	orrs	r3, r0
 801927e:	f108 0801 	add.w	r8, r8, #1
 8019282:	9304      	str	r3, [sp, #16]
 8019284:	f898 1000 	ldrb.w	r1, [r8]
 8019288:	482a      	ldr	r0, [pc, #168]	; (8019334 <_vfiprintf_r+0x220>)
 801928a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801928e:	2206      	movs	r2, #6
 8019290:	f108 0701 	add.w	r7, r8, #1
 8019294:	f7e7 f82c 	bl	80002f0 <memchr>
 8019298:	2800      	cmp	r0, #0
 801929a:	d037      	beq.n	801930c <_vfiprintf_r+0x1f8>
 801929c:	4b26      	ldr	r3, [pc, #152]	; (8019338 <_vfiprintf_r+0x224>)
 801929e:	bb1b      	cbnz	r3, 80192e8 <_vfiprintf_r+0x1d4>
 80192a0:	9b03      	ldr	r3, [sp, #12]
 80192a2:	3307      	adds	r3, #7
 80192a4:	f023 0307 	bic.w	r3, r3, #7
 80192a8:	3308      	adds	r3, #8
 80192aa:	9303      	str	r3, [sp, #12]
 80192ac:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80192ae:	444b      	add	r3, r9
 80192b0:	9309      	str	r3, [sp, #36]	; 0x24
 80192b2:	e750      	b.n	8019156 <_vfiprintf_r+0x42>
 80192b4:	fb05 3202 	mla	r2, r5, r2, r3
 80192b8:	2001      	movs	r0, #1
 80192ba:	4688      	mov	r8, r1
 80192bc:	e78a      	b.n	80191d4 <_vfiprintf_r+0xc0>
 80192be:	2300      	movs	r3, #0
 80192c0:	f108 0801 	add.w	r8, r8, #1
 80192c4:	9305      	str	r3, [sp, #20]
 80192c6:	4619      	mov	r1, r3
 80192c8:	250a      	movs	r5, #10
 80192ca:	4640      	mov	r0, r8
 80192cc:	f810 2b01 	ldrb.w	r2, [r0], #1
 80192d0:	3a30      	subs	r2, #48	; 0x30
 80192d2:	2a09      	cmp	r2, #9
 80192d4:	d903      	bls.n	80192de <_vfiprintf_r+0x1ca>
 80192d6:	2b00      	cmp	r3, #0
 80192d8:	d0c3      	beq.n	8019262 <_vfiprintf_r+0x14e>
 80192da:	9105      	str	r1, [sp, #20]
 80192dc:	e7c1      	b.n	8019262 <_vfiprintf_r+0x14e>
 80192de:	fb05 2101 	mla	r1, r5, r1, r2
 80192e2:	2301      	movs	r3, #1
 80192e4:	4680      	mov	r8, r0
 80192e6:	e7f0      	b.n	80192ca <_vfiprintf_r+0x1b6>
 80192e8:	ab03      	add	r3, sp, #12
 80192ea:	9300      	str	r3, [sp, #0]
 80192ec:	4622      	mov	r2, r4
 80192ee:	4b13      	ldr	r3, [pc, #76]	; (801933c <_vfiprintf_r+0x228>)
 80192f0:	a904      	add	r1, sp, #16
 80192f2:	4630      	mov	r0, r6
 80192f4:	f3af 8000 	nop.w
 80192f8:	f1b0 3fff 	cmp.w	r0, #4294967295
 80192fc:	4681      	mov	r9, r0
 80192fe:	d1d5      	bne.n	80192ac <_vfiprintf_r+0x198>
 8019300:	89a3      	ldrh	r3, [r4, #12]
 8019302:	065b      	lsls	r3, r3, #25
 8019304:	f53f af7e 	bmi.w	8019204 <_vfiprintf_r+0xf0>
 8019308:	9809      	ldr	r0, [sp, #36]	; 0x24
 801930a:	e77d      	b.n	8019208 <_vfiprintf_r+0xf4>
 801930c:	ab03      	add	r3, sp, #12
 801930e:	9300      	str	r3, [sp, #0]
 8019310:	4622      	mov	r2, r4
 8019312:	4b0a      	ldr	r3, [pc, #40]	; (801933c <_vfiprintf_r+0x228>)
 8019314:	a904      	add	r1, sp, #16
 8019316:	4630      	mov	r0, r6
 8019318:	f000 f888 	bl	801942c <_printf_i>
 801931c:	e7ec      	b.n	80192f8 <_vfiprintf_r+0x1e4>
 801931e:	bf00      	nop
 8019320:	0801a130 	.word	0x0801a130
 8019324:	0801a170 	.word	0x0801a170
 8019328:	0801a150 	.word	0x0801a150
 801932c:	0801a110 	.word	0x0801a110
 8019330:	0801a176 	.word	0x0801a176
 8019334:	0801a17a 	.word	0x0801a17a
 8019338:	00000000 	.word	0x00000000
 801933c:	080190ef 	.word	0x080190ef

08019340 <_printf_common>:
 8019340:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8019344:	4691      	mov	r9, r2
 8019346:	461f      	mov	r7, r3
 8019348:	688a      	ldr	r2, [r1, #8]
 801934a:	690b      	ldr	r3, [r1, #16]
 801934c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8019350:	4293      	cmp	r3, r2
 8019352:	bfb8      	it	lt
 8019354:	4613      	movlt	r3, r2
 8019356:	f8c9 3000 	str.w	r3, [r9]
 801935a:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 801935e:	4606      	mov	r6, r0
 8019360:	460c      	mov	r4, r1
 8019362:	b112      	cbz	r2, 801936a <_printf_common+0x2a>
 8019364:	3301      	adds	r3, #1
 8019366:	f8c9 3000 	str.w	r3, [r9]
 801936a:	6823      	ldr	r3, [r4, #0]
 801936c:	0699      	lsls	r1, r3, #26
 801936e:	bf42      	ittt	mi
 8019370:	f8d9 3000 	ldrmi.w	r3, [r9]
 8019374:	3302      	addmi	r3, #2
 8019376:	f8c9 3000 	strmi.w	r3, [r9]
 801937a:	6825      	ldr	r5, [r4, #0]
 801937c:	f015 0506 	ands.w	r5, r5, #6
 8019380:	d107      	bne.n	8019392 <_printf_common+0x52>
 8019382:	f104 0a19 	add.w	sl, r4, #25
 8019386:	68e3      	ldr	r3, [r4, #12]
 8019388:	f8d9 2000 	ldr.w	r2, [r9]
 801938c:	1a9b      	subs	r3, r3, r2
 801938e:	42ab      	cmp	r3, r5
 8019390:	dc28      	bgt.n	80193e4 <_printf_common+0xa4>
 8019392:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8019396:	6822      	ldr	r2, [r4, #0]
 8019398:	3300      	adds	r3, #0
 801939a:	bf18      	it	ne
 801939c:	2301      	movne	r3, #1
 801939e:	0692      	lsls	r2, r2, #26
 80193a0:	d42d      	bmi.n	80193fe <_printf_common+0xbe>
 80193a2:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80193a6:	4639      	mov	r1, r7
 80193a8:	4630      	mov	r0, r6
 80193aa:	47c0      	blx	r8
 80193ac:	3001      	adds	r0, #1
 80193ae:	d020      	beq.n	80193f2 <_printf_common+0xb2>
 80193b0:	6823      	ldr	r3, [r4, #0]
 80193b2:	68e5      	ldr	r5, [r4, #12]
 80193b4:	f8d9 2000 	ldr.w	r2, [r9]
 80193b8:	f003 0306 	and.w	r3, r3, #6
 80193bc:	2b04      	cmp	r3, #4
 80193be:	bf08      	it	eq
 80193c0:	1aad      	subeq	r5, r5, r2
 80193c2:	68a3      	ldr	r3, [r4, #8]
 80193c4:	6922      	ldr	r2, [r4, #16]
 80193c6:	bf0c      	ite	eq
 80193c8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80193cc:	2500      	movne	r5, #0
 80193ce:	4293      	cmp	r3, r2
 80193d0:	bfc4      	itt	gt
 80193d2:	1a9b      	subgt	r3, r3, r2
 80193d4:	18ed      	addgt	r5, r5, r3
 80193d6:	f04f 0900 	mov.w	r9, #0
 80193da:	341a      	adds	r4, #26
 80193dc:	454d      	cmp	r5, r9
 80193de:	d11a      	bne.n	8019416 <_printf_common+0xd6>
 80193e0:	2000      	movs	r0, #0
 80193e2:	e008      	b.n	80193f6 <_printf_common+0xb6>
 80193e4:	2301      	movs	r3, #1
 80193e6:	4652      	mov	r2, sl
 80193e8:	4639      	mov	r1, r7
 80193ea:	4630      	mov	r0, r6
 80193ec:	47c0      	blx	r8
 80193ee:	3001      	adds	r0, #1
 80193f0:	d103      	bne.n	80193fa <_printf_common+0xba>
 80193f2:	f04f 30ff 	mov.w	r0, #4294967295
 80193f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80193fa:	3501      	adds	r5, #1
 80193fc:	e7c3      	b.n	8019386 <_printf_common+0x46>
 80193fe:	18e1      	adds	r1, r4, r3
 8019400:	1c5a      	adds	r2, r3, #1
 8019402:	2030      	movs	r0, #48	; 0x30
 8019404:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8019408:	4422      	add	r2, r4
 801940a:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 801940e:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8019412:	3302      	adds	r3, #2
 8019414:	e7c5      	b.n	80193a2 <_printf_common+0x62>
 8019416:	2301      	movs	r3, #1
 8019418:	4622      	mov	r2, r4
 801941a:	4639      	mov	r1, r7
 801941c:	4630      	mov	r0, r6
 801941e:	47c0      	blx	r8
 8019420:	3001      	adds	r0, #1
 8019422:	d0e6      	beq.n	80193f2 <_printf_common+0xb2>
 8019424:	f109 0901 	add.w	r9, r9, #1
 8019428:	e7d8      	b.n	80193dc <_printf_common+0x9c>
	...

0801942c <_printf_i>:
 801942c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8019430:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8019434:	460c      	mov	r4, r1
 8019436:	7e09      	ldrb	r1, [r1, #24]
 8019438:	b085      	sub	sp, #20
 801943a:	296e      	cmp	r1, #110	; 0x6e
 801943c:	4617      	mov	r7, r2
 801943e:	4606      	mov	r6, r0
 8019440:	4698      	mov	r8, r3
 8019442:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8019444:	f000 80b3 	beq.w	80195ae <_printf_i+0x182>
 8019448:	d822      	bhi.n	8019490 <_printf_i+0x64>
 801944a:	2963      	cmp	r1, #99	; 0x63
 801944c:	d036      	beq.n	80194bc <_printf_i+0x90>
 801944e:	d80a      	bhi.n	8019466 <_printf_i+0x3a>
 8019450:	2900      	cmp	r1, #0
 8019452:	f000 80b9 	beq.w	80195c8 <_printf_i+0x19c>
 8019456:	2958      	cmp	r1, #88	; 0x58
 8019458:	f000 8083 	beq.w	8019562 <_printf_i+0x136>
 801945c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8019460:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8019464:	e032      	b.n	80194cc <_printf_i+0xa0>
 8019466:	2964      	cmp	r1, #100	; 0x64
 8019468:	d001      	beq.n	801946e <_printf_i+0x42>
 801946a:	2969      	cmp	r1, #105	; 0x69
 801946c:	d1f6      	bne.n	801945c <_printf_i+0x30>
 801946e:	6820      	ldr	r0, [r4, #0]
 8019470:	6813      	ldr	r3, [r2, #0]
 8019472:	0605      	lsls	r5, r0, #24
 8019474:	f103 0104 	add.w	r1, r3, #4
 8019478:	d52a      	bpl.n	80194d0 <_printf_i+0xa4>
 801947a:	681b      	ldr	r3, [r3, #0]
 801947c:	6011      	str	r1, [r2, #0]
 801947e:	2b00      	cmp	r3, #0
 8019480:	da03      	bge.n	801948a <_printf_i+0x5e>
 8019482:	222d      	movs	r2, #45	; 0x2d
 8019484:	425b      	negs	r3, r3
 8019486:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 801948a:	486f      	ldr	r0, [pc, #444]	; (8019648 <_printf_i+0x21c>)
 801948c:	220a      	movs	r2, #10
 801948e:	e039      	b.n	8019504 <_printf_i+0xd8>
 8019490:	2973      	cmp	r1, #115	; 0x73
 8019492:	f000 809d 	beq.w	80195d0 <_printf_i+0x1a4>
 8019496:	d808      	bhi.n	80194aa <_printf_i+0x7e>
 8019498:	296f      	cmp	r1, #111	; 0x6f
 801949a:	d020      	beq.n	80194de <_printf_i+0xb2>
 801949c:	2970      	cmp	r1, #112	; 0x70
 801949e:	d1dd      	bne.n	801945c <_printf_i+0x30>
 80194a0:	6823      	ldr	r3, [r4, #0]
 80194a2:	f043 0320 	orr.w	r3, r3, #32
 80194a6:	6023      	str	r3, [r4, #0]
 80194a8:	e003      	b.n	80194b2 <_printf_i+0x86>
 80194aa:	2975      	cmp	r1, #117	; 0x75
 80194ac:	d017      	beq.n	80194de <_printf_i+0xb2>
 80194ae:	2978      	cmp	r1, #120	; 0x78
 80194b0:	d1d4      	bne.n	801945c <_printf_i+0x30>
 80194b2:	2378      	movs	r3, #120	; 0x78
 80194b4:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80194b8:	4864      	ldr	r0, [pc, #400]	; (801964c <_printf_i+0x220>)
 80194ba:	e055      	b.n	8019568 <_printf_i+0x13c>
 80194bc:	6813      	ldr	r3, [r2, #0]
 80194be:	1d19      	adds	r1, r3, #4
 80194c0:	681b      	ldr	r3, [r3, #0]
 80194c2:	6011      	str	r1, [r2, #0]
 80194c4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80194c8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80194cc:	2301      	movs	r3, #1
 80194ce:	e08c      	b.n	80195ea <_printf_i+0x1be>
 80194d0:	681b      	ldr	r3, [r3, #0]
 80194d2:	6011      	str	r1, [r2, #0]
 80194d4:	f010 0f40 	tst.w	r0, #64	; 0x40
 80194d8:	bf18      	it	ne
 80194da:	b21b      	sxthne	r3, r3
 80194dc:	e7cf      	b.n	801947e <_printf_i+0x52>
 80194de:	6813      	ldr	r3, [r2, #0]
 80194e0:	6825      	ldr	r5, [r4, #0]
 80194e2:	1d18      	adds	r0, r3, #4
 80194e4:	6010      	str	r0, [r2, #0]
 80194e6:	0628      	lsls	r0, r5, #24
 80194e8:	d501      	bpl.n	80194ee <_printf_i+0xc2>
 80194ea:	681b      	ldr	r3, [r3, #0]
 80194ec:	e002      	b.n	80194f4 <_printf_i+0xc8>
 80194ee:	0668      	lsls	r0, r5, #25
 80194f0:	d5fb      	bpl.n	80194ea <_printf_i+0xbe>
 80194f2:	881b      	ldrh	r3, [r3, #0]
 80194f4:	4854      	ldr	r0, [pc, #336]	; (8019648 <_printf_i+0x21c>)
 80194f6:	296f      	cmp	r1, #111	; 0x6f
 80194f8:	bf14      	ite	ne
 80194fa:	220a      	movne	r2, #10
 80194fc:	2208      	moveq	r2, #8
 80194fe:	2100      	movs	r1, #0
 8019500:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8019504:	6865      	ldr	r5, [r4, #4]
 8019506:	60a5      	str	r5, [r4, #8]
 8019508:	2d00      	cmp	r5, #0
 801950a:	f2c0 8095 	blt.w	8019638 <_printf_i+0x20c>
 801950e:	6821      	ldr	r1, [r4, #0]
 8019510:	f021 0104 	bic.w	r1, r1, #4
 8019514:	6021      	str	r1, [r4, #0]
 8019516:	2b00      	cmp	r3, #0
 8019518:	d13d      	bne.n	8019596 <_printf_i+0x16a>
 801951a:	2d00      	cmp	r5, #0
 801951c:	f040 808e 	bne.w	801963c <_printf_i+0x210>
 8019520:	4665      	mov	r5, ip
 8019522:	2a08      	cmp	r2, #8
 8019524:	d10b      	bne.n	801953e <_printf_i+0x112>
 8019526:	6823      	ldr	r3, [r4, #0]
 8019528:	07db      	lsls	r3, r3, #31
 801952a:	d508      	bpl.n	801953e <_printf_i+0x112>
 801952c:	6923      	ldr	r3, [r4, #16]
 801952e:	6862      	ldr	r2, [r4, #4]
 8019530:	429a      	cmp	r2, r3
 8019532:	bfde      	ittt	le
 8019534:	2330      	movle	r3, #48	; 0x30
 8019536:	f805 3c01 	strble.w	r3, [r5, #-1]
 801953a:	f105 35ff 	addle.w	r5, r5, #4294967295
 801953e:	ebac 0305 	sub.w	r3, ip, r5
 8019542:	6123      	str	r3, [r4, #16]
 8019544:	f8cd 8000 	str.w	r8, [sp]
 8019548:	463b      	mov	r3, r7
 801954a:	aa03      	add	r2, sp, #12
 801954c:	4621      	mov	r1, r4
 801954e:	4630      	mov	r0, r6
 8019550:	f7ff fef6 	bl	8019340 <_printf_common>
 8019554:	3001      	adds	r0, #1
 8019556:	d14d      	bne.n	80195f4 <_printf_i+0x1c8>
 8019558:	f04f 30ff 	mov.w	r0, #4294967295
 801955c:	b005      	add	sp, #20
 801955e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8019562:	4839      	ldr	r0, [pc, #228]	; (8019648 <_printf_i+0x21c>)
 8019564:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8019568:	6813      	ldr	r3, [r2, #0]
 801956a:	6821      	ldr	r1, [r4, #0]
 801956c:	1d1d      	adds	r5, r3, #4
 801956e:	681b      	ldr	r3, [r3, #0]
 8019570:	6015      	str	r5, [r2, #0]
 8019572:	060a      	lsls	r2, r1, #24
 8019574:	d50b      	bpl.n	801958e <_printf_i+0x162>
 8019576:	07ca      	lsls	r2, r1, #31
 8019578:	bf44      	itt	mi
 801957a:	f041 0120 	orrmi.w	r1, r1, #32
 801957e:	6021      	strmi	r1, [r4, #0]
 8019580:	b91b      	cbnz	r3, 801958a <_printf_i+0x15e>
 8019582:	6822      	ldr	r2, [r4, #0]
 8019584:	f022 0220 	bic.w	r2, r2, #32
 8019588:	6022      	str	r2, [r4, #0]
 801958a:	2210      	movs	r2, #16
 801958c:	e7b7      	b.n	80194fe <_printf_i+0xd2>
 801958e:	064d      	lsls	r5, r1, #25
 8019590:	bf48      	it	mi
 8019592:	b29b      	uxthmi	r3, r3
 8019594:	e7ef      	b.n	8019576 <_printf_i+0x14a>
 8019596:	4665      	mov	r5, ip
 8019598:	fbb3 f1f2 	udiv	r1, r3, r2
 801959c:	fb02 3311 	mls	r3, r2, r1, r3
 80195a0:	5cc3      	ldrb	r3, [r0, r3]
 80195a2:	f805 3d01 	strb.w	r3, [r5, #-1]!
 80195a6:	460b      	mov	r3, r1
 80195a8:	2900      	cmp	r1, #0
 80195aa:	d1f5      	bne.n	8019598 <_printf_i+0x16c>
 80195ac:	e7b9      	b.n	8019522 <_printf_i+0xf6>
 80195ae:	6813      	ldr	r3, [r2, #0]
 80195b0:	6825      	ldr	r5, [r4, #0]
 80195b2:	6961      	ldr	r1, [r4, #20]
 80195b4:	1d18      	adds	r0, r3, #4
 80195b6:	6010      	str	r0, [r2, #0]
 80195b8:	0628      	lsls	r0, r5, #24
 80195ba:	681b      	ldr	r3, [r3, #0]
 80195bc:	d501      	bpl.n	80195c2 <_printf_i+0x196>
 80195be:	6019      	str	r1, [r3, #0]
 80195c0:	e002      	b.n	80195c8 <_printf_i+0x19c>
 80195c2:	066a      	lsls	r2, r5, #25
 80195c4:	d5fb      	bpl.n	80195be <_printf_i+0x192>
 80195c6:	8019      	strh	r1, [r3, #0]
 80195c8:	2300      	movs	r3, #0
 80195ca:	6123      	str	r3, [r4, #16]
 80195cc:	4665      	mov	r5, ip
 80195ce:	e7b9      	b.n	8019544 <_printf_i+0x118>
 80195d0:	6813      	ldr	r3, [r2, #0]
 80195d2:	1d19      	adds	r1, r3, #4
 80195d4:	6011      	str	r1, [r2, #0]
 80195d6:	681d      	ldr	r5, [r3, #0]
 80195d8:	6862      	ldr	r2, [r4, #4]
 80195da:	2100      	movs	r1, #0
 80195dc:	4628      	mov	r0, r5
 80195de:	f7e6 fe87 	bl	80002f0 <memchr>
 80195e2:	b108      	cbz	r0, 80195e8 <_printf_i+0x1bc>
 80195e4:	1b40      	subs	r0, r0, r5
 80195e6:	6060      	str	r0, [r4, #4]
 80195e8:	6863      	ldr	r3, [r4, #4]
 80195ea:	6123      	str	r3, [r4, #16]
 80195ec:	2300      	movs	r3, #0
 80195ee:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80195f2:	e7a7      	b.n	8019544 <_printf_i+0x118>
 80195f4:	6923      	ldr	r3, [r4, #16]
 80195f6:	462a      	mov	r2, r5
 80195f8:	4639      	mov	r1, r7
 80195fa:	4630      	mov	r0, r6
 80195fc:	47c0      	blx	r8
 80195fe:	3001      	adds	r0, #1
 8019600:	d0aa      	beq.n	8019558 <_printf_i+0x12c>
 8019602:	6823      	ldr	r3, [r4, #0]
 8019604:	079b      	lsls	r3, r3, #30
 8019606:	d413      	bmi.n	8019630 <_printf_i+0x204>
 8019608:	68e0      	ldr	r0, [r4, #12]
 801960a:	9b03      	ldr	r3, [sp, #12]
 801960c:	4298      	cmp	r0, r3
 801960e:	bfb8      	it	lt
 8019610:	4618      	movlt	r0, r3
 8019612:	e7a3      	b.n	801955c <_printf_i+0x130>
 8019614:	2301      	movs	r3, #1
 8019616:	464a      	mov	r2, r9
 8019618:	4639      	mov	r1, r7
 801961a:	4630      	mov	r0, r6
 801961c:	47c0      	blx	r8
 801961e:	3001      	adds	r0, #1
 8019620:	d09a      	beq.n	8019558 <_printf_i+0x12c>
 8019622:	3501      	adds	r5, #1
 8019624:	68e3      	ldr	r3, [r4, #12]
 8019626:	9a03      	ldr	r2, [sp, #12]
 8019628:	1a9b      	subs	r3, r3, r2
 801962a:	42ab      	cmp	r3, r5
 801962c:	dcf2      	bgt.n	8019614 <_printf_i+0x1e8>
 801962e:	e7eb      	b.n	8019608 <_printf_i+0x1dc>
 8019630:	2500      	movs	r5, #0
 8019632:	f104 0919 	add.w	r9, r4, #25
 8019636:	e7f5      	b.n	8019624 <_printf_i+0x1f8>
 8019638:	2b00      	cmp	r3, #0
 801963a:	d1ac      	bne.n	8019596 <_printf_i+0x16a>
 801963c:	7803      	ldrb	r3, [r0, #0]
 801963e:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8019642:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8019646:	e76c      	b.n	8019522 <_printf_i+0xf6>
 8019648:	0801a181 	.word	0x0801a181
 801964c:	0801a192 	.word	0x0801a192

08019650 <__sread>:
 8019650:	b510      	push	{r4, lr}
 8019652:	460c      	mov	r4, r1
 8019654:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8019658:	f000 f8d4 	bl	8019804 <_read_r>
 801965c:	2800      	cmp	r0, #0
 801965e:	bfab      	itete	ge
 8019660:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8019662:	89a3      	ldrhlt	r3, [r4, #12]
 8019664:	181b      	addge	r3, r3, r0
 8019666:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 801966a:	bfac      	ite	ge
 801966c:	6563      	strge	r3, [r4, #84]	; 0x54
 801966e:	81a3      	strhlt	r3, [r4, #12]
 8019670:	bd10      	pop	{r4, pc}

08019672 <__swrite>:
 8019672:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8019676:	461f      	mov	r7, r3
 8019678:	898b      	ldrh	r3, [r1, #12]
 801967a:	05db      	lsls	r3, r3, #23
 801967c:	4605      	mov	r5, r0
 801967e:	460c      	mov	r4, r1
 8019680:	4616      	mov	r6, r2
 8019682:	d505      	bpl.n	8019690 <__swrite+0x1e>
 8019684:	2302      	movs	r3, #2
 8019686:	2200      	movs	r2, #0
 8019688:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801968c:	f000 f868 	bl	8019760 <_lseek_r>
 8019690:	89a3      	ldrh	r3, [r4, #12]
 8019692:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8019696:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 801969a:	81a3      	strh	r3, [r4, #12]
 801969c:	4632      	mov	r2, r6
 801969e:	463b      	mov	r3, r7
 80196a0:	4628      	mov	r0, r5
 80196a2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80196a6:	f000 b817 	b.w	80196d8 <_write_r>

080196aa <__sseek>:
 80196aa:	b510      	push	{r4, lr}
 80196ac:	460c      	mov	r4, r1
 80196ae:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80196b2:	f000 f855 	bl	8019760 <_lseek_r>
 80196b6:	1c43      	adds	r3, r0, #1
 80196b8:	89a3      	ldrh	r3, [r4, #12]
 80196ba:	bf15      	itete	ne
 80196bc:	6560      	strne	r0, [r4, #84]	; 0x54
 80196be:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80196c2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80196c6:	81a3      	strheq	r3, [r4, #12]
 80196c8:	bf18      	it	ne
 80196ca:	81a3      	strhne	r3, [r4, #12]
 80196cc:	bd10      	pop	{r4, pc}

080196ce <__sclose>:
 80196ce:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80196d2:	f000 b813 	b.w	80196fc <_close_r>
	...

080196d8 <_write_r>:
 80196d8:	b538      	push	{r3, r4, r5, lr}
 80196da:	4c07      	ldr	r4, [pc, #28]	; (80196f8 <_write_r+0x20>)
 80196dc:	4605      	mov	r5, r0
 80196de:	4608      	mov	r0, r1
 80196e0:	4611      	mov	r1, r2
 80196e2:	2200      	movs	r2, #0
 80196e4:	6022      	str	r2, [r4, #0]
 80196e6:	461a      	mov	r2, r3
 80196e8:	f7e9 fb4f 	bl	8002d8a <_write>
 80196ec:	1c43      	adds	r3, r0, #1
 80196ee:	d102      	bne.n	80196f6 <_write_r+0x1e>
 80196f0:	6823      	ldr	r3, [r4, #0]
 80196f2:	b103      	cbz	r3, 80196f6 <_write_r+0x1e>
 80196f4:	602b      	str	r3, [r5, #0]
 80196f6:	bd38      	pop	{r3, r4, r5, pc}
 80196f8:	24002484 	.word	0x24002484

080196fc <_close_r>:
 80196fc:	b538      	push	{r3, r4, r5, lr}
 80196fe:	4c06      	ldr	r4, [pc, #24]	; (8019718 <_close_r+0x1c>)
 8019700:	2300      	movs	r3, #0
 8019702:	4605      	mov	r5, r0
 8019704:	4608      	mov	r0, r1
 8019706:	6023      	str	r3, [r4, #0]
 8019708:	f7e9 fe4f 	bl	80033aa <_close>
 801970c:	1c43      	adds	r3, r0, #1
 801970e:	d102      	bne.n	8019716 <_close_r+0x1a>
 8019710:	6823      	ldr	r3, [r4, #0]
 8019712:	b103      	cbz	r3, 8019716 <_close_r+0x1a>
 8019714:	602b      	str	r3, [r5, #0]
 8019716:	bd38      	pop	{r3, r4, r5, pc}
 8019718:	24002484 	.word	0x24002484

0801971c <_fstat_r>:
 801971c:	b538      	push	{r3, r4, r5, lr}
 801971e:	4c07      	ldr	r4, [pc, #28]	; (801973c <_fstat_r+0x20>)
 8019720:	2300      	movs	r3, #0
 8019722:	4605      	mov	r5, r0
 8019724:	4608      	mov	r0, r1
 8019726:	4611      	mov	r1, r2
 8019728:	6023      	str	r3, [r4, #0]
 801972a:	f7e9 fe4a 	bl	80033c2 <_fstat>
 801972e:	1c43      	adds	r3, r0, #1
 8019730:	d102      	bne.n	8019738 <_fstat_r+0x1c>
 8019732:	6823      	ldr	r3, [r4, #0]
 8019734:	b103      	cbz	r3, 8019738 <_fstat_r+0x1c>
 8019736:	602b      	str	r3, [r5, #0]
 8019738:	bd38      	pop	{r3, r4, r5, pc}
 801973a:	bf00      	nop
 801973c:	24002484 	.word	0x24002484

08019740 <_isatty_r>:
 8019740:	b538      	push	{r3, r4, r5, lr}
 8019742:	4c06      	ldr	r4, [pc, #24]	; (801975c <_isatty_r+0x1c>)
 8019744:	2300      	movs	r3, #0
 8019746:	4605      	mov	r5, r0
 8019748:	4608      	mov	r0, r1
 801974a:	6023      	str	r3, [r4, #0]
 801974c:	f7e9 fe49 	bl	80033e2 <_isatty>
 8019750:	1c43      	adds	r3, r0, #1
 8019752:	d102      	bne.n	801975a <_isatty_r+0x1a>
 8019754:	6823      	ldr	r3, [r4, #0]
 8019756:	b103      	cbz	r3, 801975a <_isatty_r+0x1a>
 8019758:	602b      	str	r3, [r5, #0]
 801975a:	bd38      	pop	{r3, r4, r5, pc}
 801975c:	24002484 	.word	0x24002484

08019760 <_lseek_r>:
 8019760:	b538      	push	{r3, r4, r5, lr}
 8019762:	4c07      	ldr	r4, [pc, #28]	; (8019780 <_lseek_r+0x20>)
 8019764:	4605      	mov	r5, r0
 8019766:	4608      	mov	r0, r1
 8019768:	4611      	mov	r1, r2
 801976a:	2200      	movs	r2, #0
 801976c:	6022      	str	r2, [r4, #0]
 801976e:	461a      	mov	r2, r3
 8019770:	f7e9 fe42 	bl	80033f8 <_lseek>
 8019774:	1c43      	adds	r3, r0, #1
 8019776:	d102      	bne.n	801977e <_lseek_r+0x1e>
 8019778:	6823      	ldr	r3, [r4, #0]
 801977a:	b103      	cbz	r3, 801977e <_lseek_r+0x1e>
 801977c:	602b      	str	r3, [r5, #0]
 801977e:	bd38      	pop	{r3, r4, r5, pc}
 8019780:	24002484 	.word	0x24002484

08019784 <memmove>:
 8019784:	4288      	cmp	r0, r1
 8019786:	b510      	push	{r4, lr}
 8019788:	eb01 0302 	add.w	r3, r1, r2
 801978c:	d807      	bhi.n	801979e <memmove+0x1a>
 801978e:	1e42      	subs	r2, r0, #1
 8019790:	4299      	cmp	r1, r3
 8019792:	d00a      	beq.n	80197aa <memmove+0x26>
 8019794:	f811 4b01 	ldrb.w	r4, [r1], #1
 8019798:	f802 4f01 	strb.w	r4, [r2, #1]!
 801979c:	e7f8      	b.n	8019790 <memmove+0xc>
 801979e:	4283      	cmp	r3, r0
 80197a0:	d9f5      	bls.n	801978e <memmove+0xa>
 80197a2:	1881      	adds	r1, r0, r2
 80197a4:	1ad2      	subs	r2, r2, r3
 80197a6:	42d3      	cmn	r3, r2
 80197a8:	d100      	bne.n	80197ac <memmove+0x28>
 80197aa:	bd10      	pop	{r4, pc}
 80197ac:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80197b0:	f801 4d01 	strb.w	r4, [r1, #-1]!
 80197b4:	e7f7      	b.n	80197a6 <memmove+0x22>

080197b6 <_realloc_r>:
 80197b6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80197b8:	4607      	mov	r7, r0
 80197ba:	4614      	mov	r4, r2
 80197bc:	460e      	mov	r6, r1
 80197be:	b921      	cbnz	r1, 80197ca <_realloc_r+0x14>
 80197c0:	4611      	mov	r1, r2
 80197c2:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80197c6:	f7fe bf4f 	b.w	8018668 <_malloc_r>
 80197ca:	b922      	cbnz	r2, 80197d6 <_realloc_r+0x20>
 80197cc:	f7fe fefe 	bl	80185cc <_free_r>
 80197d0:	4625      	mov	r5, r4
 80197d2:	4628      	mov	r0, r5
 80197d4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80197d6:	f000 f827 	bl	8019828 <_malloc_usable_size_r>
 80197da:	42a0      	cmp	r0, r4
 80197dc:	d20f      	bcs.n	80197fe <_realloc_r+0x48>
 80197de:	4621      	mov	r1, r4
 80197e0:	4638      	mov	r0, r7
 80197e2:	f7fe ff41 	bl	8018668 <_malloc_r>
 80197e6:	4605      	mov	r5, r0
 80197e8:	2800      	cmp	r0, #0
 80197ea:	d0f2      	beq.n	80197d2 <_realloc_r+0x1c>
 80197ec:	4631      	mov	r1, r6
 80197ee:	4622      	mov	r2, r4
 80197f0:	f7fe fed8 	bl	80185a4 <memcpy>
 80197f4:	4631      	mov	r1, r6
 80197f6:	4638      	mov	r0, r7
 80197f8:	f7fe fee8 	bl	80185cc <_free_r>
 80197fc:	e7e9      	b.n	80197d2 <_realloc_r+0x1c>
 80197fe:	4635      	mov	r5, r6
 8019800:	e7e7      	b.n	80197d2 <_realloc_r+0x1c>
	...

08019804 <_read_r>:
 8019804:	b538      	push	{r3, r4, r5, lr}
 8019806:	4c07      	ldr	r4, [pc, #28]	; (8019824 <_read_r+0x20>)
 8019808:	4605      	mov	r5, r0
 801980a:	4608      	mov	r0, r1
 801980c:	4611      	mov	r1, r2
 801980e:	2200      	movs	r2, #0
 8019810:	6022      	str	r2, [r4, #0]
 8019812:	461a      	mov	r2, r3
 8019814:	f7e9 fdac 	bl	8003370 <_read>
 8019818:	1c43      	adds	r3, r0, #1
 801981a:	d102      	bne.n	8019822 <_read_r+0x1e>
 801981c:	6823      	ldr	r3, [r4, #0]
 801981e:	b103      	cbz	r3, 8019822 <_read_r+0x1e>
 8019820:	602b      	str	r3, [r5, #0]
 8019822:	bd38      	pop	{r3, r4, r5, pc}
 8019824:	24002484 	.word	0x24002484

08019828 <_malloc_usable_size_r>:
 8019828:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801982c:	1f18      	subs	r0, r3, #4
 801982e:	2b00      	cmp	r3, #0
 8019830:	bfbc      	itt	lt
 8019832:	580b      	ldrlt	r3, [r1, r0]
 8019834:	18c0      	addlt	r0, r0, r3
 8019836:	4770      	bx	lr

08019838 <_init>:
 8019838:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801983a:	bf00      	nop
 801983c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801983e:	bc08      	pop	{r3}
 8019840:	469e      	mov	lr, r3
 8019842:	4770      	bx	lr

08019844 <_fini>:
 8019844:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8019846:	bf00      	nop
 8019848:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801984a:	bc08      	pop	{r3}
 801984c:	469e      	mov	lr, r3
 801984e:	4770      	bx	lr

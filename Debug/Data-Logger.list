
Data-Logger.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001a574  080002a0  080002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000978  0801a814  0801a814  0002a814  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801b18c  0801b18c  000301dc  2**0
                  CONTENTS
  4 .ARM          00000008  0801b18c  0801b18c  0002b18c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801b194  0801b194  000301dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0801b194  0801b194  0002b194  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0801b198  0801b198  0002b198  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001dc  24000000  0801b19c  00030000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000022d0  240001e0  0801b378  000301e0  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  240024b0  0801b378  000324b0  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  000301dc  2**0
                  CONTENTS, READONLY
 12 .debug_info   0004a07c  00000000  00000000  0003020a  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00007b12  00000000  00000000  0007a286  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00002428  00000000  00000000  00081d98  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00002130  00000000  00000000  000841c0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000430f0  00000000  00000000  000862f0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00028194  00000000  00000000  000c93e0  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00178689  00000000  00000000  000f1574  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00269bfd  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00009f94  00000000  00000000  00269c78  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	; (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	; (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	; (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	240001e0 	.word	0x240001e0
 80002bc:	00000000 	.word	0x00000000
 80002c0:	0801a7fc 	.word	0x0801a7fc

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	; (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	; (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	; (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	240001e4 	.word	0x240001e4
 80002dc:	0801a7fc 	.word	0x0801a7fc

080002e0 <strlen>:
 80002e0:	4603      	mov	r3, r0
 80002e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002e6:	2a00      	cmp	r2, #0
 80002e8:	d1fb      	bne.n	80002e2 <strlen+0x2>
 80002ea:	1a18      	subs	r0, r3, r0
 80002ec:	3801      	subs	r0, #1
 80002ee:	4770      	bx	lr

080002f0 <memchr>:
 80002f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002f4:	2a10      	cmp	r2, #16
 80002f6:	db2b      	blt.n	8000350 <memchr+0x60>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	d008      	beq.n	8000310 <memchr+0x20>
 80002fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000302:	3a01      	subs	r2, #1
 8000304:	428b      	cmp	r3, r1
 8000306:	d02d      	beq.n	8000364 <memchr+0x74>
 8000308:	f010 0f07 	tst.w	r0, #7
 800030c:	b342      	cbz	r2, 8000360 <memchr+0x70>
 800030e:	d1f6      	bne.n	80002fe <memchr+0xe>
 8000310:	b4f0      	push	{r4, r5, r6, r7}
 8000312:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000316:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800031a:	f022 0407 	bic.w	r4, r2, #7
 800031e:	f07f 0700 	mvns.w	r7, #0
 8000322:	2300      	movs	r3, #0
 8000324:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000328:	3c08      	subs	r4, #8
 800032a:	ea85 0501 	eor.w	r5, r5, r1
 800032e:	ea86 0601 	eor.w	r6, r6, r1
 8000332:	fa85 f547 	uadd8	r5, r5, r7
 8000336:	faa3 f587 	sel	r5, r3, r7
 800033a:	fa86 f647 	uadd8	r6, r6, r7
 800033e:	faa5 f687 	sel	r6, r5, r7
 8000342:	b98e      	cbnz	r6, 8000368 <memchr+0x78>
 8000344:	d1ee      	bne.n	8000324 <memchr+0x34>
 8000346:	bcf0      	pop	{r4, r5, r6, r7}
 8000348:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800034c:	f002 0207 	and.w	r2, r2, #7
 8000350:	b132      	cbz	r2, 8000360 <memchr+0x70>
 8000352:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000356:	3a01      	subs	r2, #1
 8000358:	ea83 0301 	eor.w	r3, r3, r1
 800035c:	b113      	cbz	r3, 8000364 <memchr+0x74>
 800035e:	d1f8      	bne.n	8000352 <memchr+0x62>
 8000360:	2000      	movs	r0, #0
 8000362:	4770      	bx	lr
 8000364:	3801      	subs	r0, #1
 8000366:	4770      	bx	lr
 8000368:	2d00      	cmp	r5, #0
 800036a:	bf06      	itte	eq
 800036c:	4635      	moveq	r5, r6
 800036e:	3803      	subeq	r0, #3
 8000370:	3807      	subne	r0, #7
 8000372:	f015 0f01 	tst.w	r5, #1
 8000376:	d107      	bne.n	8000388 <memchr+0x98>
 8000378:	3001      	adds	r0, #1
 800037a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800037e:	bf02      	ittt	eq
 8000380:	3001      	addeq	r0, #1
 8000382:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000386:	3001      	addeq	r0, #1
 8000388:	bcf0      	pop	{r4, r5, r6, r7}
 800038a:	3801      	subs	r0, #1
 800038c:	4770      	bx	lr
 800038e:	bf00      	nop

08000390 <__aeabi_uldivmod>:
 8000390:	b953      	cbnz	r3, 80003a8 <__aeabi_uldivmod+0x18>
 8000392:	b94a      	cbnz	r2, 80003a8 <__aeabi_uldivmod+0x18>
 8000394:	2900      	cmp	r1, #0
 8000396:	bf08      	it	eq
 8000398:	2800      	cmpeq	r0, #0
 800039a:	bf1c      	itt	ne
 800039c:	f04f 31ff 	movne.w	r1, #4294967295
 80003a0:	f04f 30ff 	movne.w	r0, #4294967295
 80003a4:	f000 b972 	b.w	800068c <__aeabi_idiv0>
 80003a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80003ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003b0:	f000 f806 	bl	80003c0 <__udivmoddi4>
 80003b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003bc:	b004      	add	sp, #16
 80003be:	4770      	bx	lr

080003c0 <__udivmoddi4>:
 80003c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003c4:	9e08      	ldr	r6, [sp, #32]
 80003c6:	4604      	mov	r4, r0
 80003c8:	4688      	mov	r8, r1
 80003ca:	2b00      	cmp	r3, #0
 80003cc:	d14b      	bne.n	8000466 <__udivmoddi4+0xa6>
 80003ce:	428a      	cmp	r2, r1
 80003d0:	4615      	mov	r5, r2
 80003d2:	d967      	bls.n	80004a4 <__udivmoddi4+0xe4>
 80003d4:	fab2 f282 	clz	r2, r2
 80003d8:	b14a      	cbz	r2, 80003ee <__udivmoddi4+0x2e>
 80003da:	f1c2 0720 	rsb	r7, r2, #32
 80003de:	fa01 f302 	lsl.w	r3, r1, r2
 80003e2:	fa20 f707 	lsr.w	r7, r0, r7
 80003e6:	4095      	lsls	r5, r2
 80003e8:	ea47 0803 	orr.w	r8, r7, r3
 80003ec:	4094      	lsls	r4, r2
 80003ee:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80003f2:	0c23      	lsrs	r3, r4, #16
 80003f4:	fbb8 f7fe 	udiv	r7, r8, lr
 80003f8:	fa1f fc85 	uxth.w	ip, r5
 80003fc:	fb0e 8817 	mls	r8, lr, r7, r8
 8000400:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000404:	fb07 f10c 	mul.w	r1, r7, ip
 8000408:	4299      	cmp	r1, r3
 800040a:	d909      	bls.n	8000420 <__udivmoddi4+0x60>
 800040c:	18eb      	adds	r3, r5, r3
 800040e:	f107 30ff 	add.w	r0, r7, #4294967295
 8000412:	f080 811b 	bcs.w	800064c <__udivmoddi4+0x28c>
 8000416:	4299      	cmp	r1, r3
 8000418:	f240 8118 	bls.w	800064c <__udivmoddi4+0x28c>
 800041c:	3f02      	subs	r7, #2
 800041e:	442b      	add	r3, r5
 8000420:	1a5b      	subs	r3, r3, r1
 8000422:	b2a4      	uxth	r4, r4
 8000424:	fbb3 f0fe 	udiv	r0, r3, lr
 8000428:	fb0e 3310 	mls	r3, lr, r0, r3
 800042c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000430:	fb00 fc0c 	mul.w	ip, r0, ip
 8000434:	45a4      	cmp	ip, r4
 8000436:	d909      	bls.n	800044c <__udivmoddi4+0x8c>
 8000438:	192c      	adds	r4, r5, r4
 800043a:	f100 33ff 	add.w	r3, r0, #4294967295
 800043e:	f080 8107 	bcs.w	8000650 <__udivmoddi4+0x290>
 8000442:	45a4      	cmp	ip, r4
 8000444:	f240 8104 	bls.w	8000650 <__udivmoddi4+0x290>
 8000448:	3802      	subs	r0, #2
 800044a:	442c      	add	r4, r5
 800044c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000450:	eba4 040c 	sub.w	r4, r4, ip
 8000454:	2700      	movs	r7, #0
 8000456:	b11e      	cbz	r6, 8000460 <__udivmoddi4+0xa0>
 8000458:	40d4      	lsrs	r4, r2
 800045a:	2300      	movs	r3, #0
 800045c:	e9c6 4300 	strd	r4, r3, [r6]
 8000460:	4639      	mov	r1, r7
 8000462:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000466:	428b      	cmp	r3, r1
 8000468:	d909      	bls.n	800047e <__udivmoddi4+0xbe>
 800046a:	2e00      	cmp	r6, #0
 800046c:	f000 80eb 	beq.w	8000646 <__udivmoddi4+0x286>
 8000470:	2700      	movs	r7, #0
 8000472:	e9c6 0100 	strd	r0, r1, [r6]
 8000476:	4638      	mov	r0, r7
 8000478:	4639      	mov	r1, r7
 800047a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800047e:	fab3 f783 	clz	r7, r3
 8000482:	2f00      	cmp	r7, #0
 8000484:	d147      	bne.n	8000516 <__udivmoddi4+0x156>
 8000486:	428b      	cmp	r3, r1
 8000488:	d302      	bcc.n	8000490 <__udivmoddi4+0xd0>
 800048a:	4282      	cmp	r2, r0
 800048c:	f200 80fa 	bhi.w	8000684 <__udivmoddi4+0x2c4>
 8000490:	1a84      	subs	r4, r0, r2
 8000492:	eb61 0303 	sbc.w	r3, r1, r3
 8000496:	2001      	movs	r0, #1
 8000498:	4698      	mov	r8, r3
 800049a:	2e00      	cmp	r6, #0
 800049c:	d0e0      	beq.n	8000460 <__udivmoddi4+0xa0>
 800049e:	e9c6 4800 	strd	r4, r8, [r6]
 80004a2:	e7dd      	b.n	8000460 <__udivmoddi4+0xa0>
 80004a4:	b902      	cbnz	r2, 80004a8 <__udivmoddi4+0xe8>
 80004a6:	deff      	udf	#255	; 0xff
 80004a8:	fab2 f282 	clz	r2, r2
 80004ac:	2a00      	cmp	r2, #0
 80004ae:	f040 808f 	bne.w	80005d0 <__udivmoddi4+0x210>
 80004b2:	1b49      	subs	r1, r1, r5
 80004b4:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80004b8:	fa1f f885 	uxth.w	r8, r5
 80004bc:	2701      	movs	r7, #1
 80004be:	fbb1 fcfe 	udiv	ip, r1, lr
 80004c2:	0c23      	lsrs	r3, r4, #16
 80004c4:	fb0e 111c 	mls	r1, lr, ip, r1
 80004c8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004cc:	fb08 f10c 	mul.w	r1, r8, ip
 80004d0:	4299      	cmp	r1, r3
 80004d2:	d907      	bls.n	80004e4 <__udivmoddi4+0x124>
 80004d4:	18eb      	adds	r3, r5, r3
 80004d6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80004da:	d202      	bcs.n	80004e2 <__udivmoddi4+0x122>
 80004dc:	4299      	cmp	r1, r3
 80004de:	f200 80cd 	bhi.w	800067c <__udivmoddi4+0x2bc>
 80004e2:	4684      	mov	ip, r0
 80004e4:	1a59      	subs	r1, r3, r1
 80004e6:	b2a3      	uxth	r3, r4
 80004e8:	fbb1 f0fe 	udiv	r0, r1, lr
 80004ec:	fb0e 1410 	mls	r4, lr, r0, r1
 80004f0:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 80004f4:	fb08 f800 	mul.w	r8, r8, r0
 80004f8:	45a0      	cmp	r8, r4
 80004fa:	d907      	bls.n	800050c <__udivmoddi4+0x14c>
 80004fc:	192c      	adds	r4, r5, r4
 80004fe:	f100 33ff 	add.w	r3, r0, #4294967295
 8000502:	d202      	bcs.n	800050a <__udivmoddi4+0x14a>
 8000504:	45a0      	cmp	r8, r4
 8000506:	f200 80b6 	bhi.w	8000676 <__udivmoddi4+0x2b6>
 800050a:	4618      	mov	r0, r3
 800050c:	eba4 0408 	sub.w	r4, r4, r8
 8000510:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000514:	e79f      	b.n	8000456 <__udivmoddi4+0x96>
 8000516:	f1c7 0c20 	rsb	ip, r7, #32
 800051a:	40bb      	lsls	r3, r7
 800051c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000520:	ea4e 0e03 	orr.w	lr, lr, r3
 8000524:	fa01 f407 	lsl.w	r4, r1, r7
 8000528:	fa20 f50c 	lsr.w	r5, r0, ip
 800052c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000530:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000534:	4325      	orrs	r5, r4
 8000536:	fbb3 f9f8 	udiv	r9, r3, r8
 800053a:	0c2c      	lsrs	r4, r5, #16
 800053c:	fb08 3319 	mls	r3, r8, r9, r3
 8000540:	fa1f fa8e 	uxth.w	sl, lr
 8000544:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000548:	fb09 f40a 	mul.w	r4, r9, sl
 800054c:	429c      	cmp	r4, r3
 800054e:	fa02 f207 	lsl.w	r2, r2, r7
 8000552:	fa00 f107 	lsl.w	r1, r0, r7
 8000556:	d90b      	bls.n	8000570 <__udivmoddi4+0x1b0>
 8000558:	eb1e 0303 	adds.w	r3, lr, r3
 800055c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000560:	f080 8087 	bcs.w	8000672 <__udivmoddi4+0x2b2>
 8000564:	429c      	cmp	r4, r3
 8000566:	f240 8084 	bls.w	8000672 <__udivmoddi4+0x2b2>
 800056a:	f1a9 0902 	sub.w	r9, r9, #2
 800056e:	4473      	add	r3, lr
 8000570:	1b1b      	subs	r3, r3, r4
 8000572:	b2ad      	uxth	r5, r5
 8000574:	fbb3 f0f8 	udiv	r0, r3, r8
 8000578:	fb08 3310 	mls	r3, r8, r0, r3
 800057c:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000580:	fb00 fa0a 	mul.w	sl, r0, sl
 8000584:	45a2      	cmp	sl, r4
 8000586:	d908      	bls.n	800059a <__udivmoddi4+0x1da>
 8000588:	eb1e 0404 	adds.w	r4, lr, r4
 800058c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000590:	d26b      	bcs.n	800066a <__udivmoddi4+0x2aa>
 8000592:	45a2      	cmp	sl, r4
 8000594:	d969      	bls.n	800066a <__udivmoddi4+0x2aa>
 8000596:	3802      	subs	r0, #2
 8000598:	4474      	add	r4, lr
 800059a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800059e:	fba0 8902 	umull	r8, r9, r0, r2
 80005a2:	eba4 040a 	sub.w	r4, r4, sl
 80005a6:	454c      	cmp	r4, r9
 80005a8:	46c2      	mov	sl, r8
 80005aa:	464b      	mov	r3, r9
 80005ac:	d354      	bcc.n	8000658 <__udivmoddi4+0x298>
 80005ae:	d051      	beq.n	8000654 <__udivmoddi4+0x294>
 80005b0:	2e00      	cmp	r6, #0
 80005b2:	d069      	beq.n	8000688 <__udivmoddi4+0x2c8>
 80005b4:	ebb1 050a 	subs.w	r5, r1, sl
 80005b8:	eb64 0403 	sbc.w	r4, r4, r3
 80005bc:	fa04 fc0c 	lsl.w	ip, r4, ip
 80005c0:	40fd      	lsrs	r5, r7
 80005c2:	40fc      	lsrs	r4, r7
 80005c4:	ea4c 0505 	orr.w	r5, ip, r5
 80005c8:	e9c6 5400 	strd	r5, r4, [r6]
 80005cc:	2700      	movs	r7, #0
 80005ce:	e747      	b.n	8000460 <__udivmoddi4+0xa0>
 80005d0:	f1c2 0320 	rsb	r3, r2, #32
 80005d4:	fa20 f703 	lsr.w	r7, r0, r3
 80005d8:	4095      	lsls	r5, r2
 80005da:	fa01 f002 	lsl.w	r0, r1, r2
 80005de:	fa21 f303 	lsr.w	r3, r1, r3
 80005e2:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80005e6:	4338      	orrs	r0, r7
 80005e8:	0c01      	lsrs	r1, r0, #16
 80005ea:	fbb3 f7fe 	udiv	r7, r3, lr
 80005ee:	fa1f f885 	uxth.w	r8, r5
 80005f2:	fb0e 3317 	mls	r3, lr, r7, r3
 80005f6:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80005fa:	fb07 f308 	mul.w	r3, r7, r8
 80005fe:	428b      	cmp	r3, r1
 8000600:	fa04 f402 	lsl.w	r4, r4, r2
 8000604:	d907      	bls.n	8000616 <__udivmoddi4+0x256>
 8000606:	1869      	adds	r1, r5, r1
 8000608:	f107 3cff 	add.w	ip, r7, #4294967295
 800060c:	d22f      	bcs.n	800066e <__udivmoddi4+0x2ae>
 800060e:	428b      	cmp	r3, r1
 8000610:	d92d      	bls.n	800066e <__udivmoddi4+0x2ae>
 8000612:	3f02      	subs	r7, #2
 8000614:	4429      	add	r1, r5
 8000616:	1acb      	subs	r3, r1, r3
 8000618:	b281      	uxth	r1, r0
 800061a:	fbb3 f0fe 	udiv	r0, r3, lr
 800061e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000622:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000626:	fb00 f308 	mul.w	r3, r0, r8
 800062a:	428b      	cmp	r3, r1
 800062c:	d907      	bls.n	800063e <__udivmoddi4+0x27e>
 800062e:	1869      	adds	r1, r5, r1
 8000630:	f100 3cff 	add.w	ip, r0, #4294967295
 8000634:	d217      	bcs.n	8000666 <__udivmoddi4+0x2a6>
 8000636:	428b      	cmp	r3, r1
 8000638:	d915      	bls.n	8000666 <__udivmoddi4+0x2a6>
 800063a:	3802      	subs	r0, #2
 800063c:	4429      	add	r1, r5
 800063e:	1ac9      	subs	r1, r1, r3
 8000640:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000644:	e73b      	b.n	80004be <__udivmoddi4+0xfe>
 8000646:	4637      	mov	r7, r6
 8000648:	4630      	mov	r0, r6
 800064a:	e709      	b.n	8000460 <__udivmoddi4+0xa0>
 800064c:	4607      	mov	r7, r0
 800064e:	e6e7      	b.n	8000420 <__udivmoddi4+0x60>
 8000650:	4618      	mov	r0, r3
 8000652:	e6fb      	b.n	800044c <__udivmoddi4+0x8c>
 8000654:	4541      	cmp	r1, r8
 8000656:	d2ab      	bcs.n	80005b0 <__udivmoddi4+0x1f0>
 8000658:	ebb8 0a02 	subs.w	sl, r8, r2
 800065c:	eb69 020e 	sbc.w	r2, r9, lr
 8000660:	3801      	subs	r0, #1
 8000662:	4613      	mov	r3, r2
 8000664:	e7a4      	b.n	80005b0 <__udivmoddi4+0x1f0>
 8000666:	4660      	mov	r0, ip
 8000668:	e7e9      	b.n	800063e <__udivmoddi4+0x27e>
 800066a:	4618      	mov	r0, r3
 800066c:	e795      	b.n	800059a <__udivmoddi4+0x1da>
 800066e:	4667      	mov	r7, ip
 8000670:	e7d1      	b.n	8000616 <__udivmoddi4+0x256>
 8000672:	4681      	mov	r9, r0
 8000674:	e77c      	b.n	8000570 <__udivmoddi4+0x1b0>
 8000676:	3802      	subs	r0, #2
 8000678:	442c      	add	r4, r5
 800067a:	e747      	b.n	800050c <__udivmoddi4+0x14c>
 800067c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000680:	442b      	add	r3, r5
 8000682:	e72f      	b.n	80004e4 <__udivmoddi4+0x124>
 8000684:	4638      	mov	r0, r7
 8000686:	e708      	b.n	800049a <__udivmoddi4+0xda>
 8000688:	4637      	mov	r7, r6
 800068a:	e6e9      	b.n	8000460 <__udivmoddi4+0xa0>

0800068c <__aeabi_idiv0>:
 800068c:	4770      	bx	lr
 800068e:	bf00      	nop

08000690 <FDCAN_Config>:
#include <myprintf.h>

int FDCAN_Flag = 0;
int CAN_Flag = 0;

void FDCAN_Config(FDCAN_HandleTypeDef *hfdcan){
 8000690:	b580      	push	{r7, lr}
 8000692:	b08c      	sub	sp, #48	; 0x30
 8000694:	af02      	add	r7, sp, #8
 8000696:	6078      	str	r0, [r7, #4]
	FDCAN_FilterTypeDef sFilterConfig;

	  /* Configure Rx filter */
	  sFilterConfig.IdType = FDCAN_STANDARD_ID;
 8000698:	2300      	movs	r3, #0
 800069a:	60bb      	str	r3, [r7, #8]
	  sFilterConfig.FilterIndex = 0;
 800069c:	2300      	movs	r3, #0
 800069e:	60fb      	str	r3, [r7, #12]
	  sFilterConfig.FilterType = FDCAN_FILTER_MASK;
 80006a0:	2302      	movs	r3, #2
 80006a2:	613b      	str	r3, [r7, #16]
	  sFilterConfig.FilterConfig = FDCAN_FILTER_TO_RXFIFO0;
 80006a4:	2301      	movs	r3, #1
 80006a6:	617b      	str	r3, [r7, #20]
	  sFilterConfig.FilterID1 = 0x321;
 80006a8:	f240 3321 	movw	r3, #801	; 0x321
 80006ac:	61bb      	str	r3, [r7, #24]
	  sFilterConfig.FilterID2 = 0x7FF;
 80006ae:	f240 73ff 	movw	r3, #2047	; 0x7ff
 80006b2:	61fb      	str	r3, [r7, #28]
	  if (HAL_FDCAN_ConfigFilter(hfdcan, &sFilterConfig) == HAL_OK)
 80006b4:	f107 0308 	add.w	r3, r7, #8
 80006b8:	4619      	mov	r1, r3
 80006ba:	6878      	ldr	r0, [r7, #4]
 80006bc:	f006 fc04 	bl	8006ec8 <HAL_FDCAN_ConfigFilter>
	  }

	  /* Configure global filter:
	     Filter all remote frames with STD and EXT ID
	     Reject non matching frames with STD ID and EXT ID */
	  if (HAL_FDCAN_ConfigGlobalFilter(hfdcan, FDCAN_REJECT, FDCAN_REJECT, FDCAN_FILTER_REMOTE, FDCAN_FILTER_REMOTE) != HAL_OK)
 80006c0:	2300      	movs	r3, #0
 80006c2:	9300      	str	r3, [sp, #0]
 80006c4:	2300      	movs	r3, #0
 80006c6:	2202      	movs	r2, #2
 80006c8:	2102      	movs	r1, #2
 80006ca:	6878      	ldr	r0, [r7, #4]
 80006cc:	f006 fc72 	bl	8006fb4 <HAL_FDCAN_ConfigGlobalFilter>
 80006d0:	4603      	mov	r3, r0
 80006d2:	2b00      	cmp	r3, #0
 80006d4:	d001      	beq.n	80006da <FDCAN_Config+0x4a>
	  {
	    Error_Handler();
 80006d6:	f003 fb0b 	bl	8003cf0 <Error_Handler>
	  }
	if (HAL_FDCAN_Start(hfdcan) != HAL_OK)
 80006da:	6878      	ldr	r0, [r7, #4]
 80006dc:	f006 fcba 	bl	8007054 <HAL_FDCAN_Start>
 80006e0:	4603      	mov	r3, r0
 80006e2:	2b00      	cmp	r3, #0
 80006e4:	d001      	beq.n	80006ea <FDCAN_Config+0x5a>
	  {
	    Error_Handler();
 80006e6:	f003 fb03 	bl	8003cf0 <Error_Handler>
	  }
	if (HAL_FDCAN_ActivateNotification(hfdcan, FDCAN_IT_RX_FIFO0_NEW_MESSAGE, 0) != HAL_OK)
 80006ea:	2200      	movs	r2, #0
 80006ec:	2101      	movs	r1, #1
 80006ee:	6878      	ldr	r0, [r7, #4]
 80006f0:	f006 fe3a 	bl	8007368 <HAL_FDCAN_ActivateNotification>
 80006f4:	4603      	mov	r3, r0
 80006f6:	2b00      	cmp	r3, #0
 80006f8:	d001      	beq.n	80006fe <FDCAN_Config+0x6e>
	  {
	    /* Notification Error */
	    Error_Handler();
 80006fa:	f003 faf9 	bl	8003cf0 <Error_Handler>
	  }
	HAL_FDCAN_EnableTxDelayCompensation(hfdcan);
 80006fe:	6878      	ldr	r0, [r7, #4]
 8000700:	f006 fc85 	bl	800700e <HAL_FDCAN_EnableTxDelayCompensation>

}
 8000704:	bf00      	nop
 8000706:	3728      	adds	r7, #40	; 0x28
 8000708:	46bd      	mov	sp, r7
 800070a:	bd80      	pop	{r7, pc}

0800070c <HAL_FDCAN_RxFifo0Callback>:

void HAL_FDCAN_RxFifo0Callback(FDCAN_HandleTypeDef *hfdcan1, uint32_t RxFifo0ITs)
{
 800070c:	b580      	push	{r7, lr}
 800070e:	b084      	sub	sp, #16
 8000710:	af00      	add	r7, sp, #0
 8000712:	6078      	str	r0, [r7, #4]
 8000714:	6039      	str	r1, [r7, #0]
	if (HAL_FDCAN_GetRxMessage(hfdcan1, FDCAN_RX_FIFO0, &RxHeader, RxData) == HAL_OK)
 8000716:	4b91      	ldr	r3, [pc, #580]	; (800095c <HAL_FDCAN_RxFifo0Callback+0x250>)
 8000718:	4a91      	ldr	r2, [pc, #580]	; (8000960 <HAL_FDCAN_RxFifo0Callback+0x254>)
 800071a:	2140      	movs	r1, #64	; 0x40
 800071c:	6878      	ldr	r0, [r7, #4]
 800071e:	f006 fcc5 	bl	80070ac <HAL_FDCAN_GetRxMessage>
 8000722:	4603      	mov	r3, r0
 8000724:	2b00      	cmp	r3, #0
 8000726:	f040 8114 	bne.w	8000952 <HAL_FDCAN_RxFifo0Callback+0x246>
			      {
					uint32_t time = HAL_GetTick();
 800072a:	f003 ffc9 	bl	80046c0 <HAL_GetTick>
 800072e:	60f8      	str	r0, [r7, #12]
					HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 8000730:	2101      	movs	r1, #1
 8000732:	488c      	ldr	r0, [pc, #560]	; (8000964 <HAL_FDCAN_RxFifo0Callback+0x258>)
 8000734:	f007 fd03 	bl	800813e <HAL_GPIO_TogglePin>
					printf("Packet Acquired!\n");
 8000738:	488b      	ldr	r0, [pc, #556]	; (8000968 <HAL_FDCAN_RxFifo0Callback+0x25c>)
 800073a:	f019 f83d 	bl	80197b8 <puts>
					if(RxHeader.FDFormat == FDCAN_CLASSIC_CAN){
 800073e:	4b88      	ldr	r3, [pc, #544]	; (8000960 <HAL_FDCAN_RxFifo0Callback+0x254>)
 8000740:	699b      	ldr	r3, [r3, #24]
 8000742:	2b00      	cmp	r3, #0
 8000744:	d17f      	bne.n	8000846 <HAL_FDCAN_RxFifo0Callback+0x13a>
						CanFrame.id = RxHeader.Identifier;
 8000746:	4b86      	ldr	r3, [pc, #536]	; (8000960 <HAL_FDCAN_RxFifo0Callback+0x254>)
 8000748:	681b      	ldr	r3, [r3, #0]
 800074a:	4a88      	ldr	r2, [pc, #544]	; (800096c <HAL_FDCAN_RxFifo0Callback+0x260>)
 800074c:	6013      	str	r3, [r2, #0]
						switch(RxHeader.DataLength/65536){
 800074e:	4b84      	ldr	r3, [pc, #528]	; (8000960 <HAL_FDCAN_RxFifo0Callback+0x254>)
 8000750:	68db      	ldr	r3, [r3, #12]
 8000752:	0c1b      	lsrs	r3, r3, #16
 8000754:	3b01      	subs	r3, #1
 8000756:	2b0e      	cmp	r3, #14
 8000758:	d85c      	bhi.n	8000814 <HAL_FDCAN_RxFifo0Callback+0x108>
 800075a:	a201      	add	r2, pc, #4	; (adr r2, 8000760 <HAL_FDCAN_RxFifo0Callback+0x54>)
 800075c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000760:	0800079d 	.word	0x0800079d
 8000764:	080007a5 	.word	0x080007a5
 8000768:	080007ad 	.word	0x080007ad
 800076c:	080007b5 	.word	0x080007b5
 8000770:	080007bd 	.word	0x080007bd
 8000774:	080007c5 	.word	0x080007c5
 8000778:	080007cd 	.word	0x080007cd
 800077c:	080007d5 	.word	0x080007d5
 8000780:	080007dd 	.word	0x080007dd
 8000784:	080007e5 	.word	0x080007e5
 8000788:	080007ed 	.word	0x080007ed
 800078c:	080007f5 	.word	0x080007f5
 8000790:	080007fd 	.word	0x080007fd
 8000794:	08000805 	.word	0x08000805
 8000798:	0800080d 	.word	0x0800080d
							case 1:
								CanFrame.length = 1;
 800079c:	4b73      	ldr	r3, [pc, #460]	; (800096c <HAL_FDCAN_RxFifo0Callback+0x260>)
 800079e:	2201      	movs	r2, #1
 80007a0:	715a      	strb	r2, [r3, #5]
								break;
 80007a2:	e037      	b.n	8000814 <HAL_FDCAN_RxFifo0Callback+0x108>
							case 2:
								CanFrame.length = 2;
 80007a4:	4b71      	ldr	r3, [pc, #452]	; (800096c <HAL_FDCAN_RxFifo0Callback+0x260>)
 80007a6:	2202      	movs	r2, #2
 80007a8:	715a      	strb	r2, [r3, #5]
								break;
 80007aa:	e033      	b.n	8000814 <HAL_FDCAN_RxFifo0Callback+0x108>
							case 3:
								CanFrame.length = 3;
 80007ac:	4b6f      	ldr	r3, [pc, #444]	; (800096c <HAL_FDCAN_RxFifo0Callback+0x260>)
 80007ae:	2203      	movs	r2, #3
 80007b0:	715a      	strb	r2, [r3, #5]
								break;
 80007b2:	e02f      	b.n	8000814 <HAL_FDCAN_RxFifo0Callback+0x108>
							case 4:
								CanFrame.length = 4;
 80007b4:	4b6d      	ldr	r3, [pc, #436]	; (800096c <HAL_FDCAN_RxFifo0Callback+0x260>)
 80007b6:	2204      	movs	r2, #4
 80007b8:	715a      	strb	r2, [r3, #5]
								break;
 80007ba:	e02b      	b.n	8000814 <HAL_FDCAN_RxFifo0Callback+0x108>
							case 5:
								CanFrame.length = 5;
 80007bc:	4b6b      	ldr	r3, [pc, #428]	; (800096c <HAL_FDCAN_RxFifo0Callback+0x260>)
 80007be:	2205      	movs	r2, #5
 80007c0:	715a      	strb	r2, [r3, #5]
								break;
 80007c2:	e027      	b.n	8000814 <HAL_FDCAN_RxFifo0Callback+0x108>
							case 6:
								CanFrame.length = 6;
 80007c4:	4b69      	ldr	r3, [pc, #420]	; (800096c <HAL_FDCAN_RxFifo0Callback+0x260>)
 80007c6:	2206      	movs	r2, #6
 80007c8:	715a      	strb	r2, [r3, #5]
								break;
 80007ca:	e023      	b.n	8000814 <HAL_FDCAN_RxFifo0Callback+0x108>
							case 7:
								CanFrame.length = 7;
 80007cc:	4b67      	ldr	r3, [pc, #412]	; (800096c <HAL_FDCAN_RxFifo0Callback+0x260>)
 80007ce:	2207      	movs	r2, #7
 80007d0:	715a      	strb	r2, [r3, #5]
								break;
 80007d2:	e01f      	b.n	8000814 <HAL_FDCAN_RxFifo0Callback+0x108>
							case 8:
								CanFrame.length = 8;
 80007d4:	4b65      	ldr	r3, [pc, #404]	; (800096c <HAL_FDCAN_RxFifo0Callback+0x260>)
 80007d6:	2208      	movs	r2, #8
 80007d8:	715a      	strb	r2, [r3, #5]
								break;
 80007da:	e01b      	b.n	8000814 <HAL_FDCAN_RxFifo0Callback+0x108>
							case 9:
								CanFrame.length = 12;
 80007dc:	4b63      	ldr	r3, [pc, #396]	; (800096c <HAL_FDCAN_RxFifo0Callback+0x260>)
 80007de:	220c      	movs	r2, #12
 80007e0:	715a      	strb	r2, [r3, #5]
								break;
 80007e2:	e017      	b.n	8000814 <HAL_FDCAN_RxFifo0Callback+0x108>
							case 10:
								CanFrame.length = 16;
 80007e4:	4b61      	ldr	r3, [pc, #388]	; (800096c <HAL_FDCAN_RxFifo0Callback+0x260>)
 80007e6:	2210      	movs	r2, #16
 80007e8:	715a      	strb	r2, [r3, #5]
								break;
 80007ea:	e013      	b.n	8000814 <HAL_FDCAN_RxFifo0Callback+0x108>
							case 11:
								CanFrame.length = 20;
 80007ec:	4b5f      	ldr	r3, [pc, #380]	; (800096c <HAL_FDCAN_RxFifo0Callback+0x260>)
 80007ee:	2214      	movs	r2, #20
 80007f0:	715a      	strb	r2, [r3, #5]
								break;
 80007f2:	e00f      	b.n	8000814 <HAL_FDCAN_RxFifo0Callback+0x108>
							case 12:
								CanFrame.length = 24;
 80007f4:	4b5d      	ldr	r3, [pc, #372]	; (800096c <HAL_FDCAN_RxFifo0Callback+0x260>)
 80007f6:	2218      	movs	r2, #24
 80007f8:	715a      	strb	r2, [r3, #5]
								break;
 80007fa:	e00b      	b.n	8000814 <HAL_FDCAN_RxFifo0Callback+0x108>
							case 13:
								CanFrame.length = 32;
 80007fc:	4b5b      	ldr	r3, [pc, #364]	; (800096c <HAL_FDCAN_RxFifo0Callback+0x260>)
 80007fe:	2220      	movs	r2, #32
 8000800:	715a      	strb	r2, [r3, #5]
								break;
 8000802:	e007      	b.n	8000814 <HAL_FDCAN_RxFifo0Callback+0x108>
							case 14:
								CanFrame.length = 48;
 8000804:	4b59      	ldr	r3, [pc, #356]	; (800096c <HAL_FDCAN_RxFifo0Callback+0x260>)
 8000806:	2230      	movs	r2, #48	; 0x30
 8000808:	715a      	strb	r2, [r3, #5]
								break;
 800080a:	e003      	b.n	8000814 <HAL_FDCAN_RxFifo0Callback+0x108>
							case 15:
								CanFrame.length = 64;
 800080c:	4b57      	ldr	r3, [pc, #348]	; (800096c <HAL_FDCAN_RxFifo0Callback+0x260>)
 800080e:	2240      	movs	r2, #64	; 0x40
 8000810:	715a      	strb	r2, [r3, #5]
								break;
 8000812:	bf00      	nop
						}
						CanFrame.time = time;
 8000814:	4a55      	ldr	r2, [pc, #340]	; (800096c <HAL_FDCAN_RxFifo0Callback+0x260>)
 8000816:	68fb      	ldr	r3, [r7, #12]
 8000818:	6093      	str	r3, [r2, #8]
						CAN_Flag = 1;
 800081a:	4b55      	ldr	r3, [pc, #340]	; (8000970 <HAL_FDCAN_RxFifo0Callback+0x264>)
 800081c:	2201      	movs	r2, #1
 800081e:	601a      	str	r2, [r3, #0]
						memcpy(CanFrame.data.bytes, RxData, CanFrame.length);
 8000820:	4b52      	ldr	r3, [pc, #328]	; (800096c <HAL_FDCAN_RxFifo0Callback+0x260>)
 8000822:	795b      	ldrb	r3, [r3, #5]
 8000824:	461a      	mov	r2, r3
 8000826:	494d      	ldr	r1, [pc, #308]	; (800095c <HAL_FDCAN_RxFifo0Callback+0x250>)
 8000828:	4852      	ldr	r0, [pc, #328]	; (8000974 <HAL_FDCAN_RxFifo0Callback+0x268>)
 800082a:	f018 fe95 	bl	8019558 <memcpy>
						if(RxHeader.IdType == FDCAN_EXTENDED_ID){
 800082e:	4b4c      	ldr	r3, [pc, #304]	; (8000960 <HAL_FDCAN_RxFifo0Callback+0x254>)
 8000830:	685b      	ldr	r3, [r3, #4]
 8000832:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000836:	d103      	bne.n	8000840 <HAL_FDCAN_RxFifo0Callback+0x134>
							CanFrame.extended = 1;
 8000838:	4b4c      	ldr	r3, [pc, #304]	; (800096c <HAL_FDCAN_RxFifo0Callback+0x260>)
 800083a:	2201      	movs	r2, #1
 800083c:	711a      	strb	r2, [r3, #4]
 800083e:	e002      	b.n	8000846 <HAL_FDCAN_RxFifo0Callback+0x13a>
						}
						else{
							CanFrame.extended = 0;
 8000840:	4b4a      	ldr	r3, [pc, #296]	; (800096c <HAL_FDCAN_RxFifo0Callback+0x260>)
 8000842:	2200      	movs	r2, #0
 8000844:	711a      	strb	r2, [r3, #4]
						}
					}
					if(RxHeader.FDFormat == FDCAN_FD_CAN){
 8000846:	4b46      	ldr	r3, [pc, #280]	; (8000960 <HAL_FDCAN_RxFifo0Callback+0x254>)
 8000848:	699b      	ldr	r3, [r3, #24]
 800084a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800084e:	f040 8080 	bne.w	8000952 <HAL_FDCAN_RxFifo0Callback+0x246>
						CanFDFrame.id = RxHeader.Identifier;
 8000852:	4b43      	ldr	r3, [pc, #268]	; (8000960 <HAL_FDCAN_RxFifo0Callback+0x254>)
 8000854:	681b      	ldr	r3, [r3, #0]
 8000856:	4a48      	ldr	r2, [pc, #288]	; (8000978 <HAL_FDCAN_RxFifo0Callback+0x26c>)
 8000858:	6013      	str	r3, [r2, #0]

						switch(RxHeader.DataLength/65536){
 800085a:	4b41      	ldr	r3, [pc, #260]	; (8000960 <HAL_FDCAN_RxFifo0Callback+0x254>)
 800085c:	68db      	ldr	r3, [r3, #12]
 800085e:	0c1b      	lsrs	r3, r3, #16
 8000860:	3b01      	subs	r3, #1
 8000862:	2b0e      	cmp	r3, #14
 8000864:	d85c      	bhi.n	8000920 <HAL_FDCAN_RxFifo0Callback+0x214>
 8000866:	a201      	add	r2, pc, #4	; (adr r2, 800086c <HAL_FDCAN_RxFifo0Callback+0x160>)
 8000868:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800086c:	080008a9 	.word	0x080008a9
 8000870:	080008b1 	.word	0x080008b1
 8000874:	080008b9 	.word	0x080008b9
 8000878:	080008c1 	.word	0x080008c1
 800087c:	080008c9 	.word	0x080008c9
 8000880:	080008d1 	.word	0x080008d1
 8000884:	080008d9 	.word	0x080008d9
 8000888:	080008e1 	.word	0x080008e1
 800088c:	080008e9 	.word	0x080008e9
 8000890:	080008f1 	.word	0x080008f1
 8000894:	080008f9 	.word	0x080008f9
 8000898:	08000901 	.word	0x08000901
 800089c:	08000909 	.word	0x08000909
 80008a0:	08000911 	.word	0x08000911
 80008a4:	08000919 	.word	0x08000919
							case 1:
								CanFDFrame.length = 1;
 80008a8:	4b33      	ldr	r3, [pc, #204]	; (8000978 <HAL_FDCAN_RxFifo0Callback+0x26c>)
 80008aa:	2201      	movs	r2, #1
 80008ac:	609a      	str	r2, [r3, #8]
								break;
 80008ae:	e037      	b.n	8000920 <HAL_FDCAN_RxFifo0Callback+0x214>
							case 2:
								CanFDFrame.length = 2;
 80008b0:	4b31      	ldr	r3, [pc, #196]	; (8000978 <HAL_FDCAN_RxFifo0Callback+0x26c>)
 80008b2:	2202      	movs	r2, #2
 80008b4:	609a      	str	r2, [r3, #8]
								break;
 80008b6:	e033      	b.n	8000920 <HAL_FDCAN_RxFifo0Callback+0x214>
							case 3:
								CanFDFrame.length = 3;
 80008b8:	4b2f      	ldr	r3, [pc, #188]	; (8000978 <HAL_FDCAN_RxFifo0Callback+0x26c>)
 80008ba:	2203      	movs	r2, #3
 80008bc:	609a      	str	r2, [r3, #8]
								break;
 80008be:	e02f      	b.n	8000920 <HAL_FDCAN_RxFifo0Callback+0x214>
							case 4:
								CanFDFrame.length = 4;
 80008c0:	4b2d      	ldr	r3, [pc, #180]	; (8000978 <HAL_FDCAN_RxFifo0Callback+0x26c>)
 80008c2:	2204      	movs	r2, #4
 80008c4:	609a      	str	r2, [r3, #8]
								break;
 80008c6:	e02b      	b.n	8000920 <HAL_FDCAN_RxFifo0Callback+0x214>
							case 5:
								CanFDFrame.length = 5;
 80008c8:	4b2b      	ldr	r3, [pc, #172]	; (8000978 <HAL_FDCAN_RxFifo0Callback+0x26c>)
 80008ca:	2205      	movs	r2, #5
 80008cc:	609a      	str	r2, [r3, #8]
								break;
 80008ce:	e027      	b.n	8000920 <HAL_FDCAN_RxFifo0Callback+0x214>
							case 6:
								CanFDFrame.length = 6;
 80008d0:	4b29      	ldr	r3, [pc, #164]	; (8000978 <HAL_FDCAN_RxFifo0Callback+0x26c>)
 80008d2:	2206      	movs	r2, #6
 80008d4:	609a      	str	r2, [r3, #8]
								break;
 80008d6:	e023      	b.n	8000920 <HAL_FDCAN_RxFifo0Callback+0x214>
							case 7:
								CanFDFrame.length = 7;
 80008d8:	4b27      	ldr	r3, [pc, #156]	; (8000978 <HAL_FDCAN_RxFifo0Callback+0x26c>)
 80008da:	2207      	movs	r2, #7
 80008dc:	609a      	str	r2, [r3, #8]
								break;
 80008de:	e01f      	b.n	8000920 <HAL_FDCAN_RxFifo0Callback+0x214>
							case 8:
								CanFDFrame.length = 8;
 80008e0:	4b25      	ldr	r3, [pc, #148]	; (8000978 <HAL_FDCAN_RxFifo0Callback+0x26c>)
 80008e2:	2208      	movs	r2, #8
 80008e4:	609a      	str	r2, [r3, #8]
								break;
 80008e6:	e01b      	b.n	8000920 <HAL_FDCAN_RxFifo0Callback+0x214>
							case 9:
								CanFDFrame.length = 12;
 80008e8:	4b23      	ldr	r3, [pc, #140]	; (8000978 <HAL_FDCAN_RxFifo0Callback+0x26c>)
 80008ea:	220c      	movs	r2, #12
 80008ec:	609a      	str	r2, [r3, #8]
								break;
 80008ee:	e017      	b.n	8000920 <HAL_FDCAN_RxFifo0Callback+0x214>
							case 10:
								CanFDFrame.length = 16;
 80008f0:	4b21      	ldr	r3, [pc, #132]	; (8000978 <HAL_FDCAN_RxFifo0Callback+0x26c>)
 80008f2:	2210      	movs	r2, #16
 80008f4:	609a      	str	r2, [r3, #8]
								break;
 80008f6:	e013      	b.n	8000920 <HAL_FDCAN_RxFifo0Callback+0x214>
							case 11:
								CanFDFrame.length = 20;
 80008f8:	4b1f      	ldr	r3, [pc, #124]	; (8000978 <HAL_FDCAN_RxFifo0Callback+0x26c>)
 80008fa:	2214      	movs	r2, #20
 80008fc:	609a      	str	r2, [r3, #8]
								break;
 80008fe:	e00f      	b.n	8000920 <HAL_FDCAN_RxFifo0Callback+0x214>
							case 12:
								CanFDFrame.length = 24;
 8000900:	4b1d      	ldr	r3, [pc, #116]	; (8000978 <HAL_FDCAN_RxFifo0Callback+0x26c>)
 8000902:	2218      	movs	r2, #24
 8000904:	609a      	str	r2, [r3, #8]
								break;
 8000906:	e00b      	b.n	8000920 <HAL_FDCAN_RxFifo0Callback+0x214>
							case 13:
								CanFDFrame.length = 32;
 8000908:	4b1b      	ldr	r3, [pc, #108]	; (8000978 <HAL_FDCAN_RxFifo0Callback+0x26c>)
 800090a:	2220      	movs	r2, #32
 800090c:	609a      	str	r2, [r3, #8]
								break;
 800090e:	e007      	b.n	8000920 <HAL_FDCAN_RxFifo0Callback+0x214>
							case 14:
								CanFDFrame.length = 48;
 8000910:	4b19      	ldr	r3, [pc, #100]	; (8000978 <HAL_FDCAN_RxFifo0Callback+0x26c>)
 8000912:	2230      	movs	r2, #48	; 0x30
 8000914:	609a      	str	r2, [r3, #8]
								break;
 8000916:	e003      	b.n	8000920 <HAL_FDCAN_RxFifo0Callback+0x214>
							case 15:
								CanFDFrame.length = 64;
 8000918:	4b17      	ldr	r3, [pc, #92]	; (8000978 <HAL_FDCAN_RxFifo0Callback+0x26c>)
 800091a:	2240      	movs	r2, #64	; 0x40
 800091c:	609a      	str	r2, [r3, #8]
								break;
 800091e:	bf00      	nop
						}

						CanFDFrame.time = time;
 8000920:	4a15      	ldr	r2, [pc, #84]	; (8000978 <HAL_FDCAN_RxFifo0Callback+0x26c>)
 8000922:	68fb      	ldr	r3, [r7, #12]
 8000924:	60d3      	str	r3, [r2, #12]
						FDCAN_Flag = 1;
 8000926:	4b15      	ldr	r3, [pc, #84]	; (800097c <HAL_FDCAN_RxFifo0Callback+0x270>)
 8000928:	2201      	movs	r2, #1
 800092a:	601a      	str	r2, [r3, #0]
						memcpy(CanFDFrame.data.bytes, RxData, CanFDFrame.length);
 800092c:	4b12      	ldr	r3, [pc, #72]	; (8000978 <HAL_FDCAN_RxFifo0Callback+0x26c>)
 800092e:	689b      	ldr	r3, [r3, #8]
 8000930:	461a      	mov	r2, r3
 8000932:	490a      	ldr	r1, [pc, #40]	; (800095c <HAL_FDCAN_RxFifo0Callback+0x250>)
 8000934:	4812      	ldr	r0, [pc, #72]	; (8000980 <HAL_FDCAN_RxFifo0Callback+0x274>)
 8000936:	f018 fe0f 	bl	8019558 <memcpy>
						if(RxHeader.IdType == FDCAN_EXTENDED_ID){
 800093a:	4b09      	ldr	r3, [pc, #36]	; (8000960 <HAL_FDCAN_RxFifo0Callback+0x254>)
 800093c:	685b      	ldr	r3, [r3, #4]
 800093e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000942:	d103      	bne.n	800094c <HAL_FDCAN_RxFifo0Callback+0x240>
							CanFDFrame.extended = 1;
 8000944:	4b0c      	ldr	r3, [pc, #48]	; (8000978 <HAL_FDCAN_RxFifo0Callback+0x26c>)
 8000946:	2201      	movs	r2, #1
 8000948:	711a      	strb	r2, [r3, #4]
				  			  printf("%c",RxData[i]);
				  	  }
				  	  printf("\n");
				  	*/
			      }
}
 800094a:	e002      	b.n	8000952 <HAL_FDCAN_RxFifo0Callback+0x246>
							CanFDFrame.extended = 0;
 800094c:	4b0a      	ldr	r3, [pc, #40]	; (8000978 <HAL_FDCAN_RxFifo0Callback+0x26c>)
 800094e:	2200      	movs	r2, #0
 8000950:	711a      	strb	r2, [r3, #4]
}
 8000952:	bf00      	nop
 8000954:	3710      	adds	r7, #16
 8000956:	46bd      	mov	sp, r7
 8000958:	bd80      	pop	{r7, pc}
 800095a:	bf00      	nop
 800095c:	24001000 	.word	0x24001000
 8000960:	24001090 	.word	0x24001090
 8000964:	58020400 	.word	0x58020400
 8000968:	0801a814 	.word	0x0801a814
 800096c:	240010b8 	.word	0x240010b8
 8000970:	24000200 	.word	0x24000200
 8000974:	240010c8 	.word	0x240010c8
 8000978:	24001040 	.word	0x24001040
 800097c:	240001fc 	.word	0x240001fc
 8000980:	24001050 	.word	0x24001050

08000984 <gps_msg_config>:
#include "main.h"
#include <myprintf.h>
#include <stdbool.h>
#include <buffer.h>

int gps_msg_config(UART_HandleTypeDef *huart, const char *nema, int rus1){
 8000984:	b580      	push	{r7, lr}
 8000986:	b09e      	sub	sp, #120	; 0x78
 8000988:	af02      	add	r7, sp, #8
 800098a:	60f8      	str	r0, [r7, #12]
 800098c:	60b9      	str	r1, [r7, #8]
 800098e:	607a      	str	r2, [r7, #4]
	if (strlen(nema) != 3) return 1;
 8000990:	68b8      	ldr	r0, [r7, #8]
 8000992:	f7ff fca5 	bl	80002e0 <strlen>
 8000996:	4603      	mov	r3, r0
 8000998:	2b03      	cmp	r3, #3
 800099a:	d001      	beq.n	80009a0 <gps_msg_config+0x1c>
 800099c:	2301      	movs	r3, #1
 800099e:	e052      	b.n	8000a46 <gps_msg_config+0xc2>


	char msg[32];
	snprintf(msg, sizeof(msg)-1,"PUBX,40,%s,0,%i,0,0,0,0", nema, rus1);
 80009a0:	f107 0048 	add.w	r0, r7, #72	; 0x48
 80009a4:	687b      	ldr	r3, [r7, #4]
 80009a6:	9300      	str	r3, [sp, #0]
 80009a8:	68bb      	ldr	r3, [r7, #8]
 80009aa:	4a29      	ldr	r2, [pc, #164]	; (8000a50 <gps_msg_config+0xcc>)
 80009ac:	211f      	movs	r1, #31
 80009ae:	f018 ff1b 	bl	80197e8 <sniprintf>

	int checksum_int = 0;
 80009b2:	2300      	movs	r3, #0
 80009b4:	66fb      	str	r3, [r7, #108]	; 0x6c
	for (int i = 0; msg[i] && i < 32; i++)
 80009b6:	2300      	movs	r3, #0
 80009b8:	66bb      	str	r3, [r7, #104]	; 0x68
 80009ba:	e00b      	b.n	80009d4 <gps_msg_config+0x50>
		checksum_int ^= (unsigned char)msg[i];
 80009bc:	f107 0248 	add.w	r2, r7, #72	; 0x48
 80009c0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80009c2:	4413      	add	r3, r2
 80009c4:	781b      	ldrb	r3, [r3, #0]
 80009c6:	461a      	mov	r2, r3
 80009c8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80009ca:	4053      	eors	r3, r2
 80009cc:	66fb      	str	r3, [r7, #108]	; 0x6c
	for (int i = 0; msg[i] && i < 32; i++)
 80009ce:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80009d0:	3301      	adds	r3, #1
 80009d2:	66bb      	str	r3, [r7, #104]	; 0x68
 80009d4:	f107 0248 	add.w	r2, r7, #72	; 0x48
 80009d8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80009da:	4413      	add	r3, r2
 80009dc:	781b      	ldrb	r3, [r3, #0]
 80009de:	2b00      	cmp	r3, #0
 80009e0:	d002      	beq.n	80009e8 <gps_msg_config+0x64>
 80009e2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80009e4:	2b1f      	cmp	r3, #31
 80009e6:	dde9      	ble.n	80009bc <gps_msg_config+0x38>

	char checksum[8];
	snprintf(checksum, sizeof(checksum)-1, "*%.2X", checksum_int);
 80009e8:	f107 0040 	add.w	r0, r7, #64	; 0x40
 80009ec:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80009ee:	4a19      	ldr	r2, [pc, #100]	; (8000a54 <gps_msg_config+0xd0>)
 80009f0:	2107      	movs	r1, #7
 80009f2:	f018 fef9 	bl	80197e8 <sniprintf>

	char messagetosend[42];
	snprintf(messagetosend, sizeof(messagetosend)-1, "$%s%s\r\n", msg, checksum);
 80009f6:	f107 0248 	add.w	r2, r7, #72	; 0x48
 80009fa:	f107 0014 	add.w	r0, r7, #20
 80009fe:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000a02:	9300      	str	r3, [sp, #0]
 8000a04:	4613      	mov	r3, r2
 8000a06:	4a14      	ldr	r2, [pc, #80]	; (8000a58 <gps_msg_config+0xd4>)
 8000a08:	2129      	movs	r1, #41	; 0x29
 8000a0a:	f018 feed 	bl	80197e8 <sniprintf>
	printf("\n\rSending: ");
 8000a0e:	4813      	ldr	r0, [pc, #76]	; (8000a5c <gps_msg_config+0xd8>)
 8000a10:	f018 fe5e 	bl	80196d0 <iprintf>
	printf("%s", messagetosend);
 8000a14:	f107 0314 	add.w	r3, r7, #20
 8000a18:	4619      	mov	r1, r3
 8000a1a:	4811      	ldr	r0, [pc, #68]	; (8000a60 <gps_msg_config+0xdc>)
 8000a1c:	f018 fe58 	bl	80196d0 <iprintf>
	if (HAL_UART_Transmit(huart, messagetosend, strlen(messagetosend), 100) != HAL_OK){
 8000a20:	f107 0314 	add.w	r3, r7, #20
 8000a24:	4618      	mov	r0, r3
 8000a26:	f7ff fc5b 	bl	80002e0 <strlen>
 8000a2a:	4603      	mov	r3, r0
 8000a2c:	b29a      	uxth	r2, r3
 8000a2e:	f107 0114 	add.w	r1, r7, #20
 8000a32:	2364      	movs	r3, #100	; 0x64
 8000a34:	68f8      	ldr	r0, [r7, #12]
 8000a36:	f00f f92a 	bl	800fc8e <HAL_UART_Transmit>
 8000a3a:	4603      	mov	r3, r0
 8000a3c:	2b00      	cmp	r3, #0
 8000a3e:	d001      	beq.n	8000a44 <gps_msg_config+0xc0>
		Error_Handler();
 8000a40:	f003 f956 	bl	8003cf0 <Error_Handler>
	}
	return 0;
 8000a44:	2300      	movs	r3, #0
}
 8000a46:	4618      	mov	r0, r3
 8000a48:	3770      	adds	r7, #112	; 0x70
 8000a4a:	46bd      	mov	sp, r7
 8000a4c:	bd80      	pop	{r7, pc}
 8000a4e:	bf00      	nop
 8000a50:	0801a828 	.word	0x0801a828
 8000a54:	0801a840 	.word	0x0801a840
 8000a58:	0801a848 	.word	0x0801a848
 8000a5c:	0801a850 	.word	0x0801a850
 8000a60:	0801a85c 	.word	0x0801a85c

08000a64 <gps_rate_config>:

int gps_rate_config(UART_HandleTypeDef *huart, uint16_t measRate, uint16_t navRate, uint16_t timeRef){
 8000a64:	b580      	push	{r7, lr}
 8000a66:	b08a      	sub	sp, #40	; 0x28
 8000a68:	af00      	add	r7, sp, #0
 8000a6a:	60f8      	str	r0, [r7, #12]
 8000a6c:	4608      	mov	r0, r1
 8000a6e:	4611      	mov	r1, r2
 8000a70:	461a      	mov	r2, r3
 8000a72:	4603      	mov	r3, r0
 8000a74:	817b      	strh	r3, [r7, #10]
 8000a76:	460b      	mov	r3, r1
 8000a78:	813b      	strh	r3, [r7, #8]
 8000a7a:	4613      	mov	r3, r2
 8000a7c:	80fb      	strh	r3, [r7, #6]
		uint16_t length = 6;
 8000a7e:	2306      	movs	r3, #6
 8000a80:	83fb      	strh	r3, [r7, #30]
		uint8_t msg[14];
		msg[0] = 0xb5;
 8000a82:	23b5      	movs	r3, #181	; 0xb5
 8000a84:	743b      	strb	r3, [r7, #16]
		msg[1] = 0x62;
 8000a86:	2362      	movs	r3, #98	; 0x62
 8000a88:	747b      	strb	r3, [r7, #17]
		msg[2] = 0x06;
 8000a8a:	2306      	movs	r3, #6
 8000a8c:	74bb      	strb	r3, [r7, #18]
		msg[3] = 0x08;
 8000a8e:	2308      	movs	r3, #8
 8000a90:	74fb      	strb	r3, [r7, #19]
		msg[4] = length;
 8000a92:	8bfb      	ldrh	r3, [r7, #30]
 8000a94:	b2db      	uxtb	r3, r3
 8000a96:	753b      	strb	r3, [r7, #20]
		msg[5] = 0;
 8000a98:	2300      	movs	r3, #0
 8000a9a:	757b      	strb	r3, [r7, #21]
		msg[6] = measRate;
 8000a9c:	897b      	ldrh	r3, [r7, #10]
 8000a9e:	b2db      	uxtb	r3, r3
 8000aa0:	75bb      	strb	r3, [r7, #22]
		msg[7] = 0;
 8000aa2:	2300      	movs	r3, #0
 8000aa4:	75fb      	strb	r3, [r7, #23]
		msg[8] = navRate;
 8000aa6:	893b      	ldrh	r3, [r7, #8]
 8000aa8:	b2db      	uxtb	r3, r3
 8000aaa:	763b      	strb	r3, [r7, #24]
		msg[9] = 0;
 8000aac:	2300      	movs	r3, #0
 8000aae:	767b      	strb	r3, [r7, #25]
		msg[10] = timeRef;
 8000ab0:	88fb      	ldrh	r3, [r7, #6]
 8000ab2:	b2db      	uxtb	r3, r3
 8000ab4:	76bb      	strb	r3, [r7, #26]
		msg[11] = 0;
 8000ab6:	2300      	movs	r3, #0
 8000ab8:	76fb      	strb	r3, [r7, #27]

		uint8_t CK_A = 0;
 8000aba:	2300      	movs	r3, #0
 8000abc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		uint8_t CK_B = 0;
 8000ac0:	2300      	movs	r3, #0
 8000ac2:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
		for(int i=2; i<12; i++){
 8000ac6:	2302      	movs	r3, #2
 8000ac8:	623b      	str	r3, [r7, #32]
 8000aca:	e013      	b.n	8000af4 <gps_rate_config+0x90>
	        CK_A = CK_A + msg[i];
 8000acc:	f107 0210 	add.w	r2, r7, #16
 8000ad0:	6a3b      	ldr	r3, [r7, #32]
 8000ad2:	4413      	add	r3, r2
 8000ad4:	781a      	ldrb	r2, [r3, #0]
 8000ad6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8000ada:	4413      	add	r3, r2
 8000adc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	        CK_A &= 0xFF;
	        CK_B = CK_B + CK_A;
 8000ae0:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8000ae4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8000ae8:	4413      	add	r3, r2
 8000aea:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
		for(int i=2; i<12; i++){
 8000aee:	6a3b      	ldr	r3, [r7, #32]
 8000af0:	3301      	adds	r3, #1
 8000af2:	623b      	str	r3, [r7, #32]
 8000af4:	6a3b      	ldr	r3, [r7, #32]
 8000af6:	2b0b      	cmp	r3, #11
 8000af8:	dde8      	ble.n	8000acc <gps_rate_config+0x68>
	        CK_B &= 0xFF;
	    }
		msg[12] = CK_A;
 8000afa:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8000afe:	773b      	strb	r3, [r7, #28]
		msg[13] = CK_B;
 8000b00:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8000b04:	777b      	strb	r3, [r7, #29]

		if (HAL_UART_Transmit(huart, msg, sizeof(msg), 100) != HAL_OK){
 8000b06:	f107 0110 	add.w	r1, r7, #16
 8000b0a:	2364      	movs	r3, #100	; 0x64
 8000b0c:	220e      	movs	r2, #14
 8000b0e:	68f8      	ldr	r0, [r7, #12]
 8000b10:	f00f f8bd 	bl	800fc8e <HAL_UART_Transmit>
 8000b14:	4603      	mov	r3, r0
 8000b16:	2b00      	cmp	r3, #0
 8000b18:	d003      	beq.n	8000b22 <gps_rate_config+0xbe>
				Error_Handler();
 8000b1a:	f003 f8e9 	bl	8003cf0 <Error_Handler>
				return 1;
 8000b1e:	2301      	movs	r3, #1
 8000b20:	e000      	b.n	8000b24 <gps_rate_config+0xc0>
			}
		return 0;
 8000b22:	2300      	movs	r3, #0
}
 8000b24:	4618      	mov	r0, r3
 8000b26:	3728      	adds	r7, #40	; 0x28
 8000b28:	46bd      	mov	sp, r7
 8000b2a:	bd80      	pop	{r7, pc}

08000b2c <HAL_UART_RxHalfCpltCallback>:
}

int GPS_flag = 0;

void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8000b2c:	b580      	push	{r7, lr}
 8000b2e:	b082      	sub	sp, #8
 8000b30:	af00      	add	r7, sp, #0
 8000b32:	6078      	str	r0, [r7, #4]
	  }
  }*/
  //for(int i=0; i<BUFFLENGTH; i++){
  	  		  //printf("%c", rxBuf[i]);
  	  //}
  printf("#\n\r");
 8000b34:	4804      	ldr	r0, [pc, #16]	; (8000b48 <HAL_UART_RxHalfCpltCallback+0x1c>)
 8000b36:	f018 fdcb 	bl	80196d0 <iprintf>
  GPS_flag = 1;
 8000b3a:	4b04      	ldr	r3, [pc, #16]	; (8000b4c <HAL_UART_RxHalfCpltCallback+0x20>)
 8000b3c:	2201      	movs	r2, #1
 8000b3e:	601a      	str	r2, [r3, #0]
  //WriteToBuff(rxBuf+70, BUFFLENGTH/2);
  //HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);*/
  //printf("GPS Recieved\n");

}
 8000b40:	bf00      	nop
 8000b42:	3708      	adds	r7, #8
 8000b44:	46bd      	mov	sp, r7
 8000b46:	bd80      	pop	{r7, pc}
 8000b48:	0801a868 	.word	0x0801a868
 8000b4c:	24000204 	.word	0x24000204

08000b50 <HAL_UART_RxCpltCallback>:
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 8000b50:	b580      	push	{r7, lr}
 8000b52:	b082      	sub	sp, #8
 8000b54:	af00      	add	r7, sp, #0
 8000b56:	6078      	str	r0, [r7, #4]
	printf("##################\n\r");
 8000b58:	4803      	ldr	r0, [pc, #12]	; (8000b68 <HAL_UART_RxCpltCallback+0x18>)
 8000b5a:	f018 fdb9 	bl	80196d0 <iprintf>
}
 8000b5e:	bf00      	nop
 8000b60:	3708      	adds	r7, #8
 8000b62:	46bd      	mov	sp, r7
 8000b64:	bd80      	pop	{r7, pc}
 8000b66:	bf00      	nop
 8000b68:	0801a86c 	.word	0x0801a86c

08000b6c <NRF24_DelayMicroSeconds>:
static UART_HandleTypeDef nrf24_huart;

//**** Functions prototypes ****//
//Microsecond delay function
void NRF24_DelayMicroSeconds(uint32_t uSec)
{
 8000b6c:	b480      	push	{r7}
 8000b6e:	b085      	sub	sp, #20
 8000b70:	af00      	add	r7, sp, #0
 8000b72:	6078      	str	r0, [r7, #4]
	uint32_t uSecVar = uSec;
 8000b74:	687b      	ldr	r3, [r7, #4]
 8000b76:	60fb      	str	r3, [r7, #12]
	uSecVar = uSecVar* ((SystemCoreClock/1000000)/3);
 8000b78:	4b0a      	ldr	r3, [pc, #40]	; (8000ba4 <NRF24_DelayMicroSeconds+0x38>)
 8000b7a:	681b      	ldr	r3, [r3, #0]
 8000b7c:	4a0a      	ldr	r2, [pc, #40]	; (8000ba8 <NRF24_DelayMicroSeconds+0x3c>)
 8000b7e:	fba2 2303 	umull	r2, r3, r2, r3
 8000b82:	0c9a      	lsrs	r2, r3, #18
 8000b84:	68fb      	ldr	r3, [r7, #12]
 8000b86:	fb02 f303 	mul.w	r3, r2, r3
 8000b8a:	60fb      	str	r3, [r7, #12]
	while(uSecVar--);
 8000b8c:	bf00      	nop
 8000b8e:	68fb      	ldr	r3, [r7, #12]
 8000b90:	1e5a      	subs	r2, r3, #1
 8000b92:	60fa      	str	r2, [r7, #12]
 8000b94:	2b00      	cmp	r3, #0
 8000b96:	d1fa      	bne.n	8000b8e <NRF24_DelayMicroSeconds+0x22>
}
 8000b98:	bf00      	nop
 8000b9a:	3714      	adds	r7, #20
 8000b9c:	46bd      	mov	sp, r7
 8000b9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ba2:	4770      	bx	lr
 8000ba4:	24000010 	.word	0x24000010
 8000ba8:	165e9f81 	.word	0x165e9f81

08000bac <NRF24_csn>:

//1. Chip Select function
void NRF24_csn(int state)
{
 8000bac:	b580      	push	{r7, lr}
 8000bae:	b082      	sub	sp, #8
 8000bb0:	af00      	add	r7, sp, #0
 8000bb2:	6078      	str	r0, [r7, #4]
	if(state) HAL_GPIO_WritePin(nrf24_PORT, nrf24_CSN_PIN, GPIO_PIN_SET);
 8000bb4:	687b      	ldr	r3, [r7, #4]
 8000bb6:	2b00      	cmp	r3, #0
 8000bb8:	d008      	beq.n	8000bcc <NRF24_csn+0x20>
 8000bba:	4b0a      	ldr	r3, [pc, #40]	; (8000be4 <NRF24_csn+0x38>)
 8000bbc:	6818      	ldr	r0, [r3, #0]
 8000bbe:	4b0a      	ldr	r3, [pc, #40]	; (8000be8 <NRF24_csn+0x3c>)
 8000bc0:	881b      	ldrh	r3, [r3, #0]
 8000bc2:	2201      	movs	r2, #1
 8000bc4:	4619      	mov	r1, r3
 8000bc6:	f007 faa1 	bl	800810c <HAL_GPIO_WritePin>
	else HAL_GPIO_WritePin(nrf24_PORT, nrf24_CSN_PIN, GPIO_PIN_RESET);
}
 8000bca:	e007      	b.n	8000bdc <NRF24_csn+0x30>
	else HAL_GPIO_WritePin(nrf24_PORT, nrf24_CSN_PIN, GPIO_PIN_RESET);
 8000bcc:	4b05      	ldr	r3, [pc, #20]	; (8000be4 <NRF24_csn+0x38>)
 8000bce:	6818      	ldr	r0, [r3, #0]
 8000bd0:	4b05      	ldr	r3, [pc, #20]	; (8000be8 <NRF24_csn+0x3c>)
 8000bd2:	881b      	ldrh	r3, [r3, #0]
 8000bd4:	2200      	movs	r2, #0
 8000bd6:	4619      	mov	r1, r3
 8000bd8:	f007 fa98 	bl	800810c <HAL_GPIO_WritePin>
}
 8000bdc:	bf00      	nop
 8000bde:	3708      	adds	r7, #8
 8000be0:	46bd      	mov	sp, r7
 8000be2:	bd80      	pop	{r7, pc}
 8000be4:	24000210 	.word	0x24000210
 8000be8:	24000214 	.word	0x24000214

08000bec <NRF24_ce>:
//2. Chip Enable
void NRF24_ce(int state)
{
 8000bec:	b580      	push	{r7, lr}
 8000bee:	b082      	sub	sp, #8
 8000bf0:	af00      	add	r7, sp, #0
 8000bf2:	6078      	str	r0, [r7, #4]
	if(state) HAL_GPIO_WritePin(nrf24_PORT, nrf24_CE_PIN, GPIO_PIN_SET);
 8000bf4:	687b      	ldr	r3, [r7, #4]
 8000bf6:	2b00      	cmp	r3, #0
 8000bf8:	d008      	beq.n	8000c0c <NRF24_ce+0x20>
 8000bfa:	4b0a      	ldr	r3, [pc, #40]	; (8000c24 <NRF24_ce+0x38>)
 8000bfc:	6818      	ldr	r0, [r3, #0]
 8000bfe:	4b0a      	ldr	r3, [pc, #40]	; (8000c28 <NRF24_ce+0x3c>)
 8000c00:	881b      	ldrh	r3, [r3, #0]
 8000c02:	2201      	movs	r2, #1
 8000c04:	4619      	mov	r1, r3
 8000c06:	f007 fa81 	bl	800810c <HAL_GPIO_WritePin>
	else HAL_GPIO_WritePin(nrf24_PORT, nrf24_CE_PIN, GPIO_PIN_RESET);
}
 8000c0a:	e007      	b.n	8000c1c <NRF24_ce+0x30>
	else HAL_GPIO_WritePin(nrf24_PORT, nrf24_CE_PIN, GPIO_PIN_RESET);
 8000c0c:	4b05      	ldr	r3, [pc, #20]	; (8000c24 <NRF24_ce+0x38>)
 8000c0e:	6818      	ldr	r0, [r3, #0]
 8000c10:	4b05      	ldr	r3, [pc, #20]	; (8000c28 <NRF24_ce+0x3c>)
 8000c12:	881b      	ldrh	r3, [r3, #0]
 8000c14:	2200      	movs	r2, #0
 8000c16:	4619      	mov	r1, r3
 8000c18:	f007 fa78 	bl	800810c <HAL_GPIO_WritePin>
}
 8000c1c:	bf00      	nop
 8000c1e:	3708      	adds	r7, #8
 8000c20:	46bd      	mov	sp, r7
 8000c22:	bd80      	pop	{r7, pc}
 8000c24:	24000210 	.word	0x24000210
 8000c28:	24000216 	.word	0x24000216

08000c2c <NRF24_read_register>:
//3. Read single byte from a register
uint8_t NRF24_read_register(uint8_t reg)
{
 8000c2c:	b580      	push	{r7, lr}
 8000c2e:	b084      	sub	sp, #16
 8000c30:	af00      	add	r7, sp, #0
 8000c32:	4603      	mov	r3, r0
 8000c34:	71fb      	strb	r3, [r7, #7]
	uint8_t spiBuf[3];
	uint8_t retData;
	//Put CSN low
	NRF24_csn(0);
 8000c36:	2000      	movs	r0, #0
 8000c38:	f7ff ffb8 	bl	8000bac <NRF24_csn>
	//Transmit register address
	spiBuf[0] = reg&0x1F;
 8000c3c:	79fb      	ldrb	r3, [r7, #7]
 8000c3e:	f003 031f 	and.w	r3, r3, #31
 8000c42:	b2db      	uxtb	r3, r3
 8000c44:	733b      	strb	r3, [r7, #12]
	HAL_SPI_Transmit(&nrf24_hspi, spiBuf, 1, 100);
 8000c46:	f107 010c 	add.w	r1, r7, #12
 8000c4a:	2364      	movs	r3, #100	; 0x64
 8000c4c:	2201      	movs	r2, #1
 8000c4e:	480a      	ldr	r0, [pc, #40]	; (8000c78 <NRF24_read_register+0x4c>)
 8000c50:	f00e f814 	bl	800ec7c <HAL_SPI_Transmit>
	//Receive data
	HAL_SPI_Receive(&nrf24_hspi, &spiBuf[1], 1, 100);
 8000c54:	f107 030c 	add.w	r3, r7, #12
 8000c58:	1c59      	adds	r1, r3, #1
 8000c5a:	2364      	movs	r3, #100	; 0x64
 8000c5c:	2201      	movs	r2, #1
 8000c5e:	4806      	ldr	r0, [pc, #24]	; (8000c78 <NRF24_read_register+0x4c>)
 8000c60:	f00e f9fe 	bl	800f060 <HAL_SPI_Receive>
	retData = spiBuf[1];
 8000c64:	7b7b      	ldrb	r3, [r7, #13]
 8000c66:	73fb      	strb	r3, [r7, #15]
	//Bring CSN high
	NRF24_csn(1);
 8000c68:	2001      	movs	r0, #1
 8000c6a:	f7ff ff9f 	bl	8000bac <NRF24_csn>
	return retData;
 8000c6e:	7bfb      	ldrb	r3, [r7, #15]
}
 8000c70:	4618      	mov	r0, r3
 8000c72:	3710      	adds	r7, #16
 8000c74:	46bd      	mov	sp, r7
 8000c76:	bd80      	pop	{r7, pc}
 8000c78:	24000218 	.word	0x24000218

08000c7c <NRF24_read_registerN>:
//4. Read multiple bytes register
void NRF24_read_registerN(uint8_t reg, uint8_t *buf, uint8_t len)
{
 8000c7c:	b580      	push	{r7, lr}
 8000c7e:	b084      	sub	sp, #16
 8000c80:	af00      	add	r7, sp, #0
 8000c82:	4603      	mov	r3, r0
 8000c84:	6039      	str	r1, [r7, #0]
 8000c86:	71fb      	strb	r3, [r7, #7]
 8000c88:	4613      	mov	r3, r2
 8000c8a:	71bb      	strb	r3, [r7, #6]
	uint8_t spiBuf[3];
	//Put CSN low
	NRF24_csn(0);
 8000c8c:	2000      	movs	r0, #0
 8000c8e:	f7ff ff8d 	bl	8000bac <NRF24_csn>
	//Transmit register address
	spiBuf[0] = reg&0x1F;
 8000c92:	79fb      	ldrb	r3, [r7, #7]
 8000c94:	f003 031f 	and.w	r3, r3, #31
 8000c98:	b2db      	uxtb	r3, r3
 8000c9a:	733b      	strb	r3, [r7, #12]
	//spiStatus = NRF24_SPI_Write(spiBuf, 1);
	HAL_SPI_Transmit(&nrf24_hspi, spiBuf, 1, 100);
 8000c9c:	f107 010c 	add.w	r1, r7, #12
 8000ca0:	2364      	movs	r3, #100	; 0x64
 8000ca2:	2201      	movs	r2, #1
 8000ca4:	4808      	ldr	r0, [pc, #32]	; (8000cc8 <NRF24_read_registerN+0x4c>)
 8000ca6:	f00d ffe9 	bl	800ec7c <HAL_SPI_Transmit>
	//Receive data
	HAL_SPI_Receive(&nrf24_hspi, buf, len, 100);
 8000caa:	79bb      	ldrb	r3, [r7, #6]
 8000cac:	b29a      	uxth	r2, r3
 8000cae:	2364      	movs	r3, #100	; 0x64
 8000cb0:	6839      	ldr	r1, [r7, #0]
 8000cb2:	4805      	ldr	r0, [pc, #20]	; (8000cc8 <NRF24_read_registerN+0x4c>)
 8000cb4:	f00e f9d4 	bl	800f060 <HAL_SPI_Receive>
	//Bring CSN high
	NRF24_csn(1);
 8000cb8:	2001      	movs	r0, #1
 8000cba:	f7ff ff77 	bl	8000bac <NRF24_csn>
}
 8000cbe:	bf00      	nop
 8000cc0:	3710      	adds	r7, #16
 8000cc2:	46bd      	mov	sp, r7
 8000cc4:	bd80      	pop	{r7, pc}
 8000cc6:	bf00      	nop
 8000cc8:	24000218 	.word	0x24000218

08000ccc <NRF24_write_register>:
//5. Write single byte register
void NRF24_write_register(uint8_t reg, uint8_t value)
{
 8000ccc:	b580      	push	{r7, lr}
 8000cce:	b084      	sub	sp, #16
 8000cd0:	af00      	add	r7, sp, #0
 8000cd2:	4603      	mov	r3, r0
 8000cd4:	460a      	mov	r2, r1
 8000cd6:	71fb      	strb	r3, [r7, #7]
 8000cd8:	4613      	mov	r3, r2
 8000cda:	71bb      	strb	r3, [r7, #6]
	uint8_t spiBuf[3];
	//Put CSN low
	NRF24_csn(0);
 8000cdc:	2000      	movs	r0, #0
 8000cde:	f7ff ff65 	bl	8000bac <NRF24_csn>
	//Transmit register address and data
	spiBuf[0] = reg|0x20;
 8000ce2:	79fb      	ldrb	r3, [r7, #7]
 8000ce4:	f043 0320 	orr.w	r3, r3, #32
 8000ce8:	b2db      	uxtb	r3, r3
 8000cea:	733b      	strb	r3, [r7, #12]
	spiBuf[1] = value;
 8000cec:	79bb      	ldrb	r3, [r7, #6]
 8000cee:	737b      	strb	r3, [r7, #13]
	HAL_SPI_Transmit(&nrf24_hspi, spiBuf, 2, 100);
 8000cf0:	f107 010c 	add.w	r1, r7, #12
 8000cf4:	2364      	movs	r3, #100	; 0x64
 8000cf6:	2202      	movs	r2, #2
 8000cf8:	4804      	ldr	r0, [pc, #16]	; (8000d0c <NRF24_write_register+0x40>)
 8000cfa:	f00d ffbf 	bl	800ec7c <HAL_SPI_Transmit>
	//Bring CSN high
	NRF24_csn(1);
 8000cfe:	2001      	movs	r0, #1
 8000d00:	f7ff ff54 	bl	8000bac <NRF24_csn>
}
 8000d04:	bf00      	nop
 8000d06:	3710      	adds	r7, #16
 8000d08:	46bd      	mov	sp, r7
 8000d0a:	bd80      	pop	{r7, pc}
 8000d0c:	24000218 	.word	0x24000218

08000d10 <NRF24_write_registerN>:
//6. Write multipl bytes register
void NRF24_write_registerN(uint8_t reg, const uint8_t* buf, uint8_t len)
{
 8000d10:	b580      	push	{r7, lr}
 8000d12:	b084      	sub	sp, #16
 8000d14:	af00      	add	r7, sp, #0
 8000d16:	4603      	mov	r3, r0
 8000d18:	6039      	str	r1, [r7, #0]
 8000d1a:	71fb      	strb	r3, [r7, #7]
 8000d1c:	4613      	mov	r3, r2
 8000d1e:	71bb      	strb	r3, [r7, #6]
	uint8_t spiBuf[3];
	//Put CSN low
	NRF24_csn(0);
 8000d20:	2000      	movs	r0, #0
 8000d22:	f7ff ff43 	bl	8000bac <NRF24_csn>
	//Transmit register address and data
	spiBuf[0] = reg|0x20;
 8000d26:	79fb      	ldrb	r3, [r7, #7]
 8000d28:	f043 0320 	orr.w	r3, r3, #32
 8000d2c:	b2db      	uxtb	r3, r3
 8000d2e:	733b      	strb	r3, [r7, #12]
	HAL_SPI_Transmit(&nrf24_hspi, spiBuf, 1, 100);
 8000d30:	f107 010c 	add.w	r1, r7, #12
 8000d34:	2364      	movs	r3, #100	; 0x64
 8000d36:	2201      	movs	r2, #1
 8000d38:	4808      	ldr	r0, [pc, #32]	; (8000d5c <NRF24_write_registerN+0x4c>)
 8000d3a:	f00d ff9f 	bl	800ec7c <HAL_SPI_Transmit>
	HAL_SPI_Transmit(&nrf24_hspi, (uint8_t*)buf, len, 100);
 8000d3e:	79bb      	ldrb	r3, [r7, #6]
 8000d40:	b29a      	uxth	r2, r3
 8000d42:	2364      	movs	r3, #100	; 0x64
 8000d44:	6839      	ldr	r1, [r7, #0]
 8000d46:	4805      	ldr	r0, [pc, #20]	; (8000d5c <NRF24_write_registerN+0x4c>)
 8000d48:	f00d ff98 	bl	800ec7c <HAL_SPI_Transmit>
	//Bring CSN high
	NRF24_csn(1);
 8000d4c:	2001      	movs	r0, #1
 8000d4e:	f7ff ff2d 	bl	8000bac <NRF24_csn>
}
 8000d52:	bf00      	nop
 8000d54:	3710      	adds	r7, #16
 8000d56:	46bd      	mov	sp, r7
 8000d58:	bd80      	pop	{r7, pc}
 8000d5a:	bf00      	nop
 8000d5c:	24000218 	.word	0x24000218

08000d60 <NRF24_write_payload>:
//7. Write transmit payload
void NRF24_write_payload(const void* buf, uint8_t len)
{
 8000d60:	b580      	push	{r7, lr}
 8000d62:	b084      	sub	sp, #16
 8000d64:	af00      	add	r7, sp, #0
 8000d66:	6078      	str	r0, [r7, #4]
 8000d68:	460b      	mov	r3, r1
 8000d6a:	70fb      	strb	r3, [r7, #3]
	uint8_t wrPayloadCmd;
	//Bring CSN low
	NRF24_csn(0);
 8000d6c:	2000      	movs	r0, #0
 8000d6e:	f7ff ff1d 	bl	8000bac <NRF24_csn>
	//Send Write Tx payload command followed by pbuf data
	wrPayloadCmd = CMD_W_TX_PAYLOAD;
 8000d72:	23a0      	movs	r3, #160	; 0xa0
 8000d74:	73fb      	strb	r3, [r7, #15]
	HAL_SPI_Transmit(&nrf24_hspi, &wrPayloadCmd, 1, 100);
 8000d76:	f107 010f 	add.w	r1, r7, #15
 8000d7a:	2364      	movs	r3, #100	; 0x64
 8000d7c:	2201      	movs	r2, #1
 8000d7e:	4808      	ldr	r0, [pc, #32]	; (8000da0 <NRF24_write_payload+0x40>)
 8000d80:	f00d ff7c 	bl	800ec7c <HAL_SPI_Transmit>
	HAL_SPI_Transmit(&nrf24_hspi, (uint8_t *)buf, len, 100);
 8000d84:	78fb      	ldrb	r3, [r7, #3]
 8000d86:	b29a      	uxth	r2, r3
 8000d88:	2364      	movs	r3, #100	; 0x64
 8000d8a:	6879      	ldr	r1, [r7, #4]
 8000d8c:	4804      	ldr	r0, [pc, #16]	; (8000da0 <NRF24_write_payload+0x40>)
 8000d8e:	f00d ff75 	bl	800ec7c <HAL_SPI_Transmit>
	//Bring CSN high
	NRF24_csn(1);
 8000d92:	2001      	movs	r0, #1
 8000d94:	f7ff ff0a 	bl	8000bac <NRF24_csn>
}
 8000d98:	bf00      	nop
 8000d9a:	3710      	adds	r7, #16
 8000d9c:	46bd      	mov	sp, r7
 8000d9e:	bd80      	pop	{r7, pc}
 8000da0:	24000218 	.word	0x24000218

08000da4 <NRF24_flush_tx>:
	NRF24_csn(1);
}

//9. Flush Tx buffer
void NRF24_flush_tx(void)
{
 8000da4:	b580      	push	{r7, lr}
 8000da6:	af00      	add	r7, sp, #0
	NRF24_write_register(CMD_FLUSH_TX, 0xFF);
 8000da8:	21ff      	movs	r1, #255	; 0xff
 8000daa:	20e1      	movs	r0, #225	; 0xe1
 8000dac:	f7ff ff8e 	bl	8000ccc <NRF24_write_register>
}
 8000db0:	bf00      	nop
 8000db2:	bd80      	pop	{r7, pc}

08000db4 <NRF24_flush_rx>:
//10. Flush Rx buffer
void NRF24_flush_rx(void)
{
 8000db4:	b580      	push	{r7, lr}
 8000db6:	af00      	add	r7, sp, #0
	NRF24_write_register(CMD_FLUSH_RX, 0xFF);
 8000db8:	21ff      	movs	r1, #255	; 0xff
 8000dba:	20e2      	movs	r0, #226	; 0xe2
 8000dbc:	f7ff ff86 	bl	8000ccc <NRF24_write_register>
}
 8000dc0:	bf00      	nop
 8000dc2:	bd80      	pop	{r7, pc}

08000dc4 <NRF24_get_status>:
//11. Get status register value
uint8_t NRF24_get_status(void)
{
 8000dc4:	b580      	push	{r7, lr}
 8000dc6:	b082      	sub	sp, #8
 8000dc8:	af00      	add	r7, sp, #0
	uint8_t statReg;
	statReg = NRF24_read_register(REG_STATUS);
 8000dca:	2007      	movs	r0, #7
 8000dcc:	f7ff ff2e 	bl	8000c2c <NRF24_read_register>
 8000dd0:	4603      	mov	r3, r0
 8000dd2:	71fb      	strb	r3, [r7, #7]
	return statReg;
 8000dd4:	79fb      	ldrb	r3, [r7, #7]
}
 8000dd6:	4618      	mov	r0, r3
 8000dd8:	3708      	adds	r7, #8
 8000dda:	46bd      	mov	sp, r7
 8000ddc:	bd80      	pop	{r7, pc}
	...

08000de0 <NRF24_begin>:

//12. Begin function
void NRF24_begin(GPIO_TypeDef *nrf24PORT, uint16_t nrfCSN_Pin, uint16_t nrfCE_Pin, SPI_HandleTypeDef nrfSPI)
{
 8000de0:	b082      	sub	sp, #8
 8000de2:	b580      	push	{r7, lr}
 8000de4:	b084      	sub	sp, #16
 8000de6:	af00      	add	r7, sp, #0
 8000de8:	6078      	str	r0, [r7, #4]
 8000dea:	61fb      	str	r3, [r7, #28]
 8000dec:	460b      	mov	r3, r1
 8000dee:	807b      	strh	r3, [r7, #2]
 8000df0:	4613      	mov	r3, r2
 8000df2:	803b      	strh	r3, [r7, #0]
	//Copy SPI handle variable
	memcpy(&nrf24_hspi, &nrfSPI, sizeof(nrfSPI));
 8000df4:	4b66      	ldr	r3, [pc, #408]	; (8000f90 <NRF24_begin+0x1b0>)
 8000df6:	4618      	mov	r0, r3
 8000df8:	f107 031c 	add.w	r3, r7, #28
 8000dfc:	2288      	movs	r2, #136	; 0x88
 8000dfe:	4619      	mov	r1, r3
 8000e00:	f018 fbaa 	bl	8019558 <memcpy>
	//Copy Pins and Port variables
	nrf24_PORT = nrf24PORT;
 8000e04:	4a63      	ldr	r2, [pc, #396]	; (8000f94 <NRF24_begin+0x1b4>)
 8000e06:	687b      	ldr	r3, [r7, #4]
 8000e08:	6013      	str	r3, [r2, #0]
	nrf24_CSN_PIN = nrfCSN_Pin;
 8000e0a:	4a63      	ldr	r2, [pc, #396]	; (8000f98 <NRF24_begin+0x1b8>)
 8000e0c:	887b      	ldrh	r3, [r7, #2]
 8000e0e:	8013      	strh	r3, [r2, #0]
	nrf24_CE_PIN = nrfCE_Pin;
 8000e10:	4a62      	ldr	r2, [pc, #392]	; (8000f9c <NRF24_begin+0x1bc>)
 8000e12:	883b      	ldrh	r3, [r7, #0]
 8000e14:	8013      	strh	r3, [r2, #0]
	
	//Put pins to idle state
	NRF24_csn(1);
 8000e16:	2001      	movs	r0, #1
 8000e18:	f7ff fec8 	bl	8000bac <NRF24_csn>
	NRF24_ce(0);
 8000e1c:	2000      	movs	r0, #0
 8000e1e:	f7ff fee5 	bl	8000bec <NRF24_ce>
	//5 ms initial delay
	HAL_Delay(5);
 8000e22:	2005      	movs	r0, #5
 8000e24:	f003 fc58 	bl	80046d8 <HAL_Delay>
	
	//**** Soft Reset Registers default values ****//
	NRF24_write_register(0x00, 0x08);
 8000e28:	2108      	movs	r1, #8
 8000e2a:	2000      	movs	r0, #0
 8000e2c:	f7ff ff4e 	bl	8000ccc <NRF24_write_register>
	NRF24_write_register(0x01, 0x3f);
 8000e30:	213f      	movs	r1, #63	; 0x3f
 8000e32:	2001      	movs	r0, #1
 8000e34:	f7ff ff4a 	bl	8000ccc <NRF24_write_register>
	NRF24_write_register(0x02, 0x03);
 8000e38:	2103      	movs	r1, #3
 8000e3a:	2002      	movs	r0, #2
 8000e3c:	f7ff ff46 	bl	8000ccc <NRF24_write_register>
	NRF24_write_register(0x03, 0x03);
 8000e40:	2103      	movs	r1, #3
 8000e42:	2003      	movs	r0, #3
 8000e44:	f7ff ff42 	bl	8000ccc <NRF24_write_register>
	NRF24_write_register(0x04, 0x03);
 8000e48:	2103      	movs	r1, #3
 8000e4a:	2004      	movs	r0, #4
 8000e4c:	f7ff ff3e 	bl	8000ccc <NRF24_write_register>
	NRF24_write_register(0x05, 0x02);
 8000e50:	2102      	movs	r1, #2
 8000e52:	2005      	movs	r0, #5
 8000e54:	f7ff ff3a 	bl	8000ccc <NRF24_write_register>
	NRF24_write_register(0x06, 0x0f);
 8000e58:	210f      	movs	r1, #15
 8000e5a:	2006      	movs	r0, #6
 8000e5c:	f7ff ff36 	bl	8000ccc <NRF24_write_register>
	NRF24_write_register(0x07, 0x0e);
 8000e60:	210e      	movs	r1, #14
 8000e62:	2007      	movs	r0, #7
 8000e64:	f7ff ff32 	bl	8000ccc <NRF24_write_register>
	NRF24_write_register(0x08, 0x00);
 8000e68:	2100      	movs	r1, #0
 8000e6a:	2008      	movs	r0, #8
 8000e6c:	f7ff ff2e 	bl	8000ccc <NRF24_write_register>
	NRF24_write_register(0x09, 0x00);
 8000e70:	2100      	movs	r1, #0
 8000e72:	2009      	movs	r0, #9
 8000e74:	f7ff ff2a 	bl	8000ccc <NRF24_write_register>
	uint8_t pipeAddrVar[6];
	pipeAddrVar[4]=0xE7; pipeAddrVar[3]=0xE7; pipeAddrVar[2]=0xE7; pipeAddrVar[1]=0xE7; pipeAddrVar[0]=0xE7; 
 8000e78:	23e7      	movs	r3, #231	; 0xe7
 8000e7a:	733b      	strb	r3, [r7, #12]
 8000e7c:	23e7      	movs	r3, #231	; 0xe7
 8000e7e:	72fb      	strb	r3, [r7, #11]
 8000e80:	23e7      	movs	r3, #231	; 0xe7
 8000e82:	72bb      	strb	r3, [r7, #10]
 8000e84:	23e7      	movs	r3, #231	; 0xe7
 8000e86:	727b      	strb	r3, [r7, #9]
 8000e88:	23e7      	movs	r3, #231	; 0xe7
 8000e8a:	723b      	strb	r3, [r7, #8]
	NRF24_write_registerN(0x0A, pipeAddrVar, 5);
 8000e8c:	f107 0308 	add.w	r3, r7, #8
 8000e90:	2205      	movs	r2, #5
 8000e92:	4619      	mov	r1, r3
 8000e94:	200a      	movs	r0, #10
 8000e96:	f7ff ff3b 	bl	8000d10 <NRF24_write_registerN>
	pipeAddrVar[4]=0xC2; pipeAddrVar[3]=0xC2; pipeAddrVar[2]=0xC2; pipeAddrVar[1]=0xC2; pipeAddrVar[0]=0xC2; 
 8000e9a:	23c2      	movs	r3, #194	; 0xc2
 8000e9c:	733b      	strb	r3, [r7, #12]
 8000e9e:	23c2      	movs	r3, #194	; 0xc2
 8000ea0:	72fb      	strb	r3, [r7, #11]
 8000ea2:	23c2      	movs	r3, #194	; 0xc2
 8000ea4:	72bb      	strb	r3, [r7, #10]
 8000ea6:	23c2      	movs	r3, #194	; 0xc2
 8000ea8:	727b      	strb	r3, [r7, #9]
 8000eaa:	23c2      	movs	r3, #194	; 0xc2
 8000eac:	723b      	strb	r3, [r7, #8]
	NRF24_write_registerN(0x0B, pipeAddrVar, 5);
 8000eae:	f107 0308 	add.w	r3, r7, #8
 8000eb2:	2205      	movs	r2, #5
 8000eb4:	4619      	mov	r1, r3
 8000eb6:	200b      	movs	r0, #11
 8000eb8:	f7ff ff2a 	bl	8000d10 <NRF24_write_registerN>
	NRF24_write_register(0x0C, 0xC3);
 8000ebc:	21c3      	movs	r1, #195	; 0xc3
 8000ebe:	200c      	movs	r0, #12
 8000ec0:	f7ff ff04 	bl	8000ccc <NRF24_write_register>
	NRF24_write_register(0x0D, 0xC4);
 8000ec4:	21c4      	movs	r1, #196	; 0xc4
 8000ec6:	200d      	movs	r0, #13
 8000ec8:	f7ff ff00 	bl	8000ccc <NRF24_write_register>
	NRF24_write_register(0x0E, 0xC5);
 8000ecc:	21c5      	movs	r1, #197	; 0xc5
 8000ece:	200e      	movs	r0, #14
 8000ed0:	f7ff fefc 	bl	8000ccc <NRF24_write_register>
	NRF24_write_register(0x0F, 0xC6);
 8000ed4:	21c6      	movs	r1, #198	; 0xc6
 8000ed6:	200f      	movs	r0, #15
 8000ed8:	f7ff fef8 	bl	8000ccc <NRF24_write_register>
	pipeAddrVar[4]=0xE7; pipeAddrVar[3]=0xE7; pipeAddrVar[2]=0xE7; pipeAddrVar[1]=0xE7; pipeAddrVar[0]=0xE7; 
 8000edc:	23e7      	movs	r3, #231	; 0xe7
 8000ede:	733b      	strb	r3, [r7, #12]
 8000ee0:	23e7      	movs	r3, #231	; 0xe7
 8000ee2:	72fb      	strb	r3, [r7, #11]
 8000ee4:	23e7      	movs	r3, #231	; 0xe7
 8000ee6:	72bb      	strb	r3, [r7, #10]
 8000ee8:	23e7      	movs	r3, #231	; 0xe7
 8000eea:	727b      	strb	r3, [r7, #9]
 8000eec:	23e7      	movs	r3, #231	; 0xe7
 8000eee:	723b      	strb	r3, [r7, #8]
	NRF24_write_registerN(0x10, pipeAddrVar, 5);
 8000ef0:	f107 0308 	add.w	r3, r7, #8
 8000ef4:	2205      	movs	r2, #5
 8000ef6:	4619      	mov	r1, r3
 8000ef8:	2010      	movs	r0, #16
 8000efa:	f7ff ff09 	bl	8000d10 <NRF24_write_registerN>
	NRF24_write_register(0x11, 0);
 8000efe:	2100      	movs	r1, #0
 8000f00:	2011      	movs	r0, #17
 8000f02:	f7ff fee3 	bl	8000ccc <NRF24_write_register>
	NRF24_write_register(0x12, 0);
 8000f06:	2100      	movs	r1, #0
 8000f08:	2012      	movs	r0, #18
 8000f0a:	f7ff fedf 	bl	8000ccc <NRF24_write_register>
	NRF24_write_register(0x13, 0);
 8000f0e:	2100      	movs	r1, #0
 8000f10:	2013      	movs	r0, #19
 8000f12:	f7ff fedb 	bl	8000ccc <NRF24_write_register>
	NRF24_write_register(0x14, 0);
 8000f16:	2100      	movs	r1, #0
 8000f18:	2014      	movs	r0, #20
 8000f1a:	f7ff fed7 	bl	8000ccc <NRF24_write_register>
	NRF24_write_register(0x15, 0);
 8000f1e:	2100      	movs	r1, #0
 8000f20:	2015      	movs	r0, #21
 8000f22:	f7ff fed3 	bl	8000ccc <NRF24_write_register>
	NRF24_write_register(0x16, 0);
 8000f26:	2100      	movs	r1, #0
 8000f28:	2016      	movs	r0, #22
 8000f2a:	f7ff fecf 	bl	8000ccc <NRF24_write_register>
	
	NRF24_ACTIVATE_cmd();
 8000f2e:	f000 fa89 	bl	8001444 <NRF24_ACTIVATE_cmd>
	NRF24_write_register(0x1c, 0);
 8000f32:	2100      	movs	r1, #0
 8000f34:	201c      	movs	r0, #28
 8000f36:	f7ff fec9 	bl	8000ccc <NRF24_write_register>
	NRF24_write_register(0x1d, 0);
 8000f3a:	2100      	movs	r1, #0
 8000f3c:	201d      	movs	r0, #29
 8000f3e:	f7ff fec5 	bl	8000ccc <NRF24_write_register>
	printRadioSettings();
 8000f42:	f000 fa99 	bl	8001478 <printRadioSettings>
	//Initialise retries 15 and delay 1250 usec
	NRF24_setRetries(15, 15);
 8000f46:	210f      	movs	r1, #15
 8000f48:	200f      	movs	r0, #15
 8000f4a:	f000 f8ad 	bl	80010a8 <NRF24_setRetries>
	//Initialise PA level to max (0dB)
	NRF24_setPALevel(RF24_PA_0dB);
 8000f4e:	2003      	movs	r0, #3
 8000f50:	f000 f927 	bl	80011a2 <NRF24_setPALevel>
	//Initialise data rate to 1Mbps
	NRF24_setDataRate(RF24_2MBPS);
 8000f54:	2001      	movs	r0, #1
 8000f56:	f000 f95d 	bl	8001214 <NRF24_setDataRate>
	//Initalise CRC length to 16-bit (2 bytes)
	NRF24_setCRCLength(RF24_CRC_16);
 8000f5a:	2002      	movs	r0, #2
 8000f5c:	f000 f9a0 	bl	80012a0 <NRF24_setCRCLength>
	//Disable dynamic payload
	NRF24_disableDynamicPayloads();
 8000f60:	f000 f8f2 	bl	8001148 <NRF24_disableDynamicPayloads>
	//Set payload size
	NRF24_setPayloadSize(32);
 8000f64:	2020      	movs	r0, #32
 8000f66:	f000 f8cf 	bl	8001108 <NRF24_setPayloadSize>
	
	//Reset status register
	NRF24_resetStatus();
 8000f6a:	f000 fa62 	bl	8001432 <NRF24_resetStatus>
	//Initialise channel to 76
	NRF24_setChannel(76);
 8000f6e:	204c      	movs	r0, #76	; 0x4c
 8000f70:	f000 f8b5 	bl	80010de <NRF24_setChannel>
	//Flush buffers
	NRF24_flush_tx();
 8000f74:	f7ff ff16 	bl	8000da4 <NRF24_flush_tx>
	NRF24_flush_rx();
 8000f78:	f7ff ff1c 	bl	8000db4 <NRF24_flush_rx>
	
	NRF24_powerDown();
 8000f7c:	f000 f9b8 	bl	80012f0 <NRF24_powerDown>
	
}
 8000f80:	bf00      	nop
 8000f82:	3710      	adds	r7, #16
 8000f84:	46bd      	mov	sp, r7
 8000f86:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000f8a:	b002      	add	sp, #8
 8000f8c:	4770      	bx	lr
 8000f8e:	bf00      	nop
 8000f90:	24000218 	.word	0x24000218
 8000f94:	24000210 	.word	0x24000210
 8000f98:	24000214 	.word	0x24000214
 8000f9c:	24000216 	.word	0x24000216

08000fa0 <NRF24_stopListening>:
	//Wait for 130 uSec for the radio to come on
	NRF24_DelayMicroSeconds(150);
}
//14. Stop listening (essential before any write operation)
void NRF24_stopListening(void)
{
 8000fa0:	b580      	push	{r7, lr}
 8000fa2:	af00      	add	r7, sp, #0
	NRF24_ce(0);
 8000fa4:	2000      	movs	r0, #0
 8000fa6:	f7ff fe21 	bl	8000bec <NRF24_ce>
	NRF24_flush_tx();
 8000faa:	f7ff fefb 	bl	8000da4 <NRF24_flush_tx>
	NRF24_flush_rx();
 8000fae:	f7ff ff01 	bl	8000db4 <NRF24_flush_rx>
}
 8000fb2:	bf00      	nop
 8000fb4:	bd80      	pop	{r7, pc}
	...

08000fb8 <NRF24_write>:
//15. Write(Transmit data), returns true if successfully sent
bool NRF24_write( const void* buf, uint8_t len )
{
 8000fb8:	b580      	push	{r7, lr}
 8000fba:	b086      	sub	sp, #24
 8000fbc:	af00      	add	r7, sp, #0
 8000fbe:	6078      	str	r0, [r7, #4]
 8000fc0:	460b      	mov	r3, r1
 8000fc2:	70fb      	strb	r3, [r7, #3]
	bool retStatus;
	//Start writing
	NRF24_resetStatus();
 8000fc4:	f000 fa35 	bl	8001432 <NRF24_resetStatus>
	NRF24_startWrite(buf,len);
 8000fc8:	78fb      	ldrb	r3, [r7, #3]
 8000fca:	4619      	mov	r1, r3
 8000fcc:	6878      	ldr	r0, [r7, #4]
 8000fce:	f000 f9ce 	bl	800136e <NRF24_startWrite>
	//Data monitor
  uint8_t observe_tx;
  uint8_t status;
  uint32_t sent_at = HAL_GetTick();
 8000fd2:	f003 fb75 	bl	80046c0 <HAL_GetTick>
 8000fd6:	6178      	str	r0, [r7, #20]
	const uint32_t timeout = 10; //ms to wait for timeout
 8000fd8:	230a      	movs	r3, #10
 8000fda:	613b      	str	r3, [r7, #16]
	do
  {
    NRF24_read_registerN(REG_OBSERVE_TX,&observe_tx,1);
 8000fdc:	f107 030d 	add.w	r3, r7, #13
 8000fe0:	2201      	movs	r2, #1
 8000fe2:	4619      	mov	r1, r3
 8000fe4:	2008      	movs	r0, #8
 8000fe6:	f7ff fe49 	bl	8000c7c <NRF24_read_registerN>
		//Get status register
		status = NRF24_get_status();
 8000fea:	f7ff feeb 	bl	8000dc4 <NRF24_get_status>
 8000fee:	4603      	mov	r3, r0
 8000ff0:	73fb      	strb	r3, [r7, #15]
  }
  while( ! ( status & ( _BV(BIT_TX_DS) | _BV(BIT_MAX_RT) ) ) && ( HAL_GetTick() - sent_at < timeout ) );
 8000ff2:	7bfb      	ldrb	r3, [r7, #15]
 8000ff4:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8000ff8:	2b00      	cmp	r3, #0
 8000ffa:	d107      	bne.n	800100c <NRF24_write+0x54>
 8000ffc:	f003 fb60 	bl	80046c0 <HAL_GetTick>
 8001000:	4602      	mov	r2, r0
 8001002:	697b      	ldr	r3, [r7, #20]
 8001004:	1ad3      	subs	r3, r2, r3
 8001006:	693a      	ldr	r2, [r7, #16]
 8001008:	429a      	cmp	r2, r3
 800100a:	d8e7      	bhi.n	8000fdc <NRF24_write+0x24>
	
//	printConfigReg();
//	printStatusReg();
	
	bool tx_ok, tx_fail;
  NRF24_whatHappened(&tx_ok,&tx_fail, &ack_payload_available);
 800100c:	f107 010b 	add.w	r1, r7, #11
 8001010:	f107 030c 	add.w	r3, r7, #12
 8001014:	4a0c      	ldr	r2, [pc, #48]	; (8001048 <NRF24_write+0x90>)
 8001016:	4618      	mov	r0, r3
 8001018:	f000 f9d8 	bl	80013cc <NRF24_whatHappened>
	retStatus = tx_ok;
 800101c:	7b3b      	ldrb	r3, [r7, #12]
 800101e:	73bb      	strb	r3, [r7, #14]
	if ( ack_payload_available )
 8001020:	4b09      	ldr	r3, [pc, #36]	; (8001048 <NRF24_write+0x90>)
 8001022:	781b      	ldrb	r3, [r3, #0]
 8001024:	2b00      	cmp	r3, #0
 8001026:	d005      	beq.n	8001034 <NRF24_write+0x7c>
  {
    ack_payload_length = NRF24_getDynamicPayloadSize();
 8001028:	f000 f886 	bl	8001138 <NRF24_getDynamicPayloadSize>
 800102c:	4603      	mov	r3, r0
 800102e:	461a      	mov	r2, r3
 8001030:	4b06      	ldr	r3, [pc, #24]	; (800104c <NRF24_write+0x94>)
 8001032:	701a      	strb	r2, [r3, #0]
	}
	
	//Power down
	NRF24_available();
 8001034:	f000 f80c 	bl	8001050 <NRF24_available>
	NRF24_flush_tx();
 8001038:	f7ff feb4 	bl	8000da4 <NRF24_flush_tx>
	return retStatus;
 800103c:	7bbb      	ldrb	r3, [r7, #14]
}
 800103e:	4618      	mov	r0, r3
 8001040:	3718      	adds	r7, #24
 8001042:	46bd      	mov	sp, r7
 8001044:	bd80      	pop	{r7, pc}
 8001046:	bf00      	nop
 8001048:	24000208 	.word	0x24000208
 800104c:	24000209 	.word	0x24000209

08001050 <NRF24_available>:
//16. Check for available data to read
bool NRF24_available(void)
{
 8001050:	b580      	push	{r7, lr}
 8001052:	af00      	add	r7, sp, #0
	return NRF24_availablePipe(NULL);
 8001054:	2000      	movs	r0, #0
 8001056:	f000 f95a 	bl	800130e <NRF24_availablePipe>
 800105a:	4603      	mov	r3, r0
}
 800105c:	4618      	mov	r0, r3
 800105e:	bd80      	pop	{r7, pc}

08001060 <NRF24_openWritingPipe>:
	NRF24_getDynamicPayloadSize();
	return rxStatus;
}
//18. Open Tx pipe for writing (Cannot perform this while Listenning, has to call NRF24_stopListening)
void NRF24_openWritingPipe(uint64_t address)
{
 8001060:	b580      	push	{r7, lr}
 8001062:	b084      	sub	sp, #16
 8001064:	af00      	add	r7, sp, #0
 8001066:	e9c7 0100 	strd	r0, r1, [r7]
	NRF24_write_registerN(REG_RX_ADDR_P0, (uint8_t *)(&address), 5);
 800106a:	463b      	mov	r3, r7
 800106c:	2205      	movs	r2, #5
 800106e:	4619      	mov	r1, r3
 8001070:	200a      	movs	r0, #10
 8001072:	f7ff fe4d 	bl	8000d10 <NRF24_write_registerN>
  NRF24_write_registerN(REG_TX_ADDR, (uint8_t *)(&address), 5);
 8001076:	463b      	mov	r3, r7
 8001078:	2205      	movs	r2, #5
 800107a:	4619      	mov	r1, r3
 800107c:	2010      	movs	r0, #16
 800107e:	f7ff fe47 	bl	8000d10 <NRF24_write_registerN>
	
	const uint8_t max_payload_size = 32;
 8001082:	2320      	movs	r3, #32
 8001084:	73fb      	strb	r3, [r7, #15]
  NRF24_write_register(REG_RX_PW_P0,MIN(payload_size,max_payload_size));
 8001086:	4b07      	ldr	r3, [pc, #28]	; (80010a4 <NRF24_openWritingPipe+0x44>)
 8001088:	781b      	ldrb	r3, [r3, #0]
 800108a:	7bfa      	ldrb	r2, [r7, #15]
 800108c:	4293      	cmp	r3, r2
 800108e:	bf28      	it	cs
 8001090:	4613      	movcs	r3, r2
 8001092:	b2db      	uxtb	r3, r3
 8001094:	4619      	mov	r1, r3
 8001096:	2011      	movs	r0, #17
 8001098:	f7ff fe18 	bl	8000ccc <NRF24_write_register>
}
 800109c:	bf00      	nop
 800109e:	3710      	adds	r7, #16
 80010a0:	46bd      	mov	sp, r7
 80010a2:	bd80      	pop	{r7, pc}
 80010a4:	2400020a 	.word	0x2400020a

080010a8 <NRF24_setRetries>:
	}
	
}
//20 set transmit retries (rf24_Retries_e) and delay
void NRF24_setRetries(uint8_t delay, uint8_t count)
{
 80010a8:	b580      	push	{r7, lr}
 80010aa:	b082      	sub	sp, #8
 80010ac:	af00      	add	r7, sp, #0
 80010ae:	4603      	mov	r3, r0
 80010b0:	460a      	mov	r2, r1
 80010b2:	71fb      	strb	r3, [r7, #7]
 80010b4:	4613      	mov	r3, r2
 80010b6:	71bb      	strb	r3, [r7, #6]
	NRF24_write_register(REG_SETUP_RETR,(delay&0xf)<<BIT_ARD | (count&0xf)<<BIT_ARC);
 80010b8:	79fb      	ldrb	r3, [r7, #7]
 80010ba:	011b      	lsls	r3, r3, #4
 80010bc:	b25a      	sxtb	r2, r3
 80010be:	f997 3006 	ldrsb.w	r3, [r7, #6]
 80010c2:	f003 030f 	and.w	r3, r3, #15
 80010c6:	b25b      	sxtb	r3, r3
 80010c8:	4313      	orrs	r3, r2
 80010ca:	b25b      	sxtb	r3, r3
 80010cc:	b2db      	uxtb	r3, r3
 80010ce:	4619      	mov	r1, r3
 80010d0:	2004      	movs	r0, #4
 80010d2:	f7ff fdfb 	bl	8000ccc <NRF24_write_register>
}
 80010d6:	bf00      	nop
 80010d8:	3708      	adds	r7, #8
 80010da:	46bd      	mov	sp, r7
 80010dc:	bd80      	pop	{r7, pc}

080010de <NRF24_setChannel>:

//21. Set RF channel frequency
void NRF24_setChannel(uint8_t channel)
{
 80010de:	b580      	push	{r7, lr}
 80010e0:	b084      	sub	sp, #16
 80010e2:	af00      	add	r7, sp, #0
 80010e4:	4603      	mov	r3, r0
 80010e6:	71fb      	strb	r3, [r7, #7]
	const uint8_t max_channel = 127;
 80010e8:	237f      	movs	r3, #127	; 0x7f
 80010ea:	73fb      	strb	r3, [r7, #15]
  NRF24_write_register(REG_RF_CH,MIN(channel,max_channel));
 80010ec:	7bfa      	ldrb	r2, [r7, #15]
 80010ee:	79fb      	ldrb	r3, [r7, #7]
 80010f0:	4293      	cmp	r3, r2
 80010f2:	bf28      	it	cs
 80010f4:	4613      	movcs	r3, r2
 80010f6:	b2db      	uxtb	r3, r3
 80010f8:	4619      	mov	r1, r3
 80010fa:	2005      	movs	r0, #5
 80010fc:	f7ff fde6 	bl	8000ccc <NRF24_write_register>
}
 8001100:	bf00      	nop
 8001102:	3710      	adds	r7, #16
 8001104:	46bd      	mov	sp, r7
 8001106:	bd80      	pop	{r7, pc}

08001108 <NRF24_setPayloadSize>:
//22. Set payload size
void NRF24_setPayloadSize(uint8_t size)
{
 8001108:	b480      	push	{r7}
 800110a:	b085      	sub	sp, #20
 800110c:	af00      	add	r7, sp, #0
 800110e:	4603      	mov	r3, r0
 8001110:	71fb      	strb	r3, [r7, #7]
	const uint8_t max_payload_size = 32;
 8001112:	2320      	movs	r3, #32
 8001114:	73fb      	strb	r3, [r7, #15]
  payload_size = MIN(size,max_payload_size);
 8001116:	7bfa      	ldrb	r2, [r7, #15]
 8001118:	79fb      	ldrb	r3, [r7, #7]
 800111a:	4293      	cmp	r3, r2
 800111c:	bf28      	it	cs
 800111e:	4613      	movcs	r3, r2
 8001120:	b2da      	uxtb	r2, r3
 8001122:	4b04      	ldr	r3, [pc, #16]	; (8001134 <NRF24_setPayloadSize+0x2c>)
 8001124:	701a      	strb	r2, [r3, #0]
}
 8001126:	bf00      	nop
 8001128:	3714      	adds	r7, #20
 800112a:	46bd      	mov	sp, r7
 800112c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001130:	4770      	bx	lr
 8001132:	bf00      	nop
 8001134:	2400020a 	.word	0x2400020a

08001138 <NRF24_getDynamicPayloadSize>:
{
	return payload_size;
}
//24. Get dynamic payload size, of latest packet received
uint8_t NRF24_getDynamicPayloadSize(void)
{
 8001138:	b580      	push	{r7, lr}
 800113a:	af00      	add	r7, sp, #0
	return NRF24_read_register(CMD_R_RX_PL_WID);
 800113c:	2060      	movs	r0, #96	; 0x60
 800113e:	f7ff fd75 	bl	8000c2c <NRF24_read_register>
 8001142:	4603      	mov	r3, r0
}
 8001144:	4618      	mov	r0, r3
 8001146:	bd80      	pop	{r7, pc}

08001148 <NRF24_disableDynamicPayloads>:
	NRF24_write_register(REG_DYNPD,NRF24_read_register(REG_DYNPD) | _BV(BIT_DPL_P5) | _BV(BIT_DPL_P4) | _BV(BIT_DPL_P3) | _BV(BIT_DPL_P2) | _BV(BIT_DPL_P1) | _BV(BIT_DPL_P0));
  dynamic_payloads_enabled = true;
	
}
void NRF24_disableDynamicPayloads(void)
{
 8001148:	b580      	push	{r7, lr}
 800114a:	af00      	add	r7, sp, #0
	NRF24_write_register(REG_FEATURE,NRF24_read_register(REG_FEATURE) &  ~(_BV(BIT_EN_DPL)) );
 800114c:	201d      	movs	r0, #29
 800114e:	f7ff fd6d 	bl	8000c2c <NRF24_read_register>
 8001152:	4603      	mov	r3, r0
 8001154:	f023 0304 	bic.w	r3, r3, #4
 8001158:	b2db      	uxtb	r3, r3
 800115a:	4619      	mov	r1, r3
 800115c:	201d      	movs	r0, #29
 800115e:	f7ff fdb5 	bl	8000ccc <NRF24_write_register>
	//Disable for all pipes 
	NRF24_write_register(REG_DYNPD,0);
 8001162:	2100      	movs	r1, #0
 8001164:	201c      	movs	r0, #28
 8001166:	f7ff fdb1 	bl	8000ccc <NRF24_write_register>
	dynamic_payloads_enabled = false;
 800116a:	4b02      	ldr	r3, [pc, #8]	; (8001174 <NRF24_disableDynamicPayloads+0x2c>)
 800116c:	2200      	movs	r2, #0
 800116e:	701a      	strb	r2, [r3, #0]
}
 8001170:	bf00      	nop
 8001172:	bd80      	pop	{r7, pc}
 8001174:	2400020b 	.word	0x2400020b

08001178 <NRF24_setAutoAck>:
{
	return p_variant;
}
//28. Set Auto Ack for all
void NRF24_setAutoAck(bool enable)
{
 8001178:	b580      	push	{r7, lr}
 800117a:	b082      	sub	sp, #8
 800117c:	af00      	add	r7, sp, #0
 800117e:	4603      	mov	r3, r0
 8001180:	71fb      	strb	r3, [r7, #7]
	if ( enable )
 8001182:	79fb      	ldrb	r3, [r7, #7]
 8001184:	2b00      	cmp	r3, #0
 8001186:	d004      	beq.n	8001192 <NRF24_setAutoAck+0x1a>
    NRF24_write_register(REG_EN_AA, 0x3F);
 8001188:	213f      	movs	r1, #63	; 0x3f
 800118a:	2001      	movs	r0, #1
 800118c:	f7ff fd9e 	bl	8000ccc <NRF24_write_register>
  else
    NRF24_write_register(REG_EN_AA, 0x00);
}
 8001190:	e003      	b.n	800119a <NRF24_setAutoAck+0x22>
    NRF24_write_register(REG_EN_AA, 0x00);
 8001192:	2100      	movs	r1, #0
 8001194:	2001      	movs	r0, #1
 8001196:	f7ff fd99 	bl	8000ccc <NRF24_write_register>
}
 800119a:	bf00      	nop
 800119c:	3708      	adds	r7, #8
 800119e:	46bd      	mov	sp, r7
 80011a0:	bd80      	pop	{r7, pc}

080011a2 <NRF24_setPALevel>:
    NRF24_write_register( REG_EN_AA, en_aa ) ;
  }
}
//30. Set transmit power level
void NRF24_setPALevel( rf24_pa_dbm_e level )
{
 80011a2:	b580      	push	{r7, lr}
 80011a4:	b084      	sub	sp, #16
 80011a6:	af00      	add	r7, sp, #0
 80011a8:	4603      	mov	r3, r0
 80011aa:	71fb      	strb	r3, [r7, #7]
	uint8_t setup = NRF24_read_register(REG_RF_SETUP) ;
 80011ac:	2006      	movs	r0, #6
 80011ae:	f7ff fd3d 	bl	8000c2c <NRF24_read_register>
 80011b2:	4603      	mov	r3, r0
 80011b4:	73fb      	strb	r3, [r7, #15]
  setup &= ~(_BV(RF_PWR_LOW) | _BV(RF_PWR_HIGH)) ;
 80011b6:	7bfb      	ldrb	r3, [r7, #15]
 80011b8:	f023 0306 	bic.w	r3, r3, #6
 80011bc:	73fb      	strb	r3, [r7, #15]

  // switch uses RAM (evil!)
  if ( level == RF24_PA_0dB)
 80011be:	79fb      	ldrb	r3, [r7, #7]
 80011c0:	2b03      	cmp	r3, #3
 80011c2:	d104      	bne.n	80011ce <NRF24_setPALevel+0x2c>
  {
    setup |= (_BV(RF_PWR_LOW) | _BV(RF_PWR_HIGH)) ;
 80011c4:	7bfb      	ldrb	r3, [r7, #15]
 80011c6:	f043 0306 	orr.w	r3, r3, #6
 80011ca:	73fb      	strb	r3, [r7, #15]
 80011cc:	e019      	b.n	8001202 <NRF24_setPALevel+0x60>
  }
  else if ( level == RF24_PA_m6dB )
 80011ce:	79fb      	ldrb	r3, [r7, #7]
 80011d0:	2b02      	cmp	r3, #2
 80011d2:	d104      	bne.n	80011de <NRF24_setPALevel+0x3c>
  {
    setup |= _BV(RF_PWR_HIGH) ;
 80011d4:	7bfb      	ldrb	r3, [r7, #15]
 80011d6:	f043 0304 	orr.w	r3, r3, #4
 80011da:	73fb      	strb	r3, [r7, #15]
 80011dc:	e011      	b.n	8001202 <NRF24_setPALevel+0x60>
  }
  else if ( level == RF24_PA_m12dB )
 80011de:	79fb      	ldrb	r3, [r7, #7]
 80011e0:	2b01      	cmp	r3, #1
 80011e2:	d104      	bne.n	80011ee <NRF24_setPALevel+0x4c>
  {
    setup |= _BV(RF_PWR_LOW);
 80011e4:	7bfb      	ldrb	r3, [r7, #15]
 80011e6:	f043 0302 	orr.w	r3, r3, #2
 80011ea:	73fb      	strb	r3, [r7, #15]
 80011ec:	e009      	b.n	8001202 <NRF24_setPALevel+0x60>
  }
  else if ( level == RF24_PA_m18dB )
 80011ee:	79fb      	ldrb	r3, [r7, #7]
 80011f0:	2b00      	cmp	r3, #0
 80011f2:	d006      	beq.n	8001202 <NRF24_setPALevel+0x60>
  {
    // nothing
  }
  else if ( level == RF24_PA_ERROR )
 80011f4:	79fb      	ldrb	r3, [r7, #7]
 80011f6:	2b04      	cmp	r3, #4
 80011f8:	d103      	bne.n	8001202 <NRF24_setPALevel+0x60>
  {
    // On error, go to maximum PA
    setup |= (_BV(RF_PWR_LOW) | _BV(RF_PWR_HIGH)) ;
 80011fa:	7bfb      	ldrb	r3, [r7, #15]
 80011fc:	f043 0306 	orr.w	r3, r3, #6
 8001200:	73fb      	strb	r3, [r7, #15]
  }

  NRF24_write_register( REG_RF_SETUP, setup ) ;
 8001202:	7bfb      	ldrb	r3, [r7, #15]
 8001204:	4619      	mov	r1, r3
 8001206:	2006      	movs	r0, #6
 8001208:	f7ff fd60 	bl	8000ccc <NRF24_write_register>
}
 800120c:	bf00      	nop
 800120e:	3710      	adds	r7, #16
 8001210:	46bd      	mov	sp, r7
 8001212:	bd80      	pop	{r7, pc}

08001214 <NRF24_setDataRate>:

  return result ;
}
//32. Set data rate (250 Kbps, 1Mbps, 2Mbps)
bool NRF24_setDataRate(rf24_datarate_e speed)
{
 8001214:	b580      	push	{r7, lr}
 8001216:	b084      	sub	sp, #16
 8001218:	af00      	add	r7, sp, #0
 800121a:	4603      	mov	r3, r0
 800121c:	71fb      	strb	r3, [r7, #7]
	bool result = false;
 800121e:	2300      	movs	r3, #0
 8001220:	73fb      	strb	r3, [r7, #15]
  uint8_t setup = NRF24_read_register(REG_RF_SETUP) ;
 8001222:	2006      	movs	r0, #6
 8001224:	f7ff fd02 	bl	8000c2c <NRF24_read_register>
 8001228:	4603      	mov	r3, r0
 800122a:	73bb      	strb	r3, [r7, #14]

  // HIGH and LOW '00' is 1Mbs - our default
  wide_band = false ;
 800122c:	4b1b      	ldr	r3, [pc, #108]	; (800129c <NRF24_setDataRate+0x88>)
 800122e:	2200      	movs	r2, #0
 8001230:	701a      	strb	r2, [r3, #0]
  setup &= ~(_BV(RF_DR_LOW) | _BV(RF_DR_HIGH)) ;
 8001232:	7bbb      	ldrb	r3, [r7, #14]
 8001234:	f023 0328 	bic.w	r3, r3, #40	; 0x28
 8001238:	73bb      	strb	r3, [r7, #14]
  if( speed == RF24_250KBPS )
 800123a:	79fb      	ldrb	r3, [r7, #7]
 800123c:	2b02      	cmp	r3, #2
 800123e:	d107      	bne.n	8001250 <NRF24_setDataRate+0x3c>
  {
    // Must set the RF_DR_LOW to 1; RF_DR_HIGH (used to be RF_DR) is already 0
    // Making it '10'.
    wide_band = false ;
 8001240:	4b16      	ldr	r3, [pc, #88]	; (800129c <NRF24_setDataRate+0x88>)
 8001242:	2200      	movs	r2, #0
 8001244:	701a      	strb	r2, [r3, #0]
    setup |= _BV( RF_DR_LOW ) ;
 8001246:	7bbb      	ldrb	r3, [r7, #14]
 8001248:	f043 0320 	orr.w	r3, r3, #32
 800124c:	73bb      	strb	r3, [r7, #14]
 800124e:	e00d      	b.n	800126c <NRF24_setDataRate+0x58>
  }
  else
  {
    // Set 2Mbs, RF_DR (RF_DR_HIGH) is set 1
    // Making it '01'
    if ( speed == RF24_2MBPS )
 8001250:	79fb      	ldrb	r3, [r7, #7]
 8001252:	2b01      	cmp	r3, #1
 8001254:	d107      	bne.n	8001266 <NRF24_setDataRate+0x52>
    {
      wide_band = true ;
 8001256:	4b11      	ldr	r3, [pc, #68]	; (800129c <NRF24_setDataRate+0x88>)
 8001258:	2201      	movs	r2, #1
 800125a:	701a      	strb	r2, [r3, #0]
      setup |= _BV(RF_DR_HIGH);
 800125c:	7bbb      	ldrb	r3, [r7, #14]
 800125e:	f043 0308 	orr.w	r3, r3, #8
 8001262:	73bb      	strb	r3, [r7, #14]
 8001264:	e002      	b.n	800126c <NRF24_setDataRate+0x58>
    }
    else
    {
      // 1Mbs
      wide_band = false ;
 8001266:	4b0d      	ldr	r3, [pc, #52]	; (800129c <NRF24_setDataRate+0x88>)
 8001268:	2200      	movs	r2, #0
 800126a:	701a      	strb	r2, [r3, #0]
    }
  }
  NRF24_write_register(REG_RF_SETUP,setup);
 800126c:	7bbb      	ldrb	r3, [r7, #14]
 800126e:	4619      	mov	r1, r3
 8001270:	2006      	movs	r0, #6
 8001272:	f7ff fd2b 	bl	8000ccc <NRF24_write_register>

  // Verify our result
  if ( NRF24_read_register(REG_RF_SETUP) == setup )
 8001276:	2006      	movs	r0, #6
 8001278:	f7ff fcd8 	bl	8000c2c <NRF24_read_register>
 800127c:	4603      	mov	r3, r0
 800127e:	461a      	mov	r2, r3
 8001280:	7bbb      	ldrb	r3, [r7, #14]
 8001282:	4293      	cmp	r3, r2
 8001284:	d102      	bne.n	800128c <NRF24_setDataRate+0x78>
  {
    result = true;
 8001286:	2301      	movs	r3, #1
 8001288:	73fb      	strb	r3, [r7, #15]
 800128a:	e002      	b.n	8001292 <NRF24_setDataRate+0x7e>
  }
  else
  {
    wide_band = false;
 800128c:	4b03      	ldr	r3, [pc, #12]	; (800129c <NRF24_setDataRate+0x88>)
 800128e:	2200      	movs	r2, #0
 8001290:	701a      	strb	r2, [r3, #0]
  }

  return result;
 8001292:	7bfb      	ldrb	r3, [r7, #15]
}
 8001294:	4618      	mov	r0, r3
 8001296:	3710      	adds	r7, #16
 8001298:	46bd      	mov	sp, r7
 800129a:	bd80      	pop	{r7, pc}
 800129c:	2400020c 	.word	0x2400020c

080012a0 <NRF24_setCRCLength>:
  }
  return result ;
}
//34. Set crc length (disable, 8-bits or 16-bits)
void NRF24_setCRCLength(rf24_crclength_e length)
{
 80012a0:	b580      	push	{r7, lr}
 80012a2:	b084      	sub	sp, #16
 80012a4:	af00      	add	r7, sp, #0
 80012a6:	4603      	mov	r3, r0
 80012a8:	71fb      	strb	r3, [r7, #7]
	uint8_t config = NRF24_read_register(REG_CONFIG) & ~( _BV(BIT_CRCO) | _BV(BIT_EN_CRC)) ;
 80012aa:	2000      	movs	r0, #0
 80012ac:	f7ff fcbe 	bl	8000c2c <NRF24_read_register>
 80012b0:	4603      	mov	r3, r0
 80012b2:	f023 030c 	bic.w	r3, r3, #12
 80012b6:	73fb      	strb	r3, [r7, #15]
  
  // switch uses RAM
  if ( length == RF24_CRC_DISABLED )
 80012b8:	79fb      	ldrb	r3, [r7, #7]
 80012ba:	2b00      	cmp	r3, #0
 80012bc:	d00f      	beq.n	80012de <NRF24_setCRCLength+0x3e>
  {
    // Do nothing, we turned it off above. 
  }
  else if ( length == RF24_CRC_8 )
 80012be:	79fb      	ldrb	r3, [r7, #7]
 80012c0:	2b01      	cmp	r3, #1
 80012c2:	d104      	bne.n	80012ce <NRF24_setCRCLength+0x2e>
  {
    config |= _BV(BIT_EN_CRC);
 80012c4:	7bfb      	ldrb	r3, [r7, #15]
 80012c6:	f043 0308 	orr.w	r3, r3, #8
 80012ca:	73fb      	strb	r3, [r7, #15]
 80012cc:	e007      	b.n	80012de <NRF24_setCRCLength+0x3e>
  }
  else
  {
    config |= _BV(BIT_EN_CRC);
 80012ce:	7bfb      	ldrb	r3, [r7, #15]
 80012d0:	f043 0308 	orr.w	r3, r3, #8
 80012d4:	73fb      	strb	r3, [r7, #15]
    config |= _BV( BIT_CRCO );
 80012d6:	7bfb      	ldrb	r3, [r7, #15]
 80012d8:	f043 0304 	orr.w	r3, r3, #4
 80012dc:	73fb      	strb	r3, [r7, #15]
  }
  NRF24_write_register( REG_CONFIG, config );
 80012de:	7bfb      	ldrb	r3, [r7, #15]
 80012e0:	4619      	mov	r1, r3
 80012e2:	2000      	movs	r0, #0
 80012e4:	f7ff fcf2 	bl	8000ccc <NRF24_write_register>
}
 80012e8:	bf00      	nop
 80012ea:	3710      	adds	r7, #16
 80012ec:	46bd      	mov	sp, r7
 80012ee:	bd80      	pop	{r7, pc}

080012f0 <NRF24_powerDown>:
{
	NRF24_write_register(REG_CONFIG,NRF24_read_register(REG_CONFIG) | _BV(BIT_PWR_UP));
}
//38. power down
void NRF24_powerDown(void)
{
 80012f0:	b580      	push	{r7, lr}
 80012f2:	af00      	add	r7, sp, #0
	NRF24_write_register(REG_CONFIG,NRF24_read_register(REG_CONFIG) & ~_BV(BIT_PWR_UP));
 80012f4:	2000      	movs	r0, #0
 80012f6:	f7ff fc99 	bl	8000c2c <NRF24_read_register>
 80012fa:	4603      	mov	r3, r0
 80012fc:	f023 0302 	bic.w	r3, r3, #2
 8001300:	b2db      	uxtb	r3, r3
 8001302:	4619      	mov	r1, r3
 8001304:	2000      	movs	r0, #0
 8001306:	f7ff fce1 	bl	8000ccc <NRF24_write_register>
}
 800130a:	bf00      	nop
 800130c:	bd80      	pop	{r7, pc}

0800130e <NRF24_availablePipe>:
//39. Check if data are available and on which pipe (Use this for multiple rx pipes)
bool NRF24_availablePipe(uint8_t* pipe_num)
{
 800130e:	b580      	push	{r7, lr}
 8001310:	b084      	sub	sp, #16
 8001312:	af00      	add	r7, sp, #0
 8001314:	6078      	str	r0, [r7, #4]
	uint8_t status = NRF24_get_status();
 8001316:	f7ff fd55 	bl	8000dc4 <NRF24_get_status>
 800131a:	4603      	mov	r3, r0
 800131c:	73fb      	strb	r3, [r7, #15]

  bool result = ( status & _BV(BIT_RX_DR) );
 800131e:	7bfb      	ldrb	r3, [r7, #15]
 8001320:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001324:	2b00      	cmp	r3, #0
 8001326:	bf14      	ite	ne
 8001328:	2301      	movne	r3, #1
 800132a:	2300      	moveq	r3, #0
 800132c:	73bb      	strb	r3, [r7, #14]

  if (result)
 800132e:	7bbb      	ldrb	r3, [r7, #14]
 8001330:	2b00      	cmp	r3, #0
 8001332:	d017      	beq.n	8001364 <NRF24_availablePipe+0x56>
  {
    // If the caller wants the pipe number, include that
    if ( pipe_num )
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	2b00      	cmp	r3, #0
 8001338:	d007      	beq.n	800134a <NRF24_availablePipe+0x3c>
      *pipe_num = ( status >> BIT_RX_P_NO ) & 0x7;
 800133a:	7bfb      	ldrb	r3, [r7, #15]
 800133c:	085b      	lsrs	r3, r3, #1
 800133e:	b2db      	uxtb	r3, r3
 8001340:	f003 0307 	and.w	r3, r3, #7
 8001344:	b2da      	uxtb	r2, r3
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	701a      	strb	r2, [r3, #0]

    // Clear the status bit
    NRF24_write_register(REG_STATUS,_BV(BIT_RX_DR) );
 800134a:	2140      	movs	r1, #64	; 0x40
 800134c:	2007      	movs	r0, #7
 800134e:	f7ff fcbd 	bl	8000ccc <NRF24_write_register>

    // Handle ack payload receipt
    if ( status & _BV(BIT_TX_DS) )
 8001352:	7bfb      	ldrb	r3, [r7, #15]
 8001354:	f003 0320 	and.w	r3, r3, #32
 8001358:	2b00      	cmp	r3, #0
 800135a:	d003      	beq.n	8001364 <NRF24_availablePipe+0x56>
    {
      NRF24_write_register(REG_STATUS,_BV(BIT_TX_DS));
 800135c:	2120      	movs	r1, #32
 800135e:	2007      	movs	r0, #7
 8001360:	f7ff fcb4 	bl	8000ccc <NRF24_write_register>
    }
  }
  return result;
 8001364:	7bbb      	ldrb	r3, [r7, #14]
}
 8001366:	4618      	mov	r0, r3
 8001368:	3710      	adds	r7, #16
 800136a:	46bd      	mov	sp, r7
 800136c:	bd80      	pop	{r7, pc}

0800136e <NRF24_startWrite>:
//40. Start write (for IRQ mode)
void NRF24_startWrite( const void* buf, uint8_t len )
{
 800136e:	b580      	push	{r7, lr}
 8001370:	b082      	sub	sp, #8
 8001372:	af00      	add	r7, sp, #0
 8001374:	6078      	str	r0, [r7, #4]
 8001376:	460b      	mov	r3, r1
 8001378:	70fb      	strb	r3, [r7, #3]
  // Transmitter power-up
  NRF24_ce(0);
 800137a:	2000      	movs	r0, #0
 800137c:	f7ff fc36 	bl	8000bec <NRF24_ce>
  NRF24_write_register(REG_CONFIG, ( NRF24_read_register(REG_CONFIG) | _BV(BIT_PWR_UP) ) & ~_BV(BIT_PRIM_RX) );
 8001380:	2000      	movs	r0, #0
 8001382:	f7ff fc53 	bl	8000c2c <NRF24_read_register>
 8001386:	4603      	mov	r3, r0
 8001388:	f043 0302 	orr.w	r3, r3, #2
 800138c:	b2db      	uxtb	r3, r3
 800138e:	f023 0301 	bic.w	r3, r3, #1
 8001392:	b2db      	uxtb	r3, r3
 8001394:	4619      	mov	r1, r3
 8001396:	2000      	movs	r0, #0
 8001398:	f7ff fc98 	bl	8000ccc <NRF24_write_register>
  NRF24_ce(1);
 800139c:	2001      	movs	r0, #1
 800139e:	f7ff fc25 	bl	8000bec <NRF24_ce>
  NRF24_DelayMicroSeconds(150);
 80013a2:	2096      	movs	r0, #150	; 0x96
 80013a4:	f7ff fbe2 	bl	8000b6c <NRF24_DelayMicroSeconds>

  // Send the payload
  NRF24_write_payload( buf, len );
 80013a8:	78fb      	ldrb	r3, [r7, #3]
 80013aa:	4619      	mov	r1, r3
 80013ac:	6878      	ldr	r0, [r7, #4]
 80013ae:	f7ff fcd7 	bl	8000d60 <NRF24_write_payload>

  // Enable Tx for 15usec
  NRF24_ce(1);
 80013b2:	2001      	movs	r0, #1
 80013b4:	f7ff fc1a 	bl	8000bec <NRF24_ce>
  NRF24_DelayMicroSeconds(15);
 80013b8:	200f      	movs	r0, #15
 80013ba:	f7ff fbd7 	bl	8000b6c <NRF24_DelayMicroSeconds>
  NRF24_ce(0);
 80013be:	2000      	movs	r0, #0
 80013c0:	f7ff fc14 	bl	8000bec <NRF24_ce>
}
 80013c4:	bf00      	nop
 80013c6:	3708      	adds	r7, #8
 80013c8:	46bd      	mov	sp, r7
 80013ca:	bd80      	pop	{r7, pc}

080013cc <NRF24_whatHappened>:
  ack_payload_available = false;
  return result;
}
//43. Check interrupt flags
void NRF24_whatHappened(bool *tx_ok,bool *tx_fail,bool *rx_ready)
{
 80013cc:	b580      	push	{r7, lr}
 80013ce:	b086      	sub	sp, #24
 80013d0:	af00      	add	r7, sp, #0
 80013d2:	60f8      	str	r0, [r7, #12]
 80013d4:	60b9      	str	r1, [r7, #8]
 80013d6:	607a      	str	r2, [r7, #4]
	uint8_t status = NRF24_get_status();
 80013d8:	f7ff fcf4 	bl	8000dc4 <NRF24_get_status>
 80013dc:	4603      	mov	r3, r0
 80013de:	75fb      	strb	r3, [r7, #23]
	*tx_ok = 0;
 80013e0:	68fb      	ldr	r3, [r7, #12]
 80013e2:	2200      	movs	r2, #0
 80013e4:	701a      	strb	r2, [r3, #0]
	NRF24_write_register(REG_STATUS,_BV(BIT_RX_DR) | _BV(BIT_TX_DS) | _BV(BIT_MAX_RT) );
 80013e6:	2170      	movs	r1, #112	; 0x70
 80013e8:	2007      	movs	r0, #7
 80013ea:	f7ff fc6f 	bl	8000ccc <NRF24_write_register>
  // Report to the user what happened
  *tx_ok = status & _BV(BIT_TX_DS);
 80013ee:	7dfb      	ldrb	r3, [r7, #23]
 80013f0:	f003 0320 	and.w	r3, r3, #32
 80013f4:	2b00      	cmp	r3, #0
 80013f6:	bf14      	ite	ne
 80013f8:	2301      	movne	r3, #1
 80013fa:	2300      	moveq	r3, #0
 80013fc:	b2da      	uxtb	r2, r3
 80013fe:	68fb      	ldr	r3, [r7, #12]
 8001400:	701a      	strb	r2, [r3, #0]
  *tx_fail = status & _BV(BIT_MAX_RT);
 8001402:	7dfb      	ldrb	r3, [r7, #23]
 8001404:	f003 0310 	and.w	r3, r3, #16
 8001408:	2b00      	cmp	r3, #0
 800140a:	bf14      	ite	ne
 800140c:	2301      	movne	r3, #1
 800140e:	2300      	moveq	r3, #0
 8001410:	b2da      	uxtb	r2, r3
 8001412:	68bb      	ldr	r3, [r7, #8]
 8001414:	701a      	strb	r2, [r3, #0]
  *rx_ready = status & _BV(BIT_RX_DR);
 8001416:	7dfb      	ldrb	r3, [r7, #23]
 8001418:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800141c:	2b00      	cmp	r3, #0
 800141e:	bf14      	ite	ne
 8001420:	2301      	movne	r3, #1
 8001422:	2300      	moveq	r3, #0
 8001424:	b2da      	uxtb	r2, r3
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	701a      	strb	r2, [r3, #0]
}
 800142a:	bf00      	nop
 800142c:	3718      	adds	r7, #24
 800142e:	46bd      	mov	sp, r7
 8001430:	bd80      	pop	{r7, pc}

08001432 <NRF24_resetStatus>:
	return NRF24_read_register(REG_RPD) & 1;
}

//46. Reset Status
void NRF24_resetStatus(void)
{
 8001432:	b580      	push	{r7, lr}
 8001434:	af00      	add	r7, sp, #0
	NRF24_write_register(REG_STATUS,_BV(BIT_RX_DR) | _BV(BIT_TX_DS) | _BV(BIT_MAX_RT) );
 8001436:	2170      	movs	r1, #112	; 0x70
 8001438:	2007      	movs	r0, #7
 800143a:	f7ff fc47 	bl	8000ccc <NRF24_write_register>
}
 800143e:	bf00      	nop
 8001440:	bd80      	pop	{r7, pc}
	...

08001444 <NRF24_ACTIVATE_cmd>:

//47. ACTIVATE cmd
void NRF24_ACTIVATE_cmd(void)
{
 8001444:	b580      	push	{r7, lr}
 8001446:	b082      	sub	sp, #8
 8001448:	af00      	add	r7, sp, #0
	uint8_t cmdRxBuf[2];
	//Read data from Rx payload buffer
	NRF24_csn(0);
 800144a:	2000      	movs	r0, #0
 800144c:	f7ff fbae 	bl	8000bac <NRF24_csn>
	cmdRxBuf[0] = CMD_ACTIVATE;
 8001450:	2350      	movs	r3, #80	; 0x50
 8001452:	713b      	strb	r3, [r7, #4]
	cmdRxBuf[1] = 0x73;
 8001454:	2373      	movs	r3, #115	; 0x73
 8001456:	717b      	strb	r3, [r7, #5]
	HAL_SPI_Transmit(&nrf24_hspi, cmdRxBuf, 2, 100);
 8001458:	1d39      	adds	r1, r7, #4
 800145a:	2364      	movs	r3, #100	; 0x64
 800145c:	2202      	movs	r2, #2
 800145e:	4805      	ldr	r0, [pc, #20]	; (8001474 <NRF24_ACTIVATE_cmd+0x30>)
 8001460:	f00d fc0c 	bl	800ec7c <HAL_SPI_Transmit>
	NRF24_csn(1);
 8001464:	2001      	movs	r0, #1
 8001466:	f7ff fba1 	bl	8000bac <NRF24_csn>
}
 800146a:	bf00      	nop
 800146c:	3708      	adds	r7, #8
 800146e:	46bd      	mov	sp, r7
 8001470:	bd80      	pop	{r7, pc}
 8001472:	bf00      	nop
 8001474:	24000218 	.word	0x24000218

08001478 <printRadioSettings>:
{
	return ack_payload_length;
}

void printRadioSettings(void)
{
 8001478:	b5f0      	push	{r4, r5, r6, r7, lr}
 800147a:	b0a1      	sub	sp, #132	; 0x84
 800147c:	af04      	add	r7, sp, #16
	uint8_t reg8Val;
	char uartTxBuf[100];
	sprintf(uartTxBuf, "\r\n**********************************************\r\n");
 800147e:	f107 0308 	add.w	r3, r7, #8
 8001482:	4ab6      	ldr	r2, [pc, #728]	; (800175c <printRadioSettings+0x2e4>)
 8001484:	461c      	mov	r4, r3
 8001486:	4615      	mov	r5, r2
 8001488:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800148a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800148c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800148e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001490:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001492:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001494:	682b      	ldr	r3, [r5, #0]
 8001496:	461a      	mov	r2, r3
 8001498:	8022      	strh	r2, [r4, #0]
 800149a:	3402      	adds	r4, #2
 800149c:	0c1b      	lsrs	r3, r3, #16
 800149e:	7023      	strb	r3, [r4, #0]
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 80014a0:	f107 0308 	add.w	r3, r7, #8
 80014a4:	4618      	mov	r0, r3
 80014a6:	f7fe ff1b 	bl	80002e0 <strlen>
 80014aa:	4603      	mov	r3, r0
 80014ac:	b29a      	uxth	r2, r3
 80014ae:	f107 0108 	add.w	r1, r7, #8
 80014b2:	230a      	movs	r3, #10
 80014b4:	48aa      	ldr	r0, [pc, #680]	; (8001760 <printRadioSettings+0x2e8>)
 80014b6:	f00e fbea 	bl	800fc8e <HAL_UART_Transmit>
	//a) Get CRC settings - Config Register
	reg8Val = NRF24_read_register(0x00);
 80014ba:	2000      	movs	r0, #0
 80014bc:	f7ff fbb6 	bl	8000c2c <NRF24_read_register>
 80014c0:	4603      	mov	r3, r0
 80014c2:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	if(reg8Val & (1 << 3))
 80014c6:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80014ca:	f003 0308 	and.w	r3, r3, #8
 80014ce:	2b00      	cmp	r3, #0
 80014d0:	d020      	beq.n	8001514 <printRadioSettings+0x9c>
	{
		if(reg8Val & (1 << 2)) sprintf(uartTxBuf, "CRC:\r\n		Enabled, 2 Bytes \r\n");
 80014d2:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80014d6:	f003 0304 	and.w	r3, r3, #4
 80014da:	2b00      	cmp	r3, #0
 80014dc:	d00b      	beq.n	80014f6 <printRadioSettings+0x7e>
 80014de:	f107 0308 	add.w	r3, r7, #8
 80014e2:	4aa0      	ldr	r2, [pc, #640]	; (8001764 <printRadioSettings+0x2ec>)
 80014e4:	461c      	mov	r4, r3
 80014e6:	4615      	mov	r5, r2
 80014e8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80014ea:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80014ec:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80014f0:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80014f4:	e017      	b.n	8001526 <printRadioSettings+0xae>
		else sprintf(uartTxBuf, "CRC:\r\n		Enabled, 1 Byte \r\n");	
 80014f6:	f107 0308 	add.w	r3, r7, #8
 80014fa:	4a9b      	ldr	r2, [pc, #620]	; (8001768 <printRadioSettings+0x2f0>)
 80014fc:	461c      	mov	r4, r3
 80014fe:	4615      	mov	r5, r2
 8001500:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001502:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001504:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001508:	c403      	stmia	r4!, {r0, r1}
 800150a:	8022      	strh	r2, [r4, #0]
 800150c:	3402      	adds	r4, #2
 800150e:	0c13      	lsrs	r3, r2, #16
 8001510:	7023      	strb	r3, [r4, #0]
 8001512:	e008      	b.n	8001526 <printRadioSettings+0xae>
	}
	else
	{
		sprintf(uartTxBuf, "CRC:\r\n		Disabled \r\n");
 8001514:	f107 0308 	add.w	r3, r7, #8
 8001518:	4a94      	ldr	r2, [pc, #592]	; (800176c <printRadioSettings+0x2f4>)
 800151a:	461c      	mov	r4, r3
 800151c:	4615      	mov	r5, r2
 800151e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001520:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001522:	682b      	ldr	r3, [r5, #0]
 8001524:	6023      	str	r3, [r4, #0]
	}
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8001526:	f107 0308 	add.w	r3, r7, #8
 800152a:	4618      	mov	r0, r3
 800152c:	f7fe fed8 	bl	80002e0 <strlen>
 8001530:	4603      	mov	r3, r0
 8001532:	b29a      	uxth	r2, r3
 8001534:	f107 0108 	add.w	r1, r7, #8
 8001538:	230a      	movs	r3, #10
 800153a:	4889      	ldr	r0, [pc, #548]	; (8001760 <printRadioSettings+0x2e8>)
 800153c:	f00e fba7 	bl	800fc8e <HAL_UART_Transmit>
	//b) AutoAck on pipes
	reg8Val = NRF24_read_register(0x01);
 8001540:	2001      	movs	r0, #1
 8001542:	f7ff fb73 	bl	8000c2c <NRF24_read_register>
 8001546:	4603      	mov	r3, r0
 8001548:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "ENAA:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 800154c:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001550:	f003 0301 	and.w	r3, r3, #1
	sprintf(uartTxBuf, "ENAA:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8001554:	2b00      	cmp	r3, #0
 8001556:	bfcc      	ite	gt
 8001558:	2301      	movgt	r3, #1
 800155a:	2300      	movle	r3, #0
 800155c:	b2db      	uxtb	r3, r3
 800155e:	461d      	mov	r5, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8001560:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001564:	f003 0302 	and.w	r3, r3, #2
	sprintf(uartTxBuf, "ENAA:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8001568:	2b00      	cmp	r3, #0
 800156a:	bfcc      	ite	gt
 800156c:	2301      	movgt	r3, #1
 800156e:	2300      	movle	r3, #0
 8001570:	b2db      	uxtb	r3, r3
 8001572:	461e      	mov	r6, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8001574:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001578:	f003 0304 	and.w	r3, r3, #4
	sprintf(uartTxBuf, "ENAA:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 800157c:	2b00      	cmp	r3, #0
 800157e:	bfcc      	ite	gt
 8001580:	2301      	movgt	r3, #1
 8001582:	2300      	movle	r3, #0
 8001584:	b2db      	uxtb	r3, r3
 8001586:	461a      	mov	r2, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8001588:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800158c:	f003 0308 	and.w	r3, r3, #8
	sprintf(uartTxBuf, "ENAA:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8001590:	2b00      	cmp	r3, #0
 8001592:	bfcc      	ite	gt
 8001594:	2301      	movgt	r3, #1
 8001596:	2300      	movle	r3, #0
 8001598:	b2db      	uxtb	r3, r3
 800159a:	4619      	mov	r1, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 800159c:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80015a0:	f003 0310 	and.w	r3, r3, #16
	sprintf(uartTxBuf, "ENAA:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 80015a4:	2b00      	cmp	r3, #0
 80015a6:	bfcc      	ite	gt
 80015a8:	2301      	movgt	r3, #1
 80015aa:	2300      	movle	r3, #0
 80015ac:	b2db      	uxtb	r3, r3
 80015ae:	461c      	mov	r4, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 80015b0:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80015b4:	f003 0320 	and.w	r3, r3, #32
	sprintf(uartTxBuf, "ENAA:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 80015b8:	2b00      	cmp	r3, #0
 80015ba:	bfcc      	ite	gt
 80015bc:	2301      	movgt	r3, #1
 80015be:	2300      	movle	r3, #0
 80015c0:	b2db      	uxtb	r3, r3
 80015c2:	f107 0008 	add.w	r0, r7, #8
 80015c6:	9303      	str	r3, [sp, #12]
 80015c8:	9402      	str	r4, [sp, #8]
 80015ca:	9101      	str	r1, [sp, #4]
 80015cc:	9200      	str	r2, [sp, #0]
 80015ce:	4633      	mov	r3, r6
 80015d0:	462a      	mov	r2, r5
 80015d2:	4967      	ldr	r1, [pc, #412]	; (8001770 <printRadioSettings+0x2f8>)
 80015d4:	f018 f93c 	bl	8019850 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 80015d8:	f107 0308 	add.w	r3, r7, #8
 80015dc:	4618      	mov	r0, r3
 80015de:	f7fe fe7f 	bl	80002e0 <strlen>
 80015e2:	4603      	mov	r3, r0
 80015e4:	b29a      	uxth	r2, r3
 80015e6:	f107 0108 	add.w	r1, r7, #8
 80015ea:	230a      	movs	r3, #10
 80015ec:	485c      	ldr	r0, [pc, #368]	; (8001760 <printRadioSettings+0x2e8>)
 80015ee:	f00e fb4e 	bl	800fc8e <HAL_UART_Transmit>
	//c) Enabled Rx addresses
	reg8Val = NRF24_read_register(0x02);
 80015f2:	2002      	movs	r0, #2
 80015f4:	f7ff fb1a 	bl	8000c2c <NRF24_read_register>
 80015f8:	4603      	mov	r3, r0
 80015fa:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "EN_RXADDR:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 80015fe:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001602:	f003 0301 	and.w	r3, r3, #1
	sprintf(uartTxBuf, "EN_RXADDR:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8001606:	2b00      	cmp	r3, #0
 8001608:	bfcc      	ite	gt
 800160a:	2301      	movgt	r3, #1
 800160c:	2300      	movle	r3, #0
 800160e:	b2db      	uxtb	r3, r3
 8001610:	461d      	mov	r5, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8001612:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001616:	f003 0302 	and.w	r3, r3, #2
	sprintf(uartTxBuf, "EN_RXADDR:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 800161a:	2b00      	cmp	r3, #0
 800161c:	bfcc      	ite	gt
 800161e:	2301      	movgt	r3, #1
 8001620:	2300      	movle	r3, #0
 8001622:	b2db      	uxtb	r3, r3
 8001624:	461e      	mov	r6, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8001626:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800162a:	f003 0304 	and.w	r3, r3, #4
	sprintf(uartTxBuf, "EN_RXADDR:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 800162e:	2b00      	cmp	r3, #0
 8001630:	bfcc      	ite	gt
 8001632:	2301      	movgt	r3, #1
 8001634:	2300      	movle	r3, #0
 8001636:	b2db      	uxtb	r3, r3
 8001638:	461a      	mov	r2, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 800163a:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800163e:	f003 0308 	and.w	r3, r3, #8
	sprintf(uartTxBuf, "EN_RXADDR:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8001642:	2b00      	cmp	r3, #0
 8001644:	bfcc      	ite	gt
 8001646:	2301      	movgt	r3, #1
 8001648:	2300      	movle	r3, #0
 800164a:	b2db      	uxtb	r3, r3
 800164c:	4619      	mov	r1, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 800164e:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001652:	f003 0310 	and.w	r3, r3, #16
	sprintf(uartTxBuf, "EN_RXADDR:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8001656:	2b00      	cmp	r3, #0
 8001658:	bfcc      	ite	gt
 800165a:	2301      	movgt	r3, #1
 800165c:	2300      	movle	r3, #0
 800165e:	b2db      	uxtb	r3, r3
 8001660:	461c      	mov	r4, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8001662:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001666:	f003 0320 	and.w	r3, r3, #32
	sprintf(uartTxBuf, "EN_RXADDR:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 800166a:	2b00      	cmp	r3, #0
 800166c:	bfcc      	ite	gt
 800166e:	2301      	movgt	r3, #1
 8001670:	2300      	movle	r3, #0
 8001672:	b2db      	uxtb	r3, r3
 8001674:	f107 0008 	add.w	r0, r7, #8
 8001678:	9303      	str	r3, [sp, #12]
 800167a:	9402      	str	r4, [sp, #8]
 800167c:	9101      	str	r1, [sp, #4]
 800167e:	9200      	str	r2, [sp, #0]
 8001680:	4633      	mov	r3, r6
 8001682:	462a      	mov	r2, r5
 8001684:	493b      	ldr	r1, [pc, #236]	; (8001774 <printRadioSettings+0x2fc>)
 8001686:	f018 f8e3 	bl	8019850 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 800168a:	f107 0308 	add.w	r3, r7, #8
 800168e:	4618      	mov	r0, r3
 8001690:	f7fe fe26 	bl	80002e0 <strlen>
 8001694:	4603      	mov	r3, r0
 8001696:	b29a      	uxth	r2, r3
 8001698:	f107 0108 	add.w	r1, r7, #8
 800169c:	230a      	movs	r3, #10
 800169e:	4830      	ldr	r0, [pc, #192]	; (8001760 <printRadioSettings+0x2e8>)
 80016a0:	f00e faf5 	bl	800fc8e <HAL_UART_Transmit>
	//d) Address width
	reg8Val = NRF24_read_register(0x03)&0x03;
 80016a4:	2003      	movs	r0, #3
 80016a6:	f7ff fac1 	bl	8000c2c <NRF24_read_register>
 80016aa:	4603      	mov	r3, r0
 80016ac:	f003 0303 	and.w	r3, r3, #3
 80016b0:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	reg8Val +=2;
 80016b4:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80016b8:	3302      	adds	r3, #2
 80016ba:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "SETUP_AW:\r\n		%d bytes \r\n", reg8Val);
 80016be:	f897 206f 	ldrb.w	r2, [r7, #111]	; 0x6f
 80016c2:	f107 0308 	add.w	r3, r7, #8
 80016c6:	492c      	ldr	r1, [pc, #176]	; (8001778 <printRadioSettings+0x300>)
 80016c8:	4618      	mov	r0, r3
 80016ca:	f018 f8c1 	bl	8019850 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 80016ce:	f107 0308 	add.w	r3, r7, #8
 80016d2:	4618      	mov	r0, r3
 80016d4:	f7fe fe04 	bl	80002e0 <strlen>
 80016d8:	4603      	mov	r3, r0
 80016da:	b29a      	uxth	r2, r3
 80016dc:	f107 0108 	add.w	r1, r7, #8
 80016e0:	230a      	movs	r3, #10
 80016e2:	481f      	ldr	r0, [pc, #124]	; (8001760 <printRadioSettings+0x2e8>)
 80016e4:	f00e fad3 	bl	800fc8e <HAL_UART_Transmit>
	//e) RF channel
	reg8Val = NRF24_read_register(0x05);
 80016e8:	2005      	movs	r0, #5
 80016ea:	f7ff fa9f 	bl	8000c2c <NRF24_read_register>
 80016ee:	4603      	mov	r3, r0
 80016f0:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "RF_CH:\r\n		%d CH \r\n", reg8Val&0x7F);
 80016f4:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80016f8:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80016fc:	f107 0308 	add.w	r3, r7, #8
 8001700:	491e      	ldr	r1, [pc, #120]	; (800177c <printRadioSettings+0x304>)
 8001702:	4618      	mov	r0, r3
 8001704:	f018 f8a4 	bl	8019850 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8001708:	f107 0308 	add.w	r3, r7, #8
 800170c:	4618      	mov	r0, r3
 800170e:	f7fe fde7 	bl	80002e0 <strlen>
 8001712:	4603      	mov	r3, r0
 8001714:	b29a      	uxth	r2, r3
 8001716:	f107 0108 	add.w	r1, r7, #8
 800171a:	230a      	movs	r3, #10
 800171c:	4810      	ldr	r0, [pc, #64]	; (8001760 <printRadioSettings+0x2e8>)
 800171e:	f00e fab6 	bl	800fc8e <HAL_UART_Transmit>
	//f) Data rate & RF_PWR
	reg8Val = NRF24_read_register(0x06);
 8001722:	2006      	movs	r0, #6
 8001724:	f7ff fa82 	bl	8000c2c <NRF24_read_register>
 8001728:	4603      	mov	r3, r0
 800172a:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	if(reg8Val & (1 << 3)) sprintf(uartTxBuf, "Data Rate:\r\n		2Mbps \r\n");
 800172e:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001732:	f003 0308 	and.w	r3, r3, #8
 8001736:	2b00      	cmp	r3, #0
 8001738:	d024      	beq.n	8001784 <printRadioSettings+0x30c>
 800173a:	f107 0308 	add.w	r3, r7, #8
 800173e:	4a10      	ldr	r2, [pc, #64]	; (8001780 <printRadioSettings+0x308>)
 8001740:	461c      	mov	r4, r3
 8001742:	4615      	mov	r5, r2
 8001744:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001746:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001748:	e895 0003 	ldmia.w	r5, {r0, r1}
 800174c:	6020      	str	r0, [r4, #0]
 800174e:	3404      	adds	r4, #4
 8001750:	8021      	strh	r1, [r4, #0]
 8001752:	3402      	adds	r4, #2
 8001754:	0c0b      	lsrs	r3, r1, #16
 8001756:	7023      	strb	r3, [r4, #0]
 8001758:	e023      	b.n	80017a2 <printRadioSettings+0x32a>
 800175a:	bf00      	nop
 800175c:	0801a884 	.word	0x0801a884
 8001760:	240002a0 	.word	0x240002a0
 8001764:	0801a8b8 	.word	0x0801a8b8
 8001768:	0801a8d4 	.word	0x0801a8d4
 800176c:	0801a8f0 	.word	0x0801a8f0
 8001770:	0801a904 	.word	0x0801a904
 8001774:	0801a948 	.word	0x0801a948
 8001778:	0801a994 	.word	0x0801a994
 800177c:	0801a9b0 	.word	0x0801a9b0
 8001780:	0801a9c4 	.word	0x0801a9c4
	else sprintf(uartTxBuf, "Data Rate:\r\n		1Mbps \r\n");
 8001784:	f107 0308 	add.w	r3, r7, #8
 8001788:	4a29      	ldr	r2, [pc, #164]	; (8001830 <printRadioSettings+0x3b8>)
 800178a:	461c      	mov	r4, r3
 800178c:	4615      	mov	r5, r2
 800178e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001790:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001792:	e895 0003 	ldmia.w	r5, {r0, r1}
 8001796:	6020      	str	r0, [r4, #0]
 8001798:	3404      	adds	r4, #4
 800179a:	8021      	strh	r1, [r4, #0]
 800179c:	3402      	adds	r4, #2
 800179e:	0c0b      	lsrs	r3, r1, #16
 80017a0:	7023      	strb	r3, [r4, #0]
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 80017a2:	f107 0308 	add.w	r3, r7, #8
 80017a6:	4618      	mov	r0, r3
 80017a8:	f7fe fd9a 	bl	80002e0 <strlen>
 80017ac:	4603      	mov	r3, r0
 80017ae:	b29a      	uxth	r2, r3
 80017b0:	f107 0108 	add.w	r1, r7, #8
 80017b4:	230a      	movs	r3, #10
 80017b6:	481f      	ldr	r0, [pc, #124]	; (8001834 <printRadioSettings+0x3bc>)
 80017b8:	f00e fa69 	bl	800fc8e <HAL_UART_Transmit>
	reg8Val &= (3 << 1);
 80017bc:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80017c0:	f003 0306 	and.w	r3, r3, #6
 80017c4:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	reg8Val = (reg8Val>>1);
 80017c8:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80017cc:	085b      	lsrs	r3, r3, #1
 80017ce:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	if(reg8Val == 0) sprintf(uartTxBuf, "RF_PWR:\r\n		-18dB \r\n");
 80017d2:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80017d6:	2b00      	cmp	r3, #0
 80017d8:	d109      	bne.n	80017ee <printRadioSettings+0x376>
 80017da:	f107 0308 	add.w	r3, r7, #8
 80017de:	4a16      	ldr	r2, [pc, #88]	; (8001838 <printRadioSettings+0x3c0>)
 80017e0:	461c      	mov	r4, r3
 80017e2:	4615      	mov	r5, r2
 80017e4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80017e6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80017e8:	682b      	ldr	r3, [r5, #0]
 80017ea:	6023      	str	r3, [r4, #0]
 80017ec:	e037      	b.n	800185e <printRadioSettings+0x3e6>
	else if(reg8Val == 1) sprintf(uartTxBuf, "RF_PWR:\r\n		-12dB \r\n");
 80017ee:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80017f2:	2b01      	cmp	r3, #1
 80017f4:	d109      	bne.n	800180a <printRadioSettings+0x392>
 80017f6:	f107 0308 	add.w	r3, r7, #8
 80017fa:	4a10      	ldr	r2, [pc, #64]	; (800183c <printRadioSettings+0x3c4>)
 80017fc:	461c      	mov	r4, r3
 80017fe:	4615      	mov	r5, r2
 8001800:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001802:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001804:	682b      	ldr	r3, [r5, #0]
 8001806:	6023      	str	r3, [r4, #0]
 8001808:	e029      	b.n	800185e <printRadioSettings+0x3e6>
	else if(reg8Val == 2) sprintf(uartTxBuf, "RF_PWR:\r\n		-6dB \r\n");
 800180a:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800180e:	2b02      	cmp	r3, #2
 8001810:	d118      	bne.n	8001844 <printRadioSettings+0x3cc>
 8001812:	f107 0308 	add.w	r3, r7, #8
 8001816:	4a0a      	ldr	r2, [pc, #40]	; (8001840 <printRadioSettings+0x3c8>)
 8001818:	461c      	mov	r4, r3
 800181a:	4615      	mov	r5, r2
 800181c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800181e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001820:	682b      	ldr	r3, [r5, #0]
 8001822:	461a      	mov	r2, r3
 8001824:	8022      	strh	r2, [r4, #0]
 8001826:	3402      	adds	r4, #2
 8001828:	0c1b      	lsrs	r3, r3, #16
 800182a:	7023      	strb	r3, [r4, #0]
 800182c:	e017      	b.n	800185e <printRadioSettings+0x3e6>
 800182e:	bf00      	nop
 8001830:	0801a9dc 	.word	0x0801a9dc
 8001834:	240002a0 	.word	0x240002a0
 8001838:	0801a9f4 	.word	0x0801a9f4
 800183c:	0801aa08 	.word	0x0801aa08
 8001840:	0801aa1c 	.word	0x0801aa1c
	else if(reg8Val == 3) sprintf(uartTxBuf, "RF_PWR:\r\n		0dB \r\n");
 8001844:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001848:	2b03      	cmp	r3, #3
 800184a:	d108      	bne.n	800185e <printRadioSettings+0x3e6>
 800184c:	f107 0308 	add.w	r3, r7, #8
 8001850:	4ad7      	ldr	r2, [pc, #860]	; (8001bb0 <printRadioSettings+0x738>)
 8001852:	461c      	mov	r4, r3
 8001854:	4615      	mov	r5, r2
 8001856:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001858:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800185a:	682b      	ldr	r3, [r5, #0]
 800185c:	8023      	strh	r3, [r4, #0]
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 800185e:	f107 0308 	add.w	r3, r7, #8
 8001862:	4618      	mov	r0, r3
 8001864:	f7fe fd3c 	bl	80002e0 <strlen>
 8001868:	4603      	mov	r3, r0
 800186a:	b29a      	uxth	r2, r3
 800186c:	f107 0108 	add.w	r1, r7, #8
 8001870:	230a      	movs	r3, #10
 8001872:	48d0      	ldr	r0, [pc, #832]	; (8001bb4 <printRadioSettings+0x73c>)
 8001874:	f00e fa0b 	bl	800fc8e <HAL_UART_Transmit>
	//g) RX pipes addresses
	uint8_t pipeAddrs[6];
	NRF24_read_registerN(0x0A, pipeAddrs, 5);
 8001878:	463b      	mov	r3, r7
 800187a:	2205      	movs	r2, #5
 800187c:	4619      	mov	r1, r3
 800187e:	200a      	movs	r0, #10
 8001880:	f7ff f9fc 	bl	8000c7c <NRF24_read_registerN>
	sprintf(uartTxBuf, "RX_Pipe0 Addrs:\r\n		%02X,%02X,%02X,%02X,%02X  \r\n", pipeAddrs[4], pipeAddrs[3], pipeAddrs[2],pipeAddrs[1],pipeAddrs[0]);
 8001884:	793b      	ldrb	r3, [r7, #4]
 8001886:	461c      	mov	r4, r3
 8001888:	78fb      	ldrb	r3, [r7, #3]
 800188a:	461d      	mov	r5, r3
 800188c:	78bb      	ldrb	r3, [r7, #2]
 800188e:	787a      	ldrb	r2, [r7, #1]
 8001890:	7839      	ldrb	r1, [r7, #0]
 8001892:	f107 0008 	add.w	r0, r7, #8
 8001896:	9102      	str	r1, [sp, #8]
 8001898:	9201      	str	r2, [sp, #4]
 800189a:	9300      	str	r3, [sp, #0]
 800189c:	462b      	mov	r3, r5
 800189e:	4622      	mov	r2, r4
 80018a0:	49c5      	ldr	r1, [pc, #788]	; (8001bb8 <printRadioSettings+0x740>)
 80018a2:	f017 ffd5 	bl	8019850 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 80018a6:	f107 0308 	add.w	r3, r7, #8
 80018aa:	4618      	mov	r0, r3
 80018ac:	f7fe fd18 	bl	80002e0 <strlen>
 80018b0:	4603      	mov	r3, r0
 80018b2:	b29a      	uxth	r2, r3
 80018b4:	f107 0108 	add.w	r1, r7, #8
 80018b8:	230a      	movs	r3, #10
 80018ba:	48be      	ldr	r0, [pc, #760]	; (8001bb4 <printRadioSettings+0x73c>)
 80018bc:	f00e f9e7 	bl	800fc8e <HAL_UART_Transmit>
	
	NRF24_read_registerN(0x0A+1, pipeAddrs, 5);
 80018c0:	463b      	mov	r3, r7
 80018c2:	2205      	movs	r2, #5
 80018c4:	4619      	mov	r1, r3
 80018c6:	200b      	movs	r0, #11
 80018c8:	f7ff f9d8 	bl	8000c7c <NRF24_read_registerN>
	sprintf(uartTxBuf, "RX_Pipe1 Addrs:\r\n		%02X,%02X,%02X,%02X,%02X  \r\n", pipeAddrs[4], pipeAddrs[3], pipeAddrs[2],pipeAddrs[1],pipeAddrs[0]);
 80018cc:	793b      	ldrb	r3, [r7, #4]
 80018ce:	461c      	mov	r4, r3
 80018d0:	78fb      	ldrb	r3, [r7, #3]
 80018d2:	461d      	mov	r5, r3
 80018d4:	78bb      	ldrb	r3, [r7, #2]
 80018d6:	787a      	ldrb	r2, [r7, #1]
 80018d8:	7839      	ldrb	r1, [r7, #0]
 80018da:	f107 0008 	add.w	r0, r7, #8
 80018de:	9102      	str	r1, [sp, #8]
 80018e0:	9201      	str	r2, [sp, #4]
 80018e2:	9300      	str	r3, [sp, #0]
 80018e4:	462b      	mov	r3, r5
 80018e6:	4622      	mov	r2, r4
 80018e8:	49b4      	ldr	r1, [pc, #720]	; (8001bbc <printRadioSettings+0x744>)
 80018ea:	f017 ffb1 	bl	8019850 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 80018ee:	f107 0308 	add.w	r3, r7, #8
 80018f2:	4618      	mov	r0, r3
 80018f4:	f7fe fcf4 	bl	80002e0 <strlen>
 80018f8:	4603      	mov	r3, r0
 80018fa:	b29a      	uxth	r2, r3
 80018fc:	f107 0108 	add.w	r1, r7, #8
 8001900:	230a      	movs	r3, #10
 8001902:	48ac      	ldr	r0, [pc, #688]	; (8001bb4 <printRadioSettings+0x73c>)
 8001904:	f00e f9c3 	bl	800fc8e <HAL_UART_Transmit>
	
	NRF24_read_registerN(0x0A+2, pipeAddrs, 1);
 8001908:	463b      	mov	r3, r7
 800190a:	2201      	movs	r2, #1
 800190c:	4619      	mov	r1, r3
 800190e:	200c      	movs	r0, #12
 8001910:	f7ff f9b4 	bl	8000c7c <NRF24_read_registerN>
	sprintf(uartTxBuf, "RX_Pipe2 Addrs:\r\n		xx,xx,xx,xx,%02X  \r\n", pipeAddrs[0]);
 8001914:	783b      	ldrb	r3, [r7, #0]
 8001916:	461a      	mov	r2, r3
 8001918:	f107 0308 	add.w	r3, r7, #8
 800191c:	49a8      	ldr	r1, [pc, #672]	; (8001bc0 <printRadioSettings+0x748>)
 800191e:	4618      	mov	r0, r3
 8001920:	f017 ff96 	bl	8019850 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8001924:	f107 0308 	add.w	r3, r7, #8
 8001928:	4618      	mov	r0, r3
 800192a:	f7fe fcd9 	bl	80002e0 <strlen>
 800192e:	4603      	mov	r3, r0
 8001930:	b29a      	uxth	r2, r3
 8001932:	f107 0108 	add.w	r1, r7, #8
 8001936:	230a      	movs	r3, #10
 8001938:	489e      	ldr	r0, [pc, #632]	; (8001bb4 <printRadioSettings+0x73c>)
 800193a:	f00e f9a8 	bl	800fc8e <HAL_UART_Transmit>
	
	NRF24_read_registerN(0x0A+3, pipeAddrs, 1);
 800193e:	463b      	mov	r3, r7
 8001940:	2201      	movs	r2, #1
 8001942:	4619      	mov	r1, r3
 8001944:	200d      	movs	r0, #13
 8001946:	f7ff f999 	bl	8000c7c <NRF24_read_registerN>
	sprintf(uartTxBuf, "RX_Pipe3 Addrs:\r\n		xx,xx,xx,xx,%02X  \r\n", pipeAddrs[0]);
 800194a:	783b      	ldrb	r3, [r7, #0]
 800194c:	461a      	mov	r2, r3
 800194e:	f107 0308 	add.w	r3, r7, #8
 8001952:	499c      	ldr	r1, [pc, #624]	; (8001bc4 <printRadioSettings+0x74c>)
 8001954:	4618      	mov	r0, r3
 8001956:	f017 ff7b 	bl	8019850 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 800195a:	f107 0308 	add.w	r3, r7, #8
 800195e:	4618      	mov	r0, r3
 8001960:	f7fe fcbe 	bl	80002e0 <strlen>
 8001964:	4603      	mov	r3, r0
 8001966:	b29a      	uxth	r2, r3
 8001968:	f107 0108 	add.w	r1, r7, #8
 800196c:	230a      	movs	r3, #10
 800196e:	4891      	ldr	r0, [pc, #580]	; (8001bb4 <printRadioSettings+0x73c>)
 8001970:	f00e f98d 	bl	800fc8e <HAL_UART_Transmit>
	
	NRF24_read_registerN(0x0A+4, pipeAddrs, 1);
 8001974:	463b      	mov	r3, r7
 8001976:	2201      	movs	r2, #1
 8001978:	4619      	mov	r1, r3
 800197a:	200e      	movs	r0, #14
 800197c:	f7ff f97e 	bl	8000c7c <NRF24_read_registerN>
	sprintf(uartTxBuf, "RX_Pipe4 Addrs:\r\n		xx,xx,xx,xx,%02X  \r\n", pipeAddrs[0]);
 8001980:	783b      	ldrb	r3, [r7, #0]
 8001982:	461a      	mov	r2, r3
 8001984:	f107 0308 	add.w	r3, r7, #8
 8001988:	498f      	ldr	r1, [pc, #572]	; (8001bc8 <printRadioSettings+0x750>)
 800198a:	4618      	mov	r0, r3
 800198c:	f017 ff60 	bl	8019850 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8001990:	f107 0308 	add.w	r3, r7, #8
 8001994:	4618      	mov	r0, r3
 8001996:	f7fe fca3 	bl	80002e0 <strlen>
 800199a:	4603      	mov	r3, r0
 800199c:	b29a      	uxth	r2, r3
 800199e:	f107 0108 	add.w	r1, r7, #8
 80019a2:	230a      	movs	r3, #10
 80019a4:	4883      	ldr	r0, [pc, #524]	; (8001bb4 <printRadioSettings+0x73c>)
 80019a6:	f00e f972 	bl	800fc8e <HAL_UART_Transmit>
	
	NRF24_read_registerN(0x0A+5, pipeAddrs, 1);
 80019aa:	463b      	mov	r3, r7
 80019ac:	2201      	movs	r2, #1
 80019ae:	4619      	mov	r1, r3
 80019b0:	200f      	movs	r0, #15
 80019b2:	f7ff f963 	bl	8000c7c <NRF24_read_registerN>
	sprintf(uartTxBuf, "RX_Pipe5 Addrs:\r\n		xx,xx,xx,xx,%02X  \r\n", pipeAddrs[0]);
 80019b6:	783b      	ldrb	r3, [r7, #0]
 80019b8:	461a      	mov	r2, r3
 80019ba:	f107 0308 	add.w	r3, r7, #8
 80019be:	4983      	ldr	r1, [pc, #524]	; (8001bcc <printRadioSettings+0x754>)
 80019c0:	4618      	mov	r0, r3
 80019c2:	f017 ff45 	bl	8019850 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 80019c6:	f107 0308 	add.w	r3, r7, #8
 80019ca:	4618      	mov	r0, r3
 80019cc:	f7fe fc88 	bl	80002e0 <strlen>
 80019d0:	4603      	mov	r3, r0
 80019d2:	b29a      	uxth	r2, r3
 80019d4:	f107 0108 	add.w	r1, r7, #8
 80019d8:	230a      	movs	r3, #10
 80019da:	4876      	ldr	r0, [pc, #472]	; (8001bb4 <printRadioSettings+0x73c>)
 80019dc:	f00e f957 	bl	800fc8e <HAL_UART_Transmit>
	
	NRF24_read_registerN(0x0A+6, pipeAddrs, 5);
 80019e0:	463b      	mov	r3, r7
 80019e2:	2205      	movs	r2, #5
 80019e4:	4619      	mov	r1, r3
 80019e6:	2010      	movs	r0, #16
 80019e8:	f7ff f948 	bl	8000c7c <NRF24_read_registerN>
	sprintf(uartTxBuf, "TX Addrs:\r\n		%02X,%02X,%02X,%02X,%02X  \r\n", pipeAddrs[4], pipeAddrs[3], pipeAddrs[2],pipeAddrs[1],pipeAddrs[0]);
 80019ec:	793b      	ldrb	r3, [r7, #4]
 80019ee:	461c      	mov	r4, r3
 80019f0:	78fb      	ldrb	r3, [r7, #3]
 80019f2:	461d      	mov	r5, r3
 80019f4:	78bb      	ldrb	r3, [r7, #2]
 80019f6:	787a      	ldrb	r2, [r7, #1]
 80019f8:	7839      	ldrb	r1, [r7, #0]
 80019fa:	f107 0008 	add.w	r0, r7, #8
 80019fe:	9102      	str	r1, [sp, #8]
 8001a00:	9201      	str	r2, [sp, #4]
 8001a02:	9300      	str	r3, [sp, #0]
 8001a04:	462b      	mov	r3, r5
 8001a06:	4622      	mov	r2, r4
 8001a08:	4971      	ldr	r1, [pc, #452]	; (8001bd0 <printRadioSettings+0x758>)
 8001a0a:	f017 ff21 	bl	8019850 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8001a0e:	f107 0308 	add.w	r3, r7, #8
 8001a12:	4618      	mov	r0, r3
 8001a14:	f7fe fc64 	bl	80002e0 <strlen>
 8001a18:	4603      	mov	r3, r0
 8001a1a:	b29a      	uxth	r2, r3
 8001a1c:	f107 0108 	add.w	r1, r7, #8
 8001a20:	230a      	movs	r3, #10
 8001a22:	4864      	ldr	r0, [pc, #400]	; (8001bb4 <printRadioSettings+0x73c>)
 8001a24:	f00e f933 	bl	800fc8e <HAL_UART_Transmit>
	
	//h) RX PW (Payload Width 0 - 32)
	reg8Val = NRF24_read_register(0x11);
 8001a28:	2011      	movs	r0, #17
 8001a2a:	f7ff f8ff 	bl	8000c2c <NRF24_read_register>
 8001a2e:	4603      	mov	r3, r0
 8001a30:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "RX_PW_P0:\r\n		%d bytes \r\n", reg8Val&0x3F);
 8001a34:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001a38:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001a3c:	f107 0308 	add.w	r3, r7, #8
 8001a40:	4964      	ldr	r1, [pc, #400]	; (8001bd4 <printRadioSettings+0x75c>)
 8001a42:	4618      	mov	r0, r3
 8001a44:	f017 ff04 	bl	8019850 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8001a48:	f107 0308 	add.w	r3, r7, #8
 8001a4c:	4618      	mov	r0, r3
 8001a4e:	f7fe fc47 	bl	80002e0 <strlen>
 8001a52:	4603      	mov	r3, r0
 8001a54:	b29a      	uxth	r2, r3
 8001a56:	f107 0108 	add.w	r1, r7, #8
 8001a5a:	230a      	movs	r3, #10
 8001a5c:	4855      	ldr	r0, [pc, #340]	; (8001bb4 <printRadioSettings+0x73c>)
 8001a5e:	f00e f916 	bl	800fc8e <HAL_UART_Transmit>
	
	reg8Val = NRF24_read_register(0x11+1);
 8001a62:	2012      	movs	r0, #18
 8001a64:	f7ff f8e2 	bl	8000c2c <NRF24_read_register>
 8001a68:	4603      	mov	r3, r0
 8001a6a:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "RX_PW_P1:\r\n		%d bytes \r\n", reg8Val&0x3F);
 8001a6e:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001a72:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001a76:	f107 0308 	add.w	r3, r7, #8
 8001a7a:	4957      	ldr	r1, [pc, #348]	; (8001bd8 <printRadioSettings+0x760>)
 8001a7c:	4618      	mov	r0, r3
 8001a7e:	f017 fee7 	bl	8019850 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8001a82:	f107 0308 	add.w	r3, r7, #8
 8001a86:	4618      	mov	r0, r3
 8001a88:	f7fe fc2a 	bl	80002e0 <strlen>
 8001a8c:	4603      	mov	r3, r0
 8001a8e:	b29a      	uxth	r2, r3
 8001a90:	f107 0108 	add.w	r1, r7, #8
 8001a94:	230a      	movs	r3, #10
 8001a96:	4847      	ldr	r0, [pc, #284]	; (8001bb4 <printRadioSettings+0x73c>)
 8001a98:	f00e f8f9 	bl	800fc8e <HAL_UART_Transmit>
	
	reg8Val = NRF24_read_register(0x11+2);
 8001a9c:	2013      	movs	r0, #19
 8001a9e:	f7ff f8c5 	bl	8000c2c <NRF24_read_register>
 8001aa2:	4603      	mov	r3, r0
 8001aa4:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "RX_PW_P2:\r\n		%d bytes \r\n", reg8Val&0x3F);
 8001aa8:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001aac:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001ab0:	f107 0308 	add.w	r3, r7, #8
 8001ab4:	4949      	ldr	r1, [pc, #292]	; (8001bdc <printRadioSettings+0x764>)
 8001ab6:	4618      	mov	r0, r3
 8001ab8:	f017 feca 	bl	8019850 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8001abc:	f107 0308 	add.w	r3, r7, #8
 8001ac0:	4618      	mov	r0, r3
 8001ac2:	f7fe fc0d 	bl	80002e0 <strlen>
 8001ac6:	4603      	mov	r3, r0
 8001ac8:	b29a      	uxth	r2, r3
 8001aca:	f107 0108 	add.w	r1, r7, #8
 8001ace:	230a      	movs	r3, #10
 8001ad0:	4838      	ldr	r0, [pc, #224]	; (8001bb4 <printRadioSettings+0x73c>)
 8001ad2:	f00e f8dc 	bl	800fc8e <HAL_UART_Transmit>
	
	reg8Val = NRF24_read_register(0x11+3);
 8001ad6:	2014      	movs	r0, #20
 8001ad8:	f7ff f8a8 	bl	8000c2c <NRF24_read_register>
 8001adc:	4603      	mov	r3, r0
 8001ade:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "RX_PW_P3:\r\n		%d bytes \r\n", reg8Val&0x3F);
 8001ae2:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001ae6:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001aea:	f107 0308 	add.w	r3, r7, #8
 8001aee:	493c      	ldr	r1, [pc, #240]	; (8001be0 <printRadioSettings+0x768>)
 8001af0:	4618      	mov	r0, r3
 8001af2:	f017 fead 	bl	8019850 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8001af6:	f107 0308 	add.w	r3, r7, #8
 8001afa:	4618      	mov	r0, r3
 8001afc:	f7fe fbf0 	bl	80002e0 <strlen>
 8001b00:	4603      	mov	r3, r0
 8001b02:	b29a      	uxth	r2, r3
 8001b04:	f107 0108 	add.w	r1, r7, #8
 8001b08:	230a      	movs	r3, #10
 8001b0a:	482a      	ldr	r0, [pc, #168]	; (8001bb4 <printRadioSettings+0x73c>)
 8001b0c:	f00e f8bf 	bl	800fc8e <HAL_UART_Transmit>
	
	reg8Val = NRF24_read_register(0x11+4);
 8001b10:	2015      	movs	r0, #21
 8001b12:	f7ff f88b 	bl	8000c2c <NRF24_read_register>
 8001b16:	4603      	mov	r3, r0
 8001b18:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "RX_PW_P4:\r\n		%d bytes \r\n", reg8Val&0x3F);
 8001b1c:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001b20:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001b24:	f107 0308 	add.w	r3, r7, #8
 8001b28:	492e      	ldr	r1, [pc, #184]	; (8001be4 <printRadioSettings+0x76c>)
 8001b2a:	4618      	mov	r0, r3
 8001b2c:	f017 fe90 	bl	8019850 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8001b30:	f107 0308 	add.w	r3, r7, #8
 8001b34:	4618      	mov	r0, r3
 8001b36:	f7fe fbd3 	bl	80002e0 <strlen>
 8001b3a:	4603      	mov	r3, r0
 8001b3c:	b29a      	uxth	r2, r3
 8001b3e:	f107 0108 	add.w	r1, r7, #8
 8001b42:	230a      	movs	r3, #10
 8001b44:	481b      	ldr	r0, [pc, #108]	; (8001bb4 <printRadioSettings+0x73c>)
 8001b46:	f00e f8a2 	bl	800fc8e <HAL_UART_Transmit>
	
	reg8Val = NRF24_read_register(0x11+5);
 8001b4a:	2016      	movs	r0, #22
 8001b4c:	f7ff f86e 	bl	8000c2c <NRF24_read_register>
 8001b50:	4603      	mov	r3, r0
 8001b52:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "RX_PW_P5:\r\n		%d bytes \r\n", reg8Val&0x3F);
 8001b56:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001b5a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001b5e:	f107 0308 	add.w	r3, r7, #8
 8001b62:	4921      	ldr	r1, [pc, #132]	; (8001be8 <printRadioSettings+0x770>)
 8001b64:	4618      	mov	r0, r3
 8001b66:	f017 fe73 	bl	8019850 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8001b6a:	f107 0308 	add.w	r3, r7, #8
 8001b6e:	4618      	mov	r0, r3
 8001b70:	f7fe fbb6 	bl	80002e0 <strlen>
 8001b74:	4603      	mov	r3, r0
 8001b76:	b29a      	uxth	r2, r3
 8001b78:	f107 0108 	add.w	r1, r7, #8
 8001b7c:	230a      	movs	r3, #10
 8001b7e:	480d      	ldr	r0, [pc, #52]	; (8001bb4 <printRadioSettings+0x73c>)
 8001b80:	f00e f885 	bl	800fc8e <HAL_UART_Transmit>
	
	//i) Dynamic payload enable for each pipe
	reg8Val = NRF24_read_register(0x1c);
 8001b84:	201c      	movs	r0, #28
 8001b86:	f7ff f851 	bl	8000c2c <NRF24_read_register>
 8001b8a:	4603      	mov	r3, r0
 8001b8c:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "DYNPD_pipe:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8001b90:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001b94:	f003 0301 	and.w	r3, r3, #1
	sprintf(uartTxBuf, "DYNPD_pipe:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8001b98:	2b00      	cmp	r3, #0
 8001b9a:	bfcc      	ite	gt
 8001b9c:	2301      	movgt	r3, #1
 8001b9e:	2300      	movle	r3, #0
 8001ba0:	b2db      	uxtb	r3, r3
 8001ba2:	461d      	mov	r5, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8001ba4:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001ba8:	f003 0302 	and.w	r3, r3, #2
 8001bac:	e01e      	b.n	8001bec <printRadioSettings+0x774>
 8001bae:	bf00      	nop
 8001bb0:	0801aa30 	.word	0x0801aa30
 8001bb4:	240002a0 	.word	0x240002a0
 8001bb8:	0801aa44 	.word	0x0801aa44
 8001bbc:	0801aa74 	.word	0x0801aa74
 8001bc0:	0801aaa4 	.word	0x0801aaa4
 8001bc4:	0801aacc 	.word	0x0801aacc
 8001bc8:	0801aaf4 	.word	0x0801aaf4
 8001bcc:	0801ab1c 	.word	0x0801ab1c
 8001bd0:	0801ab44 	.word	0x0801ab44
 8001bd4:	0801ab70 	.word	0x0801ab70
 8001bd8:	0801ab8c 	.word	0x0801ab8c
 8001bdc:	0801aba8 	.word	0x0801aba8
 8001be0:	0801abc4 	.word	0x0801abc4
 8001be4:	0801abe0 	.word	0x0801abe0
 8001be8:	0801abfc 	.word	0x0801abfc
	sprintf(uartTxBuf, "DYNPD_pipe:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8001bec:	2b00      	cmp	r3, #0
 8001bee:	bfcc      	ite	gt
 8001bf0:	2301      	movgt	r3, #1
 8001bf2:	2300      	movle	r3, #0
 8001bf4:	b2db      	uxtb	r3, r3
 8001bf6:	461e      	mov	r6, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8001bf8:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001bfc:	f003 0304 	and.w	r3, r3, #4
	sprintf(uartTxBuf, "DYNPD_pipe:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8001c00:	2b00      	cmp	r3, #0
 8001c02:	bfcc      	ite	gt
 8001c04:	2301      	movgt	r3, #1
 8001c06:	2300      	movle	r3, #0
 8001c08:	b2db      	uxtb	r3, r3
 8001c0a:	461a      	mov	r2, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8001c0c:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001c10:	f003 0308 	and.w	r3, r3, #8
	sprintf(uartTxBuf, "DYNPD_pipe:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8001c14:	2b00      	cmp	r3, #0
 8001c16:	bfcc      	ite	gt
 8001c18:	2301      	movgt	r3, #1
 8001c1a:	2300      	movle	r3, #0
 8001c1c:	b2db      	uxtb	r3, r3
 8001c1e:	4619      	mov	r1, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8001c20:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001c24:	f003 0310 	and.w	r3, r3, #16
	sprintf(uartTxBuf, "DYNPD_pipe:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8001c28:	2b00      	cmp	r3, #0
 8001c2a:	bfcc      	ite	gt
 8001c2c:	2301      	movgt	r3, #1
 8001c2e:	2300      	movle	r3, #0
 8001c30:	b2db      	uxtb	r3, r3
 8001c32:	461c      	mov	r4, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8001c34:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001c38:	f003 0320 	and.w	r3, r3, #32
	sprintf(uartTxBuf, "DYNPD_pipe:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8001c3c:	2b00      	cmp	r3, #0
 8001c3e:	bfcc      	ite	gt
 8001c40:	2301      	movgt	r3, #1
 8001c42:	2300      	movle	r3, #0
 8001c44:	b2db      	uxtb	r3, r3
 8001c46:	f107 0008 	add.w	r0, r7, #8
 8001c4a:	9303      	str	r3, [sp, #12]
 8001c4c:	9402      	str	r4, [sp, #8]
 8001c4e:	9101      	str	r1, [sp, #4]
 8001c50:	9200      	str	r2, [sp, #0]
 8001c52:	4633      	mov	r3, r6
 8001c54:	462a      	mov	r2, r5
 8001c56:	494a      	ldr	r1, [pc, #296]	; (8001d80 <printRadioSettings+0x908>)
 8001c58:	f017 fdfa 	bl	8019850 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8001c5c:	f107 0308 	add.w	r3, r7, #8
 8001c60:	4618      	mov	r0, r3
 8001c62:	f7fe fb3d 	bl	80002e0 <strlen>
 8001c66:	4603      	mov	r3, r0
 8001c68:	b29a      	uxth	r2, r3
 8001c6a:	f107 0108 	add.w	r1, r7, #8
 8001c6e:	230a      	movs	r3, #10
 8001c70:	4844      	ldr	r0, [pc, #272]	; (8001d84 <printRadioSettings+0x90c>)
 8001c72:	f00e f80c 	bl	800fc8e <HAL_UART_Transmit>
	
	//j) EN_DPL (is Dynamic payload feature enabled ?)
	reg8Val = NRF24_read_register(0x1d);
 8001c76:	201d      	movs	r0, #29
 8001c78:	f7fe ffd8 	bl	8000c2c <NRF24_read_register>
 8001c7c:	4603      	mov	r3, r0
 8001c7e:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	if(reg8Val&(1<<2)) sprintf(uartTxBuf, "EN_DPL:\r\n		Enabled \r\n");
 8001c82:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001c86:	f003 0304 	and.w	r3, r3, #4
 8001c8a:	2b00      	cmp	r3, #0
 8001c8c:	d00c      	beq.n	8001ca8 <printRadioSettings+0x830>
 8001c8e:	f107 0308 	add.w	r3, r7, #8
 8001c92:	4a3d      	ldr	r2, [pc, #244]	; (8001d88 <printRadioSettings+0x910>)
 8001c94:	461c      	mov	r4, r3
 8001c96:	4615      	mov	r5, r2
 8001c98:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001c9a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001c9c:	e895 0003 	ldmia.w	r5, {r0, r1}
 8001ca0:	6020      	str	r0, [r4, #0]
 8001ca2:	3404      	adds	r4, #4
 8001ca4:	8021      	strh	r1, [r4, #0]
 8001ca6:	e00e      	b.n	8001cc6 <printRadioSettings+0x84e>
	else sprintf(uartTxBuf, "EN_DPL:\r\n		Disabled \r\n");
 8001ca8:	f107 0308 	add.w	r3, r7, #8
 8001cac:	4a37      	ldr	r2, [pc, #220]	; (8001d8c <printRadioSettings+0x914>)
 8001cae:	461c      	mov	r4, r3
 8001cb0:	4615      	mov	r5, r2
 8001cb2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001cb4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001cb6:	e895 0003 	ldmia.w	r5, {r0, r1}
 8001cba:	6020      	str	r0, [r4, #0]
 8001cbc:	3404      	adds	r4, #4
 8001cbe:	8021      	strh	r1, [r4, #0]
 8001cc0:	3402      	adds	r4, #2
 8001cc2:	0c0b      	lsrs	r3, r1, #16
 8001cc4:	7023      	strb	r3, [r4, #0]
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8001cc6:	f107 0308 	add.w	r3, r7, #8
 8001cca:	4618      	mov	r0, r3
 8001ccc:	f7fe fb08 	bl	80002e0 <strlen>
 8001cd0:	4603      	mov	r3, r0
 8001cd2:	b29a      	uxth	r2, r3
 8001cd4:	f107 0108 	add.w	r1, r7, #8
 8001cd8:	230a      	movs	r3, #10
 8001cda:	482a      	ldr	r0, [pc, #168]	; (8001d84 <printRadioSettings+0x90c>)
 8001cdc:	f00d ffd7 	bl	800fc8e <HAL_UART_Transmit>
	
	//k) EN_ACK_PAY
	if(reg8Val&(1<<1)) sprintf(uartTxBuf, "EN_ACK_PAY:\r\n		Enabled \r\n");
 8001ce0:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001ce4:	f003 0302 	and.w	r3, r3, #2
 8001ce8:	2b00      	cmp	r3, #0
 8001cea:	d00b      	beq.n	8001d04 <printRadioSettings+0x88c>
 8001cec:	f107 0308 	add.w	r3, r7, #8
 8001cf0:	4a27      	ldr	r2, [pc, #156]	; (8001d90 <printRadioSettings+0x918>)
 8001cf2:	461c      	mov	r4, r3
 8001cf4:	4615      	mov	r5, r2
 8001cf6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001cf8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001cfa:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001cfe:	c403      	stmia	r4!, {r0, r1}
 8001d00:	8022      	strh	r2, [r4, #0]
 8001d02:	e00d      	b.n	8001d20 <printRadioSettings+0x8a8>
	else sprintf(uartTxBuf, "EN_ACK_PAY:\r\n		Disabled \r\n");
 8001d04:	f107 0308 	add.w	r3, r7, #8
 8001d08:	4a22      	ldr	r2, [pc, #136]	; (8001d94 <printRadioSettings+0x91c>)
 8001d0a:	461c      	mov	r4, r3
 8001d0c:	4615      	mov	r5, r2
 8001d0e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001d10:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001d12:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001d16:	c403      	stmia	r4!, {r0, r1}
 8001d18:	8022      	strh	r2, [r4, #0]
 8001d1a:	3402      	adds	r4, #2
 8001d1c:	0c13      	lsrs	r3, r2, #16
 8001d1e:	7023      	strb	r3, [r4, #0]
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8001d20:	f107 0308 	add.w	r3, r7, #8
 8001d24:	4618      	mov	r0, r3
 8001d26:	f7fe fadb 	bl	80002e0 <strlen>
 8001d2a:	4603      	mov	r3, r0
 8001d2c:	b29a      	uxth	r2, r3
 8001d2e:	f107 0108 	add.w	r1, r7, #8
 8001d32:	230a      	movs	r3, #10
 8001d34:	4813      	ldr	r0, [pc, #76]	; (8001d84 <printRadioSettings+0x90c>)
 8001d36:	f00d ffaa 	bl	800fc8e <HAL_UART_Transmit>
	
	
	sprintf(uartTxBuf, "\r\n**********************************************\r\n");
 8001d3a:	f107 0308 	add.w	r3, r7, #8
 8001d3e:	4a16      	ldr	r2, [pc, #88]	; (8001d98 <printRadioSettings+0x920>)
 8001d40:	461c      	mov	r4, r3
 8001d42:	4615      	mov	r5, r2
 8001d44:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001d46:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001d48:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001d4a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001d4c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001d4e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001d50:	682b      	ldr	r3, [r5, #0]
 8001d52:	461a      	mov	r2, r3
 8001d54:	8022      	strh	r2, [r4, #0]
 8001d56:	3402      	adds	r4, #2
 8001d58:	0c1b      	lsrs	r3, r3, #16
 8001d5a:	7023      	strb	r3, [r4, #0]
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8001d5c:	f107 0308 	add.w	r3, r7, #8
 8001d60:	4618      	mov	r0, r3
 8001d62:	f7fe fabd 	bl	80002e0 <strlen>
 8001d66:	4603      	mov	r3, r0
 8001d68:	b29a      	uxth	r2, r3
 8001d6a:	f107 0108 	add.w	r1, r7, #8
 8001d6e:	230a      	movs	r3, #10
 8001d70:	4804      	ldr	r0, [pc, #16]	; (8001d84 <printRadioSettings+0x90c>)
 8001d72:	f00d ff8c 	bl	800fc8e <HAL_UART_Transmit>
}
 8001d76:	bf00      	nop
 8001d78:	3774      	adds	r7, #116	; 0x74
 8001d7a:	46bd      	mov	sp, r7
 8001d7c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001d7e:	bf00      	nop
 8001d80:	0801ac18 	.word	0x0801ac18
 8001d84:	240002a0 	.word	0x240002a0
 8001d88:	0801ac64 	.word	0x0801ac64
 8001d8c:	0801ac7c 	.word	0x0801ac7c
 8001d90:	0801ac94 	.word	0x0801ac94
 8001d94:	0801acb0 	.word	0x0801acb0
 8001d98:	0801a884 	.word	0x0801a884

08001d9c <WriteToBuff>:
#include <myprintf.h>


DataBuff DataBuffer = {.Data.DataBuff = 0, .counter = 0};

int WriteToBuff(char Data[], int len){
 8001d9c:	b580      	push	{r7, lr}
 8001d9e:	b082      	sub	sp, #8
 8001da0:	af00      	add	r7, sp, #0
 8001da2:	6078      	str	r0, [r7, #4]
 8001da4:	6039      	str	r1, [r7, #0]
  if(len <= 1 || len >= Bufflength){
 8001da6:	683b      	ldr	r3, [r7, #0]
 8001da8:	2b01      	cmp	r3, #1
 8001daa:	dd03      	ble.n	8001db4 <WriteToBuff+0x18>
 8001dac:	683b      	ldr	r3, [r7, #0]
 8001dae:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001db2:	db01      	blt.n	8001db8 <WriteToBuff+0x1c>
    return 3; //Dude dont try and break it
 8001db4:	2303      	movs	r3, #3
 8001db6:	e083      	b.n	8001ec0 <WriteToBuff+0x124>
  }

  if(DataBuffer.counter < Bufflength && DataBuffer.counter + len >= Bufflength){
 8001db8:	4b43      	ldr	r3, [pc, #268]	; (8001ec8 <WriteToBuff+0x12c>)
 8001dba:	f8d3 3800 	ldr.w	r3, [r3, #2048]	; 0x800
 8001dbe:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001dc2:	d235      	bcs.n	8001e30 <WriteToBuff+0x94>
 8001dc4:	4b40      	ldr	r3, [pc, #256]	; (8001ec8 <WriteToBuff+0x12c>)
 8001dc6:	f8d3 2800 	ldr.w	r2, [r3, #2048]	; 0x800
 8001dca:	683b      	ldr	r3, [r7, #0]
 8001dcc:	4413      	add	r3, r2
 8001dce:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001dd2:	d32d      	bcc.n	8001e30 <WriteToBuff+0x94>
    DataBuffer.counter = Bufflength;
 8001dd4:	4b3c      	ldr	r3, [pc, #240]	; (8001ec8 <WriteToBuff+0x12c>)
 8001dd6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001dda:	f8c3 2800 	str.w	r2, [r3, #2048]	; 0x800
    memcpy((DataBuffer.Data.DataBuff + DataBuffer.counter), Data, len);
 8001dde:	4b3a      	ldr	r3, [pc, #232]	; (8001ec8 <WriteToBuff+0x12c>)
 8001de0:	f8d3 3800 	ldr.w	r3, [r3, #2048]	; 0x800
 8001de4:	4a38      	ldr	r2, [pc, #224]	; (8001ec8 <WriteToBuff+0x12c>)
 8001de6:	4413      	add	r3, r2
 8001de8:	683a      	ldr	r2, [r7, #0]
 8001dea:	6879      	ldr	r1, [r7, #4]
 8001dec:	4618      	mov	r0, r3
 8001dee:	f017 fbb3 	bl	8019558 <memcpy>
    DataBuffer.counter += len;
 8001df2:	4b35      	ldr	r3, [pc, #212]	; (8001ec8 <WriteToBuff+0x12c>)
 8001df4:	f8d3 2800 	ldr.w	r2, [r3, #2048]	; 0x800
 8001df8:	683b      	ldr	r3, [r7, #0]
 8001dfa:	4413      	add	r3, r2
 8001dfc:	4a32      	ldr	r2, [pc, #200]	; (8001ec8 <WriteToBuff+0x12c>)
 8001dfe:	f8c2 3800 	str.w	r3, [r2, #2048]	; 0x800
    if(f_write(&myFILE, DataBuffer.Data.DataBuff1, sizeof(DataBuffer.Data.DataBuff1), &testByte) == 0){
 8001e02:	4b32      	ldr	r3, [pc, #200]	; (8001ecc <WriteToBuff+0x130>)
 8001e04:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001e08:	492f      	ldr	r1, [pc, #188]	; (8001ec8 <WriteToBuff+0x12c>)
 8001e0a:	4831      	ldr	r0, [pc, #196]	; (8001ed0 <WriteToBuff+0x134>)
 8001e0c:	f016 fbf3 	bl	80185f6 <f_write>
 8001e10:	4603      	mov	r3, r0
 8001e12:	2b00      	cmp	r3, #0
 8001e14:	d10a      	bne.n	8001e2c <WriteToBuff+0x90>

      memset(DataBuffer.Data.DataBuff2, 0, sizeof(DataBuffer.Data.DataBuff2)); //Clear next buffer after writing
 8001e16:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001e1a:	2100      	movs	r1, #0
 8001e1c:	482d      	ldr	r0, [pc, #180]	; (8001ed4 <WriteToBuff+0x138>)
 8001e1e:	f017 fba6 	bl	801956e <memset>
    	f_sync(&myFILE);
 8001e22:	482b      	ldr	r0, [pc, #172]	; (8001ed0 <WriteToBuff+0x134>)
 8001e24:	f016 fd5c 	bl	80188e0 <f_sync>
      //printf("Buffer 1 has been written\n");
      return 1; //buffer 1 has been written
 8001e28:	2301      	movs	r3, #1
 8001e2a:	e049      	b.n	8001ec0 <WriteToBuff+0x124>
    }
    return 4; //could not write :(
 8001e2c:	2304      	movs	r3, #4
 8001e2e:	e047      	b.n	8001ec0 <WriteToBuff+0x124>
  }

  if(DataBuffer.counter + len >= 2*Bufflength){
 8001e30:	4b25      	ldr	r3, [pc, #148]	; (8001ec8 <WriteToBuff+0x12c>)
 8001e32:	f8d3 2800 	ldr.w	r2, [r3, #2048]	; 0x800
 8001e36:	683b      	ldr	r3, [r7, #0]
 8001e38:	4413      	add	r3, r2
 8001e3a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001e3e:	d32c      	bcc.n	8001e9a <WriteToBuff+0xfe>
    DataBuffer.counter = 0;
 8001e40:	4b21      	ldr	r3, [pc, #132]	; (8001ec8 <WriteToBuff+0x12c>)
 8001e42:	2200      	movs	r2, #0
 8001e44:	f8c3 2800 	str.w	r2, [r3, #2048]	; 0x800
    memcpy((DataBuffer.Data.DataBuff + DataBuffer.counter), Data, len);
 8001e48:	4b1f      	ldr	r3, [pc, #124]	; (8001ec8 <WriteToBuff+0x12c>)
 8001e4a:	f8d3 3800 	ldr.w	r3, [r3, #2048]	; 0x800
 8001e4e:	4a1e      	ldr	r2, [pc, #120]	; (8001ec8 <WriteToBuff+0x12c>)
 8001e50:	4413      	add	r3, r2
 8001e52:	683a      	ldr	r2, [r7, #0]
 8001e54:	6879      	ldr	r1, [r7, #4]
 8001e56:	4618      	mov	r0, r3
 8001e58:	f017 fb7e 	bl	8019558 <memcpy>
    DataBuffer.counter += len;
 8001e5c:	4b1a      	ldr	r3, [pc, #104]	; (8001ec8 <WriteToBuff+0x12c>)
 8001e5e:	f8d3 2800 	ldr.w	r2, [r3, #2048]	; 0x800
 8001e62:	683b      	ldr	r3, [r7, #0]
 8001e64:	4413      	add	r3, r2
 8001e66:	4a18      	ldr	r2, [pc, #96]	; (8001ec8 <WriteToBuff+0x12c>)
 8001e68:	f8c2 3800 	str.w	r3, [r2, #2048]	; 0x800
    if(f_write(&myFILE, DataBuffer.Data.DataBuff2, sizeof(DataBuffer.Data.DataBuff2), &testByte) == 0){
 8001e6c:	4b17      	ldr	r3, [pc, #92]	; (8001ecc <WriteToBuff+0x130>)
 8001e6e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001e72:	4918      	ldr	r1, [pc, #96]	; (8001ed4 <WriteToBuff+0x138>)
 8001e74:	4816      	ldr	r0, [pc, #88]	; (8001ed0 <WriteToBuff+0x134>)
 8001e76:	f016 fbbe 	bl	80185f6 <f_write>
 8001e7a:	4603      	mov	r3, r0
 8001e7c:	2b00      	cmp	r3, #0
 8001e7e:	d10a      	bne.n	8001e96 <WriteToBuff+0xfa>
      memset(DataBuffer.Data.DataBuff1, 0, sizeof(DataBuffer.Data.DataBuff1)); //Clear next buffer after writing
 8001e80:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001e84:	2100      	movs	r1, #0
 8001e86:	4810      	ldr	r0, [pc, #64]	; (8001ec8 <WriteToBuff+0x12c>)
 8001e88:	f017 fb71 	bl	801956e <memset>
    	f_sync(&myFILE);
 8001e8c:	4810      	ldr	r0, [pc, #64]	; (8001ed0 <WriteToBuff+0x134>)
 8001e8e:	f016 fd27 	bl	80188e0 <f_sync>
      //printf("Buffer 2 has been written\n");
      return 2; //buffer 2 has been written
 8001e92:	2302      	movs	r3, #2
 8001e94:	e014      	b.n	8001ec0 <WriteToBuff+0x124>
    }
    return 4; //could not write :(
 8001e96:	2304      	movs	r3, #4
 8001e98:	e012      	b.n	8001ec0 <WriteToBuff+0x124>
  }
/*if(DataBuffer.counter + len >= 2*Bufflength){
	f_write(&myFILE, DataBuffer.Data.DataBuff, sizeof(DataBuffer.Data.DataBuff), &testByte);
	DataBuffer.counter = 0;
}*/
  memcpy((DataBuffer.Data.DataBuff + DataBuffer.counter), Data, len);
 8001e9a:	4b0b      	ldr	r3, [pc, #44]	; (8001ec8 <WriteToBuff+0x12c>)
 8001e9c:	f8d3 3800 	ldr.w	r3, [r3, #2048]	; 0x800
 8001ea0:	4a09      	ldr	r2, [pc, #36]	; (8001ec8 <WriteToBuff+0x12c>)
 8001ea2:	4413      	add	r3, r2
 8001ea4:	683a      	ldr	r2, [r7, #0]
 8001ea6:	6879      	ldr	r1, [r7, #4]
 8001ea8:	4618      	mov	r0, r3
 8001eaa:	f017 fb55 	bl	8019558 <memcpy>
  DataBuffer.counter += len;
 8001eae:	4b06      	ldr	r3, [pc, #24]	; (8001ec8 <WriteToBuff+0x12c>)
 8001eb0:	f8d3 2800 	ldr.w	r2, [r3, #2048]	; 0x800
 8001eb4:	683b      	ldr	r3, [r7, #0]
 8001eb6:	4413      	add	r3, r2
 8001eb8:	4a03      	ldr	r2, [pc, #12]	; (8001ec8 <WriteToBuff+0x12c>)
 8001eba:	f8c2 3800 	str.w	r3, [r2, #2048]	; 0x800
  return 0; //moved data to buffer
 8001ebe:	2300      	movs	r3, #0
}
 8001ec0:	4618      	mov	r0, r3
 8001ec2:	3708      	adds	r7, #8
 8001ec4:	46bd      	mov	sp, r7
 8001ec6:	bd80      	pop	{r7, pc}
 8001ec8:	2400032c 	.word	0x2400032c
 8001ecc:	240010d0 	.word	0x240010d0
 8001ed0:	24000b98 	.word	0x24000b98
 8001ed4:	2400072c 	.word	0x2400072c

08001ed8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001ed8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001edc:	f5ad 5def 	sub.w	sp, sp, #7648	; 0x1de0
 8001ee0:	b086      	sub	sp, #24
 8001ee2:	af22      	add	r7, sp, #136	; 0x88
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001ee4:	f002 fb66 	bl	80045b4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001ee8:	f001 fa96 	bl	8003418 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001eec:	f001 fdc2 	bl	8003a74 <MX_GPIO_Init>
  MX_DMA_Init();
 8001ef0:	f001 fda0 	bl	8003a34 <MX_DMA_Init>
  MX_SDMMC1_SD_Init();
 8001ef4:	f001 fc8e 	bl	8003814 <MX_SDMMC1_SD_Init>
  MX_FATFS_Init();
 8001ef8:	f011 f9f4 	bl	80132e4 <MX_FATFS_Init>
  MX_USB_DEVICE_Init();
 8001efc:	f016 fdf4 	bl	8018ae8 <MX_USB_DEVICE_Init>
  MX_FDCAN1_Init();
 8001f00:	f001 fb94 	bl	800362c <MX_FDCAN1_Init>
  MX_FDCAN2_Init();
 8001f04:	f001 fbf8 	bl	80036f8 <MX_FDCAN2_Init>
  MX_UART8_Init();
 8001f08:	f001 fcfc 	bl	8003904 <MX_UART8_Init>
  MX_USART3_UART_Init();
 8001f0c:	f001 fd46 	bl	800399c <MX_USART3_UART_Init>
  MX_SPI1_Init();
 8001f10:	f001 fca2 	bl	8003858 <MX_SPI1_Init>
  MX_RTC_Init();
 8001f14:	f001 fc54 	bl	80037c0 <MX_RTC_Init>
  /* USER CODE BEGIN 2 */
  //HAL_Delay(1000);//NEEDED FOR USB MASS STORAGE TO WORK
  HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_0);
 8001f18:	2101      	movs	r1, #1
 8001f1a:	48be      	ldr	r0, [pc, #760]	; (8002214 <main+0x33c>)
 8001f1c:	f006 f90f 	bl	800813e <HAL_GPIO_TogglePin>
  //Telemetry
  NRF24_begin(TELE_CE_GPIO_Port, TELE_CS_Pin, TELE_CE_Pin, hspi1);
 8001f20:	4cbd      	ldr	r4, [pc, #756]	; (8002218 <main+0x340>)
 8001f22:	4668      	mov	r0, sp
 8001f24:	1d23      	adds	r3, r4, #4
 8001f26:	2284      	movs	r2, #132	; 0x84
 8001f28:	4619      	mov	r1, r3
 8001f2a:	f017 fb15 	bl	8019558 <memcpy>
 8001f2e:	6823      	ldr	r3, [r4, #0]
 8001f30:	2201      	movs	r2, #1
 8001f32:	2102      	movs	r1, #2
 8001f34:	48b9      	ldr	r0, [pc, #740]	; (800221c <main+0x344>)
 8001f36:	f7fe ff53 	bl	8000de0 <NRF24_begin>
    //nrf24_DebugUART_Init(huart3);



    // TRANSMIT NO ACK //
    NRF24_stopListening();
 8001f3a:	f7ff f831 	bl	8000fa0 <NRF24_stopListening>
    NRF24_openWritingPipe(TxpipeAddrs);
 8001f3e:	4bb8      	ldr	r3, [pc, #736]	; (8002220 <main+0x348>)
 8001f40:	e9d3 3400 	ldrd	r3, r4, [r3]
 8001f44:	4618      	mov	r0, r3
 8001f46:	4621      	mov	r1, r4
 8001f48:	f7ff f88a 	bl	8001060 <NRF24_openWritingPipe>
    NRF24_setAutoAck(false);
 8001f4c:	2000      	movs	r0, #0
 8001f4e:	f7ff f913 	bl	8001178 <NRF24_setAutoAck>
    NRF24_setChannel(42);
 8001f52:	202a      	movs	r0, #42	; 0x2a
 8001f54:	f7ff f8c3 	bl	80010de <NRF24_setChannel>
    NRF24_setPayloadSize(32);
 8001f58:	2020      	movs	r0, #32
 8001f5a:	f7ff f8d5 	bl	8001108 <NRF24_setPayloadSize>

    printRadioSettings();
 8001f5e:	f7ff fa8b 	bl	8001478 <printRadioSettings>
  //END Telemetry
  printf("Starting\n");
 8001f62:	48b0      	ldr	r0, [pc, #704]	; (8002224 <main+0x34c>)
 8001f64:	f017 fc28 	bl	80197b8 <puts>
  FDCAN_Config(&hfdcan1);
 8001f68:	48af      	ldr	r0, [pc, #700]	; (8002228 <main+0x350>)
 8001f6a:	f7fe fb91 	bl	8000690 <FDCAN_Config>
  //GPS DMA
  HAL_UART_Receive_DMA(&huart3, (uint8_t *)rxBuf, BUFFLENGTH);
 8001f6e:	2246      	movs	r2, #70	; 0x46
 8001f70:	49ae      	ldr	r1, [pc, #696]	; (800222c <main+0x354>)
 8001f72:	48af      	ldr	r0, [pc, #700]	; (8002230 <main+0x358>)
 8001f74:	f00d ff22 	bl	800fdbc <HAL_UART_Receive_DMA>
  HAL_Delay(1000);//GPS required this in testing, maybe remove?
 8001f78:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001f7c:	f002 fbac 	bl	80046d8 <HAL_Delay>
  //variables required for 10Hz GPS
  uint16_t measRate = 100;
 8001f80:	2364      	movs	r3, #100	; 0x64
 8001f82:	f641 522a 	movw	r2, #7466	; 0x1d2a
 8001f86:	443a      	add	r2, r7
 8001f88:	8013      	strh	r3, [r2, #0]
  uint16_t navRate = 1;
 8001f8a:	2301      	movs	r3, #1
 8001f8c:	f641 5228 	movw	r2, #7464	; 0x1d28
 8001f90:	443a      	add	r2, r7
 8001f92:	8013      	strh	r3, [r2, #0]
  uint16_t timeRef = 0;
 8001f94:	2300      	movs	r3, #0
 8001f96:	f641 5226 	movw	r2, #7462	; 0x1d26
 8001f9a:	443a      	add	r2, r7
 8001f9c:	8013      	strh	r3, [r2, #0]
  gps_rate_config(&huart3, measRate, navRate, timeRef);
 8001f9e:	f641 5326 	movw	r3, #7462	; 0x1d26
 8001fa2:	443b      	add	r3, r7
 8001fa4:	881b      	ldrh	r3, [r3, #0]
 8001fa6:	f641 5228 	movw	r2, #7464	; 0x1d28
 8001faa:	443a      	add	r2, r7
 8001fac:	8812      	ldrh	r2, [r2, #0]
 8001fae:	f641 512a 	movw	r1, #7466	; 0x1d2a
 8001fb2:	4439      	add	r1, r7
 8001fb4:	8809      	ldrh	r1, [r1, #0]
 8001fb6:	489e      	ldr	r0, [pc, #632]	; (8002230 <main+0x358>)
 8001fb8:	f7fe fd54 	bl	8000a64 <gps_rate_config>

  gps_msg_config(&huart3, "DTM", 0);//ERROR
 8001fbc:	2200      	movs	r2, #0
 8001fbe:	499d      	ldr	r1, [pc, #628]	; (8002234 <main+0x35c>)
 8001fc0:	489b      	ldr	r0, [pc, #620]	; (8002230 <main+0x358>)
 8001fc2:	f7fe fcdf 	bl	8000984 <gps_msg_config>
  gps_msg_config(&huart3, "GAQ", 0);
 8001fc6:	2200      	movs	r2, #0
 8001fc8:	499b      	ldr	r1, [pc, #620]	; (8002238 <main+0x360>)
 8001fca:	4899      	ldr	r0, [pc, #612]	; (8002230 <main+0x358>)
 8001fcc:	f7fe fcda 	bl	8000984 <gps_msg_config>
  gps_msg_config(&huart3, "GBQ", 0);
 8001fd0:	2200      	movs	r2, #0
 8001fd2:	499a      	ldr	r1, [pc, #616]	; (800223c <main+0x364>)
 8001fd4:	4896      	ldr	r0, [pc, #600]	; (8002230 <main+0x358>)
 8001fd6:	f7fe fcd5 	bl	8000984 <gps_msg_config>
  gps_msg_config(&huart3, "GBS", 0);//ERROR
 8001fda:	2200      	movs	r2, #0
 8001fdc:	4998      	ldr	r1, [pc, #608]	; (8002240 <main+0x368>)
 8001fde:	4894      	ldr	r0, [pc, #592]	; (8002230 <main+0x358>)
 8001fe0:	f7fe fcd0 	bl	8000984 <gps_msg_config>
  gps_msg_config(&huart3, "GGA", 0);//ERROR
 8001fe4:	2200      	movs	r2, #0
 8001fe6:	4997      	ldr	r1, [pc, #604]	; (8002244 <main+0x36c>)
 8001fe8:	4891      	ldr	r0, [pc, #580]	; (8002230 <main+0x358>)
 8001fea:	f7fe fccb 	bl	8000984 <gps_msg_config>
  gps_msg_config(&huart3, "GLL", 0);//ERROR
 8001fee:	2200      	movs	r2, #0
 8001ff0:	4995      	ldr	r1, [pc, #596]	; (8002248 <main+0x370>)
 8001ff2:	488f      	ldr	r0, [pc, #572]	; (8002230 <main+0x358>)
 8001ff4:	f7fe fcc6 	bl	8000984 <gps_msg_config>
  gps_msg_config(&huart3, "GLQ", 0);
 8001ff8:	2200      	movs	r2, #0
 8001ffa:	4994      	ldr	r1, [pc, #592]	; (800224c <main+0x374>)
 8001ffc:	488c      	ldr	r0, [pc, #560]	; (8002230 <main+0x358>)
 8001ffe:	f7fe fcc1 	bl	8000984 <gps_msg_config>
  gps_msg_config(&huart3, "GNQ", 0);
 8002002:	2200      	movs	r2, #0
 8002004:	4992      	ldr	r1, [pc, #584]	; (8002250 <main+0x378>)
 8002006:	488a      	ldr	r0, [pc, #552]	; (8002230 <main+0x358>)
 8002008:	f7fe fcbc 	bl	8000984 <gps_msg_config>
  gps_msg_config(&huart3, "GNS", 0);//ERROR
 800200c:	2200      	movs	r2, #0
 800200e:	4991      	ldr	r1, [pc, #580]	; (8002254 <main+0x37c>)
 8002010:	4887      	ldr	r0, [pc, #540]	; (8002230 <main+0x358>)
 8002012:	f7fe fcb7 	bl	8000984 <gps_msg_config>
  gps_msg_config(&huart3, "GPQ", 0);
 8002016:	2200      	movs	r2, #0
 8002018:	498f      	ldr	r1, [pc, #572]	; (8002258 <main+0x380>)
 800201a:	4885      	ldr	r0, [pc, #532]	; (8002230 <main+0x358>)
 800201c:	f7fe fcb2 	bl	8000984 <gps_msg_config>
  gps_msg_config(&huart3, "GRS", 0);//ERROR
 8002020:	2200      	movs	r2, #0
 8002022:	498e      	ldr	r1, [pc, #568]	; (800225c <main+0x384>)
 8002024:	4882      	ldr	r0, [pc, #520]	; (8002230 <main+0x358>)
 8002026:	f7fe fcad 	bl	8000984 <gps_msg_config>
  gps_msg_config(&huart3, "GSA", 0);//ERROR
 800202a:	2200      	movs	r2, #0
 800202c:	498c      	ldr	r1, [pc, #560]	; (8002260 <main+0x388>)
 800202e:	4880      	ldr	r0, [pc, #512]	; (8002230 <main+0x358>)
 8002030:	f7fe fca8 	bl	8000984 <gps_msg_config>
  gps_msg_config(&huart3, "GST", 0);//ERROR
 8002034:	2200      	movs	r2, #0
 8002036:	498b      	ldr	r1, [pc, #556]	; (8002264 <main+0x38c>)
 8002038:	487d      	ldr	r0, [pc, #500]	; (8002230 <main+0x358>)
 800203a:	f7fe fca3 	bl	8000984 <gps_msg_config>
  gps_msg_config(&huart3, "GSV", 0);//ERROR
 800203e:	2200      	movs	r2, #0
 8002040:	4989      	ldr	r1, [pc, #548]	; (8002268 <main+0x390>)
 8002042:	487b      	ldr	r0, [pc, #492]	; (8002230 <main+0x358>)
 8002044:	f7fe fc9e 	bl	8000984 <gps_msg_config>
  gps_msg_config(&huart3, "RLM", 0);
 8002048:	2200      	movs	r2, #0
 800204a:	4988      	ldr	r1, [pc, #544]	; (800226c <main+0x394>)
 800204c:	4878      	ldr	r0, [pc, #480]	; (8002230 <main+0x358>)
 800204e:	f7fe fc99 	bl	8000984 <gps_msg_config>
  gps_msg_config(&huart3, "RMC", 1);//ERROR
 8002052:	2201      	movs	r2, #1
 8002054:	4986      	ldr	r1, [pc, #536]	; (8002270 <main+0x398>)
 8002056:	4876      	ldr	r0, [pc, #472]	; (8002230 <main+0x358>)
 8002058:	f7fe fc94 	bl	8000984 <gps_msg_config>
  gps_msg_config(&huart3, "TXT", 0);
 800205c:	2200      	movs	r2, #0
 800205e:	4985      	ldr	r1, [pc, #532]	; (8002274 <main+0x39c>)
 8002060:	4873      	ldr	r0, [pc, #460]	; (8002230 <main+0x358>)
 8002062:	f7fe fc8f 	bl	8000984 <gps_msg_config>
  gps_msg_config(&huart3, "VLW", 0);//ERROR
 8002066:	2200      	movs	r2, #0
 8002068:	4983      	ldr	r1, [pc, #524]	; (8002278 <main+0x3a0>)
 800206a:	4871      	ldr	r0, [pc, #452]	; (8002230 <main+0x358>)
 800206c:	f7fe fc8a 	bl	8000984 <gps_msg_config>
  gps_msg_config(&huart3, "VTG", 0);//ERROR
 8002070:	2200      	movs	r2, #0
 8002072:	4982      	ldr	r1, [pc, #520]	; (800227c <main+0x3a4>)
 8002074:	486e      	ldr	r0, [pc, #440]	; (8002230 <main+0x358>)
 8002076:	f7fe fc85 	bl	8000984 <gps_msg_config>
  gps_msg_config(&huart3, "ZDA", 0);//ERROR
 800207a:	2200      	movs	r2, #0
 800207c:	4980      	ldr	r1, [pc, #512]	; (8002280 <main+0x3a8>)
 800207e:	486c      	ldr	r0, [pc, #432]	; (8002230 <main+0x358>)
 8002080:	f7fe fc80 	bl	8000984 <gps_msg_config>

  if(f_mount(&myFATAFS, SDPath, 1) == FR_OK){
 8002084:	2201      	movs	r2, #1
 8002086:	497f      	ldr	r1, [pc, #508]	; (8002284 <main+0x3ac>)
 8002088:	487f      	ldr	r0, [pc, #508]	; (8002288 <main+0x3b0>)
 800208a:	f015 ff71 	bl	8017f70 <f_mount>
 800208e:	4603      	mov	r3, r0
 8002090:	2b00      	cmp	r3, #0
 8002092:	f040 8151 	bne.w	8002338 <main+0x460>
  	  //HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_0);
  	  char Filename[20] = "test";
 8002096:	4a7d      	ldr	r2, [pc, #500]	; (800228c <main+0x3b4>)
 8002098:	f641 5370 	movw	r3, #7536	; 0x1d70
 800209c:	443b      	add	r3, r7
 800209e:	441a      	add	r2, r3
 80020a0:	497b      	ldr	r1, [pc, #492]	; (8002290 <main+0x3b8>)
 80020a2:	4613      	mov	r3, r2
 80020a4:	c903      	ldmia	r1, {r0, r1}
 80020a6:	6018      	str	r0, [r3, #0]
 80020a8:	3304      	adds	r3, #4
 80020aa:	7019      	strb	r1, [r3, #0]
 80020ac:	1d53      	adds	r3, r2, #5
 80020ae:	2200      	movs	r2, #0
 80020b0:	601a      	str	r2, [r3, #0]
 80020b2:	605a      	str	r2, [r3, #4]
 80020b4:	609a      	str	r2, [r3, #8]
 80020b6:	f8c3 200b 	str.w	r2, [r3, #11]
      char FilePath[150];
      char ConfigPath[] ="Config.csv\0";
 80020ba:	4b76      	ldr	r3, [pc, #472]	; (8002294 <main+0x3bc>)
 80020bc:	f641 5270 	movw	r2, #7536	; 0x1d70
 80020c0:	443a      	add	r2, r7
 80020c2:	4413      	add	r3, r2
 80020c4:	4a74      	ldr	r2, [pc, #464]	; (8002298 <main+0x3c0>)
 80020c6:	ca07      	ldmia	r2, {r0, r1, r2}
 80020c8:	e883 0007 	stmia.w	r3, {r0, r1, r2}
      char ConfigParams[1000];

      //Tries to open config File
      if(f_open(&Config, ConfigPath, FA_READ) == FR_NO_FILE){
 80020cc:	4b71      	ldr	r3, [pc, #452]	; (8002294 <main+0x3bc>)
 80020ce:	f641 5270 	movw	r2, #7536	; 0x1d70
 80020d2:	443a      	add	r2, r7
 80020d4:	4413      	add	r3, r2
 80020d6:	2201      	movs	r2, #1
 80020d8:	4619      	mov	r1, r3
 80020da:	4870      	ldr	r0, [pc, #448]	; (800229c <main+0x3c4>)
 80020dc:	f015 ff8e 	bl	8017ffc <f_open>
 80020e0:	4603      	mov	r3, r0
 80020e2:	2b04      	cmp	r3, #4
 80020e4:	d156      	bne.n	8002194 <main+0x2bc>
        //If file doesnt exist creates a file using hard coded defualts and passes those to internal config array
        f_open(&Config, ConfigPath, FA_WRITE | FA_CREATE_ALWAYS);
 80020e6:	4b6b      	ldr	r3, [pc, #428]	; (8002294 <main+0x3bc>)
 80020e8:	f641 5270 	movw	r2, #7536	; 0x1d70
 80020ec:	443a      	add	r2, r7
 80020ee:	4413      	add	r3, r2
 80020f0:	220a      	movs	r2, #10
 80020f2:	4619      	mov	r1, r3
 80020f4:	4869      	ldr	r0, [pc, #420]	; (800229c <main+0x3c4>)
 80020f6:	f015 ff81 	bl	8017ffc <f_open>

        sprintf(ConfigParams, "ID,Device,Bytes,Rate(HZ),Type,Description\n");
 80020fa:	4b69      	ldr	r3, [pc, #420]	; (80022a0 <main+0x3c8>)
 80020fc:	f641 5270 	movw	r2, #7536	; 0x1d70
 8002100:	443a      	add	r2, r7
 8002102:	4413      	add	r3, r2
 8002104:	4a67      	ldr	r2, [pc, #412]	; (80022a4 <main+0x3cc>)
 8002106:	461c      	mov	r4, r3
 8002108:	4615      	mov	r5, r2
 800210a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800210c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800210e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002110:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002112:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8002116:	c403      	stmia	r4!, {r0, r1}
 8002118:	8022      	strh	r2, [r4, #0]
 800211a:	3402      	adds	r4, #2
 800211c:	0c13      	lsrs	r3, r2, #16
 800211e:	7023      	strb	r3, [r4, #0]
        sprintf(ConfigParams + strlen(ConfigParams),"0x50,Datalogger,8,0.20,uint32_t,HIGH:FileNO LOW:millis,\n");
 8002120:	4b5f      	ldr	r3, [pc, #380]	; (80022a0 <main+0x3c8>)
 8002122:	f641 5270 	movw	r2, #7536	; 0x1d70
 8002126:	443a      	add	r2, r7
 8002128:	4413      	add	r3, r2
 800212a:	4618      	mov	r0, r3
 800212c:	f7fe f8d8 	bl	80002e0 <strlen>
 8002130:	4602      	mov	r2, r0
 8002132:	4b5b      	ldr	r3, [pc, #364]	; (80022a0 <main+0x3c8>)
 8002134:	f641 5170 	movw	r1, #7536	; 0x1d70
 8002138:	4439      	add	r1, r7
 800213a:	440b      	add	r3, r1
 800213c:	4413      	add	r3, r2
 800213e:	4a5a      	ldr	r2, [pc, #360]	; (80022a8 <main+0x3d0>)
 8002140:	4614      	mov	r4, r2
 8002142:	469c      	mov	ip, r3
 8002144:	f104 0e30 	add.w	lr, r4, #48	; 0x30
 8002148:	4665      	mov	r5, ip
 800214a:	4626      	mov	r6, r4
 800214c:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 800214e:	6028      	str	r0, [r5, #0]
 8002150:	6069      	str	r1, [r5, #4]
 8002152:	60aa      	str	r2, [r5, #8]
 8002154:	60eb      	str	r3, [r5, #12]
 8002156:	3410      	adds	r4, #16
 8002158:	f10c 0c10 	add.w	ip, ip, #16
 800215c:	4574      	cmp	r4, lr
 800215e:	d1f3      	bne.n	8002148 <main+0x270>
 8002160:	4662      	mov	r2, ip
 8002162:	4623      	mov	r3, r4
 8002164:	cb03      	ldmia	r3!, {r0, r1}
 8002166:	6010      	str	r0, [r2, #0]
 8002168:	6051      	str	r1, [r2, #4]
 800216a:	781b      	ldrb	r3, [r3, #0]
 800216c:	7213      	strb	r3, [r2, #8]

        f_write(&Config, ConfigParams, strlen(ConfigParams), &ConfByteW);
 800216e:	4b4c      	ldr	r3, [pc, #304]	; (80022a0 <main+0x3c8>)
 8002170:	f641 5270 	movw	r2, #7536	; 0x1d70
 8002174:	443a      	add	r2, r7
 8002176:	4413      	add	r3, r2
 8002178:	4618      	mov	r0, r3
 800217a:	f7fe f8b1 	bl	80002e0 <strlen>
 800217e:	4602      	mov	r2, r0
 8002180:	4947      	ldr	r1, [pc, #284]	; (80022a0 <main+0x3c8>)
 8002182:	f641 5370 	movw	r3, #7536	; 0x1d70
 8002186:	443b      	add	r3, r7
 8002188:	4419      	add	r1, r3
 800218a:	4b48      	ldr	r3, [pc, #288]	; (80022ac <main+0x3d4>)
 800218c:	4843      	ldr	r0, [pc, #268]	; (800229c <main+0x3c4>)
 800218e:	f016 fa32 	bl	80185f6 <f_write>
 8002192:	e011      	b.n	80021b8 <main+0x2e0>
      }else{
        //If file does exist reads in config parameters to internal config array
        f_read(&Config, ConfigParams, strlen(ConfigParams), &ConfByteR);
 8002194:	4b42      	ldr	r3, [pc, #264]	; (80022a0 <main+0x3c8>)
 8002196:	f641 5270 	movw	r2, #7536	; 0x1d70
 800219a:	443a      	add	r2, r7
 800219c:	4413      	add	r3, r2
 800219e:	4618      	mov	r0, r3
 80021a0:	f7fe f89e 	bl	80002e0 <strlen>
 80021a4:	4602      	mov	r2, r0
 80021a6:	493e      	ldr	r1, [pc, #248]	; (80022a0 <main+0x3c8>)
 80021a8:	f641 5370 	movw	r3, #7536	; 0x1d70
 80021ac:	443b      	add	r3, r7
 80021ae:	4419      	add	r1, r3
 80021b0:	4b3f      	ldr	r3, [pc, #252]	; (80022b0 <main+0x3d8>)
 80021b2:	483a      	ldr	r0, [pc, #232]	; (800229c <main+0x3c4>)
 80021b4:	f016 f8e0 	bl	8018378 <f_read>
      }
      f_close(&Config);
 80021b8:	4838      	ldr	r0, [pc, #224]	; (800229c <main+0x3c4>)
 80021ba:	f016 fc0f 	bl	80189dc <f_close>
      //MAKE NEW FILE INCREMENTED BY 1
      
      strcpy(FilePath,Filename);
 80021be:	4a33      	ldr	r2, [pc, #204]	; (800228c <main+0x3b4>)
 80021c0:	f641 5370 	movw	r3, #7536	; 0x1d70
 80021c4:	443b      	add	r3, r7
 80021c6:	441a      	add	r2, r3
 80021c8:	4b3a      	ldr	r3, [pc, #232]	; (80022b4 <main+0x3dc>)
 80021ca:	f641 5170 	movw	r1, #7536	; 0x1d70
 80021ce:	4439      	add	r1, r7
 80021d0:	440b      	add	r3, r1
 80021d2:	4611      	mov	r1, r2
 80021d4:	4618      	mov	r0, r3
 80021d6:	f017 fb5b 	bl	8019890 <strcpy>
      int FilePathLen = strlen(Filename);
 80021da:	4b2c      	ldr	r3, [pc, #176]	; (800228c <main+0x3b4>)
 80021dc:	f641 5270 	movw	r2, #7536	; 0x1d70
 80021e0:	443a      	add	r2, r7
 80021e2:	4413      	add	r3, r2
 80021e4:	4618      	mov	r0, r3
 80021e6:	f7fe f87b 	bl	80002e0 <strlen>
 80021ea:	4603      	mov	r3, r0
 80021ec:	f507 52e9 	add.w	r2, r7, #7456	; 0x1d20
 80021f0:	6013      	str	r3, [r2, #0]
      sprintf(FilePath + FilePathLen, "%i.csv",fileNum);
 80021f2:	f507 53e9 	add.w	r3, r7, #7456	; 0x1d20
 80021f6:	681a      	ldr	r2, [r3, #0]
 80021f8:	4b2e      	ldr	r3, [pc, #184]	; (80022b4 <main+0x3dc>)
 80021fa:	f641 5170 	movw	r1, #7536	; 0x1d70
 80021fe:	4439      	add	r1, r7
 8002200:	440b      	add	r3, r1
 8002202:	1898      	adds	r0, r3, r2
 8002204:	4b2c      	ldr	r3, [pc, #176]	; (80022b8 <main+0x3e0>)
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	461a      	mov	r2, r3
 800220a:	492c      	ldr	r1, [pc, #176]	; (80022bc <main+0x3e4>)
 800220c:	f017 fb20 	bl	8019850 <siprintf>
      while(f_open(&myFILE, FilePath, FA_READ) == FR_OK){
 8002210:	e07b      	b.n	800230a <main+0x432>
 8002212:	bf00      	nop
 8002214:	58020400 	.word	0x58020400
 8002218:	24001640 	.word	0x24001640
 800221c:	58020000 	.word	0x58020000
 8002220:	24000000 	.word	0x24000000
 8002224:	0801adc8 	.word	0x0801adc8
 8002228:	24001514 	.word	0x24001514
 800222c:	24001304 	.word	0x24001304
 8002230:	240013c4 	.word	0x240013c4
 8002234:	0801add4 	.word	0x0801add4
 8002238:	0801add8 	.word	0x0801add8
 800223c:	0801addc 	.word	0x0801addc
 8002240:	0801ade0 	.word	0x0801ade0
 8002244:	0801ade4 	.word	0x0801ade4
 8002248:	0801ade8 	.word	0x0801ade8
 800224c:	0801adec 	.word	0x0801adec
 8002250:	0801adf0 	.word	0x0801adf0
 8002254:	0801adf4 	.word	0x0801adf4
 8002258:	0801adf8 	.word	0x0801adf8
 800225c:	0801adfc 	.word	0x0801adfc
 8002260:	0801ae00 	.word	0x0801ae00
 8002264:	0801ae04 	.word	0x0801ae04
 8002268:	0801ae08 	.word	0x0801ae08
 800226c:	0801ae0c 	.word	0x0801ae0c
 8002270:	0801ae10 	.word	0x0801ae10
 8002274:	0801ae14 	.word	0x0801ae14
 8002278:	0801ae18 	.word	0x0801ae18
 800227c:	0801ae1c 	.word	0x0801ae1c
 8002280:	0801ae20 	.word	0x0801ae20
 8002284:	24001770 	.word	0x24001770
 8002288:	24000dd0 	.word	0x24000dd0
 800228c:	ffffe744 	.word	0xffffe744
 8002290:	0801aee8 	.word	0x0801aee8
 8002294:	ffffe738 	.word	0xffffe738
 8002298:	0801aefc 	.word	0x0801aefc
 800229c:	240010d4 	.word	0x240010d4
 80022a0:	ffffe328 	.word	0xffffe328
 80022a4:	0801ae24 	.word	0x0801ae24
 80022a8:	0801ae50 	.word	0x0801ae50
 80022ac:	24000dcc 	.word	0x24000dcc
 80022b0:	24000dc8 	.word	0x24000dc8
 80022b4:	ffffe290 	.word	0xffffe290
 80022b8:	2400000c 	.word	0x2400000c
 80022bc:	0801ae8c 	.word	0x0801ae8c
    	  f_close(&myFILE);
 80022c0:	48b4      	ldr	r0, [pc, #720]	; (8002594 <main+0x6bc>)
 80022c2:	f016 fb8b 	bl	80189dc <f_close>
        fileNum++;
 80022c6:	4bb4      	ldr	r3, [pc, #720]	; (8002598 <main+0x6c0>)
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	3301      	adds	r3, #1
 80022cc:	4ab2      	ldr	r2, [pc, #712]	; (8002598 <main+0x6c0>)
 80022ce:	6013      	str	r3, [r2, #0]
        strcpy(FilePath,Filename);
 80022d0:	4ab2      	ldr	r2, [pc, #712]	; (800259c <main+0x6c4>)
 80022d2:	f641 5370 	movw	r3, #7536	; 0x1d70
 80022d6:	443b      	add	r3, r7
 80022d8:	441a      	add	r2, r3
 80022da:	4bb1      	ldr	r3, [pc, #708]	; (80025a0 <main+0x6c8>)
 80022dc:	f641 5170 	movw	r1, #7536	; 0x1d70
 80022e0:	4439      	add	r1, r7
 80022e2:	440b      	add	r3, r1
 80022e4:	4611      	mov	r1, r2
 80022e6:	4618      	mov	r0, r3
 80022e8:	f017 fad2 	bl	8019890 <strcpy>
        sprintf(FilePath + FilePathLen, "%i.csv",fileNum);
 80022ec:	f507 53e9 	add.w	r3, r7, #7456	; 0x1d20
 80022f0:	681a      	ldr	r2, [r3, #0]
 80022f2:	4bab      	ldr	r3, [pc, #684]	; (80025a0 <main+0x6c8>)
 80022f4:	f641 5170 	movw	r1, #7536	; 0x1d70
 80022f8:	4439      	add	r1, r7
 80022fa:	440b      	add	r3, r1
 80022fc:	1898      	adds	r0, r3, r2
 80022fe:	4ba6      	ldr	r3, [pc, #664]	; (8002598 <main+0x6c0>)
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	461a      	mov	r2, r3
 8002304:	49a7      	ldr	r1, [pc, #668]	; (80025a4 <main+0x6cc>)
 8002306:	f017 faa3 	bl	8019850 <siprintf>
      while(f_open(&myFILE, FilePath, FA_READ) == FR_OK){
 800230a:	4ba5      	ldr	r3, [pc, #660]	; (80025a0 <main+0x6c8>)
 800230c:	f641 5270 	movw	r2, #7536	; 0x1d70
 8002310:	443a      	add	r2, r7
 8002312:	4413      	add	r3, r2
 8002314:	2201      	movs	r2, #1
 8002316:	4619      	mov	r1, r3
 8002318:	489e      	ldr	r0, [pc, #632]	; (8002594 <main+0x6bc>)
 800231a:	f015 fe6f 	bl	8017ffc <f_open>
 800231e:	4603      	mov	r3, r0
 8002320:	2b00      	cmp	r3, #0
 8002322:	d0cd      	beq.n	80022c0 <main+0x3e8>
      }
      f_open(&myFILE, FilePath, FA_WRITE | FA_CREATE_ALWAYS);
 8002324:	4b9e      	ldr	r3, [pc, #632]	; (80025a0 <main+0x6c8>)
 8002326:	f641 5270 	movw	r2, #7536	; 0x1d70
 800232a:	443a      	add	r2, r7
 800232c:	4413      	add	r3, r2
 800232e:	220a      	movs	r2, #10
 8002330:	4619      	mov	r1, r3
 8002332:	4898      	ldr	r0, [pc, #608]	; (8002594 <main+0x6bc>)
 8002334:	f015 fe62 	bl	8017ffc <f_open>
  extern int GPS_flag;
  extern int FDCAN_Flag;
  extern int CAN_Flag;


  CAN_FD_FRAME FDBuffer[50] = {0};
 8002338:	4b9b      	ldr	r3, [pc, #620]	; (80025a8 <main+0x6d0>)
 800233a:	f641 5270 	movw	r2, #7536	; 0x1d70
 800233e:	443a      	add	r2, r7
 8002340:	4413      	add	r3, r2
 8002342:	4618      	mov	r0, r3
 8002344:	f44f 637a 	mov.w	r3, #4000	; 0xfa0
 8002348:	461a      	mov	r2, r3
 800234a:	2100      	movs	r1, #0
 800234c:	f017 f90f 	bl	801956e <memset>
  CAN_FRAME Buffer[50] = {0};
 8002350:	f507 630b 	add.w	r3, r7, #2224	; 0x8b0
 8002354:	4618      	mov	r0, r3
 8002356:	f44f 6396 	mov.w	r3, #1200	; 0x4b0
 800235a:	461a      	mov	r2, r3
 800235c:	2100      	movs	r1, #0
 800235e:	f017 f906 	bl	801956e <memset>
  uint32_t Tele_IDs[50] = {0};
 8002362:	4b92      	ldr	r3, [pc, #584]	; (80025ac <main+0x6d4>)
 8002364:	f641 5270 	movw	r2, #7536	; 0x1d70
 8002368:	443a      	add	r2, r7
 800236a:	4413      	add	r3, r2
 800236c:	4618      	mov	r0, r3
 800236e:	23c8      	movs	r3, #200	; 0xc8
 8002370:	461a      	mov	r2, r3
 8002372:	2100      	movs	r1, #0
 8002374:	f017 f8fb 	bl	801956e <memset>
  Tele_IDs[0] = 0x321;
 8002378:	4b8c      	ldr	r3, [pc, #560]	; (80025ac <main+0x6d4>)
 800237a:	f641 5270 	movw	r2, #7536	; 0x1d70
 800237e:	443a      	add	r2, r7
 8002380:	4413      	add	r3, r2
 8002382:	f240 3221 	movw	r2, #801	; 0x321
 8002386:	601a      	str	r2, [r3, #0]

  sTime.SecondFraction = 999;
 8002388:	4b89      	ldr	r3, [pc, #548]	; (80025b0 <main+0x6d8>)
 800238a:	f240 32e7 	movw	r2, #999	; 0x3e7
 800238e:	609a      	str	r2, [r3, #8]
  uint32_t LocalTime = HAL_GetTick();
 8002390:	f002 f996 	bl	80046c0 <HAL_GetTick>
 8002394:	f641 531c 	movw	r3, #7452	; 0x1d1c
 8002398:	443b      	add	r3, r7
 800239a:	6018      	str	r0, [r3, #0]
  HAL_RTC_GetTime(&hrtc, &sTime, RTC_FORMAT_BIN);
 800239c:	2200      	movs	r2, #0
 800239e:	4984      	ldr	r1, [pc, #528]	; (80025b0 <main+0x6d8>)
 80023a0:	4884      	ldr	r0, [pc, #528]	; (80025b4 <main+0x6dc>)
 80023a2:	f00a f9ef 	bl	800c784 <HAL_RTC_GetTime>
  HAL_RTC_GetDate(&hrtc, &sDate, RTC_FORMAT_BIN);
 80023a6:	2200      	movs	r2, #0
 80023a8:	4983      	ldr	r1, [pc, #524]	; (80025b8 <main+0x6e0>)
 80023aa:	4882      	ldr	r0, [pc, #520]	; (80025b4 <main+0x6dc>)
 80023ac:	f00a face 	bl	800c94c <HAL_RTC_GetDate>

  sTime.SubSeconds -= LocalTime % 1000;
 80023b0:	4b7f      	ldr	r3, [pc, #508]	; (80025b0 <main+0x6d8>)
 80023b2:	6859      	ldr	r1, [r3, #4]
 80023b4:	f641 531c 	movw	r3, #7452	; 0x1d1c
 80023b8:	443b      	add	r3, r7
 80023ba:	681a      	ldr	r2, [r3, #0]
 80023bc:	4b7f      	ldr	r3, [pc, #508]	; (80025bc <main+0x6e4>)
 80023be:	fba3 0302 	umull	r0, r3, r3, r2
 80023c2:	099b      	lsrs	r3, r3, #6
 80023c4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80023c8:	fb00 f303 	mul.w	r3, r0, r3
 80023cc:	1ad3      	subs	r3, r2, r3
 80023ce:	1acb      	subs	r3, r1, r3
 80023d0:	4a77      	ldr	r2, [pc, #476]	; (80025b0 <main+0x6d8>)
 80023d2:	6053      	str	r3, [r2, #4]
  LocalTime = LocalTime/1000;
 80023d4:	f641 531c 	movw	r3, #7452	; 0x1d1c
 80023d8:	443b      	add	r3, r7
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	4a77      	ldr	r2, [pc, #476]	; (80025bc <main+0x6e4>)
 80023de:	fba2 2303 	umull	r2, r3, r2, r3
 80023e2:	099b      	lsrs	r3, r3, #6
 80023e4:	f641 521c 	movw	r2, #7452	; 0x1d1c
 80023e8:	443a      	add	r2, r7
 80023ea:	6013      	str	r3, [r2, #0]

  if(sTime.Seconds < LocalTime % 60){
 80023ec:	4b70      	ldr	r3, [pc, #448]	; (80025b0 <main+0x6d8>)
 80023ee:	789b      	ldrb	r3, [r3, #2]
 80023f0:	4618      	mov	r0, r3
 80023f2:	f641 531c 	movw	r3, #7452	; 0x1d1c
 80023f6:	443b      	add	r3, r7
 80023f8:	6819      	ldr	r1, [r3, #0]
 80023fa:	4b71      	ldr	r3, [pc, #452]	; (80025c0 <main+0x6e8>)
 80023fc:	fba3 2301 	umull	r2, r3, r3, r1
 8002400:	095a      	lsrs	r2, r3, #5
 8002402:	4613      	mov	r3, r2
 8002404:	011b      	lsls	r3, r3, #4
 8002406:	1a9b      	subs	r3, r3, r2
 8002408:	009b      	lsls	r3, r3, #2
 800240a:	1aca      	subs	r2, r1, r3
 800240c:	4290      	cmp	r0, r2
 800240e:	d20b      	bcs.n	8002428 <main+0x550>
	  sTime.Seconds += 60;
 8002410:	4b67      	ldr	r3, [pc, #412]	; (80025b0 <main+0x6d8>)
 8002412:	789b      	ldrb	r3, [r3, #2]
 8002414:	333c      	adds	r3, #60	; 0x3c
 8002416:	b2da      	uxtb	r2, r3
 8002418:	4b65      	ldr	r3, [pc, #404]	; (80025b0 <main+0x6d8>)
 800241a:	709a      	strb	r2, [r3, #2]
	  sTime.Minutes -= 1;
 800241c:	4b64      	ldr	r3, [pc, #400]	; (80025b0 <main+0x6d8>)
 800241e:	785b      	ldrb	r3, [r3, #1]
 8002420:	3b01      	subs	r3, #1
 8002422:	b2da      	uxtb	r2, r3
 8002424:	4b62      	ldr	r3, [pc, #392]	; (80025b0 <main+0x6d8>)
 8002426:	705a      	strb	r2, [r3, #1]
  }
  sTime.Seconds -= LocalTime % 60;
 8002428:	4b61      	ldr	r3, [pc, #388]	; (80025b0 <main+0x6d8>)
 800242a:	7898      	ldrb	r0, [r3, #2]
 800242c:	f641 531c 	movw	r3, #7452	; 0x1d1c
 8002430:	443b      	add	r3, r7
 8002432:	6819      	ldr	r1, [r3, #0]
 8002434:	4b62      	ldr	r3, [pc, #392]	; (80025c0 <main+0x6e8>)
 8002436:	fba3 2301 	umull	r2, r3, r3, r1
 800243a:	095a      	lsrs	r2, r3, #5
 800243c:	4613      	mov	r3, r2
 800243e:	011b      	lsls	r3, r3, #4
 8002440:	1a9b      	subs	r3, r3, r2
 8002442:	009b      	lsls	r3, r3, #2
 8002444:	1aca      	subs	r2, r1, r3
 8002446:	b2d3      	uxtb	r3, r2
 8002448:	1ac3      	subs	r3, r0, r3
 800244a:	b2da      	uxtb	r2, r3
 800244c:	4b58      	ldr	r3, [pc, #352]	; (80025b0 <main+0x6d8>)
 800244e:	709a      	strb	r2, [r3, #2]
  LocalTime = LocalTime/60;
 8002450:	f641 531c 	movw	r3, #7452	; 0x1d1c
 8002454:	443b      	add	r3, r7
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	4a59      	ldr	r2, [pc, #356]	; (80025c0 <main+0x6e8>)
 800245a:	fba2 2303 	umull	r2, r3, r2, r3
 800245e:	095b      	lsrs	r3, r3, #5
 8002460:	f641 521c 	movw	r2, #7452	; 0x1d1c
 8002464:	443a      	add	r2, r7
 8002466:	6013      	str	r3, [r2, #0]

  if(sTime.Minutes < LocalTime % 60){
 8002468:	4b51      	ldr	r3, [pc, #324]	; (80025b0 <main+0x6d8>)
 800246a:	785b      	ldrb	r3, [r3, #1]
 800246c:	4618      	mov	r0, r3
 800246e:	f641 531c 	movw	r3, #7452	; 0x1d1c
 8002472:	443b      	add	r3, r7
 8002474:	6819      	ldr	r1, [r3, #0]
 8002476:	4b52      	ldr	r3, [pc, #328]	; (80025c0 <main+0x6e8>)
 8002478:	fba3 2301 	umull	r2, r3, r3, r1
 800247c:	095a      	lsrs	r2, r3, #5
 800247e:	4613      	mov	r3, r2
 8002480:	011b      	lsls	r3, r3, #4
 8002482:	1a9b      	subs	r3, r3, r2
 8002484:	009b      	lsls	r3, r3, #2
 8002486:	1aca      	subs	r2, r1, r3
 8002488:	4290      	cmp	r0, r2
 800248a:	d20b      	bcs.n	80024a4 <main+0x5cc>
	  sTime.Minutes += 60;
 800248c:	4b48      	ldr	r3, [pc, #288]	; (80025b0 <main+0x6d8>)
 800248e:	785b      	ldrb	r3, [r3, #1]
 8002490:	333c      	adds	r3, #60	; 0x3c
 8002492:	b2da      	uxtb	r2, r3
 8002494:	4b46      	ldr	r3, [pc, #280]	; (80025b0 <main+0x6d8>)
 8002496:	705a      	strb	r2, [r3, #1]
	  sTime.Hours -= 1;
 8002498:	4b45      	ldr	r3, [pc, #276]	; (80025b0 <main+0x6d8>)
 800249a:	781b      	ldrb	r3, [r3, #0]
 800249c:	3b01      	subs	r3, #1
 800249e:	b2da      	uxtb	r2, r3
 80024a0:	4b43      	ldr	r3, [pc, #268]	; (80025b0 <main+0x6d8>)
 80024a2:	701a      	strb	r2, [r3, #0]
  }
  sTime.Minutes -= LocalTime % 60;
 80024a4:	4b42      	ldr	r3, [pc, #264]	; (80025b0 <main+0x6d8>)
 80024a6:	7858      	ldrb	r0, [r3, #1]
 80024a8:	f641 531c 	movw	r3, #7452	; 0x1d1c
 80024ac:	443b      	add	r3, r7
 80024ae:	6819      	ldr	r1, [r3, #0]
 80024b0:	4b43      	ldr	r3, [pc, #268]	; (80025c0 <main+0x6e8>)
 80024b2:	fba3 2301 	umull	r2, r3, r3, r1
 80024b6:	095a      	lsrs	r2, r3, #5
 80024b8:	4613      	mov	r3, r2
 80024ba:	011b      	lsls	r3, r3, #4
 80024bc:	1a9b      	subs	r3, r3, r2
 80024be:	009b      	lsls	r3, r3, #2
 80024c0:	1aca      	subs	r2, r1, r3
 80024c2:	b2d3      	uxtb	r3, r2
 80024c4:	1ac3      	subs	r3, r0, r3
 80024c6:	b2da      	uxtb	r2, r3
 80024c8:	4b39      	ldr	r3, [pc, #228]	; (80025b0 <main+0x6d8>)
 80024ca:	705a      	strb	r2, [r3, #1]
  LocalTime = LocalTime/60;
 80024cc:	f641 531c 	movw	r3, #7452	; 0x1d1c
 80024d0:	443b      	add	r3, r7
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	4a3a      	ldr	r2, [pc, #232]	; (80025c0 <main+0x6e8>)
 80024d6:	fba2 2303 	umull	r2, r3, r2, r3
 80024da:	095b      	lsrs	r3, r3, #5
 80024dc:	f641 521c 	movw	r2, #7452	; 0x1d1c
 80024e0:	443a      	add	r2, r7
 80024e2:	6013      	str	r3, [r2, #0]
  sTime.Hours -= LocalTime % 60;
 80024e4:	4b32      	ldr	r3, [pc, #200]	; (80025b0 <main+0x6d8>)
 80024e6:	7818      	ldrb	r0, [r3, #0]
 80024e8:	f641 531c 	movw	r3, #7452	; 0x1d1c
 80024ec:	443b      	add	r3, r7
 80024ee:	6819      	ldr	r1, [r3, #0]
 80024f0:	4b33      	ldr	r3, [pc, #204]	; (80025c0 <main+0x6e8>)
 80024f2:	fba3 2301 	umull	r2, r3, r3, r1
 80024f6:	095a      	lsrs	r2, r3, #5
 80024f8:	4613      	mov	r3, r2
 80024fa:	011b      	lsls	r3, r3, #4
 80024fc:	1a9b      	subs	r3, r3, r2
 80024fe:	009b      	lsls	r3, r3, #2
 8002500:	1aca      	subs	r2, r1, r3
 8002502:	b2d3      	uxtb	r3, r2
 8002504:	1ac3      	subs	r3, r0, r3
 8002506:	b2da      	uxtb	r2, r3
 8002508:	4b29      	ldr	r3, [pc, #164]	; (80025b0 <main+0x6d8>)
 800250a:	701a      	strb	r2, [r3, #0]
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  char CanWrite[400];
  int CW = 0;
 800250c:	2300      	movs	r3, #0
 800250e:	f641 526c 	movw	r2, #7532	; 0x1d6c
 8002512:	443a      	add	r2, r7
 8002514:	6013      	str	r3, [r2, #0]
  char CanFDWrite[400];
  int CFDW = 0;
 8002516:	2300      	movs	r3, #0
 8002518:	f641 5268 	movw	r2, #7528	; 0x1d68
 800251c:	443a      	add	r2, r7
 800251e:	6013      	str	r3, [r2, #0]
  int AllowedTele = 1;
 8002520:	2301      	movs	r3, #1
 8002522:	f641 5218 	movw	r2, #7448	; 0x1d18
 8002526:	443a      	add	r2, r7
 8002528:	6013      	str	r3, [r2, #0]
  int BuffIndex = 0;
 800252a:	2300      	movs	r3, #0
 800252c:	f641 5264 	movw	r2, #7524	; 0x1d64
 8002530:	443a      	add	r2, r7
 8002532:	6013      	str	r3, [r2, #0]
  int Txcnt = 0;
 8002534:	2300      	movs	r3, #0
 8002536:	f507 52eb 	add.w	r2, r7, #7520	; 0x1d60
 800253a:	6013      	str	r3, [r2, #0]
  int TxDataSpace = 0;
 800253c:	2300      	movs	r3, #0
 800253e:	f641 5214 	movw	r2, #7444	; 0x1d14
 8002542:	443a      	add	r2, r7
 8002544:	6013      	str	r3, [r2, #0]
  uint32_t LoopTime = 10; //time a loop should take (this is aguess should test avg time)
 8002546:	230a      	movs	r3, #10
 8002548:	f641 5210 	movw	r2, #7440	; 0x1d10
 800254c:	443a      	add	r2, r7
 800254e:	6013      	str	r3, [r2, #0]
  uint32_t StartTime = 0;
 8002550:	2300      	movs	r3, #0
 8002552:	f641 520c 	movw	r2, #7436	; 0x1d0c
 8002556:	443a      	add	r2, r7
 8002558:	6013      	str	r3, [r2, #0]
  uint32_t EndTime = 0;
 800255a:	2300      	movs	r3, #0
 800255c:	f641 5208 	movw	r2, #7432	; 0x1d08
 8002560:	443a      	add	r2, r7
 8002562:	6013      	str	r3, [r2, #0]
  uint32_t radiodelay = 1000;
 8002564:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002568:	f641 5204 	movw	r2, #7428	; 0x1d04
 800256c:	443a      	add	r2, r7
 800256e:	6013      	str	r3, [r2, #0]
  uint32_t r_start = 0;
 8002570:	2300      	movs	r3, #0
 8002572:	f641 525c 	movw	r2, #7516	; 0x1d5c
 8002576:	443a      	add	r2, r7
 8002578:	6013      	str	r3, [r2, #0]
  uint32_t r_end = 0;
 800257a:	2300      	movs	r3, #0
 800257c:	f507 52e8 	add.w	r2, r7, #7424	; 0x1d00
 8002580:	6013      	str	r3, [r2, #0]
  r_start = HAL_GetTick();
 8002582:	f002 f89d 	bl	80046c0 <HAL_GetTick>
 8002586:	f641 535c 	movw	r3, #7516	; 0x1d5c
 800258a:	443b      	add	r3, r7
 800258c:	6018      	str	r0, [r3, #0]

  while (end_flag){
 800258e:	f000 bf1e 	b.w	80033ce <main+0x14f6>
 8002592:	bf00      	nop
 8002594:	24000b98 	.word	0x24000b98
 8002598:	2400000c 	.word	0x2400000c
 800259c:	ffffe744 	.word	0xffffe744
 80025a0:	ffffe290 	.word	0xffffe290
 80025a4:	0801ae8c 	.word	0x0801ae8c
 80025a8:	ffffeff0 	.word	0xffffeff0
 80025ac:	ffffea78 	.word	0xffffea78
 80025b0:	24000b30 	.word	0x24000b30
 80025b4:	240014f0 	.word	0x240014f0
 80025b8:	24000b44 	.word	0x24000b44
 80025bc:	10624dd3 	.word	0x10624dd3
 80025c0:	88888889 	.word	0x88888889
    StartTime = HAL_GetTick();
 80025c4:	f002 f87c 	bl	80046c0 <HAL_GetTick>
 80025c8:	f641 530c 	movw	r3, #7436	; 0x1d0c
 80025cc:	443b      	add	r3, r7
 80025ce:	6018      	str	r0, [r3, #0]
	  if(GPS_flag){
 80025d0:	4b98      	ldr	r3, [pc, #608]	; (8002834 <main+0x95c>)
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	2b00      	cmp	r3, #0
 80025d6:	d006      	beq.n	80025e6 <main+0x70e>
		  WriteToBuff(rxBuf, sizeof(rxBuf));
 80025d8:	2146      	movs	r1, #70	; 0x46
 80025da:	4897      	ldr	r0, [pc, #604]	; (8002838 <main+0x960>)
 80025dc:	f7ff fbde 	bl	8001d9c <WriteToBuff>
		  GPS_flag=0;
 80025e0:	4b94      	ldr	r3, [pc, #592]	; (8002834 <main+0x95c>)
 80025e2:	2200      	movs	r2, #0
 80025e4:	601a      	str	r2, [r3, #0]
	  }
	  
    r_end = HAL_GetTick();
 80025e6:	f002 f86b 	bl	80046c0 <HAL_GetTick>
 80025ea:	f507 53e8 	add.w	r3, r7, #7424	; 0x1d00
 80025ee:	6018      	str	r0, [r3, #0]
    if(r_start - r_end > radiodelay && FDBuffer[0].id != 0){
 80025f0:	f641 535c 	movw	r3, #7516	; 0x1d5c
 80025f4:	443b      	add	r3, r7
 80025f6:	681a      	ldr	r2, [r3, #0]
 80025f8:	f507 53e8 	add.w	r3, r7, #7424	; 0x1d00
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	1ad3      	subs	r3, r2, r3
 8002600:	f641 5204 	movw	r2, #7428	; 0x1d04
 8002604:	443a      	add	r2, r7
 8002606:	6812      	ldr	r2, [r2, #0]
 8002608:	429a      	cmp	r2, r3
 800260a:	f080 8289 	bcs.w	8002b20 <main+0xc48>
 800260e:	4b8b      	ldr	r3, [pc, #556]	; (800283c <main+0x964>)
 8002610:	f641 5270 	movw	r2, #7536	; 0x1d70
 8002614:	443a      	add	r2, r7
 8002616:	4413      	add	r3, r2
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	2b00      	cmp	r3, #0
 800261c:	f000 8280 	beq.w	8002b20 <main+0xc48>
      r_start = HAL_GetTick();
 8002620:	f002 f84e 	bl	80046c0 <HAL_GetTick>
 8002624:	f641 535c 	movw	r3, #7516	; 0x1d5c
 8002628:	443b      	add	r3, r7
 800262a:	6018      	str	r0, [r3, #0]
      for(int i = 0; i < AllowedTele; i++){
 800262c:	2300      	movs	r3, #0
 800262e:	f641 5258 	movw	r2, #7512	; 0x1d58
 8002632:	443a      	add	r2, r7
 8002634:	6013      	str	r3, [r2, #0]
 8002636:	e268      	b.n	8002b0a <main+0xc32>
        //make packet (Time ID data)
        Txcnt = sprintf(myTxData,"%u %x ",FDBuffer[BuffIndex].time, FDBuffer[BuffIndex].id);
 8002638:	4a80      	ldr	r2, [pc, #512]	; (800283c <main+0x964>)
 800263a:	f641 5370 	movw	r3, #7536	; 0x1d70
 800263e:	443b      	add	r3, r7
 8002640:	441a      	add	r2, r3
 8002642:	f641 5364 	movw	r3, #7524	; 0x1d64
 8002646:	443b      	add	r3, r7
 8002648:	6819      	ldr	r1, [r3, #0]
 800264a:	460b      	mov	r3, r1
 800264c:	009b      	lsls	r3, r3, #2
 800264e:	440b      	add	r3, r1
 8002650:	011b      	lsls	r3, r3, #4
 8002652:	4413      	add	r3, r2
 8002654:	330c      	adds	r3, #12
 8002656:	6818      	ldr	r0, [r3, #0]
 8002658:	4a78      	ldr	r2, [pc, #480]	; (800283c <main+0x964>)
 800265a:	f641 5370 	movw	r3, #7536	; 0x1d70
 800265e:	443b      	add	r3, r7
 8002660:	441a      	add	r2, r3
 8002662:	f641 5364 	movw	r3, #7524	; 0x1d64
 8002666:	443b      	add	r3, r7
 8002668:	6819      	ldr	r1, [r3, #0]
 800266a:	460b      	mov	r3, r1
 800266c:	009b      	lsls	r3, r3, #2
 800266e:	440b      	add	r3, r1
 8002670:	011b      	lsls	r3, r3, #4
 8002672:	4413      	add	r3, r2
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	4602      	mov	r2, r0
 8002678:	4971      	ldr	r1, [pc, #452]	; (8002840 <main+0x968>)
 800267a:	4872      	ldr	r0, [pc, #456]	; (8002844 <main+0x96c>)
 800267c:	f017 f8e8 	bl	8019850 <siprintf>
 8002680:	f507 53eb 	add.w	r3, r7, #7520	; 0x1d60
 8002684:	6018      	str	r0, [r3, #0]
        TxDataSpace = 32 - Txcnt;
 8002686:	f507 53eb 	add.w	r3, r7, #7520	; 0x1d60
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	f1c3 0320 	rsb	r3, r3, #32
 8002690:	f641 5214 	movw	r2, #7444	; 0x1d14
 8002694:	443a      	add	r2, r7
 8002696:	6013      	str	r3, [r2, #0]
        if(FDBuffer[BuffIndex].length > TxDataSpace){
 8002698:	4a68      	ldr	r2, [pc, #416]	; (800283c <main+0x964>)
 800269a:	f641 5370 	movw	r3, #7536	; 0x1d70
 800269e:	443b      	add	r3, r7
 80026a0:	441a      	add	r2, r3
 80026a2:	f641 5364 	movw	r3, #7524	; 0x1d64
 80026a6:	443b      	add	r3, r7
 80026a8:	6819      	ldr	r1, [r3, #0]
 80026aa:	460b      	mov	r3, r1
 80026ac:	009b      	lsls	r3, r3, #2
 80026ae:	440b      	add	r3, r1
 80026b0:	011b      	lsls	r3, r3, #4
 80026b2:	4413      	add	r3, r2
 80026b4:	3308      	adds	r3, #8
 80026b6:	681a      	ldr	r2, [r3, #0]
 80026b8:	f641 5314 	movw	r3, #7444	; 0x1d14
 80026bc:	443b      	add	r3, r7
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	429a      	cmp	r2, r3
 80026c2:	f240 81a5 	bls.w	8002a10 <main+0xb38>
          for(int i = 0; i < TxDataSpace; i++){
 80026c6:	2300      	movs	r3, #0
 80026c8:	f641 5254 	movw	r2, #7508	; 0x1d54
 80026cc:	443a      	add	r2, r7
 80026ce:	6013      	str	r3, [r2, #0]
 80026d0:	e02e      	b.n	8002730 <main+0x858>
            Txcnt += sprintf(myTxData + Txcnt, "%c", FDBuffer[BuffIndex].data.bytes[i]);
 80026d2:	f507 53eb 	add.w	r3, r7, #7520	; 0x1d60
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	4a5a      	ldr	r2, [pc, #360]	; (8002844 <main+0x96c>)
 80026da:	1898      	adds	r0, r3, r2
 80026dc:	4a57      	ldr	r2, [pc, #348]	; (800283c <main+0x964>)
 80026de:	f641 5370 	movw	r3, #7536	; 0x1d70
 80026e2:	443b      	add	r3, r7
 80026e4:	441a      	add	r2, r3
 80026e6:	f641 5364 	movw	r3, #7524	; 0x1d64
 80026ea:	443b      	add	r3, r7
 80026ec:	6819      	ldr	r1, [r3, #0]
 80026ee:	460b      	mov	r3, r1
 80026f0:	009b      	lsls	r3, r3, #2
 80026f2:	440b      	add	r3, r1
 80026f4:	011b      	lsls	r3, r3, #4
 80026f6:	441a      	add	r2, r3
 80026f8:	f641 5354 	movw	r3, #7508	; 0x1d54
 80026fc:	443b      	add	r3, r7
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	4413      	add	r3, r2
 8002702:	3310      	adds	r3, #16
 8002704:	781b      	ldrb	r3, [r3, #0]
 8002706:	461a      	mov	r2, r3
 8002708:	494f      	ldr	r1, [pc, #316]	; (8002848 <main+0x970>)
 800270a:	f017 f8a1 	bl	8019850 <siprintf>
 800270e:	4602      	mov	r2, r0
 8002710:	f507 53eb 	add.w	r3, r7, #7520	; 0x1d60
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	4413      	add	r3, r2
 8002718:	f507 52eb 	add.w	r2, r7, #7520	; 0x1d60
 800271c:	6013      	str	r3, [r2, #0]
          for(int i = 0; i < TxDataSpace; i++){
 800271e:	f641 5354 	movw	r3, #7508	; 0x1d54
 8002722:	443b      	add	r3, r7
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	3301      	adds	r3, #1
 8002728:	f641 5254 	movw	r2, #7508	; 0x1d54
 800272c:	443a      	add	r2, r7
 800272e:	6013      	str	r3, [r2, #0]
 8002730:	f641 5354 	movw	r3, #7508	; 0x1d54
 8002734:	443b      	add	r3, r7
 8002736:	681a      	ldr	r2, [r3, #0]
 8002738:	f641 5314 	movw	r3, #7444	; 0x1d14
 800273c:	443b      	add	r3, r7
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	429a      	cmp	r2, r3
 8002742:	dbc6      	blt.n	80026d2 <main+0x7fa>
          }
          NRF24_write(myTxData, 32);
 8002744:	2120      	movs	r1, #32
 8002746:	483f      	ldr	r0, [pc, #252]	; (8002844 <main+0x96c>)
 8002748:	f7fe fc36 	bl	8000fb8 <NRF24_write>
          Txcnt = 0;
 800274c:	2300      	movs	r3, #0
 800274e:	f507 52eb 	add.w	r2, r7, #7520	; 0x1d60
 8002752:	6013      	str	r3, [r2, #0]
          if(FDBuffer[BuffIndex].length - TxDataSpace > 32){
 8002754:	4a39      	ldr	r2, [pc, #228]	; (800283c <main+0x964>)
 8002756:	f641 5370 	movw	r3, #7536	; 0x1d70
 800275a:	443b      	add	r3, r7
 800275c:	441a      	add	r2, r3
 800275e:	f641 5364 	movw	r3, #7524	; 0x1d64
 8002762:	443b      	add	r3, r7
 8002764:	6819      	ldr	r1, [r3, #0]
 8002766:	460b      	mov	r3, r1
 8002768:	009b      	lsls	r3, r3, #2
 800276a:	440b      	add	r3, r1
 800276c:	011b      	lsls	r3, r3, #4
 800276e:	4413      	add	r3, r2
 8002770:	3308      	adds	r3, #8
 8002772:	681a      	ldr	r2, [r3, #0]
 8002774:	f641 5314 	movw	r3, #7444	; 0x1d14
 8002778:	443b      	add	r3, r7
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	1ad3      	subs	r3, r2, r3
 800277e:	2b20      	cmp	r3, #32
 8002780:	f240 80c6 	bls.w	8002910 <main+0xa38>
            for(int i = 0; i < 32; i++){
 8002784:	2300      	movs	r3, #0
 8002786:	f641 5250 	movw	r2, #7504	; 0x1d50
 800278a:	443a      	add	r2, r7
 800278c:	6013      	str	r3, [r2, #0]
 800278e:	e034      	b.n	80027fa <main+0x922>
              Txcnt += sprintf(myTxData + Txcnt, "%c", FDBuffer[BuffIndex].data.bytes[i + TxDataSpace]);
 8002790:	f507 53eb 	add.w	r3, r7, #7520	; 0x1d60
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	4a2b      	ldr	r2, [pc, #172]	; (8002844 <main+0x96c>)
 8002798:	189c      	adds	r4, r3, r2
 800279a:	f641 5350 	movw	r3, #7504	; 0x1d50
 800279e:	443b      	add	r3, r7
 80027a0:	681a      	ldr	r2, [r3, #0]
 80027a2:	f641 5314 	movw	r3, #7444	; 0x1d14
 80027a6:	443b      	add	r3, r7
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	18d0      	adds	r0, r2, r3
 80027ac:	4a23      	ldr	r2, [pc, #140]	; (800283c <main+0x964>)
 80027ae:	f641 5370 	movw	r3, #7536	; 0x1d70
 80027b2:	443b      	add	r3, r7
 80027b4:	441a      	add	r2, r3
 80027b6:	f641 5364 	movw	r3, #7524	; 0x1d64
 80027ba:	443b      	add	r3, r7
 80027bc:	6819      	ldr	r1, [r3, #0]
 80027be:	460b      	mov	r3, r1
 80027c0:	009b      	lsls	r3, r3, #2
 80027c2:	440b      	add	r3, r1
 80027c4:	011b      	lsls	r3, r3, #4
 80027c6:	4413      	add	r3, r2
 80027c8:	4403      	add	r3, r0
 80027ca:	3310      	adds	r3, #16
 80027cc:	781b      	ldrb	r3, [r3, #0]
 80027ce:	461a      	mov	r2, r3
 80027d0:	491d      	ldr	r1, [pc, #116]	; (8002848 <main+0x970>)
 80027d2:	4620      	mov	r0, r4
 80027d4:	f017 f83c 	bl	8019850 <siprintf>
 80027d8:	4602      	mov	r2, r0
 80027da:	f507 53eb 	add.w	r3, r7, #7520	; 0x1d60
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	4413      	add	r3, r2
 80027e2:	f507 52eb 	add.w	r2, r7, #7520	; 0x1d60
 80027e6:	6013      	str	r3, [r2, #0]
            for(int i = 0; i < 32; i++){
 80027e8:	f641 5350 	movw	r3, #7504	; 0x1d50
 80027ec:	443b      	add	r3, r7
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	3301      	adds	r3, #1
 80027f2:	f641 5250 	movw	r2, #7504	; 0x1d50
 80027f6:	443a      	add	r2, r7
 80027f8:	6013      	str	r3, [r2, #0]
 80027fa:	f641 5350 	movw	r3, #7504	; 0x1d50
 80027fe:	443b      	add	r3, r7
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	2b1f      	cmp	r3, #31
 8002804:	ddc4      	ble.n	8002790 <main+0x8b8>
            }
            Txcnt = 0;
 8002806:	2300      	movs	r3, #0
 8002808:	f507 52eb 	add.w	r2, r7, #7520	; 0x1d60
 800280c:	6013      	str	r3, [r2, #0]
            i++;
 800280e:	f641 5358 	movw	r3, #7512	; 0x1d58
 8002812:	443b      	add	r3, r7
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	3301      	adds	r3, #1
 8002818:	f641 5258 	movw	r2, #7512	; 0x1d58
 800281c:	443a      	add	r2, r7
 800281e:	6013      	str	r3, [r2, #0]
            NRF24_write(myTxData, 32);
 8002820:	2120      	movs	r1, #32
 8002822:	4808      	ldr	r0, [pc, #32]	; (8002844 <main+0x96c>)
 8002824:	f7fe fbc8 	bl	8000fb8 <NRF24_write>
            for(int i = 0; i < FDBuffer[BuffIndex].length - TxDataSpace+32; i++){
 8002828:	2300      	movs	r3, #0
 800282a:	f641 524c 	movw	r2, #7500	; 0x1d4c
 800282e:	443a      	add	r2, r7
 8002830:	6013      	str	r3, [r2, #0]
 8002832:	e042      	b.n	80028ba <main+0x9e2>
 8002834:	24000204 	.word	0x24000204
 8002838:	24001304 	.word	0x24001304
 800283c:	ffffeff0 	.word	0xffffeff0
 8002840:	0801ae94 	.word	0x0801ae94
 8002844:	24001450 	.word	0x24001450
 8002848:	0801ae9c 	.word	0x0801ae9c
              Txcnt += sprintf(myTxData + Txcnt, "%c", FDBuffer[BuffIndex].data.bytes[i + TxDataSpace + 32]);
 800284c:	f507 53eb 	add.w	r3, r7, #7520	; 0x1d60
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	4a72      	ldr	r2, [pc, #456]	; (8002a1c <main+0xb44>)
 8002854:	189c      	adds	r4, r3, r2
 8002856:	f641 534c 	movw	r3, #7500	; 0x1d4c
 800285a:	443b      	add	r3, r7
 800285c:	681a      	ldr	r2, [r3, #0]
 800285e:	f641 5314 	movw	r3, #7444	; 0x1d14
 8002862:	443b      	add	r3, r7
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	4413      	add	r3, r2
 8002868:	f103 0020 	add.w	r0, r3, #32
 800286c:	4a6c      	ldr	r2, [pc, #432]	; (8002a20 <main+0xb48>)
 800286e:	f641 5370 	movw	r3, #7536	; 0x1d70
 8002872:	443b      	add	r3, r7
 8002874:	441a      	add	r2, r3
 8002876:	f641 5364 	movw	r3, #7524	; 0x1d64
 800287a:	443b      	add	r3, r7
 800287c:	6819      	ldr	r1, [r3, #0]
 800287e:	460b      	mov	r3, r1
 8002880:	009b      	lsls	r3, r3, #2
 8002882:	440b      	add	r3, r1
 8002884:	011b      	lsls	r3, r3, #4
 8002886:	4413      	add	r3, r2
 8002888:	4403      	add	r3, r0
 800288a:	3310      	adds	r3, #16
 800288c:	781b      	ldrb	r3, [r3, #0]
 800288e:	461a      	mov	r2, r3
 8002890:	4964      	ldr	r1, [pc, #400]	; (8002a24 <main+0xb4c>)
 8002892:	4620      	mov	r0, r4
 8002894:	f016 ffdc 	bl	8019850 <siprintf>
 8002898:	4602      	mov	r2, r0
 800289a:	f507 53eb 	add.w	r3, r7, #7520	; 0x1d60
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	4413      	add	r3, r2
 80028a2:	f507 52eb 	add.w	r2, r7, #7520	; 0x1d60
 80028a6:	6013      	str	r3, [r2, #0]
            for(int i = 0; i < FDBuffer[BuffIndex].length - TxDataSpace+32; i++){
 80028a8:	f641 534c 	movw	r3, #7500	; 0x1d4c
 80028ac:	443b      	add	r3, r7
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	3301      	adds	r3, #1
 80028b2:	f641 524c 	movw	r2, #7500	; 0x1d4c
 80028b6:	443a      	add	r2, r7
 80028b8:	6013      	str	r3, [r2, #0]
 80028ba:	4a59      	ldr	r2, [pc, #356]	; (8002a20 <main+0xb48>)
 80028bc:	f641 5370 	movw	r3, #7536	; 0x1d70
 80028c0:	443b      	add	r3, r7
 80028c2:	441a      	add	r2, r3
 80028c4:	f641 5364 	movw	r3, #7524	; 0x1d64
 80028c8:	443b      	add	r3, r7
 80028ca:	6819      	ldr	r1, [r3, #0]
 80028cc:	460b      	mov	r3, r1
 80028ce:	009b      	lsls	r3, r3, #2
 80028d0:	440b      	add	r3, r1
 80028d2:	011b      	lsls	r3, r3, #4
 80028d4:	4413      	add	r3, r2
 80028d6:	3308      	adds	r3, #8
 80028d8:	681a      	ldr	r2, [r3, #0]
 80028da:	f641 5314 	movw	r3, #7444	; 0x1d14
 80028de:	443b      	add	r3, r7
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	1ad3      	subs	r3, r2, r3
 80028e4:	f103 0220 	add.w	r2, r3, #32
 80028e8:	f641 534c 	movw	r3, #7500	; 0x1d4c
 80028ec:	443b      	add	r3, r7
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	429a      	cmp	r2, r3
 80028f2:	d8ab      	bhi.n	800284c <main+0x974>
            }
            i++;
 80028f4:	f641 5358 	movw	r3, #7512	; 0x1d58
 80028f8:	443b      	add	r3, r7
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	3301      	adds	r3, #1
 80028fe:	f641 5258 	movw	r2, #7512	; 0x1d58
 8002902:	443a      	add	r2, r7
 8002904:	6013      	str	r3, [r2, #0]
            NRF24_write(myTxData, 32);
 8002906:	2120      	movs	r1, #32
 8002908:	4844      	ldr	r0, [pc, #272]	; (8002a1c <main+0xb44>)
 800290a:	f7fe fb55 	bl	8000fb8 <NRF24_write>
 800290e:	e0d4      	b.n	8002aba <main+0xbe2>
          }else{
            Txcnt = 0;
 8002910:	2300      	movs	r3, #0
 8002912:	f507 52eb 	add.w	r2, r7, #7520	; 0x1d60
 8002916:	6013      	str	r3, [r2, #0]
            for(int i = 0; i < FDBuffer[BuffIndex].length - TxDataSpace; i++){
 8002918:	2300      	movs	r3, #0
 800291a:	f641 5248 	movw	r2, #7496	; 0x1d48
 800291e:	443a      	add	r2, r7
 8002920:	6013      	str	r3, [r2, #0]
 8002922:	e034      	b.n	800298e <main+0xab6>
              Txcnt += sprintf(myTxData + Txcnt, "%c", FDBuffer[BuffIndex].data.bytes[i + TxDataSpace]);
 8002924:	f507 53eb 	add.w	r3, r7, #7520	; 0x1d60
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	4a3c      	ldr	r2, [pc, #240]	; (8002a1c <main+0xb44>)
 800292c:	189c      	adds	r4, r3, r2
 800292e:	f641 5348 	movw	r3, #7496	; 0x1d48
 8002932:	443b      	add	r3, r7
 8002934:	681a      	ldr	r2, [r3, #0]
 8002936:	f641 5314 	movw	r3, #7444	; 0x1d14
 800293a:	443b      	add	r3, r7
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	18d0      	adds	r0, r2, r3
 8002940:	4a37      	ldr	r2, [pc, #220]	; (8002a20 <main+0xb48>)
 8002942:	f641 5370 	movw	r3, #7536	; 0x1d70
 8002946:	443b      	add	r3, r7
 8002948:	441a      	add	r2, r3
 800294a:	f641 5364 	movw	r3, #7524	; 0x1d64
 800294e:	443b      	add	r3, r7
 8002950:	6819      	ldr	r1, [r3, #0]
 8002952:	460b      	mov	r3, r1
 8002954:	009b      	lsls	r3, r3, #2
 8002956:	440b      	add	r3, r1
 8002958:	011b      	lsls	r3, r3, #4
 800295a:	4413      	add	r3, r2
 800295c:	4403      	add	r3, r0
 800295e:	3310      	adds	r3, #16
 8002960:	781b      	ldrb	r3, [r3, #0]
 8002962:	461a      	mov	r2, r3
 8002964:	492f      	ldr	r1, [pc, #188]	; (8002a24 <main+0xb4c>)
 8002966:	4620      	mov	r0, r4
 8002968:	f016 ff72 	bl	8019850 <siprintf>
 800296c:	4602      	mov	r2, r0
 800296e:	f507 53eb 	add.w	r3, r7, #7520	; 0x1d60
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	4413      	add	r3, r2
 8002976:	f507 52eb 	add.w	r2, r7, #7520	; 0x1d60
 800297a:	6013      	str	r3, [r2, #0]
            for(int i = 0; i < FDBuffer[BuffIndex].length - TxDataSpace; i++){
 800297c:	f641 5348 	movw	r3, #7496	; 0x1d48
 8002980:	443b      	add	r3, r7
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	3301      	adds	r3, #1
 8002986:	f641 5248 	movw	r2, #7496	; 0x1d48
 800298a:	443a      	add	r2, r7
 800298c:	6013      	str	r3, [r2, #0]
 800298e:	4a24      	ldr	r2, [pc, #144]	; (8002a20 <main+0xb48>)
 8002990:	f641 5370 	movw	r3, #7536	; 0x1d70
 8002994:	443b      	add	r3, r7
 8002996:	441a      	add	r2, r3
 8002998:	f641 5364 	movw	r3, #7524	; 0x1d64
 800299c:	443b      	add	r3, r7
 800299e:	6819      	ldr	r1, [r3, #0]
 80029a0:	460b      	mov	r3, r1
 80029a2:	009b      	lsls	r3, r3, #2
 80029a4:	440b      	add	r3, r1
 80029a6:	011b      	lsls	r3, r3, #4
 80029a8:	4413      	add	r3, r2
 80029aa:	3308      	adds	r3, #8
 80029ac:	681a      	ldr	r2, [r3, #0]
 80029ae:	f641 5314 	movw	r3, #7444	; 0x1d14
 80029b2:	443b      	add	r3, r7
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	1ad2      	subs	r2, r2, r3
 80029b8:	f641 5348 	movw	r3, #7496	; 0x1d48
 80029bc:	443b      	add	r3, r7
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	429a      	cmp	r2, r3
 80029c2:	d8af      	bhi.n	8002924 <main+0xa4c>
            }
            i++;
 80029c4:	f641 5358 	movw	r3, #7512	; 0x1d58
 80029c8:	443b      	add	r3, r7
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	3301      	adds	r3, #1
 80029ce:	f641 5258 	movw	r2, #7512	; 0x1d58
 80029d2:	443a      	add	r2, r7
 80029d4:	6013      	str	r3, [r2, #0]
            NRF24_write(myTxData, FDBuffer[BuffIndex].length - TxDataSpace);
 80029d6:	4a12      	ldr	r2, [pc, #72]	; (8002a20 <main+0xb48>)
 80029d8:	f641 5370 	movw	r3, #7536	; 0x1d70
 80029dc:	443b      	add	r3, r7
 80029de:	441a      	add	r2, r3
 80029e0:	f641 5364 	movw	r3, #7524	; 0x1d64
 80029e4:	443b      	add	r3, r7
 80029e6:	6819      	ldr	r1, [r3, #0]
 80029e8:	460b      	mov	r3, r1
 80029ea:	009b      	lsls	r3, r3, #2
 80029ec:	440b      	add	r3, r1
 80029ee:	011b      	lsls	r3, r3, #4
 80029f0:	4413      	add	r3, r2
 80029f2:	3308      	adds	r3, #8
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	b2da      	uxtb	r2, r3
 80029f8:	f641 5314 	movw	r3, #7444	; 0x1d14
 80029fc:	443b      	add	r3, r7
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	b2db      	uxtb	r3, r3
 8002a02:	1ad3      	subs	r3, r2, r3
 8002a04:	b2db      	uxtb	r3, r3
 8002a06:	4619      	mov	r1, r3
 8002a08:	4804      	ldr	r0, [pc, #16]	; (8002a1c <main+0xb44>)
 8002a0a:	f7fe fad5 	bl	8000fb8 <NRF24_write>
 8002a0e:	e054      	b.n	8002aba <main+0xbe2>
          }
        }
        else{
          for(int i = 0; i < FDBuffer[BuffIndex].length; i++){
 8002a10:	2300      	movs	r3, #0
 8002a12:	f641 5244 	movw	r2, #7492	; 0x1d44
 8002a16:	443a      	add	r2, r7
 8002a18:	6013      	str	r3, [r2, #0]
 8002a1a:	e034      	b.n	8002a86 <main+0xbae>
 8002a1c:	24001450 	.word	0x24001450
 8002a20:	ffffeff0 	.word	0xffffeff0
 8002a24:	0801ae9c 	.word	0x0801ae9c
            Txcnt += sprintf(myTxData + Txcnt, "%c", FDBuffer[BuffIndex].data.bytes[i]);
 8002a28:	f507 53eb 	add.w	r3, r7, #7520	; 0x1d60
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	4ab5      	ldr	r2, [pc, #724]	; (8002d04 <main+0xe2c>)
 8002a30:	1898      	adds	r0, r3, r2
 8002a32:	4ab5      	ldr	r2, [pc, #724]	; (8002d08 <main+0xe30>)
 8002a34:	f641 5370 	movw	r3, #7536	; 0x1d70
 8002a38:	443b      	add	r3, r7
 8002a3a:	441a      	add	r2, r3
 8002a3c:	f641 5364 	movw	r3, #7524	; 0x1d64
 8002a40:	443b      	add	r3, r7
 8002a42:	6819      	ldr	r1, [r3, #0]
 8002a44:	460b      	mov	r3, r1
 8002a46:	009b      	lsls	r3, r3, #2
 8002a48:	440b      	add	r3, r1
 8002a4a:	011b      	lsls	r3, r3, #4
 8002a4c:	441a      	add	r2, r3
 8002a4e:	f641 5344 	movw	r3, #7492	; 0x1d44
 8002a52:	443b      	add	r3, r7
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	4413      	add	r3, r2
 8002a58:	3310      	adds	r3, #16
 8002a5a:	781b      	ldrb	r3, [r3, #0]
 8002a5c:	461a      	mov	r2, r3
 8002a5e:	49ab      	ldr	r1, [pc, #684]	; (8002d0c <main+0xe34>)
 8002a60:	f016 fef6 	bl	8019850 <siprintf>
 8002a64:	4602      	mov	r2, r0
 8002a66:	f507 53eb 	add.w	r3, r7, #7520	; 0x1d60
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	4413      	add	r3, r2
 8002a6e:	f507 52eb 	add.w	r2, r7, #7520	; 0x1d60
 8002a72:	6013      	str	r3, [r2, #0]
          for(int i = 0; i < FDBuffer[BuffIndex].length; i++){
 8002a74:	f641 5344 	movw	r3, #7492	; 0x1d44
 8002a78:	443b      	add	r3, r7
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	3301      	adds	r3, #1
 8002a7e:	f641 5244 	movw	r2, #7492	; 0x1d44
 8002a82:	443a      	add	r2, r7
 8002a84:	6013      	str	r3, [r2, #0]
 8002a86:	4aa0      	ldr	r2, [pc, #640]	; (8002d08 <main+0xe30>)
 8002a88:	f641 5370 	movw	r3, #7536	; 0x1d70
 8002a8c:	443b      	add	r3, r7
 8002a8e:	441a      	add	r2, r3
 8002a90:	f641 5364 	movw	r3, #7524	; 0x1d64
 8002a94:	443b      	add	r3, r7
 8002a96:	6819      	ldr	r1, [r3, #0]
 8002a98:	460b      	mov	r3, r1
 8002a9a:	009b      	lsls	r3, r3, #2
 8002a9c:	440b      	add	r3, r1
 8002a9e:	011b      	lsls	r3, r3, #4
 8002aa0:	4413      	add	r3, r2
 8002aa2:	3308      	adds	r3, #8
 8002aa4:	681a      	ldr	r2, [r3, #0]
 8002aa6:	f641 5344 	movw	r3, #7492	; 0x1d44
 8002aaa:	443b      	add	r3, r7
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	429a      	cmp	r2, r3
 8002ab0:	d8ba      	bhi.n	8002a28 <main+0xb50>
          }
          NRF24_write(myTxData, 32);//FDBuffer[BuffIndex].length + (32 - TxDataSpace)
 8002ab2:	2120      	movs	r1, #32
 8002ab4:	4893      	ldr	r0, [pc, #588]	; (8002d04 <main+0xe2c>)
 8002ab6:	f7fe fa7f 	bl	8000fb8 <NRF24_write>
        }
        BuffIndex++;
 8002aba:	f641 5364 	movw	r3, #7524	; 0x1d64
 8002abe:	443b      	add	r3, r7
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	3301      	adds	r3, #1
 8002ac4:	f641 5264 	movw	r2, #7524	; 0x1d64
 8002ac8:	443a      	add	r2, r7
 8002aca:	6013      	str	r3, [r2, #0]
        if(FDBuffer[BuffIndex].id == 0){
 8002acc:	4a8e      	ldr	r2, [pc, #568]	; (8002d08 <main+0xe30>)
 8002ace:	f641 5370 	movw	r3, #7536	; 0x1d70
 8002ad2:	443b      	add	r3, r7
 8002ad4:	441a      	add	r2, r3
 8002ad6:	f641 5364 	movw	r3, #7524	; 0x1d64
 8002ada:	443b      	add	r3, r7
 8002adc:	6819      	ldr	r1, [r3, #0]
 8002ade:	460b      	mov	r3, r1
 8002ae0:	009b      	lsls	r3, r3, #2
 8002ae2:	440b      	add	r3, r1
 8002ae4:	011b      	lsls	r3, r3, #4
 8002ae6:	4413      	add	r3, r2
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	2b00      	cmp	r3, #0
 8002aec:	d104      	bne.n	8002af8 <main+0xc20>
          BuffIndex = 0;
 8002aee:	2300      	movs	r3, #0
 8002af0:	f641 5264 	movw	r2, #7524	; 0x1d64
 8002af4:	443a      	add	r2, r7
 8002af6:	6013      	str	r3, [r2, #0]
      for(int i = 0; i < AllowedTele; i++){
 8002af8:	f641 5358 	movw	r3, #7512	; 0x1d58
 8002afc:	443b      	add	r3, r7
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	3301      	adds	r3, #1
 8002b02:	f641 5258 	movw	r2, #7512	; 0x1d58
 8002b06:	443a      	add	r2, r7
 8002b08:	6013      	str	r3, [r2, #0]
 8002b0a:	f641 5358 	movw	r3, #7512	; 0x1d58
 8002b0e:	443b      	add	r3, r7
 8002b10:	681a      	ldr	r2, [r3, #0]
 8002b12:	f641 5318 	movw	r3, #7448	; 0x1d18
 8002b16:	443b      	add	r3, r7
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	429a      	cmp	r2, r3
 8002b1c:	f6ff ad8c 	blt.w	8002638 <main+0x760>


	  printf("Date:%u Month:%u Year:%u\n", sDate.Date, sDate.Month, sDate.Year);
	  printf("Hours:%u Minutes:%u Seconds:%u\n", sTime.Hours, sTime.Minutes, sTime.Seconds);*/

	  if(FDCAN_Flag){
 8002b20:	4b7b      	ldr	r3, [pc, #492]	; (8002d10 <main+0xe38>)
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	2b00      	cmp	r3, #0
 8002b26:	f000 8230 	beq.w	8002f8a <main+0x10b2>

		  RTC_TimeTypeDef lTime = sTime;
 8002b2a:	4b7a      	ldr	r3, [pc, #488]	; (8002d14 <main+0xe3c>)
 8002b2c:	f641 5270 	movw	r2, #7536	; 0x1d70
 8002b30:	443a      	add	r2, r7
 8002b32:	4413      	add	r3, r2
 8002b34:	4a78      	ldr	r2, [pc, #480]	; (8002d18 <main+0xe40>)
 8002b36:	461c      	mov	r4, r3
 8002b38:	4615      	mov	r5, r2
 8002b3a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002b3c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002b3e:	682b      	ldr	r3, [r5, #0]
 8002b40:	6023      	str	r3, [r4, #0]
		  LocalTime = CanFDFrame.time;
 8002b42:	4b76      	ldr	r3, [pc, #472]	; (8002d1c <main+0xe44>)
 8002b44:	68db      	ldr	r3, [r3, #12]
 8002b46:	f641 521c 	movw	r2, #7452	; 0x1d1c
 8002b4a:	443a      	add	r2, r7
 8002b4c:	6013      	str	r3, [r2, #0]
		  lTime.SubSeconds += LocalTime % 1000;
 8002b4e:	4b71      	ldr	r3, [pc, #452]	; (8002d14 <main+0xe3c>)
 8002b50:	f641 5270 	movw	r2, #7536	; 0x1d70
 8002b54:	443a      	add	r2, r7
 8002b56:	4413      	add	r3, r2
 8002b58:	6859      	ldr	r1, [r3, #4]
 8002b5a:	f641 531c 	movw	r3, #7452	; 0x1d1c
 8002b5e:	443b      	add	r3, r7
 8002b60:	681a      	ldr	r2, [r3, #0]
 8002b62:	4b6f      	ldr	r3, [pc, #444]	; (8002d20 <main+0xe48>)
 8002b64:	fba3 0302 	umull	r0, r3, r3, r2
 8002b68:	099b      	lsrs	r3, r3, #6
 8002b6a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002b6e:	fb00 f303 	mul.w	r3, r0, r3
 8002b72:	1ad3      	subs	r3, r2, r3
 8002b74:	18ca      	adds	r2, r1, r3
 8002b76:	4b67      	ldr	r3, [pc, #412]	; (8002d14 <main+0xe3c>)
 8002b78:	f641 5170 	movw	r1, #7536	; 0x1d70
 8002b7c:	4439      	add	r1, r7
 8002b7e:	440b      	add	r3, r1
 8002b80:	605a      	str	r2, [r3, #4]
		  LocalTime = LocalTime/1000;
 8002b82:	f641 531c 	movw	r3, #7452	; 0x1d1c
 8002b86:	443b      	add	r3, r7
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	4a65      	ldr	r2, [pc, #404]	; (8002d20 <main+0xe48>)
 8002b8c:	fba2 2303 	umull	r2, r3, r2, r3
 8002b90:	099b      	lsrs	r3, r3, #6
 8002b92:	f641 521c 	movw	r2, #7452	; 0x1d1c
 8002b96:	443a      	add	r2, r7
 8002b98:	6013      	str	r3, [r2, #0]
		  lTime.Seconds += LocalTime % 60;
 8002b9a:	4b5e      	ldr	r3, [pc, #376]	; (8002d14 <main+0xe3c>)
 8002b9c:	f641 5270 	movw	r2, #7536	; 0x1d70
 8002ba0:	443a      	add	r2, r7
 8002ba2:	4413      	add	r3, r2
 8002ba4:	7898      	ldrb	r0, [r3, #2]
 8002ba6:	f641 531c 	movw	r3, #7452	; 0x1d1c
 8002baa:	443b      	add	r3, r7
 8002bac:	6819      	ldr	r1, [r3, #0]
 8002bae:	4b5d      	ldr	r3, [pc, #372]	; (8002d24 <main+0xe4c>)
 8002bb0:	fba3 2301 	umull	r2, r3, r3, r1
 8002bb4:	095a      	lsrs	r2, r3, #5
 8002bb6:	4613      	mov	r3, r2
 8002bb8:	011b      	lsls	r3, r3, #4
 8002bba:	1a9b      	subs	r3, r3, r2
 8002bbc:	009b      	lsls	r3, r3, #2
 8002bbe:	1aca      	subs	r2, r1, r3
 8002bc0:	b2d3      	uxtb	r3, r2
 8002bc2:	4403      	add	r3, r0
 8002bc4:	b2da      	uxtb	r2, r3
 8002bc6:	4b53      	ldr	r3, [pc, #332]	; (8002d14 <main+0xe3c>)
 8002bc8:	f641 5170 	movw	r1, #7536	; 0x1d70
 8002bcc:	4439      	add	r1, r7
 8002bce:	440b      	add	r3, r1
 8002bd0:	709a      	strb	r2, [r3, #2]
		  if(lTime.Seconds >= 60){
 8002bd2:	4b50      	ldr	r3, [pc, #320]	; (8002d14 <main+0xe3c>)
 8002bd4:	f641 5270 	movw	r2, #7536	; 0x1d70
 8002bd8:	443a      	add	r2, r7
 8002bda:	4413      	add	r3, r2
 8002bdc:	789b      	ldrb	r3, [r3, #2]
 8002bde:	2b3b      	cmp	r3, #59	; 0x3b
 8002be0:	d91b      	bls.n	8002c1a <main+0xd42>
			  lTime.Seconds -= 60;
 8002be2:	4b4c      	ldr	r3, [pc, #304]	; (8002d14 <main+0xe3c>)
 8002be4:	f641 5270 	movw	r2, #7536	; 0x1d70
 8002be8:	443a      	add	r2, r7
 8002bea:	4413      	add	r3, r2
 8002bec:	789b      	ldrb	r3, [r3, #2]
 8002bee:	3b3c      	subs	r3, #60	; 0x3c
 8002bf0:	b2da      	uxtb	r2, r3
 8002bf2:	4b48      	ldr	r3, [pc, #288]	; (8002d14 <main+0xe3c>)
 8002bf4:	f641 5170 	movw	r1, #7536	; 0x1d70
 8002bf8:	4439      	add	r1, r7
 8002bfa:	440b      	add	r3, r1
 8002bfc:	709a      	strb	r2, [r3, #2]
			  lTime.Minutes += 1;
 8002bfe:	4b45      	ldr	r3, [pc, #276]	; (8002d14 <main+0xe3c>)
 8002c00:	f641 5270 	movw	r2, #7536	; 0x1d70
 8002c04:	443a      	add	r2, r7
 8002c06:	4413      	add	r3, r2
 8002c08:	785b      	ldrb	r3, [r3, #1]
 8002c0a:	3301      	adds	r3, #1
 8002c0c:	b2da      	uxtb	r2, r3
 8002c0e:	4b41      	ldr	r3, [pc, #260]	; (8002d14 <main+0xe3c>)
 8002c10:	f641 5170 	movw	r1, #7536	; 0x1d70
 8002c14:	4439      	add	r1, r7
 8002c16:	440b      	add	r3, r1
 8002c18:	705a      	strb	r2, [r3, #1]
		  }
		  LocalTime = LocalTime/60;
 8002c1a:	f641 531c 	movw	r3, #7452	; 0x1d1c
 8002c1e:	443b      	add	r3, r7
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	4a40      	ldr	r2, [pc, #256]	; (8002d24 <main+0xe4c>)
 8002c24:	fba2 2303 	umull	r2, r3, r2, r3
 8002c28:	095b      	lsrs	r3, r3, #5
 8002c2a:	f641 521c 	movw	r2, #7452	; 0x1d1c
 8002c2e:	443a      	add	r2, r7
 8002c30:	6013      	str	r3, [r2, #0]
		  lTime.Minutes += LocalTime % 60;
 8002c32:	4b38      	ldr	r3, [pc, #224]	; (8002d14 <main+0xe3c>)
 8002c34:	f641 5270 	movw	r2, #7536	; 0x1d70
 8002c38:	443a      	add	r2, r7
 8002c3a:	4413      	add	r3, r2
 8002c3c:	7858      	ldrb	r0, [r3, #1]
 8002c3e:	f641 531c 	movw	r3, #7452	; 0x1d1c
 8002c42:	443b      	add	r3, r7
 8002c44:	6819      	ldr	r1, [r3, #0]
 8002c46:	4b37      	ldr	r3, [pc, #220]	; (8002d24 <main+0xe4c>)
 8002c48:	fba3 2301 	umull	r2, r3, r3, r1
 8002c4c:	095a      	lsrs	r2, r3, #5
 8002c4e:	4613      	mov	r3, r2
 8002c50:	011b      	lsls	r3, r3, #4
 8002c52:	1a9b      	subs	r3, r3, r2
 8002c54:	009b      	lsls	r3, r3, #2
 8002c56:	1aca      	subs	r2, r1, r3
 8002c58:	b2d3      	uxtb	r3, r2
 8002c5a:	4403      	add	r3, r0
 8002c5c:	b2da      	uxtb	r2, r3
 8002c5e:	4b2d      	ldr	r3, [pc, #180]	; (8002d14 <main+0xe3c>)
 8002c60:	f641 5170 	movw	r1, #7536	; 0x1d70
 8002c64:	4439      	add	r1, r7
 8002c66:	440b      	add	r3, r1
 8002c68:	705a      	strb	r2, [r3, #1]
		  if(lTime.Minutes >= 60){
 8002c6a:	4b2a      	ldr	r3, [pc, #168]	; (8002d14 <main+0xe3c>)
 8002c6c:	f641 5270 	movw	r2, #7536	; 0x1d70
 8002c70:	443a      	add	r2, r7
 8002c72:	4413      	add	r3, r2
 8002c74:	785b      	ldrb	r3, [r3, #1]
 8002c76:	2b3b      	cmp	r3, #59	; 0x3b
 8002c78:	d91b      	bls.n	8002cb2 <main+0xdda>
			  lTime.Minutes -= 60;
 8002c7a:	4b26      	ldr	r3, [pc, #152]	; (8002d14 <main+0xe3c>)
 8002c7c:	f641 5270 	movw	r2, #7536	; 0x1d70
 8002c80:	443a      	add	r2, r7
 8002c82:	4413      	add	r3, r2
 8002c84:	785b      	ldrb	r3, [r3, #1]
 8002c86:	3b3c      	subs	r3, #60	; 0x3c
 8002c88:	b2da      	uxtb	r2, r3
 8002c8a:	4b22      	ldr	r3, [pc, #136]	; (8002d14 <main+0xe3c>)
 8002c8c:	f641 5170 	movw	r1, #7536	; 0x1d70
 8002c90:	4439      	add	r1, r7
 8002c92:	440b      	add	r3, r1
 8002c94:	705a      	strb	r2, [r3, #1]
			  lTime.Hours += 1;
 8002c96:	4b1f      	ldr	r3, [pc, #124]	; (8002d14 <main+0xe3c>)
 8002c98:	f641 5270 	movw	r2, #7536	; 0x1d70
 8002c9c:	443a      	add	r2, r7
 8002c9e:	4413      	add	r3, r2
 8002ca0:	781b      	ldrb	r3, [r3, #0]
 8002ca2:	3301      	adds	r3, #1
 8002ca4:	b2da      	uxtb	r2, r3
 8002ca6:	4b1b      	ldr	r3, [pc, #108]	; (8002d14 <main+0xe3c>)
 8002ca8:	f641 5170 	movw	r1, #7536	; 0x1d70
 8002cac:	4439      	add	r1, r7
 8002cae:	440b      	add	r3, r1
 8002cb0:	701a      	strb	r2, [r3, #0]
		  }
		  LocalTime = LocalTime/60;
 8002cb2:	f641 531c 	movw	r3, #7452	; 0x1d1c
 8002cb6:	443b      	add	r3, r7
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	4a1a      	ldr	r2, [pc, #104]	; (8002d24 <main+0xe4c>)
 8002cbc:	fba2 2303 	umull	r2, r3, r2, r3
 8002cc0:	095b      	lsrs	r3, r3, #5
 8002cc2:	f641 521c 	movw	r2, #7452	; 0x1d1c
 8002cc6:	443a      	add	r2, r7
 8002cc8:	6013      	str	r3, [r2, #0]
		  lTime.Hours += LocalTime % 60;
 8002cca:	4b12      	ldr	r3, [pc, #72]	; (8002d14 <main+0xe3c>)
 8002ccc:	f641 5270 	movw	r2, #7536	; 0x1d70
 8002cd0:	443a      	add	r2, r7
 8002cd2:	4413      	add	r3, r2
 8002cd4:	7818      	ldrb	r0, [r3, #0]
 8002cd6:	f641 531c 	movw	r3, #7452	; 0x1d1c
 8002cda:	443b      	add	r3, r7
 8002cdc:	6819      	ldr	r1, [r3, #0]
 8002cde:	4b11      	ldr	r3, [pc, #68]	; (8002d24 <main+0xe4c>)
 8002ce0:	fba3 2301 	umull	r2, r3, r3, r1
 8002ce4:	095a      	lsrs	r2, r3, #5
 8002ce6:	4613      	mov	r3, r2
 8002ce8:	011b      	lsls	r3, r3, #4
 8002cea:	1a9b      	subs	r3, r3, r2
 8002cec:	009b      	lsls	r3, r3, #2
 8002cee:	1aca      	subs	r2, r1, r3
 8002cf0:	b2d3      	uxtb	r3, r2
 8002cf2:	4403      	add	r3, r0
 8002cf4:	b2da      	uxtb	r2, r3
 8002cf6:	4b07      	ldr	r3, [pc, #28]	; (8002d14 <main+0xe3c>)
 8002cf8:	f641 5170 	movw	r1, #7536	; 0x1d70
 8002cfc:	4439      	add	r1, r7
 8002cfe:	440b      	add	r3, r1
 8002d00:	701a      	strb	r2, [r3, #0]
 8002d02:	e011      	b.n	8002d28 <main+0xe50>
 8002d04:	24001450 	.word	0x24001450
 8002d08:	ffffeff0 	.word	0xffffeff0
 8002d0c:	0801ae9c 	.word	0x0801ae9c
 8002d10:	240001fc 	.word	0x240001fc
 8002d14:	ffffe724 	.word	0xffffe724
 8002d18:	24000b30 	.word	0x24000b30
 8002d1c:	24001040 	.word	0x24001040
 8002d20:	10624dd3 	.word	0x10624dd3
 8002d24:	88888889 	.word	0x88888889
      //Write to SD Card
		  //date/time, CANID, Data
		  CFDW = sprintf(CanFDWrite, "%u.%u.%u %u:%u:%u.%u,0x%X,",
				  sDate.Date,sDate.Month,sDate.Year, lTime.Hours,lTime.Minutes,lTime.Seconds,lTime.SubSeconds,
 8002d28:	4b7d      	ldr	r3, [pc, #500]	; (8002f20 <main+0x1048>)
 8002d2a:	789b      	ldrb	r3, [r3, #2]
		  CFDW = sprintf(CanFDWrite, "%u.%u.%u %u:%u:%u.%u,0x%X,",
 8002d2c:	469c      	mov	ip, r3
				  sDate.Date,sDate.Month,sDate.Year, lTime.Hours,lTime.Minutes,lTime.Seconds,lTime.SubSeconds,
 8002d2e:	4b7c      	ldr	r3, [pc, #496]	; (8002f20 <main+0x1048>)
 8002d30:	785b      	ldrb	r3, [r3, #1]
		  CFDW = sprintf(CanFDWrite, "%u.%u.%u %u:%u:%u.%u,0x%X,",
 8002d32:	469e      	mov	lr, r3
				  sDate.Date,sDate.Month,sDate.Year, lTime.Hours,lTime.Minutes,lTime.Seconds,lTime.SubSeconds,
 8002d34:	4b7a      	ldr	r3, [pc, #488]	; (8002f20 <main+0x1048>)
 8002d36:	78db      	ldrb	r3, [r3, #3]
		  CFDW = sprintf(CanFDWrite, "%u.%u.%u %u:%u:%u.%u,0x%X,",
 8002d38:	4619      	mov	r1, r3
				  sDate.Date,sDate.Month,sDate.Year, lTime.Hours,lTime.Minutes,lTime.Seconds,lTime.SubSeconds,
 8002d3a:	4b7a      	ldr	r3, [pc, #488]	; (8002f24 <main+0x104c>)
 8002d3c:	f641 5270 	movw	r2, #7536	; 0x1d70
 8002d40:	443a      	add	r2, r7
 8002d42:	4413      	add	r3, r2
 8002d44:	781b      	ldrb	r3, [r3, #0]
		  CFDW = sprintf(CanFDWrite, "%u.%u.%u %u:%u:%u.%u,0x%X,",
 8002d46:	461c      	mov	r4, r3
				  sDate.Date,sDate.Month,sDate.Year, lTime.Hours,lTime.Minutes,lTime.Seconds,lTime.SubSeconds,
 8002d48:	4b76      	ldr	r3, [pc, #472]	; (8002f24 <main+0x104c>)
 8002d4a:	f641 5270 	movw	r2, #7536	; 0x1d70
 8002d4e:	443a      	add	r2, r7
 8002d50:	4413      	add	r3, r2
 8002d52:	785b      	ldrb	r3, [r3, #1]
		  CFDW = sprintf(CanFDWrite, "%u.%u.%u %u:%u:%u.%u,0x%X,",
 8002d54:	461d      	mov	r5, r3
				  sDate.Date,sDate.Month,sDate.Year, lTime.Hours,lTime.Minutes,lTime.Seconds,lTime.SubSeconds,
 8002d56:	4b73      	ldr	r3, [pc, #460]	; (8002f24 <main+0x104c>)
 8002d58:	f641 5270 	movw	r2, #7536	; 0x1d70
 8002d5c:	443a      	add	r2, r7
 8002d5e:	4413      	add	r3, r2
 8002d60:	789b      	ldrb	r3, [r3, #2]
		  CFDW = sprintf(CanFDWrite, "%u.%u.%u %u:%u:%u.%u,0x%X,",
 8002d62:	461e      	mov	r6, r3
 8002d64:	4b6f      	ldr	r3, [pc, #444]	; (8002f24 <main+0x104c>)
 8002d66:	f641 5270 	movw	r2, #7536	; 0x1d70
 8002d6a:	443a      	add	r2, r7
 8002d6c:	4413      	add	r3, r2
 8002d6e:	685b      	ldr	r3, [r3, #4]
 8002d70:	4a6d      	ldr	r2, [pc, #436]	; (8002f28 <main+0x1050>)
 8002d72:	6812      	ldr	r2, [r2, #0]
 8002d74:	486d      	ldr	r0, [pc, #436]	; (8002f2c <main+0x1054>)
 8002d76:	f641 5870 	movw	r8, #7536	; 0x1d70
 8002d7a:	44b8      	add	r8, r7
 8002d7c:	4440      	add	r0, r8
 8002d7e:	9205      	str	r2, [sp, #20]
 8002d80:	9304      	str	r3, [sp, #16]
 8002d82:	9603      	str	r6, [sp, #12]
 8002d84:	9502      	str	r5, [sp, #8]
 8002d86:	9401      	str	r4, [sp, #4]
 8002d88:	9100      	str	r1, [sp, #0]
 8002d8a:	4673      	mov	r3, lr
 8002d8c:	4662      	mov	r2, ip
 8002d8e:	4968      	ldr	r1, [pc, #416]	; (8002f30 <main+0x1058>)
 8002d90:	f016 fd5e 	bl	8019850 <siprintf>
 8002d94:	f641 5368 	movw	r3, #7528	; 0x1d68
 8002d98:	443b      	add	r3, r7
 8002d9a:	6018      	str	r0, [r3, #0]
				  CanFDFrame.id);
		  for(int i = 0; i < CanFDFrame.length; i++){
 8002d9c:	2300      	movs	r3, #0
 8002d9e:	f507 52ea 	add.w	r2, r7, #7488	; 0x1d40
 8002da2:	6013      	str	r3, [r2, #0]
 8002da4:	e025      	b.n	8002df2 <main+0xf1a>
			  CFDW += sprintf(CanFDWrite + CFDW, "%c", CanFDFrame.data.bytes[i]);
 8002da6:	f641 5368 	movw	r3, #7528	; 0x1d68
 8002daa:	443b      	add	r3, r7
 8002dac:	681a      	ldr	r2, [r3, #0]
 8002dae:	4b5f      	ldr	r3, [pc, #380]	; (8002f2c <main+0x1054>)
 8002db0:	f641 5170 	movw	r1, #7536	; 0x1d70
 8002db4:	4439      	add	r1, r7
 8002db6:	440b      	add	r3, r1
 8002db8:	1898      	adds	r0, r3, r2
 8002dba:	4a5b      	ldr	r2, [pc, #364]	; (8002f28 <main+0x1050>)
 8002dbc:	f507 53ea 	add.w	r3, r7, #7488	; 0x1d40
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	4413      	add	r3, r2
 8002dc4:	3310      	adds	r3, #16
 8002dc6:	781b      	ldrb	r3, [r3, #0]
 8002dc8:	461a      	mov	r2, r3
 8002dca:	495a      	ldr	r1, [pc, #360]	; (8002f34 <main+0x105c>)
 8002dcc:	f016 fd40 	bl	8019850 <siprintf>
 8002dd0:	4602      	mov	r2, r0
 8002dd2:	f641 5368 	movw	r3, #7528	; 0x1d68
 8002dd6:	443b      	add	r3, r7
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	4413      	add	r3, r2
 8002ddc:	f641 5268 	movw	r2, #7528	; 0x1d68
 8002de0:	443a      	add	r2, r7
 8002de2:	6013      	str	r3, [r2, #0]
		  for(int i = 0; i < CanFDFrame.length; i++){
 8002de4:	f507 53ea 	add.w	r3, r7, #7488	; 0x1d40
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	3301      	adds	r3, #1
 8002dec:	f507 52ea 	add.w	r2, r7, #7488	; 0x1d40
 8002df0:	6013      	str	r3, [r2, #0]
 8002df2:	4b4d      	ldr	r3, [pc, #308]	; (8002f28 <main+0x1050>)
 8002df4:	689a      	ldr	r2, [r3, #8]
 8002df6:	f507 53ea 	add.w	r3, r7, #7488	; 0x1d40
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	429a      	cmp	r2, r3
 8002dfe:	d8d2      	bhi.n	8002da6 <main+0xece>
		  }
		  CFDW += sprintf(CanFDWrite + CFDW, "\n\r");
 8002e00:	f641 5368 	movw	r3, #7528	; 0x1d68
 8002e04:	443b      	add	r3, r7
 8002e06:	681a      	ldr	r2, [r3, #0]
 8002e08:	4b48      	ldr	r3, [pc, #288]	; (8002f2c <main+0x1054>)
 8002e0a:	f641 5170 	movw	r1, #7536	; 0x1d70
 8002e0e:	4439      	add	r1, r7
 8002e10:	440b      	add	r3, r1
 8002e12:	4413      	add	r3, r2
 8002e14:	4a48      	ldr	r2, [pc, #288]	; (8002f38 <main+0x1060>)
 8002e16:	8811      	ldrh	r1, [r2, #0]
 8002e18:	7892      	ldrb	r2, [r2, #2]
 8002e1a:	8019      	strh	r1, [r3, #0]
 8002e1c:	709a      	strb	r2, [r3, #2]
 8002e1e:	2202      	movs	r2, #2
 8002e20:	f641 5368 	movw	r3, #7528	; 0x1d68
 8002e24:	443b      	add	r3, r7
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	4413      	add	r3, r2
 8002e2a:	f641 5268 	movw	r2, #7528	; 0x1d68
 8002e2e:	443a      	add	r2, r7
 8002e30:	6013      	str	r3, [r2, #0]
		  WriteToBuff(CanFDWrite, CFDW);
 8002e32:	4b3e      	ldr	r3, [pc, #248]	; (8002f2c <main+0x1054>)
 8002e34:	f641 5270 	movw	r2, #7536	; 0x1d70
 8002e38:	443a      	add	r2, r7
 8002e3a:	4413      	add	r3, r2
 8002e3c:	f641 5268 	movw	r2, #7528	; 0x1d68
 8002e40:	443a      	add	r2, r7
 8002e42:	6811      	ldr	r1, [r2, #0]
 8002e44:	4618      	mov	r0, r3
 8002e46:	f7fe ffa9 	bl	8001d9c <WriteToBuff>

      //Write to telemetry buffer
      
      for(int i = 0; i <50; i++){
 8002e4a:	2300      	movs	r3, #0
 8002e4c:	f641 523c 	movw	r2, #7484	; 0x1d3c
 8002e50:	443a      	add	r2, r7
 8002e52:	6013      	str	r3, [r2, #0]
 8002e54:	e08e      	b.n	8002f74 <main+0x109c>
        if(CanFDFrame.id == Tele_IDs[i]){ //check if frame should be checked
 8002e56:	4b34      	ldr	r3, [pc, #208]	; (8002f28 <main+0x1050>)
 8002e58:	681a      	ldr	r2, [r3, #0]
 8002e5a:	4b38      	ldr	r3, [pc, #224]	; (8002f3c <main+0x1064>)
 8002e5c:	f641 5170 	movw	r1, #7536	; 0x1d70
 8002e60:	4439      	add	r1, r7
 8002e62:	440b      	add	r3, r1
 8002e64:	f641 513c 	movw	r1, #7484	; 0x1d3c
 8002e68:	4439      	add	r1, r7
 8002e6a:	6809      	ldr	r1, [r1, #0]
 8002e6c:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8002e70:	429a      	cmp	r2, r3
 8002e72:	d176      	bne.n	8002f62 <main+0x108a>
          for(int j = 0; j < 50; j++){
 8002e74:	2300      	movs	r3, #0
 8002e76:	f641 5238 	movw	r2, #7480	; 0x1d38
 8002e7a:	443a      	add	r2, r7
 8002e7c:	6013      	str	r3, [r2, #0]
 8002e7e:	e06a      	b.n	8002f56 <main+0x107e>
            if(FDBuffer[j].id == CanFDFrame.id){
 8002e80:	4a2f      	ldr	r2, [pc, #188]	; (8002f40 <main+0x1068>)
 8002e82:	f641 5370 	movw	r3, #7536	; 0x1d70
 8002e86:	443b      	add	r3, r7
 8002e88:	441a      	add	r2, r3
 8002e8a:	f641 5338 	movw	r3, #7480	; 0x1d38
 8002e8e:	443b      	add	r3, r7
 8002e90:	6819      	ldr	r1, [r3, #0]
 8002e92:	460b      	mov	r3, r1
 8002e94:	009b      	lsls	r3, r3, #2
 8002e96:	440b      	add	r3, r1
 8002e98:	011b      	lsls	r3, r3, #4
 8002e9a:	4413      	add	r3, r2
 8002e9c:	681a      	ldr	r2, [r3, #0]
 8002e9e:	4b22      	ldr	r3, [pc, #136]	; (8002f28 <main+0x1050>)
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	429a      	cmp	r2, r3
 8002ea4:	d115      	bne.n	8002ed2 <main+0xffa>
              FDBuffer[j] = CanFDFrame;
 8002ea6:	4a26      	ldr	r2, [pc, #152]	; (8002f40 <main+0x1068>)
 8002ea8:	f641 5370 	movw	r3, #7536	; 0x1d70
 8002eac:	443b      	add	r3, r7
 8002eae:	441a      	add	r2, r3
 8002eb0:	f641 5338 	movw	r3, #7480	; 0x1d38
 8002eb4:	443b      	add	r3, r7
 8002eb6:	6819      	ldr	r1, [r3, #0]
 8002eb8:	460b      	mov	r3, r1
 8002eba:	009b      	lsls	r3, r3, #2
 8002ebc:	440b      	add	r3, r1
 8002ebe:	011b      	lsls	r3, r3, #4
 8002ec0:	4413      	add	r3, r2
 8002ec2:	4a19      	ldr	r2, [pc, #100]	; (8002f28 <main+0x1050>)
 8002ec4:	4618      	mov	r0, r3
 8002ec6:	4611      	mov	r1, r2
 8002ec8:	2350      	movs	r3, #80	; 0x50
 8002eca:	461a      	mov	r2, r3
 8002ecc:	f016 fb44 	bl	8019558 <memcpy>
              goto TeleDoneFD;
 8002ed0:	e058      	b.n	8002f84 <main+0x10ac>
            }
            if(FDBuffer[j].id == 0){
 8002ed2:	4a1b      	ldr	r2, [pc, #108]	; (8002f40 <main+0x1068>)
 8002ed4:	f641 5370 	movw	r3, #7536	; 0x1d70
 8002ed8:	443b      	add	r3, r7
 8002eda:	441a      	add	r2, r3
 8002edc:	f641 5338 	movw	r3, #7480	; 0x1d38
 8002ee0:	443b      	add	r3, r7
 8002ee2:	6819      	ldr	r1, [r3, #0]
 8002ee4:	460b      	mov	r3, r1
 8002ee6:	009b      	lsls	r3, r3, #2
 8002ee8:	440b      	add	r3, r1
 8002eea:	011b      	lsls	r3, r3, #4
 8002eec:	4413      	add	r3, r2
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	2b00      	cmp	r3, #0
 8002ef2:	d127      	bne.n	8002f44 <main+0x106c>
              FDBuffer[j] = CanFDFrame;
 8002ef4:	4a12      	ldr	r2, [pc, #72]	; (8002f40 <main+0x1068>)
 8002ef6:	f641 5370 	movw	r3, #7536	; 0x1d70
 8002efa:	443b      	add	r3, r7
 8002efc:	441a      	add	r2, r3
 8002efe:	f641 5338 	movw	r3, #7480	; 0x1d38
 8002f02:	443b      	add	r3, r7
 8002f04:	6819      	ldr	r1, [r3, #0]
 8002f06:	460b      	mov	r3, r1
 8002f08:	009b      	lsls	r3, r3, #2
 8002f0a:	440b      	add	r3, r1
 8002f0c:	011b      	lsls	r3, r3, #4
 8002f0e:	4413      	add	r3, r2
 8002f10:	4a05      	ldr	r2, [pc, #20]	; (8002f28 <main+0x1050>)
 8002f12:	4618      	mov	r0, r3
 8002f14:	4611      	mov	r1, r2
 8002f16:	2350      	movs	r3, #80	; 0x50
 8002f18:	461a      	mov	r2, r3
 8002f1a:	f016 fb1d 	bl	8019558 <memcpy>
              goto TeleDoneFD;
 8002f1e:	e031      	b.n	8002f84 <main+0x10ac>
 8002f20:	24000b44 	.word	0x24000b44
 8002f24:	ffffe724 	.word	0xffffe724
 8002f28:	24001040 	.word	0x24001040
 8002f2c:	ffffe758 	.word	0xffffe758
 8002f30:	0801aea0 	.word	0x0801aea0
 8002f34:	0801ae9c 	.word	0x0801ae9c
 8002f38:	0801aebc 	.word	0x0801aebc
 8002f3c:	ffffea78 	.word	0xffffea78
 8002f40:	ffffeff0 	.word	0xffffeff0
          for(int j = 0; j < 50; j++){
 8002f44:	f641 5338 	movw	r3, #7480	; 0x1d38
 8002f48:	443b      	add	r3, r7
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	3301      	adds	r3, #1
 8002f4e:	f641 5238 	movw	r2, #7480	; 0x1d38
 8002f52:	443a      	add	r2, r7
 8002f54:	6013      	str	r3, [r2, #0]
 8002f56:	f641 5338 	movw	r3, #7480	; 0x1d38
 8002f5a:	443b      	add	r3, r7
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	2b31      	cmp	r3, #49	; 0x31
 8002f60:	dd8e      	ble.n	8002e80 <main+0xfa8>
      for(int i = 0; i <50; i++){
 8002f62:	f641 533c 	movw	r3, #7484	; 0x1d3c
 8002f66:	443b      	add	r3, r7
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	3301      	adds	r3, #1
 8002f6c:	f641 523c 	movw	r2, #7484	; 0x1d3c
 8002f70:	443a      	add	r2, r7
 8002f72:	6013      	str	r3, [r2, #0]
 8002f74:	f641 533c 	movw	r3, #7484	; 0x1d3c
 8002f78:	443b      	add	r3, r7
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	2b31      	cmp	r3, #49	; 0x31
 8002f7e:	f77f af6a 	ble.w	8002e56 <main+0xf7e>
            }
          }
        }
      }
TeleDoneFD:
 8002f82:	bf00      	nop
		  FDCAN_Flag = 0;
 8002f84:	4b99      	ldr	r3, [pc, #612]	; (80031ec <main+0x1314>)
 8002f86:	2200      	movs	r2, #0
 8002f88:	601a      	str	r2, [r3, #0]
	  }
	  if(CAN_Flag){
 8002f8a:	4b99      	ldr	r3, [pc, #612]	; (80031f0 <main+0x1318>)
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	2b00      	cmp	r3, #0
 8002f90:	f000 821d 	beq.w	80033ce <main+0x14f6>

		  RTC_TimeTypeDef lTime = sTime;
 8002f94:	4b97      	ldr	r3, [pc, #604]	; (80031f4 <main+0x131c>)
 8002f96:	f641 5270 	movw	r2, #7536	; 0x1d70
 8002f9a:	443a      	add	r2, r7
 8002f9c:	4413      	add	r3, r2
 8002f9e:	4a96      	ldr	r2, [pc, #600]	; (80031f8 <main+0x1320>)
 8002fa0:	461c      	mov	r4, r3
 8002fa2:	4615      	mov	r5, r2
 8002fa4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002fa6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002fa8:	682b      	ldr	r3, [r5, #0]
 8002faa:	6023      	str	r3, [r4, #0]
		  LocalTime = CanFrame.time;
 8002fac:	4b93      	ldr	r3, [pc, #588]	; (80031fc <main+0x1324>)
 8002fae:	689b      	ldr	r3, [r3, #8]
 8002fb0:	f641 521c 	movw	r2, #7452	; 0x1d1c
 8002fb4:	443a      	add	r2, r7
 8002fb6:	6013      	str	r3, [r2, #0]
		  lTime.SubSeconds += LocalTime % 1000;
 8002fb8:	4b8e      	ldr	r3, [pc, #568]	; (80031f4 <main+0x131c>)
 8002fba:	f641 5270 	movw	r2, #7536	; 0x1d70
 8002fbe:	443a      	add	r2, r7
 8002fc0:	4413      	add	r3, r2
 8002fc2:	6859      	ldr	r1, [r3, #4]
 8002fc4:	f641 531c 	movw	r3, #7452	; 0x1d1c
 8002fc8:	443b      	add	r3, r7
 8002fca:	681a      	ldr	r2, [r3, #0]
 8002fcc:	4b8c      	ldr	r3, [pc, #560]	; (8003200 <main+0x1328>)
 8002fce:	fba3 0302 	umull	r0, r3, r3, r2
 8002fd2:	099b      	lsrs	r3, r3, #6
 8002fd4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002fd8:	fb00 f303 	mul.w	r3, r0, r3
 8002fdc:	1ad3      	subs	r3, r2, r3
 8002fde:	18ca      	adds	r2, r1, r3
 8002fe0:	4b84      	ldr	r3, [pc, #528]	; (80031f4 <main+0x131c>)
 8002fe2:	f641 5170 	movw	r1, #7536	; 0x1d70
 8002fe6:	4439      	add	r1, r7
 8002fe8:	440b      	add	r3, r1
 8002fea:	605a      	str	r2, [r3, #4]
		  LocalTime = LocalTime/1000;
 8002fec:	f641 531c 	movw	r3, #7452	; 0x1d1c
 8002ff0:	443b      	add	r3, r7
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	4a82      	ldr	r2, [pc, #520]	; (8003200 <main+0x1328>)
 8002ff6:	fba2 2303 	umull	r2, r3, r2, r3
 8002ffa:	099b      	lsrs	r3, r3, #6
 8002ffc:	f641 521c 	movw	r2, #7452	; 0x1d1c
 8003000:	443a      	add	r2, r7
 8003002:	6013      	str	r3, [r2, #0]
		  lTime.Seconds += LocalTime % 60;
 8003004:	4b7b      	ldr	r3, [pc, #492]	; (80031f4 <main+0x131c>)
 8003006:	f641 5270 	movw	r2, #7536	; 0x1d70
 800300a:	443a      	add	r2, r7
 800300c:	4413      	add	r3, r2
 800300e:	7898      	ldrb	r0, [r3, #2]
 8003010:	f641 531c 	movw	r3, #7452	; 0x1d1c
 8003014:	443b      	add	r3, r7
 8003016:	6819      	ldr	r1, [r3, #0]
 8003018:	4b7a      	ldr	r3, [pc, #488]	; (8003204 <main+0x132c>)
 800301a:	fba3 2301 	umull	r2, r3, r3, r1
 800301e:	095a      	lsrs	r2, r3, #5
 8003020:	4613      	mov	r3, r2
 8003022:	011b      	lsls	r3, r3, #4
 8003024:	1a9b      	subs	r3, r3, r2
 8003026:	009b      	lsls	r3, r3, #2
 8003028:	1aca      	subs	r2, r1, r3
 800302a:	b2d3      	uxtb	r3, r2
 800302c:	4403      	add	r3, r0
 800302e:	b2da      	uxtb	r2, r3
 8003030:	4b70      	ldr	r3, [pc, #448]	; (80031f4 <main+0x131c>)
 8003032:	f641 5170 	movw	r1, #7536	; 0x1d70
 8003036:	4439      	add	r1, r7
 8003038:	440b      	add	r3, r1
 800303a:	709a      	strb	r2, [r3, #2]
		  if(lTime.Seconds >= 60){
 800303c:	4b6d      	ldr	r3, [pc, #436]	; (80031f4 <main+0x131c>)
 800303e:	f641 5270 	movw	r2, #7536	; 0x1d70
 8003042:	443a      	add	r2, r7
 8003044:	4413      	add	r3, r2
 8003046:	789b      	ldrb	r3, [r3, #2]
 8003048:	2b3b      	cmp	r3, #59	; 0x3b
 800304a:	d91b      	bls.n	8003084 <main+0x11ac>
			  lTime.Seconds -= 60;
 800304c:	4b69      	ldr	r3, [pc, #420]	; (80031f4 <main+0x131c>)
 800304e:	f641 5270 	movw	r2, #7536	; 0x1d70
 8003052:	443a      	add	r2, r7
 8003054:	4413      	add	r3, r2
 8003056:	789b      	ldrb	r3, [r3, #2]
 8003058:	3b3c      	subs	r3, #60	; 0x3c
 800305a:	b2da      	uxtb	r2, r3
 800305c:	4b65      	ldr	r3, [pc, #404]	; (80031f4 <main+0x131c>)
 800305e:	f641 5170 	movw	r1, #7536	; 0x1d70
 8003062:	4439      	add	r1, r7
 8003064:	440b      	add	r3, r1
 8003066:	709a      	strb	r2, [r3, #2]
			  lTime.Minutes += 1;
 8003068:	4b62      	ldr	r3, [pc, #392]	; (80031f4 <main+0x131c>)
 800306a:	f641 5270 	movw	r2, #7536	; 0x1d70
 800306e:	443a      	add	r2, r7
 8003070:	4413      	add	r3, r2
 8003072:	785b      	ldrb	r3, [r3, #1]
 8003074:	3301      	adds	r3, #1
 8003076:	b2da      	uxtb	r2, r3
 8003078:	4b5e      	ldr	r3, [pc, #376]	; (80031f4 <main+0x131c>)
 800307a:	f641 5170 	movw	r1, #7536	; 0x1d70
 800307e:	4439      	add	r1, r7
 8003080:	440b      	add	r3, r1
 8003082:	705a      	strb	r2, [r3, #1]
		  }
		  LocalTime = LocalTime/60;
 8003084:	f641 531c 	movw	r3, #7452	; 0x1d1c
 8003088:	443b      	add	r3, r7
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	4a5d      	ldr	r2, [pc, #372]	; (8003204 <main+0x132c>)
 800308e:	fba2 2303 	umull	r2, r3, r2, r3
 8003092:	095b      	lsrs	r3, r3, #5
 8003094:	f641 521c 	movw	r2, #7452	; 0x1d1c
 8003098:	443a      	add	r2, r7
 800309a:	6013      	str	r3, [r2, #0]
		  lTime.Minutes += LocalTime % 60;
 800309c:	4b55      	ldr	r3, [pc, #340]	; (80031f4 <main+0x131c>)
 800309e:	f641 5270 	movw	r2, #7536	; 0x1d70
 80030a2:	443a      	add	r2, r7
 80030a4:	4413      	add	r3, r2
 80030a6:	7858      	ldrb	r0, [r3, #1]
 80030a8:	f641 531c 	movw	r3, #7452	; 0x1d1c
 80030ac:	443b      	add	r3, r7
 80030ae:	6819      	ldr	r1, [r3, #0]
 80030b0:	4b54      	ldr	r3, [pc, #336]	; (8003204 <main+0x132c>)
 80030b2:	fba3 2301 	umull	r2, r3, r3, r1
 80030b6:	095a      	lsrs	r2, r3, #5
 80030b8:	4613      	mov	r3, r2
 80030ba:	011b      	lsls	r3, r3, #4
 80030bc:	1a9b      	subs	r3, r3, r2
 80030be:	009b      	lsls	r3, r3, #2
 80030c0:	1aca      	subs	r2, r1, r3
 80030c2:	b2d3      	uxtb	r3, r2
 80030c4:	4403      	add	r3, r0
 80030c6:	b2da      	uxtb	r2, r3
 80030c8:	4b4a      	ldr	r3, [pc, #296]	; (80031f4 <main+0x131c>)
 80030ca:	f641 5170 	movw	r1, #7536	; 0x1d70
 80030ce:	4439      	add	r1, r7
 80030d0:	440b      	add	r3, r1
 80030d2:	705a      	strb	r2, [r3, #1]
		  if(lTime.Minutes >= 60){
 80030d4:	4b47      	ldr	r3, [pc, #284]	; (80031f4 <main+0x131c>)
 80030d6:	f641 5270 	movw	r2, #7536	; 0x1d70
 80030da:	443a      	add	r2, r7
 80030dc:	4413      	add	r3, r2
 80030de:	785b      	ldrb	r3, [r3, #1]
 80030e0:	2b3b      	cmp	r3, #59	; 0x3b
 80030e2:	d91b      	bls.n	800311c <main+0x1244>
			  lTime.Minutes -= 60;
 80030e4:	4b43      	ldr	r3, [pc, #268]	; (80031f4 <main+0x131c>)
 80030e6:	f641 5270 	movw	r2, #7536	; 0x1d70
 80030ea:	443a      	add	r2, r7
 80030ec:	4413      	add	r3, r2
 80030ee:	785b      	ldrb	r3, [r3, #1]
 80030f0:	3b3c      	subs	r3, #60	; 0x3c
 80030f2:	b2da      	uxtb	r2, r3
 80030f4:	4b3f      	ldr	r3, [pc, #252]	; (80031f4 <main+0x131c>)
 80030f6:	f641 5170 	movw	r1, #7536	; 0x1d70
 80030fa:	4439      	add	r1, r7
 80030fc:	440b      	add	r3, r1
 80030fe:	705a      	strb	r2, [r3, #1]
			  lTime.Hours += 1;
 8003100:	4b3c      	ldr	r3, [pc, #240]	; (80031f4 <main+0x131c>)
 8003102:	f641 5270 	movw	r2, #7536	; 0x1d70
 8003106:	443a      	add	r2, r7
 8003108:	4413      	add	r3, r2
 800310a:	781b      	ldrb	r3, [r3, #0]
 800310c:	3301      	adds	r3, #1
 800310e:	b2da      	uxtb	r2, r3
 8003110:	4b38      	ldr	r3, [pc, #224]	; (80031f4 <main+0x131c>)
 8003112:	f641 5170 	movw	r1, #7536	; 0x1d70
 8003116:	4439      	add	r1, r7
 8003118:	440b      	add	r3, r1
 800311a:	701a      	strb	r2, [r3, #0]
		  }
		  LocalTime = LocalTime/60;
 800311c:	f641 531c 	movw	r3, #7452	; 0x1d1c
 8003120:	443b      	add	r3, r7
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	4a37      	ldr	r2, [pc, #220]	; (8003204 <main+0x132c>)
 8003126:	fba2 2303 	umull	r2, r3, r2, r3
 800312a:	095b      	lsrs	r3, r3, #5
 800312c:	f641 521c 	movw	r2, #7452	; 0x1d1c
 8003130:	443a      	add	r2, r7
 8003132:	6013      	str	r3, [r2, #0]
		  lTime.Hours += LocalTime % 60;
 8003134:	4b2f      	ldr	r3, [pc, #188]	; (80031f4 <main+0x131c>)
 8003136:	f641 5270 	movw	r2, #7536	; 0x1d70
 800313a:	443a      	add	r2, r7
 800313c:	4413      	add	r3, r2
 800313e:	7818      	ldrb	r0, [r3, #0]
 8003140:	f641 531c 	movw	r3, #7452	; 0x1d1c
 8003144:	443b      	add	r3, r7
 8003146:	6819      	ldr	r1, [r3, #0]
 8003148:	4b2e      	ldr	r3, [pc, #184]	; (8003204 <main+0x132c>)
 800314a:	fba3 2301 	umull	r2, r3, r3, r1
 800314e:	095a      	lsrs	r2, r3, #5
 8003150:	4613      	mov	r3, r2
 8003152:	011b      	lsls	r3, r3, #4
 8003154:	1a9b      	subs	r3, r3, r2
 8003156:	009b      	lsls	r3, r3, #2
 8003158:	1aca      	subs	r2, r1, r3
 800315a:	b2d3      	uxtb	r3, r2
 800315c:	4403      	add	r3, r0
 800315e:	b2da      	uxtb	r2, r3
 8003160:	4b24      	ldr	r3, [pc, #144]	; (80031f4 <main+0x131c>)
 8003162:	f641 5170 	movw	r1, #7536	; 0x1d70
 8003166:	4439      	add	r1, r7
 8003168:	440b      	add	r3, r1
 800316a:	701a      	strb	r2, [r3, #0]

		  //date/time, CANID, Data
		  CW = sprintf(CanWrite, "%u.%u.%u %u:%u:%u.%u,0x%X,",
				  sDate.Date,sDate.Month,sDate.Year, lTime.Hours,lTime.Minutes,lTime.Seconds,lTime.SubSeconds,
 800316c:	4b26      	ldr	r3, [pc, #152]	; (8003208 <main+0x1330>)
 800316e:	789b      	ldrb	r3, [r3, #2]
		  CW = sprintf(CanWrite, "%u.%u.%u %u:%u:%u.%u,0x%X,",
 8003170:	469c      	mov	ip, r3
				  sDate.Date,sDate.Month,sDate.Year, lTime.Hours,lTime.Minutes,lTime.Seconds,lTime.SubSeconds,
 8003172:	4b25      	ldr	r3, [pc, #148]	; (8003208 <main+0x1330>)
 8003174:	785b      	ldrb	r3, [r3, #1]
		  CW = sprintf(CanWrite, "%u.%u.%u %u:%u:%u.%u,0x%X,",
 8003176:	469e      	mov	lr, r3
				  sDate.Date,sDate.Month,sDate.Year, lTime.Hours,lTime.Minutes,lTime.Seconds,lTime.SubSeconds,
 8003178:	4b23      	ldr	r3, [pc, #140]	; (8003208 <main+0x1330>)
 800317a:	78db      	ldrb	r3, [r3, #3]
		  CW = sprintf(CanWrite, "%u.%u.%u %u:%u:%u.%u,0x%X,",
 800317c:	4619      	mov	r1, r3
				  sDate.Date,sDate.Month,sDate.Year, lTime.Hours,lTime.Minutes,lTime.Seconds,lTime.SubSeconds,
 800317e:	4b1d      	ldr	r3, [pc, #116]	; (80031f4 <main+0x131c>)
 8003180:	f641 5270 	movw	r2, #7536	; 0x1d70
 8003184:	443a      	add	r2, r7
 8003186:	4413      	add	r3, r2
 8003188:	781b      	ldrb	r3, [r3, #0]
		  CW = sprintf(CanWrite, "%u.%u.%u %u:%u:%u.%u,0x%X,",
 800318a:	461c      	mov	r4, r3
				  sDate.Date,sDate.Month,sDate.Year, lTime.Hours,lTime.Minutes,lTime.Seconds,lTime.SubSeconds,
 800318c:	4b19      	ldr	r3, [pc, #100]	; (80031f4 <main+0x131c>)
 800318e:	f641 5270 	movw	r2, #7536	; 0x1d70
 8003192:	443a      	add	r2, r7
 8003194:	4413      	add	r3, r2
 8003196:	785b      	ldrb	r3, [r3, #1]
		  CW = sprintf(CanWrite, "%u.%u.%u %u:%u:%u.%u,0x%X,",
 8003198:	461d      	mov	r5, r3
				  sDate.Date,sDate.Month,sDate.Year, lTime.Hours,lTime.Minutes,lTime.Seconds,lTime.SubSeconds,
 800319a:	4b16      	ldr	r3, [pc, #88]	; (80031f4 <main+0x131c>)
 800319c:	f641 5270 	movw	r2, #7536	; 0x1d70
 80031a0:	443a      	add	r2, r7
 80031a2:	4413      	add	r3, r2
 80031a4:	789b      	ldrb	r3, [r3, #2]
		  CW = sprintf(CanWrite, "%u.%u.%u %u:%u:%u.%u,0x%X,",
 80031a6:	461e      	mov	r6, r3
 80031a8:	4b12      	ldr	r3, [pc, #72]	; (80031f4 <main+0x131c>)
 80031aa:	f641 5270 	movw	r2, #7536	; 0x1d70
 80031ae:	443a      	add	r2, r7
 80031b0:	4413      	add	r3, r2
 80031b2:	685b      	ldr	r3, [r3, #4]
 80031b4:	4a11      	ldr	r2, [pc, #68]	; (80031fc <main+0x1324>)
 80031b6:	6812      	ldr	r2, [r2, #0]
 80031b8:	4814      	ldr	r0, [pc, #80]	; (800320c <main+0x1334>)
 80031ba:	f641 5870 	movw	r8, #7536	; 0x1d70
 80031be:	44b8      	add	r8, r7
 80031c0:	4440      	add	r0, r8
 80031c2:	9205      	str	r2, [sp, #20]
 80031c4:	9304      	str	r3, [sp, #16]
 80031c6:	9603      	str	r6, [sp, #12]
 80031c8:	9502      	str	r5, [sp, #8]
 80031ca:	9401      	str	r4, [sp, #4]
 80031cc:	9100      	str	r1, [sp, #0]
 80031ce:	4673      	mov	r3, lr
 80031d0:	4662      	mov	r2, ip
 80031d2:	490f      	ldr	r1, [pc, #60]	; (8003210 <main+0x1338>)
 80031d4:	f016 fb3c 	bl	8019850 <siprintf>
 80031d8:	f641 536c 	movw	r3, #7532	; 0x1d6c
 80031dc:	443b      	add	r3, r7
 80031de:	6018      	str	r0, [r3, #0]
				  CanFrame.id);
		  for(int i = 0; i < CanFDFrame.length; i++){
 80031e0:	2300      	movs	r3, #0
 80031e2:	f641 5234 	movw	r2, #7476	; 0x1d34
 80031e6:	443a      	add	r2, r7
 80031e8:	6013      	str	r3, [r2, #0]
 80031ea:	e03c      	b.n	8003266 <main+0x138e>
 80031ec:	240001fc 	.word	0x240001fc
 80031f0:	24000200 	.word	0x24000200
 80031f4:	ffffe710 	.word	0xffffe710
 80031f8:	24000b30 	.word	0x24000b30
 80031fc:	240010b8 	.word	0x240010b8
 8003200:	10624dd3 	.word	0x10624dd3
 8003204:	88888889 	.word	0x88888889
 8003208:	24000b44 	.word	0x24000b44
 800320c:	ffffe8e8 	.word	0xffffe8e8
 8003210:	0801aea0 	.word	0x0801aea0
			  CW += sprintf(CanWrite + CW, "%c", CanFrame.data.bytes[i]);
 8003214:	f641 536c 	movw	r3, #7532	; 0x1d6c
 8003218:	443b      	add	r3, r7
 800321a:	681a      	ldr	r2, [r3, #0]
 800321c:	4b74      	ldr	r3, [pc, #464]	; (80033f0 <main+0x1518>)
 800321e:	f641 5170 	movw	r1, #7536	; 0x1d70
 8003222:	4439      	add	r1, r7
 8003224:	440b      	add	r3, r1
 8003226:	1898      	adds	r0, r3, r2
 8003228:	4a72      	ldr	r2, [pc, #456]	; (80033f4 <main+0x151c>)
 800322a:	f641 5334 	movw	r3, #7476	; 0x1d34
 800322e:	443b      	add	r3, r7
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	4413      	add	r3, r2
 8003234:	3310      	adds	r3, #16
 8003236:	781b      	ldrb	r3, [r3, #0]
 8003238:	461a      	mov	r2, r3
 800323a:	496f      	ldr	r1, [pc, #444]	; (80033f8 <main+0x1520>)
 800323c:	f016 fb08 	bl	8019850 <siprintf>
 8003240:	4602      	mov	r2, r0
 8003242:	f641 536c 	movw	r3, #7532	; 0x1d6c
 8003246:	443b      	add	r3, r7
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	4413      	add	r3, r2
 800324c:	f641 526c 	movw	r2, #7532	; 0x1d6c
 8003250:	443a      	add	r2, r7
 8003252:	6013      	str	r3, [r2, #0]
		  for(int i = 0; i < CanFDFrame.length; i++){
 8003254:	f641 5334 	movw	r3, #7476	; 0x1d34
 8003258:	443b      	add	r3, r7
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	3301      	adds	r3, #1
 800325e:	f641 5234 	movw	r2, #7476	; 0x1d34
 8003262:	443a      	add	r2, r7
 8003264:	6013      	str	r3, [r2, #0]
 8003266:	4b65      	ldr	r3, [pc, #404]	; (80033fc <main+0x1524>)
 8003268:	689a      	ldr	r2, [r3, #8]
 800326a:	f641 5334 	movw	r3, #7476	; 0x1d34
 800326e:	443b      	add	r3, r7
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	429a      	cmp	r2, r3
 8003274:	d8ce      	bhi.n	8003214 <main+0x133c>
		  }
		  CW += sprintf(CanWrite + CW, "\n\r");
 8003276:	f641 536c 	movw	r3, #7532	; 0x1d6c
 800327a:	443b      	add	r3, r7
 800327c:	681a      	ldr	r2, [r3, #0]
 800327e:	4b5c      	ldr	r3, [pc, #368]	; (80033f0 <main+0x1518>)
 8003280:	f641 5170 	movw	r1, #7536	; 0x1d70
 8003284:	4439      	add	r1, r7
 8003286:	440b      	add	r3, r1
 8003288:	4413      	add	r3, r2
 800328a:	4a5d      	ldr	r2, [pc, #372]	; (8003400 <main+0x1528>)
 800328c:	8811      	ldrh	r1, [r2, #0]
 800328e:	7892      	ldrb	r2, [r2, #2]
 8003290:	8019      	strh	r1, [r3, #0]
 8003292:	709a      	strb	r2, [r3, #2]
 8003294:	2202      	movs	r2, #2
 8003296:	f641 536c 	movw	r3, #7532	; 0x1d6c
 800329a:	443b      	add	r3, r7
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	4413      	add	r3, r2
 80032a0:	f641 526c 	movw	r2, #7532	; 0x1d6c
 80032a4:	443a      	add	r2, r7
 80032a6:	6013      	str	r3, [r2, #0]
		  WriteToBuff(CanWrite, CW);
 80032a8:	4b51      	ldr	r3, [pc, #324]	; (80033f0 <main+0x1518>)
 80032aa:	f641 5270 	movw	r2, #7536	; 0x1d70
 80032ae:	443a      	add	r2, r7
 80032b0:	4413      	add	r3, r2
 80032b2:	f641 526c 	movw	r2, #7532	; 0x1d6c
 80032b6:	443a      	add	r2, r7
 80032b8:	6811      	ldr	r1, [r2, #0]
 80032ba:	4618      	mov	r0, r3
 80032bc:	f7fe fd6e 	bl	8001d9c <WriteToBuff>

      for(int i = 0; i <50; i++){
 80032c0:	2300      	movs	r3, #0
 80032c2:	f641 5230 	movw	r2, #7472	; 0x1d30
 80032c6:	443a      	add	r2, r7
 80032c8:	6013      	str	r3, [r2, #0]
 80032ca:	e074      	b.n	80033b6 <main+0x14de>
        if(CanFrame.id == Tele_IDs[i]){ //check if frame should be checked
 80032cc:	4b49      	ldr	r3, [pc, #292]	; (80033f4 <main+0x151c>)
 80032ce:	681a      	ldr	r2, [r3, #0]
 80032d0:	4b4c      	ldr	r3, [pc, #304]	; (8003404 <main+0x152c>)
 80032d2:	f641 5170 	movw	r1, #7536	; 0x1d70
 80032d6:	4439      	add	r1, r7
 80032d8:	440b      	add	r3, r1
 80032da:	f641 5130 	movw	r1, #7472	; 0x1d30
 80032de:	4439      	add	r1, r7
 80032e0:	6809      	ldr	r1, [r1, #0]
 80032e2:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80032e6:	429a      	cmp	r2, r3
 80032e8:	d15c      	bne.n	80033a4 <main+0x14cc>
          for(int j = 0; j < 50; j++){
 80032ea:	2300      	movs	r3, #0
 80032ec:	f641 522c 	movw	r2, #7468	; 0x1d2c
 80032f0:	443a      	add	r2, r7
 80032f2:	6013      	str	r3, [r2, #0]
 80032f4:	e050      	b.n	8003398 <main+0x14c0>
            if(Buffer[j].id == CanFrame.id){
 80032f6:	f507 610b 	add.w	r1, r7, #2224	; 0x8b0
 80032fa:	f641 532c 	movw	r3, #7468	; 0x1d2c
 80032fe:	443b      	add	r3, r7
 8003300:	681a      	ldr	r2, [r3, #0]
 8003302:	4613      	mov	r3, r2
 8003304:	005b      	lsls	r3, r3, #1
 8003306:	4413      	add	r3, r2
 8003308:	00db      	lsls	r3, r3, #3
 800330a:	440b      	add	r3, r1
 800330c:	681a      	ldr	r2, [r3, #0]
 800330e:	4b39      	ldr	r3, [pc, #228]	; (80033f4 <main+0x151c>)
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	429a      	cmp	r2, r3
 8003314:	d114      	bne.n	8003340 <main+0x1468>
              Buffer[j] = CanFrame;     //if its already in the buffer replace it
 8003316:	f507 610b 	add.w	r1, r7, #2224	; 0x8b0
 800331a:	f641 532c 	movw	r3, #7468	; 0x1d2c
 800331e:	443b      	add	r3, r7
 8003320:	681a      	ldr	r2, [r3, #0]
 8003322:	4613      	mov	r3, r2
 8003324:	005b      	lsls	r3, r3, #1
 8003326:	4413      	add	r3, r2
 8003328:	00db      	lsls	r3, r3, #3
 800332a:	440b      	add	r3, r1
 800332c:	4a31      	ldr	r2, [pc, #196]	; (80033f4 <main+0x151c>)
 800332e:	461c      	mov	r4, r3
 8003330:	4615      	mov	r5, r2
 8003332:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003334:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003336:	e895 0003 	ldmia.w	r5, {r0, r1}
 800333a:	e884 0003 	stmia.w	r4, {r0, r1}
              goto TeleDone;
 800333e:	e043      	b.n	80033c8 <main+0x14f0>
            }
            if(Buffer[j].id == 0){
 8003340:	f507 610b 	add.w	r1, r7, #2224	; 0x8b0
 8003344:	f641 532c 	movw	r3, #7468	; 0x1d2c
 8003348:	443b      	add	r3, r7
 800334a:	681a      	ldr	r2, [r3, #0]
 800334c:	4613      	mov	r3, r2
 800334e:	005b      	lsls	r3, r3, #1
 8003350:	4413      	add	r3, r2
 8003352:	00db      	lsls	r3, r3, #3
 8003354:	440b      	add	r3, r1
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	2b00      	cmp	r3, #0
 800335a:	d114      	bne.n	8003386 <main+0x14ae>
              Buffer[j] = CanFrame;     //if you get to the end of the defined packets withoout finding anything add the packet on the end
 800335c:	f507 610b 	add.w	r1, r7, #2224	; 0x8b0
 8003360:	f641 532c 	movw	r3, #7468	; 0x1d2c
 8003364:	443b      	add	r3, r7
 8003366:	681a      	ldr	r2, [r3, #0]
 8003368:	4613      	mov	r3, r2
 800336a:	005b      	lsls	r3, r3, #1
 800336c:	4413      	add	r3, r2
 800336e:	00db      	lsls	r3, r3, #3
 8003370:	440b      	add	r3, r1
 8003372:	4a20      	ldr	r2, [pc, #128]	; (80033f4 <main+0x151c>)
 8003374:	461c      	mov	r4, r3
 8003376:	4615      	mov	r5, r2
 8003378:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800337a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800337c:	e895 0003 	ldmia.w	r5, {r0, r1}
 8003380:	e884 0003 	stmia.w	r4, {r0, r1}
              goto TeleDone;
 8003384:	e020      	b.n	80033c8 <main+0x14f0>
          for(int j = 0; j < 50; j++){
 8003386:	f641 532c 	movw	r3, #7468	; 0x1d2c
 800338a:	443b      	add	r3, r7
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	3301      	adds	r3, #1
 8003390:	f641 522c 	movw	r2, #7468	; 0x1d2c
 8003394:	443a      	add	r2, r7
 8003396:	6013      	str	r3, [r2, #0]
 8003398:	f641 532c 	movw	r3, #7468	; 0x1d2c
 800339c:	443b      	add	r3, r7
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	2b31      	cmp	r3, #49	; 0x31
 80033a2:	dda8      	ble.n	80032f6 <main+0x141e>
      for(int i = 0; i <50; i++){
 80033a4:	f641 5330 	movw	r3, #7472	; 0x1d30
 80033a8:	443b      	add	r3, r7
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	3301      	adds	r3, #1
 80033ae:	f641 5230 	movw	r2, #7472	; 0x1d30
 80033b2:	443a      	add	r2, r7
 80033b4:	6013      	str	r3, [r2, #0]
 80033b6:	f641 5330 	movw	r3, #7472	; 0x1d30
 80033ba:	443b      	add	r3, r7
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	2b31      	cmp	r3, #49	; 0x31
 80033c0:	dd84      	ble.n	80032cc <main+0x13f4>
            }
          }
        }
      }
      printf("couldnt track, id buffer too full :(");
 80033c2:	4811      	ldr	r0, [pc, #68]	; (8003408 <main+0x1530>)
 80033c4:	f016 f984 	bl	80196d0 <iprintf>
TeleDone:
		  CAN_Flag = 0;
 80033c8:	4b10      	ldr	r3, [pc, #64]	; (800340c <main+0x1534>)
 80033ca:	2200      	movs	r2, #0
 80033cc:	601a      	str	r2, [r3, #0]
  while (end_flag){
 80033ce:	4b10      	ldr	r3, [pc, #64]	; (8003410 <main+0x1538>)
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	2b00      	cmp	r3, #0
 80033d4:	f47f a8f6 	bne.w	80025c4 <main+0x6ec>
    /* USER CODE BEGIN 3 */
}

    //f_write(&myFILE, close_msg, strlen(close_msg), &testByte);
    //f_close(&myFILE);
    HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_0);
 80033d8:	2101      	movs	r1, #1
 80033da:	480e      	ldr	r0, [pc, #56]	; (8003414 <main+0x153c>)
 80033dc:	f004 feaf 	bl	800813e <HAL_GPIO_TogglePin>
 80033e0:	2300      	movs	r3, #0
    //printf("File closed\n");

  /* USER CODE END 3 */
}
 80033e2:	4618      	mov	r0, r3
 80033e4:	f507 57eb 	add.w	r7, r7, #7520	; 0x1d60
 80033e8:	3710      	adds	r7, #16
 80033ea:	46bd      	mov	sp, r7
 80033ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80033f0:	ffffe8e8 	.word	0xffffe8e8
 80033f4:	240010b8 	.word	0x240010b8
 80033f8:	0801ae9c 	.word	0x0801ae9c
 80033fc:	24001040 	.word	0x24001040
 8003400:	0801aebc 	.word	0x0801aebc
 8003404:	ffffea78 	.word	0xffffea78
 8003408:	0801aec0 	.word	0x0801aec0
 800340c:	24000200 	.word	0x24000200
 8003410:	24000008 	.word	0x24000008
 8003414:	58020400 	.word	0x58020400

08003418 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8003418:	b580      	push	{r7, lr}
 800341a:	b0cc      	sub	sp, #304	; 0x130
 800341c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800341e:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8003422:	224c      	movs	r2, #76	; 0x4c
 8003424:	2100      	movs	r1, #0
 8003426:	4618      	mov	r0, r3
 8003428:	f016 f8a1 	bl	801956e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800342c:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8003430:	2220      	movs	r2, #32
 8003432:	2100      	movs	r1, #0
 8003434:	4618      	mov	r0, r3
 8003436:	f016 f89a 	bl	801956e <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800343a:	f107 0308 	add.w	r3, r7, #8
 800343e:	4618      	mov	r0, r3
 8003440:	23bc      	movs	r3, #188	; 0xbc
 8003442:	461a      	mov	r2, r3
 8003444:	2100      	movs	r1, #0
 8003446:	f016 f892 	bl	801956e <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 800344a:	2002      	movs	r0, #2
 800344c:	f006 f972 	bl	8009734 <HAL_PWREx_ConfigSupply>
  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8003450:	1d3b      	adds	r3, r7, #4
 8003452:	2200      	movs	r2, #0
 8003454:	601a      	str	r2, [r3, #0]
 8003456:	4b71      	ldr	r3, [pc, #452]	; (800361c <SystemClock_Config+0x204>)
 8003458:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800345a:	4a70      	ldr	r2, [pc, #448]	; (800361c <SystemClock_Config+0x204>)
 800345c:	f023 0301 	bic.w	r3, r3, #1
 8003460:	62d3      	str	r3, [r2, #44]	; 0x2c
 8003462:	4b6e      	ldr	r3, [pc, #440]	; (800361c <SystemClock_Config+0x204>)
 8003464:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003466:	f003 0201 	and.w	r2, r3, #1
 800346a:	1d3b      	adds	r3, r7, #4
 800346c:	601a      	str	r2, [r3, #0]
 800346e:	4b6c      	ldr	r3, [pc, #432]	; (8003620 <SystemClock_Config+0x208>)
 8003470:	699b      	ldr	r3, [r3, #24]
 8003472:	4a6b      	ldr	r2, [pc, #428]	; (8003620 <SystemClock_Config+0x208>)
 8003474:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003478:	6193      	str	r3, [r2, #24]
 800347a:	4b69      	ldr	r3, [pc, #420]	; (8003620 <SystemClock_Config+0x208>)
 800347c:	699b      	ldr	r3, [r3, #24]
 800347e:	f403 4240 	and.w	r2, r3, #49152	; 0xc000
 8003482:	1d3b      	adds	r3, r7, #4
 8003484:	601a      	str	r2, [r3, #0]
 8003486:	1d3b      	adds	r3, r7, #4
 8003488:	681b      	ldr	r3, [r3, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 800348a:	bf00      	nop
 800348c:	4b64      	ldr	r3, [pc, #400]	; (8003620 <SystemClock_Config+0x208>)
 800348e:	699b      	ldr	r3, [r3, #24]
 8003490:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003494:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003498:	d1f8      	bne.n	800348c <SystemClock_Config+0x74>
  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 800349a:	f006 f8b1 	bl	8009600 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_HIGH);
 800349e:	f001 f93d 	bl	800471c <HAL_GetREVID>
 80034a2:	4b60      	ldr	r3, [pc, #384]	; (8003624 <SystemClock_Config+0x20c>)
 80034a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80034a6:	4a5f      	ldr	r2, [pc, #380]	; (8003624 <SystemClock_Config+0x20c>)
 80034a8:	f043 0318 	orr.w	r3, r3, #24
 80034ac:	6713      	str	r3, [r2, #112]	; 0x70
  /** Macro to configure the PLL clock source
  */
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSE);
 80034ae:	4b5d      	ldr	r3, [pc, #372]	; (8003624 <SystemClock_Config+0x20c>)
 80034b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80034b2:	f023 0303 	bic.w	r3, r3, #3
 80034b6:	4a5b      	ldr	r2, [pc, #364]	; (8003624 <SystemClock_Config+0x20c>)
 80034b8:	f043 0302 	orr.w	r3, r3, #2
 80034bc:	6293      	str	r3, [r2, #40]	; 0x28
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSE
 80034be:	2325      	movs	r3, #37	; 0x25
 80034c0:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
                              |RCC_OSCILLATORTYPE_LSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80034c4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80034c8:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 80034cc:	2301      	movs	r3, #1
 80034ce:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 80034d2:	2301      	movs	r3, #1
 80034d4:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80034d8:	2302      	movs	r3, #2
 80034da:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80034de:	2302      	movs	r3, #2
 80034e0:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  RCC_OscInitStruct.PLL.PLLM = 2;
 80034e4:	2302      	movs	r3, #2
 80034e6:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
  RCC_OscInitStruct.PLL.PLLN = 64;
 80034ea:	2340      	movs	r3, #64	; 0x40
 80034ec:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
  RCC_OscInitStruct.PLL.PLLP = 2;
 80034f0:	2302      	movs	r3, #2
 80034f2:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  RCC_OscInitStruct.PLL.PLLQ = 10;
 80034f6:	230a      	movs	r3, #10
 80034f8:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  RCC_OscInitStruct.PLL.PLLR = 2;
 80034fc:	2302      	movs	r3, #2
 80034fe:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8003502:	230c      	movs	r3, #12
 8003504:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8003508:	2300      	movs	r3, #0
 800350a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 800350e:	2300      	movs	r3, #0
 8003510:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003514:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8003518:	4618      	mov	r0, r3
 800351a:	f006 f999 	bl	8009850 <HAL_RCC_OscConfig>
 800351e:	4603      	mov	r3, r0
 8003520:	2b00      	cmp	r3, #0
 8003522:	d001      	beq.n	8003528 <SystemClock_Config+0x110>
  {
    Error_Handler();
 8003524:	f000 fbe4 	bl	8003cf0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8003528:	233f      	movs	r3, #63	; 0x3f
 800352a:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800352e:	2303      	movs	r3, #3
 8003530:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8003534:	2300      	movs	r3, #0
 8003536:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 800353a:	2308      	movs	r3, #8
 800353c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8003540:	2340      	movs	r3, #64	; 0x40
 8003542:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8003546:	2340      	movs	r3, #64	; 0x40
 8003548:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 800354c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003550:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8003554:	2340      	movs	r3, #64	; 0x40
 8003556:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800355a:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 800355e:	2102      	movs	r1, #2
 8003560:	4618      	mov	r0, r3
 8003562:	f006 fd85 	bl	800a070 <HAL_RCC_ClockConfig>
 8003566:	4603      	mov	r3, r0
 8003568:	2b00      	cmp	r3, #0
 800356a:	d001      	beq.n	8003570 <SystemClock_Config+0x158>
  {
    Error_Handler();
 800356c:	f000 fbc0 	bl	8003cf0 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC|RCC_PERIPHCLK_USART3
 8003570:	f107 0308 	add.w	r3, r7, #8
 8003574:	4a2c      	ldr	r2, [pc, #176]	; (8003628 <SystemClock_Config+0x210>)
 8003576:	601a      	str	r2, [r3, #0]
                              |RCC_PERIPHCLK_FDCAN|RCC_PERIPHCLK_UART8
                              |RCC_PERIPHCLK_SPI1|RCC_PERIPHCLK_SDMMC
                              |RCC_PERIPHCLK_USB;
  PeriphClkInitStruct.PLL2.PLL2M = 2;
 8003578:	f107 0308 	add.w	r3, r7, #8
 800357c:	2202      	movs	r2, #2
 800357e:	605a      	str	r2, [r3, #4]
  PeriphClkInitStruct.PLL2.PLL2N = 12;
 8003580:	f107 0308 	add.w	r3, r7, #8
 8003584:	220c      	movs	r2, #12
 8003586:	609a      	str	r2, [r3, #8]
  PeriphClkInitStruct.PLL2.PLL2P = 3;
 8003588:	f107 0308 	add.w	r3, r7, #8
 800358c:	2203      	movs	r2, #3
 800358e:	60da      	str	r2, [r3, #12]
  PeriphClkInitStruct.PLL2.PLL2Q = 2;
 8003590:	f107 0308 	add.w	r3, r7, #8
 8003594:	2202      	movs	r2, #2
 8003596:	611a      	str	r2, [r3, #16]
  PeriphClkInitStruct.PLL2.PLL2R = 3;
 8003598:	f107 0308 	add.w	r3, r7, #8
 800359c:	2203      	movs	r2, #3
 800359e:	615a      	str	r2, [r3, #20]
  PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_3;
 80035a0:	f107 0308 	add.w	r3, r7, #8
 80035a4:	22c0      	movs	r2, #192	; 0xc0
 80035a6:	619a      	str	r2, [r3, #24]
  PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOMEDIUM;
 80035a8:	f107 0308 	add.w	r3, r7, #8
 80035ac:	2220      	movs	r2, #32
 80035ae:	61da      	str	r2, [r3, #28]
  PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 80035b0:	f107 0308 	add.w	r3, r7, #8
 80035b4:	2200      	movs	r2, #0
 80035b6:	621a      	str	r2, [r3, #32]
  PeriphClkInitStruct.SdmmcClockSelection = RCC_SDMMCCLKSOURCE_PLL2;
 80035b8:	f107 0308 	add.w	r3, r7, #8
 80035bc:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80035c0:	64da      	str	r2, [r3, #76]	; 0x4c
  PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL2;
 80035c2:	f107 0308 	add.w	r3, r7, #8
 80035c6:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80035ca:	65da      	str	r2, [r3, #92]	; 0x5c
  PeriphClkInitStruct.FdcanClockSelection = RCC_FDCANCLKSOURCE_PLL;
 80035cc:	f107 0308 	add.w	r3, r7, #8
 80035d0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80035d4:	66da      	str	r2, [r3, #108]	; 0x6c
  PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 80035d6:	f107 0308 	add.w	r3, r7, #8
 80035da:	2200      	movs	r2, #0
 80035dc:	675a      	str	r2, [r3, #116]	; 0x74
  PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 80035de:	f107 0308 	add.w	r3, r7, #8
 80035e2:	f44f 1240 	mov.w	r2, #3145728	; 0x300000
 80035e6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 80035ea:	f107 0308 	add.w	r3, r7, #8
 80035ee:	f44f 7280 	mov.w	r2, #256	; 0x100
 80035f2:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80035f6:	f107 0308 	add.w	r3, r7, #8
 80035fa:	4618      	mov	r0, r3
 80035fc:	f007 f8e8 	bl	800a7d0 <HAL_RCCEx_PeriphCLKConfig>
 8003600:	4603      	mov	r3, r0
 8003602:	2b00      	cmp	r3, #0
 8003604:	d001      	beq.n	800360a <SystemClock_Config+0x1f2>
  {
    Error_Handler();
 8003606:	f000 fb73 	bl	8003cf0 <Error_Handler>
  }
  /** Enables the Clock Security System
  */
  HAL_RCC_EnableCSS();
 800360a:	f006 fee7 	bl	800a3dc <HAL_RCC_EnableCSS>
  /** Enable USB Voltage detector
  */
  HAL_PWREx_EnableUSBVoltageDetector();
 800360e:	f006 f8cb 	bl	80097a8 <HAL_PWREx_EnableUSBVoltageDetector>
}
 8003612:	bf00      	nop
 8003614:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8003618:	46bd      	mov	sp, r7
 800361a:	bd80      	pop	{r7, pc}
 800361c:	58000400 	.word	0x58000400
 8003620:	58024800 	.word	0x58024800
 8003624:	58024400 	.word	0x58024400
 8003628:	00459002 	.word	0x00459002

0800362c <MX_FDCAN1_Init>:
  * @brief FDCAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_FDCAN1_Init(void)
{
 800362c:	b580      	push	{r7, lr}
 800362e:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN1_Init 0 */

  /* USER CODE BEGIN FDCAN1_Init 1 */

  /* USER CODE END FDCAN1_Init 1 */
  hfdcan1.Instance = FDCAN1;
 8003630:	4b2f      	ldr	r3, [pc, #188]	; (80036f0 <MX_FDCAN1_Init+0xc4>)
 8003632:	4a30      	ldr	r2, [pc, #192]	; (80036f4 <MX_FDCAN1_Init+0xc8>)
 8003634:	601a      	str	r2, [r3, #0]
  hfdcan1.Init.FrameFormat = FDCAN_FRAME_FD_BRS;
 8003636:	4b2e      	ldr	r3, [pc, #184]	; (80036f0 <MX_FDCAN1_Init+0xc4>)
 8003638:	f44f 7240 	mov.w	r2, #768	; 0x300
 800363c:	609a      	str	r2, [r3, #8]
  hfdcan1.Init.Mode = FDCAN_MODE_NORMAL;
 800363e:	4b2c      	ldr	r3, [pc, #176]	; (80036f0 <MX_FDCAN1_Init+0xc4>)
 8003640:	2200      	movs	r2, #0
 8003642:	60da      	str	r2, [r3, #12]
  hfdcan1.Init.AutoRetransmission = DISABLE;
 8003644:	4b2a      	ldr	r3, [pc, #168]	; (80036f0 <MX_FDCAN1_Init+0xc4>)
 8003646:	2200      	movs	r2, #0
 8003648:	741a      	strb	r2, [r3, #16]
  hfdcan1.Init.TransmitPause = DISABLE;
 800364a:	4b29      	ldr	r3, [pc, #164]	; (80036f0 <MX_FDCAN1_Init+0xc4>)
 800364c:	2200      	movs	r2, #0
 800364e:	745a      	strb	r2, [r3, #17]
  hfdcan1.Init.ProtocolException = DISABLE;
 8003650:	4b27      	ldr	r3, [pc, #156]	; (80036f0 <MX_FDCAN1_Init+0xc4>)
 8003652:	2200      	movs	r2, #0
 8003654:	749a      	strb	r2, [r3, #18]
  hfdcan1.Init.NominalPrescaler = 1;
 8003656:	4b26      	ldr	r3, [pc, #152]	; (80036f0 <MX_FDCAN1_Init+0xc4>)
 8003658:	2201      	movs	r2, #1
 800365a:	615a      	str	r2, [r3, #20]
  hfdcan1.Init.NominalSyncJumpWidth = 23;
 800365c:	4b24      	ldr	r3, [pc, #144]	; (80036f0 <MX_FDCAN1_Init+0xc4>)
 800365e:	2217      	movs	r2, #23
 8003660:	619a      	str	r2, [r3, #24]
  hfdcan1.Init.NominalTimeSeg1 = 56;
 8003662:	4b23      	ldr	r3, [pc, #140]	; (80036f0 <MX_FDCAN1_Init+0xc4>)
 8003664:	2238      	movs	r2, #56	; 0x38
 8003666:	61da      	str	r2, [r3, #28]
  hfdcan1.Init.NominalTimeSeg2 = 23;
 8003668:	4b21      	ldr	r3, [pc, #132]	; (80036f0 <MX_FDCAN1_Init+0xc4>)
 800366a:	2217      	movs	r2, #23
 800366c:	621a      	str	r2, [r3, #32]
  hfdcan1.Init.DataPrescaler = 1;
 800366e:	4b20      	ldr	r3, [pc, #128]	; (80036f0 <MX_FDCAN1_Init+0xc4>)
 8003670:	2201      	movs	r2, #1
 8003672:	625a      	str	r2, [r3, #36]	; 0x24
  hfdcan1.Init.DataSyncJumpWidth = 5;
 8003674:	4b1e      	ldr	r3, [pc, #120]	; (80036f0 <MX_FDCAN1_Init+0xc4>)
 8003676:	2205      	movs	r2, #5
 8003678:	629a      	str	r2, [r3, #40]	; 0x28
  hfdcan1.Init.DataTimeSeg1 = 10;
 800367a:	4b1d      	ldr	r3, [pc, #116]	; (80036f0 <MX_FDCAN1_Init+0xc4>)
 800367c:	220a      	movs	r2, #10
 800367e:	62da      	str	r2, [r3, #44]	; 0x2c
  hfdcan1.Init.DataTimeSeg2 = 5;
 8003680:	4b1b      	ldr	r3, [pc, #108]	; (80036f0 <MX_FDCAN1_Init+0xc4>)
 8003682:	2205      	movs	r2, #5
 8003684:	631a      	str	r2, [r3, #48]	; 0x30
  hfdcan1.Init.MessageRAMOffset = 0;
 8003686:	4b1a      	ldr	r3, [pc, #104]	; (80036f0 <MX_FDCAN1_Init+0xc4>)
 8003688:	2200      	movs	r2, #0
 800368a:	635a      	str	r2, [r3, #52]	; 0x34
  hfdcan1.Init.StdFiltersNbr = 2;
 800368c:	4b18      	ldr	r3, [pc, #96]	; (80036f0 <MX_FDCAN1_Init+0xc4>)
 800368e:	2202      	movs	r2, #2
 8003690:	639a      	str	r2, [r3, #56]	; 0x38
  hfdcan1.Init.ExtFiltersNbr = 2;
 8003692:	4b17      	ldr	r3, [pc, #92]	; (80036f0 <MX_FDCAN1_Init+0xc4>)
 8003694:	2202      	movs	r2, #2
 8003696:	63da      	str	r2, [r3, #60]	; 0x3c
  hfdcan1.Init.RxFifo0ElmtsNbr = 64;
 8003698:	4b15      	ldr	r3, [pc, #84]	; (80036f0 <MX_FDCAN1_Init+0xc4>)
 800369a:	2240      	movs	r2, #64	; 0x40
 800369c:	641a      	str	r2, [r3, #64]	; 0x40
  hfdcan1.Init.RxFifo0ElmtSize = FDCAN_DATA_BYTES_64;
 800369e:	4b14      	ldr	r3, [pc, #80]	; (80036f0 <MX_FDCAN1_Init+0xc4>)
 80036a0:	2212      	movs	r2, #18
 80036a2:	645a      	str	r2, [r3, #68]	; 0x44
  hfdcan1.Init.RxFifo1ElmtsNbr = 0;
 80036a4:	4b12      	ldr	r3, [pc, #72]	; (80036f0 <MX_FDCAN1_Init+0xc4>)
 80036a6:	2200      	movs	r2, #0
 80036a8:	649a      	str	r2, [r3, #72]	; 0x48
  hfdcan1.Init.RxFifo1ElmtSize = FDCAN_DATA_BYTES_8;
 80036aa:	4b11      	ldr	r3, [pc, #68]	; (80036f0 <MX_FDCAN1_Init+0xc4>)
 80036ac:	2204      	movs	r2, #4
 80036ae:	64da      	str	r2, [r3, #76]	; 0x4c
  hfdcan1.Init.RxBuffersNbr = 0;
 80036b0:	4b0f      	ldr	r3, [pc, #60]	; (80036f0 <MX_FDCAN1_Init+0xc4>)
 80036b2:	2200      	movs	r2, #0
 80036b4:	651a      	str	r2, [r3, #80]	; 0x50
  hfdcan1.Init.RxBufferSize = FDCAN_DATA_BYTES_8;
 80036b6:	4b0e      	ldr	r3, [pc, #56]	; (80036f0 <MX_FDCAN1_Init+0xc4>)
 80036b8:	2204      	movs	r2, #4
 80036ba:	655a      	str	r2, [r3, #84]	; 0x54
  hfdcan1.Init.TxEventsNbr = 0;
 80036bc:	4b0c      	ldr	r3, [pc, #48]	; (80036f0 <MX_FDCAN1_Init+0xc4>)
 80036be:	2200      	movs	r2, #0
 80036c0:	659a      	str	r2, [r3, #88]	; 0x58
  hfdcan1.Init.TxBuffersNbr = 0;
 80036c2:	4b0b      	ldr	r3, [pc, #44]	; (80036f0 <MX_FDCAN1_Init+0xc4>)
 80036c4:	2200      	movs	r2, #0
 80036c6:	65da      	str	r2, [r3, #92]	; 0x5c
  hfdcan1.Init.TxFifoQueueElmtsNbr = 0;
 80036c8:	4b09      	ldr	r3, [pc, #36]	; (80036f0 <MX_FDCAN1_Init+0xc4>)
 80036ca:	2200      	movs	r2, #0
 80036cc:	661a      	str	r2, [r3, #96]	; 0x60
  hfdcan1.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 80036ce:	4b08      	ldr	r3, [pc, #32]	; (80036f0 <MX_FDCAN1_Init+0xc4>)
 80036d0:	2200      	movs	r2, #0
 80036d2:	665a      	str	r2, [r3, #100]	; 0x64
  hfdcan1.Init.TxElmtSize = FDCAN_DATA_BYTES_8;
 80036d4:	4b06      	ldr	r3, [pc, #24]	; (80036f0 <MX_FDCAN1_Init+0xc4>)
 80036d6:	2204      	movs	r2, #4
 80036d8:	669a      	str	r2, [r3, #104]	; 0x68
  if (HAL_FDCAN_Init(&hfdcan1) != HAL_OK)
 80036da:	4805      	ldr	r0, [pc, #20]	; (80036f0 <MX_FDCAN1_Init+0xc4>)
 80036dc:	f003 fa12 	bl	8006b04 <HAL_FDCAN_Init>
 80036e0:	4603      	mov	r3, r0
 80036e2:	2b00      	cmp	r3, #0
 80036e4:	d001      	beq.n	80036ea <MX_FDCAN1_Init+0xbe>
  {
    Error_Handler();
 80036e6:	f000 fb03 	bl	8003cf0 <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN1_Init 2 */

  /* USER CODE END FDCAN1_Init 2 */

}
 80036ea:	bf00      	nop
 80036ec:	bd80      	pop	{r7, pc}
 80036ee:	bf00      	nop
 80036f0:	24001514 	.word	0x24001514
 80036f4:	4000a000 	.word	0x4000a000

080036f8 <MX_FDCAN2_Init>:
  * @brief FDCAN2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_FDCAN2_Init(void)
{
 80036f8:	b580      	push	{r7, lr}
 80036fa:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN2_Init 0 */

  /* USER CODE BEGIN FDCAN2_Init 1 */

  /* USER CODE END FDCAN2_Init 1 */
  hfdcan2.Instance = FDCAN2;
 80036fc:	4b2e      	ldr	r3, [pc, #184]	; (80037b8 <MX_FDCAN2_Init+0xc0>)
 80036fe:	4a2f      	ldr	r2, [pc, #188]	; (80037bc <MX_FDCAN2_Init+0xc4>)
 8003700:	601a      	str	r2, [r3, #0]
  hfdcan2.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 8003702:	4b2d      	ldr	r3, [pc, #180]	; (80037b8 <MX_FDCAN2_Init+0xc0>)
 8003704:	2200      	movs	r2, #0
 8003706:	609a      	str	r2, [r3, #8]
  hfdcan2.Init.Mode = FDCAN_MODE_NORMAL;
 8003708:	4b2b      	ldr	r3, [pc, #172]	; (80037b8 <MX_FDCAN2_Init+0xc0>)
 800370a:	2200      	movs	r2, #0
 800370c:	60da      	str	r2, [r3, #12]
  hfdcan2.Init.AutoRetransmission = DISABLE;
 800370e:	4b2a      	ldr	r3, [pc, #168]	; (80037b8 <MX_FDCAN2_Init+0xc0>)
 8003710:	2200      	movs	r2, #0
 8003712:	741a      	strb	r2, [r3, #16]
  hfdcan2.Init.TransmitPause = DISABLE;
 8003714:	4b28      	ldr	r3, [pc, #160]	; (80037b8 <MX_FDCAN2_Init+0xc0>)
 8003716:	2200      	movs	r2, #0
 8003718:	745a      	strb	r2, [r3, #17]
  hfdcan2.Init.ProtocolException = DISABLE;
 800371a:	4b27      	ldr	r3, [pc, #156]	; (80037b8 <MX_FDCAN2_Init+0xc0>)
 800371c:	2200      	movs	r2, #0
 800371e:	749a      	strb	r2, [r3, #18]
  hfdcan2.Init.NominalPrescaler = 1;
 8003720:	4b25      	ldr	r3, [pc, #148]	; (80037b8 <MX_FDCAN2_Init+0xc0>)
 8003722:	2201      	movs	r2, #1
 8003724:	615a      	str	r2, [r3, #20]
  hfdcan2.Init.NominalSyncJumpWidth = 1;
 8003726:	4b24      	ldr	r3, [pc, #144]	; (80037b8 <MX_FDCAN2_Init+0xc0>)
 8003728:	2201      	movs	r2, #1
 800372a:	619a      	str	r2, [r3, #24]
  hfdcan2.Init.NominalTimeSeg1 = 2;
 800372c:	4b22      	ldr	r3, [pc, #136]	; (80037b8 <MX_FDCAN2_Init+0xc0>)
 800372e:	2202      	movs	r2, #2
 8003730:	61da      	str	r2, [r3, #28]
  hfdcan2.Init.NominalTimeSeg2 = 2;
 8003732:	4b21      	ldr	r3, [pc, #132]	; (80037b8 <MX_FDCAN2_Init+0xc0>)
 8003734:	2202      	movs	r2, #2
 8003736:	621a      	str	r2, [r3, #32]
  hfdcan2.Init.DataPrescaler = 1;
 8003738:	4b1f      	ldr	r3, [pc, #124]	; (80037b8 <MX_FDCAN2_Init+0xc0>)
 800373a:	2201      	movs	r2, #1
 800373c:	625a      	str	r2, [r3, #36]	; 0x24
  hfdcan2.Init.DataSyncJumpWidth = 1;
 800373e:	4b1e      	ldr	r3, [pc, #120]	; (80037b8 <MX_FDCAN2_Init+0xc0>)
 8003740:	2201      	movs	r2, #1
 8003742:	629a      	str	r2, [r3, #40]	; 0x28
  hfdcan2.Init.DataTimeSeg1 = 1;
 8003744:	4b1c      	ldr	r3, [pc, #112]	; (80037b8 <MX_FDCAN2_Init+0xc0>)
 8003746:	2201      	movs	r2, #1
 8003748:	62da      	str	r2, [r3, #44]	; 0x2c
  hfdcan2.Init.DataTimeSeg2 = 1;
 800374a:	4b1b      	ldr	r3, [pc, #108]	; (80037b8 <MX_FDCAN2_Init+0xc0>)
 800374c:	2201      	movs	r2, #1
 800374e:	631a      	str	r2, [r3, #48]	; 0x30
  hfdcan2.Init.MessageRAMOffset = 0;
 8003750:	4b19      	ldr	r3, [pc, #100]	; (80037b8 <MX_FDCAN2_Init+0xc0>)
 8003752:	2200      	movs	r2, #0
 8003754:	635a      	str	r2, [r3, #52]	; 0x34
  hfdcan2.Init.StdFiltersNbr = 0;
 8003756:	4b18      	ldr	r3, [pc, #96]	; (80037b8 <MX_FDCAN2_Init+0xc0>)
 8003758:	2200      	movs	r2, #0
 800375a:	639a      	str	r2, [r3, #56]	; 0x38
  hfdcan2.Init.ExtFiltersNbr = 0;
 800375c:	4b16      	ldr	r3, [pc, #88]	; (80037b8 <MX_FDCAN2_Init+0xc0>)
 800375e:	2200      	movs	r2, #0
 8003760:	63da      	str	r2, [r3, #60]	; 0x3c
  hfdcan2.Init.RxFifo0ElmtsNbr = 0;
 8003762:	4b15      	ldr	r3, [pc, #84]	; (80037b8 <MX_FDCAN2_Init+0xc0>)
 8003764:	2200      	movs	r2, #0
 8003766:	641a      	str	r2, [r3, #64]	; 0x40
  hfdcan2.Init.RxFifo0ElmtSize = FDCAN_DATA_BYTES_8;
 8003768:	4b13      	ldr	r3, [pc, #76]	; (80037b8 <MX_FDCAN2_Init+0xc0>)
 800376a:	2204      	movs	r2, #4
 800376c:	645a      	str	r2, [r3, #68]	; 0x44
  hfdcan2.Init.RxFifo1ElmtsNbr = 0;
 800376e:	4b12      	ldr	r3, [pc, #72]	; (80037b8 <MX_FDCAN2_Init+0xc0>)
 8003770:	2200      	movs	r2, #0
 8003772:	649a      	str	r2, [r3, #72]	; 0x48
  hfdcan2.Init.RxFifo1ElmtSize = FDCAN_DATA_BYTES_8;
 8003774:	4b10      	ldr	r3, [pc, #64]	; (80037b8 <MX_FDCAN2_Init+0xc0>)
 8003776:	2204      	movs	r2, #4
 8003778:	64da      	str	r2, [r3, #76]	; 0x4c
  hfdcan2.Init.RxBuffersNbr = 0;
 800377a:	4b0f      	ldr	r3, [pc, #60]	; (80037b8 <MX_FDCAN2_Init+0xc0>)
 800377c:	2200      	movs	r2, #0
 800377e:	651a      	str	r2, [r3, #80]	; 0x50
  hfdcan2.Init.RxBufferSize = FDCAN_DATA_BYTES_8;
 8003780:	4b0d      	ldr	r3, [pc, #52]	; (80037b8 <MX_FDCAN2_Init+0xc0>)
 8003782:	2204      	movs	r2, #4
 8003784:	655a      	str	r2, [r3, #84]	; 0x54
  hfdcan2.Init.TxEventsNbr = 0;
 8003786:	4b0c      	ldr	r3, [pc, #48]	; (80037b8 <MX_FDCAN2_Init+0xc0>)
 8003788:	2200      	movs	r2, #0
 800378a:	659a      	str	r2, [r3, #88]	; 0x58
  hfdcan2.Init.TxBuffersNbr = 0;
 800378c:	4b0a      	ldr	r3, [pc, #40]	; (80037b8 <MX_FDCAN2_Init+0xc0>)
 800378e:	2200      	movs	r2, #0
 8003790:	65da      	str	r2, [r3, #92]	; 0x5c
  hfdcan2.Init.TxFifoQueueElmtsNbr = 0;
 8003792:	4b09      	ldr	r3, [pc, #36]	; (80037b8 <MX_FDCAN2_Init+0xc0>)
 8003794:	2200      	movs	r2, #0
 8003796:	661a      	str	r2, [r3, #96]	; 0x60
  hfdcan2.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 8003798:	4b07      	ldr	r3, [pc, #28]	; (80037b8 <MX_FDCAN2_Init+0xc0>)
 800379a:	2200      	movs	r2, #0
 800379c:	665a      	str	r2, [r3, #100]	; 0x64
  hfdcan2.Init.TxElmtSize = FDCAN_DATA_BYTES_8;
 800379e:	4b06      	ldr	r3, [pc, #24]	; (80037b8 <MX_FDCAN2_Init+0xc0>)
 80037a0:	2204      	movs	r2, #4
 80037a2:	669a      	str	r2, [r3, #104]	; 0x68
  if (HAL_FDCAN_Init(&hfdcan2) != HAL_OK)
 80037a4:	4804      	ldr	r0, [pc, #16]	; (80037b8 <MX_FDCAN2_Init+0xc0>)
 80037a6:	f003 f9ad 	bl	8006b04 <HAL_FDCAN_Init>
 80037aa:	4603      	mov	r3, r0
 80037ac:	2b00      	cmp	r3, #0
 80037ae:	d001      	beq.n	80037b4 <MX_FDCAN2_Init+0xbc>
  {
    Error_Handler();
 80037b0:	f000 fa9e 	bl	8003cf0 <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN2_Init 2 */

  /* USER CODE END FDCAN2_Init 2 */

}
 80037b4:	bf00      	nop
 80037b6:	bd80      	pop	{r7, pc}
 80037b8:	240016c8 	.word	0x240016c8
 80037bc:	4000a400 	.word	0x4000a400

080037c0 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 80037c0:	b580      	push	{r7, lr}
 80037c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 80037c4:	4b11      	ldr	r3, [pc, #68]	; (800380c <MX_RTC_Init+0x4c>)
 80037c6:	4a12      	ldr	r2, [pc, #72]	; (8003810 <MX_RTC_Init+0x50>)
 80037c8:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 80037ca:	4b10      	ldr	r3, [pc, #64]	; (800380c <MX_RTC_Init+0x4c>)
 80037cc:	2200      	movs	r2, #0
 80037ce:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 1;
 80037d0:	4b0e      	ldr	r3, [pc, #56]	; (800380c <MX_RTC_Init+0x4c>)
 80037d2:	2201      	movs	r2, #1
 80037d4:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 16388;
 80037d6:	4b0d      	ldr	r3, [pc, #52]	; (800380c <MX_RTC_Init+0x4c>)
 80037d8:	f244 0204 	movw	r2, #16388	; 0x4004
 80037dc:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 80037de:	4b0b      	ldr	r3, [pc, #44]	; (800380c <MX_RTC_Init+0x4c>)
 80037e0:	2200      	movs	r2, #0
 80037e2:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 80037e4:	4b09      	ldr	r3, [pc, #36]	; (800380c <MX_RTC_Init+0x4c>)
 80037e6:	2200      	movs	r2, #0
 80037e8:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 80037ea:	4b08      	ldr	r3, [pc, #32]	; (800380c <MX_RTC_Init+0x4c>)
 80037ec:	2200      	movs	r2, #0
 80037ee:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 80037f0:	4b06      	ldr	r3, [pc, #24]	; (800380c <MX_RTC_Init+0x4c>)
 80037f2:	2200      	movs	r2, #0
 80037f4:	615a      	str	r2, [r3, #20]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 80037f6:	4805      	ldr	r0, [pc, #20]	; (800380c <MX_RTC_Init+0x4c>)
 80037f8:	f008 feae 	bl	800c558 <HAL_RTC_Init>
 80037fc:	4603      	mov	r3, r0
 80037fe:	2b00      	cmp	r3, #0
 8003800:	d001      	beq.n	8003806 <MX_RTC_Init+0x46>
  {
    Error_Handler();
 8003802:	f000 fa75 	bl	8003cf0 <Error_Handler>

  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8003806:	bf00      	nop
 8003808:	bd80      	pop	{r7, pc}
 800380a:	bf00      	nop
 800380c:	240014f0 	.word	0x240014f0
 8003810:	58004000 	.word	0x58004000

08003814 <MX_SDMMC1_SD_Init>:
  * @brief SDMMC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDMMC1_SD_Init(void)
{
 8003814:	b480      	push	{r7}
 8003816:	af00      	add	r7, sp, #0
  /* USER CODE END SDMMC1_Init 0 */

  /* USER CODE BEGIN SDMMC1_Init 1 */

  /* USER CODE END SDMMC1_Init 1 */
  hsd1.Instance = SDMMC1;
 8003818:	4b0d      	ldr	r3, [pc, #52]	; (8003850 <MX_SDMMC1_SD_Init+0x3c>)
 800381a:	4a0e      	ldr	r2, [pc, #56]	; (8003854 <MX_SDMMC1_SD_Init+0x40>)
 800381c:	601a      	str	r2, [r3, #0]
  hsd1.Init.ClockEdge = SDMMC_CLOCK_EDGE_RISING;
 800381e:	4b0c      	ldr	r3, [pc, #48]	; (8003850 <MX_SDMMC1_SD_Init+0x3c>)
 8003820:	2200      	movs	r2, #0
 8003822:	605a      	str	r2, [r3, #4]
  hsd1.Init.ClockPowerSave = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 8003824:	4b0a      	ldr	r3, [pc, #40]	; (8003850 <MX_SDMMC1_SD_Init+0x3c>)
 8003826:	2200      	movs	r2, #0
 8003828:	609a      	str	r2, [r3, #8]
  hsd1.Init.BusWide = SDMMC_BUS_WIDE_4B;
 800382a:	4b09      	ldr	r3, [pc, #36]	; (8003850 <MX_SDMMC1_SD_Init+0x3c>)
 800382c:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8003830:	60da      	str	r2, [r3, #12]
  hsd1.Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_ENABLE;
 8003832:	4b07      	ldr	r3, [pc, #28]	; (8003850 <MX_SDMMC1_SD_Init+0x3c>)
 8003834:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8003838:	611a      	str	r2, [r3, #16]
  hsd1.Init.ClockDiv = 0;
 800383a:	4b05      	ldr	r3, [pc, #20]	; (8003850 <MX_SDMMC1_SD_Init+0x3c>)
 800383c:	2200      	movs	r2, #0
 800383e:	615a      	str	r2, [r3, #20]
  hsd1.Init.TranceiverPresent = SDMMC_TRANSCEIVER_NOT_PRESENT;
 8003840:	4b03      	ldr	r3, [pc, #12]	; (8003850 <MX_SDMMC1_SD_Init+0x3c>)
 8003842:	2201      	movs	r2, #1
 8003844:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN SDMMC1_Init 2 */

  /* USER CODE END SDMMC1_Init 2 */

}
 8003846:	bf00      	nop
 8003848:	46bd      	mov	sp, r7
 800384a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800384e:	4770      	bx	lr
 8003850:	24001470 	.word	0x24001470
 8003854:	52007000 	.word	0x52007000

08003858 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8003858:	b580      	push	{r7, lr}
 800385a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 800385c:	4b27      	ldr	r3, [pc, #156]	; (80038fc <MX_SPI1_Init+0xa4>)
 800385e:	4a28      	ldr	r2, [pc, #160]	; (8003900 <MX_SPI1_Init+0xa8>)
 8003860:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8003862:	4b26      	ldr	r3, [pc, #152]	; (80038fc <MX_SPI1_Init+0xa4>)
 8003864:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8003868:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800386a:	4b24      	ldr	r3, [pc, #144]	; (80038fc <MX_SPI1_Init+0xa4>)
 800386c:	2200      	movs	r2, #0
 800386e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8003870:	4b22      	ldr	r3, [pc, #136]	; (80038fc <MX_SPI1_Init+0xa4>)
 8003872:	2207      	movs	r2, #7
 8003874:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8003876:	4b21      	ldr	r3, [pc, #132]	; (80038fc <MX_SPI1_Init+0xa4>)
 8003878:	2200      	movs	r2, #0
 800387a:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800387c:	4b1f      	ldr	r3, [pc, #124]	; (80038fc <MX_SPI1_Init+0xa4>)
 800387e:	2200      	movs	r2, #0
 8003880:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8003882:	4b1e      	ldr	r3, [pc, #120]	; (80038fc <MX_SPI1_Init+0xa4>)
 8003884:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8003888:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 800388a:	4b1c      	ldr	r3, [pc, #112]	; (80038fc <MX_SPI1_Init+0xa4>)
 800388c:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8003890:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8003892:	4b1a      	ldr	r3, [pc, #104]	; (80038fc <MX_SPI1_Init+0xa4>)
 8003894:	2200      	movs	r2, #0
 8003896:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8003898:	4b18      	ldr	r3, [pc, #96]	; (80038fc <MX_SPI1_Init+0xa4>)
 800389a:	2200      	movs	r2, #0
 800389c:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800389e:	4b17      	ldr	r3, [pc, #92]	; (80038fc <MX_SPI1_Init+0xa4>)
 80038a0:	2200      	movs	r2, #0
 80038a2:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 0x0;
 80038a4:	4b15      	ldr	r3, [pc, #84]	; (80038fc <MX_SPI1_Init+0xa4>)
 80038a6:	2200      	movs	r2, #0
 80038a8:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80038aa:	4b14      	ldr	r3, [pc, #80]	; (80038fc <MX_SPI1_Init+0xa4>)
 80038ac:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80038b0:	635a      	str	r2, [r3, #52]	; 0x34
  hspi1.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 80038b2:	4b12      	ldr	r3, [pc, #72]	; (80038fc <MX_SPI1_Init+0xa4>)
 80038b4:	2200      	movs	r2, #0
 80038b6:	639a      	str	r2, [r3, #56]	; 0x38
  hspi1.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 80038b8:	4b10      	ldr	r3, [pc, #64]	; (80038fc <MX_SPI1_Init+0xa4>)
 80038ba:	2200      	movs	r2, #0
 80038bc:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi1.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 80038be:	4b0f      	ldr	r3, [pc, #60]	; (80038fc <MX_SPI1_Init+0xa4>)
 80038c0:	2200      	movs	r2, #0
 80038c2:	641a      	str	r2, [r3, #64]	; 0x40
  hspi1.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 80038c4:	4b0d      	ldr	r3, [pc, #52]	; (80038fc <MX_SPI1_Init+0xa4>)
 80038c6:	2200      	movs	r2, #0
 80038c8:	645a      	str	r2, [r3, #68]	; 0x44
  hspi1.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 80038ca:	4b0c      	ldr	r3, [pc, #48]	; (80038fc <MX_SPI1_Init+0xa4>)
 80038cc:	2200      	movs	r2, #0
 80038ce:	649a      	str	r2, [r3, #72]	; 0x48
  hspi1.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 80038d0:	4b0a      	ldr	r3, [pc, #40]	; (80038fc <MX_SPI1_Init+0xa4>)
 80038d2:	2200      	movs	r2, #0
 80038d4:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi1.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 80038d6:	4b09      	ldr	r3, [pc, #36]	; (80038fc <MX_SPI1_Init+0xa4>)
 80038d8:	2200      	movs	r2, #0
 80038da:	651a      	str	r2, [r3, #80]	; 0x50
  hspi1.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 80038dc:	4b07      	ldr	r3, [pc, #28]	; (80038fc <MX_SPI1_Init+0xa4>)
 80038de:	2200      	movs	r2, #0
 80038e0:	655a      	str	r2, [r3, #84]	; 0x54
  hspi1.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 80038e2:	4b06      	ldr	r3, [pc, #24]	; (80038fc <MX_SPI1_Init+0xa4>)
 80038e4:	2200      	movs	r2, #0
 80038e6:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80038e8:	4804      	ldr	r0, [pc, #16]	; (80038fc <MX_SPI1_Init+0xa4>)
 80038ea:	f00b f8cf 	bl	800ea8c <HAL_SPI_Init>
 80038ee:	4603      	mov	r3, r0
 80038f0:	2b00      	cmp	r3, #0
 80038f2:	d001      	beq.n	80038f8 <MX_SPI1_Init+0xa0>
  {
    Error_Handler();
 80038f4:	f000 f9fc 	bl	8003cf0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80038f8:	bf00      	nop
 80038fa:	bd80      	pop	{r7, pc}
 80038fc:	24001640 	.word	0x24001640
 8003900:	40013000 	.word	0x40013000

08003904 <MX_UART8_Init>:
  * @brief UART8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART8_Init(void)
{
 8003904:	b580      	push	{r7, lr}
 8003906:	af00      	add	r7, sp, #0
  /* USER CODE END UART8_Init 0 */

  /* USER CODE BEGIN UART8_Init 1 */

  /* USER CODE END UART8_Init 1 */
  huart8.Instance = UART8;
 8003908:	4b22      	ldr	r3, [pc, #136]	; (8003994 <MX_UART8_Init+0x90>)
 800390a:	4a23      	ldr	r2, [pc, #140]	; (8003998 <MX_UART8_Init+0x94>)
 800390c:	601a      	str	r2, [r3, #0]
  huart8.Init.BaudRate = 115200;
 800390e:	4b21      	ldr	r3, [pc, #132]	; (8003994 <MX_UART8_Init+0x90>)
 8003910:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8003914:	605a      	str	r2, [r3, #4]
  huart8.Init.WordLength = UART_WORDLENGTH_8B;
 8003916:	4b1f      	ldr	r3, [pc, #124]	; (8003994 <MX_UART8_Init+0x90>)
 8003918:	2200      	movs	r2, #0
 800391a:	609a      	str	r2, [r3, #8]
  huart8.Init.StopBits = UART_STOPBITS_1;
 800391c:	4b1d      	ldr	r3, [pc, #116]	; (8003994 <MX_UART8_Init+0x90>)
 800391e:	2200      	movs	r2, #0
 8003920:	60da      	str	r2, [r3, #12]
  huart8.Init.Parity = UART_PARITY_NONE;
 8003922:	4b1c      	ldr	r3, [pc, #112]	; (8003994 <MX_UART8_Init+0x90>)
 8003924:	2200      	movs	r2, #0
 8003926:	611a      	str	r2, [r3, #16]
  huart8.Init.Mode = UART_MODE_TX_RX;
 8003928:	4b1a      	ldr	r3, [pc, #104]	; (8003994 <MX_UART8_Init+0x90>)
 800392a:	220c      	movs	r2, #12
 800392c:	615a      	str	r2, [r3, #20]
  huart8.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800392e:	4b19      	ldr	r3, [pc, #100]	; (8003994 <MX_UART8_Init+0x90>)
 8003930:	2200      	movs	r2, #0
 8003932:	619a      	str	r2, [r3, #24]
  huart8.Init.OverSampling = UART_OVERSAMPLING_16;
 8003934:	4b17      	ldr	r3, [pc, #92]	; (8003994 <MX_UART8_Init+0x90>)
 8003936:	2200      	movs	r2, #0
 8003938:	61da      	str	r2, [r3, #28]
  huart8.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800393a:	4b16      	ldr	r3, [pc, #88]	; (8003994 <MX_UART8_Init+0x90>)
 800393c:	2200      	movs	r2, #0
 800393e:	621a      	str	r2, [r3, #32]
  huart8.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8003940:	4b14      	ldr	r3, [pc, #80]	; (8003994 <MX_UART8_Init+0x90>)
 8003942:	2200      	movs	r2, #0
 8003944:	625a      	str	r2, [r3, #36]	; 0x24
  huart8.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8003946:	4b13      	ldr	r3, [pc, #76]	; (8003994 <MX_UART8_Init+0x90>)
 8003948:	2200      	movs	r2, #0
 800394a:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart8) != HAL_OK)
 800394c:	4811      	ldr	r0, [pc, #68]	; (8003994 <MX_UART8_Init+0x90>)
 800394e:	f00c f94e 	bl	800fbee <HAL_UART_Init>
 8003952:	4603      	mov	r3, r0
 8003954:	2b00      	cmp	r3, #0
 8003956:	d001      	beq.n	800395c <MX_UART8_Init+0x58>
  {
    Error_Handler();
 8003958:	f000 f9ca 	bl	8003cf0 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart8, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800395c:	2100      	movs	r1, #0
 800395e:	480d      	ldr	r0, [pc, #52]	; (8003994 <MX_UART8_Init+0x90>)
 8003960:	f00d fad4 	bl	8010f0c <HAL_UARTEx_SetTxFifoThreshold>
 8003964:	4603      	mov	r3, r0
 8003966:	2b00      	cmp	r3, #0
 8003968:	d001      	beq.n	800396e <MX_UART8_Init+0x6a>
  {
    Error_Handler();
 800396a:	f000 f9c1 	bl	8003cf0 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart8, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800396e:	2100      	movs	r1, #0
 8003970:	4808      	ldr	r0, [pc, #32]	; (8003994 <MX_UART8_Init+0x90>)
 8003972:	f00d fb09 	bl	8010f88 <HAL_UARTEx_SetRxFifoThreshold>
 8003976:	4603      	mov	r3, r0
 8003978:	2b00      	cmp	r3, #0
 800397a:	d001      	beq.n	8003980 <MX_UART8_Init+0x7c>
  {
    Error_Handler();
 800397c:	f000 f9b8 	bl	8003cf0 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart8) != HAL_OK)
 8003980:	4804      	ldr	r0, [pc, #16]	; (8003994 <MX_UART8_Init+0x90>)
 8003982:	f00d fa8a 	bl	8010e9a <HAL_UARTEx_DisableFifoMode>
 8003986:	4603      	mov	r3, r0
 8003988:	2b00      	cmp	r3, #0
 800398a:	d001      	beq.n	8003990 <MX_UART8_Init+0x8c>
  {
    Error_Handler();
 800398c:	f000 f9b0 	bl	8003cf0 <Error_Handler>
  }
  /* USER CODE BEGIN UART8_Init 2 */

  /* USER CODE END UART8_Init 2 */

}
 8003990:	bf00      	nop
 8003992:	bd80      	pop	{r7, pc}
 8003994:	240015b4 	.word	0x240015b4
 8003998:	40007c00 	.word	0x40007c00

0800399c <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 800399c:	b580      	push	{r7, lr}
 800399e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80039a0:	4b22      	ldr	r3, [pc, #136]	; (8003a2c <MX_USART3_UART_Init+0x90>)
 80039a2:	4a23      	ldr	r2, [pc, #140]	; (8003a30 <MX_USART3_UART_Init+0x94>)
 80039a4:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 38400;
 80039a6:	4b21      	ldr	r3, [pc, #132]	; (8003a2c <MX_USART3_UART_Init+0x90>)
 80039a8:	f44f 4216 	mov.w	r2, #38400	; 0x9600
 80039ac:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80039ae:	4b1f      	ldr	r3, [pc, #124]	; (8003a2c <MX_USART3_UART_Init+0x90>)
 80039b0:	2200      	movs	r2, #0
 80039b2:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80039b4:	4b1d      	ldr	r3, [pc, #116]	; (8003a2c <MX_USART3_UART_Init+0x90>)
 80039b6:	2200      	movs	r2, #0
 80039b8:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80039ba:	4b1c      	ldr	r3, [pc, #112]	; (8003a2c <MX_USART3_UART_Init+0x90>)
 80039bc:	2200      	movs	r2, #0
 80039be:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80039c0:	4b1a      	ldr	r3, [pc, #104]	; (8003a2c <MX_USART3_UART_Init+0x90>)
 80039c2:	220c      	movs	r2, #12
 80039c4:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80039c6:	4b19      	ldr	r3, [pc, #100]	; (8003a2c <MX_USART3_UART_Init+0x90>)
 80039c8:	2200      	movs	r2, #0
 80039ca:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80039cc:	4b17      	ldr	r3, [pc, #92]	; (8003a2c <MX_USART3_UART_Init+0x90>)
 80039ce:	2200      	movs	r2, #0
 80039d0:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80039d2:	4b16      	ldr	r3, [pc, #88]	; (8003a2c <MX_USART3_UART_Init+0x90>)
 80039d4:	2200      	movs	r2, #0
 80039d6:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80039d8:	4b14      	ldr	r3, [pc, #80]	; (8003a2c <MX_USART3_UART_Init+0x90>)
 80039da:	2200      	movs	r2, #0
 80039dc:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80039de:	4b13      	ldr	r3, [pc, #76]	; (8003a2c <MX_USART3_UART_Init+0x90>)
 80039e0:	2200      	movs	r2, #0
 80039e2:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80039e4:	4811      	ldr	r0, [pc, #68]	; (8003a2c <MX_USART3_UART_Init+0x90>)
 80039e6:	f00c f902 	bl	800fbee <HAL_UART_Init>
 80039ea:	4603      	mov	r3, r0
 80039ec:	2b00      	cmp	r3, #0
 80039ee:	d001      	beq.n	80039f4 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 80039f0:	f000 f97e 	bl	8003cf0 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80039f4:	2100      	movs	r1, #0
 80039f6:	480d      	ldr	r0, [pc, #52]	; (8003a2c <MX_USART3_UART_Init+0x90>)
 80039f8:	f00d fa88 	bl	8010f0c <HAL_UARTEx_SetTxFifoThreshold>
 80039fc:	4603      	mov	r3, r0
 80039fe:	2b00      	cmp	r3, #0
 8003a00:	d001      	beq.n	8003a06 <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8003a02:	f000 f975 	bl	8003cf0 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8003a06:	2100      	movs	r1, #0
 8003a08:	4808      	ldr	r0, [pc, #32]	; (8003a2c <MX_USART3_UART_Init+0x90>)
 8003a0a:	f00d fabd 	bl	8010f88 <HAL_UARTEx_SetRxFifoThreshold>
 8003a0e:	4603      	mov	r3, r0
 8003a10:	2b00      	cmp	r3, #0
 8003a12:	d001      	beq.n	8003a18 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8003a14:	f000 f96c 	bl	8003cf0 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8003a18:	4804      	ldr	r0, [pc, #16]	; (8003a2c <MX_USART3_UART_Init+0x90>)
 8003a1a:	f00d fa3e 	bl	8010e9a <HAL_UARTEx_DisableFifoMode>
 8003a1e:	4603      	mov	r3, r0
 8003a20:	2b00      	cmp	r3, #0
 8003a22:	d001      	beq.n	8003a28 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8003a24:	f000 f964 	bl	8003cf0 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8003a28:	bf00      	nop
 8003a2a:	bd80      	pop	{r7, pc}
 8003a2c:	240013c4 	.word	0x240013c4
 8003a30:	40004800 	.word	0x40004800

08003a34 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8003a34:	b580      	push	{r7, lr}
 8003a36:	b082      	sub	sp, #8
 8003a38:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8003a3a:	4b0d      	ldr	r3, [pc, #52]	; (8003a70 <MX_DMA_Init+0x3c>)
 8003a3c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8003a40:	4a0b      	ldr	r2, [pc, #44]	; (8003a70 <MX_DMA_Init+0x3c>)
 8003a42:	f043 0301 	orr.w	r3, r3, #1
 8003a46:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8003a4a:	4b09      	ldr	r3, [pc, #36]	; (8003a70 <MX_DMA_Init+0x3c>)
 8003a4c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8003a50:	f003 0301 	and.w	r3, r3, #1
 8003a54:	607b      	str	r3, [r7, #4]
 8003a56:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 8003a58:	2200      	movs	r2, #0
 8003a5a:	2100      	movs	r1, #0
 8003a5c:	200c      	movs	r0, #12
 8003a5e:	f000 ff44 	bl	80048ea <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8003a62:	200c      	movs	r0, #12
 8003a64:	f000 ff5b 	bl	800491e <HAL_NVIC_EnableIRQ>

}
 8003a68:	bf00      	nop
 8003a6a:	3708      	adds	r7, #8
 8003a6c:	46bd      	mov	sp, r7
 8003a6e:	bd80      	pop	{r7, pc}
 8003a70:	58024400 	.word	0x58024400

08003a74 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8003a74:	b580      	push	{r7, lr}
 8003a76:	b08c      	sub	sp, #48	; 0x30
 8003a78:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003a7a:	f107 031c 	add.w	r3, r7, #28
 8003a7e:	2200      	movs	r2, #0
 8003a80:	601a      	str	r2, [r3, #0]
 8003a82:	605a      	str	r2, [r3, #4]
 8003a84:	609a      	str	r2, [r3, #8]
 8003a86:	60da      	str	r2, [r3, #12]
 8003a88:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8003a8a:	4b6d      	ldr	r3, [pc, #436]	; (8003c40 <MX_GPIO_Init+0x1cc>)
 8003a8c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003a90:	4a6b      	ldr	r2, [pc, #428]	; (8003c40 <MX_GPIO_Init+0x1cc>)
 8003a92:	f043 0310 	orr.w	r3, r3, #16
 8003a96:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8003a9a:	4b69      	ldr	r3, [pc, #420]	; (8003c40 <MX_GPIO_Init+0x1cc>)
 8003a9c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003aa0:	f003 0310 	and.w	r3, r3, #16
 8003aa4:	61bb      	str	r3, [r7, #24]
 8003aa6:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003aa8:	4b65      	ldr	r3, [pc, #404]	; (8003c40 <MX_GPIO_Init+0x1cc>)
 8003aaa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003aae:	4a64      	ldr	r2, [pc, #400]	; (8003c40 <MX_GPIO_Init+0x1cc>)
 8003ab0:	f043 0304 	orr.w	r3, r3, #4
 8003ab4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8003ab8:	4b61      	ldr	r3, [pc, #388]	; (8003c40 <MX_GPIO_Init+0x1cc>)
 8003aba:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003abe:	f003 0304 	and.w	r3, r3, #4
 8003ac2:	617b      	str	r3, [r7, #20]
 8003ac4:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8003ac6:	4b5e      	ldr	r3, [pc, #376]	; (8003c40 <MX_GPIO_Init+0x1cc>)
 8003ac8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003acc:	4a5c      	ldr	r2, [pc, #368]	; (8003c40 <MX_GPIO_Init+0x1cc>)
 8003ace:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003ad2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8003ad6:	4b5a      	ldr	r3, [pc, #360]	; (8003c40 <MX_GPIO_Init+0x1cc>)
 8003ad8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003adc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003ae0:	613b      	str	r3, [r7, #16]
 8003ae2:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003ae4:	4b56      	ldr	r3, [pc, #344]	; (8003c40 <MX_GPIO_Init+0x1cc>)
 8003ae6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003aea:	4a55      	ldr	r2, [pc, #340]	; (8003c40 <MX_GPIO_Init+0x1cc>)
 8003aec:	f043 0301 	orr.w	r3, r3, #1
 8003af0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8003af4:	4b52      	ldr	r3, [pc, #328]	; (8003c40 <MX_GPIO_Init+0x1cc>)
 8003af6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003afa:	f003 0301 	and.w	r3, r3, #1
 8003afe:	60fb      	str	r3, [r7, #12]
 8003b00:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003b02:	4b4f      	ldr	r3, [pc, #316]	; (8003c40 <MX_GPIO_Init+0x1cc>)
 8003b04:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003b08:	4a4d      	ldr	r2, [pc, #308]	; (8003c40 <MX_GPIO_Init+0x1cc>)
 8003b0a:	f043 0302 	orr.w	r3, r3, #2
 8003b0e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8003b12:	4b4b      	ldr	r3, [pc, #300]	; (8003c40 <MX_GPIO_Init+0x1cc>)
 8003b14:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003b18:	f003 0302 	and.w	r3, r3, #2
 8003b1c:	60bb      	str	r3, [r7, #8]
 8003b1e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8003b20:	4b47      	ldr	r3, [pc, #284]	; (8003c40 <MX_GPIO_Init+0x1cc>)
 8003b22:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003b26:	4a46      	ldr	r2, [pc, #280]	; (8003c40 <MX_GPIO_Init+0x1cc>)
 8003b28:	f043 0308 	orr.w	r3, r3, #8
 8003b2c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8003b30:	4b43      	ldr	r3, [pc, #268]	; (8003c40 <MX_GPIO_Init+0x1cc>)
 8003b32:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003b36:	f003 0308 	and.w	r3, r3, #8
 8003b3a:	607b      	str	r3, [r7, #4]
 8003b3c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, RS_485_TX_EN_Pin|RS_485_RX_EN_Pin, GPIO_PIN_RESET);
 8003b3e:	2200      	movs	r2, #0
 8003b40:	210c      	movs	r1, #12
 8003b42:	4840      	ldr	r0, [pc, #256]	; (8003c44 <MX_GPIO_Init+0x1d0>)
 8003b44:	f004 fae2 	bl	800810c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, TELE_CE_Pin|TELE_CS_Pin, GPIO_PIN_RESET);
 8003b48:	2200      	movs	r2, #0
 8003b4a:	2103      	movs	r1, #3
 8003b4c:	483e      	ldr	r0, [pc, #248]	; (8003c48 <MX_GPIO_Init+0x1d4>)
 8003b4e:	f004 fadd 	bl	800810c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8003b52:	2200      	movs	r2, #0
 8003b54:	2101      	movs	r1, #1
 8003b56:	483d      	ldr	r0, [pc, #244]	; (8003c4c <MX_GPIO_Init+0x1d8>)
 8003b58:	f004 fad8 	bl	800810c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPS_RST_GPIO_Port, GPS_RST_Pin, GPIO_PIN_SET);
 8003b5c:	2201      	movs	r2, #1
 8003b5e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8003b62:	483b      	ldr	r0, [pc, #236]	; (8003c50 <MX_GPIO_Init+0x1dc>)
 8003b64:	f004 fad2 	bl	800810c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : RS_485_TX_EN_Pin RS_485_RX_EN_Pin */
  GPIO_InitStruct.Pin = RS_485_TX_EN_Pin|RS_485_RX_EN_Pin;
 8003b68:	230c      	movs	r3, #12
 8003b6a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003b6c:	2301      	movs	r3, #1
 8003b6e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003b70:	2300      	movs	r3, #0
 8003b72:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003b74:	2300      	movs	r3, #0
 8003b76:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8003b78:	f107 031c 	add.w	r3, r7, #28
 8003b7c:	4619      	mov	r1, r3
 8003b7e:	4831      	ldr	r0, [pc, #196]	; (8003c44 <MX_GPIO_Init+0x1d0>)
 8003b80:	f004 f8fc 	bl	8007d7c <HAL_GPIO_Init>

  /*Configure GPIO pins : TELE_CE_Pin TELE_CS_Pin */
  GPIO_InitStruct.Pin = TELE_CE_Pin|TELE_CS_Pin;
 8003b84:	2303      	movs	r3, #3
 8003b86:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003b88:	2301      	movs	r3, #1
 8003b8a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003b8c:	2300      	movs	r3, #0
 8003b8e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003b90:	2300      	movs	r3, #0
 8003b92:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003b94:	f107 031c 	add.w	r3, r7, #28
 8003b98:	4619      	mov	r1, r3
 8003b9a:	482b      	ldr	r0, [pc, #172]	; (8003c48 <MX_GPIO_Init+0x1d4>)
 8003b9c:	f004 f8ee 	bl	8007d7c <HAL_GPIO_Init>

  /*Configure GPIO pin : TELE_IRQ_Pin */
  GPIO_InitStruct.Pin = TELE_IRQ_Pin;
 8003ba0:	2304      	movs	r3, #4
 8003ba2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8003ba4:	4b2b      	ldr	r3, [pc, #172]	; (8003c54 <MX_GPIO_Init+0x1e0>)
 8003ba6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003ba8:	2300      	movs	r3, #0
 8003baa:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(TELE_IRQ_GPIO_Port, &GPIO_InitStruct);
 8003bac:	f107 031c 	add.w	r3, r7, #28
 8003bb0:	4619      	mov	r1, r3
 8003bb2:	4825      	ldr	r0, [pc, #148]	; (8003c48 <MX_GPIO_Init+0x1d4>)
 8003bb4:	f004 f8e2 	bl	8007d7c <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 8003bb8:	2301      	movs	r3, #1
 8003bba:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003bbc:	2301      	movs	r3, #1
 8003bbe:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003bc0:	2300      	movs	r3, #0
 8003bc2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003bc4:	2300      	movs	r3, #0
 8003bc6:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8003bc8:	f107 031c 	add.w	r3, r7, #28
 8003bcc:	4619      	mov	r1, r3
 8003bce:	481f      	ldr	r0, [pc, #124]	; (8003c4c <MX_GPIO_Init+0x1d8>)
 8003bd0:	f004 f8d4 	bl	8007d7c <HAL_GPIO_Init>

  /*Configure GPIO pin : BTN_INT_Pin */
  GPIO_InitStruct.Pin = BTN_INT_Pin;
 8003bd4:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003bd8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8003bda:	4b1e      	ldr	r3, [pc, #120]	; (8003c54 <MX_GPIO_Init+0x1e0>)
 8003bdc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003bde:	2300      	movs	r3, #0
 8003be0:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BTN_INT_GPIO_Port, &GPIO_InitStruct);
 8003be2:	f107 031c 	add.w	r3, r7, #28
 8003be6:	4619      	mov	r1, r3
 8003be8:	4816      	ldr	r0, [pc, #88]	; (8003c44 <MX_GPIO_Init+0x1d0>)
 8003bea:	f004 f8c7 	bl	8007d7c <HAL_GPIO_Init>

  /*Configure GPIO pin : GPS_RST_Pin */
  GPIO_InitStruct.Pin = GPS_RST_Pin;
 8003bee:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003bf2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003bf4:	2301      	movs	r3, #1
 8003bf6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003bf8:	2300      	movs	r3, #0
 8003bfa:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003bfc:	2300      	movs	r3, #0
 8003bfe:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPS_RST_GPIO_Port, &GPIO_InitStruct);
 8003c00:	f107 031c 	add.w	r3, r7, #28
 8003c04:	4619      	mov	r1, r3
 8003c06:	4812      	ldr	r0, [pc, #72]	; (8003c50 <MX_GPIO_Init+0x1dc>)
 8003c08:	f004 f8b8 	bl	8007d7c <HAL_GPIO_Init>

  /*Configure GPIO pin : CARD_DET_Pin */
  GPIO_InitStruct.Pin = CARD_DET_Pin;
 8003c0c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003c10:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003c12:	2300      	movs	r3, #0
 8003c14:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003c16:	2300      	movs	r3, #0
 8003c18:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(CARD_DET_GPIO_Port, &GPIO_InitStruct);
 8003c1a:	f107 031c 	add.w	r3, r7, #28
 8003c1e:	4619      	mov	r1, r3
 8003c20:	4809      	ldr	r0, [pc, #36]	; (8003c48 <MX_GPIO_Init+0x1d4>)
 8003c22:	f004 f8ab 	bl	8007d7c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8003c26:	2200      	movs	r2, #0
 8003c28:	2100      	movs	r1, #0
 8003c2a:	2017      	movs	r0, #23
 8003c2c:	f000 fe5d 	bl	80048ea <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8003c30:	2017      	movs	r0, #23
 8003c32:	f000 fe74 	bl	800491e <HAL_NVIC_EnableIRQ>

}
 8003c36:	bf00      	nop
 8003c38:	3730      	adds	r7, #48	; 0x30
 8003c3a:	46bd      	mov	sp, r7
 8003c3c:	bd80      	pop	{r7, pc}
 8003c3e:	bf00      	nop
 8003c40:	58024400 	.word	0x58024400
 8003c44:	58021000 	.word	0x58021000
 8003c48:	58020000 	.word	0x58020000
 8003c4c:	58020400 	.word	0x58020400
 8003c50:	58020c00 	.word	0x58020c00
 8003c54:	11110000 	.word	0x11110000

08003c58 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8003c58:	b580      	push	{r7, lr}
 8003c5a:	b088      	sub	sp, #32
 8003c5c:	af00      	add	r7, sp, #0
 8003c5e:	4603      	mov	r3, r0
 8003c60:	80fb      	strh	r3, [r7, #6]

  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */

  RTC_TimeTypeDef sTime = {0};
 8003c62:	f107 030c 	add.w	r3, r7, #12
 8003c66:	2200      	movs	r2, #0
 8003c68:	601a      	str	r2, [r3, #0]
 8003c6a:	605a      	str	r2, [r3, #4]
 8003c6c:	609a      	str	r2, [r3, #8]
 8003c6e:	60da      	str	r2, [r3, #12]
 8003c70:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 8003c72:	2300      	movs	r3, #0
 8003c74:	60bb      	str	r3, [r7, #8]
  sTime.Hours = 16;
 8003c76:	2310      	movs	r3, #16
 8003c78:	733b      	strb	r3, [r7, #12]
    sTime.Minutes = 8;
 8003c7a:	2308      	movs	r3, #8
 8003c7c:	737b      	strb	r3, [r7, #13]
    sTime.Seconds = 0;
 8003c7e:	2300      	movs	r3, #0
 8003c80:	73bb      	strb	r3, [r7, #14]
    sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8003c82:	2300      	movs	r3, #0
 8003c84:	61bb      	str	r3, [r7, #24]
    sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8003c86:	2300      	movs	r3, #0
 8003c88:	61fb      	str	r3, [r7, #28]
    if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN) != HAL_OK)
 8003c8a:	f107 030c 	add.w	r3, r7, #12
 8003c8e:	2200      	movs	r2, #0
 8003c90:	4619      	mov	r1, r3
 8003c92:	4810      	ldr	r0, [pc, #64]	; (8003cd4 <HAL_GPIO_EXTI_Callback+0x7c>)
 8003c94:	f008 fcd8 	bl	800c648 <HAL_RTC_SetTime>
 8003c98:	4603      	mov	r3, r0
 8003c9a:	2b00      	cmp	r3, #0
 8003c9c:	d001      	beq.n	8003ca2 <HAL_GPIO_EXTI_Callback+0x4a>
    {
      Error_Handler();
 8003c9e:	f000 f827 	bl	8003cf0 <Error_Handler>
    }
    sDate.WeekDay = RTC_WEEKDAY_WEDNESDAY;
 8003ca2:	2303      	movs	r3, #3
 8003ca4:	723b      	strb	r3, [r7, #8]
    sDate.Month = RTC_MONTH_MAY;
 8003ca6:	2305      	movs	r3, #5
 8003ca8:	727b      	strb	r3, [r7, #9]
    sDate.Date = 19;
 8003caa:	2313      	movs	r3, #19
 8003cac:	72bb      	strb	r3, [r7, #10]
    sDate.Year = 21;
 8003cae:	2315      	movs	r3, #21
 8003cb0:	72fb      	strb	r3, [r7, #11]

    if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN) != HAL_OK)
 8003cb2:	f107 0308 	add.w	r3, r7, #8
 8003cb6:	2200      	movs	r2, #0
 8003cb8:	4619      	mov	r1, r3
 8003cba:	4806      	ldr	r0, [pc, #24]	; (8003cd4 <HAL_GPIO_EXTI_Callback+0x7c>)
 8003cbc:	f008 fdbe 	bl	800c83c <HAL_RTC_SetDate>
 8003cc0:	4603      	mov	r3, r0
 8003cc2:	2b00      	cmp	r3, #0
 8003cc4:	d001      	beq.n	8003cca <HAL_GPIO_EXTI_Callback+0x72>
    {
      Error_Handler();
 8003cc6:	f000 f813 	bl	8003cf0 <Error_Handler>
    }

}
 8003cca:	bf00      	nop
 8003ccc:	3720      	adds	r7, #32
 8003cce:	46bd      	mov	sp, r7
 8003cd0:	bd80      	pop	{r7, pc}
 8003cd2:	bf00      	nop
 8003cd4:	240014f0 	.word	0x240014f0

08003cd8 <HAL_PWR_PVDCallback>:
void HAL_PWR_PVDCallback (void)
{
 8003cd8:	b480      	push	{r7}
 8003cda:	af00      	add	r7, sp, #0
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PWR_PVDCallback can be implemented in the user file
  */
	//HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_0);
	end_flag = 0;
 8003cdc:	4b03      	ldr	r3, [pc, #12]	; (8003cec <HAL_PWR_PVDCallback+0x14>)
 8003cde:	2200      	movs	r2, #0
 8003ce0:	601a      	str	r2, [r3, #0]
}
 8003ce2:	bf00      	nop
 8003ce4:	46bd      	mov	sp, r7
 8003ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cea:	4770      	bx	lr
 8003cec:	24000008 	.word	0x24000008

08003cf0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003cf0:	b580      	push	{r7, lr}
 8003cf2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003cf4:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
  {
	  printf("Error Handler\n");
 8003cf6:	4802      	ldr	r0, [pc, #8]	; (8003d00 <Error_Handler+0x10>)
 8003cf8:	f015 fd5e 	bl	80197b8 <puts>
 8003cfc:	e7fb      	b.n	8003cf6 <Error_Handler+0x6>
 8003cfe:	bf00      	nop
 8003d00:	0801af08 	.word	0x0801af08

08003d04 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 8003d04:	b480      	push	{r7}
 8003d06:	b083      	sub	sp, #12
 8003d08:	af00      	add	r7, sp, #0
 8003d0a:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8003d0c:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8003d10:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 8003d14:	f003 0301 	and.w	r3, r3, #1
 8003d18:	2b00      	cmp	r3, #0
 8003d1a:	d013      	beq.n	8003d44 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8003d1c:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8003d20:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 8003d24:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8003d28:	2b00      	cmp	r3, #0
 8003d2a:	d00b      	beq.n	8003d44 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 8003d2c:	e000      	b.n	8003d30 <ITM_SendChar+0x2c>
    {
      __NOP();
 8003d2e:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 8003d30:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	2b00      	cmp	r3, #0
 8003d38:	d0f9      	beq.n	8003d2e <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 8003d3a:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8003d3e:	687a      	ldr	r2, [r7, #4]
 8003d40:	b2d2      	uxtb	r2, r2
 8003d42:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 8003d44:	687b      	ldr	r3, [r7, #4]
}
 8003d46:	4618      	mov	r0, r3
 8003d48:	370c      	adds	r7, #12
 8003d4a:	46bd      	mov	sp, r7
 8003d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d50:	4770      	bx	lr

08003d52 <_write>:

#include <myprintf.h>
#include "main.h"

int _write(int file, char *ptr, int len)
{
 8003d52:	b580      	push	{r7, lr}
 8003d54:	b086      	sub	sp, #24
 8003d56:	af00      	add	r7, sp, #0
 8003d58:	60f8      	str	r0, [r7, #12]
 8003d5a:	60b9      	str	r1, [r7, #8]
 8003d5c:	607a      	str	r2, [r7, #4]
  int i=0;
 8003d5e:	2300      	movs	r3, #0
 8003d60:	617b      	str	r3, [r7, #20]
  for(i=0 ; i<len ; i++)
 8003d62:	2300      	movs	r3, #0
 8003d64:	617b      	str	r3, [r7, #20]
 8003d66:	e009      	b.n	8003d7c <_write+0x2a>
    ITM_SendChar((*ptr++));
 8003d68:	68bb      	ldr	r3, [r7, #8]
 8003d6a:	1c5a      	adds	r2, r3, #1
 8003d6c:	60ba      	str	r2, [r7, #8]
 8003d6e:	781b      	ldrb	r3, [r3, #0]
 8003d70:	4618      	mov	r0, r3
 8003d72:	f7ff ffc7 	bl	8003d04 <ITM_SendChar>
  for(i=0 ; i<len ; i++)
 8003d76:	697b      	ldr	r3, [r7, #20]
 8003d78:	3301      	adds	r3, #1
 8003d7a:	617b      	str	r3, [r7, #20]
 8003d7c:	697a      	ldr	r2, [r7, #20]
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	429a      	cmp	r2, r3
 8003d82:	dbf1      	blt.n	8003d68 <_write+0x16>
  return len;
 8003d84:	687b      	ldr	r3, [r7, #4]
}
 8003d86:	4618      	mov	r0, r3
 8003d88:	3718      	adds	r7, #24
 8003d8a:	46bd      	mov	sp, r7
 8003d8c:	bd80      	pop	{r7, pc}
	...

08003d90 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003d90:	b580      	push	{r7, lr}
 8003d92:	b084      	sub	sp, #16
 8003d94:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */
  PWR_PVDTypeDef sConfigPVD = {0};
 8003d96:	f107 0308 	add.w	r3, r7, #8
 8003d9a:	2200      	movs	r2, #0
 8003d9c:	601a      	str	r2, [r3, #0]
 8003d9e:	605a      	str	r2, [r3, #4]

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003da0:	4b13      	ldr	r3, [pc, #76]	; (8003df0 <HAL_MspInit+0x60>)
 8003da2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8003da6:	4a12      	ldr	r2, [pc, #72]	; (8003df0 <HAL_MspInit+0x60>)
 8003da8:	f043 0302 	orr.w	r3, r3, #2
 8003dac:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8003db0:	4b0f      	ldr	r3, [pc, #60]	; (8003df0 <HAL_MspInit+0x60>)
 8003db2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8003db6:	f003 0302 	and.w	r3, r3, #2
 8003dba:	607b      	str	r3, [r7, #4]
 8003dbc:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* PVD_AVD_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PVD_AVD_IRQn, 0, 0);
 8003dbe:	2200      	movs	r2, #0
 8003dc0:	2100      	movs	r1, #0
 8003dc2:	2001      	movs	r0, #1
 8003dc4:	f000 fd91 	bl	80048ea <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(PVD_AVD_IRQn);
 8003dc8:	2001      	movs	r0, #1
 8003dca:	f000 fda8 	bl	800491e <HAL_NVIC_EnableIRQ>

  /** PVD Configuration
  */
  sConfigPVD.PVDLevel = PWR_PVDLEVEL_6;
 8003dce:	23c0      	movs	r3, #192	; 0xc0
 8003dd0:	60bb      	str	r3, [r7, #8]
  sConfigPVD.Mode = PWR_PVD_MODE_IT_RISING;
 8003dd2:	f04f 1301 	mov.w	r3, #65537	; 0x10001
 8003dd6:	60fb      	str	r3, [r7, #12]
  HAL_PWR_ConfigPVD(&sConfigPVD);
 8003dd8:	f107 0308 	add.w	r3, r7, #8
 8003ddc:	4618      	mov	r0, r3
 8003dde:	f005 fc1f 	bl	8009620 <HAL_PWR_ConfigPVD>
  /** Enable the PVD Output
  */
  HAL_PWR_EnablePVD();
 8003de2:	f005 fc97 	bl	8009714 <HAL_PWR_EnablePVD>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003de6:	bf00      	nop
 8003de8:	3710      	adds	r7, #16
 8003dea:	46bd      	mov	sp, r7
 8003dec:	bd80      	pop	{r7, pc}
 8003dee:	bf00      	nop
 8003df0:	58024400 	.word	0x58024400

08003df4 <HAL_FDCAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hfdcan: FDCAN handle pointer
* @retval None
*/
void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* hfdcan)
{
 8003df4:	b580      	push	{r7, lr}
 8003df6:	b08c      	sub	sp, #48	; 0x30
 8003df8:	af00      	add	r7, sp, #0
 8003dfa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003dfc:	f107 031c 	add.w	r3, r7, #28
 8003e00:	2200      	movs	r2, #0
 8003e02:	601a      	str	r2, [r3, #0]
 8003e04:	605a      	str	r2, [r3, #4]
 8003e06:	609a      	str	r2, [r3, #8]
 8003e08:	60da      	str	r2, [r3, #12]
 8003e0a:	611a      	str	r2, [r3, #16]
  if(hfdcan->Instance==FDCAN1)
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	4a48      	ldr	r2, [pc, #288]	; (8003f34 <HAL_FDCAN_MspInit+0x140>)
 8003e12:	4293      	cmp	r3, r2
 8003e14:	d14e      	bne.n	8003eb4 <HAL_FDCAN_MspInit+0xc0>
  {
  /* USER CODE BEGIN FDCAN1_MspInit 0 */

  /* USER CODE END FDCAN1_MspInit 0 */
    /* Peripheral clock enable */
    HAL_RCC_FDCAN_CLK_ENABLED++;
 8003e16:	4b48      	ldr	r3, [pc, #288]	; (8003f38 <HAL_FDCAN_MspInit+0x144>)
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	3301      	adds	r3, #1
 8003e1c:	4a46      	ldr	r2, [pc, #280]	; (8003f38 <HAL_FDCAN_MspInit+0x144>)
 8003e1e:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_FDCAN_CLK_ENABLED==1){
 8003e20:	4b45      	ldr	r3, [pc, #276]	; (8003f38 <HAL_FDCAN_MspInit+0x144>)
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	2b01      	cmp	r3, #1
 8003e26:	d10e      	bne.n	8003e46 <HAL_FDCAN_MspInit+0x52>
      __HAL_RCC_FDCAN_CLK_ENABLE();
 8003e28:	4b44      	ldr	r3, [pc, #272]	; (8003f3c <HAL_FDCAN_MspInit+0x148>)
 8003e2a:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8003e2e:	4a43      	ldr	r2, [pc, #268]	; (8003f3c <HAL_FDCAN_MspInit+0x148>)
 8003e30:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003e34:	f8c2 30ec 	str.w	r3, [r2, #236]	; 0xec
 8003e38:	4b40      	ldr	r3, [pc, #256]	; (8003f3c <HAL_FDCAN_MspInit+0x148>)
 8003e3a:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8003e3e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e42:	61bb      	str	r3, [r7, #24]
 8003e44:	69bb      	ldr	r3, [r7, #24]
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003e46:	4b3d      	ldr	r3, [pc, #244]	; (8003f3c <HAL_FDCAN_MspInit+0x148>)
 8003e48:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003e4c:	4a3b      	ldr	r2, [pc, #236]	; (8003f3c <HAL_FDCAN_MspInit+0x148>)
 8003e4e:	f043 0302 	orr.w	r3, r3, #2
 8003e52:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8003e56:	4b39      	ldr	r3, [pc, #228]	; (8003f3c <HAL_FDCAN_MspInit+0x148>)
 8003e58:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003e5c:	f003 0302 	and.w	r3, r3, #2
 8003e60:	617b      	str	r3, [r7, #20]
 8003e62:	697b      	ldr	r3, [r7, #20]
    /**FDCAN1 GPIO Configuration
    PB8     ------> FDCAN1_RX
    PB9     ------> FDCAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8003e64:	f44f 7340 	mov.w	r3, #768	; 0x300
 8003e68:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003e6a:	2302      	movs	r3, #2
 8003e6c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003e6e:	2300      	movs	r3, #0
 8003e70:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003e72:	2303      	movs	r3, #3
 8003e74:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN1;
 8003e76:	2309      	movs	r3, #9
 8003e78:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003e7a:	f107 031c 	add.w	r3, r7, #28
 8003e7e:	4619      	mov	r1, r3
 8003e80:	482f      	ldr	r0, [pc, #188]	; (8003f40 <HAL_FDCAN_MspInit+0x14c>)
 8003e82:	f003 ff7b 	bl	8007d7c <HAL_GPIO_Init>

    HAL_I2CEx_EnableFastModePlus(SYSCFG_PMCR_I2C_PB8_FMP);
 8003e86:	2040      	movs	r0, #64	; 0x40
 8003e88:	f004 f98e 	bl	80081a8 <HAL_I2CEx_EnableFastModePlus>

    HAL_I2CEx_EnableFastModePlus(SYSCFG_PMCR_I2C_PB9_FMP);
 8003e8c:	2080      	movs	r0, #128	; 0x80
 8003e8e:	f004 f98b 	bl	80081a8 <HAL_I2CEx_EnableFastModePlus>

    /* FDCAN1 interrupt Init */
    HAL_NVIC_SetPriority(FDCAN1_IT0_IRQn, 0, 0);
 8003e92:	2200      	movs	r2, #0
 8003e94:	2100      	movs	r1, #0
 8003e96:	2013      	movs	r0, #19
 8003e98:	f000 fd27 	bl	80048ea <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(FDCAN1_IT0_IRQn);
 8003e9c:	2013      	movs	r0, #19
 8003e9e:	f000 fd3e 	bl	800491e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(FDCAN1_IT1_IRQn, 0, 0);
 8003ea2:	2200      	movs	r2, #0
 8003ea4:	2100      	movs	r1, #0
 8003ea6:	2015      	movs	r0, #21
 8003ea8:	f000 fd1f 	bl	80048ea <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(FDCAN1_IT1_IRQn);
 8003eac:	2015      	movs	r0, #21
 8003eae:	f000 fd36 	bl	800491e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN FDCAN2_MspInit 1 */

  /* USER CODE END FDCAN2_MspInit 1 */
  }

}
 8003eb2:	e03b      	b.n	8003f2c <HAL_FDCAN_MspInit+0x138>
  else if(hfdcan->Instance==FDCAN2)
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	4a22      	ldr	r2, [pc, #136]	; (8003f44 <HAL_FDCAN_MspInit+0x150>)
 8003eba:	4293      	cmp	r3, r2
 8003ebc:	d136      	bne.n	8003f2c <HAL_FDCAN_MspInit+0x138>
    HAL_RCC_FDCAN_CLK_ENABLED++;
 8003ebe:	4b1e      	ldr	r3, [pc, #120]	; (8003f38 <HAL_FDCAN_MspInit+0x144>)
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	3301      	adds	r3, #1
 8003ec4:	4a1c      	ldr	r2, [pc, #112]	; (8003f38 <HAL_FDCAN_MspInit+0x144>)
 8003ec6:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_FDCAN_CLK_ENABLED==1){
 8003ec8:	4b1b      	ldr	r3, [pc, #108]	; (8003f38 <HAL_FDCAN_MspInit+0x144>)
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	2b01      	cmp	r3, #1
 8003ece:	d10e      	bne.n	8003eee <HAL_FDCAN_MspInit+0xfa>
      __HAL_RCC_FDCAN_CLK_ENABLE();
 8003ed0:	4b1a      	ldr	r3, [pc, #104]	; (8003f3c <HAL_FDCAN_MspInit+0x148>)
 8003ed2:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8003ed6:	4a19      	ldr	r2, [pc, #100]	; (8003f3c <HAL_FDCAN_MspInit+0x148>)
 8003ed8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003edc:	f8c2 30ec 	str.w	r3, [r2, #236]	; 0xec
 8003ee0:	4b16      	ldr	r3, [pc, #88]	; (8003f3c <HAL_FDCAN_MspInit+0x148>)
 8003ee2:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8003ee6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003eea:	613b      	str	r3, [r7, #16]
 8003eec:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003eee:	4b13      	ldr	r3, [pc, #76]	; (8003f3c <HAL_FDCAN_MspInit+0x148>)
 8003ef0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003ef4:	4a11      	ldr	r2, [pc, #68]	; (8003f3c <HAL_FDCAN_MspInit+0x148>)
 8003ef6:	f043 0302 	orr.w	r3, r3, #2
 8003efa:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8003efe:	4b0f      	ldr	r3, [pc, #60]	; (8003f3c <HAL_FDCAN_MspInit+0x148>)
 8003f00:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003f04:	f003 0302 	and.w	r3, r3, #2
 8003f08:	60fb      	str	r3, [r7, #12]
 8003f0a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 8003f0c:	2360      	movs	r3, #96	; 0x60
 8003f0e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003f10:	2302      	movs	r3, #2
 8003f12:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003f14:	2300      	movs	r3, #0
 8003f16:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003f18:	2300      	movs	r3, #0
 8003f1a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN2;
 8003f1c:	2309      	movs	r3, #9
 8003f1e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003f20:	f107 031c 	add.w	r3, r7, #28
 8003f24:	4619      	mov	r1, r3
 8003f26:	4806      	ldr	r0, [pc, #24]	; (8003f40 <HAL_FDCAN_MspInit+0x14c>)
 8003f28:	f003 ff28 	bl	8007d7c <HAL_GPIO_Init>
}
 8003f2c:	bf00      	nop
 8003f2e:	3730      	adds	r7, #48	; 0x30
 8003f30:	46bd      	mov	sp, r7
 8003f32:	bd80      	pop	{r7, pc}
 8003f34:	4000a000 	.word	0x4000a000
 8003f38:	24000b48 	.word	0x24000b48
 8003f3c:	58024400 	.word	0x58024400
 8003f40:	58020400 	.word	0x58020400
 8003f44:	4000a400 	.word	0x4000a400

08003f48 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8003f48:	b480      	push	{r7}
 8003f4a:	b083      	sub	sp, #12
 8003f4c:	af00      	add	r7, sp, #0
 8003f4e:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	4a07      	ldr	r2, [pc, #28]	; (8003f74 <HAL_RTC_MspInit+0x2c>)
 8003f56:	4293      	cmp	r3, r2
 8003f58:	d105      	bne.n	8003f66 <HAL_RTC_MspInit+0x1e>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8003f5a:	4b07      	ldr	r3, [pc, #28]	; (8003f78 <HAL_RTC_MspInit+0x30>)
 8003f5c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f5e:	4a06      	ldr	r2, [pc, #24]	; (8003f78 <HAL_RTC_MspInit+0x30>)
 8003f60:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003f64:	6713      	str	r3, [r2, #112]	; 0x70
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8003f66:	bf00      	nop
 8003f68:	370c      	adds	r7, #12
 8003f6a:	46bd      	mov	sp, r7
 8003f6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f70:	4770      	bx	lr
 8003f72:	bf00      	nop
 8003f74:	58004000 	.word	0x58004000
 8003f78:	58024400 	.word	0x58024400

08003f7c <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 8003f7c:	b580      	push	{r7, lr}
 8003f7e:	b08a      	sub	sp, #40	; 0x28
 8003f80:	af00      	add	r7, sp, #0
 8003f82:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003f84:	f107 0314 	add.w	r3, r7, #20
 8003f88:	2200      	movs	r2, #0
 8003f8a:	601a      	str	r2, [r3, #0]
 8003f8c:	605a      	str	r2, [r3, #4]
 8003f8e:	609a      	str	r2, [r3, #8]
 8003f90:	60da      	str	r2, [r3, #12]
 8003f92:	611a      	str	r2, [r3, #16]
  if(hsd->Instance==SDMMC1)
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	4a2e      	ldr	r2, [pc, #184]	; (8004054 <HAL_SD_MspInit+0xd8>)
 8003f9a:	4293      	cmp	r3, r2
 8003f9c:	d155      	bne.n	800404a <HAL_SD_MspInit+0xce>
  {
  /* USER CODE BEGIN SDMMC1_MspInit 0 */

  /* USER CODE END SDMMC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SDMMC1_CLK_ENABLE();
 8003f9e:	4b2e      	ldr	r3, [pc, #184]	; (8004058 <HAL_SD_MspInit+0xdc>)
 8003fa0:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8003fa4:	4a2c      	ldr	r2, [pc, #176]	; (8004058 <HAL_SD_MspInit+0xdc>)
 8003fa6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003faa:	f8c2 30d4 	str.w	r3, [r2, #212]	; 0xd4
 8003fae:	4b2a      	ldr	r3, [pc, #168]	; (8004058 <HAL_SD_MspInit+0xdc>)
 8003fb0:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8003fb4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003fb8:	613b      	str	r3, [r7, #16]
 8003fba:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003fbc:	4b26      	ldr	r3, [pc, #152]	; (8004058 <HAL_SD_MspInit+0xdc>)
 8003fbe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003fc2:	4a25      	ldr	r2, [pc, #148]	; (8004058 <HAL_SD_MspInit+0xdc>)
 8003fc4:	f043 0304 	orr.w	r3, r3, #4
 8003fc8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8003fcc:	4b22      	ldr	r3, [pc, #136]	; (8004058 <HAL_SD_MspInit+0xdc>)
 8003fce:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003fd2:	f003 0304 	and.w	r3, r3, #4
 8003fd6:	60fb      	str	r3, [r7, #12]
 8003fd8:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8003fda:	4b1f      	ldr	r3, [pc, #124]	; (8004058 <HAL_SD_MspInit+0xdc>)
 8003fdc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003fe0:	4a1d      	ldr	r2, [pc, #116]	; (8004058 <HAL_SD_MspInit+0xdc>)
 8003fe2:	f043 0308 	orr.w	r3, r3, #8
 8003fe6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8003fea:	4b1b      	ldr	r3, [pc, #108]	; (8004058 <HAL_SD_MspInit+0xdc>)
 8003fec:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003ff0:	f003 0308 	and.w	r3, r3, #8
 8003ff4:	60bb      	str	r3, [r7, #8]
 8003ff6:	68bb      	ldr	r3, [r7, #8]
    PC10     ------> SDMMC1_D2
    PC11     ------> SDMMC1_D3
    PC12     ------> SDMMC1_CK
    PD2     ------> SDMMC1_CMD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 8003ff8:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 8003ffc:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_12;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003ffe:	2302      	movs	r3, #2
 8004000:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004002:	2300      	movs	r3, #0
 8004004:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004006:	2303      	movs	r3, #3
 8004008:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO1;
 800400a:	230c      	movs	r3, #12
 800400c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800400e:	f107 0314 	add.w	r3, r7, #20
 8004012:	4619      	mov	r1, r3
 8004014:	4811      	ldr	r0, [pc, #68]	; (800405c <HAL_SD_MspInit+0xe0>)
 8004016:	f003 feb1 	bl	8007d7c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 800401a:	2304      	movs	r3, #4
 800401c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800401e:	2302      	movs	r3, #2
 8004020:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004022:	2300      	movs	r3, #0
 8004024:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004026:	2303      	movs	r3, #3
 8004028:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO1;
 800402a:	230c      	movs	r3, #12
 800402c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800402e:	f107 0314 	add.w	r3, r7, #20
 8004032:	4619      	mov	r1, r3
 8004034:	480a      	ldr	r0, [pc, #40]	; (8004060 <HAL_SD_MspInit+0xe4>)
 8004036:	f003 fea1 	bl	8007d7c <HAL_GPIO_Init>

    /* SDMMC1 interrupt Init */
    HAL_NVIC_SetPriority(SDMMC1_IRQn, 0, 0);
 800403a:	2200      	movs	r2, #0
 800403c:	2100      	movs	r1, #0
 800403e:	2031      	movs	r0, #49	; 0x31
 8004040:	f000 fc53 	bl	80048ea <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SDMMC1_IRQn);
 8004044:	2031      	movs	r0, #49	; 0x31
 8004046:	f000 fc6a 	bl	800491e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SDMMC1_MspInit 1 */

  /* USER CODE END SDMMC1_MspInit 1 */
  }

}
 800404a:	bf00      	nop
 800404c:	3728      	adds	r7, #40	; 0x28
 800404e:	46bd      	mov	sp, r7
 8004050:	bd80      	pop	{r7, pc}
 8004052:	bf00      	nop
 8004054:	52007000 	.word	0x52007000
 8004058:	58024400 	.word	0x58024400
 800405c:	58020800 	.word	0x58020800
 8004060:	58020c00 	.word	0x58020c00

08004064 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8004064:	b580      	push	{r7, lr}
 8004066:	b08a      	sub	sp, #40	; 0x28
 8004068:	af00      	add	r7, sp, #0
 800406a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800406c:	f107 0314 	add.w	r3, r7, #20
 8004070:	2200      	movs	r2, #0
 8004072:	601a      	str	r2, [r3, #0]
 8004074:	605a      	str	r2, [r3, #4]
 8004076:	609a      	str	r2, [r3, #8]
 8004078:	60da      	str	r2, [r3, #12]
 800407a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	4a1a      	ldr	r2, [pc, #104]	; (80040ec <HAL_SPI_MspInit+0x88>)
 8004082:	4293      	cmp	r3, r2
 8004084:	d12d      	bne.n	80040e2 <HAL_SPI_MspInit+0x7e>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8004086:	4b1a      	ldr	r3, [pc, #104]	; (80040f0 <HAL_SPI_MspInit+0x8c>)
 8004088:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800408c:	4a18      	ldr	r2, [pc, #96]	; (80040f0 <HAL_SPI_MspInit+0x8c>)
 800408e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8004092:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8004096:	4b16      	ldr	r3, [pc, #88]	; (80040f0 <HAL_SPI_MspInit+0x8c>)
 8004098:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800409c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80040a0:	613b      	str	r3, [r7, #16]
 80040a2:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80040a4:	4b12      	ldr	r3, [pc, #72]	; (80040f0 <HAL_SPI_MspInit+0x8c>)
 80040a6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80040aa:	4a11      	ldr	r2, [pc, #68]	; (80040f0 <HAL_SPI_MspInit+0x8c>)
 80040ac:	f043 0301 	orr.w	r3, r3, #1
 80040b0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80040b4:	4b0e      	ldr	r3, [pc, #56]	; (80040f0 <HAL_SPI_MspInit+0x8c>)
 80040b6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80040ba:	f003 0301 	and.w	r3, r3, #1
 80040be:	60fb      	str	r3, [r7, #12]
 80040c0:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 80040c2:	23e0      	movs	r3, #224	; 0xe0
 80040c4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80040c6:	2302      	movs	r3, #2
 80040c8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80040ca:	2300      	movs	r3, #0
 80040cc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80040ce:	2303      	movs	r3, #3
 80040d0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80040d2:	2305      	movs	r3, #5
 80040d4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80040d6:	f107 0314 	add.w	r3, r7, #20
 80040da:	4619      	mov	r1, r3
 80040dc:	4805      	ldr	r0, [pc, #20]	; (80040f4 <HAL_SPI_MspInit+0x90>)
 80040de:	f003 fe4d 	bl	8007d7c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 80040e2:	bf00      	nop
 80040e4:	3728      	adds	r7, #40	; 0x28
 80040e6:	46bd      	mov	sp, r7
 80040e8:	bd80      	pop	{r7, pc}
 80040ea:	bf00      	nop
 80040ec:	40013000 	.word	0x40013000
 80040f0:	58024400 	.word	0x58024400
 80040f4:	58020000 	.word	0x58020000

080040f8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80040f8:	b580      	push	{r7, lr}
 80040fa:	b08c      	sub	sp, #48	; 0x30
 80040fc:	af00      	add	r7, sp, #0
 80040fe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004100:	f107 031c 	add.w	r3, r7, #28
 8004104:	2200      	movs	r2, #0
 8004106:	601a      	str	r2, [r3, #0]
 8004108:	605a      	str	r2, [r3, #4]
 800410a:	609a      	str	r2, [r3, #8]
 800410c:	60da      	str	r2, [r3, #12]
 800410e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART8)
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	4a4b      	ldr	r2, [pc, #300]	; (8004244 <HAL_UART_MspInit+0x14c>)
 8004116:	4293      	cmp	r3, r2
 8004118:	d12e      	bne.n	8004178 <HAL_UART_MspInit+0x80>
  {
  /* USER CODE BEGIN UART8_MspInit 0 */

  /* USER CODE END UART8_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART8_CLK_ENABLE();
 800411a:	4b4b      	ldr	r3, [pc, #300]	; (8004248 <HAL_UART_MspInit+0x150>)
 800411c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8004120:	4a49      	ldr	r2, [pc, #292]	; (8004248 <HAL_UART_MspInit+0x150>)
 8004122:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8004126:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800412a:	4b47      	ldr	r3, [pc, #284]	; (8004248 <HAL_UART_MspInit+0x150>)
 800412c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8004130:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004134:	61bb      	str	r3, [r7, #24]
 8004136:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8004138:	4b43      	ldr	r3, [pc, #268]	; (8004248 <HAL_UART_MspInit+0x150>)
 800413a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800413e:	4a42      	ldr	r2, [pc, #264]	; (8004248 <HAL_UART_MspInit+0x150>)
 8004140:	f043 0310 	orr.w	r3, r3, #16
 8004144:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8004148:	4b3f      	ldr	r3, [pc, #252]	; (8004248 <HAL_UART_MspInit+0x150>)
 800414a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800414e:	f003 0310 	and.w	r3, r3, #16
 8004152:	617b      	str	r3, [r7, #20]
 8004154:	697b      	ldr	r3, [r7, #20]
    /**UART8 GPIO Configuration
    PE0     ------> UART8_RX
    PE1     ------> UART8_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8004156:	2303      	movs	r3, #3
 8004158:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800415a:	2302      	movs	r3, #2
 800415c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800415e:	2300      	movs	r3, #0
 8004160:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004162:	2300      	movs	r3, #0
 8004164:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_UART8;
 8004166:	2308      	movs	r3, #8
 8004168:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800416a:	f107 031c 	add.w	r3, r7, #28
 800416e:	4619      	mov	r1, r3
 8004170:	4836      	ldr	r0, [pc, #216]	; (800424c <HAL_UART_MspInit+0x154>)
 8004172:	f003 fe03 	bl	8007d7c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8004176:	e061      	b.n	800423c <HAL_UART_MspInit+0x144>
  else if(huart->Instance==USART3)
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	4a34      	ldr	r2, [pc, #208]	; (8004250 <HAL_UART_MspInit+0x158>)
 800417e:	4293      	cmp	r3, r2
 8004180:	d15c      	bne.n	800423c <HAL_UART_MspInit+0x144>
    __HAL_RCC_USART3_CLK_ENABLE();
 8004182:	4b31      	ldr	r3, [pc, #196]	; (8004248 <HAL_UART_MspInit+0x150>)
 8004184:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8004188:	4a2f      	ldr	r2, [pc, #188]	; (8004248 <HAL_UART_MspInit+0x150>)
 800418a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800418e:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8004192:	4b2d      	ldr	r3, [pc, #180]	; (8004248 <HAL_UART_MspInit+0x150>)
 8004194:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8004198:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800419c:	613b      	str	r3, [r7, #16]
 800419e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80041a0:	4b29      	ldr	r3, [pc, #164]	; (8004248 <HAL_UART_MspInit+0x150>)
 80041a2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80041a6:	4a28      	ldr	r2, [pc, #160]	; (8004248 <HAL_UART_MspInit+0x150>)
 80041a8:	f043 0308 	orr.w	r3, r3, #8
 80041ac:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80041b0:	4b25      	ldr	r3, [pc, #148]	; (8004248 <HAL_UART_MspInit+0x150>)
 80041b2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80041b6:	f003 0308 	and.w	r3, r3, #8
 80041ba:	60fb      	str	r3, [r7, #12]
 80041bc:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80041be:	f44f 7340 	mov.w	r3, #768	; 0x300
 80041c2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80041c4:	2302      	movs	r3, #2
 80041c6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80041c8:	2300      	movs	r3, #0
 80041ca:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80041cc:	2300      	movs	r3, #0
 80041ce:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80041d0:	2307      	movs	r3, #7
 80041d2:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80041d4:	f107 031c 	add.w	r3, r7, #28
 80041d8:	4619      	mov	r1, r3
 80041da:	481e      	ldr	r0, [pc, #120]	; (8004254 <HAL_UART_MspInit+0x15c>)
 80041dc:	f003 fdce 	bl	8007d7c <HAL_GPIO_Init>
    hdma_usart3_rx.Instance = DMA1_Stream1;
 80041e0:	4b1d      	ldr	r3, [pc, #116]	; (8004258 <HAL_UART_MspInit+0x160>)
 80041e2:	4a1e      	ldr	r2, [pc, #120]	; (800425c <HAL_UART_MspInit+0x164>)
 80041e4:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Request = DMA_REQUEST_USART3_RX;
 80041e6:	4b1c      	ldr	r3, [pc, #112]	; (8004258 <HAL_UART_MspInit+0x160>)
 80041e8:	222d      	movs	r2, #45	; 0x2d
 80041ea:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80041ec:	4b1a      	ldr	r3, [pc, #104]	; (8004258 <HAL_UART_MspInit+0x160>)
 80041ee:	2200      	movs	r2, #0
 80041f0:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80041f2:	4b19      	ldr	r3, [pc, #100]	; (8004258 <HAL_UART_MspInit+0x160>)
 80041f4:	2200      	movs	r2, #0
 80041f6:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 80041f8:	4b17      	ldr	r3, [pc, #92]	; (8004258 <HAL_UART_MspInit+0x160>)
 80041fa:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80041fe:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8004200:	4b15      	ldr	r3, [pc, #84]	; (8004258 <HAL_UART_MspInit+0x160>)
 8004202:	2200      	movs	r2, #0
 8004204:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8004206:	4b14      	ldr	r3, [pc, #80]	; (8004258 <HAL_UART_MspInit+0x160>)
 8004208:	2200      	movs	r2, #0
 800420a:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Mode = DMA_CIRCULAR;
 800420c:	4b12      	ldr	r3, [pc, #72]	; (8004258 <HAL_UART_MspInit+0x160>)
 800420e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004212:	61da      	str	r2, [r3, #28]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_LOW;
 8004214:	4b10      	ldr	r3, [pc, #64]	; (8004258 <HAL_UART_MspInit+0x160>)
 8004216:	2200      	movs	r2, #0
 8004218:	621a      	str	r2, [r3, #32]
    hdma_usart3_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800421a:	4b0f      	ldr	r3, [pc, #60]	; (8004258 <HAL_UART_MspInit+0x160>)
 800421c:	2200      	movs	r2, #0
 800421e:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 8004220:	480d      	ldr	r0, [pc, #52]	; (8004258 <HAL_UART_MspInit+0x160>)
 8004222:	f000 fb97 	bl	8004954 <HAL_DMA_Init>
 8004226:	4603      	mov	r3, r0
 8004228:	2b00      	cmp	r3, #0
 800422a:	d001      	beq.n	8004230 <HAL_UART_MspInit+0x138>
      Error_Handler();
 800422c:	f7ff fd60 	bl	8003cf0 <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart3_rx);
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	4a09      	ldr	r2, [pc, #36]	; (8004258 <HAL_UART_MspInit+0x160>)
 8004234:	679a      	str	r2, [r3, #120]	; 0x78
 8004236:	4a08      	ldr	r2, [pc, #32]	; (8004258 <HAL_UART_MspInit+0x160>)
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	6393      	str	r3, [r2, #56]	; 0x38
}
 800423c:	bf00      	nop
 800423e:	3730      	adds	r7, #48	; 0x30
 8004240:	46bd      	mov	sp, r7
 8004242:	bd80      	pop	{r7, pc}
 8004244:	40007c00 	.word	0x40007c00
 8004248:	58024400 	.word	0x58024400
 800424c:	58021000 	.word	0x58021000
 8004250:	40004800 	.word	0x40004800
 8004254:	58020c00 	.word	0x58020c00
 8004258:	2400134c 	.word	0x2400134c
 800425c:	40020028 	.word	0x40020028

08004260 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8004260:	b580      	push	{r7, lr}
 8004262:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  HAL_RCC_NMI_IRQHandler();
 8004264:	f006 fa98 	bl	800a798 <HAL_RCC_NMI_IRQHandler>
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8004268:	e7fe      	b.n	8004268 <NMI_Handler+0x8>

0800426a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800426a:	b480      	push	{r7}
 800426c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800426e:	e7fe      	b.n	800426e <HardFault_Handler+0x4>

08004270 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8004270:	b480      	push	{r7}
 8004272:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8004274:	e7fe      	b.n	8004274 <MemManage_Handler+0x4>

08004276 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8004276:	b480      	push	{r7}
 8004278:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800427a:	e7fe      	b.n	800427a <BusFault_Handler+0x4>

0800427c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800427c:	b480      	push	{r7}
 800427e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8004280:	e7fe      	b.n	8004280 <UsageFault_Handler+0x4>

08004282 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8004282:	b480      	push	{r7}
 8004284:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8004286:	bf00      	nop
 8004288:	46bd      	mov	sp, r7
 800428a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800428e:	4770      	bx	lr

08004290 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8004290:	b480      	push	{r7}
 8004292:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8004294:	bf00      	nop
 8004296:	46bd      	mov	sp, r7
 8004298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800429c:	4770      	bx	lr

0800429e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800429e:	b480      	push	{r7}
 80042a0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80042a2:	bf00      	nop
 80042a4:	46bd      	mov	sp, r7
 80042a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042aa:	4770      	bx	lr

080042ac <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80042ac:	b580      	push	{r7, lr}
 80042ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80042b0:	f000 f9f2 	bl	8004698 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80042b4:	bf00      	nop
 80042b6:	bd80      	pop	{r7, pc}

080042b8 <PVD_AVD_IRQHandler>:

/**
  * @brief This function handles PVD and AVD interrupts through EXTI line 16.
  */
void PVD_AVD_IRQHandler(void)
{
 80042b8:	b580      	push	{r7, lr}
 80042ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN PVD_AVD_IRQn 0 */

  /* USER CODE END PVD_AVD_IRQn 0 */
  HAL_PWREx_PVD_AVD_IRQHandler();
 80042bc:	f005 fa84 	bl	80097c8 <HAL_PWREx_PVD_AVD_IRQHandler>
  /* USER CODE BEGIN PVD_AVD_IRQn 1 */

  /* USER CODE END PVD_AVD_IRQn 1 */
}
 80042c0:	bf00      	nop
 80042c2:	bd80      	pop	{r7, pc}

080042c4 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 80042c4:	b580      	push	{r7, lr}
 80042c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 80042c8:	4802      	ldr	r0, [pc, #8]	; (80042d4 <DMA1_Stream1_IRQHandler+0x10>)
 80042ca:	f001 f909 	bl	80054e0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 80042ce:	bf00      	nop
 80042d0:	bd80      	pop	{r7, pc}
 80042d2:	bf00      	nop
 80042d4:	2400134c 	.word	0x2400134c

080042d8 <FDCAN1_IT0_IRQHandler>:

/**
  * @brief This function handles FDCAN1 interrupt 0.
  */
void FDCAN1_IT0_IRQHandler(void)
{
 80042d8:	b580      	push	{r7, lr}
 80042da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FDCAN1_IT0_IRQn 0 */

  /* USER CODE END FDCAN1_IT0_IRQn 0 */
  HAL_FDCAN_IRQHandler(&hfdcan1);
 80042dc:	4802      	ldr	r0, [pc, #8]	; (80042e8 <FDCAN1_IT0_IRQHandler+0x10>)
 80042de:	f003 f8bd 	bl	800745c <HAL_FDCAN_IRQHandler>
  /* USER CODE BEGIN FDCAN1_IT0_IRQn 1 */

  /* USER CODE END FDCAN1_IT0_IRQn 1 */
}
 80042e2:	bf00      	nop
 80042e4:	bd80      	pop	{r7, pc}
 80042e6:	bf00      	nop
 80042e8:	24001514 	.word	0x24001514

080042ec <FDCAN1_IT1_IRQHandler>:

/**
  * @brief This function handles FDCAN1 interrupt 1.
  */
void FDCAN1_IT1_IRQHandler(void)
{
 80042ec:	b580      	push	{r7, lr}
 80042ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FDCAN1_IT1_IRQn 0 */

  /* USER CODE END FDCAN1_IT1_IRQn 0 */
  HAL_FDCAN_IRQHandler(&hfdcan1);
 80042f0:	4802      	ldr	r0, [pc, #8]	; (80042fc <FDCAN1_IT1_IRQHandler+0x10>)
 80042f2:	f003 f8b3 	bl	800745c <HAL_FDCAN_IRQHandler>
  /* USER CODE BEGIN FDCAN1_IT1_IRQn 1 */

  /* USER CODE END FDCAN1_IT1_IRQn 1 */
}
 80042f6:	bf00      	nop
 80042f8:	bd80      	pop	{r7, pc}
 80042fa:	bf00      	nop
 80042fc:	24001514 	.word	0x24001514

08004300 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8004300:	b580      	push	{r7, lr}
 8004302:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_9);
 8004304:	f44f 7000 	mov.w	r0, #512	; 0x200
 8004308:	f003 ff34 	bl	8008174 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 800430c:	bf00      	nop
 800430e:	bd80      	pop	{r7, pc}

08004310 <SDMMC1_IRQHandler>:

/**
  * @brief This function handles SDMMC1 global interrupt.
  */
void SDMMC1_IRQHandler(void)
{
 8004310:	b580      	push	{r7, lr}
 8004312:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SDMMC1_IRQn 0 */

  /* USER CODE END SDMMC1_IRQn 0 */
  HAL_SD_IRQHandler(&hsd1);
 8004314:	4802      	ldr	r0, [pc, #8]	; (8004320 <SDMMC1_IRQHandler+0x10>)
 8004316:	f009 f9c1 	bl	800d69c <HAL_SD_IRQHandler>
  /* USER CODE BEGIN SDMMC1_IRQn 1 */

  /* USER CODE END SDMMC1_IRQn 1 */
}
 800431a:	bf00      	nop
 800431c:	bd80      	pop	{r7, pc}
 800431e:	bf00      	nop
 8004320:	24001470 	.word	0x24001470

08004324 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8004324:	b580      	push	{r7, lr}
 8004326:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8004328:	4802      	ldr	r0, [pc, #8]	; (8004334 <OTG_FS_IRQHandler+0x10>)
 800432a:	f004 f8b8 	bl	800849e <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 800432e:	bf00      	nop
 8004330:	bd80      	pop	{r7, pc}
 8004332:	bf00      	nop
 8004334:	240020a4 	.word	0x240020a4

08004338 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8004338:	b580      	push	{r7, lr}
 800433a:	b086      	sub	sp, #24
 800433c:	af00      	add	r7, sp, #0
 800433e:	60f8      	str	r0, [r7, #12]
 8004340:	60b9      	str	r1, [r7, #8]
 8004342:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004344:	2300      	movs	r3, #0
 8004346:	617b      	str	r3, [r7, #20]
 8004348:	e00a      	b.n	8004360 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800434a:	f3af 8000 	nop.w
 800434e:	4601      	mov	r1, r0
 8004350:	68bb      	ldr	r3, [r7, #8]
 8004352:	1c5a      	adds	r2, r3, #1
 8004354:	60ba      	str	r2, [r7, #8]
 8004356:	b2ca      	uxtb	r2, r1
 8004358:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800435a:	697b      	ldr	r3, [r7, #20]
 800435c:	3301      	adds	r3, #1
 800435e:	617b      	str	r3, [r7, #20]
 8004360:	697a      	ldr	r2, [r7, #20]
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	429a      	cmp	r2, r3
 8004366:	dbf0      	blt.n	800434a <_read+0x12>
	}

return len;
 8004368:	687b      	ldr	r3, [r7, #4]
}
 800436a:	4618      	mov	r0, r3
 800436c:	3718      	adds	r7, #24
 800436e:	46bd      	mov	sp, r7
 8004370:	bd80      	pop	{r7, pc}

08004372 <_close>:
	}
	return len;
}

int _close(int file)
{
 8004372:	b480      	push	{r7}
 8004374:	b083      	sub	sp, #12
 8004376:	af00      	add	r7, sp, #0
 8004378:	6078      	str	r0, [r7, #4]
	return -1;
 800437a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800437e:	4618      	mov	r0, r3
 8004380:	370c      	adds	r7, #12
 8004382:	46bd      	mov	sp, r7
 8004384:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004388:	4770      	bx	lr

0800438a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800438a:	b480      	push	{r7}
 800438c:	b083      	sub	sp, #12
 800438e:	af00      	add	r7, sp, #0
 8004390:	6078      	str	r0, [r7, #4]
 8004392:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8004394:	683b      	ldr	r3, [r7, #0]
 8004396:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800439a:	605a      	str	r2, [r3, #4]
	return 0;
 800439c:	2300      	movs	r3, #0
}
 800439e:	4618      	mov	r0, r3
 80043a0:	370c      	adds	r7, #12
 80043a2:	46bd      	mov	sp, r7
 80043a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043a8:	4770      	bx	lr

080043aa <_isatty>:

int _isatty(int file)
{
 80043aa:	b480      	push	{r7}
 80043ac:	b083      	sub	sp, #12
 80043ae:	af00      	add	r7, sp, #0
 80043b0:	6078      	str	r0, [r7, #4]
	return 1;
 80043b2:	2301      	movs	r3, #1
}
 80043b4:	4618      	mov	r0, r3
 80043b6:	370c      	adds	r7, #12
 80043b8:	46bd      	mov	sp, r7
 80043ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043be:	4770      	bx	lr

080043c0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80043c0:	b480      	push	{r7}
 80043c2:	b085      	sub	sp, #20
 80043c4:	af00      	add	r7, sp, #0
 80043c6:	60f8      	str	r0, [r7, #12]
 80043c8:	60b9      	str	r1, [r7, #8]
 80043ca:	607a      	str	r2, [r7, #4]
	return 0;
 80043cc:	2300      	movs	r3, #0
}
 80043ce:	4618      	mov	r0, r3
 80043d0:	3714      	adds	r7, #20
 80043d2:	46bd      	mov	sp, r7
 80043d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043d8:	4770      	bx	lr
	...

080043dc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80043dc:	b580      	push	{r7, lr}
 80043de:	b086      	sub	sp, #24
 80043e0:	af00      	add	r7, sp, #0
 80043e2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80043e4:	4a14      	ldr	r2, [pc, #80]	; (8004438 <_sbrk+0x5c>)
 80043e6:	4b15      	ldr	r3, [pc, #84]	; (800443c <_sbrk+0x60>)
 80043e8:	1ad3      	subs	r3, r2, r3
 80043ea:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80043ec:	697b      	ldr	r3, [r7, #20]
 80043ee:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80043f0:	4b13      	ldr	r3, [pc, #76]	; (8004440 <_sbrk+0x64>)
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	2b00      	cmp	r3, #0
 80043f6:	d102      	bne.n	80043fe <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80043f8:	4b11      	ldr	r3, [pc, #68]	; (8004440 <_sbrk+0x64>)
 80043fa:	4a12      	ldr	r2, [pc, #72]	; (8004444 <_sbrk+0x68>)
 80043fc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80043fe:	4b10      	ldr	r3, [pc, #64]	; (8004440 <_sbrk+0x64>)
 8004400:	681a      	ldr	r2, [r3, #0]
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	4413      	add	r3, r2
 8004406:	693a      	ldr	r2, [r7, #16]
 8004408:	429a      	cmp	r2, r3
 800440a:	d207      	bcs.n	800441c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800440c:	f015 f86a 	bl	80194e4 <__errno>
 8004410:	4602      	mov	r2, r0
 8004412:	230c      	movs	r3, #12
 8004414:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 8004416:	f04f 33ff 	mov.w	r3, #4294967295
 800441a:	e009      	b.n	8004430 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800441c:	4b08      	ldr	r3, [pc, #32]	; (8004440 <_sbrk+0x64>)
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8004422:	4b07      	ldr	r3, [pc, #28]	; (8004440 <_sbrk+0x64>)
 8004424:	681a      	ldr	r2, [r3, #0]
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	4413      	add	r3, r2
 800442a:	4a05      	ldr	r2, [pc, #20]	; (8004440 <_sbrk+0x64>)
 800442c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800442e:	68fb      	ldr	r3, [r7, #12]
}
 8004430:	4618      	mov	r0, r3
 8004432:	3718      	adds	r7, #24
 8004434:	46bd      	mov	sp, r7
 8004436:	bd80      	pop	{r7, pc}
 8004438:	24080000 	.word	0x24080000
 800443c:	00000400 	.word	0x00000400
 8004440:	24000b4c 	.word	0x24000b4c
 8004444:	240024b0 	.word	0x240024b0

08004448 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8004448:	b480      	push	{r7}
 800444a:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 800444c:	4b39      	ldr	r3, [pc, #228]	; (8004534 <SystemInit+0xec>)
 800444e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004452:	4a38      	ldr	r2, [pc, #224]	; (8004534 <SystemInit+0xec>)
 8004454:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004458:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800445c:	4b36      	ldr	r3, [pc, #216]	; (8004538 <SystemInit+0xf0>)
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	f003 030f 	and.w	r3, r3, #15
 8004464:	2b06      	cmp	r3, #6
 8004466:	d807      	bhi.n	8004478 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8004468:	4b33      	ldr	r3, [pc, #204]	; (8004538 <SystemInit+0xf0>)
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	f023 030f 	bic.w	r3, r3, #15
 8004470:	4a31      	ldr	r2, [pc, #196]	; (8004538 <SystemInit+0xf0>)
 8004472:	f043 0307 	orr.w	r3, r3, #7
 8004476:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8004478:	4b30      	ldr	r3, [pc, #192]	; (800453c <SystemInit+0xf4>)
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	4a2f      	ldr	r2, [pc, #188]	; (800453c <SystemInit+0xf4>)
 800447e:	f043 0301 	orr.w	r3, r3, #1
 8004482:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8004484:	4b2d      	ldr	r3, [pc, #180]	; (800453c <SystemInit+0xf4>)
 8004486:	2200      	movs	r2, #0
 8004488:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 800448a:	4b2c      	ldr	r3, [pc, #176]	; (800453c <SystemInit+0xf4>)
 800448c:	681a      	ldr	r2, [r3, #0]
 800448e:	492b      	ldr	r1, [pc, #172]	; (800453c <SystemInit+0xf4>)
 8004490:	4b2b      	ldr	r3, [pc, #172]	; (8004540 <SystemInit+0xf8>)
 8004492:	4013      	ands	r3, r2
 8004494:	600b      	str	r3, [r1, #0]
  
   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8004496:	4b28      	ldr	r3, [pc, #160]	; (8004538 <SystemInit+0xf0>)
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	f003 030f 	and.w	r3, r3, #15
 800449e:	2b07      	cmp	r3, #7
 80044a0:	d907      	bls.n	80044b2 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80044a2:	4b25      	ldr	r3, [pc, #148]	; (8004538 <SystemInit+0xf0>)
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	f023 030f 	bic.w	r3, r3, #15
 80044aa:	4a23      	ldr	r2, [pc, #140]	; (8004538 <SystemInit+0xf0>)
 80044ac:	f043 0307 	orr.w	r3, r3, #7
 80044b0:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 80044b2:	4b22      	ldr	r3, [pc, #136]	; (800453c <SystemInit+0xf4>)
 80044b4:	2200      	movs	r2, #0
 80044b6:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 80044b8:	4b20      	ldr	r3, [pc, #128]	; (800453c <SystemInit+0xf4>)
 80044ba:	2200      	movs	r2, #0
 80044bc:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 80044be:	4b1f      	ldr	r3, [pc, #124]	; (800453c <SystemInit+0xf4>)
 80044c0:	2200      	movs	r2, #0
 80044c2:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 80044c4:	4b1d      	ldr	r3, [pc, #116]	; (800453c <SystemInit+0xf4>)
 80044c6:	4a1f      	ldr	r2, [pc, #124]	; (8004544 <SystemInit+0xfc>)
 80044c8:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 80044ca:	4b1c      	ldr	r3, [pc, #112]	; (800453c <SystemInit+0xf4>)
 80044cc:	4a1e      	ldr	r2, [pc, #120]	; (8004548 <SystemInit+0x100>)
 80044ce:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 80044d0:	4b1a      	ldr	r3, [pc, #104]	; (800453c <SystemInit+0xf4>)
 80044d2:	4a1e      	ldr	r2, [pc, #120]	; (800454c <SystemInit+0x104>)
 80044d4:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 80044d6:	4b19      	ldr	r3, [pc, #100]	; (800453c <SystemInit+0xf4>)
 80044d8:	2200      	movs	r2, #0
 80044da:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 80044dc:	4b17      	ldr	r3, [pc, #92]	; (800453c <SystemInit+0xf4>)
 80044de:	4a1b      	ldr	r2, [pc, #108]	; (800454c <SystemInit+0x104>)
 80044e0:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 80044e2:	4b16      	ldr	r3, [pc, #88]	; (800453c <SystemInit+0xf4>)
 80044e4:	2200      	movs	r2, #0
 80044e6:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 80044e8:	4b14      	ldr	r3, [pc, #80]	; (800453c <SystemInit+0xf4>)
 80044ea:	4a18      	ldr	r2, [pc, #96]	; (800454c <SystemInit+0x104>)
 80044ec:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 80044ee:	4b13      	ldr	r3, [pc, #76]	; (800453c <SystemInit+0xf4>)
 80044f0:	2200      	movs	r2, #0
 80044f2:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80044f4:	4b11      	ldr	r3, [pc, #68]	; (800453c <SystemInit+0xf4>)
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	4a10      	ldr	r2, [pc, #64]	; (800453c <SystemInit+0xf4>)
 80044fa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80044fe:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8004500:	4b0e      	ldr	r3, [pc, #56]	; (800453c <SystemInit+0xf4>)
 8004502:	2200      	movs	r2, #0
 8004504:	661a      	str	r2, [r3, #96]	; 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8004506:	4b12      	ldr	r3, [pc, #72]	; (8004550 <SystemInit+0x108>)
 8004508:	681a      	ldr	r2, [r3, #0]
 800450a:	4b12      	ldr	r3, [pc, #72]	; (8004554 <SystemInit+0x10c>)
 800450c:	4013      	ands	r3, r2
 800450e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004512:	d202      	bcs.n	800451a <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8004514:	4b10      	ldr	r3, [pc, #64]	; (8004558 <SystemInit+0x110>)
 8004516:	2201      	movs	r2, #1
 8004518:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 800451a:	4b10      	ldr	r3, [pc, #64]	; (800455c <SystemInit+0x114>)
 800451c:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8004520:	601a      	str	r2, [r3, #0]

  /* Configure the Vector Table location add offset address for cortex-M7 ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D1_AXISRAM_BASE  | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal AXI-RAM */
#else
  SCB->VTOR = FLASH_BANK1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8004522:	4b04      	ldr	r3, [pc, #16]	; (8004534 <SystemInit+0xec>)
 8004524:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8004528:	609a      	str	r2, [r3, #8]
#endif

#endif /*DUAL_CORE && CORE_CM4*/

}
 800452a:	bf00      	nop
 800452c:	46bd      	mov	sp, r7
 800452e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004532:	4770      	bx	lr
 8004534:	e000ed00 	.word	0xe000ed00
 8004538:	52002000 	.word	0x52002000
 800453c:	58024400 	.word	0x58024400
 8004540:	eaf6ed7f 	.word	0xeaf6ed7f
 8004544:	02020200 	.word	0x02020200
 8004548:	01ff0000 	.word	0x01ff0000
 800454c:	01010280 	.word	0x01010280
 8004550:	5c001000 	.word	0x5c001000
 8004554:	ffff0000 	.word	0xffff0000
 8004558:	51008108 	.word	0x51008108
 800455c:	52004000 	.word	0x52004000

08004560 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8004560:	f8df d034 	ldr.w	sp, [pc, #52]	; 8004598 <LoopFillZerobss+0x10>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8004564:	f7ff ff70 	bl	8004448 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8004568:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800456a:	e003      	b.n	8004574 <LoopCopyDataInit>

0800456c <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 800456c:	4b0b      	ldr	r3, [pc, #44]	; (800459c <LoopFillZerobss+0x14>)
  ldr  r3, [r3, r1]
 800456e:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8004570:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8004572:	3104      	adds	r1, #4

08004574 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8004574:	480a      	ldr	r0, [pc, #40]	; (80045a0 <LoopFillZerobss+0x18>)
  ldr  r3, =_edata
 8004576:	4b0b      	ldr	r3, [pc, #44]	; (80045a4 <LoopFillZerobss+0x1c>)
  adds  r2, r0, r1
 8004578:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800457a:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 800457c:	d3f6      	bcc.n	800456c <CopyDataInit>
  ldr  r2, =_sbss
 800457e:	4a0a      	ldr	r2, [pc, #40]	; (80045a8 <LoopFillZerobss+0x20>)
  b  LoopFillZerobss
 8004580:	e002      	b.n	8004588 <LoopFillZerobss>

08004582 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8004582:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8004584:	f842 3b04 	str.w	r3, [r2], #4

08004588 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8004588:	4b08      	ldr	r3, [pc, #32]	; (80045ac <LoopFillZerobss+0x24>)
  cmp  r2, r3
 800458a:	429a      	cmp	r2, r3
  bcc  FillZerobss
 800458c:	d3f9      	bcc.n	8004582 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800458e:	f014 ffaf 	bl	80194f0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8004592:	f7fd fca1 	bl	8001ed8 <main>
  bx  lr    
 8004596:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8004598:	24080000 	.word	0x24080000
  ldr  r3, =_sidata
 800459c:	0801b19c 	.word	0x0801b19c
  ldr  r0, =_sdata
 80045a0:	24000000 	.word	0x24000000
  ldr  r3, =_edata
 80045a4:	240001dc 	.word	0x240001dc
  ldr  r2, =_sbss
 80045a8:	240001e0 	.word	0x240001e0
  ldr  r3, = _ebss
 80045ac:	240024b0 	.word	0x240024b0

080045b0 <ADC3_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80045b0:	e7fe      	b.n	80045b0 <ADC3_IRQHandler>
	...

080045b4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80045b4:	b580      	push	{r7, lr}
 80045b6:	b082      	sub	sp, #8
 80045b8:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80045ba:	2003      	movs	r0, #3
 80045bc:	f000 f98a 	bl	80048d4 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80045c0:	f005 ff1c 	bl	800a3fc <HAL_RCC_GetSysClockFreq>
 80045c4:	4601      	mov	r1, r0
 80045c6:	4b15      	ldr	r3, [pc, #84]	; (800461c <HAL_Init+0x68>)
 80045c8:	699b      	ldr	r3, [r3, #24]
 80045ca:	0a1b      	lsrs	r3, r3, #8
 80045cc:	f003 030f 	and.w	r3, r3, #15
 80045d0:	4a13      	ldr	r2, [pc, #76]	; (8004620 <HAL_Init+0x6c>)
 80045d2:	5cd3      	ldrb	r3, [r2, r3]
 80045d4:	f003 031f 	and.w	r3, r3, #31
 80045d8:	fa21 f303 	lsr.w	r3, r1, r3
 80045dc:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80045de:	4b0f      	ldr	r3, [pc, #60]	; (800461c <HAL_Init+0x68>)
 80045e0:	699b      	ldr	r3, [r3, #24]
 80045e2:	f003 030f 	and.w	r3, r3, #15
 80045e6:	4a0e      	ldr	r2, [pc, #56]	; (8004620 <HAL_Init+0x6c>)
 80045e8:	5cd3      	ldrb	r3, [r2, r3]
 80045ea:	f003 031f 	and.w	r3, r3, #31
 80045ee:	687a      	ldr	r2, [r7, #4]
 80045f0:	fa22 f303 	lsr.w	r3, r2, r3
 80045f4:	4a0b      	ldr	r2, [pc, #44]	; (8004624 <HAL_Init+0x70>)
 80045f6:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80045f8:	4a0b      	ldr	r2, [pc, #44]	; (8004628 <HAL_Init+0x74>)
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80045fe:	2000      	movs	r0, #0
 8004600:	f000 f814 	bl	800462c <HAL_InitTick>
 8004604:	4603      	mov	r3, r0
 8004606:	2b00      	cmp	r3, #0
 8004608:	d001      	beq.n	800460e <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 800460a:	2301      	movs	r3, #1
 800460c:	e002      	b.n	8004614 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 800460e:	f7ff fbbf 	bl	8003d90 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8004612:	2300      	movs	r3, #0
}
 8004614:	4618      	mov	r0, r3
 8004616:	3708      	adds	r7, #8
 8004618:	46bd      	mov	sp, r7
 800461a:	bd80      	pop	{r7, pc}
 800461c:	58024400 	.word	0x58024400
 8004620:	0801affc 	.word	0x0801affc
 8004624:	24000014 	.word	0x24000014
 8004628:	24000010 	.word	0x24000010

0800462c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800462c:	b580      	push	{r7, lr}
 800462e:	b082      	sub	sp, #8
 8004630:	af00      	add	r7, sp, #0
 8004632:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8004634:	4b15      	ldr	r3, [pc, #84]	; (800468c <HAL_InitTick+0x60>)
 8004636:	781b      	ldrb	r3, [r3, #0]
 8004638:	2b00      	cmp	r3, #0
 800463a:	d101      	bne.n	8004640 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 800463c:	2301      	movs	r3, #1
 800463e:	e021      	b.n	8004684 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8004640:	4b13      	ldr	r3, [pc, #76]	; (8004690 <HAL_InitTick+0x64>)
 8004642:	681a      	ldr	r2, [r3, #0]
 8004644:	4b11      	ldr	r3, [pc, #68]	; (800468c <HAL_InitTick+0x60>)
 8004646:	781b      	ldrb	r3, [r3, #0]
 8004648:	4619      	mov	r1, r3
 800464a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800464e:	fbb3 f3f1 	udiv	r3, r3, r1
 8004652:	fbb2 f3f3 	udiv	r3, r2, r3
 8004656:	4618      	mov	r0, r3
 8004658:	f000 f96f 	bl	800493a <HAL_SYSTICK_Config>
 800465c:	4603      	mov	r3, r0
 800465e:	2b00      	cmp	r3, #0
 8004660:	d001      	beq.n	8004666 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8004662:	2301      	movs	r3, #1
 8004664:	e00e      	b.n	8004684 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	2b0f      	cmp	r3, #15
 800466a:	d80a      	bhi.n	8004682 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800466c:	2200      	movs	r2, #0
 800466e:	6879      	ldr	r1, [r7, #4]
 8004670:	f04f 30ff 	mov.w	r0, #4294967295
 8004674:	f000 f939 	bl	80048ea <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8004678:	4a06      	ldr	r2, [pc, #24]	; (8004694 <HAL_InitTick+0x68>)
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800467e:	2300      	movs	r3, #0
 8004680:	e000      	b.n	8004684 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8004682:	2301      	movs	r3, #1
}
 8004684:	4618      	mov	r0, r3
 8004686:	3708      	adds	r7, #8
 8004688:	46bd      	mov	sp, r7
 800468a:	bd80      	pop	{r7, pc}
 800468c:	2400001c 	.word	0x2400001c
 8004690:	24000010 	.word	0x24000010
 8004694:	24000018 	.word	0x24000018

08004698 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004698:	b480      	push	{r7}
 800469a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800469c:	4b06      	ldr	r3, [pc, #24]	; (80046b8 <HAL_IncTick+0x20>)
 800469e:	781b      	ldrb	r3, [r3, #0]
 80046a0:	461a      	mov	r2, r3
 80046a2:	4b06      	ldr	r3, [pc, #24]	; (80046bc <HAL_IncTick+0x24>)
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	4413      	add	r3, r2
 80046a8:	4a04      	ldr	r2, [pc, #16]	; (80046bc <HAL_IncTick+0x24>)
 80046aa:	6013      	str	r3, [r2, #0]
}
 80046ac:	bf00      	nop
 80046ae:	46bd      	mov	sp, r7
 80046b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046b4:	4770      	bx	lr
 80046b6:	bf00      	nop
 80046b8:	2400001c 	.word	0x2400001c
 80046bc:	24001768 	.word	0x24001768

080046c0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80046c0:	b480      	push	{r7}
 80046c2:	af00      	add	r7, sp, #0
  return uwTick;
 80046c4:	4b03      	ldr	r3, [pc, #12]	; (80046d4 <HAL_GetTick+0x14>)
 80046c6:	681b      	ldr	r3, [r3, #0]
}
 80046c8:	4618      	mov	r0, r3
 80046ca:	46bd      	mov	sp, r7
 80046cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046d0:	4770      	bx	lr
 80046d2:	bf00      	nop
 80046d4:	24001768 	.word	0x24001768

080046d8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80046d8:	b580      	push	{r7, lr}
 80046da:	b084      	sub	sp, #16
 80046dc:	af00      	add	r7, sp, #0
 80046de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80046e0:	f7ff ffee 	bl	80046c0 <HAL_GetTick>
 80046e4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80046ea:	68fb      	ldr	r3, [r7, #12]
 80046ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80046f0:	d005      	beq.n	80046fe <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80046f2:	4b09      	ldr	r3, [pc, #36]	; (8004718 <HAL_Delay+0x40>)
 80046f4:	781b      	ldrb	r3, [r3, #0]
 80046f6:	461a      	mov	r2, r3
 80046f8:	68fb      	ldr	r3, [r7, #12]
 80046fa:	4413      	add	r3, r2
 80046fc:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80046fe:	bf00      	nop
 8004700:	f7ff ffde 	bl	80046c0 <HAL_GetTick>
 8004704:	4602      	mov	r2, r0
 8004706:	68bb      	ldr	r3, [r7, #8]
 8004708:	1ad3      	subs	r3, r2, r3
 800470a:	68fa      	ldr	r2, [r7, #12]
 800470c:	429a      	cmp	r2, r3
 800470e:	d8f7      	bhi.n	8004700 <HAL_Delay+0x28>
  {
  }
}
 8004710:	bf00      	nop
 8004712:	3710      	adds	r7, #16
 8004714:	46bd      	mov	sp, r7
 8004716:	bd80      	pop	{r7, pc}
 8004718:	2400001c 	.word	0x2400001c

0800471c <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 800471c:	b480      	push	{r7}
 800471e:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8004720:	4b03      	ldr	r3, [pc, #12]	; (8004730 <HAL_GetREVID+0x14>)
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	0c1b      	lsrs	r3, r3, #16
}
 8004726:	4618      	mov	r0, r3
 8004728:	46bd      	mov	sp, r7
 800472a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800472e:	4770      	bx	lr
 8004730:	5c001000 	.word	0x5c001000

08004734 <__NVIC_SetPriorityGrouping>:
{
 8004734:	b480      	push	{r7}
 8004736:	b085      	sub	sp, #20
 8004738:	af00      	add	r7, sp, #0
 800473a:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	f003 0307 	and.w	r3, r3, #7
 8004742:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004744:	4b0b      	ldr	r3, [pc, #44]	; (8004774 <__NVIC_SetPriorityGrouping+0x40>)
 8004746:	68db      	ldr	r3, [r3, #12]
 8004748:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800474a:	68ba      	ldr	r2, [r7, #8]
 800474c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8004750:	4013      	ands	r3, r2
 8004752:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004754:	68fb      	ldr	r3, [r7, #12]
 8004756:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004758:	68bb      	ldr	r3, [r7, #8]
 800475a:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 800475c:	4b06      	ldr	r3, [pc, #24]	; (8004778 <__NVIC_SetPriorityGrouping+0x44>)
 800475e:	4313      	orrs	r3, r2
 8004760:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004762:	4a04      	ldr	r2, [pc, #16]	; (8004774 <__NVIC_SetPriorityGrouping+0x40>)
 8004764:	68bb      	ldr	r3, [r7, #8]
 8004766:	60d3      	str	r3, [r2, #12]
}
 8004768:	bf00      	nop
 800476a:	3714      	adds	r7, #20
 800476c:	46bd      	mov	sp, r7
 800476e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004772:	4770      	bx	lr
 8004774:	e000ed00 	.word	0xe000ed00
 8004778:	05fa0000 	.word	0x05fa0000

0800477c <__NVIC_GetPriorityGrouping>:
{
 800477c:	b480      	push	{r7}
 800477e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004780:	4b04      	ldr	r3, [pc, #16]	; (8004794 <__NVIC_GetPriorityGrouping+0x18>)
 8004782:	68db      	ldr	r3, [r3, #12]
 8004784:	0a1b      	lsrs	r3, r3, #8
 8004786:	f003 0307 	and.w	r3, r3, #7
}
 800478a:	4618      	mov	r0, r3
 800478c:	46bd      	mov	sp, r7
 800478e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004792:	4770      	bx	lr
 8004794:	e000ed00 	.word	0xe000ed00

08004798 <__NVIC_EnableIRQ>:
{
 8004798:	b480      	push	{r7}
 800479a:	b083      	sub	sp, #12
 800479c:	af00      	add	r7, sp, #0
 800479e:	4603      	mov	r3, r0
 80047a0:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80047a2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80047a6:	2b00      	cmp	r3, #0
 80047a8:	db0b      	blt.n	80047c2 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80047aa:	88fb      	ldrh	r3, [r7, #6]
 80047ac:	f003 021f 	and.w	r2, r3, #31
 80047b0:	4907      	ldr	r1, [pc, #28]	; (80047d0 <__NVIC_EnableIRQ+0x38>)
 80047b2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80047b6:	095b      	lsrs	r3, r3, #5
 80047b8:	2001      	movs	r0, #1
 80047ba:	fa00 f202 	lsl.w	r2, r0, r2
 80047be:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80047c2:	bf00      	nop
 80047c4:	370c      	adds	r7, #12
 80047c6:	46bd      	mov	sp, r7
 80047c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047cc:	4770      	bx	lr
 80047ce:	bf00      	nop
 80047d0:	e000e100 	.word	0xe000e100

080047d4 <__NVIC_SetPriority>:
{
 80047d4:	b480      	push	{r7}
 80047d6:	b083      	sub	sp, #12
 80047d8:	af00      	add	r7, sp, #0
 80047da:	4603      	mov	r3, r0
 80047dc:	6039      	str	r1, [r7, #0]
 80047de:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80047e0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80047e4:	2b00      	cmp	r3, #0
 80047e6:	db0a      	blt.n	80047fe <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80047e8:	683b      	ldr	r3, [r7, #0]
 80047ea:	b2da      	uxtb	r2, r3
 80047ec:	490c      	ldr	r1, [pc, #48]	; (8004820 <__NVIC_SetPriority+0x4c>)
 80047ee:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80047f2:	0112      	lsls	r2, r2, #4
 80047f4:	b2d2      	uxtb	r2, r2
 80047f6:	440b      	add	r3, r1
 80047f8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80047fc:	e00a      	b.n	8004814 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80047fe:	683b      	ldr	r3, [r7, #0]
 8004800:	b2da      	uxtb	r2, r3
 8004802:	4908      	ldr	r1, [pc, #32]	; (8004824 <__NVIC_SetPriority+0x50>)
 8004804:	88fb      	ldrh	r3, [r7, #6]
 8004806:	f003 030f 	and.w	r3, r3, #15
 800480a:	3b04      	subs	r3, #4
 800480c:	0112      	lsls	r2, r2, #4
 800480e:	b2d2      	uxtb	r2, r2
 8004810:	440b      	add	r3, r1
 8004812:	761a      	strb	r2, [r3, #24]
}
 8004814:	bf00      	nop
 8004816:	370c      	adds	r7, #12
 8004818:	46bd      	mov	sp, r7
 800481a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800481e:	4770      	bx	lr
 8004820:	e000e100 	.word	0xe000e100
 8004824:	e000ed00 	.word	0xe000ed00

08004828 <NVIC_EncodePriority>:
{
 8004828:	b480      	push	{r7}
 800482a:	b089      	sub	sp, #36	; 0x24
 800482c:	af00      	add	r7, sp, #0
 800482e:	60f8      	str	r0, [r7, #12]
 8004830:	60b9      	str	r1, [r7, #8]
 8004832:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004834:	68fb      	ldr	r3, [r7, #12]
 8004836:	f003 0307 	and.w	r3, r3, #7
 800483a:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800483c:	69fb      	ldr	r3, [r7, #28]
 800483e:	f1c3 0307 	rsb	r3, r3, #7
 8004842:	2b04      	cmp	r3, #4
 8004844:	bf28      	it	cs
 8004846:	2304      	movcs	r3, #4
 8004848:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800484a:	69fb      	ldr	r3, [r7, #28]
 800484c:	3304      	adds	r3, #4
 800484e:	2b06      	cmp	r3, #6
 8004850:	d902      	bls.n	8004858 <NVIC_EncodePriority+0x30>
 8004852:	69fb      	ldr	r3, [r7, #28]
 8004854:	3b03      	subs	r3, #3
 8004856:	e000      	b.n	800485a <NVIC_EncodePriority+0x32>
 8004858:	2300      	movs	r3, #0
 800485a:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800485c:	f04f 32ff 	mov.w	r2, #4294967295
 8004860:	69bb      	ldr	r3, [r7, #24]
 8004862:	fa02 f303 	lsl.w	r3, r2, r3
 8004866:	43da      	mvns	r2, r3
 8004868:	68bb      	ldr	r3, [r7, #8]
 800486a:	401a      	ands	r2, r3
 800486c:	697b      	ldr	r3, [r7, #20]
 800486e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004870:	f04f 31ff 	mov.w	r1, #4294967295
 8004874:	697b      	ldr	r3, [r7, #20]
 8004876:	fa01 f303 	lsl.w	r3, r1, r3
 800487a:	43d9      	mvns	r1, r3
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004880:	4313      	orrs	r3, r2
}
 8004882:	4618      	mov	r0, r3
 8004884:	3724      	adds	r7, #36	; 0x24
 8004886:	46bd      	mov	sp, r7
 8004888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800488c:	4770      	bx	lr
	...

08004890 <SysTick_Config>:
{
 8004890:	b580      	push	{r7, lr}
 8004892:	b082      	sub	sp, #8
 8004894:	af00      	add	r7, sp, #0
 8004896:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	3b01      	subs	r3, #1
 800489c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80048a0:	d301      	bcc.n	80048a6 <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 80048a2:	2301      	movs	r3, #1
 80048a4:	e00f      	b.n	80048c6 <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80048a6:	4a0a      	ldr	r2, [pc, #40]	; (80048d0 <SysTick_Config+0x40>)
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	3b01      	subs	r3, #1
 80048ac:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80048ae:	210f      	movs	r1, #15
 80048b0:	f04f 30ff 	mov.w	r0, #4294967295
 80048b4:	f7ff ff8e 	bl	80047d4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80048b8:	4b05      	ldr	r3, [pc, #20]	; (80048d0 <SysTick_Config+0x40>)
 80048ba:	2200      	movs	r2, #0
 80048bc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80048be:	4b04      	ldr	r3, [pc, #16]	; (80048d0 <SysTick_Config+0x40>)
 80048c0:	2207      	movs	r2, #7
 80048c2:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 80048c4:	2300      	movs	r3, #0
}
 80048c6:	4618      	mov	r0, r3
 80048c8:	3708      	adds	r7, #8
 80048ca:	46bd      	mov	sp, r7
 80048cc:	bd80      	pop	{r7, pc}
 80048ce:	bf00      	nop
 80048d0:	e000e010 	.word	0xe000e010

080048d4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80048d4:	b580      	push	{r7, lr}
 80048d6:	b082      	sub	sp, #8
 80048d8:	af00      	add	r7, sp, #0
 80048da:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80048dc:	6878      	ldr	r0, [r7, #4]
 80048de:	f7ff ff29 	bl	8004734 <__NVIC_SetPriorityGrouping>
}
 80048e2:	bf00      	nop
 80048e4:	3708      	adds	r7, #8
 80048e6:	46bd      	mov	sp, r7
 80048e8:	bd80      	pop	{r7, pc}

080048ea <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80048ea:	b580      	push	{r7, lr}
 80048ec:	b086      	sub	sp, #24
 80048ee:	af00      	add	r7, sp, #0
 80048f0:	4603      	mov	r3, r0
 80048f2:	60b9      	str	r1, [r7, #8]
 80048f4:	607a      	str	r2, [r7, #4]
 80048f6:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80048f8:	f7ff ff40 	bl	800477c <__NVIC_GetPriorityGrouping>
 80048fc:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80048fe:	687a      	ldr	r2, [r7, #4]
 8004900:	68b9      	ldr	r1, [r7, #8]
 8004902:	6978      	ldr	r0, [r7, #20]
 8004904:	f7ff ff90 	bl	8004828 <NVIC_EncodePriority>
 8004908:	4602      	mov	r2, r0
 800490a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800490e:	4611      	mov	r1, r2
 8004910:	4618      	mov	r0, r3
 8004912:	f7ff ff5f 	bl	80047d4 <__NVIC_SetPriority>
}
 8004916:	bf00      	nop
 8004918:	3718      	adds	r7, #24
 800491a:	46bd      	mov	sp, r7
 800491c:	bd80      	pop	{r7, pc}

0800491e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800491e:	b580      	push	{r7, lr}
 8004920:	b082      	sub	sp, #8
 8004922:	af00      	add	r7, sp, #0
 8004924:	4603      	mov	r3, r0
 8004926:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004928:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800492c:	4618      	mov	r0, r3
 800492e:	f7ff ff33 	bl	8004798 <__NVIC_EnableIRQ>
}
 8004932:	bf00      	nop
 8004934:	3708      	adds	r7, #8
 8004936:	46bd      	mov	sp, r7
 8004938:	bd80      	pop	{r7, pc}

0800493a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800493a:	b580      	push	{r7, lr}
 800493c:	b082      	sub	sp, #8
 800493e:	af00      	add	r7, sp, #0
 8004940:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8004942:	6878      	ldr	r0, [r7, #4]
 8004944:	f7ff ffa4 	bl	8004890 <SysTick_Config>
 8004948:	4603      	mov	r3, r0
}
 800494a:	4618      	mov	r0, r3
 800494c:	3708      	adds	r7, #8
 800494e:	46bd      	mov	sp, r7
 8004950:	bd80      	pop	{r7, pc}
	...

08004954 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8004954:	b580      	push	{r7, lr}
 8004956:	b086      	sub	sp, #24
 8004958:	af00      	add	r7, sp, #0
 800495a:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 800495c:	f7ff feb0 	bl	80046c0 <HAL_GetTick>
 8004960:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	2b00      	cmp	r3, #0
 8004966:	d101      	bne.n	800496c <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 8004968:	2301      	movs	r3, #1
 800496a:	e316      	b.n	8004f9a <HAL_DMA_Init+0x646>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	4a66      	ldr	r2, [pc, #408]	; (8004b0c <HAL_DMA_Init+0x1b8>)
 8004972:	4293      	cmp	r3, r2
 8004974:	d04a      	beq.n	8004a0c <HAL_DMA_Init+0xb8>
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	4a65      	ldr	r2, [pc, #404]	; (8004b10 <HAL_DMA_Init+0x1bc>)
 800497c:	4293      	cmp	r3, r2
 800497e:	d045      	beq.n	8004a0c <HAL_DMA_Init+0xb8>
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	4a63      	ldr	r2, [pc, #396]	; (8004b14 <HAL_DMA_Init+0x1c0>)
 8004986:	4293      	cmp	r3, r2
 8004988:	d040      	beq.n	8004a0c <HAL_DMA_Init+0xb8>
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	4a62      	ldr	r2, [pc, #392]	; (8004b18 <HAL_DMA_Init+0x1c4>)
 8004990:	4293      	cmp	r3, r2
 8004992:	d03b      	beq.n	8004a0c <HAL_DMA_Init+0xb8>
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	4a60      	ldr	r2, [pc, #384]	; (8004b1c <HAL_DMA_Init+0x1c8>)
 800499a:	4293      	cmp	r3, r2
 800499c:	d036      	beq.n	8004a0c <HAL_DMA_Init+0xb8>
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	4a5f      	ldr	r2, [pc, #380]	; (8004b20 <HAL_DMA_Init+0x1cc>)
 80049a4:	4293      	cmp	r3, r2
 80049a6:	d031      	beq.n	8004a0c <HAL_DMA_Init+0xb8>
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	4a5d      	ldr	r2, [pc, #372]	; (8004b24 <HAL_DMA_Init+0x1d0>)
 80049ae:	4293      	cmp	r3, r2
 80049b0:	d02c      	beq.n	8004a0c <HAL_DMA_Init+0xb8>
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	4a5c      	ldr	r2, [pc, #368]	; (8004b28 <HAL_DMA_Init+0x1d4>)
 80049b8:	4293      	cmp	r3, r2
 80049ba:	d027      	beq.n	8004a0c <HAL_DMA_Init+0xb8>
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	4a5a      	ldr	r2, [pc, #360]	; (8004b2c <HAL_DMA_Init+0x1d8>)
 80049c2:	4293      	cmp	r3, r2
 80049c4:	d022      	beq.n	8004a0c <HAL_DMA_Init+0xb8>
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	4a59      	ldr	r2, [pc, #356]	; (8004b30 <HAL_DMA_Init+0x1dc>)
 80049cc:	4293      	cmp	r3, r2
 80049ce:	d01d      	beq.n	8004a0c <HAL_DMA_Init+0xb8>
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	4a57      	ldr	r2, [pc, #348]	; (8004b34 <HAL_DMA_Init+0x1e0>)
 80049d6:	4293      	cmp	r3, r2
 80049d8:	d018      	beq.n	8004a0c <HAL_DMA_Init+0xb8>
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	4a56      	ldr	r2, [pc, #344]	; (8004b38 <HAL_DMA_Init+0x1e4>)
 80049e0:	4293      	cmp	r3, r2
 80049e2:	d013      	beq.n	8004a0c <HAL_DMA_Init+0xb8>
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	4a54      	ldr	r2, [pc, #336]	; (8004b3c <HAL_DMA_Init+0x1e8>)
 80049ea:	4293      	cmp	r3, r2
 80049ec:	d00e      	beq.n	8004a0c <HAL_DMA_Init+0xb8>
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	4a53      	ldr	r2, [pc, #332]	; (8004b40 <HAL_DMA_Init+0x1ec>)
 80049f4:	4293      	cmp	r3, r2
 80049f6:	d009      	beq.n	8004a0c <HAL_DMA_Init+0xb8>
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	4a51      	ldr	r2, [pc, #324]	; (8004b44 <HAL_DMA_Init+0x1f0>)
 80049fe:	4293      	cmp	r3, r2
 8004a00:	d004      	beq.n	8004a0c <HAL_DMA_Init+0xb8>
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	4a50      	ldr	r2, [pc, #320]	; (8004b48 <HAL_DMA_Init+0x1f4>)
 8004a08:	4293      	cmp	r3, r2
 8004a0a:	d101      	bne.n	8004a10 <HAL_DMA_Init+0xbc>
 8004a0c:	2301      	movs	r3, #1
 8004a0e:	e000      	b.n	8004a12 <HAL_DMA_Init+0xbe>
 8004a10:	2300      	movs	r3, #0
 8004a12:	2b00      	cmp	r3, #0
 8004a14:	f000 813b 	beq.w	8004c8e <HAL_DMA_Init+0x33a>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	2200      	movs	r2, #0
 8004a1c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	2202      	movs	r2, #2
 8004a24:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	4a37      	ldr	r2, [pc, #220]	; (8004b0c <HAL_DMA_Init+0x1b8>)
 8004a2e:	4293      	cmp	r3, r2
 8004a30:	d04a      	beq.n	8004ac8 <HAL_DMA_Init+0x174>
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	4a36      	ldr	r2, [pc, #216]	; (8004b10 <HAL_DMA_Init+0x1bc>)
 8004a38:	4293      	cmp	r3, r2
 8004a3a:	d045      	beq.n	8004ac8 <HAL_DMA_Init+0x174>
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	4a34      	ldr	r2, [pc, #208]	; (8004b14 <HAL_DMA_Init+0x1c0>)
 8004a42:	4293      	cmp	r3, r2
 8004a44:	d040      	beq.n	8004ac8 <HAL_DMA_Init+0x174>
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	4a33      	ldr	r2, [pc, #204]	; (8004b18 <HAL_DMA_Init+0x1c4>)
 8004a4c:	4293      	cmp	r3, r2
 8004a4e:	d03b      	beq.n	8004ac8 <HAL_DMA_Init+0x174>
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	4a31      	ldr	r2, [pc, #196]	; (8004b1c <HAL_DMA_Init+0x1c8>)
 8004a56:	4293      	cmp	r3, r2
 8004a58:	d036      	beq.n	8004ac8 <HAL_DMA_Init+0x174>
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	4a30      	ldr	r2, [pc, #192]	; (8004b20 <HAL_DMA_Init+0x1cc>)
 8004a60:	4293      	cmp	r3, r2
 8004a62:	d031      	beq.n	8004ac8 <HAL_DMA_Init+0x174>
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	4a2e      	ldr	r2, [pc, #184]	; (8004b24 <HAL_DMA_Init+0x1d0>)
 8004a6a:	4293      	cmp	r3, r2
 8004a6c:	d02c      	beq.n	8004ac8 <HAL_DMA_Init+0x174>
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	4a2d      	ldr	r2, [pc, #180]	; (8004b28 <HAL_DMA_Init+0x1d4>)
 8004a74:	4293      	cmp	r3, r2
 8004a76:	d027      	beq.n	8004ac8 <HAL_DMA_Init+0x174>
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	4a2b      	ldr	r2, [pc, #172]	; (8004b2c <HAL_DMA_Init+0x1d8>)
 8004a7e:	4293      	cmp	r3, r2
 8004a80:	d022      	beq.n	8004ac8 <HAL_DMA_Init+0x174>
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	4a2a      	ldr	r2, [pc, #168]	; (8004b30 <HAL_DMA_Init+0x1dc>)
 8004a88:	4293      	cmp	r3, r2
 8004a8a:	d01d      	beq.n	8004ac8 <HAL_DMA_Init+0x174>
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	4a28      	ldr	r2, [pc, #160]	; (8004b34 <HAL_DMA_Init+0x1e0>)
 8004a92:	4293      	cmp	r3, r2
 8004a94:	d018      	beq.n	8004ac8 <HAL_DMA_Init+0x174>
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	4a27      	ldr	r2, [pc, #156]	; (8004b38 <HAL_DMA_Init+0x1e4>)
 8004a9c:	4293      	cmp	r3, r2
 8004a9e:	d013      	beq.n	8004ac8 <HAL_DMA_Init+0x174>
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	4a25      	ldr	r2, [pc, #148]	; (8004b3c <HAL_DMA_Init+0x1e8>)
 8004aa6:	4293      	cmp	r3, r2
 8004aa8:	d00e      	beq.n	8004ac8 <HAL_DMA_Init+0x174>
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	4a24      	ldr	r2, [pc, #144]	; (8004b40 <HAL_DMA_Init+0x1ec>)
 8004ab0:	4293      	cmp	r3, r2
 8004ab2:	d009      	beq.n	8004ac8 <HAL_DMA_Init+0x174>
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	4a22      	ldr	r2, [pc, #136]	; (8004b44 <HAL_DMA_Init+0x1f0>)
 8004aba:	4293      	cmp	r3, r2
 8004abc:	d004      	beq.n	8004ac8 <HAL_DMA_Init+0x174>
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	4a21      	ldr	r2, [pc, #132]	; (8004b48 <HAL_DMA_Init+0x1f4>)
 8004ac4:	4293      	cmp	r3, r2
 8004ac6:	d108      	bne.n	8004ada <HAL_DMA_Init+0x186>
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	681a      	ldr	r2, [r3, #0]
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	f022 0201 	bic.w	r2, r2, #1
 8004ad6:	601a      	str	r2, [r3, #0]
 8004ad8:	e007      	b.n	8004aea <HAL_DMA_Init+0x196>
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	681a      	ldr	r2, [r3, #0]
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	f022 0201 	bic.w	r2, r2, #1
 8004ae8:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8004aea:	e02f      	b.n	8004b4c <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8004aec:	f7ff fde8 	bl	80046c0 <HAL_GetTick>
 8004af0:	4602      	mov	r2, r0
 8004af2:	693b      	ldr	r3, [r7, #16]
 8004af4:	1ad3      	subs	r3, r2, r3
 8004af6:	2b05      	cmp	r3, #5
 8004af8:	d928      	bls.n	8004b4c <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	2220      	movs	r2, #32
 8004afe:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	2203      	movs	r2, #3
 8004b04:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 8004b08:	2301      	movs	r3, #1
 8004b0a:	e246      	b.n	8004f9a <HAL_DMA_Init+0x646>
 8004b0c:	40020010 	.word	0x40020010
 8004b10:	40020028 	.word	0x40020028
 8004b14:	40020040 	.word	0x40020040
 8004b18:	40020058 	.word	0x40020058
 8004b1c:	40020070 	.word	0x40020070
 8004b20:	40020088 	.word	0x40020088
 8004b24:	400200a0 	.word	0x400200a0
 8004b28:	400200b8 	.word	0x400200b8
 8004b2c:	40020410 	.word	0x40020410
 8004b30:	40020428 	.word	0x40020428
 8004b34:	40020440 	.word	0x40020440
 8004b38:	40020458 	.word	0x40020458
 8004b3c:	40020470 	.word	0x40020470
 8004b40:	40020488 	.word	0x40020488
 8004b44:	400204a0 	.word	0x400204a0
 8004b48:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	f003 0301 	and.w	r3, r3, #1
 8004b56:	2b00      	cmp	r3, #0
 8004b58:	d1c8      	bne.n	8004aec <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8004b62:	697a      	ldr	r2, [r7, #20]
 8004b64:	4b83      	ldr	r3, [pc, #524]	; (8004d74 <HAL_DMA_Init+0x420>)
 8004b66:	4013      	ands	r3, r2
 8004b68:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 8004b72:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	691b      	ldr	r3, [r3, #16]
 8004b78:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004b7e:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	699b      	ldr	r3, [r3, #24]
 8004b84:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004b8a:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	6a1b      	ldr	r3, [r3, #32]
 8004b90:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 8004b92:	697a      	ldr	r2, [r7, #20]
 8004b94:	4313      	orrs	r3, r2
 8004b96:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b9c:	2b04      	cmp	r3, #4
 8004b9e:	d107      	bne.n	8004bb0 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ba8:	4313      	orrs	r3, r2
 8004baa:	697a      	ldr	r2, [r7, #20]
 8004bac:	4313      	orrs	r3, r2
 8004bae:	617b      	str	r3, [r7, #20]
    }

    /* Work around for Errata 2.22: UART/USART- DMA transfer lock: DMA stream could be
                                    lock when transfering data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 8004bb0:	4b71      	ldr	r3, [pc, #452]	; (8004d78 <HAL_DMA_Init+0x424>)
 8004bb2:	681a      	ldr	r2, [r3, #0]
 8004bb4:	4b71      	ldr	r3, [pc, #452]	; (8004d7c <HAL_DMA_Init+0x428>)
 8004bb6:	4013      	ands	r3, r2
 8004bb8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004bbc:	d328      	bcc.n	8004c10 <HAL_DMA_Init+0x2bc>
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	685b      	ldr	r3, [r3, #4]
 8004bc2:	2b28      	cmp	r3, #40	; 0x28
 8004bc4:	d903      	bls.n	8004bce <HAL_DMA_Init+0x27a>
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	685b      	ldr	r3, [r3, #4]
 8004bca:	2b2e      	cmp	r3, #46	; 0x2e
 8004bcc:	d917      	bls.n	8004bfe <HAL_DMA_Init+0x2aa>
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	685b      	ldr	r3, [r3, #4]
 8004bd2:	2b3e      	cmp	r3, #62	; 0x3e
 8004bd4:	d903      	bls.n	8004bde <HAL_DMA_Init+0x28a>
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	685b      	ldr	r3, [r3, #4]
 8004bda:	2b42      	cmp	r3, #66	; 0x42
 8004bdc:	d90f      	bls.n	8004bfe <HAL_DMA_Init+0x2aa>
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	685b      	ldr	r3, [r3, #4]
 8004be2:	2b46      	cmp	r3, #70	; 0x46
 8004be4:	d903      	bls.n	8004bee <HAL_DMA_Init+0x29a>
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	685b      	ldr	r3, [r3, #4]
 8004bea:	2b48      	cmp	r3, #72	; 0x48
 8004bec:	d907      	bls.n	8004bfe <HAL_DMA_Init+0x2aa>
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	685b      	ldr	r3, [r3, #4]
 8004bf2:	2b4e      	cmp	r3, #78	; 0x4e
 8004bf4:	d905      	bls.n	8004c02 <HAL_DMA_Init+0x2ae>
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	685b      	ldr	r3, [r3, #4]
 8004bfa:	2b52      	cmp	r3, #82	; 0x52
 8004bfc:	d801      	bhi.n	8004c02 <HAL_DMA_Init+0x2ae>
 8004bfe:	2301      	movs	r3, #1
 8004c00:	e000      	b.n	8004c04 <HAL_DMA_Init+0x2b0>
 8004c02:	2300      	movs	r3, #0
 8004c04:	2b00      	cmp	r3, #0
 8004c06:	d003      	beq.n	8004c10 <HAL_DMA_Init+0x2bc>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 8004c08:	697b      	ldr	r3, [r7, #20]
 8004c0a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004c0e:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	697a      	ldr	r2, [r7, #20]
 8004c16:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	695b      	ldr	r3, [r3, #20]
 8004c1e:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8004c20:	697b      	ldr	r3, [r7, #20]
 8004c22:	f023 0307 	bic.w	r3, r3, #7
 8004c26:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c2c:	697a      	ldr	r2, [r7, #20]
 8004c2e:	4313      	orrs	r3, r2
 8004c30:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c36:	2b04      	cmp	r3, #4
 8004c38:	d117      	bne.n	8004c6a <HAL_DMA_Init+0x316>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c3e:	697a      	ldr	r2, [r7, #20]
 8004c40:	4313      	orrs	r3, r2
 8004c42:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c48:	2b00      	cmp	r3, #0
 8004c4a:	d00e      	beq.n	8004c6a <HAL_DMA_Init+0x316>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8004c4c:	6878      	ldr	r0, [r7, #4]
 8004c4e:	f001 fdcf 	bl	80067f0 <DMA_CheckFifoParam>
 8004c52:	4603      	mov	r3, r0
 8004c54:	2b00      	cmp	r3, #0
 8004c56:	d008      	beq.n	8004c6a <HAL_DMA_Init+0x316>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	2240      	movs	r2, #64	; 0x40
 8004c5c:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	2201      	movs	r2, #1
 8004c62:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          return HAL_ERROR;
 8004c66:	2301      	movs	r3, #1
 8004c68:	e197      	b.n	8004f9a <HAL_DMA_Init+0x646>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	697a      	ldr	r2, [r7, #20]
 8004c70:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8004c72:	6878      	ldr	r0, [r7, #4]
 8004c74:	f001 fd0a 	bl	800668c <DMA_CalcBaseAndBitshift>
 8004c78:	4603      	mov	r3, r0
 8004c7a:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004c80:	f003 031f 	and.w	r3, r3, #31
 8004c84:	223f      	movs	r2, #63	; 0x3f
 8004c86:	409a      	lsls	r2, r3
 8004c88:	68bb      	ldr	r3, [r7, #8]
 8004c8a:	609a      	str	r2, [r3, #8]
 8004c8c:	e0cd      	b.n	8004e2a <HAL_DMA_Init+0x4d6>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	4a3b      	ldr	r2, [pc, #236]	; (8004d80 <HAL_DMA_Init+0x42c>)
 8004c94:	4293      	cmp	r3, r2
 8004c96:	d022      	beq.n	8004cde <HAL_DMA_Init+0x38a>
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	4a39      	ldr	r2, [pc, #228]	; (8004d84 <HAL_DMA_Init+0x430>)
 8004c9e:	4293      	cmp	r3, r2
 8004ca0:	d01d      	beq.n	8004cde <HAL_DMA_Init+0x38a>
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	4a38      	ldr	r2, [pc, #224]	; (8004d88 <HAL_DMA_Init+0x434>)
 8004ca8:	4293      	cmp	r3, r2
 8004caa:	d018      	beq.n	8004cde <HAL_DMA_Init+0x38a>
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	4a36      	ldr	r2, [pc, #216]	; (8004d8c <HAL_DMA_Init+0x438>)
 8004cb2:	4293      	cmp	r3, r2
 8004cb4:	d013      	beq.n	8004cde <HAL_DMA_Init+0x38a>
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	4a35      	ldr	r2, [pc, #212]	; (8004d90 <HAL_DMA_Init+0x43c>)
 8004cbc:	4293      	cmp	r3, r2
 8004cbe:	d00e      	beq.n	8004cde <HAL_DMA_Init+0x38a>
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	4a33      	ldr	r2, [pc, #204]	; (8004d94 <HAL_DMA_Init+0x440>)
 8004cc6:	4293      	cmp	r3, r2
 8004cc8:	d009      	beq.n	8004cde <HAL_DMA_Init+0x38a>
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	4a32      	ldr	r2, [pc, #200]	; (8004d98 <HAL_DMA_Init+0x444>)
 8004cd0:	4293      	cmp	r3, r2
 8004cd2:	d004      	beq.n	8004cde <HAL_DMA_Init+0x38a>
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	4a30      	ldr	r2, [pc, #192]	; (8004d9c <HAL_DMA_Init+0x448>)
 8004cda:	4293      	cmp	r3, r2
 8004cdc:	d101      	bne.n	8004ce2 <HAL_DMA_Init+0x38e>
 8004cde:	2301      	movs	r3, #1
 8004ce0:	e000      	b.n	8004ce4 <HAL_DMA_Init+0x390>
 8004ce2:	2300      	movs	r3, #0
 8004ce4:	2b00      	cmp	r3, #0
 8004ce6:	f000 8097 	beq.w	8004e18 <HAL_DMA_Init+0x4c4>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	4a24      	ldr	r2, [pc, #144]	; (8004d80 <HAL_DMA_Init+0x42c>)
 8004cf0:	4293      	cmp	r3, r2
 8004cf2:	d021      	beq.n	8004d38 <HAL_DMA_Init+0x3e4>
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	4a22      	ldr	r2, [pc, #136]	; (8004d84 <HAL_DMA_Init+0x430>)
 8004cfa:	4293      	cmp	r3, r2
 8004cfc:	d01c      	beq.n	8004d38 <HAL_DMA_Init+0x3e4>
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	4a21      	ldr	r2, [pc, #132]	; (8004d88 <HAL_DMA_Init+0x434>)
 8004d04:	4293      	cmp	r3, r2
 8004d06:	d017      	beq.n	8004d38 <HAL_DMA_Init+0x3e4>
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	4a1f      	ldr	r2, [pc, #124]	; (8004d8c <HAL_DMA_Init+0x438>)
 8004d0e:	4293      	cmp	r3, r2
 8004d10:	d012      	beq.n	8004d38 <HAL_DMA_Init+0x3e4>
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	4a1e      	ldr	r2, [pc, #120]	; (8004d90 <HAL_DMA_Init+0x43c>)
 8004d18:	4293      	cmp	r3, r2
 8004d1a:	d00d      	beq.n	8004d38 <HAL_DMA_Init+0x3e4>
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	4a1c      	ldr	r2, [pc, #112]	; (8004d94 <HAL_DMA_Init+0x440>)
 8004d22:	4293      	cmp	r3, r2
 8004d24:	d008      	beq.n	8004d38 <HAL_DMA_Init+0x3e4>
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	4a1b      	ldr	r2, [pc, #108]	; (8004d98 <HAL_DMA_Init+0x444>)
 8004d2c:	4293      	cmp	r3, r2
 8004d2e:	d003      	beq.n	8004d38 <HAL_DMA_Init+0x3e4>
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	4a19      	ldr	r2, [pc, #100]	; (8004d9c <HAL_DMA_Init+0x448>)
 8004d36:	4293      	cmp	r3, r2
 8004d38:	bf00      	nop
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	2200      	movs	r2, #0
 8004d3e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	2202      	movs	r2, #2
 8004d46:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 8004d52:	697a      	ldr	r2, [r7, #20]
 8004d54:	4b12      	ldr	r3, [pc, #72]	; (8004da0 <HAL_DMA_Init+0x44c>)
 8004d56:	4013      	ands	r3, r2
 8004d58:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	689b      	ldr	r3, [r3, #8]
 8004d5e:	2b40      	cmp	r3, #64	; 0x40
 8004d60:	d020      	beq.n	8004da4 <HAL_DMA_Init+0x450>
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	689b      	ldr	r3, [r3, #8]
 8004d66:	2b80      	cmp	r3, #128	; 0x80
 8004d68:	d102      	bne.n	8004d70 <HAL_DMA_Init+0x41c>
 8004d6a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8004d6e:	e01a      	b.n	8004da6 <HAL_DMA_Init+0x452>
 8004d70:	2300      	movs	r3, #0
 8004d72:	e018      	b.n	8004da6 <HAL_DMA_Init+0x452>
 8004d74:	fe10803f 	.word	0xfe10803f
 8004d78:	5c001000 	.word	0x5c001000
 8004d7c:	ffff0000 	.word	0xffff0000
 8004d80:	58025408 	.word	0x58025408
 8004d84:	5802541c 	.word	0x5802541c
 8004d88:	58025430 	.word	0x58025430
 8004d8c:	58025444 	.word	0x58025444
 8004d90:	58025458 	.word	0x58025458
 8004d94:	5802546c 	.word	0x5802546c
 8004d98:	58025480 	.word	0x58025480
 8004d9c:	58025494 	.word	0x58025494
 8004da0:	fffe000f 	.word	0xfffe000f
 8004da4:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8004da6:	687a      	ldr	r2, [r7, #4]
 8004da8:	68d2      	ldr	r2, [r2, #12]
 8004daa:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8004dac:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	691b      	ldr	r3, [r3, #16]
 8004db2:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8004db4:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	695b      	ldr	r3, [r3, #20]
 8004dba:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8004dbc:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	699b      	ldr	r3, [r3, #24]
 8004dc2:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8004dc4:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	69db      	ldr	r3, [r3, #28]
 8004dca:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8004dcc:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	6a1b      	ldr	r3, [r3, #32]
 8004dd2:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8004dd4:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8004dd6:	697a      	ldr	r2, [r7, #20]
 8004dd8:	4313      	orrs	r3, r2
 8004dda:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	697a      	ldr	r2, [r7, #20]
 8004de2:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	461a      	mov	r2, r3
 8004dea:	4b6e      	ldr	r3, [pc, #440]	; (8004fa4 <HAL_DMA_Init+0x650>)
 8004dec:	4413      	add	r3, r2
 8004dee:	4a6e      	ldr	r2, [pc, #440]	; (8004fa8 <HAL_DMA_Init+0x654>)
 8004df0:	fba2 2303 	umull	r2, r3, r2, r3
 8004df4:	091b      	lsrs	r3, r3, #4
 8004df6:	009a      	lsls	r2, r3, #2
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8004dfc:	6878      	ldr	r0, [r7, #4]
 8004dfe:	f001 fc45 	bl	800668c <DMA_CalcBaseAndBitshift>
 8004e02:	4603      	mov	r3, r0
 8004e04:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004e0a:	f003 031f 	and.w	r3, r3, #31
 8004e0e:	2201      	movs	r2, #1
 8004e10:	409a      	lsls	r2, r3
 8004e12:	68fb      	ldr	r3, [r7, #12]
 8004e14:	605a      	str	r2, [r3, #4]
 8004e16:	e008      	b.n	8004e2a <HAL_DMA_Init+0x4d6>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	2240      	movs	r2, #64	; 0x40
 8004e1c:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	2203      	movs	r2, #3
 8004e22:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    return HAL_ERROR;
 8004e26:	2301      	movs	r3, #1
 8004e28:	e0b7      	b.n	8004f9a <HAL_DMA_Init+0x646>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	4a5f      	ldr	r2, [pc, #380]	; (8004fac <HAL_DMA_Init+0x658>)
 8004e30:	4293      	cmp	r3, r2
 8004e32:	d072      	beq.n	8004f1a <HAL_DMA_Init+0x5c6>
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	4a5d      	ldr	r2, [pc, #372]	; (8004fb0 <HAL_DMA_Init+0x65c>)
 8004e3a:	4293      	cmp	r3, r2
 8004e3c:	d06d      	beq.n	8004f1a <HAL_DMA_Init+0x5c6>
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	4a5c      	ldr	r2, [pc, #368]	; (8004fb4 <HAL_DMA_Init+0x660>)
 8004e44:	4293      	cmp	r3, r2
 8004e46:	d068      	beq.n	8004f1a <HAL_DMA_Init+0x5c6>
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	4a5a      	ldr	r2, [pc, #360]	; (8004fb8 <HAL_DMA_Init+0x664>)
 8004e4e:	4293      	cmp	r3, r2
 8004e50:	d063      	beq.n	8004f1a <HAL_DMA_Init+0x5c6>
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	4a59      	ldr	r2, [pc, #356]	; (8004fbc <HAL_DMA_Init+0x668>)
 8004e58:	4293      	cmp	r3, r2
 8004e5a:	d05e      	beq.n	8004f1a <HAL_DMA_Init+0x5c6>
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	4a57      	ldr	r2, [pc, #348]	; (8004fc0 <HAL_DMA_Init+0x66c>)
 8004e62:	4293      	cmp	r3, r2
 8004e64:	d059      	beq.n	8004f1a <HAL_DMA_Init+0x5c6>
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	4a56      	ldr	r2, [pc, #344]	; (8004fc4 <HAL_DMA_Init+0x670>)
 8004e6c:	4293      	cmp	r3, r2
 8004e6e:	d054      	beq.n	8004f1a <HAL_DMA_Init+0x5c6>
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	4a54      	ldr	r2, [pc, #336]	; (8004fc8 <HAL_DMA_Init+0x674>)
 8004e76:	4293      	cmp	r3, r2
 8004e78:	d04f      	beq.n	8004f1a <HAL_DMA_Init+0x5c6>
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	4a53      	ldr	r2, [pc, #332]	; (8004fcc <HAL_DMA_Init+0x678>)
 8004e80:	4293      	cmp	r3, r2
 8004e82:	d04a      	beq.n	8004f1a <HAL_DMA_Init+0x5c6>
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	4a51      	ldr	r2, [pc, #324]	; (8004fd0 <HAL_DMA_Init+0x67c>)
 8004e8a:	4293      	cmp	r3, r2
 8004e8c:	d045      	beq.n	8004f1a <HAL_DMA_Init+0x5c6>
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	4a50      	ldr	r2, [pc, #320]	; (8004fd4 <HAL_DMA_Init+0x680>)
 8004e94:	4293      	cmp	r3, r2
 8004e96:	d040      	beq.n	8004f1a <HAL_DMA_Init+0x5c6>
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	4a4e      	ldr	r2, [pc, #312]	; (8004fd8 <HAL_DMA_Init+0x684>)
 8004e9e:	4293      	cmp	r3, r2
 8004ea0:	d03b      	beq.n	8004f1a <HAL_DMA_Init+0x5c6>
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	4a4d      	ldr	r2, [pc, #308]	; (8004fdc <HAL_DMA_Init+0x688>)
 8004ea8:	4293      	cmp	r3, r2
 8004eaa:	d036      	beq.n	8004f1a <HAL_DMA_Init+0x5c6>
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	4a4b      	ldr	r2, [pc, #300]	; (8004fe0 <HAL_DMA_Init+0x68c>)
 8004eb2:	4293      	cmp	r3, r2
 8004eb4:	d031      	beq.n	8004f1a <HAL_DMA_Init+0x5c6>
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	681b      	ldr	r3, [r3, #0]
 8004eba:	4a4a      	ldr	r2, [pc, #296]	; (8004fe4 <HAL_DMA_Init+0x690>)
 8004ebc:	4293      	cmp	r3, r2
 8004ebe:	d02c      	beq.n	8004f1a <HAL_DMA_Init+0x5c6>
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	4a48      	ldr	r2, [pc, #288]	; (8004fe8 <HAL_DMA_Init+0x694>)
 8004ec6:	4293      	cmp	r3, r2
 8004ec8:	d027      	beq.n	8004f1a <HAL_DMA_Init+0x5c6>
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	4a47      	ldr	r2, [pc, #284]	; (8004fec <HAL_DMA_Init+0x698>)
 8004ed0:	4293      	cmp	r3, r2
 8004ed2:	d022      	beq.n	8004f1a <HAL_DMA_Init+0x5c6>
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	4a45      	ldr	r2, [pc, #276]	; (8004ff0 <HAL_DMA_Init+0x69c>)
 8004eda:	4293      	cmp	r3, r2
 8004edc:	d01d      	beq.n	8004f1a <HAL_DMA_Init+0x5c6>
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	4a44      	ldr	r2, [pc, #272]	; (8004ff4 <HAL_DMA_Init+0x6a0>)
 8004ee4:	4293      	cmp	r3, r2
 8004ee6:	d018      	beq.n	8004f1a <HAL_DMA_Init+0x5c6>
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	4a42      	ldr	r2, [pc, #264]	; (8004ff8 <HAL_DMA_Init+0x6a4>)
 8004eee:	4293      	cmp	r3, r2
 8004ef0:	d013      	beq.n	8004f1a <HAL_DMA_Init+0x5c6>
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	4a41      	ldr	r2, [pc, #260]	; (8004ffc <HAL_DMA_Init+0x6a8>)
 8004ef8:	4293      	cmp	r3, r2
 8004efa:	d00e      	beq.n	8004f1a <HAL_DMA_Init+0x5c6>
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	4a3f      	ldr	r2, [pc, #252]	; (8005000 <HAL_DMA_Init+0x6ac>)
 8004f02:	4293      	cmp	r3, r2
 8004f04:	d009      	beq.n	8004f1a <HAL_DMA_Init+0x5c6>
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	4a3e      	ldr	r2, [pc, #248]	; (8005004 <HAL_DMA_Init+0x6b0>)
 8004f0c:	4293      	cmp	r3, r2
 8004f0e:	d004      	beq.n	8004f1a <HAL_DMA_Init+0x5c6>
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	4a3c      	ldr	r2, [pc, #240]	; (8005008 <HAL_DMA_Init+0x6b4>)
 8004f16:	4293      	cmp	r3, r2
 8004f18:	d101      	bne.n	8004f1e <HAL_DMA_Init+0x5ca>
 8004f1a:	2301      	movs	r3, #1
 8004f1c:	e000      	b.n	8004f20 <HAL_DMA_Init+0x5cc>
 8004f1e:	2300      	movs	r3, #0
 8004f20:	2b00      	cmp	r3, #0
 8004f22:	d032      	beq.n	8004f8a <HAL_DMA_Init+0x636>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8004f24:	6878      	ldr	r0, [r7, #4]
 8004f26:	f001 fcdf 	bl	80068e8 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	689b      	ldr	r3, [r3, #8]
 8004f2e:	2b80      	cmp	r3, #128	; 0x80
 8004f30:	d102      	bne.n	8004f38 <HAL_DMA_Init+0x5e4>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	2200      	movs	r2, #0
 8004f36:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	685a      	ldr	r2, [r3, #4]
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004f40:	b2d2      	uxtb	r2, r2
 8004f42:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004f48:	687a      	ldr	r2, [r7, #4]
 8004f4a:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8004f4c:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	685b      	ldr	r3, [r3, #4]
 8004f52:	2b00      	cmp	r3, #0
 8004f54:	d010      	beq.n	8004f78 <HAL_DMA_Init+0x624>
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	685b      	ldr	r3, [r3, #4]
 8004f5a:	2b08      	cmp	r3, #8
 8004f5c:	d80c      	bhi.n	8004f78 <HAL_DMA_Init+0x624>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8004f5e:	6878      	ldr	r0, [r7, #4]
 8004f60:	f001 fd5c 	bl	8006a1c <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004f68:	2200      	movs	r2, #0
 8004f6a:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004f70:	687a      	ldr	r2, [r7, #4]
 8004f72:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8004f74:	605a      	str	r2, [r3, #4]
 8004f76:	e008      	b.n	8004f8a <HAL_DMA_Init+0x636>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	2200      	movs	r2, #0
 8004f7c:	66da      	str	r2, [r3, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	2200      	movs	r2, #0
 8004f82:	671a      	str	r2, [r3, #112]	; 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	2200      	movs	r2, #0
 8004f88:	675a      	str	r2, [r3, #116]	; 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	2200      	movs	r2, #0
 8004f8e:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	2201      	movs	r2, #1
 8004f94:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8004f98:	2300      	movs	r3, #0
}
 8004f9a:	4618      	mov	r0, r3
 8004f9c:	3718      	adds	r7, #24
 8004f9e:	46bd      	mov	sp, r7
 8004fa0:	bd80      	pop	{r7, pc}
 8004fa2:	bf00      	nop
 8004fa4:	a7fdabf8 	.word	0xa7fdabf8
 8004fa8:	cccccccd 	.word	0xcccccccd
 8004fac:	40020010 	.word	0x40020010
 8004fb0:	40020028 	.word	0x40020028
 8004fb4:	40020040 	.word	0x40020040
 8004fb8:	40020058 	.word	0x40020058
 8004fbc:	40020070 	.word	0x40020070
 8004fc0:	40020088 	.word	0x40020088
 8004fc4:	400200a0 	.word	0x400200a0
 8004fc8:	400200b8 	.word	0x400200b8
 8004fcc:	40020410 	.word	0x40020410
 8004fd0:	40020428 	.word	0x40020428
 8004fd4:	40020440 	.word	0x40020440
 8004fd8:	40020458 	.word	0x40020458
 8004fdc:	40020470 	.word	0x40020470
 8004fe0:	40020488 	.word	0x40020488
 8004fe4:	400204a0 	.word	0x400204a0
 8004fe8:	400204b8 	.word	0x400204b8
 8004fec:	58025408 	.word	0x58025408
 8004ff0:	5802541c 	.word	0x5802541c
 8004ff4:	58025430 	.word	0x58025430
 8004ff8:	58025444 	.word	0x58025444
 8004ffc:	58025458 	.word	0x58025458
 8005000:	5802546c 	.word	0x5802546c
 8005004:	58025480 	.word	0x58025480
 8005008:	58025494 	.word	0x58025494

0800500c <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800500c:	b580      	push	{r7, lr}
 800500e:	b086      	sub	sp, #24
 8005010:	af00      	add	r7, sp, #0
 8005012:	60f8      	str	r0, [r7, #12]
 8005014:	60b9      	str	r1, [r7, #8]
 8005016:	607a      	str	r2, [r7, #4]
 8005018:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800501a:	2300      	movs	r3, #0
 800501c:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 800501e:	68fb      	ldr	r3, [r7, #12]
 8005020:	2b00      	cmp	r3, #0
 8005022:	d101      	bne.n	8005028 <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 8005024:	2301      	movs	r3, #1
 8005026:	e226      	b.n	8005476 <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 8005028:	68fb      	ldr	r3, [r7, #12]
 800502a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800502e:	2b01      	cmp	r3, #1
 8005030:	d101      	bne.n	8005036 <HAL_DMA_Start_IT+0x2a>
 8005032:	2302      	movs	r3, #2
 8005034:	e21f      	b.n	8005476 <HAL_DMA_Start_IT+0x46a>
 8005036:	68fb      	ldr	r3, [r7, #12]
 8005038:	2201      	movs	r2, #1
 800503a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 800503e:	68fb      	ldr	r3, [r7, #12]
 8005040:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005044:	b2db      	uxtb	r3, r3
 8005046:	2b01      	cmp	r3, #1
 8005048:	f040 820a 	bne.w	8005460 <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800504c:	68fb      	ldr	r3, [r7, #12]
 800504e:	2202      	movs	r2, #2
 8005050:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005054:	68fb      	ldr	r3, [r7, #12]
 8005056:	2200      	movs	r2, #0
 8005058:	655a      	str	r2, [r3, #84]	; 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800505a:	68fb      	ldr	r3, [r7, #12]
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	4a68      	ldr	r2, [pc, #416]	; (8005200 <HAL_DMA_Start_IT+0x1f4>)
 8005060:	4293      	cmp	r3, r2
 8005062:	d04a      	beq.n	80050fa <HAL_DMA_Start_IT+0xee>
 8005064:	68fb      	ldr	r3, [r7, #12]
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	4a66      	ldr	r2, [pc, #408]	; (8005204 <HAL_DMA_Start_IT+0x1f8>)
 800506a:	4293      	cmp	r3, r2
 800506c:	d045      	beq.n	80050fa <HAL_DMA_Start_IT+0xee>
 800506e:	68fb      	ldr	r3, [r7, #12]
 8005070:	681b      	ldr	r3, [r3, #0]
 8005072:	4a65      	ldr	r2, [pc, #404]	; (8005208 <HAL_DMA_Start_IT+0x1fc>)
 8005074:	4293      	cmp	r3, r2
 8005076:	d040      	beq.n	80050fa <HAL_DMA_Start_IT+0xee>
 8005078:	68fb      	ldr	r3, [r7, #12]
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	4a63      	ldr	r2, [pc, #396]	; (800520c <HAL_DMA_Start_IT+0x200>)
 800507e:	4293      	cmp	r3, r2
 8005080:	d03b      	beq.n	80050fa <HAL_DMA_Start_IT+0xee>
 8005082:	68fb      	ldr	r3, [r7, #12]
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	4a62      	ldr	r2, [pc, #392]	; (8005210 <HAL_DMA_Start_IT+0x204>)
 8005088:	4293      	cmp	r3, r2
 800508a:	d036      	beq.n	80050fa <HAL_DMA_Start_IT+0xee>
 800508c:	68fb      	ldr	r3, [r7, #12]
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	4a60      	ldr	r2, [pc, #384]	; (8005214 <HAL_DMA_Start_IT+0x208>)
 8005092:	4293      	cmp	r3, r2
 8005094:	d031      	beq.n	80050fa <HAL_DMA_Start_IT+0xee>
 8005096:	68fb      	ldr	r3, [r7, #12]
 8005098:	681b      	ldr	r3, [r3, #0]
 800509a:	4a5f      	ldr	r2, [pc, #380]	; (8005218 <HAL_DMA_Start_IT+0x20c>)
 800509c:	4293      	cmp	r3, r2
 800509e:	d02c      	beq.n	80050fa <HAL_DMA_Start_IT+0xee>
 80050a0:	68fb      	ldr	r3, [r7, #12]
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	4a5d      	ldr	r2, [pc, #372]	; (800521c <HAL_DMA_Start_IT+0x210>)
 80050a6:	4293      	cmp	r3, r2
 80050a8:	d027      	beq.n	80050fa <HAL_DMA_Start_IT+0xee>
 80050aa:	68fb      	ldr	r3, [r7, #12]
 80050ac:	681b      	ldr	r3, [r3, #0]
 80050ae:	4a5c      	ldr	r2, [pc, #368]	; (8005220 <HAL_DMA_Start_IT+0x214>)
 80050b0:	4293      	cmp	r3, r2
 80050b2:	d022      	beq.n	80050fa <HAL_DMA_Start_IT+0xee>
 80050b4:	68fb      	ldr	r3, [r7, #12]
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	4a5a      	ldr	r2, [pc, #360]	; (8005224 <HAL_DMA_Start_IT+0x218>)
 80050ba:	4293      	cmp	r3, r2
 80050bc:	d01d      	beq.n	80050fa <HAL_DMA_Start_IT+0xee>
 80050be:	68fb      	ldr	r3, [r7, #12]
 80050c0:	681b      	ldr	r3, [r3, #0]
 80050c2:	4a59      	ldr	r2, [pc, #356]	; (8005228 <HAL_DMA_Start_IT+0x21c>)
 80050c4:	4293      	cmp	r3, r2
 80050c6:	d018      	beq.n	80050fa <HAL_DMA_Start_IT+0xee>
 80050c8:	68fb      	ldr	r3, [r7, #12]
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	4a57      	ldr	r2, [pc, #348]	; (800522c <HAL_DMA_Start_IT+0x220>)
 80050ce:	4293      	cmp	r3, r2
 80050d0:	d013      	beq.n	80050fa <HAL_DMA_Start_IT+0xee>
 80050d2:	68fb      	ldr	r3, [r7, #12]
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	4a56      	ldr	r2, [pc, #344]	; (8005230 <HAL_DMA_Start_IT+0x224>)
 80050d8:	4293      	cmp	r3, r2
 80050da:	d00e      	beq.n	80050fa <HAL_DMA_Start_IT+0xee>
 80050dc:	68fb      	ldr	r3, [r7, #12]
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	4a54      	ldr	r2, [pc, #336]	; (8005234 <HAL_DMA_Start_IT+0x228>)
 80050e2:	4293      	cmp	r3, r2
 80050e4:	d009      	beq.n	80050fa <HAL_DMA_Start_IT+0xee>
 80050e6:	68fb      	ldr	r3, [r7, #12]
 80050e8:	681b      	ldr	r3, [r3, #0]
 80050ea:	4a53      	ldr	r2, [pc, #332]	; (8005238 <HAL_DMA_Start_IT+0x22c>)
 80050ec:	4293      	cmp	r3, r2
 80050ee:	d004      	beq.n	80050fa <HAL_DMA_Start_IT+0xee>
 80050f0:	68fb      	ldr	r3, [r7, #12]
 80050f2:	681b      	ldr	r3, [r3, #0]
 80050f4:	4a51      	ldr	r2, [pc, #324]	; (800523c <HAL_DMA_Start_IT+0x230>)
 80050f6:	4293      	cmp	r3, r2
 80050f8:	d108      	bne.n	800510c <HAL_DMA_Start_IT+0x100>
 80050fa:	68fb      	ldr	r3, [r7, #12]
 80050fc:	681b      	ldr	r3, [r3, #0]
 80050fe:	681a      	ldr	r2, [r3, #0]
 8005100:	68fb      	ldr	r3, [r7, #12]
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	f022 0201 	bic.w	r2, r2, #1
 8005108:	601a      	str	r2, [r3, #0]
 800510a:	e007      	b.n	800511c <HAL_DMA_Start_IT+0x110>
 800510c:	68fb      	ldr	r3, [r7, #12]
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	681a      	ldr	r2, [r3, #0]
 8005112:	68fb      	ldr	r3, [r7, #12]
 8005114:	681b      	ldr	r3, [r3, #0]
 8005116:	f022 0201 	bic.w	r2, r2, #1
 800511a:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800511c:	683b      	ldr	r3, [r7, #0]
 800511e:	687a      	ldr	r2, [r7, #4]
 8005120:	68b9      	ldr	r1, [r7, #8]
 8005122:	68f8      	ldr	r0, [r7, #12]
 8005124:	f001 f906 	bl	8006334 <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8005128:	68fb      	ldr	r3, [r7, #12]
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	4a34      	ldr	r2, [pc, #208]	; (8005200 <HAL_DMA_Start_IT+0x1f4>)
 800512e:	4293      	cmp	r3, r2
 8005130:	d04a      	beq.n	80051c8 <HAL_DMA_Start_IT+0x1bc>
 8005132:	68fb      	ldr	r3, [r7, #12]
 8005134:	681b      	ldr	r3, [r3, #0]
 8005136:	4a33      	ldr	r2, [pc, #204]	; (8005204 <HAL_DMA_Start_IT+0x1f8>)
 8005138:	4293      	cmp	r3, r2
 800513a:	d045      	beq.n	80051c8 <HAL_DMA_Start_IT+0x1bc>
 800513c:	68fb      	ldr	r3, [r7, #12]
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	4a31      	ldr	r2, [pc, #196]	; (8005208 <HAL_DMA_Start_IT+0x1fc>)
 8005142:	4293      	cmp	r3, r2
 8005144:	d040      	beq.n	80051c8 <HAL_DMA_Start_IT+0x1bc>
 8005146:	68fb      	ldr	r3, [r7, #12]
 8005148:	681b      	ldr	r3, [r3, #0]
 800514a:	4a30      	ldr	r2, [pc, #192]	; (800520c <HAL_DMA_Start_IT+0x200>)
 800514c:	4293      	cmp	r3, r2
 800514e:	d03b      	beq.n	80051c8 <HAL_DMA_Start_IT+0x1bc>
 8005150:	68fb      	ldr	r3, [r7, #12]
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	4a2e      	ldr	r2, [pc, #184]	; (8005210 <HAL_DMA_Start_IT+0x204>)
 8005156:	4293      	cmp	r3, r2
 8005158:	d036      	beq.n	80051c8 <HAL_DMA_Start_IT+0x1bc>
 800515a:	68fb      	ldr	r3, [r7, #12]
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	4a2d      	ldr	r2, [pc, #180]	; (8005214 <HAL_DMA_Start_IT+0x208>)
 8005160:	4293      	cmp	r3, r2
 8005162:	d031      	beq.n	80051c8 <HAL_DMA_Start_IT+0x1bc>
 8005164:	68fb      	ldr	r3, [r7, #12]
 8005166:	681b      	ldr	r3, [r3, #0]
 8005168:	4a2b      	ldr	r2, [pc, #172]	; (8005218 <HAL_DMA_Start_IT+0x20c>)
 800516a:	4293      	cmp	r3, r2
 800516c:	d02c      	beq.n	80051c8 <HAL_DMA_Start_IT+0x1bc>
 800516e:	68fb      	ldr	r3, [r7, #12]
 8005170:	681b      	ldr	r3, [r3, #0]
 8005172:	4a2a      	ldr	r2, [pc, #168]	; (800521c <HAL_DMA_Start_IT+0x210>)
 8005174:	4293      	cmp	r3, r2
 8005176:	d027      	beq.n	80051c8 <HAL_DMA_Start_IT+0x1bc>
 8005178:	68fb      	ldr	r3, [r7, #12]
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	4a28      	ldr	r2, [pc, #160]	; (8005220 <HAL_DMA_Start_IT+0x214>)
 800517e:	4293      	cmp	r3, r2
 8005180:	d022      	beq.n	80051c8 <HAL_DMA_Start_IT+0x1bc>
 8005182:	68fb      	ldr	r3, [r7, #12]
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	4a27      	ldr	r2, [pc, #156]	; (8005224 <HAL_DMA_Start_IT+0x218>)
 8005188:	4293      	cmp	r3, r2
 800518a:	d01d      	beq.n	80051c8 <HAL_DMA_Start_IT+0x1bc>
 800518c:	68fb      	ldr	r3, [r7, #12]
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	4a25      	ldr	r2, [pc, #148]	; (8005228 <HAL_DMA_Start_IT+0x21c>)
 8005192:	4293      	cmp	r3, r2
 8005194:	d018      	beq.n	80051c8 <HAL_DMA_Start_IT+0x1bc>
 8005196:	68fb      	ldr	r3, [r7, #12]
 8005198:	681b      	ldr	r3, [r3, #0]
 800519a:	4a24      	ldr	r2, [pc, #144]	; (800522c <HAL_DMA_Start_IT+0x220>)
 800519c:	4293      	cmp	r3, r2
 800519e:	d013      	beq.n	80051c8 <HAL_DMA_Start_IT+0x1bc>
 80051a0:	68fb      	ldr	r3, [r7, #12]
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	4a22      	ldr	r2, [pc, #136]	; (8005230 <HAL_DMA_Start_IT+0x224>)
 80051a6:	4293      	cmp	r3, r2
 80051a8:	d00e      	beq.n	80051c8 <HAL_DMA_Start_IT+0x1bc>
 80051aa:	68fb      	ldr	r3, [r7, #12]
 80051ac:	681b      	ldr	r3, [r3, #0]
 80051ae:	4a21      	ldr	r2, [pc, #132]	; (8005234 <HAL_DMA_Start_IT+0x228>)
 80051b0:	4293      	cmp	r3, r2
 80051b2:	d009      	beq.n	80051c8 <HAL_DMA_Start_IT+0x1bc>
 80051b4:	68fb      	ldr	r3, [r7, #12]
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	4a1f      	ldr	r2, [pc, #124]	; (8005238 <HAL_DMA_Start_IT+0x22c>)
 80051ba:	4293      	cmp	r3, r2
 80051bc:	d004      	beq.n	80051c8 <HAL_DMA_Start_IT+0x1bc>
 80051be:	68fb      	ldr	r3, [r7, #12]
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	4a1e      	ldr	r2, [pc, #120]	; (800523c <HAL_DMA_Start_IT+0x230>)
 80051c4:	4293      	cmp	r3, r2
 80051c6:	d101      	bne.n	80051cc <HAL_DMA_Start_IT+0x1c0>
 80051c8:	2301      	movs	r3, #1
 80051ca:	e000      	b.n	80051ce <HAL_DMA_Start_IT+0x1c2>
 80051cc:	2300      	movs	r3, #0
 80051ce:	2b00      	cmp	r3, #0
 80051d0:	d036      	beq.n	8005240 <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 80051d2:	68fb      	ldr	r3, [r7, #12]
 80051d4:	681b      	ldr	r3, [r3, #0]
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	f023 021e 	bic.w	r2, r3, #30
 80051dc:	68fb      	ldr	r3, [r7, #12]
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	f042 0216 	orr.w	r2, r2, #22
 80051e4:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 80051e6:	68fb      	ldr	r3, [r7, #12]
 80051e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051ea:	2b00      	cmp	r3, #0
 80051ec:	d03e      	beq.n	800526c <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 80051ee:	68fb      	ldr	r3, [r7, #12]
 80051f0:	681b      	ldr	r3, [r3, #0]
 80051f2:	681a      	ldr	r2, [r3, #0]
 80051f4:	68fb      	ldr	r3, [r7, #12]
 80051f6:	681b      	ldr	r3, [r3, #0]
 80051f8:	f042 0208 	orr.w	r2, r2, #8
 80051fc:	601a      	str	r2, [r3, #0]
 80051fe:	e035      	b.n	800526c <HAL_DMA_Start_IT+0x260>
 8005200:	40020010 	.word	0x40020010
 8005204:	40020028 	.word	0x40020028
 8005208:	40020040 	.word	0x40020040
 800520c:	40020058 	.word	0x40020058
 8005210:	40020070 	.word	0x40020070
 8005214:	40020088 	.word	0x40020088
 8005218:	400200a0 	.word	0x400200a0
 800521c:	400200b8 	.word	0x400200b8
 8005220:	40020410 	.word	0x40020410
 8005224:	40020428 	.word	0x40020428
 8005228:	40020440 	.word	0x40020440
 800522c:	40020458 	.word	0x40020458
 8005230:	40020470 	.word	0x40020470
 8005234:	40020488 	.word	0x40020488
 8005238:	400204a0 	.word	0x400204a0
 800523c:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 8005240:	68fb      	ldr	r3, [r7, #12]
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	f023 020e 	bic.w	r2, r3, #14
 800524a:	68fb      	ldr	r3, [r7, #12]
 800524c:	681b      	ldr	r3, [r3, #0]
 800524e:	f042 020a 	orr.w	r2, r2, #10
 8005252:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8005254:	68fb      	ldr	r3, [r7, #12]
 8005256:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005258:	2b00      	cmp	r3, #0
 800525a:	d007      	beq.n	800526c <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 800525c:	68fb      	ldr	r3, [r7, #12]
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	681a      	ldr	r2, [r3, #0]
 8005262:	68fb      	ldr	r3, [r7, #12]
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	f042 0204 	orr.w	r2, r2, #4
 800526a:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800526c:	68fb      	ldr	r3, [r7, #12]
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	4a83      	ldr	r2, [pc, #524]	; (8005480 <HAL_DMA_Start_IT+0x474>)
 8005272:	4293      	cmp	r3, r2
 8005274:	d072      	beq.n	800535c <HAL_DMA_Start_IT+0x350>
 8005276:	68fb      	ldr	r3, [r7, #12]
 8005278:	681b      	ldr	r3, [r3, #0]
 800527a:	4a82      	ldr	r2, [pc, #520]	; (8005484 <HAL_DMA_Start_IT+0x478>)
 800527c:	4293      	cmp	r3, r2
 800527e:	d06d      	beq.n	800535c <HAL_DMA_Start_IT+0x350>
 8005280:	68fb      	ldr	r3, [r7, #12]
 8005282:	681b      	ldr	r3, [r3, #0]
 8005284:	4a80      	ldr	r2, [pc, #512]	; (8005488 <HAL_DMA_Start_IT+0x47c>)
 8005286:	4293      	cmp	r3, r2
 8005288:	d068      	beq.n	800535c <HAL_DMA_Start_IT+0x350>
 800528a:	68fb      	ldr	r3, [r7, #12]
 800528c:	681b      	ldr	r3, [r3, #0]
 800528e:	4a7f      	ldr	r2, [pc, #508]	; (800548c <HAL_DMA_Start_IT+0x480>)
 8005290:	4293      	cmp	r3, r2
 8005292:	d063      	beq.n	800535c <HAL_DMA_Start_IT+0x350>
 8005294:	68fb      	ldr	r3, [r7, #12]
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	4a7d      	ldr	r2, [pc, #500]	; (8005490 <HAL_DMA_Start_IT+0x484>)
 800529a:	4293      	cmp	r3, r2
 800529c:	d05e      	beq.n	800535c <HAL_DMA_Start_IT+0x350>
 800529e:	68fb      	ldr	r3, [r7, #12]
 80052a0:	681b      	ldr	r3, [r3, #0]
 80052a2:	4a7c      	ldr	r2, [pc, #496]	; (8005494 <HAL_DMA_Start_IT+0x488>)
 80052a4:	4293      	cmp	r3, r2
 80052a6:	d059      	beq.n	800535c <HAL_DMA_Start_IT+0x350>
 80052a8:	68fb      	ldr	r3, [r7, #12]
 80052aa:	681b      	ldr	r3, [r3, #0]
 80052ac:	4a7a      	ldr	r2, [pc, #488]	; (8005498 <HAL_DMA_Start_IT+0x48c>)
 80052ae:	4293      	cmp	r3, r2
 80052b0:	d054      	beq.n	800535c <HAL_DMA_Start_IT+0x350>
 80052b2:	68fb      	ldr	r3, [r7, #12]
 80052b4:	681b      	ldr	r3, [r3, #0]
 80052b6:	4a79      	ldr	r2, [pc, #484]	; (800549c <HAL_DMA_Start_IT+0x490>)
 80052b8:	4293      	cmp	r3, r2
 80052ba:	d04f      	beq.n	800535c <HAL_DMA_Start_IT+0x350>
 80052bc:	68fb      	ldr	r3, [r7, #12]
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	4a77      	ldr	r2, [pc, #476]	; (80054a0 <HAL_DMA_Start_IT+0x494>)
 80052c2:	4293      	cmp	r3, r2
 80052c4:	d04a      	beq.n	800535c <HAL_DMA_Start_IT+0x350>
 80052c6:	68fb      	ldr	r3, [r7, #12]
 80052c8:	681b      	ldr	r3, [r3, #0]
 80052ca:	4a76      	ldr	r2, [pc, #472]	; (80054a4 <HAL_DMA_Start_IT+0x498>)
 80052cc:	4293      	cmp	r3, r2
 80052ce:	d045      	beq.n	800535c <HAL_DMA_Start_IT+0x350>
 80052d0:	68fb      	ldr	r3, [r7, #12]
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	4a74      	ldr	r2, [pc, #464]	; (80054a8 <HAL_DMA_Start_IT+0x49c>)
 80052d6:	4293      	cmp	r3, r2
 80052d8:	d040      	beq.n	800535c <HAL_DMA_Start_IT+0x350>
 80052da:	68fb      	ldr	r3, [r7, #12]
 80052dc:	681b      	ldr	r3, [r3, #0]
 80052de:	4a73      	ldr	r2, [pc, #460]	; (80054ac <HAL_DMA_Start_IT+0x4a0>)
 80052e0:	4293      	cmp	r3, r2
 80052e2:	d03b      	beq.n	800535c <HAL_DMA_Start_IT+0x350>
 80052e4:	68fb      	ldr	r3, [r7, #12]
 80052e6:	681b      	ldr	r3, [r3, #0]
 80052e8:	4a71      	ldr	r2, [pc, #452]	; (80054b0 <HAL_DMA_Start_IT+0x4a4>)
 80052ea:	4293      	cmp	r3, r2
 80052ec:	d036      	beq.n	800535c <HAL_DMA_Start_IT+0x350>
 80052ee:	68fb      	ldr	r3, [r7, #12]
 80052f0:	681b      	ldr	r3, [r3, #0]
 80052f2:	4a70      	ldr	r2, [pc, #448]	; (80054b4 <HAL_DMA_Start_IT+0x4a8>)
 80052f4:	4293      	cmp	r3, r2
 80052f6:	d031      	beq.n	800535c <HAL_DMA_Start_IT+0x350>
 80052f8:	68fb      	ldr	r3, [r7, #12]
 80052fa:	681b      	ldr	r3, [r3, #0]
 80052fc:	4a6e      	ldr	r2, [pc, #440]	; (80054b8 <HAL_DMA_Start_IT+0x4ac>)
 80052fe:	4293      	cmp	r3, r2
 8005300:	d02c      	beq.n	800535c <HAL_DMA_Start_IT+0x350>
 8005302:	68fb      	ldr	r3, [r7, #12]
 8005304:	681b      	ldr	r3, [r3, #0]
 8005306:	4a6d      	ldr	r2, [pc, #436]	; (80054bc <HAL_DMA_Start_IT+0x4b0>)
 8005308:	4293      	cmp	r3, r2
 800530a:	d027      	beq.n	800535c <HAL_DMA_Start_IT+0x350>
 800530c:	68fb      	ldr	r3, [r7, #12]
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	4a6b      	ldr	r2, [pc, #428]	; (80054c0 <HAL_DMA_Start_IT+0x4b4>)
 8005312:	4293      	cmp	r3, r2
 8005314:	d022      	beq.n	800535c <HAL_DMA_Start_IT+0x350>
 8005316:	68fb      	ldr	r3, [r7, #12]
 8005318:	681b      	ldr	r3, [r3, #0]
 800531a:	4a6a      	ldr	r2, [pc, #424]	; (80054c4 <HAL_DMA_Start_IT+0x4b8>)
 800531c:	4293      	cmp	r3, r2
 800531e:	d01d      	beq.n	800535c <HAL_DMA_Start_IT+0x350>
 8005320:	68fb      	ldr	r3, [r7, #12]
 8005322:	681b      	ldr	r3, [r3, #0]
 8005324:	4a68      	ldr	r2, [pc, #416]	; (80054c8 <HAL_DMA_Start_IT+0x4bc>)
 8005326:	4293      	cmp	r3, r2
 8005328:	d018      	beq.n	800535c <HAL_DMA_Start_IT+0x350>
 800532a:	68fb      	ldr	r3, [r7, #12]
 800532c:	681b      	ldr	r3, [r3, #0]
 800532e:	4a67      	ldr	r2, [pc, #412]	; (80054cc <HAL_DMA_Start_IT+0x4c0>)
 8005330:	4293      	cmp	r3, r2
 8005332:	d013      	beq.n	800535c <HAL_DMA_Start_IT+0x350>
 8005334:	68fb      	ldr	r3, [r7, #12]
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	4a65      	ldr	r2, [pc, #404]	; (80054d0 <HAL_DMA_Start_IT+0x4c4>)
 800533a:	4293      	cmp	r3, r2
 800533c:	d00e      	beq.n	800535c <HAL_DMA_Start_IT+0x350>
 800533e:	68fb      	ldr	r3, [r7, #12]
 8005340:	681b      	ldr	r3, [r3, #0]
 8005342:	4a64      	ldr	r2, [pc, #400]	; (80054d4 <HAL_DMA_Start_IT+0x4c8>)
 8005344:	4293      	cmp	r3, r2
 8005346:	d009      	beq.n	800535c <HAL_DMA_Start_IT+0x350>
 8005348:	68fb      	ldr	r3, [r7, #12]
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	4a62      	ldr	r2, [pc, #392]	; (80054d8 <HAL_DMA_Start_IT+0x4cc>)
 800534e:	4293      	cmp	r3, r2
 8005350:	d004      	beq.n	800535c <HAL_DMA_Start_IT+0x350>
 8005352:	68fb      	ldr	r3, [r7, #12]
 8005354:	681b      	ldr	r3, [r3, #0]
 8005356:	4a61      	ldr	r2, [pc, #388]	; (80054dc <HAL_DMA_Start_IT+0x4d0>)
 8005358:	4293      	cmp	r3, r2
 800535a:	d101      	bne.n	8005360 <HAL_DMA_Start_IT+0x354>
 800535c:	2301      	movs	r3, #1
 800535e:	e000      	b.n	8005362 <HAL_DMA_Start_IT+0x356>
 8005360:	2300      	movs	r3, #0
 8005362:	2b00      	cmp	r3, #0
 8005364:	d01a      	beq.n	800539c <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8005366:	68fb      	ldr	r3, [r7, #12]
 8005368:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005370:	2b00      	cmp	r3, #0
 8005372:	d007      	beq.n	8005384 <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8005374:	68fb      	ldr	r3, [r7, #12]
 8005376:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005378:	681a      	ldr	r2, [r3, #0]
 800537a:	68fb      	ldr	r3, [r7, #12]
 800537c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800537e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005382:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 8005384:	68fb      	ldr	r3, [r7, #12]
 8005386:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005388:	2b00      	cmp	r3, #0
 800538a:	d007      	beq.n	800539c <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 800538c:	68fb      	ldr	r3, [r7, #12]
 800538e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005390:	681a      	ldr	r2, [r3, #0]
 8005392:	68fb      	ldr	r3, [r7, #12]
 8005394:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005396:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800539a:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800539c:	68fb      	ldr	r3, [r7, #12]
 800539e:	681b      	ldr	r3, [r3, #0]
 80053a0:	4a37      	ldr	r2, [pc, #220]	; (8005480 <HAL_DMA_Start_IT+0x474>)
 80053a2:	4293      	cmp	r3, r2
 80053a4:	d04a      	beq.n	800543c <HAL_DMA_Start_IT+0x430>
 80053a6:	68fb      	ldr	r3, [r7, #12]
 80053a8:	681b      	ldr	r3, [r3, #0]
 80053aa:	4a36      	ldr	r2, [pc, #216]	; (8005484 <HAL_DMA_Start_IT+0x478>)
 80053ac:	4293      	cmp	r3, r2
 80053ae:	d045      	beq.n	800543c <HAL_DMA_Start_IT+0x430>
 80053b0:	68fb      	ldr	r3, [r7, #12]
 80053b2:	681b      	ldr	r3, [r3, #0]
 80053b4:	4a34      	ldr	r2, [pc, #208]	; (8005488 <HAL_DMA_Start_IT+0x47c>)
 80053b6:	4293      	cmp	r3, r2
 80053b8:	d040      	beq.n	800543c <HAL_DMA_Start_IT+0x430>
 80053ba:	68fb      	ldr	r3, [r7, #12]
 80053bc:	681b      	ldr	r3, [r3, #0]
 80053be:	4a33      	ldr	r2, [pc, #204]	; (800548c <HAL_DMA_Start_IT+0x480>)
 80053c0:	4293      	cmp	r3, r2
 80053c2:	d03b      	beq.n	800543c <HAL_DMA_Start_IT+0x430>
 80053c4:	68fb      	ldr	r3, [r7, #12]
 80053c6:	681b      	ldr	r3, [r3, #0]
 80053c8:	4a31      	ldr	r2, [pc, #196]	; (8005490 <HAL_DMA_Start_IT+0x484>)
 80053ca:	4293      	cmp	r3, r2
 80053cc:	d036      	beq.n	800543c <HAL_DMA_Start_IT+0x430>
 80053ce:	68fb      	ldr	r3, [r7, #12]
 80053d0:	681b      	ldr	r3, [r3, #0]
 80053d2:	4a30      	ldr	r2, [pc, #192]	; (8005494 <HAL_DMA_Start_IT+0x488>)
 80053d4:	4293      	cmp	r3, r2
 80053d6:	d031      	beq.n	800543c <HAL_DMA_Start_IT+0x430>
 80053d8:	68fb      	ldr	r3, [r7, #12]
 80053da:	681b      	ldr	r3, [r3, #0]
 80053dc:	4a2e      	ldr	r2, [pc, #184]	; (8005498 <HAL_DMA_Start_IT+0x48c>)
 80053de:	4293      	cmp	r3, r2
 80053e0:	d02c      	beq.n	800543c <HAL_DMA_Start_IT+0x430>
 80053e2:	68fb      	ldr	r3, [r7, #12]
 80053e4:	681b      	ldr	r3, [r3, #0]
 80053e6:	4a2d      	ldr	r2, [pc, #180]	; (800549c <HAL_DMA_Start_IT+0x490>)
 80053e8:	4293      	cmp	r3, r2
 80053ea:	d027      	beq.n	800543c <HAL_DMA_Start_IT+0x430>
 80053ec:	68fb      	ldr	r3, [r7, #12]
 80053ee:	681b      	ldr	r3, [r3, #0]
 80053f0:	4a2b      	ldr	r2, [pc, #172]	; (80054a0 <HAL_DMA_Start_IT+0x494>)
 80053f2:	4293      	cmp	r3, r2
 80053f4:	d022      	beq.n	800543c <HAL_DMA_Start_IT+0x430>
 80053f6:	68fb      	ldr	r3, [r7, #12]
 80053f8:	681b      	ldr	r3, [r3, #0]
 80053fa:	4a2a      	ldr	r2, [pc, #168]	; (80054a4 <HAL_DMA_Start_IT+0x498>)
 80053fc:	4293      	cmp	r3, r2
 80053fe:	d01d      	beq.n	800543c <HAL_DMA_Start_IT+0x430>
 8005400:	68fb      	ldr	r3, [r7, #12]
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	4a28      	ldr	r2, [pc, #160]	; (80054a8 <HAL_DMA_Start_IT+0x49c>)
 8005406:	4293      	cmp	r3, r2
 8005408:	d018      	beq.n	800543c <HAL_DMA_Start_IT+0x430>
 800540a:	68fb      	ldr	r3, [r7, #12]
 800540c:	681b      	ldr	r3, [r3, #0]
 800540e:	4a27      	ldr	r2, [pc, #156]	; (80054ac <HAL_DMA_Start_IT+0x4a0>)
 8005410:	4293      	cmp	r3, r2
 8005412:	d013      	beq.n	800543c <HAL_DMA_Start_IT+0x430>
 8005414:	68fb      	ldr	r3, [r7, #12]
 8005416:	681b      	ldr	r3, [r3, #0]
 8005418:	4a25      	ldr	r2, [pc, #148]	; (80054b0 <HAL_DMA_Start_IT+0x4a4>)
 800541a:	4293      	cmp	r3, r2
 800541c:	d00e      	beq.n	800543c <HAL_DMA_Start_IT+0x430>
 800541e:	68fb      	ldr	r3, [r7, #12]
 8005420:	681b      	ldr	r3, [r3, #0]
 8005422:	4a24      	ldr	r2, [pc, #144]	; (80054b4 <HAL_DMA_Start_IT+0x4a8>)
 8005424:	4293      	cmp	r3, r2
 8005426:	d009      	beq.n	800543c <HAL_DMA_Start_IT+0x430>
 8005428:	68fb      	ldr	r3, [r7, #12]
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	4a22      	ldr	r2, [pc, #136]	; (80054b8 <HAL_DMA_Start_IT+0x4ac>)
 800542e:	4293      	cmp	r3, r2
 8005430:	d004      	beq.n	800543c <HAL_DMA_Start_IT+0x430>
 8005432:	68fb      	ldr	r3, [r7, #12]
 8005434:	681b      	ldr	r3, [r3, #0]
 8005436:	4a21      	ldr	r2, [pc, #132]	; (80054bc <HAL_DMA_Start_IT+0x4b0>)
 8005438:	4293      	cmp	r3, r2
 800543a:	d108      	bne.n	800544e <HAL_DMA_Start_IT+0x442>
 800543c:	68fb      	ldr	r3, [r7, #12]
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	681a      	ldr	r2, [r3, #0]
 8005442:	68fb      	ldr	r3, [r7, #12]
 8005444:	681b      	ldr	r3, [r3, #0]
 8005446:	f042 0201 	orr.w	r2, r2, #1
 800544a:	601a      	str	r2, [r3, #0]
 800544c:	e012      	b.n	8005474 <HAL_DMA_Start_IT+0x468>
 800544e:	68fb      	ldr	r3, [r7, #12]
 8005450:	681b      	ldr	r3, [r3, #0]
 8005452:	681a      	ldr	r2, [r3, #0]
 8005454:	68fb      	ldr	r3, [r7, #12]
 8005456:	681b      	ldr	r3, [r3, #0]
 8005458:	f042 0201 	orr.w	r2, r2, #1
 800545c:	601a      	str	r2, [r3, #0]
 800545e:	e009      	b.n	8005474 <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 8005460:	68fb      	ldr	r3, [r7, #12]
 8005462:	2200      	movs	r2, #0
 8005464:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8005468:	68fb      	ldr	r3, [r7, #12]
 800546a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800546e:	655a      	str	r2, [r3, #84]	; 0x54

    /* Return error status */
    status = HAL_ERROR;
 8005470:	2301      	movs	r3, #1
 8005472:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8005474:	7dfb      	ldrb	r3, [r7, #23]
}
 8005476:	4618      	mov	r0, r3
 8005478:	3718      	adds	r7, #24
 800547a:	46bd      	mov	sp, r7
 800547c:	bd80      	pop	{r7, pc}
 800547e:	bf00      	nop
 8005480:	40020010 	.word	0x40020010
 8005484:	40020028 	.word	0x40020028
 8005488:	40020040 	.word	0x40020040
 800548c:	40020058 	.word	0x40020058
 8005490:	40020070 	.word	0x40020070
 8005494:	40020088 	.word	0x40020088
 8005498:	400200a0 	.word	0x400200a0
 800549c:	400200b8 	.word	0x400200b8
 80054a0:	40020410 	.word	0x40020410
 80054a4:	40020428 	.word	0x40020428
 80054a8:	40020440 	.word	0x40020440
 80054ac:	40020458 	.word	0x40020458
 80054b0:	40020470 	.word	0x40020470
 80054b4:	40020488 	.word	0x40020488
 80054b8:	400204a0 	.word	0x400204a0
 80054bc:	400204b8 	.word	0x400204b8
 80054c0:	58025408 	.word	0x58025408
 80054c4:	5802541c 	.word	0x5802541c
 80054c8:	58025430 	.word	0x58025430
 80054cc:	58025444 	.word	0x58025444
 80054d0:	58025458 	.word	0x58025458
 80054d4:	5802546c 	.word	0x5802546c
 80054d8:	58025480 	.word	0x58025480
 80054dc:	58025494 	.word	0x58025494

080054e0 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80054e0:	b580      	push	{r7, lr}
 80054e2:	b08a      	sub	sp, #40	; 0x28
 80054e4:	af00      	add	r7, sp, #0
 80054e6:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 80054e8:	2300      	movs	r3, #0
 80054ea:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 80054ec:	4b67      	ldr	r3, [pc, #412]	; (800568c <HAL_DMA_IRQHandler+0x1ac>)
 80054ee:	681b      	ldr	r3, [r3, #0]
 80054f0:	4a67      	ldr	r2, [pc, #412]	; (8005690 <HAL_DMA_IRQHandler+0x1b0>)
 80054f2:	fba2 2303 	umull	r2, r3, r2, r3
 80054f6:	0a9b      	lsrs	r3, r3, #10
 80054f8:	627b      	str	r3, [r7, #36]	; 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80054fe:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005504:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 8005506:	6a3b      	ldr	r3, [r7, #32]
 8005508:	681b      	ldr	r3, [r3, #0]
 800550a:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 800550c:	69fb      	ldr	r3, [r7, #28]
 800550e:	681b      	ldr	r3, [r3, #0]
 8005510:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	681b      	ldr	r3, [r3, #0]
 8005516:	4a5f      	ldr	r2, [pc, #380]	; (8005694 <HAL_DMA_IRQHandler+0x1b4>)
 8005518:	4293      	cmp	r3, r2
 800551a:	d04a      	beq.n	80055b2 <HAL_DMA_IRQHandler+0xd2>
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	681b      	ldr	r3, [r3, #0]
 8005520:	4a5d      	ldr	r2, [pc, #372]	; (8005698 <HAL_DMA_IRQHandler+0x1b8>)
 8005522:	4293      	cmp	r3, r2
 8005524:	d045      	beq.n	80055b2 <HAL_DMA_IRQHandler+0xd2>
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	681b      	ldr	r3, [r3, #0]
 800552a:	4a5c      	ldr	r2, [pc, #368]	; (800569c <HAL_DMA_IRQHandler+0x1bc>)
 800552c:	4293      	cmp	r3, r2
 800552e:	d040      	beq.n	80055b2 <HAL_DMA_IRQHandler+0xd2>
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	681b      	ldr	r3, [r3, #0]
 8005534:	4a5a      	ldr	r2, [pc, #360]	; (80056a0 <HAL_DMA_IRQHandler+0x1c0>)
 8005536:	4293      	cmp	r3, r2
 8005538:	d03b      	beq.n	80055b2 <HAL_DMA_IRQHandler+0xd2>
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	681b      	ldr	r3, [r3, #0]
 800553e:	4a59      	ldr	r2, [pc, #356]	; (80056a4 <HAL_DMA_IRQHandler+0x1c4>)
 8005540:	4293      	cmp	r3, r2
 8005542:	d036      	beq.n	80055b2 <HAL_DMA_IRQHandler+0xd2>
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	681b      	ldr	r3, [r3, #0]
 8005548:	4a57      	ldr	r2, [pc, #348]	; (80056a8 <HAL_DMA_IRQHandler+0x1c8>)
 800554a:	4293      	cmp	r3, r2
 800554c:	d031      	beq.n	80055b2 <HAL_DMA_IRQHandler+0xd2>
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	681b      	ldr	r3, [r3, #0]
 8005552:	4a56      	ldr	r2, [pc, #344]	; (80056ac <HAL_DMA_IRQHandler+0x1cc>)
 8005554:	4293      	cmp	r3, r2
 8005556:	d02c      	beq.n	80055b2 <HAL_DMA_IRQHandler+0xd2>
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	681b      	ldr	r3, [r3, #0]
 800555c:	4a54      	ldr	r2, [pc, #336]	; (80056b0 <HAL_DMA_IRQHandler+0x1d0>)
 800555e:	4293      	cmp	r3, r2
 8005560:	d027      	beq.n	80055b2 <HAL_DMA_IRQHandler+0xd2>
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	681b      	ldr	r3, [r3, #0]
 8005566:	4a53      	ldr	r2, [pc, #332]	; (80056b4 <HAL_DMA_IRQHandler+0x1d4>)
 8005568:	4293      	cmp	r3, r2
 800556a:	d022      	beq.n	80055b2 <HAL_DMA_IRQHandler+0xd2>
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	4a51      	ldr	r2, [pc, #324]	; (80056b8 <HAL_DMA_IRQHandler+0x1d8>)
 8005572:	4293      	cmp	r3, r2
 8005574:	d01d      	beq.n	80055b2 <HAL_DMA_IRQHandler+0xd2>
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	681b      	ldr	r3, [r3, #0]
 800557a:	4a50      	ldr	r2, [pc, #320]	; (80056bc <HAL_DMA_IRQHandler+0x1dc>)
 800557c:	4293      	cmp	r3, r2
 800557e:	d018      	beq.n	80055b2 <HAL_DMA_IRQHandler+0xd2>
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	681b      	ldr	r3, [r3, #0]
 8005584:	4a4e      	ldr	r2, [pc, #312]	; (80056c0 <HAL_DMA_IRQHandler+0x1e0>)
 8005586:	4293      	cmp	r3, r2
 8005588:	d013      	beq.n	80055b2 <HAL_DMA_IRQHandler+0xd2>
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	681b      	ldr	r3, [r3, #0]
 800558e:	4a4d      	ldr	r2, [pc, #308]	; (80056c4 <HAL_DMA_IRQHandler+0x1e4>)
 8005590:	4293      	cmp	r3, r2
 8005592:	d00e      	beq.n	80055b2 <HAL_DMA_IRQHandler+0xd2>
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	4a4b      	ldr	r2, [pc, #300]	; (80056c8 <HAL_DMA_IRQHandler+0x1e8>)
 800559a:	4293      	cmp	r3, r2
 800559c:	d009      	beq.n	80055b2 <HAL_DMA_IRQHandler+0xd2>
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	681b      	ldr	r3, [r3, #0]
 80055a2:	4a4a      	ldr	r2, [pc, #296]	; (80056cc <HAL_DMA_IRQHandler+0x1ec>)
 80055a4:	4293      	cmp	r3, r2
 80055a6:	d004      	beq.n	80055b2 <HAL_DMA_IRQHandler+0xd2>
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	681b      	ldr	r3, [r3, #0]
 80055ac:	4a48      	ldr	r2, [pc, #288]	; (80056d0 <HAL_DMA_IRQHandler+0x1f0>)
 80055ae:	4293      	cmp	r3, r2
 80055b0:	d101      	bne.n	80055b6 <HAL_DMA_IRQHandler+0xd6>
 80055b2:	2301      	movs	r3, #1
 80055b4:	e000      	b.n	80055b8 <HAL_DMA_IRQHandler+0xd8>
 80055b6:	2300      	movs	r3, #0
 80055b8:	2b00      	cmp	r3, #0
 80055ba:	f000 842b 	beq.w	8005e14 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80055c2:	f003 031f 	and.w	r3, r3, #31
 80055c6:	2208      	movs	r2, #8
 80055c8:	409a      	lsls	r2, r3
 80055ca:	69bb      	ldr	r3, [r7, #24]
 80055cc:	4013      	ands	r3, r2
 80055ce:	2b00      	cmp	r3, #0
 80055d0:	f000 80a2 	beq.w	8005718 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	681b      	ldr	r3, [r3, #0]
 80055d8:	4a2e      	ldr	r2, [pc, #184]	; (8005694 <HAL_DMA_IRQHandler+0x1b4>)
 80055da:	4293      	cmp	r3, r2
 80055dc:	d04a      	beq.n	8005674 <HAL_DMA_IRQHandler+0x194>
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	681b      	ldr	r3, [r3, #0]
 80055e2:	4a2d      	ldr	r2, [pc, #180]	; (8005698 <HAL_DMA_IRQHandler+0x1b8>)
 80055e4:	4293      	cmp	r3, r2
 80055e6:	d045      	beq.n	8005674 <HAL_DMA_IRQHandler+0x194>
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	681b      	ldr	r3, [r3, #0]
 80055ec:	4a2b      	ldr	r2, [pc, #172]	; (800569c <HAL_DMA_IRQHandler+0x1bc>)
 80055ee:	4293      	cmp	r3, r2
 80055f0:	d040      	beq.n	8005674 <HAL_DMA_IRQHandler+0x194>
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	681b      	ldr	r3, [r3, #0]
 80055f6:	4a2a      	ldr	r2, [pc, #168]	; (80056a0 <HAL_DMA_IRQHandler+0x1c0>)
 80055f8:	4293      	cmp	r3, r2
 80055fa:	d03b      	beq.n	8005674 <HAL_DMA_IRQHandler+0x194>
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	681b      	ldr	r3, [r3, #0]
 8005600:	4a28      	ldr	r2, [pc, #160]	; (80056a4 <HAL_DMA_IRQHandler+0x1c4>)
 8005602:	4293      	cmp	r3, r2
 8005604:	d036      	beq.n	8005674 <HAL_DMA_IRQHandler+0x194>
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	681b      	ldr	r3, [r3, #0]
 800560a:	4a27      	ldr	r2, [pc, #156]	; (80056a8 <HAL_DMA_IRQHandler+0x1c8>)
 800560c:	4293      	cmp	r3, r2
 800560e:	d031      	beq.n	8005674 <HAL_DMA_IRQHandler+0x194>
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	681b      	ldr	r3, [r3, #0]
 8005614:	4a25      	ldr	r2, [pc, #148]	; (80056ac <HAL_DMA_IRQHandler+0x1cc>)
 8005616:	4293      	cmp	r3, r2
 8005618:	d02c      	beq.n	8005674 <HAL_DMA_IRQHandler+0x194>
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	681b      	ldr	r3, [r3, #0]
 800561e:	4a24      	ldr	r2, [pc, #144]	; (80056b0 <HAL_DMA_IRQHandler+0x1d0>)
 8005620:	4293      	cmp	r3, r2
 8005622:	d027      	beq.n	8005674 <HAL_DMA_IRQHandler+0x194>
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	681b      	ldr	r3, [r3, #0]
 8005628:	4a22      	ldr	r2, [pc, #136]	; (80056b4 <HAL_DMA_IRQHandler+0x1d4>)
 800562a:	4293      	cmp	r3, r2
 800562c:	d022      	beq.n	8005674 <HAL_DMA_IRQHandler+0x194>
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	681b      	ldr	r3, [r3, #0]
 8005632:	4a21      	ldr	r2, [pc, #132]	; (80056b8 <HAL_DMA_IRQHandler+0x1d8>)
 8005634:	4293      	cmp	r3, r2
 8005636:	d01d      	beq.n	8005674 <HAL_DMA_IRQHandler+0x194>
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	681b      	ldr	r3, [r3, #0]
 800563c:	4a1f      	ldr	r2, [pc, #124]	; (80056bc <HAL_DMA_IRQHandler+0x1dc>)
 800563e:	4293      	cmp	r3, r2
 8005640:	d018      	beq.n	8005674 <HAL_DMA_IRQHandler+0x194>
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	681b      	ldr	r3, [r3, #0]
 8005646:	4a1e      	ldr	r2, [pc, #120]	; (80056c0 <HAL_DMA_IRQHandler+0x1e0>)
 8005648:	4293      	cmp	r3, r2
 800564a:	d013      	beq.n	8005674 <HAL_DMA_IRQHandler+0x194>
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	681b      	ldr	r3, [r3, #0]
 8005650:	4a1c      	ldr	r2, [pc, #112]	; (80056c4 <HAL_DMA_IRQHandler+0x1e4>)
 8005652:	4293      	cmp	r3, r2
 8005654:	d00e      	beq.n	8005674 <HAL_DMA_IRQHandler+0x194>
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	681b      	ldr	r3, [r3, #0]
 800565a:	4a1b      	ldr	r2, [pc, #108]	; (80056c8 <HAL_DMA_IRQHandler+0x1e8>)
 800565c:	4293      	cmp	r3, r2
 800565e:	d009      	beq.n	8005674 <HAL_DMA_IRQHandler+0x194>
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	681b      	ldr	r3, [r3, #0]
 8005664:	4a19      	ldr	r2, [pc, #100]	; (80056cc <HAL_DMA_IRQHandler+0x1ec>)
 8005666:	4293      	cmp	r3, r2
 8005668:	d004      	beq.n	8005674 <HAL_DMA_IRQHandler+0x194>
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	681b      	ldr	r3, [r3, #0]
 800566e:	4a18      	ldr	r2, [pc, #96]	; (80056d0 <HAL_DMA_IRQHandler+0x1f0>)
 8005670:	4293      	cmp	r3, r2
 8005672:	d12f      	bne.n	80056d4 <HAL_DMA_IRQHandler+0x1f4>
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	681b      	ldr	r3, [r3, #0]
 8005678:	681b      	ldr	r3, [r3, #0]
 800567a:	f003 0304 	and.w	r3, r3, #4
 800567e:	2b00      	cmp	r3, #0
 8005680:	bf14      	ite	ne
 8005682:	2301      	movne	r3, #1
 8005684:	2300      	moveq	r3, #0
 8005686:	b2db      	uxtb	r3, r3
 8005688:	e02e      	b.n	80056e8 <HAL_DMA_IRQHandler+0x208>
 800568a:	bf00      	nop
 800568c:	24000010 	.word	0x24000010
 8005690:	1b4e81b5 	.word	0x1b4e81b5
 8005694:	40020010 	.word	0x40020010
 8005698:	40020028 	.word	0x40020028
 800569c:	40020040 	.word	0x40020040
 80056a0:	40020058 	.word	0x40020058
 80056a4:	40020070 	.word	0x40020070
 80056a8:	40020088 	.word	0x40020088
 80056ac:	400200a0 	.word	0x400200a0
 80056b0:	400200b8 	.word	0x400200b8
 80056b4:	40020410 	.word	0x40020410
 80056b8:	40020428 	.word	0x40020428
 80056bc:	40020440 	.word	0x40020440
 80056c0:	40020458 	.word	0x40020458
 80056c4:	40020470 	.word	0x40020470
 80056c8:	40020488 	.word	0x40020488
 80056cc:	400204a0 	.word	0x400204a0
 80056d0:	400204b8 	.word	0x400204b8
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	681b      	ldr	r3, [r3, #0]
 80056d8:	681b      	ldr	r3, [r3, #0]
 80056da:	f003 0308 	and.w	r3, r3, #8
 80056de:	2b00      	cmp	r3, #0
 80056e0:	bf14      	ite	ne
 80056e2:	2301      	movne	r3, #1
 80056e4:	2300      	moveq	r3, #0
 80056e6:	b2db      	uxtb	r3, r3
 80056e8:	2b00      	cmp	r3, #0
 80056ea:	d015      	beq.n	8005718 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	681b      	ldr	r3, [r3, #0]
 80056f0:	681a      	ldr	r2, [r3, #0]
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	681b      	ldr	r3, [r3, #0]
 80056f6:	f022 0204 	bic.w	r2, r2, #4
 80056fa:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005700:	f003 031f 	and.w	r3, r3, #31
 8005704:	2208      	movs	r2, #8
 8005706:	409a      	lsls	r2, r3
 8005708:	6a3b      	ldr	r3, [r7, #32]
 800570a:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005710:	f043 0201 	orr.w	r2, r3, #1
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800571c:	f003 031f 	and.w	r3, r3, #31
 8005720:	69ba      	ldr	r2, [r7, #24]
 8005722:	fa22 f303 	lsr.w	r3, r2, r3
 8005726:	f003 0301 	and.w	r3, r3, #1
 800572a:	2b00      	cmp	r3, #0
 800572c:	d06e      	beq.n	800580c <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	681b      	ldr	r3, [r3, #0]
 8005732:	4a69      	ldr	r2, [pc, #420]	; (80058d8 <HAL_DMA_IRQHandler+0x3f8>)
 8005734:	4293      	cmp	r3, r2
 8005736:	d04a      	beq.n	80057ce <HAL_DMA_IRQHandler+0x2ee>
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	681b      	ldr	r3, [r3, #0]
 800573c:	4a67      	ldr	r2, [pc, #412]	; (80058dc <HAL_DMA_IRQHandler+0x3fc>)
 800573e:	4293      	cmp	r3, r2
 8005740:	d045      	beq.n	80057ce <HAL_DMA_IRQHandler+0x2ee>
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	681b      	ldr	r3, [r3, #0]
 8005746:	4a66      	ldr	r2, [pc, #408]	; (80058e0 <HAL_DMA_IRQHandler+0x400>)
 8005748:	4293      	cmp	r3, r2
 800574a:	d040      	beq.n	80057ce <HAL_DMA_IRQHandler+0x2ee>
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	681b      	ldr	r3, [r3, #0]
 8005750:	4a64      	ldr	r2, [pc, #400]	; (80058e4 <HAL_DMA_IRQHandler+0x404>)
 8005752:	4293      	cmp	r3, r2
 8005754:	d03b      	beq.n	80057ce <HAL_DMA_IRQHandler+0x2ee>
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	681b      	ldr	r3, [r3, #0]
 800575a:	4a63      	ldr	r2, [pc, #396]	; (80058e8 <HAL_DMA_IRQHandler+0x408>)
 800575c:	4293      	cmp	r3, r2
 800575e:	d036      	beq.n	80057ce <HAL_DMA_IRQHandler+0x2ee>
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	681b      	ldr	r3, [r3, #0]
 8005764:	4a61      	ldr	r2, [pc, #388]	; (80058ec <HAL_DMA_IRQHandler+0x40c>)
 8005766:	4293      	cmp	r3, r2
 8005768:	d031      	beq.n	80057ce <HAL_DMA_IRQHandler+0x2ee>
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	681b      	ldr	r3, [r3, #0]
 800576e:	4a60      	ldr	r2, [pc, #384]	; (80058f0 <HAL_DMA_IRQHandler+0x410>)
 8005770:	4293      	cmp	r3, r2
 8005772:	d02c      	beq.n	80057ce <HAL_DMA_IRQHandler+0x2ee>
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	681b      	ldr	r3, [r3, #0]
 8005778:	4a5e      	ldr	r2, [pc, #376]	; (80058f4 <HAL_DMA_IRQHandler+0x414>)
 800577a:	4293      	cmp	r3, r2
 800577c:	d027      	beq.n	80057ce <HAL_DMA_IRQHandler+0x2ee>
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	681b      	ldr	r3, [r3, #0]
 8005782:	4a5d      	ldr	r2, [pc, #372]	; (80058f8 <HAL_DMA_IRQHandler+0x418>)
 8005784:	4293      	cmp	r3, r2
 8005786:	d022      	beq.n	80057ce <HAL_DMA_IRQHandler+0x2ee>
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	681b      	ldr	r3, [r3, #0]
 800578c:	4a5b      	ldr	r2, [pc, #364]	; (80058fc <HAL_DMA_IRQHandler+0x41c>)
 800578e:	4293      	cmp	r3, r2
 8005790:	d01d      	beq.n	80057ce <HAL_DMA_IRQHandler+0x2ee>
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	681b      	ldr	r3, [r3, #0]
 8005796:	4a5a      	ldr	r2, [pc, #360]	; (8005900 <HAL_DMA_IRQHandler+0x420>)
 8005798:	4293      	cmp	r3, r2
 800579a:	d018      	beq.n	80057ce <HAL_DMA_IRQHandler+0x2ee>
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	681b      	ldr	r3, [r3, #0]
 80057a0:	4a58      	ldr	r2, [pc, #352]	; (8005904 <HAL_DMA_IRQHandler+0x424>)
 80057a2:	4293      	cmp	r3, r2
 80057a4:	d013      	beq.n	80057ce <HAL_DMA_IRQHandler+0x2ee>
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	681b      	ldr	r3, [r3, #0]
 80057aa:	4a57      	ldr	r2, [pc, #348]	; (8005908 <HAL_DMA_IRQHandler+0x428>)
 80057ac:	4293      	cmp	r3, r2
 80057ae:	d00e      	beq.n	80057ce <HAL_DMA_IRQHandler+0x2ee>
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	681b      	ldr	r3, [r3, #0]
 80057b4:	4a55      	ldr	r2, [pc, #340]	; (800590c <HAL_DMA_IRQHandler+0x42c>)
 80057b6:	4293      	cmp	r3, r2
 80057b8:	d009      	beq.n	80057ce <HAL_DMA_IRQHandler+0x2ee>
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	681b      	ldr	r3, [r3, #0]
 80057be:	4a54      	ldr	r2, [pc, #336]	; (8005910 <HAL_DMA_IRQHandler+0x430>)
 80057c0:	4293      	cmp	r3, r2
 80057c2:	d004      	beq.n	80057ce <HAL_DMA_IRQHandler+0x2ee>
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	681b      	ldr	r3, [r3, #0]
 80057c8:	4a52      	ldr	r2, [pc, #328]	; (8005914 <HAL_DMA_IRQHandler+0x434>)
 80057ca:	4293      	cmp	r3, r2
 80057cc:	d10a      	bne.n	80057e4 <HAL_DMA_IRQHandler+0x304>
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	681b      	ldr	r3, [r3, #0]
 80057d2:	695b      	ldr	r3, [r3, #20]
 80057d4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80057d8:	2b00      	cmp	r3, #0
 80057da:	bf14      	ite	ne
 80057dc:	2301      	movne	r3, #1
 80057de:	2300      	moveq	r3, #0
 80057e0:	b2db      	uxtb	r3, r3
 80057e2:	e003      	b.n	80057ec <HAL_DMA_IRQHandler+0x30c>
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	681b      	ldr	r3, [r3, #0]
 80057e8:	681b      	ldr	r3, [r3, #0]
 80057ea:	2300      	movs	r3, #0
 80057ec:	2b00      	cmp	r3, #0
 80057ee:	d00d      	beq.n	800580c <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80057f4:	f003 031f 	and.w	r3, r3, #31
 80057f8:	2201      	movs	r2, #1
 80057fa:	409a      	lsls	r2, r3
 80057fc:	6a3b      	ldr	r3, [r7, #32]
 80057fe:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005804:	f043 0202 	orr.w	r2, r3, #2
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005810:	f003 031f 	and.w	r3, r3, #31
 8005814:	2204      	movs	r2, #4
 8005816:	409a      	lsls	r2, r3
 8005818:	69bb      	ldr	r3, [r7, #24]
 800581a:	4013      	ands	r3, r2
 800581c:	2b00      	cmp	r3, #0
 800581e:	f000 808f 	beq.w	8005940 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	681b      	ldr	r3, [r3, #0]
 8005826:	4a2c      	ldr	r2, [pc, #176]	; (80058d8 <HAL_DMA_IRQHandler+0x3f8>)
 8005828:	4293      	cmp	r3, r2
 800582a:	d04a      	beq.n	80058c2 <HAL_DMA_IRQHandler+0x3e2>
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	681b      	ldr	r3, [r3, #0]
 8005830:	4a2a      	ldr	r2, [pc, #168]	; (80058dc <HAL_DMA_IRQHandler+0x3fc>)
 8005832:	4293      	cmp	r3, r2
 8005834:	d045      	beq.n	80058c2 <HAL_DMA_IRQHandler+0x3e2>
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	681b      	ldr	r3, [r3, #0]
 800583a:	4a29      	ldr	r2, [pc, #164]	; (80058e0 <HAL_DMA_IRQHandler+0x400>)
 800583c:	4293      	cmp	r3, r2
 800583e:	d040      	beq.n	80058c2 <HAL_DMA_IRQHandler+0x3e2>
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	681b      	ldr	r3, [r3, #0]
 8005844:	4a27      	ldr	r2, [pc, #156]	; (80058e4 <HAL_DMA_IRQHandler+0x404>)
 8005846:	4293      	cmp	r3, r2
 8005848:	d03b      	beq.n	80058c2 <HAL_DMA_IRQHandler+0x3e2>
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	681b      	ldr	r3, [r3, #0]
 800584e:	4a26      	ldr	r2, [pc, #152]	; (80058e8 <HAL_DMA_IRQHandler+0x408>)
 8005850:	4293      	cmp	r3, r2
 8005852:	d036      	beq.n	80058c2 <HAL_DMA_IRQHandler+0x3e2>
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	681b      	ldr	r3, [r3, #0]
 8005858:	4a24      	ldr	r2, [pc, #144]	; (80058ec <HAL_DMA_IRQHandler+0x40c>)
 800585a:	4293      	cmp	r3, r2
 800585c:	d031      	beq.n	80058c2 <HAL_DMA_IRQHandler+0x3e2>
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	681b      	ldr	r3, [r3, #0]
 8005862:	4a23      	ldr	r2, [pc, #140]	; (80058f0 <HAL_DMA_IRQHandler+0x410>)
 8005864:	4293      	cmp	r3, r2
 8005866:	d02c      	beq.n	80058c2 <HAL_DMA_IRQHandler+0x3e2>
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	681b      	ldr	r3, [r3, #0]
 800586c:	4a21      	ldr	r2, [pc, #132]	; (80058f4 <HAL_DMA_IRQHandler+0x414>)
 800586e:	4293      	cmp	r3, r2
 8005870:	d027      	beq.n	80058c2 <HAL_DMA_IRQHandler+0x3e2>
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	681b      	ldr	r3, [r3, #0]
 8005876:	4a20      	ldr	r2, [pc, #128]	; (80058f8 <HAL_DMA_IRQHandler+0x418>)
 8005878:	4293      	cmp	r3, r2
 800587a:	d022      	beq.n	80058c2 <HAL_DMA_IRQHandler+0x3e2>
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	681b      	ldr	r3, [r3, #0]
 8005880:	4a1e      	ldr	r2, [pc, #120]	; (80058fc <HAL_DMA_IRQHandler+0x41c>)
 8005882:	4293      	cmp	r3, r2
 8005884:	d01d      	beq.n	80058c2 <HAL_DMA_IRQHandler+0x3e2>
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	681b      	ldr	r3, [r3, #0]
 800588a:	4a1d      	ldr	r2, [pc, #116]	; (8005900 <HAL_DMA_IRQHandler+0x420>)
 800588c:	4293      	cmp	r3, r2
 800588e:	d018      	beq.n	80058c2 <HAL_DMA_IRQHandler+0x3e2>
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	681b      	ldr	r3, [r3, #0]
 8005894:	4a1b      	ldr	r2, [pc, #108]	; (8005904 <HAL_DMA_IRQHandler+0x424>)
 8005896:	4293      	cmp	r3, r2
 8005898:	d013      	beq.n	80058c2 <HAL_DMA_IRQHandler+0x3e2>
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	681b      	ldr	r3, [r3, #0]
 800589e:	4a1a      	ldr	r2, [pc, #104]	; (8005908 <HAL_DMA_IRQHandler+0x428>)
 80058a0:	4293      	cmp	r3, r2
 80058a2:	d00e      	beq.n	80058c2 <HAL_DMA_IRQHandler+0x3e2>
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	681b      	ldr	r3, [r3, #0]
 80058a8:	4a18      	ldr	r2, [pc, #96]	; (800590c <HAL_DMA_IRQHandler+0x42c>)
 80058aa:	4293      	cmp	r3, r2
 80058ac:	d009      	beq.n	80058c2 <HAL_DMA_IRQHandler+0x3e2>
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	681b      	ldr	r3, [r3, #0]
 80058b2:	4a17      	ldr	r2, [pc, #92]	; (8005910 <HAL_DMA_IRQHandler+0x430>)
 80058b4:	4293      	cmp	r3, r2
 80058b6:	d004      	beq.n	80058c2 <HAL_DMA_IRQHandler+0x3e2>
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	681b      	ldr	r3, [r3, #0]
 80058bc:	4a15      	ldr	r2, [pc, #84]	; (8005914 <HAL_DMA_IRQHandler+0x434>)
 80058be:	4293      	cmp	r3, r2
 80058c0:	d12a      	bne.n	8005918 <HAL_DMA_IRQHandler+0x438>
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	681b      	ldr	r3, [r3, #0]
 80058c6:	681b      	ldr	r3, [r3, #0]
 80058c8:	f003 0302 	and.w	r3, r3, #2
 80058cc:	2b00      	cmp	r3, #0
 80058ce:	bf14      	ite	ne
 80058d0:	2301      	movne	r3, #1
 80058d2:	2300      	moveq	r3, #0
 80058d4:	b2db      	uxtb	r3, r3
 80058d6:	e023      	b.n	8005920 <HAL_DMA_IRQHandler+0x440>
 80058d8:	40020010 	.word	0x40020010
 80058dc:	40020028 	.word	0x40020028
 80058e0:	40020040 	.word	0x40020040
 80058e4:	40020058 	.word	0x40020058
 80058e8:	40020070 	.word	0x40020070
 80058ec:	40020088 	.word	0x40020088
 80058f0:	400200a0 	.word	0x400200a0
 80058f4:	400200b8 	.word	0x400200b8
 80058f8:	40020410 	.word	0x40020410
 80058fc:	40020428 	.word	0x40020428
 8005900:	40020440 	.word	0x40020440
 8005904:	40020458 	.word	0x40020458
 8005908:	40020470 	.word	0x40020470
 800590c:	40020488 	.word	0x40020488
 8005910:	400204a0 	.word	0x400204a0
 8005914:	400204b8 	.word	0x400204b8
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	681b      	ldr	r3, [r3, #0]
 800591c:	681b      	ldr	r3, [r3, #0]
 800591e:	2300      	movs	r3, #0
 8005920:	2b00      	cmp	r3, #0
 8005922:	d00d      	beq.n	8005940 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005928:	f003 031f 	and.w	r3, r3, #31
 800592c:	2204      	movs	r2, #4
 800592e:	409a      	lsls	r2, r3
 8005930:	6a3b      	ldr	r3, [r7, #32]
 8005932:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005938:	f043 0204 	orr.w	r2, r3, #4
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005944:	f003 031f 	and.w	r3, r3, #31
 8005948:	2210      	movs	r2, #16
 800594a:	409a      	lsls	r2, r3
 800594c:	69bb      	ldr	r3, [r7, #24]
 800594e:	4013      	ands	r3, r2
 8005950:	2b00      	cmp	r3, #0
 8005952:	f000 80a6 	beq.w	8005aa2 <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	681b      	ldr	r3, [r3, #0]
 800595a:	4a85      	ldr	r2, [pc, #532]	; (8005b70 <HAL_DMA_IRQHandler+0x690>)
 800595c:	4293      	cmp	r3, r2
 800595e:	d04a      	beq.n	80059f6 <HAL_DMA_IRQHandler+0x516>
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	681b      	ldr	r3, [r3, #0]
 8005964:	4a83      	ldr	r2, [pc, #524]	; (8005b74 <HAL_DMA_IRQHandler+0x694>)
 8005966:	4293      	cmp	r3, r2
 8005968:	d045      	beq.n	80059f6 <HAL_DMA_IRQHandler+0x516>
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	681b      	ldr	r3, [r3, #0]
 800596e:	4a82      	ldr	r2, [pc, #520]	; (8005b78 <HAL_DMA_IRQHandler+0x698>)
 8005970:	4293      	cmp	r3, r2
 8005972:	d040      	beq.n	80059f6 <HAL_DMA_IRQHandler+0x516>
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	681b      	ldr	r3, [r3, #0]
 8005978:	4a80      	ldr	r2, [pc, #512]	; (8005b7c <HAL_DMA_IRQHandler+0x69c>)
 800597a:	4293      	cmp	r3, r2
 800597c:	d03b      	beq.n	80059f6 <HAL_DMA_IRQHandler+0x516>
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	681b      	ldr	r3, [r3, #0]
 8005982:	4a7f      	ldr	r2, [pc, #508]	; (8005b80 <HAL_DMA_IRQHandler+0x6a0>)
 8005984:	4293      	cmp	r3, r2
 8005986:	d036      	beq.n	80059f6 <HAL_DMA_IRQHandler+0x516>
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	681b      	ldr	r3, [r3, #0]
 800598c:	4a7d      	ldr	r2, [pc, #500]	; (8005b84 <HAL_DMA_IRQHandler+0x6a4>)
 800598e:	4293      	cmp	r3, r2
 8005990:	d031      	beq.n	80059f6 <HAL_DMA_IRQHandler+0x516>
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	681b      	ldr	r3, [r3, #0]
 8005996:	4a7c      	ldr	r2, [pc, #496]	; (8005b88 <HAL_DMA_IRQHandler+0x6a8>)
 8005998:	4293      	cmp	r3, r2
 800599a:	d02c      	beq.n	80059f6 <HAL_DMA_IRQHandler+0x516>
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	681b      	ldr	r3, [r3, #0]
 80059a0:	4a7a      	ldr	r2, [pc, #488]	; (8005b8c <HAL_DMA_IRQHandler+0x6ac>)
 80059a2:	4293      	cmp	r3, r2
 80059a4:	d027      	beq.n	80059f6 <HAL_DMA_IRQHandler+0x516>
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	681b      	ldr	r3, [r3, #0]
 80059aa:	4a79      	ldr	r2, [pc, #484]	; (8005b90 <HAL_DMA_IRQHandler+0x6b0>)
 80059ac:	4293      	cmp	r3, r2
 80059ae:	d022      	beq.n	80059f6 <HAL_DMA_IRQHandler+0x516>
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	681b      	ldr	r3, [r3, #0]
 80059b4:	4a77      	ldr	r2, [pc, #476]	; (8005b94 <HAL_DMA_IRQHandler+0x6b4>)
 80059b6:	4293      	cmp	r3, r2
 80059b8:	d01d      	beq.n	80059f6 <HAL_DMA_IRQHandler+0x516>
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	681b      	ldr	r3, [r3, #0]
 80059be:	4a76      	ldr	r2, [pc, #472]	; (8005b98 <HAL_DMA_IRQHandler+0x6b8>)
 80059c0:	4293      	cmp	r3, r2
 80059c2:	d018      	beq.n	80059f6 <HAL_DMA_IRQHandler+0x516>
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	681b      	ldr	r3, [r3, #0]
 80059c8:	4a74      	ldr	r2, [pc, #464]	; (8005b9c <HAL_DMA_IRQHandler+0x6bc>)
 80059ca:	4293      	cmp	r3, r2
 80059cc:	d013      	beq.n	80059f6 <HAL_DMA_IRQHandler+0x516>
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	681b      	ldr	r3, [r3, #0]
 80059d2:	4a73      	ldr	r2, [pc, #460]	; (8005ba0 <HAL_DMA_IRQHandler+0x6c0>)
 80059d4:	4293      	cmp	r3, r2
 80059d6:	d00e      	beq.n	80059f6 <HAL_DMA_IRQHandler+0x516>
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	681b      	ldr	r3, [r3, #0]
 80059dc:	4a71      	ldr	r2, [pc, #452]	; (8005ba4 <HAL_DMA_IRQHandler+0x6c4>)
 80059de:	4293      	cmp	r3, r2
 80059e0:	d009      	beq.n	80059f6 <HAL_DMA_IRQHandler+0x516>
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	681b      	ldr	r3, [r3, #0]
 80059e6:	4a70      	ldr	r2, [pc, #448]	; (8005ba8 <HAL_DMA_IRQHandler+0x6c8>)
 80059e8:	4293      	cmp	r3, r2
 80059ea:	d004      	beq.n	80059f6 <HAL_DMA_IRQHandler+0x516>
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	681b      	ldr	r3, [r3, #0]
 80059f0:	4a6e      	ldr	r2, [pc, #440]	; (8005bac <HAL_DMA_IRQHandler+0x6cc>)
 80059f2:	4293      	cmp	r3, r2
 80059f4:	d10a      	bne.n	8005a0c <HAL_DMA_IRQHandler+0x52c>
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	681b      	ldr	r3, [r3, #0]
 80059fa:	681b      	ldr	r3, [r3, #0]
 80059fc:	f003 0308 	and.w	r3, r3, #8
 8005a00:	2b00      	cmp	r3, #0
 8005a02:	bf14      	ite	ne
 8005a04:	2301      	movne	r3, #1
 8005a06:	2300      	moveq	r3, #0
 8005a08:	b2db      	uxtb	r3, r3
 8005a0a:	e009      	b.n	8005a20 <HAL_DMA_IRQHandler+0x540>
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	681b      	ldr	r3, [r3, #0]
 8005a10:	681b      	ldr	r3, [r3, #0]
 8005a12:	f003 0304 	and.w	r3, r3, #4
 8005a16:	2b00      	cmp	r3, #0
 8005a18:	bf14      	ite	ne
 8005a1a:	2301      	movne	r3, #1
 8005a1c:	2300      	moveq	r3, #0
 8005a1e:	b2db      	uxtb	r3, r3
 8005a20:	2b00      	cmp	r3, #0
 8005a22:	d03e      	beq.n	8005aa2 <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005a28:	f003 031f 	and.w	r3, r3, #31
 8005a2c:	2210      	movs	r2, #16
 8005a2e:	409a      	lsls	r2, r3
 8005a30:	6a3b      	ldr	r3, [r7, #32]
 8005a32:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	681b      	ldr	r3, [r3, #0]
 8005a38:	681b      	ldr	r3, [r3, #0]
 8005a3a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005a3e:	2b00      	cmp	r3, #0
 8005a40:	d018      	beq.n	8005a74 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	681b      	ldr	r3, [r3, #0]
 8005a46:	681b      	ldr	r3, [r3, #0]
 8005a48:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005a4c:	2b00      	cmp	r3, #0
 8005a4e:	d108      	bne.n	8005a62 <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a54:	2b00      	cmp	r3, #0
 8005a56:	d024      	beq.n	8005aa2 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a5c:	6878      	ldr	r0, [r7, #4]
 8005a5e:	4798      	blx	r3
 8005a60:	e01f      	b.n	8005aa2 <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005a66:	2b00      	cmp	r3, #0
 8005a68:	d01b      	beq.n	8005aa2 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005a6e:	6878      	ldr	r0, [r7, #4]
 8005a70:	4798      	blx	r3
 8005a72:	e016      	b.n	8005aa2 <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	681b      	ldr	r3, [r3, #0]
 8005a78:	681b      	ldr	r3, [r3, #0]
 8005a7a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005a7e:	2b00      	cmp	r3, #0
 8005a80:	d107      	bne.n	8005a92 <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	681b      	ldr	r3, [r3, #0]
 8005a86:	681a      	ldr	r2, [r3, #0]
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	681b      	ldr	r3, [r3, #0]
 8005a8c:	f022 0208 	bic.w	r2, r2, #8
 8005a90:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a96:	2b00      	cmp	r3, #0
 8005a98:	d003      	beq.n	8005aa2 <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a9e:	6878      	ldr	r0, [r7, #4]
 8005aa0:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005aa6:	f003 031f 	and.w	r3, r3, #31
 8005aaa:	2220      	movs	r2, #32
 8005aac:	409a      	lsls	r2, r3
 8005aae:	69bb      	ldr	r3, [r7, #24]
 8005ab0:	4013      	ands	r3, r2
 8005ab2:	2b00      	cmp	r3, #0
 8005ab4:	f000 8110 	beq.w	8005cd8 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	681b      	ldr	r3, [r3, #0]
 8005abc:	4a2c      	ldr	r2, [pc, #176]	; (8005b70 <HAL_DMA_IRQHandler+0x690>)
 8005abe:	4293      	cmp	r3, r2
 8005ac0:	d04a      	beq.n	8005b58 <HAL_DMA_IRQHandler+0x678>
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	681b      	ldr	r3, [r3, #0]
 8005ac6:	4a2b      	ldr	r2, [pc, #172]	; (8005b74 <HAL_DMA_IRQHandler+0x694>)
 8005ac8:	4293      	cmp	r3, r2
 8005aca:	d045      	beq.n	8005b58 <HAL_DMA_IRQHandler+0x678>
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	681b      	ldr	r3, [r3, #0]
 8005ad0:	4a29      	ldr	r2, [pc, #164]	; (8005b78 <HAL_DMA_IRQHandler+0x698>)
 8005ad2:	4293      	cmp	r3, r2
 8005ad4:	d040      	beq.n	8005b58 <HAL_DMA_IRQHandler+0x678>
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	681b      	ldr	r3, [r3, #0]
 8005ada:	4a28      	ldr	r2, [pc, #160]	; (8005b7c <HAL_DMA_IRQHandler+0x69c>)
 8005adc:	4293      	cmp	r3, r2
 8005ade:	d03b      	beq.n	8005b58 <HAL_DMA_IRQHandler+0x678>
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	681b      	ldr	r3, [r3, #0]
 8005ae4:	4a26      	ldr	r2, [pc, #152]	; (8005b80 <HAL_DMA_IRQHandler+0x6a0>)
 8005ae6:	4293      	cmp	r3, r2
 8005ae8:	d036      	beq.n	8005b58 <HAL_DMA_IRQHandler+0x678>
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	681b      	ldr	r3, [r3, #0]
 8005aee:	4a25      	ldr	r2, [pc, #148]	; (8005b84 <HAL_DMA_IRQHandler+0x6a4>)
 8005af0:	4293      	cmp	r3, r2
 8005af2:	d031      	beq.n	8005b58 <HAL_DMA_IRQHandler+0x678>
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	681b      	ldr	r3, [r3, #0]
 8005af8:	4a23      	ldr	r2, [pc, #140]	; (8005b88 <HAL_DMA_IRQHandler+0x6a8>)
 8005afa:	4293      	cmp	r3, r2
 8005afc:	d02c      	beq.n	8005b58 <HAL_DMA_IRQHandler+0x678>
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	681b      	ldr	r3, [r3, #0]
 8005b02:	4a22      	ldr	r2, [pc, #136]	; (8005b8c <HAL_DMA_IRQHandler+0x6ac>)
 8005b04:	4293      	cmp	r3, r2
 8005b06:	d027      	beq.n	8005b58 <HAL_DMA_IRQHandler+0x678>
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	681b      	ldr	r3, [r3, #0]
 8005b0c:	4a20      	ldr	r2, [pc, #128]	; (8005b90 <HAL_DMA_IRQHandler+0x6b0>)
 8005b0e:	4293      	cmp	r3, r2
 8005b10:	d022      	beq.n	8005b58 <HAL_DMA_IRQHandler+0x678>
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	681b      	ldr	r3, [r3, #0]
 8005b16:	4a1f      	ldr	r2, [pc, #124]	; (8005b94 <HAL_DMA_IRQHandler+0x6b4>)
 8005b18:	4293      	cmp	r3, r2
 8005b1a:	d01d      	beq.n	8005b58 <HAL_DMA_IRQHandler+0x678>
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	681b      	ldr	r3, [r3, #0]
 8005b20:	4a1d      	ldr	r2, [pc, #116]	; (8005b98 <HAL_DMA_IRQHandler+0x6b8>)
 8005b22:	4293      	cmp	r3, r2
 8005b24:	d018      	beq.n	8005b58 <HAL_DMA_IRQHandler+0x678>
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	681b      	ldr	r3, [r3, #0]
 8005b2a:	4a1c      	ldr	r2, [pc, #112]	; (8005b9c <HAL_DMA_IRQHandler+0x6bc>)
 8005b2c:	4293      	cmp	r3, r2
 8005b2e:	d013      	beq.n	8005b58 <HAL_DMA_IRQHandler+0x678>
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	681b      	ldr	r3, [r3, #0]
 8005b34:	4a1a      	ldr	r2, [pc, #104]	; (8005ba0 <HAL_DMA_IRQHandler+0x6c0>)
 8005b36:	4293      	cmp	r3, r2
 8005b38:	d00e      	beq.n	8005b58 <HAL_DMA_IRQHandler+0x678>
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	681b      	ldr	r3, [r3, #0]
 8005b3e:	4a19      	ldr	r2, [pc, #100]	; (8005ba4 <HAL_DMA_IRQHandler+0x6c4>)
 8005b40:	4293      	cmp	r3, r2
 8005b42:	d009      	beq.n	8005b58 <HAL_DMA_IRQHandler+0x678>
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	681b      	ldr	r3, [r3, #0]
 8005b48:	4a17      	ldr	r2, [pc, #92]	; (8005ba8 <HAL_DMA_IRQHandler+0x6c8>)
 8005b4a:	4293      	cmp	r3, r2
 8005b4c:	d004      	beq.n	8005b58 <HAL_DMA_IRQHandler+0x678>
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	681b      	ldr	r3, [r3, #0]
 8005b52:	4a16      	ldr	r2, [pc, #88]	; (8005bac <HAL_DMA_IRQHandler+0x6cc>)
 8005b54:	4293      	cmp	r3, r2
 8005b56:	d12b      	bne.n	8005bb0 <HAL_DMA_IRQHandler+0x6d0>
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	681b      	ldr	r3, [r3, #0]
 8005b5c:	681b      	ldr	r3, [r3, #0]
 8005b5e:	f003 0310 	and.w	r3, r3, #16
 8005b62:	2b00      	cmp	r3, #0
 8005b64:	bf14      	ite	ne
 8005b66:	2301      	movne	r3, #1
 8005b68:	2300      	moveq	r3, #0
 8005b6a:	b2db      	uxtb	r3, r3
 8005b6c:	e02a      	b.n	8005bc4 <HAL_DMA_IRQHandler+0x6e4>
 8005b6e:	bf00      	nop
 8005b70:	40020010 	.word	0x40020010
 8005b74:	40020028 	.word	0x40020028
 8005b78:	40020040 	.word	0x40020040
 8005b7c:	40020058 	.word	0x40020058
 8005b80:	40020070 	.word	0x40020070
 8005b84:	40020088 	.word	0x40020088
 8005b88:	400200a0 	.word	0x400200a0
 8005b8c:	400200b8 	.word	0x400200b8
 8005b90:	40020410 	.word	0x40020410
 8005b94:	40020428 	.word	0x40020428
 8005b98:	40020440 	.word	0x40020440
 8005b9c:	40020458 	.word	0x40020458
 8005ba0:	40020470 	.word	0x40020470
 8005ba4:	40020488 	.word	0x40020488
 8005ba8:	400204a0 	.word	0x400204a0
 8005bac:	400204b8 	.word	0x400204b8
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	681b      	ldr	r3, [r3, #0]
 8005bb4:	681b      	ldr	r3, [r3, #0]
 8005bb6:	f003 0302 	and.w	r3, r3, #2
 8005bba:	2b00      	cmp	r3, #0
 8005bbc:	bf14      	ite	ne
 8005bbe:	2301      	movne	r3, #1
 8005bc0:	2300      	moveq	r3, #0
 8005bc2:	b2db      	uxtb	r3, r3
 8005bc4:	2b00      	cmp	r3, #0
 8005bc6:	f000 8087 	beq.w	8005cd8 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005bce:	f003 031f 	and.w	r3, r3, #31
 8005bd2:	2220      	movs	r2, #32
 8005bd4:	409a      	lsls	r2, r3
 8005bd6:	6a3b      	ldr	r3, [r7, #32]
 8005bd8:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005be0:	b2db      	uxtb	r3, r3
 8005be2:	2b04      	cmp	r3, #4
 8005be4:	d139      	bne.n	8005c5a <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	681b      	ldr	r3, [r3, #0]
 8005bea:	681a      	ldr	r2, [r3, #0]
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	681b      	ldr	r3, [r3, #0]
 8005bf0:	f022 0216 	bic.w	r2, r2, #22
 8005bf4:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	681b      	ldr	r3, [r3, #0]
 8005bfa:	695a      	ldr	r2, [r3, #20]
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	681b      	ldr	r3, [r3, #0]
 8005c00:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005c04:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c0a:	2b00      	cmp	r3, #0
 8005c0c:	d103      	bne.n	8005c16 <HAL_DMA_IRQHandler+0x736>
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005c12:	2b00      	cmp	r3, #0
 8005c14:	d007      	beq.n	8005c26 <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	681b      	ldr	r3, [r3, #0]
 8005c1a:	681a      	ldr	r2, [r3, #0]
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	681b      	ldr	r3, [r3, #0]
 8005c20:	f022 0208 	bic.w	r2, r2, #8
 8005c24:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005c2a:	f003 031f 	and.w	r3, r3, #31
 8005c2e:	223f      	movs	r2, #63	; 0x3f
 8005c30:	409a      	lsls	r2, r3
 8005c32:	6a3b      	ldr	r3, [r7, #32]
 8005c34:	609a      	str	r2, [r3, #8]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	2200      	movs	r2, #0
 8005c3a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	2201      	movs	r2, #1
 8005c42:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          if(hdma->XferAbortCallback != NULL)
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005c4a:	2b00      	cmp	r3, #0
 8005c4c:	f000 834a 	beq.w	80062e4 <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005c54:	6878      	ldr	r0, [r7, #4]
 8005c56:	4798      	blx	r3
          }
          return;
 8005c58:	e344      	b.n	80062e4 <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	681b      	ldr	r3, [r3, #0]
 8005c5e:	681b      	ldr	r3, [r3, #0]
 8005c60:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005c64:	2b00      	cmp	r3, #0
 8005c66:	d018      	beq.n	8005c9a <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	681b      	ldr	r3, [r3, #0]
 8005c6c:	681b      	ldr	r3, [r3, #0]
 8005c6e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005c72:	2b00      	cmp	r3, #0
 8005c74:	d108      	bne.n	8005c88 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005c7a:	2b00      	cmp	r3, #0
 8005c7c:	d02c      	beq.n	8005cd8 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005c82:	6878      	ldr	r0, [r7, #4]
 8005c84:	4798      	blx	r3
 8005c86:	e027      	b.n	8005cd8 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005c8c:	2b00      	cmp	r3, #0
 8005c8e:	d023      	beq.n	8005cd8 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005c94:	6878      	ldr	r0, [r7, #4]
 8005c96:	4798      	blx	r3
 8005c98:	e01e      	b.n	8005cd8 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	681b      	ldr	r3, [r3, #0]
 8005c9e:	681b      	ldr	r3, [r3, #0]
 8005ca0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005ca4:	2b00      	cmp	r3, #0
 8005ca6:	d10f      	bne.n	8005cc8 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	681b      	ldr	r3, [r3, #0]
 8005cac:	681a      	ldr	r2, [r3, #0]
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	681b      	ldr	r3, [r3, #0]
 8005cb2:	f022 0210 	bic.w	r2, r2, #16
 8005cb6:	601a      	str	r2, [r3, #0]

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	2200      	movs	r2, #0
 8005cbc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	2201      	movs	r2, #1
 8005cc4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
          }

          if(hdma->XferCpltCallback != NULL)
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005ccc:	2b00      	cmp	r3, #0
 8005cce:	d003      	beq.n	8005cd8 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005cd4:	6878      	ldr	r0, [r7, #4]
 8005cd6:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005cdc:	2b00      	cmp	r3, #0
 8005cde:	f000 8306 	beq.w	80062ee <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005ce6:	f003 0301 	and.w	r3, r3, #1
 8005cea:	2b00      	cmp	r3, #0
 8005cec:	f000 8088 	beq.w	8005e00 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	2204      	movs	r2, #4
 8005cf4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	681b      	ldr	r3, [r3, #0]
 8005cfc:	4a7a      	ldr	r2, [pc, #488]	; (8005ee8 <HAL_DMA_IRQHandler+0xa08>)
 8005cfe:	4293      	cmp	r3, r2
 8005d00:	d04a      	beq.n	8005d98 <HAL_DMA_IRQHandler+0x8b8>
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	681b      	ldr	r3, [r3, #0]
 8005d06:	4a79      	ldr	r2, [pc, #484]	; (8005eec <HAL_DMA_IRQHandler+0xa0c>)
 8005d08:	4293      	cmp	r3, r2
 8005d0a:	d045      	beq.n	8005d98 <HAL_DMA_IRQHandler+0x8b8>
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	681b      	ldr	r3, [r3, #0]
 8005d10:	4a77      	ldr	r2, [pc, #476]	; (8005ef0 <HAL_DMA_IRQHandler+0xa10>)
 8005d12:	4293      	cmp	r3, r2
 8005d14:	d040      	beq.n	8005d98 <HAL_DMA_IRQHandler+0x8b8>
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	681b      	ldr	r3, [r3, #0]
 8005d1a:	4a76      	ldr	r2, [pc, #472]	; (8005ef4 <HAL_DMA_IRQHandler+0xa14>)
 8005d1c:	4293      	cmp	r3, r2
 8005d1e:	d03b      	beq.n	8005d98 <HAL_DMA_IRQHandler+0x8b8>
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	681b      	ldr	r3, [r3, #0]
 8005d24:	4a74      	ldr	r2, [pc, #464]	; (8005ef8 <HAL_DMA_IRQHandler+0xa18>)
 8005d26:	4293      	cmp	r3, r2
 8005d28:	d036      	beq.n	8005d98 <HAL_DMA_IRQHandler+0x8b8>
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	681b      	ldr	r3, [r3, #0]
 8005d2e:	4a73      	ldr	r2, [pc, #460]	; (8005efc <HAL_DMA_IRQHandler+0xa1c>)
 8005d30:	4293      	cmp	r3, r2
 8005d32:	d031      	beq.n	8005d98 <HAL_DMA_IRQHandler+0x8b8>
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	681b      	ldr	r3, [r3, #0]
 8005d38:	4a71      	ldr	r2, [pc, #452]	; (8005f00 <HAL_DMA_IRQHandler+0xa20>)
 8005d3a:	4293      	cmp	r3, r2
 8005d3c:	d02c      	beq.n	8005d98 <HAL_DMA_IRQHandler+0x8b8>
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	681b      	ldr	r3, [r3, #0]
 8005d42:	4a70      	ldr	r2, [pc, #448]	; (8005f04 <HAL_DMA_IRQHandler+0xa24>)
 8005d44:	4293      	cmp	r3, r2
 8005d46:	d027      	beq.n	8005d98 <HAL_DMA_IRQHandler+0x8b8>
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	681b      	ldr	r3, [r3, #0]
 8005d4c:	4a6e      	ldr	r2, [pc, #440]	; (8005f08 <HAL_DMA_IRQHandler+0xa28>)
 8005d4e:	4293      	cmp	r3, r2
 8005d50:	d022      	beq.n	8005d98 <HAL_DMA_IRQHandler+0x8b8>
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	681b      	ldr	r3, [r3, #0]
 8005d56:	4a6d      	ldr	r2, [pc, #436]	; (8005f0c <HAL_DMA_IRQHandler+0xa2c>)
 8005d58:	4293      	cmp	r3, r2
 8005d5a:	d01d      	beq.n	8005d98 <HAL_DMA_IRQHandler+0x8b8>
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	681b      	ldr	r3, [r3, #0]
 8005d60:	4a6b      	ldr	r2, [pc, #428]	; (8005f10 <HAL_DMA_IRQHandler+0xa30>)
 8005d62:	4293      	cmp	r3, r2
 8005d64:	d018      	beq.n	8005d98 <HAL_DMA_IRQHandler+0x8b8>
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	681b      	ldr	r3, [r3, #0]
 8005d6a:	4a6a      	ldr	r2, [pc, #424]	; (8005f14 <HAL_DMA_IRQHandler+0xa34>)
 8005d6c:	4293      	cmp	r3, r2
 8005d6e:	d013      	beq.n	8005d98 <HAL_DMA_IRQHandler+0x8b8>
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	681b      	ldr	r3, [r3, #0]
 8005d74:	4a68      	ldr	r2, [pc, #416]	; (8005f18 <HAL_DMA_IRQHandler+0xa38>)
 8005d76:	4293      	cmp	r3, r2
 8005d78:	d00e      	beq.n	8005d98 <HAL_DMA_IRQHandler+0x8b8>
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	681b      	ldr	r3, [r3, #0]
 8005d7e:	4a67      	ldr	r2, [pc, #412]	; (8005f1c <HAL_DMA_IRQHandler+0xa3c>)
 8005d80:	4293      	cmp	r3, r2
 8005d82:	d009      	beq.n	8005d98 <HAL_DMA_IRQHandler+0x8b8>
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	681b      	ldr	r3, [r3, #0]
 8005d88:	4a65      	ldr	r2, [pc, #404]	; (8005f20 <HAL_DMA_IRQHandler+0xa40>)
 8005d8a:	4293      	cmp	r3, r2
 8005d8c:	d004      	beq.n	8005d98 <HAL_DMA_IRQHandler+0x8b8>
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	681b      	ldr	r3, [r3, #0]
 8005d92:	4a64      	ldr	r2, [pc, #400]	; (8005f24 <HAL_DMA_IRQHandler+0xa44>)
 8005d94:	4293      	cmp	r3, r2
 8005d96:	d108      	bne.n	8005daa <HAL_DMA_IRQHandler+0x8ca>
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	681b      	ldr	r3, [r3, #0]
 8005d9c:	681a      	ldr	r2, [r3, #0]
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	681b      	ldr	r3, [r3, #0]
 8005da2:	f022 0201 	bic.w	r2, r2, #1
 8005da6:	601a      	str	r2, [r3, #0]
 8005da8:	e007      	b.n	8005dba <HAL_DMA_IRQHandler+0x8da>
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	681b      	ldr	r3, [r3, #0]
 8005dae:	681a      	ldr	r2, [r3, #0]
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	681b      	ldr	r3, [r3, #0]
 8005db4:	f022 0201 	bic.w	r2, r2, #1
 8005db8:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 8005dba:	68fb      	ldr	r3, [r7, #12]
 8005dbc:	3301      	adds	r3, #1
 8005dbe:	60fb      	str	r3, [r7, #12]
 8005dc0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005dc2:	429a      	cmp	r2, r3
 8005dc4:	d307      	bcc.n	8005dd6 <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	681b      	ldr	r3, [r3, #0]
 8005dca:	681b      	ldr	r3, [r3, #0]
 8005dcc:	f003 0301 	and.w	r3, r3, #1
 8005dd0:	2b00      	cmp	r3, #0
 8005dd2:	d1f2      	bne.n	8005dba <HAL_DMA_IRQHandler+0x8da>
 8005dd4:	e000      	b.n	8005dd8 <HAL_DMA_IRQHandler+0x8f8>
            break;
 8005dd6:	bf00      	nop

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	2200      	movs	r2, #0
 8005ddc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	681b      	ldr	r3, [r3, #0]
 8005de4:	681b      	ldr	r3, [r3, #0]
 8005de6:	f003 0301 	and.w	r3, r3, #1
 8005dea:	2b00      	cmp	r3, #0
 8005dec:	d004      	beq.n	8005df8 <HAL_DMA_IRQHandler+0x918>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	2203      	movs	r2, #3
 8005df2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 8005df6:	e003      	b.n	8005e00 <HAL_DMA_IRQHandler+0x920>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	2201      	movs	r2, #1
 8005dfc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }
      }

      if(hdma->XferErrorCallback != NULL)
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005e04:	2b00      	cmp	r3, #0
 8005e06:	f000 8272 	beq.w	80062ee <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005e0e:	6878      	ldr	r0, [r7, #4]
 8005e10:	4798      	blx	r3
 8005e12:	e26c      	b.n	80062ee <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	681b      	ldr	r3, [r3, #0]
 8005e18:	4a43      	ldr	r2, [pc, #268]	; (8005f28 <HAL_DMA_IRQHandler+0xa48>)
 8005e1a:	4293      	cmp	r3, r2
 8005e1c:	d022      	beq.n	8005e64 <HAL_DMA_IRQHandler+0x984>
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	681b      	ldr	r3, [r3, #0]
 8005e22:	4a42      	ldr	r2, [pc, #264]	; (8005f2c <HAL_DMA_IRQHandler+0xa4c>)
 8005e24:	4293      	cmp	r3, r2
 8005e26:	d01d      	beq.n	8005e64 <HAL_DMA_IRQHandler+0x984>
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	681b      	ldr	r3, [r3, #0]
 8005e2c:	4a40      	ldr	r2, [pc, #256]	; (8005f30 <HAL_DMA_IRQHandler+0xa50>)
 8005e2e:	4293      	cmp	r3, r2
 8005e30:	d018      	beq.n	8005e64 <HAL_DMA_IRQHandler+0x984>
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	681b      	ldr	r3, [r3, #0]
 8005e36:	4a3f      	ldr	r2, [pc, #252]	; (8005f34 <HAL_DMA_IRQHandler+0xa54>)
 8005e38:	4293      	cmp	r3, r2
 8005e3a:	d013      	beq.n	8005e64 <HAL_DMA_IRQHandler+0x984>
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	681b      	ldr	r3, [r3, #0]
 8005e40:	4a3d      	ldr	r2, [pc, #244]	; (8005f38 <HAL_DMA_IRQHandler+0xa58>)
 8005e42:	4293      	cmp	r3, r2
 8005e44:	d00e      	beq.n	8005e64 <HAL_DMA_IRQHandler+0x984>
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	681b      	ldr	r3, [r3, #0]
 8005e4a:	4a3c      	ldr	r2, [pc, #240]	; (8005f3c <HAL_DMA_IRQHandler+0xa5c>)
 8005e4c:	4293      	cmp	r3, r2
 8005e4e:	d009      	beq.n	8005e64 <HAL_DMA_IRQHandler+0x984>
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	681b      	ldr	r3, [r3, #0]
 8005e54:	4a3a      	ldr	r2, [pc, #232]	; (8005f40 <HAL_DMA_IRQHandler+0xa60>)
 8005e56:	4293      	cmp	r3, r2
 8005e58:	d004      	beq.n	8005e64 <HAL_DMA_IRQHandler+0x984>
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	681b      	ldr	r3, [r3, #0]
 8005e5e:	4a39      	ldr	r2, [pc, #228]	; (8005f44 <HAL_DMA_IRQHandler+0xa64>)
 8005e60:	4293      	cmp	r3, r2
 8005e62:	d101      	bne.n	8005e68 <HAL_DMA_IRQHandler+0x988>
 8005e64:	2301      	movs	r3, #1
 8005e66:	e000      	b.n	8005e6a <HAL_DMA_IRQHandler+0x98a>
 8005e68:	2300      	movs	r3, #0
 8005e6a:	2b00      	cmp	r3, #0
 8005e6c:	f000 823f 	beq.w	80062ee <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	681b      	ldr	r3, [r3, #0]
 8005e74:	681b      	ldr	r3, [r3, #0]
 8005e76:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005e7c:	f003 031f 	and.w	r3, r3, #31
 8005e80:	2204      	movs	r2, #4
 8005e82:	409a      	lsls	r2, r3
 8005e84:	697b      	ldr	r3, [r7, #20]
 8005e86:	4013      	ands	r3, r2
 8005e88:	2b00      	cmp	r3, #0
 8005e8a:	f000 80cd 	beq.w	8006028 <HAL_DMA_IRQHandler+0xb48>
 8005e8e:	693b      	ldr	r3, [r7, #16]
 8005e90:	f003 0304 	and.w	r3, r3, #4
 8005e94:	2b00      	cmp	r3, #0
 8005e96:	f000 80c7 	beq.w	8006028 <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005e9e:	f003 031f 	and.w	r3, r3, #31
 8005ea2:	2204      	movs	r2, #4
 8005ea4:	409a      	lsls	r2, r3
 8005ea6:	69fb      	ldr	r3, [r7, #28]
 8005ea8:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005eaa:	693b      	ldr	r3, [r7, #16]
 8005eac:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005eb0:	2b00      	cmp	r3, #0
 8005eb2:	d049      	beq.n	8005f48 <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8005eb4:	693b      	ldr	r3, [r7, #16]
 8005eb6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005eba:	2b00      	cmp	r3, #0
 8005ebc:	d109      	bne.n	8005ed2 <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005ec2:	2b00      	cmp	r3, #0
 8005ec4:	f000 8210 	beq.w	80062e8 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005ecc:	6878      	ldr	r0, [r7, #4]
 8005ece:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005ed0:	e20a      	b.n	80062e8 <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ed6:	2b00      	cmp	r3, #0
 8005ed8:	f000 8206 	beq.w	80062e8 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ee0:	6878      	ldr	r0, [r7, #4]
 8005ee2:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005ee4:	e200      	b.n	80062e8 <HAL_DMA_IRQHandler+0xe08>
 8005ee6:	bf00      	nop
 8005ee8:	40020010 	.word	0x40020010
 8005eec:	40020028 	.word	0x40020028
 8005ef0:	40020040 	.word	0x40020040
 8005ef4:	40020058 	.word	0x40020058
 8005ef8:	40020070 	.word	0x40020070
 8005efc:	40020088 	.word	0x40020088
 8005f00:	400200a0 	.word	0x400200a0
 8005f04:	400200b8 	.word	0x400200b8
 8005f08:	40020410 	.word	0x40020410
 8005f0c:	40020428 	.word	0x40020428
 8005f10:	40020440 	.word	0x40020440
 8005f14:	40020458 	.word	0x40020458
 8005f18:	40020470 	.word	0x40020470
 8005f1c:	40020488 	.word	0x40020488
 8005f20:	400204a0 	.word	0x400204a0
 8005f24:	400204b8 	.word	0x400204b8
 8005f28:	58025408 	.word	0x58025408
 8005f2c:	5802541c 	.word	0x5802541c
 8005f30:	58025430 	.word	0x58025430
 8005f34:	58025444 	.word	0x58025444
 8005f38:	58025458 	.word	0x58025458
 8005f3c:	5802546c 	.word	0x5802546c
 8005f40:	58025480 	.word	0x58025480
 8005f44:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8005f48:	693b      	ldr	r3, [r7, #16]
 8005f4a:	f003 0320 	and.w	r3, r3, #32
 8005f4e:	2b00      	cmp	r3, #0
 8005f50:	d160      	bne.n	8006014 <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	681b      	ldr	r3, [r3, #0]
 8005f56:	4a8c      	ldr	r2, [pc, #560]	; (8006188 <HAL_DMA_IRQHandler+0xca8>)
 8005f58:	4293      	cmp	r3, r2
 8005f5a:	d04a      	beq.n	8005ff2 <HAL_DMA_IRQHandler+0xb12>
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	681b      	ldr	r3, [r3, #0]
 8005f60:	4a8a      	ldr	r2, [pc, #552]	; (800618c <HAL_DMA_IRQHandler+0xcac>)
 8005f62:	4293      	cmp	r3, r2
 8005f64:	d045      	beq.n	8005ff2 <HAL_DMA_IRQHandler+0xb12>
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	681b      	ldr	r3, [r3, #0]
 8005f6a:	4a89      	ldr	r2, [pc, #548]	; (8006190 <HAL_DMA_IRQHandler+0xcb0>)
 8005f6c:	4293      	cmp	r3, r2
 8005f6e:	d040      	beq.n	8005ff2 <HAL_DMA_IRQHandler+0xb12>
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	681b      	ldr	r3, [r3, #0]
 8005f74:	4a87      	ldr	r2, [pc, #540]	; (8006194 <HAL_DMA_IRQHandler+0xcb4>)
 8005f76:	4293      	cmp	r3, r2
 8005f78:	d03b      	beq.n	8005ff2 <HAL_DMA_IRQHandler+0xb12>
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	681b      	ldr	r3, [r3, #0]
 8005f7e:	4a86      	ldr	r2, [pc, #536]	; (8006198 <HAL_DMA_IRQHandler+0xcb8>)
 8005f80:	4293      	cmp	r3, r2
 8005f82:	d036      	beq.n	8005ff2 <HAL_DMA_IRQHandler+0xb12>
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	681b      	ldr	r3, [r3, #0]
 8005f88:	4a84      	ldr	r2, [pc, #528]	; (800619c <HAL_DMA_IRQHandler+0xcbc>)
 8005f8a:	4293      	cmp	r3, r2
 8005f8c:	d031      	beq.n	8005ff2 <HAL_DMA_IRQHandler+0xb12>
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	681b      	ldr	r3, [r3, #0]
 8005f92:	4a83      	ldr	r2, [pc, #524]	; (80061a0 <HAL_DMA_IRQHandler+0xcc0>)
 8005f94:	4293      	cmp	r3, r2
 8005f96:	d02c      	beq.n	8005ff2 <HAL_DMA_IRQHandler+0xb12>
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	681b      	ldr	r3, [r3, #0]
 8005f9c:	4a81      	ldr	r2, [pc, #516]	; (80061a4 <HAL_DMA_IRQHandler+0xcc4>)
 8005f9e:	4293      	cmp	r3, r2
 8005fa0:	d027      	beq.n	8005ff2 <HAL_DMA_IRQHandler+0xb12>
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	681b      	ldr	r3, [r3, #0]
 8005fa6:	4a80      	ldr	r2, [pc, #512]	; (80061a8 <HAL_DMA_IRQHandler+0xcc8>)
 8005fa8:	4293      	cmp	r3, r2
 8005faa:	d022      	beq.n	8005ff2 <HAL_DMA_IRQHandler+0xb12>
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	681b      	ldr	r3, [r3, #0]
 8005fb0:	4a7e      	ldr	r2, [pc, #504]	; (80061ac <HAL_DMA_IRQHandler+0xccc>)
 8005fb2:	4293      	cmp	r3, r2
 8005fb4:	d01d      	beq.n	8005ff2 <HAL_DMA_IRQHandler+0xb12>
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	681b      	ldr	r3, [r3, #0]
 8005fba:	4a7d      	ldr	r2, [pc, #500]	; (80061b0 <HAL_DMA_IRQHandler+0xcd0>)
 8005fbc:	4293      	cmp	r3, r2
 8005fbe:	d018      	beq.n	8005ff2 <HAL_DMA_IRQHandler+0xb12>
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	681b      	ldr	r3, [r3, #0]
 8005fc4:	4a7b      	ldr	r2, [pc, #492]	; (80061b4 <HAL_DMA_IRQHandler+0xcd4>)
 8005fc6:	4293      	cmp	r3, r2
 8005fc8:	d013      	beq.n	8005ff2 <HAL_DMA_IRQHandler+0xb12>
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	681b      	ldr	r3, [r3, #0]
 8005fce:	4a7a      	ldr	r2, [pc, #488]	; (80061b8 <HAL_DMA_IRQHandler+0xcd8>)
 8005fd0:	4293      	cmp	r3, r2
 8005fd2:	d00e      	beq.n	8005ff2 <HAL_DMA_IRQHandler+0xb12>
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	681b      	ldr	r3, [r3, #0]
 8005fd8:	4a78      	ldr	r2, [pc, #480]	; (80061bc <HAL_DMA_IRQHandler+0xcdc>)
 8005fda:	4293      	cmp	r3, r2
 8005fdc:	d009      	beq.n	8005ff2 <HAL_DMA_IRQHandler+0xb12>
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	681b      	ldr	r3, [r3, #0]
 8005fe2:	4a77      	ldr	r2, [pc, #476]	; (80061c0 <HAL_DMA_IRQHandler+0xce0>)
 8005fe4:	4293      	cmp	r3, r2
 8005fe6:	d004      	beq.n	8005ff2 <HAL_DMA_IRQHandler+0xb12>
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	681b      	ldr	r3, [r3, #0]
 8005fec:	4a75      	ldr	r2, [pc, #468]	; (80061c4 <HAL_DMA_IRQHandler+0xce4>)
 8005fee:	4293      	cmp	r3, r2
 8005ff0:	d108      	bne.n	8006004 <HAL_DMA_IRQHandler+0xb24>
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	681b      	ldr	r3, [r3, #0]
 8005ff6:	681a      	ldr	r2, [r3, #0]
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	681b      	ldr	r3, [r3, #0]
 8005ffc:	f022 0208 	bic.w	r2, r2, #8
 8006000:	601a      	str	r2, [r3, #0]
 8006002:	e007      	b.n	8006014 <HAL_DMA_IRQHandler+0xb34>
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	681b      	ldr	r3, [r3, #0]
 8006008:	681a      	ldr	r2, [r3, #0]
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	681b      	ldr	r3, [r3, #0]
 800600e:	f022 0204 	bic.w	r2, r2, #4
 8006012:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006018:	2b00      	cmp	r3, #0
 800601a:	f000 8165 	beq.w	80062e8 <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006022:	6878      	ldr	r0, [r7, #4]
 8006024:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006026:	e15f      	b.n	80062e8 <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800602c:	f003 031f 	and.w	r3, r3, #31
 8006030:	2202      	movs	r2, #2
 8006032:	409a      	lsls	r2, r3
 8006034:	697b      	ldr	r3, [r7, #20]
 8006036:	4013      	ands	r3, r2
 8006038:	2b00      	cmp	r3, #0
 800603a:	f000 80c5 	beq.w	80061c8 <HAL_DMA_IRQHandler+0xce8>
 800603e:	693b      	ldr	r3, [r7, #16]
 8006040:	f003 0302 	and.w	r3, r3, #2
 8006044:	2b00      	cmp	r3, #0
 8006046:	f000 80bf 	beq.w	80061c8 <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800604e:	f003 031f 	and.w	r3, r3, #31
 8006052:	2202      	movs	r2, #2
 8006054:	409a      	lsls	r2, r3
 8006056:	69fb      	ldr	r3, [r7, #28]
 8006058:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800605a:	693b      	ldr	r3, [r7, #16]
 800605c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006060:	2b00      	cmp	r3, #0
 8006062:	d018      	beq.n	8006096 <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8006064:	693b      	ldr	r3, [r7, #16]
 8006066:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800606a:	2b00      	cmp	r3, #0
 800606c:	d109      	bne.n	8006082 <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006072:	2b00      	cmp	r3, #0
 8006074:	f000 813a 	beq.w	80062ec <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800607c:	6878      	ldr	r0, [r7, #4]
 800607e:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006080:	e134      	b.n	80062ec <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006086:	2b00      	cmp	r3, #0
 8006088:	f000 8130 	beq.w	80062ec <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006090:	6878      	ldr	r0, [r7, #4]
 8006092:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006094:	e12a      	b.n	80062ec <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8006096:	693b      	ldr	r3, [r7, #16]
 8006098:	f003 0320 	and.w	r3, r3, #32
 800609c:	2b00      	cmp	r3, #0
 800609e:	d168      	bne.n	8006172 <HAL_DMA_IRQHandler+0xc92>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	681b      	ldr	r3, [r3, #0]
 80060a4:	4a38      	ldr	r2, [pc, #224]	; (8006188 <HAL_DMA_IRQHandler+0xca8>)
 80060a6:	4293      	cmp	r3, r2
 80060a8:	d04a      	beq.n	8006140 <HAL_DMA_IRQHandler+0xc60>
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	681b      	ldr	r3, [r3, #0]
 80060ae:	4a37      	ldr	r2, [pc, #220]	; (800618c <HAL_DMA_IRQHandler+0xcac>)
 80060b0:	4293      	cmp	r3, r2
 80060b2:	d045      	beq.n	8006140 <HAL_DMA_IRQHandler+0xc60>
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	681b      	ldr	r3, [r3, #0]
 80060b8:	4a35      	ldr	r2, [pc, #212]	; (8006190 <HAL_DMA_IRQHandler+0xcb0>)
 80060ba:	4293      	cmp	r3, r2
 80060bc:	d040      	beq.n	8006140 <HAL_DMA_IRQHandler+0xc60>
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	681b      	ldr	r3, [r3, #0]
 80060c2:	4a34      	ldr	r2, [pc, #208]	; (8006194 <HAL_DMA_IRQHandler+0xcb4>)
 80060c4:	4293      	cmp	r3, r2
 80060c6:	d03b      	beq.n	8006140 <HAL_DMA_IRQHandler+0xc60>
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	681b      	ldr	r3, [r3, #0]
 80060cc:	4a32      	ldr	r2, [pc, #200]	; (8006198 <HAL_DMA_IRQHandler+0xcb8>)
 80060ce:	4293      	cmp	r3, r2
 80060d0:	d036      	beq.n	8006140 <HAL_DMA_IRQHandler+0xc60>
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	681b      	ldr	r3, [r3, #0]
 80060d6:	4a31      	ldr	r2, [pc, #196]	; (800619c <HAL_DMA_IRQHandler+0xcbc>)
 80060d8:	4293      	cmp	r3, r2
 80060da:	d031      	beq.n	8006140 <HAL_DMA_IRQHandler+0xc60>
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	681b      	ldr	r3, [r3, #0]
 80060e0:	4a2f      	ldr	r2, [pc, #188]	; (80061a0 <HAL_DMA_IRQHandler+0xcc0>)
 80060e2:	4293      	cmp	r3, r2
 80060e4:	d02c      	beq.n	8006140 <HAL_DMA_IRQHandler+0xc60>
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	681b      	ldr	r3, [r3, #0]
 80060ea:	4a2e      	ldr	r2, [pc, #184]	; (80061a4 <HAL_DMA_IRQHandler+0xcc4>)
 80060ec:	4293      	cmp	r3, r2
 80060ee:	d027      	beq.n	8006140 <HAL_DMA_IRQHandler+0xc60>
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	681b      	ldr	r3, [r3, #0]
 80060f4:	4a2c      	ldr	r2, [pc, #176]	; (80061a8 <HAL_DMA_IRQHandler+0xcc8>)
 80060f6:	4293      	cmp	r3, r2
 80060f8:	d022      	beq.n	8006140 <HAL_DMA_IRQHandler+0xc60>
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	681b      	ldr	r3, [r3, #0]
 80060fe:	4a2b      	ldr	r2, [pc, #172]	; (80061ac <HAL_DMA_IRQHandler+0xccc>)
 8006100:	4293      	cmp	r3, r2
 8006102:	d01d      	beq.n	8006140 <HAL_DMA_IRQHandler+0xc60>
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	681b      	ldr	r3, [r3, #0]
 8006108:	4a29      	ldr	r2, [pc, #164]	; (80061b0 <HAL_DMA_IRQHandler+0xcd0>)
 800610a:	4293      	cmp	r3, r2
 800610c:	d018      	beq.n	8006140 <HAL_DMA_IRQHandler+0xc60>
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	681b      	ldr	r3, [r3, #0]
 8006112:	4a28      	ldr	r2, [pc, #160]	; (80061b4 <HAL_DMA_IRQHandler+0xcd4>)
 8006114:	4293      	cmp	r3, r2
 8006116:	d013      	beq.n	8006140 <HAL_DMA_IRQHandler+0xc60>
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	681b      	ldr	r3, [r3, #0]
 800611c:	4a26      	ldr	r2, [pc, #152]	; (80061b8 <HAL_DMA_IRQHandler+0xcd8>)
 800611e:	4293      	cmp	r3, r2
 8006120:	d00e      	beq.n	8006140 <HAL_DMA_IRQHandler+0xc60>
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	681b      	ldr	r3, [r3, #0]
 8006126:	4a25      	ldr	r2, [pc, #148]	; (80061bc <HAL_DMA_IRQHandler+0xcdc>)
 8006128:	4293      	cmp	r3, r2
 800612a:	d009      	beq.n	8006140 <HAL_DMA_IRQHandler+0xc60>
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	681b      	ldr	r3, [r3, #0]
 8006130:	4a23      	ldr	r2, [pc, #140]	; (80061c0 <HAL_DMA_IRQHandler+0xce0>)
 8006132:	4293      	cmp	r3, r2
 8006134:	d004      	beq.n	8006140 <HAL_DMA_IRQHandler+0xc60>
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	681b      	ldr	r3, [r3, #0]
 800613a:	4a22      	ldr	r2, [pc, #136]	; (80061c4 <HAL_DMA_IRQHandler+0xce4>)
 800613c:	4293      	cmp	r3, r2
 800613e:	d108      	bne.n	8006152 <HAL_DMA_IRQHandler+0xc72>
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	681b      	ldr	r3, [r3, #0]
 8006144:	681a      	ldr	r2, [r3, #0]
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	681b      	ldr	r3, [r3, #0]
 800614a:	f022 0214 	bic.w	r2, r2, #20
 800614e:	601a      	str	r2, [r3, #0]
 8006150:	e007      	b.n	8006162 <HAL_DMA_IRQHandler+0xc82>
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	681b      	ldr	r3, [r3, #0]
 8006156:	681a      	ldr	r2, [r3, #0]
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	681b      	ldr	r3, [r3, #0]
 800615c:	f022 020a 	bic.w	r2, r2, #10
 8006160:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	2200      	movs	r2, #0
 8006166:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	2201      	movs	r2, #1
 800616e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006176:	2b00      	cmp	r3, #0
 8006178:	f000 80b8 	beq.w	80062ec <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006180:	6878      	ldr	r0, [r7, #4]
 8006182:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006184:	e0b2      	b.n	80062ec <HAL_DMA_IRQHandler+0xe0c>
 8006186:	bf00      	nop
 8006188:	40020010 	.word	0x40020010
 800618c:	40020028 	.word	0x40020028
 8006190:	40020040 	.word	0x40020040
 8006194:	40020058 	.word	0x40020058
 8006198:	40020070 	.word	0x40020070
 800619c:	40020088 	.word	0x40020088
 80061a0:	400200a0 	.word	0x400200a0
 80061a4:	400200b8 	.word	0x400200b8
 80061a8:	40020410 	.word	0x40020410
 80061ac:	40020428 	.word	0x40020428
 80061b0:	40020440 	.word	0x40020440
 80061b4:	40020458 	.word	0x40020458
 80061b8:	40020470 	.word	0x40020470
 80061bc:	40020488 	.word	0x40020488
 80061c0:	400204a0 	.word	0x400204a0
 80061c4:	400204b8 	.word	0x400204b8
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80061cc:	f003 031f 	and.w	r3, r3, #31
 80061d0:	2208      	movs	r2, #8
 80061d2:	409a      	lsls	r2, r3
 80061d4:	697b      	ldr	r3, [r7, #20]
 80061d6:	4013      	ands	r3, r2
 80061d8:	2b00      	cmp	r3, #0
 80061da:	f000 8088 	beq.w	80062ee <HAL_DMA_IRQHandler+0xe0e>
 80061de:	693b      	ldr	r3, [r7, #16]
 80061e0:	f003 0308 	and.w	r3, r3, #8
 80061e4:	2b00      	cmp	r3, #0
 80061e6:	f000 8082 	beq.w	80062ee <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	681b      	ldr	r3, [r3, #0]
 80061ee:	4a41      	ldr	r2, [pc, #260]	; (80062f4 <HAL_DMA_IRQHandler+0xe14>)
 80061f0:	4293      	cmp	r3, r2
 80061f2:	d04a      	beq.n	800628a <HAL_DMA_IRQHandler+0xdaa>
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	681b      	ldr	r3, [r3, #0]
 80061f8:	4a3f      	ldr	r2, [pc, #252]	; (80062f8 <HAL_DMA_IRQHandler+0xe18>)
 80061fa:	4293      	cmp	r3, r2
 80061fc:	d045      	beq.n	800628a <HAL_DMA_IRQHandler+0xdaa>
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	681b      	ldr	r3, [r3, #0]
 8006202:	4a3e      	ldr	r2, [pc, #248]	; (80062fc <HAL_DMA_IRQHandler+0xe1c>)
 8006204:	4293      	cmp	r3, r2
 8006206:	d040      	beq.n	800628a <HAL_DMA_IRQHandler+0xdaa>
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	681b      	ldr	r3, [r3, #0]
 800620c:	4a3c      	ldr	r2, [pc, #240]	; (8006300 <HAL_DMA_IRQHandler+0xe20>)
 800620e:	4293      	cmp	r3, r2
 8006210:	d03b      	beq.n	800628a <HAL_DMA_IRQHandler+0xdaa>
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	681b      	ldr	r3, [r3, #0]
 8006216:	4a3b      	ldr	r2, [pc, #236]	; (8006304 <HAL_DMA_IRQHandler+0xe24>)
 8006218:	4293      	cmp	r3, r2
 800621a:	d036      	beq.n	800628a <HAL_DMA_IRQHandler+0xdaa>
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	681b      	ldr	r3, [r3, #0]
 8006220:	4a39      	ldr	r2, [pc, #228]	; (8006308 <HAL_DMA_IRQHandler+0xe28>)
 8006222:	4293      	cmp	r3, r2
 8006224:	d031      	beq.n	800628a <HAL_DMA_IRQHandler+0xdaa>
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	681b      	ldr	r3, [r3, #0]
 800622a:	4a38      	ldr	r2, [pc, #224]	; (800630c <HAL_DMA_IRQHandler+0xe2c>)
 800622c:	4293      	cmp	r3, r2
 800622e:	d02c      	beq.n	800628a <HAL_DMA_IRQHandler+0xdaa>
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	681b      	ldr	r3, [r3, #0]
 8006234:	4a36      	ldr	r2, [pc, #216]	; (8006310 <HAL_DMA_IRQHandler+0xe30>)
 8006236:	4293      	cmp	r3, r2
 8006238:	d027      	beq.n	800628a <HAL_DMA_IRQHandler+0xdaa>
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	681b      	ldr	r3, [r3, #0]
 800623e:	4a35      	ldr	r2, [pc, #212]	; (8006314 <HAL_DMA_IRQHandler+0xe34>)
 8006240:	4293      	cmp	r3, r2
 8006242:	d022      	beq.n	800628a <HAL_DMA_IRQHandler+0xdaa>
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	681b      	ldr	r3, [r3, #0]
 8006248:	4a33      	ldr	r2, [pc, #204]	; (8006318 <HAL_DMA_IRQHandler+0xe38>)
 800624a:	4293      	cmp	r3, r2
 800624c:	d01d      	beq.n	800628a <HAL_DMA_IRQHandler+0xdaa>
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	681b      	ldr	r3, [r3, #0]
 8006252:	4a32      	ldr	r2, [pc, #200]	; (800631c <HAL_DMA_IRQHandler+0xe3c>)
 8006254:	4293      	cmp	r3, r2
 8006256:	d018      	beq.n	800628a <HAL_DMA_IRQHandler+0xdaa>
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	681b      	ldr	r3, [r3, #0]
 800625c:	4a30      	ldr	r2, [pc, #192]	; (8006320 <HAL_DMA_IRQHandler+0xe40>)
 800625e:	4293      	cmp	r3, r2
 8006260:	d013      	beq.n	800628a <HAL_DMA_IRQHandler+0xdaa>
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	681b      	ldr	r3, [r3, #0]
 8006266:	4a2f      	ldr	r2, [pc, #188]	; (8006324 <HAL_DMA_IRQHandler+0xe44>)
 8006268:	4293      	cmp	r3, r2
 800626a:	d00e      	beq.n	800628a <HAL_DMA_IRQHandler+0xdaa>
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	681b      	ldr	r3, [r3, #0]
 8006270:	4a2d      	ldr	r2, [pc, #180]	; (8006328 <HAL_DMA_IRQHandler+0xe48>)
 8006272:	4293      	cmp	r3, r2
 8006274:	d009      	beq.n	800628a <HAL_DMA_IRQHandler+0xdaa>
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	681b      	ldr	r3, [r3, #0]
 800627a:	4a2c      	ldr	r2, [pc, #176]	; (800632c <HAL_DMA_IRQHandler+0xe4c>)
 800627c:	4293      	cmp	r3, r2
 800627e:	d004      	beq.n	800628a <HAL_DMA_IRQHandler+0xdaa>
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	681b      	ldr	r3, [r3, #0]
 8006284:	4a2a      	ldr	r2, [pc, #168]	; (8006330 <HAL_DMA_IRQHandler+0xe50>)
 8006286:	4293      	cmp	r3, r2
 8006288:	d108      	bne.n	800629c <HAL_DMA_IRQHandler+0xdbc>
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	681b      	ldr	r3, [r3, #0]
 800628e:	681a      	ldr	r2, [r3, #0]
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	681b      	ldr	r3, [r3, #0]
 8006294:	f022 021c 	bic.w	r2, r2, #28
 8006298:	601a      	str	r2, [r3, #0]
 800629a:	e007      	b.n	80062ac <HAL_DMA_IRQHandler+0xdcc>
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	681b      	ldr	r3, [r3, #0]
 80062a0:	681a      	ldr	r2, [r3, #0]
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	681b      	ldr	r3, [r3, #0]
 80062a6:	f022 020e 	bic.w	r2, r2, #14
 80062aa:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80062b0:	f003 031f 	and.w	r3, r3, #31
 80062b4:	2201      	movs	r2, #1
 80062b6:	409a      	lsls	r2, r3
 80062b8:	69fb      	ldr	r3, [r7, #28]
 80062ba:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	2201      	movs	r2, #1
 80062c0:	655a      	str	r2, [r3, #84]	; 0x54

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	2200      	movs	r2, #0
 80062c6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	2201      	movs	r2, #1
 80062ce:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      if (hdma->XferErrorCallback != NULL)
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80062d6:	2b00      	cmp	r3, #0
 80062d8:	d009      	beq.n	80062ee <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80062de:	6878      	ldr	r0, [r7, #4]
 80062e0:	4798      	blx	r3
 80062e2:	e004      	b.n	80062ee <HAL_DMA_IRQHandler+0xe0e>
          return;
 80062e4:	bf00      	nop
 80062e6:	e002      	b.n	80062ee <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80062e8:	bf00      	nop
 80062ea:	e000      	b.n	80062ee <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80062ec:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 80062ee:	3728      	adds	r7, #40	; 0x28
 80062f0:	46bd      	mov	sp, r7
 80062f2:	bd80      	pop	{r7, pc}
 80062f4:	40020010 	.word	0x40020010
 80062f8:	40020028 	.word	0x40020028
 80062fc:	40020040 	.word	0x40020040
 8006300:	40020058 	.word	0x40020058
 8006304:	40020070 	.word	0x40020070
 8006308:	40020088 	.word	0x40020088
 800630c:	400200a0 	.word	0x400200a0
 8006310:	400200b8 	.word	0x400200b8
 8006314:	40020410 	.word	0x40020410
 8006318:	40020428 	.word	0x40020428
 800631c:	40020440 	.word	0x40020440
 8006320:	40020458 	.word	0x40020458
 8006324:	40020470 	.word	0x40020470
 8006328:	40020488 	.word	0x40020488
 800632c:	400204a0 	.word	0x400204a0
 8006330:	400204b8 	.word	0x400204b8

08006334 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8006334:	b480      	push	{r7}
 8006336:	b087      	sub	sp, #28
 8006338:	af00      	add	r7, sp, #0
 800633a:	60f8      	str	r0, [r7, #12]
 800633c:	60b9      	str	r1, [r7, #8]
 800633e:	607a      	str	r2, [r7, #4]
 8006340:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8006342:	68fb      	ldr	r3, [r7, #12]
 8006344:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006346:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8006348:	68fb      	ldr	r3, [r7, #12]
 800634a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800634c:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800634e:	68fb      	ldr	r3, [r7, #12]
 8006350:	681b      	ldr	r3, [r3, #0]
 8006352:	4a84      	ldr	r2, [pc, #528]	; (8006564 <DMA_SetConfig+0x230>)
 8006354:	4293      	cmp	r3, r2
 8006356:	d072      	beq.n	800643e <DMA_SetConfig+0x10a>
 8006358:	68fb      	ldr	r3, [r7, #12]
 800635a:	681b      	ldr	r3, [r3, #0]
 800635c:	4a82      	ldr	r2, [pc, #520]	; (8006568 <DMA_SetConfig+0x234>)
 800635e:	4293      	cmp	r3, r2
 8006360:	d06d      	beq.n	800643e <DMA_SetConfig+0x10a>
 8006362:	68fb      	ldr	r3, [r7, #12]
 8006364:	681b      	ldr	r3, [r3, #0]
 8006366:	4a81      	ldr	r2, [pc, #516]	; (800656c <DMA_SetConfig+0x238>)
 8006368:	4293      	cmp	r3, r2
 800636a:	d068      	beq.n	800643e <DMA_SetConfig+0x10a>
 800636c:	68fb      	ldr	r3, [r7, #12]
 800636e:	681b      	ldr	r3, [r3, #0]
 8006370:	4a7f      	ldr	r2, [pc, #508]	; (8006570 <DMA_SetConfig+0x23c>)
 8006372:	4293      	cmp	r3, r2
 8006374:	d063      	beq.n	800643e <DMA_SetConfig+0x10a>
 8006376:	68fb      	ldr	r3, [r7, #12]
 8006378:	681b      	ldr	r3, [r3, #0]
 800637a:	4a7e      	ldr	r2, [pc, #504]	; (8006574 <DMA_SetConfig+0x240>)
 800637c:	4293      	cmp	r3, r2
 800637e:	d05e      	beq.n	800643e <DMA_SetConfig+0x10a>
 8006380:	68fb      	ldr	r3, [r7, #12]
 8006382:	681b      	ldr	r3, [r3, #0]
 8006384:	4a7c      	ldr	r2, [pc, #496]	; (8006578 <DMA_SetConfig+0x244>)
 8006386:	4293      	cmp	r3, r2
 8006388:	d059      	beq.n	800643e <DMA_SetConfig+0x10a>
 800638a:	68fb      	ldr	r3, [r7, #12]
 800638c:	681b      	ldr	r3, [r3, #0]
 800638e:	4a7b      	ldr	r2, [pc, #492]	; (800657c <DMA_SetConfig+0x248>)
 8006390:	4293      	cmp	r3, r2
 8006392:	d054      	beq.n	800643e <DMA_SetConfig+0x10a>
 8006394:	68fb      	ldr	r3, [r7, #12]
 8006396:	681b      	ldr	r3, [r3, #0]
 8006398:	4a79      	ldr	r2, [pc, #484]	; (8006580 <DMA_SetConfig+0x24c>)
 800639a:	4293      	cmp	r3, r2
 800639c:	d04f      	beq.n	800643e <DMA_SetConfig+0x10a>
 800639e:	68fb      	ldr	r3, [r7, #12]
 80063a0:	681b      	ldr	r3, [r3, #0]
 80063a2:	4a78      	ldr	r2, [pc, #480]	; (8006584 <DMA_SetConfig+0x250>)
 80063a4:	4293      	cmp	r3, r2
 80063a6:	d04a      	beq.n	800643e <DMA_SetConfig+0x10a>
 80063a8:	68fb      	ldr	r3, [r7, #12]
 80063aa:	681b      	ldr	r3, [r3, #0]
 80063ac:	4a76      	ldr	r2, [pc, #472]	; (8006588 <DMA_SetConfig+0x254>)
 80063ae:	4293      	cmp	r3, r2
 80063b0:	d045      	beq.n	800643e <DMA_SetConfig+0x10a>
 80063b2:	68fb      	ldr	r3, [r7, #12]
 80063b4:	681b      	ldr	r3, [r3, #0]
 80063b6:	4a75      	ldr	r2, [pc, #468]	; (800658c <DMA_SetConfig+0x258>)
 80063b8:	4293      	cmp	r3, r2
 80063ba:	d040      	beq.n	800643e <DMA_SetConfig+0x10a>
 80063bc:	68fb      	ldr	r3, [r7, #12]
 80063be:	681b      	ldr	r3, [r3, #0]
 80063c0:	4a73      	ldr	r2, [pc, #460]	; (8006590 <DMA_SetConfig+0x25c>)
 80063c2:	4293      	cmp	r3, r2
 80063c4:	d03b      	beq.n	800643e <DMA_SetConfig+0x10a>
 80063c6:	68fb      	ldr	r3, [r7, #12]
 80063c8:	681b      	ldr	r3, [r3, #0]
 80063ca:	4a72      	ldr	r2, [pc, #456]	; (8006594 <DMA_SetConfig+0x260>)
 80063cc:	4293      	cmp	r3, r2
 80063ce:	d036      	beq.n	800643e <DMA_SetConfig+0x10a>
 80063d0:	68fb      	ldr	r3, [r7, #12]
 80063d2:	681b      	ldr	r3, [r3, #0]
 80063d4:	4a70      	ldr	r2, [pc, #448]	; (8006598 <DMA_SetConfig+0x264>)
 80063d6:	4293      	cmp	r3, r2
 80063d8:	d031      	beq.n	800643e <DMA_SetConfig+0x10a>
 80063da:	68fb      	ldr	r3, [r7, #12]
 80063dc:	681b      	ldr	r3, [r3, #0]
 80063de:	4a6f      	ldr	r2, [pc, #444]	; (800659c <DMA_SetConfig+0x268>)
 80063e0:	4293      	cmp	r3, r2
 80063e2:	d02c      	beq.n	800643e <DMA_SetConfig+0x10a>
 80063e4:	68fb      	ldr	r3, [r7, #12]
 80063e6:	681b      	ldr	r3, [r3, #0]
 80063e8:	4a6d      	ldr	r2, [pc, #436]	; (80065a0 <DMA_SetConfig+0x26c>)
 80063ea:	4293      	cmp	r3, r2
 80063ec:	d027      	beq.n	800643e <DMA_SetConfig+0x10a>
 80063ee:	68fb      	ldr	r3, [r7, #12]
 80063f0:	681b      	ldr	r3, [r3, #0]
 80063f2:	4a6c      	ldr	r2, [pc, #432]	; (80065a4 <DMA_SetConfig+0x270>)
 80063f4:	4293      	cmp	r3, r2
 80063f6:	d022      	beq.n	800643e <DMA_SetConfig+0x10a>
 80063f8:	68fb      	ldr	r3, [r7, #12]
 80063fa:	681b      	ldr	r3, [r3, #0]
 80063fc:	4a6a      	ldr	r2, [pc, #424]	; (80065a8 <DMA_SetConfig+0x274>)
 80063fe:	4293      	cmp	r3, r2
 8006400:	d01d      	beq.n	800643e <DMA_SetConfig+0x10a>
 8006402:	68fb      	ldr	r3, [r7, #12]
 8006404:	681b      	ldr	r3, [r3, #0]
 8006406:	4a69      	ldr	r2, [pc, #420]	; (80065ac <DMA_SetConfig+0x278>)
 8006408:	4293      	cmp	r3, r2
 800640a:	d018      	beq.n	800643e <DMA_SetConfig+0x10a>
 800640c:	68fb      	ldr	r3, [r7, #12]
 800640e:	681b      	ldr	r3, [r3, #0]
 8006410:	4a67      	ldr	r2, [pc, #412]	; (80065b0 <DMA_SetConfig+0x27c>)
 8006412:	4293      	cmp	r3, r2
 8006414:	d013      	beq.n	800643e <DMA_SetConfig+0x10a>
 8006416:	68fb      	ldr	r3, [r7, #12]
 8006418:	681b      	ldr	r3, [r3, #0]
 800641a:	4a66      	ldr	r2, [pc, #408]	; (80065b4 <DMA_SetConfig+0x280>)
 800641c:	4293      	cmp	r3, r2
 800641e:	d00e      	beq.n	800643e <DMA_SetConfig+0x10a>
 8006420:	68fb      	ldr	r3, [r7, #12]
 8006422:	681b      	ldr	r3, [r3, #0]
 8006424:	4a64      	ldr	r2, [pc, #400]	; (80065b8 <DMA_SetConfig+0x284>)
 8006426:	4293      	cmp	r3, r2
 8006428:	d009      	beq.n	800643e <DMA_SetConfig+0x10a>
 800642a:	68fb      	ldr	r3, [r7, #12]
 800642c:	681b      	ldr	r3, [r3, #0]
 800642e:	4a63      	ldr	r2, [pc, #396]	; (80065bc <DMA_SetConfig+0x288>)
 8006430:	4293      	cmp	r3, r2
 8006432:	d004      	beq.n	800643e <DMA_SetConfig+0x10a>
 8006434:	68fb      	ldr	r3, [r7, #12]
 8006436:	681b      	ldr	r3, [r3, #0]
 8006438:	4a61      	ldr	r2, [pc, #388]	; (80065c0 <DMA_SetConfig+0x28c>)
 800643a:	4293      	cmp	r3, r2
 800643c:	d101      	bne.n	8006442 <DMA_SetConfig+0x10e>
 800643e:	2301      	movs	r3, #1
 8006440:	e000      	b.n	8006444 <DMA_SetConfig+0x110>
 8006442:	2300      	movs	r3, #0
 8006444:	2b00      	cmp	r3, #0
 8006446:	d00d      	beq.n	8006464 <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8006448:	68fb      	ldr	r3, [r7, #12]
 800644a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800644c:	68fa      	ldr	r2, [r7, #12]
 800644e:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8006450:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 8006452:	68fb      	ldr	r3, [r7, #12]
 8006454:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006456:	2b00      	cmp	r3, #0
 8006458:	d004      	beq.n	8006464 <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800645a:	68fb      	ldr	r3, [r7, #12]
 800645c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800645e:	68fa      	ldr	r2, [r7, #12]
 8006460:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8006462:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8006464:	68fb      	ldr	r3, [r7, #12]
 8006466:	681b      	ldr	r3, [r3, #0]
 8006468:	4a3e      	ldr	r2, [pc, #248]	; (8006564 <DMA_SetConfig+0x230>)
 800646a:	4293      	cmp	r3, r2
 800646c:	d04a      	beq.n	8006504 <DMA_SetConfig+0x1d0>
 800646e:	68fb      	ldr	r3, [r7, #12]
 8006470:	681b      	ldr	r3, [r3, #0]
 8006472:	4a3d      	ldr	r2, [pc, #244]	; (8006568 <DMA_SetConfig+0x234>)
 8006474:	4293      	cmp	r3, r2
 8006476:	d045      	beq.n	8006504 <DMA_SetConfig+0x1d0>
 8006478:	68fb      	ldr	r3, [r7, #12]
 800647a:	681b      	ldr	r3, [r3, #0]
 800647c:	4a3b      	ldr	r2, [pc, #236]	; (800656c <DMA_SetConfig+0x238>)
 800647e:	4293      	cmp	r3, r2
 8006480:	d040      	beq.n	8006504 <DMA_SetConfig+0x1d0>
 8006482:	68fb      	ldr	r3, [r7, #12]
 8006484:	681b      	ldr	r3, [r3, #0]
 8006486:	4a3a      	ldr	r2, [pc, #232]	; (8006570 <DMA_SetConfig+0x23c>)
 8006488:	4293      	cmp	r3, r2
 800648a:	d03b      	beq.n	8006504 <DMA_SetConfig+0x1d0>
 800648c:	68fb      	ldr	r3, [r7, #12]
 800648e:	681b      	ldr	r3, [r3, #0]
 8006490:	4a38      	ldr	r2, [pc, #224]	; (8006574 <DMA_SetConfig+0x240>)
 8006492:	4293      	cmp	r3, r2
 8006494:	d036      	beq.n	8006504 <DMA_SetConfig+0x1d0>
 8006496:	68fb      	ldr	r3, [r7, #12]
 8006498:	681b      	ldr	r3, [r3, #0]
 800649a:	4a37      	ldr	r2, [pc, #220]	; (8006578 <DMA_SetConfig+0x244>)
 800649c:	4293      	cmp	r3, r2
 800649e:	d031      	beq.n	8006504 <DMA_SetConfig+0x1d0>
 80064a0:	68fb      	ldr	r3, [r7, #12]
 80064a2:	681b      	ldr	r3, [r3, #0]
 80064a4:	4a35      	ldr	r2, [pc, #212]	; (800657c <DMA_SetConfig+0x248>)
 80064a6:	4293      	cmp	r3, r2
 80064a8:	d02c      	beq.n	8006504 <DMA_SetConfig+0x1d0>
 80064aa:	68fb      	ldr	r3, [r7, #12]
 80064ac:	681b      	ldr	r3, [r3, #0]
 80064ae:	4a34      	ldr	r2, [pc, #208]	; (8006580 <DMA_SetConfig+0x24c>)
 80064b0:	4293      	cmp	r3, r2
 80064b2:	d027      	beq.n	8006504 <DMA_SetConfig+0x1d0>
 80064b4:	68fb      	ldr	r3, [r7, #12]
 80064b6:	681b      	ldr	r3, [r3, #0]
 80064b8:	4a32      	ldr	r2, [pc, #200]	; (8006584 <DMA_SetConfig+0x250>)
 80064ba:	4293      	cmp	r3, r2
 80064bc:	d022      	beq.n	8006504 <DMA_SetConfig+0x1d0>
 80064be:	68fb      	ldr	r3, [r7, #12]
 80064c0:	681b      	ldr	r3, [r3, #0]
 80064c2:	4a31      	ldr	r2, [pc, #196]	; (8006588 <DMA_SetConfig+0x254>)
 80064c4:	4293      	cmp	r3, r2
 80064c6:	d01d      	beq.n	8006504 <DMA_SetConfig+0x1d0>
 80064c8:	68fb      	ldr	r3, [r7, #12]
 80064ca:	681b      	ldr	r3, [r3, #0]
 80064cc:	4a2f      	ldr	r2, [pc, #188]	; (800658c <DMA_SetConfig+0x258>)
 80064ce:	4293      	cmp	r3, r2
 80064d0:	d018      	beq.n	8006504 <DMA_SetConfig+0x1d0>
 80064d2:	68fb      	ldr	r3, [r7, #12]
 80064d4:	681b      	ldr	r3, [r3, #0]
 80064d6:	4a2e      	ldr	r2, [pc, #184]	; (8006590 <DMA_SetConfig+0x25c>)
 80064d8:	4293      	cmp	r3, r2
 80064da:	d013      	beq.n	8006504 <DMA_SetConfig+0x1d0>
 80064dc:	68fb      	ldr	r3, [r7, #12]
 80064de:	681b      	ldr	r3, [r3, #0]
 80064e0:	4a2c      	ldr	r2, [pc, #176]	; (8006594 <DMA_SetConfig+0x260>)
 80064e2:	4293      	cmp	r3, r2
 80064e4:	d00e      	beq.n	8006504 <DMA_SetConfig+0x1d0>
 80064e6:	68fb      	ldr	r3, [r7, #12]
 80064e8:	681b      	ldr	r3, [r3, #0]
 80064ea:	4a2b      	ldr	r2, [pc, #172]	; (8006598 <DMA_SetConfig+0x264>)
 80064ec:	4293      	cmp	r3, r2
 80064ee:	d009      	beq.n	8006504 <DMA_SetConfig+0x1d0>
 80064f0:	68fb      	ldr	r3, [r7, #12]
 80064f2:	681b      	ldr	r3, [r3, #0]
 80064f4:	4a29      	ldr	r2, [pc, #164]	; (800659c <DMA_SetConfig+0x268>)
 80064f6:	4293      	cmp	r3, r2
 80064f8:	d004      	beq.n	8006504 <DMA_SetConfig+0x1d0>
 80064fa:	68fb      	ldr	r3, [r7, #12]
 80064fc:	681b      	ldr	r3, [r3, #0]
 80064fe:	4a28      	ldr	r2, [pc, #160]	; (80065a0 <DMA_SetConfig+0x26c>)
 8006500:	4293      	cmp	r3, r2
 8006502:	d101      	bne.n	8006508 <DMA_SetConfig+0x1d4>
 8006504:	2301      	movs	r3, #1
 8006506:	e000      	b.n	800650a <DMA_SetConfig+0x1d6>
 8006508:	2300      	movs	r3, #0
 800650a:	2b00      	cmp	r3, #0
 800650c:	d05a      	beq.n	80065c4 <DMA_SetConfig+0x290>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800650e:	68fb      	ldr	r3, [r7, #12]
 8006510:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006512:	f003 031f 	and.w	r3, r3, #31
 8006516:	223f      	movs	r2, #63	; 0x3f
 8006518:	409a      	lsls	r2, r3
 800651a:	697b      	ldr	r3, [r7, #20]
 800651c:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800651e:	68fb      	ldr	r3, [r7, #12]
 8006520:	681b      	ldr	r3, [r3, #0]
 8006522:	681a      	ldr	r2, [r3, #0]
 8006524:	68fb      	ldr	r3, [r7, #12]
 8006526:	681b      	ldr	r3, [r3, #0]
 8006528:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800652c:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 800652e:	68fb      	ldr	r3, [r7, #12]
 8006530:	681b      	ldr	r3, [r3, #0]
 8006532:	683a      	ldr	r2, [r7, #0]
 8006534:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8006536:	68fb      	ldr	r3, [r7, #12]
 8006538:	689b      	ldr	r3, [r3, #8]
 800653a:	2b40      	cmp	r3, #64	; 0x40
 800653c:	d108      	bne.n	8006550 <DMA_SetConfig+0x21c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 800653e:	68fb      	ldr	r3, [r7, #12]
 8006540:	681b      	ldr	r3, [r3, #0]
 8006542:	687a      	ldr	r2, [r7, #4]
 8006544:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 8006546:	68fb      	ldr	r3, [r7, #12]
 8006548:	681b      	ldr	r3, [r3, #0]
 800654a:	68ba      	ldr	r2, [r7, #8]
 800654c:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 800654e:	e087      	b.n	8006660 <DMA_SetConfig+0x32c>
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 8006550:	68fb      	ldr	r3, [r7, #12]
 8006552:	681b      	ldr	r3, [r3, #0]
 8006554:	68ba      	ldr	r2, [r7, #8]
 8006556:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 8006558:	68fb      	ldr	r3, [r7, #12]
 800655a:	681b      	ldr	r3, [r3, #0]
 800655c:	687a      	ldr	r2, [r7, #4]
 800655e:	60da      	str	r2, [r3, #12]
}
 8006560:	e07e      	b.n	8006660 <DMA_SetConfig+0x32c>
 8006562:	bf00      	nop
 8006564:	40020010 	.word	0x40020010
 8006568:	40020028 	.word	0x40020028
 800656c:	40020040 	.word	0x40020040
 8006570:	40020058 	.word	0x40020058
 8006574:	40020070 	.word	0x40020070
 8006578:	40020088 	.word	0x40020088
 800657c:	400200a0 	.word	0x400200a0
 8006580:	400200b8 	.word	0x400200b8
 8006584:	40020410 	.word	0x40020410
 8006588:	40020428 	.word	0x40020428
 800658c:	40020440 	.word	0x40020440
 8006590:	40020458 	.word	0x40020458
 8006594:	40020470 	.word	0x40020470
 8006598:	40020488 	.word	0x40020488
 800659c:	400204a0 	.word	0x400204a0
 80065a0:	400204b8 	.word	0x400204b8
 80065a4:	58025408 	.word	0x58025408
 80065a8:	5802541c 	.word	0x5802541c
 80065ac:	58025430 	.word	0x58025430
 80065b0:	58025444 	.word	0x58025444
 80065b4:	58025458 	.word	0x58025458
 80065b8:	5802546c 	.word	0x5802546c
 80065bc:	58025480 	.word	0x58025480
 80065c0:	58025494 	.word	0x58025494
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 80065c4:	68fb      	ldr	r3, [r7, #12]
 80065c6:	681b      	ldr	r3, [r3, #0]
 80065c8:	4a28      	ldr	r2, [pc, #160]	; (800666c <DMA_SetConfig+0x338>)
 80065ca:	4293      	cmp	r3, r2
 80065cc:	d022      	beq.n	8006614 <DMA_SetConfig+0x2e0>
 80065ce:	68fb      	ldr	r3, [r7, #12]
 80065d0:	681b      	ldr	r3, [r3, #0]
 80065d2:	4a27      	ldr	r2, [pc, #156]	; (8006670 <DMA_SetConfig+0x33c>)
 80065d4:	4293      	cmp	r3, r2
 80065d6:	d01d      	beq.n	8006614 <DMA_SetConfig+0x2e0>
 80065d8:	68fb      	ldr	r3, [r7, #12]
 80065da:	681b      	ldr	r3, [r3, #0]
 80065dc:	4a25      	ldr	r2, [pc, #148]	; (8006674 <DMA_SetConfig+0x340>)
 80065de:	4293      	cmp	r3, r2
 80065e0:	d018      	beq.n	8006614 <DMA_SetConfig+0x2e0>
 80065e2:	68fb      	ldr	r3, [r7, #12]
 80065e4:	681b      	ldr	r3, [r3, #0]
 80065e6:	4a24      	ldr	r2, [pc, #144]	; (8006678 <DMA_SetConfig+0x344>)
 80065e8:	4293      	cmp	r3, r2
 80065ea:	d013      	beq.n	8006614 <DMA_SetConfig+0x2e0>
 80065ec:	68fb      	ldr	r3, [r7, #12]
 80065ee:	681b      	ldr	r3, [r3, #0]
 80065f0:	4a22      	ldr	r2, [pc, #136]	; (800667c <DMA_SetConfig+0x348>)
 80065f2:	4293      	cmp	r3, r2
 80065f4:	d00e      	beq.n	8006614 <DMA_SetConfig+0x2e0>
 80065f6:	68fb      	ldr	r3, [r7, #12]
 80065f8:	681b      	ldr	r3, [r3, #0]
 80065fa:	4a21      	ldr	r2, [pc, #132]	; (8006680 <DMA_SetConfig+0x34c>)
 80065fc:	4293      	cmp	r3, r2
 80065fe:	d009      	beq.n	8006614 <DMA_SetConfig+0x2e0>
 8006600:	68fb      	ldr	r3, [r7, #12]
 8006602:	681b      	ldr	r3, [r3, #0]
 8006604:	4a1f      	ldr	r2, [pc, #124]	; (8006684 <DMA_SetConfig+0x350>)
 8006606:	4293      	cmp	r3, r2
 8006608:	d004      	beq.n	8006614 <DMA_SetConfig+0x2e0>
 800660a:	68fb      	ldr	r3, [r7, #12]
 800660c:	681b      	ldr	r3, [r3, #0]
 800660e:	4a1e      	ldr	r2, [pc, #120]	; (8006688 <DMA_SetConfig+0x354>)
 8006610:	4293      	cmp	r3, r2
 8006612:	d101      	bne.n	8006618 <DMA_SetConfig+0x2e4>
 8006614:	2301      	movs	r3, #1
 8006616:	e000      	b.n	800661a <DMA_SetConfig+0x2e6>
 8006618:	2300      	movs	r3, #0
 800661a:	2b00      	cmp	r3, #0
 800661c:	d020      	beq.n	8006660 <DMA_SetConfig+0x32c>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 800661e:	68fb      	ldr	r3, [r7, #12]
 8006620:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006622:	f003 031f 	and.w	r3, r3, #31
 8006626:	2201      	movs	r2, #1
 8006628:	409a      	lsls	r2, r3
 800662a:	693b      	ldr	r3, [r7, #16]
 800662c:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 800662e:	68fb      	ldr	r3, [r7, #12]
 8006630:	681b      	ldr	r3, [r3, #0]
 8006632:	683a      	ldr	r2, [r7, #0]
 8006634:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8006636:	68fb      	ldr	r3, [r7, #12]
 8006638:	689b      	ldr	r3, [r3, #8]
 800663a:	2b40      	cmp	r3, #64	; 0x40
 800663c:	d108      	bne.n	8006650 <DMA_SetConfig+0x31c>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 800663e:	68fb      	ldr	r3, [r7, #12]
 8006640:	681b      	ldr	r3, [r3, #0]
 8006642:	687a      	ldr	r2, [r7, #4]
 8006644:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 8006646:	68fb      	ldr	r3, [r7, #12]
 8006648:	681b      	ldr	r3, [r3, #0]
 800664a:	68ba      	ldr	r2, [r7, #8]
 800664c:	60da      	str	r2, [r3, #12]
}
 800664e:	e007      	b.n	8006660 <DMA_SetConfig+0x32c>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 8006650:	68fb      	ldr	r3, [r7, #12]
 8006652:	681b      	ldr	r3, [r3, #0]
 8006654:	68ba      	ldr	r2, [r7, #8]
 8006656:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 8006658:	68fb      	ldr	r3, [r7, #12]
 800665a:	681b      	ldr	r3, [r3, #0]
 800665c:	687a      	ldr	r2, [r7, #4]
 800665e:	60da      	str	r2, [r3, #12]
}
 8006660:	bf00      	nop
 8006662:	371c      	adds	r7, #28
 8006664:	46bd      	mov	sp, r7
 8006666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800666a:	4770      	bx	lr
 800666c:	58025408 	.word	0x58025408
 8006670:	5802541c 	.word	0x5802541c
 8006674:	58025430 	.word	0x58025430
 8006678:	58025444 	.word	0x58025444
 800667c:	58025458 	.word	0x58025458
 8006680:	5802546c 	.word	0x5802546c
 8006684:	58025480 	.word	0x58025480
 8006688:	58025494 	.word	0x58025494

0800668c <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800668c:	b480      	push	{r7}
 800668e:	b085      	sub	sp, #20
 8006690:	af00      	add	r7, sp, #0
 8006692:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	681b      	ldr	r3, [r3, #0]
 8006698:	4a42      	ldr	r2, [pc, #264]	; (80067a4 <DMA_CalcBaseAndBitshift+0x118>)
 800669a:	4293      	cmp	r3, r2
 800669c:	d04a      	beq.n	8006734 <DMA_CalcBaseAndBitshift+0xa8>
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	681b      	ldr	r3, [r3, #0]
 80066a2:	4a41      	ldr	r2, [pc, #260]	; (80067a8 <DMA_CalcBaseAndBitshift+0x11c>)
 80066a4:	4293      	cmp	r3, r2
 80066a6:	d045      	beq.n	8006734 <DMA_CalcBaseAndBitshift+0xa8>
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	681b      	ldr	r3, [r3, #0]
 80066ac:	4a3f      	ldr	r2, [pc, #252]	; (80067ac <DMA_CalcBaseAndBitshift+0x120>)
 80066ae:	4293      	cmp	r3, r2
 80066b0:	d040      	beq.n	8006734 <DMA_CalcBaseAndBitshift+0xa8>
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	681b      	ldr	r3, [r3, #0]
 80066b6:	4a3e      	ldr	r2, [pc, #248]	; (80067b0 <DMA_CalcBaseAndBitshift+0x124>)
 80066b8:	4293      	cmp	r3, r2
 80066ba:	d03b      	beq.n	8006734 <DMA_CalcBaseAndBitshift+0xa8>
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	681b      	ldr	r3, [r3, #0]
 80066c0:	4a3c      	ldr	r2, [pc, #240]	; (80067b4 <DMA_CalcBaseAndBitshift+0x128>)
 80066c2:	4293      	cmp	r3, r2
 80066c4:	d036      	beq.n	8006734 <DMA_CalcBaseAndBitshift+0xa8>
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	681b      	ldr	r3, [r3, #0]
 80066ca:	4a3b      	ldr	r2, [pc, #236]	; (80067b8 <DMA_CalcBaseAndBitshift+0x12c>)
 80066cc:	4293      	cmp	r3, r2
 80066ce:	d031      	beq.n	8006734 <DMA_CalcBaseAndBitshift+0xa8>
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	681b      	ldr	r3, [r3, #0]
 80066d4:	4a39      	ldr	r2, [pc, #228]	; (80067bc <DMA_CalcBaseAndBitshift+0x130>)
 80066d6:	4293      	cmp	r3, r2
 80066d8:	d02c      	beq.n	8006734 <DMA_CalcBaseAndBitshift+0xa8>
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	681b      	ldr	r3, [r3, #0]
 80066de:	4a38      	ldr	r2, [pc, #224]	; (80067c0 <DMA_CalcBaseAndBitshift+0x134>)
 80066e0:	4293      	cmp	r3, r2
 80066e2:	d027      	beq.n	8006734 <DMA_CalcBaseAndBitshift+0xa8>
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	681b      	ldr	r3, [r3, #0]
 80066e8:	4a36      	ldr	r2, [pc, #216]	; (80067c4 <DMA_CalcBaseAndBitshift+0x138>)
 80066ea:	4293      	cmp	r3, r2
 80066ec:	d022      	beq.n	8006734 <DMA_CalcBaseAndBitshift+0xa8>
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	681b      	ldr	r3, [r3, #0]
 80066f2:	4a35      	ldr	r2, [pc, #212]	; (80067c8 <DMA_CalcBaseAndBitshift+0x13c>)
 80066f4:	4293      	cmp	r3, r2
 80066f6:	d01d      	beq.n	8006734 <DMA_CalcBaseAndBitshift+0xa8>
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	681b      	ldr	r3, [r3, #0]
 80066fc:	4a33      	ldr	r2, [pc, #204]	; (80067cc <DMA_CalcBaseAndBitshift+0x140>)
 80066fe:	4293      	cmp	r3, r2
 8006700:	d018      	beq.n	8006734 <DMA_CalcBaseAndBitshift+0xa8>
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	681b      	ldr	r3, [r3, #0]
 8006706:	4a32      	ldr	r2, [pc, #200]	; (80067d0 <DMA_CalcBaseAndBitshift+0x144>)
 8006708:	4293      	cmp	r3, r2
 800670a:	d013      	beq.n	8006734 <DMA_CalcBaseAndBitshift+0xa8>
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	681b      	ldr	r3, [r3, #0]
 8006710:	4a30      	ldr	r2, [pc, #192]	; (80067d4 <DMA_CalcBaseAndBitshift+0x148>)
 8006712:	4293      	cmp	r3, r2
 8006714:	d00e      	beq.n	8006734 <DMA_CalcBaseAndBitshift+0xa8>
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	681b      	ldr	r3, [r3, #0]
 800671a:	4a2f      	ldr	r2, [pc, #188]	; (80067d8 <DMA_CalcBaseAndBitshift+0x14c>)
 800671c:	4293      	cmp	r3, r2
 800671e:	d009      	beq.n	8006734 <DMA_CalcBaseAndBitshift+0xa8>
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	681b      	ldr	r3, [r3, #0]
 8006724:	4a2d      	ldr	r2, [pc, #180]	; (80067dc <DMA_CalcBaseAndBitshift+0x150>)
 8006726:	4293      	cmp	r3, r2
 8006728:	d004      	beq.n	8006734 <DMA_CalcBaseAndBitshift+0xa8>
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	681b      	ldr	r3, [r3, #0]
 800672e:	4a2c      	ldr	r2, [pc, #176]	; (80067e0 <DMA_CalcBaseAndBitshift+0x154>)
 8006730:	4293      	cmp	r3, r2
 8006732:	d101      	bne.n	8006738 <DMA_CalcBaseAndBitshift+0xac>
 8006734:	2301      	movs	r3, #1
 8006736:	e000      	b.n	800673a <DMA_CalcBaseAndBitshift+0xae>
 8006738:	2300      	movs	r3, #0
 800673a:	2b00      	cmp	r3, #0
 800673c:	d024      	beq.n	8006788 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	681b      	ldr	r3, [r3, #0]
 8006742:	b2db      	uxtb	r3, r3
 8006744:	3b10      	subs	r3, #16
 8006746:	4a27      	ldr	r2, [pc, #156]	; (80067e4 <DMA_CalcBaseAndBitshift+0x158>)
 8006748:	fba2 2303 	umull	r2, r3, r2, r3
 800674c:	091b      	lsrs	r3, r3, #4
 800674e:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8006750:	68fb      	ldr	r3, [r7, #12]
 8006752:	f003 0307 	and.w	r3, r3, #7
 8006756:	4a24      	ldr	r2, [pc, #144]	; (80067e8 <DMA_CalcBaseAndBitshift+0x15c>)
 8006758:	5cd3      	ldrb	r3, [r2, r3]
 800675a:	461a      	mov	r2, r3
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	65da      	str	r2, [r3, #92]	; 0x5c

    if (stream_number > 3U)
 8006760:	68fb      	ldr	r3, [r7, #12]
 8006762:	2b03      	cmp	r3, #3
 8006764:	d908      	bls.n	8006778 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	681b      	ldr	r3, [r3, #0]
 800676a:	461a      	mov	r2, r3
 800676c:	4b1f      	ldr	r3, [pc, #124]	; (80067ec <DMA_CalcBaseAndBitshift+0x160>)
 800676e:	4013      	ands	r3, r2
 8006770:	1d1a      	adds	r2, r3, #4
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	659a      	str	r2, [r3, #88]	; 0x58
 8006776:	e00d      	b.n	8006794 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	681b      	ldr	r3, [r3, #0]
 800677c:	461a      	mov	r2, r3
 800677e:	4b1b      	ldr	r3, [pc, #108]	; (80067ec <DMA_CalcBaseAndBitshift+0x160>)
 8006780:	4013      	ands	r3, r2
 8006782:	687a      	ldr	r2, [r7, #4]
 8006784:	6593      	str	r3, [r2, #88]	; 0x58
 8006786:	e005      	b.n	8006794 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	681b      	ldr	r3, [r3, #0]
 800678c:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	659a      	str	r2, [r3, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8006798:	4618      	mov	r0, r3
 800679a:	3714      	adds	r7, #20
 800679c:	46bd      	mov	sp, r7
 800679e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067a2:	4770      	bx	lr
 80067a4:	40020010 	.word	0x40020010
 80067a8:	40020028 	.word	0x40020028
 80067ac:	40020040 	.word	0x40020040
 80067b0:	40020058 	.word	0x40020058
 80067b4:	40020070 	.word	0x40020070
 80067b8:	40020088 	.word	0x40020088
 80067bc:	400200a0 	.word	0x400200a0
 80067c0:	400200b8 	.word	0x400200b8
 80067c4:	40020410 	.word	0x40020410
 80067c8:	40020428 	.word	0x40020428
 80067cc:	40020440 	.word	0x40020440
 80067d0:	40020458 	.word	0x40020458
 80067d4:	40020470 	.word	0x40020470
 80067d8:	40020488 	.word	0x40020488
 80067dc:	400204a0 	.word	0x400204a0
 80067e0:	400204b8 	.word	0x400204b8
 80067e4:	aaaaaaab 	.word	0xaaaaaaab
 80067e8:	0801b00c 	.word	0x0801b00c
 80067ec:	fffffc00 	.word	0xfffffc00

080067f0 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80067f0:	b480      	push	{r7}
 80067f2:	b085      	sub	sp, #20
 80067f4:	af00      	add	r7, sp, #0
 80067f6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80067f8:	2300      	movs	r3, #0
 80067fa:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	699b      	ldr	r3, [r3, #24]
 8006800:	2b00      	cmp	r3, #0
 8006802:	d120      	bne.n	8006846 <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006808:	2b03      	cmp	r3, #3
 800680a:	d858      	bhi.n	80068be <DMA_CheckFifoParam+0xce>
 800680c:	a201      	add	r2, pc, #4	; (adr r2, 8006814 <DMA_CheckFifoParam+0x24>)
 800680e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006812:	bf00      	nop
 8006814:	08006825 	.word	0x08006825
 8006818:	08006837 	.word	0x08006837
 800681c:	08006825 	.word	0x08006825
 8006820:	080068bf 	.word	0x080068bf
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006828:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800682c:	2b00      	cmp	r3, #0
 800682e:	d048      	beq.n	80068c2 <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 8006830:	2301      	movs	r3, #1
 8006832:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8006834:	e045      	b.n	80068c2 <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800683a:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800683e:	d142      	bne.n	80068c6 <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 8006840:	2301      	movs	r3, #1
 8006842:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8006844:	e03f      	b.n	80068c6 <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	699b      	ldr	r3, [r3, #24]
 800684a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800684e:	d123      	bne.n	8006898 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006854:	2b03      	cmp	r3, #3
 8006856:	d838      	bhi.n	80068ca <DMA_CheckFifoParam+0xda>
 8006858:	a201      	add	r2, pc, #4	; (adr r2, 8006860 <DMA_CheckFifoParam+0x70>)
 800685a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800685e:	bf00      	nop
 8006860:	08006871 	.word	0x08006871
 8006864:	08006877 	.word	0x08006877
 8006868:	08006871 	.word	0x08006871
 800686c:	08006889 	.word	0x08006889
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 8006870:	2301      	movs	r3, #1
 8006872:	73fb      	strb	r3, [r7, #15]
        break;
 8006874:	e030      	b.n	80068d8 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800687a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800687e:	2b00      	cmp	r3, #0
 8006880:	d025      	beq.n	80068ce <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 8006882:	2301      	movs	r3, #1
 8006884:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8006886:	e022      	b.n	80068ce <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800688c:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8006890:	d11f      	bne.n	80068d2 <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 8006892:	2301      	movs	r3, #1
 8006894:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8006896:	e01c      	b.n	80068d2 <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800689c:	2b02      	cmp	r3, #2
 800689e:	d902      	bls.n	80068a6 <DMA_CheckFifoParam+0xb6>
 80068a0:	2b03      	cmp	r3, #3
 80068a2:	d003      	beq.n	80068ac <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 80068a4:	e018      	b.n	80068d8 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 80068a6:	2301      	movs	r3, #1
 80068a8:	73fb      	strb	r3, [r7, #15]
        break;
 80068aa:	e015      	b.n	80068d8 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80068b0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80068b4:	2b00      	cmp	r3, #0
 80068b6:	d00e      	beq.n	80068d6 <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 80068b8:	2301      	movs	r3, #1
 80068ba:	73fb      	strb	r3, [r7, #15]
    break;
 80068bc:	e00b      	b.n	80068d6 <DMA_CheckFifoParam+0xe6>
        break;
 80068be:	bf00      	nop
 80068c0:	e00a      	b.n	80068d8 <DMA_CheckFifoParam+0xe8>
        break;
 80068c2:	bf00      	nop
 80068c4:	e008      	b.n	80068d8 <DMA_CheckFifoParam+0xe8>
        break;
 80068c6:	bf00      	nop
 80068c8:	e006      	b.n	80068d8 <DMA_CheckFifoParam+0xe8>
        break;
 80068ca:	bf00      	nop
 80068cc:	e004      	b.n	80068d8 <DMA_CheckFifoParam+0xe8>
        break;
 80068ce:	bf00      	nop
 80068d0:	e002      	b.n	80068d8 <DMA_CheckFifoParam+0xe8>
        break;
 80068d2:	bf00      	nop
 80068d4:	e000      	b.n	80068d8 <DMA_CheckFifoParam+0xe8>
    break;
 80068d6:	bf00      	nop
    }
  }

  return status;
 80068d8:	7bfb      	ldrb	r3, [r7, #15]
}
 80068da:	4618      	mov	r0, r3
 80068dc:	3714      	adds	r7, #20
 80068de:	46bd      	mov	sp, r7
 80068e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068e4:	4770      	bx	lr
 80068e6:	bf00      	nop

080068e8 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80068e8:	b480      	push	{r7}
 80068ea:	b085      	sub	sp, #20
 80068ec:	af00      	add	r7, sp, #0
 80068ee:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	681b      	ldr	r3, [r3, #0]
 80068f4:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	681b      	ldr	r3, [r3, #0]
 80068fa:	4a38      	ldr	r2, [pc, #224]	; (80069dc <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 80068fc:	4293      	cmp	r3, r2
 80068fe:	d022      	beq.n	8006946 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	681b      	ldr	r3, [r3, #0]
 8006904:	4a36      	ldr	r2, [pc, #216]	; (80069e0 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 8006906:	4293      	cmp	r3, r2
 8006908:	d01d      	beq.n	8006946 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	681b      	ldr	r3, [r3, #0]
 800690e:	4a35      	ldr	r2, [pc, #212]	; (80069e4 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 8006910:	4293      	cmp	r3, r2
 8006912:	d018      	beq.n	8006946 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	681b      	ldr	r3, [r3, #0]
 8006918:	4a33      	ldr	r2, [pc, #204]	; (80069e8 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 800691a:	4293      	cmp	r3, r2
 800691c:	d013      	beq.n	8006946 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	681b      	ldr	r3, [r3, #0]
 8006922:	4a32      	ldr	r2, [pc, #200]	; (80069ec <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 8006924:	4293      	cmp	r3, r2
 8006926:	d00e      	beq.n	8006946 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	681b      	ldr	r3, [r3, #0]
 800692c:	4a30      	ldr	r2, [pc, #192]	; (80069f0 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 800692e:	4293      	cmp	r3, r2
 8006930:	d009      	beq.n	8006946 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	681b      	ldr	r3, [r3, #0]
 8006936:	4a2f      	ldr	r2, [pc, #188]	; (80069f4 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 8006938:	4293      	cmp	r3, r2
 800693a:	d004      	beq.n	8006946 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	681b      	ldr	r3, [r3, #0]
 8006940:	4a2d      	ldr	r2, [pc, #180]	; (80069f8 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 8006942:	4293      	cmp	r3, r2
 8006944:	d101      	bne.n	800694a <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 8006946:	2301      	movs	r3, #1
 8006948:	e000      	b.n	800694c <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 800694a:	2300      	movs	r3, #0
 800694c:	2b00      	cmp	r3, #0
 800694e:	d01a      	beq.n	8006986 <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	681b      	ldr	r3, [r3, #0]
 8006954:	b2db      	uxtb	r3, r3
 8006956:	3b08      	subs	r3, #8
 8006958:	4a28      	ldr	r2, [pc, #160]	; (80069fc <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 800695a:	fba2 2303 	umull	r2, r3, r2, r3
 800695e:	091b      	lsrs	r3, r3, #4
 8006960:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 8006962:	68fa      	ldr	r2, [r7, #12]
 8006964:	4b26      	ldr	r3, [pc, #152]	; (8006a00 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 8006966:	4413      	add	r3, r2
 8006968:	009b      	lsls	r3, r3, #2
 800696a:	461a      	mov	r2, r3
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	4a24      	ldr	r2, [pc, #144]	; (8006a04 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 8006974:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8006976:	68fb      	ldr	r3, [r7, #12]
 8006978:	f003 031f 	and.w	r3, r3, #31
 800697c:	2201      	movs	r2, #1
 800697e:	409a      	lsls	r2, r3
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	669a      	str	r2, [r3, #104]	; 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 8006984:	e024      	b.n	80069d0 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	681b      	ldr	r3, [r3, #0]
 800698a:	b2db      	uxtb	r3, r3
 800698c:	3b10      	subs	r3, #16
 800698e:	4a1e      	ldr	r2, [pc, #120]	; (8006a08 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 8006990:	fba2 2303 	umull	r2, r3, r2, r3
 8006994:	091b      	lsrs	r3, r3, #4
 8006996:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8006998:	68bb      	ldr	r3, [r7, #8]
 800699a:	4a1c      	ldr	r2, [pc, #112]	; (8006a0c <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 800699c:	4293      	cmp	r3, r2
 800699e:	d806      	bhi.n	80069ae <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 80069a0:	68bb      	ldr	r3, [r7, #8]
 80069a2:	4a1b      	ldr	r2, [pc, #108]	; (8006a10 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 80069a4:	4293      	cmp	r3, r2
 80069a6:	d902      	bls.n	80069ae <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 80069a8:	68fb      	ldr	r3, [r7, #12]
 80069aa:	3308      	adds	r3, #8
 80069ac:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 80069ae:	68fa      	ldr	r2, [r7, #12]
 80069b0:	4b18      	ldr	r3, [pc, #96]	; (8006a14 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 80069b2:	4413      	add	r3, r2
 80069b4:	009b      	lsls	r3, r3, #2
 80069b6:	461a      	mov	r2, r3
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	4a16      	ldr	r2, [pc, #88]	; (8006a18 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 80069c0:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 80069c2:	68fb      	ldr	r3, [r7, #12]
 80069c4:	f003 031f 	and.w	r3, r3, #31
 80069c8:	2201      	movs	r2, #1
 80069ca:	409a      	lsls	r2, r3
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	669a      	str	r2, [r3, #104]	; 0x68
}
 80069d0:	bf00      	nop
 80069d2:	3714      	adds	r7, #20
 80069d4:	46bd      	mov	sp, r7
 80069d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069da:	4770      	bx	lr
 80069dc:	58025408 	.word	0x58025408
 80069e0:	5802541c 	.word	0x5802541c
 80069e4:	58025430 	.word	0x58025430
 80069e8:	58025444 	.word	0x58025444
 80069ec:	58025458 	.word	0x58025458
 80069f0:	5802546c 	.word	0x5802546c
 80069f4:	58025480 	.word	0x58025480
 80069f8:	58025494 	.word	0x58025494
 80069fc:	cccccccd 	.word	0xcccccccd
 8006a00:	16009600 	.word	0x16009600
 8006a04:	58025880 	.word	0x58025880
 8006a08:	aaaaaaab 	.word	0xaaaaaaab
 8006a0c:	400204b8 	.word	0x400204b8
 8006a10:	4002040f 	.word	0x4002040f
 8006a14:	10008200 	.word	0x10008200
 8006a18:	40020880 	.word	0x40020880

08006a1c <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8006a1c:	b480      	push	{r7}
 8006a1e:	b085      	sub	sp, #20
 8006a20:	af00      	add	r7, sp, #0
 8006a22:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	685b      	ldr	r3, [r3, #4]
 8006a28:	b2db      	uxtb	r3, r3
 8006a2a:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 8006a2c:	68fb      	ldr	r3, [r7, #12]
 8006a2e:	2b00      	cmp	r3, #0
 8006a30:	d04a      	beq.n	8006ac8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 8006a32:	68fb      	ldr	r3, [r7, #12]
 8006a34:	2b08      	cmp	r3, #8
 8006a36:	d847      	bhi.n	8006ac8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	681b      	ldr	r3, [r3, #0]
 8006a3c:	4a25      	ldr	r2, [pc, #148]	; (8006ad4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 8006a3e:	4293      	cmp	r3, r2
 8006a40:	d022      	beq.n	8006a88 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	681b      	ldr	r3, [r3, #0]
 8006a46:	4a24      	ldr	r2, [pc, #144]	; (8006ad8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 8006a48:	4293      	cmp	r3, r2
 8006a4a:	d01d      	beq.n	8006a88 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	681b      	ldr	r3, [r3, #0]
 8006a50:	4a22      	ldr	r2, [pc, #136]	; (8006adc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 8006a52:	4293      	cmp	r3, r2
 8006a54:	d018      	beq.n	8006a88 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	681b      	ldr	r3, [r3, #0]
 8006a5a:	4a21      	ldr	r2, [pc, #132]	; (8006ae0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 8006a5c:	4293      	cmp	r3, r2
 8006a5e:	d013      	beq.n	8006a88 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	681b      	ldr	r3, [r3, #0]
 8006a64:	4a1f      	ldr	r2, [pc, #124]	; (8006ae4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 8006a66:	4293      	cmp	r3, r2
 8006a68:	d00e      	beq.n	8006a88 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	681b      	ldr	r3, [r3, #0]
 8006a6e:	4a1e      	ldr	r2, [pc, #120]	; (8006ae8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 8006a70:	4293      	cmp	r3, r2
 8006a72:	d009      	beq.n	8006a88 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	681b      	ldr	r3, [r3, #0]
 8006a78:	4a1c      	ldr	r2, [pc, #112]	; (8006aec <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 8006a7a:	4293      	cmp	r3, r2
 8006a7c:	d004      	beq.n	8006a88 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	681b      	ldr	r3, [r3, #0]
 8006a82:	4a1b      	ldr	r2, [pc, #108]	; (8006af0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 8006a84:	4293      	cmp	r3, r2
 8006a86:	d101      	bne.n	8006a8c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 8006a88:	2301      	movs	r3, #1
 8006a8a:	e000      	b.n	8006a8e <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 8006a8c:	2300      	movs	r3, #0
 8006a8e:	2b00      	cmp	r3, #0
 8006a90:	d00a      	beq.n	8006aa8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 8006a92:	68fa      	ldr	r2, [r7, #12]
 8006a94:	4b17      	ldr	r3, [pc, #92]	; (8006af4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 8006a96:	4413      	add	r3, r2
 8006a98:	009b      	lsls	r3, r3, #2
 8006a9a:	461a      	mov	r2, r3
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	4a15      	ldr	r2, [pc, #84]	; (8006af8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 8006aa4:	671a      	str	r2, [r3, #112]	; 0x70
 8006aa6:	e009      	b.n	8006abc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8006aa8:	68fa      	ldr	r2, [r7, #12]
 8006aaa:	4b14      	ldr	r3, [pc, #80]	; (8006afc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 8006aac:	4413      	add	r3, r2
 8006aae:	009b      	lsls	r3, r3, #2
 8006ab0:	461a      	mov	r2, r3
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	4a11      	ldr	r2, [pc, #68]	; (8006b00 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 8006aba:	671a      	str	r2, [r3, #112]	; 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 8006abc:	68fb      	ldr	r3, [r7, #12]
 8006abe:	3b01      	subs	r3, #1
 8006ac0:	2201      	movs	r2, #1
 8006ac2:	409a      	lsls	r2, r3
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	675a      	str	r2, [r3, #116]	; 0x74
  }
}
 8006ac8:	bf00      	nop
 8006aca:	3714      	adds	r7, #20
 8006acc:	46bd      	mov	sp, r7
 8006ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ad2:	4770      	bx	lr
 8006ad4:	58025408 	.word	0x58025408
 8006ad8:	5802541c 	.word	0x5802541c
 8006adc:	58025430 	.word	0x58025430
 8006ae0:	58025444 	.word	0x58025444
 8006ae4:	58025458 	.word	0x58025458
 8006ae8:	5802546c 	.word	0x5802546c
 8006aec:	58025480 	.word	0x58025480
 8006af0:	58025494 	.word	0x58025494
 8006af4:	1600963f 	.word	0x1600963f
 8006af8:	58025940 	.word	0x58025940
 8006afc:	1000823f 	.word	0x1000823f
 8006b00:	40020940 	.word	0x40020940

08006b04 <HAL_FDCAN_Init>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
 8006b04:	b580      	push	{r7, lr}
 8006b06:	b098      	sub	sp, #96	; 0x60
 8006b08:	af00      	add	r7, sp, #0
 8006b0a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  const uint32_t CvtEltSize[] = {0, 0, 0, 0, 0, 1, 2, 3, 4, 0, 5, 0, 0, 0, 6, 0, 0, 0, 7};
 8006b0c:	4a84      	ldr	r2, [pc, #528]	; (8006d20 <HAL_FDCAN_Init+0x21c>)
 8006b0e:	f107 030c 	add.w	r3, r7, #12
 8006b12:	4611      	mov	r1, r2
 8006b14:	224c      	movs	r2, #76	; 0x4c
 8006b16:	4618      	mov	r0, r3
 8006b18:	f012 fd1e 	bl	8019558 <memcpy>

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	2b00      	cmp	r3, #0
 8006b20:	d101      	bne.n	8006b26 <HAL_FDCAN_Init+0x22>
  {
    return HAL_ERROR;
 8006b22:	2301      	movs	r3, #1
 8006b24:	e1ca      	b.n	8006ebc <HAL_FDCAN_Init+0x3b8>
  }

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	681b      	ldr	r3, [r3, #0]
 8006b2a:	4a7e      	ldr	r2, [pc, #504]	; (8006d24 <HAL_FDCAN_Init+0x220>)
 8006b2c:	4293      	cmp	r3, r2
 8006b2e:	d106      	bne.n	8006b3e <HAL_FDCAN_Init+0x3a>
  {
    hfdcan->ttcan = (TTCAN_TypeDef *)((uint32_t)hfdcan->Instance + 0x100U);
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	681b      	ldr	r3, [r3, #0]
 8006b34:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8006b38:	461a      	mov	r2, r3
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	605a      	str	r2, [r3, #4]

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8006b44:	b2db      	uxtb	r3, r3
 8006b46:	2b00      	cmp	r3, #0
 8006b48:	d106      	bne.n	8006b58 <HAL_FDCAN_Init+0x54>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	2200      	movs	r2, #0
 8006b4e:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99

    /* Init the low level hardware: CLOCK, NVIC */
    HAL_FDCAN_MspInit(hfdcan);
 8006b52:	6878      	ldr	r0, [r7, #4]
 8006b54:	f7fd f94e 	bl	8003df4 <HAL_FDCAN_MspInit>
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	681b      	ldr	r3, [r3, #0]
 8006b5c:	699a      	ldr	r2, [r3, #24]
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	681b      	ldr	r3, [r3, #0]
 8006b62:	f022 0210 	bic.w	r2, r2, #16
 8006b66:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8006b68:	f7fd fdaa 	bl	80046c0 <HAL_GetTick>
 8006b6c:	65f8      	str	r0, [r7, #92]	; 0x5c

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8006b6e:	e014      	b.n	8006b9a <HAL_FDCAN_Init+0x96>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8006b70:	f7fd fda6 	bl	80046c0 <HAL_GetTick>
 8006b74:	4602      	mov	r2, r0
 8006b76:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006b78:	1ad3      	subs	r3, r2, r3
 8006b7a:	2b0a      	cmp	r3, #10
 8006b7c:	d90d      	bls.n	8006b9a <HAL_FDCAN_Init+0x96>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8006b84:	f043 0201 	orr.w	r2, r3, #1
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	2203      	movs	r2, #3
 8006b92:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

      return HAL_ERROR;
 8006b96:	2301      	movs	r3, #1
 8006b98:	e190      	b.n	8006ebc <HAL_FDCAN_Init+0x3b8>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	681b      	ldr	r3, [r3, #0]
 8006b9e:	699b      	ldr	r3, [r3, #24]
 8006ba0:	f003 0308 	and.w	r3, r3, #8
 8006ba4:	2b08      	cmp	r3, #8
 8006ba6:	d0e3      	beq.n	8006b70 <HAL_FDCAN_Init+0x6c>
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	681b      	ldr	r3, [r3, #0]
 8006bac:	699a      	ldr	r2, [r3, #24]
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	681b      	ldr	r3, [r3, #0]
 8006bb2:	f042 0201 	orr.w	r2, r2, #1
 8006bb6:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8006bb8:	f7fd fd82 	bl	80046c0 <HAL_GetTick>
 8006bbc:	65f8      	str	r0, [r7, #92]	; 0x5c

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8006bbe:	e014      	b.n	8006bea <HAL_FDCAN_Init+0xe6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8006bc0:	f7fd fd7e 	bl	80046c0 <HAL_GetTick>
 8006bc4:	4602      	mov	r2, r0
 8006bc6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006bc8:	1ad3      	subs	r3, r2, r3
 8006bca:	2b0a      	cmp	r3, #10
 8006bcc:	d90d      	bls.n	8006bea <HAL_FDCAN_Init+0xe6>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8006bd4:	f043 0201 	orr.w	r2, r3, #1
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	2203      	movs	r2, #3
 8006be2:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

      return HAL_ERROR;
 8006be6:	2301      	movs	r3, #1
 8006be8:	e168      	b.n	8006ebc <HAL_FDCAN_Init+0x3b8>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	681b      	ldr	r3, [r3, #0]
 8006bee:	699b      	ldr	r3, [r3, #24]
 8006bf0:	f003 0301 	and.w	r3, r3, #1
 8006bf4:	2b00      	cmp	r3, #0
 8006bf6:	d0e3      	beq.n	8006bc0 <HAL_FDCAN_Init+0xbc>
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	681b      	ldr	r3, [r3, #0]
 8006bfc:	699a      	ldr	r2, [r3, #24]
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	681b      	ldr	r3, [r3, #0]
 8006c02:	f042 0202 	orr.w	r2, r2, #2
 8006c06:	619a      	str	r2, [r3, #24]

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	7c1b      	ldrb	r3, [r3, #16]
 8006c0c:	2b01      	cmp	r3, #1
 8006c0e:	d108      	bne.n	8006c22 <HAL_FDCAN_Init+0x11e>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	681b      	ldr	r3, [r3, #0]
 8006c14:	699a      	ldr	r2, [r3, #24]
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	681b      	ldr	r3, [r3, #0]
 8006c1a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006c1e:	619a      	str	r2, [r3, #24]
 8006c20:	e007      	b.n	8006c32 <HAL_FDCAN_Init+0x12e>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	681b      	ldr	r3, [r3, #0]
 8006c26:	699a      	ldr	r2, [r3, #24]
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	681b      	ldr	r3, [r3, #0]
 8006c2c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006c30:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	7c5b      	ldrb	r3, [r3, #17]
 8006c36:	2b01      	cmp	r3, #1
 8006c38:	d108      	bne.n	8006c4c <HAL_FDCAN_Init+0x148>
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	681b      	ldr	r3, [r3, #0]
 8006c3e:	699a      	ldr	r2, [r3, #24]
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	681b      	ldr	r3, [r3, #0]
 8006c44:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006c48:	619a      	str	r2, [r3, #24]
 8006c4a:	e007      	b.n	8006c5c <HAL_FDCAN_Init+0x158>
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	681b      	ldr	r3, [r3, #0]
 8006c50:	699a      	ldr	r2, [r3, #24]
 8006c52:	687b      	ldr	r3, [r7, #4]
 8006c54:	681b      	ldr	r3, [r3, #0]
 8006c56:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8006c5a:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	7c9b      	ldrb	r3, [r3, #18]
 8006c60:	2b01      	cmp	r3, #1
 8006c62:	d108      	bne.n	8006c76 <HAL_FDCAN_Init+0x172>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	681b      	ldr	r3, [r3, #0]
 8006c68:	699a      	ldr	r2, [r3, #24]
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	681b      	ldr	r3, [r3, #0]
 8006c6e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8006c72:	619a      	str	r2, [r3, #24]
 8006c74:	e007      	b.n	8006c86 <HAL_FDCAN_Init+0x182>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8006c76:	687b      	ldr	r3, [r7, #4]
 8006c78:	681b      	ldr	r3, [r3, #0]
 8006c7a:	699a      	ldr	r2, [r3, #24]
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	681b      	ldr	r3, [r3, #0]
 8006c80:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8006c84:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	681b      	ldr	r3, [r3, #0]
 8006c8a:	699b      	ldr	r3, [r3, #24]
 8006c8c:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	689a      	ldr	r2, [r3, #8]
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	681b      	ldr	r3, [r3, #0]
 8006c98:	430a      	orrs	r2, r1
 8006c9a:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	681b      	ldr	r3, [r3, #0]
 8006ca0:	699a      	ldr	r2, [r3, #24]
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	681b      	ldr	r3, [r3, #0]
 8006ca6:	f022 02a4 	bic.w	r2, r2, #164	; 0xa4
 8006caa:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	681b      	ldr	r3, [r3, #0]
 8006cb0:	691a      	ldr	r2, [r3, #16]
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	681b      	ldr	r3, [r3, #0]
 8006cb6:	f022 0210 	bic.w	r2, r2, #16
 8006cba:	611a      	str	r2, [r3, #16]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	68db      	ldr	r3, [r3, #12]
 8006cc0:	2b01      	cmp	r3, #1
 8006cc2:	d108      	bne.n	8006cd6 <HAL_FDCAN_Init+0x1d2>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	681b      	ldr	r3, [r3, #0]
 8006cc8:	699a      	ldr	r2, [r3, #24]
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	681b      	ldr	r3, [r3, #0]
 8006cce:	f042 0204 	orr.w	r2, r2, #4
 8006cd2:	619a      	str	r2, [r3, #24]
 8006cd4:	e030      	b.n	8006d38 <HAL_FDCAN_Init+0x234>
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	68db      	ldr	r3, [r3, #12]
 8006cda:	2b00      	cmp	r3, #0
 8006cdc:	d02c      	beq.n	8006d38 <HAL_FDCAN_Init+0x234>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	68db      	ldr	r3, [r3, #12]
 8006ce2:	2b02      	cmp	r3, #2
 8006ce4:	d020      	beq.n	8006d28 <HAL_FDCAN_Init+0x224>
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	681b      	ldr	r3, [r3, #0]
 8006cea:	699a      	ldr	r2, [r3, #24]
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	681b      	ldr	r3, [r3, #0]
 8006cf0:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8006cf4:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	681b      	ldr	r3, [r3, #0]
 8006cfa:	691a      	ldr	r2, [r3, #16]
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	681b      	ldr	r3, [r3, #0]
 8006d00:	f042 0210 	orr.w	r2, r2, #16
 8006d04:	611a      	str	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	68db      	ldr	r3, [r3, #12]
 8006d0a:	2b03      	cmp	r3, #3
 8006d0c:	d114      	bne.n	8006d38 <HAL_FDCAN_Init+0x234>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	681b      	ldr	r3, [r3, #0]
 8006d12:	699a      	ldr	r2, [r3, #24]
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	681b      	ldr	r3, [r3, #0]
 8006d18:	f042 0220 	orr.w	r2, r2, #32
 8006d1c:	619a      	str	r2, [r3, #24]
 8006d1e:	e00b      	b.n	8006d38 <HAL_FDCAN_Init+0x234>
 8006d20:	0801af18 	.word	0x0801af18
 8006d24:	4000a000 	.word	0x4000a000
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	681b      	ldr	r3, [r3, #0]
 8006d2c:	699a      	ldr	r2, [r3, #24]
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	681b      	ldr	r3, [r3, #0]
 8006d32:	f042 0220 	orr.w	r2, r2, #32
 8006d36:	619a      	str	r2, [r3, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	699b      	ldr	r3, [r3, #24]
 8006d3c:	3b01      	subs	r3, #1
 8006d3e:	065a      	lsls	r2, r3, #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	69db      	ldr	r3, [r3, #28]
 8006d44:	3b01      	subs	r3, #1
 8006d46:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8006d48:	431a      	orrs	r2, r3
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	6a1b      	ldr	r3, [r3, #32]
 8006d4e:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8006d50:	ea42 0103 	orr.w	r1, r2, r3
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	695b      	ldr	r3, [r3, #20]
 8006d58:	3b01      	subs	r3, #1
 8006d5a:	041a      	lsls	r2, r3, #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	681b      	ldr	r3, [r3, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8006d60:	430a      	orrs	r2, r1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8006d62:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	689b      	ldr	r3, [r3, #8]
 8006d68:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006d6c:	d115      	bne.n	8006d9a <HAL_FDCAN_Init+0x296>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006d72:	1e5a      	subs	r2, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)    | \
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d78:	3b01      	subs	r3, #1
 8006d7a:	021b      	lsls	r3, r3, #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 8006d7c:	431a      	orrs	r2, r3
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)    | \
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006d82:	3b01      	subs	r3, #1
 8006d84:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)    | \
 8006d86:	ea42 0103 	orr.w	r1, r2, r3
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d8e:	3b01      	subs	r3, #1
 8006d90:	041a      	lsls	r2, r3, #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	681b      	ldr	r3, [r3, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)    | \
 8006d96:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 8006d98:	60da      	str	r2, [r3, #12]
  }

  if (hfdcan->Init.TxFifoQueueElmtsNbr > 0U)
 8006d9a:	687b      	ldr	r3, [r7, #4]
 8006d9c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006d9e:	2b00      	cmp	r3, #0
 8006da0:	d00a      	beq.n	8006db8 <HAL_FDCAN_Init+0x2b4>
  {
    /* Select between Tx FIFO and Tx Queue operation modes */
    SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	681b      	ldr	r3, [r3, #0]
 8006da6:	f8d3 10c0 	ldr.w	r1, [r3, #192]	; 0xc0
 8006daa:	687b      	ldr	r3, [r7, #4]
 8006dac:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	681b      	ldr	r3, [r3, #0]
 8006db2:	430a      	orrs	r2, r1
 8006db4:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
  }

  /* Configure Tx element size */
  if ((hfdcan->Init.TxBuffersNbr + hfdcan->Init.TxFifoQueueElmtsNbr) > 0U)
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006dc0:	4413      	add	r3, r2
 8006dc2:	2b00      	cmp	r3, #0
 8006dc4:	d012      	beq.n	8006dec <HAL_FDCAN_Init+0x2e8>
  {
    MODIFY_REG(hfdcan->Instance->TXESC, FDCAN_TXESC_TBDS, CvtEltSize[hfdcan->Init.TxElmtSize]);
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	681b      	ldr	r3, [r3, #0]
 8006dca:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 8006dce:	f023 0107 	bic.w	r1, r3, #7
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006dd6:	009b      	lsls	r3, r3, #2
 8006dd8:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8006ddc:	4413      	add	r3, r2
 8006dde:	f853 2c54 	ldr.w	r2, [r3, #-84]
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	681b      	ldr	r3, [r3, #0]
 8006de6:	430a      	orrs	r2, r1
 8006de8:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  /* Configure Rx FIFO 0 element size */
  if (hfdcan->Init.RxFifo0ElmtsNbr > 0U)
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006df0:	2b00      	cmp	r3, #0
 8006df2:	d012      	beq.n	8006e1a <HAL_FDCAN_Init+0x316>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_F0DS, (CvtEltSize[hfdcan->Init.RxFifo0ElmtSize] << FDCAN_RXESC_F0DS_Pos));
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	681b      	ldr	r3, [r3, #0]
 8006df8:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8006dfc:	f023 0107 	bic.w	r1, r3, #7
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006e04:	009b      	lsls	r3, r3, #2
 8006e06:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8006e0a:	4413      	add	r3, r2
 8006e0c:	f853 2c54 	ldr.w	r2, [r3, #-84]
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	681b      	ldr	r3, [r3, #0]
 8006e14:	430a      	orrs	r2, r1
 8006e16:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  }

  /* Configure Rx FIFO 1 element size */
  if (hfdcan->Init.RxFifo1ElmtsNbr > 0U)
 8006e1a:	687b      	ldr	r3, [r7, #4]
 8006e1c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006e1e:	2b00      	cmp	r3, #0
 8006e20:	d013      	beq.n	8006e4a <HAL_FDCAN_Init+0x346>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_F1DS, (CvtEltSize[hfdcan->Init.RxFifo1ElmtSize] << FDCAN_RXESC_F1DS_Pos));
 8006e22:	687b      	ldr	r3, [r7, #4]
 8006e24:	681b      	ldr	r3, [r3, #0]
 8006e26:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8006e2a:	f023 0170 	bic.w	r1, r3, #112	; 0x70
 8006e2e:	687b      	ldr	r3, [r7, #4]
 8006e30:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006e32:	009b      	lsls	r3, r3, #2
 8006e34:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8006e38:	4413      	add	r3, r2
 8006e3a:	f853 3c54 	ldr.w	r3, [r3, #-84]
 8006e3e:	011a      	lsls	r2, r3, #4
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	681b      	ldr	r3, [r3, #0]
 8006e44:	430a      	orrs	r2, r1
 8006e46:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  }

  /* Configure Rx buffer element size */
  if (hfdcan->Init.RxBuffersNbr > 0U)
 8006e4a:	687b      	ldr	r3, [r7, #4]
 8006e4c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006e4e:	2b00      	cmp	r3, #0
 8006e50:	d013      	beq.n	8006e7a <HAL_FDCAN_Init+0x376>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_RBDS, (CvtEltSize[hfdcan->Init.RxBufferSize] << FDCAN_RXESC_RBDS_Pos));
 8006e52:	687b      	ldr	r3, [r7, #4]
 8006e54:	681b      	ldr	r3, [r3, #0]
 8006e56:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8006e5a:	f423 61e0 	bic.w	r1, r3, #1792	; 0x700
 8006e5e:	687b      	ldr	r3, [r7, #4]
 8006e60:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006e62:	009b      	lsls	r3, r3, #2
 8006e64:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8006e68:	4413      	add	r3, r2
 8006e6a:	f853 3c54 	ldr.w	r3, [r3, #-84]
 8006e6e:	021a      	lsls	r2, r3, #8
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	681b      	ldr	r3, [r3, #0]
 8006e74:	430a      	orrs	r2, r1
 8006e76:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  }

  /* By default operation mode is set to Event-driven communication.
     If Time-triggered communication is needed, user should call the
     HAL_FDCAN_TT_ConfigOperation function just after the HAL_FDCAN_Init */
  if (hfdcan->Instance == FDCAN1)
 8006e7a:	687b      	ldr	r3, [r7, #4]
 8006e7c:	681b      	ldr	r3, [r3, #0]
 8006e7e:	4a11      	ldr	r2, [pc, #68]	; (8006ec4 <HAL_FDCAN_Init+0x3c0>)
 8006e80:	4293      	cmp	r3, r2
 8006e82:	d107      	bne.n	8006e94 <HAL_FDCAN_Init+0x390>
  {
    CLEAR_BIT(hfdcan->ttcan->TTOCF, FDCAN_TTOCF_OM);
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	685b      	ldr	r3, [r3, #4]
 8006e88:	689a      	ldr	r2, [r3, #8]
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	685b      	ldr	r3, [r3, #4]
 8006e8e:	f022 0203 	bic.w	r2, r2, #3
 8006e92:	609a      	str	r2, [r3, #8]
  }

  /* Initialize the Latest Tx FIFO/Queue request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	2200      	movs	r2, #0
 8006e98:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

  /* Initialize the error code */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8006e9c:	687b      	ldr	r3, [r7, #4]
 8006e9e:	2200      	movs	r2, #0
 8006ea0:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	2201      	movs	r2, #1
 8006ea8:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

  /* Calculate each RAM block address */
  status = FDCAN_CalcultateRamBlockAddresses(hfdcan);
 8006eac:	6878      	ldr	r0, [r7, #4]
 8006eae:	f000 fddf 	bl	8007a70 <FDCAN_CalcultateRamBlockAddresses>
 8006eb2:	4603      	mov	r3, r0
 8006eb4:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b

  /* Return function status */
  return status;
 8006eb8:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
}
 8006ebc:	4618      	mov	r0, r3
 8006ebe:	3760      	adds	r7, #96	; 0x60
 8006ec0:	46bd      	mov	sp, r7
 8006ec2:	bd80      	pop	{r7, pc}
 8006ec4:	4000a000 	.word	0x4000a000

08006ec8 <HAL_FDCAN_ConfigFilter>:
  * @param  sFilterConfig pointer to an FDCAN_FilterTypeDef structure that
  *         contains the filter configuration information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_ConfigFilter(FDCAN_HandleTypeDef *hfdcan, FDCAN_FilterTypeDef *sFilterConfig)
{
 8006ec8:	b480      	push	{r7}
 8006eca:	b087      	sub	sp, #28
 8006ecc:	af00      	add	r7, sp, #0
 8006ece:	6078      	str	r0, [r7, #4]
 8006ed0:	6039      	str	r1, [r7, #0]
  uint32_t FilterElementW1;
  uint32_t FilterElementW2;
  uint32_t *FilterAddress;
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8006ed8:	73fb      	strb	r3, [r7, #15]

  if ((state == HAL_FDCAN_STATE_READY) || (state == HAL_FDCAN_STATE_BUSY))
 8006eda:	7bfb      	ldrb	r3, [r7, #15]
 8006edc:	2b01      	cmp	r3, #1
 8006ede:	d002      	beq.n	8006ee6 <HAL_FDCAN_ConfigFilter+0x1e>
 8006ee0:	7bfb      	ldrb	r3, [r7, #15]
 8006ee2:	2b02      	cmp	r3, #2
 8006ee4:	d157      	bne.n	8006f96 <HAL_FDCAN_ConfigFilter+0xce>
    {
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->RxBufferIndex, 63U));
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->IsCalibrationMsg, 1U));
    }

    if (sFilterConfig->IdType == FDCAN_STANDARD_ID)
 8006ee6:	683b      	ldr	r3, [r7, #0]
 8006ee8:	681b      	ldr	r3, [r3, #0]
 8006eea:	2b00      	cmp	r3, #0
 8006eec:	d12b      	bne.n	8006f46 <HAL_FDCAN_ConfigFilter+0x7e>
        assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID2, 0x7FFU));
        assert_param(IS_FDCAN_STD_FILTER_TYPE(sFilterConfig->FilterType));
      }

      /* Build filter element */
      if (sFilterConfig->FilterConfig == FDCAN_FILTER_TO_RXBUFFER)
 8006eee:	683b      	ldr	r3, [r7, #0]
 8006ef0:	68db      	ldr	r3, [r3, #12]
 8006ef2:	2b07      	cmp	r3, #7
 8006ef4:	d10d      	bne.n	8006f12 <HAL_FDCAN_ConfigFilter+0x4a>
      {
        FilterElementW1 = ((FDCAN_FILTER_TO_RXBUFFER << 27U)       |
                           (sFilterConfig->FilterID1 << 16U)       |
 8006ef6:	683b      	ldr	r3, [r7, #0]
 8006ef8:	691b      	ldr	r3, [r3, #16]
 8006efa:	041a      	lsls	r2, r3, #16
                           (sFilterConfig->IsCalibrationMsg << 8U) |
 8006efc:	683b      	ldr	r3, [r7, #0]
 8006efe:	69db      	ldr	r3, [r3, #28]
 8006f00:	021b      	lsls	r3, r3, #8
                           (sFilterConfig->FilterID1 << 16U)       |
 8006f02:	431a      	orrs	r2, r3
                           sFilterConfig->RxBufferIndex);
 8006f04:	683b      	ldr	r3, [r7, #0]
 8006f06:	699b      	ldr	r3, [r3, #24]
                           (sFilterConfig->IsCalibrationMsg << 8U) |
 8006f08:	4313      	orrs	r3, r2
        FilterElementW1 = ((FDCAN_FILTER_TO_RXBUFFER << 27U)       |
 8006f0a:	f043 5360 	orr.w	r3, r3, #939524096	; 0x38000000
 8006f0e:	617b      	str	r3, [r7, #20]
 8006f10:	e00e      	b.n	8006f30 <HAL_FDCAN_ConfigFilter+0x68>
      }
      else
      {
        FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 8006f12:	683b      	ldr	r3, [r7, #0]
 8006f14:	689b      	ldr	r3, [r3, #8]
 8006f16:	079a      	lsls	r2, r3, #30
                           (sFilterConfig->FilterConfig << 27U) |
 8006f18:	683b      	ldr	r3, [r7, #0]
 8006f1a:	68db      	ldr	r3, [r3, #12]
 8006f1c:	06db      	lsls	r3, r3, #27
        FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 8006f1e:	431a      	orrs	r2, r3
                           (sFilterConfig->FilterID1 << 16U)    |
 8006f20:	683b      	ldr	r3, [r7, #0]
 8006f22:	691b      	ldr	r3, [r3, #16]
 8006f24:	041b      	lsls	r3, r3, #16
                           (sFilterConfig->FilterConfig << 27U) |
 8006f26:	431a      	orrs	r2, r3
                           sFilterConfig->FilterID2);
 8006f28:	683b      	ldr	r3, [r7, #0]
 8006f2a:	695b      	ldr	r3, [r3, #20]
        FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 8006f2c:	4313      	orrs	r3, r2
 8006f2e:	617b      	str	r3, [r7, #20]
      }

      /* Calculate filter address */
      FilterAddress = (uint32_t *)(hfdcan->msgRam.StandardFilterSA + (sFilterConfig->FilterIndex * 4U));
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8006f34:	683b      	ldr	r3, [r7, #0]
 8006f36:	685b      	ldr	r3, [r3, #4]
 8006f38:	009b      	lsls	r3, r3, #2
 8006f3a:	4413      	add	r3, r2
 8006f3c:	60bb      	str	r3, [r7, #8]

      /* Write filter element to the message RAM */
      *FilterAddress = FilterElementW1;
 8006f3e:	68bb      	ldr	r3, [r7, #8]
 8006f40:	697a      	ldr	r2, [r7, #20]
 8006f42:	601a      	str	r2, [r3, #0]
 8006f44:	e025      	b.n	8006f92 <HAL_FDCAN_ConfigFilter+0xca>
        assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID2, 0x1FFFFFFFU));
        assert_param(IS_FDCAN_EXT_FILTER_TYPE(sFilterConfig->FilterType));
      }

      /* Build first word of filter element */
      FilterElementW1 = ((sFilterConfig->FilterConfig << 29U) | sFilterConfig->FilterID1);
 8006f46:	683b      	ldr	r3, [r7, #0]
 8006f48:	68db      	ldr	r3, [r3, #12]
 8006f4a:	075a      	lsls	r2, r3, #29
 8006f4c:	683b      	ldr	r3, [r7, #0]
 8006f4e:	691b      	ldr	r3, [r3, #16]
 8006f50:	4313      	orrs	r3, r2
 8006f52:	617b      	str	r3, [r7, #20]

      /* Build second word of filter element */
      if (sFilterConfig->FilterConfig == FDCAN_FILTER_TO_RXBUFFER)
 8006f54:	683b      	ldr	r3, [r7, #0]
 8006f56:	68db      	ldr	r3, [r3, #12]
 8006f58:	2b07      	cmp	r3, #7
 8006f5a:	d103      	bne.n	8006f64 <HAL_FDCAN_ConfigFilter+0x9c>
      {
        FilterElementW2 = sFilterConfig->RxBufferIndex;
 8006f5c:	683b      	ldr	r3, [r7, #0]
 8006f5e:	699b      	ldr	r3, [r3, #24]
 8006f60:	613b      	str	r3, [r7, #16]
 8006f62:	e006      	b.n	8006f72 <HAL_FDCAN_ConfigFilter+0xaa>
      }
      else
      {
        FilterElementW2 = ((sFilterConfig->FilterType << 30U) | sFilterConfig->FilterID2);
 8006f64:	683b      	ldr	r3, [r7, #0]
 8006f66:	689b      	ldr	r3, [r3, #8]
 8006f68:	079a      	lsls	r2, r3, #30
 8006f6a:	683b      	ldr	r3, [r7, #0]
 8006f6c:	695b      	ldr	r3, [r3, #20]
 8006f6e:	4313      	orrs	r3, r2
 8006f70:	613b      	str	r3, [r7, #16]
      }

      /* Calculate filter address */
      FilterAddress = (uint32_t *)(hfdcan->msgRam.ExtendedFilterSA + (sFilterConfig->FilterIndex * 4U * 2U));
 8006f72:	687b      	ldr	r3, [r7, #4]
 8006f74:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8006f76:	683b      	ldr	r3, [r7, #0]
 8006f78:	685b      	ldr	r3, [r3, #4]
 8006f7a:	00db      	lsls	r3, r3, #3
 8006f7c:	4413      	add	r3, r2
 8006f7e:	60bb      	str	r3, [r7, #8]

      /* Write filter element to the message RAM */
      *FilterAddress = FilterElementW1;
 8006f80:	68bb      	ldr	r3, [r7, #8]
 8006f82:	697a      	ldr	r2, [r7, #20]
 8006f84:	601a      	str	r2, [r3, #0]
      FilterAddress++;
 8006f86:	68bb      	ldr	r3, [r7, #8]
 8006f88:	3304      	adds	r3, #4
 8006f8a:	60bb      	str	r3, [r7, #8]
      *FilterAddress = FilterElementW2;
 8006f8c:	68bb      	ldr	r3, [r7, #8]
 8006f8e:	693a      	ldr	r2, [r7, #16]
 8006f90:	601a      	str	r2, [r3, #0]
    }

    /* Return function status */
    return HAL_OK;
 8006f92:	2300      	movs	r3, #0
 8006f94:	e008      	b.n	8006fa8 <HAL_FDCAN_ConfigFilter+0xe0>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_INITIALIZED;
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8006f9c:	f043 0202 	orr.w	r2, r3, #2
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    return HAL_ERROR;
 8006fa6:	2301      	movs	r3, #1
  }
}
 8006fa8:	4618      	mov	r0, r3
 8006faa:	371c      	adds	r7, #28
 8006fac:	46bd      	mov	sp, r7
 8006fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fb2:	4770      	bx	lr

08006fb4 <HAL_FDCAN_ConfigGlobalFilter>:
HAL_StatusTypeDef HAL_FDCAN_ConfigGlobalFilter(FDCAN_HandleTypeDef *hfdcan,
                                               uint32_t NonMatchingStd,
                                               uint32_t NonMatchingExt,
                                               uint32_t RejectRemoteStd,
                                               uint32_t RejectRemoteExt)
{
 8006fb4:	b480      	push	{r7}
 8006fb6:	b085      	sub	sp, #20
 8006fb8:	af00      	add	r7, sp, #0
 8006fba:	60f8      	str	r0, [r7, #12]
 8006fbc:	60b9      	str	r1, [r7, #8]
 8006fbe:	607a      	str	r2, [r7, #4]
 8006fc0:	603b      	str	r3, [r7, #0]
  assert_param(IS_FDCAN_NON_MATCHING(NonMatchingStd));
  assert_param(IS_FDCAN_NON_MATCHING(NonMatchingExt));
  assert_param(IS_FDCAN_REJECT_REMOTE(RejectRemoteStd));
  assert_param(IS_FDCAN_REJECT_REMOTE(RejectRemoteExt));

  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 8006fc2:	68fb      	ldr	r3, [r7, #12]
 8006fc4:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8006fc8:	b2db      	uxtb	r3, r3
 8006fca:	2b01      	cmp	r3, #1
 8006fcc:	d110      	bne.n	8006ff0 <HAL_FDCAN_ConfigGlobalFilter+0x3c>
  {
    /* Configure global filter */
    hfdcan->Instance->GFC = ((NonMatchingStd << FDCAN_GFC_ANFS_Pos)  |
 8006fce:	68bb      	ldr	r3, [r7, #8]
 8006fd0:	011a      	lsls	r2, r3, #4
                             (NonMatchingExt << FDCAN_GFC_ANFE_Pos)  |
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	009b      	lsls	r3, r3, #2
    hfdcan->Instance->GFC = ((NonMatchingStd << FDCAN_GFC_ANFS_Pos)  |
 8006fd6:	431a      	orrs	r2, r3
                             (RejectRemoteStd << FDCAN_GFC_RRFS_Pos) |
 8006fd8:	683b      	ldr	r3, [r7, #0]
 8006fda:	005b      	lsls	r3, r3, #1
                             (NonMatchingExt << FDCAN_GFC_ANFE_Pos)  |
 8006fdc:	ea42 0103 	orr.w	r1, r2, r3
    hfdcan->Instance->GFC = ((NonMatchingStd << FDCAN_GFC_ANFS_Pos)  |
 8006fe0:	68fb      	ldr	r3, [r7, #12]
 8006fe2:	681b      	ldr	r3, [r3, #0]
                             (RejectRemoteStd << FDCAN_GFC_RRFS_Pos) |
 8006fe4:	69ba      	ldr	r2, [r7, #24]
 8006fe6:	430a      	orrs	r2, r1
    hfdcan->Instance->GFC = ((NonMatchingStd << FDCAN_GFC_ANFS_Pos)  |
 8006fe8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
                             (RejectRemoteExt << FDCAN_GFC_RRFE_Pos));

    /* Return function status */
    return HAL_OK;
 8006fec:	2300      	movs	r3, #0
 8006fee:	e008      	b.n	8007002 <HAL_FDCAN_ConfigGlobalFilter+0x4e>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
 8006ff0:	68fb      	ldr	r3, [r7, #12]
 8006ff2:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8006ff6:	f043 0204 	orr.w	r2, r3, #4
 8006ffa:	68fb      	ldr	r3, [r7, #12]
 8006ffc:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    return HAL_ERROR;
 8007000:	2301      	movs	r3, #1
  }
}
 8007002:	4618      	mov	r0, r3
 8007004:	3714      	adds	r7, #20
 8007006:	46bd      	mov	sp, r7
 8007008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800700c:	4770      	bx	lr

0800700e <HAL_FDCAN_EnableTxDelayCompensation>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_EnableTxDelayCompensation(FDCAN_HandleTypeDef *hfdcan)
{
 800700e:	b480      	push	{r7}
 8007010:	b083      	sub	sp, #12
 8007012:	af00      	add	r7, sp, #0
 8007014:	6078      	str	r0, [r7, #4]
  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 800701c:	b2db      	uxtb	r3, r3
 800701e:	2b01      	cmp	r3, #1
 8007020:	d109      	bne.n	8007036 <HAL_FDCAN_EnableTxDelayCompensation+0x28>
  {
    /* Enable transmitter delay compensation */
    SET_BIT(hfdcan->Instance->DBTP, FDCAN_DBTP_TDC);
 8007022:	687b      	ldr	r3, [r7, #4]
 8007024:	681b      	ldr	r3, [r3, #0]
 8007026:	68da      	ldr	r2, [r3, #12]
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	681b      	ldr	r3, [r3, #0]
 800702c:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8007030:	60da      	str	r2, [r3, #12]

    /* Return function status */
    return HAL_OK;
 8007032:	2300      	movs	r3, #0
 8007034:	e008      	b.n	8007048 <HAL_FDCAN_EnableTxDelayCompensation+0x3a>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
 8007036:	687b      	ldr	r3, [r7, #4]
 8007038:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800703c:	f043 0204 	orr.w	r2, r3, #4
 8007040:	687b      	ldr	r3, [r7, #4]
 8007042:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    return HAL_ERROR;
 8007046:	2301      	movs	r3, #1
  }
}
 8007048:	4618      	mov	r0, r3
 800704a:	370c      	adds	r7, #12
 800704c:	46bd      	mov	sp, r7
 800704e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007052:	4770      	bx	lr

08007054 <HAL_FDCAN_Start>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Start(FDCAN_HandleTypeDef *hfdcan)
{
 8007054:	b480      	push	{r7}
 8007056:	b083      	sub	sp, #12
 8007058:	af00      	add	r7, sp, #0
 800705a:	6078      	str	r0, [r7, #4]
  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8007062:	b2db      	uxtb	r3, r3
 8007064:	2b01      	cmp	r3, #1
 8007066:	d111      	bne.n	800708c <HAL_FDCAN_Start+0x38>
  {
    /* Change FDCAN peripheral state */
    hfdcan->State = HAL_FDCAN_STATE_BUSY;
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	2202      	movs	r2, #2
 800706c:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

    /* Request leave initialisation */
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	681b      	ldr	r3, [r3, #0]
 8007074:	699a      	ldr	r2, [r3, #24]
 8007076:	687b      	ldr	r3, [r7, #4]
 8007078:	681b      	ldr	r3, [r3, #0]
 800707a:	f022 0201 	bic.w	r2, r2, #1
 800707e:	619a      	str	r2, [r3, #24]

    /* Reset the FDCAN ErrorCode */
    hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	2200      	movs	r2, #0
 8007084:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    /* Return function status */
    return HAL_OK;
 8007088:	2300      	movs	r3, #0
 800708a:	e008      	b.n	800709e <HAL_FDCAN_Start+0x4a>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8007092:	f043 0204 	orr.w	r2, r3, #4
 8007096:	687b      	ldr	r3, [r7, #4]
 8007098:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    return HAL_ERROR;
 800709c:	2301      	movs	r3, #1
  }
}
 800709e:	4618      	mov	r0, r3
 80070a0:	370c      	adds	r7, #12
 80070a2:	46bd      	mov	sp, r7
 80070a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070a8:	4770      	bx	lr
	...

080070ac <HAL_FDCAN_GetRxMessage>:
  * @param  pRxHeader pointer to a FDCAN_RxHeaderTypeDef structure.
  * @param  pRxData pointer to a buffer where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_GetRxMessage(FDCAN_HandleTypeDef *hfdcan, uint32_t RxLocation, FDCAN_RxHeaderTypeDef *pRxHeader, uint8_t *pRxData)
{
 80070ac:	b480      	push	{r7}
 80070ae:	b08b      	sub	sp, #44	; 0x2c
 80070b0:	af00      	add	r7, sp, #0
 80070b2:	60f8      	str	r0, [r7, #12]
 80070b4:	60b9      	str	r1, [r7, #8]
 80070b6:	607a      	str	r2, [r7, #4]
 80070b8:	603b      	str	r3, [r7, #0]
  uint32_t *RxAddress;
  uint8_t  *pData;
  uint32_t ByteCounter;
  uint32_t GetIndex = 0;
 80070ba:	2300      	movs	r3, #0
 80070bc:	61fb      	str	r3, [r7, #28]
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 80070be:	68fb      	ldr	r3, [r7, #12]
 80070c0:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 80070c4:	76fb      	strb	r3, [r7, #27]

  if (state == HAL_FDCAN_STATE_BUSY)
 80070c6:	7efb      	ldrb	r3, [r7, #27]
 80070c8:	2b02      	cmp	r3, #2
 80070ca:	f040 813b 	bne.w	8007344 <HAL_FDCAN_GetRxMessage+0x298>
  {
    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 80070ce:	68bb      	ldr	r3, [r7, #8]
 80070d0:	2b40      	cmp	r3, #64	; 0x40
 80070d2:	d145      	bne.n	8007160 <HAL_FDCAN_GetRxMessage+0xb4>
    {
      /* Check that the Rx FIFO 0 has an allocated area into the RAM */
      if ((hfdcan->Instance->RXF0C & FDCAN_RXF0C_F0S) == 0U)
 80070d4:	68fb      	ldr	r3, [r7, #12]
 80070d6:	681b      	ldr	r3, [r3, #0]
 80070d8:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80070dc:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80070e0:	2b00      	cmp	r3, #0
 80070e2:	d109      	bne.n	80070f8 <HAL_FDCAN_GetRxMessage+0x4c>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 80070e4:	68fb      	ldr	r3, [r7, #12]
 80070e6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80070ea:	f043 0220 	orr.w	r2, r3, #32
 80070ee:	68fb      	ldr	r3, [r7, #12]
 80070f0:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

        return HAL_ERROR;
 80070f4:	2301      	movs	r3, #1
 80070f6:	e12e      	b.n	8007356 <HAL_FDCAN_GetRxMessage+0x2aa>
      }

      /* Check that the Rx FIFO 0 is not empty */
      if ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0FL) == 0U)
 80070f8:	68fb      	ldr	r3, [r7, #12]
 80070fa:	681b      	ldr	r3, [r3, #0]
 80070fc:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8007100:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007104:	2b00      	cmp	r3, #0
 8007106:	d109      	bne.n	800711c <HAL_FDCAN_GetRxMessage+0x70>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 8007108:	68fb      	ldr	r3, [r7, #12]
 800710a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800710e:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8007112:	68fb      	ldr	r3, [r7, #12]
 8007114:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

        return HAL_ERROR;
 8007118:	2301      	movs	r3, #1
 800711a:	e11c      	b.n	8007356 <HAL_FDCAN_GetRxMessage+0x2aa>
      }
      else
      {
        /* Check that the Rx FIFO 0 is full & overwrite mode is on*/
        if(((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0F) >> FDCAN_RXF0S_F0F_Pos) == 1U)
 800711c:	68fb      	ldr	r3, [r7, #12]
 800711e:	681b      	ldr	r3, [r3, #0]
 8007120:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8007124:	0e1b      	lsrs	r3, r3, #24
 8007126:	f003 0301 	and.w	r3, r3, #1
 800712a:	2b01      	cmp	r3, #1
 800712c:	d103      	bne.n	8007136 <HAL_FDCAN_GetRxMessage+0x8a>
        {
          if(((hfdcan->Instance->RXF0C & FDCAN_RXF0C_F0OM) >> FDCAN_RXF0C_F0OM_Pos) == FDCAN_RX_FIFO_OVERWRITE)
 800712e:	68fb      	ldr	r3, [r7, #12]
 8007130:	681b      	ldr	r3, [r3, #0]
 8007132:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
            GetIndex = 1U;
          }
        }

        /* Calculate Rx FIFO 0 element index*/
        GetIndex += ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0GI) >> FDCAN_RXF0S_F0GI_Pos);
 8007136:	68fb      	ldr	r3, [r7, #12]
 8007138:	681b      	ldr	r3, [r3, #0]
 800713a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800713e:	0a1b      	lsrs	r3, r3, #8
 8007140:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007144:	69fa      	ldr	r2, [r7, #28]
 8007146:	4413      	add	r3, r2
 8007148:	61fb      	str	r3, [r7, #28]

        /* Calculate Rx FIFO 0 element address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO0SA + (GetIndex * hfdcan->Init.RxFifo0ElmtSize * 4U));
 800714a:	68fb      	ldr	r3, [r7, #12]
 800714c:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 800714e:	68fb      	ldr	r3, [r7, #12]
 8007150:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007152:	69f9      	ldr	r1, [r7, #28]
 8007154:	fb01 f303 	mul.w	r3, r1, r3
 8007158:	009b      	lsls	r3, r3, #2
 800715a:	4413      	add	r3, r2
 800715c:	627b      	str	r3, [r7, #36]	; 0x24
 800715e:	e061      	b.n	8007224 <HAL_FDCAN_GetRxMessage+0x178>
      }
    }
    else if (RxLocation == FDCAN_RX_FIFO1) /* Rx element is assigned to the Rx FIFO 1 */
 8007160:	68bb      	ldr	r3, [r7, #8]
 8007162:	2b41      	cmp	r3, #65	; 0x41
 8007164:	d145      	bne.n	80071f2 <HAL_FDCAN_GetRxMessage+0x146>
    {
      /* Check that the Rx FIFO 1 has an allocated area into the RAM */
      if ((hfdcan->Instance->RXF1C & FDCAN_RXF1C_F1S) == 0U)
 8007166:	68fb      	ldr	r3, [r7, #12]
 8007168:	681b      	ldr	r3, [r3, #0]
 800716a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800716e:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8007172:	2b00      	cmp	r3, #0
 8007174:	d109      	bne.n	800718a <HAL_FDCAN_GetRxMessage+0xde>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 8007176:	68fb      	ldr	r3, [r7, #12]
 8007178:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800717c:	f043 0220 	orr.w	r2, r3, #32
 8007180:	68fb      	ldr	r3, [r7, #12]
 8007182:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

        return HAL_ERROR;
 8007186:	2301      	movs	r3, #1
 8007188:	e0e5      	b.n	8007356 <HAL_FDCAN_GetRxMessage+0x2aa>
      }

      /* Check that the Rx FIFO 0 is not empty */
      if ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1FL) == 0U)
 800718a:	68fb      	ldr	r3, [r7, #12]
 800718c:	681b      	ldr	r3, [r3, #0]
 800718e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8007192:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007196:	2b00      	cmp	r3, #0
 8007198:	d109      	bne.n	80071ae <HAL_FDCAN_GetRxMessage+0x102>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 800719a:	68fb      	ldr	r3, [r7, #12]
 800719c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80071a0:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80071a4:	68fb      	ldr	r3, [r7, #12]
 80071a6:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

        return HAL_ERROR;
 80071aa:	2301      	movs	r3, #1
 80071ac:	e0d3      	b.n	8007356 <HAL_FDCAN_GetRxMessage+0x2aa>
      }
      else
      {
        /* Check that the Rx FIFO 1 is full & overwrite mode is on*/
        if(((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1F) >> FDCAN_RXF1S_F1F_Pos) == 1U)
 80071ae:	68fb      	ldr	r3, [r7, #12]
 80071b0:	681b      	ldr	r3, [r3, #0]
 80071b2:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80071b6:	0e1b      	lsrs	r3, r3, #24
 80071b8:	f003 0301 	and.w	r3, r3, #1
 80071bc:	2b01      	cmp	r3, #1
 80071be:	d103      	bne.n	80071c8 <HAL_FDCAN_GetRxMessage+0x11c>
        {
          if(((hfdcan->Instance->RXF1C & FDCAN_RXF1C_F1OM) >> FDCAN_RXF1C_F1OM_Pos) == FDCAN_RX_FIFO_OVERWRITE)
 80071c0:	68fb      	ldr	r3, [r7, #12]
 80071c2:	681b      	ldr	r3, [r3, #0]
 80071c4:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
            GetIndex = 1U;
          }
        }

        /* Calculate Rx FIFO 1 element index*/
        GetIndex += ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1GI) >> FDCAN_RXF1S_F1GI_Pos);
 80071c8:	68fb      	ldr	r3, [r7, #12]
 80071ca:	681b      	ldr	r3, [r3, #0]
 80071cc:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80071d0:	0a1b      	lsrs	r3, r3, #8
 80071d2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80071d6:	69fa      	ldr	r2, [r7, #28]
 80071d8:	4413      	add	r3, r2
 80071da:	61fb      	str	r3, [r7, #28]

        /* Calculate Rx FIFO 1 element address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO1SA + (GetIndex * hfdcan->Init.RxFifo1ElmtSize * 4U));
 80071dc:	68fb      	ldr	r3, [r7, #12]
 80071de:	6f9a      	ldr	r2, [r3, #120]	; 0x78
 80071e0:	68fb      	ldr	r3, [r7, #12]
 80071e2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80071e4:	69f9      	ldr	r1, [r7, #28]
 80071e6:	fb01 f303 	mul.w	r3, r1, r3
 80071ea:	009b      	lsls	r3, r3, #2
 80071ec:	4413      	add	r3, r2
 80071ee:	627b      	str	r3, [r7, #36]	; 0x24
 80071f0:	e018      	b.n	8007224 <HAL_FDCAN_GetRxMessage+0x178>
      }
    }
    else /* Rx element is assigned to a dedicated Rx buffer */
    {
      /* Check that the selected buffer has an allocated area into the RAM */
      if (RxLocation >= hfdcan->Init.RxBuffersNbr)
 80071f2:	68fb      	ldr	r3, [r7, #12]
 80071f4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80071f6:	68ba      	ldr	r2, [r7, #8]
 80071f8:	429a      	cmp	r2, r3
 80071fa:	d309      	bcc.n	8007210 <HAL_FDCAN_GetRxMessage+0x164>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 80071fc:	68fb      	ldr	r3, [r7, #12]
 80071fe:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8007202:	f043 0220 	orr.w	r2, r3, #32
 8007206:	68fb      	ldr	r3, [r7, #12]
 8007208:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

        return HAL_ERROR;
 800720c:	2301      	movs	r3, #1
 800720e:	e0a2      	b.n	8007356 <HAL_FDCAN_GetRxMessage+0x2aa>
      }
      else
      {
        /* Calculate Rx buffer address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxBufferSA + (RxLocation * hfdcan->Init.RxBufferSize * 4U));
 8007210:	68fb      	ldr	r3, [r7, #12]
 8007212:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 8007214:	68fb      	ldr	r3, [r7, #12]
 8007216:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007218:	68b9      	ldr	r1, [r7, #8]
 800721a:	fb01 f303 	mul.w	r3, r1, r3
 800721e:	009b      	lsls	r3, r3, #2
 8007220:	4413      	add	r3, r2
 8007222:	627b      	str	r3, [r7, #36]	; 0x24
      }
    }

    /* Retrieve IdType */
    pRxHeader->IdType = *RxAddress & FDCAN_ELEMENT_MASK_XTD;
 8007224:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007226:	681b      	ldr	r3, [r3, #0]
 8007228:	f003 4280 	and.w	r2, r3, #1073741824	; 0x40000000
 800722c:	687b      	ldr	r3, [r7, #4]
 800722e:	605a      	str	r2, [r3, #4]

    /* Retrieve Identifier */
    if (pRxHeader->IdType == FDCAN_STANDARD_ID) /* Standard ID element */
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	685b      	ldr	r3, [r3, #4]
 8007234:	2b00      	cmp	r3, #0
 8007236:	d107      	bne.n	8007248 <HAL_FDCAN_GetRxMessage+0x19c>
    {
      pRxHeader->Identifier = ((*RxAddress & FDCAN_ELEMENT_MASK_STDID) >> 18);
 8007238:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800723a:	681b      	ldr	r3, [r3, #0]
 800723c:	0c9b      	lsrs	r3, r3, #18
 800723e:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8007242:	687b      	ldr	r3, [r7, #4]
 8007244:	601a      	str	r2, [r3, #0]
 8007246:	e005      	b.n	8007254 <HAL_FDCAN_GetRxMessage+0x1a8>
    }
    else /* Extended ID element */
    {
      pRxHeader->Identifier = (*RxAddress & FDCAN_ELEMENT_MASK_EXTID);
 8007248:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800724a:	681b      	ldr	r3, [r3, #0]
 800724c:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	601a      	str	r2, [r3, #0]
    }

    /* Retrieve RxFrameType */
    pRxHeader->RxFrameType = (*RxAddress & FDCAN_ELEMENT_MASK_RTR);
 8007254:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007256:	681b      	ldr	r3, [r3, #0]
 8007258:	f003 5200 	and.w	r2, r3, #536870912	; 0x20000000
 800725c:	687b      	ldr	r3, [r7, #4]
 800725e:	609a      	str	r2, [r3, #8]

    /* Retrieve ErrorStateIndicator */
    pRxHeader->ErrorStateIndicator = (*RxAddress & FDCAN_ELEMENT_MASK_ESI);
 8007260:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007262:	681b      	ldr	r3, [r3, #0]
 8007264:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
 8007268:	687b      	ldr	r3, [r7, #4]
 800726a:	611a      	str	r2, [r3, #16]

    /* Increment RxAddress pointer to second word of Rx FIFO element */
    RxAddress++;
 800726c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800726e:	3304      	adds	r3, #4
 8007270:	627b      	str	r3, [r7, #36]	; 0x24

    /* Retrieve RxTimestamp */
    pRxHeader->RxTimestamp = (*RxAddress & FDCAN_ELEMENT_MASK_TS);
 8007272:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007274:	681b      	ldr	r3, [r3, #0]
 8007276:	b29a      	uxth	r2, r3
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	61da      	str	r2, [r3, #28]

    /* Retrieve DataLength */
    pRxHeader->DataLength = (*RxAddress & FDCAN_ELEMENT_MASK_DLC);
 800727c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800727e:	681b      	ldr	r3, [r3, #0]
 8007280:	f403 2270 	and.w	r2, r3, #983040	; 0xf0000
 8007284:	687b      	ldr	r3, [r7, #4]
 8007286:	60da      	str	r2, [r3, #12]

    /* Retrieve BitRateSwitch */
    pRxHeader->BitRateSwitch = (*RxAddress & FDCAN_ELEMENT_MASK_BRS);
 8007288:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800728a:	681b      	ldr	r3, [r3, #0]
 800728c:	f403 1280 	and.w	r2, r3, #1048576	; 0x100000
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	615a      	str	r2, [r3, #20]

    /* Retrieve FDFormat */
    pRxHeader->FDFormat = (*RxAddress & FDCAN_ELEMENT_MASK_FDF);
 8007294:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007296:	681b      	ldr	r3, [r3, #0]
 8007298:	f403 1200 	and.w	r2, r3, #2097152	; 0x200000
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	619a      	str	r2, [r3, #24]

    /* Retrieve FilterIndex */
    pRxHeader->FilterIndex = ((*RxAddress & FDCAN_ELEMENT_MASK_FIDX) >> 24);
 80072a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80072a2:	681b      	ldr	r3, [r3, #0]
 80072a4:	0e1b      	lsrs	r3, r3, #24
 80072a6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80072aa:	687b      	ldr	r3, [r7, #4]
 80072ac:	621a      	str	r2, [r3, #32]

    /* Retrieve NonMatchingFrame */
    pRxHeader->IsFilterMatchingFrame = ((*RxAddress & FDCAN_ELEMENT_MASK_ANMF) >> 31);
 80072ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80072b0:	681b      	ldr	r3, [r3, #0]
 80072b2:	0fda      	lsrs	r2, r3, #31
 80072b4:	687b      	ldr	r3, [r7, #4]
 80072b6:	625a      	str	r2, [r3, #36]	; 0x24

    /* Increment RxAddress pointer to payload of Rx FIFO element */
    RxAddress++;
 80072b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80072ba:	3304      	adds	r3, #4
 80072bc:	627b      	str	r3, [r7, #36]	; 0x24

    /* Retrieve Rx payload */
    pData = (uint8_t *)RxAddress;
 80072be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80072c0:	617b      	str	r3, [r7, #20]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength >> 16]; ByteCounter++)
 80072c2:	2300      	movs	r3, #0
 80072c4:	623b      	str	r3, [r7, #32]
 80072c6:	e00a      	b.n	80072de <HAL_FDCAN_GetRxMessage+0x232>
    {
      pRxData[ByteCounter] = pData[ByteCounter];
 80072c8:	697a      	ldr	r2, [r7, #20]
 80072ca:	6a3b      	ldr	r3, [r7, #32]
 80072cc:	441a      	add	r2, r3
 80072ce:	6839      	ldr	r1, [r7, #0]
 80072d0:	6a3b      	ldr	r3, [r7, #32]
 80072d2:	440b      	add	r3, r1
 80072d4:	7812      	ldrb	r2, [r2, #0]
 80072d6:	701a      	strb	r2, [r3, #0]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength >> 16]; ByteCounter++)
 80072d8:	6a3b      	ldr	r3, [r7, #32]
 80072da:	3301      	adds	r3, #1
 80072dc:	623b      	str	r3, [r7, #32]
 80072de:	687b      	ldr	r3, [r7, #4]
 80072e0:	68db      	ldr	r3, [r3, #12]
 80072e2:	0c1b      	lsrs	r3, r3, #16
 80072e4:	4a1f      	ldr	r2, [pc, #124]	; (8007364 <HAL_FDCAN_GetRxMessage+0x2b8>)
 80072e6:	5cd3      	ldrb	r3, [r2, r3]
 80072e8:	461a      	mov	r2, r3
 80072ea:	6a3b      	ldr	r3, [r7, #32]
 80072ec:	4293      	cmp	r3, r2
 80072ee:	d3eb      	bcc.n	80072c8 <HAL_FDCAN_GetRxMessage+0x21c>
    }

    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 80072f0:	68bb      	ldr	r3, [r7, #8]
 80072f2:	2b40      	cmp	r3, #64	; 0x40
 80072f4:	d105      	bne.n	8007302 <HAL_FDCAN_GetRxMessage+0x256>
    {
      /* Acknowledge the Rx FIFO 0 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF0A = GetIndex;
 80072f6:	68fb      	ldr	r3, [r7, #12]
 80072f8:	681b      	ldr	r3, [r3, #0]
 80072fa:	69fa      	ldr	r2, [r7, #28]
 80072fc:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
 8007300:	e01e      	b.n	8007340 <HAL_FDCAN_GetRxMessage+0x294>
    }
    else if (RxLocation == FDCAN_RX_FIFO1) /* Rx element is assigned to the Rx FIFO 1 */
 8007302:	68bb      	ldr	r3, [r7, #8]
 8007304:	2b41      	cmp	r3, #65	; 0x41
 8007306:	d105      	bne.n	8007314 <HAL_FDCAN_GetRxMessage+0x268>
    {
      /* Acknowledge the Rx FIFO 1 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF1A = GetIndex;
 8007308:	68fb      	ldr	r3, [r7, #12]
 800730a:	681b      	ldr	r3, [r3, #0]
 800730c:	69fa      	ldr	r2, [r7, #28]
 800730e:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
 8007312:	e015      	b.n	8007340 <HAL_FDCAN_GetRxMessage+0x294>
    }
    else /* Rx element is assigned to a dedicated Rx buffer */
    {
      /* Clear the New Data flag of the current Rx buffer */
      if (RxLocation < FDCAN_RX_BUFFER32)
 8007314:	68bb      	ldr	r3, [r7, #8]
 8007316:	2b1f      	cmp	r3, #31
 8007318:	d808      	bhi.n	800732c <HAL_FDCAN_GetRxMessage+0x280>
      {
        hfdcan->Instance->NDAT1 = ((uint32_t)1 << RxLocation);
 800731a:	68fb      	ldr	r3, [r7, #12]
 800731c:	681b      	ldr	r3, [r3, #0]
 800731e:	2101      	movs	r1, #1
 8007320:	68ba      	ldr	r2, [r7, #8]
 8007322:	fa01 f202 	lsl.w	r2, r1, r2
 8007326:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
 800732a:	e009      	b.n	8007340 <HAL_FDCAN_GetRxMessage+0x294>
      }
      else /* FDCAN_RX_BUFFER32 <= RxLocation <= FDCAN_RX_BUFFER63 */
      {
        hfdcan->Instance->NDAT2 = ((uint32_t)1 << (RxLocation & 0x1FU));
 800732c:	68bb      	ldr	r3, [r7, #8]
 800732e:	f003 021f 	and.w	r2, r3, #31
 8007332:	68fb      	ldr	r3, [r7, #12]
 8007334:	681b      	ldr	r3, [r3, #0]
 8007336:	2101      	movs	r1, #1
 8007338:	fa01 f202 	lsl.w	r2, r1, r2
 800733c:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
      }
    }

    /* Return function status */
    return HAL_OK;
 8007340:	2300      	movs	r3, #0
 8007342:	e008      	b.n	8007356 <HAL_FDCAN_GetRxMessage+0x2aa>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 8007344:	68fb      	ldr	r3, [r7, #12]
 8007346:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800734a:	f043 0208 	orr.w	r2, r3, #8
 800734e:	68fb      	ldr	r3, [r7, #12]
 8007350:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    return HAL_ERROR;
 8007354:	2301      	movs	r3, #1
  }
}
 8007356:	4618      	mov	r0, r3
 8007358:	372c      	adds	r7, #44	; 0x2c
 800735a:	46bd      	mov	sp, r7
 800735c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007360:	4770      	bx	lr
 8007362:	bf00      	nop
 8007364:	0801b014 	.word	0x0801b014

08007368 <HAL_FDCAN_ActivateNotification>:
  *           - FDCAN_IT_TX_COMPLETE
  *           - FDCAN_IT_TX_ABORT_COMPLETE
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_ActivateNotification(FDCAN_HandleTypeDef *hfdcan, uint32_t ActiveITs, uint32_t BufferIndexes)
{
 8007368:	b480      	push	{r7}
 800736a:	b087      	sub	sp, #28
 800736c:	af00      	add	r7, sp, #0
 800736e:	60f8      	str	r0, [r7, #12]
 8007370:	60b9      	str	r1, [r7, #8]
 8007372:	607a      	str	r2, [r7, #4]
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 8007374:	68fb      	ldr	r3, [r7, #12]
 8007376:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 800737a:	75fb      	strb	r3, [r7, #23]

  /* Check function parameters */
  assert_param(IS_FDCAN_IT(ActiveITs));

  if ((state == HAL_FDCAN_STATE_READY) || (state == HAL_FDCAN_STATE_BUSY))
 800737c:	7dfb      	ldrb	r3, [r7, #23]
 800737e:	2b01      	cmp	r3, #1
 8007380:	d002      	beq.n	8007388 <HAL_FDCAN_ActivateNotification+0x20>
 8007382:	7dfb      	ldrb	r3, [r7, #23]
 8007384:	2b02      	cmp	r3, #2
 8007386:	d155      	bne.n	8007434 <HAL_FDCAN_ActivateNotification+0xcc>
  {
    /* Enable Interrupt lines */
    if ((ActiveITs & hfdcan->Instance->ILS) == 0U)
 8007388:	68fb      	ldr	r3, [r7, #12]
 800738a:	681b      	ldr	r3, [r3, #0]
 800738c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800738e:	68bb      	ldr	r3, [r7, #8]
 8007390:	4013      	ands	r3, r2
 8007392:	2b00      	cmp	r3, #0
 8007394:	d108      	bne.n	80073a8 <HAL_FDCAN_ActivateNotification+0x40>
    {
      /* Enable Interrupt line 0 */
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE0);
 8007396:	68fb      	ldr	r3, [r7, #12]
 8007398:	681b      	ldr	r3, [r3, #0]
 800739a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800739c:	68fb      	ldr	r3, [r7, #12]
 800739e:	681b      	ldr	r3, [r3, #0]
 80073a0:	f042 0201 	orr.w	r2, r2, #1
 80073a4:	65da      	str	r2, [r3, #92]	; 0x5c
 80073a6:	e014      	b.n	80073d2 <HAL_FDCAN_ActivateNotification+0x6a>
    }
    else if ((ActiveITs & hfdcan->Instance->ILS) == ActiveITs)
 80073a8:	68fb      	ldr	r3, [r7, #12]
 80073aa:	681b      	ldr	r3, [r3, #0]
 80073ac:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80073ae:	68bb      	ldr	r3, [r7, #8]
 80073b0:	4013      	ands	r3, r2
 80073b2:	68ba      	ldr	r2, [r7, #8]
 80073b4:	429a      	cmp	r2, r3
 80073b6:	d108      	bne.n	80073ca <HAL_FDCAN_ActivateNotification+0x62>
    {
      /* Enable Interrupt line 1 */
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE1);
 80073b8:	68fb      	ldr	r3, [r7, #12]
 80073ba:	681b      	ldr	r3, [r3, #0]
 80073bc:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80073be:	68fb      	ldr	r3, [r7, #12]
 80073c0:	681b      	ldr	r3, [r3, #0]
 80073c2:	f042 0202 	orr.w	r2, r2, #2
 80073c6:	65da      	str	r2, [r3, #92]	; 0x5c
 80073c8:	e003      	b.n	80073d2 <HAL_FDCAN_ActivateNotification+0x6a>
    }
    else
    {
      /* Enable Interrupt lines 0 and 1 */
      hfdcan->Instance->ILE = (FDCAN_INTERRUPT_LINE0 | FDCAN_INTERRUPT_LINE1);
 80073ca:	68fb      	ldr	r3, [r7, #12]
 80073cc:	681b      	ldr	r3, [r3, #0]
 80073ce:	2203      	movs	r2, #3
 80073d0:	65da      	str	r2, [r3, #92]	; 0x5c
    }

    if ((ActiveITs & FDCAN_IT_TX_COMPLETE) != 0U)
 80073d2:	68bb      	ldr	r3, [r7, #8]
 80073d4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80073d8:	2b00      	cmp	r3, #0
 80073da:	d009      	beq.n	80073f0 <HAL_FDCAN_ActivateNotification+0x88>
    {
      /* Enable Tx Buffer Transmission Interrupt to set TC flag in IR register,
         but interrupt will only occure if TC is enabled in IE register */
      SET_BIT(hfdcan->Instance->TXBTIE, BufferIndexes);
 80073dc:	68fb      	ldr	r3, [r7, #12]
 80073de:	681b      	ldr	r3, [r3, #0]
 80073e0:	f8d3 10e0 	ldr.w	r1, [r3, #224]	; 0xe0
 80073e4:	68fb      	ldr	r3, [r7, #12]
 80073e6:	681b      	ldr	r3, [r3, #0]
 80073e8:	687a      	ldr	r2, [r7, #4]
 80073ea:	430a      	orrs	r2, r1
 80073ec:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
    }

    if ((ActiveITs & FDCAN_IT_TX_ABORT_COMPLETE) != 0U)
 80073f0:	68bb      	ldr	r3, [r7, #8]
 80073f2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80073f6:	2b00      	cmp	r3, #0
 80073f8:	d009      	beq.n	800740e <HAL_FDCAN_ActivateNotification+0xa6>
    {
      /* Enable Tx Buffer Cancellation Finished Interrupt to set TCF flag in IR register,
         but interrupt will only occure if TCF is enabled in IE register */
      SET_BIT(hfdcan->Instance->TXBCIE, BufferIndexes);
 80073fa:	68fb      	ldr	r3, [r7, #12]
 80073fc:	681b      	ldr	r3, [r3, #0]
 80073fe:	f8d3 10e4 	ldr.w	r1, [r3, #228]	; 0xe4
 8007402:	68fb      	ldr	r3, [r7, #12]
 8007404:	681b      	ldr	r3, [r3, #0]
 8007406:	687a      	ldr	r2, [r7, #4]
 8007408:	430a      	orrs	r2, r1
 800740a:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
    }

    /* Enable the selected interrupts */
    __HAL_FDCAN_ENABLE_IT(hfdcan, ActiveITs);
 800740e:	68fb      	ldr	r3, [r7, #12]
 8007410:	681b      	ldr	r3, [r3, #0]
 8007412:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8007414:	68ba      	ldr	r2, [r7, #8]
 8007416:	4b0f      	ldr	r3, [pc, #60]	; (8007454 <HAL_FDCAN_ActivateNotification+0xec>)
 8007418:	4013      	ands	r3, r2
 800741a:	68fa      	ldr	r2, [r7, #12]
 800741c:	6812      	ldr	r2, [r2, #0]
 800741e:	430b      	orrs	r3, r1
 8007420:	6553      	str	r3, [r2, #84]	; 0x54
 8007422:	4b0d      	ldr	r3, [pc, #52]	; (8007458 <HAL_FDCAN_ActivateNotification+0xf0>)
 8007424:	695a      	ldr	r2, [r3, #20]
 8007426:	68bb      	ldr	r3, [r7, #8]
 8007428:	0f9b      	lsrs	r3, r3, #30
 800742a:	490b      	ldr	r1, [pc, #44]	; (8007458 <HAL_FDCAN_ActivateNotification+0xf0>)
 800742c:	4313      	orrs	r3, r2
 800742e:	614b      	str	r3, [r1, #20]

    /* Return function status */
    return HAL_OK;
 8007430:	2300      	movs	r3, #0
 8007432:	e008      	b.n	8007446 <HAL_FDCAN_ActivateNotification+0xde>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_INITIALIZED;
 8007434:	68fb      	ldr	r3, [r7, #12]
 8007436:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800743a:	f043 0202 	orr.w	r2, r3, #2
 800743e:	68fb      	ldr	r3, [r7, #12]
 8007440:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    return HAL_ERROR;
 8007444:	2301      	movs	r3, #1
  }
}
 8007446:	4618      	mov	r0, r3
 8007448:	371c      	adds	r7, #28
 800744a:	46bd      	mov	sp, r7
 800744c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007450:	4770      	bx	lr
 8007452:	bf00      	nop
 8007454:	3fcfffff 	.word	0x3fcfffff
 8007458:	4000a800 	.word	0x4000a800

0800745c <HAL_FDCAN_IRQHandler>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
void HAL_FDCAN_IRQHandler(FDCAN_HandleTypeDef *hfdcan)
{
 800745c:	b580      	push	{r7, lr}
 800745e:	b092      	sub	sp, #72	; 0x48
 8007460:	af00      	add	r7, sp, #0
 8007462:	6078      	str	r0, [r7, #4]
  uint32_t TTDistErrors;
  uint32_t TTFatalErrors;
  uint32_t SWTime;
  uint32_t SWCycleCount;

  ClkCalibrationITs = (FDCAN_CCU->IR << 30);
 8007464:	4b90      	ldr	r3, [pc, #576]	; (80076a8 <HAL_FDCAN_IRQHandler+0x24c>)
 8007466:	691b      	ldr	r3, [r3, #16]
 8007468:	079b      	lsls	r3, r3, #30
 800746a:	647b      	str	r3, [r7, #68]	; 0x44
  ClkCalibrationITs &= (FDCAN_CCU->IE << 30);
 800746c:	4b8e      	ldr	r3, [pc, #568]	; (80076a8 <HAL_FDCAN_IRQHandler+0x24c>)
 800746e:	695b      	ldr	r3, [r3, #20]
 8007470:	079b      	lsls	r3, r3, #30
 8007472:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007474:	4013      	ands	r3, r2
 8007476:	647b      	str	r3, [r7, #68]	; 0x44
  TxEventFifoITs = hfdcan->Instance->IR & FDCAN_TX_EVENT_FIFO_MASK;
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	681b      	ldr	r3, [r3, #0]
 800747c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800747e:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 8007482:	643b      	str	r3, [r7, #64]	; 0x40
  TxEventFifoITs &= hfdcan->Instance->IE;
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	681b      	ldr	r3, [r3, #0]
 8007488:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800748a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800748c:	4013      	ands	r3, r2
 800748e:	643b      	str	r3, [r7, #64]	; 0x40
  RxFifo0ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO0_MASK;
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	681b      	ldr	r3, [r3, #0]
 8007494:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007496:	f003 030f 	and.w	r3, r3, #15
 800749a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RxFifo0ITs &= hfdcan->Instance->IE;
 800749c:	687b      	ldr	r3, [r7, #4]
 800749e:	681b      	ldr	r3, [r3, #0]
 80074a0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80074a2:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80074a4:	4013      	ands	r3, r2
 80074a6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RxFifo1ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO1_MASK;
 80074a8:	687b      	ldr	r3, [r7, #4]
 80074aa:	681b      	ldr	r3, [r3, #0]
 80074ac:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80074ae:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80074b2:	63bb      	str	r3, [r7, #56]	; 0x38
  RxFifo1ITs &= hfdcan->Instance->IE;
 80074b4:	687b      	ldr	r3, [r7, #4]
 80074b6:	681b      	ldr	r3, [r3, #0]
 80074b8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80074ba:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80074bc:	4013      	ands	r3, r2
 80074be:	63bb      	str	r3, [r7, #56]	; 0x38
  Errors = hfdcan->Instance->IR & FDCAN_ERROR_MASK;
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	681b      	ldr	r3, [r3, #0]
 80074c4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80074c6:	f003 5371 	and.w	r3, r3, #1010827264	; 0x3c400000
 80074ca:	637b      	str	r3, [r7, #52]	; 0x34
  Errors &= hfdcan->Instance->IE;
 80074cc:	687b      	ldr	r3, [r7, #4]
 80074ce:	681b      	ldr	r3, [r3, #0]
 80074d0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80074d2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80074d4:	4013      	ands	r3, r2
 80074d6:	637b      	str	r3, [r7, #52]	; 0x34
  ErrorStatusITs = hfdcan->Instance->IR & FDCAN_ERROR_STATUS_MASK;
 80074d8:	687b      	ldr	r3, [r7, #4]
 80074da:	681b      	ldr	r3, [r3, #0]
 80074dc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80074de:	f003 7360 	and.w	r3, r3, #58720256	; 0x3800000
 80074e2:	633b      	str	r3, [r7, #48]	; 0x30
  ErrorStatusITs &= hfdcan->Instance->IE;
 80074e4:	687b      	ldr	r3, [r7, #4]
 80074e6:	681b      	ldr	r3, [r3, #0]
 80074e8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80074ea:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80074ec:	4013      	ands	r3, r2
 80074ee:	633b      	str	r3, [r7, #48]	; 0x30

  /* High Priority Message interrupt management *******************************/
  if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_RX_HIGH_PRIORITY_MSG) != 0U)
 80074f0:	687b      	ldr	r3, [r7, #4]
 80074f2:	681b      	ldr	r3, [r3, #0]
 80074f4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80074f6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80074fa:	2b00      	cmp	r3, #0
 80074fc:	d011      	beq.n	8007522 <HAL_FDCAN_IRQHandler+0xc6>
  {
    if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG) != 0U)
 80074fe:	687b      	ldr	r3, [r7, #4]
 8007500:	681b      	ldr	r3, [r3, #0]
 8007502:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007504:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007508:	2b00      	cmp	r3, #0
 800750a:	d00a      	beq.n	8007522 <HAL_FDCAN_IRQHandler+0xc6>
    {
      /* Clear the High Priority Message flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG);
 800750c:	687b      	ldr	r3, [r7, #4]
 800750e:	681b      	ldr	r3, [r3, #0]
 8007510:	f44f 7280 	mov.w	r2, #256	; 0x100
 8007514:	651a      	str	r2, [r3, #80]	; 0x50
 8007516:	4b64      	ldr	r3, [pc, #400]	; (80076a8 <HAL_FDCAN_IRQHandler+0x24c>)
 8007518:	2200      	movs	r2, #0
 800751a:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->HighPriorityMessageCallback(hfdcan);
#else
      /* High Priority Message Callback */
      HAL_FDCAN_HighPriorityMessageCallback(hfdcan);
 800751c:	6878      	ldr	r0, [r7, #4]
 800751e:	f000 fa5a 	bl	80079d6 <HAL_FDCAN_HighPriorityMessageCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Abort interrupt management **********************************/
  if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TX_ABORT_COMPLETE) != 0U)
 8007522:	687b      	ldr	r3, [r7, #4]
 8007524:	681b      	ldr	r3, [r3, #0]
 8007526:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007528:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800752c:	2b00      	cmp	r3, #0
 800752e:	d01e      	beq.n	800756e <HAL_FDCAN_IRQHandler+0x112>
  {
    if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TX_ABORT_COMPLETE) != 0U)
 8007530:	687b      	ldr	r3, [r7, #4]
 8007532:	681b      	ldr	r3, [r3, #0]
 8007534:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007536:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800753a:	2b00      	cmp	r3, #0
 800753c:	d017      	beq.n	800756e <HAL_FDCAN_IRQHandler+0x112>
    {
      /* List of aborted monitored buffers */
      AbortedBuffers = hfdcan->Instance->TXBCF;
 800753e:	687b      	ldr	r3, [r7, #4]
 8007540:	681b      	ldr	r3, [r3, #0]
 8007542:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 8007546:	62fb      	str	r3, [r7, #44]	; 0x2c
      AbortedBuffers &= hfdcan->Instance->TXBCIE;
 8007548:	687b      	ldr	r3, [r7, #4]
 800754a:	681b      	ldr	r3, [r3, #0]
 800754c:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8007550:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007552:	4013      	ands	r3, r2
 8007554:	62fb      	str	r3, [r7, #44]	; 0x2c

      /* Clear the Transmission Cancellation flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_ABORT_COMPLETE);
 8007556:	687b      	ldr	r3, [r7, #4]
 8007558:	681b      	ldr	r3, [r3, #0]
 800755a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800755e:	651a      	str	r2, [r3, #80]	; 0x50
 8007560:	4b51      	ldr	r3, [pc, #324]	; (80076a8 <HAL_FDCAN_IRQHandler+0x24c>)
 8007562:	2200      	movs	r2, #0
 8007564:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferAbortCallback(hfdcan, AbortedBuffers);
#else
      /* Transmission Cancellation Callback */
      HAL_FDCAN_TxBufferAbortCallback(hfdcan, AbortedBuffers);
 8007566:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007568:	6878      	ldr	r0, [r7, #4]
 800756a:	f000 fa0b 	bl	8007984 <HAL_FDCAN_TxBufferAbortCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Clock calibration unit interrupts management *****************************/
  if (ClkCalibrationITs != 0U)
 800756e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007570:	2b00      	cmp	r3, #0
 8007572:	d00d      	beq.n	8007590 <HAL_FDCAN_IRQHandler+0x134>
  {
    /* Clear the Clock Calibration flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, ClkCalibrationITs);
 8007574:	687b      	ldr	r3, [r7, #4]
 8007576:	681a      	ldr	r2, [r3, #0]
 8007578:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800757a:	4b4c      	ldr	r3, [pc, #304]	; (80076ac <HAL_FDCAN_IRQHandler+0x250>)
 800757c:	400b      	ands	r3, r1
 800757e:	6513      	str	r3, [r2, #80]	; 0x50
 8007580:	4a49      	ldr	r2, [pc, #292]	; (80076a8 <HAL_FDCAN_IRQHandler+0x24c>)
 8007582:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007584:	0f9b      	lsrs	r3, r3, #30
 8007586:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ClockCalibrationCallback(hfdcan, ClkCalibrationITs);
#else
    /* Clock Calibration Callback */
    HAL_FDCAN_ClockCalibrationCallback(hfdcan, ClkCalibrationITs);
 8007588:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800758a:	6878      	ldr	r0, [r7, #4]
 800758c:	f000 f9c4 	bl	8007918 <HAL_FDCAN_ClockCalibrationCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Tx event FIFO interrupts management **************************************/
  if (TxEventFifoITs != 0U)
 8007590:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007592:	2b00      	cmp	r3, #0
 8007594:	d00d      	beq.n	80075b2 <HAL_FDCAN_IRQHandler+0x156>
  {
    /* Clear the Tx Event FIFO flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, TxEventFifoITs);
 8007596:	687b      	ldr	r3, [r7, #4]
 8007598:	681a      	ldr	r2, [r3, #0]
 800759a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800759c:	4b43      	ldr	r3, [pc, #268]	; (80076ac <HAL_FDCAN_IRQHandler+0x250>)
 800759e:	400b      	ands	r3, r1
 80075a0:	6513      	str	r3, [r2, #80]	; 0x50
 80075a2:	4a41      	ldr	r2, [pc, #260]	; (80076a8 <HAL_FDCAN_IRQHandler+0x24c>)
 80075a4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80075a6:	0f9b      	lsrs	r3, r3, #30
 80075a8:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->TxEventFifoCallback(hfdcan, TxEventFifoITs);
#else
    /* Tx Event FIFO Callback */
    HAL_FDCAN_TxEventFifoCallback(hfdcan, TxEventFifoITs);
 80075aa:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80075ac:	6878      	ldr	r0, [r7, #4]
 80075ae:	f000 f9be 	bl	800792e <HAL_FDCAN_TxEventFifoCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 0 interrupts management ******************************************/
  if (RxFifo0ITs != 0U)
 80075b2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80075b4:	2b00      	cmp	r3, #0
 80075b6:	d00d      	beq.n	80075d4 <HAL_FDCAN_IRQHandler+0x178>
  {
    /* Clear the Rx FIFO 0 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo0ITs);
 80075b8:	687b      	ldr	r3, [r7, #4]
 80075ba:	681a      	ldr	r2, [r3, #0]
 80075bc:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80075be:	4b3b      	ldr	r3, [pc, #236]	; (80076ac <HAL_FDCAN_IRQHandler+0x250>)
 80075c0:	400b      	ands	r3, r1
 80075c2:	6513      	str	r3, [r2, #80]	; 0x50
 80075c4:	4a38      	ldr	r2, [pc, #224]	; (80076a8 <HAL_FDCAN_IRQHandler+0x24c>)
 80075c6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80075c8:	0f9b      	lsrs	r3, r3, #30
 80075ca:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo0Callback(hfdcan, RxFifo0ITs);
#else
    /* Rx FIFO 0 Callback */
    HAL_FDCAN_RxFifo0Callback(hfdcan, RxFifo0ITs);
 80075cc:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80075ce:	6878      	ldr	r0, [r7, #4]
 80075d0:	f7f9 f89c 	bl	800070c <HAL_FDCAN_RxFifo0Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 1 interrupts management ******************************************/
  if (RxFifo1ITs != 0U)
 80075d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80075d6:	2b00      	cmp	r3, #0
 80075d8:	d00d      	beq.n	80075f6 <HAL_FDCAN_IRQHandler+0x19a>
  {
    /* Clear the Rx FIFO 1 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo1ITs);
 80075da:	687b      	ldr	r3, [r7, #4]
 80075dc:	681a      	ldr	r2, [r3, #0]
 80075de:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80075e0:	4b32      	ldr	r3, [pc, #200]	; (80076ac <HAL_FDCAN_IRQHandler+0x250>)
 80075e2:	400b      	ands	r3, r1
 80075e4:	6513      	str	r3, [r2, #80]	; 0x50
 80075e6:	4a30      	ldr	r2, [pc, #192]	; (80076a8 <HAL_FDCAN_IRQHandler+0x24c>)
 80075e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80075ea:	0f9b      	lsrs	r3, r3, #30
 80075ec:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo1Callback(hfdcan, RxFifo1ITs);
#else
    /* Rx FIFO 1 Callback */
    HAL_FDCAN_RxFifo1Callback(hfdcan, RxFifo1ITs);
 80075ee:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80075f0:	6878      	ldr	r0, [r7, #4]
 80075f2:	f000 f9a7 	bl	8007944 <HAL_FDCAN_RxFifo1Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Tx FIFO empty interrupt management ***************************************/
  if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TX_FIFO_EMPTY) != 0U)
 80075f6:	687b      	ldr	r3, [r7, #4]
 80075f8:	681b      	ldr	r3, [r3, #0]
 80075fa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80075fc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007600:	2b00      	cmp	r3, #0
 8007602:	d011      	beq.n	8007628 <HAL_FDCAN_IRQHandler+0x1cc>
  {
    if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TX_FIFO_EMPTY) != 0U)
 8007604:	687b      	ldr	r3, [r7, #4]
 8007606:	681b      	ldr	r3, [r3, #0]
 8007608:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800760a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800760e:	2b00      	cmp	r3, #0
 8007610:	d00a      	beq.n	8007628 <HAL_FDCAN_IRQHandler+0x1cc>
    {
      /* Clear the Tx FIFO empty flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_FIFO_EMPTY);
 8007612:	687b      	ldr	r3, [r7, #4]
 8007614:	681b      	ldr	r3, [r3, #0]
 8007616:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800761a:	651a      	str	r2, [r3, #80]	; 0x50
 800761c:	4b22      	ldr	r3, [pc, #136]	; (80076a8 <HAL_FDCAN_IRQHandler+0x24c>)
 800761e:	2200      	movs	r2, #0
 8007620:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxFifoEmptyCallback(hfdcan);
#else
      /* Tx FIFO empty Callback */
      HAL_FDCAN_TxFifoEmptyCallback(hfdcan);
 8007622:	6878      	ldr	r0, [r7, #4]
 8007624:	f000 f999 	bl	800795a <HAL_FDCAN_TxFifoEmptyCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Complete interrupt management *******************************/
  if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TX_COMPLETE) != 0U)
 8007628:	687b      	ldr	r3, [r7, #4]
 800762a:	681b      	ldr	r3, [r3, #0]
 800762c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800762e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007632:	2b00      	cmp	r3, #0
 8007634:	d01e      	beq.n	8007674 <HAL_FDCAN_IRQHandler+0x218>
  {
    if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TX_COMPLETE) != 0U)
 8007636:	687b      	ldr	r3, [r7, #4]
 8007638:	681b      	ldr	r3, [r3, #0]
 800763a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800763c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007640:	2b00      	cmp	r3, #0
 8007642:	d017      	beq.n	8007674 <HAL_FDCAN_IRQHandler+0x218>
    {
      /* List of transmitted monitored buffers */
      TransmittedBuffers = hfdcan->Instance->TXBTO;
 8007644:	687b      	ldr	r3, [r7, #4]
 8007646:	681b      	ldr	r3, [r3, #0]
 8007648:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800764c:	62bb      	str	r3, [r7, #40]	; 0x28
      TransmittedBuffers &= hfdcan->Instance->TXBTIE;
 800764e:	687b      	ldr	r3, [r7, #4]
 8007650:	681b      	ldr	r3, [r3, #0]
 8007652:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8007656:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007658:	4013      	ands	r3, r2
 800765a:	62bb      	str	r3, [r7, #40]	; 0x28

      /* Clear the Transmission Complete flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_COMPLETE);
 800765c:	687b      	ldr	r3, [r7, #4]
 800765e:	681b      	ldr	r3, [r3, #0]
 8007660:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007664:	651a      	str	r2, [r3, #80]	; 0x50
 8007666:	4b10      	ldr	r3, [pc, #64]	; (80076a8 <HAL_FDCAN_IRQHandler+0x24c>)
 8007668:	2200      	movs	r2, #0
 800766a:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
#else
      /* Transmission Complete Callback */
      HAL_FDCAN_TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
 800766c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800766e:	6878      	ldr	r0, [r7, #4]
 8007670:	f000 f97d 	bl	800796e <HAL_FDCAN_TxBufferCompleteCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Rx Buffer New Message interrupt management *******************************/
  if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_RX_BUFFER_NEW_MESSAGE) != 0U)
 8007674:	687b      	ldr	r3, [r7, #4]
 8007676:	681b      	ldr	r3, [r3, #0]
 8007678:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800767a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800767e:	2b00      	cmp	r3, #0
 8007680:	d016      	beq.n	80076b0 <HAL_FDCAN_IRQHandler+0x254>
  {
    if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_RX_BUFFER_NEW_MESSAGE) != 0U)
 8007682:	687b      	ldr	r3, [r7, #4]
 8007684:	681b      	ldr	r3, [r3, #0]
 8007686:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007688:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800768c:	2b00      	cmp	r3, #0
 800768e:	d00f      	beq.n	80076b0 <HAL_FDCAN_IRQHandler+0x254>
    {
      /* Clear the Rx Buffer New Message flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RX_BUFFER_NEW_MESSAGE);
 8007690:	687b      	ldr	r3, [r7, #4]
 8007692:	681b      	ldr	r3, [r3, #0]
 8007694:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8007698:	651a      	str	r2, [r3, #80]	; 0x50
 800769a:	4b03      	ldr	r3, [pc, #12]	; (80076a8 <HAL_FDCAN_IRQHandler+0x24c>)
 800769c:	2200      	movs	r2, #0
 800769e:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->RxBufferNewMessageCallback(hfdcan);
#else
      /* Rx Buffer New Message Callback */
      HAL_FDCAN_RxBufferNewMessageCallback(hfdcan);
 80076a0:	6878      	ldr	r0, [r7, #4]
 80076a2:	f000 f97a 	bl	800799a <HAL_FDCAN_RxBufferNewMessageCallback>
 80076a6:	e003      	b.n	80076b0 <HAL_FDCAN_IRQHandler+0x254>
 80076a8:	4000a800 	.word	0x4000a800
 80076ac:	3fcfffff 	.word	0x3fcfffff
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timestamp Wraparound interrupt management ********************************/
  if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TIMESTAMP_WRAPAROUND) != 0U)
 80076b0:	687b      	ldr	r3, [r7, #4]
 80076b2:	681b      	ldr	r3, [r3, #0]
 80076b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80076b6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80076ba:	2b00      	cmp	r3, #0
 80076bc:	d011      	beq.n	80076e2 <HAL_FDCAN_IRQHandler+0x286>
  {
    if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TIMESTAMP_WRAPAROUND) != 0U)
 80076be:	687b      	ldr	r3, [r7, #4]
 80076c0:	681b      	ldr	r3, [r3, #0]
 80076c2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80076c4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80076c8:	2b00      	cmp	r3, #0
 80076ca:	d00a      	beq.n	80076e2 <HAL_FDCAN_IRQHandler+0x286>
    {
      /* Clear the Timestamp Wraparound flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMESTAMP_WRAPAROUND);
 80076cc:	687b      	ldr	r3, [r7, #4]
 80076ce:	681b      	ldr	r3, [r3, #0]
 80076d0:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80076d4:	651a      	str	r2, [r3, #80]	; 0x50
 80076d6:	4b8d      	ldr	r3, [pc, #564]	; (800790c <HAL_FDCAN_IRQHandler+0x4b0>)
 80076d8:	2200      	movs	r2, #0
 80076da:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimestampWraparoundCallback(hfdcan);
#else
      /* Timestamp Wraparound Callback */
      HAL_FDCAN_TimestampWraparoundCallback(hfdcan);
 80076dc:	6878      	ldr	r0, [r7, #4]
 80076de:	f000 f966 	bl	80079ae <HAL_FDCAN_TimestampWraparoundCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timeout Occurred interrupt management ************************************/
  if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TIMEOUT_OCCURRED) != 0U)
 80076e2:	687b      	ldr	r3, [r7, #4]
 80076e4:	681b      	ldr	r3, [r3, #0]
 80076e6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80076e8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80076ec:	2b00      	cmp	r3, #0
 80076ee:	d011      	beq.n	8007714 <HAL_FDCAN_IRQHandler+0x2b8>
  {
    if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TIMEOUT_OCCURRED) != 0U)
 80076f0:	687b      	ldr	r3, [r7, #4]
 80076f2:	681b      	ldr	r3, [r3, #0]
 80076f4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80076f6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80076fa:	2b00      	cmp	r3, #0
 80076fc:	d00a      	beq.n	8007714 <HAL_FDCAN_IRQHandler+0x2b8>
    {
      /* Clear the Timeout Occurred flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMEOUT_OCCURRED);
 80076fe:	687b      	ldr	r3, [r7, #4]
 8007700:	681b      	ldr	r3, [r3, #0]
 8007702:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8007706:	651a      	str	r2, [r3, #80]	; 0x50
 8007708:	4b80      	ldr	r3, [pc, #512]	; (800790c <HAL_FDCAN_IRQHandler+0x4b0>)
 800770a:	2200      	movs	r2, #0
 800770c:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimeoutOccurredCallback(hfdcan);
#else
      /* Timeout Occurred Callback */
      HAL_FDCAN_TimeoutOccurredCallback(hfdcan);
 800770e:	6878      	ldr	r0, [r7, #4]
 8007710:	f000 f957 	bl	80079c2 <HAL_FDCAN_TimeoutOccurredCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Message RAM access failure interrupt management **************************/
  if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_RAM_ACCESS_FAILURE) != 0U)
 8007714:	687b      	ldr	r3, [r7, #4]
 8007716:	681b      	ldr	r3, [r3, #0]
 8007718:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800771a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800771e:	2b00      	cmp	r3, #0
 8007720:	d016      	beq.n	8007750 <HAL_FDCAN_IRQHandler+0x2f4>
  {
    if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_RAM_ACCESS_FAILURE) != 0U)
 8007722:	687b      	ldr	r3, [r7, #4]
 8007724:	681b      	ldr	r3, [r3, #0]
 8007726:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007728:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800772c:	2b00      	cmp	r3, #0
 800772e:	d00f      	beq.n	8007750 <HAL_FDCAN_IRQHandler+0x2f4>
    {
      /* Clear the Message RAM access failure flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RAM_ACCESS_FAILURE);
 8007730:	687b      	ldr	r3, [r7, #4]
 8007732:	681b      	ldr	r3, [r3, #0]
 8007734:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8007738:	651a      	str	r2, [r3, #80]	; 0x50
 800773a:	4b74      	ldr	r3, [pc, #464]	; (800790c <HAL_FDCAN_IRQHandler+0x4b0>)
 800773c:	2200      	movs	r2, #0
 800773e:	611a      	str	r2, [r3, #16]

      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_RAM_ACCESS;
 8007740:	687b      	ldr	r3, [r7, #4]
 8007742:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8007746:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800774a:	687b      	ldr	r3, [r7, #4]
 800774c:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
    }
  }

  /* Error Status interrupts management ***************************************/
  if (ErrorStatusITs != 0U)
 8007750:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007752:	2b00      	cmp	r3, #0
 8007754:	d00d      	beq.n	8007772 <HAL_FDCAN_IRQHandler+0x316>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, ErrorStatusITs);
 8007756:	687b      	ldr	r3, [r7, #4]
 8007758:	681a      	ldr	r2, [r3, #0]
 800775a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800775c:	4b6c      	ldr	r3, [pc, #432]	; (8007910 <HAL_FDCAN_IRQHandler+0x4b4>)
 800775e:	400b      	ands	r3, r1
 8007760:	6513      	str	r3, [r2, #80]	; 0x50
 8007762:	4a6a      	ldr	r2, [pc, #424]	; (800790c <HAL_FDCAN_IRQHandler+0x4b0>)
 8007764:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007766:	0f9b      	lsrs	r3, r3, #30
 8007768:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorStatusCallback(hfdcan, ErrorStatusITs);
#else
    /* Error Status Callback */
    HAL_FDCAN_ErrorStatusCallback(hfdcan, ErrorStatusITs);
 800776a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800776c:	6878      	ldr	r0, [r7, #4]
 800776e:	f000 f946 	bl	80079fe <HAL_FDCAN_ErrorStatusCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Error interrupts management **********************************************/
  if (Errors != 0U)
 8007772:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007774:	2b00      	cmp	r3, #0
 8007776:	d011      	beq.n	800779c <HAL_FDCAN_IRQHandler+0x340>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, Errors);
 8007778:	687b      	ldr	r3, [r7, #4]
 800777a:	681a      	ldr	r2, [r3, #0]
 800777c:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800777e:	4b64      	ldr	r3, [pc, #400]	; (8007910 <HAL_FDCAN_IRQHandler+0x4b4>)
 8007780:	400b      	ands	r3, r1
 8007782:	6513      	str	r3, [r2, #80]	; 0x50
 8007784:	4a61      	ldr	r2, [pc, #388]	; (800790c <HAL_FDCAN_IRQHandler+0x4b0>)
 8007786:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007788:	0f9b      	lsrs	r3, r3, #30
 800778a:	6113      	str	r3, [r2, #16]

    /* Update error code */
    hfdcan->ErrorCode |= Errors;
 800778c:	687b      	ldr	r3, [r7, #4]
 800778e:	f8d3 209c 	ldr.w	r2, [r3, #156]	; 0x9c
 8007792:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007794:	431a      	orrs	r2, r3
 8007796:	687b      	ldr	r3, [r7, #4]
 8007798:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
  }

  if (hfdcan->Instance == FDCAN1)
 800779c:	687b      	ldr	r3, [r7, #4]
 800779e:	681b      	ldr	r3, [r3, #0]
 80077a0:	4a5c      	ldr	r2, [pc, #368]	; (8007914 <HAL_FDCAN_IRQHandler+0x4b8>)
 80077a2:	4293      	cmp	r3, r2
 80077a4:	f040 80a6 	bne.w	80078f4 <HAL_FDCAN_IRQHandler+0x498>
  {
    if ((hfdcan->ttcan->TTOCF & FDCAN_TTOCF_OM) != 0U)
 80077a8:	687b      	ldr	r3, [r7, #4]
 80077aa:	685b      	ldr	r3, [r3, #4]
 80077ac:	689b      	ldr	r3, [r3, #8]
 80077ae:	f003 0303 	and.w	r3, r3, #3
 80077b2:	2b00      	cmp	r3, #0
 80077b4:	f000 809e 	beq.w	80078f4 <HAL_FDCAN_IRQHandler+0x498>
    {
      TTSchedSyncITs = hfdcan->ttcan->TTIR & FDCAN_TT_SCHEDULE_SYNC_MASK;
 80077b8:	687b      	ldr	r3, [r7, #4]
 80077ba:	685b      	ldr	r3, [r3, #4]
 80077bc:	6a1b      	ldr	r3, [r3, #32]
 80077be:	f003 030f 	and.w	r3, r3, #15
 80077c2:	627b      	str	r3, [r7, #36]	; 0x24
      TTSchedSyncITs &= hfdcan->ttcan->TTIE;
 80077c4:	687b      	ldr	r3, [r7, #4]
 80077c6:	685b      	ldr	r3, [r3, #4]
 80077c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80077ca:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80077cc:	4013      	ands	r3, r2
 80077ce:	627b      	str	r3, [r7, #36]	; 0x24
      TTTimeMarkITs = hfdcan->ttcan->TTIR & FDCAN_TT_TIME_MARK_MASK;
 80077d0:	687b      	ldr	r3, [r7, #4]
 80077d2:	685b      	ldr	r3, [r3, #4]
 80077d4:	6a1b      	ldr	r3, [r3, #32]
 80077d6:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80077da:	623b      	str	r3, [r7, #32]
      TTTimeMarkITs &= hfdcan->ttcan->TTIE;
 80077dc:	687b      	ldr	r3, [r7, #4]
 80077de:	685b      	ldr	r3, [r3, #4]
 80077e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80077e2:	6a3a      	ldr	r2, [r7, #32]
 80077e4:	4013      	ands	r3, r2
 80077e6:	623b      	str	r3, [r7, #32]
      TTGlobTimeITs = hfdcan->ttcan->TTIR & FDCAN_TT_GLOBAL_TIME_MASK;
 80077e8:	687b      	ldr	r3, [r7, #4]
 80077ea:	685b      	ldr	r3, [r3, #4]
 80077ec:	6a1b      	ldr	r3, [r3, #32]
 80077ee:	f403 73c0 	and.w	r3, r3, #384	; 0x180
 80077f2:	61fb      	str	r3, [r7, #28]
      TTGlobTimeITs &= hfdcan->ttcan->TTIE;
 80077f4:	687b      	ldr	r3, [r7, #4]
 80077f6:	685b      	ldr	r3, [r3, #4]
 80077f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80077fa:	69fa      	ldr	r2, [r7, #28]
 80077fc:	4013      	ands	r3, r2
 80077fe:	61fb      	str	r3, [r7, #28]
      TTDistErrors = hfdcan->ttcan->TTIR & FDCAN_TT_DISTURBING_ERROR_MASK;
 8007800:	687b      	ldr	r3, [r7, #4]
 8007802:	685b      	ldr	r3, [r3, #4]
 8007804:	6a1b      	ldr	r3, [r3, #32]
 8007806:	f403 43fc 	and.w	r3, r3, #32256	; 0x7e00
 800780a:	61bb      	str	r3, [r7, #24]
      TTDistErrors &= hfdcan->ttcan->TTIE;
 800780c:	687b      	ldr	r3, [r7, #4]
 800780e:	685b      	ldr	r3, [r3, #4]
 8007810:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007812:	69ba      	ldr	r2, [r7, #24]
 8007814:	4013      	ands	r3, r2
 8007816:	61bb      	str	r3, [r7, #24]
      TTFatalErrors = hfdcan->ttcan->TTIR & FDCAN_TT_FATAL_ERROR_MASK;
 8007818:	687b      	ldr	r3, [r7, #4]
 800781a:	685b      	ldr	r3, [r3, #4]
 800781c:	6a1b      	ldr	r3, [r3, #32]
 800781e:	f403 23f0 	and.w	r3, r3, #491520	; 0x78000
 8007822:	617b      	str	r3, [r7, #20]
      TTFatalErrors &= hfdcan->ttcan->TTIE;
 8007824:	687b      	ldr	r3, [r7, #4]
 8007826:	685b      	ldr	r3, [r3, #4]
 8007828:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800782a:	697a      	ldr	r2, [r7, #20]
 800782c:	4013      	ands	r3, r2
 800782e:	617b      	str	r3, [r7, #20]

      /* TT Schedule Synchronization interrupts management **********************/
      if (TTSchedSyncITs != 0U)
 8007830:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007832:	2b00      	cmp	r3, #0
 8007834:	d007      	beq.n	8007846 <HAL_FDCAN_IRQHandler+0x3ea>
      {
        /* Clear the TT Schedule Synchronization flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTSchedSyncITs);
 8007836:	687b      	ldr	r3, [r7, #4]
 8007838:	685b      	ldr	r3, [r3, #4]
 800783a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800783c:	621a      	str	r2, [r3, #32]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hfdcan->TT_ScheduleSyncCallback(hfdcan, TTSchedSyncITs);
#else
        /* TT Schedule Synchronization Callback */
        HAL_FDCAN_TT_ScheduleSyncCallback(hfdcan, TTSchedSyncITs);
 800783e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8007840:	6878      	ldr	r0, [r7, #4]
 8007842:	f000 f8e7 	bl	8007a14 <HAL_FDCAN_TT_ScheduleSyncCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
      }

      /* TT Time Mark interrupts management *************************************/
      if (TTTimeMarkITs != 0U)
 8007846:	6a3b      	ldr	r3, [r7, #32]
 8007848:	2b00      	cmp	r3, #0
 800784a:	d007      	beq.n	800785c <HAL_FDCAN_IRQHandler+0x400>
      {
        /* Clear the TT Time Mark flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTTimeMarkITs);
 800784c:	687b      	ldr	r3, [r7, #4]
 800784e:	685b      	ldr	r3, [r3, #4]
 8007850:	6a3a      	ldr	r2, [r7, #32]
 8007852:	621a      	str	r2, [r3, #32]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hfdcan->TT_TimeMarkCallback(hfdcan, TTTimeMarkITs);
#else
        /* TT Time Mark Callback */
        HAL_FDCAN_TT_TimeMarkCallback(hfdcan, TTTimeMarkITs);
 8007854:	6a39      	ldr	r1, [r7, #32]
 8007856:	6878      	ldr	r0, [r7, #4]
 8007858:	f000 f8e7 	bl	8007a2a <HAL_FDCAN_TT_TimeMarkCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
      }

      /* TT Stop Watch interrupt management *************************************/
      if (__HAL_FDCAN_TT_GET_IT_SOURCE(hfdcan, FDCAN_TT_IT_STOP_WATCH) != 0U)
 800785c:	687b      	ldr	r3, [r7, #4]
 800785e:	685b      	ldr	r3, [r3, #4]
 8007860:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007862:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007866:	2b00      	cmp	r3, #0
 8007868:	d01b      	beq.n	80078a2 <HAL_FDCAN_IRQHandler+0x446>
      {
        if (__HAL_FDCAN_TT_GET_FLAG(hfdcan, FDCAN_TT_FLAG_STOP_WATCH) != 0U)
 800786a:	687b      	ldr	r3, [r7, #4]
 800786c:	685b      	ldr	r3, [r3, #4]
 800786e:	6a1b      	ldr	r3, [r3, #32]
 8007870:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007874:	2b00      	cmp	r3, #0
 8007876:	d014      	beq.n	80078a2 <HAL_FDCAN_IRQHandler+0x446>
        {
          /* Retrieve Stop watch Time and Cycle count */
          SWTime = ((hfdcan->ttcan->TTCPT & FDCAN_TTCPT_SWV) >> FDCAN_TTCPT_SWV_Pos);
 8007878:	687b      	ldr	r3, [r7, #4]
 800787a:	685b      	ldr	r3, [r3, #4]
 800787c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800787e:	0c1b      	lsrs	r3, r3, #16
 8007880:	b29b      	uxth	r3, r3
 8007882:	613b      	str	r3, [r7, #16]
          SWCycleCount = ((hfdcan->ttcan->TTCPT & FDCAN_TTCPT_CCV) >> FDCAN_TTCPT_CCV_Pos);
 8007884:	687b      	ldr	r3, [r7, #4]
 8007886:	685b      	ldr	r3, [r3, #4]
 8007888:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800788a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800788e:	60fb      	str	r3, [r7, #12]

          /* Clear the TT Stop Watch flag */
          __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, FDCAN_TT_FLAG_STOP_WATCH);
 8007890:	687b      	ldr	r3, [r7, #4]
 8007892:	685b      	ldr	r3, [r3, #4]
 8007894:	2240      	movs	r2, #64	; 0x40
 8007896:	621a      	str	r2, [r3, #32]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hfdcan->TT_StopWatchCallback(hfdcan, SWTime, SWCycleCount);
#else
          /* TT Stop Watch Callback */
          HAL_FDCAN_TT_StopWatchCallback(hfdcan, SWTime, SWCycleCount);
 8007898:	68fa      	ldr	r2, [r7, #12]
 800789a:	6939      	ldr	r1, [r7, #16]
 800789c:	6878      	ldr	r0, [r7, #4]
 800789e:	f000 f8cf 	bl	8007a40 <HAL_FDCAN_TT_StopWatchCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
        }
      }

      /* TT Global Time interrupts management ***********************************/
      if (TTGlobTimeITs != 0U)
 80078a2:	69fb      	ldr	r3, [r7, #28]
 80078a4:	2b00      	cmp	r3, #0
 80078a6:	d007      	beq.n	80078b8 <HAL_FDCAN_IRQHandler+0x45c>
      {
        /* Clear the TT Global Time flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTGlobTimeITs);
 80078a8:	687b      	ldr	r3, [r7, #4]
 80078aa:	685b      	ldr	r3, [r3, #4]
 80078ac:	69fa      	ldr	r2, [r7, #28]
 80078ae:	621a      	str	r2, [r3, #32]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hfdcan->TT_GlobalTimeCallback(hfdcan, TTGlobTimeITs);
#else
        /* TT Global Time Callback */
        HAL_FDCAN_TT_GlobalTimeCallback(hfdcan, TTGlobTimeITs);
 80078b0:	69f9      	ldr	r1, [r7, #28]
 80078b2:	6878      	ldr	r0, [r7, #4]
 80078b4:	f000 f8d0 	bl	8007a58 <HAL_FDCAN_TT_GlobalTimeCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
      }

      /* TT Disturbing Error interrupts management ******************************/
      if (TTDistErrors != 0U)
 80078b8:	69bb      	ldr	r3, [r7, #24]
 80078ba:	2b00      	cmp	r3, #0
 80078bc:	d00b      	beq.n	80078d6 <HAL_FDCAN_IRQHandler+0x47a>
      {
        /* Clear the TT Disturbing Error flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTDistErrors);
 80078be:	687b      	ldr	r3, [r7, #4]
 80078c0:	685b      	ldr	r3, [r3, #4]
 80078c2:	69ba      	ldr	r2, [r7, #24]
 80078c4:	621a      	str	r2, [r3, #32]

        /* Update error code */
        hfdcan->ErrorCode |= TTDistErrors;
 80078c6:	687b      	ldr	r3, [r7, #4]
 80078c8:	f8d3 209c 	ldr.w	r2, [r3, #156]	; 0x9c
 80078cc:	69bb      	ldr	r3, [r7, #24]
 80078ce:	431a      	orrs	r2, r3
 80078d0:	687b      	ldr	r3, [r7, #4]
 80078d2:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
      }

      /* TT Fatal Error interrupts management ***********************************/
      if (TTFatalErrors != 0U)
 80078d6:	697b      	ldr	r3, [r7, #20]
 80078d8:	2b00      	cmp	r3, #0
 80078da:	d00b      	beq.n	80078f4 <HAL_FDCAN_IRQHandler+0x498>
      {
        /* Clear the TT Fatal Error flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTFatalErrors);
 80078dc:	687b      	ldr	r3, [r7, #4]
 80078de:	685b      	ldr	r3, [r3, #4]
 80078e0:	697a      	ldr	r2, [r7, #20]
 80078e2:	621a      	str	r2, [r3, #32]

        /* Update error code */
        hfdcan->ErrorCode |= TTFatalErrors;
 80078e4:	687b      	ldr	r3, [r7, #4]
 80078e6:	f8d3 209c 	ldr.w	r2, [r3, #156]	; 0x9c
 80078ea:	697b      	ldr	r3, [r7, #20]
 80078ec:	431a      	orrs	r2, r3
 80078ee:	687b      	ldr	r3, [r7, #4]
 80078f0:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
      }
    }
  }

  if (hfdcan->ErrorCode != HAL_FDCAN_ERROR_NONE)
 80078f4:	687b      	ldr	r3, [r7, #4]
 80078f6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80078fa:	2b00      	cmp	r3, #0
 80078fc:	d002      	beq.n	8007904 <HAL_FDCAN_IRQHandler+0x4a8>
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorCallback(hfdcan);
#else
    /* Error Callback */
    HAL_FDCAN_ErrorCallback(hfdcan);
 80078fe:	6878      	ldr	r0, [r7, #4]
 8007900:	f000 f873 	bl	80079ea <HAL_FDCAN_ErrorCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }
}
 8007904:	bf00      	nop
 8007906:	3748      	adds	r7, #72	; 0x48
 8007908:	46bd      	mov	sp, r7
 800790a:	bd80      	pop	{r7, pc}
 800790c:	4000a800 	.word	0x4000a800
 8007910:	3fcfffff 	.word	0x3fcfffff
 8007914:	4000a000 	.word	0x4000a000

08007918 <HAL_FDCAN_ClockCalibrationCallback>:
  * @param  ClkCalibrationITs indicates which Clock Calibration interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Clock_Calibration_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_ClockCalibrationCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t ClkCalibrationITs)
{
 8007918:	b480      	push	{r7}
 800791a:	b083      	sub	sp, #12
 800791c:	af00      	add	r7, sp, #0
 800791e:	6078      	str	r0, [r7, #4]
 8007920:	6039      	str	r1, [r7, #0]
  UNUSED(ClkCalibrationITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ClockCalibrationCallback could be implemented in the user file
   */
}
 8007922:	bf00      	nop
 8007924:	370c      	adds	r7, #12
 8007926:	46bd      	mov	sp, r7
 8007928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800792c:	4770      	bx	lr

0800792e <HAL_FDCAN_TxEventFifoCallback>:
  * @param  TxEventFifoITs indicates which Tx Event FIFO interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Tx_Event_Fifo_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TxEventFifoCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TxEventFifoITs)
{
 800792e:	b480      	push	{r7}
 8007930:	b083      	sub	sp, #12
 8007932:	af00      	add	r7, sp, #0
 8007934:	6078      	str	r0, [r7, #4]
 8007936:	6039      	str	r1, [r7, #0]
  UNUSED(TxEventFifoITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxEventFifoCallback could be implemented in the user file
   */
}
 8007938:	bf00      	nop
 800793a:	370c      	adds	r7, #12
 800793c:	46bd      	mov	sp, r7
 800793e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007942:	4770      	bx	lr

08007944 <HAL_FDCAN_RxFifo1Callback>:
  * @param  RxFifo1ITs indicates which Rx FIFO 1 interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Rx_Fifo1_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_RxFifo1Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo1ITs)
{
 8007944:	b480      	push	{r7}
 8007946:	b083      	sub	sp, #12
 8007948:	af00      	add	r7, sp, #0
 800794a:	6078      	str	r0, [r7, #4]
 800794c:	6039      	str	r1, [r7, #0]
  UNUSED(RxFifo1ITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_RxFifo1Callback could be implemented in the user file
   */
}
 800794e:	bf00      	nop
 8007950:	370c      	adds	r7, #12
 8007952:	46bd      	mov	sp, r7
 8007954:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007958:	4770      	bx	lr

0800795a <HAL_FDCAN_TxFifoEmptyCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TxFifoEmptyCallback(FDCAN_HandleTypeDef *hfdcan)
{
 800795a:	b480      	push	{r7}
 800795c:	b083      	sub	sp, #12
 800795e:	af00      	add	r7, sp, #0
 8007960:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxFifoEmptyCallback could be implemented in the user file
   */
}
 8007962:	bf00      	nop
 8007964:	370c      	adds	r7, #12
 8007966:	46bd      	mov	sp, r7
 8007968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800796c:	4770      	bx	lr

0800796e <HAL_FDCAN_TxBufferCompleteCallback>:
  * @param  BufferIndexes Indexes of the transmitted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferCompleteCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 800796e:	b480      	push	{r7}
 8007970:	b083      	sub	sp, #12
 8007972:	af00      	add	r7, sp, #0
 8007974:	6078      	str	r0, [r7, #4]
 8007976:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferCompleteCallback could be implemented in the user file
   */
}
 8007978:	bf00      	nop
 800797a:	370c      	adds	r7, #12
 800797c:	46bd      	mov	sp, r7
 800797e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007982:	4770      	bx	lr

08007984 <HAL_FDCAN_TxBufferAbortCallback>:
  * @param  BufferIndexes Indexes of the aborted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferAbortCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 8007984:	b480      	push	{r7}
 8007986:	b083      	sub	sp, #12
 8007988:	af00      	add	r7, sp, #0
 800798a:	6078      	str	r0, [r7, #4]
 800798c:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferAbortCallback could be implemented in the user file
   */
}
 800798e:	bf00      	nop
 8007990:	370c      	adds	r7, #12
 8007992:	46bd      	mov	sp, r7
 8007994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007998:	4770      	bx	lr

0800799a <HAL_FDCAN_RxBufferNewMessageCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_RxBufferNewMessageCallback(FDCAN_HandleTypeDef *hfdcan)
{
 800799a:	b480      	push	{r7}
 800799c:	b083      	sub	sp, #12
 800799e:	af00      	add	r7, sp, #0
 80079a0:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_RxBufferNewMessageCallback could be implemented in the user file
   */
}
 80079a2:	bf00      	nop
 80079a4:	370c      	adds	r7, #12
 80079a6:	46bd      	mov	sp, r7
 80079a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079ac:	4770      	bx	lr

080079ae <HAL_FDCAN_TimestampWraparoundCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimestampWraparoundCallback(FDCAN_HandleTypeDef *hfdcan)
{
 80079ae:	b480      	push	{r7}
 80079b0:	b083      	sub	sp, #12
 80079b2:	af00      	add	r7, sp, #0
 80079b4:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimestampWraparoundCallback could be implemented in the user file
   */
}
 80079b6:	bf00      	nop
 80079b8:	370c      	adds	r7, #12
 80079ba:	46bd      	mov	sp, r7
 80079bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079c0:	4770      	bx	lr

080079c2 <HAL_FDCAN_TimeoutOccurredCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimeoutOccurredCallback(FDCAN_HandleTypeDef *hfdcan)
{
 80079c2:	b480      	push	{r7}
 80079c4:	b083      	sub	sp, #12
 80079c6:	af00      	add	r7, sp, #0
 80079c8:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimeoutOccurredCallback could be implemented in the user file
   */
}
 80079ca:	bf00      	nop
 80079cc:	370c      	adds	r7, #12
 80079ce:	46bd      	mov	sp, r7
 80079d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079d4:	4770      	bx	lr

080079d6 <HAL_FDCAN_HighPriorityMessageCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_HighPriorityMessageCallback(FDCAN_HandleTypeDef *hfdcan)
{
 80079d6:	b480      	push	{r7}
 80079d8:	b083      	sub	sp, #12
 80079da:	af00      	add	r7, sp, #0
 80079dc:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_HighPriorityMessageCallback could be implemented in the user file
   */
}
 80079de:	bf00      	nop
 80079e0:	370c      	adds	r7, #12
 80079e2:	46bd      	mov	sp, r7
 80079e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079e8:	4770      	bx	lr

080079ea <HAL_FDCAN_ErrorCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorCallback(FDCAN_HandleTypeDef *hfdcan)
{
 80079ea:	b480      	push	{r7}
 80079ec:	b083      	sub	sp, #12
 80079ee:	af00      	add	r7, sp, #0
 80079f0:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorCallback could be implemented in the user file
   */
}
 80079f2:	bf00      	nop
 80079f4:	370c      	adds	r7, #12
 80079f6:	46bd      	mov	sp, r7
 80079f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079fc:	4770      	bx	lr

080079fe <HAL_FDCAN_ErrorStatusCallback>:
  * @param  ErrorStatusITs indicates which Error Status interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Error_Status_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorStatusCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t ErrorStatusITs)
{
 80079fe:	b480      	push	{r7}
 8007a00:	b083      	sub	sp, #12
 8007a02:	af00      	add	r7, sp, #0
 8007a04:	6078      	str	r0, [r7, #4]
 8007a06:	6039      	str	r1, [r7, #0]
  UNUSED(ErrorStatusITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorStatusCallback could be implemented in the user file
   */
}
 8007a08:	bf00      	nop
 8007a0a:	370c      	adds	r7, #12
 8007a0c:	46bd      	mov	sp, r7
 8007a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a12:	4770      	bx	lr

08007a14 <HAL_FDCAN_TT_ScheduleSyncCallback>:
  * @param  TTSchedSyncITs indicates which TT Schedule Synchronization interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_TTScheduleSynchronization_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TT_ScheduleSyncCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TTSchedSyncITs)
{
 8007a14:	b480      	push	{r7}
 8007a16:	b083      	sub	sp, #12
 8007a18:	af00      	add	r7, sp, #0
 8007a1a:	6078      	str	r0, [r7, #4]
 8007a1c:	6039      	str	r1, [r7, #0]
  UNUSED(TTSchedSyncITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TT_ScheduleSyncCallback could be implemented in the user file
   */
}
 8007a1e:	bf00      	nop
 8007a20:	370c      	adds	r7, #12
 8007a22:	46bd      	mov	sp, r7
 8007a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a28:	4770      	bx	lr

08007a2a <HAL_FDCAN_TT_TimeMarkCallback>:
  * @param  TTTimeMarkITs indicates which TT Schedule Synchronization interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_TTTimeMark_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TT_TimeMarkCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TTTimeMarkITs)
{
 8007a2a:	b480      	push	{r7}
 8007a2c:	b083      	sub	sp, #12
 8007a2e:	af00      	add	r7, sp, #0
 8007a30:	6078      	str	r0, [r7, #4]
 8007a32:	6039      	str	r1, [r7, #0]
  UNUSED(TTTimeMarkITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TT_TimeMarkCallback could be implemented in the user file
   */
}
 8007a34:	bf00      	nop
 8007a36:	370c      	adds	r7, #12
 8007a38:	46bd      	mov	sp, r7
 8007a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a3e:	4770      	bx	lr

08007a40 <HAL_FDCAN_TT_StopWatchCallback>:
  * @param  SWCycleCount Cycle count value captured together with SWTime.
  *         This parameter is a number between 0 and 0x3F.
  * @retval None
  */
__weak void HAL_FDCAN_TT_StopWatchCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t SWTime, uint32_t SWCycleCount)
{
 8007a40:	b480      	push	{r7}
 8007a42:	b085      	sub	sp, #20
 8007a44:	af00      	add	r7, sp, #0
 8007a46:	60f8      	str	r0, [r7, #12]
 8007a48:	60b9      	str	r1, [r7, #8]
 8007a4a:	607a      	str	r2, [r7, #4]
  UNUSED(SWCycleCount);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TT_StopWatchCallback could be implemented in the user file
   */
}
 8007a4c:	bf00      	nop
 8007a4e:	3714      	adds	r7, #20
 8007a50:	46bd      	mov	sp, r7
 8007a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a56:	4770      	bx	lr

08007a58 <HAL_FDCAN_TT_GlobalTimeCallback>:
  * @param  TTGlobTimeITs indicates which TT Global Time interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_TTGlobalTime_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TT_GlobalTimeCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TTGlobTimeITs)
{
 8007a58:	b480      	push	{r7}
 8007a5a:	b083      	sub	sp, #12
 8007a5c:	af00      	add	r7, sp, #0
 8007a5e:	6078      	str	r0, [r7, #4]
 8007a60:	6039      	str	r1, [r7, #0]
  UNUSED(TTGlobTimeITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TT_GlobalTimeCallback could be implemented in the user file
   */
}
 8007a62:	bf00      	nop
 8007a64:	370c      	adds	r7, #12
 8007a66:	46bd      	mov	sp, r7
 8007a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a6c:	4770      	bx	lr
	...

08007a70 <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
 */
static HAL_StatusTypeDef FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 8007a70:	b480      	push	{r7}
 8007a72:	b085      	sub	sp, #20
 8007a74:	af00      	add	r7, sp, #0
 8007a76:	6078      	str	r0, [r7, #4]
  uint32_t RAMcounter;
  uint32_t StartAddress;

  StartAddress = hfdcan->Init.MessageRAMOffset;
 8007a78:	687b      	ldr	r3, [r7, #4]
 8007a7a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007a7c:	60bb      	str	r3, [r7, #8]

  /* Standard filter list start address */
  MODIFY_REG(hfdcan->Instance->SIDFC, FDCAN_SIDFC_FLSSA, (StartAddress << FDCAN_SIDFC_FLSSA_Pos));
 8007a7e:	687b      	ldr	r3, [r7, #4]
 8007a80:	681b      	ldr	r3, [r3, #0]
 8007a82:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 8007a86:	4ba7      	ldr	r3, [pc, #668]	; (8007d24 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8007a88:	4013      	ands	r3, r2
 8007a8a:	68ba      	ldr	r2, [r7, #8]
 8007a8c:	0091      	lsls	r1, r2, #2
 8007a8e:	687a      	ldr	r2, [r7, #4]
 8007a90:	6812      	ldr	r2, [r2, #0]
 8007a92:	430b      	orrs	r3, r1
 8007a94:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->SIDFC, FDCAN_SIDFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_SIDFC_LSS_Pos));
 8007a98:	687b      	ldr	r3, [r7, #4]
 8007a9a:	681b      	ldr	r3, [r3, #0]
 8007a9c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007aa0:	f423 017f 	bic.w	r1, r3, #16711680	; 0xff0000
 8007aa4:	687b      	ldr	r3, [r7, #4]
 8007aa6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007aa8:	041a      	lsls	r2, r3, #16
 8007aaa:	687b      	ldr	r3, [r7, #4]
 8007aac:	681b      	ldr	r3, [r3, #0]
 8007aae:	430a      	orrs	r2, r1
 8007ab0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Extended filter list start address */
  StartAddress += hfdcan->Init.StdFiltersNbr;
 8007ab4:	687b      	ldr	r3, [r7, #4]
 8007ab6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007ab8:	68ba      	ldr	r2, [r7, #8]
 8007aba:	4413      	add	r3, r2
 8007abc:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->XIDFC, FDCAN_XIDFC_FLESA, (StartAddress << FDCAN_XIDFC_FLESA_Pos));
 8007abe:	687b      	ldr	r3, [r7, #4]
 8007ac0:	681b      	ldr	r3, [r3, #0]
 8007ac2:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8007ac6:	4b97      	ldr	r3, [pc, #604]	; (8007d24 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8007ac8:	4013      	ands	r3, r2
 8007aca:	68ba      	ldr	r2, [r7, #8]
 8007acc:	0091      	lsls	r1, r2, #2
 8007ace:	687a      	ldr	r2, [r7, #4]
 8007ad0:	6812      	ldr	r2, [r2, #0]
 8007ad2:	430b      	orrs	r3, r1
 8007ad4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->XIDFC, FDCAN_XIDFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_XIDFC_LSE_Pos));
 8007ad8:	687b      	ldr	r3, [r7, #4]
 8007ada:	681b      	ldr	r3, [r3, #0]
 8007adc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007ae0:	f423 01fe 	bic.w	r1, r3, #8323072	; 0x7f0000
 8007ae4:	687b      	ldr	r3, [r7, #4]
 8007ae6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007ae8:	041a      	lsls	r2, r3, #16
 8007aea:	687b      	ldr	r3, [r7, #4]
 8007aec:	681b      	ldr	r3, [r3, #0]
 8007aee:	430a      	orrs	r2, r1
 8007af0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Rx FIFO 0 start address */
  StartAddress += (hfdcan->Init.ExtFiltersNbr * 2U);
 8007af4:	687b      	ldr	r3, [r7, #4]
 8007af6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007af8:	005b      	lsls	r3, r3, #1
 8007afa:	68ba      	ldr	r2, [r7, #8]
 8007afc:	4413      	add	r3, r2
 8007afe:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXF0C, FDCAN_RXF0C_F0SA, (StartAddress << FDCAN_RXF0C_F0SA_Pos));
 8007b00:	687b      	ldr	r3, [r7, #4]
 8007b02:	681b      	ldr	r3, [r3, #0]
 8007b04:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 8007b08:	4b86      	ldr	r3, [pc, #536]	; (8007d24 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8007b0a:	4013      	ands	r3, r2
 8007b0c:	68ba      	ldr	r2, [r7, #8]
 8007b0e:	0091      	lsls	r1, r2, #2
 8007b10:	687a      	ldr	r2, [r7, #4]
 8007b12:	6812      	ldr	r2, [r2, #0]
 8007b14:	430b      	orrs	r3, r1
 8007b16:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0

  /* Rx FIFO 0 elements number */
  MODIFY_REG(hfdcan->Instance->RXF0C, FDCAN_RXF0C_F0S, (hfdcan->Init.RxFifo0ElmtsNbr << FDCAN_RXF0C_F0S_Pos));
 8007b1a:	687b      	ldr	r3, [r7, #4]
 8007b1c:	681b      	ldr	r3, [r3, #0]
 8007b1e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8007b22:	f423 01fe 	bic.w	r1, r3, #8323072	; 0x7f0000
 8007b26:	687b      	ldr	r3, [r7, #4]
 8007b28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007b2a:	041a      	lsls	r2, r3, #16
 8007b2c:	687b      	ldr	r3, [r7, #4]
 8007b2e:	681b      	ldr	r3, [r3, #0]
 8007b30:	430a      	orrs	r2, r1
 8007b32:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0

  /* Rx FIFO 1 start address */
  StartAddress += (hfdcan->Init.RxFifo0ElmtsNbr * hfdcan->Init.RxFifo0ElmtSize);
 8007b36:	687b      	ldr	r3, [r7, #4]
 8007b38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007b3a:	687a      	ldr	r2, [r7, #4]
 8007b3c:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8007b3e:	fb02 f303 	mul.w	r3, r2, r3
 8007b42:	68ba      	ldr	r2, [r7, #8]
 8007b44:	4413      	add	r3, r2
 8007b46:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXF1C, FDCAN_RXF1C_F1SA, (StartAddress << FDCAN_RXF1C_F1SA_Pos));
 8007b48:	687b      	ldr	r3, [r7, #4]
 8007b4a:	681b      	ldr	r3, [r3, #0]
 8007b4c:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8007b50:	4b74      	ldr	r3, [pc, #464]	; (8007d24 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8007b52:	4013      	ands	r3, r2
 8007b54:	68ba      	ldr	r2, [r7, #8]
 8007b56:	0091      	lsls	r1, r2, #2
 8007b58:	687a      	ldr	r2, [r7, #4]
 8007b5a:	6812      	ldr	r2, [r2, #0]
 8007b5c:	430b      	orrs	r3, r1
 8007b5e:	f8c2 30b0 	str.w	r3, [r2, #176]	; 0xb0

  /* Rx FIFO 1 elements number */
  MODIFY_REG(hfdcan->Instance->RXF1C, FDCAN_RXF1C_F1S, (hfdcan->Init.RxFifo1ElmtsNbr << FDCAN_RXF1C_F1S_Pos));
 8007b62:	687b      	ldr	r3, [r7, #4]
 8007b64:	681b      	ldr	r3, [r3, #0]
 8007b66:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8007b6a:	f423 01fe 	bic.w	r1, r3, #8323072	; 0x7f0000
 8007b6e:	687b      	ldr	r3, [r7, #4]
 8007b70:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007b72:	041a      	lsls	r2, r3, #16
 8007b74:	687b      	ldr	r3, [r7, #4]
 8007b76:	681b      	ldr	r3, [r3, #0]
 8007b78:	430a      	orrs	r2, r1
 8007b7a:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0

  /* Rx buffer list start address */
  StartAddress += (hfdcan->Init.RxFifo1ElmtsNbr * hfdcan->Init.RxFifo1ElmtSize);
 8007b7e:	687b      	ldr	r3, [r7, #4]
 8007b80:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007b82:	687a      	ldr	r2, [r7, #4]
 8007b84:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8007b86:	fb02 f303 	mul.w	r3, r2, r3
 8007b8a:	68ba      	ldr	r2, [r7, #8]
 8007b8c:	4413      	add	r3, r2
 8007b8e:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXBC, FDCAN_RXBC_RBSA, (StartAddress << FDCAN_RXBC_RBSA_Pos));
 8007b90:	687b      	ldr	r3, [r7, #4]
 8007b92:	681b      	ldr	r3, [r3, #0]
 8007b94:	f8d3 20ac 	ldr.w	r2, [r3, #172]	; 0xac
 8007b98:	4b62      	ldr	r3, [pc, #392]	; (8007d24 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8007b9a:	4013      	ands	r3, r2
 8007b9c:	68ba      	ldr	r2, [r7, #8]
 8007b9e:	0091      	lsls	r1, r2, #2
 8007ba0:	687a      	ldr	r2, [r7, #4]
 8007ba2:	6812      	ldr	r2, [r2, #0]
 8007ba4:	430b      	orrs	r3, r1
 8007ba6:	f8c2 30ac 	str.w	r3, [r2, #172]	; 0xac

  /* Tx event FIFO start address */
  StartAddress += (hfdcan->Init.RxBuffersNbr * hfdcan->Init.RxBufferSize);
 8007baa:	687b      	ldr	r3, [r7, #4]
 8007bac:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007bae:	687a      	ldr	r2, [r7, #4]
 8007bb0:	6d52      	ldr	r2, [r2, #84]	; 0x54
 8007bb2:	fb02 f303 	mul.w	r3, r2, r3
 8007bb6:	68ba      	ldr	r2, [r7, #8]
 8007bb8:	4413      	add	r3, r2
 8007bba:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->TXEFC, FDCAN_TXEFC_EFSA, (StartAddress << FDCAN_TXEFC_EFSA_Pos));
 8007bbc:	687b      	ldr	r3, [r7, #4]
 8007bbe:	681b      	ldr	r3, [r3, #0]
 8007bc0:	f8d3 20f0 	ldr.w	r2, [r3, #240]	; 0xf0
 8007bc4:	4b57      	ldr	r3, [pc, #348]	; (8007d24 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8007bc6:	4013      	ands	r3, r2
 8007bc8:	68ba      	ldr	r2, [r7, #8]
 8007bca:	0091      	lsls	r1, r2, #2
 8007bcc:	687a      	ldr	r2, [r7, #4]
 8007bce:	6812      	ldr	r2, [r2, #0]
 8007bd0:	430b      	orrs	r3, r1
 8007bd2:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

  /* Tx event FIFO elements number */
  MODIFY_REG(hfdcan->Instance->TXEFC, FDCAN_TXEFC_EFS, (hfdcan->Init.TxEventsNbr << FDCAN_TXEFC_EFS_Pos));
 8007bd6:	687b      	ldr	r3, [r7, #4]
 8007bd8:	681b      	ldr	r3, [r3, #0]
 8007bda:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8007bde:	f423 117c 	bic.w	r1, r3, #4128768	; 0x3f0000
 8007be2:	687b      	ldr	r3, [r7, #4]
 8007be4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007be6:	041a      	lsls	r2, r3, #16
 8007be8:	687b      	ldr	r3, [r7, #4]
 8007bea:	681b      	ldr	r3, [r3, #0]
 8007bec:	430a      	orrs	r2, r1
 8007bee:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0

  /* Tx buffer list start address */
  StartAddress += (hfdcan->Init.TxEventsNbr * 2U);
 8007bf2:	687b      	ldr	r3, [r7, #4]
 8007bf4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007bf6:	005b      	lsls	r3, r3, #1
 8007bf8:	68ba      	ldr	r2, [r7, #8]
 8007bfa:	4413      	add	r3, r2
 8007bfc:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_TBSA, (StartAddress << FDCAN_TXBC_TBSA_Pos));
 8007bfe:	687b      	ldr	r3, [r7, #4]
 8007c00:	681b      	ldr	r3, [r3, #0]
 8007c02:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 8007c06:	4b47      	ldr	r3, [pc, #284]	; (8007d24 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8007c08:	4013      	ands	r3, r2
 8007c0a:	68ba      	ldr	r2, [r7, #8]
 8007c0c:	0091      	lsls	r1, r2, #2
 8007c0e:	687a      	ldr	r2, [r7, #4]
 8007c10:	6812      	ldr	r2, [r2, #0]
 8007c12:	430b      	orrs	r3, r1
 8007c14:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0

  /* Dedicated Tx buffers number */
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_NDTB, (hfdcan->Init.TxBuffersNbr << FDCAN_TXBC_NDTB_Pos));
 8007c18:	687b      	ldr	r3, [r7, #4]
 8007c1a:	681b      	ldr	r3, [r3, #0]
 8007c1c:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8007c20:	f423 117c 	bic.w	r1, r3, #4128768	; 0x3f0000
 8007c24:	687b      	ldr	r3, [r7, #4]
 8007c26:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007c28:	041a      	lsls	r2, r3, #16
 8007c2a:	687b      	ldr	r3, [r7, #4]
 8007c2c:	681b      	ldr	r3, [r3, #0]
 8007c2e:	430a      	orrs	r2, r1
 8007c30:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0

  /* Tx FIFO/queue elements number */
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_TFQS, (hfdcan->Init.TxFifoQueueElmtsNbr << FDCAN_TXBC_TFQS_Pos));
 8007c34:	687b      	ldr	r3, [r7, #4]
 8007c36:	681b      	ldr	r3, [r3, #0]
 8007c38:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8007c3c:	f023 517c 	bic.w	r1, r3, #1056964608	; 0x3f000000
 8007c40:	687b      	ldr	r3, [r7, #4]
 8007c42:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007c44:	061a      	lsls	r2, r3, #24
 8007c46:	687b      	ldr	r3, [r7, #4]
 8007c48:	681b      	ldr	r3, [r3, #0]
 8007c4a:	430a      	orrs	r2, r1
 8007c4c:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0

  hfdcan->msgRam.StandardFilterSA = SRAMCAN_BASE + (hfdcan->Init.MessageRAMOffset * 4U);
 8007c50:	687b      	ldr	r3, [r7, #4]
 8007c52:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007c54:	4b34      	ldr	r3, [pc, #208]	; (8007d28 <FDCAN_CalcultateRamBlockAddresses+0x2b8>)
 8007c56:	4413      	add	r3, r2
 8007c58:	009a      	lsls	r2, r3, #2
 8007c5a:	687b      	ldr	r3, [r7, #4]
 8007c5c:	66da      	str	r2, [r3, #108]	; 0x6c
  hfdcan->msgRam.ExtendedFilterSA = hfdcan->msgRam.StandardFilterSA + (hfdcan->Init.StdFiltersNbr * 4U);
 8007c5e:	687b      	ldr	r3, [r7, #4]
 8007c60:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8007c62:	687b      	ldr	r3, [r7, #4]
 8007c64:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007c66:	009b      	lsls	r3, r3, #2
 8007c68:	441a      	add	r2, r3
 8007c6a:	687b      	ldr	r3, [r7, #4]
 8007c6c:	671a      	str	r2, [r3, #112]	; 0x70
  hfdcan->msgRam.RxFIFO0SA = hfdcan->msgRam.ExtendedFilterSA + (hfdcan->Init.ExtFiltersNbr * 2U * 4U);
 8007c6e:	687b      	ldr	r3, [r7, #4]
 8007c70:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8007c72:	687b      	ldr	r3, [r7, #4]
 8007c74:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007c76:	00db      	lsls	r3, r3, #3
 8007c78:	441a      	add	r2, r3
 8007c7a:	687b      	ldr	r3, [r7, #4]
 8007c7c:	675a      	str	r2, [r3, #116]	; 0x74
  hfdcan->msgRam.RxFIFO1SA = hfdcan->msgRam.RxFIFO0SA + (hfdcan->Init.RxFifo0ElmtsNbr * hfdcan->Init.RxFifo0ElmtSize * 4U);
 8007c7e:	687b      	ldr	r3, [r7, #4]
 8007c80:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 8007c82:	687b      	ldr	r3, [r7, #4]
 8007c84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007c86:	6879      	ldr	r1, [r7, #4]
 8007c88:	6c49      	ldr	r1, [r1, #68]	; 0x44
 8007c8a:	fb01 f303 	mul.w	r3, r1, r3
 8007c8e:	009b      	lsls	r3, r3, #2
 8007c90:	441a      	add	r2, r3
 8007c92:	687b      	ldr	r3, [r7, #4]
 8007c94:	679a      	str	r2, [r3, #120]	; 0x78
  hfdcan->msgRam.RxBufferSA = hfdcan->msgRam.RxFIFO1SA + (hfdcan->Init.RxFifo1ElmtsNbr * hfdcan->Init.RxFifo1ElmtSize * 4U);
 8007c96:	687b      	ldr	r3, [r7, #4]
 8007c98:	6f9a      	ldr	r2, [r3, #120]	; 0x78
 8007c9a:	687b      	ldr	r3, [r7, #4]
 8007c9c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007c9e:	6879      	ldr	r1, [r7, #4]
 8007ca0:	6cc9      	ldr	r1, [r1, #76]	; 0x4c
 8007ca2:	fb01 f303 	mul.w	r3, r1, r3
 8007ca6:	009b      	lsls	r3, r3, #2
 8007ca8:	441a      	add	r2, r3
 8007caa:	687b      	ldr	r3, [r7, #4]
 8007cac:	67da      	str	r2, [r3, #124]	; 0x7c
  hfdcan->msgRam.TxEventFIFOSA = hfdcan->msgRam.RxBufferSA + (hfdcan->Init.RxBuffersNbr * hfdcan->Init.RxBufferSize * 4U);
 8007cae:	687b      	ldr	r3, [r7, #4]
 8007cb0:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 8007cb2:	687b      	ldr	r3, [r7, #4]
 8007cb4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007cb6:	6879      	ldr	r1, [r7, #4]
 8007cb8:	6d49      	ldr	r1, [r1, #84]	; 0x54
 8007cba:	fb01 f303 	mul.w	r3, r1, r3
 8007cbe:	009b      	lsls	r3, r3, #2
 8007cc0:	441a      	add	r2, r3
 8007cc2:	687b      	ldr	r3, [r7, #4]
 8007cc4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  hfdcan->msgRam.TxBufferSA = hfdcan->msgRam.TxEventFIFOSA + (hfdcan->Init.TxEventsNbr * 2U * 4U);
 8007cc8:	687b      	ldr	r3, [r7, #4]
 8007cca:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 8007cce:	687b      	ldr	r3, [r7, #4]
 8007cd0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007cd2:	00db      	lsls	r3, r3, #3
 8007cd4:	441a      	add	r2, r3
 8007cd6:	687b      	ldr	r3, [r7, #4]
 8007cd8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hfdcan->msgRam.TxFIFOQSA = hfdcan->msgRam.TxBufferSA + (hfdcan->Init.TxBuffersNbr * hfdcan->Init.TxElmtSize * 4U);
 8007cdc:	687b      	ldr	r3, [r7, #4]
 8007cde:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 8007ce2:	687b      	ldr	r3, [r7, #4]
 8007ce4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007ce6:	6879      	ldr	r1, [r7, #4]
 8007ce8:	6e89      	ldr	r1, [r1, #104]	; 0x68
 8007cea:	fb01 f303 	mul.w	r3, r1, r3
 8007cee:	009b      	lsls	r3, r3, #2
 8007cf0:	441a      	add	r2, r3
 8007cf2:	687b      	ldr	r3, [r7, #4]
 8007cf4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  hfdcan->msgRam.EndAddress = hfdcan->msgRam.TxFIFOQSA + (hfdcan->Init.TxFifoQueueElmtsNbr * hfdcan->Init.TxElmtSize * 4U);
 8007cf8:	687b      	ldr	r3, [r7, #4]
 8007cfa:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8007cfe:	687b      	ldr	r3, [r7, #4]
 8007d00:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007d02:	6879      	ldr	r1, [r7, #4]
 8007d04:	6e89      	ldr	r1, [r1, #104]	; 0x68
 8007d06:	fb01 f303 	mul.w	r3, r1, r3
 8007d0a:	009b      	lsls	r3, r3, #2
 8007d0c:	441a      	add	r2, r3
 8007d0e:	687b      	ldr	r3, [r7, #4]
 8007d10:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  if (hfdcan->msgRam.EndAddress > FDCAN_MESSAGE_RAM_END_ADDRESS) /* Last address of the Message RAM */
 8007d14:	687b      	ldr	r3, [r7, #4]
 8007d16:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007d1a:	4a04      	ldr	r2, [pc, #16]	; (8007d2c <FDCAN_CalcultateRamBlockAddresses+0x2bc>)
 8007d1c:	4293      	cmp	r3, r2
 8007d1e:	d915      	bls.n	8007d4c <FDCAN_CalcultateRamBlockAddresses+0x2dc>
 8007d20:	e006      	b.n	8007d30 <FDCAN_CalcultateRamBlockAddresses+0x2c0>
 8007d22:	bf00      	nop
 8007d24:	ffff0003 	.word	0xffff0003
 8007d28:	10002b00 	.word	0x10002b00
 8007d2c:	4000d3fc 	.word	0x4000d3fc
  {
    /* Update error code.
       Message RAM overflow */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 8007d30:	687b      	ldr	r3, [r7, #4]
 8007d32:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8007d36:	f043 0220 	orr.w	r2, r3, #32
 8007d3a:	687b      	ldr	r3, [r7, #4]
 8007d3c:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    /* Change FDCAN state */
    hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8007d40:	687b      	ldr	r3, [r7, #4]
 8007d42:	2203      	movs	r2, #3
 8007d44:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

    return HAL_ERROR;
 8007d48:	2301      	movs	r3, #1
 8007d4a:	e010      	b.n	8007d6e <FDCAN_CalcultateRamBlockAddresses+0x2fe>
  }
  else
  {
    /* Flush the allocated Message RAM area */
    for (RAMcounter = hfdcan->msgRam.StandardFilterSA; RAMcounter < hfdcan->msgRam.EndAddress; RAMcounter += 4U)
 8007d4c:	687b      	ldr	r3, [r7, #4]
 8007d4e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007d50:	60fb      	str	r3, [r7, #12]
 8007d52:	e005      	b.n	8007d60 <FDCAN_CalcultateRamBlockAddresses+0x2f0>
    {
      *(uint32_t *)(RAMcounter) = 0x00000000;
 8007d54:	68fb      	ldr	r3, [r7, #12]
 8007d56:	2200      	movs	r2, #0
 8007d58:	601a      	str	r2, [r3, #0]
    for (RAMcounter = hfdcan->msgRam.StandardFilterSA; RAMcounter < hfdcan->msgRam.EndAddress; RAMcounter += 4U)
 8007d5a:	68fb      	ldr	r3, [r7, #12]
 8007d5c:	3304      	adds	r3, #4
 8007d5e:	60fb      	str	r3, [r7, #12]
 8007d60:	687b      	ldr	r3, [r7, #4]
 8007d62:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007d66:	68fa      	ldr	r2, [r7, #12]
 8007d68:	429a      	cmp	r2, r3
 8007d6a:	d3f3      	bcc.n	8007d54 <FDCAN_CalcultateRamBlockAddresses+0x2e4>
    }
  }

  /* Return function status */
  return HAL_OK;
 8007d6c:	2300      	movs	r3, #0
}
 8007d6e:	4618      	mov	r0, r3
 8007d70:	3714      	adds	r7, #20
 8007d72:	46bd      	mov	sp, r7
 8007d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d78:	4770      	bx	lr
 8007d7a:	bf00      	nop

08007d7c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8007d7c:	b480      	push	{r7}
 8007d7e:	b089      	sub	sp, #36	; 0x24
 8007d80:	af00      	add	r7, sp, #0
 8007d82:	6078      	str	r0, [r7, #4]
 8007d84:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8007d86:	2300      	movs	r3, #0
 8007d88:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8007d8a:	4b89      	ldr	r3, [pc, #548]	; (8007fb0 <HAL_GPIO_Init+0x234>)
 8007d8c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8007d8e:	e194      	b.n	80080ba <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8007d90:	683b      	ldr	r3, [r7, #0]
 8007d92:	681a      	ldr	r2, [r3, #0]
 8007d94:	2101      	movs	r1, #1
 8007d96:	69fb      	ldr	r3, [r7, #28]
 8007d98:	fa01 f303 	lsl.w	r3, r1, r3
 8007d9c:	4013      	ands	r3, r2
 8007d9e:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8007da0:	693b      	ldr	r3, [r7, #16]
 8007da2:	2b00      	cmp	r3, #0
 8007da4:	f000 8186 	beq.w	80080b4 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8007da8:	683b      	ldr	r3, [r7, #0]
 8007daa:	685b      	ldr	r3, [r3, #4]
 8007dac:	2b01      	cmp	r3, #1
 8007dae:	d00b      	beq.n	8007dc8 <HAL_GPIO_Init+0x4c>
 8007db0:	683b      	ldr	r3, [r7, #0]
 8007db2:	685b      	ldr	r3, [r3, #4]
 8007db4:	2b02      	cmp	r3, #2
 8007db6:	d007      	beq.n	8007dc8 <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8007db8:	683b      	ldr	r3, [r7, #0]
 8007dba:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8007dbc:	2b11      	cmp	r3, #17
 8007dbe:	d003      	beq.n	8007dc8 <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8007dc0:	683b      	ldr	r3, [r7, #0]
 8007dc2:	685b      	ldr	r3, [r3, #4]
 8007dc4:	2b12      	cmp	r3, #18
 8007dc6:	d130      	bne.n	8007e2a <HAL_GPIO_Init+0xae>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8007dc8:	687b      	ldr	r3, [r7, #4]
 8007dca:	689b      	ldr	r3, [r3, #8]
 8007dcc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8007dce:	69fb      	ldr	r3, [r7, #28]
 8007dd0:	005b      	lsls	r3, r3, #1
 8007dd2:	2203      	movs	r2, #3
 8007dd4:	fa02 f303 	lsl.w	r3, r2, r3
 8007dd8:	43db      	mvns	r3, r3
 8007dda:	69ba      	ldr	r2, [r7, #24]
 8007ddc:	4013      	ands	r3, r2
 8007dde:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8007de0:	683b      	ldr	r3, [r7, #0]
 8007de2:	68da      	ldr	r2, [r3, #12]
 8007de4:	69fb      	ldr	r3, [r7, #28]
 8007de6:	005b      	lsls	r3, r3, #1
 8007de8:	fa02 f303 	lsl.w	r3, r2, r3
 8007dec:	69ba      	ldr	r2, [r7, #24]
 8007dee:	4313      	orrs	r3, r2
 8007df0:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8007df2:	687b      	ldr	r3, [r7, #4]
 8007df4:	69ba      	ldr	r2, [r7, #24]
 8007df6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8007df8:	687b      	ldr	r3, [r7, #4]
 8007dfa:	685b      	ldr	r3, [r3, #4]
 8007dfc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8007dfe:	2201      	movs	r2, #1
 8007e00:	69fb      	ldr	r3, [r7, #28]
 8007e02:	fa02 f303 	lsl.w	r3, r2, r3
 8007e06:	43db      	mvns	r3, r3
 8007e08:	69ba      	ldr	r2, [r7, #24]
 8007e0a:	4013      	ands	r3, r2
 8007e0c:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8007e0e:	683b      	ldr	r3, [r7, #0]
 8007e10:	685b      	ldr	r3, [r3, #4]
 8007e12:	091b      	lsrs	r3, r3, #4
 8007e14:	f003 0201 	and.w	r2, r3, #1
 8007e18:	69fb      	ldr	r3, [r7, #28]
 8007e1a:	fa02 f303 	lsl.w	r3, r2, r3
 8007e1e:	69ba      	ldr	r2, [r7, #24]
 8007e20:	4313      	orrs	r3, r2
 8007e22:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8007e24:	687b      	ldr	r3, [r7, #4]
 8007e26:	69ba      	ldr	r2, [r7, #24]
 8007e28:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8007e2a:	687b      	ldr	r3, [r7, #4]
 8007e2c:	68db      	ldr	r3, [r3, #12]
 8007e2e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8007e30:	69fb      	ldr	r3, [r7, #28]
 8007e32:	005b      	lsls	r3, r3, #1
 8007e34:	2203      	movs	r2, #3
 8007e36:	fa02 f303 	lsl.w	r3, r2, r3
 8007e3a:	43db      	mvns	r3, r3
 8007e3c:	69ba      	ldr	r2, [r7, #24]
 8007e3e:	4013      	ands	r3, r2
 8007e40:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8007e42:	683b      	ldr	r3, [r7, #0]
 8007e44:	689a      	ldr	r2, [r3, #8]
 8007e46:	69fb      	ldr	r3, [r7, #28]
 8007e48:	005b      	lsls	r3, r3, #1
 8007e4a:	fa02 f303 	lsl.w	r3, r2, r3
 8007e4e:	69ba      	ldr	r2, [r7, #24]
 8007e50:	4313      	orrs	r3, r2
 8007e52:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8007e54:	687b      	ldr	r3, [r7, #4]
 8007e56:	69ba      	ldr	r2, [r7, #24]
 8007e58:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8007e5a:	683b      	ldr	r3, [r7, #0]
 8007e5c:	685b      	ldr	r3, [r3, #4]
 8007e5e:	2b02      	cmp	r3, #2
 8007e60:	d003      	beq.n	8007e6a <HAL_GPIO_Init+0xee>
 8007e62:	683b      	ldr	r3, [r7, #0]
 8007e64:	685b      	ldr	r3, [r3, #4]
 8007e66:	2b12      	cmp	r3, #18
 8007e68:	d123      	bne.n	8007eb2 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8007e6a:	69fb      	ldr	r3, [r7, #28]
 8007e6c:	08da      	lsrs	r2, r3, #3
 8007e6e:	687b      	ldr	r3, [r7, #4]
 8007e70:	3208      	adds	r2, #8
 8007e72:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007e76:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8007e78:	69fb      	ldr	r3, [r7, #28]
 8007e7a:	f003 0307 	and.w	r3, r3, #7
 8007e7e:	009b      	lsls	r3, r3, #2
 8007e80:	220f      	movs	r2, #15
 8007e82:	fa02 f303 	lsl.w	r3, r2, r3
 8007e86:	43db      	mvns	r3, r3
 8007e88:	69ba      	ldr	r2, [r7, #24]
 8007e8a:	4013      	ands	r3, r2
 8007e8c:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8007e8e:	683b      	ldr	r3, [r7, #0]
 8007e90:	691a      	ldr	r2, [r3, #16]
 8007e92:	69fb      	ldr	r3, [r7, #28]
 8007e94:	f003 0307 	and.w	r3, r3, #7
 8007e98:	009b      	lsls	r3, r3, #2
 8007e9a:	fa02 f303 	lsl.w	r3, r2, r3
 8007e9e:	69ba      	ldr	r2, [r7, #24]
 8007ea0:	4313      	orrs	r3, r2
 8007ea2:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8007ea4:	69fb      	ldr	r3, [r7, #28]
 8007ea6:	08da      	lsrs	r2, r3, #3
 8007ea8:	687b      	ldr	r3, [r7, #4]
 8007eaa:	3208      	adds	r2, #8
 8007eac:	69b9      	ldr	r1, [r7, #24]
 8007eae:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8007eb2:	687b      	ldr	r3, [r7, #4]
 8007eb4:	681b      	ldr	r3, [r3, #0]
 8007eb6:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8007eb8:	69fb      	ldr	r3, [r7, #28]
 8007eba:	005b      	lsls	r3, r3, #1
 8007ebc:	2203      	movs	r2, #3
 8007ebe:	fa02 f303 	lsl.w	r3, r2, r3
 8007ec2:	43db      	mvns	r3, r3
 8007ec4:	69ba      	ldr	r2, [r7, #24]
 8007ec6:	4013      	ands	r3, r2
 8007ec8:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8007eca:	683b      	ldr	r3, [r7, #0]
 8007ecc:	685b      	ldr	r3, [r3, #4]
 8007ece:	f003 0203 	and.w	r2, r3, #3
 8007ed2:	69fb      	ldr	r3, [r7, #28]
 8007ed4:	005b      	lsls	r3, r3, #1
 8007ed6:	fa02 f303 	lsl.w	r3, r2, r3
 8007eda:	69ba      	ldr	r2, [r7, #24]
 8007edc:	4313      	orrs	r3, r2
 8007ede:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8007ee0:	687b      	ldr	r3, [r7, #4]
 8007ee2:	69ba      	ldr	r2, [r7, #24]
 8007ee4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8007ee6:	683b      	ldr	r3, [r7, #0]
 8007ee8:	685b      	ldr	r3, [r3, #4]
 8007eea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007eee:	2b00      	cmp	r3, #0
 8007ef0:	f000 80e0 	beq.w	80080b4 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8007ef4:	4b2f      	ldr	r3, [pc, #188]	; (8007fb4 <HAL_GPIO_Init+0x238>)
 8007ef6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8007efa:	4a2e      	ldr	r2, [pc, #184]	; (8007fb4 <HAL_GPIO_Init+0x238>)
 8007efc:	f043 0302 	orr.w	r3, r3, #2
 8007f00:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8007f04:	4b2b      	ldr	r3, [pc, #172]	; (8007fb4 <HAL_GPIO_Init+0x238>)
 8007f06:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8007f0a:	f003 0302 	and.w	r3, r3, #2
 8007f0e:	60fb      	str	r3, [r7, #12]
 8007f10:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8007f12:	4a29      	ldr	r2, [pc, #164]	; (8007fb8 <HAL_GPIO_Init+0x23c>)
 8007f14:	69fb      	ldr	r3, [r7, #28]
 8007f16:	089b      	lsrs	r3, r3, #2
 8007f18:	3302      	adds	r3, #2
 8007f1a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007f1e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8007f20:	69fb      	ldr	r3, [r7, #28]
 8007f22:	f003 0303 	and.w	r3, r3, #3
 8007f26:	009b      	lsls	r3, r3, #2
 8007f28:	220f      	movs	r2, #15
 8007f2a:	fa02 f303 	lsl.w	r3, r2, r3
 8007f2e:	43db      	mvns	r3, r3
 8007f30:	69ba      	ldr	r2, [r7, #24]
 8007f32:	4013      	ands	r3, r2
 8007f34:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8007f36:	687b      	ldr	r3, [r7, #4]
 8007f38:	4a20      	ldr	r2, [pc, #128]	; (8007fbc <HAL_GPIO_Init+0x240>)
 8007f3a:	4293      	cmp	r3, r2
 8007f3c:	d052      	beq.n	8007fe4 <HAL_GPIO_Init+0x268>
 8007f3e:	687b      	ldr	r3, [r7, #4]
 8007f40:	4a1f      	ldr	r2, [pc, #124]	; (8007fc0 <HAL_GPIO_Init+0x244>)
 8007f42:	4293      	cmp	r3, r2
 8007f44:	d031      	beq.n	8007faa <HAL_GPIO_Init+0x22e>
 8007f46:	687b      	ldr	r3, [r7, #4]
 8007f48:	4a1e      	ldr	r2, [pc, #120]	; (8007fc4 <HAL_GPIO_Init+0x248>)
 8007f4a:	4293      	cmp	r3, r2
 8007f4c:	d02b      	beq.n	8007fa6 <HAL_GPIO_Init+0x22a>
 8007f4e:	687b      	ldr	r3, [r7, #4]
 8007f50:	4a1d      	ldr	r2, [pc, #116]	; (8007fc8 <HAL_GPIO_Init+0x24c>)
 8007f52:	4293      	cmp	r3, r2
 8007f54:	d025      	beq.n	8007fa2 <HAL_GPIO_Init+0x226>
 8007f56:	687b      	ldr	r3, [r7, #4]
 8007f58:	4a1c      	ldr	r2, [pc, #112]	; (8007fcc <HAL_GPIO_Init+0x250>)
 8007f5a:	4293      	cmp	r3, r2
 8007f5c:	d01f      	beq.n	8007f9e <HAL_GPIO_Init+0x222>
 8007f5e:	687b      	ldr	r3, [r7, #4]
 8007f60:	4a1b      	ldr	r2, [pc, #108]	; (8007fd0 <HAL_GPIO_Init+0x254>)
 8007f62:	4293      	cmp	r3, r2
 8007f64:	d019      	beq.n	8007f9a <HAL_GPIO_Init+0x21e>
 8007f66:	687b      	ldr	r3, [r7, #4]
 8007f68:	4a1a      	ldr	r2, [pc, #104]	; (8007fd4 <HAL_GPIO_Init+0x258>)
 8007f6a:	4293      	cmp	r3, r2
 8007f6c:	d013      	beq.n	8007f96 <HAL_GPIO_Init+0x21a>
 8007f6e:	687b      	ldr	r3, [r7, #4]
 8007f70:	4a19      	ldr	r2, [pc, #100]	; (8007fd8 <HAL_GPIO_Init+0x25c>)
 8007f72:	4293      	cmp	r3, r2
 8007f74:	d00d      	beq.n	8007f92 <HAL_GPIO_Init+0x216>
 8007f76:	687b      	ldr	r3, [r7, #4]
 8007f78:	4a18      	ldr	r2, [pc, #96]	; (8007fdc <HAL_GPIO_Init+0x260>)
 8007f7a:	4293      	cmp	r3, r2
 8007f7c:	d007      	beq.n	8007f8e <HAL_GPIO_Init+0x212>
 8007f7e:	687b      	ldr	r3, [r7, #4]
 8007f80:	4a17      	ldr	r2, [pc, #92]	; (8007fe0 <HAL_GPIO_Init+0x264>)
 8007f82:	4293      	cmp	r3, r2
 8007f84:	d101      	bne.n	8007f8a <HAL_GPIO_Init+0x20e>
 8007f86:	2309      	movs	r3, #9
 8007f88:	e02d      	b.n	8007fe6 <HAL_GPIO_Init+0x26a>
 8007f8a:	230a      	movs	r3, #10
 8007f8c:	e02b      	b.n	8007fe6 <HAL_GPIO_Init+0x26a>
 8007f8e:	2308      	movs	r3, #8
 8007f90:	e029      	b.n	8007fe6 <HAL_GPIO_Init+0x26a>
 8007f92:	2307      	movs	r3, #7
 8007f94:	e027      	b.n	8007fe6 <HAL_GPIO_Init+0x26a>
 8007f96:	2306      	movs	r3, #6
 8007f98:	e025      	b.n	8007fe6 <HAL_GPIO_Init+0x26a>
 8007f9a:	2305      	movs	r3, #5
 8007f9c:	e023      	b.n	8007fe6 <HAL_GPIO_Init+0x26a>
 8007f9e:	2304      	movs	r3, #4
 8007fa0:	e021      	b.n	8007fe6 <HAL_GPIO_Init+0x26a>
 8007fa2:	2303      	movs	r3, #3
 8007fa4:	e01f      	b.n	8007fe6 <HAL_GPIO_Init+0x26a>
 8007fa6:	2302      	movs	r3, #2
 8007fa8:	e01d      	b.n	8007fe6 <HAL_GPIO_Init+0x26a>
 8007faa:	2301      	movs	r3, #1
 8007fac:	e01b      	b.n	8007fe6 <HAL_GPIO_Init+0x26a>
 8007fae:	bf00      	nop
 8007fb0:	58000080 	.word	0x58000080
 8007fb4:	58024400 	.word	0x58024400
 8007fb8:	58000400 	.word	0x58000400
 8007fbc:	58020000 	.word	0x58020000
 8007fc0:	58020400 	.word	0x58020400
 8007fc4:	58020800 	.word	0x58020800
 8007fc8:	58020c00 	.word	0x58020c00
 8007fcc:	58021000 	.word	0x58021000
 8007fd0:	58021400 	.word	0x58021400
 8007fd4:	58021800 	.word	0x58021800
 8007fd8:	58021c00 	.word	0x58021c00
 8007fdc:	58022000 	.word	0x58022000
 8007fe0:	58022400 	.word	0x58022400
 8007fe4:	2300      	movs	r3, #0
 8007fe6:	69fa      	ldr	r2, [r7, #28]
 8007fe8:	f002 0203 	and.w	r2, r2, #3
 8007fec:	0092      	lsls	r2, r2, #2
 8007fee:	4093      	lsls	r3, r2
 8007ff0:	69ba      	ldr	r2, [r7, #24]
 8007ff2:	4313      	orrs	r3, r2
 8007ff4:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8007ff6:	4938      	ldr	r1, [pc, #224]	; (80080d8 <HAL_GPIO_Init+0x35c>)
 8007ff8:	69fb      	ldr	r3, [r7, #28]
 8007ffa:	089b      	lsrs	r3, r3, #2
 8007ffc:	3302      	adds	r3, #2
 8007ffe:	69ba      	ldr	r2, [r7, #24]
 8008000:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8008004:	697b      	ldr	r3, [r7, #20]
 8008006:	681b      	ldr	r3, [r3, #0]
 8008008:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800800a:	693b      	ldr	r3, [r7, #16]
 800800c:	43db      	mvns	r3, r3
 800800e:	69ba      	ldr	r2, [r7, #24]
 8008010:	4013      	ands	r3, r2
 8008012:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8008014:	683b      	ldr	r3, [r7, #0]
 8008016:	685b      	ldr	r3, [r3, #4]
 8008018:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800801c:	2b00      	cmp	r3, #0
 800801e:	d003      	beq.n	8008028 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8008020:	69ba      	ldr	r2, [r7, #24]
 8008022:	693b      	ldr	r3, [r7, #16]
 8008024:	4313      	orrs	r3, r2
 8008026:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8008028:	697b      	ldr	r3, [r7, #20]
 800802a:	69ba      	ldr	r2, [r7, #24]
 800802c:	601a      	str	r2, [r3, #0]

        temp = EXTI_CurrentCPU->EMR1;
 800802e:	697b      	ldr	r3, [r7, #20]
 8008030:	685b      	ldr	r3, [r3, #4]
 8008032:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8008034:	693b      	ldr	r3, [r7, #16]
 8008036:	43db      	mvns	r3, r3
 8008038:	69ba      	ldr	r2, [r7, #24]
 800803a:	4013      	ands	r3, r2
 800803c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800803e:	683b      	ldr	r3, [r7, #0]
 8008040:	685b      	ldr	r3, [r3, #4]
 8008042:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008046:	2b00      	cmp	r3, #0
 8008048:	d003      	beq.n	8008052 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800804a:	69ba      	ldr	r2, [r7, #24]
 800804c:	693b      	ldr	r3, [r7, #16]
 800804e:	4313      	orrs	r3, r2
 8008050:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8008052:	697b      	ldr	r3, [r7, #20]
 8008054:	69ba      	ldr	r2, [r7, #24]
 8008056:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8008058:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800805c:	681b      	ldr	r3, [r3, #0]
 800805e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8008060:	693b      	ldr	r3, [r7, #16]
 8008062:	43db      	mvns	r3, r3
 8008064:	69ba      	ldr	r2, [r7, #24]
 8008066:	4013      	ands	r3, r2
 8008068:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800806a:	683b      	ldr	r3, [r7, #0]
 800806c:	685b      	ldr	r3, [r3, #4]
 800806e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8008072:	2b00      	cmp	r3, #0
 8008074:	d003      	beq.n	800807e <HAL_GPIO_Init+0x302>
        {
          temp |= iocurrent;
 8008076:	69ba      	ldr	r2, [r7, #24]
 8008078:	693b      	ldr	r3, [r7, #16]
 800807a:	4313      	orrs	r3, r2
 800807c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 800807e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8008082:	69bb      	ldr	r3, [r7, #24]
 8008084:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8008086:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800808a:	685b      	ldr	r3, [r3, #4]
 800808c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800808e:	693b      	ldr	r3, [r7, #16]
 8008090:	43db      	mvns	r3, r3
 8008092:	69ba      	ldr	r2, [r7, #24]
 8008094:	4013      	ands	r3, r2
 8008096:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8008098:	683b      	ldr	r3, [r7, #0]
 800809a:	685b      	ldr	r3, [r3, #4]
 800809c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80080a0:	2b00      	cmp	r3, #0
 80080a2:	d003      	beq.n	80080ac <HAL_GPIO_Init+0x330>
        {
          temp |= iocurrent;
 80080a4:	69ba      	ldr	r2, [r7, #24]
 80080a6:	693b      	ldr	r3, [r7, #16]
 80080a8:	4313      	orrs	r3, r2
 80080aa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 80080ac:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80080b0:	69bb      	ldr	r3, [r7, #24]
 80080b2:	6053      	str	r3, [r2, #4]
      }
    }

    position++;
 80080b4:	69fb      	ldr	r3, [r7, #28]
 80080b6:	3301      	adds	r3, #1
 80080b8:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80080ba:	683b      	ldr	r3, [r7, #0]
 80080bc:	681a      	ldr	r2, [r3, #0]
 80080be:	69fb      	ldr	r3, [r7, #28]
 80080c0:	fa22 f303 	lsr.w	r3, r2, r3
 80080c4:	2b00      	cmp	r3, #0
 80080c6:	f47f ae63 	bne.w	8007d90 <HAL_GPIO_Init+0x14>
  }
}
 80080ca:	bf00      	nop
 80080cc:	3724      	adds	r7, #36	; 0x24
 80080ce:	46bd      	mov	sp, r7
 80080d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080d4:	4770      	bx	lr
 80080d6:	bf00      	nop
 80080d8:	58000400 	.word	0x58000400

080080dc <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80080dc:	b480      	push	{r7}
 80080de:	b085      	sub	sp, #20
 80080e0:	af00      	add	r7, sp, #0
 80080e2:	6078      	str	r0, [r7, #4]
 80080e4:	460b      	mov	r3, r1
 80080e6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 80080e8:	687b      	ldr	r3, [r7, #4]
 80080ea:	691a      	ldr	r2, [r3, #16]
 80080ec:	887b      	ldrh	r3, [r7, #2]
 80080ee:	4013      	ands	r3, r2
 80080f0:	2b00      	cmp	r3, #0
 80080f2:	d002      	beq.n	80080fa <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80080f4:	2301      	movs	r3, #1
 80080f6:	73fb      	strb	r3, [r7, #15]
 80080f8:	e001      	b.n	80080fe <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80080fa:	2300      	movs	r3, #0
 80080fc:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80080fe:	7bfb      	ldrb	r3, [r7, #15]
}
 8008100:	4618      	mov	r0, r3
 8008102:	3714      	adds	r7, #20
 8008104:	46bd      	mov	sp, r7
 8008106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800810a:	4770      	bx	lr

0800810c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800810c:	b480      	push	{r7}
 800810e:	b083      	sub	sp, #12
 8008110:	af00      	add	r7, sp, #0
 8008112:	6078      	str	r0, [r7, #4]
 8008114:	460b      	mov	r3, r1
 8008116:	807b      	strh	r3, [r7, #2]
 8008118:	4613      	mov	r3, r2
 800811a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800811c:	787b      	ldrb	r3, [r7, #1]
 800811e:	2b00      	cmp	r3, #0
 8008120:	d003      	beq.n	800812a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8008122:	887a      	ldrh	r2, [r7, #2]
 8008124:	687b      	ldr	r3, [r7, #4]
 8008126:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8008128:	e003      	b.n	8008132 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 800812a:	887b      	ldrh	r3, [r7, #2]
 800812c:	041a      	lsls	r2, r3, #16
 800812e:	687b      	ldr	r3, [r7, #4]
 8008130:	619a      	str	r2, [r3, #24]
}
 8008132:	bf00      	nop
 8008134:	370c      	adds	r7, #12
 8008136:	46bd      	mov	sp, r7
 8008138:	f85d 7b04 	ldr.w	r7, [sp], #4
 800813c:	4770      	bx	lr

0800813e <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800813e:	b480      	push	{r7}
 8008140:	b083      	sub	sp, #12
 8008142:	af00      	add	r7, sp, #0
 8008144:	6078      	str	r0, [r7, #4]
 8008146:	460b      	mov	r3, r1
 8008148:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) == GPIO_Pin)
 800814a:	687b      	ldr	r3, [r7, #4]
 800814c:	695a      	ldr	r2, [r3, #20]
 800814e:	887b      	ldrh	r3, [r7, #2]
 8008150:	401a      	ands	r2, r3
 8008152:	887b      	ldrh	r3, [r7, #2]
 8008154:	429a      	cmp	r2, r3
 8008156:	d104      	bne.n	8008162 <HAL_GPIO_TogglePin+0x24>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8008158:	887b      	ldrh	r3, [r7, #2]
 800815a:	041a      	lsls	r2, r3, #16
 800815c:	687b      	ldr	r3, [r7, #4]
 800815e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = GPIO_Pin;
  }
}
 8008160:	e002      	b.n	8008168 <HAL_GPIO_TogglePin+0x2a>
    GPIOx->BSRR = GPIO_Pin;
 8008162:	887a      	ldrh	r2, [r7, #2]
 8008164:	687b      	ldr	r3, [r7, #4]
 8008166:	619a      	str	r2, [r3, #24]
}
 8008168:	bf00      	nop
 800816a:	370c      	adds	r7, #12
 800816c:	46bd      	mov	sp, r7
 800816e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008172:	4770      	bx	lr

08008174 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8008174:	b580      	push	{r7, lr}
 8008176:	b082      	sub	sp, #8
 8008178:	af00      	add	r7, sp, #0
 800817a:	4603      	mov	r3, r0
 800817c:	80fb      	strh	r3, [r7, #6]
    __HAL_GPIO_EXTID2_CLEAR_IT(GPIO_Pin);
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
  }
#else
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00U)
 800817e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008182:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8008186:	88fb      	ldrh	r3, [r7, #6]
 8008188:	4013      	ands	r3, r2
 800818a:	2b00      	cmp	r3, #0
 800818c:	d008      	beq.n	80081a0 <HAL_GPIO_EXTI_IRQHandler+0x2c>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800818e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8008192:	88fb      	ldrh	r3, [r7, #6]
 8008194:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8008198:	88fb      	ldrh	r3, [r7, #6]
 800819a:	4618      	mov	r0, r3
 800819c:	f7fb fd5c 	bl	8003c58 <HAL_GPIO_EXTI_Callback>
  }
#endif
}
 80081a0:	bf00      	nop
 80081a2:	3708      	adds	r7, #8
 80081a4:	46bd      	mov	sp, r7
 80081a6:	bd80      	pop	{r7, pc}

080081a8 <HAL_I2CEx_EnableFastModePlus>:
  * @note  For all I2C5 pins fast mode plus driving capability can be enabled
  *        only by using I2C_FASTMODEPLUS_I2C5 parameter.
  * @retval None
  */
void HAL_I2CEx_EnableFastModePlus(uint32_t ConfigFastModePlus)
{
 80081a8:	b480      	push	{r7}
 80081aa:	b085      	sub	sp, #20
 80081ac:	af00      	add	r7, sp, #0
 80081ae:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_I2C_FASTMODEPLUS(ConfigFastModePlus));

  /* Enable SYSCFG clock */
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80081b0:	4b0d      	ldr	r3, [pc, #52]	; (80081e8 <HAL_I2CEx_EnableFastModePlus+0x40>)
 80081b2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80081b6:	4a0c      	ldr	r2, [pc, #48]	; (80081e8 <HAL_I2CEx_EnableFastModePlus+0x40>)
 80081b8:	f043 0302 	orr.w	r3, r3, #2
 80081bc:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 80081c0:	4b09      	ldr	r3, [pc, #36]	; (80081e8 <HAL_I2CEx_EnableFastModePlus+0x40>)
 80081c2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80081c6:	f003 0302 	and.w	r3, r3, #2
 80081ca:	60fb      	str	r3, [r7, #12]
 80081cc:	68fb      	ldr	r3, [r7, #12]

  /* Enable fast mode plus driving capability for selected pin */
  SET_BIT(SYSCFG->PMCR, (uint32_t)ConfigFastModePlus);
 80081ce:	4b07      	ldr	r3, [pc, #28]	; (80081ec <HAL_I2CEx_EnableFastModePlus+0x44>)
 80081d0:	685a      	ldr	r2, [r3, #4]
 80081d2:	4906      	ldr	r1, [pc, #24]	; (80081ec <HAL_I2CEx_EnableFastModePlus+0x44>)
 80081d4:	687b      	ldr	r3, [r7, #4]
 80081d6:	4313      	orrs	r3, r2
 80081d8:	604b      	str	r3, [r1, #4]
}
 80081da:	bf00      	nop
 80081dc:	3714      	adds	r7, #20
 80081de:	46bd      	mov	sp, r7
 80081e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081e4:	4770      	bx	lr
 80081e6:	bf00      	nop
 80081e8:	58024400 	.word	0x58024400
 80081ec:	58000400 	.word	0x58000400

080081f0 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80081f0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80081f2:	b08f      	sub	sp, #60	; 0x3c
 80081f4:	af0a      	add	r7, sp, #40	; 0x28
 80081f6:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80081f8:	687b      	ldr	r3, [r7, #4]
 80081fa:	2b00      	cmp	r3, #0
 80081fc:	d101      	bne.n	8008202 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80081fe:	2301      	movs	r3, #1
 8008200:	e116      	b.n	8008430 <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8008202:	687b      	ldr	r3, [r7, #4]
 8008204:	681b      	ldr	r3, [r3, #0]
 8008206:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8008208:	687b      	ldr	r3, [r7, #4]
 800820a:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 800820e:	b2db      	uxtb	r3, r3
 8008210:	2b00      	cmp	r3, #0
 8008212:	d106      	bne.n	8008222 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8008214:	687b      	ldr	r3, [r7, #4]
 8008216:	2200      	movs	r2, #0
 8008218:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800821c:	6878      	ldr	r0, [r7, #4]
 800821e:	f010 fe43 	bl	8018ea8 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8008222:	687b      	ldr	r3, [r7, #4]
 8008224:	2203      	movs	r2, #3
 8008226:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 800822a:	68bb      	ldr	r3, [r7, #8]
 800822c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800822e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008232:	2b00      	cmp	r3, #0
 8008234:	d102      	bne.n	800823c <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8008236:	687b      	ldr	r3, [r7, #4]
 8008238:	2200      	movs	r2, #0
 800823a:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800823c:	687b      	ldr	r3, [r7, #4]
 800823e:	681b      	ldr	r3, [r3, #0]
 8008240:	4618      	mov	r0, r3
 8008242:	f009 fe48 	bl	8011ed6 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8008246:	687b      	ldr	r3, [r7, #4]
 8008248:	681b      	ldr	r3, [r3, #0]
 800824a:	603b      	str	r3, [r7, #0]
 800824c:	687e      	ldr	r6, [r7, #4]
 800824e:	466d      	mov	r5, sp
 8008250:	f106 0410 	add.w	r4, r6, #16
 8008254:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8008256:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8008258:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800825a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800825c:	e894 0003 	ldmia.w	r4, {r0, r1}
 8008260:	e885 0003 	stmia.w	r5, {r0, r1}
 8008264:	1d33      	adds	r3, r6, #4
 8008266:	cb0e      	ldmia	r3, {r1, r2, r3}
 8008268:	6838      	ldr	r0, [r7, #0]
 800826a:	f009 fd1f 	bl	8011cac <USB_CoreInit>
 800826e:	4603      	mov	r3, r0
 8008270:	2b00      	cmp	r3, #0
 8008272:	d005      	beq.n	8008280 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8008274:	687b      	ldr	r3, [r7, #4]
 8008276:	2202      	movs	r2, #2
 8008278:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 800827c:	2301      	movs	r3, #1
 800827e:	e0d7      	b.n	8008430 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8008280:	687b      	ldr	r3, [r7, #4]
 8008282:	681b      	ldr	r3, [r3, #0]
 8008284:	2100      	movs	r1, #0
 8008286:	4618      	mov	r0, r3
 8008288:	f009 fe36 	bl	8011ef8 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800828c:	2300      	movs	r3, #0
 800828e:	73fb      	strb	r3, [r7, #15]
 8008290:	e04a      	b.n	8008328 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8008292:	7bfa      	ldrb	r2, [r7, #15]
 8008294:	6879      	ldr	r1, [r7, #4]
 8008296:	4613      	mov	r3, r2
 8008298:	00db      	lsls	r3, r3, #3
 800829a:	1a9b      	subs	r3, r3, r2
 800829c:	009b      	lsls	r3, r3, #2
 800829e:	440b      	add	r3, r1
 80082a0:	333d      	adds	r3, #61	; 0x3d
 80082a2:	2201      	movs	r2, #1
 80082a4:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80082a6:	7bfa      	ldrb	r2, [r7, #15]
 80082a8:	6879      	ldr	r1, [r7, #4]
 80082aa:	4613      	mov	r3, r2
 80082ac:	00db      	lsls	r3, r3, #3
 80082ae:	1a9b      	subs	r3, r3, r2
 80082b0:	009b      	lsls	r3, r3, #2
 80082b2:	440b      	add	r3, r1
 80082b4:	333c      	adds	r3, #60	; 0x3c
 80082b6:	7bfa      	ldrb	r2, [r7, #15]
 80082b8:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80082ba:	7bfa      	ldrb	r2, [r7, #15]
 80082bc:	7bfb      	ldrb	r3, [r7, #15]
 80082be:	b298      	uxth	r0, r3
 80082c0:	6879      	ldr	r1, [r7, #4]
 80082c2:	4613      	mov	r3, r2
 80082c4:	00db      	lsls	r3, r3, #3
 80082c6:	1a9b      	subs	r3, r3, r2
 80082c8:	009b      	lsls	r3, r3, #2
 80082ca:	440b      	add	r3, r1
 80082cc:	3342      	adds	r3, #66	; 0x42
 80082ce:	4602      	mov	r2, r0
 80082d0:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80082d2:	7bfa      	ldrb	r2, [r7, #15]
 80082d4:	6879      	ldr	r1, [r7, #4]
 80082d6:	4613      	mov	r3, r2
 80082d8:	00db      	lsls	r3, r3, #3
 80082da:	1a9b      	subs	r3, r3, r2
 80082dc:	009b      	lsls	r3, r3, #2
 80082de:	440b      	add	r3, r1
 80082e0:	333f      	adds	r3, #63	; 0x3f
 80082e2:	2200      	movs	r2, #0
 80082e4:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80082e6:	7bfa      	ldrb	r2, [r7, #15]
 80082e8:	6879      	ldr	r1, [r7, #4]
 80082ea:	4613      	mov	r3, r2
 80082ec:	00db      	lsls	r3, r3, #3
 80082ee:	1a9b      	subs	r3, r3, r2
 80082f0:	009b      	lsls	r3, r3, #2
 80082f2:	440b      	add	r3, r1
 80082f4:	3344      	adds	r3, #68	; 0x44
 80082f6:	2200      	movs	r2, #0
 80082f8:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80082fa:	7bfa      	ldrb	r2, [r7, #15]
 80082fc:	6879      	ldr	r1, [r7, #4]
 80082fe:	4613      	mov	r3, r2
 8008300:	00db      	lsls	r3, r3, #3
 8008302:	1a9b      	subs	r3, r3, r2
 8008304:	009b      	lsls	r3, r3, #2
 8008306:	440b      	add	r3, r1
 8008308:	3348      	adds	r3, #72	; 0x48
 800830a:	2200      	movs	r2, #0
 800830c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800830e:	7bfa      	ldrb	r2, [r7, #15]
 8008310:	6879      	ldr	r1, [r7, #4]
 8008312:	4613      	mov	r3, r2
 8008314:	00db      	lsls	r3, r3, #3
 8008316:	1a9b      	subs	r3, r3, r2
 8008318:	009b      	lsls	r3, r3, #2
 800831a:	440b      	add	r3, r1
 800831c:	3350      	adds	r3, #80	; 0x50
 800831e:	2200      	movs	r2, #0
 8008320:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8008322:	7bfb      	ldrb	r3, [r7, #15]
 8008324:	3301      	adds	r3, #1
 8008326:	73fb      	strb	r3, [r7, #15]
 8008328:	7bfa      	ldrb	r2, [r7, #15]
 800832a:	687b      	ldr	r3, [r7, #4]
 800832c:	685b      	ldr	r3, [r3, #4]
 800832e:	429a      	cmp	r2, r3
 8008330:	d3af      	bcc.n	8008292 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8008332:	2300      	movs	r3, #0
 8008334:	73fb      	strb	r3, [r7, #15]
 8008336:	e044      	b.n	80083c2 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8008338:	7bfa      	ldrb	r2, [r7, #15]
 800833a:	6879      	ldr	r1, [r7, #4]
 800833c:	4613      	mov	r3, r2
 800833e:	00db      	lsls	r3, r3, #3
 8008340:	1a9b      	subs	r3, r3, r2
 8008342:	009b      	lsls	r3, r3, #2
 8008344:	440b      	add	r3, r1
 8008346:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 800834a:	2200      	movs	r2, #0
 800834c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800834e:	7bfa      	ldrb	r2, [r7, #15]
 8008350:	6879      	ldr	r1, [r7, #4]
 8008352:	4613      	mov	r3, r2
 8008354:	00db      	lsls	r3, r3, #3
 8008356:	1a9b      	subs	r3, r3, r2
 8008358:	009b      	lsls	r3, r3, #2
 800835a:	440b      	add	r3, r1
 800835c:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 8008360:	7bfa      	ldrb	r2, [r7, #15]
 8008362:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8008364:	7bfa      	ldrb	r2, [r7, #15]
 8008366:	6879      	ldr	r1, [r7, #4]
 8008368:	4613      	mov	r3, r2
 800836a:	00db      	lsls	r3, r3, #3
 800836c:	1a9b      	subs	r3, r3, r2
 800836e:	009b      	lsls	r3, r3, #2
 8008370:	440b      	add	r3, r1
 8008372:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8008376:	2200      	movs	r2, #0
 8008378:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800837a:	7bfa      	ldrb	r2, [r7, #15]
 800837c:	6879      	ldr	r1, [r7, #4]
 800837e:	4613      	mov	r3, r2
 8008380:	00db      	lsls	r3, r3, #3
 8008382:	1a9b      	subs	r3, r3, r2
 8008384:	009b      	lsls	r3, r3, #2
 8008386:	440b      	add	r3, r1
 8008388:	f503 7301 	add.w	r3, r3, #516	; 0x204
 800838c:	2200      	movs	r2, #0
 800838e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8008390:	7bfa      	ldrb	r2, [r7, #15]
 8008392:	6879      	ldr	r1, [r7, #4]
 8008394:	4613      	mov	r3, r2
 8008396:	00db      	lsls	r3, r3, #3
 8008398:	1a9b      	subs	r3, r3, r2
 800839a:	009b      	lsls	r3, r3, #2
 800839c:	440b      	add	r3, r1
 800839e:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80083a2:	2200      	movs	r2, #0
 80083a4:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80083a6:	7bfa      	ldrb	r2, [r7, #15]
 80083a8:	6879      	ldr	r1, [r7, #4]
 80083aa:	4613      	mov	r3, r2
 80083ac:	00db      	lsls	r3, r3, #3
 80083ae:	1a9b      	subs	r3, r3, r2
 80083b0:	009b      	lsls	r3, r3, #2
 80083b2:	440b      	add	r3, r1
 80083b4:	f503 7304 	add.w	r3, r3, #528	; 0x210
 80083b8:	2200      	movs	r2, #0
 80083ba:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80083bc:	7bfb      	ldrb	r3, [r7, #15]
 80083be:	3301      	adds	r3, #1
 80083c0:	73fb      	strb	r3, [r7, #15]
 80083c2:	7bfa      	ldrb	r2, [r7, #15]
 80083c4:	687b      	ldr	r3, [r7, #4]
 80083c6:	685b      	ldr	r3, [r3, #4]
 80083c8:	429a      	cmp	r2, r3
 80083ca:	d3b5      	bcc.n	8008338 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80083cc:	687b      	ldr	r3, [r7, #4]
 80083ce:	681b      	ldr	r3, [r3, #0]
 80083d0:	603b      	str	r3, [r7, #0]
 80083d2:	687e      	ldr	r6, [r7, #4]
 80083d4:	466d      	mov	r5, sp
 80083d6:	f106 0410 	add.w	r4, r6, #16
 80083da:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80083dc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80083de:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80083e0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80083e2:	e894 0003 	ldmia.w	r4, {r0, r1}
 80083e6:	e885 0003 	stmia.w	r5, {r0, r1}
 80083ea:	1d33      	adds	r3, r6, #4
 80083ec:	cb0e      	ldmia	r3, {r1, r2, r3}
 80083ee:	6838      	ldr	r0, [r7, #0]
 80083f0:	f009 fdac 	bl	8011f4c <USB_DevInit>
 80083f4:	4603      	mov	r3, r0
 80083f6:	2b00      	cmp	r3, #0
 80083f8:	d005      	beq.n	8008406 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80083fa:	687b      	ldr	r3, [r7, #4]
 80083fc:	2202      	movs	r2, #2
 80083fe:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8008402:	2301      	movs	r3, #1
 8008404:	e014      	b.n	8008430 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8008406:	687b      	ldr	r3, [r7, #4]
 8008408:	2200      	movs	r2, #0
 800840a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 800840e:	687b      	ldr	r3, [r7, #4]
 8008410:	2201      	movs	r2, #1
 8008412:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8008416:	687b      	ldr	r3, [r7, #4]
 8008418:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800841a:	2b01      	cmp	r3, #1
 800841c:	d102      	bne.n	8008424 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 800841e:	6878      	ldr	r0, [r7, #4]
 8008420:	f001 f8be 	bl	80095a0 <HAL_PCDEx_ActivateLPM>
  }
  
  (void)USB_DevDisconnect(hpcd->Instance);
 8008424:	687b      	ldr	r3, [r7, #4]
 8008426:	681b      	ldr	r3, [r3, #0]
 8008428:	4618      	mov	r0, r3
 800842a:	f00a fdeb 	bl	8013004 <USB_DevDisconnect>

  return HAL_OK;
 800842e:	2300      	movs	r3, #0
}
 8008430:	4618      	mov	r0, r3
 8008432:	3714      	adds	r7, #20
 8008434:	46bd      	mov	sp, r7
 8008436:	bdf0      	pop	{r4, r5, r6, r7, pc}

08008438 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8008438:	b580      	push	{r7, lr}
 800843a:	b084      	sub	sp, #16
 800843c:	af00      	add	r7, sp, #0
 800843e:	6078      	str	r0, [r7, #4]
#if defined (USB_OTG_FS) || defined (USB_OTG_HS)
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8008440:	687b      	ldr	r3, [r7, #4]
 8008442:	681b      	ldr	r3, [r3, #0]
 8008444:	60fb      	str	r3, [r7, #12]
#endif /* defined (USB_OTG_FS) || defined (USB_OTG_HS) */

  __HAL_LOCK(hpcd);
 8008446:	687b      	ldr	r3, [r7, #4]
 8008448:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800844c:	2b01      	cmp	r3, #1
 800844e:	d101      	bne.n	8008454 <HAL_PCD_Start+0x1c>
 8008450:	2302      	movs	r3, #2
 8008452:	e020      	b.n	8008496 <HAL_PCD_Start+0x5e>
 8008454:	687b      	ldr	r3, [r7, #4]
 8008456:	2201      	movs	r2, #1
 8008458:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
#if defined (USB_OTG_FS) || defined (USB_OTG_HS)
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 800845c:	687b      	ldr	r3, [r7, #4]
 800845e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008460:	2b01      	cmp	r3, #1
 8008462:	d109      	bne.n	8008478 <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 8008464:	687b      	ldr	r3, [r7, #4]
 8008466:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8008468:	2b01      	cmp	r3, #1
 800846a:	d005      	beq.n	8008478 <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800846c:	68fb      	ldr	r3, [r7, #12]
 800846e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008470:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8008474:	68fb      	ldr	r3, [r7, #12]
 8008476:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined (USB_OTG_FS) || defined (USB_OTG_HS) */
  (void)USB_DevConnect(hpcd->Instance);
 8008478:	687b      	ldr	r3, [r7, #4]
 800847a:	681b      	ldr	r3, [r3, #0]
 800847c:	4618      	mov	r0, r3
 800847e:	f00a fda9 	bl	8012fd4 <USB_DevConnect>
  __HAL_PCD_ENABLE(hpcd);
 8008482:	687b      	ldr	r3, [r7, #4]
 8008484:	681b      	ldr	r3, [r3, #0]
 8008486:	4618      	mov	r0, r3
 8008488:	f009 fd14 	bl	8011eb4 <USB_EnableGlobalInt>
  __HAL_UNLOCK(hpcd);
 800848c:	687b      	ldr	r3, [r7, #4]
 800848e:	2200      	movs	r2, #0
 8008490:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 8008494:	2300      	movs	r3, #0
}
 8008496:	4618      	mov	r0, r3
 8008498:	3710      	adds	r7, #16
 800849a:	46bd      	mov	sp, r7
 800849c:	bd80      	pop	{r7, pc}

0800849e <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 800849e:	b590      	push	{r4, r7, lr}
 80084a0:	b08d      	sub	sp, #52	; 0x34
 80084a2:	af00      	add	r7, sp, #0
 80084a4:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80084a6:	687b      	ldr	r3, [r7, #4]
 80084a8:	681b      	ldr	r3, [r3, #0]
 80084aa:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80084ac:	6a3b      	ldr	r3, [r7, #32]
 80084ae:	61fb      	str	r3, [r7, #28]
  uint32_t i, ep_intr, epint, epnum;
  uint32_t fifoemptymsk, temp;
  USB_OTG_EPTypeDef *ep;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 80084b0:	687b      	ldr	r3, [r7, #4]
 80084b2:	681b      	ldr	r3, [r3, #0]
 80084b4:	4618      	mov	r0, r3
 80084b6:	f00a fe50 	bl	801315a <USB_GetMode>
 80084ba:	4603      	mov	r3, r0
 80084bc:	2b00      	cmp	r3, #0
 80084be:	f040 83ca 	bne.w	8008c56 <HAL_PCD_IRQHandler+0x7b8>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 80084c2:	687b      	ldr	r3, [r7, #4]
 80084c4:	681b      	ldr	r3, [r3, #0]
 80084c6:	4618      	mov	r0, r3
 80084c8:	f00a fdb4 	bl	8013034 <USB_ReadInterrupts>
 80084cc:	4603      	mov	r3, r0
 80084ce:	2b00      	cmp	r3, #0
 80084d0:	f000 83c0 	beq.w	8008c54 <HAL_PCD_IRQHandler+0x7b6>
    {
      return;
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 80084d4:	687b      	ldr	r3, [r7, #4]
 80084d6:	681b      	ldr	r3, [r3, #0]
 80084d8:	4618      	mov	r0, r3
 80084da:	f00a fdab 	bl	8013034 <USB_ReadInterrupts>
 80084de:	4603      	mov	r3, r0
 80084e0:	f003 0302 	and.w	r3, r3, #2
 80084e4:	2b02      	cmp	r3, #2
 80084e6:	d107      	bne.n	80084f8 <HAL_PCD_IRQHandler+0x5a>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 80084e8:	687b      	ldr	r3, [r7, #4]
 80084ea:	681b      	ldr	r3, [r3, #0]
 80084ec:	695a      	ldr	r2, [r3, #20]
 80084ee:	687b      	ldr	r3, [r7, #4]
 80084f0:	681b      	ldr	r3, [r3, #0]
 80084f2:	f002 0202 	and.w	r2, r2, #2
 80084f6:	615a      	str	r2, [r3, #20]
    }

     /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 80084f8:	687b      	ldr	r3, [r7, #4]
 80084fa:	681b      	ldr	r3, [r3, #0]
 80084fc:	4618      	mov	r0, r3
 80084fe:	f00a fd99 	bl	8013034 <USB_ReadInterrupts>
 8008502:	4603      	mov	r3, r0
 8008504:	f003 0310 	and.w	r3, r3, #16
 8008508:	2b10      	cmp	r3, #16
 800850a:	d161      	bne.n	80085d0 <HAL_PCD_IRQHandler+0x132>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800850c:	687b      	ldr	r3, [r7, #4]
 800850e:	681b      	ldr	r3, [r3, #0]
 8008510:	699a      	ldr	r2, [r3, #24]
 8008512:	687b      	ldr	r3, [r7, #4]
 8008514:	681b      	ldr	r3, [r3, #0]
 8008516:	f022 0210 	bic.w	r2, r2, #16
 800851a:	619a      	str	r2, [r3, #24]

      temp = USBx->GRXSTSP;
 800851c:	6a3b      	ldr	r3, [r7, #32]
 800851e:	6a1b      	ldr	r3, [r3, #32]
 8008520:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 8008522:	69bb      	ldr	r3, [r7, #24]
 8008524:	f003 020f 	and.w	r2, r3, #15
 8008528:	4613      	mov	r3, r2
 800852a:	00db      	lsls	r3, r3, #3
 800852c:	1a9b      	subs	r3, r3, r2
 800852e:	009b      	lsls	r3, r3, #2
 8008530:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8008534:	687a      	ldr	r2, [r7, #4]
 8008536:	4413      	add	r3, r2
 8008538:	3304      	adds	r3, #4
 800853a:	617b      	str	r3, [r7, #20]

      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 800853c:	69bb      	ldr	r3, [r7, #24]
 800853e:	0c5b      	lsrs	r3, r3, #17
 8008540:	f003 030f 	and.w	r3, r3, #15
 8008544:	2b02      	cmp	r3, #2
 8008546:	d124      	bne.n	8008592 <HAL_PCD_IRQHandler+0xf4>
      {
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 8008548:	69ba      	ldr	r2, [r7, #24]
 800854a:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 800854e:	4013      	ands	r3, r2
 8008550:	2b00      	cmp	r3, #0
 8008552:	d035      	beq.n	80085c0 <HAL_PCD_IRQHandler+0x122>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8008554:	697b      	ldr	r3, [r7, #20]
 8008556:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));
 8008558:	69bb      	ldr	r3, [r7, #24]
 800855a:	091b      	lsrs	r3, r3, #4
 800855c:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800855e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8008562:	b29b      	uxth	r3, r3
 8008564:	461a      	mov	r2, r3
 8008566:	6a38      	ldr	r0, [r7, #32]
 8008568:	f00a fc11 	bl	8012d8e <USB_ReadPacket>

          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 800856c:	697b      	ldr	r3, [r7, #20]
 800856e:	68da      	ldr	r2, [r3, #12]
 8008570:	69bb      	ldr	r3, [r7, #24]
 8008572:	091b      	lsrs	r3, r3, #4
 8008574:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8008578:	441a      	add	r2, r3
 800857a:	697b      	ldr	r3, [r7, #20]
 800857c:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 800857e:	697b      	ldr	r3, [r7, #20]
 8008580:	699a      	ldr	r2, [r3, #24]
 8008582:	69bb      	ldr	r3, [r7, #24]
 8008584:	091b      	lsrs	r3, r3, #4
 8008586:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800858a:	441a      	add	r2, r3
 800858c:	697b      	ldr	r3, [r7, #20]
 800858e:	619a      	str	r2, [r3, #24]
 8008590:	e016      	b.n	80085c0 <HAL_PCD_IRQHandler+0x122>
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 8008592:	69bb      	ldr	r3, [r7, #24]
 8008594:	0c5b      	lsrs	r3, r3, #17
 8008596:	f003 030f 	and.w	r3, r3, #15
 800859a:	2b06      	cmp	r3, #6
 800859c:	d110      	bne.n	80085c0 <HAL_PCD_IRQHandler+0x122>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 800859e:	687b      	ldr	r3, [r7, #4]
 80085a0:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80085a4:	2208      	movs	r2, #8
 80085a6:	4619      	mov	r1, r3
 80085a8:	6a38      	ldr	r0, [r7, #32]
 80085aa:	f00a fbf0 	bl	8012d8e <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 80085ae:	697b      	ldr	r3, [r7, #20]
 80085b0:	699a      	ldr	r2, [r3, #24]
 80085b2:	69bb      	ldr	r3, [r7, #24]
 80085b4:	091b      	lsrs	r3, r3, #4
 80085b6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80085ba:	441a      	add	r2, r3
 80085bc:	697b      	ldr	r3, [r7, #20]
 80085be:	619a      	str	r2, [r3, #24]
      }
      else
      {
        /* ... */
      }
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80085c0:	687b      	ldr	r3, [r7, #4]
 80085c2:	681b      	ldr	r3, [r3, #0]
 80085c4:	699a      	ldr	r2, [r3, #24]
 80085c6:	687b      	ldr	r3, [r7, #4]
 80085c8:	681b      	ldr	r3, [r3, #0]
 80085ca:	f042 0210 	orr.w	r2, r2, #16
 80085ce:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 80085d0:	687b      	ldr	r3, [r7, #4]
 80085d2:	681b      	ldr	r3, [r3, #0]
 80085d4:	4618      	mov	r0, r3
 80085d6:	f00a fd2d 	bl	8013034 <USB_ReadInterrupts>
 80085da:	4603      	mov	r3, r0
 80085dc:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80085e0:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80085e4:	d16e      	bne.n	80086c4 <HAL_PCD_IRQHandler+0x226>
    {
      epnum = 0U;
 80085e6:	2300      	movs	r3, #0
 80085e8:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 80085ea:	687b      	ldr	r3, [r7, #4]
 80085ec:	681b      	ldr	r3, [r3, #0]
 80085ee:	4618      	mov	r0, r3
 80085f0:	f00a fd33 	bl	801305a <USB_ReadDevAllOutEpInterrupt>
 80085f4:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 80085f6:	e062      	b.n	80086be <HAL_PCD_IRQHandler+0x220>
      {
        if ((ep_intr & 0x1U) != 0U)
 80085f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80085fa:	f003 0301 	and.w	r3, r3, #1
 80085fe:	2b00      	cmp	r3, #0
 8008600:	d057      	beq.n	80086b2 <HAL_PCD_IRQHandler+0x214>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8008602:	687b      	ldr	r3, [r7, #4]
 8008604:	681b      	ldr	r3, [r3, #0]
 8008606:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008608:	b2d2      	uxtb	r2, r2
 800860a:	4611      	mov	r1, r2
 800860c:	4618      	mov	r0, r3
 800860e:	f00a fd58 	bl	80130c2 <USB_ReadDevOutEPInterrupt>
 8008612:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8008614:	693b      	ldr	r3, [r7, #16]
 8008616:	f003 0301 	and.w	r3, r3, #1
 800861a:	2b00      	cmp	r3, #0
 800861c:	d00c      	beq.n	8008638 <HAL_PCD_IRQHandler+0x19a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 800861e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008620:	015a      	lsls	r2, r3, #5
 8008622:	69fb      	ldr	r3, [r7, #28]
 8008624:	4413      	add	r3, r2
 8008626:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800862a:	461a      	mov	r2, r3
 800862c:	2301      	movs	r3, #1
 800862e:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8008630:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8008632:	6878      	ldr	r0, [r7, #4]
 8008634:	f000 fe0a 	bl	800924c <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8008638:	693b      	ldr	r3, [r7, #16]
 800863a:	f003 0308 	and.w	r3, r3, #8
 800863e:	2b00      	cmp	r3, #0
 8008640:	d00c      	beq.n	800865c <HAL_PCD_IRQHandler+0x1be>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8008642:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008644:	015a      	lsls	r2, r3, #5
 8008646:	69fb      	ldr	r3, [r7, #28]
 8008648:	4413      	add	r3, r2
 800864a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800864e:	461a      	mov	r2, r3
 8008650:	2308      	movs	r3, #8
 8008652:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8008654:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8008656:	6878      	ldr	r0, [r7, #4]
 8008658:	f000 ff04 	bl	8009464 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 800865c:	693b      	ldr	r3, [r7, #16]
 800865e:	f003 0310 	and.w	r3, r3, #16
 8008662:	2b00      	cmp	r3, #0
 8008664:	d008      	beq.n	8008678 <HAL_PCD_IRQHandler+0x1da>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8008666:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008668:	015a      	lsls	r2, r3, #5
 800866a:	69fb      	ldr	r3, [r7, #28]
 800866c:	4413      	add	r3, r2
 800866e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008672:	461a      	mov	r2, r3
 8008674:	2310      	movs	r3, #16
 8008676:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8008678:	693b      	ldr	r3, [r7, #16]
 800867a:	f003 0320 	and.w	r3, r3, #32
 800867e:	2b00      	cmp	r3, #0
 8008680:	d008      	beq.n	8008694 <HAL_PCD_IRQHandler+0x1f6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8008682:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008684:	015a      	lsls	r2, r3, #5
 8008686:	69fb      	ldr	r3, [r7, #28]
 8008688:	4413      	add	r3, r2
 800868a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800868e:	461a      	mov	r2, r3
 8008690:	2320      	movs	r3, #32
 8008692:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8008694:	693b      	ldr	r3, [r7, #16]
 8008696:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800869a:	2b00      	cmp	r3, #0
 800869c:	d009      	beq.n	80086b2 <HAL_PCD_IRQHandler+0x214>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 800869e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80086a0:	015a      	lsls	r2, r3, #5
 80086a2:	69fb      	ldr	r3, [r7, #28]
 80086a4:	4413      	add	r3, r2
 80086a6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80086aa:	461a      	mov	r2, r3
 80086ac:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80086b0:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 80086b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80086b4:	3301      	adds	r3, #1
 80086b6:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 80086b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80086ba:	085b      	lsrs	r3, r3, #1
 80086bc:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 80086be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80086c0:	2b00      	cmp	r3, #0
 80086c2:	d199      	bne.n	80085f8 <HAL_PCD_IRQHandler+0x15a>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 80086c4:	687b      	ldr	r3, [r7, #4]
 80086c6:	681b      	ldr	r3, [r3, #0]
 80086c8:	4618      	mov	r0, r3
 80086ca:	f00a fcb3 	bl	8013034 <USB_ReadInterrupts>
 80086ce:	4603      	mov	r3, r0
 80086d0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80086d4:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80086d8:	f040 80c0 	bne.w	800885c <HAL_PCD_IRQHandler+0x3be>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 80086dc:	687b      	ldr	r3, [r7, #4]
 80086de:	681b      	ldr	r3, [r3, #0]
 80086e0:	4618      	mov	r0, r3
 80086e2:	f00a fcd4 	bl	801308e <USB_ReadDevAllInEpInterrupt>
 80086e6:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 80086e8:	2300      	movs	r3, #0
 80086ea:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 80086ec:	e0b2      	b.n	8008854 <HAL_PCD_IRQHandler+0x3b6>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 80086ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80086f0:	f003 0301 	and.w	r3, r3, #1
 80086f4:	2b00      	cmp	r3, #0
 80086f6:	f000 80a7 	beq.w	8008848 <HAL_PCD_IRQHandler+0x3aa>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80086fa:	687b      	ldr	r3, [r7, #4]
 80086fc:	681b      	ldr	r3, [r3, #0]
 80086fe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008700:	b2d2      	uxtb	r2, r2
 8008702:	4611      	mov	r1, r2
 8008704:	4618      	mov	r0, r3
 8008706:	f00a fcfa 	bl	80130fe <USB_ReadDevInEPInterrupt>
 800870a:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 800870c:	693b      	ldr	r3, [r7, #16]
 800870e:	f003 0301 	and.w	r3, r3, #1
 8008712:	2b00      	cmp	r3, #0
 8008714:	d057      	beq.n	80087c6 <HAL_PCD_IRQHandler+0x328>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8008716:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008718:	f003 030f 	and.w	r3, r3, #15
 800871c:	2201      	movs	r2, #1
 800871e:	fa02 f303 	lsl.w	r3, r2, r3
 8008722:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8008724:	69fb      	ldr	r3, [r7, #28]
 8008726:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800872a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800872c:	68fb      	ldr	r3, [r7, #12]
 800872e:	43db      	mvns	r3, r3
 8008730:	69f9      	ldr	r1, [r7, #28]
 8008732:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008736:	4013      	ands	r3, r2
 8008738:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 800873a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800873c:	015a      	lsls	r2, r3, #5
 800873e:	69fb      	ldr	r3, [r7, #28]
 8008740:	4413      	add	r3, r2
 8008742:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008746:	461a      	mov	r2, r3
 8008748:	2301      	movs	r3, #1
 800874a:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 800874c:	687b      	ldr	r3, [r7, #4]
 800874e:	691b      	ldr	r3, [r3, #16]
 8008750:	2b01      	cmp	r3, #1
 8008752:	d132      	bne.n	80087ba <HAL_PCD_IRQHandler+0x31c>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8008754:	6879      	ldr	r1, [r7, #4]
 8008756:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008758:	4613      	mov	r3, r2
 800875a:	00db      	lsls	r3, r3, #3
 800875c:	1a9b      	subs	r3, r3, r2
 800875e:	009b      	lsls	r3, r3, #2
 8008760:	440b      	add	r3, r1
 8008762:	3348      	adds	r3, #72	; 0x48
 8008764:	6819      	ldr	r1, [r3, #0]
 8008766:	6878      	ldr	r0, [r7, #4]
 8008768:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800876a:	4613      	mov	r3, r2
 800876c:	00db      	lsls	r3, r3, #3
 800876e:	1a9b      	subs	r3, r3, r2
 8008770:	009b      	lsls	r3, r3, #2
 8008772:	4403      	add	r3, r0
 8008774:	3344      	adds	r3, #68	; 0x44
 8008776:	681b      	ldr	r3, [r3, #0]
 8008778:	4419      	add	r1, r3
 800877a:	6878      	ldr	r0, [r7, #4]
 800877c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800877e:	4613      	mov	r3, r2
 8008780:	00db      	lsls	r3, r3, #3
 8008782:	1a9b      	subs	r3, r3, r2
 8008784:	009b      	lsls	r3, r3, #2
 8008786:	4403      	add	r3, r0
 8008788:	3348      	adds	r3, #72	; 0x48
 800878a:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 800878c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800878e:	2b00      	cmp	r3, #0
 8008790:	d113      	bne.n	80087ba <HAL_PCD_IRQHandler+0x31c>
 8008792:	6879      	ldr	r1, [r7, #4]
 8008794:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008796:	4613      	mov	r3, r2
 8008798:	00db      	lsls	r3, r3, #3
 800879a:	1a9b      	subs	r3, r3, r2
 800879c:	009b      	lsls	r3, r3, #2
 800879e:	440b      	add	r3, r1
 80087a0:	3350      	adds	r3, #80	; 0x50
 80087a2:	681b      	ldr	r3, [r3, #0]
 80087a4:	2b00      	cmp	r3, #0
 80087a6:	d108      	bne.n	80087ba <HAL_PCD_IRQHandler+0x31c>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80087a8:	687b      	ldr	r3, [r7, #4]
 80087aa:	6818      	ldr	r0, [r3, #0]
 80087ac:	687b      	ldr	r3, [r7, #4]
 80087ae:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80087b2:	461a      	mov	r2, r3
 80087b4:	2101      	movs	r1, #1
 80087b6:	f00a fd03 	bl	80131c0 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 80087ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80087bc:	b2db      	uxtb	r3, r3
 80087be:	4619      	mov	r1, r3
 80087c0:	6878      	ldr	r0, [r7, #4]
 80087c2:	f010 fbf0 	bl	8018fa6 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 80087c6:	693b      	ldr	r3, [r7, #16]
 80087c8:	f003 0308 	and.w	r3, r3, #8
 80087cc:	2b00      	cmp	r3, #0
 80087ce:	d008      	beq.n	80087e2 <HAL_PCD_IRQHandler+0x344>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 80087d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80087d2:	015a      	lsls	r2, r3, #5
 80087d4:	69fb      	ldr	r3, [r7, #28]
 80087d6:	4413      	add	r3, r2
 80087d8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80087dc:	461a      	mov	r2, r3
 80087de:	2308      	movs	r3, #8
 80087e0:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 80087e2:	693b      	ldr	r3, [r7, #16]
 80087e4:	f003 0310 	and.w	r3, r3, #16
 80087e8:	2b00      	cmp	r3, #0
 80087ea:	d008      	beq.n	80087fe <HAL_PCD_IRQHandler+0x360>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 80087ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80087ee:	015a      	lsls	r2, r3, #5
 80087f0:	69fb      	ldr	r3, [r7, #28]
 80087f2:	4413      	add	r3, r2
 80087f4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80087f8:	461a      	mov	r2, r3
 80087fa:	2310      	movs	r3, #16
 80087fc:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 80087fe:	693b      	ldr	r3, [r7, #16]
 8008800:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008804:	2b00      	cmp	r3, #0
 8008806:	d008      	beq.n	800881a <HAL_PCD_IRQHandler+0x37c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8008808:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800880a:	015a      	lsls	r2, r3, #5
 800880c:	69fb      	ldr	r3, [r7, #28]
 800880e:	4413      	add	r3, r2
 8008810:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008814:	461a      	mov	r2, r3
 8008816:	2340      	movs	r3, #64	; 0x40
 8008818:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 800881a:	693b      	ldr	r3, [r7, #16]
 800881c:	f003 0302 	and.w	r3, r3, #2
 8008820:	2b00      	cmp	r3, #0
 8008822:	d008      	beq.n	8008836 <HAL_PCD_IRQHandler+0x398>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8008824:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008826:	015a      	lsls	r2, r3, #5
 8008828:	69fb      	ldr	r3, [r7, #28]
 800882a:	4413      	add	r3, r2
 800882c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008830:	461a      	mov	r2, r3
 8008832:	2302      	movs	r3, #2
 8008834:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8008836:	693b      	ldr	r3, [r7, #16]
 8008838:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800883c:	2b00      	cmp	r3, #0
 800883e:	d003      	beq.n	8008848 <HAL_PCD_IRQHandler+0x3aa>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8008840:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8008842:	6878      	ldr	r0, [r7, #4]
 8008844:	f000 fc75 	bl	8009132 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8008848:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800884a:	3301      	adds	r3, #1
 800884c:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 800884e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008850:	085b      	lsrs	r3, r3, #1
 8008852:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8008854:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008856:	2b00      	cmp	r3, #0
 8008858:	f47f af49 	bne.w	80086ee <HAL_PCD_IRQHandler+0x250>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 800885c:	687b      	ldr	r3, [r7, #4]
 800885e:	681b      	ldr	r3, [r3, #0]
 8008860:	4618      	mov	r0, r3
 8008862:	f00a fbe7 	bl	8013034 <USB_ReadInterrupts>
 8008866:	4603      	mov	r3, r0
 8008868:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800886c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008870:	d122      	bne.n	80088b8 <HAL_PCD_IRQHandler+0x41a>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8008872:	69fb      	ldr	r3, [r7, #28]
 8008874:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008878:	685b      	ldr	r3, [r3, #4]
 800887a:	69fa      	ldr	r2, [r7, #28]
 800887c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008880:	f023 0301 	bic.w	r3, r3, #1
 8008884:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8008886:	687b      	ldr	r3, [r7, #4]
 8008888:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 800888c:	2b01      	cmp	r3, #1
 800888e:	d108      	bne.n	80088a2 <HAL_PCD_IRQHandler+0x404>
      {
        hpcd->LPM_State = LPM_L0;
 8008890:	687b      	ldr	r3, [r7, #4]
 8008892:	2200      	movs	r2, #0
 8008894:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8008898:	2100      	movs	r1, #0
 800889a:	6878      	ldr	r0, [r7, #4]
 800889c:	f000 fea4 	bl	80095e8 <HAL_PCDEx_LPM_Callback>
 80088a0:	e002      	b.n	80088a8 <HAL_PCD_IRQHandler+0x40a>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 80088a2:	6878      	ldr	r0, [r7, #4]
 80088a4:	f010 fbf6 	bl	8019094 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 80088a8:	687b      	ldr	r3, [r7, #4]
 80088aa:	681b      	ldr	r3, [r3, #0]
 80088ac:	695a      	ldr	r2, [r3, #20]
 80088ae:	687b      	ldr	r3, [r7, #4]
 80088b0:	681b      	ldr	r3, [r3, #0]
 80088b2:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 80088b6:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 80088b8:	687b      	ldr	r3, [r7, #4]
 80088ba:	681b      	ldr	r3, [r3, #0]
 80088bc:	4618      	mov	r0, r3
 80088be:	f00a fbb9 	bl	8013034 <USB_ReadInterrupts>
 80088c2:	4603      	mov	r3, r0
 80088c4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80088c8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80088cc:	d112      	bne.n	80088f4 <HAL_PCD_IRQHandler+0x456>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 80088ce:	69fb      	ldr	r3, [r7, #28]
 80088d0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80088d4:	689b      	ldr	r3, [r3, #8]
 80088d6:	f003 0301 	and.w	r3, r3, #1
 80088da:	2b01      	cmp	r3, #1
 80088dc:	d102      	bne.n	80088e4 <HAL_PCD_IRQHandler+0x446>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 80088de:	6878      	ldr	r0, [r7, #4]
 80088e0:	f010 fbb2 	bl	8019048 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 80088e4:	687b      	ldr	r3, [r7, #4]
 80088e6:	681b      	ldr	r3, [r3, #0]
 80088e8:	695a      	ldr	r2, [r3, #20]
 80088ea:	687b      	ldr	r3, [r7, #4]
 80088ec:	681b      	ldr	r3, [r3, #0]
 80088ee:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 80088f2:	615a      	str	r2, [r3, #20]
    }
    
    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 80088f4:	687b      	ldr	r3, [r7, #4]
 80088f6:	681b      	ldr	r3, [r3, #0]
 80088f8:	4618      	mov	r0, r3
 80088fa:	f00a fb9b 	bl	8013034 <USB_ReadInterrupts>
 80088fe:	4603      	mov	r3, r0
 8008900:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008904:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008908:	d121      	bne.n	800894e <HAL_PCD_IRQHandler+0x4b0>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 800890a:	687b      	ldr	r3, [r7, #4]
 800890c:	681b      	ldr	r3, [r3, #0]
 800890e:	695a      	ldr	r2, [r3, #20]
 8008910:	687b      	ldr	r3, [r7, #4]
 8008912:	681b      	ldr	r3, [r3, #0]
 8008914:	f002 6200 	and.w	r2, r2, #134217728	; 0x8000000
 8008918:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 800891a:	687b      	ldr	r3, [r7, #4]
 800891c:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 8008920:	2b00      	cmp	r3, #0
 8008922:	d111      	bne.n	8008948 <HAL_PCD_IRQHandler+0x4aa>
      {
        hpcd->LPM_State = LPM_L1;
 8008924:	687b      	ldr	r3, [r7, #4]
 8008926:	2201      	movs	r2, #1
 8008928:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 800892c:	687b      	ldr	r3, [r7, #4]
 800892e:	681b      	ldr	r3, [r3, #0]
 8008930:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008932:	089b      	lsrs	r3, r3, #2
 8008934:	f003 020f 	and.w	r2, r3, #15
 8008938:	687b      	ldr	r3, [r7, #4]
 800893a:	f8c3 23f8 	str.w	r2, [r3, #1016]	; 0x3f8

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 800893e:	2101      	movs	r1, #1
 8008940:	6878      	ldr	r0, [r7, #4]
 8008942:	f000 fe51 	bl	80095e8 <HAL_PCDEx_LPM_Callback>
 8008946:	e002      	b.n	800894e <HAL_PCD_IRQHandler+0x4b0>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8008948:	6878      	ldr	r0, [r7, #4]
 800894a:	f010 fb7d 	bl	8019048 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 800894e:	687b      	ldr	r3, [r7, #4]
 8008950:	681b      	ldr	r3, [r3, #0]
 8008952:	4618      	mov	r0, r3
 8008954:	f00a fb6e 	bl	8013034 <USB_ReadInterrupts>
 8008958:	4603      	mov	r3, r0
 800895a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800895e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008962:	f040 80c7 	bne.w	8008af4 <HAL_PCD_IRQHandler+0x656>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8008966:	69fb      	ldr	r3, [r7, #28]
 8008968:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800896c:	685b      	ldr	r3, [r3, #4]
 800896e:	69fa      	ldr	r2, [r7, #28]
 8008970:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008974:	f023 0301 	bic.w	r3, r3, #1
 8008978:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 800897a:	687b      	ldr	r3, [r7, #4]
 800897c:	681b      	ldr	r3, [r3, #0]
 800897e:	2110      	movs	r1, #16
 8008980:	4618      	mov	r0, r3
 8008982:	f009 fc41 	bl	8012208 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8008986:	2300      	movs	r3, #0
 8008988:	62fb      	str	r3, [r7, #44]	; 0x2c
 800898a:	e056      	b.n	8008a3a <HAL_PCD_IRQHandler+0x59c>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 800898c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800898e:	015a      	lsls	r2, r3, #5
 8008990:	69fb      	ldr	r3, [r7, #28]
 8008992:	4413      	add	r3, r2
 8008994:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008998:	461a      	mov	r2, r3
 800899a:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800899e:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80089a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80089a2:	015a      	lsls	r2, r3, #5
 80089a4:	69fb      	ldr	r3, [r7, #28]
 80089a6:	4413      	add	r3, r2
 80089a8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80089ac:	681b      	ldr	r3, [r3, #0]
 80089ae:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80089b0:	0151      	lsls	r1, r2, #5
 80089b2:	69fa      	ldr	r2, [r7, #28]
 80089b4:	440a      	add	r2, r1
 80089b6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80089ba:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80089be:	6013      	str	r3, [r2, #0]
        USBx_INEP(i)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 80089c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80089c2:	015a      	lsls	r2, r3, #5
 80089c4:	69fb      	ldr	r3, [r7, #28]
 80089c6:	4413      	add	r3, r2
 80089c8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80089cc:	681b      	ldr	r3, [r3, #0]
 80089ce:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80089d0:	0151      	lsls	r1, r2, #5
 80089d2:	69fa      	ldr	r2, [r7, #28]
 80089d4:	440a      	add	r2, r1
 80089d6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80089da:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80089de:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 80089e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80089e2:	015a      	lsls	r2, r3, #5
 80089e4:	69fb      	ldr	r3, [r7, #28]
 80089e6:	4413      	add	r3, r2
 80089e8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80089ec:	461a      	mov	r2, r3
 80089ee:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80089f2:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80089f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80089f6:	015a      	lsls	r2, r3, #5
 80089f8:	69fb      	ldr	r3, [r7, #28]
 80089fa:	4413      	add	r3, r2
 80089fc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008a00:	681b      	ldr	r3, [r3, #0]
 8008a02:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008a04:	0151      	lsls	r1, r2, #5
 8008a06:	69fa      	ldr	r2, [r7, #28]
 8008a08:	440a      	add	r2, r1
 8008a0a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008a0e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8008a12:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8008a14:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008a16:	015a      	lsls	r2, r3, #5
 8008a18:	69fb      	ldr	r3, [r7, #28]
 8008a1a:	4413      	add	r3, r2
 8008a1c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008a20:	681b      	ldr	r3, [r3, #0]
 8008a22:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008a24:	0151      	lsls	r1, r2, #5
 8008a26:	69fa      	ldr	r2, [r7, #28]
 8008a28:	440a      	add	r2, r1
 8008a2a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008a2e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8008a32:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8008a34:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008a36:	3301      	adds	r3, #1
 8008a38:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008a3a:	687b      	ldr	r3, [r7, #4]
 8008a3c:	685b      	ldr	r3, [r3, #4]
 8008a3e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008a40:	429a      	cmp	r2, r3
 8008a42:	d3a3      	bcc.n	800898c <HAL_PCD_IRQHandler+0x4ee>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8008a44:	69fb      	ldr	r3, [r7, #28]
 8008a46:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008a4a:	69db      	ldr	r3, [r3, #28]
 8008a4c:	69fa      	ldr	r2, [r7, #28]
 8008a4e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008a52:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8008a56:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8008a58:	687b      	ldr	r3, [r7, #4]
 8008a5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008a5c:	2b00      	cmp	r3, #0
 8008a5e:	d016      	beq.n	8008a8e <HAL_PCD_IRQHandler+0x5f0>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8008a60:	69fb      	ldr	r3, [r7, #28]
 8008a62:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008a66:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008a6a:	69fa      	ldr	r2, [r7, #28]
 8008a6c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008a70:	f043 030b 	orr.w	r3, r3, #11
 8008a74:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8008a78:	69fb      	ldr	r3, [r7, #28]
 8008a7a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008a7e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008a80:	69fa      	ldr	r2, [r7, #28]
 8008a82:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008a86:	f043 030b 	orr.w	r3, r3, #11
 8008a8a:	6453      	str	r3, [r2, #68]	; 0x44
 8008a8c:	e015      	b.n	8008aba <HAL_PCD_IRQHandler+0x61c>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8008a8e:	69fb      	ldr	r3, [r7, #28]
 8008a90:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008a94:	695a      	ldr	r2, [r3, #20]
 8008a96:	69fb      	ldr	r3, [r7, #28]
 8008a98:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008a9c:	4619      	mov	r1, r3
 8008a9e:	f242 032b 	movw	r3, #8235	; 0x202b
 8008aa2:	4313      	orrs	r3, r2
 8008aa4:	614b      	str	r3, [r1, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8008aa6:	69fb      	ldr	r3, [r7, #28]
 8008aa8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008aac:	691b      	ldr	r3, [r3, #16]
 8008aae:	69fa      	ldr	r2, [r7, #28]
 8008ab0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008ab4:	f043 030b 	orr.w	r3, r3, #11
 8008ab8:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8008aba:	69fb      	ldr	r3, [r7, #28]
 8008abc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008ac0:	681b      	ldr	r3, [r3, #0]
 8008ac2:	69fa      	ldr	r2, [r7, #28]
 8008ac4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008ac8:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8008acc:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8008ace:	687b      	ldr	r3, [r7, #4]
 8008ad0:	6818      	ldr	r0, [r3, #0]
 8008ad2:	687b      	ldr	r3, [r7, #4]
 8008ad4:	691b      	ldr	r3, [r3, #16]
 8008ad6:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8008ad8:	687b      	ldr	r3, [r7, #4]
 8008ada:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8008ade:	461a      	mov	r2, r3
 8008ae0:	f00a fb6e 	bl	80131c0 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8008ae4:	687b      	ldr	r3, [r7, #4]
 8008ae6:	681b      	ldr	r3, [r3, #0]
 8008ae8:	695a      	ldr	r2, [r3, #20]
 8008aea:	687b      	ldr	r3, [r7, #4]
 8008aec:	681b      	ldr	r3, [r3, #0]
 8008aee:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8008af2:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8008af4:	687b      	ldr	r3, [r7, #4]
 8008af6:	681b      	ldr	r3, [r3, #0]
 8008af8:	4618      	mov	r0, r3
 8008afa:	f00a fa9b 	bl	8013034 <USB_ReadInterrupts>
 8008afe:	4603      	mov	r3, r0
 8008b00:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8008b04:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008b08:	d124      	bne.n	8008b54 <HAL_PCD_IRQHandler+0x6b6>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8008b0a:	687b      	ldr	r3, [r7, #4]
 8008b0c:	681b      	ldr	r3, [r3, #0]
 8008b0e:	4618      	mov	r0, r3
 8008b10:	f00a fb32 	bl	8013178 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8008b14:	687b      	ldr	r3, [r7, #4]
 8008b16:	681b      	ldr	r3, [r3, #0]
 8008b18:	4618      	mov	r0, r3
 8008b1a:	f009 fbd6 	bl	80122ca <USB_GetDevSpeed>
 8008b1e:	4603      	mov	r3, r0
 8008b20:	461a      	mov	r2, r3
 8008b22:	687b      	ldr	r3, [r7, #4]
 8008b24:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8008b26:	687b      	ldr	r3, [r7, #4]
 8008b28:	681c      	ldr	r4, [r3, #0]
 8008b2a:	f001 fdd9 	bl	800a6e0 <HAL_RCC_GetHCLKFreq>
 8008b2e:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8008b30:	687b      	ldr	r3, [r7, #4]
 8008b32:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8008b34:	b2db      	uxtb	r3, r3
 8008b36:	461a      	mov	r2, r3
 8008b38:	4620      	mov	r0, r4
 8008b3a:	f009 f919 	bl	8011d70 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8008b3e:	6878      	ldr	r0, [r7, #4]
 8008b40:	f010 fa59 	bl	8018ff6 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8008b44:	687b      	ldr	r3, [r7, #4]
 8008b46:	681b      	ldr	r3, [r3, #0]
 8008b48:	695a      	ldr	r2, [r3, #20]
 8008b4a:	687b      	ldr	r3, [r7, #4]
 8008b4c:	681b      	ldr	r3, [r3, #0]
 8008b4e:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8008b52:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8008b54:	687b      	ldr	r3, [r7, #4]
 8008b56:	681b      	ldr	r3, [r3, #0]
 8008b58:	4618      	mov	r0, r3
 8008b5a:	f00a fa6b 	bl	8013034 <USB_ReadInterrupts>
 8008b5e:	4603      	mov	r3, r0
 8008b60:	f003 0308 	and.w	r3, r3, #8
 8008b64:	2b08      	cmp	r3, #8
 8008b66:	d10a      	bne.n	8008b7e <HAL_PCD_IRQHandler+0x6e0>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8008b68:	6878      	ldr	r0, [r7, #4]
 8008b6a:	f010 fa36 	bl	8018fda <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8008b6e:	687b      	ldr	r3, [r7, #4]
 8008b70:	681b      	ldr	r3, [r3, #0]
 8008b72:	695a      	ldr	r2, [r3, #20]
 8008b74:	687b      	ldr	r3, [r7, #4]
 8008b76:	681b      	ldr	r3, [r3, #0]
 8008b78:	f002 0208 	and.w	r2, r2, #8
 8008b7c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8008b7e:	687b      	ldr	r3, [r7, #4]
 8008b80:	681b      	ldr	r3, [r3, #0]
 8008b82:	4618      	mov	r0, r3
 8008b84:	f00a fa56 	bl	8013034 <USB_ReadInterrupts>
 8008b88:	4603      	mov	r3, r0
 8008b8a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8008b8e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008b92:	d10f      	bne.n	8008bb4 <HAL_PCD_IRQHandler+0x716>
    {
      /* Keep application checking the corresponding Iso IN endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8008b94:	2300      	movs	r3, #0
 8008b96:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8008b98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b9a:	b2db      	uxtb	r3, r3
 8008b9c:	4619      	mov	r1, r3
 8008b9e:	6878      	ldr	r0, [r7, #4]
 8008ba0:	f010 fa98 	bl	80190d4 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8008ba4:	687b      	ldr	r3, [r7, #4]
 8008ba6:	681b      	ldr	r3, [r3, #0]
 8008ba8:	695a      	ldr	r2, [r3, #20]
 8008baa:	687b      	ldr	r3, [r7, #4]
 8008bac:	681b      	ldr	r3, [r3, #0]
 8008bae:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8008bb2:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8008bb4:	687b      	ldr	r3, [r7, #4]
 8008bb6:	681b      	ldr	r3, [r3, #0]
 8008bb8:	4618      	mov	r0, r3
 8008bba:	f00a fa3b 	bl	8013034 <USB_ReadInterrupts>
 8008bbe:	4603      	mov	r3, r0
 8008bc0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8008bc4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8008bc8:	d10f      	bne.n	8008bea <HAL_PCD_IRQHandler+0x74c>
    {
      /* Keep application checking the corresponding Iso OUT endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8008bca:	2300      	movs	r3, #0
 8008bcc:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8008bce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008bd0:	b2db      	uxtb	r3, r3
 8008bd2:	4619      	mov	r1, r3
 8008bd4:	6878      	ldr	r0, [r7, #4]
 8008bd6:	f010 fa6b 	bl	80190b0 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8008bda:	687b      	ldr	r3, [r7, #4]
 8008bdc:	681b      	ldr	r3, [r3, #0]
 8008bde:	695a      	ldr	r2, [r3, #20]
 8008be0:	687b      	ldr	r3, [r7, #4]
 8008be2:	681b      	ldr	r3, [r3, #0]
 8008be4:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8008be8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8008bea:	687b      	ldr	r3, [r7, #4]
 8008bec:	681b      	ldr	r3, [r3, #0]
 8008bee:	4618      	mov	r0, r3
 8008bf0:	f00a fa20 	bl	8013034 <USB_ReadInterrupts>
 8008bf4:	4603      	mov	r3, r0
 8008bf6:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8008bfa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008bfe:	d10a      	bne.n	8008c16 <HAL_PCD_IRQHandler+0x778>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8008c00:	6878      	ldr	r0, [r7, #4]
 8008c02:	f010 fa79 	bl	80190f8 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8008c06:	687b      	ldr	r3, [r7, #4]
 8008c08:	681b      	ldr	r3, [r3, #0]
 8008c0a:	695a      	ldr	r2, [r3, #20]
 8008c0c:	687b      	ldr	r3, [r7, #4]
 8008c0e:	681b      	ldr	r3, [r3, #0]
 8008c10:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8008c14:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8008c16:	687b      	ldr	r3, [r7, #4]
 8008c18:	681b      	ldr	r3, [r3, #0]
 8008c1a:	4618      	mov	r0, r3
 8008c1c:	f00a fa0a 	bl	8013034 <USB_ReadInterrupts>
 8008c20:	4603      	mov	r3, r0
 8008c22:	f003 0304 	and.w	r3, r3, #4
 8008c26:	2b04      	cmp	r3, #4
 8008c28:	d115      	bne.n	8008c56 <HAL_PCD_IRQHandler+0x7b8>
    {
      temp = hpcd->Instance->GOTGINT;
 8008c2a:	687b      	ldr	r3, [r7, #4]
 8008c2c:	681b      	ldr	r3, [r3, #0]
 8008c2e:	685b      	ldr	r3, [r3, #4]
 8008c30:	61bb      	str	r3, [r7, #24]

      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8008c32:	69bb      	ldr	r3, [r7, #24]
 8008c34:	f003 0304 	and.w	r3, r3, #4
 8008c38:	2b00      	cmp	r3, #0
 8008c3a:	d002      	beq.n	8008c42 <HAL_PCD_IRQHandler+0x7a4>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8008c3c:	6878      	ldr	r0, [r7, #4]
 8008c3e:	f010 fa69 	bl	8019114 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
 8008c42:	687b      	ldr	r3, [r7, #4]
 8008c44:	681b      	ldr	r3, [r3, #0]
 8008c46:	6859      	ldr	r1, [r3, #4]
 8008c48:	687b      	ldr	r3, [r7, #4]
 8008c4a:	681b      	ldr	r3, [r3, #0]
 8008c4c:	69ba      	ldr	r2, [r7, #24]
 8008c4e:	430a      	orrs	r2, r1
 8008c50:	605a      	str	r2, [r3, #4]
 8008c52:	e000      	b.n	8008c56 <HAL_PCD_IRQHandler+0x7b8>
      return;
 8008c54:	bf00      	nop
    }
  }
}
 8008c56:	3734      	adds	r7, #52	; 0x34
 8008c58:	46bd      	mov	sp, r7
 8008c5a:	bd90      	pop	{r4, r7, pc}

08008c5c <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8008c5c:	b580      	push	{r7, lr}
 8008c5e:	b082      	sub	sp, #8
 8008c60:	af00      	add	r7, sp, #0
 8008c62:	6078      	str	r0, [r7, #4]
 8008c64:	460b      	mov	r3, r1
 8008c66:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8008c68:	687b      	ldr	r3, [r7, #4]
 8008c6a:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8008c6e:	2b01      	cmp	r3, #1
 8008c70:	d101      	bne.n	8008c76 <HAL_PCD_SetAddress+0x1a>
 8008c72:	2302      	movs	r3, #2
 8008c74:	e013      	b.n	8008c9e <HAL_PCD_SetAddress+0x42>
 8008c76:	687b      	ldr	r3, [r7, #4]
 8008c78:	2201      	movs	r2, #1
 8008c7a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  hpcd->USB_Address = address;
 8008c7e:	687b      	ldr	r3, [r7, #4]
 8008c80:	78fa      	ldrb	r2, [r7, #3]
 8008c82:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8008c86:	687b      	ldr	r3, [r7, #4]
 8008c88:	681b      	ldr	r3, [r3, #0]
 8008c8a:	78fa      	ldrb	r2, [r7, #3]
 8008c8c:	4611      	mov	r1, r2
 8008c8e:	4618      	mov	r0, r3
 8008c90:	f00a f97a 	bl	8012f88 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8008c94:	687b      	ldr	r3, [r7, #4]
 8008c96:	2200      	movs	r2, #0
 8008c98:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 8008c9c:	2300      	movs	r3, #0
}
 8008c9e:	4618      	mov	r0, r3
 8008ca0:	3708      	adds	r7, #8
 8008ca2:	46bd      	mov	sp, r7
 8008ca4:	bd80      	pop	{r7, pc}

08008ca6 <HAL_PCD_EP_Open>:
  * @param  ep_mps endpoint max packet size
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint16_t ep_mps, uint8_t ep_type)
{
 8008ca6:	b580      	push	{r7, lr}
 8008ca8:	b084      	sub	sp, #16
 8008caa:	af00      	add	r7, sp, #0
 8008cac:	6078      	str	r0, [r7, #4]
 8008cae:	4608      	mov	r0, r1
 8008cb0:	4611      	mov	r1, r2
 8008cb2:	461a      	mov	r2, r3
 8008cb4:	4603      	mov	r3, r0
 8008cb6:	70fb      	strb	r3, [r7, #3]
 8008cb8:	460b      	mov	r3, r1
 8008cba:	803b      	strh	r3, [r7, #0]
 8008cbc:	4613      	mov	r3, r2
 8008cbe:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8008cc0:	2300      	movs	r3, #0
 8008cc2:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8008cc4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8008cc8:	2b00      	cmp	r3, #0
 8008cca:	da0f      	bge.n	8008cec <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8008ccc:	78fb      	ldrb	r3, [r7, #3]
 8008cce:	f003 020f 	and.w	r2, r3, #15
 8008cd2:	4613      	mov	r3, r2
 8008cd4:	00db      	lsls	r3, r3, #3
 8008cd6:	1a9b      	subs	r3, r3, r2
 8008cd8:	009b      	lsls	r3, r3, #2
 8008cda:	3338      	adds	r3, #56	; 0x38
 8008cdc:	687a      	ldr	r2, [r7, #4]
 8008cde:	4413      	add	r3, r2
 8008ce0:	3304      	adds	r3, #4
 8008ce2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8008ce4:	68fb      	ldr	r3, [r7, #12]
 8008ce6:	2201      	movs	r2, #1
 8008ce8:	705a      	strb	r2, [r3, #1]
 8008cea:	e00f      	b.n	8008d0c <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8008cec:	78fb      	ldrb	r3, [r7, #3]
 8008cee:	f003 020f 	and.w	r2, r3, #15
 8008cf2:	4613      	mov	r3, r2
 8008cf4:	00db      	lsls	r3, r3, #3
 8008cf6:	1a9b      	subs	r3, r3, r2
 8008cf8:	009b      	lsls	r3, r3, #2
 8008cfa:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8008cfe:	687a      	ldr	r2, [r7, #4]
 8008d00:	4413      	add	r3, r2
 8008d02:	3304      	adds	r3, #4
 8008d04:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8008d06:	68fb      	ldr	r3, [r7, #12]
 8008d08:	2200      	movs	r2, #0
 8008d0a:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8008d0c:	78fb      	ldrb	r3, [r7, #3]
 8008d0e:	f003 030f 	and.w	r3, r3, #15
 8008d12:	b2da      	uxtb	r2, r3
 8008d14:	68fb      	ldr	r3, [r7, #12]
 8008d16:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8008d18:	883a      	ldrh	r2, [r7, #0]
 8008d1a:	68fb      	ldr	r3, [r7, #12]
 8008d1c:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8008d1e:	68fb      	ldr	r3, [r7, #12]
 8008d20:	78ba      	ldrb	r2, [r7, #2]
 8008d22:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8008d24:	68fb      	ldr	r3, [r7, #12]
 8008d26:	785b      	ldrb	r3, [r3, #1]
 8008d28:	2b00      	cmp	r3, #0
 8008d2a:	d004      	beq.n	8008d36 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8008d2c:	68fb      	ldr	r3, [r7, #12]
 8008d2e:	781b      	ldrb	r3, [r3, #0]
 8008d30:	b29a      	uxth	r2, r3
 8008d32:	68fb      	ldr	r3, [r7, #12]
 8008d34:	80da      	strh	r2, [r3, #6]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8008d36:	78bb      	ldrb	r3, [r7, #2]
 8008d38:	2b02      	cmp	r3, #2
 8008d3a:	d102      	bne.n	8008d42 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8008d3c:	68fb      	ldr	r3, [r7, #12]
 8008d3e:	2200      	movs	r2, #0
 8008d40:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8008d42:	687b      	ldr	r3, [r7, #4]
 8008d44:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8008d48:	2b01      	cmp	r3, #1
 8008d4a:	d101      	bne.n	8008d50 <HAL_PCD_EP_Open+0xaa>
 8008d4c:	2302      	movs	r3, #2
 8008d4e:	e00e      	b.n	8008d6e <HAL_PCD_EP_Open+0xc8>
 8008d50:	687b      	ldr	r3, [r7, #4]
 8008d52:	2201      	movs	r2, #1
 8008d54:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8008d58:	687b      	ldr	r3, [r7, #4]
 8008d5a:	681b      	ldr	r3, [r3, #0]
 8008d5c:	68f9      	ldr	r1, [r7, #12]
 8008d5e:	4618      	mov	r0, r3
 8008d60:	f009 fad8 	bl	8012314 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8008d64:	687b      	ldr	r3, [r7, #4]
 8008d66:	2200      	movs	r2, #0
 8008d68:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return ret;
 8008d6c:	7afb      	ldrb	r3, [r7, #11]
}
 8008d6e:	4618      	mov	r0, r3
 8008d70:	3710      	adds	r7, #16
 8008d72:	46bd      	mov	sp, r7
 8008d74:	bd80      	pop	{r7, pc}

08008d76 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8008d76:	b580      	push	{r7, lr}
 8008d78:	b084      	sub	sp, #16
 8008d7a:	af00      	add	r7, sp, #0
 8008d7c:	6078      	str	r0, [r7, #4]
 8008d7e:	460b      	mov	r3, r1
 8008d80:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8008d82:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8008d86:	2b00      	cmp	r3, #0
 8008d88:	da0f      	bge.n	8008daa <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8008d8a:	78fb      	ldrb	r3, [r7, #3]
 8008d8c:	f003 020f 	and.w	r2, r3, #15
 8008d90:	4613      	mov	r3, r2
 8008d92:	00db      	lsls	r3, r3, #3
 8008d94:	1a9b      	subs	r3, r3, r2
 8008d96:	009b      	lsls	r3, r3, #2
 8008d98:	3338      	adds	r3, #56	; 0x38
 8008d9a:	687a      	ldr	r2, [r7, #4]
 8008d9c:	4413      	add	r3, r2
 8008d9e:	3304      	adds	r3, #4
 8008da0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8008da2:	68fb      	ldr	r3, [r7, #12]
 8008da4:	2201      	movs	r2, #1
 8008da6:	705a      	strb	r2, [r3, #1]
 8008da8:	e00f      	b.n	8008dca <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8008daa:	78fb      	ldrb	r3, [r7, #3]
 8008dac:	f003 020f 	and.w	r2, r3, #15
 8008db0:	4613      	mov	r3, r2
 8008db2:	00db      	lsls	r3, r3, #3
 8008db4:	1a9b      	subs	r3, r3, r2
 8008db6:	009b      	lsls	r3, r3, #2
 8008db8:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8008dbc:	687a      	ldr	r2, [r7, #4]
 8008dbe:	4413      	add	r3, r2
 8008dc0:	3304      	adds	r3, #4
 8008dc2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8008dc4:	68fb      	ldr	r3, [r7, #12]
 8008dc6:	2200      	movs	r2, #0
 8008dc8:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8008dca:	78fb      	ldrb	r3, [r7, #3]
 8008dcc:	f003 030f 	and.w	r3, r3, #15
 8008dd0:	b2da      	uxtb	r2, r3
 8008dd2:	68fb      	ldr	r3, [r7, #12]
 8008dd4:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8008dd6:	687b      	ldr	r3, [r7, #4]
 8008dd8:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8008ddc:	2b01      	cmp	r3, #1
 8008dde:	d101      	bne.n	8008de4 <HAL_PCD_EP_Close+0x6e>
 8008de0:	2302      	movs	r3, #2
 8008de2:	e00e      	b.n	8008e02 <HAL_PCD_EP_Close+0x8c>
 8008de4:	687b      	ldr	r3, [r7, #4]
 8008de6:	2201      	movs	r2, #1
 8008de8:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8008dec:	687b      	ldr	r3, [r7, #4]
 8008dee:	681b      	ldr	r3, [r3, #0]
 8008df0:	68f9      	ldr	r1, [r7, #12]
 8008df2:	4618      	mov	r0, r3
 8008df4:	f009 fb16 	bl	8012424 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8008df8:	687b      	ldr	r3, [r7, #4]
 8008dfa:	2200      	movs	r2, #0
 8008dfc:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 8008e00:	2300      	movs	r3, #0
}
 8008e02:	4618      	mov	r0, r3
 8008e04:	3710      	adds	r7, #16
 8008e06:	46bd      	mov	sp, r7
 8008e08:	bd80      	pop	{r7, pc}

08008e0a <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8008e0a:	b580      	push	{r7, lr}
 8008e0c:	b086      	sub	sp, #24
 8008e0e:	af00      	add	r7, sp, #0
 8008e10:	60f8      	str	r0, [r7, #12]
 8008e12:	607a      	str	r2, [r7, #4]
 8008e14:	603b      	str	r3, [r7, #0]
 8008e16:	460b      	mov	r3, r1
 8008e18:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8008e1a:	7afb      	ldrb	r3, [r7, #11]
 8008e1c:	f003 020f 	and.w	r2, r3, #15
 8008e20:	4613      	mov	r3, r2
 8008e22:	00db      	lsls	r3, r3, #3
 8008e24:	1a9b      	subs	r3, r3, r2
 8008e26:	009b      	lsls	r3, r3, #2
 8008e28:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8008e2c:	68fa      	ldr	r2, [r7, #12]
 8008e2e:	4413      	add	r3, r2
 8008e30:	3304      	adds	r3, #4
 8008e32:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8008e34:	697b      	ldr	r3, [r7, #20]
 8008e36:	687a      	ldr	r2, [r7, #4]
 8008e38:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8008e3a:	697b      	ldr	r3, [r7, #20]
 8008e3c:	683a      	ldr	r2, [r7, #0]
 8008e3e:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8008e40:	697b      	ldr	r3, [r7, #20]
 8008e42:	2200      	movs	r2, #0
 8008e44:	619a      	str	r2, [r3, #24]
  ep->is_in = 0U;
 8008e46:	697b      	ldr	r3, [r7, #20]
 8008e48:	2200      	movs	r2, #0
 8008e4a:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8008e4c:	7afb      	ldrb	r3, [r7, #11]
 8008e4e:	f003 030f 	and.w	r3, r3, #15
 8008e52:	b2da      	uxtb	r2, r3
 8008e54:	697b      	ldr	r3, [r7, #20]
 8008e56:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8008e58:	68fb      	ldr	r3, [r7, #12]
 8008e5a:	691b      	ldr	r3, [r3, #16]
 8008e5c:	2b01      	cmp	r3, #1
 8008e5e:	d102      	bne.n	8008e66 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8008e60:	687a      	ldr	r2, [r7, #4]
 8008e62:	697b      	ldr	r3, [r7, #20]
 8008e64:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8008e66:	7afb      	ldrb	r3, [r7, #11]
 8008e68:	f003 030f 	and.w	r3, r3, #15
 8008e6c:	2b00      	cmp	r3, #0
 8008e6e:	d109      	bne.n	8008e84 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8008e70:	68fb      	ldr	r3, [r7, #12]
 8008e72:	6818      	ldr	r0, [r3, #0]
 8008e74:	68fb      	ldr	r3, [r7, #12]
 8008e76:	691b      	ldr	r3, [r3, #16]
 8008e78:	b2db      	uxtb	r3, r3
 8008e7a:	461a      	mov	r2, r3
 8008e7c:	6979      	ldr	r1, [r7, #20]
 8008e7e:	f009 fdf9 	bl	8012a74 <USB_EP0StartXfer>
 8008e82:	e008      	b.n	8008e96 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8008e84:	68fb      	ldr	r3, [r7, #12]
 8008e86:	6818      	ldr	r0, [r3, #0]
 8008e88:	68fb      	ldr	r3, [r7, #12]
 8008e8a:	691b      	ldr	r3, [r3, #16]
 8008e8c:	b2db      	uxtb	r3, r3
 8008e8e:	461a      	mov	r2, r3
 8008e90:	6979      	ldr	r1, [r7, #20]
 8008e92:	f009 fba3 	bl	80125dc <USB_EPStartXfer>
  }

  return HAL_OK;
 8008e96:	2300      	movs	r3, #0
}
 8008e98:	4618      	mov	r0, r3
 8008e9a:	3718      	adds	r7, #24
 8008e9c:	46bd      	mov	sp, r7
 8008e9e:	bd80      	pop	{r7, pc}

08008ea0 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8008ea0:	b480      	push	{r7}
 8008ea2:	b083      	sub	sp, #12
 8008ea4:	af00      	add	r7, sp, #0
 8008ea6:	6078      	str	r0, [r7, #4]
 8008ea8:	460b      	mov	r3, r1
 8008eaa:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8008eac:	78fb      	ldrb	r3, [r7, #3]
 8008eae:	f003 020f 	and.w	r2, r3, #15
 8008eb2:	6879      	ldr	r1, [r7, #4]
 8008eb4:	4613      	mov	r3, r2
 8008eb6:	00db      	lsls	r3, r3, #3
 8008eb8:	1a9b      	subs	r3, r3, r2
 8008eba:	009b      	lsls	r3, r3, #2
 8008ebc:	440b      	add	r3, r1
 8008ebe:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8008ec2:	681b      	ldr	r3, [r3, #0]
}
 8008ec4:	4618      	mov	r0, r3
 8008ec6:	370c      	adds	r7, #12
 8008ec8:	46bd      	mov	sp, r7
 8008eca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ece:	4770      	bx	lr

08008ed0 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8008ed0:	b580      	push	{r7, lr}
 8008ed2:	b086      	sub	sp, #24
 8008ed4:	af00      	add	r7, sp, #0
 8008ed6:	60f8      	str	r0, [r7, #12]
 8008ed8:	607a      	str	r2, [r7, #4]
 8008eda:	603b      	str	r3, [r7, #0]
 8008edc:	460b      	mov	r3, r1
 8008ede:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8008ee0:	7afb      	ldrb	r3, [r7, #11]
 8008ee2:	f003 020f 	and.w	r2, r3, #15
 8008ee6:	4613      	mov	r3, r2
 8008ee8:	00db      	lsls	r3, r3, #3
 8008eea:	1a9b      	subs	r3, r3, r2
 8008eec:	009b      	lsls	r3, r3, #2
 8008eee:	3338      	adds	r3, #56	; 0x38
 8008ef0:	68fa      	ldr	r2, [r7, #12]
 8008ef2:	4413      	add	r3, r2
 8008ef4:	3304      	adds	r3, #4
 8008ef6:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8008ef8:	697b      	ldr	r3, [r7, #20]
 8008efa:	687a      	ldr	r2, [r7, #4]
 8008efc:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8008efe:	697b      	ldr	r3, [r7, #20]
 8008f00:	683a      	ldr	r2, [r7, #0]
 8008f02:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8008f04:	697b      	ldr	r3, [r7, #20]
 8008f06:	2200      	movs	r2, #0
 8008f08:	619a      	str	r2, [r3, #24]
  ep->is_in = 1U;
 8008f0a:	697b      	ldr	r3, [r7, #20]
 8008f0c:	2201      	movs	r2, #1
 8008f0e:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8008f10:	7afb      	ldrb	r3, [r7, #11]
 8008f12:	f003 030f 	and.w	r3, r3, #15
 8008f16:	b2da      	uxtb	r2, r3
 8008f18:	697b      	ldr	r3, [r7, #20]
 8008f1a:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8008f1c:	68fb      	ldr	r3, [r7, #12]
 8008f1e:	691b      	ldr	r3, [r3, #16]
 8008f20:	2b01      	cmp	r3, #1
 8008f22:	d102      	bne.n	8008f2a <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8008f24:	687a      	ldr	r2, [r7, #4]
 8008f26:	697b      	ldr	r3, [r7, #20]
 8008f28:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8008f2a:	7afb      	ldrb	r3, [r7, #11]
 8008f2c:	f003 030f 	and.w	r3, r3, #15
 8008f30:	2b00      	cmp	r3, #0
 8008f32:	d109      	bne.n	8008f48 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8008f34:	68fb      	ldr	r3, [r7, #12]
 8008f36:	6818      	ldr	r0, [r3, #0]
 8008f38:	68fb      	ldr	r3, [r7, #12]
 8008f3a:	691b      	ldr	r3, [r3, #16]
 8008f3c:	b2db      	uxtb	r3, r3
 8008f3e:	461a      	mov	r2, r3
 8008f40:	6979      	ldr	r1, [r7, #20]
 8008f42:	f009 fd97 	bl	8012a74 <USB_EP0StartXfer>
 8008f46:	e008      	b.n	8008f5a <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8008f48:	68fb      	ldr	r3, [r7, #12]
 8008f4a:	6818      	ldr	r0, [r3, #0]
 8008f4c:	68fb      	ldr	r3, [r7, #12]
 8008f4e:	691b      	ldr	r3, [r3, #16]
 8008f50:	b2db      	uxtb	r3, r3
 8008f52:	461a      	mov	r2, r3
 8008f54:	6979      	ldr	r1, [r7, #20]
 8008f56:	f009 fb41 	bl	80125dc <USB_EPStartXfer>
  }

  return HAL_OK;
 8008f5a:	2300      	movs	r3, #0
}
 8008f5c:	4618      	mov	r0, r3
 8008f5e:	3718      	adds	r7, #24
 8008f60:	46bd      	mov	sp, r7
 8008f62:	bd80      	pop	{r7, pc}

08008f64 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8008f64:	b580      	push	{r7, lr}
 8008f66:	b084      	sub	sp, #16
 8008f68:	af00      	add	r7, sp, #0
 8008f6a:	6078      	str	r0, [r7, #4]
 8008f6c:	460b      	mov	r3, r1
 8008f6e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8008f70:	78fb      	ldrb	r3, [r7, #3]
 8008f72:	f003 020f 	and.w	r2, r3, #15
 8008f76:	687b      	ldr	r3, [r7, #4]
 8008f78:	685b      	ldr	r3, [r3, #4]
 8008f7a:	429a      	cmp	r2, r3
 8008f7c:	d901      	bls.n	8008f82 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8008f7e:	2301      	movs	r3, #1
 8008f80:	e050      	b.n	8009024 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8008f82:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8008f86:	2b00      	cmp	r3, #0
 8008f88:	da0f      	bge.n	8008faa <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8008f8a:	78fb      	ldrb	r3, [r7, #3]
 8008f8c:	f003 020f 	and.w	r2, r3, #15
 8008f90:	4613      	mov	r3, r2
 8008f92:	00db      	lsls	r3, r3, #3
 8008f94:	1a9b      	subs	r3, r3, r2
 8008f96:	009b      	lsls	r3, r3, #2
 8008f98:	3338      	adds	r3, #56	; 0x38
 8008f9a:	687a      	ldr	r2, [r7, #4]
 8008f9c:	4413      	add	r3, r2
 8008f9e:	3304      	adds	r3, #4
 8008fa0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8008fa2:	68fb      	ldr	r3, [r7, #12]
 8008fa4:	2201      	movs	r2, #1
 8008fa6:	705a      	strb	r2, [r3, #1]
 8008fa8:	e00d      	b.n	8008fc6 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8008faa:	78fa      	ldrb	r2, [r7, #3]
 8008fac:	4613      	mov	r3, r2
 8008fae:	00db      	lsls	r3, r3, #3
 8008fb0:	1a9b      	subs	r3, r3, r2
 8008fb2:	009b      	lsls	r3, r3, #2
 8008fb4:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8008fb8:	687a      	ldr	r2, [r7, #4]
 8008fba:	4413      	add	r3, r2
 8008fbc:	3304      	adds	r3, #4
 8008fbe:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8008fc0:	68fb      	ldr	r3, [r7, #12]
 8008fc2:	2200      	movs	r2, #0
 8008fc4:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8008fc6:	68fb      	ldr	r3, [r7, #12]
 8008fc8:	2201      	movs	r2, #1
 8008fca:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8008fcc:	78fb      	ldrb	r3, [r7, #3]
 8008fce:	f003 030f 	and.w	r3, r3, #15
 8008fd2:	b2da      	uxtb	r2, r3
 8008fd4:	68fb      	ldr	r3, [r7, #12]
 8008fd6:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8008fd8:	687b      	ldr	r3, [r7, #4]
 8008fda:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8008fde:	2b01      	cmp	r3, #1
 8008fe0:	d101      	bne.n	8008fe6 <HAL_PCD_EP_SetStall+0x82>
 8008fe2:	2302      	movs	r3, #2
 8008fe4:	e01e      	b.n	8009024 <HAL_PCD_EP_SetStall+0xc0>
 8008fe6:	687b      	ldr	r3, [r7, #4]
 8008fe8:	2201      	movs	r2, #1
 8008fea:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8008fee:	687b      	ldr	r3, [r7, #4]
 8008ff0:	681b      	ldr	r3, [r3, #0]
 8008ff2:	68f9      	ldr	r1, [r7, #12]
 8008ff4:	4618      	mov	r0, r3
 8008ff6:	f009 fef3 	bl	8012de0 <USB_EPSetStall>
  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8008ffa:	78fb      	ldrb	r3, [r7, #3]
 8008ffc:	f003 030f 	and.w	r3, r3, #15
 8009000:	2b00      	cmp	r3, #0
 8009002:	d10a      	bne.n	800901a <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8009004:	687b      	ldr	r3, [r7, #4]
 8009006:	6818      	ldr	r0, [r3, #0]
 8009008:	687b      	ldr	r3, [r7, #4]
 800900a:	691b      	ldr	r3, [r3, #16]
 800900c:	b2d9      	uxtb	r1, r3
 800900e:	687b      	ldr	r3, [r7, #4]
 8009010:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8009014:	461a      	mov	r2, r3
 8009016:	f00a f8d3 	bl	80131c0 <USB_EP0_OutStart>
  }
  __HAL_UNLOCK(hpcd);
 800901a:	687b      	ldr	r3, [r7, #4]
 800901c:	2200      	movs	r2, #0
 800901e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8009022:	2300      	movs	r3, #0
}
 8009024:	4618      	mov	r0, r3
 8009026:	3710      	adds	r7, #16
 8009028:	46bd      	mov	sp, r7
 800902a:	bd80      	pop	{r7, pc}

0800902c <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800902c:	b580      	push	{r7, lr}
 800902e:	b084      	sub	sp, #16
 8009030:	af00      	add	r7, sp, #0
 8009032:	6078      	str	r0, [r7, #4]
 8009034:	460b      	mov	r3, r1
 8009036:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8009038:	78fb      	ldrb	r3, [r7, #3]
 800903a:	f003 020f 	and.w	r2, r3, #15
 800903e:	687b      	ldr	r3, [r7, #4]
 8009040:	685b      	ldr	r3, [r3, #4]
 8009042:	429a      	cmp	r2, r3
 8009044:	d901      	bls.n	800904a <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8009046:	2301      	movs	r3, #1
 8009048:	e042      	b.n	80090d0 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800904a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800904e:	2b00      	cmp	r3, #0
 8009050:	da0f      	bge.n	8009072 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8009052:	78fb      	ldrb	r3, [r7, #3]
 8009054:	f003 020f 	and.w	r2, r3, #15
 8009058:	4613      	mov	r3, r2
 800905a:	00db      	lsls	r3, r3, #3
 800905c:	1a9b      	subs	r3, r3, r2
 800905e:	009b      	lsls	r3, r3, #2
 8009060:	3338      	adds	r3, #56	; 0x38
 8009062:	687a      	ldr	r2, [r7, #4]
 8009064:	4413      	add	r3, r2
 8009066:	3304      	adds	r3, #4
 8009068:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800906a:	68fb      	ldr	r3, [r7, #12]
 800906c:	2201      	movs	r2, #1
 800906e:	705a      	strb	r2, [r3, #1]
 8009070:	e00f      	b.n	8009092 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8009072:	78fb      	ldrb	r3, [r7, #3]
 8009074:	f003 020f 	and.w	r2, r3, #15
 8009078:	4613      	mov	r3, r2
 800907a:	00db      	lsls	r3, r3, #3
 800907c:	1a9b      	subs	r3, r3, r2
 800907e:	009b      	lsls	r3, r3, #2
 8009080:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8009084:	687a      	ldr	r2, [r7, #4]
 8009086:	4413      	add	r3, r2
 8009088:	3304      	adds	r3, #4
 800908a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800908c:	68fb      	ldr	r3, [r7, #12]
 800908e:	2200      	movs	r2, #0
 8009090:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8009092:	68fb      	ldr	r3, [r7, #12]
 8009094:	2200      	movs	r2, #0
 8009096:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8009098:	78fb      	ldrb	r3, [r7, #3]
 800909a:	f003 030f 	and.w	r3, r3, #15
 800909e:	b2da      	uxtb	r2, r3
 80090a0:	68fb      	ldr	r3, [r7, #12]
 80090a2:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80090a4:	687b      	ldr	r3, [r7, #4]
 80090a6:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80090aa:	2b01      	cmp	r3, #1
 80090ac:	d101      	bne.n	80090b2 <HAL_PCD_EP_ClrStall+0x86>
 80090ae:	2302      	movs	r3, #2
 80090b0:	e00e      	b.n	80090d0 <HAL_PCD_EP_ClrStall+0xa4>
 80090b2:	687b      	ldr	r3, [r7, #4]
 80090b4:	2201      	movs	r2, #1
 80090b6:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80090ba:	687b      	ldr	r3, [r7, #4]
 80090bc:	681b      	ldr	r3, [r3, #0]
 80090be:	68f9      	ldr	r1, [r7, #12]
 80090c0:	4618      	mov	r0, r3
 80090c2:	f009 fefb 	bl	8012ebc <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 80090c6:	687b      	ldr	r3, [r7, #4]
 80090c8:	2200      	movs	r2, #0
 80090ca:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 80090ce:	2300      	movs	r3, #0
}
 80090d0:	4618      	mov	r0, r3
 80090d2:	3710      	adds	r7, #16
 80090d4:	46bd      	mov	sp, r7
 80090d6:	bd80      	pop	{r7, pc}

080090d8 <HAL_PCD_EP_Flush>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Flush(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80090d8:	b580      	push	{r7, lr}
 80090da:	b082      	sub	sp, #8
 80090dc:	af00      	add	r7, sp, #0
 80090de:	6078      	str	r0, [r7, #4]
 80090e0:	460b      	mov	r3, r1
 80090e2:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 80090e4:	687b      	ldr	r3, [r7, #4]
 80090e6:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80090ea:	2b01      	cmp	r3, #1
 80090ec:	d101      	bne.n	80090f2 <HAL_PCD_EP_Flush+0x1a>
 80090ee:	2302      	movs	r3, #2
 80090f0:	e01b      	b.n	800912a <HAL_PCD_EP_Flush+0x52>
 80090f2:	687b      	ldr	r3, [r7, #4]
 80090f4:	2201      	movs	r2, #1
 80090f6:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  if ((ep_addr & 0x80U) == 0x80U)
 80090fa:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80090fe:	2b00      	cmp	r3, #0
 8009100:	da09      	bge.n	8009116 <HAL_PCD_EP_Flush+0x3e>
  {
    (void)USB_FlushTxFifo(hpcd->Instance, (uint32_t)ep_addr & EP_ADDR_MSK);
 8009102:	687b      	ldr	r3, [r7, #4]
 8009104:	681a      	ldr	r2, [r3, #0]
 8009106:	78fb      	ldrb	r3, [r7, #3]
 8009108:	f003 030f 	and.w	r3, r3, #15
 800910c:	4619      	mov	r1, r3
 800910e:	4610      	mov	r0, r2
 8009110:	f009 f87a 	bl	8012208 <USB_FlushTxFifo>
 8009114:	e004      	b.n	8009120 <HAL_PCD_EP_Flush+0x48>
  }
  else
  {
    (void)USB_FlushRxFifo(hpcd->Instance);
 8009116:	687b      	ldr	r3, [r7, #4]
 8009118:	681b      	ldr	r3, [r3, #0]
 800911a:	4618      	mov	r0, r3
 800911c:	f009 f89a 	bl	8012254 <USB_FlushRxFifo>
  }

  __HAL_UNLOCK(hpcd);
 8009120:	687b      	ldr	r3, [r7, #4]
 8009122:	2200      	movs	r2, #0
 8009124:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8009128:	2300      	movs	r3, #0
}
 800912a:	4618      	mov	r0, r3
 800912c:	3708      	adds	r7, #8
 800912e:	46bd      	mov	sp, r7
 8009130:	bd80      	pop	{r7, pc}

08009132 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8009132:	b580      	push	{r7, lr}
 8009134:	b08a      	sub	sp, #40	; 0x28
 8009136:	af02      	add	r7, sp, #8
 8009138:	6078      	str	r0, [r7, #4]
 800913a:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800913c:	687b      	ldr	r3, [r7, #4]
 800913e:	681b      	ldr	r3, [r3, #0]
 8009140:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009142:	697b      	ldr	r3, [r7, #20]
 8009144:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8009146:	683a      	ldr	r2, [r7, #0]
 8009148:	4613      	mov	r3, r2
 800914a:	00db      	lsls	r3, r3, #3
 800914c:	1a9b      	subs	r3, r3, r2
 800914e:	009b      	lsls	r3, r3, #2
 8009150:	3338      	adds	r3, #56	; 0x38
 8009152:	687a      	ldr	r2, [r7, #4]
 8009154:	4413      	add	r3, r2
 8009156:	3304      	adds	r3, #4
 8009158:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 800915a:	68fb      	ldr	r3, [r7, #12]
 800915c:	699a      	ldr	r2, [r3, #24]
 800915e:	68fb      	ldr	r3, [r7, #12]
 8009160:	695b      	ldr	r3, [r3, #20]
 8009162:	429a      	cmp	r2, r3
 8009164:	d901      	bls.n	800916a <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8009166:	2301      	movs	r3, #1
 8009168:	e06c      	b.n	8009244 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 800916a:	68fb      	ldr	r3, [r7, #12]
 800916c:	695a      	ldr	r2, [r3, #20]
 800916e:	68fb      	ldr	r3, [r7, #12]
 8009170:	699b      	ldr	r3, [r3, #24]
 8009172:	1ad3      	subs	r3, r2, r3
 8009174:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8009176:	68fb      	ldr	r3, [r7, #12]
 8009178:	689b      	ldr	r3, [r3, #8]
 800917a:	69fa      	ldr	r2, [r7, #28]
 800917c:	429a      	cmp	r2, r3
 800917e:	d902      	bls.n	8009186 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8009180:	68fb      	ldr	r3, [r7, #12]
 8009182:	689b      	ldr	r3, [r3, #8]
 8009184:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8009186:	69fb      	ldr	r3, [r7, #28]
 8009188:	3303      	adds	r3, #3
 800918a:	089b      	lsrs	r3, r3, #2
 800918c:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800918e:	e02b      	b.n	80091e8 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8009190:	68fb      	ldr	r3, [r7, #12]
 8009192:	695a      	ldr	r2, [r3, #20]
 8009194:	68fb      	ldr	r3, [r7, #12]
 8009196:	699b      	ldr	r3, [r3, #24]
 8009198:	1ad3      	subs	r3, r2, r3
 800919a:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 800919c:	68fb      	ldr	r3, [r7, #12]
 800919e:	689b      	ldr	r3, [r3, #8]
 80091a0:	69fa      	ldr	r2, [r7, #28]
 80091a2:	429a      	cmp	r2, r3
 80091a4:	d902      	bls.n	80091ac <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 80091a6:	68fb      	ldr	r3, [r7, #12]
 80091a8:	689b      	ldr	r3, [r3, #8]
 80091aa:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 80091ac:	69fb      	ldr	r3, [r7, #28]
 80091ae:	3303      	adds	r3, #3
 80091b0:	089b      	lsrs	r3, r3, #2
 80091b2:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80091b4:	68fb      	ldr	r3, [r7, #12]
 80091b6:	68d9      	ldr	r1, [r3, #12]
 80091b8:	683b      	ldr	r3, [r7, #0]
 80091ba:	b2da      	uxtb	r2, r3
 80091bc:	69fb      	ldr	r3, [r7, #28]
 80091be:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 80091c0:	687b      	ldr	r3, [r7, #4]
 80091c2:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80091c4:	b2db      	uxtb	r3, r3
 80091c6:	9300      	str	r3, [sp, #0]
 80091c8:	4603      	mov	r3, r0
 80091ca:	6978      	ldr	r0, [r7, #20]
 80091cc:	f009 fdaa 	bl	8012d24 <USB_WritePacket>

    ep->xfer_buff  += len;
 80091d0:	68fb      	ldr	r3, [r7, #12]
 80091d2:	68da      	ldr	r2, [r3, #12]
 80091d4:	69fb      	ldr	r3, [r7, #28]
 80091d6:	441a      	add	r2, r3
 80091d8:	68fb      	ldr	r3, [r7, #12]
 80091da:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 80091dc:	68fb      	ldr	r3, [r7, #12]
 80091de:	699a      	ldr	r2, [r3, #24]
 80091e0:	69fb      	ldr	r3, [r7, #28]
 80091e2:	441a      	add	r2, r3
 80091e4:	68fb      	ldr	r3, [r7, #12]
 80091e6:	619a      	str	r2, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80091e8:	683b      	ldr	r3, [r7, #0]
 80091ea:	015a      	lsls	r2, r3, #5
 80091ec:	693b      	ldr	r3, [r7, #16]
 80091ee:	4413      	add	r3, r2
 80091f0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80091f4:	699b      	ldr	r3, [r3, #24]
 80091f6:	b29b      	uxth	r3, r3
 80091f8:	69ba      	ldr	r2, [r7, #24]
 80091fa:	429a      	cmp	r2, r3
 80091fc:	d809      	bhi.n	8009212 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80091fe:	68fb      	ldr	r3, [r7, #12]
 8009200:	699a      	ldr	r2, [r3, #24]
 8009202:	68fb      	ldr	r3, [r7, #12]
 8009204:	695b      	ldr	r3, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8009206:	429a      	cmp	r2, r3
 8009208:	d203      	bcs.n	8009212 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800920a:	68fb      	ldr	r3, [r7, #12]
 800920c:	695b      	ldr	r3, [r3, #20]
 800920e:	2b00      	cmp	r3, #0
 8009210:	d1be      	bne.n	8009190 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8009212:	68fb      	ldr	r3, [r7, #12]
 8009214:	695a      	ldr	r2, [r3, #20]
 8009216:	68fb      	ldr	r3, [r7, #12]
 8009218:	699b      	ldr	r3, [r3, #24]
 800921a:	429a      	cmp	r2, r3
 800921c:	d811      	bhi.n	8009242 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800921e:	683b      	ldr	r3, [r7, #0]
 8009220:	f003 030f 	and.w	r3, r3, #15
 8009224:	2201      	movs	r2, #1
 8009226:	fa02 f303 	lsl.w	r3, r2, r3
 800922a:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800922c:	693b      	ldr	r3, [r7, #16]
 800922e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009232:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009234:	68bb      	ldr	r3, [r7, #8]
 8009236:	43db      	mvns	r3, r3
 8009238:	6939      	ldr	r1, [r7, #16]
 800923a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800923e:	4013      	ands	r3, r2
 8009240:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8009242:	2300      	movs	r3, #0
}
 8009244:	4618      	mov	r0, r3
 8009246:	3720      	adds	r7, #32
 8009248:	46bd      	mov	sp, r7
 800924a:	bd80      	pop	{r7, pc}

0800924c <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800924c:	b580      	push	{r7, lr}
 800924e:	b086      	sub	sp, #24
 8009250:	af00      	add	r7, sp, #0
 8009252:	6078      	str	r0, [r7, #4]
 8009254:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8009256:	687b      	ldr	r3, [r7, #4]
 8009258:	681b      	ldr	r3, [r3, #0]
 800925a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800925c:	697b      	ldr	r3, [r7, #20]
 800925e:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8009260:	697b      	ldr	r3, [r7, #20]
 8009262:	333c      	adds	r3, #60	; 0x3c
 8009264:	3304      	adds	r3, #4
 8009266:	681b      	ldr	r3, [r3, #0]
 8009268:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800926a:	683b      	ldr	r3, [r7, #0]
 800926c:	015a      	lsls	r2, r3, #5
 800926e:	693b      	ldr	r3, [r7, #16]
 8009270:	4413      	add	r3, r2
 8009272:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009276:	689b      	ldr	r3, [r3, #8]
 8009278:	60bb      	str	r3, [r7, #8]

  if (hpcd->Init.dma_enable == 1U)
 800927a:	687b      	ldr	r3, [r7, #4]
 800927c:	691b      	ldr	r3, [r3, #16]
 800927e:	2b01      	cmp	r3, #1
 8009280:	f040 80a0 	bne.w	80093c4 <PCD_EP_OutXfrComplete_int+0x178>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8009284:	68bb      	ldr	r3, [r7, #8]
 8009286:	f003 0308 	and.w	r3, r3, #8
 800928a:	2b00      	cmp	r3, #0
 800928c:	d015      	beq.n	80092ba <PCD_EP_OutXfrComplete_int+0x6e>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800928e:	68fb      	ldr	r3, [r7, #12]
 8009290:	4a72      	ldr	r2, [pc, #456]	; (800945c <PCD_EP_OutXfrComplete_int+0x210>)
 8009292:	4293      	cmp	r3, r2
 8009294:	f240 80dd 	bls.w	8009452 <PCD_EP_OutXfrComplete_int+0x206>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8009298:	68bb      	ldr	r3, [r7, #8]
 800929a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800929e:	2b00      	cmp	r3, #0
 80092a0:	f000 80d7 	beq.w	8009452 <PCD_EP_OutXfrComplete_int+0x206>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80092a4:	683b      	ldr	r3, [r7, #0]
 80092a6:	015a      	lsls	r2, r3, #5
 80092a8:	693b      	ldr	r3, [r7, #16]
 80092aa:	4413      	add	r3, r2
 80092ac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80092b0:	461a      	mov	r2, r3
 80092b2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80092b6:	6093      	str	r3, [r2, #8]
 80092b8:	e0cb      	b.n	8009452 <PCD_EP_OutXfrComplete_int+0x206>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 80092ba:	68bb      	ldr	r3, [r7, #8]
 80092bc:	f003 0320 	and.w	r3, r3, #32
 80092c0:	2b00      	cmp	r3, #0
 80092c2:	d009      	beq.n	80092d8 <PCD_EP_OutXfrComplete_int+0x8c>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80092c4:	683b      	ldr	r3, [r7, #0]
 80092c6:	015a      	lsls	r2, r3, #5
 80092c8:	693b      	ldr	r3, [r7, #16]
 80092ca:	4413      	add	r3, r2
 80092cc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80092d0:	461a      	mov	r2, r3
 80092d2:	2320      	movs	r3, #32
 80092d4:	6093      	str	r3, [r2, #8]
 80092d6:	e0bc      	b.n	8009452 <PCD_EP_OutXfrComplete_int+0x206>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 80092d8:	68bb      	ldr	r3, [r7, #8]
 80092da:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80092de:	2b00      	cmp	r3, #0
 80092e0:	f040 80b7 	bne.w	8009452 <PCD_EP_OutXfrComplete_int+0x206>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80092e4:	68fb      	ldr	r3, [r7, #12]
 80092e6:	4a5d      	ldr	r2, [pc, #372]	; (800945c <PCD_EP_OutXfrComplete_int+0x210>)
 80092e8:	4293      	cmp	r3, r2
 80092ea:	d90f      	bls.n	800930c <PCD_EP_OutXfrComplete_int+0xc0>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80092ec:	68bb      	ldr	r3, [r7, #8]
 80092ee:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80092f2:	2b00      	cmp	r3, #0
 80092f4:	d00a      	beq.n	800930c <PCD_EP_OutXfrComplete_int+0xc0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80092f6:	683b      	ldr	r3, [r7, #0]
 80092f8:	015a      	lsls	r2, r3, #5
 80092fa:	693b      	ldr	r3, [r7, #16]
 80092fc:	4413      	add	r3, r2
 80092fe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009302:	461a      	mov	r2, r3
 8009304:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009308:	6093      	str	r3, [r2, #8]
 800930a:	e0a2      	b.n	8009452 <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        /* out data packet received over EP0 */
        hpcd->OUT_ep[epnum].xfer_count =
          hpcd->OUT_ep[epnum].maxpacket -
 800930c:	6879      	ldr	r1, [r7, #4]
 800930e:	683a      	ldr	r2, [r7, #0]
 8009310:	4613      	mov	r3, r2
 8009312:	00db      	lsls	r3, r3, #3
 8009314:	1a9b      	subs	r3, r3, r2
 8009316:	009b      	lsls	r3, r3, #2
 8009318:	440b      	add	r3, r1
 800931a:	f503 7301 	add.w	r3, r3, #516	; 0x204
 800931e:	681a      	ldr	r2, [r3, #0]
          (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8009320:	683b      	ldr	r3, [r7, #0]
 8009322:	0159      	lsls	r1, r3, #5
 8009324:	693b      	ldr	r3, [r7, #16]
 8009326:	440b      	add	r3, r1
 8009328:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800932c:	691b      	ldr	r3, [r3, #16]
 800932e:	f3c3 0312 	ubfx	r3, r3, #0, #19
          hpcd->OUT_ep[epnum].maxpacket -
 8009332:	1ad1      	subs	r1, r2, r3
        hpcd->OUT_ep[epnum].xfer_count =
 8009334:	6878      	ldr	r0, [r7, #4]
 8009336:	683a      	ldr	r2, [r7, #0]
 8009338:	4613      	mov	r3, r2
 800933a:	00db      	lsls	r3, r3, #3
 800933c:	1a9b      	subs	r3, r3, r2
 800933e:	009b      	lsls	r3, r3, #2
 8009340:	4403      	add	r3, r0
 8009342:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8009346:	6019      	str	r1, [r3, #0]

        hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;
 8009348:	6879      	ldr	r1, [r7, #4]
 800934a:	683a      	ldr	r2, [r7, #0]
 800934c:	4613      	mov	r3, r2
 800934e:	00db      	lsls	r3, r3, #3
 8009350:	1a9b      	subs	r3, r3, r2
 8009352:	009b      	lsls	r3, r3, #2
 8009354:	440b      	add	r3, r1
 8009356:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800935a:	6819      	ldr	r1, [r3, #0]
 800935c:	6878      	ldr	r0, [r7, #4]
 800935e:	683a      	ldr	r2, [r7, #0]
 8009360:	4613      	mov	r3, r2
 8009362:	00db      	lsls	r3, r3, #3
 8009364:	1a9b      	subs	r3, r3, r2
 8009366:	009b      	lsls	r3, r3, #2
 8009368:	4403      	add	r3, r0
 800936a:	f503 7301 	add.w	r3, r3, #516	; 0x204
 800936e:	681b      	ldr	r3, [r3, #0]
 8009370:	4419      	add	r1, r3
 8009372:	6878      	ldr	r0, [r7, #4]
 8009374:	683a      	ldr	r2, [r7, #0]
 8009376:	4613      	mov	r3, r2
 8009378:	00db      	lsls	r3, r3, #3
 800937a:	1a9b      	subs	r3, r3, r2
 800937c:	009b      	lsls	r3, r3, #2
 800937e:	4403      	add	r3, r0
 8009380:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8009384:	6019      	str	r1, [r3, #0]

        if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8009386:	683b      	ldr	r3, [r7, #0]
 8009388:	2b00      	cmp	r3, #0
 800938a:	d114      	bne.n	80093b6 <PCD_EP_OutXfrComplete_int+0x16a>
 800938c:	6879      	ldr	r1, [r7, #4]
 800938e:	683a      	ldr	r2, [r7, #0]
 8009390:	4613      	mov	r3, r2
 8009392:	00db      	lsls	r3, r3, #3
 8009394:	1a9b      	subs	r3, r3, r2
 8009396:	009b      	lsls	r3, r3, #2
 8009398:	440b      	add	r3, r1
 800939a:	f503 7304 	add.w	r3, r3, #528	; 0x210
 800939e:	681b      	ldr	r3, [r3, #0]
 80093a0:	2b00      	cmp	r3, #0
 80093a2:	d108      	bne.n	80093b6 <PCD_EP_OutXfrComplete_int+0x16a>
        {
          /* this is ZLP, so prepare EP0 for next setup */
          (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80093a4:	687b      	ldr	r3, [r7, #4]
 80093a6:	6818      	ldr	r0, [r3, #0]
 80093a8:	687b      	ldr	r3, [r7, #4]
 80093aa:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80093ae:	461a      	mov	r2, r3
 80093b0:	2101      	movs	r1, #1
 80093b2:	f009 ff05 	bl	80131c0 <USB_EP0_OutStart>
        }
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80093b6:	683b      	ldr	r3, [r7, #0]
 80093b8:	b2db      	uxtb	r3, r3
 80093ba:	4619      	mov	r1, r3
 80093bc:	6878      	ldr	r0, [r7, #4]
 80093be:	f00f fdd7 	bl	8018f70 <HAL_PCD_DataOutStageCallback>
 80093c2:	e046      	b.n	8009452 <PCD_EP_OutXfrComplete_int+0x206>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 80093c4:	68fb      	ldr	r3, [r7, #12]
 80093c6:	4a26      	ldr	r2, [pc, #152]	; (8009460 <PCD_EP_OutXfrComplete_int+0x214>)
 80093c8:	4293      	cmp	r3, r2
 80093ca:	d124      	bne.n	8009416 <PCD_EP_OutXfrComplete_int+0x1ca>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 80093cc:	68bb      	ldr	r3, [r7, #8]
 80093ce:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80093d2:	2b00      	cmp	r3, #0
 80093d4:	d00a      	beq.n	80093ec <PCD_EP_OutXfrComplete_int+0x1a0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80093d6:	683b      	ldr	r3, [r7, #0]
 80093d8:	015a      	lsls	r2, r3, #5
 80093da:	693b      	ldr	r3, [r7, #16]
 80093dc:	4413      	add	r3, r2
 80093de:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80093e2:	461a      	mov	r2, r3
 80093e4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80093e8:	6093      	str	r3, [r2, #8]
 80093ea:	e032      	b.n	8009452 <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80093ec:	68bb      	ldr	r3, [r7, #8]
 80093ee:	f003 0320 	and.w	r3, r3, #32
 80093f2:	2b00      	cmp	r3, #0
 80093f4:	d008      	beq.n	8009408 <PCD_EP_OutXfrComplete_int+0x1bc>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80093f6:	683b      	ldr	r3, [r7, #0]
 80093f8:	015a      	lsls	r2, r3, #5
 80093fa:	693b      	ldr	r3, [r7, #16]
 80093fc:	4413      	add	r3, r2
 80093fe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009402:	461a      	mov	r2, r3
 8009404:	2320      	movs	r3, #32
 8009406:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8009408:	683b      	ldr	r3, [r7, #0]
 800940a:	b2db      	uxtb	r3, r3
 800940c:	4619      	mov	r1, r3
 800940e:	6878      	ldr	r0, [r7, #4]
 8009410:	f00f fdae 	bl	8018f70 <HAL_PCD_DataOutStageCallback>
 8009414:	e01d      	b.n	8009452 <PCD_EP_OutXfrComplete_int+0x206>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8009416:	683b      	ldr	r3, [r7, #0]
 8009418:	2b00      	cmp	r3, #0
 800941a:	d114      	bne.n	8009446 <PCD_EP_OutXfrComplete_int+0x1fa>
 800941c:	6879      	ldr	r1, [r7, #4]
 800941e:	683a      	ldr	r2, [r7, #0]
 8009420:	4613      	mov	r3, r2
 8009422:	00db      	lsls	r3, r3, #3
 8009424:	1a9b      	subs	r3, r3, r2
 8009426:	009b      	lsls	r3, r3, #2
 8009428:	440b      	add	r3, r1
 800942a:	f503 7304 	add.w	r3, r3, #528	; 0x210
 800942e:	681b      	ldr	r3, [r3, #0]
 8009430:	2b00      	cmp	r3, #0
 8009432:	d108      	bne.n	8009446 <PCD_EP_OutXfrComplete_int+0x1fa>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8009434:	687b      	ldr	r3, [r7, #4]
 8009436:	6818      	ldr	r0, [r3, #0]
 8009438:	687b      	ldr	r3, [r7, #4]
 800943a:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800943e:	461a      	mov	r2, r3
 8009440:	2100      	movs	r1, #0
 8009442:	f009 febd 	bl	80131c0 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8009446:	683b      	ldr	r3, [r7, #0]
 8009448:	b2db      	uxtb	r3, r3
 800944a:	4619      	mov	r1, r3
 800944c:	6878      	ldr	r0, [r7, #4]
 800944e:	f00f fd8f 	bl	8018f70 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8009452:	2300      	movs	r3, #0
}
 8009454:	4618      	mov	r0, r3
 8009456:	3718      	adds	r7, #24
 8009458:	46bd      	mov	sp, r7
 800945a:	bd80      	pop	{r7, pc}
 800945c:	4f54300a 	.word	0x4f54300a
 8009460:	4f54310a 	.word	0x4f54310a

08009464 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8009464:	b580      	push	{r7, lr}
 8009466:	b086      	sub	sp, #24
 8009468:	af00      	add	r7, sp, #0
 800946a:	6078      	str	r0, [r7, #4]
 800946c:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800946e:	687b      	ldr	r3, [r7, #4]
 8009470:	681b      	ldr	r3, [r3, #0]
 8009472:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009474:	697b      	ldr	r3, [r7, #20]
 8009476:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8009478:	697b      	ldr	r3, [r7, #20]
 800947a:	333c      	adds	r3, #60	; 0x3c
 800947c:	3304      	adds	r3, #4
 800947e:	681b      	ldr	r3, [r3, #0]
 8009480:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8009482:	683b      	ldr	r3, [r7, #0]
 8009484:	015a      	lsls	r2, r3, #5
 8009486:	693b      	ldr	r3, [r7, #16]
 8009488:	4413      	add	r3, r2
 800948a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800948e:	689b      	ldr	r3, [r3, #8]
 8009490:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8009492:	68fb      	ldr	r3, [r7, #12]
 8009494:	4a15      	ldr	r2, [pc, #84]	; (80094ec <PCD_EP_OutSetupPacket_int+0x88>)
 8009496:	4293      	cmp	r3, r2
 8009498:	d90e      	bls.n	80094b8 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800949a:	68bb      	ldr	r3, [r7, #8]
 800949c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80094a0:	2b00      	cmp	r3, #0
 80094a2:	d009      	beq.n	80094b8 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80094a4:	683b      	ldr	r3, [r7, #0]
 80094a6:	015a      	lsls	r2, r3, #5
 80094a8:	693b      	ldr	r3, [r7, #16]
 80094aa:	4413      	add	r3, r2
 80094ac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80094b0:	461a      	mov	r2, r3
 80094b2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80094b6:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 80094b8:	6878      	ldr	r0, [r7, #4]
 80094ba:	f00f fd47 	bl	8018f4c <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 80094be:	68fb      	ldr	r3, [r7, #12]
 80094c0:	4a0a      	ldr	r2, [pc, #40]	; (80094ec <PCD_EP_OutSetupPacket_int+0x88>)
 80094c2:	4293      	cmp	r3, r2
 80094c4:	d90c      	bls.n	80094e0 <PCD_EP_OutSetupPacket_int+0x7c>
 80094c6:	687b      	ldr	r3, [r7, #4]
 80094c8:	691b      	ldr	r3, [r3, #16]
 80094ca:	2b01      	cmp	r3, #1
 80094cc:	d108      	bne.n	80094e0 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80094ce:	687b      	ldr	r3, [r7, #4]
 80094d0:	6818      	ldr	r0, [r3, #0]
 80094d2:	687b      	ldr	r3, [r7, #4]
 80094d4:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80094d8:	461a      	mov	r2, r3
 80094da:	2101      	movs	r1, #1
 80094dc:	f009 fe70 	bl	80131c0 <USB_EP0_OutStart>
  }

  return HAL_OK;
 80094e0:	2300      	movs	r3, #0
}
 80094e2:	4618      	mov	r0, r3
 80094e4:	3718      	adds	r7, #24
 80094e6:	46bd      	mov	sp, r7
 80094e8:	bd80      	pop	{r7, pc}
 80094ea:	bf00      	nop
 80094ec:	4f54300a 	.word	0x4f54300a

080094f0 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 80094f0:	b480      	push	{r7}
 80094f2:	b085      	sub	sp, #20
 80094f4:	af00      	add	r7, sp, #0
 80094f6:	6078      	str	r0, [r7, #4]
 80094f8:	460b      	mov	r3, r1
 80094fa:	70fb      	strb	r3, [r7, #3]
 80094fc:	4613      	mov	r3, r2
 80094fe:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8009500:	687b      	ldr	r3, [r7, #4]
 8009502:	681b      	ldr	r3, [r3, #0]
 8009504:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009506:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8009508:	78fb      	ldrb	r3, [r7, #3]
 800950a:	2b00      	cmp	r3, #0
 800950c:	d107      	bne.n	800951e <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 800950e:	883b      	ldrh	r3, [r7, #0]
 8009510:	0419      	lsls	r1, r3, #16
 8009512:	687b      	ldr	r3, [r7, #4]
 8009514:	681b      	ldr	r3, [r3, #0]
 8009516:	68ba      	ldr	r2, [r7, #8]
 8009518:	430a      	orrs	r2, r1
 800951a:	629a      	str	r2, [r3, #40]	; 0x28
 800951c:	e028      	b.n	8009570 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 800951e:	687b      	ldr	r3, [r7, #4]
 8009520:	681b      	ldr	r3, [r3, #0]
 8009522:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009524:	0c1b      	lsrs	r3, r3, #16
 8009526:	68ba      	ldr	r2, [r7, #8]
 8009528:	4413      	add	r3, r2
 800952a:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 800952c:	2300      	movs	r3, #0
 800952e:	73fb      	strb	r3, [r7, #15]
 8009530:	e00d      	b.n	800954e <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8009532:	687b      	ldr	r3, [r7, #4]
 8009534:	681a      	ldr	r2, [r3, #0]
 8009536:	7bfb      	ldrb	r3, [r7, #15]
 8009538:	3340      	adds	r3, #64	; 0x40
 800953a:	009b      	lsls	r3, r3, #2
 800953c:	4413      	add	r3, r2
 800953e:	685b      	ldr	r3, [r3, #4]
 8009540:	0c1b      	lsrs	r3, r3, #16
 8009542:	68ba      	ldr	r2, [r7, #8]
 8009544:	4413      	add	r3, r2
 8009546:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8009548:	7bfb      	ldrb	r3, [r7, #15]
 800954a:	3301      	adds	r3, #1
 800954c:	73fb      	strb	r3, [r7, #15]
 800954e:	7bfa      	ldrb	r2, [r7, #15]
 8009550:	78fb      	ldrb	r3, [r7, #3]
 8009552:	3b01      	subs	r3, #1
 8009554:	429a      	cmp	r2, r3
 8009556:	d3ec      	bcc.n	8009532 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8009558:	883b      	ldrh	r3, [r7, #0]
 800955a:	0418      	lsls	r0, r3, #16
 800955c:	687b      	ldr	r3, [r7, #4]
 800955e:	6819      	ldr	r1, [r3, #0]
 8009560:	78fb      	ldrb	r3, [r7, #3]
 8009562:	3b01      	subs	r3, #1
 8009564:	68ba      	ldr	r2, [r7, #8]
 8009566:	4302      	orrs	r2, r0
 8009568:	3340      	adds	r3, #64	; 0x40
 800956a:	009b      	lsls	r3, r3, #2
 800956c:	440b      	add	r3, r1
 800956e:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8009570:	2300      	movs	r3, #0
}
 8009572:	4618      	mov	r0, r3
 8009574:	3714      	adds	r7, #20
 8009576:	46bd      	mov	sp, r7
 8009578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800957c:	4770      	bx	lr

0800957e <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 800957e:	b480      	push	{r7}
 8009580:	b083      	sub	sp, #12
 8009582:	af00      	add	r7, sp, #0
 8009584:	6078      	str	r0, [r7, #4]
 8009586:	460b      	mov	r3, r1
 8009588:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 800958a:	687b      	ldr	r3, [r7, #4]
 800958c:	681b      	ldr	r3, [r3, #0]
 800958e:	887a      	ldrh	r2, [r7, #2]
 8009590:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8009592:	2300      	movs	r3, #0
}
 8009594:	4618      	mov	r0, r3
 8009596:	370c      	adds	r7, #12
 8009598:	46bd      	mov	sp, r7
 800959a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800959e:	4770      	bx	lr

080095a0 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 80095a0:	b480      	push	{r7}
 80095a2:	b085      	sub	sp, #20
 80095a4:	af00      	add	r7, sp, #0
 80095a6:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80095a8:	687b      	ldr	r3, [r7, #4]
 80095aa:	681b      	ldr	r3, [r3, #0]
 80095ac:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 80095ae:	687b      	ldr	r3, [r7, #4]
 80095b0:	2201      	movs	r2, #1
 80095b2:	f8c3 23fc 	str.w	r2, [r3, #1020]	; 0x3fc
  hpcd->LPM_State = LPM_L0;
 80095b6:	687b      	ldr	r3, [r7, #4]
 80095b8:	2200      	movs	r2, #0
 80095ba:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 80095be:	68fb      	ldr	r3, [r7, #12]
 80095c0:	699b      	ldr	r3, [r3, #24]
 80095c2:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80095c6:	68fb      	ldr	r3, [r7, #12]
 80095c8:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 80095ca:	68fb      	ldr	r3, [r7, #12]
 80095cc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80095ce:	4b05      	ldr	r3, [pc, #20]	; (80095e4 <HAL_PCDEx_ActivateLPM+0x44>)
 80095d0:	4313      	orrs	r3, r2
 80095d2:	68fa      	ldr	r2, [r7, #12]
 80095d4:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 80095d6:	2300      	movs	r3, #0
}
 80095d8:	4618      	mov	r0, r3
 80095da:	3714      	adds	r7, #20
 80095dc:	46bd      	mov	sp, r7
 80095de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095e2:	4770      	bx	lr
 80095e4:	10000003 	.word	0x10000003

080095e8 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 80095e8:	b480      	push	{r7}
 80095ea:	b083      	sub	sp, #12
 80095ec:	af00      	add	r7, sp, #0
 80095ee:	6078      	str	r0, [r7, #4]
 80095f0:	460b      	mov	r3, r1
 80095f2:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 80095f4:	bf00      	nop
 80095f6:	370c      	adds	r7, #12
 80095f8:	46bd      	mov	sp, r7
 80095fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095fe:	4770      	bx	lr

08009600 <HAL_PWR_EnableBkUpAccess>:
  * @note   If the HSE divided by 2, 3, ..31 is used as the RTC clock, the
  *         Backup Domain Access should be kept enabled.
  * @retval None.
  */
void HAL_PWR_EnableBkUpAccess (void)
{
 8009600:	b480      	push	{r7}
 8009602:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT (PWR->CR1, PWR_CR1_DBP);
 8009604:	4b05      	ldr	r3, [pc, #20]	; (800961c <HAL_PWR_EnableBkUpAccess+0x1c>)
 8009606:	681b      	ldr	r3, [r3, #0]
 8009608:	4a04      	ldr	r2, [pc, #16]	; (800961c <HAL_PWR_EnableBkUpAccess+0x1c>)
 800960a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800960e:	6013      	str	r3, [r2, #0]
}
 8009610:	bf00      	nop
 8009612:	46bd      	mov	sp, r7
 8009614:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009618:	4770      	bx	lr
 800961a:	bf00      	nop
 800961c:	58024800 	.word	0x58024800

08009620 <HAL_PWR_ConfigPVD>:
  *         driver. All combination are allowed: wake up only Cortex-M7, wake up
  *         only Cortex-M4 or wake up Cortex-M7 and Cortex-M4.
  * @retval None.
  */
void HAL_PWR_ConfigPVD (PWR_PVDTypeDef *sConfigPVD)
{
 8009620:	b480      	push	{r7}
 8009622:	b083      	sub	sp, #12
 8009624:	af00      	add	r7, sp, #0
 8009626:	6078      	str	r0, [r7, #4]
  /* Check the PVD configuration parameter */
  if (sConfigPVD == NULL)
 8009628:	687b      	ldr	r3, [r7, #4]
 800962a:	2b00      	cmp	r3, #0
 800962c:	d069      	beq.n	8009702 <HAL_PWR_ConfigPVD+0xe2>
  /* Check the parameters */
  assert_param (IS_PWR_PVD_LEVEL (sConfigPVD->PVDLevel));
  assert_param (IS_PWR_PVD_MODE (sConfigPVD->Mode));

  /* Set PLS[7:5] bits according to PVDLevel value */
  MODIFY_REG (PWR->CR1, PWR_CR1_PLS, sConfigPVD->PVDLevel);
 800962e:	4b38      	ldr	r3, [pc, #224]	; (8009710 <HAL_PWR_ConfigPVD+0xf0>)
 8009630:	681b      	ldr	r3, [r3, #0]
 8009632:	f023 02e0 	bic.w	r2, r3, #224	; 0xe0
 8009636:	687b      	ldr	r3, [r7, #4]
 8009638:	681b      	ldr	r3, [r3, #0]
 800963a:	4935      	ldr	r1, [pc, #212]	; (8009710 <HAL_PWR_ConfigPVD+0xf0>)
 800963c:	4313      	orrs	r3, r2
 800963e:	600b      	str	r3, [r1, #0]

  /* Clear previous config */
#if !defined (DUAL_CORE)
  __HAL_PWR_PVD_EXTI_DISABLE_EVENT ();
 8009640:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8009644:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009648:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800964c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8009650:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
  __HAL_PWR_PVD_EXTI_DISABLE_IT ();
 8009654:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8009658:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800965c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8009660:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8009664:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
#endif /* !defined (DUAL_CORE) */

  __HAL_PWR_PVD_EXTI_DISABLE_RISING_EDGE ();
 8009668:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800966c:	681b      	ldr	r3, [r3, #0]
 800966e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8009672:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8009676:	6013      	str	r3, [r2, #0]
  __HAL_PWR_PVD_EXTI_DISABLE_FALLING_EDGE ();
 8009678:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800967c:	685b      	ldr	r3, [r3, #4]
 800967e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8009682:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8009686:	6053      	str	r3, [r2, #4]

#if !defined (DUAL_CORE)
  /* Interrupt mode configuration */
  if ((sConfigPVD->Mode & PVD_MODE_IT) == PVD_MODE_IT)
 8009688:	687b      	ldr	r3, [r7, #4]
 800968a:	685b      	ldr	r3, [r3, #4]
 800968c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8009690:	2b00      	cmp	r3, #0
 8009692:	d009      	beq.n	80096a8 <HAL_PWR_ConfigPVD+0x88>
  {
    __HAL_PWR_PVD_EXTI_ENABLE_IT ();
 8009694:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8009698:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800969c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80096a0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80096a4:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
  }

  /* Event mode configuration */
  if ((sConfigPVD->Mode & PVD_MODE_EVT) == PVD_MODE_EVT)
 80096a8:	687b      	ldr	r3, [r7, #4]
 80096aa:	685b      	ldr	r3, [r3, #4]
 80096ac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80096b0:	2b00      	cmp	r3, #0
 80096b2:	d009      	beq.n	80096c8 <HAL_PWR_ConfigPVD+0xa8>
  {
    __HAL_PWR_PVD_EXTI_ENABLE_EVENT ();
 80096b4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80096b8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80096bc:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80096c0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80096c4:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
  }
#endif /* !defined (DUAL_CORE) */

  /* Rising edge configuration */
  if ((sConfigPVD->Mode & PVD_RISING_EDGE) == PVD_RISING_EDGE)
 80096c8:	687b      	ldr	r3, [r7, #4]
 80096ca:	685b      	ldr	r3, [r3, #4]
 80096cc:	f003 0301 	and.w	r3, r3, #1
 80096d0:	2b00      	cmp	r3, #0
 80096d2:	d007      	beq.n	80096e4 <HAL_PWR_ConfigPVD+0xc4>
  {
    __HAL_PWR_PVD_EXTI_ENABLE_RISING_EDGE ();
 80096d4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80096d8:	681b      	ldr	r3, [r3, #0]
 80096da:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80096de:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80096e2:	6013      	str	r3, [r2, #0]
  }

  /* Falling edge configuration */
  if ((sConfigPVD->Mode & PVD_FALLING_EDGE) == PVD_FALLING_EDGE)
 80096e4:	687b      	ldr	r3, [r7, #4]
 80096e6:	685b      	ldr	r3, [r3, #4]
 80096e8:	f003 0302 	and.w	r3, r3, #2
 80096ec:	2b00      	cmp	r3, #0
 80096ee:	d009      	beq.n	8009704 <HAL_PWR_ConfigPVD+0xe4>
  {
    __HAL_PWR_PVD_EXTI_ENABLE_FALLING_EDGE ();
 80096f0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80096f4:	685b      	ldr	r3, [r3, #4]
 80096f6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80096fa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80096fe:	6053      	str	r3, [r2, #4]
 8009700:	e000      	b.n	8009704 <HAL_PWR_ConfigPVD+0xe4>
    return;
 8009702:	bf00      	nop
  }
}
 8009704:	370c      	adds	r7, #12
 8009706:	46bd      	mov	sp, r7
 8009708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800970c:	4770      	bx	lr
 800970e:	bf00      	nop
 8009710:	58024800 	.word	0x58024800

08009714 <HAL_PWR_EnablePVD>:
/**
  * @brief Enable the Programmable Voltage Detector (PVD).
  * @retval None.
  */
void HAL_PWR_EnablePVD (void)
{
 8009714:	b480      	push	{r7}
 8009716:	af00      	add	r7, sp, #0
  /* Enable the power voltage detector */
  SET_BIT (PWR->CR1, PWR_CR1_PVDEN);
 8009718:	4b05      	ldr	r3, [pc, #20]	; (8009730 <HAL_PWR_EnablePVD+0x1c>)
 800971a:	681b      	ldr	r3, [r3, #0]
 800971c:	4a04      	ldr	r2, [pc, #16]	; (8009730 <HAL_PWR_EnablePVD+0x1c>)
 800971e:	f043 0310 	orr.w	r3, r3, #16
 8009722:	6013      	str	r3, [r2, #0]
}
 8009724:	bf00      	nop
 8009726:	46bd      	mov	sp, r7
 8009728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800972c:	4770      	bx	lr
 800972e:	bf00      	nop
 8009730:	58024800 	.word	0x58024800

08009734 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8009734:	b580      	push	{r7, lr}
 8009736:	b084      	sub	sp, #16
 8009738:	af00      	add	r7, sp, #0
 800973a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 800973c:	4b19      	ldr	r3, [pc, #100]	; (80097a4 <HAL_PWREx_ConfigSupply+0x70>)
 800973e:	68db      	ldr	r3, [r3, #12]
 8009740:	f003 0304 	and.w	r3, r3, #4
 8009744:	2b04      	cmp	r3, #4
 8009746:	d00a      	beq.n	800975e <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8009748:	4b16      	ldr	r3, [pc, #88]	; (80097a4 <HAL_PWREx_ConfigSupply+0x70>)
 800974a:	68db      	ldr	r3, [r3, #12]
 800974c:	f003 0307 	and.w	r3, r3, #7
 8009750:	687a      	ldr	r2, [r7, #4]
 8009752:	429a      	cmp	r2, r3
 8009754:	d001      	beq.n	800975a <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8009756:	2301      	movs	r3, #1
 8009758:	e01f      	b.n	800979a <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 800975a:	2300      	movs	r3, #0
 800975c:	e01d      	b.n	800979a <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 800975e:	4b11      	ldr	r3, [pc, #68]	; (80097a4 <HAL_PWREx_ConfigSupply+0x70>)
 8009760:	68db      	ldr	r3, [r3, #12]
 8009762:	f023 0207 	bic.w	r2, r3, #7
 8009766:	490f      	ldr	r1, [pc, #60]	; (80097a4 <HAL_PWREx_ConfigSupply+0x70>)
 8009768:	687b      	ldr	r3, [r7, #4]
 800976a:	4313      	orrs	r3, r2
 800976c:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 800976e:	f7fa ffa7 	bl	80046c0 <HAL_GetTick>
 8009772:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8009774:	e009      	b.n	800978a <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8009776:	f7fa ffa3 	bl	80046c0 <HAL_GetTick>
 800977a:	4602      	mov	r2, r0
 800977c:	68fb      	ldr	r3, [r7, #12]
 800977e:	1ad3      	subs	r3, r2, r3
 8009780:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8009784:	d901      	bls.n	800978a <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8009786:	2301      	movs	r3, #1
 8009788:	e007      	b.n	800979a <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800978a:	4b06      	ldr	r3, [pc, #24]	; (80097a4 <HAL_PWREx_ConfigSupply+0x70>)
 800978c:	685b      	ldr	r3, [r3, #4]
 800978e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8009792:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009796:	d1ee      	bne.n	8009776 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8009798:	2300      	movs	r3, #0
}
 800979a:	4618      	mov	r0, r3
 800979c:	3710      	adds	r7, #16
 800979e:	46bd      	mov	sp, r7
 80097a0:	bd80      	pop	{r7, pc}
 80097a2:	bf00      	nop
 80097a4:	58024800 	.word	0x58024800

080097a8 <HAL_PWREx_EnableUSBVoltageDetector>:
/**
  * @brief Enable the USB voltage level detector.
  * @retval None.
  */
void HAL_PWREx_EnableUSBVoltageDetector (void)
{
 80097a8:	b480      	push	{r7}
 80097aa:	af00      	add	r7, sp, #0
  /* Enable the USB voltage detector */
  SET_BIT (PWR->CR3, PWR_CR3_USB33DEN);
 80097ac:	4b05      	ldr	r3, [pc, #20]	; (80097c4 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 80097ae:	68db      	ldr	r3, [r3, #12]
 80097b0:	4a04      	ldr	r2, [pc, #16]	; (80097c4 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 80097b2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80097b6:	60d3      	str	r3, [r2, #12]
}
 80097b8:	bf00      	nop
 80097ba:	46bd      	mov	sp, r7
 80097bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097c0:	4770      	bx	lr
 80097c2:	bf00      	nop
 80097c4:	58024800 	.word	0x58024800

080097c8 <HAL_PWREx_PVD_AVD_IRQHandler>:
  * @brief  This function handles the PWR PVD/AVD interrupt request.
  * @note   This API should be called under the PVD_AVD_IRQHandler().
  * @retval None
  */
void HAL_PWREx_PVD_AVD_IRQHandler (void)
{
 80097c8:	b580      	push	{r7, lr}
 80097ca:	af00      	add	r7, sp, #0
  /* Check if the Programmable Voltage Detector is enabled (PVD) */
  if (READ_BIT (PWR->CR1, PWR_CR1_PVDEN) != 0U)
 80097cc:	4b1b      	ldr	r3, [pc, #108]	; (800983c <HAL_PWREx_PVD_AVD_IRQHandler+0x74>)
 80097ce:	681b      	ldr	r3, [r3, #0]
 80097d0:	f003 0310 	and.w	r3, r3, #16
 80097d4:	2b00      	cmp	r3, #0
 80097d6:	d014      	beq.n	8009802 <HAL_PWREx_PVD_AVD_IRQHandler+0x3a>
#if defined (DUAL_CORE)
    if (HAL_GetCurrentCPUID () == CM7_CPUID)
#endif /* defined (DUAL_CORE) */
    {
      /* Check PWR D1/CD EXTI flag */
      if (__HAL_PWR_PVD_EXTI_GET_FLAG () != 0U)
 80097d8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80097dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80097e0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80097e4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80097e8:	d10b      	bne.n	8009802 <HAL_PWREx_PVD_AVD_IRQHandler+0x3a>
      {
        /* PWR PVD interrupt user callback */
        HAL_PWR_PVDCallback ();
 80097ea:	f7fa fa75 	bl	8003cd8 <HAL_PWR_PVDCallback>

        /* Clear PWR EXTI D1/CD pending bit */
        __HAL_PWR_PVD_EXTI_CLEAR_FLAG ();
 80097ee:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80097f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80097f6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80097fa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80097fe:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    }
#endif /* defined (DUAL_CORE) */
  }

  /* Check if the Analog Voltage Detector is enabled (AVD) */
  if (READ_BIT (PWR->CR1, PWR_CR1_AVDEN) != 0U)
 8009802:	4b0e      	ldr	r3, [pc, #56]	; (800983c <HAL_PWREx_PVD_AVD_IRQHandler+0x74>)
 8009804:	681b      	ldr	r3, [r3, #0]
 8009806:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800980a:	2b00      	cmp	r3, #0
 800980c:	d014      	beq.n	8009838 <HAL_PWREx_PVD_AVD_IRQHandler+0x70>
#if defined (DUAL_CORE)
    if (HAL_GetCurrentCPUID () == CM7_CPUID)
#endif /* defined (DUAL_CORE) */
    {
      /* Check PWR EXTI D1/CD flag */
      if (__HAL_PWR_AVD_EXTI_GET_FLAG () != 0U)
 800980e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8009812:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009816:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800981a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800981e:	d10b      	bne.n	8009838 <HAL_PWREx_PVD_AVD_IRQHandler+0x70>
      {
        /* PWR AVD interrupt user callback */
        HAL_PWREx_AVDCallback ();
 8009820:	f000 f80e 	bl	8009840 <HAL_PWREx_AVDCallback>

        /* Clear PWR EXTI D1/CD pending bit */
        __HAL_PWR_AVD_EXTI_CLEAR_FLAG ();
 8009824:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8009828:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800982c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8009830:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009834:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
        __HAL_PWR_AVD_EXTID2_CLEAR_FLAG ();
      }
    }
#endif /* defined (DUAL_CORE) */
  }
}
 8009838:	bf00      	nop
 800983a:	bd80      	pop	{r7, pc}
 800983c:	58024800 	.word	0x58024800

08009840 <HAL_PWREx_AVDCallback>:
/**
  * @brief PWR AVD interrupt callback.
  * @retval None.
  */
__weak void HAL_PWREx_AVDCallback (void)
{
 8009840:	b480      	push	{r7}
 8009842:	af00      	add	r7, sp, #0
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PWR_AVDCallback can be implemented in the user file
  */
}
 8009844:	bf00      	nop
 8009846:	46bd      	mov	sp, r7
 8009848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800984c:	4770      	bx	lr
	...

08009850 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8009850:	b580      	push	{r7, lr}
 8009852:	b08c      	sub	sp, #48	; 0x30
 8009854:	af00      	add	r7, sp, #0
 8009856:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8009858:	687b      	ldr	r3, [r7, #4]
 800985a:	2b00      	cmp	r3, #0
 800985c:	d101      	bne.n	8009862 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800985e:	2301      	movs	r3, #1
 8009860:	e3ff      	b.n	800a062 <HAL_RCC_OscConfig+0x812>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8009862:	687b      	ldr	r3, [r7, #4]
 8009864:	681b      	ldr	r3, [r3, #0]
 8009866:	f003 0301 	and.w	r3, r3, #1
 800986a:	2b00      	cmp	r3, #0
 800986c:	f000 8087 	beq.w	800997e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8009870:	4b99      	ldr	r3, [pc, #612]	; (8009ad8 <HAL_RCC_OscConfig+0x288>)
 8009872:	691b      	ldr	r3, [r3, #16]
 8009874:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8009878:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800987a:	4b97      	ldr	r3, [pc, #604]	; (8009ad8 <HAL_RCC_OscConfig+0x288>)
 800987c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800987e:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8009880:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009882:	2b10      	cmp	r3, #16
 8009884:	d007      	beq.n	8009896 <HAL_RCC_OscConfig+0x46>
 8009886:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009888:	2b18      	cmp	r3, #24
 800988a:	d110      	bne.n	80098ae <HAL_RCC_OscConfig+0x5e>
 800988c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800988e:	f003 0303 	and.w	r3, r3, #3
 8009892:	2b02      	cmp	r3, #2
 8009894:	d10b      	bne.n	80098ae <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8009896:	4b90      	ldr	r3, [pc, #576]	; (8009ad8 <HAL_RCC_OscConfig+0x288>)
 8009898:	681b      	ldr	r3, [r3, #0]
 800989a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800989e:	2b00      	cmp	r3, #0
 80098a0:	d06c      	beq.n	800997c <HAL_RCC_OscConfig+0x12c>
 80098a2:	687b      	ldr	r3, [r7, #4]
 80098a4:	685b      	ldr	r3, [r3, #4]
 80098a6:	2b00      	cmp	r3, #0
 80098a8:	d168      	bne.n	800997c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80098aa:	2301      	movs	r3, #1
 80098ac:	e3d9      	b.n	800a062 <HAL_RCC_OscConfig+0x812>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80098ae:	687b      	ldr	r3, [r7, #4]
 80098b0:	685b      	ldr	r3, [r3, #4]
 80098b2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80098b6:	d106      	bne.n	80098c6 <HAL_RCC_OscConfig+0x76>
 80098b8:	4b87      	ldr	r3, [pc, #540]	; (8009ad8 <HAL_RCC_OscConfig+0x288>)
 80098ba:	681b      	ldr	r3, [r3, #0]
 80098bc:	4a86      	ldr	r2, [pc, #536]	; (8009ad8 <HAL_RCC_OscConfig+0x288>)
 80098be:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80098c2:	6013      	str	r3, [r2, #0]
 80098c4:	e02e      	b.n	8009924 <HAL_RCC_OscConfig+0xd4>
 80098c6:	687b      	ldr	r3, [r7, #4]
 80098c8:	685b      	ldr	r3, [r3, #4]
 80098ca:	2b00      	cmp	r3, #0
 80098cc:	d10c      	bne.n	80098e8 <HAL_RCC_OscConfig+0x98>
 80098ce:	4b82      	ldr	r3, [pc, #520]	; (8009ad8 <HAL_RCC_OscConfig+0x288>)
 80098d0:	681b      	ldr	r3, [r3, #0]
 80098d2:	4a81      	ldr	r2, [pc, #516]	; (8009ad8 <HAL_RCC_OscConfig+0x288>)
 80098d4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80098d8:	6013      	str	r3, [r2, #0]
 80098da:	4b7f      	ldr	r3, [pc, #508]	; (8009ad8 <HAL_RCC_OscConfig+0x288>)
 80098dc:	681b      	ldr	r3, [r3, #0]
 80098de:	4a7e      	ldr	r2, [pc, #504]	; (8009ad8 <HAL_RCC_OscConfig+0x288>)
 80098e0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80098e4:	6013      	str	r3, [r2, #0]
 80098e6:	e01d      	b.n	8009924 <HAL_RCC_OscConfig+0xd4>
 80098e8:	687b      	ldr	r3, [r7, #4]
 80098ea:	685b      	ldr	r3, [r3, #4]
 80098ec:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80098f0:	d10c      	bne.n	800990c <HAL_RCC_OscConfig+0xbc>
 80098f2:	4b79      	ldr	r3, [pc, #484]	; (8009ad8 <HAL_RCC_OscConfig+0x288>)
 80098f4:	681b      	ldr	r3, [r3, #0]
 80098f6:	4a78      	ldr	r2, [pc, #480]	; (8009ad8 <HAL_RCC_OscConfig+0x288>)
 80098f8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80098fc:	6013      	str	r3, [r2, #0]
 80098fe:	4b76      	ldr	r3, [pc, #472]	; (8009ad8 <HAL_RCC_OscConfig+0x288>)
 8009900:	681b      	ldr	r3, [r3, #0]
 8009902:	4a75      	ldr	r2, [pc, #468]	; (8009ad8 <HAL_RCC_OscConfig+0x288>)
 8009904:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009908:	6013      	str	r3, [r2, #0]
 800990a:	e00b      	b.n	8009924 <HAL_RCC_OscConfig+0xd4>
 800990c:	4b72      	ldr	r3, [pc, #456]	; (8009ad8 <HAL_RCC_OscConfig+0x288>)
 800990e:	681b      	ldr	r3, [r3, #0]
 8009910:	4a71      	ldr	r2, [pc, #452]	; (8009ad8 <HAL_RCC_OscConfig+0x288>)
 8009912:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8009916:	6013      	str	r3, [r2, #0]
 8009918:	4b6f      	ldr	r3, [pc, #444]	; (8009ad8 <HAL_RCC_OscConfig+0x288>)
 800991a:	681b      	ldr	r3, [r3, #0]
 800991c:	4a6e      	ldr	r2, [pc, #440]	; (8009ad8 <HAL_RCC_OscConfig+0x288>)
 800991e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8009922:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8009924:	687b      	ldr	r3, [r7, #4]
 8009926:	685b      	ldr	r3, [r3, #4]
 8009928:	2b00      	cmp	r3, #0
 800992a:	d013      	beq.n	8009954 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800992c:	f7fa fec8 	bl	80046c0 <HAL_GetTick>
 8009930:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8009932:	e008      	b.n	8009946 <HAL_RCC_OscConfig+0xf6>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8009934:	f7fa fec4 	bl	80046c0 <HAL_GetTick>
 8009938:	4602      	mov	r2, r0
 800993a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800993c:	1ad3      	subs	r3, r2, r3
 800993e:	2b64      	cmp	r3, #100	; 0x64
 8009940:	d901      	bls.n	8009946 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8009942:	2303      	movs	r3, #3
 8009944:	e38d      	b.n	800a062 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8009946:	4b64      	ldr	r3, [pc, #400]	; (8009ad8 <HAL_RCC_OscConfig+0x288>)
 8009948:	681b      	ldr	r3, [r3, #0]
 800994a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800994e:	2b00      	cmp	r3, #0
 8009950:	d0f0      	beq.n	8009934 <HAL_RCC_OscConfig+0xe4>
 8009952:	e014      	b.n	800997e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009954:	f7fa feb4 	bl	80046c0 <HAL_GetTick>
 8009958:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800995a:	e008      	b.n	800996e <HAL_RCC_OscConfig+0x11e>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800995c:	f7fa feb0 	bl	80046c0 <HAL_GetTick>
 8009960:	4602      	mov	r2, r0
 8009962:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009964:	1ad3      	subs	r3, r2, r3
 8009966:	2b64      	cmp	r3, #100	; 0x64
 8009968:	d901      	bls.n	800996e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800996a:	2303      	movs	r3, #3
 800996c:	e379      	b.n	800a062 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800996e:	4b5a      	ldr	r3, [pc, #360]	; (8009ad8 <HAL_RCC_OscConfig+0x288>)
 8009970:	681b      	ldr	r3, [r3, #0]
 8009972:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009976:	2b00      	cmp	r3, #0
 8009978:	d1f0      	bne.n	800995c <HAL_RCC_OscConfig+0x10c>
 800997a:	e000      	b.n	800997e <HAL_RCC_OscConfig+0x12e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800997c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800997e:	687b      	ldr	r3, [r7, #4]
 8009980:	681b      	ldr	r3, [r3, #0]
 8009982:	f003 0302 	and.w	r3, r3, #2
 8009986:	2b00      	cmp	r3, #0
 8009988:	f000 80ae 	beq.w	8009ae8 <HAL_RCC_OscConfig+0x298>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800998c:	4b52      	ldr	r3, [pc, #328]	; (8009ad8 <HAL_RCC_OscConfig+0x288>)
 800998e:	691b      	ldr	r3, [r3, #16]
 8009990:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8009994:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8009996:	4b50      	ldr	r3, [pc, #320]	; (8009ad8 <HAL_RCC_OscConfig+0x288>)
 8009998:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800999a:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 800999c:	6a3b      	ldr	r3, [r7, #32]
 800999e:	2b00      	cmp	r3, #0
 80099a0:	d007      	beq.n	80099b2 <HAL_RCC_OscConfig+0x162>
 80099a2:	6a3b      	ldr	r3, [r7, #32]
 80099a4:	2b18      	cmp	r3, #24
 80099a6:	d13a      	bne.n	8009a1e <HAL_RCC_OscConfig+0x1ce>
 80099a8:	69fb      	ldr	r3, [r7, #28]
 80099aa:	f003 0303 	and.w	r3, r3, #3
 80099ae:	2b00      	cmp	r3, #0
 80099b0:	d135      	bne.n	8009a1e <HAL_RCC_OscConfig+0x1ce>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80099b2:	4b49      	ldr	r3, [pc, #292]	; (8009ad8 <HAL_RCC_OscConfig+0x288>)
 80099b4:	681b      	ldr	r3, [r3, #0]
 80099b6:	f003 0304 	and.w	r3, r3, #4
 80099ba:	2b00      	cmp	r3, #0
 80099bc:	d005      	beq.n	80099ca <HAL_RCC_OscConfig+0x17a>
 80099be:	687b      	ldr	r3, [r7, #4]
 80099c0:	68db      	ldr	r3, [r3, #12]
 80099c2:	2b00      	cmp	r3, #0
 80099c4:	d101      	bne.n	80099ca <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 80099c6:	2301      	movs	r3, #1
 80099c8:	e34b      	b.n	800a062 <HAL_RCC_OscConfig+0x812>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80099ca:	f7fa fea7 	bl	800471c <HAL_GetREVID>
 80099ce:	4602      	mov	r2, r0
 80099d0:	f241 0303 	movw	r3, #4099	; 0x1003
 80099d4:	429a      	cmp	r2, r3
 80099d6:	d817      	bhi.n	8009a08 <HAL_RCC_OscConfig+0x1b8>
 80099d8:	687b      	ldr	r3, [r7, #4]
 80099da:	691b      	ldr	r3, [r3, #16]
 80099dc:	2b40      	cmp	r3, #64	; 0x40
 80099de:	d108      	bne.n	80099f2 <HAL_RCC_OscConfig+0x1a2>
 80099e0:	4b3d      	ldr	r3, [pc, #244]	; (8009ad8 <HAL_RCC_OscConfig+0x288>)
 80099e2:	685b      	ldr	r3, [r3, #4]
 80099e4:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 80099e8:	4a3b      	ldr	r2, [pc, #236]	; (8009ad8 <HAL_RCC_OscConfig+0x288>)
 80099ea:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80099ee:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80099f0:	e07a      	b.n	8009ae8 <HAL_RCC_OscConfig+0x298>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80099f2:	4b39      	ldr	r3, [pc, #228]	; (8009ad8 <HAL_RCC_OscConfig+0x288>)
 80099f4:	685b      	ldr	r3, [r3, #4]
 80099f6:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 80099fa:	687b      	ldr	r3, [r7, #4]
 80099fc:	691b      	ldr	r3, [r3, #16]
 80099fe:	031b      	lsls	r3, r3, #12
 8009a00:	4935      	ldr	r1, [pc, #212]	; (8009ad8 <HAL_RCC_OscConfig+0x288>)
 8009a02:	4313      	orrs	r3, r2
 8009a04:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8009a06:	e06f      	b.n	8009ae8 <HAL_RCC_OscConfig+0x298>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8009a08:	4b33      	ldr	r3, [pc, #204]	; (8009ad8 <HAL_RCC_OscConfig+0x288>)
 8009a0a:	685b      	ldr	r3, [r3, #4]
 8009a0c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8009a10:	687b      	ldr	r3, [r7, #4]
 8009a12:	691b      	ldr	r3, [r3, #16]
 8009a14:	061b      	lsls	r3, r3, #24
 8009a16:	4930      	ldr	r1, [pc, #192]	; (8009ad8 <HAL_RCC_OscConfig+0x288>)
 8009a18:	4313      	orrs	r3, r2
 8009a1a:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8009a1c:	e064      	b.n	8009ae8 <HAL_RCC_OscConfig+0x298>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8009a1e:	687b      	ldr	r3, [r7, #4]
 8009a20:	68db      	ldr	r3, [r3, #12]
 8009a22:	2b00      	cmp	r3, #0
 8009a24:	d045      	beq.n	8009ab2 <HAL_RCC_OscConfig+0x262>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8009a26:	4b2c      	ldr	r3, [pc, #176]	; (8009ad8 <HAL_RCC_OscConfig+0x288>)
 8009a28:	681b      	ldr	r3, [r3, #0]
 8009a2a:	f023 0219 	bic.w	r2, r3, #25
 8009a2e:	687b      	ldr	r3, [r7, #4]
 8009a30:	68db      	ldr	r3, [r3, #12]
 8009a32:	4929      	ldr	r1, [pc, #164]	; (8009ad8 <HAL_RCC_OscConfig+0x288>)
 8009a34:	4313      	orrs	r3, r2
 8009a36:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009a38:	f7fa fe42 	bl	80046c0 <HAL_GetTick>
 8009a3c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8009a3e:	e008      	b.n	8009a52 <HAL_RCC_OscConfig+0x202>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8009a40:	f7fa fe3e 	bl	80046c0 <HAL_GetTick>
 8009a44:	4602      	mov	r2, r0
 8009a46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a48:	1ad3      	subs	r3, r2, r3
 8009a4a:	2b02      	cmp	r3, #2
 8009a4c:	d901      	bls.n	8009a52 <HAL_RCC_OscConfig+0x202>
          {
            return HAL_TIMEOUT;
 8009a4e:	2303      	movs	r3, #3
 8009a50:	e307      	b.n	800a062 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8009a52:	4b21      	ldr	r3, [pc, #132]	; (8009ad8 <HAL_RCC_OscConfig+0x288>)
 8009a54:	681b      	ldr	r3, [r3, #0]
 8009a56:	f003 0304 	and.w	r3, r3, #4
 8009a5a:	2b00      	cmp	r3, #0
 8009a5c:	d0f0      	beq.n	8009a40 <HAL_RCC_OscConfig+0x1f0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8009a5e:	f7fa fe5d 	bl	800471c <HAL_GetREVID>
 8009a62:	4602      	mov	r2, r0
 8009a64:	f241 0303 	movw	r3, #4099	; 0x1003
 8009a68:	429a      	cmp	r2, r3
 8009a6a:	d817      	bhi.n	8009a9c <HAL_RCC_OscConfig+0x24c>
 8009a6c:	687b      	ldr	r3, [r7, #4]
 8009a6e:	691b      	ldr	r3, [r3, #16]
 8009a70:	2b40      	cmp	r3, #64	; 0x40
 8009a72:	d108      	bne.n	8009a86 <HAL_RCC_OscConfig+0x236>
 8009a74:	4b18      	ldr	r3, [pc, #96]	; (8009ad8 <HAL_RCC_OscConfig+0x288>)
 8009a76:	685b      	ldr	r3, [r3, #4]
 8009a78:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8009a7c:	4a16      	ldr	r2, [pc, #88]	; (8009ad8 <HAL_RCC_OscConfig+0x288>)
 8009a7e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009a82:	6053      	str	r3, [r2, #4]
 8009a84:	e030      	b.n	8009ae8 <HAL_RCC_OscConfig+0x298>
 8009a86:	4b14      	ldr	r3, [pc, #80]	; (8009ad8 <HAL_RCC_OscConfig+0x288>)
 8009a88:	685b      	ldr	r3, [r3, #4]
 8009a8a:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8009a8e:	687b      	ldr	r3, [r7, #4]
 8009a90:	691b      	ldr	r3, [r3, #16]
 8009a92:	031b      	lsls	r3, r3, #12
 8009a94:	4910      	ldr	r1, [pc, #64]	; (8009ad8 <HAL_RCC_OscConfig+0x288>)
 8009a96:	4313      	orrs	r3, r2
 8009a98:	604b      	str	r3, [r1, #4]
 8009a9a:	e025      	b.n	8009ae8 <HAL_RCC_OscConfig+0x298>
 8009a9c:	4b0e      	ldr	r3, [pc, #56]	; (8009ad8 <HAL_RCC_OscConfig+0x288>)
 8009a9e:	685b      	ldr	r3, [r3, #4]
 8009aa0:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8009aa4:	687b      	ldr	r3, [r7, #4]
 8009aa6:	691b      	ldr	r3, [r3, #16]
 8009aa8:	061b      	lsls	r3, r3, #24
 8009aaa:	490b      	ldr	r1, [pc, #44]	; (8009ad8 <HAL_RCC_OscConfig+0x288>)
 8009aac:	4313      	orrs	r3, r2
 8009aae:	604b      	str	r3, [r1, #4]
 8009ab0:	e01a      	b.n	8009ae8 <HAL_RCC_OscConfig+0x298>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8009ab2:	4b09      	ldr	r3, [pc, #36]	; (8009ad8 <HAL_RCC_OscConfig+0x288>)
 8009ab4:	681b      	ldr	r3, [r3, #0]
 8009ab6:	4a08      	ldr	r2, [pc, #32]	; (8009ad8 <HAL_RCC_OscConfig+0x288>)
 8009ab8:	f023 0301 	bic.w	r3, r3, #1
 8009abc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009abe:	f7fa fdff 	bl	80046c0 <HAL_GetTick>
 8009ac2:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8009ac4:	e00a      	b.n	8009adc <HAL_RCC_OscConfig+0x28c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8009ac6:	f7fa fdfb 	bl	80046c0 <HAL_GetTick>
 8009aca:	4602      	mov	r2, r0
 8009acc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ace:	1ad3      	subs	r3, r2, r3
 8009ad0:	2b02      	cmp	r3, #2
 8009ad2:	d903      	bls.n	8009adc <HAL_RCC_OscConfig+0x28c>
          {
            return HAL_TIMEOUT;
 8009ad4:	2303      	movs	r3, #3
 8009ad6:	e2c4      	b.n	800a062 <HAL_RCC_OscConfig+0x812>
 8009ad8:	58024400 	.word	0x58024400
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8009adc:	4ba4      	ldr	r3, [pc, #656]	; (8009d70 <HAL_RCC_OscConfig+0x520>)
 8009ade:	681b      	ldr	r3, [r3, #0]
 8009ae0:	f003 0304 	and.w	r3, r3, #4
 8009ae4:	2b00      	cmp	r3, #0
 8009ae6:	d1ee      	bne.n	8009ac6 <HAL_RCC_OscConfig+0x276>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8009ae8:	687b      	ldr	r3, [r7, #4]
 8009aea:	681b      	ldr	r3, [r3, #0]
 8009aec:	f003 0310 	and.w	r3, r3, #16
 8009af0:	2b00      	cmp	r3, #0
 8009af2:	f000 80a9 	beq.w	8009c48 <HAL_RCC_OscConfig+0x3f8>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8009af6:	4b9e      	ldr	r3, [pc, #632]	; (8009d70 <HAL_RCC_OscConfig+0x520>)
 8009af8:	691b      	ldr	r3, [r3, #16]
 8009afa:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8009afe:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8009b00:	4b9b      	ldr	r3, [pc, #620]	; (8009d70 <HAL_RCC_OscConfig+0x520>)
 8009b02:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009b04:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8009b06:	69bb      	ldr	r3, [r7, #24]
 8009b08:	2b08      	cmp	r3, #8
 8009b0a:	d007      	beq.n	8009b1c <HAL_RCC_OscConfig+0x2cc>
 8009b0c:	69bb      	ldr	r3, [r7, #24]
 8009b0e:	2b18      	cmp	r3, #24
 8009b10:	d13a      	bne.n	8009b88 <HAL_RCC_OscConfig+0x338>
 8009b12:	697b      	ldr	r3, [r7, #20]
 8009b14:	f003 0303 	and.w	r3, r3, #3
 8009b18:	2b01      	cmp	r3, #1
 8009b1a:	d135      	bne.n	8009b88 <HAL_RCC_OscConfig+0x338>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8009b1c:	4b94      	ldr	r3, [pc, #592]	; (8009d70 <HAL_RCC_OscConfig+0x520>)
 8009b1e:	681b      	ldr	r3, [r3, #0]
 8009b20:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009b24:	2b00      	cmp	r3, #0
 8009b26:	d005      	beq.n	8009b34 <HAL_RCC_OscConfig+0x2e4>
 8009b28:	687b      	ldr	r3, [r7, #4]
 8009b2a:	69db      	ldr	r3, [r3, #28]
 8009b2c:	2b80      	cmp	r3, #128	; 0x80
 8009b2e:	d001      	beq.n	8009b34 <HAL_RCC_OscConfig+0x2e4>
      {
        return HAL_ERROR;
 8009b30:	2301      	movs	r3, #1
 8009b32:	e296      	b.n	800a062 <HAL_RCC_OscConfig+0x812>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8009b34:	f7fa fdf2 	bl	800471c <HAL_GetREVID>
 8009b38:	4602      	mov	r2, r0
 8009b3a:	f241 0303 	movw	r3, #4099	; 0x1003
 8009b3e:	429a      	cmp	r2, r3
 8009b40:	d817      	bhi.n	8009b72 <HAL_RCC_OscConfig+0x322>
 8009b42:	687b      	ldr	r3, [r7, #4]
 8009b44:	6a1b      	ldr	r3, [r3, #32]
 8009b46:	2b20      	cmp	r3, #32
 8009b48:	d108      	bne.n	8009b5c <HAL_RCC_OscConfig+0x30c>
 8009b4a:	4b89      	ldr	r3, [pc, #548]	; (8009d70 <HAL_RCC_OscConfig+0x520>)
 8009b4c:	685b      	ldr	r3, [r3, #4]
 8009b4e:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8009b52:	4a87      	ldr	r2, [pc, #540]	; (8009d70 <HAL_RCC_OscConfig+0x520>)
 8009b54:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8009b58:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8009b5a:	e075      	b.n	8009c48 <HAL_RCC_OscConfig+0x3f8>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8009b5c:	4b84      	ldr	r3, [pc, #528]	; (8009d70 <HAL_RCC_OscConfig+0x520>)
 8009b5e:	685b      	ldr	r3, [r3, #4]
 8009b60:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8009b64:	687b      	ldr	r3, [r7, #4]
 8009b66:	6a1b      	ldr	r3, [r3, #32]
 8009b68:	069b      	lsls	r3, r3, #26
 8009b6a:	4981      	ldr	r1, [pc, #516]	; (8009d70 <HAL_RCC_OscConfig+0x520>)
 8009b6c:	4313      	orrs	r3, r2
 8009b6e:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8009b70:	e06a      	b.n	8009c48 <HAL_RCC_OscConfig+0x3f8>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8009b72:	4b7f      	ldr	r3, [pc, #508]	; (8009d70 <HAL_RCC_OscConfig+0x520>)
 8009b74:	68db      	ldr	r3, [r3, #12]
 8009b76:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8009b7a:	687b      	ldr	r3, [r7, #4]
 8009b7c:	6a1b      	ldr	r3, [r3, #32]
 8009b7e:	061b      	lsls	r3, r3, #24
 8009b80:	497b      	ldr	r1, [pc, #492]	; (8009d70 <HAL_RCC_OscConfig+0x520>)
 8009b82:	4313      	orrs	r3, r2
 8009b84:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8009b86:	e05f      	b.n	8009c48 <HAL_RCC_OscConfig+0x3f8>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 8009b88:	687b      	ldr	r3, [r7, #4]
 8009b8a:	69db      	ldr	r3, [r3, #28]
 8009b8c:	2b00      	cmp	r3, #0
 8009b8e:	d042      	beq.n	8009c16 <HAL_RCC_OscConfig+0x3c6>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8009b90:	4b77      	ldr	r3, [pc, #476]	; (8009d70 <HAL_RCC_OscConfig+0x520>)
 8009b92:	681b      	ldr	r3, [r3, #0]
 8009b94:	4a76      	ldr	r2, [pc, #472]	; (8009d70 <HAL_RCC_OscConfig+0x520>)
 8009b96:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009b9a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009b9c:	f7fa fd90 	bl	80046c0 <HAL_GetTick>
 8009ba0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8009ba2:	e008      	b.n	8009bb6 <HAL_RCC_OscConfig+0x366>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8009ba4:	f7fa fd8c 	bl	80046c0 <HAL_GetTick>
 8009ba8:	4602      	mov	r2, r0
 8009baa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009bac:	1ad3      	subs	r3, r2, r3
 8009bae:	2b02      	cmp	r3, #2
 8009bb0:	d901      	bls.n	8009bb6 <HAL_RCC_OscConfig+0x366>
          {
            return HAL_TIMEOUT;
 8009bb2:	2303      	movs	r3, #3
 8009bb4:	e255      	b.n	800a062 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8009bb6:	4b6e      	ldr	r3, [pc, #440]	; (8009d70 <HAL_RCC_OscConfig+0x520>)
 8009bb8:	681b      	ldr	r3, [r3, #0]
 8009bba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009bbe:	2b00      	cmp	r3, #0
 8009bc0:	d0f0      	beq.n	8009ba4 <HAL_RCC_OscConfig+0x354>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8009bc2:	f7fa fdab 	bl	800471c <HAL_GetREVID>
 8009bc6:	4602      	mov	r2, r0
 8009bc8:	f241 0303 	movw	r3, #4099	; 0x1003
 8009bcc:	429a      	cmp	r2, r3
 8009bce:	d817      	bhi.n	8009c00 <HAL_RCC_OscConfig+0x3b0>
 8009bd0:	687b      	ldr	r3, [r7, #4]
 8009bd2:	6a1b      	ldr	r3, [r3, #32]
 8009bd4:	2b20      	cmp	r3, #32
 8009bd6:	d108      	bne.n	8009bea <HAL_RCC_OscConfig+0x39a>
 8009bd8:	4b65      	ldr	r3, [pc, #404]	; (8009d70 <HAL_RCC_OscConfig+0x520>)
 8009bda:	685b      	ldr	r3, [r3, #4]
 8009bdc:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8009be0:	4a63      	ldr	r2, [pc, #396]	; (8009d70 <HAL_RCC_OscConfig+0x520>)
 8009be2:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8009be6:	6053      	str	r3, [r2, #4]
 8009be8:	e02e      	b.n	8009c48 <HAL_RCC_OscConfig+0x3f8>
 8009bea:	4b61      	ldr	r3, [pc, #388]	; (8009d70 <HAL_RCC_OscConfig+0x520>)
 8009bec:	685b      	ldr	r3, [r3, #4]
 8009bee:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8009bf2:	687b      	ldr	r3, [r7, #4]
 8009bf4:	6a1b      	ldr	r3, [r3, #32]
 8009bf6:	069b      	lsls	r3, r3, #26
 8009bf8:	495d      	ldr	r1, [pc, #372]	; (8009d70 <HAL_RCC_OscConfig+0x520>)
 8009bfa:	4313      	orrs	r3, r2
 8009bfc:	604b      	str	r3, [r1, #4]
 8009bfe:	e023      	b.n	8009c48 <HAL_RCC_OscConfig+0x3f8>
 8009c00:	4b5b      	ldr	r3, [pc, #364]	; (8009d70 <HAL_RCC_OscConfig+0x520>)
 8009c02:	68db      	ldr	r3, [r3, #12]
 8009c04:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8009c08:	687b      	ldr	r3, [r7, #4]
 8009c0a:	6a1b      	ldr	r3, [r3, #32]
 8009c0c:	061b      	lsls	r3, r3, #24
 8009c0e:	4958      	ldr	r1, [pc, #352]	; (8009d70 <HAL_RCC_OscConfig+0x520>)
 8009c10:	4313      	orrs	r3, r2
 8009c12:	60cb      	str	r3, [r1, #12]
 8009c14:	e018      	b.n	8009c48 <HAL_RCC_OscConfig+0x3f8>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8009c16:	4b56      	ldr	r3, [pc, #344]	; (8009d70 <HAL_RCC_OscConfig+0x520>)
 8009c18:	681b      	ldr	r3, [r3, #0]
 8009c1a:	4a55      	ldr	r2, [pc, #340]	; (8009d70 <HAL_RCC_OscConfig+0x520>)
 8009c1c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009c20:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009c22:	f7fa fd4d 	bl	80046c0 <HAL_GetTick>
 8009c26:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8009c28:	e008      	b.n	8009c3c <HAL_RCC_OscConfig+0x3ec>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8009c2a:	f7fa fd49 	bl	80046c0 <HAL_GetTick>
 8009c2e:	4602      	mov	r2, r0
 8009c30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c32:	1ad3      	subs	r3, r2, r3
 8009c34:	2b02      	cmp	r3, #2
 8009c36:	d901      	bls.n	8009c3c <HAL_RCC_OscConfig+0x3ec>
          {
            return HAL_TIMEOUT;
 8009c38:	2303      	movs	r3, #3
 8009c3a:	e212      	b.n	800a062 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8009c3c:	4b4c      	ldr	r3, [pc, #304]	; (8009d70 <HAL_RCC_OscConfig+0x520>)
 8009c3e:	681b      	ldr	r3, [r3, #0]
 8009c40:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009c44:	2b00      	cmp	r3, #0
 8009c46:	d1f0      	bne.n	8009c2a <HAL_RCC_OscConfig+0x3da>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8009c48:	687b      	ldr	r3, [r7, #4]
 8009c4a:	681b      	ldr	r3, [r3, #0]
 8009c4c:	f003 0308 	and.w	r3, r3, #8
 8009c50:	2b00      	cmp	r3, #0
 8009c52:	d036      	beq.n	8009cc2 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8009c54:	687b      	ldr	r3, [r7, #4]
 8009c56:	695b      	ldr	r3, [r3, #20]
 8009c58:	2b00      	cmp	r3, #0
 8009c5a:	d019      	beq.n	8009c90 <HAL_RCC_OscConfig+0x440>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8009c5c:	4b44      	ldr	r3, [pc, #272]	; (8009d70 <HAL_RCC_OscConfig+0x520>)
 8009c5e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009c60:	4a43      	ldr	r2, [pc, #268]	; (8009d70 <HAL_RCC_OscConfig+0x520>)
 8009c62:	f043 0301 	orr.w	r3, r3, #1
 8009c66:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009c68:	f7fa fd2a 	bl	80046c0 <HAL_GetTick>
 8009c6c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8009c6e:	e008      	b.n	8009c82 <HAL_RCC_OscConfig+0x432>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8009c70:	f7fa fd26 	bl	80046c0 <HAL_GetTick>
 8009c74:	4602      	mov	r2, r0
 8009c76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c78:	1ad3      	subs	r3, r2, r3
 8009c7a:	2b02      	cmp	r3, #2
 8009c7c:	d901      	bls.n	8009c82 <HAL_RCC_OscConfig+0x432>
        {
          return HAL_TIMEOUT;
 8009c7e:	2303      	movs	r3, #3
 8009c80:	e1ef      	b.n	800a062 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8009c82:	4b3b      	ldr	r3, [pc, #236]	; (8009d70 <HAL_RCC_OscConfig+0x520>)
 8009c84:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009c86:	f003 0302 	and.w	r3, r3, #2
 8009c8a:	2b00      	cmp	r3, #0
 8009c8c:	d0f0      	beq.n	8009c70 <HAL_RCC_OscConfig+0x420>
 8009c8e:	e018      	b.n	8009cc2 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8009c90:	4b37      	ldr	r3, [pc, #220]	; (8009d70 <HAL_RCC_OscConfig+0x520>)
 8009c92:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009c94:	4a36      	ldr	r2, [pc, #216]	; (8009d70 <HAL_RCC_OscConfig+0x520>)
 8009c96:	f023 0301 	bic.w	r3, r3, #1
 8009c9a:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009c9c:	f7fa fd10 	bl	80046c0 <HAL_GetTick>
 8009ca0:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8009ca2:	e008      	b.n	8009cb6 <HAL_RCC_OscConfig+0x466>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8009ca4:	f7fa fd0c 	bl	80046c0 <HAL_GetTick>
 8009ca8:	4602      	mov	r2, r0
 8009caa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009cac:	1ad3      	subs	r3, r2, r3
 8009cae:	2b02      	cmp	r3, #2
 8009cb0:	d901      	bls.n	8009cb6 <HAL_RCC_OscConfig+0x466>
        {
          return HAL_TIMEOUT;
 8009cb2:	2303      	movs	r3, #3
 8009cb4:	e1d5      	b.n	800a062 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8009cb6:	4b2e      	ldr	r3, [pc, #184]	; (8009d70 <HAL_RCC_OscConfig+0x520>)
 8009cb8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009cba:	f003 0302 	and.w	r3, r3, #2
 8009cbe:	2b00      	cmp	r3, #0
 8009cc0:	d1f0      	bne.n	8009ca4 <HAL_RCC_OscConfig+0x454>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8009cc2:	687b      	ldr	r3, [r7, #4]
 8009cc4:	681b      	ldr	r3, [r3, #0]
 8009cc6:	f003 0320 	and.w	r3, r3, #32
 8009cca:	2b00      	cmp	r3, #0
 8009ccc:	d036      	beq.n	8009d3c <HAL_RCC_OscConfig+0x4ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 8009cce:	687b      	ldr	r3, [r7, #4]
 8009cd0:	699b      	ldr	r3, [r3, #24]
 8009cd2:	2b00      	cmp	r3, #0
 8009cd4:	d019      	beq.n	8009d0a <HAL_RCC_OscConfig+0x4ba>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8009cd6:	4b26      	ldr	r3, [pc, #152]	; (8009d70 <HAL_RCC_OscConfig+0x520>)
 8009cd8:	681b      	ldr	r3, [r3, #0]
 8009cda:	4a25      	ldr	r2, [pc, #148]	; (8009d70 <HAL_RCC_OscConfig+0x520>)
 8009cdc:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8009ce0:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8009ce2:	f7fa fced 	bl	80046c0 <HAL_GetTick>
 8009ce6:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8009ce8:	e008      	b.n	8009cfc <HAL_RCC_OscConfig+0x4ac>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8009cea:	f7fa fce9 	bl	80046c0 <HAL_GetTick>
 8009cee:	4602      	mov	r2, r0
 8009cf0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009cf2:	1ad3      	subs	r3, r2, r3
 8009cf4:	2b02      	cmp	r3, #2
 8009cf6:	d901      	bls.n	8009cfc <HAL_RCC_OscConfig+0x4ac>
        {
          return HAL_TIMEOUT;
 8009cf8:	2303      	movs	r3, #3
 8009cfa:	e1b2      	b.n	800a062 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8009cfc:	4b1c      	ldr	r3, [pc, #112]	; (8009d70 <HAL_RCC_OscConfig+0x520>)
 8009cfe:	681b      	ldr	r3, [r3, #0]
 8009d00:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8009d04:	2b00      	cmp	r3, #0
 8009d06:	d0f0      	beq.n	8009cea <HAL_RCC_OscConfig+0x49a>
 8009d08:	e018      	b.n	8009d3c <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8009d0a:	4b19      	ldr	r3, [pc, #100]	; (8009d70 <HAL_RCC_OscConfig+0x520>)
 8009d0c:	681b      	ldr	r3, [r3, #0]
 8009d0e:	4a18      	ldr	r2, [pc, #96]	; (8009d70 <HAL_RCC_OscConfig+0x520>)
 8009d10:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8009d14:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8009d16:	f7fa fcd3 	bl	80046c0 <HAL_GetTick>
 8009d1a:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8009d1c:	e008      	b.n	8009d30 <HAL_RCC_OscConfig+0x4e0>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8009d1e:	f7fa fccf 	bl	80046c0 <HAL_GetTick>
 8009d22:	4602      	mov	r2, r0
 8009d24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d26:	1ad3      	subs	r3, r2, r3
 8009d28:	2b02      	cmp	r3, #2
 8009d2a:	d901      	bls.n	8009d30 <HAL_RCC_OscConfig+0x4e0>
        {
          return HAL_TIMEOUT;
 8009d2c:	2303      	movs	r3, #3
 8009d2e:	e198      	b.n	800a062 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8009d30:	4b0f      	ldr	r3, [pc, #60]	; (8009d70 <HAL_RCC_OscConfig+0x520>)
 8009d32:	681b      	ldr	r3, [r3, #0]
 8009d34:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8009d38:	2b00      	cmp	r3, #0
 8009d3a:	d1f0      	bne.n	8009d1e <HAL_RCC_OscConfig+0x4ce>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8009d3c:	687b      	ldr	r3, [r7, #4]
 8009d3e:	681b      	ldr	r3, [r3, #0]
 8009d40:	f003 0304 	and.w	r3, r3, #4
 8009d44:	2b00      	cmp	r3, #0
 8009d46:	f000 8085 	beq.w	8009e54 <HAL_RCC_OscConfig+0x604>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8009d4a:	4b0a      	ldr	r3, [pc, #40]	; (8009d74 <HAL_RCC_OscConfig+0x524>)
 8009d4c:	681b      	ldr	r3, [r3, #0]
 8009d4e:	4a09      	ldr	r2, [pc, #36]	; (8009d74 <HAL_RCC_OscConfig+0x524>)
 8009d50:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009d54:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8009d56:	f7fa fcb3 	bl	80046c0 <HAL_GetTick>
 8009d5a:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8009d5c:	e00c      	b.n	8009d78 <HAL_RCC_OscConfig+0x528>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8009d5e:	f7fa fcaf 	bl	80046c0 <HAL_GetTick>
 8009d62:	4602      	mov	r2, r0
 8009d64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d66:	1ad3      	subs	r3, r2, r3
 8009d68:	2b64      	cmp	r3, #100	; 0x64
 8009d6a:	d905      	bls.n	8009d78 <HAL_RCC_OscConfig+0x528>
      {
        return HAL_TIMEOUT;
 8009d6c:	2303      	movs	r3, #3
 8009d6e:	e178      	b.n	800a062 <HAL_RCC_OscConfig+0x812>
 8009d70:	58024400 	.word	0x58024400
 8009d74:	58024800 	.word	0x58024800
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8009d78:	4b96      	ldr	r3, [pc, #600]	; (8009fd4 <HAL_RCC_OscConfig+0x784>)
 8009d7a:	681b      	ldr	r3, [r3, #0]
 8009d7c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009d80:	2b00      	cmp	r3, #0
 8009d82:	d0ec      	beq.n	8009d5e <HAL_RCC_OscConfig+0x50e>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8009d84:	687b      	ldr	r3, [r7, #4]
 8009d86:	689b      	ldr	r3, [r3, #8]
 8009d88:	2b01      	cmp	r3, #1
 8009d8a:	d106      	bne.n	8009d9a <HAL_RCC_OscConfig+0x54a>
 8009d8c:	4b92      	ldr	r3, [pc, #584]	; (8009fd8 <HAL_RCC_OscConfig+0x788>)
 8009d8e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009d90:	4a91      	ldr	r2, [pc, #580]	; (8009fd8 <HAL_RCC_OscConfig+0x788>)
 8009d92:	f043 0301 	orr.w	r3, r3, #1
 8009d96:	6713      	str	r3, [r2, #112]	; 0x70
 8009d98:	e02d      	b.n	8009df6 <HAL_RCC_OscConfig+0x5a6>
 8009d9a:	687b      	ldr	r3, [r7, #4]
 8009d9c:	689b      	ldr	r3, [r3, #8]
 8009d9e:	2b00      	cmp	r3, #0
 8009da0:	d10c      	bne.n	8009dbc <HAL_RCC_OscConfig+0x56c>
 8009da2:	4b8d      	ldr	r3, [pc, #564]	; (8009fd8 <HAL_RCC_OscConfig+0x788>)
 8009da4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009da6:	4a8c      	ldr	r2, [pc, #560]	; (8009fd8 <HAL_RCC_OscConfig+0x788>)
 8009da8:	f023 0301 	bic.w	r3, r3, #1
 8009dac:	6713      	str	r3, [r2, #112]	; 0x70
 8009dae:	4b8a      	ldr	r3, [pc, #552]	; (8009fd8 <HAL_RCC_OscConfig+0x788>)
 8009db0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009db2:	4a89      	ldr	r2, [pc, #548]	; (8009fd8 <HAL_RCC_OscConfig+0x788>)
 8009db4:	f023 0304 	bic.w	r3, r3, #4
 8009db8:	6713      	str	r3, [r2, #112]	; 0x70
 8009dba:	e01c      	b.n	8009df6 <HAL_RCC_OscConfig+0x5a6>
 8009dbc:	687b      	ldr	r3, [r7, #4]
 8009dbe:	689b      	ldr	r3, [r3, #8]
 8009dc0:	2b05      	cmp	r3, #5
 8009dc2:	d10c      	bne.n	8009dde <HAL_RCC_OscConfig+0x58e>
 8009dc4:	4b84      	ldr	r3, [pc, #528]	; (8009fd8 <HAL_RCC_OscConfig+0x788>)
 8009dc6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009dc8:	4a83      	ldr	r2, [pc, #524]	; (8009fd8 <HAL_RCC_OscConfig+0x788>)
 8009dca:	f043 0304 	orr.w	r3, r3, #4
 8009dce:	6713      	str	r3, [r2, #112]	; 0x70
 8009dd0:	4b81      	ldr	r3, [pc, #516]	; (8009fd8 <HAL_RCC_OscConfig+0x788>)
 8009dd2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009dd4:	4a80      	ldr	r2, [pc, #512]	; (8009fd8 <HAL_RCC_OscConfig+0x788>)
 8009dd6:	f043 0301 	orr.w	r3, r3, #1
 8009dda:	6713      	str	r3, [r2, #112]	; 0x70
 8009ddc:	e00b      	b.n	8009df6 <HAL_RCC_OscConfig+0x5a6>
 8009dde:	4b7e      	ldr	r3, [pc, #504]	; (8009fd8 <HAL_RCC_OscConfig+0x788>)
 8009de0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009de2:	4a7d      	ldr	r2, [pc, #500]	; (8009fd8 <HAL_RCC_OscConfig+0x788>)
 8009de4:	f023 0301 	bic.w	r3, r3, #1
 8009de8:	6713      	str	r3, [r2, #112]	; 0x70
 8009dea:	4b7b      	ldr	r3, [pc, #492]	; (8009fd8 <HAL_RCC_OscConfig+0x788>)
 8009dec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009dee:	4a7a      	ldr	r2, [pc, #488]	; (8009fd8 <HAL_RCC_OscConfig+0x788>)
 8009df0:	f023 0304 	bic.w	r3, r3, #4
 8009df4:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8009df6:	687b      	ldr	r3, [r7, #4]
 8009df8:	689b      	ldr	r3, [r3, #8]
 8009dfa:	2b00      	cmp	r3, #0
 8009dfc:	d015      	beq.n	8009e2a <HAL_RCC_OscConfig+0x5da>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009dfe:	f7fa fc5f 	bl	80046c0 <HAL_GetTick>
 8009e02:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8009e04:	e00a      	b.n	8009e1c <HAL_RCC_OscConfig+0x5cc>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8009e06:	f7fa fc5b 	bl	80046c0 <HAL_GetTick>
 8009e0a:	4602      	mov	r2, r0
 8009e0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e0e:	1ad3      	subs	r3, r2, r3
 8009e10:	f241 3288 	movw	r2, #5000	; 0x1388
 8009e14:	4293      	cmp	r3, r2
 8009e16:	d901      	bls.n	8009e1c <HAL_RCC_OscConfig+0x5cc>
        {
          return HAL_TIMEOUT;
 8009e18:	2303      	movs	r3, #3
 8009e1a:	e122      	b.n	800a062 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8009e1c:	4b6e      	ldr	r3, [pc, #440]	; (8009fd8 <HAL_RCC_OscConfig+0x788>)
 8009e1e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009e20:	f003 0302 	and.w	r3, r3, #2
 8009e24:	2b00      	cmp	r3, #0
 8009e26:	d0ee      	beq.n	8009e06 <HAL_RCC_OscConfig+0x5b6>
 8009e28:	e014      	b.n	8009e54 <HAL_RCC_OscConfig+0x604>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009e2a:	f7fa fc49 	bl	80046c0 <HAL_GetTick>
 8009e2e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8009e30:	e00a      	b.n	8009e48 <HAL_RCC_OscConfig+0x5f8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8009e32:	f7fa fc45 	bl	80046c0 <HAL_GetTick>
 8009e36:	4602      	mov	r2, r0
 8009e38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e3a:	1ad3      	subs	r3, r2, r3
 8009e3c:	f241 3288 	movw	r2, #5000	; 0x1388
 8009e40:	4293      	cmp	r3, r2
 8009e42:	d901      	bls.n	8009e48 <HAL_RCC_OscConfig+0x5f8>
        {
          return HAL_TIMEOUT;
 8009e44:	2303      	movs	r3, #3
 8009e46:	e10c      	b.n	800a062 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8009e48:	4b63      	ldr	r3, [pc, #396]	; (8009fd8 <HAL_RCC_OscConfig+0x788>)
 8009e4a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009e4c:	f003 0302 	and.w	r3, r3, #2
 8009e50:	2b00      	cmp	r3, #0
 8009e52:	d1ee      	bne.n	8009e32 <HAL_RCC_OscConfig+0x5e2>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8009e54:	687b      	ldr	r3, [r7, #4]
 8009e56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009e58:	2b00      	cmp	r3, #0
 8009e5a:	f000 8101 	beq.w	800a060 <HAL_RCC_OscConfig+0x810>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8009e5e:	4b5e      	ldr	r3, [pc, #376]	; (8009fd8 <HAL_RCC_OscConfig+0x788>)
 8009e60:	691b      	ldr	r3, [r3, #16]
 8009e62:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8009e66:	2b18      	cmp	r3, #24
 8009e68:	f000 80bc 	beq.w	8009fe4 <HAL_RCC_OscConfig+0x794>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8009e6c:	687b      	ldr	r3, [r7, #4]
 8009e6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009e70:	2b02      	cmp	r3, #2
 8009e72:	f040 8095 	bne.w	8009fa0 <HAL_RCC_OscConfig+0x750>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8009e76:	4b58      	ldr	r3, [pc, #352]	; (8009fd8 <HAL_RCC_OscConfig+0x788>)
 8009e78:	681b      	ldr	r3, [r3, #0]
 8009e7a:	4a57      	ldr	r2, [pc, #348]	; (8009fd8 <HAL_RCC_OscConfig+0x788>)
 8009e7c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8009e80:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009e82:	f7fa fc1d 	bl	80046c0 <HAL_GetTick>
 8009e86:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8009e88:	e008      	b.n	8009e9c <HAL_RCC_OscConfig+0x64c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8009e8a:	f7fa fc19 	bl	80046c0 <HAL_GetTick>
 8009e8e:	4602      	mov	r2, r0
 8009e90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e92:	1ad3      	subs	r3, r2, r3
 8009e94:	2b02      	cmp	r3, #2
 8009e96:	d901      	bls.n	8009e9c <HAL_RCC_OscConfig+0x64c>
          {
            return HAL_TIMEOUT;
 8009e98:	2303      	movs	r3, #3
 8009e9a:	e0e2      	b.n	800a062 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8009e9c:	4b4e      	ldr	r3, [pc, #312]	; (8009fd8 <HAL_RCC_OscConfig+0x788>)
 8009e9e:	681b      	ldr	r3, [r3, #0]
 8009ea0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009ea4:	2b00      	cmp	r3, #0
 8009ea6:	d1f0      	bne.n	8009e8a <HAL_RCC_OscConfig+0x63a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8009ea8:	4b4b      	ldr	r3, [pc, #300]	; (8009fd8 <HAL_RCC_OscConfig+0x788>)
 8009eaa:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8009eac:	4b4b      	ldr	r3, [pc, #300]	; (8009fdc <HAL_RCC_OscConfig+0x78c>)
 8009eae:	4013      	ands	r3, r2
 8009eb0:	687a      	ldr	r2, [r7, #4]
 8009eb2:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8009eb4:	687a      	ldr	r2, [r7, #4]
 8009eb6:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8009eb8:	0112      	lsls	r2, r2, #4
 8009eba:	430a      	orrs	r2, r1
 8009ebc:	4946      	ldr	r1, [pc, #280]	; (8009fd8 <HAL_RCC_OscConfig+0x788>)
 8009ebe:	4313      	orrs	r3, r2
 8009ec0:	628b      	str	r3, [r1, #40]	; 0x28
 8009ec2:	687b      	ldr	r3, [r7, #4]
 8009ec4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009ec6:	3b01      	subs	r3, #1
 8009ec8:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8009ecc:	687b      	ldr	r3, [r7, #4]
 8009ece:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009ed0:	3b01      	subs	r3, #1
 8009ed2:	025b      	lsls	r3, r3, #9
 8009ed4:	b29b      	uxth	r3, r3
 8009ed6:	431a      	orrs	r2, r3
 8009ed8:	687b      	ldr	r3, [r7, #4]
 8009eda:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009edc:	3b01      	subs	r3, #1
 8009ede:	041b      	lsls	r3, r3, #16
 8009ee0:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8009ee4:	431a      	orrs	r2, r3
 8009ee6:	687b      	ldr	r3, [r7, #4]
 8009ee8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009eea:	3b01      	subs	r3, #1
 8009eec:	061b      	lsls	r3, r3, #24
 8009eee:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8009ef2:	4939      	ldr	r1, [pc, #228]	; (8009fd8 <HAL_RCC_OscConfig+0x788>)
 8009ef4:	4313      	orrs	r3, r2
 8009ef6:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 8009ef8:	4b37      	ldr	r3, [pc, #220]	; (8009fd8 <HAL_RCC_OscConfig+0x788>)
 8009efa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009efc:	4a36      	ldr	r2, [pc, #216]	; (8009fd8 <HAL_RCC_OscConfig+0x788>)
 8009efe:	f023 0301 	bic.w	r3, r3, #1
 8009f02:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8009f04:	4b34      	ldr	r3, [pc, #208]	; (8009fd8 <HAL_RCC_OscConfig+0x788>)
 8009f06:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009f08:	4b35      	ldr	r3, [pc, #212]	; (8009fe0 <HAL_RCC_OscConfig+0x790>)
 8009f0a:	4013      	ands	r3, r2
 8009f0c:	687a      	ldr	r2, [r7, #4]
 8009f0e:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8009f10:	00d2      	lsls	r2, r2, #3
 8009f12:	4931      	ldr	r1, [pc, #196]	; (8009fd8 <HAL_RCC_OscConfig+0x788>)
 8009f14:	4313      	orrs	r3, r2
 8009f16:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8009f18:	4b2f      	ldr	r3, [pc, #188]	; (8009fd8 <HAL_RCC_OscConfig+0x788>)
 8009f1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009f1c:	f023 020c 	bic.w	r2, r3, #12
 8009f20:	687b      	ldr	r3, [r7, #4]
 8009f22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009f24:	492c      	ldr	r1, [pc, #176]	; (8009fd8 <HAL_RCC_OscConfig+0x788>)
 8009f26:	4313      	orrs	r3, r2
 8009f28:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8009f2a:	4b2b      	ldr	r3, [pc, #172]	; (8009fd8 <HAL_RCC_OscConfig+0x788>)
 8009f2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009f2e:	f023 0202 	bic.w	r2, r3, #2
 8009f32:	687b      	ldr	r3, [r7, #4]
 8009f34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009f36:	4928      	ldr	r1, [pc, #160]	; (8009fd8 <HAL_RCC_OscConfig+0x788>)
 8009f38:	4313      	orrs	r3, r2
 8009f3a:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8009f3c:	4b26      	ldr	r3, [pc, #152]	; (8009fd8 <HAL_RCC_OscConfig+0x788>)
 8009f3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009f40:	4a25      	ldr	r2, [pc, #148]	; (8009fd8 <HAL_RCC_OscConfig+0x788>)
 8009f42:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009f46:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009f48:	4b23      	ldr	r3, [pc, #140]	; (8009fd8 <HAL_RCC_OscConfig+0x788>)
 8009f4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009f4c:	4a22      	ldr	r2, [pc, #136]	; (8009fd8 <HAL_RCC_OscConfig+0x788>)
 8009f4e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009f52:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8009f54:	4b20      	ldr	r3, [pc, #128]	; (8009fd8 <HAL_RCC_OscConfig+0x788>)
 8009f56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009f58:	4a1f      	ldr	r2, [pc, #124]	; (8009fd8 <HAL_RCC_OscConfig+0x788>)
 8009f5a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8009f5e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 8009f60:	4b1d      	ldr	r3, [pc, #116]	; (8009fd8 <HAL_RCC_OscConfig+0x788>)
 8009f62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009f64:	4a1c      	ldr	r2, [pc, #112]	; (8009fd8 <HAL_RCC_OscConfig+0x788>)
 8009f66:	f043 0301 	orr.w	r3, r3, #1
 8009f6a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8009f6c:	4b1a      	ldr	r3, [pc, #104]	; (8009fd8 <HAL_RCC_OscConfig+0x788>)
 8009f6e:	681b      	ldr	r3, [r3, #0]
 8009f70:	4a19      	ldr	r2, [pc, #100]	; (8009fd8 <HAL_RCC_OscConfig+0x788>)
 8009f72:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8009f76:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009f78:	f7fa fba2 	bl	80046c0 <HAL_GetTick>
 8009f7c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8009f7e:	e008      	b.n	8009f92 <HAL_RCC_OscConfig+0x742>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8009f80:	f7fa fb9e 	bl	80046c0 <HAL_GetTick>
 8009f84:	4602      	mov	r2, r0
 8009f86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f88:	1ad3      	subs	r3, r2, r3
 8009f8a:	2b02      	cmp	r3, #2
 8009f8c:	d901      	bls.n	8009f92 <HAL_RCC_OscConfig+0x742>
          {
            return HAL_TIMEOUT;
 8009f8e:	2303      	movs	r3, #3
 8009f90:	e067      	b.n	800a062 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8009f92:	4b11      	ldr	r3, [pc, #68]	; (8009fd8 <HAL_RCC_OscConfig+0x788>)
 8009f94:	681b      	ldr	r3, [r3, #0]
 8009f96:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009f9a:	2b00      	cmp	r3, #0
 8009f9c:	d0f0      	beq.n	8009f80 <HAL_RCC_OscConfig+0x730>
 8009f9e:	e05f      	b.n	800a060 <HAL_RCC_OscConfig+0x810>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8009fa0:	4b0d      	ldr	r3, [pc, #52]	; (8009fd8 <HAL_RCC_OscConfig+0x788>)
 8009fa2:	681b      	ldr	r3, [r3, #0]
 8009fa4:	4a0c      	ldr	r2, [pc, #48]	; (8009fd8 <HAL_RCC_OscConfig+0x788>)
 8009fa6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8009faa:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009fac:	f7fa fb88 	bl	80046c0 <HAL_GetTick>
 8009fb0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8009fb2:	e008      	b.n	8009fc6 <HAL_RCC_OscConfig+0x776>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8009fb4:	f7fa fb84 	bl	80046c0 <HAL_GetTick>
 8009fb8:	4602      	mov	r2, r0
 8009fba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009fbc:	1ad3      	subs	r3, r2, r3
 8009fbe:	2b02      	cmp	r3, #2
 8009fc0:	d901      	bls.n	8009fc6 <HAL_RCC_OscConfig+0x776>
          {
            return HAL_TIMEOUT;
 8009fc2:	2303      	movs	r3, #3
 8009fc4:	e04d      	b.n	800a062 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8009fc6:	4b04      	ldr	r3, [pc, #16]	; (8009fd8 <HAL_RCC_OscConfig+0x788>)
 8009fc8:	681b      	ldr	r3, [r3, #0]
 8009fca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009fce:	2b00      	cmp	r3, #0
 8009fd0:	d1f0      	bne.n	8009fb4 <HAL_RCC_OscConfig+0x764>
 8009fd2:	e045      	b.n	800a060 <HAL_RCC_OscConfig+0x810>
 8009fd4:	58024800 	.word	0x58024800
 8009fd8:	58024400 	.word	0x58024400
 8009fdc:	fffffc0c 	.word	0xfffffc0c
 8009fe0:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8009fe4:	4b21      	ldr	r3, [pc, #132]	; (800a06c <HAL_RCC_OscConfig+0x81c>)
 8009fe6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009fe8:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8009fea:	4b20      	ldr	r3, [pc, #128]	; (800a06c <HAL_RCC_OscConfig+0x81c>)
 8009fec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009fee:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8009ff0:	687b      	ldr	r3, [r7, #4]
 8009ff2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009ff4:	2b01      	cmp	r3, #1
 8009ff6:	d031      	beq.n	800a05c <HAL_RCC_OscConfig+0x80c>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8009ff8:	693b      	ldr	r3, [r7, #16]
 8009ffa:	f003 0203 	and.w	r2, r3, #3
 8009ffe:	687b      	ldr	r3, [r7, #4]
 800a000:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800a002:	429a      	cmp	r2, r3
 800a004:	d12a      	bne.n	800a05c <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800a006:	693b      	ldr	r3, [r7, #16]
 800a008:	091b      	lsrs	r3, r3, #4
 800a00a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800a00e:	687b      	ldr	r3, [r7, #4]
 800a010:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800a012:	429a      	cmp	r2, r3
 800a014:	d122      	bne.n	800a05c <HAL_RCC_OscConfig+0x80c>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800a016:	68fb      	ldr	r3, [r7, #12]
 800a018:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800a01c:	687b      	ldr	r3, [r7, #4]
 800a01e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a020:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800a022:	429a      	cmp	r2, r3
 800a024:	d11a      	bne.n	800a05c <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800a026:	68fb      	ldr	r3, [r7, #12]
 800a028:	0a5b      	lsrs	r3, r3, #9
 800a02a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800a02e:	687b      	ldr	r3, [r7, #4]
 800a030:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a032:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800a034:	429a      	cmp	r2, r3
 800a036:	d111      	bne.n	800a05c <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800a038:	68fb      	ldr	r3, [r7, #12]
 800a03a:	0c1b      	lsrs	r3, r3, #16
 800a03c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800a040:	687b      	ldr	r3, [r7, #4]
 800a042:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a044:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800a046:	429a      	cmp	r2, r3
 800a048:	d108      	bne.n	800a05c <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 800a04a:	68fb      	ldr	r3, [r7, #12]
 800a04c:	0e1b      	lsrs	r3, r3, #24
 800a04e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800a052:	687b      	ldr	r3, [r7, #4]
 800a054:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a056:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800a058:	429a      	cmp	r2, r3
 800a05a:	d001      	beq.n	800a060 <HAL_RCC_OscConfig+0x810>
      {
        return HAL_ERROR;
 800a05c:	2301      	movs	r3, #1
 800a05e:	e000      	b.n	800a062 <HAL_RCC_OscConfig+0x812>
      }
    }
  }
  return HAL_OK;
 800a060:	2300      	movs	r3, #0
}
 800a062:	4618      	mov	r0, r3
 800a064:	3730      	adds	r7, #48	; 0x30
 800a066:	46bd      	mov	sp, r7
 800a068:	bd80      	pop	{r7, pc}
 800a06a:	bf00      	nop
 800a06c:	58024400 	.word	0x58024400

0800a070 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800a070:	b580      	push	{r7, lr}
 800a072:	b086      	sub	sp, #24
 800a074:	af00      	add	r7, sp, #0
 800a076:	6078      	str	r0, [r7, #4]
 800a078:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800a07a:	687b      	ldr	r3, [r7, #4]
 800a07c:	2b00      	cmp	r3, #0
 800a07e:	d101      	bne.n	800a084 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800a080:	2301      	movs	r3, #1
 800a082:	e19c      	b.n	800a3be <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800a084:	4b8a      	ldr	r3, [pc, #552]	; (800a2b0 <HAL_RCC_ClockConfig+0x240>)
 800a086:	681b      	ldr	r3, [r3, #0]
 800a088:	f003 030f 	and.w	r3, r3, #15
 800a08c:	683a      	ldr	r2, [r7, #0]
 800a08e:	429a      	cmp	r2, r3
 800a090:	d910      	bls.n	800a0b4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800a092:	4b87      	ldr	r3, [pc, #540]	; (800a2b0 <HAL_RCC_ClockConfig+0x240>)
 800a094:	681b      	ldr	r3, [r3, #0]
 800a096:	f023 020f 	bic.w	r2, r3, #15
 800a09a:	4985      	ldr	r1, [pc, #532]	; (800a2b0 <HAL_RCC_ClockConfig+0x240>)
 800a09c:	683b      	ldr	r3, [r7, #0]
 800a09e:	4313      	orrs	r3, r2
 800a0a0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800a0a2:	4b83      	ldr	r3, [pc, #524]	; (800a2b0 <HAL_RCC_ClockConfig+0x240>)
 800a0a4:	681b      	ldr	r3, [r3, #0]
 800a0a6:	f003 030f 	and.w	r3, r3, #15
 800a0aa:	683a      	ldr	r2, [r7, #0]
 800a0ac:	429a      	cmp	r2, r3
 800a0ae:	d001      	beq.n	800a0b4 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800a0b0:	2301      	movs	r3, #1
 800a0b2:	e184      	b.n	800a3be <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800a0b4:	687b      	ldr	r3, [r7, #4]
 800a0b6:	681b      	ldr	r3, [r3, #0]
 800a0b8:	f003 0304 	and.w	r3, r3, #4
 800a0bc:	2b00      	cmp	r3, #0
 800a0be:	d010      	beq.n	800a0e2 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800a0c0:	687b      	ldr	r3, [r7, #4]
 800a0c2:	691a      	ldr	r2, [r3, #16]
 800a0c4:	4b7b      	ldr	r3, [pc, #492]	; (800a2b4 <HAL_RCC_ClockConfig+0x244>)
 800a0c6:	699b      	ldr	r3, [r3, #24]
 800a0c8:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800a0cc:	429a      	cmp	r2, r3
 800a0ce:	d908      	bls.n	800a0e2 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800a0d0:	4b78      	ldr	r3, [pc, #480]	; (800a2b4 <HAL_RCC_ClockConfig+0x244>)
 800a0d2:	699b      	ldr	r3, [r3, #24]
 800a0d4:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800a0d8:	687b      	ldr	r3, [r7, #4]
 800a0da:	691b      	ldr	r3, [r3, #16]
 800a0dc:	4975      	ldr	r1, [pc, #468]	; (800a2b4 <HAL_RCC_ClockConfig+0x244>)
 800a0de:	4313      	orrs	r3, r2
 800a0e0:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800a0e2:	687b      	ldr	r3, [r7, #4]
 800a0e4:	681b      	ldr	r3, [r3, #0]
 800a0e6:	f003 0308 	and.w	r3, r3, #8
 800a0ea:	2b00      	cmp	r3, #0
 800a0ec:	d010      	beq.n	800a110 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800a0ee:	687b      	ldr	r3, [r7, #4]
 800a0f0:	695a      	ldr	r2, [r3, #20]
 800a0f2:	4b70      	ldr	r3, [pc, #448]	; (800a2b4 <HAL_RCC_ClockConfig+0x244>)
 800a0f4:	69db      	ldr	r3, [r3, #28]
 800a0f6:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800a0fa:	429a      	cmp	r2, r3
 800a0fc:	d908      	bls.n	800a110 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800a0fe:	4b6d      	ldr	r3, [pc, #436]	; (800a2b4 <HAL_RCC_ClockConfig+0x244>)
 800a100:	69db      	ldr	r3, [r3, #28]
 800a102:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800a106:	687b      	ldr	r3, [r7, #4]
 800a108:	695b      	ldr	r3, [r3, #20]
 800a10a:	496a      	ldr	r1, [pc, #424]	; (800a2b4 <HAL_RCC_ClockConfig+0x244>)
 800a10c:	4313      	orrs	r3, r2
 800a10e:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800a110:	687b      	ldr	r3, [r7, #4]
 800a112:	681b      	ldr	r3, [r3, #0]
 800a114:	f003 0310 	and.w	r3, r3, #16
 800a118:	2b00      	cmp	r3, #0
 800a11a:	d010      	beq.n	800a13e <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800a11c:	687b      	ldr	r3, [r7, #4]
 800a11e:	699a      	ldr	r2, [r3, #24]
 800a120:	4b64      	ldr	r3, [pc, #400]	; (800a2b4 <HAL_RCC_ClockConfig+0x244>)
 800a122:	69db      	ldr	r3, [r3, #28]
 800a124:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800a128:	429a      	cmp	r2, r3
 800a12a:	d908      	bls.n	800a13e <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800a12c:	4b61      	ldr	r3, [pc, #388]	; (800a2b4 <HAL_RCC_ClockConfig+0x244>)
 800a12e:	69db      	ldr	r3, [r3, #28]
 800a130:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800a134:	687b      	ldr	r3, [r7, #4]
 800a136:	699b      	ldr	r3, [r3, #24]
 800a138:	495e      	ldr	r1, [pc, #376]	; (800a2b4 <HAL_RCC_ClockConfig+0x244>)
 800a13a:	4313      	orrs	r3, r2
 800a13c:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800a13e:	687b      	ldr	r3, [r7, #4]
 800a140:	681b      	ldr	r3, [r3, #0]
 800a142:	f003 0320 	and.w	r3, r3, #32
 800a146:	2b00      	cmp	r3, #0
 800a148:	d010      	beq.n	800a16c <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800a14a:	687b      	ldr	r3, [r7, #4]
 800a14c:	69da      	ldr	r2, [r3, #28]
 800a14e:	4b59      	ldr	r3, [pc, #356]	; (800a2b4 <HAL_RCC_ClockConfig+0x244>)
 800a150:	6a1b      	ldr	r3, [r3, #32]
 800a152:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800a156:	429a      	cmp	r2, r3
 800a158:	d908      	bls.n	800a16c <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 800a15a:	4b56      	ldr	r3, [pc, #344]	; (800a2b4 <HAL_RCC_ClockConfig+0x244>)
 800a15c:	6a1b      	ldr	r3, [r3, #32]
 800a15e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800a162:	687b      	ldr	r3, [r7, #4]
 800a164:	69db      	ldr	r3, [r3, #28]
 800a166:	4953      	ldr	r1, [pc, #332]	; (800a2b4 <HAL_RCC_ClockConfig+0x244>)
 800a168:	4313      	orrs	r3, r2
 800a16a:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800a16c:	687b      	ldr	r3, [r7, #4]
 800a16e:	681b      	ldr	r3, [r3, #0]
 800a170:	f003 0302 	and.w	r3, r3, #2
 800a174:	2b00      	cmp	r3, #0
 800a176:	d010      	beq.n	800a19a <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800a178:	687b      	ldr	r3, [r7, #4]
 800a17a:	68da      	ldr	r2, [r3, #12]
 800a17c:	4b4d      	ldr	r3, [pc, #308]	; (800a2b4 <HAL_RCC_ClockConfig+0x244>)
 800a17e:	699b      	ldr	r3, [r3, #24]
 800a180:	f003 030f 	and.w	r3, r3, #15
 800a184:	429a      	cmp	r2, r3
 800a186:	d908      	bls.n	800a19a <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800a188:	4b4a      	ldr	r3, [pc, #296]	; (800a2b4 <HAL_RCC_ClockConfig+0x244>)
 800a18a:	699b      	ldr	r3, [r3, #24]
 800a18c:	f023 020f 	bic.w	r2, r3, #15
 800a190:	687b      	ldr	r3, [r7, #4]
 800a192:	68db      	ldr	r3, [r3, #12]
 800a194:	4947      	ldr	r1, [pc, #284]	; (800a2b4 <HAL_RCC_ClockConfig+0x244>)
 800a196:	4313      	orrs	r3, r2
 800a198:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800a19a:	687b      	ldr	r3, [r7, #4]
 800a19c:	681b      	ldr	r3, [r3, #0]
 800a19e:	f003 0301 	and.w	r3, r3, #1
 800a1a2:	2b00      	cmp	r3, #0
 800a1a4:	d055      	beq.n	800a252 <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 800a1a6:	4b43      	ldr	r3, [pc, #268]	; (800a2b4 <HAL_RCC_ClockConfig+0x244>)
 800a1a8:	699b      	ldr	r3, [r3, #24]
 800a1aa:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 800a1ae:	687b      	ldr	r3, [r7, #4]
 800a1b0:	689b      	ldr	r3, [r3, #8]
 800a1b2:	4940      	ldr	r1, [pc, #256]	; (800a2b4 <HAL_RCC_ClockConfig+0x244>)
 800a1b4:	4313      	orrs	r3, r2
 800a1b6:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800a1b8:	687b      	ldr	r3, [r7, #4]
 800a1ba:	685b      	ldr	r3, [r3, #4]
 800a1bc:	2b02      	cmp	r3, #2
 800a1be:	d107      	bne.n	800a1d0 <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800a1c0:	4b3c      	ldr	r3, [pc, #240]	; (800a2b4 <HAL_RCC_ClockConfig+0x244>)
 800a1c2:	681b      	ldr	r3, [r3, #0]
 800a1c4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a1c8:	2b00      	cmp	r3, #0
 800a1ca:	d121      	bne.n	800a210 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 800a1cc:	2301      	movs	r3, #1
 800a1ce:	e0f6      	b.n	800a3be <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800a1d0:	687b      	ldr	r3, [r7, #4]
 800a1d2:	685b      	ldr	r3, [r3, #4]
 800a1d4:	2b03      	cmp	r3, #3
 800a1d6:	d107      	bne.n	800a1e8 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800a1d8:	4b36      	ldr	r3, [pc, #216]	; (800a2b4 <HAL_RCC_ClockConfig+0x244>)
 800a1da:	681b      	ldr	r3, [r3, #0]
 800a1dc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a1e0:	2b00      	cmp	r3, #0
 800a1e2:	d115      	bne.n	800a210 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 800a1e4:	2301      	movs	r3, #1
 800a1e6:	e0ea      	b.n	800a3be <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 800a1e8:	687b      	ldr	r3, [r7, #4]
 800a1ea:	685b      	ldr	r3, [r3, #4]
 800a1ec:	2b01      	cmp	r3, #1
 800a1ee:	d107      	bne.n	800a200 <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800a1f0:	4b30      	ldr	r3, [pc, #192]	; (800a2b4 <HAL_RCC_ClockConfig+0x244>)
 800a1f2:	681b      	ldr	r3, [r3, #0]
 800a1f4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a1f8:	2b00      	cmp	r3, #0
 800a1fa:	d109      	bne.n	800a210 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 800a1fc:	2301      	movs	r3, #1
 800a1fe:	e0de      	b.n	800a3be <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800a200:	4b2c      	ldr	r3, [pc, #176]	; (800a2b4 <HAL_RCC_ClockConfig+0x244>)
 800a202:	681b      	ldr	r3, [r3, #0]
 800a204:	f003 0304 	and.w	r3, r3, #4
 800a208:	2b00      	cmp	r3, #0
 800a20a:	d101      	bne.n	800a210 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 800a20c:	2301      	movs	r3, #1
 800a20e:	e0d6      	b.n	800a3be <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800a210:	4b28      	ldr	r3, [pc, #160]	; (800a2b4 <HAL_RCC_ClockConfig+0x244>)
 800a212:	691b      	ldr	r3, [r3, #16]
 800a214:	f023 0207 	bic.w	r2, r3, #7
 800a218:	687b      	ldr	r3, [r7, #4]
 800a21a:	685b      	ldr	r3, [r3, #4]
 800a21c:	4925      	ldr	r1, [pc, #148]	; (800a2b4 <HAL_RCC_ClockConfig+0x244>)
 800a21e:	4313      	orrs	r3, r2
 800a220:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a222:	f7fa fa4d 	bl	80046c0 <HAL_GetTick>
 800a226:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800a228:	e00a      	b.n	800a240 <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800a22a:	f7fa fa49 	bl	80046c0 <HAL_GetTick>
 800a22e:	4602      	mov	r2, r0
 800a230:	697b      	ldr	r3, [r7, #20]
 800a232:	1ad3      	subs	r3, r2, r3
 800a234:	f241 3288 	movw	r2, #5000	; 0x1388
 800a238:	4293      	cmp	r3, r2
 800a23a:	d901      	bls.n	800a240 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 800a23c:	2303      	movs	r3, #3
 800a23e:	e0be      	b.n	800a3be <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800a240:	4b1c      	ldr	r3, [pc, #112]	; (800a2b4 <HAL_RCC_ClockConfig+0x244>)
 800a242:	691b      	ldr	r3, [r3, #16]
 800a244:	f003 0238 	and.w	r2, r3, #56	; 0x38
 800a248:	687b      	ldr	r3, [r7, #4]
 800a24a:	685b      	ldr	r3, [r3, #4]
 800a24c:	00db      	lsls	r3, r3, #3
 800a24e:	429a      	cmp	r2, r3
 800a250:	d1eb      	bne.n	800a22a <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800a252:	687b      	ldr	r3, [r7, #4]
 800a254:	681b      	ldr	r3, [r3, #0]
 800a256:	f003 0302 	and.w	r3, r3, #2
 800a25a:	2b00      	cmp	r3, #0
 800a25c:	d010      	beq.n	800a280 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800a25e:	687b      	ldr	r3, [r7, #4]
 800a260:	68da      	ldr	r2, [r3, #12]
 800a262:	4b14      	ldr	r3, [pc, #80]	; (800a2b4 <HAL_RCC_ClockConfig+0x244>)
 800a264:	699b      	ldr	r3, [r3, #24]
 800a266:	f003 030f 	and.w	r3, r3, #15
 800a26a:	429a      	cmp	r2, r3
 800a26c:	d208      	bcs.n	800a280 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800a26e:	4b11      	ldr	r3, [pc, #68]	; (800a2b4 <HAL_RCC_ClockConfig+0x244>)
 800a270:	699b      	ldr	r3, [r3, #24]
 800a272:	f023 020f 	bic.w	r2, r3, #15
 800a276:	687b      	ldr	r3, [r7, #4]
 800a278:	68db      	ldr	r3, [r3, #12]
 800a27a:	490e      	ldr	r1, [pc, #56]	; (800a2b4 <HAL_RCC_ClockConfig+0x244>)
 800a27c:	4313      	orrs	r3, r2
 800a27e:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800a280:	4b0b      	ldr	r3, [pc, #44]	; (800a2b0 <HAL_RCC_ClockConfig+0x240>)
 800a282:	681b      	ldr	r3, [r3, #0]
 800a284:	f003 030f 	and.w	r3, r3, #15
 800a288:	683a      	ldr	r2, [r7, #0]
 800a28a:	429a      	cmp	r2, r3
 800a28c:	d214      	bcs.n	800a2b8 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800a28e:	4b08      	ldr	r3, [pc, #32]	; (800a2b0 <HAL_RCC_ClockConfig+0x240>)
 800a290:	681b      	ldr	r3, [r3, #0]
 800a292:	f023 020f 	bic.w	r2, r3, #15
 800a296:	4906      	ldr	r1, [pc, #24]	; (800a2b0 <HAL_RCC_ClockConfig+0x240>)
 800a298:	683b      	ldr	r3, [r7, #0]
 800a29a:	4313      	orrs	r3, r2
 800a29c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800a29e:	4b04      	ldr	r3, [pc, #16]	; (800a2b0 <HAL_RCC_ClockConfig+0x240>)
 800a2a0:	681b      	ldr	r3, [r3, #0]
 800a2a2:	f003 030f 	and.w	r3, r3, #15
 800a2a6:	683a      	ldr	r2, [r7, #0]
 800a2a8:	429a      	cmp	r2, r3
 800a2aa:	d005      	beq.n	800a2b8 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 800a2ac:	2301      	movs	r3, #1
 800a2ae:	e086      	b.n	800a3be <HAL_RCC_ClockConfig+0x34e>
 800a2b0:	52002000 	.word	0x52002000
 800a2b4:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800a2b8:	687b      	ldr	r3, [r7, #4]
 800a2ba:	681b      	ldr	r3, [r3, #0]
 800a2bc:	f003 0304 	and.w	r3, r3, #4
 800a2c0:	2b00      	cmp	r3, #0
 800a2c2:	d010      	beq.n	800a2e6 <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800a2c4:	687b      	ldr	r3, [r7, #4]
 800a2c6:	691a      	ldr	r2, [r3, #16]
 800a2c8:	4b3f      	ldr	r3, [pc, #252]	; (800a3c8 <HAL_RCC_ClockConfig+0x358>)
 800a2ca:	699b      	ldr	r3, [r3, #24]
 800a2cc:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800a2d0:	429a      	cmp	r2, r3
 800a2d2:	d208      	bcs.n	800a2e6 <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800a2d4:	4b3c      	ldr	r3, [pc, #240]	; (800a3c8 <HAL_RCC_ClockConfig+0x358>)
 800a2d6:	699b      	ldr	r3, [r3, #24]
 800a2d8:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800a2dc:	687b      	ldr	r3, [r7, #4]
 800a2de:	691b      	ldr	r3, [r3, #16]
 800a2e0:	4939      	ldr	r1, [pc, #228]	; (800a3c8 <HAL_RCC_ClockConfig+0x358>)
 800a2e2:	4313      	orrs	r3, r2
 800a2e4:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800a2e6:	687b      	ldr	r3, [r7, #4]
 800a2e8:	681b      	ldr	r3, [r3, #0]
 800a2ea:	f003 0308 	and.w	r3, r3, #8
 800a2ee:	2b00      	cmp	r3, #0
 800a2f0:	d010      	beq.n	800a314 <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800a2f2:	687b      	ldr	r3, [r7, #4]
 800a2f4:	695a      	ldr	r2, [r3, #20]
 800a2f6:	4b34      	ldr	r3, [pc, #208]	; (800a3c8 <HAL_RCC_ClockConfig+0x358>)
 800a2f8:	69db      	ldr	r3, [r3, #28]
 800a2fa:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800a2fe:	429a      	cmp	r2, r3
 800a300:	d208      	bcs.n	800a314 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800a302:	4b31      	ldr	r3, [pc, #196]	; (800a3c8 <HAL_RCC_ClockConfig+0x358>)
 800a304:	69db      	ldr	r3, [r3, #28]
 800a306:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800a30a:	687b      	ldr	r3, [r7, #4]
 800a30c:	695b      	ldr	r3, [r3, #20]
 800a30e:	492e      	ldr	r1, [pc, #184]	; (800a3c8 <HAL_RCC_ClockConfig+0x358>)
 800a310:	4313      	orrs	r3, r2
 800a312:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800a314:	687b      	ldr	r3, [r7, #4]
 800a316:	681b      	ldr	r3, [r3, #0]
 800a318:	f003 0310 	and.w	r3, r3, #16
 800a31c:	2b00      	cmp	r3, #0
 800a31e:	d010      	beq.n	800a342 <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800a320:	687b      	ldr	r3, [r7, #4]
 800a322:	699a      	ldr	r2, [r3, #24]
 800a324:	4b28      	ldr	r3, [pc, #160]	; (800a3c8 <HAL_RCC_ClockConfig+0x358>)
 800a326:	69db      	ldr	r3, [r3, #28]
 800a328:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800a32c:	429a      	cmp	r2, r3
 800a32e:	d208      	bcs.n	800a342 <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800a330:	4b25      	ldr	r3, [pc, #148]	; (800a3c8 <HAL_RCC_ClockConfig+0x358>)
 800a332:	69db      	ldr	r3, [r3, #28]
 800a334:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800a338:	687b      	ldr	r3, [r7, #4]
 800a33a:	699b      	ldr	r3, [r3, #24]
 800a33c:	4922      	ldr	r1, [pc, #136]	; (800a3c8 <HAL_RCC_ClockConfig+0x358>)
 800a33e:	4313      	orrs	r3, r2
 800a340:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800a342:	687b      	ldr	r3, [r7, #4]
 800a344:	681b      	ldr	r3, [r3, #0]
 800a346:	f003 0320 	and.w	r3, r3, #32
 800a34a:	2b00      	cmp	r3, #0
 800a34c:	d010      	beq.n	800a370 <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800a34e:	687b      	ldr	r3, [r7, #4]
 800a350:	69da      	ldr	r2, [r3, #28]
 800a352:	4b1d      	ldr	r3, [pc, #116]	; (800a3c8 <HAL_RCC_ClockConfig+0x358>)
 800a354:	6a1b      	ldr	r3, [r3, #32]
 800a356:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800a35a:	429a      	cmp	r2, r3
 800a35c:	d208      	bcs.n	800a370 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 800a35e:	4b1a      	ldr	r3, [pc, #104]	; (800a3c8 <HAL_RCC_ClockConfig+0x358>)
 800a360:	6a1b      	ldr	r3, [r3, #32]
 800a362:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800a366:	687b      	ldr	r3, [r7, #4]
 800a368:	69db      	ldr	r3, [r3, #28]
 800a36a:	4917      	ldr	r1, [pc, #92]	; (800a3c8 <HAL_RCC_ClockConfig+0x358>)
 800a36c:	4313      	orrs	r3, r2
 800a36e:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800a370:	f000 f844 	bl	800a3fc <HAL_RCC_GetSysClockFreq>
 800a374:	4601      	mov	r1, r0
 800a376:	4b14      	ldr	r3, [pc, #80]	; (800a3c8 <HAL_RCC_ClockConfig+0x358>)
 800a378:	699b      	ldr	r3, [r3, #24]
 800a37a:	0a1b      	lsrs	r3, r3, #8
 800a37c:	f003 030f 	and.w	r3, r3, #15
 800a380:	4a12      	ldr	r2, [pc, #72]	; (800a3cc <HAL_RCC_ClockConfig+0x35c>)
 800a382:	5cd3      	ldrb	r3, [r2, r3]
 800a384:	f003 031f 	and.w	r3, r3, #31
 800a388:	fa21 f303 	lsr.w	r3, r1, r3
 800a38c:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800a38e:	4b0e      	ldr	r3, [pc, #56]	; (800a3c8 <HAL_RCC_ClockConfig+0x358>)
 800a390:	699b      	ldr	r3, [r3, #24]
 800a392:	f003 030f 	and.w	r3, r3, #15
 800a396:	4a0d      	ldr	r2, [pc, #52]	; (800a3cc <HAL_RCC_ClockConfig+0x35c>)
 800a398:	5cd3      	ldrb	r3, [r2, r3]
 800a39a:	f003 031f 	and.w	r3, r3, #31
 800a39e:	693a      	ldr	r2, [r7, #16]
 800a3a0:	fa22 f303 	lsr.w	r3, r2, r3
 800a3a4:	4a0a      	ldr	r2, [pc, #40]	; (800a3d0 <HAL_RCC_ClockConfig+0x360>)
 800a3a6:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800a3a8:	4a0a      	ldr	r2, [pc, #40]	; (800a3d4 <HAL_RCC_ClockConfig+0x364>)
 800a3aa:	693b      	ldr	r3, [r7, #16]
 800a3ac:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 800a3ae:	4b0a      	ldr	r3, [pc, #40]	; (800a3d8 <HAL_RCC_ClockConfig+0x368>)
 800a3b0:	681b      	ldr	r3, [r3, #0]
 800a3b2:	4618      	mov	r0, r3
 800a3b4:	f7fa f93a 	bl	800462c <HAL_InitTick>
 800a3b8:	4603      	mov	r3, r0
 800a3ba:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 800a3bc:	7bfb      	ldrb	r3, [r7, #15]
}
 800a3be:	4618      	mov	r0, r3
 800a3c0:	3718      	adds	r7, #24
 800a3c2:	46bd      	mov	sp, r7
 800a3c4:	bd80      	pop	{r7, pc}
 800a3c6:	bf00      	nop
 800a3c8:	58024400 	.word	0x58024400
 800a3cc:	0801affc 	.word	0x0801affc
 800a3d0:	24000014 	.word	0x24000014
 800a3d4:	24000010 	.word	0x24000010
 800a3d8:	24000018 	.word	0x24000018

0800a3dc <HAL_RCC_EnableCSS>:
  *         allowing the MCU to perform rescue operations. The CSSI is linked to
  *         the Cortex-M NMI (Non-Mask-able Interrupt) exception vector.
  * @retval None
  */
void HAL_RCC_EnableCSS(void)
{
 800a3dc:	b480      	push	{r7}
 800a3de:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_CSSHSEON) ;
 800a3e0:	4b05      	ldr	r3, [pc, #20]	; (800a3f8 <HAL_RCC_EnableCSS+0x1c>)
 800a3e2:	681b      	ldr	r3, [r3, #0]
 800a3e4:	4a04      	ldr	r2, [pc, #16]	; (800a3f8 <HAL_RCC_EnableCSS+0x1c>)
 800a3e6:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800a3ea:	6013      	str	r3, [r2, #0]
}
 800a3ec:	bf00      	nop
 800a3ee:	46bd      	mov	sp, r7
 800a3f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3f4:	4770      	bx	lr
 800a3f6:	bf00      	nop
 800a3f8:	58024400 	.word	0x58024400

0800a3fc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800a3fc:	b480      	push	{r7}
 800a3fe:	b089      	sub	sp, #36	; 0x24
 800a400:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 800a402:	4baf      	ldr	r3, [pc, #700]	; (800a6c0 <HAL_RCC_GetSysClockFreq+0x2c4>)
 800a404:	691b      	ldr	r3, [r3, #16]
 800a406:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800a40a:	2b18      	cmp	r3, #24
 800a40c:	f200 814e 	bhi.w	800a6ac <HAL_RCC_GetSysClockFreq+0x2b0>
 800a410:	a201      	add	r2, pc, #4	; (adr r2, 800a418 <HAL_RCC_GetSysClockFreq+0x1c>)
 800a412:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a416:	bf00      	nop
 800a418:	0800a47d 	.word	0x0800a47d
 800a41c:	0800a6ad 	.word	0x0800a6ad
 800a420:	0800a6ad 	.word	0x0800a6ad
 800a424:	0800a6ad 	.word	0x0800a6ad
 800a428:	0800a6ad 	.word	0x0800a6ad
 800a42c:	0800a6ad 	.word	0x0800a6ad
 800a430:	0800a6ad 	.word	0x0800a6ad
 800a434:	0800a6ad 	.word	0x0800a6ad
 800a438:	0800a4a3 	.word	0x0800a4a3
 800a43c:	0800a6ad 	.word	0x0800a6ad
 800a440:	0800a6ad 	.word	0x0800a6ad
 800a444:	0800a6ad 	.word	0x0800a6ad
 800a448:	0800a6ad 	.word	0x0800a6ad
 800a44c:	0800a6ad 	.word	0x0800a6ad
 800a450:	0800a6ad 	.word	0x0800a6ad
 800a454:	0800a6ad 	.word	0x0800a6ad
 800a458:	0800a4a9 	.word	0x0800a4a9
 800a45c:	0800a6ad 	.word	0x0800a6ad
 800a460:	0800a6ad 	.word	0x0800a6ad
 800a464:	0800a6ad 	.word	0x0800a6ad
 800a468:	0800a6ad 	.word	0x0800a6ad
 800a46c:	0800a6ad 	.word	0x0800a6ad
 800a470:	0800a6ad 	.word	0x0800a6ad
 800a474:	0800a6ad 	.word	0x0800a6ad
 800a478:	0800a4af 	.word	0x0800a4af
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a47c:	4b90      	ldr	r3, [pc, #576]	; (800a6c0 <HAL_RCC_GetSysClockFreq+0x2c4>)
 800a47e:	681b      	ldr	r3, [r3, #0]
 800a480:	f003 0320 	and.w	r3, r3, #32
 800a484:	2b00      	cmp	r3, #0
 800a486:	d009      	beq.n	800a49c <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800a488:	4b8d      	ldr	r3, [pc, #564]	; (800a6c0 <HAL_RCC_GetSysClockFreq+0x2c4>)
 800a48a:	681b      	ldr	r3, [r3, #0]
 800a48c:	08db      	lsrs	r3, r3, #3
 800a48e:	f003 0303 	and.w	r3, r3, #3
 800a492:	4a8c      	ldr	r2, [pc, #560]	; (800a6c4 <HAL_RCC_GetSysClockFreq+0x2c8>)
 800a494:	fa22 f303 	lsr.w	r3, r2, r3
 800a498:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 800a49a:	e10a      	b.n	800a6b2 <HAL_RCC_GetSysClockFreq+0x2b6>
        sysclockfreq = (uint32_t) HSI_VALUE;
 800a49c:	4b89      	ldr	r3, [pc, #548]	; (800a6c4 <HAL_RCC_GetSysClockFreq+0x2c8>)
 800a49e:	61bb      	str	r3, [r7, #24]
    break;
 800a4a0:	e107      	b.n	800a6b2 <HAL_RCC_GetSysClockFreq+0x2b6>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 800a4a2:	4b89      	ldr	r3, [pc, #548]	; (800a6c8 <HAL_RCC_GetSysClockFreq+0x2cc>)
 800a4a4:	61bb      	str	r3, [r7, #24]
    break;
 800a4a6:	e104      	b.n	800a6b2 <HAL_RCC_GetSysClockFreq+0x2b6>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 800a4a8:	4b88      	ldr	r3, [pc, #544]	; (800a6cc <HAL_RCC_GetSysClockFreq+0x2d0>)
 800a4aa:	61bb      	str	r3, [r7, #24]
    break;
 800a4ac:	e101      	b.n	800a6b2 <HAL_RCC_GetSysClockFreq+0x2b6>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800a4ae:	4b84      	ldr	r3, [pc, #528]	; (800a6c0 <HAL_RCC_GetSysClockFreq+0x2c4>)
 800a4b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a4b2:	f003 0303 	and.w	r3, r3, #3
 800a4b6:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 800a4b8:	4b81      	ldr	r3, [pc, #516]	; (800a6c0 <HAL_RCC_GetSysClockFreq+0x2c4>)
 800a4ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a4bc:	091b      	lsrs	r3, r3, #4
 800a4be:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800a4c2:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 800a4c4:	4b7e      	ldr	r3, [pc, #504]	; (800a6c0 <HAL_RCC_GetSysClockFreq+0x2c4>)
 800a4c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a4c8:	f003 0301 	and.w	r3, r3, #1
 800a4cc:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 800a4ce:	4b7c      	ldr	r3, [pc, #496]	; (800a6c0 <HAL_RCC_GetSysClockFreq+0x2c4>)
 800a4d0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a4d2:	08db      	lsrs	r3, r3, #3
 800a4d4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800a4d8:	68fa      	ldr	r2, [r7, #12]
 800a4da:	fb02 f303 	mul.w	r3, r2, r3
 800a4de:	ee07 3a90 	vmov	s15, r3
 800a4e2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a4e6:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 800a4ea:	693b      	ldr	r3, [r7, #16]
 800a4ec:	2b00      	cmp	r3, #0
 800a4ee:	f000 80da 	beq.w	800a6a6 <HAL_RCC_GetSysClockFreq+0x2aa>
    {
      switch (pllsource)
 800a4f2:	697b      	ldr	r3, [r7, #20]
 800a4f4:	2b01      	cmp	r3, #1
 800a4f6:	d05a      	beq.n	800a5ae <HAL_RCC_GetSysClockFreq+0x1b2>
 800a4f8:	2b01      	cmp	r3, #1
 800a4fa:	d302      	bcc.n	800a502 <HAL_RCC_GetSysClockFreq+0x106>
 800a4fc:	2b02      	cmp	r3, #2
 800a4fe:	d078      	beq.n	800a5f2 <HAL_RCC_GetSysClockFreq+0x1f6>
 800a500:	e099      	b.n	800a636 <HAL_RCC_GetSysClockFreq+0x23a>
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a502:	4b6f      	ldr	r3, [pc, #444]	; (800a6c0 <HAL_RCC_GetSysClockFreq+0x2c4>)
 800a504:	681b      	ldr	r3, [r3, #0]
 800a506:	f003 0320 	and.w	r3, r3, #32
 800a50a:	2b00      	cmp	r3, #0
 800a50c:	d02d      	beq.n	800a56a <HAL_RCC_GetSysClockFreq+0x16e>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800a50e:	4b6c      	ldr	r3, [pc, #432]	; (800a6c0 <HAL_RCC_GetSysClockFreq+0x2c4>)
 800a510:	681b      	ldr	r3, [r3, #0]
 800a512:	08db      	lsrs	r3, r3, #3
 800a514:	f003 0303 	and.w	r3, r3, #3
 800a518:	4a6a      	ldr	r2, [pc, #424]	; (800a6c4 <HAL_RCC_GetSysClockFreq+0x2c8>)
 800a51a:	fa22 f303 	lsr.w	r3, r2, r3
 800a51e:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800a520:	687b      	ldr	r3, [r7, #4]
 800a522:	ee07 3a90 	vmov	s15, r3
 800a526:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a52a:	693b      	ldr	r3, [r7, #16]
 800a52c:	ee07 3a90 	vmov	s15, r3
 800a530:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a534:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a538:	4b61      	ldr	r3, [pc, #388]	; (800a6c0 <HAL_RCC_GetSysClockFreq+0x2c4>)
 800a53a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a53c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a540:	ee07 3a90 	vmov	s15, r3
 800a544:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a548:	ed97 6a02 	vldr	s12, [r7, #8]
 800a54c:	eddf 5a60 	vldr	s11, [pc, #384]	; 800a6d0 <HAL_RCC_GetSysClockFreq+0x2d4>
 800a550:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a554:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a558:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a55c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a560:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a564:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 800a568:	e087      	b.n	800a67a <HAL_RCC_GetSysClockFreq+0x27e>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800a56a:	693b      	ldr	r3, [r7, #16]
 800a56c:	ee07 3a90 	vmov	s15, r3
 800a570:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a574:	eddf 6a57 	vldr	s13, [pc, #348]	; 800a6d4 <HAL_RCC_GetSysClockFreq+0x2d8>
 800a578:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a57c:	4b50      	ldr	r3, [pc, #320]	; (800a6c0 <HAL_RCC_GetSysClockFreq+0x2c4>)
 800a57e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a580:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a584:	ee07 3a90 	vmov	s15, r3
 800a588:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a58c:	ed97 6a02 	vldr	s12, [r7, #8]
 800a590:	eddf 5a4f 	vldr	s11, [pc, #316]	; 800a6d0 <HAL_RCC_GetSysClockFreq+0x2d4>
 800a594:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a598:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a59c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a5a0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a5a4:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a5a8:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800a5ac:	e065      	b.n	800a67a <HAL_RCC_GetSysClockFreq+0x27e>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800a5ae:	693b      	ldr	r3, [r7, #16]
 800a5b0:	ee07 3a90 	vmov	s15, r3
 800a5b4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a5b8:	eddf 6a47 	vldr	s13, [pc, #284]	; 800a6d8 <HAL_RCC_GetSysClockFreq+0x2dc>
 800a5bc:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a5c0:	4b3f      	ldr	r3, [pc, #252]	; (800a6c0 <HAL_RCC_GetSysClockFreq+0x2c4>)
 800a5c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a5c4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a5c8:	ee07 3a90 	vmov	s15, r3
 800a5cc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a5d0:	ed97 6a02 	vldr	s12, [r7, #8]
 800a5d4:	eddf 5a3e 	vldr	s11, [pc, #248]	; 800a6d0 <HAL_RCC_GetSysClockFreq+0x2d4>
 800a5d8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a5dc:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a5e0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a5e4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a5e8:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a5ec:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800a5f0:	e043      	b.n	800a67a <HAL_RCC_GetSysClockFreq+0x27e>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800a5f2:	693b      	ldr	r3, [r7, #16]
 800a5f4:	ee07 3a90 	vmov	s15, r3
 800a5f8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a5fc:	eddf 6a37 	vldr	s13, [pc, #220]	; 800a6dc <HAL_RCC_GetSysClockFreq+0x2e0>
 800a600:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a604:	4b2e      	ldr	r3, [pc, #184]	; (800a6c0 <HAL_RCC_GetSysClockFreq+0x2c4>)
 800a606:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a608:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a60c:	ee07 3a90 	vmov	s15, r3
 800a610:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a614:	ed97 6a02 	vldr	s12, [r7, #8]
 800a618:	eddf 5a2d 	vldr	s11, [pc, #180]	; 800a6d0 <HAL_RCC_GetSysClockFreq+0x2d4>
 800a61c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a620:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a624:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a628:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a62c:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a630:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800a634:	e021      	b.n	800a67a <HAL_RCC_GetSysClockFreq+0x27e>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800a636:	693b      	ldr	r3, [r7, #16]
 800a638:	ee07 3a90 	vmov	s15, r3
 800a63c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a640:	eddf 6a25 	vldr	s13, [pc, #148]	; 800a6d8 <HAL_RCC_GetSysClockFreq+0x2dc>
 800a644:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a648:	4b1d      	ldr	r3, [pc, #116]	; (800a6c0 <HAL_RCC_GetSysClockFreq+0x2c4>)
 800a64a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a64c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a650:	ee07 3a90 	vmov	s15, r3
 800a654:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a658:	ed97 6a02 	vldr	s12, [r7, #8]
 800a65c:	eddf 5a1c 	vldr	s11, [pc, #112]	; 800a6d0 <HAL_RCC_GetSysClockFreq+0x2d4>
 800a660:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a664:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a668:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a66c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a670:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a674:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800a678:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 800a67a:	4b11      	ldr	r3, [pc, #68]	; (800a6c0 <HAL_RCC_GetSysClockFreq+0x2c4>)
 800a67c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a67e:	0a5b      	lsrs	r3, r3, #9
 800a680:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a684:	3301      	adds	r3, #1
 800a686:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 800a688:	683b      	ldr	r3, [r7, #0]
 800a68a:	ee07 3a90 	vmov	s15, r3
 800a68e:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800a692:	edd7 6a07 	vldr	s13, [r7, #28]
 800a696:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a69a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a69e:	ee17 3a90 	vmov	r3, s15
 800a6a2:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 800a6a4:	e005      	b.n	800a6b2 <HAL_RCC_GetSysClockFreq+0x2b6>
      sysclockfreq = 0U;
 800a6a6:	2300      	movs	r3, #0
 800a6a8:	61bb      	str	r3, [r7, #24]
    break;
 800a6aa:	e002      	b.n	800a6b2 <HAL_RCC_GetSysClockFreq+0x2b6>

  default:
    sysclockfreq = CSI_VALUE;
 800a6ac:	4b06      	ldr	r3, [pc, #24]	; (800a6c8 <HAL_RCC_GetSysClockFreq+0x2cc>)
 800a6ae:	61bb      	str	r3, [r7, #24]
    break;
 800a6b0:	bf00      	nop
  }

  return sysclockfreq;
 800a6b2:	69bb      	ldr	r3, [r7, #24]
}
 800a6b4:	4618      	mov	r0, r3
 800a6b6:	3724      	adds	r7, #36	; 0x24
 800a6b8:	46bd      	mov	sp, r7
 800a6ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6be:	4770      	bx	lr
 800a6c0:	58024400 	.word	0x58024400
 800a6c4:	03d09000 	.word	0x03d09000
 800a6c8:	003d0900 	.word	0x003d0900
 800a6cc:	017d7840 	.word	0x017d7840
 800a6d0:	46000000 	.word	0x46000000
 800a6d4:	4c742400 	.word	0x4c742400
 800a6d8:	4a742400 	.word	0x4a742400
 800a6dc:	4bbebc20 	.word	0x4bbebc20

0800a6e0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800a6e0:	b580      	push	{r7, lr}
 800a6e2:	b082      	sub	sp, #8
 800a6e4:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800a6e6:	f7ff fe89 	bl	800a3fc <HAL_RCC_GetSysClockFreq>
 800a6ea:	4601      	mov	r1, r0
 800a6ec:	4b10      	ldr	r3, [pc, #64]	; (800a730 <HAL_RCC_GetHCLKFreq+0x50>)
 800a6ee:	699b      	ldr	r3, [r3, #24]
 800a6f0:	0a1b      	lsrs	r3, r3, #8
 800a6f2:	f003 030f 	and.w	r3, r3, #15
 800a6f6:	4a0f      	ldr	r2, [pc, #60]	; (800a734 <HAL_RCC_GetHCLKFreq+0x54>)
 800a6f8:	5cd3      	ldrb	r3, [r2, r3]
 800a6fa:	f003 031f 	and.w	r3, r3, #31
 800a6fe:	fa21 f303 	lsr.w	r3, r1, r3
 800a702:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800a704:	4b0a      	ldr	r3, [pc, #40]	; (800a730 <HAL_RCC_GetHCLKFreq+0x50>)
 800a706:	699b      	ldr	r3, [r3, #24]
 800a708:	f003 030f 	and.w	r3, r3, #15
 800a70c:	4a09      	ldr	r2, [pc, #36]	; (800a734 <HAL_RCC_GetHCLKFreq+0x54>)
 800a70e:	5cd3      	ldrb	r3, [r2, r3]
 800a710:	f003 031f 	and.w	r3, r3, #31
 800a714:	687a      	ldr	r2, [r7, #4]
 800a716:	fa22 f303 	lsr.w	r3, r2, r3
 800a71a:	4a07      	ldr	r2, [pc, #28]	; (800a738 <HAL_RCC_GetHCLKFreq+0x58>)
 800a71c:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800a71e:	4a07      	ldr	r2, [pc, #28]	; (800a73c <HAL_RCC_GetHCLKFreq+0x5c>)
 800a720:	687b      	ldr	r3, [r7, #4]
 800a722:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 800a724:	4b04      	ldr	r3, [pc, #16]	; (800a738 <HAL_RCC_GetHCLKFreq+0x58>)
 800a726:	681b      	ldr	r3, [r3, #0]
}
 800a728:	4618      	mov	r0, r3
 800a72a:	3708      	adds	r7, #8
 800a72c:	46bd      	mov	sp, r7
 800a72e:	bd80      	pop	{r7, pc}
 800a730:	58024400 	.word	0x58024400
 800a734:	0801affc 	.word	0x0801affc
 800a738:	24000014 	.word	0x24000014
 800a73c:	24000010 	.word	0x24000010

0800a740 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800a740:	b580      	push	{r7, lr}
 800a742:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 800a744:	f7ff ffcc 	bl	800a6e0 <HAL_RCC_GetHCLKFreq>
 800a748:	4601      	mov	r1, r0
 800a74a:	4b06      	ldr	r3, [pc, #24]	; (800a764 <HAL_RCC_GetPCLK1Freq+0x24>)
 800a74c:	69db      	ldr	r3, [r3, #28]
 800a74e:	091b      	lsrs	r3, r3, #4
 800a750:	f003 0307 	and.w	r3, r3, #7
 800a754:	4a04      	ldr	r2, [pc, #16]	; (800a768 <HAL_RCC_GetPCLK1Freq+0x28>)
 800a756:	5cd3      	ldrb	r3, [r2, r3]
 800a758:	f003 031f 	and.w	r3, r3, #31
 800a75c:	fa21 f303 	lsr.w	r3, r1, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 800a760:	4618      	mov	r0, r3
 800a762:	bd80      	pop	{r7, pc}
 800a764:	58024400 	.word	0x58024400
 800a768:	0801affc 	.word	0x0801affc

0800a76c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800a76c:	b580      	push	{r7, lr}
 800a76e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 800a770:	f7ff ffb6 	bl	800a6e0 <HAL_RCC_GetHCLKFreq>
 800a774:	4601      	mov	r1, r0
 800a776:	4b06      	ldr	r3, [pc, #24]	; (800a790 <HAL_RCC_GetPCLK2Freq+0x24>)
 800a778:	69db      	ldr	r3, [r3, #28]
 800a77a:	0a1b      	lsrs	r3, r3, #8
 800a77c:	f003 0307 	and.w	r3, r3, #7
 800a780:	4a04      	ldr	r2, [pc, #16]	; (800a794 <HAL_RCC_GetPCLK2Freq+0x28>)
 800a782:	5cd3      	ldrb	r3, [r2, r3]
 800a784:	f003 031f 	and.w	r3, r3, #31
 800a788:	fa21 f303 	lsr.w	r3, r1, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 800a78c:	4618      	mov	r0, r3
 800a78e:	bd80      	pop	{r7, pc}
 800a790:	58024400 	.word	0x58024400
 800a794:	0801affc 	.word	0x0801affc

0800a798 <HAL_RCC_NMI_IRQHandler>:
  * @brief This function handles the RCC CSS interrupt request.
  * @note This API should be called under the NMI_Handler().
  * @retval None
  */
void HAL_RCC_NMI_IRQHandler(void)
{
 800a798:	b580      	push	{r7, lr}
 800a79a:	af00      	add	r7, sp, #0
  /* Check RCC CSSF flag  */
  if(__HAL_RCC_GET_IT(RCC_IT_CSS))
 800a79c:	4b07      	ldr	r3, [pc, #28]	; (800a7bc <HAL_RCC_NMI_IRQHandler+0x24>)
 800a79e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a7a0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800a7a4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a7a8:	d105      	bne.n	800a7b6 <HAL_RCC_NMI_IRQHandler+0x1e>
  {
    /* RCC Clock Security System interrupt user callback */
    HAL_RCC_CCSCallback();
 800a7aa:	f000 f809 	bl	800a7c0 <HAL_RCC_CSSCallback>

    /* Clear RCC CSS pending bit */
    __HAL_RCC_CLEAR_IT(RCC_IT_CSS);
 800a7ae:	4b03      	ldr	r3, [pc, #12]	; (800a7bc <HAL_RCC_NMI_IRQHandler+0x24>)
 800a7b0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800a7b4:	669a      	str	r2, [r3, #104]	; 0x68
  }
}
 800a7b6:	bf00      	nop
 800a7b8:	bd80      	pop	{r7, pc}
 800a7ba:	bf00      	nop
 800a7bc:	58024400 	.word	0x58024400

0800a7c0 <HAL_RCC_CSSCallback>:
/**
  * @brief  RCC Clock Security System interrupt callback
  * @retval none
  */
__weak void HAL_RCC_CCSCallback(void)
{
 800a7c0:	b480      	push	{r7}
 800a7c2:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_RCC_CCSCallback could be implemented in the user file
   */
}
 800a7c4:	bf00      	nop
 800a7c6:	46bd      	mov	sp, r7
 800a7c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7cc:	4770      	bx	lr
	...

0800a7d0 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800a7d0:	b580      	push	{r7, lr}
 800a7d2:	b086      	sub	sp, #24
 800a7d4:	af00      	add	r7, sp, #0
 800a7d6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800a7d8:	2300      	movs	r3, #0
 800a7da:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800a7dc:	2300      	movs	r3, #0
 800a7de:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800a7e0:	687b      	ldr	r3, [r7, #4]
 800a7e2:	681b      	ldr	r3, [r3, #0]
 800a7e4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800a7e8:	2b00      	cmp	r3, #0
 800a7ea:	d03d      	beq.n	800a868 <HAL_RCCEx_PeriphCLKConfig+0x98>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 800a7ec:	687b      	ldr	r3, [r7, #4]
 800a7ee:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a7f0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a7f4:	d013      	beq.n	800a81e <HAL_RCCEx_PeriphCLKConfig+0x4e>
 800a7f6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a7fa:	d802      	bhi.n	800a802 <HAL_RCCEx_PeriphCLKConfig+0x32>
 800a7fc:	2b00      	cmp	r3, #0
 800a7fe:	d007      	beq.n	800a810 <HAL_RCCEx_PeriphCLKConfig+0x40>
 800a800:	e01f      	b.n	800a842 <HAL_RCCEx_PeriphCLKConfig+0x72>
 800a802:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800a806:	d013      	beq.n	800a830 <HAL_RCCEx_PeriphCLKConfig+0x60>
 800a808:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800a80c:	d01c      	beq.n	800a848 <HAL_RCCEx_PeriphCLKConfig+0x78>
 800a80e:	e018      	b.n	800a842 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a810:	4baf      	ldr	r3, [pc, #700]	; (800aad0 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800a812:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a814:	4aae      	ldr	r2, [pc, #696]	; (800aad0 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800a816:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a81a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 800a81c:	e015      	b.n	800a84a <HAL_RCCEx_PeriphCLKConfig+0x7a>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800a81e:	687b      	ldr	r3, [r7, #4]
 800a820:	3304      	adds	r3, #4
 800a822:	2102      	movs	r1, #2
 800a824:	4618      	mov	r0, r3
 800a826:	f001 fd33 	bl	800c290 <RCCEx_PLL2_Config>
 800a82a:	4603      	mov	r3, r0
 800a82c:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 800a82e:	e00c      	b.n	800a84a <HAL_RCCEx_PeriphCLKConfig+0x7a>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800a830:	687b      	ldr	r3, [r7, #4]
 800a832:	3324      	adds	r3, #36	; 0x24
 800a834:	2102      	movs	r1, #2
 800a836:	4618      	mov	r0, r3
 800a838:	f001 fddc 	bl	800c3f4 <RCCEx_PLL3_Config>
 800a83c:	4603      	mov	r3, r0
 800a83e:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 800a840:	e003      	b.n	800a84a <HAL_RCCEx_PeriphCLKConfig+0x7a>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800a842:	2301      	movs	r3, #1
 800a844:	75fb      	strb	r3, [r7, #23]
      break;
 800a846:	e000      	b.n	800a84a <HAL_RCCEx_PeriphCLKConfig+0x7a>
      break;
 800a848:	bf00      	nop
    }

    if(ret == HAL_OK)
 800a84a:	7dfb      	ldrb	r3, [r7, #23]
 800a84c:	2b00      	cmp	r3, #0
 800a84e:	d109      	bne.n	800a864 <HAL_RCCEx_PeriphCLKConfig+0x94>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 800a850:	4b9f      	ldr	r3, [pc, #636]	; (800aad0 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800a852:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a854:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800a858:	687b      	ldr	r3, [r7, #4]
 800a85a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a85c:	499c      	ldr	r1, [pc, #624]	; (800aad0 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800a85e:	4313      	orrs	r3, r2
 800a860:	650b      	str	r3, [r1, #80]	; 0x50
 800a862:	e001      	b.n	800a868 <HAL_RCCEx_PeriphCLKConfig+0x98>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a864:	7dfb      	ldrb	r3, [r7, #23]
 800a866:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800a868:	687b      	ldr	r3, [r7, #4]
 800a86a:	681b      	ldr	r3, [r3, #0]
 800a86c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a870:	2b00      	cmp	r3, #0
 800a872:	d03d      	beq.n	800a8f0 <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 800a874:	687b      	ldr	r3, [r7, #4]
 800a876:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a878:	2b04      	cmp	r3, #4
 800a87a:	d826      	bhi.n	800a8ca <HAL_RCCEx_PeriphCLKConfig+0xfa>
 800a87c:	a201      	add	r2, pc, #4	; (adr r2, 800a884 <HAL_RCCEx_PeriphCLKConfig+0xb4>)
 800a87e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a882:	bf00      	nop
 800a884:	0800a899 	.word	0x0800a899
 800a888:	0800a8a7 	.word	0x0800a8a7
 800a88c:	0800a8b9 	.word	0x0800a8b9
 800a890:	0800a8d1 	.word	0x0800a8d1
 800a894:	0800a8d1 	.word	0x0800a8d1
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a898:	4b8d      	ldr	r3, [pc, #564]	; (800aad0 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800a89a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a89c:	4a8c      	ldr	r2, [pc, #560]	; (800aad0 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800a89e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a8a2:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800a8a4:	e015      	b.n	800a8d2 <HAL_RCCEx_PeriphCLKConfig+0x102>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800a8a6:	687b      	ldr	r3, [r7, #4]
 800a8a8:	3304      	adds	r3, #4
 800a8aa:	2100      	movs	r1, #0
 800a8ac:	4618      	mov	r0, r3
 800a8ae:	f001 fcef 	bl	800c290 <RCCEx_PLL2_Config>
 800a8b2:	4603      	mov	r3, r0
 800a8b4:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800a8b6:	e00c      	b.n	800a8d2 <HAL_RCCEx_PeriphCLKConfig+0x102>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800a8b8:	687b      	ldr	r3, [r7, #4]
 800a8ba:	3324      	adds	r3, #36	; 0x24
 800a8bc:	2100      	movs	r1, #0
 800a8be:	4618      	mov	r0, r3
 800a8c0:	f001 fd98 	bl	800c3f4 <RCCEx_PLL3_Config>
 800a8c4:	4603      	mov	r3, r0
 800a8c6:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800a8c8:	e003      	b.n	800a8d2 <HAL_RCCEx_PeriphCLKConfig+0x102>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800a8ca:	2301      	movs	r3, #1
 800a8cc:	75fb      	strb	r3, [r7, #23]
      break;
 800a8ce:	e000      	b.n	800a8d2 <HAL_RCCEx_PeriphCLKConfig+0x102>
      break;
 800a8d0:	bf00      	nop
    }

    if(ret == HAL_OK)
 800a8d2:	7dfb      	ldrb	r3, [r7, #23]
 800a8d4:	2b00      	cmp	r3, #0
 800a8d6:	d109      	bne.n	800a8ec <HAL_RCCEx_PeriphCLKConfig+0x11c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800a8d8:	4b7d      	ldr	r3, [pc, #500]	; (800aad0 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800a8da:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a8dc:	f023 0207 	bic.w	r2, r3, #7
 800a8e0:	687b      	ldr	r3, [r7, #4]
 800a8e2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a8e4:	497a      	ldr	r1, [pc, #488]	; (800aad0 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800a8e6:	4313      	orrs	r3, r2
 800a8e8:	650b      	str	r3, [r1, #80]	; 0x50
 800a8ea:	e001      	b.n	800a8f0 <HAL_RCCEx_PeriphCLKConfig+0x120>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a8ec:	7dfb      	ldrb	r3, [r7, #23]
 800a8ee:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 800a8f0:	687b      	ldr	r3, [r7, #4]
 800a8f2:	681b      	ldr	r3, [r3, #0]
 800a8f4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800a8f8:	2b00      	cmp	r3, #0
 800a8fa:	d03e      	beq.n	800a97a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 800a8fc:	687b      	ldr	r3, [r7, #4]
 800a8fe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a900:	2b80      	cmp	r3, #128	; 0x80
 800a902:	d01c      	beq.n	800a93e <HAL_RCCEx_PeriphCLKConfig+0x16e>
 800a904:	2b80      	cmp	r3, #128	; 0x80
 800a906:	d804      	bhi.n	800a912 <HAL_RCCEx_PeriphCLKConfig+0x142>
 800a908:	2b00      	cmp	r3, #0
 800a90a:	d008      	beq.n	800a91e <HAL_RCCEx_PeriphCLKConfig+0x14e>
 800a90c:	2b40      	cmp	r3, #64	; 0x40
 800a90e:	d00d      	beq.n	800a92c <HAL_RCCEx_PeriphCLKConfig+0x15c>
 800a910:	e01e      	b.n	800a950 <HAL_RCCEx_PeriphCLKConfig+0x180>
 800a912:	2bc0      	cmp	r3, #192	; 0xc0
 800a914:	d01f      	beq.n	800a956 <HAL_RCCEx_PeriphCLKConfig+0x186>
 800a916:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a91a:	d01e      	beq.n	800a95a <HAL_RCCEx_PeriphCLKConfig+0x18a>
 800a91c:	e018      	b.n	800a950 <HAL_RCCEx_PeriphCLKConfig+0x180>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a91e:	4b6c      	ldr	r3, [pc, #432]	; (800aad0 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800a920:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a922:	4a6b      	ldr	r2, [pc, #428]	; (800aad0 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800a924:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a928:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 800a92a:	e017      	b.n	800a95c <HAL_RCCEx_PeriphCLKConfig+0x18c>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800a92c:	687b      	ldr	r3, [r7, #4]
 800a92e:	3304      	adds	r3, #4
 800a930:	2100      	movs	r1, #0
 800a932:	4618      	mov	r0, r3
 800a934:	f001 fcac 	bl	800c290 <RCCEx_PLL2_Config>
 800a938:	4603      	mov	r3, r0
 800a93a:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 800a93c:	e00e      	b.n	800a95c <HAL_RCCEx_PeriphCLKConfig+0x18c>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800a93e:	687b      	ldr	r3, [r7, #4]
 800a940:	3324      	adds	r3, #36	; 0x24
 800a942:	2100      	movs	r1, #0
 800a944:	4618      	mov	r0, r3
 800a946:	f001 fd55 	bl	800c3f4 <RCCEx_PLL3_Config>
 800a94a:	4603      	mov	r3, r0
 800a94c:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 800a94e:	e005      	b.n	800a95c <HAL_RCCEx_PeriphCLKConfig+0x18c>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800a950:	2301      	movs	r3, #1
 800a952:	75fb      	strb	r3, [r7, #23]
      break;
 800a954:	e002      	b.n	800a95c <HAL_RCCEx_PeriphCLKConfig+0x18c>
      break;
 800a956:	bf00      	nop
 800a958:	e000      	b.n	800a95c <HAL_RCCEx_PeriphCLKConfig+0x18c>
      break;
 800a95a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800a95c:	7dfb      	ldrb	r3, [r7, #23]
 800a95e:	2b00      	cmp	r3, #0
 800a960:	d109      	bne.n	800a976 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 800a962:	4b5b      	ldr	r3, [pc, #364]	; (800aad0 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800a964:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a966:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 800a96a:	687b      	ldr	r3, [r7, #4]
 800a96c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a96e:	4958      	ldr	r1, [pc, #352]	; (800aad0 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800a970:	4313      	orrs	r3, r2
 800a972:	650b      	str	r3, [r1, #80]	; 0x50
 800a974:	e001      	b.n	800a97a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a976:	7dfb      	ldrb	r3, [r7, #23]
 800a978:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 800a97a:	687b      	ldr	r3, [r7, #4]
 800a97c:	681b      	ldr	r3, [r3, #0]
 800a97e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800a982:	2b00      	cmp	r3, #0
 800a984:	d044      	beq.n	800aa10 <HAL_RCCEx_PeriphCLKConfig+0x240>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 800a986:	687b      	ldr	r3, [r7, #4]
 800a988:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800a98c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800a990:	d01f      	beq.n	800a9d2 <HAL_RCCEx_PeriphCLKConfig+0x202>
 800a992:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800a996:	d805      	bhi.n	800a9a4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
 800a998:	2b00      	cmp	r3, #0
 800a99a:	d00a      	beq.n	800a9b2 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 800a99c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800a9a0:	d00e      	beq.n	800a9c0 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
 800a9a2:	e01f      	b.n	800a9e4 <HAL_RCCEx_PeriphCLKConfig+0x214>
 800a9a4:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800a9a8:	d01f      	beq.n	800a9ea <HAL_RCCEx_PeriphCLKConfig+0x21a>
 800a9aa:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800a9ae:	d01e      	beq.n	800a9ee <HAL_RCCEx_PeriphCLKConfig+0x21e>
 800a9b0:	e018      	b.n	800a9e4 <HAL_RCCEx_PeriphCLKConfig+0x214>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a9b2:	4b47      	ldr	r3, [pc, #284]	; (800aad0 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800a9b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a9b6:	4a46      	ldr	r2, [pc, #280]	; (800aad0 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800a9b8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a9bc:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800a9be:	e017      	b.n	800a9f0 <HAL_RCCEx_PeriphCLKConfig+0x220>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800a9c0:	687b      	ldr	r3, [r7, #4]
 800a9c2:	3304      	adds	r3, #4
 800a9c4:	2100      	movs	r1, #0
 800a9c6:	4618      	mov	r0, r3
 800a9c8:	f001 fc62 	bl	800c290 <RCCEx_PLL2_Config>
 800a9cc:	4603      	mov	r3, r0
 800a9ce:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 800a9d0:	e00e      	b.n	800a9f0 <HAL_RCCEx_PeriphCLKConfig+0x220>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800a9d2:	687b      	ldr	r3, [r7, #4]
 800a9d4:	3324      	adds	r3, #36	; 0x24
 800a9d6:	2100      	movs	r1, #0
 800a9d8:	4618      	mov	r0, r3
 800a9da:	f001 fd0b 	bl	800c3f4 <RCCEx_PLL3_Config>
 800a9de:	4603      	mov	r3, r0
 800a9e0:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800a9e2:	e005      	b.n	800a9f0 <HAL_RCCEx_PeriphCLKConfig+0x220>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 800a9e4:	2301      	movs	r3, #1
 800a9e6:	75fb      	strb	r3, [r7, #23]
      break;
 800a9e8:	e002      	b.n	800a9f0 <HAL_RCCEx_PeriphCLKConfig+0x220>
      break;
 800a9ea:	bf00      	nop
 800a9ec:	e000      	b.n	800a9f0 <HAL_RCCEx_PeriphCLKConfig+0x220>
      break;
 800a9ee:	bf00      	nop
    }

    if(ret == HAL_OK)
 800a9f0:	7dfb      	ldrb	r3, [r7, #23]
 800a9f2:	2b00      	cmp	r3, #0
 800a9f4:	d10a      	bne.n	800aa0c <HAL_RCCEx_PeriphCLKConfig+0x23c>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 800a9f6:	4b36      	ldr	r3, [pc, #216]	; (800aad0 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800a9f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a9fa:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 800a9fe:	687b      	ldr	r3, [r7, #4]
 800aa00:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800aa04:	4932      	ldr	r1, [pc, #200]	; (800aad0 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800aa06:	4313      	orrs	r3, r2
 800aa08:	658b      	str	r3, [r1, #88]	; 0x58
 800aa0a:	e001      	b.n	800aa10 <HAL_RCCEx_PeriphCLKConfig+0x240>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800aa0c:	7dfb      	ldrb	r3, [r7, #23]
 800aa0e:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 800aa10:	687b      	ldr	r3, [r7, #4]
 800aa12:	681b      	ldr	r3, [r3, #0]
 800aa14:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800aa18:	2b00      	cmp	r3, #0
 800aa1a:	d044      	beq.n	800aaa6 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 800aa1c:	687b      	ldr	r3, [r7, #4]
 800aa1e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800aa22:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800aa26:	d01f      	beq.n	800aa68 <HAL_RCCEx_PeriphCLKConfig+0x298>
 800aa28:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800aa2c:	d805      	bhi.n	800aa3a <HAL_RCCEx_PeriphCLKConfig+0x26a>
 800aa2e:	2b00      	cmp	r3, #0
 800aa30:	d00a      	beq.n	800aa48 <HAL_RCCEx_PeriphCLKConfig+0x278>
 800aa32:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800aa36:	d00e      	beq.n	800aa56 <HAL_RCCEx_PeriphCLKConfig+0x286>
 800aa38:	e01f      	b.n	800aa7a <HAL_RCCEx_PeriphCLKConfig+0x2aa>
 800aa3a:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800aa3e:	d01f      	beq.n	800aa80 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 800aa40:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800aa44:	d01e      	beq.n	800aa84 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 800aa46:	e018      	b.n	800aa7a <HAL_RCCEx_PeriphCLKConfig+0x2aa>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800aa48:	4b21      	ldr	r3, [pc, #132]	; (800aad0 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800aa4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aa4c:	4a20      	ldr	r2, [pc, #128]	; (800aad0 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800aa4e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800aa52:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800aa54:	e017      	b.n	800aa86 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800aa56:	687b      	ldr	r3, [r7, #4]
 800aa58:	3304      	adds	r3, #4
 800aa5a:	2100      	movs	r1, #0
 800aa5c:	4618      	mov	r0, r3
 800aa5e:	f001 fc17 	bl	800c290 <RCCEx_PLL2_Config>
 800aa62:	4603      	mov	r3, r0
 800aa64:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 800aa66:	e00e      	b.n	800aa86 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800aa68:	687b      	ldr	r3, [r7, #4]
 800aa6a:	3324      	adds	r3, #36	; 0x24
 800aa6c:	2100      	movs	r1, #0
 800aa6e:	4618      	mov	r0, r3
 800aa70:	f001 fcc0 	bl	800c3f4 <RCCEx_PLL3_Config>
 800aa74:	4603      	mov	r3, r0
 800aa76:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800aa78:	e005      	b.n	800aa86 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 800aa7a:	2301      	movs	r3, #1
 800aa7c:	75fb      	strb	r3, [r7, #23]
      break;
 800aa7e:	e002      	b.n	800aa86 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
      break;
 800aa80:	bf00      	nop
 800aa82:	e000      	b.n	800aa86 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
      break;
 800aa84:	bf00      	nop
    }

    if(ret == HAL_OK)
 800aa86:	7dfb      	ldrb	r3, [r7, #23]
 800aa88:	2b00      	cmp	r3, #0
 800aa8a:	d10a      	bne.n	800aaa2 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 800aa8c:	4b10      	ldr	r3, [pc, #64]	; (800aad0 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800aa8e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800aa90:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 800aa94:	687b      	ldr	r3, [r7, #4]
 800aa96:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800aa9a:	490d      	ldr	r1, [pc, #52]	; (800aad0 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800aa9c:	4313      	orrs	r3, r2
 800aa9e:	658b      	str	r3, [r1, #88]	; 0x58
 800aaa0:	e001      	b.n	800aaa6 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800aaa2:	7dfb      	ldrb	r3, [r7, #23]
 800aaa4:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 800aaa6:	687b      	ldr	r3, [r7, #4]
 800aaa8:	681b      	ldr	r3, [r3, #0]
 800aaaa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800aaae:	2b00      	cmp	r3, #0
 800aab0:	d035      	beq.n	800ab1e <HAL_RCCEx_PeriphCLKConfig+0x34e>
  {
    switch(PeriphClkInit->QspiClockSelection)
 800aab2:	687b      	ldr	r3, [r7, #4]
 800aab4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800aab6:	2b10      	cmp	r3, #16
 800aab8:	d00c      	beq.n	800aad4 <HAL_RCCEx_PeriphCLKConfig+0x304>
 800aaba:	2b10      	cmp	r3, #16
 800aabc:	d802      	bhi.n	800aac4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
 800aabe:	2b00      	cmp	r3, #0
 800aac0:	d01b      	beq.n	800aafa <HAL_RCCEx_PeriphCLKConfig+0x32a>
 800aac2:	e017      	b.n	800aaf4 <HAL_RCCEx_PeriphCLKConfig+0x324>
 800aac4:	2b20      	cmp	r3, #32
 800aac6:	d00c      	beq.n	800aae2 <HAL_RCCEx_PeriphCLKConfig+0x312>
 800aac8:	2b30      	cmp	r3, #48	; 0x30
 800aaca:	d018      	beq.n	800aafe <HAL_RCCEx_PeriphCLKConfig+0x32e>
 800aacc:	e012      	b.n	800aaf4 <HAL_RCCEx_PeriphCLKConfig+0x324>
 800aace:	bf00      	nop
 800aad0:	58024400 	.word	0x58024400
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800aad4:	4baf      	ldr	r3, [pc, #700]	; (800ad94 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 800aad6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aad8:	4aae      	ldr	r2, [pc, #696]	; (800ad94 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 800aada:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800aade:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 800aae0:	e00e      	b.n	800ab00 <HAL_RCCEx_PeriphCLKConfig+0x330>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800aae2:	687b      	ldr	r3, [r7, #4]
 800aae4:	3304      	adds	r3, #4
 800aae6:	2102      	movs	r1, #2
 800aae8:	4618      	mov	r0, r3
 800aaea:	f001 fbd1 	bl	800c290 <RCCEx_PLL2_Config>
 800aaee:	4603      	mov	r3, r0
 800aaf0:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 800aaf2:	e005      	b.n	800ab00 <HAL_RCCEx_PeriphCLKConfig+0x330>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 800aaf4:	2301      	movs	r3, #1
 800aaf6:	75fb      	strb	r3, [r7, #23]
      break;
 800aaf8:	e002      	b.n	800ab00 <HAL_RCCEx_PeriphCLKConfig+0x330>
      break;
 800aafa:	bf00      	nop
 800aafc:	e000      	b.n	800ab00 <HAL_RCCEx_PeriphCLKConfig+0x330>
      break;
 800aafe:	bf00      	nop
    }

    if(ret == HAL_OK)
 800ab00:	7dfb      	ldrb	r3, [r7, #23]
 800ab02:	2b00      	cmp	r3, #0
 800ab04:	d109      	bne.n	800ab1a <HAL_RCCEx_PeriphCLKConfig+0x34a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 800ab06:	4ba3      	ldr	r3, [pc, #652]	; (800ad94 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 800ab08:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ab0a:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800ab0e:	687b      	ldr	r3, [r7, #4]
 800ab10:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800ab12:	49a0      	ldr	r1, [pc, #640]	; (800ad94 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 800ab14:	4313      	orrs	r3, r2
 800ab16:	64cb      	str	r3, [r1, #76]	; 0x4c
 800ab18:	e001      	b.n	800ab1e <HAL_RCCEx_PeriphCLKConfig+0x34e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ab1a:	7dfb      	ldrb	r3, [r7, #23]
 800ab1c:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 800ab1e:	687b      	ldr	r3, [r7, #4]
 800ab20:	681b      	ldr	r3, [r3, #0]
 800ab22:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800ab26:	2b00      	cmp	r3, #0
 800ab28:	d042      	beq.n	800abb0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 800ab2a:	687b      	ldr	r3, [r7, #4]
 800ab2c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800ab2e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800ab32:	d01f      	beq.n	800ab74 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
 800ab34:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800ab38:	d805      	bhi.n	800ab46 <HAL_RCCEx_PeriphCLKConfig+0x376>
 800ab3a:	2b00      	cmp	r3, #0
 800ab3c:	d00a      	beq.n	800ab54 <HAL_RCCEx_PeriphCLKConfig+0x384>
 800ab3e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ab42:	d00e      	beq.n	800ab62 <HAL_RCCEx_PeriphCLKConfig+0x392>
 800ab44:	e01f      	b.n	800ab86 <HAL_RCCEx_PeriphCLKConfig+0x3b6>
 800ab46:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800ab4a:	d01f      	beq.n	800ab8c <HAL_RCCEx_PeriphCLKConfig+0x3bc>
 800ab4c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800ab50:	d01e      	beq.n	800ab90 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
 800ab52:	e018      	b.n	800ab86 <HAL_RCCEx_PeriphCLKConfig+0x3b6>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800ab54:	4b8f      	ldr	r3, [pc, #572]	; (800ad94 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 800ab56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ab58:	4a8e      	ldr	r2, [pc, #568]	; (800ad94 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 800ab5a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800ab5e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 800ab60:	e017      	b.n	800ab92 <HAL_RCCEx_PeriphCLKConfig+0x3c2>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800ab62:	687b      	ldr	r3, [r7, #4]
 800ab64:	3304      	adds	r3, #4
 800ab66:	2100      	movs	r1, #0
 800ab68:	4618      	mov	r0, r3
 800ab6a:	f001 fb91 	bl	800c290 <RCCEx_PLL2_Config>
 800ab6e:	4603      	mov	r3, r0
 800ab70:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 800ab72:	e00e      	b.n	800ab92 <HAL_RCCEx_PeriphCLKConfig+0x3c2>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800ab74:	687b      	ldr	r3, [r7, #4]
 800ab76:	3324      	adds	r3, #36	; 0x24
 800ab78:	2100      	movs	r1, #0
 800ab7a:	4618      	mov	r0, r3
 800ab7c:	f001 fc3a 	bl	800c3f4 <RCCEx_PLL3_Config>
 800ab80:	4603      	mov	r3, r0
 800ab82:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 800ab84:	e005      	b.n	800ab92 <HAL_RCCEx_PeriphCLKConfig+0x3c2>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800ab86:	2301      	movs	r3, #1
 800ab88:	75fb      	strb	r3, [r7, #23]
      break;
 800ab8a:	e002      	b.n	800ab92 <HAL_RCCEx_PeriphCLKConfig+0x3c2>
      break;
 800ab8c:	bf00      	nop
 800ab8e:	e000      	b.n	800ab92 <HAL_RCCEx_PeriphCLKConfig+0x3c2>
      break;
 800ab90:	bf00      	nop
    }

    if(ret == HAL_OK)
 800ab92:	7dfb      	ldrb	r3, [r7, #23]
 800ab94:	2b00      	cmp	r3, #0
 800ab96:	d109      	bne.n	800abac <HAL_RCCEx_PeriphCLKConfig+0x3dc>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 800ab98:	4b7e      	ldr	r3, [pc, #504]	; (800ad94 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 800ab9a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ab9c:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 800aba0:	687b      	ldr	r3, [r7, #4]
 800aba2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800aba4:	497b      	ldr	r1, [pc, #492]	; (800ad94 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 800aba6:	4313      	orrs	r3, r2
 800aba8:	650b      	str	r3, [r1, #80]	; 0x50
 800abaa:	e001      	b.n	800abb0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800abac:	7dfb      	ldrb	r3, [r7, #23]
 800abae:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 800abb0:	687b      	ldr	r3, [r7, #4]
 800abb2:	681b      	ldr	r3, [r3, #0]
 800abb4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800abb8:	2b00      	cmp	r3, #0
 800abba:	d042      	beq.n	800ac42 <HAL_RCCEx_PeriphCLKConfig+0x472>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 800abbc:	687b      	ldr	r3, [r7, #4]
 800abbe:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800abc0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800abc4:	d01b      	beq.n	800abfe <HAL_RCCEx_PeriphCLKConfig+0x42e>
 800abc6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800abca:	d805      	bhi.n	800abd8 <HAL_RCCEx_PeriphCLKConfig+0x408>
 800abcc:	2b00      	cmp	r3, #0
 800abce:	d022      	beq.n	800ac16 <HAL_RCCEx_PeriphCLKConfig+0x446>
 800abd0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800abd4:	d00a      	beq.n	800abec <HAL_RCCEx_PeriphCLKConfig+0x41c>
 800abd6:	e01b      	b.n	800ac10 <HAL_RCCEx_PeriphCLKConfig+0x440>
 800abd8:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800abdc:	d01d      	beq.n	800ac1a <HAL_RCCEx_PeriphCLKConfig+0x44a>
 800abde:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800abe2:	d01c      	beq.n	800ac1e <HAL_RCCEx_PeriphCLKConfig+0x44e>
 800abe4:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800abe8:	d01b      	beq.n	800ac22 <HAL_RCCEx_PeriphCLKConfig+0x452>
 800abea:	e011      	b.n	800ac10 <HAL_RCCEx_PeriphCLKConfig+0x440>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800abec:	687b      	ldr	r3, [r7, #4]
 800abee:	3304      	adds	r3, #4
 800abf0:	2101      	movs	r1, #1
 800abf2:	4618      	mov	r0, r3
 800abf4:	f001 fb4c 	bl	800c290 <RCCEx_PLL2_Config>
 800abf8:	4603      	mov	r3, r0
 800abfa:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 800abfc:	e012      	b.n	800ac24 <HAL_RCCEx_PeriphCLKConfig+0x454>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800abfe:	687b      	ldr	r3, [r7, #4]
 800ac00:	3324      	adds	r3, #36	; 0x24
 800ac02:	2101      	movs	r1, #1
 800ac04:	4618      	mov	r0, r3
 800ac06:	f001 fbf5 	bl	800c3f4 <RCCEx_PLL3_Config>
 800ac0a:	4603      	mov	r3, r0
 800ac0c:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 800ac0e:	e009      	b.n	800ac24 <HAL_RCCEx_PeriphCLKConfig+0x454>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800ac10:	2301      	movs	r3, #1
 800ac12:	75fb      	strb	r3, [r7, #23]
      break;
 800ac14:	e006      	b.n	800ac24 <HAL_RCCEx_PeriphCLKConfig+0x454>
      break;
 800ac16:	bf00      	nop
 800ac18:	e004      	b.n	800ac24 <HAL_RCCEx_PeriphCLKConfig+0x454>
      break;
 800ac1a:	bf00      	nop
 800ac1c:	e002      	b.n	800ac24 <HAL_RCCEx_PeriphCLKConfig+0x454>
      break;
 800ac1e:	bf00      	nop
 800ac20:	e000      	b.n	800ac24 <HAL_RCCEx_PeriphCLKConfig+0x454>
      break;
 800ac22:	bf00      	nop
    }

    if(ret == HAL_OK)
 800ac24:	7dfb      	ldrb	r3, [r7, #23]
 800ac26:	2b00      	cmp	r3, #0
 800ac28:	d109      	bne.n	800ac3e <HAL_RCCEx_PeriphCLKConfig+0x46e>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 800ac2a:	4b5a      	ldr	r3, [pc, #360]	; (800ad94 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 800ac2c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ac2e:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 800ac32:	687b      	ldr	r3, [r7, #4]
 800ac34:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800ac36:	4957      	ldr	r1, [pc, #348]	; (800ad94 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 800ac38:	4313      	orrs	r3, r2
 800ac3a:	650b      	str	r3, [r1, #80]	; 0x50
 800ac3c:	e001      	b.n	800ac42 <HAL_RCCEx_PeriphCLKConfig+0x472>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ac3e:	7dfb      	ldrb	r3, [r7, #23]
 800ac40:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 800ac42:	687b      	ldr	r3, [r7, #4]
 800ac44:	681b      	ldr	r3, [r3, #0]
 800ac46:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800ac4a:	2b00      	cmp	r3, #0
 800ac4c:	d044      	beq.n	800acd8 <HAL_RCCEx_PeriphCLKConfig+0x508>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 800ac4e:	687b      	ldr	r3, [r7, #4]
 800ac50:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800ac54:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800ac58:	d01b      	beq.n	800ac92 <HAL_RCCEx_PeriphCLKConfig+0x4c2>
 800ac5a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800ac5e:	d805      	bhi.n	800ac6c <HAL_RCCEx_PeriphCLKConfig+0x49c>
 800ac60:	2b00      	cmp	r3, #0
 800ac62:	d022      	beq.n	800acaa <HAL_RCCEx_PeriphCLKConfig+0x4da>
 800ac64:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800ac68:	d00a      	beq.n	800ac80 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
 800ac6a:	e01b      	b.n	800aca4 <HAL_RCCEx_PeriphCLKConfig+0x4d4>
 800ac6c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800ac70:	d01d      	beq.n	800acae <HAL_RCCEx_PeriphCLKConfig+0x4de>
 800ac72:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800ac76:	d01c      	beq.n	800acb2 <HAL_RCCEx_PeriphCLKConfig+0x4e2>
 800ac78:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800ac7c:	d01b      	beq.n	800acb6 <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 800ac7e:	e011      	b.n	800aca4 <HAL_RCCEx_PeriphCLKConfig+0x4d4>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800ac80:	687b      	ldr	r3, [r7, #4]
 800ac82:	3304      	adds	r3, #4
 800ac84:	2101      	movs	r1, #1
 800ac86:	4618      	mov	r0, r3
 800ac88:	f001 fb02 	bl	800c290 <RCCEx_PLL2_Config>
 800ac8c:	4603      	mov	r3, r0
 800ac8e:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 800ac90:	e012      	b.n	800acb8 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800ac92:	687b      	ldr	r3, [r7, #4]
 800ac94:	3324      	adds	r3, #36	; 0x24
 800ac96:	2101      	movs	r1, #1
 800ac98:	4618      	mov	r0, r3
 800ac9a:	f001 fbab 	bl	800c3f4 <RCCEx_PLL3_Config>
 800ac9e:	4603      	mov	r3, r0
 800aca0:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 800aca2:	e009      	b.n	800acb8 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 800aca4:	2301      	movs	r3, #1
 800aca6:	75fb      	strb	r3, [r7, #23]
      break;
 800aca8:	e006      	b.n	800acb8 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      break;
 800acaa:	bf00      	nop
 800acac:	e004      	b.n	800acb8 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      break;
 800acae:	bf00      	nop
 800acb0:	e002      	b.n	800acb8 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      break;
 800acb2:	bf00      	nop
 800acb4:	e000      	b.n	800acb8 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      break;
 800acb6:	bf00      	nop
    }

    if(ret == HAL_OK)
 800acb8:	7dfb      	ldrb	r3, [r7, #23]
 800acba:	2b00      	cmp	r3, #0
 800acbc:	d10a      	bne.n	800acd4 <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 800acbe:	4b35      	ldr	r3, [pc, #212]	; (800ad94 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 800acc0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800acc2:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 800acc6:	687b      	ldr	r3, [r7, #4]
 800acc8:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800accc:	4931      	ldr	r1, [pc, #196]	; (800ad94 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 800acce:	4313      	orrs	r3, r2
 800acd0:	658b      	str	r3, [r1, #88]	; 0x58
 800acd2:	e001      	b.n	800acd8 <HAL_RCCEx_PeriphCLKConfig+0x508>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800acd4:	7dfb      	ldrb	r3, [r7, #23]
 800acd6:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800acd8:	687b      	ldr	r3, [r7, #4]
 800acda:	681b      	ldr	r3, [r3, #0]
 800acdc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800ace0:	2b00      	cmp	r3, #0
 800ace2:	d02d      	beq.n	800ad40 <HAL_RCCEx_PeriphCLKConfig+0x570>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 800ace4:	687b      	ldr	r3, [r7, #4]
 800ace6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ace8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800acec:	d005      	beq.n	800acfa <HAL_RCCEx_PeriphCLKConfig+0x52a>
 800acee:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800acf2:	d009      	beq.n	800ad08 <HAL_RCCEx_PeriphCLKConfig+0x538>
 800acf4:	2b00      	cmp	r3, #0
 800acf6:	d013      	beq.n	800ad20 <HAL_RCCEx_PeriphCLKConfig+0x550>
 800acf8:	e00f      	b.n	800ad1a <HAL_RCCEx_PeriphCLKConfig+0x54a>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800acfa:	4b26      	ldr	r3, [pc, #152]	; (800ad94 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 800acfc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800acfe:	4a25      	ldr	r2, [pc, #148]	; (800ad94 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 800ad00:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800ad04:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 800ad06:	e00c      	b.n	800ad22 <HAL_RCCEx_PeriphCLKConfig+0x552>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800ad08:	687b      	ldr	r3, [r7, #4]
 800ad0a:	3304      	adds	r3, #4
 800ad0c:	2101      	movs	r1, #1
 800ad0e:	4618      	mov	r0, r3
 800ad10:	f001 fabe 	bl	800c290 <RCCEx_PLL2_Config>
 800ad14:	4603      	mov	r3, r0
 800ad16:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 800ad18:	e003      	b.n	800ad22 <HAL_RCCEx_PeriphCLKConfig+0x552>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800ad1a:	2301      	movs	r3, #1
 800ad1c:	75fb      	strb	r3, [r7, #23]
      break;
 800ad1e:	e000      	b.n	800ad22 <HAL_RCCEx_PeriphCLKConfig+0x552>
      break;
 800ad20:	bf00      	nop
    }

    if(ret == HAL_OK)
 800ad22:	7dfb      	ldrb	r3, [r7, #23]
 800ad24:	2b00      	cmp	r3, #0
 800ad26:	d109      	bne.n	800ad3c <HAL_RCCEx_PeriphCLKConfig+0x56c>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800ad28:	4b1a      	ldr	r3, [pc, #104]	; (800ad94 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 800ad2a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ad2c:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800ad30:	687b      	ldr	r3, [r7, #4]
 800ad32:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ad34:	4917      	ldr	r1, [pc, #92]	; (800ad94 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 800ad36:	4313      	orrs	r3, r2
 800ad38:	650b      	str	r3, [r1, #80]	; 0x50
 800ad3a:	e001      	b.n	800ad40 <HAL_RCCEx_PeriphCLKConfig+0x570>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ad3c:	7dfb      	ldrb	r3, [r7, #23]
 800ad3e:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 800ad40:	687b      	ldr	r3, [r7, #4]
 800ad42:	681b      	ldr	r3, [r3, #0]
 800ad44:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800ad48:	2b00      	cmp	r3, #0
 800ad4a:	d035      	beq.n	800adb8 <HAL_RCCEx_PeriphCLKConfig+0x5e8>
  {
    switch(PeriphClkInit->FmcClockSelection)
 800ad4c:	687b      	ldr	r3, [r7, #4]
 800ad4e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ad50:	2b03      	cmp	r3, #3
 800ad52:	d81b      	bhi.n	800ad8c <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 800ad54:	a201      	add	r2, pc, #4	; (adr r2, 800ad5c <HAL_RCCEx_PeriphCLKConfig+0x58c>)
 800ad56:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ad5a:	bf00      	nop
 800ad5c:	0800ad99 	.word	0x0800ad99
 800ad60:	0800ad6d 	.word	0x0800ad6d
 800ad64:	0800ad7b 	.word	0x0800ad7b
 800ad68:	0800ad99 	.word	0x0800ad99
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800ad6c:	4b09      	ldr	r3, [pc, #36]	; (800ad94 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 800ad6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ad70:	4a08      	ldr	r2, [pc, #32]	; (800ad94 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 800ad72:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800ad76:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 800ad78:	e00f      	b.n	800ad9a <HAL_RCCEx_PeriphCLKConfig+0x5ca>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800ad7a:	687b      	ldr	r3, [r7, #4]
 800ad7c:	3304      	adds	r3, #4
 800ad7e:	2102      	movs	r1, #2
 800ad80:	4618      	mov	r0, r3
 800ad82:	f001 fa85 	bl	800c290 <RCCEx_PLL2_Config>
 800ad86:	4603      	mov	r3, r0
 800ad88:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 800ad8a:	e006      	b.n	800ad9a <HAL_RCCEx_PeriphCLKConfig+0x5ca>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 800ad8c:	2301      	movs	r3, #1
 800ad8e:	75fb      	strb	r3, [r7, #23]
      break;
 800ad90:	e003      	b.n	800ad9a <HAL_RCCEx_PeriphCLKConfig+0x5ca>
 800ad92:	bf00      	nop
 800ad94:	58024400 	.word	0x58024400
      break;
 800ad98:	bf00      	nop
    }

    if(ret == HAL_OK)
 800ad9a:	7dfb      	ldrb	r3, [r7, #23]
 800ad9c:	2b00      	cmp	r3, #0
 800ad9e:	d109      	bne.n	800adb4 <HAL_RCCEx_PeriphCLKConfig+0x5e4>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 800ada0:	4bba      	ldr	r3, [pc, #744]	; (800b08c <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 800ada2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ada4:	f023 0203 	bic.w	r2, r3, #3
 800ada8:	687b      	ldr	r3, [r7, #4]
 800adaa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800adac:	49b7      	ldr	r1, [pc, #732]	; (800b08c <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 800adae:	4313      	orrs	r3, r2
 800adb0:	64cb      	str	r3, [r1, #76]	; 0x4c
 800adb2:	e001      	b.n	800adb8 <HAL_RCCEx_PeriphCLKConfig+0x5e8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800adb4:	7dfb      	ldrb	r3, [r7, #23]
 800adb6:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800adb8:	687b      	ldr	r3, [r7, #4]
 800adba:	681b      	ldr	r3, [r3, #0]
 800adbc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800adc0:	2b00      	cmp	r3, #0
 800adc2:	f000 8086 	beq.w	800aed2 <HAL_RCCEx_PeriphCLKConfig+0x702>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800adc6:	4bb2      	ldr	r3, [pc, #712]	; (800b090 <HAL_RCCEx_PeriphCLKConfig+0x8c0>)
 800adc8:	681b      	ldr	r3, [r3, #0]
 800adca:	4ab1      	ldr	r2, [pc, #708]	; (800b090 <HAL_RCCEx_PeriphCLKConfig+0x8c0>)
 800adcc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800add0:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800add2:	f7f9 fc75 	bl	80046c0 <HAL_GetTick>
 800add6:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800add8:	e009      	b.n	800adee <HAL_RCCEx_PeriphCLKConfig+0x61e>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800adda:	f7f9 fc71 	bl	80046c0 <HAL_GetTick>
 800adde:	4602      	mov	r2, r0
 800ade0:	693b      	ldr	r3, [r7, #16]
 800ade2:	1ad3      	subs	r3, r2, r3
 800ade4:	2b64      	cmp	r3, #100	; 0x64
 800ade6:	d902      	bls.n	800adee <HAL_RCCEx_PeriphCLKConfig+0x61e>
      {
        ret = HAL_TIMEOUT;
 800ade8:	2303      	movs	r3, #3
 800adea:	75fb      	strb	r3, [r7, #23]
        break;
 800adec:	e005      	b.n	800adfa <HAL_RCCEx_PeriphCLKConfig+0x62a>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800adee:	4ba8      	ldr	r3, [pc, #672]	; (800b090 <HAL_RCCEx_PeriphCLKConfig+0x8c0>)
 800adf0:	681b      	ldr	r3, [r3, #0]
 800adf2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800adf6:	2b00      	cmp	r3, #0
 800adf8:	d0ef      	beq.n	800adda <HAL_RCCEx_PeriphCLKConfig+0x60a>
      }
    }

    if(ret == HAL_OK)
 800adfa:	7dfb      	ldrb	r3, [r7, #23]
 800adfc:	2b00      	cmp	r3, #0
 800adfe:	d166      	bne.n	800aece <HAL_RCCEx_PeriphCLKConfig+0x6fe>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 800ae00:	4ba2      	ldr	r3, [pc, #648]	; (800b08c <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 800ae02:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800ae04:	687b      	ldr	r3, [r7, #4]
 800ae06:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800ae0a:	4053      	eors	r3, r2
 800ae0c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800ae10:	2b00      	cmp	r3, #0
 800ae12:	d013      	beq.n	800ae3c <HAL_RCCEx_PeriphCLKConfig+0x66c>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800ae14:	4b9d      	ldr	r3, [pc, #628]	; (800b08c <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 800ae16:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ae18:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800ae1c:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800ae1e:	4b9b      	ldr	r3, [pc, #620]	; (800b08c <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 800ae20:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ae22:	4a9a      	ldr	r2, [pc, #616]	; (800b08c <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 800ae24:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800ae28:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 800ae2a:	4b98      	ldr	r3, [pc, #608]	; (800b08c <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 800ae2c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ae2e:	4a97      	ldr	r2, [pc, #604]	; (800b08c <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 800ae30:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800ae34:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 800ae36:	4a95      	ldr	r2, [pc, #596]	; (800b08c <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 800ae38:	68fb      	ldr	r3, [r7, #12]
 800ae3a:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 800ae3c:	687b      	ldr	r3, [r7, #4]
 800ae3e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800ae42:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800ae46:	d115      	bne.n	800ae74 <HAL_RCCEx_PeriphCLKConfig+0x6a4>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800ae48:	f7f9 fc3a 	bl	80046c0 <HAL_GetTick>
 800ae4c:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800ae4e:	e00b      	b.n	800ae68 <HAL_RCCEx_PeriphCLKConfig+0x698>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800ae50:	f7f9 fc36 	bl	80046c0 <HAL_GetTick>
 800ae54:	4602      	mov	r2, r0
 800ae56:	693b      	ldr	r3, [r7, #16]
 800ae58:	1ad3      	subs	r3, r2, r3
 800ae5a:	f241 3288 	movw	r2, #5000	; 0x1388
 800ae5e:	4293      	cmp	r3, r2
 800ae60:	d902      	bls.n	800ae68 <HAL_RCCEx_PeriphCLKConfig+0x698>
          {
            ret = HAL_TIMEOUT;
 800ae62:	2303      	movs	r3, #3
 800ae64:	75fb      	strb	r3, [r7, #23]
            break;
 800ae66:	e005      	b.n	800ae74 <HAL_RCCEx_PeriphCLKConfig+0x6a4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800ae68:	4b88      	ldr	r3, [pc, #544]	; (800b08c <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 800ae6a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ae6c:	f003 0302 	and.w	r3, r3, #2
 800ae70:	2b00      	cmp	r3, #0
 800ae72:	d0ed      	beq.n	800ae50 <HAL_RCCEx_PeriphCLKConfig+0x680>
          }
        }
      }

      if(ret == HAL_OK)
 800ae74:	7dfb      	ldrb	r3, [r7, #23]
 800ae76:	2b00      	cmp	r3, #0
 800ae78:	d126      	bne.n	800aec8 <HAL_RCCEx_PeriphCLKConfig+0x6f8>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800ae7a:	687b      	ldr	r3, [r7, #4]
 800ae7c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800ae80:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800ae84:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800ae88:	d10d      	bne.n	800aea6 <HAL_RCCEx_PeriphCLKConfig+0x6d6>
 800ae8a:	4b80      	ldr	r3, [pc, #512]	; (800b08c <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 800ae8c:	691b      	ldr	r3, [r3, #16]
 800ae8e:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 800ae92:	687b      	ldr	r3, [r7, #4]
 800ae94:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800ae98:	0919      	lsrs	r1, r3, #4
 800ae9a:	4b7e      	ldr	r3, [pc, #504]	; (800b094 <HAL_RCCEx_PeriphCLKConfig+0x8c4>)
 800ae9c:	400b      	ands	r3, r1
 800ae9e:	497b      	ldr	r1, [pc, #492]	; (800b08c <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 800aea0:	4313      	orrs	r3, r2
 800aea2:	610b      	str	r3, [r1, #16]
 800aea4:	e005      	b.n	800aeb2 <HAL_RCCEx_PeriphCLKConfig+0x6e2>
 800aea6:	4b79      	ldr	r3, [pc, #484]	; (800b08c <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 800aea8:	691b      	ldr	r3, [r3, #16]
 800aeaa:	4a78      	ldr	r2, [pc, #480]	; (800b08c <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 800aeac:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800aeb0:	6113      	str	r3, [r2, #16]
 800aeb2:	4b76      	ldr	r3, [pc, #472]	; (800b08c <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 800aeb4:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800aeb6:	687b      	ldr	r3, [r7, #4]
 800aeb8:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800aebc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800aec0:	4972      	ldr	r1, [pc, #456]	; (800b08c <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 800aec2:	4313      	orrs	r3, r2
 800aec4:	670b      	str	r3, [r1, #112]	; 0x70
 800aec6:	e004      	b.n	800aed2 <HAL_RCCEx_PeriphCLKConfig+0x702>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800aec8:	7dfb      	ldrb	r3, [r7, #23]
 800aeca:	75bb      	strb	r3, [r7, #22]
 800aecc:	e001      	b.n	800aed2 <HAL_RCCEx_PeriphCLKConfig+0x702>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800aece:	7dfb      	ldrb	r3, [r7, #23]
 800aed0:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 800aed2:	687b      	ldr	r3, [r7, #4]
 800aed4:	681b      	ldr	r3, [r3, #0]
 800aed6:	f003 0301 	and.w	r3, r3, #1
 800aeda:	2b00      	cmp	r3, #0
 800aedc:	d07d      	beq.n	800afda <HAL_RCCEx_PeriphCLKConfig+0x80a>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 800aede:	687b      	ldr	r3, [r7, #4]
 800aee0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800aee2:	2b28      	cmp	r3, #40	; 0x28
 800aee4:	d866      	bhi.n	800afb4 <HAL_RCCEx_PeriphCLKConfig+0x7e4>
 800aee6:	a201      	add	r2, pc, #4	; (adr r2, 800aeec <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 800aee8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800aeec:	0800afbb 	.word	0x0800afbb
 800aef0:	0800afb5 	.word	0x0800afb5
 800aef4:	0800afb5 	.word	0x0800afb5
 800aef8:	0800afb5 	.word	0x0800afb5
 800aefc:	0800afb5 	.word	0x0800afb5
 800af00:	0800afb5 	.word	0x0800afb5
 800af04:	0800afb5 	.word	0x0800afb5
 800af08:	0800afb5 	.word	0x0800afb5
 800af0c:	0800af91 	.word	0x0800af91
 800af10:	0800afb5 	.word	0x0800afb5
 800af14:	0800afb5 	.word	0x0800afb5
 800af18:	0800afb5 	.word	0x0800afb5
 800af1c:	0800afb5 	.word	0x0800afb5
 800af20:	0800afb5 	.word	0x0800afb5
 800af24:	0800afb5 	.word	0x0800afb5
 800af28:	0800afb5 	.word	0x0800afb5
 800af2c:	0800afa3 	.word	0x0800afa3
 800af30:	0800afb5 	.word	0x0800afb5
 800af34:	0800afb5 	.word	0x0800afb5
 800af38:	0800afb5 	.word	0x0800afb5
 800af3c:	0800afb5 	.word	0x0800afb5
 800af40:	0800afb5 	.word	0x0800afb5
 800af44:	0800afb5 	.word	0x0800afb5
 800af48:	0800afb5 	.word	0x0800afb5
 800af4c:	0800afbb 	.word	0x0800afbb
 800af50:	0800afb5 	.word	0x0800afb5
 800af54:	0800afb5 	.word	0x0800afb5
 800af58:	0800afb5 	.word	0x0800afb5
 800af5c:	0800afb5 	.word	0x0800afb5
 800af60:	0800afb5 	.word	0x0800afb5
 800af64:	0800afb5 	.word	0x0800afb5
 800af68:	0800afb5 	.word	0x0800afb5
 800af6c:	0800afbb 	.word	0x0800afbb
 800af70:	0800afb5 	.word	0x0800afb5
 800af74:	0800afb5 	.word	0x0800afb5
 800af78:	0800afb5 	.word	0x0800afb5
 800af7c:	0800afb5 	.word	0x0800afb5
 800af80:	0800afb5 	.word	0x0800afb5
 800af84:	0800afb5 	.word	0x0800afb5
 800af88:	0800afb5 	.word	0x0800afb5
 800af8c:	0800afbb 	.word	0x0800afbb
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800af90:	687b      	ldr	r3, [r7, #4]
 800af92:	3304      	adds	r3, #4
 800af94:	2101      	movs	r1, #1
 800af96:	4618      	mov	r0, r3
 800af98:	f001 f97a 	bl	800c290 <RCCEx_PLL2_Config>
 800af9c:	4603      	mov	r3, r0
 800af9e:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 800afa0:	e00c      	b.n	800afbc <HAL_RCCEx_PeriphCLKConfig+0x7ec>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800afa2:	687b      	ldr	r3, [r7, #4]
 800afa4:	3324      	adds	r3, #36	; 0x24
 800afa6:	2101      	movs	r1, #1
 800afa8:	4618      	mov	r0, r3
 800afaa:	f001 fa23 	bl	800c3f4 <RCCEx_PLL3_Config>
 800afae:	4603      	mov	r3, r0
 800afb0:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 800afb2:	e003      	b.n	800afbc <HAL_RCCEx_PeriphCLKConfig+0x7ec>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800afb4:	2301      	movs	r3, #1
 800afb6:	75fb      	strb	r3, [r7, #23]
      break;
 800afb8:	e000      	b.n	800afbc <HAL_RCCEx_PeriphCLKConfig+0x7ec>
      break;
 800afba:	bf00      	nop
    }

    if(ret == HAL_OK)
 800afbc:	7dfb      	ldrb	r3, [r7, #23]
 800afbe:	2b00      	cmp	r3, #0
 800afc0:	d109      	bne.n	800afd6 <HAL_RCCEx_PeriphCLKConfig+0x806>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 800afc2:	4b32      	ldr	r3, [pc, #200]	; (800b08c <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 800afc4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800afc6:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 800afca:	687b      	ldr	r3, [r7, #4]
 800afcc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800afce:	492f      	ldr	r1, [pc, #188]	; (800b08c <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 800afd0:	4313      	orrs	r3, r2
 800afd2:	654b      	str	r3, [r1, #84]	; 0x54
 800afd4:	e001      	b.n	800afda <HAL_RCCEx_PeriphCLKConfig+0x80a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800afd6:	7dfb      	ldrb	r3, [r7, #23]
 800afd8:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 800afda:	687b      	ldr	r3, [r7, #4]
 800afdc:	681b      	ldr	r3, [r3, #0]
 800afde:	f003 0302 	and.w	r3, r3, #2
 800afe2:	2b00      	cmp	r3, #0
 800afe4:	d037      	beq.n	800b056 <HAL_RCCEx_PeriphCLKConfig+0x886>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 800afe6:	687b      	ldr	r3, [r7, #4]
 800afe8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800afea:	2b05      	cmp	r3, #5
 800afec:	d820      	bhi.n	800b030 <HAL_RCCEx_PeriphCLKConfig+0x860>
 800afee:	a201      	add	r2, pc, #4	; (adr r2, 800aff4 <HAL_RCCEx_PeriphCLKConfig+0x824>)
 800aff0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800aff4:	0800b037 	.word	0x0800b037
 800aff8:	0800b00d 	.word	0x0800b00d
 800affc:	0800b01f 	.word	0x0800b01f
 800b000:	0800b037 	.word	0x0800b037
 800b004:	0800b037 	.word	0x0800b037
 800b008:	0800b037 	.word	0x0800b037
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800b00c:	687b      	ldr	r3, [r7, #4]
 800b00e:	3304      	adds	r3, #4
 800b010:	2101      	movs	r1, #1
 800b012:	4618      	mov	r0, r3
 800b014:	f001 f93c 	bl	800c290 <RCCEx_PLL2_Config>
 800b018:	4603      	mov	r3, r0
 800b01a:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 800b01c:	e00c      	b.n	800b038 <HAL_RCCEx_PeriphCLKConfig+0x868>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800b01e:	687b      	ldr	r3, [r7, #4]
 800b020:	3324      	adds	r3, #36	; 0x24
 800b022:	2101      	movs	r1, #1
 800b024:	4618      	mov	r0, r3
 800b026:	f001 f9e5 	bl	800c3f4 <RCCEx_PLL3_Config>
 800b02a:	4603      	mov	r3, r0
 800b02c:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 800b02e:	e003      	b.n	800b038 <HAL_RCCEx_PeriphCLKConfig+0x868>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800b030:	2301      	movs	r3, #1
 800b032:	75fb      	strb	r3, [r7, #23]
      break;
 800b034:	e000      	b.n	800b038 <HAL_RCCEx_PeriphCLKConfig+0x868>
      break;
 800b036:	bf00      	nop
    }

    if(ret == HAL_OK)
 800b038:	7dfb      	ldrb	r3, [r7, #23]
 800b03a:	2b00      	cmp	r3, #0
 800b03c:	d109      	bne.n	800b052 <HAL_RCCEx_PeriphCLKConfig+0x882>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 800b03e:	4b13      	ldr	r3, [pc, #76]	; (800b08c <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 800b040:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b042:	f023 0207 	bic.w	r2, r3, #7
 800b046:	687b      	ldr	r3, [r7, #4]
 800b048:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b04a:	4910      	ldr	r1, [pc, #64]	; (800b08c <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 800b04c:	4313      	orrs	r3, r2
 800b04e:	654b      	str	r3, [r1, #84]	; 0x54
 800b050:	e001      	b.n	800b056 <HAL_RCCEx_PeriphCLKConfig+0x886>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b052:	7dfb      	ldrb	r3, [r7, #23]
 800b054:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800b056:	687b      	ldr	r3, [r7, #4]
 800b058:	681b      	ldr	r3, [r3, #0]
 800b05a:	f003 0304 	and.w	r3, r3, #4
 800b05e:	2b00      	cmp	r3, #0
 800b060:	d040      	beq.n	800b0e4 <HAL_RCCEx_PeriphCLKConfig+0x914>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 800b062:	687b      	ldr	r3, [r7, #4]
 800b064:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b068:	2b05      	cmp	r3, #5
 800b06a:	d827      	bhi.n	800b0bc <HAL_RCCEx_PeriphCLKConfig+0x8ec>
 800b06c:	a201      	add	r2, pc, #4	; (adr r2, 800b074 <HAL_RCCEx_PeriphCLKConfig+0x8a4>)
 800b06e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b072:	bf00      	nop
 800b074:	0800b0c3 	.word	0x0800b0c3
 800b078:	0800b099 	.word	0x0800b099
 800b07c:	0800b0ab 	.word	0x0800b0ab
 800b080:	0800b0c3 	.word	0x0800b0c3
 800b084:	0800b0c3 	.word	0x0800b0c3
 800b088:	0800b0c3 	.word	0x0800b0c3
 800b08c:	58024400 	.word	0x58024400
 800b090:	58024800 	.word	0x58024800
 800b094:	00ffffcf 	.word	0x00ffffcf
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800b098:	687b      	ldr	r3, [r7, #4]
 800b09a:	3304      	adds	r3, #4
 800b09c:	2101      	movs	r1, #1
 800b09e:	4618      	mov	r0, r3
 800b0a0:	f001 f8f6 	bl	800c290 <RCCEx_PLL2_Config>
 800b0a4:	4603      	mov	r3, r0
 800b0a6:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 800b0a8:	e00c      	b.n	800b0c4 <HAL_RCCEx_PeriphCLKConfig+0x8f4>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800b0aa:	687b      	ldr	r3, [r7, #4]
 800b0ac:	3324      	adds	r3, #36	; 0x24
 800b0ae:	2101      	movs	r1, #1
 800b0b0:	4618      	mov	r0, r3
 800b0b2:	f001 f99f 	bl	800c3f4 <RCCEx_PLL3_Config>
 800b0b6:	4603      	mov	r3, r0
 800b0b8:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 800b0ba:	e003      	b.n	800b0c4 <HAL_RCCEx_PeriphCLKConfig+0x8f4>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800b0bc:	2301      	movs	r3, #1
 800b0be:	75fb      	strb	r3, [r7, #23]
      break;
 800b0c0:	e000      	b.n	800b0c4 <HAL_RCCEx_PeriphCLKConfig+0x8f4>
      break;
 800b0c2:	bf00      	nop
    }

    if(ret == HAL_OK)
 800b0c4:	7dfb      	ldrb	r3, [r7, #23]
 800b0c6:	2b00      	cmp	r3, #0
 800b0c8:	d10a      	bne.n	800b0e0 <HAL_RCCEx_PeriphCLKConfig+0x910>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800b0ca:	4bb2      	ldr	r3, [pc, #712]	; (800b394 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 800b0cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b0ce:	f023 0207 	bic.w	r2, r3, #7
 800b0d2:	687b      	ldr	r3, [r7, #4]
 800b0d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b0d8:	49ae      	ldr	r1, [pc, #696]	; (800b394 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 800b0da:	4313      	orrs	r3, r2
 800b0dc:	658b      	str	r3, [r1, #88]	; 0x58
 800b0de:	e001      	b.n	800b0e4 <HAL_RCCEx_PeriphCLKConfig+0x914>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b0e0:	7dfb      	ldrb	r3, [r7, #23]
 800b0e2:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800b0e4:	687b      	ldr	r3, [r7, #4]
 800b0e6:	681b      	ldr	r3, [r3, #0]
 800b0e8:	f003 0320 	and.w	r3, r3, #32
 800b0ec:	2b00      	cmp	r3, #0
 800b0ee:	d044      	beq.n	800b17a <HAL_RCCEx_PeriphCLKConfig+0x9aa>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 800b0f0:	687b      	ldr	r3, [r7, #4]
 800b0f2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800b0f6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b0fa:	d01b      	beq.n	800b134 <HAL_RCCEx_PeriphCLKConfig+0x964>
 800b0fc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b100:	d805      	bhi.n	800b10e <HAL_RCCEx_PeriphCLKConfig+0x93e>
 800b102:	2b00      	cmp	r3, #0
 800b104:	d022      	beq.n	800b14c <HAL_RCCEx_PeriphCLKConfig+0x97c>
 800b106:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800b10a:	d00a      	beq.n	800b122 <HAL_RCCEx_PeriphCLKConfig+0x952>
 800b10c:	e01b      	b.n	800b146 <HAL_RCCEx_PeriphCLKConfig+0x976>
 800b10e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b112:	d01d      	beq.n	800b150 <HAL_RCCEx_PeriphCLKConfig+0x980>
 800b114:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800b118:	d01c      	beq.n	800b154 <HAL_RCCEx_PeriphCLKConfig+0x984>
 800b11a:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800b11e:	d01b      	beq.n	800b158 <HAL_RCCEx_PeriphCLKConfig+0x988>
 800b120:	e011      	b.n	800b146 <HAL_RCCEx_PeriphCLKConfig+0x976>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800b122:	687b      	ldr	r3, [r7, #4]
 800b124:	3304      	adds	r3, #4
 800b126:	2100      	movs	r1, #0
 800b128:	4618      	mov	r0, r3
 800b12a:	f001 f8b1 	bl	800c290 <RCCEx_PLL2_Config>
 800b12e:	4603      	mov	r3, r0
 800b130:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 800b132:	e012      	b.n	800b15a <HAL_RCCEx_PeriphCLKConfig+0x98a>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800b134:	687b      	ldr	r3, [r7, #4]
 800b136:	3324      	adds	r3, #36	; 0x24
 800b138:	2102      	movs	r1, #2
 800b13a:	4618      	mov	r0, r3
 800b13c:	f001 f95a 	bl	800c3f4 <RCCEx_PLL3_Config>
 800b140:	4603      	mov	r3, r0
 800b142:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 800b144:	e009      	b.n	800b15a <HAL_RCCEx_PeriphCLKConfig+0x98a>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800b146:	2301      	movs	r3, #1
 800b148:	75fb      	strb	r3, [r7, #23]
      break;
 800b14a:	e006      	b.n	800b15a <HAL_RCCEx_PeriphCLKConfig+0x98a>
      break;
 800b14c:	bf00      	nop
 800b14e:	e004      	b.n	800b15a <HAL_RCCEx_PeriphCLKConfig+0x98a>
      break;
 800b150:	bf00      	nop
 800b152:	e002      	b.n	800b15a <HAL_RCCEx_PeriphCLKConfig+0x98a>
      break;
 800b154:	bf00      	nop
 800b156:	e000      	b.n	800b15a <HAL_RCCEx_PeriphCLKConfig+0x98a>
      break;
 800b158:	bf00      	nop
    }

    if(ret == HAL_OK)
 800b15a:	7dfb      	ldrb	r3, [r7, #23]
 800b15c:	2b00      	cmp	r3, #0
 800b15e:	d10a      	bne.n	800b176 <HAL_RCCEx_PeriphCLKConfig+0x9a6>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800b160:	4b8c      	ldr	r3, [pc, #560]	; (800b394 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 800b162:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b164:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 800b168:	687b      	ldr	r3, [r7, #4]
 800b16a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800b16e:	4989      	ldr	r1, [pc, #548]	; (800b394 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 800b170:	4313      	orrs	r3, r2
 800b172:	654b      	str	r3, [r1, #84]	; 0x54
 800b174:	e001      	b.n	800b17a <HAL_RCCEx_PeriphCLKConfig+0x9aa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b176:	7dfb      	ldrb	r3, [r7, #23]
 800b178:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800b17a:	687b      	ldr	r3, [r7, #4]
 800b17c:	681b      	ldr	r3, [r3, #0]
 800b17e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b182:	2b00      	cmp	r3, #0
 800b184:	d044      	beq.n	800b210 <HAL_RCCEx_PeriphCLKConfig+0xa40>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 800b186:	687b      	ldr	r3, [r7, #4]
 800b188:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800b18c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800b190:	d01b      	beq.n	800b1ca <HAL_RCCEx_PeriphCLKConfig+0x9fa>
 800b192:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800b196:	d805      	bhi.n	800b1a4 <HAL_RCCEx_PeriphCLKConfig+0x9d4>
 800b198:	2b00      	cmp	r3, #0
 800b19a:	d022      	beq.n	800b1e2 <HAL_RCCEx_PeriphCLKConfig+0xa12>
 800b19c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800b1a0:	d00a      	beq.n	800b1b8 <HAL_RCCEx_PeriphCLKConfig+0x9e8>
 800b1a2:	e01b      	b.n	800b1dc <HAL_RCCEx_PeriphCLKConfig+0xa0c>
 800b1a4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b1a8:	d01d      	beq.n	800b1e6 <HAL_RCCEx_PeriphCLKConfig+0xa16>
 800b1aa:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800b1ae:	d01c      	beq.n	800b1ea <HAL_RCCEx_PeriphCLKConfig+0xa1a>
 800b1b0:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800b1b4:	d01b      	beq.n	800b1ee <HAL_RCCEx_PeriphCLKConfig+0xa1e>
 800b1b6:	e011      	b.n	800b1dc <HAL_RCCEx_PeriphCLKConfig+0xa0c>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800b1b8:	687b      	ldr	r3, [r7, #4]
 800b1ba:	3304      	adds	r3, #4
 800b1bc:	2100      	movs	r1, #0
 800b1be:	4618      	mov	r0, r3
 800b1c0:	f001 f866 	bl	800c290 <RCCEx_PLL2_Config>
 800b1c4:	4603      	mov	r3, r0
 800b1c6:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 800b1c8:	e012      	b.n	800b1f0 <HAL_RCCEx_PeriphCLKConfig+0xa20>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800b1ca:	687b      	ldr	r3, [r7, #4]
 800b1cc:	3324      	adds	r3, #36	; 0x24
 800b1ce:	2102      	movs	r1, #2
 800b1d0:	4618      	mov	r0, r3
 800b1d2:	f001 f90f 	bl	800c3f4 <RCCEx_PLL3_Config>
 800b1d6:	4603      	mov	r3, r0
 800b1d8:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 800b1da:	e009      	b.n	800b1f0 <HAL_RCCEx_PeriphCLKConfig+0xa20>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800b1dc:	2301      	movs	r3, #1
 800b1de:	75fb      	strb	r3, [r7, #23]
      break;
 800b1e0:	e006      	b.n	800b1f0 <HAL_RCCEx_PeriphCLKConfig+0xa20>
      break;
 800b1e2:	bf00      	nop
 800b1e4:	e004      	b.n	800b1f0 <HAL_RCCEx_PeriphCLKConfig+0xa20>
      break;
 800b1e6:	bf00      	nop
 800b1e8:	e002      	b.n	800b1f0 <HAL_RCCEx_PeriphCLKConfig+0xa20>
      break;
 800b1ea:	bf00      	nop
 800b1ec:	e000      	b.n	800b1f0 <HAL_RCCEx_PeriphCLKConfig+0xa20>
      break;
 800b1ee:	bf00      	nop
    }

    if(ret == HAL_OK)
 800b1f0:	7dfb      	ldrb	r3, [r7, #23]
 800b1f2:	2b00      	cmp	r3, #0
 800b1f4:	d10a      	bne.n	800b20c <HAL_RCCEx_PeriphCLKConfig+0xa3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800b1f6:	4b67      	ldr	r3, [pc, #412]	; (800b394 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 800b1f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b1fa:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800b1fe:	687b      	ldr	r3, [r7, #4]
 800b200:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800b204:	4963      	ldr	r1, [pc, #396]	; (800b394 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 800b206:	4313      	orrs	r3, r2
 800b208:	658b      	str	r3, [r1, #88]	; 0x58
 800b20a:	e001      	b.n	800b210 <HAL_RCCEx_PeriphCLKConfig+0xa40>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b20c:	7dfb      	ldrb	r3, [r7, #23]
 800b20e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 800b210:	687b      	ldr	r3, [r7, #4]
 800b212:	681b      	ldr	r3, [r3, #0]
 800b214:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b218:	2b00      	cmp	r3, #0
 800b21a:	d044      	beq.n	800b2a6 <HAL_RCCEx_PeriphCLKConfig+0xad6>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 800b21c:	687b      	ldr	r3, [r7, #4]
 800b21e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800b222:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800b226:	d01b      	beq.n	800b260 <HAL_RCCEx_PeriphCLKConfig+0xa90>
 800b228:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800b22c:	d805      	bhi.n	800b23a <HAL_RCCEx_PeriphCLKConfig+0xa6a>
 800b22e:	2b00      	cmp	r3, #0
 800b230:	d022      	beq.n	800b278 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
 800b232:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b236:	d00a      	beq.n	800b24e <HAL_RCCEx_PeriphCLKConfig+0xa7e>
 800b238:	e01b      	b.n	800b272 <HAL_RCCEx_PeriphCLKConfig+0xaa2>
 800b23a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800b23e:	d01d      	beq.n	800b27c <HAL_RCCEx_PeriphCLKConfig+0xaac>
 800b240:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800b244:	d01c      	beq.n	800b280 <HAL_RCCEx_PeriphCLKConfig+0xab0>
 800b246:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800b24a:	d01b      	beq.n	800b284 <HAL_RCCEx_PeriphCLKConfig+0xab4>
 800b24c:	e011      	b.n	800b272 <HAL_RCCEx_PeriphCLKConfig+0xaa2>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800b24e:	687b      	ldr	r3, [r7, #4]
 800b250:	3304      	adds	r3, #4
 800b252:	2100      	movs	r1, #0
 800b254:	4618      	mov	r0, r3
 800b256:	f001 f81b 	bl	800c290 <RCCEx_PLL2_Config>
 800b25a:	4603      	mov	r3, r0
 800b25c:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 800b25e:	e012      	b.n	800b286 <HAL_RCCEx_PeriphCLKConfig+0xab6>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800b260:	687b      	ldr	r3, [r7, #4]
 800b262:	3324      	adds	r3, #36	; 0x24
 800b264:	2102      	movs	r1, #2
 800b266:	4618      	mov	r0, r3
 800b268:	f001 f8c4 	bl	800c3f4 <RCCEx_PLL3_Config>
 800b26c:	4603      	mov	r3, r0
 800b26e:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 800b270:	e009      	b.n	800b286 <HAL_RCCEx_PeriphCLKConfig+0xab6>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800b272:	2301      	movs	r3, #1
 800b274:	75fb      	strb	r3, [r7, #23]
      break;
 800b276:	e006      	b.n	800b286 <HAL_RCCEx_PeriphCLKConfig+0xab6>
      break;
 800b278:	bf00      	nop
 800b27a:	e004      	b.n	800b286 <HAL_RCCEx_PeriphCLKConfig+0xab6>
      break;
 800b27c:	bf00      	nop
 800b27e:	e002      	b.n	800b286 <HAL_RCCEx_PeriphCLKConfig+0xab6>
      break;
 800b280:	bf00      	nop
 800b282:	e000      	b.n	800b286 <HAL_RCCEx_PeriphCLKConfig+0xab6>
      break;
 800b284:	bf00      	nop
    }

    if(ret == HAL_OK)
 800b286:	7dfb      	ldrb	r3, [r7, #23]
 800b288:	2b00      	cmp	r3, #0
 800b28a:	d10a      	bne.n	800b2a2 <HAL_RCCEx_PeriphCLKConfig+0xad2>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 800b28c:	4b41      	ldr	r3, [pc, #260]	; (800b394 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 800b28e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b290:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800b294:	687b      	ldr	r3, [r7, #4]
 800b296:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800b29a:	493e      	ldr	r1, [pc, #248]	; (800b394 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 800b29c:	4313      	orrs	r3, r2
 800b29e:	658b      	str	r3, [r1, #88]	; 0x58
 800b2a0:	e001      	b.n	800b2a6 <HAL_RCCEx_PeriphCLKConfig+0xad6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b2a2:	7dfb      	ldrb	r3, [r7, #23]
 800b2a4:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 800b2a6:	687b      	ldr	r3, [r7, #4]
 800b2a8:	681b      	ldr	r3, [r3, #0]
 800b2aa:	f003 0308 	and.w	r3, r3, #8
 800b2ae:	2b00      	cmp	r3, #0
 800b2b0:	d01a      	beq.n	800b2e8 <HAL_RCCEx_PeriphCLKConfig+0xb18>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 800b2b2:	687b      	ldr	r3, [r7, #4]
 800b2b4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800b2b8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b2bc:	d10a      	bne.n	800b2d4 <HAL_RCCEx_PeriphCLKConfig+0xb04>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 800b2be:	687b      	ldr	r3, [r7, #4]
 800b2c0:	3324      	adds	r3, #36	; 0x24
 800b2c2:	2102      	movs	r1, #2
 800b2c4:	4618      	mov	r0, r3
 800b2c6:	f001 f895 	bl	800c3f4 <RCCEx_PLL3_Config>
 800b2ca:	4603      	mov	r3, r0
 800b2cc:	2b00      	cmp	r3, #0
 800b2ce:	d001      	beq.n	800b2d4 <HAL_RCCEx_PeriphCLKConfig+0xb04>
        {
          status = HAL_ERROR;
 800b2d0:	2301      	movs	r3, #1
 800b2d2:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 800b2d4:	4b2f      	ldr	r3, [pc, #188]	; (800b394 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 800b2d6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b2d8:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800b2dc:	687b      	ldr	r3, [r7, #4]
 800b2de:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800b2e2:	492c      	ldr	r1, [pc, #176]	; (800b394 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 800b2e4:	4313      	orrs	r3, r2
 800b2e6:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800b2e8:	687b      	ldr	r3, [r7, #4]
 800b2ea:	681b      	ldr	r3, [r3, #0]
 800b2ec:	f003 0310 	and.w	r3, r3, #16
 800b2f0:	2b00      	cmp	r3, #0
 800b2f2:	d01a      	beq.n	800b32a <HAL_RCCEx_PeriphCLKConfig+0xb5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 800b2f4:	687b      	ldr	r3, [r7, #4]
 800b2f6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800b2fa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b2fe:	d10a      	bne.n	800b316 <HAL_RCCEx_PeriphCLKConfig+0xb46>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 800b300:	687b      	ldr	r3, [r7, #4]
 800b302:	3324      	adds	r3, #36	; 0x24
 800b304:	2102      	movs	r1, #2
 800b306:	4618      	mov	r0, r3
 800b308:	f001 f874 	bl	800c3f4 <RCCEx_PLL3_Config>
 800b30c:	4603      	mov	r3, r0
 800b30e:	2b00      	cmp	r3, #0
 800b310:	d001      	beq.n	800b316 <HAL_RCCEx_PeriphCLKConfig+0xb46>
      {
        status = HAL_ERROR;
 800b312:	2301      	movs	r3, #1
 800b314:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800b316:	4b1f      	ldr	r3, [pc, #124]	; (800b394 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 800b318:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b31a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800b31e:	687b      	ldr	r3, [r7, #4]
 800b320:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800b324:	491b      	ldr	r1, [pc, #108]	; (800b394 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 800b326:	4313      	orrs	r3, r2
 800b328:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800b32a:	687b      	ldr	r3, [r7, #4]
 800b32c:	681b      	ldr	r3, [r3, #0]
 800b32e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800b332:	2b00      	cmp	r3, #0
 800b334:	d032      	beq.n	800b39c <HAL_RCCEx_PeriphCLKConfig+0xbcc>
  {
    switch(PeriphClkInit->AdcClockSelection)
 800b336:	687b      	ldr	r3, [r7, #4]
 800b338:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800b33c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b340:	d00d      	beq.n	800b35e <HAL_RCCEx_PeriphCLKConfig+0xb8e>
 800b342:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800b346:	d016      	beq.n	800b376 <HAL_RCCEx_PeriphCLKConfig+0xba6>
 800b348:	2b00      	cmp	r3, #0
 800b34a:	d111      	bne.n	800b370 <HAL_RCCEx_PeriphCLKConfig+0xba0>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800b34c:	687b      	ldr	r3, [r7, #4]
 800b34e:	3304      	adds	r3, #4
 800b350:	2100      	movs	r1, #0
 800b352:	4618      	mov	r0, r3
 800b354:	f000 ff9c 	bl	800c290 <RCCEx_PLL2_Config>
 800b358:	4603      	mov	r3, r0
 800b35a:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 800b35c:	e00c      	b.n	800b378 <HAL_RCCEx_PeriphCLKConfig+0xba8>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800b35e:	687b      	ldr	r3, [r7, #4]
 800b360:	3324      	adds	r3, #36	; 0x24
 800b362:	2102      	movs	r1, #2
 800b364:	4618      	mov	r0, r3
 800b366:	f001 f845 	bl	800c3f4 <RCCEx_PLL3_Config>
 800b36a:	4603      	mov	r3, r0
 800b36c:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 800b36e:	e003      	b.n	800b378 <HAL_RCCEx_PeriphCLKConfig+0xba8>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800b370:	2301      	movs	r3, #1
 800b372:	75fb      	strb	r3, [r7, #23]
      break;
 800b374:	e000      	b.n	800b378 <HAL_RCCEx_PeriphCLKConfig+0xba8>
      break;
 800b376:	bf00      	nop
    }

    if(ret == HAL_OK)
 800b378:	7dfb      	ldrb	r3, [r7, #23]
 800b37a:	2b00      	cmp	r3, #0
 800b37c:	d10c      	bne.n	800b398 <HAL_RCCEx_PeriphCLKConfig+0xbc8>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800b37e:	4b05      	ldr	r3, [pc, #20]	; (800b394 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 800b380:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b382:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800b386:	687b      	ldr	r3, [r7, #4]
 800b388:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800b38c:	4901      	ldr	r1, [pc, #4]	; (800b394 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 800b38e:	4313      	orrs	r3, r2
 800b390:	658b      	str	r3, [r1, #88]	; 0x58
 800b392:	e003      	b.n	800b39c <HAL_RCCEx_PeriphCLKConfig+0xbcc>
 800b394:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b398:	7dfb      	ldrb	r3, [r7, #23]
 800b39a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800b39c:	687b      	ldr	r3, [r7, #4]
 800b39e:	681b      	ldr	r3, [r3, #0]
 800b3a0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800b3a4:	2b00      	cmp	r3, #0
 800b3a6:	d02f      	beq.n	800b408 <HAL_RCCEx_PeriphCLKConfig+0xc38>
  {

    switch(PeriphClkInit->UsbClockSelection)
 800b3a8:	687b      	ldr	r3, [r7, #4]
 800b3aa:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800b3ae:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800b3b2:	d00c      	beq.n	800b3ce <HAL_RCCEx_PeriphCLKConfig+0xbfe>
 800b3b4:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800b3b8:	d015      	beq.n	800b3e6 <HAL_RCCEx_PeriphCLKConfig+0xc16>
 800b3ba:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800b3be:	d10f      	bne.n	800b3e0 <HAL_RCCEx_PeriphCLKConfig+0xc10>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b3c0:	4b79      	ldr	r3, [pc, #484]	; (800b5a8 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 800b3c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b3c4:	4a78      	ldr	r2, [pc, #480]	; (800b5a8 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 800b3c6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800b3ca:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 800b3cc:	e00c      	b.n	800b3e8 <HAL_RCCEx_PeriphCLKConfig+0xc18>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800b3ce:	687b      	ldr	r3, [r7, #4]
 800b3d0:	3324      	adds	r3, #36	; 0x24
 800b3d2:	2101      	movs	r1, #1
 800b3d4:	4618      	mov	r0, r3
 800b3d6:	f001 f80d 	bl	800c3f4 <RCCEx_PLL3_Config>
 800b3da:	4603      	mov	r3, r0
 800b3dc:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 800b3de:	e003      	b.n	800b3e8 <HAL_RCCEx_PeriphCLKConfig+0xc18>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800b3e0:	2301      	movs	r3, #1
 800b3e2:	75fb      	strb	r3, [r7, #23]
      break;
 800b3e4:	e000      	b.n	800b3e8 <HAL_RCCEx_PeriphCLKConfig+0xc18>
      break;
 800b3e6:	bf00      	nop
    }

    if(ret == HAL_OK)
 800b3e8:	7dfb      	ldrb	r3, [r7, #23]
 800b3ea:	2b00      	cmp	r3, #0
 800b3ec:	d10a      	bne.n	800b404 <HAL_RCCEx_PeriphCLKConfig+0xc34>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800b3ee:	4b6e      	ldr	r3, [pc, #440]	; (800b5a8 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 800b3f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b3f2:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800b3f6:	687b      	ldr	r3, [r7, #4]
 800b3f8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800b3fc:	496a      	ldr	r1, [pc, #424]	; (800b5a8 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 800b3fe:	4313      	orrs	r3, r2
 800b400:	654b      	str	r3, [r1, #84]	; 0x54
 800b402:	e001      	b.n	800b408 <HAL_RCCEx_PeriphCLKConfig+0xc38>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b404:	7dfb      	ldrb	r3, [r7, #23]
 800b406:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800b408:	687b      	ldr	r3, [r7, #4]
 800b40a:	681b      	ldr	r3, [r3, #0]
 800b40c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800b410:	2b00      	cmp	r3, #0
 800b412:	d029      	beq.n	800b468 <HAL_RCCEx_PeriphCLKConfig+0xc98>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 800b414:	687b      	ldr	r3, [r7, #4]
 800b416:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b418:	2b00      	cmp	r3, #0
 800b41a:	d003      	beq.n	800b424 <HAL_RCCEx_PeriphCLKConfig+0xc54>
 800b41c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b420:	d007      	beq.n	800b432 <HAL_RCCEx_PeriphCLKConfig+0xc62>
 800b422:	e00f      	b.n	800b444 <HAL_RCCEx_PeriphCLKConfig+0xc74>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b424:	4b60      	ldr	r3, [pc, #384]	; (800b5a8 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 800b426:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b428:	4a5f      	ldr	r2, [pc, #380]	; (800b5a8 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 800b42a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800b42e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 800b430:	e00b      	b.n	800b44a <HAL_RCCEx_PeriphCLKConfig+0xc7a>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800b432:	687b      	ldr	r3, [r7, #4]
 800b434:	3304      	adds	r3, #4
 800b436:	2102      	movs	r1, #2
 800b438:	4618      	mov	r0, r3
 800b43a:	f000 ff29 	bl	800c290 <RCCEx_PLL2_Config>
 800b43e:	4603      	mov	r3, r0
 800b440:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 800b442:	e002      	b.n	800b44a <HAL_RCCEx_PeriphCLKConfig+0xc7a>

    default:
      ret = HAL_ERROR;
 800b444:	2301      	movs	r3, #1
 800b446:	75fb      	strb	r3, [r7, #23]
      break;
 800b448:	bf00      	nop
    }

    if(ret == HAL_OK)
 800b44a:	7dfb      	ldrb	r3, [r7, #23]
 800b44c:	2b00      	cmp	r3, #0
 800b44e:	d109      	bne.n	800b464 <HAL_RCCEx_PeriphCLKConfig+0xc94>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 800b450:	4b55      	ldr	r3, [pc, #340]	; (800b5a8 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 800b452:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b454:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800b458:	687b      	ldr	r3, [r7, #4]
 800b45a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b45c:	4952      	ldr	r1, [pc, #328]	; (800b5a8 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 800b45e:	4313      	orrs	r3, r2
 800b460:	64cb      	str	r3, [r1, #76]	; 0x4c
 800b462:	e001      	b.n	800b468 <HAL_RCCEx_PeriphCLKConfig+0xc98>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b464:	7dfb      	ldrb	r3, [r7, #23]
 800b466:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800b468:	687b      	ldr	r3, [r7, #4]
 800b46a:	681b      	ldr	r3, [r3, #0]
 800b46c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800b470:	2b00      	cmp	r3, #0
 800b472:	d00a      	beq.n	800b48a <HAL_RCCEx_PeriphCLKConfig+0xcba>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 800b474:	687b      	ldr	r3, [r7, #4]
 800b476:	3324      	adds	r3, #36	; 0x24
 800b478:	2102      	movs	r1, #2
 800b47a:	4618      	mov	r0, r3
 800b47c:	f000 ffba 	bl	800c3f4 <RCCEx_PLL3_Config>
 800b480:	4603      	mov	r3, r0
 800b482:	2b00      	cmp	r3, #0
 800b484:	d001      	beq.n	800b48a <HAL_RCCEx_PeriphCLKConfig+0xcba>
    {
      status=HAL_ERROR;
 800b486:	2301      	movs	r3, #1
 800b488:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800b48a:	687b      	ldr	r3, [r7, #4]
 800b48c:	681b      	ldr	r3, [r3, #0]
 800b48e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b492:	2b00      	cmp	r3, #0
 800b494:	d02f      	beq.n	800b4f6 <HAL_RCCEx_PeriphCLKConfig+0xd26>
  {

    switch(PeriphClkInit->RngClockSelection)
 800b496:	687b      	ldr	r3, [r7, #4]
 800b498:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b49a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b49e:	d00c      	beq.n	800b4ba <HAL_RCCEx_PeriphCLKConfig+0xcea>
 800b4a0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b4a4:	d802      	bhi.n	800b4ac <HAL_RCCEx_PeriphCLKConfig+0xcdc>
 800b4a6:	2b00      	cmp	r3, #0
 800b4a8:	d011      	beq.n	800b4ce <HAL_RCCEx_PeriphCLKConfig+0xcfe>
 800b4aa:	e00d      	b.n	800b4c8 <HAL_RCCEx_PeriphCLKConfig+0xcf8>
 800b4ac:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b4b0:	d00f      	beq.n	800b4d2 <HAL_RCCEx_PeriphCLKConfig+0xd02>
 800b4b2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800b4b6:	d00e      	beq.n	800b4d6 <HAL_RCCEx_PeriphCLKConfig+0xd06>
 800b4b8:	e006      	b.n	800b4c8 <HAL_RCCEx_PeriphCLKConfig+0xcf8>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b4ba:	4b3b      	ldr	r3, [pc, #236]	; (800b5a8 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 800b4bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b4be:	4a3a      	ldr	r2, [pc, #232]	; (800b5a8 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 800b4c0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800b4c4:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 800b4c6:	e007      	b.n	800b4d8 <HAL_RCCEx_PeriphCLKConfig+0xd08>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800b4c8:	2301      	movs	r3, #1
 800b4ca:	75fb      	strb	r3, [r7, #23]
      break;
 800b4cc:	e004      	b.n	800b4d8 <HAL_RCCEx_PeriphCLKConfig+0xd08>
      break;
 800b4ce:	bf00      	nop
 800b4d0:	e002      	b.n	800b4d8 <HAL_RCCEx_PeriphCLKConfig+0xd08>
      break;
 800b4d2:	bf00      	nop
 800b4d4:	e000      	b.n	800b4d8 <HAL_RCCEx_PeriphCLKConfig+0xd08>
      break;
 800b4d6:	bf00      	nop
    }

    if(ret == HAL_OK)
 800b4d8:	7dfb      	ldrb	r3, [r7, #23]
 800b4da:	2b00      	cmp	r3, #0
 800b4dc:	d109      	bne.n	800b4f2 <HAL_RCCEx_PeriphCLKConfig+0xd22>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800b4de:	4b32      	ldr	r3, [pc, #200]	; (800b5a8 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 800b4e0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b4e2:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800b4e6:	687b      	ldr	r3, [r7, #4]
 800b4e8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b4ea:	492f      	ldr	r1, [pc, #188]	; (800b5a8 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 800b4ec:	4313      	orrs	r3, r2
 800b4ee:	654b      	str	r3, [r1, #84]	; 0x54
 800b4f0:	e001      	b.n	800b4f6 <HAL_RCCEx_PeriphCLKConfig+0xd26>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b4f2:	7dfb      	ldrb	r3, [r7, #23]
 800b4f4:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800b4f6:	687b      	ldr	r3, [r7, #4]
 800b4f8:	681b      	ldr	r3, [r3, #0]
 800b4fa:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800b4fe:	2b00      	cmp	r3, #0
 800b500:	d008      	beq.n	800b514 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800b502:	4b29      	ldr	r3, [pc, #164]	; (800b5a8 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 800b504:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b506:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800b50a:	687b      	ldr	r3, [r7, #4]
 800b50c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b50e:	4926      	ldr	r1, [pc, #152]	; (800b5a8 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 800b510:	4313      	orrs	r3, r2
 800b512:	650b      	str	r3, [r1, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 800b514:	687b      	ldr	r3, [r7, #4]
 800b516:	681b      	ldr	r3, [r3, #0]
 800b518:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800b51c:	2b00      	cmp	r3, #0
 800b51e:	d009      	beq.n	800b534 <HAL_RCCEx_PeriphCLKConfig+0xd64>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 800b520:	4b21      	ldr	r3, [pc, #132]	; (800b5a8 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 800b522:	691b      	ldr	r3, [r3, #16]
 800b524:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800b528:	687b      	ldr	r3, [r7, #4]
 800b52a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800b52e:	491e      	ldr	r1, [pc, #120]	; (800b5a8 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 800b530:	4313      	orrs	r3, r2
 800b532:	610b      	str	r3, [r1, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800b534:	687b      	ldr	r3, [r7, #4]
 800b536:	681b      	ldr	r3, [r3, #0]
 800b538:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800b53c:	2b00      	cmp	r3, #0
 800b53e:	d008      	beq.n	800b552 <HAL_RCCEx_PeriphCLKConfig+0xd82>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800b540:	4b19      	ldr	r3, [pc, #100]	; (800b5a8 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 800b542:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b544:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800b548:	687b      	ldr	r3, [r7, #4]
 800b54a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800b54c:	4916      	ldr	r1, [pc, #88]	; (800b5a8 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 800b54e:	4313      	orrs	r3, r2
 800b550:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800b552:	687b      	ldr	r3, [r7, #4]
 800b554:	681b      	ldr	r3, [r3, #0]
 800b556:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800b55a:	2b00      	cmp	r3, #0
 800b55c:	d00d      	beq.n	800b57a <HAL_RCCEx_PeriphCLKConfig+0xdaa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800b55e:	4b12      	ldr	r3, [pc, #72]	; (800b5a8 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 800b560:	691b      	ldr	r3, [r3, #16]
 800b562:	4a11      	ldr	r2, [pc, #68]	; (800b5a8 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 800b564:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800b568:	6113      	str	r3, [r2, #16]
 800b56a:	4b0f      	ldr	r3, [pc, #60]	; (800b5a8 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 800b56c:	691a      	ldr	r2, [r3, #16]
 800b56e:	687b      	ldr	r3, [r7, #4]
 800b570:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 800b574:	490c      	ldr	r1, [pc, #48]	; (800b5a8 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 800b576:	4313      	orrs	r3, r2
 800b578:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800b57a:	687b      	ldr	r3, [r7, #4]
 800b57c:	681b      	ldr	r3, [r3, #0]
 800b57e:	2b00      	cmp	r3, #0
 800b580:	da08      	bge.n	800b594 <HAL_RCCEx_PeriphCLKConfig+0xdc4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 800b582:	4b09      	ldr	r3, [pc, #36]	; (800b5a8 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 800b584:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b586:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800b58a:	687b      	ldr	r3, [r7, #4]
 800b58c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b58e:	4906      	ldr	r1, [pc, #24]	; (800b5a8 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 800b590:	4313      	orrs	r3, r2
 800b592:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  if (status == HAL_OK)
 800b594:	7dbb      	ldrb	r3, [r7, #22]
 800b596:	2b00      	cmp	r3, #0
 800b598:	d101      	bne.n	800b59e <HAL_RCCEx_PeriphCLKConfig+0xdce>
  {
    return HAL_OK;
 800b59a:	2300      	movs	r3, #0
 800b59c:	e000      	b.n	800b5a0 <HAL_RCCEx_PeriphCLKConfig+0xdd0>
  }
  return HAL_ERROR;
 800b59e:	2301      	movs	r3, #1
}
 800b5a0:	4618      	mov	r0, r3
 800b5a2:	3718      	adds	r7, #24
 800b5a4:	46bd      	mov	sp, r7
 800b5a6:	bd80      	pop	{r7, pc}
 800b5a8:	58024400 	.word	0x58024400

0800b5ac <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 800b5ac:	b580      	push	{r7, lr}
 800b5ae:	b090      	sub	sp, #64	; 0x40
 800b5b0:	af00      	add	r7, sp, #0
 800b5b2:	6078      	str	r0, [r7, #4]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 800b5b4:	687b      	ldr	r3, [r7, #4]
 800b5b6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b5ba:	d150      	bne.n	800b65e <HAL_RCCEx_GetPeriphCLKFreq+0xb2>
    {

      saiclocksource= __HAL_RCC_GET_SAI1_SOURCE();
 800b5bc:	4ba1      	ldr	r3, [pc, #644]	; (800b844 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800b5be:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b5c0:	f003 0307 	and.w	r3, r3, #7
 800b5c4:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 800b5c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b5c8:	2b04      	cmp	r3, #4
 800b5ca:	d844      	bhi.n	800b656 <HAL_RCCEx_GetPeriphCLKFreq+0xaa>
 800b5cc:	a201      	add	r2, pc, #4	; (adr r2, 800b5d4 <HAL_RCCEx_GetPeriphCLKFreq+0x28>)
 800b5ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b5d2:	bf00      	nop
 800b5d4:	0800b5e9 	.word	0x0800b5e9
 800b5d8:	0800b5f9 	.word	0x0800b5f9
 800b5dc:	0800b609 	.word	0x0800b609
 800b5e0:	0800b651 	.word	0x0800b651
 800b5e4:	0800b619 	.word	0x0800b619
      {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800b5e8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800b5ec:	4618      	mov	r0, r3
 800b5ee:	f000 fd03 	bl	800bff8 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800b5f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b5f4:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800b5f6:	e241      	b.n	800ba7c <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b5f8:	f107 0318 	add.w	r3, r7, #24
 800b5fc:	4618      	mov	r0, r3
 800b5fe:	f000 fa63 	bl	800bac8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800b602:	69bb      	ldr	r3, [r7, #24]
 800b604:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800b606:	e239      	b.n	800ba7c <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b608:	f107 030c 	add.w	r3, r7, #12
 800b60c:	4618      	mov	r0, r3
 800b60e:	f000 fba7 	bl	800bd60 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800b612:	68fb      	ldr	r3, [r7, #12]
 800b614:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800b616:	e231      	b.n	800ba7c <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 800b618:	4b8a      	ldr	r3, [pc, #552]	; (800b844 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800b61a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b61c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800b620:	637b      	str	r3, [r7, #52]	; 0x34

          if(ckpclocksource== RCC_CLKPSOURCE_HSI)
 800b622:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b624:	2b00      	cmp	r3, #0
 800b626:	d102      	bne.n	800b62e <HAL_RCCEx_GetPeriphCLKFreq+0x82>
          {
            /* In Case the CKPER Source is HSI */
            frequency = HSI_VALUE;
 800b628:	4b87      	ldr	r3, [pc, #540]	; (800b848 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 800b62a:	63fb      	str	r3, [r7, #60]	; 0x3c
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
          }

          break;
 800b62c:	e226      	b.n	800ba7c <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if(ckpclocksource== RCC_CLKPSOURCE_CSI)
 800b62e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b630:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800b634:	d102      	bne.n	800b63c <HAL_RCCEx_GetPeriphCLKFreq+0x90>
            frequency = CSI_VALUE;
 800b636:	4b85      	ldr	r3, [pc, #532]	; (800b84c <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 800b638:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800b63a:	e21f      	b.n	800ba7c <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if (ckpclocksource== RCC_CLKPSOURCE_HSE)
 800b63c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b63e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b642:	d102      	bne.n	800b64a <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
            frequency = HSE_VALUE;
 800b644:	4b82      	ldr	r3, [pc, #520]	; (800b850 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 800b646:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800b648:	e218      	b.n	800ba7c <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
            frequency = 0;
 800b64a:	2300      	movs	r3, #0
 800b64c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800b64e:	e215      	b.n	800ba7c <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 800b650:	4b80      	ldr	r3, [pc, #512]	; (800b854 <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>)
 800b652:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800b654:	e212      	b.n	800ba7c <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      default :
        {
          frequency = 0;
 800b656:	2300      	movs	r3, #0
 800b658:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800b65a:	bf00      	nop
 800b65c:	e20e      	b.n	800ba7c <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      }
    }

#if defined(SAI3)
  else if (PeriphClk == RCC_PERIPHCLK_SAI23)
 800b65e:	687b      	ldr	r3, [r7, #4]
 800b660:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b664:	d14f      	bne.n	800b706 <HAL_RCCEx_GetPeriphCLKFreq+0x15a>
    {

      saiclocksource= __HAL_RCC_GET_SAI23_SOURCE();
 800b666:	4b77      	ldr	r3, [pc, #476]	; (800b844 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800b668:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b66a:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
 800b66e:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 800b670:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b672:	2b80      	cmp	r3, #128	; 0x80
 800b674:	d01c      	beq.n	800b6b0 <HAL_RCCEx_GetPeriphCLKFreq+0x104>
 800b676:	2b80      	cmp	r3, #128	; 0x80
 800b678:	d804      	bhi.n	800b684 <HAL_RCCEx_GetPeriphCLKFreq+0xd8>
 800b67a:	2b00      	cmp	r3, #0
 800b67c:	d008      	beq.n	800b690 <HAL_RCCEx_GetPeriphCLKFreq+0xe4>
 800b67e:	2b40      	cmp	r3, #64	; 0x40
 800b680:	d00e      	beq.n	800b6a0 <HAL_RCCEx_GetPeriphCLKFreq+0xf4>
 800b682:	e03c      	b.n	800b6fe <HAL_RCCEx_GetPeriphCLKFreq+0x152>
 800b684:	2bc0      	cmp	r3, #192	; 0xc0
 800b686:	d037      	beq.n	800b6f8 <HAL_RCCEx_GetPeriphCLKFreq+0x14c>
 800b688:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b68c:	d018      	beq.n	800b6c0 <HAL_RCCEx_GetPeriphCLKFreq+0x114>
 800b68e:	e036      	b.n	800b6fe <HAL_RCCEx_GetPeriphCLKFreq+0x152>
      {
      case 0: /* PLL1 is the clock source for SAI2/3 */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800b690:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800b694:	4618      	mov	r0, r3
 800b696:	f000 fcaf 	bl	800bff8 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800b69a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b69c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800b69e:	e1ed      	b.n	800ba7c <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI2/3 */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b6a0:	f107 0318 	add.w	r3, r7, #24
 800b6a4:	4618      	mov	r0, r3
 800b6a6:	f000 fa0f 	bl	800bac8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800b6aa:	69bb      	ldr	r3, [r7, #24]
 800b6ac:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800b6ae:	e1e5      	b.n	800ba7c <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_SAI23CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI2/3 */
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b6b0:	f107 030c 	add.w	r3, r7, #12
 800b6b4:	4618      	mov	r0, r3
 800b6b6:	f000 fb53 	bl	800bd60 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800b6ba:	68fb      	ldr	r3, [r7, #12]
 800b6bc:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800b6be:	e1dd      	b.n	800ba7c <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_SAI23CLKSOURCE_CLKP: /* CKPER is the clock source for SAI2/3 */
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 800b6c0:	4b60      	ldr	r3, [pc, #384]	; (800b844 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800b6c2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b6c4:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800b6c8:	637b      	str	r3, [r7, #52]	; 0x34

          if(ckpclocksource== RCC_CLKPSOURCE_HSI)
 800b6ca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b6cc:	2b00      	cmp	r3, #0
 800b6ce:	d102      	bne.n	800b6d6 <HAL_RCCEx_GetPeriphCLKFreq+0x12a>
          {
            /* In Case the CKPER Source is HSI */
            frequency = HSI_VALUE;
 800b6d0:	4b5d      	ldr	r3, [pc, #372]	; (800b848 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 800b6d2:	63fb      	str	r3, [r7, #60]	; 0x3c
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
          }

          break;
 800b6d4:	e1d2      	b.n	800ba7c <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if(ckpclocksource== RCC_CLKPSOURCE_CSI)
 800b6d6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b6d8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800b6dc:	d102      	bne.n	800b6e4 <HAL_RCCEx_GetPeriphCLKFreq+0x138>
            frequency = CSI_VALUE;
 800b6de:	4b5b      	ldr	r3, [pc, #364]	; (800b84c <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 800b6e0:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800b6e2:	e1cb      	b.n	800ba7c <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if (ckpclocksource== RCC_CLKPSOURCE_HSE)
 800b6e4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b6e6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b6ea:	d102      	bne.n	800b6f2 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
            frequency = HSE_VALUE;
 800b6ec:	4b58      	ldr	r3, [pc, #352]	; (800b850 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 800b6ee:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800b6f0:	e1c4      	b.n	800ba7c <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
            frequency = 0;
 800b6f2:	2300      	movs	r3, #0
 800b6f4:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800b6f6:	e1c1      	b.n	800ba7c <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case (RCC_SAI23CLKSOURCE_PIN): /* External clock is the clock source for SAI2/3 */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 800b6f8:	4b56      	ldr	r3, [pc, #344]	; (800b854 <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>)
 800b6fa:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800b6fc:	e1be      	b.n	800ba7c <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      default :
        {
          frequency = 0;
 800b6fe:	2300      	movs	r3, #0
 800b700:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800b702:	bf00      	nop
 800b704:	e1ba      	b.n	800ba7c <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
      }
    }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 800b706:	687b      	ldr	r3, [r7, #4]
 800b708:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800b70c:	d153      	bne.n	800b7b6 <HAL_RCCEx_GetPeriphCLKFreq+0x20a>
    {

      saiclocksource= __HAL_RCC_GET_SAI4A_SOURCE();
 800b70e:	4b4d      	ldr	r3, [pc, #308]	; (800b844 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800b710:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b712:	f403 0360 	and.w	r3, r3, #14680064	; 0xe00000
 800b716:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 800b718:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b71a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800b71e:	d01f      	beq.n	800b760 <HAL_RCCEx_GetPeriphCLKFreq+0x1b4>
 800b720:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800b724:	d805      	bhi.n	800b732 <HAL_RCCEx_GetPeriphCLKFreq+0x186>
 800b726:	2b00      	cmp	r3, #0
 800b728:	d00a      	beq.n	800b740 <HAL_RCCEx_GetPeriphCLKFreq+0x194>
 800b72a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800b72e:	d00f      	beq.n	800b750 <HAL_RCCEx_GetPeriphCLKFreq+0x1a4>
 800b730:	e03d      	b.n	800b7ae <HAL_RCCEx_GetPeriphCLKFreq+0x202>
 800b732:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800b736:	d037      	beq.n	800b7a8 <HAL_RCCEx_GetPeriphCLKFreq+0x1fc>
 800b738:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800b73c:	d018      	beq.n	800b770 <HAL_RCCEx_GetPeriphCLKFreq+0x1c4>
 800b73e:	e036      	b.n	800b7ae <HAL_RCCEx_GetPeriphCLKFreq+0x202>
      {
      case 0: /* PLL1 is the clock source for SAI4A */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800b740:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800b744:	4618      	mov	r0, r3
 800b746:	f000 fc57 	bl	800bff8 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800b74a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b74c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800b74e:	e195      	b.n	800ba7c <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_D3CCIPR_SAI4ASEL_0: /* PLLI2 is the clock source for SAI4A */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b750:	f107 0318 	add.w	r3, r7, #24
 800b754:	4618      	mov	r0, r3
 800b756:	f000 f9b7 	bl	800bac8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800b75a:	69bb      	ldr	r3, [r7, #24]
 800b75c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800b75e:	e18d      	b.n	800ba7c <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_D3CCIPR_SAI4ASEL_1: /* PLLI3 is the clock source for SAI4A */
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b760:	f107 030c 	add.w	r3, r7, #12
 800b764:	4618      	mov	r0, r3
 800b766:	f000 fafb 	bl	800bd60 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800b76a:	68fb      	ldr	r3, [r7, #12]
 800b76c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800b76e:	e185      	b.n	800ba7c <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_D3CCIPR_SAI4ASEL_2: /* CKPER is the clock source for SAI4A*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 800b770:	4b34      	ldr	r3, [pc, #208]	; (800b844 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800b772:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b774:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800b778:	637b      	str	r3, [r7, #52]	; 0x34

          if(ckpclocksource== RCC_CLKPSOURCE_HSI)
 800b77a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b77c:	2b00      	cmp	r3, #0
 800b77e:	d102      	bne.n	800b786 <HAL_RCCEx_GetPeriphCLKFreq+0x1da>
          {
            /* In Case the CKPER Source is HSI */
            frequency = HSI_VALUE;
 800b780:	4b31      	ldr	r3, [pc, #196]	; (800b848 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 800b782:	63fb      	str	r3, [r7, #60]	; 0x3c
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
          }

          break;
 800b784:	e17a      	b.n	800ba7c <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if(ckpclocksource== RCC_CLKPSOURCE_CSI)
 800b786:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b788:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800b78c:	d102      	bne.n	800b794 <HAL_RCCEx_GetPeriphCLKFreq+0x1e8>
            frequency = CSI_VALUE;
 800b78e:	4b2f      	ldr	r3, [pc, #188]	; (800b84c <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 800b790:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800b792:	e173      	b.n	800ba7c <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if (ckpclocksource== RCC_CLKPSOURCE_HSE)
 800b794:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b796:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b79a:	d102      	bne.n	800b7a2 <HAL_RCCEx_GetPeriphCLKFreq+0x1f6>
            frequency = HSE_VALUE;
 800b79c:	4b2c      	ldr	r3, [pc, #176]	; (800b850 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 800b79e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800b7a0:	e16c      	b.n	800ba7c <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
            frequency = 0;
 800b7a2:	2300      	movs	r3, #0
 800b7a4:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800b7a6:	e169      	b.n	800ba7c <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case (RCC_D3CCIPR_SAI4ASEL_0 | RCC_D3CCIPR_SAI4ASEL_1 ): /* External clock is the clock source for SAI4A */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 800b7a8:	4b2a      	ldr	r3, [pc, #168]	; (800b854 <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>)
 800b7aa:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800b7ac:	e166      	b.n	800ba7c <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      default :
        {
          frequency = 0;
 800b7ae:	2300      	movs	r3, #0
 800b7b0:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800b7b2:	bf00      	nop
 800b7b4:	e162      	b.n	800ba7c <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      }
    }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 800b7b6:	687b      	ldr	r3, [r7, #4]
 800b7b8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800b7bc:	d15d      	bne.n	800b87a <HAL_RCCEx_GetPeriphCLKFreq+0x2ce>
    {

      saiclocksource= __HAL_RCC_GET_SAI4B_SOURCE();
 800b7be:	4b21      	ldr	r3, [pc, #132]	; (800b844 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800b7c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b7c2:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 800b7c6:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 800b7c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b7ca:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800b7ce:	d01f      	beq.n	800b810 <HAL_RCCEx_GetPeriphCLKFreq+0x264>
 800b7d0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800b7d4:	d805      	bhi.n	800b7e2 <HAL_RCCEx_GetPeriphCLKFreq+0x236>
 800b7d6:	2b00      	cmp	r3, #0
 800b7d8:	d00a      	beq.n	800b7f0 <HAL_RCCEx_GetPeriphCLKFreq+0x244>
 800b7da:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800b7de:	d00f      	beq.n	800b800 <HAL_RCCEx_GetPeriphCLKFreq+0x254>
 800b7e0:	e047      	b.n	800b872 <HAL_RCCEx_GetPeriphCLKFreq+0x2c6>
 800b7e2:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800b7e6:	d041      	beq.n	800b86c <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>
 800b7e8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800b7ec:	d018      	beq.n	800b820 <HAL_RCCEx_GetPeriphCLKFreq+0x274>
 800b7ee:	e040      	b.n	800b872 <HAL_RCCEx_GetPeriphCLKFreq+0x2c6>
      {
      case 0: /* PLL1 is the clock source for SAI4B */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800b7f0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800b7f4:	4618      	mov	r0, r3
 800b7f6:	f000 fbff 	bl	800bff8 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800b7fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b7fc:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800b7fe:	e13d      	b.n	800ba7c <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_D3CCIPR_SAI4BSEL_0: /* PLLI2 is the clock source for SAI4B */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b800:	f107 0318 	add.w	r3, r7, #24
 800b804:	4618      	mov	r0, r3
 800b806:	f000 f95f 	bl	800bac8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800b80a:	69bb      	ldr	r3, [r7, #24]
 800b80c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800b80e:	e135      	b.n	800ba7c <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_D3CCIPR_SAI4BSEL_1: /* PLLI3 is the clock source for SAI4B */
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b810:	f107 030c 	add.w	r3, r7, #12
 800b814:	4618      	mov	r0, r3
 800b816:	f000 faa3 	bl	800bd60 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800b81a:	68fb      	ldr	r3, [r7, #12]
 800b81c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800b81e:	e12d      	b.n	800ba7c <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_D3CCIPR_SAI4BSEL_2: /* CKPER is the clock source for SAI4B*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 800b820:	4b08      	ldr	r3, [pc, #32]	; (800b844 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800b822:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b824:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800b828:	637b      	str	r3, [r7, #52]	; 0x34

          if(ckpclocksource== RCC_CLKPSOURCE_HSI)
 800b82a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b82c:	2b00      	cmp	r3, #0
 800b82e:	d102      	bne.n	800b836 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
          {
            /* In Case the CKPER Source is HSI */
            frequency = HSI_VALUE;
 800b830:	4b05      	ldr	r3, [pc, #20]	; (800b848 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 800b832:	63fb      	str	r3, [r7, #60]	; 0x3c
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
          }

          break;
 800b834:	e122      	b.n	800ba7c <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if(ckpclocksource== RCC_CLKPSOURCE_CSI)
 800b836:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b838:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800b83c:	d10c      	bne.n	800b858 <HAL_RCCEx_GetPeriphCLKFreq+0x2ac>
            frequency = CSI_VALUE;
 800b83e:	4b03      	ldr	r3, [pc, #12]	; (800b84c <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 800b840:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800b842:	e11b      	b.n	800ba7c <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
 800b844:	58024400 	.word	0x58024400
 800b848:	03d09000 	.word	0x03d09000
 800b84c:	003d0900 	.word	0x003d0900
 800b850:	017d7840 	.word	0x017d7840
 800b854:	00bb8000 	.word	0x00bb8000
          else if (ckpclocksource== RCC_CLKPSOURCE_HSE)
 800b858:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b85a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b85e:	d102      	bne.n	800b866 <HAL_RCCEx_GetPeriphCLKFreq+0x2ba>
            frequency = HSE_VALUE;
 800b860:	4b89      	ldr	r3, [pc, #548]	; (800ba88 <HAL_RCCEx_GetPeriphCLKFreq+0x4dc>)
 800b862:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800b864:	e10a      	b.n	800ba7c <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
            frequency = 0;
 800b866:	2300      	movs	r3, #0
 800b868:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800b86a:	e107      	b.n	800ba7c <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case (RCC_D3CCIPR_SAI4BSEL_0 | RCC_D3CCIPR_SAI4BSEL_1 ): /* External clock is the clock source for SAI4B */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 800b86c:	4b87      	ldr	r3, [pc, #540]	; (800ba8c <HAL_RCCEx_GetPeriphCLKFreq+0x4e0>)
 800b86e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800b870:	e104      	b.n	800ba7c <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      default :
        {
          frequency = 0;
 800b872:	2300      	movs	r3, #0
 800b874:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800b876:	bf00      	nop
 800b878:	e100      	b.n	800ba7c <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      }
    }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 800b87a:	687b      	ldr	r3, [r7, #4]
 800b87c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b880:	d153      	bne.n	800b92a <HAL_RCCEx_GetPeriphCLKFreq+0x37e>
    {
      /* Get SPI1/2/3 clock source */
      srcclk= __HAL_RCC_GET_SPI123_SOURCE();
 800b882:	4b83      	ldr	r3, [pc, #524]	; (800ba90 <HAL_RCCEx_GetPeriphCLKFreq+0x4e4>)
 800b884:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b886:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 800b88a:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 800b88c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b88e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b892:	d01f      	beq.n	800b8d4 <HAL_RCCEx_GetPeriphCLKFreq+0x328>
 800b894:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b898:	d805      	bhi.n	800b8a6 <HAL_RCCEx_GetPeriphCLKFreq+0x2fa>
 800b89a:	2b00      	cmp	r3, #0
 800b89c:	d00a      	beq.n	800b8b4 <HAL_RCCEx_GetPeriphCLKFreq+0x308>
 800b89e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b8a2:	d00f      	beq.n	800b8c4 <HAL_RCCEx_GetPeriphCLKFreq+0x318>
 800b8a4:	e03d      	b.n	800b922 <HAL_RCCEx_GetPeriphCLKFreq+0x376>
 800b8a6:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800b8aa:	d037      	beq.n	800b91c <HAL_RCCEx_GetPeriphCLKFreq+0x370>
 800b8ac:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800b8b0:	d018      	beq.n	800b8e4 <HAL_RCCEx_GetPeriphCLKFreq+0x338>
 800b8b2:	e036      	b.n	800b922 <HAL_RCCEx_GetPeriphCLKFreq+0x376>
      {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for I2S */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800b8b4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800b8b8:	4618      	mov	r0, r3
 800b8ba:	f000 fb9d 	bl	800bff8 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800b8be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b8c0:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800b8c2:	e0db      	b.n	800ba7c <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for I2S */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b8c4:	f107 0318 	add.w	r3, r7, #24
 800b8c8:	4618      	mov	r0, r3
 800b8ca:	f000 f8fd 	bl	800bac8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800b8ce:	69bb      	ldr	r3, [r7, #24]
 800b8d0:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800b8d2:	e0d3      	b.n	800ba7c <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for I2S */
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b8d4:	f107 030c 	add.w	r3, r7, #12
 800b8d8:	4618      	mov	r0, r3
 800b8da:	f000 fa41 	bl	800bd60 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800b8de:	68fb      	ldr	r3, [r7, #12]
 800b8e0:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800b8e2:	e0cb      	b.n	800ba7c <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for I2S */
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 800b8e4:	4b6a      	ldr	r3, [pc, #424]	; (800ba90 <HAL_RCCEx_GetPeriphCLKFreq+0x4e4>)
 800b8e6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b8e8:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800b8ec:	637b      	str	r3, [r7, #52]	; 0x34

          if(ckpclocksource== RCC_CLKPSOURCE_HSI)
 800b8ee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b8f0:	2b00      	cmp	r3, #0
 800b8f2:	d102      	bne.n	800b8fa <HAL_RCCEx_GetPeriphCLKFreq+0x34e>
          {
            /* In Case the CKPER Source is HSI */
            frequency = HSI_VALUE;
 800b8f4:	4b67      	ldr	r3, [pc, #412]	; (800ba94 <HAL_RCCEx_GetPeriphCLKFreq+0x4e8>)
 800b8f6:	63fb      	str	r3, [r7, #60]	; 0x3c
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
          }

          break;
 800b8f8:	e0c0      	b.n	800ba7c <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if(ckpclocksource== RCC_CLKPSOURCE_CSI)
 800b8fa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b8fc:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800b900:	d102      	bne.n	800b908 <HAL_RCCEx_GetPeriphCLKFreq+0x35c>
            frequency = CSI_VALUE;
 800b902:	4b65      	ldr	r3, [pc, #404]	; (800ba98 <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>)
 800b904:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800b906:	e0b9      	b.n	800ba7c <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if (ckpclocksource== RCC_CLKPSOURCE_HSE)
 800b908:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b90a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b90e:	d102      	bne.n	800b916 <HAL_RCCEx_GetPeriphCLKFreq+0x36a>
            frequency = HSE_VALUE;
 800b910:	4b5d      	ldr	r3, [pc, #372]	; (800ba88 <HAL_RCCEx_GetPeriphCLKFreq+0x4dc>)
 800b912:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800b914:	e0b2      	b.n	800ba7c <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
            frequency = 0;
 800b916:	2300      	movs	r3, #0
 800b918:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800b91a:	e0af      	b.n	800ba7c <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 800b91c:	4b5b      	ldr	r3, [pc, #364]	; (800ba8c <HAL_RCCEx_GetPeriphCLKFreq+0x4e0>)
 800b91e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800b920:	e0ac      	b.n	800ba7c <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      default :
        {
          frequency = 0;
 800b922:	2300      	movs	r3, #0
 800b924:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800b926:	bf00      	nop
 800b928:	e0a8      	b.n	800ba7c <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 800b92a:	687b      	ldr	r3, [r7, #4]
 800b92c:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800b930:	d13d      	bne.n	800b9ae <HAL_RCCEx_GetPeriphCLKFreq+0x402>
    {
      /* Get ADC clock source */
      srcclk= __HAL_RCC_GET_ADC_SOURCE();
 800b932:	4b57      	ldr	r3, [pc, #348]	; (800ba90 <HAL_RCCEx_GetPeriphCLKFreq+0x4e4>)
 800b934:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b936:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800b93a:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 800b93c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b93e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b942:	d00c      	beq.n	800b95e <HAL_RCCEx_GetPeriphCLKFreq+0x3b2>
 800b944:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800b948:	d011      	beq.n	800b96e <HAL_RCCEx_GetPeriphCLKFreq+0x3c2>
 800b94a:	2b00      	cmp	r3, #0
 800b94c:	d12b      	bne.n	800b9a6 <HAL_RCCEx_GetPeriphCLKFreq+0x3fa>
      {
      case RCC_ADCCLKSOURCE_PLL2:
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b94e:	f107 0318 	add.w	r3, r7, #24
 800b952:	4618      	mov	r0, r3
 800b954:	f000 f8b8 	bl	800bac8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800b958:	69bb      	ldr	r3, [r7, #24]
 800b95a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800b95c:	e08e      	b.n	800ba7c <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_ADCCLKSOURCE_PLL3:
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b95e:	f107 030c 	add.w	r3, r7, #12
 800b962:	4618      	mov	r0, r3
 800b964:	f000 f9fc 	bl	800bd60 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 800b968:	697b      	ldr	r3, [r7, #20]
 800b96a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800b96c:	e086      	b.n	800ba7c <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_ADCCLKSOURCE_CLKP:
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 800b96e:	4b48      	ldr	r3, [pc, #288]	; (800ba90 <HAL_RCCEx_GetPeriphCLKFreq+0x4e4>)
 800b970:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b972:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800b976:	637b      	str	r3, [r7, #52]	; 0x34

          if(ckpclocksource== RCC_CLKPSOURCE_HSI)
 800b978:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b97a:	2b00      	cmp	r3, #0
 800b97c:	d102      	bne.n	800b984 <HAL_RCCEx_GetPeriphCLKFreq+0x3d8>
          {
            /* In Case the CKPER Source is HSI */
            frequency = HSI_VALUE;
 800b97e:	4b45      	ldr	r3, [pc, #276]	; (800ba94 <HAL_RCCEx_GetPeriphCLKFreq+0x4e8>)
 800b980:	63fb      	str	r3, [r7, #60]	; 0x3c
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
          }

          break;
 800b982:	e07b      	b.n	800ba7c <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if(ckpclocksource== RCC_CLKPSOURCE_CSI)
 800b984:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b986:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800b98a:	d102      	bne.n	800b992 <HAL_RCCEx_GetPeriphCLKFreq+0x3e6>
            frequency = CSI_VALUE;
 800b98c:	4b42      	ldr	r3, [pc, #264]	; (800ba98 <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>)
 800b98e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800b990:	e074      	b.n	800ba7c <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if (ckpclocksource== RCC_CLKPSOURCE_HSE)
 800b992:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b994:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b998:	d102      	bne.n	800b9a0 <HAL_RCCEx_GetPeriphCLKFreq+0x3f4>
            frequency = HSE_VALUE;
 800b99a:	4b3b      	ldr	r3, [pc, #236]	; (800ba88 <HAL_RCCEx_GetPeriphCLKFreq+0x4dc>)
 800b99c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800b99e:	e06d      	b.n	800ba7c <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
            frequency = 0;
 800b9a0:	2300      	movs	r3, #0
 800b9a2:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800b9a4:	e06a      	b.n	800ba7c <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      default :
        {
          frequency = 0;
 800b9a6:	2300      	movs	r3, #0
 800b9a8:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800b9aa:	bf00      	nop
 800b9ac:	e066      	b.n	800ba7c <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 800b9ae:	687b      	ldr	r3, [r7, #4]
 800b9b0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b9b4:	d11f      	bne.n	800b9f6 <HAL_RCCEx_GetPeriphCLKFreq+0x44a>
    {
      /* Get SDMMC clock source */
      srcclk= __HAL_RCC_GET_SDMMC_SOURCE();
 800b9b6:	4b36      	ldr	r3, [pc, #216]	; (800ba90 <HAL_RCCEx_GetPeriphCLKFreq+0x4e4>)
 800b9b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b9ba:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800b9be:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 800b9c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b9c2:	2b00      	cmp	r3, #0
 800b9c4:	d003      	beq.n	800b9ce <HAL_RCCEx_GetPeriphCLKFreq+0x422>
 800b9c6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b9ca:	d008      	beq.n	800b9de <HAL_RCCEx_GetPeriphCLKFreq+0x432>
 800b9cc:	e00f      	b.n	800b9ee <HAL_RCCEx_GetPeriphCLKFreq+0x442>
      {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800b9ce:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800b9d2:	4618      	mov	r0, r3
 800b9d4:	f000 fb10 	bl	800bff8 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800b9d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b9da:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800b9dc:	e04e      	b.n	800ba7c <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b9de:	f107 0318 	add.w	r3, r7, #24
 800b9e2:	4618      	mov	r0, r3
 800b9e4:	f000 f870 	bl	800bac8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 800b9e8:	6a3b      	ldr	r3, [r7, #32]
 800b9ea:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800b9ec:	e046      	b.n	800ba7c <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      default :
        {
          frequency = 0;
 800b9ee:	2300      	movs	r3, #0
 800b9f0:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800b9f2:	bf00      	nop
 800b9f4:	e042      	b.n	800ba7c <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 800b9f6:	687b      	ldr	r3, [r7, #4]
 800b9f8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800b9fc:	d13c      	bne.n	800ba78 <HAL_RCCEx_GetPeriphCLKFreq+0x4cc>
    {
      /* Get SPI6 clock source */
      srcclk= __HAL_RCC_GET_SPI6_SOURCE();
 800b9fe:	4b24      	ldr	r3, [pc, #144]	; (800ba90 <HAL_RCCEx_GetPeriphCLKFreq+0x4e4>)
 800ba00:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ba02:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
 800ba06:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 800ba08:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ba0a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800ba0e:	d01e      	beq.n	800ba4e <HAL_RCCEx_GetPeriphCLKFreq+0x4a2>
 800ba10:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800ba14:	d805      	bhi.n	800ba22 <HAL_RCCEx_GetPeriphCLKFreq+0x476>
 800ba16:	2b00      	cmp	r3, #0
 800ba18:	d00d      	beq.n	800ba36 <HAL_RCCEx_GetPeriphCLKFreq+0x48a>
 800ba1a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800ba1e:	d00e      	beq.n	800ba3e <HAL_RCCEx_GetPeriphCLKFreq+0x492>
 800ba20:	e026      	b.n	800ba70 <HAL_RCCEx_GetPeriphCLKFreq+0x4c4>
 800ba22:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800ba26:	d01d      	beq.n	800ba64 <HAL_RCCEx_GetPeriphCLKFreq+0x4b8>
 800ba28:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800ba2c:	d01d      	beq.n	800ba6a <HAL_RCCEx_GetPeriphCLKFreq+0x4be>
 800ba2e:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800ba32:	d014      	beq.n	800ba5e <HAL_RCCEx_GetPeriphCLKFreq+0x4b2>
 800ba34:	e01c      	b.n	800ba70 <HAL_RCCEx_GetPeriphCLKFreq+0x4c4>
      {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
        {
          frequency = HAL_RCCEx_GetD3PCLK1Freq();
 800ba36:	f000 f831 	bl	800ba9c <HAL_RCCEx_GetD3PCLK1Freq>
 800ba3a:	63f8      	str	r0, [r7, #60]	; 0x3c
          break;
 800ba3c:	e01e      	b.n	800ba7c <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800ba3e:	f107 0318 	add.w	r3, r7, #24
 800ba42:	4618      	mov	r0, r3
 800ba44:	f000 f840 	bl	800bac8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800ba48:	69fb      	ldr	r3, [r7, #28]
 800ba4a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800ba4c:	e016      	b.n	800ba7c <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800ba4e:	f107 030c 	add.w	r3, r7, #12
 800ba52:	4618      	mov	r0, r3
 800ba54:	f000 f984 	bl	800bd60 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800ba58:	693b      	ldr	r3, [r7, #16]
 800ba5a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800ba5c:	e00e      	b.n	800ba7c <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
        {
          frequency = HSI_VALUE;
 800ba5e:	4b0d      	ldr	r3, [pc, #52]	; (800ba94 <HAL_RCCEx_GetPeriphCLKFreq+0x4e8>)
 800ba60:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800ba62:	e00b      	b.n	800ba7c <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
        {
          frequency = CSI_VALUE;
 800ba64:	4b0c      	ldr	r3, [pc, #48]	; (800ba98 <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>)
 800ba66:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800ba68:	e008      	b.n	800ba7c <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
        {
          frequency = HSE_VALUE;
 800ba6a:	4b07      	ldr	r3, [pc, #28]	; (800ba88 <HAL_RCCEx_GetPeriphCLKFreq+0x4dc>)
 800ba6c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800ba6e:	e005      	b.n	800ba7c <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          break;
        }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
        {
          frequency = 0;
 800ba70:	2300      	movs	r3, #0
 800ba72:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800ba74:	bf00      	nop
 800ba76:	e001      	b.n	800ba7c <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      }
    }
  else
    {
      frequency = 0;
 800ba78:	2300      	movs	r3, #0
 800ba7a:	63fb      	str	r3, [r7, #60]	; 0x3c
    }

  return frequency;
 800ba7c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800ba7e:	4618      	mov	r0, r3
 800ba80:	3740      	adds	r7, #64	; 0x40
 800ba82:	46bd      	mov	sp, r7
 800ba84:	bd80      	pop	{r7, pc}
 800ba86:	bf00      	nop
 800ba88:	017d7840 	.word	0x017d7840
 800ba8c:	00bb8000 	.word	0x00bb8000
 800ba90:	58024400 	.word	0x58024400
 800ba94:	03d09000 	.word	0x03d09000
 800ba98:	003d0900 	.word	0x003d0900

0800ba9c <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 800ba9c:	b580      	push	{r7, lr}
 800ba9e:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 800baa0:	f7fe fe1e 	bl	800a6e0 <HAL_RCC_GetHCLKFreq>
 800baa4:	4601      	mov	r1, r0
 800baa6:	4b06      	ldr	r3, [pc, #24]	; (800bac0 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 800baa8:	6a1b      	ldr	r3, [r3, #32]
 800baaa:	091b      	lsrs	r3, r3, #4
 800baac:	f003 0307 	and.w	r3, r3, #7
 800bab0:	4a04      	ldr	r2, [pc, #16]	; (800bac4 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800bab2:	5cd3      	ldrb	r3, [r2, r3]
 800bab4:	f003 031f 	and.w	r3, r3, #31
 800bab8:	fa21 f303 	lsr.w	r3, r1, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 800babc:	4618      	mov	r0, r3
 800babe:	bd80      	pop	{r7, pc}
 800bac0:	58024400 	.word	0x58024400
 800bac4:	0801affc 	.word	0x0801affc

0800bac8 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 800bac8:	b480      	push	{r7}
 800baca:	b089      	sub	sp, #36	; 0x24
 800bacc:	af00      	add	r7, sp, #0
 800bace:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800bad0:	4b9d      	ldr	r3, [pc, #628]	; (800bd48 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 800bad2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bad4:	f003 0303 	and.w	r3, r3, #3
 800bad8:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 800bada:	4b9b      	ldr	r3, [pc, #620]	; (800bd48 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 800badc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bade:	0b1b      	lsrs	r3, r3, #12
 800bae0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800bae4:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800bae6:	4b98      	ldr	r3, [pc, #608]	; (800bd48 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 800bae8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800baea:	091b      	lsrs	r3, r3, #4
 800baec:	f003 0301 	and.w	r3, r3, #1
 800baf0:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 800baf2:	4b95      	ldr	r3, [pc, #596]	; (800bd48 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 800baf4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800baf6:	08db      	lsrs	r3, r3, #3
 800baf8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800bafc:	693a      	ldr	r2, [r7, #16]
 800bafe:	fb02 f303 	mul.w	r3, r2, r3
 800bb02:	ee07 3a90 	vmov	s15, r3
 800bb06:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bb0a:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800bb0e:	697b      	ldr	r3, [r7, #20]
 800bb10:	2b00      	cmp	r3, #0
 800bb12:	f000 810a 	beq.w	800bd2a <HAL_RCCEx_GetPLL2ClockFreq+0x262>
  {
    switch (pllsource)
 800bb16:	69bb      	ldr	r3, [r7, #24]
 800bb18:	2b01      	cmp	r3, #1
 800bb1a:	d05a      	beq.n	800bbd2 <HAL_RCCEx_GetPLL2ClockFreq+0x10a>
 800bb1c:	2b01      	cmp	r3, #1
 800bb1e:	d302      	bcc.n	800bb26 <HAL_RCCEx_GetPLL2ClockFreq+0x5e>
 800bb20:	2b02      	cmp	r3, #2
 800bb22:	d078      	beq.n	800bc16 <HAL_RCCEx_GetPLL2ClockFreq+0x14e>
 800bb24:	e099      	b.n	800bc5a <HAL_RCCEx_GetPLL2ClockFreq+0x192>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800bb26:	4b88      	ldr	r3, [pc, #544]	; (800bd48 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 800bb28:	681b      	ldr	r3, [r3, #0]
 800bb2a:	f003 0320 	and.w	r3, r3, #32
 800bb2e:	2b00      	cmp	r3, #0
 800bb30:	d02d      	beq.n	800bb8e <HAL_RCCEx_GetPLL2ClockFreq+0xc6>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800bb32:	4b85      	ldr	r3, [pc, #532]	; (800bd48 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 800bb34:	681b      	ldr	r3, [r3, #0]
 800bb36:	08db      	lsrs	r3, r3, #3
 800bb38:	f003 0303 	and.w	r3, r3, #3
 800bb3c:	4a83      	ldr	r2, [pc, #524]	; (800bd4c <HAL_RCCEx_GetPLL2ClockFreq+0x284>)
 800bb3e:	fa22 f303 	lsr.w	r3, r2, r3
 800bb42:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800bb44:	68bb      	ldr	r3, [r7, #8]
 800bb46:	ee07 3a90 	vmov	s15, r3
 800bb4a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800bb4e:	697b      	ldr	r3, [r7, #20]
 800bb50:	ee07 3a90 	vmov	s15, r3
 800bb54:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bb58:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800bb5c:	4b7a      	ldr	r3, [pc, #488]	; (800bd48 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 800bb5e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bb60:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bb64:	ee07 3a90 	vmov	s15, r3
 800bb68:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800bb6c:	ed97 6a03 	vldr	s12, [r7, #12]
 800bb70:	eddf 5a77 	vldr	s11, [pc, #476]	; 800bd50 <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 800bb74:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800bb78:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800bb7c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800bb80:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800bb84:	ee67 7a27 	vmul.f32	s15, s14, s15
 800bb88:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 800bb8c:	e087      	b.n	800bc9e <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800bb8e:	697b      	ldr	r3, [r7, #20]
 800bb90:	ee07 3a90 	vmov	s15, r3
 800bb94:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bb98:	eddf 6a6e 	vldr	s13, [pc, #440]	; 800bd54 <HAL_RCCEx_GetPLL2ClockFreq+0x28c>
 800bb9c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800bba0:	4b69      	ldr	r3, [pc, #420]	; (800bd48 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 800bba2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bba4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bba8:	ee07 3a90 	vmov	s15, r3
 800bbac:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800bbb0:	ed97 6a03 	vldr	s12, [r7, #12]
 800bbb4:	eddf 5a66 	vldr	s11, [pc, #408]	; 800bd50 <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 800bbb8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800bbbc:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800bbc0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800bbc4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800bbc8:	ee67 7a27 	vmul.f32	s15, s14, s15
 800bbcc:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800bbd0:	e065      	b.n	800bc9e <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800bbd2:	697b      	ldr	r3, [r7, #20]
 800bbd4:	ee07 3a90 	vmov	s15, r3
 800bbd8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bbdc:	eddf 6a5e 	vldr	s13, [pc, #376]	; 800bd58 <HAL_RCCEx_GetPLL2ClockFreq+0x290>
 800bbe0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800bbe4:	4b58      	ldr	r3, [pc, #352]	; (800bd48 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 800bbe6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bbe8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bbec:	ee07 3a90 	vmov	s15, r3
 800bbf0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800bbf4:	ed97 6a03 	vldr	s12, [r7, #12]
 800bbf8:	eddf 5a55 	vldr	s11, [pc, #340]	; 800bd50 <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 800bbfc:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800bc00:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800bc04:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800bc08:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800bc0c:	ee67 7a27 	vmul.f32	s15, s14, s15
 800bc10:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800bc14:	e043      	b.n	800bc9e <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800bc16:	697b      	ldr	r3, [r7, #20]
 800bc18:	ee07 3a90 	vmov	s15, r3
 800bc1c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bc20:	eddf 6a4e 	vldr	s13, [pc, #312]	; 800bd5c <HAL_RCCEx_GetPLL2ClockFreq+0x294>
 800bc24:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800bc28:	4b47      	ldr	r3, [pc, #284]	; (800bd48 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 800bc2a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bc2c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bc30:	ee07 3a90 	vmov	s15, r3
 800bc34:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800bc38:	ed97 6a03 	vldr	s12, [r7, #12]
 800bc3c:	eddf 5a44 	vldr	s11, [pc, #272]	; 800bd50 <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 800bc40:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800bc44:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800bc48:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800bc4c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800bc50:	ee67 7a27 	vmul.f32	s15, s14, s15
 800bc54:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800bc58:	e021      	b.n	800bc9e <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800bc5a:	697b      	ldr	r3, [r7, #20]
 800bc5c:	ee07 3a90 	vmov	s15, r3
 800bc60:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bc64:	eddf 6a3c 	vldr	s13, [pc, #240]	; 800bd58 <HAL_RCCEx_GetPLL2ClockFreq+0x290>
 800bc68:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800bc6c:	4b36      	ldr	r3, [pc, #216]	; (800bd48 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 800bc6e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bc70:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bc74:	ee07 3a90 	vmov	s15, r3
 800bc78:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800bc7c:	ed97 6a03 	vldr	s12, [r7, #12]
 800bc80:	eddf 5a33 	vldr	s11, [pc, #204]	; 800bd50 <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 800bc84:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800bc88:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800bc8c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800bc90:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800bc94:	ee67 7a27 	vmul.f32	s15, s14, s15
 800bc98:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800bc9c:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 800bc9e:	4b2a      	ldr	r3, [pc, #168]	; (800bd48 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 800bca0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bca2:	0a5b      	lsrs	r3, r3, #9
 800bca4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800bca8:	ee07 3a90 	vmov	s15, r3
 800bcac:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bcb0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800bcb4:	ee37 7a87 	vadd.f32	s14, s15, s14
 800bcb8:	edd7 6a07 	vldr	s13, [r7, #28]
 800bcbc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800bcc0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800bcc4:	ee17 2a90 	vmov	r2, s15
 800bcc8:	687b      	ldr	r3, [r7, #4]
 800bcca:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 800bccc:	4b1e      	ldr	r3, [pc, #120]	; (800bd48 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 800bcce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bcd0:	0c1b      	lsrs	r3, r3, #16
 800bcd2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800bcd6:	ee07 3a90 	vmov	s15, r3
 800bcda:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bcde:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800bce2:	ee37 7a87 	vadd.f32	s14, s15, s14
 800bce6:	edd7 6a07 	vldr	s13, [r7, #28]
 800bcea:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800bcee:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800bcf2:	ee17 2a90 	vmov	r2, s15
 800bcf6:	687b      	ldr	r3, [r7, #4]
 800bcf8:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 800bcfa:	4b13      	ldr	r3, [pc, #76]	; (800bd48 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 800bcfc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bcfe:	0e1b      	lsrs	r3, r3, #24
 800bd00:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800bd04:	ee07 3a90 	vmov	s15, r3
 800bd08:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bd0c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800bd10:	ee37 7a87 	vadd.f32	s14, s15, s14
 800bd14:	edd7 6a07 	vldr	s13, [r7, #28]
 800bd18:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800bd1c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800bd20:	ee17 2a90 	vmov	r2, s15
 800bd24:	687b      	ldr	r3, [r7, #4]
 800bd26:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800bd28:	e008      	b.n	800bd3c <HAL_RCCEx_GetPLL2ClockFreq+0x274>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 800bd2a:	687b      	ldr	r3, [r7, #4]
 800bd2c:	2200      	movs	r2, #0
 800bd2e:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800bd30:	687b      	ldr	r3, [r7, #4]
 800bd32:	2200      	movs	r2, #0
 800bd34:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 800bd36:	687b      	ldr	r3, [r7, #4]
 800bd38:	2200      	movs	r2, #0
 800bd3a:	609a      	str	r2, [r3, #8]
}
 800bd3c:	bf00      	nop
 800bd3e:	3724      	adds	r7, #36	; 0x24
 800bd40:	46bd      	mov	sp, r7
 800bd42:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd46:	4770      	bx	lr
 800bd48:	58024400 	.word	0x58024400
 800bd4c:	03d09000 	.word	0x03d09000
 800bd50:	46000000 	.word	0x46000000
 800bd54:	4c742400 	.word	0x4c742400
 800bd58:	4a742400 	.word	0x4a742400
 800bd5c:	4bbebc20 	.word	0x4bbebc20

0800bd60 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 800bd60:	b480      	push	{r7}
 800bd62:	b089      	sub	sp, #36	; 0x24
 800bd64:	af00      	add	r7, sp, #0
 800bd66:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800bd68:	4b9d      	ldr	r3, [pc, #628]	; (800bfe0 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 800bd6a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bd6c:	f003 0303 	and.w	r3, r3, #3
 800bd70:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 800bd72:	4b9b      	ldr	r3, [pc, #620]	; (800bfe0 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 800bd74:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bd76:	0d1b      	lsrs	r3, r3, #20
 800bd78:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800bd7c:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800bd7e:	4b98      	ldr	r3, [pc, #608]	; (800bfe0 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 800bd80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bd82:	0a1b      	lsrs	r3, r3, #8
 800bd84:	f003 0301 	and.w	r3, r3, #1
 800bd88:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 800bd8a:	4b95      	ldr	r3, [pc, #596]	; (800bfe0 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 800bd8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bd8e:	08db      	lsrs	r3, r3, #3
 800bd90:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800bd94:	693a      	ldr	r2, [r7, #16]
 800bd96:	fb02 f303 	mul.w	r3, r2, r3
 800bd9a:	ee07 3a90 	vmov	s15, r3
 800bd9e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bda2:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 800bda6:	697b      	ldr	r3, [r7, #20]
 800bda8:	2b00      	cmp	r3, #0
 800bdaa:	f000 810a 	beq.w	800bfc2 <HAL_RCCEx_GetPLL3ClockFreq+0x262>
  {
    switch (pllsource)
 800bdae:	69bb      	ldr	r3, [r7, #24]
 800bdb0:	2b01      	cmp	r3, #1
 800bdb2:	d05a      	beq.n	800be6a <HAL_RCCEx_GetPLL3ClockFreq+0x10a>
 800bdb4:	2b01      	cmp	r3, #1
 800bdb6:	d302      	bcc.n	800bdbe <HAL_RCCEx_GetPLL3ClockFreq+0x5e>
 800bdb8:	2b02      	cmp	r3, #2
 800bdba:	d078      	beq.n	800beae <HAL_RCCEx_GetPLL3ClockFreq+0x14e>
 800bdbc:	e099      	b.n	800bef2 <HAL_RCCEx_GetPLL3ClockFreq+0x192>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800bdbe:	4b88      	ldr	r3, [pc, #544]	; (800bfe0 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 800bdc0:	681b      	ldr	r3, [r3, #0]
 800bdc2:	f003 0320 	and.w	r3, r3, #32
 800bdc6:	2b00      	cmp	r3, #0
 800bdc8:	d02d      	beq.n	800be26 <HAL_RCCEx_GetPLL3ClockFreq+0xc6>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800bdca:	4b85      	ldr	r3, [pc, #532]	; (800bfe0 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 800bdcc:	681b      	ldr	r3, [r3, #0]
 800bdce:	08db      	lsrs	r3, r3, #3
 800bdd0:	f003 0303 	and.w	r3, r3, #3
 800bdd4:	4a83      	ldr	r2, [pc, #524]	; (800bfe4 <HAL_RCCEx_GetPLL3ClockFreq+0x284>)
 800bdd6:	fa22 f303 	lsr.w	r3, r2, r3
 800bdda:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800bddc:	68bb      	ldr	r3, [r7, #8]
 800bdde:	ee07 3a90 	vmov	s15, r3
 800bde2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800bde6:	697b      	ldr	r3, [r7, #20]
 800bde8:	ee07 3a90 	vmov	s15, r3
 800bdec:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bdf0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800bdf4:	4b7a      	ldr	r3, [pc, #488]	; (800bfe0 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 800bdf6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bdf8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bdfc:	ee07 3a90 	vmov	s15, r3
 800be00:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800be04:	ed97 6a03 	vldr	s12, [r7, #12]
 800be08:	eddf 5a77 	vldr	s11, [pc, #476]	; 800bfe8 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 800be0c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800be10:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800be14:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800be18:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800be1c:	ee67 7a27 	vmul.f32	s15, s14, s15
 800be20:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 800be24:	e087      	b.n	800bf36 <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800be26:	697b      	ldr	r3, [r7, #20]
 800be28:	ee07 3a90 	vmov	s15, r3
 800be2c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800be30:	eddf 6a6e 	vldr	s13, [pc, #440]	; 800bfec <HAL_RCCEx_GetPLL3ClockFreq+0x28c>
 800be34:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800be38:	4b69      	ldr	r3, [pc, #420]	; (800bfe0 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 800be3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800be3c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800be40:	ee07 3a90 	vmov	s15, r3
 800be44:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800be48:	ed97 6a03 	vldr	s12, [r7, #12]
 800be4c:	eddf 5a66 	vldr	s11, [pc, #408]	; 800bfe8 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 800be50:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800be54:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800be58:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800be5c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800be60:	ee67 7a27 	vmul.f32	s15, s14, s15
 800be64:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800be68:	e065      	b.n	800bf36 <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800be6a:	697b      	ldr	r3, [r7, #20]
 800be6c:	ee07 3a90 	vmov	s15, r3
 800be70:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800be74:	eddf 6a5e 	vldr	s13, [pc, #376]	; 800bff0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>
 800be78:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800be7c:	4b58      	ldr	r3, [pc, #352]	; (800bfe0 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 800be7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800be80:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800be84:	ee07 3a90 	vmov	s15, r3
 800be88:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800be8c:	ed97 6a03 	vldr	s12, [r7, #12]
 800be90:	eddf 5a55 	vldr	s11, [pc, #340]	; 800bfe8 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 800be94:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800be98:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800be9c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800bea0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800bea4:	ee67 7a27 	vmul.f32	s15, s14, s15
 800bea8:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800beac:	e043      	b.n	800bf36 <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800beae:	697b      	ldr	r3, [r7, #20]
 800beb0:	ee07 3a90 	vmov	s15, r3
 800beb4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800beb8:	eddf 6a4e 	vldr	s13, [pc, #312]	; 800bff4 <HAL_RCCEx_GetPLL3ClockFreq+0x294>
 800bebc:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800bec0:	4b47      	ldr	r3, [pc, #284]	; (800bfe0 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 800bec2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bec4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bec8:	ee07 3a90 	vmov	s15, r3
 800becc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800bed0:	ed97 6a03 	vldr	s12, [r7, #12]
 800bed4:	eddf 5a44 	vldr	s11, [pc, #272]	; 800bfe8 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 800bed8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800bedc:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800bee0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800bee4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800bee8:	ee67 7a27 	vmul.f32	s15, s14, s15
 800beec:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800bef0:	e021      	b.n	800bf36 <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800bef2:	697b      	ldr	r3, [r7, #20]
 800bef4:	ee07 3a90 	vmov	s15, r3
 800bef8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800befc:	eddf 6a3c 	vldr	s13, [pc, #240]	; 800bff0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>
 800bf00:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800bf04:	4b36      	ldr	r3, [pc, #216]	; (800bfe0 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 800bf06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bf08:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bf0c:	ee07 3a90 	vmov	s15, r3
 800bf10:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800bf14:	ed97 6a03 	vldr	s12, [r7, #12]
 800bf18:	eddf 5a33 	vldr	s11, [pc, #204]	; 800bfe8 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 800bf1c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800bf20:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800bf24:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800bf28:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800bf2c:	ee67 7a27 	vmul.f32	s15, s14, s15
 800bf30:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800bf34:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 800bf36:	4b2a      	ldr	r3, [pc, #168]	; (800bfe0 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 800bf38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bf3a:	0a5b      	lsrs	r3, r3, #9
 800bf3c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800bf40:	ee07 3a90 	vmov	s15, r3
 800bf44:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bf48:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800bf4c:	ee37 7a87 	vadd.f32	s14, s15, s14
 800bf50:	edd7 6a07 	vldr	s13, [r7, #28]
 800bf54:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800bf58:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800bf5c:	ee17 2a90 	vmov	r2, s15
 800bf60:	687b      	ldr	r3, [r7, #4]
 800bf62:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 800bf64:	4b1e      	ldr	r3, [pc, #120]	; (800bfe0 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 800bf66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bf68:	0c1b      	lsrs	r3, r3, #16
 800bf6a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800bf6e:	ee07 3a90 	vmov	s15, r3
 800bf72:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bf76:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800bf7a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800bf7e:	edd7 6a07 	vldr	s13, [r7, #28]
 800bf82:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800bf86:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800bf8a:	ee17 2a90 	vmov	r2, s15
 800bf8e:	687b      	ldr	r3, [r7, #4]
 800bf90:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 800bf92:	4b13      	ldr	r3, [pc, #76]	; (800bfe0 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 800bf94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bf96:	0e1b      	lsrs	r3, r3, #24
 800bf98:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800bf9c:	ee07 3a90 	vmov	s15, r3
 800bfa0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bfa4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800bfa8:	ee37 7a87 	vadd.f32	s14, s15, s14
 800bfac:	edd7 6a07 	vldr	s13, [r7, #28]
 800bfb0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800bfb4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800bfb8:	ee17 2a90 	vmov	r2, s15
 800bfbc:	687b      	ldr	r3, [r7, #4]
 800bfbe:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800bfc0:	e008      	b.n	800bfd4 <HAL_RCCEx_GetPLL3ClockFreq+0x274>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 800bfc2:	687b      	ldr	r3, [r7, #4]
 800bfc4:	2200      	movs	r2, #0
 800bfc6:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800bfc8:	687b      	ldr	r3, [r7, #4]
 800bfca:	2200      	movs	r2, #0
 800bfcc:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800bfce:	687b      	ldr	r3, [r7, #4]
 800bfd0:	2200      	movs	r2, #0
 800bfd2:	609a      	str	r2, [r3, #8]
}
 800bfd4:	bf00      	nop
 800bfd6:	3724      	adds	r7, #36	; 0x24
 800bfd8:	46bd      	mov	sp, r7
 800bfda:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bfde:	4770      	bx	lr
 800bfe0:	58024400 	.word	0x58024400
 800bfe4:	03d09000 	.word	0x03d09000
 800bfe8:	46000000 	.word	0x46000000
 800bfec:	4c742400 	.word	0x4c742400
 800bff0:	4a742400 	.word	0x4a742400
 800bff4:	4bbebc20 	.word	0x4bbebc20

0800bff8 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef* PLL1_Clocks)
{
 800bff8:	b480      	push	{r7}
 800bffa:	b089      	sub	sp, #36	; 0x24
 800bffc:	af00      	add	r7, sp, #0
 800bffe:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800c000:	4b9d      	ldr	r3, [pc, #628]	; (800c278 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 800c002:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c004:	f003 0303 	and.w	r3, r3, #3
 800c008:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4);
 800c00a:	4b9b      	ldr	r3, [pc, #620]	; (800c278 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 800c00c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c00e:	091b      	lsrs	r3, r3, #4
 800c010:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800c014:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 800c016:	4b98      	ldr	r3, [pc, #608]	; (800c278 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 800c018:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c01a:	f003 0301 	and.w	r3, r3, #1
 800c01e:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 800c020:	4b95      	ldr	r3, [pc, #596]	; (800c278 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 800c022:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c024:	08db      	lsrs	r3, r3, #3
 800c026:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800c02a:	693a      	ldr	r2, [r7, #16]
 800c02c:	fb02 f303 	mul.w	r3, r2, r3
 800c030:	ee07 3a90 	vmov	s15, r3
 800c034:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c038:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 800c03c:	697b      	ldr	r3, [r7, #20]
 800c03e:	2b00      	cmp	r3, #0
 800c040:	f000 810a 	beq.w	800c258 <HAL_RCCEx_GetPLL1ClockFreq+0x260>
  {
    switch (pllsource)
 800c044:	69bb      	ldr	r3, [r7, #24]
 800c046:	2b01      	cmp	r3, #1
 800c048:	d05a      	beq.n	800c100 <HAL_RCCEx_GetPLL1ClockFreq+0x108>
 800c04a:	2b01      	cmp	r3, #1
 800c04c:	d302      	bcc.n	800c054 <HAL_RCCEx_GetPLL1ClockFreq+0x5c>
 800c04e:	2b02      	cmp	r3, #2
 800c050:	d078      	beq.n	800c144 <HAL_RCCEx_GetPLL1ClockFreq+0x14c>
 800c052:	e099      	b.n	800c188 <HAL_RCCEx_GetPLL1ClockFreq+0x190>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800c054:	4b88      	ldr	r3, [pc, #544]	; (800c278 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 800c056:	681b      	ldr	r3, [r3, #0]
 800c058:	f003 0320 	and.w	r3, r3, #32
 800c05c:	2b00      	cmp	r3, #0
 800c05e:	d02d      	beq.n	800c0bc <HAL_RCCEx_GetPLL1ClockFreq+0xc4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800c060:	4b85      	ldr	r3, [pc, #532]	; (800c278 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 800c062:	681b      	ldr	r3, [r3, #0]
 800c064:	08db      	lsrs	r3, r3, #3
 800c066:	f003 0303 	and.w	r3, r3, #3
 800c06a:	4a84      	ldr	r2, [pc, #528]	; (800c27c <HAL_RCCEx_GetPLL1ClockFreq+0x284>)
 800c06c:	fa22 f303 	lsr.w	r3, r2, r3
 800c070:	60bb      	str	r3, [r7, #8]
        pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800c072:	68bb      	ldr	r3, [r7, #8]
 800c074:	ee07 3a90 	vmov	s15, r3
 800c078:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c07c:	697b      	ldr	r3, [r7, #20]
 800c07e:	ee07 3a90 	vmov	s15, r3
 800c082:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c086:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c08a:	4b7b      	ldr	r3, [pc, #492]	; (800c278 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 800c08c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c08e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c092:	ee07 3a90 	vmov	s15, r3
 800c096:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c09a:	ed97 6a03 	vldr	s12, [r7, #12]
 800c09e:	eddf 5a78 	vldr	s11, [pc, #480]	; 800c280 <HAL_RCCEx_GetPLL1ClockFreq+0x288>
 800c0a2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c0a6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c0aa:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800c0ae:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c0b2:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c0b6:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
      }
      break;
 800c0ba:	e087      	b.n	800c1cc <HAL_RCCEx_GetPLL1ClockFreq+0x1d4>
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800c0bc:	697b      	ldr	r3, [r7, #20]
 800c0be:	ee07 3a90 	vmov	s15, r3
 800c0c2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c0c6:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800c284 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>
 800c0ca:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c0ce:	4b6a      	ldr	r3, [pc, #424]	; (800c278 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 800c0d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c0d2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c0d6:	ee07 3a90 	vmov	s15, r3
 800c0da:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c0de:	ed97 6a03 	vldr	s12, [r7, #12]
 800c0e2:	eddf 5a67 	vldr	s11, [pc, #412]	; 800c280 <HAL_RCCEx_GetPLL1ClockFreq+0x288>
 800c0e6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c0ea:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c0ee:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800c0f2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c0f6:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c0fa:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800c0fe:	e065      	b.n	800c1cc <HAL_RCCEx_GetPLL1ClockFreq+0x1d4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800c100:	697b      	ldr	r3, [r7, #20]
 800c102:	ee07 3a90 	vmov	s15, r3
 800c106:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c10a:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800c288 <HAL_RCCEx_GetPLL1ClockFreq+0x290>
 800c10e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c112:	4b59      	ldr	r3, [pc, #356]	; (800c278 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 800c114:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c116:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c11a:	ee07 3a90 	vmov	s15, r3
 800c11e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c122:	ed97 6a03 	vldr	s12, [r7, #12]
 800c126:	eddf 5a56 	vldr	s11, [pc, #344]	; 800c280 <HAL_RCCEx_GetPLL1ClockFreq+0x288>
 800c12a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c12e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c132:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800c136:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c13a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c13e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800c142:	e043      	b.n	800c1cc <HAL_RCCEx_GetPLL1ClockFreq+0x1d4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800c144:	697b      	ldr	r3, [r7, #20]
 800c146:	ee07 3a90 	vmov	s15, r3
 800c14a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c14e:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800c28c <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800c152:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c156:	4b48      	ldr	r3, [pc, #288]	; (800c278 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 800c158:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c15a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c15e:	ee07 3a90 	vmov	s15, r3
 800c162:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c166:	ed97 6a03 	vldr	s12, [r7, #12]
 800c16a:	eddf 5a45 	vldr	s11, [pc, #276]	; 800c280 <HAL_RCCEx_GetPLL1ClockFreq+0x288>
 800c16e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c172:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c176:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800c17a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c17e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c182:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800c186:	e021      	b.n	800c1cc <HAL_RCCEx_GetPLL1ClockFreq+0x1d4>

    default:
      pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800c188:	697b      	ldr	r3, [r7, #20]
 800c18a:	ee07 3a90 	vmov	s15, r3
 800c18e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c192:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800c288 <HAL_RCCEx_GetPLL1ClockFreq+0x290>
 800c196:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c19a:	4b37      	ldr	r3, [pc, #220]	; (800c278 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 800c19c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c19e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c1a2:	ee07 3a90 	vmov	s15, r3
 800c1a6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c1aa:	ed97 6a03 	vldr	s12, [r7, #12]
 800c1ae:	eddf 5a34 	vldr	s11, [pc, #208]	; 800c280 <HAL_RCCEx_GetPLL1ClockFreq+0x288>
 800c1b2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c1b6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c1ba:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800c1be:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c1c2:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c1c6:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800c1ca:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9)  + (float_t)1 )) ;
 800c1cc:	4b2a      	ldr	r3, [pc, #168]	; (800c278 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 800c1ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c1d0:	0a5b      	lsrs	r3, r3, #9
 800c1d2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c1d6:	ee07 3a90 	vmov	s15, r3
 800c1da:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c1de:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800c1e2:	ee37 7a87 	vadd.f32	s14, s15, s14
 800c1e6:	edd7 6a07 	vldr	s13, [r7, #28]
 800c1ea:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800c1ee:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c1f2:	ee17 2a90 	vmov	r2, s15
 800c1f6:	687b      	ldr	r3, [r7, #4]
 800c1f8:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >>16) + (float_t)1 )) ;
 800c1fa:	4b1f      	ldr	r3, [pc, #124]	; (800c278 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 800c1fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c1fe:	0c1b      	lsrs	r3, r3, #16
 800c200:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c204:	ee07 3a90 	vmov	s15, r3
 800c208:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c20c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800c210:	ee37 7a87 	vadd.f32	s14, s15, s14
 800c214:	edd7 6a07 	vldr	s13, [r7, #28]
 800c218:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800c21c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c220:	ee17 2a90 	vmov	r2, s15
 800c224:	687b      	ldr	r3, [r7, #4]
 800c226:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >>24) + (float_t)1 )) ;
 800c228:	4b13      	ldr	r3, [pc, #76]	; (800c278 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 800c22a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c22c:	0e1b      	lsrs	r3, r3, #24
 800c22e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c232:	ee07 3a90 	vmov	s15, r3
 800c236:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c23a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800c23e:	ee37 7a87 	vadd.f32	s14, s15, s14
 800c242:	edd7 6a07 	vldr	s13, [r7, #28]
 800c246:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800c24a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c24e:	ee17 2a90 	vmov	r2, s15
 800c252:	687b      	ldr	r3, [r7, #4]
 800c254:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 800c256:	e008      	b.n	800c26a <HAL_RCCEx_GetPLL1ClockFreq+0x272>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 800c258:	687b      	ldr	r3, [r7, #4]
 800c25a:	2200      	movs	r2, #0
 800c25c:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 800c25e:	687b      	ldr	r3, [r7, #4]
 800c260:	2200      	movs	r2, #0
 800c262:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 800c264:	687b      	ldr	r3, [r7, #4]
 800c266:	2200      	movs	r2, #0
 800c268:	609a      	str	r2, [r3, #8]
}
 800c26a:	bf00      	nop
 800c26c:	3724      	adds	r7, #36	; 0x24
 800c26e:	46bd      	mov	sp, r7
 800c270:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c274:	4770      	bx	lr
 800c276:	bf00      	nop
 800c278:	58024400 	.word	0x58024400
 800c27c:	03d09000 	.word	0x03d09000
 800c280:	46000000 	.word	0x46000000
 800c284:	4c742400 	.word	0x4c742400
 800c288:	4a742400 	.word	0x4a742400
 800c28c:	4bbebc20 	.word	0x4bbebc20

0800c290 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 800c290:	b580      	push	{r7, lr}
 800c292:	b084      	sub	sp, #16
 800c294:	af00      	add	r7, sp, #0
 800c296:	6078      	str	r0, [r7, #4]
 800c298:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800c29a:	2300      	movs	r3, #0
 800c29c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800c29e:	4b53      	ldr	r3, [pc, #332]	; (800c3ec <RCCEx_PLL2_Config+0x15c>)
 800c2a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c2a2:	f003 0303 	and.w	r3, r3, #3
 800c2a6:	2b03      	cmp	r3, #3
 800c2a8:	d101      	bne.n	800c2ae <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800c2aa:	2301      	movs	r3, #1
 800c2ac:	e099      	b.n	800c3e2 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800c2ae:	4b4f      	ldr	r3, [pc, #316]	; (800c3ec <RCCEx_PLL2_Config+0x15c>)
 800c2b0:	681b      	ldr	r3, [r3, #0]
 800c2b2:	4a4e      	ldr	r2, [pc, #312]	; (800c3ec <RCCEx_PLL2_Config+0x15c>)
 800c2b4:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800c2b8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800c2ba:	f7f8 fa01 	bl	80046c0 <HAL_GetTick>
 800c2be:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800c2c0:	e008      	b.n	800c2d4 <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 800c2c2:	f7f8 f9fd 	bl	80046c0 <HAL_GetTick>
 800c2c6:	4602      	mov	r2, r0
 800c2c8:	68bb      	ldr	r3, [r7, #8]
 800c2ca:	1ad3      	subs	r3, r2, r3
 800c2cc:	2b02      	cmp	r3, #2
 800c2ce:	d901      	bls.n	800c2d4 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 800c2d0:	2303      	movs	r3, #3
 800c2d2:	e086      	b.n	800c3e2 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800c2d4:	4b45      	ldr	r3, [pc, #276]	; (800c3ec <RCCEx_PLL2_Config+0x15c>)
 800c2d6:	681b      	ldr	r3, [r3, #0]
 800c2d8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800c2dc:	2b00      	cmp	r3, #0
 800c2de:	d1f0      	bne.n	800c2c2 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 800c2e0:	4b42      	ldr	r3, [pc, #264]	; (800c3ec <RCCEx_PLL2_Config+0x15c>)
 800c2e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c2e4:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800c2e8:	687b      	ldr	r3, [r7, #4]
 800c2ea:	681b      	ldr	r3, [r3, #0]
 800c2ec:	031b      	lsls	r3, r3, #12
 800c2ee:	493f      	ldr	r1, [pc, #252]	; (800c3ec <RCCEx_PLL2_Config+0x15c>)
 800c2f0:	4313      	orrs	r3, r2
 800c2f2:	628b      	str	r3, [r1, #40]	; 0x28
 800c2f4:	687b      	ldr	r3, [r7, #4]
 800c2f6:	685b      	ldr	r3, [r3, #4]
 800c2f8:	3b01      	subs	r3, #1
 800c2fa:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800c2fe:	687b      	ldr	r3, [r7, #4]
 800c300:	689b      	ldr	r3, [r3, #8]
 800c302:	3b01      	subs	r3, #1
 800c304:	025b      	lsls	r3, r3, #9
 800c306:	b29b      	uxth	r3, r3
 800c308:	431a      	orrs	r2, r3
 800c30a:	687b      	ldr	r3, [r7, #4]
 800c30c:	68db      	ldr	r3, [r3, #12]
 800c30e:	3b01      	subs	r3, #1
 800c310:	041b      	lsls	r3, r3, #16
 800c312:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800c316:	431a      	orrs	r2, r3
 800c318:	687b      	ldr	r3, [r7, #4]
 800c31a:	691b      	ldr	r3, [r3, #16]
 800c31c:	3b01      	subs	r3, #1
 800c31e:	061b      	lsls	r3, r3, #24
 800c320:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800c324:	4931      	ldr	r1, [pc, #196]	; (800c3ec <RCCEx_PLL2_Config+0x15c>)
 800c326:	4313      	orrs	r3, r2
 800c328:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800c32a:	4b30      	ldr	r3, [pc, #192]	; (800c3ec <RCCEx_PLL2_Config+0x15c>)
 800c32c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c32e:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800c332:	687b      	ldr	r3, [r7, #4]
 800c334:	695b      	ldr	r3, [r3, #20]
 800c336:	492d      	ldr	r1, [pc, #180]	; (800c3ec <RCCEx_PLL2_Config+0x15c>)
 800c338:	4313      	orrs	r3, r2
 800c33a:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 800c33c:	4b2b      	ldr	r3, [pc, #172]	; (800c3ec <RCCEx_PLL2_Config+0x15c>)
 800c33e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c340:	f023 0220 	bic.w	r2, r3, #32
 800c344:	687b      	ldr	r3, [r7, #4]
 800c346:	699b      	ldr	r3, [r3, #24]
 800c348:	4928      	ldr	r1, [pc, #160]	; (800c3ec <RCCEx_PLL2_Config+0x15c>)
 800c34a:	4313      	orrs	r3, r2
 800c34c:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800c34e:	4b27      	ldr	r3, [pc, #156]	; (800c3ec <RCCEx_PLL2_Config+0x15c>)
 800c350:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c352:	4a26      	ldr	r2, [pc, #152]	; (800c3ec <RCCEx_PLL2_Config+0x15c>)
 800c354:	f023 0310 	bic.w	r3, r3, #16
 800c358:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800c35a:	4b24      	ldr	r3, [pc, #144]	; (800c3ec <RCCEx_PLL2_Config+0x15c>)
 800c35c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800c35e:	4b24      	ldr	r3, [pc, #144]	; (800c3f0 <RCCEx_PLL2_Config+0x160>)
 800c360:	4013      	ands	r3, r2
 800c362:	687a      	ldr	r2, [r7, #4]
 800c364:	69d2      	ldr	r2, [r2, #28]
 800c366:	00d2      	lsls	r2, r2, #3
 800c368:	4920      	ldr	r1, [pc, #128]	; (800c3ec <RCCEx_PLL2_Config+0x15c>)
 800c36a:	4313      	orrs	r3, r2
 800c36c:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800c36e:	4b1f      	ldr	r3, [pc, #124]	; (800c3ec <RCCEx_PLL2_Config+0x15c>)
 800c370:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c372:	4a1e      	ldr	r2, [pc, #120]	; (800c3ec <RCCEx_PLL2_Config+0x15c>)
 800c374:	f043 0310 	orr.w	r3, r3, #16
 800c378:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 800c37a:	683b      	ldr	r3, [r7, #0]
 800c37c:	2b00      	cmp	r3, #0
 800c37e:	d106      	bne.n	800c38e <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800c380:	4b1a      	ldr	r3, [pc, #104]	; (800c3ec <RCCEx_PLL2_Config+0x15c>)
 800c382:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c384:	4a19      	ldr	r2, [pc, #100]	; (800c3ec <RCCEx_PLL2_Config+0x15c>)
 800c386:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800c38a:	62d3      	str	r3, [r2, #44]	; 0x2c
 800c38c:	e00f      	b.n	800c3ae <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 800c38e:	683b      	ldr	r3, [r7, #0]
 800c390:	2b01      	cmp	r3, #1
 800c392:	d106      	bne.n	800c3a2 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800c394:	4b15      	ldr	r3, [pc, #84]	; (800c3ec <RCCEx_PLL2_Config+0x15c>)
 800c396:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c398:	4a14      	ldr	r2, [pc, #80]	; (800c3ec <RCCEx_PLL2_Config+0x15c>)
 800c39a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800c39e:	62d3      	str	r3, [r2, #44]	; 0x2c
 800c3a0:	e005      	b.n	800c3ae <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800c3a2:	4b12      	ldr	r3, [pc, #72]	; (800c3ec <RCCEx_PLL2_Config+0x15c>)
 800c3a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c3a6:	4a11      	ldr	r2, [pc, #68]	; (800c3ec <RCCEx_PLL2_Config+0x15c>)
 800c3a8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800c3ac:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800c3ae:	4b0f      	ldr	r3, [pc, #60]	; (800c3ec <RCCEx_PLL2_Config+0x15c>)
 800c3b0:	681b      	ldr	r3, [r3, #0]
 800c3b2:	4a0e      	ldr	r2, [pc, #56]	; (800c3ec <RCCEx_PLL2_Config+0x15c>)
 800c3b4:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800c3b8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800c3ba:	f7f8 f981 	bl	80046c0 <HAL_GetTick>
 800c3be:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800c3c0:	e008      	b.n	800c3d4 <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 800c3c2:	f7f8 f97d 	bl	80046c0 <HAL_GetTick>
 800c3c6:	4602      	mov	r2, r0
 800c3c8:	68bb      	ldr	r3, [r7, #8]
 800c3ca:	1ad3      	subs	r3, r2, r3
 800c3cc:	2b02      	cmp	r3, #2
 800c3ce:	d901      	bls.n	800c3d4 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 800c3d0:	2303      	movs	r3, #3
 800c3d2:	e006      	b.n	800c3e2 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800c3d4:	4b05      	ldr	r3, [pc, #20]	; (800c3ec <RCCEx_PLL2_Config+0x15c>)
 800c3d6:	681b      	ldr	r3, [r3, #0]
 800c3d8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800c3dc:	2b00      	cmp	r3, #0
 800c3de:	d0f0      	beq.n	800c3c2 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 800c3e0:	7bfb      	ldrb	r3, [r7, #15]
}
 800c3e2:	4618      	mov	r0, r3
 800c3e4:	3710      	adds	r7, #16
 800c3e6:	46bd      	mov	sp, r7
 800c3e8:	bd80      	pop	{r7, pc}
 800c3ea:	bf00      	nop
 800c3ec:	58024400 	.word	0x58024400
 800c3f0:	ffff0007 	.word	0xffff0007

0800c3f4 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 800c3f4:	b580      	push	{r7, lr}
 800c3f6:	b084      	sub	sp, #16
 800c3f8:	af00      	add	r7, sp, #0
 800c3fa:	6078      	str	r0, [r7, #4]
 800c3fc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800c3fe:	2300      	movs	r3, #0
 800c400:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800c402:	4b53      	ldr	r3, [pc, #332]	; (800c550 <RCCEx_PLL3_Config+0x15c>)
 800c404:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c406:	f003 0303 	and.w	r3, r3, #3
 800c40a:	2b03      	cmp	r3, #3
 800c40c:	d101      	bne.n	800c412 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800c40e:	2301      	movs	r3, #1
 800c410:	e099      	b.n	800c546 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800c412:	4b4f      	ldr	r3, [pc, #316]	; (800c550 <RCCEx_PLL3_Config+0x15c>)
 800c414:	681b      	ldr	r3, [r3, #0]
 800c416:	4a4e      	ldr	r2, [pc, #312]	; (800c550 <RCCEx_PLL3_Config+0x15c>)
 800c418:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800c41c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800c41e:	f7f8 f94f 	bl	80046c0 <HAL_GetTick>
 800c422:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800c424:	e008      	b.n	800c438 <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 800c426:	f7f8 f94b 	bl	80046c0 <HAL_GetTick>
 800c42a:	4602      	mov	r2, r0
 800c42c:	68bb      	ldr	r3, [r7, #8]
 800c42e:	1ad3      	subs	r3, r2, r3
 800c430:	2b02      	cmp	r3, #2
 800c432:	d901      	bls.n	800c438 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 800c434:	2303      	movs	r3, #3
 800c436:	e086      	b.n	800c546 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800c438:	4b45      	ldr	r3, [pc, #276]	; (800c550 <RCCEx_PLL3_Config+0x15c>)
 800c43a:	681b      	ldr	r3, [r3, #0]
 800c43c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800c440:	2b00      	cmp	r3, #0
 800c442:	d1f0      	bne.n	800c426 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800c444:	4b42      	ldr	r3, [pc, #264]	; (800c550 <RCCEx_PLL3_Config+0x15c>)
 800c446:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c448:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 800c44c:	687b      	ldr	r3, [r7, #4]
 800c44e:	681b      	ldr	r3, [r3, #0]
 800c450:	051b      	lsls	r3, r3, #20
 800c452:	493f      	ldr	r1, [pc, #252]	; (800c550 <RCCEx_PLL3_Config+0x15c>)
 800c454:	4313      	orrs	r3, r2
 800c456:	628b      	str	r3, [r1, #40]	; 0x28
 800c458:	687b      	ldr	r3, [r7, #4]
 800c45a:	685b      	ldr	r3, [r3, #4]
 800c45c:	3b01      	subs	r3, #1
 800c45e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800c462:	687b      	ldr	r3, [r7, #4]
 800c464:	689b      	ldr	r3, [r3, #8]
 800c466:	3b01      	subs	r3, #1
 800c468:	025b      	lsls	r3, r3, #9
 800c46a:	b29b      	uxth	r3, r3
 800c46c:	431a      	orrs	r2, r3
 800c46e:	687b      	ldr	r3, [r7, #4]
 800c470:	68db      	ldr	r3, [r3, #12]
 800c472:	3b01      	subs	r3, #1
 800c474:	041b      	lsls	r3, r3, #16
 800c476:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800c47a:	431a      	orrs	r2, r3
 800c47c:	687b      	ldr	r3, [r7, #4]
 800c47e:	691b      	ldr	r3, [r3, #16]
 800c480:	3b01      	subs	r3, #1
 800c482:	061b      	lsls	r3, r3, #24
 800c484:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800c488:	4931      	ldr	r1, [pc, #196]	; (800c550 <RCCEx_PLL3_Config+0x15c>)
 800c48a:	4313      	orrs	r3, r2
 800c48c:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800c48e:	4b30      	ldr	r3, [pc, #192]	; (800c550 <RCCEx_PLL3_Config+0x15c>)
 800c490:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c492:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800c496:	687b      	ldr	r3, [r7, #4]
 800c498:	695b      	ldr	r3, [r3, #20]
 800c49a:	492d      	ldr	r1, [pc, #180]	; (800c550 <RCCEx_PLL3_Config+0x15c>)
 800c49c:	4313      	orrs	r3, r2
 800c49e:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800c4a0:	4b2b      	ldr	r3, [pc, #172]	; (800c550 <RCCEx_PLL3_Config+0x15c>)
 800c4a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c4a4:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 800c4a8:	687b      	ldr	r3, [r7, #4]
 800c4aa:	699b      	ldr	r3, [r3, #24]
 800c4ac:	4928      	ldr	r1, [pc, #160]	; (800c550 <RCCEx_PLL3_Config+0x15c>)
 800c4ae:	4313      	orrs	r3, r2
 800c4b0:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800c4b2:	4b27      	ldr	r3, [pc, #156]	; (800c550 <RCCEx_PLL3_Config+0x15c>)
 800c4b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c4b6:	4a26      	ldr	r2, [pc, #152]	; (800c550 <RCCEx_PLL3_Config+0x15c>)
 800c4b8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800c4bc:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800c4be:	4b24      	ldr	r3, [pc, #144]	; (800c550 <RCCEx_PLL3_Config+0x15c>)
 800c4c0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800c4c2:	4b24      	ldr	r3, [pc, #144]	; (800c554 <RCCEx_PLL3_Config+0x160>)
 800c4c4:	4013      	ands	r3, r2
 800c4c6:	687a      	ldr	r2, [r7, #4]
 800c4c8:	69d2      	ldr	r2, [r2, #28]
 800c4ca:	00d2      	lsls	r2, r2, #3
 800c4cc:	4920      	ldr	r1, [pc, #128]	; (800c550 <RCCEx_PLL3_Config+0x15c>)
 800c4ce:	4313      	orrs	r3, r2
 800c4d0:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800c4d2:	4b1f      	ldr	r3, [pc, #124]	; (800c550 <RCCEx_PLL3_Config+0x15c>)
 800c4d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c4d6:	4a1e      	ldr	r2, [pc, #120]	; (800c550 <RCCEx_PLL3_Config+0x15c>)
 800c4d8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800c4dc:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 800c4de:	683b      	ldr	r3, [r7, #0]
 800c4e0:	2b00      	cmp	r3, #0
 800c4e2:	d106      	bne.n	800c4f2 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800c4e4:	4b1a      	ldr	r3, [pc, #104]	; (800c550 <RCCEx_PLL3_Config+0x15c>)
 800c4e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c4e8:	4a19      	ldr	r2, [pc, #100]	; (800c550 <RCCEx_PLL3_Config+0x15c>)
 800c4ea:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800c4ee:	62d3      	str	r3, [r2, #44]	; 0x2c
 800c4f0:	e00f      	b.n	800c512 <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 800c4f2:	683b      	ldr	r3, [r7, #0]
 800c4f4:	2b01      	cmp	r3, #1
 800c4f6:	d106      	bne.n	800c506 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 800c4f8:	4b15      	ldr	r3, [pc, #84]	; (800c550 <RCCEx_PLL3_Config+0x15c>)
 800c4fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c4fc:	4a14      	ldr	r2, [pc, #80]	; (800c550 <RCCEx_PLL3_Config+0x15c>)
 800c4fe:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800c502:	62d3      	str	r3, [r2, #44]	; 0x2c
 800c504:	e005      	b.n	800c512 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800c506:	4b12      	ldr	r3, [pc, #72]	; (800c550 <RCCEx_PLL3_Config+0x15c>)
 800c508:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c50a:	4a11      	ldr	r2, [pc, #68]	; (800c550 <RCCEx_PLL3_Config+0x15c>)
 800c50c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800c510:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800c512:	4b0f      	ldr	r3, [pc, #60]	; (800c550 <RCCEx_PLL3_Config+0x15c>)
 800c514:	681b      	ldr	r3, [r3, #0]
 800c516:	4a0e      	ldr	r2, [pc, #56]	; (800c550 <RCCEx_PLL3_Config+0x15c>)
 800c518:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800c51c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800c51e:	f7f8 f8cf 	bl	80046c0 <HAL_GetTick>
 800c522:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800c524:	e008      	b.n	800c538 <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 800c526:	f7f8 f8cb 	bl	80046c0 <HAL_GetTick>
 800c52a:	4602      	mov	r2, r0
 800c52c:	68bb      	ldr	r3, [r7, #8]
 800c52e:	1ad3      	subs	r3, r2, r3
 800c530:	2b02      	cmp	r3, #2
 800c532:	d901      	bls.n	800c538 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 800c534:	2303      	movs	r3, #3
 800c536:	e006      	b.n	800c546 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800c538:	4b05      	ldr	r3, [pc, #20]	; (800c550 <RCCEx_PLL3_Config+0x15c>)
 800c53a:	681b      	ldr	r3, [r3, #0]
 800c53c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800c540:	2b00      	cmp	r3, #0
 800c542:	d0f0      	beq.n	800c526 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 800c544:	7bfb      	ldrb	r3, [r7, #15]
}
 800c546:	4618      	mov	r0, r3
 800c548:	3710      	adds	r7, #16
 800c54a:	46bd      	mov	sp, r7
 800c54c:	bd80      	pop	{r7, pc}
 800c54e:	bf00      	nop
 800c550:	58024400 	.word	0x58024400
 800c554:	ffff0007 	.word	0xffff0007

0800c558 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 800c558:	b580      	push	{r7, lr}
 800c55a:	b084      	sub	sp, #16
 800c55c:	af00      	add	r7, sp, #0
 800c55e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 800c560:	2301      	movs	r3, #1
 800c562:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler */
  if(hrtc != NULL)
 800c564:	687b      	ldr	r3, [r7, #4]
 800c566:	2b00      	cmp	r3, #0
 800c568:	d067      	beq.n	800c63a <HAL_RTC_Init+0xe2>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else /*  (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */
    if(hrtc->State == HAL_RTC_STATE_RESET)
 800c56a:	687b      	ldr	r3, [r7, #4]
 800c56c:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800c570:	b2db      	uxtb	r3, r3
 800c572:	2b00      	cmp	r3, #0
 800c574:	d106      	bne.n	800c584 <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 800c576:	687b      	ldr	r3, [r7, #4]
 800c578:	2200      	movs	r2, #0
 800c57a:	f883 2020 	strb.w	r2, [r3, #32]

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 800c57e:	6878      	ldr	r0, [r7, #4]
 800c580:	f7f7 fce2 	bl	8003f48 <HAL_RTC_MspInit>
    }
#endif /*  (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 800c584:	687b      	ldr	r3, [r7, #4]
 800c586:	2202      	movs	r2, #2
 800c588:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800c58c:	687b      	ldr	r3, [r7, #4]
 800c58e:	681b      	ldr	r3, [r3, #0]
 800c590:	22ca      	movs	r2, #202	; 0xca
 800c592:	625a      	str	r2, [r3, #36]	; 0x24
 800c594:	687b      	ldr	r3, [r7, #4]
 800c596:	681b      	ldr	r3, [r3, #0]
 800c598:	2253      	movs	r2, #83	; 0x53
 800c59a:	625a      	str	r2, [r3, #36]	; 0x24

   /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 800c59c:	6878      	ldr	r0, [r7, #4]
 800c59e:	f000 fa49 	bl	800ca34 <RTC_EnterInitMode>
 800c5a2:	4603      	mov	r3, r0
 800c5a4:	73fb      	strb	r3, [r7, #15]
    if (status == HAL_OK)
 800c5a6:	7bfb      	ldrb	r3, [r7, #15]
 800c5a8:	2b00      	cmp	r3, #0
 800c5aa:	d13b      	bne.n	800c624 <HAL_RTC_Init+0xcc>
#if defined(RTC_CR_TAMPOE)
      /* Clear RTC_CR FMT, OSEL, POL and TAMPOE Bits */
      hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE);
#else  /* RTC_CR_TAMPOE */
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL);
 800c5ac:	687b      	ldr	r3, [r7, #4]
 800c5ae:	681b      	ldr	r3, [r3, #0]
 800c5b0:	6899      	ldr	r1, [r3, #8]
 800c5b2:	687b      	ldr	r3, [r7, #4]
 800c5b4:	681a      	ldr	r2, [r3, #0]
 800c5b6:	4b23      	ldr	r3, [pc, #140]	; (800c644 <HAL_RTC_Init+0xec>)
 800c5b8:	400b      	ands	r3, r1
 800c5ba:	6093      	str	r3, [r2, #8]
#endif /* RTC_CR_TAMPOE */

      /* Set RTC_CR register */
      hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 800c5bc:	687b      	ldr	r3, [r7, #4]
 800c5be:	681b      	ldr	r3, [r3, #0]
 800c5c0:	6899      	ldr	r1, [r3, #8]
 800c5c2:	687b      	ldr	r3, [r7, #4]
 800c5c4:	685a      	ldr	r2, [r3, #4]
 800c5c6:	687b      	ldr	r3, [r7, #4]
 800c5c8:	691b      	ldr	r3, [r3, #16]
 800c5ca:	431a      	orrs	r2, r3
 800c5cc:	687b      	ldr	r3, [r7, #4]
 800c5ce:	699b      	ldr	r3, [r3, #24]
 800c5d0:	431a      	orrs	r2, r3
 800c5d2:	687b      	ldr	r3, [r7, #4]
 800c5d4:	681b      	ldr	r3, [r3, #0]
 800c5d6:	430a      	orrs	r2, r1
 800c5d8:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos) | (hrtc->Init.SynchPrediv << RTC_PRER_PREDIV_S_Pos);
 800c5da:	687b      	ldr	r3, [r7, #4]
 800c5dc:	689b      	ldr	r3, [r3, #8]
 800c5de:	0419      	lsls	r1, r3, #16
 800c5e0:	687b      	ldr	r3, [r7, #4]
 800c5e2:	68da      	ldr	r2, [r3, #12]
 800c5e4:	687b      	ldr	r3, [r7, #4]
 800c5e6:	681b      	ldr	r3, [r3, #0]
 800c5e8:	430a      	orrs	r2, r1
 800c5ea:	611a      	str	r2, [r3, #16]

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 800c5ec:	6878      	ldr	r0, [r7, #4]
 800c5ee:	f000 fa51 	bl	800ca94 <RTC_ExitInitMode>
 800c5f2:	4603      	mov	r3, r0
 800c5f4:	73fb      	strb	r3, [r7, #15]

      if(status == HAL_OK)
 800c5f6:	7bfb      	ldrb	r3, [r7, #15]
 800c5f8:	2b00      	cmp	r3, #0
 800c5fa:	d113      	bne.n	800c624 <HAL_RTC_Init+0xcc>
        hrtc->Instance->CR &= ~(RTC_CR_TAMPALRM_PU | RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN);
        hrtc->Instance->CR |= (hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
#endif /* RTC_CR_TAMPALRM_TYPE && RTC_CR_OUT2EN && RTC_CR_TAMPALRM_PU */

#if defined(RTC_OR_ALARMOUTTYPE) && defined(RTC_OR_OUT_RMP)
        hrtc->Instance->OR &= ~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 800c5fc:	687b      	ldr	r3, [r7, #4]
 800c5fe:	681b      	ldr	r3, [r3, #0]
 800c600:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800c602:	687b      	ldr	r3, [r7, #4]
 800c604:	681b      	ldr	r3, [r3, #0]
 800c606:	f022 0203 	bic.w	r2, r2, #3
 800c60a:	64da      	str	r2, [r3, #76]	; 0x4c
        hrtc->Instance->OR |= (hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 800c60c:	687b      	ldr	r3, [r7, #4]
 800c60e:	681b      	ldr	r3, [r3, #0]
 800c610:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 800c612:	687b      	ldr	r3, [r7, #4]
 800c614:	69da      	ldr	r2, [r3, #28]
 800c616:	687b      	ldr	r3, [r7, #4]
 800c618:	695b      	ldr	r3, [r3, #20]
 800c61a:	431a      	orrs	r2, r3
 800c61c:	687b      	ldr	r3, [r7, #4]
 800c61e:	681b      	ldr	r3, [r3, #0]
 800c620:	430a      	orrs	r2, r1
 800c622:	64da      	str	r2, [r3, #76]	; 0x4c
#endif /* ALARMOUTTYPE && RTC_OR_OUT_RMP */
      }
    }
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800c624:	687b      	ldr	r3, [r7, #4]
 800c626:	681b      	ldr	r3, [r3, #0]
 800c628:	22ff      	movs	r2, #255	; 0xff
 800c62a:	625a      	str	r2, [r3, #36]	; 0x24
    if (status == HAL_OK)
 800c62c:	7bfb      	ldrb	r3, [r7, #15]
 800c62e:	2b00      	cmp	r3, #0
 800c630:	d103      	bne.n	800c63a <HAL_RTC_Init+0xe2>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_READY;
 800c632:	687b      	ldr	r3, [r7, #4]
 800c634:	2201      	movs	r2, #1
 800c636:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
  }

  /* return status */
  return status;
 800c63a:	7bfb      	ldrb	r3, [r7, #15]
}
 800c63c:	4618      	mov	r0, r3
 800c63e:	3710      	adds	r7, #16
 800c640:	46bd      	mov	sp, r7
 800c642:	bd80      	pop	{r7, pc}
 800c644:	ff8fffbf 	.word	0xff8fffbf

0800c648 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 800c648:	b590      	push	{r4, r7, lr}
 800c64a:	b087      	sub	sp, #28
 800c64c:	af00      	add	r7, sp, #0
 800c64e:	60f8      	str	r0, [r7, #12]
 800c650:	60b9      	str	r1, [r7, #8]
 800c652:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800c654:	68fb      	ldr	r3, [r7, #12]
 800c656:	f893 3020 	ldrb.w	r3, [r3, #32]
 800c65a:	2b01      	cmp	r3, #1
 800c65c:	d101      	bne.n	800c662 <HAL_RTC_SetTime+0x1a>
 800c65e:	2302      	movs	r3, #2
 800c660:	e089      	b.n	800c776 <HAL_RTC_SetTime+0x12e>
 800c662:	68fb      	ldr	r3, [r7, #12]
 800c664:	2201      	movs	r2, #1
 800c666:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800c66a:	68fb      	ldr	r3, [r7, #12]
 800c66c:	2202      	movs	r2, #2
 800c66e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800c672:	68fb      	ldr	r3, [r7, #12]
 800c674:	681b      	ldr	r3, [r3, #0]
 800c676:	22ca      	movs	r2, #202	; 0xca
 800c678:	625a      	str	r2, [r3, #36]	; 0x24
 800c67a:	68fb      	ldr	r3, [r7, #12]
 800c67c:	681b      	ldr	r3, [r3, #0]
 800c67e:	2253      	movs	r2, #83	; 0x53
 800c680:	625a      	str	r2, [r3, #36]	; 0x24
 /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 800c682:	68f8      	ldr	r0, [r7, #12]
 800c684:	f000 f9d6 	bl	800ca34 <RTC_EnterInitMode>
 800c688:	4603      	mov	r3, r0
 800c68a:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 800c68c:	7cfb      	ldrb	r3, [r7, #19]
 800c68e:	2b00      	cmp	r3, #0
 800c690:	d161      	bne.n	800c756 <HAL_RTC_SetTime+0x10e>
  {
    if(Format == RTC_FORMAT_BIN)
 800c692:	687b      	ldr	r3, [r7, #4]
 800c694:	2b00      	cmp	r3, #0
 800c696:	d126      	bne.n	800c6e6 <HAL_RTC_SetTime+0x9e>
    {
      if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800c698:	68fb      	ldr	r3, [r7, #12]
 800c69a:	681b      	ldr	r3, [r3, #0]
 800c69c:	689b      	ldr	r3, [r3, #8]
 800c69e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c6a2:	2b00      	cmp	r3, #0
 800c6a4:	d102      	bne.n	800c6ac <HAL_RTC_SetTime+0x64>
        assert_param(IS_RTC_HOUR12(sTime->Hours));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 800c6a6:	68bb      	ldr	r3, [r7, #8]
 800c6a8:	2200      	movs	r2, #0
 800c6aa:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(sTime->Hours));
      }
      assert_param(IS_RTC_MINUTES(sTime->Minutes));
      assert_param(IS_RTC_SECONDS(sTime->Seconds));

      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800c6ac:	68bb      	ldr	r3, [r7, #8]
 800c6ae:	781b      	ldrb	r3, [r3, #0]
 800c6b0:	4618      	mov	r0, r3
 800c6b2:	f000 fa2d 	bl	800cb10 <RTC_ByteToBcd2>
 800c6b6:	4603      	mov	r3, r0
 800c6b8:	041c      	lsls	r4, r3, #16
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800c6ba:	68bb      	ldr	r3, [r7, #8]
 800c6bc:	785b      	ldrb	r3, [r3, #1]
 800c6be:	4618      	mov	r0, r3
 800c6c0:	f000 fa26 	bl	800cb10 <RTC_ByteToBcd2>
 800c6c4:	4603      	mov	r3, r0
 800c6c6:	021b      	lsls	r3, r3, #8
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800c6c8:	431c      	orrs	r4, r3
                          ((uint32_t)RTC_ByteToBcd2(sTime->Seconds) << RTC_TR_SU_Pos)  | \
 800c6ca:	68bb      	ldr	r3, [r7, #8]
 800c6cc:	789b      	ldrb	r3, [r3, #2]
 800c6ce:	4618      	mov	r0, r3
 800c6d0:	f000 fa1e 	bl	800cb10 <RTC_ByteToBcd2>
 800c6d4:	4603      	mov	r3, r0
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800c6d6:	ea44 0203 	orr.w	r2, r4, r3
                          (((uint32_t)sTime->TimeFormat) << RTC_TR_PM_Pos));
 800c6da:	68bb      	ldr	r3, [r7, #8]
 800c6dc:	78db      	ldrb	r3, [r3, #3]
 800c6de:	059b      	lsls	r3, r3, #22
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800c6e0:	4313      	orrs	r3, r2
 800c6e2:	617b      	str	r3, [r7, #20]
 800c6e4:	e018      	b.n	800c718 <HAL_RTC_SetTime+0xd0>
    }
    else
    {
      if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800c6e6:	68fb      	ldr	r3, [r7, #12]
 800c6e8:	681b      	ldr	r3, [r3, #0]
 800c6ea:	689b      	ldr	r3, [r3, #8]
 800c6ec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c6f0:	2b00      	cmp	r3, #0
 800c6f2:	d102      	bne.n	800c6fa <HAL_RTC_SetTime+0xb2>
        assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 800c6f4:	68bb      	ldr	r3, [r7, #8]
 800c6f6:	2200      	movs	r2, #0
 800c6f8:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
      }
      assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
      assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
      tmpreg = (((uint32_t)(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800c6fa:	68bb      	ldr	r3, [r7, #8]
 800c6fc:	781b      	ldrb	r3, [r3, #0]
 800c6fe:	041a      	lsls	r2, r3, #16
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800c700:	68bb      	ldr	r3, [r7, #8]
 800c702:	785b      	ldrb	r3, [r3, #1]
 800c704:	021b      	lsls	r3, r3, #8
      tmpreg = (((uint32_t)(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800c706:	4313      	orrs	r3, r2
                ((uint32_t)(sTime->Seconds) << RTC_TR_SU_Pos)  | \
 800c708:	68ba      	ldr	r2, [r7, #8]
 800c70a:	7892      	ldrb	r2, [r2, #2]
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800c70c:	431a      	orrs	r2, r3
                ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 800c70e:	68bb      	ldr	r3, [r7, #8]
 800c710:	78db      	ldrb	r3, [r3, #3]
 800c712:	059b      	lsls	r3, r3, #22
      tmpreg = (((uint32_t)(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800c714:	4313      	orrs	r3, r2
 800c716:	617b      	str	r3, [r7, #20]
    }

    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 800c718:	68fb      	ldr	r3, [r7, #12]
 800c71a:	681a      	ldr	r2, [r3, #0]
 800c71c:	6979      	ldr	r1, [r7, #20]
 800c71e:	4b18      	ldr	r3, [pc, #96]	; (800c780 <HAL_RTC_SetTime+0x138>)
 800c720:	400b      	ands	r3, r1
 800c722:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured */
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BKP);
 800c724:	68fb      	ldr	r3, [r7, #12]
 800c726:	681b      	ldr	r3, [r3, #0]
 800c728:	689a      	ldr	r2, [r3, #8]
 800c72a:	68fb      	ldr	r3, [r7, #12]
 800c72c:	681b      	ldr	r3, [r3, #0]
 800c72e:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800c732:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 800c734:	68fb      	ldr	r3, [r7, #12]
 800c736:	681b      	ldr	r3, [r3, #0]
 800c738:	6899      	ldr	r1, [r3, #8]
 800c73a:	68bb      	ldr	r3, [r7, #8]
 800c73c:	68da      	ldr	r2, [r3, #12]
 800c73e:	68bb      	ldr	r3, [r7, #8]
 800c740:	691b      	ldr	r3, [r3, #16]
 800c742:	431a      	orrs	r2, r3
 800c744:	68fb      	ldr	r3, [r7, #12]
 800c746:	681b      	ldr	r3, [r3, #0]
 800c748:	430a      	orrs	r2, r1
 800c74a:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 800c74c:	68f8      	ldr	r0, [r7, #12]
 800c74e:	f000 f9a1 	bl	800ca94 <RTC_ExitInitMode>
 800c752:	4603      	mov	r3, r0
 800c754:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800c756:	68fb      	ldr	r3, [r7, #12]
 800c758:	681b      	ldr	r3, [r3, #0]
 800c75a:	22ff      	movs	r2, #255	; 0xff
 800c75c:	625a      	str	r2, [r3, #36]	; 0x24

  if (status == HAL_OK)
 800c75e:	7cfb      	ldrb	r3, [r7, #19]
 800c760:	2b00      	cmp	r3, #0
 800c762:	d103      	bne.n	800c76c <HAL_RTC_SetTime+0x124>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 800c764:	68fb      	ldr	r3, [r7, #12]
 800c766:	2201      	movs	r2, #1
 800c768:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800c76c:	68fb      	ldr	r3, [r7, #12]
 800c76e:	2200      	movs	r2, #0
 800c770:	f883 2020 	strb.w	r2, [r3, #32]

  return status;
 800c774:	7cfb      	ldrb	r3, [r7, #19]
}
 800c776:	4618      	mov	r0, r3
 800c778:	371c      	adds	r7, #28
 800c77a:	46bd      	mov	sp, r7
 800c77c:	bd90      	pop	{r4, r7, pc}
 800c77e:	bf00      	nop
 800c780:	007f7f7f 	.word	0x007f7f7f

0800c784 <HAL_RTC_GetTime>:
  *        Reading RTC current time locks the values in calendar shadow registers until Current date is read
  *        to ensure consistency between the time and date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 800c784:	b580      	push	{r7, lr}
 800c786:	b086      	sub	sp, #24
 800c788:	af00      	add	r7, sp, #0
 800c78a:	60f8      	str	r0, [r7, #12]
 800c78c:	60b9      	str	r1, [r7, #8]
 800c78e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds structure field from the corresponding register*/
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 800c790:	68fb      	ldr	r3, [r7, #12]
 800c792:	681b      	ldr	r3, [r3, #0]
 800c794:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800c796:	68bb      	ldr	r3, [r7, #8]
 800c798:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 800c79a:	68fb      	ldr	r3, [r7, #12]
 800c79c:	681b      	ldr	r3, [r3, #0]
 800c79e:	691b      	ldr	r3, [r3, #16]
 800c7a0:	f3c3 020e 	ubfx	r2, r3, #0, #15
 800c7a4:	68bb      	ldr	r3, [r7, #8]
 800c7a6:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 800c7a8:	68fb      	ldr	r3, [r7, #12]
 800c7aa:	681b      	ldr	r3, [r3, #0]
 800c7ac:	681a      	ldr	r2, [r3, #0]
 800c7ae:	4b22      	ldr	r3, [pc, #136]	; (800c838 <HAL_RTC_GetTime+0xb4>)
 800c7b0:	4013      	ands	r3, r2
 800c7b2:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours      = (uint8_t)((tmpreg & (RTC_TR_HT  | RTC_TR_HU))  >> RTC_TR_HU_Pos);
 800c7b4:	697b      	ldr	r3, [r7, #20]
 800c7b6:	0c1b      	lsrs	r3, r3, #16
 800c7b8:	b2db      	uxtb	r3, r3
 800c7ba:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800c7be:	b2da      	uxtb	r2, r3
 800c7c0:	68bb      	ldr	r3, [r7, #8]
 800c7c2:	701a      	strb	r2, [r3, #0]
  sTime->Minutes    = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 800c7c4:	697b      	ldr	r3, [r7, #20]
 800c7c6:	0a1b      	lsrs	r3, r3, #8
 800c7c8:	b2db      	uxtb	r3, r3
 800c7ca:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c7ce:	b2da      	uxtb	r2, r3
 800c7d0:	68bb      	ldr	r3, [r7, #8]
 800c7d2:	705a      	strb	r2, [r3, #1]
  sTime->Seconds    = (uint8_t)((tmpreg & (RTC_TR_ST  | RTC_TR_SU))  >> RTC_TR_SU_Pos);
 800c7d4:	697b      	ldr	r3, [r7, #20]
 800c7d6:	b2db      	uxtb	r3, r3
 800c7d8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c7dc:	b2da      	uxtb	r2, r3
 800c7de:	68bb      	ldr	r3, [r7, #8]
 800c7e0:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM))               >> RTC_TR_PM_Pos);
 800c7e2:	697b      	ldr	r3, [r7, #20]
 800c7e4:	0d9b      	lsrs	r3, r3, #22
 800c7e6:	b2db      	uxtb	r3, r3
 800c7e8:	f003 0301 	and.w	r3, r3, #1
 800c7ec:	b2da      	uxtb	r2, r3
 800c7ee:	68bb      	ldr	r3, [r7, #8]
 800c7f0:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if(Format == RTC_FORMAT_BIN)
 800c7f2:	687b      	ldr	r3, [r7, #4]
 800c7f4:	2b00      	cmp	r3, #0
 800c7f6:	d11a      	bne.n	800c82e <HAL_RTC_GetTime+0xaa>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours   = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 800c7f8:	68bb      	ldr	r3, [r7, #8]
 800c7fa:	781b      	ldrb	r3, [r3, #0]
 800c7fc:	4618      	mov	r0, r3
 800c7fe:	f000 f9a7 	bl	800cb50 <RTC_Bcd2ToByte>
 800c802:	4603      	mov	r3, r0
 800c804:	461a      	mov	r2, r3
 800c806:	68bb      	ldr	r3, [r7, #8]
 800c808:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 800c80a:	68bb      	ldr	r3, [r7, #8]
 800c80c:	785b      	ldrb	r3, [r3, #1]
 800c80e:	4618      	mov	r0, r3
 800c810:	f000 f99e 	bl	800cb50 <RTC_Bcd2ToByte>
 800c814:	4603      	mov	r3, r0
 800c816:	461a      	mov	r2, r3
 800c818:	68bb      	ldr	r3, [r7, #8]
 800c81a:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 800c81c:	68bb      	ldr	r3, [r7, #8]
 800c81e:	789b      	ldrb	r3, [r3, #2]
 800c820:	4618      	mov	r0, r3
 800c822:	f000 f995 	bl	800cb50 <RTC_Bcd2ToByte>
 800c826:	4603      	mov	r3, r0
 800c828:	461a      	mov	r2, r3
 800c82a:	68bb      	ldr	r3, [r7, #8]
 800c82c:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 800c82e:	2300      	movs	r3, #0
}
 800c830:	4618      	mov	r0, r3
 800c832:	3718      	adds	r7, #24
 800c834:	46bd      	mov	sp, r7
 800c836:	bd80      	pop	{r7, pc}
 800c838:	007f7f7f 	.word	0x007f7f7f

0800c83c <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 800c83c:	b590      	push	{r4, r7, lr}
 800c83e:	b087      	sub	sp, #28
 800c840:	af00      	add	r7, sp, #0
 800c842:	60f8      	str	r0, [r7, #12]
 800c844:	60b9      	str	r1, [r7, #8]
 800c846:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800c848:	68fb      	ldr	r3, [r7, #12]
 800c84a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800c84e:	2b01      	cmp	r3, #1
 800c850:	d101      	bne.n	800c856 <HAL_RTC_SetDate+0x1a>
 800c852:	2302      	movs	r3, #2
 800c854:	e073      	b.n	800c93e <HAL_RTC_SetDate+0x102>
 800c856:	68fb      	ldr	r3, [r7, #12]
 800c858:	2201      	movs	r2, #1
 800c85a:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800c85e:	68fb      	ldr	r3, [r7, #12]
 800c860:	2202      	movs	r2, #2
 800c862:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  if((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 800c866:	687b      	ldr	r3, [r7, #4]
 800c868:	2b00      	cmp	r3, #0
 800c86a:	d10e      	bne.n	800c88a <HAL_RTC_SetDate+0x4e>
 800c86c:	68bb      	ldr	r3, [r7, #8]
 800c86e:	785b      	ldrb	r3, [r3, #1]
 800c870:	f003 0310 	and.w	r3, r3, #16
 800c874:	2b00      	cmp	r3, #0
 800c876:	d008      	beq.n	800c88a <HAL_RTC_SetDate+0x4e>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 800c878:	68bb      	ldr	r3, [r7, #8]
 800c87a:	785b      	ldrb	r3, [r3, #1]
 800c87c:	f023 0310 	bic.w	r3, r3, #16
 800c880:	b2db      	uxtb	r3, r3
 800c882:	330a      	adds	r3, #10
 800c884:	b2da      	uxtb	r2, r3
 800c886:	68bb      	ldr	r3, [r7, #8]
 800c888:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if(Format == RTC_FORMAT_BIN)
 800c88a:	687b      	ldr	r3, [r7, #4]
 800c88c:	2b00      	cmp	r3, #0
 800c88e:	d11c      	bne.n	800c8ca <HAL_RTC_SetDate+0x8e>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 800c890:	68bb      	ldr	r3, [r7, #8]
 800c892:	78db      	ldrb	r3, [r3, #3]
 800c894:	4618      	mov	r0, r3
 800c896:	f000 f93b 	bl	800cb10 <RTC_ByteToBcd2>
 800c89a:	4603      	mov	r3, r0
 800c89c:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 800c89e:	68bb      	ldr	r3, [r7, #8]
 800c8a0:	785b      	ldrb	r3, [r3, #1]
 800c8a2:	4618      	mov	r0, r3
 800c8a4:	f000 f934 	bl	800cb10 <RTC_ByteToBcd2>
 800c8a8:	4603      	mov	r3, r0
 800c8aa:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 800c8ac:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date)  << RTC_DR_DU_Pos) | \
 800c8ae:	68bb      	ldr	r3, [r7, #8]
 800c8b0:	789b      	ldrb	r3, [r3, #2]
 800c8b2:	4618      	mov	r0, r3
 800c8b4:	f000 f92c 	bl	800cb10 <RTC_ByteToBcd2>
 800c8b8:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 800c8ba:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay               << RTC_DR_WDU_Pos));
 800c8be:	68bb      	ldr	r3, [r7, #8]
 800c8c0:	781b      	ldrb	r3, [r3, #0]
 800c8c2:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 800c8c4:	4313      	orrs	r3, r2
 800c8c6:	617b      	str	r3, [r7, #20]
 800c8c8:	e00e      	b.n	800c8e8 <HAL_RTC_SetDate+0xac>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 800c8ca:	68bb      	ldr	r3, [r7, #8]
 800c8cc:	78db      	ldrb	r3, [r3, #3]
 800c8ce:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 800c8d0:	68bb      	ldr	r3, [r7, #8]
 800c8d2:	785b      	ldrb	r3, [r3, #1]
 800c8d4:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 800c8d6:	4313      	orrs	r3, r2
                  (((uint32_t)sDate->Date)    << RTC_DR_DU_Pos) | \
 800c8d8:	68ba      	ldr	r2, [r7, #8]
 800c8da:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 800c8dc:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 800c8de:	68bb      	ldr	r3, [r7, #8]
 800c8e0:	781b      	ldrb	r3, [r3, #0]
 800c8e2:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 800c8e4:	4313      	orrs	r3, r2
 800c8e6:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800c8e8:	68fb      	ldr	r3, [r7, #12]
 800c8ea:	681b      	ldr	r3, [r3, #0]
 800c8ec:	22ca      	movs	r2, #202	; 0xca
 800c8ee:	625a      	str	r2, [r3, #36]	; 0x24
 800c8f0:	68fb      	ldr	r3, [r7, #12]
 800c8f2:	681b      	ldr	r3, [r3, #0]
 800c8f4:	2253      	movs	r2, #83	; 0x53
 800c8f6:	625a      	str	r2, [r3, #36]	; 0x24


  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 800c8f8:	68f8      	ldr	r0, [r7, #12]
 800c8fa:	f000 f89b 	bl	800ca34 <RTC_EnterInitMode>
 800c8fe:	4603      	mov	r3, r0
 800c900:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 800c902:	7cfb      	ldrb	r3, [r7, #19]
 800c904:	2b00      	cmp	r3, #0
 800c906:	d10a      	bne.n	800c91e <HAL_RTC_SetDate+0xe2>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 800c908:	68fb      	ldr	r3, [r7, #12]
 800c90a:	681a      	ldr	r2, [r3, #0]
 800c90c:	6979      	ldr	r1, [r7, #20]
 800c90e:	4b0e      	ldr	r3, [pc, #56]	; (800c948 <HAL_RTC_SetDate+0x10c>)
 800c910:	400b      	ands	r3, r1
 800c912:	6053      	str	r3, [r2, #4]


    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 800c914:	68f8      	ldr	r0, [r7, #12]
 800c916:	f000 f8bd 	bl	800ca94 <RTC_ExitInitMode>
 800c91a:	4603      	mov	r3, r0
 800c91c:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800c91e:	68fb      	ldr	r3, [r7, #12]
 800c920:	681b      	ldr	r3, [r3, #0]
 800c922:	22ff      	movs	r2, #255	; 0xff
 800c924:	625a      	str	r2, [r3, #36]	; 0x24

  if (status == HAL_OK)
 800c926:	7cfb      	ldrb	r3, [r7, #19]
 800c928:	2b00      	cmp	r3, #0
 800c92a:	d103      	bne.n	800c934 <HAL_RTC_SetDate+0xf8>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 800c92c:	68fb      	ldr	r3, [r7, #12]
 800c92e:	2201      	movs	r2, #1
 800c930:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800c934:	68fb      	ldr	r3, [r7, #12]
 800c936:	2200      	movs	r2, #0
 800c938:	f883 2020 	strb.w	r2, [r3, #32]

  return status;
 800c93c:	7cfb      	ldrb	r3, [r7, #19]


}
 800c93e:	4618      	mov	r0, r3
 800c940:	371c      	adds	r7, #28
 800c942:	46bd      	mov	sp, r7
 800c944:	bd90      	pop	{r4, r7, pc}
 800c946:	bf00      	nop
 800c948:	00ffff3f 	.word	0x00ffff3f

0800c94c <HAL_RTC_GetDate>:
  *        in the higher-order calendar shadow registers to ensure consistency between the time and date values.
  *        Reading RTC current time locks the values in calendar shadow registers until Current date is read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 800c94c:	b580      	push	{r7, lr}
 800c94e:	b086      	sub	sp, #24
 800c950:	af00      	add	r7, sp, #0
 800c952:	60f8      	str	r0, [r7, #12]
 800c954:	60b9      	str	r1, [r7, #8]
 800c956:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 800c958:	68fb      	ldr	r3, [r7, #12]
 800c95a:	681b      	ldr	r3, [r3, #0]
 800c95c:	685a      	ldr	r2, [r3, #4]
 800c95e:	4b21      	ldr	r3, [pc, #132]	; (800c9e4 <HAL_RTC_GetDate+0x98>)
 800c960:	4013      	ands	r3, r2
 800c962:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year    = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 800c964:	697b      	ldr	r3, [r7, #20]
 800c966:	0c1b      	lsrs	r3, r3, #16
 800c968:	b2da      	uxtb	r2, r3
 800c96a:	68bb      	ldr	r3, [r7, #8]
 800c96c:	70da      	strb	r2, [r3, #3]
  sDate->Month   = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 800c96e:	697b      	ldr	r3, [r7, #20]
 800c970:	0a1b      	lsrs	r3, r3, #8
 800c972:	b2db      	uxtb	r3, r3
 800c974:	f003 031f 	and.w	r3, r3, #31
 800c978:	b2da      	uxtb	r2, r3
 800c97a:	68bb      	ldr	r3, [r7, #8]
 800c97c:	705a      	strb	r2, [r3, #1]
  sDate->Date    = (uint8_t)((datetmpreg & (RTC_DR_DT | RTC_DR_DU)) >> RTC_DR_DU_Pos);
 800c97e:	697b      	ldr	r3, [r7, #20]
 800c980:	b2db      	uxtb	r3, r3
 800c982:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800c986:	b2da      	uxtb	r2, r3
 800c988:	68bb      	ldr	r3, [r7, #8]
 800c98a:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU))            >> RTC_DR_WDU_Pos);
 800c98c:	697b      	ldr	r3, [r7, #20]
 800c98e:	0b5b      	lsrs	r3, r3, #13
 800c990:	b2db      	uxtb	r3, r3
 800c992:	f003 0307 	and.w	r3, r3, #7
 800c996:	b2da      	uxtb	r2, r3
 800c998:	68bb      	ldr	r3, [r7, #8]
 800c99a:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if(Format == RTC_FORMAT_BIN)
 800c99c:	687b      	ldr	r3, [r7, #4]
 800c99e:	2b00      	cmp	r3, #0
 800c9a0:	d11a      	bne.n	800c9d8 <HAL_RTC_GetDate+0x8c>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 800c9a2:	68bb      	ldr	r3, [r7, #8]
 800c9a4:	78db      	ldrb	r3, [r3, #3]
 800c9a6:	4618      	mov	r0, r3
 800c9a8:	f000 f8d2 	bl	800cb50 <RTC_Bcd2ToByte>
 800c9ac:	4603      	mov	r3, r0
 800c9ae:	461a      	mov	r2, r3
 800c9b0:	68bb      	ldr	r3, [r7, #8]
 800c9b2:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 800c9b4:	68bb      	ldr	r3, [r7, #8]
 800c9b6:	785b      	ldrb	r3, [r3, #1]
 800c9b8:	4618      	mov	r0, r3
 800c9ba:	f000 f8c9 	bl	800cb50 <RTC_Bcd2ToByte>
 800c9be:	4603      	mov	r3, r0
 800c9c0:	461a      	mov	r2, r3
 800c9c2:	68bb      	ldr	r3, [r7, #8]
 800c9c4:	705a      	strb	r2, [r3, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 800c9c6:	68bb      	ldr	r3, [r7, #8]
 800c9c8:	789b      	ldrb	r3, [r3, #2]
 800c9ca:	4618      	mov	r0, r3
 800c9cc:	f000 f8c0 	bl	800cb50 <RTC_Bcd2ToByte>
 800c9d0:	4603      	mov	r3, r0
 800c9d2:	461a      	mov	r2, r3
 800c9d4:	68bb      	ldr	r3, [r7, #8]
 800c9d6:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 800c9d8:	2300      	movs	r3, #0
}
 800c9da:	4618      	mov	r0, r3
 800c9dc:	3718      	adds	r7, #24
 800c9de:	46bd      	mov	sp, r7
 800c9e0:	bd80      	pop	{r7, pc}
 800c9e2:	bf00      	nop
 800c9e4:	00ffff3f 	.word	0x00ffff3f

0800c9e8 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 800c9e8:	b580      	push	{r7, lr}
 800c9ea:	b084      	sub	sp, #16
 800c9ec:	af00      	add	r7, sp, #0
 800c9ee:	6078      	str	r0, [r7, #4]
  /* Clear RSF flag */
#if defined(RTC_ICSR_RSF)
  hrtc->Instance->ICSR &= (uint32_t)RTC_RSF_MASK;
#endif /* RTC_ICSR_RSF */
#if defined(RTC_ISR_RSF)
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 800c9f0:	687b      	ldr	r3, [r7, #4]
 800c9f2:	681b      	ldr	r3, [r3, #0]
 800c9f4:	68da      	ldr	r2, [r3, #12]
 800c9f6:	687b      	ldr	r3, [r7, #4]
 800c9f8:	681b      	ldr	r3, [r3, #0]
 800c9fa:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800c9fe:	60da      	str	r2, [r3, #12]
#endif /* RTC_ISR_RSF */

  tickstart = HAL_GetTick();
 800ca00:	f7f7 fe5e 	bl	80046c0 <HAL_GetTick>
 800ca04:	60f8      	str	r0, [r7, #12]
  /* Wait the registers to be synchronised */
#if defined(RTC_ICSR_RSF)
  while ((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
#endif /* RTC_ICSR_RSF */
#if defined(RTC_ISR_RSF)
    while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800ca06:	e009      	b.n	800ca1c <HAL_RTC_WaitForSynchro+0x34>
#endif /* RTC_ISR_RSF */
    {
      if((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800ca08:	f7f7 fe5a 	bl	80046c0 <HAL_GetTick>
 800ca0c:	4602      	mov	r2, r0
 800ca0e:	68fb      	ldr	r3, [r7, #12]
 800ca10:	1ad3      	subs	r3, r2, r3
 800ca12:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800ca16:	d901      	bls.n	800ca1c <HAL_RTC_WaitForSynchro+0x34>
      {
        return HAL_TIMEOUT;
 800ca18:	2303      	movs	r3, #3
 800ca1a:	e007      	b.n	800ca2c <HAL_RTC_WaitForSynchro+0x44>
    while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800ca1c:	687b      	ldr	r3, [r7, #4]
 800ca1e:	681b      	ldr	r3, [r3, #0]
 800ca20:	68db      	ldr	r3, [r3, #12]
 800ca22:	f003 0320 	and.w	r3, r3, #32
 800ca26:	2b00      	cmp	r3, #0
 800ca28:	d0ee      	beq.n	800ca08 <HAL_RTC_WaitForSynchro+0x20>
      }
    }

  return HAL_OK;
 800ca2a:	2300      	movs	r3, #0
}
 800ca2c:	4618      	mov	r0, r3
 800ca2e:	3710      	adds	r7, #16
 800ca30:	46bd      	mov	sp, r7
 800ca32:	bd80      	pop	{r7, pc}

0800ca34 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 800ca34:	b580      	push	{r7, lr}
 800ca36:	b084      	sub	sp, #16
 800ca38:	af00      	add	r7, sp, #0
 800ca3a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800ca3c:	2300      	movs	r3, #0
 800ca3e:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#endif /* RTC_ICSR_INITF */
#if defined(RTC_ISR_INITF)
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 800ca40:	687b      	ldr	r3, [r7, #4]
 800ca42:	681b      	ldr	r3, [r3, #0]
 800ca44:	68db      	ldr	r3, [r3, #12]
 800ca46:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ca4a:	2b00      	cmp	r3, #0
 800ca4c:	d11d      	bne.n	800ca8a <RTC_EnterInitMode+0x56>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 800ca4e:	687b      	ldr	r3, [r7, #4]
 800ca50:	681b      	ldr	r3, [r3, #0]
 800ca52:	f04f 32ff 	mov.w	r2, #4294967295
 800ca56:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 800ca58:	f7f7 fe32 	bl	80046c0 <HAL_GetTick>
 800ca5c:	60b8      	str	r0, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 800ca5e:	e00d      	b.n	800ca7c <RTC_EnterInitMode+0x48>
    {
      if((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 800ca60:	f7f7 fe2e 	bl	80046c0 <HAL_GetTick>
 800ca64:	4602      	mov	r2, r0
 800ca66:	68bb      	ldr	r3, [r7, #8]
 800ca68:	1ad3      	subs	r3, r2, r3
 800ca6a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800ca6e:	d905      	bls.n	800ca7c <RTC_EnterInitMode+0x48>
      {
        status = HAL_TIMEOUT;
 800ca70:	2303      	movs	r3, #3
 800ca72:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800ca74:	687b      	ldr	r3, [r7, #4]
 800ca76:	2203      	movs	r2, #3
 800ca78:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 800ca7c:	687b      	ldr	r3, [r7, #4]
 800ca7e:	681b      	ldr	r3, [r3, #0]
 800ca80:	68db      	ldr	r3, [r3, #12]
 800ca82:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ca86:	2b00      	cmp	r3, #0
 800ca88:	d0ea      	beq.n	800ca60 <RTC_EnterInitMode+0x2c>
      }
    }
  }
#endif /* RTC_ISR_INITF */

  return status;
 800ca8a:	7bfb      	ldrb	r3, [r7, #15]
}
 800ca8c:	4618      	mov	r0, r3
 800ca8e:	3710      	adds	r7, #16
 800ca90:	46bd      	mov	sp, r7
 800ca92:	bd80      	pop	{r7, pc}

0800ca94 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 800ca94:	b580      	push	{r7, lr}
 800ca96:	b084      	sub	sp, #16
 800ca98:	af00      	add	r7, sp, #0
 800ca9a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800ca9c:	2300      	movs	r3, #0
 800ca9e:	73fb      	strb	r3, [r7, #15]
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);

#elif defined(RTC_ISR_INITF)

  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ISR, RTC_ISR_INITF);
 800caa0:	4b1a      	ldr	r3, [pc, #104]	; (800cb0c <RTC_ExitInitMode+0x78>)
 800caa2:	68db      	ldr	r3, [r3, #12]
 800caa4:	4a19      	ldr	r2, [pc, #100]	; (800cb0c <RTC_ExitInitMode+0x78>)
 800caa6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800caaa:	60d3      	str	r3, [r2, #12]

#endif /* RTC_ISR_INITF */
  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 800caac:	4b17      	ldr	r3, [pc, #92]	; (800cb0c <RTC_ExitInitMode+0x78>)
 800caae:	689b      	ldr	r3, [r3, #8]
 800cab0:	f003 0320 	and.w	r3, r3, #32
 800cab4:	2b00      	cmp	r3, #0
 800cab6:	d10c      	bne.n	800cad2 <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800cab8:	6878      	ldr	r0, [r7, #4]
 800caba:	f7ff ff95 	bl	800c9e8 <HAL_RTC_WaitForSynchro>
 800cabe:	4603      	mov	r3, r0
 800cac0:	2b00      	cmp	r3, #0
 800cac2:	d01e      	beq.n	800cb02 <RTC_ExitInitMode+0x6e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800cac4:	687b      	ldr	r3, [r7, #4]
 800cac6:	2203      	movs	r2, #3
 800cac8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 800cacc:	2303      	movs	r3, #3
 800cace:	73fb      	strb	r3, [r7, #15]
 800cad0:	e017      	b.n	800cb02 <RTC_ExitInitMode+0x6e>
    }
  }
  else
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 800cad2:	4b0e      	ldr	r3, [pc, #56]	; (800cb0c <RTC_ExitInitMode+0x78>)
 800cad4:	689b      	ldr	r3, [r3, #8]
 800cad6:	4a0d      	ldr	r2, [pc, #52]	; (800cb0c <RTC_ExitInitMode+0x78>)
 800cad8:	f023 0320 	bic.w	r3, r3, #32
 800cadc:	6093      	str	r3, [r2, #8]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800cade:	6878      	ldr	r0, [r7, #4]
 800cae0:	f7ff ff82 	bl	800c9e8 <HAL_RTC_WaitForSynchro>
 800cae4:	4603      	mov	r3, r0
 800cae6:	2b00      	cmp	r3, #0
 800cae8:	d005      	beq.n	800caf6 <RTC_ExitInitMode+0x62>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800caea:	687b      	ldr	r3, [r7, #4]
 800caec:	2203      	movs	r2, #3
 800caee:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 800caf2:	2303      	movs	r3, #3
 800caf4:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 800caf6:	4b05      	ldr	r3, [pc, #20]	; (800cb0c <RTC_ExitInitMode+0x78>)
 800caf8:	689b      	ldr	r3, [r3, #8]
 800cafa:	4a04      	ldr	r2, [pc, #16]	; (800cb0c <RTC_ExitInitMode+0x78>)
 800cafc:	f043 0320 	orr.w	r3, r3, #32
 800cb00:	6093      	str	r3, [r2, #8]
  }

  return status;
 800cb02:	7bfb      	ldrb	r3, [r7, #15]
}
 800cb04:	4618      	mov	r0, r3
 800cb06:	3710      	adds	r7, #16
 800cb08:	46bd      	mov	sp, r7
 800cb0a:	bd80      	pop	{r7, pc}
 800cb0c:	58004000 	.word	0x58004000

0800cb10 <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 800cb10:	b480      	push	{r7}
 800cb12:	b085      	sub	sp, #20
 800cb14:	af00      	add	r7, sp, #0
 800cb16:	4603      	mov	r3, r0
 800cb18:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 800cb1a:	2300      	movs	r3, #0
 800cb1c:	60fb      	str	r3, [r7, #12]
  uint8_t  bcdlow  = Value;
 800cb1e:	79fb      	ldrb	r3, [r7, #7]
 800cb20:	72fb      	strb	r3, [r7, #11]

  while (bcdlow >= 10U)
 800cb22:	e005      	b.n	800cb30 <RTC_ByteToBcd2+0x20>
  {
    bcdhigh++;
 800cb24:	68fb      	ldr	r3, [r7, #12]
 800cb26:	3301      	adds	r3, #1
 800cb28:	60fb      	str	r3, [r7, #12]
    bcdlow -= 10U;
 800cb2a:	7afb      	ldrb	r3, [r7, #11]
 800cb2c:	3b0a      	subs	r3, #10
 800cb2e:	72fb      	strb	r3, [r7, #11]
  while (bcdlow >= 10U)
 800cb30:	7afb      	ldrb	r3, [r7, #11]
 800cb32:	2b09      	cmp	r3, #9
 800cb34:	d8f6      	bhi.n	800cb24 <RTC_ByteToBcd2+0x14>
  }

  return ((uint8_t)(bcdhigh << 4U) | bcdlow);
 800cb36:	68fb      	ldr	r3, [r7, #12]
 800cb38:	b2db      	uxtb	r3, r3
 800cb3a:	011b      	lsls	r3, r3, #4
 800cb3c:	b2da      	uxtb	r2, r3
 800cb3e:	7afb      	ldrb	r3, [r7, #11]
 800cb40:	4313      	orrs	r3, r2
 800cb42:	b2db      	uxtb	r3, r3
}
 800cb44:	4618      	mov	r0, r3
 800cb46:	3714      	adds	r7, #20
 800cb48:	46bd      	mov	sp, r7
 800cb4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb4e:	4770      	bx	lr

0800cb50 <RTC_Bcd2ToByte>:
  * @brief  Convert from 2 digit BCD to Binary.
  * @param  Value BCD value to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 800cb50:	b480      	push	{r7}
 800cb52:	b085      	sub	sp, #20
 800cb54:	af00      	add	r7, sp, #0
 800cb56:	4603      	mov	r3, r0
 800cb58:	71fb      	strb	r3, [r7, #7]
  uint8_t tmp;
  tmp = ((Value & 0xF0U) >> 4U) * 10U;
 800cb5a:	79fb      	ldrb	r3, [r7, #7]
 800cb5c:	091b      	lsrs	r3, r3, #4
 800cb5e:	b2db      	uxtb	r3, r3
 800cb60:	461a      	mov	r2, r3
 800cb62:	0092      	lsls	r2, r2, #2
 800cb64:	4413      	add	r3, r2
 800cb66:	005b      	lsls	r3, r3, #1
 800cb68:	73fb      	strb	r3, [r7, #15]
  return (tmp + (Value & 0x0FU));
 800cb6a:	79fb      	ldrb	r3, [r7, #7]
 800cb6c:	f003 030f 	and.w	r3, r3, #15
 800cb70:	b2da      	uxtb	r2, r3
 800cb72:	7bfb      	ldrb	r3, [r7, #15]
 800cb74:	4413      	add	r3, r2
 800cb76:	b2db      	uxtb	r3, r3
}
 800cb78:	4618      	mov	r0, r3
 800cb7a:	3714      	adds	r7, #20
 800cb7c:	46bd      	mov	sp, r7
 800cb7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb82:	4770      	bx	lr

0800cb84 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 800cb84:	b580      	push	{r7, lr}
 800cb86:	b08a      	sub	sp, #40	; 0x28
 800cb88:	af00      	add	r7, sp, #0
 800cb8a:	6078      	str	r0, [r7, #4]
  HAL_SD_CardStatusTypeDef CardStatus;
  uint32_t speedgrade, unitsize;
  uint32_t tickstart;

  /* Check the SD handle allocation */
  if(hsd == NULL)
 800cb8c:	687b      	ldr	r3, [r7, #4]
 800cb8e:	2b00      	cmp	r3, #0
 800cb90:	d101      	bne.n	800cb96 <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 800cb92:	2301      	movs	r3, #1
 800cb94:	e07c      	b.n	800cc90 <HAL_SD_Init+0x10c>
  assert_param(IS_SDMMC_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDMMC_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 800cb96:	687b      	ldr	r3, [r7, #4]
 800cb98:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800cb9c:	b2db      	uxtb	r3, r3
 800cb9e:	2b00      	cmp	r3, #0
 800cba0:	d10c      	bne.n	800cbbc <HAL_SD_Init+0x38>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 800cba2:	687b      	ldr	r3, [r7, #4]
 800cba4:	2200      	movs	r2, #0
 800cba6:	771a      	strb	r2, [r3, #28]

#if (USE_SD_TRANSCEIVER != 0U)
    /* Force  SDMMC_TRANSCEIVER_PRESENT for Legacy usage */
    if (hsd->Init.TranceiverPresent == SDMMC_TRANSCEIVER_UNKNOWN)
 800cba8:	687b      	ldr	r3, [r7, #4]
 800cbaa:	699b      	ldr	r3, [r3, #24]
 800cbac:	2b00      	cmp	r3, #0
 800cbae:	d102      	bne.n	800cbb6 <HAL_SD_Init+0x32>
    {
      hsd->Init.TranceiverPresent = SDMMC_TRANSCEIVER_PRESENT;
 800cbb0:	687b      	ldr	r3, [r7, #4]
 800cbb2:	2202      	movs	r2, #2
 800cbb4:	619a      	str	r2, [r3, #24]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 800cbb6:	6878      	ldr	r0, [r7, #4]
 800cbb8:	f7f7 f9e0 	bl	8003f7c <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 800cbbc:	687b      	ldr	r3, [r7, #4]
 800cbbe:	2203      	movs	r2, #3
 800cbc0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 800cbc4:	6878      	ldr	r0, [r7, #4]
 800cbc6:	f000 f867 	bl	800cc98 <HAL_SD_InitCard>
 800cbca:	4603      	mov	r3, r0
 800cbcc:	2b00      	cmp	r3, #0
 800cbce:	d001      	beq.n	800cbd4 <HAL_SD_Init+0x50>
  {
    return HAL_ERROR;
 800cbd0:	2301      	movs	r3, #1
 800cbd2:	e05d      	b.n	800cc90 <HAL_SD_Init+0x10c>
  }

  if( HAL_SD_GetCardStatus(hsd, &CardStatus) != HAL_OK)
 800cbd4:	f107 0308 	add.w	r3, r7, #8
 800cbd8:	4619      	mov	r1, r3
 800cbda:	6878      	ldr	r0, [r7, #4]
 800cbdc:	f001 f8ce 	bl	800dd7c <HAL_SD_GetCardStatus>
 800cbe0:	4603      	mov	r3, r0
 800cbe2:	2b00      	cmp	r3, #0
 800cbe4:	d001      	beq.n	800cbea <HAL_SD_Init+0x66>
  {
    return HAL_ERROR;
 800cbe6:	2301      	movs	r3, #1
 800cbe8:	e052      	b.n	800cc90 <HAL_SD_Init+0x10c>
  }
  /* Get Initial Card Speed from Card Status*/
  speedgrade = CardStatus.UhsSpeedGrade;
 800cbea:	7e3b      	ldrb	r3, [r7, #24]
 800cbec:	b2db      	uxtb	r3, r3
 800cbee:	627b      	str	r3, [r7, #36]	; 0x24
  unitsize = CardStatus.UhsAllocationUnitSize;
 800cbf0:	7e7b      	ldrb	r3, [r7, #25]
 800cbf2:	b2db      	uxtb	r3, r3
 800cbf4:	623b      	str	r3, [r7, #32]
  if ((hsd->SdCard.CardType == CARD_SDHC_SDXC) && ((speedgrade != 0U) || (unitsize != 0U)))
 800cbf6:	687b      	ldr	r3, [r7, #4]
 800cbf8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cbfa:	2b01      	cmp	r3, #1
 800cbfc:	d10a      	bne.n	800cc14 <HAL_SD_Init+0x90>
 800cbfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cc00:	2b00      	cmp	r3, #0
 800cc02:	d102      	bne.n	800cc0a <HAL_SD_Init+0x86>
 800cc04:	6a3b      	ldr	r3, [r7, #32]
 800cc06:	2b00      	cmp	r3, #0
 800cc08:	d004      	beq.n	800cc14 <HAL_SD_Init+0x90>
  {
    hsd->SdCard.CardSpeed = CARD_ULTRA_HIGH_SPEED;
 800cc0a:	687b      	ldr	r3, [r7, #4]
 800cc0c:	f44f 7200 	mov.w	r2, #512	; 0x200
 800cc10:	65da      	str	r2, [r3, #92]	; 0x5c
 800cc12:	e00b      	b.n	800cc2c <HAL_SD_Init+0xa8>
  }
  else
  {
    if (hsd->SdCard.CardType == CARD_SDHC_SDXC)
 800cc14:	687b      	ldr	r3, [r7, #4]
 800cc16:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cc18:	2b01      	cmp	r3, #1
 800cc1a:	d104      	bne.n	800cc26 <HAL_SD_Init+0xa2>
    {
      hsd->SdCard.CardSpeed  = CARD_HIGH_SPEED;
 800cc1c:	687b      	ldr	r3, [r7, #4]
 800cc1e:	f44f 7280 	mov.w	r2, #256	; 0x100
 800cc22:	65da      	str	r2, [r3, #92]	; 0x5c
 800cc24:	e002      	b.n	800cc2c <HAL_SD_Init+0xa8>
    }
    else
    {
      hsd->SdCard.CardSpeed  = CARD_NORMAL_SPEED;
 800cc26:	687b      	ldr	r3, [r7, #4]
 800cc28:	2200      	movs	r2, #0
 800cc2a:	65da      	str	r2, [r3, #92]	; 0x5c
    }

  }
  /* Configure the bus wide */
  if(HAL_SD_ConfigWideBusOperation(hsd, hsd->Init.BusWide) != HAL_OK)
 800cc2c:	687b      	ldr	r3, [r7, #4]
 800cc2e:	68db      	ldr	r3, [r3, #12]
 800cc30:	4619      	mov	r1, r3
 800cc32:	6878      	ldr	r0, [r7, #4]
 800cc34:	f001 f984 	bl	800df40 <HAL_SD_ConfigWideBusOperation>
 800cc38:	4603      	mov	r3, r0
 800cc3a:	2b00      	cmp	r3, #0
 800cc3c:	d001      	beq.n	800cc42 <HAL_SD_Init+0xbe>
  {
    return HAL_ERROR;
 800cc3e:	2301      	movs	r3, #1
 800cc40:	e026      	b.n	800cc90 <HAL_SD_Init+0x10c>
  }

  /* Verify that SD card is ready to use after Initialization */
  tickstart = HAL_GetTick();
 800cc42:	f7f7 fd3d 	bl	80046c0 <HAL_GetTick>
 800cc46:	61f8      	str	r0, [r7, #28]
  while((HAL_SD_GetCardState(hsd) != HAL_SD_CARD_TRANSFER))
 800cc48:	e011      	b.n	800cc6e <HAL_SD_Init+0xea>
  {
    if((HAL_GetTick()-tickstart) >=  SDMMC_DATATIMEOUT)
 800cc4a:	f7f7 fd39 	bl	80046c0 <HAL_GetTick>
 800cc4e:	4602      	mov	r2, r0
 800cc50:	69fb      	ldr	r3, [r7, #28]
 800cc52:	1ad3      	subs	r3, r2, r3
 800cc54:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cc58:	d109      	bne.n	800cc6e <HAL_SD_Init+0xea>
    {
      hsd->ErrorCode = HAL_SD_ERROR_TIMEOUT;
 800cc5a:	687b      	ldr	r3, [r7, #4]
 800cc5c:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800cc60:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State= HAL_SD_STATE_READY;
 800cc62:	687b      	ldr	r3, [r7, #4]
 800cc64:	2201      	movs	r2, #1
 800cc66:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_TIMEOUT;
 800cc6a:	2303      	movs	r3, #3
 800cc6c:	e010      	b.n	800cc90 <HAL_SD_Init+0x10c>
  while((HAL_SD_GetCardState(hsd) != HAL_SD_CARD_TRANSFER))
 800cc6e:	6878      	ldr	r0, [r7, #4]
 800cc70:	f001 fa10 	bl	800e094 <HAL_SD_GetCardState>
 800cc74:	4603      	mov	r3, r0
 800cc76:	2b04      	cmp	r3, #4
 800cc78:	d1e7      	bne.n	800cc4a <HAL_SD_Init+0xc6>
    }
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800cc7a:	687b      	ldr	r3, [r7, #4]
 800cc7c:	2200      	movs	r2, #0
 800cc7e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 800cc80:	687b      	ldr	r3, [r7, #4]
 800cc82:	2200      	movs	r2, #0
 800cc84:	631a      	str	r2, [r3, #48]	; 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 800cc86:	687b      	ldr	r3, [r7, #4]
 800cc88:	2201      	movs	r2, #1
 800cc8a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 800cc8e:	2300      	movs	r3, #0
}
 800cc90:	4618      	mov	r0, r3
 800cc92:	3728      	adds	r7, #40	; 0x28
 800cc94:	46bd      	mov	sp, r7
 800cc96:	bd80      	pop	{r7, pc}

0800cc98 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 800cc98:	b5b0      	push	{r4, r5, r7, lr}
 800cc9a:	b08e      	sub	sp, #56	; 0x38
 800cc9c:	af04      	add	r7, sp, #16
 800cc9e:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  SD_InitTypeDef Init;
  uint32_t sdmmc_clk;

  /* Default SDMMC peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 800cca0:	2300      	movs	r3, #0
 800cca2:	60bb      	str	r3, [r7, #8]
  Init.ClockPowerSave      = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 800cca4:	2300      	movs	r3, #0
 800cca6:	60fb      	str	r3, [r7, #12]
  Init.BusWide             = SDMMC_BUS_WIDE_1B;
 800cca8:	2300      	movs	r3, #0
 800ccaa:	613b      	str	r3, [r7, #16]
  Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 800ccac:	2300      	movs	r3, #0
 800ccae:	617b      	str	r3, [r7, #20]

  /* Init Clock should be less or equal to 400Khz*/
  sdmmc_clk     = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC);
 800ccb0:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 800ccb4:	f7fe fc7a 	bl	800b5ac <HAL_RCCEx_GetPeriphCLKFreq>
 800ccb8:	6278      	str	r0, [r7, #36]	; 0x24
  Init.ClockDiv = sdmmc_clk/(2U*400000U);
 800ccba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ccbc:	0a1b      	lsrs	r3, r3, #8
 800ccbe:	4a40      	ldr	r2, [pc, #256]	; (800cdc0 <HAL_SD_InitCard+0x128>)
 800ccc0:	fba2 2303 	umull	r2, r3, r2, r3
 800ccc4:	091b      	lsrs	r3, r3, #4
 800ccc6:	61bb      	str	r3, [r7, #24]

#if (USE_SD_TRANSCEIVER != 0U)
  if (hsd->Init.TranceiverPresent == SDMMC_TRANSCEIVER_PRESENT)
 800ccc8:	687b      	ldr	r3, [r7, #4]
 800ccca:	699b      	ldr	r3, [r3, #24]
 800cccc:	2b02      	cmp	r3, #2
 800ccce:	d107      	bne.n	800cce0 <HAL_SD_InitCard+0x48>
  {
    /* Set Transceiver polarity */
    hsd->Instance->POWER |= SDMMC_POWER_DIRPOL;
 800ccd0:	687b      	ldr	r3, [r7, #4]
 800ccd2:	681b      	ldr	r3, [r3, #0]
 800ccd4:	681a      	ldr	r2, [r3, #0]
 800ccd6:	687b      	ldr	r3, [r7, #4]
 800ccd8:	681b      	ldr	r3, [r3, #0]
 800ccda:	f042 0210 	orr.w	r2, r2, #16
 800ccde:	601a      	str	r2, [r3, #0]
    /* Set Transceiver polarity */
    hsd->Instance->POWER |= SDMMC_POWER_DIRPOL;
#endif /* USE_SD_TRANSCEIVER  */

  /* Initialize SDMMC peripheral interface with default configuration */
  (void)SDMMC_Init(hsd->Instance, Init);
 800cce0:	687b      	ldr	r3, [r7, #4]
 800cce2:	681d      	ldr	r5, [r3, #0]
 800cce4:	466c      	mov	r4, sp
 800cce6:	f107 0314 	add.w	r3, r7, #20
 800ccea:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800ccee:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800ccf2:	f107 0308 	add.w	r3, r7, #8
 800ccf6:	cb0e      	ldmia	r3, {r1, r2, r3}
 800ccf8:	4628      	mov	r0, r5
 800ccfa:	f004 f9eb 	bl	80110d4 <SDMMC_Init>

  /* Set Power State to ON */
  (void)SDMMC_PowerState_ON(hsd->Instance);
 800ccfe:	687b      	ldr	r3, [r7, #4]
 800cd00:	681b      	ldr	r3, [r3, #0]
 800cd02:	4618      	mov	r0, r3
 800cd04:	f004 fa2e 	bl	8011164 <SDMMC_PowerState_ON>

  /* wait 74 Cycles: required power up waiting time before starting
     the SD initialization sequence */
  sdmmc_clk = sdmmc_clk/(2U*Init.ClockDiv);
 800cd08:	69bb      	ldr	r3, [r7, #24]
 800cd0a:	005b      	lsls	r3, r3, #1
 800cd0c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800cd0e:	fbb2 f3f3 	udiv	r3, r2, r3
 800cd12:	627b      	str	r3, [r7, #36]	; 0x24

  if(sdmmc_clk != 0U)
 800cd14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cd16:	2b00      	cmp	r3, #0
 800cd18:	d008      	beq.n	800cd2c <HAL_SD_InitCard+0x94>
  {
    HAL_Delay(1U+ (74U*1000U/(sdmmc_clk)));
 800cd1a:	4a2a      	ldr	r2, [pc, #168]	; (800cdc4 <HAL_SD_InitCard+0x12c>)
 800cd1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cd1e:	fbb2 f3f3 	udiv	r3, r2, r3
 800cd22:	3301      	adds	r3, #1
 800cd24:	4618      	mov	r0, r3
 800cd26:	f7f7 fcd7 	bl	80046d8 <HAL_Delay>
 800cd2a:	e002      	b.n	800cd32 <HAL_SD_InitCard+0x9a>
  }
  else
  {
    HAL_Delay(2U);
 800cd2c:	2002      	movs	r0, #2
 800cd2e:	f7f7 fcd3 	bl	80046d8 <HAL_Delay>
  }

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 800cd32:	6878      	ldr	r0, [r7, #4]
 800cd34:	f001 fa8c 	bl	800e250 <SD_PowerON>
 800cd38:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800cd3a:	6a3b      	ldr	r3, [r7, #32]
 800cd3c:	2b00      	cmp	r3, #0
 800cd3e:	d00b      	beq.n	800cd58 <HAL_SD_InitCard+0xc0>
  {
    hsd->State = HAL_SD_STATE_READY;
 800cd40:	687b      	ldr	r3, [r7, #4]
 800cd42:	2201      	movs	r2, #1
 800cd44:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 800cd48:	687b      	ldr	r3, [r7, #4]
 800cd4a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800cd4c:	6a3b      	ldr	r3, [r7, #32]
 800cd4e:	431a      	orrs	r2, r3
 800cd50:	687b      	ldr	r3, [r7, #4]
 800cd52:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800cd54:	2301      	movs	r3, #1
 800cd56:	e02e      	b.n	800cdb6 <HAL_SD_InitCard+0x11e>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 800cd58:	6878      	ldr	r0, [r7, #4]
 800cd5a:	f001 f9bb 	bl	800e0d4 <SD_InitCard>
 800cd5e:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800cd60:	6a3b      	ldr	r3, [r7, #32]
 800cd62:	2b00      	cmp	r3, #0
 800cd64:	d00b      	beq.n	800cd7e <HAL_SD_InitCard+0xe6>
  {
    hsd->State = HAL_SD_STATE_READY;
 800cd66:	687b      	ldr	r3, [r7, #4]
 800cd68:	2201      	movs	r2, #1
 800cd6a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 800cd6e:	687b      	ldr	r3, [r7, #4]
 800cd70:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800cd72:	6a3b      	ldr	r3, [r7, #32]
 800cd74:	431a      	orrs	r2, r3
 800cd76:	687b      	ldr	r3, [r7, #4]
 800cd78:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800cd7a:	2301      	movs	r3, #1
 800cd7c:	e01b      	b.n	800cdb6 <HAL_SD_InitCard+0x11e>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800cd7e:	687b      	ldr	r3, [r7, #4]
 800cd80:	681b      	ldr	r3, [r3, #0]
 800cd82:	f44f 7100 	mov.w	r1, #512	; 0x200
 800cd86:	4618      	mov	r0, r3
 800cd88:	f004 fa82 	bl	8011290 <SDMMC_CmdBlockLength>
 800cd8c:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800cd8e:	6a3b      	ldr	r3, [r7, #32]
 800cd90:	2b00      	cmp	r3, #0
 800cd92:	d00f      	beq.n	800cdb4 <HAL_SD_InitCard+0x11c>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800cd94:	687b      	ldr	r3, [r7, #4]
 800cd96:	681b      	ldr	r3, [r3, #0]
 800cd98:	4a0b      	ldr	r2, [pc, #44]	; (800cdc8 <HAL_SD_InitCard+0x130>)
 800cd9a:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 800cd9c:	687b      	ldr	r3, [r7, #4]
 800cd9e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800cda0:	6a3b      	ldr	r3, [r7, #32]
 800cda2:	431a      	orrs	r2, r3
 800cda4:	687b      	ldr	r3, [r7, #4]
 800cda6:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 800cda8:	687b      	ldr	r3, [r7, #4]
 800cdaa:	2201      	movs	r2, #1
 800cdac:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 800cdb0:	2301      	movs	r3, #1
 800cdb2:	e000      	b.n	800cdb6 <HAL_SD_InitCard+0x11e>
  }

  return HAL_OK;
 800cdb4:	2300      	movs	r3, #0
}
 800cdb6:	4618      	mov	r0, r3
 800cdb8:	3728      	adds	r7, #40	; 0x28
 800cdba:	46bd      	mov	sp, r7
 800cdbc:	bdb0      	pop	{r4, r5, r7, pc}
 800cdbe:	bf00      	nop
 800cdc0:	014f8b59 	.word	0x014f8b59
 800cdc4:	00012110 	.word	0x00012110
 800cdc8:	1fe00fff 	.word	0x1fe00fff

0800cdcc <HAL_SD_ReadBlocks>:
  * @param  NumberOfBlocks: Number of SD blocks to read
  * @param  Timeout: Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks, uint32_t Timeout)
{
 800cdcc:	b580      	push	{r7, lr}
 800cdce:	b092      	sub	sp, #72	; 0x48
 800cdd0:	af00      	add	r7, sp, #0
 800cdd2:	60f8      	str	r0, [r7, #12]
 800cdd4:	60b9      	str	r1, [r7, #8]
 800cdd6:	607a      	str	r2, [r7, #4]
 800cdd8:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800cdda:	f7f7 fc71 	bl	80046c0 <HAL_GetTick>
 800cdde:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t count, data, dataremaining;
  uint32_t add = BlockAdd;
 800cde0:	687b      	ldr	r3, [r7, #4]
 800cde2:	63bb      	str	r3, [r7, #56]	; 0x38
  uint8_t *tempbuff = pData;
 800cde4:	68bb      	ldr	r3, [r7, #8]
 800cde6:	637b      	str	r3, [r7, #52]	; 0x34

  if(NULL == pData)
 800cde8:	68bb      	ldr	r3, [r7, #8]
 800cdea:	2b00      	cmp	r3, #0
 800cdec:	d107      	bne.n	800cdfe <HAL_SD_ReadBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800cdee:	68fb      	ldr	r3, [r7, #12]
 800cdf0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cdf2:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800cdf6:	68fb      	ldr	r3, [r7, #12]
 800cdf8:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800cdfa:	2301      	movs	r3, #1
 800cdfc:	e167      	b.n	800d0ce <HAL_SD_ReadBlocks+0x302>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 800cdfe:	68fb      	ldr	r3, [r7, #12]
 800ce00:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800ce04:	b2db      	uxtb	r3, r3
 800ce06:	2b01      	cmp	r3, #1
 800ce08:	f040 815a 	bne.w	800d0c0 <HAL_SD_ReadBlocks+0x2f4>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800ce0c:	68fb      	ldr	r3, [r7, #12]
 800ce0e:	2200      	movs	r2, #0
 800ce10:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800ce12:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800ce14:	683b      	ldr	r3, [r7, #0]
 800ce16:	441a      	add	r2, r3
 800ce18:	68fb      	ldr	r3, [r7, #12]
 800ce1a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ce1c:	429a      	cmp	r2, r3
 800ce1e:	d907      	bls.n	800ce30 <HAL_SD_ReadBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800ce20:	68fb      	ldr	r3, [r7, #12]
 800ce22:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ce24:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800ce28:	68fb      	ldr	r3, [r7, #12]
 800ce2a:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 800ce2c:	2301      	movs	r3, #1
 800ce2e:	e14e      	b.n	800d0ce <HAL_SD_ReadBlocks+0x302>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 800ce30:	68fb      	ldr	r3, [r7, #12]
 800ce32:	2203      	movs	r2, #3
 800ce34:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 800ce38:	68fb      	ldr	r3, [r7, #12]
 800ce3a:	681b      	ldr	r3, [r3, #0]
 800ce3c:	2200      	movs	r2, #0
 800ce3e:	62da      	str	r2, [r3, #44]	; 0x2c

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800ce40:	68fb      	ldr	r3, [r7, #12]
 800ce42:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ce44:	2b01      	cmp	r3, #1
 800ce46:	d002      	beq.n	800ce4e <HAL_SD_ReadBlocks+0x82>
    {
      add *= 512U;
 800ce48:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ce4a:	025b      	lsls	r3, r3, #9
 800ce4c:	63bb      	str	r3, [r7, #56]	; 0x38
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800ce4e:	f04f 33ff 	mov.w	r3, #4294967295
 800ce52:	617b      	str	r3, [r7, #20]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 800ce54:	683b      	ldr	r3, [r7, #0]
 800ce56:	025b      	lsls	r3, r3, #9
 800ce58:	61bb      	str	r3, [r7, #24]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 800ce5a:	2390      	movs	r3, #144	; 0x90
 800ce5c:	61fb      	str	r3, [r7, #28]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 800ce5e:	2302      	movs	r3, #2
 800ce60:	623b      	str	r3, [r7, #32]
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800ce62:	2300      	movs	r3, #0
 800ce64:	627b      	str	r3, [r7, #36]	; 0x24
    config.DPSM          = SDMMC_DPSM_DISABLE;
 800ce66:	2300      	movs	r3, #0
 800ce68:	62bb      	str	r3, [r7, #40]	; 0x28
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 800ce6a:	68fb      	ldr	r3, [r7, #12]
 800ce6c:	681b      	ldr	r3, [r3, #0]
 800ce6e:	f107 0214 	add.w	r2, r7, #20
 800ce72:	4611      	mov	r1, r2
 800ce74:	4618      	mov	r0, r3
 800ce76:	f004 f9df 	bl	8011238 <SDMMC_ConfigData>
    __SDMMC_CMDTRANS_ENABLE( hsd->Instance);
 800ce7a:	68fb      	ldr	r3, [r7, #12]
 800ce7c:	681b      	ldr	r3, [r3, #0]
 800ce7e:	68da      	ldr	r2, [r3, #12]
 800ce80:	68fb      	ldr	r3, [r7, #12]
 800ce82:	681b      	ldr	r3, [r3, #0]
 800ce84:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800ce88:	60da      	str	r2, [r3, #12]

    /* Read block(s) in polling mode */
    if(NumberOfBlocks > 1U)
 800ce8a:	683b      	ldr	r3, [r7, #0]
 800ce8c:	2b01      	cmp	r3, #1
 800ce8e:	d90a      	bls.n	800cea6 <HAL_SD_ReadBlocks+0xda>
    {
      hsd->Context = SD_CONTEXT_READ_MULTIPLE_BLOCK;
 800ce90:	68fb      	ldr	r3, [r7, #12]
 800ce92:	2202      	movs	r2, #2
 800ce94:	631a      	str	r2, [r3, #48]	; 0x30

      /* Read Multi Block command */
      errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 800ce96:	68fb      	ldr	r3, [r7, #12]
 800ce98:	681b      	ldr	r3, [r3, #0]
 800ce9a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800ce9c:	4618      	mov	r0, r3
 800ce9e:	f004 fa3d 	bl	801131c <SDMMC_CmdReadMultiBlock>
 800cea2:	6478      	str	r0, [r7, #68]	; 0x44
 800cea4:	e009      	b.n	800ceba <HAL_SD_ReadBlocks+0xee>
    }
    else
    {
      hsd->Context = SD_CONTEXT_READ_SINGLE_BLOCK;
 800cea6:	68fb      	ldr	r3, [r7, #12]
 800cea8:	2201      	movs	r2, #1
 800ceaa:	631a      	str	r2, [r3, #48]	; 0x30

      /* Read Single Block command */
      errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 800ceac:	68fb      	ldr	r3, [r7, #12]
 800ceae:	681b      	ldr	r3, [r3, #0]
 800ceb0:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800ceb2:	4618      	mov	r0, r3
 800ceb4:	f004 fa0f 	bl	80112d6 <SDMMC_CmdReadSingleBlock>
 800ceb8:	6478      	str	r0, [r7, #68]	; 0x44
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 800ceba:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800cebc:	2b00      	cmp	r3, #0
 800cebe:	d012      	beq.n	800cee6 <HAL_SD_ReadBlocks+0x11a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800cec0:	68fb      	ldr	r3, [r7, #12]
 800cec2:	681b      	ldr	r3, [r3, #0]
 800cec4:	4a84      	ldr	r2, [pc, #528]	; (800d0d8 <HAL_SD_ReadBlocks+0x30c>)
 800cec6:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 800cec8:	68fb      	ldr	r3, [r7, #12]
 800ceca:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800cecc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800cece:	431a      	orrs	r2, r3
 800ced0:	68fb      	ldr	r3, [r7, #12]
 800ced2:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800ced4:	68fb      	ldr	r3, [r7, #12]
 800ced6:	2201      	movs	r2, #1
 800ced8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800cedc:	68fb      	ldr	r3, [r7, #12]
 800cede:	2200      	movs	r2, #0
 800cee0:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800cee2:	2301      	movs	r3, #1
 800cee4:	e0f3      	b.n	800d0ce <HAL_SD_ReadBlocks+0x302>
    }

    /* Poll on SDMMC flags */
    dataremaining = config.DataLength;
 800cee6:	69bb      	ldr	r3, [r7, #24]
 800cee8:	63fb      	str	r3, [r7, #60]	; 0x3c
    while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 800ceea:	e058      	b.n	800cf9e <HAL_SD_ReadBlocks+0x1d2>
    {
      if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF) && (dataremaining >= 32U))
 800ceec:	68fb      	ldr	r3, [r7, #12]
 800ceee:	681b      	ldr	r3, [r3, #0]
 800cef0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cef2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800cef6:	2b00      	cmp	r3, #0
 800cef8:	d033      	beq.n	800cf62 <HAL_SD_ReadBlocks+0x196>
 800cefa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cefc:	2b1f      	cmp	r3, #31
 800cefe:	d930      	bls.n	800cf62 <HAL_SD_ReadBlocks+0x196>
      {
        /* Read data from SDMMC Rx FIFO */
        for(count = 0U; count < 8U; count++)
 800cf00:	2300      	movs	r3, #0
 800cf02:	643b      	str	r3, [r7, #64]	; 0x40
 800cf04:	e027      	b.n	800cf56 <HAL_SD_ReadBlocks+0x18a>
        {
          data = SDMMC_ReadFIFO(hsd->Instance);
 800cf06:	68fb      	ldr	r3, [r7, #12]
 800cf08:	681b      	ldr	r3, [r3, #0]
 800cf0a:	4618      	mov	r0, r3
 800cf0c:	f004 f90c 	bl	8011128 <SDMMC_ReadFIFO>
 800cf10:	62f8      	str	r0, [r7, #44]	; 0x2c
          *tempbuff = (uint8_t)(data & 0xFFU);
 800cf12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cf14:	b2da      	uxtb	r2, r3
 800cf16:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cf18:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 800cf1a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cf1c:	3301      	adds	r3, #1
 800cf1e:	637b      	str	r3, [r7, #52]	; 0x34
          *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
 800cf20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cf22:	0a1b      	lsrs	r3, r3, #8
 800cf24:	b2da      	uxtb	r2, r3
 800cf26:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cf28:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 800cf2a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cf2c:	3301      	adds	r3, #1
 800cf2e:	637b      	str	r3, [r7, #52]	; 0x34
          *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
 800cf30:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cf32:	0c1b      	lsrs	r3, r3, #16
 800cf34:	b2da      	uxtb	r2, r3
 800cf36:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cf38:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 800cf3a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cf3c:	3301      	adds	r3, #1
 800cf3e:	637b      	str	r3, [r7, #52]	; 0x34
          *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
 800cf40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cf42:	0e1b      	lsrs	r3, r3, #24
 800cf44:	b2da      	uxtb	r2, r3
 800cf46:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cf48:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 800cf4a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cf4c:	3301      	adds	r3, #1
 800cf4e:	637b      	str	r3, [r7, #52]	; 0x34
        for(count = 0U; count < 8U; count++)
 800cf50:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800cf52:	3301      	adds	r3, #1
 800cf54:	643b      	str	r3, [r7, #64]	; 0x40
 800cf56:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800cf58:	2b07      	cmp	r3, #7
 800cf5a:	d9d4      	bls.n	800cf06 <HAL_SD_ReadBlocks+0x13a>
        }
        dataremaining -= 32U;
 800cf5c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cf5e:	3b20      	subs	r3, #32
 800cf60:	63fb      	str	r3, [r7, #60]	; 0x3c
      }

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 800cf62:	f7f7 fbad 	bl	80046c0 <HAL_GetTick>
 800cf66:	4602      	mov	r2, r0
 800cf68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cf6a:	1ad3      	subs	r3, r2, r3
 800cf6c:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800cf6e:	429a      	cmp	r2, r3
 800cf70:	d902      	bls.n	800cf78 <HAL_SD_ReadBlocks+0x1ac>
 800cf72:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800cf74:	2b00      	cmp	r3, #0
 800cf76:	d112      	bne.n	800cf9e <HAL_SD_ReadBlocks+0x1d2>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800cf78:	68fb      	ldr	r3, [r7, #12]
 800cf7a:	681b      	ldr	r3, [r3, #0]
 800cf7c:	4a56      	ldr	r2, [pc, #344]	; (800d0d8 <HAL_SD_ReadBlocks+0x30c>)
 800cf7e:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 800cf80:	68fb      	ldr	r3, [r7, #12]
 800cf82:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cf84:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 800cf88:	68fb      	ldr	r3, [r7, #12]
 800cf8a:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State= HAL_SD_STATE_READY;
 800cf8c:	68fb      	ldr	r3, [r7, #12]
 800cf8e:	2201      	movs	r2, #1
 800cf90:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 800cf94:	68fb      	ldr	r3, [r7, #12]
 800cf96:	2200      	movs	r2, #0
 800cf98:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_TIMEOUT;
 800cf9a:	2303      	movs	r3, #3
 800cf9c:	e097      	b.n	800d0ce <HAL_SD_ReadBlocks+0x302>
    while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 800cf9e:	68fb      	ldr	r3, [r7, #12]
 800cfa0:	681b      	ldr	r3, [r3, #0]
 800cfa2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cfa4:	f403 7395 	and.w	r3, r3, #298	; 0x12a
 800cfa8:	2b00      	cmp	r3, #0
 800cfaa:	d09f      	beq.n	800ceec <HAL_SD_ReadBlocks+0x120>
      }
    }
    __SDMMC_CMDTRANS_DISABLE( hsd->Instance);
 800cfac:	68fb      	ldr	r3, [r7, #12]
 800cfae:	681b      	ldr	r3, [r3, #0]
 800cfb0:	68da      	ldr	r2, [r3, #12]
 800cfb2:	68fb      	ldr	r3, [r7, #12]
 800cfb4:	681b      	ldr	r3, [r3, #0]
 800cfb6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800cfba:	60da      	str	r2, [r3, #12]

    /* Send stop transmission command in case of multiblock read */
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 800cfbc:	68fb      	ldr	r3, [r7, #12]
 800cfbe:	681b      	ldr	r3, [r3, #0]
 800cfc0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cfc2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800cfc6:	2b00      	cmp	r3, #0
 800cfc8:	d022      	beq.n	800d010 <HAL_SD_ReadBlocks+0x244>
 800cfca:	683b      	ldr	r3, [r7, #0]
 800cfcc:	2b01      	cmp	r3, #1
 800cfce:	d91f      	bls.n	800d010 <HAL_SD_ReadBlocks+0x244>
    {
      if(hsd->SdCard.CardType != CARD_SECURED)
 800cfd0:	68fb      	ldr	r3, [r7, #12]
 800cfd2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cfd4:	2b03      	cmp	r3, #3
 800cfd6:	d01b      	beq.n	800d010 <HAL_SD_ReadBlocks+0x244>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800cfd8:	68fb      	ldr	r3, [r7, #12]
 800cfda:	681b      	ldr	r3, [r3, #0]
 800cfdc:	4618      	mov	r0, r3
 800cfde:	f004 fa07 	bl	80113f0 <SDMMC_CmdStopTransfer>
 800cfe2:	6478      	str	r0, [r7, #68]	; 0x44
        if(errorstate != HAL_SD_ERROR_NONE)
 800cfe4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800cfe6:	2b00      	cmp	r3, #0
 800cfe8:	d012      	beq.n	800d010 <HAL_SD_ReadBlocks+0x244>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800cfea:	68fb      	ldr	r3, [r7, #12]
 800cfec:	681b      	ldr	r3, [r3, #0]
 800cfee:	4a3a      	ldr	r2, [pc, #232]	; (800d0d8 <HAL_SD_ReadBlocks+0x30c>)
 800cff0:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->ErrorCode |= errorstate;
 800cff2:	68fb      	ldr	r3, [r7, #12]
 800cff4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800cff6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800cff8:	431a      	orrs	r2, r3
 800cffa:	68fb      	ldr	r3, [r7, #12]
 800cffc:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->State = HAL_SD_STATE_READY;
 800cffe:	68fb      	ldr	r3, [r7, #12]
 800d000:	2201      	movs	r2, #1
 800d002:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          hsd->Context = SD_CONTEXT_NONE;
 800d006:	68fb      	ldr	r3, [r7, #12]
 800d008:	2200      	movs	r2, #0
 800d00a:	631a      	str	r2, [r3, #48]	; 0x30
          return HAL_ERROR;
 800d00c:	2301      	movs	r3, #1
 800d00e:	e05e      	b.n	800d0ce <HAL_SD_ReadBlocks+0x302>
        }
      }
    }

    /* Get error state */
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 800d010:	68fb      	ldr	r3, [r7, #12]
 800d012:	681b      	ldr	r3, [r3, #0]
 800d014:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d016:	f003 0308 	and.w	r3, r3, #8
 800d01a:	2b00      	cmp	r3, #0
 800d01c:	d012      	beq.n	800d044 <HAL_SD_ReadBlocks+0x278>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800d01e:	68fb      	ldr	r3, [r7, #12]
 800d020:	681b      	ldr	r3, [r3, #0]
 800d022:	4a2d      	ldr	r2, [pc, #180]	; (800d0d8 <HAL_SD_ReadBlocks+0x30c>)
 800d024:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 800d026:	68fb      	ldr	r3, [r7, #12]
 800d028:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d02a:	f043 0208 	orr.w	r2, r3, #8
 800d02e:	68fb      	ldr	r3, [r7, #12]
 800d030:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800d032:	68fb      	ldr	r3, [r7, #12]
 800d034:	2201      	movs	r2, #1
 800d036:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800d03a:	68fb      	ldr	r3, [r7, #12]
 800d03c:	2200      	movs	r2, #0
 800d03e:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800d040:	2301      	movs	r3, #1
 800d042:	e044      	b.n	800d0ce <HAL_SD_ReadBlocks+0x302>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 800d044:	68fb      	ldr	r3, [r7, #12]
 800d046:	681b      	ldr	r3, [r3, #0]
 800d048:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d04a:	f003 0302 	and.w	r3, r3, #2
 800d04e:	2b00      	cmp	r3, #0
 800d050:	d012      	beq.n	800d078 <HAL_SD_ReadBlocks+0x2ac>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800d052:	68fb      	ldr	r3, [r7, #12]
 800d054:	681b      	ldr	r3, [r3, #0]
 800d056:	4a20      	ldr	r2, [pc, #128]	; (800d0d8 <HAL_SD_ReadBlocks+0x30c>)
 800d058:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 800d05a:	68fb      	ldr	r3, [r7, #12]
 800d05c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d05e:	f043 0202 	orr.w	r2, r3, #2
 800d062:	68fb      	ldr	r3, [r7, #12]
 800d064:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800d066:	68fb      	ldr	r3, [r7, #12]
 800d068:	2201      	movs	r2, #1
 800d06a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800d06e:	68fb      	ldr	r3, [r7, #12]
 800d070:	2200      	movs	r2, #0
 800d072:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800d074:	2301      	movs	r3, #1
 800d076:	e02a      	b.n	800d0ce <HAL_SD_ReadBlocks+0x302>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 800d078:	68fb      	ldr	r3, [r7, #12]
 800d07a:	681b      	ldr	r3, [r3, #0]
 800d07c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d07e:	f003 0320 	and.w	r3, r3, #32
 800d082:	2b00      	cmp	r3, #0
 800d084:	d012      	beq.n	800d0ac <HAL_SD_ReadBlocks+0x2e0>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800d086:	68fb      	ldr	r3, [r7, #12]
 800d088:	681b      	ldr	r3, [r3, #0]
 800d08a:	4a13      	ldr	r2, [pc, #76]	; (800d0d8 <HAL_SD_ReadBlocks+0x30c>)
 800d08c:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 800d08e:	68fb      	ldr	r3, [r7, #12]
 800d090:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d092:	f043 0220 	orr.w	r2, r3, #32
 800d096:	68fb      	ldr	r3, [r7, #12]
 800d098:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800d09a:	68fb      	ldr	r3, [r7, #12]
 800d09c:	2201      	movs	r2, #1
 800d09e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800d0a2:	68fb      	ldr	r3, [r7, #12]
 800d0a4:	2200      	movs	r2, #0
 800d0a6:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800d0a8:	2301      	movs	r3, #1
 800d0aa:	e010      	b.n	800d0ce <HAL_SD_ReadBlocks+0x302>
    {
      /* Nothing to do */
    }

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800d0ac:	68fb      	ldr	r3, [r7, #12]
 800d0ae:	681b      	ldr	r3, [r3, #0]
 800d0b0:	4a0a      	ldr	r2, [pc, #40]	; (800d0dc <HAL_SD_ReadBlocks+0x310>)
 800d0b2:	639a      	str	r2, [r3, #56]	; 0x38

    hsd->State = HAL_SD_STATE_READY;
 800d0b4:	68fb      	ldr	r3, [r7, #12]
 800d0b6:	2201      	movs	r2, #1
 800d0b8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_OK;
 800d0bc:	2300      	movs	r3, #0
 800d0be:	e006      	b.n	800d0ce <HAL_SD_ReadBlocks+0x302>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 800d0c0:	68fb      	ldr	r3, [r7, #12]
 800d0c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d0c4:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800d0c8:	68fb      	ldr	r3, [r7, #12]
 800d0ca:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800d0cc:	2301      	movs	r3, #1
  }
}
 800d0ce:	4618      	mov	r0, r3
 800d0d0:	3748      	adds	r7, #72	; 0x48
 800d0d2:	46bd      	mov	sp, r7
 800d0d4:	bd80      	pop	{r7, pc}
 800d0d6:	bf00      	nop
 800d0d8:	1fe00fff 	.word	0x1fe00fff
 800d0dc:	18000f3a 	.word	0x18000f3a

0800d0e0 <HAL_SD_WriteBlocks>:
  * @param  NumberOfBlocks: Number of SD blocks to write
  * @param  Timeout: Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks, uint32_t Timeout)
{
 800d0e0:	b580      	push	{r7, lr}
 800d0e2:	b092      	sub	sp, #72	; 0x48
 800d0e4:	af00      	add	r7, sp, #0
 800d0e6:	60f8      	str	r0, [r7, #12]
 800d0e8:	60b9      	str	r1, [r7, #8]
 800d0ea:	607a      	str	r2, [r7, #4]
 800d0ec:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800d0ee:	f7f7 fae7 	bl	80046c0 <HAL_GetTick>
 800d0f2:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t count, data, dataremaining;
  uint32_t add = BlockAdd;
 800d0f4:	687b      	ldr	r3, [r7, #4]
 800d0f6:	63bb      	str	r3, [r7, #56]	; 0x38
  uint8_t *tempbuff = pData;
 800d0f8:	68bb      	ldr	r3, [r7, #8]
 800d0fa:	637b      	str	r3, [r7, #52]	; 0x34

  if(NULL == pData)
 800d0fc:	68bb      	ldr	r3, [r7, #8]
 800d0fe:	2b00      	cmp	r3, #0
 800d100:	d107      	bne.n	800d112 <HAL_SD_WriteBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800d102:	68fb      	ldr	r3, [r7, #12]
 800d104:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d106:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800d10a:	68fb      	ldr	r3, [r7, #12]
 800d10c:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800d10e:	2301      	movs	r3, #1
 800d110:	e16b      	b.n	800d3ea <HAL_SD_WriteBlocks+0x30a>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 800d112:	68fb      	ldr	r3, [r7, #12]
 800d114:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800d118:	b2db      	uxtb	r3, r3
 800d11a:	2b01      	cmp	r3, #1
 800d11c:	f040 815e 	bne.w	800d3dc <HAL_SD_WriteBlocks+0x2fc>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800d120:	68fb      	ldr	r3, [r7, #12]
 800d122:	2200      	movs	r2, #0
 800d124:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800d126:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800d128:	683b      	ldr	r3, [r7, #0]
 800d12a:	441a      	add	r2, r3
 800d12c:	68fb      	ldr	r3, [r7, #12]
 800d12e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d130:	429a      	cmp	r2, r3
 800d132:	d907      	bls.n	800d144 <HAL_SD_WriteBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800d134:	68fb      	ldr	r3, [r7, #12]
 800d136:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d138:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800d13c:	68fb      	ldr	r3, [r7, #12]
 800d13e:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 800d140:	2301      	movs	r3, #1
 800d142:	e152      	b.n	800d3ea <HAL_SD_WriteBlocks+0x30a>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 800d144:	68fb      	ldr	r3, [r7, #12]
 800d146:	2203      	movs	r2, #3
 800d148:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 800d14c:	68fb      	ldr	r3, [r7, #12]
 800d14e:	681b      	ldr	r3, [r3, #0]
 800d150:	2200      	movs	r2, #0
 800d152:	62da      	str	r2, [r3, #44]	; 0x2c

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800d154:	68fb      	ldr	r3, [r7, #12]
 800d156:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d158:	2b01      	cmp	r3, #1
 800d15a:	d002      	beq.n	800d162 <HAL_SD_WriteBlocks+0x82>
    {
      add *= 512U;
 800d15c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d15e:	025b      	lsls	r3, r3, #9
 800d160:	63bb      	str	r3, [r7, #56]	; 0x38
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800d162:	f04f 33ff 	mov.w	r3, #4294967295
 800d166:	61bb      	str	r3, [r7, #24]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 800d168:	683b      	ldr	r3, [r7, #0]
 800d16a:	025b      	lsls	r3, r3, #9
 800d16c:	61fb      	str	r3, [r7, #28]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 800d16e:	2390      	movs	r3, #144	; 0x90
 800d170:	623b      	str	r3, [r7, #32]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_CARD;
 800d172:	2300      	movs	r3, #0
 800d174:	627b      	str	r3, [r7, #36]	; 0x24
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800d176:	2300      	movs	r3, #0
 800d178:	62bb      	str	r3, [r7, #40]	; 0x28
    config.DPSM          = SDMMC_DPSM_DISABLE;
 800d17a:	2300      	movs	r3, #0
 800d17c:	62fb      	str	r3, [r7, #44]	; 0x2c
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 800d17e:	68fb      	ldr	r3, [r7, #12]
 800d180:	681b      	ldr	r3, [r3, #0]
 800d182:	f107 0218 	add.w	r2, r7, #24
 800d186:	4611      	mov	r1, r2
 800d188:	4618      	mov	r0, r3
 800d18a:	f004 f855 	bl	8011238 <SDMMC_ConfigData>
    __SDMMC_CMDTRANS_ENABLE( hsd->Instance);
 800d18e:	68fb      	ldr	r3, [r7, #12]
 800d190:	681b      	ldr	r3, [r3, #0]
 800d192:	68da      	ldr	r2, [r3, #12]
 800d194:	68fb      	ldr	r3, [r7, #12]
 800d196:	681b      	ldr	r3, [r3, #0]
 800d198:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800d19c:	60da      	str	r2, [r3, #12]

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 800d19e:	683b      	ldr	r3, [r7, #0]
 800d1a0:	2b01      	cmp	r3, #1
 800d1a2:	d90a      	bls.n	800d1ba <HAL_SD_WriteBlocks+0xda>
    {
      hsd->Context = SD_CONTEXT_WRITE_MULTIPLE_BLOCK;
 800d1a4:	68fb      	ldr	r3, [r7, #12]
 800d1a6:	2220      	movs	r2, #32
 800d1a8:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 800d1aa:	68fb      	ldr	r3, [r7, #12]
 800d1ac:	681b      	ldr	r3, [r3, #0]
 800d1ae:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800d1b0:	4618      	mov	r0, r3
 800d1b2:	f004 f8f9 	bl	80113a8 <SDMMC_CmdWriteMultiBlock>
 800d1b6:	6478      	str	r0, [r7, #68]	; 0x44
 800d1b8:	e009      	b.n	800d1ce <HAL_SD_WriteBlocks+0xee>
    }
    else
    {
      hsd->Context = SD_CONTEXT_WRITE_SINGLE_BLOCK;
 800d1ba:	68fb      	ldr	r3, [r7, #12]
 800d1bc:	2210      	movs	r2, #16
 800d1be:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 800d1c0:	68fb      	ldr	r3, [r7, #12]
 800d1c2:	681b      	ldr	r3, [r3, #0]
 800d1c4:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800d1c6:	4618      	mov	r0, r3
 800d1c8:	f004 f8cb 	bl	8011362 <SDMMC_CmdWriteSingleBlock>
 800d1cc:	6478      	str	r0, [r7, #68]	; 0x44
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 800d1ce:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d1d0:	2b00      	cmp	r3, #0
 800d1d2:	d012      	beq.n	800d1fa <HAL_SD_WriteBlocks+0x11a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800d1d4:	68fb      	ldr	r3, [r7, #12]
 800d1d6:	681b      	ldr	r3, [r3, #0]
 800d1d8:	4a86      	ldr	r2, [pc, #536]	; (800d3f4 <HAL_SD_WriteBlocks+0x314>)
 800d1da:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 800d1dc:	68fb      	ldr	r3, [r7, #12]
 800d1de:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800d1e0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d1e2:	431a      	orrs	r2, r3
 800d1e4:	68fb      	ldr	r3, [r7, #12]
 800d1e6:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800d1e8:	68fb      	ldr	r3, [r7, #12]
 800d1ea:	2201      	movs	r2, #1
 800d1ec:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800d1f0:	68fb      	ldr	r3, [r7, #12]
 800d1f2:	2200      	movs	r2, #0
 800d1f4:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800d1f6:	2301      	movs	r3, #1
 800d1f8:	e0f7      	b.n	800d3ea <HAL_SD_WriteBlocks+0x30a>
    }

    /* Write block(s) in polling mode */
    dataremaining = config.DataLength;
 800d1fa:	69fb      	ldr	r3, [r7, #28]
 800d1fc:	63fb      	str	r3, [r7, #60]	; 0x3c
    while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 800d1fe:	e05c      	b.n	800d2ba <HAL_SD_WriteBlocks+0x1da>
    {
      if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXFIFOHE) && (dataremaining >= 32U))
 800d200:	68fb      	ldr	r3, [r7, #12]
 800d202:	681b      	ldr	r3, [r3, #0]
 800d204:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d206:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800d20a:	2b00      	cmp	r3, #0
 800d20c:	d037      	beq.n	800d27e <HAL_SD_WriteBlocks+0x19e>
 800d20e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d210:	2b1f      	cmp	r3, #31
 800d212:	d934      	bls.n	800d27e <HAL_SD_WriteBlocks+0x19e>
      {
        /* Write data to SDMMC Tx FIFO */
        for(count = 0U; count < 8U; count++)
 800d214:	2300      	movs	r3, #0
 800d216:	643b      	str	r3, [r7, #64]	; 0x40
 800d218:	e02b      	b.n	800d272 <HAL_SD_WriteBlocks+0x192>
        {
          data = (uint32_t)(*tempbuff);
 800d21a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d21c:	781b      	ldrb	r3, [r3, #0]
 800d21e:	617b      	str	r3, [r7, #20]
          tempbuff++;
 800d220:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d222:	3301      	adds	r3, #1
 800d224:	637b      	str	r3, [r7, #52]	; 0x34
          data |= ((uint32_t)(*tempbuff) << 8U);
 800d226:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d228:	781b      	ldrb	r3, [r3, #0]
 800d22a:	021a      	lsls	r2, r3, #8
 800d22c:	697b      	ldr	r3, [r7, #20]
 800d22e:	4313      	orrs	r3, r2
 800d230:	617b      	str	r3, [r7, #20]
          tempbuff++;
 800d232:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d234:	3301      	adds	r3, #1
 800d236:	637b      	str	r3, [r7, #52]	; 0x34
          data |= ((uint32_t)(*tempbuff) << 16U);
 800d238:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d23a:	781b      	ldrb	r3, [r3, #0]
 800d23c:	041a      	lsls	r2, r3, #16
 800d23e:	697b      	ldr	r3, [r7, #20]
 800d240:	4313      	orrs	r3, r2
 800d242:	617b      	str	r3, [r7, #20]
          tempbuff++;
 800d244:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d246:	3301      	adds	r3, #1
 800d248:	637b      	str	r3, [r7, #52]	; 0x34
          data |= ((uint32_t)(*tempbuff) << 24U);
 800d24a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d24c:	781b      	ldrb	r3, [r3, #0]
 800d24e:	061a      	lsls	r2, r3, #24
 800d250:	697b      	ldr	r3, [r7, #20]
 800d252:	4313      	orrs	r3, r2
 800d254:	617b      	str	r3, [r7, #20]
          tempbuff++;
 800d256:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d258:	3301      	adds	r3, #1
 800d25a:	637b      	str	r3, [r7, #52]	; 0x34
          (void)SDMMC_WriteFIFO(hsd->Instance, &data);
 800d25c:	68fb      	ldr	r3, [r7, #12]
 800d25e:	681b      	ldr	r3, [r3, #0]
 800d260:	f107 0214 	add.w	r2, r7, #20
 800d264:	4611      	mov	r1, r2
 800d266:	4618      	mov	r0, r3
 800d268:	f003 ff6b 	bl	8011142 <SDMMC_WriteFIFO>
        for(count = 0U; count < 8U; count++)
 800d26c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d26e:	3301      	adds	r3, #1
 800d270:	643b      	str	r3, [r7, #64]	; 0x40
 800d272:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d274:	2b07      	cmp	r3, #7
 800d276:	d9d0      	bls.n	800d21a <HAL_SD_WriteBlocks+0x13a>
        }
        dataremaining -= 32U;
 800d278:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d27a:	3b20      	subs	r3, #32
 800d27c:	63fb      	str	r3, [r7, #60]	; 0x3c
      }

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 800d27e:	f7f7 fa1f 	bl	80046c0 <HAL_GetTick>
 800d282:	4602      	mov	r2, r0
 800d284:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d286:	1ad3      	subs	r3, r2, r3
 800d288:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800d28a:	429a      	cmp	r2, r3
 800d28c:	d902      	bls.n	800d294 <HAL_SD_WriteBlocks+0x1b4>
 800d28e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d290:	2b00      	cmp	r3, #0
 800d292:	d112      	bne.n	800d2ba <HAL_SD_WriteBlocks+0x1da>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800d294:	68fb      	ldr	r3, [r7, #12]
 800d296:	681b      	ldr	r3, [r3, #0]
 800d298:	4a56      	ldr	r2, [pc, #344]	; (800d3f4 <HAL_SD_WriteBlocks+0x314>)
 800d29a:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 800d29c:	68fb      	ldr	r3, [r7, #12]
 800d29e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800d2a0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d2a2:	431a      	orrs	r2, r3
 800d2a4:	68fb      	ldr	r3, [r7, #12]
 800d2a6:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 800d2a8:	68fb      	ldr	r3, [r7, #12]
 800d2aa:	2201      	movs	r2, #1
 800d2ac:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 800d2b0:	68fb      	ldr	r3, [r7, #12]
 800d2b2:	2200      	movs	r2, #0
 800d2b4:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_TIMEOUT;
 800d2b6:	2303      	movs	r3, #3
 800d2b8:	e097      	b.n	800d3ea <HAL_SD_WriteBlocks+0x30a>
    while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 800d2ba:	68fb      	ldr	r3, [r7, #12]
 800d2bc:	681b      	ldr	r3, [r3, #0]
 800d2be:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d2c0:	f403 738d 	and.w	r3, r3, #282	; 0x11a
 800d2c4:	2b00      	cmp	r3, #0
 800d2c6:	d09b      	beq.n	800d200 <HAL_SD_WriteBlocks+0x120>
      }
    }
    __SDMMC_CMDTRANS_DISABLE( hsd->Instance);
 800d2c8:	68fb      	ldr	r3, [r7, #12]
 800d2ca:	681b      	ldr	r3, [r3, #0]
 800d2cc:	68da      	ldr	r2, [r3, #12]
 800d2ce:	68fb      	ldr	r3, [r7, #12]
 800d2d0:	681b      	ldr	r3, [r3, #0]
 800d2d2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800d2d6:	60da      	str	r2, [r3, #12]

    /* Send stop transmission command in case of multiblock write */
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 800d2d8:	68fb      	ldr	r3, [r7, #12]
 800d2da:	681b      	ldr	r3, [r3, #0]
 800d2dc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d2de:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d2e2:	2b00      	cmp	r3, #0
 800d2e4:	d022      	beq.n	800d32c <HAL_SD_WriteBlocks+0x24c>
 800d2e6:	683b      	ldr	r3, [r7, #0]
 800d2e8:	2b01      	cmp	r3, #1
 800d2ea:	d91f      	bls.n	800d32c <HAL_SD_WriteBlocks+0x24c>
    {
      if(hsd->SdCard.CardType != CARD_SECURED)
 800d2ec:	68fb      	ldr	r3, [r7, #12]
 800d2ee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d2f0:	2b03      	cmp	r3, #3
 800d2f2:	d01b      	beq.n	800d32c <HAL_SD_WriteBlocks+0x24c>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800d2f4:	68fb      	ldr	r3, [r7, #12]
 800d2f6:	681b      	ldr	r3, [r3, #0]
 800d2f8:	4618      	mov	r0, r3
 800d2fa:	f004 f879 	bl	80113f0 <SDMMC_CmdStopTransfer>
 800d2fe:	6478      	str	r0, [r7, #68]	; 0x44
        if(errorstate != HAL_SD_ERROR_NONE)
 800d300:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d302:	2b00      	cmp	r3, #0
 800d304:	d012      	beq.n	800d32c <HAL_SD_WriteBlocks+0x24c>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800d306:	68fb      	ldr	r3, [r7, #12]
 800d308:	681b      	ldr	r3, [r3, #0]
 800d30a:	4a3a      	ldr	r2, [pc, #232]	; (800d3f4 <HAL_SD_WriteBlocks+0x314>)
 800d30c:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->ErrorCode |= errorstate;
 800d30e:	68fb      	ldr	r3, [r7, #12]
 800d310:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800d312:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d314:	431a      	orrs	r2, r3
 800d316:	68fb      	ldr	r3, [r7, #12]
 800d318:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->State = HAL_SD_STATE_READY;
 800d31a:	68fb      	ldr	r3, [r7, #12]
 800d31c:	2201      	movs	r2, #1
 800d31e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          hsd->Context = SD_CONTEXT_NONE;
 800d322:	68fb      	ldr	r3, [r7, #12]
 800d324:	2200      	movs	r2, #0
 800d326:	631a      	str	r2, [r3, #48]	; 0x30
          return HAL_ERROR;
 800d328:	2301      	movs	r3, #1
 800d32a:	e05e      	b.n	800d3ea <HAL_SD_WriteBlocks+0x30a>
        }
      }
    }

    /* Get error state */
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 800d32c:	68fb      	ldr	r3, [r7, #12]
 800d32e:	681b      	ldr	r3, [r3, #0]
 800d330:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d332:	f003 0308 	and.w	r3, r3, #8
 800d336:	2b00      	cmp	r3, #0
 800d338:	d012      	beq.n	800d360 <HAL_SD_WriteBlocks+0x280>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800d33a:	68fb      	ldr	r3, [r7, #12]
 800d33c:	681b      	ldr	r3, [r3, #0]
 800d33e:	4a2d      	ldr	r2, [pc, #180]	; (800d3f4 <HAL_SD_WriteBlocks+0x314>)
 800d340:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 800d342:	68fb      	ldr	r3, [r7, #12]
 800d344:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d346:	f043 0208 	orr.w	r2, r3, #8
 800d34a:	68fb      	ldr	r3, [r7, #12]
 800d34c:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800d34e:	68fb      	ldr	r3, [r7, #12]
 800d350:	2201      	movs	r2, #1
 800d352:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800d356:	68fb      	ldr	r3, [r7, #12]
 800d358:	2200      	movs	r2, #0
 800d35a:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800d35c:	2301      	movs	r3, #1
 800d35e:	e044      	b.n	800d3ea <HAL_SD_WriteBlocks+0x30a>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 800d360:	68fb      	ldr	r3, [r7, #12]
 800d362:	681b      	ldr	r3, [r3, #0]
 800d364:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d366:	f003 0302 	and.w	r3, r3, #2
 800d36a:	2b00      	cmp	r3, #0
 800d36c:	d012      	beq.n	800d394 <HAL_SD_WriteBlocks+0x2b4>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800d36e:	68fb      	ldr	r3, [r7, #12]
 800d370:	681b      	ldr	r3, [r3, #0]
 800d372:	4a20      	ldr	r2, [pc, #128]	; (800d3f4 <HAL_SD_WriteBlocks+0x314>)
 800d374:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 800d376:	68fb      	ldr	r3, [r7, #12]
 800d378:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d37a:	f043 0202 	orr.w	r2, r3, #2
 800d37e:	68fb      	ldr	r3, [r7, #12]
 800d380:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800d382:	68fb      	ldr	r3, [r7, #12]
 800d384:	2201      	movs	r2, #1
 800d386:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800d38a:	68fb      	ldr	r3, [r7, #12]
 800d38c:	2200      	movs	r2, #0
 800d38e:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800d390:	2301      	movs	r3, #1
 800d392:	e02a      	b.n	800d3ea <HAL_SD_WriteBlocks+0x30a>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR))
 800d394:	68fb      	ldr	r3, [r7, #12]
 800d396:	681b      	ldr	r3, [r3, #0]
 800d398:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d39a:	f003 0310 	and.w	r3, r3, #16
 800d39e:	2b00      	cmp	r3, #0
 800d3a0:	d012      	beq.n	800d3c8 <HAL_SD_WriteBlocks+0x2e8>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800d3a2:	68fb      	ldr	r3, [r7, #12]
 800d3a4:	681b      	ldr	r3, [r3, #0]
 800d3a6:	4a13      	ldr	r2, [pc, #76]	; (800d3f4 <HAL_SD_WriteBlocks+0x314>)
 800d3a8:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 800d3aa:	68fb      	ldr	r3, [r7, #12]
 800d3ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d3ae:	f043 0210 	orr.w	r2, r3, #16
 800d3b2:	68fb      	ldr	r3, [r7, #12]
 800d3b4:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800d3b6:	68fb      	ldr	r3, [r7, #12]
 800d3b8:	2201      	movs	r2, #1
 800d3ba:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800d3be:	68fb      	ldr	r3, [r7, #12]
 800d3c0:	2200      	movs	r2, #0
 800d3c2:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800d3c4:	2301      	movs	r3, #1
 800d3c6:	e010      	b.n	800d3ea <HAL_SD_WriteBlocks+0x30a>
    {
      /* Nothing to do */
    }

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800d3c8:	68fb      	ldr	r3, [r7, #12]
 800d3ca:	681b      	ldr	r3, [r3, #0]
 800d3cc:	4a0a      	ldr	r2, [pc, #40]	; (800d3f8 <HAL_SD_WriteBlocks+0x318>)
 800d3ce:	639a      	str	r2, [r3, #56]	; 0x38

    hsd->State = HAL_SD_STATE_READY;
 800d3d0:	68fb      	ldr	r3, [r7, #12]
 800d3d2:	2201      	movs	r2, #1
 800d3d4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_OK;
 800d3d8:	2300      	movs	r3, #0
 800d3da:	e006      	b.n	800d3ea <HAL_SD_WriteBlocks+0x30a>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 800d3dc:	68fb      	ldr	r3, [r7, #12]
 800d3de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d3e0:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800d3e4:	68fb      	ldr	r3, [r7, #12]
 800d3e6:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800d3e8:	2301      	movs	r3, #1
  }
}
 800d3ea:	4618      	mov	r0, r3
 800d3ec:	3748      	adds	r7, #72	; 0x48
 800d3ee:	46bd      	mov	sp, r7
 800d3f0:	bd80      	pop	{r7, pc}
 800d3f2:	bf00      	nop
 800d3f4:	1fe00fff 	.word	0x1fe00fff
 800d3f8:	18000f3a 	.word	0x18000f3a

0800d3fc <HAL_SD_ReadBlocks_DMA>:
  * @param  BlockAdd: Block Address from where data is to be read
  * @param  NumberOfBlocks: Number of blocks to read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 800d3fc:	b580      	push	{r7, lr}
 800d3fe:	b08c      	sub	sp, #48	; 0x30
 800d400:	af00      	add	r7, sp, #0
 800d402:	60f8      	str	r0, [r7, #12]
 800d404:	60b9      	str	r1, [r7, #8]
 800d406:	607a      	str	r2, [r7, #4]
 800d408:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 800d40a:	687b      	ldr	r3, [r7, #4]
 800d40c:	62bb      	str	r3, [r7, #40]	; 0x28

  if(NULL == pData)
 800d40e:	68bb      	ldr	r3, [r7, #8]
 800d410:	2b00      	cmp	r3, #0
 800d412:	d107      	bne.n	800d424 <HAL_SD_ReadBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800d414:	68fb      	ldr	r3, [r7, #12]
 800d416:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d418:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800d41c:	68fb      	ldr	r3, [r7, #12]
 800d41e:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800d420:	2301      	movs	r3, #1
 800d422:	e08d      	b.n	800d540 <HAL_SD_ReadBlocks_DMA+0x144>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 800d424:	68fb      	ldr	r3, [r7, #12]
 800d426:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800d42a:	b2db      	uxtb	r3, r3
 800d42c:	2b01      	cmp	r3, #1
 800d42e:	f040 8086 	bne.w	800d53e <HAL_SD_ReadBlocks_DMA+0x142>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800d432:	68fb      	ldr	r3, [r7, #12]
 800d434:	2200      	movs	r2, #0
 800d436:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800d438:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d43a:	683b      	ldr	r3, [r7, #0]
 800d43c:	441a      	add	r2, r3
 800d43e:	68fb      	ldr	r3, [r7, #12]
 800d440:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d442:	429a      	cmp	r2, r3
 800d444:	d907      	bls.n	800d456 <HAL_SD_ReadBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800d446:	68fb      	ldr	r3, [r7, #12]
 800d448:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d44a:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800d44e:	68fb      	ldr	r3, [r7, #12]
 800d450:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 800d452:	2301      	movs	r3, #1
 800d454:	e074      	b.n	800d540 <HAL_SD_ReadBlocks_DMA+0x144>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 800d456:	68fb      	ldr	r3, [r7, #12]
 800d458:	2203      	movs	r2, #3
 800d45a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 800d45e:	68fb      	ldr	r3, [r7, #12]
 800d460:	681b      	ldr	r3, [r3, #0]
 800d462:	2200      	movs	r2, #0
 800d464:	62da      	str	r2, [r3, #44]	; 0x2c

    hsd->pRxBuffPtr = pData;
 800d466:	68fb      	ldr	r3, [r7, #12]
 800d468:	68ba      	ldr	r2, [r7, #8]
 800d46a:	629a      	str	r2, [r3, #40]	; 0x28
    hsd->RxXferSize = BLOCKSIZE * NumberOfBlocks;
 800d46c:	683b      	ldr	r3, [r7, #0]
 800d46e:	025a      	lsls	r2, r3, #9
 800d470:	68fb      	ldr	r3, [r7, #12]
 800d472:	62da      	str	r2, [r3, #44]	; 0x2c

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800d474:	68fb      	ldr	r3, [r7, #12]
 800d476:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d478:	2b01      	cmp	r3, #1
 800d47a:	d002      	beq.n	800d482 <HAL_SD_ReadBlocks_DMA+0x86>
    {
      add *= 512U;
 800d47c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d47e:	025b      	lsls	r3, r3, #9
 800d480:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800d482:	f04f 33ff 	mov.w	r3, #4294967295
 800d486:	613b      	str	r3, [r7, #16]
    config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 800d488:	683b      	ldr	r3, [r7, #0]
 800d48a:	025b      	lsls	r3, r3, #9
 800d48c:	617b      	str	r3, [r7, #20]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 800d48e:	2390      	movs	r3, #144	; 0x90
 800d490:	61bb      	str	r3, [r7, #24]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 800d492:	2302      	movs	r3, #2
 800d494:	61fb      	str	r3, [r7, #28]
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800d496:	2300      	movs	r3, #0
 800d498:	623b      	str	r3, [r7, #32]
    config.DPSM          = SDMMC_DPSM_DISABLE;
 800d49a:	2300      	movs	r3, #0
 800d49c:	627b      	str	r3, [r7, #36]	; 0x24
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 800d49e:	68fb      	ldr	r3, [r7, #12]
 800d4a0:	681b      	ldr	r3, [r3, #0]
 800d4a2:	f107 0210 	add.w	r2, r7, #16
 800d4a6:	4611      	mov	r1, r2
 800d4a8:	4618      	mov	r0, r3
 800d4aa:	f003 fec5 	bl	8011238 <SDMMC_ConfigData>

    __SDMMC_CMDTRANS_ENABLE( hsd->Instance);
 800d4ae:	68fb      	ldr	r3, [r7, #12]
 800d4b0:	681b      	ldr	r3, [r3, #0]
 800d4b2:	68da      	ldr	r2, [r3, #12]
 800d4b4:	68fb      	ldr	r3, [r7, #12]
 800d4b6:	681b      	ldr	r3, [r3, #0]
 800d4b8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800d4bc:	60da      	str	r2, [r3, #12]
    hsd->Instance->IDMABASE0 = (uint32_t) pData ;
 800d4be:	68fb      	ldr	r3, [r7, #12]
 800d4c0:	681b      	ldr	r3, [r3, #0]
 800d4c2:	68ba      	ldr	r2, [r7, #8]
 800d4c4:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->Instance->IDMACTRL  = SDMMC_ENABLE_IDMA_SINGLE_BUFF;
 800d4c6:	68fb      	ldr	r3, [r7, #12]
 800d4c8:	681b      	ldr	r3, [r3, #0]
 800d4ca:	2201      	movs	r2, #1
 800d4cc:	651a      	str	r2, [r3, #80]	; 0x50

    /* Read Blocks in DMA mode */
    if(NumberOfBlocks > 1U)
 800d4ce:	683b      	ldr	r3, [r7, #0]
 800d4d0:	2b01      	cmp	r3, #1
 800d4d2:	d90a      	bls.n	800d4ea <HAL_SD_ReadBlocks_DMA+0xee>
    {
      hsd->Context = (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 800d4d4:	68fb      	ldr	r3, [r7, #12]
 800d4d6:	2282      	movs	r2, #130	; 0x82
 800d4d8:	631a      	str	r2, [r3, #48]	; 0x30

      /* Read Multi Block command */
      errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 800d4da:	68fb      	ldr	r3, [r7, #12]
 800d4dc:	681b      	ldr	r3, [r3, #0]
 800d4de:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800d4e0:	4618      	mov	r0, r3
 800d4e2:	f003 ff1b 	bl	801131c <SDMMC_CmdReadMultiBlock>
 800d4e6:	62f8      	str	r0, [r7, #44]	; 0x2c
 800d4e8:	e009      	b.n	800d4fe <HAL_SD_ReadBlocks_DMA+0x102>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_READ_SINGLE_BLOCK | SD_CONTEXT_DMA);
 800d4ea:	68fb      	ldr	r3, [r7, #12]
 800d4ec:	2281      	movs	r2, #129	; 0x81
 800d4ee:	631a      	str	r2, [r3, #48]	; 0x30

      /* Read Single Block command */
      errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 800d4f0:	68fb      	ldr	r3, [r7, #12]
 800d4f2:	681b      	ldr	r3, [r3, #0]
 800d4f4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800d4f6:	4618      	mov	r0, r3
 800d4f8:	f003 feed 	bl	80112d6 <SDMMC_CmdReadSingleBlock>
 800d4fc:	62f8      	str	r0, [r7, #44]	; 0x2c
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 800d4fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d500:	2b00      	cmp	r3, #0
 800d502:	d012      	beq.n	800d52a <HAL_SD_ReadBlocks_DMA+0x12e>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800d504:	68fb      	ldr	r3, [r7, #12]
 800d506:	681b      	ldr	r3, [r3, #0]
 800d508:	4a0f      	ldr	r2, [pc, #60]	; (800d548 <HAL_SD_ReadBlocks_DMA+0x14c>)
 800d50a:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 800d50c:	68fb      	ldr	r3, [r7, #12]
 800d50e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800d510:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d512:	431a      	orrs	r2, r3
 800d514:	68fb      	ldr	r3, [r7, #12]
 800d516:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800d518:	68fb      	ldr	r3, [r7, #12]
 800d51a:	2201      	movs	r2, #1
 800d51c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800d520:	68fb      	ldr	r3, [r7, #12]
 800d522:	2200      	movs	r2, #0
 800d524:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800d526:	2301      	movs	r3, #1
 800d528:	e00a      	b.n	800d540 <HAL_SD_ReadBlocks_DMA+0x144>
    }

    /* Enable transfer interrupts */
    __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_RXOVERR | SDMMC_IT_DATAEND));
 800d52a:	68fb      	ldr	r3, [r7, #12]
 800d52c:	681b      	ldr	r3, [r3, #0]
 800d52e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800d530:	68fb      	ldr	r3, [r7, #12]
 800d532:	681b      	ldr	r3, [r3, #0]
 800d534:	f442 7295 	orr.w	r2, r2, #298	; 0x12a
 800d538:	63da      	str	r2, [r3, #60]	; 0x3c


    return HAL_OK;
 800d53a:	2300      	movs	r3, #0
 800d53c:	e000      	b.n	800d540 <HAL_SD_ReadBlocks_DMA+0x144>
  }
  else
  {
    return HAL_BUSY;
 800d53e:	2302      	movs	r3, #2
  }
}
 800d540:	4618      	mov	r0, r3
 800d542:	3730      	adds	r7, #48	; 0x30
 800d544:	46bd      	mov	sp, r7
 800d546:	bd80      	pop	{r7, pc}
 800d548:	1fe00fff 	.word	0x1fe00fff

0800d54c <HAL_SD_WriteBlocks_DMA>:
  * @param  BlockAdd: Block Address where data will be written
  * @param  NumberOfBlocks: Number of blocks to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 800d54c:	b580      	push	{r7, lr}
 800d54e:	b08c      	sub	sp, #48	; 0x30
 800d550:	af00      	add	r7, sp, #0
 800d552:	60f8      	str	r0, [r7, #12]
 800d554:	60b9      	str	r1, [r7, #8]
 800d556:	607a      	str	r2, [r7, #4]
 800d558:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 800d55a:	687b      	ldr	r3, [r7, #4]
 800d55c:	62bb      	str	r3, [r7, #40]	; 0x28

  if(NULL == pData)
 800d55e:	68bb      	ldr	r3, [r7, #8]
 800d560:	2b00      	cmp	r3, #0
 800d562:	d107      	bne.n	800d574 <HAL_SD_WriteBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800d564:	68fb      	ldr	r3, [r7, #12]
 800d566:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d568:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800d56c:	68fb      	ldr	r3, [r7, #12]
 800d56e:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800d570:	2301      	movs	r3, #1
 800d572:	e08d      	b.n	800d690 <HAL_SD_WriteBlocks_DMA+0x144>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 800d574:	68fb      	ldr	r3, [r7, #12]
 800d576:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800d57a:	b2db      	uxtb	r3, r3
 800d57c:	2b01      	cmp	r3, #1
 800d57e:	f040 8086 	bne.w	800d68e <HAL_SD_WriteBlocks_DMA+0x142>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800d582:	68fb      	ldr	r3, [r7, #12]
 800d584:	2200      	movs	r2, #0
 800d586:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800d588:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d58a:	683b      	ldr	r3, [r7, #0]
 800d58c:	441a      	add	r2, r3
 800d58e:	68fb      	ldr	r3, [r7, #12]
 800d590:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d592:	429a      	cmp	r2, r3
 800d594:	d907      	bls.n	800d5a6 <HAL_SD_WriteBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800d596:	68fb      	ldr	r3, [r7, #12]
 800d598:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d59a:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800d59e:	68fb      	ldr	r3, [r7, #12]
 800d5a0:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 800d5a2:	2301      	movs	r3, #1
 800d5a4:	e074      	b.n	800d690 <HAL_SD_WriteBlocks_DMA+0x144>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 800d5a6:	68fb      	ldr	r3, [r7, #12]
 800d5a8:	2203      	movs	r2, #3
 800d5aa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 800d5ae:	68fb      	ldr	r3, [r7, #12]
 800d5b0:	681b      	ldr	r3, [r3, #0]
 800d5b2:	2200      	movs	r2, #0
 800d5b4:	62da      	str	r2, [r3, #44]	; 0x2c

    hsd->pTxBuffPtr = pData;
 800d5b6:	68fb      	ldr	r3, [r7, #12]
 800d5b8:	68ba      	ldr	r2, [r7, #8]
 800d5ba:	621a      	str	r2, [r3, #32]
    hsd->TxXferSize = BLOCKSIZE * NumberOfBlocks;
 800d5bc:	683b      	ldr	r3, [r7, #0]
 800d5be:	025a      	lsls	r2, r3, #9
 800d5c0:	68fb      	ldr	r3, [r7, #12]
 800d5c2:	625a      	str	r2, [r3, #36]	; 0x24

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800d5c4:	68fb      	ldr	r3, [r7, #12]
 800d5c6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d5c8:	2b01      	cmp	r3, #1
 800d5ca:	d002      	beq.n	800d5d2 <HAL_SD_WriteBlocks_DMA+0x86>
    {
      add *= 512U;
 800d5cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d5ce:	025b      	lsls	r3, r3, #9
 800d5d0:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800d5d2:	f04f 33ff 	mov.w	r3, #4294967295
 800d5d6:	613b      	str	r3, [r7, #16]
    config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 800d5d8:	683b      	ldr	r3, [r7, #0]
 800d5da:	025b      	lsls	r3, r3, #9
 800d5dc:	617b      	str	r3, [r7, #20]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 800d5de:	2390      	movs	r3, #144	; 0x90
 800d5e0:	61bb      	str	r3, [r7, #24]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_CARD;
 800d5e2:	2300      	movs	r3, #0
 800d5e4:	61fb      	str	r3, [r7, #28]
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800d5e6:	2300      	movs	r3, #0
 800d5e8:	623b      	str	r3, [r7, #32]
    config.DPSM          = SDMMC_DPSM_DISABLE;
 800d5ea:	2300      	movs	r3, #0
 800d5ec:	627b      	str	r3, [r7, #36]	; 0x24
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 800d5ee:	68fb      	ldr	r3, [r7, #12]
 800d5f0:	681b      	ldr	r3, [r3, #0]
 800d5f2:	f107 0210 	add.w	r2, r7, #16
 800d5f6:	4611      	mov	r1, r2
 800d5f8:	4618      	mov	r0, r3
 800d5fa:	f003 fe1d 	bl	8011238 <SDMMC_ConfigData>


    __SDMMC_CMDTRANS_ENABLE( hsd->Instance);
 800d5fe:	68fb      	ldr	r3, [r7, #12]
 800d600:	681b      	ldr	r3, [r3, #0]
 800d602:	68da      	ldr	r2, [r3, #12]
 800d604:	68fb      	ldr	r3, [r7, #12]
 800d606:	681b      	ldr	r3, [r3, #0]
 800d608:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800d60c:	60da      	str	r2, [r3, #12]

    hsd->Instance->IDMABASE0 = (uint32_t) pData ;
 800d60e:	68fb      	ldr	r3, [r7, #12]
 800d610:	681b      	ldr	r3, [r3, #0]
 800d612:	68ba      	ldr	r2, [r7, #8]
 800d614:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->Instance->IDMACTRL  = SDMMC_ENABLE_IDMA_SINGLE_BUFF;
 800d616:	68fb      	ldr	r3, [r7, #12]
 800d618:	681b      	ldr	r3, [r3, #0]
 800d61a:	2201      	movs	r2, #1
 800d61c:	651a      	str	r2, [r3, #80]	; 0x50

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 800d61e:	683b      	ldr	r3, [r7, #0]
 800d620:	2b01      	cmp	r3, #1
 800d622:	d90a      	bls.n	800d63a <HAL_SD_WriteBlocks_DMA+0xee>
    {
      hsd->Context = (SD_CONTEXT_WRITE_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 800d624:	68fb      	ldr	r3, [r7, #12]
 800d626:	22a0      	movs	r2, #160	; 0xa0
 800d628:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 800d62a:	68fb      	ldr	r3, [r7, #12]
 800d62c:	681b      	ldr	r3, [r3, #0]
 800d62e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800d630:	4618      	mov	r0, r3
 800d632:	f003 feb9 	bl	80113a8 <SDMMC_CmdWriteMultiBlock>
 800d636:	62f8      	str	r0, [r7, #44]	; 0x2c
 800d638:	e009      	b.n	800d64e <HAL_SD_WriteBlocks_DMA+0x102>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_WRITE_SINGLE_BLOCK | SD_CONTEXT_DMA);
 800d63a:	68fb      	ldr	r3, [r7, #12]
 800d63c:	2290      	movs	r2, #144	; 0x90
 800d63e:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 800d640:	68fb      	ldr	r3, [r7, #12]
 800d642:	681b      	ldr	r3, [r3, #0]
 800d644:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800d646:	4618      	mov	r0, r3
 800d648:	f003 fe8b 	bl	8011362 <SDMMC_CmdWriteSingleBlock>
 800d64c:	62f8      	str	r0, [r7, #44]	; 0x2c
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 800d64e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d650:	2b00      	cmp	r3, #0
 800d652:	d012      	beq.n	800d67a <HAL_SD_WriteBlocks_DMA+0x12e>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800d654:	68fb      	ldr	r3, [r7, #12]
 800d656:	681b      	ldr	r3, [r3, #0]
 800d658:	4a0f      	ldr	r2, [pc, #60]	; (800d698 <HAL_SD_WriteBlocks_DMA+0x14c>)
 800d65a:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 800d65c:	68fb      	ldr	r3, [r7, #12]
 800d65e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800d660:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d662:	431a      	orrs	r2, r3
 800d664:	68fb      	ldr	r3, [r7, #12]
 800d666:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800d668:	68fb      	ldr	r3, [r7, #12]
 800d66a:	2201      	movs	r2, #1
 800d66c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800d670:	68fb      	ldr	r3, [r7, #12]
 800d672:	2200      	movs	r2, #0
 800d674:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800d676:	2301      	movs	r3, #1
 800d678:	e00a      	b.n	800d690 <HAL_SD_WriteBlocks_DMA+0x144>
    }

    /* Enable transfer interrupts */
    __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_TXUNDERR | SDMMC_IT_DATAEND));
 800d67a:	68fb      	ldr	r3, [r7, #12]
 800d67c:	681b      	ldr	r3, [r3, #0]
 800d67e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800d680:	68fb      	ldr	r3, [r7, #12]
 800d682:	681b      	ldr	r3, [r3, #0]
 800d684:	f442 728d 	orr.w	r2, r2, #282	; 0x11a
 800d688:	63da      	str	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800d68a:	2300      	movs	r3, #0
 800d68c:	e000      	b.n	800d690 <HAL_SD_WriteBlocks_DMA+0x144>
  }
  else
  {
    return HAL_BUSY;
 800d68e:	2302      	movs	r3, #2
  }
}
 800d690:	4618      	mov	r0, r3
 800d692:	3730      	adds	r7, #48	; 0x30
 800d694:	46bd      	mov	sp, r7
 800d696:	bd80      	pop	{r7, pc}
 800d698:	1fe00fff 	.word	0x1fe00fff

0800d69c <HAL_SD_IRQHandler>:
  * @brief  This function handles SD card interrupt request.
  * @param  hsd: Pointer to SD handle
  * @retval None
  */
void HAL_SD_IRQHandler(SD_HandleTypeDef *hsd)
{
 800d69c:	b580      	push	{r7, lr}
 800d69e:	b084      	sub	sp, #16
 800d6a0:	af00      	add	r7, sp, #0
 800d6a2:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  uint32_t context = hsd->Context;
 800d6a4:	687b      	ldr	r3, [r7, #4]
 800d6a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d6a8:	60fb      	str	r3, [r7, #12]

  /* Check for SDMMC interrupt flags */
  if((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 800d6aa:	687b      	ldr	r3, [r7, #4]
 800d6ac:	681b      	ldr	r3, [r3, #0]
 800d6ae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d6b0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800d6b4:	2b00      	cmp	r3, #0
 800d6b6:	d008      	beq.n	800d6ca <HAL_SD_IRQHandler+0x2e>
 800d6b8:	68fb      	ldr	r3, [r7, #12]
 800d6ba:	f003 0308 	and.w	r3, r3, #8
 800d6be:	2b00      	cmp	r3, #0
 800d6c0:	d003      	beq.n	800d6ca <HAL_SD_IRQHandler+0x2e>
  {
    SD_Read_IT(hsd);
 800d6c2:	6878      	ldr	r0, [r7, #4]
 800d6c4:	f001 f92a 	bl	800e91c <SD_Read_IT>
 800d6c8:	e19a      	b.n	800da00 <HAL_SD_IRQHandler+0x364>
  }

  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) != RESET)
 800d6ca:	687b      	ldr	r3, [r7, #4]
 800d6cc:	681b      	ldr	r3, [r3, #0]
 800d6ce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d6d0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d6d4:	2b00      	cmp	r3, #0
 800d6d6:	f000 80ac 	beq.w	800d832 <HAL_SD_IRQHandler+0x196>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DATAEND);
 800d6da:	687b      	ldr	r3, [r7, #4]
 800d6dc:	681b      	ldr	r3, [r3, #0]
 800d6de:	f44f 7280 	mov.w	r2, #256	; 0x100
 800d6e2:	639a      	str	r2, [r3, #56]	; 0x38

    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND  | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT |\
 800d6e4:	687b      	ldr	r3, [r7, #4]
 800d6e6:	681b      	ldr	r3, [r3, #0]
 800d6e8:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 800d6ea:	687b      	ldr	r3, [r7, #4]
 800d6ec:	681a      	ldr	r2, [r3, #0]
 800d6ee:	4b9d      	ldr	r3, [pc, #628]	; (800d964 <HAL_SD_IRQHandler+0x2c8>)
 800d6f0:	400b      	ands	r3, r1
 800d6f2:	63d3      	str	r3, [r2, #60]	; 0x3c
                             SDMMC_IT_TXUNDERR | SDMMC_IT_RXOVERR  | SDMMC_IT_TXFIFOHE |\
                             SDMMC_IT_RXFIFOHF);

    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_IDMABTC);
 800d6f4:	687b      	ldr	r3, [r7, #4]
 800d6f6:	681b      	ldr	r3, [r3, #0]
 800d6f8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800d6fa:	687b      	ldr	r3, [r7, #4]
 800d6fc:	681b      	ldr	r3, [r3, #0]
 800d6fe:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 800d702:	63da      	str	r2, [r3, #60]	; 0x3c
    __SDMMC_CMDTRANS_DISABLE( hsd->Instance);
 800d704:	687b      	ldr	r3, [r7, #4]
 800d706:	681b      	ldr	r3, [r3, #0]
 800d708:	68da      	ldr	r2, [r3, #12]
 800d70a:	687b      	ldr	r3, [r7, #4]
 800d70c:	681b      	ldr	r3, [r3, #0]
 800d70e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800d712:	60da      	str	r2, [r3, #12]

    if((context & SD_CONTEXT_IT) != 0U)
 800d714:	68fb      	ldr	r3, [r7, #12]
 800d716:	f003 0308 	and.w	r3, r3, #8
 800d71a:	2b00      	cmp	r3, #0
 800d71c:	d038      	beq.n	800d790 <HAL_SD_IRQHandler+0xf4>
    {
      if(((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 800d71e:	68fb      	ldr	r3, [r7, #12]
 800d720:	f003 0302 	and.w	r3, r3, #2
 800d724:	2b00      	cmp	r3, #0
 800d726:	d104      	bne.n	800d732 <HAL_SD_IRQHandler+0x96>
 800d728:	68fb      	ldr	r3, [r7, #12]
 800d72a:	f003 0320 	and.w	r3, r3, #32
 800d72e:	2b00      	cmp	r3, #0
 800d730:	d011      	beq.n	800d756 <HAL_SD_IRQHandler+0xba>
      {
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800d732:	687b      	ldr	r3, [r7, #4]
 800d734:	681b      	ldr	r3, [r3, #0]
 800d736:	4618      	mov	r0, r3
 800d738:	f003 fe5a 	bl	80113f0 <SDMMC_CmdStopTransfer>
 800d73c:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 800d73e:	68bb      	ldr	r3, [r7, #8]
 800d740:	2b00      	cmp	r3, #0
 800d742:	d008      	beq.n	800d756 <HAL_SD_IRQHandler+0xba>
        {
          hsd->ErrorCode |= errorstate;
 800d744:	687b      	ldr	r3, [r7, #4]
 800d746:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800d748:	68bb      	ldr	r3, [r7, #8]
 800d74a:	431a      	orrs	r2, r3
 800d74c:	687b      	ldr	r3, [r7, #4]
 800d74e:	639a      	str	r2, [r3, #56]	; 0x38
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
          hsd->ErrorCallback(hsd);
#else
          HAL_SD_ErrorCallback(hsd);
 800d750:	6878      	ldr	r0, [r7, #4]
 800d752:	f000 f959 	bl	800da08 <HAL_SD_ErrorCallback>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
        }
      }

      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800d756:	687b      	ldr	r3, [r7, #4]
 800d758:	681b      	ldr	r3, [r3, #0]
 800d75a:	4a83      	ldr	r2, [pc, #524]	; (800d968 <HAL_SD_IRQHandler+0x2cc>)
 800d75c:	639a      	str	r2, [r3, #56]	; 0x38

      hsd->State = HAL_SD_STATE_READY;
 800d75e:	687b      	ldr	r3, [r7, #4]
 800d760:	2201      	movs	r2, #1
 800d762:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800d766:	687b      	ldr	r3, [r7, #4]
 800d768:	2200      	movs	r2, #0
 800d76a:	631a      	str	r2, [r3, #48]	; 0x30
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 800d76c:	68fb      	ldr	r3, [r7, #12]
 800d76e:	f003 0301 	and.w	r3, r3, #1
 800d772:	2b00      	cmp	r3, #0
 800d774:	d104      	bne.n	800d780 <HAL_SD_IRQHandler+0xe4>
 800d776:	68fb      	ldr	r3, [r7, #12]
 800d778:	f003 0302 	and.w	r3, r3, #2
 800d77c:	2b00      	cmp	r3, #0
 800d77e:	d003      	beq.n	800d788 <HAL_SD_IRQHandler+0xec>
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->RxCpltCallback(hsd);
#else
        HAL_SD_RxCpltCallback(hsd);
 800d780:	6878      	ldr	r0, [r7, #4]
 800d782:	f005 fe4b 	bl	801341c <HAL_SD_RxCpltCallback>
 800d786:	e13b      	b.n	800da00 <HAL_SD_IRQHandler+0x364>
      else
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->TxCpltCallback(hsd);
#else
        HAL_SD_TxCpltCallback(hsd);
 800d788:	6878      	ldr	r0, [r7, #4]
 800d78a:	f005 fe3d 	bl	8013408 <HAL_SD_TxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 800d78e:	e137      	b.n	800da00 <HAL_SD_IRQHandler+0x364>
    else if((context & SD_CONTEXT_DMA) != 0U)
 800d790:	68fb      	ldr	r3, [r7, #12]
 800d792:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d796:	2b00      	cmp	r3, #0
 800d798:	f000 8132 	beq.w	800da00 <HAL_SD_IRQHandler+0x364>
      hsd->Instance->DLEN = 0;
 800d79c:	687b      	ldr	r3, [r7, #4]
 800d79e:	681b      	ldr	r3, [r3, #0]
 800d7a0:	2200      	movs	r2, #0
 800d7a2:	629a      	str	r2, [r3, #40]	; 0x28
      hsd->Instance->DCTRL = 0;
 800d7a4:	687b      	ldr	r3, [r7, #4]
 800d7a6:	681b      	ldr	r3, [r3, #0]
 800d7a8:	2200      	movs	r2, #0
 800d7aa:	62da      	str	r2, [r3, #44]	; 0x2c
      hsd->Instance->IDMACTRL = SDMMC_DISABLE_IDMA;
 800d7ac:	687b      	ldr	r3, [r7, #4]
 800d7ae:	681b      	ldr	r3, [r3, #0]
 800d7b0:	2200      	movs	r2, #0
 800d7b2:	651a      	str	r2, [r3, #80]	; 0x50
      if(((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 800d7b4:	68fb      	ldr	r3, [r7, #12]
 800d7b6:	f003 0302 	and.w	r3, r3, #2
 800d7ba:	2b00      	cmp	r3, #0
 800d7bc:	d104      	bne.n	800d7c8 <HAL_SD_IRQHandler+0x12c>
 800d7be:	68fb      	ldr	r3, [r7, #12]
 800d7c0:	f003 0320 	and.w	r3, r3, #32
 800d7c4:	2b00      	cmp	r3, #0
 800d7c6:	d011      	beq.n	800d7ec <HAL_SD_IRQHandler+0x150>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800d7c8:	687b      	ldr	r3, [r7, #4]
 800d7ca:	681b      	ldr	r3, [r3, #0]
 800d7cc:	4618      	mov	r0, r3
 800d7ce:	f003 fe0f 	bl	80113f0 <SDMMC_CmdStopTransfer>
 800d7d2:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 800d7d4:	68bb      	ldr	r3, [r7, #8]
 800d7d6:	2b00      	cmp	r3, #0
 800d7d8:	d008      	beq.n	800d7ec <HAL_SD_IRQHandler+0x150>
          hsd->ErrorCode |= errorstate;
 800d7da:	687b      	ldr	r3, [r7, #4]
 800d7dc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800d7de:	68bb      	ldr	r3, [r7, #8]
 800d7e0:	431a      	orrs	r2, r3
 800d7e2:	687b      	ldr	r3, [r7, #4]
 800d7e4:	639a      	str	r2, [r3, #56]	; 0x38
          HAL_SD_ErrorCallback(hsd);
 800d7e6:	6878      	ldr	r0, [r7, #4]
 800d7e8:	f000 f90e 	bl	800da08 <HAL_SD_ErrorCallback>
      hsd->State = HAL_SD_STATE_READY;
 800d7ec:	687b      	ldr	r3, [r7, #4]
 800d7ee:	2201      	movs	r2, #1
 800d7f0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800d7f4:	687b      	ldr	r3, [r7, #4]
 800d7f6:	2200      	movs	r2, #0
 800d7f8:	631a      	str	r2, [r3, #48]	; 0x30
      if(((context & SD_CONTEXT_WRITE_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 800d7fa:	68fb      	ldr	r3, [r7, #12]
 800d7fc:	f003 0310 	and.w	r3, r3, #16
 800d800:	2b00      	cmp	r3, #0
 800d802:	d104      	bne.n	800d80e <HAL_SD_IRQHandler+0x172>
 800d804:	68fb      	ldr	r3, [r7, #12]
 800d806:	f003 0320 	and.w	r3, r3, #32
 800d80a:	2b00      	cmp	r3, #0
 800d80c:	d002      	beq.n	800d814 <HAL_SD_IRQHandler+0x178>
        HAL_SD_TxCpltCallback(hsd);
 800d80e:	6878      	ldr	r0, [r7, #4]
 800d810:	f005 fdfa 	bl	8013408 <HAL_SD_TxCpltCallback>
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 800d814:	68fb      	ldr	r3, [r7, #12]
 800d816:	f003 0301 	and.w	r3, r3, #1
 800d81a:	2b00      	cmp	r3, #0
 800d81c:	d105      	bne.n	800d82a <HAL_SD_IRQHandler+0x18e>
 800d81e:	68fb      	ldr	r3, [r7, #12]
 800d820:	f003 0302 	and.w	r3, r3, #2
 800d824:	2b00      	cmp	r3, #0
 800d826:	f000 80eb 	beq.w	800da00 <HAL_SD_IRQHandler+0x364>
        HAL_SD_RxCpltCallback(hsd);
 800d82a:	6878      	ldr	r0, [r7, #4]
 800d82c:	f005 fdf6 	bl	801341c <HAL_SD_RxCpltCallback>
}
 800d830:	e0e6      	b.n	800da00 <HAL_SD_IRQHandler+0x364>
  else if((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXFIFOHE) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 800d832:	687b      	ldr	r3, [r7, #4]
 800d834:	681b      	ldr	r3, [r3, #0]
 800d836:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d838:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800d83c:	2b00      	cmp	r3, #0
 800d83e:	d008      	beq.n	800d852 <HAL_SD_IRQHandler+0x1b6>
 800d840:	68fb      	ldr	r3, [r7, #12]
 800d842:	f003 0308 	and.w	r3, r3, #8
 800d846:	2b00      	cmp	r3, #0
 800d848:	d003      	beq.n	800d852 <HAL_SD_IRQHandler+0x1b6>
    SD_Write_IT(hsd);
 800d84a:	6878      	ldr	r0, [r7, #4]
 800d84c:	f001 f8ac 	bl	800e9a8 <SD_Write_IT>
 800d850:	e0d6      	b.n	800da00 <HAL_SD_IRQHandler+0x364>
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_RXOVERR | SDMMC_FLAG_TXUNDERR) != RESET)
 800d852:	687b      	ldr	r3, [r7, #4]
 800d854:	681b      	ldr	r3, [r3, #0]
 800d856:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d858:	f003 033a 	and.w	r3, r3, #58	; 0x3a
 800d85c:	2b00      	cmp	r3, #0
 800d85e:	f000 80a2 	beq.w	800d9a6 <HAL_SD_IRQHandler+0x30a>
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_IT_DCRCFAIL) != RESET)
 800d862:	687b      	ldr	r3, [r7, #4]
 800d864:	681b      	ldr	r3, [r3, #0]
 800d866:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d868:	f003 0302 	and.w	r3, r3, #2
 800d86c:	2b00      	cmp	r3, #0
 800d86e:	d005      	beq.n	800d87c <HAL_SD_IRQHandler+0x1e0>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 800d870:	687b      	ldr	r3, [r7, #4]
 800d872:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d874:	f043 0202 	orr.w	r2, r3, #2
 800d878:	687b      	ldr	r3, [r7, #4]
 800d87a:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_IT_DTIMEOUT) != RESET)
 800d87c:	687b      	ldr	r3, [r7, #4]
 800d87e:	681b      	ldr	r3, [r3, #0]
 800d880:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d882:	f003 0308 	and.w	r3, r3, #8
 800d886:	2b00      	cmp	r3, #0
 800d888:	d005      	beq.n	800d896 <HAL_SD_IRQHandler+0x1fa>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 800d88a:	687b      	ldr	r3, [r7, #4]
 800d88c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d88e:	f043 0208 	orr.w	r2, r3, #8
 800d892:	687b      	ldr	r3, [r7, #4]
 800d894:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_IT_RXOVERR) != RESET)
 800d896:	687b      	ldr	r3, [r7, #4]
 800d898:	681b      	ldr	r3, [r3, #0]
 800d89a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d89c:	f003 0320 	and.w	r3, r3, #32
 800d8a0:	2b00      	cmp	r3, #0
 800d8a2:	d005      	beq.n	800d8b0 <HAL_SD_IRQHandler+0x214>
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 800d8a4:	687b      	ldr	r3, [r7, #4]
 800d8a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d8a8:	f043 0220 	orr.w	r2, r3, #32
 800d8ac:	687b      	ldr	r3, [r7, #4]
 800d8ae:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_IT_TXUNDERR) != RESET)
 800d8b0:	687b      	ldr	r3, [r7, #4]
 800d8b2:	681b      	ldr	r3, [r3, #0]
 800d8b4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d8b6:	f003 0310 	and.w	r3, r3, #16
 800d8ba:	2b00      	cmp	r3, #0
 800d8bc:	d005      	beq.n	800d8ca <HAL_SD_IRQHandler+0x22e>
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 800d8be:	687b      	ldr	r3, [r7, #4]
 800d8c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d8c2:	f043 0210 	orr.w	r2, r3, #16
 800d8c6:	687b      	ldr	r3, [r7, #4]
 800d8c8:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800d8ca:	687b      	ldr	r3, [r7, #4]
 800d8cc:	681b      	ldr	r3, [r3, #0]
 800d8ce:	4a26      	ldr	r2, [pc, #152]	; (800d968 <HAL_SD_IRQHandler+0x2cc>)
 800d8d0:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT|\
 800d8d2:	687b      	ldr	r3, [r7, #4]
 800d8d4:	681b      	ldr	r3, [r3, #0]
 800d8d6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800d8d8:	687b      	ldr	r3, [r7, #4]
 800d8da:	681b      	ldr	r3, [r3, #0]
 800d8dc:	f422 729d 	bic.w	r2, r2, #314	; 0x13a
 800d8e0:	63da      	str	r2, [r3, #60]	; 0x3c
    __SDMMC_CMDTRANS_DISABLE( hsd->Instance);
 800d8e2:	687b      	ldr	r3, [r7, #4]
 800d8e4:	681b      	ldr	r3, [r3, #0]
 800d8e6:	68da      	ldr	r2, [r3, #12]
 800d8e8:	687b      	ldr	r3, [r7, #4]
 800d8ea:	681b      	ldr	r3, [r3, #0]
 800d8ec:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800d8f0:	60da      	str	r2, [r3, #12]
    hsd->Instance->DCTRL |= SDMMC_DCTRL_FIFORST;
 800d8f2:	687b      	ldr	r3, [r7, #4]
 800d8f4:	681b      	ldr	r3, [r3, #0]
 800d8f6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d8f8:	687b      	ldr	r3, [r7, #4]
 800d8fa:	681b      	ldr	r3, [r3, #0]
 800d8fc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800d900:	62da      	str	r2, [r3, #44]	; 0x2c
    hsd->Instance->CMD |= SDMMC_CMD_CMDSTOP;
 800d902:	687b      	ldr	r3, [r7, #4]
 800d904:	681b      	ldr	r3, [r3, #0]
 800d906:	68da      	ldr	r2, [r3, #12]
 800d908:	687b      	ldr	r3, [r7, #4]
 800d90a:	681b      	ldr	r3, [r3, #0]
 800d90c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800d910:	60da      	str	r2, [r3, #12]
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800d912:	687b      	ldr	r3, [r7, #4]
 800d914:	681b      	ldr	r3, [r3, #0]
 800d916:	4618      	mov	r0, r3
 800d918:	f003 fd6a 	bl	80113f0 <SDMMC_CmdStopTransfer>
 800d91c:	4602      	mov	r2, r0
 800d91e:	687b      	ldr	r3, [r7, #4]
 800d920:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d922:	431a      	orrs	r2, r3
 800d924:	687b      	ldr	r3, [r7, #4]
 800d926:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->Instance->CMD &= ~(SDMMC_CMD_CMDSTOP);
 800d928:	687b      	ldr	r3, [r7, #4]
 800d92a:	681b      	ldr	r3, [r3, #0]
 800d92c:	68da      	ldr	r2, [r3, #12]
 800d92e:	687b      	ldr	r3, [r7, #4]
 800d930:	681b      	ldr	r3, [r3, #0]
 800d932:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800d936:	60da      	str	r2, [r3, #12]
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DABORT);
 800d938:	687b      	ldr	r3, [r7, #4]
 800d93a:	681b      	ldr	r3, [r3, #0]
 800d93c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800d940:	639a      	str	r2, [r3, #56]	; 0x38
    if((context & SD_CONTEXT_IT) != 0U)
 800d942:	68fb      	ldr	r3, [r7, #12]
 800d944:	f003 0308 	and.w	r3, r3, #8
 800d948:	2b00      	cmp	r3, #0
 800d94a:	d00f      	beq.n	800d96c <HAL_SD_IRQHandler+0x2d0>
      hsd->State = HAL_SD_STATE_READY;
 800d94c:	687b      	ldr	r3, [r7, #4]
 800d94e:	2201      	movs	r2, #1
 800d950:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800d954:	687b      	ldr	r3, [r7, #4]
 800d956:	2200      	movs	r2, #0
 800d958:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_SD_ErrorCallback(hsd);
 800d95a:	6878      	ldr	r0, [r7, #4]
 800d95c:	f000 f854 	bl	800da08 <HAL_SD_ErrorCallback>
}
 800d960:	e04e      	b.n	800da00 <HAL_SD_IRQHandler+0x364>
 800d962:	bf00      	nop
 800d964:	ffff3ec5 	.word	0xffff3ec5
 800d968:	18000f3a 	.word	0x18000f3a
    else if((context & SD_CONTEXT_DMA) != 0U)
 800d96c:	68fb      	ldr	r3, [r7, #12]
 800d96e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d972:	2b00      	cmp	r3, #0
 800d974:	d044      	beq.n	800da00 <HAL_SD_IRQHandler+0x364>
      if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 800d976:	687b      	ldr	r3, [r7, #4]
 800d978:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d97a:	2b00      	cmp	r3, #0
 800d97c:	d040      	beq.n	800da00 <HAL_SD_IRQHandler+0x364>
        __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_IDMABTC);
 800d97e:	687b      	ldr	r3, [r7, #4]
 800d980:	681b      	ldr	r3, [r3, #0]
 800d982:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800d984:	687b      	ldr	r3, [r7, #4]
 800d986:	681b      	ldr	r3, [r3, #0]
 800d988:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 800d98c:	63da      	str	r2, [r3, #60]	; 0x3c
        hsd->Instance->IDMACTRL = SDMMC_DISABLE_IDMA;
 800d98e:	687b      	ldr	r3, [r7, #4]
 800d990:	681b      	ldr	r3, [r3, #0]
 800d992:	2200      	movs	r2, #0
 800d994:	651a      	str	r2, [r3, #80]	; 0x50
        hsd->State = HAL_SD_STATE_READY;
 800d996:	687b      	ldr	r3, [r7, #4]
 800d998:	2201      	movs	r2, #1
 800d99a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        HAL_SD_ErrorCallback(hsd);
 800d99e:	6878      	ldr	r0, [r7, #4]
 800d9a0:	f000 f832 	bl	800da08 <HAL_SD_ErrorCallback>
}
 800d9a4:	e02c      	b.n	800da00 <HAL_SD_IRQHandler+0x364>
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_IDMABTC) != RESET)
 800d9a6:	687b      	ldr	r3, [r7, #4]
 800d9a8:	681b      	ldr	r3, [r3, #0]
 800d9aa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d9ac:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800d9b0:	2b00      	cmp	r3, #0
 800d9b2:	d025      	beq.n	800da00 <HAL_SD_IRQHandler+0x364>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_IDMABTC);
 800d9b4:	687b      	ldr	r3, [r7, #4]
 800d9b6:	681b      	ldr	r3, [r3, #0]
 800d9b8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d9bc:	639a      	str	r2, [r3, #56]	; 0x38
    if(READ_BIT(hsd->Instance->IDMACTRL, SDMMC_IDMA_IDMABACT) == 0U)
 800d9be:	687b      	ldr	r3, [r7, #4]
 800d9c0:	681b      	ldr	r3, [r3, #0]
 800d9c2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d9c4:	f003 0304 	and.w	r3, r3, #4
 800d9c8:	2b00      	cmp	r3, #0
 800d9ca:	d10c      	bne.n	800d9e6 <HAL_SD_IRQHandler+0x34a>
      if((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 800d9cc:	68fb      	ldr	r3, [r7, #12]
 800d9ce:	f003 0320 	and.w	r3, r3, #32
 800d9d2:	2b00      	cmp	r3, #0
 800d9d4:	d003      	beq.n	800d9de <HAL_SD_IRQHandler+0x342>
        HAL_SDEx_Write_DMADoubleBuf1CpltCallback(hsd);
 800d9d6:	6878      	ldr	r0, [r7, #4]
 800d9d8:	f001 f84e 	bl	800ea78 <HAL_SDEx_Write_DMADoubleBuf1CpltCallback>
}
 800d9dc:	e010      	b.n	800da00 <HAL_SD_IRQHandler+0x364>
        HAL_SDEx_Read_DMADoubleBuf1CpltCallback(hsd);
 800d9de:	6878      	ldr	r0, [r7, #4]
 800d9e0:	f001 f836 	bl	800ea50 <HAL_SDEx_Read_DMADoubleBuf1CpltCallback>
}
 800d9e4:	e00c      	b.n	800da00 <HAL_SD_IRQHandler+0x364>
      if((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 800d9e6:	68fb      	ldr	r3, [r7, #12]
 800d9e8:	f003 0320 	and.w	r3, r3, #32
 800d9ec:	2b00      	cmp	r3, #0
 800d9ee:	d003      	beq.n	800d9f8 <HAL_SD_IRQHandler+0x35c>
        HAL_SDEx_Write_DMADoubleBuf0CpltCallback(hsd);
 800d9f0:	6878      	ldr	r0, [r7, #4]
 800d9f2:	f001 f837 	bl	800ea64 <HAL_SDEx_Write_DMADoubleBuf0CpltCallback>
}
 800d9f6:	e003      	b.n	800da00 <HAL_SD_IRQHandler+0x364>
        HAL_SDEx_Read_DMADoubleBuf0CpltCallback(hsd);
 800d9f8:	6878      	ldr	r0, [r7, #4]
 800d9fa:	f001 f81f 	bl	800ea3c <HAL_SDEx_Read_DMADoubleBuf0CpltCallback>
}
 800d9fe:	e7ff      	b.n	800da00 <HAL_SD_IRQHandler+0x364>
 800da00:	bf00      	nop
 800da02:	3710      	adds	r7, #16
 800da04:	46bd      	mov	sp, r7
 800da06:	bd80      	pop	{r7, pc}

0800da08 <HAL_SD_ErrorCallback>:
  * @brief SD error callbacks
  * @param hsd: Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_ErrorCallback(SD_HandleTypeDef *hsd)
{
 800da08:	b480      	push	{r7}
 800da0a:	b083      	sub	sp, #12
 800da0c:	af00      	add	r7, sp, #0
 800da0e:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_ErrorCallback can be implemented in the user file
   */
}
 800da10:	bf00      	nop
 800da12:	370c      	adds	r7, #12
 800da14:	46bd      	mov	sp, r7
 800da16:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da1a:	4770      	bx	lr

0800da1c <HAL_SD_DriveTransceiver_1_8V_Callback>:
  * @brief  Enable/Disable the SD Transceiver 1.8V Mode Callback.
  * @param  status: Voltage Switch State
  * @retval None
  */
__weak  void HAL_SD_DriveTransceiver_1_8V_Callback(FlagStatus status)
{
 800da1c:	b480      	push	{r7}
 800da1e:	b083      	sub	sp, #12
 800da20:	af00      	add	r7, sp, #0
 800da22:	4603      	mov	r3, r0
 800da24:	71fb      	strb	r3, [r7, #7]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(status);
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_EnableTransceiver could be implemented in the user file
   */
}
 800da26:	bf00      	nop
 800da28:	370c      	adds	r7, #12
 800da2a:	46bd      	mov	sp, r7
 800da2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da30:	4770      	bx	lr
	...

0800da34 <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 800da34:	b480      	push	{r7}
 800da36:	b083      	sub	sp, #12
 800da38:	af00      	add	r7, sp, #0
 800da3a:	6078      	str	r0, [r7, #4]
 800da3c:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 800da3e:	687b      	ldr	r3, [r7, #4]
 800da40:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800da42:	0f9b      	lsrs	r3, r3, #30
 800da44:	b2da      	uxtb	r2, r3
 800da46:	683b      	ldr	r3, [r7, #0]
 800da48:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 800da4a:	687b      	ldr	r3, [r7, #4]
 800da4c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800da4e:	0e9b      	lsrs	r3, r3, #26
 800da50:	b2db      	uxtb	r3, r3
 800da52:	f003 030f 	and.w	r3, r3, #15
 800da56:	b2da      	uxtb	r2, r3
 800da58:	683b      	ldr	r3, [r7, #0]
 800da5a:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 800da5c:	687b      	ldr	r3, [r7, #4]
 800da5e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800da60:	0e1b      	lsrs	r3, r3, #24
 800da62:	b2db      	uxtb	r3, r3
 800da64:	f003 0303 	and.w	r3, r3, #3
 800da68:	b2da      	uxtb	r2, r3
 800da6a:	683b      	ldr	r3, [r7, #0]
 800da6c:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 800da6e:	687b      	ldr	r3, [r7, #4]
 800da70:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800da72:	0c1b      	lsrs	r3, r3, #16
 800da74:	b2da      	uxtb	r2, r3
 800da76:	683b      	ldr	r3, [r7, #0]
 800da78:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 800da7a:	687b      	ldr	r3, [r7, #4]
 800da7c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800da7e:	0a1b      	lsrs	r3, r3, #8
 800da80:	b2da      	uxtb	r2, r3
 800da82:	683b      	ldr	r3, [r7, #0]
 800da84:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 800da86:	687b      	ldr	r3, [r7, #4]
 800da88:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800da8a:	b2da      	uxtb	r2, r3
 800da8c:	683b      	ldr	r3, [r7, #0]
 800da8e:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 800da90:	687b      	ldr	r3, [r7, #4]
 800da92:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800da94:	0d1b      	lsrs	r3, r3, #20
 800da96:	b29a      	uxth	r2, r3
 800da98:	683b      	ldr	r3, [r7, #0]
 800da9a:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 800da9c:	687b      	ldr	r3, [r7, #4]
 800da9e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800daa0:	0c1b      	lsrs	r3, r3, #16
 800daa2:	b2db      	uxtb	r3, r3
 800daa4:	f003 030f 	and.w	r3, r3, #15
 800daa8:	b2da      	uxtb	r2, r3
 800daaa:	683b      	ldr	r3, [r7, #0]
 800daac:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 800daae:	687b      	ldr	r3, [r7, #4]
 800dab0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800dab2:	0bdb      	lsrs	r3, r3, #15
 800dab4:	b2db      	uxtb	r3, r3
 800dab6:	f003 0301 	and.w	r3, r3, #1
 800daba:	b2da      	uxtb	r2, r3
 800dabc:	683b      	ldr	r3, [r7, #0]
 800dabe:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 800dac0:	687b      	ldr	r3, [r7, #4]
 800dac2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800dac4:	0b9b      	lsrs	r3, r3, #14
 800dac6:	b2db      	uxtb	r3, r3
 800dac8:	f003 0301 	and.w	r3, r3, #1
 800dacc:	b2da      	uxtb	r2, r3
 800dace:	683b      	ldr	r3, [r7, #0]
 800dad0:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 800dad2:	687b      	ldr	r3, [r7, #4]
 800dad4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800dad6:	0b5b      	lsrs	r3, r3, #13
 800dad8:	b2db      	uxtb	r3, r3
 800dada:	f003 0301 	and.w	r3, r3, #1
 800dade:	b2da      	uxtb	r2, r3
 800dae0:	683b      	ldr	r3, [r7, #0]
 800dae2:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 800dae4:	687b      	ldr	r3, [r7, #4]
 800dae6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800dae8:	0b1b      	lsrs	r3, r3, #12
 800daea:	b2db      	uxtb	r3, r3
 800daec:	f003 0301 	and.w	r3, r3, #1
 800daf0:	b2da      	uxtb	r2, r3
 800daf2:	683b      	ldr	r3, [r7, #0]
 800daf4:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 800daf6:	683b      	ldr	r3, [r7, #0]
 800daf8:	2200      	movs	r2, #0
 800dafa:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 800dafc:	687b      	ldr	r3, [r7, #4]
 800dafe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800db00:	2b00      	cmp	r3, #0
 800db02:	d163      	bne.n	800dbcc <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 800db04:	687b      	ldr	r3, [r7, #4]
 800db06:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800db08:	009a      	lsls	r2, r3, #2
 800db0a:	f640 73fc 	movw	r3, #4092	; 0xffc
 800db0e:	4013      	ands	r3, r2
 800db10:	687a      	ldr	r2, [r7, #4]
 800db12:	6e92      	ldr	r2, [r2, #104]	; 0x68
 800db14:	0f92      	lsrs	r2, r2, #30
 800db16:	431a      	orrs	r2, r3
 800db18:	683b      	ldr	r3, [r7, #0]
 800db1a:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 800db1c:	687b      	ldr	r3, [r7, #4]
 800db1e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800db20:	0edb      	lsrs	r3, r3, #27
 800db22:	b2db      	uxtb	r3, r3
 800db24:	f003 0307 	and.w	r3, r3, #7
 800db28:	b2da      	uxtb	r2, r3
 800db2a:	683b      	ldr	r3, [r7, #0]
 800db2c:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 800db2e:	687b      	ldr	r3, [r7, #4]
 800db30:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800db32:	0e1b      	lsrs	r3, r3, #24
 800db34:	b2db      	uxtb	r3, r3
 800db36:	f003 0307 	and.w	r3, r3, #7
 800db3a:	b2da      	uxtb	r2, r3
 800db3c:	683b      	ldr	r3, [r7, #0]
 800db3e:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 800db40:	687b      	ldr	r3, [r7, #4]
 800db42:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800db44:	0d5b      	lsrs	r3, r3, #21
 800db46:	b2db      	uxtb	r3, r3
 800db48:	f003 0307 	and.w	r3, r3, #7
 800db4c:	b2da      	uxtb	r2, r3
 800db4e:	683b      	ldr	r3, [r7, #0]
 800db50:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 800db52:	687b      	ldr	r3, [r7, #4]
 800db54:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800db56:	0c9b      	lsrs	r3, r3, #18
 800db58:	b2db      	uxtb	r3, r3
 800db5a:	f003 0307 	and.w	r3, r3, #7
 800db5e:	b2da      	uxtb	r2, r3
 800db60:	683b      	ldr	r3, [r7, #0]
 800db62:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 800db64:	687b      	ldr	r3, [r7, #4]
 800db66:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800db68:	0bdb      	lsrs	r3, r3, #15
 800db6a:	b2db      	uxtb	r3, r3
 800db6c:	f003 0307 	and.w	r3, r3, #7
 800db70:	b2da      	uxtb	r2, r3
 800db72:	683b      	ldr	r3, [r7, #0]
 800db74:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 800db76:	683b      	ldr	r3, [r7, #0]
 800db78:	691b      	ldr	r3, [r3, #16]
 800db7a:	1c5a      	adds	r2, r3, #1
 800db7c:	687b      	ldr	r3, [r7, #4]
 800db7e:	64da      	str	r2, [r3, #76]	; 0x4c
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 800db80:	683b      	ldr	r3, [r7, #0]
 800db82:	7e1b      	ldrb	r3, [r3, #24]
 800db84:	b2db      	uxtb	r3, r3
 800db86:	f003 0307 	and.w	r3, r3, #7
 800db8a:	3302      	adds	r3, #2
 800db8c:	2201      	movs	r2, #1
 800db8e:	fa02 f303 	lsl.w	r3, r2, r3
 800db92:	687a      	ldr	r2, [r7, #4]
 800db94:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 800db96:	fb02 f203 	mul.w	r2, r2, r3
 800db9a:	687b      	ldr	r3, [r7, #4]
 800db9c:	64da      	str	r2, [r3, #76]	; 0x4c
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 800db9e:	683b      	ldr	r3, [r7, #0]
 800dba0:	7a1b      	ldrb	r3, [r3, #8]
 800dba2:	b2db      	uxtb	r3, r3
 800dba4:	f003 030f 	and.w	r3, r3, #15
 800dba8:	2201      	movs	r2, #1
 800dbaa:	409a      	lsls	r2, r3
 800dbac:	687b      	ldr	r3, [r7, #4]
 800dbae:	651a      	str	r2, [r3, #80]	; 0x50

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 800dbb0:	687b      	ldr	r3, [r7, #4]
 800dbb2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800dbb4:	687a      	ldr	r2, [r7, #4]
 800dbb6:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800dbb8:	0a52      	lsrs	r2, r2, #9
 800dbba:	fb02 f203 	mul.w	r2, r2, r3
 800dbbe:	687b      	ldr	r3, [r7, #4]
 800dbc0:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.LogBlockSize = 512U;
 800dbc2:	687b      	ldr	r3, [r7, #4]
 800dbc4:	f44f 7200 	mov.w	r2, #512	; 0x200
 800dbc8:	659a      	str	r2, [r3, #88]	; 0x58
 800dbca:	e031      	b.n	800dc30 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 800dbcc:	687b      	ldr	r3, [r7, #4]
 800dbce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800dbd0:	2b01      	cmp	r3, #1
 800dbd2:	d11d      	bne.n	800dc10 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 800dbd4:	687b      	ldr	r3, [r7, #4]
 800dbd6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800dbd8:	041b      	lsls	r3, r3, #16
 800dbda:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 800dbde:	687b      	ldr	r3, [r7, #4]
 800dbe0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800dbe2:	0c1b      	lsrs	r3, r3, #16
 800dbe4:	431a      	orrs	r2, r3
 800dbe6:	683b      	ldr	r3, [r7, #0]
 800dbe8:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 800dbea:	683b      	ldr	r3, [r7, #0]
 800dbec:	691b      	ldr	r3, [r3, #16]
 800dbee:	3301      	adds	r3, #1
 800dbf0:	029a      	lsls	r2, r3, #10
 800dbf2:	687b      	ldr	r3, [r7, #4]
 800dbf4:	64da      	str	r2, [r3, #76]	; 0x4c
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 800dbf6:	687b      	ldr	r3, [r7, #4]
 800dbf8:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800dbfa:	687b      	ldr	r3, [r7, #4]
 800dbfc:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockSize = 512U;
 800dbfe:	687b      	ldr	r3, [r7, #4]
 800dc00:	f44f 7200 	mov.w	r2, #512	; 0x200
 800dc04:	651a      	str	r2, [r3, #80]	; 0x50
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 800dc06:	687b      	ldr	r3, [r7, #4]
 800dc08:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800dc0a:	687b      	ldr	r3, [r7, #4]
 800dc0c:	659a      	str	r2, [r3, #88]	; 0x58
 800dc0e:	e00f      	b.n	800dc30 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800dc10:	687b      	ldr	r3, [r7, #4]
 800dc12:	681b      	ldr	r3, [r3, #0]
 800dc14:	4a58      	ldr	r2, [pc, #352]	; (800dd78 <HAL_SD_GetCardCSD+0x344>)
 800dc16:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800dc18:	687b      	ldr	r3, [r7, #4]
 800dc1a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dc1c:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800dc20:	687b      	ldr	r3, [r7, #4]
 800dc22:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 800dc24:	687b      	ldr	r3, [r7, #4]
 800dc26:	2201      	movs	r2, #1
 800dc28:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 800dc2c:	2301      	movs	r3, #1
 800dc2e:	e09d      	b.n	800dd6c <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 800dc30:	687b      	ldr	r3, [r7, #4]
 800dc32:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800dc34:	0b9b      	lsrs	r3, r3, #14
 800dc36:	b2db      	uxtb	r3, r3
 800dc38:	f003 0301 	and.w	r3, r3, #1
 800dc3c:	b2da      	uxtb	r2, r3
 800dc3e:	683b      	ldr	r3, [r7, #0]
 800dc40:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 800dc42:	687b      	ldr	r3, [r7, #4]
 800dc44:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800dc46:	09db      	lsrs	r3, r3, #7
 800dc48:	b2db      	uxtb	r3, r3
 800dc4a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800dc4e:	b2da      	uxtb	r2, r3
 800dc50:	683b      	ldr	r3, [r7, #0]
 800dc52:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 800dc54:	687b      	ldr	r3, [r7, #4]
 800dc56:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800dc58:	b2db      	uxtb	r3, r3
 800dc5a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800dc5e:	b2da      	uxtb	r2, r3
 800dc60:	683b      	ldr	r3, [r7, #0]
 800dc62:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 800dc64:	687b      	ldr	r3, [r7, #4]
 800dc66:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800dc68:	0fdb      	lsrs	r3, r3, #31
 800dc6a:	b2da      	uxtb	r2, r3
 800dc6c:	683b      	ldr	r3, [r7, #0]
 800dc6e:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 800dc70:	687b      	ldr	r3, [r7, #4]
 800dc72:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800dc74:	0f5b      	lsrs	r3, r3, #29
 800dc76:	b2db      	uxtb	r3, r3
 800dc78:	f003 0303 	and.w	r3, r3, #3
 800dc7c:	b2da      	uxtb	r2, r3
 800dc7e:	683b      	ldr	r3, [r7, #0]
 800dc80:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 800dc82:	687b      	ldr	r3, [r7, #4]
 800dc84:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800dc86:	0e9b      	lsrs	r3, r3, #26
 800dc88:	b2db      	uxtb	r3, r3
 800dc8a:	f003 0307 	and.w	r3, r3, #7
 800dc8e:	b2da      	uxtb	r2, r3
 800dc90:	683b      	ldr	r3, [r7, #0]
 800dc92:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 800dc94:	687b      	ldr	r3, [r7, #4]
 800dc96:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800dc98:	0d9b      	lsrs	r3, r3, #22
 800dc9a:	b2db      	uxtb	r3, r3
 800dc9c:	f003 030f 	and.w	r3, r3, #15
 800dca0:	b2da      	uxtb	r2, r3
 800dca2:	683b      	ldr	r3, [r7, #0]
 800dca4:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 800dca6:	687b      	ldr	r3, [r7, #4]
 800dca8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800dcaa:	0d5b      	lsrs	r3, r3, #21
 800dcac:	b2db      	uxtb	r3, r3
 800dcae:	f003 0301 	and.w	r3, r3, #1
 800dcb2:	b2da      	uxtb	r2, r3
 800dcb4:	683b      	ldr	r3, [r7, #0]
 800dcb6:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 800dcba:	683b      	ldr	r3, [r7, #0]
 800dcbc:	2200      	movs	r2, #0
 800dcbe:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 800dcc2:	687b      	ldr	r3, [r7, #4]
 800dcc4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800dcc6:	0c1b      	lsrs	r3, r3, #16
 800dcc8:	b2db      	uxtb	r3, r3
 800dcca:	f003 0301 	and.w	r3, r3, #1
 800dcce:	b2da      	uxtb	r2, r3
 800dcd0:	683b      	ldr	r3, [r7, #0]
 800dcd2:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 800dcd6:	687b      	ldr	r3, [r7, #4]
 800dcd8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800dcda:	0bdb      	lsrs	r3, r3, #15
 800dcdc:	b2db      	uxtb	r3, r3
 800dcde:	f003 0301 	and.w	r3, r3, #1
 800dce2:	b2da      	uxtb	r2, r3
 800dce4:	683b      	ldr	r3, [r7, #0]
 800dce6:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 800dcea:	687b      	ldr	r3, [r7, #4]
 800dcec:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800dcee:	0b9b      	lsrs	r3, r3, #14
 800dcf0:	b2db      	uxtb	r3, r3
 800dcf2:	f003 0301 	and.w	r3, r3, #1
 800dcf6:	b2da      	uxtb	r2, r3
 800dcf8:	683b      	ldr	r3, [r7, #0]
 800dcfa:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 800dcfe:	687b      	ldr	r3, [r7, #4]
 800dd00:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800dd02:	0b5b      	lsrs	r3, r3, #13
 800dd04:	b2db      	uxtb	r3, r3
 800dd06:	f003 0301 	and.w	r3, r3, #1
 800dd0a:	b2da      	uxtb	r2, r3
 800dd0c:	683b      	ldr	r3, [r7, #0]
 800dd0e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 800dd12:	687b      	ldr	r3, [r7, #4]
 800dd14:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800dd16:	0b1b      	lsrs	r3, r3, #12
 800dd18:	b2db      	uxtb	r3, r3
 800dd1a:	f003 0301 	and.w	r3, r3, #1
 800dd1e:	b2da      	uxtb	r2, r3
 800dd20:	683b      	ldr	r3, [r7, #0]
 800dd22:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 800dd26:	687b      	ldr	r3, [r7, #4]
 800dd28:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800dd2a:	0a9b      	lsrs	r3, r3, #10
 800dd2c:	b2db      	uxtb	r3, r3
 800dd2e:	f003 0303 	and.w	r3, r3, #3
 800dd32:	b2da      	uxtb	r2, r3
 800dd34:	683b      	ldr	r3, [r7, #0]
 800dd36:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 800dd3a:	687b      	ldr	r3, [r7, #4]
 800dd3c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800dd3e:	0a1b      	lsrs	r3, r3, #8
 800dd40:	b2db      	uxtb	r3, r3
 800dd42:	f003 0303 	and.w	r3, r3, #3
 800dd46:	b2da      	uxtb	r2, r3
 800dd48:	683b      	ldr	r3, [r7, #0]
 800dd4a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 800dd4e:	687b      	ldr	r3, [r7, #4]
 800dd50:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800dd52:	085b      	lsrs	r3, r3, #1
 800dd54:	b2db      	uxtb	r3, r3
 800dd56:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800dd5a:	b2da      	uxtb	r2, r3
 800dd5c:	683b      	ldr	r3, [r7, #0]
 800dd5e:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 800dd62:	683b      	ldr	r3, [r7, #0]
 800dd64:	2201      	movs	r2, #1
 800dd66:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 800dd6a:	2300      	movs	r3, #0
}
 800dd6c:	4618      	mov	r0, r3
 800dd6e:	370c      	adds	r7, #12
 800dd70:	46bd      	mov	sp, r7
 800dd72:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd76:	4770      	bx	lr
 800dd78:	1fe00fff 	.word	0x1fe00fff

0800dd7c <HAL_SD_GetCardStatus>:
  * @param  pStatus: Pointer to the HAL_SD_CardStatusTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardStatus(SD_HandleTypeDef *hsd, HAL_SD_CardStatusTypeDef *pStatus)
{
 800dd7c:	b580      	push	{r7, lr}
 800dd7e:	b094      	sub	sp, #80	; 0x50
 800dd80:	af00      	add	r7, sp, #0
 800dd82:	6078      	str	r0, [r7, #4]
 800dd84:	6039      	str	r1, [r7, #0]
  uint32_t sd_status[16];
  uint32_t errorstate;
  HAL_StatusTypeDef status = HAL_OK;
 800dd86:	2300      	movs	r3, #0
 800dd88:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f

  errorstate = SD_SendSDStatus(hsd, sd_status);
 800dd8c:	f107 0308 	add.w	r3, r7, #8
 800dd90:	4619      	mov	r1, r3
 800dd92:	6878      	ldr	r0, [r7, #4]
 800dd94:	f000 fb64 	bl	800e460 <SD_SendSDStatus>
 800dd98:	64b8      	str	r0, [r7, #72]	; 0x48
  if(errorstate != HAL_SD_ERROR_NONE)
 800dd9a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800dd9c:	2b00      	cmp	r3, #0
 800dd9e:	d011      	beq.n	800ddc4 <HAL_SD_GetCardStatus+0x48>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800dda0:	687b      	ldr	r3, [r7, #4]
 800dda2:	681b      	ldr	r3, [r3, #0]
 800dda4:	4a4f      	ldr	r2, [pc, #316]	; (800dee4 <HAL_SD_GetCardStatus+0x168>)
 800dda6:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 800dda8:	687b      	ldr	r3, [r7, #4]
 800ddaa:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800ddac:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ddae:	431a      	orrs	r2, r3
 800ddb0:	687b      	ldr	r3, [r7, #4]
 800ddb2:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 800ddb4:	687b      	ldr	r3, [r7, #4]
 800ddb6:	2201      	movs	r2, #1
 800ddb8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    status = HAL_ERROR;
 800ddbc:	2301      	movs	r3, #1
 800ddbe:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 800ddc2:	e070      	b.n	800dea6 <HAL_SD_GetCardStatus+0x12a>
  }
  else
  {
    pStatus->DataBusWidth = (uint8_t)((sd_status[0] & 0xC0U) >> 6U);
 800ddc4:	68bb      	ldr	r3, [r7, #8]
 800ddc6:	099b      	lsrs	r3, r3, #6
 800ddc8:	b2db      	uxtb	r3, r3
 800ddca:	f003 0303 	and.w	r3, r3, #3
 800ddce:	b2da      	uxtb	r2, r3
 800ddd0:	683b      	ldr	r3, [r7, #0]
 800ddd2:	701a      	strb	r2, [r3, #0]

    pStatus->SecuredMode = (uint8_t)((sd_status[0] & 0x20U) >> 5U);
 800ddd4:	68bb      	ldr	r3, [r7, #8]
 800ddd6:	095b      	lsrs	r3, r3, #5
 800ddd8:	b2db      	uxtb	r3, r3
 800ddda:	f003 0301 	and.w	r3, r3, #1
 800ddde:	b2da      	uxtb	r2, r3
 800dde0:	683b      	ldr	r3, [r7, #0]
 800dde2:	705a      	strb	r2, [r3, #1]

    pStatus->CardType = (uint16_t)(((sd_status[0] & 0x00FF0000U) >> 8U) | ((sd_status[0] & 0xFF000000U) >> 24U));
 800dde4:	68bb      	ldr	r3, [r7, #8]
 800dde6:	0a1b      	lsrs	r3, r3, #8
 800dde8:	b29b      	uxth	r3, r3
 800ddea:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800ddee:	b29a      	uxth	r2, r3
 800ddf0:	68bb      	ldr	r3, [r7, #8]
 800ddf2:	0e1b      	lsrs	r3, r3, #24
 800ddf4:	b29b      	uxth	r3, r3
 800ddf6:	4313      	orrs	r3, r2
 800ddf8:	b29a      	uxth	r2, r3
 800ddfa:	683b      	ldr	r3, [r7, #0]
 800ddfc:	805a      	strh	r2, [r3, #2]

    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 800ddfe:	68fb      	ldr	r3, [r7, #12]
 800de00:	061a      	lsls	r2, r3, #24
 800de02:	68fb      	ldr	r3, [r7, #12]
 800de04:	021b      	lsls	r3, r3, #8
 800de06:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800de0a:	431a      	orrs	r2, r3
                                  ((sd_status[1] & 0xFF0000U) >> 8U) | ((sd_status[1] & 0xFF000000U) >> 24U));
 800de0c:	68fb      	ldr	r3, [r7, #12]
 800de0e:	0a1b      	lsrs	r3, r3, #8
 800de10:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 800de14:	431a      	orrs	r2, r3
                                  ((sd_status[1] & 0xFF0000U) >> 8U) | ((sd_status[1] & 0xFF000000U) >> 24U));
 800de16:	68fb      	ldr	r3, [r7, #12]
 800de18:	0e1b      	lsrs	r3, r3, #24
 800de1a:	431a      	orrs	r2, r3
    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 800de1c:	683b      	ldr	r3, [r7, #0]
 800de1e:	605a      	str	r2, [r3, #4]

    pStatus->SpeedClass = (uint8_t)(sd_status[2] & 0xFFU);
 800de20:	693b      	ldr	r3, [r7, #16]
 800de22:	b2da      	uxtb	r2, r3
 800de24:	683b      	ldr	r3, [r7, #0]
 800de26:	721a      	strb	r2, [r3, #8]

    pStatus->PerformanceMove = (uint8_t)((sd_status[2] & 0xFF00U) >> 8U);
 800de28:	693b      	ldr	r3, [r7, #16]
 800de2a:	0a1b      	lsrs	r3, r3, #8
 800de2c:	b2da      	uxtb	r2, r3
 800de2e:	683b      	ldr	r3, [r7, #0]
 800de30:	725a      	strb	r2, [r3, #9]

    pStatus->AllocationUnitSize = (uint8_t)((sd_status[2] & 0xF00000U) >> 20U);
 800de32:	693b      	ldr	r3, [r7, #16]
 800de34:	0d1b      	lsrs	r3, r3, #20
 800de36:	b2db      	uxtb	r3, r3
 800de38:	f003 030f 	and.w	r3, r3, #15
 800de3c:	b2da      	uxtb	r2, r3
 800de3e:	683b      	ldr	r3, [r7, #0]
 800de40:	729a      	strb	r2, [r3, #10]

    pStatus->EraseSize = (uint16_t)(((sd_status[2] & 0xFF000000U) >> 16U) | (sd_status[3] & 0xFFU));
 800de42:	693b      	ldr	r3, [r7, #16]
 800de44:	0c1b      	lsrs	r3, r3, #16
 800de46:	b29b      	uxth	r3, r3
 800de48:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800de4c:	b29a      	uxth	r2, r3
 800de4e:	697b      	ldr	r3, [r7, #20]
 800de50:	b29b      	uxth	r3, r3
 800de52:	b2db      	uxtb	r3, r3
 800de54:	b29b      	uxth	r3, r3
 800de56:	4313      	orrs	r3, r2
 800de58:	b29a      	uxth	r2, r3
 800de5a:	683b      	ldr	r3, [r7, #0]
 800de5c:	819a      	strh	r2, [r3, #12]

    pStatus->EraseTimeout = (uint8_t)((sd_status[3] & 0xFC00U) >> 10U);
 800de5e:	697b      	ldr	r3, [r7, #20]
 800de60:	0a9b      	lsrs	r3, r3, #10
 800de62:	b2db      	uxtb	r3, r3
 800de64:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800de68:	b2da      	uxtb	r2, r3
 800de6a:	683b      	ldr	r3, [r7, #0]
 800de6c:	739a      	strb	r2, [r3, #14]

    pStatus->EraseOffset = (uint8_t)((sd_status[3] & 0x0300U) >> 8U);
 800de6e:	697b      	ldr	r3, [r7, #20]
 800de70:	0a1b      	lsrs	r3, r3, #8
 800de72:	b2db      	uxtb	r3, r3
 800de74:	f003 0303 	and.w	r3, r3, #3
 800de78:	b2da      	uxtb	r2, r3
 800de7a:	683b      	ldr	r3, [r7, #0]
 800de7c:	73da      	strb	r2, [r3, #15]

    pStatus->UhsSpeedGrade = (uint8_t)((sd_status[3] & 0x00F0U) >> 4U);
 800de7e:	697b      	ldr	r3, [r7, #20]
 800de80:	091b      	lsrs	r3, r3, #4
 800de82:	b2db      	uxtb	r3, r3
 800de84:	f003 030f 	and.w	r3, r3, #15
 800de88:	b2da      	uxtb	r2, r3
 800de8a:	683b      	ldr	r3, [r7, #0]
 800de8c:	741a      	strb	r2, [r3, #16]
    pStatus->UhsAllocationUnitSize = (uint8_t)(sd_status[3] & 0x000FU) ;
 800de8e:	697b      	ldr	r3, [r7, #20]
 800de90:	b2db      	uxtb	r3, r3
 800de92:	f003 030f 	and.w	r3, r3, #15
 800de96:	b2da      	uxtb	r2, r3
 800de98:	683b      	ldr	r3, [r7, #0]
 800de9a:	745a      	strb	r2, [r3, #17]
    pStatus->VideoSpeedClass = (uint8_t)((sd_status[4] & 0xFF000000U) >> 24U);
 800de9c:	69bb      	ldr	r3, [r7, #24]
 800de9e:	0e1b      	lsrs	r3, r3, #24
 800dea0:	b2da      	uxtb	r2, r3
 800dea2:	683b      	ldr	r3, [r7, #0]
 800dea4:	749a      	strb	r2, [r3, #18]
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800dea6:	687b      	ldr	r3, [r7, #4]
 800dea8:	681b      	ldr	r3, [r3, #0]
 800deaa:	f44f 7100 	mov.w	r1, #512	; 0x200
 800deae:	4618      	mov	r0, r3
 800deb0:	f003 f9ee 	bl	8011290 <SDMMC_CmdBlockLength>
 800deb4:	64b8      	str	r0, [r7, #72]	; 0x48
  if(errorstate != HAL_SD_ERROR_NONE)
 800deb6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800deb8:	2b00      	cmp	r3, #0
 800deba:	d00d      	beq.n	800ded8 <HAL_SD_GetCardStatus+0x15c>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800debc:	687b      	ldr	r3, [r7, #4]
 800debe:	681b      	ldr	r3, [r3, #0]
 800dec0:	4a08      	ldr	r2, [pc, #32]	; (800dee4 <HAL_SD_GetCardStatus+0x168>)
 800dec2:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode = errorstate;
 800dec4:	687b      	ldr	r3, [r7, #4]
 800dec6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800dec8:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 800deca:	687b      	ldr	r3, [r7, #4]
 800decc:	2201      	movs	r2, #1
 800dece:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    status = HAL_ERROR;
 800ded2:	2301      	movs	r3, #1
 800ded4:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
  }

  return status;
 800ded8:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
}
 800dedc:	4618      	mov	r0, r3
 800dede:	3750      	adds	r7, #80	; 0x50
 800dee0:	46bd      	mov	sp, r7
 800dee2:	bd80      	pop	{r7, pc}
 800dee4:	1fe00fff 	.word	0x1fe00fff

0800dee8 <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 800dee8:	b480      	push	{r7}
 800deea:	b083      	sub	sp, #12
 800deec:	af00      	add	r7, sp, #0
 800deee:	6078      	str	r0, [r7, #4]
 800def0:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 800def2:	687b      	ldr	r3, [r7, #4]
 800def4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800def6:	683b      	ldr	r3, [r7, #0]
 800def8:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 800defa:	687b      	ldr	r3, [r7, #4]
 800defc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800defe:	683b      	ldr	r3, [r7, #0]
 800df00:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 800df02:	687b      	ldr	r3, [r7, #4]
 800df04:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800df06:	683b      	ldr	r3, [r7, #0]
 800df08:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 800df0a:	687b      	ldr	r3, [r7, #4]
 800df0c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800df0e:	683b      	ldr	r3, [r7, #0]
 800df10:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 800df12:	687b      	ldr	r3, [r7, #4]
 800df14:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800df16:	683b      	ldr	r3, [r7, #0]
 800df18:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 800df1a:	687b      	ldr	r3, [r7, #4]
 800df1c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800df1e:	683b      	ldr	r3, [r7, #0]
 800df20:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 800df22:	687b      	ldr	r3, [r7, #4]
 800df24:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800df26:	683b      	ldr	r3, [r7, #0]
 800df28:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 800df2a:	687b      	ldr	r3, [r7, #4]
 800df2c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800df2e:	683b      	ldr	r3, [r7, #0]
 800df30:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 800df32:	2300      	movs	r3, #0
}
 800df34:	4618      	mov	r0, r3
 800df36:	370c      	adds	r7, #12
 800df38:	46bd      	mov	sp, r7
 800df3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df3e:	4770      	bx	lr

0800df40 <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDMMC_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDMMC_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 800df40:	b5b0      	push	{r4, r5, r7, lr}
 800df42:	b08e      	sub	sp, #56	; 0x38
 800df44:	af04      	add	r7, sp, #16
 800df46:	6078      	str	r0, [r7, #4]
 800df48:	6039      	str	r1, [r7, #0]
  SDMMC_InitTypeDef Init;
  uint32_t errorstate;
  HAL_StatusTypeDef status = HAL_OK;
 800df4a:	2300      	movs	r3, #0
 800df4c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  /* Check the parameters */
  assert_param(IS_SDMMC_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 800df50:	687b      	ldr	r3, [r7, #4]
 800df52:	2203      	movs	r2, #3
 800df54:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(hsd->SdCard.CardType != CARD_SECURED)
 800df58:	687b      	ldr	r3, [r7, #4]
 800df5a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800df5c:	2b03      	cmp	r3, #3
 800df5e:	d02e      	beq.n	800dfbe <HAL_SD_ConfigWideBusOperation+0x7e>
  {
    if(WideMode == SDMMC_BUS_WIDE_8B)
 800df60:	683b      	ldr	r3, [r7, #0]
 800df62:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800df66:	d106      	bne.n	800df76 <HAL_SD_ConfigWideBusOperation+0x36>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800df68:	687b      	ldr	r3, [r7, #4]
 800df6a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800df6c:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800df70:	687b      	ldr	r3, [r7, #4]
 800df72:	639a      	str	r2, [r3, #56]	; 0x38
 800df74:	e029      	b.n	800dfca <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDMMC_BUS_WIDE_4B)
 800df76:	683b      	ldr	r3, [r7, #0]
 800df78:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800df7c:	d10a      	bne.n	800df94 <HAL_SD_ConfigWideBusOperation+0x54>
    {
      errorstate = SD_WideBus_Enable(hsd);
 800df7e:	6878      	ldr	r0, [r7, #4]
 800df80:	f000 fb66 	bl	800e650 <SD_WideBus_Enable>
 800df84:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 800df86:	687b      	ldr	r3, [r7, #4]
 800df88:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800df8a:	6a3b      	ldr	r3, [r7, #32]
 800df8c:	431a      	orrs	r2, r3
 800df8e:	687b      	ldr	r3, [r7, #4]
 800df90:	639a      	str	r2, [r3, #56]	; 0x38
 800df92:	e01a      	b.n	800dfca <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDMMC_BUS_WIDE_1B)
 800df94:	683b      	ldr	r3, [r7, #0]
 800df96:	2b00      	cmp	r3, #0
 800df98:	d10a      	bne.n	800dfb0 <HAL_SD_ConfigWideBusOperation+0x70>
    {
      errorstate = SD_WideBus_Disable(hsd);
 800df9a:	6878      	ldr	r0, [r7, #4]
 800df9c:	f000 fba3 	bl	800e6e6 <SD_WideBus_Disable>
 800dfa0:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 800dfa2:	687b      	ldr	r3, [r7, #4]
 800dfa4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800dfa6:	6a3b      	ldr	r3, [r7, #32]
 800dfa8:	431a      	orrs	r2, r3
 800dfaa:	687b      	ldr	r3, [r7, #4]
 800dfac:	639a      	str	r2, [r3, #56]	; 0x38
 800dfae:	e00c      	b.n	800dfca <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800dfb0:	687b      	ldr	r3, [r7, #4]
 800dfb2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dfb4:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800dfb8:	687b      	ldr	r3, [r7, #4]
 800dfba:	639a      	str	r2, [r3, #56]	; 0x38
 800dfbc:	e005      	b.n	800dfca <HAL_SD_ConfigWideBusOperation+0x8a>
    }
  }
  else
  {
    /* MMC Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800dfbe:	687b      	ldr	r3, [r7, #4]
 800dfc0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dfc2:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800dfc6:	687b      	ldr	r3, [r7, #4]
 800dfc8:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 800dfca:	687b      	ldr	r3, [r7, #4]
 800dfcc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dfce:	2b00      	cmp	r3, #0
 800dfd0:	d007      	beq.n	800dfe2 <HAL_SD_ConfigWideBusOperation+0xa2>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800dfd2:	687b      	ldr	r3, [r7, #4]
 800dfd4:	681b      	ldr	r3, [r3, #0]
 800dfd6:	4a2e      	ldr	r2, [pc, #184]	; (800e090 <HAL_SD_ConfigWideBusOperation+0x150>)
 800dfd8:	639a      	str	r2, [r3, #56]	; 0x38
    status = HAL_ERROR;
 800dfda:	2301      	movs	r3, #1
 800dfdc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800dfe0:	e034      	b.n	800e04c <HAL_SD_ConfigWideBusOperation+0x10c>
  }
  else
  {
    /* Configure the SDMMC peripheral */
    Init.ClockEdge           = hsd->Init.ClockEdge;
 800dfe2:	687b      	ldr	r3, [r7, #4]
 800dfe4:	685b      	ldr	r3, [r3, #4]
 800dfe6:	60bb      	str	r3, [r7, #8]
    Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 800dfe8:	687b      	ldr	r3, [r7, #4]
 800dfea:	689b      	ldr	r3, [r3, #8]
 800dfec:	60fb      	str	r3, [r7, #12]
    Init.BusWide             = WideMode;
 800dfee:	683b      	ldr	r3, [r7, #0]
 800dff0:	613b      	str	r3, [r7, #16]
    Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 800dff2:	687b      	ldr	r3, [r7, #4]
 800dff4:	691b      	ldr	r3, [r3, #16]
 800dff6:	617b      	str	r3, [r7, #20]

    /* Check if user Clock div < Normal speed 25Mhz, no change in Clockdiv */
    if(hsd->Init.ClockDiv >= SDMMC_NSpeed_CLK_DIV)
 800dff8:	687b      	ldr	r3, [r7, #4]
 800dffa:	695b      	ldr	r3, [r3, #20]
 800dffc:	2b03      	cmp	r3, #3
 800dffe:	d903      	bls.n	800e008 <HAL_SD_ConfigWideBusOperation+0xc8>
    {
      Init.ClockDiv = hsd->Init.ClockDiv;
 800e000:	687b      	ldr	r3, [r7, #4]
 800e002:	695b      	ldr	r3, [r3, #20]
 800e004:	61bb      	str	r3, [r7, #24]
 800e006:	e012      	b.n	800e02e <HAL_SD_ConfigWideBusOperation+0xee>
    }
    else if (hsd->SdCard.CardSpeed == CARD_ULTRA_HIGH_SPEED)
 800e008:	687b      	ldr	r3, [r7, #4]
 800e00a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800e00c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800e010:	d103      	bne.n	800e01a <HAL_SD_ConfigWideBusOperation+0xda>
    {
      /* UltraHigh speed SD card,user Clock div */
      Init.ClockDiv = hsd->Init.ClockDiv;
 800e012:	687b      	ldr	r3, [r7, #4]
 800e014:	695b      	ldr	r3, [r3, #20]
 800e016:	61bb      	str	r3, [r7, #24]
 800e018:	e009      	b.n	800e02e <HAL_SD_ConfigWideBusOperation+0xee>
    }
    else if (hsd->SdCard.CardSpeed == CARD_HIGH_SPEED)
 800e01a:	687b      	ldr	r3, [r7, #4]
 800e01c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800e01e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800e022:	d102      	bne.n	800e02a <HAL_SD_ConfigWideBusOperation+0xea>
    {
      /* High speed SD card, Max Frequency = 50Mhz */
      Init.ClockDiv = SDMMC_HSpeed_CLK_DIV;
 800e024:	2302      	movs	r3, #2
 800e026:	61bb      	str	r3, [r7, #24]
 800e028:	e001      	b.n	800e02e <HAL_SD_ConfigWideBusOperation+0xee>
    }
    else
    {
      /* No High speed SD card, Max Frequency = 25Mhz */
      Init.ClockDiv = SDMMC_NSpeed_CLK_DIV;
 800e02a:	2304      	movs	r3, #4
 800e02c:	61bb      	str	r3, [r7, #24]
    }

    (void)SDMMC_Init(hsd->Instance, Init);
 800e02e:	687b      	ldr	r3, [r7, #4]
 800e030:	681d      	ldr	r5, [r3, #0]
 800e032:	466c      	mov	r4, sp
 800e034:	f107 0314 	add.w	r3, r7, #20
 800e038:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800e03c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800e040:	f107 0308 	add.w	r3, r7, #8
 800e044:	cb0e      	ldmia	r3, {r1, r2, r3}
 800e046:	4628      	mov	r0, r5
 800e048:	f003 f844 	bl	80110d4 <SDMMC_Init>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800e04c:	687b      	ldr	r3, [r7, #4]
 800e04e:	681b      	ldr	r3, [r3, #0]
 800e050:	f44f 7100 	mov.w	r1, #512	; 0x200
 800e054:	4618      	mov	r0, r3
 800e056:	f003 f91b 	bl	8011290 <SDMMC_CmdBlockLength>
 800e05a:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800e05c:	6a3b      	ldr	r3, [r7, #32]
 800e05e:	2b00      	cmp	r3, #0
 800e060:	d00c      	beq.n	800e07c <HAL_SD_ConfigWideBusOperation+0x13c>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800e062:	687b      	ldr	r3, [r7, #4]
 800e064:	681b      	ldr	r3, [r3, #0]
 800e066:	4a0a      	ldr	r2, [pc, #40]	; (800e090 <HAL_SD_ConfigWideBusOperation+0x150>)
 800e068:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 800e06a:	687b      	ldr	r3, [r7, #4]
 800e06c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800e06e:	6a3b      	ldr	r3, [r7, #32]
 800e070:	431a      	orrs	r2, r3
 800e072:	687b      	ldr	r3, [r7, #4]
 800e074:	639a      	str	r2, [r3, #56]	; 0x38
    status = HAL_ERROR;
 800e076:	2301      	movs	r3, #1
 800e078:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 800e07c:	687b      	ldr	r3, [r7, #4]
 800e07e:	2201      	movs	r2, #1
 800e080:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return status;
 800e084:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800e088:	4618      	mov	r0, r3
 800e08a:	3728      	adds	r7, #40	; 0x28
 800e08c:	46bd      	mov	sp, r7
 800e08e:	bdb0      	pop	{r4, r5, r7, pc}
 800e090:	1fe00fff 	.word	0x1fe00fff

0800e094 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 800e094:	b580      	push	{r7, lr}
 800e096:	b086      	sub	sp, #24
 800e098:	af00      	add	r7, sp, #0
 800e09a:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 800e09c:	2300      	movs	r3, #0
 800e09e:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 800e0a0:	f107 030c 	add.w	r3, r7, #12
 800e0a4:	4619      	mov	r1, r3
 800e0a6:	6878      	ldr	r0, [r7, #4]
 800e0a8:	f000 faaa 	bl	800e600 <SD_SendStatus>
 800e0ac:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 800e0ae:	697b      	ldr	r3, [r7, #20]
 800e0b0:	2b00      	cmp	r3, #0
 800e0b2:	d005      	beq.n	800e0c0 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 800e0b4:	687b      	ldr	r3, [r7, #4]
 800e0b6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800e0b8:	697b      	ldr	r3, [r7, #20]
 800e0ba:	431a      	orrs	r2, r3
 800e0bc:	687b      	ldr	r3, [r7, #4]
 800e0be:	639a      	str	r2, [r3, #56]	; 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 800e0c0:	68fb      	ldr	r3, [r7, #12]
 800e0c2:	0a5b      	lsrs	r3, r3, #9
 800e0c4:	f003 030f 	and.w	r3, r3, #15
 800e0c8:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 800e0ca:	693b      	ldr	r3, [r7, #16]
}
 800e0cc:	4618      	mov	r0, r3
 800e0ce:	3718      	adds	r7, #24
 800e0d0:	46bd      	mov	sp, r7
 800e0d2:	bd80      	pop	{r7, pc}

0800e0d4 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 800e0d4:	b590      	push	{r4, r7, lr}
 800e0d6:	b091      	sub	sp, #68	; 0x44
 800e0d8:	af00      	add	r7, sp, #0
 800e0da:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 800e0dc:	2301      	movs	r3, #1
 800e0de:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDMMC_GetPowerState(hsd->Instance) == 0U)
 800e0e0:	687b      	ldr	r3, [r7, #4]
 800e0e2:	681b      	ldr	r3, [r3, #0]
 800e0e4:	4618      	mov	r0, r3
 800e0e6:	f003 f84e 	bl	8011186 <SDMMC_GetPowerState>
 800e0ea:	4603      	mov	r3, r0
 800e0ec:	2b00      	cmp	r3, #0
 800e0ee:	d102      	bne.n	800e0f6 <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800e0f0:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 800e0f4:	e0a8      	b.n	800e248 <SD_InitCard+0x174>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 800e0f6:	687b      	ldr	r3, [r7, #4]
 800e0f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e0fa:	2b03      	cmp	r3, #3
 800e0fc:	d02e      	beq.n	800e15c <SD_InitCard+0x88>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 800e0fe:	687b      	ldr	r3, [r7, #4]
 800e100:	681b      	ldr	r3, [r3, #0]
 800e102:	4618      	mov	r0, r3
 800e104:	f003 fa9a 	bl	801163c <SDMMC_CmdSendCID>
 800e108:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800e10a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e10c:	2b00      	cmp	r3, #0
 800e10e:	d001      	beq.n	800e114 <SD_InitCard+0x40>
    {
      return errorstate;
 800e110:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e112:	e099      	b.n	800e248 <SD_InitCard+0x174>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800e114:	687b      	ldr	r3, [r7, #4]
 800e116:	681b      	ldr	r3, [r3, #0]
 800e118:	2100      	movs	r1, #0
 800e11a:	4618      	mov	r0, r3
 800e11c:	f003 f879 	bl	8011212 <SDMMC_GetResponse>
 800e120:	4602      	mov	r2, r0
 800e122:	687b      	ldr	r3, [r7, #4]
 800e124:	671a      	str	r2, [r3, #112]	; 0x70
      hsd->CID[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 800e126:	687b      	ldr	r3, [r7, #4]
 800e128:	681b      	ldr	r3, [r3, #0]
 800e12a:	2104      	movs	r1, #4
 800e12c:	4618      	mov	r0, r3
 800e12e:	f003 f870 	bl	8011212 <SDMMC_GetResponse>
 800e132:	4602      	mov	r2, r0
 800e134:	687b      	ldr	r3, [r7, #4]
 800e136:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 800e138:	687b      	ldr	r3, [r7, #4]
 800e13a:	681b      	ldr	r3, [r3, #0]
 800e13c:	2108      	movs	r1, #8
 800e13e:	4618      	mov	r0, r3
 800e140:	f003 f867 	bl	8011212 <SDMMC_GetResponse>
 800e144:	4602      	mov	r2, r0
 800e146:	687b      	ldr	r3, [r7, #4]
 800e148:	679a      	str	r2, [r3, #120]	; 0x78
      hsd->CID[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 800e14a:	687b      	ldr	r3, [r7, #4]
 800e14c:	681b      	ldr	r3, [r3, #0]
 800e14e:	210c      	movs	r1, #12
 800e150:	4618      	mov	r0, r3
 800e152:	f003 f85e 	bl	8011212 <SDMMC_GetResponse>
 800e156:	4602      	mov	r2, r0
 800e158:	687b      	ldr	r3, [r7, #4]
 800e15a:	67da      	str	r2, [r3, #124]	; 0x7c
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 800e15c:	687b      	ldr	r3, [r7, #4]
 800e15e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e160:	2b03      	cmp	r3, #3
 800e162:	d00d      	beq.n	800e180 <SD_InitCard+0xac>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 800e164:	687b      	ldr	r3, [r7, #4]
 800e166:	681b      	ldr	r3, [r3, #0]
 800e168:	f107 020e 	add.w	r2, r7, #14
 800e16c:	4611      	mov	r1, r2
 800e16e:	4618      	mov	r0, r3
 800e170:	f003 faa3 	bl	80116ba <SDMMC_CmdSetRelAdd>
 800e174:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800e176:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e178:	2b00      	cmp	r3, #0
 800e17a:	d001      	beq.n	800e180 <SD_InitCard+0xac>
    {
      return errorstate;
 800e17c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e17e:	e063      	b.n	800e248 <SD_InitCard+0x174>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 800e180:	687b      	ldr	r3, [r7, #4]
 800e182:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e184:	2b03      	cmp	r3, #3
 800e186:	d036      	beq.n	800e1f6 <SD_InitCard+0x122>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 800e188:	89fb      	ldrh	r3, [r7, #14]
 800e18a:	461a      	mov	r2, r3
 800e18c:	687b      	ldr	r3, [r7, #4]
 800e18e:	649a      	str	r2, [r3, #72]	; 0x48

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800e190:	687b      	ldr	r3, [r7, #4]
 800e192:	681a      	ldr	r2, [r3, #0]
 800e194:	687b      	ldr	r3, [r7, #4]
 800e196:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800e198:	041b      	lsls	r3, r3, #16
 800e19a:	4619      	mov	r1, r3
 800e19c:	4610      	mov	r0, r2
 800e19e:	f003 fa6c 	bl	801167a <SDMMC_CmdSendCSD>
 800e1a2:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800e1a4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e1a6:	2b00      	cmp	r3, #0
 800e1a8:	d001      	beq.n	800e1ae <SD_InitCard+0xda>
    {
      return errorstate;
 800e1aa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e1ac:	e04c      	b.n	800e248 <SD_InitCard+0x174>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800e1ae:	687b      	ldr	r3, [r7, #4]
 800e1b0:	681b      	ldr	r3, [r3, #0]
 800e1b2:	2100      	movs	r1, #0
 800e1b4:	4618      	mov	r0, r3
 800e1b6:	f003 f82c 	bl	8011212 <SDMMC_GetResponse>
 800e1ba:	4602      	mov	r2, r0
 800e1bc:	687b      	ldr	r3, [r7, #4]
 800e1be:	661a      	str	r2, [r3, #96]	; 0x60
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 800e1c0:	687b      	ldr	r3, [r7, #4]
 800e1c2:	681b      	ldr	r3, [r3, #0]
 800e1c4:	2104      	movs	r1, #4
 800e1c6:	4618      	mov	r0, r3
 800e1c8:	f003 f823 	bl	8011212 <SDMMC_GetResponse>
 800e1cc:	4602      	mov	r2, r0
 800e1ce:	687b      	ldr	r3, [r7, #4]
 800e1d0:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 800e1d2:	687b      	ldr	r3, [r7, #4]
 800e1d4:	681b      	ldr	r3, [r3, #0]
 800e1d6:	2108      	movs	r1, #8
 800e1d8:	4618      	mov	r0, r3
 800e1da:	f003 f81a 	bl	8011212 <SDMMC_GetResponse>
 800e1de:	4602      	mov	r2, r0
 800e1e0:	687b      	ldr	r3, [r7, #4]
 800e1e2:	669a      	str	r2, [r3, #104]	; 0x68
      hsd->CSD[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 800e1e4:	687b      	ldr	r3, [r7, #4]
 800e1e6:	681b      	ldr	r3, [r3, #0]
 800e1e8:	210c      	movs	r1, #12
 800e1ea:	4618      	mov	r0, r3
 800e1ec:	f003 f811 	bl	8011212 <SDMMC_GetResponse>
 800e1f0:	4602      	mov	r2, r0
 800e1f2:	687b      	ldr	r3, [r7, #4]
 800e1f4:	66da      	str	r2, [r3, #108]	; 0x6c
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2) >> 20U);
 800e1f6:	687b      	ldr	r3, [r7, #4]
 800e1f8:	681b      	ldr	r3, [r3, #0]
 800e1fa:	2104      	movs	r1, #4
 800e1fc:	4618      	mov	r0, r3
 800e1fe:	f003 f808 	bl	8011212 <SDMMC_GetResponse>
 800e202:	4603      	mov	r3, r0
 800e204:	0d1a      	lsrs	r2, r3, #20
 800e206:	687b      	ldr	r3, [r7, #4]
 800e208:	645a      	str	r2, [r3, #68]	; 0x44

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 800e20a:	f107 0310 	add.w	r3, r7, #16
 800e20e:	4619      	mov	r1, r3
 800e210:	6878      	ldr	r0, [r7, #4]
 800e212:	f7ff fc0f 	bl	800da34 <HAL_SD_GetCardCSD>
 800e216:	4603      	mov	r3, r0
 800e218:	2b00      	cmp	r3, #0
 800e21a:	d002      	beq.n	800e222 <SD_InitCard+0x14e>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800e21c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800e220:	e012      	b.n	800e248 <SD_InitCard+0x174>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 800e222:	687b      	ldr	r3, [r7, #4]
 800e224:	6819      	ldr	r1, [r3, #0]
 800e226:	687b      	ldr	r3, [r7, #4]
 800e228:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800e22a:	041b      	lsls	r3, r3, #16
 800e22c:	f04f 0400 	mov.w	r4, #0
 800e230:	461a      	mov	r2, r3
 800e232:	4623      	mov	r3, r4
 800e234:	4608      	mov	r0, r1
 800e236:	f003 f917 	bl	8011468 <SDMMC_CmdSelDesel>
 800e23a:	63f8      	str	r0, [r7, #60]	; 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 800e23c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e23e:	2b00      	cmp	r3, #0
 800e240:	d001      	beq.n	800e246 <SD_InitCard+0x172>
  {
    return errorstate;
 800e242:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e244:	e000      	b.n	800e248 <SD_InitCard+0x174>
  }

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 800e246:	2300      	movs	r3, #0
}
 800e248:	4618      	mov	r0, r3
 800e24a:	3744      	adds	r7, #68	; 0x44
 800e24c:	46bd      	mov	sp, r7
 800e24e:	bd90      	pop	{r4, r7, pc}

0800e250 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 800e250:	b580      	push	{r7, lr}
 800e252:	b088      	sub	sp, #32
 800e254:	af00      	add	r7, sp, #0
 800e256:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800e258:	2300      	movs	r3, #0
 800e25a:	60fb      	str	r3, [r7, #12]
  uint32_t response = 0U, validvoltage = 0U;
 800e25c:	2300      	movs	r3, #0
 800e25e:	61fb      	str	r3, [r7, #28]
 800e260:	2300      	movs	r3, #0
 800e262:	61bb      	str	r3, [r7, #24]
  uint32_t errorstate;
#if (USE_SD_TRANSCEIVER != 0U)
  uint32_t tickstart = HAL_GetTick();
 800e264:	f7f6 fa2c 	bl	80046c0 <HAL_GetTick>
 800e268:	6178      	str	r0, [r7, #20]
#endif /* USE_SD_TRANSCEIVER  */

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800e26a:	687b      	ldr	r3, [r7, #4]
 800e26c:	681b      	ldr	r3, [r3, #0]
 800e26e:	4618      	mov	r0, r3
 800e270:	f003 f91e 	bl	80114b0 <SDMMC_CmdGoIdleState>
 800e274:	6138      	str	r0, [r7, #16]
  if(errorstate != HAL_SD_ERROR_NONE)
 800e276:	693b      	ldr	r3, [r7, #16]
 800e278:	2b00      	cmp	r3, #0
 800e27a:	d001      	beq.n	800e280 <SD_PowerON+0x30>
  {
    return errorstate;
 800e27c:	693b      	ldr	r3, [r7, #16]
 800e27e:	e0e9      	b.n	800e454 <SD_PowerON+0x204>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 800e280:	687b      	ldr	r3, [r7, #4]
 800e282:	681b      	ldr	r3, [r3, #0]
 800e284:	4618      	mov	r0, r3
 800e286:	f003 f931 	bl	80114ec <SDMMC_CmdOperCond>
 800e28a:	6138      	str	r0, [r7, #16]
  if(errorstate != HAL_SD_ERROR_NONE)
 800e28c:	693b      	ldr	r3, [r7, #16]
 800e28e:	2b00      	cmp	r3, #0
 800e290:	d00d      	beq.n	800e2ae <SD_PowerON+0x5e>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 800e292:	687b      	ldr	r3, [r7, #4]
 800e294:	2200      	movs	r2, #0
 800e296:	641a      	str	r2, [r3, #64]	; 0x40
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800e298:	687b      	ldr	r3, [r7, #4]
 800e29a:	681b      	ldr	r3, [r3, #0]
 800e29c:	4618      	mov	r0, r3
 800e29e:	f003 f907 	bl	80114b0 <SDMMC_CmdGoIdleState>
 800e2a2:	6138      	str	r0, [r7, #16]
    if(errorstate != HAL_SD_ERROR_NONE)
 800e2a4:	693b      	ldr	r3, [r7, #16]
 800e2a6:	2b00      	cmp	r3, #0
 800e2a8:	d004      	beq.n	800e2b4 <SD_PowerON+0x64>
    {
      return errorstate;
 800e2aa:	693b      	ldr	r3, [r7, #16]
 800e2ac:	e0d2      	b.n	800e454 <SD_PowerON+0x204>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 800e2ae:	687b      	ldr	r3, [r7, #4]
 800e2b0:	2201      	movs	r2, #1
 800e2b2:	641a      	str	r2, [r3, #64]	; 0x40
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 800e2b4:	687b      	ldr	r3, [r7, #4]
 800e2b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e2b8:	2b01      	cmp	r3, #1
 800e2ba:	d137      	bne.n	800e32c <SD_PowerON+0xdc>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800e2bc:	687b      	ldr	r3, [r7, #4]
 800e2be:	681b      	ldr	r3, [r3, #0]
 800e2c0:	2100      	movs	r1, #0
 800e2c2:	4618      	mov	r0, r3
 800e2c4:	f003 f932 	bl	801152c <SDMMC_CmdAppCommand>
 800e2c8:	6138      	str	r0, [r7, #16]
    if(errorstate != HAL_SD_ERROR_NONE)
 800e2ca:	693b      	ldr	r3, [r7, #16]
 800e2cc:	2b00      	cmp	r3, #0
 800e2ce:	d02d      	beq.n	800e32c <SD_PowerON+0xdc>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800e2d0:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800e2d4:	e0be      	b.n	800e454 <SD_PowerON+0x204>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800e2d6:	687b      	ldr	r3, [r7, #4]
 800e2d8:	681b      	ldr	r3, [r3, #0]
 800e2da:	2100      	movs	r1, #0
 800e2dc:	4618      	mov	r0, r3
 800e2de:	f003 f925 	bl	801152c <SDMMC_CmdAppCommand>
 800e2e2:	6138      	str	r0, [r7, #16]
    if(errorstate != HAL_SD_ERROR_NONE)
 800e2e4:	693b      	ldr	r3, [r7, #16]
 800e2e6:	2b00      	cmp	r3, #0
 800e2e8:	d001      	beq.n	800e2ee <SD_PowerON+0x9e>
    {
      return errorstate;
 800e2ea:	693b      	ldr	r3, [r7, #16]
 800e2ec:	e0b2      	b.n	800e454 <SD_PowerON+0x204>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 800e2ee:	687b      	ldr	r3, [r7, #4]
 800e2f0:	681b      	ldr	r3, [r3, #0]
 800e2f2:	495a      	ldr	r1, [pc, #360]	; (800e45c <SD_PowerON+0x20c>)
 800e2f4:	4618      	mov	r0, r3
 800e2f6:	f003 f93c 	bl	8011572 <SDMMC_CmdAppOperCommand>
 800e2fa:	6138      	str	r0, [r7, #16]
    if(errorstate != HAL_SD_ERROR_NONE)
 800e2fc:	693b      	ldr	r3, [r7, #16]
 800e2fe:	2b00      	cmp	r3, #0
 800e300:	d002      	beq.n	800e308 <SD_PowerON+0xb8>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800e302:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800e306:	e0a5      	b.n	800e454 <SD_PowerON+0x204>
    }

    /* Get command response */
    response = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800e308:	687b      	ldr	r3, [r7, #4]
 800e30a:	681b      	ldr	r3, [r3, #0]
 800e30c:	2100      	movs	r1, #0
 800e30e:	4618      	mov	r0, r3
 800e310:	f002 ff7f 	bl	8011212 <SDMMC_GetResponse>
 800e314:	61f8      	str	r0, [r7, #28]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 800e316:	69fb      	ldr	r3, [r7, #28]
 800e318:	0fdb      	lsrs	r3, r3, #31
 800e31a:	2b01      	cmp	r3, #1
 800e31c:	d101      	bne.n	800e322 <SD_PowerON+0xd2>
 800e31e:	2301      	movs	r3, #1
 800e320:	e000      	b.n	800e324 <SD_PowerON+0xd4>
 800e322:	2300      	movs	r3, #0
 800e324:	61bb      	str	r3, [r7, #24]

    count++;
 800e326:	68fb      	ldr	r3, [r7, #12]
 800e328:	3301      	adds	r3, #1
 800e32a:	60fb      	str	r3, [r7, #12]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 800e32c:	68fb      	ldr	r3, [r7, #12]
 800e32e:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800e332:	4293      	cmp	r3, r2
 800e334:	d802      	bhi.n	800e33c <SD_PowerON+0xec>
 800e336:	69bb      	ldr	r3, [r7, #24]
 800e338:	2b00      	cmp	r3, #0
 800e33a:	d0cc      	beq.n	800e2d6 <SD_PowerON+0x86>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 800e33c:	68fb      	ldr	r3, [r7, #12]
 800e33e:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800e342:	4293      	cmp	r3, r2
 800e344:	d902      	bls.n	800e34c <SD_PowerON+0xfc>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 800e346:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800e34a:	e083      	b.n	800e454 <SD_PowerON+0x204>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 800e34c:	69fb      	ldr	r3, [r7, #28]
 800e34e:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800e352:	2b00      	cmp	r3, #0
 800e354:	d07d      	beq.n	800e452 <SD_PowerON+0x202>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 800e356:	687b      	ldr	r3, [r7, #4]
 800e358:	2201      	movs	r2, #1
 800e35a:	63da      	str	r2, [r3, #60]	; 0x3c
#if (USE_SD_TRANSCEIVER != 0U)
    if (hsd->Init.TranceiverPresent == SDMMC_TRANSCEIVER_PRESENT)
 800e35c:	687b      	ldr	r3, [r7, #4]
 800e35e:	699b      	ldr	r3, [r3, #24]
 800e360:	2b02      	cmp	r3, #2
 800e362:	d176      	bne.n	800e452 <SD_PowerON+0x202>
    {
      if((response & SD_SWITCH_1_8V_CAPACITY) == SD_SWITCH_1_8V_CAPACITY)
 800e364:	69fb      	ldr	r3, [r7, #28]
 800e366:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800e36a:	2b00      	cmp	r3, #0
 800e36c:	d071      	beq.n	800e452 <SD_PowerON+0x202>
      {
        hsd->SdCard.CardSpeed = CARD_ULTRA_HIGH_SPEED;
 800e36e:	687b      	ldr	r3, [r7, #4]
 800e370:	f44f 7200 	mov.w	r2, #512	; 0x200
 800e374:	65da      	str	r2, [r3, #92]	; 0x5c

        /* Start switching procedue */
        hsd->Instance->POWER |= SDMMC_POWER_VSWITCHEN;
 800e376:	687b      	ldr	r3, [r7, #4]
 800e378:	681b      	ldr	r3, [r3, #0]
 800e37a:	681a      	ldr	r2, [r3, #0]
 800e37c:	687b      	ldr	r3, [r7, #4]
 800e37e:	681b      	ldr	r3, [r3, #0]
 800e380:	f042 0208 	orr.w	r2, r2, #8
 800e384:	601a      	str	r2, [r3, #0]

        /* Send CMD11 to switch 1.8V mode */
        errorstate = SDMMC_CmdVoltageSwitch(hsd->Instance);
 800e386:	687b      	ldr	r3, [r7, #4]
 800e388:	681b      	ldr	r3, [r3, #0]
 800e38a:	4618      	mov	r0, r3
 800e38c:	f003 f9fc 	bl	8011788 <SDMMC_CmdVoltageSwitch>
 800e390:	6138      	str	r0, [r7, #16]
        if(errorstate != HAL_SD_ERROR_NONE)
 800e392:	693b      	ldr	r3, [r7, #16]
 800e394:	2b00      	cmp	r3, #0
 800e396:	d00c      	beq.n	800e3b2 <SD_PowerON+0x162>
        {
          return errorstate;
 800e398:	693b      	ldr	r3, [r7, #16]
 800e39a:	e05b      	b.n	800e454 <SD_PowerON+0x204>
        }

        /* Check to CKSTOP */
        while(( hsd->Instance->STA & SDMMC_FLAG_CKSTOP) != SDMMC_FLAG_CKSTOP)
        {
          if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800e39c:	f7f6 f990 	bl	80046c0 <HAL_GetTick>
 800e3a0:	4602      	mov	r2, r0
 800e3a2:	697b      	ldr	r3, [r7, #20]
 800e3a4:	1ad3      	subs	r3, r2, r3
 800e3a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e3aa:	d102      	bne.n	800e3b2 <SD_PowerON+0x162>
          {
            return HAL_SD_ERROR_TIMEOUT;
 800e3ac:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800e3b0:	e050      	b.n	800e454 <SD_PowerON+0x204>
        while(( hsd->Instance->STA & SDMMC_FLAG_CKSTOP) != SDMMC_FLAG_CKSTOP)
 800e3b2:	687b      	ldr	r3, [r7, #4]
 800e3b4:	681b      	ldr	r3, [r3, #0]
 800e3b6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e3b8:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800e3bc:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800e3c0:	d1ec      	bne.n	800e39c <SD_PowerON+0x14c>
          }
        }

        /* Clear CKSTOP Flag */
        hsd->Instance->ICR = SDMMC_FLAG_CKSTOP;
 800e3c2:	687b      	ldr	r3, [r7, #4]
 800e3c4:	681b      	ldr	r3, [r3, #0]
 800e3c6:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 800e3ca:	639a      	str	r2, [r3, #56]	; 0x38

        /* Check to BusyD0 */
        if(( hsd->Instance->STA & SDMMC_FLAG_BUSYD0) != SDMMC_FLAG_BUSYD0)
 800e3cc:	687b      	ldr	r3, [r7, #4]
 800e3ce:	681b      	ldr	r3, [r3, #0]
 800e3d0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e3d2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800e3d6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800e3da:	d002      	beq.n	800e3e2 <SD_PowerON+0x192>
        {
          /* Error when activate Voltage Switch in SDMMC Peripheral */
          return SDMMC_ERROR_UNSUPPORTED_FEATURE;
 800e3dc:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800e3e0:	e038      	b.n	800e454 <SD_PowerON+0x204>
        {
          /* Enable Transceiver Switch PIN */
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
          hsd->DriveTransceiver_1_8V_Callback(SET);
#else
          HAL_SD_DriveTransceiver_1_8V_Callback(SET);
 800e3e2:	2001      	movs	r0, #1
 800e3e4:	f7ff fb1a 	bl	800da1c <HAL_SD_DriveTransceiver_1_8V_Callback>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */

          /* Switch ready */
          hsd->Instance->POWER |= SDMMC_POWER_VSWITCH;
 800e3e8:	687b      	ldr	r3, [r7, #4]
 800e3ea:	681b      	ldr	r3, [r3, #0]
 800e3ec:	681a      	ldr	r2, [r3, #0]
 800e3ee:	687b      	ldr	r3, [r7, #4]
 800e3f0:	681b      	ldr	r3, [r3, #0]
 800e3f2:	f042 0204 	orr.w	r2, r2, #4
 800e3f6:	601a      	str	r2, [r3, #0]

          /* Check VSWEND Flag */
          while(( hsd->Instance->STA & SDMMC_FLAG_VSWEND) != SDMMC_FLAG_VSWEND)
 800e3f8:	e00a      	b.n	800e410 <SD_PowerON+0x1c0>
          {
            if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800e3fa:	f7f6 f961 	bl	80046c0 <HAL_GetTick>
 800e3fe:	4602      	mov	r2, r0
 800e400:	697b      	ldr	r3, [r7, #20]
 800e402:	1ad3      	subs	r3, r2, r3
 800e404:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e408:	d102      	bne.n	800e410 <SD_PowerON+0x1c0>
            {
              return HAL_SD_ERROR_TIMEOUT;
 800e40a:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800e40e:	e021      	b.n	800e454 <SD_PowerON+0x204>
          while(( hsd->Instance->STA & SDMMC_FLAG_VSWEND) != SDMMC_FLAG_VSWEND)
 800e410:	687b      	ldr	r3, [r7, #4]
 800e412:	681b      	ldr	r3, [r3, #0]
 800e414:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e416:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800e41a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800e41e:	d1ec      	bne.n	800e3fa <SD_PowerON+0x1aa>
            }
          }

          /* Clear VSWEND Flag */
          hsd->Instance->ICR = SDMMC_FLAG_VSWEND;
 800e420:	687b      	ldr	r3, [r7, #4]
 800e422:	681b      	ldr	r3, [r3, #0]
 800e424:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800e428:	639a      	str	r2, [r3, #56]	; 0x38

          /* Check BusyD0 status */
          if(( hsd->Instance->STA & SDMMC_FLAG_BUSYD0) == SDMMC_FLAG_BUSYD0)
 800e42a:	687b      	ldr	r3, [r7, #4]
 800e42c:	681b      	ldr	r3, [r3, #0]
 800e42e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e430:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800e434:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800e438:	d102      	bne.n	800e440 <SD_PowerON+0x1f0>
          {
            /* Error when enabling 1.8V mode */
            return HAL_SD_ERROR_INVALID_VOLTRANGE;
 800e43a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800e43e:	e009      	b.n	800e454 <SD_PowerON+0x204>
          }
          /* Switch to 1.8V OK */

          /* Disable VSWITCH FLAG from SDMMC Peripheral */
          hsd->Instance->POWER = 0x13U;
 800e440:	687b      	ldr	r3, [r7, #4]
 800e442:	681b      	ldr	r3, [r3, #0]
 800e444:	2213      	movs	r2, #19
 800e446:	601a      	str	r2, [r3, #0]

          /* Clean Status flags */
          hsd->Instance->ICR = 0xFFFFFFFFU;
 800e448:	687b      	ldr	r3, [r7, #4]
 800e44a:	681b      	ldr	r3, [r3, #0]
 800e44c:	f04f 32ff 	mov.w	r2, #4294967295
 800e450:	639a      	str	r2, [r3, #56]	; 0x38
      }
    }
#endif /* USE_SD_TRANSCEIVER  */
  }

  return HAL_SD_ERROR_NONE;
 800e452:	2300      	movs	r3, #0
}
 800e454:	4618      	mov	r0, r3
 800e456:	3720      	adds	r7, #32
 800e458:	46bd      	mov	sp, r7
 800e45a:	bd80      	pop	{r7, pc}
 800e45c:	c1100000 	.word	0xc1100000

0800e460 <SD_SendSDStatus>:
  * @param  pSDstatus: Pointer to the buffer that will contain the SD card status
  *         SD Status register)
  * @retval error state
  */
static uint32_t SD_SendSDStatus(SD_HandleTypeDef *hsd, uint32_t *pSDstatus)
{
 800e460:	b580      	push	{r7, lr}
 800e462:	b08c      	sub	sp, #48	; 0x30
 800e464:	af00      	add	r7, sp, #0
 800e466:	6078      	str	r0, [r7, #4]
 800e468:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800e46a:	f7f6 f929 	bl	80046c0 <HAL_GetTick>
 800e46e:	6278      	str	r0, [r7, #36]	; 0x24
  uint32_t count;
  uint32_t *pData = pSDstatus;
 800e470:	683b      	ldr	r3, [r7, #0]
 800e472:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check SD response */
  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800e474:	687b      	ldr	r3, [r7, #4]
 800e476:	681b      	ldr	r3, [r3, #0]
 800e478:	2100      	movs	r1, #0
 800e47a:	4618      	mov	r0, r3
 800e47c:	f002 fec9 	bl	8011212 <SDMMC_GetResponse>
 800e480:	4603      	mov	r3, r0
 800e482:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800e486:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800e48a:	d102      	bne.n	800e492 <SD_SendSDStatus+0x32>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800e48c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800e490:	e0b0      	b.n	800e5f4 <SD_SendSDStatus+0x194>
  }

  /* Set block size for card if it is not equal to current block size for card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 64U);
 800e492:	687b      	ldr	r3, [r7, #4]
 800e494:	681b      	ldr	r3, [r3, #0]
 800e496:	2140      	movs	r1, #64	; 0x40
 800e498:	4618      	mov	r0, r3
 800e49a:	f002 fef9 	bl	8011290 <SDMMC_CmdBlockLength>
 800e49e:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800e4a0:	6a3b      	ldr	r3, [r7, #32]
 800e4a2:	2b00      	cmp	r3, #0
 800e4a4:	d005      	beq.n	800e4b2 <SD_SendSDStatus+0x52>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 800e4a6:	687b      	ldr	r3, [r7, #4]
 800e4a8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800e4aa:	687b      	ldr	r3, [r7, #4]
 800e4ac:	639a      	str	r2, [r3, #56]	; 0x38
    return errorstate;
 800e4ae:	6a3b      	ldr	r3, [r7, #32]
 800e4b0:	e0a0      	b.n	800e5f4 <SD_SendSDStatus+0x194>
  }

  /* Send CMD55 */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800e4b2:	687b      	ldr	r3, [r7, #4]
 800e4b4:	681a      	ldr	r2, [r3, #0]
 800e4b6:	687b      	ldr	r3, [r7, #4]
 800e4b8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800e4ba:	041b      	lsls	r3, r3, #16
 800e4bc:	4619      	mov	r1, r3
 800e4be:	4610      	mov	r0, r2
 800e4c0:	f003 f834 	bl	801152c <SDMMC_CmdAppCommand>
 800e4c4:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800e4c6:	6a3b      	ldr	r3, [r7, #32]
 800e4c8:	2b00      	cmp	r3, #0
 800e4ca:	d005      	beq.n	800e4d8 <SD_SendSDStatus+0x78>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 800e4cc:	687b      	ldr	r3, [r7, #4]
 800e4ce:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800e4d0:	687b      	ldr	r3, [r7, #4]
 800e4d2:	639a      	str	r2, [r3, #56]	; 0x38
    return errorstate;
 800e4d4:	6a3b      	ldr	r3, [r7, #32]
 800e4d6:	e08d      	b.n	800e5f4 <SD_SendSDStatus+0x194>
  }

  /* Configure the SD DPSM (Data Path State Machine) */
  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800e4d8:	f04f 33ff 	mov.w	r3, #4294967295
 800e4dc:	60bb      	str	r3, [r7, #8]
  config.DataLength    = 64U;
 800e4de:	2340      	movs	r3, #64	; 0x40
 800e4e0:	60fb      	str	r3, [r7, #12]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_64B;
 800e4e2:	2360      	movs	r3, #96	; 0x60
 800e4e4:	613b      	str	r3, [r7, #16]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 800e4e6:	2302      	movs	r3, #2
 800e4e8:	617b      	str	r3, [r7, #20]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800e4ea:	2300      	movs	r3, #0
 800e4ec:	61bb      	str	r3, [r7, #24]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 800e4ee:	2301      	movs	r3, #1
 800e4f0:	61fb      	str	r3, [r7, #28]
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 800e4f2:	687b      	ldr	r3, [r7, #4]
 800e4f4:	681b      	ldr	r3, [r3, #0]
 800e4f6:	f107 0208 	add.w	r2, r7, #8
 800e4fa:	4611      	mov	r1, r2
 800e4fc:	4618      	mov	r0, r3
 800e4fe:	f002 fe9b 	bl	8011238 <SDMMC_ConfigData>

  /* Send ACMD13 (SD_APP_STAUS)  with argument as card's RCA */
  errorstate = SDMMC_CmdStatusRegister(hsd->Instance);
 800e502:	687b      	ldr	r3, [r7, #4]
 800e504:	681b      	ldr	r3, [r3, #0]
 800e506:	4618      	mov	r0, r3
 800e508:	f003 f91c 	bl	8011744 <SDMMC_CmdStatusRegister>
 800e50c:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800e50e:	6a3b      	ldr	r3, [r7, #32]
 800e510:	2b00      	cmp	r3, #0
 800e512:	d02b      	beq.n	800e56c <SD_SendSDStatus+0x10c>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 800e514:	687b      	ldr	r3, [r7, #4]
 800e516:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800e518:	687b      	ldr	r3, [r7, #4]
 800e51a:	639a      	str	r2, [r3, #56]	; 0x38
    return errorstate;
 800e51c:	6a3b      	ldr	r3, [r7, #32]
 800e51e:	e069      	b.n	800e5f4 <SD_SendSDStatus+0x194>
  }

  /* Get status data */
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
  {
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF))
 800e520:	687b      	ldr	r3, [r7, #4]
 800e522:	681b      	ldr	r3, [r3, #0]
 800e524:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e526:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800e52a:	2b00      	cmp	r3, #0
 800e52c:	d013      	beq.n	800e556 <SD_SendSDStatus+0xf6>
    {
      for(count = 0U; count < 8U; count++)
 800e52e:	2300      	movs	r3, #0
 800e530:	62fb      	str	r3, [r7, #44]	; 0x2c
 800e532:	e00d      	b.n	800e550 <SD_SendSDStatus+0xf0>
      {
        *pData = SDMMC_ReadFIFO(hsd->Instance);
 800e534:	687b      	ldr	r3, [r7, #4]
 800e536:	681b      	ldr	r3, [r3, #0]
 800e538:	4618      	mov	r0, r3
 800e53a:	f002 fdf5 	bl	8011128 <SDMMC_ReadFIFO>
 800e53e:	4602      	mov	r2, r0
 800e540:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e542:	601a      	str	r2, [r3, #0]
        pData++;
 800e544:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e546:	3304      	adds	r3, #4
 800e548:	62bb      	str	r3, [r7, #40]	; 0x28
      for(count = 0U; count < 8U; count++)
 800e54a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e54c:	3301      	adds	r3, #1
 800e54e:	62fb      	str	r3, [r7, #44]	; 0x2c
 800e550:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e552:	2b07      	cmp	r3, #7
 800e554:	d9ee      	bls.n	800e534 <SD_SendSDStatus+0xd4>
      }
    }

    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800e556:	f7f6 f8b3 	bl	80046c0 <HAL_GetTick>
 800e55a:	4602      	mov	r2, r0
 800e55c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e55e:	1ad3      	subs	r3, r2, r3
 800e560:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e564:	d102      	bne.n	800e56c <SD_SendSDStatus+0x10c>
    {
      return HAL_SD_ERROR_TIMEOUT;
 800e566:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800e56a:	e043      	b.n	800e5f4 <SD_SendSDStatus+0x194>
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 800e56c:	687b      	ldr	r3, [r7, #4]
 800e56e:	681b      	ldr	r3, [r3, #0]
 800e570:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e572:	f403 7395 	and.w	r3, r3, #298	; 0x12a
 800e576:	2b00      	cmp	r3, #0
 800e578:	d0d2      	beq.n	800e520 <SD_SendSDStatus+0xc0>
    }
  }

  if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 800e57a:	687b      	ldr	r3, [r7, #4]
 800e57c:	681b      	ldr	r3, [r3, #0]
 800e57e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e580:	f003 0308 	and.w	r3, r3, #8
 800e584:	2b00      	cmp	r3, #0
 800e586:	d001      	beq.n	800e58c <SD_SendSDStatus+0x12c>
  {
    return HAL_SD_ERROR_DATA_TIMEOUT;
 800e588:	2308      	movs	r3, #8
 800e58a:	e033      	b.n	800e5f4 <SD_SendSDStatus+0x194>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 800e58c:	687b      	ldr	r3, [r7, #4]
 800e58e:	681b      	ldr	r3, [r3, #0]
 800e590:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e592:	f003 0302 	and.w	r3, r3, #2
 800e596:	2b00      	cmp	r3, #0
 800e598:	d001      	beq.n	800e59e <SD_SendSDStatus+0x13e>
  {
    return HAL_SD_ERROR_DATA_CRC_FAIL;
 800e59a:	2302      	movs	r3, #2
 800e59c:	e02a      	b.n	800e5f4 <SD_SendSDStatus+0x194>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 800e59e:	687b      	ldr	r3, [r7, #4]
 800e5a0:	681b      	ldr	r3, [r3, #0]
 800e5a2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e5a4:	f003 0320 	and.w	r3, r3, #32
 800e5a8:	2b00      	cmp	r3, #0
 800e5aa:	d017      	beq.n	800e5dc <SD_SendSDStatus+0x17c>
  {
    return HAL_SD_ERROR_RX_OVERRUN;
 800e5ac:	2320      	movs	r3, #32
 800e5ae:	e021      	b.n	800e5f4 <SD_SendSDStatus+0x194>
    /* Nothing to do */
  }

  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DPSMACT)))
  {
    *pData = SDMMC_ReadFIFO(hsd->Instance);
 800e5b0:	687b      	ldr	r3, [r7, #4]
 800e5b2:	681b      	ldr	r3, [r3, #0]
 800e5b4:	4618      	mov	r0, r3
 800e5b6:	f002 fdb7 	bl	8011128 <SDMMC_ReadFIFO>
 800e5ba:	4602      	mov	r2, r0
 800e5bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e5be:	601a      	str	r2, [r3, #0]
    pData++;
 800e5c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e5c2:	3304      	adds	r3, #4
 800e5c4:	62bb      	str	r3, [r7, #40]	; 0x28

    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800e5c6:	f7f6 f87b 	bl	80046c0 <HAL_GetTick>
 800e5ca:	4602      	mov	r2, r0
 800e5cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e5ce:	1ad3      	subs	r3, r2, r3
 800e5d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e5d4:	d102      	bne.n	800e5dc <SD_SendSDStatus+0x17c>
    {
      return HAL_SD_ERROR_TIMEOUT;
 800e5d6:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800e5da:	e00b      	b.n	800e5f4 <SD_SendSDStatus+0x194>
  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DPSMACT)))
 800e5dc:	687b      	ldr	r3, [r7, #4]
 800e5de:	681b      	ldr	r3, [r3, #0]
 800e5e0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e5e2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800e5e6:	2b00      	cmp	r3, #0
 800e5e8:	d1e2      	bne.n	800e5b0 <SD_SendSDStatus+0x150>
    }
  }

  /* Clear all the static status flags*/
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800e5ea:	687b      	ldr	r3, [r7, #4]
 800e5ec:	681b      	ldr	r3, [r3, #0]
 800e5ee:	4a03      	ldr	r2, [pc, #12]	; (800e5fc <SD_SendSDStatus+0x19c>)
 800e5f0:	639a      	str	r2, [r3, #56]	; 0x38

  return HAL_SD_ERROR_NONE;
 800e5f2:	2300      	movs	r3, #0
}
 800e5f4:	4618      	mov	r0, r3
 800e5f6:	3730      	adds	r7, #48	; 0x30
 800e5f8:	46bd      	mov	sp, r7
 800e5fa:	bd80      	pop	{r7, pc}
 800e5fc:	18000f3a 	.word	0x18000f3a

0800e600 <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 800e600:	b580      	push	{r7, lr}
 800e602:	b084      	sub	sp, #16
 800e604:	af00      	add	r7, sp, #0
 800e606:	6078      	str	r0, [r7, #4]
 800e608:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 800e60a:	683b      	ldr	r3, [r7, #0]
 800e60c:	2b00      	cmp	r3, #0
 800e60e:	d102      	bne.n	800e616 <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 800e610:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800e614:	e018      	b.n	800e648 <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800e616:	687b      	ldr	r3, [r7, #4]
 800e618:	681a      	ldr	r2, [r3, #0]
 800e61a:	687b      	ldr	r3, [r7, #4]
 800e61c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800e61e:	041b      	lsls	r3, r3, #16
 800e620:	4619      	mov	r1, r3
 800e622:	4610      	mov	r0, r2
 800e624:	f003 f86b 	bl	80116fe <SDMMC_CmdSendStatus>
 800e628:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800e62a:	68fb      	ldr	r3, [r7, #12]
 800e62c:	2b00      	cmp	r3, #0
 800e62e:	d001      	beq.n	800e634 <SD_SendStatus+0x34>
  {
    return errorstate;
 800e630:	68fb      	ldr	r3, [r7, #12]
 800e632:	e009      	b.n	800e648 <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800e634:	687b      	ldr	r3, [r7, #4]
 800e636:	681b      	ldr	r3, [r3, #0]
 800e638:	2100      	movs	r1, #0
 800e63a:	4618      	mov	r0, r3
 800e63c:	f002 fde9 	bl	8011212 <SDMMC_GetResponse>
 800e640:	4602      	mov	r2, r0
 800e642:	683b      	ldr	r3, [r7, #0]
 800e644:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 800e646:	2300      	movs	r3, #0
}
 800e648:	4618      	mov	r0, r3
 800e64a:	3710      	adds	r7, #16
 800e64c:	46bd      	mov	sp, r7
 800e64e:	bd80      	pop	{r7, pc}

0800e650 <SD_WideBus_Enable>:
  * @brief  Enables the SDMMC wide bus mode.
  * @param  hsd: pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 800e650:	b580      	push	{r7, lr}
 800e652:	b086      	sub	sp, #24
 800e654:	af00      	add	r7, sp, #0
 800e656:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0UL, 0UL};
 800e658:	2300      	movs	r3, #0
 800e65a:	60fb      	str	r3, [r7, #12]
 800e65c:	2300      	movs	r3, #0
 800e65e:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800e660:	687b      	ldr	r3, [r7, #4]
 800e662:	681b      	ldr	r3, [r3, #0]
 800e664:	2100      	movs	r1, #0
 800e666:	4618      	mov	r0, r3
 800e668:	f002 fdd3 	bl	8011212 <SDMMC_GetResponse>
 800e66c:	4603      	mov	r3, r0
 800e66e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800e672:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800e676:	d102      	bne.n	800e67e <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800e678:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800e67c:	e02f      	b.n	800e6de <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 800e67e:	f107 030c 	add.w	r3, r7, #12
 800e682:	4619      	mov	r1, r3
 800e684:	6878      	ldr	r0, [r7, #4]
 800e686:	f000 f879 	bl	800e77c <SD_FindSCR>
 800e68a:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 800e68c:	697b      	ldr	r3, [r7, #20]
 800e68e:	2b00      	cmp	r3, #0
 800e690:	d001      	beq.n	800e696 <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 800e692:	697b      	ldr	r3, [r7, #20]
 800e694:	e023      	b.n	800e6de <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800e696:	693b      	ldr	r3, [r7, #16]
 800e698:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800e69c:	2b00      	cmp	r3, #0
 800e69e:	d01c      	beq.n	800e6da <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800e6a0:	687b      	ldr	r3, [r7, #4]
 800e6a2:	681a      	ldr	r2, [r3, #0]
 800e6a4:	687b      	ldr	r3, [r7, #4]
 800e6a6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800e6a8:	041b      	lsls	r3, r3, #16
 800e6aa:	4619      	mov	r1, r3
 800e6ac:	4610      	mov	r0, r2
 800e6ae:	f002 ff3d 	bl	801152c <SDMMC_CmdAppCommand>
 800e6b2:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800e6b4:	697b      	ldr	r3, [r7, #20]
 800e6b6:	2b00      	cmp	r3, #0
 800e6b8:	d001      	beq.n	800e6be <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 800e6ba:	697b      	ldr	r3, [r7, #20]
 800e6bc:	e00f      	b.n	800e6de <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 800e6be:	687b      	ldr	r3, [r7, #4]
 800e6c0:	681b      	ldr	r3, [r3, #0]
 800e6c2:	2102      	movs	r1, #2
 800e6c4:	4618      	mov	r0, r3
 800e6c6:	f002 ff74 	bl	80115b2 <SDMMC_CmdBusWidth>
 800e6ca:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800e6cc:	697b      	ldr	r3, [r7, #20]
 800e6ce:	2b00      	cmp	r3, #0
 800e6d0:	d001      	beq.n	800e6d6 <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 800e6d2:	697b      	ldr	r3, [r7, #20]
 800e6d4:	e003      	b.n	800e6de <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 800e6d6:	2300      	movs	r3, #0
 800e6d8:	e001      	b.n	800e6de <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800e6da:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 800e6de:	4618      	mov	r0, r3
 800e6e0:	3718      	adds	r7, #24
 800e6e2:	46bd      	mov	sp, r7
 800e6e4:	bd80      	pop	{r7, pc}

0800e6e6 <SD_WideBus_Disable>:
  * @brief  Disables the SDMMC wide bus mode.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 800e6e6:	b580      	push	{r7, lr}
 800e6e8:	b086      	sub	sp, #24
 800e6ea:	af00      	add	r7, sp, #0
 800e6ec:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0UL, 0UL};
 800e6ee:	2300      	movs	r3, #0
 800e6f0:	60fb      	str	r3, [r7, #12]
 800e6f2:	2300      	movs	r3, #0
 800e6f4:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800e6f6:	687b      	ldr	r3, [r7, #4]
 800e6f8:	681b      	ldr	r3, [r3, #0]
 800e6fa:	2100      	movs	r1, #0
 800e6fc:	4618      	mov	r0, r3
 800e6fe:	f002 fd88 	bl	8011212 <SDMMC_GetResponse>
 800e702:	4603      	mov	r3, r0
 800e704:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800e708:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800e70c:	d102      	bne.n	800e714 <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800e70e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800e712:	e02f      	b.n	800e774 <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 800e714:	f107 030c 	add.w	r3, r7, #12
 800e718:	4619      	mov	r1, r3
 800e71a:	6878      	ldr	r0, [r7, #4]
 800e71c:	f000 f82e 	bl	800e77c <SD_FindSCR>
 800e720:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 800e722:	697b      	ldr	r3, [r7, #20]
 800e724:	2b00      	cmp	r3, #0
 800e726:	d001      	beq.n	800e72c <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 800e728:	697b      	ldr	r3, [r7, #20]
 800e72a:	e023      	b.n	800e774 <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800e72c:	693b      	ldr	r3, [r7, #16]
 800e72e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800e732:	2b00      	cmp	r3, #0
 800e734:	d01c      	beq.n	800e770 <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800e736:	687b      	ldr	r3, [r7, #4]
 800e738:	681a      	ldr	r2, [r3, #0]
 800e73a:	687b      	ldr	r3, [r7, #4]
 800e73c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800e73e:	041b      	lsls	r3, r3, #16
 800e740:	4619      	mov	r1, r3
 800e742:	4610      	mov	r0, r2
 800e744:	f002 fef2 	bl	801152c <SDMMC_CmdAppCommand>
 800e748:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800e74a:	697b      	ldr	r3, [r7, #20]
 800e74c:	2b00      	cmp	r3, #0
 800e74e:	d001      	beq.n	800e754 <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 800e750:	697b      	ldr	r3, [r7, #20]
 800e752:	e00f      	b.n	800e774 <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 800e754:	687b      	ldr	r3, [r7, #4]
 800e756:	681b      	ldr	r3, [r3, #0]
 800e758:	2100      	movs	r1, #0
 800e75a:	4618      	mov	r0, r3
 800e75c:	f002 ff29 	bl	80115b2 <SDMMC_CmdBusWidth>
 800e760:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800e762:	697b      	ldr	r3, [r7, #20]
 800e764:	2b00      	cmp	r3, #0
 800e766:	d001      	beq.n	800e76c <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 800e768:	697b      	ldr	r3, [r7, #20]
 800e76a:	e003      	b.n	800e774 <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 800e76c:	2300      	movs	r3, #0
 800e76e:	e001      	b.n	800e774 <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800e770:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 800e774:	4618      	mov	r0, r3
 800e776:	3718      	adds	r7, #24
 800e778:	46bd      	mov	sp, r7
 800e77a:	bd80      	pop	{r7, pc}

0800e77c <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 800e77c:	b580      	push	{r7, lr}
 800e77e:	b08e      	sub	sp, #56	; 0x38
 800e780:	af00      	add	r7, sp, #0
 800e782:	6078      	str	r0, [r7, #4]
 800e784:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800e786:	f7f5 ff9b 	bl	80046c0 <HAL_GetTick>
 800e78a:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t index = 0U;
 800e78c:	2300      	movs	r3, #0
 800e78e:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tempscr[2U] = {0UL, 0UL};
 800e790:	2300      	movs	r3, #0
 800e792:	60bb      	str	r3, [r7, #8]
 800e794:	2300      	movs	r3, #0
 800e796:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 800e798:	683b      	ldr	r3, [r7, #0]
 800e79a:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 800e79c:	687b      	ldr	r3, [r7, #4]
 800e79e:	681b      	ldr	r3, [r3, #0]
 800e7a0:	2108      	movs	r1, #8
 800e7a2:	4618      	mov	r0, r3
 800e7a4:	f002 fd74 	bl	8011290 <SDMMC_CmdBlockLength>
 800e7a8:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 800e7aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e7ac:	2b00      	cmp	r3, #0
 800e7ae:	d001      	beq.n	800e7b4 <SD_FindSCR+0x38>
  {
    return errorstate;
 800e7b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e7b2:	e0ad      	b.n	800e910 <SD_FindSCR+0x194>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 800e7b4:	687b      	ldr	r3, [r7, #4]
 800e7b6:	681a      	ldr	r2, [r3, #0]
 800e7b8:	687b      	ldr	r3, [r7, #4]
 800e7ba:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800e7bc:	041b      	lsls	r3, r3, #16
 800e7be:	4619      	mov	r1, r3
 800e7c0:	4610      	mov	r0, r2
 800e7c2:	f002 feb3 	bl	801152c <SDMMC_CmdAppCommand>
 800e7c6:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 800e7c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e7ca:	2b00      	cmp	r3, #0
 800e7cc:	d001      	beq.n	800e7d2 <SD_FindSCR+0x56>
  {
    return errorstate;
 800e7ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e7d0:	e09e      	b.n	800e910 <SD_FindSCR+0x194>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800e7d2:	f04f 33ff 	mov.w	r3, #4294967295
 800e7d6:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 800e7d8:	2308      	movs	r3, #8
 800e7da:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_8B;
 800e7dc:	2330      	movs	r3, #48	; 0x30
 800e7de:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 800e7e0:	2302      	movs	r3, #2
 800e7e2:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800e7e4:	2300      	movs	r3, #0
 800e7e6:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 800e7e8:	2301      	movs	r3, #1
 800e7ea:	627b      	str	r3, [r7, #36]	; 0x24
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 800e7ec:	687b      	ldr	r3, [r7, #4]
 800e7ee:	681b      	ldr	r3, [r3, #0]
 800e7f0:	f107 0210 	add.w	r2, r7, #16
 800e7f4:	4611      	mov	r1, r2
 800e7f6:	4618      	mov	r0, r3
 800e7f8:	f002 fd1e 	bl	8011238 <SDMMC_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 800e7fc:	687b      	ldr	r3, [r7, #4]
 800e7fe:	681b      	ldr	r3, [r3, #0]
 800e800:	4618      	mov	r0, r3
 800e802:	f002 fef9 	bl	80115f8 <SDMMC_CmdSendSCR>
 800e806:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 800e808:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e80a:	2b00      	cmp	r3, #0
 800e80c:	d027      	beq.n	800e85e <SD_FindSCR+0xe2>
  {
    return errorstate;
 800e80e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e810:	e07e      	b.n	800e910 <SD_FindSCR+0x194>
  }

  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND | SDMMC_FLAG_DATAEND))
  {
    if((!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOE)) && (index == 0U))
 800e812:	687b      	ldr	r3, [r7, #4]
 800e814:	681b      	ldr	r3, [r3, #0]
 800e816:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e818:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800e81c:	2b00      	cmp	r3, #0
 800e81e:	d113      	bne.n	800e848 <SD_FindSCR+0xcc>
 800e820:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e822:	2b00      	cmp	r3, #0
 800e824:	d110      	bne.n	800e848 <SD_FindSCR+0xcc>
    {
      tempscr[0] = SDMMC_ReadFIFO(hsd->Instance);
 800e826:	687b      	ldr	r3, [r7, #4]
 800e828:	681b      	ldr	r3, [r3, #0]
 800e82a:	4618      	mov	r0, r3
 800e82c:	f002 fc7c 	bl	8011128 <SDMMC_ReadFIFO>
 800e830:	4603      	mov	r3, r0
 800e832:	60bb      	str	r3, [r7, #8]
      tempscr[1] = SDMMC_ReadFIFO(hsd->Instance);
 800e834:	687b      	ldr	r3, [r7, #4]
 800e836:	681b      	ldr	r3, [r3, #0]
 800e838:	4618      	mov	r0, r3
 800e83a:	f002 fc75 	bl	8011128 <SDMMC_ReadFIFO>
 800e83e:	4603      	mov	r3, r0
 800e840:	60fb      	str	r3, [r7, #12]
      index++;
 800e842:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e844:	3301      	adds	r3, #1
 800e846:	637b      	str	r3, [r7, #52]	; 0x34
    }


    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800e848:	f7f5 ff3a 	bl	80046c0 <HAL_GetTick>
 800e84c:	4602      	mov	r2, r0
 800e84e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e850:	1ad3      	subs	r3, r2, r3
 800e852:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e856:	d102      	bne.n	800e85e <SD_FindSCR+0xe2>
    {
      return HAL_SD_ERROR_TIMEOUT;
 800e858:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800e85c:	e058      	b.n	800e910 <SD_FindSCR+0x194>
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND | SDMMC_FLAG_DATAEND))
 800e85e:	687b      	ldr	r3, [r7, #4]
 800e860:	681b      	ldr	r3, [r3, #0]
 800e862:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800e864:	f240 532a 	movw	r3, #1322	; 0x52a
 800e868:	4013      	ands	r3, r2
 800e86a:	2b00      	cmp	r3, #0
 800e86c:	d0d1      	beq.n	800e812 <SD_FindSCR+0x96>
    }
  }

  if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 800e86e:	687b      	ldr	r3, [r7, #4]
 800e870:	681b      	ldr	r3, [r3, #0]
 800e872:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e874:	f003 0308 	and.w	r3, r3, #8
 800e878:	2b00      	cmp	r3, #0
 800e87a:	d005      	beq.n	800e888 <SD_FindSCR+0x10c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DTIMEOUT);
 800e87c:	687b      	ldr	r3, [r7, #4]
 800e87e:	681b      	ldr	r3, [r3, #0]
 800e880:	2208      	movs	r2, #8
 800e882:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 800e884:	2308      	movs	r3, #8
 800e886:	e043      	b.n	800e910 <SD_FindSCR+0x194>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 800e888:	687b      	ldr	r3, [r7, #4]
 800e88a:	681b      	ldr	r3, [r3, #0]
 800e88c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e88e:	f003 0302 	and.w	r3, r3, #2
 800e892:	2b00      	cmp	r3, #0
 800e894:	d005      	beq.n	800e8a2 <SD_FindSCR+0x126>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DCRCFAIL);
 800e896:	687b      	ldr	r3, [r7, #4]
 800e898:	681b      	ldr	r3, [r3, #0]
 800e89a:	2202      	movs	r2, #2
 800e89c:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 800e89e:	2302      	movs	r3, #2
 800e8a0:	e036      	b.n	800e910 <SD_FindSCR+0x194>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 800e8a2:	687b      	ldr	r3, [r7, #4]
 800e8a4:	681b      	ldr	r3, [r3, #0]
 800e8a6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e8a8:	f003 0320 	and.w	r3, r3, #32
 800e8ac:	2b00      	cmp	r3, #0
 800e8ae:	d005      	beq.n	800e8bc <SD_FindSCR+0x140>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_RXOVERR);
 800e8b0:	687b      	ldr	r3, [r7, #4]
 800e8b2:	681b      	ldr	r3, [r3, #0]
 800e8b4:	2220      	movs	r2, #32
 800e8b6:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 800e8b8:	2320      	movs	r3, #32
 800e8ba:	e029      	b.n	800e910 <SD_FindSCR+0x194>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800e8bc:	687b      	ldr	r3, [r7, #4]
 800e8be:	681b      	ldr	r3, [r3, #0]
 800e8c0:	4a15      	ldr	r2, [pc, #84]	; (800e918 <SD_FindSCR+0x19c>)
 800e8c2:	639a      	str	r2, [r3, #56]	; 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 800e8c4:	68fb      	ldr	r3, [r7, #12]
 800e8c6:	061a      	lsls	r2, r3, #24
 800e8c8:	68fb      	ldr	r3, [r7, #12]
 800e8ca:	021b      	lsls	r3, r3, #8
 800e8cc:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800e8d0:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 800e8d2:	68fb      	ldr	r3, [r7, #12]
 800e8d4:	0a1b      	lsrs	r3, r3, #8
 800e8d6:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 800e8da:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 800e8dc:	68fb      	ldr	r3, [r7, #12]
 800e8de:	0e1b      	lsrs	r3, r3, #24
 800e8e0:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 800e8e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e8e4:	601a      	str	r2, [r3, #0]
    scr++;
 800e8e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e8e8:	3304      	adds	r3, #4
 800e8ea:	62fb      	str	r3, [r7, #44]	; 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 800e8ec:	68bb      	ldr	r3, [r7, #8]
 800e8ee:	061a      	lsls	r2, r3, #24
 800e8f0:	68bb      	ldr	r3, [r7, #8]
 800e8f2:	021b      	lsls	r3, r3, #8
 800e8f4:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800e8f8:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 800e8fa:	68bb      	ldr	r3, [r7, #8]
 800e8fc:	0a1b      	lsrs	r3, r3, #8
 800e8fe:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 800e902:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 800e904:	68bb      	ldr	r3, [r7, #8]
 800e906:	0e1b      	lsrs	r3, r3, #24
 800e908:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 800e90a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e90c:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 800e90e:	2300      	movs	r3, #0
}
 800e910:	4618      	mov	r0, r3
 800e912:	3738      	adds	r7, #56	; 0x38
 800e914:	46bd      	mov	sp, r7
 800e916:	bd80      	pop	{r7, pc}
 800e918:	18000f3a 	.word	0x18000f3a

0800e91c <SD_Read_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Read_IT(SD_HandleTypeDef *hsd)
{
 800e91c:	b580      	push	{r7, lr}
 800e91e:	b086      	sub	sp, #24
 800e920:	af00      	add	r7, sp, #0
 800e922:	6078      	str	r0, [r7, #4]
  uint32_t count, data;
  uint8_t* tmp;

  tmp = hsd->pRxBuffPtr;
 800e924:	687b      	ldr	r3, [r7, #4]
 800e926:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e928:	613b      	str	r3, [r7, #16]

  if (hsd->RxXferSize >= 32U)
 800e92a:	687b      	ldr	r3, [r7, #4]
 800e92c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e92e:	2b1f      	cmp	r3, #31
 800e930:	d936      	bls.n	800e9a0 <SD_Read_IT+0x84>
  {
    /* Read data from SDMMC Rx FIFO */
    for(count = 0U; count < 8U; count++)
 800e932:	2300      	movs	r3, #0
 800e934:	617b      	str	r3, [r7, #20]
 800e936:	e027      	b.n	800e988 <SD_Read_IT+0x6c>
    {
      data = SDMMC_ReadFIFO(hsd->Instance);
 800e938:	687b      	ldr	r3, [r7, #4]
 800e93a:	681b      	ldr	r3, [r3, #0]
 800e93c:	4618      	mov	r0, r3
 800e93e:	f002 fbf3 	bl	8011128 <SDMMC_ReadFIFO>
 800e942:	60f8      	str	r0, [r7, #12]
      *tmp = (uint8_t)(data & 0xFFU);
 800e944:	68fb      	ldr	r3, [r7, #12]
 800e946:	b2da      	uxtb	r2, r3
 800e948:	693b      	ldr	r3, [r7, #16]
 800e94a:	701a      	strb	r2, [r3, #0]
      tmp++;
 800e94c:	693b      	ldr	r3, [r7, #16]
 800e94e:	3301      	adds	r3, #1
 800e950:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 8U) & 0xFFU);
 800e952:	68fb      	ldr	r3, [r7, #12]
 800e954:	0a1b      	lsrs	r3, r3, #8
 800e956:	b2da      	uxtb	r2, r3
 800e958:	693b      	ldr	r3, [r7, #16]
 800e95a:	701a      	strb	r2, [r3, #0]
      tmp++;
 800e95c:	693b      	ldr	r3, [r7, #16]
 800e95e:	3301      	adds	r3, #1
 800e960:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 16U) & 0xFFU);
 800e962:	68fb      	ldr	r3, [r7, #12]
 800e964:	0c1b      	lsrs	r3, r3, #16
 800e966:	b2da      	uxtb	r2, r3
 800e968:	693b      	ldr	r3, [r7, #16]
 800e96a:	701a      	strb	r2, [r3, #0]
      tmp++;
 800e96c:	693b      	ldr	r3, [r7, #16]
 800e96e:	3301      	adds	r3, #1
 800e970:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 24U) & 0xFFU);
 800e972:	68fb      	ldr	r3, [r7, #12]
 800e974:	0e1b      	lsrs	r3, r3, #24
 800e976:	b2da      	uxtb	r2, r3
 800e978:	693b      	ldr	r3, [r7, #16]
 800e97a:	701a      	strb	r2, [r3, #0]
      tmp++;
 800e97c:	693b      	ldr	r3, [r7, #16]
 800e97e:	3301      	adds	r3, #1
 800e980:	613b      	str	r3, [r7, #16]
    for(count = 0U; count < 8U; count++)
 800e982:	697b      	ldr	r3, [r7, #20]
 800e984:	3301      	adds	r3, #1
 800e986:	617b      	str	r3, [r7, #20]
 800e988:	697b      	ldr	r3, [r7, #20]
 800e98a:	2b07      	cmp	r3, #7
 800e98c:	d9d4      	bls.n	800e938 <SD_Read_IT+0x1c>
    }

    hsd->pRxBuffPtr = tmp;
 800e98e:	687b      	ldr	r3, [r7, #4]
 800e990:	693a      	ldr	r2, [r7, #16]
 800e992:	629a      	str	r2, [r3, #40]	; 0x28
    hsd->RxXferSize -= 32U;
 800e994:	687b      	ldr	r3, [r7, #4]
 800e996:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e998:	f1a3 0220 	sub.w	r2, r3, #32
 800e99c:	687b      	ldr	r3, [r7, #4]
 800e99e:	62da      	str	r2, [r3, #44]	; 0x2c
  }
}
 800e9a0:	bf00      	nop
 800e9a2:	3718      	adds	r7, #24
 800e9a4:	46bd      	mov	sp, r7
 800e9a6:	bd80      	pop	{r7, pc}

0800e9a8 <SD_Write_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Write_IT(SD_HandleTypeDef *hsd)
{
 800e9a8:	b580      	push	{r7, lr}
 800e9aa:	b086      	sub	sp, #24
 800e9ac:	af00      	add	r7, sp, #0
 800e9ae:	6078      	str	r0, [r7, #4]
  uint32_t count, data;
  uint8_t* tmp;

  tmp = hsd->pTxBuffPtr;
 800e9b0:	687b      	ldr	r3, [r7, #4]
 800e9b2:	6a1b      	ldr	r3, [r3, #32]
 800e9b4:	613b      	str	r3, [r7, #16]

  if (hsd->TxXferSize >= 32U)
 800e9b6:	687b      	ldr	r3, [r7, #4]
 800e9b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e9ba:	2b1f      	cmp	r3, #31
 800e9bc:	d93a      	bls.n	800ea34 <SD_Write_IT+0x8c>
  {
    /* Write data to SDMMC Tx FIFO */
    for(count = 0U; count < 8U; count++)
 800e9be:	2300      	movs	r3, #0
 800e9c0:	617b      	str	r3, [r7, #20]
 800e9c2:	e02b      	b.n	800ea1c <SD_Write_IT+0x74>
    {
      data = (uint32_t)(*tmp);
 800e9c4:	693b      	ldr	r3, [r7, #16]
 800e9c6:	781b      	ldrb	r3, [r3, #0]
 800e9c8:	60fb      	str	r3, [r7, #12]
      tmp++;
 800e9ca:	693b      	ldr	r3, [r7, #16]
 800e9cc:	3301      	adds	r3, #1
 800e9ce:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 8U);
 800e9d0:	693b      	ldr	r3, [r7, #16]
 800e9d2:	781b      	ldrb	r3, [r3, #0]
 800e9d4:	021a      	lsls	r2, r3, #8
 800e9d6:	68fb      	ldr	r3, [r7, #12]
 800e9d8:	4313      	orrs	r3, r2
 800e9da:	60fb      	str	r3, [r7, #12]
      tmp++;
 800e9dc:	693b      	ldr	r3, [r7, #16]
 800e9de:	3301      	adds	r3, #1
 800e9e0:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 16U);
 800e9e2:	693b      	ldr	r3, [r7, #16]
 800e9e4:	781b      	ldrb	r3, [r3, #0]
 800e9e6:	041a      	lsls	r2, r3, #16
 800e9e8:	68fb      	ldr	r3, [r7, #12]
 800e9ea:	4313      	orrs	r3, r2
 800e9ec:	60fb      	str	r3, [r7, #12]
      tmp++;
 800e9ee:	693b      	ldr	r3, [r7, #16]
 800e9f0:	3301      	adds	r3, #1
 800e9f2:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 24U);
 800e9f4:	693b      	ldr	r3, [r7, #16]
 800e9f6:	781b      	ldrb	r3, [r3, #0]
 800e9f8:	061a      	lsls	r2, r3, #24
 800e9fa:	68fb      	ldr	r3, [r7, #12]
 800e9fc:	4313      	orrs	r3, r2
 800e9fe:	60fb      	str	r3, [r7, #12]
      tmp++;
 800ea00:	693b      	ldr	r3, [r7, #16]
 800ea02:	3301      	adds	r3, #1
 800ea04:	613b      	str	r3, [r7, #16]
      (void)SDMMC_WriteFIFO(hsd->Instance, &data);
 800ea06:	687b      	ldr	r3, [r7, #4]
 800ea08:	681b      	ldr	r3, [r3, #0]
 800ea0a:	f107 020c 	add.w	r2, r7, #12
 800ea0e:	4611      	mov	r1, r2
 800ea10:	4618      	mov	r0, r3
 800ea12:	f002 fb96 	bl	8011142 <SDMMC_WriteFIFO>
    for(count = 0U; count < 8U; count++)
 800ea16:	697b      	ldr	r3, [r7, #20]
 800ea18:	3301      	adds	r3, #1
 800ea1a:	617b      	str	r3, [r7, #20]
 800ea1c:	697b      	ldr	r3, [r7, #20]
 800ea1e:	2b07      	cmp	r3, #7
 800ea20:	d9d0      	bls.n	800e9c4 <SD_Write_IT+0x1c>
    }

    hsd->pTxBuffPtr = tmp;
 800ea22:	687b      	ldr	r3, [r7, #4]
 800ea24:	693a      	ldr	r2, [r7, #16]
 800ea26:	621a      	str	r2, [r3, #32]
    hsd->TxXferSize -= 32U;
 800ea28:	687b      	ldr	r3, [r7, #4]
 800ea2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ea2c:	f1a3 0220 	sub.w	r2, r3, #32
 800ea30:	687b      	ldr	r3, [r7, #4]
 800ea32:	625a      	str	r2, [r3, #36]	; 0x24
  }
}
 800ea34:	bf00      	nop
 800ea36:	3718      	adds	r7, #24
 800ea38:	46bd      	mov	sp, r7
 800ea3a:	bd80      	pop	{r7, pc}

0800ea3c <HAL_SDEx_Read_DMADoubleBuf0CpltCallback>:
  * @brief Read DMA Buffer 0 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Read_DMADoubleBuf0CpltCallback(SD_HandleTypeDef *hsd)
{
 800ea3c:	b480      	push	{r7}
 800ea3e:	b083      	sub	sp, #12
 800ea40:	af00      	add	r7, sp, #0
 800ea42:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Read_DMADoubleBuf0CpltCallback can be implemented in the user file
   */
}
 800ea44:	bf00      	nop
 800ea46:	370c      	adds	r7, #12
 800ea48:	46bd      	mov	sp, r7
 800ea4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea4e:	4770      	bx	lr

0800ea50 <HAL_SDEx_Read_DMADoubleBuf1CpltCallback>:
  * @brief Read DMA Buffer 1 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Read_DMADoubleBuf1CpltCallback(SD_HandleTypeDef *hsd)
{
 800ea50:	b480      	push	{r7}
 800ea52:	b083      	sub	sp, #12
 800ea54:	af00      	add	r7, sp, #0
 800ea56:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Read_DMADoubleBuf1CpltCallback can be implemented in the user file
   */
}
 800ea58:	bf00      	nop
 800ea5a:	370c      	adds	r7, #12
 800ea5c:	46bd      	mov	sp, r7
 800ea5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea62:	4770      	bx	lr

0800ea64 <HAL_SDEx_Write_DMADoubleBuf0CpltCallback>:
  * @brief Write DMA Buffer 0 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Write_DMADoubleBuf0CpltCallback(SD_HandleTypeDef *hsd)
{
 800ea64:	b480      	push	{r7}
 800ea66:	b083      	sub	sp, #12
 800ea68:	af00      	add	r7, sp, #0
 800ea6a:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Write_DMADoubleBuf0CpltCallback can be implemented in the user file
   */
}
 800ea6c:	bf00      	nop
 800ea6e:	370c      	adds	r7, #12
 800ea70:	46bd      	mov	sp, r7
 800ea72:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea76:	4770      	bx	lr

0800ea78 <HAL_SDEx_Write_DMADoubleBuf1CpltCallback>:
  * @brief Write DMA Buffer 1 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Write_DMADoubleBuf1CpltCallback(SD_HandleTypeDef *hsd)
{
 800ea78:	b480      	push	{r7}
 800ea7a:	b083      	sub	sp, #12
 800ea7c:	af00      	add	r7, sp, #0
 800ea7e:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Write_DMADoubleBuf1CpltCallback can be implemented in the user file
   */
}
 800ea80:	bf00      	nop
 800ea82:	370c      	adds	r7, #12
 800ea84:	46bd      	mov	sp, r7
 800ea86:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea8a:	4770      	bx	lr

0800ea8c <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800ea8c:	b580      	push	{r7, lr}
 800ea8e:	b084      	sub	sp, #16
 800ea90:	af00      	add	r7, sp, #0
 800ea92:	6078      	str	r0, [r7, #4]
  uint32_t crc_length = 0UL;
 800ea94:	2300      	movs	r3, #0
 800ea96:	60fb      	str	r3, [r7, #12]
  uint32_t packet_length;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800ea98:	687b      	ldr	r3, [r7, #4]
 800ea9a:	2b00      	cmp	r3, #0
 800ea9c:	d101      	bne.n	800eaa2 <HAL_SPI_Init+0x16>
  {
    return HAL_ERROR;
 800ea9e:	2301      	movs	r3, #1
 800eaa0:	e0e2      	b.n	800ec68 <HAL_SPI_Init+0x1dc>
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800eaa2:	687b      	ldr	r3, [r7, #4]
 800eaa4:	2200      	movs	r2, #0
 800eaa6:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 800eaa8:	687b      	ldr	r3, [r7, #4]
 800eaaa:	681b      	ldr	r3, [r3, #0]
 800eaac:	4a70      	ldr	r2, [pc, #448]	; (800ec70 <HAL_SPI_Init+0x1e4>)
 800eaae:	4293      	cmp	r3, r2
 800eab0:	d00f      	beq.n	800ead2 <HAL_SPI_Init+0x46>
 800eab2:	687b      	ldr	r3, [r7, #4]
 800eab4:	681b      	ldr	r3, [r3, #0]
 800eab6:	4a6f      	ldr	r2, [pc, #444]	; (800ec74 <HAL_SPI_Init+0x1e8>)
 800eab8:	4293      	cmp	r3, r2
 800eaba:	d00a      	beq.n	800ead2 <HAL_SPI_Init+0x46>
 800eabc:	687b      	ldr	r3, [r7, #4]
 800eabe:	681b      	ldr	r3, [r3, #0]
 800eac0:	4a6d      	ldr	r2, [pc, #436]	; (800ec78 <HAL_SPI_Init+0x1ec>)
 800eac2:	4293      	cmp	r3, r2
 800eac4:	d005      	beq.n	800ead2 <HAL_SPI_Init+0x46>
 800eac6:	687b      	ldr	r3, [r7, #4]
 800eac8:	68db      	ldr	r3, [r3, #12]
 800eaca:	2b0f      	cmp	r3, #15
 800eacc:	d901      	bls.n	800ead2 <HAL_SPI_Init+0x46>
  {
    return HAL_ERROR;
 800eace:	2301      	movs	r3, #1
 800ead0:	e0ca      	b.n	800ec68 <HAL_SPI_Init+0x1dc>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 800ead2:	6878      	ldr	r0, [r7, #4]
 800ead4:	f001 f870 	bl	800fbb8 <SPI_GetPacketSize>
 800ead8:	60b8      	str	r0, [r7, #8]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800eada:	687b      	ldr	r3, [r7, #4]
 800eadc:	681b      	ldr	r3, [r3, #0]
 800eade:	4a64      	ldr	r2, [pc, #400]	; (800ec70 <HAL_SPI_Init+0x1e4>)
 800eae0:	4293      	cmp	r3, r2
 800eae2:	d00c      	beq.n	800eafe <HAL_SPI_Init+0x72>
 800eae4:	687b      	ldr	r3, [r7, #4]
 800eae6:	681b      	ldr	r3, [r3, #0]
 800eae8:	4a62      	ldr	r2, [pc, #392]	; (800ec74 <HAL_SPI_Init+0x1e8>)
 800eaea:	4293      	cmp	r3, r2
 800eaec:	d007      	beq.n	800eafe <HAL_SPI_Init+0x72>
 800eaee:	687b      	ldr	r3, [r7, #4]
 800eaf0:	681b      	ldr	r3, [r3, #0]
 800eaf2:	4a61      	ldr	r2, [pc, #388]	; (800ec78 <HAL_SPI_Init+0x1ec>)
 800eaf4:	4293      	cmp	r3, r2
 800eaf6:	d002      	beq.n	800eafe <HAL_SPI_Init+0x72>
 800eaf8:	68bb      	ldr	r3, [r7, #8]
 800eafa:	2b08      	cmp	r3, #8
 800eafc:	d811      	bhi.n	800eb22 <HAL_SPI_Init+0x96>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800eafe:	687b      	ldr	r3, [r7, #4]
 800eb00:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800eb02:	4a5b      	ldr	r2, [pc, #364]	; (800ec70 <HAL_SPI_Init+0x1e4>)
 800eb04:	4293      	cmp	r3, r2
 800eb06:	d009      	beq.n	800eb1c <HAL_SPI_Init+0x90>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800eb08:	687b      	ldr	r3, [r7, #4]
 800eb0a:	681b      	ldr	r3, [r3, #0]
 800eb0c:	4a59      	ldr	r2, [pc, #356]	; (800ec74 <HAL_SPI_Init+0x1e8>)
 800eb0e:	4293      	cmp	r3, r2
 800eb10:	d004      	beq.n	800eb1c <HAL_SPI_Init+0x90>
 800eb12:	687b      	ldr	r3, [r7, #4]
 800eb14:	681b      	ldr	r3, [r3, #0]
 800eb16:	4a58      	ldr	r2, [pc, #352]	; (800ec78 <HAL_SPI_Init+0x1ec>)
 800eb18:	4293      	cmp	r3, r2
 800eb1a:	d104      	bne.n	800eb26 <HAL_SPI_Init+0x9a>
 800eb1c:	68bb      	ldr	r3, [r7, #8]
 800eb1e:	2b10      	cmp	r3, #16
 800eb20:	d901      	bls.n	800eb26 <HAL_SPI_Init+0x9a>
  {
    return HAL_ERROR;
 800eb22:	2301      	movs	r3, #1
 800eb24:	e0a0      	b.n	800ec68 <HAL_SPI_Init+0x1dc>
      return HAL_ERROR;
    }
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800eb26:	687b      	ldr	r3, [r7, #4]
 800eb28:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800eb2c:	b2db      	uxtb	r3, r3
 800eb2e:	2b00      	cmp	r3, #0
 800eb30:	d106      	bne.n	800eb40 <HAL_SPI_Init+0xb4>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800eb32:	687b      	ldr	r3, [r7, #4]
 800eb34:	2200      	movs	r2, #0
 800eb36:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800eb3a:	6878      	ldr	r0, [r7, #4]
 800eb3c:	f7f5 fa92 	bl	8004064 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800eb40:	687b      	ldr	r3, [r7, #4]
 800eb42:	2202      	movs	r2, #2
 800eb44:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800eb48:	687b      	ldr	r3, [r7, #4]
 800eb4a:	681b      	ldr	r3, [r3, #0]
 800eb4c:	681a      	ldr	r2, [r3, #0]
 800eb4e:	687b      	ldr	r3, [r7, #4]
 800eb50:	681b      	ldr	r3, [r3, #0]
 800eb52:	f022 0201 	bic.w	r2, r2, #1
 800eb56:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW))
 800eb58:	687b      	ldr	r3, [r7, #4]
 800eb5a:	699b      	ldr	r3, [r3, #24]
 800eb5c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800eb60:	d110      	bne.n	800eb84 <HAL_SPI_Init+0xf8>
 800eb62:	687b      	ldr	r3, [r7, #4]
 800eb64:	685b      	ldr	r3, [r3, #4]
 800eb66:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800eb6a:	d10b      	bne.n	800eb84 <HAL_SPI_Init+0xf8>
 800eb6c:	687b      	ldr	r3, [r7, #4]
 800eb6e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800eb70:	2b00      	cmp	r3, #0
 800eb72:	d107      	bne.n	800eb84 <HAL_SPI_Init+0xf8>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 800eb74:	687b      	ldr	r3, [r7, #4]
 800eb76:	681b      	ldr	r3, [r3, #0]
 800eb78:	681a      	ldr	r2, [r3, #0]
 800eb7a:	687b      	ldr	r3, [r7, #4]
 800eb7c:	681b      	ldr	r3, [r3, #0]
 800eb7e:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800eb82:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 800eb84:	687b      	ldr	r3, [r7, #4]
 800eb86:	69da      	ldr	r2, [r3, #28]
 800eb88:	687b      	ldr	r3, [r7, #4]
 800eb8a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800eb8c:	431a      	orrs	r2, r3
 800eb8e:	68fb      	ldr	r3, [r7, #12]
 800eb90:	431a      	orrs	r2, r3
 800eb92:	687b      	ldr	r3, [r7, #4]
 800eb94:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800eb96:	ea42 0103 	orr.w	r1, r2, r3
 800eb9a:	687b      	ldr	r3, [r7, #4]
 800eb9c:	68da      	ldr	r2, [r3, #12]
 800eb9e:	687b      	ldr	r3, [r7, #4]
 800eba0:	681b      	ldr	r3, [r3, #0]
 800eba2:	430a      	orrs	r2, r1
 800eba4:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode     | hspi->Init.TIMode           | hspi->Init.NSSPolarity             |
 800eba6:	687b      	ldr	r3, [r7, #4]
 800eba8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800ebaa:	687b      	ldr	r3, [r7, #4]
 800ebac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ebae:	431a      	orrs	r2, r3
 800ebb0:	687b      	ldr	r3, [r7, #4]
 800ebb2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ebb4:	431a      	orrs	r2, r3
 800ebb6:	687b      	ldr	r3, [r7, #4]
 800ebb8:	699b      	ldr	r3, [r3, #24]
 800ebba:	431a      	orrs	r2, r3
 800ebbc:	687b      	ldr	r3, [r7, #4]
 800ebbe:	691b      	ldr	r3, [r3, #16]
 800ebc0:	431a      	orrs	r2, r3
 800ebc2:	687b      	ldr	r3, [r7, #4]
 800ebc4:	695b      	ldr	r3, [r3, #20]
 800ebc6:	431a      	orrs	r2, r3
 800ebc8:	687b      	ldr	r3, [r7, #4]
 800ebca:	6a1b      	ldr	r3, [r3, #32]
 800ebcc:	431a      	orrs	r2, r3
 800ebce:	687b      	ldr	r3, [r7, #4]
 800ebd0:	685b      	ldr	r3, [r3, #4]
 800ebd2:	431a      	orrs	r2, r3
 800ebd4:	687b      	ldr	r3, [r7, #4]
 800ebd6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ebd8:	431a      	orrs	r2, r3
 800ebda:	687b      	ldr	r3, [r7, #4]
 800ebdc:	689b      	ldr	r3, [r3, #8]
 800ebde:	431a      	orrs	r2, r3
 800ebe0:	687b      	ldr	r3, [r7, #4]
 800ebe2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800ebe4:	ea42 0103 	orr.w	r1, r2, r3
 800ebe8:	687b      	ldr	r3, [r7, #4]
 800ebea:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800ebec:	687b      	ldr	r3, [r7, #4]
 800ebee:	681b      	ldr	r3, [r3, #0]
 800ebf0:	430a      	orrs	r2, r1
 800ebf2:	60da      	str	r2, [r3, #12]
    WRITE_REG(hspi->Instance->CRCPOLY, hspi->Init.CRCPolynomial);
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 800ebf4:	687b      	ldr	r3, [r7, #4]
 800ebf6:	685b      	ldr	r3, [r3, #4]
 800ebf8:	2b00      	cmp	r3, #0
 800ebfa:	d113      	bne.n	800ec24 <HAL_SPI_Init+0x198>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 800ebfc:	687b      	ldr	r3, [r7, #4]
 800ebfe:	681b      	ldr	r3, [r3, #0]
 800ec00:	689b      	ldr	r3, [r3, #8]
 800ec02:	f423 52c0 	bic.w	r2, r3, #6144	; 0x1800
 800ec06:	687b      	ldr	r3, [r7, #4]
 800ec08:	681b      	ldr	r3, [r3, #0]
 800ec0a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800ec0e:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 800ec10:	687b      	ldr	r3, [r7, #4]
 800ec12:	681b      	ldr	r3, [r3, #0]
 800ec14:	689b      	ldr	r3, [r3, #8]
 800ec16:	f423 62c0 	bic.w	r2, r3, #1536	; 0x600
 800ec1a:	687b      	ldr	r3, [r7, #4]
 800ec1c:	681b      	ldr	r3, [r3, #0]
 800ec1e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800ec22:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800ec24:	687b      	ldr	r3, [r7, #4]
 800ec26:	681b      	ldr	r3, [r3, #0]
 800ec28:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800ec2a:	687b      	ldr	r3, [r7, #4]
 800ec2c:	681b      	ldr	r3, [r3, #0]
 800ec2e:	f022 0201 	bic.w	r2, r2, #1
 800ec32:	651a      	str	r2, [r3, #80]	; 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 800ec34:	687b      	ldr	r3, [r7, #4]
 800ec36:	685b      	ldr	r3, [r3, #4]
 800ec38:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800ec3c:	2b00      	cmp	r3, #0
 800ec3e:	d00a      	beq.n	800ec56 <HAL_SPI_Init+0x1ca>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 800ec40:	687b      	ldr	r3, [r7, #4]
 800ec42:	681b      	ldr	r3, [r3, #0]
 800ec44:	68db      	ldr	r3, [r3, #12]
 800ec46:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800ec4a:	687b      	ldr	r3, [r7, #4]
 800ec4c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800ec4e:	687b      	ldr	r3, [r7, #4]
 800ec50:	681b      	ldr	r3, [r3, #0]
 800ec52:	430a      	orrs	r2, r1
 800ec54:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800ec56:	687b      	ldr	r3, [r7, #4]
 800ec58:	2200      	movs	r2, #0
 800ec5a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 800ec5e:	687b      	ldr	r3, [r7, #4]
 800ec60:	2201      	movs	r2, #1
 800ec62:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  return HAL_OK;
 800ec66:	2300      	movs	r3, #0
}
 800ec68:	4618      	mov	r0, r3
 800ec6a:	3710      	adds	r7, #16
 800ec6c:	46bd      	mov	sp, r7
 800ec6e:	bd80      	pop	{r7, pc}
 800ec70:	40013000 	.word	0x40013000
 800ec74:	40003800 	.word	0x40003800
 800ec78:	40003c00 	.word	0x40003c00

0800ec7c <HAL_SPI_Transmit>:
  * @param  Size   : amount of data to be sent
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800ec7c:	b580      	push	{r7, lr}
 800ec7e:	b08a      	sub	sp, #40	; 0x28
 800ec80:	af02      	add	r7, sp, #8
 800ec82:	60f8      	str	r0, [r7, #12]
 800ec84:	60b9      	str	r1, [r7, #8]
 800ec86:	603b      	str	r3, [r7, #0]
 800ec88:	4613      	mov	r3, r2
 800ec8a:	80fb      	strh	r3, [r7, #6]
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 800ec8c:	68fb      	ldr	r3, [r7, #12]
 800ec8e:	681b      	ldr	r3, [r3, #0]
 800ec90:	3320      	adds	r3, #32
 800ec92:	61fb      	str	r3, [r7, #28]
#endif /* __GNUC__ */

  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800ec94:	2300      	movs	r3, #0
 800ec96:	76fb      	strb	r3, [r7, #27]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_TXONLY(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800ec98:	68fb      	ldr	r3, [r7, #12]
 800ec9a:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800ec9e:	2b01      	cmp	r3, #1
 800eca0:	d101      	bne.n	800eca6 <HAL_SPI_Transmit+0x2a>
 800eca2:	2302      	movs	r3, #2
 800eca4:	e1d7      	b.n	800f056 <HAL_SPI_Transmit+0x3da>
 800eca6:	68fb      	ldr	r3, [r7, #12]
 800eca8:	2201      	movs	r2, #1
 800ecaa:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800ecae:	f7f5 fd07 	bl	80046c0 <HAL_GetTick>
 800ecb2:	6178      	str	r0, [r7, #20]

  if (hspi->State != HAL_SPI_STATE_READY)
 800ecb4:	68fb      	ldr	r3, [r7, #12]
 800ecb6:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800ecba:	b2db      	uxtb	r3, r3
 800ecbc:	2b01      	cmp	r3, #1
 800ecbe:	d007      	beq.n	800ecd0 <HAL_SPI_Transmit+0x54>
  {
    errorcode = HAL_BUSY;
 800ecc0:	2302      	movs	r3, #2
 800ecc2:	76fb      	strb	r3, [r7, #27]
    __HAL_UNLOCK(hspi);
 800ecc4:	68fb      	ldr	r3, [r7, #12]
 800ecc6:	2200      	movs	r2, #0
 800ecc8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 800eccc:	7efb      	ldrb	r3, [r7, #27]
 800ecce:	e1c2      	b.n	800f056 <HAL_SPI_Transmit+0x3da>
  }

  if ((pData == NULL) || (Size == 0UL))
 800ecd0:	68bb      	ldr	r3, [r7, #8]
 800ecd2:	2b00      	cmp	r3, #0
 800ecd4:	d002      	beq.n	800ecdc <HAL_SPI_Transmit+0x60>
 800ecd6:	88fb      	ldrh	r3, [r7, #6]
 800ecd8:	2b00      	cmp	r3, #0
 800ecda:	d107      	bne.n	800ecec <HAL_SPI_Transmit+0x70>
  {
    errorcode = HAL_ERROR;
 800ecdc:	2301      	movs	r3, #1
 800ecde:	76fb      	strb	r3, [r7, #27]
    __HAL_UNLOCK(hspi);
 800ece0:	68fb      	ldr	r3, [r7, #12]
 800ece2:	2200      	movs	r2, #0
 800ece4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 800ece8:	7efb      	ldrb	r3, [r7, #27]
 800ecea:	e1b4      	b.n	800f056 <HAL_SPI_Transmit+0x3da>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800ecec:	68fb      	ldr	r3, [r7, #12]
 800ecee:	2203      	movs	r2, #3
 800ecf0:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800ecf4:	68fb      	ldr	r3, [r7, #12]
 800ecf6:	2200      	movs	r2, #0
 800ecf8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800ecfc:	68fb      	ldr	r3, [r7, #12]
 800ecfe:	68ba      	ldr	r2, [r7, #8]
 800ed00:	65da      	str	r2, [r3, #92]	; 0x5c
  hspi->TxXferSize  = Size;
 800ed02:	68fb      	ldr	r3, [r7, #12]
 800ed04:	88fa      	ldrh	r2, [r7, #6]
 800ed06:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
  hspi->TxXferCount = Size;
 800ed0a:	68fb      	ldr	r3, [r7, #12]
 800ed0c:	88fa      	ldrh	r2, [r7, #6]
 800ed0e:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = NULL;
 800ed12:	68fb      	ldr	r3, [r7, #12]
 800ed14:	2200      	movs	r2, #0
 800ed16:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->RxXferSize  = (uint16_t) 0UL;
 800ed18:	68fb      	ldr	r3, [r7, #12]
 800ed1a:	2200      	movs	r2, #0
 800ed1c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  hspi->RxXferCount = (uint16_t) 0UL;
 800ed20:	68fb      	ldr	r3, [r7, #12]
 800ed22:	2200      	movs	r2, #0
 800ed24:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  hspi->TxISR       = NULL;
 800ed28:	68fb      	ldr	r3, [r7, #12]
 800ed2a:	2200      	movs	r2, #0
 800ed2c:	675a      	str	r2, [r3, #116]	; 0x74
  hspi->RxISR       = NULL;
 800ed2e:	68fb      	ldr	r3, [r7, #12]
 800ed30:	2200      	movs	r2, #0
 800ed32:	671a      	str	r2, [r3, #112]	; 0x70

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800ed34:	68fb      	ldr	r3, [r7, #12]
 800ed36:	689b      	ldr	r3, [r3, #8]
 800ed38:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
 800ed3c:	d107      	bne.n	800ed4e <HAL_SPI_Transmit+0xd2>
  {
    SPI_1LINE_TX(hspi);
 800ed3e:	68fb      	ldr	r3, [r7, #12]
 800ed40:	681b      	ldr	r3, [r3, #0]
 800ed42:	681a      	ldr	r2, [r3, #0]
 800ed44:	68fb      	ldr	r3, [r7, #12]
 800ed46:	681b      	ldr	r3, [r3, #0]
 800ed48:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800ed4c:	601a      	str	r2, [r3, #0]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 800ed4e:	68fb      	ldr	r3, [r7, #12]
 800ed50:	681b      	ldr	r3, [r3, #0]
 800ed52:	685a      	ldr	r2, [r3, #4]
 800ed54:	4b96      	ldr	r3, [pc, #600]	; (800efb0 <HAL_SPI_Transmit+0x334>)
 800ed56:	4013      	ands	r3, r2
 800ed58:	88f9      	ldrh	r1, [r7, #6]
 800ed5a:	68fa      	ldr	r2, [r7, #12]
 800ed5c:	6812      	ldr	r2, [r2, #0]
 800ed5e:	430b      	orrs	r3, r1
 800ed60:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 800ed62:	68fb      	ldr	r3, [r7, #12]
 800ed64:	681b      	ldr	r3, [r3, #0]
 800ed66:	681a      	ldr	r2, [r3, #0]
 800ed68:	68fb      	ldr	r3, [r7, #12]
 800ed6a:	681b      	ldr	r3, [r3, #0]
 800ed6c:	f042 0201 	orr.w	r2, r2, #1
 800ed70:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800ed72:	68fb      	ldr	r3, [r7, #12]
 800ed74:	685b      	ldr	r3, [r3, #4]
 800ed76:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800ed7a:	d107      	bne.n	800ed8c <HAL_SPI_Transmit+0x110>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 800ed7c:	68fb      	ldr	r3, [r7, #12]
 800ed7e:	681b      	ldr	r3, [r3, #0]
 800ed80:	681a      	ldr	r2, [r3, #0]
 800ed82:	68fb      	ldr	r3, [r7, #12]
 800ed84:	681b      	ldr	r3, [r3, #0]
 800ed86:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800ed8a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 800ed8c:	68fb      	ldr	r3, [r7, #12]
 800ed8e:	68db      	ldr	r3, [r3, #12]
 800ed90:	2b0f      	cmp	r3, #15
 800ed92:	d947      	bls.n	800ee24 <HAL_SPI_Transmit+0x1a8>
  {
    /* Transmit data in 32 Bit mode */
    while (hspi->TxXferCount > 0UL)
 800ed94:	e03f      	b.n	800ee16 <HAL_SPI_Transmit+0x19a>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 800ed96:	68fb      	ldr	r3, [r7, #12]
 800ed98:	681b      	ldr	r3, [r3, #0]
 800ed9a:	695b      	ldr	r3, [r3, #20]
 800ed9c:	f003 0302 	and.w	r3, r3, #2
 800eda0:	2b02      	cmp	r3, #2
 800eda2:	d114      	bne.n	800edce <HAL_SPI_Transmit+0x152>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 800eda4:	68fb      	ldr	r3, [r7, #12]
 800eda6:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800eda8:	68fb      	ldr	r3, [r7, #12]
 800edaa:	681b      	ldr	r3, [r3, #0]
 800edac:	6812      	ldr	r2, [r2, #0]
 800edae:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 800edb0:	68fb      	ldr	r3, [r7, #12]
 800edb2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800edb4:	1d1a      	adds	r2, r3, #4
 800edb6:	68fb      	ldr	r3, [r7, #12]
 800edb8:	65da      	str	r2, [r3, #92]	; 0x5c
        hspi->TxXferCount--;
 800edba:	68fb      	ldr	r3, [r7, #12]
 800edbc:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800edc0:	b29b      	uxth	r3, r3
 800edc2:	3b01      	subs	r3, #1
 800edc4:	b29a      	uxth	r2, r3
 800edc6:	68fb      	ldr	r3, [r7, #12]
 800edc8:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 800edcc:	e023      	b.n	800ee16 <HAL_SPI_Transmit+0x19a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800edce:	f7f5 fc77 	bl	80046c0 <HAL_GetTick>
 800edd2:	4602      	mov	r2, r0
 800edd4:	697b      	ldr	r3, [r7, #20]
 800edd6:	1ad3      	subs	r3, r2, r3
 800edd8:	683a      	ldr	r2, [r7, #0]
 800edda:	429a      	cmp	r2, r3
 800eddc:	d803      	bhi.n	800ede6 <HAL_SPI_Transmit+0x16a>
 800edde:	683b      	ldr	r3, [r7, #0]
 800ede0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ede4:	d102      	bne.n	800edec <HAL_SPI_Transmit+0x170>
 800ede6:	683b      	ldr	r3, [r7, #0]
 800ede8:	2b00      	cmp	r3, #0
 800edea:	d114      	bne.n	800ee16 <HAL_SPI_Transmit+0x19a>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800edec:	68f8      	ldr	r0, [r7, #12]
 800edee:	f000 fe15 	bl	800fa1c <SPI_CloseTransfer>

          /* Process Unlocked */
          __HAL_UNLOCK(hspi);
 800edf2:	68fb      	ldr	r3, [r7, #12]
 800edf4:	2200      	movs	r2, #0
 800edf6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800edfa:	68fb      	ldr	r3, [r7, #12]
 800edfc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800ee00:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800ee04:	68fb      	ldr	r3, [r7, #12]
 800ee06:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800ee0a:	68fb      	ldr	r3, [r7, #12]
 800ee0c:	2201      	movs	r2, #1
 800ee0e:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_ERROR;
 800ee12:	2301      	movs	r3, #1
 800ee14:	e11f      	b.n	800f056 <HAL_SPI_Transmit+0x3da>
    while (hspi->TxXferCount > 0UL)
 800ee16:	68fb      	ldr	r3, [r7, #12]
 800ee18:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800ee1c:	b29b      	uxth	r3, r3
 800ee1e:	2b00      	cmp	r3, #0
 800ee20:	d1b9      	bne.n	800ed96 <HAL_SPI_Transmit+0x11a>
 800ee22:	e0f2      	b.n	800f00a <HAL_SPI_Transmit+0x38e>
        }
      }
    }
  }
  /* Transmit data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800ee24:	68fb      	ldr	r3, [r7, #12]
 800ee26:	68db      	ldr	r3, [r3, #12]
 800ee28:	2b07      	cmp	r3, #7
 800ee2a:	f240 80e7 	bls.w	800effc <HAL_SPI_Transmit+0x380>
  {
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0UL)
 800ee2e:	e05d      	b.n	800eeec <HAL_SPI_Transmit+0x270>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 800ee30:	68fb      	ldr	r3, [r7, #12]
 800ee32:	681b      	ldr	r3, [r3, #0]
 800ee34:	695b      	ldr	r3, [r3, #20]
 800ee36:	f003 0302 	and.w	r3, r3, #2
 800ee3a:	2b02      	cmp	r3, #2
 800ee3c:	d132      	bne.n	800eea4 <HAL_SPI_Transmit+0x228>
      {
        if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 800ee3e:	68fb      	ldr	r3, [r7, #12]
 800ee40:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800ee44:	b29b      	uxth	r3, r3
 800ee46:	2b01      	cmp	r3, #1
 800ee48:	d918      	bls.n	800ee7c <HAL_SPI_Transmit+0x200>
 800ee4a:	68fb      	ldr	r3, [r7, #12]
 800ee4c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ee4e:	2b00      	cmp	r3, #0
 800ee50:	d014      	beq.n	800ee7c <HAL_SPI_Transmit+0x200>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 800ee52:	68fb      	ldr	r3, [r7, #12]
 800ee54:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800ee56:	68fb      	ldr	r3, [r7, #12]
 800ee58:	681b      	ldr	r3, [r3, #0]
 800ee5a:	6812      	ldr	r2, [r2, #0]
 800ee5c:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 800ee5e:	68fb      	ldr	r3, [r7, #12]
 800ee60:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800ee62:	1d1a      	adds	r2, r3, #4
 800ee64:	68fb      	ldr	r3, [r7, #12]
 800ee66:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 800ee68:	68fb      	ldr	r3, [r7, #12]
 800ee6a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800ee6e:	b29b      	uxth	r3, r3
 800ee70:	3b02      	subs	r3, #2
 800ee72:	b29a      	uxth	r2, r3
 800ee74:	68fb      	ldr	r3, [r7, #12]
 800ee76:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 800ee7a:	e037      	b.n	800eeec <HAL_SPI_Transmit+0x270>
        }
        else
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((uint16_t *)hspi->pTxBuffPtr);
 800ee7c:	68fb      	ldr	r3, [r7, #12]
 800ee7e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800ee80:	881a      	ldrh	r2, [r3, #0]
 800ee82:	69fb      	ldr	r3, [r7, #28]
 800ee84:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800ee86:	68fb      	ldr	r3, [r7, #12]
 800ee88:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800ee8a:	1c9a      	adds	r2, r3, #2
 800ee8c:	68fb      	ldr	r3, [r7, #12]
 800ee8e:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount--;
 800ee90:	68fb      	ldr	r3, [r7, #12]
 800ee92:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800ee96:	b29b      	uxth	r3, r3
 800ee98:	3b01      	subs	r3, #1
 800ee9a:	b29a      	uxth	r2, r3
 800ee9c:	68fb      	ldr	r3, [r7, #12]
 800ee9e:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 800eea2:	e023      	b.n	800eeec <HAL_SPI_Transmit+0x270>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800eea4:	f7f5 fc0c 	bl	80046c0 <HAL_GetTick>
 800eea8:	4602      	mov	r2, r0
 800eeaa:	697b      	ldr	r3, [r7, #20]
 800eeac:	1ad3      	subs	r3, r2, r3
 800eeae:	683a      	ldr	r2, [r7, #0]
 800eeb0:	429a      	cmp	r2, r3
 800eeb2:	d803      	bhi.n	800eebc <HAL_SPI_Transmit+0x240>
 800eeb4:	683b      	ldr	r3, [r7, #0]
 800eeb6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800eeba:	d102      	bne.n	800eec2 <HAL_SPI_Transmit+0x246>
 800eebc:	683b      	ldr	r3, [r7, #0]
 800eebe:	2b00      	cmp	r3, #0
 800eec0:	d114      	bne.n	800eeec <HAL_SPI_Transmit+0x270>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800eec2:	68f8      	ldr	r0, [r7, #12]
 800eec4:	f000 fdaa 	bl	800fa1c <SPI_CloseTransfer>

          /* Process Unlocked */
          __HAL_UNLOCK(hspi);
 800eec8:	68fb      	ldr	r3, [r7, #12]
 800eeca:	2200      	movs	r2, #0
 800eecc:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800eed0:	68fb      	ldr	r3, [r7, #12]
 800eed2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800eed6:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800eeda:	68fb      	ldr	r3, [r7, #12]
 800eedc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800eee0:	68fb      	ldr	r3, [r7, #12]
 800eee2:	2201      	movs	r2, #1
 800eee4:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_ERROR;
 800eee8:	2301      	movs	r3, #1
 800eeea:	e0b4      	b.n	800f056 <HAL_SPI_Transmit+0x3da>
    while (hspi->TxXferCount > 0UL)
 800eeec:	68fb      	ldr	r3, [r7, #12]
 800eeee:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800eef2:	b29b      	uxth	r3, r3
 800eef4:	2b00      	cmp	r3, #0
 800eef6:	d19b      	bne.n	800ee30 <HAL_SPI_Transmit+0x1b4>
 800eef8:	e087      	b.n	800f00a <HAL_SPI_Transmit+0x38e>
  else
  {
    while (hspi->TxXferCount > 0UL)
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 800eefa:	68fb      	ldr	r3, [r7, #12]
 800eefc:	681b      	ldr	r3, [r3, #0]
 800eefe:	695b      	ldr	r3, [r3, #20]
 800ef00:	f003 0302 	and.w	r3, r3, #2
 800ef04:	2b02      	cmp	r3, #2
 800ef06:	d155      	bne.n	800efb4 <HAL_SPI_Transmit+0x338>
      {
        if ((hspi->TxXferCount > 3UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_03DATA))
 800ef08:	68fb      	ldr	r3, [r7, #12]
 800ef0a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800ef0e:	b29b      	uxth	r3, r3
 800ef10:	2b03      	cmp	r3, #3
 800ef12:	d918      	bls.n	800ef46 <HAL_SPI_Transmit+0x2ca>
 800ef14:	68fb      	ldr	r3, [r7, #12]
 800ef16:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ef18:	2b40      	cmp	r3, #64	; 0x40
 800ef1a:	d914      	bls.n	800ef46 <HAL_SPI_Transmit+0x2ca>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 800ef1c:	68fb      	ldr	r3, [r7, #12]
 800ef1e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800ef20:	68fb      	ldr	r3, [r7, #12]
 800ef22:	681b      	ldr	r3, [r3, #0]
 800ef24:	6812      	ldr	r2, [r2, #0]
 800ef26:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 800ef28:	68fb      	ldr	r3, [r7, #12]
 800ef2a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800ef2c:	1d1a      	adds	r2, r3, #4
 800ef2e:	68fb      	ldr	r3, [r7, #12]
 800ef30:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)4UL;
 800ef32:	68fb      	ldr	r3, [r7, #12]
 800ef34:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800ef38:	b29b      	uxth	r3, r3
 800ef3a:	3b04      	subs	r3, #4
 800ef3c:	b29a      	uxth	r2, r3
 800ef3e:	68fb      	ldr	r3, [r7, #12]
 800ef40:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 800ef44:	e05a      	b.n	800effc <HAL_SPI_Transmit+0x380>
        }
        else if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 800ef46:	68fb      	ldr	r3, [r7, #12]
 800ef48:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800ef4c:	b29b      	uxth	r3, r3
 800ef4e:	2b01      	cmp	r3, #1
 800ef50:	d917      	bls.n	800ef82 <HAL_SPI_Transmit+0x306>
 800ef52:	68fb      	ldr	r3, [r7, #12]
 800ef54:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ef56:	2b00      	cmp	r3, #0
 800ef58:	d013      	beq.n	800ef82 <HAL_SPI_Transmit+0x306>
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((uint16_t *)hspi->pTxBuffPtr);
 800ef5a:	68fb      	ldr	r3, [r7, #12]
 800ef5c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800ef5e:	881a      	ldrh	r2, [r3, #0]
 800ef60:	69fb      	ldr	r3, [r7, #28]
 800ef62:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800ef64:	68fb      	ldr	r3, [r7, #12]
 800ef66:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800ef68:	1c9a      	adds	r2, r3, #2
 800ef6a:	68fb      	ldr	r3, [r7, #12]
 800ef6c:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 800ef6e:	68fb      	ldr	r3, [r7, #12]
 800ef70:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800ef74:	b29b      	uxth	r3, r3
 800ef76:	3b02      	subs	r3, #2
 800ef78:	b29a      	uxth	r2, r3
 800ef7a:	68fb      	ldr	r3, [r7, #12]
 800ef7c:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 800ef80:	e03c      	b.n	800effc <HAL_SPI_Transmit+0x380>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->TXDR) = *((uint8_t *)hspi->pTxBuffPtr);
 800ef82:	68fb      	ldr	r3, [r7, #12]
 800ef84:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800ef86:	68fb      	ldr	r3, [r7, #12]
 800ef88:	681b      	ldr	r3, [r3, #0]
 800ef8a:	3320      	adds	r3, #32
 800ef8c:	7812      	ldrb	r2, [r2, #0]
 800ef8e:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr += sizeof(uint8_t);
 800ef90:	68fb      	ldr	r3, [r7, #12]
 800ef92:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800ef94:	1c5a      	adds	r2, r3, #1
 800ef96:	68fb      	ldr	r3, [r7, #12]
 800ef98:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount--;
 800ef9a:	68fb      	ldr	r3, [r7, #12]
 800ef9c:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800efa0:	b29b      	uxth	r3, r3
 800efa2:	3b01      	subs	r3, #1
 800efa4:	b29a      	uxth	r2, r3
 800efa6:	68fb      	ldr	r3, [r7, #12]
 800efa8:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 800efac:	e026      	b.n	800effc <HAL_SPI_Transmit+0x380>
 800efae:	bf00      	nop
 800efb0:	ffff0000 	.word	0xffff0000
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800efb4:	f7f5 fb84 	bl	80046c0 <HAL_GetTick>
 800efb8:	4602      	mov	r2, r0
 800efba:	697b      	ldr	r3, [r7, #20]
 800efbc:	1ad3      	subs	r3, r2, r3
 800efbe:	683a      	ldr	r2, [r7, #0]
 800efc0:	429a      	cmp	r2, r3
 800efc2:	d803      	bhi.n	800efcc <HAL_SPI_Transmit+0x350>
 800efc4:	683b      	ldr	r3, [r7, #0]
 800efc6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800efca:	d102      	bne.n	800efd2 <HAL_SPI_Transmit+0x356>
 800efcc:	683b      	ldr	r3, [r7, #0]
 800efce:	2b00      	cmp	r3, #0
 800efd0:	d114      	bne.n	800effc <HAL_SPI_Transmit+0x380>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800efd2:	68f8      	ldr	r0, [r7, #12]
 800efd4:	f000 fd22 	bl	800fa1c <SPI_CloseTransfer>

          /* Process Unlocked */
          __HAL_UNLOCK(hspi);
 800efd8:	68fb      	ldr	r3, [r7, #12]
 800efda:	2200      	movs	r2, #0
 800efdc:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800efe0:	68fb      	ldr	r3, [r7, #12]
 800efe2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800efe6:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800efea:	68fb      	ldr	r3, [r7, #12]
 800efec:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800eff0:	68fb      	ldr	r3, [r7, #12]
 800eff2:	2201      	movs	r2, #1
 800eff4:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_ERROR;
 800eff8:	2301      	movs	r3, #1
 800effa:	e02c      	b.n	800f056 <HAL_SPI_Transmit+0x3da>
    while (hspi->TxXferCount > 0UL)
 800effc:	68fb      	ldr	r3, [r7, #12]
 800effe:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800f002:	b29b      	uxth	r3, r3
 800f004:	2b00      	cmp	r3, #0
 800f006:	f47f af78 	bne.w	800eefa <HAL_SPI_Transmit+0x27e>
      }
    }
  }

  /* Wait for Tx (and CRC) data to be sent */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, tickstart, Timeout) != HAL_OK)
 800f00a:	683b      	ldr	r3, [r7, #0]
 800f00c:	9300      	str	r3, [sp, #0]
 800f00e:	697b      	ldr	r3, [r7, #20]
 800f010:	2200      	movs	r2, #0
 800f012:	2108      	movs	r1, #8
 800f014:	68f8      	ldr	r0, [r7, #12]
 800f016:	f000 fda1 	bl	800fb5c <SPI_WaitOnFlagUntilTimeout>
 800f01a:	4603      	mov	r3, r0
 800f01c:	2b00      	cmp	r3, #0
 800f01e:	d007      	beq.n	800f030 <HAL_SPI_Transmit+0x3b4>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800f020:	68fb      	ldr	r3, [r7, #12]
 800f022:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800f026:	f043 0220 	orr.w	r2, r3, #32
 800f02a:	68fb      	ldr	r3, [r7, #12]
 800f02c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 800f030:	68f8      	ldr	r0, [r7, #12]
 800f032:	f000 fcf3 	bl	800fa1c <SPI_CloseTransfer>

  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800f036:	68fb      	ldr	r3, [r7, #12]
 800f038:	2200      	movs	r2, #0
 800f03a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  hspi->State = HAL_SPI_STATE_READY;
 800f03e:	68fb      	ldr	r3, [r7, #12]
 800f040:	2201      	movs	r2, #1
 800f042:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800f046:	68fb      	ldr	r3, [r7, #12]
 800f048:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800f04c:	2b00      	cmp	r3, #0
 800f04e:	d001      	beq.n	800f054 <HAL_SPI_Transmit+0x3d8>
  {
    return HAL_ERROR;
 800f050:	2301      	movs	r3, #1
 800f052:	e000      	b.n	800f056 <HAL_SPI_Transmit+0x3da>
  }
  return errorcode;
 800f054:	7efb      	ldrb	r3, [r7, #27]
}
 800f056:	4618      	mov	r0, r3
 800f058:	3720      	adds	r7, #32
 800f05a:	46bd      	mov	sp, r7
 800f05c:	bd80      	pop	{r7, pc}
 800f05e:	bf00      	nop

0800f060 <HAL_SPI_Receive>:
  * @param  Size   : amount of data to be received
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800f060:	b580      	push	{r7, lr}
 800f062:	b08a      	sub	sp, #40	; 0x28
 800f064:	af02      	add	r7, sp, #8
 800f066:	60f8      	str	r0, [r7, #12]
 800f068:	60b9      	str	r1, [r7, #8]
 800f06a:	603b      	str	r3, [r7, #0]
 800f06c:	4613      	mov	r3, r2
 800f06e:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800f070:	2300      	movs	r3, #0
 800f072:	77fb      	strb	r3, [r7, #31]
#if defined (__GNUC__)
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 800f074:	68fb      	ldr	r3, [r7, #12]
 800f076:	681b      	ldr	r3, [r3, #0]
 800f078:	3330      	adds	r3, #48	; 0x30
 800f07a:	61bb      	str	r3, [r7, #24]
#endif /* __GNUC__ */

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_RXONLY(hspi->Init.Direction));

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 800f07c:	68fb      	ldr	r3, [r7, #12]
 800f07e:	685b      	ldr	r3, [r3, #4]
 800f080:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800f084:	d112      	bne.n	800f0ac <HAL_SPI_Receive+0x4c>
 800f086:	68fb      	ldr	r3, [r7, #12]
 800f088:	689b      	ldr	r3, [r3, #8]
 800f08a:	2b00      	cmp	r3, #0
 800f08c:	d10e      	bne.n	800f0ac <HAL_SPI_Receive+0x4c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 800f08e:	68fb      	ldr	r3, [r7, #12]
 800f090:	2204      	movs	r2, #4
 800f092:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 800f096:	88fa      	ldrh	r2, [r7, #6]
 800f098:	683b      	ldr	r3, [r7, #0]
 800f09a:	9300      	str	r3, [sp, #0]
 800f09c:	4613      	mov	r3, r2
 800f09e:	68ba      	ldr	r2, [r7, #8]
 800f0a0:	68b9      	ldr	r1, [r7, #8]
 800f0a2:	68f8      	ldr	r0, [r7, #12]
 800f0a4:	f000 f9ce 	bl	800f444 <HAL_SPI_TransmitReceive>
 800f0a8:	4603      	mov	r3, r0
 800f0aa:	e1c7      	b.n	800f43c <HAL_SPI_Receive+0x3dc>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800f0ac:	68fb      	ldr	r3, [r7, #12]
 800f0ae:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800f0b2:	2b01      	cmp	r3, #1
 800f0b4:	d101      	bne.n	800f0ba <HAL_SPI_Receive+0x5a>
 800f0b6:	2302      	movs	r3, #2
 800f0b8:	e1c0      	b.n	800f43c <HAL_SPI_Receive+0x3dc>
 800f0ba:	68fb      	ldr	r3, [r7, #12]
 800f0bc:	2201      	movs	r2, #1
 800f0be:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800f0c2:	f7f5 fafd 	bl	80046c0 <HAL_GetTick>
 800f0c6:	6178      	str	r0, [r7, #20]

  if (hspi->State != HAL_SPI_STATE_READY)
 800f0c8:	68fb      	ldr	r3, [r7, #12]
 800f0ca:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800f0ce:	b2db      	uxtb	r3, r3
 800f0d0:	2b01      	cmp	r3, #1
 800f0d2:	d007      	beq.n	800f0e4 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_BUSY;
 800f0d4:	2302      	movs	r3, #2
 800f0d6:	77fb      	strb	r3, [r7, #31]
    __HAL_UNLOCK(hspi);
 800f0d8:	68fb      	ldr	r3, [r7, #12]
 800f0da:	2200      	movs	r2, #0
 800f0dc:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 800f0e0:	7ffb      	ldrb	r3, [r7, #31]
 800f0e2:	e1ab      	b.n	800f43c <HAL_SPI_Receive+0x3dc>
  }

  if ((pData == NULL) || (Size == 0UL))
 800f0e4:	68bb      	ldr	r3, [r7, #8]
 800f0e6:	2b00      	cmp	r3, #0
 800f0e8:	d002      	beq.n	800f0f0 <HAL_SPI_Receive+0x90>
 800f0ea:	88fb      	ldrh	r3, [r7, #6]
 800f0ec:	2b00      	cmp	r3, #0
 800f0ee:	d107      	bne.n	800f100 <HAL_SPI_Receive+0xa0>
  {
    errorcode = HAL_ERROR;
 800f0f0:	2301      	movs	r3, #1
 800f0f2:	77fb      	strb	r3, [r7, #31]
    __HAL_UNLOCK(hspi);
 800f0f4:	68fb      	ldr	r3, [r7, #12]
 800f0f6:	2200      	movs	r2, #0
 800f0f8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 800f0fc:	7ffb      	ldrb	r3, [r7, #31]
 800f0fe:	e19d      	b.n	800f43c <HAL_SPI_Receive+0x3dc>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800f100:	68fb      	ldr	r3, [r7, #12]
 800f102:	2204      	movs	r2, #4
 800f104:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800f108:	68fb      	ldr	r3, [r7, #12]
 800f10a:	2200      	movs	r2, #0
 800f10c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800f110:	68fb      	ldr	r3, [r7, #12]
 800f112:	68ba      	ldr	r2, [r7, #8]
 800f114:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->RxXferSize  = Size;
 800f116:	68fb      	ldr	r3, [r7, #12]
 800f118:	88fa      	ldrh	r2, [r7, #6]
 800f11a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  hspi->RxXferCount = Size;
 800f11e:	68fb      	ldr	r3, [r7, #12]
 800f120:	88fa      	ldrh	r2, [r7, #6]
 800f122:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = NULL;
 800f126:	68fb      	ldr	r3, [r7, #12]
 800f128:	2200      	movs	r2, #0
 800f12a:	65da      	str	r2, [r3, #92]	; 0x5c
  hspi->TxXferSize  = (uint16_t) 0UL;
 800f12c:	68fb      	ldr	r3, [r7, #12]
 800f12e:	2200      	movs	r2, #0
 800f130:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
  hspi->TxXferCount = (uint16_t) 0UL;
 800f134:	68fb      	ldr	r3, [r7, #12]
 800f136:	2200      	movs	r2, #0
 800f138:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->RxISR       = NULL;
 800f13c:	68fb      	ldr	r3, [r7, #12]
 800f13e:	2200      	movs	r2, #0
 800f140:	671a      	str	r2, [r3, #112]	; 0x70
  hspi->TxISR       = NULL;
 800f142:	68fb      	ldr	r3, [r7, #12]
 800f144:	2200      	movs	r2, #0
 800f146:	675a      	str	r2, [r3, #116]	; 0x74

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800f148:	68fb      	ldr	r3, [r7, #12]
 800f14a:	689b      	ldr	r3, [r3, #8]
 800f14c:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
 800f150:	d107      	bne.n	800f162 <HAL_SPI_Receive+0x102>
  {
    SPI_1LINE_RX(hspi);
 800f152:	68fb      	ldr	r3, [r7, #12]
 800f154:	681b      	ldr	r3, [r3, #0]
 800f156:	681a      	ldr	r2, [r3, #0]
 800f158:	68fb      	ldr	r3, [r7, #12]
 800f15a:	681b      	ldr	r3, [r3, #0]
 800f15c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800f160:	601a      	str	r2, [r3, #0]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 800f162:	68fb      	ldr	r3, [r7, #12]
 800f164:	681b      	ldr	r3, [r3, #0]
 800f166:	685a      	ldr	r2, [r3, #4]
 800f168:	4b94      	ldr	r3, [pc, #592]	; (800f3bc <HAL_SPI_Receive+0x35c>)
 800f16a:	4013      	ands	r3, r2
 800f16c:	88f9      	ldrh	r1, [r7, #6]
 800f16e:	68fa      	ldr	r2, [r7, #12]
 800f170:	6812      	ldr	r2, [r2, #0]
 800f172:	430b      	orrs	r3, r1
 800f174:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 800f176:	68fb      	ldr	r3, [r7, #12]
 800f178:	681b      	ldr	r3, [r3, #0]
 800f17a:	681a      	ldr	r2, [r3, #0]
 800f17c:	68fb      	ldr	r3, [r7, #12]
 800f17e:	681b      	ldr	r3, [r3, #0]
 800f180:	f042 0201 	orr.w	r2, r2, #1
 800f184:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800f186:	68fb      	ldr	r3, [r7, #12]
 800f188:	685b      	ldr	r3, [r3, #4]
 800f18a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800f18e:	d107      	bne.n	800f1a0 <HAL_SPI_Receive+0x140>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 800f190:	68fb      	ldr	r3, [r7, #12]
 800f192:	681b      	ldr	r3, [r3, #0]
 800f194:	681a      	ldr	r2, [r3, #0]
 800f196:	68fb      	ldr	r3, [r7, #12]
 800f198:	681b      	ldr	r3, [r3, #0]
 800f19a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800f19e:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 800f1a0:	68fb      	ldr	r3, [r7, #12]
 800f1a2:	68db      	ldr	r3, [r3, #12]
 800f1a4:	2b0f      	cmp	r3, #15
 800f1a6:	d948      	bls.n	800f23a <HAL_SPI_Receive+0x1da>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
 800f1a8:	e040      	b.n	800f22c <HAL_SPI_Receive+0x1cc>
    {
      /* Check the RXWNE/EOT flag */
      if ((hspi->Instance->SR & (SPI_FLAG_RXWNE | SPI_FLAG_EOT)) != 0UL)
 800f1aa:	68fb      	ldr	r3, [r7, #12]
 800f1ac:	681b      	ldr	r3, [r3, #0]
 800f1ae:	695a      	ldr	r2, [r3, #20]
 800f1b0:	f248 0308 	movw	r3, #32776	; 0x8008
 800f1b4:	4013      	ands	r3, r2
 800f1b6:	2b00      	cmp	r3, #0
 800f1b8:	d014      	beq.n	800f1e4 <HAL_SPI_Receive+0x184>
      {
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 800f1ba:	68fb      	ldr	r3, [r7, #12]
 800f1bc:	681a      	ldr	r2, [r3, #0]
 800f1be:	68fb      	ldr	r3, [r7, #12]
 800f1c0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800f1c2:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800f1c4:	601a      	str	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint32_t);
 800f1c6:	68fb      	ldr	r3, [r7, #12]
 800f1c8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800f1ca:	1d1a      	adds	r2, r3, #4
 800f1cc:	68fb      	ldr	r3, [r7, #12]
 800f1ce:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount--;
 800f1d0:	68fb      	ldr	r3, [r7, #12]
 800f1d2:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800f1d6:	b29b      	uxth	r3, r3
 800f1d8:	3b01      	subs	r3, #1
 800f1da:	b29a      	uxth	r2, r3
 800f1dc:	68fb      	ldr	r3, [r7, #12]
 800f1de:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800f1e2:	e023      	b.n	800f22c <HAL_SPI_Receive+0x1cc>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800f1e4:	f7f5 fa6c 	bl	80046c0 <HAL_GetTick>
 800f1e8:	4602      	mov	r2, r0
 800f1ea:	697b      	ldr	r3, [r7, #20]
 800f1ec:	1ad3      	subs	r3, r2, r3
 800f1ee:	683a      	ldr	r2, [r7, #0]
 800f1f0:	429a      	cmp	r2, r3
 800f1f2:	d803      	bhi.n	800f1fc <HAL_SPI_Receive+0x19c>
 800f1f4:	683b      	ldr	r3, [r7, #0]
 800f1f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f1fa:	d102      	bne.n	800f202 <HAL_SPI_Receive+0x1a2>
 800f1fc:	683b      	ldr	r3, [r7, #0]
 800f1fe:	2b00      	cmp	r3, #0
 800f200:	d114      	bne.n	800f22c <HAL_SPI_Receive+0x1cc>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800f202:	68f8      	ldr	r0, [r7, #12]
 800f204:	f000 fc0a 	bl	800fa1c <SPI_CloseTransfer>

          /* Process Unlocked */
          __HAL_UNLOCK(hspi);
 800f208:	68fb      	ldr	r3, [r7, #12]
 800f20a:	2200      	movs	r2, #0
 800f20c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800f210:	68fb      	ldr	r3, [r7, #12]
 800f212:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800f216:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800f21a:	68fb      	ldr	r3, [r7, #12]
 800f21c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800f220:	68fb      	ldr	r3, [r7, #12]
 800f222:	2201      	movs	r2, #1
 800f224:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_ERROR;
 800f228:	2301      	movs	r3, #1
 800f22a:	e107      	b.n	800f43c <HAL_SPI_Receive+0x3dc>
    while (hspi->RxXferCount > 0UL)
 800f22c:	68fb      	ldr	r3, [r7, #12]
 800f22e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800f232:	b29b      	uxth	r3, r3
 800f234:	2b00      	cmp	r3, #0
 800f236:	d1b8      	bne.n	800f1aa <HAL_SPI_Receive+0x14a>
 800f238:	e0ed      	b.n	800f416 <HAL_SPI_Receive+0x3b6>
        }
      }
    }
  }
  /* Receive data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800f23a:	68fb      	ldr	r3, [r7, #12]
 800f23c:	68db      	ldr	r3, [r3, #12]
 800f23e:	2b07      	cmp	r3, #7
 800f240:	f240 80e2 	bls.w	800f408 <HAL_SPI_Receive+0x3a8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
 800f244:	e05b      	b.n	800f2fe <HAL_SPI_Receive+0x29e>
    {
      /* Check the RXWNE/FRLVL flag */
      if ((hspi->Instance->SR & (SPI_FLAG_RXWNE | SPI_FLAG_FRLVL)) != 0UL)
 800f246:	68fb      	ldr	r3, [r7, #12]
 800f248:	681b      	ldr	r3, [r3, #0]
 800f24a:	695b      	ldr	r3, [r3, #20]
 800f24c:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 800f250:	2b00      	cmp	r3, #0
 800f252:	d030      	beq.n	800f2b6 <HAL_SPI_Receive+0x256>
      {
        if ((hspi->Instance->SR & SPI_FLAG_RXWNE) != 0UL)
 800f254:	68fb      	ldr	r3, [r7, #12]
 800f256:	681b      	ldr	r3, [r3, #0]
 800f258:	695b      	ldr	r3, [r3, #20]
 800f25a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800f25e:	2b00      	cmp	r3, #0
 800f260:	d014      	beq.n	800f28c <HAL_SPI_Receive+0x22c>
        {
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 800f262:	68fb      	ldr	r3, [r7, #12]
 800f264:	681a      	ldr	r2, [r3, #0]
 800f266:	68fb      	ldr	r3, [r7, #12]
 800f268:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800f26a:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800f26c:	601a      	str	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint32_t);
 800f26e:	68fb      	ldr	r3, [r7, #12]
 800f270:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800f272:	1d1a      	adds	r2, r3, #4
 800f274:	68fb      	ldr	r3, [r7, #12]
 800f276:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount -= (uint16_t)2UL;
 800f278:	68fb      	ldr	r3, [r7, #12]
 800f27a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800f27e:	b29b      	uxth	r3, r3
 800f280:	3b02      	subs	r3, #2
 800f282:	b29a      	uxth	r2, r3
 800f284:	68fb      	ldr	r3, [r7, #12]
 800f286:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800f28a:	e038      	b.n	800f2fe <HAL_SPI_Receive+0x29e>
        }
        else
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800f28c:	68fb      	ldr	r3, [r7, #12]
 800f28e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800f290:	69ba      	ldr	r2, [r7, #24]
 800f292:	8812      	ldrh	r2, [r2, #0]
 800f294:	b292      	uxth	r2, r2
 800f296:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 800f298:	68fb      	ldr	r3, [r7, #12]
 800f29a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800f29c:	1c9a      	adds	r2, r3, #2
 800f29e:	68fb      	ldr	r3, [r7, #12]
 800f2a0:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount--;
 800f2a2:	68fb      	ldr	r3, [r7, #12]
 800f2a4:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800f2a8:	b29b      	uxth	r3, r3
 800f2aa:	3b01      	subs	r3, #1
 800f2ac:	b29a      	uxth	r2, r3
 800f2ae:	68fb      	ldr	r3, [r7, #12]
 800f2b0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800f2b4:	e023      	b.n	800f2fe <HAL_SPI_Receive+0x29e>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800f2b6:	f7f5 fa03 	bl	80046c0 <HAL_GetTick>
 800f2ba:	4602      	mov	r2, r0
 800f2bc:	697b      	ldr	r3, [r7, #20]
 800f2be:	1ad3      	subs	r3, r2, r3
 800f2c0:	683a      	ldr	r2, [r7, #0]
 800f2c2:	429a      	cmp	r2, r3
 800f2c4:	d803      	bhi.n	800f2ce <HAL_SPI_Receive+0x26e>
 800f2c6:	683b      	ldr	r3, [r7, #0]
 800f2c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f2cc:	d102      	bne.n	800f2d4 <HAL_SPI_Receive+0x274>
 800f2ce:	683b      	ldr	r3, [r7, #0]
 800f2d0:	2b00      	cmp	r3, #0
 800f2d2:	d114      	bne.n	800f2fe <HAL_SPI_Receive+0x29e>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800f2d4:	68f8      	ldr	r0, [r7, #12]
 800f2d6:	f000 fba1 	bl	800fa1c <SPI_CloseTransfer>

          /* Process Unlocked */
          __HAL_UNLOCK(hspi);
 800f2da:	68fb      	ldr	r3, [r7, #12]
 800f2dc:	2200      	movs	r2, #0
 800f2de:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800f2e2:	68fb      	ldr	r3, [r7, #12]
 800f2e4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800f2e8:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800f2ec:	68fb      	ldr	r3, [r7, #12]
 800f2ee:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800f2f2:	68fb      	ldr	r3, [r7, #12]
 800f2f4:	2201      	movs	r2, #1
 800f2f6:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_ERROR;
 800f2fa:	2301      	movs	r3, #1
 800f2fc:	e09e      	b.n	800f43c <HAL_SPI_Receive+0x3dc>
    while (hspi->RxXferCount > 0UL)
 800f2fe:	68fb      	ldr	r3, [r7, #12]
 800f300:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800f304:	b29b      	uxth	r3, r3
 800f306:	2b00      	cmp	r3, #0
 800f308:	d19d      	bne.n	800f246 <HAL_SPI_Receive+0x1e6>
 800f30a:	e084      	b.n	800f416 <HAL_SPI_Receive+0x3b6>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
    {
      /* Check the RXWNE/FRLVL flag */
      if ((hspi->Instance->SR & (SPI_FLAG_RXWNE | SPI_FLAG_FRLVL)) != 0UL)
 800f30c:	68fb      	ldr	r3, [r7, #12]
 800f30e:	681b      	ldr	r3, [r3, #0]
 800f310:	695b      	ldr	r3, [r3, #20]
 800f312:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 800f316:	2b00      	cmp	r3, #0
 800f318:	d052      	beq.n	800f3c0 <HAL_SPI_Receive+0x360>
      {
        if ((hspi->Instance->SR & SPI_FLAG_RXWNE) != 0UL)
 800f31a:	68fb      	ldr	r3, [r7, #12]
 800f31c:	681b      	ldr	r3, [r3, #0]
 800f31e:	695b      	ldr	r3, [r3, #20]
 800f320:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800f324:	2b00      	cmp	r3, #0
 800f326:	d014      	beq.n	800f352 <HAL_SPI_Receive+0x2f2>
        {
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 800f328:	68fb      	ldr	r3, [r7, #12]
 800f32a:	681a      	ldr	r2, [r3, #0]
 800f32c:	68fb      	ldr	r3, [r7, #12]
 800f32e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800f330:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800f332:	601a      	str	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint32_t);
 800f334:	68fb      	ldr	r3, [r7, #12]
 800f336:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800f338:	1d1a      	adds	r2, r3, #4
 800f33a:	68fb      	ldr	r3, [r7, #12]
 800f33c:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount -= (uint16_t)4UL;
 800f33e:	68fb      	ldr	r3, [r7, #12]
 800f340:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800f344:	b29b      	uxth	r3, r3
 800f346:	3b04      	subs	r3, #4
 800f348:	b29a      	uxth	r2, r3
 800f34a:	68fb      	ldr	r3, [r7, #12]
 800f34c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800f350:	e05a      	b.n	800f408 <HAL_SPI_Receive+0x3a8>
        }
        else if ((hspi->Instance->SR & SPI_FLAG_FRLVL) > SPI_RX_FIFO_1PACKET)
 800f352:	68fb      	ldr	r3, [r7, #12]
 800f354:	681b      	ldr	r3, [r3, #0]
 800f356:	695b      	ldr	r3, [r3, #20]
 800f358:	f403 43c0 	and.w	r3, r3, #24576	; 0x6000
 800f35c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800f360:	d914      	bls.n	800f38c <HAL_SPI_Receive+0x32c>
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800f362:	68fb      	ldr	r3, [r7, #12]
 800f364:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800f366:	69ba      	ldr	r2, [r7, #24]
 800f368:	8812      	ldrh	r2, [r2, #0]
 800f36a:	b292      	uxth	r2, r2
 800f36c:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 800f36e:	68fb      	ldr	r3, [r7, #12]
 800f370:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800f372:	1c9a      	adds	r2, r3, #2
 800f374:	68fb      	ldr	r3, [r7, #12]
 800f376:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount -= (uint16_t)2UL;
 800f378:	68fb      	ldr	r3, [r7, #12]
 800f37a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800f37e:	b29b      	uxth	r3, r3
 800f380:	3b02      	subs	r3, #2
 800f382:	b29a      	uxth	r2, r3
 800f384:	68fb      	ldr	r3, [r7, #12]
 800f386:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800f38a:	e03d      	b.n	800f408 <HAL_SPI_Receive+0x3a8>
        }
        else
        {
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800f38c:	68fb      	ldr	r3, [r7, #12]
 800f38e:	681b      	ldr	r3, [r3, #0]
 800f390:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800f394:	68fb      	ldr	r3, [r7, #12]
 800f396:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800f398:	7812      	ldrb	r2, [r2, #0]
 800f39a:	b2d2      	uxtb	r2, r2
 800f39c:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 800f39e:	68fb      	ldr	r3, [r7, #12]
 800f3a0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800f3a2:	1c5a      	adds	r2, r3, #1
 800f3a4:	68fb      	ldr	r3, [r7, #12]
 800f3a6:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount--;
 800f3a8:	68fb      	ldr	r3, [r7, #12]
 800f3aa:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800f3ae:	b29b      	uxth	r3, r3
 800f3b0:	3b01      	subs	r3, #1
 800f3b2:	b29a      	uxth	r2, r3
 800f3b4:	68fb      	ldr	r3, [r7, #12]
 800f3b6:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800f3ba:	e025      	b.n	800f408 <HAL_SPI_Receive+0x3a8>
 800f3bc:	ffff0000 	.word	0xffff0000
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800f3c0:	f7f5 f97e 	bl	80046c0 <HAL_GetTick>
 800f3c4:	4602      	mov	r2, r0
 800f3c6:	697b      	ldr	r3, [r7, #20]
 800f3c8:	1ad3      	subs	r3, r2, r3
 800f3ca:	683a      	ldr	r2, [r7, #0]
 800f3cc:	429a      	cmp	r2, r3
 800f3ce:	d803      	bhi.n	800f3d8 <HAL_SPI_Receive+0x378>
 800f3d0:	683b      	ldr	r3, [r7, #0]
 800f3d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f3d6:	d102      	bne.n	800f3de <HAL_SPI_Receive+0x37e>
 800f3d8:	683b      	ldr	r3, [r7, #0]
 800f3da:	2b00      	cmp	r3, #0
 800f3dc:	d114      	bne.n	800f408 <HAL_SPI_Receive+0x3a8>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800f3de:	68f8      	ldr	r0, [r7, #12]
 800f3e0:	f000 fb1c 	bl	800fa1c <SPI_CloseTransfer>

          /* Process Unlocked */
          __HAL_UNLOCK(hspi);
 800f3e4:	68fb      	ldr	r3, [r7, #12]
 800f3e6:	2200      	movs	r2, #0
 800f3e8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800f3ec:	68fb      	ldr	r3, [r7, #12]
 800f3ee:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800f3f2:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800f3f6:	68fb      	ldr	r3, [r7, #12]
 800f3f8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800f3fc:	68fb      	ldr	r3, [r7, #12]
 800f3fe:	2201      	movs	r2, #1
 800f400:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_ERROR;
 800f404:	2301      	movs	r3, #1
 800f406:	e019      	b.n	800f43c <HAL_SPI_Receive+0x3dc>
    while (hspi->RxXferCount > 0UL)
 800f408:	68fb      	ldr	r3, [r7, #12]
 800f40a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800f40e:	b29b      	uxth	r3, r3
 800f410:	2b00      	cmp	r3, #0
 800f412:	f47f af7b 	bne.w	800f30c <HAL_SPI_Receive+0x2ac>
    }
  }
#endif /* USE_SPI_CRC */

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 800f416:	68f8      	ldr	r0, [r7, #12]
 800f418:	f000 fb00 	bl	800fa1c <SPI_CloseTransfer>

  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800f41c:	68fb      	ldr	r3, [r7, #12]
 800f41e:	2200      	movs	r2, #0
 800f420:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  hspi->State = HAL_SPI_STATE_READY;
 800f424:	68fb      	ldr	r3, [r7, #12]
 800f426:	2201      	movs	r2, #1
 800f428:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800f42c:	68fb      	ldr	r3, [r7, #12]
 800f42e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800f432:	2b00      	cmp	r3, #0
 800f434:	d001      	beq.n	800f43a <HAL_SPI_Receive+0x3da>
  {
    return HAL_ERROR;
 800f436:	2301      	movs	r3, #1
 800f438:	e000      	b.n	800f43c <HAL_SPI_Receive+0x3dc>
  }
  return errorcode;
 800f43a:	7ffb      	ldrb	r3, [r7, #31]
}
 800f43c:	4618      	mov	r0, r3
 800f43e:	3720      	adds	r7, #32
 800f440:	46bd      	mov	sp, r7
 800f442:	bd80      	pop	{r7, pc}

0800f444 <HAL_SPI_TransmitReceive>:
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800f444:	b580      	push	{r7, lr}
 800f446:	b08e      	sub	sp, #56	; 0x38
 800f448:	af02      	add	r7, sp, #8
 800f44a:	60f8      	str	r0, [r7, #12]
 800f44c:	60b9      	str	r1, [r7, #8]
 800f44e:	607a      	str	r2, [r7, #4]
 800f450:	807b      	strh	r3, [r7, #2]
  HAL_SPI_StateTypeDef tmp_state;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800f452:	2300      	movs	r3, #0
 800f454:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 800f458:	68fb      	ldr	r3, [r7, #12]
 800f45a:	681b      	ldr	r3, [r3, #0]
 800f45c:	3320      	adds	r3, #32
 800f45e:	627b      	str	r3, [r7, #36]	; 0x24
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 800f460:	68fb      	ldr	r3, [r7, #12]
 800f462:	681b      	ldr	r3, [r3, #0]
 800f464:	3330      	adds	r3, #48	; 0x30
 800f466:	623b      	str	r3, [r7, #32]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800f468:	68fb      	ldr	r3, [r7, #12]
 800f46a:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800f46e:	2b01      	cmp	r3, #1
 800f470:	d101      	bne.n	800f476 <HAL_SPI_TransmitReceive+0x32>
 800f472:	2302      	movs	r3, #2
 800f474:	e2ce      	b.n	800fa14 <HAL_SPI_TransmitReceive+0x5d0>
 800f476:	68fb      	ldr	r3, [r7, #12]
 800f478:	2201      	movs	r2, #1
 800f47a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800f47e:	f7f5 f91f 	bl	80046c0 <HAL_GetTick>
 800f482:	61f8      	str	r0, [r7, #28]

  initial_TxXferCount = Size;
 800f484:	887b      	ldrh	r3, [r7, #2]
 800f486:	85fb      	strh	r3, [r7, #46]	; 0x2e
  initial_RxXferCount = Size;
 800f488:	887b      	ldrh	r3, [r7, #2]
 800f48a:	85bb      	strh	r3, [r7, #44]	; 0x2c
  tmp_state           = hspi->State;
 800f48c:	68fb      	ldr	r3, [r7, #12]
 800f48e:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800f492:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 800f494:	68fb      	ldr	r3, [r7, #12]
 800f496:	685b      	ldr	r3, [r3, #4]
 800f498:	617b      	str	r3, [r7, #20]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800f49a:	7efb      	ldrb	r3, [r7, #27]
 800f49c:	2b01      	cmp	r3, #1
 800f49e:	d014      	beq.n	800f4ca <HAL_SPI_TransmitReceive+0x86>
 800f4a0:	697b      	ldr	r3, [r7, #20]
 800f4a2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800f4a6:	d106      	bne.n	800f4b6 <HAL_SPI_TransmitReceive+0x72>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800f4a8:	68fb      	ldr	r3, [r7, #12]
 800f4aa:	689b      	ldr	r3, [r3, #8]
 800f4ac:	2b00      	cmp	r3, #0
 800f4ae:	d102      	bne.n	800f4b6 <HAL_SPI_TransmitReceive+0x72>
 800f4b0:	7efb      	ldrb	r3, [r7, #27]
 800f4b2:	2b04      	cmp	r3, #4
 800f4b4:	d009      	beq.n	800f4ca <HAL_SPI_TransmitReceive+0x86>
  {
    errorcode = HAL_BUSY;
 800f4b6:	2302      	movs	r3, #2
 800f4b8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    __HAL_UNLOCK(hspi);
 800f4bc:	68fb      	ldr	r3, [r7, #12]
 800f4be:	2200      	movs	r2, #0
 800f4c0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 800f4c4:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800f4c8:	e2a4      	b.n	800fa14 <HAL_SPI_TransmitReceive+0x5d0>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0UL))
 800f4ca:	68bb      	ldr	r3, [r7, #8]
 800f4cc:	2b00      	cmp	r3, #0
 800f4ce:	d005      	beq.n	800f4dc <HAL_SPI_TransmitReceive+0x98>
 800f4d0:	687b      	ldr	r3, [r7, #4]
 800f4d2:	2b00      	cmp	r3, #0
 800f4d4:	d002      	beq.n	800f4dc <HAL_SPI_TransmitReceive+0x98>
 800f4d6:	887b      	ldrh	r3, [r7, #2]
 800f4d8:	2b00      	cmp	r3, #0
 800f4da:	d109      	bne.n	800f4f0 <HAL_SPI_TransmitReceive+0xac>
  {
    errorcode = HAL_ERROR;
 800f4dc:	2301      	movs	r3, #1
 800f4de:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    __HAL_UNLOCK(hspi);
 800f4e2:	68fb      	ldr	r3, [r7, #12]
 800f4e4:	2200      	movs	r2, #0
 800f4e6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 800f4ea:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800f4ee:	e291      	b.n	800fa14 <HAL_SPI_TransmitReceive+0x5d0>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800f4f0:	68fb      	ldr	r3, [r7, #12]
 800f4f2:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800f4f6:	b2db      	uxtb	r3, r3
 800f4f8:	2b04      	cmp	r3, #4
 800f4fa:	d003      	beq.n	800f504 <HAL_SPI_TransmitReceive+0xc0>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800f4fc:	68fb      	ldr	r3, [r7, #12]
 800f4fe:	2205      	movs	r2, #5
 800f500:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800f504:	68fb      	ldr	r3, [r7, #12]
 800f506:	2200      	movs	r2, #0
 800f508:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800f50c:	68fb      	ldr	r3, [r7, #12]
 800f50e:	687a      	ldr	r2, [r7, #4]
 800f510:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->RxXferCount = Size;
 800f512:	68fb      	ldr	r3, [r7, #12]
 800f514:	887a      	ldrh	r2, [r7, #2]
 800f516:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  hspi->RxXferSize  = Size;
 800f51a:	68fb      	ldr	r3, [r7, #12]
 800f51c:	887a      	ldrh	r2, [r7, #2]
 800f51e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800f522:	68fb      	ldr	r3, [r7, #12]
 800f524:	68ba      	ldr	r2, [r7, #8]
 800f526:	65da      	str	r2, [r3, #92]	; 0x5c
  hspi->TxXferCount = Size;
 800f528:	68fb      	ldr	r3, [r7, #12]
 800f52a:	887a      	ldrh	r2, [r7, #2]
 800f52c:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->TxXferSize  = Size;
 800f530:	68fb      	ldr	r3, [r7, #12]
 800f532:	887a      	ldrh	r2, [r7, #2]
 800f534:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800f538:	68fb      	ldr	r3, [r7, #12]
 800f53a:	2200      	movs	r2, #0
 800f53c:	671a      	str	r2, [r3, #112]	; 0x70
  hspi->TxISR       = NULL;
 800f53e:	68fb      	ldr	r3, [r7, #12]
 800f540:	2200      	movs	r2, #0
 800f542:	675a      	str	r2, [r3, #116]	; 0x74

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 800f544:	68fb      	ldr	r3, [r7, #12]
 800f546:	681b      	ldr	r3, [r3, #0]
 800f548:	685a      	ldr	r2, [r3, #4]
 800f54a:	4b9f      	ldr	r3, [pc, #636]	; (800f7c8 <HAL_SPI_TransmitReceive+0x384>)
 800f54c:	4013      	ands	r3, r2
 800f54e:	8879      	ldrh	r1, [r7, #2]
 800f550:	68fa      	ldr	r2, [r7, #12]
 800f552:	6812      	ldr	r2, [r2, #0]
 800f554:	430b      	orrs	r3, r1
 800f556:	6053      	str	r3, [r2, #4]

  __HAL_SPI_ENABLE(hspi);
 800f558:	68fb      	ldr	r3, [r7, #12]
 800f55a:	681b      	ldr	r3, [r3, #0]
 800f55c:	681a      	ldr	r2, [r3, #0]
 800f55e:	68fb      	ldr	r3, [r7, #12]
 800f560:	681b      	ldr	r3, [r3, #0]
 800f562:	f042 0201 	orr.w	r2, r2, #1
 800f566:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800f568:	68fb      	ldr	r3, [r7, #12]
 800f56a:	685b      	ldr	r3, [r3, #4]
 800f56c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800f570:	d107      	bne.n	800f582 <HAL_SPI_TransmitReceive+0x13e>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 800f572:	68fb      	ldr	r3, [r7, #12]
 800f574:	681b      	ldr	r3, [r3, #0]
 800f576:	681a      	ldr	r2, [r3, #0]
 800f578:	68fb      	ldr	r3, [r7, #12]
 800f57a:	681b      	ldr	r3, [r3, #0]
 800f57c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800f580:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 800f582:	68fb      	ldr	r3, [r7, #12]
 800f584:	68db      	ldr	r3, [r3, #12]
 800f586:	2b0f      	cmp	r3, #15
 800f588:	d970      	bls.n	800f66c <HAL_SPI_TransmitReceive+0x228>
  {
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 800f58a:	e068      	b.n	800f65e <HAL_SPI_TransmitReceive+0x21a>
    {
      /* Check TXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL))
 800f58c:	68fb      	ldr	r3, [r7, #12]
 800f58e:	681b      	ldr	r3, [r3, #0]
 800f590:	695b      	ldr	r3, [r3, #20]
 800f592:	f003 0302 	and.w	r3, r3, #2
 800f596:	2b02      	cmp	r3, #2
 800f598:	d11a      	bne.n	800f5d0 <HAL_SPI_TransmitReceive+0x18c>
 800f59a:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800f59c:	2b00      	cmp	r3, #0
 800f59e:	d017      	beq.n	800f5d0 <HAL_SPI_TransmitReceive+0x18c>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 800f5a0:	68fb      	ldr	r3, [r7, #12]
 800f5a2:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800f5a4:	68fb      	ldr	r3, [r7, #12]
 800f5a6:	681b      	ldr	r3, [r3, #0]
 800f5a8:	6812      	ldr	r2, [r2, #0]
 800f5aa:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 800f5ac:	68fb      	ldr	r3, [r7, #12]
 800f5ae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800f5b0:	1d1a      	adds	r2, r3, #4
 800f5b2:	68fb      	ldr	r3, [r7, #12]
 800f5b4:	65da      	str	r2, [r3, #92]	; 0x5c
        hspi->TxXferCount --;
 800f5b6:	68fb      	ldr	r3, [r7, #12]
 800f5b8:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800f5bc:	b29b      	uxth	r3, r3
 800f5be:	3b01      	subs	r3, #1
 800f5c0:	b29a      	uxth	r2, r3
 800f5c2:	68fb      	ldr	r3, [r7, #12]
 800f5c4:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        initial_TxXferCount = hspi->TxXferCount;
 800f5c8:	68fb      	ldr	r3, [r7, #12]
 800f5ca:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800f5ce:	85fb      	strh	r3, [r7, #46]	; 0x2e
      }

      /* Check RXWNE/EOT flag */
      if (((hspi->Instance->SR & (SPI_FLAG_RXWNE | SPI_FLAG_EOT)) != 0UL) && (initial_RxXferCount > 0UL))
 800f5d0:	68fb      	ldr	r3, [r7, #12]
 800f5d2:	681b      	ldr	r3, [r3, #0]
 800f5d4:	695a      	ldr	r2, [r3, #20]
 800f5d6:	f248 0308 	movw	r3, #32776	; 0x8008
 800f5da:	4013      	ands	r3, r2
 800f5dc:	2b00      	cmp	r3, #0
 800f5de:	d01a      	beq.n	800f616 <HAL_SPI_TransmitReceive+0x1d2>
 800f5e0:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800f5e2:	2b00      	cmp	r3, #0
 800f5e4:	d017      	beq.n	800f616 <HAL_SPI_TransmitReceive+0x1d2>
      {
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 800f5e6:	68fb      	ldr	r3, [r7, #12]
 800f5e8:	681a      	ldr	r2, [r3, #0]
 800f5ea:	68fb      	ldr	r3, [r7, #12]
 800f5ec:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800f5ee:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800f5f0:	601a      	str	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint32_t);
 800f5f2:	68fb      	ldr	r3, [r7, #12]
 800f5f4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800f5f6:	1d1a      	adds	r2, r3, #4
 800f5f8:	68fb      	ldr	r3, [r7, #12]
 800f5fa:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount --;
 800f5fc:	68fb      	ldr	r3, [r7, #12]
 800f5fe:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800f602:	b29b      	uxth	r3, r3
 800f604:	3b01      	subs	r3, #1
 800f606:	b29a      	uxth	r2, r3
 800f608:	68fb      	ldr	r3, [r7, #12]
 800f60a:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
        initial_RxXferCount = hspi->RxXferCount;
 800f60e:	68fb      	ldr	r3, [r7, #12]
 800f610:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800f614:	85bb      	strh	r3, [r7, #44]	; 0x2c
      }

      /* Timeout management */
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800f616:	f7f5 f853 	bl	80046c0 <HAL_GetTick>
 800f61a:	4602      	mov	r2, r0
 800f61c:	69fb      	ldr	r3, [r7, #28]
 800f61e:	1ad3      	subs	r3, r2, r3
 800f620:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800f622:	429a      	cmp	r2, r3
 800f624:	d803      	bhi.n	800f62e <HAL_SPI_TransmitReceive+0x1ea>
 800f626:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f628:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f62c:	d102      	bne.n	800f634 <HAL_SPI_TransmitReceive+0x1f0>
 800f62e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f630:	2b00      	cmp	r3, #0
 800f632:	d114      	bne.n	800f65e <HAL_SPI_TransmitReceive+0x21a>
      {
        /* Call standard close procedure with error check */
        SPI_CloseTransfer(hspi);
 800f634:	68f8      	ldr	r0, [r7, #12]
 800f636:	f000 f9f1 	bl	800fa1c <SPI_CloseTransfer>
      
        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800f63a:	68fb      	ldr	r3, [r7, #12]
 800f63c:	2200      	movs	r2, #0
 800f63e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
      
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800f642:	68fb      	ldr	r3, [r7, #12]
 800f644:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800f648:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800f64c:	68fb      	ldr	r3, [r7, #12]
 800f64e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        hspi->State = HAL_SPI_STATE_READY;
 800f652:	68fb      	ldr	r3, [r7, #12]
 800f654:	2201      	movs	r2, #1
 800f656:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
        return HAL_ERROR;
 800f65a:	2301      	movs	r3, #1
 800f65c:	e1da      	b.n	800fa14 <HAL_SPI_TransmitReceive+0x5d0>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 800f65e:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800f660:	2b00      	cmp	r3, #0
 800f662:	d193      	bne.n	800f58c <HAL_SPI_TransmitReceive+0x148>
 800f664:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800f666:	2b00      	cmp	r3, #0
 800f668:	d190      	bne.n	800f58c <HAL_SPI_TransmitReceive+0x148>
 800f66a:	e1ac      	b.n	800f9c6 <HAL_SPI_TransmitReceive+0x582>
      }
    }
  }
  /* Transmit and Receive data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800f66c:	68fb      	ldr	r3, [r7, #12]
 800f66e:	68db      	ldr	r3, [r3, #12]
 800f670:	2b07      	cmp	r3, #7
 800f672:	f240 81a0 	bls.w	800f9b6 <HAL_SPI_TransmitReceive+0x572>
  {
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 800f676:	e0a9      	b.n	800f7cc <HAL_SPI_TransmitReceive+0x388>
    {
      /* Check TXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP) && (initial_TxXferCount > 0UL))
 800f678:	68fb      	ldr	r3, [r7, #12]
 800f67a:	681b      	ldr	r3, [r3, #0]
 800f67c:	695b      	ldr	r3, [r3, #20]
 800f67e:	f003 0302 	and.w	r3, r3, #2
 800f682:	2b02      	cmp	r3, #2
 800f684:	d139      	bne.n	800f6fa <HAL_SPI_TransmitReceive+0x2b6>
 800f686:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800f688:	2b00      	cmp	r3, #0
 800f68a:	d036      	beq.n	800f6fa <HAL_SPI_TransmitReceive+0x2b6>
      {
        if ((initial_TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 800f68c:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800f68e:	2b01      	cmp	r3, #1
 800f690:	d91c      	bls.n	800f6cc <HAL_SPI_TransmitReceive+0x288>
 800f692:	68fb      	ldr	r3, [r7, #12]
 800f694:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f696:	2b00      	cmp	r3, #0
 800f698:	d018      	beq.n	800f6cc <HAL_SPI_TransmitReceive+0x288>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 800f69a:	68fb      	ldr	r3, [r7, #12]
 800f69c:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800f69e:	68fb      	ldr	r3, [r7, #12]
 800f6a0:	681b      	ldr	r3, [r3, #0]
 800f6a2:	6812      	ldr	r2, [r2, #0]
 800f6a4:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 800f6a6:	68fb      	ldr	r3, [r7, #12]
 800f6a8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800f6aa:	1d1a      	adds	r2, r3, #4
 800f6ac:	68fb      	ldr	r3, [r7, #12]
 800f6ae:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 800f6b0:	68fb      	ldr	r3, [r7, #12]
 800f6b2:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800f6b6:	b29b      	uxth	r3, r3
 800f6b8:	3b02      	subs	r3, #2
 800f6ba:	b29a      	uxth	r2, r3
 800f6bc:	68fb      	ldr	r3, [r7, #12]
 800f6be:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
          initial_TxXferCount = hspi->TxXferCount;
 800f6c2:	68fb      	ldr	r3, [r7, #12]
 800f6c4:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800f6c8:	85fb      	strh	r3, [r7, #46]	; 0x2e
 800f6ca:	e016      	b.n	800f6fa <HAL_SPI_TransmitReceive+0x2b6>
        }
        else
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((uint16_t *)hspi->pTxBuffPtr);
 800f6cc:	68fb      	ldr	r3, [r7, #12]
 800f6ce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800f6d0:	881a      	ldrh	r2, [r3, #0]
 800f6d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f6d4:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800f6d6:	68fb      	ldr	r3, [r7, #12]
 800f6d8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800f6da:	1c9a      	adds	r2, r3, #2
 800f6dc:	68fb      	ldr	r3, [r7, #12]
 800f6de:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount--;
 800f6e0:	68fb      	ldr	r3, [r7, #12]
 800f6e2:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800f6e6:	b29b      	uxth	r3, r3
 800f6e8:	3b01      	subs	r3, #1
 800f6ea:	b29a      	uxth	r2, r3
 800f6ec:	68fb      	ldr	r3, [r7, #12]
 800f6ee:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
          initial_TxXferCount = hspi->TxXferCount;
 800f6f2:	68fb      	ldr	r3, [r7, #12]
 800f6f4:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800f6f8:	85fb      	strh	r3, [r7, #46]	; 0x2e
        }
      }

      /* Check RXWNE/FRLVL flag */
      if (((hspi->Instance->SR & (SPI_FLAG_RXWNE | SPI_FLAG_FRLVL)) != 0UL) && (initial_RxXferCount > 0UL))
 800f6fa:	68fb      	ldr	r3, [r7, #12]
 800f6fc:	681b      	ldr	r3, [r3, #0]
 800f6fe:	695b      	ldr	r3, [r3, #20]
 800f700:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 800f704:	2b00      	cmp	r3, #0
 800f706:	d03a      	beq.n	800f77e <HAL_SPI_TransmitReceive+0x33a>
 800f708:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800f70a:	2b00      	cmp	r3, #0
 800f70c:	d037      	beq.n	800f77e <HAL_SPI_TransmitReceive+0x33a>
      {
        if ((hspi->Instance->SR & SPI_FLAG_RXWNE) != 0UL)
 800f70e:	68fb      	ldr	r3, [r7, #12]
 800f710:	681b      	ldr	r3, [r3, #0]
 800f712:	695b      	ldr	r3, [r3, #20]
 800f714:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800f718:	2b00      	cmp	r3, #0
 800f71a:	d018      	beq.n	800f74e <HAL_SPI_TransmitReceive+0x30a>
        {
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 800f71c:	68fb      	ldr	r3, [r7, #12]
 800f71e:	681a      	ldr	r2, [r3, #0]
 800f720:	68fb      	ldr	r3, [r7, #12]
 800f722:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800f724:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800f726:	601a      	str	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint32_t);
 800f728:	68fb      	ldr	r3, [r7, #12]
 800f72a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800f72c:	1d1a      	adds	r2, r3, #4
 800f72e:	68fb      	ldr	r3, [r7, #12]
 800f730:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount -= (uint16_t)2UL;
 800f732:	68fb      	ldr	r3, [r7, #12]
 800f734:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800f738:	b29b      	uxth	r3, r3
 800f73a:	3b02      	subs	r3, #2
 800f73c:	b29a      	uxth	r2, r3
 800f73e:	68fb      	ldr	r3, [r7, #12]
 800f740:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 800f744:	68fb      	ldr	r3, [r7, #12]
 800f746:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800f74a:	85bb      	strh	r3, [r7, #44]	; 0x2c
 800f74c:	e017      	b.n	800f77e <HAL_SPI_TransmitReceive+0x33a>
        }
        else
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800f74e:	68fb      	ldr	r3, [r7, #12]
 800f750:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800f752:	6a3a      	ldr	r2, [r7, #32]
 800f754:	8812      	ldrh	r2, [r2, #0]
 800f756:	b292      	uxth	r2, r2
 800f758:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 800f75a:	68fb      	ldr	r3, [r7, #12]
 800f75c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800f75e:	1c9a      	adds	r2, r3, #2
 800f760:	68fb      	ldr	r3, [r7, #12]
 800f762:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount--;
 800f764:	68fb      	ldr	r3, [r7, #12]
 800f766:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800f76a:	b29b      	uxth	r3, r3
 800f76c:	3b01      	subs	r3, #1
 800f76e:	b29a      	uxth	r2, r3
 800f770:	68fb      	ldr	r3, [r7, #12]
 800f772:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 800f776:	68fb      	ldr	r3, [r7, #12]
 800f778:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800f77c:	85bb      	strh	r3, [r7, #44]	; 0x2c
        }
      }

      /* Timeout management */
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800f77e:	f7f4 ff9f 	bl	80046c0 <HAL_GetTick>
 800f782:	4602      	mov	r2, r0
 800f784:	69fb      	ldr	r3, [r7, #28]
 800f786:	1ad3      	subs	r3, r2, r3
 800f788:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800f78a:	429a      	cmp	r2, r3
 800f78c:	d803      	bhi.n	800f796 <HAL_SPI_TransmitReceive+0x352>
 800f78e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f790:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f794:	d102      	bne.n	800f79c <HAL_SPI_TransmitReceive+0x358>
 800f796:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f798:	2b00      	cmp	r3, #0
 800f79a:	d117      	bne.n	800f7cc <HAL_SPI_TransmitReceive+0x388>
      {
        /* Call standard close procedure with error check */
        SPI_CloseTransfer(hspi);
 800f79c:	68f8      	ldr	r0, [r7, #12]
 800f79e:	f000 f93d 	bl	800fa1c <SPI_CloseTransfer>

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800f7a2:	68fb      	ldr	r3, [r7, #12]
 800f7a4:	2200      	movs	r2, #0
 800f7a6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800f7aa:	68fb      	ldr	r3, [r7, #12]
 800f7ac:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800f7b0:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800f7b4:	68fb      	ldr	r3, [r7, #12]
 800f7b6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        hspi->State = HAL_SPI_STATE_READY;
 800f7ba:	68fb      	ldr	r3, [r7, #12]
 800f7bc:	2201      	movs	r2, #1
 800f7be:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
        return HAL_ERROR;
 800f7c2:	2301      	movs	r3, #1
 800f7c4:	e126      	b.n	800fa14 <HAL_SPI_TransmitReceive+0x5d0>
 800f7c6:	bf00      	nop
 800f7c8:	ffff0000 	.word	0xffff0000
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 800f7cc:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800f7ce:	2b00      	cmp	r3, #0
 800f7d0:	f47f af52 	bne.w	800f678 <HAL_SPI_TransmitReceive+0x234>
 800f7d4:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800f7d6:	2b00      	cmp	r3, #0
 800f7d8:	f47f af4e 	bne.w	800f678 <HAL_SPI_TransmitReceive+0x234>
 800f7dc:	e0f3      	b.n	800f9c6 <HAL_SPI_TransmitReceive+0x582>
  else
  {
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
    {
      /* check TXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL))
 800f7de:	68fb      	ldr	r3, [r7, #12]
 800f7e0:	681b      	ldr	r3, [r3, #0]
 800f7e2:	695b      	ldr	r3, [r3, #20]
 800f7e4:	f003 0302 	and.w	r3, r3, #2
 800f7e8:	2b02      	cmp	r3, #2
 800f7ea:	d15a      	bne.n	800f8a2 <HAL_SPI_TransmitReceive+0x45e>
 800f7ec:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800f7ee:	2b00      	cmp	r3, #0
 800f7f0:	d057      	beq.n	800f8a2 <HAL_SPI_TransmitReceive+0x45e>
      {
        if ((initial_TxXferCount > 3UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_03DATA))
 800f7f2:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800f7f4:	2b03      	cmp	r3, #3
 800f7f6:	d91c      	bls.n	800f832 <HAL_SPI_TransmitReceive+0x3ee>
 800f7f8:	68fb      	ldr	r3, [r7, #12]
 800f7fa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f7fc:	2b40      	cmp	r3, #64	; 0x40
 800f7fe:	d918      	bls.n	800f832 <HAL_SPI_TransmitReceive+0x3ee>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 800f800:	68fb      	ldr	r3, [r7, #12]
 800f802:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800f804:	68fb      	ldr	r3, [r7, #12]
 800f806:	681b      	ldr	r3, [r3, #0]
 800f808:	6812      	ldr	r2, [r2, #0]
 800f80a:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 800f80c:	68fb      	ldr	r3, [r7, #12]
 800f80e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800f810:	1d1a      	adds	r2, r3, #4
 800f812:	68fb      	ldr	r3, [r7, #12]
 800f814:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)4UL;
 800f816:	68fb      	ldr	r3, [r7, #12]
 800f818:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800f81c:	b29b      	uxth	r3, r3
 800f81e:	3b04      	subs	r3, #4
 800f820:	b29a      	uxth	r2, r3
 800f822:	68fb      	ldr	r3, [r7, #12]
 800f824:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
          initial_TxXferCount = hspi->TxXferCount;
 800f828:	68fb      	ldr	r3, [r7, #12]
 800f82a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800f82e:	85fb      	strh	r3, [r7, #46]	; 0x2e
 800f830:	e037      	b.n	800f8a2 <HAL_SPI_TransmitReceive+0x45e>
        }
        else if ((initial_TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 800f832:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800f834:	2b01      	cmp	r3, #1
 800f836:	d91b      	bls.n	800f870 <HAL_SPI_TransmitReceive+0x42c>
 800f838:	68fb      	ldr	r3, [r7, #12]
 800f83a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f83c:	2b00      	cmp	r3, #0
 800f83e:	d017      	beq.n	800f870 <HAL_SPI_TransmitReceive+0x42c>
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((uint16_t *)hspi->pTxBuffPtr);
 800f840:	68fb      	ldr	r3, [r7, #12]
 800f842:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800f844:	881a      	ldrh	r2, [r3, #0]
 800f846:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f848:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800f84a:	68fb      	ldr	r3, [r7, #12]
 800f84c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800f84e:	1c9a      	adds	r2, r3, #2
 800f850:	68fb      	ldr	r3, [r7, #12]
 800f852:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 800f854:	68fb      	ldr	r3, [r7, #12]
 800f856:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800f85a:	b29b      	uxth	r3, r3
 800f85c:	3b02      	subs	r3, #2
 800f85e:	b29a      	uxth	r2, r3
 800f860:	68fb      	ldr	r3, [r7, #12]
 800f862:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
          initial_TxXferCount = hspi->TxXferCount;
 800f866:	68fb      	ldr	r3, [r7, #12]
 800f868:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800f86c:	85fb      	strh	r3, [r7, #46]	; 0x2e
 800f86e:	e018      	b.n	800f8a2 <HAL_SPI_TransmitReceive+0x45e>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->TXDR) = *((uint8_t *)hspi->pTxBuffPtr);
 800f870:	68fb      	ldr	r3, [r7, #12]
 800f872:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800f874:	68fb      	ldr	r3, [r7, #12]
 800f876:	681b      	ldr	r3, [r3, #0]
 800f878:	3320      	adds	r3, #32
 800f87a:	7812      	ldrb	r2, [r2, #0]
 800f87c:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr += sizeof(uint8_t);
 800f87e:	68fb      	ldr	r3, [r7, #12]
 800f880:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800f882:	1c5a      	adds	r2, r3, #1
 800f884:	68fb      	ldr	r3, [r7, #12]
 800f886:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount--;
 800f888:	68fb      	ldr	r3, [r7, #12]
 800f88a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800f88e:	b29b      	uxth	r3, r3
 800f890:	3b01      	subs	r3, #1
 800f892:	b29a      	uxth	r2, r3
 800f894:	68fb      	ldr	r3, [r7, #12]
 800f896:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
          initial_TxXferCount = hspi->TxXferCount;
 800f89a:	68fb      	ldr	r3, [r7, #12]
 800f89c:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800f8a0:	85fb      	strh	r3, [r7, #46]	; 0x2e
        }
      }

      /* Wait until RXWNE/FRLVL flag is reset */
      if (((hspi->Instance->SR & (SPI_FLAG_RXWNE | SPI_FLAG_FRLVL)) != 0UL) && (initial_RxXferCount > 0UL))
 800f8a2:	68fb      	ldr	r3, [r7, #12]
 800f8a4:	681b      	ldr	r3, [r3, #0]
 800f8a6:	695b      	ldr	r3, [r3, #20]
 800f8a8:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 800f8ac:	2b00      	cmp	r3, #0
 800f8ae:	d05e      	beq.n	800f96e <HAL_SPI_TransmitReceive+0x52a>
 800f8b0:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800f8b2:	2b00      	cmp	r3, #0
 800f8b4:	d05b      	beq.n	800f96e <HAL_SPI_TransmitReceive+0x52a>
      {
        if ((hspi->Instance->SR & SPI_FLAG_RXWNE) != 0UL)
 800f8b6:	68fb      	ldr	r3, [r7, #12]
 800f8b8:	681b      	ldr	r3, [r3, #0]
 800f8ba:	695b      	ldr	r3, [r3, #20]
 800f8bc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800f8c0:	2b00      	cmp	r3, #0
 800f8c2:	d018      	beq.n	800f8f6 <HAL_SPI_TransmitReceive+0x4b2>
        {
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 800f8c4:	68fb      	ldr	r3, [r7, #12]
 800f8c6:	681a      	ldr	r2, [r3, #0]
 800f8c8:	68fb      	ldr	r3, [r7, #12]
 800f8ca:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800f8cc:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800f8ce:	601a      	str	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint32_t);
 800f8d0:	68fb      	ldr	r3, [r7, #12]
 800f8d2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800f8d4:	1d1a      	adds	r2, r3, #4
 800f8d6:	68fb      	ldr	r3, [r7, #12]
 800f8d8:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount -= (uint16_t)4UL;
 800f8da:	68fb      	ldr	r3, [r7, #12]
 800f8dc:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800f8e0:	b29b      	uxth	r3, r3
 800f8e2:	3b04      	subs	r3, #4
 800f8e4:	b29a      	uxth	r2, r3
 800f8e6:	68fb      	ldr	r3, [r7, #12]
 800f8e8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 800f8ec:	68fb      	ldr	r3, [r7, #12]
 800f8ee:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800f8f2:	85bb      	strh	r3, [r7, #44]	; 0x2c
 800f8f4:	e03b      	b.n	800f96e <HAL_SPI_TransmitReceive+0x52a>
        }
        else if ((hspi->Instance->SR & SPI_FLAG_FRLVL) > SPI_RX_FIFO_1PACKET)
 800f8f6:	68fb      	ldr	r3, [r7, #12]
 800f8f8:	681b      	ldr	r3, [r3, #0]
 800f8fa:	695b      	ldr	r3, [r3, #20]
 800f8fc:	f403 43c0 	and.w	r3, r3, #24576	; 0x6000
 800f900:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800f904:	d918      	bls.n	800f938 <HAL_SPI_TransmitReceive+0x4f4>
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800f906:	68fb      	ldr	r3, [r7, #12]
 800f908:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800f90a:	6a3a      	ldr	r2, [r7, #32]
 800f90c:	8812      	ldrh	r2, [r2, #0]
 800f90e:	b292      	uxth	r2, r2
 800f910:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 800f912:	68fb      	ldr	r3, [r7, #12]
 800f914:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800f916:	1c9a      	adds	r2, r3, #2
 800f918:	68fb      	ldr	r3, [r7, #12]
 800f91a:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount -= (uint16_t)2UL;
 800f91c:	68fb      	ldr	r3, [r7, #12]
 800f91e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800f922:	b29b      	uxth	r3, r3
 800f924:	3b02      	subs	r3, #2
 800f926:	b29a      	uxth	r2, r3
 800f928:	68fb      	ldr	r3, [r7, #12]
 800f92a:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 800f92e:	68fb      	ldr	r3, [r7, #12]
 800f930:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800f934:	85bb      	strh	r3, [r7, #44]	; 0x2c
 800f936:	e01a      	b.n	800f96e <HAL_SPI_TransmitReceive+0x52a>
        }
        else
        {
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800f938:	68fb      	ldr	r3, [r7, #12]
 800f93a:	681b      	ldr	r3, [r3, #0]
 800f93c:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800f940:	68fb      	ldr	r3, [r7, #12]
 800f942:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800f944:	7812      	ldrb	r2, [r2, #0]
 800f946:	b2d2      	uxtb	r2, r2
 800f948:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 800f94a:	68fb      	ldr	r3, [r7, #12]
 800f94c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800f94e:	1c5a      	adds	r2, r3, #1
 800f950:	68fb      	ldr	r3, [r7, #12]
 800f952:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount--;
 800f954:	68fb      	ldr	r3, [r7, #12]
 800f956:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800f95a:	b29b      	uxth	r3, r3
 800f95c:	3b01      	subs	r3, #1
 800f95e:	b29a      	uxth	r2, r3
 800f960:	68fb      	ldr	r3, [r7, #12]
 800f962:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 800f966:	68fb      	ldr	r3, [r7, #12]
 800f968:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800f96c:	85bb      	strh	r3, [r7, #44]	; 0x2c
        }
      }

      /* Timeout management */
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800f96e:	f7f4 fea7 	bl	80046c0 <HAL_GetTick>
 800f972:	4602      	mov	r2, r0
 800f974:	69fb      	ldr	r3, [r7, #28]
 800f976:	1ad3      	subs	r3, r2, r3
 800f978:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800f97a:	429a      	cmp	r2, r3
 800f97c:	d803      	bhi.n	800f986 <HAL_SPI_TransmitReceive+0x542>
 800f97e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f980:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f984:	d102      	bne.n	800f98c <HAL_SPI_TransmitReceive+0x548>
 800f986:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f988:	2b00      	cmp	r3, #0
 800f98a:	d114      	bne.n	800f9b6 <HAL_SPI_TransmitReceive+0x572>
      {
        /* Call standard close procedure with error check */
        SPI_CloseTransfer(hspi);
 800f98c:	68f8      	ldr	r0, [r7, #12]
 800f98e:	f000 f845 	bl	800fa1c <SPI_CloseTransfer>

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800f992:	68fb      	ldr	r3, [r7, #12]
 800f994:	2200      	movs	r2, #0
 800f996:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800f99a:	68fb      	ldr	r3, [r7, #12]
 800f99c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800f9a0:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800f9a4:	68fb      	ldr	r3, [r7, #12]
 800f9a6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        hspi->State = HAL_SPI_STATE_READY;
 800f9aa:	68fb      	ldr	r3, [r7, #12]
 800f9ac:	2201      	movs	r2, #1
 800f9ae:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
        return HAL_ERROR;
 800f9b2:	2301      	movs	r3, #1
 800f9b4:	e02e      	b.n	800fa14 <HAL_SPI_TransmitReceive+0x5d0>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 800f9b6:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800f9b8:	2b00      	cmp	r3, #0
 800f9ba:	f47f af10 	bne.w	800f7de <HAL_SPI_TransmitReceive+0x39a>
 800f9be:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800f9c0:	2b00      	cmp	r3, #0
 800f9c2:	f47f af0c 	bne.w	800f7de <HAL_SPI_TransmitReceive+0x39a>
      }
    }
  }

  /* Wait for Tx/Rx (and CRC) data to be sent/received */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, tickstart, Timeout) != HAL_OK)
 800f9c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f9c8:	9300      	str	r3, [sp, #0]
 800f9ca:	69fb      	ldr	r3, [r7, #28]
 800f9cc:	2200      	movs	r2, #0
 800f9ce:	2108      	movs	r1, #8
 800f9d0:	68f8      	ldr	r0, [r7, #12]
 800f9d2:	f000 f8c3 	bl	800fb5c <SPI_WaitOnFlagUntilTimeout>
 800f9d6:	4603      	mov	r3, r0
 800f9d8:	2b00      	cmp	r3, #0
 800f9da:	d007      	beq.n	800f9ec <HAL_SPI_TransmitReceive+0x5a8>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800f9dc:	68fb      	ldr	r3, [r7, #12]
 800f9de:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800f9e2:	f043 0220 	orr.w	r2, r3, #32
 800f9e6:	68fb      	ldr	r3, [r7, #12]
 800f9e8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 800f9ec:	68f8      	ldr	r0, [r7, #12]
 800f9ee:	f000 f815 	bl	800fa1c <SPI_CloseTransfer>

  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800f9f2:	68fb      	ldr	r3, [r7, #12]
 800f9f4:	2200      	movs	r2, #0
 800f9f6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  hspi->State = HAL_SPI_STATE_READY;
 800f9fa:	68fb      	ldr	r3, [r7, #12]
 800f9fc:	2201      	movs	r2, #1
 800f9fe:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800fa02:	68fb      	ldr	r3, [r7, #12]
 800fa04:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800fa08:	2b00      	cmp	r3, #0
 800fa0a:	d001      	beq.n	800fa10 <HAL_SPI_TransmitReceive+0x5cc>
  {
    return HAL_ERROR;
 800fa0c:	2301      	movs	r3, #1
 800fa0e:	e001      	b.n	800fa14 <HAL_SPI_TransmitReceive+0x5d0>
  }
  return errorcode;
 800fa10:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 800fa14:	4618      	mov	r0, r3
 800fa16:	3730      	adds	r7, #48	; 0x30
 800fa18:	46bd      	mov	sp, r7
 800fa1a:	bd80      	pop	{r7, pc}

0800fa1c <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
*         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 800fa1c:	b480      	push	{r7}
 800fa1e:	b085      	sub	sp, #20
 800fa20:	af00      	add	r7, sp, #0
 800fa22:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 800fa24:	687b      	ldr	r3, [r7, #4]
 800fa26:	681b      	ldr	r3, [r3, #0]
 800fa28:	695b      	ldr	r3, [r3, #20]
 800fa2a:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 800fa2c:	687b      	ldr	r3, [r7, #4]
 800fa2e:	681b      	ldr	r3, [r3, #0]
 800fa30:	699a      	ldr	r2, [r3, #24]
 800fa32:	687b      	ldr	r3, [r7, #4]
 800fa34:	681b      	ldr	r3, [r3, #0]
 800fa36:	f042 0208 	orr.w	r2, r2, #8
 800fa3a:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 800fa3c:	687b      	ldr	r3, [r7, #4]
 800fa3e:	681b      	ldr	r3, [r3, #0]
 800fa40:	699a      	ldr	r2, [r3, #24]
 800fa42:	687b      	ldr	r3, [r7, #4]
 800fa44:	681b      	ldr	r3, [r3, #0]
 800fa46:	f042 0210 	orr.w	r2, r2, #16
 800fa4a:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800fa4c:	687b      	ldr	r3, [r7, #4]
 800fa4e:	681b      	ldr	r3, [r3, #0]
 800fa50:	681a      	ldr	r2, [r3, #0]
 800fa52:	687b      	ldr	r3, [r7, #4]
 800fa54:	681b      	ldr	r3, [r3, #0]
 800fa56:	f022 0201 	bic.w	r2, r2, #1
 800fa5a:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | SPI_IT_FRE | SPI_IT_MODF));
 800fa5c:	687b      	ldr	r3, [r7, #4]
 800fa5e:	681b      	ldr	r3, [r3, #0]
 800fa60:	6919      	ldr	r1, [r3, #16]
 800fa62:	687b      	ldr	r3, [r7, #4]
 800fa64:	681a      	ldr	r2, [r3, #0]
 800fa66:	4b3c      	ldr	r3, [pc, #240]	; (800fb58 <SPI_CloseTransfer+0x13c>)
 800fa68:	400b      	ands	r3, r1
 800fa6a:	6113      	str	r3, [r2, #16]

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 800fa6c:	687b      	ldr	r3, [r7, #4]
 800fa6e:	681b      	ldr	r3, [r3, #0]
 800fa70:	689a      	ldr	r2, [r3, #8]
 800fa72:	687b      	ldr	r3, [r7, #4]
 800fa74:	681b      	ldr	r3, [r3, #0]
 800fa76:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 800fa7a:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800fa7c:	687b      	ldr	r3, [r7, #4]
 800fa7e:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800fa82:	b2db      	uxtb	r3, r3
 800fa84:	2b04      	cmp	r3, #4
 800fa86:	d014      	beq.n	800fab2 <SPI_CloseTransfer+0x96>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 800fa88:	68fb      	ldr	r3, [r7, #12]
 800fa8a:	f003 0320 	and.w	r3, r3, #32
 800fa8e:	2b00      	cmp	r3, #0
 800fa90:	d00f      	beq.n	800fab2 <SPI_CloseTransfer+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 800fa92:	687b      	ldr	r3, [r7, #4]
 800fa94:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800fa98:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800fa9c:	687b      	ldr	r3, [r7, #4]
 800fa9e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 800faa2:	687b      	ldr	r3, [r7, #4]
 800faa4:	681b      	ldr	r3, [r3, #0]
 800faa6:	699a      	ldr	r2, [r3, #24]
 800faa8:	687b      	ldr	r3, [r7, #4]
 800faaa:	681b      	ldr	r3, [r3, #0]
 800faac:	f042 0220 	orr.w	r2, r2, #32
 800fab0:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800fab2:	687b      	ldr	r3, [r7, #4]
 800fab4:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800fab8:	b2db      	uxtb	r3, r3
 800faba:	2b03      	cmp	r3, #3
 800fabc:	d014      	beq.n	800fae8 <SPI_CloseTransfer+0xcc>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 800fabe:	68fb      	ldr	r3, [r7, #12]
 800fac0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800fac4:	2b00      	cmp	r3, #0
 800fac6:	d00f      	beq.n	800fae8 <SPI_CloseTransfer+0xcc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800fac8:	687b      	ldr	r3, [r7, #4]
 800faca:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800face:	f043 0204 	orr.w	r2, r3, #4
 800fad2:	687b      	ldr	r3, [r7, #4]
 800fad4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800fad8:	687b      	ldr	r3, [r7, #4]
 800fada:	681b      	ldr	r3, [r3, #0]
 800fadc:	699a      	ldr	r2, [r3, #24]
 800fade:	687b      	ldr	r3, [r7, #4]
 800fae0:	681b      	ldr	r3, [r3, #0]
 800fae2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800fae6:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 800fae8:	68fb      	ldr	r3, [r7, #12]
 800faea:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800faee:	2b00      	cmp	r3, #0
 800faf0:	d00f      	beq.n	800fb12 <SPI_CloseTransfer+0xf6>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800faf2:	687b      	ldr	r3, [r7, #4]
 800faf4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800faf8:	f043 0201 	orr.w	r2, r3, #1
 800fafc:	687b      	ldr	r3, [r7, #4]
 800fafe:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800fb02:	687b      	ldr	r3, [r7, #4]
 800fb04:	681b      	ldr	r3, [r3, #0]
 800fb06:	699a      	ldr	r2, [r3, #24]
 800fb08:	687b      	ldr	r3, [r7, #4]
 800fb0a:	681b      	ldr	r3, [r3, #0]
 800fb0c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800fb10:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 800fb12:	68fb      	ldr	r3, [r7, #12]
 800fb14:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800fb18:	2b00      	cmp	r3, #0
 800fb1a:	d00f      	beq.n	800fb3c <SPI_CloseTransfer+0x120>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800fb1c:	687b      	ldr	r3, [r7, #4]
 800fb1e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800fb22:	f043 0208 	orr.w	r2, r3, #8
 800fb26:	687b      	ldr	r3, [r7, #4]
 800fb28:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 800fb2c:	687b      	ldr	r3, [r7, #4]
 800fb2e:	681b      	ldr	r3, [r3, #0]
 800fb30:	699a      	ldr	r2, [r3, #24]
 800fb32:	687b      	ldr	r3, [r7, #4]
 800fb34:	681b      	ldr	r3, [r3, #0]
 800fb36:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800fb3a:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 800fb3c:	687b      	ldr	r3, [r7, #4]
 800fb3e:	2200      	movs	r2, #0
 800fb40:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 800fb44:	687b      	ldr	r3, [r7, #4]
 800fb46:	2200      	movs	r2, #0
 800fb48:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
}
 800fb4c:	bf00      	nop
 800fb4e:	3714      	adds	r7, #20
 800fb50:	46bd      	mov	sp, r7
 800fb52:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb56:	4770      	bx	lr
 800fb58:	fffffc90 	.word	0xfffffc90

0800fb5c <SPI_WaitOnFlagUntilTimeout>:
  * @param Tickstart: Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitOnFlagUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Tickstart, uint32_t Timeout)
{
 800fb5c:	b580      	push	{r7, lr}
 800fb5e:	b084      	sub	sp, #16
 800fb60:	af00      	add	r7, sp, #0
 800fb62:	60f8      	str	r0, [r7, #12]
 800fb64:	60b9      	str	r1, [r7, #8]
 800fb66:	603b      	str	r3, [r7, #0]
 800fb68:	4613      	mov	r3, r2
 800fb6a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 800fb6c:	e010      	b.n	800fb90 <SPI_WaitOnFlagUntilTimeout+0x34>
  {
    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800fb6e:	f7f4 fda7 	bl	80046c0 <HAL_GetTick>
 800fb72:	4602      	mov	r2, r0
 800fb74:	683b      	ldr	r3, [r7, #0]
 800fb76:	1ad3      	subs	r3, r2, r3
 800fb78:	69ba      	ldr	r2, [r7, #24]
 800fb7a:	429a      	cmp	r2, r3
 800fb7c:	d803      	bhi.n	800fb86 <SPI_WaitOnFlagUntilTimeout+0x2a>
 800fb7e:	69bb      	ldr	r3, [r7, #24]
 800fb80:	f1b3 3fff 	cmp.w	r3, #4294967295
 800fb84:	d102      	bne.n	800fb8c <SPI_WaitOnFlagUntilTimeout+0x30>
 800fb86:	69bb      	ldr	r3, [r7, #24]
 800fb88:	2b00      	cmp	r3, #0
 800fb8a:	d101      	bne.n	800fb90 <SPI_WaitOnFlagUntilTimeout+0x34>
    {
      return HAL_TIMEOUT;
 800fb8c:	2303      	movs	r3, #3
 800fb8e:	e00f      	b.n	800fbb0 <SPI_WaitOnFlagUntilTimeout+0x54>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 800fb90:	68fb      	ldr	r3, [r7, #12]
 800fb92:	681b      	ldr	r3, [r3, #0]
 800fb94:	695a      	ldr	r2, [r3, #20]
 800fb96:	68bb      	ldr	r3, [r7, #8]
 800fb98:	4013      	ands	r3, r2
 800fb9a:	68ba      	ldr	r2, [r7, #8]
 800fb9c:	429a      	cmp	r2, r3
 800fb9e:	bf0c      	ite	eq
 800fba0:	2301      	moveq	r3, #1
 800fba2:	2300      	movne	r3, #0
 800fba4:	b2db      	uxtb	r3, r3
 800fba6:	461a      	mov	r2, r3
 800fba8:	79fb      	ldrb	r3, [r7, #7]
 800fbaa:	429a      	cmp	r2, r3
 800fbac:	d0df      	beq.n	800fb6e <SPI_WaitOnFlagUntilTimeout+0x12>
    }
  }
  return HAL_OK;
 800fbae:	2300      	movs	r3, #0
}
 800fbb0:	4618      	mov	r0, r3
 800fbb2:	3710      	adds	r7, #16
 800fbb4:	46bd      	mov	sp, r7
 800fbb6:	bd80      	pop	{r7, pc}

0800fbb8 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(SPI_HandleTypeDef *hspi)
{
 800fbb8:	b480      	push	{r7}
 800fbba:	b085      	sub	sp, #20
 800fbbc:	af00      	add	r7, sp, #0
 800fbbe:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 800fbc0:	687b      	ldr	r3, [r7, #4]
 800fbc2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800fbc4:	095b      	lsrs	r3, r3, #5
 800fbc6:	3301      	adds	r3, #1
 800fbc8:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 800fbca:	687b      	ldr	r3, [r7, #4]
 800fbcc:	68db      	ldr	r3, [r3, #12]
 800fbce:	3301      	adds	r3, #1
 800fbd0:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 800fbd2:	68bb      	ldr	r3, [r7, #8]
 800fbd4:	3307      	adds	r3, #7
 800fbd6:	08db      	lsrs	r3, r3, #3
 800fbd8:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 800fbda:	68bb      	ldr	r3, [r7, #8]
 800fbdc:	68fa      	ldr	r2, [r7, #12]
 800fbde:	fb02 f303 	mul.w	r3, r2, r3
}
 800fbe2:	4618      	mov	r0, r3
 800fbe4:	3714      	adds	r7, #20
 800fbe6:	46bd      	mov	sp, r7
 800fbe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fbec:	4770      	bx	lr

0800fbee <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800fbee:	b580      	push	{r7, lr}
 800fbf0:	b082      	sub	sp, #8
 800fbf2:	af00      	add	r7, sp, #0
 800fbf4:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800fbf6:	687b      	ldr	r3, [r7, #4]
 800fbf8:	2b00      	cmp	r3, #0
 800fbfa:	d101      	bne.n	800fc00 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800fbfc:	2301      	movs	r3, #1
 800fbfe:	e042      	b.n	800fc86 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800fc00:	687b      	ldr	r3, [r7, #4]
 800fc02:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800fc06:	2b00      	cmp	r3, #0
 800fc08:	d106      	bne.n	800fc18 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800fc0a:	687b      	ldr	r3, [r7, #4]
 800fc0c:	2200      	movs	r2, #0
 800fc0e:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800fc12:	6878      	ldr	r0, [r7, #4]
 800fc14:	f7f4 fa70 	bl	80040f8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800fc18:	687b      	ldr	r3, [r7, #4]
 800fc1a:	2224      	movs	r2, #36	; 0x24
 800fc1c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  __HAL_UART_DISABLE(huart);
 800fc20:	687b      	ldr	r3, [r7, #4]
 800fc22:	681b      	ldr	r3, [r3, #0]
 800fc24:	681a      	ldr	r2, [r3, #0]
 800fc26:	687b      	ldr	r3, [r7, #4]
 800fc28:	681b      	ldr	r3, [r3, #0]
 800fc2a:	f022 0201 	bic.w	r2, r2, #1
 800fc2e:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800fc30:	6878      	ldr	r0, [r7, #4]
 800fc32:	f000 f955 	bl	800fee0 <UART_SetConfig>
 800fc36:	4603      	mov	r3, r0
 800fc38:	2b01      	cmp	r3, #1
 800fc3a:	d101      	bne.n	800fc40 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800fc3c:	2301      	movs	r3, #1
 800fc3e:	e022      	b.n	800fc86 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800fc40:	687b      	ldr	r3, [r7, #4]
 800fc42:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800fc44:	2b00      	cmp	r3, #0
 800fc46:	d002      	beq.n	800fc4e <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 800fc48:	6878      	ldr	r0, [r7, #4]
 800fc4a:	f000 fef9 	bl	8010a40 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800fc4e:	687b      	ldr	r3, [r7, #4]
 800fc50:	681b      	ldr	r3, [r3, #0]
 800fc52:	685a      	ldr	r2, [r3, #4]
 800fc54:	687b      	ldr	r3, [r7, #4]
 800fc56:	681b      	ldr	r3, [r3, #0]
 800fc58:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800fc5c:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800fc5e:	687b      	ldr	r3, [r7, #4]
 800fc60:	681b      	ldr	r3, [r3, #0]
 800fc62:	689a      	ldr	r2, [r3, #8]
 800fc64:	687b      	ldr	r3, [r7, #4]
 800fc66:	681b      	ldr	r3, [r3, #0]
 800fc68:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800fc6c:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800fc6e:	687b      	ldr	r3, [r7, #4]
 800fc70:	681b      	ldr	r3, [r3, #0]
 800fc72:	681a      	ldr	r2, [r3, #0]
 800fc74:	687b      	ldr	r3, [r7, #4]
 800fc76:	681b      	ldr	r3, [r3, #0]
 800fc78:	f042 0201 	orr.w	r2, r2, #1
 800fc7c:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800fc7e:	6878      	ldr	r0, [r7, #4]
 800fc80:	f000 ff80 	bl	8010b84 <UART_CheckIdleState>
 800fc84:	4603      	mov	r3, r0
}
 800fc86:	4618      	mov	r0, r3
 800fc88:	3708      	adds	r7, #8
 800fc8a:	46bd      	mov	sp, r7
 800fc8c:	bd80      	pop	{r7, pc}

0800fc8e <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800fc8e:	b580      	push	{r7, lr}
 800fc90:	b08a      	sub	sp, #40	; 0x28
 800fc92:	af02      	add	r7, sp, #8
 800fc94:	60f8      	str	r0, [r7, #12]
 800fc96:	60b9      	str	r1, [r7, #8]
 800fc98:	603b      	str	r3, [r7, #0]
 800fc9a:	4613      	mov	r3, r2
 800fc9c:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800fc9e:	68fb      	ldr	r3, [r7, #12]
 800fca0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800fca4:	2b20      	cmp	r3, #32
 800fca6:	f040 8083 	bne.w	800fdb0 <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 800fcaa:	68bb      	ldr	r3, [r7, #8]
 800fcac:	2b00      	cmp	r3, #0
 800fcae:	d002      	beq.n	800fcb6 <HAL_UART_Transmit+0x28>
 800fcb0:	88fb      	ldrh	r3, [r7, #6]
 800fcb2:	2b00      	cmp	r3, #0
 800fcb4:	d101      	bne.n	800fcba <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 800fcb6:	2301      	movs	r3, #1
 800fcb8:	e07b      	b.n	800fdb2 <HAL_UART_Transmit+0x124>
    }

    __HAL_LOCK(huart);
 800fcba:	68fb      	ldr	r3, [r7, #12]
 800fcbc:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 800fcc0:	2b01      	cmp	r3, #1
 800fcc2:	d101      	bne.n	800fcc8 <HAL_UART_Transmit+0x3a>
 800fcc4:	2302      	movs	r3, #2
 800fcc6:	e074      	b.n	800fdb2 <HAL_UART_Transmit+0x124>
 800fcc8:	68fb      	ldr	r3, [r7, #12]
 800fcca:	2201      	movs	r2, #1
 800fccc:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800fcd0:	68fb      	ldr	r3, [r7, #12]
 800fcd2:	2200      	movs	r2, #0
 800fcd4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800fcd8:	68fb      	ldr	r3, [r7, #12]
 800fcda:	2221      	movs	r2, #33	; 0x21
 800fcdc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 800fce0:	f7f4 fcee 	bl	80046c0 <HAL_GetTick>
 800fce4:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800fce6:	68fb      	ldr	r3, [r7, #12]
 800fce8:	88fa      	ldrh	r2, [r7, #6]
 800fcea:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 800fcee:	68fb      	ldr	r3, [r7, #12]
 800fcf0:	88fa      	ldrh	r2, [r7, #6]
 800fcf2:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800fcf6:	68fb      	ldr	r3, [r7, #12]
 800fcf8:	689b      	ldr	r3, [r3, #8]
 800fcfa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800fcfe:	d108      	bne.n	800fd12 <HAL_UART_Transmit+0x84>
 800fd00:	68fb      	ldr	r3, [r7, #12]
 800fd02:	691b      	ldr	r3, [r3, #16]
 800fd04:	2b00      	cmp	r3, #0
 800fd06:	d104      	bne.n	800fd12 <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 800fd08:	2300      	movs	r3, #0
 800fd0a:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800fd0c:	68bb      	ldr	r3, [r7, #8]
 800fd0e:	61bb      	str	r3, [r7, #24]
 800fd10:	e003      	b.n	800fd1a <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 800fd12:	68bb      	ldr	r3, [r7, #8]
 800fd14:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800fd16:	2300      	movs	r3, #0
 800fd18:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 800fd1a:	68fb      	ldr	r3, [r7, #12]
 800fd1c:	2200      	movs	r2, #0
 800fd1e:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    while (huart->TxXferCount > 0U)
 800fd22:	e02c      	b.n	800fd7e <HAL_UART_Transmit+0xf0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800fd24:	683b      	ldr	r3, [r7, #0]
 800fd26:	9300      	str	r3, [sp, #0]
 800fd28:	697b      	ldr	r3, [r7, #20]
 800fd2a:	2200      	movs	r2, #0
 800fd2c:	2180      	movs	r1, #128	; 0x80
 800fd2e:	68f8      	ldr	r0, [r7, #12]
 800fd30:	f000 ff70 	bl	8010c14 <UART_WaitOnFlagUntilTimeout>
 800fd34:	4603      	mov	r3, r0
 800fd36:	2b00      	cmp	r3, #0
 800fd38:	d001      	beq.n	800fd3e <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 800fd3a:	2303      	movs	r3, #3
 800fd3c:	e039      	b.n	800fdb2 <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 800fd3e:	69fb      	ldr	r3, [r7, #28]
 800fd40:	2b00      	cmp	r3, #0
 800fd42:	d10b      	bne.n	800fd5c <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800fd44:	69bb      	ldr	r3, [r7, #24]
 800fd46:	881b      	ldrh	r3, [r3, #0]
 800fd48:	461a      	mov	r2, r3
 800fd4a:	68fb      	ldr	r3, [r7, #12]
 800fd4c:	681b      	ldr	r3, [r3, #0]
 800fd4e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800fd52:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800fd54:	69bb      	ldr	r3, [r7, #24]
 800fd56:	3302      	adds	r3, #2
 800fd58:	61bb      	str	r3, [r7, #24]
 800fd5a:	e007      	b.n	800fd6c <HAL_UART_Transmit+0xde>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800fd5c:	69fb      	ldr	r3, [r7, #28]
 800fd5e:	781a      	ldrb	r2, [r3, #0]
 800fd60:	68fb      	ldr	r3, [r7, #12]
 800fd62:	681b      	ldr	r3, [r3, #0]
 800fd64:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800fd66:	69fb      	ldr	r3, [r7, #28]
 800fd68:	3301      	adds	r3, #1
 800fd6a:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800fd6c:	68fb      	ldr	r3, [r7, #12]
 800fd6e:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800fd72:	b29b      	uxth	r3, r3
 800fd74:	3b01      	subs	r3, #1
 800fd76:	b29a      	uxth	r2, r3
 800fd78:	68fb      	ldr	r3, [r7, #12]
 800fd7a:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 800fd7e:	68fb      	ldr	r3, [r7, #12]
 800fd80:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800fd84:	b29b      	uxth	r3, r3
 800fd86:	2b00      	cmp	r3, #0
 800fd88:	d1cc      	bne.n	800fd24 <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800fd8a:	683b      	ldr	r3, [r7, #0]
 800fd8c:	9300      	str	r3, [sp, #0]
 800fd8e:	697b      	ldr	r3, [r7, #20]
 800fd90:	2200      	movs	r2, #0
 800fd92:	2140      	movs	r1, #64	; 0x40
 800fd94:	68f8      	ldr	r0, [r7, #12]
 800fd96:	f000 ff3d 	bl	8010c14 <UART_WaitOnFlagUntilTimeout>
 800fd9a:	4603      	mov	r3, r0
 800fd9c:	2b00      	cmp	r3, #0
 800fd9e:	d001      	beq.n	800fda4 <HAL_UART_Transmit+0x116>
    {
      return HAL_TIMEOUT;
 800fda0:	2303      	movs	r3, #3
 800fda2:	e006      	b.n	800fdb2 <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800fda4:	68fb      	ldr	r3, [r7, #12]
 800fda6:	2220      	movs	r2, #32
 800fda8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    return HAL_OK;
 800fdac:	2300      	movs	r3, #0
 800fdae:	e000      	b.n	800fdb2 <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 800fdb0:	2302      	movs	r3, #2
  }
}
 800fdb2:	4618      	mov	r0, r3
 800fdb4:	3720      	adds	r7, #32
 800fdb6:	46bd      	mov	sp, r7
 800fdb8:	bd80      	pop	{r7, pc}
	...

0800fdbc <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800fdbc:	b580      	push	{r7, lr}
 800fdbe:	b084      	sub	sp, #16
 800fdc0:	af00      	add	r7, sp, #0
 800fdc2:	60f8      	str	r0, [r7, #12]
 800fdc4:	60b9      	str	r1, [r7, #8]
 800fdc6:	4613      	mov	r3, r2
 800fdc8:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800fdca:	68fb      	ldr	r3, [r7, #12]
 800fdcc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800fdd0:	2b20      	cmp	r3, #32
 800fdd2:	d170      	bne.n	800feb6 <HAL_UART_Receive_DMA+0xfa>
  {
    if ((pData == NULL) || (Size == 0U))
 800fdd4:	68bb      	ldr	r3, [r7, #8]
 800fdd6:	2b00      	cmp	r3, #0
 800fdd8:	d002      	beq.n	800fde0 <HAL_UART_Receive_DMA+0x24>
 800fdda:	88fb      	ldrh	r3, [r7, #6]
 800fddc:	2b00      	cmp	r3, #0
 800fdde:	d101      	bne.n	800fde4 <HAL_UART_Receive_DMA+0x28>
    {
      return HAL_ERROR;
 800fde0:	2301      	movs	r3, #1
 800fde2:	e069      	b.n	800feb8 <HAL_UART_Receive_DMA+0xfc>
    }

    __HAL_LOCK(huart);
 800fde4:	68fb      	ldr	r3, [r7, #12]
 800fde6:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 800fdea:	2b01      	cmp	r3, #1
 800fdec:	d101      	bne.n	800fdf2 <HAL_UART_Receive_DMA+0x36>
 800fdee:	2302      	movs	r3, #2
 800fdf0:	e062      	b.n	800feb8 <HAL_UART_Receive_DMA+0xfc>
 800fdf2:	68fb      	ldr	r3, [r7, #12]
 800fdf4:	2201      	movs	r2, #1
 800fdf6:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    huart->pRxBuffPtr = pData;
 800fdfa:	68fb      	ldr	r3, [r7, #12]
 800fdfc:	68ba      	ldr	r2, [r7, #8]
 800fdfe:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferSize = Size;
 800fe00:	68fb      	ldr	r3, [r7, #12]
 800fe02:	88fa      	ldrh	r2, [r7, #6]
 800fe04:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800fe08:	68fb      	ldr	r3, [r7, #12]
 800fe0a:	2200      	movs	r2, #0
 800fe0c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800fe10:	68fb      	ldr	r3, [r7, #12]
 800fe12:	2222      	movs	r2, #34	; 0x22
 800fe14:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    if (huart->hdmarx != NULL)
 800fe18:	68fb      	ldr	r3, [r7, #12]
 800fe1a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800fe1c:	2b00      	cmp	r3, #0
 800fe1e:	d02c      	beq.n	800fe7a <HAL_UART_Receive_DMA+0xbe>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800fe20:	68fb      	ldr	r3, [r7, #12]
 800fe22:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800fe24:	4a26      	ldr	r2, [pc, #152]	; (800fec0 <HAL_UART_Receive_DMA+0x104>)
 800fe26:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800fe28:	68fb      	ldr	r3, [r7, #12]
 800fe2a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800fe2c:	4a25      	ldr	r2, [pc, #148]	; (800fec4 <HAL_UART_Receive_DMA+0x108>)
 800fe2e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      huart->hdmarx->XferErrorCallback = UART_DMAError;
 800fe30:	68fb      	ldr	r3, [r7, #12]
 800fe32:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800fe34:	4a24      	ldr	r2, [pc, #144]	; (800fec8 <HAL_UART_Receive_DMA+0x10c>)
 800fe36:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Set the DMA abort callback */
      huart->hdmarx->XferAbortCallback = NULL;
 800fe38:	68fb      	ldr	r3, [r7, #12]
 800fe3a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800fe3c:	2200      	movs	r2, #0
 800fe3e:	651a      	str	r2, [r3, #80]	; 0x50

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 800fe40:	68fb      	ldr	r3, [r7, #12]
 800fe42:	6f98      	ldr	r0, [r3, #120]	; 0x78
 800fe44:	68fb      	ldr	r3, [r7, #12]
 800fe46:	681b      	ldr	r3, [r3, #0]
 800fe48:	3324      	adds	r3, #36	; 0x24
 800fe4a:	4619      	mov	r1, r3
 800fe4c:	68fb      	ldr	r3, [r7, #12]
 800fe4e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800fe50:	461a      	mov	r2, r3
 800fe52:	88fb      	ldrh	r3, [r7, #6]
 800fe54:	f7f5 f8da 	bl	800500c <HAL_DMA_Start_IT>
 800fe58:	4603      	mov	r3, r0
 800fe5a:	2b00      	cmp	r3, #0
 800fe5c:	d00d      	beq.n	800fe7a <HAL_UART_Receive_DMA+0xbe>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 800fe5e:	68fb      	ldr	r3, [r7, #12]
 800fe60:	2210      	movs	r2, #16
 800fe62:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 800fe66:	68fb      	ldr	r3, [r7, #12]
 800fe68:	2200      	movs	r2, #0
 800fe6a:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 800fe6e:	68fb      	ldr	r3, [r7, #12]
 800fe70:	2220      	movs	r2, #32
 800fe72:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        return HAL_ERROR;
 800fe76:	2301      	movs	r3, #1
 800fe78:	e01e      	b.n	800feb8 <HAL_UART_Receive_DMA+0xfc>
      }
    }
    __HAL_UNLOCK(huart);
 800fe7a:	68fb      	ldr	r3, [r7, #12]
 800fe7c:	2200      	movs	r2, #0
 800fe7e:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    /* Enable the UART Parity Error Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800fe82:	68fb      	ldr	r3, [r7, #12]
 800fe84:	681b      	ldr	r3, [r3, #0]
 800fe86:	681a      	ldr	r2, [r3, #0]
 800fe88:	68fb      	ldr	r3, [r7, #12]
 800fe8a:	681b      	ldr	r3, [r3, #0]
 800fe8c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800fe90:	601a      	str	r2, [r3, #0]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800fe92:	68fb      	ldr	r3, [r7, #12]
 800fe94:	681b      	ldr	r3, [r3, #0]
 800fe96:	689a      	ldr	r2, [r3, #8]
 800fe98:	68fb      	ldr	r3, [r7, #12]
 800fe9a:	681b      	ldr	r3, [r3, #0]
 800fe9c:	f042 0201 	orr.w	r2, r2, #1
 800fea0:	609a      	str	r2, [r3, #8]

    /* Enable the DMA transfer for the receiver request by setting the DMAR bit
    in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800fea2:	68fb      	ldr	r3, [r7, #12]
 800fea4:	681b      	ldr	r3, [r3, #0]
 800fea6:	689a      	ldr	r2, [r3, #8]
 800fea8:	68fb      	ldr	r3, [r7, #12]
 800feaa:	681b      	ldr	r3, [r3, #0]
 800feac:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800feb0:	609a      	str	r2, [r3, #8]

    return HAL_OK;
 800feb2:	2300      	movs	r3, #0
 800feb4:	e000      	b.n	800feb8 <HAL_UART_Receive_DMA+0xfc>
  }
  else
  {
    return HAL_BUSY;
 800feb6:	2302      	movs	r3, #2
  }
}
 800feb8:	4618      	mov	r0, r3
 800feba:	3710      	adds	r7, #16
 800febc:	46bd      	mov	sp, r7
 800febe:	bd80      	pop	{r7, pc}
 800fec0:	08010d99 	.word	0x08010d99
 800fec4:	08010dff 	.word	0x08010dff
 800fec8:	08010e1b 	.word	0x08010e1b

0800fecc <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800fecc:	b480      	push	{r7}
 800fece:	b083      	sub	sp, #12
 800fed0:	af00      	add	r7, sp, #0
 800fed2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800fed4:	bf00      	nop
 800fed6:	370c      	adds	r7, #12
 800fed8:	46bd      	mov	sp, r7
 800feda:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fede:	4770      	bx	lr

0800fee0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800fee0:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 800fee4:	b08e      	sub	sp, #56	; 0x38
 800fee6:	af00      	add	r7, sp, #0
 800fee8:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800feea:	2300      	movs	r3, #0
 800feec:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800fef0:	687b      	ldr	r3, [r7, #4]
 800fef2:	689a      	ldr	r2, [r3, #8]
 800fef4:	687b      	ldr	r3, [r7, #4]
 800fef6:	691b      	ldr	r3, [r3, #16]
 800fef8:	431a      	orrs	r2, r3
 800fefa:	687b      	ldr	r3, [r7, #4]
 800fefc:	695b      	ldr	r3, [r3, #20]
 800fefe:	431a      	orrs	r2, r3
 800ff00:	687b      	ldr	r3, [r7, #4]
 800ff02:	69db      	ldr	r3, [r3, #28]
 800ff04:	4313      	orrs	r3, r2
 800ff06:	637b      	str	r3, [r7, #52]	; 0x34
  tmpreg |= (uint32_t)huart->FifoMode;
 800ff08:	687b      	ldr	r3, [r7, #4]
 800ff0a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800ff0c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800ff0e:	4313      	orrs	r3, r2
 800ff10:	637b      	str	r3, [r7, #52]	; 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800ff12:	687b      	ldr	r3, [r7, #4]
 800ff14:	681b      	ldr	r3, [r3, #0]
 800ff16:	681a      	ldr	r2, [r3, #0]
 800ff18:	4bc1      	ldr	r3, [pc, #772]	; (8010220 <UART_SetConfig+0x340>)
 800ff1a:	4013      	ands	r3, r2
 800ff1c:	687a      	ldr	r2, [r7, #4]
 800ff1e:	6812      	ldr	r2, [r2, #0]
 800ff20:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800ff22:	430b      	orrs	r3, r1
 800ff24:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800ff26:	687b      	ldr	r3, [r7, #4]
 800ff28:	681b      	ldr	r3, [r3, #0]
 800ff2a:	685b      	ldr	r3, [r3, #4]
 800ff2c:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800ff30:	687b      	ldr	r3, [r7, #4]
 800ff32:	68da      	ldr	r2, [r3, #12]
 800ff34:	687b      	ldr	r3, [r7, #4]
 800ff36:	681b      	ldr	r3, [r3, #0]
 800ff38:	430a      	orrs	r2, r1
 800ff3a:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800ff3c:	687b      	ldr	r3, [r7, #4]
 800ff3e:	699b      	ldr	r3, [r3, #24]
 800ff40:	637b      	str	r3, [r7, #52]	; 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800ff42:	687b      	ldr	r3, [r7, #4]
 800ff44:	681b      	ldr	r3, [r3, #0]
 800ff46:	4ab7      	ldr	r2, [pc, #732]	; (8010224 <UART_SetConfig+0x344>)
 800ff48:	4293      	cmp	r3, r2
 800ff4a:	d004      	beq.n	800ff56 <UART_SetConfig+0x76>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800ff4c:	687b      	ldr	r3, [r7, #4]
 800ff4e:	6a1b      	ldr	r3, [r3, #32]
 800ff50:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800ff52:	4313      	orrs	r3, r2
 800ff54:	637b      	str	r3, [r7, #52]	; 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800ff56:	687b      	ldr	r3, [r7, #4]
 800ff58:	681b      	ldr	r3, [r3, #0]
 800ff5a:	689a      	ldr	r2, [r3, #8]
 800ff5c:	4bb2      	ldr	r3, [pc, #712]	; (8010228 <UART_SetConfig+0x348>)
 800ff5e:	4013      	ands	r3, r2
 800ff60:	687a      	ldr	r2, [r7, #4]
 800ff62:	6812      	ldr	r2, [r2, #0]
 800ff64:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800ff66:	430b      	orrs	r3, r1
 800ff68:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800ff6a:	687b      	ldr	r3, [r7, #4]
 800ff6c:	681b      	ldr	r3, [r3, #0]
 800ff6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ff70:	f023 010f 	bic.w	r1, r3, #15
 800ff74:	687b      	ldr	r3, [r7, #4]
 800ff76:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800ff78:	687b      	ldr	r3, [r7, #4]
 800ff7a:	681b      	ldr	r3, [r3, #0]
 800ff7c:	430a      	orrs	r2, r1
 800ff7e:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800ff80:	687b      	ldr	r3, [r7, #4]
 800ff82:	681b      	ldr	r3, [r3, #0]
 800ff84:	4aa9      	ldr	r2, [pc, #676]	; (801022c <UART_SetConfig+0x34c>)
 800ff86:	4293      	cmp	r3, r2
 800ff88:	d177      	bne.n	801007a <UART_SetConfig+0x19a>
 800ff8a:	4ba9      	ldr	r3, [pc, #676]	; (8010230 <UART_SetConfig+0x350>)
 800ff8c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ff8e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800ff92:	2b28      	cmp	r3, #40	; 0x28
 800ff94:	d86c      	bhi.n	8010070 <UART_SetConfig+0x190>
 800ff96:	a201      	add	r2, pc, #4	; (adr r2, 800ff9c <UART_SetConfig+0xbc>)
 800ff98:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ff9c:	08010041 	.word	0x08010041
 800ffa0:	08010071 	.word	0x08010071
 800ffa4:	08010071 	.word	0x08010071
 800ffa8:	08010071 	.word	0x08010071
 800ffac:	08010071 	.word	0x08010071
 800ffb0:	08010071 	.word	0x08010071
 800ffb4:	08010071 	.word	0x08010071
 800ffb8:	08010071 	.word	0x08010071
 800ffbc:	08010049 	.word	0x08010049
 800ffc0:	08010071 	.word	0x08010071
 800ffc4:	08010071 	.word	0x08010071
 800ffc8:	08010071 	.word	0x08010071
 800ffcc:	08010071 	.word	0x08010071
 800ffd0:	08010071 	.word	0x08010071
 800ffd4:	08010071 	.word	0x08010071
 800ffd8:	08010071 	.word	0x08010071
 800ffdc:	08010051 	.word	0x08010051
 800ffe0:	08010071 	.word	0x08010071
 800ffe4:	08010071 	.word	0x08010071
 800ffe8:	08010071 	.word	0x08010071
 800ffec:	08010071 	.word	0x08010071
 800fff0:	08010071 	.word	0x08010071
 800fff4:	08010071 	.word	0x08010071
 800fff8:	08010071 	.word	0x08010071
 800fffc:	08010059 	.word	0x08010059
 8010000:	08010071 	.word	0x08010071
 8010004:	08010071 	.word	0x08010071
 8010008:	08010071 	.word	0x08010071
 801000c:	08010071 	.word	0x08010071
 8010010:	08010071 	.word	0x08010071
 8010014:	08010071 	.word	0x08010071
 8010018:	08010071 	.word	0x08010071
 801001c:	08010061 	.word	0x08010061
 8010020:	08010071 	.word	0x08010071
 8010024:	08010071 	.word	0x08010071
 8010028:	08010071 	.word	0x08010071
 801002c:	08010071 	.word	0x08010071
 8010030:	08010071 	.word	0x08010071
 8010034:	08010071 	.word	0x08010071
 8010038:	08010071 	.word	0x08010071
 801003c:	08010069 	.word	0x08010069
 8010040:	2301      	movs	r3, #1
 8010042:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8010046:	e233      	b.n	80104b0 <UART_SetConfig+0x5d0>
 8010048:	2304      	movs	r3, #4
 801004a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 801004e:	e22f      	b.n	80104b0 <UART_SetConfig+0x5d0>
 8010050:	2308      	movs	r3, #8
 8010052:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8010056:	e22b      	b.n	80104b0 <UART_SetConfig+0x5d0>
 8010058:	2310      	movs	r3, #16
 801005a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 801005e:	e227      	b.n	80104b0 <UART_SetConfig+0x5d0>
 8010060:	2320      	movs	r3, #32
 8010062:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8010066:	e223      	b.n	80104b0 <UART_SetConfig+0x5d0>
 8010068:	2340      	movs	r3, #64	; 0x40
 801006a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 801006e:	e21f      	b.n	80104b0 <UART_SetConfig+0x5d0>
 8010070:	2380      	movs	r3, #128	; 0x80
 8010072:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8010076:	bf00      	nop
 8010078:	e21a      	b.n	80104b0 <UART_SetConfig+0x5d0>
 801007a:	687b      	ldr	r3, [r7, #4]
 801007c:	681b      	ldr	r3, [r3, #0]
 801007e:	4a6d      	ldr	r2, [pc, #436]	; (8010234 <UART_SetConfig+0x354>)
 8010080:	4293      	cmp	r3, r2
 8010082:	d132      	bne.n	80100ea <UART_SetConfig+0x20a>
 8010084:	4b6a      	ldr	r3, [pc, #424]	; (8010230 <UART_SetConfig+0x350>)
 8010086:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8010088:	f003 0307 	and.w	r3, r3, #7
 801008c:	2b05      	cmp	r3, #5
 801008e:	d827      	bhi.n	80100e0 <UART_SetConfig+0x200>
 8010090:	a201      	add	r2, pc, #4	; (adr r2, 8010098 <UART_SetConfig+0x1b8>)
 8010092:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010096:	bf00      	nop
 8010098:	080100b1 	.word	0x080100b1
 801009c:	080100b9 	.word	0x080100b9
 80100a0:	080100c1 	.word	0x080100c1
 80100a4:	080100c9 	.word	0x080100c9
 80100a8:	080100d1 	.word	0x080100d1
 80100ac:	080100d9 	.word	0x080100d9
 80100b0:	2300      	movs	r3, #0
 80100b2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80100b6:	e1fb      	b.n	80104b0 <UART_SetConfig+0x5d0>
 80100b8:	2304      	movs	r3, #4
 80100ba:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80100be:	e1f7      	b.n	80104b0 <UART_SetConfig+0x5d0>
 80100c0:	2308      	movs	r3, #8
 80100c2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80100c6:	e1f3      	b.n	80104b0 <UART_SetConfig+0x5d0>
 80100c8:	2310      	movs	r3, #16
 80100ca:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80100ce:	e1ef      	b.n	80104b0 <UART_SetConfig+0x5d0>
 80100d0:	2320      	movs	r3, #32
 80100d2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80100d6:	e1eb      	b.n	80104b0 <UART_SetConfig+0x5d0>
 80100d8:	2340      	movs	r3, #64	; 0x40
 80100da:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80100de:	e1e7      	b.n	80104b0 <UART_SetConfig+0x5d0>
 80100e0:	2380      	movs	r3, #128	; 0x80
 80100e2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80100e6:	bf00      	nop
 80100e8:	e1e2      	b.n	80104b0 <UART_SetConfig+0x5d0>
 80100ea:	687b      	ldr	r3, [r7, #4]
 80100ec:	681b      	ldr	r3, [r3, #0]
 80100ee:	4a52      	ldr	r2, [pc, #328]	; (8010238 <UART_SetConfig+0x358>)
 80100f0:	4293      	cmp	r3, r2
 80100f2:	d132      	bne.n	801015a <UART_SetConfig+0x27a>
 80100f4:	4b4e      	ldr	r3, [pc, #312]	; (8010230 <UART_SetConfig+0x350>)
 80100f6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80100f8:	f003 0307 	and.w	r3, r3, #7
 80100fc:	2b05      	cmp	r3, #5
 80100fe:	d827      	bhi.n	8010150 <UART_SetConfig+0x270>
 8010100:	a201      	add	r2, pc, #4	; (adr r2, 8010108 <UART_SetConfig+0x228>)
 8010102:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010106:	bf00      	nop
 8010108:	08010121 	.word	0x08010121
 801010c:	08010129 	.word	0x08010129
 8010110:	08010131 	.word	0x08010131
 8010114:	08010139 	.word	0x08010139
 8010118:	08010141 	.word	0x08010141
 801011c:	08010149 	.word	0x08010149
 8010120:	2300      	movs	r3, #0
 8010122:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8010126:	e1c3      	b.n	80104b0 <UART_SetConfig+0x5d0>
 8010128:	2304      	movs	r3, #4
 801012a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 801012e:	e1bf      	b.n	80104b0 <UART_SetConfig+0x5d0>
 8010130:	2308      	movs	r3, #8
 8010132:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8010136:	e1bb      	b.n	80104b0 <UART_SetConfig+0x5d0>
 8010138:	2310      	movs	r3, #16
 801013a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 801013e:	e1b7      	b.n	80104b0 <UART_SetConfig+0x5d0>
 8010140:	2320      	movs	r3, #32
 8010142:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8010146:	e1b3      	b.n	80104b0 <UART_SetConfig+0x5d0>
 8010148:	2340      	movs	r3, #64	; 0x40
 801014a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 801014e:	e1af      	b.n	80104b0 <UART_SetConfig+0x5d0>
 8010150:	2380      	movs	r3, #128	; 0x80
 8010152:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8010156:	bf00      	nop
 8010158:	e1aa      	b.n	80104b0 <UART_SetConfig+0x5d0>
 801015a:	687b      	ldr	r3, [r7, #4]
 801015c:	681b      	ldr	r3, [r3, #0]
 801015e:	4a37      	ldr	r2, [pc, #220]	; (801023c <UART_SetConfig+0x35c>)
 8010160:	4293      	cmp	r3, r2
 8010162:	d132      	bne.n	80101ca <UART_SetConfig+0x2ea>
 8010164:	4b32      	ldr	r3, [pc, #200]	; (8010230 <UART_SetConfig+0x350>)
 8010166:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8010168:	f003 0307 	and.w	r3, r3, #7
 801016c:	2b05      	cmp	r3, #5
 801016e:	d827      	bhi.n	80101c0 <UART_SetConfig+0x2e0>
 8010170:	a201      	add	r2, pc, #4	; (adr r2, 8010178 <UART_SetConfig+0x298>)
 8010172:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010176:	bf00      	nop
 8010178:	08010191 	.word	0x08010191
 801017c:	08010199 	.word	0x08010199
 8010180:	080101a1 	.word	0x080101a1
 8010184:	080101a9 	.word	0x080101a9
 8010188:	080101b1 	.word	0x080101b1
 801018c:	080101b9 	.word	0x080101b9
 8010190:	2300      	movs	r3, #0
 8010192:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8010196:	e18b      	b.n	80104b0 <UART_SetConfig+0x5d0>
 8010198:	2304      	movs	r3, #4
 801019a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 801019e:	e187      	b.n	80104b0 <UART_SetConfig+0x5d0>
 80101a0:	2308      	movs	r3, #8
 80101a2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80101a6:	e183      	b.n	80104b0 <UART_SetConfig+0x5d0>
 80101a8:	2310      	movs	r3, #16
 80101aa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80101ae:	e17f      	b.n	80104b0 <UART_SetConfig+0x5d0>
 80101b0:	2320      	movs	r3, #32
 80101b2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80101b6:	e17b      	b.n	80104b0 <UART_SetConfig+0x5d0>
 80101b8:	2340      	movs	r3, #64	; 0x40
 80101ba:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80101be:	e177      	b.n	80104b0 <UART_SetConfig+0x5d0>
 80101c0:	2380      	movs	r3, #128	; 0x80
 80101c2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80101c6:	bf00      	nop
 80101c8:	e172      	b.n	80104b0 <UART_SetConfig+0x5d0>
 80101ca:	687b      	ldr	r3, [r7, #4]
 80101cc:	681b      	ldr	r3, [r3, #0]
 80101ce:	4a1c      	ldr	r2, [pc, #112]	; (8010240 <UART_SetConfig+0x360>)
 80101d0:	4293      	cmp	r3, r2
 80101d2:	d144      	bne.n	801025e <UART_SetConfig+0x37e>
 80101d4:	4b16      	ldr	r3, [pc, #88]	; (8010230 <UART_SetConfig+0x350>)
 80101d6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80101d8:	f003 0307 	and.w	r3, r3, #7
 80101dc:	2b05      	cmp	r3, #5
 80101de:	d839      	bhi.n	8010254 <UART_SetConfig+0x374>
 80101e0:	a201      	add	r2, pc, #4	; (adr r2, 80101e8 <UART_SetConfig+0x308>)
 80101e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80101e6:	bf00      	nop
 80101e8:	08010201 	.word	0x08010201
 80101ec:	08010209 	.word	0x08010209
 80101f0:	08010211 	.word	0x08010211
 80101f4:	08010219 	.word	0x08010219
 80101f8:	08010245 	.word	0x08010245
 80101fc:	0801024d 	.word	0x0801024d
 8010200:	2300      	movs	r3, #0
 8010202:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8010206:	e153      	b.n	80104b0 <UART_SetConfig+0x5d0>
 8010208:	2304      	movs	r3, #4
 801020a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 801020e:	e14f      	b.n	80104b0 <UART_SetConfig+0x5d0>
 8010210:	2308      	movs	r3, #8
 8010212:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8010216:	e14b      	b.n	80104b0 <UART_SetConfig+0x5d0>
 8010218:	2310      	movs	r3, #16
 801021a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 801021e:	e147      	b.n	80104b0 <UART_SetConfig+0x5d0>
 8010220:	cfff69f3 	.word	0xcfff69f3
 8010224:	58000c00 	.word	0x58000c00
 8010228:	11fff4ff 	.word	0x11fff4ff
 801022c:	40011000 	.word	0x40011000
 8010230:	58024400 	.word	0x58024400
 8010234:	40004400 	.word	0x40004400
 8010238:	40004800 	.word	0x40004800
 801023c:	40004c00 	.word	0x40004c00
 8010240:	40005000 	.word	0x40005000
 8010244:	2320      	movs	r3, #32
 8010246:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 801024a:	e131      	b.n	80104b0 <UART_SetConfig+0x5d0>
 801024c:	2340      	movs	r3, #64	; 0x40
 801024e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8010252:	e12d      	b.n	80104b0 <UART_SetConfig+0x5d0>
 8010254:	2380      	movs	r3, #128	; 0x80
 8010256:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 801025a:	bf00      	nop
 801025c:	e128      	b.n	80104b0 <UART_SetConfig+0x5d0>
 801025e:	687b      	ldr	r3, [r7, #4]
 8010260:	681b      	ldr	r3, [r3, #0]
 8010262:	4ab6      	ldr	r2, [pc, #728]	; (801053c <UART_SetConfig+0x65c>)
 8010264:	4293      	cmp	r3, r2
 8010266:	d178      	bne.n	801035a <UART_SetConfig+0x47a>
 8010268:	4bb5      	ldr	r3, [pc, #724]	; (8010540 <UART_SetConfig+0x660>)
 801026a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801026c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8010270:	2b28      	cmp	r3, #40	; 0x28
 8010272:	d86d      	bhi.n	8010350 <UART_SetConfig+0x470>
 8010274:	a201      	add	r2, pc, #4	; (adr r2, 801027c <UART_SetConfig+0x39c>)
 8010276:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801027a:	bf00      	nop
 801027c:	08010321 	.word	0x08010321
 8010280:	08010351 	.word	0x08010351
 8010284:	08010351 	.word	0x08010351
 8010288:	08010351 	.word	0x08010351
 801028c:	08010351 	.word	0x08010351
 8010290:	08010351 	.word	0x08010351
 8010294:	08010351 	.word	0x08010351
 8010298:	08010351 	.word	0x08010351
 801029c:	08010329 	.word	0x08010329
 80102a0:	08010351 	.word	0x08010351
 80102a4:	08010351 	.word	0x08010351
 80102a8:	08010351 	.word	0x08010351
 80102ac:	08010351 	.word	0x08010351
 80102b0:	08010351 	.word	0x08010351
 80102b4:	08010351 	.word	0x08010351
 80102b8:	08010351 	.word	0x08010351
 80102bc:	08010331 	.word	0x08010331
 80102c0:	08010351 	.word	0x08010351
 80102c4:	08010351 	.word	0x08010351
 80102c8:	08010351 	.word	0x08010351
 80102cc:	08010351 	.word	0x08010351
 80102d0:	08010351 	.word	0x08010351
 80102d4:	08010351 	.word	0x08010351
 80102d8:	08010351 	.word	0x08010351
 80102dc:	08010339 	.word	0x08010339
 80102e0:	08010351 	.word	0x08010351
 80102e4:	08010351 	.word	0x08010351
 80102e8:	08010351 	.word	0x08010351
 80102ec:	08010351 	.word	0x08010351
 80102f0:	08010351 	.word	0x08010351
 80102f4:	08010351 	.word	0x08010351
 80102f8:	08010351 	.word	0x08010351
 80102fc:	08010341 	.word	0x08010341
 8010300:	08010351 	.word	0x08010351
 8010304:	08010351 	.word	0x08010351
 8010308:	08010351 	.word	0x08010351
 801030c:	08010351 	.word	0x08010351
 8010310:	08010351 	.word	0x08010351
 8010314:	08010351 	.word	0x08010351
 8010318:	08010351 	.word	0x08010351
 801031c:	08010349 	.word	0x08010349
 8010320:	2301      	movs	r3, #1
 8010322:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8010326:	e0c3      	b.n	80104b0 <UART_SetConfig+0x5d0>
 8010328:	2304      	movs	r3, #4
 801032a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 801032e:	e0bf      	b.n	80104b0 <UART_SetConfig+0x5d0>
 8010330:	2308      	movs	r3, #8
 8010332:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8010336:	e0bb      	b.n	80104b0 <UART_SetConfig+0x5d0>
 8010338:	2310      	movs	r3, #16
 801033a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 801033e:	e0b7      	b.n	80104b0 <UART_SetConfig+0x5d0>
 8010340:	2320      	movs	r3, #32
 8010342:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8010346:	e0b3      	b.n	80104b0 <UART_SetConfig+0x5d0>
 8010348:	2340      	movs	r3, #64	; 0x40
 801034a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 801034e:	e0af      	b.n	80104b0 <UART_SetConfig+0x5d0>
 8010350:	2380      	movs	r3, #128	; 0x80
 8010352:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8010356:	bf00      	nop
 8010358:	e0aa      	b.n	80104b0 <UART_SetConfig+0x5d0>
 801035a:	687b      	ldr	r3, [r7, #4]
 801035c:	681b      	ldr	r3, [r3, #0]
 801035e:	4a79      	ldr	r2, [pc, #484]	; (8010544 <UART_SetConfig+0x664>)
 8010360:	4293      	cmp	r3, r2
 8010362:	d132      	bne.n	80103ca <UART_SetConfig+0x4ea>
 8010364:	4b76      	ldr	r3, [pc, #472]	; (8010540 <UART_SetConfig+0x660>)
 8010366:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8010368:	f003 0307 	and.w	r3, r3, #7
 801036c:	2b05      	cmp	r3, #5
 801036e:	d827      	bhi.n	80103c0 <UART_SetConfig+0x4e0>
 8010370:	a201      	add	r2, pc, #4	; (adr r2, 8010378 <UART_SetConfig+0x498>)
 8010372:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010376:	bf00      	nop
 8010378:	08010391 	.word	0x08010391
 801037c:	08010399 	.word	0x08010399
 8010380:	080103a1 	.word	0x080103a1
 8010384:	080103a9 	.word	0x080103a9
 8010388:	080103b1 	.word	0x080103b1
 801038c:	080103b9 	.word	0x080103b9
 8010390:	2300      	movs	r3, #0
 8010392:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8010396:	e08b      	b.n	80104b0 <UART_SetConfig+0x5d0>
 8010398:	2304      	movs	r3, #4
 801039a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 801039e:	e087      	b.n	80104b0 <UART_SetConfig+0x5d0>
 80103a0:	2308      	movs	r3, #8
 80103a2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80103a6:	e083      	b.n	80104b0 <UART_SetConfig+0x5d0>
 80103a8:	2310      	movs	r3, #16
 80103aa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80103ae:	e07f      	b.n	80104b0 <UART_SetConfig+0x5d0>
 80103b0:	2320      	movs	r3, #32
 80103b2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80103b6:	e07b      	b.n	80104b0 <UART_SetConfig+0x5d0>
 80103b8:	2340      	movs	r3, #64	; 0x40
 80103ba:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80103be:	e077      	b.n	80104b0 <UART_SetConfig+0x5d0>
 80103c0:	2380      	movs	r3, #128	; 0x80
 80103c2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80103c6:	bf00      	nop
 80103c8:	e072      	b.n	80104b0 <UART_SetConfig+0x5d0>
 80103ca:	687b      	ldr	r3, [r7, #4]
 80103cc:	681b      	ldr	r3, [r3, #0]
 80103ce:	4a5e      	ldr	r2, [pc, #376]	; (8010548 <UART_SetConfig+0x668>)
 80103d0:	4293      	cmp	r3, r2
 80103d2:	d132      	bne.n	801043a <UART_SetConfig+0x55a>
 80103d4:	4b5a      	ldr	r3, [pc, #360]	; (8010540 <UART_SetConfig+0x660>)
 80103d6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80103d8:	f003 0307 	and.w	r3, r3, #7
 80103dc:	2b05      	cmp	r3, #5
 80103de:	d827      	bhi.n	8010430 <UART_SetConfig+0x550>
 80103e0:	a201      	add	r2, pc, #4	; (adr r2, 80103e8 <UART_SetConfig+0x508>)
 80103e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80103e6:	bf00      	nop
 80103e8:	08010401 	.word	0x08010401
 80103ec:	08010409 	.word	0x08010409
 80103f0:	08010411 	.word	0x08010411
 80103f4:	08010419 	.word	0x08010419
 80103f8:	08010421 	.word	0x08010421
 80103fc:	08010429 	.word	0x08010429
 8010400:	2300      	movs	r3, #0
 8010402:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8010406:	e053      	b.n	80104b0 <UART_SetConfig+0x5d0>
 8010408:	2304      	movs	r3, #4
 801040a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 801040e:	e04f      	b.n	80104b0 <UART_SetConfig+0x5d0>
 8010410:	2308      	movs	r3, #8
 8010412:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8010416:	e04b      	b.n	80104b0 <UART_SetConfig+0x5d0>
 8010418:	2310      	movs	r3, #16
 801041a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 801041e:	e047      	b.n	80104b0 <UART_SetConfig+0x5d0>
 8010420:	2320      	movs	r3, #32
 8010422:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8010426:	e043      	b.n	80104b0 <UART_SetConfig+0x5d0>
 8010428:	2340      	movs	r3, #64	; 0x40
 801042a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 801042e:	e03f      	b.n	80104b0 <UART_SetConfig+0x5d0>
 8010430:	2380      	movs	r3, #128	; 0x80
 8010432:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8010436:	bf00      	nop
 8010438:	e03a      	b.n	80104b0 <UART_SetConfig+0x5d0>
 801043a:	687b      	ldr	r3, [r7, #4]
 801043c:	681b      	ldr	r3, [r3, #0]
 801043e:	4a43      	ldr	r2, [pc, #268]	; (801054c <UART_SetConfig+0x66c>)
 8010440:	4293      	cmp	r3, r2
 8010442:	d132      	bne.n	80104aa <UART_SetConfig+0x5ca>
 8010444:	4b3e      	ldr	r3, [pc, #248]	; (8010540 <UART_SetConfig+0x660>)
 8010446:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8010448:	f003 0307 	and.w	r3, r3, #7
 801044c:	2b05      	cmp	r3, #5
 801044e:	d827      	bhi.n	80104a0 <UART_SetConfig+0x5c0>
 8010450:	a201      	add	r2, pc, #4	; (adr r2, 8010458 <UART_SetConfig+0x578>)
 8010452:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010456:	bf00      	nop
 8010458:	08010471 	.word	0x08010471
 801045c:	08010479 	.word	0x08010479
 8010460:	08010481 	.word	0x08010481
 8010464:	08010489 	.word	0x08010489
 8010468:	08010491 	.word	0x08010491
 801046c:	08010499 	.word	0x08010499
 8010470:	2302      	movs	r3, #2
 8010472:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8010476:	e01b      	b.n	80104b0 <UART_SetConfig+0x5d0>
 8010478:	2304      	movs	r3, #4
 801047a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 801047e:	e017      	b.n	80104b0 <UART_SetConfig+0x5d0>
 8010480:	2308      	movs	r3, #8
 8010482:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8010486:	e013      	b.n	80104b0 <UART_SetConfig+0x5d0>
 8010488:	2310      	movs	r3, #16
 801048a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 801048e:	e00f      	b.n	80104b0 <UART_SetConfig+0x5d0>
 8010490:	2320      	movs	r3, #32
 8010492:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8010496:	e00b      	b.n	80104b0 <UART_SetConfig+0x5d0>
 8010498:	2340      	movs	r3, #64	; 0x40
 801049a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 801049e:	e007      	b.n	80104b0 <UART_SetConfig+0x5d0>
 80104a0:	2380      	movs	r3, #128	; 0x80
 80104a2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80104a6:	bf00      	nop
 80104a8:	e002      	b.n	80104b0 <UART_SetConfig+0x5d0>
 80104aa:	2380      	movs	r3, #128	; 0x80
 80104ac:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80104b0:	687b      	ldr	r3, [r7, #4]
 80104b2:	681b      	ldr	r3, [r3, #0]
 80104b4:	4a25      	ldr	r2, [pc, #148]	; (801054c <UART_SetConfig+0x66c>)
 80104b6:	4293      	cmp	r3, r2
 80104b8:	f040 80b8 	bne.w	801062c <UART_SetConfig+0x74c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80104bc:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80104c0:	2b08      	cmp	r3, #8
 80104c2:	d019      	beq.n	80104f8 <UART_SetConfig+0x618>
 80104c4:	2b08      	cmp	r3, #8
 80104c6:	dc04      	bgt.n	80104d2 <UART_SetConfig+0x5f2>
 80104c8:	2b02      	cmp	r3, #2
 80104ca:	d009      	beq.n	80104e0 <UART_SetConfig+0x600>
 80104cc:	2b04      	cmp	r3, #4
 80104ce:	d00b      	beq.n	80104e8 <UART_SetConfig+0x608>
 80104d0:	e042      	b.n	8010558 <UART_SetConfig+0x678>
 80104d2:	2b20      	cmp	r3, #32
 80104d4:	d02b      	beq.n	801052e <UART_SetConfig+0x64e>
 80104d6:	2b40      	cmp	r3, #64	; 0x40
 80104d8:	d02c      	beq.n	8010534 <UART_SetConfig+0x654>
 80104da:	2b10      	cmp	r3, #16
 80104dc:	d014      	beq.n	8010508 <UART_SetConfig+0x628>
 80104de:	e03b      	b.n	8010558 <UART_SetConfig+0x678>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 80104e0:	f7fb fadc 	bl	800ba9c <HAL_RCCEx_GetD3PCLK1Freq>
 80104e4:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 80104e6:	e03d      	b.n	8010564 <UART_SetConfig+0x684>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80104e8:	f107 0314 	add.w	r3, r7, #20
 80104ec:	4618      	mov	r0, r3
 80104ee:	f7fb faeb 	bl	800bac8 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80104f2:	69bb      	ldr	r3, [r7, #24]
 80104f4:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80104f6:	e035      	b.n	8010564 <UART_SetConfig+0x684>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80104f8:	f107 0308 	add.w	r3, r7, #8
 80104fc:	4618      	mov	r0, r3
 80104fe:	f7fb fc2f 	bl	800bd60 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8010502:	68fb      	ldr	r3, [r7, #12]
 8010504:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8010506:	e02d      	b.n	8010564 <UART_SetConfig+0x684>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8010508:	4b0d      	ldr	r3, [pc, #52]	; (8010540 <UART_SetConfig+0x660>)
 801050a:	681b      	ldr	r3, [r3, #0]
 801050c:	f003 0320 	and.w	r3, r3, #32
 8010510:	2b00      	cmp	r3, #0
 8010512:	d009      	beq.n	8010528 <UART_SetConfig+0x648>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8010514:	4b0a      	ldr	r3, [pc, #40]	; (8010540 <UART_SetConfig+0x660>)
 8010516:	681b      	ldr	r3, [r3, #0]
 8010518:	08db      	lsrs	r3, r3, #3
 801051a:	f003 0303 	and.w	r3, r3, #3
 801051e:	4a0c      	ldr	r2, [pc, #48]	; (8010550 <UART_SetConfig+0x670>)
 8010520:	fa22 f303 	lsr.w	r3, r2, r3
 8010524:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8010526:	e01d      	b.n	8010564 <UART_SetConfig+0x684>
          pclk = (uint32_t) HSI_VALUE;
 8010528:	4b09      	ldr	r3, [pc, #36]	; (8010550 <UART_SetConfig+0x670>)
 801052a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 801052c:	e01a      	b.n	8010564 <UART_SetConfig+0x684>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 801052e:	4b09      	ldr	r3, [pc, #36]	; (8010554 <UART_SetConfig+0x674>)
 8010530:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8010532:	e017      	b.n	8010564 <UART_SetConfig+0x684>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8010534:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8010538:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 801053a:	e013      	b.n	8010564 <UART_SetConfig+0x684>
 801053c:	40011400 	.word	0x40011400
 8010540:	58024400 	.word	0x58024400
 8010544:	40007800 	.word	0x40007800
 8010548:	40007c00 	.word	0x40007c00
 801054c:	58000c00 	.word	0x58000c00
 8010550:	03d09000 	.word	0x03d09000
 8010554:	003d0900 	.word	0x003d0900
      default:
        pclk = 0U;
 8010558:	2300      	movs	r3, #0
 801055a:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 801055c:	2301      	movs	r3, #1
 801055e:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 8010562:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8010564:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010566:	2b00      	cmp	r3, #0
 8010568:	f000 824d 	beq.w	8010a06 <UART_SetConfig+0xb26>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 801056c:	687b      	ldr	r3, [r7, #4]
 801056e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010570:	4aad      	ldr	r2, [pc, #692]	; (8010828 <UART_SetConfig+0x948>)
 8010572:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8010576:	461a      	mov	r2, r3
 8010578:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801057a:	fbb3 f3f2 	udiv	r3, r3, r2
 801057e:	623b      	str	r3, [r7, #32]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8010580:	687b      	ldr	r3, [r7, #4]
 8010582:	685a      	ldr	r2, [r3, #4]
 8010584:	4613      	mov	r3, r2
 8010586:	005b      	lsls	r3, r3, #1
 8010588:	4413      	add	r3, r2
 801058a:	6a3a      	ldr	r2, [r7, #32]
 801058c:	429a      	cmp	r2, r3
 801058e:	d305      	bcc.n	801059c <UART_SetConfig+0x6bc>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8010590:	687b      	ldr	r3, [r7, #4]
 8010592:	685b      	ldr	r3, [r3, #4]
 8010594:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8010596:	6a3a      	ldr	r2, [r7, #32]
 8010598:	429a      	cmp	r2, r3
 801059a:	d903      	bls.n	80105a4 <UART_SetConfig+0x6c4>
      {
        ret = HAL_ERROR;
 801059c:	2301      	movs	r3, #1
 801059e:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 80105a2:	e230      	b.n	8010a06 <UART_SetConfig+0xb26>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, (uint64_t)huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80105a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80105a6:	4618      	mov	r0, r3
 80105a8:	f04f 0100 	mov.w	r1, #0
 80105ac:	687b      	ldr	r3, [r7, #4]
 80105ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80105b0:	4a9d      	ldr	r2, [pc, #628]	; (8010828 <UART_SetConfig+0x948>)
 80105b2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80105b6:	b29b      	uxth	r3, r3
 80105b8:	f04f 0400 	mov.w	r4, #0
 80105bc:	461a      	mov	r2, r3
 80105be:	4623      	mov	r3, r4
 80105c0:	f7ef fee6 	bl	8000390 <__aeabi_uldivmod>
 80105c4:	4603      	mov	r3, r0
 80105c6:	460c      	mov	r4, r1
 80105c8:	4619      	mov	r1, r3
 80105ca:	4622      	mov	r2, r4
 80105cc:	f04f 0300 	mov.w	r3, #0
 80105d0:	f04f 0400 	mov.w	r4, #0
 80105d4:	0214      	lsls	r4, r2, #8
 80105d6:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 80105da:	020b      	lsls	r3, r1, #8
 80105dc:	687a      	ldr	r2, [r7, #4]
 80105de:	6852      	ldr	r2, [r2, #4]
 80105e0:	0852      	lsrs	r2, r2, #1
 80105e2:	4611      	mov	r1, r2
 80105e4:	f04f 0200 	mov.w	r2, #0
 80105e8:	eb13 0b01 	adds.w	fp, r3, r1
 80105ec:	eb44 0c02 	adc.w	ip, r4, r2
 80105f0:	4658      	mov	r0, fp
 80105f2:	4661      	mov	r1, ip
 80105f4:	687b      	ldr	r3, [r7, #4]
 80105f6:	685b      	ldr	r3, [r3, #4]
 80105f8:	f04f 0400 	mov.w	r4, #0
 80105fc:	461a      	mov	r2, r3
 80105fe:	4623      	mov	r3, r4
 8010600:	f7ef fec6 	bl	8000390 <__aeabi_uldivmod>
 8010604:	4603      	mov	r3, r0
 8010606:	460c      	mov	r4, r1
 8010608:	62bb      	str	r3, [r7, #40]	; 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 801060a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801060c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8010610:	d308      	bcc.n	8010624 <UART_SetConfig+0x744>
 8010612:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010614:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8010618:	d204      	bcs.n	8010624 <UART_SetConfig+0x744>
        {
          huart->Instance->BRR = usartdiv;
 801061a:	687b      	ldr	r3, [r7, #4]
 801061c:	681b      	ldr	r3, [r3, #0]
 801061e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8010620:	60da      	str	r2, [r3, #12]
 8010622:	e1f0      	b.n	8010a06 <UART_SetConfig+0xb26>
        }
        else
        {
          ret = HAL_ERROR;
 8010624:	2301      	movs	r3, #1
 8010626:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 801062a:	e1ec      	b.n	8010a06 <UART_SetConfig+0xb26>
        }
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 801062c:	687b      	ldr	r3, [r7, #4]
 801062e:	69db      	ldr	r3, [r3, #28]
 8010630:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8010634:	f040 8100 	bne.w	8010838 <UART_SetConfig+0x958>
  {
    switch (clocksource)
 8010638:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 801063c:	2b40      	cmp	r3, #64	; 0x40
 801063e:	f200 80b7 	bhi.w	80107b0 <UART_SetConfig+0x8d0>
 8010642:	a201      	add	r2, pc, #4	; (adr r2, 8010648 <UART_SetConfig+0x768>)
 8010644:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010648:	0801074d 	.word	0x0801074d
 801064c:	08010755 	.word	0x08010755
 8010650:	080107b1 	.word	0x080107b1
 8010654:	080107b1 	.word	0x080107b1
 8010658:	0801075d 	.word	0x0801075d
 801065c:	080107b1 	.word	0x080107b1
 8010660:	080107b1 	.word	0x080107b1
 8010664:	080107b1 	.word	0x080107b1
 8010668:	0801076d 	.word	0x0801076d
 801066c:	080107b1 	.word	0x080107b1
 8010670:	080107b1 	.word	0x080107b1
 8010674:	080107b1 	.word	0x080107b1
 8010678:	080107b1 	.word	0x080107b1
 801067c:	080107b1 	.word	0x080107b1
 8010680:	080107b1 	.word	0x080107b1
 8010684:	080107b1 	.word	0x080107b1
 8010688:	0801077d 	.word	0x0801077d
 801068c:	080107b1 	.word	0x080107b1
 8010690:	080107b1 	.word	0x080107b1
 8010694:	080107b1 	.word	0x080107b1
 8010698:	080107b1 	.word	0x080107b1
 801069c:	080107b1 	.word	0x080107b1
 80106a0:	080107b1 	.word	0x080107b1
 80106a4:	080107b1 	.word	0x080107b1
 80106a8:	080107b1 	.word	0x080107b1
 80106ac:	080107b1 	.word	0x080107b1
 80106b0:	080107b1 	.word	0x080107b1
 80106b4:	080107b1 	.word	0x080107b1
 80106b8:	080107b1 	.word	0x080107b1
 80106bc:	080107b1 	.word	0x080107b1
 80106c0:	080107b1 	.word	0x080107b1
 80106c4:	080107b1 	.word	0x080107b1
 80106c8:	080107a3 	.word	0x080107a3
 80106cc:	080107b1 	.word	0x080107b1
 80106d0:	080107b1 	.word	0x080107b1
 80106d4:	080107b1 	.word	0x080107b1
 80106d8:	080107b1 	.word	0x080107b1
 80106dc:	080107b1 	.word	0x080107b1
 80106e0:	080107b1 	.word	0x080107b1
 80106e4:	080107b1 	.word	0x080107b1
 80106e8:	080107b1 	.word	0x080107b1
 80106ec:	080107b1 	.word	0x080107b1
 80106f0:	080107b1 	.word	0x080107b1
 80106f4:	080107b1 	.word	0x080107b1
 80106f8:	080107b1 	.word	0x080107b1
 80106fc:	080107b1 	.word	0x080107b1
 8010700:	080107b1 	.word	0x080107b1
 8010704:	080107b1 	.word	0x080107b1
 8010708:	080107b1 	.word	0x080107b1
 801070c:	080107b1 	.word	0x080107b1
 8010710:	080107b1 	.word	0x080107b1
 8010714:	080107b1 	.word	0x080107b1
 8010718:	080107b1 	.word	0x080107b1
 801071c:	080107b1 	.word	0x080107b1
 8010720:	080107b1 	.word	0x080107b1
 8010724:	080107b1 	.word	0x080107b1
 8010728:	080107b1 	.word	0x080107b1
 801072c:	080107b1 	.word	0x080107b1
 8010730:	080107b1 	.word	0x080107b1
 8010734:	080107b1 	.word	0x080107b1
 8010738:	080107b1 	.word	0x080107b1
 801073c:	080107b1 	.word	0x080107b1
 8010740:	080107b1 	.word	0x080107b1
 8010744:	080107b1 	.word	0x080107b1
 8010748:	080107a9 	.word	0x080107a9
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 801074c:	f7f9 fff8 	bl	800a740 <HAL_RCC_GetPCLK1Freq>
 8010750:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8010752:	e033      	b.n	80107bc <UART_SetConfig+0x8dc>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8010754:	f7fa f80a 	bl	800a76c <HAL_RCC_GetPCLK2Freq>
 8010758:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 801075a:	e02f      	b.n	80107bc <UART_SetConfig+0x8dc>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 801075c:	f107 0314 	add.w	r3, r7, #20
 8010760:	4618      	mov	r0, r3
 8010762:	f7fb f9b1 	bl	800bac8 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8010766:	69bb      	ldr	r3, [r7, #24]
 8010768:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 801076a:	e027      	b.n	80107bc <UART_SetConfig+0x8dc>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 801076c:	f107 0308 	add.w	r3, r7, #8
 8010770:	4618      	mov	r0, r3
 8010772:	f7fb faf5 	bl	800bd60 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8010776:	68fb      	ldr	r3, [r7, #12]
 8010778:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 801077a:	e01f      	b.n	80107bc <UART_SetConfig+0x8dc>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 801077c:	4b2b      	ldr	r3, [pc, #172]	; (801082c <UART_SetConfig+0x94c>)
 801077e:	681b      	ldr	r3, [r3, #0]
 8010780:	f003 0320 	and.w	r3, r3, #32
 8010784:	2b00      	cmp	r3, #0
 8010786:	d009      	beq.n	801079c <UART_SetConfig+0x8bc>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8010788:	4b28      	ldr	r3, [pc, #160]	; (801082c <UART_SetConfig+0x94c>)
 801078a:	681b      	ldr	r3, [r3, #0]
 801078c:	08db      	lsrs	r3, r3, #3
 801078e:	f003 0303 	and.w	r3, r3, #3
 8010792:	4a27      	ldr	r2, [pc, #156]	; (8010830 <UART_SetConfig+0x950>)
 8010794:	fa22 f303 	lsr.w	r3, r2, r3
 8010798:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 801079a:	e00f      	b.n	80107bc <UART_SetConfig+0x8dc>
          pclk = (uint32_t) HSI_VALUE;
 801079c:	4b24      	ldr	r3, [pc, #144]	; (8010830 <UART_SetConfig+0x950>)
 801079e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80107a0:	e00c      	b.n	80107bc <UART_SetConfig+0x8dc>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80107a2:	4b24      	ldr	r3, [pc, #144]	; (8010834 <UART_SetConfig+0x954>)
 80107a4:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80107a6:	e009      	b.n	80107bc <UART_SetConfig+0x8dc>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80107a8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80107ac:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80107ae:	e005      	b.n	80107bc <UART_SetConfig+0x8dc>
      default:
        pclk = 0U;
 80107b0:	2300      	movs	r3, #0
 80107b2:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 80107b4:	2301      	movs	r3, #1
 80107b6:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 80107ba:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80107bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80107be:	2b00      	cmp	r3, #0
 80107c0:	f000 8121 	beq.w	8010a06 <UART_SetConfig+0xb26>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80107c4:	687b      	ldr	r3, [r7, #4]
 80107c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80107c8:	4a17      	ldr	r2, [pc, #92]	; (8010828 <UART_SetConfig+0x948>)
 80107ca:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80107ce:	461a      	mov	r2, r3
 80107d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80107d2:	fbb3 f3f2 	udiv	r3, r3, r2
 80107d6:	005a      	lsls	r2, r3, #1
 80107d8:	687b      	ldr	r3, [r7, #4]
 80107da:	685b      	ldr	r3, [r3, #4]
 80107dc:	085b      	lsrs	r3, r3, #1
 80107de:	441a      	add	r2, r3
 80107e0:	687b      	ldr	r3, [r7, #4]
 80107e2:	685b      	ldr	r3, [r3, #4]
 80107e4:	fbb2 f3f3 	udiv	r3, r2, r3
 80107e8:	b29b      	uxth	r3, r3
 80107ea:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80107ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80107ee:	2b0f      	cmp	r3, #15
 80107f0:	d916      	bls.n	8010820 <UART_SetConfig+0x940>
 80107f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80107f4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80107f8:	d212      	bcs.n	8010820 <UART_SetConfig+0x940>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80107fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80107fc:	b29b      	uxth	r3, r3
 80107fe:	f023 030f 	bic.w	r3, r3, #15
 8010802:	84fb      	strh	r3, [r7, #38]	; 0x26
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8010804:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010806:	085b      	lsrs	r3, r3, #1
 8010808:	b29b      	uxth	r3, r3
 801080a:	f003 0307 	and.w	r3, r3, #7
 801080e:	b29a      	uxth	r2, r3
 8010810:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8010812:	4313      	orrs	r3, r2
 8010814:	84fb      	strh	r3, [r7, #38]	; 0x26
        huart->Instance->BRR = brrtemp;
 8010816:	687b      	ldr	r3, [r7, #4]
 8010818:	681b      	ldr	r3, [r3, #0]
 801081a:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 801081c:	60da      	str	r2, [r3, #12]
 801081e:	e0f2      	b.n	8010a06 <UART_SetConfig+0xb26>
      }
      else
      {
        ret = HAL_ERROR;
 8010820:	2301      	movs	r3, #1
 8010822:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 8010826:	e0ee      	b.n	8010a06 <UART_SetConfig+0xb26>
 8010828:	0801b024 	.word	0x0801b024
 801082c:	58024400 	.word	0x58024400
 8010830:	03d09000 	.word	0x03d09000
 8010834:	003d0900 	.word	0x003d0900
      }
    }
  }
  else
  {
    switch (clocksource)
 8010838:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 801083c:	2b40      	cmp	r3, #64	; 0x40
 801083e:	f200 80b7 	bhi.w	80109b0 <UART_SetConfig+0xad0>
 8010842:	a201      	add	r2, pc, #4	; (adr r2, 8010848 <UART_SetConfig+0x968>)
 8010844:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010848:	0801094d 	.word	0x0801094d
 801084c:	08010955 	.word	0x08010955
 8010850:	080109b1 	.word	0x080109b1
 8010854:	080109b1 	.word	0x080109b1
 8010858:	0801095d 	.word	0x0801095d
 801085c:	080109b1 	.word	0x080109b1
 8010860:	080109b1 	.word	0x080109b1
 8010864:	080109b1 	.word	0x080109b1
 8010868:	0801096d 	.word	0x0801096d
 801086c:	080109b1 	.word	0x080109b1
 8010870:	080109b1 	.word	0x080109b1
 8010874:	080109b1 	.word	0x080109b1
 8010878:	080109b1 	.word	0x080109b1
 801087c:	080109b1 	.word	0x080109b1
 8010880:	080109b1 	.word	0x080109b1
 8010884:	080109b1 	.word	0x080109b1
 8010888:	0801097d 	.word	0x0801097d
 801088c:	080109b1 	.word	0x080109b1
 8010890:	080109b1 	.word	0x080109b1
 8010894:	080109b1 	.word	0x080109b1
 8010898:	080109b1 	.word	0x080109b1
 801089c:	080109b1 	.word	0x080109b1
 80108a0:	080109b1 	.word	0x080109b1
 80108a4:	080109b1 	.word	0x080109b1
 80108a8:	080109b1 	.word	0x080109b1
 80108ac:	080109b1 	.word	0x080109b1
 80108b0:	080109b1 	.word	0x080109b1
 80108b4:	080109b1 	.word	0x080109b1
 80108b8:	080109b1 	.word	0x080109b1
 80108bc:	080109b1 	.word	0x080109b1
 80108c0:	080109b1 	.word	0x080109b1
 80108c4:	080109b1 	.word	0x080109b1
 80108c8:	080109a3 	.word	0x080109a3
 80108cc:	080109b1 	.word	0x080109b1
 80108d0:	080109b1 	.word	0x080109b1
 80108d4:	080109b1 	.word	0x080109b1
 80108d8:	080109b1 	.word	0x080109b1
 80108dc:	080109b1 	.word	0x080109b1
 80108e0:	080109b1 	.word	0x080109b1
 80108e4:	080109b1 	.word	0x080109b1
 80108e8:	080109b1 	.word	0x080109b1
 80108ec:	080109b1 	.word	0x080109b1
 80108f0:	080109b1 	.word	0x080109b1
 80108f4:	080109b1 	.word	0x080109b1
 80108f8:	080109b1 	.word	0x080109b1
 80108fc:	080109b1 	.word	0x080109b1
 8010900:	080109b1 	.word	0x080109b1
 8010904:	080109b1 	.word	0x080109b1
 8010908:	080109b1 	.word	0x080109b1
 801090c:	080109b1 	.word	0x080109b1
 8010910:	080109b1 	.word	0x080109b1
 8010914:	080109b1 	.word	0x080109b1
 8010918:	080109b1 	.word	0x080109b1
 801091c:	080109b1 	.word	0x080109b1
 8010920:	080109b1 	.word	0x080109b1
 8010924:	080109b1 	.word	0x080109b1
 8010928:	080109b1 	.word	0x080109b1
 801092c:	080109b1 	.word	0x080109b1
 8010930:	080109b1 	.word	0x080109b1
 8010934:	080109b1 	.word	0x080109b1
 8010938:	080109b1 	.word	0x080109b1
 801093c:	080109b1 	.word	0x080109b1
 8010940:	080109b1 	.word	0x080109b1
 8010944:	080109b1 	.word	0x080109b1
 8010948:	080109a9 	.word	0x080109a9
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 801094c:	f7f9 fef8 	bl	800a740 <HAL_RCC_GetPCLK1Freq>
 8010950:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8010952:	e033      	b.n	80109bc <UART_SetConfig+0xadc>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8010954:	f7f9 ff0a 	bl	800a76c <HAL_RCC_GetPCLK2Freq>
 8010958:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 801095a:	e02f      	b.n	80109bc <UART_SetConfig+0xadc>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 801095c:	f107 0314 	add.w	r3, r7, #20
 8010960:	4618      	mov	r0, r3
 8010962:	f7fb f8b1 	bl	800bac8 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8010966:	69bb      	ldr	r3, [r7, #24]
 8010968:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 801096a:	e027      	b.n	80109bc <UART_SetConfig+0xadc>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 801096c:	f107 0308 	add.w	r3, r7, #8
 8010970:	4618      	mov	r0, r3
 8010972:	f7fb f9f5 	bl	800bd60 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8010976:	68fb      	ldr	r3, [r7, #12]
 8010978:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 801097a:	e01f      	b.n	80109bc <UART_SetConfig+0xadc>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 801097c:	4b2c      	ldr	r3, [pc, #176]	; (8010a30 <UART_SetConfig+0xb50>)
 801097e:	681b      	ldr	r3, [r3, #0]
 8010980:	f003 0320 	and.w	r3, r3, #32
 8010984:	2b00      	cmp	r3, #0
 8010986:	d009      	beq.n	801099c <UART_SetConfig+0xabc>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8010988:	4b29      	ldr	r3, [pc, #164]	; (8010a30 <UART_SetConfig+0xb50>)
 801098a:	681b      	ldr	r3, [r3, #0]
 801098c:	08db      	lsrs	r3, r3, #3
 801098e:	f003 0303 	and.w	r3, r3, #3
 8010992:	4a28      	ldr	r2, [pc, #160]	; (8010a34 <UART_SetConfig+0xb54>)
 8010994:	fa22 f303 	lsr.w	r3, r2, r3
 8010998:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 801099a:	e00f      	b.n	80109bc <UART_SetConfig+0xadc>
          pclk = (uint32_t) HSI_VALUE;
 801099c:	4b25      	ldr	r3, [pc, #148]	; (8010a34 <UART_SetConfig+0xb54>)
 801099e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80109a0:	e00c      	b.n	80109bc <UART_SetConfig+0xadc>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80109a2:	4b25      	ldr	r3, [pc, #148]	; (8010a38 <UART_SetConfig+0xb58>)
 80109a4:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80109a6:	e009      	b.n	80109bc <UART_SetConfig+0xadc>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80109a8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80109ac:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80109ae:	e005      	b.n	80109bc <UART_SetConfig+0xadc>
      default:
        pclk = 0U;
 80109b0:	2300      	movs	r3, #0
 80109b2:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 80109b4:	2301      	movs	r3, #1
 80109b6:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 80109ba:	bf00      	nop
    }

    if (pclk != 0U)
 80109bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80109be:	2b00      	cmp	r3, #0
 80109c0:	d021      	beq.n	8010a06 <UART_SetConfig+0xb26>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80109c2:	687b      	ldr	r3, [r7, #4]
 80109c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80109c6:	4a1d      	ldr	r2, [pc, #116]	; (8010a3c <UART_SetConfig+0xb5c>)
 80109c8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80109cc:	461a      	mov	r2, r3
 80109ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80109d0:	fbb3 f2f2 	udiv	r2, r3, r2
 80109d4:	687b      	ldr	r3, [r7, #4]
 80109d6:	685b      	ldr	r3, [r3, #4]
 80109d8:	085b      	lsrs	r3, r3, #1
 80109da:	441a      	add	r2, r3
 80109dc:	687b      	ldr	r3, [r7, #4]
 80109de:	685b      	ldr	r3, [r3, #4]
 80109e0:	fbb2 f3f3 	udiv	r3, r2, r3
 80109e4:	b29b      	uxth	r3, r3
 80109e6:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80109e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80109ea:	2b0f      	cmp	r3, #15
 80109ec:	d908      	bls.n	8010a00 <UART_SetConfig+0xb20>
 80109ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80109f0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80109f4:	d204      	bcs.n	8010a00 <UART_SetConfig+0xb20>
      {
        huart->Instance->BRR = usartdiv;
 80109f6:	687b      	ldr	r3, [r7, #4]
 80109f8:	681b      	ldr	r3, [r3, #0]
 80109fa:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80109fc:	60da      	str	r2, [r3, #12]
 80109fe:	e002      	b.n	8010a06 <UART_SetConfig+0xb26>
      }
      else
      {
        ret = HAL_ERROR;
 8010a00:	2301      	movs	r3, #1
 8010a02:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8010a06:	687b      	ldr	r3, [r7, #4]
 8010a08:	2201      	movs	r2, #1
 8010a0a:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8010a0e:	687b      	ldr	r3, [r7, #4]
 8010a10:	2201      	movs	r2, #1
 8010a12:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8010a16:	687b      	ldr	r3, [r7, #4]
 8010a18:	2200      	movs	r2, #0
 8010a1a:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->TxISR = NULL;
 8010a1c:	687b      	ldr	r3, [r7, #4]
 8010a1e:	2200      	movs	r2, #0
 8010a20:	671a      	str	r2, [r3, #112]	; 0x70

  return ret;
 8010a22:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
}
 8010a26:	4618      	mov	r0, r3
 8010a28:	3738      	adds	r7, #56	; 0x38
 8010a2a:	46bd      	mov	sp, r7
 8010a2c:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}
 8010a30:	58024400 	.word	0x58024400
 8010a34:	03d09000 	.word	0x03d09000
 8010a38:	003d0900 	.word	0x003d0900
 8010a3c:	0801b024 	.word	0x0801b024

08010a40 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8010a40:	b480      	push	{r7}
 8010a42:	b083      	sub	sp, #12
 8010a44:	af00      	add	r7, sp, #0
 8010a46:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8010a48:	687b      	ldr	r3, [r7, #4]
 8010a4a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010a4c:	f003 0301 	and.w	r3, r3, #1
 8010a50:	2b00      	cmp	r3, #0
 8010a52:	d00a      	beq.n	8010a6a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8010a54:	687b      	ldr	r3, [r7, #4]
 8010a56:	681b      	ldr	r3, [r3, #0]
 8010a58:	685b      	ldr	r3, [r3, #4]
 8010a5a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8010a5e:	687b      	ldr	r3, [r7, #4]
 8010a60:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010a62:	687b      	ldr	r3, [r7, #4]
 8010a64:	681b      	ldr	r3, [r3, #0]
 8010a66:	430a      	orrs	r2, r1
 8010a68:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8010a6a:	687b      	ldr	r3, [r7, #4]
 8010a6c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010a6e:	f003 0302 	and.w	r3, r3, #2
 8010a72:	2b00      	cmp	r3, #0
 8010a74:	d00a      	beq.n	8010a8c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8010a76:	687b      	ldr	r3, [r7, #4]
 8010a78:	681b      	ldr	r3, [r3, #0]
 8010a7a:	685b      	ldr	r3, [r3, #4]
 8010a7c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8010a80:	687b      	ldr	r3, [r7, #4]
 8010a82:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8010a84:	687b      	ldr	r3, [r7, #4]
 8010a86:	681b      	ldr	r3, [r3, #0]
 8010a88:	430a      	orrs	r2, r1
 8010a8a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8010a8c:	687b      	ldr	r3, [r7, #4]
 8010a8e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010a90:	f003 0304 	and.w	r3, r3, #4
 8010a94:	2b00      	cmp	r3, #0
 8010a96:	d00a      	beq.n	8010aae <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8010a98:	687b      	ldr	r3, [r7, #4]
 8010a9a:	681b      	ldr	r3, [r3, #0]
 8010a9c:	685b      	ldr	r3, [r3, #4]
 8010a9e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8010aa2:	687b      	ldr	r3, [r7, #4]
 8010aa4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8010aa6:	687b      	ldr	r3, [r7, #4]
 8010aa8:	681b      	ldr	r3, [r3, #0]
 8010aaa:	430a      	orrs	r2, r1
 8010aac:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8010aae:	687b      	ldr	r3, [r7, #4]
 8010ab0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010ab2:	f003 0308 	and.w	r3, r3, #8
 8010ab6:	2b00      	cmp	r3, #0
 8010ab8:	d00a      	beq.n	8010ad0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8010aba:	687b      	ldr	r3, [r7, #4]
 8010abc:	681b      	ldr	r3, [r3, #0]
 8010abe:	685b      	ldr	r3, [r3, #4]
 8010ac0:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8010ac4:	687b      	ldr	r3, [r7, #4]
 8010ac6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8010ac8:	687b      	ldr	r3, [r7, #4]
 8010aca:	681b      	ldr	r3, [r3, #0]
 8010acc:	430a      	orrs	r2, r1
 8010ace:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8010ad0:	687b      	ldr	r3, [r7, #4]
 8010ad2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010ad4:	f003 0310 	and.w	r3, r3, #16
 8010ad8:	2b00      	cmp	r3, #0
 8010ada:	d00a      	beq.n	8010af2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8010adc:	687b      	ldr	r3, [r7, #4]
 8010ade:	681b      	ldr	r3, [r3, #0]
 8010ae0:	689b      	ldr	r3, [r3, #8]
 8010ae2:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8010ae6:	687b      	ldr	r3, [r7, #4]
 8010ae8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8010aea:	687b      	ldr	r3, [r7, #4]
 8010aec:	681b      	ldr	r3, [r3, #0]
 8010aee:	430a      	orrs	r2, r1
 8010af0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8010af2:	687b      	ldr	r3, [r7, #4]
 8010af4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010af6:	f003 0320 	and.w	r3, r3, #32
 8010afa:	2b00      	cmp	r3, #0
 8010afc:	d00a      	beq.n	8010b14 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8010afe:	687b      	ldr	r3, [r7, #4]
 8010b00:	681b      	ldr	r3, [r3, #0]
 8010b02:	689b      	ldr	r3, [r3, #8]
 8010b04:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8010b08:	687b      	ldr	r3, [r7, #4]
 8010b0a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8010b0c:	687b      	ldr	r3, [r7, #4]
 8010b0e:	681b      	ldr	r3, [r3, #0]
 8010b10:	430a      	orrs	r2, r1
 8010b12:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8010b14:	687b      	ldr	r3, [r7, #4]
 8010b16:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010b18:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8010b1c:	2b00      	cmp	r3, #0
 8010b1e:	d01a      	beq.n	8010b56 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8010b20:	687b      	ldr	r3, [r7, #4]
 8010b22:	681b      	ldr	r3, [r3, #0]
 8010b24:	685b      	ldr	r3, [r3, #4]
 8010b26:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8010b2a:	687b      	ldr	r3, [r7, #4]
 8010b2c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8010b2e:	687b      	ldr	r3, [r7, #4]
 8010b30:	681b      	ldr	r3, [r3, #0]
 8010b32:	430a      	orrs	r2, r1
 8010b34:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8010b36:	687b      	ldr	r3, [r7, #4]
 8010b38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8010b3a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8010b3e:	d10a      	bne.n	8010b56 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8010b40:	687b      	ldr	r3, [r7, #4]
 8010b42:	681b      	ldr	r3, [r3, #0]
 8010b44:	685b      	ldr	r3, [r3, #4]
 8010b46:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8010b4a:	687b      	ldr	r3, [r7, #4]
 8010b4c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8010b4e:	687b      	ldr	r3, [r7, #4]
 8010b50:	681b      	ldr	r3, [r3, #0]
 8010b52:	430a      	orrs	r2, r1
 8010b54:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8010b56:	687b      	ldr	r3, [r7, #4]
 8010b58:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010b5a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8010b5e:	2b00      	cmp	r3, #0
 8010b60:	d00a      	beq.n	8010b78 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8010b62:	687b      	ldr	r3, [r7, #4]
 8010b64:	681b      	ldr	r3, [r3, #0]
 8010b66:	685b      	ldr	r3, [r3, #4]
 8010b68:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8010b6c:	687b      	ldr	r3, [r7, #4]
 8010b6e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8010b70:	687b      	ldr	r3, [r7, #4]
 8010b72:	681b      	ldr	r3, [r3, #0]
 8010b74:	430a      	orrs	r2, r1
 8010b76:	605a      	str	r2, [r3, #4]
  }
}
 8010b78:	bf00      	nop
 8010b7a:	370c      	adds	r7, #12
 8010b7c:	46bd      	mov	sp, r7
 8010b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010b82:	4770      	bx	lr

08010b84 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8010b84:	b580      	push	{r7, lr}
 8010b86:	b086      	sub	sp, #24
 8010b88:	af02      	add	r7, sp, #8
 8010b8a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8010b8c:	687b      	ldr	r3, [r7, #4]
 8010b8e:	2200      	movs	r2, #0
 8010b90:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8010b94:	f7f3 fd94 	bl	80046c0 <HAL_GetTick>
 8010b98:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8010b9a:	687b      	ldr	r3, [r7, #4]
 8010b9c:	681b      	ldr	r3, [r3, #0]
 8010b9e:	681b      	ldr	r3, [r3, #0]
 8010ba0:	f003 0308 	and.w	r3, r3, #8
 8010ba4:	2b08      	cmp	r3, #8
 8010ba6:	d10e      	bne.n	8010bc6 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8010ba8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8010bac:	9300      	str	r3, [sp, #0]
 8010bae:	68fb      	ldr	r3, [r7, #12]
 8010bb0:	2200      	movs	r2, #0
 8010bb2:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8010bb6:	6878      	ldr	r0, [r7, #4]
 8010bb8:	f000 f82c 	bl	8010c14 <UART_WaitOnFlagUntilTimeout>
 8010bbc:	4603      	mov	r3, r0
 8010bbe:	2b00      	cmp	r3, #0
 8010bc0:	d001      	beq.n	8010bc6 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8010bc2:	2303      	movs	r3, #3
 8010bc4:	e022      	b.n	8010c0c <UART_CheckIdleState+0x88>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8010bc6:	687b      	ldr	r3, [r7, #4]
 8010bc8:	681b      	ldr	r3, [r3, #0]
 8010bca:	681b      	ldr	r3, [r3, #0]
 8010bcc:	f003 0304 	and.w	r3, r3, #4
 8010bd0:	2b04      	cmp	r3, #4
 8010bd2:	d10e      	bne.n	8010bf2 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8010bd4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8010bd8:	9300      	str	r3, [sp, #0]
 8010bda:	68fb      	ldr	r3, [r7, #12]
 8010bdc:	2200      	movs	r2, #0
 8010bde:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8010be2:	6878      	ldr	r0, [r7, #4]
 8010be4:	f000 f816 	bl	8010c14 <UART_WaitOnFlagUntilTimeout>
 8010be8:	4603      	mov	r3, r0
 8010bea:	2b00      	cmp	r3, #0
 8010bec:	d001      	beq.n	8010bf2 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8010bee:	2303      	movs	r3, #3
 8010bf0:	e00c      	b.n	8010c0c <UART_CheckIdleState+0x88>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8010bf2:	687b      	ldr	r3, [r7, #4]
 8010bf4:	2220      	movs	r2, #32
 8010bf6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_READY;
 8010bfa:	687b      	ldr	r3, [r7, #4]
 8010bfc:	2220      	movs	r2, #32
 8010bfe:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UNLOCK(huart);
 8010c02:	687b      	ldr	r3, [r7, #4]
 8010c04:	2200      	movs	r2, #0
 8010c06:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8010c0a:	2300      	movs	r3, #0
}
 8010c0c:	4618      	mov	r0, r3
 8010c0e:	3710      	adds	r7, #16
 8010c10:	46bd      	mov	sp, r7
 8010c12:	bd80      	pop	{r7, pc}

08010c14 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8010c14:	b580      	push	{r7, lr}
 8010c16:	b084      	sub	sp, #16
 8010c18:	af00      	add	r7, sp, #0
 8010c1a:	60f8      	str	r0, [r7, #12]
 8010c1c:	60b9      	str	r1, [r7, #8]
 8010c1e:	603b      	str	r3, [r7, #0]
 8010c20:	4613      	mov	r3, r2
 8010c22:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8010c24:	e062      	b.n	8010cec <UART_WaitOnFlagUntilTimeout+0xd8>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8010c26:	69bb      	ldr	r3, [r7, #24]
 8010c28:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010c2c:	d05e      	beq.n	8010cec <UART_WaitOnFlagUntilTimeout+0xd8>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8010c2e:	f7f3 fd47 	bl	80046c0 <HAL_GetTick>
 8010c32:	4602      	mov	r2, r0
 8010c34:	683b      	ldr	r3, [r7, #0]
 8010c36:	1ad3      	subs	r3, r2, r3
 8010c38:	69ba      	ldr	r2, [r7, #24]
 8010c3a:	429a      	cmp	r2, r3
 8010c3c:	d302      	bcc.n	8010c44 <UART_WaitOnFlagUntilTimeout+0x30>
 8010c3e:	69bb      	ldr	r3, [r7, #24]
 8010c40:	2b00      	cmp	r3, #0
 8010c42:	d11d      	bne.n	8010c80 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8010c44:	68fb      	ldr	r3, [r7, #12]
 8010c46:	681b      	ldr	r3, [r3, #0]
 8010c48:	681a      	ldr	r2, [r3, #0]
 8010c4a:	68fb      	ldr	r3, [r7, #12]
 8010c4c:	681b      	ldr	r3, [r3, #0]
 8010c4e:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8010c52:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8010c54:	68fb      	ldr	r3, [r7, #12]
 8010c56:	681b      	ldr	r3, [r3, #0]
 8010c58:	689a      	ldr	r2, [r3, #8]
 8010c5a:	68fb      	ldr	r3, [r7, #12]
 8010c5c:	681b      	ldr	r3, [r3, #0]
 8010c5e:	f022 0201 	bic.w	r2, r2, #1
 8010c62:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8010c64:	68fb      	ldr	r3, [r7, #12]
 8010c66:	2220      	movs	r2, #32
 8010c68:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->RxState = HAL_UART_STATE_READY;
 8010c6c:	68fb      	ldr	r3, [r7, #12]
 8010c6e:	2220      	movs	r2, #32
 8010c70:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        __HAL_UNLOCK(huart);
 8010c74:	68fb      	ldr	r3, [r7, #12]
 8010c76:	2200      	movs	r2, #0
 8010c78:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 8010c7c:	2303      	movs	r3, #3
 8010c7e:	e045      	b.n	8010d0c <UART_WaitOnFlagUntilTimeout+0xf8>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8010c80:	68fb      	ldr	r3, [r7, #12]
 8010c82:	681b      	ldr	r3, [r3, #0]
 8010c84:	681b      	ldr	r3, [r3, #0]
 8010c86:	f003 0304 	and.w	r3, r3, #4
 8010c8a:	2b00      	cmp	r3, #0
 8010c8c:	d02e      	beq.n	8010cec <UART_WaitOnFlagUntilTimeout+0xd8>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8010c8e:	68fb      	ldr	r3, [r7, #12]
 8010c90:	681b      	ldr	r3, [r3, #0]
 8010c92:	69db      	ldr	r3, [r3, #28]
 8010c94:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8010c98:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8010c9c:	d126      	bne.n	8010cec <UART_WaitOnFlagUntilTimeout+0xd8>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8010c9e:	68fb      	ldr	r3, [r7, #12]
 8010ca0:	681b      	ldr	r3, [r3, #0]
 8010ca2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8010ca6:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8010ca8:	68fb      	ldr	r3, [r7, #12]
 8010caa:	681b      	ldr	r3, [r3, #0]
 8010cac:	681a      	ldr	r2, [r3, #0]
 8010cae:	68fb      	ldr	r3, [r7, #12]
 8010cb0:	681b      	ldr	r3, [r3, #0]
 8010cb2:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8010cb6:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8010cb8:	68fb      	ldr	r3, [r7, #12]
 8010cba:	681b      	ldr	r3, [r3, #0]
 8010cbc:	689a      	ldr	r2, [r3, #8]
 8010cbe:	68fb      	ldr	r3, [r7, #12]
 8010cc0:	681b      	ldr	r3, [r3, #0]
 8010cc2:	f022 0201 	bic.w	r2, r2, #1
 8010cc6:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8010cc8:	68fb      	ldr	r3, [r7, #12]
 8010cca:	2220      	movs	r2, #32
 8010ccc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->RxState = HAL_UART_STATE_READY;
 8010cd0:	68fb      	ldr	r3, [r7, #12]
 8010cd2:	2220      	movs	r2, #32
 8010cd4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8010cd8:	68fb      	ldr	r3, [r7, #12]
 8010cda:	2220      	movs	r2, #32
 8010cdc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8010ce0:	68fb      	ldr	r3, [r7, #12]
 8010ce2:	2200      	movs	r2, #0
 8010ce4:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

          return HAL_TIMEOUT;
 8010ce8:	2303      	movs	r3, #3
 8010cea:	e00f      	b.n	8010d0c <UART_WaitOnFlagUntilTimeout+0xf8>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8010cec:	68fb      	ldr	r3, [r7, #12]
 8010cee:	681b      	ldr	r3, [r3, #0]
 8010cf0:	69da      	ldr	r2, [r3, #28]
 8010cf2:	68bb      	ldr	r3, [r7, #8]
 8010cf4:	4013      	ands	r3, r2
 8010cf6:	68ba      	ldr	r2, [r7, #8]
 8010cf8:	429a      	cmp	r2, r3
 8010cfa:	bf0c      	ite	eq
 8010cfc:	2301      	moveq	r3, #1
 8010cfe:	2300      	movne	r3, #0
 8010d00:	b2db      	uxtb	r3, r3
 8010d02:	461a      	mov	r2, r3
 8010d04:	79fb      	ldrb	r3, [r7, #7]
 8010d06:	429a      	cmp	r2, r3
 8010d08:	d08d      	beq.n	8010c26 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8010d0a:	2300      	movs	r3, #0
}
 8010d0c:	4618      	mov	r0, r3
 8010d0e:	3710      	adds	r7, #16
 8010d10:	46bd      	mov	sp, r7
 8010d12:	bd80      	pop	{r7, pc}

08010d14 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8010d14:	b480      	push	{r7}
 8010d16:	b083      	sub	sp, #12
 8010d18:	af00      	add	r7, sp, #0
 8010d1a:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 8010d1c:	687b      	ldr	r3, [r7, #4]
 8010d1e:	681b      	ldr	r3, [r3, #0]
 8010d20:	681a      	ldr	r2, [r3, #0]
 8010d22:	687b      	ldr	r3, [r7, #4]
 8010d24:	681b      	ldr	r3, [r3, #0]
 8010d26:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 8010d2a:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 8010d2c:	687b      	ldr	r3, [r7, #4]
 8010d2e:	681b      	ldr	r3, [r3, #0]
 8010d30:	689a      	ldr	r2, [r3, #8]
 8010d32:	687b      	ldr	r3, [r7, #4]
 8010d34:	681b      	ldr	r3, [r3, #0]
 8010d36:	f422 0200 	bic.w	r2, r2, #8388608	; 0x800000
 8010d3a:	609a      	str	r2, [r3, #8]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8010d3c:	687b      	ldr	r3, [r7, #4]
 8010d3e:	2220      	movs	r2, #32
 8010d40:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
}
 8010d44:	bf00      	nop
 8010d46:	370c      	adds	r7, #12
 8010d48:	46bd      	mov	sp, r7
 8010d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010d4e:	4770      	bx	lr

08010d50 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8010d50:	b480      	push	{r7}
 8010d52:	b083      	sub	sp, #12
 8010d54:	af00      	add	r7, sp, #0
 8010d56:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8010d58:	687b      	ldr	r3, [r7, #4]
 8010d5a:	681b      	ldr	r3, [r3, #0]
 8010d5c:	681a      	ldr	r2, [r3, #0]
 8010d5e:	687b      	ldr	r3, [r7, #4]
 8010d60:	681b      	ldr	r3, [r3, #0]
 8010d62:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8010d66:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8010d68:	687b      	ldr	r3, [r7, #4]
 8010d6a:	681b      	ldr	r3, [r3, #0]
 8010d6c:	6899      	ldr	r1, [r3, #8]
 8010d6e:	687b      	ldr	r3, [r7, #4]
 8010d70:	681a      	ldr	r2, [r3, #0]
 8010d72:	4b08      	ldr	r3, [pc, #32]	; (8010d94 <UART_EndRxTransfer+0x44>)
 8010d74:	400b      	ands	r3, r1
 8010d76:	6093      	str	r3, [r2, #8]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8010d78:	687b      	ldr	r3, [r7, #4]
 8010d7a:	2220      	movs	r2, #32
 8010d7c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8010d80:	687b      	ldr	r3, [r7, #4]
 8010d82:	2200      	movs	r2, #0
 8010d84:	66da      	str	r2, [r3, #108]	; 0x6c
}
 8010d86:	bf00      	nop
 8010d88:	370c      	adds	r7, #12
 8010d8a:	46bd      	mov	sp, r7
 8010d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010d90:	4770      	bx	lr
 8010d92:	bf00      	nop
 8010d94:	effffffe 	.word	0xeffffffe

08010d98 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8010d98:	b580      	push	{r7, lr}
 8010d9a:	b084      	sub	sp, #16
 8010d9c:	af00      	add	r7, sp, #0
 8010d9e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8010da0:	687b      	ldr	r3, [r7, #4]
 8010da2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010da4:	60fb      	str	r3, [r7, #12]

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 8010da6:	687b      	ldr	r3, [r7, #4]
 8010da8:	69db      	ldr	r3, [r3, #28]
 8010daa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8010dae:	d01f      	beq.n	8010df0 <UART_DMAReceiveCplt+0x58>
  {
    huart->RxXferCount = 0U;
 8010db0:	68fb      	ldr	r3, [r7, #12]
 8010db2:	2200      	movs	r2, #0
 8010db4:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8010db8:	68fb      	ldr	r3, [r7, #12]
 8010dba:	681b      	ldr	r3, [r3, #0]
 8010dbc:	681a      	ldr	r2, [r3, #0]
 8010dbe:	68fb      	ldr	r3, [r7, #12]
 8010dc0:	681b      	ldr	r3, [r3, #0]
 8010dc2:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8010dc6:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8010dc8:	68fb      	ldr	r3, [r7, #12]
 8010dca:	681b      	ldr	r3, [r3, #0]
 8010dcc:	689a      	ldr	r2, [r3, #8]
 8010dce:	68fb      	ldr	r3, [r7, #12]
 8010dd0:	681b      	ldr	r3, [r3, #0]
 8010dd2:	f022 0201 	bic.w	r2, r2, #1
 8010dd6:	609a      	str	r2, [r3, #8]

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8010dd8:	68fb      	ldr	r3, [r7, #12]
 8010dda:	681b      	ldr	r3, [r3, #0]
 8010ddc:	689a      	ldr	r2, [r3, #8]
 8010dde:	68fb      	ldr	r3, [r7, #12]
 8010de0:	681b      	ldr	r3, [r3, #0]
 8010de2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8010de6:	609a      	str	r2, [r3, #8]

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8010de8:	68fb      	ldr	r3, [r7, #12]
 8010dea:	2220      	movs	r2, #32
 8010dec:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx complete callback*/
  huart->RxCpltCallback(huart);
#else
  /*Call legacy weak Rx complete callback*/
  HAL_UART_RxCpltCallback(huart);
 8010df0:	68f8      	ldr	r0, [r7, #12]
 8010df2:	f7ef fead 	bl	8000b50 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8010df6:	bf00      	nop
 8010df8:	3710      	adds	r7, #16
 8010dfa:	46bd      	mov	sp, r7
 8010dfc:	bd80      	pop	{r7, pc}

08010dfe <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8010dfe:	b580      	push	{r7, lr}
 8010e00:	b084      	sub	sp, #16
 8010e02:	af00      	add	r7, sp, #0
 8010e04:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8010e06:	687b      	ldr	r3, [r7, #4]
 8010e08:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010e0a:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx Half complete callback*/
  huart->RxHalfCpltCallback(huart);
#else
  /*Call legacy weak Rx Half complete callback*/
  HAL_UART_RxHalfCpltCallback(huart);
 8010e0c:	68f8      	ldr	r0, [r7, #12]
 8010e0e:	f7ef fe8d 	bl	8000b2c <HAL_UART_RxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8010e12:	bf00      	nop
 8010e14:	3710      	adds	r7, #16
 8010e16:	46bd      	mov	sp, r7
 8010e18:	bd80      	pop	{r7, pc}

08010e1a <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8010e1a:	b580      	push	{r7, lr}
 8010e1c:	b086      	sub	sp, #24
 8010e1e:	af00      	add	r7, sp, #0
 8010e20:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8010e22:	687b      	ldr	r3, [r7, #4]
 8010e24:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010e26:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8010e28:	697b      	ldr	r3, [r7, #20]
 8010e2a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8010e2e:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8010e30:	697b      	ldr	r3, [r7, #20]
 8010e32:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8010e36:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8010e38:	697b      	ldr	r3, [r7, #20]
 8010e3a:	681b      	ldr	r3, [r3, #0]
 8010e3c:	689b      	ldr	r3, [r3, #8]
 8010e3e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8010e42:	2b80      	cmp	r3, #128	; 0x80
 8010e44:	d109      	bne.n	8010e5a <UART_DMAError+0x40>
 8010e46:	693b      	ldr	r3, [r7, #16]
 8010e48:	2b21      	cmp	r3, #33	; 0x21
 8010e4a:	d106      	bne.n	8010e5a <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 8010e4c:	697b      	ldr	r3, [r7, #20]
 8010e4e:	2200      	movs	r2, #0
 8010e50:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    UART_EndTxTransfer(huart);
 8010e54:	6978      	ldr	r0, [r7, #20]
 8010e56:	f7ff ff5d 	bl	8010d14 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8010e5a:	697b      	ldr	r3, [r7, #20]
 8010e5c:	681b      	ldr	r3, [r3, #0]
 8010e5e:	689b      	ldr	r3, [r3, #8]
 8010e60:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8010e64:	2b40      	cmp	r3, #64	; 0x40
 8010e66:	d109      	bne.n	8010e7c <UART_DMAError+0x62>
 8010e68:	68fb      	ldr	r3, [r7, #12]
 8010e6a:	2b22      	cmp	r3, #34	; 0x22
 8010e6c:	d106      	bne.n	8010e7c <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 8010e6e:	697b      	ldr	r3, [r7, #20]
 8010e70:	2200      	movs	r2, #0
 8010e72:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    UART_EndRxTransfer(huart);
 8010e76:	6978      	ldr	r0, [r7, #20]
 8010e78:	f7ff ff6a 	bl	8010d50 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8010e7c:	697b      	ldr	r3, [r7, #20]
 8010e7e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8010e82:	f043 0210 	orr.w	r2, r3, #16
 8010e86:	697b      	ldr	r3, [r7, #20]
 8010e88:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8010e8c:	6978      	ldr	r0, [r7, #20]
 8010e8e:	f7ff f81d 	bl	800fecc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8010e92:	bf00      	nop
 8010e94:	3718      	adds	r7, #24
 8010e96:	46bd      	mov	sp, r7
 8010e98:	bd80      	pop	{r7, pc}

08010e9a <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8010e9a:	b480      	push	{r7}
 8010e9c:	b085      	sub	sp, #20
 8010e9e:	af00      	add	r7, sp, #0
 8010ea0:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8010ea2:	687b      	ldr	r3, [r7, #4]
 8010ea4:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8010ea8:	2b01      	cmp	r3, #1
 8010eaa:	d101      	bne.n	8010eb0 <HAL_UARTEx_DisableFifoMode+0x16>
 8010eac:	2302      	movs	r3, #2
 8010eae:	e027      	b.n	8010f00 <HAL_UARTEx_DisableFifoMode+0x66>
 8010eb0:	687b      	ldr	r3, [r7, #4]
 8010eb2:	2201      	movs	r2, #1
 8010eb4:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 8010eb8:	687b      	ldr	r3, [r7, #4]
 8010eba:	2224      	movs	r2, #36	; 0x24
 8010ebc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8010ec0:	687b      	ldr	r3, [r7, #4]
 8010ec2:	681b      	ldr	r3, [r3, #0]
 8010ec4:	681b      	ldr	r3, [r3, #0]
 8010ec6:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8010ec8:	687b      	ldr	r3, [r7, #4]
 8010eca:	681b      	ldr	r3, [r3, #0]
 8010ecc:	681a      	ldr	r2, [r3, #0]
 8010ece:	687b      	ldr	r3, [r7, #4]
 8010ed0:	681b      	ldr	r3, [r3, #0]
 8010ed2:	f022 0201 	bic.w	r2, r2, #1
 8010ed6:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8010ed8:	68fb      	ldr	r3, [r7, #12]
 8010eda:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8010ede:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8010ee0:	687b      	ldr	r3, [r7, #4]
 8010ee2:	2200      	movs	r2, #0
 8010ee4:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8010ee6:	687b      	ldr	r3, [r7, #4]
 8010ee8:	681b      	ldr	r3, [r3, #0]
 8010eea:	68fa      	ldr	r2, [r7, #12]
 8010eec:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8010eee:	687b      	ldr	r3, [r7, #4]
 8010ef0:	2220      	movs	r2, #32
 8010ef2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8010ef6:	687b      	ldr	r3, [r7, #4]
 8010ef8:	2200      	movs	r2, #0
 8010efa:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8010efe:	2300      	movs	r3, #0
}
 8010f00:	4618      	mov	r0, r3
 8010f02:	3714      	adds	r7, #20
 8010f04:	46bd      	mov	sp, r7
 8010f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010f0a:	4770      	bx	lr

08010f0c <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8010f0c:	b580      	push	{r7, lr}
 8010f0e:	b084      	sub	sp, #16
 8010f10:	af00      	add	r7, sp, #0
 8010f12:	6078      	str	r0, [r7, #4]
 8010f14:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8010f16:	687b      	ldr	r3, [r7, #4]
 8010f18:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8010f1c:	2b01      	cmp	r3, #1
 8010f1e:	d101      	bne.n	8010f24 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8010f20:	2302      	movs	r3, #2
 8010f22:	e02d      	b.n	8010f80 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8010f24:	687b      	ldr	r3, [r7, #4]
 8010f26:	2201      	movs	r2, #1
 8010f28:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 8010f2c:	687b      	ldr	r3, [r7, #4]
 8010f2e:	2224      	movs	r2, #36	; 0x24
 8010f30:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8010f34:	687b      	ldr	r3, [r7, #4]
 8010f36:	681b      	ldr	r3, [r3, #0]
 8010f38:	681b      	ldr	r3, [r3, #0]
 8010f3a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8010f3c:	687b      	ldr	r3, [r7, #4]
 8010f3e:	681b      	ldr	r3, [r3, #0]
 8010f40:	681a      	ldr	r2, [r3, #0]
 8010f42:	687b      	ldr	r3, [r7, #4]
 8010f44:	681b      	ldr	r3, [r3, #0]
 8010f46:	f022 0201 	bic.w	r2, r2, #1
 8010f4a:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8010f4c:	687b      	ldr	r3, [r7, #4]
 8010f4e:	681b      	ldr	r3, [r3, #0]
 8010f50:	689b      	ldr	r3, [r3, #8]
 8010f52:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8010f56:	687b      	ldr	r3, [r7, #4]
 8010f58:	681b      	ldr	r3, [r3, #0]
 8010f5a:	683a      	ldr	r2, [r7, #0]
 8010f5c:	430a      	orrs	r2, r1
 8010f5e:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8010f60:	6878      	ldr	r0, [r7, #4]
 8010f62:	f000 f84f 	bl	8011004 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8010f66:	687b      	ldr	r3, [r7, #4]
 8010f68:	681b      	ldr	r3, [r3, #0]
 8010f6a:	68fa      	ldr	r2, [r7, #12]
 8010f6c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8010f6e:	687b      	ldr	r3, [r7, #4]
 8010f70:	2220      	movs	r2, #32
 8010f72:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8010f76:	687b      	ldr	r3, [r7, #4]
 8010f78:	2200      	movs	r2, #0
 8010f7a:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8010f7e:	2300      	movs	r3, #0
}
 8010f80:	4618      	mov	r0, r3
 8010f82:	3710      	adds	r7, #16
 8010f84:	46bd      	mov	sp, r7
 8010f86:	bd80      	pop	{r7, pc}

08010f88 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8010f88:	b580      	push	{r7, lr}
 8010f8a:	b084      	sub	sp, #16
 8010f8c:	af00      	add	r7, sp, #0
 8010f8e:	6078      	str	r0, [r7, #4]
 8010f90:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8010f92:	687b      	ldr	r3, [r7, #4]
 8010f94:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8010f98:	2b01      	cmp	r3, #1
 8010f9a:	d101      	bne.n	8010fa0 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8010f9c:	2302      	movs	r3, #2
 8010f9e:	e02d      	b.n	8010ffc <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8010fa0:	687b      	ldr	r3, [r7, #4]
 8010fa2:	2201      	movs	r2, #1
 8010fa4:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 8010fa8:	687b      	ldr	r3, [r7, #4]
 8010faa:	2224      	movs	r2, #36	; 0x24
 8010fac:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8010fb0:	687b      	ldr	r3, [r7, #4]
 8010fb2:	681b      	ldr	r3, [r3, #0]
 8010fb4:	681b      	ldr	r3, [r3, #0]
 8010fb6:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8010fb8:	687b      	ldr	r3, [r7, #4]
 8010fba:	681b      	ldr	r3, [r3, #0]
 8010fbc:	681a      	ldr	r2, [r3, #0]
 8010fbe:	687b      	ldr	r3, [r7, #4]
 8010fc0:	681b      	ldr	r3, [r3, #0]
 8010fc2:	f022 0201 	bic.w	r2, r2, #1
 8010fc6:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8010fc8:	687b      	ldr	r3, [r7, #4]
 8010fca:	681b      	ldr	r3, [r3, #0]
 8010fcc:	689b      	ldr	r3, [r3, #8]
 8010fce:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8010fd2:	687b      	ldr	r3, [r7, #4]
 8010fd4:	681b      	ldr	r3, [r3, #0]
 8010fd6:	683a      	ldr	r2, [r7, #0]
 8010fd8:	430a      	orrs	r2, r1
 8010fda:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8010fdc:	6878      	ldr	r0, [r7, #4]
 8010fde:	f000 f811 	bl	8011004 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8010fe2:	687b      	ldr	r3, [r7, #4]
 8010fe4:	681b      	ldr	r3, [r3, #0]
 8010fe6:	68fa      	ldr	r2, [r7, #12]
 8010fe8:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8010fea:	687b      	ldr	r3, [r7, #4]
 8010fec:	2220      	movs	r2, #32
 8010fee:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8010ff2:	687b      	ldr	r3, [r7, #4]
 8010ff4:	2200      	movs	r2, #0
 8010ff6:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8010ffa:	2300      	movs	r3, #0
}
 8010ffc:	4618      	mov	r0, r3
 8010ffe:	3710      	adds	r7, #16
 8011000:	46bd      	mov	sp, r7
 8011002:	bd80      	pop	{r7, pc}

08011004 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8011004:	b480      	push	{r7}
 8011006:	b089      	sub	sp, #36	; 0x24
 8011008:	af00      	add	r7, sp, #0
 801100a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_depth;
  uint8_t tx_fifo_depth;
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
 801100c:	4a2f      	ldr	r2, [pc, #188]	; (80110cc <UARTEx_SetNbDataToProcess+0xc8>)
 801100e:	f107 0314 	add.w	r3, r7, #20
 8011012:	e892 0003 	ldmia.w	r2, {r0, r1}
 8011016:	e883 0003 	stmia.w	r3, {r0, r1}
  uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};
 801101a:	4a2d      	ldr	r2, [pc, #180]	; (80110d0 <UARTEx_SetNbDataToProcess+0xcc>)
 801101c:	f107 030c 	add.w	r3, r7, #12
 8011020:	e892 0003 	ldmia.w	r2, {r0, r1}
 8011024:	e883 0003 	stmia.w	r3, {r0, r1}

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8011028:	687b      	ldr	r3, [r7, #4]
 801102a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 801102c:	2b00      	cmp	r3, #0
 801102e:	d108      	bne.n	8011042 <UARTEx_SetNbDataToProcess+0x3e>
  {
    huart->NbTxDataToProcess = 1U;
 8011030:	687b      	ldr	r3, [r7, #4]
 8011032:	2201      	movs	r2, #1
 8011034:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8011038:	687b      	ldr	r3, [r7, #4]
 801103a:	2201      	movs	r2, #1
 801103c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8011040:	e03d      	b.n	80110be <UARTEx_SetNbDataToProcess+0xba>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8011042:	2310      	movs	r3, #16
 8011044:	77fb      	strb	r3, [r7, #31]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8011046:	2310      	movs	r3, #16
 8011048:	77bb      	strb	r3, [r7, #30]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 801104a:	687b      	ldr	r3, [r7, #4]
 801104c:	681b      	ldr	r3, [r3, #0]
 801104e:	689b      	ldr	r3, [r3, #8]
 8011050:	0e5b      	lsrs	r3, r3, #25
 8011052:	b2db      	uxtb	r3, r3
 8011054:	f003 0307 	and.w	r3, r3, #7
 8011058:	777b      	strb	r3, [r7, #29]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 801105a:	687b      	ldr	r3, [r7, #4]
 801105c:	681b      	ldr	r3, [r3, #0]
 801105e:	689b      	ldr	r3, [r3, #8]
 8011060:	0f5b      	lsrs	r3, r3, #29
 8011062:	b2db      	uxtb	r3, r3
 8011064:	f003 0307 	and.w	r3, r3, #7
 8011068:	773b      	strb	r3, [r7, #28]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
 801106a:	7fbb      	ldrb	r3, [r7, #30]
 801106c:	7f3a      	ldrb	r2, [r7, #28]
 801106e:	f107 0120 	add.w	r1, r7, #32
 8011072:	440a      	add	r2, r1
 8011074:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 8011078:	fb02 f303 	mul.w	r3, r2, r3
 801107c:	7f3a      	ldrb	r2, [r7, #28]
 801107e:	f107 0120 	add.w	r1, r7, #32
 8011082:	440a      	add	r2, r1
 8011084:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 8011088:	fb93 f3f2 	sdiv	r3, r3, r2
 801108c:	b29a      	uxth	r2, r3
 801108e:	687b      	ldr	r3, [r7, #4]
 8011090:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
 8011094:	7ffb      	ldrb	r3, [r7, #31]
 8011096:	7f7a      	ldrb	r2, [r7, #29]
 8011098:	f107 0120 	add.w	r1, r7, #32
 801109c:	440a      	add	r2, r1
 801109e:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 80110a2:	fb02 f303 	mul.w	r3, r2, r3
 80110a6:	7f7a      	ldrb	r2, [r7, #29]
 80110a8:	f107 0120 	add.w	r1, r7, #32
 80110ac:	440a      	add	r2, r1
 80110ae:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 80110b2:	fb93 f3f2 	sdiv	r3, r3, r2
 80110b6:	b29a      	uxth	r2, r3
 80110b8:	687b      	ldr	r3, [r7, #4]
 80110ba:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 80110be:	bf00      	nop
 80110c0:	3724      	adds	r7, #36	; 0x24
 80110c2:	46bd      	mov	sp, r7
 80110c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80110c8:	4770      	bx	lr
 80110ca:	bf00      	nop
 80110cc:	0801af64 	.word	0x0801af64
 80110d0:	0801af6c 	.word	0x0801af6c

080110d4 <SDMMC_Init>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_Init(SDMMC_TypeDef *SDMMCx, SDMMC_InitTypeDef Init)
{
 80110d4:	b084      	sub	sp, #16
 80110d6:	b480      	push	{r7}
 80110d8:	b085      	sub	sp, #20
 80110da:	af00      	add	r7, sp, #0
 80110dc:	6078      	str	r0, [r7, #4]
 80110de:	f107 001c 	add.w	r0, r7, #28
 80110e2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 80110e6:	2300      	movs	r3, #0
 80110e8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(Init.ClockDiv));

  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 80110ea:	69fa      	ldr	r2, [r7, #28]
             Init.ClockPowerSave      |\
 80110ec:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 80110ee:	431a      	orrs	r2, r3
             Init.BusWide             |\
 80110f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockPowerSave      |\
 80110f2:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 80110f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.BusWide             |\
 80110f6:	431a      	orrs	r2, r3
             Init.ClockDiv
 80110f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.HardwareFlowControl |\
 80110fa:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 80110fc:	68fa      	ldr	r2, [r7, #12]
 80110fe:	4313      	orrs	r3, r2
 8011100:	60fb      	str	r3, [r7, #12]
             );

  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);
 8011102:	687b      	ldr	r3, [r7, #4]
 8011104:	685a      	ldr	r2, [r3, #4]
 8011106:	4b07      	ldr	r3, [pc, #28]	; (8011124 <SDMMC_Init+0x50>)
 8011108:	4013      	ands	r3, r2
 801110a:	68fa      	ldr	r2, [r7, #12]
 801110c:	431a      	orrs	r2, r3
 801110e:	687b      	ldr	r3, [r7, #4]
 8011110:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 8011112:	2300      	movs	r3, #0
}
 8011114:	4618      	mov	r0, r3
 8011116:	3714      	adds	r7, #20
 8011118:	46bd      	mov	sp, r7
 801111a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801111e:	b004      	add	sp, #16
 8011120:	4770      	bx	lr
 8011122:	bf00      	nop
 8011124:	ffc02c00 	.word	0xffc02c00

08011128 <SDMMC_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling)
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_ReadFIFO(SDMMC_TypeDef *SDMMCx)
{
 8011128:	b480      	push	{r7}
 801112a:	b083      	sub	sp, #12
 801112c:	af00      	add	r7, sp, #0
 801112e:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */
  return (SDMMCx->FIFO);
 8011130:	687b      	ldr	r3, [r7, #4]
 8011132:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 8011136:	4618      	mov	r0, r3
 8011138:	370c      	adds	r7, #12
 801113a:	46bd      	mov	sp, r7
 801113c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011140:	4770      	bx	lr

08011142 <SDMMC_WriteFIFO>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_WriteFIFO(SDMMC_TypeDef *SDMMCx, uint32_t *pWriteData)
{
 8011142:	b480      	push	{r7}
 8011144:	b083      	sub	sp, #12
 8011146:	af00      	add	r7, sp, #0
 8011148:	6078      	str	r0, [r7, #4]
 801114a:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */
  SDMMCx->FIFO = *pWriteData;
 801114c:	683b      	ldr	r3, [r7, #0]
 801114e:	681a      	ldr	r2, [r3, #0]
 8011150:	687b      	ldr	r3, [r7, #4]
 8011152:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8011156:	2300      	movs	r3, #0
}
 8011158:	4618      	mov	r0, r3
 801115a:	370c      	adds	r7, #12
 801115c:	46bd      	mov	sp, r7
 801115e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011162:	4770      	bx	lr

08011164 <SDMMC_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_PowerState_ON(SDMMC_TypeDef *SDMMCx)
{
 8011164:	b480      	push	{r7}
 8011166:	b083      	sub	sp, #12
 8011168:	af00      	add	r7, sp, #0
 801116a:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */
  SDMMCx->POWER |= SDMMC_POWER_PWRCTRL;
 801116c:	687b      	ldr	r3, [r7, #4]
 801116e:	681b      	ldr	r3, [r3, #0]
 8011170:	f043 0203 	orr.w	r2, r3, #3
 8011174:	687b      	ldr	r3, [r7, #4]
 8011176:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8011178:	2300      	movs	r3, #0
}
 801117a:	4618      	mov	r0, r3
 801117c:	370c      	adds	r7, #12
 801117e:	46bd      	mov	sp, r7
 8011180:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011184:	4770      	bx	lr

08011186 <SDMMC_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON
  */
uint32_t SDMMC_GetPowerState(SDMMC_TypeDef *SDMMCx)
{
 8011186:	b480      	push	{r7}
 8011188:	b083      	sub	sp, #12
 801118a:	af00      	add	r7, sp, #0
 801118c:	6078      	str	r0, [r7, #4]
  return (SDMMCx->POWER & SDMMC_POWER_PWRCTRL);
 801118e:	687b      	ldr	r3, [r7, #4]
 8011190:	681b      	ldr	r3, [r3, #0]
 8011192:	f003 0303 	and.w	r3, r3, #3
}
 8011196:	4618      	mov	r0, r3
 8011198:	370c      	adds	r7, #12
 801119a:	46bd      	mov	sp, r7
 801119c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80111a0:	4770      	bx	lr
	...

080111a4 <SDMMC_SendCommand>:
  * @param  Command: pointer to a SDMMC_CmdInitTypeDef structure that contains
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_SendCommand(SDMMC_TypeDef *SDMMCx, SDMMC_CmdInitTypeDef *Command)
{
 80111a4:	b480      	push	{r7}
 80111a6:	b085      	sub	sp, #20
 80111a8:	af00      	add	r7, sp, #0
 80111aa:	6078      	str	r0, [r7, #4]
 80111ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 80111ae:	2300      	movs	r3, #0
 80111b0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_RESPONSE(Command->Response));
  assert_param(IS_SDMMC_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDMMC_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDMMCx->ARG = Command->Argument;
 80111b2:	683b      	ldr	r3, [r7, #0]
 80111b4:	681a      	ldr	r2, [r3, #0]
 80111b6:	687b      	ldr	r3, [r7, #4]
 80111b8:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 80111ba:	683b      	ldr	r3, [r7, #0]
 80111bc:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 80111be:	683b      	ldr	r3, [r7, #0]
 80111c0:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 80111c2:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 80111c4:	683b      	ldr	r3, [r7, #0]
 80111c6:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 80111c8:	431a      	orrs	r2, r3
                       Command->CPSM);
 80111ca:	683b      	ldr	r3, [r7, #0]
 80111cc:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 80111ce:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 80111d0:	68fa      	ldr	r2, [r7, #12]
 80111d2:	4313      	orrs	r3, r2
 80111d4:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC CMD register */
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 80111d6:	687b      	ldr	r3, [r7, #4]
 80111d8:	68da      	ldr	r2, [r3, #12]
 80111da:	4b06      	ldr	r3, [pc, #24]	; (80111f4 <SDMMC_SendCommand+0x50>)
 80111dc:	4013      	ands	r3, r2
 80111de:	68fa      	ldr	r2, [r7, #12]
 80111e0:	431a      	orrs	r2, r3
 80111e2:	687b      	ldr	r3, [r7, #4]
 80111e4:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80111e6:	2300      	movs	r3, #0
}
 80111e8:	4618      	mov	r0, r3
 80111ea:	3714      	adds	r7, #20
 80111ec:	46bd      	mov	sp, r7
 80111ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80111f2:	4770      	bx	lr
 80111f4:	fffee0c0 	.word	0xfffee0c0

080111f8 <SDMMC_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDMMC_GetCommandResponse(SDMMC_TypeDef *SDMMCx)
{
 80111f8:	b480      	push	{r7}
 80111fa:	b083      	sub	sp, #12
 80111fc:	af00      	add	r7, sp, #0
 80111fe:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDMMCx->RESPCMD);
 8011200:	687b      	ldr	r3, [r7, #4]
 8011202:	691b      	ldr	r3, [r3, #16]
 8011204:	b2db      	uxtb	r3, r3
}
 8011206:	4618      	mov	r0, r3
 8011208:	370c      	adds	r7, #12
 801120a:	46bd      	mov	sp, r7
 801120c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011210:	4770      	bx	lr

08011212 <SDMMC_GetResponse>:
  *            @arg SDMMC_RESP3: Response Register 3
  *            @arg SDMMC_RESP4: Response Register 4
  * @retval The Corresponding response register value
  */
uint32_t SDMMC_GetResponse(SDMMC_TypeDef *SDMMCx, uint32_t Response)
{
 8011212:	b480      	push	{r7}
 8011214:	b085      	sub	sp, #20
 8011216:	af00      	add	r7, sp, #0
 8011218:	6078      	str	r0, [r7, #4]
 801121a:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDMMC_RESP(Response));

  /* Get the response */
  tmp = (uint32_t)(&(SDMMCx->RESP1)) + Response;
 801121c:	687b      	ldr	r3, [r7, #4]
 801121e:	3314      	adds	r3, #20
 8011220:	461a      	mov	r2, r3
 8011222:	683b      	ldr	r3, [r7, #0]
 8011224:	4413      	add	r3, r2
 8011226:	60fb      	str	r3, [r7, #12]

  return (*(__IO uint32_t *) tmp);
 8011228:	68fb      	ldr	r3, [r7, #12]
 801122a:	681b      	ldr	r3, [r3, #0]
}
 801122c:	4618      	mov	r0, r3
 801122e:	3714      	adds	r7, #20
 8011230:	46bd      	mov	sp, r7
 8011232:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011236:	4770      	bx	lr

08011238 <SDMMC_ConfigData>:
  * @param  Data : pointer to a SDMMC_DataInitTypeDef structure
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_ConfigData(SDMMC_TypeDef *SDMMCx, SDMMC_DataInitTypeDef* Data)
{
 8011238:	b480      	push	{r7}
 801123a:	b085      	sub	sp, #20
 801123c:	af00      	add	r7, sp, #0
 801123e:	6078      	str	r0, [r7, #4]
 8011240:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8011242:	2300      	movs	r3, #0
 8011244:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDMMC_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDMMC_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDMMCx->DTIMER = Data->DataTimeOut;
 8011246:	683b      	ldr	r3, [r7, #0]
 8011248:	681a      	ldr	r2, [r3, #0]
 801124a:	687b      	ldr	r3, [r7, #4]
 801124c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDMMCx->DLEN = Data->DataLength;
 801124e:	683b      	ldr	r3, [r7, #0]
 8011250:	685a      	ldr	r2, [r3, #4]
 8011252:	687b      	ldr	r3, [r7, #4]
 8011254:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8011256:	683b      	ldr	r3, [r7, #0]
 8011258:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 801125a:	683b      	ldr	r3, [r7, #0]
 801125c:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 801125e:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 8011260:	683b      	ldr	r3, [r7, #0]
 8011262:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 8011264:	431a      	orrs	r2, r3
                       Data->DPSM);
 8011266:	683b      	ldr	r3, [r7, #0]
 8011268:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 801126a:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 801126c:	68fa      	ldr	r2, [r7, #12]
 801126e:	4313      	orrs	r3, r2
 8011270:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 8011272:	687b      	ldr	r3, [r7, #4]
 8011274:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011276:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 801127a:	68fb      	ldr	r3, [r7, #12]
 801127c:	431a      	orrs	r2, r3
 801127e:	687b      	ldr	r3, [r7, #4]
 8011280:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 8011282:	2300      	movs	r3, #0

}
 8011284:	4618      	mov	r0, r3
 8011286:	3714      	adds	r7, #20
 8011288:	46bd      	mov	sp, r7
 801128a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801128e:	4770      	bx	lr

08011290 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Lenght command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDMMC_TypeDef *SDMMCx, uint32_t BlockSize)
{
 8011290:	b580      	push	{r7, lr}
 8011292:	b088      	sub	sp, #32
 8011294:	af00      	add	r7, sp, #0
 8011296:	6078      	str	r0, [r7, #4]
 8011298:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 801129a:	683b      	ldr	r3, [r7, #0]
 801129c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 801129e:	2310      	movs	r3, #16
 80112a0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80112a2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80112a6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80112a8:	2300      	movs	r3, #0
 80112aa:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80112ac:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80112b0:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80112b2:	f107 0308 	add.w	r3, r7, #8
 80112b6:	4619      	mov	r1, r3
 80112b8:	6878      	ldr	r0, [r7, #4]
 80112ba:	f7ff ff73 	bl	80111a4 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SET_BLOCKLEN, SDMMC_CMDTIMEOUT);
 80112be:	f241 3288 	movw	r2, #5000	; 0x1388
 80112c2:	2110      	movs	r1, #16
 80112c4:	6878      	ldr	r0, [r7, #4]
 80112c6:	f000 faaf 	bl	8011828 <SDMMC_GetCmdResp1>
 80112ca:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80112cc:	69fb      	ldr	r3, [r7, #28]
}
 80112ce:	4618      	mov	r0, r3
 80112d0:	3720      	adds	r7, #32
 80112d2:	46bd      	mov	sp, r7
 80112d4:	bd80      	pop	{r7, pc}

080112d6 <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 80112d6:	b580      	push	{r7, lr}
 80112d8:	b088      	sub	sp, #32
 80112da:	af00      	add	r7, sp, #0
 80112dc:	6078      	str	r0, [r7, #4]
 80112de:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 80112e0:	683b      	ldr	r3, [r7, #0]
 80112e2:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 80112e4:	2311      	movs	r3, #17
 80112e6:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80112e8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80112ec:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80112ee:	2300      	movs	r3, #0
 80112f0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80112f2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80112f6:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80112f8:	f107 0308 	add.w	r3, r7, #8
 80112fc:	4619      	mov	r1, r3
 80112fe:	6878      	ldr	r0, [r7, #4]
 8011300:	f7ff ff50 	bl	80111a4 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 8011304:	f241 3288 	movw	r2, #5000	; 0x1388
 8011308:	2111      	movs	r1, #17
 801130a:	6878      	ldr	r0, [r7, #4]
 801130c:	f000 fa8c 	bl	8011828 <SDMMC_GetCmdResp1>
 8011310:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8011312:	69fb      	ldr	r3, [r7, #28]
}
 8011314:	4618      	mov	r0, r3
 8011316:	3720      	adds	r7, #32
 8011318:	46bd      	mov	sp, r7
 801131a:	bd80      	pop	{r7, pc}

0801131c <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 801131c:	b580      	push	{r7, lr}
 801131e:	b088      	sub	sp, #32
 8011320:	af00      	add	r7, sp, #0
 8011322:	6078      	str	r0, [r7, #4]
 8011324:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8011326:	683b      	ldr	r3, [r7, #0]
 8011328:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 801132a:	2312      	movs	r3, #18
 801132c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 801132e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8011332:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8011334:	2300      	movs	r3, #0
 8011336:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8011338:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 801133c:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 801133e:	f107 0308 	add.w	r3, r7, #8
 8011342:	4619      	mov	r1, r3
 8011344:	6878      	ldr	r0, [r7, #4]
 8011346:	f7ff ff2d 	bl	80111a4 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 801134a:	f241 3288 	movw	r2, #5000	; 0x1388
 801134e:	2112      	movs	r1, #18
 8011350:	6878      	ldr	r0, [r7, #4]
 8011352:	f000 fa69 	bl	8011828 <SDMMC_GetCmdResp1>
 8011356:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8011358:	69fb      	ldr	r3, [r7, #28]
}
 801135a:	4618      	mov	r0, r3
 801135c:	3720      	adds	r7, #32
 801135e:	46bd      	mov	sp, r7
 8011360:	bd80      	pop	{r7, pc}

08011362 <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 8011362:	b580      	push	{r7, lr}
 8011364:	b088      	sub	sp, #32
 8011366:	af00      	add	r7, sp, #0
 8011368:	6078      	str	r0, [r7, #4]
 801136a:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 801136c:	683b      	ldr	r3, [r7, #0]
 801136e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 8011370:	2318      	movs	r3, #24
 8011372:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8011374:	f44f 7380 	mov.w	r3, #256	; 0x100
 8011378:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 801137a:	2300      	movs	r3, #0
 801137c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 801137e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8011382:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8011384:	f107 0308 	add.w	r3, r7, #8
 8011388:	4619      	mov	r1, r3
 801138a:	6878      	ldr	r0, [r7, #4]
 801138c:	f7ff ff0a 	bl	80111a4 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 8011390:	f241 3288 	movw	r2, #5000	; 0x1388
 8011394:	2118      	movs	r1, #24
 8011396:	6878      	ldr	r0, [r7, #4]
 8011398:	f000 fa46 	bl	8011828 <SDMMC_GetCmdResp1>
 801139c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 801139e:	69fb      	ldr	r3, [r7, #28]
}
 80113a0:	4618      	mov	r0, r3
 80113a2:	3720      	adds	r7, #32
 80113a4:	46bd      	mov	sp, r7
 80113a6:	bd80      	pop	{r7, pc}

080113a8 <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 80113a8:	b580      	push	{r7, lr}
 80113aa:	b088      	sub	sp, #32
 80113ac:	af00      	add	r7, sp, #0
 80113ae:	6078      	str	r0, [r7, #4]
 80113b0:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 80113b2:	683b      	ldr	r3, [r7, #0]
 80113b4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 80113b6:	2319      	movs	r3, #25
 80113b8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80113ba:	f44f 7380 	mov.w	r3, #256	; 0x100
 80113be:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80113c0:	2300      	movs	r3, #0
 80113c2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80113c4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80113c8:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80113ca:	f107 0308 	add.w	r3, r7, #8
 80113ce:	4619      	mov	r1, r3
 80113d0:	6878      	ldr	r0, [r7, #4]
 80113d2:	f7ff fee7 	bl	80111a4 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 80113d6:	f241 3288 	movw	r2, #5000	; 0x1388
 80113da:	2119      	movs	r1, #25
 80113dc:	6878      	ldr	r0, [r7, #4]
 80113de:	f000 fa23 	bl	8011828 <SDMMC_GetCmdResp1>
 80113e2:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80113e4:	69fb      	ldr	r3, [r7, #28]
}
 80113e6:	4618      	mov	r0, r3
 80113e8:	3720      	adds	r7, #32
 80113ea:	46bd      	mov	sp, r7
 80113ec:	bd80      	pop	{r7, pc}
	...

080113f0 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDMMC_TypeDef *SDMMCx)
{
 80113f0:	b580      	push	{r7, lr}
 80113f2:	b088      	sub	sp, #32
 80113f4:	af00      	add	r7, sp, #0
 80113f6:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 80113f8:	2300      	movs	r3, #0
 80113fa:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 80113fc:	230c      	movs	r3, #12
 80113fe:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8011400:	f44f 7380 	mov.w	r3, #256	; 0x100
 8011404:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8011406:	2300      	movs	r3, #0
 8011408:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 801140a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 801140e:	61bb      	str	r3, [r7, #24]

  __SDMMC_CMDSTOP_ENABLE(SDMMCx);
 8011410:	687b      	ldr	r3, [r7, #4]
 8011412:	68db      	ldr	r3, [r3, #12]
 8011414:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8011418:	687b      	ldr	r3, [r7, #4]
 801141a:	60da      	str	r2, [r3, #12]
  __SDMMC_CMDTRANS_DISABLE(SDMMCx);
 801141c:	687b      	ldr	r3, [r7, #4]
 801141e:	68db      	ldr	r3, [r3, #12]
 8011420:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8011424:	687b      	ldr	r3, [r7, #4]
 8011426:	60da      	str	r2, [r3, #12]

  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8011428:	f107 0308 	add.w	r3, r7, #8
 801142c:	4619      	mov	r1, r3
 801142e:	6878      	ldr	r0, [r7, #4]
 8011430:	f7ff feb8 	bl	80111a4 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_STOP_TRANSMISSION, SDMMC_STOPTRANSFERTIMEOUT);
 8011434:	4a0b      	ldr	r2, [pc, #44]	; (8011464 <SDMMC_CmdStopTransfer+0x74>)
 8011436:	210c      	movs	r1, #12
 8011438:	6878      	ldr	r0, [r7, #4]
 801143a:	f000 f9f5 	bl	8011828 <SDMMC_GetCmdResp1>
 801143e:	61f8      	str	r0, [r7, #28]

  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 8011440:	687b      	ldr	r3, [r7, #4]
 8011442:	68db      	ldr	r3, [r3, #12]
 8011444:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8011448:	687b      	ldr	r3, [r7, #4]
 801144a:	60da      	str	r2, [r3, #12]

  /* Ignore Address Out Of Range Error, Not relevant at end of memory */
  if (errorstate == SDMMC_ERROR_ADDR_OUT_OF_RANGE)
 801144c:	69fb      	ldr	r3, [r7, #28]
 801144e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8011452:	d101      	bne.n	8011458 <SDMMC_CmdStopTransfer+0x68>
  {
    errorstate = SDMMC_ERROR_NONE;
 8011454:	2300      	movs	r3, #0
 8011456:	61fb      	str	r3, [r7, #28]
  }

  return errorstate;
 8011458:	69fb      	ldr	r3, [r7, #28]
}
 801145a:	4618      	mov	r0, r3
 801145c:	3720      	adds	r7, #32
 801145e:	46bd      	mov	sp, r7
 8011460:	bd80      	pop	{r7, pc}
 8011462:	bf00      	nop
 8011464:	05f5e100 	.word	0x05f5e100

08011468 <SDMMC_CmdSelDesel>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  addr: Address of the card to be selected
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDMMC_TypeDef *SDMMCx, uint64_t Addr)
{
 8011468:	b580      	push	{r7, lr}
 801146a:	b08a      	sub	sp, #40	; 0x28
 801146c:	af00      	add	r7, sp, #0
 801146e:	60f8      	str	r0, [r7, #12]
 8011470:	e9c7 2300 	strd	r2, r3, [r7]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 8011474:	683b      	ldr	r3, [r7, #0]
 8011476:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 8011478:	2307      	movs	r3, #7
 801147a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 801147c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8011480:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8011482:	2300      	movs	r3, #0
 8011484:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8011486:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 801148a:	623b      	str	r3, [r7, #32]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 801148c:	f107 0310 	add.w	r3, r7, #16
 8011490:	4619      	mov	r1, r3
 8011492:	68f8      	ldr	r0, [r7, #12]
 8011494:	f7ff fe86 	bl	80111a4 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEL_DESEL_CARD, SDMMC_CMDTIMEOUT);
 8011498:	f241 3288 	movw	r2, #5000	; 0x1388
 801149c:	2107      	movs	r1, #7
 801149e:	68f8      	ldr	r0, [r7, #12]
 80114a0:	f000 f9c2 	bl	8011828 <SDMMC_GetCmdResp1>
 80114a4:	6278      	str	r0, [r7, #36]	; 0x24

  return errorstate;
 80114a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80114a8:	4618      	mov	r0, r3
 80114aa:	3728      	adds	r7, #40	; 0x28
 80114ac:	46bd      	mov	sp, r7
 80114ae:	bd80      	pop	{r7, pc}

080114b0 <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDMMC_TypeDef *SDMMCx)
{
 80114b0:	b580      	push	{r7, lr}
 80114b2:	b088      	sub	sp, #32
 80114b4:	af00      	add	r7, sp, #0
 80114b6:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0U;
 80114b8:	2300      	movs	r3, #0
 80114ba:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 80114bc:	2300      	movs	r3, #0
 80114be:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_NO;
 80114c0:	2300      	movs	r3, #0
 80114c2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80114c4:	2300      	movs	r3, #0
 80114c6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80114c8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80114cc:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80114ce:	f107 0308 	add.w	r3, r7, #8
 80114d2:	4619      	mov	r1, r3
 80114d4:	6878      	ldr	r0, [r7, #4]
 80114d6:	f7ff fe65 	bl	80111a4 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDMMCx);
 80114da:	6878      	ldr	r0, [r7, #4]
 80114dc:	f000 f976 	bl	80117cc <SDMMC_GetCmdError>
 80114e0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80114e2:	69fb      	ldr	r3, [r7, #28]
}
 80114e4:	4618      	mov	r0, r3
 80114e6:	3720      	adds	r7, #32
 80114e8:	46bd      	mov	sp, r7
 80114ea:	bd80      	pop	{r7, pc}

080114ec <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDMMC_TypeDef *SDMMCx)
{
 80114ec:	b580      	push	{r7, lr}
 80114ee:	b088      	sub	sp, #32
 80114f0:	af00      	add	r7, sp, #0
 80114f2:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 80114f4:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 80114f8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 80114fa:	2308      	movs	r3, #8
 80114fc:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80114fe:	f44f 7380 	mov.w	r3, #256	; 0x100
 8011502:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8011504:	2300      	movs	r3, #0
 8011506:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8011508:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 801150c:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 801150e:	f107 0308 	add.w	r3, r7, #8
 8011512:	4619      	mov	r1, r3
 8011514:	6878      	ldr	r0, [r7, #4]
 8011516:	f7ff fe45 	bl	80111a4 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDMMCx);
 801151a:	6878      	ldr	r0, [r7, #4]
 801151c:	f000 fb78 	bl	8011c10 <SDMMC_GetCmdResp7>
 8011520:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8011522:	69fb      	ldr	r3, [r7, #28]
}
 8011524:	4618      	mov	r0, r3
 8011526:	3720      	adds	r7, #32
 8011528:	46bd      	mov	sp, r7
 801152a:	bd80      	pop	{r7, pc}

0801152c <SDMMC_CmdAppCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 801152c:	b580      	push	{r7, lr}
 801152e:	b088      	sub	sp, #32
 8011530:	af00      	add	r7, sp, #0
 8011532:	6078      	str	r0, [r7, #4]
 8011534:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 8011536:	683b      	ldr	r3, [r7, #0]
 8011538:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 801153a:	2337      	movs	r3, #55	; 0x37
 801153c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 801153e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8011542:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8011544:	2300      	movs	r3, #0
 8011546:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8011548:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 801154c:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 801154e:	f107 0308 	add.w	r3, r7, #8
 8011552:	4619      	mov	r1, r3
 8011554:	6878      	ldr	r0, [r7, #4]
 8011556:	f7ff fe25 	bl	80111a4 <SDMMC_SendCommand>

  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_CMD, SDMMC_CMDTIMEOUT);
 801155a:	f241 3288 	movw	r2, #5000	; 0x1388
 801155e:	2137      	movs	r1, #55	; 0x37
 8011560:	6878      	ldr	r0, [r7, #4]
 8011562:	f000 f961 	bl	8011828 <SDMMC_GetCmdResp1>
 8011566:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8011568:	69fb      	ldr	r3, [r7, #28]
}
 801156a:	4618      	mov	r0, r3
 801156c:	3720      	adds	r7, #32
 801156e:	46bd      	mov	sp, r7
 8011570:	bd80      	pop	{r7, pc}

08011572 <SDMMC_CmdAppOperCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8011572:	b580      	push	{r7, lr}
 8011574:	b088      	sub	sp, #32
 8011576:	af00      	add	r7, sp, #0
 8011578:	6078      	str	r0, [r7, #4]
 801157a:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = Argument;
 801157c:	683b      	ldr	r3, [r7, #0]
 801157e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 8011580:	2329      	movs	r3, #41	; 0x29
 8011582:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8011584:	f44f 7380 	mov.w	r3, #256	; 0x100
 8011588:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 801158a:	2300      	movs	r3, #0
 801158c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 801158e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8011592:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8011594:	f107 0308 	add.w	r3, r7, #8
 8011598:	4619      	mov	r1, r3
 801159a:	6878      	ldr	r0, [r7, #4]
 801159c:	f7ff fe02 	bl	80111a4 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDMMCx);
 80115a0:	6878      	ldr	r0, [r7, #4]
 80115a2:	f000 fa7d 	bl	8011aa0 <SDMMC_GetCmdResp3>
 80115a6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80115a8:	69fb      	ldr	r3, [r7, #28]
}
 80115aa:	4618      	mov	r0, r3
 80115ac:	3720      	adds	r7, #32
 80115ae:	46bd      	mov	sp, r7
 80115b0:	bd80      	pop	{r7, pc}

080115b2 <SDMMC_CmdBusWidth>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  BusWidth: BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDMMC_TypeDef *SDMMCx, uint32_t BusWidth)
{
 80115b2:	b580      	push	{r7, lr}
 80115b4:	b088      	sub	sp, #32
 80115b6:	af00      	add	r7, sp, #0
 80115b8:	6078      	str	r0, [r7, #4]
 80115ba:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 80115bc:	683b      	ldr	r3, [r7, #0]
 80115be:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 80115c0:	2306      	movs	r3, #6
 80115c2:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80115c4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80115c8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80115ca:	2300      	movs	r3, #0
 80115cc:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80115ce:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80115d2:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80115d4:	f107 0308 	add.w	r3, r7, #8
 80115d8:	4619      	mov	r1, r3
 80115da:	6878      	ldr	r0, [r7, #4]
 80115dc:	f7ff fde2 	bl	80111a4 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDMMC_CMDTIMEOUT);
 80115e0:	f241 3288 	movw	r2, #5000	; 0x1388
 80115e4:	2106      	movs	r1, #6
 80115e6:	6878      	ldr	r0, [r7, #4]
 80115e8:	f000 f91e 	bl	8011828 <SDMMC_GetCmdResp1>
 80115ec:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80115ee:	69fb      	ldr	r3, [r7, #28]
}
 80115f0:	4618      	mov	r0, r3
 80115f2:	3720      	adds	r7, #32
 80115f4:	46bd      	mov	sp, r7
 80115f6:	bd80      	pop	{r7, pc}

080115f8 <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDMMC_TypeDef *SDMMCx)
{
 80115f8:	b580      	push	{r7, lr}
 80115fa:	b088      	sub	sp, #32
 80115fc:	af00      	add	r7, sp, #0
 80115fe:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 8011600:	2300      	movs	r3, #0
 8011602:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 8011604:	2333      	movs	r3, #51	; 0x33
 8011606:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8011608:	f44f 7380 	mov.w	r3, #256	; 0x100
 801160c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 801160e:	2300      	movs	r3, #0
 8011610:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8011612:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8011616:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8011618:	f107 0308 	add.w	r3, r7, #8
 801161c:	4619      	mov	r1, r3
 801161e:	6878      	ldr	r0, [r7, #4]
 8011620:	f7ff fdc0 	bl	80111a4 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_SEND_SCR, SDMMC_CMDTIMEOUT);
 8011624:	f241 3288 	movw	r2, #5000	; 0x1388
 8011628:	2133      	movs	r1, #51	; 0x33
 801162a:	6878      	ldr	r0, [r7, #4]
 801162c:	f000 f8fc 	bl	8011828 <SDMMC_GetCmdResp1>
 8011630:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8011632:	69fb      	ldr	r3, [r7, #28]
}
 8011634:	4618      	mov	r0, r3
 8011636:	3720      	adds	r7, #32
 8011638:	46bd      	mov	sp, r7
 801163a:	bd80      	pop	{r7, pc}

0801163c <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDMMC_TypeDef *SDMMCx)
{
 801163c:	b580      	push	{r7, lr}
 801163e:	b088      	sub	sp, #32
 8011640:	af00      	add	r7, sp, #0
 8011642:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 8011644:	2300      	movs	r3, #0
 8011646:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 8011648:	2302      	movs	r3, #2
 801164a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 801164c:	f44f 7340 	mov.w	r3, #768	; 0x300
 8011650:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8011652:	2300      	movs	r3, #0
 8011654:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8011656:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 801165a:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 801165c:	f107 0308 	add.w	r3, r7, #8
 8011660:	4619      	mov	r1, r3
 8011662:	6878      	ldr	r0, [r7, #4]
 8011664:	f7ff fd9e 	bl	80111a4 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 8011668:	6878      	ldr	r0, [r7, #4]
 801166a:	f000 f9cf 	bl	8011a0c <SDMMC_GetCmdResp2>
 801166e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8011670:	69fb      	ldr	r3, [r7, #28]
}
 8011672:	4618      	mov	r0, r3
 8011674:	3720      	adds	r7, #32
 8011676:	46bd      	mov	sp, r7
 8011678:	bd80      	pop	{r7, pc}

0801167a <SDMMC_CmdSendCSD>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 801167a:	b580      	push	{r7, lr}
 801167c:	b088      	sub	sp, #32
 801167e:	af00      	add	r7, sp, #0
 8011680:	6078      	str	r0, [r7, #4]
 8011682:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 8011684:	683b      	ldr	r3, [r7, #0]
 8011686:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 8011688:	2309      	movs	r3, #9
 801168a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 801168c:	f44f 7340 	mov.w	r3, #768	; 0x300
 8011690:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8011692:	2300      	movs	r3, #0
 8011694:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8011696:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 801169a:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 801169c:	f107 0308 	add.w	r3, r7, #8
 80116a0:	4619      	mov	r1, r3
 80116a2:	6878      	ldr	r0, [r7, #4]
 80116a4:	f7ff fd7e 	bl	80111a4 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 80116a8:	6878      	ldr	r0, [r7, #4]
 80116aa:	f000 f9af 	bl	8011a0c <SDMMC_GetCmdResp2>
 80116ae:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80116b0:	69fb      	ldr	r3, [r7, #28]
}
 80116b2:	4618      	mov	r0, r3
 80116b4:	3720      	adds	r7, #32
 80116b6:	46bd      	mov	sp, r7
 80116b8:	bd80      	pop	{r7, pc}

080116ba <SDMMC_CmdSetRelAdd>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  pRCA: Card RCA
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDMMC_TypeDef *SDMMCx, uint16_t *pRCA)
{
 80116ba:	b580      	push	{r7, lr}
 80116bc:	b088      	sub	sp, #32
 80116be:	af00      	add	r7, sp, #0
 80116c0:	6078      	str	r0, [r7, #4]
 80116c2:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 80116c4:	2300      	movs	r3, #0
 80116c6:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 80116c8:	2303      	movs	r3, #3
 80116ca:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80116cc:	f44f 7380 	mov.w	r3, #256	; 0x100
 80116d0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80116d2:	2300      	movs	r3, #0
 80116d4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80116d6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80116da:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80116dc:	f107 0308 	add.w	r3, r7, #8
 80116e0:	4619      	mov	r1, r3
 80116e2:	6878      	ldr	r0, [r7, #4]
 80116e4:	f7ff fd5e 	bl	80111a4 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDMMCx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 80116e8:	683a      	ldr	r2, [r7, #0]
 80116ea:	2103      	movs	r1, #3
 80116ec:	6878      	ldr	r0, [r7, #4]
 80116ee:	f000 fa17 	bl	8011b20 <SDMMC_GetCmdResp6>
 80116f2:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80116f4:	69fb      	ldr	r3, [r7, #28]
}
 80116f6:	4618      	mov	r0, r3
 80116f8:	3720      	adds	r7, #32
 80116fa:	46bd      	mov	sp, r7
 80116fc:	bd80      	pop	{r7, pc}

080116fe <SDMMC_CmdSendStatus>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 80116fe:	b580      	push	{r7, lr}
 8011700:	b088      	sub	sp, #32
 8011702:	af00      	add	r7, sp, #0
 8011704:	6078      	str	r0, [r7, #4]
 8011706:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = Argument;
 8011708:	683b      	ldr	r3, [r7, #0]
 801170a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 801170c:	230d      	movs	r3, #13
 801170e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8011710:	f44f 7380 	mov.w	r3, #256	; 0x100
 8011714:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8011716:	2300      	movs	r3, #0
 8011718:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 801171a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 801171e:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8011720:	f107 0308 	add.w	r3, r7, #8
 8011724:	4619      	mov	r1, r3
 8011726:	6878      	ldr	r0, [r7, #4]
 8011728:	f7ff fd3c 	bl	80111a4 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEND_STATUS, SDMMC_CMDTIMEOUT);
 801172c:	f241 3288 	movw	r2, #5000	; 0x1388
 8011730:	210d      	movs	r1, #13
 8011732:	6878      	ldr	r0, [r7, #4]
 8011734:	f000 f878 	bl	8011828 <SDMMC_GetCmdResp1>
 8011738:	61f8      	str	r0, [r7, #28]

  return errorstate;
 801173a:	69fb      	ldr	r3, [r7, #28]
}
 801173c:	4618      	mov	r0, r3
 801173e:	3720      	adds	r7, #32
 8011740:	46bd      	mov	sp, r7
 8011742:	bd80      	pop	{r7, pc}

08011744 <SDMMC_CmdStatusRegister>:
  * @brief  Send the Status register command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdStatusRegister(SDMMC_TypeDef *SDMMCx)
{
 8011744:	b580      	push	{r7, lr}
 8011746:	b088      	sub	sp, #32
 8011748:	af00      	add	r7, sp, #0
 801174a:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0U;
 801174c:	2300      	movs	r3, #0
 801174e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_STATUS;
 8011750:	230d      	movs	r3, #13
 8011752:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8011754:	f44f 7380 	mov.w	r3, #256	; 0x100
 8011758:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 801175a:	2300      	movs	r3, #0
 801175c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 801175e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8011762:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8011764:	f107 0308 	add.w	r3, r7, #8
 8011768:	4619      	mov	r1, r3
 801176a:	6878      	ldr	r0, [r7, #4]
 801176c:	f7ff fd1a 	bl	80111a4 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_STATUS, SDMMC_CMDTIMEOUT);
 8011770:	f241 3288 	movw	r2, #5000	; 0x1388
 8011774:	210d      	movs	r1, #13
 8011776:	6878      	ldr	r0, [r7, #4]
 8011778:	f000 f856 	bl	8011828 <SDMMC_GetCmdResp1>
 801177c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 801177e:	69fb      	ldr	r3, [r7, #28]
}
 8011780:	4618      	mov	r0, r3
 8011782:	3720      	adds	r7, #32
 8011784:	46bd      	mov	sp, r7
 8011786:	bd80      	pop	{r7, pc}

08011788 <SDMMC_CmdVoltageSwitch>:
  *         condition register (OCR)
  * @param  None
  * @retval HAL status
  */
uint32_t SDMMC_CmdVoltageSwitch(SDMMC_TypeDef *SDMMCx)
{
 8011788:	b580      	push	{r7, lr}
 801178a:	b088      	sub	sp, #32
 801178c:	af00      	add	r7, sp, #0
 801178e:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0x00000000;
 8011790:	2300      	movs	r3, #0
 8011792:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_VOLTAGE_SWITCH;
 8011794:	230b      	movs	r3, #11
 8011796:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8011798:	f44f 7380 	mov.w	r3, #256	; 0x100
 801179c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 801179e:	2300      	movs	r3, #0
 80117a0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80117a2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80117a6:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80117a8:	f107 0308 	add.w	r3, r7, #8
 80117ac:	4619      	mov	r1, r3
 80117ae:	6878      	ldr	r0, [r7, #4]
 80117b0:	f7ff fcf8 	bl	80111a4 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_VOLTAGE_SWITCH, SDMMC_CMDTIMEOUT);
 80117b4:	f241 3288 	movw	r2, #5000	; 0x1388
 80117b8:	210b      	movs	r1, #11
 80117ba:	6878      	ldr	r0, [r7, #4]
 80117bc:	f000 f834 	bl	8011828 <SDMMC_GetCmdResp1>
 80117c0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80117c2:	69fb      	ldr	r3, [r7, #28]
}
 80117c4:	4618      	mov	r0, r3
 80117c6:	3720      	adds	r7, #32
 80117c8:	46bd      	mov	sp, r7
 80117ca:	bd80      	pop	{r7, pc}

080117cc <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDMMC_TypeDef *SDMMCx)
{
 80117cc:	b480      	push	{r7}
 80117ce:	b085      	sub	sp, #20
 80117d0:	af00      	add	r7, sp, #0
 80117d2:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80117d4:	4b11      	ldr	r3, [pc, #68]	; (801181c <SDMMC_GetCmdError+0x50>)
 80117d6:	681b      	ldr	r3, [r3, #0]
 80117d8:	4a11      	ldr	r2, [pc, #68]	; (8011820 <SDMMC_GetCmdError+0x54>)
 80117da:	fba2 2303 	umull	r2, r3, r2, r3
 80117de:	0a5b      	lsrs	r3, r3, #9
 80117e0:	f241 3288 	movw	r2, #5000	; 0x1388
 80117e4:	fb02 f303 	mul.w	r3, r2, r3
 80117e8:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 80117ea:	68fb      	ldr	r3, [r7, #12]
 80117ec:	1e5a      	subs	r2, r3, #1
 80117ee:	60fa      	str	r2, [r7, #12]
 80117f0:	2b00      	cmp	r3, #0
 80117f2:	d102      	bne.n	80117fa <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 80117f4:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80117f8:	e009      	b.n	801180e <SDMMC_GetCmdError+0x42>
    }

  }while(!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDSENT));
 80117fa:	687b      	ldr	r3, [r7, #4]
 80117fc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80117fe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8011802:	2b00      	cmp	r3, #0
 8011804:	d0f1      	beq.n	80117ea <SDMMC_GetCmdError+0x1e>

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8011806:	687b      	ldr	r3, [r7, #4]
 8011808:	4a06      	ldr	r2, [pc, #24]	; (8011824 <SDMMC_GetCmdError+0x58>)
 801180a:	639a      	str	r2, [r3, #56]	; 0x38

  return SDMMC_ERROR_NONE;
 801180c:	2300      	movs	r3, #0
}
 801180e:	4618      	mov	r0, r3
 8011810:	3714      	adds	r7, #20
 8011812:	46bd      	mov	sp, r7
 8011814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011818:	4770      	bx	lr
 801181a:	bf00      	nop
 801181c:	24000010 	.word	0x24000010
 8011820:	10624dd3 	.word	0x10624dd3
 8011824:	002000c5 	.word	0x002000c5

08011828 <SDMMC_GetCmdResp1>:
  * @param  hsd: SD handle
  * @param  SD_CMD: The sent command index
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp1(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint32_t Timeout)
{
 8011828:	b580      	push	{r7, lr}
 801182a:	b088      	sub	sp, #32
 801182c:	af00      	add	r7, sp, #0
 801182e:	60f8      	str	r0, [r7, #12]
 8011830:	460b      	mov	r3, r1
 8011832:	607a      	str	r2, [r7, #4]
 8011834:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8011836:	4b70      	ldr	r3, [pc, #448]	; (80119f8 <SDMMC_GetCmdResp1+0x1d0>)
 8011838:	681b      	ldr	r3, [r3, #0]
 801183a:	4a70      	ldr	r2, [pc, #448]	; (80119fc <SDMMC_GetCmdResp1+0x1d4>)
 801183c:	fba2 2303 	umull	r2, r3, r2, r3
 8011840:	0a5a      	lsrs	r2, r3, #9
 8011842:	687b      	ldr	r3, [r7, #4]
 8011844:	fb02 f303 	mul.w	r3, r2, r3
 8011848:	61fb      	str	r3, [r7, #28]

  do
  {
    if (count-- == 0U)
 801184a:	69fb      	ldr	r3, [r7, #28]
 801184c:	1e5a      	subs	r2, r3, #1
 801184e:	61fa      	str	r2, [r7, #28]
 8011850:	2b00      	cmp	r3, #0
 8011852:	d102      	bne.n	801185a <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 8011854:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8011858:	e0c9      	b.n	80119ee <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDMMCx->STA;
 801185a:	68fb      	ldr	r3, [r7, #12]
 801185c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801185e:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT | SDMMC_FLAG_BUSYD0END)) == 0U) ||
 8011860:	69ba      	ldr	r2, [r7, #24]
 8011862:	4b67      	ldr	r3, [pc, #412]	; (8011a00 <SDMMC_GetCmdResp1+0x1d8>)
 8011864:	4013      	ands	r3, r2
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 8011866:	2b00      	cmp	r3, #0
 8011868:	d0ef      	beq.n	801184a <SDMMC_GetCmdResp1+0x22>
 801186a:	69bb      	ldr	r3, [r7, #24]
 801186c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT | SDMMC_FLAG_BUSYD0END)) == 0U) ||
 8011870:	2b00      	cmp	r3, #0
 8011872:	d1ea      	bne.n	801184a <SDMMC_GetCmdResp1+0x22>

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8011874:	68fb      	ldr	r3, [r7, #12]
 8011876:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8011878:	f003 0304 	and.w	r3, r3, #4
 801187c:	2b00      	cmp	r3, #0
 801187e:	d004      	beq.n	801188a <SDMMC_GetCmdResp1+0x62>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8011880:	68fb      	ldr	r3, [r7, #12]
 8011882:	2204      	movs	r2, #4
 8011884:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8011886:	2304      	movs	r3, #4
 8011888:	e0b1      	b.n	80119ee <SDMMC_GetCmdResp1+0x1c6>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 801188a:	68fb      	ldr	r3, [r7, #12]
 801188c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801188e:	f003 0301 	and.w	r3, r3, #1
 8011892:	2b00      	cmp	r3, #0
 8011894:	d004      	beq.n	80118a0 <SDMMC_GetCmdResp1+0x78>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8011896:	68fb      	ldr	r3, [r7, #12]
 8011898:	2201      	movs	r2, #1
 801189a:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 801189c:	2301      	movs	r3, #1
 801189e:	e0a6      	b.n	80119ee <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 80118a0:	68fb      	ldr	r3, [r7, #12]
 80118a2:	4a58      	ldr	r2, [pc, #352]	; (8011a04 <SDMMC_GetCmdResp1+0x1dc>)
 80118a4:	639a      	str	r2, [r3, #56]	; 0x38

  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 80118a6:	68f8      	ldr	r0, [r7, #12]
 80118a8:	f7ff fca6 	bl	80111f8 <SDMMC_GetCommandResponse>
 80118ac:	4603      	mov	r3, r0
 80118ae:	461a      	mov	r2, r3
 80118b0:	7afb      	ldrb	r3, [r7, #11]
 80118b2:	4293      	cmp	r3, r2
 80118b4:	d001      	beq.n	80118ba <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80118b6:	2301      	movs	r3, #1
 80118b8:	e099      	b.n	80119ee <SDMMC_GetCmdResp1+0x1c6>
  }

  /* We have received response, retrieve it for analysis  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 80118ba:	2100      	movs	r1, #0
 80118bc:	68f8      	ldr	r0, [r7, #12]
 80118be:	f7ff fca8 	bl	8011212 <SDMMC_GetResponse>
 80118c2:	6178      	str	r0, [r7, #20]

  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 80118c4:	697a      	ldr	r2, [r7, #20]
 80118c6:	4b50      	ldr	r3, [pc, #320]	; (8011a08 <SDMMC_GetCmdResp1+0x1e0>)
 80118c8:	4013      	ands	r3, r2
 80118ca:	2b00      	cmp	r3, #0
 80118cc:	d101      	bne.n	80118d2 <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 80118ce:	2300      	movs	r3, #0
 80118d0:	e08d      	b.n	80119ee <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 80118d2:	697b      	ldr	r3, [r7, #20]
 80118d4:	2b00      	cmp	r3, #0
 80118d6:	da02      	bge.n	80118de <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 80118d8:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80118dc:	e087      	b.n	80119ee <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 80118de:	697b      	ldr	r3, [r7, #20]
 80118e0:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80118e4:	2b00      	cmp	r3, #0
 80118e6:	d001      	beq.n	80118ec <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 80118e8:	2340      	movs	r3, #64	; 0x40
 80118ea:	e080      	b.n	80119ee <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 80118ec:	697b      	ldr	r3, [r7, #20]
 80118ee:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80118f2:	2b00      	cmp	r3, #0
 80118f4:	d001      	beq.n	80118fa <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 80118f6:	2380      	movs	r3, #128	; 0x80
 80118f8:	e079      	b.n	80119ee <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 80118fa:	697b      	ldr	r3, [r7, #20]
 80118fc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8011900:	2b00      	cmp	r3, #0
 8011902:	d002      	beq.n	801190a <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 8011904:	f44f 7380 	mov.w	r3, #256	; 0x100
 8011908:	e071      	b.n	80119ee <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 801190a:	697b      	ldr	r3, [r7, #20]
 801190c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8011910:	2b00      	cmp	r3, #0
 8011912:	d002      	beq.n	801191a <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 8011914:	f44f 7300 	mov.w	r3, #512	; 0x200
 8011918:	e069      	b.n	80119ee <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 801191a:	697b      	ldr	r3, [r7, #20]
 801191c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8011920:	2b00      	cmp	r3, #0
 8011922:	d002      	beq.n	801192a <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 8011924:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8011928:	e061      	b.n	80119ee <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 801192a:	697b      	ldr	r3, [r7, #20]
 801192c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8011930:	2b00      	cmp	r3, #0
 8011932:	d002      	beq.n	801193a <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 8011934:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8011938:	e059      	b.n	80119ee <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 801193a:	697b      	ldr	r3, [r7, #20]
 801193c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8011940:	2b00      	cmp	r3, #0
 8011942:	d002      	beq.n	801194a <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8011944:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8011948:	e051      	b.n	80119ee <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 801194a:	697b      	ldr	r3, [r7, #20]
 801194c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8011950:	2b00      	cmp	r3, #0
 8011952:	d002      	beq.n	801195a <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8011954:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8011958:	e049      	b.n	80119ee <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 801195a:	697b      	ldr	r3, [r7, #20]
 801195c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8011960:	2b00      	cmp	r3, #0
 8011962:	d002      	beq.n	801196a <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 8011964:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8011968:	e041      	b.n	80119ee <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 801196a:	697b      	ldr	r3, [r7, #20]
 801196c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8011970:	2b00      	cmp	r3, #0
 8011972:	d002      	beq.n	801197a <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 8011974:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8011978:	e039      	b.n	80119ee <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 801197a:	697b      	ldr	r3, [r7, #20]
 801197c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8011980:	2b00      	cmp	r3, #0
 8011982:	d002      	beq.n	801198a <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 8011984:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8011988:	e031      	b.n	80119ee <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 801198a:	697b      	ldr	r3, [r7, #20]
 801198c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8011990:	2b00      	cmp	r3, #0
 8011992:	d002      	beq.n	801199a <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 8011994:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8011998:	e029      	b.n	80119ee <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 801199a:	697b      	ldr	r3, [r7, #20]
 801199c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80119a0:	2b00      	cmp	r3, #0
 80119a2:	d002      	beq.n	80119aa <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 80119a4:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80119a8:	e021      	b.n	80119ee <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 80119aa:	697b      	ldr	r3, [r7, #20]
 80119ac:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80119b0:	2b00      	cmp	r3, #0
 80119b2:	d002      	beq.n	80119ba <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 80119b4:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80119b8:	e019      	b.n	80119ee <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 80119ba:	697b      	ldr	r3, [r7, #20]
 80119bc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80119c0:	2b00      	cmp	r3, #0
 80119c2:	d002      	beq.n	80119ca <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 80119c4:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80119c8:	e011      	b.n	80119ee <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 80119ca:	697b      	ldr	r3, [r7, #20]
 80119cc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80119d0:	2b00      	cmp	r3, #0
 80119d2:	d002      	beq.n	80119da <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 80119d4:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80119d8:	e009      	b.n	80119ee <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 80119da:	697b      	ldr	r3, [r7, #20]
 80119dc:	f003 0308 	and.w	r3, r3, #8
 80119e0:	2b00      	cmp	r3, #0
 80119e2:	d002      	beq.n	80119ea <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 80119e4:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 80119e8:	e001      	b.n	80119ee <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 80119ea:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 80119ee:	4618      	mov	r0, r3
 80119f0:	3720      	adds	r7, #32
 80119f2:	46bd      	mov	sp, r7
 80119f4:	bd80      	pop	{r7, pc}
 80119f6:	bf00      	nop
 80119f8:	24000010 	.word	0x24000010
 80119fc:	10624dd3 	.word	0x10624dd3
 8011a00:	00200045 	.word	0x00200045
 8011a04:	002000c5 	.word	0x002000c5
 8011a08:	fdffe008 	.word	0xfdffe008

08011a0c <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp2(SDMMC_TypeDef *SDMMCx)
{
 8011a0c:	b480      	push	{r7}
 8011a0e:	b085      	sub	sp, #20
 8011a10:	af00      	add	r7, sp, #0
 8011a12:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8011a14:	4b1f      	ldr	r3, [pc, #124]	; (8011a94 <SDMMC_GetCmdResp2+0x88>)
 8011a16:	681b      	ldr	r3, [r3, #0]
 8011a18:	4a1f      	ldr	r2, [pc, #124]	; (8011a98 <SDMMC_GetCmdResp2+0x8c>)
 8011a1a:	fba2 2303 	umull	r2, r3, r2, r3
 8011a1e:	0a5b      	lsrs	r3, r3, #9
 8011a20:	f241 3288 	movw	r2, #5000	; 0x1388
 8011a24:	fb02 f303 	mul.w	r3, r2, r3
 8011a28:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 8011a2a:	68fb      	ldr	r3, [r7, #12]
 8011a2c:	1e5a      	subs	r2, r3, #1
 8011a2e:	60fa      	str	r2, [r7, #12]
 8011a30:	2b00      	cmp	r3, #0
 8011a32:	d102      	bne.n	8011a3a <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8011a34:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8011a38:	e026      	b.n	8011a88 <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDMMCx->STA;
 8011a3a:	687b      	ldr	r3, [r7, #4]
 8011a3c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8011a3e:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8011a40:	68bb      	ldr	r3, [r7, #8]
 8011a42:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 8011a46:	2b00      	cmp	r3, #0
 8011a48:	d0ef      	beq.n	8011a2a <SDMMC_GetCmdResp2+0x1e>
 8011a4a:	68bb      	ldr	r3, [r7, #8]
 8011a4c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8011a50:	2b00      	cmp	r3, #0
 8011a52:	d1ea      	bne.n	8011a2a <SDMMC_GetCmdResp2+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8011a54:	687b      	ldr	r3, [r7, #4]
 8011a56:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8011a58:	f003 0304 	and.w	r3, r3, #4
 8011a5c:	2b00      	cmp	r3, #0
 8011a5e:	d004      	beq.n	8011a6a <SDMMC_GetCmdResp2+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8011a60:	687b      	ldr	r3, [r7, #4]
 8011a62:	2204      	movs	r2, #4
 8011a64:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8011a66:	2304      	movs	r3, #4
 8011a68:	e00e      	b.n	8011a88 <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8011a6a:	687b      	ldr	r3, [r7, #4]
 8011a6c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8011a6e:	f003 0301 	and.w	r3, r3, #1
 8011a72:	2b00      	cmp	r3, #0
 8011a74:	d004      	beq.n	8011a80 <SDMMC_GetCmdResp2+0x74>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8011a76:	687b      	ldr	r3, [r7, #4]
 8011a78:	2201      	movs	r2, #1
 8011a7a:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 8011a7c:	2301      	movs	r3, #1
 8011a7e:	e003      	b.n	8011a88 <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8011a80:	687b      	ldr	r3, [r7, #4]
 8011a82:	4a06      	ldr	r2, [pc, #24]	; (8011a9c <SDMMC_GetCmdResp2+0x90>)
 8011a84:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 8011a86:	2300      	movs	r3, #0
}
 8011a88:	4618      	mov	r0, r3
 8011a8a:	3714      	adds	r7, #20
 8011a8c:	46bd      	mov	sp, r7
 8011a8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011a92:	4770      	bx	lr
 8011a94:	24000010 	.word	0x24000010
 8011a98:	10624dd3 	.word	0x10624dd3
 8011a9c:	002000c5 	.word	0x002000c5

08011aa0 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp3(SDMMC_TypeDef *SDMMCx)
{
 8011aa0:	b480      	push	{r7}
 8011aa2:	b085      	sub	sp, #20
 8011aa4:	af00      	add	r7, sp, #0
 8011aa6:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8011aa8:	4b1a      	ldr	r3, [pc, #104]	; (8011b14 <SDMMC_GetCmdResp3+0x74>)
 8011aaa:	681b      	ldr	r3, [r3, #0]
 8011aac:	4a1a      	ldr	r2, [pc, #104]	; (8011b18 <SDMMC_GetCmdResp3+0x78>)
 8011aae:	fba2 2303 	umull	r2, r3, r2, r3
 8011ab2:	0a5b      	lsrs	r3, r3, #9
 8011ab4:	f241 3288 	movw	r2, #5000	; 0x1388
 8011ab8:	fb02 f303 	mul.w	r3, r2, r3
 8011abc:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 8011abe:	68fb      	ldr	r3, [r7, #12]
 8011ac0:	1e5a      	subs	r2, r3, #1
 8011ac2:	60fa      	str	r2, [r7, #12]
 8011ac4:	2b00      	cmp	r3, #0
 8011ac6:	d102      	bne.n	8011ace <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8011ac8:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8011acc:	e01b      	b.n	8011b06 <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDMMCx->STA;
 8011ace:	687b      	ldr	r3, [r7, #4]
 8011ad0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8011ad2:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8011ad4:	68bb      	ldr	r3, [r7, #8]
 8011ad6:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 8011ada:	2b00      	cmp	r3, #0
 8011adc:	d0ef      	beq.n	8011abe <SDMMC_GetCmdResp3+0x1e>
 8011ade:	68bb      	ldr	r3, [r7, #8]
 8011ae0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8011ae4:	2b00      	cmp	r3, #0
 8011ae6:	d1ea      	bne.n	8011abe <SDMMC_GetCmdResp3+0x1e>

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8011ae8:	687b      	ldr	r3, [r7, #4]
 8011aea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8011aec:	f003 0304 	and.w	r3, r3, #4
 8011af0:	2b00      	cmp	r3, #0
 8011af2:	d004      	beq.n	8011afe <SDMMC_GetCmdResp3+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8011af4:	687b      	ldr	r3, [r7, #4]
 8011af6:	2204      	movs	r2, #4
 8011af8:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8011afa:	2304      	movs	r3, #4
 8011afc:	e003      	b.n	8011b06 <SDMMC_GetCmdResp3+0x66>
  }
  else
  {
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8011afe:	687b      	ldr	r3, [r7, #4]
 8011b00:	4a06      	ldr	r2, [pc, #24]	; (8011b1c <SDMMC_GetCmdResp3+0x7c>)
 8011b02:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 8011b04:	2300      	movs	r3, #0
}
 8011b06:	4618      	mov	r0, r3
 8011b08:	3714      	adds	r7, #20
 8011b0a:	46bd      	mov	sp, r7
 8011b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011b10:	4770      	bx	lr
 8011b12:	bf00      	nop
 8011b14:	24000010 	.word	0x24000010
 8011b18:	10624dd3 	.word	0x10624dd3
 8011b1c:	002000c5 	.word	0x002000c5

08011b20 <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative
  *         address RCA
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp6(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint16_t *pRCA)
{
 8011b20:	b580      	push	{r7, lr}
 8011b22:	b088      	sub	sp, #32
 8011b24:	af00      	add	r7, sp, #0
 8011b26:	60f8      	str	r0, [r7, #12]
 8011b28:	460b      	mov	r3, r1
 8011b2a:	607a      	str	r2, [r7, #4]
 8011b2c:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8011b2e:	4b35      	ldr	r3, [pc, #212]	; (8011c04 <SDMMC_GetCmdResp6+0xe4>)
 8011b30:	681b      	ldr	r3, [r3, #0]
 8011b32:	4a35      	ldr	r2, [pc, #212]	; (8011c08 <SDMMC_GetCmdResp6+0xe8>)
 8011b34:	fba2 2303 	umull	r2, r3, r2, r3
 8011b38:	0a5b      	lsrs	r3, r3, #9
 8011b3a:	f241 3288 	movw	r2, #5000	; 0x1388
 8011b3e:	fb02 f303 	mul.w	r3, r2, r3
 8011b42:	61fb      	str	r3, [r7, #28]

  do
  {
    if (count-- == 0U)
 8011b44:	69fb      	ldr	r3, [r7, #28]
 8011b46:	1e5a      	subs	r2, r3, #1
 8011b48:	61fa      	str	r2, [r7, #28]
 8011b4a:	2b00      	cmp	r3, #0
 8011b4c:	d102      	bne.n	8011b54 <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 8011b4e:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8011b52:	e052      	b.n	8011bfa <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDMMCx->STA;
 8011b54:	68fb      	ldr	r3, [r7, #12]
 8011b56:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8011b58:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8011b5a:	69bb      	ldr	r3, [r7, #24]
 8011b5c:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 8011b60:	2b00      	cmp	r3, #0
 8011b62:	d0ef      	beq.n	8011b44 <SDMMC_GetCmdResp6+0x24>
 8011b64:	69bb      	ldr	r3, [r7, #24]
 8011b66:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8011b6a:	2b00      	cmp	r3, #0
 8011b6c:	d1ea      	bne.n	8011b44 <SDMMC_GetCmdResp6+0x24>

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8011b6e:	68fb      	ldr	r3, [r7, #12]
 8011b70:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8011b72:	f003 0304 	and.w	r3, r3, #4
 8011b76:	2b00      	cmp	r3, #0
 8011b78:	d004      	beq.n	8011b84 <SDMMC_GetCmdResp6+0x64>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8011b7a:	68fb      	ldr	r3, [r7, #12]
 8011b7c:	2204      	movs	r2, #4
 8011b7e:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8011b80:	2304      	movs	r3, #4
 8011b82:	e03a      	b.n	8011bfa <SDMMC_GetCmdResp6+0xda>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8011b84:	68fb      	ldr	r3, [r7, #12]
 8011b86:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8011b88:	f003 0301 	and.w	r3, r3, #1
 8011b8c:	2b00      	cmp	r3, #0
 8011b8e:	d004      	beq.n	8011b9a <SDMMC_GetCmdResp6+0x7a>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8011b90:	68fb      	ldr	r3, [r7, #12]
 8011b92:	2201      	movs	r2, #1
 8011b94:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 8011b96:	2301      	movs	r3, #1
 8011b98:	e02f      	b.n	8011bfa <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }

  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 8011b9a:	68f8      	ldr	r0, [r7, #12]
 8011b9c:	f7ff fb2c 	bl	80111f8 <SDMMC_GetCommandResponse>
 8011ba0:	4603      	mov	r3, r0
 8011ba2:	461a      	mov	r2, r3
 8011ba4:	7afb      	ldrb	r3, [r7, #11]
 8011ba6:	4293      	cmp	r3, r2
 8011ba8:	d001      	beq.n	8011bae <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8011baa:	2301      	movs	r3, #1
 8011bac:	e025      	b.n	8011bfa <SDMMC_GetCmdResp6+0xda>
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8011bae:	68fb      	ldr	r3, [r7, #12]
 8011bb0:	4a16      	ldr	r2, [pc, #88]	; (8011c0c <SDMMC_GetCmdResp6+0xec>)
 8011bb2:	639a      	str	r2, [r3, #56]	; 0x38

  /* We have received response, retrieve it.  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 8011bb4:	2100      	movs	r1, #0
 8011bb6:	68f8      	ldr	r0, [r7, #12]
 8011bb8:	f7ff fb2b 	bl	8011212 <SDMMC_GetResponse>
 8011bbc:	6178      	str	r0, [r7, #20]

  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 8011bbe:	697b      	ldr	r3, [r7, #20]
 8011bc0:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8011bc4:	2b00      	cmp	r3, #0
 8011bc6:	d106      	bne.n	8011bd6 <SDMMC_GetCmdResp6+0xb6>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 8011bc8:	697b      	ldr	r3, [r7, #20]
 8011bca:	0c1b      	lsrs	r3, r3, #16
 8011bcc:	b29a      	uxth	r2, r3
 8011bce:	687b      	ldr	r3, [r7, #4]
 8011bd0:	801a      	strh	r2, [r3, #0]

    return SDMMC_ERROR_NONE;
 8011bd2:	2300      	movs	r3, #0
 8011bd4:	e011      	b.n	8011bfa <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 8011bd6:	697b      	ldr	r3, [r7, #20]
 8011bd8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8011bdc:	2b00      	cmp	r3, #0
 8011bde:	d002      	beq.n	8011be6 <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8011be0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8011be4:	e009      	b.n	8011bfa <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 8011be6:	697b      	ldr	r3, [r7, #20]
 8011be8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8011bec:	2b00      	cmp	r3, #0
 8011bee:	d002      	beq.n	8011bf6 <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8011bf0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8011bf4:	e001      	b.n	8011bfa <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8011bf6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 8011bfa:	4618      	mov	r0, r3
 8011bfc:	3720      	adds	r7, #32
 8011bfe:	46bd      	mov	sp, r7
 8011c00:	bd80      	pop	{r7, pc}
 8011c02:	bf00      	nop
 8011c04:	24000010 	.word	0x24000010
 8011c08:	10624dd3 	.word	0x10624dd3
 8011c0c:	002000c5 	.word	0x002000c5

08011c10 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp7(SDMMC_TypeDef *SDMMCx)
{
 8011c10:	b480      	push	{r7}
 8011c12:	b085      	sub	sp, #20
 8011c14:	af00      	add	r7, sp, #0
 8011c16:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8011c18:	4b22      	ldr	r3, [pc, #136]	; (8011ca4 <SDMMC_GetCmdResp7+0x94>)
 8011c1a:	681b      	ldr	r3, [r3, #0]
 8011c1c:	4a22      	ldr	r2, [pc, #136]	; (8011ca8 <SDMMC_GetCmdResp7+0x98>)
 8011c1e:	fba2 2303 	umull	r2, r3, r2, r3
 8011c22:	0a5b      	lsrs	r3, r3, #9
 8011c24:	f241 3288 	movw	r2, #5000	; 0x1388
 8011c28:	fb02 f303 	mul.w	r3, r2, r3
 8011c2c:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 8011c2e:	68fb      	ldr	r3, [r7, #12]
 8011c30:	1e5a      	subs	r2, r3, #1
 8011c32:	60fa      	str	r2, [r7, #12]
 8011c34:	2b00      	cmp	r3, #0
 8011c36:	d102      	bne.n	8011c3e <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8011c38:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8011c3c:	e02c      	b.n	8011c98 <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDMMCx->STA;
 8011c3e:	687b      	ldr	r3, [r7, #4]
 8011c40:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8011c42:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8011c44:	68bb      	ldr	r3, [r7, #8]
 8011c46:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 8011c4a:	2b00      	cmp	r3, #0
 8011c4c:	d0ef      	beq.n	8011c2e <SDMMC_GetCmdResp7+0x1e>
 8011c4e:	68bb      	ldr	r3, [r7, #8]
 8011c50:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8011c54:	2b00      	cmp	r3, #0
 8011c56:	d1ea      	bne.n	8011c2e <SDMMC_GetCmdResp7+0x1e>

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8011c58:	687b      	ldr	r3, [r7, #4]
 8011c5a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8011c5c:	f003 0304 	and.w	r3, r3, #4
 8011c60:	2b00      	cmp	r3, #0
 8011c62:	d004      	beq.n	8011c6e <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8011c64:	687b      	ldr	r3, [r7, #4]
 8011c66:	2204      	movs	r2, #4
 8011c68:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8011c6a:	2304      	movs	r3, #4
 8011c6c:	e014      	b.n	8011c98 <SDMMC_GetCmdResp7+0x88>
  }

  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8011c6e:	687b      	ldr	r3, [r7, #4]
 8011c70:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8011c72:	f003 0301 	and.w	r3, r3, #1
 8011c76:	2b00      	cmp	r3, #0
 8011c78:	d004      	beq.n	8011c84 <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8011c7a:	687b      	ldr	r3, [r7, #4]
 8011c7c:	2201      	movs	r2, #1
 8011c7e:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 8011c80:	2301      	movs	r3, #1
 8011c82:	e009      	b.n	8011c98 <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDREND))
 8011c84:	687b      	ldr	r3, [r7, #4]
 8011c86:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8011c88:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8011c8c:	2b00      	cmp	r3, #0
 8011c8e:	d002      	beq.n	8011c96 <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CMDREND);
 8011c90:	687b      	ldr	r3, [r7, #4]
 8011c92:	2240      	movs	r2, #64	; 0x40
 8011c94:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 8011c96:	2300      	movs	r3, #0

}
 8011c98:	4618      	mov	r0, r3
 8011c9a:	3714      	adds	r7, #20
 8011c9c:	46bd      	mov	sp, r7
 8011c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011ca2:	4770      	bx	lr
 8011ca4:	24000010 	.word	0x24000010
 8011ca8:	10624dd3 	.word	0x10624dd3

08011cac <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8011cac:	b084      	sub	sp, #16
 8011cae:	b580      	push	{r7, lr}
 8011cb0:	b084      	sub	sp, #16
 8011cb2:	af00      	add	r7, sp, #0
 8011cb4:	6078      	str	r0, [r7, #4]
 8011cb6:	f107 001c 	add.w	r0, r7, #28
 8011cba:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8011cbe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011cc0:	2b01      	cmp	r3, #1
 8011cc2:	d120      	bne.n	8011d06 <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8011cc4:	687b      	ldr	r3, [r7, #4]
 8011cc6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011cc8:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8011ccc:	687b      	ldr	r3, [r7, #4]
 8011cce:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8011cd0:	687b      	ldr	r3, [r7, #4]
 8011cd2:	68da      	ldr	r2, [r3, #12]
 8011cd4:	4b25      	ldr	r3, [pc, #148]	; (8011d6c <USB_CoreInit+0xc0>)
 8011cd6:	4013      	ands	r3, r2
 8011cd8:	687a      	ldr	r2, [r7, #4]
 8011cda:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8011cdc:	687b      	ldr	r3, [r7, #4]
 8011cde:	68db      	ldr	r3, [r3, #12]
 8011ce0:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8011ce4:	687b      	ldr	r3, [r7, #4]
 8011ce6:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8011ce8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011cea:	2b01      	cmp	r3, #1
 8011cec:	d105      	bne.n	8011cfa <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8011cee:	687b      	ldr	r3, [r7, #4]
 8011cf0:	68db      	ldr	r3, [r3, #12]
 8011cf2:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8011cf6:	687b      	ldr	r3, [r7, #4]
 8011cf8:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 8011cfa:	6878      	ldr	r0, [r7, #4]
 8011cfc:	f001 fabe 	bl	801327c <USB_CoreReset>
 8011d00:	4603      	mov	r3, r0
 8011d02:	73fb      	strb	r3, [r7, #15]
 8011d04:	e01a      	b.n	8011d3c <USB_CoreInit+0x90>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8011d06:	687b      	ldr	r3, [r7, #4]
 8011d08:	68db      	ldr	r3, [r3, #12]
 8011d0a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8011d0e:	687b      	ldr	r3, [r7, #4]
 8011d10:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select and set Host mode */
    ret = USB_CoreReset(USBx);
 8011d12:	6878      	ldr	r0, [r7, #4]
 8011d14:	f001 fab2 	bl	801327c <USB_CoreReset>
 8011d18:	4603      	mov	r3, r0
 8011d1a:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8011d1c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8011d1e:	2b00      	cmp	r3, #0
 8011d20:	d106      	bne.n	8011d30 <USB_CoreInit+0x84>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8011d22:	687b      	ldr	r3, [r7, #4]
 8011d24:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011d26:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8011d2a:	687b      	ldr	r3, [r7, #4]
 8011d2c:	639a      	str	r2, [r3, #56]	; 0x38
 8011d2e:	e005      	b.n	8011d3c <USB_CoreInit+0x90>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8011d30:	687b      	ldr	r3, [r7, #4]
 8011d32:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011d34:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8011d38:	687b      	ldr	r3, [r7, #4]
 8011d3a:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8011d3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011d3e:	2b01      	cmp	r3, #1
 8011d40:	d10b      	bne.n	8011d5a <USB_CoreInit+0xae>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8011d42:	687b      	ldr	r3, [r7, #4]
 8011d44:	689b      	ldr	r3, [r3, #8]
 8011d46:	f043 0206 	orr.w	r2, r3, #6
 8011d4a:	687b      	ldr	r3, [r7, #4]
 8011d4c:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8011d4e:	687b      	ldr	r3, [r7, #4]
 8011d50:	689b      	ldr	r3, [r3, #8]
 8011d52:	f043 0220 	orr.w	r2, r3, #32
 8011d56:	687b      	ldr	r3, [r7, #4]
 8011d58:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8011d5a:	7bfb      	ldrb	r3, [r7, #15]
}
 8011d5c:	4618      	mov	r0, r3
 8011d5e:	3710      	adds	r7, #16
 8011d60:	46bd      	mov	sp, r7
 8011d62:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8011d66:	b004      	add	sp, #16
 8011d68:	4770      	bx	lr
 8011d6a:	bf00      	nop
 8011d6c:	ffbdffbf 	.word	0xffbdffbf

08011d70 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8011d70:	b480      	push	{r7}
 8011d72:	b087      	sub	sp, #28
 8011d74:	af00      	add	r7, sp, #0
 8011d76:	60f8      	str	r0, [r7, #12]
 8011d78:	60b9      	str	r1, [r7, #8]
 8011d7a:	4613      	mov	r3, r2
 8011d7c:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8011d7e:	79fb      	ldrb	r3, [r7, #7]
 8011d80:	2b02      	cmp	r3, #2
 8011d82:	d165      	bne.n	8011e50 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8011d84:	68bb      	ldr	r3, [r7, #8]
 8011d86:	4a41      	ldr	r2, [pc, #260]	; (8011e8c <USB_SetTurnaroundTime+0x11c>)
 8011d88:	4293      	cmp	r3, r2
 8011d8a:	d906      	bls.n	8011d9a <USB_SetTurnaroundTime+0x2a>
 8011d8c:	68bb      	ldr	r3, [r7, #8]
 8011d8e:	4a40      	ldr	r2, [pc, #256]	; (8011e90 <USB_SetTurnaroundTime+0x120>)
 8011d90:	4293      	cmp	r3, r2
 8011d92:	d802      	bhi.n	8011d9a <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8011d94:	230f      	movs	r3, #15
 8011d96:	617b      	str	r3, [r7, #20]
 8011d98:	e062      	b.n	8011e60 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8011d9a:	68bb      	ldr	r3, [r7, #8]
 8011d9c:	4a3c      	ldr	r2, [pc, #240]	; (8011e90 <USB_SetTurnaroundTime+0x120>)
 8011d9e:	4293      	cmp	r3, r2
 8011da0:	d906      	bls.n	8011db0 <USB_SetTurnaroundTime+0x40>
 8011da2:	68bb      	ldr	r3, [r7, #8]
 8011da4:	4a3b      	ldr	r2, [pc, #236]	; (8011e94 <USB_SetTurnaroundTime+0x124>)
 8011da6:	4293      	cmp	r3, r2
 8011da8:	d802      	bhi.n	8011db0 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8011daa:	230e      	movs	r3, #14
 8011dac:	617b      	str	r3, [r7, #20]
 8011dae:	e057      	b.n	8011e60 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8011db0:	68bb      	ldr	r3, [r7, #8]
 8011db2:	4a38      	ldr	r2, [pc, #224]	; (8011e94 <USB_SetTurnaroundTime+0x124>)
 8011db4:	4293      	cmp	r3, r2
 8011db6:	d906      	bls.n	8011dc6 <USB_SetTurnaroundTime+0x56>
 8011db8:	68bb      	ldr	r3, [r7, #8]
 8011dba:	4a37      	ldr	r2, [pc, #220]	; (8011e98 <USB_SetTurnaroundTime+0x128>)
 8011dbc:	4293      	cmp	r3, r2
 8011dbe:	d802      	bhi.n	8011dc6 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8011dc0:	230d      	movs	r3, #13
 8011dc2:	617b      	str	r3, [r7, #20]
 8011dc4:	e04c      	b.n	8011e60 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8011dc6:	68bb      	ldr	r3, [r7, #8]
 8011dc8:	4a33      	ldr	r2, [pc, #204]	; (8011e98 <USB_SetTurnaroundTime+0x128>)
 8011dca:	4293      	cmp	r3, r2
 8011dcc:	d906      	bls.n	8011ddc <USB_SetTurnaroundTime+0x6c>
 8011dce:	68bb      	ldr	r3, [r7, #8]
 8011dd0:	4a32      	ldr	r2, [pc, #200]	; (8011e9c <USB_SetTurnaroundTime+0x12c>)
 8011dd2:	4293      	cmp	r3, r2
 8011dd4:	d802      	bhi.n	8011ddc <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8011dd6:	230c      	movs	r3, #12
 8011dd8:	617b      	str	r3, [r7, #20]
 8011dda:	e041      	b.n	8011e60 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8011ddc:	68bb      	ldr	r3, [r7, #8]
 8011dde:	4a2f      	ldr	r2, [pc, #188]	; (8011e9c <USB_SetTurnaroundTime+0x12c>)
 8011de0:	4293      	cmp	r3, r2
 8011de2:	d906      	bls.n	8011df2 <USB_SetTurnaroundTime+0x82>
 8011de4:	68bb      	ldr	r3, [r7, #8]
 8011de6:	4a2e      	ldr	r2, [pc, #184]	; (8011ea0 <USB_SetTurnaroundTime+0x130>)
 8011de8:	4293      	cmp	r3, r2
 8011dea:	d802      	bhi.n	8011df2 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8011dec:	230b      	movs	r3, #11
 8011dee:	617b      	str	r3, [r7, #20]
 8011df0:	e036      	b.n	8011e60 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8011df2:	68bb      	ldr	r3, [r7, #8]
 8011df4:	4a2a      	ldr	r2, [pc, #168]	; (8011ea0 <USB_SetTurnaroundTime+0x130>)
 8011df6:	4293      	cmp	r3, r2
 8011df8:	d906      	bls.n	8011e08 <USB_SetTurnaroundTime+0x98>
 8011dfa:	68bb      	ldr	r3, [r7, #8]
 8011dfc:	4a29      	ldr	r2, [pc, #164]	; (8011ea4 <USB_SetTurnaroundTime+0x134>)
 8011dfe:	4293      	cmp	r3, r2
 8011e00:	d802      	bhi.n	8011e08 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8011e02:	230a      	movs	r3, #10
 8011e04:	617b      	str	r3, [r7, #20]
 8011e06:	e02b      	b.n	8011e60 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8011e08:	68bb      	ldr	r3, [r7, #8]
 8011e0a:	4a26      	ldr	r2, [pc, #152]	; (8011ea4 <USB_SetTurnaroundTime+0x134>)
 8011e0c:	4293      	cmp	r3, r2
 8011e0e:	d906      	bls.n	8011e1e <USB_SetTurnaroundTime+0xae>
 8011e10:	68bb      	ldr	r3, [r7, #8]
 8011e12:	4a25      	ldr	r2, [pc, #148]	; (8011ea8 <USB_SetTurnaroundTime+0x138>)
 8011e14:	4293      	cmp	r3, r2
 8011e16:	d802      	bhi.n	8011e1e <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8011e18:	2309      	movs	r3, #9
 8011e1a:	617b      	str	r3, [r7, #20]
 8011e1c:	e020      	b.n	8011e60 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8011e1e:	68bb      	ldr	r3, [r7, #8]
 8011e20:	4a21      	ldr	r2, [pc, #132]	; (8011ea8 <USB_SetTurnaroundTime+0x138>)
 8011e22:	4293      	cmp	r3, r2
 8011e24:	d906      	bls.n	8011e34 <USB_SetTurnaroundTime+0xc4>
 8011e26:	68bb      	ldr	r3, [r7, #8]
 8011e28:	4a20      	ldr	r2, [pc, #128]	; (8011eac <USB_SetTurnaroundTime+0x13c>)
 8011e2a:	4293      	cmp	r3, r2
 8011e2c:	d802      	bhi.n	8011e34 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8011e2e:	2308      	movs	r3, #8
 8011e30:	617b      	str	r3, [r7, #20]
 8011e32:	e015      	b.n	8011e60 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8011e34:	68bb      	ldr	r3, [r7, #8]
 8011e36:	4a1d      	ldr	r2, [pc, #116]	; (8011eac <USB_SetTurnaroundTime+0x13c>)
 8011e38:	4293      	cmp	r3, r2
 8011e3a:	d906      	bls.n	8011e4a <USB_SetTurnaroundTime+0xda>
 8011e3c:	68bb      	ldr	r3, [r7, #8]
 8011e3e:	4a1c      	ldr	r2, [pc, #112]	; (8011eb0 <USB_SetTurnaroundTime+0x140>)
 8011e40:	4293      	cmp	r3, r2
 8011e42:	d802      	bhi.n	8011e4a <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8011e44:	2307      	movs	r3, #7
 8011e46:	617b      	str	r3, [r7, #20]
 8011e48:	e00a      	b.n	8011e60 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8011e4a:	2306      	movs	r3, #6
 8011e4c:	617b      	str	r3, [r7, #20]
 8011e4e:	e007      	b.n	8011e60 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8011e50:	79fb      	ldrb	r3, [r7, #7]
 8011e52:	2b00      	cmp	r3, #0
 8011e54:	d102      	bne.n	8011e5c <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8011e56:	2309      	movs	r3, #9
 8011e58:	617b      	str	r3, [r7, #20]
 8011e5a:	e001      	b.n	8011e60 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8011e5c:	2309      	movs	r3, #9
 8011e5e:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8011e60:	68fb      	ldr	r3, [r7, #12]
 8011e62:	68db      	ldr	r3, [r3, #12]
 8011e64:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8011e68:	68fb      	ldr	r3, [r7, #12]
 8011e6a:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8011e6c:	68fb      	ldr	r3, [r7, #12]
 8011e6e:	68da      	ldr	r2, [r3, #12]
 8011e70:	697b      	ldr	r3, [r7, #20]
 8011e72:	029b      	lsls	r3, r3, #10
 8011e74:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8011e78:	431a      	orrs	r2, r3
 8011e7a:	68fb      	ldr	r3, [r7, #12]
 8011e7c:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8011e7e:	2300      	movs	r3, #0
}
 8011e80:	4618      	mov	r0, r3
 8011e82:	371c      	adds	r7, #28
 8011e84:	46bd      	mov	sp, r7
 8011e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011e8a:	4770      	bx	lr
 8011e8c:	00d8acbf 	.word	0x00d8acbf
 8011e90:	00e4e1bf 	.word	0x00e4e1bf
 8011e94:	00f423ff 	.word	0x00f423ff
 8011e98:	0106737f 	.word	0x0106737f
 8011e9c:	011a499f 	.word	0x011a499f
 8011ea0:	01312cff 	.word	0x01312cff
 8011ea4:	014ca43f 	.word	0x014ca43f
 8011ea8:	016e35ff 	.word	0x016e35ff
 8011eac:	01a6ab1f 	.word	0x01a6ab1f
 8011eb0:	01e847ff 	.word	0x01e847ff

08011eb4 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8011eb4:	b480      	push	{r7}
 8011eb6:	b083      	sub	sp, #12
 8011eb8:	af00      	add	r7, sp, #0
 8011eba:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8011ebc:	687b      	ldr	r3, [r7, #4]
 8011ebe:	689b      	ldr	r3, [r3, #8]
 8011ec0:	f043 0201 	orr.w	r2, r3, #1
 8011ec4:	687b      	ldr	r3, [r7, #4]
 8011ec6:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8011ec8:	2300      	movs	r3, #0
}
 8011eca:	4618      	mov	r0, r3
 8011ecc:	370c      	adds	r7, #12
 8011ece:	46bd      	mov	sp, r7
 8011ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011ed4:	4770      	bx	lr

08011ed6 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8011ed6:	b480      	push	{r7}
 8011ed8:	b083      	sub	sp, #12
 8011eda:	af00      	add	r7, sp, #0
 8011edc:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8011ede:	687b      	ldr	r3, [r7, #4]
 8011ee0:	689b      	ldr	r3, [r3, #8]
 8011ee2:	f023 0201 	bic.w	r2, r3, #1
 8011ee6:	687b      	ldr	r3, [r7, #4]
 8011ee8:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8011eea:	2300      	movs	r3, #0
}
 8011eec:	4618      	mov	r0, r3
 8011eee:	370c      	adds	r7, #12
 8011ef0:	46bd      	mov	sp, r7
 8011ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011ef6:	4770      	bx	lr

08011ef8 <USB_SetCurrentMode>:
  *            @arg USB_HOST_MODE: Host mode
  *            @arg USB_DRD_MODE: Dual Role Device mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8011ef8:	b580      	push	{r7, lr}
 8011efa:	b082      	sub	sp, #8
 8011efc:	af00      	add	r7, sp, #0
 8011efe:	6078      	str	r0, [r7, #4]
 8011f00:	460b      	mov	r3, r1
 8011f02:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8011f04:	687b      	ldr	r3, [r7, #4]
 8011f06:	68db      	ldr	r3, [r3, #12]
 8011f08:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8011f0c:	687b      	ldr	r3, [r7, #4]
 8011f0e:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8011f10:	78fb      	ldrb	r3, [r7, #3]
 8011f12:	2b01      	cmp	r3, #1
 8011f14:	d106      	bne.n	8011f24 <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8011f16:	687b      	ldr	r3, [r7, #4]
 8011f18:	68db      	ldr	r3, [r3, #12]
 8011f1a:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8011f1e:	687b      	ldr	r3, [r7, #4]
 8011f20:	60da      	str	r2, [r3, #12]
 8011f22:	e00b      	b.n	8011f3c <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 8011f24:	78fb      	ldrb	r3, [r7, #3]
 8011f26:	2b00      	cmp	r3, #0
 8011f28:	d106      	bne.n	8011f38 <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8011f2a:	687b      	ldr	r3, [r7, #4]
 8011f2c:	68db      	ldr	r3, [r3, #12]
 8011f2e:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8011f32:	687b      	ldr	r3, [r7, #4]
 8011f34:	60da      	str	r2, [r3, #12]
 8011f36:	e001      	b.n	8011f3c <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 8011f38:	2301      	movs	r3, #1
 8011f3a:	e003      	b.n	8011f44 <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 8011f3c:	2032      	movs	r0, #50	; 0x32
 8011f3e:	f7f2 fbcb 	bl	80046d8 <HAL_Delay>

  return HAL_OK;
 8011f42:	2300      	movs	r3, #0
}
 8011f44:	4618      	mov	r0, r3
 8011f46:	3708      	adds	r7, #8
 8011f48:	46bd      	mov	sp, r7
 8011f4a:	bd80      	pop	{r7, pc}

08011f4c <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8011f4c:	b084      	sub	sp, #16
 8011f4e:	b580      	push	{r7, lr}
 8011f50:	b086      	sub	sp, #24
 8011f52:	af00      	add	r7, sp, #0
 8011f54:	6078      	str	r0, [r7, #4]
 8011f56:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8011f5a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8011f5e:	2300      	movs	r3, #0
 8011f60:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8011f62:	687b      	ldr	r3, [r7, #4]
 8011f64:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8011f66:	2300      	movs	r3, #0
 8011f68:	613b      	str	r3, [r7, #16]
 8011f6a:	e009      	b.n	8011f80 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8011f6c:	687a      	ldr	r2, [r7, #4]
 8011f6e:	693b      	ldr	r3, [r7, #16]
 8011f70:	3340      	adds	r3, #64	; 0x40
 8011f72:	009b      	lsls	r3, r3, #2
 8011f74:	4413      	add	r3, r2
 8011f76:	2200      	movs	r2, #0
 8011f78:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8011f7a:	693b      	ldr	r3, [r7, #16]
 8011f7c:	3301      	adds	r3, #1
 8011f7e:	613b      	str	r3, [r7, #16]
 8011f80:	693b      	ldr	r3, [r7, #16]
 8011f82:	2b0e      	cmp	r3, #14
 8011f84:	d9f2      	bls.n	8011f6c <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8011f86:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011f88:	2b00      	cmp	r3, #0
 8011f8a:	d11c      	bne.n	8011fc6 <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8011f8c:	68fb      	ldr	r3, [r7, #12]
 8011f8e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8011f92:	685b      	ldr	r3, [r3, #4]
 8011f94:	68fa      	ldr	r2, [r7, #12]
 8011f96:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8011f9a:	f043 0302 	orr.w	r3, r3, #2
 8011f9e:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8011fa0:	687b      	ldr	r3, [r7, #4]
 8011fa2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011fa4:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8011fa8:	687b      	ldr	r3, [r7, #4]
 8011faa:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8011fac:	687b      	ldr	r3, [r7, #4]
 8011fae:	681b      	ldr	r3, [r3, #0]
 8011fb0:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8011fb4:	687b      	ldr	r3, [r7, #4]
 8011fb6:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8011fb8:	687b      	ldr	r3, [r7, #4]
 8011fba:	681b      	ldr	r3, [r3, #0]
 8011fbc:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8011fc0:	687b      	ldr	r3, [r7, #4]
 8011fc2:	601a      	str	r2, [r3, #0]
 8011fc4:	e005      	b.n	8011fd2 <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8011fc6:	687b      	ldr	r3, [r7, #4]
 8011fc8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011fca:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8011fce:	687b      	ldr	r3, [r7, #4]
 8011fd0:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8011fd2:	68fb      	ldr	r3, [r7, #12]
 8011fd4:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8011fd8:	461a      	mov	r2, r3
 8011fda:	2300      	movs	r3, #0
 8011fdc:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8011fde:	68fb      	ldr	r3, [r7, #12]
 8011fe0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8011fe4:	4619      	mov	r1, r3
 8011fe6:	68fb      	ldr	r3, [r7, #12]
 8011fe8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8011fec:	461a      	mov	r2, r3
 8011fee:	680b      	ldr	r3, [r1, #0]
 8011ff0:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8011ff2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011ff4:	2b01      	cmp	r3, #1
 8011ff6:	d10c      	bne.n	8012012 <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8011ff8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011ffa:	2b00      	cmp	r3, #0
 8011ffc:	d104      	bne.n	8012008 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8011ffe:	2100      	movs	r1, #0
 8012000:	6878      	ldr	r0, [r7, #4]
 8012002:	f000 f949 	bl	8012298 <USB_SetDevSpeed>
 8012006:	e008      	b.n	801201a <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8012008:	2101      	movs	r1, #1
 801200a:	6878      	ldr	r0, [r7, #4]
 801200c:	f000 f944 	bl	8012298 <USB_SetDevSpeed>
 8012010:	e003      	b.n	801201a <USB_DevInit+0xce>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8012012:	2103      	movs	r1, #3
 8012014:	6878      	ldr	r0, [r7, #4]
 8012016:	f000 f93f 	bl	8012298 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 801201a:	2110      	movs	r1, #16
 801201c:	6878      	ldr	r0, [r7, #4]
 801201e:	f000 f8f3 	bl	8012208 <USB_FlushTxFifo>
 8012022:	4603      	mov	r3, r0
 8012024:	2b00      	cmp	r3, #0
 8012026:	d001      	beq.n	801202c <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 8012028:	2301      	movs	r3, #1
 801202a:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 801202c:	6878      	ldr	r0, [r7, #4]
 801202e:	f000 f911 	bl	8012254 <USB_FlushRxFifo>
 8012032:	4603      	mov	r3, r0
 8012034:	2b00      	cmp	r3, #0
 8012036:	d001      	beq.n	801203c <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 8012038:	2301      	movs	r3, #1
 801203a:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 801203c:	68fb      	ldr	r3, [r7, #12]
 801203e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8012042:	461a      	mov	r2, r3
 8012044:	2300      	movs	r3, #0
 8012046:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8012048:	68fb      	ldr	r3, [r7, #12]
 801204a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801204e:	461a      	mov	r2, r3
 8012050:	2300      	movs	r3, #0
 8012052:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8012054:	68fb      	ldr	r3, [r7, #12]
 8012056:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801205a:	461a      	mov	r2, r3
 801205c:	2300      	movs	r3, #0
 801205e:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8012060:	2300      	movs	r3, #0
 8012062:	613b      	str	r3, [r7, #16]
 8012064:	e043      	b.n	80120ee <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8012066:	693b      	ldr	r3, [r7, #16]
 8012068:	015a      	lsls	r2, r3, #5
 801206a:	68fb      	ldr	r3, [r7, #12]
 801206c:	4413      	add	r3, r2
 801206e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8012072:	681b      	ldr	r3, [r3, #0]
 8012074:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8012078:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 801207c:	d118      	bne.n	80120b0 <USB_DevInit+0x164>
    {
      if (i == 0U)
 801207e:	693b      	ldr	r3, [r7, #16]
 8012080:	2b00      	cmp	r3, #0
 8012082:	d10a      	bne.n	801209a <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8012084:	693b      	ldr	r3, [r7, #16]
 8012086:	015a      	lsls	r2, r3, #5
 8012088:	68fb      	ldr	r3, [r7, #12]
 801208a:	4413      	add	r3, r2
 801208c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8012090:	461a      	mov	r2, r3
 8012092:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8012096:	6013      	str	r3, [r2, #0]
 8012098:	e013      	b.n	80120c2 <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 801209a:	693b      	ldr	r3, [r7, #16]
 801209c:	015a      	lsls	r2, r3, #5
 801209e:	68fb      	ldr	r3, [r7, #12]
 80120a0:	4413      	add	r3, r2
 80120a2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80120a6:	461a      	mov	r2, r3
 80120a8:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80120ac:	6013      	str	r3, [r2, #0]
 80120ae:	e008      	b.n	80120c2 <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 80120b0:	693b      	ldr	r3, [r7, #16]
 80120b2:	015a      	lsls	r2, r3, #5
 80120b4:	68fb      	ldr	r3, [r7, #12]
 80120b6:	4413      	add	r3, r2
 80120b8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80120bc:	461a      	mov	r2, r3
 80120be:	2300      	movs	r3, #0
 80120c0:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 80120c2:	693b      	ldr	r3, [r7, #16]
 80120c4:	015a      	lsls	r2, r3, #5
 80120c6:	68fb      	ldr	r3, [r7, #12]
 80120c8:	4413      	add	r3, r2
 80120ca:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80120ce:	461a      	mov	r2, r3
 80120d0:	2300      	movs	r3, #0
 80120d2:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80120d4:	693b      	ldr	r3, [r7, #16]
 80120d6:	015a      	lsls	r2, r3, #5
 80120d8:	68fb      	ldr	r3, [r7, #12]
 80120da:	4413      	add	r3, r2
 80120dc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80120e0:	461a      	mov	r2, r3
 80120e2:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80120e6:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80120e8:	693b      	ldr	r3, [r7, #16]
 80120ea:	3301      	adds	r3, #1
 80120ec:	613b      	str	r3, [r7, #16]
 80120ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80120f0:	693a      	ldr	r2, [r7, #16]
 80120f2:	429a      	cmp	r2, r3
 80120f4:	d3b7      	bcc.n	8012066 <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80120f6:	2300      	movs	r3, #0
 80120f8:	613b      	str	r3, [r7, #16]
 80120fa:	e043      	b.n	8012184 <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80120fc:	693b      	ldr	r3, [r7, #16]
 80120fe:	015a      	lsls	r2, r3, #5
 8012100:	68fb      	ldr	r3, [r7, #12]
 8012102:	4413      	add	r3, r2
 8012104:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8012108:	681b      	ldr	r3, [r3, #0]
 801210a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 801210e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8012112:	d118      	bne.n	8012146 <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 8012114:	693b      	ldr	r3, [r7, #16]
 8012116:	2b00      	cmp	r3, #0
 8012118:	d10a      	bne.n	8012130 <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 801211a:	693b      	ldr	r3, [r7, #16]
 801211c:	015a      	lsls	r2, r3, #5
 801211e:	68fb      	ldr	r3, [r7, #12]
 8012120:	4413      	add	r3, r2
 8012122:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8012126:	461a      	mov	r2, r3
 8012128:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 801212c:	6013      	str	r3, [r2, #0]
 801212e:	e013      	b.n	8012158 <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8012130:	693b      	ldr	r3, [r7, #16]
 8012132:	015a      	lsls	r2, r3, #5
 8012134:	68fb      	ldr	r3, [r7, #12]
 8012136:	4413      	add	r3, r2
 8012138:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801213c:	461a      	mov	r2, r3
 801213e:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8012142:	6013      	str	r3, [r2, #0]
 8012144:	e008      	b.n	8012158 <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8012146:	693b      	ldr	r3, [r7, #16]
 8012148:	015a      	lsls	r2, r3, #5
 801214a:	68fb      	ldr	r3, [r7, #12]
 801214c:	4413      	add	r3, r2
 801214e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8012152:	461a      	mov	r2, r3
 8012154:	2300      	movs	r3, #0
 8012156:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8012158:	693b      	ldr	r3, [r7, #16]
 801215a:	015a      	lsls	r2, r3, #5
 801215c:	68fb      	ldr	r3, [r7, #12]
 801215e:	4413      	add	r3, r2
 8012160:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8012164:	461a      	mov	r2, r3
 8012166:	2300      	movs	r3, #0
 8012168:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 801216a:	693b      	ldr	r3, [r7, #16]
 801216c:	015a      	lsls	r2, r3, #5
 801216e:	68fb      	ldr	r3, [r7, #12]
 8012170:	4413      	add	r3, r2
 8012172:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8012176:	461a      	mov	r2, r3
 8012178:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 801217c:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 801217e:	693b      	ldr	r3, [r7, #16]
 8012180:	3301      	adds	r3, #1
 8012182:	613b      	str	r3, [r7, #16]
 8012184:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012186:	693a      	ldr	r2, [r7, #16]
 8012188:	429a      	cmp	r2, r3
 801218a:	d3b7      	bcc.n	80120fc <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 801218c:	68fb      	ldr	r3, [r7, #12]
 801218e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8012192:	691b      	ldr	r3, [r3, #16]
 8012194:	68fa      	ldr	r2, [r7, #12]
 8012196:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 801219a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 801219e:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80121a0:	687b      	ldr	r3, [r7, #4]
 80121a2:	2200      	movs	r2, #0
 80121a4:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 80121a6:	687b      	ldr	r3, [r7, #4]
 80121a8:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 80121ac:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80121ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80121b0:	2b00      	cmp	r3, #0
 80121b2:	d105      	bne.n	80121c0 <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80121b4:	687b      	ldr	r3, [r7, #4]
 80121b6:	699b      	ldr	r3, [r3, #24]
 80121b8:	f043 0210 	orr.w	r2, r3, #16
 80121bc:	687b      	ldr	r3, [r7, #4]
 80121be:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80121c0:	687b      	ldr	r3, [r7, #4]
 80121c2:	699a      	ldr	r2, [r3, #24]
 80121c4:	4b0e      	ldr	r3, [pc, #56]	; (8012200 <USB_DevInit+0x2b4>)
 80121c6:	4313      	orrs	r3, r2
 80121c8:	687a      	ldr	r2, [r7, #4]
 80121ca:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 80121cc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80121ce:	2b00      	cmp	r3, #0
 80121d0:	d005      	beq.n	80121de <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80121d2:	687b      	ldr	r3, [r7, #4]
 80121d4:	699b      	ldr	r3, [r3, #24]
 80121d6:	f043 0208 	orr.w	r2, r3, #8
 80121da:	687b      	ldr	r3, [r7, #4]
 80121dc:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 80121de:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80121e0:	2b01      	cmp	r3, #1
 80121e2:	d105      	bne.n	80121f0 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80121e4:	687b      	ldr	r3, [r7, #4]
 80121e6:	699a      	ldr	r2, [r3, #24]
 80121e8:	4b06      	ldr	r3, [pc, #24]	; (8012204 <USB_DevInit+0x2b8>)
 80121ea:	4313      	orrs	r3, r2
 80121ec:	687a      	ldr	r2, [r7, #4]
 80121ee:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80121f0:	7dfb      	ldrb	r3, [r7, #23]
}
 80121f2:	4618      	mov	r0, r3
 80121f4:	3718      	adds	r7, #24
 80121f6:	46bd      	mov	sp, r7
 80121f8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80121fc:	b004      	add	sp, #16
 80121fe:	4770      	bx	lr
 8012200:	803c3800 	.word	0x803c3800
 8012204:	40000004 	.word	0x40000004

08012208 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8012208:	b480      	push	{r7}
 801220a:	b085      	sub	sp, #20
 801220c:	af00      	add	r7, sp, #0
 801220e:	6078      	str	r0, [r7, #4]
 8012210:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 8012212:	2300      	movs	r3, #0
 8012214:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8012216:	683b      	ldr	r3, [r7, #0]
 8012218:	019b      	lsls	r3, r3, #6
 801221a:	f043 0220 	orr.w	r2, r3, #32
 801221e:	687b      	ldr	r3, [r7, #4]
 8012220:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8012222:	68fb      	ldr	r3, [r7, #12]
 8012224:	3301      	adds	r3, #1
 8012226:	60fb      	str	r3, [r7, #12]
 8012228:	68fb      	ldr	r3, [r7, #12]
 801222a:	4a09      	ldr	r2, [pc, #36]	; (8012250 <USB_FlushTxFifo+0x48>)
 801222c:	4293      	cmp	r3, r2
 801222e:	d901      	bls.n	8012234 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 8012230:	2303      	movs	r3, #3
 8012232:	e006      	b.n	8012242 <USB_FlushTxFifo+0x3a>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8012234:	687b      	ldr	r3, [r7, #4]
 8012236:	691b      	ldr	r3, [r3, #16]
 8012238:	f003 0320 	and.w	r3, r3, #32
 801223c:	2b20      	cmp	r3, #32
 801223e:	d0f0      	beq.n	8012222 <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 8012240:	2300      	movs	r3, #0
}
 8012242:	4618      	mov	r0, r3
 8012244:	3714      	adds	r7, #20
 8012246:	46bd      	mov	sp, r7
 8012248:	f85d 7b04 	ldr.w	r7, [sp], #4
 801224c:	4770      	bx	lr
 801224e:	bf00      	nop
 8012250:	00030d40 	.word	0x00030d40

08012254 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8012254:	b480      	push	{r7}
 8012256:	b085      	sub	sp, #20
 8012258:	af00      	add	r7, sp, #0
 801225a:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 801225c:	2300      	movs	r3, #0
 801225e:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8012260:	687b      	ldr	r3, [r7, #4]
 8012262:	2210      	movs	r2, #16
 8012264:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8012266:	68fb      	ldr	r3, [r7, #12]
 8012268:	3301      	adds	r3, #1
 801226a:	60fb      	str	r3, [r7, #12]
 801226c:	68fb      	ldr	r3, [r7, #12]
 801226e:	4a09      	ldr	r2, [pc, #36]	; (8012294 <USB_FlushRxFifo+0x40>)
 8012270:	4293      	cmp	r3, r2
 8012272:	d901      	bls.n	8012278 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 8012274:	2303      	movs	r3, #3
 8012276:	e006      	b.n	8012286 <USB_FlushRxFifo+0x32>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8012278:	687b      	ldr	r3, [r7, #4]
 801227a:	691b      	ldr	r3, [r3, #16]
 801227c:	f003 0310 	and.w	r3, r3, #16
 8012280:	2b10      	cmp	r3, #16
 8012282:	d0f0      	beq.n	8012266 <USB_FlushRxFifo+0x12>

  return HAL_OK;
 8012284:	2300      	movs	r3, #0
}
 8012286:	4618      	mov	r0, r3
 8012288:	3714      	adds	r7, #20
 801228a:	46bd      	mov	sp, r7
 801228c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012290:	4770      	bx	lr
 8012292:	bf00      	nop
 8012294:	00030d40 	.word	0x00030d40

08012298 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8012298:	b480      	push	{r7}
 801229a:	b085      	sub	sp, #20
 801229c:	af00      	add	r7, sp, #0
 801229e:	6078      	str	r0, [r7, #4]
 80122a0:	460b      	mov	r3, r1
 80122a2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80122a4:	687b      	ldr	r3, [r7, #4]
 80122a6:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 80122a8:	68fb      	ldr	r3, [r7, #12]
 80122aa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80122ae:	681a      	ldr	r2, [r3, #0]
 80122b0:	78fb      	ldrb	r3, [r7, #3]
 80122b2:	68f9      	ldr	r1, [r7, #12]
 80122b4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80122b8:	4313      	orrs	r3, r2
 80122ba:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 80122bc:	2300      	movs	r3, #0
}
 80122be:	4618      	mov	r0, r3
 80122c0:	3714      	adds	r7, #20
 80122c2:	46bd      	mov	sp, r7
 80122c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80122c8:	4770      	bx	lr

080122ca <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg PCD_SPEED_HIGH: High speed mode
  *            @arg PCD_SPEED_FULL: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 80122ca:	b480      	push	{r7}
 80122cc:	b087      	sub	sp, #28
 80122ce:	af00      	add	r7, sp, #0
 80122d0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80122d2:	687b      	ldr	r3, [r7, #4]
 80122d4:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 80122d6:	693b      	ldr	r3, [r7, #16]
 80122d8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80122dc:	689b      	ldr	r3, [r3, #8]
 80122de:	f003 0306 	and.w	r3, r3, #6
 80122e2:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 80122e4:	68fb      	ldr	r3, [r7, #12]
 80122e6:	2b00      	cmp	r3, #0
 80122e8:	d102      	bne.n	80122f0 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 80122ea:	2300      	movs	r3, #0
 80122ec:	75fb      	strb	r3, [r7, #23]
 80122ee:	e00a      	b.n	8012306 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 80122f0:	68fb      	ldr	r3, [r7, #12]
 80122f2:	2b02      	cmp	r3, #2
 80122f4:	d002      	beq.n	80122fc <USB_GetDevSpeed+0x32>
 80122f6:	68fb      	ldr	r3, [r7, #12]
 80122f8:	2b06      	cmp	r3, #6
 80122fa:	d102      	bne.n	8012302 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 80122fc:	2302      	movs	r3, #2
 80122fe:	75fb      	strb	r3, [r7, #23]
 8012300:	e001      	b.n	8012306 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8012302:	230f      	movs	r3, #15
 8012304:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8012306:	7dfb      	ldrb	r3, [r7, #23]
}
 8012308:	4618      	mov	r0, r3
 801230a:	371c      	adds	r7, #28
 801230c:	46bd      	mov	sp, r7
 801230e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012312:	4770      	bx	lr

08012314 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8012314:	b480      	push	{r7}
 8012316:	b085      	sub	sp, #20
 8012318:	af00      	add	r7, sp, #0
 801231a:	6078      	str	r0, [r7, #4]
 801231c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801231e:	687b      	ldr	r3, [r7, #4]
 8012320:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8012322:	683b      	ldr	r3, [r7, #0]
 8012324:	781b      	ldrb	r3, [r3, #0]
 8012326:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8012328:	683b      	ldr	r3, [r7, #0]
 801232a:	785b      	ldrb	r3, [r3, #1]
 801232c:	2b01      	cmp	r3, #1
 801232e:	d139      	bne.n	80123a4 <USB_ActivateEndpoint+0x90>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8012330:	68fb      	ldr	r3, [r7, #12]
 8012332:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8012336:	69da      	ldr	r2, [r3, #28]
 8012338:	683b      	ldr	r3, [r7, #0]
 801233a:	781b      	ldrb	r3, [r3, #0]
 801233c:	f003 030f 	and.w	r3, r3, #15
 8012340:	2101      	movs	r1, #1
 8012342:	fa01 f303 	lsl.w	r3, r1, r3
 8012346:	b29b      	uxth	r3, r3
 8012348:	68f9      	ldr	r1, [r7, #12]
 801234a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 801234e:	4313      	orrs	r3, r2
 8012350:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8012352:	68bb      	ldr	r3, [r7, #8]
 8012354:	015a      	lsls	r2, r3, #5
 8012356:	68fb      	ldr	r3, [r7, #12]
 8012358:	4413      	add	r3, r2
 801235a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801235e:	681b      	ldr	r3, [r3, #0]
 8012360:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8012364:	2b00      	cmp	r3, #0
 8012366:	d153      	bne.n	8012410 <USB_ActivateEndpoint+0xfc>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8012368:	68bb      	ldr	r3, [r7, #8]
 801236a:	015a      	lsls	r2, r3, #5
 801236c:	68fb      	ldr	r3, [r7, #12]
 801236e:	4413      	add	r3, r2
 8012370:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8012374:	681a      	ldr	r2, [r3, #0]
 8012376:	683b      	ldr	r3, [r7, #0]
 8012378:	689b      	ldr	r3, [r3, #8]
 801237a:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 801237e:	683b      	ldr	r3, [r7, #0]
 8012380:	78db      	ldrb	r3, [r3, #3]
 8012382:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8012384:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8012386:	68bb      	ldr	r3, [r7, #8]
 8012388:	059b      	lsls	r3, r3, #22
 801238a:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 801238c:	431a      	orrs	r2, r3
 801238e:	68bb      	ldr	r3, [r7, #8]
 8012390:	0159      	lsls	r1, r3, #5
 8012392:	68fb      	ldr	r3, [r7, #12]
 8012394:	440b      	add	r3, r1
 8012396:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801239a:	4619      	mov	r1, r3
 801239c:	4b20      	ldr	r3, [pc, #128]	; (8012420 <USB_ActivateEndpoint+0x10c>)
 801239e:	4313      	orrs	r3, r2
 80123a0:	600b      	str	r3, [r1, #0]
 80123a2:	e035      	b.n	8012410 <USB_ActivateEndpoint+0xfc>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 80123a4:	68fb      	ldr	r3, [r7, #12]
 80123a6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80123aa:	69da      	ldr	r2, [r3, #28]
 80123ac:	683b      	ldr	r3, [r7, #0]
 80123ae:	781b      	ldrb	r3, [r3, #0]
 80123b0:	f003 030f 	and.w	r3, r3, #15
 80123b4:	2101      	movs	r1, #1
 80123b6:	fa01 f303 	lsl.w	r3, r1, r3
 80123ba:	041b      	lsls	r3, r3, #16
 80123bc:	68f9      	ldr	r1, [r7, #12]
 80123be:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80123c2:	4313      	orrs	r3, r2
 80123c4:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 80123c6:	68bb      	ldr	r3, [r7, #8]
 80123c8:	015a      	lsls	r2, r3, #5
 80123ca:	68fb      	ldr	r3, [r7, #12]
 80123cc:	4413      	add	r3, r2
 80123ce:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80123d2:	681b      	ldr	r3, [r3, #0]
 80123d4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80123d8:	2b00      	cmp	r3, #0
 80123da:	d119      	bne.n	8012410 <USB_ActivateEndpoint+0xfc>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80123dc:	68bb      	ldr	r3, [r7, #8]
 80123de:	015a      	lsls	r2, r3, #5
 80123e0:	68fb      	ldr	r3, [r7, #12]
 80123e2:	4413      	add	r3, r2
 80123e4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80123e8:	681a      	ldr	r2, [r3, #0]
 80123ea:	683b      	ldr	r3, [r7, #0]
 80123ec:	689b      	ldr	r3, [r3, #8]
 80123ee:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 80123f2:	683b      	ldr	r3, [r7, #0]
 80123f4:	78db      	ldrb	r3, [r3, #3]
 80123f6:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80123f8:	430b      	orrs	r3, r1
 80123fa:	431a      	orrs	r2, r3
 80123fc:	68bb      	ldr	r3, [r7, #8]
 80123fe:	0159      	lsls	r1, r3, #5
 8012400:	68fb      	ldr	r3, [r7, #12]
 8012402:	440b      	add	r3, r1
 8012404:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8012408:	4619      	mov	r1, r3
 801240a:	4b05      	ldr	r3, [pc, #20]	; (8012420 <USB_ActivateEndpoint+0x10c>)
 801240c:	4313      	orrs	r3, r2
 801240e:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8012410:	2300      	movs	r3, #0
}
 8012412:	4618      	mov	r0, r3
 8012414:	3714      	adds	r7, #20
 8012416:	46bd      	mov	sp, r7
 8012418:	f85d 7b04 	ldr.w	r7, [sp], #4
 801241c:	4770      	bx	lr
 801241e:	bf00      	nop
 8012420:	10008000 	.word	0x10008000

08012424 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8012424:	b480      	push	{r7}
 8012426:	b085      	sub	sp, #20
 8012428:	af00      	add	r7, sp, #0
 801242a:	6078      	str	r0, [r7, #4]
 801242c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801242e:	687b      	ldr	r3, [r7, #4]
 8012430:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8012432:	683b      	ldr	r3, [r7, #0]
 8012434:	781b      	ldrb	r3, [r3, #0]
 8012436:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8012438:	683b      	ldr	r3, [r7, #0]
 801243a:	785b      	ldrb	r3, [r3, #1]
 801243c:	2b01      	cmp	r3, #1
 801243e:	d161      	bne.n	8012504 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8012440:	68bb      	ldr	r3, [r7, #8]
 8012442:	015a      	lsls	r2, r3, #5
 8012444:	68fb      	ldr	r3, [r7, #12]
 8012446:	4413      	add	r3, r2
 8012448:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801244c:	681b      	ldr	r3, [r3, #0]
 801244e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8012452:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8012456:	d11f      	bne.n	8012498 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8012458:	68bb      	ldr	r3, [r7, #8]
 801245a:	015a      	lsls	r2, r3, #5
 801245c:	68fb      	ldr	r3, [r7, #12]
 801245e:	4413      	add	r3, r2
 8012460:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8012464:	681b      	ldr	r3, [r3, #0]
 8012466:	68ba      	ldr	r2, [r7, #8]
 8012468:	0151      	lsls	r1, r2, #5
 801246a:	68fa      	ldr	r2, [r7, #12]
 801246c:	440a      	add	r2, r1
 801246e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8012472:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8012476:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8012478:	68bb      	ldr	r3, [r7, #8]
 801247a:	015a      	lsls	r2, r3, #5
 801247c:	68fb      	ldr	r3, [r7, #12]
 801247e:	4413      	add	r3, r2
 8012480:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8012484:	681b      	ldr	r3, [r3, #0]
 8012486:	68ba      	ldr	r2, [r7, #8]
 8012488:	0151      	lsls	r1, r2, #5
 801248a:	68fa      	ldr	r2, [r7, #12]
 801248c:	440a      	add	r2, r1
 801248e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8012492:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8012496:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8012498:	68fb      	ldr	r3, [r7, #12]
 801249a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801249e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80124a0:	683b      	ldr	r3, [r7, #0]
 80124a2:	781b      	ldrb	r3, [r3, #0]
 80124a4:	f003 030f 	and.w	r3, r3, #15
 80124a8:	2101      	movs	r1, #1
 80124aa:	fa01 f303 	lsl.w	r3, r1, r3
 80124ae:	b29b      	uxth	r3, r3
 80124b0:	43db      	mvns	r3, r3
 80124b2:	68f9      	ldr	r1, [r7, #12]
 80124b4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80124b8:	4013      	ands	r3, r2
 80124ba:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80124bc:	68fb      	ldr	r3, [r7, #12]
 80124be:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80124c2:	69da      	ldr	r2, [r3, #28]
 80124c4:	683b      	ldr	r3, [r7, #0]
 80124c6:	781b      	ldrb	r3, [r3, #0]
 80124c8:	f003 030f 	and.w	r3, r3, #15
 80124cc:	2101      	movs	r1, #1
 80124ce:	fa01 f303 	lsl.w	r3, r1, r3
 80124d2:	b29b      	uxth	r3, r3
 80124d4:	43db      	mvns	r3, r3
 80124d6:	68f9      	ldr	r1, [r7, #12]
 80124d8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80124dc:	4013      	ands	r3, r2
 80124de:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 80124e0:	68bb      	ldr	r3, [r7, #8]
 80124e2:	015a      	lsls	r2, r3, #5
 80124e4:	68fb      	ldr	r3, [r7, #12]
 80124e6:	4413      	add	r3, r2
 80124e8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80124ec:	681a      	ldr	r2, [r3, #0]
 80124ee:	68bb      	ldr	r3, [r7, #8]
 80124f0:	0159      	lsls	r1, r3, #5
 80124f2:	68fb      	ldr	r3, [r7, #12]
 80124f4:	440b      	add	r3, r1
 80124f6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80124fa:	4619      	mov	r1, r3
 80124fc:	4b35      	ldr	r3, [pc, #212]	; (80125d4 <USB_DeactivateEndpoint+0x1b0>)
 80124fe:	4013      	ands	r3, r2
 8012500:	600b      	str	r3, [r1, #0]
 8012502:	e060      	b.n	80125c6 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8012504:	68bb      	ldr	r3, [r7, #8]
 8012506:	015a      	lsls	r2, r3, #5
 8012508:	68fb      	ldr	r3, [r7, #12]
 801250a:	4413      	add	r3, r2
 801250c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8012510:	681b      	ldr	r3, [r3, #0]
 8012512:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8012516:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 801251a:	d11f      	bne.n	801255c <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 801251c:	68bb      	ldr	r3, [r7, #8]
 801251e:	015a      	lsls	r2, r3, #5
 8012520:	68fb      	ldr	r3, [r7, #12]
 8012522:	4413      	add	r3, r2
 8012524:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8012528:	681b      	ldr	r3, [r3, #0]
 801252a:	68ba      	ldr	r2, [r7, #8]
 801252c:	0151      	lsls	r1, r2, #5
 801252e:	68fa      	ldr	r2, [r7, #12]
 8012530:	440a      	add	r2, r1
 8012532:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8012536:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 801253a:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 801253c:	68bb      	ldr	r3, [r7, #8]
 801253e:	015a      	lsls	r2, r3, #5
 8012540:	68fb      	ldr	r3, [r7, #12]
 8012542:	4413      	add	r3, r2
 8012544:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8012548:	681b      	ldr	r3, [r3, #0]
 801254a:	68ba      	ldr	r2, [r7, #8]
 801254c:	0151      	lsls	r1, r2, #5
 801254e:	68fa      	ldr	r2, [r7, #12]
 8012550:	440a      	add	r2, r1
 8012552:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8012556:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 801255a:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 801255c:	68fb      	ldr	r3, [r7, #12]
 801255e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8012562:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8012564:	683b      	ldr	r3, [r7, #0]
 8012566:	781b      	ldrb	r3, [r3, #0]
 8012568:	f003 030f 	and.w	r3, r3, #15
 801256c:	2101      	movs	r1, #1
 801256e:	fa01 f303 	lsl.w	r3, r1, r3
 8012572:	041b      	lsls	r3, r3, #16
 8012574:	43db      	mvns	r3, r3
 8012576:	68f9      	ldr	r1, [r7, #12]
 8012578:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 801257c:	4013      	ands	r3, r2
 801257e:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8012580:	68fb      	ldr	r3, [r7, #12]
 8012582:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8012586:	69da      	ldr	r2, [r3, #28]
 8012588:	683b      	ldr	r3, [r7, #0]
 801258a:	781b      	ldrb	r3, [r3, #0]
 801258c:	f003 030f 	and.w	r3, r3, #15
 8012590:	2101      	movs	r1, #1
 8012592:	fa01 f303 	lsl.w	r3, r1, r3
 8012596:	041b      	lsls	r3, r3, #16
 8012598:	43db      	mvns	r3, r3
 801259a:	68f9      	ldr	r1, [r7, #12]
 801259c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80125a0:	4013      	ands	r3, r2
 80125a2:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 80125a4:	68bb      	ldr	r3, [r7, #8]
 80125a6:	015a      	lsls	r2, r3, #5
 80125a8:	68fb      	ldr	r3, [r7, #12]
 80125aa:	4413      	add	r3, r2
 80125ac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80125b0:	681a      	ldr	r2, [r3, #0]
 80125b2:	68bb      	ldr	r3, [r7, #8]
 80125b4:	0159      	lsls	r1, r3, #5
 80125b6:	68fb      	ldr	r3, [r7, #12]
 80125b8:	440b      	add	r3, r1
 80125ba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80125be:	4619      	mov	r1, r3
 80125c0:	4b05      	ldr	r3, [pc, #20]	; (80125d8 <USB_DeactivateEndpoint+0x1b4>)
 80125c2:	4013      	ands	r3, r2
 80125c4:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 80125c6:	2300      	movs	r3, #0
}
 80125c8:	4618      	mov	r0, r3
 80125ca:	3714      	adds	r7, #20
 80125cc:	46bd      	mov	sp, r7
 80125ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80125d2:	4770      	bx	lr
 80125d4:	ec337800 	.word	0xec337800
 80125d8:	eff37800 	.word	0xeff37800

080125dc <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 80125dc:	b580      	push	{r7, lr}
 80125de:	b08a      	sub	sp, #40	; 0x28
 80125e0:	af02      	add	r7, sp, #8
 80125e2:	60f8      	str	r0, [r7, #12]
 80125e4:	60b9      	str	r1, [r7, #8]
 80125e6:	4613      	mov	r3, r2
 80125e8:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80125ea:	68fb      	ldr	r3, [r7, #12]
 80125ec:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 80125ee:	68bb      	ldr	r3, [r7, #8]
 80125f0:	781b      	ldrb	r3, [r3, #0]
 80125f2:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 80125f4:	68bb      	ldr	r3, [r7, #8]
 80125f6:	785b      	ldrb	r3, [r3, #1]
 80125f8:	2b01      	cmp	r3, #1
 80125fa:	f040 8163 	bne.w	80128c4 <USB_EPStartXfer+0x2e8>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 80125fe:	68bb      	ldr	r3, [r7, #8]
 8012600:	695b      	ldr	r3, [r3, #20]
 8012602:	2b00      	cmp	r3, #0
 8012604:	d132      	bne.n	801266c <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8012606:	69bb      	ldr	r3, [r7, #24]
 8012608:	015a      	lsls	r2, r3, #5
 801260a:	69fb      	ldr	r3, [r7, #28]
 801260c:	4413      	add	r3, r2
 801260e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8012612:	691a      	ldr	r2, [r3, #16]
 8012614:	69bb      	ldr	r3, [r7, #24]
 8012616:	0159      	lsls	r1, r3, #5
 8012618:	69fb      	ldr	r3, [r7, #28]
 801261a:	440b      	add	r3, r1
 801261c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8012620:	4619      	mov	r1, r3
 8012622:	4ba5      	ldr	r3, [pc, #660]	; (80128b8 <USB_EPStartXfer+0x2dc>)
 8012624:	4013      	ands	r3, r2
 8012626:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8012628:	69bb      	ldr	r3, [r7, #24]
 801262a:	015a      	lsls	r2, r3, #5
 801262c:	69fb      	ldr	r3, [r7, #28]
 801262e:	4413      	add	r3, r2
 8012630:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8012634:	691b      	ldr	r3, [r3, #16]
 8012636:	69ba      	ldr	r2, [r7, #24]
 8012638:	0151      	lsls	r1, r2, #5
 801263a:	69fa      	ldr	r2, [r7, #28]
 801263c:	440a      	add	r2, r1
 801263e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8012642:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8012646:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8012648:	69bb      	ldr	r3, [r7, #24]
 801264a:	015a      	lsls	r2, r3, #5
 801264c:	69fb      	ldr	r3, [r7, #28]
 801264e:	4413      	add	r3, r2
 8012650:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8012654:	691a      	ldr	r2, [r3, #16]
 8012656:	69bb      	ldr	r3, [r7, #24]
 8012658:	0159      	lsls	r1, r3, #5
 801265a:	69fb      	ldr	r3, [r7, #28]
 801265c:	440b      	add	r3, r1
 801265e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8012662:	4619      	mov	r1, r3
 8012664:	4b95      	ldr	r3, [pc, #596]	; (80128bc <USB_EPStartXfer+0x2e0>)
 8012666:	4013      	ands	r3, r2
 8012668:	610b      	str	r3, [r1, #16]
 801266a:	e074      	b.n	8012756 <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 801266c:	69bb      	ldr	r3, [r7, #24]
 801266e:	015a      	lsls	r2, r3, #5
 8012670:	69fb      	ldr	r3, [r7, #28]
 8012672:	4413      	add	r3, r2
 8012674:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8012678:	691a      	ldr	r2, [r3, #16]
 801267a:	69bb      	ldr	r3, [r7, #24]
 801267c:	0159      	lsls	r1, r3, #5
 801267e:	69fb      	ldr	r3, [r7, #28]
 8012680:	440b      	add	r3, r1
 8012682:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8012686:	4619      	mov	r1, r3
 8012688:	4b8c      	ldr	r3, [pc, #560]	; (80128bc <USB_EPStartXfer+0x2e0>)
 801268a:	4013      	ands	r3, r2
 801268c:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 801268e:	69bb      	ldr	r3, [r7, #24]
 8012690:	015a      	lsls	r2, r3, #5
 8012692:	69fb      	ldr	r3, [r7, #28]
 8012694:	4413      	add	r3, r2
 8012696:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801269a:	691a      	ldr	r2, [r3, #16]
 801269c:	69bb      	ldr	r3, [r7, #24]
 801269e:	0159      	lsls	r1, r3, #5
 80126a0:	69fb      	ldr	r3, [r7, #28]
 80126a2:	440b      	add	r3, r1
 80126a4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80126a8:	4619      	mov	r1, r3
 80126aa:	4b83      	ldr	r3, [pc, #524]	; (80128b8 <USB_EPStartXfer+0x2dc>)
 80126ac:	4013      	ands	r3, r2
 80126ae:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 80126b0:	69bb      	ldr	r3, [r7, #24]
 80126b2:	015a      	lsls	r2, r3, #5
 80126b4:	69fb      	ldr	r3, [r7, #28]
 80126b6:	4413      	add	r3, r2
 80126b8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80126bc:	691a      	ldr	r2, [r3, #16]
 80126be:	68bb      	ldr	r3, [r7, #8]
 80126c0:	6959      	ldr	r1, [r3, #20]
 80126c2:	68bb      	ldr	r3, [r7, #8]
 80126c4:	689b      	ldr	r3, [r3, #8]
 80126c6:	440b      	add	r3, r1
 80126c8:	1e59      	subs	r1, r3, #1
 80126ca:	68bb      	ldr	r3, [r7, #8]
 80126cc:	689b      	ldr	r3, [r3, #8]
 80126ce:	fbb1 f3f3 	udiv	r3, r1, r3
 80126d2:	04d9      	lsls	r1, r3, #19
 80126d4:	4b7a      	ldr	r3, [pc, #488]	; (80128c0 <USB_EPStartXfer+0x2e4>)
 80126d6:	400b      	ands	r3, r1
 80126d8:	69b9      	ldr	r1, [r7, #24]
 80126da:	0148      	lsls	r0, r1, #5
 80126dc:	69f9      	ldr	r1, [r7, #28]
 80126de:	4401      	add	r1, r0
 80126e0:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80126e4:	4313      	orrs	r3, r2
 80126e6:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 80126e8:	69bb      	ldr	r3, [r7, #24]
 80126ea:	015a      	lsls	r2, r3, #5
 80126ec:	69fb      	ldr	r3, [r7, #28]
 80126ee:	4413      	add	r3, r2
 80126f0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80126f4:	691a      	ldr	r2, [r3, #16]
 80126f6:	68bb      	ldr	r3, [r7, #8]
 80126f8:	695b      	ldr	r3, [r3, #20]
 80126fa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80126fe:	69b9      	ldr	r1, [r7, #24]
 8012700:	0148      	lsls	r0, r1, #5
 8012702:	69f9      	ldr	r1, [r7, #28]
 8012704:	4401      	add	r1, r0
 8012706:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 801270a:	4313      	orrs	r3, r2
 801270c:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 801270e:	68bb      	ldr	r3, [r7, #8]
 8012710:	78db      	ldrb	r3, [r3, #3]
 8012712:	2b01      	cmp	r3, #1
 8012714:	d11f      	bne.n	8012756 <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8012716:	69bb      	ldr	r3, [r7, #24]
 8012718:	015a      	lsls	r2, r3, #5
 801271a:	69fb      	ldr	r3, [r7, #28]
 801271c:	4413      	add	r3, r2
 801271e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8012722:	691b      	ldr	r3, [r3, #16]
 8012724:	69ba      	ldr	r2, [r7, #24]
 8012726:	0151      	lsls	r1, r2, #5
 8012728:	69fa      	ldr	r2, [r7, #28]
 801272a:	440a      	add	r2, r1
 801272c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8012730:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8012734:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8012736:	69bb      	ldr	r3, [r7, #24]
 8012738:	015a      	lsls	r2, r3, #5
 801273a:	69fb      	ldr	r3, [r7, #28]
 801273c:	4413      	add	r3, r2
 801273e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8012742:	691b      	ldr	r3, [r3, #16]
 8012744:	69ba      	ldr	r2, [r7, #24]
 8012746:	0151      	lsls	r1, r2, #5
 8012748:	69fa      	ldr	r2, [r7, #28]
 801274a:	440a      	add	r2, r1
 801274c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8012750:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8012754:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 8012756:	79fb      	ldrb	r3, [r7, #7]
 8012758:	2b01      	cmp	r3, #1
 801275a:	d14b      	bne.n	80127f4 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 801275c:	68bb      	ldr	r3, [r7, #8]
 801275e:	691b      	ldr	r3, [r3, #16]
 8012760:	2b00      	cmp	r3, #0
 8012762:	d009      	beq.n	8012778 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8012764:	69bb      	ldr	r3, [r7, #24]
 8012766:	015a      	lsls	r2, r3, #5
 8012768:	69fb      	ldr	r3, [r7, #28]
 801276a:	4413      	add	r3, r2
 801276c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8012770:	461a      	mov	r2, r3
 8012772:	68bb      	ldr	r3, [r7, #8]
 8012774:	691b      	ldr	r3, [r3, #16]
 8012776:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8012778:	68bb      	ldr	r3, [r7, #8]
 801277a:	78db      	ldrb	r3, [r3, #3]
 801277c:	2b01      	cmp	r3, #1
 801277e:	d128      	bne.n	80127d2 <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8012780:	69fb      	ldr	r3, [r7, #28]
 8012782:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8012786:	689b      	ldr	r3, [r3, #8]
 8012788:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801278c:	2b00      	cmp	r3, #0
 801278e:	d110      	bne.n	80127b2 <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8012790:	69bb      	ldr	r3, [r7, #24]
 8012792:	015a      	lsls	r2, r3, #5
 8012794:	69fb      	ldr	r3, [r7, #28]
 8012796:	4413      	add	r3, r2
 8012798:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801279c:	681b      	ldr	r3, [r3, #0]
 801279e:	69ba      	ldr	r2, [r7, #24]
 80127a0:	0151      	lsls	r1, r2, #5
 80127a2:	69fa      	ldr	r2, [r7, #28]
 80127a4:	440a      	add	r2, r1
 80127a6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80127aa:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80127ae:	6013      	str	r3, [r2, #0]
 80127b0:	e00f      	b.n	80127d2 <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80127b2:	69bb      	ldr	r3, [r7, #24]
 80127b4:	015a      	lsls	r2, r3, #5
 80127b6:	69fb      	ldr	r3, [r7, #28]
 80127b8:	4413      	add	r3, r2
 80127ba:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80127be:	681b      	ldr	r3, [r3, #0]
 80127c0:	69ba      	ldr	r2, [r7, #24]
 80127c2:	0151      	lsls	r1, r2, #5
 80127c4:	69fa      	ldr	r2, [r7, #28]
 80127c6:	440a      	add	r2, r1
 80127c8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80127cc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80127d0:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80127d2:	69bb      	ldr	r3, [r7, #24]
 80127d4:	015a      	lsls	r2, r3, #5
 80127d6:	69fb      	ldr	r3, [r7, #28]
 80127d8:	4413      	add	r3, r2
 80127da:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80127de:	681b      	ldr	r3, [r3, #0]
 80127e0:	69ba      	ldr	r2, [r7, #24]
 80127e2:	0151      	lsls	r1, r2, #5
 80127e4:	69fa      	ldr	r2, [r7, #28]
 80127e6:	440a      	add	r2, r1
 80127e8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80127ec:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80127f0:	6013      	str	r3, [r2, #0]
 80127f2:	e133      	b.n	8012a5c <USB_EPStartXfer+0x480>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80127f4:	69bb      	ldr	r3, [r7, #24]
 80127f6:	015a      	lsls	r2, r3, #5
 80127f8:	69fb      	ldr	r3, [r7, #28]
 80127fa:	4413      	add	r3, r2
 80127fc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8012800:	681b      	ldr	r3, [r3, #0]
 8012802:	69ba      	ldr	r2, [r7, #24]
 8012804:	0151      	lsls	r1, r2, #5
 8012806:	69fa      	ldr	r2, [r7, #28]
 8012808:	440a      	add	r2, r1
 801280a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801280e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8012812:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8012814:	68bb      	ldr	r3, [r7, #8]
 8012816:	78db      	ldrb	r3, [r3, #3]
 8012818:	2b01      	cmp	r3, #1
 801281a:	d015      	beq.n	8012848 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 801281c:	68bb      	ldr	r3, [r7, #8]
 801281e:	695b      	ldr	r3, [r3, #20]
 8012820:	2b00      	cmp	r3, #0
 8012822:	f000 811b 	beq.w	8012a5c <USB_EPStartXfer+0x480>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8012826:	69fb      	ldr	r3, [r7, #28]
 8012828:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801282c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 801282e:	68bb      	ldr	r3, [r7, #8]
 8012830:	781b      	ldrb	r3, [r3, #0]
 8012832:	f003 030f 	and.w	r3, r3, #15
 8012836:	2101      	movs	r1, #1
 8012838:	fa01 f303 	lsl.w	r3, r1, r3
 801283c:	69f9      	ldr	r1, [r7, #28]
 801283e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8012842:	4313      	orrs	r3, r2
 8012844:	634b      	str	r3, [r1, #52]	; 0x34
 8012846:	e109      	b.n	8012a5c <USB_EPStartXfer+0x480>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8012848:	69fb      	ldr	r3, [r7, #28]
 801284a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801284e:	689b      	ldr	r3, [r3, #8]
 8012850:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8012854:	2b00      	cmp	r3, #0
 8012856:	d110      	bne.n	801287a <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8012858:	69bb      	ldr	r3, [r7, #24]
 801285a:	015a      	lsls	r2, r3, #5
 801285c:	69fb      	ldr	r3, [r7, #28]
 801285e:	4413      	add	r3, r2
 8012860:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8012864:	681b      	ldr	r3, [r3, #0]
 8012866:	69ba      	ldr	r2, [r7, #24]
 8012868:	0151      	lsls	r1, r2, #5
 801286a:	69fa      	ldr	r2, [r7, #28]
 801286c:	440a      	add	r2, r1
 801286e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8012872:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8012876:	6013      	str	r3, [r2, #0]
 8012878:	e00f      	b.n	801289a <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 801287a:	69bb      	ldr	r3, [r7, #24]
 801287c:	015a      	lsls	r2, r3, #5
 801287e:	69fb      	ldr	r3, [r7, #28]
 8012880:	4413      	add	r3, r2
 8012882:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8012886:	681b      	ldr	r3, [r3, #0]
 8012888:	69ba      	ldr	r2, [r7, #24]
 801288a:	0151      	lsls	r1, r2, #5
 801288c:	69fa      	ldr	r2, [r7, #28]
 801288e:	440a      	add	r2, r1
 8012890:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8012894:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8012898:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 801289a:	68bb      	ldr	r3, [r7, #8]
 801289c:	68d9      	ldr	r1, [r3, #12]
 801289e:	68bb      	ldr	r3, [r7, #8]
 80128a0:	781a      	ldrb	r2, [r3, #0]
 80128a2:	68bb      	ldr	r3, [r7, #8]
 80128a4:	695b      	ldr	r3, [r3, #20]
 80128a6:	b298      	uxth	r0, r3
 80128a8:	79fb      	ldrb	r3, [r7, #7]
 80128aa:	9300      	str	r3, [sp, #0]
 80128ac:	4603      	mov	r3, r0
 80128ae:	68f8      	ldr	r0, [r7, #12]
 80128b0:	f000 fa38 	bl	8012d24 <USB_WritePacket>
 80128b4:	e0d2      	b.n	8012a5c <USB_EPStartXfer+0x480>
 80128b6:	bf00      	nop
 80128b8:	e007ffff 	.word	0xe007ffff
 80128bc:	fff80000 	.word	0xfff80000
 80128c0:	1ff80000 	.word	0x1ff80000
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 80128c4:	69bb      	ldr	r3, [r7, #24]
 80128c6:	015a      	lsls	r2, r3, #5
 80128c8:	69fb      	ldr	r3, [r7, #28]
 80128ca:	4413      	add	r3, r2
 80128cc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80128d0:	691a      	ldr	r2, [r3, #16]
 80128d2:	69bb      	ldr	r3, [r7, #24]
 80128d4:	0159      	lsls	r1, r3, #5
 80128d6:	69fb      	ldr	r3, [r7, #28]
 80128d8:	440b      	add	r3, r1
 80128da:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80128de:	4619      	mov	r1, r3
 80128e0:	4b61      	ldr	r3, [pc, #388]	; (8012a68 <USB_EPStartXfer+0x48c>)
 80128e2:	4013      	ands	r3, r2
 80128e4:	610b      	str	r3, [r1, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 80128e6:	69bb      	ldr	r3, [r7, #24]
 80128e8:	015a      	lsls	r2, r3, #5
 80128ea:	69fb      	ldr	r3, [r7, #28]
 80128ec:	4413      	add	r3, r2
 80128ee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80128f2:	691a      	ldr	r2, [r3, #16]
 80128f4:	69bb      	ldr	r3, [r7, #24]
 80128f6:	0159      	lsls	r1, r3, #5
 80128f8:	69fb      	ldr	r3, [r7, #28]
 80128fa:	440b      	add	r3, r1
 80128fc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8012900:	4619      	mov	r1, r3
 8012902:	4b5a      	ldr	r3, [pc, #360]	; (8012a6c <USB_EPStartXfer+0x490>)
 8012904:	4013      	ands	r3, r2
 8012906:	610b      	str	r3, [r1, #16]

    if (ep->xfer_len == 0U)
 8012908:	68bb      	ldr	r3, [r7, #8]
 801290a:	695b      	ldr	r3, [r3, #20]
 801290c:	2b00      	cmp	r3, #0
 801290e:	d123      	bne.n	8012958 <USB_EPStartXfer+0x37c>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8012910:	69bb      	ldr	r3, [r7, #24]
 8012912:	015a      	lsls	r2, r3, #5
 8012914:	69fb      	ldr	r3, [r7, #28]
 8012916:	4413      	add	r3, r2
 8012918:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801291c:	691a      	ldr	r2, [r3, #16]
 801291e:	68bb      	ldr	r3, [r7, #8]
 8012920:	689b      	ldr	r3, [r3, #8]
 8012922:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8012926:	69b9      	ldr	r1, [r7, #24]
 8012928:	0148      	lsls	r0, r1, #5
 801292a:	69f9      	ldr	r1, [r7, #28]
 801292c:	4401      	add	r1, r0
 801292e:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8012932:	4313      	orrs	r3, r2
 8012934:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8012936:	69bb      	ldr	r3, [r7, #24]
 8012938:	015a      	lsls	r2, r3, #5
 801293a:	69fb      	ldr	r3, [r7, #28]
 801293c:	4413      	add	r3, r2
 801293e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8012942:	691b      	ldr	r3, [r3, #16]
 8012944:	69ba      	ldr	r2, [r7, #24]
 8012946:	0151      	lsls	r1, r2, #5
 8012948:	69fa      	ldr	r2, [r7, #28]
 801294a:	440a      	add	r2, r1
 801294c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8012950:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8012954:	6113      	str	r3, [r2, #16]
 8012956:	e033      	b.n	80129c0 <USB_EPStartXfer+0x3e4>
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8012958:	68bb      	ldr	r3, [r7, #8]
 801295a:	695a      	ldr	r2, [r3, #20]
 801295c:	68bb      	ldr	r3, [r7, #8]
 801295e:	689b      	ldr	r3, [r3, #8]
 8012960:	4413      	add	r3, r2
 8012962:	1e5a      	subs	r2, r3, #1
 8012964:	68bb      	ldr	r3, [r7, #8]
 8012966:	689b      	ldr	r3, [r3, #8]
 8012968:	fbb2 f3f3 	udiv	r3, r2, r3
 801296c:	82fb      	strh	r3, [r7, #22]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 801296e:	69bb      	ldr	r3, [r7, #24]
 8012970:	015a      	lsls	r2, r3, #5
 8012972:	69fb      	ldr	r3, [r7, #28]
 8012974:	4413      	add	r3, r2
 8012976:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801297a:	691a      	ldr	r2, [r3, #16]
 801297c:	8afb      	ldrh	r3, [r7, #22]
 801297e:	04d9      	lsls	r1, r3, #19
 8012980:	4b3b      	ldr	r3, [pc, #236]	; (8012a70 <USB_EPStartXfer+0x494>)
 8012982:	400b      	ands	r3, r1
 8012984:	69b9      	ldr	r1, [r7, #24]
 8012986:	0148      	lsls	r0, r1, #5
 8012988:	69f9      	ldr	r1, [r7, #28]
 801298a:	4401      	add	r1, r0
 801298c:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8012990:	4313      	orrs	r3, r2
 8012992:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 8012994:	69bb      	ldr	r3, [r7, #24]
 8012996:	015a      	lsls	r2, r3, #5
 8012998:	69fb      	ldr	r3, [r7, #28]
 801299a:	4413      	add	r3, r2
 801299c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80129a0:	691a      	ldr	r2, [r3, #16]
 80129a2:	68bb      	ldr	r3, [r7, #8]
 80129a4:	689b      	ldr	r3, [r3, #8]
 80129a6:	8af9      	ldrh	r1, [r7, #22]
 80129a8:	fb01 f303 	mul.w	r3, r1, r3
 80129ac:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80129b0:	69b9      	ldr	r1, [r7, #24]
 80129b2:	0148      	lsls	r0, r1, #5
 80129b4:	69f9      	ldr	r1, [r7, #28]
 80129b6:	4401      	add	r1, r0
 80129b8:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80129bc:	4313      	orrs	r3, r2
 80129be:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 80129c0:	79fb      	ldrb	r3, [r7, #7]
 80129c2:	2b01      	cmp	r3, #1
 80129c4:	d10d      	bne.n	80129e2 <USB_EPStartXfer+0x406>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 80129c6:	68bb      	ldr	r3, [r7, #8]
 80129c8:	68db      	ldr	r3, [r3, #12]
 80129ca:	2b00      	cmp	r3, #0
 80129cc:	d009      	beq.n	80129e2 <USB_EPStartXfer+0x406>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 80129ce:	68bb      	ldr	r3, [r7, #8]
 80129d0:	68d9      	ldr	r1, [r3, #12]
 80129d2:	69bb      	ldr	r3, [r7, #24]
 80129d4:	015a      	lsls	r2, r3, #5
 80129d6:	69fb      	ldr	r3, [r7, #28]
 80129d8:	4413      	add	r3, r2
 80129da:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80129de:	460a      	mov	r2, r1
 80129e0:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 80129e2:	68bb      	ldr	r3, [r7, #8]
 80129e4:	78db      	ldrb	r3, [r3, #3]
 80129e6:	2b01      	cmp	r3, #1
 80129e8:	d128      	bne.n	8012a3c <USB_EPStartXfer+0x460>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80129ea:	69fb      	ldr	r3, [r7, #28]
 80129ec:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80129f0:	689b      	ldr	r3, [r3, #8]
 80129f2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80129f6:	2b00      	cmp	r3, #0
 80129f8:	d110      	bne.n	8012a1c <USB_EPStartXfer+0x440>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 80129fa:	69bb      	ldr	r3, [r7, #24]
 80129fc:	015a      	lsls	r2, r3, #5
 80129fe:	69fb      	ldr	r3, [r7, #28]
 8012a00:	4413      	add	r3, r2
 8012a02:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8012a06:	681b      	ldr	r3, [r3, #0]
 8012a08:	69ba      	ldr	r2, [r7, #24]
 8012a0a:	0151      	lsls	r1, r2, #5
 8012a0c:	69fa      	ldr	r2, [r7, #28]
 8012a0e:	440a      	add	r2, r1
 8012a10:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8012a14:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8012a18:	6013      	str	r3, [r2, #0]
 8012a1a:	e00f      	b.n	8012a3c <USB_EPStartXfer+0x460>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8012a1c:	69bb      	ldr	r3, [r7, #24]
 8012a1e:	015a      	lsls	r2, r3, #5
 8012a20:	69fb      	ldr	r3, [r7, #28]
 8012a22:	4413      	add	r3, r2
 8012a24:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8012a28:	681b      	ldr	r3, [r3, #0]
 8012a2a:	69ba      	ldr	r2, [r7, #24]
 8012a2c:	0151      	lsls	r1, r2, #5
 8012a2e:	69fa      	ldr	r2, [r7, #28]
 8012a30:	440a      	add	r2, r1
 8012a32:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8012a36:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8012a3a:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8012a3c:	69bb      	ldr	r3, [r7, #24]
 8012a3e:	015a      	lsls	r2, r3, #5
 8012a40:	69fb      	ldr	r3, [r7, #28]
 8012a42:	4413      	add	r3, r2
 8012a44:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8012a48:	681b      	ldr	r3, [r3, #0]
 8012a4a:	69ba      	ldr	r2, [r7, #24]
 8012a4c:	0151      	lsls	r1, r2, #5
 8012a4e:	69fa      	ldr	r2, [r7, #28]
 8012a50:	440a      	add	r2, r1
 8012a52:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8012a56:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8012a5a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8012a5c:	2300      	movs	r3, #0
}
 8012a5e:	4618      	mov	r0, r3
 8012a60:	3720      	adds	r7, #32
 8012a62:	46bd      	mov	sp, r7
 8012a64:	bd80      	pop	{r7, pc}
 8012a66:	bf00      	nop
 8012a68:	fff80000 	.word	0xfff80000
 8012a6c:	e007ffff 	.word	0xe007ffff
 8012a70:	1ff80000 	.word	0x1ff80000

08012a74 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8012a74:	b480      	push	{r7}
 8012a76:	b087      	sub	sp, #28
 8012a78:	af00      	add	r7, sp, #0
 8012a7a:	60f8      	str	r0, [r7, #12]
 8012a7c:	60b9      	str	r1, [r7, #8]
 8012a7e:	4613      	mov	r3, r2
 8012a80:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8012a82:	68fb      	ldr	r3, [r7, #12]
 8012a84:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 8012a86:	68bb      	ldr	r3, [r7, #8]
 8012a88:	781b      	ldrb	r3, [r3, #0]
 8012a8a:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8012a8c:	68bb      	ldr	r3, [r7, #8]
 8012a8e:	785b      	ldrb	r3, [r3, #1]
 8012a90:	2b01      	cmp	r3, #1
 8012a92:	f040 80cd 	bne.w	8012c30 <USB_EP0StartXfer+0x1bc>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8012a96:	68bb      	ldr	r3, [r7, #8]
 8012a98:	695b      	ldr	r3, [r3, #20]
 8012a9a:	2b00      	cmp	r3, #0
 8012a9c:	d132      	bne.n	8012b04 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8012a9e:	693b      	ldr	r3, [r7, #16]
 8012aa0:	015a      	lsls	r2, r3, #5
 8012aa2:	697b      	ldr	r3, [r7, #20]
 8012aa4:	4413      	add	r3, r2
 8012aa6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8012aaa:	691a      	ldr	r2, [r3, #16]
 8012aac:	693b      	ldr	r3, [r7, #16]
 8012aae:	0159      	lsls	r1, r3, #5
 8012ab0:	697b      	ldr	r3, [r7, #20]
 8012ab2:	440b      	add	r3, r1
 8012ab4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8012ab8:	4619      	mov	r1, r3
 8012aba:	4b98      	ldr	r3, [pc, #608]	; (8012d1c <USB_EP0StartXfer+0x2a8>)
 8012abc:	4013      	ands	r3, r2
 8012abe:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8012ac0:	693b      	ldr	r3, [r7, #16]
 8012ac2:	015a      	lsls	r2, r3, #5
 8012ac4:	697b      	ldr	r3, [r7, #20]
 8012ac6:	4413      	add	r3, r2
 8012ac8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8012acc:	691b      	ldr	r3, [r3, #16]
 8012ace:	693a      	ldr	r2, [r7, #16]
 8012ad0:	0151      	lsls	r1, r2, #5
 8012ad2:	697a      	ldr	r2, [r7, #20]
 8012ad4:	440a      	add	r2, r1
 8012ad6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8012ada:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8012ade:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8012ae0:	693b      	ldr	r3, [r7, #16]
 8012ae2:	015a      	lsls	r2, r3, #5
 8012ae4:	697b      	ldr	r3, [r7, #20]
 8012ae6:	4413      	add	r3, r2
 8012ae8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8012aec:	691a      	ldr	r2, [r3, #16]
 8012aee:	693b      	ldr	r3, [r7, #16]
 8012af0:	0159      	lsls	r1, r3, #5
 8012af2:	697b      	ldr	r3, [r7, #20]
 8012af4:	440b      	add	r3, r1
 8012af6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8012afa:	4619      	mov	r1, r3
 8012afc:	4b88      	ldr	r3, [pc, #544]	; (8012d20 <USB_EP0StartXfer+0x2ac>)
 8012afe:	4013      	ands	r3, r2
 8012b00:	610b      	str	r3, [r1, #16]
 8012b02:	e04e      	b.n	8012ba2 <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8012b04:	693b      	ldr	r3, [r7, #16]
 8012b06:	015a      	lsls	r2, r3, #5
 8012b08:	697b      	ldr	r3, [r7, #20]
 8012b0a:	4413      	add	r3, r2
 8012b0c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8012b10:	691a      	ldr	r2, [r3, #16]
 8012b12:	693b      	ldr	r3, [r7, #16]
 8012b14:	0159      	lsls	r1, r3, #5
 8012b16:	697b      	ldr	r3, [r7, #20]
 8012b18:	440b      	add	r3, r1
 8012b1a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8012b1e:	4619      	mov	r1, r3
 8012b20:	4b7f      	ldr	r3, [pc, #508]	; (8012d20 <USB_EP0StartXfer+0x2ac>)
 8012b22:	4013      	ands	r3, r2
 8012b24:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8012b26:	693b      	ldr	r3, [r7, #16]
 8012b28:	015a      	lsls	r2, r3, #5
 8012b2a:	697b      	ldr	r3, [r7, #20]
 8012b2c:	4413      	add	r3, r2
 8012b2e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8012b32:	691a      	ldr	r2, [r3, #16]
 8012b34:	693b      	ldr	r3, [r7, #16]
 8012b36:	0159      	lsls	r1, r3, #5
 8012b38:	697b      	ldr	r3, [r7, #20]
 8012b3a:	440b      	add	r3, r1
 8012b3c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8012b40:	4619      	mov	r1, r3
 8012b42:	4b76      	ldr	r3, [pc, #472]	; (8012d1c <USB_EP0StartXfer+0x2a8>)
 8012b44:	4013      	ands	r3, r2
 8012b46:	610b      	str	r3, [r1, #16]

      if (ep->xfer_len > ep->maxpacket)
 8012b48:	68bb      	ldr	r3, [r7, #8]
 8012b4a:	695a      	ldr	r2, [r3, #20]
 8012b4c:	68bb      	ldr	r3, [r7, #8]
 8012b4e:	689b      	ldr	r3, [r3, #8]
 8012b50:	429a      	cmp	r2, r3
 8012b52:	d903      	bls.n	8012b5c <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 8012b54:	68bb      	ldr	r3, [r7, #8]
 8012b56:	689a      	ldr	r2, [r3, #8]
 8012b58:	68bb      	ldr	r3, [r7, #8]
 8012b5a:	615a      	str	r2, [r3, #20]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8012b5c:	693b      	ldr	r3, [r7, #16]
 8012b5e:	015a      	lsls	r2, r3, #5
 8012b60:	697b      	ldr	r3, [r7, #20]
 8012b62:	4413      	add	r3, r2
 8012b64:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8012b68:	691b      	ldr	r3, [r3, #16]
 8012b6a:	693a      	ldr	r2, [r7, #16]
 8012b6c:	0151      	lsls	r1, r2, #5
 8012b6e:	697a      	ldr	r2, [r7, #20]
 8012b70:	440a      	add	r2, r1
 8012b72:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8012b76:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8012b7a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8012b7c:	693b      	ldr	r3, [r7, #16]
 8012b7e:	015a      	lsls	r2, r3, #5
 8012b80:	697b      	ldr	r3, [r7, #20]
 8012b82:	4413      	add	r3, r2
 8012b84:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8012b88:	691a      	ldr	r2, [r3, #16]
 8012b8a:	68bb      	ldr	r3, [r7, #8]
 8012b8c:	695b      	ldr	r3, [r3, #20]
 8012b8e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8012b92:	6939      	ldr	r1, [r7, #16]
 8012b94:	0148      	lsls	r0, r1, #5
 8012b96:	6979      	ldr	r1, [r7, #20]
 8012b98:	4401      	add	r1, r0
 8012b9a:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8012b9e:	4313      	orrs	r3, r2
 8012ba0:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8012ba2:	79fb      	ldrb	r3, [r7, #7]
 8012ba4:	2b01      	cmp	r3, #1
 8012ba6:	d11e      	bne.n	8012be6 <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8012ba8:	68bb      	ldr	r3, [r7, #8]
 8012baa:	691b      	ldr	r3, [r3, #16]
 8012bac:	2b00      	cmp	r3, #0
 8012bae:	d009      	beq.n	8012bc4 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8012bb0:	693b      	ldr	r3, [r7, #16]
 8012bb2:	015a      	lsls	r2, r3, #5
 8012bb4:	697b      	ldr	r3, [r7, #20]
 8012bb6:	4413      	add	r3, r2
 8012bb8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8012bbc:	461a      	mov	r2, r3
 8012bbe:	68bb      	ldr	r3, [r7, #8]
 8012bc0:	691b      	ldr	r3, [r3, #16]
 8012bc2:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8012bc4:	693b      	ldr	r3, [r7, #16]
 8012bc6:	015a      	lsls	r2, r3, #5
 8012bc8:	697b      	ldr	r3, [r7, #20]
 8012bca:	4413      	add	r3, r2
 8012bcc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8012bd0:	681b      	ldr	r3, [r3, #0]
 8012bd2:	693a      	ldr	r2, [r7, #16]
 8012bd4:	0151      	lsls	r1, r2, #5
 8012bd6:	697a      	ldr	r2, [r7, #20]
 8012bd8:	440a      	add	r2, r1
 8012bda:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8012bde:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8012be2:	6013      	str	r3, [r2, #0]
 8012be4:	e092      	b.n	8012d0c <USB_EP0StartXfer+0x298>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8012be6:	693b      	ldr	r3, [r7, #16]
 8012be8:	015a      	lsls	r2, r3, #5
 8012bea:	697b      	ldr	r3, [r7, #20]
 8012bec:	4413      	add	r3, r2
 8012bee:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8012bf2:	681b      	ldr	r3, [r3, #0]
 8012bf4:	693a      	ldr	r2, [r7, #16]
 8012bf6:	0151      	lsls	r1, r2, #5
 8012bf8:	697a      	ldr	r2, [r7, #20]
 8012bfa:	440a      	add	r2, r1
 8012bfc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8012c00:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8012c04:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 8012c06:	68bb      	ldr	r3, [r7, #8]
 8012c08:	695b      	ldr	r3, [r3, #20]
 8012c0a:	2b00      	cmp	r3, #0
 8012c0c:	d07e      	beq.n	8012d0c <USB_EP0StartXfer+0x298>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8012c0e:	697b      	ldr	r3, [r7, #20]
 8012c10:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8012c14:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8012c16:	68bb      	ldr	r3, [r7, #8]
 8012c18:	781b      	ldrb	r3, [r3, #0]
 8012c1a:	f003 030f 	and.w	r3, r3, #15
 8012c1e:	2101      	movs	r1, #1
 8012c20:	fa01 f303 	lsl.w	r3, r1, r3
 8012c24:	6979      	ldr	r1, [r7, #20]
 8012c26:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8012c2a:	4313      	orrs	r3, r2
 8012c2c:	634b      	str	r3, [r1, #52]	; 0x34
 8012c2e:	e06d      	b.n	8012d0c <USB_EP0StartXfer+0x298>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8012c30:	693b      	ldr	r3, [r7, #16]
 8012c32:	015a      	lsls	r2, r3, #5
 8012c34:	697b      	ldr	r3, [r7, #20]
 8012c36:	4413      	add	r3, r2
 8012c38:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8012c3c:	691a      	ldr	r2, [r3, #16]
 8012c3e:	693b      	ldr	r3, [r7, #16]
 8012c40:	0159      	lsls	r1, r3, #5
 8012c42:	697b      	ldr	r3, [r7, #20]
 8012c44:	440b      	add	r3, r1
 8012c46:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8012c4a:	4619      	mov	r1, r3
 8012c4c:	4b34      	ldr	r3, [pc, #208]	; (8012d20 <USB_EP0StartXfer+0x2ac>)
 8012c4e:	4013      	ands	r3, r2
 8012c50:	610b      	str	r3, [r1, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8012c52:	693b      	ldr	r3, [r7, #16]
 8012c54:	015a      	lsls	r2, r3, #5
 8012c56:	697b      	ldr	r3, [r7, #20]
 8012c58:	4413      	add	r3, r2
 8012c5a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8012c5e:	691a      	ldr	r2, [r3, #16]
 8012c60:	693b      	ldr	r3, [r7, #16]
 8012c62:	0159      	lsls	r1, r3, #5
 8012c64:	697b      	ldr	r3, [r7, #20]
 8012c66:	440b      	add	r3, r1
 8012c68:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8012c6c:	4619      	mov	r1, r3
 8012c6e:	4b2b      	ldr	r3, [pc, #172]	; (8012d1c <USB_EP0StartXfer+0x2a8>)
 8012c70:	4013      	ands	r3, r2
 8012c72:	610b      	str	r3, [r1, #16]

    if (ep->xfer_len > 0U)
 8012c74:	68bb      	ldr	r3, [r7, #8]
 8012c76:	695b      	ldr	r3, [r3, #20]
 8012c78:	2b00      	cmp	r3, #0
 8012c7a:	d003      	beq.n	8012c84 <USB_EP0StartXfer+0x210>
    {
      ep->xfer_len = ep->maxpacket;
 8012c7c:	68bb      	ldr	r3, [r7, #8]
 8012c7e:	689a      	ldr	r2, [r3, #8]
 8012c80:	68bb      	ldr	r3, [r7, #8]
 8012c82:	615a      	str	r2, [r3, #20]
    }

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8012c84:	693b      	ldr	r3, [r7, #16]
 8012c86:	015a      	lsls	r2, r3, #5
 8012c88:	697b      	ldr	r3, [r7, #20]
 8012c8a:	4413      	add	r3, r2
 8012c8c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8012c90:	691b      	ldr	r3, [r3, #16]
 8012c92:	693a      	ldr	r2, [r7, #16]
 8012c94:	0151      	lsls	r1, r2, #5
 8012c96:	697a      	ldr	r2, [r7, #20]
 8012c98:	440a      	add	r2, r1
 8012c9a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8012c9e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8012ca2:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 8012ca4:	693b      	ldr	r3, [r7, #16]
 8012ca6:	015a      	lsls	r2, r3, #5
 8012ca8:	697b      	ldr	r3, [r7, #20]
 8012caa:	4413      	add	r3, r2
 8012cac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8012cb0:	691a      	ldr	r2, [r3, #16]
 8012cb2:	68bb      	ldr	r3, [r7, #8]
 8012cb4:	689b      	ldr	r3, [r3, #8]
 8012cb6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8012cba:	6939      	ldr	r1, [r7, #16]
 8012cbc:	0148      	lsls	r0, r1, #5
 8012cbe:	6979      	ldr	r1, [r7, #20]
 8012cc0:	4401      	add	r1, r0
 8012cc2:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8012cc6:	4313      	orrs	r3, r2
 8012cc8:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 8012cca:	79fb      	ldrb	r3, [r7, #7]
 8012ccc:	2b01      	cmp	r3, #1
 8012cce:	d10d      	bne.n	8012cec <USB_EP0StartXfer+0x278>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8012cd0:	68bb      	ldr	r3, [r7, #8]
 8012cd2:	68db      	ldr	r3, [r3, #12]
 8012cd4:	2b00      	cmp	r3, #0
 8012cd6:	d009      	beq.n	8012cec <USB_EP0StartXfer+0x278>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8012cd8:	68bb      	ldr	r3, [r7, #8]
 8012cda:	68d9      	ldr	r1, [r3, #12]
 8012cdc:	693b      	ldr	r3, [r7, #16]
 8012cde:	015a      	lsls	r2, r3, #5
 8012ce0:	697b      	ldr	r3, [r7, #20]
 8012ce2:	4413      	add	r3, r2
 8012ce4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8012ce8:	460a      	mov	r2, r1
 8012cea:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8012cec:	693b      	ldr	r3, [r7, #16]
 8012cee:	015a      	lsls	r2, r3, #5
 8012cf0:	697b      	ldr	r3, [r7, #20]
 8012cf2:	4413      	add	r3, r2
 8012cf4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8012cf8:	681b      	ldr	r3, [r3, #0]
 8012cfa:	693a      	ldr	r2, [r7, #16]
 8012cfc:	0151      	lsls	r1, r2, #5
 8012cfe:	697a      	ldr	r2, [r7, #20]
 8012d00:	440a      	add	r2, r1
 8012d02:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8012d06:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8012d0a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8012d0c:	2300      	movs	r3, #0
}
 8012d0e:	4618      	mov	r0, r3
 8012d10:	371c      	adds	r7, #28
 8012d12:	46bd      	mov	sp, r7
 8012d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012d18:	4770      	bx	lr
 8012d1a:	bf00      	nop
 8012d1c:	e007ffff 	.word	0xe007ffff
 8012d20:	fff80000 	.word	0xfff80000

08012d24 <USB_WritePacket>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src, uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8012d24:	b480      	push	{r7}
 8012d26:	b089      	sub	sp, #36	; 0x24
 8012d28:	af00      	add	r7, sp, #0
 8012d2a:	60f8      	str	r0, [r7, #12]
 8012d2c:	60b9      	str	r1, [r7, #8]
 8012d2e:	4611      	mov	r1, r2
 8012d30:	461a      	mov	r2, r3
 8012d32:	460b      	mov	r3, r1
 8012d34:	71fb      	strb	r3, [r7, #7]
 8012d36:	4613      	mov	r3, r2
 8012d38:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8012d3a:	68fb      	ldr	r3, [r7, #12]
 8012d3c:	617b      	str	r3, [r7, #20]
  uint32_t *pSrc = (uint32_t *)src;
 8012d3e:	68bb      	ldr	r3, [r7, #8]
 8012d40:	61fb      	str	r3, [r7, #28]
  uint32_t count32b, i;

  if (dma == 0U)
 8012d42:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8012d46:	2b00      	cmp	r3, #0
 8012d48:	d11a      	bne.n	8012d80 <USB_WritePacket+0x5c>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8012d4a:	88bb      	ldrh	r3, [r7, #4]
 8012d4c:	3303      	adds	r3, #3
 8012d4e:	089b      	lsrs	r3, r3, #2
 8012d50:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8012d52:	2300      	movs	r3, #0
 8012d54:	61bb      	str	r3, [r7, #24]
 8012d56:	e00f      	b.n	8012d78 <USB_WritePacket+0x54>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8012d58:	79fb      	ldrb	r3, [r7, #7]
 8012d5a:	031a      	lsls	r2, r3, #12
 8012d5c:	697b      	ldr	r3, [r7, #20]
 8012d5e:	4413      	add	r3, r2
 8012d60:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8012d64:	461a      	mov	r2, r3
 8012d66:	69fb      	ldr	r3, [r7, #28]
 8012d68:	681b      	ldr	r3, [r3, #0]
 8012d6a:	6013      	str	r3, [r2, #0]
      pSrc++;
 8012d6c:	69fb      	ldr	r3, [r7, #28]
 8012d6e:	3304      	adds	r3, #4
 8012d70:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8012d72:	69bb      	ldr	r3, [r7, #24]
 8012d74:	3301      	adds	r3, #1
 8012d76:	61bb      	str	r3, [r7, #24]
 8012d78:	69ba      	ldr	r2, [r7, #24]
 8012d7a:	693b      	ldr	r3, [r7, #16]
 8012d7c:	429a      	cmp	r2, r3
 8012d7e:	d3eb      	bcc.n	8012d58 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8012d80:	2300      	movs	r3, #0
}
 8012d82:	4618      	mov	r0, r3
 8012d84:	3724      	adds	r7, #36	; 0x24
 8012d86:	46bd      	mov	sp, r7
 8012d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012d8c:	4770      	bx	lr

08012d8e <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8012d8e:	b480      	push	{r7}
 8012d90:	b089      	sub	sp, #36	; 0x24
 8012d92:	af00      	add	r7, sp, #0
 8012d94:	60f8      	str	r0, [r7, #12]
 8012d96:	60b9      	str	r1, [r7, #8]
 8012d98:	4613      	mov	r3, r2
 8012d9a:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8012d9c:	68fb      	ldr	r3, [r7, #12]
 8012d9e:	617b      	str	r3, [r7, #20]
  uint32_t *pDest = (uint32_t *)dest;
 8012da0:	68bb      	ldr	r3, [r7, #8]
 8012da2:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 8012da4:	88fb      	ldrh	r3, [r7, #6]
 8012da6:	3303      	adds	r3, #3
 8012da8:	089b      	lsrs	r3, r3, #2
 8012daa:	613b      	str	r3, [r7, #16]

  for (i = 0U; i < count32b; i++)
 8012dac:	2300      	movs	r3, #0
 8012dae:	61bb      	str	r3, [r7, #24]
 8012db0:	e00b      	b.n	8012dca <USB_ReadPacket+0x3c>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8012db2:	697b      	ldr	r3, [r7, #20]
 8012db4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8012db8:	681a      	ldr	r2, [r3, #0]
 8012dba:	69fb      	ldr	r3, [r7, #28]
 8012dbc:	601a      	str	r2, [r3, #0]
    pDest++;
 8012dbe:	69fb      	ldr	r3, [r7, #28]
 8012dc0:	3304      	adds	r3, #4
 8012dc2:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 8012dc4:	69bb      	ldr	r3, [r7, #24]
 8012dc6:	3301      	adds	r3, #1
 8012dc8:	61bb      	str	r3, [r7, #24]
 8012dca:	69ba      	ldr	r2, [r7, #24]
 8012dcc:	693b      	ldr	r3, [r7, #16]
 8012dce:	429a      	cmp	r2, r3
 8012dd0:	d3ef      	bcc.n	8012db2 <USB_ReadPacket+0x24>
  }

  return ((void *)pDest);
 8012dd2:	69fb      	ldr	r3, [r7, #28]
}
 8012dd4:	4618      	mov	r0, r3
 8012dd6:	3724      	adds	r7, #36	; 0x24
 8012dd8:	46bd      	mov	sp, r7
 8012dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012dde:	4770      	bx	lr

08012de0 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8012de0:	b480      	push	{r7}
 8012de2:	b085      	sub	sp, #20
 8012de4:	af00      	add	r7, sp, #0
 8012de6:	6078      	str	r0, [r7, #4]
 8012de8:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8012dea:	687b      	ldr	r3, [r7, #4]
 8012dec:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8012dee:	683b      	ldr	r3, [r7, #0]
 8012df0:	781b      	ldrb	r3, [r3, #0]
 8012df2:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8012df4:	683b      	ldr	r3, [r7, #0]
 8012df6:	785b      	ldrb	r3, [r3, #1]
 8012df8:	2b01      	cmp	r3, #1
 8012dfa:	d12c      	bne.n	8012e56 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8012dfc:	68bb      	ldr	r3, [r7, #8]
 8012dfe:	015a      	lsls	r2, r3, #5
 8012e00:	68fb      	ldr	r3, [r7, #12]
 8012e02:	4413      	add	r3, r2
 8012e04:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8012e08:	681b      	ldr	r3, [r3, #0]
 8012e0a:	2b00      	cmp	r3, #0
 8012e0c:	db12      	blt.n	8012e34 <USB_EPSetStall+0x54>
 8012e0e:	68bb      	ldr	r3, [r7, #8]
 8012e10:	2b00      	cmp	r3, #0
 8012e12:	d00f      	beq.n	8012e34 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8012e14:	68bb      	ldr	r3, [r7, #8]
 8012e16:	015a      	lsls	r2, r3, #5
 8012e18:	68fb      	ldr	r3, [r7, #12]
 8012e1a:	4413      	add	r3, r2
 8012e1c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8012e20:	681b      	ldr	r3, [r3, #0]
 8012e22:	68ba      	ldr	r2, [r7, #8]
 8012e24:	0151      	lsls	r1, r2, #5
 8012e26:	68fa      	ldr	r2, [r7, #12]
 8012e28:	440a      	add	r2, r1
 8012e2a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8012e2e:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8012e32:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8012e34:	68bb      	ldr	r3, [r7, #8]
 8012e36:	015a      	lsls	r2, r3, #5
 8012e38:	68fb      	ldr	r3, [r7, #12]
 8012e3a:	4413      	add	r3, r2
 8012e3c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8012e40:	681b      	ldr	r3, [r3, #0]
 8012e42:	68ba      	ldr	r2, [r7, #8]
 8012e44:	0151      	lsls	r1, r2, #5
 8012e46:	68fa      	ldr	r2, [r7, #12]
 8012e48:	440a      	add	r2, r1
 8012e4a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8012e4e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8012e52:	6013      	str	r3, [r2, #0]
 8012e54:	e02b      	b.n	8012eae <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8012e56:	68bb      	ldr	r3, [r7, #8]
 8012e58:	015a      	lsls	r2, r3, #5
 8012e5a:	68fb      	ldr	r3, [r7, #12]
 8012e5c:	4413      	add	r3, r2
 8012e5e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8012e62:	681b      	ldr	r3, [r3, #0]
 8012e64:	2b00      	cmp	r3, #0
 8012e66:	db12      	blt.n	8012e8e <USB_EPSetStall+0xae>
 8012e68:	68bb      	ldr	r3, [r7, #8]
 8012e6a:	2b00      	cmp	r3, #0
 8012e6c:	d00f      	beq.n	8012e8e <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8012e6e:	68bb      	ldr	r3, [r7, #8]
 8012e70:	015a      	lsls	r2, r3, #5
 8012e72:	68fb      	ldr	r3, [r7, #12]
 8012e74:	4413      	add	r3, r2
 8012e76:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8012e7a:	681b      	ldr	r3, [r3, #0]
 8012e7c:	68ba      	ldr	r2, [r7, #8]
 8012e7e:	0151      	lsls	r1, r2, #5
 8012e80:	68fa      	ldr	r2, [r7, #12]
 8012e82:	440a      	add	r2, r1
 8012e84:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8012e88:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8012e8c:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8012e8e:	68bb      	ldr	r3, [r7, #8]
 8012e90:	015a      	lsls	r2, r3, #5
 8012e92:	68fb      	ldr	r3, [r7, #12]
 8012e94:	4413      	add	r3, r2
 8012e96:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8012e9a:	681b      	ldr	r3, [r3, #0]
 8012e9c:	68ba      	ldr	r2, [r7, #8]
 8012e9e:	0151      	lsls	r1, r2, #5
 8012ea0:	68fa      	ldr	r2, [r7, #12]
 8012ea2:	440a      	add	r2, r1
 8012ea4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8012ea8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8012eac:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8012eae:	2300      	movs	r3, #0
}
 8012eb0:	4618      	mov	r0, r3
 8012eb2:	3714      	adds	r7, #20
 8012eb4:	46bd      	mov	sp, r7
 8012eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012eba:	4770      	bx	lr

08012ebc <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8012ebc:	b480      	push	{r7}
 8012ebe:	b085      	sub	sp, #20
 8012ec0:	af00      	add	r7, sp, #0
 8012ec2:	6078      	str	r0, [r7, #4]
 8012ec4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8012ec6:	687b      	ldr	r3, [r7, #4]
 8012ec8:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8012eca:	683b      	ldr	r3, [r7, #0]
 8012ecc:	781b      	ldrb	r3, [r3, #0]
 8012ece:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8012ed0:	683b      	ldr	r3, [r7, #0]
 8012ed2:	785b      	ldrb	r3, [r3, #1]
 8012ed4:	2b01      	cmp	r3, #1
 8012ed6:	d128      	bne.n	8012f2a <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8012ed8:	68bb      	ldr	r3, [r7, #8]
 8012eda:	015a      	lsls	r2, r3, #5
 8012edc:	68fb      	ldr	r3, [r7, #12]
 8012ede:	4413      	add	r3, r2
 8012ee0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8012ee4:	681b      	ldr	r3, [r3, #0]
 8012ee6:	68ba      	ldr	r2, [r7, #8]
 8012ee8:	0151      	lsls	r1, r2, #5
 8012eea:	68fa      	ldr	r2, [r7, #12]
 8012eec:	440a      	add	r2, r1
 8012eee:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8012ef2:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8012ef6:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8012ef8:	683b      	ldr	r3, [r7, #0]
 8012efa:	78db      	ldrb	r3, [r3, #3]
 8012efc:	2b03      	cmp	r3, #3
 8012efe:	d003      	beq.n	8012f08 <USB_EPClearStall+0x4c>
 8012f00:	683b      	ldr	r3, [r7, #0]
 8012f02:	78db      	ldrb	r3, [r3, #3]
 8012f04:	2b02      	cmp	r3, #2
 8012f06:	d138      	bne.n	8012f7a <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8012f08:	68bb      	ldr	r3, [r7, #8]
 8012f0a:	015a      	lsls	r2, r3, #5
 8012f0c:	68fb      	ldr	r3, [r7, #12]
 8012f0e:	4413      	add	r3, r2
 8012f10:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8012f14:	681b      	ldr	r3, [r3, #0]
 8012f16:	68ba      	ldr	r2, [r7, #8]
 8012f18:	0151      	lsls	r1, r2, #5
 8012f1a:	68fa      	ldr	r2, [r7, #12]
 8012f1c:	440a      	add	r2, r1
 8012f1e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8012f22:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8012f26:	6013      	str	r3, [r2, #0]
 8012f28:	e027      	b.n	8012f7a <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8012f2a:	68bb      	ldr	r3, [r7, #8]
 8012f2c:	015a      	lsls	r2, r3, #5
 8012f2e:	68fb      	ldr	r3, [r7, #12]
 8012f30:	4413      	add	r3, r2
 8012f32:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8012f36:	681b      	ldr	r3, [r3, #0]
 8012f38:	68ba      	ldr	r2, [r7, #8]
 8012f3a:	0151      	lsls	r1, r2, #5
 8012f3c:	68fa      	ldr	r2, [r7, #12]
 8012f3e:	440a      	add	r2, r1
 8012f40:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8012f44:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8012f48:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8012f4a:	683b      	ldr	r3, [r7, #0]
 8012f4c:	78db      	ldrb	r3, [r3, #3]
 8012f4e:	2b03      	cmp	r3, #3
 8012f50:	d003      	beq.n	8012f5a <USB_EPClearStall+0x9e>
 8012f52:	683b      	ldr	r3, [r7, #0]
 8012f54:	78db      	ldrb	r3, [r3, #3]
 8012f56:	2b02      	cmp	r3, #2
 8012f58:	d10f      	bne.n	8012f7a <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8012f5a:	68bb      	ldr	r3, [r7, #8]
 8012f5c:	015a      	lsls	r2, r3, #5
 8012f5e:	68fb      	ldr	r3, [r7, #12]
 8012f60:	4413      	add	r3, r2
 8012f62:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8012f66:	681b      	ldr	r3, [r3, #0]
 8012f68:	68ba      	ldr	r2, [r7, #8]
 8012f6a:	0151      	lsls	r1, r2, #5
 8012f6c:	68fa      	ldr	r2, [r7, #12]
 8012f6e:	440a      	add	r2, r1
 8012f70:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8012f74:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8012f78:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8012f7a:	2300      	movs	r3, #0
}
 8012f7c:	4618      	mov	r0, r3
 8012f7e:	3714      	adds	r7, #20
 8012f80:	46bd      	mov	sp, r7
 8012f82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012f86:	4770      	bx	lr

08012f88 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8012f88:	b480      	push	{r7}
 8012f8a:	b085      	sub	sp, #20
 8012f8c:	af00      	add	r7, sp, #0
 8012f8e:	6078      	str	r0, [r7, #4]
 8012f90:	460b      	mov	r3, r1
 8012f92:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8012f94:	687b      	ldr	r3, [r7, #4]
 8012f96:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8012f98:	68fb      	ldr	r3, [r7, #12]
 8012f9a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8012f9e:	681b      	ldr	r3, [r3, #0]
 8012fa0:	68fa      	ldr	r2, [r7, #12]
 8012fa2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8012fa6:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8012faa:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8012fac:	68fb      	ldr	r3, [r7, #12]
 8012fae:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8012fb2:	681a      	ldr	r2, [r3, #0]
 8012fb4:	78fb      	ldrb	r3, [r7, #3]
 8012fb6:	011b      	lsls	r3, r3, #4
 8012fb8:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8012fbc:	68f9      	ldr	r1, [r7, #12]
 8012fbe:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8012fc2:	4313      	orrs	r3, r2
 8012fc4:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8012fc6:	2300      	movs	r3, #0
}
 8012fc8:	4618      	mov	r0, r3
 8012fca:	3714      	adds	r7, #20
 8012fcc:	46bd      	mov	sp, r7
 8012fce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012fd2:	4770      	bx	lr

08012fd4 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 8012fd4:	b580      	push	{r7, lr}
 8012fd6:	b084      	sub	sp, #16
 8012fd8:	af00      	add	r7, sp, #0
 8012fda:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8012fdc:	687b      	ldr	r3, [r7, #4]
 8012fde:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8012fe0:	68fb      	ldr	r3, [r7, #12]
 8012fe2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8012fe6:	685b      	ldr	r3, [r3, #4]
 8012fe8:	68fa      	ldr	r2, [r7, #12]
 8012fea:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8012fee:	f023 0302 	bic.w	r3, r3, #2
 8012ff2:	6053      	str	r3, [r2, #4]
  HAL_Delay(3U);
 8012ff4:	2003      	movs	r0, #3
 8012ff6:	f7f1 fb6f 	bl	80046d8 <HAL_Delay>

  return HAL_OK;
 8012ffa:	2300      	movs	r3, #0
}
 8012ffc:	4618      	mov	r0, r3
 8012ffe:	3710      	adds	r7, #16
 8013000:	46bd      	mov	sp, r7
 8013002:	bd80      	pop	{r7, pc}

08013004 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8013004:	b580      	push	{r7, lr}
 8013006:	b084      	sub	sp, #16
 8013008:	af00      	add	r7, sp, #0
 801300a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801300c:	687b      	ldr	r3, [r7, #4]
 801300e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8013010:	68fb      	ldr	r3, [r7, #12]
 8013012:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8013016:	685b      	ldr	r3, [r3, #4]
 8013018:	68fa      	ldr	r2, [r7, #12]
 801301a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 801301e:	f043 0302 	orr.w	r3, r3, #2
 8013022:	6053      	str	r3, [r2, #4]
  HAL_Delay(3U);
 8013024:	2003      	movs	r0, #3
 8013026:	f7f1 fb57 	bl	80046d8 <HAL_Delay>

  return HAL_OK;
 801302a:	2300      	movs	r3, #0
}
 801302c:	4618      	mov	r0, r3
 801302e:	3710      	adds	r7, #16
 8013030:	46bd      	mov	sp, r7
 8013032:	bd80      	pop	{r7, pc}

08013034 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8013034:	b480      	push	{r7}
 8013036:	b085      	sub	sp, #20
 8013038:	af00      	add	r7, sp, #0
 801303a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 801303c:	687b      	ldr	r3, [r7, #4]
 801303e:	695b      	ldr	r3, [r3, #20]
 8013040:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8013042:	687b      	ldr	r3, [r7, #4]
 8013044:	699b      	ldr	r3, [r3, #24]
 8013046:	68fa      	ldr	r2, [r7, #12]
 8013048:	4013      	ands	r3, r2
 801304a:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 801304c:	68fb      	ldr	r3, [r7, #12]
}
 801304e:	4618      	mov	r0, r3
 8013050:	3714      	adds	r7, #20
 8013052:	46bd      	mov	sp, r7
 8013054:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013058:	4770      	bx	lr

0801305a <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 801305a:	b480      	push	{r7}
 801305c:	b085      	sub	sp, #20
 801305e:	af00      	add	r7, sp, #0
 8013060:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8013062:	687b      	ldr	r3, [r7, #4]
 8013064:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8013066:	68fb      	ldr	r3, [r7, #12]
 8013068:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801306c:	699b      	ldr	r3, [r3, #24]
 801306e:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8013070:	68fb      	ldr	r3, [r7, #12]
 8013072:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8013076:	69db      	ldr	r3, [r3, #28]
 8013078:	68ba      	ldr	r2, [r7, #8]
 801307a:	4013      	ands	r3, r2
 801307c:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 801307e:	68bb      	ldr	r3, [r7, #8]
 8013080:	0c1b      	lsrs	r3, r3, #16
}
 8013082:	4618      	mov	r0, r3
 8013084:	3714      	adds	r7, #20
 8013086:	46bd      	mov	sp, r7
 8013088:	f85d 7b04 	ldr.w	r7, [sp], #4
 801308c:	4770      	bx	lr

0801308e <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 801308e:	b480      	push	{r7}
 8013090:	b085      	sub	sp, #20
 8013092:	af00      	add	r7, sp, #0
 8013094:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8013096:	687b      	ldr	r3, [r7, #4]
 8013098:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 801309a:	68fb      	ldr	r3, [r7, #12]
 801309c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80130a0:	699b      	ldr	r3, [r3, #24]
 80130a2:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80130a4:	68fb      	ldr	r3, [r7, #12]
 80130a6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80130aa:	69db      	ldr	r3, [r3, #28]
 80130ac:	68ba      	ldr	r2, [r7, #8]
 80130ae:	4013      	ands	r3, r2
 80130b0:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 80130b2:	68bb      	ldr	r3, [r7, #8]
 80130b4:	b29b      	uxth	r3, r3
}
 80130b6:	4618      	mov	r0, r3
 80130b8:	3714      	adds	r7, #20
 80130ba:	46bd      	mov	sp, r7
 80130bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80130c0:	4770      	bx	lr

080130c2 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80130c2:	b480      	push	{r7}
 80130c4:	b085      	sub	sp, #20
 80130c6:	af00      	add	r7, sp, #0
 80130c8:	6078      	str	r0, [r7, #4]
 80130ca:	460b      	mov	r3, r1
 80130cc:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80130ce:	687b      	ldr	r3, [r7, #4]
 80130d0:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 80130d2:	78fb      	ldrb	r3, [r7, #3]
 80130d4:	015a      	lsls	r2, r3, #5
 80130d6:	68fb      	ldr	r3, [r7, #12]
 80130d8:	4413      	add	r3, r2
 80130da:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80130de:	689b      	ldr	r3, [r3, #8]
 80130e0:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 80130e2:	68fb      	ldr	r3, [r7, #12]
 80130e4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80130e8:	695b      	ldr	r3, [r3, #20]
 80130ea:	68ba      	ldr	r2, [r7, #8]
 80130ec:	4013      	ands	r3, r2
 80130ee:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80130f0:	68bb      	ldr	r3, [r7, #8]
}
 80130f2:	4618      	mov	r0, r3
 80130f4:	3714      	adds	r7, #20
 80130f6:	46bd      	mov	sp, r7
 80130f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80130fc:	4770      	bx	lr

080130fe <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80130fe:	b480      	push	{r7}
 8013100:	b087      	sub	sp, #28
 8013102:	af00      	add	r7, sp, #0
 8013104:	6078      	str	r0, [r7, #4]
 8013106:	460b      	mov	r3, r1
 8013108:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801310a:	687b      	ldr	r3, [r7, #4]
 801310c:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg, msk, emp;

  msk = USBx_DEVICE->DIEPMSK;
 801310e:	697b      	ldr	r3, [r7, #20]
 8013110:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8013114:	691b      	ldr	r3, [r3, #16]
 8013116:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8013118:	697b      	ldr	r3, [r7, #20]
 801311a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801311e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8013120:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8013122:	78fb      	ldrb	r3, [r7, #3]
 8013124:	f003 030f 	and.w	r3, r3, #15
 8013128:	68fa      	ldr	r2, [r7, #12]
 801312a:	fa22 f303 	lsr.w	r3, r2, r3
 801312e:	01db      	lsls	r3, r3, #7
 8013130:	b2db      	uxtb	r3, r3
 8013132:	693a      	ldr	r2, [r7, #16]
 8013134:	4313      	orrs	r3, r2
 8013136:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8013138:	78fb      	ldrb	r3, [r7, #3]
 801313a:	015a      	lsls	r2, r3, #5
 801313c:	697b      	ldr	r3, [r7, #20]
 801313e:	4413      	add	r3, r2
 8013140:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013144:	689b      	ldr	r3, [r3, #8]
 8013146:	693a      	ldr	r2, [r7, #16]
 8013148:	4013      	ands	r3, r2
 801314a:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 801314c:	68bb      	ldr	r3, [r7, #8]
}
 801314e:	4618      	mov	r0, r3
 8013150:	371c      	adds	r7, #28
 8013152:	46bd      	mov	sp, r7
 8013154:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013158:	4770      	bx	lr

0801315a <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 801315a:	b480      	push	{r7}
 801315c:	b083      	sub	sp, #12
 801315e:	af00      	add	r7, sp, #0
 8013160:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8013162:	687b      	ldr	r3, [r7, #4]
 8013164:	695b      	ldr	r3, [r3, #20]
 8013166:	f003 0301 	and.w	r3, r3, #1
}
 801316a:	4618      	mov	r0, r3
 801316c:	370c      	adds	r7, #12
 801316e:	46bd      	mov	sp, r7
 8013170:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013174:	4770      	bx	lr
	...

08013178 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 8013178:	b480      	push	{r7}
 801317a:	b085      	sub	sp, #20
 801317c:	af00      	add	r7, sp, #0
 801317e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8013180:	687b      	ldr	r3, [r7, #4]
 8013182:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8013184:	68fb      	ldr	r3, [r7, #12]
 8013186:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801318a:	681a      	ldr	r2, [r3, #0]
 801318c:	68fb      	ldr	r3, [r7, #12]
 801318e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013192:	4619      	mov	r1, r3
 8013194:	4b09      	ldr	r3, [pc, #36]	; (80131bc <USB_ActivateSetup+0x44>)
 8013196:	4013      	ands	r3, r2
 8013198:	600b      	str	r3, [r1, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 801319a:	68fb      	ldr	r3, [r7, #12]
 801319c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80131a0:	685b      	ldr	r3, [r3, #4]
 80131a2:	68fa      	ldr	r2, [r7, #12]
 80131a4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80131a8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80131ac:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80131ae:	2300      	movs	r3, #0
}
 80131b0:	4618      	mov	r0, r3
 80131b2:	3714      	adds	r7, #20
 80131b4:	46bd      	mov	sp, r7
 80131b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80131ba:	4770      	bx	lr
 80131bc:	fffff800 	.word	0xfffff800

080131c0 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 80131c0:	b480      	push	{r7}
 80131c2:	b087      	sub	sp, #28
 80131c4:	af00      	add	r7, sp, #0
 80131c6:	60f8      	str	r0, [r7, #12]
 80131c8:	460b      	mov	r3, r1
 80131ca:	607a      	str	r2, [r7, #4]
 80131cc:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80131ce:	68fb      	ldr	r3, [r7, #12]
 80131d0:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80131d2:	68fb      	ldr	r3, [r7, #12]
 80131d4:	333c      	adds	r3, #60	; 0x3c
 80131d6:	3304      	adds	r3, #4
 80131d8:	681b      	ldr	r3, [r3, #0]
 80131da:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 80131dc:	693b      	ldr	r3, [r7, #16]
 80131de:	4a26      	ldr	r2, [pc, #152]	; (8013278 <USB_EP0_OutStart+0xb8>)
 80131e0:	4293      	cmp	r3, r2
 80131e2:	d90a      	bls.n	80131fa <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80131e4:	697b      	ldr	r3, [r7, #20]
 80131e6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80131ea:	681b      	ldr	r3, [r3, #0]
 80131ec:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80131f0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80131f4:	d101      	bne.n	80131fa <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 80131f6:	2300      	movs	r3, #0
 80131f8:	e037      	b.n	801326a <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 80131fa:	697b      	ldr	r3, [r7, #20]
 80131fc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8013200:	461a      	mov	r2, r3
 8013202:	2300      	movs	r3, #0
 8013204:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8013206:	697b      	ldr	r3, [r7, #20]
 8013208:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801320c:	691b      	ldr	r3, [r3, #16]
 801320e:	697a      	ldr	r2, [r7, #20]
 8013210:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8013214:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8013218:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 801321a:	697b      	ldr	r3, [r7, #20]
 801321c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8013220:	691b      	ldr	r3, [r3, #16]
 8013222:	697a      	ldr	r2, [r7, #20]
 8013224:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8013228:	f043 0318 	orr.w	r3, r3, #24
 801322c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 801322e:	697b      	ldr	r3, [r7, #20]
 8013230:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8013234:	691b      	ldr	r3, [r3, #16]
 8013236:	697a      	ldr	r2, [r7, #20]
 8013238:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 801323c:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8013240:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8013242:	7afb      	ldrb	r3, [r7, #11]
 8013244:	2b01      	cmp	r3, #1
 8013246:	d10f      	bne.n	8013268 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8013248:	697b      	ldr	r3, [r7, #20]
 801324a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801324e:	461a      	mov	r2, r3
 8013250:	687b      	ldr	r3, [r7, #4]
 8013252:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8013254:	697b      	ldr	r3, [r7, #20]
 8013256:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801325a:	681b      	ldr	r3, [r3, #0]
 801325c:	697a      	ldr	r2, [r7, #20]
 801325e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8013262:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 8013266:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8013268:	2300      	movs	r3, #0
}
 801326a:	4618      	mov	r0, r3
 801326c:	371c      	adds	r7, #28
 801326e:	46bd      	mov	sp, r7
 8013270:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013274:	4770      	bx	lr
 8013276:	bf00      	nop
 8013278:	4f54300a 	.word	0x4f54300a

0801327c <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 801327c:	b480      	push	{r7}
 801327e:	b085      	sub	sp, #20
 8013280:	af00      	add	r7, sp, #0
 8013282:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 8013284:	2300      	movs	r3, #0
 8013286:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8013288:	68fb      	ldr	r3, [r7, #12]
 801328a:	3301      	adds	r3, #1
 801328c:	60fb      	str	r3, [r7, #12]
 801328e:	68fb      	ldr	r3, [r7, #12]
 8013290:	4a13      	ldr	r2, [pc, #76]	; (80132e0 <USB_CoreReset+0x64>)
 8013292:	4293      	cmp	r3, r2
 8013294:	d901      	bls.n	801329a <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8013296:	2303      	movs	r3, #3
 8013298:	e01b      	b.n	80132d2 <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 801329a:	687b      	ldr	r3, [r7, #4]
 801329c:	691b      	ldr	r3, [r3, #16]
 801329e:	2b00      	cmp	r3, #0
 80132a0:	daf2      	bge.n	8013288 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80132a2:	2300      	movs	r3, #0
 80132a4:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80132a6:	687b      	ldr	r3, [r7, #4]
 80132a8:	691b      	ldr	r3, [r3, #16]
 80132aa:	f043 0201 	orr.w	r2, r3, #1
 80132ae:	687b      	ldr	r3, [r7, #4]
 80132b0:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80132b2:	68fb      	ldr	r3, [r7, #12]
 80132b4:	3301      	adds	r3, #1
 80132b6:	60fb      	str	r3, [r7, #12]
 80132b8:	68fb      	ldr	r3, [r7, #12]
 80132ba:	4a09      	ldr	r2, [pc, #36]	; (80132e0 <USB_CoreReset+0x64>)
 80132bc:	4293      	cmp	r3, r2
 80132be:	d901      	bls.n	80132c4 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 80132c0:	2303      	movs	r3, #3
 80132c2:	e006      	b.n	80132d2 <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80132c4:	687b      	ldr	r3, [r7, #4]
 80132c6:	691b      	ldr	r3, [r3, #16]
 80132c8:	f003 0301 	and.w	r3, r3, #1
 80132cc:	2b01      	cmp	r3, #1
 80132ce:	d0f0      	beq.n	80132b2 <USB_CoreReset+0x36>

  return HAL_OK;
 80132d0:	2300      	movs	r3, #0
}
 80132d2:	4618      	mov	r0, r3
 80132d4:	3714      	adds	r7, #20
 80132d6:	46bd      	mov	sp, r7
 80132d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80132dc:	4770      	bx	lr
 80132de:	bf00      	nop
 80132e0:	00030d40 	.word	0x00030d40

080132e4 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 80132e4:	b580      	push	{r7, lr}
 80132e6:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 80132e8:	4904      	ldr	r1, [pc, #16]	; (80132fc <MX_FATFS_Init+0x18>)
 80132ea:	4805      	ldr	r0, [pc, #20]	; (8013300 <MX_FATFS_Init+0x1c>)
 80132ec:	f005 fbec 	bl	8018ac8 <FATFS_LinkDriver>
 80132f0:	4603      	mov	r3, r0
 80132f2:	461a      	mov	r2, r3
 80132f4:	4b03      	ldr	r3, [pc, #12]	; (8013304 <MX_FATFS_Init+0x20>)
 80132f6:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 80132f8:	bf00      	nop
 80132fa:	bd80      	pop	{r7, pc}
 80132fc:	24001770 	.word	0x24001770
 8013300:	0801b03c 	.word	0x0801b03c
 8013304:	2400176c 	.word	0x2400176c

08013308 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 8013308:	b480      	push	{r7}
 801330a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 801330c:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 801330e:	4618      	mov	r0, r3
 8013310:	46bd      	mov	sp, r7
 8013312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013316:	4770      	bx	lr

08013318 <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 8013318:	b580      	push	{r7, lr}
 801331a:	b082      	sub	sp, #8
 801331c:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 801331e:	2300      	movs	r3, #0
 8013320:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 8013322:	f000 f885 	bl	8013430 <BSP_SD_IsDetected>
 8013326:	4603      	mov	r3, r0
 8013328:	2b01      	cmp	r3, #1
 801332a:	d001      	beq.n	8013330 <BSP_SD_Init+0x18>
  {
    return MSD_ERROR_SD_NOT_PRESENT;
 801332c:	2302      	movs	r3, #2
 801332e:	e012      	b.n	8013356 <BSP_SD_Init+0x3e>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd1);
 8013330:	480b      	ldr	r0, [pc, #44]	; (8013360 <BSP_SD_Init+0x48>)
 8013332:	f7f9 fc27 	bl	800cb84 <HAL_SD_Init>
 8013336:	4603      	mov	r3, r0
 8013338:	71fb      	strb	r3, [r7, #7]
  /* Configure SD Bus width (4 bits mode selected) */
  if (sd_state == MSD_OK)
 801333a:	79fb      	ldrb	r3, [r7, #7]
 801333c:	2b00      	cmp	r3, #0
 801333e:	d109      	bne.n	8013354 <BSP_SD_Init+0x3c>
  {
    /* Enable wide operation */
    if (HAL_SD_ConfigWideBusOperation(&hsd1, SDMMC_BUS_WIDE_4B) != HAL_OK)
 8013340:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8013344:	4806      	ldr	r0, [pc, #24]	; (8013360 <BSP_SD_Init+0x48>)
 8013346:	f7fa fdfb 	bl	800df40 <HAL_SD_ConfigWideBusOperation>
 801334a:	4603      	mov	r3, r0
 801334c:	2b00      	cmp	r3, #0
 801334e:	d001      	beq.n	8013354 <BSP_SD_Init+0x3c>
    {
      sd_state = MSD_ERROR;
 8013350:	2301      	movs	r3, #1
 8013352:	71fb      	strb	r3, [r7, #7]
    }
  }

  return sd_state;
 8013354:	79fb      	ldrb	r3, [r7, #7]
}
 8013356:	4618      	mov	r0, r3
 8013358:	3708      	adds	r7, #8
 801335a:	46bd      	mov	sp, r7
 801335c:	bd80      	pop	{r7, pc}
 801335e:	bf00      	nop
 8013360:	24001470 	.word	0x24001470

08013364 <BSP_SD_ReadBlocks_DMA>:
  * @param  ReadAddr: Address from where data is to be read
  * @param  NumOfBlocks: Number of SD blocks to read
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks_DMA(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks)
{
 8013364:	b580      	push	{r7, lr}
 8013366:	b086      	sub	sp, #24
 8013368:	af00      	add	r7, sp, #0
 801336a:	60f8      	str	r0, [r7, #12]
 801336c:	60b9      	str	r1, [r7, #8]
 801336e:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 8013370:	2300      	movs	r3, #0
 8013372:	75fb      	strb	r3, [r7, #23]

  /* Read block(s) in DMA transfer mode */
  if (HAL_SD_ReadBlocks_DMA(&hsd1, (uint8_t *)pData, ReadAddr, NumOfBlocks) != HAL_OK)
 8013374:	687b      	ldr	r3, [r7, #4]
 8013376:	68ba      	ldr	r2, [r7, #8]
 8013378:	68f9      	ldr	r1, [r7, #12]
 801337a:	4806      	ldr	r0, [pc, #24]	; (8013394 <BSP_SD_ReadBlocks_DMA+0x30>)
 801337c:	f7fa f83e 	bl	800d3fc <HAL_SD_ReadBlocks_DMA>
 8013380:	4603      	mov	r3, r0
 8013382:	2b00      	cmp	r3, #0
 8013384:	d001      	beq.n	801338a <BSP_SD_ReadBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 8013386:	2301      	movs	r3, #1
 8013388:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 801338a:	7dfb      	ldrb	r3, [r7, #23]
}
 801338c:	4618      	mov	r0, r3
 801338e:	3718      	adds	r7, #24
 8013390:	46bd      	mov	sp, r7
 8013392:	bd80      	pop	{r7, pc}
 8013394:	24001470 	.word	0x24001470

08013398 <BSP_SD_WriteBlocks_DMA>:
  * @param  WriteAddr: Address from where data is to be written
  * @param  NumOfBlocks: Number of SD blocks to write
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks_DMA(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks)
{
 8013398:	b580      	push	{r7, lr}
 801339a:	b086      	sub	sp, #24
 801339c:	af00      	add	r7, sp, #0
 801339e:	60f8      	str	r0, [r7, #12]
 80133a0:	60b9      	str	r1, [r7, #8]
 80133a2:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 80133a4:	2300      	movs	r3, #0
 80133a6:	75fb      	strb	r3, [r7, #23]

  /* Write block(s) in DMA transfer mode */
  if (HAL_SD_WriteBlocks_DMA(&hsd1, (uint8_t *)pData, WriteAddr, NumOfBlocks) != HAL_OK)
 80133a8:	687b      	ldr	r3, [r7, #4]
 80133aa:	68ba      	ldr	r2, [r7, #8]
 80133ac:	68f9      	ldr	r1, [r7, #12]
 80133ae:	4806      	ldr	r0, [pc, #24]	; (80133c8 <BSP_SD_WriteBlocks_DMA+0x30>)
 80133b0:	f7fa f8cc 	bl	800d54c <HAL_SD_WriteBlocks_DMA>
 80133b4:	4603      	mov	r3, r0
 80133b6:	2b00      	cmp	r3, #0
 80133b8:	d001      	beq.n	80133be <BSP_SD_WriteBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 80133ba:	2301      	movs	r3, #1
 80133bc:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 80133be:	7dfb      	ldrb	r3, [r7, #23]
}
 80133c0:	4618      	mov	r0, r3
 80133c2:	3718      	adds	r7, #24
 80133c4:	46bd      	mov	sp, r7
 80133c6:	bd80      	pop	{r7, pc}
 80133c8:	24001470 	.word	0x24001470

080133cc <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 80133cc:	b580      	push	{r7, lr}
 80133ce:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd1) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 80133d0:	4805      	ldr	r0, [pc, #20]	; (80133e8 <BSP_SD_GetCardState+0x1c>)
 80133d2:	f7fa fe5f 	bl	800e094 <HAL_SD_GetCardState>
 80133d6:	4603      	mov	r3, r0
 80133d8:	2b04      	cmp	r3, #4
 80133da:	bf14      	ite	ne
 80133dc:	2301      	movne	r3, #1
 80133de:	2300      	moveq	r3, #0
 80133e0:	b2db      	uxtb	r3, r3
}
 80133e2:	4618      	mov	r0, r3
 80133e4:	bd80      	pop	{r7, pc}
 80133e6:	bf00      	nop
 80133e8:	24001470 	.word	0x24001470

080133ec <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 80133ec:	b580      	push	{r7, lr}
 80133ee:	b082      	sub	sp, #8
 80133f0:	af00      	add	r7, sp, #0
 80133f2:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd1, CardInfo);
 80133f4:	6879      	ldr	r1, [r7, #4]
 80133f6:	4803      	ldr	r0, [pc, #12]	; (8013404 <BSP_SD_GetCardInfo+0x18>)
 80133f8:	f7fa fd76 	bl	800dee8 <HAL_SD_GetCardInfo>
}
 80133fc:	bf00      	nop
 80133fe:	3708      	adds	r7, #8
 8013400:	46bd      	mov	sp, r7
 8013402:	bd80      	pop	{r7, pc}
 8013404:	24001470 	.word	0x24001470

08013408 <HAL_SD_TxCpltCallback>:
  * @brief Tx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_TxCpltCallback(SD_HandleTypeDef *hsd)
{
 8013408:	b580      	push	{r7, lr}
 801340a:	b082      	sub	sp, #8
 801340c:	af00      	add	r7, sp, #0
 801340e:	6078      	str	r0, [r7, #4]
  BSP_SD_WriteCpltCallback();
 8013410:	f000 f9a0 	bl	8013754 <BSP_SD_WriteCpltCallback>
}
 8013414:	bf00      	nop
 8013416:	3708      	adds	r7, #8
 8013418:	46bd      	mov	sp, r7
 801341a:	bd80      	pop	{r7, pc}

0801341c <HAL_SD_RxCpltCallback>:
  * @brief Rx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_RxCpltCallback(SD_HandleTypeDef *hsd)
{
 801341c:	b580      	push	{r7, lr}
 801341e:	b082      	sub	sp, #8
 8013420:	af00      	add	r7, sp, #0
 8013422:	6078      	str	r0, [r7, #4]
  BSP_SD_ReadCpltCallback();
 8013424:	f000 f9a2 	bl	801376c <BSP_SD_ReadCpltCallback>
}
 8013428:	bf00      	nop
 801342a:	3708      	adds	r7, #8
 801342c:	46bd      	mov	sp, r7
 801342e:	bd80      	pop	{r7, pc}

08013430 <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 8013430:	b580      	push	{r7, lr}
 8013432:	b082      	sub	sp, #8
 8013434:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 8013436:	2301      	movs	r3, #1
 8013438:	71fb      	strb	r3, [r7, #7]

  if (BSP_PlatformIsDetected() == 0x0)
 801343a:	f000 f80b 	bl	8013454 <BSP_PlatformIsDetected>
 801343e:	4603      	mov	r3, r0
 8013440:	2b00      	cmp	r3, #0
 8013442:	d101      	bne.n	8013448 <BSP_SD_IsDetected+0x18>
  {
    status = SD_NOT_PRESENT;
 8013444:	2300      	movs	r3, #0
 8013446:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 8013448:	79fb      	ldrb	r3, [r7, #7]
 801344a:	b2db      	uxtb	r3, r3
}
 801344c:	4618      	mov	r0, r3
 801344e:	3708      	adds	r7, #8
 8013450:	46bd      	mov	sp, r7
 8013452:	bd80      	pop	{r7, pc}

08013454 <BSP_PlatformIsDetected>:
  *
  ******************************************************************************
*/
#include "fatfs_platform.h"

uint8_t	BSP_PlatformIsDetected(void) {
 8013454:	b580      	push	{r7, lr}
 8013456:	b082      	sub	sp, #8
 8013458:	af00      	add	r7, sp, #0
    uint8_t status = SD_PRESENT;
 801345a:	2301      	movs	r3, #1
 801345c:	71fb      	strb	r3, [r7, #7]
    /* Check SD card detect pin */
    if(HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) != GPIO_PIN_RESET)
 801345e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8013462:	4806      	ldr	r0, [pc, #24]	; (801347c <BSP_PlatformIsDetected+0x28>)
 8013464:	f7f4 fe3a 	bl	80080dc <HAL_GPIO_ReadPin>
 8013468:	4603      	mov	r3, r0
 801346a:	2b00      	cmp	r3, #0
 801346c:	d001      	beq.n	8013472 <BSP_PlatformIsDetected+0x1e>
    {
        status = SD_NOT_PRESENT;
 801346e:	2300      	movs	r3, #0
 8013470:	71fb      	strb	r3, [r7, #7]
    }
    /* USER CODE BEGIN 1 */
    /* user code can be inserted here */
    /* USER CODE END 1 */
    return status;
 8013472:	79fb      	ldrb	r3, [r7, #7]
}
 8013474:	4618      	mov	r0, r3
 8013476:	3708      	adds	r7, #8
 8013478:	46bd      	mov	sp, r7
 801347a:	bd80      	pop	{r7, pc}
 801347c:	58020000 	.word	0x58020000

08013480 <SD_CheckStatusWithTimeout>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static int SD_CheckStatusWithTimeout(uint32_t timeout)
{
 8013480:	b580      	push	{r7, lr}
 8013482:	b084      	sub	sp, #16
 8013484:	af00      	add	r7, sp, #0
 8013486:	6078      	str	r0, [r7, #4]
  uint32_t timer = HAL_GetTick();
 8013488:	f7f1 f91a 	bl	80046c0 <HAL_GetTick>
 801348c:	60f8      	str	r0, [r7, #12]
  /* block until SDIO IP is ready again or a timeout occur */
  while(HAL_GetTick() - timer < timeout)
 801348e:	e006      	b.n	801349e <SD_CheckStatusWithTimeout+0x1e>
  {
    if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 8013490:	f7ff ff9c 	bl	80133cc <BSP_SD_GetCardState>
 8013494:	4603      	mov	r3, r0
 8013496:	2b00      	cmp	r3, #0
 8013498:	d101      	bne.n	801349e <SD_CheckStatusWithTimeout+0x1e>
    {
      return 0;
 801349a:	2300      	movs	r3, #0
 801349c:	e009      	b.n	80134b2 <SD_CheckStatusWithTimeout+0x32>
  while(HAL_GetTick() - timer < timeout)
 801349e:	f7f1 f90f 	bl	80046c0 <HAL_GetTick>
 80134a2:	4602      	mov	r2, r0
 80134a4:	68fb      	ldr	r3, [r7, #12]
 80134a6:	1ad3      	subs	r3, r2, r3
 80134a8:	687a      	ldr	r2, [r7, #4]
 80134aa:	429a      	cmp	r2, r3
 80134ac:	d8f0      	bhi.n	8013490 <SD_CheckStatusWithTimeout+0x10>
    }
  }

  return -1;
 80134ae:	f04f 33ff 	mov.w	r3, #4294967295
}
 80134b2:	4618      	mov	r0, r3
 80134b4:	3710      	adds	r7, #16
 80134b6:	46bd      	mov	sp, r7
 80134b8:	bd80      	pop	{r7, pc}
	...

080134bc <SD_CheckStatus>:

static DSTATUS SD_CheckStatus(BYTE lun)
{
 80134bc:	b580      	push	{r7, lr}
 80134be:	b082      	sub	sp, #8
 80134c0:	af00      	add	r7, sp, #0
 80134c2:	4603      	mov	r3, r0
 80134c4:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 80134c6:	4b0b      	ldr	r3, [pc, #44]	; (80134f4 <SD_CheckStatus+0x38>)
 80134c8:	2201      	movs	r2, #1
 80134ca:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 80134cc:	f7ff ff7e 	bl	80133cc <BSP_SD_GetCardState>
 80134d0:	4603      	mov	r3, r0
 80134d2:	2b00      	cmp	r3, #0
 80134d4:	d107      	bne.n	80134e6 <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 80134d6:	4b07      	ldr	r3, [pc, #28]	; (80134f4 <SD_CheckStatus+0x38>)
 80134d8:	781b      	ldrb	r3, [r3, #0]
 80134da:	b2db      	uxtb	r3, r3
 80134dc:	f023 0301 	bic.w	r3, r3, #1
 80134e0:	b2da      	uxtb	r2, r3
 80134e2:	4b04      	ldr	r3, [pc, #16]	; (80134f4 <SD_CheckStatus+0x38>)
 80134e4:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 80134e6:	4b03      	ldr	r3, [pc, #12]	; (80134f4 <SD_CheckStatus+0x38>)
 80134e8:	781b      	ldrb	r3, [r3, #0]
 80134ea:	b2db      	uxtb	r3, r3
}
 80134ec:	4618      	mov	r0, r3
 80134ee:	3708      	adds	r7, #8
 80134f0:	46bd      	mov	sp, r7
 80134f2:	bd80      	pop	{r7, pc}
 80134f4:	2400001d 	.word	0x2400001d

080134f8 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 80134f8:	b580      	push	{r7, lr}
 80134fa:	b082      	sub	sp, #8
 80134fc:	af00      	add	r7, sp, #0
 80134fe:	4603      	mov	r3, r0
 8013500:	71fb      	strb	r3, [r7, #7]

#if !defined(DISABLE_SD_INIT)

  if(BSP_SD_Init() == MSD_OK)
 8013502:	f7ff ff09 	bl	8013318 <BSP_SD_Init>
 8013506:	4603      	mov	r3, r0
 8013508:	2b00      	cmp	r3, #0
 801350a:	d107      	bne.n	801351c <SD_initialize+0x24>
  {
    Stat = SD_CheckStatus(lun);
 801350c:	79fb      	ldrb	r3, [r7, #7]
 801350e:	4618      	mov	r0, r3
 8013510:	f7ff ffd4 	bl	80134bc <SD_CheckStatus>
 8013514:	4603      	mov	r3, r0
 8013516:	461a      	mov	r2, r3
 8013518:	4b04      	ldr	r3, [pc, #16]	; (801352c <SD_initialize+0x34>)
 801351a:	701a      	strb	r2, [r3, #0]

#else
  Stat = SD_CheckStatus(lun);
#endif

  return Stat;
 801351c:	4b03      	ldr	r3, [pc, #12]	; (801352c <SD_initialize+0x34>)
 801351e:	781b      	ldrb	r3, [r3, #0]
 8013520:	b2db      	uxtb	r3, r3
}
 8013522:	4618      	mov	r0, r3
 8013524:	3708      	adds	r7, #8
 8013526:	46bd      	mov	sp, r7
 8013528:	bd80      	pop	{r7, pc}
 801352a:	bf00      	nop
 801352c:	2400001d 	.word	0x2400001d

08013530 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 8013530:	b580      	push	{r7, lr}
 8013532:	b082      	sub	sp, #8
 8013534:	af00      	add	r7, sp, #0
 8013536:	4603      	mov	r3, r0
 8013538:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 801353a:	79fb      	ldrb	r3, [r7, #7]
 801353c:	4618      	mov	r0, r3
 801353e:	f7ff ffbd 	bl	80134bc <SD_CheckStatus>
 8013542:	4603      	mov	r3, r0
}
 8013544:	4618      	mov	r0, r3
 8013546:	3708      	adds	r7, #8
 8013548:	46bd      	mov	sp, r7
 801354a:	bd80      	pop	{r7, pc}

0801354c <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 801354c:	b580      	push	{r7, lr}
 801354e:	b086      	sub	sp, #24
 8013550:	af00      	add	r7, sp, #0
 8013552:	60b9      	str	r1, [r7, #8]
 8013554:	607a      	str	r2, [r7, #4]
 8013556:	603b      	str	r3, [r7, #0]
 8013558:	4603      	mov	r3, r0
 801355a:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 801355c:	2301      	movs	r3, #1
 801355e:	75fb      	strb	r3, [r7, #23]

  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 8013560:	f247 5030 	movw	r0, #30000	; 0x7530
 8013564:	f7ff ff8c 	bl	8013480 <SD_CheckStatusWithTimeout>
 8013568:	4603      	mov	r3, r0
 801356a:	2b00      	cmp	r3, #0
 801356c:	da01      	bge.n	8013572 <SD_read+0x26>
  {
    return res;
 801356e:	7dfb      	ldrb	r3, [r7, #23]
 8013570:	e03b      	b.n	80135ea <SD_read+0x9e>

#if defined(ENABLE_SCRATCH_BUFFER)
  if (!((uint32_t)buff & 0x3))
  {
#endif
    if(BSP_SD_ReadBlocks_DMA((uint32_t*)buff,
 8013572:	683a      	ldr	r2, [r7, #0]
 8013574:	6879      	ldr	r1, [r7, #4]
 8013576:	68b8      	ldr	r0, [r7, #8]
 8013578:	f7ff fef4 	bl	8013364 <BSP_SD_ReadBlocks_DMA>
 801357c:	4603      	mov	r3, r0
 801357e:	2b00      	cmp	r3, #0
 8013580:	d132      	bne.n	80135e8 <SD_read+0x9c>
                             (uint32_t) (sector),
                             count) == MSD_OK)
    {
      ReadStatus = 0;
 8013582:	4b1c      	ldr	r3, [pc, #112]	; (80135f4 <SD_read+0xa8>)
 8013584:	2200      	movs	r2, #0
 8013586:	601a      	str	r2, [r3, #0]
      /* Wait that the reading process is completed or a timeout occurs */
      timeout = HAL_GetTick();
 8013588:	f7f1 f89a 	bl	80046c0 <HAL_GetTick>
 801358c:	6138      	str	r0, [r7, #16]
      while((ReadStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 801358e:	bf00      	nop
 8013590:	4b18      	ldr	r3, [pc, #96]	; (80135f4 <SD_read+0xa8>)
 8013592:	681b      	ldr	r3, [r3, #0]
 8013594:	2b00      	cmp	r3, #0
 8013596:	d108      	bne.n	80135aa <SD_read+0x5e>
 8013598:	f7f1 f892 	bl	80046c0 <HAL_GetTick>
 801359c:	4602      	mov	r2, r0
 801359e:	693b      	ldr	r3, [r7, #16]
 80135a0:	1ad3      	subs	r3, r2, r3
 80135a2:	f247 522f 	movw	r2, #29999	; 0x752f
 80135a6:	4293      	cmp	r3, r2
 80135a8:	d9f2      	bls.n	8013590 <SD_read+0x44>
      {
      }
      /* incase of a timeout return error */
      if (ReadStatus == 0)
 80135aa:	4b12      	ldr	r3, [pc, #72]	; (80135f4 <SD_read+0xa8>)
 80135ac:	681b      	ldr	r3, [r3, #0]
 80135ae:	2b00      	cmp	r3, #0
 80135b0:	d102      	bne.n	80135b8 <SD_read+0x6c>
      {
        res = RES_ERROR;
 80135b2:	2301      	movs	r3, #1
 80135b4:	75fb      	strb	r3, [r7, #23]
 80135b6:	e017      	b.n	80135e8 <SD_read+0x9c>
      }
      else
      {
        ReadStatus = 0;
 80135b8:	4b0e      	ldr	r3, [pc, #56]	; (80135f4 <SD_read+0xa8>)
 80135ba:	2200      	movs	r2, #0
 80135bc:	601a      	str	r2, [r3, #0]
        timeout = HAL_GetTick();
 80135be:	f7f1 f87f 	bl	80046c0 <HAL_GetTick>
 80135c2:	6138      	str	r0, [r7, #16]

        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 80135c4:	e007      	b.n	80135d6 <SD_read+0x8a>
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 80135c6:	f7ff ff01 	bl	80133cc <BSP_SD_GetCardState>
 80135ca:	4603      	mov	r3, r0
 80135cc:	2b00      	cmp	r3, #0
 80135ce:	d102      	bne.n	80135d6 <SD_read+0x8a>
          {
            res = RES_OK;
 80135d0:	2300      	movs	r3, #0
 80135d2:	75fb      	strb	r3, [r7, #23]
            adjust the address and the D-Cache size to invalidate accordingly.
            */
            alignedAddr = (uint32_t)buff & ~0x1F;
            SCB_InvalidateDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif
            break;
 80135d4:	e008      	b.n	80135e8 <SD_read+0x9c>
        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 80135d6:	f7f1 f873 	bl	80046c0 <HAL_GetTick>
 80135da:	4602      	mov	r2, r0
 80135dc:	693b      	ldr	r3, [r7, #16]
 80135de:	1ad3      	subs	r3, r2, r3
 80135e0:	f247 522f 	movw	r2, #29999	; 0x752f
 80135e4:	4293      	cmp	r3, r2
 80135e6:	d9ee      	bls.n	80135c6 <SD_read+0x7a>
      if ((i == count) && (ret == MSD_OK))
        res = RES_OK;
    }
#endif

  return res;
 80135e8:	7dfb      	ldrb	r3, [r7, #23]
}
 80135ea:	4618      	mov	r0, r3
 80135ec:	3718      	adds	r7, #24
 80135ee:	46bd      	mov	sp, r7
 80135f0:	bd80      	pop	{r7, pc}
 80135f2:	bf00      	nop
 80135f4:	24000b54 	.word	0x24000b54

080135f8 <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 80135f8:	b580      	push	{r7, lr}
 80135fa:	b086      	sub	sp, #24
 80135fc:	af00      	add	r7, sp, #0
 80135fe:	60b9      	str	r1, [r7, #8]
 8013600:	607a      	str	r2, [r7, #4]
 8013602:	603b      	str	r3, [r7, #0]
 8013604:	4603      	mov	r3, r0
 8013606:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8013608:	2301      	movs	r3, #1
 801360a:	75fb      	strb	r3, [r7, #23]
#if defined(ENABLE_SCRATCH_BUFFER)
  uint8_t ret;
  int i;
#endif

   WriteStatus = 0;
 801360c:	4b24      	ldr	r3, [pc, #144]	; (80136a0 <SD_write+0xa8>)
 801360e:	2200      	movs	r2, #0
 8013610:	601a      	str	r2, [r3, #0]
#if (ENABLE_SD_DMA_CACHE_MAINTENANCE == 1)
  uint32_t alignedAddr;
#endif

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 8013612:	f247 5030 	movw	r0, #30000	; 0x7530
 8013616:	f7ff ff33 	bl	8013480 <SD_CheckStatusWithTimeout>
 801361a:	4603      	mov	r3, r0
 801361c:	2b00      	cmp	r3, #0
 801361e:	da01      	bge.n	8013624 <SD_write+0x2c>
  {
    return res;
 8013620:	7dfb      	ldrb	r3, [r7, #23]
 8013622:	e038      	b.n	8013696 <SD_write+0x9e>
    */
    alignedAddr = (uint32_t)buff &  ~0x1F;
    SCB_CleanDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif

    if(BSP_SD_WriteBlocks_DMA((uint32_t*)buff,
 8013624:	683a      	ldr	r2, [r7, #0]
 8013626:	6879      	ldr	r1, [r7, #4]
 8013628:	68b8      	ldr	r0, [r7, #8]
 801362a:	f7ff feb5 	bl	8013398 <BSP_SD_WriteBlocks_DMA>
 801362e:	4603      	mov	r3, r0
 8013630:	2b00      	cmp	r3, #0
 8013632:	d12f      	bne.n	8013694 <SD_write+0x9c>
                              (uint32_t)(sector),
                              count) == MSD_OK)
    {
      /* Wait that writing process is completed or a timeout occurs */

      timeout = HAL_GetTick();
 8013634:	f7f1 f844 	bl	80046c0 <HAL_GetTick>
 8013638:	6138      	str	r0, [r7, #16]
      while((WriteStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 801363a:	bf00      	nop
 801363c:	4b18      	ldr	r3, [pc, #96]	; (80136a0 <SD_write+0xa8>)
 801363e:	681b      	ldr	r3, [r3, #0]
 8013640:	2b00      	cmp	r3, #0
 8013642:	d108      	bne.n	8013656 <SD_write+0x5e>
 8013644:	f7f1 f83c 	bl	80046c0 <HAL_GetTick>
 8013648:	4602      	mov	r2, r0
 801364a:	693b      	ldr	r3, [r7, #16]
 801364c:	1ad3      	subs	r3, r2, r3
 801364e:	f247 522f 	movw	r2, #29999	; 0x752f
 8013652:	4293      	cmp	r3, r2
 8013654:	d9f2      	bls.n	801363c <SD_write+0x44>
      {
      }
      /* incase of a timeout return error */
      if (WriteStatus == 0)
 8013656:	4b12      	ldr	r3, [pc, #72]	; (80136a0 <SD_write+0xa8>)
 8013658:	681b      	ldr	r3, [r3, #0]
 801365a:	2b00      	cmp	r3, #0
 801365c:	d102      	bne.n	8013664 <SD_write+0x6c>
      {
        res = RES_ERROR;
 801365e:	2301      	movs	r3, #1
 8013660:	75fb      	strb	r3, [r7, #23]
 8013662:	e017      	b.n	8013694 <SD_write+0x9c>
      }
      else
      {
        WriteStatus = 0;
 8013664:	4b0e      	ldr	r3, [pc, #56]	; (80136a0 <SD_write+0xa8>)
 8013666:	2200      	movs	r2, #0
 8013668:	601a      	str	r2, [r3, #0]
        timeout = HAL_GetTick();
 801366a:	f7f1 f829 	bl	80046c0 <HAL_GetTick>
 801366e:	6138      	str	r0, [r7, #16]

        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 8013670:	e007      	b.n	8013682 <SD_write+0x8a>
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 8013672:	f7ff feab 	bl	80133cc <BSP_SD_GetCardState>
 8013676:	4603      	mov	r3, r0
 8013678:	2b00      	cmp	r3, #0
 801367a:	d102      	bne.n	8013682 <SD_write+0x8a>
          {
            res = RES_OK;
 801367c:	2300      	movs	r3, #0
 801367e:	75fb      	strb	r3, [r7, #23]
            break;
 8013680:	e008      	b.n	8013694 <SD_write+0x9c>
        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 8013682:	f7f1 f81d 	bl	80046c0 <HAL_GetTick>
 8013686:	4602      	mov	r2, r0
 8013688:	693b      	ldr	r3, [r7, #16]
 801368a:	1ad3      	subs	r3, r2, r3
 801368c:	f247 522f 	movw	r2, #29999	; 0x752f
 8013690:	4293      	cmp	r3, r2
 8013692:	d9ee      	bls.n	8013672 <SD_write+0x7a>
      }
      if ((i == count) && (ret == MSD_OK))
        res = RES_OK;
    }
#endif
  return res;
 8013694:	7dfb      	ldrb	r3, [r7, #23]
}
 8013696:	4618      	mov	r0, r3
 8013698:	3718      	adds	r7, #24
 801369a:	46bd      	mov	sp, r7
 801369c:	bd80      	pop	{r7, pc}
 801369e:	bf00      	nop
 80136a0:	24000b50 	.word	0x24000b50

080136a4 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 80136a4:	b580      	push	{r7, lr}
 80136a6:	b08c      	sub	sp, #48	; 0x30
 80136a8:	af00      	add	r7, sp, #0
 80136aa:	4603      	mov	r3, r0
 80136ac:	603a      	str	r2, [r7, #0]
 80136ae:	71fb      	strb	r3, [r7, #7]
 80136b0:	460b      	mov	r3, r1
 80136b2:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 80136b4:	2301      	movs	r3, #1
 80136b6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 80136ba:	4b25      	ldr	r3, [pc, #148]	; (8013750 <SD_ioctl+0xac>)
 80136bc:	781b      	ldrb	r3, [r3, #0]
 80136be:	b2db      	uxtb	r3, r3
 80136c0:	f003 0301 	and.w	r3, r3, #1
 80136c4:	2b00      	cmp	r3, #0
 80136c6:	d001      	beq.n	80136cc <SD_ioctl+0x28>
 80136c8:	2303      	movs	r3, #3
 80136ca:	e03c      	b.n	8013746 <SD_ioctl+0xa2>

  switch (cmd)
 80136cc:	79bb      	ldrb	r3, [r7, #6]
 80136ce:	2b03      	cmp	r3, #3
 80136d0:	d834      	bhi.n	801373c <SD_ioctl+0x98>
 80136d2:	a201      	add	r2, pc, #4	; (adr r2, 80136d8 <SD_ioctl+0x34>)
 80136d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80136d8:	080136e9 	.word	0x080136e9
 80136dc:	080136f1 	.word	0x080136f1
 80136e0:	08013709 	.word	0x08013709
 80136e4:	08013723 	.word	0x08013723
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 80136e8:	2300      	movs	r3, #0
 80136ea:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 80136ee:	e028      	b.n	8013742 <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 80136f0:	f107 0308 	add.w	r3, r7, #8
 80136f4:	4618      	mov	r0, r3
 80136f6:	f7ff fe79 	bl	80133ec <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 80136fa:	6a3a      	ldr	r2, [r7, #32]
 80136fc:	683b      	ldr	r3, [r7, #0]
 80136fe:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 8013700:	2300      	movs	r3, #0
 8013702:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8013706:	e01c      	b.n	8013742 <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 8013708:	f107 0308 	add.w	r3, r7, #8
 801370c:	4618      	mov	r0, r3
 801370e:	f7ff fe6d 	bl	80133ec <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 8013712:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013714:	b29a      	uxth	r2, r3
 8013716:	683b      	ldr	r3, [r7, #0]
 8013718:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 801371a:	2300      	movs	r3, #0
 801371c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8013720:	e00f      	b.n	8013742 <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 8013722:	f107 0308 	add.w	r3, r7, #8
 8013726:	4618      	mov	r0, r3
 8013728:	f7ff fe60 	bl	80133ec <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 801372c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801372e:	0a5a      	lsrs	r2, r3, #9
 8013730:	683b      	ldr	r3, [r7, #0]
 8013732:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 8013734:	2300      	movs	r3, #0
 8013736:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 801373a:	e002      	b.n	8013742 <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 801373c:	2304      	movs	r3, #4
 801373e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  return res;
 8013742:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8013746:	4618      	mov	r0, r3
 8013748:	3730      	adds	r7, #48	; 0x30
 801374a:	46bd      	mov	sp, r7
 801374c:	bd80      	pop	{r7, pc}
 801374e:	bf00      	nop
 8013750:	2400001d 	.word	0x2400001d

08013754 <BSP_SD_WriteCpltCallback>:
  * @brief Tx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_WriteCpltCallback(void)
{
 8013754:	b480      	push	{r7}
 8013756:	af00      	add	r7, sp, #0

  WriteStatus = 1;
 8013758:	4b03      	ldr	r3, [pc, #12]	; (8013768 <BSP_SD_WriteCpltCallback+0x14>)
 801375a:	2201      	movs	r2, #1
 801375c:	601a      	str	r2, [r3, #0]
}
 801375e:	bf00      	nop
 8013760:	46bd      	mov	sp, r7
 8013762:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013766:	4770      	bx	lr
 8013768:	24000b50 	.word	0x24000b50

0801376c <BSP_SD_ReadCpltCallback>:
  * @brief Rx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_ReadCpltCallback(void)
{
 801376c:	b480      	push	{r7}
 801376e:	af00      	add	r7, sp, #0
  ReadStatus = 1;
 8013770:	4b03      	ldr	r3, [pc, #12]	; (8013780 <BSP_SD_ReadCpltCallback+0x14>)
 8013772:	2201      	movs	r2, #1
 8013774:	601a      	str	r2, [r3, #0]
}
 8013776:	bf00      	nop
 8013778:	46bd      	mov	sp, r7
 801377a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801377e:	4770      	bx	lr
 8013780:	24000b54 	.word	0x24000b54

08013784 <USBD_MSC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
uint8_t USBD_MSC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8013784:	b580      	push	{r7, lr}
 8013786:	b084      	sub	sp, #16
 8013788:	af00      	add	r7, sp, #0
 801378a:	6078      	str	r0, [r7, #4]
 801378c:	460b      	mov	r3, r1
 801378e:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_MSC_BOT_HandleTypeDef *hmsc;

  hmsc = USBD_malloc(sizeof(USBD_MSC_BOT_HandleTypeDef));
 8013790:	f248 0074 	movw	r0, #32884	; 0x8074
 8013794:	f005 fed0 	bl	8019538 <malloc>
 8013798:	4603      	mov	r3, r0
 801379a:	60fb      	str	r3, [r7, #12]

  if (hmsc == NULL)
 801379c:	68fb      	ldr	r3, [r7, #12]
 801379e:	2b00      	cmp	r3, #0
 80137a0:	d105      	bne.n	80137ae <USBD_MSC_Init+0x2a>
  {
    pdev->pClassData = NULL;
 80137a2:	687b      	ldr	r3, [r7, #4]
 80137a4:	2200      	movs	r2, #0
 80137a6:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 80137aa:	2302      	movs	r3, #2
 80137ac:	e034      	b.n	8013818 <USBD_MSC_Init+0x94>
  }

  pdev->pClassData = (void *)hmsc;
 80137ae:	687b      	ldr	r3, [r7, #4]
 80137b0:	68fa      	ldr	r2, [r7, #12]
 80137b2:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80137b6:	687b      	ldr	r3, [r7, #4]
 80137b8:	7c1b      	ldrb	r3, [r3, #16]
 80137ba:	2b00      	cmp	r3, #0
 80137bc:	d115      	bne.n	80137ea <USBD_MSC_Init+0x66>
  {
    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, MSC_EPOUT_ADDR, USBD_EP_TYPE_BULK, MSC_MAX_HS_PACKET);
 80137be:	f44f 7300 	mov.w	r3, #512	; 0x200
 80137c2:	2202      	movs	r2, #2
 80137c4:	2101      	movs	r1, #1
 80137c6:	6878      	ldr	r0, [r7, #4]
 80137c8:	f005 fd1d 	bl	8019206 <USBD_LL_OpenEP>
    pdev->ep_out[MSC_EPOUT_ADDR & 0xFU].is_used = 1U;
 80137cc:	687b      	ldr	r3, [r7, #4]
 80137ce:	2201      	movs	r2, #1
 80137d0:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, MSC_EPIN_ADDR, USBD_EP_TYPE_BULK, MSC_MAX_HS_PACKET);
 80137d4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80137d8:	2202      	movs	r2, #2
 80137da:	2181      	movs	r1, #129	; 0x81
 80137dc:	6878      	ldr	r0, [r7, #4]
 80137de:	f005 fd12 	bl	8019206 <USBD_LL_OpenEP>
    pdev->ep_in[MSC_EPIN_ADDR & 0xFU].is_used = 1U;
 80137e2:	687b      	ldr	r3, [r7, #4]
 80137e4:	2201      	movs	r2, #1
 80137e6:	871a      	strh	r2, [r3, #56]	; 0x38
 80137e8:	e012      	b.n	8013810 <USBD_MSC_Init+0x8c>
  }
  else
  {
    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, MSC_EPOUT_ADDR, USBD_EP_TYPE_BULK, MSC_MAX_FS_PACKET);
 80137ea:	2340      	movs	r3, #64	; 0x40
 80137ec:	2202      	movs	r2, #2
 80137ee:	2101      	movs	r1, #1
 80137f0:	6878      	ldr	r0, [r7, #4]
 80137f2:	f005 fd08 	bl	8019206 <USBD_LL_OpenEP>
    pdev->ep_out[MSC_EPOUT_ADDR & 0xFU].is_used = 1U;
 80137f6:	687b      	ldr	r3, [r7, #4]
 80137f8:	2201      	movs	r2, #1
 80137fa:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, MSC_EPIN_ADDR, USBD_EP_TYPE_BULK, MSC_MAX_FS_PACKET);
 80137fe:	2340      	movs	r3, #64	; 0x40
 8013800:	2202      	movs	r2, #2
 8013802:	2181      	movs	r1, #129	; 0x81
 8013804:	6878      	ldr	r0, [r7, #4]
 8013806:	f005 fcfe 	bl	8019206 <USBD_LL_OpenEP>
    pdev->ep_in[MSC_EPIN_ADDR & 0xFU].is_used = 1U;
 801380a:	687b      	ldr	r3, [r7, #4]
 801380c:	2201      	movs	r2, #1
 801380e:	871a      	strh	r2, [r3, #56]	; 0x38
  }

  /* Init the BOT  layer */
  MSC_BOT_Init(pdev);
 8013810:	6878      	ldr	r0, [r7, #4]
 8013812:	f000 f98e 	bl	8013b32 <MSC_BOT_Init>

  return (uint8_t)USBD_OK;
 8013816:	2300      	movs	r3, #0
}
 8013818:	4618      	mov	r0, r3
 801381a:	3710      	adds	r7, #16
 801381c:	46bd      	mov	sp, r7
 801381e:	bd80      	pop	{r7, pc}

08013820 <USBD_MSC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
uint8_t USBD_MSC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8013820:	b580      	push	{r7, lr}
 8013822:	b082      	sub	sp, #8
 8013824:	af00      	add	r7, sp, #0
 8013826:	6078      	str	r0, [r7, #4]
 8013828:	460b      	mov	r3, r1
 801382a:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  /* Close MSC EPs */
  (void)USBD_LL_CloseEP(pdev, MSC_EPOUT_ADDR);
 801382c:	2101      	movs	r1, #1
 801382e:	6878      	ldr	r0, [r7, #4]
 8013830:	f005 fd0f 	bl	8019252 <USBD_LL_CloseEP>
  pdev->ep_out[MSC_EPOUT_ADDR & 0xFU].is_used = 0U;
 8013834:	687b      	ldr	r3, [r7, #4]
 8013836:	2200      	movs	r2, #0
 8013838:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, MSC_EPIN_ADDR);
 801383c:	2181      	movs	r1, #129	; 0x81
 801383e:	6878      	ldr	r0, [r7, #4]
 8013840:	f005 fd07 	bl	8019252 <USBD_LL_CloseEP>
  pdev->ep_in[MSC_EPIN_ADDR & 0xFU].is_used = 0U;
 8013844:	687b      	ldr	r3, [r7, #4]
 8013846:	2200      	movs	r2, #0
 8013848:	871a      	strh	r2, [r3, #56]	; 0x38

  /* De-Init the BOT layer */
  MSC_BOT_DeInit(pdev);
 801384a:	6878      	ldr	r0, [r7, #4]
 801384c:	f000 f9cf 	bl	8013bee <MSC_BOT_DeInit>

  /* Free MSC Class Resources */
  if (pdev->pClassData != NULL)
 8013850:	687b      	ldr	r3, [r7, #4]
 8013852:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8013856:	2b00      	cmp	r3, #0
 8013858:	d009      	beq.n	801386e <USBD_MSC_DeInit+0x4e>
  {
    (void)USBD_free(pdev->pClassData);
 801385a:	687b      	ldr	r3, [r7, #4]
 801385c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8013860:	4618      	mov	r0, r3
 8013862:	f005 fe71 	bl	8019548 <free>
    pdev->pClassData = NULL;
 8013866:	687b      	ldr	r3, [r7, #4]
 8013868:	2200      	movs	r2, #0
 801386a:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 801386e:	2300      	movs	r3, #0
}
 8013870:	4618      	mov	r0, r3
 8013872:	3708      	adds	r7, #8
 8013874:	46bd      	mov	sp, r7
 8013876:	bd80      	pop	{r7, pc}

08013878 <USBD_MSC_Setup>:
* @param  pdev: device instance
* @param  req: USB request
* @retval status
*/
uint8_t USBD_MSC_Setup(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8013878:	b580      	push	{r7, lr}
 801387a:	b086      	sub	sp, #24
 801387c:	af00      	add	r7, sp, #0
 801387e:	6078      	str	r0, [r7, #4]
 8013880:	6039      	str	r1, [r7, #0]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8013882:	687b      	ldr	r3, [r7, #4]
 8013884:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8013888:	613b      	str	r3, [r7, #16]
  USBD_StatusTypeDef ret = USBD_OK;
 801388a:	2300      	movs	r3, #0
 801388c:	75fb      	strb	r3, [r7, #23]
  uint16_t status_info = 0U;
 801388e:	2300      	movs	r3, #0
 8013890:	81fb      	strh	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8013892:	683b      	ldr	r3, [r7, #0]
 8013894:	781b      	ldrb	r3, [r3, #0]
 8013896:	f003 0360 	and.w	r3, r3, #96	; 0x60
 801389a:	2b00      	cmp	r3, #0
 801389c:	d04d      	beq.n	801393a <USBD_MSC_Setup+0xc2>
 801389e:	2b20      	cmp	r3, #32
 80138a0:	f040 80c6 	bne.w	8013a30 <USBD_MSC_Setup+0x1b8>
  {
    /* Class request */
  case USB_REQ_TYPE_CLASS:
    switch (req->bRequest)
 80138a4:	683b      	ldr	r3, [r7, #0]
 80138a6:	785b      	ldrb	r3, [r3, #1]
 80138a8:	2bfe      	cmp	r3, #254	; 0xfe
 80138aa:	d002      	beq.n	80138b2 <USBD_MSC_Setup+0x3a>
 80138ac:	2bff      	cmp	r3, #255	; 0xff
 80138ae:	d024      	beq.n	80138fa <USBD_MSC_Setup+0x82>
 80138b0:	e03b      	b.n	801392a <USBD_MSC_Setup+0xb2>
    {
    case BOT_GET_MAX_LUN:
      if ((req->wValue  == 0U) && (req->wLength == 1U) &&
 80138b2:	683b      	ldr	r3, [r7, #0]
 80138b4:	885b      	ldrh	r3, [r3, #2]
 80138b6:	2b00      	cmp	r3, #0
 80138b8:	d118      	bne.n	80138ec <USBD_MSC_Setup+0x74>
 80138ba:	683b      	ldr	r3, [r7, #0]
 80138bc:	88db      	ldrh	r3, [r3, #6]
 80138be:	2b01      	cmp	r3, #1
 80138c0:	d114      	bne.n	80138ec <USBD_MSC_Setup+0x74>
          ((req->bmRequest & 0x80U) == 0x80U))
 80138c2:	683b      	ldr	r3, [r7, #0]
 80138c4:	781b      	ldrb	r3, [r3, #0]
 80138c6:	b25b      	sxtb	r3, r3
      if ((req->wValue  == 0U) && (req->wLength == 1U) &&
 80138c8:	2b00      	cmp	r3, #0
 80138ca:	da0f      	bge.n	80138ec <USBD_MSC_Setup+0x74>
      {
        hmsc->max_lun = (uint32_t)((USBD_StorageTypeDef *)pdev->pUserData)->GetMaxLun();
 80138cc:	687b      	ldr	r3, [r7, #4]
 80138ce:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80138d2:	699b      	ldr	r3, [r3, #24]
 80138d4:	4798      	blx	r3
 80138d6:	4603      	mov	r3, r0
 80138d8:	461a      	mov	r2, r3
 80138da:	693b      	ldr	r3, [r7, #16]
 80138dc:	601a      	str	r2, [r3, #0]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&hmsc->max_lun, 1U);
 80138de:	693b      	ldr	r3, [r7, #16]
 80138e0:	2201      	movs	r2, #1
 80138e2:	4619      	mov	r1, r3
 80138e4:	6878      	ldr	r0, [r7, #4]
 80138e6:	f002 fdaa 	bl	801643e <USBD_CtlSendData>
      else
      {
        USBD_CtlError(pdev, req);
        ret = USBD_FAIL;
      }
      break;
 80138ea:	e025      	b.n	8013938 <USBD_MSC_Setup+0xc0>
        USBD_CtlError(pdev, req);
 80138ec:	6839      	ldr	r1, [r7, #0]
 80138ee:	6878      	ldr	r0, [r7, #4]
 80138f0:	f002 fd34 	bl	801635c <USBD_CtlError>
        ret = USBD_FAIL;
 80138f4:	2303      	movs	r3, #3
 80138f6:	75fb      	strb	r3, [r7, #23]
      break;
 80138f8:	e01e      	b.n	8013938 <USBD_MSC_Setup+0xc0>

    case BOT_RESET :
      if ((req->wValue  == 0U) && (req->wLength == 0U) &&
 80138fa:	683b      	ldr	r3, [r7, #0]
 80138fc:	885b      	ldrh	r3, [r3, #2]
 80138fe:	2b00      	cmp	r3, #0
 8013900:	d10c      	bne.n	801391c <USBD_MSC_Setup+0xa4>
 8013902:	683b      	ldr	r3, [r7, #0]
 8013904:	88db      	ldrh	r3, [r3, #6]
 8013906:	2b00      	cmp	r3, #0
 8013908:	d108      	bne.n	801391c <USBD_MSC_Setup+0xa4>
          ((req->bmRequest & 0x80U) != 0x80U))
 801390a:	683b      	ldr	r3, [r7, #0]
 801390c:	781b      	ldrb	r3, [r3, #0]
 801390e:	b25b      	sxtb	r3, r3
      if ((req->wValue  == 0U) && (req->wLength == 0U) &&
 8013910:	2b00      	cmp	r3, #0
 8013912:	db03      	blt.n	801391c <USBD_MSC_Setup+0xa4>
      {
        MSC_BOT_Reset(pdev);
 8013914:	6878      	ldr	r0, [r7, #4]
 8013916:	f000 f947 	bl	8013ba8 <MSC_BOT_Reset>
      else
      {
        USBD_CtlError(pdev, req);
        ret = USBD_FAIL;
      }
      break;
 801391a:	e00d      	b.n	8013938 <USBD_MSC_Setup+0xc0>
        USBD_CtlError(pdev, req);
 801391c:	6839      	ldr	r1, [r7, #0]
 801391e:	6878      	ldr	r0, [r7, #4]
 8013920:	f002 fd1c 	bl	801635c <USBD_CtlError>
        ret = USBD_FAIL;
 8013924:	2303      	movs	r3, #3
 8013926:	75fb      	strb	r3, [r7, #23]
      break;
 8013928:	e006      	b.n	8013938 <USBD_MSC_Setup+0xc0>

    default:
      USBD_CtlError(pdev, req);
 801392a:	6839      	ldr	r1, [r7, #0]
 801392c:	6878      	ldr	r0, [r7, #4]
 801392e:	f002 fd15 	bl	801635c <USBD_CtlError>
      ret = USBD_FAIL;
 8013932:	2303      	movs	r3, #3
 8013934:	75fb      	strb	r3, [r7, #23]
      break;
 8013936:	bf00      	nop
    }
    break;
 8013938:	e081      	b.n	8013a3e <USBD_MSC_Setup+0x1c6>
    /* Interface & Endpoint request */
  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 801393a:	683b      	ldr	r3, [r7, #0]
 801393c:	785b      	ldrb	r3, [r3, #1]
 801393e:	2b0b      	cmp	r3, #11
 8013940:	d86d      	bhi.n	8013a1e <USBD_MSC_Setup+0x1a6>
 8013942:	a201      	add	r2, pc, #4	; (adr r2, 8013948 <USBD_MSC_Setup+0xd0>)
 8013944:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013948:	08013979 	.word	0x08013979
 801394c:	080139ef 	.word	0x080139ef
 8013950:	08013a1f 	.word	0x08013a1f
 8013954:	08013a1f 	.word	0x08013a1f
 8013958:	08013a1f 	.word	0x08013a1f
 801395c:	08013a1f 	.word	0x08013a1f
 8013960:	08013a1f 	.word	0x08013a1f
 8013964:	08013a1f 	.word	0x08013a1f
 8013968:	08013a1f 	.word	0x08013a1f
 801396c:	08013a1f 	.word	0x08013a1f
 8013970:	080139a1 	.word	0x080139a1
 8013974:	080139c9 	.word	0x080139c9
    {
    case USB_REQ_GET_STATUS:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8013978:	687b      	ldr	r3, [r7, #4]
 801397a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801397e:	2b03      	cmp	r3, #3
 8013980:	d107      	bne.n	8013992 <USBD_MSC_Setup+0x11a>
      {
        (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8013982:	f107 030e 	add.w	r3, r7, #14
 8013986:	2202      	movs	r2, #2
 8013988:	4619      	mov	r1, r3
 801398a:	6878      	ldr	r0, [r7, #4]
 801398c:	f002 fd57 	bl	801643e <USBD_CtlSendData>
      else
      {
        USBD_CtlError(pdev, req);
        ret = USBD_FAIL;
      }
      break;
 8013990:	e04d      	b.n	8013a2e <USBD_MSC_Setup+0x1b6>
        USBD_CtlError(pdev, req);
 8013992:	6839      	ldr	r1, [r7, #0]
 8013994:	6878      	ldr	r0, [r7, #4]
 8013996:	f002 fce1 	bl	801635c <USBD_CtlError>
        ret = USBD_FAIL;
 801399a:	2303      	movs	r3, #3
 801399c:	75fb      	strb	r3, [r7, #23]
      break;
 801399e:	e046      	b.n	8013a2e <USBD_MSC_Setup+0x1b6>

    case USB_REQ_GET_INTERFACE:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80139a0:	687b      	ldr	r3, [r7, #4]
 80139a2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80139a6:	2b03      	cmp	r3, #3
 80139a8:	d107      	bne.n	80139ba <USBD_MSC_Setup+0x142>
      {
        (void)USBD_CtlSendData(pdev, (uint8_t *)&hmsc->interface, 1U);
 80139aa:	693b      	ldr	r3, [r7, #16]
 80139ac:	3304      	adds	r3, #4
 80139ae:	2201      	movs	r2, #1
 80139b0:	4619      	mov	r1, r3
 80139b2:	6878      	ldr	r0, [r7, #4]
 80139b4:	f002 fd43 	bl	801643e <USBD_CtlSendData>
      else
      {
        USBD_CtlError(pdev, req);
        ret = USBD_FAIL;
      }
      break;
 80139b8:	e039      	b.n	8013a2e <USBD_MSC_Setup+0x1b6>
        USBD_CtlError(pdev, req);
 80139ba:	6839      	ldr	r1, [r7, #0]
 80139bc:	6878      	ldr	r0, [r7, #4]
 80139be:	f002 fccd 	bl	801635c <USBD_CtlError>
        ret = USBD_FAIL;
 80139c2:	2303      	movs	r3, #3
 80139c4:	75fb      	strb	r3, [r7, #23]
      break;
 80139c6:	e032      	b.n	8013a2e <USBD_MSC_Setup+0x1b6>

    case USB_REQ_SET_INTERFACE:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80139c8:	687b      	ldr	r3, [r7, #4]
 80139ca:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80139ce:	2b03      	cmp	r3, #3
 80139d0:	d106      	bne.n	80139e0 <USBD_MSC_Setup+0x168>
      {
        hmsc->interface = (uint8_t)(req->wValue);
 80139d2:	683b      	ldr	r3, [r7, #0]
 80139d4:	885b      	ldrh	r3, [r3, #2]
 80139d6:	b2db      	uxtb	r3, r3
 80139d8:	461a      	mov	r2, r3
 80139da:	693b      	ldr	r3, [r7, #16]
 80139dc:	605a      	str	r2, [r3, #4]
      else
      {
        USBD_CtlError(pdev, req);
        ret = USBD_FAIL;
      }
      break;
 80139de:	e026      	b.n	8013a2e <USBD_MSC_Setup+0x1b6>
        USBD_CtlError(pdev, req);
 80139e0:	6839      	ldr	r1, [r7, #0]
 80139e2:	6878      	ldr	r0, [r7, #4]
 80139e4:	f002 fcba 	bl	801635c <USBD_CtlError>
        ret = USBD_FAIL;
 80139e8:	2303      	movs	r3, #3
 80139ea:	75fb      	strb	r3, [r7, #23]
      break;
 80139ec:	e01f      	b.n	8013a2e <USBD_MSC_Setup+0x1b6>

    case USB_REQ_CLEAR_FEATURE:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80139ee:	687b      	ldr	r3, [r7, #4]
 80139f0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80139f4:	2b03      	cmp	r3, #3
 80139f6:	d119      	bne.n	8013a2c <USBD_MSC_Setup+0x1b4>
      {
        if (req->wValue == USB_FEATURE_EP_HALT)
 80139f8:	683b      	ldr	r3, [r7, #0]
 80139fa:	885b      	ldrh	r3, [r3, #2]
 80139fc:	2b00      	cmp	r3, #0
 80139fe:	d115      	bne.n	8013a2c <USBD_MSC_Setup+0x1b4>
        {
          /* Flush the FIFO */
          (void)USBD_LL_FlushEP(pdev, (uint8_t)req->wIndex);
 8013a00:	683b      	ldr	r3, [r7, #0]
 8013a02:	889b      	ldrh	r3, [r3, #4]
 8013a04:	b2db      	uxtb	r3, r3
 8013a06:	4619      	mov	r1, r3
 8013a08:	6878      	ldr	r0, [r7, #4]
 8013a0a:	f005 fc41 	bl	8019290 <USBD_LL_FlushEP>

          /* Handle BOT error */
          MSC_BOT_CplClrFeature(pdev, (uint8_t)req->wIndex);
 8013a0e:	683b      	ldr	r3, [r7, #0]
 8013a10:	889b      	ldrh	r3, [r3, #4]
 8013a12:	b2db      	uxtb	r3, r3
 8013a14:	4619      	mov	r1, r3
 8013a16:	6878      	ldr	r0, [r7, #4]
 8013a18:	f000 fa90 	bl	8013f3c <MSC_BOT_CplClrFeature>
        }
      }
      break;
 8013a1c:	e006      	b.n	8013a2c <USBD_MSC_Setup+0x1b4>

    default:
      USBD_CtlError(pdev, req);
 8013a1e:	6839      	ldr	r1, [r7, #0]
 8013a20:	6878      	ldr	r0, [r7, #4]
 8013a22:	f002 fc9b 	bl	801635c <USBD_CtlError>
      ret = USBD_FAIL;
 8013a26:	2303      	movs	r3, #3
 8013a28:	75fb      	strb	r3, [r7, #23]
      break;
 8013a2a:	e000      	b.n	8013a2e <USBD_MSC_Setup+0x1b6>
      break;
 8013a2c:	bf00      	nop
    }
    break;
 8013a2e:	e006      	b.n	8013a3e <USBD_MSC_Setup+0x1c6>

  default:
    USBD_CtlError(pdev, req);
 8013a30:	6839      	ldr	r1, [r7, #0]
 8013a32:	6878      	ldr	r0, [r7, #4]
 8013a34:	f002 fc92 	bl	801635c <USBD_CtlError>
    ret = USBD_FAIL;
 8013a38:	2303      	movs	r3, #3
 8013a3a:	75fb      	strb	r3, [r7, #23]
    break;
 8013a3c:	bf00      	nop
  }

  return (uint8_t)ret;
 8013a3e:	7dfb      	ldrb	r3, [r7, #23]
}
 8013a40:	4618      	mov	r0, r3
 8013a42:	3718      	adds	r7, #24
 8013a44:	46bd      	mov	sp, r7
 8013a46:	bd80      	pop	{r7, pc}

08013a48 <USBD_MSC_DataIn>:
* @param  pdev: device instance
* @param  epnum: endpoint index
* @retval status
*/
uint8_t USBD_MSC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8013a48:	b580      	push	{r7, lr}
 8013a4a:	b082      	sub	sp, #8
 8013a4c:	af00      	add	r7, sp, #0
 8013a4e:	6078      	str	r0, [r7, #4]
 8013a50:	460b      	mov	r3, r1
 8013a52:	70fb      	strb	r3, [r7, #3]
  MSC_BOT_DataIn(pdev, epnum);
 8013a54:	78fb      	ldrb	r3, [r7, #3]
 8013a56:	4619      	mov	r1, r3
 8013a58:	6878      	ldr	r0, [r7, #4]
 8013a5a:	f000 f8d9 	bl	8013c10 <MSC_BOT_DataIn>

  return (uint8_t)USBD_OK;
 8013a5e:	2300      	movs	r3, #0
}
 8013a60:	4618      	mov	r0, r3
 8013a62:	3708      	adds	r7, #8
 8013a64:	46bd      	mov	sp, r7
 8013a66:	bd80      	pop	{r7, pc}

08013a68 <USBD_MSC_DataOut>:
* @param  pdev: device instance
* @param  epnum: endpoint index
* @retval status
*/
uint8_t USBD_MSC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8013a68:	b580      	push	{r7, lr}
 8013a6a:	b082      	sub	sp, #8
 8013a6c:	af00      	add	r7, sp, #0
 8013a6e:	6078      	str	r0, [r7, #4]
 8013a70:	460b      	mov	r3, r1
 8013a72:	70fb      	strb	r3, [r7, #3]
  MSC_BOT_DataOut(pdev, epnum);
 8013a74:	78fb      	ldrb	r3, [r7, #3]
 8013a76:	4619      	mov	r1, r3
 8013a78:	6878      	ldr	r0, [r7, #4]
 8013a7a:	f000 f8fd 	bl	8013c78 <MSC_BOT_DataOut>

  return (uint8_t)USBD_OK;
 8013a7e:	2300      	movs	r3, #0
}
 8013a80:	4618      	mov	r0, r3
 8013a82:	3708      	adds	r7, #8
 8013a84:	46bd      	mov	sp, r7
 8013a86:	bd80      	pop	{r7, pc}

08013a88 <USBD_MSC_GetHSCfgDesc>:
*         return configuration descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t *USBD_MSC_GetHSCfgDesc(uint16_t *length)
{
 8013a88:	b480      	push	{r7}
 8013a8a:	b083      	sub	sp, #12
 8013a8c:	af00      	add	r7, sp, #0
 8013a8e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_MSC_CfgHSDesc);
 8013a90:	687b      	ldr	r3, [r7, #4]
 8013a92:	2220      	movs	r2, #32
 8013a94:	801a      	strh	r2, [r3, #0]

  return USBD_MSC_CfgHSDesc;
 8013a96:	4b03      	ldr	r3, [pc, #12]	; (8013aa4 <USBD_MSC_GetHSCfgDesc+0x1c>)
}
 8013a98:	4618      	mov	r0, r3
 8013a9a:	370c      	adds	r7, #12
 8013a9c:	46bd      	mov	sp, r7
 8013a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013aa2:	4770      	bx	lr
 8013aa4:	24000058 	.word	0x24000058

08013aa8 <USBD_MSC_GetFSCfgDesc>:
*         return configuration descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t *USBD_MSC_GetFSCfgDesc(uint16_t *length)
{
 8013aa8:	b480      	push	{r7}
 8013aaa:	b083      	sub	sp, #12
 8013aac:	af00      	add	r7, sp, #0
 8013aae:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_MSC_CfgFSDesc);
 8013ab0:	687b      	ldr	r3, [r7, #4]
 8013ab2:	2220      	movs	r2, #32
 8013ab4:	801a      	strh	r2, [r3, #0]

  return USBD_MSC_CfgFSDesc;
 8013ab6:	4b03      	ldr	r3, [pc, #12]	; (8013ac4 <USBD_MSC_GetFSCfgDesc+0x1c>)
}
 8013ab8:	4618      	mov	r0, r3
 8013aba:	370c      	adds	r7, #12
 8013abc:	46bd      	mov	sp, r7
 8013abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013ac2:	4770      	bx	lr
 8013ac4:	24000078 	.word	0x24000078

08013ac8 <USBD_MSC_GetOtherSpeedCfgDesc>:
*         return other speed configuration descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t *USBD_MSC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8013ac8:	b480      	push	{r7}
 8013aca:	b083      	sub	sp, #12
 8013acc:	af00      	add	r7, sp, #0
 8013ace:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_MSC_OtherSpeedCfgDesc);
 8013ad0:	687b      	ldr	r3, [r7, #4]
 8013ad2:	2220      	movs	r2, #32
 8013ad4:	801a      	strh	r2, [r3, #0]

  return USBD_MSC_OtherSpeedCfgDesc;
 8013ad6:	4b03      	ldr	r3, [pc, #12]	; (8013ae4 <USBD_MSC_GetOtherSpeedCfgDesc+0x1c>)
}
 8013ad8:	4618      	mov	r0, r3
 8013ada:	370c      	adds	r7, #12
 8013adc:	46bd      	mov	sp, r7
 8013ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013ae2:	4770      	bx	lr
 8013ae4:	24000098 	.word	0x24000098

08013ae8 <USBD_MSC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t *USBD_MSC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8013ae8:	b480      	push	{r7}
 8013aea:	b083      	sub	sp, #12
 8013aec:	af00      	add	r7, sp, #0
 8013aee:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_MSC_DeviceQualifierDesc);
 8013af0:	687b      	ldr	r3, [r7, #4]
 8013af2:	220a      	movs	r2, #10
 8013af4:	801a      	strh	r2, [r3, #0]

  return USBD_MSC_DeviceQualifierDesc;
 8013af6:	4b03      	ldr	r3, [pc, #12]	; (8013b04 <USBD_MSC_GetDeviceQualifierDescriptor+0x1c>)
}
 8013af8:	4618      	mov	r0, r3
 8013afa:	370c      	adds	r7, #12
 8013afc:	46bd      	mov	sp, r7
 8013afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013b02:	4770      	bx	lr
 8013b04:	240000b8 	.word	0x240000b8

08013b08 <USBD_MSC_RegisterStorage>:
* @brief  USBD_MSC_RegisterStorage
* @param  fops: storage callback
* @retval status
*/
uint8_t USBD_MSC_RegisterStorage(USBD_HandleTypeDef *pdev, USBD_StorageTypeDef *fops)
{
 8013b08:	b480      	push	{r7}
 8013b0a:	b083      	sub	sp, #12
 8013b0c:	af00      	add	r7, sp, #0
 8013b0e:	6078      	str	r0, [r7, #4]
 8013b10:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8013b12:	683b      	ldr	r3, [r7, #0]
 8013b14:	2b00      	cmp	r3, #0
 8013b16:	d101      	bne.n	8013b1c <USBD_MSC_RegisterStorage+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8013b18:	2303      	movs	r3, #3
 8013b1a:	e004      	b.n	8013b26 <USBD_MSC_RegisterStorage+0x1e>
  }

  pdev->pUserData = fops;
 8013b1c:	687b      	ldr	r3, [r7, #4]
 8013b1e:	683a      	ldr	r2, [r7, #0]
 8013b20:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 8013b24:	2300      	movs	r3, #0
}
 8013b26:	4618      	mov	r0, r3
 8013b28:	370c      	adds	r7, #12
 8013b2a:	46bd      	mov	sp, r7
 8013b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013b30:	4770      	bx	lr

08013b32 <MSC_BOT_Init>:
*         Initialize the BOT Process
* @param  pdev: device instance
* @retval None
*/
void MSC_BOT_Init(USBD_HandleTypeDef *pdev)
{
 8013b32:	b580      	push	{r7, lr}
 8013b34:	b084      	sub	sp, #16
 8013b36:	af00      	add	r7, sp, #0
 8013b38:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8013b3a:	687b      	ldr	r3, [r7, #4]
 8013b3c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8013b40:	60fb      	str	r3, [r7, #12]

  hmsc->bot_state = USBD_BOT_IDLE;
 8013b42:	68fb      	ldr	r3, [r7, #12]
 8013b44:	2200      	movs	r2, #0
 8013b46:	721a      	strb	r2, [r3, #8]
  hmsc->bot_status = USBD_BOT_STATUS_NORMAL;
 8013b48:	68fb      	ldr	r3, [r7, #12]
 8013b4a:	2200      	movs	r2, #0
 8013b4c:	725a      	strb	r2, [r3, #9]

  hmsc->scsi_sense_tail = 0U;
 8013b4e:	68fa      	ldr	r2, [r7, #12]
 8013b50:	f248 0361 	movw	r3, #32865	; 0x8061
 8013b54:	4413      	add	r3, r2
 8013b56:	2200      	movs	r2, #0
 8013b58:	701a      	strb	r2, [r3, #0]
  hmsc->scsi_sense_head = 0U;
 8013b5a:	68fa      	ldr	r2, [r7, #12]
 8013b5c:	f248 0360 	movw	r3, #32864	; 0x8060
 8013b60:	4413      	add	r3, r2
 8013b62:	2200      	movs	r2, #0
 8013b64:	701a      	strb	r2, [r3, #0]
  hmsc->scsi_medium_state = SCSI_MEDIUM_UNLOCKED;
 8013b66:	68fa      	ldr	r2, [r7, #12]
 8013b68:	f248 0362 	movw	r3, #32866	; 0x8062
 8013b6c:	4413      	add	r3, r2
 8013b6e:	2200      	movs	r2, #0
 8013b70:	701a      	strb	r2, [r3, #0]

  ((USBD_StorageTypeDef *)pdev->pUserData)->Init(0U);
 8013b72:	687b      	ldr	r3, [r7, #4]
 8013b74:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8013b78:	681b      	ldr	r3, [r3, #0]
 8013b7a:	2000      	movs	r0, #0
 8013b7c:	4798      	blx	r3

  (void)USBD_LL_FlushEP(pdev, MSC_EPOUT_ADDR);
 8013b7e:	2101      	movs	r1, #1
 8013b80:	6878      	ldr	r0, [r7, #4]
 8013b82:	f005 fb85 	bl	8019290 <USBD_LL_FlushEP>
  (void)USBD_LL_FlushEP(pdev, MSC_EPIN_ADDR);
 8013b86:	2181      	movs	r1, #129	; 0x81
 8013b88:	6878      	ldr	r0, [r7, #4]
 8013b8a:	f005 fb81 	bl	8019290 <USBD_LL_FlushEP>

  /* Prapare EP to Receive First BOT Cmd */
  (void)USBD_LL_PrepareReceive(pdev, MSC_EPOUT_ADDR, (uint8_t *)&hmsc->cbw,
 8013b8e:	68fb      	ldr	r3, [r7, #12]
 8013b90:	f248 0210 	movw	r2, #32784	; 0x8010
 8013b94:	441a      	add	r2, r3
 8013b96:	231f      	movs	r3, #31
 8013b98:	2101      	movs	r1, #1
 8013b9a:	6878      	ldr	r0, [r7, #4]
 8013b9c:	f005 fc41 	bl	8019422 <USBD_LL_PrepareReceive>
                               USBD_BOT_CBW_LENGTH);
}
 8013ba0:	bf00      	nop
 8013ba2:	3710      	adds	r7, #16
 8013ba4:	46bd      	mov	sp, r7
 8013ba6:	bd80      	pop	{r7, pc}

08013ba8 <MSC_BOT_Reset>:
*         Reset the BOT Machine
* @param  pdev: device instance
* @retval  None
*/
void MSC_BOT_Reset(USBD_HandleTypeDef *pdev)
{
 8013ba8:	b580      	push	{r7, lr}
 8013baa:	b084      	sub	sp, #16
 8013bac:	af00      	add	r7, sp, #0
 8013bae:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8013bb0:	687b      	ldr	r3, [r7, #4]
 8013bb2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8013bb6:	60fb      	str	r3, [r7, #12]

  hmsc->bot_state  = USBD_BOT_IDLE;
 8013bb8:	68fb      	ldr	r3, [r7, #12]
 8013bba:	2200      	movs	r2, #0
 8013bbc:	721a      	strb	r2, [r3, #8]
  hmsc->bot_status = USBD_BOT_STATUS_RECOVERY;
 8013bbe:	68fb      	ldr	r3, [r7, #12]
 8013bc0:	2201      	movs	r2, #1
 8013bc2:	725a      	strb	r2, [r3, #9]

  (void)USBD_LL_ClearStallEP(pdev, MSC_EPIN_ADDR);
 8013bc4:	2181      	movs	r1, #129	; 0x81
 8013bc6:	6878      	ldr	r0, [r7, #4]
 8013bc8:	f005 fba0 	bl	801930c <USBD_LL_ClearStallEP>
  (void)USBD_LL_ClearStallEP(pdev, MSC_EPOUT_ADDR);
 8013bcc:	2101      	movs	r1, #1
 8013bce:	6878      	ldr	r0, [r7, #4]
 8013bd0:	f005 fb9c 	bl	801930c <USBD_LL_ClearStallEP>

  /* Prapare EP to Receive First BOT Cmd */
  (void)USBD_LL_PrepareReceive(pdev, MSC_EPOUT_ADDR, (uint8_t *)&hmsc->cbw,
 8013bd4:	68fb      	ldr	r3, [r7, #12]
 8013bd6:	f248 0210 	movw	r2, #32784	; 0x8010
 8013bda:	441a      	add	r2, r3
 8013bdc:	231f      	movs	r3, #31
 8013bde:	2101      	movs	r1, #1
 8013be0:	6878      	ldr	r0, [r7, #4]
 8013be2:	f005 fc1e 	bl	8019422 <USBD_LL_PrepareReceive>
                               USBD_BOT_CBW_LENGTH);
}
 8013be6:	bf00      	nop
 8013be8:	3710      	adds	r7, #16
 8013bea:	46bd      	mov	sp, r7
 8013bec:	bd80      	pop	{r7, pc}

08013bee <MSC_BOT_DeInit>:
*         Deinitialize the BOT Machine
* @param  pdev: device instance
* @retval None
*/
void MSC_BOT_DeInit(USBD_HandleTypeDef  *pdev)
{
 8013bee:	b480      	push	{r7}
 8013bf0:	b085      	sub	sp, #20
 8013bf2:	af00      	add	r7, sp, #0
 8013bf4:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8013bf6:	687b      	ldr	r3, [r7, #4]
 8013bf8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8013bfc:	60fb      	str	r3, [r7, #12]
  hmsc->bot_state = USBD_BOT_IDLE;
 8013bfe:	68fb      	ldr	r3, [r7, #12]
 8013c00:	2200      	movs	r2, #0
 8013c02:	721a      	strb	r2, [r3, #8]
}
 8013c04:	bf00      	nop
 8013c06:	3714      	adds	r7, #20
 8013c08:	46bd      	mov	sp, r7
 8013c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013c0e:	4770      	bx	lr

08013c10 <MSC_BOT_DataIn>:
* @param  pdev: device instance
* @param  epnum: endpoint index
* @retval None
*/
void MSC_BOT_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8013c10:	b580      	push	{r7, lr}
 8013c12:	b084      	sub	sp, #16
 8013c14:	af00      	add	r7, sp, #0
 8013c16:	6078      	str	r0, [r7, #4]
 8013c18:	460b      	mov	r3, r1
 8013c1a:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);

  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8013c1c:	687b      	ldr	r3, [r7, #4]
 8013c1e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8013c22:	60fb      	str	r3, [r7, #12]

  switch (hmsc->bot_state)
 8013c24:	68fb      	ldr	r3, [r7, #12]
 8013c26:	7a1b      	ldrb	r3, [r3, #8]
 8013c28:	2b02      	cmp	r3, #2
 8013c2a:	d004      	beq.n	8013c36 <MSC_BOT_DataIn+0x26>
 8013c2c:	2b02      	cmp	r3, #2
 8013c2e:	db1c      	blt.n	8013c6a <MSC_BOT_DataIn+0x5a>
 8013c30:	2b04      	cmp	r3, #4
 8013c32:	dc1a      	bgt.n	8013c6a <MSC_BOT_DataIn+0x5a>
 8013c34:	e014      	b.n	8013c60 <MSC_BOT_DataIn+0x50>
  {
  case USBD_BOT_DATA_IN:
    if (SCSI_ProcessCmd(pdev, hmsc->cbw.bLUN, &hmsc->cbw.CB[0]) < 0)
 8013c36:	68fa      	ldr	r2, [r7, #12]
 8013c38:	f248 031d 	movw	r3, #32797	; 0x801d
 8013c3c:	4413      	add	r3, r2
 8013c3e:	7819      	ldrb	r1, [r3, #0]
 8013c40:	68fa      	ldr	r2, [r7, #12]
 8013c42:	f248 031f 	movw	r3, #32799	; 0x801f
 8013c46:	4413      	add	r3, r2
 8013c48:	461a      	mov	r2, r3
 8013c4a:	6878      	ldr	r0, [r7, #4]
 8013c4c:	f000 f99e 	bl	8013f8c <SCSI_ProcessCmd>
 8013c50:	4603      	mov	r3, r0
 8013c52:	2b00      	cmp	r3, #0
 8013c54:	da0b      	bge.n	8013c6e <MSC_BOT_DataIn+0x5e>
    {
      MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
 8013c56:	2101      	movs	r1, #1
 8013c58:	6878      	ldr	r0, [r7, #4]
 8013c5a:	f000 f90b 	bl	8013e74 <MSC_BOT_SendCSW>
    }
    break;
 8013c5e:	e006      	b.n	8013c6e <MSC_BOT_DataIn+0x5e>

  case USBD_BOT_SEND_DATA:
  case USBD_BOT_LAST_DATA_IN:
    MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_PASSED);
 8013c60:	2100      	movs	r1, #0
 8013c62:	6878      	ldr	r0, [r7, #4]
 8013c64:	f000 f906 	bl	8013e74 <MSC_BOT_SendCSW>
    break;
 8013c68:	e002      	b.n	8013c70 <MSC_BOT_DataIn+0x60>

  default:
    break;
 8013c6a:	bf00      	nop
 8013c6c:	e000      	b.n	8013c70 <MSC_BOT_DataIn+0x60>
    break;
 8013c6e:	bf00      	nop
  }
}
 8013c70:	bf00      	nop
 8013c72:	3710      	adds	r7, #16
 8013c74:	46bd      	mov	sp, r7
 8013c76:	bd80      	pop	{r7, pc}

08013c78 <MSC_BOT_DataOut>:
* @param  pdev: device instance
* @param  epnum: endpoint index
* @retval None
*/
void MSC_BOT_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8013c78:	b580      	push	{r7, lr}
 8013c7a:	b084      	sub	sp, #16
 8013c7c:	af00      	add	r7, sp, #0
 8013c7e:	6078      	str	r0, [r7, #4]
 8013c80:	460b      	mov	r3, r1
 8013c82:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);

  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8013c84:	687b      	ldr	r3, [r7, #4]
 8013c86:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8013c8a:	60fb      	str	r3, [r7, #12]

  switch (hmsc->bot_state)
 8013c8c:	68fb      	ldr	r3, [r7, #12]
 8013c8e:	7a1b      	ldrb	r3, [r3, #8]
 8013c90:	2b00      	cmp	r3, #0
 8013c92:	d002      	beq.n	8013c9a <MSC_BOT_DataOut+0x22>
 8013c94:	2b01      	cmp	r3, #1
 8013c96:	d004      	beq.n	8013ca2 <MSC_BOT_DataOut+0x2a>
        MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
      }
      break;

    default:
      break;
 8013c98:	e018      	b.n	8013ccc <MSC_BOT_DataOut+0x54>
      MSC_BOT_CBW_Decode(pdev);
 8013c9a:	6878      	ldr	r0, [r7, #4]
 8013c9c:	f000 f81a 	bl	8013cd4 <MSC_BOT_CBW_Decode>
      break;
 8013ca0:	e014      	b.n	8013ccc <MSC_BOT_DataOut+0x54>
      if (SCSI_ProcessCmd(pdev, hmsc->cbw.bLUN, &hmsc->cbw.CB[0]) < 0)
 8013ca2:	68fa      	ldr	r2, [r7, #12]
 8013ca4:	f248 031d 	movw	r3, #32797	; 0x801d
 8013ca8:	4413      	add	r3, r2
 8013caa:	7819      	ldrb	r1, [r3, #0]
 8013cac:	68fa      	ldr	r2, [r7, #12]
 8013cae:	f248 031f 	movw	r3, #32799	; 0x801f
 8013cb2:	4413      	add	r3, r2
 8013cb4:	461a      	mov	r2, r3
 8013cb6:	6878      	ldr	r0, [r7, #4]
 8013cb8:	f000 f968 	bl	8013f8c <SCSI_ProcessCmd>
 8013cbc:	4603      	mov	r3, r0
 8013cbe:	2b00      	cmp	r3, #0
 8013cc0:	da03      	bge.n	8013cca <MSC_BOT_DataOut+0x52>
        MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
 8013cc2:	2101      	movs	r1, #1
 8013cc4:	6878      	ldr	r0, [r7, #4]
 8013cc6:	f000 f8d5 	bl	8013e74 <MSC_BOT_SendCSW>
      break;
 8013cca:	bf00      	nop
  }
}
 8013ccc:	bf00      	nop
 8013cce:	3710      	adds	r7, #16
 8013cd0:	46bd      	mov	sp, r7
 8013cd2:	bd80      	pop	{r7, pc}

08013cd4 <MSC_BOT_CBW_Decode>:
*         Decode the CBW command and set the BOT state machine accordingly
* @param  pdev: device instance
* @retval None
*/
static void  MSC_BOT_CBW_Decode(USBD_HandleTypeDef *pdev)
{
 8013cd4:	b580      	push	{r7, lr}
 8013cd6:	b084      	sub	sp, #16
 8013cd8:	af00      	add	r7, sp, #0
 8013cda:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8013cdc:	687b      	ldr	r3, [r7, #4]
 8013cde:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8013ce2:	60fb      	str	r3, [r7, #12]

  hmsc->csw.dTag = hmsc->cbw.dTag;
 8013ce4:	68fa      	ldr	r2, [r7, #12]
 8013ce6:	f248 0314 	movw	r3, #32788	; 0x8014
 8013cea:	4413      	add	r3, r2
 8013cec:	681a      	ldr	r2, [r3, #0]
 8013cee:	68f9      	ldr	r1, [r7, #12]
 8013cf0:	f248 0334 	movw	r3, #32820	; 0x8034
 8013cf4:	440b      	add	r3, r1
 8013cf6:	601a      	str	r2, [r3, #0]
  hmsc->csw.dDataResidue = hmsc->cbw.dDataLength;
 8013cf8:	68fa      	ldr	r2, [r7, #12]
 8013cfa:	f248 0318 	movw	r3, #32792	; 0x8018
 8013cfe:	4413      	add	r3, r2
 8013d00:	681a      	ldr	r2, [r3, #0]
 8013d02:	68f9      	ldr	r1, [r7, #12]
 8013d04:	f248 0338 	movw	r3, #32824	; 0x8038
 8013d08:	440b      	add	r3, r1
 8013d0a:	601a      	str	r2, [r3, #0]

  if ((USBD_LL_GetRxDataSize(pdev, MSC_EPOUT_ADDR) != USBD_BOT_CBW_LENGTH) ||
 8013d0c:	2101      	movs	r1, #1
 8013d0e:	6878      	ldr	r0, [r7, #4]
 8013d10:	f005 fba8 	bl	8019464 <USBD_LL_GetRxDataSize>
 8013d14:	4603      	mov	r3, r0
 8013d16:	2b1f      	cmp	r3, #31
 8013d18:	d11c      	bne.n	8013d54 <MSC_BOT_CBW_Decode+0x80>
      (hmsc->cbw.dSignature != USBD_BOT_CBW_SIGNATURE) ||
 8013d1a:	68fa      	ldr	r2, [r7, #12]
 8013d1c:	f248 0310 	movw	r3, #32784	; 0x8010
 8013d20:	4413      	add	r3, r2
 8013d22:	681b      	ldr	r3, [r3, #0]
  if ((USBD_LL_GetRxDataSize(pdev, MSC_EPOUT_ADDR) != USBD_BOT_CBW_LENGTH) ||
 8013d24:	4a38      	ldr	r2, [pc, #224]	; (8013e08 <MSC_BOT_CBW_Decode+0x134>)
 8013d26:	4293      	cmp	r3, r2
 8013d28:	d114      	bne.n	8013d54 <MSC_BOT_CBW_Decode+0x80>
      (hmsc->cbw.bLUN > 1U) || (hmsc->cbw.bCBLength < 1U) ||
 8013d2a:	68fa      	ldr	r2, [r7, #12]
 8013d2c:	f248 031d 	movw	r3, #32797	; 0x801d
 8013d30:	4413      	add	r3, r2
 8013d32:	781b      	ldrb	r3, [r3, #0]
      (hmsc->cbw.dSignature != USBD_BOT_CBW_SIGNATURE) ||
 8013d34:	2b01      	cmp	r3, #1
 8013d36:	d80d      	bhi.n	8013d54 <MSC_BOT_CBW_Decode+0x80>
      (hmsc->cbw.bLUN > 1U) || (hmsc->cbw.bCBLength < 1U) ||
 8013d38:	68fa      	ldr	r2, [r7, #12]
 8013d3a:	f248 031e 	movw	r3, #32798	; 0x801e
 8013d3e:	4413      	add	r3, r2
 8013d40:	781b      	ldrb	r3, [r3, #0]
 8013d42:	2b00      	cmp	r3, #0
 8013d44:	d006      	beq.n	8013d54 <MSC_BOT_CBW_Decode+0x80>
      (hmsc->cbw.bCBLength > 16U))
 8013d46:	68fa      	ldr	r2, [r7, #12]
 8013d48:	f248 031e 	movw	r3, #32798	; 0x801e
 8013d4c:	4413      	add	r3, r2
 8013d4e:	781b      	ldrb	r3, [r3, #0]
      (hmsc->cbw.bLUN > 1U) || (hmsc->cbw.bCBLength < 1U) ||
 8013d50:	2b10      	cmp	r3, #16
 8013d52:	d910      	bls.n	8013d76 <MSC_BOT_CBW_Decode+0xa2>
  {
    SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8013d54:	68fa      	ldr	r2, [r7, #12]
 8013d56:	f248 031d 	movw	r3, #32797	; 0x801d
 8013d5a:	4413      	add	r3, r2
 8013d5c:	7819      	ldrb	r1, [r3, #0]
 8013d5e:	2320      	movs	r3, #32
 8013d60:	2205      	movs	r2, #5
 8013d62:	6878      	ldr	r0, [r7, #4]
 8013d64:	f000 fd36 	bl	80147d4 <SCSI_SenseCode>

    hmsc->bot_status = USBD_BOT_STATUS_ERROR;
 8013d68:	68fb      	ldr	r3, [r7, #12]
 8013d6a:	2202      	movs	r2, #2
 8013d6c:	725a      	strb	r2, [r3, #9]
    MSC_BOT_Abort(pdev);
 8013d6e:	6878      	ldr	r0, [r7, #4]
 8013d70:	f000 f8b2 	bl	8013ed8 <MSC_BOT_Abort>
 8013d74:	e044      	b.n	8013e00 <MSC_BOT_CBW_Decode+0x12c>
  }
  else
  {
    if (SCSI_ProcessCmd(pdev, hmsc->cbw.bLUN, &hmsc->cbw.CB[0]) < 0)
 8013d76:	68fa      	ldr	r2, [r7, #12]
 8013d78:	f248 031d 	movw	r3, #32797	; 0x801d
 8013d7c:	4413      	add	r3, r2
 8013d7e:	7819      	ldrb	r1, [r3, #0]
 8013d80:	68fa      	ldr	r2, [r7, #12]
 8013d82:	f248 031f 	movw	r3, #32799	; 0x801f
 8013d86:	4413      	add	r3, r2
 8013d88:	461a      	mov	r2, r3
 8013d8a:	6878      	ldr	r0, [r7, #4]
 8013d8c:	f000 f8fe 	bl	8013f8c <SCSI_ProcessCmd>
 8013d90:	4603      	mov	r3, r0
 8013d92:	2b00      	cmp	r3, #0
 8013d94:	da0c      	bge.n	8013db0 <MSC_BOT_CBW_Decode+0xdc>
    {
      if (hmsc->bot_state == USBD_BOT_NO_DATA)
 8013d96:	68fb      	ldr	r3, [r7, #12]
 8013d98:	7a1b      	ldrb	r3, [r3, #8]
 8013d9a:	2b05      	cmp	r3, #5
 8013d9c:	d104      	bne.n	8013da8 <MSC_BOT_CBW_Decode+0xd4>
      {
        MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
 8013d9e:	2101      	movs	r1, #1
 8013da0:	6878      	ldr	r0, [r7, #4]
 8013da2:	f000 f867 	bl	8013e74 <MSC_BOT_SendCSW>
 8013da6:	e02b      	b.n	8013e00 <MSC_BOT_CBW_Decode+0x12c>
      }
      else
      {
        MSC_BOT_Abort(pdev);
 8013da8:	6878      	ldr	r0, [r7, #4]
 8013daa:	f000 f895 	bl	8013ed8 <MSC_BOT_Abort>
 8013dae:	e027      	b.n	8013e00 <MSC_BOT_CBW_Decode+0x12c>
      }
    }
    /* Burst xfer handled internally */
    else if ((hmsc->bot_state != USBD_BOT_DATA_IN) &&
 8013db0:	68fb      	ldr	r3, [r7, #12]
 8013db2:	7a1b      	ldrb	r3, [r3, #8]
 8013db4:	2b02      	cmp	r3, #2
 8013db6:	d022      	beq.n	8013dfe <MSC_BOT_CBW_Decode+0x12a>
             (hmsc->bot_state != USBD_BOT_DATA_OUT) &&
 8013db8:	68fb      	ldr	r3, [r7, #12]
 8013dba:	7a1b      	ldrb	r3, [r3, #8]
    else if ((hmsc->bot_state != USBD_BOT_DATA_IN) &&
 8013dbc:	2b01      	cmp	r3, #1
 8013dbe:	d01e      	beq.n	8013dfe <MSC_BOT_CBW_Decode+0x12a>
             (hmsc->bot_state != USBD_BOT_LAST_DATA_IN))
 8013dc0:	68fb      	ldr	r3, [r7, #12]
 8013dc2:	7a1b      	ldrb	r3, [r3, #8]
             (hmsc->bot_state != USBD_BOT_DATA_OUT) &&
 8013dc4:	2b03      	cmp	r3, #3
 8013dc6:	d01a      	beq.n	8013dfe <MSC_BOT_CBW_Decode+0x12a>
    {
      if (hmsc->bot_data_length > 0U)
 8013dc8:	68fb      	ldr	r3, [r7, #12]
 8013dca:	68db      	ldr	r3, [r3, #12]
 8013dcc:	2b00      	cmp	r3, #0
 8013dce:	d009      	beq.n	8013de4 <MSC_BOT_CBW_Decode+0x110>
      {
        MSC_BOT_SendData(pdev, hmsc->bot_data, hmsc->bot_data_length);
 8013dd0:	68fb      	ldr	r3, [r7, #12]
 8013dd2:	f103 0110 	add.w	r1, r3, #16
 8013dd6:	68fb      	ldr	r3, [r7, #12]
 8013dd8:	68db      	ldr	r3, [r3, #12]
 8013dda:	461a      	mov	r2, r3
 8013ddc:	6878      	ldr	r0, [r7, #4]
 8013dde:	f000 f815 	bl	8013e0c <MSC_BOT_SendData>
      if (hmsc->bot_data_length > 0U)
 8013de2:	e00d      	b.n	8013e00 <MSC_BOT_CBW_Decode+0x12c>
      }
      else if (hmsc->bot_data_length == 0U)
 8013de4:	68fb      	ldr	r3, [r7, #12]
 8013de6:	68db      	ldr	r3, [r3, #12]
 8013de8:	2b00      	cmp	r3, #0
 8013dea:	d104      	bne.n	8013df6 <MSC_BOT_CBW_Decode+0x122>
      {
        MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_PASSED);
 8013dec:	2100      	movs	r1, #0
 8013dee:	6878      	ldr	r0, [r7, #4]
 8013df0:	f000 f840 	bl	8013e74 <MSC_BOT_SendCSW>
      if (hmsc->bot_data_length > 0U)
 8013df4:	e004      	b.n	8013e00 <MSC_BOT_CBW_Decode+0x12c>
      }
      else
      {
        MSC_BOT_Abort(pdev);
 8013df6:	6878      	ldr	r0, [r7, #4]
 8013df8:	f000 f86e 	bl	8013ed8 <MSC_BOT_Abort>
      if (hmsc->bot_data_length > 0U)
 8013dfc:	e000      	b.n	8013e00 <MSC_BOT_CBW_Decode+0x12c>
      }
    }
    else
    {
      return;
 8013dfe:	bf00      	nop
    }
  }
}
 8013e00:	3710      	adds	r7, #16
 8013e02:	46bd      	mov	sp, r7
 8013e04:	bd80      	pop	{r7, pc}
 8013e06:	bf00      	nop
 8013e08:	43425355 	.word	0x43425355

08013e0c <MSC_BOT_SendData>:
* @param  buf: pointer to data buffer
* @param  len: Data Length
* @retval None
*/
static void  MSC_BOT_SendData(USBD_HandleTypeDef *pdev, uint8_t *pbuf, uint32_t len)
{
 8013e0c:	b580      	push	{r7, lr}
 8013e0e:	b086      	sub	sp, #24
 8013e10:	af00      	add	r7, sp, #0
 8013e12:	60f8      	str	r0, [r7, #12]
 8013e14:	60b9      	str	r1, [r7, #8]
 8013e16:	607a      	str	r2, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8013e18:	68fb      	ldr	r3, [r7, #12]
 8013e1a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8013e1e:	617b      	str	r3, [r7, #20]

  uint32_t length = MIN(hmsc->cbw.dDataLength, len);
 8013e20:	697a      	ldr	r2, [r7, #20]
 8013e22:	f248 0318 	movw	r3, #32792	; 0x8018
 8013e26:	4413      	add	r3, r2
 8013e28:	681b      	ldr	r3, [r3, #0]
 8013e2a:	687a      	ldr	r2, [r7, #4]
 8013e2c:	4293      	cmp	r3, r2
 8013e2e:	bf28      	it	cs
 8013e30:	4613      	movcs	r3, r2
 8013e32:	613b      	str	r3, [r7, #16]

  hmsc->csw.dDataResidue -= len;
 8013e34:	697a      	ldr	r2, [r7, #20]
 8013e36:	f248 0338 	movw	r3, #32824	; 0x8038
 8013e3a:	4413      	add	r3, r2
 8013e3c:	681a      	ldr	r2, [r3, #0]
 8013e3e:	687b      	ldr	r3, [r7, #4]
 8013e40:	1ad2      	subs	r2, r2, r3
 8013e42:	6979      	ldr	r1, [r7, #20]
 8013e44:	f248 0338 	movw	r3, #32824	; 0x8038
 8013e48:	440b      	add	r3, r1
 8013e4a:	601a      	str	r2, [r3, #0]
  hmsc->csw.bStatus = USBD_CSW_CMD_PASSED;
 8013e4c:	697a      	ldr	r2, [r7, #20]
 8013e4e:	f248 033c 	movw	r3, #32828	; 0x803c
 8013e52:	4413      	add	r3, r2
 8013e54:	2200      	movs	r2, #0
 8013e56:	701a      	strb	r2, [r3, #0]
  hmsc->bot_state = USBD_BOT_SEND_DATA;
 8013e58:	697b      	ldr	r3, [r7, #20]
 8013e5a:	2204      	movs	r2, #4
 8013e5c:	721a      	strb	r2, [r3, #8]

  (void)USBD_LL_Transmit(pdev, MSC_EPIN_ADDR, pbuf, length);
 8013e5e:	693b      	ldr	r3, [r7, #16]
 8013e60:	68ba      	ldr	r2, [r7, #8]
 8013e62:	2181      	movs	r1, #129	; 0x81
 8013e64:	68f8      	ldr	r0, [r7, #12]
 8013e66:	f005 fabb 	bl	80193e0 <USBD_LL_Transmit>
}
 8013e6a:	bf00      	nop
 8013e6c:	3718      	adds	r7, #24
 8013e6e:	46bd      	mov	sp, r7
 8013e70:	bd80      	pop	{r7, pc}
	...

08013e74 <MSC_BOT_SendCSW>:
* @param  pdev: device instance
* @param  status : CSW status
* @retval None
*/
void  MSC_BOT_SendCSW(USBD_HandleTypeDef *pdev, uint8_t CSW_Status)
{
 8013e74:	b580      	push	{r7, lr}
 8013e76:	b084      	sub	sp, #16
 8013e78:	af00      	add	r7, sp, #0
 8013e7a:	6078      	str	r0, [r7, #4]
 8013e7c:	460b      	mov	r3, r1
 8013e7e:	70fb      	strb	r3, [r7, #3]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8013e80:	687b      	ldr	r3, [r7, #4]
 8013e82:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8013e86:	60fb      	str	r3, [r7, #12]

  hmsc->csw.dSignature = USBD_BOT_CSW_SIGNATURE;
 8013e88:	68fa      	ldr	r2, [r7, #12]
 8013e8a:	f248 0330 	movw	r3, #32816	; 0x8030
 8013e8e:	4413      	add	r3, r2
 8013e90:	4a10      	ldr	r2, [pc, #64]	; (8013ed4 <MSC_BOT_SendCSW+0x60>)
 8013e92:	601a      	str	r2, [r3, #0]
  hmsc->csw.bStatus = CSW_Status;
 8013e94:	68fa      	ldr	r2, [r7, #12]
 8013e96:	f248 033c 	movw	r3, #32828	; 0x803c
 8013e9a:	4413      	add	r3, r2
 8013e9c:	78fa      	ldrb	r2, [r7, #3]
 8013e9e:	701a      	strb	r2, [r3, #0]
  hmsc->bot_state = USBD_BOT_IDLE;
 8013ea0:	68fb      	ldr	r3, [r7, #12]
 8013ea2:	2200      	movs	r2, #0
 8013ea4:	721a      	strb	r2, [r3, #8]

  (void)USBD_LL_Transmit(pdev, MSC_EPIN_ADDR, (uint8_t *)&hmsc->csw,
 8013ea6:	68fb      	ldr	r3, [r7, #12]
 8013ea8:	f248 0230 	movw	r2, #32816	; 0x8030
 8013eac:	441a      	add	r2, r3
 8013eae:	230d      	movs	r3, #13
 8013eb0:	2181      	movs	r1, #129	; 0x81
 8013eb2:	6878      	ldr	r0, [r7, #4]
 8013eb4:	f005 fa94 	bl	80193e0 <USBD_LL_Transmit>
                         USBD_BOT_CSW_LENGTH);

  /* Prepare EP to Receive next Cmd */
  (void)USBD_LL_PrepareReceive(pdev, MSC_EPOUT_ADDR, (uint8_t *)&hmsc->cbw,
 8013eb8:	68fb      	ldr	r3, [r7, #12]
 8013eba:	f248 0210 	movw	r2, #32784	; 0x8010
 8013ebe:	441a      	add	r2, r3
 8013ec0:	231f      	movs	r3, #31
 8013ec2:	2101      	movs	r1, #1
 8013ec4:	6878      	ldr	r0, [r7, #4]
 8013ec6:	f005 faac 	bl	8019422 <USBD_LL_PrepareReceive>
                               USBD_BOT_CBW_LENGTH);
}
 8013eca:	bf00      	nop
 8013ecc:	3710      	adds	r7, #16
 8013ece:	46bd      	mov	sp, r7
 8013ed0:	bd80      	pop	{r7, pc}
 8013ed2:	bf00      	nop
 8013ed4:	53425355 	.word	0x53425355

08013ed8 <MSC_BOT_Abort>:
* @param  pdev: device instance
* @retval status
*/

static void  MSC_BOT_Abort(USBD_HandleTypeDef *pdev)
{
 8013ed8:	b580      	push	{r7, lr}
 8013eda:	b084      	sub	sp, #16
 8013edc:	af00      	add	r7, sp, #0
 8013ede:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8013ee0:	687b      	ldr	r3, [r7, #4]
 8013ee2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8013ee6:	60fb      	str	r3, [r7, #12]

  if ((hmsc->cbw.bmFlags == 0U) &&
 8013ee8:	68fa      	ldr	r2, [r7, #12]
 8013eea:	f248 031c 	movw	r3, #32796	; 0x801c
 8013eee:	4413      	add	r3, r2
 8013ef0:	781b      	ldrb	r3, [r3, #0]
 8013ef2:	2b00      	cmp	r3, #0
 8013ef4:	d10e      	bne.n	8013f14 <MSC_BOT_Abort+0x3c>
      (hmsc->cbw.dDataLength != 0U) &&
 8013ef6:	68fa      	ldr	r2, [r7, #12]
 8013ef8:	f248 0318 	movw	r3, #32792	; 0x8018
 8013efc:	4413      	add	r3, r2
 8013efe:	681b      	ldr	r3, [r3, #0]
  if ((hmsc->cbw.bmFlags == 0U) &&
 8013f00:	2b00      	cmp	r3, #0
 8013f02:	d007      	beq.n	8013f14 <MSC_BOT_Abort+0x3c>
      (hmsc->bot_status == USBD_BOT_STATUS_NORMAL))
 8013f04:	68fb      	ldr	r3, [r7, #12]
 8013f06:	7a5b      	ldrb	r3, [r3, #9]
      (hmsc->cbw.dDataLength != 0U) &&
 8013f08:	2b00      	cmp	r3, #0
 8013f0a:	d103      	bne.n	8013f14 <MSC_BOT_Abort+0x3c>
  {
    (void)USBD_LL_StallEP(pdev, MSC_EPOUT_ADDR);
 8013f0c:	2101      	movs	r1, #1
 8013f0e:	6878      	ldr	r0, [r7, #4]
 8013f10:	f005 f9dd 	bl	80192ce <USBD_LL_StallEP>
  }

  (void)USBD_LL_StallEP(pdev, MSC_EPIN_ADDR);
 8013f14:	2181      	movs	r1, #129	; 0x81
 8013f16:	6878      	ldr	r0, [r7, #4]
 8013f18:	f005 f9d9 	bl	80192ce <USBD_LL_StallEP>

  if (hmsc->bot_status == USBD_BOT_STATUS_ERROR)
 8013f1c:	68fb      	ldr	r3, [r7, #12]
 8013f1e:	7a5b      	ldrb	r3, [r3, #9]
 8013f20:	2b02      	cmp	r3, #2
 8013f22:	d107      	bne.n	8013f34 <MSC_BOT_Abort+0x5c>
  {
    (void)USBD_LL_StallEP(pdev, MSC_EPIN_ADDR);
 8013f24:	2181      	movs	r1, #129	; 0x81
 8013f26:	6878      	ldr	r0, [r7, #4]
 8013f28:	f005 f9d1 	bl	80192ce <USBD_LL_StallEP>
    (void)USBD_LL_StallEP(pdev, MSC_EPOUT_ADDR);
 8013f2c:	2101      	movs	r1, #1
 8013f2e:	6878      	ldr	r0, [r7, #4]
 8013f30:	f005 f9cd 	bl	80192ce <USBD_LL_StallEP>
  }
}
 8013f34:	bf00      	nop
 8013f36:	3710      	adds	r7, #16
 8013f38:	46bd      	mov	sp, r7
 8013f3a:	bd80      	pop	{r7, pc}

08013f3c <MSC_BOT_CplClrFeature>:
* @param  epnum: endpoint index
* @retval None
*/

void  MSC_BOT_CplClrFeature(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8013f3c:	b580      	push	{r7, lr}
 8013f3e:	b084      	sub	sp, #16
 8013f40:	af00      	add	r7, sp, #0
 8013f42:	6078      	str	r0, [r7, #4]
 8013f44:	460b      	mov	r3, r1
 8013f46:	70fb      	strb	r3, [r7, #3]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8013f48:	687b      	ldr	r3, [r7, #4]
 8013f4a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8013f4e:	60fb      	str	r3, [r7, #12]

  if (hmsc->bot_status == USBD_BOT_STATUS_ERROR) /* Bad CBW Signature */
 8013f50:	68fb      	ldr	r3, [r7, #12]
 8013f52:	7a5b      	ldrb	r3, [r3, #9]
 8013f54:	2b02      	cmp	r3, #2
 8013f56:	d108      	bne.n	8013f6a <MSC_BOT_CplClrFeature+0x2e>
  {
    (void)USBD_LL_StallEP(pdev, MSC_EPIN_ADDR);
 8013f58:	2181      	movs	r1, #129	; 0x81
 8013f5a:	6878      	ldr	r0, [r7, #4]
 8013f5c:	f005 f9b7 	bl	80192ce <USBD_LL_StallEP>
    (void)USBD_LL_StallEP(pdev, MSC_EPOUT_ADDR);
 8013f60:	2101      	movs	r1, #1
 8013f62:	6878      	ldr	r0, [r7, #4]
 8013f64:	f005 f9b3 	bl	80192ce <USBD_LL_StallEP>
 8013f68:	e00d      	b.n	8013f86 <MSC_BOT_CplClrFeature+0x4a>
  }
  else if (((epnum & 0x80U) == 0x80U) && (hmsc->bot_status != USBD_BOT_STATUS_RECOVERY))
 8013f6a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8013f6e:	2b00      	cmp	r3, #0
 8013f70:	da08      	bge.n	8013f84 <MSC_BOT_CplClrFeature+0x48>
 8013f72:	68fb      	ldr	r3, [r7, #12]
 8013f74:	7a5b      	ldrb	r3, [r3, #9]
 8013f76:	2b01      	cmp	r3, #1
 8013f78:	d004      	beq.n	8013f84 <MSC_BOT_CplClrFeature+0x48>
  {
    MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
 8013f7a:	2101      	movs	r1, #1
 8013f7c:	6878      	ldr	r0, [r7, #4]
 8013f7e:	f7ff ff79 	bl	8013e74 <MSC_BOT_SendCSW>
 8013f82:	e000      	b.n	8013f86 <MSC_BOT_CplClrFeature+0x4a>
  }
  else
  {
    return;
 8013f84:	bf00      	nop
  }
}
 8013f86:	3710      	adds	r7, #16
 8013f88:	46bd      	mov	sp, r7
 8013f8a:	bd80      	pop	{r7, pc}

08013f8c <SCSI_ProcessCmd>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
int8_t SCSI_ProcessCmd(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *cmd)
{
 8013f8c:	b580      	push	{r7, lr}
 8013f8e:	b086      	sub	sp, #24
 8013f90:	af00      	add	r7, sp, #0
 8013f92:	60f8      	str	r0, [r7, #12]
 8013f94:	460b      	mov	r3, r1
 8013f96:	607a      	str	r2, [r7, #4]
 8013f98:	72fb      	strb	r3, [r7, #11]
  int8_t ret;
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8013f9a:	68fb      	ldr	r3, [r7, #12]
 8013f9c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8013fa0:	613b      	str	r3, [r7, #16]

  switch (cmd[0])
 8013fa2:	687b      	ldr	r3, [r7, #4]
 8013fa4:	781b      	ldrb	r3, [r3, #0]
 8013fa6:	2b25      	cmp	r3, #37	; 0x25
 8013fa8:	d06e      	beq.n	8014088 <SCSI_ProcessCmd+0xfc>
 8013faa:	2b25      	cmp	r3, #37	; 0x25
 8013fac:	dc11      	bgt.n	8013fd2 <SCSI_ProcessCmd+0x46>
 8013fae:	2b1a      	cmp	r3, #26
 8013fb0:	d04f      	beq.n	8014052 <SCSI_ProcessCmd+0xc6>
 8013fb2:	2b1a      	cmp	r3, #26
 8013fb4:	dc06      	bgt.n	8013fc4 <SCSI_ProcessCmd+0x38>
 8013fb6:	2b03      	cmp	r3, #3
 8013fb8:	d027      	beq.n	801400a <SCSI_ProcessCmd+0x7e>
 8013fba:	2b12      	cmp	r3, #18
 8013fbc:	d02e      	beq.n	801401c <SCSI_ProcessCmd+0x90>
 8013fbe:	2b00      	cmp	r3, #0
 8013fc0:	d01a      	beq.n	8013ff8 <SCSI_ProcessCmd+0x6c>
 8013fc2:	e0a0      	b.n	8014106 <SCSI_ProcessCmd+0x17a>
 8013fc4:	2b1e      	cmp	r3, #30
 8013fc6:	d03b      	beq.n	8014040 <SCSI_ProcessCmd+0xb4>
 8013fc8:	2b23      	cmp	r3, #35	; 0x23
 8013fca:	d054      	beq.n	8014076 <SCSI_ProcessCmd+0xea>
 8013fcc:	2b1b      	cmp	r3, #27
 8013fce:	d02e      	beq.n	801402e <SCSI_ProcessCmd+0xa2>
 8013fd0:	e099      	b.n	8014106 <SCSI_ProcessCmd+0x17a>
 8013fd2:	2b5a      	cmp	r3, #90	; 0x5a
 8013fd4:	d046      	beq.n	8014064 <SCSI_ProcessCmd+0xd8>
 8013fd6:	2b5a      	cmp	r3, #90	; 0x5a
 8013fd8:	dc07      	bgt.n	8013fea <SCSI_ProcessCmd+0x5e>
 8013fda:	2b2a      	cmp	r3, #42	; 0x2a
 8013fdc:	d078      	beq.n	80140d0 <SCSI_ProcessCmd+0x144>
 8013fde:	2b2f      	cmp	r3, #47	; 0x2f
 8013fe0:	f000 8088 	beq.w	80140f4 <SCSI_ProcessCmd+0x168>
 8013fe4:	2b28      	cmp	r3, #40	; 0x28
 8013fe6:	d061      	beq.n	80140ac <SCSI_ProcessCmd+0x120>
 8013fe8:	e08d      	b.n	8014106 <SCSI_ProcessCmd+0x17a>
 8013fea:	2ba8      	cmp	r3, #168	; 0xa8
 8013fec:	d067      	beq.n	80140be <SCSI_ProcessCmd+0x132>
 8013fee:	2baa      	cmp	r3, #170	; 0xaa
 8013ff0:	d077      	beq.n	80140e2 <SCSI_ProcessCmd+0x156>
 8013ff2:	2b9e      	cmp	r3, #158	; 0x9e
 8013ff4:	d051      	beq.n	801409a <SCSI_ProcessCmd+0x10e>
 8013ff6:	e086      	b.n	8014106 <SCSI_ProcessCmd+0x17a>
  {
  case SCSI_TEST_UNIT_READY:
    ret = SCSI_TestUnitReady(pdev, lun, cmd);
 8013ff8:	7afb      	ldrb	r3, [r7, #11]
 8013ffa:	687a      	ldr	r2, [r7, #4]
 8013ffc:	4619      	mov	r1, r3
 8013ffe:	68f8      	ldr	r0, [r7, #12]
 8014000:	f000 f893 	bl	801412a <SCSI_TestUnitReady>
 8014004:	4603      	mov	r3, r0
 8014006:	75fb      	strb	r3, [r7, #23]
    break;
 8014008:	e089      	b.n	801411e <SCSI_ProcessCmd+0x192>

  case SCSI_REQUEST_SENSE:
    ret = SCSI_RequestSense(pdev, lun, cmd);
 801400a:	7afb      	ldrb	r3, [r7, #11]
 801400c:	687a      	ldr	r2, [r7, #4]
 801400e:	4619      	mov	r1, r3
 8014010:	68f8      	ldr	r0, [r7, #12]
 8014012:	f000 fb47 	bl	80146a4 <SCSI_RequestSense>
 8014016:	4603      	mov	r3, r0
 8014018:	75fb      	strb	r3, [r7, #23]
    break;
 801401a:	e080      	b.n	801411e <SCSI_ProcessCmd+0x192>

  case SCSI_INQUIRY:
    ret = SCSI_Inquiry(pdev, lun, cmd);
 801401c:	7afb      	ldrb	r3, [r7, #11]
 801401e:	687a      	ldr	r2, [r7, #4]
 8014020:	4619      	mov	r1, r3
 8014022:	68f8      	ldr	r0, [r7, #12]
 8014024:	f000 f8d2 	bl	80141cc <SCSI_Inquiry>
 8014028:	4603      	mov	r3, r0
 801402a:	75fb      	strb	r3, [r7, #23]
    break;
 801402c:	e077      	b.n	801411e <SCSI_ProcessCmd+0x192>

  case SCSI_START_STOP_UNIT:
    ret = SCSI_StartStopUnit(pdev, lun, cmd);
 801402e:	7afb      	ldrb	r3, [r7, #11]
 8014030:	687a      	ldr	r2, [r7, #4]
 8014032:	4619      	mov	r1, r3
 8014034:	68f8      	ldr	r0, [r7, #12]
 8014036:	f000 fc27 	bl	8014888 <SCSI_StartStopUnit>
 801403a:	4603      	mov	r3, r0
 801403c:	75fb      	strb	r3, [r7, #23]
    break;
 801403e:	e06e      	b.n	801411e <SCSI_ProcessCmd+0x192>

  case SCSI_ALLOW_MEDIUM_REMOVAL:
    ret = SCSI_AllowPreventRemovable(pdev, lun, cmd);
 8014040:	7afb      	ldrb	r3, [r7, #11]
 8014042:	687a      	ldr	r2, [r7, #4]
 8014044:	4619      	mov	r1, r3
 8014046:	68f8      	ldr	r0, [r7, #12]
 8014048:	f000 fc71 	bl	801492e <SCSI_AllowPreventRemovable>
 801404c:	4603      	mov	r3, r0
 801404e:	75fb      	strb	r3, [r7, #23]
    break;
 8014050:	e065      	b.n	801411e <SCSI_ProcessCmd+0x192>

  case SCSI_MODE_SENSE6:
    ret = SCSI_ModeSense6(pdev, lun, cmd);
 8014052:	7afb      	ldrb	r3, [r7, #11]
 8014054:	687a      	ldr	r2, [r7, #4]
 8014056:	4619      	mov	r1, r3
 8014058:	68f8      	ldr	r0, [r7, #12]
 801405a:	f000 fad7 	bl	801460c <SCSI_ModeSense6>
 801405e:	4603      	mov	r3, r0
 8014060:	75fb      	strb	r3, [r7, #23]
    break;
 8014062:	e05c      	b.n	801411e <SCSI_ProcessCmd+0x192>

  case SCSI_MODE_SENSE10:
    ret = SCSI_ModeSense10(pdev, lun, cmd);
 8014064:	7afb      	ldrb	r3, [r7, #11]
 8014066:	687a      	ldr	r2, [r7, #4]
 8014068:	4619      	mov	r1, r3
 801406a:	68f8      	ldr	r0, [r7, #12]
 801406c:	f000 faf4 	bl	8014658 <SCSI_ModeSense10>
 8014070:	4603      	mov	r3, r0
 8014072:	75fb      	strb	r3, [r7, #23]
    break;
 8014074:	e053      	b.n	801411e <SCSI_ProcessCmd+0x192>

  case SCSI_READ_FORMAT_CAPACITIES:
    ret = SCSI_ReadFormatCapacity(pdev, lun, cmd);
 8014076:	7afb      	ldrb	r3, [r7, #11]
 8014078:	687a      	ldr	r2, [r7, #4]
 801407a:	4619      	mov	r1, r3
 801407c:	68f8      	ldr	r0, [r7, #12]
 801407e:	f000 fa56 	bl	801452e <SCSI_ReadFormatCapacity>
 8014082:	4603      	mov	r3, r0
 8014084:	75fb      	strb	r3, [r7, #23]
    break;
 8014086:	e04a      	b.n	801411e <SCSI_ProcessCmd+0x192>

  case SCSI_READ_CAPACITY10:
    ret = SCSI_ReadCapacity10(pdev, lun, cmd);
 8014088:	7afb      	ldrb	r3, [r7, #11]
 801408a:	687a      	ldr	r2, [r7, #4]
 801408c:	4619      	mov	r1, r3
 801408e:	68f8      	ldr	r0, [r7, #12]
 8014090:	f000 f910 	bl	80142b4 <SCSI_ReadCapacity10>
 8014094:	4603      	mov	r3, r0
 8014096:	75fb      	strb	r3, [r7, #23]
    break;
 8014098:	e041      	b.n	801411e <SCSI_ProcessCmd+0x192>

  case SCSI_READ_CAPACITY16:
    ret = SCSI_ReadCapacity16(pdev, lun, cmd);
 801409a:	7afb      	ldrb	r3, [r7, #11]
 801409c:	687a      	ldr	r2, [r7, #4]
 801409e:	4619      	mov	r1, r3
 80140a0:	68f8      	ldr	r0, [r7, #12]
 80140a2:	f000 f98b 	bl	80143bc <SCSI_ReadCapacity16>
 80140a6:	4603      	mov	r3, r0
 80140a8:	75fb      	strb	r3, [r7, #23]
    break;
 80140aa:	e038      	b.n	801411e <SCSI_ProcessCmd+0x192>

  case SCSI_READ10:
    ret = SCSI_Read10(pdev, lun, cmd);
 80140ac:	7afb      	ldrb	r3, [r7, #11]
 80140ae:	687a      	ldr	r2, [r7, #4]
 80140b0:	4619      	mov	r1, r3
 80140b2:	68f8      	ldr	r0, [r7, #12]
 80140b4:	f000 fc62 	bl	801497c <SCSI_Read10>
 80140b8:	4603      	mov	r3, r0
 80140ba:	75fb      	strb	r3, [r7, #23]
    break;
 80140bc:	e02f      	b.n	801411e <SCSI_ProcessCmd+0x192>

  case SCSI_READ12:
    ret = SCSI_Read12(pdev, lun, cmd);
 80140be:	7afb      	ldrb	r3, [r7, #11]
 80140c0:	687a      	ldr	r2, [r7, #4]
 80140c2:	4619      	mov	r1, r3
 80140c4:	68f8      	ldr	r0, [r7, #12]
 80140c6:	f000 fd0b 	bl	8014ae0 <SCSI_Read12>
 80140ca:	4603      	mov	r3, r0
 80140cc:	75fb      	strb	r3, [r7, #23]
    break;
 80140ce:	e026      	b.n	801411e <SCSI_ProcessCmd+0x192>

  case SCSI_WRITE10:
    ret = SCSI_Write10(pdev, lun, cmd);
 80140d0:	7afb      	ldrb	r3, [r7, #11]
 80140d2:	687a      	ldr	r2, [r7, #4]
 80140d4:	4619      	mov	r1, r3
 80140d6:	68f8      	ldr	r0, [r7, #12]
 80140d8:	f000 fdbe 	bl	8014c58 <SCSI_Write10>
 80140dc:	4603      	mov	r3, r0
 80140de:	75fb      	strb	r3, [r7, #23]
    break;
 80140e0:	e01d      	b.n	801411e <SCSI_ProcessCmd+0x192>

  case SCSI_WRITE12:
    ret = SCSI_Write12(pdev, lun, cmd);
 80140e2:	7afb      	ldrb	r3, [r7, #11]
 80140e4:	687a      	ldr	r2, [r7, #4]
 80140e6:	4619      	mov	r1, r3
 80140e8:	68f8      	ldr	r0, [r7, #12]
 80140ea:	f000 fe8d 	bl	8014e08 <SCSI_Write12>
 80140ee:	4603      	mov	r3, r0
 80140f0:	75fb      	strb	r3, [r7, #23]
    break;
 80140f2:	e014      	b.n	801411e <SCSI_ProcessCmd+0x192>

  case SCSI_VERIFY10:
    ret = SCSI_Verify10(pdev, lun, cmd);
 80140f4:	7afb      	ldrb	r3, [r7, #11]
 80140f6:	687a      	ldr	r2, [r7, #4]
 80140f8:	4619      	mov	r1, r3
 80140fa:	68f8      	ldr	r0, [r7, #12]
 80140fc:	f000 ff6c 	bl	8014fd8 <SCSI_Verify10>
 8014100:	4603      	mov	r3, r0
 8014102:	75fb      	strb	r3, [r7, #23]
    break;
 8014104:	e00b      	b.n	801411e <SCSI_ProcessCmd+0x192>

  default:
    SCSI_SenseCode(pdev, lun, ILLEGAL_REQUEST, INVALID_CDB);
 8014106:	7af9      	ldrb	r1, [r7, #11]
 8014108:	2320      	movs	r3, #32
 801410a:	2205      	movs	r2, #5
 801410c:	68f8      	ldr	r0, [r7, #12]
 801410e:	f000 fb61 	bl	80147d4 <SCSI_SenseCode>
    hmsc->bot_status = USBD_BOT_STATUS_ERROR;
 8014112:	693b      	ldr	r3, [r7, #16]
 8014114:	2202      	movs	r2, #2
 8014116:	725a      	strb	r2, [r3, #9]
    ret = -1;
 8014118:	23ff      	movs	r3, #255	; 0xff
 801411a:	75fb      	strb	r3, [r7, #23]
    break;
 801411c:	bf00      	nop
  }

  return ret;
 801411e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8014122:	4618      	mov	r0, r3
 8014124:	3718      	adds	r7, #24
 8014126:	46bd      	mov	sp, r7
 8014128:	bd80      	pop	{r7, pc}

0801412a <SCSI_TestUnitReady>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
static int8_t SCSI_TestUnitReady(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 801412a:	b580      	push	{r7, lr}
 801412c:	b086      	sub	sp, #24
 801412e:	af00      	add	r7, sp, #0
 8014130:	60f8      	str	r0, [r7, #12]
 8014132:	460b      	mov	r3, r1
 8014134:	607a      	str	r2, [r7, #4]
 8014136:	72fb      	strb	r3, [r7, #11]
  UNUSED(params);
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8014138:	68fb      	ldr	r3, [r7, #12]
 801413a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 801413e:	617b      	str	r3, [r7, #20]

  /* case 9 : Hi > D0 */
  if (hmsc->cbw.dDataLength != 0U)
 8014140:	697a      	ldr	r2, [r7, #20]
 8014142:	f248 0318 	movw	r3, #32792	; 0x8018
 8014146:	4413      	add	r3, r2
 8014148:	681b      	ldr	r3, [r3, #0]
 801414a:	2b00      	cmp	r3, #0
 801414c:	d00c      	beq.n	8014168 <SCSI_TestUnitReady+0x3e>
  {
    SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 801414e:	697a      	ldr	r2, [r7, #20]
 8014150:	f248 031d 	movw	r3, #32797	; 0x801d
 8014154:	4413      	add	r3, r2
 8014156:	7819      	ldrb	r1, [r3, #0]
 8014158:	2320      	movs	r3, #32
 801415a:	2205      	movs	r2, #5
 801415c:	68f8      	ldr	r0, [r7, #12]
 801415e:	f000 fb39 	bl	80147d4 <SCSI_SenseCode>

    return -1;
 8014162:	f04f 33ff 	mov.w	r3, #4294967295
 8014166:	e02c      	b.n	80141c2 <SCSI_TestUnitReady+0x98>
  }

  if (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED)
 8014168:	697a      	ldr	r2, [r7, #20]
 801416a:	f248 0362 	movw	r3, #32866	; 0x8062
 801416e:	4413      	add	r3, r2
 8014170:	781b      	ldrb	r3, [r3, #0]
 8014172:	2b02      	cmp	r3, #2
 8014174:	d10b      	bne.n	801418e <SCSI_TestUnitReady+0x64>
  {
    SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 8014176:	7af9      	ldrb	r1, [r7, #11]
 8014178:	233a      	movs	r3, #58	; 0x3a
 801417a:	2202      	movs	r2, #2
 801417c:	68f8      	ldr	r0, [r7, #12]
 801417e:	f000 fb29 	bl	80147d4 <SCSI_SenseCode>
    hmsc->bot_state = USBD_BOT_NO_DATA;
 8014182:	697b      	ldr	r3, [r7, #20]
 8014184:	2205      	movs	r2, #5
 8014186:	721a      	strb	r2, [r3, #8]
    return -1;
 8014188:	f04f 33ff 	mov.w	r3, #4294967295
 801418c:	e019      	b.n	80141c2 <SCSI_TestUnitReady+0x98>
  }

  if (((USBD_StorageTypeDef *)pdev->pUserData)->IsReady(lun) != 0)
 801418e:	68fb      	ldr	r3, [r7, #12]
 8014190:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8014194:	689b      	ldr	r3, [r3, #8]
 8014196:	7afa      	ldrb	r2, [r7, #11]
 8014198:	4610      	mov	r0, r2
 801419a:	4798      	blx	r3
 801419c:	4603      	mov	r3, r0
 801419e:	2b00      	cmp	r3, #0
 80141a0:	d00b      	beq.n	80141ba <SCSI_TestUnitReady+0x90>
  {
    SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 80141a2:	7af9      	ldrb	r1, [r7, #11]
 80141a4:	233a      	movs	r3, #58	; 0x3a
 80141a6:	2202      	movs	r2, #2
 80141a8:	68f8      	ldr	r0, [r7, #12]
 80141aa:	f000 fb13 	bl	80147d4 <SCSI_SenseCode>
    hmsc->bot_state = USBD_BOT_NO_DATA;
 80141ae:	697b      	ldr	r3, [r7, #20]
 80141b0:	2205      	movs	r2, #5
 80141b2:	721a      	strb	r2, [r3, #8]

    return -1;
 80141b4:	f04f 33ff 	mov.w	r3, #4294967295
 80141b8:	e003      	b.n	80141c2 <SCSI_TestUnitReady+0x98>
  }
  hmsc->bot_data_length = 0U;
 80141ba:	697b      	ldr	r3, [r7, #20]
 80141bc:	2200      	movs	r2, #0
 80141be:	60da      	str	r2, [r3, #12]

  return 0;
 80141c0:	2300      	movs	r3, #0
}
 80141c2:	4618      	mov	r0, r3
 80141c4:	3718      	adds	r7, #24
 80141c6:	46bd      	mov	sp, r7
 80141c8:	bd80      	pop	{r7, pc}
	...

080141cc <SCSI_Inquiry>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
static int8_t SCSI_Inquiry(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 80141cc:	b580      	push	{r7, lr}
 80141ce:	b088      	sub	sp, #32
 80141d0:	af00      	add	r7, sp, #0
 80141d2:	60f8      	str	r0, [r7, #12]
 80141d4:	460b      	mov	r3, r1
 80141d6:	607a      	str	r2, [r7, #4]
 80141d8:	72fb      	strb	r3, [r7, #11]
  uint8_t *pPage;
  uint16_t len;
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 80141da:	68fb      	ldr	r3, [r7, #12]
 80141dc:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80141e0:	61bb      	str	r3, [r7, #24]

  if (hmsc->cbw.dDataLength == 0U)
 80141e2:	69ba      	ldr	r2, [r7, #24]
 80141e4:	f248 0318 	movw	r3, #32792	; 0x8018
 80141e8:	4413      	add	r3, r2
 80141ea:	681b      	ldr	r3, [r3, #0]
 80141ec:	2b00      	cmp	r3, #0
 80141ee:	d10c      	bne.n	801420a <SCSI_Inquiry+0x3e>
  {
    SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 80141f0:	69ba      	ldr	r2, [r7, #24]
 80141f2:	f248 031d 	movw	r3, #32797	; 0x801d
 80141f6:	4413      	add	r3, r2
 80141f8:	7819      	ldrb	r1, [r3, #0]
 80141fa:	2320      	movs	r3, #32
 80141fc:	2205      	movs	r2, #5
 80141fe:	68f8      	ldr	r0, [r7, #12]
 8014200:	f000 fae8 	bl	80147d4 <SCSI_SenseCode>
    return -1;
 8014204:	f04f 33ff 	mov.w	r3, #4294967295
 8014208:	e04c      	b.n	80142a4 <SCSI_Inquiry+0xd8>
  }

  if ((params[1] & 0x01U) != 0U) /* Evpd is set */
 801420a:	687b      	ldr	r3, [r7, #4]
 801420c:	3301      	adds	r3, #1
 801420e:	781b      	ldrb	r3, [r3, #0]
 8014210:	f003 0301 	and.w	r3, r3, #1
 8014214:	2b00      	cmp	r3, #0
 8014216:	d022      	beq.n	801425e <SCSI_Inquiry+0x92>
  {
    if (params[2] == 0U) /* Request for Supported Vital Product Data Pages*/
 8014218:	687b      	ldr	r3, [r7, #4]
 801421a:	3302      	adds	r3, #2
 801421c:	781b      	ldrb	r3, [r3, #0]
 801421e:	2b00      	cmp	r3, #0
 8014220:	d105      	bne.n	801422e <SCSI_Inquiry+0x62>
    {
      (void)SCSI_UpdateBotData(hmsc, MSC_Page00_Inquiry_Data, LENGTH_INQUIRY_PAGE00);
 8014222:	2206      	movs	r2, #6
 8014224:	4921      	ldr	r1, [pc, #132]	; (80142ac <SCSI_Inquiry+0xe0>)
 8014226:	69b8      	ldr	r0, [r7, #24]
 8014228:	f001 f862 	bl	80152f0 <SCSI_UpdateBotData>
 801422c:	e039      	b.n	80142a2 <SCSI_Inquiry+0xd6>
    }
    else if (params[2] == 0x80U) /* Request for VPD page 0x80 Unit Serial Number */
 801422e:	687b      	ldr	r3, [r7, #4]
 8014230:	3302      	adds	r3, #2
 8014232:	781b      	ldrb	r3, [r3, #0]
 8014234:	2b80      	cmp	r3, #128	; 0x80
 8014236:	d105      	bne.n	8014244 <SCSI_Inquiry+0x78>
    {
      (void)SCSI_UpdateBotData(hmsc, MSC_Page80_Inquiry_Data, LENGTH_INQUIRY_PAGE80);
 8014238:	2208      	movs	r2, #8
 801423a:	491d      	ldr	r1, [pc, #116]	; (80142b0 <SCSI_Inquiry+0xe4>)
 801423c:	69b8      	ldr	r0, [r7, #24]
 801423e:	f001 f857 	bl	80152f0 <SCSI_UpdateBotData>
 8014242:	e02e      	b.n	80142a2 <SCSI_Inquiry+0xd6>
    }
    else /* Request Not supported */
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST,
 8014244:	69ba      	ldr	r2, [r7, #24]
 8014246:	f248 031d 	movw	r3, #32797	; 0x801d
 801424a:	4413      	add	r3, r2
 801424c:	7819      	ldrb	r1, [r3, #0]
 801424e:	2324      	movs	r3, #36	; 0x24
 8014250:	2205      	movs	r2, #5
 8014252:	68f8      	ldr	r0, [r7, #12]
 8014254:	f000 fabe 	bl	80147d4 <SCSI_SenseCode>
                     INVALID_FIELED_IN_COMMAND);

      return -1;
 8014258:	f04f 33ff 	mov.w	r3, #4294967295
 801425c:	e022      	b.n	80142a4 <SCSI_Inquiry+0xd8>
    }
  }
  else
  {
    pPage = (uint8_t *)&((USBD_StorageTypeDef *)pdev->pUserData)->pInquiry[lun * STANDARD_INQUIRY_DATA_LEN];
 801425e:	68fb      	ldr	r3, [r7, #12]
 8014260:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8014264:	69d9      	ldr	r1, [r3, #28]
 8014266:	7afa      	ldrb	r2, [r7, #11]
 8014268:	4613      	mov	r3, r2
 801426a:	00db      	lsls	r3, r3, #3
 801426c:	4413      	add	r3, r2
 801426e:	009b      	lsls	r3, r3, #2
 8014270:	440b      	add	r3, r1
 8014272:	617b      	str	r3, [r7, #20]
    len = (uint16_t)pPage[4] + 5U;
 8014274:	697b      	ldr	r3, [r7, #20]
 8014276:	3304      	adds	r3, #4
 8014278:	781b      	ldrb	r3, [r3, #0]
 801427a:	b29b      	uxth	r3, r3
 801427c:	3305      	adds	r3, #5
 801427e:	83fb      	strh	r3, [r7, #30]

    if (params[4] <= len)
 8014280:	687b      	ldr	r3, [r7, #4]
 8014282:	3304      	adds	r3, #4
 8014284:	781b      	ldrb	r3, [r3, #0]
 8014286:	b29b      	uxth	r3, r3
 8014288:	8bfa      	ldrh	r2, [r7, #30]
 801428a:	429a      	cmp	r2, r3
 801428c:	d303      	bcc.n	8014296 <SCSI_Inquiry+0xca>
    {
      len = params[4];
 801428e:	687b      	ldr	r3, [r7, #4]
 8014290:	3304      	adds	r3, #4
 8014292:	781b      	ldrb	r3, [r3, #0]
 8014294:	83fb      	strh	r3, [r7, #30]
    }

    (void)SCSI_UpdateBotData(hmsc, pPage, len);
 8014296:	8bfb      	ldrh	r3, [r7, #30]
 8014298:	461a      	mov	r2, r3
 801429a:	6979      	ldr	r1, [r7, #20]
 801429c:	69b8      	ldr	r0, [r7, #24]
 801429e:	f001 f827 	bl	80152f0 <SCSI_UpdateBotData>
  }

  return 0;
 80142a2:	2300      	movs	r3, #0
}
 80142a4:	4618      	mov	r0, r3
 80142a6:	3720      	adds	r7, #32
 80142a8:	46bd      	mov	sp, r7
 80142aa:	bd80      	pop	{r7, pc}
 80142ac:	240000c4 	.word	0x240000c4
 80142b0:	240000cc 	.word	0x240000cc

080142b4 <SCSI_ReadCapacity10>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
static int8_t SCSI_ReadCapacity10(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 80142b4:	b590      	push	{r4, r7, lr}
 80142b6:	b087      	sub	sp, #28
 80142b8:	af00      	add	r7, sp, #0
 80142ba:	60f8      	str	r0, [r7, #12]
 80142bc:	460b      	mov	r3, r1
 80142be:	607a      	str	r2, [r7, #4]
 80142c0:	72fb      	strb	r3, [r7, #11]
  UNUSED(params);
  int8_t ret;
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 80142c2:	68fb      	ldr	r3, [r7, #12]
 80142c4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80142c8:	617b      	str	r3, [r7, #20]

  ret = ((USBD_StorageTypeDef *)pdev->pUserData)->GetCapacity(lun, &hmsc->scsi_blk_nbr, &hmsc->scsi_blk_size);
 80142ca:	68fb      	ldr	r3, [r7, #12]
 80142cc:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80142d0:	685c      	ldr	r4, [r3, #4]
 80142d2:	697a      	ldr	r2, [r7, #20]
 80142d4:	f248 0368 	movw	r3, #32872	; 0x8068
 80142d8:	4413      	add	r3, r2
 80142da:	6979      	ldr	r1, [r7, #20]
 80142dc:	f248 0264 	movw	r2, #32868	; 0x8064
 80142e0:	440a      	add	r2, r1
 80142e2:	7af8      	ldrb	r0, [r7, #11]
 80142e4:	4619      	mov	r1, r3
 80142e6:	47a0      	blx	r4
 80142e8:	4603      	mov	r3, r0
 80142ea:	74fb      	strb	r3, [r7, #19]

  if ((ret != 0) || (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED))
 80142ec:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80142f0:	2b00      	cmp	r3, #0
 80142f2:	d106      	bne.n	8014302 <SCSI_ReadCapacity10+0x4e>
 80142f4:	697a      	ldr	r2, [r7, #20]
 80142f6:	f248 0362 	movw	r3, #32866	; 0x8062
 80142fa:	4413      	add	r3, r2
 80142fc:	781b      	ldrb	r3, [r3, #0]
 80142fe:	2b02      	cmp	r3, #2
 8014300:	d108      	bne.n	8014314 <SCSI_ReadCapacity10+0x60>
  {
    SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 8014302:	7af9      	ldrb	r1, [r7, #11]
 8014304:	233a      	movs	r3, #58	; 0x3a
 8014306:	2202      	movs	r2, #2
 8014308:	68f8      	ldr	r0, [r7, #12]
 801430a:	f000 fa63 	bl	80147d4 <SCSI_SenseCode>
    return -1;
 801430e:	f04f 33ff 	mov.w	r3, #4294967295
 8014312:	e04f      	b.n	80143b4 <SCSI_ReadCapacity10+0x100>
  }

  hmsc->bot_data[0] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >> 24);
 8014314:	697a      	ldr	r2, [r7, #20]
 8014316:	f248 0368 	movw	r3, #32872	; 0x8068
 801431a:	4413      	add	r3, r2
 801431c:	681b      	ldr	r3, [r3, #0]
 801431e:	3b01      	subs	r3, #1
 8014320:	0e1b      	lsrs	r3, r3, #24
 8014322:	b2da      	uxtb	r2, r3
 8014324:	697b      	ldr	r3, [r7, #20]
 8014326:	741a      	strb	r2, [r3, #16]
  hmsc->bot_data[1] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >> 16);
 8014328:	697a      	ldr	r2, [r7, #20]
 801432a:	f248 0368 	movw	r3, #32872	; 0x8068
 801432e:	4413      	add	r3, r2
 8014330:	681b      	ldr	r3, [r3, #0]
 8014332:	3b01      	subs	r3, #1
 8014334:	0c1b      	lsrs	r3, r3, #16
 8014336:	b2da      	uxtb	r2, r3
 8014338:	697b      	ldr	r3, [r7, #20]
 801433a:	745a      	strb	r2, [r3, #17]
  hmsc->bot_data[2] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >>  8);
 801433c:	697a      	ldr	r2, [r7, #20]
 801433e:	f248 0368 	movw	r3, #32872	; 0x8068
 8014342:	4413      	add	r3, r2
 8014344:	681b      	ldr	r3, [r3, #0]
 8014346:	3b01      	subs	r3, #1
 8014348:	0a1b      	lsrs	r3, r3, #8
 801434a:	b2da      	uxtb	r2, r3
 801434c:	697b      	ldr	r3, [r7, #20]
 801434e:	749a      	strb	r2, [r3, #18]
  hmsc->bot_data[3] = (uint8_t)(hmsc->scsi_blk_nbr - 1U);
 8014350:	697a      	ldr	r2, [r7, #20]
 8014352:	f248 0368 	movw	r3, #32872	; 0x8068
 8014356:	4413      	add	r3, r2
 8014358:	681b      	ldr	r3, [r3, #0]
 801435a:	b2db      	uxtb	r3, r3
 801435c:	3b01      	subs	r3, #1
 801435e:	b2da      	uxtb	r2, r3
 8014360:	697b      	ldr	r3, [r7, #20]
 8014362:	74da      	strb	r2, [r3, #19]

  hmsc->bot_data[4] = (uint8_t)(hmsc->scsi_blk_size >>  24);
 8014364:	697a      	ldr	r2, [r7, #20]
 8014366:	f248 0364 	movw	r3, #32868	; 0x8064
 801436a:	4413      	add	r3, r2
 801436c:	881b      	ldrh	r3, [r3, #0]
 801436e:	161b      	asrs	r3, r3, #24
 8014370:	b2da      	uxtb	r2, r3
 8014372:	697b      	ldr	r3, [r7, #20]
 8014374:	751a      	strb	r2, [r3, #20]
  hmsc->bot_data[5] = (uint8_t)(hmsc->scsi_blk_size >>  16);
 8014376:	697a      	ldr	r2, [r7, #20]
 8014378:	f248 0364 	movw	r3, #32868	; 0x8064
 801437c:	4413      	add	r3, r2
 801437e:	881b      	ldrh	r3, [r3, #0]
 8014380:	141b      	asrs	r3, r3, #16
 8014382:	b2da      	uxtb	r2, r3
 8014384:	697b      	ldr	r3, [r7, #20]
 8014386:	755a      	strb	r2, [r3, #21]
  hmsc->bot_data[6] = (uint8_t)(hmsc->scsi_blk_size >>  8);
 8014388:	697a      	ldr	r2, [r7, #20]
 801438a:	f248 0364 	movw	r3, #32868	; 0x8064
 801438e:	4413      	add	r3, r2
 8014390:	881b      	ldrh	r3, [r3, #0]
 8014392:	0a1b      	lsrs	r3, r3, #8
 8014394:	b29b      	uxth	r3, r3
 8014396:	b2da      	uxtb	r2, r3
 8014398:	697b      	ldr	r3, [r7, #20]
 801439a:	759a      	strb	r2, [r3, #22]
  hmsc->bot_data[7] = (uint8_t)(hmsc->scsi_blk_size);
 801439c:	697a      	ldr	r2, [r7, #20]
 801439e:	f248 0364 	movw	r3, #32868	; 0x8064
 80143a2:	4413      	add	r3, r2
 80143a4:	881b      	ldrh	r3, [r3, #0]
 80143a6:	b2da      	uxtb	r2, r3
 80143a8:	697b      	ldr	r3, [r7, #20]
 80143aa:	75da      	strb	r2, [r3, #23]

  hmsc->bot_data_length = 8U;
 80143ac:	697b      	ldr	r3, [r7, #20]
 80143ae:	2208      	movs	r2, #8
 80143b0:	60da      	str	r2, [r3, #12]

  return 0;
 80143b2:	2300      	movs	r3, #0

}
 80143b4:	4618      	mov	r0, r3
 80143b6:	371c      	adds	r7, #28
 80143b8:	46bd      	mov	sp, r7
 80143ba:	bd90      	pop	{r4, r7, pc}

080143bc <SCSI_ReadCapacity16>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
static int8_t SCSI_ReadCapacity16(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 80143bc:	b590      	push	{r4, r7, lr}
 80143be:	b089      	sub	sp, #36	; 0x24
 80143c0:	af00      	add	r7, sp, #0
 80143c2:	60f8      	str	r0, [r7, #12]
 80143c4:	460b      	mov	r3, r1
 80143c6:	607a      	str	r2, [r7, #4]
 80143c8:	72fb      	strb	r3, [r7, #11]
  UNUSED(params);
  uint8_t idx;
  int8_t ret;
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 80143ca:	68fb      	ldr	r3, [r7, #12]
 80143cc:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80143d0:	61bb      	str	r3, [r7, #24]

  ret = ((USBD_StorageTypeDef *)pdev->pUserData)->GetCapacity(lun, &hmsc->scsi_blk_nbr, &hmsc->scsi_blk_size);
 80143d2:	68fb      	ldr	r3, [r7, #12]
 80143d4:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80143d8:	685c      	ldr	r4, [r3, #4]
 80143da:	69ba      	ldr	r2, [r7, #24]
 80143dc:	f248 0368 	movw	r3, #32872	; 0x8068
 80143e0:	4413      	add	r3, r2
 80143e2:	69b9      	ldr	r1, [r7, #24]
 80143e4:	f248 0264 	movw	r2, #32868	; 0x8064
 80143e8:	440a      	add	r2, r1
 80143ea:	7af8      	ldrb	r0, [r7, #11]
 80143ec:	4619      	mov	r1, r3
 80143ee:	47a0      	blx	r4
 80143f0:	4603      	mov	r3, r0
 80143f2:	75fb      	strb	r3, [r7, #23]

  if ((ret != 0) || (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED))
 80143f4:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80143f8:	2b00      	cmp	r3, #0
 80143fa:	d106      	bne.n	801440a <SCSI_ReadCapacity16+0x4e>
 80143fc:	69ba      	ldr	r2, [r7, #24]
 80143fe:	f248 0362 	movw	r3, #32866	; 0x8062
 8014402:	4413      	add	r3, r2
 8014404:	781b      	ldrb	r3, [r3, #0]
 8014406:	2b02      	cmp	r3, #2
 8014408:	d108      	bne.n	801441c <SCSI_ReadCapacity16+0x60>
  {
    SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 801440a:	7af9      	ldrb	r1, [r7, #11]
 801440c:	233a      	movs	r3, #58	; 0x3a
 801440e:	2202      	movs	r2, #2
 8014410:	68f8      	ldr	r0, [r7, #12]
 8014412:	f000 f9df 	bl	80147d4 <SCSI_SenseCode>
    return -1;
 8014416:	f04f 33ff 	mov.w	r3, #4294967295
 801441a:	e084      	b.n	8014526 <SCSI_ReadCapacity16+0x16a>
  }

  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 801441c:	687b      	ldr	r3, [r7, #4]
 801441e:	330a      	adds	r3, #10
 8014420:	781b      	ldrb	r3, [r3, #0]
 8014422:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[11] << 16) |
 8014424:	687b      	ldr	r3, [r7, #4]
 8014426:	330b      	adds	r3, #11
 8014428:	781b      	ldrb	r3, [r3, #0]
 801442a:	041b      	lsls	r3, r3, #16
  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 801442c:	431a      	orrs	r2, r3
                          ((uint32_t)params[12] <<  8) |
 801442e:	687b      	ldr	r3, [r7, #4]
 8014430:	330c      	adds	r3, #12
 8014432:	781b      	ldrb	r3, [r3, #0]
 8014434:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[11] << 16) |
 8014436:	4313      	orrs	r3, r2
                           (uint32_t)params[13];
 8014438:	687a      	ldr	r2, [r7, #4]
 801443a:	320d      	adds	r2, #13
 801443c:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[12] <<  8) |
 801443e:	431a      	orrs	r2, r3
  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 8014440:	69bb      	ldr	r3, [r7, #24]
 8014442:	60da      	str	r2, [r3, #12]

  for (idx = 0U; idx < hmsc->bot_data_length; idx++)
 8014444:	2300      	movs	r3, #0
 8014446:	77fb      	strb	r3, [r7, #31]
 8014448:	e007      	b.n	801445a <SCSI_ReadCapacity16+0x9e>
  {
    hmsc->bot_data[idx] = 0U;
 801444a:	7ffb      	ldrb	r3, [r7, #31]
 801444c:	69ba      	ldr	r2, [r7, #24]
 801444e:	4413      	add	r3, r2
 8014450:	2200      	movs	r2, #0
 8014452:	741a      	strb	r2, [r3, #16]
  for (idx = 0U; idx < hmsc->bot_data_length; idx++)
 8014454:	7ffb      	ldrb	r3, [r7, #31]
 8014456:	3301      	adds	r3, #1
 8014458:	77fb      	strb	r3, [r7, #31]
 801445a:	7ffa      	ldrb	r2, [r7, #31]
 801445c:	69bb      	ldr	r3, [r7, #24]
 801445e:	68db      	ldr	r3, [r3, #12]
 8014460:	429a      	cmp	r2, r3
 8014462:	d3f2      	bcc.n	801444a <SCSI_ReadCapacity16+0x8e>
  }

  hmsc->bot_data[4] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >> 24);
 8014464:	69ba      	ldr	r2, [r7, #24]
 8014466:	f248 0368 	movw	r3, #32872	; 0x8068
 801446a:	4413      	add	r3, r2
 801446c:	681b      	ldr	r3, [r3, #0]
 801446e:	3b01      	subs	r3, #1
 8014470:	0e1b      	lsrs	r3, r3, #24
 8014472:	b2da      	uxtb	r2, r3
 8014474:	69bb      	ldr	r3, [r7, #24]
 8014476:	751a      	strb	r2, [r3, #20]
  hmsc->bot_data[5] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >> 16);
 8014478:	69ba      	ldr	r2, [r7, #24]
 801447a:	f248 0368 	movw	r3, #32872	; 0x8068
 801447e:	4413      	add	r3, r2
 8014480:	681b      	ldr	r3, [r3, #0]
 8014482:	3b01      	subs	r3, #1
 8014484:	0c1b      	lsrs	r3, r3, #16
 8014486:	b2da      	uxtb	r2, r3
 8014488:	69bb      	ldr	r3, [r7, #24]
 801448a:	755a      	strb	r2, [r3, #21]
  hmsc->bot_data[6] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >>  8);
 801448c:	69ba      	ldr	r2, [r7, #24]
 801448e:	f248 0368 	movw	r3, #32872	; 0x8068
 8014492:	4413      	add	r3, r2
 8014494:	681b      	ldr	r3, [r3, #0]
 8014496:	3b01      	subs	r3, #1
 8014498:	0a1b      	lsrs	r3, r3, #8
 801449a:	b2da      	uxtb	r2, r3
 801449c:	69bb      	ldr	r3, [r7, #24]
 801449e:	759a      	strb	r2, [r3, #22]
  hmsc->bot_data[7] = (uint8_t)(hmsc->scsi_blk_nbr - 1U);
 80144a0:	69ba      	ldr	r2, [r7, #24]
 80144a2:	f248 0368 	movw	r3, #32872	; 0x8068
 80144a6:	4413      	add	r3, r2
 80144a8:	681b      	ldr	r3, [r3, #0]
 80144aa:	b2db      	uxtb	r3, r3
 80144ac:	3b01      	subs	r3, #1
 80144ae:	b2da      	uxtb	r2, r3
 80144b0:	69bb      	ldr	r3, [r7, #24]
 80144b2:	75da      	strb	r2, [r3, #23]

  hmsc->bot_data[8] = (uint8_t)(hmsc->scsi_blk_size >>  24);
 80144b4:	69ba      	ldr	r2, [r7, #24]
 80144b6:	f248 0364 	movw	r3, #32868	; 0x8064
 80144ba:	4413      	add	r3, r2
 80144bc:	881b      	ldrh	r3, [r3, #0]
 80144be:	161b      	asrs	r3, r3, #24
 80144c0:	b2da      	uxtb	r2, r3
 80144c2:	69bb      	ldr	r3, [r7, #24]
 80144c4:	761a      	strb	r2, [r3, #24]
  hmsc->bot_data[9] = (uint8_t)(hmsc->scsi_blk_size >>  16);
 80144c6:	69ba      	ldr	r2, [r7, #24]
 80144c8:	f248 0364 	movw	r3, #32868	; 0x8064
 80144cc:	4413      	add	r3, r2
 80144ce:	881b      	ldrh	r3, [r3, #0]
 80144d0:	141b      	asrs	r3, r3, #16
 80144d2:	b2da      	uxtb	r2, r3
 80144d4:	69bb      	ldr	r3, [r7, #24]
 80144d6:	765a      	strb	r2, [r3, #25]
  hmsc->bot_data[10] = (uint8_t)(hmsc->scsi_blk_size >>  8);
 80144d8:	69ba      	ldr	r2, [r7, #24]
 80144da:	f248 0364 	movw	r3, #32868	; 0x8064
 80144de:	4413      	add	r3, r2
 80144e0:	881b      	ldrh	r3, [r3, #0]
 80144e2:	0a1b      	lsrs	r3, r3, #8
 80144e4:	b29b      	uxth	r3, r3
 80144e6:	b2da      	uxtb	r2, r3
 80144e8:	69bb      	ldr	r3, [r7, #24]
 80144ea:	769a      	strb	r2, [r3, #26]
  hmsc->bot_data[11] = (uint8_t)(hmsc->scsi_blk_size);
 80144ec:	69ba      	ldr	r2, [r7, #24]
 80144ee:	f248 0364 	movw	r3, #32868	; 0x8064
 80144f2:	4413      	add	r3, r2
 80144f4:	881b      	ldrh	r3, [r3, #0]
 80144f6:	b2da      	uxtb	r2, r3
 80144f8:	69bb      	ldr	r3, [r7, #24]
 80144fa:	76da      	strb	r2, [r3, #27]

  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 80144fc:	687b      	ldr	r3, [r7, #4]
 80144fe:	330a      	adds	r3, #10
 8014500:	781b      	ldrb	r3, [r3, #0]
 8014502:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[11] << 16) |
 8014504:	687b      	ldr	r3, [r7, #4]
 8014506:	330b      	adds	r3, #11
 8014508:	781b      	ldrb	r3, [r3, #0]
 801450a:	041b      	lsls	r3, r3, #16
  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 801450c:	431a      	orrs	r2, r3
                          ((uint32_t)params[12] <<  8) |
 801450e:	687b      	ldr	r3, [r7, #4]
 8014510:	330c      	adds	r3, #12
 8014512:	781b      	ldrb	r3, [r3, #0]
 8014514:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[11] << 16) |
 8014516:	4313      	orrs	r3, r2
                           (uint32_t)params[13];
 8014518:	687a      	ldr	r2, [r7, #4]
 801451a:	320d      	adds	r2, #13
 801451c:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[12] <<  8) |
 801451e:	431a      	orrs	r2, r3
  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 8014520:	69bb      	ldr	r3, [r7, #24]
 8014522:	60da      	str	r2, [r3, #12]

  return 0;
 8014524:	2300      	movs	r3, #0
}
 8014526:	4618      	mov	r0, r3
 8014528:	3724      	adds	r7, #36	; 0x24
 801452a:	46bd      	mov	sp, r7
 801452c:	bd90      	pop	{r4, r7, pc}

0801452e <SCSI_ReadFormatCapacity>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
static int8_t SCSI_ReadFormatCapacity(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 801452e:	b580      	push	{r7, lr}
 8014530:	b088      	sub	sp, #32
 8014532:	af00      	add	r7, sp, #0
 8014534:	60f8      	str	r0, [r7, #12]
 8014536:	460b      	mov	r3, r1
 8014538:	607a      	str	r2, [r7, #4]
 801453a:	72fb      	strb	r3, [r7, #11]
  UNUSED(params);
  uint16_t blk_size;
  uint32_t blk_nbr;
  uint16_t i;
  int8_t ret;
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 801453c:	68fb      	ldr	r3, [r7, #12]
 801453e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8014542:	61bb      	str	r3, [r7, #24]

  ret = ((USBD_StorageTypeDef *)pdev->pUserData)->GetCapacity(lun, &blk_nbr, &blk_size);
 8014544:	68fb      	ldr	r3, [r7, #12]
 8014546:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 801454a:	685b      	ldr	r3, [r3, #4]
 801454c:	f107 0214 	add.w	r2, r7, #20
 8014550:	f107 0110 	add.w	r1, r7, #16
 8014554:	7af8      	ldrb	r0, [r7, #11]
 8014556:	4798      	blx	r3
 8014558:	4603      	mov	r3, r0
 801455a:	75fb      	strb	r3, [r7, #23]

  if ((ret != 0) || (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED))
 801455c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8014560:	2b00      	cmp	r3, #0
 8014562:	d106      	bne.n	8014572 <SCSI_ReadFormatCapacity+0x44>
 8014564:	69ba      	ldr	r2, [r7, #24]
 8014566:	f248 0362 	movw	r3, #32866	; 0x8062
 801456a:	4413      	add	r3, r2
 801456c:	781b      	ldrb	r3, [r3, #0]
 801456e:	2b02      	cmp	r3, #2
 8014570:	d108      	bne.n	8014584 <SCSI_ReadFormatCapacity+0x56>
  {
    SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 8014572:	7af9      	ldrb	r1, [r7, #11]
 8014574:	233a      	movs	r3, #58	; 0x3a
 8014576:	2202      	movs	r2, #2
 8014578:	68f8      	ldr	r0, [r7, #12]
 801457a:	f000 f92b 	bl	80147d4 <SCSI_SenseCode>
    return -1;
 801457e:	f04f 33ff 	mov.w	r3, #4294967295
 8014582:	e03e      	b.n	8014602 <SCSI_ReadFormatCapacity+0xd4>
  }

  for (i = 0U; i < 12U ; i++)
 8014584:	2300      	movs	r3, #0
 8014586:	83fb      	strh	r3, [r7, #30]
 8014588:	e007      	b.n	801459a <SCSI_ReadFormatCapacity+0x6c>
  {
    hmsc->bot_data[i] = 0U;
 801458a:	8bfb      	ldrh	r3, [r7, #30]
 801458c:	69ba      	ldr	r2, [r7, #24]
 801458e:	4413      	add	r3, r2
 8014590:	2200      	movs	r2, #0
 8014592:	741a      	strb	r2, [r3, #16]
  for (i = 0U; i < 12U ; i++)
 8014594:	8bfb      	ldrh	r3, [r7, #30]
 8014596:	3301      	adds	r3, #1
 8014598:	83fb      	strh	r3, [r7, #30]
 801459a:	8bfb      	ldrh	r3, [r7, #30]
 801459c:	2b0b      	cmp	r3, #11
 801459e:	d9f4      	bls.n	801458a <SCSI_ReadFormatCapacity+0x5c>
  }

  hmsc->bot_data[3] = 0x08U;
 80145a0:	69bb      	ldr	r3, [r7, #24]
 80145a2:	2208      	movs	r2, #8
 80145a4:	74da      	strb	r2, [r3, #19]
  hmsc->bot_data[4] = (uint8_t)((blk_nbr - 1U) >> 24);
 80145a6:	693b      	ldr	r3, [r7, #16]
 80145a8:	3b01      	subs	r3, #1
 80145aa:	0e1b      	lsrs	r3, r3, #24
 80145ac:	b2da      	uxtb	r2, r3
 80145ae:	69bb      	ldr	r3, [r7, #24]
 80145b0:	751a      	strb	r2, [r3, #20]
  hmsc->bot_data[5] = (uint8_t)((blk_nbr - 1U) >> 16);
 80145b2:	693b      	ldr	r3, [r7, #16]
 80145b4:	3b01      	subs	r3, #1
 80145b6:	0c1b      	lsrs	r3, r3, #16
 80145b8:	b2da      	uxtb	r2, r3
 80145ba:	69bb      	ldr	r3, [r7, #24]
 80145bc:	755a      	strb	r2, [r3, #21]
  hmsc->bot_data[6] = (uint8_t)((blk_nbr - 1U) >>  8);
 80145be:	693b      	ldr	r3, [r7, #16]
 80145c0:	3b01      	subs	r3, #1
 80145c2:	0a1b      	lsrs	r3, r3, #8
 80145c4:	b2da      	uxtb	r2, r3
 80145c6:	69bb      	ldr	r3, [r7, #24]
 80145c8:	759a      	strb	r2, [r3, #22]
  hmsc->bot_data[7] = (uint8_t)(blk_nbr - 1U);
 80145ca:	693b      	ldr	r3, [r7, #16]
 80145cc:	b2db      	uxtb	r3, r3
 80145ce:	3b01      	subs	r3, #1
 80145d0:	b2da      	uxtb	r2, r3
 80145d2:	69bb      	ldr	r3, [r7, #24]
 80145d4:	75da      	strb	r2, [r3, #23]

  hmsc->bot_data[8] = 0x02U;
 80145d6:	69bb      	ldr	r3, [r7, #24]
 80145d8:	2202      	movs	r2, #2
 80145da:	761a      	strb	r2, [r3, #24]
  hmsc->bot_data[9] = (uint8_t)(blk_size >>  16);
 80145dc:	8abb      	ldrh	r3, [r7, #20]
 80145de:	141b      	asrs	r3, r3, #16
 80145e0:	b2da      	uxtb	r2, r3
 80145e2:	69bb      	ldr	r3, [r7, #24]
 80145e4:	765a      	strb	r2, [r3, #25]
  hmsc->bot_data[10] = (uint8_t)(blk_size >>  8);
 80145e6:	8abb      	ldrh	r3, [r7, #20]
 80145e8:	0a1b      	lsrs	r3, r3, #8
 80145ea:	b29b      	uxth	r3, r3
 80145ec:	b2da      	uxtb	r2, r3
 80145ee:	69bb      	ldr	r3, [r7, #24]
 80145f0:	769a      	strb	r2, [r3, #26]
  hmsc->bot_data[11] = (uint8_t)(blk_size);
 80145f2:	8abb      	ldrh	r3, [r7, #20]
 80145f4:	b2da      	uxtb	r2, r3
 80145f6:	69bb      	ldr	r3, [r7, #24]
 80145f8:	76da      	strb	r2, [r3, #27]

  hmsc->bot_data_length = 12U;
 80145fa:	69bb      	ldr	r3, [r7, #24]
 80145fc:	220c      	movs	r2, #12
 80145fe:	60da      	str	r2, [r3, #12]

  return 0;
 8014600:	2300      	movs	r3, #0
}
 8014602:	4618      	mov	r0, r3
 8014604:	3720      	adds	r7, #32
 8014606:	46bd      	mov	sp, r7
 8014608:	bd80      	pop	{r7, pc}
	...

0801460c <SCSI_ModeSense6>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
static int8_t SCSI_ModeSense6(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 801460c:	b580      	push	{r7, lr}
 801460e:	b086      	sub	sp, #24
 8014610:	af00      	add	r7, sp, #0
 8014612:	60f8      	str	r0, [r7, #12]
 8014614:	460b      	mov	r3, r1
 8014616:	607a      	str	r2, [r7, #4]
 8014618:	72fb      	strb	r3, [r7, #11]
  UNUSED(lun);
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 801461a:	68fb      	ldr	r3, [r7, #12]
 801461c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8014620:	613b      	str	r3, [r7, #16]
  uint16_t len = MODE_SENSE6_LEN;
 8014622:	2317      	movs	r3, #23
 8014624:	82fb      	strh	r3, [r7, #22]

  if (params[4] <= len)
 8014626:	687b      	ldr	r3, [r7, #4]
 8014628:	3304      	adds	r3, #4
 801462a:	781b      	ldrb	r3, [r3, #0]
 801462c:	b29b      	uxth	r3, r3
 801462e:	8afa      	ldrh	r2, [r7, #22]
 8014630:	429a      	cmp	r2, r3
 8014632:	d303      	bcc.n	801463c <SCSI_ModeSense6+0x30>
  {
    len = params[4];
 8014634:	687b      	ldr	r3, [r7, #4]
 8014636:	3304      	adds	r3, #4
 8014638:	781b      	ldrb	r3, [r3, #0]
 801463a:	82fb      	strh	r3, [r7, #22]
  }

  (void)SCSI_UpdateBotData(hmsc, MSC_Mode_Sense6_data, len);
 801463c:	8afb      	ldrh	r3, [r7, #22]
 801463e:	461a      	mov	r2, r3
 8014640:	4904      	ldr	r1, [pc, #16]	; (8014654 <SCSI_ModeSense6+0x48>)
 8014642:	6938      	ldr	r0, [r7, #16]
 8014644:	f000 fe54 	bl	80152f0 <SCSI_UpdateBotData>

  return 0;
 8014648:	2300      	movs	r3, #0
}
 801464a:	4618      	mov	r0, r3
 801464c:	3718      	adds	r7, #24
 801464e:	46bd      	mov	sp, r7
 8014650:	bd80      	pop	{r7, pc}
 8014652:	bf00      	nop
 8014654:	240000d4 	.word	0x240000d4

08014658 <SCSI_ModeSense10>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
static int8_t SCSI_ModeSense10(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8014658:	b580      	push	{r7, lr}
 801465a:	b086      	sub	sp, #24
 801465c:	af00      	add	r7, sp, #0
 801465e:	60f8      	str	r0, [r7, #12]
 8014660:	460b      	mov	r3, r1
 8014662:	607a      	str	r2, [r7, #4]
 8014664:	72fb      	strb	r3, [r7, #11]
  UNUSED(lun);
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8014666:	68fb      	ldr	r3, [r7, #12]
 8014668:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 801466c:	613b      	str	r3, [r7, #16]
  uint16_t len = MODE_SENSE10_LEN;
 801466e:	231b      	movs	r3, #27
 8014670:	82fb      	strh	r3, [r7, #22]

  if (params[8] <= len)
 8014672:	687b      	ldr	r3, [r7, #4]
 8014674:	3308      	adds	r3, #8
 8014676:	781b      	ldrb	r3, [r3, #0]
 8014678:	b29b      	uxth	r3, r3
 801467a:	8afa      	ldrh	r2, [r7, #22]
 801467c:	429a      	cmp	r2, r3
 801467e:	d303      	bcc.n	8014688 <SCSI_ModeSense10+0x30>
  {
    len = params[8];
 8014680:	687b      	ldr	r3, [r7, #4]
 8014682:	3308      	adds	r3, #8
 8014684:	781b      	ldrb	r3, [r3, #0]
 8014686:	82fb      	strh	r3, [r7, #22]
  }

  (void)SCSI_UpdateBotData(hmsc, MSC_Mode_Sense10_data, len);
 8014688:	8afb      	ldrh	r3, [r7, #22]
 801468a:	461a      	mov	r2, r3
 801468c:	4904      	ldr	r1, [pc, #16]	; (80146a0 <SCSI_ModeSense10+0x48>)
 801468e:	6938      	ldr	r0, [r7, #16]
 8014690:	f000 fe2e 	bl	80152f0 <SCSI_UpdateBotData>

  return 0;
 8014694:	2300      	movs	r3, #0
}
 8014696:	4618      	mov	r0, r3
 8014698:	3718      	adds	r7, #24
 801469a:	46bd      	mov	sp, r7
 801469c:	bd80      	pop	{r7, pc}
 801469e:	bf00      	nop
 80146a0:	240000ec 	.word	0x240000ec

080146a4 <SCSI_RequestSense>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
static int8_t SCSI_RequestSense(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 80146a4:	b580      	push	{r7, lr}
 80146a6:	b086      	sub	sp, #24
 80146a8:	af00      	add	r7, sp, #0
 80146aa:	60f8      	str	r0, [r7, #12]
 80146ac:	460b      	mov	r3, r1
 80146ae:	607a      	str	r2, [r7, #4]
 80146b0:	72fb      	strb	r3, [r7, #11]
  UNUSED(lun);
  uint8_t i;
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 80146b2:	68fb      	ldr	r3, [r7, #12]
 80146b4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80146b8:	613b      	str	r3, [r7, #16]

  if (hmsc->cbw.dDataLength == 0U)
 80146ba:	693a      	ldr	r2, [r7, #16]
 80146bc:	f248 0318 	movw	r3, #32792	; 0x8018
 80146c0:	4413      	add	r3, r2
 80146c2:	681b      	ldr	r3, [r3, #0]
 80146c4:	2b00      	cmp	r3, #0
 80146c6:	d10c      	bne.n	80146e2 <SCSI_RequestSense+0x3e>
  {
    SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 80146c8:	693a      	ldr	r2, [r7, #16]
 80146ca:	f248 031d 	movw	r3, #32797	; 0x801d
 80146ce:	4413      	add	r3, r2
 80146d0:	7819      	ldrb	r1, [r3, #0]
 80146d2:	2320      	movs	r3, #32
 80146d4:	2205      	movs	r2, #5
 80146d6:	68f8      	ldr	r0, [r7, #12]
 80146d8:	f000 f87c 	bl	80147d4 <SCSI_SenseCode>
    return -1;
 80146dc:	f04f 33ff 	mov.w	r3, #4294967295
 80146e0:	e074      	b.n	80147cc <SCSI_RequestSense+0x128>
  }

  for (i = 0U; i < REQUEST_SENSE_DATA_LEN; i++)
 80146e2:	2300      	movs	r3, #0
 80146e4:	75fb      	strb	r3, [r7, #23]
 80146e6:	e007      	b.n	80146f8 <SCSI_RequestSense+0x54>
  {
    hmsc->bot_data[i] = 0U;
 80146e8:	7dfb      	ldrb	r3, [r7, #23]
 80146ea:	693a      	ldr	r2, [r7, #16]
 80146ec:	4413      	add	r3, r2
 80146ee:	2200      	movs	r2, #0
 80146f0:	741a      	strb	r2, [r3, #16]
  for (i = 0U; i < REQUEST_SENSE_DATA_LEN; i++)
 80146f2:	7dfb      	ldrb	r3, [r7, #23]
 80146f4:	3301      	adds	r3, #1
 80146f6:	75fb      	strb	r3, [r7, #23]
 80146f8:	7dfb      	ldrb	r3, [r7, #23]
 80146fa:	2b11      	cmp	r3, #17
 80146fc:	d9f4      	bls.n	80146e8 <SCSI_RequestSense+0x44>
  }

  hmsc->bot_data[0] = 0x70U;
 80146fe:	693b      	ldr	r3, [r7, #16]
 8014700:	2270      	movs	r2, #112	; 0x70
 8014702:	741a      	strb	r2, [r3, #16]
  hmsc->bot_data[7] = REQUEST_SENSE_DATA_LEN - 6U;
 8014704:	693b      	ldr	r3, [r7, #16]
 8014706:	220c      	movs	r2, #12
 8014708:	75da      	strb	r2, [r3, #23]

  if ((hmsc->scsi_sense_head != hmsc->scsi_sense_tail))
 801470a:	693a      	ldr	r2, [r7, #16]
 801470c:	f248 0360 	movw	r3, #32864	; 0x8060
 8014710:	4413      	add	r3, r2
 8014712:	781a      	ldrb	r2, [r3, #0]
 8014714:	6939      	ldr	r1, [r7, #16]
 8014716:	f248 0361 	movw	r3, #32865	; 0x8061
 801471a:	440b      	add	r3, r1
 801471c:	781b      	ldrb	r3, [r3, #0]
 801471e:	429a      	cmp	r2, r3
 8014720:	d045      	beq.n	80147ae <SCSI_RequestSense+0x10a>
  {
    hmsc->bot_data[2] = (uint8_t)hmsc->scsi_sense[hmsc->scsi_sense_head].Skey;
 8014722:	693a      	ldr	r2, [r7, #16]
 8014724:	f248 0360 	movw	r3, #32864	; 0x8060
 8014728:	4413      	add	r3, r2
 801472a:	781b      	ldrb	r3, [r3, #0]
 801472c:	4619      	mov	r1, r3
 801472e:	693a      	ldr	r2, [r7, #16]
 8014730:	f241 0308 	movw	r3, #4104	; 0x1008
 8014734:	440b      	add	r3, r1
 8014736:	f812 2033 	ldrb.w	r2, [r2, r3, lsl #3]
 801473a:	693b      	ldr	r3, [r7, #16]
 801473c:	749a      	strb	r2, [r3, #18]
    hmsc->bot_data[12] = (uint8_t)hmsc->scsi_sense[hmsc->scsi_sense_head].w.b.ASC;
 801473e:	693a      	ldr	r2, [r7, #16]
 8014740:	f248 0360 	movw	r3, #32864	; 0x8060
 8014744:	4413      	add	r3, r2
 8014746:	781b      	ldrb	r3, [r3, #0]
 8014748:	4619      	mov	r1, r3
 801474a:	693a      	ldr	r2, [r7, #16]
 801474c:	f241 0308 	movw	r3, #4104	; 0x1008
 8014750:	440b      	add	r3, r1
 8014752:	00db      	lsls	r3, r3, #3
 8014754:	4413      	add	r3, r2
 8014756:	791a      	ldrb	r2, [r3, #4]
 8014758:	693b      	ldr	r3, [r7, #16]
 801475a:	771a      	strb	r2, [r3, #28]
    hmsc->bot_data[13] = (uint8_t)hmsc->scsi_sense[hmsc->scsi_sense_head].w.b.ASCQ;
 801475c:	693a      	ldr	r2, [r7, #16]
 801475e:	f248 0360 	movw	r3, #32864	; 0x8060
 8014762:	4413      	add	r3, r2
 8014764:	781b      	ldrb	r3, [r3, #0]
 8014766:	4619      	mov	r1, r3
 8014768:	693a      	ldr	r2, [r7, #16]
 801476a:	f241 0308 	movw	r3, #4104	; 0x1008
 801476e:	440b      	add	r3, r1
 8014770:	00db      	lsls	r3, r3, #3
 8014772:	4413      	add	r3, r2
 8014774:	795a      	ldrb	r2, [r3, #5]
 8014776:	693b      	ldr	r3, [r7, #16]
 8014778:	775a      	strb	r2, [r3, #29]
    hmsc->scsi_sense_head++;
 801477a:	693a      	ldr	r2, [r7, #16]
 801477c:	f248 0360 	movw	r3, #32864	; 0x8060
 8014780:	4413      	add	r3, r2
 8014782:	781b      	ldrb	r3, [r3, #0]
 8014784:	3301      	adds	r3, #1
 8014786:	b2d9      	uxtb	r1, r3
 8014788:	693a      	ldr	r2, [r7, #16]
 801478a:	f248 0360 	movw	r3, #32864	; 0x8060
 801478e:	4413      	add	r3, r2
 8014790:	460a      	mov	r2, r1
 8014792:	701a      	strb	r2, [r3, #0]

    if (hmsc->scsi_sense_head == SENSE_LIST_DEEPTH)
 8014794:	693a      	ldr	r2, [r7, #16]
 8014796:	f248 0360 	movw	r3, #32864	; 0x8060
 801479a:	4413      	add	r3, r2
 801479c:	781b      	ldrb	r3, [r3, #0]
 801479e:	2b04      	cmp	r3, #4
 80147a0:	d105      	bne.n	80147ae <SCSI_RequestSense+0x10a>
    {
      hmsc->scsi_sense_head = 0U;
 80147a2:	693a      	ldr	r2, [r7, #16]
 80147a4:	f248 0360 	movw	r3, #32864	; 0x8060
 80147a8:	4413      	add	r3, r2
 80147aa:	2200      	movs	r2, #0
 80147ac:	701a      	strb	r2, [r3, #0]
    }
  }

  hmsc->bot_data_length = REQUEST_SENSE_DATA_LEN;
 80147ae:	693b      	ldr	r3, [r7, #16]
 80147b0:	2212      	movs	r2, #18
 80147b2:	60da      	str	r2, [r3, #12]

  if (params[4] <= REQUEST_SENSE_DATA_LEN)
 80147b4:	687b      	ldr	r3, [r7, #4]
 80147b6:	3304      	adds	r3, #4
 80147b8:	781b      	ldrb	r3, [r3, #0]
 80147ba:	2b12      	cmp	r3, #18
 80147bc:	d805      	bhi.n	80147ca <SCSI_RequestSense+0x126>
  {
    hmsc->bot_data_length = params[4];
 80147be:	687b      	ldr	r3, [r7, #4]
 80147c0:	3304      	adds	r3, #4
 80147c2:	781b      	ldrb	r3, [r3, #0]
 80147c4:	461a      	mov	r2, r3
 80147c6:	693b      	ldr	r3, [r7, #16]
 80147c8:	60da      	str	r2, [r3, #12]
  }

  return 0;
 80147ca:	2300      	movs	r3, #0
}
 80147cc:	4618      	mov	r0, r3
 80147ce:	3718      	adds	r7, #24
 80147d0:	46bd      	mov	sp, r7
 80147d2:	bd80      	pop	{r7, pc}

080147d4 <SCSI_SenseCode>:
* @param  ASC: Additional Sense Code
* @retval none

*/
void SCSI_SenseCode(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t sKey, uint8_t ASC)
{
 80147d4:	b480      	push	{r7}
 80147d6:	b085      	sub	sp, #20
 80147d8:	af00      	add	r7, sp, #0
 80147da:	6078      	str	r0, [r7, #4]
 80147dc:	4608      	mov	r0, r1
 80147de:	4611      	mov	r1, r2
 80147e0:	461a      	mov	r2, r3
 80147e2:	4603      	mov	r3, r0
 80147e4:	70fb      	strb	r3, [r7, #3]
 80147e6:	460b      	mov	r3, r1
 80147e8:	70bb      	strb	r3, [r7, #2]
 80147ea:	4613      	mov	r3, r2
 80147ec:	707b      	strb	r3, [r7, #1]
  UNUSED(lun);
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 80147ee:	687b      	ldr	r3, [r7, #4]
 80147f0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80147f4:	60fb      	str	r3, [r7, #12]

  hmsc->scsi_sense[hmsc->scsi_sense_tail].Skey = sKey;
 80147f6:	68fa      	ldr	r2, [r7, #12]
 80147f8:	f248 0361 	movw	r3, #32865	; 0x8061
 80147fc:	4413      	add	r3, r2
 80147fe:	781b      	ldrb	r3, [r3, #0]
 8014800:	4619      	mov	r1, r3
 8014802:	68fa      	ldr	r2, [r7, #12]
 8014804:	f241 0308 	movw	r3, #4104	; 0x1008
 8014808:	440b      	add	r3, r1
 801480a:	78b9      	ldrb	r1, [r7, #2]
 801480c:	f802 1033 	strb.w	r1, [r2, r3, lsl #3]
  hmsc->scsi_sense[hmsc->scsi_sense_tail].w.b.ASC = ASC;
 8014810:	68fa      	ldr	r2, [r7, #12]
 8014812:	f248 0361 	movw	r3, #32865	; 0x8061
 8014816:	4413      	add	r3, r2
 8014818:	781b      	ldrb	r3, [r3, #0]
 801481a:	4619      	mov	r1, r3
 801481c:	68fa      	ldr	r2, [r7, #12]
 801481e:	f241 0308 	movw	r3, #4104	; 0x1008
 8014822:	440b      	add	r3, r1
 8014824:	00db      	lsls	r3, r3, #3
 8014826:	4413      	add	r3, r2
 8014828:	787a      	ldrb	r2, [r7, #1]
 801482a:	711a      	strb	r2, [r3, #4]
  hmsc->scsi_sense[hmsc->scsi_sense_tail].w.b.ASCQ = 0U;
 801482c:	68fa      	ldr	r2, [r7, #12]
 801482e:	f248 0361 	movw	r3, #32865	; 0x8061
 8014832:	4413      	add	r3, r2
 8014834:	781b      	ldrb	r3, [r3, #0]
 8014836:	4619      	mov	r1, r3
 8014838:	68fa      	ldr	r2, [r7, #12]
 801483a:	f241 0308 	movw	r3, #4104	; 0x1008
 801483e:	440b      	add	r3, r1
 8014840:	00db      	lsls	r3, r3, #3
 8014842:	4413      	add	r3, r2
 8014844:	2200      	movs	r2, #0
 8014846:	715a      	strb	r2, [r3, #5]
  hmsc->scsi_sense_tail++;
 8014848:	68fa      	ldr	r2, [r7, #12]
 801484a:	f248 0361 	movw	r3, #32865	; 0x8061
 801484e:	4413      	add	r3, r2
 8014850:	781b      	ldrb	r3, [r3, #0]
 8014852:	3301      	adds	r3, #1
 8014854:	b2d9      	uxtb	r1, r3
 8014856:	68fa      	ldr	r2, [r7, #12]
 8014858:	f248 0361 	movw	r3, #32865	; 0x8061
 801485c:	4413      	add	r3, r2
 801485e:	460a      	mov	r2, r1
 8014860:	701a      	strb	r2, [r3, #0]

  if (hmsc->scsi_sense_tail == SENSE_LIST_DEEPTH)
 8014862:	68fa      	ldr	r2, [r7, #12]
 8014864:	f248 0361 	movw	r3, #32865	; 0x8061
 8014868:	4413      	add	r3, r2
 801486a:	781b      	ldrb	r3, [r3, #0]
 801486c:	2b04      	cmp	r3, #4
 801486e:	d105      	bne.n	801487c <SCSI_SenseCode+0xa8>
  {
    hmsc->scsi_sense_tail = 0U;
 8014870:	68fa      	ldr	r2, [r7, #12]
 8014872:	f248 0361 	movw	r3, #32865	; 0x8061
 8014876:	4413      	add	r3, r2
 8014878:	2200      	movs	r2, #0
 801487a:	701a      	strb	r2, [r3, #0]
  }
}
 801487c:	bf00      	nop
 801487e:	3714      	adds	r7, #20
 8014880:	46bd      	mov	sp, r7
 8014882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014886:	4770      	bx	lr

08014888 <SCSI_StartStopUnit>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
static int8_t SCSI_StartStopUnit(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8014888:	b580      	push	{r7, lr}
 801488a:	b086      	sub	sp, #24
 801488c:	af00      	add	r7, sp, #0
 801488e:	60f8      	str	r0, [r7, #12]
 8014890:	460b      	mov	r3, r1
 8014892:	607a      	str	r2, [r7, #4]
 8014894:	72fb      	strb	r3, [r7, #11]
  UNUSED(lun);
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8014896:	68fb      	ldr	r3, [r7, #12]
 8014898:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 801489c:	617b      	str	r3, [r7, #20]

  if ((hmsc->scsi_medium_state == SCSI_MEDIUM_LOCKED) && ((params[4] & 0x3U) == 2U))
 801489e:	697a      	ldr	r2, [r7, #20]
 80148a0:	f248 0362 	movw	r3, #32866	; 0x8062
 80148a4:	4413      	add	r3, r2
 80148a6:	781b      	ldrb	r3, [r3, #0]
 80148a8:	2b01      	cmp	r3, #1
 80148aa:	d10f      	bne.n	80148cc <SCSI_StartStopUnit+0x44>
 80148ac:	687b      	ldr	r3, [r7, #4]
 80148ae:	3304      	adds	r3, #4
 80148b0:	781b      	ldrb	r3, [r3, #0]
 80148b2:	f003 0303 	and.w	r3, r3, #3
 80148b6:	2b02      	cmp	r3, #2
 80148b8:	d108      	bne.n	80148cc <SCSI_StartStopUnit+0x44>
  {
    SCSI_SenseCode(pdev, lun, ILLEGAL_REQUEST, INVALID_FIELED_IN_COMMAND);
 80148ba:	7af9      	ldrb	r1, [r7, #11]
 80148bc:	2324      	movs	r3, #36	; 0x24
 80148be:	2205      	movs	r2, #5
 80148c0:	68f8      	ldr	r0, [r7, #12]
 80148c2:	f7ff ff87 	bl	80147d4 <SCSI_SenseCode>

    return -1;
 80148c6:	f04f 33ff 	mov.w	r3, #4294967295
 80148ca:	e02c      	b.n	8014926 <SCSI_StartStopUnit+0x9e>
  }

  if ((params[4] & 0x3U) == 0x1U) /* START=1 */
 80148cc:	687b      	ldr	r3, [r7, #4]
 80148ce:	3304      	adds	r3, #4
 80148d0:	781b      	ldrb	r3, [r3, #0]
 80148d2:	f003 0303 	and.w	r3, r3, #3
 80148d6:	2b01      	cmp	r3, #1
 80148d8:	d106      	bne.n	80148e8 <SCSI_StartStopUnit+0x60>
  {
    hmsc->scsi_medium_state = SCSI_MEDIUM_UNLOCKED;
 80148da:	697a      	ldr	r2, [r7, #20]
 80148dc:	f248 0362 	movw	r3, #32866	; 0x8062
 80148e0:	4413      	add	r3, r2
 80148e2:	2200      	movs	r2, #0
 80148e4:	701a      	strb	r2, [r3, #0]
 80148e6:	e01a      	b.n	801491e <SCSI_StartStopUnit+0x96>
  }
  else if ((params[4] & 0x3U) == 0x2U) /* START=0 and LOEJ Load Eject=1 */
 80148e8:	687b      	ldr	r3, [r7, #4]
 80148ea:	3304      	adds	r3, #4
 80148ec:	781b      	ldrb	r3, [r3, #0]
 80148ee:	f003 0303 	and.w	r3, r3, #3
 80148f2:	2b02      	cmp	r3, #2
 80148f4:	d106      	bne.n	8014904 <SCSI_StartStopUnit+0x7c>
  {
    hmsc->scsi_medium_state = SCSI_MEDIUM_EJECTED;
 80148f6:	697a      	ldr	r2, [r7, #20]
 80148f8:	f248 0362 	movw	r3, #32866	; 0x8062
 80148fc:	4413      	add	r3, r2
 80148fe:	2202      	movs	r2, #2
 8014900:	701a      	strb	r2, [r3, #0]
 8014902:	e00c      	b.n	801491e <SCSI_StartStopUnit+0x96>
  }
  else if ((params[4] & 0x3U) == 0x3U) /* START=1 and LOEJ Load Eject=1 */
 8014904:	687b      	ldr	r3, [r7, #4]
 8014906:	3304      	adds	r3, #4
 8014908:	781b      	ldrb	r3, [r3, #0]
 801490a:	f003 0303 	and.w	r3, r3, #3
 801490e:	2b03      	cmp	r3, #3
 8014910:	d105      	bne.n	801491e <SCSI_StartStopUnit+0x96>
  {
    hmsc->scsi_medium_state = SCSI_MEDIUM_UNLOCKED;
 8014912:	697a      	ldr	r2, [r7, #20]
 8014914:	f248 0362 	movw	r3, #32866	; 0x8062
 8014918:	4413      	add	r3, r2
 801491a:	2200      	movs	r2, #0
 801491c:	701a      	strb	r2, [r3, #0]
  }
  else
  {
    /* .. */
  }
  hmsc->bot_data_length = 0U;
 801491e:	697b      	ldr	r3, [r7, #20]
 8014920:	2200      	movs	r2, #0
 8014922:	60da      	str	r2, [r3, #12]

  return 0;
 8014924:	2300      	movs	r3, #0
}
 8014926:	4618      	mov	r0, r3
 8014928:	3718      	adds	r7, #24
 801492a:	46bd      	mov	sp, r7
 801492c:	bd80      	pop	{r7, pc}

0801492e <SCSI_AllowPreventRemovable>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
static int8_t SCSI_AllowPreventRemovable(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 801492e:	b480      	push	{r7}
 8014930:	b087      	sub	sp, #28
 8014932:	af00      	add	r7, sp, #0
 8014934:	60f8      	str	r0, [r7, #12]
 8014936:	460b      	mov	r3, r1
 8014938:	607a      	str	r2, [r7, #4]
 801493a:	72fb      	strb	r3, [r7, #11]
  UNUSED(lun);
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 801493c:	68fb      	ldr	r3, [r7, #12]
 801493e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8014942:	617b      	str	r3, [r7, #20]

  if (params[4] == 0U)
 8014944:	687b      	ldr	r3, [r7, #4]
 8014946:	3304      	adds	r3, #4
 8014948:	781b      	ldrb	r3, [r3, #0]
 801494a:	2b00      	cmp	r3, #0
 801494c:	d106      	bne.n	801495c <SCSI_AllowPreventRemovable+0x2e>
  {
    hmsc->scsi_medium_state = SCSI_MEDIUM_UNLOCKED;
 801494e:	697a      	ldr	r2, [r7, #20]
 8014950:	f248 0362 	movw	r3, #32866	; 0x8062
 8014954:	4413      	add	r3, r2
 8014956:	2200      	movs	r2, #0
 8014958:	701a      	strb	r2, [r3, #0]
 801495a:	e005      	b.n	8014968 <SCSI_AllowPreventRemovable+0x3a>
  }
  else
  {
    hmsc->scsi_medium_state = SCSI_MEDIUM_LOCKED;
 801495c:	697a      	ldr	r2, [r7, #20]
 801495e:	f248 0362 	movw	r3, #32866	; 0x8062
 8014962:	4413      	add	r3, r2
 8014964:	2201      	movs	r2, #1
 8014966:	701a      	strb	r2, [r3, #0]
  }

  hmsc->bot_data_length = 0U;
 8014968:	697b      	ldr	r3, [r7, #20]
 801496a:	2200      	movs	r2, #0
 801496c:	60da      	str	r2, [r3, #12]

  return 0;
 801496e:	2300      	movs	r3, #0
}
 8014970:	4618      	mov	r0, r3
 8014972:	371c      	adds	r7, #28
 8014974:	46bd      	mov	sp, r7
 8014976:	f85d 7b04 	ldr.w	r7, [sp], #4
 801497a:	4770      	bx	lr

0801497c <SCSI_Read10>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
static int8_t SCSI_Read10(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 801497c:	b580      	push	{r7, lr}
 801497e:	b086      	sub	sp, #24
 8014980:	af00      	add	r7, sp, #0
 8014982:	60f8      	str	r0, [r7, #12]
 8014984:	460b      	mov	r3, r1
 8014986:	607a      	str	r2, [r7, #4]
 8014988:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 801498a:	68fb      	ldr	r3, [r7, #12]
 801498c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8014990:	617b      	str	r3, [r7, #20]

  if (hmsc->bot_state == USBD_BOT_IDLE) /* Idle */
 8014992:	697b      	ldr	r3, [r7, #20]
 8014994:	7a1b      	ldrb	r3, [r3, #8]
 8014996:	2b00      	cmp	r3, #0
 8014998:	f040 8094 	bne.w	8014ac4 <SCSI_Read10+0x148>
  {
    /* case 10 : Ho <> Di */
    if ((hmsc->cbw.bmFlags & 0x80U) != 0x80U)
 801499c:	697a      	ldr	r2, [r7, #20]
 801499e:	f248 031c 	movw	r3, #32796	; 0x801c
 80149a2:	4413      	add	r3, r2
 80149a4:	781b      	ldrb	r3, [r3, #0]
 80149a6:	b25b      	sxtb	r3, r3
 80149a8:	2b00      	cmp	r3, #0
 80149aa:	db0c      	blt.n	80149c6 <SCSI_Read10+0x4a>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 80149ac:	697a      	ldr	r2, [r7, #20]
 80149ae:	f248 031d 	movw	r3, #32797	; 0x801d
 80149b2:	4413      	add	r3, r2
 80149b4:	7819      	ldrb	r1, [r3, #0]
 80149b6:	2320      	movs	r3, #32
 80149b8:	2205      	movs	r2, #5
 80149ba:	68f8      	ldr	r0, [r7, #12]
 80149bc:	f7ff ff0a 	bl	80147d4 <SCSI_SenseCode>
      return -1;
 80149c0:	f04f 33ff 	mov.w	r3, #4294967295
 80149c4:	e088      	b.n	8014ad8 <SCSI_Read10+0x15c>
    }

    if (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED)
 80149c6:	697a      	ldr	r2, [r7, #20]
 80149c8:	f248 0362 	movw	r3, #32866	; 0x8062
 80149cc:	4413      	add	r3, r2
 80149ce:	781b      	ldrb	r3, [r3, #0]
 80149d0:	2b02      	cmp	r3, #2
 80149d2:	d108      	bne.n	80149e6 <SCSI_Read10+0x6a>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 80149d4:	7af9      	ldrb	r1, [r7, #11]
 80149d6:	233a      	movs	r3, #58	; 0x3a
 80149d8:	2202      	movs	r2, #2
 80149da:	68f8      	ldr	r0, [r7, #12]
 80149dc:	f7ff fefa 	bl	80147d4 <SCSI_SenseCode>

      return -1;
 80149e0:	f04f 33ff 	mov.w	r3, #4294967295
 80149e4:	e078      	b.n	8014ad8 <SCSI_Read10+0x15c>
    }

    if (((USBD_StorageTypeDef *)pdev->pUserData)->IsReady(lun) != 0)
 80149e6:	68fb      	ldr	r3, [r7, #12]
 80149e8:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80149ec:	689b      	ldr	r3, [r3, #8]
 80149ee:	7afa      	ldrb	r2, [r7, #11]
 80149f0:	4610      	mov	r0, r2
 80149f2:	4798      	blx	r3
 80149f4:	4603      	mov	r3, r0
 80149f6:	2b00      	cmp	r3, #0
 80149f8:	d008      	beq.n	8014a0c <SCSI_Read10+0x90>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 80149fa:	7af9      	ldrb	r1, [r7, #11]
 80149fc:	233a      	movs	r3, #58	; 0x3a
 80149fe:	2202      	movs	r2, #2
 8014a00:	68f8      	ldr	r0, [r7, #12]
 8014a02:	f7ff fee7 	bl	80147d4 <SCSI_SenseCode>
      return -1;
 8014a06:	f04f 33ff 	mov.w	r3, #4294967295
 8014a0a:	e065      	b.n	8014ad8 <SCSI_Read10+0x15c>
    }

    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 8014a0c:	687b      	ldr	r3, [r7, #4]
 8014a0e:	3302      	adds	r3, #2
 8014a10:	781b      	ldrb	r3, [r3, #0]
 8014a12:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[3] << 16) |
 8014a14:	687b      	ldr	r3, [r7, #4]
 8014a16:	3303      	adds	r3, #3
 8014a18:	781b      	ldrb	r3, [r3, #0]
 8014a1a:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 8014a1c:	431a      	orrs	r2, r3
                          ((uint32_t)params[4] <<  8) |
 8014a1e:	687b      	ldr	r3, [r7, #4]
 8014a20:	3304      	adds	r3, #4
 8014a22:	781b      	ldrb	r3, [r3, #0]
 8014a24:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[3] << 16) |
 8014a26:	4313      	orrs	r3, r2
                          (uint32_t)params[5];
 8014a28:	687a      	ldr	r2, [r7, #4]
 8014a2a:	3205      	adds	r2, #5
 8014a2c:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[4] <<  8) |
 8014a2e:	431a      	orrs	r2, r3
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 8014a30:	6979      	ldr	r1, [r7, #20]
 8014a32:	f248 036c 	movw	r3, #32876	; 0x806c
 8014a36:	440b      	add	r3, r1
 8014a38:	601a      	str	r2, [r3, #0]

    hmsc->scsi_blk_len = ((uint32_t)params[7] <<  8) | (uint32_t)params[8];
 8014a3a:	687b      	ldr	r3, [r7, #4]
 8014a3c:	3307      	adds	r3, #7
 8014a3e:	781b      	ldrb	r3, [r3, #0]
 8014a40:	021b      	lsls	r3, r3, #8
 8014a42:	687a      	ldr	r2, [r7, #4]
 8014a44:	3208      	adds	r2, #8
 8014a46:	7812      	ldrb	r2, [r2, #0]
 8014a48:	431a      	orrs	r2, r3
 8014a4a:	6979      	ldr	r1, [r7, #20]
 8014a4c:	f248 0370 	movw	r3, #32880	; 0x8070
 8014a50:	440b      	add	r3, r1
 8014a52:	601a      	str	r2, [r3, #0]

    if (SCSI_CheckAddressRange(pdev, lun, hmsc->scsi_blk_addr,
 8014a54:	697a      	ldr	r2, [r7, #20]
 8014a56:	f248 036c 	movw	r3, #32876	; 0x806c
 8014a5a:	4413      	add	r3, r2
 8014a5c:	6818      	ldr	r0, [r3, #0]
 8014a5e:	697a      	ldr	r2, [r7, #20]
 8014a60:	f248 0370 	movw	r3, #32880	; 0x8070
 8014a64:	4413      	add	r3, r2
 8014a66:	681b      	ldr	r3, [r3, #0]
 8014a68:	7af9      	ldrb	r1, [r7, #11]
 8014a6a:	4602      	mov	r2, r0
 8014a6c:	68f8      	ldr	r0, [r7, #12]
 8014a6e:	f000 faeb 	bl	8015048 <SCSI_CheckAddressRange>
 8014a72:	4603      	mov	r3, r0
 8014a74:	2b00      	cmp	r3, #0
 8014a76:	da02      	bge.n	8014a7e <SCSI_Read10+0x102>
                               hmsc->scsi_blk_len) < 0)
    {
      return -1; /* error */
 8014a78:	f04f 33ff 	mov.w	r3, #4294967295
 8014a7c:	e02c      	b.n	8014ad8 <SCSI_Read10+0x15c>
    }

    /* cases 4,5 : Hi <> Dn */
    if (hmsc->cbw.dDataLength != (hmsc->scsi_blk_len * hmsc->scsi_blk_size))
 8014a7e:	697a      	ldr	r2, [r7, #20]
 8014a80:	f248 0318 	movw	r3, #32792	; 0x8018
 8014a84:	4413      	add	r3, r2
 8014a86:	681a      	ldr	r2, [r3, #0]
 8014a88:	6979      	ldr	r1, [r7, #20]
 8014a8a:	f248 0370 	movw	r3, #32880	; 0x8070
 8014a8e:	440b      	add	r3, r1
 8014a90:	6819      	ldr	r1, [r3, #0]
 8014a92:	6978      	ldr	r0, [r7, #20]
 8014a94:	f248 0364 	movw	r3, #32868	; 0x8064
 8014a98:	4403      	add	r3, r0
 8014a9a:	881b      	ldrh	r3, [r3, #0]
 8014a9c:	fb03 f301 	mul.w	r3, r3, r1
 8014aa0:	429a      	cmp	r2, r3
 8014aa2:	d00c      	beq.n	8014abe <SCSI_Read10+0x142>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8014aa4:	697a      	ldr	r2, [r7, #20]
 8014aa6:	f248 031d 	movw	r3, #32797	; 0x801d
 8014aaa:	4413      	add	r3, r2
 8014aac:	7819      	ldrb	r1, [r3, #0]
 8014aae:	2320      	movs	r3, #32
 8014ab0:	2205      	movs	r2, #5
 8014ab2:	68f8      	ldr	r0, [r7, #12]
 8014ab4:	f7ff fe8e 	bl	80147d4 <SCSI_SenseCode>
      return -1;
 8014ab8:	f04f 33ff 	mov.w	r3, #4294967295
 8014abc:	e00c      	b.n	8014ad8 <SCSI_Read10+0x15c>
    }

    hmsc->bot_state = USBD_BOT_DATA_IN;
 8014abe:	697b      	ldr	r3, [r7, #20]
 8014ac0:	2202      	movs	r2, #2
 8014ac2:	721a      	strb	r2, [r3, #8]
  }
  hmsc->bot_data_length = MSC_MEDIA_PACKET;
 8014ac4:	697b      	ldr	r3, [r7, #20]
 8014ac6:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8014aca:	60da      	str	r2, [r3, #12]

  return SCSI_ProcessRead(pdev, lun);
 8014acc:	7afb      	ldrb	r3, [r7, #11]
 8014ace:	4619      	mov	r1, r3
 8014ad0:	68f8      	ldr	r0, [r7, #12]
 8014ad2:	f000 fadd 	bl	8015090 <SCSI_ProcessRead>
 8014ad6:	4603      	mov	r3, r0
}
 8014ad8:	4618      	mov	r0, r3
 8014ada:	3718      	adds	r7, #24
 8014adc:	46bd      	mov	sp, r7
 8014ade:	bd80      	pop	{r7, pc}

08014ae0 <SCSI_Read12>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
static int8_t SCSI_Read12(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8014ae0:	b580      	push	{r7, lr}
 8014ae2:	b086      	sub	sp, #24
 8014ae4:	af00      	add	r7, sp, #0
 8014ae6:	60f8      	str	r0, [r7, #12]
 8014ae8:	460b      	mov	r3, r1
 8014aea:	607a      	str	r2, [r7, #4]
 8014aec:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8014aee:	68fb      	ldr	r3, [r7, #12]
 8014af0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8014af4:	617b      	str	r3, [r7, #20]

  if (hmsc->bot_state == USBD_BOT_IDLE) /* Idle */
 8014af6:	697b      	ldr	r3, [r7, #20]
 8014af8:	7a1b      	ldrb	r3, [r3, #8]
 8014afa:	2b00      	cmp	r3, #0
 8014afc:	f040 809e 	bne.w	8014c3c <SCSI_Read12+0x15c>
  {
    /* case 10 : Ho <> Di */
    if ((hmsc->cbw.bmFlags & 0x80U) != 0x80U)
 8014b00:	697a      	ldr	r2, [r7, #20]
 8014b02:	f248 031c 	movw	r3, #32796	; 0x801c
 8014b06:	4413      	add	r3, r2
 8014b08:	781b      	ldrb	r3, [r3, #0]
 8014b0a:	b25b      	sxtb	r3, r3
 8014b0c:	2b00      	cmp	r3, #0
 8014b0e:	db0c      	blt.n	8014b2a <SCSI_Read12+0x4a>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8014b10:	697a      	ldr	r2, [r7, #20]
 8014b12:	f248 031d 	movw	r3, #32797	; 0x801d
 8014b16:	4413      	add	r3, r2
 8014b18:	7819      	ldrb	r1, [r3, #0]
 8014b1a:	2320      	movs	r3, #32
 8014b1c:	2205      	movs	r2, #5
 8014b1e:	68f8      	ldr	r0, [r7, #12]
 8014b20:	f7ff fe58 	bl	80147d4 <SCSI_SenseCode>
      return -1;
 8014b24:	f04f 33ff 	mov.w	r3, #4294967295
 8014b28:	e092      	b.n	8014c50 <SCSI_Read12+0x170>
    }

    if (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED)
 8014b2a:	697a      	ldr	r2, [r7, #20]
 8014b2c:	f248 0362 	movw	r3, #32866	; 0x8062
 8014b30:	4413      	add	r3, r2
 8014b32:	781b      	ldrb	r3, [r3, #0]
 8014b34:	2b02      	cmp	r3, #2
 8014b36:	d108      	bne.n	8014b4a <SCSI_Read12+0x6a>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 8014b38:	7af9      	ldrb	r1, [r7, #11]
 8014b3a:	233a      	movs	r3, #58	; 0x3a
 8014b3c:	2202      	movs	r2, #2
 8014b3e:	68f8      	ldr	r0, [r7, #12]
 8014b40:	f7ff fe48 	bl	80147d4 <SCSI_SenseCode>
      return -1;
 8014b44:	f04f 33ff 	mov.w	r3, #4294967295
 8014b48:	e082      	b.n	8014c50 <SCSI_Read12+0x170>
    }

    if (((USBD_StorageTypeDef *)pdev->pUserData)->IsReady(lun) != 0)
 8014b4a:	68fb      	ldr	r3, [r7, #12]
 8014b4c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8014b50:	689b      	ldr	r3, [r3, #8]
 8014b52:	7afa      	ldrb	r2, [r7, #11]
 8014b54:	4610      	mov	r0, r2
 8014b56:	4798      	blx	r3
 8014b58:	4603      	mov	r3, r0
 8014b5a:	2b00      	cmp	r3, #0
 8014b5c:	d008      	beq.n	8014b70 <SCSI_Read12+0x90>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 8014b5e:	7af9      	ldrb	r1, [r7, #11]
 8014b60:	233a      	movs	r3, #58	; 0x3a
 8014b62:	2202      	movs	r2, #2
 8014b64:	68f8      	ldr	r0, [r7, #12]
 8014b66:	f7ff fe35 	bl	80147d4 <SCSI_SenseCode>
      return -1;
 8014b6a:	f04f 33ff 	mov.w	r3, #4294967295
 8014b6e:	e06f      	b.n	8014c50 <SCSI_Read12+0x170>
    }

    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 8014b70:	687b      	ldr	r3, [r7, #4]
 8014b72:	3302      	adds	r3, #2
 8014b74:	781b      	ldrb	r3, [r3, #0]
 8014b76:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[3] << 16) |
 8014b78:	687b      	ldr	r3, [r7, #4]
 8014b7a:	3303      	adds	r3, #3
 8014b7c:	781b      	ldrb	r3, [r3, #0]
 8014b7e:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 8014b80:	431a      	orrs	r2, r3
                          ((uint32_t)params[4] <<  8) |
 8014b82:	687b      	ldr	r3, [r7, #4]
 8014b84:	3304      	adds	r3, #4
 8014b86:	781b      	ldrb	r3, [r3, #0]
 8014b88:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[3] << 16) |
 8014b8a:	4313      	orrs	r3, r2
                          (uint32_t)params[5];
 8014b8c:	687a      	ldr	r2, [r7, #4]
 8014b8e:	3205      	adds	r2, #5
 8014b90:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[4] <<  8) |
 8014b92:	431a      	orrs	r2, r3
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 8014b94:	6979      	ldr	r1, [r7, #20]
 8014b96:	f248 036c 	movw	r3, #32876	; 0x806c
 8014b9a:	440b      	add	r3, r1
 8014b9c:	601a      	str	r2, [r3, #0]

    hmsc->scsi_blk_len = ((uint32_t)params[6] << 24) |
 8014b9e:	687b      	ldr	r3, [r7, #4]
 8014ba0:	3306      	adds	r3, #6
 8014ba2:	781b      	ldrb	r3, [r3, #0]
 8014ba4:	061a      	lsls	r2, r3, #24
                         ((uint32_t)params[7] << 16) |
 8014ba6:	687b      	ldr	r3, [r7, #4]
 8014ba8:	3307      	adds	r3, #7
 8014baa:	781b      	ldrb	r3, [r3, #0]
 8014bac:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_len = ((uint32_t)params[6] << 24) |
 8014bae:	431a      	orrs	r2, r3
                         ((uint32_t)params[8] << 8) |
 8014bb0:	687b      	ldr	r3, [r7, #4]
 8014bb2:	3308      	adds	r3, #8
 8014bb4:	781b      	ldrb	r3, [r3, #0]
 8014bb6:	021b      	lsls	r3, r3, #8
                         ((uint32_t)params[7] << 16) |
 8014bb8:	4313      	orrs	r3, r2
                         (uint32_t)params[9];
 8014bba:	687a      	ldr	r2, [r7, #4]
 8014bbc:	3209      	adds	r2, #9
 8014bbe:	7812      	ldrb	r2, [r2, #0]
                         ((uint32_t)params[8] << 8) |
 8014bc0:	431a      	orrs	r2, r3
    hmsc->scsi_blk_len = ((uint32_t)params[6] << 24) |
 8014bc2:	6979      	ldr	r1, [r7, #20]
 8014bc4:	f248 0370 	movw	r3, #32880	; 0x8070
 8014bc8:	440b      	add	r3, r1
 8014bca:	601a      	str	r2, [r3, #0]

    if (SCSI_CheckAddressRange(pdev, lun, hmsc->scsi_blk_addr,
 8014bcc:	697a      	ldr	r2, [r7, #20]
 8014bce:	f248 036c 	movw	r3, #32876	; 0x806c
 8014bd2:	4413      	add	r3, r2
 8014bd4:	6818      	ldr	r0, [r3, #0]
 8014bd6:	697a      	ldr	r2, [r7, #20]
 8014bd8:	f248 0370 	movw	r3, #32880	; 0x8070
 8014bdc:	4413      	add	r3, r2
 8014bde:	681b      	ldr	r3, [r3, #0]
 8014be0:	7af9      	ldrb	r1, [r7, #11]
 8014be2:	4602      	mov	r2, r0
 8014be4:	68f8      	ldr	r0, [r7, #12]
 8014be6:	f000 fa2f 	bl	8015048 <SCSI_CheckAddressRange>
 8014bea:	4603      	mov	r3, r0
 8014bec:	2b00      	cmp	r3, #0
 8014bee:	da02      	bge.n	8014bf6 <SCSI_Read12+0x116>
                               hmsc->scsi_blk_len) < 0)
    {
      return -1; /* error */
 8014bf0:	f04f 33ff 	mov.w	r3, #4294967295
 8014bf4:	e02c      	b.n	8014c50 <SCSI_Read12+0x170>
    }

    /* cases 4,5 : Hi <> Dn */
    if (hmsc->cbw.dDataLength != (hmsc->scsi_blk_len * hmsc->scsi_blk_size))
 8014bf6:	697a      	ldr	r2, [r7, #20]
 8014bf8:	f248 0318 	movw	r3, #32792	; 0x8018
 8014bfc:	4413      	add	r3, r2
 8014bfe:	681a      	ldr	r2, [r3, #0]
 8014c00:	6979      	ldr	r1, [r7, #20]
 8014c02:	f248 0370 	movw	r3, #32880	; 0x8070
 8014c06:	440b      	add	r3, r1
 8014c08:	6819      	ldr	r1, [r3, #0]
 8014c0a:	6978      	ldr	r0, [r7, #20]
 8014c0c:	f248 0364 	movw	r3, #32868	; 0x8064
 8014c10:	4403      	add	r3, r0
 8014c12:	881b      	ldrh	r3, [r3, #0]
 8014c14:	fb03 f301 	mul.w	r3, r3, r1
 8014c18:	429a      	cmp	r2, r3
 8014c1a:	d00c      	beq.n	8014c36 <SCSI_Read12+0x156>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8014c1c:	697a      	ldr	r2, [r7, #20]
 8014c1e:	f248 031d 	movw	r3, #32797	; 0x801d
 8014c22:	4413      	add	r3, r2
 8014c24:	7819      	ldrb	r1, [r3, #0]
 8014c26:	2320      	movs	r3, #32
 8014c28:	2205      	movs	r2, #5
 8014c2a:	68f8      	ldr	r0, [r7, #12]
 8014c2c:	f7ff fdd2 	bl	80147d4 <SCSI_SenseCode>
      return -1;
 8014c30:	f04f 33ff 	mov.w	r3, #4294967295
 8014c34:	e00c      	b.n	8014c50 <SCSI_Read12+0x170>
    }

    hmsc->bot_state = USBD_BOT_DATA_IN;
 8014c36:	697b      	ldr	r3, [r7, #20]
 8014c38:	2202      	movs	r2, #2
 8014c3a:	721a      	strb	r2, [r3, #8]
  }
  hmsc->bot_data_length = MSC_MEDIA_PACKET;
 8014c3c:	697b      	ldr	r3, [r7, #20]
 8014c3e:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8014c42:	60da      	str	r2, [r3, #12]

  return SCSI_ProcessRead(pdev, lun);
 8014c44:	7afb      	ldrb	r3, [r7, #11]
 8014c46:	4619      	mov	r1, r3
 8014c48:	68f8      	ldr	r0, [r7, #12]
 8014c4a:	f000 fa21 	bl	8015090 <SCSI_ProcessRead>
 8014c4e:	4603      	mov	r3, r0
}
 8014c50:	4618      	mov	r0, r3
 8014c52:	3718      	adds	r7, #24
 8014c54:	46bd      	mov	sp, r7
 8014c56:	bd80      	pop	{r7, pc}

08014c58 <SCSI_Write10>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
static int8_t SCSI_Write10(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8014c58:	b580      	push	{r7, lr}
 8014c5a:	b086      	sub	sp, #24
 8014c5c:	af00      	add	r7, sp, #0
 8014c5e:	60f8      	str	r0, [r7, #12]
 8014c60:	460b      	mov	r3, r1
 8014c62:	607a      	str	r2, [r7, #4]
 8014c64:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8014c66:	68fb      	ldr	r3, [r7, #12]
 8014c68:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8014c6c:	617b      	str	r3, [r7, #20]
  uint32_t len;

  if (hmsc->bot_state == USBD_BOT_IDLE) /* Idle */
 8014c6e:	697b      	ldr	r3, [r7, #20]
 8014c70:	7a1b      	ldrb	r3, [r3, #8]
 8014c72:	2b00      	cmp	r3, #0
 8014c74:	f040 80be 	bne.w	8014df4 <SCSI_Write10+0x19c>
  {
    if (hmsc->cbw.dDataLength == 0U)
 8014c78:	697a      	ldr	r2, [r7, #20]
 8014c7a:	f248 0318 	movw	r3, #32792	; 0x8018
 8014c7e:	4413      	add	r3, r2
 8014c80:	681b      	ldr	r3, [r3, #0]
 8014c82:	2b00      	cmp	r3, #0
 8014c84:	d10c      	bne.n	8014ca0 <SCSI_Write10+0x48>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8014c86:	697a      	ldr	r2, [r7, #20]
 8014c88:	f248 031d 	movw	r3, #32797	; 0x801d
 8014c8c:	4413      	add	r3, r2
 8014c8e:	7819      	ldrb	r1, [r3, #0]
 8014c90:	2320      	movs	r3, #32
 8014c92:	2205      	movs	r2, #5
 8014c94:	68f8      	ldr	r0, [r7, #12]
 8014c96:	f7ff fd9d 	bl	80147d4 <SCSI_SenseCode>
      return -1;
 8014c9a:	f04f 33ff 	mov.w	r3, #4294967295
 8014c9e:	e0af      	b.n	8014e00 <SCSI_Write10+0x1a8>
    }

    /* case 8 : Hi <> Do */
    if ((hmsc->cbw.bmFlags & 0x80U) == 0x80U)
 8014ca0:	697a      	ldr	r2, [r7, #20]
 8014ca2:	f248 031c 	movw	r3, #32796	; 0x801c
 8014ca6:	4413      	add	r3, r2
 8014ca8:	781b      	ldrb	r3, [r3, #0]
 8014caa:	b25b      	sxtb	r3, r3
 8014cac:	2b00      	cmp	r3, #0
 8014cae:	da0c      	bge.n	8014cca <SCSI_Write10+0x72>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8014cb0:	697a      	ldr	r2, [r7, #20]
 8014cb2:	f248 031d 	movw	r3, #32797	; 0x801d
 8014cb6:	4413      	add	r3, r2
 8014cb8:	7819      	ldrb	r1, [r3, #0]
 8014cba:	2320      	movs	r3, #32
 8014cbc:	2205      	movs	r2, #5
 8014cbe:	68f8      	ldr	r0, [r7, #12]
 8014cc0:	f7ff fd88 	bl	80147d4 <SCSI_SenseCode>
      return -1;
 8014cc4:	f04f 33ff 	mov.w	r3, #4294967295
 8014cc8:	e09a      	b.n	8014e00 <SCSI_Write10+0x1a8>
    }

    /* Check whether Media is ready */
    if (((USBD_StorageTypeDef *)pdev->pUserData)->IsReady(lun) != 0)
 8014cca:	68fb      	ldr	r3, [r7, #12]
 8014ccc:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8014cd0:	689b      	ldr	r3, [r3, #8]
 8014cd2:	7afa      	ldrb	r2, [r7, #11]
 8014cd4:	4610      	mov	r0, r2
 8014cd6:	4798      	blx	r3
 8014cd8:	4603      	mov	r3, r0
 8014cda:	2b00      	cmp	r3, #0
 8014cdc:	d008      	beq.n	8014cf0 <SCSI_Write10+0x98>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 8014cde:	7af9      	ldrb	r1, [r7, #11]
 8014ce0:	233a      	movs	r3, #58	; 0x3a
 8014ce2:	2202      	movs	r2, #2
 8014ce4:	68f8      	ldr	r0, [r7, #12]
 8014ce6:	f7ff fd75 	bl	80147d4 <SCSI_SenseCode>
      return -1;
 8014cea:	f04f 33ff 	mov.w	r3, #4294967295
 8014cee:	e087      	b.n	8014e00 <SCSI_Write10+0x1a8>
    }

    /* Check If media is write-protected */
    if (((USBD_StorageTypeDef *)pdev->pUserData)->IsWriteProtected(lun) != 0)
 8014cf0:	68fb      	ldr	r3, [r7, #12]
 8014cf2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8014cf6:	68db      	ldr	r3, [r3, #12]
 8014cf8:	7afa      	ldrb	r2, [r7, #11]
 8014cfa:	4610      	mov	r0, r2
 8014cfc:	4798      	blx	r3
 8014cfe:	4603      	mov	r3, r0
 8014d00:	2b00      	cmp	r3, #0
 8014d02:	d008      	beq.n	8014d16 <SCSI_Write10+0xbe>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, WRITE_PROTECTED);
 8014d04:	7af9      	ldrb	r1, [r7, #11]
 8014d06:	2327      	movs	r3, #39	; 0x27
 8014d08:	2202      	movs	r2, #2
 8014d0a:	68f8      	ldr	r0, [r7, #12]
 8014d0c:	f7ff fd62 	bl	80147d4 <SCSI_SenseCode>
      return -1;
 8014d10:	f04f 33ff 	mov.w	r3, #4294967295
 8014d14:	e074      	b.n	8014e00 <SCSI_Write10+0x1a8>
    }

    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 8014d16:	687b      	ldr	r3, [r7, #4]
 8014d18:	3302      	adds	r3, #2
 8014d1a:	781b      	ldrb	r3, [r3, #0]
 8014d1c:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[3] << 16) |
 8014d1e:	687b      	ldr	r3, [r7, #4]
 8014d20:	3303      	adds	r3, #3
 8014d22:	781b      	ldrb	r3, [r3, #0]
 8014d24:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 8014d26:	431a      	orrs	r2, r3
                          ((uint32_t)params[4] << 8) |
 8014d28:	687b      	ldr	r3, [r7, #4]
 8014d2a:	3304      	adds	r3, #4
 8014d2c:	781b      	ldrb	r3, [r3, #0]
 8014d2e:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[3] << 16) |
 8014d30:	4313      	orrs	r3, r2
                          (uint32_t)params[5];
 8014d32:	687a      	ldr	r2, [r7, #4]
 8014d34:	3205      	adds	r2, #5
 8014d36:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[4] << 8) |
 8014d38:	431a      	orrs	r2, r3
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 8014d3a:	6979      	ldr	r1, [r7, #20]
 8014d3c:	f248 036c 	movw	r3, #32876	; 0x806c
 8014d40:	440b      	add	r3, r1
 8014d42:	601a      	str	r2, [r3, #0]

    hmsc->scsi_blk_len = ((uint32_t)params[7] << 8) |
 8014d44:	687b      	ldr	r3, [r7, #4]
 8014d46:	3307      	adds	r3, #7
 8014d48:	781b      	ldrb	r3, [r3, #0]
 8014d4a:	021b      	lsls	r3, r3, #8
                         (uint32_t)params[8];
 8014d4c:	687a      	ldr	r2, [r7, #4]
 8014d4e:	3208      	adds	r2, #8
 8014d50:	7812      	ldrb	r2, [r2, #0]
    hmsc->scsi_blk_len = ((uint32_t)params[7] << 8) |
 8014d52:	431a      	orrs	r2, r3
 8014d54:	6979      	ldr	r1, [r7, #20]
 8014d56:	f248 0370 	movw	r3, #32880	; 0x8070
 8014d5a:	440b      	add	r3, r1
 8014d5c:	601a      	str	r2, [r3, #0]

    /* check if LBA address is in the right range */
    if (SCSI_CheckAddressRange(pdev, lun, hmsc->scsi_blk_addr,
 8014d5e:	697a      	ldr	r2, [r7, #20]
 8014d60:	f248 036c 	movw	r3, #32876	; 0x806c
 8014d64:	4413      	add	r3, r2
 8014d66:	6818      	ldr	r0, [r3, #0]
 8014d68:	697a      	ldr	r2, [r7, #20]
 8014d6a:	f248 0370 	movw	r3, #32880	; 0x8070
 8014d6e:	4413      	add	r3, r2
 8014d70:	681b      	ldr	r3, [r3, #0]
 8014d72:	7af9      	ldrb	r1, [r7, #11]
 8014d74:	4602      	mov	r2, r0
 8014d76:	68f8      	ldr	r0, [r7, #12]
 8014d78:	f000 f966 	bl	8015048 <SCSI_CheckAddressRange>
 8014d7c:	4603      	mov	r3, r0
 8014d7e:	2b00      	cmp	r3, #0
 8014d80:	da02      	bge.n	8014d88 <SCSI_Write10+0x130>
                               hmsc->scsi_blk_len) < 0)
    {
      return -1; /* error */
 8014d82:	f04f 33ff 	mov.w	r3, #4294967295
 8014d86:	e03b      	b.n	8014e00 <SCSI_Write10+0x1a8>
    }

    len = hmsc->scsi_blk_len * hmsc->scsi_blk_size;
 8014d88:	697a      	ldr	r2, [r7, #20]
 8014d8a:	f248 0370 	movw	r3, #32880	; 0x8070
 8014d8e:	4413      	add	r3, r2
 8014d90:	681a      	ldr	r2, [r3, #0]
 8014d92:	6979      	ldr	r1, [r7, #20]
 8014d94:	f248 0364 	movw	r3, #32868	; 0x8064
 8014d98:	440b      	add	r3, r1
 8014d9a:	881b      	ldrh	r3, [r3, #0]
 8014d9c:	fb03 f302 	mul.w	r3, r3, r2
 8014da0:	613b      	str	r3, [r7, #16]

    /* cases 3,11,13 : Hn,Ho <> D0 */
    if (hmsc->cbw.dDataLength != len)
 8014da2:	697a      	ldr	r2, [r7, #20]
 8014da4:	f248 0318 	movw	r3, #32792	; 0x8018
 8014da8:	4413      	add	r3, r2
 8014daa:	681b      	ldr	r3, [r3, #0]
 8014dac:	693a      	ldr	r2, [r7, #16]
 8014dae:	429a      	cmp	r2, r3
 8014db0:	d00c      	beq.n	8014dcc <SCSI_Write10+0x174>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8014db2:	697a      	ldr	r2, [r7, #20]
 8014db4:	f248 031d 	movw	r3, #32797	; 0x801d
 8014db8:	4413      	add	r3, r2
 8014dba:	7819      	ldrb	r1, [r3, #0]
 8014dbc:	2320      	movs	r3, #32
 8014dbe:	2205      	movs	r2, #5
 8014dc0:	68f8      	ldr	r0, [r7, #12]
 8014dc2:	f7ff fd07 	bl	80147d4 <SCSI_SenseCode>
      return -1;
 8014dc6:	f04f 33ff 	mov.w	r3, #4294967295
 8014dca:	e019      	b.n	8014e00 <SCSI_Write10+0x1a8>
    }

    len = MIN(len, MSC_MEDIA_PACKET);
 8014dcc:	693b      	ldr	r3, [r7, #16]
 8014dce:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8014dd2:	bf28      	it	cs
 8014dd4:	f44f 4300 	movcs.w	r3, #32768	; 0x8000
 8014dd8:	613b      	str	r3, [r7, #16]

    /* Prepare EP to receive first data packet */
    hmsc->bot_state = USBD_BOT_DATA_OUT;
 8014dda:	697b      	ldr	r3, [r7, #20]
 8014ddc:	2201      	movs	r2, #1
 8014dde:	721a      	strb	r2, [r3, #8]
    (void)USBD_LL_PrepareReceive(pdev, MSC_EPOUT_ADDR, hmsc->bot_data, len);
 8014de0:	697b      	ldr	r3, [r7, #20]
 8014de2:	f103 0210 	add.w	r2, r3, #16
 8014de6:	693b      	ldr	r3, [r7, #16]
 8014de8:	2101      	movs	r1, #1
 8014dea:	68f8      	ldr	r0, [r7, #12]
 8014dec:	f004 fb19 	bl	8019422 <USBD_LL_PrepareReceive>
  else /* Write Process ongoing */
  {
    return SCSI_ProcessWrite(pdev, lun);
  }

  return 0;
 8014df0:	2300      	movs	r3, #0
 8014df2:	e005      	b.n	8014e00 <SCSI_Write10+0x1a8>
    return SCSI_ProcessWrite(pdev, lun);
 8014df4:	7afb      	ldrb	r3, [r7, #11]
 8014df6:	4619      	mov	r1, r3
 8014df8:	68f8      	ldr	r0, [r7, #12]
 8014dfa:	f000 f9d7 	bl	80151ac <SCSI_ProcessWrite>
 8014dfe:	4603      	mov	r3, r0
}
 8014e00:	4618      	mov	r0, r3
 8014e02:	3718      	adds	r7, #24
 8014e04:	46bd      	mov	sp, r7
 8014e06:	bd80      	pop	{r7, pc}

08014e08 <SCSI_Write12>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
static int8_t SCSI_Write12(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8014e08:	b580      	push	{r7, lr}
 8014e0a:	b086      	sub	sp, #24
 8014e0c:	af00      	add	r7, sp, #0
 8014e0e:	60f8      	str	r0, [r7, #12]
 8014e10:	460b      	mov	r3, r1
 8014e12:	607a      	str	r2, [r7, #4]
 8014e14:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8014e16:	68fb      	ldr	r3, [r7, #12]
 8014e18:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8014e1c:	617b      	str	r3, [r7, #20]
  uint32_t len;

  if (hmsc->bot_state == USBD_BOT_IDLE) /* Idle */
 8014e1e:	697b      	ldr	r3, [r7, #20]
 8014e20:	7a1b      	ldrb	r3, [r3, #8]
 8014e22:	2b00      	cmp	r3, #0
 8014e24:	f040 80ce 	bne.w	8014fc4 <SCSI_Write12+0x1bc>
  {
    if (hmsc->cbw.dDataLength == 0U)
 8014e28:	697a      	ldr	r2, [r7, #20]
 8014e2a:	f248 0318 	movw	r3, #32792	; 0x8018
 8014e2e:	4413      	add	r3, r2
 8014e30:	681b      	ldr	r3, [r3, #0]
 8014e32:	2b00      	cmp	r3, #0
 8014e34:	d10c      	bne.n	8014e50 <SCSI_Write12+0x48>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8014e36:	697a      	ldr	r2, [r7, #20]
 8014e38:	f248 031d 	movw	r3, #32797	; 0x801d
 8014e3c:	4413      	add	r3, r2
 8014e3e:	7819      	ldrb	r1, [r3, #0]
 8014e40:	2320      	movs	r3, #32
 8014e42:	2205      	movs	r2, #5
 8014e44:	68f8      	ldr	r0, [r7, #12]
 8014e46:	f7ff fcc5 	bl	80147d4 <SCSI_SenseCode>
      return -1;
 8014e4a:	f04f 33ff 	mov.w	r3, #4294967295
 8014e4e:	e0bf      	b.n	8014fd0 <SCSI_Write12+0x1c8>
    }

    /* case 8 : Hi <> Do */
    if ((hmsc->cbw.bmFlags & 0x80U) == 0x80U)
 8014e50:	697a      	ldr	r2, [r7, #20]
 8014e52:	f248 031c 	movw	r3, #32796	; 0x801c
 8014e56:	4413      	add	r3, r2
 8014e58:	781b      	ldrb	r3, [r3, #0]
 8014e5a:	b25b      	sxtb	r3, r3
 8014e5c:	2b00      	cmp	r3, #0
 8014e5e:	da0c      	bge.n	8014e7a <SCSI_Write12+0x72>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8014e60:	697a      	ldr	r2, [r7, #20]
 8014e62:	f248 031d 	movw	r3, #32797	; 0x801d
 8014e66:	4413      	add	r3, r2
 8014e68:	7819      	ldrb	r1, [r3, #0]
 8014e6a:	2320      	movs	r3, #32
 8014e6c:	2205      	movs	r2, #5
 8014e6e:	68f8      	ldr	r0, [r7, #12]
 8014e70:	f7ff fcb0 	bl	80147d4 <SCSI_SenseCode>
      return -1;
 8014e74:	f04f 33ff 	mov.w	r3, #4294967295
 8014e78:	e0aa      	b.n	8014fd0 <SCSI_Write12+0x1c8>
    }

    /* Check whether Media is ready */
    if (((USBD_StorageTypeDef *)pdev->pUserData)->IsReady(lun) != 0)
 8014e7a:	68fb      	ldr	r3, [r7, #12]
 8014e7c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8014e80:	689b      	ldr	r3, [r3, #8]
 8014e82:	7afa      	ldrb	r2, [r7, #11]
 8014e84:	4610      	mov	r0, r2
 8014e86:	4798      	blx	r3
 8014e88:	4603      	mov	r3, r0
 8014e8a:	2b00      	cmp	r3, #0
 8014e8c:	d00b      	beq.n	8014ea6 <SCSI_Write12+0x9e>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 8014e8e:	7af9      	ldrb	r1, [r7, #11]
 8014e90:	233a      	movs	r3, #58	; 0x3a
 8014e92:	2202      	movs	r2, #2
 8014e94:	68f8      	ldr	r0, [r7, #12]
 8014e96:	f7ff fc9d 	bl	80147d4 <SCSI_SenseCode>
      hmsc->bot_state = USBD_BOT_NO_DATA;
 8014e9a:	697b      	ldr	r3, [r7, #20]
 8014e9c:	2205      	movs	r2, #5
 8014e9e:	721a      	strb	r2, [r3, #8]
      return -1;
 8014ea0:	f04f 33ff 	mov.w	r3, #4294967295
 8014ea4:	e094      	b.n	8014fd0 <SCSI_Write12+0x1c8>
    }

    /* Check If media is write-protected */
    if (((USBD_StorageTypeDef *)pdev->pUserData)->IsWriteProtected(lun) != 0)
 8014ea6:	68fb      	ldr	r3, [r7, #12]
 8014ea8:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8014eac:	68db      	ldr	r3, [r3, #12]
 8014eae:	7afa      	ldrb	r2, [r7, #11]
 8014eb0:	4610      	mov	r0, r2
 8014eb2:	4798      	blx	r3
 8014eb4:	4603      	mov	r3, r0
 8014eb6:	2b00      	cmp	r3, #0
 8014eb8:	d00b      	beq.n	8014ed2 <SCSI_Write12+0xca>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, WRITE_PROTECTED);
 8014eba:	7af9      	ldrb	r1, [r7, #11]
 8014ebc:	2327      	movs	r3, #39	; 0x27
 8014ebe:	2202      	movs	r2, #2
 8014ec0:	68f8      	ldr	r0, [r7, #12]
 8014ec2:	f7ff fc87 	bl	80147d4 <SCSI_SenseCode>
      hmsc->bot_state = USBD_BOT_NO_DATA;
 8014ec6:	697b      	ldr	r3, [r7, #20]
 8014ec8:	2205      	movs	r2, #5
 8014eca:	721a      	strb	r2, [r3, #8]
      return -1;
 8014ecc:	f04f 33ff 	mov.w	r3, #4294967295
 8014ed0:	e07e      	b.n	8014fd0 <SCSI_Write12+0x1c8>
    }

    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 8014ed2:	687b      	ldr	r3, [r7, #4]
 8014ed4:	3302      	adds	r3, #2
 8014ed6:	781b      	ldrb	r3, [r3, #0]
 8014ed8:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[3] << 16) |
 8014eda:	687b      	ldr	r3, [r7, #4]
 8014edc:	3303      	adds	r3, #3
 8014ede:	781b      	ldrb	r3, [r3, #0]
 8014ee0:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 8014ee2:	431a      	orrs	r2, r3
                          ((uint32_t)params[4] << 8) |
 8014ee4:	687b      	ldr	r3, [r7, #4]
 8014ee6:	3304      	adds	r3, #4
 8014ee8:	781b      	ldrb	r3, [r3, #0]
 8014eea:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[3] << 16) |
 8014eec:	4313      	orrs	r3, r2
                          (uint32_t)params[5];
 8014eee:	687a      	ldr	r2, [r7, #4]
 8014ef0:	3205      	adds	r2, #5
 8014ef2:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[4] << 8) |
 8014ef4:	431a      	orrs	r2, r3
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 8014ef6:	6979      	ldr	r1, [r7, #20]
 8014ef8:	f248 036c 	movw	r3, #32876	; 0x806c
 8014efc:	440b      	add	r3, r1
 8014efe:	601a      	str	r2, [r3, #0]

    hmsc->scsi_blk_len = ((uint32_t)params[6] << 24) |
 8014f00:	687b      	ldr	r3, [r7, #4]
 8014f02:	3306      	adds	r3, #6
 8014f04:	781b      	ldrb	r3, [r3, #0]
 8014f06:	061a      	lsls	r2, r3, #24
                         ((uint32_t)params[7] << 16) |
 8014f08:	687b      	ldr	r3, [r7, #4]
 8014f0a:	3307      	adds	r3, #7
 8014f0c:	781b      	ldrb	r3, [r3, #0]
 8014f0e:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_len = ((uint32_t)params[6] << 24) |
 8014f10:	431a      	orrs	r2, r3
                         ((uint32_t)params[8] << 8) |
 8014f12:	687b      	ldr	r3, [r7, #4]
 8014f14:	3308      	adds	r3, #8
 8014f16:	781b      	ldrb	r3, [r3, #0]
 8014f18:	021b      	lsls	r3, r3, #8
                         ((uint32_t)params[7] << 16) |
 8014f1a:	4313      	orrs	r3, r2
                         (uint32_t)params[9];
 8014f1c:	687a      	ldr	r2, [r7, #4]
 8014f1e:	3209      	adds	r2, #9
 8014f20:	7812      	ldrb	r2, [r2, #0]
                         ((uint32_t)params[8] << 8) |
 8014f22:	431a      	orrs	r2, r3
    hmsc->scsi_blk_len = ((uint32_t)params[6] << 24) |
 8014f24:	6979      	ldr	r1, [r7, #20]
 8014f26:	f248 0370 	movw	r3, #32880	; 0x8070
 8014f2a:	440b      	add	r3, r1
 8014f2c:	601a      	str	r2, [r3, #0]

    /* check if LBA address is in the right range */
    if (SCSI_CheckAddressRange(pdev, lun, hmsc->scsi_blk_addr,
 8014f2e:	697a      	ldr	r2, [r7, #20]
 8014f30:	f248 036c 	movw	r3, #32876	; 0x806c
 8014f34:	4413      	add	r3, r2
 8014f36:	6818      	ldr	r0, [r3, #0]
 8014f38:	697a      	ldr	r2, [r7, #20]
 8014f3a:	f248 0370 	movw	r3, #32880	; 0x8070
 8014f3e:	4413      	add	r3, r2
 8014f40:	681b      	ldr	r3, [r3, #0]
 8014f42:	7af9      	ldrb	r1, [r7, #11]
 8014f44:	4602      	mov	r2, r0
 8014f46:	68f8      	ldr	r0, [r7, #12]
 8014f48:	f000 f87e 	bl	8015048 <SCSI_CheckAddressRange>
 8014f4c:	4603      	mov	r3, r0
 8014f4e:	2b00      	cmp	r3, #0
 8014f50:	da02      	bge.n	8014f58 <SCSI_Write12+0x150>
                               hmsc->scsi_blk_len) < 0)
    {
      return -1; /* error */
 8014f52:	f04f 33ff 	mov.w	r3, #4294967295
 8014f56:	e03b      	b.n	8014fd0 <SCSI_Write12+0x1c8>
    }

    len = hmsc->scsi_blk_len * hmsc->scsi_blk_size;
 8014f58:	697a      	ldr	r2, [r7, #20]
 8014f5a:	f248 0370 	movw	r3, #32880	; 0x8070
 8014f5e:	4413      	add	r3, r2
 8014f60:	681a      	ldr	r2, [r3, #0]
 8014f62:	6979      	ldr	r1, [r7, #20]
 8014f64:	f248 0364 	movw	r3, #32868	; 0x8064
 8014f68:	440b      	add	r3, r1
 8014f6a:	881b      	ldrh	r3, [r3, #0]
 8014f6c:	fb03 f302 	mul.w	r3, r3, r2
 8014f70:	613b      	str	r3, [r7, #16]

    /* cases 3,11,13 : Hn,Ho <> D0 */
    if (hmsc->cbw.dDataLength != len)
 8014f72:	697a      	ldr	r2, [r7, #20]
 8014f74:	f248 0318 	movw	r3, #32792	; 0x8018
 8014f78:	4413      	add	r3, r2
 8014f7a:	681b      	ldr	r3, [r3, #0]
 8014f7c:	693a      	ldr	r2, [r7, #16]
 8014f7e:	429a      	cmp	r2, r3
 8014f80:	d00c      	beq.n	8014f9c <SCSI_Write12+0x194>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8014f82:	697a      	ldr	r2, [r7, #20]
 8014f84:	f248 031d 	movw	r3, #32797	; 0x801d
 8014f88:	4413      	add	r3, r2
 8014f8a:	7819      	ldrb	r1, [r3, #0]
 8014f8c:	2320      	movs	r3, #32
 8014f8e:	2205      	movs	r2, #5
 8014f90:	68f8      	ldr	r0, [r7, #12]
 8014f92:	f7ff fc1f 	bl	80147d4 <SCSI_SenseCode>
      return -1;
 8014f96:	f04f 33ff 	mov.w	r3, #4294967295
 8014f9a:	e019      	b.n	8014fd0 <SCSI_Write12+0x1c8>
    }

    len = MIN(len, MSC_MEDIA_PACKET);
 8014f9c:	693b      	ldr	r3, [r7, #16]
 8014f9e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8014fa2:	bf28      	it	cs
 8014fa4:	f44f 4300 	movcs.w	r3, #32768	; 0x8000
 8014fa8:	613b      	str	r3, [r7, #16]

    /* Prepare EP to receive first data packet */
    hmsc->bot_state = USBD_BOT_DATA_OUT;
 8014faa:	697b      	ldr	r3, [r7, #20]
 8014fac:	2201      	movs	r2, #1
 8014fae:	721a      	strb	r2, [r3, #8]
    (void)USBD_LL_PrepareReceive(pdev, MSC_EPOUT_ADDR, hmsc->bot_data, len);
 8014fb0:	697b      	ldr	r3, [r7, #20]
 8014fb2:	f103 0210 	add.w	r2, r3, #16
 8014fb6:	693b      	ldr	r3, [r7, #16]
 8014fb8:	2101      	movs	r1, #1
 8014fba:	68f8      	ldr	r0, [r7, #12]
 8014fbc:	f004 fa31 	bl	8019422 <USBD_LL_PrepareReceive>
  else /* Write Process ongoing */
  {
    return SCSI_ProcessWrite(pdev, lun);
  }

  return 0;
 8014fc0:	2300      	movs	r3, #0
 8014fc2:	e005      	b.n	8014fd0 <SCSI_Write12+0x1c8>
    return SCSI_ProcessWrite(pdev, lun);
 8014fc4:	7afb      	ldrb	r3, [r7, #11]
 8014fc6:	4619      	mov	r1, r3
 8014fc8:	68f8      	ldr	r0, [r7, #12]
 8014fca:	f000 f8ef 	bl	80151ac <SCSI_ProcessWrite>
 8014fce:	4603      	mov	r3, r0
}
 8014fd0:	4618      	mov	r0, r3
 8014fd2:	3718      	adds	r7, #24
 8014fd4:	46bd      	mov	sp, r7
 8014fd6:	bd80      	pop	{r7, pc}

08014fd8 <SCSI_Verify10>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
static int8_t SCSI_Verify10(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8014fd8:	b580      	push	{r7, lr}
 8014fda:	b086      	sub	sp, #24
 8014fdc:	af00      	add	r7, sp, #0
 8014fde:	60f8      	str	r0, [r7, #12]
 8014fe0:	460b      	mov	r3, r1
 8014fe2:	607a      	str	r2, [r7, #4]
 8014fe4:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8014fe6:	68fb      	ldr	r3, [r7, #12]
 8014fe8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8014fec:	617b      	str	r3, [r7, #20]

  if ((params[1] & 0x02U) == 0x02U)
 8014fee:	687b      	ldr	r3, [r7, #4]
 8014ff0:	3301      	adds	r3, #1
 8014ff2:	781b      	ldrb	r3, [r3, #0]
 8014ff4:	f003 0302 	and.w	r3, r3, #2
 8014ff8:	2b00      	cmp	r3, #0
 8014ffa:	d008      	beq.n	801500e <SCSI_Verify10+0x36>
  {
    SCSI_SenseCode(pdev, lun, ILLEGAL_REQUEST, INVALID_FIELED_IN_COMMAND);
 8014ffc:	7af9      	ldrb	r1, [r7, #11]
 8014ffe:	2324      	movs	r3, #36	; 0x24
 8015000:	2205      	movs	r2, #5
 8015002:	68f8      	ldr	r0, [r7, #12]
 8015004:	f7ff fbe6 	bl	80147d4 <SCSI_SenseCode>
    return -1; /* Error, Verify Mode Not supported*/
 8015008:	f04f 33ff 	mov.w	r3, #4294967295
 801500c:	e018      	b.n	8015040 <SCSI_Verify10+0x68>
  }

  if (SCSI_CheckAddressRange(pdev, lun, hmsc->scsi_blk_addr, hmsc->scsi_blk_len) < 0)
 801500e:	697a      	ldr	r2, [r7, #20]
 8015010:	f248 036c 	movw	r3, #32876	; 0x806c
 8015014:	4413      	add	r3, r2
 8015016:	6818      	ldr	r0, [r3, #0]
 8015018:	697a      	ldr	r2, [r7, #20]
 801501a:	f248 0370 	movw	r3, #32880	; 0x8070
 801501e:	4413      	add	r3, r2
 8015020:	681b      	ldr	r3, [r3, #0]
 8015022:	7af9      	ldrb	r1, [r7, #11]
 8015024:	4602      	mov	r2, r0
 8015026:	68f8      	ldr	r0, [r7, #12]
 8015028:	f000 f80e 	bl	8015048 <SCSI_CheckAddressRange>
 801502c:	4603      	mov	r3, r0
 801502e:	2b00      	cmp	r3, #0
 8015030:	da02      	bge.n	8015038 <SCSI_Verify10+0x60>
  {
    return -1; /* error */
 8015032:	f04f 33ff 	mov.w	r3, #4294967295
 8015036:	e003      	b.n	8015040 <SCSI_Verify10+0x68>
  }

  hmsc->bot_data_length = 0U;
 8015038:	697b      	ldr	r3, [r7, #20]
 801503a:	2200      	movs	r2, #0
 801503c:	60da      	str	r2, [r3, #12]

  return 0;
 801503e:	2300      	movs	r3, #0
}
 8015040:	4618      	mov	r0, r3
 8015042:	3718      	adds	r7, #24
 8015044:	46bd      	mov	sp, r7
 8015046:	bd80      	pop	{r7, pc}

08015048 <SCSI_CheckAddressRange>:
* @param  blk_nbr: number of block to be processed
* @retval status
*/
static int8_t SCSI_CheckAddressRange(USBD_HandleTypeDef *pdev, uint8_t lun,
                                     uint32_t blk_offset, uint32_t blk_nbr)
{
 8015048:	b580      	push	{r7, lr}
 801504a:	b086      	sub	sp, #24
 801504c:	af00      	add	r7, sp, #0
 801504e:	60f8      	str	r0, [r7, #12]
 8015050:	607a      	str	r2, [r7, #4]
 8015052:	603b      	str	r3, [r7, #0]
 8015054:	460b      	mov	r3, r1
 8015056:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8015058:	68fb      	ldr	r3, [r7, #12]
 801505a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 801505e:	617b      	str	r3, [r7, #20]

  if ((blk_offset + blk_nbr) > hmsc->scsi_blk_nbr)
 8015060:	687a      	ldr	r2, [r7, #4]
 8015062:	683b      	ldr	r3, [r7, #0]
 8015064:	441a      	add	r2, r3
 8015066:	6979      	ldr	r1, [r7, #20]
 8015068:	f248 0368 	movw	r3, #32872	; 0x8068
 801506c:	440b      	add	r3, r1
 801506e:	681b      	ldr	r3, [r3, #0]
 8015070:	429a      	cmp	r2, r3
 8015072:	d908      	bls.n	8015086 <SCSI_CheckAddressRange+0x3e>
  {
    SCSI_SenseCode(pdev, lun, ILLEGAL_REQUEST, ADDRESS_OUT_OF_RANGE);
 8015074:	7af9      	ldrb	r1, [r7, #11]
 8015076:	2321      	movs	r3, #33	; 0x21
 8015078:	2205      	movs	r2, #5
 801507a:	68f8      	ldr	r0, [r7, #12]
 801507c:	f7ff fbaa 	bl	80147d4 <SCSI_SenseCode>
    return -1;
 8015080:	f04f 33ff 	mov.w	r3, #4294967295
 8015084:	e000      	b.n	8015088 <SCSI_CheckAddressRange+0x40>
  }

  return 0;
 8015086:	2300      	movs	r3, #0
}
 8015088:	4618      	mov	r0, r3
 801508a:	3718      	adds	r7, #24
 801508c:	46bd      	mov	sp, r7
 801508e:	bd80      	pop	{r7, pc}

08015090 <SCSI_ProcessRead>:
*         Handle Read Process
* @param  lun: Logical unit number
* @retval status
*/
static int8_t SCSI_ProcessRead(USBD_HandleTypeDef *pdev, uint8_t lun)
{
 8015090:	b5b0      	push	{r4, r5, r7, lr}
 8015092:	b084      	sub	sp, #16
 8015094:	af00      	add	r7, sp, #0
 8015096:	6078      	str	r0, [r7, #4]
 8015098:	460b      	mov	r3, r1
 801509a:	70fb      	strb	r3, [r7, #3]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 801509c:	687b      	ldr	r3, [r7, #4]
 801509e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80150a2:	60fb      	str	r3, [r7, #12]
  uint32_t len = hmsc->scsi_blk_len * hmsc->scsi_blk_size;
 80150a4:	68fa      	ldr	r2, [r7, #12]
 80150a6:	f248 0370 	movw	r3, #32880	; 0x8070
 80150aa:	4413      	add	r3, r2
 80150ac:	681a      	ldr	r2, [r3, #0]
 80150ae:	68f9      	ldr	r1, [r7, #12]
 80150b0:	f248 0364 	movw	r3, #32868	; 0x8064
 80150b4:	440b      	add	r3, r1
 80150b6:	881b      	ldrh	r3, [r3, #0]
 80150b8:	fb03 f302 	mul.w	r3, r3, r2
 80150bc:	60bb      	str	r3, [r7, #8]

  len = MIN(len, MSC_MEDIA_PACKET);
 80150be:	68bb      	ldr	r3, [r7, #8]
 80150c0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80150c4:	bf28      	it	cs
 80150c6:	f44f 4300 	movcs.w	r3, #32768	; 0x8000
 80150ca:	60bb      	str	r3, [r7, #8]

  if (((USBD_StorageTypeDef *)pdev->pUserData)->Read(lun, hmsc->bot_data,
 80150cc:	687b      	ldr	r3, [r7, #4]
 80150ce:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80150d2:	691c      	ldr	r4, [r3, #16]
 80150d4:	68fb      	ldr	r3, [r7, #12]
 80150d6:	f103 0110 	add.w	r1, r3, #16
 80150da:	68fa      	ldr	r2, [r7, #12]
 80150dc:	f248 036c 	movw	r3, #32876	; 0x806c
 80150e0:	4413      	add	r3, r2
 80150e2:	681d      	ldr	r5, [r3, #0]
                                                     hmsc->scsi_blk_addr,
                                                     (len / hmsc->scsi_blk_size)) < 0)
 80150e4:	68fa      	ldr	r2, [r7, #12]
 80150e6:	f248 0364 	movw	r3, #32868	; 0x8064
 80150ea:	4413      	add	r3, r2
 80150ec:	881b      	ldrh	r3, [r3, #0]
 80150ee:	461a      	mov	r2, r3
 80150f0:	68bb      	ldr	r3, [r7, #8]
 80150f2:	fbb3 f3f2 	udiv	r3, r3, r2
  if (((USBD_StorageTypeDef *)pdev->pUserData)->Read(lun, hmsc->bot_data,
 80150f6:	b29b      	uxth	r3, r3
 80150f8:	78f8      	ldrb	r0, [r7, #3]
 80150fa:	462a      	mov	r2, r5
 80150fc:	47a0      	blx	r4
 80150fe:	4603      	mov	r3, r0
 8015100:	2b00      	cmp	r3, #0
 8015102:	da08      	bge.n	8015116 <SCSI_ProcessRead+0x86>
  {
    SCSI_SenseCode(pdev, lun, HARDWARE_ERROR, UNRECOVERED_READ_ERROR);
 8015104:	78f9      	ldrb	r1, [r7, #3]
 8015106:	2311      	movs	r3, #17
 8015108:	2204      	movs	r2, #4
 801510a:	6878      	ldr	r0, [r7, #4]
 801510c:	f7ff fb62 	bl	80147d4 <SCSI_SenseCode>
    return -1;
 8015110:	f04f 33ff 	mov.w	r3, #4294967295
 8015114:	e046      	b.n	80151a4 <SCSI_ProcessRead+0x114>
  }

  (void)USBD_LL_Transmit(pdev, MSC_EPIN_ADDR, hmsc->bot_data, len);
 8015116:	68fb      	ldr	r3, [r7, #12]
 8015118:	f103 0210 	add.w	r2, r3, #16
 801511c:	68bb      	ldr	r3, [r7, #8]
 801511e:	2181      	movs	r1, #129	; 0x81
 8015120:	6878      	ldr	r0, [r7, #4]
 8015122:	f004 f95d 	bl	80193e0 <USBD_LL_Transmit>

  hmsc->scsi_blk_addr += (len / hmsc->scsi_blk_size);
 8015126:	68fa      	ldr	r2, [r7, #12]
 8015128:	f248 036c 	movw	r3, #32876	; 0x806c
 801512c:	4413      	add	r3, r2
 801512e:	681a      	ldr	r2, [r3, #0]
 8015130:	68f9      	ldr	r1, [r7, #12]
 8015132:	f248 0364 	movw	r3, #32868	; 0x8064
 8015136:	440b      	add	r3, r1
 8015138:	881b      	ldrh	r3, [r3, #0]
 801513a:	4619      	mov	r1, r3
 801513c:	68bb      	ldr	r3, [r7, #8]
 801513e:	fbb3 f3f1 	udiv	r3, r3, r1
 8015142:	441a      	add	r2, r3
 8015144:	68f9      	ldr	r1, [r7, #12]
 8015146:	f248 036c 	movw	r3, #32876	; 0x806c
 801514a:	440b      	add	r3, r1
 801514c:	601a      	str	r2, [r3, #0]
  hmsc->scsi_blk_len -= (len / hmsc->scsi_blk_size);
 801514e:	68fa      	ldr	r2, [r7, #12]
 8015150:	f248 0370 	movw	r3, #32880	; 0x8070
 8015154:	4413      	add	r3, r2
 8015156:	681a      	ldr	r2, [r3, #0]
 8015158:	68f9      	ldr	r1, [r7, #12]
 801515a:	f248 0364 	movw	r3, #32868	; 0x8064
 801515e:	440b      	add	r3, r1
 8015160:	881b      	ldrh	r3, [r3, #0]
 8015162:	4619      	mov	r1, r3
 8015164:	68bb      	ldr	r3, [r7, #8]
 8015166:	fbb3 f3f1 	udiv	r3, r3, r1
 801516a:	1ad2      	subs	r2, r2, r3
 801516c:	68f9      	ldr	r1, [r7, #12]
 801516e:	f248 0370 	movw	r3, #32880	; 0x8070
 8015172:	440b      	add	r3, r1
 8015174:	601a      	str	r2, [r3, #0]

  /* case 6 : Hi = Di */
  hmsc->csw.dDataResidue -= len;
 8015176:	68fa      	ldr	r2, [r7, #12]
 8015178:	f248 0338 	movw	r3, #32824	; 0x8038
 801517c:	4413      	add	r3, r2
 801517e:	681a      	ldr	r2, [r3, #0]
 8015180:	68bb      	ldr	r3, [r7, #8]
 8015182:	1ad2      	subs	r2, r2, r3
 8015184:	68f9      	ldr	r1, [r7, #12]
 8015186:	f248 0338 	movw	r3, #32824	; 0x8038
 801518a:	440b      	add	r3, r1
 801518c:	601a      	str	r2, [r3, #0]

  if (hmsc->scsi_blk_len == 0U)
 801518e:	68fa      	ldr	r2, [r7, #12]
 8015190:	f248 0370 	movw	r3, #32880	; 0x8070
 8015194:	4413      	add	r3, r2
 8015196:	681b      	ldr	r3, [r3, #0]
 8015198:	2b00      	cmp	r3, #0
 801519a:	d102      	bne.n	80151a2 <SCSI_ProcessRead+0x112>
  {
    hmsc->bot_state = USBD_BOT_LAST_DATA_IN;
 801519c:	68fb      	ldr	r3, [r7, #12]
 801519e:	2203      	movs	r2, #3
 80151a0:	721a      	strb	r2, [r3, #8]
  }

  return 0;
 80151a2:	2300      	movs	r3, #0
}
 80151a4:	4618      	mov	r0, r3
 80151a6:	3710      	adds	r7, #16
 80151a8:	46bd      	mov	sp, r7
 80151aa:	bdb0      	pop	{r4, r5, r7, pc}

080151ac <SCSI_ProcessWrite>:
*         Handle Write Process
* @param  lun: Logical unit number
* @retval status
*/
static int8_t SCSI_ProcessWrite(USBD_HandleTypeDef *pdev, uint8_t lun)
{
 80151ac:	b5b0      	push	{r4, r5, r7, lr}
 80151ae:	b084      	sub	sp, #16
 80151b0:	af00      	add	r7, sp, #0
 80151b2:	6078      	str	r0, [r7, #4]
 80151b4:	460b      	mov	r3, r1
 80151b6:	70fb      	strb	r3, [r7, #3]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 80151b8:	687b      	ldr	r3, [r7, #4]
 80151ba:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80151be:	60fb      	str	r3, [r7, #12]
  uint32_t len = hmsc->scsi_blk_len * hmsc->scsi_blk_size;
 80151c0:	68fa      	ldr	r2, [r7, #12]
 80151c2:	f248 0370 	movw	r3, #32880	; 0x8070
 80151c6:	4413      	add	r3, r2
 80151c8:	681a      	ldr	r2, [r3, #0]
 80151ca:	68f9      	ldr	r1, [r7, #12]
 80151cc:	f248 0364 	movw	r3, #32868	; 0x8064
 80151d0:	440b      	add	r3, r1
 80151d2:	881b      	ldrh	r3, [r3, #0]
 80151d4:	fb03 f302 	mul.w	r3, r3, r2
 80151d8:	60bb      	str	r3, [r7, #8]

  len = MIN(len, MSC_MEDIA_PACKET);
 80151da:	68bb      	ldr	r3, [r7, #8]
 80151dc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80151e0:	bf28      	it	cs
 80151e2:	f44f 4300 	movcs.w	r3, #32768	; 0x8000
 80151e6:	60bb      	str	r3, [r7, #8]

  if (((USBD_StorageTypeDef *)pdev->pUserData)->Write(lun, hmsc->bot_data,
 80151e8:	687b      	ldr	r3, [r7, #4]
 80151ea:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80151ee:	695c      	ldr	r4, [r3, #20]
 80151f0:	68fb      	ldr	r3, [r7, #12]
 80151f2:	f103 0110 	add.w	r1, r3, #16
 80151f6:	68fa      	ldr	r2, [r7, #12]
 80151f8:	f248 036c 	movw	r3, #32876	; 0x806c
 80151fc:	4413      	add	r3, r2
 80151fe:	681d      	ldr	r5, [r3, #0]
                                                      hmsc->scsi_blk_addr,
                                                      (len / hmsc->scsi_blk_size)) < 0)
 8015200:	68fa      	ldr	r2, [r7, #12]
 8015202:	f248 0364 	movw	r3, #32868	; 0x8064
 8015206:	4413      	add	r3, r2
 8015208:	881b      	ldrh	r3, [r3, #0]
 801520a:	461a      	mov	r2, r3
 801520c:	68bb      	ldr	r3, [r7, #8]
 801520e:	fbb3 f3f2 	udiv	r3, r3, r2
  if (((USBD_StorageTypeDef *)pdev->pUserData)->Write(lun, hmsc->bot_data,
 8015212:	b29b      	uxth	r3, r3
 8015214:	78f8      	ldrb	r0, [r7, #3]
 8015216:	462a      	mov	r2, r5
 8015218:	47a0      	blx	r4
 801521a:	4603      	mov	r3, r0
 801521c:	2b00      	cmp	r3, #0
 801521e:	da08      	bge.n	8015232 <SCSI_ProcessWrite+0x86>
  {
    SCSI_SenseCode(pdev, lun, HARDWARE_ERROR, WRITE_FAULT);
 8015220:	78f9      	ldrb	r1, [r7, #3]
 8015222:	2303      	movs	r3, #3
 8015224:	2204      	movs	r2, #4
 8015226:	6878      	ldr	r0, [r7, #4]
 8015228:	f7ff fad4 	bl	80147d4 <SCSI_SenseCode>
    return -1;
 801522c:	f04f 33ff 	mov.w	r3, #4294967295
 8015230:	e05a      	b.n	80152e8 <SCSI_ProcessWrite+0x13c>
  }

  hmsc->scsi_blk_addr += (len / hmsc->scsi_blk_size);
 8015232:	68fa      	ldr	r2, [r7, #12]
 8015234:	f248 036c 	movw	r3, #32876	; 0x806c
 8015238:	4413      	add	r3, r2
 801523a:	681a      	ldr	r2, [r3, #0]
 801523c:	68f9      	ldr	r1, [r7, #12]
 801523e:	f248 0364 	movw	r3, #32868	; 0x8064
 8015242:	440b      	add	r3, r1
 8015244:	881b      	ldrh	r3, [r3, #0]
 8015246:	4619      	mov	r1, r3
 8015248:	68bb      	ldr	r3, [r7, #8]
 801524a:	fbb3 f3f1 	udiv	r3, r3, r1
 801524e:	441a      	add	r2, r3
 8015250:	68f9      	ldr	r1, [r7, #12]
 8015252:	f248 036c 	movw	r3, #32876	; 0x806c
 8015256:	440b      	add	r3, r1
 8015258:	601a      	str	r2, [r3, #0]
  hmsc->scsi_blk_len -= (len / hmsc->scsi_blk_size);
 801525a:	68fa      	ldr	r2, [r7, #12]
 801525c:	f248 0370 	movw	r3, #32880	; 0x8070
 8015260:	4413      	add	r3, r2
 8015262:	681a      	ldr	r2, [r3, #0]
 8015264:	68f9      	ldr	r1, [r7, #12]
 8015266:	f248 0364 	movw	r3, #32868	; 0x8064
 801526a:	440b      	add	r3, r1
 801526c:	881b      	ldrh	r3, [r3, #0]
 801526e:	4619      	mov	r1, r3
 8015270:	68bb      	ldr	r3, [r7, #8]
 8015272:	fbb3 f3f1 	udiv	r3, r3, r1
 8015276:	1ad2      	subs	r2, r2, r3
 8015278:	68f9      	ldr	r1, [r7, #12]
 801527a:	f248 0370 	movw	r3, #32880	; 0x8070
 801527e:	440b      	add	r3, r1
 8015280:	601a      	str	r2, [r3, #0]

  /* case 12 : Ho = Do */
  hmsc->csw.dDataResidue -= len;
 8015282:	68fa      	ldr	r2, [r7, #12]
 8015284:	f248 0338 	movw	r3, #32824	; 0x8038
 8015288:	4413      	add	r3, r2
 801528a:	681a      	ldr	r2, [r3, #0]
 801528c:	68bb      	ldr	r3, [r7, #8]
 801528e:	1ad2      	subs	r2, r2, r3
 8015290:	68f9      	ldr	r1, [r7, #12]
 8015292:	f248 0338 	movw	r3, #32824	; 0x8038
 8015296:	440b      	add	r3, r1
 8015298:	601a      	str	r2, [r3, #0]

  if (hmsc->scsi_blk_len == 0U)
 801529a:	68fa      	ldr	r2, [r7, #12]
 801529c:	f248 0370 	movw	r3, #32880	; 0x8070
 80152a0:	4413      	add	r3, r2
 80152a2:	681b      	ldr	r3, [r3, #0]
 80152a4:	2b00      	cmp	r3, #0
 80152a6:	d104      	bne.n	80152b2 <SCSI_ProcessWrite+0x106>
  {
    MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_PASSED);
 80152a8:	2100      	movs	r1, #0
 80152aa:	6878      	ldr	r0, [r7, #4]
 80152ac:	f7fe fde2 	bl	8013e74 <MSC_BOT_SendCSW>
 80152b0:	e019      	b.n	80152e6 <SCSI_ProcessWrite+0x13a>
  }
  else
  {
    len = MIN((hmsc->scsi_blk_len * hmsc->scsi_blk_size), MSC_MEDIA_PACKET);
 80152b2:	68fa      	ldr	r2, [r7, #12]
 80152b4:	f248 0370 	movw	r3, #32880	; 0x8070
 80152b8:	4413      	add	r3, r2
 80152ba:	681a      	ldr	r2, [r3, #0]
 80152bc:	68f9      	ldr	r1, [r7, #12]
 80152be:	f248 0364 	movw	r3, #32868	; 0x8064
 80152c2:	440b      	add	r3, r1
 80152c4:	881b      	ldrh	r3, [r3, #0]
 80152c6:	fb03 f302 	mul.w	r3, r3, r2
 80152ca:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80152ce:	bf28      	it	cs
 80152d0:	f44f 4300 	movcs.w	r3, #32768	; 0x8000
 80152d4:	60bb      	str	r3, [r7, #8]

    /* Prepare EP to Receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, MSC_EPOUT_ADDR, hmsc->bot_data, len);
 80152d6:	68fb      	ldr	r3, [r7, #12]
 80152d8:	f103 0210 	add.w	r2, r3, #16
 80152dc:	68bb      	ldr	r3, [r7, #8]
 80152de:	2101      	movs	r1, #1
 80152e0:	6878      	ldr	r0, [r7, #4]
 80152e2:	f004 f89e 	bl	8019422 <USBD_LL_PrepareReceive>
  }

  return 0;
 80152e6:	2300      	movs	r3, #0
}
 80152e8:	4618      	mov	r0, r3
 80152ea:	3710      	adds	r7, #16
 80152ec:	46bd      	mov	sp, r7
 80152ee:	bdb0      	pop	{r4, r5, r7, pc}

080152f0 <SCSI_UpdateBotData>:
* @param  length: Data length
* @retval status
*/
static int8_t SCSI_UpdateBotData(USBD_MSC_BOT_HandleTypeDef *hmsc,
                                 uint8_t *pBuff, uint16_t length)
{
 80152f0:	b480      	push	{r7}
 80152f2:	b087      	sub	sp, #28
 80152f4:	af00      	add	r7, sp, #0
 80152f6:	60f8      	str	r0, [r7, #12]
 80152f8:	60b9      	str	r1, [r7, #8]
 80152fa:	4613      	mov	r3, r2
 80152fc:	80fb      	strh	r3, [r7, #6]
  uint16_t len = length;
 80152fe:	88fb      	ldrh	r3, [r7, #6]
 8015300:	82fb      	strh	r3, [r7, #22]

  hmsc->bot_data_length = len;
 8015302:	8afa      	ldrh	r2, [r7, #22]
 8015304:	68fb      	ldr	r3, [r7, #12]
 8015306:	60da      	str	r2, [r3, #12]

  while (len != 0U)
 8015308:	e00b      	b.n	8015322 <SCSI_UpdateBotData+0x32>
  {
    len--;
 801530a:	8afb      	ldrh	r3, [r7, #22]
 801530c:	3b01      	subs	r3, #1
 801530e:	82fb      	strh	r3, [r7, #22]
    hmsc->bot_data[len] = pBuff[len];
 8015310:	8afb      	ldrh	r3, [r7, #22]
 8015312:	68ba      	ldr	r2, [r7, #8]
 8015314:	441a      	add	r2, r3
 8015316:	8afb      	ldrh	r3, [r7, #22]
 8015318:	7811      	ldrb	r1, [r2, #0]
 801531a:	68fa      	ldr	r2, [r7, #12]
 801531c:	4413      	add	r3, r2
 801531e:	460a      	mov	r2, r1
 8015320:	741a      	strb	r2, [r3, #16]
  while (len != 0U)
 8015322:	8afb      	ldrh	r3, [r7, #22]
 8015324:	2b00      	cmp	r3, #0
 8015326:	d1f0      	bne.n	801530a <SCSI_UpdateBotData+0x1a>
  }

  return 0;
 8015328:	2300      	movs	r3, #0
}
 801532a:	4618      	mov	r0, r3
 801532c:	371c      	adds	r7, #28
 801532e:	46bd      	mov	sp, r7
 8015330:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015334:	4770      	bx	lr

08015336 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8015336:	b580      	push	{r7, lr}
 8015338:	b086      	sub	sp, #24
 801533a:	af00      	add	r7, sp, #0
 801533c:	60f8      	str	r0, [r7, #12]
 801533e:	60b9      	str	r1, [r7, #8]
 8015340:	4613      	mov	r3, r2
 8015342:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8015344:	68fb      	ldr	r3, [r7, #12]
 8015346:	2b00      	cmp	r3, #0
 8015348:	d101      	bne.n	801534e <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 801534a:	2303      	movs	r3, #3
 801534c:	e025      	b.n	801539a <USBD_Init+0x64>
  }

  /* Unlink previous class */
  if (pdev->pClass != NULL)
 801534e:	68fb      	ldr	r3, [r7, #12]
 8015350:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8015354:	2b00      	cmp	r3, #0
 8015356:	d003      	beq.n	8015360 <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 8015358:	68fb      	ldr	r3, [r7, #12]
 801535a:	2200      	movs	r2, #0
 801535c:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }

  if (pdev->pConfDesc != NULL)
 8015360:	68fb      	ldr	r3, [r7, #12]
 8015362:	f8d3 32cc 	ldr.w	r3, [r3, #716]	; 0x2cc
 8015366:	2b00      	cmp	r3, #0
 8015368:	d003      	beq.n	8015372 <USBD_Init+0x3c>
  {
    pdev->pConfDesc = NULL;
 801536a:	68fb      	ldr	r3, [r7, #12]
 801536c:	2200      	movs	r2, #0
 801536e:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8015372:	68bb      	ldr	r3, [r7, #8]
 8015374:	2b00      	cmp	r3, #0
 8015376:	d003      	beq.n	8015380 <USBD_Init+0x4a>
  {
    pdev->pDesc = pdesc;
 8015378:	68fb      	ldr	r3, [r7, #12]
 801537a:	68ba      	ldr	r2, [r7, #8]
 801537c:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8015380:	68fb      	ldr	r3, [r7, #12]
 8015382:	2201      	movs	r2, #1
 8015384:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8015388:	68fb      	ldr	r3, [r7, #12]
 801538a:	79fa      	ldrb	r2, [r7, #7]
 801538c:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 801538e:	68f8      	ldr	r0, [r7, #12]
 8015390:	f003 fece 	bl	8019130 <USBD_LL_Init>
 8015394:	4603      	mov	r3, r0
 8015396:	75fb      	strb	r3, [r7, #23]

  return ret;
 8015398:	7dfb      	ldrb	r3, [r7, #23]
}
 801539a:	4618      	mov	r0, r3
 801539c:	3718      	adds	r7, #24
 801539e:	46bd      	mov	sp, r7
 80153a0:	bd80      	pop	{r7, pc}

080153a2 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 80153a2:	b580      	push	{r7, lr}
 80153a4:	b084      	sub	sp, #16
 80153a6:	af00      	add	r7, sp, #0
 80153a8:	6078      	str	r0, [r7, #4]
 80153aa:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80153ac:	2300      	movs	r3, #0
 80153ae:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 80153b0:	683b      	ldr	r3, [r7, #0]
 80153b2:	2b00      	cmp	r3, #0
 80153b4:	d101      	bne.n	80153ba <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 80153b6:	2303      	movs	r3, #3
 80153b8:	e010      	b.n	80153dc <USBD_RegisterClass+0x3a>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 80153ba:	687b      	ldr	r3, [r7, #4]
 80153bc:	683a      	ldr	r2, [r7, #0]
 80153be:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  /* Get Device Configuration Descriptor */
#ifdef USE_USB_FS
  pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
#else /* USE_USB_HS */
  pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
 80153c2:	687b      	ldr	r3, [r7, #4]
 80153c4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80153c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80153ca:	f107 020e 	add.w	r2, r7, #14
 80153ce:	4610      	mov	r0, r2
 80153d0:	4798      	blx	r3
 80153d2:	4602      	mov	r2, r0
 80153d4:	687b      	ldr	r3, [r7, #4]
 80153d6:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
#endif /* USE_USB_FS */


  return USBD_OK;
 80153da:	2300      	movs	r3, #0
}
 80153dc:	4618      	mov	r0, r3
 80153de:	3710      	adds	r7, #16
 80153e0:	46bd      	mov	sp, r7
 80153e2:	bd80      	pop	{r7, pc}

080153e4 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 80153e4:	b580      	push	{r7, lr}
 80153e6:	b082      	sub	sp, #8
 80153e8:	af00      	add	r7, sp, #0
 80153ea:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 80153ec:	6878      	ldr	r0, [r7, #4]
 80153ee:	f003 feef 	bl	80191d0 <USBD_LL_Start>
 80153f2:	4603      	mov	r3, r0
}
 80153f4:	4618      	mov	r0, r3
 80153f6:	3708      	adds	r7, #8
 80153f8:	46bd      	mov	sp, r7
 80153fa:	bd80      	pop	{r7, pc}

080153fc <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 80153fc:	b480      	push	{r7}
 80153fe:	b083      	sub	sp, #12
 8015400:	af00      	add	r7, sp, #0
 8015402:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8015404:	2300      	movs	r3, #0
}
 8015406:	4618      	mov	r0, r3
 8015408:	370c      	adds	r7, #12
 801540a:	46bd      	mov	sp, r7
 801540c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015410:	4770      	bx	lr

08015412 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8015412:	b580      	push	{r7, lr}
 8015414:	b084      	sub	sp, #16
 8015416:	af00      	add	r7, sp, #0
 8015418:	6078      	str	r0, [r7, #4]
 801541a:	460b      	mov	r3, r1
 801541c:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 801541e:	2303      	movs	r3, #3
 8015420:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8015422:	687b      	ldr	r3, [r7, #4]
 8015424:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8015428:	2b00      	cmp	r3, #0
 801542a:	d009      	beq.n	8015440 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 801542c:	687b      	ldr	r3, [r7, #4]
 801542e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8015432:	681b      	ldr	r3, [r3, #0]
 8015434:	78fa      	ldrb	r2, [r7, #3]
 8015436:	4611      	mov	r1, r2
 8015438:	6878      	ldr	r0, [r7, #4]
 801543a:	4798      	blx	r3
 801543c:	4603      	mov	r3, r0
 801543e:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8015440:	7bfb      	ldrb	r3, [r7, #15]
}
 8015442:	4618      	mov	r0, r3
 8015444:	3710      	adds	r7, #16
 8015446:	46bd      	mov	sp, r7
 8015448:	bd80      	pop	{r7, pc}

0801544a <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 801544a:	b580      	push	{r7, lr}
 801544c:	b082      	sub	sp, #8
 801544e:	af00      	add	r7, sp, #0
 8015450:	6078      	str	r0, [r7, #4]
 8015452:	460b      	mov	r3, r1
 8015454:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 8015456:	687b      	ldr	r3, [r7, #4]
 8015458:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801545c:	2b00      	cmp	r3, #0
 801545e:	d007      	beq.n	8015470 <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 8015460:	687b      	ldr	r3, [r7, #4]
 8015462:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8015466:	685b      	ldr	r3, [r3, #4]
 8015468:	78fa      	ldrb	r2, [r7, #3]
 801546a:	4611      	mov	r1, r2
 801546c:	6878      	ldr	r0, [r7, #4]
 801546e:	4798      	blx	r3
  }

  return USBD_OK;
 8015470:	2300      	movs	r3, #0
}
 8015472:	4618      	mov	r0, r3
 8015474:	3708      	adds	r7, #8
 8015476:	46bd      	mov	sp, r7
 8015478:	bd80      	pop	{r7, pc}

0801547a <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 801547a:	b580      	push	{r7, lr}
 801547c:	b084      	sub	sp, #16
 801547e:	af00      	add	r7, sp, #0
 8015480:	6078      	str	r0, [r7, #4]
 8015482:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8015484:	687b      	ldr	r3, [r7, #4]
 8015486:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 801548a:	6839      	ldr	r1, [r7, #0]
 801548c:	4618      	mov	r0, r3
 801548e:	f000 ff2b 	bl	80162e8 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8015492:	687b      	ldr	r3, [r7, #4]
 8015494:	2201      	movs	r2, #1
 8015496:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 801549a:	687b      	ldr	r3, [r7, #4]
 801549c:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 80154a0:	461a      	mov	r2, r3
 80154a2:	687b      	ldr	r3, [r7, #4]
 80154a4:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 80154a8:	687b      	ldr	r3, [r7, #4]
 80154aa:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 80154ae:	f003 031f 	and.w	r3, r3, #31
 80154b2:	2b01      	cmp	r3, #1
 80154b4:	d00e      	beq.n	80154d4 <USBD_LL_SetupStage+0x5a>
 80154b6:	2b01      	cmp	r3, #1
 80154b8:	d302      	bcc.n	80154c0 <USBD_LL_SetupStage+0x46>
 80154ba:	2b02      	cmp	r3, #2
 80154bc:	d014      	beq.n	80154e8 <USBD_LL_SetupStage+0x6e>
 80154be:	e01d      	b.n	80154fc <USBD_LL_SetupStage+0x82>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 80154c0:	687b      	ldr	r3, [r7, #4]
 80154c2:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80154c6:	4619      	mov	r1, r3
 80154c8:	6878      	ldr	r0, [r7, #4]
 80154ca:	f000 fa17 	bl	80158fc <USBD_StdDevReq>
 80154ce:	4603      	mov	r3, r0
 80154d0:	73fb      	strb	r3, [r7, #15]
      break;
 80154d2:	e020      	b.n	8015516 <USBD_LL_SetupStage+0x9c>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 80154d4:	687b      	ldr	r3, [r7, #4]
 80154d6:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80154da:	4619      	mov	r1, r3
 80154dc:	6878      	ldr	r0, [r7, #4]
 80154de:	f000 fa7b 	bl	80159d8 <USBD_StdItfReq>
 80154e2:	4603      	mov	r3, r0
 80154e4:	73fb      	strb	r3, [r7, #15]
      break;
 80154e6:	e016      	b.n	8015516 <USBD_LL_SetupStage+0x9c>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 80154e8:	687b      	ldr	r3, [r7, #4]
 80154ea:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80154ee:	4619      	mov	r1, r3
 80154f0:	6878      	ldr	r0, [r7, #4]
 80154f2:	f000 fab7 	bl	8015a64 <USBD_StdEPReq>
 80154f6:	4603      	mov	r3, r0
 80154f8:	73fb      	strb	r3, [r7, #15]
      break;
 80154fa:	e00c      	b.n	8015516 <USBD_LL_SetupStage+0x9c>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 80154fc:	687b      	ldr	r3, [r7, #4]
 80154fe:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8015502:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8015506:	b2db      	uxtb	r3, r3
 8015508:	4619      	mov	r1, r3
 801550a:	6878      	ldr	r0, [r7, #4]
 801550c:	f003 fedf 	bl	80192ce <USBD_LL_StallEP>
 8015510:	4603      	mov	r3, r0
 8015512:	73fb      	strb	r3, [r7, #15]
      break;
 8015514:	bf00      	nop
  }

  return ret;
 8015516:	7bfb      	ldrb	r3, [r7, #15]
}
 8015518:	4618      	mov	r0, r3
 801551a:	3710      	adds	r7, #16
 801551c:	46bd      	mov	sp, r7
 801551e:	bd80      	pop	{r7, pc}

08015520 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8015520:	b580      	push	{r7, lr}
 8015522:	b086      	sub	sp, #24
 8015524:	af00      	add	r7, sp, #0
 8015526:	60f8      	str	r0, [r7, #12]
 8015528:	460b      	mov	r3, r1
 801552a:	607a      	str	r2, [r7, #4]
 801552c:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 801552e:	7afb      	ldrb	r3, [r7, #11]
 8015530:	2b00      	cmp	r3, #0
 8015532:	d137      	bne.n	80155a4 <USBD_LL_DataOutStage+0x84>
  {
    pep = &pdev->ep_out[0];
 8015534:	68fb      	ldr	r3, [r7, #12]
 8015536:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 801553a:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 801553c:	68fb      	ldr	r3, [r7, #12]
 801553e:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8015542:	2b03      	cmp	r3, #3
 8015544:	d14a      	bne.n	80155dc <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 8015546:	693b      	ldr	r3, [r7, #16]
 8015548:	689a      	ldr	r2, [r3, #8]
 801554a:	693b      	ldr	r3, [r7, #16]
 801554c:	68db      	ldr	r3, [r3, #12]
 801554e:	429a      	cmp	r2, r3
 8015550:	d913      	bls.n	801557a <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8015552:	693b      	ldr	r3, [r7, #16]
 8015554:	689a      	ldr	r2, [r3, #8]
 8015556:	693b      	ldr	r3, [r7, #16]
 8015558:	68db      	ldr	r3, [r3, #12]
 801555a:	1ad2      	subs	r2, r2, r3
 801555c:	693b      	ldr	r3, [r7, #16]
 801555e:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8015560:	693b      	ldr	r3, [r7, #16]
 8015562:	68da      	ldr	r2, [r3, #12]
 8015564:	693b      	ldr	r3, [r7, #16]
 8015566:	689b      	ldr	r3, [r3, #8]
 8015568:	4293      	cmp	r3, r2
 801556a:	bf28      	it	cs
 801556c:	4613      	movcs	r3, r2
 801556e:	461a      	mov	r2, r3
 8015570:	6879      	ldr	r1, [r7, #4]
 8015572:	68f8      	ldr	r0, [r7, #12]
 8015574:	f000 ff8f 	bl	8016496 <USBD_CtlContinueRx>
 8015578:	e030      	b.n	80155dc <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 801557a:	68fb      	ldr	r3, [r7, #12]
 801557c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8015580:	691b      	ldr	r3, [r3, #16]
 8015582:	2b00      	cmp	r3, #0
 8015584:	d00a      	beq.n	801559c <USBD_LL_DataOutStage+0x7c>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 8015586:	68fb      	ldr	r3, [r7, #12]
 8015588:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 801558c:	2b03      	cmp	r3, #3
 801558e:	d105      	bne.n	801559c <USBD_LL_DataOutStage+0x7c>
        {
          pdev->pClass->EP0_RxReady(pdev);
 8015590:	68fb      	ldr	r3, [r7, #12]
 8015592:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8015596:	691b      	ldr	r3, [r3, #16]
 8015598:	68f8      	ldr	r0, [r7, #12]
 801559a:	4798      	blx	r3
        }
        (void)USBD_CtlSendStatus(pdev);
 801559c:	68f8      	ldr	r0, [r7, #12]
 801559e:	f000 ff8b 	bl	80164b8 <USBD_CtlSendStatus>
 80155a2:	e01b      	b.n	80155dc <USBD_LL_DataOutStage+0xbc>
        (void)USBD_LL_StallEP(pdev, 0U);
      }
#endif
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 80155a4:	68fb      	ldr	r3, [r7, #12]
 80155a6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80155aa:	699b      	ldr	r3, [r3, #24]
 80155ac:	2b00      	cmp	r3, #0
 80155ae:	d013      	beq.n	80155d8 <USBD_LL_DataOutStage+0xb8>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 80155b0:	68fb      	ldr	r3, [r7, #12]
 80155b2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 80155b6:	2b03      	cmp	r3, #3
 80155b8:	d10e      	bne.n	80155d8 <USBD_LL_DataOutStage+0xb8>
  {
    ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 80155ba:	68fb      	ldr	r3, [r7, #12]
 80155bc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80155c0:	699b      	ldr	r3, [r3, #24]
 80155c2:	7afa      	ldrb	r2, [r7, #11]
 80155c4:	4611      	mov	r1, r2
 80155c6:	68f8      	ldr	r0, [r7, #12]
 80155c8:	4798      	blx	r3
 80155ca:	4603      	mov	r3, r0
 80155cc:	75fb      	strb	r3, [r7, #23]

    if (ret != USBD_OK)
 80155ce:	7dfb      	ldrb	r3, [r7, #23]
 80155d0:	2b00      	cmp	r3, #0
 80155d2:	d003      	beq.n	80155dc <USBD_LL_DataOutStage+0xbc>
    {
      return ret;
 80155d4:	7dfb      	ldrb	r3, [r7, #23]
 80155d6:	e002      	b.n	80155de <USBD_LL_DataOutStage+0xbe>
    }
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 80155d8:	2303      	movs	r3, #3
 80155da:	e000      	b.n	80155de <USBD_LL_DataOutStage+0xbe>
  }

  return USBD_OK;
 80155dc:	2300      	movs	r3, #0
}
 80155de:	4618      	mov	r0, r3
 80155e0:	3718      	adds	r7, #24
 80155e2:	46bd      	mov	sp, r7
 80155e4:	bd80      	pop	{r7, pc}

080155e6 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 80155e6:	b580      	push	{r7, lr}
 80155e8:	b086      	sub	sp, #24
 80155ea:	af00      	add	r7, sp, #0
 80155ec:	60f8      	str	r0, [r7, #12]
 80155ee:	460b      	mov	r3, r1
 80155f0:	607a      	str	r2, [r7, #4]
 80155f2:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 80155f4:	7afb      	ldrb	r3, [r7, #11]
 80155f6:	2b00      	cmp	r3, #0
 80155f8:	d16a      	bne.n	80156d0 <USBD_LL_DataInStage+0xea>
  {
    pep = &pdev->ep_in[0];
 80155fa:	68fb      	ldr	r3, [r7, #12]
 80155fc:	3314      	adds	r3, #20
 80155fe:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8015600:	68fb      	ldr	r3, [r7, #12]
 8015602:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8015606:	2b02      	cmp	r3, #2
 8015608:	d155      	bne.n	80156b6 <USBD_LL_DataInStage+0xd0>
    {
      if (pep->rem_length > pep->maxpacket)
 801560a:	693b      	ldr	r3, [r7, #16]
 801560c:	689a      	ldr	r2, [r3, #8]
 801560e:	693b      	ldr	r3, [r7, #16]
 8015610:	68db      	ldr	r3, [r3, #12]
 8015612:	429a      	cmp	r2, r3
 8015614:	d914      	bls.n	8015640 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8015616:	693b      	ldr	r3, [r7, #16]
 8015618:	689a      	ldr	r2, [r3, #8]
 801561a:	693b      	ldr	r3, [r7, #16]
 801561c:	68db      	ldr	r3, [r3, #12]
 801561e:	1ad2      	subs	r2, r2, r3
 8015620:	693b      	ldr	r3, [r7, #16]
 8015622:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8015624:	693b      	ldr	r3, [r7, #16]
 8015626:	689b      	ldr	r3, [r3, #8]
 8015628:	461a      	mov	r2, r3
 801562a:	6879      	ldr	r1, [r7, #4]
 801562c:	68f8      	ldr	r0, [r7, #12]
 801562e:	f000 ff21 	bl	8016474 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
       (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8015632:	2300      	movs	r3, #0
 8015634:	2200      	movs	r2, #0
 8015636:	2100      	movs	r1, #0
 8015638:	68f8      	ldr	r0, [r7, #12]
 801563a:	f003 fef2 	bl	8019422 <USBD_LL_PrepareReceive>
 801563e:	e03a      	b.n	80156b6 <USBD_LL_DataInStage+0xd0>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8015640:	693b      	ldr	r3, [r7, #16]
 8015642:	68da      	ldr	r2, [r3, #12]
 8015644:	693b      	ldr	r3, [r7, #16]
 8015646:	689b      	ldr	r3, [r3, #8]
 8015648:	429a      	cmp	r2, r3
 801564a:	d11c      	bne.n	8015686 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 801564c:	693b      	ldr	r3, [r7, #16]
 801564e:	685a      	ldr	r2, [r3, #4]
 8015650:	693b      	ldr	r3, [r7, #16]
 8015652:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8015654:	429a      	cmp	r2, r3
 8015656:	d316      	bcc.n	8015686 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8015658:	693b      	ldr	r3, [r7, #16]
 801565a:	685a      	ldr	r2, [r3, #4]
 801565c:	68fb      	ldr	r3, [r7, #12]
 801565e:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8015662:	429a      	cmp	r2, r3
 8015664:	d20f      	bcs.n	8015686 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8015666:	2200      	movs	r2, #0
 8015668:	2100      	movs	r1, #0
 801566a:	68f8      	ldr	r0, [r7, #12]
 801566c:	f000 ff02 	bl	8016474 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8015670:	68fb      	ldr	r3, [r7, #12]
 8015672:	2200      	movs	r2, #0
 8015674:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8015678:	2300      	movs	r3, #0
 801567a:	2200      	movs	r2, #0
 801567c:	2100      	movs	r1, #0
 801567e:	68f8      	ldr	r0, [r7, #12]
 8015680:	f003 fecf 	bl	8019422 <USBD_LL_PrepareReceive>
 8015684:	e017      	b.n	80156b6 <USBD_LL_DataInStage+0xd0>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8015686:	68fb      	ldr	r3, [r7, #12]
 8015688:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801568c:	68db      	ldr	r3, [r3, #12]
 801568e:	2b00      	cmp	r3, #0
 8015690:	d00a      	beq.n	80156a8 <USBD_LL_DataInStage+0xc2>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 8015692:	68fb      	ldr	r3, [r7, #12]
 8015694:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8015698:	2b03      	cmp	r3, #3
 801569a:	d105      	bne.n	80156a8 <USBD_LL_DataInStage+0xc2>
          {
            pdev->pClass->EP0_TxSent(pdev);
 801569c:	68fb      	ldr	r3, [r7, #12]
 801569e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80156a2:	68db      	ldr	r3, [r3, #12]
 80156a4:	68f8      	ldr	r0, [r7, #12]
 80156a6:	4798      	blx	r3
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 80156a8:	2180      	movs	r1, #128	; 0x80
 80156aa:	68f8      	ldr	r0, [r7, #12]
 80156ac:	f003 fe0f 	bl	80192ce <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 80156b0:	68f8      	ldr	r0, [r7, #12]
 80156b2:	f000 ff14 	bl	80164de <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 80156b6:	68fb      	ldr	r3, [r7, #12]
 80156b8:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 80156bc:	2b01      	cmp	r3, #1
 80156be:	d123      	bne.n	8015708 <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 80156c0:	68f8      	ldr	r0, [r7, #12]
 80156c2:	f7ff fe9b 	bl	80153fc <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 80156c6:	68fb      	ldr	r3, [r7, #12]
 80156c8:	2200      	movs	r2, #0
 80156ca:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 80156ce:	e01b      	b.n	8015708 <USBD_LL_DataInStage+0x122>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 80156d0:	68fb      	ldr	r3, [r7, #12]
 80156d2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80156d6:	695b      	ldr	r3, [r3, #20]
 80156d8:	2b00      	cmp	r3, #0
 80156da:	d013      	beq.n	8015704 <USBD_LL_DataInStage+0x11e>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 80156dc:	68fb      	ldr	r3, [r7, #12]
 80156de:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 80156e2:	2b03      	cmp	r3, #3
 80156e4:	d10e      	bne.n	8015704 <USBD_LL_DataInStage+0x11e>
  {
    ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 80156e6:	68fb      	ldr	r3, [r7, #12]
 80156e8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80156ec:	695b      	ldr	r3, [r3, #20]
 80156ee:	7afa      	ldrb	r2, [r7, #11]
 80156f0:	4611      	mov	r1, r2
 80156f2:	68f8      	ldr	r0, [r7, #12]
 80156f4:	4798      	blx	r3
 80156f6:	4603      	mov	r3, r0
 80156f8:	75fb      	strb	r3, [r7, #23]

    if (ret != USBD_OK)
 80156fa:	7dfb      	ldrb	r3, [r7, #23]
 80156fc:	2b00      	cmp	r3, #0
 80156fe:	d003      	beq.n	8015708 <USBD_LL_DataInStage+0x122>
    {
      return ret;
 8015700:	7dfb      	ldrb	r3, [r7, #23]
 8015702:	e002      	b.n	801570a <USBD_LL_DataInStage+0x124>
    }
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8015704:	2303      	movs	r3, #3
 8015706:	e000      	b.n	801570a <USBD_LL_DataInStage+0x124>
  }

  return USBD_OK;
 8015708:	2300      	movs	r3, #0
}
 801570a:	4618      	mov	r0, r3
 801570c:	3718      	adds	r7, #24
 801570e:	46bd      	mov	sp, r7
 8015710:	bd80      	pop	{r7, pc}

08015712 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8015712:	b580      	push	{r7, lr}
 8015714:	b082      	sub	sp, #8
 8015716:	af00      	add	r7, sp, #0
 8015718:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 801571a:	687b      	ldr	r3, [r7, #4]
 801571c:	2201      	movs	r2, #1
 801571e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8015722:	687b      	ldr	r3, [r7, #4]
 8015724:	2200      	movs	r2, #0
 8015726:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 801572a:	687b      	ldr	r3, [r7, #4]
 801572c:	2200      	movs	r2, #0
 801572e:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8015730:	687b      	ldr	r3, [r7, #4]
 8015732:	2200      	movs	r2, #0
 8015734:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData != NULL)
 8015738:	687b      	ldr	r3, [r7, #4]
 801573a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 801573e:	2b00      	cmp	r3, #0
 8015740:	d009      	beq.n	8015756 <USBD_LL_Reset+0x44>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8015742:	687b      	ldr	r3, [r7, #4]
 8015744:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8015748:	685b      	ldr	r3, [r3, #4]
 801574a:	687a      	ldr	r2, [r7, #4]
 801574c:	6852      	ldr	r2, [r2, #4]
 801574e:	b2d2      	uxtb	r2, r2
 8015750:	4611      	mov	r1, r2
 8015752:	6878      	ldr	r0, [r7, #4]
 8015754:	4798      	blx	r3
  }

    /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8015756:	2340      	movs	r3, #64	; 0x40
 8015758:	2200      	movs	r2, #0
 801575a:	2100      	movs	r1, #0
 801575c:	6878      	ldr	r0, [r7, #4]
 801575e:	f003 fd52 	bl	8019206 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8015762:	687b      	ldr	r3, [r7, #4]
 8015764:	2201      	movs	r2, #1
 8015766:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 801576a:	687b      	ldr	r3, [r7, #4]
 801576c:	2240      	movs	r2, #64	; 0x40
 801576e:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8015772:	2340      	movs	r3, #64	; 0x40
 8015774:	2200      	movs	r2, #0
 8015776:	2180      	movs	r1, #128	; 0x80
 8015778:	6878      	ldr	r0, [r7, #4]
 801577a:	f003 fd44 	bl	8019206 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 801577e:	687b      	ldr	r3, [r7, #4]
 8015780:	2201      	movs	r2, #1
 8015782:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8015784:	687b      	ldr	r3, [r7, #4]
 8015786:	2240      	movs	r2, #64	; 0x40
 8015788:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 801578a:	2300      	movs	r3, #0
}
 801578c:	4618      	mov	r0, r3
 801578e:	3708      	adds	r7, #8
 8015790:	46bd      	mov	sp, r7
 8015792:	bd80      	pop	{r7, pc}

08015794 <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8015794:	b480      	push	{r7}
 8015796:	b083      	sub	sp, #12
 8015798:	af00      	add	r7, sp, #0
 801579a:	6078      	str	r0, [r7, #4]
 801579c:	460b      	mov	r3, r1
 801579e:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 80157a0:	687b      	ldr	r3, [r7, #4]
 80157a2:	78fa      	ldrb	r2, [r7, #3]
 80157a4:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 80157a6:	2300      	movs	r3, #0
}
 80157a8:	4618      	mov	r0, r3
 80157aa:	370c      	adds	r7, #12
 80157ac:	46bd      	mov	sp, r7
 80157ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80157b2:	4770      	bx	lr

080157b4 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 80157b4:	b480      	push	{r7}
 80157b6:	b083      	sub	sp, #12
 80157b8:	af00      	add	r7, sp, #0
 80157ba:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 80157bc:	687b      	ldr	r3, [r7, #4]
 80157be:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 80157c2:	687b      	ldr	r3, [r7, #4]
 80157c4:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 80157c8:	687b      	ldr	r3, [r7, #4]
 80157ca:	2204      	movs	r2, #4
 80157cc:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 80157d0:	2300      	movs	r3, #0
}
 80157d2:	4618      	mov	r0, r3
 80157d4:	370c      	adds	r7, #12
 80157d6:	46bd      	mov	sp, r7
 80157d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80157dc:	4770      	bx	lr

080157de <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 80157de:	b480      	push	{r7}
 80157e0:	b083      	sub	sp, #12
 80157e2:	af00      	add	r7, sp, #0
 80157e4:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 80157e6:	687b      	ldr	r3, [r7, #4]
 80157e8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80157ec:	2b04      	cmp	r3, #4
 80157ee:	d105      	bne.n	80157fc <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 80157f0:	687b      	ldr	r3, [r7, #4]
 80157f2:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 80157f6:	687b      	ldr	r3, [r7, #4]
 80157f8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 80157fc:	2300      	movs	r3, #0
}
 80157fe:	4618      	mov	r0, r3
 8015800:	370c      	adds	r7, #12
 8015802:	46bd      	mov	sp, r7
 8015804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015808:	4770      	bx	lr

0801580a <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 801580a:	b580      	push	{r7, lr}
 801580c:	b082      	sub	sp, #8
 801580e:	af00      	add	r7, sp, #0
 8015810:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8015812:	687b      	ldr	r3, [r7, #4]
 8015814:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8015818:	2b03      	cmp	r3, #3
 801581a:	d10b      	bne.n	8015834 <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 801581c:	687b      	ldr	r3, [r7, #4]
 801581e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8015822:	69db      	ldr	r3, [r3, #28]
 8015824:	2b00      	cmp	r3, #0
 8015826:	d005      	beq.n	8015834 <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 8015828:	687b      	ldr	r3, [r7, #4]
 801582a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801582e:	69db      	ldr	r3, [r3, #28]
 8015830:	6878      	ldr	r0, [r7, #4]
 8015832:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8015834:	2300      	movs	r3, #0
}
 8015836:	4618      	mov	r0, r3
 8015838:	3708      	adds	r7, #8
 801583a:	46bd      	mov	sp, r7
 801583c:	bd80      	pop	{r7, pc}

0801583e <USBD_LL_IsoINIncomplete>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 801583e:	b480      	push	{r7}
 8015840:	b083      	sub	sp, #12
 8015842:	af00      	add	r7, sp, #0
 8015844:	6078      	str	r0, [r7, #4]
 8015846:	460b      	mov	r3, r1
 8015848:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 801584a:	2300      	movs	r3, #0
}
 801584c:	4618      	mov	r0, r3
 801584e:	370c      	adds	r7, #12
 8015850:	46bd      	mov	sp, r7
 8015852:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015856:	4770      	bx	lr

08015858 <USBD_LL_IsoOUTIncomplete>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8015858:	b480      	push	{r7}
 801585a:	b083      	sub	sp, #12
 801585c:	af00      	add	r7, sp, #0
 801585e:	6078      	str	r0, [r7, #4]
 8015860:	460b      	mov	r3, r1
 8015862:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 8015864:	2300      	movs	r3, #0
}
 8015866:	4618      	mov	r0, r3
 8015868:	370c      	adds	r7, #12
 801586a:	46bd      	mov	sp, r7
 801586c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015870:	4770      	bx	lr

08015872 <USBD_LL_DevConnected>:
*         Handle device connection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8015872:	b480      	push	{r7}
 8015874:	b083      	sub	sp, #12
 8015876:	af00      	add	r7, sp, #0
 8015878:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 801587a:	2300      	movs	r3, #0
}
 801587c:	4618      	mov	r0, r3
 801587e:	370c      	adds	r7, #12
 8015880:	46bd      	mov	sp, r7
 8015882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015886:	4770      	bx	lr

08015888 <USBD_LL_DevDisconnected>:
*         Handle device disconnection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8015888:	b580      	push	{r7, lr}
 801588a:	b082      	sub	sp, #8
 801588c:	af00      	add	r7, sp, #0
 801588e:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8015890:	687b      	ldr	r3, [r7, #4]
 8015892:	2201      	movs	r2, #1
 8015894:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  if (pdev->pClass != NULL)
 8015898:	687b      	ldr	r3, [r7, #4]
 801589a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801589e:	2b00      	cmp	r3, #0
 80158a0:	d009      	beq.n	80158b6 <USBD_LL_DevDisconnected+0x2e>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 80158a2:	687b      	ldr	r3, [r7, #4]
 80158a4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80158a8:	685b      	ldr	r3, [r3, #4]
 80158aa:	687a      	ldr	r2, [r7, #4]
 80158ac:	6852      	ldr	r2, [r2, #4]
 80158ae:	b2d2      	uxtb	r2, r2
 80158b0:	4611      	mov	r1, r2
 80158b2:	6878      	ldr	r0, [r7, #4]
 80158b4:	4798      	blx	r3
  }

  return USBD_OK;
 80158b6:	2300      	movs	r3, #0
}
 80158b8:	4618      	mov	r0, r3
 80158ba:	3708      	adds	r7, #8
 80158bc:	46bd      	mov	sp, r7
 80158be:	bd80      	pop	{r7, pc}

080158c0 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 80158c0:	b480      	push	{r7}
 80158c2:	b087      	sub	sp, #28
 80158c4:	af00      	add	r7, sp, #0
 80158c6:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 80158c8:	687b      	ldr	r3, [r7, #4]
 80158ca:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 80158cc:	697b      	ldr	r3, [r7, #20]
 80158ce:	781b      	ldrb	r3, [r3, #0]
 80158d0:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 80158d2:	697b      	ldr	r3, [r7, #20]
 80158d4:	3301      	adds	r3, #1
 80158d6:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 80158d8:	697b      	ldr	r3, [r7, #20]
 80158da:	781b      	ldrb	r3, [r3, #0]
 80158dc:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 80158de:	8a3b      	ldrh	r3, [r7, #16]
 80158e0:	021b      	lsls	r3, r3, #8
 80158e2:	b21a      	sxth	r2, r3
 80158e4:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80158e8:	4313      	orrs	r3, r2
 80158ea:	b21b      	sxth	r3, r3
 80158ec:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 80158ee:	89fb      	ldrh	r3, [r7, #14]
}
 80158f0:	4618      	mov	r0, r3
 80158f2:	371c      	adds	r7, #28
 80158f4:	46bd      	mov	sp, r7
 80158f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80158fa:	4770      	bx	lr

080158fc <USBD_StdDevReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80158fc:	b580      	push	{r7, lr}
 80158fe:	b084      	sub	sp, #16
 8015900:	af00      	add	r7, sp, #0
 8015902:	6078      	str	r0, [r7, #4]
 8015904:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8015906:	2300      	movs	r3, #0
 8015908:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 801590a:	683b      	ldr	r3, [r7, #0]
 801590c:	781b      	ldrb	r3, [r3, #0]
 801590e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8015912:	2b20      	cmp	r3, #32
 8015914:	d004      	beq.n	8015920 <USBD_StdDevReq+0x24>
 8015916:	2b40      	cmp	r3, #64	; 0x40
 8015918:	d002      	beq.n	8015920 <USBD_StdDevReq+0x24>
 801591a:	2b00      	cmp	r3, #0
 801591c:	d00a      	beq.n	8015934 <USBD_StdDevReq+0x38>
 801591e:	e050      	b.n	80159c2 <USBD_StdDevReq+0xc6>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8015920:	687b      	ldr	r3, [r7, #4]
 8015922:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8015926:	689b      	ldr	r3, [r3, #8]
 8015928:	6839      	ldr	r1, [r7, #0]
 801592a:	6878      	ldr	r0, [r7, #4]
 801592c:	4798      	blx	r3
 801592e:	4603      	mov	r3, r0
 8015930:	73fb      	strb	r3, [r7, #15]
    break;
 8015932:	e04b      	b.n	80159cc <USBD_StdDevReq+0xd0>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 8015934:	683b      	ldr	r3, [r7, #0]
 8015936:	785b      	ldrb	r3, [r3, #1]
 8015938:	2b09      	cmp	r3, #9
 801593a:	d83c      	bhi.n	80159b6 <USBD_StdDevReq+0xba>
 801593c:	a201      	add	r2, pc, #4	; (adr r2, 8015944 <USBD_StdDevReq+0x48>)
 801593e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8015942:	bf00      	nop
 8015944:	08015999 	.word	0x08015999
 8015948:	080159ad 	.word	0x080159ad
 801594c:	080159b7 	.word	0x080159b7
 8015950:	080159a3 	.word	0x080159a3
 8015954:	080159b7 	.word	0x080159b7
 8015958:	08015977 	.word	0x08015977
 801595c:	0801596d 	.word	0x0801596d
 8015960:	080159b7 	.word	0x080159b7
 8015964:	0801598f 	.word	0x0801598f
 8015968:	08015981 	.word	0x08015981
    {
    case USB_REQ_GET_DESCRIPTOR:
      USBD_GetDescriptor(pdev, req);
 801596c:	6839      	ldr	r1, [r7, #0]
 801596e:	6878      	ldr	r0, [r7, #4]
 8015970:	f000 f9ce 	bl	8015d10 <USBD_GetDescriptor>
      break;
 8015974:	e024      	b.n	80159c0 <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_ADDRESS:
      USBD_SetAddress(pdev, req);
 8015976:	6839      	ldr	r1, [r7, #0]
 8015978:	6878      	ldr	r0, [r7, #4]
 801597a:	f000 fb33 	bl	8015fe4 <USBD_SetAddress>
      break;
 801597e:	e01f      	b.n	80159c0 <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_CONFIGURATION:
      ret = USBD_SetConfig(pdev, req);
 8015980:	6839      	ldr	r1, [r7, #0]
 8015982:	6878      	ldr	r0, [r7, #4]
 8015984:	f000 fb70 	bl	8016068 <USBD_SetConfig>
 8015988:	4603      	mov	r3, r0
 801598a:	73fb      	strb	r3, [r7, #15]
      break;
 801598c:	e018      	b.n	80159c0 <USBD_StdDevReq+0xc4>

    case USB_REQ_GET_CONFIGURATION:
      USBD_GetConfig(pdev, req);
 801598e:	6839      	ldr	r1, [r7, #0]
 8015990:	6878      	ldr	r0, [r7, #4]
 8015992:	f000 fc0d 	bl	80161b0 <USBD_GetConfig>
      break;
 8015996:	e013      	b.n	80159c0 <USBD_StdDevReq+0xc4>

    case USB_REQ_GET_STATUS:
      USBD_GetStatus(pdev, req);
 8015998:	6839      	ldr	r1, [r7, #0]
 801599a:	6878      	ldr	r0, [r7, #4]
 801599c:	f000 fc3c 	bl	8016218 <USBD_GetStatus>
      break;
 80159a0:	e00e      	b.n	80159c0 <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_FEATURE:
      USBD_SetFeature(pdev, req);
 80159a2:	6839      	ldr	r1, [r7, #0]
 80159a4:	6878      	ldr	r0, [r7, #4]
 80159a6:	f000 fc6a 	bl	801627e <USBD_SetFeature>
      break;
 80159aa:	e009      	b.n	80159c0 <USBD_StdDevReq+0xc4>

    case USB_REQ_CLEAR_FEATURE:
      USBD_ClrFeature(pdev, req);
 80159ac:	6839      	ldr	r1, [r7, #0]
 80159ae:	6878      	ldr	r0, [r7, #4]
 80159b0:	f000 fc79 	bl	80162a6 <USBD_ClrFeature>
      break;
 80159b4:	e004      	b.n	80159c0 <USBD_StdDevReq+0xc4>

    default:
      USBD_CtlError(pdev, req);
 80159b6:	6839      	ldr	r1, [r7, #0]
 80159b8:	6878      	ldr	r0, [r7, #4]
 80159ba:	f000 fccf 	bl	801635c <USBD_CtlError>
      break;
 80159be:	bf00      	nop
    }
    break;
 80159c0:	e004      	b.n	80159cc <USBD_StdDevReq+0xd0>

  default:
    USBD_CtlError(pdev, req);
 80159c2:	6839      	ldr	r1, [r7, #0]
 80159c4:	6878      	ldr	r0, [r7, #4]
 80159c6:	f000 fcc9 	bl	801635c <USBD_CtlError>
    break;
 80159ca:	bf00      	nop
  }

  return ret;
 80159cc:	7bfb      	ldrb	r3, [r7, #15]
}
 80159ce:	4618      	mov	r0, r3
 80159d0:	3710      	adds	r7, #16
 80159d2:	46bd      	mov	sp, r7
 80159d4:	bd80      	pop	{r7, pc}
 80159d6:	bf00      	nop

080159d8 <USBD_StdItfReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80159d8:	b580      	push	{r7, lr}
 80159da:	b084      	sub	sp, #16
 80159dc:	af00      	add	r7, sp, #0
 80159de:	6078      	str	r0, [r7, #4]
 80159e0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80159e2:	2300      	movs	r3, #0
 80159e4:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80159e6:	683b      	ldr	r3, [r7, #0]
 80159e8:	781b      	ldrb	r3, [r3, #0]
 80159ea:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80159ee:	2b20      	cmp	r3, #32
 80159f0:	d003      	beq.n	80159fa <USBD_StdItfReq+0x22>
 80159f2:	2b40      	cmp	r3, #64	; 0x40
 80159f4:	d001      	beq.n	80159fa <USBD_StdItfReq+0x22>
 80159f6:	2b00      	cmp	r3, #0
 80159f8:	d12a      	bne.n	8015a50 <USBD_StdItfReq+0x78>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
  case USB_REQ_TYPE_STANDARD:
    switch (pdev->dev_state)
 80159fa:	687b      	ldr	r3, [r7, #4]
 80159fc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8015a00:	3b01      	subs	r3, #1
 8015a02:	2b02      	cmp	r3, #2
 8015a04:	d81d      	bhi.n	8015a42 <USBD_StdItfReq+0x6a>
    {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:

      if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8015a06:	683b      	ldr	r3, [r7, #0]
 8015a08:	889b      	ldrh	r3, [r3, #4]
 8015a0a:	b2db      	uxtb	r3, r3
 8015a0c:	2b01      	cmp	r3, #1
 8015a0e:	d813      	bhi.n	8015a38 <USBD_StdItfReq+0x60>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8015a10:	687b      	ldr	r3, [r7, #4]
 8015a12:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8015a16:	689b      	ldr	r3, [r3, #8]
 8015a18:	6839      	ldr	r1, [r7, #0]
 8015a1a:	6878      	ldr	r0, [r7, #4]
 8015a1c:	4798      	blx	r3
 8015a1e:	4603      	mov	r3, r0
 8015a20:	73fb      	strb	r3, [r7, #15]

        if ((req->wLength == 0U) && (ret == USBD_OK))
 8015a22:	683b      	ldr	r3, [r7, #0]
 8015a24:	88db      	ldrh	r3, [r3, #6]
 8015a26:	2b00      	cmp	r3, #0
 8015a28:	d110      	bne.n	8015a4c <USBD_StdItfReq+0x74>
 8015a2a:	7bfb      	ldrb	r3, [r7, #15]
 8015a2c:	2b00      	cmp	r3, #0
 8015a2e:	d10d      	bne.n	8015a4c <USBD_StdItfReq+0x74>
        {
          (void)USBD_CtlSendStatus(pdev);
 8015a30:	6878      	ldr	r0, [r7, #4]
 8015a32:	f000 fd41 	bl	80164b8 <USBD_CtlSendStatus>
      }
      else
      {
        USBD_CtlError(pdev, req);
      }
      break;
 8015a36:	e009      	b.n	8015a4c <USBD_StdItfReq+0x74>
        USBD_CtlError(pdev, req);
 8015a38:	6839      	ldr	r1, [r7, #0]
 8015a3a:	6878      	ldr	r0, [r7, #4]
 8015a3c:	f000 fc8e 	bl	801635c <USBD_CtlError>
      break;
 8015a40:	e004      	b.n	8015a4c <USBD_StdItfReq+0x74>

    default:
      USBD_CtlError(pdev, req);
 8015a42:	6839      	ldr	r1, [r7, #0]
 8015a44:	6878      	ldr	r0, [r7, #4]
 8015a46:	f000 fc89 	bl	801635c <USBD_CtlError>
      break;
 8015a4a:	e000      	b.n	8015a4e <USBD_StdItfReq+0x76>
      break;
 8015a4c:	bf00      	nop
    }
    break;
 8015a4e:	e004      	b.n	8015a5a <USBD_StdItfReq+0x82>

  default:
    USBD_CtlError(pdev, req);
 8015a50:	6839      	ldr	r1, [r7, #0]
 8015a52:	6878      	ldr	r0, [r7, #4]
 8015a54:	f000 fc82 	bl	801635c <USBD_CtlError>
    break;
 8015a58:	bf00      	nop
  }

  return ret;
 8015a5a:	7bfb      	ldrb	r3, [r7, #15]
}
 8015a5c:	4618      	mov	r0, r3
 8015a5e:	3710      	adds	r7, #16
 8015a60:	46bd      	mov	sp, r7
 8015a62:	bd80      	pop	{r7, pc}

08015a64 <USBD_StdEPReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8015a64:	b580      	push	{r7, lr}
 8015a66:	b084      	sub	sp, #16
 8015a68:	af00      	add	r7, sp, #0
 8015a6a:	6078      	str	r0, [r7, #4]
 8015a6c:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8015a6e:	2300      	movs	r3, #0
 8015a70:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 8015a72:	683b      	ldr	r3, [r7, #0]
 8015a74:	889b      	ldrh	r3, [r3, #4]
 8015a76:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8015a78:	683b      	ldr	r3, [r7, #0]
 8015a7a:	781b      	ldrb	r3, [r3, #0]
 8015a7c:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8015a80:	2b20      	cmp	r3, #32
 8015a82:	d004      	beq.n	8015a8e <USBD_StdEPReq+0x2a>
 8015a84:	2b40      	cmp	r3, #64	; 0x40
 8015a86:	d002      	beq.n	8015a8e <USBD_StdEPReq+0x2a>
 8015a88:	2b00      	cmp	r3, #0
 8015a8a:	d00a      	beq.n	8015aa2 <USBD_StdEPReq+0x3e>
 8015a8c:	e135      	b.n	8015cfa <USBD_StdEPReq+0x296>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8015a8e:	687b      	ldr	r3, [r7, #4]
 8015a90:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8015a94:	689b      	ldr	r3, [r3, #8]
 8015a96:	6839      	ldr	r1, [r7, #0]
 8015a98:	6878      	ldr	r0, [r7, #4]
 8015a9a:	4798      	blx	r3
 8015a9c:	4603      	mov	r3, r0
 8015a9e:	73fb      	strb	r3, [r7, #15]
    break;
 8015aa0:	e130      	b.n	8015d04 <USBD_StdEPReq+0x2a0>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 8015aa2:	683b      	ldr	r3, [r7, #0]
 8015aa4:	785b      	ldrb	r3, [r3, #1]
 8015aa6:	2b01      	cmp	r3, #1
 8015aa8:	d03e      	beq.n	8015b28 <USBD_StdEPReq+0xc4>
 8015aaa:	2b03      	cmp	r3, #3
 8015aac:	d002      	beq.n	8015ab4 <USBD_StdEPReq+0x50>
 8015aae:	2b00      	cmp	r3, #0
 8015ab0:	d077      	beq.n	8015ba2 <USBD_StdEPReq+0x13e>
 8015ab2:	e11c      	b.n	8015cee <USBD_StdEPReq+0x28a>
    {
    case USB_REQ_SET_FEATURE:
      switch (pdev->dev_state)
 8015ab4:	687b      	ldr	r3, [r7, #4]
 8015ab6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8015aba:	2b02      	cmp	r3, #2
 8015abc:	d002      	beq.n	8015ac4 <USBD_StdEPReq+0x60>
 8015abe:	2b03      	cmp	r3, #3
 8015ac0:	d015      	beq.n	8015aee <USBD_StdEPReq+0x8a>
 8015ac2:	e02b      	b.n	8015b1c <USBD_StdEPReq+0xb8>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8015ac4:	7bbb      	ldrb	r3, [r7, #14]
 8015ac6:	2b00      	cmp	r3, #0
 8015ac8:	d00c      	beq.n	8015ae4 <USBD_StdEPReq+0x80>
 8015aca:	7bbb      	ldrb	r3, [r7, #14]
 8015acc:	2b80      	cmp	r3, #128	; 0x80
 8015ace:	d009      	beq.n	8015ae4 <USBD_StdEPReq+0x80>
        {
          (void)USBD_LL_StallEP(pdev, ep_addr);
 8015ad0:	7bbb      	ldrb	r3, [r7, #14]
 8015ad2:	4619      	mov	r1, r3
 8015ad4:	6878      	ldr	r0, [r7, #4]
 8015ad6:	f003 fbfa 	bl	80192ce <USBD_LL_StallEP>
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8015ada:	2180      	movs	r1, #128	; 0x80
 8015adc:	6878      	ldr	r0, [r7, #4]
 8015ade:	f003 fbf6 	bl	80192ce <USBD_LL_StallEP>
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 8015ae2:	e020      	b.n	8015b26 <USBD_StdEPReq+0xc2>
          USBD_CtlError(pdev, req);
 8015ae4:	6839      	ldr	r1, [r7, #0]
 8015ae6:	6878      	ldr	r0, [r7, #4]
 8015ae8:	f000 fc38 	bl	801635c <USBD_CtlError>
        break;
 8015aec:	e01b      	b.n	8015b26 <USBD_StdEPReq+0xc2>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 8015aee:	683b      	ldr	r3, [r7, #0]
 8015af0:	885b      	ldrh	r3, [r3, #2]
 8015af2:	2b00      	cmp	r3, #0
 8015af4:	d10e      	bne.n	8015b14 <USBD_StdEPReq+0xb0>
        {
          if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8015af6:	7bbb      	ldrb	r3, [r7, #14]
 8015af8:	2b00      	cmp	r3, #0
 8015afa:	d00b      	beq.n	8015b14 <USBD_StdEPReq+0xb0>
 8015afc:	7bbb      	ldrb	r3, [r7, #14]
 8015afe:	2b80      	cmp	r3, #128	; 0x80
 8015b00:	d008      	beq.n	8015b14 <USBD_StdEPReq+0xb0>
 8015b02:	683b      	ldr	r3, [r7, #0]
 8015b04:	88db      	ldrh	r3, [r3, #6]
 8015b06:	2b00      	cmp	r3, #0
 8015b08:	d104      	bne.n	8015b14 <USBD_StdEPReq+0xb0>
          {
            (void)USBD_LL_StallEP(pdev, ep_addr);
 8015b0a:	7bbb      	ldrb	r3, [r7, #14]
 8015b0c:	4619      	mov	r1, r3
 8015b0e:	6878      	ldr	r0, [r7, #4]
 8015b10:	f003 fbdd 	bl	80192ce <USBD_LL_StallEP>
          }
        }
        (void)USBD_CtlSendStatus(pdev);
 8015b14:	6878      	ldr	r0, [r7, #4]
 8015b16:	f000 fccf 	bl	80164b8 <USBD_CtlSendStatus>

        break;
 8015b1a:	e004      	b.n	8015b26 <USBD_StdEPReq+0xc2>

      default:
        USBD_CtlError(pdev, req);
 8015b1c:	6839      	ldr	r1, [r7, #0]
 8015b1e:	6878      	ldr	r0, [r7, #4]
 8015b20:	f000 fc1c 	bl	801635c <USBD_CtlError>
        break;
 8015b24:	bf00      	nop
      }
      break;
 8015b26:	e0e7      	b.n	8015cf8 <USBD_StdEPReq+0x294>

    case USB_REQ_CLEAR_FEATURE:

      switch (pdev->dev_state)
 8015b28:	687b      	ldr	r3, [r7, #4]
 8015b2a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8015b2e:	2b02      	cmp	r3, #2
 8015b30:	d002      	beq.n	8015b38 <USBD_StdEPReq+0xd4>
 8015b32:	2b03      	cmp	r3, #3
 8015b34:	d015      	beq.n	8015b62 <USBD_StdEPReq+0xfe>
 8015b36:	e02d      	b.n	8015b94 <USBD_StdEPReq+0x130>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8015b38:	7bbb      	ldrb	r3, [r7, #14]
 8015b3a:	2b00      	cmp	r3, #0
 8015b3c:	d00c      	beq.n	8015b58 <USBD_StdEPReq+0xf4>
 8015b3e:	7bbb      	ldrb	r3, [r7, #14]
 8015b40:	2b80      	cmp	r3, #128	; 0x80
 8015b42:	d009      	beq.n	8015b58 <USBD_StdEPReq+0xf4>
        {
          (void)USBD_LL_StallEP(pdev, ep_addr);
 8015b44:	7bbb      	ldrb	r3, [r7, #14]
 8015b46:	4619      	mov	r1, r3
 8015b48:	6878      	ldr	r0, [r7, #4]
 8015b4a:	f003 fbc0 	bl	80192ce <USBD_LL_StallEP>
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8015b4e:	2180      	movs	r1, #128	; 0x80
 8015b50:	6878      	ldr	r0, [r7, #4]
 8015b52:	f003 fbbc 	bl	80192ce <USBD_LL_StallEP>
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 8015b56:	e023      	b.n	8015ba0 <USBD_StdEPReq+0x13c>
          USBD_CtlError(pdev, req);
 8015b58:	6839      	ldr	r1, [r7, #0]
 8015b5a:	6878      	ldr	r0, [r7, #4]
 8015b5c:	f000 fbfe 	bl	801635c <USBD_CtlError>
        break;
 8015b60:	e01e      	b.n	8015ba0 <USBD_StdEPReq+0x13c>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 8015b62:	683b      	ldr	r3, [r7, #0]
 8015b64:	885b      	ldrh	r3, [r3, #2]
 8015b66:	2b00      	cmp	r3, #0
 8015b68:	d119      	bne.n	8015b9e <USBD_StdEPReq+0x13a>
        {
          if ((ep_addr & 0x7FU) != 0x00U)
 8015b6a:	7bbb      	ldrb	r3, [r7, #14]
 8015b6c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8015b70:	2b00      	cmp	r3, #0
 8015b72:	d004      	beq.n	8015b7e <USBD_StdEPReq+0x11a>
          {
            (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8015b74:	7bbb      	ldrb	r3, [r7, #14]
 8015b76:	4619      	mov	r1, r3
 8015b78:	6878      	ldr	r0, [r7, #4]
 8015b7a:	f003 fbc7 	bl	801930c <USBD_LL_ClearStallEP>
          }
          (void)USBD_CtlSendStatus(pdev);
 8015b7e:	6878      	ldr	r0, [r7, #4]
 8015b80:	f000 fc9a 	bl	80164b8 <USBD_CtlSendStatus>
          (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8015b84:	687b      	ldr	r3, [r7, #4]
 8015b86:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8015b8a:	689b      	ldr	r3, [r3, #8]
 8015b8c:	6839      	ldr	r1, [r7, #0]
 8015b8e:	6878      	ldr	r0, [r7, #4]
 8015b90:	4798      	blx	r3
        }
        break;
 8015b92:	e004      	b.n	8015b9e <USBD_StdEPReq+0x13a>

      default:
        USBD_CtlError(pdev, req);
 8015b94:	6839      	ldr	r1, [r7, #0]
 8015b96:	6878      	ldr	r0, [r7, #4]
 8015b98:	f000 fbe0 	bl	801635c <USBD_CtlError>
        break;
 8015b9c:	e000      	b.n	8015ba0 <USBD_StdEPReq+0x13c>
        break;
 8015b9e:	bf00      	nop
      }
      break;
 8015ba0:	e0aa      	b.n	8015cf8 <USBD_StdEPReq+0x294>

    case USB_REQ_GET_STATUS:
      switch (pdev->dev_state)
 8015ba2:	687b      	ldr	r3, [r7, #4]
 8015ba4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8015ba8:	2b02      	cmp	r3, #2
 8015baa:	d002      	beq.n	8015bb2 <USBD_StdEPReq+0x14e>
 8015bac:	2b03      	cmp	r3, #3
 8015bae:	d032      	beq.n	8015c16 <USBD_StdEPReq+0x1b2>
 8015bb0:	e097      	b.n	8015ce2 <USBD_StdEPReq+0x27e>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8015bb2:	7bbb      	ldrb	r3, [r7, #14]
 8015bb4:	2b00      	cmp	r3, #0
 8015bb6:	d007      	beq.n	8015bc8 <USBD_StdEPReq+0x164>
 8015bb8:	7bbb      	ldrb	r3, [r7, #14]
 8015bba:	2b80      	cmp	r3, #128	; 0x80
 8015bbc:	d004      	beq.n	8015bc8 <USBD_StdEPReq+0x164>
        {
          USBD_CtlError(pdev, req);
 8015bbe:	6839      	ldr	r1, [r7, #0]
 8015bc0:	6878      	ldr	r0, [r7, #4]
 8015bc2:	f000 fbcb 	bl	801635c <USBD_CtlError>
          break;
 8015bc6:	e091      	b.n	8015cec <USBD_StdEPReq+0x288>
        }
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8015bc8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8015bcc:	2b00      	cmp	r3, #0
 8015bce:	da0b      	bge.n	8015be8 <USBD_StdEPReq+0x184>
 8015bd0:	7bbb      	ldrb	r3, [r7, #14]
 8015bd2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8015bd6:	4613      	mov	r3, r2
 8015bd8:	009b      	lsls	r3, r3, #2
 8015bda:	4413      	add	r3, r2
 8015bdc:	009b      	lsls	r3, r3, #2
 8015bde:	3310      	adds	r3, #16
 8015be0:	687a      	ldr	r2, [r7, #4]
 8015be2:	4413      	add	r3, r2
 8015be4:	3304      	adds	r3, #4
 8015be6:	e00b      	b.n	8015c00 <USBD_StdEPReq+0x19c>
              &pdev->ep_out[ep_addr & 0x7FU];
 8015be8:	7bbb      	ldrb	r3, [r7, #14]
 8015bea:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8015bee:	4613      	mov	r3, r2
 8015bf0:	009b      	lsls	r3, r3, #2
 8015bf2:	4413      	add	r3, r2
 8015bf4:	009b      	lsls	r3, r3, #2
 8015bf6:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8015bfa:	687a      	ldr	r2, [r7, #4]
 8015bfc:	4413      	add	r3, r2
 8015bfe:	3304      	adds	r3, #4
 8015c00:	60bb      	str	r3, [r7, #8]

        pep->status = 0x0000U;
 8015c02:	68bb      	ldr	r3, [r7, #8]
 8015c04:	2200      	movs	r2, #0
 8015c06:	601a      	str	r2, [r3, #0]

        (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8015c08:	68bb      	ldr	r3, [r7, #8]
 8015c0a:	2202      	movs	r2, #2
 8015c0c:	4619      	mov	r1, r3
 8015c0e:	6878      	ldr	r0, [r7, #4]
 8015c10:	f000 fc15 	bl	801643e <USBD_CtlSendData>
        break;
 8015c14:	e06a      	b.n	8015cec <USBD_StdEPReq+0x288>

      case USBD_STATE_CONFIGURED:
        if ((ep_addr & 0x80U) == 0x80U)
 8015c16:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8015c1a:	2b00      	cmp	r3, #0
 8015c1c:	da11      	bge.n	8015c42 <USBD_StdEPReq+0x1de>
        {
          if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8015c1e:	7bbb      	ldrb	r3, [r7, #14]
 8015c20:	f003 020f 	and.w	r2, r3, #15
 8015c24:	6879      	ldr	r1, [r7, #4]
 8015c26:	4613      	mov	r3, r2
 8015c28:	009b      	lsls	r3, r3, #2
 8015c2a:	4413      	add	r3, r2
 8015c2c:	009b      	lsls	r3, r3, #2
 8015c2e:	440b      	add	r3, r1
 8015c30:	3324      	adds	r3, #36	; 0x24
 8015c32:	881b      	ldrh	r3, [r3, #0]
 8015c34:	2b00      	cmp	r3, #0
 8015c36:	d117      	bne.n	8015c68 <USBD_StdEPReq+0x204>
          {
            USBD_CtlError(pdev, req);
 8015c38:	6839      	ldr	r1, [r7, #0]
 8015c3a:	6878      	ldr	r0, [r7, #4]
 8015c3c:	f000 fb8e 	bl	801635c <USBD_CtlError>
            break;
 8015c40:	e054      	b.n	8015cec <USBD_StdEPReq+0x288>
          }
        }
        else
        {
          if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8015c42:	7bbb      	ldrb	r3, [r7, #14]
 8015c44:	f003 020f 	and.w	r2, r3, #15
 8015c48:	6879      	ldr	r1, [r7, #4]
 8015c4a:	4613      	mov	r3, r2
 8015c4c:	009b      	lsls	r3, r3, #2
 8015c4e:	4413      	add	r3, r2
 8015c50:	009b      	lsls	r3, r3, #2
 8015c52:	440b      	add	r3, r1
 8015c54:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8015c58:	881b      	ldrh	r3, [r3, #0]
 8015c5a:	2b00      	cmp	r3, #0
 8015c5c:	d104      	bne.n	8015c68 <USBD_StdEPReq+0x204>
          {
            USBD_CtlError(pdev, req);
 8015c5e:	6839      	ldr	r1, [r7, #0]
 8015c60:	6878      	ldr	r0, [r7, #4]
 8015c62:	f000 fb7b 	bl	801635c <USBD_CtlError>
            break;
 8015c66:	e041      	b.n	8015cec <USBD_StdEPReq+0x288>
          }
        }

        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8015c68:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8015c6c:	2b00      	cmp	r3, #0
 8015c6e:	da0b      	bge.n	8015c88 <USBD_StdEPReq+0x224>
 8015c70:	7bbb      	ldrb	r3, [r7, #14]
 8015c72:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8015c76:	4613      	mov	r3, r2
 8015c78:	009b      	lsls	r3, r3, #2
 8015c7a:	4413      	add	r3, r2
 8015c7c:	009b      	lsls	r3, r3, #2
 8015c7e:	3310      	adds	r3, #16
 8015c80:	687a      	ldr	r2, [r7, #4]
 8015c82:	4413      	add	r3, r2
 8015c84:	3304      	adds	r3, #4
 8015c86:	e00b      	b.n	8015ca0 <USBD_StdEPReq+0x23c>
              &pdev->ep_out[ep_addr & 0x7FU];
 8015c88:	7bbb      	ldrb	r3, [r7, #14]
 8015c8a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8015c8e:	4613      	mov	r3, r2
 8015c90:	009b      	lsls	r3, r3, #2
 8015c92:	4413      	add	r3, r2
 8015c94:	009b      	lsls	r3, r3, #2
 8015c96:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8015c9a:	687a      	ldr	r2, [r7, #4]
 8015c9c:	4413      	add	r3, r2
 8015c9e:	3304      	adds	r3, #4
 8015ca0:	60bb      	str	r3, [r7, #8]

          if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8015ca2:	7bbb      	ldrb	r3, [r7, #14]
 8015ca4:	2b00      	cmp	r3, #0
 8015ca6:	d002      	beq.n	8015cae <USBD_StdEPReq+0x24a>
 8015ca8:	7bbb      	ldrb	r3, [r7, #14]
 8015caa:	2b80      	cmp	r3, #128	; 0x80
 8015cac:	d103      	bne.n	8015cb6 <USBD_StdEPReq+0x252>
          {
            pep->status = 0x0000U;
 8015cae:	68bb      	ldr	r3, [r7, #8]
 8015cb0:	2200      	movs	r2, #0
 8015cb2:	601a      	str	r2, [r3, #0]
 8015cb4:	e00e      	b.n	8015cd4 <USBD_StdEPReq+0x270>
          }
          else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8015cb6:	7bbb      	ldrb	r3, [r7, #14]
 8015cb8:	4619      	mov	r1, r3
 8015cba:	6878      	ldr	r0, [r7, #4]
 8015cbc:	f003 fb45 	bl	801934a <USBD_LL_IsStallEP>
 8015cc0:	4603      	mov	r3, r0
 8015cc2:	2b00      	cmp	r3, #0
 8015cc4:	d003      	beq.n	8015cce <USBD_StdEPReq+0x26a>
          {
            pep->status = 0x0001U;
 8015cc6:	68bb      	ldr	r3, [r7, #8]
 8015cc8:	2201      	movs	r2, #1
 8015cca:	601a      	str	r2, [r3, #0]
 8015ccc:	e002      	b.n	8015cd4 <USBD_StdEPReq+0x270>
          }
          else
          {
            pep->status = 0x0000U;
 8015cce:	68bb      	ldr	r3, [r7, #8]
 8015cd0:	2200      	movs	r2, #0
 8015cd2:	601a      	str	r2, [r3, #0]
          }

          (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8015cd4:	68bb      	ldr	r3, [r7, #8]
 8015cd6:	2202      	movs	r2, #2
 8015cd8:	4619      	mov	r1, r3
 8015cda:	6878      	ldr	r0, [r7, #4]
 8015cdc:	f000 fbaf 	bl	801643e <USBD_CtlSendData>
          break;
 8015ce0:	e004      	b.n	8015cec <USBD_StdEPReq+0x288>

      default:
        USBD_CtlError(pdev, req);
 8015ce2:	6839      	ldr	r1, [r7, #0]
 8015ce4:	6878      	ldr	r0, [r7, #4]
 8015ce6:	f000 fb39 	bl	801635c <USBD_CtlError>
        break;
 8015cea:	bf00      	nop
      }
      break;
 8015cec:	e004      	b.n	8015cf8 <USBD_StdEPReq+0x294>

    default:
      USBD_CtlError(pdev, req);
 8015cee:	6839      	ldr	r1, [r7, #0]
 8015cf0:	6878      	ldr	r0, [r7, #4]
 8015cf2:	f000 fb33 	bl	801635c <USBD_CtlError>
      break;
 8015cf6:	bf00      	nop
    }
    break;
 8015cf8:	e004      	b.n	8015d04 <USBD_StdEPReq+0x2a0>

  default:
    USBD_CtlError(pdev, req);
 8015cfa:	6839      	ldr	r1, [r7, #0]
 8015cfc:	6878      	ldr	r0, [r7, #4]
 8015cfe:	f000 fb2d 	bl	801635c <USBD_CtlError>
    break;
 8015d02:	bf00      	nop
  }

  return ret;
 8015d04:	7bfb      	ldrb	r3, [r7, #15]
}
 8015d06:	4618      	mov	r0, r3
 8015d08:	3710      	adds	r7, #16
 8015d0a:	46bd      	mov	sp, r7
 8015d0c:	bd80      	pop	{r7, pc}
	...

08015d10 <USBD_GetDescriptor>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8015d10:	b580      	push	{r7, lr}
 8015d12:	b084      	sub	sp, #16
 8015d14:	af00      	add	r7, sp, #0
 8015d16:	6078      	str	r0, [r7, #4]
 8015d18:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8015d1a:	2300      	movs	r3, #0
 8015d1c:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8015d1e:	2300      	movs	r3, #0
 8015d20:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8015d22:	2300      	movs	r3, #0
 8015d24:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8015d26:	683b      	ldr	r3, [r7, #0]
 8015d28:	885b      	ldrh	r3, [r3, #2]
 8015d2a:	0a1b      	lsrs	r3, r3, #8
 8015d2c:	b29b      	uxth	r3, r3
 8015d2e:	3b01      	subs	r3, #1
 8015d30:	2b06      	cmp	r3, #6
 8015d32:	f200 8128 	bhi.w	8015f86 <USBD_GetDescriptor+0x276>
 8015d36:	a201      	add	r2, pc, #4	; (adr r2, 8015d3c <USBD_GetDescriptor+0x2c>)
 8015d38:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8015d3c:	08015d59 	.word	0x08015d59
 8015d40:	08015d71 	.word	0x08015d71
 8015d44:	08015db1 	.word	0x08015db1
 8015d48:	08015f87 	.word	0x08015f87
 8015d4c:	08015f87 	.word	0x08015f87
 8015d50:	08015f27 	.word	0x08015f27
 8015d54:	08015f53 	.word	0x08015f53
      err++;
    }
    break;
#endif
  case USB_DESC_TYPE_DEVICE:
    pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8015d58:	687b      	ldr	r3, [r7, #4]
 8015d5a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8015d5e:	681b      	ldr	r3, [r3, #0]
 8015d60:	687a      	ldr	r2, [r7, #4]
 8015d62:	7c12      	ldrb	r2, [r2, #16]
 8015d64:	f107 0108 	add.w	r1, r7, #8
 8015d68:	4610      	mov	r0, r2
 8015d6a:	4798      	blx	r3
 8015d6c:	60f8      	str	r0, [r7, #12]
    break;
 8015d6e:	e112      	b.n	8015f96 <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_CONFIGURATION:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8015d70:	687b      	ldr	r3, [r7, #4]
 8015d72:	7c1b      	ldrb	r3, [r3, #16]
 8015d74:	2b00      	cmp	r3, #0
 8015d76:	d10d      	bne.n	8015d94 <USBD_GetDescriptor+0x84>
    {
      pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8015d78:	687b      	ldr	r3, [r7, #4]
 8015d7a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8015d7e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8015d80:	f107 0208 	add.w	r2, r7, #8
 8015d84:	4610      	mov	r0, r2
 8015d86:	4798      	blx	r3
 8015d88:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8015d8a:	68fb      	ldr	r3, [r7, #12]
 8015d8c:	3301      	adds	r3, #1
 8015d8e:	2202      	movs	r2, #2
 8015d90:	701a      	strb	r2, [r3, #0]
    else
    {
      pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
    }
    break;
 8015d92:	e100      	b.n	8015f96 <USBD_GetDescriptor+0x286>
      pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8015d94:	687b      	ldr	r3, [r7, #4]
 8015d96:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8015d9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8015d9c:	f107 0208 	add.w	r2, r7, #8
 8015da0:	4610      	mov	r0, r2
 8015da2:	4798      	blx	r3
 8015da4:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8015da6:	68fb      	ldr	r3, [r7, #12]
 8015da8:	3301      	adds	r3, #1
 8015daa:	2202      	movs	r2, #2
 8015dac:	701a      	strb	r2, [r3, #0]
    break;
 8015dae:	e0f2      	b.n	8015f96 <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_STRING:
    switch ((uint8_t)(req->wValue))
 8015db0:	683b      	ldr	r3, [r7, #0]
 8015db2:	885b      	ldrh	r3, [r3, #2]
 8015db4:	b2db      	uxtb	r3, r3
 8015db6:	2b05      	cmp	r3, #5
 8015db8:	f200 80ac 	bhi.w	8015f14 <USBD_GetDescriptor+0x204>
 8015dbc:	a201      	add	r2, pc, #4	; (adr r2, 8015dc4 <USBD_GetDescriptor+0xb4>)
 8015dbe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8015dc2:	bf00      	nop
 8015dc4:	08015ddd 	.word	0x08015ddd
 8015dc8:	08015e11 	.word	0x08015e11
 8015dcc:	08015e45 	.word	0x08015e45
 8015dd0:	08015e79 	.word	0x08015e79
 8015dd4:	08015ead 	.word	0x08015ead
 8015dd8:	08015ee1 	.word	0x08015ee1
    {
    case USBD_IDX_LANGID_STR:
      if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8015ddc:	687b      	ldr	r3, [r7, #4]
 8015dde:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8015de2:	685b      	ldr	r3, [r3, #4]
 8015de4:	2b00      	cmp	r3, #0
 8015de6:	d00b      	beq.n	8015e00 <USBD_GetDescriptor+0xf0>
      {
        pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8015de8:	687b      	ldr	r3, [r7, #4]
 8015dea:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8015dee:	685b      	ldr	r3, [r3, #4]
 8015df0:	687a      	ldr	r2, [r7, #4]
 8015df2:	7c12      	ldrb	r2, [r2, #16]
 8015df4:	f107 0108 	add.w	r1, r7, #8
 8015df8:	4610      	mov	r0, r2
 8015dfa:	4798      	blx	r3
 8015dfc:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8015dfe:	e091      	b.n	8015f24 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 8015e00:	6839      	ldr	r1, [r7, #0]
 8015e02:	6878      	ldr	r0, [r7, #4]
 8015e04:	f000 faaa 	bl	801635c <USBD_CtlError>
        err++;
 8015e08:	7afb      	ldrb	r3, [r7, #11]
 8015e0a:	3301      	adds	r3, #1
 8015e0c:	72fb      	strb	r3, [r7, #11]
      break;
 8015e0e:	e089      	b.n	8015f24 <USBD_GetDescriptor+0x214>

    case USBD_IDX_MFC_STR:
      if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8015e10:	687b      	ldr	r3, [r7, #4]
 8015e12:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8015e16:	689b      	ldr	r3, [r3, #8]
 8015e18:	2b00      	cmp	r3, #0
 8015e1a:	d00b      	beq.n	8015e34 <USBD_GetDescriptor+0x124>
      {
        pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8015e1c:	687b      	ldr	r3, [r7, #4]
 8015e1e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8015e22:	689b      	ldr	r3, [r3, #8]
 8015e24:	687a      	ldr	r2, [r7, #4]
 8015e26:	7c12      	ldrb	r2, [r2, #16]
 8015e28:	f107 0108 	add.w	r1, r7, #8
 8015e2c:	4610      	mov	r0, r2
 8015e2e:	4798      	blx	r3
 8015e30:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8015e32:	e077      	b.n	8015f24 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 8015e34:	6839      	ldr	r1, [r7, #0]
 8015e36:	6878      	ldr	r0, [r7, #4]
 8015e38:	f000 fa90 	bl	801635c <USBD_CtlError>
        err++;
 8015e3c:	7afb      	ldrb	r3, [r7, #11]
 8015e3e:	3301      	adds	r3, #1
 8015e40:	72fb      	strb	r3, [r7, #11]
      break;
 8015e42:	e06f      	b.n	8015f24 <USBD_GetDescriptor+0x214>

    case USBD_IDX_PRODUCT_STR:
      if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8015e44:	687b      	ldr	r3, [r7, #4]
 8015e46:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8015e4a:	68db      	ldr	r3, [r3, #12]
 8015e4c:	2b00      	cmp	r3, #0
 8015e4e:	d00b      	beq.n	8015e68 <USBD_GetDescriptor+0x158>
      {
        pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8015e50:	687b      	ldr	r3, [r7, #4]
 8015e52:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8015e56:	68db      	ldr	r3, [r3, #12]
 8015e58:	687a      	ldr	r2, [r7, #4]
 8015e5a:	7c12      	ldrb	r2, [r2, #16]
 8015e5c:	f107 0108 	add.w	r1, r7, #8
 8015e60:	4610      	mov	r0, r2
 8015e62:	4798      	blx	r3
 8015e64:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8015e66:	e05d      	b.n	8015f24 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 8015e68:	6839      	ldr	r1, [r7, #0]
 8015e6a:	6878      	ldr	r0, [r7, #4]
 8015e6c:	f000 fa76 	bl	801635c <USBD_CtlError>
        err++;
 8015e70:	7afb      	ldrb	r3, [r7, #11]
 8015e72:	3301      	adds	r3, #1
 8015e74:	72fb      	strb	r3, [r7, #11]
      break;
 8015e76:	e055      	b.n	8015f24 <USBD_GetDescriptor+0x214>

    case USBD_IDX_SERIAL_STR:
      if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8015e78:	687b      	ldr	r3, [r7, #4]
 8015e7a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8015e7e:	691b      	ldr	r3, [r3, #16]
 8015e80:	2b00      	cmp	r3, #0
 8015e82:	d00b      	beq.n	8015e9c <USBD_GetDescriptor+0x18c>
      {
        pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8015e84:	687b      	ldr	r3, [r7, #4]
 8015e86:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8015e8a:	691b      	ldr	r3, [r3, #16]
 8015e8c:	687a      	ldr	r2, [r7, #4]
 8015e8e:	7c12      	ldrb	r2, [r2, #16]
 8015e90:	f107 0108 	add.w	r1, r7, #8
 8015e94:	4610      	mov	r0, r2
 8015e96:	4798      	blx	r3
 8015e98:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8015e9a:	e043      	b.n	8015f24 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 8015e9c:	6839      	ldr	r1, [r7, #0]
 8015e9e:	6878      	ldr	r0, [r7, #4]
 8015ea0:	f000 fa5c 	bl	801635c <USBD_CtlError>
        err++;
 8015ea4:	7afb      	ldrb	r3, [r7, #11]
 8015ea6:	3301      	adds	r3, #1
 8015ea8:	72fb      	strb	r3, [r7, #11]
      break;
 8015eaa:	e03b      	b.n	8015f24 <USBD_GetDescriptor+0x214>

    case USBD_IDX_CONFIG_STR:
      if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8015eac:	687b      	ldr	r3, [r7, #4]
 8015eae:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8015eb2:	695b      	ldr	r3, [r3, #20]
 8015eb4:	2b00      	cmp	r3, #0
 8015eb6:	d00b      	beq.n	8015ed0 <USBD_GetDescriptor+0x1c0>
      {
        pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8015eb8:	687b      	ldr	r3, [r7, #4]
 8015eba:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8015ebe:	695b      	ldr	r3, [r3, #20]
 8015ec0:	687a      	ldr	r2, [r7, #4]
 8015ec2:	7c12      	ldrb	r2, [r2, #16]
 8015ec4:	f107 0108 	add.w	r1, r7, #8
 8015ec8:	4610      	mov	r0, r2
 8015eca:	4798      	blx	r3
 8015ecc:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8015ece:	e029      	b.n	8015f24 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 8015ed0:	6839      	ldr	r1, [r7, #0]
 8015ed2:	6878      	ldr	r0, [r7, #4]
 8015ed4:	f000 fa42 	bl	801635c <USBD_CtlError>
        err++;
 8015ed8:	7afb      	ldrb	r3, [r7, #11]
 8015eda:	3301      	adds	r3, #1
 8015edc:	72fb      	strb	r3, [r7, #11]
      break;
 8015ede:	e021      	b.n	8015f24 <USBD_GetDescriptor+0x214>

    case USBD_IDX_INTERFACE_STR:
      if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8015ee0:	687b      	ldr	r3, [r7, #4]
 8015ee2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8015ee6:	699b      	ldr	r3, [r3, #24]
 8015ee8:	2b00      	cmp	r3, #0
 8015eea:	d00b      	beq.n	8015f04 <USBD_GetDescriptor+0x1f4>
      {
        pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8015eec:	687b      	ldr	r3, [r7, #4]
 8015eee:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8015ef2:	699b      	ldr	r3, [r3, #24]
 8015ef4:	687a      	ldr	r2, [r7, #4]
 8015ef6:	7c12      	ldrb	r2, [r2, #16]
 8015ef8:	f107 0108 	add.w	r1, r7, #8
 8015efc:	4610      	mov	r0, r2
 8015efe:	4798      	blx	r3
 8015f00:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8015f02:	e00f      	b.n	8015f24 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 8015f04:	6839      	ldr	r1, [r7, #0]
 8015f06:	6878      	ldr	r0, [r7, #4]
 8015f08:	f000 fa28 	bl	801635c <USBD_CtlError>
        err++;
 8015f0c:	7afb      	ldrb	r3, [r7, #11]
 8015f0e:	3301      	adds	r3, #1
 8015f10:	72fb      	strb	r3, [r7, #11]
      break;
 8015f12:	e007      	b.n	8015f24 <USBD_GetDescriptor+0x214>
      {
        USBD_CtlError(pdev, req);
        err++;
      }
#else
      USBD_CtlError(pdev, req);
 8015f14:	6839      	ldr	r1, [r7, #0]
 8015f16:	6878      	ldr	r0, [r7, #4]
 8015f18:	f000 fa20 	bl	801635c <USBD_CtlError>
      err++;
 8015f1c:	7afb      	ldrb	r3, [r7, #11]
 8015f1e:	3301      	adds	r3, #1
 8015f20:	72fb      	strb	r3, [r7, #11]
#endif
      break;
 8015f22:	bf00      	nop
    }
    break;
 8015f24:	e037      	b.n	8015f96 <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_DEVICE_QUALIFIER:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8015f26:	687b      	ldr	r3, [r7, #4]
 8015f28:	7c1b      	ldrb	r3, [r3, #16]
 8015f2a:	2b00      	cmp	r3, #0
 8015f2c:	d109      	bne.n	8015f42 <USBD_GetDescriptor+0x232>
    {
      pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8015f2e:	687b      	ldr	r3, [r7, #4]
 8015f30:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8015f34:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8015f36:	f107 0208 	add.w	r2, r7, #8
 8015f3a:	4610      	mov	r0, r2
 8015f3c:	4798      	blx	r3
 8015f3e:	60f8      	str	r0, [r7, #12]
    else
    {
      USBD_CtlError(pdev, req);
      err++;
    }
    break;
 8015f40:	e029      	b.n	8015f96 <USBD_GetDescriptor+0x286>
      USBD_CtlError(pdev, req);
 8015f42:	6839      	ldr	r1, [r7, #0]
 8015f44:	6878      	ldr	r0, [r7, #4]
 8015f46:	f000 fa09 	bl	801635c <USBD_CtlError>
      err++;
 8015f4a:	7afb      	ldrb	r3, [r7, #11]
 8015f4c:	3301      	adds	r3, #1
 8015f4e:	72fb      	strb	r3, [r7, #11]
    break;
 8015f50:	e021      	b.n	8015f96 <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8015f52:	687b      	ldr	r3, [r7, #4]
 8015f54:	7c1b      	ldrb	r3, [r3, #16]
 8015f56:	2b00      	cmp	r3, #0
 8015f58:	d10d      	bne.n	8015f76 <USBD_GetDescriptor+0x266>
    {
      pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8015f5a:	687b      	ldr	r3, [r7, #4]
 8015f5c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8015f60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8015f62:	f107 0208 	add.w	r2, r7, #8
 8015f66:	4610      	mov	r0, r2
 8015f68:	4798      	blx	r3
 8015f6a:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8015f6c:	68fb      	ldr	r3, [r7, #12]
 8015f6e:	3301      	adds	r3, #1
 8015f70:	2207      	movs	r2, #7
 8015f72:	701a      	strb	r2, [r3, #0]
    else
    {
      USBD_CtlError(pdev, req);
      err++;
    }
    break;
 8015f74:	e00f      	b.n	8015f96 <USBD_GetDescriptor+0x286>
      USBD_CtlError(pdev, req);
 8015f76:	6839      	ldr	r1, [r7, #0]
 8015f78:	6878      	ldr	r0, [r7, #4]
 8015f7a:	f000 f9ef 	bl	801635c <USBD_CtlError>
      err++;
 8015f7e:	7afb      	ldrb	r3, [r7, #11]
 8015f80:	3301      	adds	r3, #1
 8015f82:	72fb      	strb	r3, [r7, #11]
    break;
 8015f84:	e007      	b.n	8015f96 <USBD_GetDescriptor+0x286>

  default:
    USBD_CtlError(pdev, req);
 8015f86:	6839      	ldr	r1, [r7, #0]
 8015f88:	6878      	ldr	r0, [r7, #4]
 8015f8a:	f000 f9e7 	bl	801635c <USBD_CtlError>
    err++;
 8015f8e:	7afb      	ldrb	r3, [r7, #11]
 8015f90:	3301      	adds	r3, #1
 8015f92:	72fb      	strb	r3, [r7, #11]
    break;
 8015f94:	bf00      	nop
  }

  if (err != 0U)
 8015f96:	7afb      	ldrb	r3, [r7, #11]
 8015f98:	2b00      	cmp	r3, #0
 8015f9a:	d11e      	bne.n	8015fda <USBD_GetDescriptor+0x2ca>
  {
    return;
  }
  else
  {
    if (req->wLength != 0U)
 8015f9c:	683b      	ldr	r3, [r7, #0]
 8015f9e:	88db      	ldrh	r3, [r3, #6]
 8015fa0:	2b00      	cmp	r3, #0
 8015fa2:	d016      	beq.n	8015fd2 <USBD_GetDescriptor+0x2c2>
    {
      if (len != 0U)
 8015fa4:	893b      	ldrh	r3, [r7, #8]
 8015fa6:	2b00      	cmp	r3, #0
 8015fa8:	d00e      	beq.n	8015fc8 <USBD_GetDescriptor+0x2b8>
      {
        len = MIN(len, req->wLength);
 8015faa:	683b      	ldr	r3, [r7, #0]
 8015fac:	88da      	ldrh	r2, [r3, #6]
 8015fae:	893b      	ldrh	r3, [r7, #8]
 8015fb0:	4293      	cmp	r3, r2
 8015fb2:	bf28      	it	cs
 8015fb4:	4613      	movcs	r3, r2
 8015fb6:	b29b      	uxth	r3, r3
 8015fb8:	813b      	strh	r3, [r7, #8]
        (void)USBD_CtlSendData(pdev, pbuf, len);
 8015fba:	893b      	ldrh	r3, [r7, #8]
 8015fbc:	461a      	mov	r2, r3
 8015fbe:	68f9      	ldr	r1, [r7, #12]
 8015fc0:	6878      	ldr	r0, [r7, #4]
 8015fc2:	f000 fa3c 	bl	801643e <USBD_CtlSendData>
 8015fc6:	e009      	b.n	8015fdc <USBD_GetDescriptor+0x2cc>
      }
      else
      {
        USBD_CtlError(pdev, req);
 8015fc8:	6839      	ldr	r1, [r7, #0]
 8015fca:	6878      	ldr	r0, [r7, #4]
 8015fcc:	f000 f9c6 	bl	801635c <USBD_CtlError>
 8015fd0:	e004      	b.n	8015fdc <USBD_GetDescriptor+0x2cc>
      }
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
 8015fd2:	6878      	ldr	r0, [r7, #4]
 8015fd4:	f000 fa70 	bl	80164b8 <USBD_CtlSendStatus>
 8015fd8:	e000      	b.n	8015fdc <USBD_GetDescriptor+0x2cc>
    return;
 8015fda:	bf00      	nop
    }
  }
}
 8015fdc:	3710      	adds	r7, #16
 8015fde:	46bd      	mov	sp, r7
 8015fe0:	bd80      	pop	{r7, pc}
 8015fe2:	bf00      	nop

08015fe4 <USBD_SetAddress>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8015fe4:	b580      	push	{r7, lr}
 8015fe6:	b084      	sub	sp, #16
 8015fe8:	af00      	add	r7, sp, #0
 8015fea:	6078      	str	r0, [r7, #4]
 8015fec:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8015fee:	683b      	ldr	r3, [r7, #0]
 8015ff0:	889b      	ldrh	r3, [r3, #4]
 8015ff2:	2b00      	cmp	r3, #0
 8015ff4:	d130      	bne.n	8016058 <USBD_SetAddress+0x74>
 8015ff6:	683b      	ldr	r3, [r7, #0]
 8015ff8:	88db      	ldrh	r3, [r3, #6]
 8015ffa:	2b00      	cmp	r3, #0
 8015ffc:	d12c      	bne.n	8016058 <USBD_SetAddress+0x74>
 8015ffe:	683b      	ldr	r3, [r7, #0]
 8016000:	885b      	ldrh	r3, [r3, #2]
 8016002:	2b7f      	cmp	r3, #127	; 0x7f
 8016004:	d828      	bhi.n	8016058 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8016006:	683b      	ldr	r3, [r7, #0]
 8016008:	885b      	ldrh	r3, [r3, #2]
 801600a:	b2db      	uxtb	r3, r3
 801600c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8016010:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8016012:	687b      	ldr	r3, [r7, #4]
 8016014:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8016018:	2b03      	cmp	r3, #3
 801601a:	d104      	bne.n	8016026 <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 801601c:	6839      	ldr	r1, [r7, #0]
 801601e:	6878      	ldr	r0, [r7, #4]
 8016020:	f000 f99c 	bl	801635c <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8016024:	e01c      	b.n	8016060 <USBD_SetAddress+0x7c>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8016026:	687b      	ldr	r3, [r7, #4]
 8016028:	7bfa      	ldrb	r2, [r7, #15]
 801602a:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 801602e:	7bfb      	ldrb	r3, [r7, #15]
 8016030:	4619      	mov	r1, r3
 8016032:	6878      	ldr	r0, [r7, #4]
 8016034:	f003 f9b5 	bl	80193a2 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8016038:	6878      	ldr	r0, [r7, #4]
 801603a:	f000 fa3d 	bl	80164b8 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 801603e:	7bfb      	ldrb	r3, [r7, #15]
 8016040:	2b00      	cmp	r3, #0
 8016042:	d004      	beq.n	801604e <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8016044:	687b      	ldr	r3, [r7, #4]
 8016046:	2202      	movs	r2, #2
 8016048:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801604c:	e008      	b.n	8016060 <USBD_SetAddress+0x7c>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 801604e:	687b      	ldr	r3, [r7, #4]
 8016050:	2201      	movs	r2, #1
 8016052:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8016056:	e003      	b.n	8016060 <USBD_SetAddress+0x7c>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8016058:	6839      	ldr	r1, [r7, #0]
 801605a:	6878      	ldr	r0, [r7, #4]
 801605c:	f000 f97e 	bl	801635c <USBD_CtlError>
  }
}
 8016060:	bf00      	nop
 8016062:	3710      	adds	r7, #16
 8016064:	46bd      	mov	sp, r7
 8016066:	bd80      	pop	{r7, pc}

08016068 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8016068:	b580      	push	{r7, lr}
 801606a:	b084      	sub	sp, #16
 801606c:	af00      	add	r7, sp, #0
 801606e:	6078      	str	r0, [r7, #4]
 8016070:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8016072:	2300      	movs	r3, #0
 8016074:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8016076:	683b      	ldr	r3, [r7, #0]
 8016078:	885b      	ldrh	r3, [r3, #2]
 801607a:	b2da      	uxtb	r2, r3
 801607c:	4b4b      	ldr	r3, [pc, #300]	; (80161ac <USBD_SetConfig+0x144>)
 801607e:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8016080:	4b4a      	ldr	r3, [pc, #296]	; (80161ac <USBD_SetConfig+0x144>)
 8016082:	781b      	ldrb	r3, [r3, #0]
 8016084:	2b01      	cmp	r3, #1
 8016086:	d905      	bls.n	8016094 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8016088:	6839      	ldr	r1, [r7, #0]
 801608a:	6878      	ldr	r0, [r7, #4]
 801608c:	f000 f966 	bl	801635c <USBD_CtlError>
    return USBD_FAIL;
 8016090:	2303      	movs	r3, #3
 8016092:	e087      	b.n	80161a4 <USBD_SetConfig+0x13c>
  }

  switch (pdev->dev_state)
 8016094:	687b      	ldr	r3, [r7, #4]
 8016096:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801609a:	2b02      	cmp	r3, #2
 801609c:	d002      	beq.n	80160a4 <USBD_SetConfig+0x3c>
 801609e:	2b03      	cmp	r3, #3
 80160a0:	d025      	beq.n	80160ee <USBD_SetConfig+0x86>
 80160a2:	e071      	b.n	8016188 <USBD_SetConfig+0x120>
  {
  case USBD_STATE_ADDRESSED:
    if (cfgidx != 0U)
 80160a4:	4b41      	ldr	r3, [pc, #260]	; (80161ac <USBD_SetConfig+0x144>)
 80160a6:	781b      	ldrb	r3, [r3, #0]
 80160a8:	2b00      	cmp	r3, #0
 80160aa:	d01c      	beq.n	80160e6 <USBD_SetConfig+0x7e>
    {
      pdev->dev_config = cfgidx;
 80160ac:	4b3f      	ldr	r3, [pc, #252]	; (80161ac <USBD_SetConfig+0x144>)
 80160ae:	781b      	ldrb	r3, [r3, #0]
 80160b0:	461a      	mov	r2, r3
 80160b2:	687b      	ldr	r3, [r7, #4]
 80160b4:	605a      	str	r2, [r3, #4]

      ret = USBD_SetClassConfig(pdev, cfgidx);
 80160b6:	4b3d      	ldr	r3, [pc, #244]	; (80161ac <USBD_SetConfig+0x144>)
 80160b8:	781b      	ldrb	r3, [r3, #0]
 80160ba:	4619      	mov	r1, r3
 80160bc:	6878      	ldr	r0, [r7, #4]
 80160be:	f7ff f9a8 	bl	8015412 <USBD_SetClassConfig>
 80160c2:	4603      	mov	r3, r0
 80160c4:	73fb      	strb	r3, [r7, #15]

      if (ret != USBD_OK)
 80160c6:	7bfb      	ldrb	r3, [r7, #15]
 80160c8:	2b00      	cmp	r3, #0
 80160ca:	d004      	beq.n	80160d6 <USBD_SetConfig+0x6e>
      {
        USBD_CtlError(pdev, req);
 80160cc:	6839      	ldr	r1, [r7, #0]
 80160ce:	6878      	ldr	r0, [r7, #4]
 80160d0:	f000 f944 	bl	801635c <USBD_CtlError>
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
    }
    break;
 80160d4:	e065      	b.n	80161a2 <USBD_SetConfig+0x13a>
        (void)USBD_CtlSendStatus(pdev);
 80160d6:	6878      	ldr	r0, [r7, #4]
 80160d8:	f000 f9ee 	bl	80164b8 <USBD_CtlSendStatus>
        pdev->dev_state = USBD_STATE_CONFIGURED;
 80160dc:	687b      	ldr	r3, [r7, #4]
 80160de:	2203      	movs	r2, #3
 80160e0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    break;
 80160e4:	e05d      	b.n	80161a2 <USBD_SetConfig+0x13a>
      (void)USBD_CtlSendStatus(pdev);
 80160e6:	6878      	ldr	r0, [r7, #4]
 80160e8:	f000 f9e6 	bl	80164b8 <USBD_CtlSendStatus>
    break;
 80160ec:	e059      	b.n	80161a2 <USBD_SetConfig+0x13a>

  case USBD_STATE_CONFIGURED:
    if (cfgidx == 0U)
 80160ee:	4b2f      	ldr	r3, [pc, #188]	; (80161ac <USBD_SetConfig+0x144>)
 80160f0:	781b      	ldrb	r3, [r3, #0]
 80160f2:	2b00      	cmp	r3, #0
 80160f4:	d112      	bne.n	801611c <USBD_SetConfig+0xb4>
    {
      pdev->dev_state = USBD_STATE_ADDRESSED;
 80160f6:	687b      	ldr	r3, [r7, #4]
 80160f8:	2202      	movs	r2, #2
 80160fa:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      pdev->dev_config = cfgidx;
 80160fe:	4b2b      	ldr	r3, [pc, #172]	; (80161ac <USBD_SetConfig+0x144>)
 8016100:	781b      	ldrb	r3, [r3, #0]
 8016102:	461a      	mov	r2, r3
 8016104:	687b      	ldr	r3, [r7, #4]
 8016106:	605a      	str	r2, [r3, #4]
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8016108:	4b28      	ldr	r3, [pc, #160]	; (80161ac <USBD_SetConfig+0x144>)
 801610a:	781b      	ldrb	r3, [r3, #0]
 801610c:	4619      	mov	r1, r3
 801610e:	6878      	ldr	r0, [r7, #4]
 8016110:	f7ff f99b 	bl	801544a <USBD_ClrClassConfig>
      (void)USBD_CtlSendStatus(pdev);
 8016114:	6878      	ldr	r0, [r7, #4]
 8016116:	f000 f9cf 	bl	80164b8 <USBD_CtlSendStatus>
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
    }
    break;
 801611a:	e042      	b.n	80161a2 <USBD_SetConfig+0x13a>
    else if (cfgidx != pdev->dev_config)
 801611c:	4b23      	ldr	r3, [pc, #140]	; (80161ac <USBD_SetConfig+0x144>)
 801611e:	781b      	ldrb	r3, [r3, #0]
 8016120:	461a      	mov	r2, r3
 8016122:	687b      	ldr	r3, [r7, #4]
 8016124:	685b      	ldr	r3, [r3, #4]
 8016126:	429a      	cmp	r2, r3
 8016128:	d02a      	beq.n	8016180 <USBD_SetConfig+0x118>
      (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 801612a:	687b      	ldr	r3, [r7, #4]
 801612c:	685b      	ldr	r3, [r3, #4]
 801612e:	b2db      	uxtb	r3, r3
 8016130:	4619      	mov	r1, r3
 8016132:	6878      	ldr	r0, [r7, #4]
 8016134:	f7ff f989 	bl	801544a <USBD_ClrClassConfig>
      pdev->dev_config = cfgidx;
 8016138:	4b1c      	ldr	r3, [pc, #112]	; (80161ac <USBD_SetConfig+0x144>)
 801613a:	781b      	ldrb	r3, [r3, #0]
 801613c:	461a      	mov	r2, r3
 801613e:	687b      	ldr	r3, [r7, #4]
 8016140:	605a      	str	r2, [r3, #4]
      ret = USBD_SetClassConfig(pdev, cfgidx);
 8016142:	4b1a      	ldr	r3, [pc, #104]	; (80161ac <USBD_SetConfig+0x144>)
 8016144:	781b      	ldrb	r3, [r3, #0]
 8016146:	4619      	mov	r1, r3
 8016148:	6878      	ldr	r0, [r7, #4]
 801614a:	f7ff f962 	bl	8015412 <USBD_SetClassConfig>
 801614e:	4603      	mov	r3, r0
 8016150:	73fb      	strb	r3, [r7, #15]
      if (ret != USBD_OK)
 8016152:	7bfb      	ldrb	r3, [r7, #15]
 8016154:	2b00      	cmp	r3, #0
 8016156:	d00f      	beq.n	8016178 <USBD_SetConfig+0x110>
        USBD_CtlError(pdev, req);
 8016158:	6839      	ldr	r1, [r7, #0]
 801615a:	6878      	ldr	r0, [r7, #4]
 801615c:	f000 f8fe 	bl	801635c <USBD_CtlError>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8016160:	687b      	ldr	r3, [r7, #4]
 8016162:	685b      	ldr	r3, [r3, #4]
 8016164:	b2db      	uxtb	r3, r3
 8016166:	4619      	mov	r1, r3
 8016168:	6878      	ldr	r0, [r7, #4]
 801616a:	f7ff f96e 	bl	801544a <USBD_ClrClassConfig>
        pdev->dev_state = USBD_STATE_ADDRESSED;
 801616e:	687b      	ldr	r3, [r7, #4]
 8016170:	2202      	movs	r2, #2
 8016172:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    break;
 8016176:	e014      	b.n	80161a2 <USBD_SetConfig+0x13a>
        (void)USBD_CtlSendStatus(pdev);
 8016178:	6878      	ldr	r0, [r7, #4]
 801617a:	f000 f99d 	bl	80164b8 <USBD_CtlSendStatus>
    break;
 801617e:	e010      	b.n	80161a2 <USBD_SetConfig+0x13a>
      (void)USBD_CtlSendStatus(pdev);
 8016180:	6878      	ldr	r0, [r7, #4]
 8016182:	f000 f999 	bl	80164b8 <USBD_CtlSendStatus>
    break;
 8016186:	e00c      	b.n	80161a2 <USBD_SetConfig+0x13a>

  default:
    USBD_CtlError(pdev, req);
 8016188:	6839      	ldr	r1, [r7, #0]
 801618a:	6878      	ldr	r0, [r7, #4]
 801618c:	f000 f8e6 	bl	801635c <USBD_CtlError>
    (void)USBD_ClrClassConfig(pdev, cfgidx);
 8016190:	4b06      	ldr	r3, [pc, #24]	; (80161ac <USBD_SetConfig+0x144>)
 8016192:	781b      	ldrb	r3, [r3, #0]
 8016194:	4619      	mov	r1, r3
 8016196:	6878      	ldr	r0, [r7, #4]
 8016198:	f7ff f957 	bl	801544a <USBD_ClrClassConfig>
    ret = USBD_FAIL;
 801619c:	2303      	movs	r3, #3
 801619e:	73fb      	strb	r3, [r7, #15]
    break;
 80161a0:	bf00      	nop
  }

  return ret;
 80161a2:	7bfb      	ldrb	r3, [r7, #15]
}
 80161a4:	4618      	mov	r0, r3
 80161a6:	3710      	adds	r7, #16
 80161a8:	46bd      	mov	sp, r7
 80161aa:	bd80      	pop	{r7, pc}
 80161ac:	24000b58 	.word	0x24000b58

080161b0 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80161b0:	b580      	push	{r7, lr}
 80161b2:	b082      	sub	sp, #8
 80161b4:	af00      	add	r7, sp, #0
 80161b6:	6078      	str	r0, [r7, #4]
 80161b8:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 80161ba:	683b      	ldr	r3, [r7, #0]
 80161bc:	88db      	ldrh	r3, [r3, #6]
 80161be:	2b01      	cmp	r3, #1
 80161c0:	d004      	beq.n	80161cc <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 80161c2:	6839      	ldr	r1, [r7, #0]
 80161c4:	6878      	ldr	r0, [r7, #4]
 80161c6:	f000 f8c9 	bl	801635c <USBD_CtlError>
    default:
      USBD_CtlError(pdev, req);
      break;
    }
  }
}
 80161ca:	e021      	b.n	8016210 <USBD_GetConfig+0x60>
    switch (pdev->dev_state)
 80161cc:	687b      	ldr	r3, [r7, #4]
 80161ce:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80161d2:	2b01      	cmp	r3, #1
 80161d4:	db17      	blt.n	8016206 <USBD_GetConfig+0x56>
 80161d6:	2b02      	cmp	r3, #2
 80161d8:	dd02      	ble.n	80161e0 <USBD_GetConfig+0x30>
 80161da:	2b03      	cmp	r3, #3
 80161dc:	d00b      	beq.n	80161f6 <USBD_GetConfig+0x46>
 80161de:	e012      	b.n	8016206 <USBD_GetConfig+0x56>
      pdev->dev_default_config = 0U;
 80161e0:	687b      	ldr	r3, [r7, #4]
 80161e2:	2200      	movs	r2, #0
 80161e4:	609a      	str	r2, [r3, #8]
      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 80161e6:	687b      	ldr	r3, [r7, #4]
 80161e8:	3308      	adds	r3, #8
 80161ea:	2201      	movs	r2, #1
 80161ec:	4619      	mov	r1, r3
 80161ee:	6878      	ldr	r0, [r7, #4]
 80161f0:	f000 f925 	bl	801643e <USBD_CtlSendData>
      break;
 80161f4:	e00c      	b.n	8016210 <USBD_GetConfig+0x60>
      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 80161f6:	687b      	ldr	r3, [r7, #4]
 80161f8:	3304      	adds	r3, #4
 80161fa:	2201      	movs	r2, #1
 80161fc:	4619      	mov	r1, r3
 80161fe:	6878      	ldr	r0, [r7, #4]
 8016200:	f000 f91d 	bl	801643e <USBD_CtlSendData>
      break;
 8016204:	e004      	b.n	8016210 <USBD_GetConfig+0x60>
      USBD_CtlError(pdev, req);
 8016206:	6839      	ldr	r1, [r7, #0]
 8016208:	6878      	ldr	r0, [r7, #4]
 801620a:	f000 f8a7 	bl	801635c <USBD_CtlError>
      break;
 801620e:	bf00      	nop
}
 8016210:	bf00      	nop
 8016212:	3708      	adds	r7, #8
 8016214:	46bd      	mov	sp, r7
 8016216:	bd80      	pop	{r7, pc}

08016218 <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8016218:	b580      	push	{r7, lr}
 801621a:	b082      	sub	sp, #8
 801621c:	af00      	add	r7, sp, #0
 801621e:	6078      	str	r0, [r7, #4]
 8016220:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8016222:	687b      	ldr	r3, [r7, #4]
 8016224:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8016228:	3b01      	subs	r3, #1
 801622a:	2b02      	cmp	r3, #2
 801622c:	d81e      	bhi.n	801626c <USBD_GetStatus+0x54>
  {
  case USBD_STATE_DEFAULT:
  case USBD_STATE_ADDRESSED:
  case USBD_STATE_CONFIGURED:
    if (req->wLength != 0x2U)
 801622e:	683b      	ldr	r3, [r7, #0]
 8016230:	88db      	ldrh	r3, [r3, #6]
 8016232:	2b02      	cmp	r3, #2
 8016234:	d004      	beq.n	8016240 <USBD_GetStatus+0x28>
    {
      USBD_CtlError(pdev, req);
 8016236:	6839      	ldr	r1, [r7, #0]
 8016238:	6878      	ldr	r0, [r7, #4]
 801623a:	f000 f88f 	bl	801635c <USBD_CtlError>
      break;
 801623e:	e01a      	b.n	8016276 <USBD_GetStatus+0x5e>
    }

#if (USBD_SELF_POWERED == 1U)
    pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8016240:	687b      	ldr	r3, [r7, #4]
 8016242:	2201      	movs	r2, #1
 8016244:	60da      	str	r2, [r3, #12]
#else
    pdev->dev_config_status = 0U;
#endif

    if (pdev->dev_remote_wakeup != 0U)
 8016246:	687b      	ldr	r3, [r7, #4]
 8016248:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 801624c:	2b00      	cmp	r3, #0
 801624e:	d005      	beq.n	801625c <USBD_GetStatus+0x44>
    {
      pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8016250:	687b      	ldr	r3, [r7, #4]
 8016252:	68db      	ldr	r3, [r3, #12]
 8016254:	f043 0202 	orr.w	r2, r3, #2
 8016258:	687b      	ldr	r3, [r7, #4]
 801625a:	60da      	str	r2, [r3, #12]
    }

    (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 801625c:	687b      	ldr	r3, [r7, #4]
 801625e:	330c      	adds	r3, #12
 8016260:	2202      	movs	r2, #2
 8016262:	4619      	mov	r1, r3
 8016264:	6878      	ldr	r0, [r7, #4]
 8016266:	f000 f8ea 	bl	801643e <USBD_CtlSendData>
    break;
 801626a:	e004      	b.n	8016276 <USBD_GetStatus+0x5e>

  default:
    USBD_CtlError(pdev, req);
 801626c:	6839      	ldr	r1, [r7, #0]
 801626e:	6878      	ldr	r0, [r7, #4]
 8016270:	f000 f874 	bl	801635c <USBD_CtlError>
    break;
 8016274:	bf00      	nop
  }
}
 8016276:	bf00      	nop
 8016278:	3708      	adds	r7, #8
 801627a:	46bd      	mov	sp, r7
 801627c:	bd80      	pop	{r7, pc}

0801627e <USBD_SetFeature>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 801627e:	b580      	push	{r7, lr}
 8016280:	b082      	sub	sp, #8
 8016282:	af00      	add	r7, sp, #0
 8016284:	6078      	str	r0, [r7, #4]
 8016286:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8016288:	683b      	ldr	r3, [r7, #0]
 801628a:	885b      	ldrh	r3, [r3, #2]
 801628c:	2b01      	cmp	r3, #1
 801628e:	d106      	bne.n	801629e <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 8016290:	687b      	ldr	r3, [r7, #4]
 8016292:	2201      	movs	r2, #1
 8016294:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8016298:	6878      	ldr	r0, [r7, #4]
 801629a:	f000 f90d 	bl	80164b8 <USBD_CtlSendStatus>
  }
}
 801629e:	bf00      	nop
 80162a0:	3708      	adds	r7, #8
 80162a2:	46bd      	mov	sp, r7
 80162a4:	bd80      	pop	{r7, pc}

080162a6 <USBD_ClrFeature>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80162a6:	b580      	push	{r7, lr}
 80162a8:	b082      	sub	sp, #8
 80162aa:	af00      	add	r7, sp, #0
 80162ac:	6078      	str	r0, [r7, #4]
 80162ae:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80162b0:	687b      	ldr	r3, [r7, #4]
 80162b2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80162b6:	3b01      	subs	r3, #1
 80162b8:	2b02      	cmp	r3, #2
 80162ba:	d80b      	bhi.n	80162d4 <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80162bc:	683b      	ldr	r3, [r7, #0]
 80162be:	885b      	ldrh	r3, [r3, #2]
 80162c0:	2b01      	cmp	r3, #1
 80162c2:	d10c      	bne.n	80162de <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 80162c4:	687b      	ldr	r3, [r7, #4]
 80162c6:	2200      	movs	r2, #0
 80162c8:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 80162cc:	6878      	ldr	r0, [r7, #4]
 80162ce:	f000 f8f3 	bl	80164b8 <USBD_CtlSendStatus>
      }
      break;
 80162d2:	e004      	b.n	80162de <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 80162d4:	6839      	ldr	r1, [r7, #0]
 80162d6:	6878      	ldr	r0, [r7, #4]
 80162d8:	f000 f840 	bl	801635c <USBD_CtlError>
      break;
 80162dc:	e000      	b.n	80162e0 <USBD_ClrFeature+0x3a>
      break;
 80162de:	bf00      	nop
  }
}
 80162e0:	bf00      	nop
 80162e2:	3708      	adds	r7, #8
 80162e4:	46bd      	mov	sp, r7
 80162e6:	bd80      	pop	{r7, pc}

080162e8 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 80162e8:	b580      	push	{r7, lr}
 80162ea:	b084      	sub	sp, #16
 80162ec:	af00      	add	r7, sp, #0
 80162ee:	6078      	str	r0, [r7, #4]
 80162f0:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 80162f2:	683b      	ldr	r3, [r7, #0]
 80162f4:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 80162f6:	68fb      	ldr	r3, [r7, #12]
 80162f8:	781a      	ldrb	r2, [r3, #0]
 80162fa:	687b      	ldr	r3, [r7, #4]
 80162fc:	701a      	strb	r2, [r3, #0]

  pbuff++;
 80162fe:	68fb      	ldr	r3, [r7, #12]
 8016300:	3301      	adds	r3, #1
 8016302:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8016304:	68fb      	ldr	r3, [r7, #12]
 8016306:	781a      	ldrb	r2, [r3, #0]
 8016308:	687b      	ldr	r3, [r7, #4]
 801630a:	705a      	strb	r2, [r3, #1]

  pbuff++;
 801630c:	68fb      	ldr	r3, [r7, #12]
 801630e:	3301      	adds	r3, #1
 8016310:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8016312:	68f8      	ldr	r0, [r7, #12]
 8016314:	f7ff fad4 	bl	80158c0 <SWAPBYTE>
 8016318:	4603      	mov	r3, r0
 801631a:	461a      	mov	r2, r3
 801631c:	687b      	ldr	r3, [r7, #4]
 801631e:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8016320:	68fb      	ldr	r3, [r7, #12]
 8016322:	3301      	adds	r3, #1
 8016324:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8016326:	68fb      	ldr	r3, [r7, #12]
 8016328:	3301      	adds	r3, #1
 801632a:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 801632c:	68f8      	ldr	r0, [r7, #12]
 801632e:	f7ff fac7 	bl	80158c0 <SWAPBYTE>
 8016332:	4603      	mov	r3, r0
 8016334:	461a      	mov	r2, r3
 8016336:	687b      	ldr	r3, [r7, #4]
 8016338:	809a      	strh	r2, [r3, #4]

  pbuff++;
 801633a:	68fb      	ldr	r3, [r7, #12]
 801633c:	3301      	adds	r3, #1
 801633e:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8016340:	68fb      	ldr	r3, [r7, #12]
 8016342:	3301      	adds	r3, #1
 8016344:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8016346:	68f8      	ldr	r0, [r7, #12]
 8016348:	f7ff faba 	bl	80158c0 <SWAPBYTE>
 801634c:	4603      	mov	r3, r0
 801634e:	461a      	mov	r2, r3
 8016350:	687b      	ldr	r3, [r7, #4]
 8016352:	80da      	strh	r2, [r3, #6]
}
 8016354:	bf00      	nop
 8016356:	3710      	adds	r7, #16
 8016358:	46bd      	mov	sp, r7
 801635a:	bd80      	pop	{r7, pc}

0801635c <USBD_CtlError>:
* @param  req: usb request
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 801635c:	b580      	push	{r7, lr}
 801635e:	b082      	sub	sp, #8
 8016360:	af00      	add	r7, sp, #0
 8016362:	6078      	str	r0, [r7, #4]
 8016364:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8016366:	2180      	movs	r1, #128	; 0x80
 8016368:	6878      	ldr	r0, [r7, #4]
 801636a:	f002 ffb0 	bl	80192ce <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 801636e:	2100      	movs	r1, #0
 8016370:	6878      	ldr	r0, [r7, #4]
 8016372:	f002 ffac 	bl	80192ce <USBD_LL_StallEP>
}
 8016376:	bf00      	nop
 8016378:	3708      	adds	r7, #8
 801637a:	46bd      	mov	sp, r7
 801637c:	bd80      	pop	{r7, pc}

0801637e <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 801637e:	b580      	push	{r7, lr}
 8016380:	b086      	sub	sp, #24
 8016382:	af00      	add	r7, sp, #0
 8016384:	60f8      	str	r0, [r7, #12]
 8016386:	60b9      	str	r1, [r7, #8]
 8016388:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 801638a:	2300      	movs	r3, #0
 801638c:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 801638e:	68fb      	ldr	r3, [r7, #12]
 8016390:	2b00      	cmp	r3, #0
 8016392:	d036      	beq.n	8016402 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 8016394:	68fb      	ldr	r3, [r7, #12]
 8016396:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8016398:	6938      	ldr	r0, [r7, #16]
 801639a:	f000 f836 	bl	801640a <USBD_GetLen>
 801639e:	4603      	mov	r3, r0
 80163a0:	3301      	adds	r3, #1
 80163a2:	b29b      	uxth	r3, r3
 80163a4:	005b      	lsls	r3, r3, #1
 80163a6:	b29a      	uxth	r2, r3
 80163a8:	687b      	ldr	r3, [r7, #4]
 80163aa:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 80163ac:	7dfb      	ldrb	r3, [r7, #23]
 80163ae:	68ba      	ldr	r2, [r7, #8]
 80163b0:	4413      	add	r3, r2
 80163b2:	687a      	ldr	r2, [r7, #4]
 80163b4:	7812      	ldrb	r2, [r2, #0]
 80163b6:	701a      	strb	r2, [r3, #0]
  idx++;
 80163b8:	7dfb      	ldrb	r3, [r7, #23]
 80163ba:	3301      	adds	r3, #1
 80163bc:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 80163be:	7dfb      	ldrb	r3, [r7, #23]
 80163c0:	68ba      	ldr	r2, [r7, #8]
 80163c2:	4413      	add	r3, r2
 80163c4:	2203      	movs	r2, #3
 80163c6:	701a      	strb	r2, [r3, #0]
  idx++;
 80163c8:	7dfb      	ldrb	r3, [r7, #23]
 80163ca:	3301      	adds	r3, #1
 80163cc:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 80163ce:	e013      	b.n	80163f8 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 80163d0:	7dfb      	ldrb	r3, [r7, #23]
 80163d2:	68ba      	ldr	r2, [r7, #8]
 80163d4:	4413      	add	r3, r2
 80163d6:	693a      	ldr	r2, [r7, #16]
 80163d8:	7812      	ldrb	r2, [r2, #0]
 80163da:	701a      	strb	r2, [r3, #0]
    pdesc++;
 80163dc:	693b      	ldr	r3, [r7, #16]
 80163de:	3301      	adds	r3, #1
 80163e0:	613b      	str	r3, [r7, #16]
    idx++;
 80163e2:	7dfb      	ldrb	r3, [r7, #23]
 80163e4:	3301      	adds	r3, #1
 80163e6:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 80163e8:	7dfb      	ldrb	r3, [r7, #23]
 80163ea:	68ba      	ldr	r2, [r7, #8]
 80163ec:	4413      	add	r3, r2
 80163ee:	2200      	movs	r2, #0
 80163f0:	701a      	strb	r2, [r3, #0]
    idx++;
 80163f2:	7dfb      	ldrb	r3, [r7, #23]
 80163f4:	3301      	adds	r3, #1
 80163f6:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 80163f8:	693b      	ldr	r3, [r7, #16]
 80163fa:	781b      	ldrb	r3, [r3, #0]
 80163fc:	2b00      	cmp	r3, #0
 80163fe:	d1e7      	bne.n	80163d0 <USBD_GetString+0x52>
 8016400:	e000      	b.n	8016404 <USBD_GetString+0x86>
    return;
 8016402:	bf00      	nop
  }
}
 8016404:	3718      	adds	r7, #24
 8016406:	46bd      	mov	sp, r7
 8016408:	bd80      	pop	{r7, pc}

0801640a <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 801640a:	b480      	push	{r7}
 801640c:	b085      	sub	sp, #20
 801640e:	af00      	add	r7, sp, #0
 8016410:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8016412:	2300      	movs	r3, #0
 8016414:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8016416:	687b      	ldr	r3, [r7, #4]
 8016418:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 801641a:	e005      	b.n	8016428 <USBD_GetLen+0x1e>
  {
    len++;
 801641c:	7bfb      	ldrb	r3, [r7, #15]
 801641e:	3301      	adds	r3, #1
 8016420:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8016422:	68bb      	ldr	r3, [r7, #8]
 8016424:	3301      	adds	r3, #1
 8016426:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8016428:	68bb      	ldr	r3, [r7, #8]
 801642a:	781b      	ldrb	r3, [r3, #0]
 801642c:	2b00      	cmp	r3, #0
 801642e:	d1f5      	bne.n	801641c <USBD_GetLen+0x12>
  }

  return len;
 8016430:	7bfb      	ldrb	r3, [r7, #15]
}
 8016432:	4618      	mov	r0, r3
 8016434:	3714      	adds	r7, #20
 8016436:	46bd      	mov	sp, r7
 8016438:	f85d 7b04 	ldr.w	r7, [sp], #4
 801643c:	4770      	bx	lr

0801643e <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 801643e:	b580      	push	{r7, lr}
 8016440:	b084      	sub	sp, #16
 8016442:	af00      	add	r7, sp, #0
 8016444:	60f8      	str	r0, [r7, #12]
 8016446:	60b9      	str	r1, [r7, #8]
 8016448:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 801644a:	68fb      	ldr	r3, [r7, #12]
 801644c:	2202      	movs	r2, #2
 801644e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8016452:	68fb      	ldr	r3, [r7, #12]
 8016454:	687a      	ldr	r2, [r7, #4]
 8016456:	619a      	str	r2, [r3, #24]
  pdev->ep_in[0].rem_length = len;
 8016458:	68fb      	ldr	r3, [r7, #12]
 801645a:	687a      	ldr	r2, [r7, #4]
 801645c:	61da      	str	r2, [r3, #28]

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 801645e:	687b      	ldr	r3, [r7, #4]
 8016460:	68ba      	ldr	r2, [r7, #8]
 8016462:	2100      	movs	r1, #0
 8016464:	68f8      	ldr	r0, [r7, #12]
 8016466:	f002 ffbb 	bl	80193e0 <USBD_LL_Transmit>

  return USBD_OK;
 801646a:	2300      	movs	r3, #0
}
 801646c:	4618      	mov	r0, r3
 801646e:	3710      	adds	r7, #16
 8016470:	46bd      	mov	sp, r7
 8016472:	bd80      	pop	{r7, pc}

08016474 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8016474:	b580      	push	{r7, lr}
 8016476:	b084      	sub	sp, #16
 8016478:	af00      	add	r7, sp, #0
 801647a:	60f8      	str	r0, [r7, #12]
 801647c:	60b9      	str	r1, [r7, #8]
 801647e:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8016480:	687b      	ldr	r3, [r7, #4]
 8016482:	68ba      	ldr	r2, [r7, #8]
 8016484:	2100      	movs	r1, #0
 8016486:	68f8      	ldr	r0, [r7, #12]
 8016488:	f002 ffaa 	bl	80193e0 <USBD_LL_Transmit>

  return USBD_OK;
 801648c:	2300      	movs	r3, #0
}
 801648e:	4618      	mov	r0, r3
 8016490:	3710      	adds	r7, #16
 8016492:	46bd      	mov	sp, r7
 8016494:	bd80      	pop	{r7, pc}

08016496 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8016496:	b580      	push	{r7, lr}
 8016498:	b084      	sub	sp, #16
 801649a:	af00      	add	r7, sp, #0
 801649c:	60f8      	str	r0, [r7, #12]
 801649e:	60b9      	str	r1, [r7, #8]
 80164a0:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80164a2:	687b      	ldr	r3, [r7, #4]
 80164a4:	68ba      	ldr	r2, [r7, #8]
 80164a6:	2100      	movs	r1, #0
 80164a8:	68f8      	ldr	r0, [r7, #12]
 80164aa:	f002 ffba 	bl	8019422 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80164ae:	2300      	movs	r3, #0
}
 80164b0:	4618      	mov	r0, r3
 80164b2:	3710      	adds	r7, #16
 80164b4:	46bd      	mov	sp, r7
 80164b6:	bd80      	pop	{r7, pc}

080164b8 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 80164b8:	b580      	push	{r7, lr}
 80164ba:	b082      	sub	sp, #8
 80164bc:	af00      	add	r7, sp, #0
 80164be:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 80164c0:	687b      	ldr	r3, [r7, #4]
 80164c2:	2204      	movs	r2, #4
 80164c4:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 80164c8:	2300      	movs	r3, #0
 80164ca:	2200      	movs	r2, #0
 80164cc:	2100      	movs	r1, #0
 80164ce:	6878      	ldr	r0, [r7, #4]
 80164d0:	f002 ff86 	bl	80193e0 <USBD_LL_Transmit>

  return USBD_OK;
 80164d4:	2300      	movs	r3, #0
}
 80164d6:	4618      	mov	r0, r3
 80164d8:	3708      	adds	r7, #8
 80164da:	46bd      	mov	sp, r7
 80164dc:	bd80      	pop	{r7, pc}

080164de <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 80164de:	b580      	push	{r7, lr}
 80164e0:	b082      	sub	sp, #8
 80164e2:	af00      	add	r7, sp, #0
 80164e4:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 80164e6:	687b      	ldr	r3, [r7, #4]
 80164e8:	2205      	movs	r2, #5
 80164ea:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80164ee:	2300      	movs	r3, #0
 80164f0:	2200      	movs	r2, #0
 80164f2:	2100      	movs	r1, #0
 80164f4:	6878      	ldr	r0, [r7, #4]
 80164f6:	f002 ff94 	bl	8019422 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80164fa:	2300      	movs	r3, #0
}
 80164fc:	4618      	mov	r0, r3
 80164fe:	3708      	adds	r7, #8
 8016500:	46bd      	mov	sp, r7
 8016502:	bd80      	pop	{r7, pc}

08016504 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 8016504:	b580      	push	{r7, lr}
 8016506:	b084      	sub	sp, #16
 8016508:	af00      	add	r7, sp, #0
 801650a:	4603      	mov	r3, r0
 801650c:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 801650e:	79fb      	ldrb	r3, [r7, #7]
 8016510:	4a08      	ldr	r2, [pc, #32]	; (8016534 <disk_status+0x30>)
 8016512:	009b      	lsls	r3, r3, #2
 8016514:	4413      	add	r3, r2
 8016516:	685b      	ldr	r3, [r3, #4]
 8016518:	685b      	ldr	r3, [r3, #4]
 801651a:	79fa      	ldrb	r2, [r7, #7]
 801651c:	4905      	ldr	r1, [pc, #20]	; (8016534 <disk_status+0x30>)
 801651e:	440a      	add	r2, r1
 8016520:	7a12      	ldrb	r2, [r2, #8]
 8016522:	4610      	mov	r0, r2
 8016524:	4798      	blx	r3
 8016526:	4603      	mov	r3, r0
 8016528:	73fb      	strb	r3, [r7, #15]
  return stat;
 801652a:	7bfb      	ldrb	r3, [r7, #15]
}
 801652c:	4618      	mov	r0, r3
 801652e:	3710      	adds	r7, #16
 8016530:	46bd      	mov	sp, r7
 8016532:	bd80      	pop	{r7, pc}
 8016534:	24000b84 	.word	0x24000b84

08016538 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 8016538:	b580      	push	{r7, lr}
 801653a:	b084      	sub	sp, #16
 801653c:	af00      	add	r7, sp, #0
 801653e:	4603      	mov	r3, r0
 8016540:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 8016542:	2300      	movs	r3, #0
 8016544:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 8016546:	79fb      	ldrb	r3, [r7, #7]
 8016548:	4a0d      	ldr	r2, [pc, #52]	; (8016580 <disk_initialize+0x48>)
 801654a:	5cd3      	ldrb	r3, [r2, r3]
 801654c:	2b00      	cmp	r3, #0
 801654e:	d111      	bne.n	8016574 <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 8016550:	79fb      	ldrb	r3, [r7, #7]
 8016552:	4a0b      	ldr	r2, [pc, #44]	; (8016580 <disk_initialize+0x48>)
 8016554:	2101      	movs	r1, #1
 8016556:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 8016558:	79fb      	ldrb	r3, [r7, #7]
 801655a:	4a09      	ldr	r2, [pc, #36]	; (8016580 <disk_initialize+0x48>)
 801655c:	009b      	lsls	r3, r3, #2
 801655e:	4413      	add	r3, r2
 8016560:	685b      	ldr	r3, [r3, #4]
 8016562:	681b      	ldr	r3, [r3, #0]
 8016564:	79fa      	ldrb	r2, [r7, #7]
 8016566:	4906      	ldr	r1, [pc, #24]	; (8016580 <disk_initialize+0x48>)
 8016568:	440a      	add	r2, r1
 801656a:	7a12      	ldrb	r2, [r2, #8]
 801656c:	4610      	mov	r0, r2
 801656e:	4798      	blx	r3
 8016570:	4603      	mov	r3, r0
 8016572:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 8016574:	7bfb      	ldrb	r3, [r7, #15]
}
 8016576:	4618      	mov	r0, r3
 8016578:	3710      	adds	r7, #16
 801657a:	46bd      	mov	sp, r7
 801657c:	bd80      	pop	{r7, pc}
 801657e:	bf00      	nop
 8016580:	24000b84 	.word	0x24000b84

08016584 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 8016584:	b590      	push	{r4, r7, lr}
 8016586:	b087      	sub	sp, #28
 8016588:	af00      	add	r7, sp, #0
 801658a:	60b9      	str	r1, [r7, #8]
 801658c:	607a      	str	r2, [r7, #4]
 801658e:	603b      	str	r3, [r7, #0]
 8016590:	4603      	mov	r3, r0
 8016592:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 8016594:	7bfb      	ldrb	r3, [r7, #15]
 8016596:	4a0a      	ldr	r2, [pc, #40]	; (80165c0 <disk_read+0x3c>)
 8016598:	009b      	lsls	r3, r3, #2
 801659a:	4413      	add	r3, r2
 801659c:	685b      	ldr	r3, [r3, #4]
 801659e:	689c      	ldr	r4, [r3, #8]
 80165a0:	7bfb      	ldrb	r3, [r7, #15]
 80165a2:	4a07      	ldr	r2, [pc, #28]	; (80165c0 <disk_read+0x3c>)
 80165a4:	4413      	add	r3, r2
 80165a6:	7a18      	ldrb	r0, [r3, #8]
 80165a8:	683b      	ldr	r3, [r7, #0]
 80165aa:	687a      	ldr	r2, [r7, #4]
 80165ac:	68b9      	ldr	r1, [r7, #8]
 80165ae:	47a0      	blx	r4
 80165b0:	4603      	mov	r3, r0
 80165b2:	75fb      	strb	r3, [r7, #23]
  return res;
 80165b4:	7dfb      	ldrb	r3, [r7, #23]
}
 80165b6:	4618      	mov	r0, r3
 80165b8:	371c      	adds	r7, #28
 80165ba:	46bd      	mov	sp, r7
 80165bc:	bd90      	pop	{r4, r7, pc}
 80165be:	bf00      	nop
 80165c0:	24000b84 	.word	0x24000b84

080165c4 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 80165c4:	b590      	push	{r4, r7, lr}
 80165c6:	b087      	sub	sp, #28
 80165c8:	af00      	add	r7, sp, #0
 80165ca:	60b9      	str	r1, [r7, #8]
 80165cc:	607a      	str	r2, [r7, #4]
 80165ce:	603b      	str	r3, [r7, #0]
 80165d0:	4603      	mov	r3, r0
 80165d2:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 80165d4:	7bfb      	ldrb	r3, [r7, #15]
 80165d6:	4a0a      	ldr	r2, [pc, #40]	; (8016600 <disk_write+0x3c>)
 80165d8:	009b      	lsls	r3, r3, #2
 80165da:	4413      	add	r3, r2
 80165dc:	685b      	ldr	r3, [r3, #4]
 80165de:	68dc      	ldr	r4, [r3, #12]
 80165e0:	7bfb      	ldrb	r3, [r7, #15]
 80165e2:	4a07      	ldr	r2, [pc, #28]	; (8016600 <disk_write+0x3c>)
 80165e4:	4413      	add	r3, r2
 80165e6:	7a18      	ldrb	r0, [r3, #8]
 80165e8:	683b      	ldr	r3, [r7, #0]
 80165ea:	687a      	ldr	r2, [r7, #4]
 80165ec:	68b9      	ldr	r1, [r7, #8]
 80165ee:	47a0      	blx	r4
 80165f0:	4603      	mov	r3, r0
 80165f2:	75fb      	strb	r3, [r7, #23]
  return res;
 80165f4:	7dfb      	ldrb	r3, [r7, #23]
}
 80165f6:	4618      	mov	r0, r3
 80165f8:	371c      	adds	r7, #28
 80165fa:	46bd      	mov	sp, r7
 80165fc:	bd90      	pop	{r4, r7, pc}
 80165fe:	bf00      	nop
 8016600:	24000b84 	.word	0x24000b84

08016604 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 8016604:	b580      	push	{r7, lr}
 8016606:	b084      	sub	sp, #16
 8016608:	af00      	add	r7, sp, #0
 801660a:	4603      	mov	r3, r0
 801660c:	603a      	str	r2, [r7, #0]
 801660e:	71fb      	strb	r3, [r7, #7]
 8016610:	460b      	mov	r3, r1
 8016612:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 8016614:	79fb      	ldrb	r3, [r7, #7]
 8016616:	4a09      	ldr	r2, [pc, #36]	; (801663c <disk_ioctl+0x38>)
 8016618:	009b      	lsls	r3, r3, #2
 801661a:	4413      	add	r3, r2
 801661c:	685b      	ldr	r3, [r3, #4]
 801661e:	691b      	ldr	r3, [r3, #16]
 8016620:	79fa      	ldrb	r2, [r7, #7]
 8016622:	4906      	ldr	r1, [pc, #24]	; (801663c <disk_ioctl+0x38>)
 8016624:	440a      	add	r2, r1
 8016626:	7a10      	ldrb	r0, [r2, #8]
 8016628:	79b9      	ldrb	r1, [r7, #6]
 801662a:	683a      	ldr	r2, [r7, #0]
 801662c:	4798      	blx	r3
 801662e:	4603      	mov	r3, r0
 8016630:	73fb      	strb	r3, [r7, #15]
  return res;
 8016632:	7bfb      	ldrb	r3, [r7, #15]
}
 8016634:	4618      	mov	r0, r3
 8016636:	3710      	adds	r7, #16
 8016638:	46bd      	mov	sp, r7
 801663a:	bd80      	pop	{r7, pc}
 801663c:	24000b84 	.word	0x24000b84

08016640 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 8016640:	b480      	push	{r7}
 8016642:	b085      	sub	sp, #20
 8016644:	af00      	add	r7, sp, #0
 8016646:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 8016648:	687b      	ldr	r3, [r7, #4]
 801664a:	3301      	adds	r3, #1
 801664c:	781b      	ldrb	r3, [r3, #0]
 801664e:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 8016650:	89fb      	ldrh	r3, [r7, #14]
 8016652:	021b      	lsls	r3, r3, #8
 8016654:	b21a      	sxth	r2, r3
 8016656:	687b      	ldr	r3, [r7, #4]
 8016658:	781b      	ldrb	r3, [r3, #0]
 801665a:	b21b      	sxth	r3, r3
 801665c:	4313      	orrs	r3, r2
 801665e:	b21b      	sxth	r3, r3
 8016660:	81fb      	strh	r3, [r7, #14]
	return rv;
 8016662:	89fb      	ldrh	r3, [r7, #14]
}
 8016664:	4618      	mov	r0, r3
 8016666:	3714      	adds	r7, #20
 8016668:	46bd      	mov	sp, r7
 801666a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801666e:	4770      	bx	lr

08016670 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 8016670:	b480      	push	{r7}
 8016672:	b085      	sub	sp, #20
 8016674:	af00      	add	r7, sp, #0
 8016676:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 8016678:	687b      	ldr	r3, [r7, #4]
 801667a:	3303      	adds	r3, #3
 801667c:	781b      	ldrb	r3, [r3, #0]
 801667e:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 8016680:	68fb      	ldr	r3, [r7, #12]
 8016682:	021b      	lsls	r3, r3, #8
 8016684:	687a      	ldr	r2, [r7, #4]
 8016686:	3202      	adds	r2, #2
 8016688:	7812      	ldrb	r2, [r2, #0]
 801668a:	4313      	orrs	r3, r2
 801668c:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 801668e:	68fb      	ldr	r3, [r7, #12]
 8016690:	021b      	lsls	r3, r3, #8
 8016692:	687a      	ldr	r2, [r7, #4]
 8016694:	3201      	adds	r2, #1
 8016696:	7812      	ldrb	r2, [r2, #0]
 8016698:	4313      	orrs	r3, r2
 801669a:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 801669c:	68fb      	ldr	r3, [r7, #12]
 801669e:	021b      	lsls	r3, r3, #8
 80166a0:	687a      	ldr	r2, [r7, #4]
 80166a2:	7812      	ldrb	r2, [r2, #0]
 80166a4:	4313      	orrs	r3, r2
 80166a6:	60fb      	str	r3, [r7, #12]
	return rv;
 80166a8:	68fb      	ldr	r3, [r7, #12]
}
 80166aa:	4618      	mov	r0, r3
 80166ac:	3714      	adds	r7, #20
 80166ae:	46bd      	mov	sp, r7
 80166b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80166b4:	4770      	bx	lr

080166b6 <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 80166b6:	b480      	push	{r7}
 80166b8:	b083      	sub	sp, #12
 80166ba:	af00      	add	r7, sp, #0
 80166bc:	6078      	str	r0, [r7, #4]
 80166be:	460b      	mov	r3, r1
 80166c0:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 80166c2:	687b      	ldr	r3, [r7, #4]
 80166c4:	1c5a      	adds	r2, r3, #1
 80166c6:	607a      	str	r2, [r7, #4]
 80166c8:	887a      	ldrh	r2, [r7, #2]
 80166ca:	b2d2      	uxtb	r2, r2
 80166cc:	701a      	strb	r2, [r3, #0]
 80166ce:	887b      	ldrh	r3, [r7, #2]
 80166d0:	0a1b      	lsrs	r3, r3, #8
 80166d2:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 80166d4:	687b      	ldr	r3, [r7, #4]
 80166d6:	1c5a      	adds	r2, r3, #1
 80166d8:	607a      	str	r2, [r7, #4]
 80166da:	887a      	ldrh	r2, [r7, #2]
 80166dc:	b2d2      	uxtb	r2, r2
 80166de:	701a      	strb	r2, [r3, #0]
}
 80166e0:	bf00      	nop
 80166e2:	370c      	adds	r7, #12
 80166e4:	46bd      	mov	sp, r7
 80166e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80166ea:	4770      	bx	lr

080166ec <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 80166ec:	b480      	push	{r7}
 80166ee:	b083      	sub	sp, #12
 80166f0:	af00      	add	r7, sp, #0
 80166f2:	6078      	str	r0, [r7, #4]
 80166f4:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 80166f6:	687b      	ldr	r3, [r7, #4]
 80166f8:	1c5a      	adds	r2, r3, #1
 80166fa:	607a      	str	r2, [r7, #4]
 80166fc:	683a      	ldr	r2, [r7, #0]
 80166fe:	b2d2      	uxtb	r2, r2
 8016700:	701a      	strb	r2, [r3, #0]
 8016702:	683b      	ldr	r3, [r7, #0]
 8016704:	0a1b      	lsrs	r3, r3, #8
 8016706:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8016708:	687b      	ldr	r3, [r7, #4]
 801670a:	1c5a      	adds	r2, r3, #1
 801670c:	607a      	str	r2, [r7, #4]
 801670e:	683a      	ldr	r2, [r7, #0]
 8016710:	b2d2      	uxtb	r2, r2
 8016712:	701a      	strb	r2, [r3, #0]
 8016714:	683b      	ldr	r3, [r7, #0]
 8016716:	0a1b      	lsrs	r3, r3, #8
 8016718:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 801671a:	687b      	ldr	r3, [r7, #4]
 801671c:	1c5a      	adds	r2, r3, #1
 801671e:	607a      	str	r2, [r7, #4]
 8016720:	683a      	ldr	r2, [r7, #0]
 8016722:	b2d2      	uxtb	r2, r2
 8016724:	701a      	strb	r2, [r3, #0]
 8016726:	683b      	ldr	r3, [r7, #0]
 8016728:	0a1b      	lsrs	r3, r3, #8
 801672a:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 801672c:	687b      	ldr	r3, [r7, #4]
 801672e:	1c5a      	adds	r2, r3, #1
 8016730:	607a      	str	r2, [r7, #4]
 8016732:	683a      	ldr	r2, [r7, #0]
 8016734:	b2d2      	uxtb	r2, r2
 8016736:	701a      	strb	r2, [r3, #0]
}
 8016738:	bf00      	nop
 801673a:	370c      	adds	r7, #12
 801673c:	46bd      	mov	sp, r7
 801673e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016742:	4770      	bx	lr

08016744 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 8016744:	b480      	push	{r7}
 8016746:	b087      	sub	sp, #28
 8016748:	af00      	add	r7, sp, #0
 801674a:	60f8      	str	r0, [r7, #12]
 801674c:	60b9      	str	r1, [r7, #8]
 801674e:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8016750:	68fb      	ldr	r3, [r7, #12]
 8016752:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 8016754:	68bb      	ldr	r3, [r7, #8]
 8016756:	613b      	str	r3, [r7, #16]

	if (cnt) {
 8016758:	687b      	ldr	r3, [r7, #4]
 801675a:	2b00      	cmp	r3, #0
 801675c:	d00d      	beq.n	801677a <mem_cpy+0x36>
		do {
			*d++ = *s++;
 801675e:	693a      	ldr	r2, [r7, #16]
 8016760:	1c53      	adds	r3, r2, #1
 8016762:	613b      	str	r3, [r7, #16]
 8016764:	697b      	ldr	r3, [r7, #20]
 8016766:	1c59      	adds	r1, r3, #1
 8016768:	6179      	str	r1, [r7, #20]
 801676a:	7812      	ldrb	r2, [r2, #0]
 801676c:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 801676e:	687b      	ldr	r3, [r7, #4]
 8016770:	3b01      	subs	r3, #1
 8016772:	607b      	str	r3, [r7, #4]
 8016774:	687b      	ldr	r3, [r7, #4]
 8016776:	2b00      	cmp	r3, #0
 8016778:	d1f1      	bne.n	801675e <mem_cpy+0x1a>
	}
}
 801677a:	bf00      	nop
 801677c:	371c      	adds	r7, #28
 801677e:	46bd      	mov	sp, r7
 8016780:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016784:	4770      	bx	lr

08016786 <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 8016786:	b480      	push	{r7}
 8016788:	b087      	sub	sp, #28
 801678a:	af00      	add	r7, sp, #0
 801678c:	60f8      	str	r0, [r7, #12]
 801678e:	60b9      	str	r1, [r7, #8]
 8016790:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8016792:	68fb      	ldr	r3, [r7, #12]
 8016794:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 8016796:	697b      	ldr	r3, [r7, #20]
 8016798:	1c5a      	adds	r2, r3, #1
 801679a:	617a      	str	r2, [r7, #20]
 801679c:	68ba      	ldr	r2, [r7, #8]
 801679e:	b2d2      	uxtb	r2, r2
 80167a0:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 80167a2:	687b      	ldr	r3, [r7, #4]
 80167a4:	3b01      	subs	r3, #1
 80167a6:	607b      	str	r3, [r7, #4]
 80167a8:	687b      	ldr	r3, [r7, #4]
 80167aa:	2b00      	cmp	r3, #0
 80167ac:	d1f3      	bne.n	8016796 <mem_set+0x10>
}
 80167ae:	bf00      	nop
 80167b0:	371c      	adds	r7, #28
 80167b2:	46bd      	mov	sp, r7
 80167b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80167b8:	4770      	bx	lr

080167ba <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 80167ba:	b480      	push	{r7}
 80167bc:	b089      	sub	sp, #36	; 0x24
 80167be:	af00      	add	r7, sp, #0
 80167c0:	60f8      	str	r0, [r7, #12]
 80167c2:	60b9      	str	r1, [r7, #8]
 80167c4:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 80167c6:	68fb      	ldr	r3, [r7, #12]
 80167c8:	61fb      	str	r3, [r7, #28]
 80167ca:	68bb      	ldr	r3, [r7, #8]
 80167cc:	61bb      	str	r3, [r7, #24]
	int r = 0;
 80167ce:	2300      	movs	r3, #0
 80167d0:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 80167d2:	69fb      	ldr	r3, [r7, #28]
 80167d4:	1c5a      	adds	r2, r3, #1
 80167d6:	61fa      	str	r2, [r7, #28]
 80167d8:	781b      	ldrb	r3, [r3, #0]
 80167da:	4619      	mov	r1, r3
 80167dc:	69bb      	ldr	r3, [r7, #24]
 80167de:	1c5a      	adds	r2, r3, #1
 80167e0:	61ba      	str	r2, [r7, #24]
 80167e2:	781b      	ldrb	r3, [r3, #0]
 80167e4:	1acb      	subs	r3, r1, r3
 80167e6:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 80167e8:	687b      	ldr	r3, [r7, #4]
 80167ea:	3b01      	subs	r3, #1
 80167ec:	607b      	str	r3, [r7, #4]
 80167ee:	687b      	ldr	r3, [r7, #4]
 80167f0:	2b00      	cmp	r3, #0
 80167f2:	d002      	beq.n	80167fa <mem_cmp+0x40>
 80167f4:	697b      	ldr	r3, [r7, #20]
 80167f6:	2b00      	cmp	r3, #0
 80167f8:	d0eb      	beq.n	80167d2 <mem_cmp+0x18>

	return r;
 80167fa:	697b      	ldr	r3, [r7, #20]
}
 80167fc:	4618      	mov	r0, r3
 80167fe:	3724      	adds	r7, #36	; 0x24
 8016800:	46bd      	mov	sp, r7
 8016802:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016806:	4770      	bx	lr

08016808 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 8016808:	b480      	push	{r7}
 801680a:	b083      	sub	sp, #12
 801680c:	af00      	add	r7, sp, #0
 801680e:	6078      	str	r0, [r7, #4]
 8016810:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 8016812:	e002      	b.n	801681a <chk_chr+0x12>
 8016814:	687b      	ldr	r3, [r7, #4]
 8016816:	3301      	adds	r3, #1
 8016818:	607b      	str	r3, [r7, #4]
 801681a:	687b      	ldr	r3, [r7, #4]
 801681c:	781b      	ldrb	r3, [r3, #0]
 801681e:	2b00      	cmp	r3, #0
 8016820:	d005      	beq.n	801682e <chk_chr+0x26>
 8016822:	687b      	ldr	r3, [r7, #4]
 8016824:	781b      	ldrb	r3, [r3, #0]
 8016826:	461a      	mov	r2, r3
 8016828:	683b      	ldr	r3, [r7, #0]
 801682a:	4293      	cmp	r3, r2
 801682c:	d1f2      	bne.n	8016814 <chk_chr+0xc>
	return *str;
 801682e:	687b      	ldr	r3, [r7, #4]
 8016830:	781b      	ldrb	r3, [r3, #0]
}
 8016832:	4618      	mov	r0, r3
 8016834:	370c      	adds	r7, #12
 8016836:	46bd      	mov	sp, r7
 8016838:	f85d 7b04 	ldr.w	r7, [sp], #4
 801683c:	4770      	bx	lr
	...

08016840 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8016840:	b480      	push	{r7}
 8016842:	b085      	sub	sp, #20
 8016844:	af00      	add	r7, sp, #0
 8016846:	6078      	str	r0, [r7, #4]
 8016848:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 801684a:	2300      	movs	r3, #0
 801684c:	60bb      	str	r3, [r7, #8]
 801684e:	68bb      	ldr	r3, [r7, #8]
 8016850:	60fb      	str	r3, [r7, #12]
 8016852:	e029      	b.n	80168a8 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 8016854:	4a27      	ldr	r2, [pc, #156]	; (80168f4 <chk_lock+0xb4>)
 8016856:	68fb      	ldr	r3, [r7, #12]
 8016858:	011b      	lsls	r3, r3, #4
 801685a:	4413      	add	r3, r2
 801685c:	681b      	ldr	r3, [r3, #0]
 801685e:	2b00      	cmp	r3, #0
 8016860:	d01d      	beq.n	801689e <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8016862:	4a24      	ldr	r2, [pc, #144]	; (80168f4 <chk_lock+0xb4>)
 8016864:	68fb      	ldr	r3, [r7, #12]
 8016866:	011b      	lsls	r3, r3, #4
 8016868:	4413      	add	r3, r2
 801686a:	681a      	ldr	r2, [r3, #0]
 801686c:	687b      	ldr	r3, [r7, #4]
 801686e:	681b      	ldr	r3, [r3, #0]
 8016870:	429a      	cmp	r2, r3
 8016872:	d116      	bne.n	80168a2 <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 8016874:	4a1f      	ldr	r2, [pc, #124]	; (80168f4 <chk_lock+0xb4>)
 8016876:	68fb      	ldr	r3, [r7, #12]
 8016878:	011b      	lsls	r3, r3, #4
 801687a:	4413      	add	r3, r2
 801687c:	3304      	adds	r3, #4
 801687e:	681a      	ldr	r2, [r3, #0]
 8016880:	687b      	ldr	r3, [r7, #4]
 8016882:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8016884:	429a      	cmp	r2, r3
 8016886:	d10c      	bne.n	80168a2 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8016888:	4a1a      	ldr	r2, [pc, #104]	; (80168f4 <chk_lock+0xb4>)
 801688a:	68fb      	ldr	r3, [r7, #12]
 801688c:	011b      	lsls	r3, r3, #4
 801688e:	4413      	add	r3, r2
 8016890:	3308      	adds	r3, #8
 8016892:	681a      	ldr	r2, [r3, #0]
 8016894:	687b      	ldr	r3, [r7, #4]
 8016896:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 8016898:	429a      	cmp	r2, r3
 801689a:	d102      	bne.n	80168a2 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 801689c:	e007      	b.n	80168ae <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 801689e:	2301      	movs	r3, #1
 80168a0:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 80168a2:	68fb      	ldr	r3, [r7, #12]
 80168a4:	3301      	adds	r3, #1
 80168a6:	60fb      	str	r3, [r7, #12]
 80168a8:	68fb      	ldr	r3, [r7, #12]
 80168aa:	2b01      	cmp	r3, #1
 80168ac:	d9d2      	bls.n	8016854 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 80168ae:	68fb      	ldr	r3, [r7, #12]
 80168b0:	2b02      	cmp	r3, #2
 80168b2:	d109      	bne.n	80168c8 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 80168b4:	68bb      	ldr	r3, [r7, #8]
 80168b6:	2b00      	cmp	r3, #0
 80168b8:	d102      	bne.n	80168c0 <chk_lock+0x80>
 80168ba:	683b      	ldr	r3, [r7, #0]
 80168bc:	2b02      	cmp	r3, #2
 80168be:	d101      	bne.n	80168c4 <chk_lock+0x84>
 80168c0:	2300      	movs	r3, #0
 80168c2:	e010      	b.n	80168e6 <chk_lock+0xa6>
 80168c4:	2312      	movs	r3, #18
 80168c6:	e00e      	b.n	80168e6 <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 80168c8:	683b      	ldr	r3, [r7, #0]
 80168ca:	2b00      	cmp	r3, #0
 80168cc:	d108      	bne.n	80168e0 <chk_lock+0xa0>
 80168ce:	4a09      	ldr	r2, [pc, #36]	; (80168f4 <chk_lock+0xb4>)
 80168d0:	68fb      	ldr	r3, [r7, #12]
 80168d2:	011b      	lsls	r3, r3, #4
 80168d4:	4413      	add	r3, r2
 80168d6:	330c      	adds	r3, #12
 80168d8:	881b      	ldrh	r3, [r3, #0]
 80168da:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80168de:	d101      	bne.n	80168e4 <chk_lock+0xa4>
 80168e0:	2310      	movs	r3, #16
 80168e2:	e000      	b.n	80168e6 <chk_lock+0xa6>
 80168e4:	2300      	movs	r3, #0
}
 80168e6:	4618      	mov	r0, r3
 80168e8:	3714      	adds	r7, #20
 80168ea:	46bd      	mov	sp, r7
 80168ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80168f0:	4770      	bx	lr
 80168f2:	bf00      	nop
 80168f4:	24000b64 	.word	0x24000b64

080168f8 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 80168f8:	b480      	push	{r7}
 80168fa:	b083      	sub	sp, #12
 80168fc:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 80168fe:	2300      	movs	r3, #0
 8016900:	607b      	str	r3, [r7, #4]
 8016902:	e002      	b.n	801690a <enq_lock+0x12>
 8016904:	687b      	ldr	r3, [r7, #4]
 8016906:	3301      	adds	r3, #1
 8016908:	607b      	str	r3, [r7, #4]
 801690a:	687b      	ldr	r3, [r7, #4]
 801690c:	2b01      	cmp	r3, #1
 801690e:	d806      	bhi.n	801691e <enq_lock+0x26>
 8016910:	4a09      	ldr	r2, [pc, #36]	; (8016938 <enq_lock+0x40>)
 8016912:	687b      	ldr	r3, [r7, #4]
 8016914:	011b      	lsls	r3, r3, #4
 8016916:	4413      	add	r3, r2
 8016918:	681b      	ldr	r3, [r3, #0]
 801691a:	2b00      	cmp	r3, #0
 801691c:	d1f2      	bne.n	8016904 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 801691e:	687b      	ldr	r3, [r7, #4]
 8016920:	2b02      	cmp	r3, #2
 8016922:	bf14      	ite	ne
 8016924:	2301      	movne	r3, #1
 8016926:	2300      	moveq	r3, #0
 8016928:	b2db      	uxtb	r3, r3
}
 801692a:	4618      	mov	r0, r3
 801692c:	370c      	adds	r7, #12
 801692e:	46bd      	mov	sp, r7
 8016930:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016934:	4770      	bx	lr
 8016936:	bf00      	nop
 8016938:	24000b64 	.word	0x24000b64

0801693c <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 801693c:	b480      	push	{r7}
 801693e:	b085      	sub	sp, #20
 8016940:	af00      	add	r7, sp, #0
 8016942:	6078      	str	r0, [r7, #4]
 8016944:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8016946:	2300      	movs	r3, #0
 8016948:	60fb      	str	r3, [r7, #12]
 801694a:	e01f      	b.n	801698c <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 801694c:	4a41      	ldr	r2, [pc, #260]	; (8016a54 <inc_lock+0x118>)
 801694e:	68fb      	ldr	r3, [r7, #12]
 8016950:	011b      	lsls	r3, r3, #4
 8016952:	4413      	add	r3, r2
 8016954:	681a      	ldr	r2, [r3, #0]
 8016956:	687b      	ldr	r3, [r7, #4]
 8016958:	681b      	ldr	r3, [r3, #0]
 801695a:	429a      	cmp	r2, r3
 801695c:	d113      	bne.n	8016986 <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 801695e:	4a3d      	ldr	r2, [pc, #244]	; (8016a54 <inc_lock+0x118>)
 8016960:	68fb      	ldr	r3, [r7, #12]
 8016962:	011b      	lsls	r3, r3, #4
 8016964:	4413      	add	r3, r2
 8016966:	3304      	adds	r3, #4
 8016968:	681a      	ldr	r2, [r3, #0]
 801696a:	687b      	ldr	r3, [r7, #4]
 801696c:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 801696e:	429a      	cmp	r2, r3
 8016970:	d109      	bne.n	8016986 <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 8016972:	4a38      	ldr	r2, [pc, #224]	; (8016a54 <inc_lock+0x118>)
 8016974:	68fb      	ldr	r3, [r7, #12]
 8016976:	011b      	lsls	r3, r3, #4
 8016978:	4413      	add	r3, r2
 801697a:	3308      	adds	r3, #8
 801697c:	681a      	ldr	r2, [r3, #0]
 801697e:	687b      	ldr	r3, [r7, #4]
 8016980:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 8016982:	429a      	cmp	r2, r3
 8016984:	d006      	beq.n	8016994 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8016986:	68fb      	ldr	r3, [r7, #12]
 8016988:	3301      	adds	r3, #1
 801698a:	60fb      	str	r3, [r7, #12]
 801698c:	68fb      	ldr	r3, [r7, #12]
 801698e:	2b01      	cmp	r3, #1
 8016990:	d9dc      	bls.n	801694c <inc_lock+0x10>
 8016992:	e000      	b.n	8016996 <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 8016994:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 8016996:	68fb      	ldr	r3, [r7, #12]
 8016998:	2b02      	cmp	r3, #2
 801699a:	d132      	bne.n	8016a02 <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 801699c:	2300      	movs	r3, #0
 801699e:	60fb      	str	r3, [r7, #12]
 80169a0:	e002      	b.n	80169a8 <inc_lock+0x6c>
 80169a2:	68fb      	ldr	r3, [r7, #12]
 80169a4:	3301      	adds	r3, #1
 80169a6:	60fb      	str	r3, [r7, #12]
 80169a8:	68fb      	ldr	r3, [r7, #12]
 80169aa:	2b01      	cmp	r3, #1
 80169ac:	d806      	bhi.n	80169bc <inc_lock+0x80>
 80169ae:	4a29      	ldr	r2, [pc, #164]	; (8016a54 <inc_lock+0x118>)
 80169b0:	68fb      	ldr	r3, [r7, #12]
 80169b2:	011b      	lsls	r3, r3, #4
 80169b4:	4413      	add	r3, r2
 80169b6:	681b      	ldr	r3, [r3, #0]
 80169b8:	2b00      	cmp	r3, #0
 80169ba:	d1f2      	bne.n	80169a2 <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 80169bc:	68fb      	ldr	r3, [r7, #12]
 80169be:	2b02      	cmp	r3, #2
 80169c0:	d101      	bne.n	80169c6 <inc_lock+0x8a>
 80169c2:	2300      	movs	r3, #0
 80169c4:	e040      	b.n	8016a48 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 80169c6:	687b      	ldr	r3, [r7, #4]
 80169c8:	681a      	ldr	r2, [r3, #0]
 80169ca:	4922      	ldr	r1, [pc, #136]	; (8016a54 <inc_lock+0x118>)
 80169cc:	68fb      	ldr	r3, [r7, #12]
 80169ce:	011b      	lsls	r3, r3, #4
 80169d0:	440b      	add	r3, r1
 80169d2:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 80169d4:	687b      	ldr	r3, [r7, #4]
 80169d6:	689a      	ldr	r2, [r3, #8]
 80169d8:	491e      	ldr	r1, [pc, #120]	; (8016a54 <inc_lock+0x118>)
 80169da:	68fb      	ldr	r3, [r7, #12]
 80169dc:	011b      	lsls	r3, r3, #4
 80169de:	440b      	add	r3, r1
 80169e0:	3304      	adds	r3, #4
 80169e2:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 80169e4:	687b      	ldr	r3, [r7, #4]
 80169e6:	695a      	ldr	r2, [r3, #20]
 80169e8:	491a      	ldr	r1, [pc, #104]	; (8016a54 <inc_lock+0x118>)
 80169ea:	68fb      	ldr	r3, [r7, #12]
 80169ec:	011b      	lsls	r3, r3, #4
 80169ee:	440b      	add	r3, r1
 80169f0:	3308      	adds	r3, #8
 80169f2:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 80169f4:	4a17      	ldr	r2, [pc, #92]	; (8016a54 <inc_lock+0x118>)
 80169f6:	68fb      	ldr	r3, [r7, #12]
 80169f8:	011b      	lsls	r3, r3, #4
 80169fa:	4413      	add	r3, r2
 80169fc:	330c      	adds	r3, #12
 80169fe:	2200      	movs	r2, #0
 8016a00:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 8016a02:	683b      	ldr	r3, [r7, #0]
 8016a04:	2b00      	cmp	r3, #0
 8016a06:	d009      	beq.n	8016a1c <inc_lock+0xe0>
 8016a08:	4a12      	ldr	r2, [pc, #72]	; (8016a54 <inc_lock+0x118>)
 8016a0a:	68fb      	ldr	r3, [r7, #12]
 8016a0c:	011b      	lsls	r3, r3, #4
 8016a0e:	4413      	add	r3, r2
 8016a10:	330c      	adds	r3, #12
 8016a12:	881b      	ldrh	r3, [r3, #0]
 8016a14:	2b00      	cmp	r3, #0
 8016a16:	d001      	beq.n	8016a1c <inc_lock+0xe0>
 8016a18:	2300      	movs	r3, #0
 8016a1a:	e015      	b.n	8016a48 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 8016a1c:	683b      	ldr	r3, [r7, #0]
 8016a1e:	2b00      	cmp	r3, #0
 8016a20:	d108      	bne.n	8016a34 <inc_lock+0xf8>
 8016a22:	4a0c      	ldr	r2, [pc, #48]	; (8016a54 <inc_lock+0x118>)
 8016a24:	68fb      	ldr	r3, [r7, #12]
 8016a26:	011b      	lsls	r3, r3, #4
 8016a28:	4413      	add	r3, r2
 8016a2a:	330c      	adds	r3, #12
 8016a2c:	881b      	ldrh	r3, [r3, #0]
 8016a2e:	3301      	adds	r3, #1
 8016a30:	b29a      	uxth	r2, r3
 8016a32:	e001      	b.n	8016a38 <inc_lock+0xfc>
 8016a34:	f44f 7280 	mov.w	r2, #256	; 0x100
 8016a38:	4906      	ldr	r1, [pc, #24]	; (8016a54 <inc_lock+0x118>)
 8016a3a:	68fb      	ldr	r3, [r7, #12]
 8016a3c:	011b      	lsls	r3, r3, #4
 8016a3e:	440b      	add	r3, r1
 8016a40:	330c      	adds	r3, #12
 8016a42:	801a      	strh	r2, [r3, #0]

	return i + 1;
 8016a44:	68fb      	ldr	r3, [r7, #12]
 8016a46:	3301      	adds	r3, #1
}
 8016a48:	4618      	mov	r0, r3
 8016a4a:	3714      	adds	r7, #20
 8016a4c:	46bd      	mov	sp, r7
 8016a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016a52:	4770      	bx	lr
 8016a54:	24000b64 	.word	0x24000b64

08016a58 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 8016a58:	b480      	push	{r7}
 8016a5a:	b085      	sub	sp, #20
 8016a5c:	af00      	add	r7, sp, #0
 8016a5e:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 8016a60:	687b      	ldr	r3, [r7, #4]
 8016a62:	3b01      	subs	r3, #1
 8016a64:	607b      	str	r3, [r7, #4]
 8016a66:	687b      	ldr	r3, [r7, #4]
 8016a68:	2b01      	cmp	r3, #1
 8016a6a:	d825      	bhi.n	8016ab8 <dec_lock+0x60>
		n = Files[i].ctr;
 8016a6c:	4a17      	ldr	r2, [pc, #92]	; (8016acc <dec_lock+0x74>)
 8016a6e:	687b      	ldr	r3, [r7, #4]
 8016a70:	011b      	lsls	r3, r3, #4
 8016a72:	4413      	add	r3, r2
 8016a74:	330c      	adds	r3, #12
 8016a76:	881b      	ldrh	r3, [r3, #0]
 8016a78:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 8016a7a:	89fb      	ldrh	r3, [r7, #14]
 8016a7c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8016a80:	d101      	bne.n	8016a86 <dec_lock+0x2e>
 8016a82:	2300      	movs	r3, #0
 8016a84:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 8016a86:	89fb      	ldrh	r3, [r7, #14]
 8016a88:	2b00      	cmp	r3, #0
 8016a8a:	d002      	beq.n	8016a92 <dec_lock+0x3a>
 8016a8c:	89fb      	ldrh	r3, [r7, #14]
 8016a8e:	3b01      	subs	r3, #1
 8016a90:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 8016a92:	4a0e      	ldr	r2, [pc, #56]	; (8016acc <dec_lock+0x74>)
 8016a94:	687b      	ldr	r3, [r7, #4]
 8016a96:	011b      	lsls	r3, r3, #4
 8016a98:	4413      	add	r3, r2
 8016a9a:	330c      	adds	r3, #12
 8016a9c:	89fa      	ldrh	r2, [r7, #14]
 8016a9e:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 8016aa0:	89fb      	ldrh	r3, [r7, #14]
 8016aa2:	2b00      	cmp	r3, #0
 8016aa4:	d105      	bne.n	8016ab2 <dec_lock+0x5a>
 8016aa6:	4a09      	ldr	r2, [pc, #36]	; (8016acc <dec_lock+0x74>)
 8016aa8:	687b      	ldr	r3, [r7, #4]
 8016aaa:	011b      	lsls	r3, r3, #4
 8016aac:	4413      	add	r3, r2
 8016aae:	2200      	movs	r2, #0
 8016ab0:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 8016ab2:	2300      	movs	r3, #0
 8016ab4:	737b      	strb	r3, [r7, #13]
 8016ab6:	e001      	b.n	8016abc <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 8016ab8:	2302      	movs	r3, #2
 8016aba:	737b      	strb	r3, [r7, #13]
	}
	return res;
 8016abc:	7b7b      	ldrb	r3, [r7, #13]
}
 8016abe:	4618      	mov	r0, r3
 8016ac0:	3714      	adds	r7, #20
 8016ac2:	46bd      	mov	sp, r7
 8016ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016ac8:	4770      	bx	lr
 8016aca:	bf00      	nop
 8016acc:	24000b64 	.word	0x24000b64

08016ad0 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 8016ad0:	b480      	push	{r7}
 8016ad2:	b085      	sub	sp, #20
 8016ad4:	af00      	add	r7, sp, #0
 8016ad6:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 8016ad8:	2300      	movs	r3, #0
 8016ada:	60fb      	str	r3, [r7, #12]
 8016adc:	e010      	b.n	8016b00 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 8016ade:	4a0d      	ldr	r2, [pc, #52]	; (8016b14 <clear_lock+0x44>)
 8016ae0:	68fb      	ldr	r3, [r7, #12]
 8016ae2:	011b      	lsls	r3, r3, #4
 8016ae4:	4413      	add	r3, r2
 8016ae6:	681b      	ldr	r3, [r3, #0]
 8016ae8:	687a      	ldr	r2, [r7, #4]
 8016aea:	429a      	cmp	r2, r3
 8016aec:	d105      	bne.n	8016afa <clear_lock+0x2a>
 8016aee:	4a09      	ldr	r2, [pc, #36]	; (8016b14 <clear_lock+0x44>)
 8016af0:	68fb      	ldr	r3, [r7, #12]
 8016af2:	011b      	lsls	r3, r3, #4
 8016af4:	4413      	add	r3, r2
 8016af6:	2200      	movs	r2, #0
 8016af8:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 8016afa:	68fb      	ldr	r3, [r7, #12]
 8016afc:	3301      	adds	r3, #1
 8016afe:	60fb      	str	r3, [r7, #12]
 8016b00:	68fb      	ldr	r3, [r7, #12]
 8016b02:	2b01      	cmp	r3, #1
 8016b04:	d9eb      	bls.n	8016ade <clear_lock+0xe>
	}
}
 8016b06:	bf00      	nop
 8016b08:	3714      	adds	r7, #20
 8016b0a:	46bd      	mov	sp, r7
 8016b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016b10:	4770      	bx	lr
 8016b12:	bf00      	nop
 8016b14:	24000b64 	.word	0x24000b64

08016b18 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 8016b18:	b580      	push	{r7, lr}
 8016b1a:	b086      	sub	sp, #24
 8016b1c:	af00      	add	r7, sp, #0
 8016b1e:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 8016b20:	2300      	movs	r3, #0
 8016b22:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8016b24:	687b      	ldr	r3, [r7, #4]
 8016b26:	78db      	ldrb	r3, [r3, #3]
 8016b28:	2b00      	cmp	r3, #0
 8016b2a:	d034      	beq.n	8016b96 <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 8016b2c:	687b      	ldr	r3, [r7, #4]
 8016b2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8016b30:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 8016b32:	687b      	ldr	r3, [r7, #4]
 8016b34:	7858      	ldrb	r0, [r3, #1]
 8016b36:	687b      	ldr	r3, [r7, #4]
 8016b38:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8016b3c:	2301      	movs	r3, #1
 8016b3e:	697a      	ldr	r2, [r7, #20]
 8016b40:	f7ff fd40 	bl	80165c4 <disk_write>
 8016b44:	4603      	mov	r3, r0
 8016b46:	2b00      	cmp	r3, #0
 8016b48:	d002      	beq.n	8016b50 <sync_window+0x38>
			res = FR_DISK_ERR;
 8016b4a:	2301      	movs	r3, #1
 8016b4c:	73fb      	strb	r3, [r7, #15]
 8016b4e:	e022      	b.n	8016b96 <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 8016b50:	687b      	ldr	r3, [r7, #4]
 8016b52:	2200      	movs	r2, #0
 8016b54:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8016b56:	687b      	ldr	r3, [r7, #4]
 8016b58:	6a1b      	ldr	r3, [r3, #32]
 8016b5a:	697a      	ldr	r2, [r7, #20]
 8016b5c:	1ad2      	subs	r2, r2, r3
 8016b5e:	687b      	ldr	r3, [r7, #4]
 8016b60:	699b      	ldr	r3, [r3, #24]
 8016b62:	429a      	cmp	r2, r3
 8016b64:	d217      	bcs.n	8016b96 <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8016b66:	687b      	ldr	r3, [r7, #4]
 8016b68:	789b      	ldrb	r3, [r3, #2]
 8016b6a:	613b      	str	r3, [r7, #16]
 8016b6c:	e010      	b.n	8016b90 <sync_window+0x78>
					wsect += fs->fsize;
 8016b6e:	687b      	ldr	r3, [r7, #4]
 8016b70:	699b      	ldr	r3, [r3, #24]
 8016b72:	697a      	ldr	r2, [r7, #20]
 8016b74:	4413      	add	r3, r2
 8016b76:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 8016b78:	687b      	ldr	r3, [r7, #4]
 8016b7a:	7858      	ldrb	r0, [r3, #1]
 8016b7c:	687b      	ldr	r3, [r7, #4]
 8016b7e:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8016b82:	2301      	movs	r3, #1
 8016b84:	697a      	ldr	r2, [r7, #20]
 8016b86:	f7ff fd1d 	bl	80165c4 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8016b8a:	693b      	ldr	r3, [r7, #16]
 8016b8c:	3b01      	subs	r3, #1
 8016b8e:	613b      	str	r3, [r7, #16]
 8016b90:	693b      	ldr	r3, [r7, #16]
 8016b92:	2b01      	cmp	r3, #1
 8016b94:	d8eb      	bhi.n	8016b6e <sync_window+0x56>
				}
			}
		}
	}
	return res;
 8016b96:	7bfb      	ldrb	r3, [r7, #15]
}
 8016b98:	4618      	mov	r0, r3
 8016b9a:	3718      	adds	r7, #24
 8016b9c:	46bd      	mov	sp, r7
 8016b9e:	bd80      	pop	{r7, pc}

08016ba0 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 8016ba0:	b580      	push	{r7, lr}
 8016ba2:	b084      	sub	sp, #16
 8016ba4:	af00      	add	r7, sp, #0
 8016ba6:	6078      	str	r0, [r7, #4]
 8016ba8:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 8016baa:	2300      	movs	r3, #0
 8016bac:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 8016bae:	687b      	ldr	r3, [r7, #4]
 8016bb0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8016bb2:	683a      	ldr	r2, [r7, #0]
 8016bb4:	429a      	cmp	r2, r3
 8016bb6:	d01b      	beq.n	8016bf0 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 8016bb8:	6878      	ldr	r0, [r7, #4]
 8016bba:	f7ff ffad 	bl	8016b18 <sync_window>
 8016bbe:	4603      	mov	r3, r0
 8016bc0:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 8016bc2:	7bfb      	ldrb	r3, [r7, #15]
 8016bc4:	2b00      	cmp	r3, #0
 8016bc6:	d113      	bne.n	8016bf0 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 8016bc8:	687b      	ldr	r3, [r7, #4]
 8016bca:	7858      	ldrb	r0, [r3, #1]
 8016bcc:	687b      	ldr	r3, [r7, #4]
 8016bce:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8016bd2:	2301      	movs	r3, #1
 8016bd4:	683a      	ldr	r2, [r7, #0]
 8016bd6:	f7ff fcd5 	bl	8016584 <disk_read>
 8016bda:	4603      	mov	r3, r0
 8016bdc:	2b00      	cmp	r3, #0
 8016bde:	d004      	beq.n	8016bea <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 8016be0:	f04f 33ff 	mov.w	r3, #4294967295
 8016be4:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 8016be6:	2301      	movs	r3, #1
 8016be8:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 8016bea:	687b      	ldr	r3, [r7, #4]
 8016bec:	683a      	ldr	r2, [r7, #0]
 8016bee:	62da      	str	r2, [r3, #44]	; 0x2c
		}
	}
	return res;
 8016bf0:	7bfb      	ldrb	r3, [r7, #15]
}
 8016bf2:	4618      	mov	r0, r3
 8016bf4:	3710      	adds	r7, #16
 8016bf6:	46bd      	mov	sp, r7
 8016bf8:	bd80      	pop	{r7, pc}
	...

08016bfc <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 8016bfc:	b580      	push	{r7, lr}
 8016bfe:	b084      	sub	sp, #16
 8016c00:	af00      	add	r7, sp, #0
 8016c02:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 8016c04:	6878      	ldr	r0, [r7, #4]
 8016c06:	f7ff ff87 	bl	8016b18 <sync_window>
 8016c0a:	4603      	mov	r3, r0
 8016c0c:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8016c0e:	7bfb      	ldrb	r3, [r7, #15]
 8016c10:	2b00      	cmp	r3, #0
 8016c12:	d158      	bne.n	8016cc6 <sync_fs+0xca>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 8016c14:	687b      	ldr	r3, [r7, #4]
 8016c16:	781b      	ldrb	r3, [r3, #0]
 8016c18:	2b03      	cmp	r3, #3
 8016c1a:	d148      	bne.n	8016cae <sync_fs+0xb2>
 8016c1c:	687b      	ldr	r3, [r7, #4]
 8016c1e:	791b      	ldrb	r3, [r3, #4]
 8016c20:	2b01      	cmp	r3, #1
 8016c22:	d144      	bne.n	8016cae <sync_fs+0xb2>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 8016c24:	687b      	ldr	r3, [r7, #4]
 8016c26:	3330      	adds	r3, #48	; 0x30
 8016c28:	f44f 7200 	mov.w	r2, #512	; 0x200
 8016c2c:	2100      	movs	r1, #0
 8016c2e:	4618      	mov	r0, r3
 8016c30:	f7ff fda9 	bl	8016786 <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 8016c34:	687b      	ldr	r3, [r7, #4]
 8016c36:	3330      	adds	r3, #48	; 0x30
 8016c38:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8016c3c:	f64a 2155 	movw	r1, #43605	; 0xaa55
 8016c40:	4618      	mov	r0, r3
 8016c42:	f7ff fd38 	bl	80166b6 <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 8016c46:	687b      	ldr	r3, [r7, #4]
 8016c48:	3330      	adds	r3, #48	; 0x30
 8016c4a:	4921      	ldr	r1, [pc, #132]	; (8016cd0 <sync_fs+0xd4>)
 8016c4c:	4618      	mov	r0, r3
 8016c4e:	f7ff fd4d 	bl	80166ec <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 8016c52:	687b      	ldr	r3, [r7, #4]
 8016c54:	3330      	adds	r3, #48	; 0x30
 8016c56:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8016c5a:	491e      	ldr	r1, [pc, #120]	; (8016cd4 <sync_fs+0xd8>)
 8016c5c:	4618      	mov	r0, r3
 8016c5e:	f7ff fd45 	bl	80166ec <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 8016c62:	687b      	ldr	r3, [r7, #4]
 8016c64:	3330      	adds	r3, #48	; 0x30
 8016c66:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 8016c6a:	687b      	ldr	r3, [r7, #4]
 8016c6c:	691b      	ldr	r3, [r3, #16]
 8016c6e:	4619      	mov	r1, r3
 8016c70:	4610      	mov	r0, r2
 8016c72:	f7ff fd3b 	bl	80166ec <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 8016c76:	687b      	ldr	r3, [r7, #4]
 8016c78:	3330      	adds	r3, #48	; 0x30
 8016c7a:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 8016c7e:	687b      	ldr	r3, [r7, #4]
 8016c80:	68db      	ldr	r3, [r3, #12]
 8016c82:	4619      	mov	r1, r3
 8016c84:	4610      	mov	r0, r2
 8016c86:	f7ff fd31 	bl	80166ec <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 8016c8a:	687b      	ldr	r3, [r7, #4]
 8016c8c:	69db      	ldr	r3, [r3, #28]
 8016c8e:	1c5a      	adds	r2, r3, #1
 8016c90:	687b      	ldr	r3, [r7, #4]
 8016c92:	62da      	str	r2, [r3, #44]	; 0x2c
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 8016c94:	687b      	ldr	r3, [r7, #4]
 8016c96:	7858      	ldrb	r0, [r3, #1]
 8016c98:	687b      	ldr	r3, [r7, #4]
 8016c9a:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8016c9e:	687b      	ldr	r3, [r7, #4]
 8016ca0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8016ca2:	2301      	movs	r3, #1
 8016ca4:	f7ff fc8e 	bl	80165c4 <disk_write>
			fs->fsi_flag = 0;
 8016ca8:	687b      	ldr	r3, [r7, #4]
 8016caa:	2200      	movs	r2, #0
 8016cac:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 8016cae:	687b      	ldr	r3, [r7, #4]
 8016cb0:	785b      	ldrb	r3, [r3, #1]
 8016cb2:	2200      	movs	r2, #0
 8016cb4:	2100      	movs	r1, #0
 8016cb6:	4618      	mov	r0, r3
 8016cb8:	f7ff fca4 	bl	8016604 <disk_ioctl>
 8016cbc:	4603      	mov	r3, r0
 8016cbe:	2b00      	cmp	r3, #0
 8016cc0:	d001      	beq.n	8016cc6 <sync_fs+0xca>
 8016cc2:	2301      	movs	r3, #1
 8016cc4:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 8016cc6:	7bfb      	ldrb	r3, [r7, #15]
}
 8016cc8:	4618      	mov	r0, r3
 8016cca:	3710      	adds	r7, #16
 8016ccc:	46bd      	mov	sp, r7
 8016cce:	bd80      	pop	{r7, pc}
 8016cd0:	41615252 	.word	0x41615252
 8016cd4:	61417272 	.word	0x61417272

08016cd8 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 8016cd8:	b480      	push	{r7}
 8016cda:	b083      	sub	sp, #12
 8016cdc:	af00      	add	r7, sp, #0
 8016cde:	6078      	str	r0, [r7, #4]
 8016ce0:	6039      	str	r1, [r7, #0]
	clst -= 2;
 8016ce2:	683b      	ldr	r3, [r7, #0]
 8016ce4:	3b02      	subs	r3, #2
 8016ce6:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8016ce8:	687b      	ldr	r3, [r7, #4]
 8016cea:	695b      	ldr	r3, [r3, #20]
 8016cec:	3b02      	subs	r3, #2
 8016cee:	683a      	ldr	r2, [r7, #0]
 8016cf0:	429a      	cmp	r2, r3
 8016cf2:	d301      	bcc.n	8016cf8 <clust2sect+0x20>
 8016cf4:	2300      	movs	r3, #0
 8016cf6:	e008      	b.n	8016d0a <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 8016cf8:	687b      	ldr	r3, [r7, #4]
 8016cfa:	895b      	ldrh	r3, [r3, #10]
 8016cfc:	461a      	mov	r2, r3
 8016cfe:	683b      	ldr	r3, [r7, #0]
 8016d00:	fb03 f202 	mul.w	r2, r3, r2
 8016d04:	687b      	ldr	r3, [r7, #4]
 8016d06:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8016d08:	4413      	add	r3, r2
}
 8016d0a:	4618      	mov	r0, r3
 8016d0c:	370c      	adds	r7, #12
 8016d0e:	46bd      	mov	sp, r7
 8016d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016d14:	4770      	bx	lr

08016d16 <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 8016d16:	b580      	push	{r7, lr}
 8016d18:	b086      	sub	sp, #24
 8016d1a:	af00      	add	r7, sp, #0
 8016d1c:	6078      	str	r0, [r7, #4]
 8016d1e:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 8016d20:	687b      	ldr	r3, [r7, #4]
 8016d22:	681b      	ldr	r3, [r3, #0]
 8016d24:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 8016d26:	683b      	ldr	r3, [r7, #0]
 8016d28:	2b01      	cmp	r3, #1
 8016d2a:	d904      	bls.n	8016d36 <get_fat+0x20>
 8016d2c:	693b      	ldr	r3, [r7, #16]
 8016d2e:	695b      	ldr	r3, [r3, #20]
 8016d30:	683a      	ldr	r2, [r7, #0]
 8016d32:	429a      	cmp	r2, r3
 8016d34:	d302      	bcc.n	8016d3c <get_fat+0x26>
		val = 1;	/* Internal error */
 8016d36:	2301      	movs	r3, #1
 8016d38:	617b      	str	r3, [r7, #20]
 8016d3a:	e08c      	b.n	8016e56 <get_fat+0x140>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 8016d3c:	f04f 33ff 	mov.w	r3, #4294967295
 8016d40:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 8016d42:	693b      	ldr	r3, [r7, #16]
 8016d44:	781b      	ldrb	r3, [r3, #0]
 8016d46:	2b02      	cmp	r3, #2
 8016d48:	d045      	beq.n	8016dd6 <get_fat+0xc0>
 8016d4a:	2b03      	cmp	r3, #3
 8016d4c:	d05d      	beq.n	8016e0a <get_fat+0xf4>
 8016d4e:	2b01      	cmp	r3, #1
 8016d50:	d177      	bne.n	8016e42 <get_fat+0x12c>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 8016d52:	683b      	ldr	r3, [r7, #0]
 8016d54:	60fb      	str	r3, [r7, #12]
 8016d56:	68fb      	ldr	r3, [r7, #12]
 8016d58:	085b      	lsrs	r3, r3, #1
 8016d5a:	68fa      	ldr	r2, [r7, #12]
 8016d5c:	4413      	add	r3, r2
 8016d5e:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8016d60:	693b      	ldr	r3, [r7, #16]
 8016d62:	6a1a      	ldr	r2, [r3, #32]
 8016d64:	68fb      	ldr	r3, [r7, #12]
 8016d66:	0a5b      	lsrs	r3, r3, #9
 8016d68:	4413      	add	r3, r2
 8016d6a:	4619      	mov	r1, r3
 8016d6c:	6938      	ldr	r0, [r7, #16]
 8016d6e:	f7ff ff17 	bl	8016ba0 <move_window>
 8016d72:	4603      	mov	r3, r0
 8016d74:	2b00      	cmp	r3, #0
 8016d76:	d167      	bne.n	8016e48 <get_fat+0x132>
			wc = fs->win[bc++ % SS(fs)];
 8016d78:	68fb      	ldr	r3, [r7, #12]
 8016d7a:	1c5a      	adds	r2, r3, #1
 8016d7c:	60fa      	str	r2, [r7, #12]
 8016d7e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8016d82:	693a      	ldr	r2, [r7, #16]
 8016d84:	4413      	add	r3, r2
 8016d86:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8016d8a:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8016d8c:	693b      	ldr	r3, [r7, #16]
 8016d8e:	6a1a      	ldr	r2, [r3, #32]
 8016d90:	68fb      	ldr	r3, [r7, #12]
 8016d92:	0a5b      	lsrs	r3, r3, #9
 8016d94:	4413      	add	r3, r2
 8016d96:	4619      	mov	r1, r3
 8016d98:	6938      	ldr	r0, [r7, #16]
 8016d9a:	f7ff ff01 	bl	8016ba0 <move_window>
 8016d9e:	4603      	mov	r3, r0
 8016da0:	2b00      	cmp	r3, #0
 8016da2:	d153      	bne.n	8016e4c <get_fat+0x136>
			wc |= fs->win[bc % SS(fs)] << 8;
 8016da4:	68fb      	ldr	r3, [r7, #12]
 8016da6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8016daa:	693a      	ldr	r2, [r7, #16]
 8016dac:	4413      	add	r3, r2
 8016dae:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8016db2:	021b      	lsls	r3, r3, #8
 8016db4:	461a      	mov	r2, r3
 8016db6:	68bb      	ldr	r3, [r7, #8]
 8016db8:	4313      	orrs	r3, r2
 8016dba:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 8016dbc:	683b      	ldr	r3, [r7, #0]
 8016dbe:	f003 0301 	and.w	r3, r3, #1
 8016dc2:	2b00      	cmp	r3, #0
 8016dc4:	d002      	beq.n	8016dcc <get_fat+0xb6>
 8016dc6:	68bb      	ldr	r3, [r7, #8]
 8016dc8:	091b      	lsrs	r3, r3, #4
 8016dca:	e002      	b.n	8016dd2 <get_fat+0xbc>
 8016dcc:	68bb      	ldr	r3, [r7, #8]
 8016dce:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8016dd2:	617b      	str	r3, [r7, #20]
			break;
 8016dd4:	e03f      	b.n	8016e56 <get_fat+0x140>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8016dd6:	693b      	ldr	r3, [r7, #16]
 8016dd8:	6a1a      	ldr	r2, [r3, #32]
 8016dda:	683b      	ldr	r3, [r7, #0]
 8016ddc:	0a1b      	lsrs	r3, r3, #8
 8016dde:	4413      	add	r3, r2
 8016de0:	4619      	mov	r1, r3
 8016de2:	6938      	ldr	r0, [r7, #16]
 8016de4:	f7ff fedc 	bl	8016ba0 <move_window>
 8016de8:	4603      	mov	r3, r0
 8016dea:	2b00      	cmp	r3, #0
 8016dec:	d130      	bne.n	8016e50 <get_fat+0x13a>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 8016dee:	693b      	ldr	r3, [r7, #16]
 8016df0:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8016df4:	683b      	ldr	r3, [r7, #0]
 8016df6:	005b      	lsls	r3, r3, #1
 8016df8:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 8016dfc:	4413      	add	r3, r2
 8016dfe:	4618      	mov	r0, r3
 8016e00:	f7ff fc1e 	bl	8016640 <ld_word>
 8016e04:	4603      	mov	r3, r0
 8016e06:	617b      	str	r3, [r7, #20]
			break;
 8016e08:	e025      	b.n	8016e56 <get_fat+0x140>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8016e0a:	693b      	ldr	r3, [r7, #16]
 8016e0c:	6a1a      	ldr	r2, [r3, #32]
 8016e0e:	683b      	ldr	r3, [r7, #0]
 8016e10:	09db      	lsrs	r3, r3, #7
 8016e12:	4413      	add	r3, r2
 8016e14:	4619      	mov	r1, r3
 8016e16:	6938      	ldr	r0, [r7, #16]
 8016e18:	f7ff fec2 	bl	8016ba0 <move_window>
 8016e1c:	4603      	mov	r3, r0
 8016e1e:	2b00      	cmp	r3, #0
 8016e20:	d118      	bne.n	8016e54 <get_fat+0x13e>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 8016e22:	693b      	ldr	r3, [r7, #16]
 8016e24:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8016e28:	683b      	ldr	r3, [r7, #0]
 8016e2a:	009b      	lsls	r3, r3, #2
 8016e2c:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 8016e30:	4413      	add	r3, r2
 8016e32:	4618      	mov	r0, r3
 8016e34:	f7ff fc1c 	bl	8016670 <ld_dword>
 8016e38:	4603      	mov	r3, r0
 8016e3a:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8016e3e:	617b      	str	r3, [r7, #20]
			break;
 8016e40:	e009      	b.n	8016e56 <get_fat+0x140>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 8016e42:	2301      	movs	r3, #1
 8016e44:	617b      	str	r3, [r7, #20]
 8016e46:	e006      	b.n	8016e56 <get_fat+0x140>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8016e48:	bf00      	nop
 8016e4a:	e004      	b.n	8016e56 <get_fat+0x140>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8016e4c:	bf00      	nop
 8016e4e:	e002      	b.n	8016e56 <get_fat+0x140>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8016e50:	bf00      	nop
 8016e52:	e000      	b.n	8016e56 <get_fat+0x140>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8016e54:	bf00      	nop
		}
	}

	return val;
 8016e56:	697b      	ldr	r3, [r7, #20]
}
 8016e58:	4618      	mov	r0, r3
 8016e5a:	3718      	adds	r7, #24
 8016e5c:	46bd      	mov	sp, r7
 8016e5e:	bd80      	pop	{r7, pc}

08016e60 <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 8016e60:	b590      	push	{r4, r7, lr}
 8016e62:	b089      	sub	sp, #36	; 0x24
 8016e64:	af00      	add	r7, sp, #0
 8016e66:	60f8      	str	r0, [r7, #12]
 8016e68:	60b9      	str	r1, [r7, #8]
 8016e6a:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 8016e6c:	2302      	movs	r3, #2
 8016e6e:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 8016e70:	68bb      	ldr	r3, [r7, #8]
 8016e72:	2b01      	cmp	r3, #1
 8016e74:	f240 80d6 	bls.w	8017024 <put_fat+0x1c4>
 8016e78:	68fb      	ldr	r3, [r7, #12]
 8016e7a:	695b      	ldr	r3, [r3, #20]
 8016e7c:	68ba      	ldr	r2, [r7, #8]
 8016e7e:	429a      	cmp	r2, r3
 8016e80:	f080 80d0 	bcs.w	8017024 <put_fat+0x1c4>
		switch (fs->fs_type) {
 8016e84:	68fb      	ldr	r3, [r7, #12]
 8016e86:	781b      	ldrb	r3, [r3, #0]
 8016e88:	2b02      	cmp	r3, #2
 8016e8a:	d073      	beq.n	8016f74 <put_fat+0x114>
 8016e8c:	2b03      	cmp	r3, #3
 8016e8e:	f000 8091 	beq.w	8016fb4 <put_fat+0x154>
 8016e92:	2b01      	cmp	r3, #1
 8016e94:	f040 80c6 	bne.w	8017024 <put_fat+0x1c4>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 8016e98:	68bb      	ldr	r3, [r7, #8]
 8016e9a:	61bb      	str	r3, [r7, #24]
 8016e9c:	69bb      	ldr	r3, [r7, #24]
 8016e9e:	085b      	lsrs	r3, r3, #1
 8016ea0:	69ba      	ldr	r2, [r7, #24]
 8016ea2:	4413      	add	r3, r2
 8016ea4:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8016ea6:	68fb      	ldr	r3, [r7, #12]
 8016ea8:	6a1a      	ldr	r2, [r3, #32]
 8016eaa:	69bb      	ldr	r3, [r7, #24]
 8016eac:	0a5b      	lsrs	r3, r3, #9
 8016eae:	4413      	add	r3, r2
 8016eb0:	4619      	mov	r1, r3
 8016eb2:	68f8      	ldr	r0, [r7, #12]
 8016eb4:	f7ff fe74 	bl	8016ba0 <move_window>
 8016eb8:	4603      	mov	r3, r0
 8016eba:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8016ebc:	7ffb      	ldrb	r3, [r7, #31]
 8016ebe:	2b00      	cmp	r3, #0
 8016ec0:	f040 80a9 	bne.w	8017016 <put_fat+0x1b6>
			p = fs->win + bc++ % SS(fs);
 8016ec4:	68fb      	ldr	r3, [r7, #12]
 8016ec6:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8016eca:	69bb      	ldr	r3, [r7, #24]
 8016ecc:	1c59      	adds	r1, r3, #1
 8016ece:	61b9      	str	r1, [r7, #24]
 8016ed0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8016ed4:	4413      	add	r3, r2
 8016ed6:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 8016ed8:	68bb      	ldr	r3, [r7, #8]
 8016eda:	f003 0301 	and.w	r3, r3, #1
 8016ede:	2b00      	cmp	r3, #0
 8016ee0:	d00d      	beq.n	8016efe <put_fat+0x9e>
 8016ee2:	697b      	ldr	r3, [r7, #20]
 8016ee4:	781b      	ldrb	r3, [r3, #0]
 8016ee6:	b25b      	sxtb	r3, r3
 8016ee8:	f003 030f 	and.w	r3, r3, #15
 8016eec:	b25a      	sxtb	r2, r3
 8016eee:	687b      	ldr	r3, [r7, #4]
 8016ef0:	b2db      	uxtb	r3, r3
 8016ef2:	011b      	lsls	r3, r3, #4
 8016ef4:	b25b      	sxtb	r3, r3
 8016ef6:	4313      	orrs	r3, r2
 8016ef8:	b25b      	sxtb	r3, r3
 8016efa:	b2db      	uxtb	r3, r3
 8016efc:	e001      	b.n	8016f02 <put_fat+0xa2>
 8016efe:	687b      	ldr	r3, [r7, #4]
 8016f00:	b2db      	uxtb	r3, r3
 8016f02:	697a      	ldr	r2, [r7, #20]
 8016f04:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8016f06:	68fb      	ldr	r3, [r7, #12]
 8016f08:	2201      	movs	r2, #1
 8016f0a:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8016f0c:	68fb      	ldr	r3, [r7, #12]
 8016f0e:	6a1a      	ldr	r2, [r3, #32]
 8016f10:	69bb      	ldr	r3, [r7, #24]
 8016f12:	0a5b      	lsrs	r3, r3, #9
 8016f14:	4413      	add	r3, r2
 8016f16:	4619      	mov	r1, r3
 8016f18:	68f8      	ldr	r0, [r7, #12]
 8016f1a:	f7ff fe41 	bl	8016ba0 <move_window>
 8016f1e:	4603      	mov	r3, r0
 8016f20:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8016f22:	7ffb      	ldrb	r3, [r7, #31]
 8016f24:	2b00      	cmp	r3, #0
 8016f26:	d178      	bne.n	801701a <put_fat+0x1ba>
			p = fs->win + bc % SS(fs);
 8016f28:	68fb      	ldr	r3, [r7, #12]
 8016f2a:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8016f2e:	69bb      	ldr	r3, [r7, #24]
 8016f30:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8016f34:	4413      	add	r3, r2
 8016f36:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 8016f38:	68bb      	ldr	r3, [r7, #8]
 8016f3a:	f003 0301 	and.w	r3, r3, #1
 8016f3e:	2b00      	cmp	r3, #0
 8016f40:	d003      	beq.n	8016f4a <put_fat+0xea>
 8016f42:	687b      	ldr	r3, [r7, #4]
 8016f44:	091b      	lsrs	r3, r3, #4
 8016f46:	b2db      	uxtb	r3, r3
 8016f48:	e00e      	b.n	8016f68 <put_fat+0x108>
 8016f4a:	697b      	ldr	r3, [r7, #20]
 8016f4c:	781b      	ldrb	r3, [r3, #0]
 8016f4e:	b25b      	sxtb	r3, r3
 8016f50:	f023 030f 	bic.w	r3, r3, #15
 8016f54:	b25a      	sxtb	r2, r3
 8016f56:	687b      	ldr	r3, [r7, #4]
 8016f58:	0a1b      	lsrs	r3, r3, #8
 8016f5a:	b25b      	sxtb	r3, r3
 8016f5c:	f003 030f 	and.w	r3, r3, #15
 8016f60:	b25b      	sxtb	r3, r3
 8016f62:	4313      	orrs	r3, r2
 8016f64:	b25b      	sxtb	r3, r3
 8016f66:	b2db      	uxtb	r3, r3
 8016f68:	697a      	ldr	r2, [r7, #20]
 8016f6a:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8016f6c:	68fb      	ldr	r3, [r7, #12]
 8016f6e:	2201      	movs	r2, #1
 8016f70:	70da      	strb	r2, [r3, #3]
			break;
 8016f72:	e057      	b.n	8017024 <put_fat+0x1c4>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 8016f74:	68fb      	ldr	r3, [r7, #12]
 8016f76:	6a1a      	ldr	r2, [r3, #32]
 8016f78:	68bb      	ldr	r3, [r7, #8]
 8016f7a:	0a1b      	lsrs	r3, r3, #8
 8016f7c:	4413      	add	r3, r2
 8016f7e:	4619      	mov	r1, r3
 8016f80:	68f8      	ldr	r0, [r7, #12]
 8016f82:	f7ff fe0d 	bl	8016ba0 <move_window>
 8016f86:	4603      	mov	r3, r0
 8016f88:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8016f8a:	7ffb      	ldrb	r3, [r7, #31]
 8016f8c:	2b00      	cmp	r3, #0
 8016f8e:	d146      	bne.n	801701e <put_fat+0x1be>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 8016f90:	68fb      	ldr	r3, [r7, #12]
 8016f92:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8016f96:	68bb      	ldr	r3, [r7, #8]
 8016f98:	005b      	lsls	r3, r3, #1
 8016f9a:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 8016f9e:	4413      	add	r3, r2
 8016fa0:	687a      	ldr	r2, [r7, #4]
 8016fa2:	b292      	uxth	r2, r2
 8016fa4:	4611      	mov	r1, r2
 8016fa6:	4618      	mov	r0, r3
 8016fa8:	f7ff fb85 	bl	80166b6 <st_word>
			fs->wflag = 1;
 8016fac:	68fb      	ldr	r3, [r7, #12]
 8016fae:	2201      	movs	r2, #1
 8016fb0:	70da      	strb	r2, [r3, #3]
			break;
 8016fb2:	e037      	b.n	8017024 <put_fat+0x1c4>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 8016fb4:	68fb      	ldr	r3, [r7, #12]
 8016fb6:	6a1a      	ldr	r2, [r3, #32]
 8016fb8:	68bb      	ldr	r3, [r7, #8]
 8016fba:	09db      	lsrs	r3, r3, #7
 8016fbc:	4413      	add	r3, r2
 8016fbe:	4619      	mov	r1, r3
 8016fc0:	68f8      	ldr	r0, [r7, #12]
 8016fc2:	f7ff fded 	bl	8016ba0 <move_window>
 8016fc6:	4603      	mov	r3, r0
 8016fc8:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8016fca:	7ffb      	ldrb	r3, [r7, #31]
 8016fcc:	2b00      	cmp	r3, #0
 8016fce:	d128      	bne.n	8017022 <put_fat+0x1c2>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 8016fd0:	687b      	ldr	r3, [r7, #4]
 8016fd2:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 8016fd6:	68fb      	ldr	r3, [r7, #12]
 8016fd8:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8016fdc:	68bb      	ldr	r3, [r7, #8]
 8016fde:	009b      	lsls	r3, r3, #2
 8016fe0:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 8016fe4:	4413      	add	r3, r2
 8016fe6:	4618      	mov	r0, r3
 8016fe8:	f7ff fb42 	bl	8016670 <ld_dword>
 8016fec:	4603      	mov	r3, r0
 8016fee:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8016ff2:	4323      	orrs	r3, r4
 8016ff4:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 8016ff6:	68fb      	ldr	r3, [r7, #12]
 8016ff8:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8016ffc:	68bb      	ldr	r3, [r7, #8]
 8016ffe:	009b      	lsls	r3, r3, #2
 8017000:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 8017004:	4413      	add	r3, r2
 8017006:	6879      	ldr	r1, [r7, #4]
 8017008:	4618      	mov	r0, r3
 801700a:	f7ff fb6f 	bl	80166ec <st_dword>
			fs->wflag = 1;
 801700e:	68fb      	ldr	r3, [r7, #12]
 8017010:	2201      	movs	r2, #1
 8017012:	70da      	strb	r2, [r3, #3]
			break;
 8017014:	e006      	b.n	8017024 <put_fat+0x1c4>
			if (res != FR_OK) break;
 8017016:	bf00      	nop
 8017018:	e004      	b.n	8017024 <put_fat+0x1c4>
			if (res != FR_OK) break;
 801701a:	bf00      	nop
 801701c:	e002      	b.n	8017024 <put_fat+0x1c4>
			if (res != FR_OK) break;
 801701e:	bf00      	nop
 8017020:	e000      	b.n	8017024 <put_fat+0x1c4>
			if (res != FR_OK) break;
 8017022:	bf00      	nop
		}
	}
	return res;
 8017024:	7ffb      	ldrb	r3, [r7, #31]
}
 8017026:	4618      	mov	r0, r3
 8017028:	3724      	adds	r7, #36	; 0x24
 801702a:	46bd      	mov	sp, r7
 801702c:	bd90      	pop	{r4, r7, pc}

0801702e <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 801702e:	b580      	push	{r7, lr}
 8017030:	b088      	sub	sp, #32
 8017032:	af00      	add	r7, sp, #0
 8017034:	60f8      	str	r0, [r7, #12]
 8017036:	60b9      	str	r1, [r7, #8]
 8017038:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 801703a:	2300      	movs	r3, #0
 801703c:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 801703e:	68fb      	ldr	r3, [r7, #12]
 8017040:	681b      	ldr	r3, [r3, #0]
 8017042:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 8017044:	68bb      	ldr	r3, [r7, #8]
 8017046:	2b01      	cmp	r3, #1
 8017048:	d904      	bls.n	8017054 <remove_chain+0x26>
 801704a:	69bb      	ldr	r3, [r7, #24]
 801704c:	695b      	ldr	r3, [r3, #20]
 801704e:	68ba      	ldr	r2, [r7, #8]
 8017050:	429a      	cmp	r2, r3
 8017052:	d301      	bcc.n	8017058 <remove_chain+0x2a>
 8017054:	2302      	movs	r3, #2
 8017056:	e04b      	b.n	80170f0 <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 8017058:	687b      	ldr	r3, [r7, #4]
 801705a:	2b00      	cmp	r3, #0
 801705c:	d00c      	beq.n	8017078 <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 801705e:	f04f 32ff 	mov.w	r2, #4294967295
 8017062:	6879      	ldr	r1, [r7, #4]
 8017064:	69b8      	ldr	r0, [r7, #24]
 8017066:	f7ff fefb 	bl	8016e60 <put_fat>
 801706a:	4603      	mov	r3, r0
 801706c:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 801706e:	7ffb      	ldrb	r3, [r7, #31]
 8017070:	2b00      	cmp	r3, #0
 8017072:	d001      	beq.n	8017078 <remove_chain+0x4a>
 8017074:	7ffb      	ldrb	r3, [r7, #31]
 8017076:	e03b      	b.n	80170f0 <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 8017078:	68b9      	ldr	r1, [r7, #8]
 801707a:	68f8      	ldr	r0, [r7, #12]
 801707c:	f7ff fe4b 	bl	8016d16 <get_fat>
 8017080:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 8017082:	697b      	ldr	r3, [r7, #20]
 8017084:	2b00      	cmp	r3, #0
 8017086:	d031      	beq.n	80170ec <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 8017088:	697b      	ldr	r3, [r7, #20]
 801708a:	2b01      	cmp	r3, #1
 801708c:	d101      	bne.n	8017092 <remove_chain+0x64>
 801708e:	2302      	movs	r3, #2
 8017090:	e02e      	b.n	80170f0 <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 8017092:	697b      	ldr	r3, [r7, #20]
 8017094:	f1b3 3fff 	cmp.w	r3, #4294967295
 8017098:	d101      	bne.n	801709e <remove_chain+0x70>
 801709a:	2301      	movs	r3, #1
 801709c:	e028      	b.n	80170f0 <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 801709e:	2200      	movs	r2, #0
 80170a0:	68b9      	ldr	r1, [r7, #8]
 80170a2:	69b8      	ldr	r0, [r7, #24]
 80170a4:	f7ff fedc 	bl	8016e60 <put_fat>
 80170a8:	4603      	mov	r3, r0
 80170aa:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 80170ac:	7ffb      	ldrb	r3, [r7, #31]
 80170ae:	2b00      	cmp	r3, #0
 80170b0:	d001      	beq.n	80170b6 <remove_chain+0x88>
 80170b2:	7ffb      	ldrb	r3, [r7, #31]
 80170b4:	e01c      	b.n	80170f0 <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 80170b6:	69bb      	ldr	r3, [r7, #24]
 80170b8:	691a      	ldr	r2, [r3, #16]
 80170ba:	69bb      	ldr	r3, [r7, #24]
 80170bc:	695b      	ldr	r3, [r3, #20]
 80170be:	3b02      	subs	r3, #2
 80170c0:	429a      	cmp	r2, r3
 80170c2:	d20b      	bcs.n	80170dc <remove_chain+0xae>
			fs->free_clst++;
 80170c4:	69bb      	ldr	r3, [r7, #24]
 80170c6:	691b      	ldr	r3, [r3, #16]
 80170c8:	1c5a      	adds	r2, r3, #1
 80170ca:	69bb      	ldr	r3, [r7, #24]
 80170cc:	611a      	str	r2, [r3, #16]
			fs->fsi_flag |= 1;
 80170ce:	69bb      	ldr	r3, [r7, #24]
 80170d0:	791b      	ldrb	r3, [r3, #4]
 80170d2:	f043 0301 	orr.w	r3, r3, #1
 80170d6:	b2da      	uxtb	r2, r3
 80170d8:	69bb      	ldr	r3, [r7, #24]
 80170da:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 80170dc:	697b      	ldr	r3, [r7, #20]
 80170de:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 80170e0:	69bb      	ldr	r3, [r7, #24]
 80170e2:	695b      	ldr	r3, [r3, #20]
 80170e4:	68ba      	ldr	r2, [r7, #8]
 80170e6:	429a      	cmp	r2, r3
 80170e8:	d3c6      	bcc.n	8017078 <remove_chain+0x4a>
 80170ea:	e000      	b.n	80170ee <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 80170ec:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 80170ee:	2300      	movs	r3, #0
}
 80170f0:	4618      	mov	r0, r3
 80170f2:	3720      	adds	r7, #32
 80170f4:	46bd      	mov	sp, r7
 80170f6:	bd80      	pop	{r7, pc}

080170f8 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 80170f8:	b580      	push	{r7, lr}
 80170fa:	b088      	sub	sp, #32
 80170fc:	af00      	add	r7, sp, #0
 80170fe:	6078      	str	r0, [r7, #4]
 8017100:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 8017102:	687b      	ldr	r3, [r7, #4]
 8017104:	681b      	ldr	r3, [r3, #0]
 8017106:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 8017108:	683b      	ldr	r3, [r7, #0]
 801710a:	2b00      	cmp	r3, #0
 801710c:	d10d      	bne.n	801712a <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 801710e:	693b      	ldr	r3, [r7, #16]
 8017110:	68db      	ldr	r3, [r3, #12]
 8017112:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 8017114:	69bb      	ldr	r3, [r7, #24]
 8017116:	2b00      	cmp	r3, #0
 8017118:	d004      	beq.n	8017124 <create_chain+0x2c>
 801711a:	693b      	ldr	r3, [r7, #16]
 801711c:	695b      	ldr	r3, [r3, #20]
 801711e:	69ba      	ldr	r2, [r7, #24]
 8017120:	429a      	cmp	r2, r3
 8017122:	d31b      	bcc.n	801715c <create_chain+0x64>
 8017124:	2301      	movs	r3, #1
 8017126:	61bb      	str	r3, [r7, #24]
 8017128:	e018      	b.n	801715c <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 801712a:	6839      	ldr	r1, [r7, #0]
 801712c:	6878      	ldr	r0, [r7, #4]
 801712e:	f7ff fdf2 	bl	8016d16 <get_fat>
 8017132:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 8017134:	68fb      	ldr	r3, [r7, #12]
 8017136:	2b01      	cmp	r3, #1
 8017138:	d801      	bhi.n	801713e <create_chain+0x46>
 801713a:	2301      	movs	r3, #1
 801713c:	e070      	b.n	8017220 <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 801713e:	68fb      	ldr	r3, [r7, #12]
 8017140:	f1b3 3fff 	cmp.w	r3, #4294967295
 8017144:	d101      	bne.n	801714a <create_chain+0x52>
 8017146:	68fb      	ldr	r3, [r7, #12]
 8017148:	e06a      	b.n	8017220 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 801714a:	693b      	ldr	r3, [r7, #16]
 801714c:	695b      	ldr	r3, [r3, #20]
 801714e:	68fa      	ldr	r2, [r7, #12]
 8017150:	429a      	cmp	r2, r3
 8017152:	d201      	bcs.n	8017158 <create_chain+0x60>
 8017154:	68fb      	ldr	r3, [r7, #12]
 8017156:	e063      	b.n	8017220 <create_chain+0x128>
		scl = clst;
 8017158:	683b      	ldr	r3, [r7, #0]
 801715a:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 801715c:	69bb      	ldr	r3, [r7, #24]
 801715e:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 8017160:	69fb      	ldr	r3, [r7, #28]
 8017162:	3301      	adds	r3, #1
 8017164:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 8017166:	693b      	ldr	r3, [r7, #16]
 8017168:	695b      	ldr	r3, [r3, #20]
 801716a:	69fa      	ldr	r2, [r7, #28]
 801716c:	429a      	cmp	r2, r3
 801716e:	d307      	bcc.n	8017180 <create_chain+0x88>
				ncl = 2;
 8017170:	2302      	movs	r3, #2
 8017172:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 8017174:	69fa      	ldr	r2, [r7, #28]
 8017176:	69bb      	ldr	r3, [r7, #24]
 8017178:	429a      	cmp	r2, r3
 801717a:	d901      	bls.n	8017180 <create_chain+0x88>
 801717c:	2300      	movs	r3, #0
 801717e:	e04f      	b.n	8017220 <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 8017180:	69f9      	ldr	r1, [r7, #28]
 8017182:	6878      	ldr	r0, [r7, #4]
 8017184:	f7ff fdc7 	bl	8016d16 <get_fat>
 8017188:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 801718a:	68fb      	ldr	r3, [r7, #12]
 801718c:	2b00      	cmp	r3, #0
 801718e:	d00e      	beq.n	80171ae <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 8017190:	68fb      	ldr	r3, [r7, #12]
 8017192:	2b01      	cmp	r3, #1
 8017194:	d003      	beq.n	801719e <create_chain+0xa6>
 8017196:	68fb      	ldr	r3, [r7, #12]
 8017198:	f1b3 3fff 	cmp.w	r3, #4294967295
 801719c:	d101      	bne.n	80171a2 <create_chain+0xaa>
 801719e:	68fb      	ldr	r3, [r7, #12]
 80171a0:	e03e      	b.n	8017220 <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 80171a2:	69fa      	ldr	r2, [r7, #28]
 80171a4:	69bb      	ldr	r3, [r7, #24]
 80171a6:	429a      	cmp	r2, r3
 80171a8:	d1da      	bne.n	8017160 <create_chain+0x68>
 80171aa:	2300      	movs	r3, #0
 80171ac:	e038      	b.n	8017220 <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 80171ae:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 80171b0:	f04f 32ff 	mov.w	r2, #4294967295
 80171b4:	69f9      	ldr	r1, [r7, #28]
 80171b6:	6938      	ldr	r0, [r7, #16]
 80171b8:	f7ff fe52 	bl	8016e60 <put_fat>
 80171bc:	4603      	mov	r3, r0
 80171be:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 80171c0:	7dfb      	ldrb	r3, [r7, #23]
 80171c2:	2b00      	cmp	r3, #0
 80171c4:	d109      	bne.n	80171da <create_chain+0xe2>
 80171c6:	683b      	ldr	r3, [r7, #0]
 80171c8:	2b00      	cmp	r3, #0
 80171ca:	d006      	beq.n	80171da <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 80171cc:	69fa      	ldr	r2, [r7, #28]
 80171ce:	6839      	ldr	r1, [r7, #0]
 80171d0:	6938      	ldr	r0, [r7, #16]
 80171d2:	f7ff fe45 	bl	8016e60 <put_fat>
 80171d6:	4603      	mov	r3, r0
 80171d8:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 80171da:	7dfb      	ldrb	r3, [r7, #23]
 80171dc:	2b00      	cmp	r3, #0
 80171de:	d116      	bne.n	801720e <create_chain+0x116>
		fs->last_clst = ncl;
 80171e0:	693b      	ldr	r3, [r7, #16]
 80171e2:	69fa      	ldr	r2, [r7, #28]
 80171e4:	60da      	str	r2, [r3, #12]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 80171e6:	693b      	ldr	r3, [r7, #16]
 80171e8:	691a      	ldr	r2, [r3, #16]
 80171ea:	693b      	ldr	r3, [r7, #16]
 80171ec:	695b      	ldr	r3, [r3, #20]
 80171ee:	3b02      	subs	r3, #2
 80171f0:	429a      	cmp	r2, r3
 80171f2:	d804      	bhi.n	80171fe <create_chain+0x106>
 80171f4:	693b      	ldr	r3, [r7, #16]
 80171f6:	691b      	ldr	r3, [r3, #16]
 80171f8:	1e5a      	subs	r2, r3, #1
 80171fa:	693b      	ldr	r3, [r7, #16]
 80171fc:	611a      	str	r2, [r3, #16]
		fs->fsi_flag |= 1;
 80171fe:	693b      	ldr	r3, [r7, #16]
 8017200:	791b      	ldrb	r3, [r3, #4]
 8017202:	f043 0301 	orr.w	r3, r3, #1
 8017206:	b2da      	uxtb	r2, r3
 8017208:	693b      	ldr	r3, [r7, #16]
 801720a:	711a      	strb	r2, [r3, #4]
 801720c:	e007      	b.n	801721e <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 801720e:	7dfb      	ldrb	r3, [r7, #23]
 8017210:	2b01      	cmp	r3, #1
 8017212:	d102      	bne.n	801721a <create_chain+0x122>
 8017214:	f04f 33ff 	mov.w	r3, #4294967295
 8017218:	e000      	b.n	801721c <create_chain+0x124>
 801721a:	2301      	movs	r3, #1
 801721c:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 801721e:	69fb      	ldr	r3, [r7, #28]
}
 8017220:	4618      	mov	r0, r3
 8017222:	3720      	adds	r7, #32
 8017224:	46bd      	mov	sp, r7
 8017226:	bd80      	pop	{r7, pc}

08017228 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 8017228:	b480      	push	{r7}
 801722a:	b087      	sub	sp, #28
 801722c:	af00      	add	r7, sp, #0
 801722e:	6078      	str	r0, [r7, #4]
 8017230:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 8017232:	687b      	ldr	r3, [r7, #4]
 8017234:	681b      	ldr	r3, [r3, #0]
 8017236:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 8017238:	687b      	ldr	r3, [r7, #4]
 801723a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801723c:	3304      	adds	r3, #4
 801723e:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 8017240:	683b      	ldr	r3, [r7, #0]
 8017242:	0a5b      	lsrs	r3, r3, #9
 8017244:	68fa      	ldr	r2, [r7, #12]
 8017246:	8952      	ldrh	r2, [r2, #10]
 8017248:	fbb3 f3f2 	udiv	r3, r3, r2
 801724c:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 801724e:	693b      	ldr	r3, [r7, #16]
 8017250:	1d1a      	adds	r2, r3, #4
 8017252:	613a      	str	r2, [r7, #16]
 8017254:	681b      	ldr	r3, [r3, #0]
 8017256:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 8017258:	68bb      	ldr	r3, [r7, #8]
 801725a:	2b00      	cmp	r3, #0
 801725c:	d101      	bne.n	8017262 <clmt_clust+0x3a>
 801725e:	2300      	movs	r3, #0
 8017260:	e010      	b.n	8017284 <clmt_clust+0x5c>
		if (cl < ncl) break;	/* In this fragment? */
 8017262:	697a      	ldr	r2, [r7, #20]
 8017264:	68bb      	ldr	r3, [r7, #8]
 8017266:	429a      	cmp	r2, r3
 8017268:	d307      	bcc.n	801727a <clmt_clust+0x52>
		cl -= ncl; tbl++;		/* Next fragment */
 801726a:	697a      	ldr	r2, [r7, #20]
 801726c:	68bb      	ldr	r3, [r7, #8]
 801726e:	1ad3      	subs	r3, r2, r3
 8017270:	617b      	str	r3, [r7, #20]
 8017272:	693b      	ldr	r3, [r7, #16]
 8017274:	3304      	adds	r3, #4
 8017276:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8017278:	e7e9      	b.n	801724e <clmt_clust+0x26>
		if (cl < ncl) break;	/* In this fragment? */
 801727a:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 801727c:	693b      	ldr	r3, [r7, #16]
 801727e:	681a      	ldr	r2, [r3, #0]
 8017280:	697b      	ldr	r3, [r7, #20]
 8017282:	4413      	add	r3, r2
}
 8017284:	4618      	mov	r0, r3
 8017286:	371c      	adds	r7, #28
 8017288:	46bd      	mov	sp, r7
 801728a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801728e:	4770      	bx	lr

08017290 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 8017290:	b580      	push	{r7, lr}
 8017292:	b086      	sub	sp, #24
 8017294:	af00      	add	r7, sp, #0
 8017296:	6078      	str	r0, [r7, #4]
 8017298:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 801729a:	687b      	ldr	r3, [r7, #4]
 801729c:	681b      	ldr	r3, [r3, #0]
 801729e:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 80172a0:	683b      	ldr	r3, [r7, #0]
 80172a2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80172a6:	d204      	bcs.n	80172b2 <dir_sdi+0x22>
 80172a8:	683b      	ldr	r3, [r7, #0]
 80172aa:	f003 031f 	and.w	r3, r3, #31
 80172ae:	2b00      	cmp	r3, #0
 80172b0:	d001      	beq.n	80172b6 <dir_sdi+0x26>
		return FR_INT_ERR;
 80172b2:	2302      	movs	r3, #2
 80172b4:	e063      	b.n	801737e <dir_sdi+0xee>
	}
	dp->dptr = ofs;				/* Set current offset */
 80172b6:	687b      	ldr	r3, [r7, #4]
 80172b8:	683a      	ldr	r2, [r7, #0]
 80172ba:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 80172bc:	687b      	ldr	r3, [r7, #4]
 80172be:	689b      	ldr	r3, [r3, #8]
 80172c0:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 80172c2:	697b      	ldr	r3, [r7, #20]
 80172c4:	2b00      	cmp	r3, #0
 80172c6:	d106      	bne.n	80172d6 <dir_sdi+0x46>
 80172c8:	693b      	ldr	r3, [r7, #16]
 80172ca:	781b      	ldrb	r3, [r3, #0]
 80172cc:	2b02      	cmp	r3, #2
 80172ce:	d902      	bls.n	80172d6 <dir_sdi+0x46>
		clst = fs->dirbase;
 80172d0:	693b      	ldr	r3, [r7, #16]
 80172d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80172d4:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 80172d6:	697b      	ldr	r3, [r7, #20]
 80172d8:	2b00      	cmp	r3, #0
 80172da:	d10c      	bne.n	80172f6 <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 80172dc:	683b      	ldr	r3, [r7, #0]
 80172de:	095b      	lsrs	r3, r3, #5
 80172e0:	693a      	ldr	r2, [r7, #16]
 80172e2:	8912      	ldrh	r2, [r2, #8]
 80172e4:	4293      	cmp	r3, r2
 80172e6:	d301      	bcc.n	80172ec <dir_sdi+0x5c>
 80172e8:	2302      	movs	r3, #2
 80172ea:	e048      	b.n	801737e <dir_sdi+0xee>
		dp->sect = fs->dirbase;
 80172ec:	693b      	ldr	r3, [r7, #16]
 80172ee:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80172f0:	687b      	ldr	r3, [r7, #4]
 80172f2:	61da      	str	r2, [r3, #28]
 80172f4:	e029      	b.n	801734a <dir_sdi+0xba>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 80172f6:	693b      	ldr	r3, [r7, #16]
 80172f8:	895b      	ldrh	r3, [r3, #10]
 80172fa:	025b      	lsls	r3, r3, #9
 80172fc:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 80172fe:	e019      	b.n	8017334 <dir_sdi+0xa4>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 8017300:	687b      	ldr	r3, [r7, #4]
 8017302:	6979      	ldr	r1, [r7, #20]
 8017304:	4618      	mov	r0, r3
 8017306:	f7ff fd06 	bl	8016d16 <get_fat>
 801730a:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 801730c:	697b      	ldr	r3, [r7, #20]
 801730e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8017312:	d101      	bne.n	8017318 <dir_sdi+0x88>
 8017314:	2301      	movs	r3, #1
 8017316:	e032      	b.n	801737e <dir_sdi+0xee>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 8017318:	697b      	ldr	r3, [r7, #20]
 801731a:	2b01      	cmp	r3, #1
 801731c:	d904      	bls.n	8017328 <dir_sdi+0x98>
 801731e:	693b      	ldr	r3, [r7, #16]
 8017320:	695b      	ldr	r3, [r3, #20]
 8017322:	697a      	ldr	r2, [r7, #20]
 8017324:	429a      	cmp	r2, r3
 8017326:	d301      	bcc.n	801732c <dir_sdi+0x9c>
 8017328:	2302      	movs	r3, #2
 801732a:	e028      	b.n	801737e <dir_sdi+0xee>
			ofs -= csz;
 801732c:	683a      	ldr	r2, [r7, #0]
 801732e:	68fb      	ldr	r3, [r7, #12]
 8017330:	1ad3      	subs	r3, r2, r3
 8017332:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 8017334:	683a      	ldr	r2, [r7, #0]
 8017336:	68fb      	ldr	r3, [r7, #12]
 8017338:	429a      	cmp	r2, r3
 801733a:	d2e1      	bcs.n	8017300 <dir_sdi+0x70>
		}
		dp->sect = clust2sect(fs, clst);
 801733c:	6979      	ldr	r1, [r7, #20]
 801733e:	6938      	ldr	r0, [r7, #16]
 8017340:	f7ff fcca 	bl	8016cd8 <clust2sect>
 8017344:	4602      	mov	r2, r0
 8017346:	687b      	ldr	r3, [r7, #4]
 8017348:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 801734a:	687b      	ldr	r3, [r7, #4]
 801734c:	697a      	ldr	r2, [r7, #20]
 801734e:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 8017350:	687b      	ldr	r3, [r7, #4]
 8017352:	69db      	ldr	r3, [r3, #28]
 8017354:	2b00      	cmp	r3, #0
 8017356:	d101      	bne.n	801735c <dir_sdi+0xcc>
 8017358:	2302      	movs	r3, #2
 801735a:	e010      	b.n	801737e <dir_sdi+0xee>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 801735c:	687b      	ldr	r3, [r7, #4]
 801735e:	69da      	ldr	r2, [r3, #28]
 8017360:	683b      	ldr	r3, [r7, #0]
 8017362:	0a5b      	lsrs	r3, r3, #9
 8017364:	441a      	add	r2, r3
 8017366:	687b      	ldr	r3, [r7, #4]
 8017368:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 801736a:	693b      	ldr	r3, [r7, #16]
 801736c:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8017370:	683b      	ldr	r3, [r7, #0]
 8017372:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8017376:	441a      	add	r2, r3
 8017378:	687b      	ldr	r3, [r7, #4]
 801737a:	621a      	str	r2, [r3, #32]

	return FR_OK;
 801737c:	2300      	movs	r3, #0
}
 801737e:	4618      	mov	r0, r3
 8017380:	3718      	adds	r7, #24
 8017382:	46bd      	mov	sp, r7
 8017384:	bd80      	pop	{r7, pc}

08017386 <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 8017386:	b580      	push	{r7, lr}
 8017388:	b086      	sub	sp, #24
 801738a:	af00      	add	r7, sp, #0
 801738c:	6078      	str	r0, [r7, #4]
 801738e:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 8017390:	687b      	ldr	r3, [r7, #4]
 8017392:	681b      	ldr	r3, [r3, #0]
 8017394:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 8017396:	687b      	ldr	r3, [r7, #4]
 8017398:	695b      	ldr	r3, [r3, #20]
 801739a:	3320      	adds	r3, #32
 801739c:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 801739e:	687b      	ldr	r3, [r7, #4]
 80173a0:	69db      	ldr	r3, [r3, #28]
 80173a2:	2b00      	cmp	r3, #0
 80173a4:	d003      	beq.n	80173ae <dir_next+0x28>
 80173a6:	68bb      	ldr	r3, [r7, #8]
 80173a8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80173ac:	d301      	bcc.n	80173b2 <dir_next+0x2c>
 80173ae:	2304      	movs	r3, #4
 80173b0:	e0aa      	b.n	8017508 <dir_next+0x182>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 80173b2:	68bb      	ldr	r3, [r7, #8]
 80173b4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80173b8:	2b00      	cmp	r3, #0
 80173ba:	f040 8098 	bne.w	80174ee <dir_next+0x168>
		dp->sect++;				/* Next sector */
 80173be:	687b      	ldr	r3, [r7, #4]
 80173c0:	69db      	ldr	r3, [r3, #28]
 80173c2:	1c5a      	adds	r2, r3, #1
 80173c4:	687b      	ldr	r3, [r7, #4]
 80173c6:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 80173c8:	687b      	ldr	r3, [r7, #4]
 80173ca:	699b      	ldr	r3, [r3, #24]
 80173cc:	2b00      	cmp	r3, #0
 80173ce:	d10b      	bne.n	80173e8 <dir_next+0x62>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 80173d0:	68bb      	ldr	r3, [r7, #8]
 80173d2:	095b      	lsrs	r3, r3, #5
 80173d4:	68fa      	ldr	r2, [r7, #12]
 80173d6:	8912      	ldrh	r2, [r2, #8]
 80173d8:	4293      	cmp	r3, r2
 80173da:	f0c0 8088 	bcc.w	80174ee <dir_next+0x168>
				dp->sect = 0; return FR_NO_FILE;
 80173de:	687b      	ldr	r3, [r7, #4]
 80173e0:	2200      	movs	r2, #0
 80173e2:	61da      	str	r2, [r3, #28]
 80173e4:	2304      	movs	r3, #4
 80173e6:	e08f      	b.n	8017508 <dir_next+0x182>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 80173e8:	68bb      	ldr	r3, [r7, #8]
 80173ea:	0a5b      	lsrs	r3, r3, #9
 80173ec:	68fa      	ldr	r2, [r7, #12]
 80173ee:	8952      	ldrh	r2, [r2, #10]
 80173f0:	3a01      	subs	r2, #1
 80173f2:	4013      	ands	r3, r2
 80173f4:	2b00      	cmp	r3, #0
 80173f6:	d17a      	bne.n	80174ee <dir_next+0x168>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 80173f8:	687a      	ldr	r2, [r7, #4]
 80173fa:	687b      	ldr	r3, [r7, #4]
 80173fc:	699b      	ldr	r3, [r3, #24]
 80173fe:	4619      	mov	r1, r3
 8017400:	4610      	mov	r0, r2
 8017402:	f7ff fc88 	bl	8016d16 <get_fat>
 8017406:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 8017408:	697b      	ldr	r3, [r7, #20]
 801740a:	2b01      	cmp	r3, #1
 801740c:	d801      	bhi.n	8017412 <dir_next+0x8c>
 801740e:	2302      	movs	r3, #2
 8017410:	e07a      	b.n	8017508 <dir_next+0x182>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 8017412:	697b      	ldr	r3, [r7, #20]
 8017414:	f1b3 3fff 	cmp.w	r3, #4294967295
 8017418:	d101      	bne.n	801741e <dir_next+0x98>
 801741a:	2301      	movs	r3, #1
 801741c:	e074      	b.n	8017508 <dir_next+0x182>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 801741e:	68fb      	ldr	r3, [r7, #12]
 8017420:	695b      	ldr	r3, [r3, #20]
 8017422:	697a      	ldr	r2, [r7, #20]
 8017424:	429a      	cmp	r2, r3
 8017426:	d358      	bcc.n	80174da <dir_next+0x154>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 8017428:	683b      	ldr	r3, [r7, #0]
 801742a:	2b00      	cmp	r3, #0
 801742c:	d104      	bne.n	8017438 <dir_next+0xb2>
						dp->sect = 0; return FR_NO_FILE;
 801742e:	687b      	ldr	r3, [r7, #4]
 8017430:	2200      	movs	r2, #0
 8017432:	61da      	str	r2, [r3, #28]
 8017434:	2304      	movs	r3, #4
 8017436:	e067      	b.n	8017508 <dir_next+0x182>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 8017438:	687a      	ldr	r2, [r7, #4]
 801743a:	687b      	ldr	r3, [r7, #4]
 801743c:	699b      	ldr	r3, [r3, #24]
 801743e:	4619      	mov	r1, r3
 8017440:	4610      	mov	r0, r2
 8017442:	f7ff fe59 	bl	80170f8 <create_chain>
 8017446:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 8017448:	697b      	ldr	r3, [r7, #20]
 801744a:	2b00      	cmp	r3, #0
 801744c:	d101      	bne.n	8017452 <dir_next+0xcc>
 801744e:	2307      	movs	r3, #7
 8017450:	e05a      	b.n	8017508 <dir_next+0x182>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 8017452:	697b      	ldr	r3, [r7, #20]
 8017454:	2b01      	cmp	r3, #1
 8017456:	d101      	bne.n	801745c <dir_next+0xd6>
 8017458:	2302      	movs	r3, #2
 801745a:	e055      	b.n	8017508 <dir_next+0x182>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 801745c:	697b      	ldr	r3, [r7, #20]
 801745e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8017462:	d101      	bne.n	8017468 <dir_next+0xe2>
 8017464:	2301      	movs	r3, #1
 8017466:	e04f      	b.n	8017508 <dir_next+0x182>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 8017468:	68f8      	ldr	r0, [r7, #12]
 801746a:	f7ff fb55 	bl	8016b18 <sync_window>
 801746e:	4603      	mov	r3, r0
 8017470:	2b00      	cmp	r3, #0
 8017472:	d001      	beq.n	8017478 <dir_next+0xf2>
 8017474:	2301      	movs	r3, #1
 8017476:	e047      	b.n	8017508 <dir_next+0x182>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 8017478:	68fb      	ldr	r3, [r7, #12]
 801747a:	3330      	adds	r3, #48	; 0x30
 801747c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8017480:	2100      	movs	r1, #0
 8017482:	4618      	mov	r0, r3
 8017484:	f7ff f97f 	bl	8016786 <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8017488:	2300      	movs	r3, #0
 801748a:	613b      	str	r3, [r7, #16]
 801748c:	6979      	ldr	r1, [r7, #20]
 801748e:	68f8      	ldr	r0, [r7, #12]
 8017490:	f7ff fc22 	bl	8016cd8 <clust2sect>
 8017494:	4602      	mov	r2, r0
 8017496:	68fb      	ldr	r3, [r7, #12]
 8017498:	62da      	str	r2, [r3, #44]	; 0x2c
 801749a:	e012      	b.n	80174c2 <dir_next+0x13c>
						fs->wflag = 1;
 801749c:	68fb      	ldr	r3, [r7, #12]
 801749e:	2201      	movs	r2, #1
 80174a0:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 80174a2:	68f8      	ldr	r0, [r7, #12]
 80174a4:	f7ff fb38 	bl	8016b18 <sync_window>
 80174a8:	4603      	mov	r3, r0
 80174aa:	2b00      	cmp	r3, #0
 80174ac:	d001      	beq.n	80174b2 <dir_next+0x12c>
 80174ae:	2301      	movs	r3, #1
 80174b0:	e02a      	b.n	8017508 <dir_next+0x182>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 80174b2:	693b      	ldr	r3, [r7, #16]
 80174b4:	3301      	adds	r3, #1
 80174b6:	613b      	str	r3, [r7, #16]
 80174b8:	68fb      	ldr	r3, [r7, #12]
 80174ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80174bc:	1c5a      	adds	r2, r3, #1
 80174be:	68fb      	ldr	r3, [r7, #12]
 80174c0:	62da      	str	r2, [r3, #44]	; 0x2c
 80174c2:	68fb      	ldr	r3, [r7, #12]
 80174c4:	895b      	ldrh	r3, [r3, #10]
 80174c6:	461a      	mov	r2, r3
 80174c8:	693b      	ldr	r3, [r7, #16]
 80174ca:	4293      	cmp	r3, r2
 80174cc:	d3e6      	bcc.n	801749c <dir_next+0x116>
					}
					fs->winsect -= n;							/* Restore window offset */
 80174ce:	68fb      	ldr	r3, [r7, #12]
 80174d0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80174d2:	693b      	ldr	r3, [r7, #16]
 80174d4:	1ad2      	subs	r2, r2, r3
 80174d6:	68fb      	ldr	r3, [r7, #12]
 80174d8:	62da      	str	r2, [r3, #44]	; 0x2c
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 80174da:	687b      	ldr	r3, [r7, #4]
 80174dc:	697a      	ldr	r2, [r7, #20]
 80174de:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 80174e0:	6979      	ldr	r1, [r7, #20]
 80174e2:	68f8      	ldr	r0, [r7, #12]
 80174e4:	f7ff fbf8 	bl	8016cd8 <clust2sect>
 80174e8:	4602      	mov	r2, r0
 80174ea:	687b      	ldr	r3, [r7, #4]
 80174ec:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 80174ee:	687b      	ldr	r3, [r7, #4]
 80174f0:	68ba      	ldr	r2, [r7, #8]
 80174f2:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 80174f4:	68fb      	ldr	r3, [r7, #12]
 80174f6:	f103 0230 	add.w	r2, r3, #48	; 0x30
 80174fa:	68bb      	ldr	r3, [r7, #8]
 80174fc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8017500:	441a      	add	r2, r3
 8017502:	687b      	ldr	r3, [r7, #4]
 8017504:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8017506:	2300      	movs	r3, #0
}
 8017508:	4618      	mov	r0, r3
 801750a:	3718      	adds	r7, #24
 801750c:	46bd      	mov	sp, r7
 801750e:	bd80      	pop	{r7, pc}

08017510 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 8017510:	b580      	push	{r7, lr}
 8017512:	b086      	sub	sp, #24
 8017514:	af00      	add	r7, sp, #0
 8017516:	6078      	str	r0, [r7, #4]
 8017518:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 801751a:	687b      	ldr	r3, [r7, #4]
 801751c:	681b      	ldr	r3, [r3, #0]
 801751e:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 8017520:	2100      	movs	r1, #0
 8017522:	6878      	ldr	r0, [r7, #4]
 8017524:	f7ff feb4 	bl	8017290 <dir_sdi>
 8017528:	4603      	mov	r3, r0
 801752a:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 801752c:	7dfb      	ldrb	r3, [r7, #23]
 801752e:	2b00      	cmp	r3, #0
 8017530:	d12b      	bne.n	801758a <dir_alloc+0x7a>
		n = 0;
 8017532:	2300      	movs	r3, #0
 8017534:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 8017536:	687b      	ldr	r3, [r7, #4]
 8017538:	69db      	ldr	r3, [r3, #28]
 801753a:	4619      	mov	r1, r3
 801753c:	68f8      	ldr	r0, [r7, #12]
 801753e:	f7ff fb2f 	bl	8016ba0 <move_window>
 8017542:	4603      	mov	r3, r0
 8017544:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8017546:	7dfb      	ldrb	r3, [r7, #23]
 8017548:	2b00      	cmp	r3, #0
 801754a:	d11d      	bne.n	8017588 <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 801754c:	687b      	ldr	r3, [r7, #4]
 801754e:	6a1b      	ldr	r3, [r3, #32]
 8017550:	781b      	ldrb	r3, [r3, #0]
 8017552:	2be5      	cmp	r3, #229	; 0xe5
 8017554:	d004      	beq.n	8017560 <dir_alloc+0x50>
 8017556:	687b      	ldr	r3, [r7, #4]
 8017558:	6a1b      	ldr	r3, [r3, #32]
 801755a:	781b      	ldrb	r3, [r3, #0]
 801755c:	2b00      	cmp	r3, #0
 801755e:	d107      	bne.n	8017570 <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 8017560:	693b      	ldr	r3, [r7, #16]
 8017562:	3301      	adds	r3, #1
 8017564:	613b      	str	r3, [r7, #16]
 8017566:	693a      	ldr	r2, [r7, #16]
 8017568:	683b      	ldr	r3, [r7, #0]
 801756a:	429a      	cmp	r2, r3
 801756c:	d102      	bne.n	8017574 <dir_alloc+0x64>
 801756e:	e00c      	b.n	801758a <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 8017570:	2300      	movs	r3, #0
 8017572:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 8017574:	2101      	movs	r1, #1
 8017576:	6878      	ldr	r0, [r7, #4]
 8017578:	f7ff ff05 	bl	8017386 <dir_next>
 801757c:	4603      	mov	r3, r0
 801757e:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 8017580:	7dfb      	ldrb	r3, [r7, #23]
 8017582:	2b00      	cmp	r3, #0
 8017584:	d0d7      	beq.n	8017536 <dir_alloc+0x26>
 8017586:	e000      	b.n	801758a <dir_alloc+0x7a>
			if (res != FR_OK) break;
 8017588:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 801758a:	7dfb      	ldrb	r3, [r7, #23]
 801758c:	2b04      	cmp	r3, #4
 801758e:	d101      	bne.n	8017594 <dir_alloc+0x84>
 8017590:	2307      	movs	r3, #7
 8017592:	75fb      	strb	r3, [r7, #23]
	return res;
 8017594:	7dfb      	ldrb	r3, [r7, #23]
}
 8017596:	4618      	mov	r0, r3
 8017598:	3718      	adds	r7, #24
 801759a:	46bd      	mov	sp, r7
 801759c:	bd80      	pop	{r7, pc}

0801759e <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 801759e:	b580      	push	{r7, lr}
 80175a0:	b084      	sub	sp, #16
 80175a2:	af00      	add	r7, sp, #0
 80175a4:	6078      	str	r0, [r7, #4]
 80175a6:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 80175a8:	683b      	ldr	r3, [r7, #0]
 80175aa:	331a      	adds	r3, #26
 80175ac:	4618      	mov	r0, r3
 80175ae:	f7ff f847 	bl	8016640 <ld_word>
 80175b2:	4603      	mov	r3, r0
 80175b4:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 80175b6:	687b      	ldr	r3, [r7, #4]
 80175b8:	781b      	ldrb	r3, [r3, #0]
 80175ba:	2b03      	cmp	r3, #3
 80175bc:	d109      	bne.n	80175d2 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 80175be:	683b      	ldr	r3, [r7, #0]
 80175c0:	3314      	adds	r3, #20
 80175c2:	4618      	mov	r0, r3
 80175c4:	f7ff f83c 	bl	8016640 <ld_word>
 80175c8:	4603      	mov	r3, r0
 80175ca:	041b      	lsls	r3, r3, #16
 80175cc:	68fa      	ldr	r2, [r7, #12]
 80175ce:	4313      	orrs	r3, r2
 80175d0:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 80175d2:	68fb      	ldr	r3, [r7, #12]
}
 80175d4:	4618      	mov	r0, r3
 80175d6:	3710      	adds	r7, #16
 80175d8:	46bd      	mov	sp, r7
 80175da:	bd80      	pop	{r7, pc}

080175dc <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 80175dc:	b580      	push	{r7, lr}
 80175de:	b084      	sub	sp, #16
 80175e0:	af00      	add	r7, sp, #0
 80175e2:	60f8      	str	r0, [r7, #12]
 80175e4:	60b9      	str	r1, [r7, #8]
 80175e6:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 80175e8:	68bb      	ldr	r3, [r7, #8]
 80175ea:	331a      	adds	r3, #26
 80175ec:	687a      	ldr	r2, [r7, #4]
 80175ee:	b292      	uxth	r2, r2
 80175f0:	4611      	mov	r1, r2
 80175f2:	4618      	mov	r0, r3
 80175f4:	f7ff f85f 	bl	80166b6 <st_word>
	if (fs->fs_type == FS_FAT32) {
 80175f8:	68fb      	ldr	r3, [r7, #12]
 80175fa:	781b      	ldrb	r3, [r3, #0]
 80175fc:	2b03      	cmp	r3, #3
 80175fe:	d109      	bne.n	8017614 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 8017600:	68bb      	ldr	r3, [r7, #8]
 8017602:	f103 0214 	add.w	r2, r3, #20
 8017606:	687b      	ldr	r3, [r7, #4]
 8017608:	0c1b      	lsrs	r3, r3, #16
 801760a:	b29b      	uxth	r3, r3
 801760c:	4619      	mov	r1, r3
 801760e:	4610      	mov	r0, r2
 8017610:	f7ff f851 	bl	80166b6 <st_word>
	}
}
 8017614:	bf00      	nop
 8017616:	3710      	adds	r7, #16
 8017618:	46bd      	mov	sp, r7
 801761a:	bd80      	pop	{r7, pc}

0801761c <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 801761c:	b580      	push	{r7, lr}
 801761e:	b086      	sub	sp, #24
 8017620:	af00      	add	r7, sp, #0
 8017622:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8017624:	687b      	ldr	r3, [r7, #4]
 8017626:	681b      	ldr	r3, [r3, #0]
 8017628:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 801762a:	2100      	movs	r1, #0
 801762c:	6878      	ldr	r0, [r7, #4]
 801762e:	f7ff fe2f 	bl	8017290 <dir_sdi>
 8017632:	4603      	mov	r3, r0
 8017634:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 8017636:	7dfb      	ldrb	r3, [r7, #23]
 8017638:	2b00      	cmp	r3, #0
 801763a:	d001      	beq.n	8017640 <dir_find+0x24>
 801763c:	7dfb      	ldrb	r3, [r7, #23]
 801763e:	e03e      	b.n	80176be <dir_find+0xa2>
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(fs, dp->sect);
 8017640:	687b      	ldr	r3, [r7, #4]
 8017642:	69db      	ldr	r3, [r3, #28]
 8017644:	4619      	mov	r1, r3
 8017646:	6938      	ldr	r0, [r7, #16]
 8017648:	f7ff faaa 	bl	8016ba0 <move_window>
 801764c:	4603      	mov	r3, r0
 801764e:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8017650:	7dfb      	ldrb	r3, [r7, #23]
 8017652:	2b00      	cmp	r3, #0
 8017654:	d12f      	bne.n	80176b6 <dir_find+0x9a>
		c = dp->dir[DIR_Name];
 8017656:	687b      	ldr	r3, [r7, #4]
 8017658:	6a1b      	ldr	r3, [r3, #32]
 801765a:	781b      	ldrb	r3, [r3, #0]
 801765c:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 801765e:	7bfb      	ldrb	r3, [r7, #15]
 8017660:	2b00      	cmp	r3, #0
 8017662:	d102      	bne.n	801766a <dir_find+0x4e>
 8017664:	2304      	movs	r3, #4
 8017666:	75fb      	strb	r3, [r7, #23]
 8017668:	e028      	b.n	80176bc <dir_find+0xa0>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 801766a:	687b      	ldr	r3, [r7, #4]
 801766c:	6a1b      	ldr	r3, [r3, #32]
 801766e:	330b      	adds	r3, #11
 8017670:	781b      	ldrb	r3, [r3, #0]
 8017672:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8017676:	b2da      	uxtb	r2, r3
 8017678:	687b      	ldr	r3, [r7, #4]
 801767a:	719a      	strb	r2, [r3, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 801767c:	687b      	ldr	r3, [r7, #4]
 801767e:	6a1b      	ldr	r3, [r3, #32]
 8017680:	330b      	adds	r3, #11
 8017682:	781b      	ldrb	r3, [r3, #0]
 8017684:	f003 0308 	and.w	r3, r3, #8
 8017688:	2b00      	cmp	r3, #0
 801768a:	d10a      	bne.n	80176a2 <dir_find+0x86>
 801768c:	687b      	ldr	r3, [r7, #4]
 801768e:	6a18      	ldr	r0, [r3, #32]
 8017690:	687b      	ldr	r3, [r7, #4]
 8017692:	3324      	adds	r3, #36	; 0x24
 8017694:	220b      	movs	r2, #11
 8017696:	4619      	mov	r1, r3
 8017698:	f7ff f88f 	bl	80167ba <mem_cmp>
 801769c:	4603      	mov	r3, r0
 801769e:	2b00      	cmp	r3, #0
 80176a0:	d00b      	beq.n	80176ba <dir_find+0x9e>
#endif
		res = dir_next(dp, 0);	/* Next entry */
 80176a2:	2100      	movs	r1, #0
 80176a4:	6878      	ldr	r0, [r7, #4]
 80176a6:	f7ff fe6e 	bl	8017386 <dir_next>
 80176aa:	4603      	mov	r3, r0
 80176ac:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 80176ae:	7dfb      	ldrb	r3, [r7, #23]
 80176b0:	2b00      	cmp	r3, #0
 80176b2:	d0c5      	beq.n	8017640 <dir_find+0x24>
 80176b4:	e002      	b.n	80176bc <dir_find+0xa0>
		if (res != FR_OK) break;
 80176b6:	bf00      	nop
 80176b8:	e000      	b.n	80176bc <dir_find+0xa0>
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 80176ba:	bf00      	nop

	return res;
 80176bc:	7dfb      	ldrb	r3, [r7, #23]
}
 80176be:	4618      	mov	r0, r3
 80176c0:	3718      	adds	r7, #24
 80176c2:	46bd      	mov	sp, r7
 80176c4:	bd80      	pop	{r7, pc}

080176c6 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 80176c6:	b580      	push	{r7, lr}
 80176c8:	b084      	sub	sp, #16
 80176ca:	af00      	add	r7, sp, #0
 80176cc:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 80176ce:	687b      	ldr	r3, [r7, #4]
 80176d0:	681b      	ldr	r3, [r3, #0]
 80176d2:	60bb      	str	r3, [r7, #8]
			} while (res == FR_OK && --nent);
		}
	}

#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 80176d4:	2101      	movs	r1, #1
 80176d6:	6878      	ldr	r0, [r7, #4]
 80176d8:	f7ff ff1a 	bl	8017510 <dir_alloc>
 80176dc:	4603      	mov	r3, r0
 80176de:	73fb      	strb	r3, [r7, #15]

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 80176e0:	7bfb      	ldrb	r3, [r7, #15]
 80176e2:	2b00      	cmp	r3, #0
 80176e4:	d11c      	bne.n	8017720 <dir_register+0x5a>
		res = move_window(fs, dp->sect);
 80176e6:	687b      	ldr	r3, [r7, #4]
 80176e8:	69db      	ldr	r3, [r3, #28]
 80176ea:	4619      	mov	r1, r3
 80176ec:	68b8      	ldr	r0, [r7, #8]
 80176ee:	f7ff fa57 	bl	8016ba0 <move_window>
 80176f2:	4603      	mov	r3, r0
 80176f4:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 80176f6:	7bfb      	ldrb	r3, [r7, #15]
 80176f8:	2b00      	cmp	r3, #0
 80176fa:	d111      	bne.n	8017720 <dir_register+0x5a>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 80176fc:	687b      	ldr	r3, [r7, #4]
 80176fe:	6a1b      	ldr	r3, [r3, #32]
 8017700:	2220      	movs	r2, #32
 8017702:	2100      	movs	r1, #0
 8017704:	4618      	mov	r0, r3
 8017706:	f7ff f83e 	bl	8016786 <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 801770a:	687b      	ldr	r3, [r7, #4]
 801770c:	6a18      	ldr	r0, [r3, #32]
 801770e:	687b      	ldr	r3, [r7, #4]
 8017710:	3324      	adds	r3, #36	; 0x24
 8017712:	220b      	movs	r2, #11
 8017714:	4619      	mov	r1, r3
 8017716:	f7ff f815 	bl	8016744 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			fs->wflag = 1;
 801771a:	68bb      	ldr	r3, [r7, #8]
 801771c:	2201      	movs	r2, #1
 801771e:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 8017720:	7bfb      	ldrb	r3, [r7, #15]
}
 8017722:	4618      	mov	r0, r3
 8017724:	3710      	adds	r7, #16
 8017726:	46bd      	mov	sp, r7
 8017728:	bd80      	pop	{r7, pc}
	...

0801772c <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 801772c:	b580      	push	{r7, lr}
 801772e:	b088      	sub	sp, #32
 8017730:	af00      	add	r7, sp, #0
 8017732:	6078      	str	r0, [r7, #4]
 8017734:	6039      	str	r1, [r7, #0]
	BYTE c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	p = *path; sfn = dp->fn;
 8017736:	683b      	ldr	r3, [r7, #0]
 8017738:	681b      	ldr	r3, [r3, #0]
 801773a:	60fb      	str	r3, [r7, #12]
 801773c:	687b      	ldr	r3, [r7, #4]
 801773e:	3324      	adds	r3, #36	; 0x24
 8017740:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 8017742:	220b      	movs	r2, #11
 8017744:	2120      	movs	r1, #32
 8017746:	68b8      	ldr	r0, [r7, #8]
 8017748:	f7ff f81d 	bl	8016786 <mem_set>
	si = i = 0; ni = 8;
 801774c:	2300      	movs	r3, #0
 801774e:	613b      	str	r3, [r7, #16]
 8017750:	693b      	ldr	r3, [r7, #16]
 8017752:	617b      	str	r3, [r7, #20]
 8017754:	2308      	movs	r3, #8
 8017756:	61bb      	str	r3, [r7, #24]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of the path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 8017758:	697b      	ldr	r3, [r7, #20]
 801775a:	1c5a      	adds	r2, r3, #1
 801775c:	617a      	str	r2, [r7, #20]
 801775e:	68fa      	ldr	r2, [r7, #12]
 8017760:	4413      	add	r3, r2
 8017762:	781b      	ldrb	r3, [r3, #0]
 8017764:	77fb      	strb	r3, [r7, #31]
		if (c <= ' ') break; 			/* Break if end of the path name */
 8017766:	7ffb      	ldrb	r3, [r7, #31]
 8017768:	2b20      	cmp	r3, #32
 801776a:	d94e      	bls.n	801780a <create_name+0xde>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 801776c:	7ffb      	ldrb	r3, [r7, #31]
 801776e:	2b2f      	cmp	r3, #47	; 0x2f
 8017770:	d006      	beq.n	8017780 <create_name+0x54>
 8017772:	7ffb      	ldrb	r3, [r7, #31]
 8017774:	2b5c      	cmp	r3, #92	; 0x5c
 8017776:	d110      	bne.n	801779a <create_name+0x6e>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 8017778:	e002      	b.n	8017780 <create_name+0x54>
 801777a:	697b      	ldr	r3, [r7, #20]
 801777c:	3301      	adds	r3, #1
 801777e:	617b      	str	r3, [r7, #20]
 8017780:	68fa      	ldr	r2, [r7, #12]
 8017782:	697b      	ldr	r3, [r7, #20]
 8017784:	4413      	add	r3, r2
 8017786:	781b      	ldrb	r3, [r3, #0]
 8017788:	2b2f      	cmp	r3, #47	; 0x2f
 801778a:	d0f6      	beq.n	801777a <create_name+0x4e>
 801778c:	68fa      	ldr	r2, [r7, #12]
 801778e:	697b      	ldr	r3, [r7, #20]
 8017790:	4413      	add	r3, r2
 8017792:	781b      	ldrb	r3, [r3, #0]
 8017794:	2b5c      	cmp	r3, #92	; 0x5c
 8017796:	d0f0      	beq.n	801777a <create_name+0x4e>
			break;
 8017798:	e038      	b.n	801780c <create_name+0xe0>
		}
		if (c == '.' || i >= ni) {		/* End of body or over size? */
 801779a:	7ffb      	ldrb	r3, [r7, #31]
 801779c:	2b2e      	cmp	r3, #46	; 0x2e
 801779e:	d003      	beq.n	80177a8 <create_name+0x7c>
 80177a0:	693a      	ldr	r2, [r7, #16]
 80177a2:	69bb      	ldr	r3, [r7, #24]
 80177a4:	429a      	cmp	r2, r3
 80177a6:	d30c      	bcc.n	80177c2 <create_name+0x96>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 80177a8:	69bb      	ldr	r3, [r7, #24]
 80177aa:	2b0b      	cmp	r3, #11
 80177ac:	d002      	beq.n	80177b4 <create_name+0x88>
 80177ae:	7ffb      	ldrb	r3, [r7, #31]
 80177b0:	2b2e      	cmp	r3, #46	; 0x2e
 80177b2:	d001      	beq.n	80177b8 <create_name+0x8c>
 80177b4:	2306      	movs	r3, #6
 80177b6:	e044      	b.n	8017842 <create_name+0x116>
			i = 8; ni = 11;				/* Goto extension */
 80177b8:	2308      	movs	r3, #8
 80177ba:	613b      	str	r3, [r7, #16]
 80177bc:	230b      	movs	r3, #11
 80177be:	61bb      	str	r3, [r7, #24]
			continue;
 80177c0:	e022      	b.n	8017808 <create_name+0xdc>
		}
		if (c >= 0x80) {				/* Extended character? */
 80177c2:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80177c6:	2b00      	cmp	r3, #0
 80177c8:	da04      	bge.n	80177d4 <create_name+0xa8>
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 80177ca:	7ffb      	ldrb	r3, [r7, #31]
 80177cc:	3b80      	subs	r3, #128	; 0x80
 80177ce:	4a1f      	ldr	r2, [pc, #124]	; (801784c <create_name+0x120>)
 80177d0:	5cd3      	ldrb	r3, [r2, r3]
 80177d2:	77fb      	strb	r3, [r7, #31]
			d = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 80177d4:	7ffb      	ldrb	r3, [r7, #31]
 80177d6:	4619      	mov	r1, r3
 80177d8:	481d      	ldr	r0, [pc, #116]	; (8017850 <create_name+0x124>)
 80177da:	f7ff f815 	bl	8016808 <chk_chr>
 80177de:	4603      	mov	r3, r0
 80177e0:	2b00      	cmp	r3, #0
 80177e2:	d001      	beq.n	80177e8 <create_name+0xbc>
 80177e4:	2306      	movs	r3, #6
 80177e6:	e02c      	b.n	8017842 <create_name+0x116>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 80177e8:	7ffb      	ldrb	r3, [r7, #31]
 80177ea:	2b60      	cmp	r3, #96	; 0x60
 80177ec:	d905      	bls.n	80177fa <create_name+0xce>
 80177ee:	7ffb      	ldrb	r3, [r7, #31]
 80177f0:	2b7a      	cmp	r3, #122	; 0x7a
 80177f2:	d802      	bhi.n	80177fa <create_name+0xce>
 80177f4:	7ffb      	ldrb	r3, [r7, #31]
 80177f6:	3b20      	subs	r3, #32
 80177f8:	77fb      	strb	r3, [r7, #31]
			sfn[i++] = c;
 80177fa:	693b      	ldr	r3, [r7, #16]
 80177fc:	1c5a      	adds	r2, r3, #1
 80177fe:	613a      	str	r2, [r7, #16]
 8017800:	68ba      	ldr	r2, [r7, #8]
 8017802:	4413      	add	r3, r2
 8017804:	7ffa      	ldrb	r2, [r7, #31]
 8017806:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 8017808:	e7a6      	b.n	8017758 <create_name+0x2c>
		if (c <= ' ') break; 			/* Break if end of the path name */
 801780a:	bf00      	nop
		}
	}
	*path = p + si;						/* Return pointer to the next segment */
 801780c:	68fa      	ldr	r2, [r7, #12]
 801780e:	697b      	ldr	r3, [r7, #20]
 8017810:	441a      	add	r2, r3
 8017812:	683b      	ldr	r3, [r7, #0]
 8017814:	601a      	str	r2, [r3, #0]
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 8017816:	693b      	ldr	r3, [r7, #16]
 8017818:	2b00      	cmp	r3, #0
 801781a:	d101      	bne.n	8017820 <create_name+0xf4>
 801781c:	2306      	movs	r3, #6
 801781e:	e010      	b.n	8017842 <create_name+0x116>

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 8017820:	68bb      	ldr	r3, [r7, #8]
 8017822:	781b      	ldrb	r3, [r3, #0]
 8017824:	2be5      	cmp	r3, #229	; 0xe5
 8017826:	d102      	bne.n	801782e <create_name+0x102>
 8017828:	68bb      	ldr	r3, [r7, #8]
 801782a:	2205      	movs	r2, #5
 801782c:	701a      	strb	r2, [r3, #0]
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 801782e:	7ffb      	ldrb	r3, [r7, #31]
 8017830:	2b20      	cmp	r3, #32
 8017832:	d801      	bhi.n	8017838 <create_name+0x10c>
 8017834:	2204      	movs	r2, #4
 8017836:	e000      	b.n	801783a <create_name+0x10e>
 8017838:	2200      	movs	r2, #0
 801783a:	68bb      	ldr	r3, [r7, #8]
 801783c:	330b      	adds	r3, #11
 801783e:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 8017840:	2300      	movs	r3, #0
#endif /* _USE_LFN != 0 */
}
 8017842:	4618      	mov	r0, r3
 8017844:	3720      	adds	r7, #32
 8017846:	46bd      	mov	sp, r7
 8017848:	bd80      	pop	{r7, pc}
 801784a:	bf00      	nop
 801784c:	0801b050 	.word	0x0801b050
 8017850:	0801af74 	.word	0x0801af74

08017854 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 8017854:	b580      	push	{r7, lr}
 8017856:	b086      	sub	sp, #24
 8017858:	af00      	add	r7, sp, #0
 801785a:	6078      	str	r0, [r7, #4]
 801785c:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 801785e:	687b      	ldr	r3, [r7, #4]
 8017860:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 8017862:	693b      	ldr	r3, [r7, #16]
 8017864:	681b      	ldr	r3, [r3, #0]
 8017866:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 8017868:	e002      	b.n	8017870 <follow_path+0x1c>
 801786a:	683b      	ldr	r3, [r7, #0]
 801786c:	3301      	adds	r3, #1
 801786e:	603b      	str	r3, [r7, #0]
 8017870:	683b      	ldr	r3, [r7, #0]
 8017872:	781b      	ldrb	r3, [r3, #0]
 8017874:	2b2f      	cmp	r3, #47	; 0x2f
 8017876:	d0f8      	beq.n	801786a <follow_path+0x16>
 8017878:	683b      	ldr	r3, [r7, #0]
 801787a:	781b      	ldrb	r3, [r3, #0]
 801787c:	2b5c      	cmp	r3, #92	; 0x5c
 801787e:	d0f4      	beq.n	801786a <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 8017880:	693b      	ldr	r3, [r7, #16]
 8017882:	2200      	movs	r2, #0
 8017884:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 8017886:	683b      	ldr	r3, [r7, #0]
 8017888:	781b      	ldrb	r3, [r3, #0]
 801788a:	2b1f      	cmp	r3, #31
 801788c:	d80a      	bhi.n	80178a4 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 801788e:	687b      	ldr	r3, [r7, #4]
 8017890:	2280      	movs	r2, #128	; 0x80
 8017892:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 8017896:	2100      	movs	r1, #0
 8017898:	6878      	ldr	r0, [r7, #4]
 801789a:	f7ff fcf9 	bl	8017290 <dir_sdi>
 801789e:	4603      	mov	r3, r0
 80178a0:	75fb      	strb	r3, [r7, #23]
 80178a2:	e043      	b.n	801792c <follow_path+0xd8>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 80178a4:	463b      	mov	r3, r7
 80178a6:	4619      	mov	r1, r3
 80178a8:	6878      	ldr	r0, [r7, #4]
 80178aa:	f7ff ff3f 	bl	801772c <create_name>
 80178ae:	4603      	mov	r3, r0
 80178b0:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 80178b2:	7dfb      	ldrb	r3, [r7, #23]
 80178b4:	2b00      	cmp	r3, #0
 80178b6:	d134      	bne.n	8017922 <follow_path+0xce>
			res = dir_find(dp);				/* Find an object with the segment name */
 80178b8:	6878      	ldr	r0, [r7, #4]
 80178ba:	f7ff feaf 	bl	801761c <dir_find>
 80178be:	4603      	mov	r3, r0
 80178c0:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 80178c2:	687b      	ldr	r3, [r7, #4]
 80178c4:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 80178c8:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 80178ca:	7dfb      	ldrb	r3, [r7, #23]
 80178cc:	2b00      	cmp	r3, #0
 80178ce:	d00a      	beq.n	80178e6 <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 80178d0:	7dfb      	ldrb	r3, [r7, #23]
 80178d2:	2b04      	cmp	r3, #4
 80178d4:	d127      	bne.n	8017926 <follow_path+0xd2>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 80178d6:	7afb      	ldrb	r3, [r7, #11]
 80178d8:	f003 0304 	and.w	r3, r3, #4
 80178dc:	2b00      	cmp	r3, #0
 80178de:	d122      	bne.n	8017926 <follow_path+0xd2>
 80178e0:	2305      	movs	r3, #5
 80178e2:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 80178e4:	e01f      	b.n	8017926 <follow_path+0xd2>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 80178e6:	7afb      	ldrb	r3, [r7, #11]
 80178e8:	f003 0304 	and.w	r3, r3, #4
 80178ec:	2b00      	cmp	r3, #0
 80178ee:	d11c      	bne.n	801792a <follow_path+0xd6>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 80178f0:	693b      	ldr	r3, [r7, #16]
 80178f2:	799b      	ldrb	r3, [r3, #6]
 80178f4:	f003 0310 	and.w	r3, r3, #16
 80178f8:	2b00      	cmp	r3, #0
 80178fa:	d102      	bne.n	8017902 <follow_path+0xae>
				res = FR_NO_PATH; break;
 80178fc:	2305      	movs	r3, #5
 80178fe:	75fb      	strb	r3, [r7, #23]
 8017900:	e014      	b.n	801792c <follow_path+0xd8>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 8017902:	68fb      	ldr	r3, [r7, #12]
 8017904:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8017908:	687b      	ldr	r3, [r7, #4]
 801790a:	695b      	ldr	r3, [r3, #20]
 801790c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8017910:	4413      	add	r3, r2
 8017912:	4619      	mov	r1, r3
 8017914:	68f8      	ldr	r0, [r7, #12]
 8017916:	f7ff fe42 	bl	801759e <ld_clust>
 801791a:	4602      	mov	r2, r0
 801791c:	693b      	ldr	r3, [r7, #16]
 801791e:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8017920:	e7c0      	b.n	80178a4 <follow_path+0x50>
			if (res != FR_OK) break;
 8017922:	bf00      	nop
 8017924:	e002      	b.n	801792c <follow_path+0xd8>
				break;
 8017926:	bf00      	nop
 8017928:	e000      	b.n	801792c <follow_path+0xd8>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 801792a:	bf00      	nop
			}
		}
	}

	return res;
 801792c:	7dfb      	ldrb	r3, [r7, #23]
}
 801792e:	4618      	mov	r0, r3
 8017930:	3718      	adds	r7, #24
 8017932:	46bd      	mov	sp, r7
 8017934:	bd80      	pop	{r7, pc}

08017936 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 8017936:	b480      	push	{r7}
 8017938:	b087      	sub	sp, #28
 801793a:	af00      	add	r7, sp, #0
 801793c:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 801793e:	f04f 33ff 	mov.w	r3, #4294967295
 8017942:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 8017944:	687b      	ldr	r3, [r7, #4]
 8017946:	681b      	ldr	r3, [r3, #0]
 8017948:	2b00      	cmp	r3, #0
 801794a:	d031      	beq.n	80179b0 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 801794c:	687b      	ldr	r3, [r7, #4]
 801794e:	681b      	ldr	r3, [r3, #0]
 8017950:	617b      	str	r3, [r7, #20]
 8017952:	e002      	b.n	801795a <get_ldnumber+0x24>
 8017954:	697b      	ldr	r3, [r7, #20]
 8017956:	3301      	adds	r3, #1
 8017958:	617b      	str	r3, [r7, #20]
 801795a:	697b      	ldr	r3, [r7, #20]
 801795c:	781b      	ldrb	r3, [r3, #0]
 801795e:	2b20      	cmp	r3, #32
 8017960:	d903      	bls.n	801796a <get_ldnumber+0x34>
 8017962:	697b      	ldr	r3, [r7, #20]
 8017964:	781b      	ldrb	r3, [r3, #0]
 8017966:	2b3a      	cmp	r3, #58	; 0x3a
 8017968:	d1f4      	bne.n	8017954 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 801796a:	697b      	ldr	r3, [r7, #20]
 801796c:	781b      	ldrb	r3, [r3, #0]
 801796e:	2b3a      	cmp	r3, #58	; 0x3a
 8017970:	d11c      	bne.n	80179ac <get_ldnumber+0x76>
			tp = *path;
 8017972:	687b      	ldr	r3, [r7, #4]
 8017974:	681b      	ldr	r3, [r3, #0]
 8017976:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 8017978:	68fb      	ldr	r3, [r7, #12]
 801797a:	1c5a      	adds	r2, r3, #1
 801797c:	60fa      	str	r2, [r7, #12]
 801797e:	781b      	ldrb	r3, [r3, #0]
 8017980:	3b30      	subs	r3, #48	; 0x30
 8017982:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 8017984:	68bb      	ldr	r3, [r7, #8]
 8017986:	2b09      	cmp	r3, #9
 8017988:	d80e      	bhi.n	80179a8 <get_ldnumber+0x72>
 801798a:	68fa      	ldr	r2, [r7, #12]
 801798c:	697b      	ldr	r3, [r7, #20]
 801798e:	429a      	cmp	r2, r3
 8017990:	d10a      	bne.n	80179a8 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 8017992:	68bb      	ldr	r3, [r7, #8]
 8017994:	2b00      	cmp	r3, #0
 8017996:	d107      	bne.n	80179a8 <get_ldnumber+0x72>
					vol = (int)i;
 8017998:	68bb      	ldr	r3, [r7, #8]
 801799a:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 801799c:	697b      	ldr	r3, [r7, #20]
 801799e:	3301      	adds	r3, #1
 80179a0:	617b      	str	r3, [r7, #20]
 80179a2:	687b      	ldr	r3, [r7, #4]
 80179a4:	697a      	ldr	r2, [r7, #20]
 80179a6:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 80179a8:	693b      	ldr	r3, [r7, #16]
 80179aa:	e002      	b.n	80179b2 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 80179ac:	2300      	movs	r3, #0
 80179ae:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 80179b0:	693b      	ldr	r3, [r7, #16]
}
 80179b2:	4618      	mov	r0, r3
 80179b4:	371c      	adds	r7, #28
 80179b6:	46bd      	mov	sp, r7
 80179b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80179bc:	4770      	bx	lr
	...

080179c0 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 80179c0:	b580      	push	{r7, lr}
 80179c2:	b082      	sub	sp, #8
 80179c4:	af00      	add	r7, sp, #0
 80179c6:	6078      	str	r0, [r7, #4]
 80179c8:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 80179ca:	687b      	ldr	r3, [r7, #4]
 80179cc:	2200      	movs	r2, #0
 80179ce:	70da      	strb	r2, [r3, #3]
 80179d0:	687b      	ldr	r3, [r7, #4]
 80179d2:	f04f 32ff 	mov.w	r2, #4294967295
 80179d6:	62da      	str	r2, [r3, #44]	; 0x2c
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 80179d8:	6839      	ldr	r1, [r7, #0]
 80179da:	6878      	ldr	r0, [r7, #4]
 80179dc:	f7ff f8e0 	bl	8016ba0 <move_window>
 80179e0:	4603      	mov	r3, r0
 80179e2:	2b00      	cmp	r3, #0
 80179e4:	d001      	beq.n	80179ea <check_fs+0x2a>
 80179e6:	2304      	movs	r3, #4
 80179e8:	e038      	b.n	8017a5c <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 80179ea:	687b      	ldr	r3, [r7, #4]
 80179ec:	3330      	adds	r3, #48	; 0x30
 80179ee:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 80179f2:	4618      	mov	r0, r3
 80179f4:	f7fe fe24 	bl	8016640 <ld_word>
 80179f8:	4603      	mov	r3, r0
 80179fa:	461a      	mov	r2, r3
 80179fc:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8017a00:	429a      	cmp	r2, r3
 8017a02:	d001      	beq.n	8017a08 <check_fs+0x48>
 8017a04:	2303      	movs	r3, #3
 8017a06:	e029      	b.n	8017a5c <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 8017a08:	687b      	ldr	r3, [r7, #4]
 8017a0a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8017a0e:	2be9      	cmp	r3, #233	; 0xe9
 8017a10:	d009      	beq.n	8017a26 <check_fs+0x66>
 8017a12:	687b      	ldr	r3, [r7, #4]
 8017a14:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8017a18:	2beb      	cmp	r3, #235	; 0xeb
 8017a1a:	d11e      	bne.n	8017a5a <check_fs+0x9a>
 8017a1c:	687b      	ldr	r3, [r7, #4]
 8017a1e:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8017a22:	2b90      	cmp	r3, #144	; 0x90
 8017a24:	d119      	bne.n	8017a5a <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 8017a26:	687b      	ldr	r3, [r7, #4]
 8017a28:	3330      	adds	r3, #48	; 0x30
 8017a2a:	3336      	adds	r3, #54	; 0x36
 8017a2c:	4618      	mov	r0, r3
 8017a2e:	f7fe fe1f 	bl	8016670 <ld_dword>
 8017a32:	4603      	mov	r3, r0
 8017a34:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8017a38:	4a0a      	ldr	r2, [pc, #40]	; (8017a64 <check_fs+0xa4>)
 8017a3a:	4293      	cmp	r3, r2
 8017a3c:	d101      	bne.n	8017a42 <check_fs+0x82>
 8017a3e:	2300      	movs	r3, #0
 8017a40:	e00c      	b.n	8017a5c <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 8017a42:	687b      	ldr	r3, [r7, #4]
 8017a44:	3330      	adds	r3, #48	; 0x30
 8017a46:	3352      	adds	r3, #82	; 0x52
 8017a48:	4618      	mov	r0, r3
 8017a4a:	f7fe fe11 	bl	8016670 <ld_dword>
 8017a4e:	4602      	mov	r2, r0
 8017a50:	4b05      	ldr	r3, [pc, #20]	; (8017a68 <check_fs+0xa8>)
 8017a52:	429a      	cmp	r2, r3
 8017a54:	d101      	bne.n	8017a5a <check_fs+0x9a>
 8017a56:	2300      	movs	r3, #0
 8017a58:	e000      	b.n	8017a5c <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 8017a5a:	2302      	movs	r3, #2
}
 8017a5c:	4618      	mov	r0, r3
 8017a5e:	3708      	adds	r7, #8
 8017a60:	46bd      	mov	sp, r7
 8017a62:	bd80      	pop	{r7, pc}
 8017a64:	00544146 	.word	0x00544146
 8017a68:	33544146 	.word	0x33544146

08017a6c <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 8017a6c:	b580      	push	{r7, lr}
 8017a6e:	b096      	sub	sp, #88	; 0x58
 8017a70:	af00      	add	r7, sp, #0
 8017a72:	60f8      	str	r0, [r7, #12]
 8017a74:	60b9      	str	r1, [r7, #8]
 8017a76:	4613      	mov	r3, r2
 8017a78:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 8017a7a:	68bb      	ldr	r3, [r7, #8]
 8017a7c:	2200      	movs	r2, #0
 8017a7e:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 8017a80:	68f8      	ldr	r0, [r7, #12]
 8017a82:	f7ff ff58 	bl	8017936 <get_ldnumber>
 8017a86:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 8017a88:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8017a8a:	2b00      	cmp	r3, #0
 8017a8c:	da01      	bge.n	8017a92 <find_volume+0x26>
 8017a8e:	230b      	movs	r3, #11
 8017a90:	e22e      	b.n	8017ef0 <find_volume+0x484>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 8017a92:	4aa8      	ldr	r2, [pc, #672]	; (8017d34 <find_volume+0x2c8>)
 8017a94:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8017a96:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8017a9a:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 8017a9c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017a9e:	2b00      	cmp	r3, #0
 8017aa0:	d101      	bne.n	8017aa6 <find_volume+0x3a>
 8017aa2:	230c      	movs	r3, #12
 8017aa4:	e224      	b.n	8017ef0 <find_volume+0x484>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 8017aa6:	68bb      	ldr	r3, [r7, #8]
 8017aa8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8017aaa:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 8017aac:	79fb      	ldrb	r3, [r7, #7]
 8017aae:	f023 0301 	bic.w	r3, r3, #1
 8017ab2:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 8017ab4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017ab6:	781b      	ldrb	r3, [r3, #0]
 8017ab8:	2b00      	cmp	r3, #0
 8017aba:	d01a      	beq.n	8017af2 <find_volume+0x86>
		stat = disk_status(fs->drv);
 8017abc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017abe:	785b      	ldrb	r3, [r3, #1]
 8017ac0:	4618      	mov	r0, r3
 8017ac2:	f7fe fd1f 	bl	8016504 <disk_status>
 8017ac6:	4603      	mov	r3, r0
 8017ac8:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 8017acc:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8017ad0:	f003 0301 	and.w	r3, r3, #1
 8017ad4:	2b00      	cmp	r3, #0
 8017ad6:	d10c      	bne.n	8017af2 <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 8017ad8:	79fb      	ldrb	r3, [r7, #7]
 8017ada:	2b00      	cmp	r3, #0
 8017adc:	d007      	beq.n	8017aee <find_volume+0x82>
 8017ade:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8017ae2:	f003 0304 	and.w	r3, r3, #4
 8017ae6:	2b00      	cmp	r3, #0
 8017ae8:	d001      	beq.n	8017aee <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 8017aea:	230a      	movs	r3, #10
 8017aec:	e200      	b.n	8017ef0 <find_volume+0x484>
			}
			return FR_OK;				/* The file system object is valid */
 8017aee:	2300      	movs	r3, #0
 8017af0:	e1fe      	b.n	8017ef0 <find_volume+0x484>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 8017af2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017af4:	2200      	movs	r2, #0
 8017af6:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 8017af8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8017afa:	b2da      	uxtb	r2, r3
 8017afc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017afe:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 8017b00:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017b02:	785b      	ldrb	r3, [r3, #1]
 8017b04:	4618      	mov	r0, r3
 8017b06:	f7fe fd17 	bl	8016538 <disk_initialize>
 8017b0a:	4603      	mov	r3, r0
 8017b0c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 8017b10:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8017b14:	f003 0301 	and.w	r3, r3, #1
 8017b18:	2b00      	cmp	r3, #0
 8017b1a:	d001      	beq.n	8017b20 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 8017b1c:	2303      	movs	r3, #3
 8017b1e:	e1e7      	b.n	8017ef0 <find_volume+0x484>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 8017b20:	79fb      	ldrb	r3, [r7, #7]
 8017b22:	2b00      	cmp	r3, #0
 8017b24:	d007      	beq.n	8017b36 <find_volume+0xca>
 8017b26:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8017b2a:	f003 0304 	and.w	r3, r3, #4
 8017b2e:	2b00      	cmp	r3, #0
 8017b30:	d001      	beq.n	8017b36 <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 8017b32:	230a      	movs	r3, #10
 8017b34:	e1dc      	b.n	8017ef0 <find_volume+0x484>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 8017b36:	2300      	movs	r3, #0
 8017b38:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 8017b3a:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8017b3c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8017b3e:	f7ff ff3f 	bl	80179c0 <check_fs>
 8017b42:	4603      	mov	r3, r0
 8017b44:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 8017b48:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8017b4c:	2b02      	cmp	r3, #2
 8017b4e:	d14b      	bne.n	8017be8 <find_volume+0x17c>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8017b50:	2300      	movs	r3, #0
 8017b52:	643b      	str	r3, [r7, #64]	; 0x40
 8017b54:	e01f      	b.n	8017b96 <find_volume+0x12a>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 8017b56:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017b58:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8017b5c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8017b5e:	011b      	lsls	r3, r3, #4
 8017b60:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 8017b64:	4413      	add	r3, r2
 8017b66:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 8017b68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017b6a:	3304      	adds	r3, #4
 8017b6c:	781b      	ldrb	r3, [r3, #0]
 8017b6e:	2b00      	cmp	r3, #0
 8017b70:	d006      	beq.n	8017b80 <find_volume+0x114>
 8017b72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017b74:	3308      	adds	r3, #8
 8017b76:	4618      	mov	r0, r3
 8017b78:	f7fe fd7a 	bl	8016670 <ld_dword>
 8017b7c:	4602      	mov	r2, r0
 8017b7e:	e000      	b.n	8017b82 <find_volume+0x116>
 8017b80:	2200      	movs	r2, #0
 8017b82:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8017b84:	009b      	lsls	r3, r3, #2
 8017b86:	f107 0158 	add.w	r1, r7, #88	; 0x58
 8017b8a:	440b      	add	r3, r1
 8017b8c:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8017b90:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8017b92:	3301      	adds	r3, #1
 8017b94:	643b      	str	r3, [r7, #64]	; 0x40
 8017b96:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8017b98:	2b03      	cmp	r3, #3
 8017b9a:	d9dc      	bls.n	8017b56 <find_volume+0xea>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 8017b9c:	2300      	movs	r3, #0
 8017b9e:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 8017ba0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8017ba2:	2b00      	cmp	r3, #0
 8017ba4:	d002      	beq.n	8017bac <find_volume+0x140>
 8017ba6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8017ba8:	3b01      	subs	r3, #1
 8017baa:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 8017bac:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8017bae:	009b      	lsls	r3, r3, #2
 8017bb0:	f107 0258 	add.w	r2, r7, #88	; 0x58
 8017bb4:	4413      	add	r3, r2
 8017bb6:	f853 3c44 	ldr.w	r3, [r3, #-68]
 8017bba:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 8017bbc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8017bbe:	2b00      	cmp	r3, #0
 8017bc0:	d005      	beq.n	8017bce <find_volume+0x162>
 8017bc2:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8017bc4:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8017bc6:	f7ff fefb 	bl	80179c0 <check_fs>
 8017bca:	4603      	mov	r3, r0
 8017bcc:	e000      	b.n	8017bd0 <find_volume+0x164>
 8017bce:	2303      	movs	r3, #3
 8017bd0:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 8017bd4:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8017bd8:	2b01      	cmp	r3, #1
 8017bda:	d905      	bls.n	8017be8 <find_volume+0x17c>
 8017bdc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8017bde:	3301      	adds	r3, #1
 8017be0:	643b      	str	r3, [r7, #64]	; 0x40
 8017be2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8017be4:	2b03      	cmp	r3, #3
 8017be6:	d9e1      	bls.n	8017bac <find_volume+0x140>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 8017be8:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8017bec:	2b04      	cmp	r3, #4
 8017bee:	d101      	bne.n	8017bf4 <find_volume+0x188>
 8017bf0:	2301      	movs	r3, #1
 8017bf2:	e17d      	b.n	8017ef0 <find_volume+0x484>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 8017bf4:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8017bf8:	2b01      	cmp	r3, #1
 8017bfa:	d901      	bls.n	8017c00 <find_volume+0x194>
 8017bfc:	230d      	movs	r3, #13
 8017bfe:	e177      	b.n	8017ef0 <find_volume+0x484>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 8017c00:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017c02:	3330      	adds	r3, #48	; 0x30
 8017c04:	330b      	adds	r3, #11
 8017c06:	4618      	mov	r0, r3
 8017c08:	f7fe fd1a 	bl	8016640 <ld_word>
 8017c0c:	4603      	mov	r3, r0
 8017c0e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8017c12:	d001      	beq.n	8017c18 <find_volume+0x1ac>
 8017c14:	230d      	movs	r3, #13
 8017c16:	e16b      	b.n	8017ef0 <find_volume+0x484>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 8017c18:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017c1a:	3330      	adds	r3, #48	; 0x30
 8017c1c:	3316      	adds	r3, #22
 8017c1e:	4618      	mov	r0, r3
 8017c20:	f7fe fd0e 	bl	8016640 <ld_word>
 8017c24:	4603      	mov	r3, r0
 8017c26:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 8017c28:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8017c2a:	2b00      	cmp	r3, #0
 8017c2c:	d106      	bne.n	8017c3c <find_volume+0x1d0>
 8017c2e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017c30:	3330      	adds	r3, #48	; 0x30
 8017c32:	3324      	adds	r3, #36	; 0x24
 8017c34:	4618      	mov	r0, r3
 8017c36:	f7fe fd1b 	bl	8016670 <ld_dword>
 8017c3a:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 8017c3c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017c3e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8017c40:	619a      	str	r2, [r3, #24]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 8017c42:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017c44:	f893 2040 	ldrb.w	r2, [r3, #64]	; 0x40
 8017c48:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017c4a:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 8017c4c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017c4e:	789b      	ldrb	r3, [r3, #2]
 8017c50:	2b01      	cmp	r3, #1
 8017c52:	d005      	beq.n	8017c60 <find_volume+0x1f4>
 8017c54:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017c56:	789b      	ldrb	r3, [r3, #2]
 8017c58:	2b02      	cmp	r3, #2
 8017c5a:	d001      	beq.n	8017c60 <find_volume+0x1f4>
 8017c5c:	230d      	movs	r3, #13
 8017c5e:	e147      	b.n	8017ef0 <find_volume+0x484>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 8017c60:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017c62:	789b      	ldrb	r3, [r3, #2]
 8017c64:	461a      	mov	r2, r3
 8017c66:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8017c68:	fb02 f303 	mul.w	r3, r2, r3
 8017c6c:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 8017c6e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017c70:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8017c74:	b29a      	uxth	r2, r3
 8017c76:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017c78:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 8017c7a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017c7c:	895b      	ldrh	r3, [r3, #10]
 8017c7e:	2b00      	cmp	r3, #0
 8017c80:	d008      	beq.n	8017c94 <find_volume+0x228>
 8017c82:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017c84:	895b      	ldrh	r3, [r3, #10]
 8017c86:	461a      	mov	r2, r3
 8017c88:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017c8a:	895b      	ldrh	r3, [r3, #10]
 8017c8c:	3b01      	subs	r3, #1
 8017c8e:	4013      	ands	r3, r2
 8017c90:	2b00      	cmp	r3, #0
 8017c92:	d001      	beq.n	8017c98 <find_volume+0x22c>
 8017c94:	230d      	movs	r3, #13
 8017c96:	e12b      	b.n	8017ef0 <find_volume+0x484>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 8017c98:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017c9a:	3330      	adds	r3, #48	; 0x30
 8017c9c:	3311      	adds	r3, #17
 8017c9e:	4618      	mov	r0, r3
 8017ca0:	f7fe fcce 	bl	8016640 <ld_word>
 8017ca4:	4603      	mov	r3, r0
 8017ca6:	461a      	mov	r2, r3
 8017ca8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017caa:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 8017cac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017cae:	891b      	ldrh	r3, [r3, #8]
 8017cb0:	f003 030f 	and.w	r3, r3, #15
 8017cb4:	b29b      	uxth	r3, r3
 8017cb6:	2b00      	cmp	r3, #0
 8017cb8:	d001      	beq.n	8017cbe <find_volume+0x252>
 8017cba:	230d      	movs	r3, #13
 8017cbc:	e118      	b.n	8017ef0 <find_volume+0x484>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 8017cbe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017cc0:	3330      	adds	r3, #48	; 0x30
 8017cc2:	3313      	adds	r3, #19
 8017cc4:	4618      	mov	r0, r3
 8017cc6:	f7fe fcbb 	bl	8016640 <ld_word>
 8017cca:	4603      	mov	r3, r0
 8017ccc:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 8017cce:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8017cd0:	2b00      	cmp	r3, #0
 8017cd2:	d106      	bne.n	8017ce2 <find_volume+0x276>
 8017cd4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017cd6:	3330      	adds	r3, #48	; 0x30
 8017cd8:	3320      	adds	r3, #32
 8017cda:	4618      	mov	r0, r3
 8017cdc:	f7fe fcc8 	bl	8016670 <ld_dword>
 8017ce0:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 8017ce2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017ce4:	3330      	adds	r3, #48	; 0x30
 8017ce6:	330e      	adds	r3, #14
 8017ce8:	4618      	mov	r0, r3
 8017cea:	f7fe fca9 	bl	8016640 <ld_word>
 8017cee:	4603      	mov	r3, r0
 8017cf0:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 8017cf2:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8017cf4:	2b00      	cmp	r3, #0
 8017cf6:	d101      	bne.n	8017cfc <find_volume+0x290>
 8017cf8:	230d      	movs	r3, #13
 8017cfa:	e0f9      	b.n	8017ef0 <find_volume+0x484>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 8017cfc:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8017cfe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8017d00:	4413      	add	r3, r2
 8017d02:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8017d04:	8912      	ldrh	r2, [r2, #8]
 8017d06:	0912      	lsrs	r2, r2, #4
 8017d08:	b292      	uxth	r2, r2
 8017d0a:	4413      	add	r3, r2
 8017d0c:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 8017d0e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8017d10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017d12:	429a      	cmp	r2, r3
 8017d14:	d201      	bcs.n	8017d1a <find_volume+0x2ae>
 8017d16:	230d      	movs	r3, #13
 8017d18:	e0ea      	b.n	8017ef0 <find_volume+0x484>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 8017d1a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8017d1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017d1e:	1ad3      	subs	r3, r2, r3
 8017d20:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8017d22:	8952      	ldrh	r2, [r2, #10]
 8017d24:	fbb3 f3f2 	udiv	r3, r3, r2
 8017d28:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 8017d2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017d2c:	2b00      	cmp	r3, #0
 8017d2e:	d103      	bne.n	8017d38 <find_volume+0x2cc>
 8017d30:	230d      	movs	r3, #13
 8017d32:	e0dd      	b.n	8017ef0 <find_volume+0x484>
 8017d34:	24000b5c 	.word	0x24000b5c
		fmt = FS_FAT32;
 8017d38:	2303      	movs	r3, #3
 8017d3a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 8017d3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017d40:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 8017d44:	4293      	cmp	r3, r2
 8017d46:	d802      	bhi.n	8017d4e <find_volume+0x2e2>
 8017d48:	2302      	movs	r3, #2
 8017d4a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 8017d4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017d50:	f640 72f5 	movw	r2, #4085	; 0xff5
 8017d54:	4293      	cmp	r3, r2
 8017d56:	d802      	bhi.n	8017d5e <find_volume+0x2f2>
 8017d58:	2301      	movs	r3, #1
 8017d5a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 8017d5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017d60:	1c9a      	adds	r2, r3, #2
 8017d62:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017d64:	615a      	str	r2, [r3, #20]
		fs->volbase = bsect;							/* Volume start sector */
 8017d66:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017d68:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8017d6a:	61da      	str	r2, [r3, #28]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 8017d6c:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8017d6e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8017d70:	441a      	add	r2, r3
 8017d72:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017d74:	621a      	str	r2, [r3, #32]
		fs->database = bsect + sysect;					/* Data start sector */
 8017d76:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8017d78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017d7a:	441a      	add	r2, r3
 8017d7c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017d7e:	629a      	str	r2, [r3, #40]	; 0x28
		if (fmt == FS_FAT32) {
 8017d80:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8017d84:	2b03      	cmp	r3, #3
 8017d86:	d11e      	bne.n	8017dc6 <find_volume+0x35a>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 8017d88:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017d8a:	3330      	adds	r3, #48	; 0x30
 8017d8c:	332a      	adds	r3, #42	; 0x2a
 8017d8e:	4618      	mov	r0, r3
 8017d90:	f7fe fc56 	bl	8016640 <ld_word>
 8017d94:	4603      	mov	r3, r0
 8017d96:	2b00      	cmp	r3, #0
 8017d98:	d001      	beq.n	8017d9e <find_volume+0x332>
 8017d9a:	230d      	movs	r3, #13
 8017d9c:	e0a8      	b.n	8017ef0 <find_volume+0x484>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 8017d9e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017da0:	891b      	ldrh	r3, [r3, #8]
 8017da2:	2b00      	cmp	r3, #0
 8017da4:	d001      	beq.n	8017daa <find_volume+0x33e>
 8017da6:	230d      	movs	r3, #13
 8017da8:	e0a2      	b.n	8017ef0 <find_volume+0x484>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 8017daa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017dac:	3330      	adds	r3, #48	; 0x30
 8017dae:	332c      	adds	r3, #44	; 0x2c
 8017db0:	4618      	mov	r0, r3
 8017db2:	f7fe fc5d 	bl	8016670 <ld_dword>
 8017db6:	4602      	mov	r2, r0
 8017db8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017dba:	625a      	str	r2, [r3, #36]	; 0x24
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 8017dbc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017dbe:	695b      	ldr	r3, [r3, #20]
 8017dc0:	009b      	lsls	r3, r3, #2
 8017dc2:	647b      	str	r3, [r7, #68]	; 0x44
 8017dc4:	e01f      	b.n	8017e06 <find_volume+0x39a>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 8017dc6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017dc8:	891b      	ldrh	r3, [r3, #8]
 8017dca:	2b00      	cmp	r3, #0
 8017dcc:	d101      	bne.n	8017dd2 <find_volume+0x366>
 8017dce:	230d      	movs	r3, #13
 8017dd0:	e08e      	b.n	8017ef0 <find_volume+0x484>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 8017dd2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017dd4:	6a1a      	ldr	r2, [r3, #32]
 8017dd6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8017dd8:	441a      	add	r2, r3
 8017dda:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017ddc:	625a      	str	r2, [r3, #36]	; 0x24
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 8017dde:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8017de2:	2b02      	cmp	r3, #2
 8017de4:	d103      	bne.n	8017dee <find_volume+0x382>
 8017de6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017de8:	695b      	ldr	r3, [r3, #20]
 8017dea:	005b      	lsls	r3, r3, #1
 8017dec:	e00a      	b.n	8017e04 <find_volume+0x398>
 8017dee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017df0:	695a      	ldr	r2, [r3, #20]
 8017df2:	4613      	mov	r3, r2
 8017df4:	005b      	lsls	r3, r3, #1
 8017df6:	4413      	add	r3, r2
 8017df8:	085a      	lsrs	r2, r3, #1
 8017dfa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017dfc:	695b      	ldr	r3, [r3, #20]
 8017dfe:	f003 0301 	and.w	r3, r3, #1
 8017e02:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 8017e04:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 8017e06:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017e08:	699a      	ldr	r2, [r3, #24]
 8017e0a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8017e0c:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8017e10:	0a5b      	lsrs	r3, r3, #9
 8017e12:	429a      	cmp	r2, r3
 8017e14:	d201      	bcs.n	8017e1a <find_volume+0x3ae>
 8017e16:	230d      	movs	r3, #13
 8017e18:	e06a      	b.n	8017ef0 <find_volume+0x484>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 8017e1a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017e1c:	f04f 32ff 	mov.w	r2, #4294967295
 8017e20:	611a      	str	r2, [r3, #16]
 8017e22:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017e24:	691a      	ldr	r2, [r3, #16]
 8017e26:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017e28:	60da      	str	r2, [r3, #12]
		fs->fsi_flag = 0x80;
 8017e2a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017e2c:	2280      	movs	r2, #128	; 0x80
 8017e2e:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 8017e30:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8017e34:	2b03      	cmp	r3, #3
 8017e36:	d149      	bne.n	8017ecc <find_volume+0x460>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 8017e38:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017e3a:	3330      	adds	r3, #48	; 0x30
 8017e3c:	3330      	adds	r3, #48	; 0x30
 8017e3e:	4618      	mov	r0, r3
 8017e40:	f7fe fbfe 	bl	8016640 <ld_word>
 8017e44:	4603      	mov	r3, r0
 8017e46:	2b01      	cmp	r3, #1
 8017e48:	d140      	bne.n	8017ecc <find_volume+0x460>
			&& move_window(fs, bsect + 1) == FR_OK)
 8017e4a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8017e4c:	3301      	adds	r3, #1
 8017e4e:	4619      	mov	r1, r3
 8017e50:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8017e52:	f7fe fea5 	bl	8016ba0 <move_window>
 8017e56:	4603      	mov	r3, r0
 8017e58:	2b00      	cmp	r3, #0
 8017e5a:	d137      	bne.n	8017ecc <find_volume+0x460>
		{
			fs->fsi_flag = 0;
 8017e5c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017e5e:	2200      	movs	r2, #0
 8017e60:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 8017e62:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017e64:	3330      	adds	r3, #48	; 0x30
 8017e66:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8017e6a:	4618      	mov	r0, r3
 8017e6c:	f7fe fbe8 	bl	8016640 <ld_word>
 8017e70:	4603      	mov	r3, r0
 8017e72:	461a      	mov	r2, r3
 8017e74:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8017e78:	429a      	cmp	r2, r3
 8017e7a:	d127      	bne.n	8017ecc <find_volume+0x460>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 8017e7c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017e7e:	3330      	adds	r3, #48	; 0x30
 8017e80:	4618      	mov	r0, r3
 8017e82:	f7fe fbf5 	bl	8016670 <ld_dword>
 8017e86:	4602      	mov	r2, r0
 8017e88:	4b1b      	ldr	r3, [pc, #108]	; (8017ef8 <find_volume+0x48c>)
 8017e8a:	429a      	cmp	r2, r3
 8017e8c:	d11e      	bne.n	8017ecc <find_volume+0x460>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 8017e8e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017e90:	3330      	adds	r3, #48	; 0x30
 8017e92:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8017e96:	4618      	mov	r0, r3
 8017e98:	f7fe fbea 	bl	8016670 <ld_dword>
 8017e9c:	4602      	mov	r2, r0
 8017e9e:	4b17      	ldr	r3, [pc, #92]	; (8017efc <find_volume+0x490>)
 8017ea0:	429a      	cmp	r2, r3
 8017ea2:	d113      	bne.n	8017ecc <find_volume+0x460>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 8017ea4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017ea6:	3330      	adds	r3, #48	; 0x30
 8017ea8:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 8017eac:	4618      	mov	r0, r3
 8017eae:	f7fe fbdf 	bl	8016670 <ld_dword>
 8017eb2:	4602      	mov	r2, r0
 8017eb4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017eb6:	611a      	str	r2, [r3, #16]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 8017eb8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017eba:	3330      	adds	r3, #48	; 0x30
 8017ebc:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 8017ec0:	4618      	mov	r0, r3
 8017ec2:	f7fe fbd5 	bl	8016670 <ld_dword>
 8017ec6:	4602      	mov	r2, r0
 8017ec8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017eca:	60da      	str	r2, [r3, #12]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 8017ecc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017ece:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 8017ed2:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 8017ed4:	4b0a      	ldr	r3, [pc, #40]	; (8017f00 <find_volume+0x494>)
 8017ed6:	881b      	ldrh	r3, [r3, #0]
 8017ed8:	3301      	adds	r3, #1
 8017eda:	b29a      	uxth	r2, r3
 8017edc:	4b08      	ldr	r3, [pc, #32]	; (8017f00 <find_volume+0x494>)
 8017ede:	801a      	strh	r2, [r3, #0]
 8017ee0:	4b07      	ldr	r3, [pc, #28]	; (8017f00 <find_volume+0x494>)
 8017ee2:	881a      	ldrh	r2, [r3, #0]
 8017ee4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017ee6:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 8017ee8:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8017eea:	f7fe fdf1 	bl	8016ad0 <clear_lock>
#endif
	return FR_OK;
 8017eee:	2300      	movs	r3, #0
}
 8017ef0:	4618      	mov	r0, r3
 8017ef2:	3758      	adds	r7, #88	; 0x58
 8017ef4:	46bd      	mov	sp, r7
 8017ef6:	bd80      	pop	{r7, pc}
 8017ef8:	41615252 	.word	0x41615252
 8017efc:	61417272 	.word	0x61417272
 8017f00:	24000b60 	.word	0x24000b60

08017f04 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 8017f04:	b580      	push	{r7, lr}
 8017f06:	b084      	sub	sp, #16
 8017f08:	af00      	add	r7, sp, #0
 8017f0a:	6078      	str	r0, [r7, #4]
 8017f0c:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 8017f0e:	2309      	movs	r3, #9
 8017f10:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 8017f12:	687b      	ldr	r3, [r7, #4]
 8017f14:	2b00      	cmp	r3, #0
 8017f16:	d01c      	beq.n	8017f52 <validate+0x4e>
 8017f18:	687b      	ldr	r3, [r7, #4]
 8017f1a:	681b      	ldr	r3, [r3, #0]
 8017f1c:	2b00      	cmp	r3, #0
 8017f1e:	d018      	beq.n	8017f52 <validate+0x4e>
 8017f20:	687b      	ldr	r3, [r7, #4]
 8017f22:	681b      	ldr	r3, [r3, #0]
 8017f24:	781b      	ldrb	r3, [r3, #0]
 8017f26:	2b00      	cmp	r3, #0
 8017f28:	d013      	beq.n	8017f52 <validate+0x4e>
 8017f2a:	687b      	ldr	r3, [r7, #4]
 8017f2c:	889a      	ldrh	r2, [r3, #4]
 8017f2e:	687b      	ldr	r3, [r7, #4]
 8017f30:	681b      	ldr	r3, [r3, #0]
 8017f32:	88db      	ldrh	r3, [r3, #6]
 8017f34:	429a      	cmp	r2, r3
 8017f36:	d10c      	bne.n	8017f52 <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 8017f38:	687b      	ldr	r3, [r7, #4]
 8017f3a:	681b      	ldr	r3, [r3, #0]
 8017f3c:	785b      	ldrb	r3, [r3, #1]
 8017f3e:	4618      	mov	r0, r3
 8017f40:	f7fe fae0 	bl	8016504 <disk_status>
 8017f44:	4603      	mov	r3, r0
 8017f46:	f003 0301 	and.w	r3, r3, #1
 8017f4a:	2b00      	cmp	r3, #0
 8017f4c:	d101      	bne.n	8017f52 <validate+0x4e>
			res = FR_OK;
 8017f4e:	2300      	movs	r3, #0
 8017f50:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 8017f52:	7bfb      	ldrb	r3, [r7, #15]
 8017f54:	2b00      	cmp	r3, #0
 8017f56:	d102      	bne.n	8017f5e <validate+0x5a>
 8017f58:	687b      	ldr	r3, [r7, #4]
 8017f5a:	681b      	ldr	r3, [r3, #0]
 8017f5c:	e000      	b.n	8017f60 <validate+0x5c>
 8017f5e:	2300      	movs	r3, #0
 8017f60:	683a      	ldr	r2, [r7, #0]
 8017f62:	6013      	str	r3, [r2, #0]
	return res;
 8017f64:	7bfb      	ldrb	r3, [r7, #15]
}
 8017f66:	4618      	mov	r0, r3
 8017f68:	3710      	adds	r7, #16
 8017f6a:	46bd      	mov	sp, r7
 8017f6c:	bd80      	pop	{r7, pc}
	...

08017f70 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 8017f70:	b580      	push	{r7, lr}
 8017f72:	b088      	sub	sp, #32
 8017f74:	af00      	add	r7, sp, #0
 8017f76:	60f8      	str	r0, [r7, #12]
 8017f78:	60b9      	str	r1, [r7, #8]
 8017f7a:	4613      	mov	r3, r2
 8017f7c:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 8017f7e:	68bb      	ldr	r3, [r7, #8]
 8017f80:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 8017f82:	f107 0310 	add.w	r3, r7, #16
 8017f86:	4618      	mov	r0, r3
 8017f88:	f7ff fcd5 	bl	8017936 <get_ldnumber>
 8017f8c:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 8017f8e:	69fb      	ldr	r3, [r7, #28]
 8017f90:	2b00      	cmp	r3, #0
 8017f92:	da01      	bge.n	8017f98 <f_mount+0x28>
 8017f94:	230b      	movs	r3, #11
 8017f96:	e02b      	b.n	8017ff0 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 8017f98:	4a17      	ldr	r2, [pc, #92]	; (8017ff8 <f_mount+0x88>)
 8017f9a:	69fb      	ldr	r3, [r7, #28]
 8017f9c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8017fa0:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 8017fa2:	69bb      	ldr	r3, [r7, #24]
 8017fa4:	2b00      	cmp	r3, #0
 8017fa6:	d005      	beq.n	8017fb4 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 8017fa8:	69b8      	ldr	r0, [r7, #24]
 8017faa:	f7fe fd91 	bl	8016ad0 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 8017fae:	69bb      	ldr	r3, [r7, #24]
 8017fb0:	2200      	movs	r2, #0
 8017fb2:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 8017fb4:	68fb      	ldr	r3, [r7, #12]
 8017fb6:	2b00      	cmp	r3, #0
 8017fb8:	d002      	beq.n	8017fc0 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 8017fba:	68fb      	ldr	r3, [r7, #12]
 8017fbc:	2200      	movs	r2, #0
 8017fbe:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 8017fc0:	68fa      	ldr	r2, [r7, #12]
 8017fc2:	490d      	ldr	r1, [pc, #52]	; (8017ff8 <f_mount+0x88>)
 8017fc4:	69fb      	ldr	r3, [r7, #28]
 8017fc6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 8017fca:	68fb      	ldr	r3, [r7, #12]
 8017fcc:	2b00      	cmp	r3, #0
 8017fce:	d002      	beq.n	8017fd6 <f_mount+0x66>
 8017fd0:	79fb      	ldrb	r3, [r7, #7]
 8017fd2:	2b01      	cmp	r3, #1
 8017fd4:	d001      	beq.n	8017fda <f_mount+0x6a>
 8017fd6:	2300      	movs	r3, #0
 8017fd8:	e00a      	b.n	8017ff0 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 8017fda:	f107 010c 	add.w	r1, r7, #12
 8017fde:	f107 0308 	add.w	r3, r7, #8
 8017fe2:	2200      	movs	r2, #0
 8017fe4:	4618      	mov	r0, r3
 8017fe6:	f7ff fd41 	bl	8017a6c <find_volume>
 8017fea:	4603      	mov	r3, r0
 8017fec:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 8017fee:	7dfb      	ldrb	r3, [r7, #23]
}
 8017ff0:	4618      	mov	r0, r3
 8017ff2:	3720      	adds	r7, #32
 8017ff4:	46bd      	mov	sp, r7
 8017ff6:	bd80      	pop	{r7, pc}
 8017ff8:	24000b5c 	.word	0x24000b5c

08017ffc <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 8017ffc:	b580      	push	{r7, lr}
 8017ffe:	b098      	sub	sp, #96	; 0x60
 8018000:	af00      	add	r7, sp, #0
 8018002:	60f8      	str	r0, [r7, #12]
 8018004:	60b9      	str	r1, [r7, #8]
 8018006:	4613      	mov	r3, r2
 8018008:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 801800a:	68fb      	ldr	r3, [r7, #12]
 801800c:	2b00      	cmp	r3, #0
 801800e:	d101      	bne.n	8018014 <f_open+0x18>
 8018010:	2309      	movs	r3, #9
 8018012:	e1ad      	b.n	8018370 <f_open+0x374>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 8018014:	79fb      	ldrb	r3, [r7, #7]
 8018016:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 801801a:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 801801c:	79fa      	ldrb	r2, [r7, #7]
 801801e:	f107 0110 	add.w	r1, r7, #16
 8018022:	f107 0308 	add.w	r3, r7, #8
 8018026:	4618      	mov	r0, r3
 8018028:	f7ff fd20 	bl	8017a6c <find_volume>
 801802c:	4603      	mov	r3, r0
 801802e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	if (res == FR_OK) {
 8018032:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8018036:	2b00      	cmp	r3, #0
 8018038:	f040 8191 	bne.w	801835e <f_open+0x362>
		dj.obj.fs = fs;
 801803c:	693b      	ldr	r3, [r7, #16]
 801803e:	617b      	str	r3, [r7, #20]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 8018040:	68ba      	ldr	r2, [r7, #8]
 8018042:	f107 0314 	add.w	r3, r7, #20
 8018046:	4611      	mov	r1, r2
 8018048:	4618      	mov	r0, r3
 801804a:	f7ff fc03 	bl	8017854 <follow_path>
 801804e:	4603      	mov	r3, r0
 8018050:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 8018054:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8018058:	2b00      	cmp	r3, #0
 801805a:	d11a      	bne.n	8018092 <f_open+0x96>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 801805c:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8018060:	b25b      	sxtb	r3, r3
 8018062:	2b00      	cmp	r3, #0
 8018064:	da03      	bge.n	801806e <f_open+0x72>
				res = FR_INVALID_NAME;
 8018066:	2306      	movs	r3, #6
 8018068:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 801806c:	e011      	b.n	8018092 <f_open+0x96>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 801806e:	79fb      	ldrb	r3, [r7, #7]
 8018070:	f023 0301 	bic.w	r3, r3, #1
 8018074:	2b00      	cmp	r3, #0
 8018076:	bf14      	ite	ne
 8018078:	2301      	movne	r3, #1
 801807a:	2300      	moveq	r3, #0
 801807c:	b2db      	uxtb	r3, r3
 801807e:	461a      	mov	r2, r3
 8018080:	f107 0314 	add.w	r3, r7, #20
 8018084:	4611      	mov	r1, r2
 8018086:	4618      	mov	r0, r3
 8018088:	f7fe fbda 	bl	8016840 <chk_lock>
 801808c:	4603      	mov	r3, r0
 801808e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 8018092:	79fb      	ldrb	r3, [r7, #7]
 8018094:	f003 031c 	and.w	r3, r3, #28
 8018098:	2b00      	cmp	r3, #0
 801809a:	d07f      	beq.n	801819c <f_open+0x1a0>
			if (res != FR_OK) {					/* No file, create new */
 801809c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80180a0:	2b00      	cmp	r3, #0
 80180a2:	d017      	beq.n	80180d4 <f_open+0xd8>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 80180a4:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80180a8:	2b04      	cmp	r3, #4
 80180aa:	d10e      	bne.n	80180ca <f_open+0xce>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 80180ac:	f7fe fc24 	bl	80168f8 <enq_lock>
 80180b0:	4603      	mov	r3, r0
 80180b2:	2b00      	cmp	r3, #0
 80180b4:	d006      	beq.n	80180c4 <f_open+0xc8>
 80180b6:	f107 0314 	add.w	r3, r7, #20
 80180ba:	4618      	mov	r0, r3
 80180bc:	f7ff fb03 	bl	80176c6 <dir_register>
 80180c0:	4603      	mov	r3, r0
 80180c2:	e000      	b.n	80180c6 <f_open+0xca>
 80180c4:	2312      	movs	r3, #18
 80180c6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 80180ca:	79fb      	ldrb	r3, [r7, #7]
 80180cc:	f043 0308 	orr.w	r3, r3, #8
 80180d0:	71fb      	strb	r3, [r7, #7]
 80180d2:	e010      	b.n	80180f6 <f_open+0xfa>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 80180d4:	7ebb      	ldrb	r3, [r7, #26]
 80180d6:	f003 0311 	and.w	r3, r3, #17
 80180da:	2b00      	cmp	r3, #0
 80180dc:	d003      	beq.n	80180e6 <f_open+0xea>
					res = FR_DENIED;
 80180de:	2307      	movs	r3, #7
 80180e0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 80180e4:	e007      	b.n	80180f6 <f_open+0xfa>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 80180e6:	79fb      	ldrb	r3, [r7, #7]
 80180e8:	f003 0304 	and.w	r3, r3, #4
 80180ec:	2b00      	cmp	r3, #0
 80180ee:	d002      	beq.n	80180f6 <f_open+0xfa>
 80180f0:	2308      	movs	r3, #8
 80180f2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 80180f6:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80180fa:	2b00      	cmp	r3, #0
 80180fc:	d168      	bne.n	80181d0 <f_open+0x1d4>
 80180fe:	79fb      	ldrb	r3, [r7, #7]
 8018100:	f003 0308 	and.w	r3, r3, #8
 8018104:	2b00      	cmp	r3, #0
 8018106:	d063      	beq.n	80181d0 <f_open+0x1d4>
				dw = GET_FATTIME();
 8018108:	f7fb f8fe 	bl	8013308 <get_fattime>
 801810c:	6538      	str	r0, [r7, #80]	; 0x50
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 801810e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8018110:	330e      	adds	r3, #14
 8018112:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8018114:	4618      	mov	r0, r3
 8018116:	f7fe fae9 	bl	80166ec <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 801811a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801811c:	3316      	adds	r3, #22
 801811e:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8018120:	4618      	mov	r0, r3
 8018122:	f7fe fae3 	bl	80166ec <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 8018126:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8018128:	330b      	adds	r3, #11
 801812a:	2220      	movs	r2, #32
 801812c:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 801812e:	693b      	ldr	r3, [r7, #16]
 8018130:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8018132:	4611      	mov	r1, r2
 8018134:	4618      	mov	r0, r3
 8018136:	f7ff fa32 	bl	801759e <ld_clust>
 801813a:	64f8      	str	r0, [r7, #76]	; 0x4c
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 801813c:	693b      	ldr	r3, [r7, #16]
 801813e:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8018140:	2200      	movs	r2, #0
 8018142:	4618      	mov	r0, r3
 8018144:	f7ff fa4a 	bl	80175dc <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 8018148:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801814a:	331c      	adds	r3, #28
 801814c:	2100      	movs	r1, #0
 801814e:	4618      	mov	r0, r3
 8018150:	f7fe facc 	bl	80166ec <st_dword>
					fs->wflag = 1;
 8018154:	693b      	ldr	r3, [r7, #16]
 8018156:	2201      	movs	r2, #1
 8018158:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 801815a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801815c:	2b00      	cmp	r3, #0
 801815e:	d037      	beq.n	80181d0 <f_open+0x1d4>
						dw = fs->winsect;
 8018160:	693b      	ldr	r3, [r7, #16]
 8018162:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8018164:	653b      	str	r3, [r7, #80]	; 0x50
						res = remove_chain(&dj.obj, cl, 0);
 8018166:	f107 0314 	add.w	r3, r7, #20
 801816a:	2200      	movs	r2, #0
 801816c:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 801816e:	4618      	mov	r0, r3
 8018170:	f7fe ff5d 	bl	801702e <remove_chain>
 8018174:	4603      	mov	r3, r0
 8018176:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
						if (res == FR_OK) {
 801817a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 801817e:	2b00      	cmp	r3, #0
 8018180:	d126      	bne.n	80181d0 <f_open+0x1d4>
							res = move_window(fs, dw);
 8018182:	693b      	ldr	r3, [r7, #16]
 8018184:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8018186:	4618      	mov	r0, r3
 8018188:	f7fe fd0a 	bl	8016ba0 <move_window>
 801818c:	4603      	mov	r3, r0
 801818e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 8018192:	693b      	ldr	r3, [r7, #16]
 8018194:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8018196:	3a01      	subs	r2, #1
 8018198:	60da      	str	r2, [r3, #12]
 801819a:	e019      	b.n	80181d0 <f_open+0x1d4>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 801819c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80181a0:	2b00      	cmp	r3, #0
 80181a2:	d115      	bne.n	80181d0 <f_open+0x1d4>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 80181a4:	7ebb      	ldrb	r3, [r7, #26]
 80181a6:	f003 0310 	and.w	r3, r3, #16
 80181aa:	2b00      	cmp	r3, #0
 80181ac:	d003      	beq.n	80181b6 <f_open+0x1ba>
					res = FR_NO_FILE;
 80181ae:	2304      	movs	r3, #4
 80181b0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 80181b4:	e00c      	b.n	80181d0 <f_open+0x1d4>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 80181b6:	79fb      	ldrb	r3, [r7, #7]
 80181b8:	f003 0302 	and.w	r3, r3, #2
 80181bc:	2b00      	cmp	r3, #0
 80181be:	d007      	beq.n	80181d0 <f_open+0x1d4>
 80181c0:	7ebb      	ldrb	r3, [r7, #26]
 80181c2:	f003 0301 	and.w	r3, r3, #1
 80181c6:	2b00      	cmp	r3, #0
 80181c8:	d002      	beq.n	80181d0 <f_open+0x1d4>
						res = FR_DENIED;
 80181ca:	2307      	movs	r3, #7
 80181cc:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					}
				}
			}
		}
		if (res == FR_OK) {
 80181d0:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80181d4:	2b00      	cmp	r3, #0
 80181d6:	d128      	bne.n	801822a <f_open+0x22e>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 80181d8:	79fb      	ldrb	r3, [r7, #7]
 80181da:	f003 0308 	and.w	r3, r3, #8
 80181de:	2b00      	cmp	r3, #0
 80181e0:	d003      	beq.n	80181ea <f_open+0x1ee>
				mode |= FA_MODIFIED;
 80181e2:	79fb      	ldrb	r3, [r7, #7]
 80181e4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80181e8:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 80181ea:	693b      	ldr	r3, [r7, #16]
 80181ec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80181ee:	68fb      	ldr	r3, [r7, #12]
 80181f0:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 80181f2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80181f4:	68fb      	ldr	r3, [r7, #12]
 80181f6:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 80181f8:	79fb      	ldrb	r3, [r7, #7]
 80181fa:	f023 0301 	bic.w	r3, r3, #1
 80181fe:	2b00      	cmp	r3, #0
 8018200:	bf14      	ite	ne
 8018202:	2301      	movne	r3, #1
 8018204:	2300      	moveq	r3, #0
 8018206:	b2db      	uxtb	r3, r3
 8018208:	461a      	mov	r2, r3
 801820a:	f107 0314 	add.w	r3, r7, #20
 801820e:	4611      	mov	r1, r2
 8018210:	4618      	mov	r0, r3
 8018212:	f7fe fb93 	bl	801693c <inc_lock>
 8018216:	4602      	mov	r2, r0
 8018218:	68fb      	ldr	r3, [r7, #12]
 801821a:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 801821c:	68fb      	ldr	r3, [r7, #12]
 801821e:	691b      	ldr	r3, [r3, #16]
 8018220:	2b00      	cmp	r3, #0
 8018222:	d102      	bne.n	801822a <f_open+0x22e>
 8018224:	2302      	movs	r3, #2
 8018226:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
		}
#endif

		if (res == FR_OK) {
 801822a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 801822e:	2b00      	cmp	r3, #0
 8018230:	f040 8095 	bne.w	801835e <f_open+0x362>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 8018234:	693b      	ldr	r3, [r7, #16]
 8018236:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8018238:	4611      	mov	r1, r2
 801823a:	4618      	mov	r0, r3
 801823c:	f7ff f9af 	bl	801759e <ld_clust>
 8018240:	4602      	mov	r2, r0
 8018242:	68fb      	ldr	r3, [r7, #12]
 8018244:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 8018246:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8018248:	331c      	adds	r3, #28
 801824a:	4618      	mov	r0, r3
 801824c:	f7fe fa10 	bl	8016670 <ld_dword>
 8018250:	4602      	mov	r2, r0
 8018252:	68fb      	ldr	r3, [r7, #12]
 8018254:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 8018256:	68fb      	ldr	r3, [r7, #12]
 8018258:	2200      	movs	r2, #0
 801825a:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 801825c:	693a      	ldr	r2, [r7, #16]
 801825e:	68fb      	ldr	r3, [r7, #12]
 8018260:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 8018262:	693b      	ldr	r3, [r7, #16]
 8018264:	88da      	ldrh	r2, [r3, #6]
 8018266:	68fb      	ldr	r3, [r7, #12]
 8018268:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 801826a:	68fb      	ldr	r3, [r7, #12]
 801826c:	79fa      	ldrb	r2, [r7, #7]
 801826e:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 8018270:	68fb      	ldr	r3, [r7, #12]
 8018272:	2200      	movs	r2, #0
 8018274:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 8018276:	68fb      	ldr	r3, [r7, #12]
 8018278:	2200      	movs	r2, #0
 801827a:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 801827c:	68fb      	ldr	r3, [r7, #12]
 801827e:	2200      	movs	r2, #0
 8018280:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 8018282:	68fb      	ldr	r3, [r7, #12]
 8018284:	3330      	adds	r3, #48	; 0x30
 8018286:	f44f 7200 	mov.w	r2, #512	; 0x200
 801828a:	2100      	movs	r1, #0
 801828c:	4618      	mov	r0, r3
 801828e:	f7fe fa7a 	bl	8016786 <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 8018292:	79fb      	ldrb	r3, [r7, #7]
 8018294:	f003 0320 	and.w	r3, r3, #32
 8018298:	2b00      	cmp	r3, #0
 801829a:	d060      	beq.n	801835e <f_open+0x362>
 801829c:	68fb      	ldr	r3, [r7, #12]
 801829e:	68db      	ldr	r3, [r3, #12]
 80182a0:	2b00      	cmp	r3, #0
 80182a2:	d05c      	beq.n	801835e <f_open+0x362>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 80182a4:	68fb      	ldr	r3, [r7, #12]
 80182a6:	68da      	ldr	r2, [r3, #12]
 80182a8:	68fb      	ldr	r3, [r7, #12]
 80182aa:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 80182ac:	693b      	ldr	r3, [r7, #16]
 80182ae:	895b      	ldrh	r3, [r3, #10]
 80182b0:	025b      	lsls	r3, r3, #9
 80182b2:	64bb      	str	r3, [r7, #72]	; 0x48
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 80182b4:	68fb      	ldr	r3, [r7, #12]
 80182b6:	689b      	ldr	r3, [r3, #8]
 80182b8:	65bb      	str	r3, [r7, #88]	; 0x58
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 80182ba:	68fb      	ldr	r3, [r7, #12]
 80182bc:	68db      	ldr	r3, [r3, #12]
 80182be:	657b      	str	r3, [r7, #84]	; 0x54
 80182c0:	e016      	b.n	80182f0 <f_open+0x2f4>
					clst = get_fat(&fp->obj, clst);
 80182c2:	68fb      	ldr	r3, [r7, #12]
 80182c4:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80182c6:	4618      	mov	r0, r3
 80182c8:	f7fe fd25 	bl	8016d16 <get_fat>
 80182cc:	65b8      	str	r0, [r7, #88]	; 0x58
					if (clst <= 1) res = FR_INT_ERR;
 80182ce:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80182d0:	2b01      	cmp	r3, #1
 80182d2:	d802      	bhi.n	80182da <f_open+0x2de>
 80182d4:	2302      	movs	r3, #2
 80182d6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 80182da:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80182dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80182e0:	d102      	bne.n	80182e8 <f_open+0x2ec>
 80182e2:	2301      	movs	r3, #1
 80182e4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 80182e8:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80182ea:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80182ec:	1ad3      	subs	r3, r2, r3
 80182ee:	657b      	str	r3, [r7, #84]	; 0x54
 80182f0:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80182f4:	2b00      	cmp	r3, #0
 80182f6:	d103      	bne.n	8018300 <f_open+0x304>
 80182f8:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80182fa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80182fc:	429a      	cmp	r2, r3
 80182fe:	d8e0      	bhi.n	80182c2 <f_open+0x2c6>
				}
				fp->clust = clst;
 8018300:	68fb      	ldr	r3, [r7, #12]
 8018302:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8018304:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 8018306:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 801830a:	2b00      	cmp	r3, #0
 801830c:	d127      	bne.n	801835e <f_open+0x362>
 801830e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8018310:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8018314:	2b00      	cmp	r3, #0
 8018316:	d022      	beq.n	801835e <f_open+0x362>
					if ((sc = clust2sect(fs, clst)) == 0) {
 8018318:	693b      	ldr	r3, [r7, #16]
 801831a:	6db9      	ldr	r1, [r7, #88]	; 0x58
 801831c:	4618      	mov	r0, r3
 801831e:	f7fe fcdb 	bl	8016cd8 <clust2sect>
 8018322:	6478      	str	r0, [r7, #68]	; 0x44
 8018324:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8018326:	2b00      	cmp	r3, #0
 8018328:	d103      	bne.n	8018332 <f_open+0x336>
						res = FR_INT_ERR;
 801832a:	2302      	movs	r3, #2
 801832c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8018330:	e015      	b.n	801835e <f_open+0x362>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 8018332:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8018334:	0a5a      	lsrs	r2, r3, #9
 8018336:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8018338:	441a      	add	r2, r3
 801833a:	68fb      	ldr	r3, [r7, #12]
 801833c:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 801833e:	693b      	ldr	r3, [r7, #16]
 8018340:	7858      	ldrb	r0, [r3, #1]
 8018342:	68fb      	ldr	r3, [r7, #12]
 8018344:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8018348:	68fb      	ldr	r3, [r7, #12]
 801834a:	6a1a      	ldr	r2, [r3, #32]
 801834c:	2301      	movs	r3, #1
 801834e:	f7fe f919 	bl	8016584 <disk_read>
 8018352:	4603      	mov	r3, r0
 8018354:	2b00      	cmp	r3, #0
 8018356:	d002      	beq.n	801835e <f_open+0x362>
 8018358:	2301      	movs	r3, #1
 801835a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 801835e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8018362:	2b00      	cmp	r3, #0
 8018364:	d002      	beq.n	801836c <f_open+0x370>
 8018366:	68fb      	ldr	r3, [r7, #12]
 8018368:	2200      	movs	r2, #0
 801836a:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 801836c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
}
 8018370:	4618      	mov	r0, r3
 8018372:	3760      	adds	r7, #96	; 0x60
 8018374:	46bd      	mov	sp, r7
 8018376:	bd80      	pop	{r7, pc}

08018378 <f_read>:
	FIL* fp, 	/* Pointer to the file object */
	void* buff,	/* Pointer to data buffer */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Pointer to number of bytes read */
)
{
 8018378:	b580      	push	{r7, lr}
 801837a:	b08e      	sub	sp, #56	; 0x38
 801837c:	af00      	add	r7, sp, #0
 801837e:	60f8      	str	r0, [r7, #12]
 8018380:	60b9      	str	r1, [r7, #8]
 8018382:	607a      	str	r2, [r7, #4]
 8018384:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;
 8018386:	68bb      	ldr	r3, [r7, #8]
 8018388:	627b      	str	r3, [r7, #36]	; 0x24


	*br = 0;	/* Clear read byte counter */
 801838a:	683b      	ldr	r3, [r7, #0]
 801838c:	2200      	movs	r2, #0
 801838e:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
 8018390:	68fb      	ldr	r3, [r7, #12]
 8018392:	f107 0214 	add.w	r2, r7, #20
 8018396:	4611      	mov	r1, r2
 8018398:	4618      	mov	r0, r3
 801839a:	f7ff fdb3 	bl	8017f04 <validate>
 801839e:	4603      	mov	r3, r0
 80183a0:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 80183a4:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80183a8:	2b00      	cmp	r3, #0
 80183aa:	d107      	bne.n	80183bc <f_read+0x44>
 80183ac:	68fb      	ldr	r3, [r7, #12]
 80183ae:	7d5b      	ldrb	r3, [r3, #21]
 80183b0:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 80183b4:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80183b8:	2b00      	cmp	r3, #0
 80183ba:	d002      	beq.n	80183c2 <f_read+0x4a>
 80183bc:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80183c0:	e115      	b.n	80185ee <f_read+0x276>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 80183c2:	68fb      	ldr	r3, [r7, #12]
 80183c4:	7d1b      	ldrb	r3, [r3, #20]
 80183c6:	f003 0301 	and.w	r3, r3, #1
 80183ca:	2b00      	cmp	r3, #0
 80183cc:	d101      	bne.n	80183d2 <f_read+0x5a>
 80183ce:	2307      	movs	r3, #7
 80183d0:	e10d      	b.n	80185ee <f_read+0x276>
	remain = fp->obj.objsize - fp->fptr;
 80183d2:	68fb      	ldr	r3, [r7, #12]
 80183d4:	68da      	ldr	r2, [r3, #12]
 80183d6:	68fb      	ldr	r3, [r7, #12]
 80183d8:	699b      	ldr	r3, [r3, #24]
 80183da:	1ad3      	subs	r3, r2, r3
 80183dc:	623b      	str	r3, [r7, #32]
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 80183de:	687a      	ldr	r2, [r7, #4]
 80183e0:	6a3b      	ldr	r3, [r7, #32]
 80183e2:	429a      	cmp	r2, r3
 80183e4:	f240 80fe 	bls.w	80185e4 <f_read+0x26c>
 80183e8:	6a3b      	ldr	r3, [r7, #32]
 80183ea:	607b      	str	r3, [r7, #4]

	for ( ;  btr;								/* Repeat until all data read */
 80183ec:	e0fa      	b.n	80185e4 <f_read+0x26c>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 80183ee:	68fb      	ldr	r3, [r7, #12]
 80183f0:	699b      	ldr	r3, [r3, #24]
 80183f2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80183f6:	2b00      	cmp	r3, #0
 80183f8:	f040 80c6 	bne.w	8018588 <f_read+0x210>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
 80183fc:	68fb      	ldr	r3, [r7, #12]
 80183fe:	699b      	ldr	r3, [r3, #24]
 8018400:	0a5b      	lsrs	r3, r3, #9
 8018402:	697a      	ldr	r2, [r7, #20]
 8018404:	8952      	ldrh	r2, [r2, #10]
 8018406:	3a01      	subs	r2, #1
 8018408:	4013      	ands	r3, r2
 801840a:	61fb      	str	r3, [r7, #28]
			if (csect == 0) {					/* On the cluster boundary? */
 801840c:	69fb      	ldr	r3, [r7, #28]
 801840e:	2b00      	cmp	r3, #0
 8018410:	d12f      	bne.n	8018472 <f_read+0xfa>
				if (fp->fptr == 0) {			/* On the top of the file? */
 8018412:	68fb      	ldr	r3, [r7, #12]
 8018414:	699b      	ldr	r3, [r3, #24]
 8018416:	2b00      	cmp	r3, #0
 8018418:	d103      	bne.n	8018422 <f_read+0xaa>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
 801841a:	68fb      	ldr	r3, [r7, #12]
 801841c:	689b      	ldr	r3, [r3, #8]
 801841e:	633b      	str	r3, [r7, #48]	; 0x30
 8018420:	e013      	b.n	801844a <f_read+0xd2>
				} else {						/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 8018422:	68fb      	ldr	r3, [r7, #12]
 8018424:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8018426:	2b00      	cmp	r3, #0
 8018428:	d007      	beq.n	801843a <f_read+0xc2>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 801842a:	68fb      	ldr	r3, [r7, #12]
 801842c:	699b      	ldr	r3, [r3, #24]
 801842e:	4619      	mov	r1, r3
 8018430:	68f8      	ldr	r0, [r7, #12]
 8018432:	f7fe fef9 	bl	8017228 <clmt_clust>
 8018436:	6338      	str	r0, [r7, #48]	; 0x30
 8018438:	e007      	b.n	801844a <f_read+0xd2>
					} else
#endif
					{
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 801843a:	68fa      	ldr	r2, [r7, #12]
 801843c:	68fb      	ldr	r3, [r7, #12]
 801843e:	69db      	ldr	r3, [r3, #28]
 8018440:	4619      	mov	r1, r3
 8018442:	4610      	mov	r0, r2
 8018444:	f7fe fc67 	bl	8016d16 <get_fat>
 8018448:	6338      	str	r0, [r7, #48]	; 0x30
					}
				}
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 801844a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801844c:	2b01      	cmp	r3, #1
 801844e:	d804      	bhi.n	801845a <f_read+0xe2>
 8018450:	68fb      	ldr	r3, [r7, #12]
 8018452:	2202      	movs	r2, #2
 8018454:	755a      	strb	r2, [r3, #21]
 8018456:	2302      	movs	r3, #2
 8018458:	e0c9      	b.n	80185ee <f_read+0x276>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 801845a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801845c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8018460:	d104      	bne.n	801846c <f_read+0xf4>
 8018462:	68fb      	ldr	r3, [r7, #12]
 8018464:	2201      	movs	r2, #1
 8018466:	755a      	strb	r2, [r3, #21]
 8018468:	2301      	movs	r3, #1
 801846a:	e0c0      	b.n	80185ee <f_read+0x276>
				fp->clust = clst;				/* Update current cluster */
 801846c:	68fb      	ldr	r3, [r7, #12]
 801846e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8018470:	61da      	str	r2, [r3, #28]
			}
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 8018472:	697a      	ldr	r2, [r7, #20]
 8018474:	68fb      	ldr	r3, [r7, #12]
 8018476:	69db      	ldr	r3, [r3, #28]
 8018478:	4619      	mov	r1, r3
 801847a:	4610      	mov	r0, r2
 801847c:	f7fe fc2c 	bl	8016cd8 <clust2sect>
 8018480:	61b8      	str	r0, [r7, #24]
			if (!sect) ABORT(fs, FR_INT_ERR);
 8018482:	69bb      	ldr	r3, [r7, #24]
 8018484:	2b00      	cmp	r3, #0
 8018486:	d104      	bne.n	8018492 <f_read+0x11a>
 8018488:	68fb      	ldr	r3, [r7, #12]
 801848a:	2202      	movs	r2, #2
 801848c:	755a      	strb	r2, [r3, #21]
 801848e:	2302      	movs	r3, #2
 8018490:	e0ad      	b.n	80185ee <f_read+0x276>
			sect += csect;
 8018492:	69ba      	ldr	r2, [r7, #24]
 8018494:	69fb      	ldr	r3, [r7, #28]
 8018496:	4413      	add	r3, r2
 8018498:	61bb      	str	r3, [r7, #24]
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
 801849a:	687b      	ldr	r3, [r7, #4]
 801849c:	0a5b      	lsrs	r3, r3, #9
 801849e:	62bb      	str	r3, [r7, #40]	; 0x28
			if (cc) {							/* Read maximum contiguous sectors directly */
 80184a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80184a2:	2b00      	cmp	r3, #0
 80184a4:	d039      	beq.n	801851a <f_read+0x1a2>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 80184a6:	69fa      	ldr	r2, [r7, #28]
 80184a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80184aa:	4413      	add	r3, r2
 80184ac:	697a      	ldr	r2, [r7, #20]
 80184ae:	8952      	ldrh	r2, [r2, #10]
 80184b0:	4293      	cmp	r3, r2
 80184b2:	d905      	bls.n	80184c0 <f_read+0x148>
					cc = fs->csize - csect;
 80184b4:	697b      	ldr	r3, [r7, #20]
 80184b6:	895b      	ldrh	r3, [r3, #10]
 80184b8:	461a      	mov	r2, r3
 80184ba:	69fb      	ldr	r3, [r7, #28]
 80184bc:	1ad3      	subs	r3, r2, r3
 80184be:	62bb      	str	r3, [r7, #40]	; 0x28
				}
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 80184c0:	697b      	ldr	r3, [r7, #20]
 80184c2:	7858      	ldrb	r0, [r3, #1]
 80184c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80184c6:	69ba      	ldr	r2, [r7, #24]
 80184c8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80184ca:	f7fe f85b 	bl	8016584 <disk_read>
 80184ce:	4603      	mov	r3, r0
 80184d0:	2b00      	cmp	r3, #0
 80184d2:	d004      	beq.n	80184de <f_read+0x166>
 80184d4:	68fb      	ldr	r3, [r7, #12]
 80184d6:	2201      	movs	r2, #1
 80184d8:	755a      	strb	r2, [r3, #21]
 80184da:	2301      	movs	r3, #1
 80184dc:	e087      	b.n	80185ee <f_read+0x276>
#if _FS_TINY
				if (fs->wflag && fs->winsect - sect < cc) {
					mem_cpy(rbuff + ((fs->winsect - sect) * SS(fs)), fs->win, SS(fs));
				}
#else
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 80184de:	68fb      	ldr	r3, [r7, #12]
 80184e0:	7d1b      	ldrb	r3, [r3, #20]
 80184e2:	b25b      	sxtb	r3, r3
 80184e4:	2b00      	cmp	r3, #0
 80184e6:	da14      	bge.n	8018512 <f_read+0x19a>
 80184e8:	68fb      	ldr	r3, [r7, #12]
 80184ea:	6a1a      	ldr	r2, [r3, #32]
 80184ec:	69bb      	ldr	r3, [r7, #24]
 80184ee:	1ad3      	subs	r3, r2, r3
 80184f0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80184f2:	429a      	cmp	r2, r3
 80184f4:	d90d      	bls.n	8018512 <f_read+0x19a>
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
 80184f6:	68fb      	ldr	r3, [r7, #12]
 80184f8:	6a1a      	ldr	r2, [r3, #32]
 80184fa:	69bb      	ldr	r3, [r7, #24]
 80184fc:	1ad3      	subs	r3, r2, r3
 80184fe:	025b      	lsls	r3, r3, #9
 8018500:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8018502:	18d0      	adds	r0, r2, r3
 8018504:	68fb      	ldr	r3, [r7, #12]
 8018506:	3330      	adds	r3, #48	; 0x30
 8018508:	f44f 7200 	mov.w	r2, #512	; 0x200
 801850c:	4619      	mov	r1, r3
 801850e:	f7fe f919 	bl	8016744 <mem_cpy>
				}
#endif
#endif
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
 8018512:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018514:	025b      	lsls	r3, r3, #9
 8018516:	62fb      	str	r3, [r7, #44]	; 0x2c
				continue;
 8018518:	e050      	b.n	80185bc <f_read+0x244>
			}
#if !_FS_TINY
			if (fp->sect != sect) {			/* Load data sector if not in cache */
 801851a:	68fb      	ldr	r3, [r7, #12]
 801851c:	6a1b      	ldr	r3, [r3, #32]
 801851e:	69ba      	ldr	r2, [r7, #24]
 8018520:	429a      	cmp	r2, r3
 8018522:	d02e      	beq.n	8018582 <f_read+0x20a>
#if !_FS_READONLY
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 8018524:	68fb      	ldr	r3, [r7, #12]
 8018526:	7d1b      	ldrb	r3, [r3, #20]
 8018528:	b25b      	sxtb	r3, r3
 801852a:	2b00      	cmp	r3, #0
 801852c:	da18      	bge.n	8018560 <f_read+0x1e8>
					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 801852e:	697b      	ldr	r3, [r7, #20]
 8018530:	7858      	ldrb	r0, [r3, #1]
 8018532:	68fb      	ldr	r3, [r7, #12]
 8018534:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8018538:	68fb      	ldr	r3, [r7, #12]
 801853a:	6a1a      	ldr	r2, [r3, #32]
 801853c:	2301      	movs	r3, #1
 801853e:	f7fe f841 	bl	80165c4 <disk_write>
 8018542:	4603      	mov	r3, r0
 8018544:	2b00      	cmp	r3, #0
 8018546:	d004      	beq.n	8018552 <f_read+0x1da>
 8018548:	68fb      	ldr	r3, [r7, #12]
 801854a:	2201      	movs	r2, #1
 801854c:	755a      	strb	r2, [r3, #21]
 801854e:	2301      	movs	r3, #1
 8018550:	e04d      	b.n	80185ee <f_read+0x276>
					fp->flag &= (BYTE)~FA_DIRTY;
 8018552:	68fb      	ldr	r3, [r7, #12]
 8018554:	7d1b      	ldrb	r3, [r3, #20]
 8018556:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801855a:	b2da      	uxtb	r2, r3
 801855c:	68fb      	ldr	r3, [r7, #12]
 801855e:	751a      	strb	r2, [r3, #20]
				}
#endif
				if (disk_read(fs->drv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 8018560:	697b      	ldr	r3, [r7, #20]
 8018562:	7858      	ldrb	r0, [r3, #1]
 8018564:	68fb      	ldr	r3, [r7, #12]
 8018566:	f103 0130 	add.w	r1, r3, #48	; 0x30
 801856a:	2301      	movs	r3, #1
 801856c:	69ba      	ldr	r2, [r7, #24]
 801856e:	f7fe f809 	bl	8016584 <disk_read>
 8018572:	4603      	mov	r3, r0
 8018574:	2b00      	cmp	r3, #0
 8018576:	d004      	beq.n	8018582 <f_read+0x20a>
 8018578:	68fb      	ldr	r3, [r7, #12]
 801857a:	2201      	movs	r2, #1
 801857c:	755a      	strb	r2, [r3, #21]
 801857e:	2301      	movs	r3, #1
 8018580:	e035      	b.n	80185ee <f_read+0x276>
			}
#endif
			fp->sect = sect;
 8018582:	68fb      	ldr	r3, [r7, #12]
 8018584:	69ba      	ldr	r2, [r7, #24]
 8018586:	621a      	str	r2, [r3, #32]
		}
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 8018588:	68fb      	ldr	r3, [r7, #12]
 801858a:	699b      	ldr	r3, [r3, #24]
 801858c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8018590:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 8018594:	62fb      	str	r3, [r7, #44]	; 0x2c
		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
 8018596:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8018598:	687b      	ldr	r3, [r7, #4]
 801859a:	429a      	cmp	r2, r3
 801859c:	d901      	bls.n	80185a2 <f_read+0x22a>
 801859e:	687b      	ldr	r3, [r7, #4]
 80185a0:	62fb      	str	r3, [r7, #44]	; 0x2c
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(rbuff, fs->win + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#else
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 80185a2:	68fb      	ldr	r3, [r7, #12]
 80185a4:	f103 0230 	add.w	r2, r3, #48	; 0x30
 80185a8:	68fb      	ldr	r3, [r7, #12]
 80185aa:	699b      	ldr	r3, [r3, #24]
 80185ac:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80185b0:	4413      	add	r3, r2
 80185b2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80185b4:	4619      	mov	r1, r3
 80185b6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80185b8:	f7fe f8c4 	bl	8016744 <mem_cpy>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 80185bc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80185be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80185c0:	4413      	add	r3, r2
 80185c2:	627b      	str	r3, [r7, #36]	; 0x24
 80185c4:	68fb      	ldr	r3, [r7, #12]
 80185c6:	699a      	ldr	r2, [r3, #24]
 80185c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80185ca:	441a      	add	r2, r3
 80185cc:	68fb      	ldr	r3, [r7, #12]
 80185ce:	619a      	str	r2, [r3, #24]
 80185d0:	683b      	ldr	r3, [r7, #0]
 80185d2:	681a      	ldr	r2, [r3, #0]
 80185d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80185d6:	441a      	add	r2, r3
 80185d8:	683b      	ldr	r3, [r7, #0]
 80185da:	601a      	str	r2, [r3, #0]
 80185dc:	687a      	ldr	r2, [r7, #4]
 80185de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80185e0:	1ad3      	subs	r3, r2, r3
 80185e2:	607b      	str	r3, [r7, #4]
	for ( ;  btr;								/* Repeat until all data read */
 80185e4:	687b      	ldr	r3, [r7, #4]
 80185e6:	2b00      	cmp	r3, #0
 80185e8:	f47f af01 	bne.w	80183ee <f_read+0x76>
#endif
	}

	LEAVE_FF(fs, FR_OK);
 80185ec:	2300      	movs	r3, #0
}
 80185ee:	4618      	mov	r0, r3
 80185f0:	3738      	adds	r7, #56	; 0x38
 80185f2:	46bd      	mov	sp, r7
 80185f4:	bd80      	pop	{r7, pc}

080185f6 <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 80185f6:	b580      	push	{r7, lr}
 80185f8:	b08c      	sub	sp, #48	; 0x30
 80185fa:	af00      	add	r7, sp, #0
 80185fc:	60f8      	str	r0, [r7, #12]
 80185fe:	60b9      	str	r1, [r7, #8]
 8018600:	607a      	str	r2, [r7, #4]
 8018602:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 8018604:	68bb      	ldr	r3, [r7, #8]
 8018606:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 8018608:	683b      	ldr	r3, [r7, #0]
 801860a:	2200      	movs	r2, #0
 801860c:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 801860e:	68fb      	ldr	r3, [r7, #12]
 8018610:	f107 0210 	add.w	r2, r7, #16
 8018614:	4611      	mov	r1, r2
 8018616:	4618      	mov	r0, r3
 8018618:	f7ff fc74 	bl	8017f04 <validate>
 801861c:	4603      	mov	r3, r0
 801861e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 8018622:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8018626:	2b00      	cmp	r3, #0
 8018628:	d107      	bne.n	801863a <f_write+0x44>
 801862a:	68fb      	ldr	r3, [r7, #12]
 801862c:	7d5b      	ldrb	r3, [r3, #21]
 801862e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8018632:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8018636:	2b00      	cmp	r3, #0
 8018638:	d002      	beq.n	8018640 <f_write+0x4a>
 801863a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 801863e:	e14b      	b.n	80188d8 <f_write+0x2e2>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 8018640:	68fb      	ldr	r3, [r7, #12]
 8018642:	7d1b      	ldrb	r3, [r3, #20]
 8018644:	f003 0302 	and.w	r3, r3, #2
 8018648:	2b00      	cmp	r3, #0
 801864a:	d101      	bne.n	8018650 <f_write+0x5a>
 801864c:	2307      	movs	r3, #7
 801864e:	e143      	b.n	80188d8 <f_write+0x2e2>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 8018650:	68fb      	ldr	r3, [r7, #12]
 8018652:	699a      	ldr	r2, [r3, #24]
 8018654:	687b      	ldr	r3, [r7, #4]
 8018656:	441a      	add	r2, r3
 8018658:	68fb      	ldr	r3, [r7, #12]
 801865a:	699b      	ldr	r3, [r3, #24]
 801865c:	429a      	cmp	r2, r3
 801865e:	f080 812d 	bcs.w	80188bc <f_write+0x2c6>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 8018662:	68fb      	ldr	r3, [r7, #12]
 8018664:	699b      	ldr	r3, [r3, #24]
 8018666:	43db      	mvns	r3, r3
 8018668:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 801866a:	e127      	b.n	80188bc <f_write+0x2c6>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 801866c:	68fb      	ldr	r3, [r7, #12]
 801866e:	699b      	ldr	r3, [r3, #24]
 8018670:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8018674:	2b00      	cmp	r3, #0
 8018676:	f040 80e3 	bne.w	8018840 <f_write+0x24a>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 801867a:	68fb      	ldr	r3, [r7, #12]
 801867c:	699b      	ldr	r3, [r3, #24]
 801867e:	0a5b      	lsrs	r3, r3, #9
 8018680:	693a      	ldr	r2, [r7, #16]
 8018682:	8952      	ldrh	r2, [r2, #10]
 8018684:	3a01      	subs	r2, #1
 8018686:	4013      	ands	r3, r2
 8018688:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 801868a:	69bb      	ldr	r3, [r7, #24]
 801868c:	2b00      	cmp	r3, #0
 801868e:	d143      	bne.n	8018718 <f_write+0x122>
				if (fp->fptr == 0) {		/* On the top of the file? */
 8018690:	68fb      	ldr	r3, [r7, #12]
 8018692:	699b      	ldr	r3, [r3, #24]
 8018694:	2b00      	cmp	r3, #0
 8018696:	d10c      	bne.n	80186b2 <f_write+0xbc>
					clst = fp->obj.sclust;	/* Follow from the origin */
 8018698:	68fb      	ldr	r3, [r7, #12]
 801869a:	689b      	ldr	r3, [r3, #8]
 801869c:	62bb      	str	r3, [r7, #40]	; 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 801869e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80186a0:	2b00      	cmp	r3, #0
 80186a2:	d11a      	bne.n	80186da <f_write+0xe4>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 80186a4:	68fb      	ldr	r3, [r7, #12]
 80186a6:	2100      	movs	r1, #0
 80186a8:	4618      	mov	r0, r3
 80186aa:	f7fe fd25 	bl	80170f8 <create_chain>
 80186ae:	62b8      	str	r0, [r7, #40]	; 0x28
 80186b0:	e013      	b.n	80186da <f_write+0xe4>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 80186b2:	68fb      	ldr	r3, [r7, #12]
 80186b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80186b6:	2b00      	cmp	r3, #0
 80186b8:	d007      	beq.n	80186ca <f_write+0xd4>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 80186ba:	68fb      	ldr	r3, [r7, #12]
 80186bc:	699b      	ldr	r3, [r3, #24]
 80186be:	4619      	mov	r1, r3
 80186c0:	68f8      	ldr	r0, [r7, #12]
 80186c2:	f7fe fdb1 	bl	8017228 <clmt_clust>
 80186c6:	62b8      	str	r0, [r7, #40]	; 0x28
 80186c8:	e007      	b.n	80186da <f_write+0xe4>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 80186ca:	68fa      	ldr	r2, [r7, #12]
 80186cc:	68fb      	ldr	r3, [r7, #12]
 80186ce:	69db      	ldr	r3, [r3, #28]
 80186d0:	4619      	mov	r1, r3
 80186d2:	4610      	mov	r0, r2
 80186d4:	f7fe fd10 	bl	80170f8 <create_chain>
 80186d8:	62b8      	str	r0, [r7, #40]	; 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 80186da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80186dc:	2b00      	cmp	r3, #0
 80186de:	f000 80f2 	beq.w	80188c6 <f_write+0x2d0>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 80186e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80186e4:	2b01      	cmp	r3, #1
 80186e6:	d104      	bne.n	80186f2 <f_write+0xfc>
 80186e8:	68fb      	ldr	r3, [r7, #12]
 80186ea:	2202      	movs	r2, #2
 80186ec:	755a      	strb	r2, [r3, #21]
 80186ee:	2302      	movs	r3, #2
 80186f0:	e0f2      	b.n	80188d8 <f_write+0x2e2>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 80186f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80186f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80186f8:	d104      	bne.n	8018704 <f_write+0x10e>
 80186fa:	68fb      	ldr	r3, [r7, #12]
 80186fc:	2201      	movs	r2, #1
 80186fe:	755a      	strb	r2, [r3, #21]
 8018700:	2301      	movs	r3, #1
 8018702:	e0e9      	b.n	80188d8 <f_write+0x2e2>
				fp->clust = clst;			/* Update current cluster */
 8018704:	68fb      	ldr	r3, [r7, #12]
 8018706:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8018708:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 801870a:	68fb      	ldr	r3, [r7, #12]
 801870c:	689b      	ldr	r3, [r3, #8]
 801870e:	2b00      	cmp	r3, #0
 8018710:	d102      	bne.n	8018718 <f_write+0x122>
 8018712:	68fb      	ldr	r3, [r7, #12]
 8018714:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8018716:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 8018718:	68fb      	ldr	r3, [r7, #12]
 801871a:	7d1b      	ldrb	r3, [r3, #20]
 801871c:	b25b      	sxtb	r3, r3
 801871e:	2b00      	cmp	r3, #0
 8018720:	da18      	bge.n	8018754 <f_write+0x15e>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8018722:	693b      	ldr	r3, [r7, #16]
 8018724:	7858      	ldrb	r0, [r3, #1]
 8018726:	68fb      	ldr	r3, [r7, #12]
 8018728:	f103 0130 	add.w	r1, r3, #48	; 0x30
 801872c:	68fb      	ldr	r3, [r7, #12]
 801872e:	6a1a      	ldr	r2, [r3, #32]
 8018730:	2301      	movs	r3, #1
 8018732:	f7fd ff47 	bl	80165c4 <disk_write>
 8018736:	4603      	mov	r3, r0
 8018738:	2b00      	cmp	r3, #0
 801873a:	d004      	beq.n	8018746 <f_write+0x150>
 801873c:	68fb      	ldr	r3, [r7, #12]
 801873e:	2201      	movs	r2, #1
 8018740:	755a      	strb	r2, [r3, #21]
 8018742:	2301      	movs	r3, #1
 8018744:	e0c8      	b.n	80188d8 <f_write+0x2e2>
				fp->flag &= (BYTE)~FA_DIRTY;
 8018746:	68fb      	ldr	r3, [r7, #12]
 8018748:	7d1b      	ldrb	r3, [r3, #20]
 801874a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801874e:	b2da      	uxtb	r2, r3
 8018750:	68fb      	ldr	r3, [r7, #12]
 8018752:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 8018754:	693a      	ldr	r2, [r7, #16]
 8018756:	68fb      	ldr	r3, [r7, #12]
 8018758:	69db      	ldr	r3, [r3, #28]
 801875a:	4619      	mov	r1, r3
 801875c:	4610      	mov	r0, r2
 801875e:	f7fe fabb 	bl	8016cd8 <clust2sect>
 8018762:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 8018764:	697b      	ldr	r3, [r7, #20]
 8018766:	2b00      	cmp	r3, #0
 8018768:	d104      	bne.n	8018774 <f_write+0x17e>
 801876a:	68fb      	ldr	r3, [r7, #12]
 801876c:	2202      	movs	r2, #2
 801876e:	755a      	strb	r2, [r3, #21]
 8018770:	2302      	movs	r3, #2
 8018772:	e0b1      	b.n	80188d8 <f_write+0x2e2>
			sect += csect;
 8018774:	697a      	ldr	r2, [r7, #20]
 8018776:	69bb      	ldr	r3, [r7, #24]
 8018778:	4413      	add	r3, r2
 801877a:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 801877c:	687b      	ldr	r3, [r7, #4]
 801877e:	0a5b      	lsrs	r3, r3, #9
 8018780:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 8018782:	6a3b      	ldr	r3, [r7, #32]
 8018784:	2b00      	cmp	r3, #0
 8018786:	d03c      	beq.n	8018802 <f_write+0x20c>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 8018788:	69ba      	ldr	r2, [r7, #24]
 801878a:	6a3b      	ldr	r3, [r7, #32]
 801878c:	4413      	add	r3, r2
 801878e:	693a      	ldr	r2, [r7, #16]
 8018790:	8952      	ldrh	r2, [r2, #10]
 8018792:	4293      	cmp	r3, r2
 8018794:	d905      	bls.n	80187a2 <f_write+0x1ac>
					cc = fs->csize - csect;
 8018796:	693b      	ldr	r3, [r7, #16]
 8018798:	895b      	ldrh	r3, [r3, #10]
 801879a:	461a      	mov	r2, r3
 801879c:	69bb      	ldr	r3, [r7, #24]
 801879e:	1ad3      	subs	r3, r2, r3
 80187a0:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 80187a2:	693b      	ldr	r3, [r7, #16]
 80187a4:	7858      	ldrb	r0, [r3, #1]
 80187a6:	6a3b      	ldr	r3, [r7, #32]
 80187a8:	697a      	ldr	r2, [r7, #20]
 80187aa:	69f9      	ldr	r1, [r7, #28]
 80187ac:	f7fd ff0a 	bl	80165c4 <disk_write>
 80187b0:	4603      	mov	r3, r0
 80187b2:	2b00      	cmp	r3, #0
 80187b4:	d004      	beq.n	80187c0 <f_write+0x1ca>
 80187b6:	68fb      	ldr	r3, [r7, #12]
 80187b8:	2201      	movs	r2, #1
 80187ba:	755a      	strb	r2, [r3, #21]
 80187bc:	2301      	movs	r3, #1
 80187be:	e08b      	b.n	80188d8 <f_write+0x2e2>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 80187c0:	68fb      	ldr	r3, [r7, #12]
 80187c2:	6a1a      	ldr	r2, [r3, #32]
 80187c4:	697b      	ldr	r3, [r7, #20]
 80187c6:	1ad3      	subs	r3, r2, r3
 80187c8:	6a3a      	ldr	r2, [r7, #32]
 80187ca:	429a      	cmp	r2, r3
 80187cc:	d915      	bls.n	80187fa <f_write+0x204>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 80187ce:	68fb      	ldr	r3, [r7, #12]
 80187d0:	f103 0030 	add.w	r0, r3, #48	; 0x30
 80187d4:	68fb      	ldr	r3, [r7, #12]
 80187d6:	6a1a      	ldr	r2, [r3, #32]
 80187d8:	697b      	ldr	r3, [r7, #20]
 80187da:	1ad3      	subs	r3, r2, r3
 80187dc:	025b      	lsls	r3, r3, #9
 80187de:	69fa      	ldr	r2, [r7, #28]
 80187e0:	4413      	add	r3, r2
 80187e2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80187e6:	4619      	mov	r1, r3
 80187e8:	f7fd ffac 	bl	8016744 <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 80187ec:	68fb      	ldr	r3, [r7, #12]
 80187ee:	7d1b      	ldrb	r3, [r3, #20]
 80187f0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80187f4:	b2da      	uxtb	r2, r3
 80187f6:	68fb      	ldr	r3, [r7, #12]
 80187f8:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 80187fa:	6a3b      	ldr	r3, [r7, #32]
 80187fc:	025b      	lsls	r3, r3, #9
 80187fe:	627b      	str	r3, [r7, #36]	; 0x24
				continue;
 8018800:	e03f      	b.n	8018882 <f_write+0x28c>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8018802:	68fb      	ldr	r3, [r7, #12]
 8018804:	6a1b      	ldr	r3, [r3, #32]
 8018806:	697a      	ldr	r2, [r7, #20]
 8018808:	429a      	cmp	r2, r3
 801880a:	d016      	beq.n	801883a <f_write+0x244>
				fp->fptr < fp->obj.objsize &&
 801880c:	68fb      	ldr	r3, [r7, #12]
 801880e:	699a      	ldr	r2, [r3, #24]
 8018810:	68fb      	ldr	r3, [r7, #12]
 8018812:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8018814:	429a      	cmp	r2, r3
 8018816:	d210      	bcs.n	801883a <f_write+0x244>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 8018818:	693b      	ldr	r3, [r7, #16]
 801881a:	7858      	ldrb	r0, [r3, #1]
 801881c:	68fb      	ldr	r3, [r7, #12]
 801881e:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8018822:	2301      	movs	r3, #1
 8018824:	697a      	ldr	r2, [r7, #20]
 8018826:	f7fd fead 	bl	8016584 <disk_read>
 801882a:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 801882c:	2b00      	cmp	r3, #0
 801882e:	d004      	beq.n	801883a <f_write+0x244>
					ABORT(fs, FR_DISK_ERR);
 8018830:	68fb      	ldr	r3, [r7, #12]
 8018832:	2201      	movs	r2, #1
 8018834:	755a      	strb	r2, [r3, #21]
 8018836:	2301      	movs	r3, #1
 8018838:	e04e      	b.n	80188d8 <f_write+0x2e2>
			}
#endif
			fp->sect = sect;
 801883a:	68fb      	ldr	r3, [r7, #12]
 801883c:	697a      	ldr	r2, [r7, #20]
 801883e:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 8018840:	68fb      	ldr	r3, [r7, #12]
 8018842:	699b      	ldr	r3, [r3, #24]
 8018844:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8018848:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 801884c:	627b      	str	r3, [r7, #36]	; 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 801884e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8018850:	687b      	ldr	r3, [r7, #4]
 8018852:	429a      	cmp	r2, r3
 8018854:	d901      	bls.n	801885a <f_write+0x264>
 8018856:	687b      	ldr	r3, [r7, #4]
 8018858:	627b      	str	r3, [r7, #36]	; 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 801885a:	68fb      	ldr	r3, [r7, #12]
 801885c:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8018860:	68fb      	ldr	r3, [r7, #12]
 8018862:	699b      	ldr	r3, [r3, #24]
 8018864:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8018868:	4413      	add	r3, r2
 801886a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801886c:	69f9      	ldr	r1, [r7, #28]
 801886e:	4618      	mov	r0, r3
 8018870:	f7fd ff68 	bl	8016744 <mem_cpy>
		fp->flag |= FA_DIRTY;
 8018874:	68fb      	ldr	r3, [r7, #12]
 8018876:	7d1b      	ldrb	r3, [r3, #20]
 8018878:	f063 037f 	orn	r3, r3, #127	; 0x7f
 801887c:	b2da      	uxtb	r2, r3
 801887e:	68fb      	ldr	r3, [r7, #12]
 8018880:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 8018882:	69fa      	ldr	r2, [r7, #28]
 8018884:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018886:	4413      	add	r3, r2
 8018888:	61fb      	str	r3, [r7, #28]
 801888a:	68fb      	ldr	r3, [r7, #12]
 801888c:	699a      	ldr	r2, [r3, #24]
 801888e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018890:	441a      	add	r2, r3
 8018892:	68fb      	ldr	r3, [r7, #12]
 8018894:	619a      	str	r2, [r3, #24]
 8018896:	68fb      	ldr	r3, [r7, #12]
 8018898:	68da      	ldr	r2, [r3, #12]
 801889a:	68fb      	ldr	r3, [r7, #12]
 801889c:	699b      	ldr	r3, [r3, #24]
 801889e:	429a      	cmp	r2, r3
 80188a0:	bf38      	it	cc
 80188a2:	461a      	movcc	r2, r3
 80188a4:	68fb      	ldr	r3, [r7, #12]
 80188a6:	60da      	str	r2, [r3, #12]
 80188a8:	683b      	ldr	r3, [r7, #0]
 80188aa:	681a      	ldr	r2, [r3, #0]
 80188ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80188ae:	441a      	add	r2, r3
 80188b0:	683b      	ldr	r3, [r7, #0]
 80188b2:	601a      	str	r2, [r3, #0]
 80188b4:	687a      	ldr	r2, [r7, #4]
 80188b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80188b8:	1ad3      	subs	r3, r2, r3
 80188ba:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 80188bc:	687b      	ldr	r3, [r7, #4]
 80188be:	2b00      	cmp	r3, #0
 80188c0:	f47f aed4 	bne.w	801866c <f_write+0x76>
 80188c4:	e000      	b.n	80188c8 <f_write+0x2d2>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 80188c6:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 80188c8:	68fb      	ldr	r3, [r7, #12]
 80188ca:	7d1b      	ldrb	r3, [r3, #20]
 80188cc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80188d0:	b2da      	uxtb	r2, r3
 80188d2:	68fb      	ldr	r3, [r7, #12]
 80188d4:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 80188d6:	2300      	movs	r3, #0
}
 80188d8:	4618      	mov	r0, r3
 80188da:	3730      	adds	r7, #48	; 0x30
 80188dc:	46bd      	mov	sp, r7
 80188de:	bd80      	pop	{r7, pc}

080188e0 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 80188e0:	b580      	push	{r7, lr}
 80188e2:	b086      	sub	sp, #24
 80188e4:	af00      	add	r7, sp, #0
 80188e6:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 80188e8:	687b      	ldr	r3, [r7, #4]
 80188ea:	f107 0208 	add.w	r2, r7, #8
 80188ee:	4611      	mov	r1, r2
 80188f0:	4618      	mov	r0, r3
 80188f2:	f7ff fb07 	bl	8017f04 <validate>
 80188f6:	4603      	mov	r3, r0
 80188f8:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 80188fa:	7dfb      	ldrb	r3, [r7, #23]
 80188fc:	2b00      	cmp	r3, #0
 80188fe:	d168      	bne.n	80189d2 <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 8018900:	687b      	ldr	r3, [r7, #4]
 8018902:	7d1b      	ldrb	r3, [r3, #20]
 8018904:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8018908:	2b00      	cmp	r3, #0
 801890a:	d062      	beq.n	80189d2 <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 801890c:	687b      	ldr	r3, [r7, #4]
 801890e:	7d1b      	ldrb	r3, [r3, #20]
 8018910:	b25b      	sxtb	r3, r3
 8018912:	2b00      	cmp	r3, #0
 8018914:	da15      	bge.n	8018942 <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 8018916:	68bb      	ldr	r3, [r7, #8]
 8018918:	7858      	ldrb	r0, [r3, #1]
 801891a:	687b      	ldr	r3, [r7, #4]
 801891c:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8018920:	687b      	ldr	r3, [r7, #4]
 8018922:	6a1a      	ldr	r2, [r3, #32]
 8018924:	2301      	movs	r3, #1
 8018926:	f7fd fe4d 	bl	80165c4 <disk_write>
 801892a:	4603      	mov	r3, r0
 801892c:	2b00      	cmp	r3, #0
 801892e:	d001      	beq.n	8018934 <f_sync+0x54>
 8018930:	2301      	movs	r3, #1
 8018932:	e04f      	b.n	80189d4 <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 8018934:	687b      	ldr	r3, [r7, #4]
 8018936:	7d1b      	ldrb	r3, [r3, #20]
 8018938:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801893c:	b2da      	uxtb	r2, r3
 801893e:	687b      	ldr	r3, [r7, #4]
 8018940:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 8018942:	f7fa fce1 	bl	8013308 <get_fattime>
 8018946:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 8018948:	68ba      	ldr	r2, [r7, #8]
 801894a:	687b      	ldr	r3, [r7, #4]
 801894c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801894e:	4619      	mov	r1, r3
 8018950:	4610      	mov	r0, r2
 8018952:	f7fe f925 	bl	8016ba0 <move_window>
 8018956:	4603      	mov	r3, r0
 8018958:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 801895a:	7dfb      	ldrb	r3, [r7, #23]
 801895c:	2b00      	cmp	r3, #0
 801895e:	d138      	bne.n	80189d2 <f_sync+0xf2>
					dir = fp->dir_ptr;
 8018960:	687b      	ldr	r3, [r7, #4]
 8018962:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8018964:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 8018966:	68fb      	ldr	r3, [r7, #12]
 8018968:	330b      	adds	r3, #11
 801896a:	781a      	ldrb	r2, [r3, #0]
 801896c:	68fb      	ldr	r3, [r7, #12]
 801896e:	330b      	adds	r3, #11
 8018970:	f042 0220 	orr.w	r2, r2, #32
 8018974:	b2d2      	uxtb	r2, r2
 8018976:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 8018978:	687b      	ldr	r3, [r7, #4]
 801897a:	6818      	ldr	r0, [r3, #0]
 801897c:	687b      	ldr	r3, [r7, #4]
 801897e:	689b      	ldr	r3, [r3, #8]
 8018980:	461a      	mov	r2, r3
 8018982:	68f9      	ldr	r1, [r7, #12]
 8018984:	f7fe fe2a 	bl	80175dc <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 8018988:	68fb      	ldr	r3, [r7, #12]
 801898a:	f103 021c 	add.w	r2, r3, #28
 801898e:	687b      	ldr	r3, [r7, #4]
 8018990:	68db      	ldr	r3, [r3, #12]
 8018992:	4619      	mov	r1, r3
 8018994:	4610      	mov	r0, r2
 8018996:	f7fd fea9 	bl	80166ec <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 801899a:	68fb      	ldr	r3, [r7, #12]
 801899c:	3316      	adds	r3, #22
 801899e:	6939      	ldr	r1, [r7, #16]
 80189a0:	4618      	mov	r0, r3
 80189a2:	f7fd fea3 	bl	80166ec <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 80189a6:	68fb      	ldr	r3, [r7, #12]
 80189a8:	3312      	adds	r3, #18
 80189aa:	2100      	movs	r1, #0
 80189ac:	4618      	mov	r0, r3
 80189ae:	f7fd fe82 	bl	80166b6 <st_word>
					fs->wflag = 1;
 80189b2:	68bb      	ldr	r3, [r7, #8]
 80189b4:	2201      	movs	r2, #1
 80189b6:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 80189b8:	68bb      	ldr	r3, [r7, #8]
 80189ba:	4618      	mov	r0, r3
 80189bc:	f7fe f91e 	bl	8016bfc <sync_fs>
 80189c0:	4603      	mov	r3, r0
 80189c2:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 80189c4:	687b      	ldr	r3, [r7, #4]
 80189c6:	7d1b      	ldrb	r3, [r3, #20]
 80189c8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80189cc:	b2da      	uxtb	r2, r3
 80189ce:	687b      	ldr	r3, [r7, #4]
 80189d0:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 80189d2:	7dfb      	ldrb	r3, [r7, #23]
}
 80189d4:	4618      	mov	r0, r3
 80189d6:	3718      	adds	r7, #24
 80189d8:	46bd      	mov	sp, r7
 80189da:	bd80      	pop	{r7, pc}

080189dc <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 80189dc:	b580      	push	{r7, lr}
 80189de:	b084      	sub	sp, #16
 80189e0:	af00      	add	r7, sp, #0
 80189e2:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 80189e4:	6878      	ldr	r0, [r7, #4]
 80189e6:	f7ff ff7b 	bl	80188e0 <f_sync>
 80189ea:	4603      	mov	r3, r0
 80189ec:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 80189ee:	7bfb      	ldrb	r3, [r7, #15]
 80189f0:	2b00      	cmp	r3, #0
 80189f2:	d118      	bne.n	8018a26 <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 80189f4:	687b      	ldr	r3, [r7, #4]
 80189f6:	f107 0208 	add.w	r2, r7, #8
 80189fa:	4611      	mov	r1, r2
 80189fc:	4618      	mov	r0, r3
 80189fe:	f7ff fa81 	bl	8017f04 <validate>
 8018a02:	4603      	mov	r3, r0
 8018a04:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8018a06:	7bfb      	ldrb	r3, [r7, #15]
 8018a08:	2b00      	cmp	r3, #0
 8018a0a:	d10c      	bne.n	8018a26 <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 8018a0c:	687b      	ldr	r3, [r7, #4]
 8018a0e:	691b      	ldr	r3, [r3, #16]
 8018a10:	4618      	mov	r0, r3
 8018a12:	f7fe f821 	bl	8016a58 <dec_lock>
 8018a16:	4603      	mov	r3, r0
 8018a18:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 8018a1a:	7bfb      	ldrb	r3, [r7, #15]
 8018a1c:	2b00      	cmp	r3, #0
 8018a1e:	d102      	bne.n	8018a26 <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 8018a20:	687b      	ldr	r3, [r7, #4]
 8018a22:	2200      	movs	r2, #0
 8018a24:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 8018a26:	7bfb      	ldrb	r3, [r7, #15]
}
 8018a28:	4618      	mov	r0, r3
 8018a2a:	3710      	adds	r7, #16
 8018a2c:	46bd      	mov	sp, r7
 8018a2e:	bd80      	pop	{r7, pc}

08018a30 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8018a30:	b480      	push	{r7}
 8018a32:	b087      	sub	sp, #28
 8018a34:	af00      	add	r7, sp, #0
 8018a36:	60f8      	str	r0, [r7, #12]
 8018a38:	60b9      	str	r1, [r7, #8]
 8018a3a:	4613      	mov	r3, r2
 8018a3c:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 8018a3e:	2301      	movs	r3, #1
 8018a40:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 8018a42:	2300      	movs	r3, #0
 8018a44:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 8018a46:	4b1f      	ldr	r3, [pc, #124]	; (8018ac4 <FATFS_LinkDriverEx+0x94>)
 8018a48:	7a5b      	ldrb	r3, [r3, #9]
 8018a4a:	b2db      	uxtb	r3, r3
 8018a4c:	2b00      	cmp	r3, #0
 8018a4e:	d131      	bne.n	8018ab4 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8018a50:	4b1c      	ldr	r3, [pc, #112]	; (8018ac4 <FATFS_LinkDriverEx+0x94>)
 8018a52:	7a5b      	ldrb	r3, [r3, #9]
 8018a54:	b2db      	uxtb	r3, r3
 8018a56:	461a      	mov	r2, r3
 8018a58:	4b1a      	ldr	r3, [pc, #104]	; (8018ac4 <FATFS_LinkDriverEx+0x94>)
 8018a5a:	2100      	movs	r1, #0
 8018a5c:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 8018a5e:	4b19      	ldr	r3, [pc, #100]	; (8018ac4 <FATFS_LinkDriverEx+0x94>)
 8018a60:	7a5b      	ldrb	r3, [r3, #9]
 8018a62:	b2db      	uxtb	r3, r3
 8018a64:	4a17      	ldr	r2, [pc, #92]	; (8018ac4 <FATFS_LinkDriverEx+0x94>)
 8018a66:	009b      	lsls	r3, r3, #2
 8018a68:	4413      	add	r3, r2
 8018a6a:	68fa      	ldr	r2, [r7, #12]
 8018a6c:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 8018a6e:	4b15      	ldr	r3, [pc, #84]	; (8018ac4 <FATFS_LinkDriverEx+0x94>)
 8018a70:	7a5b      	ldrb	r3, [r3, #9]
 8018a72:	b2db      	uxtb	r3, r3
 8018a74:	461a      	mov	r2, r3
 8018a76:	4b13      	ldr	r3, [pc, #76]	; (8018ac4 <FATFS_LinkDriverEx+0x94>)
 8018a78:	4413      	add	r3, r2
 8018a7a:	79fa      	ldrb	r2, [r7, #7]
 8018a7c:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 8018a7e:	4b11      	ldr	r3, [pc, #68]	; (8018ac4 <FATFS_LinkDriverEx+0x94>)
 8018a80:	7a5b      	ldrb	r3, [r3, #9]
 8018a82:	b2db      	uxtb	r3, r3
 8018a84:	1c5a      	adds	r2, r3, #1
 8018a86:	b2d1      	uxtb	r1, r2
 8018a88:	4a0e      	ldr	r2, [pc, #56]	; (8018ac4 <FATFS_LinkDriverEx+0x94>)
 8018a8a:	7251      	strb	r1, [r2, #9]
 8018a8c:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 8018a8e:	7dbb      	ldrb	r3, [r7, #22]
 8018a90:	3330      	adds	r3, #48	; 0x30
 8018a92:	b2da      	uxtb	r2, r3
 8018a94:	68bb      	ldr	r3, [r7, #8]
 8018a96:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8018a98:	68bb      	ldr	r3, [r7, #8]
 8018a9a:	3301      	adds	r3, #1
 8018a9c:	223a      	movs	r2, #58	; 0x3a
 8018a9e:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8018aa0:	68bb      	ldr	r3, [r7, #8]
 8018aa2:	3302      	adds	r3, #2
 8018aa4:	222f      	movs	r2, #47	; 0x2f
 8018aa6:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8018aa8:	68bb      	ldr	r3, [r7, #8]
 8018aaa:	3303      	adds	r3, #3
 8018aac:	2200      	movs	r2, #0
 8018aae:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8018ab0:	2300      	movs	r3, #0
 8018ab2:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 8018ab4:	7dfb      	ldrb	r3, [r7, #23]
}
 8018ab6:	4618      	mov	r0, r3
 8018ab8:	371c      	adds	r7, #28
 8018aba:	46bd      	mov	sp, r7
 8018abc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018ac0:	4770      	bx	lr
 8018ac2:	bf00      	nop
 8018ac4:	24000b84 	.word	0x24000b84

08018ac8 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 8018ac8:	b580      	push	{r7, lr}
 8018aca:	b082      	sub	sp, #8
 8018acc:	af00      	add	r7, sp, #0
 8018ace:	6078      	str	r0, [r7, #4]
 8018ad0:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 8018ad2:	2200      	movs	r2, #0
 8018ad4:	6839      	ldr	r1, [r7, #0]
 8018ad6:	6878      	ldr	r0, [r7, #4]
 8018ad8:	f7ff ffaa 	bl	8018a30 <FATFS_LinkDriverEx>
 8018adc:	4603      	mov	r3, r0
}
 8018ade:	4618      	mov	r0, r3
 8018ae0:	3708      	adds	r7, #8
 8018ae2:	46bd      	mov	sp, r7
 8018ae4:	bd80      	pop	{r7, pc}
	...

08018ae8 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8018ae8:	b580      	push	{r7, lr}
 8018aea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8018aec:	2200      	movs	r2, #0
 8018aee:	4913      	ldr	r1, [pc, #76]	; (8018b3c <MX_USB_DEVICE_Init+0x54>)
 8018af0:	4813      	ldr	r0, [pc, #76]	; (8018b40 <MX_USB_DEVICE_Init+0x58>)
 8018af2:	f7fc fc20 	bl	8015336 <USBD_Init>
 8018af6:	4603      	mov	r3, r0
 8018af8:	2b00      	cmp	r3, #0
 8018afa:	d001      	beq.n	8018b00 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8018afc:	f7eb f8f8 	bl	8003cf0 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_MSC) != USBD_OK)
 8018b00:	4910      	ldr	r1, [pc, #64]	; (8018b44 <MX_USB_DEVICE_Init+0x5c>)
 8018b02:	480f      	ldr	r0, [pc, #60]	; (8018b40 <MX_USB_DEVICE_Init+0x58>)
 8018b04:	f7fc fc4d 	bl	80153a2 <USBD_RegisterClass>
 8018b08:	4603      	mov	r3, r0
 8018b0a:	2b00      	cmp	r3, #0
 8018b0c:	d001      	beq.n	8018b12 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8018b0e:	f7eb f8ef 	bl	8003cf0 <Error_Handler>
  }
  if (USBD_MSC_RegisterStorage(&hUsbDeviceFS, &USBD_Storage_Interface_fops_FS) != USBD_OK)
 8018b12:	490d      	ldr	r1, [pc, #52]	; (8018b48 <MX_USB_DEVICE_Init+0x60>)
 8018b14:	480a      	ldr	r0, [pc, #40]	; (8018b40 <MX_USB_DEVICE_Init+0x58>)
 8018b16:	f7fa fff7 	bl	8013b08 <USBD_MSC_RegisterStorage>
 8018b1a:	4603      	mov	r3, r0
 8018b1c:	2b00      	cmp	r3, #0
 8018b1e:	d001      	beq.n	8018b24 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8018b20:	f7eb f8e6 	bl	8003cf0 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8018b24:	4806      	ldr	r0, [pc, #24]	; (8018b40 <MX_USB_DEVICE_Init+0x58>)
 8018b26:	f7fc fc5d 	bl	80153e4 <USBD_Start>
 8018b2a:	4603      	mov	r3, r0
 8018b2c:	2b00      	cmp	r3, #0
 8018b2e:	d001      	beq.n	8018b34 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8018b30:	f7eb f8de 	bl	8003cf0 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */
  HAL_PWREx_EnableUSBVoltageDetector();
 8018b34:	f7f0 fe38 	bl	80097a8 <HAL_PWREx_EnableUSBVoltageDetector>

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8018b38:	bf00      	nop
 8018b3a:	bd80      	pop	{r7, pc}
 8018b3c:	24000108 	.word	0x24000108
 8018b40:	24001bd4 	.word	0x24001bd4
 8018b44:	24000020 	.word	0x24000020
 8018b48:	24000158 	.word	0x24000158

08018b4c <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8018b4c:	b480      	push	{r7}
 8018b4e:	b083      	sub	sp, #12
 8018b50:	af00      	add	r7, sp, #0
 8018b52:	4603      	mov	r3, r0
 8018b54:	6039      	str	r1, [r7, #0]
 8018b56:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8018b58:	683b      	ldr	r3, [r7, #0]
 8018b5a:	2212      	movs	r2, #18
 8018b5c:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8018b5e:	4b03      	ldr	r3, [pc, #12]	; (8018b6c <USBD_FS_DeviceDescriptor+0x20>)
}
 8018b60:	4618      	mov	r0, r3
 8018b62:	370c      	adds	r7, #12
 8018b64:	46bd      	mov	sp, r7
 8018b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018b6a:	4770      	bx	lr
 8018b6c:	24000124 	.word	0x24000124

08018b70 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8018b70:	b480      	push	{r7}
 8018b72:	b083      	sub	sp, #12
 8018b74:	af00      	add	r7, sp, #0
 8018b76:	4603      	mov	r3, r0
 8018b78:	6039      	str	r1, [r7, #0]
 8018b7a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8018b7c:	683b      	ldr	r3, [r7, #0]
 8018b7e:	2204      	movs	r2, #4
 8018b80:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8018b82:	4b03      	ldr	r3, [pc, #12]	; (8018b90 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8018b84:	4618      	mov	r0, r3
 8018b86:	370c      	adds	r7, #12
 8018b88:	46bd      	mov	sp, r7
 8018b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018b8e:	4770      	bx	lr
 8018b90:	24000138 	.word	0x24000138

08018b94 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8018b94:	b580      	push	{r7, lr}
 8018b96:	b082      	sub	sp, #8
 8018b98:	af00      	add	r7, sp, #0
 8018b9a:	4603      	mov	r3, r0
 8018b9c:	6039      	str	r1, [r7, #0]
 8018b9e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8018ba0:	79fb      	ldrb	r3, [r7, #7]
 8018ba2:	2b00      	cmp	r3, #0
 8018ba4:	d105      	bne.n	8018bb2 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8018ba6:	683a      	ldr	r2, [r7, #0]
 8018ba8:	4907      	ldr	r1, [pc, #28]	; (8018bc8 <USBD_FS_ProductStrDescriptor+0x34>)
 8018baa:	4808      	ldr	r0, [pc, #32]	; (8018bcc <USBD_FS_ProductStrDescriptor+0x38>)
 8018bac:	f7fd fbe7 	bl	801637e <USBD_GetString>
 8018bb0:	e004      	b.n	8018bbc <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8018bb2:	683a      	ldr	r2, [r7, #0]
 8018bb4:	4904      	ldr	r1, [pc, #16]	; (8018bc8 <USBD_FS_ProductStrDescriptor+0x34>)
 8018bb6:	4805      	ldr	r0, [pc, #20]	; (8018bcc <USBD_FS_ProductStrDescriptor+0x38>)
 8018bb8:	f7fd fbe1 	bl	801637e <USBD_GetString>
  }
  return USBD_StrDesc;
 8018bbc:	4b02      	ldr	r3, [pc, #8]	; (8018bc8 <USBD_FS_ProductStrDescriptor+0x34>)
}
 8018bbe:	4618      	mov	r0, r3
 8018bc0:	3708      	adds	r7, #8
 8018bc2:	46bd      	mov	sp, r7
 8018bc4:	bd80      	pop	{r7, pc}
 8018bc6:	bf00      	nop
 8018bc8:	24001ea4 	.word	0x24001ea4
 8018bcc:	0801afb8 	.word	0x0801afb8

08018bd0 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8018bd0:	b580      	push	{r7, lr}
 8018bd2:	b082      	sub	sp, #8
 8018bd4:	af00      	add	r7, sp, #0
 8018bd6:	4603      	mov	r3, r0
 8018bd8:	6039      	str	r1, [r7, #0]
 8018bda:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8018bdc:	683a      	ldr	r2, [r7, #0]
 8018bde:	4904      	ldr	r1, [pc, #16]	; (8018bf0 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8018be0:	4804      	ldr	r0, [pc, #16]	; (8018bf4 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8018be2:	f7fd fbcc 	bl	801637e <USBD_GetString>
  return USBD_StrDesc;
 8018be6:	4b02      	ldr	r3, [pc, #8]	; (8018bf0 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8018be8:	4618      	mov	r0, r3
 8018bea:	3708      	adds	r7, #8
 8018bec:	46bd      	mov	sp, r7
 8018bee:	bd80      	pop	{r7, pc}
 8018bf0:	24001ea4 	.word	0x24001ea4
 8018bf4:	0801afcc 	.word	0x0801afcc

08018bf8 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8018bf8:	b580      	push	{r7, lr}
 8018bfa:	b082      	sub	sp, #8
 8018bfc:	af00      	add	r7, sp, #0
 8018bfe:	4603      	mov	r3, r0
 8018c00:	6039      	str	r1, [r7, #0]
 8018c02:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8018c04:	683b      	ldr	r3, [r7, #0]
 8018c06:	221a      	movs	r2, #26
 8018c08:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8018c0a:	f000 f843 	bl	8018c94 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8018c0e:	4b02      	ldr	r3, [pc, #8]	; (8018c18 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8018c10:	4618      	mov	r0, r3
 8018c12:	3708      	adds	r7, #8
 8018c14:	46bd      	mov	sp, r7
 8018c16:	bd80      	pop	{r7, pc}
 8018c18:	2400013c 	.word	0x2400013c

08018c1c <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8018c1c:	b580      	push	{r7, lr}
 8018c1e:	b082      	sub	sp, #8
 8018c20:	af00      	add	r7, sp, #0
 8018c22:	4603      	mov	r3, r0
 8018c24:	6039      	str	r1, [r7, #0]
 8018c26:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8018c28:	79fb      	ldrb	r3, [r7, #7]
 8018c2a:	2b00      	cmp	r3, #0
 8018c2c:	d105      	bne.n	8018c3a <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8018c2e:	683a      	ldr	r2, [r7, #0]
 8018c30:	4907      	ldr	r1, [pc, #28]	; (8018c50 <USBD_FS_ConfigStrDescriptor+0x34>)
 8018c32:	4808      	ldr	r0, [pc, #32]	; (8018c54 <USBD_FS_ConfigStrDescriptor+0x38>)
 8018c34:	f7fd fba3 	bl	801637e <USBD_GetString>
 8018c38:	e004      	b.n	8018c44 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8018c3a:	683a      	ldr	r2, [r7, #0]
 8018c3c:	4904      	ldr	r1, [pc, #16]	; (8018c50 <USBD_FS_ConfigStrDescriptor+0x34>)
 8018c3e:	4805      	ldr	r0, [pc, #20]	; (8018c54 <USBD_FS_ConfigStrDescriptor+0x38>)
 8018c40:	f7fd fb9d 	bl	801637e <USBD_GetString>
  }
  return USBD_StrDesc;
 8018c44:	4b02      	ldr	r3, [pc, #8]	; (8018c50 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8018c46:	4618      	mov	r0, r3
 8018c48:	3708      	adds	r7, #8
 8018c4a:	46bd      	mov	sp, r7
 8018c4c:	bd80      	pop	{r7, pc}
 8018c4e:	bf00      	nop
 8018c50:	24001ea4 	.word	0x24001ea4
 8018c54:	0801afe0 	.word	0x0801afe0

08018c58 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8018c58:	b580      	push	{r7, lr}
 8018c5a:	b082      	sub	sp, #8
 8018c5c:	af00      	add	r7, sp, #0
 8018c5e:	4603      	mov	r3, r0
 8018c60:	6039      	str	r1, [r7, #0]
 8018c62:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8018c64:	79fb      	ldrb	r3, [r7, #7]
 8018c66:	2b00      	cmp	r3, #0
 8018c68:	d105      	bne.n	8018c76 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8018c6a:	683a      	ldr	r2, [r7, #0]
 8018c6c:	4907      	ldr	r1, [pc, #28]	; (8018c8c <USBD_FS_InterfaceStrDescriptor+0x34>)
 8018c6e:	4808      	ldr	r0, [pc, #32]	; (8018c90 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8018c70:	f7fd fb85 	bl	801637e <USBD_GetString>
 8018c74:	e004      	b.n	8018c80 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8018c76:	683a      	ldr	r2, [r7, #0]
 8018c78:	4904      	ldr	r1, [pc, #16]	; (8018c8c <USBD_FS_InterfaceStrDescriptor+0x34>)
 8018c7a:	4805      	ldr	r0, [pc, #20]	; (8018c90 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8018c7c:	f7fd fb7f 	bl	801637e <USBD_GetString>
  }
  return USBD_StrDesc;
 8018c80:	4b02      	ldr	r3, [pc, #8]	; (8018c8c <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8018c82:	4618      	mov	r0, r3
 8018c84:	3708      	adds	r7, #8
 8018c86:	46bd      	mov	sp, r7
 8018c88:	bd80      	pop	{r7, pc}
 8018c8a:	bf00      	nop
 8018c8c:	24001ea4 	.word	0x24001ea4
 8018c90:	0801afec 	.word	0x0801afec

08018c94 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8018c94:	b580      	push	{r7, lr}
 8018c96:	b084      	sub	sp, #16
 8018c98:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8018c9a:	4b0f      	ldr	r3, [pc, #60]	; (8018cd8 <Get_SerialNum+0x44>)
 8018c9c:	681b      	ldr	r3, [r3, #0]
 8018c9e:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8018ca0:	4b0e      	ldr	r3, [pc, #56]	; (8018cdc <Get_SerialNum+0x48>)
 8018ca2:	681b      	ldr	r3, [r3, #0]
 8018ca4:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8018ca6:	4b0e      	ldr	r3, [pc, #56]	; (8018ce0 <Get_SerialNum+0x4c>)
 8018ca8:	681b      	ldr	r3, [r3, #0]
 8018caa:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8018cac:	68fa      	ldr	r2, [r7, #12]
 8018cae:	687b      	ldr	r3, [r7, #4]
 8018cb0:	4413      	add	r3, r2
 8018cb2:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8018cb4:	68fb      	ldr	r3, [r7, #12]
 8018cb6:	2b00      	cmp	r3, #0
 8018cb8:	d009      	beq.n	8018cce <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8018cba:	2208      	movs	r2, #8
 8018cbc:	4909      	ldr	r1, [pc, #36]	; (8018ce4 <Get_SerialNum+0x50>)
 8018cbe:	68f8      	ldr	r0, [r7, #12]
 8018cc0:	f000 f814 	bl	8018cec <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8018cc4:	2204      	movs	r2, #4
 8018cc6:	4908      	ldr	r1, [pc, #32]	; (8018ce8 <Get_SerialNum+0x54>)
 8018cc8:	68b8      	ldr	r0, [r7, #8]
 8018cca:	f000 f80f 	bl	8018cec <IntToUnicode>
  }
}
 8018cce:	bf00      	nop
 8018cd0:	3710      	adds	r7, #16
 8018cd2:	46bd      	mov	sp, r7
 8018cd4:	bd80      	pop	{r7, pc}
 8018cd6:	bf00      	nop
 8018cd8:	1ff1e800 	.word	0x1ff1e800
 8018cdc:	1ff1e804 	.word	0x1ff1e804
 8018ce0:	1ff1e808 	.word	0x1ff1e808
 8018ce4:	2400013e 	.word	0x2400013e
 8018ce8:	2400014e 	.word	0x2400014e

08018cec <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8018cec:	b480      	push	{r7}
 8018cee:	b087      	sub	sp, #28
 8018cf0:	af00      	add	r7, sp, #0
 8018cf2:	60f8      	str	r0, [r7, #12]
 8018cf4:	60b9      	str	r1, [r7, #8]
 8018cf6:	4613      	mov	r3, r2
 8018cf8:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8018cfa:	2300      	movs	r3, #0
 8018cfc:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8018cfe:	2300      	movs	r3, #0
 8018d00:	75fb      	strb	r3, [r7, #23]
 8018d02:	e027      	b.n	8018d54 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8018d04:	68fb      	ldr	r3, [r7, #12]
 8018d06:	0f1b      	lsrs	r3, r3, #28
 8018d08:	2b09      	cmp	r3, #9
 8018d0a:	d80b      	bhi.n	8018d24 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8018d0c:	68fb      	ldr	r3, [r7, #12]
 8018d0e:	0f1b      	lsrs	r3, r3, #28
 8018d10:	b2da      	uxtb	r2, r3
 8018d12:	7dfb      	ldrb	r3, [r7, #23]
 8018d14:	005b      	lsls	r3, r3, #1
 8018d16:	4619      	mov	r1, r3
 8018d18:	68bb      	ldr	r3, [r7, #8]
 8018d1a:	440b      	add	r3, r1
 8018d1c:	3230      	adds	r2, #48	; 0x30
 8018d1e:	b2d2      	uxtb	r2, r2
 8018d20:	701a      	strb	r2, [r3, #0]
 8018d22:	e00a      	b.n	8018d3a <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8018d24:	68fb      	ldr	r3, [r7, #12]
 8018d26:	0f1b      	lsrs	r3, r3, #28
 8018d28:	b2da      	uxtb	r2, r3
 8018d2a:	7dfb      	ldrb	r3, [r7, #23]
 8018d2c:	005b      	lsls	r3, r3, #1
 8018d2e:	4619      	mov	r1, r3
 8018d30:	68bb      	ldr	r3, [r7, #8]
 8018d32:	440b      	add	r3, r1
 8018d34:	3237      	adds	r2, #55	; 0x37
 8018d36:	b2d2      	uxtb	r2, r2
 8018d38:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8018d3a:	68fb      	ldr	r3, [r7, #12]
 8018d3c:	011b      	lsls	r3, r3, #4
 8018d3e:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8018d40:	7dfb      	ldrb	r3, [r7, #23]
 8018d42:	005b      	lsls	r3, r3, #1
 8018d44:	3301      	adds	r3, #1
 8018d46:	68ba      	ldr	r2, [r7, #8]
 8018d48:	4413      	add	r3, r2
 8018d4a:	2200      	movs	r2, #0
 8018d4c:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8018d4e:	7dfb      	ldrb	r3, [r7, #23]
 8018d50:	3301      	adds	r3, #1
 8018d52:	75fb      	strb	r3, [r7, #23]
 8018d54:	7dfa      	ldrb	r2, [r7, #23]
 8018d56:	79fb      	ldrb	r3, [r7, #7]
 8018d58:	429a      	cmp	r2, r3
 8018d5a:	d3d3      	bcc.n	8018d04 <IntToUnicode+0x18>
  }
}
 8018d5c:	bf00      	nop
 8018d5e:	371c      	adds	r7, #28
 8018d60:	46bd      	mov	sp, r7
 8018d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018d66:	4770      	bx	lr

08018d68 <STORAGE_Init_FS>:
  * @brief  Initializes over USB FS IP
  * @param  lun:
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_Init_FS(uint8_t lun)
{
 8018d68:	b480      	push	{r7}
 8018d6a:	b083      	sub	sp, #12
 8018d6c:	af00      	add	r7, sp, #0
 8018d6e:	4603      	mov	r3, r0
 8018d70:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN 2 */
  return (USBD_OK);
 8018d72:	2300      	movs	r3, #0
  /* USER CODE END 2 */
}
 8018d74:	4618      	mov	r0, r3
 8018d76:	370c      	adds	r7, #12
 8018d78:	46bd      	mov	sp, r7
 8018d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018d7e:	4770      	bx	lr

08018d80 <STORAGE_GetCapacity_FS>:
  * @param  block_num: .
  * @param  block_size: .
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_GetCapacity_FS(uint8_t lun, uint32_t *block_num, uint16_t *block_size)
{
 8018d80:	b580      	push	{r7, lr}
 8018d82:	b08e      	sub	sp, #56	; 0x38
 8018d84:	af00      	add	r7, sp, #0
 8018d86:	4603      	mov	r3, r0
 8018d88:	60b9      	str	r1, [r7, #8]
 8018d8a:	607a      	str	r2, [r7, #4]
 8018d8c:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 3 */
	HAL_SD_CardInfoTypeDef info;
	  int8_t ret = -1;
 8018d8e:	23ff      	movs	r3, #255	; 0xff
 8018d90:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

	  HAL_SD_GetCardInfo(&hsd1, &info);
 8018d94:	f107 0310 	add.w	r3, r7, #16
 8018d98:	4619      	mov	r1, r3
 8018d9a:	480a      	ldr	r0, [pc, #40]	; (8018dc4 <STORAGE_GetCapacity_FS+0x44>)
 8018d9c:	f7f5 f8a4 	bl	800dee8 <HAL_SD_GetCardInfo>

	  *block_num =  info.LogBlockNbr  - 1;
 8018da0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018da2:	1e5a      	subs	r2, r3, #1
 8018da4:	68bb      	ldr	r3, [r7, #8]
 8018da6:	601a      	str	r2, [r3, #0]
	  *block_size = info.LogBlockSize;
 8018da8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018daa:	b29a      	uxth	r2, r3
 8018dac:	687b      	ldr	r3, [r7, #4]
 8018dae:	801a      	strh	r2, [r3, #0]
	  ret = 0;
 8018db0:	2300      	movs	r3, #0
 8018db2:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	  return ret;
 8018db6:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
  /* USER CODE END 3 */
}
 8018dba:	4618      	mov	r0, r3
 8018dbc:	3738      	adds	r7, #56	; 0x38
 8018dbe:	46bd      	mov	sp, r7
 8018dc0:	bd80      	pop	{r7, pc}
 8018dc2:	bf00      	nop
 8018dc4:	24001470 	.word	0x24001470

08018dc8 <STORAGE_IsReady_FS>:
  * @brief  .
  * @param  lun: .
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_IsReady_FS(uint8_t lun)
{
 8018dc8:	b480      	push	{r7}
 8018dca:	b083      	sub	sp, #12
 8018dcc:	af00      	add	r7, sp, #0
 8018dce:	4603      	mov	r3, r0
 8018dd0:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8018dd2:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8018dd4:	4618      	mov	r0, r3
 8018dd6:	370c      	adds	r7, #12
 8018dd8:	46bd      	mov	sp, r7
 8018dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018dde:	4770      	bx	lr

08018de0 <STORAGE_IsWriteProtected_FS>:
  * @brief  .
  * @param  lun: .
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_IsWriteProtected_FS(uint8_t lun)
{
 8018de0:	b480      	push	{r7}
 8018de2:	b083      	sub	sp, #12
 8018de4:	af00      	add	r7, sp, #0
 8018de6:	4603      	mov	r3, r0
 8018de8:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN 5 */
  return (USBD_OK);
 8018dea:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8018dec:	4618      	mov	r0, r3
 8018dee:	370c      	adds	r7, #12
 8018df0:	46bd      	mov	sp, r7
 8018df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018df6:	4770      	bx	lr

08018df8 <STORAGE_Read_FS>:
  * @brief  .
  * @param  lun: .
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_Read_FS(uint8_t lun, uint8_t *buf, uint32_t blk_addr, uint16_t blk_len)
{
 8018df8:	b580      	push	{r7, lr}
 8018dfa:	b088      	sub	sp, #32
 8018dfc:	af02      	add	r7, sp, #8
 8018dfe:	60b9      	str	r1, [r7, #8]
 8018e00:	607a      	str	r2, [r7, #4]
 8018e02:	461a      	mov	r2, r3
 8018e04:	4603      	mov	r3, r0
 8018e06:	73fb      	strb	r3, [r7, #15]
 8018e08:	4613      	mov	r3, r2
 8018e0a:	81bb      	strh	r3, [r7, #12]
  /* USER CODE BEGIN 6 */
	int8_t ret = -1;
 8018e0c:	23ff      	movs	r3, #255	; 0xff
 8018e0e:	75fb      	strb	r3, [r7, #23]

	HAL_SD_ReadBlocks(&hsd1, buf, blk_addr, blk_len, HAL_MAX_DELAY);
 8018e10:	89ba      	ldrh	r2, [r7, #12]
 8018e12:	f04f 33ff 	mov.w	r3, #4294967295
 8018e16:	9300      	str	r3, [sp, #0]
 8018e18:	4613      	mov	r3, r2
 8018e1a:	687a      	ldr	r2, [r7, #4]
 8018e1c:	68b9      	ldr	r1, [r7, #8]
 8018e1e:	4809      	ldr	r0, [pc, #36]	; (8018e44 <STORAGE_Read_FS+0x4c>)
 8018e20:	f7f3 ffd4 	bl	800cdcc <HAL_SD_ReadBlocks>

	/* Wait until SD card is ready to use for new operation */
	while (HAL_SD_GetCardState(&hsd1) != HAL_SD_CARD_TRANSFER){}
 8018e24:	bf00      	nop
 8018e26:	4807      	ldr	r0, [pc, #28]	; (8018e44 <STORAGE_Read_FS+0x4c>)
 8018e28:	f7f5 f934 	bl	800e094 <HAL_SD_GetCardState>
 8018e2c:	4603      	mov	r3, r0
 8018e2e:	2b04      	cmp	r3, #4
 8018e30:	d1f9      	bne.n	8018e26 <STORAGE_Read_FS+0x2e>
	ret = 0;
 8018e32:	2300      	movs	r3, #0
 8018e34:	75fb      	strb	r3, [r7, #23]
	return ret;
 8018e36:	f997 3017 	ldrsb.w	r3, [r7, #23]
  /* USER CODE END 6 */
}
 8018e3a:	4618      	mov	r0, r3
 8018e3c:	3718      	adds	r7, #24
 8018e3e:	46bd      	mov	sp, r7
 8018e40:	bd80      	pop	{r7, pc}
 8018e42:	bf00      	nop
 8018e44:	24001470 	.word	0x24001470

08018e48 <STORAGE_Write_FS>:
  * @brief  .
  * @param  lun: .
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_Write_FS(uint8_t lun, uint8_t *buf, uint32_t blk_addr, uint16_t blk_len)
{
 8018e48:	b580      	push	{r7, lr}
 8018e4a:	b088      	sub	sp, #32
 8018e4c:	af02      	add	r7, sp, #8
 8018e4e:	60b9      	str	r1, [r7, #8]
 8018e50:	607a      	str	r2, [r7, #4]
 8018e52:	461a      	mov	r2, r3
 8018e54:	4603      	mov	r3, r0
 8018e56:	73fb      	strb	r3, [r7, #15]
 8018e58:	4613      	mov	r3, r2
 8018e5a:	81bb      	strh	r3, [r7, #12]
  /* USER CODE BEGIN 7 */
	int8_t ret = -1;
 8018e5c:	23ff      	movs	r3, #255	; 0xff
 8018e5e:	75fb      	strb	r3, [r7, #23]

	HAL_SD_WriteBlocks(&hsd1, buf, blk_addr, blk_len, HAL_MAX_DELAY);
 8018e60:	89ba      	ldrh	r2, [r7, #12]
 8018e62:	f04f 33ff 	mov.w	r3, #4294967295
 8018e66:	9300      	str	r3, [sp, #0]
 8018e68:	4613      	mov	r3, r2
 8018e6a:	687a      	ldr	r2, [r7, #4]
 8018e6c:	68b9      	ldr	r1, [r7, #8]
 8018e6e:	4809      	ldr	r0, [pc, #36]	; (8018e94 <STORAGE_Write_FS+0x4c>)
 8018e70:	f7f4 f936 	bl	800d0e0 <HAL_SD_WriteBlocks>


	/* Wait until SD card is ready to use for new operation */
	while (HAL_SD_GetCardState(&hsd1) != HAL_SD_CARD_TRANSFER){}
 8018e74:	bf00      	nop
 8018e76:	4807      	ldr	r0, [pc, #28]	; (8018e94 <STORAGE_Write_FS+0x4c>)
 8018e78:	f7f5 f90c 	bl	800e094 <HAL_SD_GetCardState>
 8018e7c:	4603      	mov	r3, r0
 8018e7e:	2b04      	cmp	r3, #4
 8018e80:	d1f9      	bne.n	8018e76 <STORAGE_Write_FS+0x2e>
	ret = 0;
 8018e82:	2300      	movs	r3, #0
 8018e84:	75fb      	strb	r3, [r7, #23]
	return ret;
 8018e86:	f997 3017 	ldrsb.w	r3, [r7, #23]
  /* USER CODE END 7 */
}
 8018e8a:	4618      	mov	r0, r3
 8018e8c:	3718      	adds	r7, #24
 8018e8e:	46bd      	mov	sp, r7
 8018e90:	bd80      	pop	{r7, pc}
 8018e92:	bf00      	nop
 8018e94:	24001470 	.word	0x24001470

08018e98 <STORAGE_GetMaxLun_FS>:
  * @brief  .
  * @param  None
  * @retval .
  */
int8_t STORAGE_GetMaxLun_FS(void)
{
 8018e98:	b480      	push	{r7}
 8018e9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 8 */
  return (STORAGE_LUN_NBR - 1);
 8018e9c:	2300      	movs	r3, #0
  /* USER CODE END 8 */
}
 8018e9e:	4618      	mov	r0, r3
 8018ea0:	46bd      	mov	sp, r7
 8018ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018ea6:	4770      	bx	lr

08018ea8 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8018ea8:	b580      	push	{r7, lr}
 8018eaa:	b08a      	sub	sp, #40	; 0x28
 8018eac:	af00      	add	r7, sp, #0
 8018eae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8018eb0:	f107 0314 	add.w	r3, r7, #20
 8018eb4:	2200      	movs	r2, #0
 8018eb6:	601a      	str	r2, [r3, #0]
 8018eb8:	605a      	str	r2, [r3, #4]
 8018eba:	609a      	str	r2, [r3, #8]
 8018ebc:	60da      	str	r2, [r3, #12]
 8018ebe:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8018ec0:	687b      	ldr	r3, [r7, #4]
 8018ec2:	681b      	ldr	r3, [r3, #0]
 8018ec4:	4a1e      	ldr	r2, [pc, #120]	; (8018f40 <HAL_PCD_MspInit+0x98>)
 8018ec6:	4293      	cmp	r3, r2
 8018ec8:	d136      	bne.n	8018f38 <HAL_PCD_MspInit+0x90>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8018eca:	4b1e      	ldr	r3, [pc, #120]	; (8018f44 <HAL_PCD_MspInit+0x9c>)
 8018ecc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8018ed0:	4a1c      	ldr	r2, [pc, #112]	; (8018f44 <HAL_PCD_MspInit+0x9c>)
 8018ed2:	f043 0301 	orr.w	r3, r3, #1
 8018ed6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8018eda:	4b1a      	ldr	r3, [pc, #104]	; (8018f44 <HAL_PCD_MspInit+0x9c>)
 8018edc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8018ee0:	f003 0301 	and.w	r3, r3, #1
 8018ee4:	613b      	str	r3, [r7, #16]
 8018ee6:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8018ee8:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8018eec:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8018eee:	2302      	movs	r3, #2
 8018ef0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8018ef2:	2300      	movs	r3, #0
 8018ef4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8018ef6:	2300      	movs	r3, #0
 8018ef8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 8018efa:	230a      	movs	r3, #10
 8018efc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8018efe:	f107 0314 	add.w	r3, r7, #20
 8018f02:	4619      	mov	r1, r3
 8018f04:	4810      	ldr	r0, [pc, #64]	; (8018f48 <HAL_PCD_MspInit+0xa0>)
 8018f06:	f7ee ff39 	bl	8007d7c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8018f0a:	4b0e      	ldr	r3, [pc, #56]	; (8018f44 <HAL_PCD_MspInit+0x9c>)
 8018f0c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8018f10:	4a0c      	ldr	r2, [pc, #48]	; (8018f44 <HAL_PCD_MspInit+0x9c>)
 8018f12:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8018f16:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8018f1a:	4b0a      	ldr	r3, [pc, #40]	; (8018f44 <HAL_PCD_MspInit+0x9c>)
 8018f1c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8018f20:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8018f24:	60fb      	str	r3, [r7, #12]
 8018f26:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8018f28:	2200      	movs	r2, #0
 8018f2a:	2100      	movs	r1, #0
 8018f2c:	2065      	movs	r0, #101	; 0x65
 8018f2e:	f7eb fcdc 	bl	80048ea <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8018f32:	2065      	movs	r0, #101	; 0x65
 8018f34:	f7eb fcf3 	bl	800491e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8018f38:	bf00      	nop
 8018f3a:	3728      	adds	r7, #40	; 0x28
 8018f3c:	46bd      	mov	sp, r7
 8018f3e:	bd80      	pop	{r7, pc}
 8018f40:	40080000 	.word	0x40080000
 8018f44:	58024400 	.word	0x58024400
 8018f48:	58020000 	.word	0x58020000

08018f4c <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8018f4c:	b580      	push	{r7, lr}
 8018f4e:	b082      	sub	sp, #8
 8018f50:	af00      	add	r7, sp, #0
 8018f52:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8018f54:	687b      	ldr	r3, [r7, #4]
 8018f56:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 8018f5a:	687b      	ldr	r3, [r7, #4]
 8018f5c:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8018f60:	4619      	mov	r1, r3
 8018f62:	4610      	mov	r0, r2
 8018f64:	f7fc fa89 	bl	801547a <USBD_LL_SetupStage>
}
 8018f68:	bf00      	nop
 8018f6a:	3708      	adds	r7, #8
 8018f6c:	46bd      	mov	sp, r7
 8018f6e:	bd80      	pop	{r7, pc}

08018f70 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8018f70:	b580      	push	{r7, lr}
 8018f72:	b082      	sub	sp, #8
 8018f74:	af00      	add	r7, sp, #0
 8018f76:	6078      	str	r0, [r7, #4]
 8018f78:	460b      	mov	r3, r1
 8018f7a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8018f7c:	687b      	ldr	r3, [r7, #4]
 8018f7e:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 8018f82:	78fa      	ldrb	r2, [r7, #3]
 8018f84:	6879      	ldr	r1, [r7, #4]
 8018f86:	4613      	mov	r3, r2
 8018f88:	00db      	lsls	r3, r3, #3
 8018f8a:	1a9b      	subs	r3, r3, r2
 8018f8c:	009b      	lsls	r3, r3, #2
 8018f8e:	440b      	add	r3, r1
 8018f90:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8018f94:	681a      	ldr	r2, [r3, #0]
 8018f96:	78fb      	ldrb	r3, [r7, #3]
 8018f98:	4619      	mov	r1, r3
 8018f9a:	f7fc fac1 	bl	8015520 <USBD_LL_DataOutStage>
}
 8018f9e:	bf00      	nop
 8018fa0:	3708      	adds	r7, #8
 8018fa2:	46bd      	mov	sp, r7
 8018fa4:	bd80      	pop	{r7, pc}

08018fa6 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8018fa6:	b580      	push	{r7, lr}
 8018fa8:	b082      	sub	sp, #8
 8018faa:	af00      	add	r7, sp, #0
 8018fac:	6078      	str	r0, [r7, #4]
 8018fae:	460b      	mov	r3, r1
 8018fb0:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8018fb2:	687b      	ldr	r3, [r7, #4]
 8018fb4:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 8018fb8:	78fa      	ldrb	r2, [r7, #3]
 8018fba:	6879      	ldr	r1, [r7, #4]
 8018fbc:	4613      	mov	r3, r2
 8018fbe:	00db      	lsls	r3, r3, #3
 8018fc0:	1a9b      	subs	r3, r3, r2
 8018fc2:	009b      	lsls	r3, r3, #2
 8018fc4:	440b      	add	r3, r1
 8018fc6:	3348      	adds	r3, #72	; 0x48
 8018fc8:	681a      	ldr	r2, [r3, #0]
 8018fca:	78fb      	ldrb	r3, [r7, #3]
 8018fcc:	4619      	mov	r1, r3
 8018fce:	f7fc fb0a 	bl	80155e6 <USBD_LL_DataInStage>
}
 8018fd2:	bf00      	nop
 8018fd4:	3708      	adds	r7, #8
 8018fd6:	46bd      	mov	sp, r7
 8018fd8:	bd80      	pop	{r7, pc}

08018fda <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8018fda:	b580      	push	{r7, lr}
 8018fdc:	b082      	sub	sp, #8
 8018fde:	af00      	add	r7, sp, #0
 8018fe0:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8018fe2:	687b      	ldr	r3, [r7, #4]
 8018fe4:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8018fe8:	4618      	mov	r0, r3
 8018fea:	f7fc fc0e 	bl	801580a <USBD_LL_SOF>
}
 8018fee:	bf00      	nop
 8018ff0:	3708      	adds	r7, #8
 8018ff2:	46bd      	mov	sp, r7
 8018ff4:	bd80      	pop	{r7, pc}

08018ff6 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8018ff6:	b580      	push	{r7, lr}
 8018ff8:	b084      	sub	sp, #16
 8018ffa:	af00      	add	r7, sp, #0
 8018ffc:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8018ffe:	2301      	movs	r3, #1
 8019000:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 8019002:	687b      	ldr	r3, [r7, #4]
 8019004:	68db      	ldr	r3, [r3, #12]
 8019006:	2b00      	cmp	r3, #0
 8019008:	d102      	bne.n	8019010 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 801900a:	2300      	movs	r3, #0
 801900c:	73fb      	strb	r3, [r7, #15]
 801900e:	e008      	b.n	8019022 <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 8019010:	687b      	ldr	r3, [r7, #4]
 8019012:	68db      	ldr	r3, [r3, #12]
 8019014:	2b02      	cmp	r3, #2
 8019016:	d102      	bne.n	801901e <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 8019018:	2301      	movs	r3, #1
 801901a:	73fb      	strb	r3, [r7, #15]
 801901c:	e001      	b.n	8019022 <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 801901e:	f7ea fe67 	bl	8003cf0 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8019022:	687b      	ldr	r3, [r7, #4]
 8019024:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8019028:	7bfa      	ldrb	r2, [r7, #15]
 801902a:	4611      	mov	r1, r2
 801902c:	4618      	mov	r0, r3
 801902e:	f7fc fbb1 	bl	8015794 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8019032:	687b      	ldr	r3, [r7, #4]
 8019034:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8019038:	4618      	mov	r0, r3
 801903a:	f7fc fb6a 	bl	8015712 <USBD_LL_Reset>
}
 801903e:	bf00      	nop
 8019040:	3710      	adds	r7, #16
 8019042:	46bd      	mov	sp, r7
 8019044:	bd80      	pop	{r7, pc}
	...

08019048 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8019048:	b580      	push	{r7, lr}
 801904a:	b082      	sub	sp, #8
 801904c:	af00      	add	r7, sp, #0
 801904e:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8019050:	687b      	ldr	r3, [r7, #4]
 8019052:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8019056:	4618      	mov	r0, r3
 8019058:	f7fc fbac 	bl	80157b4 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 801905c:	687b      	ldr	r3, [r7, #4]
 801905e:	681b      	ldr	r3, [r3, #0]
 8019060:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8019064:	681b      	ldr	r3, [r3, #0]
 8019066:	687a      	ldr	r2, [r7, #4]
 8019068:	6812      	ldr	r2, [r2, #0]
 801906a:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 801906e:	f043 0301 	orr.w	r3, r3, #1
 8019072:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8019074:	687b      	ldr	r3, [r7, #4]
 8019076:	6a1b      	ldr	r3, [r3, #32]
 8019078:	2b00      	cmp	r3, #0
 801907a:	d005      	beq.n	8019088 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 801907c:	4b04      	ldr	r3, [pc, #16]	; (8019090 <HAL_PCD_SuspendCallback+0x48>)
 801907e:	691b      	ldr	r3, [r3, #16]
 8019080:	4a03      	ldr	r2, [pc, #12]	; (8019090 <HAL_PCD_SuspendCallback+0x48>)
 8019082:	f043 0306 	orr.w	r3, r3, #6
 8019086:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8019088:	bf00      	nop
 801908a:	3708      	adds	r7, #8
 801908c:	46bd      	mov	sp, r7
 801908e:	bd80      	pop	{r7, pc}
 8019090:	e000ed00 	.word	0xe000ed00

08019094 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8019094:	b580      	push	{r7, lr}
 8019096:	b082      	sub	sp, #8
 8019098:	af00      	add	r7, sp, #0
 801909a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 801909c:	687b      	ldr	r3, [r7, #4]
 801909e:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80190a2:	4618      	mov	r0, r3
 80190a4:	f7fc fb9b 	bl	80157de <USBD_LL_Resume>
}
 80190a8:	bf00      	nop
 80190aa:	3708      	adds	r7, #8
 80190ac:	46bd      	mov	sp, r7
 80190ae:	bd80      	pop	{r7, pc}

080190b0 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80190b0:	b580      	push	{r7, lr}
 80190b2:	b082      	sub	sp, #8
 80190b4:	af00      	add	r7, sp, #0
 80190b6:	6078      	str	r0, [r7, #4]
 80190b8:	460b      	mov	r3, r1
 80190ba:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 80190bc:	687b      	ldr	r3, [r7, #4]
 80190be:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80190c2:	78fa      	ldrb	r2, [r7, #3]
 80190c4:	4611      	mov	r1, r2
 80190c6:	4618      	mov	r0, r3
 80190c8:	f7fc fbc6 	bl	8015858 <USBD_LL_IsoOUTIncomplete>
}
 80190cc:	bf00      	nop
 80190ce:	3708      	adds	r7, #8
 80190d0:	46bd      	mov	sp, r7
 80190d2:	bd80      	pop	{r7, pc}

080190d4 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80190d4:	b580      	push	{r7, lr}
 80190d6:	b082      	sub	sp, #8
 80190d8:	af00      	add	r7, sp, #0
 80190da:	6078      	str	r0, [r7, #4]
 80190dc:	460b      	mov	r3, r1
 80190de:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 80190e0:	687b      	ldr	r3, [r7, #4]
 80190e2:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80190e6:	78fa      	ldrb	r2, [r7, #3]
 80190e8:	4611      	mov	r1, r2
 80190ea:	4618      	mov	r0, r3
 80190ec:	f7fc fba7 	bl	801583e <USBD_LL_IsoINIncomplete>
}
 80190f0:	bf00      	nop
 80190f2:	3708      	adds	r7, #8
 80190f4:	46bd      	mov	sp, r7
 80190f6:	bd80      	pop	{r7, pc}

080190f8 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80190f8:	b580      	push	{r7, lr}
 80190fa:	b082      	sub	sp, #8
 80190fc:	af00      	add	r7, sp, #0
 80190fe:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8019100:	687b      	ldr	r3, [r7, #4]
 8019102:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8019106:	4618      	mov	r0, r3
 8019108:	f7fc fbb3 	bl	8015872 <USBD_LL_DevConnected>
}
 801910c:	bf00      	nop
 801910e:	3708      	adds	r7, #8
 8019110:	46bd      	mov	sp, r7
 8019112:	bd80      	pop	{r7, pc}

08019114 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8019114:	b580      	push	{r7, lr}
 8019116:	b082      	sub	sp, #8
 8019118:	af00      	add	r7, sp, #0
 801911a:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 801911c:	687b      	ldr	r3, [r7, #4]
 801911e:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8019122:	4618      	mov	r0, r3
 8019124:	f7fc fbb0 	bl	8015888 <USBD_LL_DevDisconnected>
}
 8019128:	bf00      	nop
 801912a:	3708      	adds	r7, #8
 801912c:	46bd      	mov	sp, r7
 801912e:	bd80      	pop	{r7, pc}

08019130 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8019130:	b580      	push	{r7, lr}
 8019132:	b082      	sub	sp, #8
 8019134:	af00      	add	r7, sp, #0
 8019136:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8019138:	687b      	ldr	r3, [r7, #4]
 801913a:	781b      	ldrb	r3, [r3, #0]
 801913c:	2b00      	cmp	r3, #0
 801913e:	d13e      	bne.n	80191be <USBD_LL_Init+0x8e>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8019140:	4a21      	ldr	r2, [pc, #132]	; (80191c8 <USBD_LL_Init+0x98>)
 8019142:	687b      	ldr	r3, [r7, #4]
 8019144:	f8c2 3404 	str.w	r3, [r2, #1028]	; 0x404
  pdev->pData = &hpcd_USB_OTG_FS;
 8019148:	687b      	ldr	r3, [r7, #4]
 801914a:	4a1f      	ldr	r2, [pc, #124]	; (80191c8 <USBD_LL_Init+0x98>)
 801914c:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8019150:	4b1d      	ldr	r3, [pc, #116]	; (80191c8 <USBD_LL_Init+0x98>)
 8019152:	4a1e      	ldr	r2, [pc, #120]	; (80191cc <USBD_LL_Init+0x9c>)
 8019154:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 9;
 8019156:	4b1c      	ldr	r3, [pc, #112]	; (80191c8 <USBD_LL_Init+0x98>)
 8019158:	2209      	movs	r2, #9
 801915a:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 801915c:	4b1a      	ldr	r3, [pc, #104]	; (80191c8 <USBD_LL_Init+0x98>)
 801915e:	2202      	movs	r2, #2
 8019160:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8019162:	4b19      	ldr	r3, [pc, #100]	; (80191c8 <USBD_LL_Init+0x98>)
 8019164:	2200      	movs	r2, #0
 8019166:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8019168:	4b17      	ldr	r3, [pc, #92]	; (80191c8 <USBD_LL_Init+0x98>)
 801916a:	2202      	movs	r2, #2
 801916c:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 801916e:	4b16      	ldr	r3, [pc, #88]	; (80191c8 <USBD_LL_Init+0x98>)
 8019170:	2200      	movs	r2, #0
 8019172:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8019174:	4b14      	ldr	r3, [pc, #80]	; (80191c8 <USBD_LL_Init+0x98>)
 8019176:	2200      	movs	r2, #0
 8019178:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 801917a:	4b13      	ldr	r3, [pc, #76]	; (80191c8 <USBD_LL_Init+0x98>)
 801917c:	2200      	movs	r2, #0
 801917e:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = DISABLE;
 8019180:	4b11      	ldr	r3, [pc, #68]	; (80191c8 <USBD_LL_Init+0x98>)
 8019182:	2200      	movs	r2, #0
 8019184:	629a      	str	r2, [r3, #40]	; 0x28
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8019186:	4b10      	ldr	r3, [pc, #64]	; (80191c8 <USBD_LL_Init+0x98>)
 8019188:	2200      	movs	r2, #0
 801918a:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 801918c:	4b0e      	ldr	r3, [pc, #56]	; (80191c8 <USBD_LL_Init+0x98>)
 801918e:	2200      	movs	r2, #0
 8019190:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8019192:	480d      	ldr	r0, [pc, #52]	; (80191c8 <USBD_LL_Init+0x98>)
 8019194:	f7ef f82c 	bl	80081f0 <HAL_PCD_Init>
 8019198:	4603      	mov	r3, r0
 801919a:	2b00      	cmp	r3, #0
 801919c:	d001      	beq.n	80191a2 <USBD_LL_Init+0x72>
  {
    Error_Handler( );
 801919e:	f7ea fda7 	bl	8003cf0 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 80191a2:	2180      	movs	r1, #128	; 0x80
 80191a4:	4808      	ldr	r0, [pc, #32]	; (80191c8 <USBD_LL_Init+0x98>)
 80191a6:	f7f0 f9ea 	bl	800957e <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 80191aa:	2240      	movs	r2, #64	; 0x40
 80191ac:	2100      	movs	r1, #0
 80191ae:	4806      	ldr	r0, [pc, #24]	; (80191c8 <USBD_LL_Init+0x98>)
 80191b0:	f7f0 f99e 	bl	80094f0 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 80191b4:	2280      	movs	r2, #128	; 0x80
 80191b6:	2101      	movs	r1, #1
 80191b8:	4803      	ldr	r0, [pc, #12]	; (80191c8 <USBD_LL_Init+0x98>)
 80191ba:	f7f0 f999 	bl	80094f0 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 80191be:	2300      	movs	r3, #0
}
 80191c0:	4618      	mov	r0, r3
 80191c2:	3708      	adds	r7, #8
 80191c4:	46bd      	mov	sp, r7
 80191c6:	bd80      	pop	{r7, pc}
 80191c8:	240020a4 	.word	0x240020a4
 80191cc:	40080000 	.word	0x40080000

080191d0 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 80191d0:	b580      	push	{r7, lr}
 80191d2:	b084      	sub	sp, #16
 80191d4:	af00      	add	r7, sp, #0
 80191d6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80191d8:	2300      	movs	r3, #0
 80191da:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80191dc:	2300      	movs	r3, #0
 80191de:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 80191e0:	687b      	ldr	r3, [r7, #4]
 80191e2:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80191e6:	4618      	mov	r0, r3
 80191e8:	f7ef f926 	bl	8008438 <HAL_PCD_Start>
 80191ec:	4603      	mov	r3, r0
 80191ee:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80191f0:	7bfb      	ldrb	r3, [r7, #15]
 80191f2:	4618      	mov	r0, r3
 80191f4:	f000 f94a 	bl	801948c <USBD_Get_USB_Status>
 80191f8:	4603      	mov	r3, r0
 80191fa:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80191fc:	7bbb      	ldrb	r3, [r7, #14]
}
 80191fe:	4618      	mov	r0, r3
 8019200:	3710      	adds	r7, #16
 8019202:	46bd      	mov	sp, r7
 8019204:	bd80      	pop	{r7, pc}

08019206 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8019206:	b580      	push	{r7, lr}
 8019208:	b084      	sub	sp, #16
 801920a:	af00      	add	r7, sp, #0
 801920c:	6078      	str	r0, [r7, #4]
 801920e:	4608      	mov	r0, r1
 8019210:	4611      	mov	r1, r2
 8019212:	461a      	mov	r2, r3
 8019214:	4603      	mov	r3, r0
 8019216:	70fb      	strb	r3, [r7, #3]
 8019218:	460b      	mov	r3, r1
 801921a:	70bb      	strb	r3, [r7, #2]
 801921c:	4613      	mov	r3, r2
 801921e:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8019220:	2300      	movs	r3, #0
 8019222:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8019224:	2300      	movs	r3, #0
 8019226:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8019228:	687b      	ldr	r3, [r7, #4]
 801922a:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 801922e:	78bb      	ldrb	r3, [r7, #2]
 8019230:	883a      	ldrh	r2, [r7, #0]
 8019232:	78f9      	ldrb	r1, [r7, #3]
 8019234:	f7ef fd37 	bl	8008ca6 <HAL_PCD_EP_Open>
 8019238:	4603      	mov	r3, r0
 801923a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801923c:	7bfb      	ldrb	r3, [r7, #15]
 801923e:	4618      	mov	r0, r3
 8019240:	f000 f924 	bl	801948c <USBD_Get_USB_Status>
 8019244:	4603      	mov	r3, r0
 8019246:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8019248:	7bbb      	ldrb	r3, [r7, #14]
}
 801924a:	4618      	mov	r0, r3
 801924c:	3710      	adds	r7, #16
 801924e:	46bd      	mov	sp, r7
 8019250:	bd80      	pop	{r7, pc}

08019252 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8019252:	b580      	push	{r7, lr}
 8019254:	b084      	sub	sp, #16
 8019256:	af00      	add	r7, sp, #0
 8019258:	6078      	str	r0, [r7, #4]
 801925a:	460b      	mov	r3, r1
 801925c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801925e:	2300      	movs	r3, #0
 8019260:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8019262:	2300      	movs	r3, #0
 8019264:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8019266:	687b      	ldr	r3, [r7, #4]
 8019268:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 801926c:	78fa      	ldrb	r2, [r7, #3]
 801926e:	4611      	mov	r1, r2
 8019270:	4618      	mov	r0, r3
 8019272:	f7ef fd80 	bl	8008d76 <HAL_PCD_EP_Close>
 8019276:	4603      	mov	r3, r0
 8019278:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801927a:	7bfb      	ldrb	r3, [r7, #15]
 801927c:	4618      	mov	r0, r3
 801927e:	f000 f905 	bl	801948c <USBD_Get_USB_Status>
 8019282:	4603      	mov	r3, r0
 8019284:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8019286:	7bbb      	ldrb	r3, [r7, #14]
}
 8019288:	4618      	mov	r0, r3
 801928a:	3710      	adds	r7, #16
 801928c:	46bd      	mov	sp, r7
 801928e:	bd80      	pop	{r7, pc}

08019290 <USBD_LL_FlushEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_FlushEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8019290:	b580      	push	{r7, lr}
 8019292:	b084      	sub	sp, #16
 8019294:	af00      	add	r7, sp, #0
 8019296:	6078      	str	r0, [r7, #4]
 8019298:	460b      	mov	r3, r1
 801929a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801929c:	2300      	movs	r3, #0
 801929e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80192a0:	2300      	movs	r3, #0
 80192a2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Flush(pdev->pData, ep_addr);
 80192a4:	687b      	ldr	r3, [r7, #4]
 80192a6:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80192aa:	78fa      	ldrb	r2, [r7, #3]
 80192ac:	4611      	mov	r1, r2
 80192ae:	4618      	mov	r0, r3
 80192b0:	f7ef ff12 	bl	80090d8 <HAL_PCD_EP_Flush>
 80192b4:	4603      	mov	r3, r0
 80192b6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80192b8:	7bfb      	ldrb	r3, [r7, #15]
 80192ba:	4618      	mov	r0, r3
 80192bc:	f000 f8e6 	bl	801948c <USBD_Get_USB_Status>
 80192c0:	4603      	mov	r3, r0
 80192c2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80192c4:	7bbb      	ldrb	r3, [r7, #14]
}
 80192c6:	4618      	mov	r0, r3
 80192c8:	3710      	adds	r7, #16
 80192ca:	46bd      	mov	sp, r7
 80192cc:	bd80      	pop	{r7, pc}

080192ce <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80192ce:	b580      	push	{r7, lr}
 80192d0:	b084      	sub	sp, #16
 80192d2:	af00      	add	r7, sp, #0
 80192d4:	6078      	str	r0, [r7, #4]
 80192d6:	460b      	mov	r3, r1
 80192d8:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80192da:	2300      	movs	r3, #0
 80192dc:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80192de:	2300      	movs	r3, #0
 80192e0:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 80192e2:	687b      	ldr	r3, [r7, #4]
 80192e4:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80192e8:	78fa      	ldrb	r2, [r7, #3]
 80192ea:	4611      	mov	r1, r2
 80192ec:	4618      	mov	r0, r3
 80192ee:	f7ef fe39 	bl	8008f64 <HAL_PCD_EP_SetStall>
 80192f2:	4603      	mov	r3, r0
 80192f4:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80192f6:	7bfb      	ldrb	r3, [r7, #15]
 80192f8:	4618      	mov	r0, r3
 80192fa:	f000 f8c7 	bl	801948c <USBD_Get_USB_Status>
 80192fe:	4603      	mov	r3, r0
 8019300:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8019302:	7bbb      	ldrb	r3, [r7, #14]
}
 8019304:	4618      	mov	r0, r3
 8019306:	3710      	adds	r7, #16
 8019308:	46bd      	mov	sp, r7
 801930a:	bd80      	pop	{r7, pc}

0801930c <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801930c:	b580      	push	{r7, lr}
 801930e:	b084      	sub	sp, #16
 8019310:	af00      	add	r7, sp, #0
 8019312:	6078      	str	r0, [r7, #4]
 8019314:	460b      	mov	r3, r1
 8019316:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8019318:	2300      	movs	r3, #0
 801931a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801931c:	2300      	movs	r3, #0
 801931e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8019320:	687b      	ldr	r3, [r7, #4]
 8019322:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8019326:	78fa      	ldrb	r2, [r7, #3]
 8019328:	4611      	mov	r1, r2
 801932a:	4618      	mov	r0, r3
 801932c:	f7ef fe7e 	bl	800902c <HAL_PCD_EP_ClrStall>
 8019330:	4603      	mov	r3, r0
 8019332:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8019334:	7bfb      	ldrb	r3, [r7, #15]
 8019336:	4618      	mov	r0, r3
 8019338:	f000 f8a8 	bl	801948c <USBD_Get_USB_Status>
 801933c:	4603      	mov	r3, r0
 801933e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8019340:	7bbb      	ldrb	r3, [r7, #14]
}
 8019342:	4618      	mov	r0, r3
 8019344:	3710      	adds	r7, #16
 8019346:	46bd      	mov	sp, r7
 8019348:	bd80      	pop	{r7, pc}

0801934a <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801934a:	b480      	push	{r7}
 801934c:	b085      	sub	sp, #20
 801934e:	af00      	add	r7, sp, #0
 8019350:	6078      	str	r0, [r7, #4]
 8019352:	460b      	mov	r3, r1
 8019354:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8019356:	687b      	ldr	r3, [r7, #4]
 8019358:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 801935c:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 801935e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8019362:	2b00      	cmp	r3, #0
 8019364:	da0b      	bge.n	801937e <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8019366:	78fb      	ldrb	r3, [r7, #3]
 8019368:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 801936c:	68f9      	ldr	r1, [r7, #12]
 801936e:	4613      	mov	r3, r2
 8019370:	00db      	lsls	r3, r3, #3
 8019372:	1a9b      	subs	r3, r3, r2
 8019374:	009b      	lsls	r3, r3, #2
 8019376:	440b      	add	r3, r1
 8019378:	333e      	adds	r3, #62	; 0x3e
 801937a:	781b      	ldrb	r3, [r3, #0]
 801937c:	e00b      	b.n	8019396 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 801937e:	78fb      	ldrb	r3, [r7, #3]
 8019380:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8019384:	68f9      	ldr	r1, [r7, #12]
 8019386:	4613      	mov	r3, r2
 8019388:	00db      	lsls	r3, r3, #3
 801938a:	1a9b      	subs	r3, r3, r2
 801938c:	009b      	lsls	r3, r3, #2
 801938e:	440b      	add	r3, r1
 8019390:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8019394:	781b      	ldrb	r3, [r3, #0]
  }
}
 8019396:	4618      	mov	r0, r3
 8019398:	3714      	adds	r7, #20
 801939a:	46bd      	mov	sp, r7
 801939c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80193a0:	4770      	bx	lr

080193a2 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 80193a2:	b580      	push	{r7, lr}
 80193a4:	b084      	sub	sp, #16
 80193a6:	af00      	add	r7, sp, #0
 80193a8:	6078      	str	r0, [r7, #4]
 80193aa:	460b      	mov	r3, r1
 80193ac:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80193ae:	2300      	movs	r3, #0
 80193b0:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80193b2:	2300      	movs	r3, #0
 80193b4:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 80193b6:	687b      	ldr	r3, [r7, #4]
 80193b8:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80193bc:	78fa      	ldrb	r2, [r7, #3]
 80193be:	4611      	mov	r1, r2
 80193c0:	4618      	mov	r0, r3
 80193c2:	f7ef fc4b 	bl	8008c5c <HAL_PCD_SetAddress>
 80193c6:	4603      	mov	r3, r0
 80193c8:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80193ca:	7bfb      	ldrb	r3, [r7, #15]
 80193cc:	4618      	mov	r0, r3
 80193ce:	f000 f85d 	bl	801948c <USBD_Get_USB_Status>
 80193d2:	4603      	mov	r3, r0
 80193d4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80193d6:	7bbb      	ldrb	r3, [r7, #14]
}
 80193d8:	4618      	mov	r0, r3
 80193da:	3710      	adds	r7, #16
 80193dc:	46bd      	mov	sp, r7
 80193de:	bd80      	pop	{r7, pc}

080193e0 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 80193e0:	b580      	push	{r7, lr}
 80193e2:	b086      	sub	sp, #24
 80193e4:	af00      	add	r7, sp, #0
 80193e6:	60f8      	str	r0, [r7, #12]
 80193e8:	607a      	str	r2, [r7, #4]
 80193ea:	603b      	str	r3, [r7, #0]
 80193ec:	460b      	mov	r3, r1
 80193ee:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80193f0:	2300      	movs	r3, #0
 80193f2:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80193f4:	2300      	movs	r3, #0
 80193f6:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 80193f8:	68fb      	ldr	r3, [r7, #12]
 80193fa:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 80193fe:	7af9      	ldrb	r1, [r7, #11]
 8019400:	683b      	ldr	r3, [r7, #0]
 8019402:	687a      	ldr	r2, [r7, #4]
 8019404:	f7ef fd64 	bl	8008ed0 <HAL_PCD_EP_Transmit>
 8019408:	4603      	mov	r3, r0
 801940a:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801940c:	7dfb      	ldrb	r3, [r7, #23]
 801940e:	4618      	mov	r0, r3
 8019410:	f000 f83c 	bl	801948c <USBD_Get_USB_Status>
 8019414:	4603      	mov	r3, r0
 8019416:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8019418:	7dbb      	ldrb	r3, [r7, #22]
}
 801941a:	4618      	mov	r0, r3
 801941c:	3718      	adds	r7, #24
 801941e:	46bd      	mov	sp, r7
 8019420:	bd80      	pop	{r7, pc}

08019422 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8019422:	b580      	push	{r7, lr}
 8019424:	b086      	sub	sp, #24
 8019426:	af00      	add	r7, sp, #0
 8019428:	60f8      	str	r0, [r7, #12]
 801942a:	607a      	str	r2, [r7, #4]
 801942c:	603b      	str	r3, [r7, #0]
 801942e:	460b      	mov	r3, r1
 8019430:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8019432:	2300      	movs	r3, #0
 8019434:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8019436:	2300      	movs	r3, #0
 8019438:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 801943a:	68fb      	ldr	r3, [r7, #12]
 801943c:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8019440:	7af9      	ldrb	r1, [r7, #11]
 8019442:	683b      	ldr	r3, [r7, #0]
 8019444:	687a      	ldr	r2, [r7, #4]
 8019446:	f7ef fce0 	bl	8008e0a <HAL_PCD_EP_Receive>
 801944a:	4603      	mov	r3, r0
 801944c:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801944e:	7dfb      	ldrb	r3, [r7, #23]
 8019450:	4618      	mov	r0, r3
 8019452:	f000 f81b 	bl	801948c <USBD_Get_USB_Status>
 8019456:	4603      	mov	r3, r0
 8019458:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 801945a:	7dbb      	ldrb	r3, [r7, #22]
}
 801945c:	4618      	mov	r0, r3
 801945e:	3718      	adds	r7, #24
 8019460:	46bd      	mov	sp, r7
 8019462:	bd80      	pop	{r7, pc}

08019464 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8019464:	b580      	push	{r7, lr}
 8019466:	b082      	sub	sp, #8
 8019468:	af00      	add	r7, sp, #0
 801946a:	6078      	str	r0, [r7, #4]
 801946c:	460b      	mov	r3, r1
 801946e:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8019470:	687b      	ldr	r3, [r7, #4]
 8019472:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8019476:	78fa      	ldrb	r2, [r7, #3]
 8019478:	4611      	mov	r1, r2
 801947a:	4618      	mov	r0, r3
 801947c:	f7ef fd10 	bl	8008ea0 <HAL_PCD_EP_GetRxCount>
 8019480:	4603      	mov	r3, r0
}
 8019482:	4618      	mov	r0, r3
 8019484:	3708      	adds	r7, #8
 8019486:	46bd      	mov	sp, r7
 8019488:	bd80      	pop	{r7, pc}
	...

0801948c <USBD_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 801948c:	b480      	push	{r7}
 801948e:	b085      	sub	sp, #20
 8019490:	af00      	add	r7, sp, #0
 8019492:	4603      	mov	r3, r0
 8019494:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8019496:	2300      	movs	r3, #0
 8019498:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 801949a:	79fb      	ldrb	r3, [r7, #7]
 801949c:	2b03      	cmp	r3, #3
 801949e:	d817      	bhi.n	80194d0 <USBD_Get_USB_Status+0x44>
 80194a0:	a201      	add	r2, pc, #4	; (adr r2, 80194a8 <USBD_Get_USB_Status+0x1c>)
 80194a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80194a6:	bf00      	nop
 80194a8:	080194b9 	.word	0x080194b9
 80194ac:	080194bf 	.word	0x080194bf
 80194b0:	080194c5 	.word	0x080194c5
 80194b4:	080194cb 	.word	0x080194cb
  {
    case HAL_OK :
      usb_status = USBD_OK;
 80194b8:	2300      	movs	r3, #0
 80194ba:	73fb      	strb	r3, [r7, #15]
    break;
 80194bc:	e00b      	b.n	80194d6 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 80194be:	2303      	movs	r3, #3
 80194c0:	73fb      	strb	r3, [r7, #15]
    break;
 80194c2:	e008      	b.n	80194d6 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 80194c4:	2301      	movs	r3, #1
 80194c6:	73fb      	strb	r3, [r7, #15]
    break;
 80194c8:	e005      	b.n	80194d6 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 80194ca:	2303      	movs	r3, #3
 80194cc:	73fb      	strb	r3, [r7, #15]
    break;
 80194ce:	e002      	b.n	80194d6 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 80194d0:	2303      	movs	r3, #3
 80194d2:	73fb      	strb	r3, [r7, #15]
    break;
 80194d4:	bf00      	nop
  }
  return usb_status;
 80194d6:	7bfb      	ldrb	r3, [r7, #15]
}
 80194d8:	4618      	mov	r0, r3
 80194da:	3714      	adds	r7, #20
 80194dc:	46bd      	mov	sp, r7
 80194de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80194e2:	4770      	bx	lr

080194e4 <__errno>:
 80194e4:	4b01      	ldr	r3, [pc, #4]	; (80194ec <__errno+0x8>)
 80194e6:	6818      	ldr	r0, [r3, #0]
 80194e8:	4770      	bx	lr
 80194ea:	bf00      	nop
 80194ec:	24000178 	.word	0x24000178

080194f0 <__libc_init_array>:
 80194f0:	b570      	push	{r4, r5, r6, lr}
 80194f2:	4e0d      	ldr	r6, [pc, #52]	; (8019528 <__libc_init_array+0x38>)
 80194f4:	4c0d      	ldr	r4, [pc, #52]	; (801952c <__libc_init_array+0x3c>)
 80194f6:	1ba4      	subs	r4, r4, r6
 80194f8:	10a4      	asrs	r4, r4, #2
 80194fa:	2500      	movs	r5, #0
 80194fc:	42a5      	cmp	r5, r4
 80194fe:	d109      	bne.n	8019514 <__libc_init_array+0x24>
 8019500:	4e0b      	ldr	r6, [pc, #44]	; (8019530 <__libc_init_array+0x40>)
 8019502:	4c0c      	ldr	r4, [pc, #48]	; (8019534 <__libc_init_array+0x44>)
 8019504:	f001 f97a 	bl	801a7fc <_init>
 8019508:	1ba4      	subs	r4, r4, r6
 801950a:	10a4      	asrs	r4, r4, #2
 801950c:	2500      	movs	r5, #0
 801950e:	42a5      	cmp	r5, r4
 8019510:	d105      	bne.n	801951e <__libc_init_array+0x2e>
 8019512:	bd70      	pop	{r4, r5, r6, pc}
 8019514:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8019518:	4798      	blx	r3
 801951a:	3501      	adds	r5, #1
 801951c:	e7ee      	b.n	80194fc <__libc_init_array+0xc>
 801951e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8019522:	4798      	blx	r3
 8019524:	3501      	adds	r5, #1
 8019526:	e7f2      	b.n	801950e <__libc_init_array+0x1e>
 8019528:	0801b194 	.word	0x0801b194
 801952c:	0801b194 	.word	0x0801b194
 8019530:	0801b194 	.word	0x0801b194
 8019534:	0801b198 	.word	0x0801b198

08019538 <malloc>:
 8019538:	4b02      	ldr	r3, [pc, #8]	; (8019544 <malloc+0xc>)
 801953a:	4601      	mov	r1, r0
 801953c:	6818      	ldr	r0, [r3, #0]
 801953e:	f000 b86d 	b.w	801961c <_malloc_r>
 8019542:	bf00      	nop
 8019544:	24000178 	.word	0x24000178

08019548 <free>:
 8019548:	4b02      	ldr	r3, [pc, #8]	; (8019554 <free+0xc>)
 801954a:	4601      	mov	r1, r0
 801954c:	6818      	ldr	r0, [r3, #0]
 801954e:	f000 b817 	b.w	8019580 <_free_r>
 8019552:	bf00      	nop
 8019554:	24000178 	.word	0x24000178

08019558 <memcpy>:
 8019558:	b510      	push	{r4, lr}
 801955a:	1e43      	subs	r3, r0, #1
 801955c:	440a      	add	r2, r1
 801955e:	4291      	cmp	r1, r2
 8019560:	d100      	bne.n	8019564 <memcpy+0xc>
 8019562:	bd10      	pop	{r4, pc}
 8019564:	f811 4b01 	ldrb.w	r4, [r1], #1
 8019568:	f803 4f01 	strb.w	r4, [r3, #1]!
 801956c:	e7f7      	b.n	801955e <memcpy+0x6>

0801956e <memset>:
 801956e:	4402      	add	r2, r0
 8019570:	4603      	mov	r3, r0
 8019572:	4293      	cmp	r3, r2
 8019574:	d100      	bne.n	8019578 <memset+0xa>
 8019576:	4770      	bx	lr
 8019578:	f803 1b01 	strb.w	r1, [r3], #1
 801957c:	e7f9      	b.n	8019572 <memset+0x4>
	...

08019580 <_free_r>:
 8019580:	b538      	push	{r3, r4, r5, lr}
 8019582:	4605      	mov	r5, r0
 8019584:	2900      	cmp	r1, #0
 8019586:	d045      	beq.n	8019614 <_free_r+0x94>
 8019588:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801958c:	1f0c      	subs	r4, r1, #4
 801958e:	2b00      	cmp	r3, #0
 8019590:	bfb8      	it	lt
 8019592:	18e4      	addlt	r4, r4, r3
 8019594:	f000 fc22 	bl	8019ddc <__malloc_lock>
 8019598:	4a1f      	ldr	r2, [pc, #124]	; (8019618 <_free_r+0x98>)
 801959a:	6813      	ldr	r3, [r2, #0]
 801959c:	4610      	mov	r0, r2
 801959e:	b933      	cbnz	r3, 80195ae <_free_r+0x2e>
 80195a0:	6063      	str	r3, [r4, #4]
 80195a2:	6014      	str	r4, [r2, #0]
 80195a4:	4628      	mov	r0, r5
 80195a6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80195aa:	f000 bc18 	b.w	8019dde <__malloc_unlock>
 80195ae:	42a3      	cmp	r3, r4
 80195b0:	d90c      	bls.n	80195cc <_free_r+0x4c>
 80195b2:	6821      	ldr	r1, [r4, #0]
 80195b4:	1862      	adds	r2, r4, r1
 80195b6:	4293      	cmp	r3, r2
 80195b8:	bf04      	itt	eq
 80195ba:	681a      	ldreq	r2, [r3, #0]
 80195bc:	685b      	ldreq	r3, [r3, #4]
 80195be:	6063      	str	r3, [r4, #4]
 80195c0:	bf04      	itt	eq
 80195c2:	1852      	addeq	r2, r2, r1
 80195c4:	6022      	streq	r2, [r4, #0]
 80195c6:	6004      	str	r4, [r0, #0]
 80195c8:	e7ec      	b.n	80195a4 <_free_r+0x24>
 80195ca:	4613      	mov	r3, r2
 80195cc:	685a      	ldr	r2, [r3, #4]
 80195ce:	b10a      	cbz	r2, 80195d4 <_free_r+0x54>
 80195d0:	42a2      	cmp	r2, r4
 80195d2:	d9fa      	bls.n	80195ca <_free_r+0x4a>
 80195d4:	6819      	ldr	r1, [r3, #0]
 80195d6:	1858      	adds	r0, r3, r1
 80195d8:	42a0      	cmp	r0, r4
 80195da:	d10b      	bne.n	80195f4 <_free_r+0x74>
 80195dc:	6820      	ldr	r0, [r4, #0]
 80195de:	4401      	add	r1, r0
 80195e0:	1858      	adds	r0, r3, r1
 80195e2:	4282      	cmp	r2, r0
 80195e4:	6019      	str	r1, [r3, #0]
 80195e6:	d1dd      	bne.n	80195a4 <_free_r+0x24>
 80195e8:	6810      	ldr	r0, [r2, #0]
 80195ea:	6852      	ldr	r2, [r2, #4]
 80195ec:	605a      	str	r2, [r3, #4]
 80195ee:	4401      	add	r1, r0
 80195f0:	6019      	str	r1, [r3, #0]
 80195f2:	e7d7      	b.n	80195a4 <_free_r+0x24>
 80195f4:	d902      	bls.n	80195fc <_free_r+0x7c>
 80195f6:	230c      	movs	r3, #12
 80195f8:	602b      	str	r3, [r5, #0]
 80195fa:	e7d3      	b.n	80195a4 <_free_r+0x24>
 80195fc:	6820      	ldr	r0, [r4, #0]
 80195fe:	1821      	adds	r1, r4, r0
 8019600:	428a      	cmp	r2, r1
 8019602:	bf04      	itt	eq
 8019604:	6811      	ldreq	r1, [r2, #0]
 8019606:	6852      	ldreq	r2, [r2, #4]
 8019608:	6062      	str	r2, [r4, #4]
 801960a:	bf04      	itt	eq
 801960c:	1809      	addeq	r1, r1, r0
 801960e:	6021      	streq	r1, [r4, #0]
 8019610:	605c      	str	r4, [r3, #4]
 8019612:	e7c7      	b.n	80195a4 <_free_r+0x24>
 8019614:	bd38      	pop	{r3, r4, r5, pc}
 8019616:	bf00      	nop
 8019618:	24000b90 	.word	0x24000b90

0801961c <_malloc_r>:
 801961c:	b570      	push	{r4, r5, r6, lr}
 801961e:	1ccd      	adds	r5, r1, #3
 8019620:	f025 0503 	bic.w	r5, r5, #3
 8019624:	3508      	adds	r5, #8
 8019626:	2d0c      	cmp	r5, #12
 8019628:	bf38      	it	cc
 801962a:	250c      	movcc	r5, #12
 801962c:	2d00      	cmp	r5, #0
 801962e:	4606      	mov	r6, r0
 8019630:	db01      	blt.n	8019636 <_malloc_r+0x1a>
 8019632:	42a9      	cmp	r1, r5
 8019634:	d903      	bls.n	801963e <_malloc_r+0x22>
 8019636:	230c      	movs	r3, #12
 8019638:	6033      	str	r3, [r6, #0]
 801963a:	2000      	movs	r0, #0
 801963c:	bd70      	pop	{r4, r5, r6, pc}
 801963e:	f000 fbcd 	bl	8019ddc <__malloc_lock>
 8019642:	4a21      	ldr	r2, [pc, #132]	; (80196c8 <_malloc_r+0xac>)
 8019644:	6814      	ldr	r4, [r2, #0]
 8019646:	4621      	mov	r1, r4
 8019648:	b991      	cbnz	r1, 8019670 <_malloc_r+0x54>
 801964a:	4c20      	ldr	r4, [pc, #128]	; (80196cc <_malloc_r+0xb0>)
 801964c:	6823      	ldr	r3, [r4, #0]
 801964e:	b91b      	cbnz	r3, 8019658 <_malloc_r+0x3c>
 8019650:	4630      	mov	r0, r6
 8019652:	f000 f8b9 	bl	80197c8 <_sbrk_r>
 8019656:	6020      	str	r0, [r4, #0]
 8019658:	4629      	mov	r1, r5
 801965a:	4630      	mov	r0, r6
 801965c:	f000 f8b4 	bl	80197c8 <_sbrk_r>
 8019660:	1c43      	adds	r3, r0, #1
 8019662:	d124      	bne.n	80196ae <_malloc_r+0x92>
 8019664:	230c      	movs	r3, #12
 8019666:	6033      	str	r3, [r6, #0]
 8019668:	4630      	mov	r0, r6
 801966a:	f000 fbb8 	bl	8019dde <__malloc_unlock>
 801966e:	e7e4      	b.n	801963a <_malloc_r+0x1e>
 8019670:	680b      	ldr	r3, [r1, #0]
 8019672:	1b5b      	subs	r3, r3, r5
 8019674:	d418      	bmi.n	80196a8 <_malloc_r+0x8c>
 8019676:	2b0b      	cmp	r3, #11
 8019678:	d90f      	bls.n	801969a <_malloc_r+0x7e>
 801967a:	600b      	str	r3, [r1, #0]
 801967c:	50cd      	str	r5, [r1, r3]
 801967e:	18cc      	adds	r4, r1, r3
 8019680:	4630      	mov	r0, r6
 8019682:	f000 fbac 	bl	8019dde <__malloc_unlock>
 8019686:	f104 000b 	add.w	r0, r4, #11
 801968a:	1d23      	adds	r3, r4, #4
 801968c:	f020 0007 	bic.w	r0, r0, #7
 8019690:	1ac3      	subs	r3, r0, r3
 8019692:	d0d3      	beq.n	801963c <_malloc_r+0x20>
 8019694:	425a      	negs	r2, r3
 8019696:	50e2      	str	r2, [r4, r3]
 8019698:	e7d0      	b.n	801963c <_malloc_r+0x20>
 801969a:	428c      	cmp	r4, r1
 801969c:	684b      	ldr	r3, [r1, #4]
 801969e:	bf16      	itet	ne
 80196a0:	6063      	strne	r3, [r4, #4]
 80196a2:	6013      	streq	r3, [r2, #0]
 80196a4:	460c      	movne	r4, r1
 80196a6:	e7eb      	b.n	8019680 <_malloc_r+0x64>
 80196a8:	460c      	mov	r4, r1
 80196aa:	6849      	ldr	r1, [r1, #4]
 80196ac:	e7cc      	b.n	8019648 <_malloc_r+0x2c>
 80196ae:	1cc4      	adds	r4, r0, #3
 80196b0:	f024 0403 	bic.w	r4, r4, #3
 80196b4:	42a0      	cmp	r0, r4
 80196b6:	d005      	beq.n	80196c4 <_malloc_r+0xa8>
 80196b8:	1a21      	subs	r1, r4, r0
 80196ba:	4630      	mov	r0, r6
 80196bc:	f000 f884 	bl	80197c8 <_sbrk_r>
 80196c0:	3001      	adds	r0, #1
 80196c2:	d0cf      	beq.n	8019664 <_malloc_r+0x48>
 80196c4:	6025      	str	r5, [r4, #0]
 80196c6:	e7db      	b.n	8019680 <_malloc_r+0x64>
 80196c8:	24000b90 	.word	0x24000b90
 80196cc:	24000b94 	.word	0x24000b94

080196d0 <iprintf>:
 80196d0:	b40f      	push	{r0, r1, r2, r3}
 80196d2:	4b0a      	ldr	r3, [pc, #40]	; (80196fc <iprintf+0x2c>)
 80196d4:	b513      	push	{r0, r1, r4, lr}
 80196d6:	681c      	ldr	r4, [r3, #0]
 80196d8:	b124      	cbz	r4, 80196e4 <iprintf+0x14>
 80196da:	69a3      	ldr	r3, [r4, #24]
 80196dc:	b913      	cbnz	r3, 80196e4 <iprintf+0x14>
 80196de:	4620      	mov	r0, r4
 80196e0:	f000 fa8e 	bl	8019c00 <__sinit>
 80196e4:	ab05      	add	r3, sp, #20
 80196e6:	9a04      	ldr	r2, [sp, #16]
 80196e8:	68a1      	ldr	r1, [r4, #8]
 80196ea:	9301      	str	r3, [sp, #4]
 80196ec:	4620      	mov	r0, r4
 80196ee:	f000 fcf3 	bl	801a0d8 <_vfiprintf_r>
 80196f2:	b002      	add	sp, #8
 80196f4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80196f8:	b004      	add	sp, #16
 80196fa:	4770      	bx	lr
 80196fc:	24000178 	.word	0x24000178

08019700 <_puts_r>:
 8019700:	b570      	push	{r4, r5, r6, lr}
 8019702:	460e      	mov	r6, r1
 8019704:	4605      	mov	r5, r0
 8019706:	b118      	cbz	r0, 8019710 <_puts_r+0x10>
 8019708:	6983      	ldr	r3, [r0, #24]
 801970a:	b90b      	cbnz	r3, 8019710 <_puts_r+0x10>
 801970c:	f000 fa78 	bl	8019c00 <__sinit>
 8019710:	69ab      	ldr	r3, [r5, #24]
 8019712:	68ac      	ldr	r4, [r5, #8]
 8019714:	b913      	cbnz	r3, 801971c <_puts_r+0x1c>
 8019716:	4628      	mov	r0, r5
 8019718:	f000 fa72 	bl	8019c00 <__sinit>
 801971c:	4b23      	ldr	r3, [pc, #140]	; (80197ac <_puts_r+0xac>)
 801971e:	429c      	cmp	r4, r3
 8019720:	d117      	bne.n	8019752 <_puts_r+0x52>
 8019722:	686c      	ldr	r4, [r5, #4]
 8019724:	89a3      	ldrh	r3, [r4, #12]
 8019726:	071b      	lsls	r3, r3, #28
 8019728:	d51d      	bpl.n	8019766 <_puts_r+0x66>
 801972a:	6923      	ldr	r3, [r4, #16]
 801972c:	b1db      	cbz	r3, 8019766 <_puts_r+0x66>
 801972e:	3e01      	subs	r6, #1
 8019730:	68a3      	ldr	r3, [r4, #8]
 8019732:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8019736:	3b01      	subs	r3, #1
 8019738:	60a3      	str	r3, [r4, #8]
 801973a:	b9e9      	cbnz	r1, 8019778 <_puts_r+0x78>
 801973c:	2b00      	cmp	r3, #0
 801973e:	da2e      	bge.n	801979e <_puts_r+0x9e>
 8019740:	4622      	mov	r2, r4
 8019742:	210a      	movs	r1, #10
 8019744:	4628      	mov	r0, r5
 8019746:	f000 f8ab 	bl	80198a0 <__swbuf_r>
 801974a:	3001      	adds	r0, #1
 801974c:	d011      	beq.n	8019772 <_puts_r+0x72>
 801974e:	200a      	movs	r0, #10
 8019750:	e011      	b.n	8019776 <_puts_r+0x76>
 8019752:	4b17      	ldr	r3, [pc, #92]	; (80197b0 <_puts_r+0xb0>)
 8019754:	429c      	cmp	r4, r3
 8019756:	d101      	bne.n	801975c <_puts_r+0x5c>
 8019758:	68ac      	ldr	r4, [r5, #8]
 801975a:	e7e3      	b.n	8019724 <_puts_r+0x24>
 801975c:	4b15      	ldr	r3, [pc, #84]	; (80197b4 <_puts_r+0xb4>)
 801975e:	429c      	cmp	r4, r3
 8019760:	bf08      	it	eq
 8019762:	68ec      	ldreq	r4, [r5, #12]
 8019764:	e7de      	b.n	8019724 <_puts_r+0x24>
 8019766:	4621      	mov	r1, r4
 8019768:	4628      	mov	r0, r5
 801976a:	f000 f8eb 	bl	8019944 <__swsetup_r>
 801976e:	2800      	cmp	r0, #0
 8019770:	d0dd      	beq.n	801972e <_puts_r+0x2e>
 8019772:	f04f 30ff 	mov.w	r0, #4294967295
 8019776:	bd70      	pop	{r4, r5, r6, pc}
 8019778:	2b00      	cmp	r3, #0
 801977a:	da04      	bge.n	8019786 <_puts_r+0x86>
 801977c:	69a2      	ldr	r2, [r4, #24]
 801977e:	429a      	cmp	r2, r3
 8019780:	dc06      	bgt.n	8019790 <_puts_r+0x90>
 8019782:	290a      	cmp	r1, #10
 8019784:	d004      	beq.n	8019790 <_puts_r+0x90>
 8019786:	6823      	ldr	r3, [r4, #0]
 8019788:	1c5a      	adds	r2, r3, #1
 801978a:	6022      	str	r2, [r4, #0]
 801978c:	7019      	strb	r1, [r3, #0]
 801978e:	e7cf      	b.n	8019730 <_puts_r+0x30>
 8019790:	4622      	mov	r2, r4
 8019792:	4628      	mov	r0, r5
 8019794:	f000 f884 	bl	80198a0 <__swbuf_r>
 8019798:	3001      	adds	r0, #1
 801979a:	d1c9      	bne.n	8019730 <_puts_r+0x30>
 801979c:	e7e9      	b.n	8019772 <_puts_r+0x72>
 801979e:	6823      	ldr	r3, [r4, #0]
 80197a0:	200a      	movs	r0, #10
 80197a2:	1c5a      	adds	r2, r3, #1
 80197a4:	6022      	str	r2, [r4, #0]
 80197a6:	7018      	strb	r0, [r3, #0]
 80197a8:	e7e5      	b.n	8019776 <_puts_r+0x76>
 80197aa:	bf00      	nop
 80197ac:	0801b118 	.word	0x0801b118
 80197b0:	0801b138 	.word	0x0801b138
 80197b4:	0801b0f8 	.word	0x0801b0f8

080197b8 <puts>:
 80197b8:	4b02      	ldr	r3, [pc, #8]	; (80197c4 <puts+0xc>)
 80197ba:	4601      	mov	r1, r0
 80197bc:	6818      	ldr	r0, [r3, #0]
 80197be:	f7ff bf9f 	b.w	8019700 <_puts_r>
 80197c2:	bf00      	nop
 80197c4:	24000178 	.word	0x24000178

080197c8 <_sbrk_r>:
 80197c8:	b538      	push	{r3, r4, r5, lr}
 80197ca:	4c06      	ldr	r4, [pc, #24]	; (80197e4 <_sbrk_r+0x1c>)
 80197cc:	2300      	movs	r3, #0
 80197ce:	4605      	mov	r5, r0
 80197d0:	4608      	mov	r0, r1
 80197d2:	6023      	str	r3, [r4, #0]
 80197d4:	f7ea fe02 	bl	80043dc <_sbrk>
 80197d8:	1c43      	adds	r3, r0, #1
 80197da:	d102      	bne.n	80197e2 <_sbrk_r+0x1a>
 80197dc:	6823      	ldr	r3, [r4, #0]
 80197de:	b103      	cbz	r3, 80197e2 <_sbrk_r+0x1a>
 80197e0:	602b      	str	r3, [r5, #0]
 80197e2:	bd38      	pop	{r3, r4, r5, pc}
 80197e4:	240024ac 	.word	0x240024ac

080197e8 <sniprintf>:
 80197e8:	b40c      	push	{r2, r3}
 80197ea:	b530      	push	{r4, r5, lr}
 80197ec:	4b17      	ldr	r3, [pc, #92]	; (801984c <sniprintf+0x64>)
 80197ee:	1e0c      	subs	r4, r1, #0
 80197f0:	b09d      	sub	sp, #116	; 0x74
 80197f2:	681d      	ldr	r5, [r3, #0]
 80197f4:	da08      	bge.n	8019808 <sniprintf+0x20>
 80197f6:	238b      	movs	r3, #139	; 0x8b
 80197f8:	602b      	str	r3, [r5, #0]
 80197fa:	f04f 30ff 	mov.w	r0, #4294967295
 80197fe:	b01d      	add	sp, #116	; 0x74
 8019800:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8019804:	b002      	add	sp, #8
 8019806:	4770      	bx	lr
 8019808:	f44f 7302 	mov.w	r3, #520	; 0x208
 801980c:	f8ad 3014 	strh.w	r3, [sp, #20]
 8019810:	bf14      	ite	ne
 8019812:	f104 33ff 	addne.w	r3, r4, #4294967295
 8019816:	4623      	moveq	r3, r4
 8019818:	9304      	str	r3, [sp, #16]
 801981a:	9307      	str	r3, [sp, #28]
 801981c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8019820:	9002      	str	r0, [sp, #8]
 8019822:	9006      	str	r0, [sp, #24]
 8019824:	f8ad 3016 	strh.w	r3, [sp, #22]
 8019828:	9a20      	ldr	r2, [sp, #128]	; 0x80
 801982a:	ab21      	add	r3, sp, #132	; 0x84
 801982c:	a902      	add	r1, sp, #8
 801982e:	4628      	mov	r0, r5
 8019830:	9301      	str	r3, [sp, #4]
 8019832:	f000 fb2f 	bl	8019e94 <_svfiprintf_r>
 8019836:	1c43      	adds	r3, r0, #1
 8019838:	bfbc      	itt	lt
 801983a:	238b      	movlt	r3, #139	; 0x8b
 801983c:	602b      	strlt	r3, [r5, #0]
 801983e:	2c00      	cmp	r4, #0
 8019840:	d0dd      	beq.n	80197fe <sniprintf+0x16>
 8019842:	9b02      	ldr	r3, [sp, #8]
 8019844:	2200      	movs	r2, #0
 8019846:	701a      	strb	r2, [r3, #0]
 8019848:	e7d9      	b.n	80197fe <sniprintf+0x16>
 801984a:	bf00      	nop
 801984c:	24000178 	.word	0x24000178

08019850 <siprintf>:
 8019850:	b40e      	push	{r1, r2, r3}
 8019852:	b500      	push	{lr}
 8019854:	b09c      	sub	sp, #112	; 0x70
 8019856:	ab1d      	add	r3, sp, #116	; 0x74
 8019858:	9002      	str	r0, [sp, #8]
 801985a:	9006      	str	r0, [sp, #24]
 801985c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8019860:	4809      	ldr	r0, [pc, #36]	; (8019888 <siprintf+0x38>)
 8019862:	9107      	str	r1, [sp, #28]
 8019864:	9104      	str	r1, [sp, #16]
 8019866:	4909      	ldr	r1, [pc, #36]	; (801988c <siprintf+0x3c>)
 8019868:	f853 2b04 	ldr.w	r2, [r3], #4
 801986c:	9105      	str	r1, [sp, #20]
 801986e:	6800      	ldr	r0, [r0, #0]
 8019870:	9301      	str	r3, [sp, #4]
 8019872:	a902      	add	r1, sp, #8
 8019874:	f000 fb0e 	bl	8019e94 <_svfiprintf_r>
 8019878:	9b02      	ldr	r3, [sp, #8]
 801987a:	2200      	movs	r2, #0
 801987c:	701a      	strb	r2, [r3, #0]
 801987e:	b01c      	add	sp, #112	; 0x70
 8019880:	f85d eb04 	ldr.w	lr, [sp], #4
 8019884:	b003      	add	sp, #12
 8019886:	4770      	bx	lr
 8019888:	24000178 	.word	0x24000178
 801988c:	ffff0208 	.word	0xffff0208

08019890 <strcpy>:
 8019890:	4603      	mov	r3, r0
 8019892:	f811 2b01 	ldrb.w	r2, [r1], #1
 8019896:	f803 2b01 	strb.w	r2, [r3], #1
 801989a:	2a00      	cmp	r2, #0
 801989c:	d1f9      	bne.n	8019892 <strcpy+0x2>
 801989e:	4770      	bx	lr

080198a0 <__swbuf_r>:
 80198a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80198a2:	460e      	mov	r6, r1
 80198a4:	4614      	mov	r4, r2
 80198a6:	4605      	mov	r5, r0
 80198a8:	b118      	cbz	r0, 80198b2 <__swbuf_r+0x12>
 80198aa:	6983      	ldr	r3, [r0, #24]
 80198ac:	b90b      	cbnz	r3, 80198b2 <__swbuf_r+0x12>
 80198ae:	f000 f9a7 	bl	8019c00 <__sinit>
 80198b2:	4b21      	ldr	r3, [pc, #132]	; (8019938 <__swbuf_r+0x98>)
 80198b4:	429c      	cmp	r4, r3
 80198b6:	d12a      	bne.n	801990e <__swbuf_r+0x6e>
 80198b8:	686c      	ldr	r4, [r5, #4]
 80198ba:	69a3      	ldr	r3, [r4, #24]
 80198bc:	60a3      	str	r3, [r4, #8]
 80198be:	89a3      	ldrh	r3, [r4, #12]
 80198c0:	071a      	lsls	r2, r3, #28
 80198c2:	d52e      	bpl.n	8019922 <__swbuf_r+0x82>
 80198c4:	6923      	ldr	r3, [r4, #16]
 80198c6:	b363      	cbz	r3, 8019922 <__swbuf_r+0x82>
 80198c8:	6923      	ldr	r3, [r4, #16]
 80198ca:	6820      	ldr	r0, [r4, #0]
 80198cc:	1ac0      	subs	r0, r0, r3
 80198ce:	6963      	ldr	r3, [r4, #20]
 80198d0:	b2f6      	uxtb	r6, r6
 80198d2:	4283      	cmp	r3, r0
 80198d4:	4637      	mov	r7, r6
 80198d6:	dc04      	bgt.n	80198e2 <__swbuf_r+0x42>
 80198d8:	4621      	mov	r1, r4
 80198da:	4628      	mov	r0, r5
 80198dc:	f000 f926 	bl	8019b2c <_fflush_r>
 80198e0:	bb28      	cbnz	r0, 801992e <__swbuf_r+0x8e>
 80198e2:	68a3      	ldr	r3, [r4, #8]
 80198e4:	3b01      	subs	r3, #1
 80198e6:	60a3      	str	r3, [r4, #8]
 80198e8:	6823      	ldr	r3, [r4, #0]
 80198ea:	1c5a      	adds	r2, r3, #1
 80198ec:	6022      	str	r2, [r4, #0]
 80198ee:	701e      	strb	r6, [r3, #0]
 80198f0:	6963      	ldr	r3, [r4, #20]
 80198f2:	3001      	adds	r0, #1
 80198f4:	4283      	cmp	r3, r0
 80198f6:	d004      	beq.n	8019902 <__swbuf_r+0x62>
 80198f8:	89a3      	ldrh	r3, [r4, #12]
 80198fa:	07db      	lsls	r3, r3, #31
 80198fc:	d519      	bpl.n	8019932 <__swbuf_r+0x92>
 80198fe:	2e0a      	cmp	r6, #10
 8019900:	d117      	bne.n	8019932 <__swbuf_r+0x92>
 8019902:	4621      	mov	r1, r4
 8019904:	4628      	mov	r0, r5
 8019906:	f000 f911 	bl	8019b2c <_fflush_r>
 801990a:	b190      	cbz	r0, 8019932 <__swbuf_r+0x92>
 801990c:	e00f      	b.n	801992e <__swbuf_r+0x8e>
 801990e:	4b0b      	ldr	r3, [pc, #44]	; (801993c <__swbuf_r+0x9c>)
 8019910:	429c      	cmp	r4, r3
 8019912:	d101      	bne.n	8019918 <__swbuf_r+0x78>
 8019914:	68ac      	ldr	r4, [r5, #8]
 8019916:	e7d0      	b.n	80198ba <__swbuf_r+0x1a>
 8019918:	4b09      	ldr	r3, [pc, #36]	; (8019940 <__swbuf_r+0xa0>)
 801991a:	429c      	cmp	r4, r3
 801991c:	bf08      	it	eq
 801991e:	68ec      	ldreq	r4, [r5, #12]
 8019920:	e7cb      	b.n	80198ba <__swbuf_r+0x1a>
 8019922:	4621      	mov	r1, r4
 8019924:	4628      	mov	r0, r5
 8019926:	f000 f80d 	bl	8019944 <__swsetup_r>
 801992a:	2800      	cmp	r0, #0
 801992c:	d0cc      	beq.n	80198c8 <__swbuf_r+0x28>
 801992e:	f04f 37ff 	mov.w	r7, #4294967295
 8019932:	4638      	mov	r0, r7
 8019934:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8019936:	bf00      	nop
 8019938:	0801b118 	.word	0x0801b118
 801993c:	0801b138 	.word	0x0801b138
 8019940:	0801b0f8 	.word	0x0801b0f8

08019944 <__swsetup_r>:
 8019944:	4b32      	ldr	r3, [pc, #200]	; (8019a10 <__swsetup_r+0xcc>)
 8019946:	b570      	push	{r4, r5, r6, lr}
 8019948:	681d      	ldr	r5, [r3, #0]
 801994a:	4606      	mov	r6, r0
 801994c:	460c      	mov	r4, r1
 801994e:	b125      	cbz	r5, 801995a <__swsetup_r+0x16>
 8019950:	69ab      	ldr	r3, [r5, #24]
 8019952:	b913      	cbnz	r3, 801995a <__swsetup_r+0x16>
 8019954:	4628      	mov	r0, r5
 8019956:	f000 f953 	bl	8019c00 <__sinit>
 801995a:	4b2e      	ldr	r3, [pc, #184]	; (8019a14 <__swsetup_r+0xd0>)
 801995c:	429c      	cmp	r4, r3
 801995e:	d10f      	bne.n	8019980 <__swsetup_r+0x3c>
 8019960:	686c      	ldr	r4, [r5, #4]
 8019962:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8019966:	b29a      	uxth	r2, r3
 8019968:	0715      	lsls	r5, r2, #28
 801996a:	d42c      	bmi.n	80199c6 <__swsetup_r+0x82>
 801996c:	06d0      	lsls	r0, r2, #27
 801996e:	d411      	bmi.n	8019994 <__swsetup_r+0x50>
 8019970:	2209      	movs	r2, #9
 8019972:	6032      	str	r2, [r6, #0]
 8019974:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8019978:	81a3      	strh	r3, [r4, #12]
 801997a:	f04f 30ff 	mov.w	r0, #4294967295
 801997e:	e03e      	b.n	80199fe <__swsetup_r+0xba>
 8019980:	4b25      	ldr	r3, [pc, #148]	; (8019a18 <__swsetup_r+0xd4>)
 8019982:	429c      	cmp	r4, r3
 8019984:	d101      	bne.n	801998a <__swsetup_r+0x46>
 8019986:	68ac      	ldr	r4, [r5, #8]
 8019988:	e7eb      	b.n	8019962 <__swsetup_r+0x1e>
 801998a:	4b24      	ldr	r3, [pc, #144]	; (8019a1c <__swsetup_r+0xd8>)
 801998c:	429c      	cmp	r4, r3
 801998e:	bf08      	it	eq
 8019990:	68ec      	ldreq	r4, [r5, #12]
 8019992:	e7e6      	b.n	8019962 <__swsetup_r+0x1e>
 8019994:	0751      	lsls	r1, r2, #29
 8019996:	d512      	bpl.n	80199be <__swsetup_r+0x7a>
 8019998:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801999a:	b141      	cbz	r1, 80199ae <__swsetup_r+0x6a>
 801999c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80199a0:	4299      	cmp	r1, r3
 80199a2:	d002      	beq.n	80199aa <__swsetup_r+0x66>
 80199a4:	4630      	mov	r0, r6
 80199a6:	f7ff fdeb 	bl	8019580 <_free_r>
 80199aa:	2300      	movs	r3, #0
 80199ac:	6363      	str	r3, [r4, #52]	; 0x34
 80199ae:	89a3      	ldrh	r3, [r4, #12]
 80199b0:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80199b4:	81a3      	strh	r3, [r4, #12]
 80199b6:	2300      	movs	r3, #0
 80199b8:	6063      	str	r3, [r4, #4]
 80199ba:	6923      	ldr	r3, [r4, #16]
 80199bc:	6023      	str	r3, [r4, #0]
 80199be:	89a3      	ldrh	r3, [r4, #12]
 80199c0:	f043 0308 	orr.w	r3, r3, #8
 80199c4:	81a3      	strh	r3, [r4, #12]
 80199c6:	6923      	ldr	r3, [r4, #16]
 80199c8:	b94b      	cbnz	r3, 80199de <__swsetup_r+0x9a>
 80199ca:	89a3      	ldrh	r3, [r4, #12]
 80199cc:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80199d0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80199d4:	d003      	beq.n	80199de <__swsetup_r+0x9a>
 80199d6:	4621      	mov	r1, r4
 80199d8:	4630      	mov	r0, r6
 80199da:	f000 f9bf 	bl	8019d5c <__smakebuf_r>
 80199de:	89a2      	ldrh	r2, [r4, #12]
 80199e0:	f012 0301 	ands.w	r3, r2, #1
 80199e4:	d00c      	beq.n	8019a00 <__swsetup_r+0xbc>
 80199e6:	2300      	movs	r3, #0
 80199e8:	60a3      	str	r3, [r4, #8]
 80199ea:	6963      	ldr	r3, [r4, #20]
 80199ec:	425b      	negs	r3, r3
 80199ee:	61a3      	str	r3, [r4, #24]
 80199f0:	6923      	ldr	r3, [r4, #16]
 80199f2:	b953      	cbnz	r3, 8019a0a <__swsetup_r+0xc6>
 80199f4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80199f8:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 80199fc:	d1ba      	bne.n	8019974 <__swsetup_r+0x30>
 80199fe:	bd70      	pop	{r4, r5, r6, pc}
 8019a00:	0792      	lsls	r2, r2, #30
 8019a02:	bf58      	it	pl
 8019a04:	6963      	ldrpl	r3, [r4, #20]
 8019a06:	60a3      	str	r3, [r4, #8]
 8019a08:	e7f2      	b.n	80199f0 <__swsetup_r+0xac>
 8019a0a:	2000      	movs	r0, #0
 8019a0c:	e7f7      	b.n	80199fe <__swsetup_r+0xba>
 8019a0e:	bf00      	nop
 8019a10:	24000178 	.word	0x24000178
 8019a14:	0801b118 	.word	0x0801b118
 8019a18:	0801b138 	.word	0x0801b138
 8019a1c:	0801b0f8 	.word	0x0801b0f8

08019a20 <__sflush_r>:
 8019a20:	898a      	ldrh	r2, [r1, #12]
 8019a22:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8019a26:	4605      	mov	r5, r0
 8019a28:	0710      	lsls	r0, r2, #28
 8019a2a:	460c      	mov	r4, r1
 8019a2c:	d458      	bmi.n	8019ae0 <__sflush_r+0xc0>
 8019a2e:	684b      	ldr	r3, [r1, #4]
 8019a30:	2b00      	cmp	r3, #0
 8019a32:	dc05      	bgt.n	8019a40 <__sflush_r+0x20>
 8019a34:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8019a36:	2b00      	cmp	r3, #0
 8019a38:	dc02      	bgt.n	8019a40 <__sflush_r+0x20>
 8019a3a:	2000      	movs	r0, #0
 8019a3c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8019a40:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8019a42:	2e00      	cmp	r6, #0
 8019a44:	d0f9      	beq.n	8019a3a <__sflush_r+0x1a>
 8019a46:	2300      	movs	r3, #0
 8019a48:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8019a4c:	682f      	ldr	r7, [r5, #0]
 8019a4e:	6a21      	ldr	r1, [r4, #32]
 8019a50:	602b      	str	r3, [r5, #0]
 8019a52:	d032      	beq.n	8019aba <__sflush_r+0x9a>
 8019a54:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8019a56:	89a3      	ldrh	r3, [r4, #12]
 8019a58:	075a      	lsls	r2, r3, #29
 8019a5a:	d505      	bpl.n	8019a68 <__sflush_r+0x48>
 8019a5c:	6863      	ldr	r3, [r4, #4]
 8019a5e:	1ac0      	subs	r0, r0, r3
 8019a60:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8019a62:	b10b      	cbz	r3, 8019a68 <__sflush_r+0x48>
 8019a64:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8019a66:	1ac0      	subs	r0, r0, r3
 8019a68:	2300      	movs	r3, #0
 8019a6a:	4602      	mov	r2, r0
 8019a6c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8019a6e:	6a21      	ldr	r1, [r4, #32]
 8019a70:	4628      	mov	r0, r5
 8019a72:	47b0      	blx	r6
 8019a74:	1c43      	adds	r3, r0, #1
 8019a76:	89a3      	ldrh	r3, [r4, #12]
 8019a78:	d106      	bne.n	8019a88 <__sflush_r+0x68>
 8019a7a:	6829      	ldr	r1, [r5, #0]
 8019a7c:	291d      	cmp	r1, #29
 8019a7e:	d848      	bhi.n	8019b12 <__sflush_r+0xf2>
 8019a80:	4a29      	ldr	r2, [pc, #164]	; (8019b28 <__sflush_r+0x108>)
 8019a82:	40ca      	lsrs	r2, r1
 8019a84:	07d6      	lsls	r6, r2, #31
 8019a86:	d544      	bpl.n	8019b12 <__sflush_r+0xf2>
 8019a88:	2200      	movs	r2, #0
 8019a8a:	6062      	str	r2, [r4, #4]
 8019a8c:	04d9      	lsls	r1, r3, #19
 8019a8e:	6922      	ldr	r2, [r4, #16]
 8019a90:	6022      	str	r2, [r4, #0]
 8019a92:	d504      	bpl.n	8019a9e <__sflush_r+0x7e>
 8019a94:	1c42      	adds	r2, r0, #1
 8019a96:	d101      	bne.n	8019a9c <__sflush_r+0x7c>
 8019a98:	682b      	ldr	r3, [r5, #0]
 8019a9a:	b903      	cbnz	r3, 8019a9e <__sflush_r+0x7e>
 8019a9c:	6560      	str	r0, [r4, #84]	; 0x54
 8019a9e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8019aa0:	602f      	str	r7, [r5, #0]
 8019aa2:	2900      	cmp	r1, #0
 8019aa4:	d0c9      	beq.n	8019a3a <__sflush_r+0x1a>
 8019aa6:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8019aaa:	4299      	cmp	r1, r3
 8019aac:	d002      	beq.n	8019ab4 <__sflush_r+0x94>
 8019aae:	4628      	mov	r0, r5
 8019ab0:	f7ff fd66 	bl	8019580 <_free_r>
 8019ab4:	2000      	movs	r0, #0
 8019ab6:	6360      	str	r0, [r4, #52]	; 0x34
 8019ab8:	e7c0      	b.n	8019a3c <__sflush_r+0x1c>
 8019aba:	2301      	movs	r3, #1
 8019abc:	4628      	mov	r0, r5
 8019abe:	47b0      	blx	r6
 8019ac0:	1c41      	adds	r1, r0, #1
 8019ac2:	d1c8      	bne.n	8019a56 <__sflush_r+0x36>
 8019ac4:	682b      	ldr	r3, [r5, #0]
 8019ac6:	2b00      	cmp	r3, #0
 8019ac8:	d0c5      	beq.n	8019a56 <__sflush_r+0x36>
 8019aca:	2b1d      	cmp	r3, #29
 8019acc:	d001      	beq.n	8019ad2 <__sflush_r+0xb2>
 8019ace:	2b16      	cmp	r3, #22
 8019ad0:	d101      	bne.n	8019ad6 <__sflush_r+0xb6>
 8019ad2:	602f      	str	r7, [r5, #0]
 8019ad4:	e7b1      	b.n	8019a3a <__sflush_r+0x1a>
 8019ad6:	89a3      	ldrh	r3, [r4, #12]
 8019ad8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8019adc:	81a3      	strh	r3, [r4, #12]
 8019ade:	e7ad      	b.n	8019a3c <__sflush_r+0x1c>
 8019ae0:	690f      	ldr	r7, [r1, #16]
 8019ae2:	2f00      	cmp	r7, #0
 8019ae4:	d0a9      	beq.n	8019a3a <__sflush_r+0x1a>
 8019ae6:	0793      	lsls	r3, r2, #30
 8019ae8:	680e      	ldr	r6, [r1, #0]
 8019aea:	bf08      	it	eq
 8019aec:	694b      	ldreq	r3, [r1, #20]
 8019aee:	600f      	str	r7, [r1, #0]
 8019af0:	bf18      	it	ne
 8019af2:	2300      	movne	r3, #0
 8019af4:	eba6 0807 	sub.w	r8, r6, r7
 8019af8:	608b      	str	r3, [r1, #8]
 8019afa:	f1b8 0f00 	cmp.w	r8, #0
 8019afe:	dd9c      	ble.n	8019a3a <__sflush_r+0x1a>
 8019b00:	4643      	mov	r3, r8
 8019b02:	463a      	mov	r2, r7
 8019b04:	6a21      	ldr	r1, [r4, #32]
 8019b06:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8019b08:	4628      	mov	r0, r5
 8019b0a:	47b0      	blx	r6
 8019b0c:	2800      	cmp	r0, #0
 8019b0e:	dc06      	bgt.n	8019b1e <__sflush_r+0xfe>
 8019b10:	89a3      	ldrh	r3, [r4, #12]
 8019b12:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8019b16:	81a3      	strh	r3, [r4, #12]
 8019b18:	f04f 30ff 	mov.w	r0, #4294967295
 8019b1c:	e78e      	b.n	8019a3c <__sflush_r+0x1c>
 8019b1e:	4407      	add	r7, r0
 8019b20:	eba8 0800 	sub.w	r8, r8, r0
 8019b24:	e7e9      	b.n	8019afa <__sflush_r+0xda>
 8019b26:	bf00      	nop
 8019b28:	20400001 	.word	0x20400001

08019b2c <_fflush_r>:
 8019b2c:	b538      	push	{r3, r4, r5, lr}
 8019b2e:	690b      	ldr	r3, [r1, #16]
 8019b30:	4605      	mov	r5, r0
 8019b32:	460c      	mov	r4, r1
 8019b34:	b1db      	cbz	r3, 8019b6e <_fflush_r+0x42>
 8019b36:	b118      	cbz	r0, 8019b40 <_fflush_r+0x14>
 8019b38:	6983      	ldr	r3, [r0, #24]
 8019b3a:	b90b      	cbnz	r3, 8019b40 <_fflush_r+0x14>
 8019b3c:	f000 f860 	bl	8019c00 <__sinit>
 8019b40:	4b0c      	ldr	r3, [pc, #48]	; (8019b74 <_fflush_r+0x48>)
 8019b42:	429c      	cmp	r4, r3
 8019b44:	d109      	bne.n	8019b5a <_fflush_r+0x2e>
 8019b46:	686c      	ldr	r4, [r5, #4]
 8019b48:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8019b4c:	b17b      	cbz	r3, 8019b6e <_fflush_r+0x42>
 8019b4e:	4621      	mov	r1, r4
 8019b50:	4628      	mov	r0, r5
 8019b52:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8019b56:	f7ff bf63 	b.w	8019a20 <__sflush_r>
 8019b5a:	4b07      	ldr	r3, [pc, #28]	; (8019b78 <_fflush_r+0x4c>)
 8019b5c:	429c      	cmp	r4, r3
 8019b5e:	d101      	bne.n	8019b64 <_fflush_r+0x38>
 8019b60:	68ac      	ldr	r4, [r5, #8]
 8019b62:	e7f1      	b.n	8019b48 <_fflush_r+0x1c>
 8019b64:	4b05      	ldr	r3, [pc, #20]	; (8019b7c <_fflush_r+0x50>)
 8019b66:	429c      	cmp	r4, r3
 8019b68:	bf08      	it	eq
 8019b6a:	68ec      	ldreq	r4, [r5, #12]
 8019b6c:	e7ec      	b.n	8019b48 <_fflush_r+0x1c>
 8019b6e:	2000      	movs	r0, #0
 8019b70:	bd38      	pop	{r3, r4, r5, pc}
 8019b72:	bf00      	nop
 8019b74:	0801b118 	.word	0x0801b118
 8019b78:	0801b138 	.word	0x0801b138
 8019b7c:	0801b0f8 	.word	0x0801b0f8

08019b80 <std>:
 8019b80:	2300      	movs	r3, #0
 8019b82:	b510      	push	{r4, lr}
 8019b84:	4604      	mov	r4, r0
 8019b86:	e9c0 3300 	strd	r3, r3, [r0]
 8019b8a:	6083      	str	r3, [r0, #8]
 8019b8c:	8181      	strh	r1, [r0, #12]
 8019b8e:	6643      	str	r3, [r0, #100]	; 0x64
 8019b90:	81c2      	strh	r2, [r0, #14]
 8019b92:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8019b96:	6183      	str	r3, [r0, #24]
 8019b98:	4619      	mov	r1, r3
 8019b9a:	2208      	movs	r2, #8
 8019b9c:	305c      	adds	r0, #92	; 0x5c
 8019b9e:	f7ff fce6 	bl	801956e <memset>
 8019ba2:	4b05      	ldr	r3, [pc, #20]	; (8019bb8 <std+0x38>)
 8019ba4:	6263      	str	r3, [r4, #36]	; 0x24
 8019ba6:	4b05      	ldr	r3, [pc, #20]	; (8019bbc <std+0x3c>)
 8019ba8:	62a3      	str	r3, [r4, #40]	; 0x28
 8019baa:	4b05      	ldr	r3, [pc, #20]	; (8019bc0 <std+0x40>)
 8019bac:	62e3      	str	r3, [r4, #44]	; 0x2c
 8019bae:	4b05      	ldr	r3, [pc, #20]	; (8019bc4 <std+0x44>)
 8019bb0:	6224      	str	r4, [r4, #32]
 8019bb2:	6323      	str	r3, [r4, #48]	; 0x30
 8019bb4:	bd10      	pop	{r4, pc}
 8019bb6:	bf00      	nop
 8019bb8:	0801a615 	.word	0x0801a615
 8019bbc:	0801a637 	.word	0x0801a637
 8019bc0:	0801a66f 	.word	0x0801a66f
 8019bc4:	0801a693 	.word	0x0801a693

08019bc8 <_cleanup_r>:
 8019bc8:	4901      	ldr	r1, [pc, #4]	; (8019bd0 <_cleanup_r+0x8>)
 8019bca:	f000 b885 	b.w	8019cd8 <_fwalk_reent>
 8019bce:	bf00      	nop
 8019bd0:	08019b2d 	.word	0x08019b2d

08019bd4 <__sfmoreglue>:
 8019bd4:	b570      	push	{r4, r5, r6, lr}
 8019bd6:	1e4a      	subs	r2, r1, #1
 8019bd8:	2568      	movs	r5, #104	; 0x68
 8019bda:	4355      	muls	r5, r2
 8019bdc:	460e      	mov	r6, r1
 8019bde:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8019be2:	f7ff fd1b 	bl	801961c <_malloc_r>
 8019be6:	4604      	mov	r4, r0
 8019be8:	b140      	cbz	r0, 8019bfc <__sfmoreglue+0x28>
 8019bea:	2100      	movs	r1, #0
 8019bec:	e9c0 1600 	strd	r1, r6, [r0]
 8019bf0:	300c      	adds	r0, #12
 8019bf2:	60a0      	str	r0, [r4, #8]
 8019bf4:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8019bf8:	f7ff fcb9 	bl	801956e <memset>
 8019bfc:	4620      	mov	r0, r4
 8019bfe:	bd70      	pop	{r4, r5, r6, pc}

08019c00 <__sinit>:
 8019c00:	6983      	ldr	r3, [r0, #24]
 8019c02:	b510      	push	{r4, lr}
 8019c04:	4604      	mov	r4, r0
 8019c06:	bb33      	cbnz	r3, 8019c56 <__sinit+0x56>
 8019c08:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 8019c0c:	6503      	str	r3, [r0, #80]	; 0x50
 8019c0e:	4b12      	ldr	r3, [pc, #72]	; (8019c58 <__sinit+0x58>)
 8019c10:	4a12      	ldr	r2, [pc, #72]	; (8019c5c <__sinit+0x5c>)
 8019c12:	681b      	ldr	r3, [r3, #0]
 8019c14:	6282      	str	r2, [r0, #40]	; 0x28
 8019c16:	4298      	cmp	r0, r3
 8019c18:	bf04      	itt	eq
 8019c1a:	2301      	moveq	r3, #1
 8019c1c:	6183      	streq	r3, [r0, #24]
 8019c1e:	f000 f81f 	bl	8019c60 <__sfp>
 8019c22:	6060      	str	r0, [r4, #4]
 8019c24:	4620      	mov	r0, r4
 8019c26:	f000 f81b 	bl	8019c60 <__sfp>
 8019c2a:	60a0      	str	r0, [r4, #8]
 8019c2c:	4620      	mov	r0, r4
 8019c2e:	f000 f817 	bl	8019c60 <__sfp>
 8019c32:	2200      	movs	r2, #0
 8019c34:	60e0      	str	r0, [r4, #12]
 8019c36:	2104      	movs	r1, #4
 8019c38:	6860      	ldr	r0, [r4, #4]
 8019c3a:	f7ff ffa1 	bl	8019b80 <std>
 8019c3e:	2201      	movs	r2, #1
 8019c40:	2109      	movs	r1, #9
 8019c42:	68a0      	ldr	r0, [r4, #8]
 8019c44:	f7ff ff9c 	bl	8019b80 <std>
 8019c48:	2202      	movs	r2, #2
 8019c4a:	2112      	movs	r1, #18
 8019c4c:	68e0      	ldr	r0, [r4, #12]
 8019c4e:	f7ff ff97 	bl	8019b80 <std>
 8019c52:	2301      	movs	r3, #1
 8019c54:	61a3      	str	r3, [r4, #24]
 8019c56:	bd10      	pop	{r4, pc}
 8019c58:	0801b0f4 	.word	0x0801b0f4
 8019c5c:	08019bc9 	.word	0x08019bc9

08019c60 <__sfp>:
 8019c60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8019c62:	4b1b      	ldr	r3, [pc, #108]	; (8019cd0 <__sfp+0x70>)
 8019c64:	681e      	ldr	r6, [r3, #0]
 8019c66:	69b3      	ldr	r3, [r6, #24]
 8019c68:	4607      	mov	r7, r0
 8019c6a:	b913      	cbnz	r3, 8019c72 <__sfp+0x12>
 8019c6c:	4630      	mov	r0, r6
 8019c6e:	f7ff ffc7 	bl	8019c00 <__sinit>
 8019c72:	3648      	adds	r6, #72	; 0x48
 8019c74:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8019c78:	3b01      	subs	r3, #1
 8019c7a:	d503      	bpl.n	8019c84 <__sfp+0x24>
 8019c7c:	6833      	ldr	r3, [r6, #0]
 8019c7e:	b133      	cbz	r3, 8019c8e <__sfp+0x2e>
 8019c80:	6836      	ldr	r6, [r6, #0]
 8019c82:	e7f7      	b.n	8019c74 <__sfp+0x14>
 8019c84:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8019c88:	b16d      	cbz	r5, 8019ca6 <__sfp+0x46>
 8019c8a:	3468      	adds	r4, #104	; 0x68
 8019c8c:	e7f4      	b.n	8019c78 <__sfp+0x18>
 8019c8e:	2104      	movs	r1, #4
 8019c90:	4638      	mov	r0, r7
 8019c92:	f7ff ff9f 	bl	8019bd4 <__sfmoreglue>
 8019c96:	6030      	str	r0, [r6, #0]
 8019c98:	2800      	cmp	r0, #0
 8019c9a:	d1f1      	bne.n	8019c80 <__sfp+0x20>
 8019c9c:	230c      	movs	r3, #12
 8019c9e:	603b      	str	r3, [r7, #0]
 8019ca0:	4604      	mov	r4, r0
 8019ca2:	4620      	mov	r0, r4
 8019ca4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8019ca6:	4b0b      	ldr	r3, [pc, #44]	; (8019cd4 <__sfp+0x74>)
 8019ca8:	6665      	str	r5, [r4, #100]	; 0x64
 8019caa:	e9c4 5500 	strd	r5, r5, [r4]
 8019cae:	60a5      	str	r5, [r4, #8]
 8019cb0:	e9c4 3503 	strd	r3, r5, [r4, #12]
 8019cb4:	e9c4 5505 	strd	r5, r5, [r4, #20]
 8019cb8:	2208      	movs	r2, #8
 8019cba:	4629      	mov	r1, r5
 8019cbc:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8019cc0:	f7ff fc55 	bl	801956e <memset>
 8019cc4:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8019cc8:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8019ccc:	e7e9      	b.n	8019ca2 <__sfp+0x42>
 8019cce:	bf00      	nop
 8019cd0:	0801b0f4 	.word	0x0801b0f4
 8019cd4:	ffff0001 	.word	0xffff0001

08019cd8 <_fwalk_reent>:
 8019cd8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8019cdc:	4680      	mov	r8, r0
 8019cde:	4689      	mov	r9, r1
 8019ce0:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8019ce4:	2600      	movs	r6, #0
 8019ce6:	b914      	cbnz	r4, 8019cee <_fwalk_reent+0x16>
 8019ce8:	4630      	mov	r0, r6
 8019cea:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8019cee:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 8019cf2:	3f01      	subs	r7, #1
 8019cf4:	d501      	bpl.n	8019cfa <_fwalk_reent+0x22>
 8019cf6:	6824      	ldr	r4, [r4, #0]
 8019cf8:	e7f5      	b.n	8019ce6 <_fwalk_reent+0xe>
 8019cfa:	89ab      	ldrh	r3, [r5, #12]
 8019cfc:	2b01      	cmp	r3, #1
 8019cfe:	d907      	bls.n	8019d10 <_fwalk_reent+0x38>
 8019d00:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8019d04:	3301      	adds	r3, #1
 8019d06:	d003      	beq.n	8019d10 <_fwalk_reent+0x38>
 8019d08:	4629      	mov	r1, r5
 8019d0a:	4640      	mov	r0, r8
 8019d0c:	47c8      	blx	r9
 8019d0e:	4306      	orrs	r6, r0
 8019d10:	3568      	adds	r5, #104	; 0x68
 8019d12:	e7ee      	b.n	8019cf2 <_fwalk_reent+0x1a>

08019d14 <__swhatbuf_r>:
 8019d14:	b570      	push	{r4, r5, r6, lr}
 8019d16:	460e      	mov	r6, r1
 8019d18:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8019d1c:	2900      	cmp	r1, #0
 8019d1e:	b096      	sub	sp, #88	; 0x58
 8019d20:	4614      	mov	r4, r2
 8019d22:	461d      	mov	r5, r3
 8019d24:	da07      	bge.n	8019d36 <__swhatbuf_r+0x22>
 8019d26:	2300      	movs	r3, #0
 8019d28:	602b      	str	r3, [r5, #0]
 8019d2a:	89b3      	ldrh	r3, [r6, #12]
 8019d2c:	061a      	lsls	r2, r3, #24
 8019d2e:	d410      	bmi.n	8019d52 <__swhatbuf_r+0x3e>
 8019d30:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8019d34:	e00e      	b.n	8019d54 <__swhatbuf_r+0x40>
 8019d36:	466a      	mov	r2, sp
 8019d38:	f000 fcd2 	bl	801a6e0 <_fstat_r>
 8019d3c:	2800      	cmp	r0, #0
 8019d3e:	dbf2      	blt.n	8019d26 <__swhatbuf_r+0x12>
 8019d40:	9a01      	ldr	r2, [sp, #4]
 8019d42:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8019d46:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8019d4a:	425a      	negs	r2, r3
 8019d4c:	415a      	adcs	r2, r3
 8019d4e:	602a      	str	r2, [r5, #0]
 8019d50:	e7ee      	b.n	8019d30 <__swhatbuf_r+0x1c>
 8019d52:	2340      	movs	r3, #64	; 0x40
 8019d54:	2000      	movs	r0, #0
 8019d56:	6023      	str	r3, [r4, #0]
 8019d58:	b016      	add	sp, #88	; 0x58
 8019d5a:	bd70      	pop	{r4, r5, r6, pc}

08019d5c <__smakebuf_r>:
 8019d5c:	898b      	ldrh	r3, [r1, #12]
 8019d5e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8019d60:	079d      	lsls	r5, r3, #30
 8019d62:	4606      	mov	r6, r0
 8019d64:	460c      	mov	r4, r1
 8019d66:	d507      	bpl.n	8019d78 <__smakebuf_r+0x1c>
 8019d68:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8019d6c:	6023      	str	r3, [r4, #0]
 8019d6e:	6123      	str	r3, [r4, #16]
 8019d70:	2301      	movs	r3, #1
 8019d72:	6163      	str	r3, [r4, #20]
 8019d74:	b002      	add	sp, #8
 8019d76:	bd70      	pop	{r4, r5, r6, pc}
 8019d78:	ab01      	add	r3, sp, #4
 8019d7a:	466a      	mov	r2, sp
 8019d7c:	f7ff ffca 	bl	8019d14 <__swhatbuf_r>
 8019d80:	9900      	ldr	r1, [sp, #0]
 8019d82:	4605      	mov	r5, r0
 8019d84:	4630      	mov	r0, r6
 8019d86:	f7ff fc49 	bl	801961c <_malloc_r>
 8019d8a:	b948      	cbnz	r0, 8019da0 <__smakebuf_r+0x44>
 8019d8c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8019d90:	059a      	lsls	r2, r3, #22
 8019d92:	d4ef      	bmi.n	8019d74 <__smakebuf_r+0x18>
 8019d94:	f023 0303 	bic.w	r3, r3, #3
 8019d98:	f043 0302 	orr.w	r3, r3, #2
 8019d9c:	81a3      	strh	r3, [r4, #12]
 8019d9e:	e7e3      	b.n	8019d68 <__smakebuf_r+0xc>
 8019da0:	4b0d      	ldr	r3, [pc, #52]	; (8019dd8 <__smakebuf_r+0x7c>)
 8019da2:	62b3      	str	r3, [r6, #40]	; 0x28
 8019da4:	89a3      	ldrh	r3, [r4, #12]
 8019da6:	6020      	str	r0, [r4, #0]
 8019da8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8019dac:	81a3      	strh	r3, [r4, #12]
 8019dae:	9b00      	ldr	r3, [sp, #0]
 8019db0:	6163      	str	r3, [r4, #20]
 8019db2:	9b01      	ldr	r3, [sp, #4]
 8019db4:	6120      	str	r0, [r4, #16]
 8019db6:	b15b      	cbz	r3, 8019dd0 <__smakebuf_r+0x74>
 8019db8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8019dbc:	4630      	mov	r0, r6
 8019dbe:	f000 fca1 	bl	801a704 <_isatty_r>
 8019dc2:	b128      	cbz	r0, 8019dd0 <__smakebuf_r+0x74>
 8019dc4:	89a3      	ldrh	r3, [r4, #12]
 8019dc6:	f023 0303 	bic.w	r3, r3, #3
 8019dca:	f043 0301 	orr.w	r3, r3, #1
 8019dce:	81a3      	strh	r3, [r4, #12]
 8019dd0:	89a3      	ldrh	r3, [r4, #12]
 8019dd2:	431d      	orrs	r5, r3
 8019dd4:	81a5      	strh	r5, [r4, #12]
 8019dd6:	e7cd      	b.n	8019d74 <__smakebuf_r+0x18>
 8019dd8:	08019bc9 	.word	0x08019bc9

08019ddc <__malloc_lock>:
 8019ddc:	4770      	bx	lr

08019dde <__malloc_unlock>:
 8019dde:	4770      	bx	lr

08019de0 <__ssputs_r>:
 8019de0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8019de4:	688e      	ldr	r6, [r1, #8]
 8019de6:	429e      	cmp	r6, r3
 8019de8:	4682      	mov	sl, r0
 8019dea:	460c      	mov	r4, r1
 8019dec:	4690      	mov	r8, r2
 8019dee:	4699      	mov	r9, r3
 8019df0:	d837      	bhi.n	8019e62 <__ssputs_r+0x82>
 8019df2:	898a      	ldrh	r2, [r1, #12]
 8019df4:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8019df8:	d031      	beq.n	8019e5e <__ssputs_r+0x7e>
 8019dfa:	6825      	ldr	r5, [r4, #0]
 8019dfc:	6909      	ldr	r1, [r1, #16]
 8019dfe:	1a6f      	subs	r7, r5, r1
 8019e00:	6965      	ldr	r5, [r4, #20]
 8019e02:	2302      	movs	r3, #2
 8019e04:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8019e08:	fb95 f5f3 	sdiv	r5, r5, r3
 8019e0c:	f109 0301 	add.w	r3, r9, #1
 8019e10:	443b      	add	r3, r7
 8019e12:	429d      	cmp	r5, r3
 8019e14:	bf38      	it	cc
 8019e16:	461d      	movcc	r5, r3
 8019e18:	0553      	lsls	r3, r2, #21
 8019e1a:	d530      	bpl.n	8019e7e <__ssputs_r+0x9e>
 8019e1c:	4629      	mov	r1, r5
 8019e1e:	f7ff fbfd 	bl	801961c <_malloc_r>
 8019e22:	4606      	mov	r6, r0
 8019e24:	b950      	cbnz	r0, 8019e3c <__ssputs_r+0x5c>
 8019e26:	230c      	movs	r3, #12
 8019e28:	f8ca 3000 	str.w	r3, [sl]
 8019e2c:	89a3      	ldrh	r3, [r4, #12]
 8019e2e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8019e32:	81a3      	strh	r3, [r4, #12]
 8019e34:	f04f 30ff 	mov.w	r0, #4294967295
 8019e38:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8019e3c:	463a      	mov	r2, r7
 8019e3e:	6921      	ldr	r1, [r4, #16]
 8019e40:	f7ff fb8a 	bl	8019558 <memcpy>
 8019e44:	89a3      	ldrh	r3, [r4, #12]
 8019e46:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8019e4a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8019e4e:	81a3      	strh	r3, [r4, #12]
 8019e50:	6126      	str	r6, [r4, #16]
 8019e52:	6165      	str	r5, [r4, #20]
 8019e54:	443e      	add	r6, r7
 8019e56:	1bed      	subs	r5, r5, r7
 8019e58:	6026      	str	r6, [r4, #0]
 8019e5a:	60a5      	str	r5, [r4, #8]
 8019e5c:	464e      	mov	r6, r9
 8019e5e:	454e      	cmp	r6, r9
 8019e60:	d900      	bls.n	8019e64 <__ssputs_r+0x84>
 8019e62:	464e      	mov	r6, r9
 8019e64:	4632      	mov	r2, r6
 8019e66:	4641      	mov	r1, r8
 8019e68:	6820      	ldr	r0, [r4, #0]
 8019e6a:	f000 fc6d 	bl	801a748 <memmove>
 8019e6e:	68a3      	ldr	r3, [r4, #8]
 8019e70:	1b9b      	subs	r3, r3, r6
 8019e72:	60a3      	str	r3, [r4, #8]
 8019e74:	6823      	ldr	r3, [r4, #0]
 8019e76:	441e      	add	r6, r3
 8019e78:	6026      	str	r6, [r4, #0]
 8019e7a:	2000      	movs	r0, #0
 8019e7c:	e7dc      	b.n	8019e38 <__ssputs_r+0x58>
 8019e7e:	462a      	mov	r2, r5
 8019e80:	f000 fc7b 	bl	801a77a <_realloc_r>
 8019e84:	4606      	mov	r6, r0
 8019e86:	2800      	cmp	r0, #0
 8019e88:	d1e2      	bne.n	8019e50 <__ssputs_r+0x70>
 8019e8a:	6921      	ldr	r1, [r4, #16]
 8019e8c:	4650      	mov	r0, sl
 8019e8e:	f7ff fb77 	bl	8019580 <_free_r>
 8019e92:	e7c8      	b.n	8019e26 <__ssputs_r+0x46>

08019e94 <_svfiprintf_r>:
 8019e94:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019e98:	461d      	mov	r5, r3
 8019e9a:	898b      	ldrh	r3, [r1, #12]
 8019e9c:	061f      	lsls	r7, r3, #24
 8019e9e:	b09d      	sub	sp, #116	; 0x74
 8019ea0:	4680      	mov	r8, r0
 8019ea2:	460c      	mov	r4, r1
 8019ea4:	4616      	mov	r6, r2
 8019ea6:	d50f      	bpl.n	8019ec8 <_svfiprintf_r+0x34>
 8019ea8:	690b      	ldr	r3, [r1, #16]
 8019eaa:	b96b      	cbnz	r3, 8019ec8 <_svfiprintf_r+0x34>
 8019eac:	2140      	movs	r1, #64	; 0x40
 8019eae:	f7ff fbb5 	bl	801961c <_malloc_r>
 8019eb2:	6020      	str	r0, [r4, #0]
 8019eb4:	6120      	str	r0, [r4, #16]
 8019eb6:	b928      	cbnz	r0, 8019ec4 <_svfiprintf_r+0x30>
 8019eb8:	230c      	movs	r3, #12
 8019eba:	f8c8 3000 	str.w	r3, [r8]
 8019ebe:	f04f 30ff 	mov.w	r0, #4294967295
 8019ec2:	e0c8      	b.n	801a056 <_svfiprintf_r+0x1c2>
 8019ec4:	2340      	movs	r3, #64	; 0x40
 8019ec6:	6163      	str	r3, [r4, #20]
 8019ec8:	2300      	movs	r3, #0
 8019eca:	9309      	str	r3, [sp, #36]	; 0x24
 8019ecc:	2320      	movs	r3, #32
 8019ece:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8019ed2:	2330      	movs	r3, #48	; 0x30
 8019ed4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8019ed8:	9503      	str	r5, [sp, #12]
 8019eda:	f04f 0b01 	mov.w	fp, #1
 8019ede:	4637      	mov	r7, r6
 8019ee0:	463d      	mov	r5, r7
 8019ee2:	f815 3b01 	ldrb.w	r3, [r5], #1
 8019ee6:	b10b      	cbz	r3, 8019eec <_svfiprintf_r+0x58>
 8019ee8:	2b25      	cmp	r3, #37	; 0x25
 8019eea:	d13e      	bne.n	8019f6a <_svfiprintf_r+0xd6>
 8019eec:	ebb7 0a06 	subs.w	sl, r7, r6
 8019ef0:	d00b      	beq.n	8019f0a <_svfiprintf_r+0x76>
 8019ef2:	4653      	mov	r3, sl
 8019ef4:	4632      	mov	r2, r6
 8019ef6:	4621      	mov	r1, r4
 8019ef8:	4640      	mov	r0, r8
 8019efa:	f7ff ff71 	bl	8019de0 <__ssputs_r>
 8019efe:	3001      	adds	r0, #1
 8019f00:	f000 80a4 	beq.w	801a04c <_svfiprintf_r+0x1b8>
 8019f04:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8019f06:	4453      	add	r3, sl
 8019f08:	9309      	str	r3, [sp, #36]	; 0x24
 8019f0a:	783b      	ldrb	r3, [r7, #0]
 8019f0c:	2b00      	cmp	r3, #0
 8019f0e:	f000 809d 	beq.w	801a04c <_svfiprintf_r+0x1b8>
 8019f12:	2300      	movs	r3, #0
 8019f14:	f04f 32ff 	mov.w	r2, #4294967295
 8019f18:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8019f1c:	9304      	str	r3, [sp, #16]
 8019f1e:	9307      	str	r3, [sp, #28]
 8019f20:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8019f24:	931a      	str	r3, [sp, #104]	; 0x68
 8019f26:	462f      	mov	r7, r5
 8019f28:	2205      	movs	r2, #5
 8019f2a:	f817 1b01 	ldrb.w	r1, [r7], #1
 8019f2e:	4850      	ldr	r0, [pc, #320]	; (801a070 <_svfiprintf_r+0x1dc>)
 8019f30:	f7e6 f9de 	bl	80002f0 <memchr>
 8019f34:	9b04      	ldr	r3, [sp, #16]
 8019f36:	b9d0      	cbnz	r0, 8019f6e <_svfiprintf_r+0xda>
 8019f38:	06d9      	lsls	r1, r3, #27
 8019f3a:	bf44      	itt	mi
 8019f3c:	2220      	movmi	r2, #32
 8019f3e:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8019f42:	071a      	lsls	r2, r3, #28
 8019f44:	bf44      	itt	mi
 8019f46:	222b      	movmi	r2, #43	; 0x2b
 8019f48:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8019f4c:	782a      	ldrb	r2, [r5, #0]
 8019f4e:	2a2a      	cmp	r2, #42	; 0x2a
 8019f50:	d015      	beq.n	8019f7e <_svfiprintf_r+0xea>
 8019f52:	9a07      	ldr	r2, [sp, #28]
 8019f54:	462f      	mov	r7, r5
 8019f56:	2000      	movs	r0, #0
 8019f58:	250a      	movs	r5, #10
 8019f5a:	4639      	mov	r1, r7
 8019f5c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8019f60:	3b30      	subs	r3, #48	; 0x30
 8019f62:	2b09      	cmp	r3, #9
 8019f64:	d94d      	bls.n	801a002 <_svfiprintf_r+0x16e>
 8019f66:	b1b8      	cbz	r0, 8019f98 <_svfiprintf_r+0x104>
 8019f68:	e00f      	b.n	8019f8a <_svfiprintf_r+0xf6>
 8019f6a:	462f      	mov	r7, r5
 8019f6c:	e7b8      	b.n	8019ee0 <_svfiprintf_r+0x4c>
 8019f6e:	4a40      	ldr	r2, [pc, #256]	; (801a070 <_svfiprintf_r+0x1dc>)
 8019f70:	1a80      	subs	r0, r0, r2
 8019f72:	fa0b f000 	lsl.w	r0, fp, r0
 8019f76:	4318      	orrs	r0, r3
 8019f78:	9004      	str	r0, [sp, #16]
 8019f7a:	463d      	mov	r5, r7
 8019f7c:	e7d3      	b.n	8019f26 <_svfiprintf_r+0x92>
 8019f7e:	9a03      	ldr	r2, [sp, #12]
 8019f80:	1d11      	adds	r1, r2, #4
 8019f82:	6812      	ldr	r2, [r2, #0]
 8019f84:	9103      	str	r1, [sp, #12]
 8019f86:	2a00      	cmp	r2, #0
 8019f88:	db01      	blt.n	8019f8e <_svfiprintf_r+0xfa>
 8019f8a:	9207      	str	r2, [sp, #28]
 8019f8c:	e004      	b.n	8019f98 <_svfiprintf_r+0x104>
 8019f8e:	4252      	negs	r2, r2
 8019f90:	f043 0302 	orr.w	r3, r3, #2
 8019f94:	9207      	str	r2, [sp, #28]
 8019f96:	9304      	str	r3, [sp, #16]
 8019f98:	783b      	ldrb	r3, [r7, #0]
 8019f9a:	2b2e      	cmp	r3, #46	; 0x2e
 8019f9c:	d10c      	bne.n	8019fb8 <_svfiprintf_r+0x124>
 8019f9e:	787b      	ldrb	r3, [r7, #1]
 8019fa0:	2b2a      	cmp	r3, #42	; 0x2a
 8019fa2:	d133      	bne.n	801a00c <_svfiprintf_r+0x178>
 8019fa4:	9b03      	ldr	r3, [sp, #12]
 8019fa6:	1d1a      	adds	r2, r3, #4
 8019fa8:	681b      	ldr	r3, [r3, #0]
 8019faa:	9203      	str	r2, [sp, #12]
 8019fac:	2b00      	cmp	r3, #0
 8019fae:	bfb8      	it	lt
 8019fb0:	f04f 33ff 	movlt.w	r3, #4294967295
 8019fb4:	3702      	adds	r7, #2
 8019fb6:	9305      	str	r3, [sp, #20]
 8019fb8:	4d2e      	ldr	r5, [pc, #184]	; (801a074 <_svfiprintf_r+0x1e0>)
 8019fba:	7839      	ldrb	r1, [r7, #0]
 8019fbc:	2203      	movs	r2, #3
 8019fbe:	4628      	mov	r0, r5
 8019fc0:	f7e6 f996 	bl	80002f0 <memchr>
 8019fc4:	b138      	cbz	r0, 8019fd6 <_svfiprintf_r+0x142>
 8019fc6:	2340      	movs	r3, #64	; 0x40
 8019fc8:	1b40      	subs	r0, r0, r5
 8019fca:	fa03 f000 	lsl.w	r0, r3, r0
 8019fce:	9b04      	ldr	r3, [sp, #16]
 8019fd0:	4303      	orrs	r3, r0
 8019fd2:	3701      	adds	r7, #1
 8019fd4:	9304      	str	r3, [sp, #16]
 8019fd6:	7839      	ldrb	r1, [r7, #0]
 8019fd8:	4827      	ldr	r0, [pc, #156]	; (801a078 <_svfiprintf_r+0x1e4>)
 8019fda:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8019fde:	2206      	movs	r2, #6
 8019fe0:	1c7e      	adds	r6, r7, #1
 8019fe2:	f7e6 f985 	bl	80002f0 <memchr>
 8019fe6:	2800      	cmp	r0, #0
 8019fe8:	d038      	beq.n	801a05c <_svfiprintf_r+0x1c8>
 8019fea:	4b24      	ldr	r3, [pc, #144]	; (801a07c <_svfiprintf_r+0x1e8>)
 8019fec:	bb13      	cbnz	r3, 801a034 <_svfiprintf_r+0x1a0>
 8019fee:	9b03      	ldr	r3, [sp, #12]
 8019ff0:	3307      	adds	r3, #7
 8019ff2:	f023 0307 	bic.w	r3, r3, #7
 8019ff6:	3308      	adds	r3, #8
 8019ff8:	9303      	str	r3, [sp, #12]
 8019ffa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8019ffc:	444b      	add	r3, r9
 8019ffe:	9309      	str	r3, [sp, #36]	; 0x24
 801a000:	e76d      	b.n	8019ede <_svfiprintf_r+0x4a>
 801a002:	fb05 3202 	mla	r2, r5, r2, r3
 801a006:	2001      	movs	r0, #1
 801a008:	460f      	mov	r7, r1
 801a00a:	e7a6      	b.n	8019f5a <_svfiprintf_r+0xc6>
 801a00c:	2300      	movs	r3, #0
 801a00e:	3701      	adds	r7, #1
 801a010:	9305      	str	r3, [sp, #20]
 801a012:	4619      	mov	r1, r3
 801a014:	250a      	movs	r5, #10
 801a016:	4638      	mov	r0, r7
 801a018:	f810 2b01 	ldrb.w	r2, [r0], #1
 801a01c:	3a30      	subs	r2, #48	; 0x30
 801a01e:	2a09      	cmp	r2, #9
 801a020:	d903      	bls.n	801a02a <_svfiprintf_r+0x196>
 801a022:	2b00      	cmp	r3, #0
 801a024:	d0c8      	beq.n	8019fb8 <_svfiprintf_r+0x124>
 801a026:	9105      	str	r1, [sp, #20]
 801a028:	e7c6      	b.n	8019fb8 <_svfiprintf_r+0x124>
 801a02a:	fb05 2101 	mla	r1, r5, r1, r2
 801a02e:	2301      	movs	r3, #1
 801a030:	4607      	mov	r7, r0
 801a032:	e7f0      	b.n	801a016 <_svfiprintf_r+0x182>
 801a034:	ab03      	add	r3, sp, #12
 801a036:	9300      	str	r3, [sp, #0]
 801a038:	4622      	mov	r2, r4
 801a03a:	4b11      	ldr	r3, [pc, #68]	; (801a080 <_svfiprintf_r+0x1ec>)
 801a03c:	a904      	add	r1, sp, #16
 801a03e:	4640      	mov	r0, r8
 801a040:	f3af 8000 	nop.w
 801a044:	f1b0 3fff 	cmp.w	r0, #4294967295
 801a048:	4681      	mov	r9, r0
 801a04a:	d1d6      	bne.n	8019ffa <_svfiprintf_r+0x166>
 801a04c:	89a3      	ldrh	r3, [r4, #12]
 801a04e:	065b      	lsls	r3, r3, #25
 801a050:	f53f af35 	bmi.w	8019ebe <_svfiprintf_r+0x2a>
 801a054:	9809      	ldr	r0, [sp, #36]	; 0x24
 801a056:	b01d      	add	sp, #116	; 0x74
 801a058:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a05c:	ab03      	add	r3, sp, #12
 801a05e:	9300      	str	r3, [sp, #0]
 801a060:	4622      	mov	r2, r4
 801a062:	4b07      	ldr	r3, [pc, #28]	; (801a080 <_svfiprintf_r+0x1ec>)
 801a064:	a904      	add	r1, sp, #16
 801a066:	4640      	mov	r0, r8
 801a068:	f000 f9c2 	bl	801a3f0 <_printf_i>
 801a06c:	e7ea      	b.n	801a044 <_svfiprintf_r+0x1b0>
 801a06e:	bf00      	nop
 801a070:	0801b158 	.word	0x0801b158
 801a074:	0801b15e 	.word	0x0801b15e
 801a078:	0801b162 	.word	0x0801b162
 801a07c:	00000000 	.word	0x00000000
 801a080:	08019de1 	.word	0x08019de1

0801a084 <__sfputc_r>:
 801a084:	6893      	ldr	r3, [r2, #8]
 801a086:	3b01      	subs	r3, #1
 801a088:	2b00      	cmp	r3, #0
 801a08a:	b410      	push	{r4}
 801a08c:	6093      	str	r3, [r2, #8]
 801a08e:	da08      	bge.n	801a0a2 <__sfputc_r+0x1e>
 801a090:	6994      	ldr	r4, [r2, #24]
 801a092:	42a3      	cmp	r3, r4
 801a094:	db01      	blt.n	801a09a <__sfputc_r+0x16>
 801a096:	290a      	cmp	r1, #10
 801a098:	d103      	bne.n	801a0a2 <__sfputc_r+0x1e>
 801a09a:	f85d 4b04 	ldr.w	r4, [sp], #4
 801a09e:	f7ff bbff 	b.w	80198a0 <__swbuf_r>
 801a0a2:	6813      	ldr	r3, [r2, #0]
 801a0a4:	1c58      	adds	r0, r3, #1
 801a0a6:	6010      	str	r0, [r2, #0]
 801a0a8:	7019      	strb	r1, [r3, #0]
 801a0aa:	4608      	mov	r0, r1
 801a0ac:	f85d 4b04 	ldr.w	r4, [sp], #4
 801a0b0:	4770      	bx	lr

0801a0b2 <__sfputs_r>:
 801a0b2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801a0b4:	4606      	mov	r6, r0
 801a0b6:	460f      	mov	r7, r1
 801a0b8:	4614      	mov	r4, r2
 801a0ba:	18d5      	adds	r5, r2, r3
 801a0bc:	42ac      	cmp	r4, r5
 801a0be:	d101      	bne.n	801a0c4 <__sfputs_r+0x12>
 801a0c0:	2000      	movs	r0, #0
 801a0c2:	e007      	b.n	801a0d4 <__sfputs_r+0x22>
 801a0c4:	463a      	mov	r2, r7
 801a0c6:	f814 1b01 	ldrb.w	r1, [r4], #1
 801a0ca:	4630      	mov	r0, r6
 801a0cc:	f7ff ffda 	bl	801a084 <__sfputc_r>
 801a0d0:	1c43      	adds	r3, r0, #1
 801a0d2:	d1f3      	bne.n	801a0bc <__sfputs_r+0xa>
 801a0d4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0801a0d8 <_vfiprintf_r>:
 801a0d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a0dc:	460c      	mov	r4, r1
 801a0de:	b09d      	sub	sp, #116	; 0x74
 801a0e0:	4617      	mov	r7, r2
 801a0e2:	461d      	mov	r5, r3
 801a0e4:	4606      	mov	r6, r0
 801a0e6:	b118      	cbz	r0, 801a0f0 <_vfiprintf_r+0x18>
 801a0e8:	6983      	ldr	r3, [r0, #24]
 801a0ea:	b90b      	cbnz	r3, 801a0f0 <_vfiprintf_r+0x18>
 801a0ec:	f7ff fd88 	bl	8019c00 <__sinit>
 801a0f0:	4b7c      	ldr	r3, [pc, #496]	; (801a2e4 <_vfiprintf_r+0x20c>)
 801a0f2:	429c      	cmp	r4, r3
 801a0f4:	d158      	bne.n	801a1a8 <_vfiprintf_r+0xd0>
 801a0f6:	6874      	ldr	r4, [r6, #4]
 801a0f8:	89a3      	ldrh	r3, [r4, #12]
 801a0fa:	0718      	lsls	r0, r3, #28
 801a0fc:	d55e      	bpl.n	801a1bc <_vfiprintf_r+0xe4>
 801a0fe:	6923      	ldr	r3, [r4, #16]
 801a100:	2b00      	cmp	r3, #0
 801a102:	d05b      	beq.n	801a1bc <_vfiprintf_r+0xe4>
 801a104:	2300      	movs	r3, #0
 801a106:	9309      	str	r3, [sp, #36]	; 0x24
 801a108:	2320      	movs	r3, #32
 801a10a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801a10e:	2330      	movs	r3, #48	; 0x30
 801a110:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801a114:	9503      	str	r5, [sp, #12]
 801a116:	f04f 0b01 	mov.w	fp, #1
 801a11a:	46b8      	mov	r8, r7
 801a11c:	4645      	mov	r5, r8
 801a11e:	f815 3b01 	ldrb.w	r3, [r5], #1
 801a122:	b10b      	cbz	r3, 801a128 <_vfiprintf_r+0x50>
 801a124:	2b25      	cmp	r3, #37	; 0x25
 801a126:	d154      	bne.n	801a1d2 <_vfiprintf_r+0xfa>
 801a128:	ebb8 0a07 	subs.w	sl, r8, r7
 801a12c:	d00b      	beq.n	801a146 <_vfiprintf_r+0x6e>
 801a12e:	4653      	mov	r3, sl
 801a130:	463a      	mov	r2, r7
 801a132:	4621      	mov	r1, r4
 801a134:	4630      	mov	r0, r6
 801a136:	f7ff ffbc 	bl	801a0b2 <__sfputs_r>
 801a13a:	3001      	adds	r0, #1
 801a13c:	f000 80c2 	beq.w	801a2c4 <_vfiprintf_r+0x1ec>
 801a140:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801a142:	4453      	add	r3, sl
 801a144:	9309      	str	r3, [sp, #36]	; 0x24
 801a146:	f898 3000 	ldrb.w	r3, [r8]
 801a14a:	2b00      	cmp	r3, #0
 801a14c:	f000 80ba 	beq.w	801a2c4 <_vfiprintf_r+0x1ec>
 801a150:	2300      	movs	r3, #0
 801a152:	f04f 32ff 	mov.w	r2, #4294967295
 801a156:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801a15a:	9304      	str	r3, [sp, #16]
 801a15c:	9307      	str	r3, [sp, #28]
 801a15e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801a162:	931a      	str	r3, [sp, #104]	; 0x68
 801a164:	46a8      	mov	r8, r5
 801a166:	2205      	movs	r2, #5
 801a168:	f818 1b01 	ldrb.w	r1, [r8], #1
 801a16c:	485e      	ldr	r0, [pc, #376]	; (801a2e8 <_vfiprintf_r+0x210>)
 801a16e:	f7e6 f8bf 	bl	80002f0 <memchr>
 801a172:	9b04      	ldr	r3, [sp, #16]
 801a174:	bb78      	cbnz	r0, 801a1d6 <_vfiprintf_r+0xfe>
 801a176:	06d9      	lsls	r1, r3, #27
 801a178:	bf44      	itt	mi
 801a17a:	2220      	movmi	r2, #32
 801a17c:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 801a180:	071a      	lsls	r2, r3, #28
 801a182:	bf44      	itt	mi
 801a184:	222b      	movmi	r2, #43	; 0x2b
 801a186:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 801a18a:	782a      	ldrb	r2, [r5, #0]
 801a18c:	2a2a      	cmp	r2, #42	; 0x2a
 801a18e:	d02a      	beq.n	801a1e6 <_vfiprintf_r+0x10e>
 801a190:	9a07      	ldr	r2, [sp, #28]
 801a192:	46a8      	mov	r8, r5
 801a194:	2000      	movs	r0, #0
 801a196:	250a      	movs	r5, #10
 801a198:	4641      	mov	r1, r8
 801a19a:	f811 3b01 	ldrb.w	r3, [r1], #1
 801a19e:	3b30      	subs	r3, #48	; 0x30
 801a1a0:	2b09      	cmp	r3, #9
 801a1a2:	d969      	bls.n	801a278 <_vfiprintf_r+0x1a0>
 801a1a4:	b360      	cbz	r0, 801a200 <_vfiprintf_r+0x128>
 801a1a6:	e024      	b.n	801a1f2 <_vfiprintf_r+0x11a>
 801a1a8:	4b50      	ldr	r3, [pc, #320]	; (801a2ec <_vfiprintf_r+0x214>)
 801a1aa:	429c      	cmp	r4, r3
 801a1ac:	d101      	bne.n	801a1b2 <_vfiprintf_r+0xda>
 801a1ae:	68b4      	ldr	r4, [r6, #8]
 801a1b0:	e7a2      	b.n	801a0f8 <_vfiprintf_r+0x20>
 801a1b2:	4b4f      	ldr	r3, [pc, #316]	; (801a2f0 <_vfiprintf_r+0x218>)
 801a1b4:	429c      	cmp	r4, r3
 801a1b6:	bf08      	it	eq
 801a1b8:	68f4      	ldreq	r4, [r6, #12]
 801a1ba:	e79d      	b.n	801a0f8 <_vfiprintf_r+0x20>
 801a1bc:	4621      	mov	r1, r4
 801a1be:	4630      	mov	r0, r6
 801a1c0:	f7ff fbc0 	bl	8019944 <__swsetup_r>
 801a1c4:	2800      	cmp	r0, #0
 801a1c6:	d09d      	beq.n	801a104 <_vfiprintf_r+0x2c>
 801a1c8:	f04f 30ff 	mov.w	r0, #4294967295
 801a1cc:	b01d      	add	sp, #116	; 0x74
 801a1ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a1d2:	46a8      	mov	r8, r5
 801a1d4:	e7a2      	b.n	801a11c <_vfiprintf_r+0x44>
 801a1d6:	4a44      	ldr	r2, [pc, #272]	; (801a2e8 <_vfiprintf_r+0x210>)
 801a1d8:	1a80      	subs	r0, r0, r2
 801a1da:	fa0b f000 	lsl.w	r0, fp, r0
 801a1de:	4318      	orrs	r0, r3
 801a1e0:	9004      	str	r0, [sp, #16]
 801a1e2:	4645      	mov	r5, r8
 801a1e4:	e7be      	b.n	801a164 <_vfiprintf_r+0x8c>
 801a1e6:	9a03      	ldr	r2, [sp, #12]
 801a1e8:	1d11      	adds	r1, r2, #4
 801a1ea:	6812      	ldr	r2, [r2, #0]
 801a1ec:	9103      	str	r1, [sp, #12]
 801a1ee:	2a00      	cmp	r2, #0
 801a1f0:	db01      	blt.n	801a1f6 <_vfiprintf_r+0x11e>
 801a1f2:	9207      	str	r2, [sp, #28]
 801a1f4:	e004      	b.n	801a200 <_vfiprintf_r+0x128>
 801a1f6:	4252      	negs	r2, r2
 801a1f8:	f043 0302 	orr.w	r3, r3, #2
 801a1fc:	9207      	str	r2, [sp, #28]
 801a1fe:	9304      	str	r3, [sp, #16]
 801a200:	f898 3000 	ldrb.w	r3, [r8]
 801a204:	2b2e      	cmp	r3, #46	; 0x2e
 801a206:	d10e      	bne.n	801a226 <_vfiprintf_r+0x14e>
 801a208:	f898 3001 	ldrb.w	r3, [r8, #1]
 801a20c:	2b2a      	cmp	r3, #42	; 0x2a
 801a20e:	d138      	bne.n	801a282 <_vfiprintf_r+0x1aa>
 801a210:	9b03      	ldr	r3, [sp, #12]
 801a212:	1d1a      	adds	r2, r3, #4
 801a214:	681b      	ldr	r3, [r3, #0]
 801a216:	9203      	str	r2, [sp, #12]
 801a218:	2b00      	cmp	r3, #0
 801a21a:	bfb8      	it	lt
 801a21c:	f04f 33ff 	movlt.w	r3, #4294967295
 801a220:	f108 0802 	add.w	r8, r8, #2
 801a224:	9305      	str	r3, [sp, #20]
 801a226:	4d33      	ldr	r5, [pc, #204]	; (801a2f4 <_vfiprintf_r+0x21c>)
 801a228:	f898 1000 	ldrb.w	r1, [r8]
 801a22c:	2203      	movs	r2, #3
 801a22e:	4628      	mov	r0, r5
 801a230:	f7e6 f85e 	bl	80002f0 <memchr>
 801a234:	b140      	cbz	r0, 801a248 <_vfiprintf_r+0x170>
 801a236:	2340      	movs	r3, #64	; 0x40
 801a238:	1b40      	subs	r0, r0, r5
 801a23a:	fa03 f000 	lsl.w	r0, r3, r0
 801a23e:	9b04      	ldr	r3, [sp, #16]
 801a240:	4303      	orrs	r3, r0
 801a242:	f108 0801 	add.w	r8, r8, #1
 801a246:	9304      	str	r3, [sp, #16]
 801a248:	f898 1000 	ldrb.w	r1, [r8]
 801a24c:	482a      	ldr	r0, [pc, #168]	; (801a2f8 <_vfiprintf_r+0x220>)
 801a24e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801a252:	2206      	movs	r2, #6
 801a254:	f108 0701 	add.w	r7, r8, #1
 801a258:	f7e6 f84a 	bl	80002f0 <memchr>
 801a25c:	2800      	cmp	r0, #0
 801a25e:	d037      	beq.n	801a2d0 <_vfiprintf_r+0x1f8>
 801a260:	4b26      	ldr	r3, [pc, #152]	; (801a2fc <_vfiprintf_r+0x224>)
 801a262:	bb1b      	cbnz	r3, 801a2ac <_vfiprintf_r+0x1d4>
 801a264:	9b03      	ldr	r3, [sp, #12]
 801a266:	3307      	adds	r3, #7
 801a268:	f023 0307 	bic.w	r3, r3, #7
 801a26c:	3308      	adds	r3, #8
 801a26e:	9303      	str	r3, [sp, #12]
 801a270:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801a272:	444b      	add	r3, r9
 801a274:	9309      	str	r3, [sp, #36]	; 0x24
 801a276:	e750      	b.n	801a11a <_vfiprintf_r+0x42>
 801a278:	fb05 3202 	mla	r2, r5, r2, r3
 801a27c:	2001      	movs	r0, #1
 801a27e:	4688      	mov	r8, r1
 801a280:	e78a      	b.n	801a198 <_vfiprintf_r+0xc0>
 801a282:	2300      	movs	r3, #0
 801a284:	f108 0801 	add.w	r8, r8, #1
 801a288:	9305      	str	r3, [sp, #20]
 801a28a:	4619      	mov	r1, r3
 801a28c:	250a      	movs	r5, #10
 801a28e:	4640      	mov	r0, r8
 801a290:	f810 2b01 	ldrb.w	r2, [r0], #1
 801a294:	3a30      	subs	r2, #48	; 0x30
 801a296:	2a09      	cmp	r2, #9
 801a298:	d903      	bls.n	801a2a2 <_vfiprintf_r+0x1ca>
 801a29a:	2b00      	cmp	r3, #0
 801a29c:	d0c3      	beq.n	801a226 <_vfiprintf_r+0x14e>
 801a29e:	9105      	str	r1, [sp, #20]
 801a2a0:	e7c1      	b.n	801a226 <_vfiprintf_r+0x14e>
 801a2a2:	fb05 2101 	mla	r1, r5, r1, r2
 801a2a6:	2301      	movs	r3, #1
 801a2a8:	4680      	mov	r8, r0
 801a2aa:	e7f0      	b.n	801a28e <_vfiprintf_r+0x1b6>
 801a2ac:	ab03      	add	r3, sp, #12
 801a2ae:	9300      	str	r3, [sp, #0]
 801a2b0:	4622      	mov	r2, r4
 801a2b2:	4b13      	ldr	r3, [pc, #76]	; (801a300 <_vfiprintf_r+0x228>)
 801a2b4:	a904      	add	r1, sp, #16
 801a2b6:	4630      	mov	r0, r6
 801a2b8:	f3af 8000 	nop.w
 801a2bc:	f1b0 3fff 	cmp.w	r0, #4294967295
 801a2c0:	4681      	mov	r9, r0
 801a2c2:	d1d5      	bne.n	801a270 <_vfiprintf_r+0x198>
 801a2c4:	89a3      	ldrh	r3, [r4, #12]
 801a2c6:	065b      	lsls	r3, r3, #25
 801a2c8:	f53f af7e 	bmi.w	801a1c8 <_vfiprintf_r+0xf0>
 801a2cc:	9809      	ldr	r0, [sp, #36]	; 0x24
 801a2ce:	e77d      	b.n	801a1cc <_vfiprintf_r+0xf4>
 801a2d0:	ab03      	add	r3, sp, #12
 801a2d2:	9300      	str	r3, [sp, #0]
 801a2d4:	4622      	mov	r2, r4
 801a2d6:	4b0a      	ldr	r3, [pc, #40]	; (801a300 <_vfiprintf_r+0x228>)
 801a2d8:	a904      	add	r1, sp, #16
 801a2da:	4630      	mov	r0, r6
 801a2dc:	f000 f888 	bl	801a3f0 <_printf_i>
 801a2e0:	e7ec      	b.n	801a2bc <_vfiprintf_r+0x1e4>
 801a2e2:	bf00      	nop
 801a2e4:	0801b118 	.word	0x0801b118
 801a2e8:	0801b158 	.word	0x0801b158
 801a2ec:	0801b138 	.word	0x0801b138
 801a2f0:	0801b0f8 	.word	0x0801b0f8
 801a2f4:	0801b15e 	.word	0x0801b15e
 801a2f8:	0801b162 	.word	0x0801b162
 801a2fc:	00000000 	.word	0x00000000
 801a300:	0801a0b3 	.word	0x0801a0b3

0801a304 <_printf_common>:
 801a304:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801a308:	4691      	mov	r9, r2
 801a30a:	461f      	mov	r7, r3
 801a30c:	688a      	ldr	r2, [r1, #8]
 801a30e:	690b      	ldr	r3, [r1, #16]
 801a310:	f8dd 8020 	ldr.w	r8, [sp, #32]
 801a314:	4293      	cmp	r3, r2
 801a316:	bfb8      	it	lt
 801a318:	4613      	movlt	r3, r2
 801a31a:	f8c9 3000 	str.w	r3, [r9]
 801a31e:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 801a322:	4606      	mov	r6, r0
 801a324:	460c      	mov	r4, r1
 801a326:	b112      	cbz	r2, 801a32e <_printf_common+0x2a>
 801a328:	3301      	adds	r3, #1
 801a32a:	f8c9 3000 	str.w	r3, [r9]
 801a32e:	6823      	ldr	r3, [r4, #0]
 801a330:	0699      	lsls	r1, r3, #26
 801a332:	bf42      	ittt	mi
 801a334:	f8d9 3000 	ldrmi.w	r3, [r9]
 801a338:	3302      	addmi	r3, #2
 801a33a:	f8c9 3000 	strmi.w	r3, [r9]
 801a33e:	6825      	ldr	r5, [r4, #0]
 801a340:	f015 0506 	ands.w	r5, r5, #6
 801a344:	d107      	bne.n	801a356 <_printf_common+0x52>
 801a346:	f104 0a19 	add.w	sl, r4, #25
 801a34a:	68e3      	ldr	r3, [r4, #12]
 801a34c:	f8d9 2000 	ldr.w	r2, [r9]
 801a350:	1a9b      	subs	r3, r3, r2
 801a352:	42ab      	cmp	r3, r5
 801a354:	dc28      	bgt.n	801a3a8 <_printf_common+0xa4>
 801a356:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 801a35a:	6822      	ldr	r2, [r4, #0]
 801a35c:	3300      	adds	r3, #0
 801a35e:	bf18      	it	ne
 801a360:	2301      	movne	r3, #1
 801a362:	0692      	lsls	r2, r2, #26
 801a364:	d42d      	bmi.n	801a3c2 <_printf_common+0xbe>
 801a366:	f104 0243 	add.w	r2, r4, #67	; 0x43
 801a36a:	4639      	mov	r1, r7
 801a36c:	4630      	mov	r0, r6
 801a36e:	47c0      	blx	r8
 801a370:	3001      	adds	r0, #1
 801a372:	d020      	beq.n	801a3b6 <_printf_common+0xb2>
 801a374:	6823      	ldr	r3, [r4, #0]
 801a376:	68e5      	ldr	r5, [r4, #12]
 801a378:	f8d9 2000 	ldr.w	r2, [r9]
 801a37c:	f003 0306 	and.w	r3, r3, #6
 801a380:	2b04      	cmp	r3, #4
 801a382:	bf08      	it	eq
 801a384:	1aad      	subeq	r5, r5, r2
 801a386:	68a3      	ldr	r3, [r4, #8]
 801a388:	6922      	ldr	r2, [r4, #16]
 801a38a:	bf0c      	ite	eq
 801a38c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 801a390:	2500      	movne	r5, #0
 801a392:	4293      	cmp	r3, r2
 801a394:	bfc4      	itt	gt
 801a396:	1a9b      	subgt	r3, r3, r2
 801a398:	18ed      	addgt	r5, r5, r3
 801a39a:	f04f 0900 	mov.w	r9, #0
 801a39e:	341a      	adds	r4, #26
 801a3a0:	454d      	cmp	r5, r9
 801a3a2:	d11a      	bne.n	801a3da <_printf_common+0xd6>
 801a3a4:	2000      	movs	r0, #0
 801a3a6:	e008      	b.n	801a3ba <_printf_common+0xb6>
 801a3a8:	2301      	movs	r3, #1
 801a3aa:	4652      	mov	r2, sl
 801a3ac:	4639      	mov	r1, r7
 801a3ae:	4630      	mov	r0, r6
 801a3b0:	47c0      	blx	r8
 801a3b2:	3001      	adds	r0, #1
 801a3b4:	d103      	bne.n	801a3be <_printf_common+0xba>
 801a3b6:	f04f 30ff 	mov.w	r0, #4294967295
 801a3ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801a3be:	3501      	adds	r5, #1
 801a3c0:	e7c3      	b.n	801a34a <_printf_common+0x46>
 801a3c2:	18e1      	adds	r1, r4, r3
 801a3c4:	1c5a      	adds	r2, r3, #1
 801a3c6:	2030      	movs	r0, #48	; 0x30
 801a3c8:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 801a3cc:	4422      	add	r2, r4
 801a3ce:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 801a3d2:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 801a3d6:	3302      	adds	r3, #2
 801a3d8:	e7c5      	b.n	801a366 <_printf_common+0x62>
 801a3da:	2301      	movs	r3, #1
 801a3dc:	4622      	mov	r2, r4
 801a3de:	4639      	mov	r1, r7
 801a3e0:	4630      	mov	r0, r6
 801a3e2:	47c0      	blx	r8
 801a3e4:	3001      	adds	r0, #1
 801a3e6:	d0e6      	beq.n	801a3b6 <_printf_common+0xb2>
 801a3e8:	f109 0901 	add.w	r9, r9, #1
 801a3ec:	e7d8      	b.n	801a3a0 <_printf_common+0x9c>
	...

0801a3f0 <_printf_i>:
 801a3f0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801a3f4:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 801a3f8:	460c      	mov	r4, r1
 801a3fa:	7e09      	ldrb	r1, [r1, #24]
 801a3fc:	b085      	sub	sp, #20
 801a3fe:	296e      	cmp	r1, #110	; 0x6e
 801a400:	4617      	mov	r7, r2
 801a402:	4606      	mov	r6, r0
 801a404:	4698      	mov	r8, r3
 801a406:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801a408:	f000 80b3 	beq.w	801a572 <_printf_i+0x182>
 801a40c:	d822      	bhi.n	801a454 <_printf_i+0x64>
 801a40e:	2963      	cmp	r1, #99	; 0x63
 801a410:	d036      	beq.n	801a480 <_printf_i+0x90>
 801a412:	d80a      	bhi.n	801a42a <_printf_i+0x3a>
 801a414:	2900      	cmp	r1, #0
 801a416:	f000 80b9 	beq.w	801a58c <_printf_i+0x19c>
 801a41a:	2958      	cmp	r1, #88	; 0x58
 801a41c:	f000 8083 	beq.w	801a526 <_printf_i+0x136>
 801a420:	f104 0542 	add.w	r5, r4, #66	; 0x42
 801a424:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 801a428:	e032      	b.n	801a490 <_printf_i+0xa0>
 801a42a:	2964      	cmp	r1, #100	; 0x64
 801a42c:	d001      	beq.n	801a432 <_printf_i+0x42>
 801a42e:	2969      	cmp	r1, #105	; 0x69
 801a430:	d1f6      	bne.n	801a420 <_printf_i+0x30>
 801a432:	6820      	ldr	r0, [r4, #0]
 801a434:	6813      	ldr	r3, [r2, #0]
 801a436:	0605      	lsls	r5, r0, #24
 801a438:	f103 0104 	add.w	r1, r3, #4
 801a43c:	d52a      	bpl.n	801a494 <_printf_i+0xa4>
 801a43e:	681b      	ldr	r3, [r3, #0]
 801a440:	6011      	str	r1, [r2, #0]
 801a442:	2b00      	cmp	r3, #0
 801a444:	da03      	bge.n	801a44e <_printf_i+0x5e>
 801a446:	222d      	movs	r2, #45	; 0x2d
 801a448:	425b      	negs	r3, r3
 801a44a:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 801a44e:	486f      	ldr	r0, [pc, #444]	; (801a60c <_printf_i+0x21c>)
 801a450:	220a      	movs	r2, #10
 801a452:	e039      	b.n	801a4c8 <_printf_i+0xd8>
 801a454:	2973      	cmp	r1, #115	; 0x73
 801a456:	f000 809d 	beq.w	801a594 <_printf_i+0x1a4>
 801a45a:	d808      	bhi.n	801a46e <_printf_i+0x7e>
 801a45c:	296f      	cmp	r1, #111	; 0x6f
 801a45e:	d020      	beq.n	801a4a2 <_printf_i+0xb2>
 801a460:	2970      	cmp	r1, #112	; 0x70
 801a462:	d1dd      	bne.n	801a420 <_printf_i+0x30>
 801a464:	6823      	ldr	r3, [r4, #0]
 801a466:	f043 0320 	orr.w	r3, r3, #32
 801a46a:	6023      	str	r3, [r4, #0]
 801a46c:	e003      	b.n	801a476 <_printf_i+0x86>
 801a46e:	2975      	cmp	r1, #117	; 0x75
 801a470:	d017      	beq.n	801a4a2 <_printf_i+0xb2>
 801a472:	2978      	cmp	r1, #120	; 0x78
 801a474:	d1d4      	bne.n	801a420 <_printf_i+0x30>
 801a476:	2378      	movs	r3, #120	; 0x78
 801a478:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 801a47c:	4864      	ldr	r0, [pc, #400]	; (801a610 <_printf_i+0x220>)
 801a47e:	e055      	b.n	801a52c <_printf_i+0x13c>
 801a480:	6813      	ldr	r3, [r2, #0]
 801a482:	1d19      	adds	r1, r3, #4
 801a484:	681b      	ldr	r3, [r3, #0]
 801a486:	6011      	str	r1, [r2, #0]
 801a488:	f104 0542 	add.w	r5, r4, #66	; 0x42
 801a48c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 801a490:	2301      	movs	r3, #1
 801a492:	e08c      	b.n	801a5ae <_printf_i+0x1be>
 801a494:	681b      	ldr	r3, [r3, #0]
 801a496:	6011      	str	r1, [r2, #0]
 801a498:	f010 0f40 	tst.w	r0, #64	; 0x40
 801a49c:	bf18      	it	ne
 801a49e:	b21b      	sxthne	r3, r3
 801a4a0:	e7cf      	b.n	801a442 <_printf_i+0x52>
 801a4a2:	6813      	ldr	r3, [r2, #0]
 801a4a4:	6825      	ldr	r5, [r4, #0]
 801a4a6:	1d18      	adds	r0, r3, #4
 801a4a8:	6010      	str	r0, [r2, #0]
 801a4aa:	0628      	lsls	r0, r5, #24
 801a4ac:	d501      	bpl.n	801a4b2 <_printf_i+0xc2>
 801a4ae:	681b      	ldr	r3, [r3, #0]
 801a4b0:	e002      	b.n	801a4b8 <_printf_i+0xc8>
 801a4b2:	0668      	lsls	r0, r5, #25
 801a4b4:	d5fb      	bpl.n	801a4ae <_printf_i+0xbe>
 801a4b6:	881b      	ldrh	r3, [r3, #0]
 801a4b8:	4854      	ldr	r0, [pc, #336]	; (801a60c <_printf_i+0x21c>)
 801a4ba:	296f      	cmp	r1, #111	; 0x6f
 801a4bc:	bf14      	ite	ne
 801a4be:	220a      	movne	r2, #10
 801a4c0:	2208      	moveq	r2, #8
 801a4c2:	2100      	movs	r1, #0
 801a4c4:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 801a4c8:	6865      	ldr	r5, [r4, #4]
 801a4ca:	60a5      	str	r5, [r4, #8]
 801a4cc:	2d00      	cmp	r5, #0
 801a4ce:	f2c0 8095 	blt.w	801a5fc <_printf_i+0x20c>
 801a4d2:	6821      	ldr	r1, [r4, #0]
 801a4d4:	f021 0104 	bic.w	r1, r1, #4
 801a4d8:	6021      	str	r1, [r4, #0]
 801a4da:	2b00      	cmp	r3, #0
 801a4dc:	d13d      	bne.n	801a55a <_printf_i+0x16a>
 801a4de:	2d00      	cmp	r5, #0
 801a4e0:	f040 808e 	bne.w	801a600 <_printf_i+0x210>
 801a4e4:	4665      	mov	r5, ip
 801a4e6:	2a08      	cmp	r2, #8
 801a4e8:	d10b      	bne.n	801a502 <_printf_i+0x112>
 801a4ea:	6823      	ldr	r3, [r4, #0]
 801a4ec:	07db      	lsls	r3, r3, #31
 801a4ee:	d508      	bpl.n	801a502 <_printf_i+0x112>
 801a4f0:	6923      	ldr	r3, [r4, #16]
 801a4f2:	6862      	ldr	r2, [r4, #4]
 801a4f4:	429a      	cmp	r2, r3
 801a4f6:	bfde      	ittt	le
 801a4f8:	2330      	movle	r3, #48	; 0x30
 801a4fa:	f805 3c01 	strble.w	r3, [r5, #-1]
 801a4fe:	f105 35ff 	addle.w	r5, r5, #4294967295
 801a502:	ebac 0305 	sub.w	r3, ip, r5
 801a506:	6123      	str	r3, [r4, #16]
 801a508:	f8cd 8000 	str.w	r8, [sp]
 801a50c:	463b      	mov	r3, r7
 801a50e:	aa03      	add	r2, sp, #12
 801a510:	4621      	mov	r1, r4
 801a512:	4630      	mov	r0, r6
 801a514:	f7ff fef6 	bl	801a304 <_printf_common>
 801a518:	3001      	adds	r0, #1
 801a51a:	d14d      	bne.n	801a5b8 <_printf_i+0x1c8>
 801a51c:	f04f 30ff 	mov.w	r0, #4294967295
 801a520:	b005      	add	sp, #20
 801a522:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801a526:	4839      	ldr	r0, [pc, #228]	; (801a60c <_printf_i+0x21c>)
 801a528:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 801a52c:	6813      	ldr	r3, [r2, #0]
 801a52e:	6821      	ldr	r1, [r4, #0]
 801a530:	1d1d      	adds	r5, r3, #4
 801a532:	681b      	ldr	r3, [r3, #0]
 801a534:	6015      	str	r5, [r2, #0]
 801a536:	060a      	lsls	r2, r1, #24
 801a538:	d50b      	bpl.n	801a552 <_printf_i+0x162>
 801a53a:	07ca      	lsls	r2, r1, #31
 801a53c:	bf44      	itt	mi
 801a53e:	f041 0120 	orrmi.w	r1, r1, #32
 801a542:	6021      	strmi	r1, [r4, #0]
 801a544:	b91b      	cbnz	r3, 801a54e <_printf_i+0x15e>
 801a546:	6822      	ldr	r2, [r4, #0]
 801a548:	f022 0220 	bic.w	r2, r2, #32
 801a54c:	6022      	str	r2, [r4, #0]
 801a54e:	2210      	movs	r2, #16
 801a550:	e7b7      	b.n	801a4c2 <_printf_i+0xd2>
 801a552:	064d      	lsls	r5, r1, #25
 801a554:	bf48      	it	mi
 801a556:	b29b      	uxthmi	r3, r3
 801a558:	e7ef      	b.n	801a53a <_printf_i+0x14a>
 801a55a:	4665      	mov	r5, ip
 801a55c:	fbb3 f1f2 	udiv	r1, r3, r2
 801a560:	fb02 3311 	mls	r3, r2, r1, r3
 801a564:	5cc3      	ldrb	r3, [r0, r3]
 801a566:	f805 3d01 	strb.w	r3, [r5, #-1]!
 801a56a:	460b      	mov	r3, r1
 801a56c:	2900      	cmp	r1, #0
 801a56e:	d1f5      	bne.n	801a55c <_printf_i+0x16c>
 801a570:	e7b9      	b.n	801a4e6 <_printf_i+0xf6>
 801a572:	6813      	ldr	r3, [r2, #0]
 801a574:	6825      	ldr	r5, [r4, #0]
 801a576:	6961      	ldr	r1, [r4, #20]
 801a578:	1d18      	adds	r0, r3, #4
 801a57a:	6010      	str	r0, [r2, #0]
 801a57c:	0628      	lsls	r0, r5, #24
 801a57e:	681b      	ldr	r3, [r3, #0]
 801a580:	d501      	bpl.n	801a586 <_printf_i+0x196>
 801a582:	6019      	str	r1, [r3, #0]
 801a584:	e002      	b.n	801a58c <_printf_i+0x19c>
 801a586:	066a      	lsls	r2, r5, #25
 801a588:	d5fb      	bpl.n	801a582 <_printf_i+0x192>
 801a58a:	8019      	strh	r1, [r3, #0]
 801a58c:	2300      	movs	r3, #0
 801a58e:	6123      	str	r3, [r4, #16]
 801a590:	4665      	mov	r5, ip
 801a592:	e7b9      	b.n	801a508 <_printf_i+0x118>
 801a594:	6813      	ldr	r3, [r2, #0]
 801a596:	1d19      	adds	r1, r3, #4
 801a598:	6011      	str	r1, [r2, #0]
 801a59a:	681d      	ldr	r5, [r3, #0]
 801a59c:	6862      	ldr	r2, [r4, #4]
 801a59e:	2100      	movs	r1, #0
 801a5a0:	4628      	mov	r0, r5
 801a5a2:	f7e5 fea5 	bl	80002f0 <memchr>
 801a5a6:	b108      	cbz	r0, 801a5ac <_printf_i+0x1bc>
 801a5a8:	1b40      	subs	r0, r0, r5
 801a5aa:	6060      	str	r0, [r4, #4]
 801a5ac:	6863      	ldr	r3, [r4, #4]
 801a5ae:	6123      	str	r3, [r4, #16]
 801a5b0:	2300      	movs	r3, #0
 801a5b2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801a5b6:	e7a7      	b.n	801a508 <_printf_i+0x118>
 801a5b8:	6923      	ldr	r3, [r4, #16]
 801a5ba:	462a      	mov	r2, r5
 801a5bc:	4639      	mov	r1, r7
 801a5be:	4630      	mov	r0, r6
 801a5c0:	47c0      	blx	r8
 801a5c2:	3001      	adds	r0, #1
 801a5c4:	d0aa      	beq.n	801a51c <_printf_i+0x12c>
 801a5c6:	6823      	ldr	r3, [r4, #0]
 801a5c8:	079b      	lsls	r3, r3, #30
 801a5ca:	d413      	bmi.n	801a5f4 <_printf_i+0x204>
 801a5cc:	68e0      	ldr	r0, [r4, #12]
 801a5ce:	9b03      	ldr	r3, [sp, #12]
 801a5d0:	4298      	cmp	r0, r3
 801a5d2:	bfb8      	it	lt
 801a5d4:	4618      	movlt	r0, r3
 801a5d6:	e7a3      	b.n	801a520 <_printf_i+0x130>
 801a5d8:	2301      	movs	r3, #1
 801a5da:	464a      	mov	r2, r9
 801a5dc:	4639      	mov	r1, r7
 801a5de:	4630      	mov	r0, r6
 801a5e0:	47c0      	blx	r8
 801a5e2:	3001      	adds	r0, #1
 801a5e4:	d09a      	beq.n	801a51c <_printf_i+0x12c>
 801a5e6:	3501      	adds	r5, #1
 801a5e8:	68e3      	ldr	r3, [r4, #12]
 801a5ea:	9a03      	ldr	r2, [sp, #12]
 801a5ec:	1a9b      	subs	r3, r3, r2
 801a5ee:	42ab      	cmp	r3, r5
 801a5f0:	dcf2      	bgt.n	801a5d8 <_printf_i+0x1e8>
 801a5f2:	e7eb      	b.n	801a5cc <_printf_i+0x1dc>
 801a5f4:	2500      	movs	r5, #0
 801a5f6:	f104 0919 	add.w	r9, r4, #25
 801a5fa:	e7f5      	b.n	801a5e8 <_printf_i+0x1f8>
 801a5fc:	2b00      	cmp	r3, #0
 801a5fe:	d1ac      	bne.n	801a55a <_printf_i+0x16a>
 801a600:	7803      	ldrb	r3, [r0, #0]
 801a602:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 801a606:	f104 0542 	add.w	r5, r4, #66	; 0x42
 801a60a:	e76c      	b.n	801a4e6 <_printf_i+0xf6>
 801a60c:	0801b169 	.word	0x0801b169
 801a610:	0801b17a 	.word	0x0801b17a

0801a614 <__sread>:
 801a614:	b510      	push	{r4, lr}
 801a616:	460c      	mov	r4, r1
 801a618:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801a61c:	f000 f8d4 	bl	801a7c8 <_read_r>
 801a620:	2800      	cmp	r0, #0
 801a622:	bfab      	itete	ge
 801a624:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 801a626:	89a3      	ldrhlt	r3, [r4, #12]
 801a628:	181b      	addge	r3, r3, r0
 801a62a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 801a62e:	bfac      	ite	ge
 801a630:	6563      	strge	r3, [r4, #84]	; 0x54
 801a632:	81a3      	strhlt	r3, [r4, #12]
 801a634:	bd10      	pop	{r4, pc}

0801a636 <__swrite>:
 801a636:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801a63a:	461f      	mov	r7, r3
 801a63c:	898b      	ldrh	r3, [r1, #12]
 801a63e:	05db      	lsls	r3, r3, #23
 801a640:	4605      	mov	r5, r0
 801a642:	460c      	mov	r4, r1
 801a644:	4616      	mov	r6, r2
 801a646:	d505      	bpl.n	801a654 <__swrite+0x1e>
 801a648:	2302      	movs	r3, #2
 801a64a:	2200      	movs	r2, #0
 801a64c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801a650:	f000 f868 	bl	801a724 <_lseek_r>
 801a654:	89a3      	ldrh	r3, [r4, #12]
 801a656:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801a65a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 801a65e:	81a3      	strh	r3, [r4, #12]
 801a660:	4632      	mov	r2, r6
 801a662:	463b      	mov	r3, r7
 801a664:	4628      	mov	r0, r5
 801a666:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801a66a:	f000 b817 	b.w	801a69c <_write_r>

0801a66e <__sseek>:
 801a66e:	b510      	push	{r4, lr}
 801a670:	460c      	mov	r4, r1
 801a672:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801a676:	f000 f855 	bl	801a724 <_lseek_r>
 801a67a:	1c43      	adds	r3, r0, #1
 801a67c:	89a3      	ldrh	r3, [r4, #12]
 801a67e:	bf15      	itete	ne
 801a680:	6560      	strne	r0, [r4, #84]	; 0x54
 801a682:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 801a686:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 801a68a:	81a3      	strheq	r3, [r4, #12]
 801a68c:	bf18      	it	ne
 801a68e:	81a3      	strhne	r3, [r4, #12]
 801a690:	bd10      	pop	{r4, pc}

0801a692 <__sclose>:
 801a692:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801a696:	f000 b813 	b.w	801a6c0 <_close_r>
	...

0801a69c <_write_r>:
 801a69c:	b538      	push	{r3, r4, r5, lr}
 801a69e:	4c07      	ldr	r4, [pc, #28]	; (801a6bc <_write_r+0x20>)
 801a6a0:	4605      	mov	r5, r0
 801a6a2:	4608      	mov	r0, r1
 801a6a4:	4611      	mov	r1, r2
 801a6a6:	2200      	movs	r2, #0
 801a6a8:	6022      	str	r2, [r4, #0]
 801a6aa:	461a      	mov	r2, r3
 801a6ac:	f7e9 fb51 	bl	8003d52 <_write>
 801a6b0:	1c43      	adds	r3, r0, #1
 801a6b2:	d102      	bne.n	801a6ba <_write_r+0x1e>
 801a6b4:	6823      	ldr	r3, [r4, #0]
 801a6b6:	b103      	cbz	r3, 801a6ba <_write_r+0x1e>
 801a6b8:	602b      	str	r3, [r5, #0]
 801a6ba:	bd38      	pop	{r3, r4, r5, pc}
 801a6bc:	240024ac 	.word	0x240024ac

0801a6c0 <_close_r>:
 801a6c0:	b538      	push	{r3, r4, r5, lr}
 801a6c2:	4c06      	ldr	r4, [pc, #24]	; (801a6dc <_close_r+0x1c>)
 801a6c4:	2300      	movs	r3, #0
 801a6c6:	4605      	mov	r5, r0
 801a6c8:	4608      	mov	r0, r1
 801a6ca:	6023      	str	r3, [r4, #0]
 801a6cc:	f7e9 fe51 	bl	8004372 <_close>
 801a6d0:	1c43      	adds	r3, r0, #1
 801a6d2:	d102      	bne.n	801a6da <_close_r+0x1a>
 801a6d4:	6823      	ldr	r3, [r4, #0]
 801a6d6:	b103      	cbz	r3, 801a6da <_close_r+0x1a>
 801a6d8:	602b      	str	r3, [r5, #0]
 801a6da:	bd38      	pop	{r3, r4, r5, pc}
 801a6dc:	240024ac 	.word	0x240024ac

0801a6e0 <_fstat_r>:
 801a6e0:	b538      	push	{r3, r4, r5, lr}
 801a6e2:	4c07      	ldr	r4, [pc, #28]	; (801a700 <_fstat_r+0x20>)
 801a6e4:	2300      	movs	r3, #0
 801a6e6:	4605      	mov	r5, r0
 801a6e8:	4608      	mov	r0, r1
 801a6ea:	4611      	mov	r1, r2
 801a6ec:	6023      	str	r3, [r4, #0]
 801a6ee:	f7e9 fe4c 	bl	800438a <_fstat>
 801a6f2:	1c43      	adds	r3, r0, #1
 801a6f4:	d102      	bne.n	801a6fc <_fstat_r+0x1c>
 801a6f6:	6823      	ldr	r3, [r4, #0]
 801a6f8:	b103      	cbz	r3, 801a6fc <_fstat_r+0x1c>
 801a6fa:	602b      	str	r3, [r5, #0]
 801a6fc:	bd38      	pop	{r3, r4, r5, pc}
 801a6fe:	bf00      	nop
 801a700:	240024ac 	.word	0x240024ac

0801a704 <_isatty_r>:
 801a704:	b538      	push	{r3, r4, r5, lr}
 801a706:	4c06      	ldr	r4, [pc, #24]	; (801a720 <_isatty_r+0x1c>)
 801a708:	2300      	movs	r3, #0
 801a70a:	4605      	mov	r5, r0
 801a70c:	4608      	mov	r0, r1
 801a70e:	6023      	str	r3, [r4, #0]
 801a710:	f7e9 fe4b 	bl	80043aa <_isatty>
 801a714:	1c43      	adds	r3, r0, #1
 801a716:	d102      	bne.n	801a71e <_isatty_r+0x1a>
 801a718:	6823      	ldr	r3, [r4, #0]
 801a71a:	b103      	cbz	r3, 801a71e <_isatty_r+0x1a>
 801a71c:	602b      	str	r3, [r5, #0]
 801a71e:	bd38      	pop	{r3, r4, r5, pc}
 801a720:	240024ac 	.word	0x240024ac

0801a724 <_lseek_r>:
 801a724:	b538      	push	{r3, r4, r5, lr}
 801a726:	4c07      	ldr	r4, [pc, #28]	; (801a744 <_lseek_r+0x20>)
 801a728:	4605      	mov	r5, r0
 801a72a:	4608      	mov	r0, r1
 801a72c:	4611      	mov	r1, r2
 801a72e:	2200      	movs	r2, #0
 801a730:	6022      	str	r2, [r4, #0]
 801a732:	461a      	mov	r2, r3
 801a734:	f7e9 fe44 	bl	80043c0 <_lseek>
 801a738:	1c43      	adds	r3, r0, #1
 801a73a:	d102      	bne.n	801a742 <_lseek_r+0x1e>
 801a73c:	6823      	ldr	r3, [r4, #0]
 801a73e:	b103      	cbz	r3, 801a742 <_lseek_r+0x1e>
 801a740:	602b      	str	r3, [r5, #0]
 801a742:	bd38      	pop	{r3, r4, r5, pc}
 801a744:	240024ac 	.word	0x240024ac

0801a748 <memmove>:
 801a748:	4288      	cmp	r0, r1
 801a74a:	b510      	push	{r4, lr}
 801a74c:	eb01 0302 	add.w	r3, r1, r2
 801a750:	d807      	bhi.n	801a762 <memmove+0x1a>
 801a752:	1e42      	subs	r2, r0, #1
 801a754:	4299      	cmp	r1, r3
 801a756:	d00a      	beq.n	801a76e <memmove+0x26>
 801a758:	f811 4b01 	ldrb.w	r4, [r1], #1
 801a75c:	f802 4f01 	strb.w	r4, [r2, #1]!
 801a760:	e7f8      	b.n	801a754 <memmove+0xc>
 801a762:	4283      	cmp	r3, r0
 801a764:	d9f5      	bls.n	801a752 <memmove+0xa>
 801a766:	1881      	adds	r1, r0, r2
 801a768:	1ad2      	subs	r2, r2, r3
 801a76a:	42d3      	cmn	r3, r2
 801a76c:	d100      	bne.n	801a770 <memmove+0x28>
 801a76e:	bd10      	pop	{r4, pc}
 801a770:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 801a774:	f801 4d01 	strb.w	r4, [r1, #-1]!
 801a778:	e7f7      	b.n	801a76a <memmove+0x22>

0801a77a <_realloc_r>:
 801a77a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801a77c:	4607      	mov	r7, r0
 801a77e:	4614      	mov	r4, r2
 801a780:	460e      	mov	r6, r1
 801a782:	b921      	cbnz	r1, 801a78e <_realloc_r+0x14>
 801a784:	4611      	mov	r1, r2
 801a786:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 801a78a:	f7fe bf47 	b.w	801961c <_malloc_r>
 801a78e:	b922      	cbnz	r2, 801a79a <_realloc_r+0x20>
 801a790:	f7fe fef6 	bl	8019580 <_free_r>
 801a794:	4625      	mov	r5, r4
 801a796:	4628      	mov	r0, r5
 801a798:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801a79a:	f000 f827 	bl	801a7ec <_malloc_usable_size_r>
 801a79e:	42a0      	cmp	r0, r4
 801a7a0:	d20f      	bcs.n	801a7c2 <_realloc_r+0x48>
 801a7a2:	4621      	mov	r1, r4
 801a7a4:	4638      	mov	r0, r7
 801a7a6:	f7fe ff39 	bl	801961c <_malloc_r>
 801a7aa:	4605      	mov	r5, r0
 801a7ac:	2800      	cmp	r0, #0
 801a7ae:	d0f2      	beq.n	801a796 <_realloc_r+0x1c>
 801a7b0:	4631      	mov	r1, r6
 801a7b2:	4622      	mov	r2, r4
 801a7b4:	f7fe fed0 	bl	8019558 <memcpy>
 801a7b8:	4631      	mov	r1, r6
 801a7ba:	4638      	mov	r0, r7
 801a7bc:	f7fe fee0 	bl	8019580 <_free_r>
 801a7c0:	e7e9      	b.n	801a796 <_realloc_r+0x1c>
 801a7c2:	4635      	mov	r5, r6
 801a7c4:	e7e7      	b.n	801a796 <_realloc_r+0x1c>
	...

0801a7c8 <_read_r>:
 801a7c8:	b538      	push	{r3, r4, r5, lr}
 801a7ca:	4c07      	ldr	r4, [pc, #28]	; (801a7e8 <_read_r+0x20>)
 801a7cc:	4605      	mov	r5, r0
 801a7ce:	4608      	mov	r0, r1
 801a7d0:	4611      	mov	r1, r2
 801a7d2:	2200      	movs	r2, #0
 801a7d4:	6022      	str	r2, [r4, #0]
 801a7d6:	461a      	mov	r2, r3
 801a7d8:	f7e9 fdae 	bl	8004338 <_read>
 801a7dc:	1c43      	adds	r3, r0, #1
 801a7de:	d102      	bne.n	801a7e6 <_read_r+0x1e>
 801a7e0:	6823      	ldr	r3, [r4, #0]
 801a7e2:	b103      	cbz	r3, 801a7e6 <_read_r+0x1e>
 801a7e4:	602b      	str	r3, [r5, #0]
 801a7e6:	bd38      	pop	{r3, r4, r5, pc}
 801a7e8:	240024ac 	.word	0x240024ac

0801a7ec <_malloc_usable_size_r>:
 801a7ec:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801a7f0:	1f18      	subs	r0, r3, #4
 801a7f2:	2b00      	cmp	r3, #0
 801a7f4:	bfbc      	itt	lt
 801a7f6:	580b      	ldrlt	r3, [r1, r0]
 801a7f8:	18c0      	addlt	r0, r0, r3
 801a7fa:	4770      	bx	lr

0801a7fc <_init>:
 801a7fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801a7fe:	bf00      	nop
 801a800:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801a802:	bc08      	pop	{r3}
 801a804:	469e      	mov	lr, r3
 801a806:	4770      	bx	lr

0801a808 <_fini>:
 801a808:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801a80a:	bf00      	nop
 801a80c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801a80e:	bc08      	pop	{r3}
 801a810:	469e      	mov	lr, r3
 801a812:	4770      	bx	lr

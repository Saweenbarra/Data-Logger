
Data-Logger.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001ba5c  080002a0  080002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000ad4  0801bd00  0801bd00  0002bd00  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801c7d4  0801c7d4  0003034c  2**0
                  CONTENTS
  4 .ARM          00000008  0801c7d4  0801c7d4  0002c7d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801c7dc  0801c7dc  0003034c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0801c7dc  0801c7dc  0002c7dc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0801c7e0  0801c7e0  0002c7e0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000034c  24000000  0801c7e4  00030000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000453fc  24000350  0801cb30  00030350  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  2404574c  0801cb30  0003574c  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  0003034c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0004a480  00000000  00000000  0003037a  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00007c1f  00000000  00000000  0007a7fa  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00002440  00000000  00000000  00082420  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00002148  00000000  00000000  00084860  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000431dd  00000000  00000000  000869a8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0002830f  00000000  00000000  000c9b85  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00178766  00000000  00000000  000f1e94  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0026a5fa  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000a46c  00000000  00000000  0026a678  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	; (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	; (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	; (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	24000350 	.word	0x24000350
 80002bc:	00000000 	.word	0x00000000
 80002c0:	0801bce4 	.word	0x0801bce4

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	; (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	; (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	; (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	24000354 	.word	0x24000354
 80002dc:	0801bce4 	.word	0x0801bce4

080002e0 <strlen>:
 80002e0:	4603      	mov	r3, r0
 80002e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002e6:	2a00      	cmp	r2, #0
 80002e8:	d1fb      	bne.n	80002e2 <strlen+0x2>
 80002ea:	1a18      	subs	r0, r3, r0
 80002ec:	3801      	subs	r0, #1
 80002ee:	4770      	bx	lr

080002f0 <memchr>:
 80002f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002f4:	2a10      	cmp	r2, #16
 80002f6:	db2b      	blt.n	8000350 <memchr+0x60>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	d008      	beq.n	8000310 <memchr+0x20>
 80002fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000302:	3a01      	subs	r2, #1
 8000304:	428b      	cmp	r3, r1
 8000306:	d02d      	beq.n	8000364 <memchr+0x74>
 8000308:	f010 0f07 	tst.w	r0, #7
 800030c:	b342      	cbz	r2, 8000360 <memchr+0x70>
 800030e:	d1f6      	bne.n	80002fe <memchr+0xe>
 8000310:	b4f0      	push	{r4, r5, r6, r7}
 8000312:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000316:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800031a:	f022 0407 	bic.w	r4, r2, #7
 800031e:	f07f 0700 	mvns.w	r7, #0
 8000322:	2300      	movs	r3, #0
 8000324:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000328:	3c08      	subs	r4, #8
 800032a:	ea85 0501 	eor.w	r5, r5, r1
 800032e:	ea86 0601 	eor.w	r6, r6, r1
 8000332:	fa85 f547 	uadd8	r5, r5, r7
 8000336:	faa3 f587 	sel	r5, r3, r7
 800033a:	fa86 f647 	uadd8	r6, r6, r7
 800033e:	faa5 f687 	sel	r6, r5, r7
 8000342:	b98e      	cbnz	r6, 8000368 <memchr+0x78>
 8000344:	d1ee      	bne.n	8000324 <memchr+0x34>
 8000346:	bcf0      	pop	{r4, r5, r6, r7}
 8000348:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800034c:	f002 0207 	and.w	r2, r2, #7
 8000350:	b132      	cbz	r2, 8000360 <memchr+0x70>
 8000352:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000356:	3a01      	subs	r2, #1
 8000358:	ea83 0301 	eor.w	r3, r3, r1
 800035c:	b113      	cbz	r3, 8000364 <memchr+0x74>
 800035e:	d1f8      	bne.n	8000352 <memchr+0x62>
 8000360:	2000      	movs	r0, #0
 8000362:	4770      	bx	lr
 8000364:	3801      	subs	r0, #1
 8000366:	4770      	bx	lr
 8000368:	2d00      	cmp	r5, #0
 800036a:	bf06      	itte	eq
 800036c:	4635      	moveq	r5, r6
 800036e:	3803      	subeq	r0, #3
 8000370:	3807      	subne	r0, #7
 8000372:	f015 0f01 	tst.w	r5, #1
 8000376:	d107      	bne.n	8000388 <memchr+0x98>
 8000378:	3001      	adds	r0, #1
 800037a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800037e:	bf02      	ittt	eq
 8000380:	3001      	addeq	r0, #1
 8000382:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000386:	3001      	addeq	r0, #1
 8000388:	bcf0      	pop	{r4, r5, r6, r7}
 800038a:	3801      	subs	r0, #1
 800038c:	4770      	bx	lr
 800038e:	bf00      	nop

08000390 <__aeabi_uldivmod>:
 8000390:	b953      	cbnz	r3, 80003a8 <__aeabi_uldivmod+0x18>
 8000392:	b94a      	cbnz	r2, 80003a8 <__aeabi_uldivmod+0x18>
 8000394:	2900      	cmp	r1, #0
 8000396:	bf08      	it	eq
 8000398:	2800      	cmpeq	r0, #0
 800039a:	bf1c      	itt	ne
 800039c:	f04f 31ff 	movne.w	r1, #4294967295
 80003a0:	f04f 30ff 	movne.w	r0, #4294967295
 80003a4:	f000 b972 	b.w	800068c <__aeabi_idiv0>
 80003a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80003ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003b0:	f000 f806 	bl	80003c0 <__udivmoddi4>
 80003b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003bc:	b004      	add	sp, #16
 80003be:	4770      	bx	lr

080003c0 <__udivmoddi4>:
 80003c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003c4:	9e08      	ldr	r6, [sp, #32]
 80003c6:	4604      	mov	r4, r0
 80003c8:	4688      	mov	r8, r1
 80003ca:	2b00      	cmp	r3, #0
 80003cc:	d14b      	bne.n	8000466 <__udivmoddi4+0xa6>
 80003ce:	428a      	cmp	r2, r1
 80003d0:	4615      	mov	r5, r2
 80003d2:	d967      	bls.n	80004a4 <__udivmoddi4+0xe4>
 80003d4:	fab2 f282 	clz	r2, r2
 80003d8:	b14a      	cbz	r2, 80003ee <__udivmoddi4+0x2e>
 80003da:	f1c2 0720 	rsb	r7, r2, #32
 80003de:	fa01 f302 	lsl.w	r3, r1, r2
 80003e2:	fa20 f707 	lsr.w	r7, r0, r7
 80003e6:	4095      	lsls	r5, r2
 80003e8:	ea47 0803 	orr.w	r8, r7, r3
 80003ec:	4094      	lsls	r4, r2
 80003ee:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80003f2:	0c23      	lsrs	r3, r4, #16
 80003f4:	fbb8 f7fe 	udiv	r7, r8, lr
 80003f8:	fa1f fc85 	uxth.w	ip, r5
 80003fc:	fb0e 8817 	mls	r8, lr, r7, r8
 8000400:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000404:	fb07 f10c 	mul.w	r1, r7, ip
 8000408:	4299      	cmp	r1, r3
 800040a:	d909      	bls.n	8000420 <__udivmoddi4+0x60>
 800040c:	18eb      	adds	r3, r5, r3
 800040e:	f107 30ff 	add.w	r0, r7, #4294967295
 8000412:	f080 811b 	bcs.w	800064c <__udivmoddi4+0x28c>
 8000416:	4299      	cmp	r1, r3
 8000418:	f240 8118 	bls.w	800064c <__udivmoddi4+0x28c>
 800041c:	3f02      	subs	r7, #2
 800041e:	442b      	add	r3, r5
 8000420:	1a5b      	subs	r3, r3, r1
 8000422:	b2a4      	uxth	r4, r4
 8000424:	fbb3 f0fe 	udiv	r0, r3, lr
 8000428:	fb0e 3310 	mls	r3, lr, r0, r3
 800042c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000430:	fb00 fc0c 	mul.w	ip, r0, ip
 8000434:	45a4      	cmp	ip, r4
 8000436:	d909      	bls.n	800044c <__udivmoddi4+0x8c>
 8000438:	192c      	adds	r4, r5, r4
 800043a:	f100 33ff 	add.w	r3, r0, #4294967295
 800043e:	f080 8107 	bcs.w	8000650 <__udivmoddi4+0x290>
 8000442:	45a4      	cmp	ip, r4
 8000444:	f240 8104 	bls.w	8000650 <__udivmoddi4+0x290>
 8000448:	3802      	subs	r0, #2
 800044a:	442c      	add	r4, r5
 800044c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000450:	eba4 040c 	sub.w	r4, r4, ip
 8000454:	2700      	movs	r7, #0
 8000456:	b11e      	cbz	r6, 8000460 <__udivmoddi4+0xa0>
 8000458:	40d4      	lsrs	r4, r2
 800045a:	2300      	movs	r3, #0
 800045c:	e9c6 4300 	strd	r4, r3, [r6]
 8000460:	4639      	mov	r1, r7
 8000462:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000466:	428b      	cmp	r3, r1
 8000468:	d909      	bls.n	800047e <__udivmoddi4+0xbe>
 800046a:	2e00      	cmp	r6, #0
 800046c:	f000 80eb 	beq.w	8000646 <__udivmoddi4+0x286>
 8000470:	2700      	movs	r7, #0
 8000472:	e9c6 0100 	strd	r0, r1, [r6]
 8000476:	4638      	mov	r0, r7
 8000478:	4639      	mov	r1, r7
 800047a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800047e:	fab3 f783 	clz	r7, r3
 8000482:	2f00      	cmp	r7, #0
 8000484:	d147      	bne.n	8000516 <__udivmoddi4+0x156>
 8000486:	428b      	cmp	r3, r1
 8000488:	d302      	bcc.n	8000490 <__udivmoddi4+0xd0>
 800048a:	4282      	cmp	r2, r0
 800048c:	f200 80fa 	bhi.w	8000684 <__udivmoddi4+0x2c4>
 8000490:	1a84      	subs	r4, r0, r2
 8000492:	eb61 0303 	sbc.w	r3, r1, r3
 8000496:	2001      	movs	r0, #1
 8000498:	4698      	mov	r8, r3
 800049a:	2e00      	cmp	r6, #0
 800049c:	d0e0      	beq.n	8000460 <__udivmoddi4+0xa0>
 800049e:	e9c6 4800 	strd	r4, r8, [r6]
 80004a2:	e7dd      	b.n	8000460 <__udivmoddi4+0xa0>
 80004a4:	b902      	cbnz	r2, 80004a8 <__udivmoddi4+0xe8>
 80004a6:	deff      	udf	#255	; 0xff
 80004a8:	fab2 f282 	clz	r2, r2
 80004ac:	2a00      	cmp	r2, #0
 80004ae:	f040 808f 	bne.w	80005d0 <__udivmoddi4+0x210>
 80004b2:	1b49      	subs	r1, r1, r5
 80004b4:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80004b8:	fa1f f885 	uxth.w	r8, r5
 80004bc:	2701      	movs	r7, #1
 80004be:	fbb1 fcfe 	udiv	ip, r1, lr
 80004c2:	0c23      	lsrs	r3, r4, #16
 80004c4:	fb0e 111c 	mls	r1, lr, ip, r1
 80004c8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004cc:	fb08 f10c 	mul.w	r1, r8, ip
 80004d0:	4299      	cmp	r1, r3
 80004d2:	d907      	bls.n	80004e4 <__udivmoddi4+0x124>
 80004d4:	18eb      	adds	r3, r5, r3
 80004d6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80004da:	d202      	bcs.n	80004e2 <__udivmoddi4+0x122>
 80004dc:	4299      	cmp	r1, r3
 80004de:	f200 80cd 	bhi.w	800067c <__udivmoddi4+0x2bc>
 80004e2:	4684      	mov	ip, r0
 80004e4:	1a59      	subs	r1, r3, r1
 80004e6:	b2a3      	uxth	r3, r4
 80004e8:	fbb1 f0fe 	udiv	r0, r1, lr
 80004ec:	fb0e 1410 	mls	r4, lr, r0, r1
 80004f0:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 80004f4:	fb08 f800 	mul.w	r8, r8, r0
 80004f8:	45a0      	cmp	r8, r4
 80004fa:	d907      	bls.n	800050c <__udivmoddi4+0x14c>
 80004fc:	192c      	adds	r4, r5, r4
 80004fe:	f100 33ff 	add.w	r3, r0, #4294967295
 8000502:	d202      	bcs.n	800050a <__udivmoddi4+0x14a>
 8000504:	45a0      	cmp	r8, r4
 8000506:	f200 80b6 	bhi.w	8000676 <__udivmoddi4+0x2b6>
 800050a:	4618      	mov	r0, r3
 800050c:	eba4 0408 	sub.w	r4, r4, r8
 8000510:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000514:	e79f      	b.n	8000456 <__udivmoddi4+0x96>
 8000516:	f1c7 0c20 	rsb	ip, r7, #32
 800051a:	40bb      	lsls	r3, r7
 800051c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000520:	ea4e 0e03 	orr.w	lr, lr, r3
 8000524:	fa01 f407 	lsl.w	r4, r1, r7
 8000528:	fa20 f50c 	lsr.w	r5, r0, ip
 800052c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000530:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000534:	4325      	orrs	r5, r4
 8000536:	fbb3 f9f8 	udiv	r9, r3, r8
 800053a:	0c2c      	lsrs	r4, r5, #16
 800053c:	fb08 3319 	mls	r3, r8, r9, r3
 8000540:	fa1f fa8e 	uxth.w	sl, lr
 8000544:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000548:	fb09 f40a 	mul.w	r4, r9, sl
 800054c:	429c      	cmp	r4, r3
 800054e:	fa02 f207 	lsl.w	r2, r2, r7
 8000552:	fa00 f107 	lsl.w	r1, r0, r7
 8000556:	d90b      	bls.n	8000570 <__udivmoddi4+0x1b0>
 8000558:	eb1e 0303 	adds.w	r3, lr, r3
 800055c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000560:	f080 8087 	bcs.w	8000672 <__udivmoddi4+0x2b2>
 8000564:	429c      	cmp	r4, r3
 8000566:	f240 8084 	bls.w	8000672 <__udivmoddi4+0x2b2>
 800056a:	f1a9 0902 	sub.w	r9, r9, #2
 800056e:	4473      	add	r3, lr
 8000570:	1b1b      	subs	r3, r3, r4
 8000572:	b2ad      	uxth	r5, r5
 8000574:	fbb3 f0f8 	udiv	r0, r3, r8
 8000578:	fb08 3310 	mls	r3, r8, r0, r3
 800057c:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000580:	fb00 fa0a 	mul.w	sl, r0, sl
 8000584:	45a2      	cmp	sl, r4
 8000586:	d908      	bls.n	800059a <__udivmoddi4+0x1da>
 8000588:	eb1e 0404 	adds.w	r4, lr, r4
 800058c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000590:	d26b      	bcs.n	800066a <__udivmoddi4+0x2aa>
 8000592:	45a2      	cmp	sl, r4
 8000594:	d969      	bls.n	800066a <__udivmoddi4+0x2aa>
 8000596:	3802      	subs	r0, #2
 8000598:	4474      	add	r4, lr
 800059a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800059e:	fba0 8902 	umull	r8, r9, r0, r2
 80005a2:	eba4 040a 	sub.w	r4, r4, sl
 80005a6:	454c      	cmp	r4, r9
 80005a8:	46c2      	mov	sl, r8
 80005aa:	464b      	mov	r3, r9
 80005ac:	d354      	bcc.n	8000658 <__udivmoddi4+0x298>
 80005ae:	d051      	beq.n	8000654 <__udivmoddi4+0x294>
 80005b0:	2e00      	cmp	r6, #0
 80005b2:	d069      	beq.n	8000688 <__udivmoddi4+0x2c8>
 80005b4:	ebb1 050a 	subs.w	r5, r1, sl
 80005b8:	eb64 0403 	sbc.w	r4, r4, r3
 80005bc:	fa04 fc0c 	lsl.w	ip, r4, ip
 80005c0:	40fd      	lsrs	r5, r7
 80005c2:	40fc      	lsrs	r4, r7
 80005c4:	ea4c 0505 	orr.w	r5, ip, r5
 80005c8:	e9c6 5400 	strd	r5, r4, [r6]
 80005cc:	2700      	movs	r7, #0
 80005ce:	e747      	b.n	8000460 <__udivmoddi4+0xa0>
 80005d0:	f1c2 0320 	rsb	r3, r2, #32
 80005d4:	fa20 f703 	lsr.w	r7, r0, r3
 80005d8:	4095      	lsls	r5, r2
 80005da:	fa01 f002 	lsl.w	r0, r1, r2
 80005de:	fa21 f303 	lsr.w	r3, r1, r3
 80005e2:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80005e6:	4338      	orrs	r0, r7
 80005e8:	0c01      	lsrs	r1, r0, #16
 80005ea:	fbb3 f7fe 	udiv	r7, r3, lr
 80005ee:	fa1f f885 	uxth.w	r8, r5
 80005f2:	fb0e 3317 	mls	r3, lr, r7, r3
 80005f6:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80005fa:	fb07 f308 	mul.w	r3, r7, r8
 80005fe:	428b      	cmp	r3, r1
 8000600:	fa04 f402 	lsl.w	r4, r4, r2
 8000604:	d907      	bls.n	8000616 <__udivmoddi4+0x256>
 8000606:	1869      	adds	r1, r5, r1
 8000608:	f107 3cff 	add.w	ip, r7, #4294967295
 800060c:	d22f      	bcs.n	800066e <__udivmoddi4+0x2ae>
 800060e:	428b      	cmp	r3, r1
 8000610:	d92d      	bls.n	800066e <__udivmoddi4+0x2ae>
 8000612:	3f02      	subs	r7, #2
 8000614:	4429      	add	r1, r5
 8000616:	1acb      	subs	r3, r1, r3
 8000618:	b281      	uxth	r1, r0
 800061a:	fbb3 f0fe 	udiv	r0, r3, lr
 800061e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000622:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000626:	fb00 f308 	mul.w	r3, r0, r8
 800062a:	428b      	cmp	r3, r1
 800062c:	d907      	bls.n	800063e <__udivmoddi4+0x27e>
 800062e:	1869      	adds	r1, r5, r1
 8000630:	f100 3cff 	add.w	ip, r0, #4294967295
 8000634:	d217      	bcs.n	8000666 <__udivmoddi4+0x2a6>
 8000636:	428b      	cmp	r3, r1
 8000638:	d915      	bls.n	8000666 <__udivmoddi4+0x2a6>
 800063a:	3802      	subs	r0, #2
 800063c:	4429      	add	r1, r5
 800063e:	1ac9      	subs	r1, r1, r3
 8000640:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000644:	e73b      	b.n	80004be <__udivmoddi4+0xfe>
 8000646:	4637      	mov	r7, r6
 8000648:	4630      	mov	r0, r6
 800064a:	e709      	b.n	8000460 <__udivmoddi4+0xa0>
 800064c:	4607      	mov	r7, r0
 800064e:	e6e7      	b.n	8000420 <__udivmoddi4+0x60>
 8000650:	4618      	mov	r0, r3
 8000652:	e6fb      	b.n	800044c <__udivmoddi4+0x8c>
 8000654:	4541      	cmp	r1, r8
 8000656:	d2ab      	bcs.n	80005b0 <__udivmoddi4+0x1f0>
 8000658:	ebb8 0a02 	subs.w	sl, r8, r2
 800065c:	eb69 020e 	sbc.w	r2, r9, lr
 8000660:	3801      	subs	r0, #1
 8000662:	4613      	mov	r3, r2
 8000664:	e7a4      	b.n	80005b0 <__udivmoddi4+0x1f0>
 8000666:	4660      	mov	r0, ip
 8000668:	e7e9      	b.n	800063e <__udivmoddi4+0x27e>
 800066a:	4618      	mov	r0, r3
 800066c:	e795      	b.n	800059a <__udivmoddi4+0x1da>
 800066e:	4667      	mov	r7, ip
 8000670:	e7d1      	b.n	8000616 <__udivmoddi4+0x256>
 8000672:	4681      	mov	r9, r0
 8000674:	e77c      	b.n	8000570 <__udivmoddi4+0x1b0>
 8000676:	3802      	subs	r0, #2
 8000678:	442c      	add	r4, r5
 800067a:	e747      	b.n	800050c <__udivmoddi4+0x14c>
 800067c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000680:	442b      	add	r3, r5
 8000682:	e72f      	b.n	80004e4 <__udivmoddi4+0x124>
 8000684:	4638      	mov	r0, r7
 8000686:	e708      	b.n	800049a <__udivmoddi4+0xda>
 8000688:	4637      	mov	r7, r6
 800068a:	e6e9      	b.n	8000460 <__udivmoddi4+0xa0>

0800068c <__aeabi_idiv0>:
 800068c:	4770      	bx	lr
 800068e:	bf00      	nop

08000690 <FDCAN_Config>:
 8000690:	b580      	push	{r7, lr}
 8000692:	b08c      	sub	sp, #48	; 0x30
 8000694:	af02      	add	r7, sp, #8
 8000696:	6078      	str	r0, [r7, #4]
 8000698:	2300      	movs	r3, #0
 800069a:	60bb      	str	r3, [r7, #8]
 800069c:	2300      	movs	r3, #0
 800069e:	60fb      	str	r3, [r7, #12]
 80006a0:	2302      	movs	r3, #2
 80006a2:	613b      	str	r3, [r7, #16]
 80006a4:	2301      	movs	r3, #1
 80006a6:	617b      	str	r3, [r7, #20]
 80006a8:	f240 3321 	movw	r3, #801	; 0x321
 80006ac:	61bb      	str	r3, [r7, #24]
 80006ae:	f240 73ff 	movw	r3, #2047	; 0x7ff
 80006b2:	61fb      	str	r3, [r7, #28]
 80006b4:	f107 0308 	add.w	r3, r7, #8
 80006b8:	4619      	mov	r1, r3
 80006ba:	6878      	ldr	r0, [r7, #4]
 80006bc:	f006 ff7e 	bl	80075bc <HAL_FDCAN_ConfigFilter>
 80006c0:	2300      	movs	r3, #0
 80006c2:	9300      	str	r3, [sp, #0]
 80006c4:	2300      	movs	r3, #0
 80006c6:	2202      	movs	r2, #2
 80006c8:	2102      	movs	r1, #2
 80006ca:	6878      	ldr	r0, [r7, #4]
 80006cc:	f006 ffec 	bl	80076a8 <HAL_FDCAN_ConfigGlobalFilter>
 80006d0:	4603      	mov	r3, r0
 80006d2:	2b00      	cmp	r3, #0
 80006d4:	d001      	beq.n	80006da <FDCAN_Config+0x4a>
 80006d6:	f003 fe85 	bl	80043e4 <Error_Handler>
 80006da:	6878      	ldr	r0, [r7, #4]
 80006dc:	f007 f834 	bl	8007748 <HAL_FDCAN_Start>
 80006e0:	4603      	mov	r3, r0
 80006e2:	2b00      	cmp	r3, #0
 80006e4:	d001      	beq.n	80006ea <FDCAN_Config+0x5a>
 80006e6:	f003 fe7d 	bl	80043e4 <Error_Handler>
 80006ea:	2200      	movs	r2, #0
 80006ec:	2101      	movs	r1, #1
 80006ee:	6878      	ldr	r0, [r7, #4]
 80006f0:	f007 f9b4 	bl	8007a5c <HAL_FDCAN_ActivateNotification>
 80006f4:	4603      	mov	r3, r0
 80006f6:	2b00      	cmp	r3, #0
 80006f8:	d001      	beq.n	80006fe <FDCAN_Config+0x6e>
 80006fa:	f003 fe73 	bl	80043e4 <Error_Handler>
 80006fe:	6878      	ldr	r0, [r7, #4]
 8000700:	f006 ffff 	bl	8007702 <HAL_FDCAN_EnableTxDelayCompensation>
 8000704:	bf00      	nop
 8000706:	3728      	adds	r7, #40	; 0x28
 8000708:	46bd      	mov	sp, r7
 800070a:	bd80      	pop	{r7, pc}

0800070c <numPlaces>:
 800070c:	b480      	push	{r7}
 800070e:	b083      	sub	sp, #12
 8000710:	af00      	add	r7, sp, #0
 8000712:	6078      	str	r0, [r7, #4]
 8000714:	687b      	ldr	r3, [r7, #4]
 8000716:	2b09      	cmp	r3, #9
 8000718:	dc01      	bgt.n	800071e <numPlaces+0x12>
 800071a:	2301      	movs	r3, #1
 800071c:	e030      	b.n	8000780 <numPlaces+0x74>
 800071e:	687b      	ldr	r3, [r7, #4]
 8000720:	2b63      	cmp	r3, #99	; 0x63
 8000722:	dc01      	bgt.n	8000728 <numPlaces+0x1c>
 8000724:	2302      	movs	r3, #2
 8000726:	e02b      	b.n	8000780 <numPlaces+0x74>
 8000728:	687b      	ldr	r3, [r7, #4]
 800072a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800072e:	da01      	bge.n	8000734 <numPlaces+0x28>
 8000730:	2303      	movs	r3, #3
 8000732:	e025      	b.n	8000780 <numPlaces+0x74>
 8000734:	687b      	ldr	r3, [r7, #4]
 8000736:	f242 720f 	movw	r2, #9999	; 0x270f
 800073a:	4293      	cmp	r3, r2
 800073c:	dc01      	bgt.n	8000742 <numPlaces+0x36>
 800073e:	2304      	movs	r3, #4
 8000740:	e01e      	b.n	8000780 <numPlaces+0x74>
 8000742:	687b      	ldr	r3, [r7, #4]
 8000744:	4a11      	ldr	r2, [pc, #68]	; (800078c <numPlaces+0x80>)
 8000746:	4293      	cmp	r3, r2
 8000748:	dc01      	bgt.n	800074e <numPlaces+0x42>
 800074a:	2305      	movs	r3, #5
 800074c:	e018      	b.n	8000780 <numPlaces+0x74>
 800074e:	687b      	ldr	r3, [r7, #4]
 8000750:	4a0f      	ldr	r2, [pc, #60]	; (8000790 <numPlaces+0x84>)
 8000752:	4293      	cmp	r3, r2
 8000754:	dc01      	bgt.n	800075a <numPlaces+0x4e>
 8000756:	2306      	movs	r3, #6
 8000758:	e012      	b.n	8000780 <numPlaces+0x74>
 800075a:	687b      	ldr	r3, [r7, #4]
 800075c:	4a0d      	ldr	r2, [pc, #52]	; (8000794 <numPlaces+0x88>)
 800075e:	4293      	cmp	r3, r2
 8000760:	dc01      	bgt.n	8000766 <numPlaces+0x5a>
 8000762:	2307      	movs	r3, #7
 8000764:	e00c      	b.n	8000780 <numPlaces+0x74>
 8000766:	687b      	ldr	r3, [r7, #4]
 8000768:	4a0b      	ldr	r2, [pc, #44]	; (8000798 <numPlaces+0x8c>)
 800076a:	4293      	cmp	r3, r2
 800076c:	dc01      	bgt.n	8000772 <numPlaces+0x66>
 800076e:	2308      	movs	r3, #8
 8000770:	e006      	b.n	8000780 <numPlaces+0x74>
 8000772:	687b      	ldr	r3, [r7, #4]
 8000774:	4a09      	ldr	r2, [pc, #36]	; (800079c <numPlaces+0x90>)
 8000776:	4293      	cmp	r3, r2
 8000778:	dc01      	bgt.n	800077e <numPlaces+0x72>
 800077a:	2309      	movs	r3, #9
 800077c:	e000      	b.n	8000780 <numPlaces+0x74>
 800077e:	230a      	movs	r3, #10
 8000780:	4618      	mov	r0, r3
 8000782:	370c      	adds	r7, #12
 8000784:	46bd      	mov	sp, r7
 8000786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800078a:	4770      	bx	lr
 800078c:	0001869f 	.word	0x0001869f
 8000790:	000f423f 	.word	0x000f423f
 8000794:	0098967f 	.word	0x0098967f
 8000798:	05f5e0ff 	.word	0x05f5e0ff
 800079c:	3b9ac9ff 	.word	0x3b9ac9ff

080007a0 <CANFD_Data_Process>:
 80007a0:	b590      	push	{r4, r7, lr}
 80007a2:	ed2d 8b02 	vpush	{d8}
 80007a6:	b0ad      	sub	sp, #180	; 0xb4
 80007a8:	af00      	add	r7, sp, #0
 80007aa:	6078      	str	r0, [r7, #4]
 80007ac:	6039      	str	r1, [r7, #0]
 80007ae:	2300      	movs	r3, #0
 80007b0:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80007b4:	2300      	movs	r3, #0
 80007b6:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80007ba:	e014      	b.n	80007e6 <CANFD_Data_Process+0x46>
 80007bc:	4ba0      	ldr	r3, [pc, #640]	; (8000a40 <CANFD_Data_Process+0x2a0>)
 80007be:	681a      	ldr	r2, [r3, #0]
 80007c0:	49a0      	ldr	r1, [pc, #640]	; (8000a44 <CANFD_Data_Process+0x2a4>)
 80007c2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80007c6:	208c      	movs	r0, #140	; 0x8c
 80007c8:	fb00 f303 	mul.w	r3, r0, r3
 80007cc:	440b      	add	r3, r1
 80007ce:	681b      	ldr	r3, [r3, #0]
 80007d0:	429a      	cmp	r2, r3
 80007d2:	d103      	bne.n	80007dc <CANFD_Data_Process+0x3c>
 80007d4:	2301      	movs	r3, #1
 80007d6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80007da:	e008      	b.n	80007ee <CANFD_Data_Process+0x4e>
 80007dc:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80007e0:	3301      	adds	r3, #1
 80007e2:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80007e6:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80007ea:	2b00      	cmp	r3, #0
 80007ec:	d0e6      	beq.n	80007bc <CANFD_Data_Process+0x1c>
 80007ee:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80007f2:	2b00      	cmp	r3, #0
 80007f4:	d11f      	bne.n	8000836 <CANFD_Data_Process+0x96>
 80007f6:	2300      	movs	r3, #0
 80007f8:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 80007fc:	e015      	b.n	800082a <CANFD_Data_Process+0x8a>
 80007fe:	683b      	ldr	r3, [r7, #0]
 8000800:	687a      	ldr	r2, [r7, #4]
 8000802:	18d0      	adds	r0, r2, r3
 8000804:	4a8e      	ldr	r2, [pc, #568]	; (8000a40 <CANFD_Data_Process+0x2a0>)
 8000806:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800080a:	4413      	add	r3, r2
 800080c:	3310      	adds	r3, #16
 800080e:	781b      	ldrb	r3, [r3, #0]
 8000810:	461a      	mov	r2, r3
 8000812:	498d      	ldr	r1, [pc, #564]	; (8000a48 <CANFD_Data_Process+0x2a8>)
 8000814:	f01a f988 	bl	801ab28 <siprintf>
 8000818:	4602      	mov	r2, r0
 800081a:	683b      	ldr	r3, [r7, #0]
 800081c:	4413      	add	r3, r2
 800081e:	603b      	str	r3, [r7, #0]
 8000820:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8000824:	3301      	adds	r3, #1
 8000826:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800082a:	4b85      	ldr	r3, [pc, #532]	; (8000a40 <CANFD_Data_Process+0x2a0>)
 800082c:	689a      	ldr	r2, [r3, #8]
 800082e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8000832:	429a      	cmp	r2, r3
 8000834:	d8e3      	bhi.n	80007fe <CANFD_Data_Process+0x5e>
 8000836:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800083a:	2b01      	cmp	r3, #1
 800083c:	f040 80f8 	bne.w	8000a30 <CANFD_Data_Process+0x290>
 8000840:	2320      	movs	r3, #32
 8000842:	81bb      	strh	r3, [r7, #12]
 8000844:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8000848:	228c      	movs	r2, #140	; 0x8c
 800084a:	fb02 f303 	mul.w	r3, r2, r3
 800084e:	3308      	adds	r3, #8
 8000850:	4a7c      	ldr	r2, [pc, #496]	; (8000a44 <CANFD_Data_Process+0x2a4>)
 8000852:	4413      	add	r3, r2
 8000854:	1d1a      	adds	r2, r3, #4
 8000856:	f107 0310 	add.w	r3, r7, #16
 800085a:	4611      	mov	r1, r2
 800085c:	4618      	mov	r0, r3
 800085e:	f01a f983 	bl	801ab68 <strcpy>
 8000862:	2300      	movs	r3, #0
 8000864:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8000868:	f107 020c 	add.w	r2, r7, #12
 800086c:	f107 0310 	add.w	r3, r7, #16
 8000870:	4611      	mov	r1, r2
 8000872:	4618      	mov	r0, r3
 8000874:	f01a f980 	bl	801ab78 <strtok>
 8000878:	f8c7 0098 	str.w	r0, [r7, #152]	; 0x98
 800087c:	4a71      	ldr	r2, [pc, #452]	; (8000a44 <CANFD_Data_Process+0x2a4>)
 800087e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8000882:	218c      	movs	r1, #140	; 0x8c
 8000884:	fb01 f303 	mul.w	r3, r1, r3
 8000888:	4413      	add	r3, r2
 800088a:	3308      	adds	r3, #8
 800088c:	681b      	ldr	r3, [r3, #0]
 800088e:	4618      	mov	r0, r3
 8000890:	f7ff ff3c 	bl	800070c <numPlaces>
 8000894:	f8c7 0090 	str.w	r0, [r7, #144]	; 0x90
 8000898:	e0c3      	b.n	8000a22 <CANFD_Data_Process+0x282>
 800089a:	4a6a      	ldr	r2, [pc, #424]	; (8000a44 <CANFD_Data_Process+0x2a4>)
 800089c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80008a0:	218c      	movs	r1, #140	; 0x8c
 80008a2:	fb01 f303 	mul.w	r3, r1, r3
 80008a6:	4413      	add	r3, r2
 80008a8:	3308      	adds	r3, #8
 80008aa:	681b      	ldr	r3, [r3, #0]
 80008ac:	ee07 3a90 	vmov	s15, r3
 80008b0:	eeb8 8b67 	vcvt.f64.u32	d8, s15
 80008b4:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 80008b8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80008bc:	1ad3      	subs	r3, r2, r3
 80008be:	3b01      	subs	r3, #1
 80008c0:	ee07 3a90 	vmov	s15, r3
 80008c4:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 80008c8:	eeb0 1b47 	vmov.f64	d1, d7
 80008cc:	eeb2 0b04 	vmov.f64	d0, #36	; 0x41200000  10.0
 80008d0:	f019 f982 	bl	8019bd8 <pow>
 80008d4:	eeb0 6b40 	vmov.f64	d6, d0
 80008d8:	ee88 7b06 	vdiv.f64	d7, d8, d6
 80008dc:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 80008e0:	ee17 2a90 	vmov	r2, s15
 80008e4:	4b59      	ldr	r3, [pc, #356]	; (8000a4c <CANFD_Data_Process+0x2ac>)
 80008e6:	fb83 1302 	smull	r1, r3, r3, r2
 80008ea:	1099      	asrs	r1, r3, #2
 80008ec:	17d3      	asrs	r3, r2, #31
 80008ee:	1ac9      	subs	r1, r1, r3
 80008f0:	460b      	mov	r3, r1
 80008f2:	009b      	lsls	r3, r3, #2
 80008f4:	440b      	add	r3, r1
 80008f6:	005b      	lsls	r3, r3, #1
 80008f8:	1ad3      	subs	r3, r2, r3
 80008fa:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80008fe:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8000902:	3b01      	subs	r3, #1
 8000904:	2b07      	cmp	r3, #7
 8000906:	d879      	bhi.n	80009fc <CANFD_Data_Process+0x25c>
 8000908:	a201      	add	r2, pc, #4	; (adr r2, 8000910 <CANFD_Data_Process+0x170>)
 800090a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800090e:	bf00      	nop
 8000910:	08000931 	.word	0x08000931
 8000914:	08000961 	.word	0x08000961
 8000918:	080009fd 	.word	0x080009fd
 800091c:	08000993 	.word	0x08000993
 8000920:	080009fd 	.word	0x080009fd
 8000924:	080009fd 	.word	0x080009fd
 8000928:	080009fd 	.word	0x080009fd
 800092c:	080009c5 	.word	0x080009c5
 8000930:	683b      	ldr	r3, [r7, #0]
 8000932:	687a      	ldr	r2, [r7, #4]
 8000934:	18d0      	adds	r0, r2, r3
 8000936:	4a42      	ldr	r2, [pc, #264]	; (8000a40 <CANFD_Data_Process+0x2a0>)
 8000938:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800093c:	4413      	add	r3, r2
 800093e:	3310      	adds	r3, #16
 8000940:	781b      	ldrb	r3, [r3, #0]
 8000942:	461a      	mov	r2, r3
 8000944:	f8d7 1098 	ldr.w	r1, [r7, #152]	; 0x98
 8000948:	f01a f8ee 	bl	801ab28 <siprintf>
 800094c:	4602      	mov	r2, r0
 800094e:	683b      	ldr	r3, [r7, #0]
 8000950:	4413      	add	r3, r2
 8000952:	603b      	str	r3, [r7, #0]
 8000954:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8000958:	3301      	adds	r3, #1
 800095a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800095e:	e04d      	b.n	80009fc <CANFD_Data_Process+0x25c>
 8000960:	683b      	ldr	r3, [r7, #0]
 8000962:	687a      	ldr	r2, [r7, #4]
 8000964:	18d0      	adds	r0, r2, r3
 8000966:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800096a:	085b      	lsrs	r3, r3, #1
 800096c:	4a34      	ldr	r2, [pc, #208]	; (8000a40 <CANFD_Data_Process+0x2a0>)
 800096e:	3308      	adds	r3, #8
 8000970:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000974:	461a      	mov	r2, r3
 8000976:	f8d7 1098 	ldr.w	r1, [r7, #152]	; 0x98
 800097a:	f01a f8d5 	bl	801ab28 <siprintf>
 800097e:	4602      	mov	r2, r0
 8000980:	683b      	ldr	r3, [r7, #0]
 8000982:	4413      	add	r3, r2
 8000984:	603b      	str	r3, [r7, #0]
 8000986:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800098a:	3302      	adds	r3, #2
 800098c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8000990:	e034      	b.n	80009fc <CANFD_Data_Process+0x25c>
 8000992:	683b      	ldr	r3, [r7, #0]
 8000994:	687a      	ldr	r2, [r7, #4]
 8000996:	18d0      	adds	r0, r2, r3
 8000998:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800099c:	089b      	lsrs	r3, r3, #2
 800099e:	4a28      	ldr	r2, [pc, #160]	; (8000a40 <CANFD_Data_Process+0x2a0>)
 80009a0:	3304      	adds	r3, #4
 80009a2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80009a6:	461a      	mov	r2, r3
 80009a8:	f8d7 1098 	ldr.w	r1, [r7, #152]	; 0x98
 80009ac:	f01a f8bc 	bl	801ab28 <siprintf>
 80009b0:	4602      	mov	r2, r0
 80009b2:	683b      	ldr	r3, [r7, #0]
 80009b4:	4413      	add	r3, r2
 80009b6:	603b      	str	r3, [r7, #0]
 80009b8:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80009bc:	3304      	adds	r3, #4
 80009be:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80009c2:	e01b      	b.n	80009fc <CANFD_Data_Process+0x25c>
 80009c4:	683b      	ldr	r3, [r7, #0]
 80009c6:	687a      	ldr	r2, [r7, #4]
 80009c8:	18d0      	adds	r0, r2, r3
 80009ca:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80009ce:	08db      	lsrs	r3, r3, #3
 80009d0:	4a1b      	ldr	r2, [pc, #108]	; (8000a40 <CANFD_Data_Process+0x2a0>)
 80009d2:	3302      	adds	r3, #2
 80009d4:	00db      	lsls	r3, r3, #3
 80009d6:	4413      	add	r3, r2
 80009d8:	e9d3 3400 	ldrd	r3, r4, [r3]
 80009dc:	461a      	mov	r2, r3
 80009de:	4623      	mov	r3, r4
 80009e0:	f8d7 1098 	ldr.w	r1, [r7, #152]	; 0x98
 80009e4:	f01a f8a0 	bl	801ab28 <siprintf>
 80009e8:	4602      	mov	r2, r0
 80009ea:	683b      	ldr	r3, [r7, #0]
 80009ec:	4413      	add	r3, r2
 80009ee:	603b      	str	r3, [r7, #0]
 80009f0:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80009f4:	3308      	adds	r3, #8
 80009f6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80009fa:	bf00      	nop
 80009fc:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8000a00:	3301      	adds	r3, #1
 8000a02:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8000a06:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8000a0a:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 8000a0e:	429a      	cmp	r2, r3
 8000a10:	d00d      	beq.n	8000a2e <CANFD_Data_Process+0x28e>
 8000a12:	f107 030c 	add.w	r3, r7, #12
 8000a16:	4619      	mov	r1, r3
 8000a18:	2000      	movs	r0, #0
 8000a1a:	f01a f8ad 	bl	801ab78 <strtok>
 8000a1e:	f8c7 0098 	str.w	r0, [r7, #152]	; 0x98
 8000a22:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8000a26:	2b00      	cmp	r3, #0
 8000a28:	f47f af37 	bne.w	800089a <CANFD_Data_Process+0xfa>
 8000a2c:	e000      	b.n	8000a30 <CANFD_Data_Process+0x290>
 8000a2e:	bf00      	nop
 8000a30:	683b      	ldr	r3, [r7, #0]
 8000a32:	4618      	mov	r0, r3
 8000a34:	37b4      	adds	r7, #180	; 0xb4
 8000a36:	46bd      	mov	sp, r7
 8000a38:	ecbd 8b02 	vpop	{d8}
 8000a3c:	bd90      	pop	{r4, r7, pc}
 8000a3e:	bf00      	nop
 8000a40:	24044068 	.word	0x24044068
 8000a44:	24040744 	.word	0x24040744
 8000a48:	0801bd00 	.word	0x0801bd00
 8000a4c:	66666667 	.word	0x66666667

08000a50 <CAN_Data_Process>:
 8000a50:	b590      	push	{r4, r7, lr}
 8000a52:	ed2d 8b02 	vpush	{d8}
 8000a56:	b0ad      	sub	sp, #180	; 0xb4
 8000a58:	af00      	add	r7, sp, #0
 8000a5a:	6078      	str	r0, [r7, #4]
 8000a5c:	6039      	str	r1, [r7, #0]
 8000a5e:	2300      	movs	r3, #0
 8000a60:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8000a64:	2300      	movs	r3, #0
 8000a66:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8000a6a:	e014      	b.n	8000a96 <CAN_Data_Process+0x46>
 8000a6c:	4ba0      	ldr	r3, [pc, #640]	; (8000cf0 <CAN_Data_Process+0x2a0>)
 8000a6e:	681a      	ldr	r2, [r3, #0]
 8000a70:	49a0      	ldr	r1, [pc, #640]	; (8000cf4 <CAN_Data_Process+0x2a4>)
 8000a72:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8000a76:	208c      	movs	r0, #140	; 0x8c
 8000a78:	fb00 f303 	mul.w	r3, r0, r3
 8000a7c:	440b      	add	r3, r1
 8000a7e:	681b      	ldr	r3, [r3, #0]
 8000a80:	429a      	cmp	r2, r3
 8000a82:	d103      	bne.n	8000a8c <CAN_Data_Process+0x3c>
 8000a84:	2301      	movs	r3, #1
 8000a86:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8000a8a:	e008      	b.n	8000a9e <CAN_Data_Process+0x4e>
 8000a8c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8000a90:	3301      	adds	r3, #1
 8000a92:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8000a96:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8000a9a:	2b00      	cmp	r3, #0
 8000a9c:	d0e6      	beq.n	8000a6c <CAN_Data_Process+0x1c>
 8000a9e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8000aa2:	2b00      	cmp	r3, #0
 8000aa4:	d120      	bne.n	8000ae8 <CAN_Data_Process+0x98>
 8000aa6:	2300      	movs	r3, #0
 8000aa8:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8000aac:	e015      	b.n	8000ada <CAN_Data_Process+0x8a>
 8000aae:	683b      	ldr	r3, [r7, #0]
 8000ab0:	687a      	ldr	r2, [r7, #4]
 8000ab2:	18d0      	adds	r0, r2, r3
 8000ab4:	4a8e      	ldr	r2, [pc, #568]	; (8000cf0 <CAN_Data_Process+0x2a0>)
 8000ab6:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8000aba:	4413      	add	r3, r2
 8000abc:	3310      	adds	r3, #16
 8000abe:	781b      	ldrb	r3, [r3, #0]
 8000ac0:	461a      	mov	r2, r3
 8000ac2:	498d      	ldr	r1, [pc, #564]	; (8000cf8 <CAN_Data_Process+0x2a8>)
 8000ac4:	f01a f830 	bl	801ab28 <siprintf>
 8000ac8:	4602      	mov	r2, r0
 8000aca:	683b      	ldr	r3, [r7, #0]
 8000acc:	4413      	add	r3, r2
 8000ace:	603b      	str	r3, [r7, #0]
 8000ad0:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8000ad4:	3301      	adds	r3, #1
 8000ad6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8000ada:	4b85      	ldr	r3, [pc, #532]	; (8000cf0 <CAN_Data_Process+0x2a0>)
 8000adc:	795b      	ldrb	r3, [r3, #5]
 8000ade:	461a      	mov	r2, r3
 8000ae0:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8000ae4:	4293      	cmp	r3, r2
 8000ae6:	dbe2      	blt.n	8000aae <CAN_Data_Process+0x5e>
 8000ae8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8000aec:	2b01      	cmp	r3, #1
 8000aee:	f040 80f7 	bne.w	8000ce0 <CAN_Data_Process+0x290>
 8000af2:	2320      	movs	r3, #32
 8000af4:	81bb      	strh	r3, [r7, #12]
 8000af6:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8000afa:	228c      	movs	r2, #140	; 0x8c
 8000afc:	fb02 f303 	mul.w	r3, r2, r3
 8000b00:	3308      	adds	r3, #8
 8000b02:	4a7c      	ldr	r2, [pc, #496]	; (8000cf4 <CAN_Data_Process+0x2a4>)
 8000b04:	4413      	add	r3, r2
 8000b06:	1d1a      	adds	r2, r3, #4
 8000b08:	f107 0310 	add.w	r3, r7, #16
 8000b0c:	4611      	mov	r1, r2
 8000b0e:	4618      	mov	r0, r3
 8000b10:	f01a f82a 	bl	801ab68 <strcpy>
 8000b14:	2300      	movs	r3, #0
 8000b16:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8000b1a:	f107 020c 	add.w	r2, r7, #12
 8000b1e:	f107 0310 	add.w	r3, r7, #16
 8000b22:	4611      	mov	r1, r2
 8000b24:	4618      	mov	r0, r3
 8000b26:	f01a f827 	bl	801ab78 <strtok>
 8000b2a:	f8c7 0098 	str.w	r0, [r7, #152]	; 0x98
 8000b2e:	4a71      	ldr	r2, [pc, #452]	; (8000cf4 <CAN_Data_Process+0x2a4>)
 8000b30:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8000b34:	218c      	movs	r1, #140	; 0x8c
 8000b36:	fb01 f303 	mul.w	r3, r1, r3
 8000b3a:	4413      	add	r3, r2
 8000b3c:	3308      	adds	r3, #8
 8000b3e:	681b      	ldr	r3, [r3, #0]
 8000b40:	4618      	mov	r0, r3
 8000b42:	f7ff fde3 	bl	800070c <numPlaces>
 8000b46:	f8c7 0090 	str.w	r0, [r7, #144]	; 0x90
 8000b4a:	e0c2      	b.n	8000cd2 <CAN_Data_Process+0x282>
 8000b4c:	4a69      	ldr	r2, [pc, #420]	; (8000cf4 <CAN_Data_Process+0x2a4>)
 8000b4e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8000b52:	218c      	movs	r1, #140	; 0x8c
 8000b54:	fb01 f303 	mul.w	r3, r1, r3
 8000b58:	4413      	add	r3, r2
 8000b5a:	3308      	adds	r3, #8
 8000b5c:	681b      	ldr	r3, [r3, #0]
 8000b5e:	ee07 3a90 	vmov	s15, r3
 8000b62:	eeb8 8b67 	vcvt.f64.u32	d8, s15
 8000b66:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 8000b6a:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8000b6e:	1ad3      	subs	r3, r2, r3
 8000b70:	3b01      	subs	r3, #1
 8000b72:	ee07 3a90 	vmov	s15, r3
 8000b76:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8000b7a:	eeb0 1b47 	vmov.f64	d1, d7
 8000b7e:	eeb2 0b04 	vmov.f64	d0, #36	; 0x41200000  10.0
 8000b82:	f019 f829 	bl	8019bd8 <pow>
 8000b86:	eeb0 6b40 	vmov.f64	d6, d0
 8000b8a:	ee88 7b06 	vdiv.f64	d7, d8, d6
 8000b8e:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 8000b92:	ee17 2a90 	vmov	r2, s15
 8000b96:	4b59      	ldr	r3, [pc, #356]	; (8000cfc <CAN_Data_Process+0x2ac>)
 8000b98:	fb83 1302 	smull	r1, r3, r3, r2
 8000b9c:	1099      	asrs	r1, r3, #2
 8000b9e:	17d3      	asrs	r3, r2, #31
 8000ba0:	1ac9      	subs	r1, r1, r3
 8000ba2:	460b      	mov	r3, r1
 8000ba4:	009b      	lsls	r3, r3, #2
 8000ba6:	440b      	add	r3, r1
 8000ba8:	005b      	lsls	r3, r3, #1
 8000baa:	1ad3      	subs	r3, r2, r3
 8000bac:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8000bb0:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8000bb4:	3b01      	subs	r3, #1
 8000bb6:	2b07      	cmp	r3, #7
 8000bb8:	d878      	bhi.n	8000cac <CAN_Data_Process+0x25c>
 8000bba:	a201      	add	r2, pc, #4	; (adr r2, 8000bc0 <CAN_Data_Process+0x170>)
 8000bbc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000bc0:	08000be1 	.word	0x08000be1
 8000bc4:	08000c11 	.word	0x08000c11
 8000bc8:	08000cad 	.word	0x08000cad
 8000bcc:	08000c43 	.word	0x08000c43
 8000bd0:	08000cad 	.word	0x08000cad
 8000bd4:	08000cad 	.word	0x08000cad
 8000bd8:	08000cad 	.word	0x08000cad
 8000bdc:	08000c75 	.word	0x08000c75
 8000be0:	683b      	ldr	r3, [r7, #0]
 8000be2:	687a      	ldr	r2, [r7, #4]
 8000be4:	18d0      	adds	r0, r2, r3
 8000be6:	4a42      	ldr	r2, [pc, #264]	; (8000cf0 <CAN_Data_Process+0x2a0>)
 8000be8:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8000bec:	4413      	add	r3, r2
 8000bee:	3310      	adds	r3, #16
 8000bf0:	781b      	ldrb	r3, [r3, #0]
 8000bf2:	461a      	mov	r2, r3
 8000bf4:	f8d7 1098 	ldr.w	r1, [r7, #152]	; 0x98
 8000bf8:	f019 ff96 	bl	801ab28 <siprintf>
 8000bfc:	4602      	mov	r2, r0
 8000bfe:	683b      	ldr	r3, [r7, #0]
 8000c00:	4413      	add	r3, r2
 8000c02:	603b      	str	r3, [r7, #0]
 8000c04:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8000c08:	3301      	adds	r3, #1
 8000c0a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8000c0e:	e04d      	b.n	8000cac <CAN_Data_Process+0x25c>
 8000c10:	683b      	ldr	r3, [r7, #0]
 8000c12:	687a      	ldr	r2, [r7, #4]
 8000c14:	18d0      	adds	r0, r2, r3
 8000c16:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8000c1a:	085b      	lsrs	r3, r3, #1
 8000c1c:	4a34      	ldr	r2, [pc, #208]	; (8000cf0 <CAN_Data_Process+0x2a0>)
 8000c1e:	3308      	adds	r3, #8
 8000c20:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000c24:	461a      	mov	r2, r3
 8000c26:	f8d7 1098 	ldr.w	r1, [r7, #152]	; 0x98
 8000c2a:	f019 ff7d 	bl	801ab28 <siprintf>
 8000c2e:	4602      	mov	r2, r0
 8000c30:	683b      	ldr	r3, [r7, #0]
 8000c32:	4413      	add	r3, r2
 8000c34:	603b      	str	r3, [r7, #0]
 8000c36:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8000c3a:	3302      	adds	r3, #2
 8000c3c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8000c40:	e034      	b.n	8000cac <CAN_Data_Process+0x25c>
 8000c42:	683b      	ldr	r3, [r7, #0]
 8000c44:	687a      	ldr	r2, [r7, #4]
 8000c46:	18d0      	adds	r0, r2, r3
 8000c48:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8000c4c:	089b      	lsrs	r3, r3, #2
 8000c4e:	4a28      	ldr	r2, [pc, #160]	; (8000cf0 <CAN_Data_Process+0x2a0>)
 8000c50:	3304      	adds	r3, #4
 8000c52:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000c56:	461a      	mov	r2, r3
 8000c58:	f8d7 1098 	ldr.w	r1, [r7, #152]	; 0x98
 8000c5c:	f019 ff64 	bl	801ab28 <siprintf>
 8000c60:	4602      	mov	r2, r0
 8000c62:	683b      	ldr	r3, [r7, #0]
 8000c64:	4413      	add	r3, r2
 8000c66:	603b      	str	r3, [r7, #0]
 8000c68:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8000c6c:	3304      	adds	r3, #4
 8000c6e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8000c72:	e01b      	b.n	8000cac <CAN_Data_Process+0x25c>
 8000c74:	683b      	ldr	r3, [r7, #0]
 8000c76:	687a      	ldr	r2, [r7, #4]
 8000c78:	18d0      	adds	r0, r2, r3
 8000c7a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8000c7e:	08db      	lsrs	r3, r3, #3
 8000c80:	4a1b      	ldr	r2, [pc, #108]	; (8000cf0 <CAN_Data_Process+0x2a0>)
 8000c82:	3302      	adds	r3, #2
 8000c84:	00db      	lsls	r3, r3, #3
 8000c86:	4413      	add	r3, r2
 8000c88:	e9d3 3400 	ldrd	r3, r4, [r3]
 8000c8c:	461a      	mov	r2, r3
 8000c8e:	4623      	mov	r3, r4
 8000c90:	f8d7 1098 	ldr.w	r1, [r7, #152]	; 0x98
 8000c94:	f019 ff48 	bl	801ab28 <siprintf>
 8000c98:	4602      	mov	r2, r0
 8000c9a:	683b      	ldr	r3, [r7, #0]
 8000c9c:	4413      	add	r3, r2
 8000c9e:	603b      	str	r3, [r7, #0]
 8000ca0:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8000ca4:	3308      	adds	r3, #8
 8000ca6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8000caa:	bf00      	nop
 8000cac:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8000cb0:	3301      	adds	r3, #1
 8000cb2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8000cb6:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8000cba:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 8000cbe:	429a      	cmp	r2, r3
 8000cc0:	d00d      	beq.n	8000cde <CAN_Data_Process+0x28e>
 8000cc2:	f107 030c 	add.w	r3, r7, #12
 8000cc6:	4619      	mov	r1, r3
 8000cc8:	2000      	movs	r0, #0
 8000cca:	f019 ff55 	bl	801ab78 <strtok>
 8000cce:	f8c7 0098 	str.w	r0, [r7, #152]	; 0x98
 8000cd2:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8000cd6:	2b00      	cmp	r3, #0
 8000cd8:	f47f af38 	bne.w	8000b4c <CAN_Data_Process+0xfc>
 8000cdc:	e000      	b.n	8000ce0 <CAN_Data_Process+0x290>
 8000cde:	bf00      	nop
 8000ce0:	683b      	ldr	r3, [r7, #0]
 8000ce2:	4618      	mov	r0, r3
 8000ce4:	37b4      	adds	r7, #180	; 0xb4
 8000ce6:	46bd      	mov	sp, r7
 8000ce8:	ecbd 8b02 	vpop	{d8}
 8000cec:	bd90      	pop	{r4, r7, pc}
 8000cee:	bf00      	nop
 8000cf0:	240440e0 	.word	0x240440e0
 8000cf4:	24040744 	.word	0x24040744
 8000cf8:	0801bd00 	.word	0x0801bd00
 8000cfc:	66666667 	.word	0x66666667

08000d00 <HAL_FDCAN_RxFifo0Callback>:
 8000d00:	b580      	push	{r7, lr}
 8000d02:	b084      	sub	sp, #16
 8000d04:	af00      	add	r7, sp, #0
 8000d06:	6078      	str	r0, [r7, #4]
 8000d08:	6039      	str	r1, [r7, #0]
 8000d0a:	4b62      	ldr	r3, [pc, #392]	; (8000e94 <HAL_FDCAN_RxFifo0Callback+0x194>)
 8000d0c:	4a62      	ldr	r2, [pc, #392]	; (8000e98 <HAL_FDCAN_RxFifo0Callback+0x198>)
 8000d0e:	2140      	movs	r1, #64	; 0x40
 8000d10:	6878      	ldr	r0, [r7, #4]
 8000d12:	f006 fd45 	bl	80077a0 <HAL_FDCAN_GetRxMessage>
 8000d16:	4603      	mov	r3, r0
 8000d18:	2b00      	cmp	r3, #0
 8000d1a:	f040 80b6 	bne.w	8000e8a <HAL_FDCAN_RxFifo0Callback+0x18a>
 8000d1e:	f004 f849 	bl	8004db4 <HAL_GetTick>
 8000d22:	60f8      	str	r0, [r7, #12]
 8000d24:	2101      	movs	r1, #1
 8000d26:	485d      	ldr	r0, [pc, #372]	; (8000e9c <HAL_FDCAN_RxFifo0Callback+0x19c>)
 8000d28:	f007 fd83 	bl	8008832 <HAL_GPIO_TogglePin>
 8000d2c:	485c      	ldr	r0, [pc, #368]	; (8000ea0 <HAL_FDCAN_RxFifo0Callback+0x1a0>)
 8000d2e:	f019 feaf 	bl	801aa90 <puts>
 8000d32:	4b59      	ldr	r3, [pc, #356]	; (8000e98 <HAL_FDCAN_RxFifo0Callback+0x198>)
 8000d34:	699b      	ldr	r3, [r3, #24]
 8000d36:	2b00      	cmp	r3, #0
 8000d38:	d122      	bne.n	8000d80 <HAL_FDCAN_RxFifo0Callback+0x80>
 8000d3a:	4b57      	ldr	r3, [pc, #348]	; (8000e98 <HAL_FDCAN_RxFifo0Callback+0x198>)
 8000d3c:	681b      	ldr	r3, [r3, #0]
 8000d3e:	4a59      	ldr	r2, [pc, #356]	; (8000ea4 <HAL_FDCAN_RxFifo0Callback+0x1a4>)
 8000d40:	6013      	str	r3, [r2, #0]
 8000d42:	4b55      	ldr	r3, [pc, #340]	; (8000e98 <HAL_FDCAN_RxFifo0Callback+0x198>)
 8000d44:	68db      	ldr	r3, [r3, #12]
 8000d46:	0c1b      	lsrs	r3, r3, #16
 8000d48:	b2da      	uxtb	r2, r3
 8000d4a:	4b56      	ldr	r3, [pc, #344]	; (8000ea4 <HAL_FDCAN_RxFifo0Callback+0x1a4>)
 8000d4c:	715a      	strb	r2, [r3, #5]
 8000d4e:	4a55      	ldr	r2, [pc, #340]	; (8000ea4 <HAL_FDCAN_RxFifo0Callback+0x1a4>)
 8000d50:	68fb      	ldr	r3, [r7, #12]
 8000d52:	6093      	str	r3, [r2, #8]
 8000d54:	4b54      	ldr	r3, [pc, #336]	; (8000ea8 <HAL_FDCAN_RxFifo0Callback+0x1a8>)
 8000d56:	2201      	movs	r2, #1
 8000d58:	601a      	str	r2, [r3, #0]
 8000d5a:	4b52      	ldr	r3, [pc, #328]	; (8000ea4 <HAL_FDCAN_RxFifo0Callback+0x1a4>)
 8000d5c:	795b      	ldrb	r3, [r3, #5]
 8000d5e:	461a      	mov	r2, r3
 8000d60:	494c      	ldr	r1, [pc, #304]	; (8000e94 <HAL_FDCAN_RxFifo0Callback+0x194>)
 8000d62:	4852      	ldr	r0, [pc, #328]	; (8000eac <HAL_FDCAN_RxFifo0Callback+0x1ac>)
 8000d64:	f019 fd64 	bl	801a830 <memcpy>
 8000d68:	4b4b      	ldr	r3, [pc, #300]	; (8000e98 <HAL_FDCAN_RxFifo0Callback+0x198>)
 8000d6a:	685b      	ldr	r3, [r3, #4]
 8000d6c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000d70:	d103      	bne.n	8000d7a <HAL_FDCAN_RxFifo0Callback+0x7a>
 8000d72:	4b4c      	ldr	r3, [pc, #304]	; (8000ea4 <HAL_FDCAN_RxFifo0Callback+0x1a4>)
 8000d74:	2201      	movs	r2, #1
 8000d76:	711a      	strb	r2, [r3, #4]
 8000d78:	e002      	b.n	8000d80 <HAL_FDCAN_RxFifo0Callback+0x80>
 8000d7a:	4b4a      	ldr	r3, [pc, #296]	; (8000ea4 <HAL_FDCAN_RxFifo0Callback+0x1a4>)
 8000d7c:	2200      	movs	r2, #0
 8000d7e:	711a      	strb	r2, [r3, #4]
 8000d80:	4b45      	ldr	r3, [pc, #276]	; (8000e98 <HAL_FDCAN_RxFifo0Callback+0x198>)
 8000d82:	699b      	ldr	r3, [r3, #24]
 8000d84:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8000d88:	d17f      	bne.n	8000e8a <HAL_FDCAN_RxFifo0Callback+0x18a>
 8000d8a:	4b43      	ldr	r3, [pc, #268]	; (8000e98 <HAL_FDCAN_RxFifo0Callback+0x198>)
 8000d8c:	681b      	ldr	r3, [r3, #0]
 8000d8e:	4a48      	ldr	r2, [pc, #288]	; (8000eb0 <HAL_FDCAN_RxFifo0Callback+0x1b0>)
 8000d90:	6013      	str	r3, [r2, #0]
 8000d92:	4b41      	ldr	r3, [pc, #260]	; (8000e98 <HAL_FDCAN_RxFifo0Callback+0x198>)
 8000d94:	68db      	ldr	r3, [r3, #12]
 8000d96:	0c1b      	lsrs	r3, r3, #16
 8000d98:	3b01      	subs	r3, #1
 8000d9a:	2b0e      	cmp	r3, #14
 8000d9c:	d85c      	bhi.n	8000e58 <HAL_FDCAN_RxFifo0Callback+0x158>
 8000d9e:	a201      	add	r2, pc, #4	; (adr r2, 8000da4 <HAL_FDCAN_RxFifo0Callback+0xa4>)
 8000da0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000da4:	08000de1 	.word	0x08000de1
 8000da8:	08000de9 	.word	0x08000de9
 8000dac:	08000df1 	.word	0x08000df1
 8000db0:	08000df9 	.word	0x08000df9
 8000db4:	08000e01 	.word	0x08000e01
 8000db8:	08000e09 	.word	0x08000e09
 8000dbc:	08000e11 	.word	0x08000e11
 8000dc0:	08000e19 	.word	0x08000e19
 8000dc4:	08000e21 	.word	0x08000e21
 8000dc8:	08000e29 	.word	0x08000e29
 8000dcc:	08000e31 	.word	0x08000e31
 8000dd0:	08000e39 	.word	0x08000e39
 8000dd4:	08000e41 	.word	0x08000e41
 8000dd8:	08000e49 	.word	0x08000e49
 8000ddc:	08000e51 	.word	0x08000e51
 8000de0:	4b33      	ldr	r3, [pc, #204]	; (8000eb0 <HAL_FDCAN_RxFifo0Callback+0x1b0>)
 8000de2:	2201      	movs	r2, #1
 8000de4:	609a      	str	r2, [r3, #8]
 8000de6:	e037      	b.n	8000e58 <HAL_FDCAN_RxFifo0Callback+0x158>
 8000de8:	4b31      	ldr	r3, [pc, #196]	; (8000eb0 <HAL_FDCAN_RxFifo0Callback+0x1b0>)
 8000dea:	2202      	movs	r2, #2
 8000dec:	609a      	str	r2, [r3, #8]
 8000dee:	e033      	b.n	8000e58 <HAL_FDCAN_RxFifo0Callback+0x158>
 8000df0:	4b2f      	ldr	r3, [pc, #188]	; (8000eb0 <HAL_FDCAN_RxFifo0Callback+0x1b0>)
 8000df2:	2203      	movs	r2, #3
 8000df4:	609a      	str	r2, [r3, #8]
 8000df6:	e02f      	b.n	8000e58 <HAL_FDCAN_RxFifo0Callback+0x158>
 8000df8:	4b2d      	ldr	r3, [pc, #180]	; (8000eb0 <HAL_FDCAN_RxFifo0Callback+0x1b0>)
 8000dfa:	2204      	movs	r2, #4
 8000dfc:	609a      	str	r2, [r3, #8]
 8000dfe:	e02b      	b.n	8000e58 <HAL_FDCAN_RxFifo0Callback+0x158>
 8000e00:	4b2b      	ldr	r3, [pc, #172]	; (8000eb0 <HAL_FDCAN_RxFifo0Callback+0x1b0>)
 8000e02:	2205      	movs	r2, #5
 8000e04:	609a      	str	r2, [r3, #8]
 8000e06:	e027      	b.n	8000e58 <HAL_FDCAN_RxFifo0Callback+0x158>
 8000e08:	4b29      	ldr	r3, [pc, #164]	; (8000eb0 <HAL_FDCAN_RxFifo0Callback+0x1b0>)
 8000e0a:	2206      	movs	r2, #6
 8000e0c:	609a      	str	r2, [r3, #8]
 8000e0e:	e023      	b.n	8000e58 <HAL_FDCAN_RxFifo0Callback+0x158>
 8000e10:	4b27      	ldr	r3, [pc, #156]	; (8000eb0 <HAL_FDCAN_RxFifo0Callback+0x1b0>)
 8000e12:	2207      	movs	r2, #7
 8000e14:	609a      	str	r2, [r3, #8]
 8000e16:	e01f      	b.n	8000e58 <HAL_FDCAN_RxFifo0Callback+0x158>
 8000e18:	4b25      	ldr	r3, [pc, #148]	; (8000eb0 <HAL_FDCAN_RxFifo0Callback+0x1b0>)
 8000e1a:	2208      	movs	r2, #8
 8000e1c:	609a      	str	r2, [r3, #8]
 8000e1e:	e01b      	b.n	8000e58 <HAL_FDCAN_RxFifo0Callback+0x158>
 8000e20:	4b23      	ldr	r3, [pc, #140]	; (8000eb0 <HAL_FDCAN_RxFifo0Callback+0x1b0>)
 8000e22:	220c      	movs	r2, #12
 8000e24:	609a      	str	r2, [r3, #8]
 8000e26:	e017      	b.n	8000e58 <HAL_FDCAN_RxFifo0Callback+0x158>
 8000e28:	4b21      	ldr	r3, [pc, #132]	; (8000eb0 <HAL_FDCAN_RxFifo0Callback+0x1b0>)
 8000e2a:	2210      	movs	r2, #16
 8000e2c:	609a      	str	r2, [r3, #8]
 8000e2e:	e013      	b.n	8000e58 <HAL_FDCAN_RxFifo0Callback+0x158>
 8000e30:	4b1f      	ldr	r3, [pc, #124]	; (8000eb0 <HAL_FDCAN_RxFifo0Callback+0x1b0>)
 8000e32:	2214      	movs	r2, #20
 8000e34:	609a      	str	r2, [r3, #8]
 8000e36:	e00f      	b.n	8000e58 <HAL_FDCAN_RxFifo0Callback+0x158>
 8000e38:	4b1d      	ldr	r3, [pc, #116]	; (8000eb0 <HAL_FDCAN_RxFifo0Callback+0x1b0>)
 8000e3a:	2218      	movs	r2, #24
 8000e3c:	609a      	str	r2, [r3, #8]
 8000e3e:	e00b      	b.n	8000e58 <HAL_FDCAN_RxFifo0Callback+0x158>
 8000e40:	4b1b      	ldr	r3, [pc, #108]	; (8000eb0 <HAL_FDCAN_RxFifo0Callback+0x1b0>)
 8000e42:	2220      	movs	r2, #32
 8000e44:	609a      	str	r2, [r3, #8]
 8000e46:	e007      	b.n	8000e58 <HAL_FDCAN_RxFifo0Callback+0x158>
 8000e48:	4b19      	ldr	r3, [pc, #100]	; (8000eb0 <HAL_FDCAN_RxFifo0Callback+0x1b0>)
 8000e4a:	2230      	movs	r2, #48	; 0x30
 8000e4c:	609a      	str	r2, [r3, #8]
 8000e4e:	e003      	b.n	8000e58 <HAL_FDCAN_RxFifo0Callback+0x158>
 8000e50:	4b17      	ldr	r3, [pc, #92]	; (8000eb0 <HAL_FDCAN_RxFifo0Callback+0x1b0>)
 8000e52:	2240      	movs	r2, #64	; 0x40
 8000e54:	609a      	str	r2, [r3, #8]
 8000e56:	bf00      	nop
 8000e58:	4a15      	ldr	r2, [pc, #84]	; (8000eb0 <HAL_FDCAN_RxFifo0Callback+0x1b0>)
 8000e5a:	68fb      	ldr	r3, [r7, #12]
 8000e5c:	60d3      	str	r3, [r2, #12]
 8000e5e:	4b15      	ldr	r3, [pc, #84]	; (8000eb4 <HAL_FDCAN_RxFifo0Callback+0x1b4>)
 8000e60:	2201      	movs	r2, #1
 8000e62:	601a      	str	r2, [r3, #0]
 8000e64:	4b12      	ldr	r3, [pc, #72]	; (8000eb0 <HAL_FDCAN_RxFifo0Callback+0x1b0>)
 8000e66:	689b      	ldr	r3, [r3, #8]
 8000e68:	461a      	mov	r2, r3
 8000e6a:	490a      	ldr	r1, [pc, #40]	; (8000e94 <HAL_FDCAN_RxFifo0Callback+0x194>)
 8000e6c:	4812      	ldr	r0, [pc, #72]	; (8000eb8 <HAL_FDCAN_RxFifo0Callback+0x1b8>)
 8000e6e:	f019 fcdf 	bl	801a830 <memcpy>
 8000e72:	4b09      	ldr	r3, [pc, #36]	; (8000e98 <HAL_FDCAN_RxFifo0Callback+0x198>)
 8000e74:	685b      	ldr	r3, [r3, #4]
 8000e76:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000e7a:	d103      	bne.n	8000e84 <HAL_FDCAN_RxFifo0Callback+0x184>
 8000e7c:	4b0c      	ldr	r3, [pc, #48]	; (8000eb0 <HAL_FDCAN_RxFifo0Callback+0x1b0>)
 8000e7e:	2201      	movs	r2, #1
 8000e80:	711a      	strb	r2, [r3, #4]
 8000e82:	e002      	b.n	8000e8a <HAL_FDCAN_RxFifo0Callback+0x18a>
 8000e84:	4b0a      	ldr	r3, [pc, #40]	; (8000eb0 <HAL_FDCAN_RxFifo0Callback+0x1b0>)
 8000e86:	2200      	movs	r2, #0
 8000e88:	711a      	strb	r2, [r3, #4]
 8000e8a:	bf00      	nop
 8000e8c:	3710      	adds	r7, #16
 8000e8e:	46bd      	mov	sp, r7
 8000e90:	bd80      	pop	{r7, pc}
 8000e92:	bf00      	nop
 8000e94:	24044028 	.word	0x24044028
 8000e98:	240440b8 	.word	0x240440b8
 8000e9c:	58020400 	.word	0x58020400
 8000ea0:	0801bd04 	.word	0x0801bd04
 8000ea4:	240440e0 	.word	0x240440e0
 8000ea8:	24000370 	.word	0x24000370
 8000eac:	240440f0 	.word	0x240440f0
 8000eb0:	24044068 	.word	0x24044068
 8000eb4:	2400036c 	.word	0x2400036c
 8000eb8:	24044078 	.word	0x24044078

08000ebc <gps_msg_config>:
#include "main.h"
#include <myprintf.h>
#include <stdbool.h>
#include <buffer.h>

int gps_msg_config(UART_HandleTypeDef *huart, const char *nema, int rus1){
 8000ebc:	b580      	push	{r7, lr}
 8000ebe:	b09e      	sub	sp, #120	; 0x78
 8000ec0:	af02      	add	r7, sp, #8
 8000ec2:	60f8      	str	r0, [r7, #12]
 8000ec4:	60b9      	str	r1, [r7, #8]
 8000ec6:	607a      	str	r2, [r7, #4]
	if (strlen(nema) != 3) return 1;
 8000ec8:	68b8      	ldr	r0, [r7, #8]
 8000eca:	f7ff fa09 	bl	80002e0 <strlen>
 8000ece:	4603      	mov	r3, r0
 8000ed0:	2b03      	cmp	r3, #3
 8000ed2:	d001      	beq.n	8000ed8 <gps_msg_config+0x1c>
 8000ed4:	2301      	movs	r3, #1
 8000ed6:	e052      	b.n	8000f7e <gps_msg_config+0xc2>


	char msg[32];
	snprintf(msg, sizeof(msg)-1,"PUBX,40,%s,0,%i,0,0,0,0", nema, rus1);
 8000ed8:	f107 0048 	add.w	r0, r7, #72	; 0x48
 8000edc:	687b      	ldr	r3, [r7, #4]
 8000ede:	9300      	str	r3, [sp, #0]
 8000ee0:	68bb      	ldr	r3, [r7, #8]
 8000ee2:	4a29      	ldr	r2, [pc, #164]	; (8000f88 <gps_msg_config+0xcc>)
 8000ee4:	211f      	movs	r1, #31
 8000ee6:	f019 fdeb 	bl	801aac0 <sniprintf>

	int checksum_int = 0;
 8000eea:	2300      	movs	r3, #0
 8000eec:	66fb      	str	r3, [r7, #108]	; 0x6c
	for (int i = 0; msg[i] && i < 32; i++)
 8000eee:	2300      	movs	r3, #0
 8000ef0:	66bb      	str	r3, [r7, #104]	; 0x68
 8000ef2:	e00b      	b.n	8000f0c <gps_msg_config+0x50>
		checksum_int ^= (unsigned char)msg[i];
 8000ef4:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8000ef8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8000efa:	4413      	add	r3, r2
 8000efc:	781b      	ldrb	r3, [r3, #0]
 8000efe:	461a      	mov	r2, r3
 8000f00:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8000f02:	4053      	eors	r3, r2
 8000f04:	66fb      	str	r3, [r7, #108]	; 0x6c
	for (int i = 0; msg[i] && i < 32; i++)
 8000f06:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8000f08:	3301      	adds	r3, #1
 8000f0a:	66bb      	str	r3, [r7, #104]	; 0x68
 8000f0c:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8000f10:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8000f12:	4413      	add	r3, r2
 8000f14:	781b      	ldrb	r3, [r3, #0]
 8000f16:	2b00      	cmp	r3, #0
 8000f18:	d002      	beq.n	8000f20 <gps_msg_config+0x64>
 8000f1a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8000f1c:	2b1f      	cmp	r3, #31
 8000f1e:	dde9      	ble.n	8000ef4 <gps_msg_config+0x38>

	char checksum[8];
	snprintf(checksum, sizeof(checksum)-1, "*%.2X", checksum_int);
 8000f20:	f107 0040 	add.w	r0, r7, #64	; 0x40
 8000f24:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8000f26:	4a19      	ldr	r2, [pc, #100]	; (8000f8c <gps_msg_config+0xd0>)
 8000f28:	2107      	movs	r1, #7
 8000f2a:	f019 fdc9 	bl	801aac0 <sniprintf>

	char messagetosend[42];
	snprintf(messagetosend, sizeof(messagetosend)-1, "$%s%s\r\n", msg, checksum);
 8000f2e:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8000f32:	f107 0014 	add.w	r0, r7, #20
 8000f36:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000f3a:	9300      	str	r3, [sp, #0]
 8000f3c:	4613      	mov	r3, r2
 8000f3e:	4a14      	ldr	r2, [pc, #80]	; (8000f90 <gps_msg_config+0xd4>)
 8000f40:	2129      	movs	r1, #41	; 0x29
 8000f42:	f019 fdbd 	bl	801aac0 <sniprintf>
	printf("\n\rSending: ");
 8000f46:	4813      	ldr	r0, [pc, #76]	; (8000f94 <gps_msg_config+0xd8>)
 8000f48:	f019 fd2e 	bl	801a9a8 <iprintf>
	printf("%s", messagetosend);
 8000f4c:	f107 0314 	add.w	r3, r7, #20
 8000f50:	4619      	mov	r1, r3
 8000f52:	4811      	ldr	r0, [pc, #68]	; (8000f98 <gps_msg_config+0xdc>)
 8000f54:	f019 fd28 	bl	801a9a8 <iprintf>
	if (HAL_UART_Transmit(huart, messagetosend, strlen(messagetosend), 100) != HAL_OK){
 8000f58:	f107 0314 	add.w	r3, r7, #20
 8000f5c:	4618      	mov	r0, r3
 8000f5e:	f7ff f9bf 	bl	80002e0 <strlen>
 8000f62:	4603      	mov	r3, r0
 8000f64:	b29a      	uxth	r2, r3
 8000f66:	f107 0114 	add.w	r1, r7, #20
 8000f6a:	2364      	movs	r3, #100	; 0x64
 8000f6c:	68f8      	ldr	r0, [r7, #12]
 8000f6e:	f00f fa08 	bl	8010382 <HAL_UART_Transmit>
 8000f72:	4603      	mov	r3, r0
 8000f74:	2b00      	cmp	r3, #0
 8000f76:	d001      	beq.n	8000f7c <gps_msg_config+0xc0>
		Error_Handler();
 8000f78:	f003 fa34 	bl	80043e4 <Error_Handler>
	}
	return 0;
 8000f7c:	2300      	movs	r3, #0
}
 8000f7e:	4618      	mov	r0, r3
 8000f80:	3770      	adds	r7, #112	; 0x70
 8000f82:	46bd      	mov	sp, r7
 8000f84:	bd80      	pop	{r7, pc}
 8000f86:	bf00      	nop
 8000f88:	0801bd18 	.word	0x0801bd18
 8000f8c:	0801bd30 	.word	0x0801bd30
 8000f90:	0801bd38 	.word	0x0801bd38
 8000f94:	0801bd40 	.word	0x0801bd40
 8000f98:	0801bd4c 	.word	0x0801bd4c

08000f9c <gps_rate_config>:

int gps_rate_config(UART_HandleTypeDef *huart, uint16_t measRate, uint16_t navRate, uint16_t timeRef){
 8000f9c:	b580      	push	{r7, lr}
 8000f9e:	b08a      	sub	sp, #40	; 0x28
 8000fa0:	af00      	add	r7, sp, #0
 8000fa2:	60f8      	str	r0, [r7, #12]
 8000fa4:	4608      	mov	r0, r1
 8000fa6:	4611      	mov	r1, r2
 8000fa8:	461a      	mov	r2, r3
 8000faa:	4603      	mov	r3, r0
 8000fac:	817b      	strh	r3, [r7, #10]
 8000fae:	460b      	mov	r3, r1
 8000fb0:	813b      	strh	r3, [r7, #8]
 8000fb2:	4613      	mov	r3, r2
 8000fb4:	80fb      	strh	r3, [r7, #6]
		uint16_t length = 6;
 8000fb6:	2306      	movs	r3, #6
 8000fb8:	83fb      	strh	r3, [r7, #30]
		uint8_t msg[14];
		msg[0] = 0xb5;
 8000fba:	23b5      	movs	r3, #181	; 0xb5
 8000fbc:	743b      	strb	r3, [r7, #16]
		msg[1] = 0x62;
 8000fbe:	2362      	movs	r3, #98	; 0x62
 8000fc0:	747b      	strb	r3, [r7, #17]
		msg[2] = 0x06;
 8000fc2:	2306      	movs	r3, #6
 8000fc4:	74bb      	strb	r3, [r7, #18]
		msg[3] = 0x08;
 8000fc6:	2308      	movs	r3, #8
 8000fc8:	74fb      	strb	r3, [r7, #19]
		msg[4] = length;
 8000fca:	8bfb      	ldrh	r3, [r7, #30]
 8000fcc:	b2db      	uxtb	r3, r3
 8000fce:	753b      	strb	r3, [r7, #20]
		msg[5] = 0;
 8000fd0:	2300      	movs	r3, #0
 8000fd2:	757b      	strb	r3, [r7, #21]
		msg[6] = measRate;
 8000fd4:	897b      	ldrh	r3, [r7, #10]
 8000fd6:	b2db      	uxtb	r3, r3
 8000fd8:	75bb      	strb	r3, [r7, #22]
		msg[7] = 0;
 8000fda:	2300      	movs	r3, #0
 8000fdc:	75fb      	strb	r3, [r7, #23]
		msg[8] = navRate;
 8000fde:	893b      	ldrh	r3, [r7, #8]
 8000fe0:	b2db      	uxtb	r3, r3
 8000fe2:	763b      	strb	r3, [r7, #24]
		msg[9] = 0;
 8000fe4:	2300      	movs	r3, #0
 8000fe6:	767b      	strb	r3, [r7, #25]
		msg[10] = timeRef;
 8000fe8:	88fb      	ldrh	r3, [r7, #6]
 8000fea:	b2db      	uxtb	r3, r3
 8000fec:	76bb      	strb	r3, [r7, #26]
		msg[11] = 0;
 8000fee:	2300      	movs	r3, #0
 8000ff0:	76fb      	strb	r3, [r7, #27]

		uint8_t CK_A = 0;
 8000ff2:	2300      	movs	r3, #0
 8000ff4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		uint8_t CK_B = 0;
 8000ff8:	2300      	movs	r3, #0
 8000ffa:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
		for(int i=2; i<12; i++){
 8000ffe:	2302      	movs	r3, #2
 8001000:	623b      	str	r3, [r7, #32]
 8001002:	e013      	b.n	800102c <gps_rate_config+0x90>
	        CK_A = CK_A + msg[i];
 8001004:	f107 0210 	add.w	r2, r7, #16
 8001008:	6a3b      	ldr	r3, [r7, #32]
 800100a:	4413      	add	r3, r2
 800100c:	781a      	ldrb	r2, [r3, #0]
 800100e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001012:	4413      	add	r3, r2
 8001014:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	        CK_A &= 0xFF;
	        CK_B = CK_B + CK_A;
 8001018:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 800101c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001020:	4413      	add	r3, r2
 8001022:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
		for(int i=2; i<12; i++){
 8001026:	6a3b      	ldr	r3, [r7, #32]
 8001028:	3301      	adds	r3, #1
 800102a:	623b      	str	r3, [r7, #32]
 800102c:	6a3b      	ldr	r3, [r7, #32]
 800102e:	2b0b      	cmp	r3, #11
 8001030:	dde8      	ble.n	8001004 <gps_rate_config+0x68>
	        CK_B &= 0xFF;
	    }
		msg[12] = CK_A;
 8001032:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001036:	773b      	strb	r3, [r7, #28]
		msg[13] = CK_B;
 8001038:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800103c:	777b      	strb	r3, [r7, #29]

		if (HAL_UART_Transmit(huart, msg, sizeof(msg), 100) != HAL_OK){
 800103e:	f107 0110 	add.w	r1, r7, #16
 8001042:	2364      	movs	r3, #100	; 0x64
 8001044:	220e      	movs	r2, #14
 8001046:	68f8      	ldr	r0, [r7, #12]
 8001048:	f00f f99b 	bl	8010382 <HAL_UART_Transmit>
 800104c:	4603      	mov	r3, r0
 800104e:	2b00      	cmp	r3, #0
 8001050:	d003      	beq.n	800105a <gps_rate_config+0xbe>
				Error_Handler();
 8001052:	f003 f9c7 	bl	80043e4 <Error_Handler>
				return 1;
 8001056:	2301      	movs	r3, #1
 8001058:	e000      	b.n	800105c <gps_rate_config+0xc0>
			}
		return 0;
 800105a:	2300      	movs	r3, #0
}
 800105c:	4618      	mov	r0, r3
 800105e:	3728      	adds	r7, #40	; 0x28
 8001060:	46bd      	mov	sp, r7
 8001062:	bd80      	pop	{r7, pc}

08001064 <HAL_UART_RxHalfCpltCallback>:
}

int GPS_flag1 = 0;
int GPS_flag2 = 0;

void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart){
 8001064:	b580      	push	{r7, lr}
 8001066:	b082      	sub	sp, #8
 8001068:	af00      	add	r7, sp, #0
 800106a:	6078      	str	r0, [r7, #4]
  	/* Prevent unused argument(s) compilation warning */
  	UNUSED(huart);
  	memset(rxBuf+(BUFFLENGTH/2), 0, BUFFLENGTH/2);
 800106c:	4b06      	ldr	r3, [pc, #24]	; (8001088 <HAL_UART_RxHalfCpltCallback+0x24>)
 800106e:	f44f 72af 	mov.w	r2, #350	; 0x15e
 8001072:	2100      	movs	r1, #0
 8001074:	4618      	mov	r0, r3
 8001076:	f019 fbe6 	bl	801a846 <memset>
  	GPS_flag1 = 1;
 800107a:	4b04      	ldr	r3, [pc, #16]	; (800108c <HAL_UART_RxHalfCpltCallback+0x28>)
 800107c:	2201      	movs	r2, #1
 800107e:	601a      	str	r2, [r3, #0]
}
 8001080:	bf00      	nop
 8001082:	3708      	adds	r7, #8
 8001084:	46bd      	mov	sp, r7
 8001086:	bd80      	pop	{r7, pc}
 8001088:	2404448a 	.word	0x2404448a
 800108c:	24000374 	.word	0x24000374

08001090 <HAL_UART_RxCpltCallback>:
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 8001090:	b580      	push	{r7, lr}
 8001092:	b082      	sub	sp, #8
 8001094:	af00      	add	r7, sp, #0
 8001096:	6078      	str	r0, [r7, #4]
	UNUSED(huart);
	memset(rxBuf, 0, BUFFLENGTH/2);
 8001098:	f44f 72af 	mov.w	r2, #350	; 0x15e
 800109c:	2100      	movs	r1, #0
 800109e:	4805      	ldr	r0, [pc, #20]	; (80010b4 <HAL_UART_RxCpltCallback+0x24>)
 80010a0:	f019 fbd1 	bl	801a846 <memset>
	GPS_flag2 = 1;
 80010a4:	4b04      	ldr	r3, [pc, #16]	; (80010b8 <HAL_UART_RxCpltCallback+0x28>)
 80010a6:	2201      	movs	r2, #1
 80010a8:	601a      	str	r2, [r3, #0]
}
 80010aa:	bf00      	nop
 80010ac:	3708      	adds	r7, #8
 80010ae:	46bd      	mov	sp, r7
 80010b0:	bd80      	pop	{r7, pc}
 80010b2:	bf00      	nop
 80010b4:	2404432c 	.word	0x2404432c
 80010b8:	24000378 	.word	0x24000378

080010bc <NRF24_DelayMicroSeconds>:
static UART_HandleTypeDef nrf24_huart;

//**** Functions prototypes ****//
//Microsecond delay function
void NRF24_DelayMicroSeconds(uint32_t uSec)
{
 80010bc:	b480      	push	{r7}
 80010be:	b085      	sub	sp, #20
 80010c0:	af00      	add	r7, sp, #0
 80010c2:	6078      	str	r0, [r7, #4]
	uint32_t uSecVar = uSec;
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	60fb      	str	r3, [r7, #12]
	uSecVar = uSecVar* ((SystemCoreClock/1000000)/3);
 80010c8:	4b0a      	ldr	r3, [pc, #40]	; (80010f4 <NRF24_DelayMicroSeconds+0x38>)
 80010ca:	681b      	ldr	r3, [r3, #0]
 80010cc:	4a0a      	ldr	r2, [pc, #40]	; (80010f8 <NRF24_DelayMicroSeconds+0x3c>)
 80010ce:	fba2 2303 	umull	r2, r3, r2, r3
 80010d2:	0c9a      	lsrs	r2, r3, #18
 80010d4:	68fb      	ldr	r3, [r7, #12]
 80010d6:	fb02 f303 	mul.w	r3, r2, r3
 80010da:	60fb      	str	r3, [r7, #12]
	while(uSecVar--);
 80010dc:	bf00      	nop
 80010de:	68fb      	ldr	r3, [r7, #12]
 80010e0:	1e5a      	subs	r2, r3, #1
 80010e2:	60fa      	str	r2, [r7, #12]
 80010e4:	2b00      	cmp	r3, #0
 80010e6:	d1fa      	bne.n	80010de <NRF24_DelayMicroSeconds+0x22>
}
 80010e8:	bf00      	nop
 80010ea:	3714      	adds	r7, #20
 80010ec:	46bd      	mov	sp, r7
 80010ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010f2:	4770      	bx	lr
 80010f4:	24000010 	.word	0x24000010
 80010f8:	165e9f81 	.word	0x165e9f81

080010fc <NRF24_csn>:

//1. Chip Select function
void NRF24_csn(int state)
{
 80010fc:	b580      	push	{r7, lr}
 80010fe:	b082      	sub	sp, #8
 8001100:	af00      	add	r7, sp, #0
 8001102:	6078      	str	r0, [r7, #4]
	if(state) HAL_GPIO_WritePin(nrf24_PORT, nrf24_CSN_PIN, GPIO_PIN_SET);
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	2b00      	cmp	r3, #0
 8001108:	d008      	beq.n	800111c <NRF24_csn+0x20>
 800110a:	4b0a      	ldr	r3, [pc, #40]	; (8001134 <NRF24_csn+0x38>)
 800110c:	6818      	ldr	r0, [r3, #0]
 800110e:	4b0a      	ldr	r3, [pc, #40]	; (8001138 <NRF24_csn+0x3c>)
 8001110:	881b      	ldrh	r3, [r3, #0]
 8001112:	2201      	movs	r2, #1
 8001114:	4619      	mov	r1, r3
 8001116:	f007 fb73 	bl	8008800 <HAL_GPIO_WritePin>
	else HAL_GPIO_WritePin(nrf24_PORT, nrf24_CSN_PIN, GPIO_PIN_RESET);
}
 800111a:	e007      	b.n	800112c <NRF24_csn+0x30>
	else HAL_GPIO_WritePin(nrf24_PORT, nrf24_CSN_PIN, GPIO_PIN_RESET);
 800111c:	4b05      	ldr	r3, [pc, #20]	; (8001134 <NRF24_csn+0x38>)
 800111e:	6818      	ldr	r0, [r3, #0]
 8001120:	4b05      	ldr	r3, [pc, #20]	; (8001138 <NRF24_csn+0x3c>)
 8001122:	881b      	ldrh	r3, [r3, #0]
 8001124:	2200      	movs	r2, #0
 8001126:	4619      	mov	r1, r3
 8001128:	f007 fb6a 	bl	8008800 <HAL_GPIO_WritePin>
}
 800112c:	bf00      	nop
 800112e:	3708      	adds	r7, #8
 8001130:	46bd      	mov	sp, r7
 8001132:	bd80      	pop	{r7, pc}
 8001134:	24000384 	.word	0x24000384
 8001138:	24000388 	.word	0x24000388

0800113c <NRF24_ce>:
//2. Chip Enable
void NRF24_ce(int state)
{
 800113c:	b580      	push	{r7, lr}
 800113e:	b082      	sub	sp, #8
 8001140:	af00      	add	r7, sp, #0
 8001142:	6078      	str	r0, [r7, #4]
	if(state) HAL_GPIO_WritePin(nrf24_PORT, nrf24_CE_PIN, GPIO_PIN_SET);
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	2b00      	cmp	r3, #0
 8001148:	d008      	beq.n	800115c <NRF24_ce+0x20>
 800114a:	4b0a      	ldr	r3, [pc, #40]	; (8001174 <NRF24_ce+0x38>)
 800114c:	6818      	ldr	r0, [r3, #0]
 800114e:	4b0a      	ldr	r3, [pc, #40]	; (8001178 <NRF24_ce+0x3c>)
 8001150:	881b      	ldrh	r3, [r3, #0]
 8001152:	2201      	movs	r2, #1
 8001154:	4619      	mov	r1, r3
 8001156:	f007 fb53 	bl	8008800 <HAL_GPIO_WritePin>
	else HAL_GPIO_WritePin(nrf24_PORT, nrf24_CE_PIN, GPIO_PIN_RESET);
}
 800115a:	e007      	b.n	800116c <NRF24_ce+0x30>
	else HAL_GPIO_WritePin(nrf24_PORT, nrf24_CE_PIN, GPIO_PIN_RESET);
 800115c:	4b05      	ldr	r3, [pc, #20]	; (8001174 <NRF24_ce+0x38>)
 800115e:	6818      	ldr	r0, [r3, #0]
 8001160:	4b05      	ldr	r3, [pc, #20]	; (8001178 <NRF24_ce+0x3c>)
 8001162:	881b      	ldrh	r3, [r3, #0]
 8001164:	2200      	movs	r2, #0
 8001166:	4619      	mov	r1, r3
 8001168:	f007 fb4a 	bl	8008800 <HAL_GPIO_WritePin>
}
 800116c:	bf00      	nop
 800116e:	3708      	adds	r7, #8
 8001170:	46bd      	mov	sp, r7
 8001172:	bd80      	pop	{r7, pc}
 8001174:	24000384 	.word	0x24000384
 8001178:	2400038a 	.word	0x2400038a

0800117c <NRF24_read_register>:
//3. Read single byte from a register
uint8_t NRF24_read_register(uint8_t reg)
{
 800117c:	b580      	push	{r7, lr}
 800117e:	b084      	sub	sp, #16
 8001180:	af00      	add	r7, sp, #0
 8001182:	4603      	mov	r3, r0
 8001184:	71fb      	strb	r3, [r7, #7]
	uint8_t spiBuf[3];
	uint8_t retData;
	//Put CSN low
	NRF24_csn(0);
 8001186:	2000      	movs	r0, #0
 8001188:	f7ff ffb8 	bl	80010fc <NRF24_csn>
	//Transmit register address
	spiBuf[0] = reg&0x1F;
 800118c:	79fb      	ldrb	r3, [r7, #7]
 800118e:	f003 031f 	and.w	r3, r3, #31
 8001192:	b2db      	uxtb	r3, r3
 8001194:	733b      	strb	r3, [r7, #12]
	HAL_SPI_Transmit(&nrf24_hspi, spiBuf, 1, 100);
 8001196:	f107 010c 	add.w	r1, r7, #12
 800119a:	2364      	movs	r3, #100	; 0x64
 800119c:	2201      	movs	r2, #1
 800119e:	480a      	ldr	r0, [pc, #40]	; (80011c8 <NRF24_read_register+0x4c>)
 80011a0:	f00e f8e6 	bl	800f370 <HAL_SPI_Transmit>
	//Receive data
	HAL_SPI_Receive(&nrf24_hspi, &spiBuf[1], 1, 100);
 80011a4:	f107 030c 	add.w	r3, r7, #12
 80011a8:	1c59      	adds	r1, r3, #1
 80011aa:	2364      	movs	r3, #100	; 0x64
 80011ac:	2201      	movs	r2, #1
 80011ae:	4806      	ldr	r0, [pc, #24]	; (80011c8 <NRF24_read_register+0x4c>)
 80011b0:	f00e fad0 	bl	800f754 <HAL_SPI_Receive>
	retData = spiBuf[1];
 80011b4:	7b7b      	ldrb	r3, [r7, #13]
 80011b6:	73fb      	strb	r3, [r7, #15]
	//Bring CSN high
	NRF24_csn(1);
 80011b8:	2001      	movs	r0, #1
 80011ba:	f7ff ff9f 	bl	80010fc <NRF24_csn>
	return retData;
 80011be:	7bfb      	ldrb	r3, [r7, #15]
}
 80011c0:	4618      	mov	r0, r3
 80011c2:	3710      	adds	r7, #16
 80011c4:	46bd      	mov	sp, r7
 80011c6:	bd80      	pop	{r7, pc}
 80011c8:	2400038c 	.word	0x2400038c

080011cc <NRF24_read_registerN>:
//4. Read multiple bytes register
void NRF24_read_registerN(uint8_t reg, uint8_t *buf, uint8_t len)
{
 80011cc:	b580      	push	{r7, lr}
 80011ce:	b084      	sub	sp, #16
 80011d0:	af00      	add	r7, sp, #0
 80011d2:	4603      	mov	r3, r0
 80011d4:	6039      	str	r1, [r7, #0]
 80011d6:	71fb      	strb	r3, [r7, #7]
 80011d8:	4613      	mov	r3, r2
 80011da:	71bb      	strb	r3, [r7, #6]
	uint8_t spiBuf[3];
	//Put CSN low
	NRF24_csn(0);
 80011dc:	2000      	movs	r0, #0
 80011de:	f7ff ff8d 	bl	80010fc <NRF24_csn>
	//Transmit register address
	spiBuf[0] = reg&0x1F;
 80011e2:	79fb      	ldrb	r3, [r7, #7]
 80011e4:	f003 031f 	and.w	r3, r3, #31
 80011e8:	b2db      	uxtb	r3, r3
 80011ea:	733b      	strb	r3, [r7, #12]
	//spiStatus = NRF24_SPI_Write(spiBuf, 1);
	HAL_SPI_Transmit(&nrf24_hspi, spiBuf, 1, 100);
 80011ec:	f107 010c 	add.w	r1, r7, #12
 80011f0:	2364      	movs	r3, #100	; 0x64
 80011f2:	2201      	movs	r2, #1
 80011f4:	4808      	ldr	r0, [pc, #32]	; (8001218 <NRF24_read_registerN+0x4c>)
 80011f6:	f00e f8bb 	bl	800f370 <HAL_SPI_Transmit>
	//Receive data
	HAL_SPI_Receive(&nrf24_hspi, buf, len, 100);
 80011fa:	79bb      	ldrb	r3, [r7, #6]
 80011fc:	b29a      	uxth	r2, r3
 80011fe:	2364      	movs	r3, #100	; 0x64
 8001200:	6839      	ldr	r1, [r7, #0]
 8001202:	4805      	ldr	r0, [pc, #20]	; (8001218 <NRF24_read_registerN+0x4c>)
 8001204:	f00e faa6 	bl	800f754 <HAL_SPI_Receive>
	//Bring CSN high
	NRF24_csn(1);
 8001208:	2001      	movs	r0, #1
 800120a:	f7ff ff77 	bl	80010fc <NRF24_csn>
}
 800120e:	bf00      	nop
 8001210:	3710      	adds	r7, #16
 8001212:	46bd      	mov	sp, r7
 8001214:	bd80      	pop	{r7, pc}
 8001216:	bf00      	nop
 8001218:	2400038c 	.word	0x2400038c

0800121c <NRF24_write_register>:
//5. Write single byte register
void NRF24_write_register(uint8_t reg, uint8_t value)
{
 800121c:	b580      	push	{r7, lr}
 800121e:	b084      	sub	sp, #16
 8001220:	af00      	add	r7, sp, #0
 8001222:	4603      	mov	r3, r0
 8001224:	460a      	mov	r2, r1
 8001226:	71fb      	strb	r3, [r7, #7]
 8001228:	4613      	mov	r3, r2
 800122a:	71bb      	strb	r3, [r7, #6]
	uint8_t spiBuf[3];
	//Put CSN low
	NRF24_csn(0);
 800122c:	2000      	movs	r0, #0
 800122e:	f7ff ff65 	bl	80010fc <NRF24_csn>
	//Transmit register address and data
	spiBuf[0] = reg|0x20;
 8001232:	79fb      	ldrb	r3, [r7, #7]
 8001234:	f043 0320 	orr.w	r3, r3, #32
 8001238:	b2db      	uxtb	r3, r3
 800123a:	733b      	strb	r3, [r7, #12]
	spiBuf[1] = value;
 800123c:	79bb      	ldrb	r3, [r7, #6]
 800123e:	737b      	strb	r3, [r7, #13]
	HAL_SPI_Transmit(&nrf24_hspi, spiBuf, 2, 100);
 8001240:	f107 010c 	add.w	r1, r7, #12
 8001244:	2364      	movs	r3, #100	; 0x64
 8001246:	2202      	movs	r2, #2
 8001248:	4804      	ldr	r0, [pc, #16]	; (800125c <NRF24_write_register+0x40>)
 800124a:	f00e f891 	bl	800f370 <HAL_SPI_Transmit>
	//Bring CSN high
	NRF24_csn(1);
 800124e:	2001      	movs	r0, #1
 8001250:	f7ff ff54 	bl	80010fc <NRF24_csn>
}
 8001254:	bf00      	nop
 8001256:	3710      	adds	r7, #16
 8001258:	46bd      	mov	sp, r7
 800125a:	bd80      	pop	{r7, pc}
 800125c:	2400038c 	.word	0x2400038c

08001260 <NRF24_write_registerN>:
//6. Write multipl bytes register
void NRF24_write_registerN(uint8_t reg, const uint8_t* buf, uint8_t len)
{
 8001260:	b580      	push	{r7, lr}
 8001262:	b084      	sub	sp, #16
 8001264:	af00      	add	r7, sp, #0
 8001266:	4603      	mov	r3, r0
 8001268:	6039      	str	r1, [r7, #0]
 800126a:	71fb      	strb	r3, [r7, #7]
 800126c:	4613      	mov	r3, r2
 800126e:	71bb      	strb	r3, [r7, #6]
	uint8_t spiBuf[3];
	//Put CSN low
	NRF24_csn(0);
 8001270:	2000      	movs	r0, #0
 8001272:	f7ff ff43 	bl	80010fc <NRF24_csn>
	//Transmit register address and data
	spiBuf[0] = reg|0x20;
 8001276:	79fb      	ldrb	r3, [r7, #7]
 8001278:	f043 0320 	orr.w	r3, r3, #32
 800127c:	b2db      	uxtb	r3, r3
 800127e:	733b      	strb	r3, [r7, #12]
	HAL_SPI_Transmit(&nrf24_hspi, spiBuf, 1, 100);
 8001280:	f107 010c 	add.w	r1, r7, #12
 8001284:	2364      	movs	r3, #100	; 0x64
 8001286:	2201      	movs	r2, #1
 8001288:	4808      	ldr	r0, [pc, #32]	; (80012ac <NRF24_write_registerN+0x4c>)
 800128a:	f00e f871 	bl	800f370 <HAL_SPI_Transmit>
	HAL_SPI_Transmit(&nrf24_hspi, (uint8_t*)buf, len, 100);
 800128e:	79bb      	ldrb	r3, [r7, #6]
 8001290:	b29a      	uxth	r2, r3
 8001292:	2364      	movs	r3, #100	; 0x64
 8001294:	6839      	ldr	r1, [r7, #0]
 8001296:	4805      	ldr	r0, [pc, #20]	; (80012ac <NRF24_write_registerN+0x4c>)
 8001298:	f00e f86a 	bl	800f370 <HAL_SPI_Transmit>
	//Bring CSN high
	NRF24_csn(1);
 800129c:	2001      	movs	r0, #1
 800129e:	f7ff ff2d 	bl	80010fc <NRF24_csn>
}
 80012a2:	bf00      	nop
 80012a4:	3710      	adds	r7, #16
 80012a6:	46bd      	mov	sp, r7
 80012a8:	bd80      	pop	{r7, pc}
 80012aa:	bf00      	nop
 80012ac:	2400038c 	.word	0x2400038c

080012b0 <NRF24_write_payload>:
//7. Write transmit payload
void NRF24_write_payload(const void* buf, uint8_t len)
{
 80012b0:	b580      	push	{r7, lr}
 80012b2:	b084      	sub	sp, #16
 80012b4:	af00      	add	r7, sp, #0
 80012b6:	6078      	str	r0, [r7, #4]
 80012b8:	460b      	mov	r3, r1
 80012ba:	70fb      	strb	r3, [r7, #3]
	uint8_t wrPayloadCmd;
	//Bring CSN low
	NRF24_csn(0);
 80012bc:	2000      	movs	r0, #0
 80012be:	f7ff ff1d 	bl	80010fc <NRF24_csn>
	//Send Write Tx payload command followed by pbuf data
	wrPayloadCmd = CMD_W_TX_PAYLOAD;
 80012c2:	23a0      	movs	r3, #160	; 0xa0
 80012c4:	73fb      	strb	r3, [r7, #15]
	HAL_SPI_Transmit(&nrf24_hspi, &wrPayloadCmd, 1, 100);
 80012c6:	f107 010f 	add.w	r1, r7, #15
 80012ca:	2364      	movs	r3, #100	; 0x64
 80012cc:	2201      	movs	r2, #1
 80012ce:	4808      	ldr	r0, [pc, #32]	; (80012f0 <NRF24_write_payload+0x40>)
 80012d0:	f00e f84e 	bl	800f370 <HAL_SPI_Transmit>
	HAL_SPI_Transmit(&nrf24_hspi, (uint8_t *)buf, len, 100);
 80012d4:	78fb      	ldrb	r3, [r7, #3]
 80012d6:	b29a      	uxth	r2, r3
 80012d8:	2364      	movs	r3, #100	; 0x64
 80012da:	6879      	ldr	r1, [r7, #4]
 80012dc:	4804      	ldr	r0, [pc, #16]	; (80012f0 <NRF24_write_payload+0x40>)
 80012de:	f00e f847 	bl	800f370 <HAL_SPI_Transmit>
	//Bring CSN high
	NRF24_csn(1);
 80012e2:	2001      	movs	r0, #1
 80012e4:	f7ff ff0a 	bl	80010fc <NRF24_csn>
}
 80012e8:	bf00      	nop
 80012ea:	3710      	adds	r7, #16
 80012ec:	46bd      	mov	sp, r7
 80012ee:	bd80      	pop	{r7, pc}
 80012f0:	2400038c 	.word	0x2400038c

080012f4 <NRF24_flush_tx>:
	NRF24_csn(1);
}

//9. Flush Tx buffer
void NRF24_flush_tx(void)
{
 80012f4:	b580      	push	{r7, lr}
 80012f6:	af00      	add	r7, sp, #0
	NRF24_write_register(CMD_FLUSH_TX, 0xFF);
 80012f8:	21ff      	movs	r1, #255	; 0xff
 80012fa:	20e1      	movs	r0, #225	; 0xe1
 80012fc:	f7ff ff8e 	bl	800121c <NRF24_write_register>
}
 8001300:	bf00      	nop
 8001302:	bd80      	pop	{r7, pc}

08001304 <NRF24_flush_rx>:
//10. Flush Rx buffer
void NRF24_flush_rx(void)
{
 8001304:	b580      	push	{r7, lr}
 8001306:	af00      	add	r7, sp, #0
	NRF24_write_register(CMD_FLUSH_RX, 0xFF);
 8001308:	21ff      	movs	r1, #255	; 0xff
 800130a:	20e2      	movs	r0, #226	; 0xe2
 800130c:	f7ff ff86 	bl	800121c <NRF24_write_register>
}
 8001310:	bf00      	nop
 8001312:	bd80      	pop	{r7, pc}

08001314 <NRF24_get_status>:
//11. Get status register value
uint8_t NRF24_get_status(void)
{
 8001314:	b580      	push	{r7, lr}
 8001316:	b082      	sub	sp, #8
 8001318:	af00      	add	r7, sp, #0
	uint8_t statReg;
	statReg = NRF24_read_register(REG_STATUS);
 800131a:	2007      	movs	r0, #7
 800131c:	f7ff ff2e 	bl	800117c <NRF24_read_register>
 8001320:	4603      	mov	r3, r0
 8001322:	71fb      	strb	r3, [r7, #7]
	return statReg;
 8001324:	79fb      	ldrb	r3, [r7, #7]
}
 8001326:	4618      	mov	r0, r3
 8001328:	3708      	adds	r7, #8
 800132a:	46bd      	mov	sp, r7
 800132c:	bd80      	pop	{r7, pc}
	...

08001330 <NRF24_begin>:

//12. Begin function
void NRF24_begin(GPIO_TypeDef *nrf24PORT, uint16_t nrfCSN_Pin, uint16_t nrfCE_Pin, SPI_HandleTypeDef nrfSPI)
{
 8001330:	b082      	sub	sp, #8
 8001332:	b580      	push	{r7, lr}
 8001334:	b084      	sub	sp, #16
 8001336:	af00      	add	r7, sp, #0
 8001338:	6078      	str	r0, [r7, #4]
 800133a:	61fb      	str	r3, [r7, #28]
 800133c:	460b      	mov	r3, r1
 800133e:	807b      	strh	r3, [r7, #2]
 8001340:	4613      	mov	r3, r2
 8001342:	803b      	strh	r3, [r7, #0]
	//Copy SPI handle variable
	memcpy(&nrf24_hspi, &nrfSPI, sizeof(nrfSPI));
 8001344:	4b66      	ldr	r3, [pc, #408]	; (80014e0 <NRF24_begin+0x1b0>)
 8001346:	4618      	mov	r0, r3
 8001348:	f107 031c 	add.w	r3, r7, #28
 800134c:	2288      	movs	r2, #136	; 0x88
 800134e:	4619      	mov	r1, r3
 8001350:	f019 fa6e 	bl	801a830 <memcpy>
	//Copy Pins and Port variables
	nrf24_PORT = nrf24PORT;
 8001354:	4a63      	ldr	r2, [pc, #396]	; (80014e4 <NRF24_begin+0x1b4>)
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	6013      	str	r3, [r2, #0]
	nrf24_CSN_PIN = nrfCSN_Pin;
 800135a:	4a63      	ldr	r2, [pc, #396]	; (80014e8 <NRF24_begin+0x1b8>)
 800135c:	887b      	ldrh	r3, [r7, #2]
 800135e:	8013      	strh	r3, [r2, #0]
	nrf24_CE_PIN = nrfCE_Pin;
 8001360:	4a62      	ldr	r2, [pc, #392]	; (80014ec <NRF24_begin+0x1bc>)
 8001362:	883b      	ldrh	r3, [r7, #0]
 8001364:	8013      	strh	r3, [r2, #0]
	
	//Put pins to idle state
	NRF24_csn(1);
 8001366:	2001      	movs	r0, #1
 8001368:	f7ff fec8 	bl	80010fc <NRF24_csn>
	NRF24_ce(0);
 800136c:	2000      	movs	r0, #0
 800136e:	f7ff fee5 	bl	800113c <NRF24_ce>
	//5 ms initial delay
	HAL_Delay(5);
 8001372:	2005      	movs	r0, #5
 8001374:	f003 fd2a 	bl	8004dcc <HAL_Delay>
	
	//**** Soft Reset Registers default values ****//
	NRF24_write_register(0x00, 0x08);
 8001378:	2108      	movs	r1, #8
 800137a:	2000      	movs	r0, #0
 800137c:	f7ff ff4e 	bl	800121c <NRF24_write_register>
	NRF24_write_register(0x01, 0x3f);
 8001380:	213f      	movs	r1, #63	; 0x3f
 8001382:	2001      	movs	r0, #1
 8001384:	f7ff ff4a 	bl	800121c <NRF24_write_register>
	NRF24_write_register(0x02, 0x03);
 8001388:	2103      	movs	r1, #3
 800138a:	2002      	movs	r0, #2
 800138c:	f7ff ff46 	bl	800121c <NRF24_write_register>
	NRF24_write_register(0x03, 0x03);
 8001390:	2103      	movs	r1, #3
 8001392:	2003      	movs	r0, #3
 8001394:	f7ff ff42 	bl	800121c <NRF24_write_register>
	NRF24_write_register(0x04, 0x03);
 8001398:	2103      	movs	r1, #3
 800139a:	2004      	movs	r0, #4
 800139c:	f7ff ff3e 	bl	800121c <NRF24_write_register>
	NRF24_write_register(0x05, 0x02);
 80013a0:	2102      	movs	r1, #2
 80013a2:	2005      	movs	r0, #5
 80013a4:	f7ff ff3a 	bl	800121c <NRF24_write_register>
	NRF24_write_register(0x06, 0x0f);
 80013a8:	210f      	movs	r1, #15
 80013aa:	2006      	movs	r0, #6
 80013ac:	f7ff ff36 	bl	800121c <NRF24_write_register>
	NRF24_write_register(0x07, 0x0e);
 80013b0:	210e      	movs	r1, #14
 80013b2:	2007      	movs	r0, #7
 80013b4:	f7ff ff32 	bl	800121c <NRF24_write_register>
	NRF24_write_register(0x08, 0x00);
 80013b8:	2100      	movs	r1, #0
 80013ba:	2008      	movs	r0, #8
 80013bc:	f7ff ff2e 	bl	800121c <NRF24_write_register>
	NRF24_write_register(0x09, 0x00);
 80013c0:	2100      	movs	r1, #0
 80013c2:	2009      	movs	r0, #9
 80013c4:	f7ff ff2a 	bl	800121c <NRF24_write_register>
	uint8_t pipeAddrVar[6];
	pipeAddrVar[4]=0xE7; pipeAddrVar[3]=0xE7; pipeAddrVar[2]=0xE7; pipeAddrVar[1]=0xE7; pipeAddrVar[0]=0xE7; 
 80013c8:	23e7      	movs	r3, #231	; 0xe7
 80013ca:	733b      	strb	r3, [r7, #12]
 80013cc:	23e7      	movs	r3, #231	; 0xe7
 80013ce:	72fb      	strb	r3, [r7, #11]
 80013d0:	23e7      	movs	r3, #231	; 0xe7
 80013d2:	72bb      	strb	r3, [r7, #10]
 80013d4:	23e7      	movs	r3, #231	; 0xe7
 80013d6:	727b      	strb	r3, [r7, #9]
 80013d8:	23e7      	movs	r3, #231	; 0xe7
 80013da:	723b      	strb	r3, [r7, #8]
	NRF24_write_registerN(0x0A, pipeAddrVar, 5);
 80013dc:	f107 0308 	add.w	r3, r7, #8
 80013e0:	2205      	movs	r2, #5
 80013e2:	4619      	mov	r1, r3
 80013e4:	200a      	movs	r0, #10
 80013e6:	f7ff ff3b 	bl	8001260 <NRF24_write_registerN>
	pipeAddrVar[4]=0xC2; pipeAddrVar[3]=0xC2; pipeAddrVar[2]=0xC2; pipeAddrVar[1]=0xC2; pipeAddrVar[0]=0xC2; 
 80013ea:	23c2      	movs	r3, #194	; 0xc2
 80013ec:	733b      	strb	r3, [r7, #12]
 80013ee:	23c2      	movs	r3, #194	; 0xc2
 80013f0:	72fb      	strb	r3, [r7, #11]
 80013f2:	23c2      	movs	r3, #194	; 0xc2
 80013f4:	72bb      	strb	r3, [r7, #10]
 80013f6:	23c2      	movs	r3, #194	; 0xc2
 80013f8:	727b      	strb	r3, [r7, #9]
 80013fa:	23c2      	movs	r3, #194	; 0xc2
 80013fc:	723b      	strb	r3, [r7, #8]
	NRF24_write_registerN(0x0B, pipeAddrVar, 5);
 80013fe:	f107 0308 	add.w	r3, r7, #8
 8001402:	2205      	movs	r2, #5
 8001404:	4619      	mov	r1, r3
 8001406:	200b      	movs	r0, #11
 8001408:	f7ff ff2a 	bl	8001260 <NRF24_write_registerN>
	NRF24_write_register(0x0C, 0xC3);
 800140c:	21c3      	movs	r1, #195	; 0xc3
 800140e:	200c      	movs	r0, #12
 8001410:	f7ff ff04 	bl	800121c <NRF24_write_register>
	NRF24_write_register(0x0D, 0xC4);
 8001414:	21c4      	movs	r1, #196	; 0xc4
 8001416:	200d      	movs	r0, #13
 8001418:	f7ff ff00 	bl	800121c <NRF24_write_register>
	NRF24_write_register(0x0E, 0xC5);
 800141c:	21c5      	movs	r1, #197	; 0xc5
 800141e:	200e      	movs	r0, #14
 8001420:	f7ff fefc 	bl	800121c <NRF24_write_register>
	NRF24_write_register(0x0F, 0xC6);
 8001424:	21c6      	movs	r1, #198	; 0xc6
 8001426:	200f      	movs	r0, #15
 8001428:	f7ff fef8 	bl	800121c <NRF24_write_register>
	pipeAddrVar[4]=0xE7; pipeAddrVar[3]=0xE7; pipeAddrVar[2]=0xE7; pipeAddrVar[1]=0xE7; pipeAddrVar[0]=0xE7; 
 800142c:	23e7      	movs	r3, #231	; 0xe7
 800142e:	733b      	strb	r3, [r7, #12]
 8001430:	23e7      	movs	r3, #231	; 0xe7
 8001432:	72fb      	strb	r3, [r7, #11]
 8001434:	23e7      	movs	r3, #231	; 0xe7
 8001436:	72bb      	strb	r3, [r7, #10]
 8001438:	23e7      	movs	r3, #231	; 0xe7
 800143a:	727b      	strb	r3, [r7, #9]
 800143c:	23e7      	movs	r3, #231	; 0xe7
 800143e:	723b      	strb	r3, [r7, #8]
	NRF24_write_registerN(0x10, pipeAddrVar, 5);
 8001440:	f107 0308 	add.w	r3, r7, #8
 8001444:	2205      	movs	r2, #5
 8001446:	4619      	mov	r1, r3
 8001448:	2010      	movs	r0, #16
 800144a:	f7ff ff09 	bl	8001260 <NRF24_write_registerN>
	NRF24_write_register(0x11, 0);
 800144e:	2100      	movs	r1, #0
 8001450:	2011      	movs	r0, #17
 8001452:	f7ff fee3 	bl	800121c <NRF24_write_register>
	NRF24_write_register(0x12, 0);
 8001456:	2100      	movs	r1, #0
 8001458:	2012      	movs	r0, #18
 800145a:	f7ff fedf 	bl	800121c <NRF24_write_register>
	NRF24_write_register(0x13, 0);
 800145e:	2100      	movs	r1, #0
 8001460:	2013      	movs	r0, #19
 8001462:	f7ff fedb 	bl	800121c <NRF24_write_register>
	NRF24_write_register(0x14, 0);
 8001466:	2100      	movs	r1, #0
 8001468:	2014      	movs	r0, #20
 800146a:	f7ff fed7 	bl	800121c <NRF24_write_register>
	NRF24_write_register(0x15, 0);
 800146e:	2100      	movs	r1, #0
 8001470:	2015      	movs	r0, #21
 8001472:	f7ff fed3 	bl	800121c <NRF24_write_register>
	NRF24_write_register(0x16, 0);
 8001476:	2100      	movs	r1, #0
 8001478:	2016      	movs	r0, #22
 800147a:	f7ff fecf 	bl	800121c <NRF24_write_register>
	
	NRF24_ACTIVATE_cmd();
 800147e:	f000 fa89 	bl	8001994 <NRF24_ACTIVATE_cmd>
	NRF24_write_register(0x1c, 0);
 8001482:	2100      	movs	r1, #0
 8001484:	201c      	movs	r0, #28
 8001486:	f7ff fec9 	bl	800121c <NRF24_write_register>
	NRF24_write_register(0x1d, 0);
 800148a:	2100      	movs	r1, #0
 800148c:	201d      	movs	r0, #29
 800148e:	f7ff fec5 	bl	800121c <NRF24_write_register>
	printRadioSettings();
 8001492:	f000 fa99 	bl	80019c8 <printRadioSettings>
	//Initialise retries 15 and delay 1250 usec
	NRF24_setRetries(15, 15);
 8001496:	210f      	movs	r1, #15
 8001498:	200f      	movs	r0, #15
 800149a:	f000 f8ad 	bl	80015f8 <NRF24_setRetries>
	//Initialise PA level to max (0dB)
	NRF24_setPALevel(RF24_PA_0dB);
 800149e:	2003      	movs	r0, #3
 80014a0:	f000 f927 	bl	80016f2 <NRF24_setPALevel>
	//Initialise data rate to 1Mbps
	NRF24_setDataRate(RF24_2MBPS);
 80014a4:	2001      	movs	r0, #1
 80014a6:	f000 f95d 	bl	8001764 <NRF24_setDataRate>
	//Initalise CRC length to 16-bit (2 bytes)
	NRF24_setCRCLength(RF24_CRC_16);
 80014aa:	2002      	movs	r0, #2
 80014ac:	f000 f9a0 	bl	80017f0 <NRF24_setCRCLength>
	//Disable dynamic payload
	NRF24_disableDynamicPayloads();
 80014b0:	f000 f8f2 	bl	8001698 <NRF24_disableDynamicPayloads>
	//Set payload size
	NRF24_setPayloadSize(32);
 80014b4:	2020      	movs	r0, #32
 80014b6:	f000 f8cf 	bl	8001658 <NRF24_setPayloadSize>
	
	//Reset status register
	NRF24_resetStatus();
 80014ba:	f000 fa62 	bl	8001982 <NRF24_resetStatus>
	//Initialise channel to 76
	NRF24_setChannel(76);
 80014be:	204c      	movs	r0, #76	; 0x4c
 80014c0:	f000 f8b5 	bl	800162e <NRF24_setChannel>
	//Flush buffers
	NRF24_flush_tx();
 80014c4:	f7ff ff16 	bl	80012f4 <NRF24_flush_tx>
	NRF24_flush_rx();
 80014c8:	f7ff ff1c 	bl	8001304 <NRF24_flush_rx>
	
	NRF24_powerDown();
 80014cc:	f000 f9b8 	bl	8001840 <NRF24_powerDown>
	
}
 80014d0:	bf00      	nop
 80014d2:	3710      	adds	r7, #16
 80014d4:	46bd      	mov	sp, r7
 80014d6:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80014da:	b002      	add	sp, #8
 80014dc:	4770      	bx	lr
 80014de:	bf00      	nop
 80014e0:	2400038c 	.word	0x2400038c
 80014e4:	24000384 	.word	0x24000384
 80014e8:	24000388 	.word	0x24000388
 80014ec:	2400038a 	.word	0x2400038a

080014f0 <NRF24_stopListening>:
	//Wait for 130 uSec for the radio to come on
	NRF24_DelayMicroSeconds(150);
}
//14. Stop listening (essential before any write operation)
void NRF24_stopListening(void)
{
 80014f0:	b580      	push	{r7, lr}
 80014f2:	af00      	add	r7, sp, #0
	NRF24_ce(0);
 80014f4:	2000      	movs	r0, #0
 80014f6:	f7ff fe21 	bl	800113c <NRF24_ce>
	NRF24_flush_tx();
 80014fa:	f7ff fefb 	bl	80012f4 <NRF24_flush_tx>
	NRF24_flush_rx();
 80014fe:	f7ff ff01 	bl	8001304 <NRF24_flush_rx>
}
 8001502:	bf00      	nop
 8001504:	bd80      	pop	{r7, pc}
	...

08001508 <NRF24_write>:
//15. Write(Transmit data), returns true if successfully sent
bool NRF24_write( const void* buf, uint8_t len )
{
 8001508:	b580      	push	{r7, lr}
 800150a:	b086      	sub	sp, #24
 800150c:	af00      	add	r7, sp, #0
 800150e:	6078      	str	r0, [r7, #4]
 8001510:	460b      	mov	r3, r1
 8001512:	70fb      	strb	r3, [r7, #3]
	bool retStatus;
	//Start writing
	NRF24_resetStatus();
 8001514:	f000 fa35 	bl	8001982 <NRF24_resetStatus>
	NRF24_startWrite(buf,len);
 8001518:	78fb      	ldrb	r3, [r7, #3]
 800151a:	4619      	mov	r1, r3
 800151c:	6878      	ldr	r0, [r7, #4]
 800151e:	f000 f9ce 	bl	80018be <NRF24_startWrite>
	//Data monitor
  uint8_t observe_tx;
  uint8_t status;
  uint32_t sent_at = HAL_GetTick();
 8001522:	f003 fc47 	bl	8004db4 <HAL_GetTick>
 8001526:	6178      	str	r0, [r7, #20]
	const uint32_t timeout = 10; //ms to wait for timeout
 8001528:	230a      	movs	r3, #10
 800152a:	613b      	str	r3, [r7, #16]
	do
  {
    NRF24_read_registerN(REG_OBSERVE_TX,&observe_tx,1);
 800152c:	f107 030d 	add.w	r3, r7, #13
 8001530:	2201      	movs	r2, #1
 8001532:	4619      	mov	r1, r3
 8001534:	2008      	movs	r0, #8
 8001536:	f7ff fe49 	bl	80011cc <NRF24_read_registerN>
		//Get status register
		status = NRF24_get_status();
 800153a:	f7ff feeb 	bl	8001314 <NRF24_get_status>
 800153e:	4603      	mov	r3, r0
 8001540:	73fb      	strb	r3, [r7, #15]
  }
  while( ! ( status & ( _BV(BIT_TX_DS) | _BV(BIT_MAX_RT) ) ) && ( HAL_GetTick() - sent_at < timeout ) );
 8001542:	7bfb      	ldrb	r3, [r7, #15]
 8001544:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8001548:	2b00      	cmp	r3, #0
 800154a:	d107      	bne.n	800155c <NRF24_write+0x54>
 800154c:	f003 fc32 	bl	8004db4 <HAL_GetTick>
 8001550:	4602      	mov	r2, r0
 8001552:	697b      	ldr	r3, [r7, #20]
 8001554:	1ad3      	subs	r3, r2, r3
 8001556:	693a      	ldr	r2, [r7, #16]
 8001558:	429a      	cmp	r2, r3
 800155a:	d8e7      	bhi.n	800152c <NRF24_write+0x24>
	
//	printConfigReg();
//	printStatusReg();
	
	bool tx_ok, tx_fail;
  NRF24_whatHappened(&tx_ok,&tx_fail, &ack_payload_available);
 800155c:	f107 010b 	add.w	r1, r7, #11
 8001560:	f107 030c 	add.w	r3, r7, #12
 8001564:	4a0c      	ldr	r2, [pc, #48]	; (8001598 <NRF24_write+0x90>)
 8001566:	4618      	mov	r0, r3
 8001568:	f000 f9d8 	bl	800191c <NRF24_whatHappened>
	retStatus = tx_ok;
 800156c:	7b3b      	ldrb	r3, [r7, #12]
 800156e:	73bb      	strb	r3, [r7, #14]
	if ( ack_payload_available )
 8001570:	4b09      	ldr	r3, [pc, #36]	; (8001598 <NRF24_write+0x90>)
 8001572:	781b      	ldrb	r3, [r3, #0]
 8001574:	2b00      	cmp	r3, #0
 8001576:	d005      	beq.n	8001584 <NRF24_write+0x7c>
  {
    ack_payload_length = NRF24_getDynamicPayloadSize();
 8001578:	f000 f886 	bl	8001688 <NRF24_getDynamicPayloadSize>
 800157c:	4603      	mov	r3, r0
 800157e:	461a      	mov	r2, r3
 8001580:	4b06      	ldr	r3, [pc, #24]	; (800159c <NRF24_write+0x94>)
 8001582:	701a      	strb	r2, [r3, #0]
	}
	
	//Power down
	NRF24_available();
 8001584:	f000 f80c 	bl	80015a0 <NRF24_available>
	NRF24_flush_tx();
 8001588:	f7ff feb4 	bl	80012f4 <NRF24_flush_tx>
	return retStatus;
 800158c:	7bbb      	ldrb	r3, [r7, #14]
}
 800158e:	4618      	mov	r0, r3
 8001590:	3718      	adds	r7, #24
 8001592:	46bd      	mov	sp, r7
 8001594:	bd80      	pop	{r7, pc}
 8001596:	bf00      	nop
 8001598:	2400037c 	.word	0x2400037c
 800159c:	2400037d 	.word	0x2400037d

080015a0 <NRF24_available>:
//16. Check for available data to read
bool NRF24_available(void)
{
 80015a0:	b580      	push	{r7, lr}
 80015a2:	af00      	add	r7, sp, #0
	return NRF24_availablePipe(NULL);
 80015a4:	2000      	movs	r0, #0
 80015a6:	f000 f95a 	bl	800185e <NRF24_availablePipe>
 80015aa:	4603      	mov	r3, r0
}
 80015ac:	4618      	mov	r0, r3
 80015ae:	bd80      	pop	{r7, pc}

080015b0 <NRF24_openWritingPipe>:
	NRF24_getDynamicPayloadSize();
	return rxStatus;
}
//18. Open Tx pipe for writing (Cannot perform this while Listenning, has to call NRF24_stopListening)
void NRF24_openWritingPipe(uint64_t address)
{
 80015b0:	b580      	push	{r7, lr}
 80015b2:	b084      	sub	sp, #16
 80015b4:	af00      	add	r7, sp, #0
 80015b6:	e9c7 0100 	strd	r0, r1, [r7]
	NRF24_write_registerN(REG_RX_ADDR_P0, (uint8_t *)(&address), 5);
 80015ba:	463b      	mov	r3, r7
 80015bc:	2205      	movs	r2, #5
 80015be:	4619      	mov	r1, r3
 80015c0:	200a      	movs	r0, #10
 80015c2:	f7ff fe4d 	bl	8001260 <NRF24_write_registerN>
  NRF24_write_registerN(REG_TX_ADDR, (uint8_t *)(&address), 5);
 80015c6:	463b      	mov	r3, r7
 80015c8:	2205      	movs	r2, #5
 80015ca:	4619      	mov	r1, r3
 80015cc:	2010      	movs	r0, #16
 80015ce:	f7ff fe47 	bl	8001260 <NRF24_write_registerN>
	
	const uint8_t max_payload_size = 32;
 80015d2:	2320      	movs	r3, #32
 80015d4:	73fb      	strb	r3, [r7, #15]
  NRF24_write_register(REG_RX_PW_P0,MIN(payload_size,max_payload_size));
 80015d6:	4b07      	ldr	r3, [pc, #28]	; (80015f4 <NRF24_openWritingPipe+0x44>)
 80015d8:	781b      	ldrb	r3, [r3, #0]
 80015da:	7bfa      	ldrb	r2, [r7, #15]
 80015dc:	4293      	cmp	r3, r2
 80015de:	bf28      	it	cs
 80015e0:	4613      	movcs	r3, r2
 80015e2:	b2db      	uxtb	r3, r3
 80015e4:	4619      	mov	r1, r3
 80015e6:	2011      	movs	r0, #17
 80015e8:	f7ff fe18 	bl	800121c <NRF24_write_register>
}
 80015ec:	bf00      	nop
 80015ee:	3710      	adds	r7, #16
 80015f0:	46bd      	mov	sp, r7
 80015f2:	bd80      	pop	{r7, pc}
 80015f4:	2400037e 	.word	0x2400037e

080015f8 <NRF24_setRetries>:
	}
	
}
//20 set transmit retries (rf24_Retries_e) and delay
void NRF24_setRetries(uint8_t delay, uint8_t count)
{
 80015f8:	b580      	push	{r7, lr}
 80015fa:	b082      	sub	sp, #8
 80015fc:	af00      	add	r7, sp, #0
 80015fe:	4603      	mov	r3, r0
 8001600:	460a      	mov	r2, r1
 8001602:	71fb      	strb	r3, [r7, #7]
 8001604:	4613      	mov	r3, r2
 8001606:	71bb      	strb	r3, [r7, #6]
	NRF24_write_register(REG_SETUP_RETR,(delay&0xf)<<BIT_ARD | (count&0xf)<<BIT_ARC);
 8001608:	79fb      	ldrb	r3, [r7, #7]
 800160a:	011b      	lsls	r3, r3, #4
 800160c:	b25a      	sxtb	r2, r3
 800160e:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8001612:	f003 030f 	and.w	r3, r3, #15
 8001616:	b25b      	sxtb	r3, r3
 8001618:	4313      	orrs	r3, r2
 800161a:	b25b      	sxtb	r3, r3
 800161c:	b2db      	uxtb	r3, r3
 800161e:	4619      	mov	r1, r3
 8001620:	2004      	movs	r0, #4
 8001622:	f7ff fdfb 	bl	800121c <NRF24_write_register>
}
 8001626:	bf00      	nop
 8001628:	3708      	adds	r7, #8
 800162a:	46bd      	mov	sp, r7
 800162c:	bd80      	pop	{r7, pc}

0800162e <NRF24_setChannel>:

//21. Set RF channel frequency
void NRF24_setChannel(uint8_t channel)
{
 800162e:	b580      	push	{r7, lr}
 8001630:	b084      	sub	sp, #16
 8001632:	af00      	add	r7, sp, #0
 8001634:	4603      	mov	r3, r0
 8001636:	71fb      	strb	r3, [r7, #7]
	const uint8_t max_channel = 127;
 8001638:	237f      	movs	r3, #127	; 0x7f
 800163a:	73fb      	strb	r3, [r7, #15]
  NRF24_write_register(REG_RF_CH,MIN(channel,max_channel));
 800163c:	7bfa      	ldrb	r2, [r7, #15]
 800163e:	79fb      	ldrb	r3, [r7, #7]
 8001640:	4293      	cmp	r3, r2
 8001642:	bf28      	it	cs
 8001644:	4613      	movcs	r3, r2
 8001646:	b2db      	uxtb	r3, r3
 8001648:	4619      	mov	r1, r3
 800164a:	2005      	movs	r0, #5
 800164c:	f7ff fde6 	bl	800121c <NRF24_write_register>
}
 8001650:	bf00      	nop
 8001652:	3710      	adds	r7, #16
 8001654:	46bd      	mov	sp, r7
 8001656:	bd80      	pop	{r7, pc}

08001658 <NRF24_setPayloadSize>:
//22. Set payload size
void NRF24_setPayloadSize(uint8_t size)
{
 8001658:	b480      	push	{r7}
 800165a:	b085      	sub	sp, #20
 800165c:	af00      	add	r7, sp, #0
 800165e:	4603      	mov	r3, r0
 8001660:	71fb      	strb	r3, [r7, #7]
	const uint8_t max_payload_size = 32;
 8001662:	2320      	movs	r3, #32
 8001664:	73fb      	strb	r3, [r7, #15]
  payload_size = MIN(size,max_payload_size);
 8001666:	7bfa      	ldrb	r2, [r7, #15]
 8001668:	79fb      	ldrb	r3, [r7, #7]
 800166a:	4293      	cmp	r3, r2
 800166c:	bf28      	it	cs
 800166e:	4613      	movcs	r3, r2
 8001670:	b2da      	uxtb	r2, r3
 8001672:	4b04      	ldr	r3, [pc, #16]	; (8001684 <NRF24_setPayloadSize+0x2c>)
 8001674:	701a      	strb	r2, [r3, #0]
}
 8001676:	bf00      	nop
 8001678:	3714      	adds	r7, #20
 800167a:	46bd      	mov	sp, r7
 800167c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001680:	4770      	bx	lr
 8001682:	bf00      	nop
 8001684:	2400037e 	.word	0x2400037e

08001688 <NRF24_getDynamicPayloadSize>:
{
	return payload_size;
}
//24. Get dynamic payload size, of latest packet received
uint8_t NRF24_getDynamicPayloadSize(void)
{
 8001688:	b580      	push	{r7, lr}
 800168a:	af00      	add	r7, sp, #0
	return NRF24_read_register(CMD_R_RX_PL_WID);
 800168c:	2060      	movs	r0, #96	; 0x60
 800168e:	f7ff fd75 	bl	800117c <NRF24_read_register>
 8001692:	4603      	mov	r3, r0
}
 8001694:	4618      	mov	r0, r3
 8001696:	bd80      	pop	{r7, pc}

08001698 <NRF24_disableDynamicPayloads>:
	NRF24_write_register(REG_DYNPD,NRF24_read_register(REG_DYNPD) | _BV(BIT_DPL_P5) | _BV(BIT_DPL_P4) | _BV(BIT_DPL_P3) | _BV(BIT_DPL_P2) | _BV(BIT_DPL_P1) | _BV(BIT_DPL_P0));
  dynamic_payloads_enabled = true;
	
}
void NRF24_disableDynamicPayloads(void)
{
 8001698:	b580      	push	{r7, lr}
 800169a:	af00      	add	r7, sp, #0
	NRF24_write_register(REG_FEATURE,NRF24_read_register(REG_FEATURE) &  ~(_BV(BIT_EN_DPL)) );
 800169c:	201d      	movs	r0, #29
 800169e:	f7ff fd6d 	bl	800117c <NRF24_read_register>
 80016a2:	4603      	mov	r3, r0
 80016a4:	f023 0304 	bic.w	r3, r3, #4
 80016a8:	b2db      	uxtb	r3, r3
 80016aa:	4619      	mov	r1, r3
 80016ac:	201d      	movs	r0, #29
 80016ae:	f7ff fdb5 	bl	800121c <NRF24_write_register>
	//Disable for all pipes 
	NRF24_write_register(REG_DYNPD,0);
 80016b2:	2100      	movs	r1, #0
 80016b4:	201c      	movs	r0, #28
 80016b6:	f7ff fdb1 	bl	800121c <NRF24_write_register>
	dynamic_payloads_enabled = false;
 80016ba:	4b02      	ldr	r3, [pc, #8]	; (80016c4 <NRF24_disableDynamicPayloads+0x2c>)
 80016bc:	2200      	movs	r2, #0
 80016be:	701a      	strb	r2, [r3, #0]
}
 80016c0:	bf00      	nop
 80016c2:	bd80      	pop	{r7, pc}
 80016c4:	2400037f 	.word	0x2400037f

080016c8 <NRF24_setAutoAck>:
{
	return p_variant;
}
//28. Set Auto Ack for all
void NRF24_setAutoAck(bool enable)
{
 80016c8:	b580      	push	{r7, lr}
 80016ca:	b082      	sub	sp, #8
 80016cc:	af00      	add	r7, sp, #0
 80016ce:	4603      	mov	r3, r0
 80016d0:	71fb      	strb	r3, [r7, #7]
	if ( enable )
 80016d2:	79fb      	ldrb	r3, [r7, #7]
 80016d4:	2b00      	cmp	r3, #0
 80016d6:	d004      	beq.n	80016e2 <NRF24_setAutoAck+0x1a>
    NRF24_write_register(REG_EN_AA, 0x3F);
 80016d8:	213f      	movs	r1, #63	; 0x3f
 80016da:	2001      	movs	r0, #1
 80016dc:	f7ff fd9e 	bl	800121c <NRF24_write_register>
  else
    NRF24_write_register(REG_EN_AA, 0x00);
}
 80016e0:	e003      	b.n	80016ea <NRF24_setAutoAck+0x22>
    NRF24_write_register(REG_EN_AA, 0x00);
 80016e2:	2100      	movs	r1, #0
 80016e4:	2001      	movs	r0, #1
 80016e6:	f7ff fd99 	bl	800121c <NRF24_write_register>
}
 80016ea:	bf00      	nop
 80016ec:	3708      	adds	r7, #8
 80016ee:	46bd      	mov	sp, r7
 80016f0:	bd80      	pop	{r7, pc}

080016f2 <NRF24_setPALevel>:
    NRF24_write_register( REG_EN_AA, en_aa ) ;
  }
}
//30. Set transmit power level
void NRF24_setPALevel( rf24_pa_dbm_e level )
{
 80016f2:	b580      	push	{r7, lr}
 80016f4:	b084      	sub	sp, #16
 80016f6:	af00      	add	r7, sp, #0
 80016f8:	4603      	mov	r3, r0
 80016fa:	71fb      	strb	r3, [r7, #7]
	uint8_t setup = NRF24_read_register(REG_RF_SETUP) ;
 80016fc:	2006      	movs	r0, #6
 80016fe:	f7ff fd3d 	bl	800117c <NRF24_read_register>
 8001702:	4603      	mov	r3, r0
 8001704:	73fb      	strb	r3, [r7, #15]
  setup &= ~(_BV(RF_PWR_LOW) | _BV(RF_PWR_HIGH)) ;
 8001706:	7bfb      	ldrb	r3, [r7, #15]
 8001708:	f023 0306 	bic.w	r3, r3, #6
 800170c:	73fb      	strb	r3, [r7, #15]

  // switch uses RAM (evil!)
  if ( level == RF24_PA_0dB)
 800170e:	79fb      	ldrb	r3, [r7, #7]
 8001710:	2b03      	cmp	r3, #3
 8001712:	d104      	bne.n	800171e <NRF24_setPALevel+0x2c>
  {
    setup |= (_BV(RF_PWR_LOW) | _BV(RF_PWR_HIGH)) ;
 8001714:	7bfb      	ldrb	r3, [r7, #15]
 8001716:	f043 0306 	orr.w	r3, r3, #6
 800171a:	73fb      	strb	r3, [r7, #15]
 800171c:	e019      	b.n	8001752 <NRF24_setPALevel+0x60>
  }
  else if ( level == RF24_PA_m6dB )
 800171e:	79fb      	ldrb	r3, [r7, #7]
 8001720:	2b02      	cmp	r3, #2
 8001722:	d104      	bne.n	800172e <NRF24_setPALevel+0x3c>
  {
    setup |= _BV(RF_PWR_HIGH) ;
 8001724:	7bfb      	ldrb	r3, [r7, #15]
 8001726:	f043 0304 	orr.w	r3, r3, #4
 800172a:	73fb      	strb	r3, [r7, #15]
 800172c:	e011      	b.n	8001752 <NRF24_setPALevel+0x60>
  }
  else if ( level == RF24_PA_m12dB )
 800172e:	79fb      	ldrb	r3, [r7, #7]
 8001730:	2b01      	cmp	r3, #1
 8001732:	d104      	bne.n	800173e <NRF24_setPALevel+0x4c>
  {
    setup |= _BV(RF_PWR_LOW);
 8001734:	7bfb      	ldrb	r3, [r7, #15]
 8001736:	f043 0302 	orr.w	r3, r3, #2
 800173a:	73fb      	strb	r3, [r7, #15]
 800173c:	e009      	b.n	8001752 <NRF24_setPALevel+0x60>
  }
  else if ( level == RF24_PA_m18dB )
 800173e:	79fb      	ldrb	r3, [r7, #7]
 8001740:	2b00      	cmp	r3, #0
 8001742:	d006      	beq.n	8001752 <NRF24_setPALevel+0x60>
  {
    // nothing
  }
  else if ( level == RF24_PA_ERROR )
 8001744:	79fb      	ldrb	r3, [r7, #7]
 8001746:	2b04      	cmp	r3, #4
 8001748:	d103      	bne.n	8001752 <NRF24_setPALevel+0x60>
  {
    // On error, go to maximum PA
    setup |= (_BV(RF_PWR_LOW) | _BV(RF_PWR_HIGH)) ;
 800174a:	7bfb      	ldrb	r3, [r7, #15]
 800174c:	f043 0306 	orr.w	r3, r3, #6
 8001750:	73fb      	strb	r3, [r7, #15]
  }

  NRF24_write_register( REG_RF_SETUP, setup ) ;
 8001752:	7bfb      	ldrb	r3, [r7, #15]
 8001754:	4619      	mov	r1, r3
 8001756:	2006      	movs	r0, #6
 8001758:	f7ff fd60 	bl	800121c <NRF24_write_register>
}
 800175c:	bf00      	nop
 800175e:	3710      	adds	r7, #16
 8001760:	46bd      	mov	sp, r7
 8001762:	bd80      	pop	{r7, pc}

08001764 <NRF24_setDataRate>:

  return result ;
}
//32. Set data rate (250 Kbps, 1Mbps, 2Mbps)
bool NRF24_setDataRate(rf24_datarate_e speed)
{
 8001764:	b580      	push	{r7, lr}
 8001766:	b084      	sub	sp, #16
 8001768:	af00      	add	r7, sp, #0
 800176a:	4603      	mov	r3, r0
 800176c:	71fb      	strb	r3, [r7, #7]
	bool result = false;
 800176e:	2300      	movs	r3, #0
 8001770:	73fb      	strb	r3, [r7, #15]
  uint8_t setup = NRF24_read_register(REG_RF_SETUP) ;
 8001772:	2006      	movs	r0, #6
 8001774:	f7ff fd02 	bl	800117c <NRF24_read_register>
 8001778:	4603      	mov	r3, r0
 800177a:	73bb      	strb	r3, [r7, #14]

  // HIGH and LOW '00' is 1Mbs - our default
  wide_band = false ;
 800177c:	4b1b      	ldr	r3, [pc, #108]	; (80017ec <NRF24_setDataRate+0x88>)
 800177e:	2200      	movs	r2, #0
 8001780:	701a      	strb	r2, [r3, #0]
  setup &= ~(_BV(RF_DR_LOW) | _BV(RF_DR_HIGH)) ;
 8001782:	7bbb      	ldrb	r3, [r7, #14]
 8001784:	f023 0328 	bic.w	r3, r3, #40	; 0x28
 8001788:	73bb      	strb	r3, [r7, #14]
  if( speed == RF24_250KBPS )
 800178a:	79fb      	ldrb	r3, [r7, #7]
 800178c:	2b02      	cmp	r3, #2
 800178e:	d107      	bne.n	80017a0 <NRF24_setDataRate+0x3c>
  {
    // Must set the RF_DR_LOW to 1; RF_DR_HIGH (used to be RF_DR) is already 0
    // Making it '10'.
    wide_band = false ;
 8001790:	4b16      	ldr	r3, [pc, #88]	; (80017ec <NRF24_setDataRate+0x88>)
 8001792:	2200      	movs	r2, #0
 8001794:	701a      	strb	r2, [r3, #0]
    setup |= _BV( RF_DR_LOW ) ;
 8001796:	7bbb      	ldrb	r3, [r7, #14]
 8001798:	f043 0320 	orr.w	r3, r3, #32
 800179c:	73bb      	strb	r3, [r7, #14]
 800179e:	e00d      	b.n	80017bc <NRF24_setDataRate+0x58>
  }
  else
  {
    // Set 2Mbs, RF_DR (RF_DR_HIGH) is set 1
    // Making it '01'
    if ( speed == RF24_2MBPS )
 80017a0:	79fb      	ldrb	r3, [r7, #7]
 80017a2:	2b01      	cmp	r3, #1
 80017a4:	d107      	bne.n	80017b6 <NRF24_setDataRate+0x52>
    {
      wide_band = true ;
 80017a6:	4b11      	ldr	r3, [pc, #68]	; (80017ec <NRF24_setDataRate+0x88>)
 80017a8:	2201      	movs	r2, #1
 80017aa:	701a      	strb	r2, [r3, #0]
      setup |= _BV(RF_DR_HIGH);
 80017ac:	7bbb      	ldrb	r3, [r7, #14]
 80017ae:	f043 0308 	orr.w	r3, r3, #8
 80017b2:	73bb      	strb	r3, [r7, #14]
 80017b4:	e002      	b.n	80017bc <NRF24_setDataRate+0x58>
    }
    else
    {
      // 1Mbs
      wide_band = false ;
 80017b6:	4b0d      	ldr	r3, [pc, #52]	; (80017ec <NRF24_setDataRate+0x88>)
 80017b8:	2200      	movs	r2, #0
 80017ba:	701a      	strb	r2, [r3, #0]
    }
  }
  NRF24_write_register(REG_RF_SETUP,setup);
 80017bc:	7bbb      	ldrb	r3, [r7, #14]
 80017be:	4619      	mov	r1, r3
 80017c0:	2006      	movs	r0, #6
 80017c2:	f7ff fd2b 	bl	800121c <NRF24_write_register>

  // Verify our result
  if ( NRF24_read_register(REG_RF_SETUP) == setup )
 80017c6:	2006      	movs	r0, #6
 80017c8:	f7ff fcd8 	bl	800117c <NRF24_read_register>
 80017cc:	4603      	mov	r3, r0
 80017ce:	461a      	mov	r2, r3
 80017d0:	7bbb      	ldrb	r3, [r7, #14]
 80017d2:	4293      	cmp	r3, r2
 80017d4:	d102      	bne.n	80017dc <NRF24_setDataRate+0x78>
  {
    result = true;
 80017d6:	2301      	movs	r3, #1
 80017d8:	73fb      	strb	r3, [r7, #15]
 80017da:	e002      	b.n	80017e2 <NRF24_setDataRate+0x7e>
  }
  else
  {
    wide_band = false;
 80017dc:	4b03      	ldr	r3, [pc, #12]	; (80017ec <NRF24_setDataRate+0x88>)
 80017de:	2200      	movs	r2, #0
 80017e0:	701a      	strb	r2, [r3, #0]
  }

  return result;
 80017e2:	7bfb      	ldrb	r3, [r7, #15]
}
 80017e4:	4618      	mov	r0, r3
 80017e6:	3710      	adds	r7, #16
 80017e8:	46bd      	mov	sp, r7
 80017ea:	bd80      	pop	{r7, pc}
 80017ec:	24000380 	.word	0x24000380

080017f0 <NRF24_setCRCLength>:
  }
  return result ;
}
//34. Set crc length (disable, 8-bits or 16-bits)
void NRF24_setCRCLength(rf24_crclength_e length)
{
 80017f0:	b580      	push	{r7, lr}
 80017f2:	b084      	sub	sp, #16
 80017f4:	af00      	add	r7, sp, #0
 80017f6:	4603      	mov	r3, r0
 80017f8:	71fb      	strb	r3, [r7, #7]
	uint8_t config = NRF24_read_register(REG_CONFIG) & ~( _BV(BIT_CRCO) | _BV(BIT_EN_CRC)) ;
 80017fa:	2000      	movs	r0, #0
 80017fc:	f7ff fcbe 	bl	800117c <NRF24_read_register>
 8001800:	4603      	mov	r3, r0
 8001802:	f023 030c 	bic.w	r3, r3, #12
 8001806:	73fb      	strb	r3, [r7, #15]
  
  // switch uses RAM
  if ( length == RF24_CRC_DISABLED )
 8001808:	79fb      	ldrb	r3, [r7, #7]
 800180a:	2b00      	cmp	r3, #0
 800180c:	d00f      	beq.n	800182e <NRF24_setCRCLength+0x3e>
  {
    // Do nothing, we turned it off above. 
  }
  else if ( length == RF24_CRC_8 )
 800180e:	79fb      	ldrb	r3, [r7, #7]
 8001810:	2b01      	cmp	r3, #1
 8001812:	d104      	bne.n	800181e <NRF24_setCRCLength+0x2e>
  {
    config |= _BV(BIT_EN_CRC);
 8001814:	7bfb      	ldrb	r3, [r7, #15]
 8001816:	f043 0308 	orr.w	r3, r3, #8
 800181a:	73fb      	strb	r3, [r7, #15]
 800181c:	e007      	b.n	800182e <NRF24_setCRCLength+0x3e>
  }
  else
  {
    config |= _BV(BIT_EN_CRC);
 800181e:	7bfb      	ldrb	r3, [r7, #15]
 8001820:	f043 0308 	orr.w	r3, r3, #8
 8001824:	73fb      	strb	r3, [r7, #15]
    config |= _BV( BIT_CRCO );
 8001826:	7bfb      	ldrb	r3, [r7, #15]
 8001828:	f043 0304 	orr.w	r3, r3, #4
 800182c:	73fb      	strb	r3, [r7, #15]
  }
  NRF24_write_register( REG_CONFIG, config );
 800182e:	7bfb      	ldrb	r3, [r7, #15]
 8001830:	4619      	mov	r1, r3
 8001832:	2000      	movs	r0, #0
 8001834:	f7ff fcf2 	bl	800121c <NRF24_write_register>
}
 8001838:	bf00      	nop
 800183a:	3710      	adds	r7, #16
 800183c:	46bd      	mov	sp, r7
 800183e:	bd80      	pop	{r7, pc}

08001840 <NRF24_powerDown>:
{
	NRF24_write_register(REG_CONFIG,NRF24_read_register(REG_CONFIG) | _BV(BIT_PWR_UP));
}
//38. power down
void NRF24_powerDown(void)
{
 8001840:	b580      	push	{r7, lr}
 8001842:	af00      	add	r7, sp, #0
	NRF24_write_register(REG_CONFIG,NRF24_read_register(REG_CONFIG) & ~_BV(BIT_PWR_UP));
 8001844:	2000      	movs	r0, #0
 8001846:	f7ff fc99 	bl	800117c <NRF24_read_register>
 800184a:	4603      	mov	r3, r0
 800184c:	f023 0302 	bic.w	r3, r3, #2
 8001850:	b2db      	uxtb	r3, r3
 8001852:	4619      	mov	r1, r3
 8001854:	2000      	movs	r0, #0
 8001856:	f7ff fce1 	bl	800121c <NRF24_write_register>
}
 800185a:	bf00      	nop
 800185c:	bd80      	pop	{r7, pc}

0800185e <NRF24_availablePipe>:
//39. Check if data are available and on which pipe (Use this for multiple rx pipes)
bool NRF24_availablePipe(uint8_t* pipe_num)
{
 800185e:	b580      	push	{r7, lr}
 8001860:	b084      	sub	sp, #16
 8001862:	af00      	add	r7, sp, #0
 8001864:	6078      	str	r0, [r7, #4]
	uint8_t status = NRF24_get_status();
 8001866:	f7ff fd55 	bl	8001314 <NRF24_get_status>
 800186a:	4603      	mov	r3, r0
 800186c:	73fb      	strb	r3, [r7, #15]

  bool result = ( status & _BV(BIT_RX_DR) );
 800186e:	7bfb      	ldrb	r3, [r7, #15]
 8001870:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001874:	2b00      	cmp	r3, #0
 8001876:	bf14      	ite	ne
 8001878:	2301      	movne	r3, #1
 800187a:	2300      	moveq	r3, #0
 800187c:	73bb      	strb	r3, [r7, #14]

  if (result)
 800187e:	7bbb      	ldrb	r3, [r7, #14]
 8001880:	2b00      	cmp	r3, #0
 8001882:	d017      	beq.n	80018b4 <NRF24_availablePipe+0x56>
  {
    // If the caller wants the pipe number, include that
    if ( pipe_num )
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	2b00      	cmp	r3, #0
 8001888:	d007      	beq.n	800189a <NRF24_availablePipe+0x3c>
      *pipe_num = ( status >> BIT_RX_P_NO ) & 0x7;
 800188a:	7bfb      	ldrb	r3, [r7, #15]
 800188c:	085b      	lsrs	r3, r3, #1
 800188e:	b2db      	uxtb	r3, r3
 8001890:	f003 0307 	and.w	r3, r3, #7
 8001894:	b2da      	uxtb	r2, r3
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	701a      	strb	r2, [r3, #0]

    // Clear the status bit
    NRF24_write_register(REG_STATUS,_BV(BIT_RX_DR) );
 800189a:	2140      	movs	r1, #64	; 0x40
 800189c:	2007      	movs	r0, #7
 800189e:	f7ff fcbd 	bl	800121c <NRF24_write_register>

    // Handle ack payload receipt
    if ( status & _BV(BIT_TX_DS) )
 80018a2:	7bfb      	ldrb	r3, [r7, #15]
 80018a4:	f003 0320 	and.w	r3, r3, #32
 80018a8:	2b00      	cmp	r3, #0
 80018aa:	d003      	beq.n	80018b4 <NRF24_availablePipe+0x56>
    {
      NRF24_write_register(REG_STATUS,_BV(BIT_TX_DS));
 80018ac:	2120      	movs	r1, #32
 80018ae:	2007      	movs	r0, #7
 80018b0:	f7ff fcb4 	bl	800121c <NRF24_write_register>
    }
  }
  return result;
 80018b4:	7bbb      	ldrb	r3, [r7, #14]
}
 80018b6:	4618      	mov	r0, r3
 80018b8:	3710      	adds	r7, #16
 80018ba:	46bd      	mov	sp, r7
 80018bc:	bd80      	pop	{r7, pc}

080018be <NRF24_startWrite>:
//40. Start write (for IRQ mode)
void NRF24_startWrite( const void* buf, uint8_t len )
{
 80018be:	b580      	push	{r7, lr}
 80018c0:	b082      	sub	sp, #8
 80018c2:	af00      	add	r7, sp, #0
 80018c4:	6078      	str	r0, [r7, #4]
 80018c6:	460b      	mov	r3, r1
 80018c8:	70fb      	strb	r3, [r7, #3]
  // Transmitter power-up
  NRF24_ce(0);
 80018ca:	2000      	movs	r0, #0
 80018cc:	f7ff fc36 	bl	800113c <NRF24_ce>
  NRF24_write_register(REG_CONFIG, ( NRF24_read_register(REG_CONFIG) | _BV(BIT_PWR_UP) ) & ~_BV(BIT_PRIM_RX) );
 80018d0:	2000      	movs	r0, #0
 80018d2:	f7ff fc53 	bl	800117c <NRF24_read_register>
 80018d6:	4603      	mov	r3, r0
 80018d8:	f043 0302 	orr.w	r3, r3, #2
 80018dc:	b2db      	uxtb	r3, r3
 80018de:	f023 0301 	bic.w	r3, r3, #1
 80018e2:	b2db      	uxtb	r3, r3
 80018e4:	4619      	mov	r1, r3
 80018e6:	2000      	movs	r0, #0
 80018e8:	f7ff fc98 	bl	800121c <NRF24_write_register>
  NRF24_ce(1);
 80018ec:	2001      	movs	r0, #1
 80018ee:	f7ff fc25 	bl	800113c <NRF24_ce>
  NRF24_DelayMicroSeconds(150);
 80018f2:	2096      	movs	r0, #150	; 0x96
 80018f4:	f7ff fbe2 	bl	80010bc <NRF24_DelayMicroSeconds>

  // Send the payload
  NRF24_write_payload( buf, len );
 80018f8:	78fb      	ldrb	r3, [r7, #3]
 80018fa:	4619      	mov	r1, r3
 80018fc:	6878      	ldr	r0, [r7, #4]
 80018fe:	f7ff fcd7 	bl	80012b0 <NRF24_write_payload>

  // Enable Tx for 15usec
  NRF24_ce(1);
 8001902:	2001      	movs	r0, #1
 8001904:	f7ff fc1a 	bl	800113c <NRF24_ce>
  NRF24_DelayMicroSeconds(15);
 8001908:	200f      	movs	r0, #15
 800190a:	f7ff fbd7 	bl	80010bc <NRF24_DelayMicroSeconds>
  NRF24_ce(0);
 800190e:	2000      	movs	r0, #0
 8001910:	f7ff fc14 	bl	800113c <NRF24_ce>
}
 8001914:	bf00      	nop
 8001916:	3708      	adds	r7, #8
 8001918:	46bd      	mov	sp, r7
 800191a:	bd80      	pop	{r7, pc}

0800191c <NRF24_whatHappened>:
  ack_payload_available = false;
  return result;
}
//43. Check interrupt flags
void NRF24_whatHappened(bool *tx_ok,bool *tx_fail,bool *rx_ready)
{
 800191c:	b580      	push	{r7, lr}
 800191e:	b086      	sub	sp, #24
 8001920:	af00      	add	r7, sp, #0
 8001922:	60f8      	str	r0, [r7, #12]
 8001924:	60b9      	str	r1, [r7, #8]
 8001926:	607a      	str	r2, [r7, #4]
	uint8_t status = NRF24_get_status();
 8001928:	f7ff fcf4 	bl	8001314 <NRF24_get_status>
 800192c:	4603      	mov	r3, r0
 800192e:	75fb      	strb	r3, [r7, #23]
	*tx_ok = 0;
 8001930:	68fb      	ldr	r3, [r7, #12]
 8001932:	2200      	movs	r2, #0
 8001934:	701a      	strb	r2, [r3, #0]
	NRF24_write_register(REG_STATUS,_BV(BIT_RX_DR) | _BV(BIT_TX_DS) | _BV(BIT_MAX_RT) );
 8001936:	2170      	movs	r1, #112	; 0x70
 8001938:	2007      	movs	r0, #7
 800193a:	f7ff fc6f 	bl	800121c <NRF24_write_register>
  // Report to the user what happened
  *tx_ok = status & _BV(BIT_TX_DS);
 800193e:	7dfb      	ldrb	r3, [r7, #23]
 8001940:	f003 0320 	and.w	r3, r3, #32
 8001944:	2b00      	cmp	r3, #0
 8001946:	bf14      	ite	ne
 8001948:	2301      	movne	r3, #1
 800194a:	2300      	moveq	r3, #0
 800194c:	b2da      	uxtb	r2, r3
 800194e:	68fb      	ldr	r3, [r7, #12]
 8001950:	701a      	strb	r2, [r3, #0]
  *tx_fail = status & _BV(BIT_MAX_RT);
 8001952:	7dfb      	ldrb	r3, [r7, #23]
 8001954:	f003 0310 	and.w	r3, r3, #16
 8001958:	2b00      	cmp	r3, #0
 800195a:	bf14      	ite	ne
 800195c:	2301      	movne	r3, #1
 800195e:	2300      	moveq	r3, #0
 8001960:	b2da      	uxtb	r2, r3
 8001962:	68bb      	ldr	r3, [r7, #8]
 8001964:	701a      	strb	r2, [r3, #0]
  *rx_ready = status & _BV(BIT_RX_DR);
 8001966:	7dfb      	ldrb	r3, [r7, #23]
 8001968:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800196c:	2b00      	cmp	r3, #0
 800196e:	bf14      	ite	ne
 8001970:	2301      	movne	r3, #1
 8001972:	2300      	moveq	r3, #0
 8001974:	b2da      	uxtb	r2, r3
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	701a      	strb	r2, [r3, #0]
}
 800197a:	bf00      	nop
 800197c:	3718      	adds	r7, #24
 800197e:	46bd      	mov	sp, r7
 8001980:	bd80      	pop	{r7, pc}

08001982 <NRF24_resetStatus>:
	return NRF24_read_register(REG_RPD) & 1;
}

//46. Reset Status
void NRF24_resetStatus(void)
{
 8001982:	b580      	push	{r7, lr}
 8001984:	af00      	add	r7, sp, #0
	NRF24_write_register(REG_STATUS,_BV(BIT_RX_DR) | _BV(BIT_TX_DS) | _BV(BIT_MAX_RT) );
 8001986:	2170      	movs	r1, #112	; 0x70
 8001988:	2007      	movs	r0, #7
 800198a:	f7ff fc47 	bl	800121c <NRF24_write_register>
}
 800198e:	bf00      	nop
 8001990:	bd80      	pop	{r7, pc}
	...

08001994 <NRF24_ACTIVATE_cmd>:

//47. ACTIVATE cmd
void NRF24_ACTIVATE_cmd(void)
{
 8001994:	b580      	push	{r7, lr}
 8001996:	b082      	sub	sp, #8
 8001998:	af00      	add	r7, sp, #0
	uint8_t cmdRxBuf[2];
	//Read data from Rx payload buffer
	NRF24_csn(0);
 800199a:	2000      	movs	r0, #0
 800199c:	f7ff fbae 	bl	80010fc <NRF24_csn>
	cmdRxBuf[0] = CMD_ACTIVATE;
 80019a0:	2350      	movs	r3, #80	; 0x50
 80019a2:	713b      	strb	r3, [r7, #4]
	cmdRxBuf[1] = 0x73;
 80019a4:	2373      	movs	r3, #115	; 0x73
 80019a6:	717b      	strb	r3, [r7, #5]
	HAL_SPI_Transmit(&nrf24_hspi, cmdRxBuf, 2, 100);
 80019a8:	1d39      	adds	r1, r7, #4
 80019aa:	2364      	movs	r3, #100	; 0x64
 80019ac:	2202      	movs	r2, #2
 80019ae:	4805      	ldr	r0, [pc, #20]	; (80019c4 <NRF24_ACTIVATE_cmd+0x30>)
 80019b0:	f00d fcde 	bl	800f370 <HAL_SPI_Transmit>
	NRF24_csn(1);
 80019b4:	2001      	movs	r0, #1
 80019b6:	f7ff fba1 	bl	80010fc <NRF24_csn>
}
 80019ba:	bf00      	nop
 80019bc:	3708      	adds	r7, #8
 80019be:	46bd      	mov	sp, r7
 80019c0:	bd80      	pop	{r7, pc}
 80019c2:	bf00      	nop
 80019c4:	2400038c 	.word	0x2400038c

080019c8 <printRadioSettings>:
{
	return ack_payload_length;
}

void printRadioSettings(void)
{
 80019c8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80019ca:	b0a1      	sub	sp, #132	; 0x84
 80019cc:	af04      	add	r7, sp, #16
	uint8_t reg8Val;
	char uartTxBuf[100];
	sprintf(uartTxBuf, "\r\n**********************************************\r\n");
 80019ce:	f107 0308 	add.w	r3, r7, #8
 80019d2:	4ab6      	ldr	r2, [pc, #728]	; (8001cac <printRadioSettings+0x2e4>)
 80019d4:	461c      	mov	r4, r3
 80019d6:	4615      	mov	r5, r2
 80019d8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80019da:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80019dc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80019de:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80019e0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80019e2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80019e4:	682b      	ldr	r3, [r5, #0]
 80019e6:	461a      	mov	r2, r3
 80019e8:	8022      	strh	r2, [r4, #0]
 80019ea:	3402      	adds	r4, #2
 80019ec:	0c1b      	lsrs	r3, r3, #16
 80019ee:	7023      	strb	r3, [r4, #0]
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 80019f0:	f107 0308 	add.w	r3, r7, #8
 80019f4:	4618      	mov	r0, r3
 80019f6:	f7fe fc73 	bl	80002e0 <strlen>
 80019fa:	4603      	mov	r3, r0
 80019fc:	b29a      	uxth	r2, r3
 80019fe:	f107 0108 	add.w	r1, r7, #8
 8001a02:	230a      	movs	r3, #10
 8001a04:	48aa      	ldr	r0, [pc, #680]	; (8001cb0 <printRadioSettings+0x2e8>)
 8001a06:	f00e fcbc 	bl	8010382 <HAL_UART_Transmit>
	//a) Get CRC settings - Config Register
	reg8Val = NRF24_read_register(0x00);
 8001a0a:	2000      	movs	r0, #0
 8001a0c:	f7ff fbb6 	bl	800117c <NRF24_read_register>
 8001a10:	4603      	mov	r3, r0
 8001a12:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	if(reg8Val & (1 << 3))
 8001a16:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001a1a:	f003 0308 	and.w	r3, r3, #8
 8001a1e:	2b00      	cmp	r3, #0
 8001a20:	d020      	beq.n	8001a64 <printRadioSettings+0x9c>
	{
		if(reg8Val & (1 << 2)) sprintf(uartTxBuf, "CRC:\r\n		Enabled, 2 Bytes \r\n");
 8001a22:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001a26:	f003 0304 	and.w	r3, r3, #4
 8001a2a:	2b00      	cmp	r3, #0
 8001a2c:	d00b      	beq.n	8001a46 <printRadioSettings+0x7e>
 8001a2e:	f107 0308 	add.w	r3, r7, #8
 8001a32:	4aa0      	ldr	r2, [pc, #640]	; (8001cb4 <printRadioSettings+0x2ec>)
 8001a34:	461c      	mov	r4, r3
 8001a36:	4615      	mov	r5, r2
 8001a38:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001a3a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001a3c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001a40:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8001a44:	e017      	b.n	8001a76 <printRadioSettings+0xae>
		else sprintf(uartTxBuf, "CRC:\r\n		Enabled, 1 Byte \r\n");	
 8001a46:	f107 0308 	add.w	r3, r7, #8
 8001a4a:	4a9b      	ldr	r2, [pc, #620]	; (8001cb8 <printRadioSettings+0x2f0>)
 8001a4c:	461c      	mov	r4, r3
 8001a4e:	4615      	mov	r5, r2
 8001a50:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001a52:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001a54:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001a58:	c403      	stmia	r4!, {r0, r1}
 8001a5a:	8022      	strh	r2, [r4, #0]
 8001a5c:	3402      	adds	r4, #2
 8001a5e:	0c13      	lsrs	r3, r2, #16
 8001a60:	7023      	strb	r3, [r4, #0]
 8001a62:	e008      	b.n	8001a76 <printRadioSettings+0xae>
	}
	else
	{
		sprintf(uartTxBuf, "CRC:\r\n		Disabled \r\n");
 8001a64:	f107 0308 	add.w	r3, r7, #8
 8001a68:	4a94      	ldr	r2, [pc, #592]	; (8001cbc <printRadioSettings+0x2f4>)
 8001a6a:	461c      	mov	r4, r3
 8001a6c:	4615      	mov	r5, r2
 8001a6e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001a70:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001a72:	682b      	ldr	r3, [r5, #0]
 8001a74:	6023      	str	r3, [r4, #0]
	}
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8001a76:	f107 0308 	add.w	r3, r7, #8
 8001a7a:	4618      	mov	r0, r3
 8001a7c:	f7fe fc30 	bl	80002e0 <strlen>
 8001a80:	4603      	mov	r3, r0
 8001a82:	b29a      	uxth	r2, r3
 8001a84:	f107 0108 	add.w	r1, r7, #8
 8001a88:	230a      	movs	r3, #10
 8001a8a:	4889      	ldr	r0, [pc, #548]	; (8001cb0 <printRadioSettings+0x2e8>)
 8001a8c:	f00e fc79 	bl	8010382 <HAL_UART_Transmit>
	//b) AutoAck on pipes
	reg8Val = NRF24_read_register(0x01);
 8001a90:	2001      	movs	r0, #1
 8001a92:	f7ff fb73 	bl	800117c <NRF24_read_register>
 8001a96:	4603      	mov	r3, r0
 8001a98:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "ENAA:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8001a9c:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001aa0:	f003 0301 	and.w	r3, r3, #1
	sprintf(uartTxBuf, "ENAA:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8001aa4:	2b00      	cmp	r3, #0
 8001aa6:	bfcc      	ite	gt
 8001aa8:	2301      	movgt	r3, #1
 8001aaa:	2300      	movle	r3, #0
 8001aac:	b2db      	uxtb	r3, r3
 8001aae:	461d      	mov	r5, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8001ab0:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001ab4:	f003 0302 	and.w	r3, r3, #2
	sprintf(uartTxBuf, "ENAA:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8001ab8:	2b00      	cmp	r3, #0
 8001aba:	bfcc      	ite	gt
 8001abc:	2301      	movgt	r3, #1
 8001abe:	2300      	movle	r3, #0
 8001ac0:	b2db      	uxtb	r3, r3
 8001ac2:	461e      	mov	r6, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8001ac4:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001ac8:	f003 0304 	and.w	r3, r3, #4
	sprintf(uartTxBuf, "ENAA:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8001acc:	2b00      	cmp	r3, #0
 8001ace:	bfcc      	ite	gt
 8001ad0:	2301      	movgt	r3, #1
 8001ad2:	2300      	movle	r3, #0
 8001ad4:	b2db      	uxtb	r3, r3
 8001ad6:	461a      	mov	r2, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8001ad8:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001adc:	f003 0308 	and.w	r3, r3, #8
	sprintf(uartTxBuf, "ENAA:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8001ae0:	2b00      	cmp	r3, #0
 8001ae2:	bfcc      	ite	gt
 8001ae4:	2301      	movgt	r3, #1
 8001ae6:	2300      	movle	r3, #0
 8001ae8:	b2db      	uxtb	r3, r3
 8001aea:	4619      	mov	r1, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8001aec:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001af0:	f003 0310 	and.w	r3, r3, #16
	sprintf(uartTxBuf, "ENAA:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8001af4:	2b00      	cmp	r3, #0
 8001af6:	bfcc      	ite	gt
 8001af8:	2301      	movgt	r3, #1
 8001afa:	2300      	movle	r3, #0
 8001afc:	b2db      	uxtb	r3, r3
 8001afe:	461c      	mov	r4, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8001b00:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001b04:	f003 0320 	and.w	r3, r3, #32
	sprintf(uartTxBuf, "ENAA:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8001b08:	2b00      	cmp	r3, #0
 8001b0a:	bfcc      	ite	gt
 8001b0c:	2301      	movgt	r3, #1
 8001b0e:	2300      	movle	r3, #0
 8001b10:	b2db      	uxtb	r3, r3
 8001b12:	f107 0008 	add.w	r0, r7, #8
 8001b16:	9303      	str	r3, [sp, #12]
 8001b18:	9402      	str	r4, [sp, #8]
 8001b1a:	9101      	str	r1, [sp, #4]
 8001b1c:	9200      	str	r2, [sp, #0]
 8001b1e:	4633      	mov	r3, r6
 8001b20:	462a      	mov	r2, r5
 8001b22:	4967      	ldr	r1, [pc, #412]	; (8001cc0 <printRadioSettings+0x2f8>)
 8001b24:	f019 f800 	bl	801ab28 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8001b28:	f107 0308 	add.w	r3, r7, #8
 8001b2c:	4618      	mov	r0, r3
 8001b2e:	f7fe fbd7 	bl	80002e0 <strlen>
 8001b32:	4603      	mov	r3, r0
 8001b34:	b29a      	uxth	r2, r3
 8001b36:	f107 0108 	add.w	r1, r7, #8
 8001b3a:	230a      	movs	r3, #10
 8001b3c:	485c      	ldr	r0, [pc, #368]	; (8001cb0 <printRadioSettings+0x2e8>)
 8001b3e:	f00e fc20 	bl	8010382 <HAL_UART_Transmit>
	//c) Enabled Rx addresses
	reg8Val = NRF24_read_register(0x02);
 8001b42:	2002      	movs	r0, #2
 8001b44:	f7ff fb1a 	bl	800117c <NRF24_read_register>
 8001b48:	4603      	mov	r3, r0
 8001b4a:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "EN_RXADDR:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8001b4e:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001b52:	f003 0301 	and.w	r3, r3, #1
	sprintf(uartTxBuf, "EN_RXADDR:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8001b56:	2b00      	cmp	r3, #0
 8001b58:	bfcc      	ite	gt
 8001b5a:	2301      	movgt	r3, #1
 8001b5c:	2300      	movle	r3, #0
 8001b5e:	b2db      	uxtb	r3, r3
 8001b60:	461d      	mov	r5, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8001b62:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001b66:	f003 0302 	and.w	r3, r3, #2
	sprintf(uartTxBuf, "EN_RXADDR:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8001b6a:	2b00      	cmp	r3, #0
 8001b6c:	bfcc      	ite	gt
 8001b6e:	2301      	movgt	r3, #1
 8001b70:	2300      	movle	r3, #0
 8001b72:	b2db      	uxtb	r3, r3
 8001b74:	461e      	mov	r6, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8001b76:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001b7a:	f003 0304 	and.w	r3, r3, #4
	sprintf(uartTxBuf, "EN_RXADDR:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8001b7e:	2b00      	cmp	r3, #0
 8001b80:	bfcc      	ite	gt
 8001b82:	2301      	movgt	r3, #1
 8001b84:	2300      	movle	r3, #0
 8001b86:	b2db      	uxtb	r3, r3
 8001b88:	461a      	mov	r2, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8001b8a:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001b8e:	f003 0308 	and.w	r3, r3, #8
	sprintf(uartTxBuf, "EN_RXADDR:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8001b92:	2b00      	cmp	r3, #0
 8001b94:	bfcc      	ite	gt
 8001b96:	2301      	movgt	r3, #1
 8001b98:	2300      	movle	r3, #0
 8001b9a:	b2db      	uxtb	r3, r3
 8001b9c:	4619      	mov	r1, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8001b9e:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001ba2:	f003 0310 	and.w	r3, r3, #16
	sprintf(uartTxBuf, "EN_RXADDR:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8001ba6:	2b00      	cmp	r3, #0
 8001ba8:	bfcc      	ite	gt
 8001baa:	2301      	movgt	r3, #1
 8001bac:	2300      	movle	r3, #0
 8001bae:	b2db      	uxtb	r3, r3
 8001bb0:	461c      	mov	r4, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8001bb2:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001bb6:	f003 0320 	and.w	r3, r3, #32
	sprintf(uartTxBuf, "EN_RXADDR:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8001bba:	2b00      	cmp	r3, #0
 8001bbc:	bfcc      	ite	gt
 8001bbe:	2301      	movgt	r3, #1
 8001bc0:	2300      	movle	r3, #0
 8001bc2:	b2db      	uxtb	r3, r3
 8001bc4:	f107 0008 	add.w	r0, r7, #8
 8001bc8:	9303      	str	r3, [sp, #12]
 8001bca:	9402      	str	r4, [sp, #8]
 8001bcc:	9101      	str	r1, [sp, #4]
 8001bce:	9200      	str	r2, [sp, #0]
 8001bd0:	4633      	mov	r3, r6
 8001bd2:	462a      	mov	r2, r5
 8001bd4:	493b      	ldr	r1, [pc, #236]	; (8001cc4 <printRadioSettings+0x2fc>)
 8001bd6:	f018 ffa7 	bl	801ab28 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8001bda:	f107 0308 	add.w	r3, r7, #8
 8001bde:	4618      	mov	r0, r3
 8001be0:	f7fe fb7e 	bl	80002e0 <strlen>
 8001be4:	4603      	mov	r3, r0
 8001be6:	b29a      	uxth	r2, r3
 8001be8:	f107 0108 	add.w	r1, r7, #8
 8001bec:	230a      	movs	r3, #10
 8001bee:	4830      	ldr	r0, [pc, #192]	; (8001cb0 <printRadioSettings+0x2e8>)
 8001bf0:	f00e fbc7 	bl	8010382 <HAL_UART_Transmit>
	//d) Address width
	reg8Val = NRF24_read_register(0x03)&0x03;
 8001bf4:	2003      	movs	r0, #3
 8001bf6:	f7ff fac1 	bl	800117c <NRF24_read_register>
 8001bfa:	4603      	mov	r3, r0
 8001bfc:	f003 0303 	and.w	r3, r3, #3
 8001c00:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	reg8Val +=2;
 8001c04:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001c08:	3302      	adds	r3, #2
 8001c0a:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "SETUP_AW:\r\n		%d bytes \r\n", reg8Val);
 8001c0e:	f897 206f 	ldrb.w	r2, [r7, #111]	; 0x6f
 8001c12:	f107 0308 	add.w	r3, r7, #8
 8001c16:	492c      	ldr	r1, [pc, #176]	; (8001cc8 <printRadioSettings+0x300>)
 8001c18:	4618      	mov	r0, r3
 8001c1a:	f018 ff85 	bl	801ab28 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8001c1e:	f107 0308 	add.w	r3, r7, #8
 8001c22:	4618      	mov	r0, r3
 8001c24:	f7fe fb5c 	bl	80002e0 <strlen>
 8001c28:	4603      	mov	r3, r0
 8001c2a:	b29a      	uxth	r2, r3
 8001c2c:	f107 0108 	add.w	r1, r7, #8
 8001c30:	230a      	movs	r3, #10
 8001c32:	481f      	ldr	r0, [pc, #124]	; (8001cb0 <printRadioSettings+0x2e8>)
 8001c34:	f00e fba5 	bl	8010382 <HAL_UART_Transmit>
	//e) RF channel
	reg8Val = NRF24_read_register(0x05);
 8001c38:	2005      	movs	r0, #5
 8001c3a:	f7ff fa9f 	bl	800117c <NRF24_read_register>
 8001c3e:	4603      	mov	r3, r0
 8001c40:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "RF_CH:\r\n		%d CH \r\n", reg8Val&0x7F);
 8001c44:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001c48:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8001c4c:	f107 0308 	add.w	r3, r7, #8
 8001c50:	491e      	ldr	r1, [pc, #120]	; (8001ccc <printRadioSettings+0x304>)
 8001c52:	4618      	mov	r0, r3
 8001c54:	f018 ff68 	bl	801ab28 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8001c58:	f107 0308 	add.w	r3, r7, #8
 8001c5c:	4618      	mov	r0, r3
 8001c5e:	f7fe fb3f 	bl	80002e0 <strlen>
 8001c62:	4603      	mov	r3, r0
 8001c64:	b29a      	uxth	r2, r3
 8001c66:	f107 0108 	add.w	r1, r7, #8
 8001c6a:	230a      	movs	r3, #10
 8001c6c:	4810      	ldr	r0, [pc, #64]	; (8001cb0 <printRadioSettings+0x2e8>)
 8001c6e:	f00e fb88 	bl	8010382 <HAL_UART_Transmit>
	//f) Data rate & RF_PWR
	reg8Val = NRF24_read_register(0x06);
 8001c72:	2006      	movs	r0, #6
 8001c74:	f7ff fa82 	bl	800117c <NRF24_read_register>
 8001c78:	4603      	mov	r3, r0
 8001c7a:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	if(reg8Val & (1 << 3)) sprintf(uartTxBuf, "Data Rate:\r\n		2Mbps \r\n");
 8001c7e:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001c82:	f003 0308 	and.w	r3, r3, #8
 8001c86:	2b00      	cmp	r3, #0
 8001c88:	d024      	beq.n	8001cd4 <printRadioSettings+0x30c>
 8001c8a:	f107 0308 	add.w	r3, r7, #8
 8001c8e:	4a10      	ldr	r2, [pc, #64]	; (8001cd0 <printRadioSettings+0x308>)
 8001c90:	461c      	mov	r4, r3
 8001c92:	4615      	mov	r5, r2
 8001c94:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001c96:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001c98:	e895 0003 	ldmia.w	r5, {r0, r1}
 8001c9c:	6020      	str	r0, [r4, #0]
 8001c9e:	3404      	adds	r4, #4
 8001ca0:	8021      	strh	r1, [r4, #0]
 8001ca2:	3402      	adds	r4, #2
 8001ca4:	0c0b      	lsrs	r3, r1, #16
 8001ca6:	7023      	strb	r3, [r4, #0]
 8001ca8:	e023      	b.n	8001cf2 <printRadioSettings+0x32a>
 8001caa:	bf00      	nop
 8001cac:	0801bd58 	.word	0x0801bd58
 8001cb0:	24000414 	.word	0x24000414
 8001cb4:	0801bd8c 	.word	0x0801bd8c
 8001cb8:	0801bda8 	.word	0x0801bda8
 8001cbc:	0801bdc4 	.word	0x0801bdc4
 8001cc0:	0801bdd8 	.word	0x0801bdd8
 8001cc4:	0801be1c 	.word	0x0801be1c
 8001cc8:	0801be68 	.word	0x0801be68
 8001ccc:	0801be84 	.word	0x0801be84
 8001cd0:	0801be98 	.word	0x0801be98
	else sprintf(uartTxBuf, "Data Rate:\r\n		1Mbps \r\n");
 8001cd4:	f107 0308 	add.w	r3, r7, #8
 8001cd8:	4a29      	ldr	r2, [pc, #164]	; (8001d80 <printRadioSettings+0x3b8>)
 8001cda:	461c      	mov	r4, r3
 8001cdc:	4615      	mov	r5, r2
 8001cde:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001ce0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001ce2:	e895 0003 	ldmia.w	r5, {r0, r1}
 8001ce6:	6020      	str	r0, [r4, #0]
 8001ce8:	3404      	adds	r4, #4
 8001cea:	8021      	strh	r1, [r4, #0]
 8001cec:	3402      	adds	r4, #2
 8001cee:	0c0b      	lsrs	r3, r1, #16
 8001cf0:	7023      	strb	r3, [r4, #0]
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8001cf2:	f107 0308 	add.w	r3, r7, #8
 8001cf6:	4618      	mov	r0, r3
 8001cf8:	f7fe faf2 	bl	80002e0 <strlen>
 8001cfc:	4603      	mov	r3, r0
 8001cfe:	b29a      	uxth	r2, r3
 8001d00:	f107 0108 	add.w	r1, r7, #8
 8001d04:	230a      	movs	r3, #10
 8001d06:	481f      	ldr	r0, [pc, #124]	; (8001d84 <printRadioSettings+0x3bc>)
 8001d08:	f00e fb3b 	bl	8010382 <HAL_UART_Transmit>
	reg8Val &= (3 << 1);
 8001d0c:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001d10:	f003 0306 	and.w	r3, r3, #6
 8001d14:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	reg8Val = (reg8Val>>1);
 8001d18:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001d1c:	085b      	lsrs	r3, r3, #1
 8001d1e:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	if(reg8Val == 0) sprintf(uartTxBuf, "RF_PWR:\r\n		-18dB \r\n");
 8001d22:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001d26:	2b00      	cmp	r3, #0
 8001d28:	d109      	bne.n	8001d3e <printRadioSettings+0x376>
 8001d2a:	f107 0308 	add.w	r3, r7, #8
 8001d2e:	4a16      	ldr	r2, [pc, #88]	; (8001d88 <printRadioSettings+0x3c0>)
 8001d30:	461c      	mov	r4, r3
 8001d32:	4615      	mov	r5, r2
 8001d34:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001d36:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001d38:	682b      	ldr	r3, [r5, #0]
 8001d3a:	6023      	str	r3, [r4, #0]
 8001d3c:	e037      	b.n	8001dae <printRadioSettings+0x3e6>
	else if(reg8Val == 1) sprintf(uartTxBuf, "RF_PWR:\r\n		-12dB \r\n");
 8001d3e:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001d42:	2b01      	cmp	r3, #1
 8001d44:	d109      	bne.n	8001d5a <printRadioSettings+0x392>
 8001d46:	f107 0308 	add.w	r3, r7, #8
 8001d4a:	4a10      	ldr	r2, [pc, #64]	; (8001d8c <printRadioSettings+0x3c4>)
 8001d4c:	461c      	mov	r4, r3
 8001d4e:	4615      	mov	r5, r2
 8001d50:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001d52:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001d54:	682b      	ldr	r3, [r5, #0]
 8001d56:	6023      	str	r3, [r4, #0]
 8001d58:	e029      	b.n	8001dae <printRadioSettings+0x3e6>
	else if(reg8Val == 2) sprintf(uartTxBuf, "RF_PWR:\r\n		-6dB \r\n");
 8001d5a:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001d5e:	2b02      	cmp	r3, #2
 8001d60:	d118      	bne.n	8001d94 <printRadioSettings+0x3cc>
 8001d62:	f107 0308 	add.w	r3, r7, #8
 8001d66:	4a0a      	ldr	r2, [pc, #40]	; (8001d90 <printRadioSettings+0x3c8>)
 8001d68:	461c      	mov	r4, r3
 8001d6a:	4615      	mov	r5, r2
 8001d6c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001d6e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001d70:	682b      	ldr	r3, [r5, #0]
 8001d72:	461a      	mov	r2, r3
 8001d74:	8022      	strh	r2, [r4, #0]
 8001d76:	3402      	adds	r4, #2
 8001d78:	0c1b      	lsrs	r3, r3, #16
 8001d7a:	7023      	strb	r3, [r4, #0]
 8001d7c:	e017      	b.n	8001dae <printRadioSettings+0x3e6>
 8001d7e:	bf00      	nop
 8001d80:	0801beb0 	.word	0x0801beb0
 8001d84:	24000414 	.word	0x24000414
 8001d88:	0801bec8 	.word	0x0801bec8
 8001d8c:	0801bedc 	.word	0x0801bedc
 8001d90:	0801bef0 	.word	0x0801bef0
	else if(reg8Val == 3) sprintf(uartTxBuf, "RF_PWR:\r\n		0dB \r\n");
 8001d94:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001d98:	2b03      	cmp	r3, #3
 8001d9a:	d108      	bne.n	8001dae <printRadioSettings+0x3e6>
 8001d9c:	f107 0308 	add.w	r3, r7, #8
 8001da0:	4ad7      	ldr	r2, [pc, #860]	; (8002100 <printRadioSettings+0x738>)
 8001da2:	461c      	mov	r4, r3
 8001da4:	4615      	mov	r5, r2
 8001da6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001da8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001daa:	682b      	ldr	r3, [r5, #0]
 8001dac:	8023      	strh	r3, [r4, #0]
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8001dae:	f107 0308 	add.w	r3, r7, #8
 8001db2:	4618      	mov	r0, r3
 8001db4:	f7fe fa94 	bl	80002e0 <strlen>
 8001db8:	4603      	mov	r3, r0
 8001dba:	b29a      	uxth	r2, r3
 8001dbc:	f107 0108 	add.w	r1, r7, #8
 8001dc0:	230a      	movs	r3, #10
 8001dc2:	48d0      	ldr	r0, [pc, #832]	; (8002104 <printRadioSettings+0x73c>)
 8001dc4:	f00e fadd 	bl	8010382 <HAL_UART_Transmit>
	//g) RX pipes addresses
	uint8_t pipeAddrs[6];
	NRF24_read_registerN(0x0A, pipeAddrs, 5);
 8001dc8:	463b      	mov	r3, r7
 8001dca:	2205      	movs	r2, #5
 8001dcc:	4619      	mov	r1, r3
 8001dce:	200a      	movs	r0, #10
 8001dd0:	f7ff f9fc 	bl	80011cc <NRF24_read_registerN>
	sprintf(uartTxBuf, "RX_Pipe0 Addrs:\r\n		%02X,%02X,%02X,%02X,%02X  \r\n", pipeAddrs[4], pipeAddrs[3], pipeAddrs[2],pipeAddrs[1],pipeAddrs[0]);
 8001dd4:	793b      	ldrb	r3, [r7, #4]
 8001dd6:	461c      	mov	r4, r3
 8001dd8:	78fb      	ldrb	r3, [r7, #3]
 8001dda:	461d      	mov	r5, r3
 8001ddc:	78bb      	ldrb	r3, [r7, #2]
 8001dde:	787a      	ldrb	r2, [r7, #1]
 8001de0:	7839      	ldrb	r1, [r7, #0]
 8001de2:	f107 0008 	add.w	r0, r7, #8
 8001de6:	9102      	str	r1, [sp, #8]
 8001de8:	9201      	str	r2, [sp, #4]
 8001dea:	9300      	str	r3, [sp, #0]
 8001dec:	462b      	mov	r3, r5
 8001dee:	4622      	mov	r2, r4
 8001df0:	49c5      	ldr	r1, [pc, #788]	; (8002108 <printRadioSettings+0x740>)
 8001df2:	f018 fe99 	bl	801ab28 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8001df6:	f107 0308 	add.w	r3, r7, #8
 8001dfa:	4618      	mov	r0, r3
 8001dfc:	f7fe fa70 	bl	80002e0 <strlen>
 8001e00:	4603      	mov	r3, r0
 8001e02:	b29a      	uxth	r2, r3
 8001e04:	f107 0108 	add.w	r1, r7, #8
 8001e08:	230a      	movs	r3, #10
 8001e0a:	48be      	ldr	r0, [pc, #760]	; (8002104 <printRadioSettings+0x73c>)
 8001e0c:	f00e fab9 	bl	8010382 <HAL_UART_Transmit>
	
	NRF24_read_registerN(0x0A+1, pipeAddrs, 5);
 8001e10:	463b      	mov	r3, r7
 8001e12:	2205      	movs	r2, #5
 8001e14:	4619      	mov	r1, r3
 8001e16:	200b      	movs	r0, #11
 8001e18:	f7ff f9d8 	bl	80011cc <NRF24_read_registerN>
	sprintf(uartTxBuf, "RX_Pipe1 Addrs:\r\n		%02X,%02X,%02X,%02X,%02X  \r\n", pipeAddrs[4], pipeAddrs[3], pipeAddrs[2],pipeAddrs[1],pipeAddrs[0]);
 8001e1c:	793b      	ldrb	r3, [r7, #4]
 8001e1e:	461c      	mov	r4, r3
 8001e20:	78fb      	ldrb	r3, [r7, #3]
 8001e22:	461d      	mov	r5, r3
 8001e24:	78bb      	ldrb	r3, [r7, #2]
 8001e26:	787a      	ldrb	r2, [r7, #1]
 8001e28:	7839      	ldrb	r1, [r7, #0]
 8001e2a:	f107 0008 	add.w	r0, r7, #8
 8001e2e:	9102      	str	r1, [sp, #8]
 8001e30:	9201      	str	r2, [sp, #4]
 8001e32:	9300      	str	r3, [sp, #0]
 8001e34:	462b      	mov	r3, r5
 8001e36:	4622      	mov	r2, r4
 8001e38:	49b4      	ldr	r1, [pc, #720]	; (800210c <printRadioSettings+0x744>)
 8001e3a:	f018 fe75 	bl	801ab28 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8001e3e:	f107 0308 	add.w	r3, r7, #8
 8001e42:	4618      	mov	r0, r3
 8001e44:	f7fe fa4c 	bl	80002e0 <strlen>
 8001e48:	4603      	mov	r3, r0
 8001e4a:	b29a      	uxth	r2, r3
 8001e4c:	f107 0108 	add.w	r1, r7, #8
 8001e50:	230a      	movs	r3, #10
 8001e52:	48ac      	ldr	r0, [pc, #688]	; (8002104 <printRadioSettings+0x73c>)
 8001e54:	f00e fa95 	bl	8010382 <HAL_UART_Transmit>
	
	NRF24_read_registerN(0x0A+2, pipeAddrs, 1);
 8001e58:	463b      	mov	r3, r7
 8001e5a:	2201      	movs	r2, #1
 8001e5c:	4619      	mov	r1, r3
 8001e5e:	200c      	movs	r0, #12
 8001e60:	f7ff f9b4 	bl	80011cc <NRF24_read_registerN>
	sprintf(uartTxBuf, "RX_Pipe2 Addrs:\r\n		xx,xx,xx,xx,%02X  \r\n", pipeAddrs[0]);
 8001e64:	783b      	ldrb	r3, [r7, #0]
 8001e66:	461a      	mov	r2, r3
 8001e68:	f107 0308 	add.w	r3, r7, #8
 8001e6c:	49a8      	ldr	r1, [pc, #672]	; (8002110 <printRadioSettings+0x748>)
 8001e6e:	4618      	mov	r0, r3
 8001e70:	f018 fe5a 	bl	801ab28 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8001e74:	f107 0308 	add.w	r3, r7, #8
 8001e78:	4618      	mov	r0, r3
 8001e7a:	f7fe fa31 	bl	80002e0 <strlen>
 8001e7e:	4603      	mov	r3, r0
 8001e80:	b29a      	uxth	r2, r3
 8001e82:	f107 0108 	add.w	r1, r7, #8
 8001e86:	230a      	movs	r3, #10
 8001e88:	489e      	ldr	r0, [pc, #632]	; (8002104 <printRadioSettings+0x73c>)
 8001e8a:	f00e fa7a 	bl	8010382 <HAL_UART_Transmit>
	
	NRF24_read_registerN(0x0A+3, pipeAddrs, 1);
 8001e8e:	463b      	mov	r3, r7
 8001e90:	2201      	movs	r2, #1
 8001e92:	4619      	mov	r1, r3
 8001e94:	200d      	movs	r0, #13
 8001e96:	f7ff f999 	bl	80011cc <NRF24_read_registerN>
	sprintf(uartTxBuf, "RX_Pipe3 Addrs:\r\n		xx,xx,xx,xx,%02X  \r\n", pipeAddrs[0]);
 8001e9a:	783b      	ldrb	r3, [r7, #0]
 8001e9c:	461a      	mov	r2, r3
 8001e9e:	f107 0308 	add.w	r3, r7, #8
 8001ea2:	499c      	ldr	r1, [pc, #624]	; (8002114 <printRadioSettings+0x74c>)
 8001ea4:	4618      	mov	r0, r3
 8001ea6:	f018 fe3f 	bl	801ab28 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8001eaa:	f107 0308 	add.w	r3, r7, #8
 8001eae:	4618      	mov	r0, r3
 8001eb0:	f7fe fa16 	bl	80002e0 <strlen>
 8001eb4:	4603      	mov	r3, r0
 8001eb6:	b29a      	uxth	r2, r3
 8001eb8:	f107 0108 	add.w	r1, r7, #8
 8001ebc:	230a      	movs	r3, #10
 8001ebe:	4891      	ldr	r0, [pc, #580]	; (8002104 <printRadioSettings+0x73c>)
 8001ec0:	f00e fa5f 	bl	8010382 <HAL_UART_Transmit>
	
	NRF24_read_registerN(0x0A+4, pipeAddrs, 1);
 8001ec4:	463b      	mov	r3, r7
 8001ec6:	2201      	movs	r2, #1
 8001ec8:	4619      	mov	r1, r3
 8001eca:	200e      	movs	r0, #14
 8001ecc:	f7ff f97e 	bl	80011cc <NRF24_read_registerN>
	sprintf(uartTxBuf, "RX_Pipe4 Addrs:\r\n		xx,xx,xx,xx,%02X  \r\n", pipeAddrs[0]);
 8001ed0:	783b      	ldrb	r3, [r7, #0]
 8001ed2:	461a      	mov	r2, r3
 8001ed4:	f107 0308 	add.w	r3, r7, #8
 8001ed8:	498f      	ldr	r1, [pc, #572]	; (8002118 <printRadioSettings+0x750>)
 8001eda:	4618      	mov	r0, r3
 8001edc:	f018 fe24 	bl	801ab28 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8001ee0:	f107 0308 	add.w	r3, r7, #8
 8001ee4:	4618      	mov	r0, r3
 8001ee6:	f7fe f9fb 	bl	80002e0 <strlen>
 8001eea:	4603      	mov	r3, r0
 8001eec:	b29a      	uxth	r2, r3
 8001eee:	f107 0108 	add.w	r1, r7, #8
 8001ef2:	230a      	movs	r3, #10
 8001ef4:	4883      	ldr	r0, [pc, #524]	; (8002104 <printRadioSettings+0x73c>)
 8001ef6:	f00e fa44 	bl	8010382 <HAL_UART_Transmit>
	
	NRF24_read_registerN(0x0A+5, pipeAddrs, 1);
 8001efa:	463b      	mov	r3, r7
 8001efc:	2201      	movs	r2, #1
 8001efe:	4619      	mov	r1, r3
 8001f00:	200f      	movs	r0, #15
 8001f02:	f7ff f963 	bl	80011cc <NRF24_read_registerN>
	sprintf(uartTxBuf, "RX_Pipe5 Addrs:\r\n		xx,xx,xx,xx,%02X  \r\n", pipeAddrs[0]);
 8001f06:	783b      	ldrb	r3, [r7, #0]
 8001f08:	461a      	mov	r2, r3
 8001f0a:	f107 0308 	add.w	r3, r7, #8
 8001f0e:	4983      	ldr	r1, [pc, #524]	; (800211c <printRadioSettings+0x754>)
 8001f10:	4618      	mov	r0, r3
 8001f12:	f018 fe09 	bl	801ab28 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8001f16:	f107 0308 	add.w	r3, r7, #8
 8001f1a:	4618      	mov	r0, r3
 8001f1c:	f7fe f9e0 	bl	80002e0 <strlen>
 8001f20:	4603      	mov	r3, r0
 8001f22:	b29a      	uxth	r2, r3
 8001f24:	f107 0108 	add.w	r1, r7, #8
 8001f28:	230a      	movs	r3, #10
 8001f2a:	4876      	ldr	r0, [pc, #472]	; (8002104 <printRadioSettings+0x73c>)
 8001f2c:	f00e fa29 	bl	8010382 <HAL_UART_Transmit>
	
	NRF24_read_registerN(0x0A+6, pipeAddrs, 5);
 8001f30:	463b      	mov	r3, r7
 8001f32:	2205      	movs	r2, #5
 8001f34:	4619      	mov	r1, r3
 8001f36:	2010      	movs	r0, #16
 8001f38:	f7ff f948 	bl	80011cc <NRF24_read_registerN>
	sprintf(uartTxBuf, "TX Addrs:\r\n		%02X,%02X,%02X,%02X,%02X  \r\n", pipeAddrs[4], pipeAddrs[3], pipeAddrs[2],pipeAddrs[1],pipeAddrs[0]);
 8001f3c:	793b      	ldrb	r3, [r7, #4]
 8001f3e:	461c      	mov	r4, r3
 8001f40:	78fb      	ldrb	r3, [r7, #3]
 8001f42:	461d      	mov	r5, r3
 8001f44:	78bb      	ldrb	r3, [r7, #2]
 8001f46:	787a      	ldrb	r2, [r7, #1]
 8001f48:	7839      	ldrb	r1, [r7, #0]
 8001f4a:	f107 0008 	add.w	r0, r7, #8
 8001f4e:	9102      	str	r1, [sp, #8]
 8001f50:	9201      	str	r2, [sp, #4]
 8001f52:	9300      	str	r3, [sp, #0]
 8001f54:	462b      	mov	r3, r5
 8001f56:	4622      	mov	r2, r4
 8001f58:	4971      	ldr	r1, [pc, #452]	; (8002120 <printRadioSettings+0x758>)
 8001f5a:	f018 fde5 	bl	801ab28 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8001f5e:	f107 0308 	add.w	r3, r7, #8
 8001f62:	4618      	mov	r0, r3
 8001f64:	f7fe f9bc 	bl	80002e0 <strlen>
 8001f68:	4603      	mov	r3, r0
 8001f6a:	b29a      	uxth	r2, r3
 8001f6c:	f107 0108 	add.w	r1, r7, #8
 8001f70:	230a      	movs	r3, #10
 8001f72:	4864      	ldr	r0, [pc, #400]	; (8002104 <printRadioSettings+0x73c>)
 8001f74:	f00e fa05 	bl	8010382 <HAL_UART_Transmit>
	
	//h) RX PW (Payload Width 0 - 32)
	reg8Val = NRF24_read_register(0x11);
 8001f78:	2011      	movs	r0, #17
 8001f7a:	f7ff f8ff 	bl	800117c <NRF24_read_register>
 8001f7e:	4603      	mov	r3, r0
 8001f80:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "RX_PW_P0:\r\n		%d bytes \r\n", reg8Val&0x3F);
 8001f84:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001f88:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001f8c:	f107 0308 	add.w	r3, r7, #8
 8001f90:	4964      	ldr	r1, [pc, #400]	; (8002124 <printRadioSettings+0x75c>)
 8001f92:	4618      	mov	r0, r3
 8001f94:	f018 fdc8 	bl	801ab28 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8001f98:	f107 0308 	add.w	r3, r7, #8
 8001f9c:	4618      	mov	r0, r3
 8001f9e:	f7fe f99f 	bl	80002e0 <strlen>
 8001fa2:	4603      	mov	r3, r0
 8001fa4:	b29a      	uxth	r2, r3
 8001fa6:	f107 0108 	add.w	r1, r7, #8
 8001faa:	230a      	movs	r3, #10
 8001fac:	4855      	ldr	r0, [pc, #340]	; (8002104 <printRadioSettings+0x73c>)
 8001fae:	f00e f9e8 	bl	8010382 <HAL_UART_Transmit>
	
	reg8Val = NRF24_read_register(0x11+1);
 8001fb2:	2012      	movs	r0, #18
 8001fb4:	f7ff f8e2 	bl	800117c <NRF24_read_register>
 8001fb8:	4603      	mov	r3, r0
 8001fba:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "RX_PW_P1:\r\n		%d bytes \r\n", reg8Val&0x3F);
 8001fbe:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001fc2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001fc6:	f107 0308 	add.w	r3, r7, #8
 8001fca:	4957      	ldr	r1, [pc, #348]	; (8002128 <printRadioSettings+0x760>)
 8001fcc:	4618      	mov	r0, r3
 8001fce:	f018 fdab 	bl	801ab28 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8001fd2:	f107 0308 	add.w	r3, r7, #8
 8001fd6:	4618      	mov	r0, r3
 8001fd8:	f7fe f982 	bl	80002e0 <strlen>
 8001fdc:	4603      	mov	r3, r0
 8001fde:	b29a      	uxth	r2, r3
 8001fe0:	f107 0108 	add.w	r1, r7, #8
 8001fe4:	230a      	movs	r3, #10
 8001fe6:	4847      	ldr	r0, [pc, #284]	; (8002104 <printRadioSettings+0x73c>)
 8001fe8:	f00e f9cb 	bl	8010382 <HAL_UART_Transmit>
	
	reg8Val = NRF24_read_register(0x11+2);
 8001fec:	2013      	movs	r0, #19
 8001fee:	f7ff f8c5 	bl	800117c <NRF24_read_register>
 8001ff2:	4603      	mov	r3, r0
 8001ff4:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "RX_PW_P2:\r\n		%d bytes \r\n", reg8Val&0x3F);
 8001ff8:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001ffc:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002000:	f107 0308 	add.w	r3, r7, #8
 8002004:	4949      	ldr	r1, [pc, #292]	; (800212c <printRadioSettings+0x764>)
 8002006:	4618      	mov	r0, r3
 8002008:	f018 fd8e 	bl	801ab28 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 800200c:	f107 0308 	add.w	r3, r7, #8
 8002010:	4618      	mov	r0, r3
 8002012:	f7fe f965 	bl	80002e0 <strlen>
 8002016:	4603      	mov	r3, r0
 8002018:	b29a      	uxth	r2, r3
 800201a:	f107 0108 	add.w	r1, r7, #8
 800201e:	230a      	movs	r3, #10
 8002020:	4838      	ldr	r0, [pc, #224]	; (8002104 <printRadioSettings+0x73c>)
 8002022:	f00e f9ae 	bl	8010382 <HAL_UART_Transmit>
	
	reg8Val = NRF24_read_register(0x11+3);
 8002026:	2014      	movs	r0, #20
 8002028:	f7ff f8a8 	bl	800117c <NRF24_read_register>
 800202c:	4603      	mov	r3, r0
 800202e:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "RX_PW_P3:\r\n		%d bytes \r\n", reg8Val&0x3F);
 8002032:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8002036:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800203a:	f107 0308 	add.w	r3, r7, #8
 800203e:	493c      	ldr	r1, [pc, #240]	; (8002130 <printRadioSettings+0x768>)
 8002040:	4618      	mov	r0, r3
 8002042:	f018 fd71 	bl	801ab28 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8002046:	f107 0308 	add.w	r3, r7, #8
 800204a:	4618      	mov	r0, r3
 800204c:	f7fe f948 	bl	80002e0 <strlen>
 8002050:	4603      	mov	r3, r0
 8002052:	b29a      	uxth	r2, r3
 8002054:	f107 0108 	add.w	r1, r7, #8
 8002058:	230a      	movs	r3, #10
 800205a:	482a      	ldr	r0, [pc, #168]	; (8002104 <printRadioSettings+0x73c>)
 800205c:	f00e f991 	bl	8010382 <HAL_UART_Transmit>
	
	reg8Val = NRF24_read_register(0x11+4);
 8002060:	2015      	movs	r0, #21
 8002062:	f7ff f88b 	bl	800117c <NRF24_read_register>
 8002066:	4603      	mov	r3, r0
 8002068:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "RX_PW_P4:\r\n		%d bytes \r\n", reg8Val&0x3F);
 800206c:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8002070:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002074:	f107 0308 	add.w	r3, r7, #8
 8002078:	492e      	ldr	r1, [pc, #184]	; (8002134 <printRadioSettings+0x76c>)
 800207a:	4618      	mov	r0, r3
 800207c:	f018 fd54 	bl	801ab28 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8002080:	f107 0308 	add.w	r3, r7, #8
 8002084:	4618      	mov	r0, r3
 8002086:	f7fe f92b 	bl	80002e0 <strlen>
 800208a:	4603      	mov	r3, r0
 800208c:	b29a      	uxth	r2, r3
 800208e:	f107 0108 	add.w	r1, r7, #8
 8002092:	230a      	movs	r3, #10
 8002094:	481b      	ldr	r0, [pc, #108]	; (8002104 <printRadioSettings+0x73c>)
 8002096:	f00e f974 	bl	8010382 <HAL_UART_Transmit>
	
	reg8Val = NRF24_read_register(0x11+5);
 800209a:	2016      	movs	r0, #22
 800209c:	f7ff f86e 	bl	800117c <NRF24_read_register>
 80020a0:	4603      	mov	r3, r0
 80020a2:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "RX_PW_P5:\r\n		%d bytes \r\n", reg8Val&0x3F);
 80020a6:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80020aa:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80020ae:	f107 0308 	add.w	r3, r7, #8
 80020b2:	4921      	ldr	r1, [pc, #132]	; (8002138 <printRadioSettings+0x770>)
 80020b4:	4618      	mov	r0, r3
 80020b6:	f018 fd37 	bl	801ab28 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 80020ba:	f107 0308 	add.w	r3, r7, #8
 80020be:	4618      	mov	r0, r3
 80020c0:	f7fe f90e 	bl	80002e0 <strlen>
 80020c4:	4603      	mov	r3, r0
 80020c6:	b29a      	uxth	r2, r3
 80020c8:	f107 0108 	add.w	r1, r7, #8
 80020cc:	230a      	movs	r3, #10
 80020ce:	480d      	ldr	r0, [pc, #52]	; (8002104 <printRadioSettings+0x73c>)
 80020d0:	f00e f957 	bl	8010382 <HAL_UART_Transmit>
	
	//i) Dynamic payload enable for each pipe
	reg8Val = NRF24_read_register(0x1c);
 80020d4:	201c      	movs	r0, #28
 80020d6:	f7ff f851 	bl	800117c <NRF24_read_register>
 80020da:	4603      	mov	r3, r0
 80020dc:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "DYNPD_pipe:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 80020e0:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80020e4:	f003 0301 	and.w	r3, r3, #1
	sprintf(uartTxBuf, "DYNPD_pipe:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 80020e8:	2b00      	cmp	r3, #0
 80020ea:	bfcc      	ite	gt
 80020ec:	2301      	movgt	r3, #1
 80020ee:	2300      	movle	r3, #0
 80020f0:	b2db      	uxtb	r3, r3
 80020f2:	461d      	mov	r5, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 80020f4:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80020f8:	f003 0302 	and.w	r3, r3, #2
 80020fc:	e01e      	b.n	800213c <printRadioSettings+0x774>
 80020fe:	bf00      	nop
 8002100:	0801bf04 	.word	0x0801bf04
 8002104:	24000414 	.word	0x24000414
 8002108:	0801bf18 	.word	0x0801bf18
 800210c:	0801bf48 	.word	0x0801bf48
 8002110:	0801bf78 	.word	0x0801bf78
 8002114:	0801bfa0 	.word	0x0801bfa0
 8002118:	0801bfc8 	.word	0x0801bfc8
 800211c:	0801bff0 	.word	0x0801bff0
 8002120:	0801c018 	.word	0x0801c018
 8002124:	0801c044 	.word	0x0801c044
 8002128:	0801c060 	.word	0x0801c060
 800212c:	0801c07c 	.word	0x0801c07c
 8002130:	0801c098 	.word	0x0801c098
 8002134:	0801c0b4 	.word	0x0801c0b4
 8002138:	0801c0d0 	.word	0x0801c0d0
	sprintf(uartTxBuf, "DYNPD_pipe:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 800213c:	2b00      	cmp	r3, #0
 800213e:	bfcc      	ite	gt
 8002140:	2301      	movgt	r3, #1
 8002142:	2300      	movle	r3, #0
 8002144:	b2db      	uxtb	r3, r3
 8002146:	461e      	mov	r6, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8002148:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800214c:	f003 0304 	and.w	r3, r3, #4
	sprintf(uartTxBuf, "DYNPD_pipe:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8002150:	2b00      	cmp	r3, #0
 8002152:	bfcc      	ite	gt
 8002154:	2301      	movgt	r3, #1
 8002156:	2300      	movle	r3, #0
 8002158:	b2db      	uxtb	r3, r3
 800215a:	461a      	mov	r2, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 800215c:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8002160:	f003 0308 	and.w	r3, r3, #8
	sprintf(uartTxBuf, "DYNPD_pipe:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8002164:	2b00      	cmp	r3, #0
 8002166:	bfcc      	ite	gt
 8002168:	2301      	movgt	r3, #1
 800216a:	2300      	movle	r3, #0
 800216c:	b2db      	uxtb	r3, r3
 800216e:	4619      	mov	r1, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8002170:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8002174:	f003 0310 	and.w	r3, r3, #16
	sprintf(uartTxBuf, "DYNPD_pipe:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8002178:	2b00      	cmp	r3, #0
 800217a:	bfcc      	ite	gt
 800217c:	2301      	movgt	r3, #1
 800217e:	2300      	movle	r3, #0
 8002180:	b2db      	uxtb	r3, r3
 8002182:	461c      	mov	r4, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8002184:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8002188:	f003 0320 	and.w	r3, r3, #32
	sprintf(uartTxBuf, "DYNPD_pipe:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 800218c:	2b00      	cmp	r3, #0
 800218e:	bfcc      	ite	gt
 8002190:	2301      	movgt	r3, #1
 8002192:	2300      	movle	r3, #0
 8002194:	b2db      	uxtb	r3, r3
 8002196:	f107 0008 	add.w	r0, r7, #8
 800219a:	9303      	str	r3, [sp, #12]
 800219c:	9402      	str	r4, [sp, #8]
 800219e:	9101      	str	r1, [sp, #4]
 80021a0:	9200      	str	r2, [sp, #0]
 80021a2:	4633      	mov	r3, r6
 80021a4:	462a      	mov	r2, r5
 80021a6:	494a      	ldr	r1, [pc, #296]	; (80022d0 <printRadioSettings+0x908>)
 80021a8:	f018 fcbe 	bl	801ab28 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 80021ac:	f107 0308 	add.w	r3, r7, #8
 80021b0:	4618      	mov	r0, r3
 80021b2:	f7fe f895 	bl	80002e0 <strlen>
 80021b6:	4603      	mov	r3, r0
 80021b8:	b29a      	uxth	r2, r3
 80021ba:	f107 0108 	add.w	r1, r7, #8
 80021be:	230a      	movs	r3, #10
 80021c0:	4844      	ldr	r0, [pc, #272]	; (80022d4 <printRadioSettings+0x90c>)
 80021c2:	f00e f8de 	bl	8010382 <HAL_UART_Transmit>
	
	//j) EN_DPL (is Dynamic payload feature enabled ?)
	reg8Val = NRF24_read_register(0x1d);
 80021c6:	201d      	movs	r0, #29
 80021c8:	f7fe ffd8 	bl	800117c <NRF24_read_register>
 80021cc:	4603      	mov	r3, r0
 80021ce:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	if(reg8Val&(1<<2)) sprintf(uartTxBuf, "EN_DPL:\r\n		Enabled \r\n");
 80021d2:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80021d6:	f003 0304 	and.w	r3, r3, #4
 80021da:	2b00      	cmp	r3, #0
 80021dc:	d00c      	beq.n	80021f8 <printRadioSettings+0x830>
 80021de:	f107 0308 	add.w	r3, r7, #8
 80021e2:	4a3d      	ldr	r2, [pc, #244]	; (80022d8 <printRadioSettings+0x910>)
 80021e4:	461c      	mov	r4, r3
 80021e6:	4615      	mov	r5, r2
 80021e8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80021ea:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80021ec:	e895 0003 	ldmia.w	r5, {r0, r1}
 80021f0:	6020      	str	r0, [r4, #0]
 80021f2:	3404      	adds	r4, #4
 80021f4:	8021      	strh	r1, [r4, #0]
 80021f6:	e00e      	b.n	8002216 <printRadioSettings+0x84e>
	else sprintf(uartTxBuf, "EN_DPL:\r\n		Disabled \r\n");
 80021f8:	f107 0308 	add.w	r3, r7, #8
 80021fc:	4a37      	ldr	r2, [pc, #220]	; (80022dc <printRadioSettings+0x914>)
 80021fe:	461c      	mov	r4, r3
 8002200:	4615      	mov	r5, r2
 8002202:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002204:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002206:	e895 0003 	ldmia.w	r5, {r0, r1}
 800220a:	6020      	str	r0, [r4, #0]
 800220c:	3404      	adds	r4, #4
 800220e:	8021      	strh	r1, [r4, #0]
 8002210:	3402      	adds	r4, #2
 8002212:	0c0b      	lsrs	r3, r1, #16
 8002214:	7023      	strb	r3, [r4, #0]
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8002216:	f107 0308 	add.w	r3, r7, #8
 800221a:	4618      	mov	r0, r3
 800221c:	f7fe f860 	bl	80002e0 <strlen>
 8002220:	4603      	mov	r3, r0
 8002222:	b29a      	uxth	r2, r3
 8002224:	f107 0108 	add.w	r1, r7, #8
 8002228:	230a      	movs	r3, #10
 800222a:	482a      	ldr	r0, [pc, #168]	; (80022d4 <printRadioSettings+0x90c>)
 800222c:	f00e f8a9 	bl	8010382 <HAL_UART_Transmit>
	
	//k) EN_ACK_PAY
	if(reg8Val&(1<<1)) sprintf(uartTxBuf, "EN_ACK_PAY:\r\n		Enabled \r\n");
 8002230:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8002234:	f003 0302 	and.w	r3, r3, #2
 8002238:	2b00      	cmp	r3, #0
 800223a:	d00b      	beq.n	8002254 <printRadioSettings+0x88c>
 800223c:	f107 0308 	add.w	r3, r7, #8
 8002240:	4a27      	ldr	r2, [pc, #156]	; (80022e0 <printRadioSettings+0x918>)
 8002242:	461c      	mov	r4, r3
 8002244:	4615      	mov	r5, r2
 8002246:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002248:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800224a:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800224e:	c403      	stmia	r4!, {r0, r1}
 8002250:	8022      	strh	r2, [r4, #0]
 8002252:	e00d      	b.n	8002270 <printRadioSettings+0x8a8>
	else sprintf(uartTxBuf, "EN_ACK_PAY:\r\n		Disabled \r\n");
 8002254:	f107 0308 	add.w	r3, r7, #8
 8002258:	4a22      	ldr	r2, [pc, #136]	; (80022e4 <printRadioSettings+0x91c>)
 800225a:	461c      	mov	r4, r3
 800225c:	4615      	mov	r5, r2
 800225e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002260:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002262:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8002266:	c403      	stmia	r4!, {r0, r1}
 8002268:	8022      	strh	r2, [r4, #0]
 800226a:	3402      	adds	r4, #2
 800226c:	0c13      	lsrs	r3, r2, #16
 800226e:	7023      	strb	r3, [r4, #0]
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8002270:	f107 0308 	add.w	r3, r7, #8
 8002274:	4618      	mov	r0, r3
 8002276:	f7fe f833 	bl	80002e0 <strlen>
 800227a:	4603      	mov	r3, r0
 800227c:	b29a      	uxth	r2, r3
 800227e:	f107 0108 	add.w	r1, r7, #8
 8002282:	230a      	movs	r3, #10
 8002284:	4813      	ldr	r0, [pc, #76]	; (80022d4 <printRadioSettings+0x90c>)
 8002286:	f00e f87c 	bl	8010382 <HAL_UART_Transmit>
	
	
	sprintf(uartTxBuf, "\r\n**********************************************\r\n");
 800228a:	f107 0308 	add.w	r3, r7, #8
 800228e:	4a16      	ldr	r2, [pc, #88]	; (80022e8 <printRadioSettings+0x920>)
 8002290:	461c      	mov	r4, r3
 8002292:	4615      	mov	r5, r2
 8002294:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002296:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002298:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800229a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800229c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800229e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80022a0:	682b      	ldr	r3, [r5, #0]
 80022a2:	461a      	mov	r2, r3
 80022a4:	8022      	strh	r2, [r4, #0]
 80022a6:	3402      	adds	r4, #2
 80022a8:	0c1b      	lsrs	r3, r3, #16
 80022aa:	7023      	strb	r3, [r4, #0]
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 80022ac:	f107 0308 	add.w	r3, r7, #8
 80022b0:	4618      	mov	r0, r3
 80022b2:	f7fe f815 	bl	80002e0 <strlen>
 80022b6:	4603      	mov	r3, r0
 80022b8:	b29a      	uxth	r2, r3
 80022ba:	f107 0108 	add.w	r1, r7, #8
 80022be:	230a      	movs	r3, #10
 80022c0:	4804      	ldr	r0, [pc, #16]	; (80022d4 <printRadioSettings+0x90c>)
 80022c2:	f00e f85e 	bl	8010382 <HAL_UART_Transmit>
}
 80022c6:	bf00      	nop
 80022c8:	3774      	adds	r7, #116	; 0x74
 80022ca:	46bd      	mov	sp, r7
 80022cc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80022ce:	bf00      	nop
 80022d0:	0801c0ec 	.word	0x0801c0ec
 80022d4:	24000414 	.word	0x24000414
 80022d8:	0801c138 	.word	0x0801c138
 80022dc:	0801c150 	.word	0x0801c150
 80022e0:	0801c168 	.word	0x0801c168
 80022e4:	0801c184 	.word	0x0801c184
 80022e8:	0801bd58 	.word	0x0801bd58

080022ec <WriteToBuff>:
 80022ec:	b580      	push	{r7, lr}
 80022ee:	b082      	sub	sp, #8
 80022f0:	af00      	add	r7, sp, #0
 80022f2:	6078      	str	r0, [r7, #4]
 80022f4:	6039      	str	r1, [r7, #0]
 80022f6:	683b      	ldr	r3, [r7, #0]
 80022f8:	2b01      	cmp	r3, #1
 80022fa:	dd03      	ble.n	8002304 <WriteToBuff+0x18>
 80022fc:	683b      	ldr	r3, [r7, #0]
 80022fe:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002302:	db01      	blt.n	8002308 <WriteToBuff+0x1c>
 8002304:	2303      	movs	r3, #3
 8002306:	e091      	b.n	800242c <WriteToBuff+0x140>
 8002308:	4b4a      	ldr	r3, [pc, #296]	; (8002434 <WriteToBuff+0x148>)
 800230a:	f503 2380 	add.w	r3, r3, #262144	; 0x40000
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002314:	d23a      	bcs.n	800238c <WriteToBuff+0xa0>
 8002316:	4b47      	ldr	r3, [pc, #284]	; (8002434 <WriteToBuff+0x148>)
 8002318:	f503 2380 	add.w	r3, r3, #262144	; 0x40000
 800231c:	681a      	ldr	r2, [r3, #0]
 800231e:	683b      	ldr	r3, [r7, #0]
 8002320:	4413      	add	r3, r2
 8002322:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002326:	d331      	bcc.n	800238c <WriteToBuff+0xa0>
 8002328:	4b42      	ldr	r3, [pc, #264]	; (8002434 <WriteToBuff+0x148>)
 800232a:	f503 2380 	add.w	r3, r3, #262144	; 0x40000
 800232e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002332:	601a      	str	r2, [r3, #0]
 8002334:	4b3f      	ldr	r3, [pc, #252]	; (8002434 <WriteToBuff+0x148>)
 8002336:	f503 2380 	add.w	r3, r3, #262144	; 0x40000
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	4a3d      	ldr	r2, [pc, #244]	; (8002434 <WriteToBuff+0x148>)
 800233e:	4413      	add	r3, r2
 8002340:	683a      	ldr	r2, [r7, #0]
 8002342:	6879      	ldr	r1, [r7, #4]
 8002344:	4618      	mov	r0, r3
 8002346:	f018 fa73 	bl	801a830 <memcpy>
 800234a:	4b3a      	ldr	r3, [pc, #232]	; (8002434 <WriteToBuff+0x148>)
 800234c:	f503 2380 	add.w	r3, r3, #262144	; 0x40000
 8002350:	681a      	ldr	r2, [r3, #0]
 8002352:	683b      	ldr	r3, [r7, #0]
 8002354:	441a      	add	r2, r3
 8002356:	4b37      	ldr	r3, [pc, #220]	; (8002434 <WriteToBuff+0x148>)
 8002358:	f503 2380 	add.w	r3, r3, #262144	; 0x40000
 800235c:	601a      	str	r2, [r3, #0]
 800235e:	4b36      	ldr	r3, [pc, #216]	; (8002438 <WriteToBuff+0x14c>)
 8002360:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002364:	4933      	ldr	r1, [pc, #204]	; (8002434 <WriteToBuff+0x148>)
 8002366:	4835      	ldr	r0, [pc, #212]	; (800243c <WriteToBuff+0x150>)
 8002368:	f016 fcbf 	bl	8018cea <f_write>
 800236c:	4603      	mov	r3, r0
 800236e:	2b00      	cmp	r3, #0
 8002370:	d10a      	bne.n	8002388 <WriteToBuff+0x9c>
 8002372:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002376:	2100      	movs	r1, #0
 8002378:	4831      	ldr	r0, [pc, #196]	; (8002440 <WriteToBuff+0x154>)
 800237a:	f018 fa64 	bl	801a846 <memset>
 800237e:	482f      	ldr	r0, [pc, #188]	; (800243c <WriteToBuff+0x150>)
 8002380:	f016 fe28 	bl	8018fd4 <f_sync>
 8002384:	2301      	movs	r3, #1
 8002386:	e051      	b.n	800242c <WriteToBuff+0x140>
 8002388:	2304      	movs	r3, #4
 800238a:	e04f      	b.n	800242c <WriteToBuff+0x140>
 800238c:	4b29      	ldr	r3, [pc, #164]	; (8002434 <WriteToBuff+0x148>)
 800238e:	f503 2380 	add.w	r3, r3, #262144	; 0x40000
 8002392:	681a      	ldr	r2, [r3, #0]
 8002394:	683b      	ldr	r3, [r7, #0]
 8002396:	4413      	add	r3, r2
 8002398:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800239c:	d330      	bcc.n	8002400 <WriteToBuff+0x114>
 800239e:	4b25      	ldr	r3, [pc, #148]	; (8002434 <WriteToBuff+0x148>)
 80023a0:	f503 2380 	add.w	r3, r3, #262144	; 0x40000
 80023a4:	2200      	movs	r2, #0
 80023a6:	601a      	str	r2, [r3, #0]
 80023a8:	4b22      	ldr	r3, [pc, #136]	; (8002434 <WriteToBuff+0x148>)
 80023aa:	f503 2380 	add.w	r3, r3, #262144	; 0x40000
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	4a20      	ldr	r2, [pc, #128]	; (8002434 <WriteToBuff+0x148>)
 80023b2:	4413      	add	r3, r2
 80023b4:	683a      	ldr	r2, [r7, #0]
 80023b6:	6879      	ldr	r1, [r7, #4]
 80023b8:	4618      	mov	r0, r3
 80023ba:	f018 fa39 	bl	801a830 <memcpy>
 80023be:	4b1d      	ldr	r3, [pc, #116]	; (8002434 <WriteToBuff+0x148>)
 80023c0:	f503 2380 	add.w	r3, r3, #262144	; 0x40000
 80023c4:	681a      	ldr	r2, [r3, #0]
 80023c6:	683b      	ldr	r3, [r7, #0]
 80023c8:	441a      	add	r2, r3
 80023ca:	4b1a      	ldr	r3, [pc, #104]	; (8002434 <WriteToBuff+0x148>)
 80023cc:	f503 2380 	add.w	r3, r3, #262144	; 0x40000
 80023d0:	601a      	str	r2, [r3, #0]
 80023d2:	4b19      	ldr	r3, [pc, #100]	; (8002438 <WriteToBuff+0x14c>)
 80023d4:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80023d8:	4919      	ldr	r1, [pc, #100]	; (8002440 <WriteToBuff+0x154>)
 80023da:	4818      	ldr	r0, [pc, #96]	; (800243c <WriteToBuff+0x150>)
 80023dc:	f016 fc85 	bl	8018cea <f_write>
 80023e0:	4603      	mov	r3, r0
 80023e2:	2b00      	cmp	r3, #0
 80023e4:	d10a      	bne.n	80023fc <WriteToBuff+0x110>
 80023e6:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80023ea:	2100      	movs	r1, #0
 80023ec:	4811      	ldr	r0, [pc, #68]	; (8002434 <WriteToBuff+0x148>)
 80023ee:	f018 fa2a 	bl	801a846 <memset>
 80023f2:	4812      	ldr	r0, [pc, #72]	; (800243c <WriteToBuff+0x150>)
 80023f4:	f016 fdee 	bl	8018fd4 <f_sync>
 80023f8:	2302      	movs	r3, #2
 80023fa:	e017      	b.n	800242c <WriteToBuff+0x140>
 80023fc:	2304      	movs	r3, #4
 80023fe:	e015      	b.n	800242c <WriteToBuff+0x140>
 8002400:	4b0c      	ldr	r3, [pc, #48]	; (8002434 <WriteToBuff+0x148>)
 8002402:	f503 2380 	add.w	r3, r3, #262144	; 0x40000
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	4a0a      	ldr	r2, [pc, #40]	; (8002434 <WriteToBuff+0x148>)
 800240a:	4413      	add	r3, r2
 800240c:	683a      	ldr	r2, [r7, #0]
 800240e:	6879      	ldr	r1, [r7, #4]
 8002410:	4618      	mov	r0, r3
 8002412:	f018 fa0d 	bl	801a830 <memcpy>
 8002416:	4b07      	ldr	r3, [pc, #28]	; (8002434 <WriteToBuff+0x148>)
 8002418:	f503 2380 	add.w	r3, r3, #262144	; 0x40000
 800241c:	681a      	ldr	r2, [r3, #0]
 800241e:	683b      	ldr	r3, [r7, #0]
 8002420:	441a      	add	r2, r3
 8002422:	4b04      	ldr	r3, [pc, #16]	; (8002434 <WriteToBuff+0x148>)
 8002424:	f503 2380 	add.w	r3, r3, #262144	; 0x40000
 8002428:	601a      	str	r2, [r3, #0]
 800242a:	2300      	movs	r3, #0
 800242c:	4618      	mov	r0, r3
 800242e:	3708      	adds	r7, #8
 8002430:	46bd      	mov	sp, r7
 8002432:	bd80      	pop	{r7, pc}
 8002434:	240004a0 	.word	0x240004a0
 8002438:	240440f8 	.word	0x240440f8
 800243c:	24040510 	.word	0x24040510
 8002440:	240204a0 	.word	0x240204a0

08002444 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002444:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002448:	f5ad 4dd5 	sub.w	sp, sp, #27264	; 0x6a80
 800244c:	b09e      	sub	sp, #120	; 0x78
 800244e:	af22      	add	r7, sp, #136	; 0x88
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002450:	f002 fc2a 	bl	8004ca8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002454:	f001 fb5a 	bl	8003b0c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002458:	f001 fe86 	bl	8004168 <MX_GPIO_Init>
  MX_DMA_Init();
 800245c:	f001 fe64 	bl	8004128 <MX_DMA_Init>
  MX_SDMMC1_SD_Init();
 8002460:	f001 fd52 	bl	8003f08 <MX_SDMMC1_SD_Init>
  MX_FATFS_Init();
 8002464:	f011 fab8 	bl	80139d8 <MX_FATFS_Init>
  MX_USB_DEVICE_Init();
 8002468:	f016 feb8 	bl	80191dc <MX_USB_DEVICE_Init>
  MX_FDCAN1_Init();
 800246c:	f001 fc58 	bl	8003d20 <MX_FDCAN1_Init>
  MX_FDCAN2_Init();
 8002470:	f001 fcbc 	bl	8003dec <MX_FDCAN2_Init>
  MX_UART8_Init();
 8002474:	f001 fdc0 	bl	8003ff8 <MX_UART8_Init>
  MX_USART3_UART_Init();
 8002478:	f001 fe0a 	bl	8004090 <MX_USART3_UART_Init>
  MX_SPI1_Init();
 800247c:	f001 fd66 	bl	8003f4c <MX_SPI1_Init>
  MX_RTC_Init();
 8002480:	f001 fd18 	bl	8003eb4 <MX_RTC_Init>
  /* USER CODE BEGIN 2 */
  //HAL_Delay(1000);//NEEDED FOR USB MASS STORAGE TO WORK
  HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_0);
 8002484:	2101      	movs	r1, #1
 8002486:	48b0      	ldr	r0, [pc, #704]	; (8002748 <main+0x304>)
 8002488:	f006 f9d3 	bl	8008832 <HAL_GPIO_TogglePin>
  //Telemetry
  NRF24_begin(TELE_CE_GPIO_Port, TELE_CS_Pin, TELE_CE_Pin, hspi1);
 800248c:	4caf      	ldr	r4, [pc, #700]	; (800274c <main+0x308>)
 800248e:	4668      	mov	r0, sp
 8002490:	1d23      	adds	r3, r4, #4
 8002492:	2284      	movs	r2, #132	; 0x84
 8002494:	4619      	mov	r1, r3
 8002496:	f018 f9cb 	bl	801a830 <memcpy>
 800249a:	6823      	ldr	r3, [r4, #0]
 800249c:	2201      	movs	r2, #1
 800249e:	2102      	movs	r1, #2
 80024a0:	48ab      	ldr	r0, [pc, #684]	; (8002750 <main+0x30c>)
 80024a2:	f7fe ff45 	bl	8001330 <NRF24_begin>
    //nrf24_DebugUART_Init(huart3);



    // TRANSMIT NO ACK //
    NRF24_stopListening();
 80024a6:	f7ff f823 	bl	80014f0 <NRF24_stopListening>
    NRF24_openWritingPipe(TxpipeAddrs);
 80024aa:	4baa      	ldr	r3, [pc, #680]	; (8002754 <main+0x310>)
 80024ac:	e9d3 3400 	ldrd	r3, r4, [r3]
 80024b0:	4618      	mov	r0, r3
 80024b2:	4621      	mov	r1, r4
 80024b4:	f7ff f87c 	bl	80015b0 <NRF24_openWritingPipe>
    NRF24_setAutoAck(false);
 80024b8:	2000      	movs	r0, #0
 80024ba:	f7ff f905 	bl	80016c8 <NRF24_setAutoAck>
    NRF24_setChannel(42);
 80024be:	202a      	movs	r0, #42	; 0x2a
 80024c0:	f7ff f8b5 	bl	800162e <NRF24_setChannel>
    NRF24_setPayloadSize(32);
 80024c4:	2020      	movs	r0, #32
 80024c6:	f7ff f8c7 	bl	8001658 <NRF24_setPayloadSize>

    printRadioSettings();
 80024ca:	f7ff fa7d 	bl	80019c8 <printRadioSettings>
  //END Telemetry
  printf("Starting\n");
 80024ce:	48a2      	ldr	r0, [pc, #648]	; (8002758 <main+0x314>)
 80024d0:	f018 fade 	bl	801aa90 <puts>
  FDCAN_Config(&hfdcan1);
 80024d4:	48a1      	ldr	r0, [pc, #644]	; (800275c <main+0x318>)
 80024d6:	f7fe f8db 	bl	8000690 <FDCAN_Config>
  //GPS DMA
  HAL_UART_Receive_DMA(&huart3, (uint8_t *)rxBuf, BUFFLENGTH);
 80024da:	f44f 722f 	mov.w	r2, #700	; 0x2bc
 80024de:	49a0      	ldr	r1, [pc, #640]	; (8002760 <main+0x31c>)
 80024e0:	48a0      	ldr	r0, [pc, #640]	; (8002764 <main+0x320>)
 80024e2:	f00d ffe5 	bl	80104b0 <HAL_UART_Receive_DMA>
  HAL_Delay(1000);//GPS required this in testing, maybe remove?
 80024e6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80024ea:	f002 fc6f 	bl	8004dcc <HAL_Delay>
  //variables required for 10Hz GPS
  uint16_t measRate = 100;
 80024ee:	2364      	movs	r3, #100	; 0x64
 80024f0:	f646 222a 	movw	r2, #27178	; 0x6a2a
 80024f4:	443a      	add	r2, r7
 80024f6:	8013      	strh	r3, [r2, #0]
  uint16_t navRate = 1;
 80024f8:	2301      	movs	r3, #1
 80024fa:	f646 2228 	movw	r2, #27176	; 0x6a28
 80024fe:	443a      	add	r2, r7
 8002500:	8013      	strh	r3, [r2, #0]
  uint16_t timeRef = 0;
 8002502:	2300      	movs	r3, #0
 8002504:	f646 2226 	movw	r2, #27174	; 0x6a26
 8002508:	443a      	add	r2, r7
 800250a:	8013      	strh	r3, [r2, #0]
  gps_rate_config(&huart3, measRate, navRate, timeRef);
 800250c:	f646 2326 	movw	r3, #27174	; 0x6a26
 8002510:	443b      	add	r3, r7
 8002512:	881b      	ldrh	r3, [r3, #0]
 8002514:	f646 2228 	movw	r2, #27176	; 0x6a28
 8002518:	443a      	add	r2, r7
 800251a:	8812      	ldrh	r2, [r2, #0]
 800251c:	f646 212a 	movw	r1, #27178	; 0x6a2a
 8002520:	4439      	add	r1, r7
 8002522:	8809      	ldrh	r1, [r1, #0]
 8002524:	488f      	ldr	r0, [pc, #572]	; (8002764 <main+0x320>)
 8002526:	f7fe fd39 	bl	8000f9c <gps_rate_config>

  gps_msg_config(&huart3, "DTM", 0);//ERROR
 800252a:	2200      	movs	r2, #0
 800252c:	498e      	ldr	r1, [pc, #568]	; (8002768 <main+0x324>)
 800252e:	488d      	ldr	r0, [pc, #564]	; (8002764 <main+0x320>)
 8002530:	f7fe fcc4 	bl	8000ebc <gps_msg_config>
  gps_msg_config(&huart3, "GAQ", 0);
 8002534:	2200      	movs	r2, #0
 8002536:	498d      	ldr	r1, [pc, #564]	; (800276c <main+0x328>)
 8002538:	488a      	ldr	r0, [pc, #552]	; (8002764 <main+0x320>)
 800253a:	f7fe fcbf 	bl	8000ebc <gps_msg_config>
  gps_msg_config(&huart3, "GBQ", 0);
 800253e:	2200      	movs	r2, #0
 8002540:	498b      	ldr	r1, [pc, #556]	; (8002770 <main+0x32c>)
 8002542:	4888      	ldr	r0, [pc, #544]	; (8002764 <main+0x320>)
 8002544:	f7fe fcba 	bl	8000ebc <gps_msg_config>
  gps_msg_config(&huart3, "GBS", 0);//ERROR
 8002548:	2200      	movs	r2, #0
 800254a:	498a      	ldr	r1, [pc, #552]	; (8002774 <main+0x330>)
 800254c:	4885      	ldr	r0, [pc, #532]	; (8002764 <main+0x320>)
 800254e:	f7fe fcb5 	bl	8000ebc <gps_msg_config>
  gps_msg_config(&huart3, "GGA", 0);//ERROR
 8002552:	2200      	movs	r2, #0
 8002554:	4988      	ldr	r1, [pc, #544]	; (8002778 <main+0x334>)
 8002556:	4883      	ldr	r0, [pc, #524]	; (8002764 <main+0x320>)
 8002558:	f7fe fcb0 	bl	8000ebc <gps_msg_config>
  gps_msg_config(&huart3, "GLL", 0);//ERROR
 800255c:	2200      	movs	r2, #0
 800255e:	4987      	ldr	r1, [pc, #540]	; (800277c <main+0x338>)
 8002560:	4880      	ldr	r0, [pc, #512]	; (8002764 <main+0x320>)
 8002562:	f7fe fcab 	bl	8000ebc <gps_msg_config>
  gps_msg_config(&huart3, "GLQ", 0);
 8002566:	2200      	movs	r2, #0
 8002568:	4985      	ldr	r1, [pc, #532]	; (8002780 <main+0x33c>)
 800256a:	487e      	ldr	r0, [pc, #504]	; (8002764 <main+0x320>)
 800256c:	f7fe fca6 	bl	8000ebc <gps_msg_config>
  gps_msg_config(&huart3, "GNQ", 0);
 8002570:	2200      	movs	r2, #0
 8002572:	4984      	ldr	r1, [pc, #528]	; (8002784 <main+0x340>)
 8002574:	487b      	ldr	r0, [pc, #492]	; (8002764 <main+0x320>)
 8002576:	f7fe fca1 	bl	8000ebc <gps_msg_config>
  gps_msg_config(&huart3, "GNS", 0);//ERROR
 800257a:	2200      	movs	r2, #0
 800257c:	4982      	ldr	r1, [pc, #520]	; (8002788 <main+0x344>)
 800257e:	4879      	ldr	r0, [pc, #484]	; (8002764 <main+0x320>)
 8002580:	f7fe fc9c 	bl	8000ebc <gps_msg_config>
  gps_msg_config(&huart3, "GPQ", 0);
 8002584:	2200      	movs	r2, #0
 8002586:	4981      	ldr	r1, [pc, #516]	; (800278c <main+0x348>)
 8002588:	4876      	ldr	r0, [pc, #472]	; (8002764 <main+0x320>)
 800258a:	f7fe fc97 	bl	8000ebc <gps_msg_config>
  gps_msg_config(&huart3, "GRS", 0);//ERROR
 800258e:	2200      	movs	r2, #0
 8002590:	497f      	ldr	r1, [pc, #508]	; (8002790 <main+0x34c>)
 8002592:	4874      	ldr	r0, [pc, #464]	; (8002764 <main+0x320>)
 8002594:	f7fe fc92 	bl	8000ebc <gps_msg_config>
  gps_msg_config(&huart3, "GSA", 0);//ERROR
 8002598:	2200      	movs	r2, #0
 800259a:	497e      	ldr	r1, [pc, #504]	; (8002794 <main+0x350>)
 800259c:	4871      	ldr	r0, [pc, #452]	; (8002764 <main+0x320>)
 800259e:	f7fe fc8d 	bl	8000ebc <gps_msg_config>
  gps_msg_config(&huart3, "GST", 0);//ERROR
 80025a2:	2200      	movs	r2, #0
 80025a4:	497c      	ldr	r1, [pc, #496]	; (8002798 <main+0x354>)
 80025a6:	486f      	ldr	r0, [pc, #444]	; (8002764 <main+0x320>)
 80025a8:	f7fe fc88 	bl	8000ebc <gps_msg_config>
  gps_msg_config(&huart3, "GSV", 0);//ERROR
 80025ac:	2200      	movs	r2, #0
 80025ae:	497b      	ldr	r1, [pc, #492]	; (800279c <main+0x358>)
 80025b0:	486c      	ldr	r0, [pc, #432]	; (8002764 <main+0x320>)
 80025b2:	f7fe fc83 	bl	8000ebc <gps_msg_config>
  gps_msg_config(&huart3, "RLM", 0);
 80025b6:	2200      	movs	r2, #0
 80025b8:	4979      	ldr	r1, [pc, #484]	; (80027a0 <main+0x35c>)
 80025ba:	486a      	ldr	r0, [pc, #424]	; (8002764 <main+0x320>)
 80025bc:	f7fe fc7e 	bl	8000ebc <gps_msg_config>
  gps_msg_config(&huart3, "RMC", 1);//ERROR
 80025c0:	2201      	movs	r2, #1
 80025c2:	4978      	ldr	r1, [pc, #480]	; (80027a4 <main+0x360>)
 80025c4:	4867      	ldr	r0, [pc, #412]	; (8002764 <main+0x320>)
 80025c6:	f7fe fc79 	bl	8000ebc <gps_msg_config>
  gps_msg_config(&huart3, "TXT", 0);
 80025ca:	2200      	movs	r2, #0
 80025cc:	4976      	ldr	r1, [pc, #472]	; (80027a8 <main+0x364>)
 80025ce:	4865      	ldr	r0, [pc, #404]	; (8002764 <main+0x320>)
 80025d0:	f7fe fc74 	bl	8000ebc <gps_msg_config>
  gps_msg_config(&huart3, "VLW", 0);//ERROR
 80025d4:	2200      	movs	r2, #0
 80025d6:	4975      	ldr	r1, [pc, #468]	; (80027ac <main+0x368>)
 80025d8:	4862      	ldr	r0, [pc, #392]	; (8002764 <main+0x320>)
 80025da:	f7fe fc6f 	bl	8000ebc <gps_msg_config>
  gps_msg_config(&huart3, "VTG", 0);//ERROR
 80025de:	2200      	movs	r2, #0
 80025e0:	4973      	ldr	r1, [pc, #460]	; (80027b0 <main+0x36c>)
 80025e2:	4860      	ldr	r0, [pc, #384]	; (8002764 <main+0x320>)
 80025e4:	f7fe fc6a 	bl	8000ebc <gps_msg_config>
  gps_msg_config(&huart3, "ZDA", 0);//ERROR
 80025e8:	2200      	movs	r2, #0
 80025ea:	4972      	ldr	r1, [pc, #456]	; (80027b4 <main+0x370>)
 80025ec:	485d      	ldr	r0, [pc, #372]	; (8002764 <main+0x320>)
 80025ee:	f7fe fc65 	bl	8000ebc <gps_msg_config>

  if(f_mount(&myFATAFS, SDPath, 1) == FR_OK){
 80025f2:	2201      	movs	r2, #1
 80025f4:	4970      	ldr	r1, [pc, #448]	; (80027b8 <main+0x374>)
 80025f6:	4871      	ldr	r0, [pc, #452]	; (80027bc <main+0x378>)
 80025f8:	f016 f834 	bl	8018664 <f_mount>
 80025fc:	4603      	mov	r3, r0
 80025fe:	2b00      	cmp	r3, #0
 8002600:	f040 8227 	bne.w	8002a52 <main+0x60e>
  	  //HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_0);
  	  char Filename[20] = "test";
 8002604:	f644 62f0 	movw	r2, #20208	; 0x4ef0
 8002608:	443a      	add	r2, r7
 800260a:	496d      	ldr	r1, [pc, #436]	; (80027c0 <main+0x37c>)
 800260c:	4613      	mov	r3, r2
 800260e:	c903      	ldmia	r1, {r0, r1}
 8002610:	6018      	str	r0, [r3, #0]
 8002612:	3304      	adds	r3, #4
 8002614:	7019      	strb	r1, [r3, #0]
 8002616:	1d53      	adds	r3, r2, #5
 8002618:	2200      	movs	r2, #0
 800261a:	601a      	str	r2, [r3, #0]
 800261c:	605a      	str	r2, [r3, #4]
 800261e:	609a      	str	r2, [r3, #8]
 8002620:	f8c3 200b 	str.w	r2, [r3, #11]
      char FilePath[150];
      char ConfigPath[] ="Config.csv\0";
 8002624:	4b67      	ldr	r3, [pc, #412]	; (80027c4 <main+0x380>)
 8002626:	f646 2270 	movw	r2, #27248	; 0x6a70
 800262a:	443a      	add	r2, r7
 800262c:	4413      	add	r3, r2
 800262e:	4a66      	ldr	r2, [pc, #408]	; (80027c8 <main+0x384>)
 8002630:	ca07      	ldmia	r2, {r0, r1, r2}
 8002632:	e883 0007 	stmia.w	r3, {r0, r1, r2}
      char ConfigParams[20000];
      //Tries to open config File
      if(f_open(&Config, ConfigPath, FA_READ) == FR_NO_FILE){
 8002636:	4b63      	ldr	r3, [pc, #396]	; (80027c4 <main+0x380>)
 8002638:	f646 2270 	movw	r2, #27248	; 0x6a70
 800263c:	443a      	add	r2, r7
 800263e:	4413      	add	r3, r2
 8002640:	2201      	movs	r2, #1
 8002642:	4619      	mov	r1, r3
 8002644:	4861      	ldr	r0, [pc, #388]	; (80027cc <main+0x388>)
 8002646:	f016 f853 	bl	80186f0 <f_open>
 800264a:	4603      	mov	r3, r0
 800264c:	2b04      	cmp	r3, #4
 800264e:	d142      	bne.n	80026d6 <main+0x292>
        //If file doesn't exist creates a file using hard coded defaults and passes those to internal config array
        f_open(&Config, ConfigPath, FA_WRITE | FA_CREATE_ALWAYS);
 8002650:	4b5c      	ldr	r3, [pc, #368]	; (80027c4 <main+0x380>)
 8002652:	f646 2270 	movw	r2, #27248	; 0x6a70
 8002656:	443a      	add	r2, r7
 8002658:	4413      	add	r3, r2
 800265a:	220a      	movs	r2, #10
 800265c:	4619      	mov	r1, r3
 800265e:	485b      	ldr	r0, [pc, #364]	; (80027cc <main+0x388>)
 8002660:	f016 f846 	bl	80186f0 <f_open>

        sprintf(ConfigParams, "ID,Device,Bytes,Distribution,Instruction,Description\n");
 8002664:	4b5a      	ldr	r3, [pc, #360]	; (80027d0 <main+0x38c>)
 8002666:	f646 2270 	movw	r2, #27248	; 0x6a70
 800266a:	443a      	add	r2, r7
 800266c:	4413      	add	r3, r2
 800266e:	4a59      	ldr	r2, [pc, #356]	; (80027d4 <main+0x390>)
 8002670:	461c      	mov	r4, r3
 8002672:	4615      	mov	r5, r2
 8002674:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002676:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002678:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800267a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800267c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800267e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002680:	e895 0003 	ldmia.w	r5, {r0, r1}
 8002684:	6020      	str	r0, [r4, #0]
 8002686:	3404      	adds	r4, #4
 8002688:	8021      	strh	r1, [r4, #0]
        sprintf(ConfigParams + strlen(ConfigParams),"0x50,Datalogger,8,44,%%u %%u,FileNumber(uint32_t) CurrentMillis(uint32_t),\n");
 800268a:	4b51      	ldr	r3, [pc, #324]	; (80027d0 <main+0x38c>)
 800268c:	f646 2270 	movw	r2, #27248	; 0x6a70
 8002690:	443a      	add	r2, r7
 8002692:	4413      	add	r3, r2
 8002694:	4618      	mov	r0, r3
 8002696:	f7fd fe23 	bl	80002e0 <strlen>
 800269a:	4602      	mov	r2, r0
 800269c:	4b4c      	ldr	r3, [pc, #304]	; (80027d0 <main+0x38c>)
 800269e:	f646 2170 	movw	r1, #27248	; 0x6a70
 80026a2:	4439      	add	r1, r7
 80026a4:	440b      	add	r3, r1
 80026a6:	4413      	add	r3, r2
 80026a8:	494b      	ldr	r1, [pc, #300]	; (80027d8 <main+0x394>)
 80026aa:	4618      	mov	r0, r3
 80026ac:	f018 fa3c 	bl	801ab28 <siprintf>

        f_write(&Config, ConfigParams, strlen(ConfigParams), &ConfByteW);
 80026b0:	4b47      	ldr	r3, [pc, #284]	; (80027d0 <main+0x38c>)
 80026b2:	f646 2270 	movw	r2, #27248	; 0x6a70
 80026b6:	443a      	add	r2, r7
 80026b8:	4413      	add	r3, r2
 80026ba:	4618      	mov	r0, r3
 80026bc:	f7fd fe10 	bl	80002e0 <strlen>
 80026c0:	4602      	mov	r2, r0
 80026c2:	4943      	ldr	r1, [pc, #268]	; (80027d0 <main+0x38c>)
 80026c4:	f646 2370 	movw	r3, #27248	; 0x6a70
 80026c8:	443b      	add	r3, r7
 80026ca:	4419      	add	r1, r3
 80026cc:	4b43      	ldr	r3, [pc, #268]	; (80027dc <main+0x398>)
 80026ce:	483f      	ldr	r0, [pc, #252]	; (80027cc <main+0x388>)
 80026d0:	f016 fb0b 	bl	8018cea <f_write>
 80026d4:	e011      	b.n	80026fa <main+0x2b6>
      }else{
        //If file does exist reads in config parameters to internal config array
        f_read(&Config, ConfigParams, strlen(ConfigParams), &ConfByteR);
 80026d6:	4b3e      	ldr	r3, [pc, #248]	; (80027d0 <main+0x38c>)
 80026d8:	f646 2270 	movw	r2, #27248	; 0x6a70
 80026dc:	443a      	add	r2, r7
 80026de:	4413      	add	r3, r2
 80026e0:	4618      	mov	r0, r3
 80026e2:	f7fd fdfd 	bl	80002e0 <strlen>
 80026e6:	4602      	mov	r2, r0
 80026e8:	4939      	ldr	r1, [pc, #228]	; (80027d0 <main+0x38c>)
 80026ea:	f646 2370 	movw	r3, #27248	; 0x6a70
 80026ee:	443b      	add	r3, r7
 80026f0:	4419      	add	r1, r3
 80026f2:	4b3b      	ldr	r3, [pc, #236]	; (80027e0 <main+0x39c>)
 80026f4:	4835      	ldr	r0, [pc, #212]	; (80027cc <main+0x388>)
 80026f6:	f016 f9b9 	bl	8018a6c <f_read>
      }
      f_close(&Config);
 80026fa:	4834      	ldr	r0, [pc, #208]	; (80027cc <main+0x388>)
 80026fc:	f016 fce8 	bl	80190d0 <f_close>
      //MAKE NEW FILE INCREMENTED BY 1
      
      //Fill ReadInstructions
      char delim[] = ",";
 8002700:	4b38      	ldr	r3, [pc, #224]	; (80027e4 <main+0x3a0>)
 8002702:	f646 2270 	movw	r2, #27248	; 0x6a70
 8002706:	443a      	add	r2, r7
 8002708:	4413      	add	r3, r2
 800270a:	222c      	movs	r2, #44	; 0x2c
 800270c:	801a      	strh	r2, [r3, #0]
      uint32_t i,j = 0;
 800270e:	2300      	movs	r3, #0
 8002710:	f646 2268 	movw	r2, #27240	; 0x6a68
 8002714:	443a      	add	r2, r7
 8002716:	6013      	str	r3, [r2, #0]
      char *ptr = strtok(ConfigParams, delim);
 8002718:	4a32      	ldr	r2, [pc, #200]	; (80027e4 <main+0x3a0>)
 800271a:	f646 2370 	movw	r3, #27248	; 0x6a70
 800271e:	443b      	add	r3, r7
 8002720:	441a      	add	r2, r3
 8002722:	4b2b      	ldr	r3, [pc, #172]	; (80027d0 <main+0x38c>)
 8002724:	f646 2170 	movw	r1, #27248	; 0x6a70
 8002728:	4439      	add	r1, r7
 800272a:	440b      	add	r3, r1
 800272c:	4611      	mov	r1, r2
 800272e:	4618      	mov	r0, r3
 8002730:	f018 fa22 	bl	801ab78 <strtok>
 8002734:	f646 2364 	movw	r3, #27236	; 0x6a64
 8002738:	443b      	add	r3, r7
 800273a:	6018      	str	r0, [r3, #0]
      //skip over header
      for(int c = 0; c < 6; c++){
 800273c:	2300      	movs	r3, #0
 800273e:	f646 2260 	movw	r2, #27232	; 0x6a60
 8002742:	443a      	add	r2, r7
 8002744:	6013      	str	r3, [r2, #0]
 8002746:	e065      	b.n	8002814 <main+0x3d0>
 8002748:	58020400 	.word	0x58020400
 800274c:	240448dc 	.word	0x240448dc
 8002750:	58020000 	.word	0x58020000
 8002754:	24000000 	.word	0x24000000
 8002758:	0801c29c 	.word	0x0801c29c
 800275c:	240447b0 	.word	0x240447b0
 8002760:	2404432c 	.word	0x2404432c
 8002764:	24044660 	.word	0x24044660
 8002768:	0801c2a8 	.word	0x0801c2a8
 800276c:	0801c2ac 	.word	0x0801c2ac
 8002770:	0801c2b0 	.word	0x0801c2b0
 8002774:	0801c2b4 	.word	0x0801c2b4
 8002778:	0801c2b8 	.word	0x0801c2b8
 800277c:	0801c2bc 	.word	0x0801c2bc
 8002780:	0801c2c0 	.word	0x0801c2c0
 8002784:	0801c2c4 	.word	0x0801c2c4
 8002788:	0801c2c8 	.word	0x0801c2c8
 800278c:	0801c2cc 	.word	0x0801c2cc
 8002790:	0801c2d0 	.word	0x0801c2d0
 8002794:	0801c2d4 	.word	0x0801c2d4
 8002798:	0801c2d8 	.word	0x0801c2d8
 800279c:	0801c2dc 	.word	0x0801c2dc
 80027a0:	0801c2e0 	.word	0x0801c2e0
 80027a4:	0801c2e4 	.word	0x0801c2e4
 80027a8:	0801c2e8 	.word	0x0801c2e8
 80027ac:	0801c2ec 	.word	0x0801c2ec
 80027b0:	0801c2f0 	.word	0x0801c2f0
 80027b4:	0801c2f4 	.word	0x0801c2f4
 80027b8:	24044a0c 	.word	0x24044a0c
 80027bc:	24043df8 	.word	0x24043df8
 80027c0:	0801c3e0 	.word	0x0801c3e0
 80027c4:	ffffe474 	.word	0xffffe474
 80027c8:	0801c3f4 	.word	0x0801c3f4
 80027cc:	240440fc 	.word	0x240440fc
 80027d0:	ffff9628 	.word	0xffff9628
 80027d4:	0801c2f8 	.word	0x0801c2f8
 80027d8:	0801c330 	.word	0x0801c330
 80027dc:	24043df4 	.word	0x24043df4
 80027e0:	24040740 	.word	0x24040740
 80027e4:	ffffe470 	.word	0xffffe470
    	  ptr = strtok(NULL, delim);
 80027e8:	4b76      	ldr	r3, [pc, #472]	; (80029c4 <main+0x580>)
 80027ea:	f646 2270 	movw	r2, #27248	; 0x6a70
 80027ee:	443a      	add	r2, r7
 80027f0:	4413      	add	r3, r2
 80027f2:	4619      	mov	r1, r3
 80027f4:	2000      	movs	r0, #0
 80027f6:	f018 f9bf 	bl	801ab78 <strtok>
 80027fa:	f646 2364 	movw	r3, #27236	; 0x6a64
 80027fe:	443b      	add	r3, r7
 8002800:	6018      	str	r0, [r3, #0]
      for(int c = 0; c < 6; c++){
 8002802:	f646 2360 	movw	r3, #27232	; 0x6a60
 8002806:	443b      	add	r3, r7
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	3301      	adds	r3, #1
 800280c:	f646 2260 	movw	r2, #27232	; 0x6a60
 8002810:	443a      	add	r2, r7
 8002812:	6013      	str	r3, [r2, #0]
 8002814:	f646 2360 	movw	r3, #27232	; 0x6a60
 8002818:	443b      	add	r3, r7
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	2b05      	cmp	r3, #5
 800281e:	dde3      	ble.n	80027e8 <main+0x3a4>
      }
      while(ptr != NULL /*&& j < (sizeof(*Configs)/sizeof(ReadInstruction))*/){
 8002820:	e0a0      	b.n	8002964 <main+0x520>
		switch(i){
 8002822:	f646 236c 	movw	r3, #27244	; 0x6a6c
 8002826:	443b      	add	r3, r7
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	2b06      	cmp	r3, #6
 800282c:	f200 8084 	bhi.w	8002938 <main+0x4f4>
 8002830:	a201      	add	r2, pc, #4	; (adr r2, 8002838 <main+0x3f4>)
 8002832:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002836:	bf00      	nop
 8002838:	08002855 	.word	0x08002855
 800283c:	08002939 	.word	0x08002939
 8002840:	0800287f 	.word	0x0800287f
 8002844:	080028a7 	.word	0x080028a7
 8002848:	080028cf 	.word	0x080028cf
 800284c:	08002939 	.word	0x08002939
 8002850:	080028f7 	.word	0x080028f7
			case 0:
				Configs[j].id = (int)strtol(ptr, NULL, 0);
 8002854:	2200      	movs	r2, #0
 8002856:	2100      	movs	r1, #0
 8002858:	f646 2364 	movw	r3, #27236	; 0x6a64
 800285c:	443b      	add	r3, r7
 800285e:	6818      	ldr	r0, [r3, #0]
 8002860:	f018 fa5a 	bl	801ad18 <strtol>
 8002864:	4603      	mov	r3, r0
 8002866:	4618      	mov	r0, r3
 8002868:	4a57      	ldr	r2, [pc, #348]	; (80029c8 <main+0x584>)
 800286a:	f646 2368 	movw	r3, #27240	; 0x6a68
 800286e:	443b      	add	r3, r7
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	218c      	movs	r1, #140	; 0x8c
 8002874:	fb01 f303 	mul.w	r3, r1, r3
 8002878:	4413      	add	r3, r2
 800287a:	6018      	str	r0, [r3, #0]
				break;
 800287c:	e05c      	b.n	8002938 <main+0x4f4>
			case 2:
				Configs[j].Bytes = atoi(ptr);
 800287e:	f646 2364 	movw	r3, #27236	; 0x6a64
 8002882:	443b      	add	r3, r7
 8002884:	6818      	ldr	r0, [r3, #0]
 8002886:	f017 ff94 	bl	801a7b2 <atoi>
 800288a:	4603      	mov	r3, r0
 800288c:	4618      	mov	r0, r3
 800288e:	4a4e      	ldr	r2, [pc, #312]	; (80029c8 <main+0x584>)
 8002890:	f646 2368 	movw	r3, #27240	; 0x6a68
 8002894:	443b      	add	r3, r7
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	218c      	movs	r1, #140	; 0x8c
 800289a:	fb01 f303 	mul.w	r3, r1, r3
 800289e:	4413      	add	r3, r2
 80028a0:	3304      	adds	r3, #4
 80028a2:	6018      	str	r0, [r3, #0]
				break;
 80028a4:	e048      	b.n	8002938 <main+0x4f4>
			case 3:
				Configs[j].Distribution = atoi(ptr);
 80028a6:	f646 2364 	movw	r3, #27236	; 0x6a64
 80028aa:	443b      	add	r3, r7
 80028ac:	6818      	ldr	r0, [r3, #0]
 80028ae:	f017 ff80 	bl	801a7b2 <atoi>
 80028b2:	4603      	mov	r3, r0
 80028b4:	4618      	mov	r0, r3
 80028b6:	4a44      	ldr	r2, [pc, #272]	; (80029c8 <main+0x584>)
 80028b8:	f646 2368 	movw	r3, #27240	; 0x6a68
 80028bc:	443b      	add	r3, r7
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	218c      	movs	r1, #140	; 0x8c
 80028c2:	fb01 f303 	mul.w	r3, r1, r3
 80028c6:	4413      	add	r3, r2
 80028c8:	3308      	adds	r3, #8
 80028ca:	6018      	str	r0, [r3, #0]
				break;
 80028cc:	e034      	b.n	8002938 <main+0x4f4>
			case 4:
				sprintf(Configs[j].Intsructions, "'%s'", ptr);
 80028ce:	f646 2368 	movw	r3, #27240	; 0x6a68
 80028d2:	443b      	add	r3, r7
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	228c      	movs	r2, #140	; 0x8c
 80028d8:	fb02 f303 	mul.w	r3, r2, r3
 80028dc:	3308      	adds	r3, #8
 80028de:	4a3a      	ldr	r2, [pc, #232]	; (80029c8 <main+0x584>)
 80028e0:	4413      	add	r3, r2
 80028e2:	3304      	adds	r3, #4
 80028e4:	f646 2264 	movw	r2, #27236	; 0x6a64
 80028e8:	443a      	add	r2, r7
 80028ea:	6812      	ldr	r2, [r2, #0]
 80028ec:	4937      	ldr	r1, [pc, #220]	; (80029cc <main+0x588>)
 80028ee:	4618      	mov	r0, r3
 80028f0:	f018 f91a 	bl	801ab28 <siprintf>
				break;
 80028f4:	e020      	b.n	8002938 <main+0x4f4>
			case 6:
				j++;
 80028f6:	f646 2368 	movw	r3, #27240	; 0x6a68
 80028fa:	443b      	add	r3, r7
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	3301      	adds	r3, #1
 8002900:	f646 2268 	movw	r2, #27240	; 0x6a68
 8002904:	443a      	add	r2, r7
 8002906:	6013      	str	r3, [r2, #0]
				Configs[j].id = atoi(ptr);
 8002908:	f646 2364 	movw	r3, #27236	; 0x6a64
 800290c:	443b      	add	r3, r7
 800290e:	6818      	ldr	r0, [r3, #0]
 8002910:	f017 ff4f 	bl	801a7b2 <atoi>
 8002914:	4603      	mov	r3, r0
 8002916:	4618      	mov	r0, r3
 8002918:	4a2b      	ldr	r2, [pc, #172]	; (80029c8 <main+0x584>)
 800291a:	f646 2368 	movw	r3, #27240	; 0x6a68
 800291e:	443b      	add	r3, r7
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	218c      	movs	r1, #140	; 0x8c
 8002924:	fb01 f303 	mul.w	r3, r1, r3
 8002928:	4413      	add	r3, r2
 800292a:	6018      	str	r0, [r3, #0]
				i = 0;
 800292c:	2300      	movs	r3, #0
 800292e:	f646 226c 	movw	r2, #27244	; 0x6a6c
 8002932:	443a      	add	r2, r7
 8002934:	6013      	str	r3, [r2, #0]
				break;
 8002936:	bf00      	nop
		}

		ptr = strtok(NULL, delim);
 8002938:	4b22      	ldr	r3, [pc, #136]	; (80029c4 <main+0x580>)
 800293a:	f646 2270 	movw	r2, #27248	; 0x6a70
 800293e:	443a      	add	r2, r7
 8002940:	4413      	add	r3, r2
 8002942:	4619      	mov	r1, r3
 8002944:	2000      	movs	r0, #0
 8002946:	f018 f917 	bl	801ab78 <strtok>
 800294a:	f646 2364 	movw	r3, #27236	; 0x6a64
 800294e:	443b      	add	r3, r7
 8002950:	6018      	str	r0, [r3, #0]
		i++;
 8002952:	f646 236c 	movw	r3, #27244	; 0x6a6c
 8002956:	443b      	add	r3, r7
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	3301      	adds	r3, #1
 800295c:	f646 226c 	movw	r2, #27244	; 0x6a6c
 8002960:	443a      	add	r2, r7
 8002962:	6013      	str	r3, [r2, #0]
      while(ptr != NULL /*&& j < (sizeof(*Configs)/sizeof(ReadInstruction))*/){
 8002964:	f646 2364 	movw	r3, #27236	; 0x6a64
 8002968:	443b      	add	r3, r7
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	2b00      	cmp	r3, #0
 800296e:	f47f af58 	bne.w	8002822 <main+0x3de>
      }


      strcpy(FilePath,Filename);
 8002972:	f644 62f0 	movw	r2, #20208	; 0x4ef0
 8002976:	443a      	add	r2, r7
 8002978:	4b15      	ldr	r3, [pc, #84]	; (80029d0 <main+0x58c>)
 800297a:	f646 2170 	movw	r1, #27248	; 0x6a70
 800297e:	4439      	add	r1, r7
 8002980:	440b      	add	r3, r1
 8002982:	4611      	mov	r1, r2
 8002984:	4618      	mov	r0, r3
 8002986:	f018 f8ef 	bl	801ab68 <strcpy>
      int FilePathLen = strlen(Filename);
 800298a:	f644 63f0 	movw	r3, #20208	; 0x4ef0
 800298e:	443b      	add	r3, r7
 8002990:	4618      	mov	r0, r3
 8002992:	f7fd fca5 	bl	80002e0 <strlen>
 8002996:	4603      	mov	r3, r0
 8002998:	f646 2220 	movw	r2, #27168	; 0x6a20
 800299c:	443a      	add	r2, r7
 800299e:	6013      	str	r3, [r2, #0]
      sprintf(FilePath + FilePathLen, "%i.csv",fileNum);
 80029a0:	f646 2320 	movw	r3, #27168	; 0x6a20
 80029a4:	443b      	add	r3, r7
 80029a6:	681a      	ldr	r2, [r3, #0]
 80029a8:	4b09      	ldr	r3, [pc, #36]	; (80029d0 <main+0x58c>)
 80029aa:	f646 2170 	movw	r1, #27248	; 0x6a70
 80029ae:	4439      	add	r1, r7
 80029b0:	440b      	add	r3, r1
 80029b2:	1898      	adds	r0, r3, r2
 80029b4:	4b07      	ldr	r3, [pc, #28]	; (80029d4 <main+0x590>)
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	461a      	mov	r2, r3
 80029ba:	4907      	ldr	r1, [pc, #28]	; (80029d8 <main+0x594>)
 80029bc:	f018 f8b4 	bl	801ab28 <siprintf>
      while(f_open(&myFILE, FilePath, FA_READ) == FR_OK){
 80029c0:	e030      	b.n	8002a24 <main+0x5e0>
 80029c2:	bf00      	nop
 80029c4:	ffffe470 	.word	0xffffe470
 80029c8:	24040744 	.word	0x24040744
 80029cc:	0801c37c 	.word	0x0801c37c
 80029d0:	ffff9590 	.word	0xffff9590
 80029d4:	2400000c 	.word	0x2400000c
 80029d8:	0801c384 	.word	0x0801c384
    	  f_close(&myFILE);
 80029dc:	48b5      	ldr	r0, [pc, #724]	; (8002cb4 <main+0x870>)
 80029de:	f016 fb77 	bl	80190d0 <f_close>
        fileNum++;
 80029e2:	4bb5      	ldr	r3, [pc, #724]	; (8002cb8 <main+0x874>)
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	3301      	adds	r3, #1
 80029e8:	4ab3      	ldr	r2, [pc, #716]	; (8002cb8 <main+0x874>)
 80029ea:	6013      	str	r3, [r2, #0]
        strcpy(FilePath,Filename);
 80029ec:	f644 62f0 	movw	r2, #20208	; 0x4ef0
 80029f0:	443a      	add	r2, r7
 80029f2:	4bb2      	ldr	r3, [pc, #712]	; (8002cbc <main+0x878>)
 80029f4:	f646 2170 	movw	r1, #27248	; 0x6a70
 80029f8:	4439      	add	r1, r7
 80029fa:	440b      	add	r3, r1
 80029fc:	4611      	mov	r1, r2
 80029fe:	4618      	mov	r0, r3
 8002a00:	f018 f8b2 	bl	801ab68 <strcpy>
        sprintf(FilePath + FilePathLen, "%i.csv",fileNum);
 8002a04:	f646 2320 	movw	r3, #27168	; 0x6a20
 8002a08:	443b      	add	r3, r7
 8002a0a:	681a      	ldr	r2, [r3, #0]
 8002a0c:	4bab      	ldr	r3, [pc, #684]	; (8002cbc <main+0x878>)
 8002a0e:	f646 2170 	movw	r1, #27248	; 0x6a70
 8002a12:	4439      	add	r1, r7
 8002a14:	440b      	add	r3, r1
 8002a16:	1898      	adds	r0, r3, r2
 8002a18:	4ba7      	ldr	r3, [pc, #668]	; (8002cb8 <main+0x874>)
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	461a      	mov	r2, r3
 8002a1e:	49a8      	ldr	r1, [pc, #672]	; (8002cc0 <main+0x87c>)
 8002a20:	f018 f882 	bl	801ab28 <siprintf>
      while(f_open(&myFILE, FilePath, FA_READ) == FR_OK){
 8002a24:	4ba5      	ldr	r3, [pc, #660]	; (8002cbc <main+0x878>)
 8002a26:	f646 2270 	movw	r2, #27248	; 0x6a70
 8002a2a:	443a      	add	r2, r7
 8002a2c:	4413      	add	r3, r2
 8002a2e:	2201      	movs	r2, #1
 8002a30:	4619      	mov	r1, r3
 8002a32:	48a0      	ldr	r0, [pc, #640]	; (8002cb4 <main+0x870>)
 8002a34:	f015 fe5c 	bl	80186f0 <f_open>
 8002a38:	4603      	mov	r3, r0
 8002a3a:	2b00      	cmp	r3, #0
 8002a3c:	d0ce      	beq.n	80029dc <main+0x598>
      }
      f_open(&myFILE, FilePath, FA_WRITE | FA_CREATE_ALWAYS);
 8002a3e:	4b9f      	ldr	r3, [pc, #636]	; (8002cbc <main+0x878>)
 8002a40:	f646 2270 	movw	r2, #27248	; 0x6a70
 8002a44:	443a      	add	r2, r7
 8002a46:	4413      	add	r3, r2
 8002a48:	220a      	movs	r2, #10
 8002a4a:	4619      	mov	r1, r3
 8002a4c:	4899      	ldr	r0, [pc, #612]	; (8002cb4 <main+0x870>)
 8002a4e:	f015 fe4f 	bl	80186f0 <f_open>
  extern int GPS_flag2;
  extern int FDCAN_Flag;
  extern int CAN_Flag;


  CAN_FD_FRAME FDBuffer[50] = {0};
 8002a52:	4b9c      	ldr	r3, [pc, #624]	; (8002cc4 <main+0x880>)
 8002a54:	f646 2270 	movw	r2, #27248	; 0x6a70
 8002a58:	443a      	add	r2, r7
 8002a5a:	4413      	add	r3, r2
 8002a5c:	4618      	mov	r0, r3
 8002a5e:	f44f 637a 	mov.w	r3, #4000	; 0xfa0
 8002a62:	461a      	mov	r2, r3
 8002a64:	2100      	movs	r1, #0
 8002a66:	f017 feee 	bl	801a846 <memset>
  CAN_FRAME Buffer[50] = {0};
 8002a6a:	4b97      	ldr	r3, [pc, #604]	; (8002cc8 <main+0x884>)
 8002a6c:	f646 2270 	movw	r2, #27248	; 0x6a70
 8002a70:	443a      	add	r2, r7
 8002a72:	4413      	add	r3, r2
 8002a74:	4618      	mov	r0, r3
 8002a76:	f44f 6396 	mov.w	r3, #1200	; 0x4b0
 8002a7a:	461a      	mov	r2, r3
 8002a7c:	2100      	movs	r1, #0
 8002a7e:	f017 fee2 	bl	801a846 <memset>
  uint32_t Tele_IDs[50] = {0};
 8002a82:	4b92      	ldr	r3, [pc, #584]	; (8002ccc <main+0x888>)
 8002a84:	f646 2270 	movw	r2, #27248	; 0x6a70
 8002a88:	443a      	add	r2, r7
 8002a8a:	4413      	add	r3, r2
 8002a8c:	4618      	mov	r0, r3
 8002a8e:	23c8      	movs	r3, #200	; 0xc8
 8002a90:	461a      	mov	r2, r3
 8002a92:	2100      	movs	r1, #0
 8002a94:	f017 fed7 	bl	801a846 <memset>
  Tele_IDs[0] = 0x321;
 8002a98:	4b8c      	ldr	r3, [pc, #560]	; (8002ccc <main+0x888>)
 8002a9a:	f646 2270 	movw	r2, #27248	; 0x6a70
 8002a9e:	443a      	add	r2, r7
 8002aa0:	4413      	add	r3, r2
 8002aa2:	f240 3221 	movw	r2, #801	; 0x321
 8002aa6:	601a      	str	r2, [r3, #0]

  sTime.SecondFraction = 999;
 8002aa8:	4b89      	ldr	r3, [pc, #548]	; (8002cd0 <main+0x88c>)
 8002aaa:	f240 32e7 	movw	r2, #999	; 0x3e7
 8002aae:	609a      	str	r2, [r3, #8]
  uint32_t LocalTime = HAL_GetTick();
 8002ab0:	f002 f980 	bl	8004db4 <HAL_GetTick>
 8002ab4:	f646 231c 	movw	r3, #27164	; 0x6a1c
 8002ab8:	443b      	add	r3, r7
 8002aba:	6018      	str	r0, [r3, #0]
  HAL_RTC_GetTime(&hrtc, &sTime, RTC_FORMAT_BIN);
 8002abc:	2200      	movs	r2, #0
 8002abe:	4984      	ldr	r1, [pc, #528]	; (8002cd0 <main+0x88c>)
 8002ac0:	4884      	ldr	r0, [pc, #528]	; (8002cd4 <main+0x890>)
 8002ac2:	f00a f9d9 	bl	800ce78 <HAL_RTC_GetTime>
  HAL_RTC_GetDate(&hrtc, &sDate, RTC_FORMAT_BIN);
 8002ac6:	2200      	movs	r2, #0
 8002ac8:	4983      	ldr	r1, [pc, #524]	; (8002cd8 <main+0x894>)
 8002aca:	4882      	ldr	r0, [pc, #520]	; (8002cd4 <main+0x890>)
 8002acc:	f00a fab8 	bl	800d040 <HAL_RTC_GetDate>

  sTime.SubSeconds -= LocalTime % 1000;
 8002ad0:	4b7f      	ldr	r3, [pc, #508]	; (8002cd0 <main+0x88c>)
 8002ad2:	6859      	ldr	r1, [r3, #4]
 8002ad4:	f646 231c 	movw	r3, #27164	; 0x6a1c
 8002ad8:	443b      	add	r3, r7
 8002ada:	681a      	ldr	r2, [r3, #0]
 8002adc:	4b7f      	ldr	r3, [pc, #508]	; (8002cdc <main+0x898>)
 8002ade:	fba3 0302 	umull	r0, r3, r3, r2
 8002ae2:	099b      	lsrs	r3, r3, #6
 8002ae4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002ae8:	fb00 f303 	mul.w	r3, r0, r3
 8002aec:	1ad3      	subs	r3, r2, r3
 8002aee:	1acb      	subs	r3, r1, r3
 8002af0:	4a77      	ldr	r2, [pc, #476]	; (8002cd0 <main+0x88c>)
 8002af2:	6053      	str	r3, [r2, #4]
  LocalTime = LocalTime/1000;
 8002af4:	f646 231c 	movw	r3, #27164	; 0x6a1c
 8002af8:	443b      	add	r3, r7
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	4a77      	ldr	r2, [pc, #476]	; (8002cdc <main+0x898>)
 8002afe:	fba2 2303 	umull	r2, r3, r2, r3
 8002b02:	099b      	lsrs	r3, r3, #6
 8002b04:	f646 221c 	movw	r2, #27164	; 0x6a1c
 8002b08:	443a      	add	r2, r7
 8002b0a:	6013      	str	r3, [r2, #0]

  if(sTime.Seconds < LocalTime % 60){
 8002b0c:	4b70      	ldr	r3, [pc, #448]	; (8002cd0 <main+0x88c>)
 8002b0e:	789b      	ldrb	r3, [r3, #2]
 8002b10:	4618      	mov	r0, r3
 8002b12:	f646 231c 	movw	r3, #27164	; 0x6a1c
 8002b16:	443b      	add	r3, r7
 8002b18:	6819      	ldr	r1, [r3, #0]
 8002b1a:	4b71      	ldr	r3, [pc, #452]	; (8002ce0 <main+0x89c>)
 8002b1c:	fba3 2301 	umull	r2, r3, r3, r1
 8002b20:	095a      	lsrs	r2, r3, #5
 8002b22:	4613      	mov	r3, r2
 8002b24:	011b      	lsls	r3, r3, #4
 8002b26:	1a9b      	subs	r3, r3, r2
 8002b28:	009b      	lsls	r3, r3, #2
 8002b2a:	1aca      	subs	r2, r1, r3
 8002b2c:	4290      	cmp	r0, r2
 8002b2e:	d20b      	bcs.n	8002b48 <main+0x704>
	  sTime.Seconds += 60;
 8002b30:	4b67      	ldr	r3, [pc, #412]	; (8002cd0 <main+0x88c>)
 8002b32:	789b      	ldrb	r3, [r3, #2]
 8002b34:	333c      	adds	r3, #60	; 0x3c
 8002b36:	b2da      	uxtb	r2, r3
 8002b38:	4b65      	ldr	r3, [pc, #404]	; (8002cd0 <main+0x88c>)
 8002b3a:	709a      	strb	r2, [r3, #2]
	  sTime.Minutes -= 1;
 8002b3c:	4b64      	ldr	r3, [pc, #400]	; (8002cd0 <main+0x88c>)
 8002b3e:	785b      	ldrb	r3, [r3, #1]
 8002b40:	3b01      	subs	r3, #1
 8002b42:	b2da      	uxtb	r2, r3
 8002b44:	4b62      	ldr	r3, [pc, #392]	; (8002cd0 <main+0x88c>)
 8002b46:	705a      	strb	r2, [r3, #1]
  }
  sTime.Seconds -= LocalTime % 60;
 8002b48:	4b61      	ldr	r3, [pc, #388]	; (8002cd0 <main+0x88c>)
 8002b4a:	7898      	ldrb	r0, [r3, #2]
 8002b4c:	f646 231c 	movw	r3, #27164	; 0x6a1c
 8002b50:	443b      	add	r3, r7
 8002b52:	6819      	ldr	r1, [r3, #0]
 8002b54:	4b62      	ldr	r3, [pc, #392]	; (8002ce0 <main+0x89c>)
 8002b56:	fba3 2301 	umull	r2, r3, r3, r1
 8002b5a:	095a      	lsrs	r2, r3, #5
 8002b5c:	4613      	mov	r3, r2
 8002b5e:	011b      	lsls	r3, r3, #4
 8002b60:	1a9b      	subs	r3, r3, r2
 8002b62:	009b      	lsls	r3, r3, #2
 8002b64:	1aca      	subs	r2, r1, r3
 8002b66:	b2d3      	uxtb	r3, r2
 8002b68:	1ac3      	subs	r3, r0, r3
 8002b6a:	b2da      	uxtb	r2, r3
 8002b6c:	4b58      	ldr	r3, [pc, #352]	; (8002cd0 <main+0x88c>)
 8002b6e:	709a      	strb	r2, [r3, #2]
  LocalTime = LocalTime/60;
 8002b70:	f646 231c 	movw	r3, #27164	; 0x6a1c
 8002b74:	443b      	add	r3, r7
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	4a59      	ldr	r2, [pc, #356]	; (8002ce0 <main+0x89c>)
 8002b7a:	fba2 2303 	umull	r2, r3, r2, r3
 8002b7e:	095b      	lsrs	r3, r3, #5
 8002b80:	f646 221c 	movw	r2, #27164	; 0x6a1c
 8002b84:	443a      	add	r2, r7
 8002b86:	6013      	str	r3, [r2, #0]

  if(sTime.Minutes < LocalTime % 60){
 8002b88:	4b51      	ldr	r3, [pc, #324]	; (8002cd0 <main+0x88c>)
 8002b8a:	785b      	ldrb	r3, [r3, #1]
 8002b8c:	4618      	mov	r0, r3
 8002b8e:	f646 231c 	movw	r3, #27164	; 0x6a1c
 8002b92:	443b      	add	r3, r7
 8002b94:	6819      	ldr	r1, [r3, #0]
 8002b96:	4b52      	ldr	r3, [pc, #328]	; (8002ce0 <main+0x89c>)
 8002b98:	fba3 2301 	umull	r2, r3, r3, r1
 8002b9c:	095a      	lsrs	r2, r3, #5
 8002b9e:	4613      	mov	r3, r2
 8002ba0:	011b      	lsls	r3, r3, #4
 8002ba2:	1a9b      	subs	r3, r3, r2
 8002ba4:	009b      	lsls	r3, r3, #2
 8002ba6:	1aca      	subs	r2, r1, r3
 8002ba8:	4290      	cmp	r0, r2
 8002baa:	d20b      	bcs.n	8002bc4 <main+0x780>
	  sTime.Minutes += 60;
 8002bac:	4b48      	ldr	r3, [pc, #288]	; (8002cd0 <main+0x88c>)
 8002bae:	785b      	ldrb	r3, [r3, #1]
 8002bb0:	333c      	adds	r3, #60	; 0x3c
 8002bb2:	b2da      	uxtb	r2, r3
 8002bb4:	4b46      	ldr	r3, [pc, #280]	; (8002cd0 <main+0x88c>)
 8002bb6:	705a      	strb	r2, [r3, #1]
	  sTime.Hours -= 1;
 8002bb8:	4b45      	ldr	r3, [pc, #276]	; (8002cd0 <main+0x88c>)
 8002bba:	781b      	ldrb	r3, [r3, #0]
 8002bbc:	3b01      	subs	r3, #1
 8002bbe:	b2da      	uxtb	r2, r3
 8002bc0:	4b43      	ldr	r3, [pc, #268]	; (8002cd0 <main+0x88c>)
 8002bc2:	701a      	strb	r2, [r3, #0]
  }
  sTime.Minutes -= LocalTime % 60;
 8002bc4:	4b42      	ldr	r3, [pc, #264]	; (8002cd0 <main+0x88c>)
 8002bc6:	7858      	ldrb	r0, [r3, #1]
 8002bc8:	f646 231c 	movw	r3, #27164	; 0x6a1c
 8002bcc:	443b      	add	r3, r7
 8002bce:	6819      	ldr	r1, [r3, #0]
 8002bd0:	4b43      	ldr	r3, [pc, #268]	; (8002ce0 <main+0x89c>)
 8002bd2:	fba3 2301 	umull	r2, r3, r3, r1
 8002bd6:	095a      	lsrs	r2, r3, #5
 8002bd8:	4613      	mov	r3, r2
 8002bda:	011b      	lsls	r3, r3, #4
 8002bdc:	1a9b      	subs	r3, r3, r2
 8002bde:	009b      	lsls	r3, r3, #2
 8002be0:	1aca      	subs	r2, r1, r3
 8002be2:	b2d3      	uxtb	r3, r2
 8002be4:	1ac3      	subs	r3, r0, r3
 8002be6:	b2da      	uxtb	r2, r3
 8002be8:	4b39      	ldr	r3, [pc, #228]	; (8002cd0 <main+0x88c>)
 8002bea:	705a      	strb	r2, [r3, #1]
  LocalTime = LocalTime/60;
 8002bec:	f646 231c 	movw	r3, #27164	; 0x6a1c
 8002bf0:	443b      	add	r3, r7
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	4a3a      	ldr	r2, [pc, #232]	; (8002ce0 <main+0x89c>)
 8002bf6:	fba2 2303 	umull	r2, r3, r2, r3
 8002bfa:	095b      	lsrs	r3, r3, #5
 8002bfc:	f646 221c 	movw	r2, #27164	; 0x6a1c
 8002c00:	443a      	add	r2, r7
 8002c02:	6013      	str	r3, [r2, #0]
  sTime.Hours -= LocalTime % 60;
 8002c04:	4b32      	ldr	r3, [pc, #200]	; (8002cd0 <main+0x88c>)
 8002c06:	7818      	ldrb	r0, [r3, #0]
 8002c08:	f646 231c 	movw	r3, #27164	; 0x6a1c
 8002c0c:	443b      	add	r3, r7
 8002c0e:	6819      	ldr	r1, [r3, #0]
 8002c10:	4b33      	ldr	r3, [pc, #204]	; (8002ce0 <main+0x89c>)
 8002c12:	fba3 2301 	umull	r2, r3, r3, r1
 8002c16:	095a      	lsrs	r2, r3, #5
 8002c18:	4613      	mov	r3, r2
 8002c1a:	011b      	lsls	r3, r3, #4
 8002c1c:	1a9b      	subs	r3, r3, r2
 8002c1e:	009b      	lsls	r3, r3, #2
 8002c20:	1aca      	subs	r2, r1, r3
 8002c22:	b2d3      	uxtb	r3, r2
 8002c24:	1ac3      	subs	r3, r0, r3
 8002c26:	b2da      	uxtb	r2, r3
 8002c28:	4b29      	ldr	r3, [pc, #164]	; (8002cd0 <main+0x88c>)
 8002c2a:	701a      	strb	r2, [r3, #0]
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  char CanWrite[500];
  int CW = 0;
 8002c2c:	2300      	movs	r3, #0
 8002c2e:	f646 2218 	movw	r2, #27160	; 0x6a18
 8002c32:	443a      	add	r2, r7
 8002c34:	6013      	str	r3, [r2, #0]
  char CanFDWrite[1000];
  int CFDW = 0;
 8002c36:	2300      	movs	r3, #0
 8002c38:	f646 2214 	movw	r2, #27156	; 0x6a14
 8002c3c:	443a      	add	r2, r7
 8002c3e:	6013      	str	r3, [r2, #0]
  int AllowedTele = 1;
 8002c40:	2301      	movs	r3, #1
 8002c42:	f646 2210 	movw	r2, #27152	; 0x6a10
 8002c46:	443a      	add	r2, r7
 8002c48:	6013      	str	r3, [r2, #0]
  int BuffIndex = 0;
 8002c4a:	2300      	movs	r3, #0
 8002c4c:	f646 225c 	movw	r2, #27228	; 0x6a5c
 8002c50:	443a      	add	r2, r7
 8002c52:	6013      	str	r3, [r2, #0]
  int Txcnt = 0;
 8002c54:	2300      	movs	r3, #0
 8002c56:	f646 2258 	movw	r2, #27224	; 0x6a58
 8002c5a:	443a      	add	r2, r7
 8002c5c:	6013      	str	r3, [r2, #0]
  int TxDataSpace = 0;
 8002c5e:	2300      	movs	r3, #0
 8002c60:	f646 220c 	movw	r2, #27148	; 0x6a0c
 8002c64:	443a      	add	r2, r7
 8002c66:	6013      	str	r3, [r2, #0]
  uint32_t LoopTime = 10; //time a loop should take (this is aguess should test avg time)
 8002c68:	230a      	movs	r3, #10
 8002c6a:	f646 2208 	movw	r2, #27144	; 0x6a08
 8002c6e:	443a      	add	r2, r7
 8002c70:	6013      	str	r3, [r2, #0]
  uint32_t StartTime = 0;
 8002c72:	2300      	movs	r3, #0
 8002c74:	f646 2204 	movw	r2, #27140	; 0x6a04
 8002c78:	443a      	add	r2, r7
 8002c7a:	6013      	str	r3, [r2, #0]
  uint32_t EndTime = 0;
 8002c7c:	2300      	movs	r3, #0
 8002c7e:	f507 42d4 	add.w	r2, r7, #27136	; 0x6a00
 8002c82:	6013      	str	r3, [r2, #0]
  uint32_t radiodelay = 1000;
 8002c84:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002c88:	f646 12fc 	movw	r2, #27132	; 0x69fc
 8002c8c:	443a      	add	r2, r7
 8002c8e:	6013      	str	r3, [r2, #0]
  uint32_t r_start = 0;
 8002c90:	2300      	movs	r3, #0
 8002c92:	f646 2254 	movw	r2, #27220	; 0x6a54
 8002c96:	443a      	add	r2, r7
 8002c98:	6013      	str	r3, [r2, #0]
  uint32_t r_end = 0;
 8002c9a:	2300      	movs	r3, #0
 8002c9c:	f646 12f8 	movw	r2, #27128	; 0x69f8
 8002ca0:	443a      	add	r2, r7
 8002ca2:	6013      	str	r3, [r2, #0]
  r_start = HAL_GetTick();
 8002ca4:	f002 f886 	bl	8004db4 <HAL_GetTick>
 8002ca8:	f646 2354 	movw	r3, #27220	; 0x6a54
 8002cac:	443b      	add	r3, r7
 8002cae:	6018      	str	r0, [r3, #0]

  while (end_flag){
 8002cb0:	f000 bf0d 	b.w	8003ace <main+0x168a>
 8002cb4:	24040510 	.word	0x24040510
 8002cb8:	2400000c 	.word	0x2400000c
 8002cbc:	ffff9590 	.word	0xffff9590
 8002cc0:	0801c384 	.word	0x0801c384
 8002cc4:	ffffefe8 	.word	0xffffefe8
 8002cc8:	ffffeb38 	.word	0xffffeb38
 8002ccc:	ffffea70 	.word	0xffffea70
 8002cd0:	240404a4 	.word	0x240404a4
 8002cd4:	2404478c 	.word	0x2404478c
 8002cd8:	240404b8 	.word	0x240404b8
 8002cdc:	10624dd3 	.word	0x10624dd3
 8002ce0:	88888889 	.word	0x88888889
    StartTime = HAL_GetTick();
 8002ce4:	f002 f866 	bl	8004db4 <HAL_GetTick>
 8002ce8:	f646 2304 	movw	r3, #27140	; 0x6a04
 8002cec:	443b      	add	r3, r7
 8002cee:	6018      	str	r0, [r3, #0]
    
	  if(GPS_flag1){
 8002cf0:	4ba5      	ldr	r3, [pc, #660]	; (8002f88 <main+0xb44>)
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	2b00      	cmp	r3, #0
 8002cf6:	d007      	beq.n	8002d08 <main+0x8c4>
		  WriteToBuff(rxBuf, BUFFLENGTH/2);
 8002cf8:	f44f 71af 	mov.w	r1, #350	; 0x15e
 8002cfc:	48a3      	ldr	r0, [pc, #652]	; (8002f8c <main+0xb48>)
 8002cfe:	f7ff faf5 	bl	80022ec <WriteToBuff>
		  GPS_flag1=0;
 8002d02:	4ba1      	ldr	r3, [pc, #644]	; (8002f88 <main+0xb44>)
 8002d04:	2200      	movs	r2, #0
 8002d06:	601a      	str	r2, [r3, #0]
	  }
	  
    if(GPS_flag2){
 8002d08:	4ba1      	ldr	r3, [pc, #644]	; (8002f90 <main+0xb4c>)
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	2b00      	cmp	r3, #0
 8002d0e:	d008      	beq.n	8002d22 <main+0x8de>
		  WriteToBuff(rxBuf+BUFFLENGTH/2, BUFFLENGTH/2);
 8002d10:	4ba0      	ldr	r3, [pc, #640]	; (8002f94 <main+0xb50>)
 8002d12:	f44f 71af 	mov.w	r1, #350	; 0x15e
 8002d16:	4618      	mov	r0, r3
 8002d18:	f7ff fae8 	bl	80022ec <WriteToBuff>
		  GPS_flag2=0;
 8002d1c:	4b9c      	ldr	r3, [pc, #624]	; (8002f90 <main+0xb4c>)
 8002d1e:	2200      	movs	r2, #0
 8002d20:	601a      	str	r2, [r3, #0]
	  }

    r_end = HAL_GetTick();
 8002d22:	f002 f847 	bl	8004db4 <HAL_GetTick>
 8002d26:	f646 13f8 	movw	r3, #27128	; 0x69f8
 8002d2a:	443b      	add	r3, r7
 8002d2c:	6018      	str	r0, [r3, #0]
    if(r_start - r_end > radiodelay && FDBuffer[0].id != 0){
 8002d2e:	f646 2354 	movw	r3, #27220	; 0x6a54
 8002d32:	443b      	add	r3, r7
 8002d34:	681a      	ldr	r2, [r3, #0]
 8002d36:	f646 13f8 	movw	r3, #27128	; 0x69f8
 8002d3a:	443b      	add	r3, r7
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	1ad3      	subs	r3, r2, r3
 8002d40:	f646 12fc 	movw	r2, #27132	; 0x69fc
 8002d44:	443a      	add	r2, r7
 8002d46:	6812      	ldr	r2, [r2, #0]
 8002d48:	429a      	cmp	r2, r3
 8002d4a:	f080 82a2 	bcs.w	8003292 <main+0xe4e>
 8002d4e:	4b92      	ldr	r3, [pc, #584]	; (8002f98 <main+0xb54>)
 8002d50:	f646 2270 	movw	r2, #27248	; 0x6a70
 8002d54:	443a      	add	r2, r7
 8002d56:	4413      	add	r3, r2
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	2b00      	cmp	r3, #0
 8002d5c:	f000 8299 	beq.w	8003292 <main+0xe4e>
      r_start = HAL_GetTick();
 8002d60:	f002 f828 	bl	8004db4 <HAL_GetTick>
 8002d64:	f646 2354 	movw	r3, #27220	; 0x6a54
 8002d68:	443b      	add	r3, r7
 8002d6a:	6018      	str	r0, [r3, #0]
      for(int i = 0; i < AllowedTele; i++){
 8002d6c:	2300      	movs	r3, #0
 8002d6e:	f646 2250 	movw	r2, #27216	; 0x6a50
 8002d72:	443a      	add	r2, r7
 8002d74:	6013      	str	r3, [r2, #0]
 8002d76:	e281      	b.n	800327c <main+0xe38>
        //make packet (Time ID data)
        Txcnt = sprintf(myTxData,"%u %x ",FDBuffer[BuffIndex].time, FDBuffer[BuffIndex].id);
 8002d78:	4a87      	ldr	r2, [pc, #540]	; (8002f98 <main+0xb54>)
 8002d7a:	f646 2370 	movw	r3, #27248	; 0x6a70
 8002d7e:	443b      	add	r3, r7
 8002d80:	441a      	add	r2, r3
 8002d82:	f646 235c 	movw	r3, #27228	; 0x6a5c
 8002d86:	443b      	add	r3, r7
 8002d88:	6819      	ldr	r1, [r3, #0]
 8002d8a:	460b      	mov	r3, r1
 8002d8c:	009b      	lsls	r3, r3, #2
 8002d8e:	440b      	add	r3, r1
 8002d90:	011b      	lsls	r3, r3, #4
 8002d92:	4413      	add	r3, r2
 8002d94:	330c      	adds	r3, #12
 8002d96:	6818      	ldr	r0, [r3, #0]
 8002d98:	4a7f      	ldr	r2, [pc, #508]	; (8002f98 <main+0xb54>)
 8002d9a:	f646 2370 	movw	r3, #27248	; 0x6a70
 8002d9e:	443b      	add	r3, r7
 8002da0:	441a      	add	r2, r3
 8002da2:	f646 235c 	movw	r3, #27228	; 0x6a5c
 8002da6:	443b      	add	r3, r7
 8002da8:	6819      	ldr	r1, [r3, #0]
 8002daa:	460b      	mov	r3, r1
 8002dac:	009b      	lsls	r3, r3, #2
 8002dae:	440b      	add	r3, r1
 8002db0:	011b      	lsls	r3, r3, #4
 8002db2:	4413      	add	r3, r2
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	4602      	mov	r2, r0
 8002db8:	4978      	ldr	r1, [pc, #480]	; (8002f9c <main+0xb58>)
 8002dba:	4879      	ldr	r0, [pc, #484]	; (8002fa0 <main+0xb5c>)
 8002dbc:	f017 feb4 	bl	801ab28 <siprintf>
 8002dc0:	f646 2358 	movw	r3, #27224	; 0x6a58
 8002dc4:	443b      	add	r3, r7
 8002dc6:	6018      	str	r0, [r3, #0]
        TxDataSpace = 32 - Txcnt;
 8002dc8:	f646 2358 	movw	r3, #27224	; 0x6a58
 8002dcc:	443b      	add	r3, r7
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	f1c3 0320 	rsb	r3, r3, #32
 8002dd4:	f646 220c 	movw	r2, #27148	; 0x6a0c
 8002dd8:	443a      	add	r2, r7
 8002dda:	6013      	str	r3, [r2, #0]
        if(FDBuffer[BuffIndex].length > TxDataSpace){
 8002ddc:	4a6e      	ldr	r2, [pc, #440]	; (8002f98 <main+0xb54>)
 8002dde:	f646 2370 	movw	r3, #27248	; 0x6a70
 8002de2:	443b      	add	r3, r7
 8002de4:	441a      	add	r2, r3
 8002de6:	f646 235c 	movw	r3, #27228	; 0x6a5c
 8002dea:	443b      	add	r3, r7
 8002dec:	6819      	ldr	r1, [r3, #0]
 8002dee:	460b      	mov	r3, r1
 8002df0:	009b      	lsls	r3, r3, #2
 8002df2:	440b      	add	r3, r1
 8002df4:	011b      	lsls	r3, r3, #4
 8002df6:	4413      	add	r3, r2
 8002df8:	3308      	adds	r3, #8
 8002dfa:	681a      	ldr	r2, [r3, #0]
 8002dfc:	f646 230c 	movw	r3, #27148	; 0x6a0c
 8002e00:	443b      	add	r3, r7
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	429a      	cmp	r2, r3
 8002e06:	f240 81b8 	bls.w	800317a <main+0xd36>
          for(int i = 0; i < TxDataSpace; i++){
 8002e0a:	2300      	movs	r3, #0
 8002e0c:	f646 224c 	movw	r2, #27212	; 0x6a4c
 8002e10:	443a      	add	r2, r7
 8002e12:	6013      	str	r3, [r2, #0]
 8002e14:	e031      	b.n	8002e7a <main+0xa36>
            Txcnt += sprintf(myTxData + Txcnt, "%c", FDBuffer[BuffIndex].data.bytes[i]);
 8002e16:	f646 2358 	movw	r3, #27224	; 0x6a58
 8002e1a:	443b      	add	r3, r7
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	4a60      	ldr	r2, [pc, #384]	; (8002fa0 <main+0xb5c>)
 8002e20:	1898      	adds	r0, r3, r2
 8002e22:	4a5d      	ldr	r2, [pc, #372]	; (8002f98 <main+0xb54>)
 8002e24:	f646 2370 	movw	r3, #27248	; 0x6a70
 8002e28:	443b      	add	r3, r7
 8002e2a:	441a      	add	r2, r3
 8002e2c:	f646 235c 	movw	r3, #27228	; 0x6a5c
 8002e30:	443b      	add	r3, r7
 8002e32:	6819      	ldr	r1, [r3, #0]
 8002e34:	460b      	mov	r3, r1
 8002e36:	009b      	lsls	r3, r3, #2
 8002e38:	440b      	add	r3, r1
 8002e3a:	011b      	lsls	r3, r3, #4
 8002e3c:	441a      	add	r2, r3
 8002e3e:	f646 234c 	movw	r3, #27212	; 0x6a4c
 8002e42:	443b      	add	r3, r7
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	4413      	add	r3, r2
 8002e48:	3310      	adds	r3, #16
 8002e4a:	781b      	ldrb	r3, [r3, #0]
 8002e4c:	461a      	mov	r2, r3
 8002e4e:	4955      	ldr	r1, [pc, #340]	; (8002fa4 <main+0xb60>)
 8002e50:	f017 fe6a 	bl	801ab28 <siprintf>
 8002e54:	4602      	mov	r2, r0
 8002e56:	f646 2358 	movw	r3, #27224	; 0x6a58
 8002e5a:	443b      	add	r3, r7
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	4413      	add	r3, r2
 8002e60:	f646 2258 	movw	r2, #27224	; 0x6a58
 8002e64:	443a      	add	r2, r7
 8002e66:	6013      	str	r3, [r2, #0]
          for(int i = 0; i < TxDataSpace; i++){
 8002e68:	f646 234c 	movw	r3, #27212	; 0x6a4c
 8002e6c:	443b      	add	r3, r7
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	3301      	adds	r3, #1
 8002e72:	f646 224c 	movw	r2, #27212	; 0x6a4c
 8002e76:	443a      	add	r2, r7
 8002e78:	6013      	str	r3, [r2, #0]
 8002e7a:	f646 234c 	movw	r3, #27212	; 0x6a4c
 8002e7e:	443b      	add	r3, r7
 8002e80:	681a      	ldr	r2, [r3, #0]
 8002e82:	f646 230c 	movw	r3, #27148	; 0x6a0c
 8002e86:	443b      	add	r3, r7
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	429a      	cmp	r2, r3
 8002e8c:	dbc3      	blt.n	8002e16 <main+0x9d2>
          }
          NRF24_write(myTxData, 32);
 8002e8e:	2120      	movs	r1, #32
 8002e90:	4843      	ldr	r0, [pc, #268]	; (8002fa0 <main+0xb5c>)
 8002e92:	f7fe fb39 	bl	8001508 <NRF24_write>
          Txcnt = 0;
 8002e96:	2300      	movs	r3, #0
 8002e98:	f646 2258 	movw	r2, #27224	; 0x6a58
 8002e9c:	443a      	add	r2, r7
 8002e9e:	6013      	str	r3, [r2, #0]
          if(FDBuffer[BuffIndex].length - TxDataSpace > 32){
 8002ea0:	4a3d      	ldr	r2, [pc, #244]	; (8002f98 <main+0xb54>)
 8002ea2:	f646 2370 	movw	r3, #27248	; 0x6a70
 8002ea6:	443b      	add	r3, r7
 8002ea8:	441a      	add	r2, r3
 8002eaa:	f646 235c 	movw	r3, #27228	; 0x6a5c
 8002eae:	443b      	add	r3, r7
 8002eb0:	6819      	ldr	r1, [r3, #0]
 8002eb2:	460b      	mov	r3, r1
 8002eb4:	009b      	lsls	r3, r3, #2
 8002eb6:	440b      	add	r3, r1
 8002eb8:	011b      	lsls	r3, r3, #4
 8002eba:	4413      	add	r3, r2
 8002ebc:	3308      	adds	r3, #8
 8002ebe:	681a      	ldr	r2, [r3, #0]
 8002ec0:	f646 230c 	movw	r3, #27148	; 0x6a0c
 8002ec4:	443b      	add	r3, r7
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	1ad3      	subs	r3, r2, r3
 8002eca:	2b20      	cmp	r3, #32
 8002ecc:	f240 80d1 	bls.w	8003072 <main+0xc2e>
            for(int i = 0; i < 32; i++){
 8002ed0:	2300      	movs	r3, #0
 8002ed2:	f646 2248 	movw	r2, #27208	; 0x6a48
 8002ed6:	443a      	add	r2, r7
 8002ed8:	6013      	str	r3, [r2, #0]
 8002eda:	e037      	b.n	8002f4c <main+0xb08>
              Txcnt += sprintf(myTxData + Txcnt, "%c", FDBuffer[BuffIndex].data.bytes[i + TxDataSpace]);
 8002edc:	f646 2358 	movw	r3, #27224	; 0x6a58
 8002ee0:	443b      	add	r3, r7
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	4a2e      	ldr	r2, [pc, #184]	; (8002fa0 <main+0xb5c>)
 8002ee6:	189c      	adds	r4, r3, r2
 8002ee8:	f646 2348 	movw	r3, #27208	; 0x6a48
 8002eec:	443b      	add	r3, r7
 8002eee:	681a      	ldr	r2, [r3, #0]
 8002ef0:	f646 230c 	movw	r3, #27148	; 0x6a0c
 8002ef4:	443b      	add	r3, r7
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	18d0      	adds	r0, r2, r3
 8002efa:	4a27      	ldr	r2, [pc, #156]	; (8002f98 <main+0xb54>)
 8002efc:	f646 2370 	movw	r3, #27248	; 0x6a70
 8002f00:	443b      	add	r3, r7
 8002f02:	441a      	add	r2, r3
 8002f04:	f646 235c 	movw	r3, #27228	; 0x6a5c
 8002f08:	443b      	add	r3, r7
 8002f0a:	6819      	ldr	r1, [r3, #0]
 8002f0c:	460b      	mov	r3, r1
 8002f0e:	009b      	lsls	r3, r3, #2
 8002f10:	440b      	add	r3, r1
 8002f12:	011b      	lsls	r3, r3, #4
 8002f14:	4413      	add	r3, r2
 8002f16:	4403      	add	r3, r0
 8002f18:	3310      	adds	r3, #16
 8002f1a:	781b      	ldrb	r3, [r3, #0]
 8002f1c:	461a      	mov	r2, r3
 8002f1e:	4921      	ldr	r1, [pc, #132]	; (8002fa4 <main+0xb60>)
 8002f20:	4620      	mov	r0, r4
 8002f22:	f017 fe01 	bl	801ab28 <siprintf>
 8002f26:	4602      	mov	r2, r0
 8002f28:	f646 2358 	movw	r3, #27224	; 0x6a58
 8002f2c:	443b      	add	r3, r7
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	4413      	add	r3, r2
 8002f32:	f646 2258 	movw	r2, #27224	; 0x6a58
 8002f36:	443a      	add	r2, r7
 8002f38:	6013      	str	r3, [r2, #0]
            for(int i = 0; i < 32; i++){
 8002f3a:	f646 2348 	movw	r3, #27208	; 0x6a48
 8002f3e:	443b      	add	r3, r7
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	3301      	adds	r3, #1
 8002f44:	f646 2248 	movw	r2, #27208	; 0x6a48
 8002f48:	443a      	add	r2, r7
 8002f4a:	6013      	str	r3, [r2, #0]
 8002f4c:	f646 2348 	movw	r3, #27208	; 0x6a48
 8002f50:	443b      	add	r3, r7
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	2b1f      	cmp	r3, #31
 8002f56:	ddc1      	ble.n	8002edc <main+0xa98>
            }
            Txcnt = 0;
 8002f58:	2300      	movs	r3, #0
 8002f5a:	f646 2258 	movw	r2, #27224	; 0x6a58
 8002f5e:	443a      	add	r2, r7
 8002f60:	6013      	str	r3, [r2, #0]
            i++;
 8002f62:	f646 2350 	movw	r3, #27216	; 0x6a50
 8002f66:	443b      	add	r3, r7
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	3301      	adds	r3, #1
 8002f6c:	f646 2250 	movw	r2, #27216	; 0x6a50
 8002f70:	443a      	add	r2, r7
 8002f72:	6013      	str	r3, [r2, #0]
            NRF24_write(myTxData, 32);
 8002f74:	2120      	movs	r1, #32
 8002f76:	480a      	ldr	r0, [pc, #40]	; (8002fa0 <main+0xb5c>)
 8002f78:	f7fe fac6 	bl	8001508 <NRF24_write>
            for(int i = 0; i < FDBuffer[BuffIndex].length - TxDataSpace+32; i++){
 8002f7c:	2300      	movs	r3, #0
 8002f7e:	f646 2244 	movw	r2, #27204	; 0x6a44
 8002f82:	443a      	add	r2, r7
 8002f84:	6013      	str	r3, [r2, #0]
 8002f86:	e049      	b.n	800301c <main+0xbd8>
 8002f88:	24000374 	.word	0x24000374
 8002f8c:	2404432c 	.word	0x2404432c
 8002f90:	24000378 	.word	0x24000378
 8002f94:	2404448a 	.word	0x2404448a
 8002f98:	ffffefe8 	.word	0xffffefe8
 8002f9c:	0801c38c 	.word	0x0801c38c
 8002fa0:	240446ec 	.word	0x240446ec
 8002fa4:	0801c394 	.word	0x0801c394
              Txcnt += sprintf(myTxData + Txcnt, "%c", FDBuffer[BuffIndex].data.bytes[i + TxDataSpace + 32]);
 8002fa8:	f646 2358 	movw	r3, #27224	; 0x6a58
 8002fac:	443b      	add	r3, r7
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	4a75      	ldr	r2, [pc, #468]	; (8003188 <main+0xd44>)
 8002fb2:	189c      	adds	r4, r3, r2
 8002fb4:	f646 2344 	movw	r3, #27204	; 0x6a44
 8002fb8:	443b      	add	r3, r7
 8002fba:	681a      	ldr	r2, [r3, #0]
 8002fbc:	f646 230c 	movw	r3, #27148	; 0x6a0c
 8002fc0:	443b      	add	r3, r7
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	4413      	add	r3, r2
 8002fc6:	f103 0020 	add.w	r0, r3, #32
 8002fca:	4a70      	ldr	r2, [pc, #448]	; (800318c <main+0xd48>)
 8002fcc:	f646 2370 	movw	r3, #27248	; 0x6a70
 8002fd0:	443b      	add	r3, r7
 8002fd2:	441a      	add	r2, r3
 8002fd4:	f646 235c 	movw	r3, #27228	; 0x6a5c
 8002fd8:	443b      	add	r3, r7
 8002fda:	6819      	ldr	r1, [r3, #0]
 8002fdc:	460b      	mov	r3, r1
 8002fde:	009b      	lsls	r3, r3, #2
 8002fe0:	440b      	add	r3, r1
 8002fe2:	011b      	lsls	r3, r3, #4
 8002fe4:	4413      	add	r3, r2
 8002fe6:	4403      	add	r3, r0
 8002fe8:	3310      	adds	r3, #16
 8002fea:	781b      	ldrb	r3, [r3, #0]
 8002fec:	461a      	mov	r2, r3
 8002fee:	4968      	ldr	r1, [pc, #416]	; (8003190 <main+0xd4c>)
 8002ff0:	4620      	mov	r0, r4
 8002ff2:	f017 fd99 	bl	801ab28 <siprintf>
 8002ff6:	4602      	mov	r2, r0
 8002ff8:	f646 2358 	movw	r3, #27224	; 0x6a58
 8002ffc:	443b      	add	r3, r7
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	4413      	add	r3, r2
 8003002:	f646 2258 	movw	r2, #27224	; 0x6a58
 8003006:	443a      	add	r2, r7
 8003008:	6013      	str	r3, [r2, #0]
            for(int i = 0; i < FDBuffer[BuffIndex].length - TxDataSpace+32; i++){
 800300a:	f646 2344 	movw	r3, #27204	; 0x6a44
 800300e:	443b      	add	r3, r7
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	3301      	adds	r3, #1
 8003014:	f646 2244 	movw	r2, #27204	; 0x6a44
 8003018:	443a      	add	r2, r7
 800301a:	6013      	str	r3, [r2, #0]
 800301c:	4a5b      	ldr	r2, [pc, #364]	; (800318c <main+0xd48>)
 800301e:	f646 2370 	movw	r3, #27248	; 0x6a70
 8003022:	443b      	add	r3, r7
 8003024:	441a      	add	r2, r3
 8003026:	f646 235c 	movw	r3, #27228	; 0x6a5c
 800302a:	443b      	add	r3, r7
 800302c:	6819      	ldr	r1, [r3, #0]
 800302e:	460b      	mov	r3, r1
 8003030:	009b      	lsls	r3, r3, #2
 8003032:	440b      	add	r3, r1
 8003034:	011b      	lsls	r3, r3, #4
 8003036:	4413      	add	r3, r2
 8003038:	3308      	adds	r3, #8
 800303a:	681a      	ldr	r2, [r3, #0]
 800303c:	f646 230c 	movw	r3, #27148	; 0x6a0c
 8003040:	443b      	add	r3, r7
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	1ad3      	subs	r3, r2, r3
 8003046:	f103 0220 	add.w	r2, r3, #32
 800304a:	f646 2344 	movw	r3, #27204	; 0x6a44
 800304e:	443b      	add	r3, r7
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	429a      	cmp	r2, r3
 8003054:	d8a8      	bhi.n	8002fa8 <main+0xb64>
            }
            i++;
 8003056:	f646 2350 	movw	r3, #27216	; 0x6a50
 800305a:	443b      	add	r3, r7
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	3301      	adds	r3, #1
 8003060:	f646 2250 	movw	r2, #27216	; 0x6a50
 8003064:	443a      	add	r2, r7
 8003066:	6013      	str	r3, [r2, #0]
            NRF24_write(myTxData, 32);
 8003068:	2120      	movs	r1, #32
 800306a:	4847      	ldr	r0, [pc, #284]	; (8003188 <main+0xd44>)
 800306c:	f7fe fa4c 	bl	8001508 <NRF24_write>
 8003070:	e0dc      	b.n	800322c <main+0xde8>
          }else{
            Txcnt = 0;
 8003072:	2300      	movs	r3, #0
 8003074:	f646 2258 	movw	r2, #27224	; 0x6a58
 8003078:	443a      	add	r2, r7
 800307a:	6013      	str	r3, [r2, #0]
            for(int i = 0; i < FDBuffer[BuffIndex].length - TxDataSpace; i++){
 800307c:	2300      	movs	r3, #0
 800307e:	f646 2240 	movw	r2, #27200	; 0x6a40
 8003082:	443a      	add	r2, r7
 8003084:	6013      	str	r3, [r2, #0]
 8003086:	e037      	b.n	80030f8 <main+0xcb4>
              Txcnt += sprintf(myTxData + Txcnt, "%c", FDBuffer[BuffIndex].data.bytes[i + TxDataSpace]);
 8003088:	f646 2358 	movw	r3, #27224	; 0x6a58
 800308c:	443b      	add	r3, r7
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	4a3d      	ldr	r2, [pc, #244]	; (8003188 <main+0xd44>)
 8003092:	189c      	adds	r4, r3, r2
 8003094:	f646 2340 	movw	r3, #27200	; 0x6a40
 8003098:	443b      	add	r3, r7
 800309a:	681a      	ldr	r2, [r3, #0]
 800309c:	f646 230c 	movw	r3, #27148	; 0x6a0c
 80030a0:	443b      	add	r3, r7
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	18d0      	adds	r0, r2, r3
 80030a6:	4a39      	ldr	r2, [pc, #228]	; (800318c <main+0xd48>)
 80030a8:	f646 2370 	movw	r3, #27248	; 0x6a70
 80030ac:	443b      	add	r3, r7
 80030ae:	441a      	add	r2, r3
 80030b0:	f646 235c 	movw	r3, #27228	; 0x6a5c
 80030b4:	443b      	add	r3, r7
 80030b6:	6819      	ldr	r1, [r3, #0]
 80030b8:	460b      	mov	r3, r1
 80030ba:	009b      	lsls	r3, r3, #2
 80030bc:	440b      	add	r3, r1
 80030be:	011b      	lsls	r3, r3, #4
 80030c0:	4413      	add	r3, r2
 80030c2:	4403      	add	r3, r0
 80030c4:	3310      	adds	r3, #16
 80030c6:	781b      	ldrb	r3, [r3, #0]
 80030c8:	461a      	mov	r2, r3
 80030ca:	4931      	ldr	r1, [pc, #196]	; (8003190 <main+0xd4c>)
 80030cc:	4620      	mov	r0, r4
 80030ce:	f017 fd2b 	bl	801ab28 <siprintf>
 80030d2:	4602      	mov	r2, r0
 80030d4:	f646 2358 	movw	r3, #27224	; 0x6a58
 80030d8:	443b      	add	r3, r7
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	4413      	add	r3, r2
 80030de:	f646 2258 	movw	r2, #27224	; 0x6a58
 80030e2:	443a      	add	r2, r7
 80030e4:	6013      	str	r3, [r2, #0]
            for(int i = 0; i < FDBuffer[BuffIndex].length - TxDataSpace; i++){
 80030e6:	f646 2340 	movw	r3, #27200	; 0x6a40
 80030ea:	443b      	add	r3, r7
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	3301      	adds	r3, #1
 80030f0:	f646 2240 	movw	r2, #27200	; 0x6a40
 80030f4:	443a      	add	r2, r7
 80030f6:	6013      	str	r3, [r2, #0]
 80030f8:	4a24      	ldr	r2, [pc, #144]	; (800318c <main+0xd48>)
 80030fa:	f646 2370 	movw	r3, #27248	; 0x6a70
 80030fe:	443b      	add	r3, r7
 8003100:	441a      	add	r2, r3
 8003102:	f646 235c 	movw	r3, #27228	; 0x6a5c
 8003106:	443b      	add	r3, r7
 8003108:	6819      	ldr	r1, [r3, #0]
 800310a:	460b      	mov	r3, r1
 800310c:	009b      	lsls	r3, r3, #2
 800310e:	440b      	add	r3, r1
 8003110:	011b      	lsls	r3, r3, #4
 8003112:	4413      	add	r3, r2
 8003114:	3308      	adds	r3, #8
 8003116:	681a      	ldr	r2, [r3, #0]
 8003118:	f646 230c 	movw	r3, #27148	; 0x6a0c
 800311c:	443b      	add	r3, r7
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	1ad2      	subs	r2, r2, r3
 8003122:	f646 2340 	movw	r3, #27200	; 0x6a40
 8003126:	443b      	add	r3, r7
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	429a      	cmp	r2, r3
 800312c:	d8ac      	bhi.n	8003088 <main+0xc44>
            }
            i++;
 800312e:	f646 2350 	movw	r3, #27216	; 0x6a50
 8003132:	443b      	add	r3, r7
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	3301      	adds	r3, #1
 8003138:	f646 2250 	movw	r2, #27216	; 0x6a50
 800313c:	443a      	add	r2, r7
 800313e:	6013      	str	r3, [r2, #0]
            NRF24_write(myTxData, FDBuffer[BuffIndex].length - TxDataSpace);
 8003140:	4a12      	ldr	r2, [pc, #72]	; (800318c <main+0xd48>)
 8003142:	f646 2370 	movw	r3, #27248	; 0x6a70
 8003146:	443b      	add	r3, r7
 8003148:	441a      	add	r2, r3
 800314a:	f646 235c 	movw	r3, #27228	; 0x6a5c
 800314e:	443b      	add	r3, r7
 8003150:	6819      	ldr	r1, [r3, #0]
 8003152:	460b      	mov	r3, r1
 8003154:	009b      	lsls	r3, r3, #2
 8003156:	440b      	add	r3, r1
 8003158:	011b      	lsls	r3, r3, #4
 800315a:	4413      	add	r3, r2
 800315c:	3308      	adds	r3, #8
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	b2da      	uxtb	r2, r3
 8003162:	f646 230c 	movw	r3, #27148	; 0x6a0c
 8003166:	443b      	add	r3, r7
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	b2db      	uxtb	r3, r3
 800316c:	1ad3      	subs	r3, r2, r3
 800316e:	b2db      	uxtb	r3, r3
 8003170:	4619      	mov	r1, r3
 8003172:	4805      	ldr	r0, [pc, #20]	; (8003188 <main+0xd44>)
 8003174:	f7fe f9c8 	bl	8001508 <NRF24_write>
 8003178:	e058      	b.n	800322c <main+0xde8>
          }
        }
        else{
          for(int i = 0; i < FDBuffer[BuffIndex].length; i++){
 800317a:	2300      	movs	r3, #0
 800317c:	f646 223c 	movw	r2, #27196	; 0x6a3c
 8003180:	443a      	add	r2, r7
 8003182:	6013      	str	r3, [r2, #0]
 8003184:	e038      	b.n	80031f8 <main+0xdb4>
 8003186:	bf00      	nop
 8003188:	240446ec 	.word	0x240446ec
 800318c:	ffffefe8 	.word	0xffffefe8
 8003190:	0801c394 	.word	0x0801c394
            Txcnt += sprintf(myTxData + Txcnt, "%c", FDBuffer[BuffIndex].data.bytes[i]);
 8003194:	f646 2358 	movw	r3, #27224	; 0x6a58
 8003198:	443b      	add	r3, r7
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	4ab5      	ldr	r2, [pc, #724]	; (8003474 <main+0x1030>)
 800319e:	1898      	adds	r0, r3, r2
 80031a0:	4ab5      	ldr	r2, [pc, #724]	; (8003478 <main+0x1034>)
 80031a2:	f646 2370 	movw	r3, #27248	; 0x6a70
 80031a6:	443b      	add	r3, r7
 80031a8:	441a      	add	r2, r3
 80031aa:	f646 235c 	movw	r3, #27228	; 0x6a5c
 80031ae:	443b      	add	r3, r7
 80031b0:	6819      	ldr	r1, [r3, #0]
 80031b2:	460b      	mov	r3, r1
 80031b4:	009b      	lsls	r3, r3, #2
 80031b6:	440b      	add	r3, r1
 80031b8:	011b      	lsls	r3, r3, #4
 80031ba:	441a      	add	r2, r3
 80031bc:	f646 233c 	movw	r3, #27196	; 0x6a3c
 80031c0:	443b      	add	r3, r7
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	4413      	add	r3, r2
 80031c6:	3310      	adds	r3, #16
 80031c8:	781b      	ldrb	r3, [r3, #0]
 80031ca:	461a      	mov	r2, r3
 80031cc:	49ab      	ldr	r1, [pc, #684]	; (800347c <main+0x1038>)
 80031ce:	f017 fcab 	bl	801ab28 <siprintf>
 80031d2:	4602      	mov	r2, r0
 80031d4:	f646 2358 	movw	r3, #27224	; 0x6a58
 80031d8:	443b      	add	r3, r7
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	4413      	add	r3, r2
 80031de:	f646 2258 	movw	r2, #27224	; 0x6a58
 80031e2:	443a      	add	r2, r7
 80031e4:	6013      	str	r3, [r2, #0]
          for(int i = 0; i < FDBuffer[BuffIndex].length; i++){
 80031e6:	f646 233c 	movw	r3, #27196	; 0x6a3c
 80031ea:	443b      	add	r3, r7
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	3301      	adds	r3, #1
 80031f0:	f646 223c 	movw	r2, #27196	; 0x6a3c
 80031f4:	443a      	add	r2, r7
 80031f6:	6013      	str	r3, [r2, #0]
 80031f8:	4a9f      	ldr	r2, [pc, #636]	; (8003478 <main+0x1034>)
 80031fa:	f646 2370 	movw	r3, #27248	; 0x6a70
 80031fe:	443b      	add	r3, r7
 8003200:	441a      	add	r2, r3
 8003202:	f646 235c 	movw	r3, #27228	; 0x6a5c
 8003206:	443b      	add	r3, r7
 8003208:	6819      	ldr	r1, [r3, #0]
 800320a:	460b      	mov	r3, r1
 800320c:	009b      	lsls	r3, r3, #2
 800320e:	440b      	add	r3, r1
 8003210:	011b      	lsls	r3, r3, #4
 8003212:	4413      	add	r3, r2
 8003214:	3308      	adds	r3, #8
 8003216:	681a      	ldr	r2, [r3, #0]
 8003218:	f646 233c 	movw	r3, #27196	; 0x6a3c
 800321c:	443b      	add	r3, r7
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	429a      	cmp	r2, r3
 8003222:	d8b7      	bhi.n	8003194 <main+0xd50>
          }
          NRF24_write(myTxData, 32);//FDBuffer[BuffIndex].length + (32 - TxDataSpace)
 8003224:	2120      	movs	r1, #32
 8003226:	4893      	ldr	r0, [pc, #588]	; (8003474 <main+0x1030>)
 8003228:	f7fe f96e 	bl	8001508 <NRF24_write>
        }
        BuffIndex++;
 800322c:	f646 235c 	movw	r3, #27228	; 0x6a5c
 8003230:	443b      	add	r3, r7
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	3301      	adds	r3, #1
 8003236:	f646 225c 	movw	r2, #27228	; 0x6a5c
 800323a:	443a      	add	r2, r7
 800323c:	6013      	str	r3, [r2, #0]
        if(FDBuffer[BuffIndex].id == 0){
 800323e:	4a8e      	ldr	r2, [pc, #568]	; (8003478 <main+0x1034>)
 8003240:	f646 2370 	movw	r3, #27248	; 0x6a70
 8003244:	443b      	add	r3, r7
 8003246:	441a      	add	r2, r3
 8003248:	f646 235c 	movw	r3, #27228	; 0x6a5c
 800324c:	443b      	add	r3, r7
 800324e:	6819      	ldr	r1, [r3, #0]
 8003250:	460b      	mov	r3, r1
 8003252:	009b      	lsls	r3, r3, #2
 8003254:	440b      	add	r3, r1
 8003256:	011b      	lsls	r3, r3, #4
 8003258:	4413      	add	r3, r2
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	2b00      	cmp	r3, #0
 800325e:	d104      	bne.n	800326a <main+0xe26>
          BuffIndex = 0;
 8003260:	2300      	movs	r3, #0
 8003262:	f646 225c 	movw	r2, #27228	; 0x6a5c
 8003266:	443a      	add	r2, r7
 8003268:	6013      	str	r3, [r2, #0]
      for(int i = 0; i < AllowedTele; i++){
 800326a:	f646 2350 	movw	r3, #27216	; 0x6a50
 800326e:	443b      	add	r3, r7
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	3301      	adds	r3, #1
 8003274:	f646 2250 	movw	r2, #27216	; 0x6a50
 8003278:	443a      	add	r2, r7
 800327a:	6013      	str	r3, [r2, #0]
 800327c:	f646 2350 	movw	r3, #27216	; 0x6a50
 8003280:	443b      	add	r3, r7
 8003282:	681a      	ldr	r2, [r3, #0]
 8003284:	f646 2310 	movw	r3, #27152	; 0x6a10
 8003288:	443b      	add	r3, r7
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	429a      	cmp	r2, r3
 800328e:	f6ff ad73 	blt.w	8002d78 <main+0x934>


	  printf("Date:%u Month:%u Year:%u\n", sDate.Date, sDate.Month, sDate.Year);
	  printf("Hours:%u Minutes:%u Seconds:%u\n", sTime.Hours, sTime.Minutes, sTime.Seconds);*/

	  if(FDCAN_Flag){
 8003292:	4b7b      	ldr	r3, [pc, #492]	; (8003480 <main+0x103c>)
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	2b00      	cmp	r3, #0
 8003298:	f000 820d 	beq.w	80036b6 <main+0x1272>

		  RTC_TimeTypeDef lTime = sTime;
 800329c:	4b79      	ldr	r3, [pc, #484]	; (8003484 <main+0x1040>)
 800329e:	f646 2270 	movw	r2, #27248	; 0x6a70
 80032a2:	443a      	add	r2, r7
 80032a4:	4413      	add	r3, r2
 80032a6:	4a78      	ldr	r2, [pc, #480]	; (8003488 <main+0x1044>)
 80032a8:	461c      	mov	r4, r3
 80032aa:	4615      	mov	r5, r2
 80032ac:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80032ae:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80032b0:	682b      	ldr	r3, [r5, #0]
 80032b2:	6023      	str	r3, [r4, #0]
		  LocalTime = CanFDFrame.time;
 80032b4:	4b75      	ldr	r3, [pc, #468]	; (800348c <main+0x1048>)
 80032b6:	68db      	ldr	r3, [r3, #12]
 80032b8:	f646 221c 	movw	r2, #27164	; 0x6a1c
 80032bc:	443a      	add	r2, r7
 80032be:	6013      	str	r3, [r2, #0]
		  lTime.SubSeconds += LocalTime % 1000;
 80032c0:	4b70      	ldr	r3, [pc, #448]	; (8003484 <main+0x1040>)
 80032c2:	f646 2270 	movw	r2, #27248	; 0x6a70
 80032c6:	443a      	add	r2, r7
 80032c8:	4413      	add	r3, r2
 80032ca:	6859      	ldr	r1, [r3, #4]
 80032cc:	f646 231c 	movw	r3, #27164	; 0x6a1c
 80032d0:	443b      	add	r3, r7
 80032d2:	681a      	ldr	r2, [r3, #0]
 80032d4:	4b6e      	ldr	r3, [pc, #440]	; (8003490 <main+0x104c>)
 80032d6:	fba3 0302 	umull	r0, r3, r3, r2
 80032da:	099b      	lsrs	r3, r3, #6
 80032dc:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80032e0:	fb00 f303 	mul.w	r3, r0, r3
 80032e4:	1ad3      	subs	r3, r2, r3
 80032e6:	18ca      	adds	r2, r1, r3
 80032e8:	4b66      	ldr	r3, [pc, #408]	; (8003484 <main+0x1040>)
 80032ea:	f646 2170 	movw	r1, #27248	; 0x6a70
 80032ee:	4439      	add	r1, r7
 80032f0:	440b      	add	r3, r1
 80032f2:	605a      	str	r2, [r3, #4]
		  LocalTime = LocalTime/1000;
 80032f4:	f646 231c 	movw	r3, #27164	; 0x6a1c
 80032f8:	443b      	add	r3, r7
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	4a64      	ldr	r2, [pc, #400]	; (8003490 <main+0x104c>)
 80032fe:	fba2 2303 	umull	r2, r3, r2, r3
 8003302:	099b      	lsrs	r3, r3, #6
 8003304:	f646 221c 	movw	r2, #27164	; 0x6a1c
 8003308:	443a      	add	r2, r7
 800330a:	6013      	str	r3, [r2, #0]
		  lTime.Seconds += LocalTime % 60;
 800330c:	4b5d      	ldr	r3, [pc, #372]	; (8003484 <main+0x1040>)
 800330e:	f646 2270 	movw	r2, #27248	; 0x6a70
 8003312:	443a      	add	r2, r7
 8003314:	4413      	add	r3, r2
 8003316:	7898      	ldrb	r0, [r3, #2]
 8003318:	f646 231c 	movw	r3, #27164	; 0x6a1c
 800331c:	443b      	add	r3, r7
 800331e:	6819      	ldr	r1, [r3, #0]
 8003320:	4b5c      	ldr	r3, [pc, #368]	; (8003494 <main+0x1050>)
 8003322:	fba3 2301 	umull	r2, r3, r3, r1
 8003326:	095a      	lsrs	r2, r3, #5
 8003328:	4613      	mov	r3, r2
 800332a:	011b      	lsls	r3, r3, #4
 800332c:	1a9b      	subs	r3, r3, r2
 800332e:	009b      	lsls	r3, r3, #2
 8003330:	1aca      	subs	r2, r1, r3
 8003332:	b2d3      	uxtb	r3, r2
 8003334:	4403      	add	r3, r0
 8003336:	b2da      	uxtb	r2, r3
 8003338:	4b52      	ldr	r3, [pc, #328]	; (8003484 <main+0x1040>)
 800333a:	f646 2170 	movw	r1, #27248	; 0x6a70
 800333e:	4439      	add	r1, r7
 8003340:	440b      	add	r3, r1
 8003342:	709a      	strb	r2, [r3, #2]
		  if(lTime.Seconds >= 60){
 8003344:	4b4f      	ldr	r3, [pc, #316]	; (8003484 <main+0x1040>)
 8003346:	f646 2270 	movw	r2, #27248	; 0x6a70
 800334a:	443a      	add	r2, r7
 800334c:	4413      	add	r3, r2
 800334e:	789b      	ldrb	r3, [r3, #2]
 8003350:	2b3b      	cmp	r3, #59	; 0x3b
 8003352:	d91b      	bls.n	800338c <main+0xf48>
			  lTime.Seconds -= 60;
 8003354:	4b4b      	ldr	r3, [pc, #300]	; (8003484 <main+0x1040>)
 8003356:	f646 2270 	movw	r2, #27248	; 0x6a70
 800335a:	443a      	add	r2, r7
 800335c:	4413      	add	r3, r2
 800335e:	789b      	ldrb	r3, [r3, #2]
 8003360:	3b3c      	subs	r3, #60	; 0x3c
 8003362:	b2da      	uxtb	r2, r3
 8003364:	4b47      	ldr	r3, [pc, #284]	; (8003484 <main+0x1040>)
 8003366:	f646 2170 	movw	r1, #27248	; 0x6a70
 800336a:	4439      	add	r1, r7
 800336c:	440b      	add	r3, r1
 800336e:	709a      	strb	r2, [r3, #2]
			  lTime.Minutes += 1;
 8003370:	4b44      	ldr	r3, [pc, #272]	; (8003484 <main+0x1040>)
 8003372:	f646 2270 	movw	r2, #27248	; 0x6a70
 8003376:	443a      	add	r2, r7
 8003378:	4413      	add	r3, r2
 800337a:	785b      	ldrb	r3, [r3, #1]
 800337c:	3301      	adds	r3, #1
 800337e:	b2da      	uxtb	r2, r3
 8003380:	4b40      	ldr	r3, [pc, #256]	; (8003484 <main+0x1040>)
 8003382:	f646 2170 	movw	r1, #27248	; 0x6a70
 8003386:	4439      	add	r1, r7
 8003388:	440b      	add	r3, r1
 800338a:	705a      	strb	r2, [r3, #1]
		  }
		  LocalTime = LocalTime/60;
 800338c:	f646 231c 	movw	r3, #27164	; 0x6a1c
 8003390:	443b      	add	r3, r7
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	4a3f      	ldr	r2, [pc, #252]	; (8003494 <main+0x1050>)
 8003396:	fba2 2303 	umull	r2, r3, r2, r3
 800339a:	095b      	lsrs	r3, r3, #5
 800339c:	f646 221c 	movw	r2, #27164	; 0x6a1c
 80033a0:	443a      	add	r2, r7
 80033a2:	6013      	str	r3, [r2, #0]
		  lTime.Minutes += LocalTime % 60;
 80033a4:	4b37      	ldr	r3, [pc, #220]	; (8003484 <main+0x1040>)
 80033a6:	f646 2270 	movw	r2, #27248	; 0x6a70
 80033aa:	443a      	add	r2, r7
 80033ac:	4413      	add	r3, r2
 80033ae:	7858      	ldrb	r0, [r3, #1]
 80033b0:	f646 231c 	movw	r3, #27164	; 0x6a1c
 80033b4:	443b      	add	r3, r7
 80033b6:	6819      	ldr	r1, [r3, #0]
 80033b8:	4b36      	ldr	r3, [pc, #216]	; (8003494 <main+0x1050>)
 80033ba:	fba3 2301 	umull	r2, r3, r3, r1
 80033be:	095a      	lsrs	r2, r3, #5
 80033c0:	4613      	mov	r3, r2
 80033c2:	011b      	lsls	r3, r3, #4
 80033c4:	1a9b      	subs	r3, r3, r2
 80033c6:	009b      	lsls	r3, r3, #2
 80033c8:	1aca      	subs	r2, r1, r3
 80033ca:	b2d3      	uxtb	r3, r2
 80033cc:	4403      	add	r3, r0
 80033ce:	b2da      	uxtb	r2, r3
 80033d0:	4b2c      	ldr	r3, [pc, #176]	; (8003484 <main+0x1040>)
 80033d2:	f646 2170 	movw	r1, #27248	; 0x6a70
 80033d6:	4439      	add	r1, r7
 80033d8:	440b      	add	r3, r1
 80033da:	705a      	strb	r2, [r3, #1]
		  if(lTime.Minutes >= 60){
 80033dc:	4b29      	ldr	r3, [pc, #164]	; (8003484 <main+0x1040>)
 80033de:	f646 2270 	movw	r2, #27248	; 0x6a70
 80033e2:	443a      	add	r2, r7
 80033e4:	4413      	add	r3, r2
 80033e6:	785b      	ldrb	r3, [r3, #1]
 80033e8:	2b3b      	cmp	r3, #59	; 0x3b
 80033ea:	d91b      	bls.n	8003424 <main+0xfe0>
			  lTime.Minutes -= 60;
 80033ec:	4b25      	ldr	r3, [pc, #148]	; (8003484 <main+0x1040>)
 80033ee:	f646 2270 	movw	r2, #27248	; 0x6a70
 80033f2:	443a      	add	r2, r7
 80033f4:	4413      	add	r3, r2
 80033f6:	785b      	ldrb	r3, [r3, #1]
 80033f8:	3b3c      	subs	r3, #60	; 0x3c
 80033fa:	b2da      	uxtb	r2, r3
 80033fc:	4b21      	ldr	r3, [pc, #132]	; (8003484 <main+0x1040>)
 80033fe:	f646 2170 	movw	r1, #27248	; 0x6a70
 8003402:	4439      	add	r1, r7
 8003404:	440b      	add	r3, r1
 8003406:	705a      	strb	r2, [r3, #1]
			  lTime.Hours += 1;
 8003408:	4b1e      	ldr	r3, [pc, #120]	; (8003484 <main+0x1040>)
 800340a:	f646 2270 	movw	r2, #27248	; 0x6a70
 800340e:	443a      	add	r2, r7
 8003410:	4413      	add	r3, r2
 8003412:	781b      	ldrb	r3, [r3, #0]
 8003414:	3301      	adds	r3, #1
 8003416:	b2da      	uxtb	r2, r3
 8003418:	4b1a      	ldr	r3, [pc, #104]	; (8003484 <main+0x1040>)
 800341a:	f646 2170 	movw	r1, #27248	; 0x6a70
 800341e:	4439      	add	r1, r7
 8003420:	440b      	add	r3, r1
 8003422:	701a      	strb	r2, [r3, #0]
		  }
		  LocalTime = LocalTime/60;
 8003424:	f646 231c 	movw	r3, #27164	; 0x6a1c
 8003428:	443b      	add	r3, r7
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	4a19      	ldr	r2, [pc, #100]	; (8003494 <main+0x1050>)
 800342e:	fba2 2303 	umull	r2, r3, r2, r3
 8003432:	095b      	lsrs	r3, r3, #5
 8003434:	f646 221c 	movw	r2, #27164	; 0x6a1c
 8003438:	443a      	add	r2, r7
 800343a:	6013      	str	r3, [r2, #0]
		  lTime.Hours += LocalTime % 60;
 800343c:	4b11      	ldr	r3, [pc, #68]	; (8003484 <main+0x1040>)
 800343e:	f646 2270 	movw	r2, #27248	; 0x6a70
 8003442:	443a      	add	r2, r7
 8003444:	4413      	add	r3, r2
 8003446:	7818      	ldrb	r0, [r3, #0]
 8003448:	f646 231c 	movw	r3, #27164	; 0x6a1c
 800344c:	443b      	add	r3, r7
 800344e:	6819      	ldr	r1, [r3, #0]
 8003450:	4b10      	ldr	r3, [pc, #64]	; (8003494 <main+0x1050>)
 8003452:	fba3 2301 	umull	r2, r3, r3, r1
 8003456:	095a      	lsrs	r2, r3, #5
 8003458:	4613      	mov	r3, r2
 800345a:	011b      	lsls	r3, r3, #4
 800345c:	1a9b      	subs	r3, r3, r2
 800345e:	009b      	lsls	r3, r3, #2
 8003460:	1aca      	subs	r2, r1, r3
 8003462:	b2d3      	uxtb	r3, r2
 8003464:	4403      	add	r3, r0
 8003466:	b2da      	uxtb	r2, r3
 8003468:	4b06      	ldr	r3, [pc, #24]	; (8003484 <main+0x1040>)
 800346a:	f646 2170 	movw	r1, #27248	; 0x6a70
 800346e:	4439      	add	r1, r7
 8003470:	440b      	add	r3, r1
 8003472:	e011      	b.n	8003498 <main+0x1054>
 8003474:	240446ec 	.word	0x240446ec
 8003478:	ffffefe8 	.word	0xffffefe8
 800347c:	0801c394 	.word	0x0801c394
 8003480:	2400036c 	.word	0x2400036c
 8003484:	ffffe45c 	.word	0xffffe45c
 8003488:	240404a4 	.word	0x240404a4
 800348c:	24044068 	.word	0x24044068
 8003490:	10624dd3 	.word	0x10624dd3
 8003494:	88888889 	.word	0x88888889
 8003498:	701a      	strb	r2, [r3, #0]
      //Write to SD Card
		  //date/time, CANID, Data
		  CFDW = sprintf(CanFDWrite, "%u.%u.%u %u:%u:%u.%u,0x%X,",
				  sDate.Date,sDate.Month,sDate.Year, lTime.Hours,lTime.Minutes,lTime.Seconds,lTime.SubSeconds,
 800349a:	4b6d      	ldr	r3, [pc, #436]	; (8003650 <main+0x120c>)
 800349c:	789b      	ldrb	r3, [r3, #2]
		  CFDW = sprintf(CanFDWrite, "%u.%u.%u %u:%u:%u.%u,0x%X,",
 800349e:	469c      	mov	ip, r3
				  sDate.Date,sDate.Month,sDate.Year, lTime.Hours,lTime.Minutes,lTime.Seconds,lTime.SubSeconds,
 80034a0:	4b6b      	ldr	r3, [pc, #428]	; (8003650 <main+0x120c>)
 80034a2:	785b      	ldrb	r3, [r3, #1]
		  CFDW = sprintf(CanFDWrite, "%u.%u.%u %u:%u:%u.%u,0x%X,",
 80034a4:	469e      	mov	lr, r3
				  sDate.Date,sDate.Month,sDate.Year, lTime.Hours,lTime.Minutes,lTime.Seconds,lTime.SubSeconds,
 80034a6:	4b6a      	ldr	r3, [pc, #424]	; (8003650 <main+0x120c>)
 80034a8:	78db      	ldrb	r3, [r3, #3]
		  CFDW = sprintf(CanFDWrite, "%u.%u.%u %u:%u:%u.%u,0x%X,",
 80034aa:	4619      	mov	r1, r3
				  sDate.Date,sDate.Month,sDate.Year, lTime.Hours,lTime.Minutes,lTime.Seconds,lTime.SubSeconds,
 80034ac:	4b69      	ldr	r3, [pc, #420]	; (8003654 <main+0x1210>)
 80034ae:	f646 2270 	movw	r2, #27248	; 0x6a70
 80034b2:	443a      	add	r2, r7
 80034b4:	4413      	add	r3, r2
 80034b6:	781b      	ldrb	r3, [r3, #0]
		  CFDW = sprintf(CanFDWrite, "%u.%u.%u %u:%u:%u.%u,0x%X,",
 80034b8:	461c      	mov	r4, r3
				  sDate.Date,sDate.Month,sDate.Year, lTime.Hours,lTime.Minutes,lTime.Seconds,lTime.SubSeconds,
 80034ba:	4b66      	ldr	r3, [pc, #408]	; (8003654 <main+0x1210>)
 80034bc:	f646 2270 	movw	r2, #27248	; 0x6a70
 80034c0:	443a      	add	r2, r7
 80034c2:	4413      	add	r3, r2
 80034c4:	785b      	ldrb	r3, [r3, #1]
		  CFDW = sprintf(CanFDWrite, "%u.%u.%u %u:%u:%u.%u,0x%X,",
 80034c6:	461d      	mov	r5, r3
				  sDate.Date,sDate.Month,sDate.Year, lTime.Hours,lTime.Minutes,lTime.Seconds,lTime.SubSeconds,
 80034c8:	4b62      	ldr	r3, [pc, #392]	; (8003654 <main+0x1210>)
 80034ca:	f646 2270 	movw	r2, #27248	; 0x6a70
 80034ce:	443a      	add	r2, r7
 80034d0:	4413      	add	r3, r2
 80034d2:	789b      	ldrb	r3, [r3, #2]
		  CFDW = sprintf(CanFDWrite, "%u.%u.%u %u:%u:%u.%u,0x%X,",
 80034d4:	461e      	mov	r6, r3
 80034d6:	4b5f      	ldr	r3, [pc, #380]	; (8003654 <main+0x1210>)
 80034d8:	f646 2270 	movw	r2, #27248	; 0x6a70
 80034dc:	443a      	add	r2, r7
 80034de:	4413      	add	r3, r2
 80034e0:	685b      	ldr	r3, [r3, #4]
 80034e2:	4a5d      	ldr	r2, [pc, #372]	; (8003658 <main+0x1214>)
 80034e4:	6812      	ldr	r2, [r2, #0]
 80034e6:	485d      	ldr	r0, [pc, #372]	; (800365c <main+0x1218>)
 80034e8:	f646 2870 	movw	r8, #27248	; 0x6a70
 80034ec:	44b8      	add	r8, r7
 80034ee:	4440      	add	r0, r8
 80034f0:	9205      	str	r2, [sp, #20]
 80034f2:	9304      	str	r3, [sp, #16]
 80034f4:	9603      	str	r6, [sp, #12]
 80034f6:	9502      	str	r5, [sp, #8]
 80034f8:	9401      	str	r4, [sp, #4]
 80034fa:	9100      	str	r1, [sp, #0]
 80034fc:	4673      	mov	r3, lr
 80034fe:	4662      	mov	r2, ip
 8003500:	4957      	ldr	r1, [pc, #348]	; (8003660 <main+0x121c>)
 8003502:	f017 fb11 	bl	801ab28 <siprintf>
 8003506:	f646 2314 	movw	r3, #27156	; 0x6a14
 800350a:	443b      	add	r3, r7
 800350c:	6018      	str	r0, [r3, #0]
				  CanFDFrame.id);

		  CFDW = CANFD_Data_Process(CanFDWrite, CFDW);
 800350e:	4b53      	ldr	r3, [pc, #332]	; (800365c <main+0x1218>)
 8003510:	f646 2270 	movw	r2, #27248	; 0x6a70
 8003514:	443a      	add	r2, r7
 8003516:	4413      	add	r3, r2
 8003518:	f646 2214 	movw	r2, #27156	; 0x6a14
 800351c:	443a      	add	r2, r7
 800351e:	6811      	ldr	r1, [r2, #0]
 8003520:	4618      	mov	r0, r3
 8003522:	f7fd f93d 	bl	80007a0 <CANFD_Data_Process>
 8003526:	f646 2314 	movw	r3, #27156	; 0x6a14
 800352a:	443b      	add	r3, r7
 800352c:	6018      	str	r0, [r3, #0]

		  CFDW += sprintf(CanFDWrite + CFDW, "\n\r");
 800352e:	f646 2314 	movw	r3, #27156	; 0x6a14
 8003532:	443b      	add	r3, r7
 8003534:	681a      	ldr	r2, [r3, #0]
 8003536:	4b49      	ldr	r3, [pc, #292]	; (800365c <main+0x1218>)
 8003538:	f646 2170 	movw	r1, #27248	; 0x6a70
 800353c:	4439      	add	r1, r7
 800353e:	440b      	add	r3, r1
 8003540:	4413      	add	r3, r2
 8003542:	4a48      	ldr	r2, [pc, #288]	; (8003664 <main+0x1220>)
 8003544:	8811      	ldrh	r1, [r2, #0]
 8003546:	7892      	ldrb	r2, [r2, #2]
 8003548:	8019      	strh	r1, [r3, #0]
 800354a:	709a      	strb	r2, [r3, #2]
 800354c:	2202      	movs	r2, #2
 800354e:	f646 2314 	movw	r3, #27156	; 0x6a14
 8003552:	443b      	add	r3, r7
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	4413      	add	r3, r2
 8003558:	f646 2214 	movw	r2, #27156	; 0x6a14
 800355c:	443a      	add	r2, r7
 800355e:	6013      	str	r3, [r2, #0]
		  WriteToBuff(CanFDWrite, CFDW);
 8003560:	4b3e      	ldr	r3, [pc, #248]	; (800365c <main+0x1218>)
 8003562:	f646 2270 	movw	r2, #27248	; 0x6a70
 8003566:	443a      	add	r2, r7
 8003568:	4413      	add	r3, r2
 800356a:	f646 2214 	movw	r2, #27156	; 0x6a14
 800356e:	443a      	add	r2, r7
 8003570:	6811      	ldr	r1, [r2, #0]
 8003572:	4618      	mov	r0, r3
 8003574:	f7fe feba 	bl	80022ec <WriteToBuff>

      //Write to telemetry buffer
      
      for(int i = 0; i <50; i++){
 8003578:	2300      	movs	r3, #0
 800357a:	f646 2238 	movw	r2, #27192	; 0x6a38
 800357e:	443a      	add	r2, r7
 8003580:	6013      	str	r3, [r2, #0]
 8003582:	e08d      	b.n	80036a0 <main+0x125c>
        if(CanFDFrame.id == Tele_IDs[i]){ //check if frame should be checked
 8003584:	4b34      	ldr	r3, [pc, #208]	; (8003658 <main+0x1214>)
 8003586:	681a      	ldr	r2, [r3, #0]
 8003588:	4b37      	ldr	r3, [pc, #220]	; (8003668 <main+0x1224>)
 800358a:	f646 2170 	movw	r1, #27248	; 0x6a70
 800358e:	4439      	add	r1, r7
 8003590:	440b      	add	r3, r1
 8003592:	f646 2138 	movw	r1, #27192	; 0x6a38
 8003596:	4439      	add	r1, r7
 8003598:	6809      	ldr	r1, [r1, #0]
 800359a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800359e:	429a      	cmp	r2, r3
 80035a0:	d175      	bne.n	800368e <main+0x124a>
          for(int j = 0; j < 50; j++){
 80035a2:	2300      	movs	r3, #0
 80035a4:	f646 2234 	movw	r2, #27188	; 0x6a34
 80035a8:	443a      	add	r2, r7
 80035aa:	6013      	str	r3, [r2, #0]
 80035ac:	e069      	b.n	8003682 <main+0x123e>
            if(FDBuffer[j].id == CanFDFrame.id){
 80035ae:	4a2f      	ldr	r2, [pc, #188]	; (800366c <main+0x1228>)
 80035b0:	f646 2370 	movw	r3, #27248	; 0x6a70
 80035b4:	443b      	add	r3, r7
 80035b6:	441a      	add	r2, r3
 80035b8:	f646 2334 	movw	r3, #27188	; 0x6a34
 80035bc:	443b      	add	r3, r7
 80035be:	6819      	ldr	r1, [r3, #0]
 80035c0:	460b      	mov	r3, r1
 80035c2:	009b      	lsls	r3, r3, #2
 80035c4:	440b      	add	r3, r1
 80035c6:	011b      	lsls	r3, r3, #4
 80035c8:	4413      	add	r3, r2
 80035ca:	681a      	ldr	r2, [r3, #0]
 80035cc:	4b22      	ldr	r3, [pc, #136]	; (8003658 <main+0x1214>)
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	429a      	cmp	r2, r3
 80035d2:	d115      	bne.n	8003600 <main+0x11bc>
              FDBuffer[j] = CanFDFrame;
 80035d4:	4a25      	ldr	r2, [pc, #148]	; (800366c <main+0x1228>)
 80035d6:	f646 2370 	movw	r3, #27248	; 0x6a70
 80035da:	443b      	add	r3, r7
 80035dc:	441a      	add	r2, r3
 80035de:	f646 2334 	movw	r3, #27188	; 0x6a34
 80035e2:	443b      	add	r3, r7
 80035e4:	6819      	ldr	r1, [r3, #0]
 80035e6:	460b      	mov	r3, r1
 80035e8:	009b      	lsls	r3, r3, #2
 80035ea:	440b      	add	r3, r1
 80035ec:	011b      	lsls	r3, r3, #4
 80035ee:	4413      	add	r3, r2
 80035f0:	4a19      	ldr	r2, [pc, #100]	; (8003658 <main+0x1214>)
 80035f2:	4618      	mov	r0, r3
 80035f4:	4611      	mov	r1, r2
 80035f6:	2350      	movs	r3, #80	; 0x50
 80035f8:	461a      	mov	r2, r3
 80035fa:	f017 f919 	bl	801a830 <memcpy>
              goto TeleDoneFD;
 80035fe:	e057      	b.n	80036b0 <main+0x126c>
            }
            if(FDBuffer[j].id == 0){
 8003600:	4a1a      	ldr	r2, [pc, #104]	; (800366c <main+0x1228>)
 8003602:	f646 2370 	movw	r3, #27248	; 0x6a70
 8003606:	443b      	add	r3, r7
 8003608:	441a      	add	r2, r3
 800360a:	f646 2334 	movw	r3, #27188	; 0x6a34
 800360e:	443b      	add	r3, r7
 8003610:	6819      	ldr	r1, [r3, #0]
 8003612:	460b      	mov	r3, r1
 8003614:	009b      	lsls	r3, r3, #2
 8003616:	440b      	add	r3, r1
 8003618:	011b      	lsls	r3, r3, #4
 800361a:	4413      	add	r3, r2
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	2b00      	cmp	r3, #0
 8003620:	d126      	bne.n	8003670 <main+0x122c>
              FDBuffer[j] = CanFDFrame;
 8003622:	4a12      	ldr	r2, [pc, #72]	; (800366c <main+0x1228>)
 8003624:	f646 2370 	movw	r3, #27248	; 0x6a70
 8003628:	443b      	add	r3, r7
 800362a:	441a      	add	r2, r3
 800362c:	f646 2334 	movw	r3, #27188	; 0x6a34
 8003630:	443b      	add	r3, r7
 8003632:	6819      	ldr	r1, [r3, #0]
 8003634:	460b      	mov	r3, r1
 8003636:	009b      	lsls	r3, r3, #2
 8003638:	440b      	add	r3, r1
 800363a:	011b      	lsls	r3, r3, #4
 800363c:	4413      	add	r3, r2
 800363e:	4a06      	ldr	r2, [pc, #24]	; (8003658 <main+0x1214>)
 8003640:	4618      	mov	r0, r3
 8003642:	4611      	mov	r1, r2
 8003644:	2350      	movs	r3, #80	; 0x50
 8003646:	461a      	mov	r2, r3
 8003648:	f017 f8f2 	bl	801a830 <memcpy>
              goto TeleDoneFD;
 800364c:	e030      	b.n	80036b0 <main+0x126c>
 800364e:	bf00      	nop
 8003650:	240404b8 	.word	0x240404b8
 8003654:	ffffe45c 	.word	0xffffe45c
 8003658:	24044068 	.word	0x24044068
 800365c:	ffffe494 	.word	0xffffe494
 8003660:	0801c398 	.word	0x0801c398
 8003664:	0801c3b4 	.word	0x0801c3b4
 8003668:	ffffea70 	.word	0xffffea70
 800366c:	ffffefe8 	.word	0xffffefe8
          for(int j = 0; j < 50; j++){
 8003670:	f646 2334 	movw	r3, #27188	; 0x6a34
 8003674:	443b      	add	r3, r7
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	3301      	adds	r3, #1
 800367a:	f646 2234 	movw	r2, #27188	; 0x6a34
 800367e:	443a      	add	r2, r7
 8003680:	6013      	str	r3, [r2, #0]
 8003682:	f646 2334 	movw	r3, #27188	; 0x6a34
 8003686:	443b      	add	r3, r7
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	2b31      	cmp	r3, #49	; 0x31
 800368c:	dd8f      	ble.n	80035ae <main+0x116a>
      for(int i = 0; i <50; i++){
 800368e:	f646 2338 	movw	r3, #27192	; 0x6a38
 8003692:	443b      	add	r3, r7
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	3301      	adds	r3, #1
 8003698:	f646 2238 	movw	r2, #27192	; 0x6a38
 800369c:	443a      	add	r2, r7
 800369e:	6013      	str	r3, [r2, #0]
 80036a0:	f646 2338 	movw	r3, #27192	; 0x6a38
 80036a4:	443b      	add	r3, r7
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	2b31      	cmp	r3, #49	; 0x31
 80036aa:	f77f af6b 	ble.w	8003584 <main+0x1140>
            }
          }
        }
      }
TeleDoneFD:
 80036ae:	bf00      	nop
		  FDCAN_Flag = 0;
 80036b0:	4bb2      	ldr	r3, [pc, #712]	; (800397c <main+0x1538>)
 80036b2:	2200      	movs	r2, #0
 80036b4:	601a      	str	r2, [r3, #0]
	  }
	  if(CAN_Flag){
 80036b6:	4bb2      	ldr	r3, [pc, #712]	; (8003980 <main+0x153c>)
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	2b00      	cmp	r3, #0
 80036bc:	f000 8207 	beq.w	8003ace <main+0x168a>

		  RTC_TimeTypeDef lTime = sTime;
 80036c0:	4bb0      	ldr	r3, [pc, #704]	; (8003984 <main+0x1540>)
 80036c2:	f646 2270 	movw	r2, #27248	; 0x6a70
 80036c6:	443a      	add	r2, r7
 80036c8:	4413      	add	r3, r2
 80036ca:	4aaf      	ldr	r2, [pc, #700]	; (8003988 <main+0x1544>)
 80036cc:	461c      	mov	r4, r3
 80036ce:	4615      	mov	r5, r2
 80036d0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80036d2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80036d4:	682b      	ldr	r3, [r5, #0]
 80036d6:	6023      	str	r3, [r4, #0]
		  LocalTime = CanFrame.time;
 80036d8:	4bac      	ldr	r3, [pc, #688]	; (800398c <main+0x1548>)
 80036da:	689b      	ldr	r3, [r3, #8]
 80036dc:	f646 221c 	movw	r2, #27164	; 0x6a1c
 80036e0:	443a      	add	r2, r7
 80036e2:	6013      	str	r3, [r2, #0]
		  lTime.SubSeconds += LocalTime % 1000;
 80036e4:	4ba7      	ldr	r3, [pc, #668]	; (8003984 <main+0x1540>)
 80036e6:	f646 2270 	movw	r2, #27248	; 0x6a70
 80036ea:	443a      	add	r2, r7
 80036ec:	4413      	add	r3, r2
 80036ee:	6859      	ldr	r1, [r3, #4]
 80036f0:	f646 231c 	movw	r3, #27164	; 0x6a1c
 80036f4:	443b      	add	r3, r7
 80036f6:	681a      	ldr	r2, [r3, #0]
 80036f8:	4ba5      	ldr	r3, [pc, #660]	; (8003990 <main+0x154c>)
 80036fa:	fba3 0302 	umull	r0, r3, r3, r2
 80036fe:	099b      	lsrs	r3, r3, #6
 8003700:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8003704:	fb00 f303 	mul.w	r3, r0, r3
 8003708:	1ad3      	subs	r3, r2, r3
 800370a:	18ca      	adds	r2, r1, r3
 800370c:	4b9d      	ldr	r3, [pc, #628]	; (8003984 <main+0x1540>)
 800370e:	f646 2170 	movw	r1, #27248	; 0x6a70
 8003712:	4439      	add	r1, r7
 8003714:	440b      	add	r3, r1
 8003716:	605a      	str	r2, [r3, #4]
		  LocalTime = LocalTime/1000;
 8003718:	f646 231c 	movw	r3, #27164	; 0x6a1c
 800371c:	443b      	add	r3, r7
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	4a9b      	ldr	r2, [pc, #620]	; (8003990 <main+0x154c>)
 8003722:	fba2 2303 	umull	r2, r3, r2, r3
 8003726:	099b      	lsrs	r3, r3, #6
 8003728:	f646 221c 	movw	r2, #27164	; 0x6a1c
 800372c:	443a      	add	r2, r7
 800372e:	6013      	str	r3, [r2, #0]
		  lTime.Seconds += LocalTime % 60;
 8003730:	4b94      	ldr	r3, [pc, #592]	; (8003984 <main+0x1540>)
 8003732:	f646 2270 	movw	r2, #27248	; 0x6a70
 8003736:	443a      	add	r2, r7
 8003738:	4413      	add	r3, r2
 800373a:	7898      	ldrb	r0, [r3, #2]
 800373c:	f646 231c 	movw	r3, #27164	; 0x6a1c
 8003740:	443b      	add	r3, r7
 8003742:	6819      	ldr	r1, [r3, #0]
 8003744:	4b93      	ldr	r3, [pc, #588]	; (8003994 <main+0x1550>)
 8003746:	fba3 2301 	umull	r2, r3, r3, r1
 800374a:	095a      	lsrs	r2, r3, #5
 800374c:	4613      	mov	r3, r2
 800374e:	011b      	lsls	r3, r3, #4
 8003750:	1a9b      	subs	r3, r3, r2
 8003752:	009b      	lsls	r3, r3, #2
 8003754:	1aca      	subs	r2, r1, r3
 8003756:	b2d3      	uxtb	r3, r2
 8003758:	4403      	add	r3, r0
 800375a:	b2da      	uxtb	r2, r3
 800375c:	4b89      	ldr	r3, [pc, #548]	; (8003984 <main+0x1540>)
 800375e:	f646 2170 	movw	r1, #27248	; 0x6a70
 8003762:	4439      	add	r1, r7
 8003764:	440b      	add	r3, r1
 8003766:	709a      	strb	r2, [r3, #2]
		  if(lTime.Seconds >= 60){
 8003768:	4b86      	ldr	r3, [pc, #536]	; (8003984 <main+0x1540>)
 800376a:	f646 2270 	movw	r2, #27248	; 0x6a70
 800376e:	443a      	add	r2, r7
 8003770:	4413      	add	r3, r2
 8003772:	789b      	ldrb	r3, [r3, #2]
 8003774:	2b3b      	cmp	r3, #59	; 0x3b
 8003776:	d91b      	bls.n	80037b0 <main+0x136c>
			  lTime.Seconds -= 60;
 8003778:	4b82      	ldr	r3, [pc, #520]	; (8003984 <main+0x1540>)
 800377a:	f646 2270 	movw	r2, #27248	; 0x6a70
 800377e:	443a      	add	r2, r7
 8003780:	4413      	add	r3, r2
 8003782:	789b      	ldrb	r3, [r3, #2]
 8003784:	3b3c      	subs	r3, #60	; 0x3c
 8003786:	b2da      	uxtb	r2, r3
 8003788:	4b7e      	ldr	r3, [pc, #504]	; (8003984 <main+0x1540>)
 800378a:	f646 2170 	movw	r1, #27248	; 0x6a70
 800378e:	4439      	add	r1, r7
 8003790:	440b      	add	r3, r1
 8003792:	709a      	strb	r2, [r3, #2]
			  lTime.Minutes += 1;
 8003794:	4b7b      	ldr	r3, [pc, #492]	; (8003984 <main+0x1540>)
 8003796:	f646 2270 	movw	r2, #27248	; 0x6a70
 800379a:	443a      	add	r2, r7
 800379c:	4413      	add	r3, r2
 800379e:	785b      	ldrb	r3, [r3, #1]
 80037a0:	3301      	adds	r3, #1
 80037a2:	b2da      	uxtb	r2, r3
 80037a4:	4b77      	ldr	r3, [pc, #476]	; (8003984 <main+0x1540>)
 80037a6:	f646 2170 	movw	r1, #27248	; 0x6a70
 80037aa:	4439      	add	r1, r7
 80037ac:	440b      	add	r3, r1
 80037ae:	705a      	strb	r2, [r3, #1]
		  }
		  LocalTime = LocalTime/60;
 80037b0:	f646 231c 	movw	r3, #27164	; 0x6a1c
 80037b4:	443b      	add	r3, r7
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	4a76      	ldr	r2, [pc, #472]	; (8003994 <main+0x1550>)
 80037ba:	fba2 2303 	umull	r2, r3, r2, r3
 80037be:	095b      	lsrs	r3, r3, #5
 80037c0:	f646 221c 	movw	r2, #27164	; 0x6a1c
 80037c4:	443a      	add	r2, r7
 80037c6:	6013      	str	r3, [r2, #0]
		  lTime.Minutes += LocalTime % 60;
 80037c8:	4b6e      	ldr	r3, [pc, #440]	; (8003984 <main+0x1540>)
 80037ca:	f646 2270 	movw	r2, #27248	; 0x6a70
 80037ce:	443a      	add	r2, r7
 80037d0:	4413      	add	r3, r2
 80037d2:	7858      	ldrb	r0, [r3, #1]
 80037d4:	f646 231c 	movw	r3, #27164	; 0x6a1c
 80037d8:	443b      	add	r3, r7
 80037da:	6819      	ldr	r1, [r3, #0]
 80037dc:	4b6d      	ldr	r3, [pc, #436]	; (8003994 <main+0x1550>)
 80037de:	fba3 2301 	umull	r2, r3, r3, r1
 80037e2:	095a      	lsrs	r2, r3, #5
 80037e4:	4613      	mov	r3, r2
 80037e6:	011b      	lsls	r3, r3, #4
 80037e8:	1a9b      	subs	r3, r3, r2
 80037ea:	009b      	lsls	r3, r3, #2
 80037ec:	1aca      	subs	r2, r1, r3
 80037ee:	b2d3      	uxtb	r3, r2
 80037f0:	4403      	add	r3, r0
 80037f2:	b2da      	uxtb	r2, r3
 80037f4:	4b63      	ldr	r3, [pc, #396]	; (8003984 <main+0x1540>)
 80037f6:	f646 2170 	movw	r1, #27248	; 0x6a70
 80037fa:	4439      	add	r1, r7
 80037fc:	440b      	add	r3, r1
 80037fe:	705a      	strb	r2, [r3, #1]
		  if(lTime.Minutes >= 60){
 8003800:	4b60      	ldr	r3, [pc, #384]	; (8003984 <main+0x1540>)
 8003802:	f646 2270 	movw	r2, #27248	; 0x6a70
 8003806:	443a      	add	r2, r7
 8003808:	4413      	add	r3, r2
 800380a:	785b      	ldrb	r3, [r3, #1]
 800380c:	2b3b      	cmp	r3, #59	; 0x3b
 800380e:	d91b      	bls.n	8003848 <main+0x1404>
			  lTime.Minutes -= 60;
 8003810:	4b5c      	ldr	r3, [pc, #368]	; (8003984 <main+0x1540>)
 8003812:	f646 2270 	movw	r2, #27248	; 0x6a70
 8003816:	443a      	add	r2, r7
 8003818:	4413      	add	r3, r2
 800381a:	785b      	ldrb	r3, [r3, #1]
 800381c:	3b3c      	subs	r3, #60	; 0x3c
 800381e:	b2da      	uxtb	r2, r3
 8003820:	4b58      	ldr	r3, [pc, #352]	; (8003984 <main+0x1540>)
 8003822:	f646 2170 	movw	r1, #27248	; 0x6a70
 8003826:	4439      	add	r1, r7
 8003828:	440b      	add	r3, r1
 800382a:	705a      	strb	r2, [r3, #1]
			  lTime.Hours += 1;
 800382c:	4b55      	ldr	r3, [pc, #340]	; (8003984 <main+0x1540>)
 800382e:	f646 2270 	movw	r2, #27248	; 0x6a70
 8003832:	443a      	add	r2, r7
 8003834:	4413      	add	r3, r2
 8003836:	781b      	ldrb	r3, [r3, #0]
 8003838:	3301      	adds	r3, #1
 800383a:	b2da      	uxtb	r2, r3
 800383c:	4b51      	ldr	r3, [pc, #324]	; (8003984 <main+0x1540>)
 800383e:	f646 2170 	movw	r1, #27248	; 0x6a70
 8003842:	4439      	add	r1, r7
 8003844:	440b      	add	r3, r1
 8003846:	701a      	strb	r2, [r3, #0]
		  }
		  LocalTime = LocalTime/60;
 8003848:	f646 231c 	movw	r3, #27164	; 0x6a1c
 800384c:	443b      	add	r3, r7
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	4a50      	ldr	r2, [pc, #320]	; (8003994 <main+0x1550>)
 8003852:	fba2 2303 	umull	r2, r3, r2, r3
 8003856:	095b      	lsrs	r3, r3, #5
 8003858:	f646 221c 	movw	r2, #27164	; 0x6a1c
 800385c:	443a      	add	r2, r7
 800385e:	6013      	str	r3, [r2, #0]
		  lTime.Hours += LocalTime % 60;
 8003860:	4b48      	ldr	r3, [pc, #288]	; (8003984 <main+0x1540>)
 8003862:	f646 2270 	movw	r2, #27248	; 0x6a70
 8003866:	443a      	add	r2, r7
 8003868:	4413      	add	r3, r2
 800386a:	7818      	ldrb	r0, [r3, #0]
 800386c:	f646 231c 	movw	r3, #27164	; 0x6a1c
 8003870:	443b      	add	r3, r7
 8003872:	6819      	ldr	r1, [r3, #0]
 8003874:	4b47      	ldr	r3, [pc, #284]	; (8003994 <main+0x1550>)
 8003876:	fba3 2301 	umull	r2, r3, r3, r1
 800387a:	095a      	lsrs	r2, r3, #5
 800387c:	4613      	mov	r3, r2
 800387e:	011b      	lsls	r3, r3, #4
 8003880:	1a9b      	subs	r3, r3, r2
 8003882:	009b      	lsls	r3, r3, #2
 8003884:	1aca      	subs	r2, r1, r3
 8003886:	b2d3      	uxtb	r3, r2
 8003888:	4403      	add	r3, r0
 800388a:	b2da      	uxtb	r2, r3
 800388c:	4b3d      	ldr	r3, [pc, #244]	; (8003984 <main+0x1540>)
 800388e:	f646 2170 	movw	r1, #27248	; 0x6a70
 8003892:	4439      	add	r1, r7
 8003894:	440b      	add	r3, r1
 8003896:	701a      	strb	r2, [r3, #0]

		  //date/time, CANID, Data
		  CW = sprintf(CanWrite, "%u.%u.%u %u:%u:%u.%u,0x%X,",
				  sDate.Date,sDate.Month,sDate.Year, lTime.Hours,lTime.Minutes,lTime.Seconds,lTime.SubSeconds,
 8003898:	4b3f      	ldr	r3, [pc, #252]	; (8003998 <main+0x1554>)
 800389a:	789b      	ldrb	r3, [r3, #2]
		  CW = sprintf(CanWrite, "%u.%u.%u %u:%u:%u.%u,0x%X,",
 800389c:	469c      	mov	ip, r3
				  sDate.Date,sDate.Month,sDate.Year, lTime.Hours,lTime.Minutes,lTime.Seconds,lTime.SubSeconds,
 800389e:	4b3e      	ldr	r3, [pc, #248]	; (8003998 <main+0x1554>)
 80038a0:	785b      	ldrb	r3, [r3, #1]
		  CW = sprintf(CanWrite, "%u.%u.%u %u:%u:%u.%u,0x%X,",
 80038a2:	469e      	mov	lr, r3
				  sDate.Date,sDate.Month,sDate.Year, lTime.Hours,lTime.Minutes,lTime.Seconds,lTime.SubSeconds,
 80038a4:	4b3c      	ldr	r3, [pc, #240]	; (8003998 <main+0x1554>)
 80038a6:	78db      	ldrb	r3, [r3, #3]
		  CW = sprintf(CanWrite, "%u.%u.%u %u:%u:%u.%u,0x%X,",
 80038a8:	4619      	mov	r1, r3
				  sDate.Date,sDate.Month,sDate.Year, lTime.Hours,lTime.Minutes,lTime.Seconds,lTime.SubSeconds,
 80038aa:	4b36      	ldr	r3, [pc, #216]	; (8003984 <main+0x1540>)
 80038ac:	f646 2270 	movw	r2, #27248	; 0x6a70
 80038b0:	443a      	add	r2, r7
 80038b2:	4413      	add	r3, r2
 80038b4:	781b      	ldrb	r3, [r3, #0]
		  CW = sprintf(CanWrite, "%u.%u.%u %u:%u:%u.%u,0x%X,",
 80038b6:	461c      	mov	r4, r3
				  sDate.Date,sDate.Month,sDate.Year, lTime.Hours,lTime.Minutes,lTime.Seconds,lTime.SubSeconds,
 80038b8:	4b32      	ldr	r3, [pc, #200]	; (8003984 <main+0x1540>)
 80038ba:	f646 2270 	movw	r2, #27248	; 0x6a70
 80038be:	443a      	add	r2, r7
 80038c0:	4413      	add	r3, r2
 80038c2:	785b      	ldrb	r3, [r3, #1]
		  CW = sprintf(CanWrite, "%u.%u.%u %u:%u:%u.%u,0x%X,",
 80038c4:	461d      	mov	r5, r3
				  sDate.Date,sDate.Month,sDate.Year, lTime.Hours,lTime.Minutes,lTime.Seconds,lTime.SubSeconds,
 80038c6:	4b2f      	ldr	r3, [pc, #188]	; (8003984 <main+0x1540>)
 80038c8:	f646 2270 	movw	r2, #27248	; 0x6a70
 80038cc:	443a      	add	r2, r7
 80038ce:	4413      	add	r3, r2
 80038d0:	789b      	ldrb	r3, [r3, #2]
		  CW = sprintf(CanWrite, "%u.%u.%u %u:%u:%u.%u,0x%X,",
 80038d2:	461e      	mov	r6, r3
 80038d4:	4b2b      	ldr	r3, [pc, #172]	; (8003984 <main+0x1540>)
 80038d6:	f646 2270 	movw	r2, #27248	; 0x6a70
 80038da:	443a      	add	r2, r7
 80038dc:	4413      	add	r3, r2
 80038de:	685b      	ldr	r3, [r3, #4]
 80038e0:	4a2a      	ldr	r2, [pc, #168]	; (800398c <main+0x1548>)
 80038e2:	6812      	ldr	r2, [r2, #0]
 80038e4:	482d      	ldr	r0, [pc, #180]	; (800399c <main+0x1558>)
 80038e6:	f646 2870 	movw	r8, #27248	; 0x6a70
 80038ea:	44b8      	add	r8, r7
 80038ec:	4440      	add	r0, r8
 80038ee:	9205      	str	r2, [sp, #20]
 80038f0:	9304      	str	r3, [sp, #16]
 80038f2:	9603      	str	r6, [sp, #12]
 80038f4:	9502      	str	r5, [sp, #8]
 80038f6:	9401      	str	r4, [sp, #4]
 80038f8:	9100      	str	r1, [sp, #0]
 80038fa:	4673      	mov	r3, lr
 80038fc:	4662      	mov	r2, ip
 80038fe:	4928      	ldr	r1, [pc, #160]	; (80039a0 <main+0x155c>)
 8003900:	f017 f912 	bl	801ab28 <siprintf>
 8003904:	f646 2318 	movw	r3, #27160	; 0x6a18
 8003908:	443b      	add	r3, r7
 800390a:	6018      	str	r0, [r3, #0]
				  CanFrame.id);

		  CW = CAN_Data_Process(CanWrite, CW);
 800390c:	4b23      	ldr	r3, [pc, #140]	; (800399c <main+0x1558>)
 800390e:	f646 2270 	movw	r2, #27248	; 0x6a70
 8003912:	443a      	add	r2, r7
 8003914:	4413      	add	r3, r2
 8003916:	f646 2218 	movw	r2, #27160	; 0x6a18
 800391a:	443a      	add	r2, r7
 800391c:	6811      	ldr	r1, [r2, #0]
 800391e:	4618      	mov	r0, r3
 8003920:	f7fd f896 	bl	8000a50 <CAN_Data_Process>
 8003924:	f646 2318 	movw	r3, #27160	; 0x6a18
 8003928:	443b      	add	r3, r7
 800392a:	6018      	str	r0, [r3, #0]

		  CW += sprintf(CanWrite + CW, "\n\r");
 800392c:	f646 2318 	movw	r3, #27160	; 0x6a18
 8003930:	443b      	add	r3, r7
 8003932:	681a      	ldr	r2, [r3, #0]
 8003934:	4b19      	ldr	r3, [pc, #100]	; (800399c <main+0x1558>)
 8003936:	f646 2170 	movw	r1, #27248	; 0x6a70
 800393a:	4439      	add	r1, r7
 800393c:	440b      	add	r3, r1
 800393e:	4413      	add	r3, r2
 8003940:	4a18      	ldr	r2, [pc, #96]	; (80039a4 <main+0x1560>)
 8003942:	8811      	ldrh	r1, [r2, #0]
 8003944:	7892      	ldrb	r2, [r2, #2]
 8003946:	8019      	strh	r1, [r3, #0]
 8003948:	709a      	strb	r2, [r3, #2]
 800394a:	2202      	movs	r2, #2
 800394c:	f646 2318 	movw	r3, #27160	; 0x6a18
 8003950:	443b      	add	r3, r7
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	4413      	add	r3, r2
 8003956:	f646 2218 	movw	r2, #27160	; 0x6a18
 800395a:	443a      	add	r2, r7
 800395c:	6013      	str	r3, [r2, #0]
		  WriteToBuff(CanWrite, CW);
 800395e:	4b0f      	ldr	r3, [pc, #60]	; (800399c <main+0x1558>)
 8003960:	f646 2270 	movw	r2, #27248	; 0x6a70
 8003964:	443a      	add	r2, r7
 8003966:	4413      	add	r3, r2
 8003968:	f646 2218 	movw	r2, #27160	; 0x6a18
 800396c:	443a      	add	r2, r7
 800396e:	6811      	ldr	r1, [r2, #0]
 8003970:	4618      	mov	r0, r3
 8003972:	f7fe fcbb 	bl	80022ec <WriteToBuff>

      for(int i = 0; i <50; i++){
 8003976:	2300      	movs	r3, #0
 8003978:	e016      	b.n	80039a8 <main+0x1564>
 800397a:	bf00      	nop
 800397c:	2400036c 	.word	0x2400036c
 8003980:	24000370 	.word	0x24000370
 8003984:	ffffe448 	.word	0xffffe448
 8003988:	240404a4 	.word	0x240404a4
 800398c:	240440e0 	.word	0x240440e0
 8003990:	10624dd3 	.word	0x10624dd3
 8003994:	88888889 	.word	0x88888889
 8003998:	240404b8 	.word	0x240404b8
 800399c:	ffffe87c 	.word	0xffffe87c
 80039a0:	0801c398 	.word	0x0801c398
 80039a4:	0801c3b4 	.word	0x0801c3b4
 80039a8:	f646 2230 	movw	r2, #27184	; 0x6a30
 80039ac:	443a      	add	r2, r7
 80039ae:	6013      	str	r3, [r2, #0]
 80039b0:	e080      	b.n	8003ab4 <main+0x1670>
        if(CanFrame.id == Tele_IDs[i]){ //check if frame should be checked
 80039b2:	4b4f      	ldr	r3, [pc, #316]	; (8003af0 <main+0x16ac>)
 80039b4:	681a      	ldr	r2, [r3, #0]
 80039b6:	4b4f      	ldr	r3, [pc, #316]	; (8003af4 <main+0x16b0>)
 80039b8:	f646 2170 	movw	r1, #27248	; 0x6a70
 80039bc:	4439      	add	r1, r7
 80039be:	440b      	add	r3, r1
 80039c0:	f646 2130 	movw	r1, #27184	; 0x6a30
 80039c4:	4439      	add	r1, r7
 80039c6:	6809      	ldr	r1, [r1, #0]
 80039c8:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80039cc:	429a      	cmp	r2, r3
 80039ce:	d168      	bne.n	8003aa2 <main+0x165e>
          for(int j = 0; j < 50; j++){
 80039d0:	2300      	movs	r3, #0
 80039d2:	f646 222c 	movw	r2, #27180	; 0x6a2c
 80039d6:	443a      	add	r2, r7
 80039d8:	6013      	str	r3, [r2, #0]
 80039da:	e05c      	b.n	8003a96 <main+0x1652>
            if(Buffer[j].id == CanFrame.id){
 80039dc:	4a46      	ldr	r2, [pc, #280]	; (8003af8 <main+0x16b4>)
 80039de:	f646 2370 	movw	r3, #27248	; 0x6a70
 80039e2:	443b      	add	r3, r7
 80039e4:	441a      	add	r2, r3
 80039e6:	f646 232c 	movw	r3, #27180	; 0x6a2c
 80039ea:	443b      	add	r3, r7
 80039ec:	6819      	ldr	r1, [r3, #0]
 80039ee:	460b      	mov	r3, r1
 80039f0:	005b      	lsls	r3, r3, #1
 80039f2:	440b      	add	r3, r1
 80039f4:	00db      	lsls	r3, r3, #3
 80039f6:	4413      	add	r3, r2
 80039f8:	681a      	ldr	r2, [r3, #0]
 80039fa:	4b3d      	ldr	r3, [pc, #244]	; (8003af0 <main+0x16ac>)
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	429a      	cmp	r2, r3
 8003a00:	d117      	bne.n	8003a32 <main+0x15ee>
              Buffer[j] = CanFrame;     //if its already in the buffer replace it
 8003a02:	4a3d      	ldr	r2, [pc, #244]	; (8003af8 <main+0x16b4>)
 8003a04:	f646 2370 	movw	r3, #27248	; 0x6a70
 8003a08:	443b      	add	r3, r7
 8003a0a:	441a      	add	r2, r3
 8003a0c:	f646 232c 	movw	r3, #27180	; 0x6a2c
 8003a10:	443b      	add	r3, r7
 8003a12:	6819      	ldr	r1, [r3, #0]
 8003a14:	460b      	mov	r3, r1
 8003a16:	005b      	lsls	r3, r3, #1
 8003a18:	440b      	add	r3, r1
 8003a1a:	00db      	lsls	r3, r3, #3
 8003a1c:	4413      	add	r3, r2
 8003a1e:	4a34      	ldr	r2, [pc, #208]	; (8003af0 <main+0x16ac>)
 8003a20:	461c      	mov	r4, r3
 8003a22:	4615      	mov	r5, r2
 8003a24:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003a26:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003a28:	e895 0003 	ldmia.w	r5, {r0, r1}
 8003a2c:	e884 0003 	stmia.w	r4, {r0, r1}
              goto TeleDone;
 8003a30:	e04a      	b.n	8003ac8 <main+0x1684>
            }
            if(Buffer[j].id == 0){
 8003a32:	4a31      	ldr	r2, [pc, #196]	; (8003af8 <main+0x16b4>)
 8003a34:	f646 2370 	movw	r3, #27248	; 0x6a70
 8003a38:	443b      	add	r3, r7
 8003a3a:	441a      	add	r2, r3
 8003a3c:	f646 232c 	movw	r3, #27180	; 0x6a2c
 8003a40:	443b      	add	r3, r7
 8003a42:	6819      	ldr	r1, [r3, #0]
 8003a44:	460b      	mov	r3, r1
 8003a46:	005b      	lsls	r3, r3, #1
 8003a48:	440b      	add	r3, r1
 8003a4a:	00db      	lsls	r3, r3, #3
 8003a4c:	4413      	add	r3, r2
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	2b00      	cmp	r3, #0
 8003a52:	d117      	bne.n	8003a84 <main+0x1640>
              Buffer[j] = CanFrame;     //if you get to the end of the defined packets withoout finding anything add the packet on the end
 8003a54:	4a28      	ldr	r2, [pc, #160]	; (8003af8 <main+0x16b4>)
 8003a56:	f646 2370 	movw	r3, #27248	; 0x6a70
 8003a5a:	443b      	add	r3, r7
 8003a5c:	441a      	add	r2, r3
 8003a5e:	f646 232c 	movw	r3, #27180	; 0x6a2c
 8003a62:	443b      	add	r3, r7
 8003a64:	6819      	ldr	r1, [r3, #0]
 8003a66:	460b      	mov	r3, r1
 8003a68:	005b      	lsls	r3, r3, #1
 8003a6a:	440b      	add	r3, r1
 8003a6c:	00db      	lsls	r3, r3, #3
 8003a6e:	4413      	add	r3, r2
 8003a70:	4a1f      	ldr	r2, [pc, #124]	; (8003af0 <main+0x16ac>)
 8003a72:	461c      	mov	r4, r3
 8003a74:	4615      	mov	r5, r2
 8003a76:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003a78:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003a7a:	e895 0003 	ldmia.w	r5, {r0, r1}
 8003a7e:	e884 0003 	stmia.w	r4, {r0, r1}
              goto TeleDone;
 8003a82:	e021      	b.n	8003ac8 <main+0x1684>
          for(int j = 0; j < 50; j++){
 8003a84:	f646 232c 	movw	r3, #27180	; 0x6a2c
 8003a88:	443b      	add	r3, r7
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	3301      	adds	r3, #1
 8003a8e:	f646 222c 	movw	r2, #27180	; 0x6a2c
 8003a92:	443a      	add	r2, r7
 8003a94:	6013      	str	r3, [r2, #0]
 8003a96:	f646 232c 	movw	r3, #27180	; 0x6a2c
 8003a9a:	443b      	add	r3, r7
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	2b31      	cmp	r3, #49	; 0x31
 8003aa0:	dd9c      	ble.n	80039dc <main+0x1598>
      for(int i = 0; i <50; i++){
 8003aa2:	f646 2330 	movw	r3, #27184	; 0x6a30
 8003aa6:	443b      	add	r3, r7
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	3301      	adds	r3, #1
 8003aac:	f646 2230 	movw	r2, #27184	; 0x6a30
 8003ab0:	443a      	add	r2, r7
 8003ab2:	6013      	str	r3, [r2, #0]
 8003ab4:	f646 2330 	movw	r3, #27184	; 0x6a30
 8003ab8:	443b      	add	r3, r7
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	2b31      	cmp	r3, #49	; 0x31
 8003abe:	f77f af78 	ble.w	80039b2 <main+0x156e>
            }
          }
        }
      }
      printf("couldnt track, id buffer too full :(");
 8003ac2:	480e      	ldr	r0, [pc, #56]	; (8003afc <main+0x16b8>)
 8003ac4:	f016 ff70 	bl	801a9a8 <iprintf>
TeleDone:
		  CAN_Flag = 0;
 8003ac8:	4b0d      	ldr	r3, [pc, #52]	; (8003b00 <main+0x16bc>)
 8003aca:	2200      	movs	r2, #0
 8003acc:	601a      	str	r2, [r3, #0]
  while (end_flag){
 8003ace:	4b0d      	ldr	r3, [pc, #52]	; (8003b04 <main+0x16c0>)
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	2b00      	cmp	r3, #0
 8003ad4:	f47f a906 	bne.w	8002ce4 <main+0x8a0>
    /* USER CODE BEGIN 3 */
}

    //f_write(&myFILE, close_msg, strlen(close_msg), &testByte);
    //f_close(&myFILE);
    HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_0);
 8003ad8:	2101      	movs	r1, #1
 8003ada:	480b      	ldr	r0, [pc, #44]	; (8003b08 <main+0x16c4>)
 8003adc:	f004 fea9 	bl	8008832 <HAL_GPIO_TogglePin>
 8003ae0:	2300      	movs	r3, #0
    //printf("File closed\n");

  /* USER CODE END 3 */
}
 8003ae2:	4618      	mov	r0, r3
 8003ae4:	f507 47d4 	add.w	r7, r7, #27136	; 0x6a00
 8003ae8:	3770      	adds	r7, #112	; 0x70
 8003aea:	46bd      	mov	sp, r7
 8003aec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003af0:	240440e0 	.word	0x240440e0
 8003af4:	ffffea70 	.word	0xffffea70
 8003af8:	ffffeb38 	.word	0xffffeb38
 8003afc:	0801c3b8 	.word	0x0801c3b8
 8003b00:	24000370 	.word	0x24000370
 8003b04:	24000008 	.word	0x24000008
 8003b08:	58020400 	.word	0x58020400

08003b0c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8003b0c:	b580      	push	{r7, lr}
 8003b0e:	b0cc      	sub	sp, #304	; 0x130
 8003b10:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8003b12:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8003b16:	224c      	movs	r2, #76	; 0x4c
 8003b18:	2100      	movs	r1, #0
 8003b1a:	4618      	mov	r0, r3
 8003b1c:	f016 fe93 	bl	801a846 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8003b20:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8003b24:	2220      	movs	r2, #32
 8003b26:	2100      	movs	r1, #0
 8003b28:	4618      	mov	r0, r3
 8003b2a:	f016 fe8c 	bl	801a846 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8003b2e:	f107 0308 	add.w	r3, r7, #8
 8003b32:	4618      	mov	r0, r3
 8003b34:	23bc      	movs	r3, #188	; 0xbc
 8003b36:	461a      	mov	r2, r3
 8003b38:	2100      	movs	r1, #0
 8003b3a:	f016 fe84 	bl	801a846 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8003b3e:	2002      	movs	r0, #2
 8003b40:	f006 f972 	bl	8009e28 <HAL_PWREx_ConfigSupply>
  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8003b44:	1d3b      	adds	r3, r7, #4
 8003b46:	2200      	movs	r2, #0
 8003b48:	601a      	str	r2, [r3, #0]
 8003b4a:	4b71      	ldr	r3, [pc, #452]	; (8003d10 <SystemClock_Config+0x204>)
 8003b4c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b4e:	4a70      	ldr	r2, [pc, #448]	; (8003d10 <SystemClock_Config+0x204>)
 8003b50:	f023 0301 	bic.w	r3, r3, #1
 8003b54:	62d3      	str	r3, [r2, #44]	; 0x2c
 8003b56:	4b6e      	ldr	r3, [pc, #440]	; (8003d10 <SystemClock_Config+0x204>)
 8003b58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b5a:	f003 0201 	and.w	r2, r3, #1
 8003b5e:	1d3b      	adds	r3, r7, #4
 8003b60:	601a      	str	r2, [r3, #0]
 8003b62:	4b6c      	ldr	r3, [pc, #432]	; (8003d14 <SystemClock_Config+0x208>)
 8003b64:	699b      	ldr	r3, [r3, #24]
 8003b66:	4a6b      	ldr	r2, [pc, #428]	; (8003d14 <SystemClock_Config+0x208>)
 8003b68:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003b6c:	6193      	str	r3, [r2, #24]
 8003b6e:	4b69      	ldr	r3, [pc, #420]	; (8003d14 <SystemClock_Config+0x208>)
 8003b70:	699b      	ldr	r3, [r3, #24]
 8003b72:	f403 4240 	and.w	r2, r3, #49152	; 0xc000
 8003b76:	1d3b      	adds	r3, r7, #4
 8003b78:	601a      	str	r2, [r3, #0]
 8003b7a:	1d3b      	adds	r3, r7, #4
 8003b7c:	681b      	ldr	r3, [r3, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8003b7e:	bf00      	nop
 8003b80:	4b64      	ldr	r3, [pc, #400]	; (8003d14 <SystemClock_Config+0x208>)
 8003b82:	699b      	ldr	r3, [r3, #24]
 8003b84:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003b88:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003b8c:	d1f8      	bne.n	8003b80 <SystemClock_Config+0x74>
  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8003b8e:	f006 f8b1 	bl	8009cf4 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_HIGH);
 8003b92:	f001 f93d 	bl	8004e10 <HAL_GetREVID>
 8003b96:	4b60      	ldr	r3, [pc, #384]	; (8003d18 <SystemClock_Config+0x20c>)
 8003b98:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b9a:	4a5f      	ldr	r2, [pc, #380]	; (8003d18 <SystemClock_Config+0x20c>)
 8003b9c:	f043 0318 	orr.w	r3, r3, #24
 8003ba0:	6713      	str	r3, [r2, #112]	; 0x70
  /** Macro to configure the PLL clock source
  */
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSE);
 8003ba2:	4b5d      	ldr	r3, [pc, #372]	; (8003d18 <SystemClock_Config+0x20c>)
 8003ba4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ba6:	f023 0303 	bic.w	r3, r3, #3
 8003baa:	4a5b      	ldr	r2, [pc, #364]	; (8003d18 <SystemClock_Config+0x20c>)
 8003bac:	f043 0302 	orr.w	r3, r3, #2
 8003bb0:	6293      	str	r3, [r2, #40]	; 0x28
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSE
 8003bb2:	2325      	movs	r3, #37	; 0x25
 8003bb4:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
                              |RCC_OSCILLATORTYPE_LSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8003bb8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003bbc:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8003bc0:	2301      	movs	r3, #1
 8003bc2:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8003bc6:	2301      	movs	r3, #1
 8003bc8:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8003bcc:	2302      	movs	r3, #2
 8003bce:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8003bd2:	2302      	movs	r3, #2
 8003bd4:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  RCC_OscInitStruct.PLL.PLLM = 2;
 8003bd8:	2302      	movs	r3, #2
 8003bda:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
  RCC_OscInitStruct.PLL.PLLN = 64;
 8003bde:	2340      	movs	r3, #64	; 0x40
 8003be0:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
  RCC_OscInitStruct.PLL.PLLP = 2;
 8003be4:	2302      	movs	r3, #2
 8003be6:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  RCC_OscInitStruct.PLL.PLLQ = 10;
 8003bea:	230a      	movs	r3, #10
 8003bec:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8003bf0:	2302      	movs	r3, #2
 8003bf2:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8003bf6:	230c      	movs	r3, #12
 8003bf8:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8003bfc:	2300      	movs	r3, #0
 8003bfe:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8003c02:	2300      	movs	r3, #0
 8003c04:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003c08:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8003c0c:	4618      	mov	r0, r3
 8003c0e:	f006 f999 	bl	8009f44 <HAL_RCC_OscConfig>
 8003c12:	4603      	mov	r3, r0
 8003c14:	2b00      	cmp	r3, #0
 8003c16:	d001      	beq.n	8003c1c <SystemClock_Config+0x110>
  {
    Error_Handler();
 8003c18:	f000 fbe4 	bl	80043e4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8003c1c:	233f      	movs	r3, #63	; 0x3f
 8003c1e:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8003c22:	2303      	movs	r3, #3
 8003c24:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8003c28:	2300      	movs	r3, #0
 8003c2a:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8003c2e:	2308      	movs	r3, #8
 8003c30:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8003c34:	2340      	movs	r3, #64	; 0x40
 8003c36:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8003c3a:	2340      	movs	r3, #64	; 0x40
 8003c3c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8003c40:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003c44:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8003c48:	2340      	movs	r3, #64	; 0x40
 8003c4a:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8003c4e:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8003c52:	2102      	movs	r1, #2
 8003c54:	4618      	mov	r0, r3
 8003c56:	f006 fd85 	bl	800a764 <HAL_RCC_ClockConfig>
 8003c5a:	4603      	mov	r3, r0
 8003c5c:	2b00      	cmp	r3, #0
 8003c5e:	d001      	beq.n	8003c64 <SystemClock_Config+0x158>
  {
    Error_Handler();
 8003c60:	f000 fbc0 	bl	80043e4 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC|RCC_PERIPHCLK_USART3
 8003c64:	f107 0308 	add.w	r3, r7, #8
 8003c68:	4a2c      	ldr	r2, [pc, #176]	; (8003d1c <SystemClock_Config+0x210>)
 8003c6a:	601a      	str	r2, [r3, #0]
                              |RCC_PERIPHCLK_FDCAN|RCC_PERIPHCLK_UART8
                              |RCC_PERIPHCLK_SPI1|RCC_PERIPHCLK_SDMMC
                              |RCC_PERIPHCLK_USB;
  PeriphClkInitStruct.PLL2.PLL2M = 2;
 8003c6c:	f107 0308 	add.w	r3, r7, #8
 8003c70:	2202      	movs	r2, #2
 8003c72:	605a      	str	r2, [r3, #4]
  PeriphClkInitStruct.PLL2.PLL2N = 12;
 8003c74:	f107 0308 	add.w	r3, r7, #8
 8003c78:	220c      	movs	r2, #12
 8003c7a:	609a      	str	r2, [r3, #8]
  PeriphClkInitStruct.PLL2.PLL2P = 3;
 8003c7c:	f107 0308 	add.w	r3, r7, #8
 8003c80:	2203      	movs	r2, #3
 8003c82:	60da      	str	r2, [r3, #12]
  PeriphClkInitStruct.PLL2.PLL2Q = 2;
 8003c84:	f107 0308 	add.w	r3, r7, #8
 8003c88:	2202      	movs	r2, #2
 8003c8a:	611a      	str	r2, [r3, #16]
  PeriphClkInitStruct.PLL2.PLL2R = 3;
 8003c8c:	f107 0308 	add.w	r3, r7, #8
 8003c90:	2203      	movs	r2, #3
 8003c92:	615a      	str	r2, [r3, #20]
  PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_3;
 8003c94:	f107 0308 	add.w	r3, r7, #8
 8003c98:	22c0      	movs	r2, #192	; 0xc0
 8003c9a:	619a      	str	r2, [r3, #24]
  PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOMEDIUM;
 8003c9c:	f107 0308 	add.w	r3, r7, #8
 8003ca0:	2220      	movs	r2, #32
 8003ca2:	61da      	str	r2, [r3, #28]
  PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 8003ca4:	f107 0308 	add.w	r3, r7, #8
 8003ca8:	2200      	movs	r2, #0
 8003caa:	621a      	str	r2, [r3, #32]
  PeriphClkInitStruct.SdmmcClockSelection = RCC_SDMMCCLKSOURCE_PLL2;
 8003cac:	f107 0308 	add.w	r3, r7, #8
 8003cb0:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8003cb4:	64da      	str	r2, [r3, #76]	; 0x4c
  PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL2;
 8003cb6:	f107 0308 	add.w	r3, r7, #8
 8003cba:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8003cbe:	65da      	str	r2, [r3, #92]	; 0x5c
  PeriphClkInitStruct.FdcanClockSelection = RCC_FDCANCLKSOURCE_PLL;
 8003cc0:	f107 0308 	add.w	r3, r7, #8
 8003cc4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003cc8:	66da      	str	r2, [r3, #108]	; 0x6c
  PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8003cca:	f107 0308 	add.w	r3, r7, #8
 8003cce:	2200      	movs	r2, #0
 8003cd0:	675a      	str	r2, [r3, #116]	; 0x74
  PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 8003cd2:	f107 0308 	add.w	r3, r7, #8
 8003cd6:	f44f 1240 	mov.w	r2, #3145728	; 0x300000
 8003cda:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8003cde:	f107 0308 	add.w	r3, r7, #8
 8003ce2:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003ce6:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003cea:	f107 0308 	add.w	r3, r7, #8
 8003cee:	4618      	mov	r0, r3
 8003cf0:	f007 f8e8 	bl	800aec4 <HAL_RCCEx_PeriphCLKConfig>
 8003cf4:	4603      	mov	r3, r0
 8003cf6:	2b00      	cmp	r3, #0
 8003cf8:	d001      	beq.n	8003cfe <SystemClock_Config+0x1f2>
  {
    Error_Handler();
 8003cfa:	f000 fb73 	bl	80043e4 <Error_Handler>
  }
  /** Enables the Clock Security System
  */
  HAL_RCC_EnableCSS();
 8003cfe:	f006 fee7 	bl	800aad0 <HAL_RCC_EnableCSS>
  /** Enable USB Voltage detector
  */
  HAL_PWREx_EnableUSBVoltageDetector();
 8003d02:	f006 f8cb 	bl	8009e9c <HAL_PWREx_EnableUSBVoltageDetector>
}
 8003d06:	bf00      	nop
 8003d08:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8003d0c:	46bd      	mov	sp, r7
 8003d0e:	bd80      	pop	{r7, pc}
 8003d10:	58000400 	.word	0x58000400
 8003d14:	58024800 	.word	0x58024800
 8003d18:	58024400 	.word	0x58024400
 8003d1c:	00459002 	.word	0x00459002

08003d20 <MX_FDCAN1_Init>:
  * @brief FDCAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_FDCAN1_Init(void)
{
 8003d20:	b580      	push	{r7, lr}
 8003d22:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN1_Init 0 */

  /* USER CODE BEGIN FDCAN1_Init 1 */

  /* USER CODE END FDCAN1_Init 1 */
  hfdcan1.Instance = FDCAN1;
 8003d24:	4b2f      	ldr	r3, [pc, #188]	; (8003de4 <MX_FDCAN1_Init+0xc4>)
 8003d26:	4a30      	ldr	r2, [pc, #192]	; (8003de8 <MX_FDCAN1_Init+0xc8>)
 8003d28:	601a      	str	r2, [r3, #0]
  hfdcan1.Init.FrameFormat = FDCAN_FRAME_FD_BRS;
 8003d2a:	4b2e      	ldr	r3, [pc, #184]	; (8003de4 <MX_FDCAN1_Init+0xc4>)
 8003d2c:	f44f 7240 	mov.w	r2, #768	; 0x300
 8003d30:	609a      	str	r2, [r3, #8]
  hfdcan1.Init.Mode = FDCAN_MODE_NORMAL;
 8003d32:	4b2c      	ldr	r3, [pc, #176]	; (8003de4 <MX_FDCAN1_Init+0xc4>)
 8003d34:	2200      	movs	r2, #0
 8003d36:	60da      	str	r2, [r3, #12]
  hfdcan1.Init.AutoRetransmission = DISABLE;
 8003d38:	4b2a      	ldr	r3, [pc, #168]	; (8003de4 <MX_FDCAN1_Init+0xc4>)
 8003d3a:	2200      	movs	r2, #0
 8003d3c:	741a      	strb	r2, [r3, #16]
  hfdcan1.Init.TransmitPause = DISABLE;
 8003d3e:	4b29      	ldr	r3, [pc, #164]	; (8003de4 <MX_FDCAN1_Init+0xc4>)
 8003d40:	2200      	movs	r2, #0
 8003d42:	745a      	strb	r2, [r3, #17]
  hfdcan1.Init.ProtocolException = DISABLE;
 8003d44:	4b27      	ldr	r3, [pc, #156]	; (8003de4 <MX_FDCAN1_Init+0xc4>)
 8003d46:	2200      	movs	r2, #0
 8003d48:	749a      	strb	r2, [r3, #18]
  hfdcan1.Init.NominalPrescaler = 1;
 8003d4a:	4b26      	ldr	r3, [pc, #152]	; (8003de4 <MX_FDCAN1_Init+0xc4>)
 8003d4c:	2201      	movs	r2, #1
 8003d4e:	615a      	str	r2, [r3, #20]
  hfdcan1.Init.NominalSyncJumpWidth = 23;
 8003d50:	4b24      	ldr	r3, [pc, #144]	; (8003de4 <MX_FDCAN1_Init+0xc4>)
 8003d52:	2217      	movs	r2, #23
 8003d54:	619a      	str	r2, [r3, #24]
  hfdcan1.Init.NominalTimeSeg1 = 56;
 8003d56:	4b23      	ldr	r3, [pc, #140]	; (8003de4 <MX_FDCAN1_Init+0xc4>)
 8003d58:	2238      	movs	r2, #56	; 0x38
 8003d5a:	61da      	str	r2, [r3, #28]
  hfdcan1.Init.NominalTimeSeg2 = 23;
 8003d5c:	4b21      	ldr	r3, [pc, #132]	; (8003de4 <MX_FDCAN1_Init+0xc4>)
 8003d5e:	2217      	movs	r2, #23
 8003d60:	621a      	str	r2, [r3, #32]
  hfdcan1.Init.DataPrescaler = 1;
 8003d62:	4b20      	ldr	r3, [pc, #128]	; (8003de4 <MX_FDCAN1_Init+0xc4>)
 8003d64:	2201      	movs	r2, #1
 8003d66:	625a      	str	r2, [r3, #36]	; 0x24
  hfdcan1.Init.DataSyncJumpWidth = 5;
 8003d68:	4b1e      	ldr	r3, [pc, #120]	; (8003de4 <MX_FDCAN1_Init+0xc4>)
 8003d6a:	2205      	movs	r2, #5
 8003d6c:	629a      	str	r2, [r3, #40]	; 0x28
  hfdcan1.Init.DataTimeSeg1 = 10;
 8003d6e:	4b1d      	ldr	r3, [pc, #116]	; (8003de4 <MX_FDCAN1_Init+0xc4>)
 8003d70:	220a      	movs	r2, #10
 8003d72:	62da      	str	r2, [r3, #44]	; 0x2c
  hfdcan1.Init.DataTimeSeg2 = 5;
 8003d74:	4b1b      	ldr	r3, [pc, #108]	; (8003de4 <MX_FDCAN1_Init+0xc4>)
 8003d76:	2205      	movs	r2, #5
 8003d78:	631a      	str	r2, [r3, #48]	; 0x30
  hfdcan1.Init.MessageRAMOffset = 0;
 8003d7a:	4b1a      	ldr	r3, [pc, #104]	; (8003de4 <MX_FDCAN1_Init+0xc4>)
 8003d7c:	2200      	movs	r2, #0
 8003d7e:	635a      	str	r2, [r3, #52]	; 0x34
  hfdcan1.Init.StdFiltersNbr = 2;
 8003d80:	4b18      	ldr	r3, [pc, #96]	; (8003de4 <MX_FDCAN1_Init+0xc4>)
 8003d82:	2202      	movs	r2, #2
 8003d84:	639a      	str	r2, [r3, #56]	; 0x38
  hfdcan1.Init.ExtFiltersNbr = 2;
 8003d86:	4b17      	ldr	r3, [pc, #92]	; (8003de4 <MX_FDCAN1_Init+0xc4>)
 8003d88:	2202      	movs	r2, #2
 8003d8a:	63da      	str	r2, [r3, #60]	; 0x3c
  hfdcan1.Init.RxFifo0ElmtsNbr = 64;
 8003d8c:	4b15      	ldr	r3, [pc, #84]	; (8003de4 <MX_FDCAN1_Init+0xc4>)
 8003d8e:	2240      	movs	r2, #64	; 0x40
 8003d90:	641a      	str	r2, [r3, #64]	; 0x40
  hfdcan1.Init.RxFifo0ElmtSize = FDCAN_DATA_BYTES_64;
 8003d92:	4b14      	ldr	r3, [pc, #80]	; (8003de4 <MX_FDCAN1_Init+0xc4>)
 8003d94:	2212      	movs	r2, #18
 8003d96:	645a      	str	r2, [r3, #68]	; 0x44
  hfdcan1.Init.RxFifo1ElmtsNbr = 0;
 8003d98:	4b12      	ldr	r3, [pc, #72]	; (8003de4 <MX_FDCAN1_Init+0xc4>)
 8003d9a:	2200      	movs	r2, #0
 8003d9c:	649a      	str	r2, [r3, #72]	; 0x48
  hfdcan1.Init.RxFifo1ElmtSize = FDCAN_DATA_BYTES_8;
 8003d9e:	4b11      	ldr	r3, [pc, #68]	; (8003de4 <MX_FDCAN1_Init+0xc4>)
 8003da0:	2204      	movs	r2, #4
 8003da2:	64da      	str	r2, [r3, #76]	; 0x4c
  hfdcan1.Init.RxBuffersNbr = 0;
 8003da4:	4b0f      	ldr	r3, [pc, #60]	; (8003de4 <MX_FDCAN1_Init+0xc4>)
 8003da6:	2200      	movs	r2, #0
 8003da8:	651a      	str	r2, [r3, #80]	; 0x50
  hfdcan1.Init.RxBufferSize = FDCAN_DATA_BYTES_8;
 8003daa:	4b0e      	ldr	r3, [pc, #56]	; (8003de4 <MX_FDCAN1_Init+0xc4>)
 8003dac:	2204      	movs	r2, #4
 8003dae:	655a      	str	r2, [r3, #84]	; 0x54
  hfdcan1.Init.TxEventsNbr = 0;
 8003db0:	4b0c      	ldr	r3, [pc, #48]	; (8003de4 <MX_FDCAN1_Init+0xc4>)
 8003db2:	2200      	movs	r2, #0
 8003db4:	659a      	str	r2, [r3, #88]	; 0x58
  hfdcan1.Init.TxBuffersNbr = 0;
 8003db6:	4b0b      	ldr	r3, [pc, #44]	; (8003de4 <MX_FDCAN1_Init+0xc4>)
 8003db8:	2200      	movs	r2, #0
 8003dba:	65da      	str	r2, [r3, #92]	; 0x5c
  hfdcan1.Init.TxFifoQueueElmtsNbr = 0;
 8003dbc:	4b09      	ldr	r3, [pc, #36]	; (8003de4 <MX_FDCAN1_Init+0xc4>)
 8003dbe:	2200      	movs	r2, #0
 8003dc0:	661a      	str	r2, [r3, #96]	; 0x60
  hfdcan1.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 8003dc2:	4b08      	ldr	r3, [pc, #32]	; (8003de4 <MX_FDCAN1_Init+0xc4>)
 8003dc4:	2200      	movs	r2, #0
 8003dc6:	665a      	str	r2, [r3, #100]	; 0x64
  hfdcan1.Init.TxElmtSize = FDCAN_DATA_BYTES_8;
 8003dc8:	4b06      	ldr	r3, [pc, #24]	; (8003de4 <MX_FDCAN1_Init+0xc4>)
 8003dca:	2204      	movs	r2, #4
 8003dcc:	669a      	str	r2, [r3, #104]	; 0x68
  if (HAL_FDCAN_Init(&hfdcan1) != HAL_OK)
 8003dce:	4805      	ldr	r0, [pc, #20]	; (8003de4 <MX_FDCAN1_Init+0xc4>)
 8003dd0:	f003 fa12 	bl	80071f8 <HAL_FDCAN_Init>
 8003dd4:	4603      	mov	r3, r0
 8003dd6:	2b00      	cmp	r3, #0
 8003dd8:	d001      	beq.n	8003dde <MX_FDCAN1_Init+0xbe>
  {
    Error_Handler();
 8003dda:	f000 fb03 	bl	80043e4 <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN1_Init 2 */

  /* USER CODE END FDCAN1_Init 2 */

}
 8003dde:	bf00      	nop
 8003de0:	bd80      	pop	{r7, pc}
 8003de2:	bf00      	nop
 8003de4:	240447b0 	.word	0x240447b0
 8003de8:	4000a000 	.word	0x4000a000

08003dec <MX_FDCAN2_Init>:
  * @brief FDCAN2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_FDCAN2_Init(void)
{
 8003dec:	b580      	push	{r7, lr}
 8003dee:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN2_Init 0 */

  /* USER CODE BEGIN FDCAN2_Init 1 */

  /* USER CODE END FDCAN2_Init 1 */
  hfdcan2.Instance = FDCAN2;
 8003df0:	4b2e      	ldr	r3, [pc, #184]	; (8003eac <MX_FDCAN2_Init+0xc0>)
 8003df2:	4a2f      	ldr	r2, [pc, #188]	; (8003eb0 <MX_FDCAN2_Init+0xc4>)
 8003df4:	601a      	str	r2, [r3, #0]
  hfdcan2.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 8003df6:	4b2d      	ldr	r3, [pc, #180]	; (8003eac <MX_FDCAN2_Init+0xc0>)
 8003df8:	2200      	movs	r2, #0
 8003dfa:	609a      	str	r2, [r3, #8]
  hfdcan2.Init.Mode = FDCAN_MODE_NORMAL;
 8003dfc:	4b2b      	ldr	r3, [pc, #172]	; (8003eac <MX_FDCAN2_Init+0xc0>)
 8003dfe:	2200      	movs	r2, #0
 8003e00:	60da      	str	r2, [r3, #12]
  hfdcan2.Init.AutoRetransmission = DISABLE;
 8003e02:	4b2a      	ldr	r3, [pc, #168]	; (8003eac <MX_FDCAN2_Init+0xc0>)
 8003e04:	2200      	movs	r2, #0
 8003e06:	741a      	strb	r2, [r3, #16]
  hfdcan2.Init.TransmitPause = DISABLE;
 8003e08:	4b28      	ldr	r3, [pc, #160]	; (8003eac <MX_FDCAN2_Init+0xc0>)
 8003e0a:	2200      	movs	r2, #0
 8003e0c:	745a      	strb	r2, [r3, #17]
  hfdcan2.Init.ProtocolException = DISABLE;
 8003e0e:	4b27      	ldr	r3, [pc, #156]	; (8003eac <MX_FDCAN2_Init+0xc0>)
 8003e10:	2200      	movs	r2, #0
 8003e12:	749a      	strb	r2, [r3, #18]
  hfdcan2.Init.NominalPrescaler = 1;
 8003e14:	4b25      	ldr	r3, [pc, #148]	; (8003eac <MX_FDCAN2_Init+0xc0>)
 8003e16:	2201      	movs	r2, #1
 8003e18:	615a      	str	r2, [r3, #20]
  hfdcan2.Init.NominalSyncJumpWidth = 1;
 8003e1a:	4b24      	ldr	r3, [pc, #144]	; (8003eac <MX_FDCAN2_Init+0xc0>)
 8003e1c:	2201      	movs	r2, #1
 8003e1e:	619a      	str	r2, [r3, #24]
  hfdcan2.Init.NominalTimeSeg1 = 2;
 8003e20:	4b22      	ldr	r3, [pc, #136]	; (8003eac <MX_FDCAN2_Init+0xc0>)
 8003e22:	2202      	movs	r2, #2
 8003e24:	61da      	str	r2, [r3, #28]
  hfdcan2.Init.NominalTimeSeg2 = 2;
 8003e26:	4b21      	ldr	r3, [pc, #132]	; (8003eac <MX_FDCAN2_Init+0xc0>)
 8003e28:	2202      	movs	r2, #2
 8003e2a:	621a      	str	r2, [r3, #32]
  hfdcan2.Init.DataPrescaler = 1;
 8003e2c:	4b1f      	ldr	r3, [pc, #124]	; (8003eac <MX_FDCAN2_Init+0xc0>)
 8003e2e:	2201      	movs	r2, #1
 8003e30:	625a      	str	r2, [r3, #36]	; 0x24
  hfdcan2.Init.DataSyncJumpWidth = 1;
 8003e32:	4b1e      	ldr	r3, [pc, #120]	; (8003eac <MX_FDCAN2_Init+0xc0>)
 8003e34:	2201      	movs	r2, #1
 8003e36:	629a      	str	r2, [r3, #40]	; 0x28
  hfdcan2.Init.DataTimeSeg1 = 1;
 8003e38:	4b1c      	ldr	r3, [pc, #112]	; (8003eac <MX_FDCAN2_Init+0xc0>)
 8003e3a:	2201      	movs	r2, #1
 8003e3c:	62da      	str	r2, [r3, #44]	; 0x2c
  hfdcan2.Init.DataTimeSeg2 = 1;
 8003e3e:	4b1b      	ldr	r3, [pc, #108]	; (8003eac <MX_FDCAN2_Init+0xc0>)
 8003e40:	2201      	movs	r2, #1
 8003e42:	631a      	str	r2, [r3, #48]	; 0x30
  hfdcan2.Init.MessageRAMOffset = 0;
 8003e44:	4b19      	ldr	r3, [pc, #100]	; (8003eac <MX_FDCAN2_Init+0xc0>)
 8003e46:	2200      	movs	r2, #0
 8003e48:	635a      	str	r2, [r3, #52]	; 0x34
  hfdcan2.Init.StdFiltersNbr = 0;
 8003e4a:	4b18      	ldr	r3, [pc, #96]	; (8003eac <MX_FDCAN2_Init+0xc0>)
 8003e4c:	2200      	movs	r2, #0
 8003e4e:	639a      	str	r2, [r3, #56]	; 0x38
  hfdcan2.Init.ExtFiltersNbr = 0;
 8003e50:	4b16      	ldr	r3, [pc, #88]	; (8003eac <MX_FDCAN2_Init+0xc0>)
 8003e52:	2200      	movs	r2, #0
 8003e54:	63da      	str	r2, [r3, #60]	; 0x3c
  hfdcan2.Init.RxFifo0ElmtsNbr = 0;
 8003e56:	4b15      	ldr	r3, [pc, #84]	; (8003eac <MX_FDCAN2_Init+0xc0>)
 8003e58:	2200      	movs	r2, #0
 8003e5a:	641a      	str	r2, [r3, #64]	; 0x40
  hfdcan2.Init.RxFifo0ElmtSize = FDCAN_DATA_BYTES_8;
 8003e5c:	4b13      	ldr	r3, [pc, #76]	; (8003eac <MX_FDCAN2_Init+0xc0>)
 8003e5e:	2204      	movs	r2, #4
 8003e60:	645a      	str	r2, [r3, #68]	; 0x44
  hfdcan2.Init.RxFifo1ElmtsNbr = 0;
 8003e62:	4b12      	ldr	r3, [pc, #72]	; (8003eac <MX_FDCAN2_Init+0xc0>)
 8003e64:	2200      	movs	r2, #0
 8003e66:	649a      	str	r2, [r3, #72]	; 0x48
  hfdcan2.Init.RxFifo1ElmtSize = FDCAN_DATA_BYTES_8;
 8003e68:	4b10      	ldr	r3, [pc, #64]	; (8003eac <MX_FDCAN2_Init+0xc0>)
 8003e6a:	2204      	movs	r2, #4
 8003e6c:	64da      	str	r2, [r3, #76]	; 0x4c
  hfdcan2.Init.RxBuffersNbr = 0;
 8003e6e:	4b0f      	ldr	r3, [pc, #60]	; (8003eac <MX_FDCAN2_Init+0xc0>)
 8003e70:	2200      	movs	r2, #0
 8003e72:	651a      	str	r2, [r3, #80]	; 0x50
  hfdcan2.Init.RxBufferSize = FDCAN_DATA_BYTES_8;
 8003e74:	4b0d      	ldr	r3, [pc, #52]	; (8003eac <MX_FDCAN2_Init+0xc0>)
 8003e76:	2204      	movs	r2, #4
 8003e78:	655a      	str	r2, [r3, #84]	; 0x54
  hfdcan2.Init.TxEventsNbr = 0;
 8003e7a:	4b0c      	ldr	r3, [pc, #48]	; (8003eac <MX_FDCAN2_Init+0xc0>)
 8003e7c:	2200      	movs	r2, #0
 8003e7e:	659a      	str	r2, [r3, #88]	; 0x58
  hfdcan2.Init.TxBuffersNbr = 0;
 8003e80:	4b0a      	ldr	r3, [pc, #40]	; (8003eac <MX_FDCAN2_Init+0xc0>)
 8003e82:	2200      	movs	r2, #0
 8003e84:	65da      	str	r2, [r3, #92]	; 0x5c
  hfdcan2.Init.TxFifoQueueElmtsNbr = 0;
 8003e86:	4b09      	ldr	r3, [pc, #36]	; (8003eac <MX_FDCAN2_Init+0xc0>)
 8003e88:	2200      	movs	r2, #0
 8003e8a:	661a      	str	r2, [r3, #96]	; 0x60
  hfdcan2.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 8003e8c:	4b07      	ldr	r3, [pc, #28]	; (8003eac <MX_FDCAN2_Init+0xc0>)
 8003e8e:	2200      	movs	r2, #0
 8003e90:	665a      	str	r2, [r3, #100]	; 0x64
  hfdcan2.Init.TxElmtSize = FDCAN_DATA_BYTES_8;
 8003e92:	4b06      	ldr	r3, [pc, #24]	; (8003eac <MX_FDCAN2_Init+0xc0>)
 8003e94:	2204      	movs	r2, #4
 8003e96:	669a      	str	r2, [r3, #104]	; 0x68
  if (HAL_FDCAN_Init(&hfdcan2) != HAL_OK)
 8003e98:	4804      	ldr	r0, [pc, #16]	; (8003eac <MX_FDCAN2_Init+0xc0>)
 8003e9a:	f003 f9ad 	bl	80071f8 <HAL_FDCAN_Init>
 8003e9e:	4603      	mov	r3, r0
 8003ea0:	2b00      	cmp	r3, #0
 8003ea2:	d001      	beq.n	8003ea8 <MX_FDCAN2_Init+0xbc>
  {
    Error_Handler();
 8003ea4:	f000 fa9e 	bl	80043e4 <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN2_Init 2 */

  /* USER CODE END FDCAN2_Init 2 */

}
 8003ea8:	bf00      	nop
 8003eaa:	bd80      	pop	{r7, pc}
 8003eac:	24044964 	.word	0x24044964
 8003eb0:	4000a400 	.word	0x4000a400

08003eb4 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8003eb4:	b580      	push	{r7, lr}
 8003eb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8003eb8:	4b11      	ldr	r3, [pc, #68]	; (8003f00 <MX_RTC_Init+0x4c>)
 8003eba:	4a12      	ldr	r2, [pc, #72]	; (8003f04 <MX_RTC_Init+0x50>)
 8003ebc:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8003ebe:	4b10      	ldr	r3, [pc, #64]	; (8003f00 <MX_RTC_Init+0x4c>)
 8003ec0:	2200      	movs	r2, #0
 8003ec2:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 1;
 8003ec4:	4b0e      	ldr	r3, [pc, #56]	; (8003f00 <MX_RTC_Init+0x4c>)
 8003ec6:	2201      	movs	r2, #1
 8003ec8:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 16388;
 8003eca:	4b0d      	ldr	r3, [pc, #52]	; (8003f00 <MX_RTC_Init+0x4c>)
 8003ecc:	f244 0204 	movw	r2, #16388	; 0x4004
 8003ed0:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8003ed2:	4b0b      	ldr	r3, [pc, #44]	; (8003f00 <MX_RTC_Init+0x4c>)
 8003ed4:	2200      	movs	r2, #0
 8003ed6:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8003ed8:	4b09      	ldr	r3, [pc, #36]	; (8003f00 <MX_RTC_Init+0x4c>)
 8003eda:	2200      	movs	r2, #0
 8003edc:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8003ede:	4b08      	ldr	r3, [pc, #32]	; (8003f00 <MX_RTC_Init+0x4c>)
 8003ee0:	2200      	movs	r2, #0
 8003ee2:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8003ee4:	4b06      	ldr	r3, [pc, #24]	; (8003f00 <MX_RTC_Init+0x4c>)
 8003ee6:	2200      	movs	r2, #0
 8003ee8:	615a      	str	r2, [r3, #20]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8003eea:	4805      	ldr	r0, [pc, #20]	; (8003f00 <MX_RTC_Init+0x4c>)
 8003eec:	f008 feae 	bl	800cc4c <HAL_RTC_Init>
 8003ef0:	4603      	mov	r3, r0
 8003ef2:	2b00      	cmp	r3, #0
 8003ef4:	d001      	beq.n	8003efa <MX_RTC_Init+0x46>
  {
    Error_Handler();
 8003ef6:	f000 fa75 	bl	80043e4 <Error_Handler>

  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8003efa:	bf00      	nop
 8003efc:	bd80      	pop	{r7, pc}
 8003efe:	bf00      	nop
 8003f00:	2404478c 	.word	0x2404478c
 8003f04:	58004000 	.word	0x58004000

08003f08 <MX_SDMMC1_SD_Init>:
  * @brief SDMMC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDMMC1_SD_Init(void)
{
 8003f08:	b480      	push	{r7}
 8003f0a:	af00      	add	r7, sp, #0
  /* USER CODE END SDMMC1_Init 0 */

  /* USER CODE BEGIN SDMMC1_Init 1 */

  /* USER CODE END SDMMC1_Init 1 */
  hsd1.Instance = SDMMC1;
 8003f0c:	4b0d      	ldr	r3, [pc, #52]	; (8003f44 <MX_SDMMC1_SD_Init+0x3c>)
 8003f0e:	4a0e      	ldr	r2, [pc, #56]	; (8003f48 <MX_SDMMC1_SD_Init+0x40>)
 8003f10:	601a      	str	r2, [r3, #0]
  hsd1.Init.ClockEdge = SDMMC_CLOCK_EDGE_RISING;
 8003f12:	4b0c      	ldr	r3, [pc, #48]	; (8003f44 <MX_SDMMC1_SD_Init+0x3c>)
 8003f14:	2200      	movs	r2, #0
 8003f16:	605a      	str	r2, [r3, #4]
  hsd1.Init.ClockPowerSave = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 8003f18:	4b0a      	ldr	r3, [pc, #40]	; (8003f44 <MX_SDMMC1_SD_Init+0x3c>)
 8003f1a:	2200      	movs	r2, #0
 8003f1c:	609a      	str	r2, [r3, #8]
  hsd1.Init.BusWide = SDMMC_BUS_WIDE_4B;
 8003f1e:	4b09      	ldr	r3, [pc, #36]	; (8003f44 <MX_SDMMC1_SD_Init+0x3c>)
 8003f20:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8003f24:	60da      	str	r2, [r3, #12]
  hsd1.Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_ENABLE;
 8003f26:	4b07      	ldr	r3, [pc, #28]	; (8003f44 <MX_SDMMC1_SD_Init+0x3c>)
 8003f28:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8003f2c:	611a      	str	r2, [r3, #16]
  hsd1.Init.ClockDiv = 0;
 8003f2e:	4b05      	ldr	r3, [pc, #20]	; (8003f44 <MX_SDMMC1_SD_Init+0x3c>)
 8003f30:	2200      	movs	r2, #0
 8003f32:	615a      	str	r2, [r3, #20]
  hsd1.Init.TranceiverPresent = SDMMC_TRANSCEIVER_NOT_PRESENT;
 8003f34:	4b03      	ldr	r3, [pc, #12]	; (8003f44 <MX_SDMMC1_SD_Init+0x3c>)
 8003f36:	2201      	movs	r2, #1
 8003f38:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN SDMMC1_Init 2 */

  /* USER CODE END SDMMC1_Init 2 */

}
 8003f3a:	bf00      	nop
 8003f3c:	46bd      	mov	sp, r7
 8003f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f42:	4770      	bx	lr
 8003f44:	2404470c 	.word	0x2404470c
 8003f48:	52007000 	.word	0x52007000

08003f4c <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8003f4c:	b580      	push	{r7, lr}
 8003f4e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8003f50:	4b27      	ldr	r3, [pc, #156]	; (8003ff0 <MX_SPI1_Init+0xa4>)
 8003f52:	4a28      	ldr	r2, [pc, #160]	; (8003ff4 <MX_SPI1_Init+0xa8>)
 8003f54:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8003f56:	4b26      	ldr	r3, [pc, #152]	; (8003ff0 <MX_SPI1_Init+0xa4>)
 8003f58:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8003f5c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8003f5e:	4b24      	ldr	r3, [pc, #144]	; (8003ff0 <MX_SPI1_Init+0xa4>)
 8003f60:	2200      	movs	r2, #0
 8003f62:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8003f64:	4b22      	ldr	r3, [pc, #136]	; (8003ff0 <MX_SPI1_Init+0xa4>)
 8003f66:	2207      	movs	r2, #7
 8003f68:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8003f6a:	4b21      	ldr	r3, [pc, #132]	; (8003ff0 <MX_SPI1_Init+0xa4>)
 8003f6c:	2200      	movs	r2, #0
 8003f6e:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8003f70:	4b1f      	ldr	r3, [pc, #124]	; (8003ff0 <MX_SPI1_Init+0xa4>)
 8003f72:	2200      	movs	r2, #0
 8003f74:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8003f76:	4b1e      	ldr	r3, [pc, #120]	; (8003ff0 <MX_SPI1_Init+0xa4>)
 8003f78:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8003f7c:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8003f7e:	4b1c      	ldr	r3, [pc, #112]	; (8003ff0 <MX_SPI1_Init+0xa4>)
 8003f80:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8003f84:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8003f86:	4b1a      	ldr	r3, [pc, #104]	; (8003ff0 <MX_SPI1_Init+0xa4>)
 8003f88:	2200      	movs	r2, #0
 8003f8a:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8003f8c:	4b18      	ldr	r3, [pc, #96]	; (8003ff0 <MX_SPI1_Init+0xa4>)
 8003f8e:	2200      	movs	r2, #0
 8003f90:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003f92:	4b17      	ldr	r3, [pc, #92]	; (8003ff0 <MX_SPI1_Init+0xa4>)
 8003f94:	2200      	movs	r2, #0
 8003f96:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 0x0;
 8003f98:	4b15      	ldr	r3, [pc, #84]	; (8003ff0 <MX_SPI1_Init+0xa4>)
 8003f9a:	2200      	movs	r2, #0
 8003f9c:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8003f9e:	4b14      	ldr	r3, [pc, #80]	; (8003ff0 <MX_SPI1_Init+0xa4>)
 8003fa0:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8003fa4:	635a      	str	r2, [r3, #52]	; 0x34
  hspi1.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8003fa6:	4b12      	ldr	r3, [pc, #72]	; (8003ff0 <MX_SPI1_Init+0xa4>)
 8003fa8:	2200      	movs	r2, #0
 8003faa:	639a      	str	r2, [r3, #56]	; 0x38
  hspi1.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8003fac:	4b10      	ldr	r3, [pc, #64]	; (8003ff0 <MX_SPI1_Init+0xa4>)
 8003fae:	2200      	movs	r2, #0
 8003fb0:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi1.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8003fb2:	4b0f      	ldr	r3, [pc, #60]	; (8003ff0 <MX_SPI1_Init+0xa4>)
 8003fb4:	2200      	movs	r2, #0
 8003fb6:	641a      	str	r2, [r3, #64]	; 0x40
  hspi1.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8003fb8:	4b0d      	ldr	r3, [pc, #52]	; (8003ff0 <MX_SPI1_Init+0xa4>)
 8003fba:	2200      	movs	r2, #0
 8003fbc:	645a      	str	r2, [r3, #68]	; 0x44
  hspi1.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8003fbe:	4b0c      	ldr	r3, [pc, #48]	; (8003ff0 <MX_SPI1_Init+0xa4>)
 8003fc0:	2200      	movs	r2, #0
 8003fc2:	649a      	str	r2, [r3, #72]	; 0x48
  hspi1.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8003fc4:	4b0a      	ldr	r3, [pc, #40]	; (8003ff0 <MX_SPI1_Init+0xa4>)
 8003fc6:	2200      	movs	r2, #0
 8003fc8:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi1.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8003fca:	4b09      	ldr	r3, [pc, #36]	; (8003ff0 <MX_SPI1_Init+0xa4>)
 8003fcc:	2200      	movs	r2, #0
 8003fce:	651a      	str	r2, [r3, #80]	; 0x50
  hspi1.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8003fd0:	4b07      	ldr	r3, [pc, #28]	; (8003ff0 <MX_SPI1_Init+0xa4>)
 8003fd2:	2200      	movs	r2, #0
 8003fd4:	655a      	str	r2, [r3, #84]	; 0x54
  hspi1.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8003fd6:	4b06      	ldr	r3, [pc, #24]	; (8003ff0 <MX_SPI1_Init+0xa4>)
 8003fd8:	2200      	movs	r2, #0
 8003fda:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8003fdc:	4804      	ldr	r0, [pc, #16]	; (8003ff0 <MX_SPI1_Init+0xa4>)
 8003fde:	f00b f8cf 	bl	800f180 <HAL_SPI_Init>
 8003fe2:	4603      	mov	r3, r0
 8003fe4:	2b00      	cmp	r3, #0
 8003fe6:	d001      	beq.n	8003fec <MX_SPI1_Init+0xa0>
  {
    Error_Handler();
 8003fe8:	f000 f9fc 	bl	80043e4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8003fec:	bf00      	nop
 8003fee:	bd80      	pop	{r7, pc}
 8003ff0:	240448dc 	.word	0x240448dc
 8003ff4:	40013000 	.word	0x40013000

08003ff8 <MX_UART8_Init>:
  * @brief UART8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART8_Init(void)
{
 8003ff8:	b580      	push	{r7, lr}
 8003ffa:	af00      	add	r7, sp, #0
  /* USER CODE END UART8_Init 0 */

  /* USER CODE BEGIN UART8_Init 1 */

  /* USER CODE END UART8_Init 1 */
  huart8.Instance = UART8;
 8003ffc:	4b22      	ldr	r3, [pc, #136]	; (8004088 <MX_UART8_Init+0x90>)
 8003ffe:	4a23      	ldr	r2, [pc, #140]	; (800408c <MX_UART8_Init+0x94>)
 8004000:	601a      	str	r2, [r3, #0]
  huart8.Init.BaudRate = 115200;
 8004002:	4b21      	ldr	r3, [pc, #132]	; (8004088 <MX_UART8_Init+0x90>)
 8004004:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8004008:	605a      	str	r2, [r3, #4]
  huart8.Init.WordLength = UART_WORDLENGTH_8B;
 800400a:	4b1f      	ldr	r3, [pc, #124]	; (8004088 <MX_UART8_Init+0x90>)
 800400c:	2200      	movs	r2, #0
 800400e:	609a      	str	r2, [r3, #8]
  huart8.Init.StopBits = UART_STOPBITS_1;
 8004010:	4b1d      	ldr	r3, [pc, #116]	; (8004088 <MX_UART8_Init+0x90>)
 8004012:	2200      	movs	r2, #0
 8004014:	60da      	str	r2, [r3, #12]
  huart8.Init.Parity = UART_PARITY_NONE;
 8004016:	4b1c      	ldr	r3, [pc, #112]	; (8004088 <MX_UART8_Init+0x90>)
 8004018:	2200      	movs	r2, #0
 800401a:	611a      	str	r2, [r3, #16]
  huart8.Init.Mode = UART_MODE_TX_RX;
 800401c:	4b1a      	ldr	r3, [pc, #104]	; (8004088 <MX_UART8_Init+0x90>)
 800401e:	220c      	movs	r2, #12
 8004020:	615a      	str	r2, [r3, #20]
  huart8.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8004022:	4b19      	ldr	r3, [pc, #100]	; (8004088 <MX_UART8_Init+0x90>)
 8004024:	2200      	movs	r2, #0
 8004026:	619a      	str	r2, [r3, #24]
  huart8.Init.OverSampling = UART_OVERSAMPLING_16;
 8004028:	4b17      	ldr	r3, [pc, #92]	; (8004088 <MX_UART8_Init+0x90>)
 800402a:	2200      	movs	r2, #0
 800402c:	61da      	str	r2, [r3, #28]
  huart8.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800402e:	4b16      	ldr	r3, [pc, #88]	; (8004088 <MX_UART8_Init+0x90>)
 8004030:	2200      	movs	r2, #0
 8004032:	621a      	str	r2, [r3, #32]
  huart8.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8004034:	4b14      	ldr	r3, [pc, #80]	; (8004088 <MX_UART8_Init+0x90>)
 8004036:	2200      	movs	r2, #0
 8004038:	625a      	str	r2, [r3, #36]	; 0x24
  huart8.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800403a:	4b13      	ldr	r3, [pc, #76]	; (8004088 <MX_UART8_Init+0x90>)
 800403c:	2200      	movs	r2, #0
 800403e:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart8) != HAL_OK)
 8004040:	4811      	ldr	r0, [pc, #68]	; (8004088 <MX_UART8_Init+0x90>)
 8004042:	f00c f94e 	bl	80102e2 <HAL_UART_Init>
 8004046:	4603      	mov	r3, r0
 8004048:	2b00      	cmp	r3, #0
 800404a:	d001      	beq.n	8004050 <MX_UART8_Init+0x58>
  {
    Error_Handler();
 800404c:	f000 f9ca 	bl	80043e4 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart8, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8004050:	2100      	movs	r1, #0
 8004052:	480d      	ldr	r0, [pc, #52]	; (8004088 <MX_UART8_Init+0x90>)
 8004054:	f00d fad4 	bl	8011600 <HAL_UARTEx_SetTxFifoThreshold>
 8004058:	4603      	mov	r3, r0
 800405a:	2b00      	cmp	r3, #0
 800405c:	d001      	beq.n	8004062 <MX_UART8_Init+0x6a>
  {
    Error_Handler();
 800405e:	f000 f9c1 	bl	80043e4 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart8, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8004062:	2100      	movs	r1, #0
 8004064:	4808      	ldr	r0, [pc, #32]	; (8004088 <MX_UART8_Init+0x90>)
 8004066:	f00d fb09 	bl	801167c <HAL_UARTEx_SetRxFifoThreshold>
 800406a:	4603      	mov	r3, r0
 800406c:	2b00      	cmp	r3, #0
 800406e:	d001      	beq.n	8004074 <MX_UART8_Init+0x7c>
  {
    Error_Handler();
 8004070:	f000 f9b8 	bl	80043e4 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart8) != HAL_OK)
 8004074:	4804      	ldr	r0, [pc, #16]	; (8004088 <MX_UART8_Init+0x90>)
 8004076:	f00d fa8a 	bl	801158e <HAL_UARTEx_DisableFifoMode>
 800407a:	4603      	mov	r3, r0
 800407c:	2b00      	cmp	r3, #0
 800407e:	d001      	beq.n	8004084 <MX_UART8_Init+0x8c>
  {
    Error_Handler();
 8004080:	f000 f9b0 	bl	80043e4 <Error_Handler>
  }
  /* USER CODE BEGIN UART8_Init 2 */

  /* USER CODE END UART8_Init 2 */

}
 8004084:	bf00      	nop
 8004086:	bd80      	pop	{r7, pc}
 8004088:	24044850 	.word	0x24044850
 800408c:	40007c00 	.word	0x40007c00

08004090 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8004090:	b580      	push	{r7, lr}
 8004092:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8004094:	4b22      	ldr	r3, [pc, #136]	; (8004120 <MX_USART3_UART_Init+0x90>)
 8004096:	4a23      	ldr	r2, [pc, #140]	; (8004124 <MX_USART3_UART_Init+0x94>)
 8004098:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 38400;
 800409a:	4b21      	ldr	r3, [pc, #132]	; (8004120 <MX_USART3_UART_Init+0x90>)
 800409c:	f44f 4216 	mov.w	r2, #38400	; 0x9600
 80040a0:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80040a2:	4b1f      	ldr	r3, [pc, #124]	; (8004120 <MX_USART3_UART_Init+0x90>)
 80040a4:	2200      	movs	r2, #0
 80040a6:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80040a8:	4b1d      	ldr	r3, [pc, #116]	; (8004120 <MX_USART3_UART_Init+0x90>)
 80040aa:	2200      	movs	r2, #0
 80040ac:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80040ae:	4b1c      	ldr	r3, [pc, #112]	; (8004120 <MX_USART3_UART_Init+0x90>)
 80040b0:	2200      	movs	r2, #0
 80040b2:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80040b4:	4b1a      	ldr	r3, [pc, #104]	; (8004120 <MX_USART3_UART_Init+0x90>)
 80040b6:	220c      	movs	r2, #12
 80040b8:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80040ba:	4b19      	ldr	r3, [pc, #100]	; (8004120 <MX_USART3_UART_Init+0x90>)
 80040bc:	2200      	movs	r2, #0
 80040be:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80040c0:	4b17      	ldr	r3, [pc, #92]	; (8004120 <MX_USART3_UART_Init+0x90>)
 80040c2:	2200      	movs	r2, #0
 80040c4:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80040c6:	4b16      	ldr	r3, [pc, #88]	; (8004120 <MX_USART3_UART_Init+0x90>)
 80040c8:	2200      	movs	r2, #0
 80040ca:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80040cc:	4b14      	ldr	r3, [pc, #80]	; (8004120 <MX_USART3_UART_Init+0x90>)
 80040ce:	2200      	movs	r2, #0
 80040d0:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80040d2:	4b13      	ldr	r3, [pc, #76]	; (8004120 <MX_USART3_UART_Init+0x90>)
 80040d4:	2200      	movs	r2, #0
 80040d6:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80040d8:	4811      	ldr	r0, [pc, #68]	; (8004120 <MX_USART3_UART_Init+0x90>)
 80040da:	f00c f902 	bl	80102e2 <HAL_UART_Init>
 80040de:	4603      	mov	r3, r0
 80040e0:	2b00      	cmp	r3, #0
 80040e2:	d001      	beq.n	80040e8 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 80040e4:	f000 f97e 	bl	80043e4 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80040e8:	2100      	movs	r1, #0
 80040ea:	480d      	ldr	r0, [pc, #52]	; (8004120 <MX_USART3_UART_Init+0x90>)
 80040ec:	f00d fa88 	bl	8011600 <HAL_UARTEx_SetTxFifoThreshold>
 80040f0:	4603      	mov	r3, r0
 80040f2:	2b00      	cmp	r3, #0
 80040f4:	d001      	beq.n	80040fa <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 80040f6:	f000 f975 	bl	80043e4 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80040fa:	2100      	movs	r1, #0
 80040fc:	4808      	ldr	r0, [pc, #32]	; (8004120 <MX_USART3_UART_Init+0x90>)
 80040fe:	f00d fabd 	bl	801167c <HAL_UARTEx_SetRxFifoThreshold>
 8004102:	4603      	mov	r3, r0
 8004104:	2b00      	cmp	r3, #0
 8004106:	d001      	beq.n	800410c <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8004108:	f000 f96c 	bl	80043e4 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 800410c:	4804      	ldr	r0, [pc, #16]	; (8004120 <MX_USART3_UART_Init+0x90>)
 800410e:	f00d fa3e 	bl	801158e <HAL_UARTEx_DisableFifoMode>
 8004112:	4603      	mov	r3, r0
 8004114:	2b00      	cmp	r3, #0
 8004116:	d001      	beq.n	800411c <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8004118:	f000 f964 	bl	80043e4 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800411c:	bf00      	nop
 800411e:	bd80      	pop	{r7, pc}
 8004120:	24044660 	.word	0x24044660
 8004124:	40004800 	.word	0x40004800

08004128 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8004128:	b580      	push	{r7, lr}
 800412a:	b082      	sub	sp, #8
 800412c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800412e:	4b0d      	ldr	r3, [pc, #52]	; (8004164 <MX_DMA_Init+0x3c>)
 8004130:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8004134:	4a0b      	ldr	r2, [pc, #44]	; (8004164 <MX_DMA_Init+0x3c>)
 8004136:	f043 0301 	orr.w	r3, r3, #1
 800413a:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 800413e:	4b09      	ldr	r3, [pc, #36]	; (8004164 <MX_DMA_Init+0x3c>)
 8004140:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8004144:	f003 0301 	and.w	r3, r3, #1
 8004148:	607b      	str	r3, [r7, #4]
 800414a:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 800414c:	2200      	movs	r2, #0
 800414e:	2100      	movs	r1, #0
 8004150:	200c      	movs	r0, #12
 8004152:	f000 ff44 	bl	8004fde <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8004156:	200c      	movs	r0, #12
 8004158:	f000 ff5b 	bl	8005012 <HAL_NVIC_EnableIRQ>

}
 800415c:	bf00      	nop
 800415e:	3708      	adds	r7, #8
 8004160:	46bd      	mov	sp, r7
 8004162:	bd80      	pop	{r7, pc}
 8004164:	58024400 	.word	0x58024400

08004168 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8004168:	b580      	push	{r7, lr}
 800416a:	b08c      	sub	sp, #48	; 0x30
 800416c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800416e:	f107 031c 	add.w	r3, r7, #28
 8004172:	2200      	movs	r2, #0
 8004174:	601a      	str	r2, [r3, #0]
 8004176:	605a      	str	r2, [r3, #4]
 8004178:	609a      	str	r2, [r3, #8]
 800417a:	60da      	str	r2, [r3, #12]
 800417c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800417e:	4b6d      	ldr	r3, [pc, #436]	; (8004334 <MX_GPIO_Init+0x1cc>)
 8004180:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004184:	4a6b      	ldr	r2, [pc, #428]	; (8004334 <MX_GPIO_Init+0x1cc>)
 8004186:	f043 0310 	orr.w	r3, r3, #16
 800418a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800418e:	4b69      	ldr	r3, [pc, #420]	; (8004334 <MX_GPIO_Init+0x1cc>)
 8004190:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004194:	f003 0310 	and.w	r3, r3, #16
 8004198:	61bb      	str	r3, [r7, #24]
 800419a:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800419c:	4b65      	ldr	r3, [pc, #404]	; (8004334 <MX_GPIO_Init+0x1cc>)
 800419e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80041a2:	4a64      	ldr	r2, [pc, #400]	; (8004334 <MX_GPIO_Init+0x1cc>)
 80041a4:	f043 0304 	orr.w	r3, r3, #4
 80041a8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80041ac:	4b61      	ldr	r3, [pc, #388]	; (8004334 <MX_GPIO_Init+0x1cc>)
 80041ae:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80041b2:	f003 0304 	and.w	r3, r3, #4
 80041b6:	617b      	str	r3, [r7, #20]
 80041b8:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80041ba:	4b5e      	ldr	r3, [pc, #376]	; (8004334 <MX_GPIO_Init+0x1cc>)
 80041bc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80041c0:	4a5c      	ldr	r2, [pc, #368]	; (8004334 <MX_GPIO_Init+0x1cc>)
 80041c2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80041c6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80041ca:	4b5a      	ldr	r3, [pc, #360]	; (8004334 <MX_GPIO_Init+0x1cc>)
 80041cc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80041d0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80041d4:	613b      	str	r3, [r7, #16]
 80041d6:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80041d8:	4b56      	ldr	r3, [pc, #344]	; (8004334 <MX_GPIO_Init+0x1cc>)
 80041da:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80041de:	4a55      	ldr	r2, [pc, #340]	; (8004334 <MX_GPIO_Init+0x1cc>)
 80041e0:	f043 0301 	orr.w	r3, r3, #1
 80041e4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80041e8:	4b52      	ldr	r3, [pc, #328]	; (8004334 <MX_GPIO_Init+0x1cc>)
 80041ea:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80041ee:	f003 0301 	and.w	r3, r3, #1
 80041f2:	60fb      	str	r3, [r7, #12]
 80041f4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80041f6:	4b4f      	ldr	r3, [pc, #316]	; (8004334 <MX_GPIO_Init+0x1cc>)
 80041f8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80041fc:	4a4d      	ldr	r2, [pc, #308]	; (8004334 <MX_GPIO_Init+0x1cc>)
 80041fe:	f043 0302 	orr.w	r3, r3, #2
 8004202:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8004206:	4b4b      	ldr	r3, [pc, #300]	; (8004334 <MX_GPIO_Init+0x1cc>)
 8004208:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800420c:	f003 0302 	and.w	r3, r3, #2
 8004210:	60bb      	str	r3, [r7, #8]
 8004212:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8004214:	4b47      	ldr	r3, [pc, #284]	; (8004334 <MX_GPIO_Init+0x1cc>)
 8004216:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800421a:	4a46      	ldr	r2, [pc, #280]	; (8004334 <MX_GPIO_Init+0x1cc>)
 800421c:	f043 0308 	orr.w	r3, r3, #8
 8004220:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8004224:	4b43      	ldr	r3, [pc, #268]	; (8004334 <MX_GPIO_Init+0x1cc>)
 8004226:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800422a:	f003 0308 	and.w	r3, r3, #8
 800422e:	607b      	str	r3, [r7, #4]
 8004230:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, RS_485_TX_EN_Pin|RS_485_RX_EN_Pin, GPIO_PIN_RESET);
 8004232:	2200      	movs	r2, #0
 8004234:	210c      	movs	r1, #12
 8004236:	4840      	ldr	r0, [pc, #256]	; (8004338 <MX_GPIO_Init+0x1d0>)
 8004238:	f004 fae2 	bl	8008800 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, TELE_CE_Pin|TELE_CS_Pin, GPIO_PIN_RESET);
 800423c:	2200      	movs	r2, #0
 800423e:	2103      	movs	r1, #3
 8004240:	483e      	ldr	r0, [pc, #248]	; (800433c <MX_GPIO_Init+0x1d4>)
 8004242:	f004 fadd 	bl	8008800 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8004246:	2200      	movs	r2, #0
 8004248:	2101      	movs	r1, #1
 800424a:	483d      	ldr	r0, [pc, #244]	; (8004340 <MX_GPIO_Init+0x1d8>)
 800424c:	f004 fad8 	bl	8008800 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPS_RST_GPIO_Port, GPS_RST_Pin, GPIO_PIN_SET);
 8004250:	2201      	movs	r2, #1
 8004252:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8004256:	483b      	ldr	r0, [pc, #236]	; (8004344 <MX_GPIO_Init+0x1dc>)
 8004258:	f004 fad2 	bl	8008800 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : RS_485_TX_EN_Pin RS_485_RX_EN_Pin */
  GPIO_InitStruct.Pin = RS_485_TX_EN_Pin|RS_485_RX_EN_Pin;
 800425c:	230c      	movs	r3, #12
 800425e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004260:	2301      	movs	r3, #1
 8004262:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004264:	2300      	movs	r3, #0
 8004266:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004268:	2300      	movs	r3, #0
 800426a:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800426c:	f107 031c 	add.w	r3, r7, #28
 8004270:	4619      	mov	r1, r3
 8004272:	4831      	ldr	r0, [pc, #196]	; (8004338 <MX_GPIO_Init+0x1d0>)
 8004274:	f004 f8fc 	bl	8008470 <HAL_GPIO_Init>

  /*Configure GPIO pins : TELE_CE_Pin TELE_CS_Pin */
  GPIO_InitStruct.Pin = TELE_CE_Pin|TELE_CS_Pin;
 8004278:	2303      	movs	r3, #3
 800427a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800427c:	2301      	movs	r3, #1
 800427e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004280:	2300      	movs	r3, #0
 8004282:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004284:	2300      	movs	r3, #0
 8004286:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004288:	f107 031c 	add.w	r3, r7, #28
 800428c:	4619      	mov	r1, r3
 800428e:	482b      	ldr	r0, [pc, #172]	; (800433c <MX_GPIO_Init+0x1d4>)
 8004290:	f004 f8ee 	bl	8008470 <HAL_GPIO_Init>

  /*Configure GPIO pin : TELE_IRQ_Pin */
  GPIO_InitStruct.Pin = TELE_IRQ_Pin;
 8004294:	2304      	movs	r3, #4
 8004296:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8004298:	4b2b      	ldr	r3, [pc, #172]	; (8004348 <MX_GPIO_Init+0x1e0>)
 800429a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800429c:	2300      	movs	r3, #0
 800429e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(TELE_IRQ_GPIO_Port, &GPIO_InitStruct);
 80042a0:	f107 031c 	add.w	r3, r7, #28
 80042a4:	4619      	mov	r1, r3
 80042a6:	4825      	ldr	r0, [pc, #148]	; (800433c <MX_GPIO_Init+0x1d4>)
 80042a8:	f004 f8e2 	bl	8008470 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 80042ac:	2301      	movs	r3, #1
 80042ae:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80042b0:	2301      	movs	r3, #1
 80042b2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80042b4:	2300      	movs	r3, #0
 80042b6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80042b8:	2300      	movs	r3, #0
 80042ba:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 80042bc:	f107 031c 	add.w	r3, r7, #28
 80042c0:	4619      	mov	r1, r3
 80042c2:	481f      	ldr	r0, [pc, #124]	; (8004340 <MX_GPIO_Init+0x1d8>)
 80042c4:	f004 f8d4 	bl	8008470 <HAL_GPIO_Init>

  /*Configure GPIO pin : BTN_INT_Pin */
  GPIO_InitStruct.Pin = BTN_INT_Pin;
 80042c8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80042cc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80042ce:	4b1e      	ldr	r3, [pc, #120]	; (8004348 <MX_GPIO_Init+0x1e0>)
 80042d0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80042d2:	2300      	movs	r3, #0
 80042d4:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BTN_INT_GPIO_Port, &GPIO_InitStruct);
 80042d6:	f107 031c 	add.w	r3, r7, #28
 80042da:	4619      	mov	r1, r3
 80042dc:	4816      	ldr	r0, [pc, #88]	; (8004338 <MX_GPIO_Init+0x1d0>)
 80042de:	f004 f8c7 	bl	8008470 <HAL_GPIO_Init>

  /*Configure GPIO pin : GPS_RST_Pin */
  GPIO_InitStruct.Pin = GPS_RST_Pin;
 80042e2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80042e6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80042e8:	2301      	movs	r3, #1
 80042ea:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80042ec:	2300      	movs	r3, #0
 80042ee:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80042f0:	2300      	movs	r3, #0
 80042f2:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPS_RST_GPIO_Port, &GPIO_InitStruct);
 80042f4:	f107 031c 	add.w	r3, r7, #28
 80042f8:	4619      	mov	r1, r3
 80042fa:	4812      	ldr	r0, [pc, #72]	; (8004344 <MX_GPIO_Init+0x1dc>)
 80042fc:	f004 f8b8 	bl	8008470 <HAL_GPIO_Init>

  /*Configure GPIO pin : CARD_DET_Pin */
  GPIO_InitStruct.Pin = CARD_DET_Pin;
 8004300:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004304:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8004306:	2300      	movs	r3, #0
 8004308:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800430a:	2300      	movs	r3, #0
 800430c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(CARD_DET_GPIO_Port, &GPIO_InitStruct);
 800430e:	f107 031c 	add.w	r3, r7, #28
 8004312:	4619      	mov	r1, r3
 8004314:	4809      	ldr	r0, [pc, #36]	; (800433c <MX_GPIO_Init+0x1d4>)
 8004316:	f004 f8ab 	bl	8008470 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 800431a:	2200      	movs	r2, #0
 800431c:	2100      	movs	r1, #0
 800431e:	2017      	movs	r0, #23
 8004320:	f000 fe5d 	bl	8004fde <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8004324:	2017      	movs	r0, #23
 8004326:	f000 fe74 	bl	8005012 <HAL_NVIC_EnableIRQ>

}
 800432a:	bf00      	nop
 800432c:	3730      	adds	r7, #48	; 0x30
 800432e:	46bd      	mov	sp, r7
 8004330:	bd80      	pop	{r7, pc}
 8004332:	bf00      	nop
 8004334:	58024400 	.word	0x58024400
 8004338:	58021000 	.word	0x58021000
 800433c:	58020000 	.word	0x58020000
 8004340:	58020400 	.word	0x58020400
 8004344:	58020c00 	.word	0x58020c00
 8004348:	11110000 	.word	0x11110000

0800434c <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 800434c:	b580      	push	{r7, lr}
 800434e:	b088      	sub	sp, #32
 8004350:	af00      	add	r7, sp, #0
 8004352:	4603      	mov	r3, r0
 8004354:	80fb      	strh	r3, [r7, #6]

  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */

  RTC_TimeTypeDef sTime = {0};
 8004356:	f107 030c 	add.w	r3, r7, #12
 800435a:	2200      	movs	r2, #0
 800435c:	601a      	str	r2, [r3, #0]
 800435e:	605a      	str	r2, [r3, #4]
 8004360:	609a      	str	r2, [r3, #8]
 8004362:	60da      	str	r2, [r3, #12]
 8004364:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 8004366:	2300      	movs	r3, #0
 8004368:	60bb      	str	r3, [r7, #8]
  sTime.Hours = 16;
 800436a:	2310      	movs	r3, #16
 800436c:	733b      	strb	r3, [r7, #12]
    sTime.Minutes = 8;
 800436e:	2308      	movs	r3, #8
 8004370:	737b      	strb	r3, [r7, #13]
    sTime.Seconds = 0;
 8004372:	2300      	movs	r3, #0
 8004374:	73bb      	strb	r3, [r7, #14]
    sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8004376:	2300      	movs	r3, #0
 8004378:	61bb      	str	r3, [r7, #24]
    sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 800437a:	2300      	movs	r3, #0
 800437c:	61fb      	str	r3, [r7, #28]
    if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN) != HAL_OK)
 800437e:	f107 030c 	add.w	r3, r7, #12
 8004382:	2200      	movs	r2, #0
 8004384:	4619      	mov	r1, r3
 8004386:	4810      	ldr	r0, [pc, #64]	; (80043c8 <HAL_GPIO_EXTI_Callback+0x7c>)
 8004388:	f008 fcd8 	bl	800cd3c <HAL_RTC_SetTime>
 800438c:	4603      	mov	r3, r0
 800438e:	2b00      	cmp	r3, #0
 8004390:	d001      	beq.n	8004396 <HAL_GPIO_EXTI_Callback+0x4a>
    {
      Error_Handler();
 8004392:	f000 f827 	bl	80043e4 <Error_Handler>
    }
    sDate.WeekDay = RTC_WEEKDAY_WEDNESDAY;
 8004396:	2303      	movs	r3, #3
 8004398:	723b      	strb	r3, [r7, #8]
    sDate.Month = RTC_MONTH_MAY;
 800439a:	2305      	movs	r3, #5
 800439c:	727b      	strb	r3, [r7, #9]
    sDate.Date = 19;
 800439e:	2313      	movs	r3, #19
 80043a0:	72bb      	strb	r3, [r7, #10]
    sDate.Year = 21;
 80043a2:	2315      	movs	r3, #21
 80043a4:	72fb      	strb	r3, [r7, #11]

    if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN) != HAL_OK)
 80043a6:	f107 0308 	add.w	r3, r7, #8
 80043aa:	2200      	movs	r2, #0
 80043ac:	4619      	mov	r1, r3
 80043ae:	4806      	ldr	r0, [pc, #24]	; (80043c8 <HAL_GPIO_EXTI_Callback+0x7c>)
 80043b0:	f008 fdbe 	bl	800cf30 <HAL_RTC_SetDate>
 80043b4:	4603      	mov	r3, r0
 80043b6:	2b00      	cmp	r3, #0
 80043b8:	d001      	beq.n	80043be <HAL_GPIO_EXTI_Callback+0x72>
    {
      Error_Handler();
 80043ba:	f000 f813 	bl	80043e4 <Error_Handler>
    }

}
 80043be:	bf00      	nop
 80043c0:	3720      	adds	r7, #32
 80043c2:	46bd      	mov	sp, r7
 80043c4:	bd80      	pop	{r7, pc}
 80043c6:	bf00      	nop
 80043c8:	2404478c 	.word	0x2404478c

080043cc <HAL_PWR_PVDCallback>:
void HAL_PWR_PVDCallback (void)
{
 80043cc:	b480      	push	{r7}
 80043ce:	af00      	add	r7, sp, #0
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PWR_PVDCallback can be implemented in the user file
  */
	//HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_0);
	end_flag = 0;
 80043d0:	4b03      	ldr	r3, [pc, #12]	; (80043e0 <HAL_PWR_PVDCallback+0x14>)
 80043d2:	2200      	movs	r2, #0
 80043d4:	601a      	str	r2, [r3, #0]
}
 80043d6:	bf00      	nop
 80043d8:	46bd      	mov	sp, r7
 80043da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043de:	4770      	bx	lr
 80043e0:	24000008 	.word	0x24000008

080043e4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80043e4:	b580      	push	{r7, lr}
 80043e6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80043e8:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
  {
	  printf("Error Handler\n");
 80043ea:	4802      	ldr	r0, [pc, #8]	; (80043f4 <Error_Handler+0x10>)
 80043ec:	f016 fb50 	bl	801aa90 <puts>
 80043f0:	e7fb      	b.n	80043ea <Error_Handler+0x6>
 80043f2:	bf00      	nop
 80043f4:	0801c400 	.word	0x0801c400

080043f8 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 80043f8:	b480      	push	{r7}
 80043fa:	b083      	sub	sp, #12
 80043fc:	af00      	add	r7, sp, #0
 80043fe:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8004400:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8004404:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 8004408:	f003 0301 	and.w	r3, r3, #1
 800440c:	2b00      	cmp	r3, #0
 800440e:	d013      	beq.n	8004438 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8004410:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8004414:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 8004418:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 800441c:	2b00      	cmp	r3, #0
 800441e:	d00b      	beq.n	8004438 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 8004420:	e000      	b.n	8004424 <ITM_SendChar+0x2c>
    {
      __NOP();
 8004422:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 8004424:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	2b00      	cmp	r3, #0
 800442c:	d0f9      	beq.n	8004422 <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 800442e:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8004432:	687a      	ldr	r2, [r7, #4]
 8004434:	b2d2      	uxtb	r2, r2
 8004436:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 8004438:	687b      	ldr	r3, [r7, #4]
}
 800443a:	4618      	mov	r0, r3
 800443c:	370c      	adds	r7, #12
 800443e:	46bd      	mov	sp, r7
 8004440:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004444:	4770      	bx	lr

08004446 <_write>:

#include <myprintf.h>
#include "main.h"

int _write(int file, char *ptr, int len)
{
 8004446:	b580      	push	{r7, lr}
 8004448:	b086      	sub	sp, #24
 800444a:	af00      	add	r7, sp, #0
 800444c:	60f8      	str	r0, [r7, #12]
 800444e:	60b9      	str	r1, [r7, #8]
 8004450:	607a      	str	r2, [r7, #4]
  int i=0;
 8004452:	2300      	movs	r3, #0
 8004454:	617b      	str	r3, [r7, #20]
  for(i=0 ; i<len ; i++)
 8004456:	2300      	movs	r3, #0
 8004458:	617b      	str	r3, [r7, #20]
 800445a:	e009      	b.n	8004470 <_write+0x2a>
    ITM_SendChar((*ptr++));
 800445c:	68bb      	ldr	r3, [r7, #8]
 800445e:	1c5a      	adds	r2, r3, #1
 8004460:	60ba      	str	r2, [r7, #8]
 8004462:	781b      	ldrb	r3, [r3, #0]
 8004464:	4618      	mov	r0, r3
 8004466:	f7ff ffc7 	bl	80043f8 <ITM_SendChar>
  for(i=0 ; i<len ; i++)
 800446a:	697b      	ldr	r3, [r7, #20]
 800446c:	3301      	adds	r3, #1
 800446e:	617b      	str	r3, [r7, #20]
 8004470:	697a      	ldr	r2, [r7, #20]
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	429a      	cmp	r2, r3
 8004476:	dbf1      	blt.n	800445c <_write+0x16>
  return len;
 8004478:	687b      	ldr	r3, [r7, #4]
}
 800447a:	4618      	mov	r0, r3
 800447c:	3718      	adds	r7, #24
 800447e:	46bd      	mov	sp, r7
 8004480:	bd80      	pop	{r7, pc}
	...

08004484 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8004484:	b580      	push	{r7, lr}
 8004486:	b084      	sub	sp, #16
 8004488:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */
  PWR_PVDTypeDef sConfigPVD = {0};
 800448a:	f107 0308 	add.w	r3, r7, #8
 800448e:	2200      	movs	r2, #0
 8004490:	601a      	str	r2, [r3, #0]
 8004492:	605a      	str	r2, [r3, #4]

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004494:	4b13      	ldr	r3, [pc, #76]	; (80044e4 <HAL_MspInit+0x60>)
 8004496:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800449a:	4a12      	ldr	r2, [pc, #72]	; (80044e4 <HAL_MspInit+0x60>)
 800449c:	f043 0302 	orr.w	r3, r3, #2
 80044a0:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 80044a4:	4b0f      	ldr	r3, [pc, #60]	; (80044e4 <HAL_MspInit+0x60>)
 80044a6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80044aa:	f003 0302 	and.w	r3, r3, #2
 80044ae:	607b      	str	r3, [r7, #4]
 80044b0:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* PVD_AVD_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PVD_AVD_IRQn, 0, 0);
 80044b2:	2200      	movs	r2, #0
 80044b4:	2100      	movs	r1, #0
 80044b6:	2001      	movs	r0, #1
 80044b8:	f000 fd91 	bl	8004fde <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(PVD_AVD_IRQn);
 80044bc:	2001      	movs	r0, #1
 80044be:	f000 fda8 	bl	8005012 <HAL_NVIC_EnableIRQ>

  /** PVD Configuration
  */
  sConfigPVD.PVDLevel = PWR_PVDLEVEL_6;
 80044c2:	23c0      	movs	r3, #192	; 0xc0
 80044c4:	60bb      	str	r3, [r7, #8]
  sConfigPVD.Mode = PWR_PVD_MODE_IT_RISING;
 80044c6:	f04f 1301 	mov.w	r3, #65537	; 0x10001
 80044ca:	60fb      	str	r3, [r7, #12]
  HAL_PWR_ConfigPVD(&sConfigPVD);
 80044cc:	f107 0308 	add.w	r3, r7, #8
 80044d0:	4618      	mov	r0, r3
 80044d2:	f005 fc1f 	bl	8009d14 <HAL_PWR_ConfigPVD>
  /** Enable the PVD Output
  */
  HAL_PWR_EnablePVD();
 80044d6:	f005 fc97 	bl	8009e08 <HAL_PWR_EnablePVD>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80044da:	bf00      	nop
 80044dc:	3710      	adds	r7, #16
 80044de:	46bd      	mov	sp, r7
 80044e0:	bd80      	pop	{r7, pc}
 80044e2:	bf00      	nop
 80044e4:	58024400 	.word	0x58024400

080044e8 <HAL_FDCAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hfdcan: FDCAN handle pointer
* @retval None
*/
void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* hfdcan)
{
 80044e8:	b580      	push	{r7, lr}
 80044ea:	b08c      	sub	sp, #48	; 0x30
 80044ec:	af00      	add	r7, sp, #0
 80044ee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80044f0:	f107 031c 	add.w	r3, r7, #28
 80044f4:	2200      	movs	r2, #0
 80044f6:	601a      	str	r2, [r3, #0]
 80044f8:	605a      	str	r2, [r3, #4]
 80044fa:	609a      	str	r2, [r3, #8]
 80044fc:	60da      	str	r2, [r3, #12]
 80044fe:	611a      	str	r2, [r3, #16]
  if(hfdcan->Instance==FDCAN1)
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	4a48      	ldr	r2, [pc, #288]	; (8004628 <HAL_FDCAN_MspInit+0x140>)
 8004506:	4293      	cmp	r3, r2
 8004508:	d14e      	bne.n	80045a8 <HAL_FDCAN_MspInit+0xc0>
  {
  /* USER CODE BEGIN FDCAN1_MspInit 0 */

  /* USER CODE END FDCAN1_MspInit 0 */
    /* Peripheral clock enable */
    HAL_RCC_FDCAN_CLK_ENABLED++;
 800450a:	4b48      	ldr	r3, [pc, #288]	; (800462c <HAL_FDCAN_MspInit+0x144>)
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	3301      	adds	r3, #1
 8004510:	4a46      	ldr	r2, [pc, #280]	; (800462c <HAL_FDCAN_MspInit+0x144>)
 8004512:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_FDCAN_CLK_ENABLED==1){
 8004514:	4b45      	ldr	r3, [pc, #276]	; (800462c <HAL_FDCAN_MspInit+0x144>)
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	2b01      	cmp	r3, #1
 800451a:	d10e      	bne.n	800453a <HAL_FDCAN_MspInit+0x52>
      __HAL_RCC_FDCAN_CLK_ENABLE();
 800451c:	4b44      	ldr	r3, [pc, #272]	; (8004630 <HAL_FDCAN_MspInit+0x148>)
 800451e:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8004522:	4a43      	ldr	r2, [pc, #268]	; (8004630 <HAL_FDCAN_MspInit+0x148>)
 8004524:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004528:	f8c2 30ec 	str.w	r3, [r2, #236]	; 0xec
 800452c:	4b40      	ldr	r3, [pc, #256]	; (8004630 <HAL_FDCAN_MspInit+0x148>)
 800452e:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8004532:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004536:	61bb      	str	r3, [r7, #24]
 8004538:	69bb      	ldr	r3, [r7, #24]
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800453a:	4b3d      	ldr	r3, [pc, #244]	; (8004630 <HAL_FDCAN_MspInit+0x148>)
 800453c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004540:	4a3b      	ldr	r2, [pc, #236]	; (8004630 <HAL_FDCAN_MspInit+0x148>)
 8004542:	f043 0302 	orr.w	r3, r3, #2
 8004546:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800454a:	4b39      	ldr	r3, [pc, #228]	; (8004630 <HAL_FDCAN_MspInit+0x148>)
 800454c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004550:	f003 0302 	and.w	r3, r3, #2
 8004554:	617b      	str	r3, [r7, #20]
 8004556:	697b      	ldr	r3, [r7, #20]
    /**FDCAN1 GPIO Configuration
    PB8     ------> FDCAN1_RX
    PB9     ------> FDCAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8004558:	f44f 7340 	mov.w	r3, #768	; 0x300
 800455c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800455e:	2302      	movs	r3, #2
 8004560:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004562:	2300      	movs	r3, #0
 8004564:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004566:	2303      	movs	r3, #3
 8004568:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN1;
 800456a:	2309      	movs	r3, #9
 800456c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800456e:	f107 031c 	add.w	r3, r7, #28
 8004572:	4619      	mov	r1, r3
 8004574:	482f      	ldr	r0, [pc, #188]	; (8004634 <HAL_FDCAN_MspInit+0x14c>)
 8004576:	f003 ff7b 	bl	8008470 <HAL_GPIO_Init>

    HAL_I2CEx_EnableFastModePlus(SYSCFG_PMCR_I2C_PB8_FMP);
 800457a:	2040      	movs	r0, #64	; 0x40
 800457c:	f004 f98e 	bl	800889c <HAL_I2CEx_EnableFastModePlus>

    HAL_I2CEx_EnableFastModePlus(SYSCFG_PMCR_I2C_PB9_FMP);
 8004580:	2080      	movs	r0, #128	; 0x80
 8004582:	f004 f98b 	bl	800889c <HAL_I2CEx_EnableFastModePlus>

    /* FDCAN1 interrupt Init */
    HAL_NVIC_SetPriority(FDCAN1_IT0_IRQn, 0, 0);
 8004586:	2200      	movs	r2, #0
 8004588:	2100      	movs	r1, #0
 800458a:	2013      	movs	r0, #19
 800458c:	f000 fd27 	bl	8004fde <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(FDCAN1_IT0_IRQn);
 8004590:	2013      	movs	r0, #19
 8004592:	f000 fd3e 	bl	8005012 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(FDCAN1_IT1_IRQn, 0, 0);
 8004596:	2200      	movs	r2, #0
 8004598:	2100      	movs	r1, #0
 800459a:	2015      	movs	r0, #21
 800459c:	f000 fd1f 	bl	8004fde <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(FDCAN1_IT1_IRQn);
 80045a0:	2015      	movs	r0, #21
 80045a2:	f000 fd36 	bl	8005012 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN FDCAN2_MspInit 1 */

  /* USER CODE END FDCAN2_MspInit 1 */
  }

}
 80045a6:	e03b      	b.n	8004620 <HAL_FDCAN_MspInit+0x138>
  else if(hfdcan->Instance==FDCAN2)
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	4a22      	ldr	r2, [pc, #136]	; (8004638 <HAL_FDCAN_MspInit+0x150>)
 80045ae:	4293      	cmp	r3, r2
 80045b0:	d136      	bne.n	8004620 <HAL_FDCAN_MspInit+0x138>
    HAL_RCC_FDCAN_CLK_ENABLED++;
 80045b2:	4b1e      	ldr	r3, [pc, #120]	; (800462c <HAL_FDCAN_MspInit+0x144>)
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	3301      	adds	r3, #1
 80045b8:	4a1c      	ldr	r2, [pc, #112]	; (800462c <HAL_FDCAN_MspInit+0x144>)
 80045ba:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_FDCAN_CLK_ENABLED==1){
 80045bc:	4b1b      	ldr	r3, [pc, #108]	; (800462c <HAL_FDCAN_MspInit+0x144>)
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	2b01      	cmp	r3, #1
 80045c2:	d10e      	bne.n	80045e2 <HAL_FDCAN_MspInit+0xfa>
      __HAL_RCC_FDCAN_CLK_ENABLE();
 80045c4:	4b1a      	ldr	r3, [pc, #104]	; (8004630 <HAL_FDCAN_MspInit+0x148>)
 80045c6:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 80045ca:	4a19      	ldr	r2, [pc, #100]	; (8004630 <HAL_FDCAN_MspInit+0x148>)
 80045cc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80045d0:	f8c2 30ec 	str.w	r3, [r2, #236]	; 0xec
 80045d4:	4b16      	ldr	r3, [pc, #88]	; (8004630 <HAL_FDCAN_MspInit+0x148>)
 80045d6:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 80045da:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80045de:	613b      	str	r3, [r7, #16]
 80045e0:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80045e2:	4b13      	ldr	r3, [pc, #76]	; (8004630 <HAL_FDCAN_MspInit+0x148>)
 80045e4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80045e8:	4a11      	ldr	r2, [pc, #68]	; (8004630 <HAL_FDCAN_MspInit+0x148>)
 80045ea:	f043 0302 	orr.w	r3, r3, #2
 80045ee:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80045f2:	4b0f      	ldr	r3, [pc, #60]	; (8004630 <HAL_FDCAN_MspInit+0x148>)
 80045f4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80045f8:	f003 0302 	and.w	r3, r3, #2
 80045fc:	60fb      	str	r3, [r7, #12]
 80045fe:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 8004600:	2360      	movs	r3, #96	; 0x60
 8004602:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004604:	2302      	movs	r3, #2
 8004606:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004608:	2300      	movs	r3, #0
 800460a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800460c:	2300      	movs	r3, #0
 800460e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN2;
 8004610:	2309      	movs	r3, #9
 8004612:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004614:	f107 031c 	add.w	r3, r7, #28
 8004618:	4619      	mov	r1, r3
 800461a:	4806      	ldr	r0, [pc, #24]	; (8004634 <HAL_FDCAN_MspInit+0x14c>)
 800461c:	f003 ff28 	bl	8008470 <HAL_GPIO_Init>
}
 8004620:	bf00      	nop
 8004622:	3730      	adds	r7, #48	; 0x30
 8004624:	46bd      	mov	sp, r7
 8004626:	bd80      	pop	{r7, pc}
 8004628:	4000a000 	.word	0x4000a000
 800462c:	240404bc 	.word	0x240404bc
 8004630:	58024400 	.word	0x58024400
 8004634:	58020400 	.word	0x58020400
 8004638:	4000a400 	.word	0x4000a400

0800463c <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 800463c:	b480      	push	{r7}
 800463e:	b083      	sub	sp, #12
 8004640:	af00      	add	r7, sp, #0
 8004642:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	4a07      	ldr	r2, [pc, #28]	; (8004668 <HAL_RTC_MspInit+0x2c>)
 800464a:	4293      	cmp	r3, r2
 800464c:	d105      	bne.n	800465a <HAL_RTC_MspInit+0x1e>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 800464e:	4b07      	ldr	r3, [pc, #28]	; (800466c <HAL_RTC_MspInit+0x30>)
 8004650:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004652:	4a06      	ldr	r2, [pc, #24]	; (800466c <HAL_RTC_MspInit+0x30>)
 8004654:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004658:	6713      	str	r3, [r2, #112]	; 0x70
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 800465a:	bf00      	nop
 800465c:	370c      	adds	r7, #12
 800465e:	46bd      	mov	sp, r7
 8004660:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004664:	4770      	bx	lr
 8004666:	bf00      	nop
 8004668:	58004000 	.word	0x58004000
 800466c:	58024400 	.word	0x58024400

08004670 <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 8004670:	b580      	push	{r7, lr}
 8004672:	b08a      	sub	sp, #40	; 0x28
 8004674:	af00      	add	r7, sp, #0
 8004676:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004678:	f107 0314 	add.w	r3, r7, #20
 800467c:	2200      	movs	r2, #0
 800467e:	601a      	str	r2, [r3, #0]
 8004680:	605a      	str	r2, [r3, #4]
 8004682:	609a      	str	r2, [r3, #8]
 8004684:	60da      	str	r2, [r3, #12]
 8004686:	611a      	str	r2, [r3, #16]
  if(hsd->Instance==SDMMC1)
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	4a2e      	ldr	r2, [pc, #184]	; (8004748 <HAL_SD_MspInit+0xd8>)
 800468e:	4293      	cmp	r3, r2
 8004690:	d155      	bne.n	800473e <HAL_SD_MspInit+0xce>
  {
  /* USER CODE BEGIN SDMMC1_MspInit 0 */

  /* USER CODE END SDMMC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SDMMC1_CLK_ENABLE();
 8004692:	4b2e      	ldr	r3, [pc, #184]	; (800474c <HAL_SD_MspInit+0xdc>)
 8004694:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8004698:	4a2c      	ldr	r2, [pc, #176]	; (800474c <HAL_SD_MspInit+0xdc>)
 800469a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800469e:	f8c2 30d4 	str.w	r3, [r2, #212]	; 0xd4
 80046a2:	4b2a      	ldr	r3, [pc, #168]	; (800474c <HAL_SD_MspInit+0xdc>)
 80046a4:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 80046a8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80046ac:	613b      	str	r3, [r7, #16]
 80046ae:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80046b0:	4b26      	ldr	r3, [pc, #152]	; (800474c <HAL_SD_MspInit+0xdc>)
 80046b2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80046b6:	4a25      	ldr	r2, [pc, #148]	; (800474c <HAL_SD_MspInit+0xdc>)
 80046b8:	f043 0304 	orr.w	r3, r3, #4
 80046bc:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80046c0:	4b22      	ldr	r3, [pc, #136]	; (800474c <HAL_SD_MspInit+0xdc>)
 80046c2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80046c6:	f003 0304 	and.w	r3, r3, #4
 80046ca:	60fb      	str	r3, [r7, #12]
 80046cc:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80046ce:	4b1f      	ldr	r3, [pc, #124]	; (800474c <HAL_SD_MspInit+0xdc>)
 80046d0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80046d4:	4a1d      	ldr	r2, [pc, #116]	; (800474c <HAL_SD_MspInit+0xdc>)
 80046d6:	f043 0308 	orr.w	r3, r3, #8
 80046da:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80046de:	4b1b      	ldr	r3, [pc, #108]	; (800474c <HAL_SD_MspInit+0xdc>)
 80046e0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80046e4:	f003 0308 	and.w	r3, r3, #8
 80046e8:	60bb      	str	r3, [r7, #8]
 80046ea:	68bb      	ldr	r3, [r7, #8]
    PC10     ------> SDMMC1_D2
    PC11     ------> SDMMC1_D3
    PC12     ------> SDMMC1_CK
    PD2     ------> SDMMC1_CMD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 80046ec:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 80046f0:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_12;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80046f2:	2302      	movs	r3, #2
 80046f4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80046f6:	2300      	movs	r3, #0
 80046f8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80046fa:	2303      	movs	r3, #3
 80046fc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO1;
 80046fe:	230c      	movs	r3, #12
 8004700:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004702:	f107 0314 	add.w	r3, r7, #20
 8004706:	4619      	mov	r1, r3
 8004708:	4811      	ldr	r0, [pc, #68]	; (8004750 <HAL_SD_MspInit+0xe0>)
 800470a:	f003 feb1 	bl	8008470 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 800470e:	2304      	movs	r3, #4
 8004710:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004712:	2302      	movs	r3, #2
 8004714:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004716:	2300      	movs	r3, #0
 8004718:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800471a:	2303      	movs	r3, #3
 800471c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO1;
 800471e:	230c      	movs	r3, #12
 8004720:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8004722:	f107 0314 	add.w	r3, r7, #20
 8004726:	4619      	mov	r1, r3
 8004728:	480a      	ldr	r0, [pc, #40]	; (8004754 <HAL_SD_MspInit+0xe4>)
 800472a:	f003 fea1 	bl	8008470 <HAL_GPIO_Init>

    /* SDMMC1 interrupt Init */
    HAL_NVIC_SetPriority(SDMMC1_IRQn, 0, 0);
 800472e:	2200      	movs	r2, #0
 8004730:	2100      	movs	r1, #0
 8004732:	2031      	movs	r0, #49	; 0x31
 8004734:	f000 fc53 	bl	8004fde <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SDMMC1_IRQn);
 8004738:	2031      	movs	r0, #49	; 0x31
 800473a:	f000 fc6a 	bl	8005012 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SDMMC1_MspInit 1 */

  /* USER CODE END SDMMC1_MspInit 1 */
  }

}
 800473e:	bf00      	nop
 8004740:	3728      	adds	r7, #40	; 0x28
 8004742:	46bd      	mov	sp, r7
 8004744:	bd80      	pop	{r7, pc}
 8004746:	bf00      	nop
 8004748:	52007000 	.word	0x52007000
 800474c:	58024400 	.word	0x58024400
 8004750:	58020800 	.word	0x58020800
 8004754:	58020c00 	.word	0x58020c00

08004758 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8004758:	b580      	push	{r7, lr}
 800475a:	b08a      	sub	sp, #40	; 0x28
 800475c:	af00      	add	r7, sp, #0
 800475e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004760:	f107 0314 	add.w	r3, r7, #20
 8004764:	2200      	movs	r2, #0
 8004766:	601a      	str	r2, [r3, #0]
 8004768:	605a      	str	r2, [r3, #4]
 800476a:	609a      	str	r2, [r3, #8]
 800476c:	60da      	str	r2, [r3, #12]
 800476e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	4a1a      	ldr	r2, [pc, #104]	; (80047e0 <HAL_SPI_MspInit+0x88>)
 8004776:	4293      	cmp	r3, r2
 8004778:	d12d      	bne.n	80047d6 <HAL_SPI_MspInit+0x7e>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800477a:	4b1a      	ldr	r3, [pc, #104]	; (80047e4 <HAL_SPI_MspInit+0x8c>)
 800477c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8004780:	4a18      	ldr	r2, [pc, #96]	; (80047e4 <HAL_SPI_MspInit+0x8c>)
 8004782:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8004786:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 800478a:	4b16      	ldr	r3, [pc, #88]	; (80047e4 <HAL_SPI_MspInit+0x8c>)
 800478c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8004790:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004794:	613b      	str	r3, [r7, #16]
 8004796:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004798:	4b12      	ldr	r3, [pc, #72]	; (80047e4 <HAL_SPI_MspInit+0x8c>)
 800479a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800479e:	4a11      	ldr	r2, [pc, #68]	; (80047e4 <HAL_SPI_MspInit+0x8c>)
 80047a0:	f043 0301 	orr.w	r3, r3, #1
 80047a4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80047a8:	4b0e      	ldr	r3, [pc, #56]	; (80047e4 <HAL_SPI_MspInit+0x8c>)
 80047aa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80047ae:	f003 0301 	and.w	r3, r3, #1
 80047b2:	60fb      	str	r3, [r7, #12]
 80047b4:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 80047b6:	23e0      	movs	r3, #224	; 0xe0
 80047b8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80047ba:	2302      	movs	r3, #2
 80047bc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80047be:	2300      	movs	r3, #0
 80047c0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80047c2:	2303      	movs	r3, #3
 80047c4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80047c6:	2305      	movs	r3, #5
 80047c8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80047ca:	f107 0314 	add.w	r3, r7, #20
 80047ce:	4619      	mov	r1, r3
 80047d0:	4805      	ldr	r0, [pc, #20]	; (80047e8 <HAL_SPI_MspInit+0x90>)
 80047d2:	f003 fe4d 	bl	8008470 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 80047d6:	bf00      	nop
 80047d8:	3728      	adds	r7, #40	; 0x28
 80047da:	46bd      	mov	sp, r7
 80047dc:	bd80      	pop	{r7, pc}
 80047de:	bf00      	nop
 80047e0:	40013000 	.word	0x40013000
 80047e4:	58024400 	.word	0x58024400
 80047e8:	58020000 	.word	0x58020000

080047ec <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80047ec:	b580      	push	{r7, lr}
 80047ee:	b08c      	sub	sp, #48	; 0x30
 80047f0:	af00      	add	r7, sp, #0
 80047f2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80047f4:	f107 031c 	add.w	r3, r7, #28
 80047f8:	2200      	movs	r2, #0
 80047fa:	601a      	str	r2, [r3, #0]
 80047fc:	605a      	str	r2, [r3, #4]
 80047fe:	609a      	str	r2, [r3, #8]
 8004800:	60da      	str	r2, [r3, #12]
 8004802:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART8)
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	4a4b      	ldr	r2, [pc, #300]	; (8004938 <HAL_UART_MspInit+0x14c>)
 800480a:	4293      	cmp	r3, r2
 800480c:	d12e      	bne.n	800486c <HAL_UART_MspInit+0x80>
  {
  /* USER CODE BEGIN UART8_MspInit 0 */

  /* USER CODE END UART8_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART8_CLK_ENABLE();
 800480e:	4b4b      	ldr	r3, [pc, #300]	; (800493c <HAL_UART_MspInit+0x150>)
 8004810:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8004814:	4a49      	ldr	r2, [pc, #292]	; (800493c <HAL_UART_MspInit+0x150>)
 8004816:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800481a:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800481e:	4b47      	ldr	r3, [pc, #284]	; (800493c <HAL_UART_MspInit+0x150>)
 8004820:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8004824:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004828:	61bb      	str	r3, [r7, #24]
 800482a:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 800482c:	4b43      	ldr	r3, [pc, #268]	; (800493c <HAL_UART_MspInit+0x150>)
 800482e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004832:	4a42      	ldr	r2, [pc, #264]	; (800493c <HAL_UART_MspInit+0x150>)
 8004834:	f043 0310 	orr.w	r3, r3, #16
 8004838:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800483c:	4b3f      	ldr	r3, [pc, #252]	; (800493c <HAL_UART_MspInit+0x150>)
 800483e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004842:	f003 0310 	and.w	r3, r3, #16
 8004846:	617b      	str	r3, [r7, #20]
 8004848:	697b      	ldr	r3, [r7, #20]
    /**UART8 GPIO Configuration
    PE0     ------> UART8_RX
    PE1     ------> UART8_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800484a:	2303      	movs	r3, #3
 800484c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800484e:	2302      	movs	r3, #2
 8004850:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004852:	2300      	movs	r3, #0
 8004854:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004856:	2300      	movs	r3, #0
 8004858:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_UART8;
 800485a:	2308      	movs	r3, #8
 800485c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800485e:	f107 031c 	add.w	r3, r7, #28
 8004862:	4619      	mov	r1, r3
 8004864:	4836      	ldr	r0, [pc, #216]	; (8004940 <HAL_UART_MspInit+0x154>)
 8004866:	f003 fe03 	bl	8008470 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 800486a:	e061      	b.n	8004930 <HAL_UART_MspInit+0x144>
  else if(huart->Instance==USART3)
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	4a34      	ldr	r2, [pc, #208]	; (8004944 <HAL_UART_MspInit+0x158>)
 8004872:	4293      	cmp	r3, r2
 8004874:	d15c      	bne.n	8004930 <HAL_UART_MspInit+0x144>
    __HAL_RCC_USART3_CLK_ENABLE();
 8004876:	4b31      	ldr	r3, [pc, #196]	; (800493c <HAL_UART_MspInit+0x150>)
 8004878:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800487c:	4a2f      	ldr	r2, [pc, #188]	; (800493c <HAL_UART_MspInit+0x150>)
 800487e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004882:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8004886:	4b2d      	ldr	r3, [pc, #180]	; (800493c <HAL_UART_MspInit+0x150>)
 8004888:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800488c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004890:	613b      	str	r3, [r7, #16]
 8004892:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8004894:	4b29      	ldr	r3, [pc, #164]	; (800493c <HAL_UART_MspInit+0x150>)
 8004896:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800489a:	4a28      	ldr	r2, [pc, #160]	; (800493c <HAL_UART_MspInit+0x150>)
 800489c:	f043 0308 	orr.w	r3, r3, #8
 80048a0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80048a4:	4b25      	ldr	r3, [pc, #148]	; (800493c <HAL_UART_MspInit+0x150>)
 80048a6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80048aa:	f003 0308 	and.w	r3, r3, #8
 80048ae:	60fb      	str	r3, [r7, #12]
 80048b0:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80048b2:	f44f 7340 	mov.w	r3, #768	; 0x300
 80048b6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80048b8:	2302      	movs	r3, #2
 80048ba:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80048bc:	2300      	movs	r3, #0
 80048be:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80048c0:	2300      	movs	r3, #0
 80048c2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80048c4:	2307      	movs	r3, #7
 80048c6:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80048c8:	f107 031c 	add.w	r3, r7, #28
 80048cc:	4619      	mov	r1, r3
 80048ce:	481e      	ldr	r0, [pc, #120]	; (8004948 <HAL_UART_MspInit+0x15c>)
 80048d0:	f003 fdce 	bl	8008470 <HAL_GPIO_Init>
    hdma_usart3_rx.Instance = DMA1_Stream1;
 80048d4:	4b1d      	ldr	r3, [pc, #116]	; (800494c <HAL_UART_MspInit+0x160>)
 80048d6:	4a1e      	ldr	r2, [pc, #120]	; (8004950 <HAL_UART_MspInit+0x164>)
 80048d8:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Request = DMA_REQUEST_USART3_RX;
 80048da:	4b1c      	ldr	r3, [pc, #112]	; (800494c <HAL_UART_MspInit+0x160>)
 80048dc:	222d      	movs	r2, #45	; 0x2d
 80048de:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80048e0:	4b1a      	ldr	r3, [pc, #104]	; (800494c <HAL_UART_MspInit+0x160>)
 80048e2:	2200      	movs	r2, #0
 80048e4:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80048e6:	4b19      	ldr	r3, [pc, #100]	; (800494c <HAL_UART_MspInit+0x160>)
 80048e8:	2200      	movs	r2, #0
 80048ea:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 80048ec:	4b17      	ldr	r3, [pc, #92]	; (800494c <HAL_UART_MspInit+0x160>)
 80048ee:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80048f2:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80048f4:	4b15      	ldr	r3, [pc, #84]	; (800494c <HAL_UART_MspInit+0x160>)
 80048f6:	2200      	movs	r2, #0
 80048f8:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80048fa:	4b14      	ldr	r3, [pc, #80]	; (800494c <HAL_UART_MspInit+0x160>)
 80048fc:	2200      	movs	r2, #0
 80048fe:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Mode = DMA_CIRCULAR;
 8004900:	4b12      	ldr	r3, [pc, #72]	; (800494c <HAL_UART_MspInit+0x160>)
 8004902:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004906:	61da      	str	r2, [r3, #28]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_LOW;
 8004908:	4b10      	ldr	r3, [pc, #64]	; (800494c <HAL_UART_MspInit+0x160>)
 800490a:	2200      	movs	r2, #0
 800490c:	621a      	str	r2, [r3, #32]
    hdma_usart3_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800490e:	4b0f      	ldr	r3, [pc, #60]	; (800494c <HAL_UART_MspInit+0x160>)
 8004910:	2200      	movs	r2, #0
 8004912:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 8004914:	480d      	ldr	r0, [pc, #52]	; (800494c <HAL_UART_MspInit+0x160>)
 8004916:	f000 fb97 	bl	8005048 <HAL_DMA_Init>
 800491a:	4603      	mov	r3, r0
 800491c:	2b00      	cmp	r3, #0
 800491e:	d001      	beq.n	8004924 <HAL_UART_MspInit+0x138>
      Error_Handler();
 8004920:	f7ff fd60 	bl	80043e4 <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart3_rx);
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	4a09      	ldr	r2, [pc, #36]	; (800494c <HAL_UART_MspInit+0x160>)
 8004928:	679a      	str	r2, [r3, #120]	; 0x78
 800492a:	4a08      	ldr	r2, [pc, #32]	; (800494c <HAL_UART_MspInit+0x160>)
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	6393      	str	r3, [r2, #56]	; 0x38
}
 8004930:	bf00      	nop
 8004932:	3730      	adds	r7, #48	; 0x30
 8004934:	46bd      	mov	sp, r7
 8004936:	bd80      	pop	{r7, pc}
 8004938:	40007c00 	.word	0x40007c00
 800493c:	58024400 	.word	0x58024400
 8004940:	58021000 	.word	0x58021000
 8004944:	40004800 	.word	0x40004800
 8004948:	58020c00 	.word	0x58020c00
 800494c:	240445e8 	.word	0x240445e8
 8004950:	40020028 	.word	0x40020028

08004954 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8004954:	b580      	push	{r7, lr}
 8004956:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  HAL_RCC_NMI_IRQHandler();
 8004958:	f006 fa98 	bl	800ae8c <HAL_RCC_NMI_IRQHandler>
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800495c:	e7fe      	b.n	800495c <NMI_Handler+0x8>

0800495e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800495e:	b480      	push	{r7}
 8004960:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8004962:	e7fe      	b.n	8004962 <HardFault_Handler+0x4>

08004964 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8004964:	b480      	push	{r7}
 8004966:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8004968:	e7fe      	b.n	8004968 <MemManage_Handler+0x4>

0800496a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800496a:	b480      	push	{r7}
 800496c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800496e:	e7fe      	b.n	800496e <BusFault_Handler+0x4>

08004970 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8004970:	b480      	push	{r7}
 8004972:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8004974:	e7fe      	b.n	8004974 <UsageFault_Handler+0x4>

08004976 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8004976:	b480      	push	{r7}
 8004978:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800497a:	bf00      	nop
 800497c:	46bd      	mov	sp, r7
 800497e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004982:	4770      	bx	lr

08004984 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8004984:	b480      	push	{r7}
 8004986:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8004988:	bf00      	nop
 800498a:	46bd      	mov	sp, r7
 800498c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004990:	4770      	bx	lr

08004992 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8004992:	b480      	push	{r7}
 8004994:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8004996:	bf00      	nop
 8004998:	46bd      	mov	sp, r7
 800499a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800499e:	4770      	bx	lr

080049a0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80049a0:	b580      	push	{r7, lr}
 80049a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80049a4:	f000 f9f2 	bl	8004d8c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80049a8:	bf00      	nop
 80049aa:	bd80      	pop	{r7, pc}

080049ac <PVD_AVD_IRQHandler>:

/**
  * @brief This function handles PVD and AVD interrupts through EXTI line 16.
  */
void PVD_AVD_IRQHandler(void)
{
 80049ac:	b580      	push	{r7, lr}
 80049ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN PVD_AVD_IRQn 0 */

  /* USER CODE END PVD_AVD_IRQn 0 */
  HAL_PWREx_PVD_AVD_IRQHandler();
 80049b0:	f005 fa84 	bl	8009ebc <HAL_PWREx_PVD_AVD_IRQHandler>
  /* USER CODE BEGIN PVD_AVD_IRQn 1 */

  /* USER CODE END PVD_AVD_IRQn 1 */
}
 80049b4:	bf00      	nop
 80049b6:	bd80      	pop	{r7, pc}

080049b8 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 80049b8:	b580      	push	{r7, lr}
 80049ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 80049bc:	4802      	ldr	r0, [pc, #8]	; (80049c8 <DMA1_Stream1_IRQHandler+0x10>)
 80049be:	f001 f909 	bl	8005bd4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 80049c2:	bf00      	nop
 80049c4:	bd80      	pop	{r7, pc}
 80049c6:	bf00      	nop
 80049c8:	240445e8 	.word	0x240445e8

080049cc <FDCAN1_IT0_IRQHandler>:

/**
  * @brief This function handles FDCAN1 interrupt 0.
  */
void FDCAN1_IT0_IRQHandler(void)
{
 80049cc:	b580      	push	{r7, lr}
 80049ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FDCAN1_IT0_IRQn 0 */

  /* USER CODE END FDCAN1_IT0_IRQn 0 */
  HAL_FDCAN_IRQHandler(&hfdcan1);
 80049d0:	4802      	ldr	r0, [pc, #8]	; (80049dc <FDCAN1_IT0_IRQHandler+0x10>)
 80049d2:	f003 f8bd 	bl	8007b50 <HAL_FDCAN_IRQHandler>
  /* USER CODE BEGIN FDCAN1_IT0_IRQn 1 */

  /* USER CODE END FDCAN1_IT0_IRQn 1 */
}
 80049d6:	bf00      	nop
 80049d8:	bd80      	pop	{r7, pc}
 80049da:	bf00      	nop
 80049dc:	240447b0 	.word	0x240447b0

080049e0 <FDCAN1_IT1_IRQHandler>:

/**
  * @brief This function handles FDCAN1 interrupt 1.
  */
void FDCAN1_IT1_IRQHandler(void)
{
 80049e0:	b580      	push	{r7, lr}
 80049e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FDCAN1_IT1_IRQn 0 */

  /* USER CODE END FDCAN1_IT1_IRQn 0 */
  HAL_FDCAN_IRQHandler(&hfdcan1);
 80049e4:	4802      	ldr	r0, [pc, #8]	; (80049f0 <FDCAN1_IT1_IRQHandler+0x10>)
 80049e6:	f003 f8b3 	bl	8007b50 <HAL_FDCAN_IRQHandler>
  /* USER CODE BEGIN FDCAN1_IT1_IRQn 1 */

  /* USER CODE END FDCAN1_IT1_IRQn 1 */
}
 80049ea:	bf00      	nop
 80049ec:	bd80      	pop	{r7, pc}
 80049ee:	bf00      	nop
 80049f0:	240447b0 	.word	0x240447b0

080049f4 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 80049f4:	b580      	push	{r7, lr}
 80049f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_9);
 80049f8:	f44f 7000 	mov.w	r0, #512	; 0x200
 80049fc:	f003 ff34 	bl	8008868 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8004a00:	bf00      	nop
 8004a02:	bd80      	pop	{r7, pc}

08004a04 <SDMMC1_IRQHandler>:

/**
  * @brief This function handles SDMMC1 global interrupt.
  */
void SDMMC1_IRQHandler(void)
{
 8004a04:	b580      	push	{r7, lr}
 8004a06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SDMMC1_IRQn 0 */

  /* USER CODE END SDMMC1_IRQn 0 */
  HAL_SD_IRQHandler(&hsd1);
 8004a08:	4802      	ldr	r0, [pc, #8]	; (8004a14 <SDMMC1_IRQHandler+0x10>)
 8004a0a:	f009 f9c1 	bl	800dd90 <HAL_SD_IRQHandler>
  /* USER CODE BEGIN SDMMC1_IRQn 1 */

  /* USER CODE END SDMMC1_IRQn 1 */
}
 8004a0e:	bf00      	nop
 8004a10:	bd80      	pop	{r7, pc}
 8004a12:	bf00      	nop
 8004a14:	2404470c 	.word	0x2404470c

08004a18 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8004a18:	b580      	push	{r7, lr}
 8004a1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8004a1c:	4802      	ldr	r0, [pc, #8]	; (8004a28 <OTG_FS_IRQHandler+0x10>)
 8004a1e:	f004 f8b8 	bl	8008b92 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8004a22:	bf00      	nop
 8004a24:	bd80      	pop	{r7, pc}
 8004a26:	bf00      	nop
 8004a28:	24045340 	.word	0x24045340

08004a2c <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8004a2c:	b580      	push	{r7, lr}
 8004a2e:	b086      	sub	sp, #24
 8004a30:	af00      	add	r7, sp, #0
 8004a32:	60f8      	str	r0, [r7, #12]
 8004a34:	60b9      	str	r1, [r7, #8]
 8004a36:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004a38:	2300      	movs	r3, #0
 8004a3a:	617b      	str	r3, [r7, #20]
 8004a3c:	e00a      	b.n	8004a54 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8004a3e:	f3af 8000 	nop.w
 8004a42:	4601      	mov	r1, r0
 8004a44:	68bb      	ldr	r3, [r7, #8]
 8004a46:	1c5a      	adds	r2, r3, #1
 8004a48:	60ba      	str	r2, [r7, #8]
 8004a4a:	b2ca      	uxtb	r2, r1
 8004a4c:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004a4e:	697b      	ldr	r3, [r7, #20]
 8004a50:	3301      	adds	r3, #1
 8004a52:	617b      	str	r3, [r7, #20]
 8004a54:	697a      	ldr	r2, [r7, #20]
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	429a      	cmp	r2, r3
 8004a5a:	dbf0      	blt.n	8004a3e <_read+0x12>
	}

return len;
 8004a5c:	687b      	ldr	r3, [r7, #4]
}
 8004a5e:	4618      	mov	r0, r3
 8004a60:	3718      	adds	r7, #24
 8004a62:	46bd      	mov	sp, r7
 8004a64:	bd80      	pop	{r7, pc}

08004a66 <_close>:
	}
	return len;
}

int _close(int file)
{
 8004a66:	b480      	push	{r7}
 8004a68:	b083      	sub	sp, #12
 8004a6a:	af00      	add	r7, sp, #0
 8004a6c:	6078      	str	r0, [r7, #4]
	return -1;
 8004a6e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8004a72:	4618      	mov	r0, r3
 8004a74:	370c      	adds	r7, #12
 8004a76:	46bd      	mov	sp, r7
 8004a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a7c:	4770      	bx	lr

08004a7e <_fstat>:


int _fstat(int file, struct stat *st)
{
 8004a7e:	b480      	push	{r7}
 8004a80:	b083      	sub	sp, #12
 8004a82:	af00      	add	r7, sp, #0
 8004a84:	6078      	str	r0, [r7, #4]
 8004a86:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8004a88:	683b      	ldr	r3, [r7, #0]
 8004a8a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8004a8e:	605a      	str	r2, [r3, #4]
	return 0;
 8004a90:	2300      	movs	r3, #0
}
 8004a92:	4618      	mov	r0, r3
 8004a94:	370c      	adds	r7, #12
 8004a96:	46bd      	mov	sp, r7
 8004a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a9c:	4770      	bx	lr

08004a9e <_isatty>:

int _isatty(int file)
{
 8004a9e:	b480      	push	{r7}
 8004aa0:	b083      	sub	sp, #12
 8004aa2:	af00      	add	r7, sp, #0
 8004aa4:	6078      	str	r0, [r7, #4]
	return 1;
 8004aa6:	2301      	movs	r3, #1
}
 8004aa8:	4618      	mov	r0, r3
 8004aaa:	370c      	adds	r7, #12
 8004aac:	46bd      	mov	sp, r7
 8004aae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ab2:	4770      	bx	lr

08004ab4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8004ab4:	b480      	push	{r7}
 8004ab6:	b085      	sub	sp, #20
 8004ab8:	af00      	add	r7, sp, #0
 8004aba:	60f8      	str	r0, [r7, #12]
 8004abc:	60b9      	str	r1, [r7, #8]
 8004abe:	607a      	str	r2, [r7, #4]
	return 0;
 8004ac0:	2300      	movs	r3, #0
}
 8004ac2:	4618      	mov	r0, r3
 8004ac4:	3714      	adds	r7, #20
 8004ac6:	46bd      	mov	sp, r7
 8004ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004acc:	4770      	bx	lr
	...

08004ad0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8004ad0:	b580      	push	{r7, lr}
 8004ad2:	b086      	sub	sp, #24
 8004ad4:	af00      	add	r7, sp, #0
 8004ad6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8004ad8:	4a14      	ldr	r2, [pc, #80]	; (8004b2c <_sbrk+0x5c>)
 8004ada:	4b15      	ldr	r3, [pc, #84]	; (8004b30 <_sbrk+0x60>)
 8004adc:	1ad3      	subs	r3, r2, r3
 8004ade:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8004ae0:	697b      	ldr	r3, [r7, #20]
 8004ae2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8004ae4:	4b13      	ldr	r3, [pc, #76]	; (8004b34 <_sbrk+0x64>)
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	2b00      	cmp	r3, #0
 8004aea:	d102      	bne.n	8004af2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8004aec:	4b11      	ldr	r3, [pc, #68]	; (8004b34 <_sbrk+0x64>)
 8004aee:	4a12      	ldr	r2, [pc, #72]	; (8004b38 <_sbrk+0x68>)
 8004af0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8004af2:	4b10      	ldr	r3, [pc, #64]	; (8004b34 <_sbrk+0x64>)
 8004af4:	681a      	ldr	r2, [r3, #0]
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	4413      	add	r3, r2
 8004afa:	693a      	ldr	r2, [r7, #16]
 8004afc:	429a      	cmp	r2, r3
 8004afe:	d207      	bcs.n	8004b10 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8004b00:	f015 fe5c 	bl	801a7bc <__errno>
 8004b04:	4602      	mov	r2, r0
 8004b06:	230c      	movs	r3, #12
 8004b08:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 8004b0a:	f04f 33ff 	mov.w	r3, #4294967295
 8004b0e:	e009      	b.n	8004b24 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8004b10:	4b08      	ldr	r3, [pc, #32]	; (8004b34 <_sbrk+0x64>)
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8004b16:	4b07      	ldr	r3, [pc, #28]	; (8004b34 <_sbrk+0x64>)
 8004b18:	681a      	ldr	r2, [r3, #0]
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	4413      	add	r3, r2
 8004b1e:	4a05      	ldr	r2, [pc, #20]	; (8004b34 <_sbrk+0x64>)
 8004b20:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8004b22:	68fb      	ldr	r3, [r7, #12]
}
 8004b24:	4618      	mov	r0, r3
 8004b26:	3718      	adds	r7, #24
 8004b28:	46bd      	mov	sp, r7
 8004b2a:	bd80      	pop	{r7, pc}
 8004b2c:	24080000 	.word	0x24080000
 8004b30:	00000400 	.word	0x00000400
 8004b34:	240404c0 	.word	0x240404c0
 8004b38:	24045750 	.word	0x24045750

08004b3c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8004b3c:	b480      	push	{r7}
 8004b3e:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8004b40:	4b39      	ldr	r3, [pc, #228]	; (8004c28 <SystemInit+0xec>)
 8004b42:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004b46:	4a38      	ldr	r2, [pc, #224]	; (8004c28 <SystemInit+0xec>)
 8004b48:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004b4c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8004b50:	4b36      	ldr	r3, [pc, #216]	; (8004c2c <SystemInit+0xf0>)
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	f003 030f 	and.w	r3, r3, #15
 8004b58:	2b06      	cmp	r3, #6
 8004b5a:	d807      	bhi.n	8004b6c <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8004b5c:	4b33      	ldr	r3, [pc, #204]	; (8004c2c <SystemInit+0xf0>)
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	f023 030f 	bic.w	r3, r3, #15
 8004b64:	4a31      	ldr	r2, [pc, #196]	; (8004c2c <SystemInit+0xf0>)
 8004b66:	f043 0307 	orr.w	r3, r3, #7
 8004b6a:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8004b6c:	4b30      	ldr	r3, [pc, #192]	; (8004c30 <SystemInit+0xf4>)
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	4a2f      	ldr	r2, [pc, #188]	; (8004c30 <SystemInit+0xf4>)
 8004b72:	f043 0301 	orr.w	r3, r3, #1
 8004b76:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8004b78:	4b2d      	ldr	r3, [pc, #180]	; (8004c30 <SystemInit+0xf4>)
 8004b7a:	2200      	movs	r2, #0
 8004b7c:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8004b7e:	4b2c      	ldr	r3, [pc, #176]	; (8004c30 <SystemInit+0xf4>)
 8004b80:	681a      	ldr	r2, [r3, #0]
 8004b82:	492b      	ldr	r1, [pc, #172]	; (8004c30 <SystemInit+0xf4>)
 8004b84:	4b2b      	ldr	r3, [pc, #172]	; (8004c34 <SystemInit+0xf8>)
 8004b86:	4013      	ands	r3, r2
 8004b88:	600b      	str	r3, [r1, #0]
  
   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8004b8a:	4b28      	ldr	r3, [pc, #160]	; (8004c2c <SystemInit+0xf0>)
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	f003 030f 	and.w	r3, r3, #15
 8004b92:	2b07      	cmp	r3, #7
 8004b94:	d907      	bls.n	8004ba6 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8004b96:	4b25      	ldr	r3, [pc, #148]	; (8004c2c <SystemInit+0xf0>)
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	f023 030f 	bic.w	r3, r3, #15
 8004b9e:	4a23      	ldr	r2, [pc, #140]	; (8004c2c <SystemInit+0xf0>)
 8004ba0:	f043 0307 	orr.w	r3, r3, #7
 8004ba4:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8004ba6:	4b22      	ldr	r3, [pc, #136]	; (8004c30 <SystemInit+0xf4>)
 8004ba8:	2200      	movs	r2, #0
 8004baa:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8004bac:	4b20      	ldr	r3, [pc, #128]	; (8004c30 <SystemInit+0xf4>)
 8004bae:	2200      	movs	r2, #0
 8004bb0:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8004bb2:	4b1f      	ldr	r3, [pc, #124]	; (8004c30 <SystemInit+0xf4>)
 8004bb4:	2200      	movs	r2, #0
 8004bb6:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8004bb8:	4b1d      	ldr	r3, [pc, #116]	; (8004c30 <SystemInit+0xf4>)
 8004bba:	4a1f      	ldr	r2, [pc, #124]	; (8004c38 <SystemInit+0xfc>)
 8004bbc:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8004bbe:	4b1c      	ldr	r3, [pc, #112]	; (8004c30 <SystemInit+0xf4>)
 8004bc0:	4a1e      	ldr	r2, [pc, #120]	; (8004c3c <SystemInit+0x100>)
 8004bc2:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8004bc4:	4b1a      	ldr	r3, [pc, #104]	; (8004c30 <SystemInit+0xf4>)
 8004bc6:	4a1e      	ldr	r2, [pc, #120]	; (8004c40 <SystemInit+0x104>)
 8004bc8:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8004bca:	4b19      	ldr	r3, [pc, #100]	; (8004c30 <SystemInit+0xf4>)
 8004bcc:	2200      	movs	r2, #0
 8004bce:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8004bd0:	4b17      	ldr	r3, [pc, #92]	; (8004c30 <SystemInit+0xf4>)
 8004bd2:	4a1b      	ldr	r2, [pc, #108]	; (8004c40 <SystemInit+0x104>)
 8004bd4:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8004bd6:	4b16      	ldr	r3, [pc, #88]	; (8004c30 <SystemInit+0xf4>)
 8004bd8:	2200      	movs	r2, #0
 8004bda:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8004bdc:	4b14      	ldr	r3, [pc, #80]	; (8004c30 <SystemInit+0xf4>)
 8004bde:	4a18      	ldr	r2, [pc, #96]	; (8004c40 <SystemInit+0x104>)
 8004be0:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8004be2:	4b13      	ldr	r3, [pc, #76]	; (8004c30 <SystemInit+0xf4>)
 8004be4:	2200      	movs	r2, #0
 8004be6:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8004be8:	4b11      	ldr	r3, [pc, #68]	; (8004c30 <SystemInit+0xf4>)
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	4a10      	ldr	r2, [pc, #64]	; (8004c30 <SystemInit+0xf4>)
 8004bee:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004bf2:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8004bf4:	4b0e      	ldr	r3, [pc, #56]	; (8004c30 <SystemInit+0xf4>)
 8004bf6:	2200      	movs	r2, #0
 8004bf8:	661a      	str	r2, [r3, #96]	; 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8004bfa:	4b12      	ldr	r3, [pc, #72]	; (8004c44 <SystemInit+0x108>)
 8004bfc:	681a      	ldr	r2, [r3, #0]
 8004bfe:	4b12      	ldr	r3, [pc, #72]	; (8004c48 <SystemInit+0x10c>)
 8004c00:	4013      	ands	r3, r2
 8004c02:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004c06:	d202      	bcs.n	8004c0e <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8004c08:	4b10      	ldr	r3, [pc, #64]	; (8004c4c <SystemInit+0x110>)
 8004c0a:	2201      	movs	r2, #1
 8004c0c:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8004c0e:	4b10      	ldr	r3, [pc, #64]	; (8004c50 <SystemInit+0x114>)
 8004c10:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8004c14:	601a      	str	r2, [r3, #0]

  /* Configure the Vector Table location add offset address for cortex-M7 ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D1_AXISRAM_BASE  | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal AXI-RAM */
#else
  SCB->VTOR = FLASH_BANK1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8004c16:	4b04      	ldr	r3, [pc, #16]	; (8004c28 <SystemInit+0xec>)
 8004c18:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8004c1c:	609a      	str	r2, [r3, #8]
#endif

#endif /*DUAL_CORE && CORE_CM4*/

}
 8004c1e:	bf00      	nop
 8004c20:	46bd      	mov	sp, r7
 8004c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c26:	4770      	bx	lr
 8004c28:	e000ed00 	.word	0xe000ed00
 8004c2c:	52002000 	.word	0x52002000
 8004c30:	58024400 	.word	0x58024400
 8004c34:	eaf6ed7f 	.word	0xeaf6ed7f
 8004c38:	02020200 	.word	0x02020200
 8004c3c:	01ff0000 	.word	0x01ff0000
 8004c40:	01010280 	.word	0x01010280
 8004c44:	5c001000 	.word	0x5c001000
 8004c48:	ffff0000 	.word	0xffff0000
 8004c4c:	51008108 	.word	0x51008108
 8004c50:	52004000 	.word	0x52004000

08004c54 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8004c54:	f8df d034 	ldr.w	sp, [pc, #52]	; 8004c8c <LoopFillZerobss+0x10>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8004c58:	f7ff ff70 	bl	8004b3c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8004c5c:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8004c5e:	e003      	b.n	8004c68 <LoopCopyDataInit>

08004c60 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8004c60:	4b0b      	ldr	r3, [pc, #44]	; (8004c90 <LoopFillZerobss+0x14>)
  ldr  r3, [r3, r1]
 8004c62:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8004c64:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8004c66:	3104      	adds	r1, #4

08004c68 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8004c68:	480a      	ldr	r0, [pc, #40]	; (8004c94 <LoopFillZerobss+0x18>)
  ldr  r3, =_edata
 8004c6a:	4b0b      	ldr	r3, [pc, #44]	; (8004c98 <LoopFillZerobss+0x1c>)
  adds  r2, r0, r1
 8004c6c:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8004c6e:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8004c70:	d3f6      	bcc.n	8004c60 <CopyDataInit>
  ldr  r2, =_sbss
 8004c72:	4a0a      	ldr	r2, [pc, #40]	; (8004c9c <LoopFillZerobss+0x20>)
  b  LoopFillZerobss
 8004c74:	e002      	b.n	8004c7c <LoopFillZerobss>

08004c76 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8004c76:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8004c78:	f842 3b04 	str.w	r3, [r2], #4

08004c7c <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8004c7c:	4b08      	ldr	r3, [pc, #32]	; (8004ca0 <LoopFillZerobss+0x24>)
  cmp  r2, r3
 8004c7e:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8004c80:	d3f9      	bcc.n	8004c76 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8004c82:	f015 fda1 	bl	801a7c8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8004c86:	f7fd fbdd 	bl	8002444 <main>
  bx  lr    
 8004c8a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8004c8c:	24080000 	.word	0x24080000
  ldr  r3, =_sidata
 8004c90:	0801c7e4 	.word	0x0801c7e4
  ldr  r0, =_sdata
 8004c94:	24000000 	.word	0x24000000
  ldr  r3, =_edata
 8004c98:	2400034c 	.word	0x2400034c
  ldr  r2, =_sbss
 8004c9c:	24000350 	.word	0x24000350
  ldr  r3, = _ebss
 8004ca0:	2404574c 	.word	0x2404574c

08004ca4 <ADC3_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8004ca4:	e7fe      	b.n	8004ca4 <ADC3_IRQHandler>
	...

08004ca8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004ca8:	b580      	push	{r7, lr}
 8004caa:	b082      	sub	sp, #8
 8004cac:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004cae:	2003      	movs	r0, #3
 8004cb0:	f000 f98a 	bl	8004fc8 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8004cb4:	f005 ff1c 	bl	800aaf0 <HAL_RCC_GetSysClockFreq>
 8004cb8:	4601      	mov	r1, r0
 8004cba:	4b15      	ldr	r3, [pc, #84]	; (8004d10 <HAL_Init+0x68>)
 8004cbc:	699b      	ldr	r3, [r3, #24]
 8004cbe:	0a1b      	lsrs	r3, r3, #8
 8004cc0:	f003 030f 	and.w	r3, r3, #15
 8004cc4:	4a13      	ldr	r2, [pc, #76]	; (8004d14 <HAL_Init+0x6c>)
 8004cc6:	5cd3      	ldrb	r3, [r2, r3]
 8004cc8:	f003 031f 	and.w	r3, r3, #31
 8004ccc:	fa21 f303 	lsr.w	r3, r1, r3
 8004cd0:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8004cd2:	4b0f      	ldr	r3, [pc, #60]	; (8004d10 <HAL_Init+0x68>)
 8004cd4:	699b      	ldr	r3, [r3, #24]
 8004cd6:	f003 030f 	and.w	r3, r3, #15
 8004cda:	4a0e      	ldr	r2, [pc, #56]	; (8004d14 <HAL_Init+0x6c>)
 8004cdc:	5cd3      	ldrb	r3, [r2, r3]
 8004cde:	f003 031f 	and.w	r3, r3, #31
 8004ce2:	687a      	ldr	r2, [r7, #4]
 8004ce4:	fa22 f303 	lsr.w	r3, r2, r3
 8004ce8:	4a0b      	ldr	r2, [pc, #44]	; (8004d18 <HAL_Init+0x70>)
 8004cea:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8004cec:	4a0b      	ldr	r2, [pc, #44]	; (8004d1c <HAL_Init+0x74>)
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8004cf2:	2000      	movs	r0, #0
 8004cf4:	f000 f814 	bl	8004d20 <HAL_InitTick>
 8004cf8:	4603      	mov	r3, r0
 8004cfa:	2b00      	cmp	r3, #0
 8004cfc:	d001      	beq.n	8004d02 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8004cfe:	2301      	movs	r3, #1
 8004d00:	e002      	b.n	8004d08 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8004d02:	f7ff fbbf 	bl	8004484 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8004d06:	2300      	movs	r3, #0
}
 8004d08:	4618      	mov	r0, r3
 8004d0a:	3708      	adds	r7, #8
 8004d0c:	46bd      	mov	sp, r7
 8004d0e:	bd80      	pop	{r7, pc}
 8004d10:	58024400 	.word	0x58024400
 8004d14:	0801c4f4 	.word	0x0801c4f4
 8004d18:	24000014 	.word	0x24000014
 8004d1c:	24000010 	.word	0x24000010

08004d20 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004d20:	b580      	push	{r7, lr}
 8004d22:	b082      	sub	sp, #8
 8004d24:	af00      	add	r7, sp, #0
 8004d26:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8004d28:	4b15      	ldr	r3, [pc, #84]	; (8004d80 <HAL_InitTick+0x60>)
 8004d2a:	781b      	ldrb	r3, [r3, #0]
 8004d2c:	2b00      	cmp	r3, #0
 8004d2e:	d101      	bne.n	8004d34 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8004d30:	2301      	movs	r3, #1
 8004d32:	e021      	b.n	8004d78 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8004d34:	4b13      	ldr	r3, [pc, #76]	; (8004d84 <HAL_InitTick+0x64>)
 8004d36:	681a      	ldr	r2, [r3, #0]
 8004d38:	4b11      	ldr	r3, [pc, #68]	; (8004d80 <HAL_InitTick+0x60>)
 8004d3a:	781b      	ldrb	r3, [r3, #0]
 8004d3c:	4619      	mov	r1, r3
 8004d3e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004d42:	fbb3 f3f1 	udiv	r3, r3, r1
 8004d46:	fbb2 f3f3 	udiv	r3, r2, r3
 8004d4a:	4618      	mov	r0, r3
 8004d4c:	f000 f96f 	bl	800502e <HAL_SYSTICK_Config>
 8004d50:	4603      	mov	r3, r0
 8004d52:	2b00      	cmp	r3, #0
 8004d54:	d001      	beq.n	8004d5a <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8004d56:	2301      	movs	r3, #1
 8004d58:	e00e      	b.n	8004d78 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	2b0f      	cmp	r3, #15
 8004d5e:	d80a      	bhi.n	8004d76 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8004d60:	2200      	movs	r2, #0
 8004d62:	6879      	ldr	r1, [r7, #4]
 8004d64:	f04f 30ff 	mov.w	r0, #4294967295
 8004d68:	f000 f939 	bl	8004fde <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8004d6c:	4a06      	ldr	r2, [pc, #24]	; (8004d88 <HAL_InitTick+0x68>)
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8004d72:	2300      	movs	r3, #0
 8004d74:	e000      	b.n	8004d78 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8004d76:	2301      	movs	r3, #1
}
 8004d78:	4618      	mov	r0, r3
 8004d7a:	3708      	adds	r7, #8
 8004d7c:	46bd      	mov	sp, r7
 8004d7e:	bd80      	pop	{r7, pc}
 8004d80:	2400001c 	.word	0x2400001c
 8004d84:	24000010 	.word	0x24000010
 8004d88:	24000018 	.word	0x24000018

08004d8c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004d8c:	b480      	push	{r7}
 8004d8e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8004d90:	4b06      	ldr	r3, [pc, #24]	; (8004dac <HAL_IncTick+0x20>)
 8004d92:	781b      	ldrb	r3, [r3, #0]
 8004d94:	461a      	mov	r2, r3
 8004d96:	4b06      	ldr	r3, [pc, #24]	; (8004db0 <HAL_IncTick+0x24>)
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	4413      	add	r3, r2
 8004d9c:	4a04      	ldr	r2, [pc, #16]	; (8004db0 <HAL_IncTick+0x24>)
 8004d9e:	6013      	str	r3, [r2, #0]
}
 8004da0:	bf00      	nop
 8004da2:	46bd      	mov	sp, r7
 8004da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004da8:	4770      	bx	lr
 8004daa:	bf00      	nop
 8004dac:	2400001c 	.word	0x2400001c
 8004db0:	24044a04 	.word	0x24044a04

08004db4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004db4:	b480      	push	{r7}
 8004db6:	af00      	add	r7, sp, #0
  return uwTick;
 8004db8:	4b03      	ldr	r3, [pc, #12]	; (8004dc8 <HAL_GetTick+0x14>)
 8004dba:	681b      	ldr	r3, [r3, #0]
}
 8004dbc:	4618      	mov	r0, r3
 8004dbe:	46bd      	mov	sp, r7
 8004dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dc4:	4770      	bx	lr
 8004dc6:	bf00      	nop
 8004dc8:	24044a04 	.word	0x24044a04

08004dcc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8004dcc:	b580      	push	{r7, lr}
 8004dce:	b084      	sub	sp, #16
 8004dd0:	af00      	add	r7, sp, #0
 8004dd2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8004dd4:	f7ff ffee 	bl	8004db4 <HAL_GetTick>
 8004dd8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8004dde:	68fb      	ldr	r3, [r7, #12]
 8004de0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004de4:	d005      	beq.n	8004df2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8004de6:	4b09      	ldr	r3, [pc, #36]	; (8004e0c <HAL_Delay+0x40>)
 8004de8:	781b      	ldrb	r3, [r3, #0]
 8004dea:	461a      	mov	r2, r3
 8004dec:	68fb      	ldr	r3, [r7, #12]
 8004dee:	4413      	add	r3, r2
 8004df0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8004df2:	bf00      	nop
 8004df4:	f7ff ffde 	bl	8004db4 <HAL_GetTick>
 8004df8:	4602      	mov	r2, r0
 8004dfa:	68bb      	ldr	r3, [r7, #8]
 8004dfc:	1ad3      	subs	r3, r2, r3
 8004dfe:	68fa      	ldr	r2, [r7, #12]
 8004e00:	429a      	cmp	r2, r3
 8004e02:	d8f7      	bhi.n	8004df4 <HAL_Delay+0x28>
  {
  }
}
 8004e04:	bf00      	nop
 8004e06:	3710      	adds	r7, #16
 8004e08:	46bd      	mov	sp, r7
 8004e0a:	bd80      	pop	{r7, pc}
 8004e0c:	2400001c 	.word	0x2400001c

08004e10 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8004e10:	b480      	push	{r7}
 8004e12:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8004e14:	4b03      	ldr	r3, [pc, #12]	; (8004e24 <HAL_GetREVID+0x14>)
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	0c1b      	lsrs	r3, r3, #16
}
 8004e1a:	4618      	mov	r0, r3
 8004e1c:	46bd      	mov	sp, r7
 8004e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e22:	4770      	bx	lr
 8004e24:	5c001000 	.word	0x5c001000

08004e28 <__NVIC_SetPriorityGrouping>:
{
 8004e28:	b480      	push	{r7}
 8004e2a:	b085      	sub	sp, #20
 8004e2c:	af00      	add	r7, sp, #0
 8004e2e:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	f003 0307 	and.w	r3, r3, #7
 8004e36:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004e38:	4b0b      	ldr	r3, [pc, #44]	; (8004e68 <__NVIC_SetPriorityGrouping+0x40>)
 8004e3a:	68db      	ldr	r3, [r3, #12]
 8004e3c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004e3e:	68ba      	ldr	r2, [r7, #8]
 8004e40:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8004e44:	4013      	ands	r3, r2
 8004e46:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004e48:	68fb      	ldr	r3, [r7, #12]
 8004e4a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004e4c:	68bb      	ldr	r3, [r7, #8]
 8004e4e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8004e50:	4b06      	ldr	r3, [pc, #24]	; (8004e6c <__NVIC_SetPriorityGrouping+0x44>)
 8004e52:	4313      	orrs	r3, r2
 8004e54:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004e56:	4a04      	ldr	r2, [pc, #16]	; (8004e68 <__NVIC_SetPriorityGrouping+0x40>)
 8004e58:	68bb      	ldr	r3, [r7, #8]
 8004e5a:	60d3      	str	r3, [r2, #12]
}
 8004e5c:	bf00      	nop
 8004e5e:	3714      	adds	r7, #20
 8004e60:	46bd      	mov	sp, r7
 8004e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e66:	4770      	bx	lr
 8004e68:	e000ed00 	.word	0xe000ed00
 8004e6c:	05fa0000 	.word	0x05fa0000

08004e70 <__NVIC_GetPriorityGrouping>:
{
 8004e70:	b480      	push	{r7}
 8004e72:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004e74:	4b04      	ldr	r3, [pc, #16]	; (8004e88 <__NVIC_GetPriorityGrouping+0x18>)
 8004e76:	68db      	ldr	r3, [r3, #12]
 8004e78:	0a1b      	lsrs	r3, r3, #8
 8004e7a:	f003 0307 	and.w	r3, r3, #7
}
 8004e7e:	4618      	mov	r0, r3
 8004e80:	46bd      	mov	sp, r7
 8004e82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e86:	4770      	bx	lr
 8004e88:	e000ed00 	.word	0xe000ed00

08004e8c <__NVIC_EnableIRQ>:
{
 8004e8c:	b480      	push	{r7}
 8004e8e:	b083      	sub	sp, #12
 8004e90:	af00      	add	r7, sp, #0
 8004e92:	4603      	mov	r3, r0
 8004e94:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8004e96:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004e9a:	2b00      	cmp	r3, #0
 8004e9c:	db0b      	blt.n	8004eb6 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004e9e:	88fb      	ldrh	r3, [r7, #6]
 8004ea0:	f003 021f 	and.w	r2, r3, #31
 8004ea4:	4907      	ldr	r1, [pc, #28]	; (8004ec4 <__NVIC_EnableIRQ+0x38>)
 8004ea6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004eaa:	095b      	lsrs	r3, r3, #5
 8004eac:	2001      	movs	r0, #1
 8004eae:	fa00 f202 	lsl.w	r2, r0, r2
 8004eb2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8004eb6:	bf00      	nop
 8004eb8:	370c      	adds	r7, #12
 8004eba:	46bd      	mov	sp, r7
 8004ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ec0:	4770      	bx	lr
 8004ec2:	bf00      	nop
 8004ec4:	e000e100 	.word	0xe000e100

08004ec8 <__NVIC_SetPriority>:
{
 8004ec8:	b480      	push	{r7}
 8004eca:	b083      	sub	sp, #12
 8004ecc:	af00      	add	r7, sp, #0
 8004ece:	4603      	mov	r3, r0
 8004ed0:	6039      	str	r1, [r7, #0]
 8004ed2:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8004ed4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004ed8:	2b00      	cmp	r3, #0
 8004eda:	db0a      	blt.n	8004ef2 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004edc:	683b      	ldr	r3, [r7, #0]
 8004ede:	b2da      	uxtb	r2, r3
 8004ee0:	490c      	ldr	r1, [pc, #48]	; (8004f14 <__NVIC_SetPriority+0x4c>)
 8004ee2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004ee6:	0112      	lsls	r2, r2, #4
 8004ee8:	b2d2      	uxtb	r2, r2
 8004eea:	440b      	add	r3, r1
 8004eec:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8004ef0:	e00a      	b.n	8004f08 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004ef2:	683b      	ldr	r3, [r7, #0]
 8004ef4:	b2da      	uxtb	r2, r3
 8004ef6:	4908      	ldr	r1, [pc, #32]	; (8004f18 <__NVIC_SetPriority+0x50>)
 8004ef8:	88fb      	ldrh	r3, [r7, #6]
 8004efa:	f003 030f 	and.w	r3, r3, #15
 8004efe:	3b04      	subs	r3, #4
 8004f00:	0112      	lsls	r2, r2, #4
 8004f02:	b2d2      	uxtb	r2, r2
 8004f04:	440b      	add	r3, r1
 8004f06:	761a      	strb	r2, [r3, #24]
}
 8004f08:	bf00      	nop
 8004f0a:	370c      	adds	r7, #12
 8004f0c:	46bd      	mov	sp, r7
 8004f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f12:	4770      	bx	lr
 8004f14:	e000e100 	.word	0xe000e100
 8004f18:	e000ed00 	.word	0xe000ed00

08004f1c <NVIC_EncodePriority>:
{
 8004f1c:	b480      	push	{r7}
 8004f1e:	b089      	sub	sp, #36	; 0x24
 8004f20:	af00      	add	r7, sp, #0
 8004f22:	60f8      	str	r0, [r7, #12]
 8004f24:	60b9      	str	r1, [r7, #8]
 8004f26:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004f28:	68fb      	ldr	r3, [r7, #12]
 8004f2a:	f003 0307 	and.w	r3, r3, #7
 8004f2e:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004f30:	69fb      	ldr	r3, [r7, #28]
 8004f32:	f1c3 0307 	rsb	r3, r3, #7
 8004f36:	2b04      	cmp	r3, #4
 8004f38:	bf28      	it	cs
 8004f3a:	2304      	movcs	r3, #4
 8004f3c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004f3e:	69fb      	ldr	r3, [r7, #28]
 8004f40:	3304      	adds	r3, #4
 8004f42:	2b06      	cmp	r3, #6
 8004f44:	d902      	bls.n	8004f4c <NVIC_EncodePriority+0x30>
 8004f46:	69fb      	ldr	r3, [r7, #28]
 8004f48:	3b03      	subs	r3, #3
 8004f4a:	e000      	b.n	8004f4e <NVIC_EncodePriority+0x32>
 8004f4c:	2300      	movs	r3, #0
 8004f4e:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004f50:	f04f 32ff 	mov.w	r2, #4294967295
 8004f54:	69bb      	ldr	r3, [r7, #24]
 8004f56:	fa02 f303 	lsl.w	r3, r2, r3
 8004f5a:	43da      	mvns	r2, r3
 8004f5c:	68bb      	ldr	r3, [r7, #8]
 8004f5e:	401a      	ands	r2, r3
 8004f60:	697b      	ldr	r3, [r7, #20]
 8004f62:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004f64:	f04f 31ff 	mov.w	r1, #4294967295
 8004f68:	697b      	ldr	r3, [r7, #20]
 8004f6a:	fa01 f303 	lsl.w	r3, r1, r3
 8004f6e:	43d9      	mvns	r1, r3
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004f74:	4313      	orrs	r3, r2
}
 8004f76:	4618      	mov	r0, r3
 8004f78:	3724      	adds	r7, #36	; 0x24
 8004f7a:	46bd      	mov	sp, r7
 8004f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f80:	4770      	bx	lr
	...

08004f84 <SysTick_Config>:
{
 8004f84:	b580      	push	{r7, lr}
 8004f86:	b082      	sub	sp, #8
 8004f88:	af00      	add	r7, sp, #0
 8004f8a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	3b01      	subs	r3, #1
 8004f90:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004f94:	d301      	bcc.n	8004f9a <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 8004f96:	2301      	movs	r3, #1
 8004f98:	e00f      	b.n	8004fba <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004f9a:	4a0a      	ldr	r2, [pc, #40]	; (8004fc4 <SysTick_Config+0x40>)
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	3b01      	subs	r3, #1
 8004fa0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004fa2:	210f      	movs	r1, #15
 8004fa4:	f04f 30ff 	mov.w	r0, #4294967295
 8004fa8:	f7ff ff8e 	bl	8004ec8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004fac:	4b05      	ldr	r3, [pc, #20]	; (8004fc4 <SysTick_Config+0x40>)
 8004fae:	2200      	movs	r2, #0
 8004fb0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004fb2:	4b04      	ldr	r3, [pc, #16]	; (8004fc4 <SysTick_Config+0x40>)
 8004fb4:	2207      	movs	r2, #7
 8004fb6:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 8004fb8:	2300      	movs	r3, #0
}
 8004fba:	4618      	mov	r0, r3
 8004fbc:	3708      	adds	r7, #8
 8004fbe:	46bd      	mov	sp, r7
 8004fc0:	bd80      	pop	{r7, pc}
 8004fc2:	bf00      	nop
 8004fc4:	e000e010 	.word	0xe000e010

08004fc8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004fc8:	b580      	push	{r7, lr}
 8004fca:	b082      	sub	sp, #8
 8004fcc:	af00      	add	r7, sp, #0
 8004fce:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004fd0:	6878      	ldr	r0, [r7, #4]
 8004fd2:	f7ff ff29 	bl	8004e28 <__NVIC_SetPriorityGrouping>
}
 8004fd6:	bf00      	nop
 8004fd8:	3708      	adds	r7, #8
 8004fda:	46bd      	mov	sp, r7
 8004fdc:	bd80      	pop	{r7, pc}

08004fde <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004fde:	b580      	push	{r7, lr}
 8004fe0:	b086      	sub	sp, #24
 8004fe2:	af00      	add	r7, sp, #0
 8004fe4:	4603      	mov	r3, r0
 8004fe6:	60b9      	str	r1, [r7, #8]
 8004fe8:	607a      	str	r2, [r7, #4]
 8004fea:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8004fec:	f7ff ff40 	bl	8004e70 <__NVIC_GetPriorityGrouping>
 8004ff0:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004ff2:	687a      	ldr	r2, [r7, #4]
 8004ff4:	68b9      	ldr	r1, [r7, #8]
 8004ff6:	6978      	ldr	r0, [r7, #20]
 8004ff8:	f7ff ff90 	bl	8004f1c <NVIC_EncodePriority>
 8004ffc:	4602      	mov	r2, r0
 8004ffe:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8005002:	4611      	mov	r1, r2
 8005004:	4618      	mov	r0, r3
 8005006:	f7ff ff5f 	bl	8004ec8 <__NVIC_SetPriority>
}
 800500a:	bf00      	nop
 800500c:	3718      	adds	r7, #24
 800500e:	46bd      	mov	sp, r7
 8005010:	bd80      	pop	{r7, pc}

08005012 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005012:	b580      	push	{r7, lr}
 8005014:	b082      	sub	sp, #8
 8005016:	af00      	add	r7, sp, #0
 8005018:	4603      	mov	r3, r0
 800501a:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800501c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005020:	4618      	mov	r0, r3
 8005022:	f7ff ff33 	bl	8004e8c <__NVIC_EnableIRQ>
}
 8005026:	bf00      	nop
 8005028:	3708      	adds	r7, #8
 800502a:	46bd      	mov	sp, r7
 800502c:	bd80      	pop	{r7, pc}

0800502e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800502e:	b580      	push	{r7, lr}
 8005030:	b082      	sub	sp, #8
 8005032:	af00      	add	r7, sp, #0
 8005034:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8005036:	6878      	ldr	r0, [r7, #4]
 8005038:	f7ff ffa4 	bl	8004f84 <SysTick_Config>
 800503c:	4603      	mov	r3, r0
}
 800503e:	4618      	mov	r0, r3
 8005040:	3708      	adds	r7, #8
 8005042:	46bd      	mov	sp, r7
 8005044:	bd80      	pop	{r7, pc}
	...

08005048 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8005048:	b580      	push	{r7, lr}
 800504a:	b086      	sub	sp, #24
 800504c:	af00      	add	r7, sp, #0
 800504e:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 8005050:	f7ff feb0 	bl	8004db4 <HAL_GetTick>
 8005054:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	2b00      	cmp	r3, #0
 800505a:	d101      	bne.n	8005060 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 800505c:	2301      	movs	r3, #1
 800505e:	e316      	b.n	800568e <HAL_DMA_Init+0x646>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	4a66      	ldr	r2, [pc, #408]	; (8005200 <HAL_DMA_Init+0x1b8>)
 8005066:	4293      	cmp	r3, r2
 8005068:	d04a      	beq.n	8005100 <HAL_DMA_Init+0xb8>
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	4a65      	ldr	r2, [pc, #404]	; (8005204 <HAL_DMA_Init+0x1bc>)
 8005070:	4293      	cmp	r3, r2
 8005072:	d045      	beq.n	8005100 <HAL_DMA_Init+0xb8>
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	4a63      	ldr	r2, [pc, #396]	; (8005208 <HAL_DMA_Init+0x1c0>)
 800507a:	4293      	cmp	r3, r2
 800507c:	d040      	beq.n	8005100 <HAL_DMA_Init+0xb8>
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	4a62      	ldr	r2, [pc, #392]	; (800520c <HAL_DMA_Init+0x1c4>)
 8005084:	4293      	cmp	r3, r2
 8005086:	d03b      	beq.n	8005100 <HAL_DMA_Init+0xb8>
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	4a60      	ldr	r2, [pc, #384]	; (8005210 <HAL_DMA_Init+0x1c8>)
 800508e:	4293      	cmp	r3, r2
 8005090:	d036      	beq.n	8005100 <HAL_DMA_Init+0xb8>
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	681b      	ldr	r3, [r3, #0]
 8005096:	4a5f      	ldr	r2, [pc, #380]	; (8005214 <HAL_DMA_Init+0x1cc>)
 8005098:	4293      	cmp	r3, r2
 800509a:	d031      	beq.n	8005100 <HAL_DMA_Init+0xb8>
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	4a5d      	ldr	r2, [pc, #372]	; (8005218 <HAL_DMA_Init+0x1d0>)
 80050a2:	4293      	cmp	r3, r2
 80050a4:	d02c      	beq.n	8005100 <HAL_DMA_Init+0xb8>
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	681b      	ldr	r3, [r3, #0]
 80050aa:	4a5c      	ldr	r2, [pc, #368]	; (800521c <HAL_DMA_Init+0x1d4>)
 80050ac:	4293      	cmp	r3, r2
 80050ae:	d027      	beq.n	8005100 <HAL_DMA_Init+0xb8>
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	4a5a      	ldr	r2, [pc, #360]	; (8005220 <HAL_DMA_Init+0x1d8>)
 80050b6:	4293      	cmp	r3, r2
 80050b8:	d022      	beq.n	8005100 <HAL_DMA_Init+0xb8>
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	4a59      	ldr	r2, [pc, #356]	; (8005224 <HAL_DMA_Init+0x1dc>)
 80050c0:	4293      	cmp	r3, r2
 80050c2:	d01d      	beq.n	8005100 <HAL_DMA_Init+0xb8>
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	681b      	ldr	r3, [r3, #0]
 80050c8:	4a57      	ldr	r2, [pc, #348]	; (8005228 <HAL_DMA_Init+0x1e0>)
 80050ca:	4293      	cmp	r3, r2
 80050cc:	d018      	beq.n	8005100 <HAL_DMA_Init+0xb8>
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	681b      	ldr	r3, [r3, #0]
 80050d2:	4a56      	ldr	r2, [pc, #344]	; (800522c <HAL_DMA_Init+0x1e4>)
 80050d4:	4293      	cmp	r3, r2
 80050d6:	d013      	beq.n	8005100 <HAL_DMA_Init+0xb8>
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	4a54      	ldr	r2, [pc, #336]	; (8005230 <HAL_DMA_Init+0x1e8>)
 80050de:	4293      	cmp	r3, r2
 80050e0:	d00e      	beq.n	8005100 <HAL_DMA_Init+0xb8>
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	681b      	ldr	r3, [r3, #0]
 80050e6:	4a53      	ldr	r2, [pc, #332]	; (8005234 <HAL_DMA_Init+0x1ec>)
 80050e8:	4293      	cmp	r3, r2
 80050ea:	d009      	beq.n	8005100 <HAL_DMA_Init+0xb8>
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	4a51      	ldr	r2, [pc, #324]	; (8005238 <HAL_DMA_Init+0x1f0>)
 80050f2:	4293      	cmp	r3, r2
 80050f4:	d004      	beq.n	8005100 <HAL_DMA_Init+0xb8>
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	681b      	ldr	r3, [r3, #0]
 80050fa:	4a50      	ldr	r2, [pc, #320]	; (800523c <HAL_DMA_Init+0x1f4>)
 80050fc:	4293      	cmp	r3, r2
 80050fe:	d101      	bne.n	8005104 <HAL_DMA_Init+0xbc>
 8005100:	2301      	movs	r3, #1
 8005102:	e000      	b.n	8005106 <HAL_DMA_Init+0xbe>
 8005104:	2300      	movs	r3, #0
 8005106:	2b00      	cmp	r3, #0
 8005108:	f000 813b 	beq.w	8005382 <HAL_DMA_Init+0x33a>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	2200      	movs	r2, #0
 8005110:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	2202      	movs	r2, #2
 8005118:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	4a37      	ldr	r2, [pc, #220]	; (8005200 <HAL_DMA_Init+0x1b8>)
 8005122:	4293      	cmp	r3, r2
 8005124:	d04a      	beq.n	80051bc <HAL_DMA_Init+0x174>
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	681b      	ldr	r3, [r3, #0]
 800512a:	4a36      	ldr	r2, [pc, #216]	; (8005204 <HAL_DMA_Init+0x1bc>)
 800512c:	4293      	cmp	r3, r2
 800512e:	d045      	beq.n	80051bc <HAL_DMA_Init+0x174>
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	4a34      	ldr	r2, [pc, #208]	; (8005208 <HAL_DMA_Init+0x1c0>)
 8005136:	4293      	cmp	r3, r2
 8005138:	d040      	beq.n	80051bc <HAL_DMA_Init+0x174>
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	681b      	ldr	r3, [r3, #0]
 800513e:	4a33      	ldr	r2, [pc, #204]	; (800520c <HAL_DMA_Init+0x1c4>)
 8005140:	4293      	cmp	r3, r2
 8005142:	d03b      	beq.n	80051bc <HAL_DMA_Init+0x174>
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	4a31      	ldr	r2, [pc, #196]	; (8005210 <HAL_DMA_Init+0x1c8>)
 800514a:	4293      	cmp	r3, r2
 800514c:	d036      	beq.n	80051bc <HAL_DMA_Init+0x174>
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	681b      	ldr	r3, [r3, #0]
 8005152:	4a30      	ldr	r2, [pc, #192]	; (8005214 <HAL_DMA_Init+0x1cc>)
 8005154:	4293      	cmp	r3, r2
 8005156:	d031      	beq.n	80051bc <HAL_DMA_Init+0x174>
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	4a2e      	ldr	r2, [pc, #184]	; (8005218 <HAL_DMA_Init+0x1d0>)
 800515e:	4293      	cmp	r3, r2
 8005160:	d02c      	beq.n	80051bc <HAL_DMA_Init+0x174>
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	681b      	ldr	r3, [r3, #0]
 8005166:	4a2d      	ldr	r2, [pc, #180]	; (800521c <HAL_DMA_Init+0x1d4>)
 8005168:	4293      	cmp	r3, r2
 800516a:	d027      	beq.n	80051bc <HAL_DMA_Init+0x174>
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	4a2b      	ldr	r2, [pc, #172]	; (8005220 <HAL_DMA_Init+0x1d8>)
 8005172:	4293      	cmp	r3, r2
 8005174:	d022      	beq.n	80051bc <HAL_DMA_Init+0x174>
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	681b      	ldr	r3, [r3, #0]
 800517a:	4a2a      	ldr	r2, [pc, #168]	; (8005224 <HAL_DMA_Init+0x1dc>)
 800517c:	4293      	cmp	r3, r2
 800517e:	d01d      	beq.n	80051bc <HAL_DMA_Init+0x174>
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	4a28      	ldr	r2, [pc, #160]	; (8005228 <HAL_DMA_Init+0x1e0>)
 8005186:	4293      	cmp	r3, r2
 8005188:	d018      	beq.n	80051bc <HAL_DMA_Init+0x174>
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	681b      	ldr	r3, [r3, #0]
 800518e:	4a27      	ldr	r2, [pc, #156]	; (800522c <HAL_DMA_Init+0x1e4>)
 8005190:	4293      	cmp	r3, r2
 8005192:	d013      	beq.n	80051bc <HAL_DMA_Init+0x174>
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	681b      	ldr	r3, [r3, #0]
 8005198:	4a25      	ldr	r2, [pc, #148]	; (8005230 <HAL_DMA_Init+0x1e8>)
 800519a:	4293      	cmp	r3, r2
 800519c:	d00e      	beq.n	80051bc <HAL_DMA_Init+0x174>
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	681b      	ldr	r3, [r3, #0]
 80051a2:	4a24      	ldr	r2, [pc, #144]	; (8005234 <HAL_DMA_Init+0x1ec>)
 80051a4:	4293      	cmp	r3, r2
 80051a6:	d009      	beq.n	80051bc <HAL_DMA_Init+0x174>
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	4a22      	ldr	r2, [pc, #136]	; (8005238 <HAL_DMA_Init+0x1f0>)
 80051ae:	4293      	cmp	r3, r2
 80051b0:	d004      	beq.n	80051bc <HAL_DMA_Init+0x174>
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	681b      	ldr	r3, [r3, #0]
 80051b6:	4a21      	ldr	r2, [pc, #132]	; (800523c <HAL_DMA_Init+0x1f4>)
 80051b8:	4293      	cmp	r3, r2
 80051ba:	d108      	bne.n	80051ce <HAL_DMA_Init+0x186>
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	681b      	ldr	r3, [r3, #0]
 80051c0:	681a      	ldr	r2, [r3, #0]
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	681b      	ldr	r3, [r3, #0]
 80051c6:	f022 0201 	bic.w	r2, r2, #1
 80051ca:	601a      	str	r2, [r3, #0]
 80051cc:	e007      	b.n	80051de <HAL_DMA_Init+0x196>
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	681b      	ldr	r3, [r3, #0]
 80051d2:	681a      	ldr	r2, [r3, #0]
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	f022 0201 	bic.w	r2, r2, #1
 80051dc:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 80051de:	e02f      	b.n	8005240 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80051e0:	f7ff fde8 	bl	8004db4 <HAL_GetTick>
 80051e4:	4602      	mov	r2, r0
 80051e6:	693b      	ldr	r3, [r7, #16]
 80051e8:	1ad3      	subs	r3, r2, r3
 80051ea:	2b05      	cmp	r3, #5
 80051ec:	d928      	bls.n	8005240 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	2220      	movs	r2, #32
 80051f2:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	2203      	movs	r2, #3
 80051f8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 80051fc:	2301      	movs	r3, #1
 80051fe:	e246      	b.n	800568e <HAL_DMA_Init+0x646>
 8005200:	40020010 	.word	0x40020010
 8005204:	40020028 	.word	0x40020028
 8005208:	40020040 	.word	0x40020040
 800520c:	40020058 	.word	0x40020058
 8005210:	40020070 	.word	0x40020070
 8005214:	40020088 	.word	0x40020088
 8005218:	400200a0 	.word	0x400200a0
 800521c:	400200b8 	.word	0x400200b8
 8005220:	40020410 	.word	0x40020410
 8005224:	40020428 	.word	0x40020428
 8005228:	40020440 	.word	0x40020440
 800522c:	40020458 	.word	0x40020458
 8005230:	40020470 	.word	0x40020470
 8005234:	40020488 	.word	0x40020488
 8005238:	400204a0 	.word	0x400204a0
 800523c:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	f003 0301 	and.w	r3, r3, #1
 800524a:	2b00      	cmp	r3, #0
 800524c:	d1c8      	bne.n	80051e0 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	681b      	ldr	r3, [r3, #0]
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8005256:	697a      	ldr	r2, [r7, #20]
 8005258:	4b83      	ldr	r3, [pc, #524]	; (8005468 <HAL_DMA_Init+0x420>)
 800525a:	4013      	ands	r3, r2
 800525c:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 8005266:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	691b      	ldr	r3, [r3, #16]
 800526c:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005272:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	699b      	ldr	r3, [r3, #24]
 8005278:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800527e:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	6a1b      	ldr	r3, [r3, #32]
 8005284:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 8005286:	697a      	ldr	r2, [r7, #20]
 8005288:	4313      	orrs	r3, r2
 800528a:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005290:	2b04      	cmp	r3, #4
 8005292:	d107      	bne.n	80052a4 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800529c:	4313      	orrs	r3, r2
 800529e:	697a      	ldr	r2, [r7, #20]
 80052a0:	4313      	orrs	r3, r2
 80052a2:	617b      	str	r3, [r7, #20]
    }

    /* Work around for Errata 2.22: UART/USART- DMA transfer lock: DMA stream could be
                                    lock when transfering data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 80052a4:	4b71      	ldr	r3, [pc, #452]	; (800546c <HAL_DMA_Init+0x424>)
 80052a6:	681a      	ldr	r2, [r3, #0]
 80052a8:	4b71      	ldr	r3, [pc, #452]	; (8005470 <HAL_DMA_Init+0x428>)
 80052aa:	4013      	ands	r3, r2
 80052ac:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80052b0:	d328      	bcc.n	8005304 <HAL_DMA_Init+0x2bc>
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	685b      	ldr	r3, [r3, #4]
 80052b6:	2b28      	cmp	r3, #40	; 0x28
 80052b8:	d903      	bls.n	80052c2 <HAL_DMA_Init+0x27a>
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	685b      	ldr	r3, [r3, #4]
 80052be:	2b2e      	cmp	r3, #46	; 0x2e
 80052c0:	d917      	bls.n	80052f2 <HAL_DMA_Init+0x2aa>
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	685b      	ldr	r3, [r3, #4]
 80052c6:	2b3e      	cmp	r3, #62	; 0x3e
 80052c8:	d903      	bls.n	80052d2 <HAL_DMA_Init+0x28a>
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	685b      	ldr	r3, [r3, #4]
 80052ce:	2b42      	cmp	r3, #66	; 0x42
 80052d0:	d90f      	bls.n	80052f2 <HAL_DMA_Init+0x2aa>
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	685b      	ldr	r3, [r3, #4]
 80052d6:	2b46      	cmp	r3, #70	; 0x46
 80052d8:	d903      	bls.n	80052e2 <HAL_DMA_Init+0x29a>
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	685b      	ldr	r3, [r3, #4]
 80052de:	2b48      	cmp	r3, #72	; 0x48
 80052e0:	d907      	bls.n	80052f2 <HAL_DMA_Init+0x2aa>
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	685b      	ldr	r3, [r3, #4]
 80052e6:	2b4e      	cmp	r3, #78	; 0x4e
 80052e8:	d905      	bls.n	80052f6 <HAL_DMA_Init+0x2ae>
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	685b      	ldr	r3, [r3, #4]
 80052ee:	2b52      	cmp	r3, #82	; 0x52
 80052f0:	d801      	bhi.n	80052f6 <HAL_DMA_Init+0x2ae>
 80052f2:	2301      	movs	r3, #1
 80052f4:	e000      	b.n	80052f8 <HAL_DMA_Init+0x2b0>
 80052f6:	2300      	movs	r3, #0
 80052f8:	2b00      	cmp	r3, #0
 80052fa:	d003      	beq.n	8005304 <HAL_DMA_Init+0x2bc>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 80052fc:	697b      	ldr	r3, [r7, #20]
 80052fe:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005302:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	681b      	ldr	r3, [r3, #0]
 8005308:	697a      	ldr	r2, [r7, #20]
 800530a:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	695b      	ldr	r3, [r3, #20]
 8005312:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8005314:	697b      	ldr	r3, [r7, #20]
 8005316:	f023 0307 	bic.w	r3, r3, #7
 800531a:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005320:	697a      	ldr	r2, [r7, #20]
 8005322:	4313      	orrs	r3, r2
 8005324:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800532a:	2b04      	cmp	r3, #4
 800532c:	d117      	bne.n	800535e <HAL_DMA_Init+0x316>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005332:	697a      	ldr	r2, [r7, #20]
 8005334:	4313      	orrs	r3, r2
 8005336:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800533c:	2b00      	cmp	r3, #0
 800533e:	d00e      	beq.n	800535e <HAL_DMA_Init+0x316>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8005340:	6878      	ldr	r0, [r7, #4]
 8005342:	f001 fdcf 	bl	8006ee4 <DMA_CheckFifoParam>
 8005346:	4603      	mov	r3, r0
 8005348:	2b00      	cmp	r3, #0
 800534a:	d008      	beq.n	800535e <HAL_DMA_Init+0x316>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	2240      	movs	r2, #64	; 0x40
 8005350:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	2201      	movs	r2, #1
 8005356:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          return HAL_ERROR;
 800535a:	2301      	movs	r3, #1
 800535c:	e197      	b.n	800568e <HAL_DMA_Init+0x646>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	681b      	ldr	r3, [r3, #0]
 8005362:	697a      	ldr	r2, [r7, #20]
 8005364:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8005366:	6878      	ldr	r0, [r7, #4]
 8005368:	f001 fd0a 	bl	8006d80 <DMA_CalcBaseAndBitshift>
 800536c:	4603      	mov	r3, r0
 800536e:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005374:	f003 031f 	and.w	r3, r3, #31
 8005378:	223f      	movs	r2, #63	; 0x3f
 800537a:	409a      	lsls	r2, r3
 800537c:	68bb      	ldr	r3, [r7, #8]
 800537e:	609a      	str	r2, [r3, #8]
 8005380:	e0cd      	b.n	800551e <HAL_DMA_Init+0x4d6>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	681b      	ldr	r3, [r3, #0]
 8005386:	4a3b      	ldr	r2, [pc, #236]	; (8005474 <HAL_DMA_Init+0x42c>)
 8005388:	4293      	cmp	r3, r2
 800538a:	d022      	beq.n	80053d2 <HAL_DMA_Init+0x38a>
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	4a39      	ldr	r2, [pc, #228]	; (8005478 <HAL_DMA_Init+0x430>)
 8005392:	4293      	cmp	r3, r2
 8005394:	d01d      	beq.n	80053d2 <HAL_DMA_Init+0x38a>
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	681b      	ldr	r3, [r3, #0]
 800539a:	4a38      	ldr	r2, [pc, #224]	; (800547c <HAL_DMA_Init+0x434>)
 800539c:	4293      	cmp	r3, r2
 800539e:	d018      	beq.n	80053d2 <HAL_DMA_Init+0x38a>
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	681b      	ldr	r3, [r3, #0]
 80053a4:	4a36      	ldr	r2, [pc, #216]	; (8005480 <HAL_DMA_Init+0x438>)
 80053a6:	4293      	cmp	r3, r2
 80053a8:	d013      	beq.n	80053d2 <HAL_DMA_Init+0x38a>
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	681b      	ldr	r3, [r3, #0]
 80053ae:	4a35      	ldr	r2, [pc, #212]	; (8005484 <HAL_DMA_Init+0x43c>)
 80053b0:	4293      	cmp	r3, r2
 80053b2:	d00e      	beq.n	80053d2 <HAL_DMA_Init+0x38a>
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	681b      	ldr	r3, [r3, #0]
 80053b8:	4a33      	ldr	r2, [pc, #204]	; (8005488 <HAL_DMA_Init+0x440>)
 80053ba:	4293      	cmp	r3, r2
 80053bc:	d009      	beq.n	80053d2 <HAL_DMA_Init+0x38a>
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	681b      	ldr	r3, [r3, #0]
 80053c2:	4a32      	ldr	r2, [pc, #200]	; (800548c <HAL_DMA_Init+0x444>)
 80053c4:	4293      	cmp	r3, r2
 80053c6:	d004      	beq.n	80053d2 <HAL_DMA_Init+0x38a>
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	4a30      	ldr	r2, [pc, #192]	; (8005490 <HAL_DMA_Init+0x448>)
 80053ce:	4293      	cmp	r3, r2
 80053d0:	d101      	bne.n	80053d6 <HAL_DMA_Init+0x38e>
 80053d2:	2301      	movs	r3, #1
 80053d4:	e000      	b.n	80053d8 <HAL_DMA_Init+0x390>
 80053d6:	2300      	movs	r3, #0
 80053d8:	2b00      	cmp	r3, #0
 80053da:	f000 8097 	beq.w	800550c <HAL_DMA_Init+0x4c4>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	681b      	ldr	r3, [r3, #0]
 80053e2:	4a24      	ldr	r2, [pc, #144]	; (8005474 <HAL_DMA_Init+0x42c>)
 80053e4:	4293      	cmp	r3, r2
 80053e6:	d021      	beq.n	800542c <HAL_DMA_Init+0x3e4>
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	681b      	ldr	r3, [r3, #0]
 80053ec:	4a22      	ldr	r2, [pc, #136]	; (8005478 <HAL_DMA_Init+0x430>)
 80053ee:	4293      	cmp	r3, r2
 80053f0:	d01c      	beq.n	800542c <HAL_DMA_Init+0x3e4>
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	681b      	ldr	r3, [r3, #0]
 80053f6:	4a21      	ldr	r2, [pc, #132]	; (800547c <HAL_DMA_Init+0x434>)
 80053f8:	4293      	cmp	r3, r2
 80053fa:	d017      	beq.n	800542c <HAL_DMA_Init+0x3e4>
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	681b      	ldr	r3, [r3, #0]
 8005400:	4a1f      	ldr	r2, [pc, #124]	; (8005480 <HAL_DMA_Init+0x438>)
 8005402:	4293      	cmp	r3, r2
 8005404:	d012      	beq.n	800542c <HAL_DMA_Init+0x3e4>
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	681b      	ldr	r3, [r3, #0]
 800540a:	4a1e      	ldr	r2, [pc, #120]	; (8005484 <HAL_DMA_Init+0x43c>)
 800540c:	4293      	cmp	r3, r2
 800540e:	d00d      	beq.n	800542c <HAL_DMA_Init+0x3e4>
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	681b      	ldr	r3, [r3, #0]
 8005414:	4a1c      	ldr	r2, [pc, #112]	; (8005488 <HAL_DMA_Init+0x440>)
 8005416:	4293      	cmp	r3, r2
 8005418:	d008      	beq.n	800542c <HAL_DMA_Init+0x3e4>
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	681b      	ldr	r3, [r3, #0]
 800541e:	4a1b      	ldr	r2, [pc, #108]	; (800548c <HAL_DMA_Init+0x444>)
 8005420:	4293      	cmp	r3, r2
 8005422:	d003      	beq.n	800542c <HAL_DMA_Init+0x3e4>
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	681b      	ldr	r3, [r3, #0]
 8005428:	4a19      	ldr	r2, [pc, #100]	; (8005490 <HAL_DMA_Init+0x448>)
 800542a:	4293      	cmp	r3, r2
 800542c:	bf00      	nop
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	2200      	movs	r2, #0
 8005432:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	2202      	movs	r2, #2
 800543a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	681b      	ldr	r3, [r3, #0]
 8005442:	681b      	ldr	r3, [r3, #0]
 8005444:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 8005446:	697a      	ldr	r2, [r7, #20]
 8005448:	4b12      	ldr	r3, [pc, #72]	; (8005494 <HAL_DMA_Init+0x44c>)
 800544a:	4013      	ands	r3, r2
 800544c:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	689b      	ldr	r3, [r3, #8]
 8005452:	2b40      	cmp	r3, #64	; 0x40
 8005454:	d020      	beq.n	8005498 <HAL_DMA_Init+0x450>
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	689b      	ldr	r3, [r3, #8]
 800545a:	2b80      	cmp	r3, #128	; 0x80
 800545c:	d102      	bne.n	8005464 <HAL_DMA_Init+0x41c>
 800545e:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8005462:	e01a      	b.n	800549a <HAL_DMA_Init+0x452>
 8005464:	2300      	movs	r3, #0
 8005466:	e018      	b.n	800549a <HAL_DMA_Init+0x452>
 8005468:	fe10803f 	.word	0xfe10803f
 800546c:	5c001000 	.word	0x5c001000
 8005470:	ffff0000 	.word	0xffff0000
 8005474:	58025408 	.word	0x58025408
 8005478:	5802541c 	.word	0x5802541c
 800547c:	58025430 	.word	0x58025430
 8005480:	58025444 	.word	0x58025444
 8005484:	58025458 	.word	0x58025458
 8005488:	5802546c 	.word	0x5802546c
 800548c:	58025480 	.word	0x58025480
 8005490:	58025494 	.word	0x58025494
 8005494:	fffe000f 	.word	0xfffe000f
 8005498:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 800549a:	687a      	ldr	r2, [r7, #4]
 800549c:	68d2      	ldr	r2, [r2, #12]
 800549e:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80054a0:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	691b      	ldr	r3, [r3, #16]
 80054a6:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 80054a8:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	695b      	ldr	r3, [r3, #20]
 80054ae:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 80054b0:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	699b      	ldr	r3, [r3, #24]
 80054b6:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 80054b8:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	69db      	ldr	r3, [r3, #28]
 80054be:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 80054c0:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	6a1b      	ldr	r3, [r3, #32]
 80054c6:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 80054c8:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80054ca:	697a      	ldr	r2, [r7, #20]
 80054cc:	4313      	orrs	r3, r2
 80054ce:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	681b      	ldr	r3, [r3, #0]
 80054d4:	697a      	ldr	r2, [r7, #20]
 80054d6:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	681b      	ldr	r3, [r3, #0]
 80054dc:	461a      	mov	r2, r3
 80054de:	4b6e      	ldr	r3, [pc, #440]	; (8005698 <HAL_DMA_Init+0x650>)
 80054e0:	4413      	add	r3, r2
 80054e2:	4a6e      	ldr	r2, [pc, #440]	; (800569c <HAL_DMA_Init+0x654>)
 80054e4:	fba2 2303 	umull	r2, r3, r2, r3
 80054e8:	091b      	lsrs	r3, r3, #4
 80054ea:	009a      	lsls	r2, r3, #2
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80054f0:	6878      	ldr	r0, [r7, #4]
 80054f2:	f001 fc45 	bl	8006d80 <DMA_CalcBaseAndBitshift>
 80054f6:	4603      	mov	r3, r0
 80054f8:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80054fe:	f003 031f 	and.w	r3, r3, #31
 8005502:	2201      	movs	r2, #1
 8005504:	409a      	lsls	r2, r3
 8005506:	68fb      	ldr	r3, [r7, #12]
 8005508:	605a      	str	r2, [r3, #4]
 800550a:	e008      	b.n	800551e <HAL_DMA_Init+0x4d6>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	2240      	movs	r2, #64	; 0x40
 8005510:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	2203      	movs	r2, #3
 8005516:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    return HAL_ERROR;
 800551a:	2301      	movs	r3, #1
 800551c:	e0b7      	b.n	800568e <HAL_DMA_Init+0x646>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	681b      	ldr	r3, [r3, #0]
 8005522:	4a5f      	ldr	r2, [pc, #380]	; (80056a0 <HAL_DMA_Init+0x658>)
 8005524:	4293      	cmp	r3, r2
 8005526:	d072      	beq.n	800560e <HAL_DMA_Init+0x5c6>
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	681b      	ldr	r3, [r3, #0]
 800552c:	4a5d      	ldr	r2, [pc, #372]	; (80056a4 <HAL_DMA_Init+0x65c>)
 800552e:	4293      	cmp	r3, r2
 8005530:	d06d      	beq.n	800560e <HAL_DMA_Init+0x5c6>
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	681b      	ldr	r3, [r3, #0]
 8005536:	4a5c      	ldr	r2, [pc, #368]	; (80056a8 <HAL_DMA_Init+0x660>)
 8005538:	4293      	cmp	r3, r2
 800553a:	d068      	beq.n	800560e <HAL_DMA_Init+0x5c6>
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	681b      	ldr	r3, [r3, #0]
 8005540:	4a5a      	ldr	r2, [pc, #360]	; (80056ac <HAL_DMA_Init+0x664>)
 8005542:	4293      	cmp	r3, r2
 8005544:	d063      	beq.n	800560e <HAL_DMA_Init+0x5c6>
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	681b      	ldr	r3, [r3, #0]
 800554a:	4a59      	ldr	r2, [pc, #356]	; (80056b0 <HAL_DMA_Init+0x668>)
 800554c:	4293      	cmp	r3, r2
 800554e:	d05e      	beq.n	800560e <HAL_DMA_Init+0x5c6>
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	681b      	ldr	r3, [r3, #0]
 8005554:	4a57      	ldr	r2, [pc, #348]	; (80056b4 <HAL_DMA_Init+0x66c>)
 8005556:	4293      	cmp	r3, r2
 8005558:	d059      	beq.n	800560e <HAL_DMA_Init+0x5c6>
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	681b      	ldr	r3, [r3, #0]
 800555e:	4a56      	ldr	r2, [pc, #344]	; (80056b8 <HAL_DMA_Init+0x670>)
 8005560:	4293      	cmp	r3, r2
 8005562:	d054      	beq.n	800560e <HAL_DMA_Init+0x5c6>
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	681b      	ldr	r3, [r3, #0]
 8005568:	4a54      	ldr	r2, [pc, #336]	; (80056bc <HAL_DMA_Init+0x674>)
 800556a:	4293      	cmp	r3, r2
 800556c:	d04f      	beq.n	800560e <HAL_DMA_Init+0x5c6>
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	681b      	ldr	r3, [r3, #0]
 8005572:	4a53      	ldr	r2, [pc, #332]	; (80056c0 <HAL_DMA_Init+0x678>)
 8005574:	4293      	cmp	r3, r2
 8005576:	d04a      	beq.n	800560e <HAL_DMA_Init+0x5c6>
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	4a51      	ldr	r2, [pc, #324]	; (80056c4 <HAL_DMA_Init+0x67c>)
 800557e:	4293      	cmp	r3, r2
 8005580:	d045      	beq.n	800560e <HAL_DMA_Init+0x5c6>
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	681b      	ldr	r3, [r3, #0]
 8005586:	4a50      	ldr	r2, [pc, #320]	; (80056c8 <HAL_DMA_Init+0x680>)
 8005588:	4293      	cmp	r3, r2
 800558a:	d040      	beq.n	800560e <HAL_DMA_Init+0x5c6>
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	4a4e      	ldr	r2, [pc, #312]	; (80056cc <HAL_DMA_Init+0x684>)
 8005592:	4293      	cmp	r3, r2
 8005594:	d03b      	beq.n	800560e <HAL_DMA_Init+0x5c6>
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	681b      	ldr	r3, [r3, #0]
 800559a:	4a4d      	ldr	r2, [pc, #308]	; (80056d0 <HAL_DMA_Init+0x688>)
 800559c:	4293      	cmp	r3, r2
 800559e:	d036      	beq.n	800560e <HAL_DMA_Init+0x5c6>
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	681b      	ldr	r3, [r3, #0]
 80055a4:	4a4b      	ldr	r2, [pc, #300]	; (80056d4 <HAL_DMA_Init+0x68c>)
 80055a6:	4293      	cmp	r3, r2
 80055a8:	d031      	beq.n	800560e <HAL_DMA_Init+0x5c6>
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	681b      	ldr	r3, [r3, #0]
 80055ae:	4a4a      	ldr	r2, [pc, #296]	; (80056d8 <HAL_DMA_Init+0x690>)
 80055b0:	4293      	cmp	r3, r2
 80055b2:	d02c      	beq.n	800560e <HAL_DMA_Init+0x5c6>
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	681b      	ldr	r3, [r3, #0]
 80055b8:	4a48      	ldr	r2, [pc, #288]	; (80056dc <HAL_DMA_Init+0x694>)
 80055ba:	4293      	cmp	r3, r2
 80055bc:	d027      	beq.n	800560e <HAL_DMA_Init+0x5c6>
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	681b      	ldr	r3, [r3, #0]
 80055c2:	4a47      	ldr	r2, [pc, #284]	; (80056e0 <HAL_DMA_Init+0x698>)
 80055c4:	4293      	cmp	r3, r2
 80055c6:	d022      	beq.n	800560e <HAL_DMA_Init+0x5c6>
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	4a45      	ldr	r2, [pc, #276]	; (80056e4 <HAL_DMA_Init+0x69c>)
 80055ce:	4293      	cmp	r3, r2
 80055d0:	d01d      	beq.n	800560e <HAL_DMA_Init+0x5c6>
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	681b      	ldr	r3, [r3, #0]
 80055d6:	4a44      	ldr	r2, [pc, #272]	; (80056e8 <HAL_DMA_Init+0x6a0>)
 80055d8:	4293      	cmp	r3, r2
 80055da:	d018      	beq.n	800560e <HAL_DMA_Init+0x5c6>
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	681b      	ldr	r3, [r3, #0]
 80055e0:	4a42      	ldr	r2, [pc, #264]	; (80056ec <HAL_DMA_Init+0x6a4>)
 80055e2:	4293      	cmp	r3, r2
 80055e4:	d013      	beq.n	800560e <HAL_DMA_Init+0x5c6>
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	681b      	ldr	r3, [r3, #0]
 80055ea:	4a41      	ldr	r2, [pc, #260]	; (80056f0 <HAL_DMA_Init+0x6a8>)
 80055ec:	4293      	cmp	r3, r2
 80055ee:	d00e      	beq.n	800560e <HAL_DMA_Init+0x5c6>
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	681b      	ldr	r3, [r3, #0]
 80055f4:	4a3f      	ldr	r2, [pc, #252]	; (80056f4 <HAL_DMA_Init+0x6ac>)
 80055f6:	4293      	cmp	r3, r2
 80055f8:	d009      	beq.n	800560e <HAL_DMA_Init+0x5c6>
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	681b      	ldr	r3, [r3, #0]
 80055fe:	4a3e      	ldr	r2, [pc, #248]	; (80056f8 <HAL_DMA_Init+0x6b0>)
 8005600:	4293      	cmp	r3, r2
 8005602:	d004      	beq.n	800560e <HAL_DMA_Init+0x5c6>
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	681b      	ldr	r3, [r3, #0]
 8005608:	4a3c      	ldr	r2, [pc, #240]	; (80056fc <HAL_DMA_Init+0x6b4>)
 800560a:	4293      	cmp	r3, r2
 800560c:	d101      	bne.n	8005612 <HAL_DMA_Init+0x5ca>
 800560e:	2301      	movs	r3, #1
 8005610:	e000      	b.n	8005614 <HAL_DMA_Init+0x5cc>
 8005612:	2300      	movs	r3, #0
 8005614:	2b00      	cmp	r3, #0
 8005616:	d032      	beq.n	800567e <HAL_DMA_Init+0x636>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8005618:	6878      	ldr	r0, [r7, #4]
 800561a:	f001 fcdf 	bl	8006fdc <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	689b      	ldr	r3, [r3, #8]
 8005622:	2b80      	cmp	r3, #128	; 0x80
 8005624:	d102      	bne.n	800562c <HAL_DMA_Init+0x5e4>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	2200      	movs	r2, #0
 800562a:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	685a      	ldr	r2, [r3, #4]
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005634:	b2d2      	uxtb	r2, r2
 8005636:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800563c:	687a      	ldr	r2, [r7, #4]
 800563e:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8005640:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	685b      	ldr	r3, [r3, #4]
 8005646:	2b00      	cmp	r3, #0
 8005648:	d010      	beq.n	800566c <HAL_DMA_Init+0x624>
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	685b      	ldr	r3, [r3, #4]
 800564e:	2b08      	cmp	r3, #8
 8005650:	d80c      	bhi.n	800566c <HAL_DMA_Init+0x624>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8005652:	6878      	ldr	r0, [r7, #4]
 8005654:	f001 fd5c 	bl	8007110 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800565c:	2200      	movs	r2, #0
 800565e:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005664:	687a      	ldr	r2, [r7, #4]
 8005666:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8005668:	605a      	str	r2, [r3, #4]
 800566a:	e008      	b.n	800567e <HAL_DMA_Init+0x636>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	2200      	movs	r2, #0
 8005670:	66da      	str	r2, [r3, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	2200      	movs	r2, #0
 8005676:	671a      	str	r2, [r3, #112]	; 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	2200      	movs	r2, #0
 800567c:	675a      	str	r2, [r3, #116]	; 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	2200      	movs	r2, #0
 8005682:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	2201      	movs	r2, #1
 8005688:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800568c:	2300      	movs	r3, #0
}
 800568e:	4618      	mov	r0, r3
 8005690:	3718      	adds	r7, #24
 8005692:	46bd      	mov	sp, r7
 8005694:	bd80      	pop	{r7, pc}
 8005696:	bf00      	nop
 8005698:	a7fdabf8 	.word	0xa7fdabf8
 800569c:	cccccccd 	.word	0xcccccccd
 80056a0:	40020010 	.word	0x40020010
 80056a4:	40020028 	.word	0x40020028
 80056a8:	40020040 	.word	0x40020040
 80056ac:	40020058 	.word	0x40020058
 80056b0:	40020070 	.word	0x40020070
 80056b4:	40020088 	.word	0x40020088
 80056b8:	400200a0 	.word	0x400200a0
 80056bc:	400200b8 	.word	0x400200b8
 80056c0:	40020410 	.word	0x40020410
 80056c4:	40020428 	.word	0x40020428
 80056c8:	40020440 	.word	0x40020440
 80056cc:	40020458 	.word	0x40020458
 80056d0:	40020470 	.word	0x40020470
 80056d4:	40020488 	.word	0x40020488
 80056d8:	400204a0 	.word	0x400204a0
 80056dc:	400204b8 	.word	0x400204b8
 80056e0:	58025408 	.word	0x58025408
 80056e4:	5802541c 	.word	0x5802541c
 80056e8:	58025430 	.word	0x58025430
 80056ec:	58025444 	.word	0x58025444
 80056f0:	58025458 	.word	0x58025458
 80056f4:	5802546c 	.word	0x5802546c
 80056f8:	58025480 	.word	0x58025480
 80056fc:	58025494 	.word	0x58025494

08005700 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005700:	b580      	push	{r7, lr}
 8005702:	b086      	sub	sp, #24
 8005704:	af00      	add	r7, sp, #0
 8005706:	60f8      	str	r0, [r7, #12]
 8005708:	60b9      	str	r1, [r7, #8]
 800570a:	607a      	str	r2, [r7, #4]
 800570c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800570e:	2300      	movs	r3, #0
 8005710:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8005712:	68fb      	ldr	r3, [r7, #12]
 8005714:	2b00      	cmp	r3, #0
 8005716:	d101      	bne.n	800571c <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 8005718:	2301      	movs	r3, #1
 800571a:	e226      	b.n	8005b6a <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 800571c:	68fb      	ldr	r3, [r7, #12]
 800571e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8005722:	2b01      	cmp	r3, #1
 8005724:	d101      	bne.n	800572a <HAL_DMA_Start_IT+0x2a>
 8005726:	2302      	movs	r3, #2
 8005728:	e21f      	b.n	8005b6a <HAL_DMA_Start_IT+0x46a>
 800572a:	68fb      	ldr	r3, [r7, #12]
 800572c:	2201      	movs	r2, #1
 800572e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 8005732:	68fb      	ldr	r3, [r7, #12]
 8005734:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005738:	b2db      	uxtb	r3, r3
 800573a:	2b01      	cmp	r3, #1
 800573c:	f040 820a 	bne.w	8005b54 <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8005740:	68fb      	ldr	r3, [r7, #12]
 8005742:	2202      	movs	r2, #2
 8005744:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005748:	68fb      	ldr	r3, [r7, #12]
 800574a:	2200      	movs	r2, #0
 800574c:	655a      	str	r2, [r3, #84]	; 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800574e:	68fb      	ldr	r3, [r7, #12]
 8005750:	681b      	ldr	r3, [r3, #0]
 8005752:	4a68      	ldr	r2, [pc, #416]	; (80058f4 <HAL_DMA_Start_IT+0x1f4>)
 8005754:	4293      	cmp	r3, r2
 8005756:	d04a      	beq.n	80057ee <HAL_DMA_Start_IT+0xee>
 8005758:	68fb      	ldr	r3, [r7, #12]
 800575a:	681b      	ldr	r3, [r3, #0]
 800575c:	4a66      	ldr	r2, [pc, #408]	; (80058f8 <HAL_DMA_Start_IT+0x1f8>)
 800575e:	4293      	cmp	r3, r2
 8005760:	d045      	beq.n	80057ee <HAL_DMA_Start_IT+0xee>
 8005762:	68fb      	ldr	r3, [r7, #12]
 8005764:	681b      	ldr	r3, [r3, #0]
 8005766:	4a65      	ldr	r2, [pc, #404]	; (80058fc <HAL_DMA_Start_IT+0x1fc>)
 8005768:	4293      	cmp	r3, r2
 800576a:	d040      	beq.n	80057ee <HAL_DMA_Start_IT+0xee>
 800576c:	68fb      	ldr	r3, [r7, #12]
 800576e:	681b      	ldr	r3, [r3, #0]
 8005770:	4a63      	ldr	r2, [pc, #396]	; (8005900 <HAL_DMA_Start_IT+0x200>)
 8005772:	4293      	cmp	r3, r2
 8005774:	d03b      	beq.n	80057ee <HAL_DMA_Start_IT+0xee>
 8005776:	68fb      	ldr	r3, [r7, #12]
 8005778:	681b      	ldr	r3, [r3, #0]
 800577a:	4a62      	ldr	r2, [pc, #392]	; (8005904 <HAL_DMA_Start_IT+0x204>)
 800577c:	4293      	cmp	r3, r2
 800577e:	d036      	beq.n	80057ee <HAL_DMA_Start_IT+0xee>
 8005780:	68fb      	ldr	r3, [r7, #12]
 8005782:	681b      	ldr	r3, [r3, #0]
 8005784:	4a60      	ldr	r2, [pc, #384]	; (8005908 <HAL_DMA_Start_IT+0x208>)
 8005786:	4293      	cmp	r3, r2
 8005788:	d031      	beq.n	80057ee <HAL_DMA_Start_IT+0xee>
 800578a:	68fb      	ldr	r3, [r7, #12]
 800578c:	681b      	ldr	r3, [r3, #0]
 800578e:	4a5f      	ldr	r2, [pc, #380]	; (800590c <HAL_DMA_Start_IT+0x20c>)
 8005790:	4293      	cmp	r3, r2
 8005792:	d02c      	beq.n	80057ee <HAL_DMA_Start_IT+0xee>
 8005794:	68fb      	ldr	r3, [r7, #12]
 8005796:	681b      	ldr	r3, [r3, #0]
 8005798:	4a5d      	ldr	r2, [pc, #372]	; (8005910 <HAL_DMA_Start_IT+0x210>)
 800579a:	4293      	cmp	r3, r2
 800579c:	d027      	beq.n	80057ee <HAL_DMA_Start_IT+0xee>
 800579e:	68fb      	ldr	r3, [r7, #12]
 80057a0:	681b      	ldr	r3, [r3, #0]
 80057a2:	4a5c      	ldr	r2, [pc, #368]	; (8005914 <HAL_DMA_Start_IT+0x214>)
 80057a4:	4293      	cmp	r3, r2
 80057a6:	d022      	beq.n	80057ee <HAL_DMA_Start_IT+0xee>
 80057a8:	68fb      	ldr	r3, [r7, #12]
 80057aa:	681b      	ldr	r3, [r3, #0]
 80057ac:	4a5a      	ldr	r2, [pc, #360]	; (8005918 <HAL_DMA_Start_IT+0x218>)
 80057ae:	4293      	cmp	r3, r2
 80057b0:	d01d      	beq.n	80057ee <HAL_DMA_Start_IT+0xee>
 80057b2:	68fb      	ldr	r3, [r7, #12]
 80057b4:	681b      	ldr	r3, [r3, #0]
 80057b6:	4a59      	ldr	r2, [pc, #356]	; (800591c <HAL_DMA_Start_IT+0x21c>)
 80057b8:	4293      	cmp	r3, r2
 80057ba:	d018      	beq.n	80057ee <HAL_DMA_Start_IT+0xee>
 80057bc:	68fb      	ldr	r3, [r7, #12]
 80057be:	681b      	ldr	r3, [r3, #0]
 80057c0:	4a57      	ldr	r2, [pc, #348]	; (8005920 <HAL_DMA_Start_IT+0x220>)
 80057c2:	4293      	cmp	r3, r2
 80057c4:	d013      	beq.n	80057ee <HAL_DMA_Start_IT+0xee>
 80057c6:	68fb      	ldr	r3, [r7, #12]
 80057c8:	681b      	ldr	r3, [r3, #0]
 80057ca:	4a56      	ldr	r2, [pc, #344]	; (8005924 <HAL_DMA_Start_IT+0x224>)
 80057cc:	4293      	cmp	r3, r2
 80057ce:	d00e      	beq.n	80057ee <HAL_DMA_Start_IT+0xee>
 80057d0:	68fb      	ldr	r3, [r7, #12]
 80057d2:	681b      	ldr	r3, [r3, #0]
 80057d4:	4a54      	ldr	r2, [pc, #336]	; (8005928 <HAL_DMA_Start_IT+0x228>)
 80057d6:	4293      	cmp	r3, r2
 80057d8:	d009      	beq.n	80057ee <HAL_DMA_Start_IT+0xee>
 80057da:	68fb      	ldr	r3, [r7, #12]
 80057dc:	681b      	ldr	r3, [r3, #0]
 80057de:	4a53      	ldr	r2, [pc, #332]	; (800592c <HAL_DMA_Start_IT+0x22c>)
 80057e0:	4293      	cmp	r3, r2
 80057e2:	d004      	beq.n	80057ee <HAL_DMA_Start_IT+0xee>
 80057e4:	68fb      	ldr	r3, [r7, #12]
 80057e6:	681b      	ldr	r3, [r3, #0]
 80057e8:	4a51      	ldr	r2, [pc, #324]	; (8005930 <HAL_DMA_Start_IT+0x230>)
 80057ea:	4293      	cmp	r3, r2
 80057ec:	d108      	bne.n	8005800 <HAL_DMA_Start_IT+0x100>
 80057ee:	68fb      	ldr	r3, [r7, #12]
 80057f0:	681b      	ldr	r3, [r3, #0]
 80057f2:	681a      	ldr	r2, [r3, #0]
 80057f4:	68fb      	ldr	r3, [r7, #12]
 80057f6:	681b      	ldr	r3, [r3, #0]
 80057f8:	f022 0201 	bic.w	r2, r2, #1
 80057fc:	601a      	str	r2, [r3, #0]
 80057fe:	e007      	b.n	8005810 <HAL_DMA_Start_IT+0x110>
 8005800:	68fb      	ldr	r3, [r7, #12]
 8005802:	681b      	ldr	r3, [r3, #0]
 8005804:	681a      	ldr	r2, [r3, #0]
 8005806:	68fb      	ldr	r3, [r7, #12]
 8005808:	681b      	ldr	r3, [r3, #0]
 800580a:	f022 0201 	bic.w	r2, r2, #1
 800580e:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8005810:	683b      	ldr	r3, [r7, #0]
 8005812:	687a      	ldr	r2, [r7, #4]
 8005814:	68b9      	ldr	r1, [r7, #8]
 8005816:	68f8      	ldr	r0, [r7, #12]
 8005818:	f001 f906 	bl	8006a28 <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800581c:	68fb      	ldr	r3, [r7, #12]
 800581e:	681b      	ldr	r3, [r3, #0]
 8005820:	4a34      	ldr	r2, [pc, #208]	; (80058f4 <HAL_DMA_Start_IT+0x1f4>)
 8005822:	4293      	cmp	r3, r2
 8005824:	d04a      	beq.n	80058bc <HAL_DMA_Start_IT+0x1bc>
 8005826:	68fb      	ldr	r3, [r7, #12]
 8005828:	681b      	ldr	r3, [r3, #0]
 800582a:	4a33      	ldr	r2, [pc, #204]	; (80058f8 <HAL_DMA_Start_IT+0x1f8>)
 800582c:	4293      	cmp	r3, r2
 800582e:	d045      	beq.n	80058bc <HAL_DMA_Start_IT+0x1bc>
 8005830:	68fb      	ldr	r3, [r7, #12]
 8005832:	681b      	ldr	r3, [r3, #0]
 8005834:	4a31      	ldr	r2, [pc, #196]	; (80058fc <HAL_DMA_Start_IT+0x1fc>)
 8005836:	4293      	cmp	r3, r2
 8005838:	d040      	beq.n	80058bc <HAL_DMA_Start_IT+0x1bc>
 800583a:	68fb      	ldr	r3, [r7, #12]
 800583c:	681b      	ldr	r3, [r3, #0]
 800583e:	4a30      	ldr	r2, [pc, #192]	; (8005900 <HAL_DMA_Start_IT+0x200>)
 8005840:	4293      	cmp	r3, r2
 8005842:	d03b      	beq.n	80058bc <HAL_DMA_Start_IT+0x1bc>
 8005844:	68fb      	ldr	r3, [r7, #12]
 8005846:	681b      	ldr	r3, [r3, #0]
 8005848:	4a2e      	ldr	r2, [pc, #184]	; (8005904 <HAL_DMA_Start_IT+0x204>)
 800584a:	4293      	cmp	r3, r2
 800584c:	d036      	beq.n	80058bc <HAL_DMA_Start_IT+0x1bc>
 800584e:	68fb      	ldr	r3, [r7, #12]
 8005850:	681b      	ldr	r3, [r3, #0]
 8005852:	4a2d      	ldr	r2, [pc, #180]	; (8005908 <HAL_DMA_Start_IT+0x208>)
 8005854:	4293      	cmp	r3, r2
 8005856:	d031      	beq.n	80058bc <HAL_DMA_Start_IT+0x1bc>
 8005858:	68fb      	ldr	r3, [r7, #12]
 800585a:	681b      	ldr	r3, [r3, #0]
 800585c:	4a2b      	ldr	r2, [pc, #172]	; (800590c <HAL_DMA_Start_IT+0x20c>)
 800585e:	4293      	cmp	r3, r2
 8005860:	d02c      	beq.n	80058bc <HAL_DMA_Start_IT+0x1bc>
 8005862:	68fb      	ldr	r3, [r7, #12]
 8005864:	681b      	ldr	r3, [r3, #0]
 8005866:	4a2a      	ldr	r2, [pc, #168]	; (8005910 <HAL_DMA_Start_IT+0x210>)
 8005868:	4293      	cmp	r3, r2
 800586a:	d027      	beq.n	80058bc <HAL_DMA_Start_IT+0x1bc>
 800586c:	68fb      	ldr	r3, [r7, #12]
 800586e:	681b      	ldr	r3, [r3, #0]
 8005870:	4a28      	ldr	r2, [pc, #160]	; (8005914 <HAL_DMA_Start_IT+0x214>)
 8005872:	4293      	cmp	r3, r2
 8005874:	d022      	beq.n	80058bc <HAL_DMA_Start_IT+0x1bc>
 8005876:	68fb      	ldr	r3, [r7, #12]
 8005878:	681b      	ldr	r3, [r3, #0]
 800587a:	4a27      	ldr	r2, [pc, #156]	; (8005918 <HAL_DMA_Start_IT+0x218>)
 800587c:	4293      	cmp	r3, r2
 800587e:	d01d      	beq.n	80058bc <HAL_DMA_Start_IT+0x1bc>
 8005880:	68fb      	ldr	r3, [r7, #12]
 8005882:	681b      	ldr	r3, [r3, #0]
 8005884:	4a25      	ldr	r2, [pc, #148]	; (800591c <HAL_DMA_Start_IT+0x21c>)
 8005886:	4293      	cmp	r3, r2
 8005888:	d018      	beq.n	80058bc <HAL_DMA_Start_IT+0x1bc>
 800588a:	68fb      	ldr	r3, [r7, #12]
 800588c:	681b      	ldr	r3, [r3, #0]
 800588e:	4a24      	ldr	r2, [pc, #144]	; (8005920 <HAL_DMA_Start_IT+0x220>)
 8005890:	4293      	cmp	r3, r2
 8005892:	d013      	beq.n	80058bc <HAL_DMA_Start_IT+0x1bc>
 8005894:	68fb      	ldr	r3, [r7, #12]
 8005896:	681b      	ldr	r3, [r3, #0]
 8005898:	4a22      	ldr	r2, [pc, #136]	; (8005924 <HAL_DMA_Start_IT+0x224>)
 800589a:	4293      	cmp	r3, r2
 800589c:	d00e      	beq.n	80058bc <HAL_DMA_Start_IT+0x1bc>
 800589e:	68fb      	ldr	r3, [r7, #12]
 80058a0:	681b      	ldr	r3, [r3, #0]
 80058a2:	4a21      	ldr	r2, [pc, #132]	; (8005928 <HAL_DMA_Start_IT+0x228>)
 80058a4:	4293      	cmp	r3, r2
 80058a6:	d009      	beq.n	80058bc <HAL_DMA_Start_IT+0x1bc>
 80058a8:	68fb      	ldr	r3, [r7, #12]
 80058aa:	681b      	ldr	r3, [r3, #0]
 80058ac:	4a1f      	ldr	r2, [pc, #124]	; (800592c <HAL_DMA_Start_IT+0x22c>)
 80058ae:	4293      	cmp	r3, r2
 80058b0:	d004      	beq.n	80058bc <HAL_DMA_Start_IT+0x1bc>
 80058b2:	68fb      	ldr	r3, [r7, #12]
 80058b4:	681b      	ldr	r3, [r3, #0]
 80058b6:	4a1e      	ldr	r2, [pc, #120]	; (8005930 <HAL_DMA_Start_IT+0x230>)
 80058b8:	4293      	cmp	r3, r2
 80058ba:	d101      	bne.n	80058c0 <HAL_DMA_Start_IT+0x1c0>
 80058bc:	2301      	movs	r3, #1
 80058be:	e000      	b.n	80058c2 <HAL_DMA_Start_IT+0x1c2>
 80058c0:	2300      	movs	r3, #0
 80058c2:	2b00      	cmp	r3, #0
 80058c4:	d036      	beq.n	8005934 <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 80058c6:	68fb      	ldr	r3, [r7, #12]
 80058c8:	681b      	ldr	r3, [r3, #0]
 80058ca:	681b      	ldr	r3, [r3, #0]
 80058cc:	f023 021e 	bic.w	r2, r3, #30
 80058d0:	68fb      	ldr	r3, [r7, #12]
 80058d2:	681b      	ldr	r3, [r3, #0]
 80058d4:	f042 0216 	orr.w	r2, r2, #22
 80058d8:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 80058da:	68fb      	ldr	r3, [r7, #12]
 80058dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058de:	2b00      	cmp	r3, #0
 80058e0:	d03e      	beq.n	8005960 <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 80058e2:	68fb      	ldr	r3, [r7, #12]
 80058e4:	681b      	ldr	r3, [r3, #0]
 80058e6:	681a      	ldr	r2, [r3, #0]
 80058e8:	68fb      	ldr	r3, [r7, #12]
 80058ea:	681b      	ldr	r3, [r3, #0]
 80058ec:	f042 0208 	orr.w	r2, r2, #8
 80058f0:	601a      	str	r2, [r3, #0]
 80058f2:	e035      	b.n	8005960 <HAL_DMA_Start_IT+0x260>
 80058f4:	40020010 	.word	0x40020010
 80058f8:	40020028 	.word	0x40020028
 80058fc:	40020040 	.word	0x40020040
 8005900:	40020058 	.word	0x40020058
 8005904:	40020070 	.word	0x40020070
 8005908:	40020088 	.word	0x40020088
 800590c:	400200a0 	.word	0x400200a0
 8005910:	400200b8 	.word	0x400200b8
 8005914:	40020410 	.word	0x40020410
 8005918:	40020428 	.word	0x40020428
 800591c:	40020440 	.word	0x40020440
 8005920:	40020458 	.word	0x40020458
 8005924:	40020470 	.word	0x40020470
 8005928:	40020488 	.word	0x40020488
 800592c:	400204a0 	.word	0x400204a0
 8005930:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 8005934:	68fb      	ldr	r3, [r7, #12]
 8005936:	681b      	ldr	r3, [r3, #0]
 8005938:	681b      	ldr	r3, [r3, #0]
 800593a:	f023 020e 	bic.w	r2, r3, #14
 800593e:	68fb      	ldr	r3, [r7, #12]
 8005940:	681b      	ldr	r3, [r3, #0]
 8005942:	f042 020a 	orr.w	r2, r2, #10
 8005946:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8005948:	68fb      	ldr	r3, [r7, #12]
 800594a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800594c:	2b00      	cmp	r3, #0
 800594e:	d007      	beq.n	8005960 <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 8005950:	68fb      	ldr	r3, [r7, #12]
 8005952:	681b      	ldr	r3, [r3, #0]
 8005954:	681a      	ldr	r2, [r3, #0]
 8005956:	68fb      	ldr	r3, [r7, #12]
 8005958:	681b      	ldr	r3, [r3, #0]
 800595a:	f042 0204 	orr.w	r2, r2, #4
 800595e:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8005960:	68fb      	ldr	r3, [r7, #12]
 8005962:	681b      	ldr	r3, [r3, #0]
 8005964:	4a83      	ldr	r2, [pc, #524]	; (8005b74 <HAL_DMA_Start_IT+0x474>)
 8005966:	4293      	cmp	r3, r2
 8005968:	d072      	beq.n	8005a50 <HAL_DMA_Start_IT+0x350>
 800596a:	68fb      	ldr	r3, [r7, #12]
 800596c:	681b      	ldr	r3, [r3, #0]
 800596e:	4a82      	ldr	r2, [pc, #520]	; (8005b78 <HAL_DMA_Start_IT+0x478>)
 8005970:	4293      	cmp	r3, r2
 8005972:	d06d      	beq.n	8005a50 <HAL_DMA_Start_IT+0x350>
 8005974:	68fb      	ldr	r3, [r7, #12]
 8005976:	681b      	ldr	r3, [r3, #0]
 8005978:	4a80      	ldr	r2, [pc, #512]	; (8005b7c <HAL_DMA_Start_IT+0x47c>)
 800597a:	4293      	cmp	r3, r2
 800597c:	d068      	beq.n	8005a50 <HAL_DMA_Start_IT+0x350>
 800597e:	68fb      	ldr	r3, [r7, #12]
 8005980:	681b      	ldr	r3, [r3, #0]
 8005982:	4a7f      	ldr	r2, [pc, #508]	; (8005b80 <HAL_DMA_Start_IT+0x480>)
 8005984:	4293      	cmp	r3, r2
 8005986:	d063      	beq.n	8005a50 <HAL_DMA_Start_IT+0x350>
 8005988:	68fb      	ldr	r3, [r7, #12]
 800598a:	681b      	ldr	r3, [r3, #0]
 800598c:	4a7d      	ldr	r2, [pc, #500]	; (8005b84 <HAL_DMA_Start_IT+0x484>)
 800598e:	4293      	cmp	r3, r2
 8005990:	d05e      	beq.n	8005a50 <HAL_DMA_Start_IT+0x350>
 8005992:	68fb      	ldr	r3, [r7, #12]
 8005994:	681b      	ldr	r3, [r3, #0]
 8005996:	4a7c      	ldr	r2, [pc, #496]	; (8005b88 <HAL_DMA_Start_IT+0x488>)
 8005998:	4293      	cmp	r3, r2
 800599a:	d059      	beq.n	8005a50 <HAL_DMA_Start_IT+0x350>
 800599c:	68fb      	ldr	r3, [r7, #12]
 800599e:	681b      	ldr	r3, [r3, #0]
 80059a0:	4a7a      	ldr	r2, [pc, #488]	; (8005b8c <HAL_DMA_Start_IT+0x48c>)
 80059a2:	4293      	cmp	r3, r2
 80059a4:	d054      	beq.n	8005a50 <HAL_DMA_Start_IT+0x350>
 80059a6:	68fb      	ldr	r3, [r7, #12]
 80059a8:	681b      	ldr	r3, [r3, #0]
 80059aa:	4a79      	ldr	r2, [pc, #484]	; (8005b90 <HAL_DMA_Start_IT+0x490>)
 80059ac:	4293      	cmp	r3, r2
 80059ae:	d04f      	beq.n	8005a50 <HAL_DMA_Start_IT+0x350>
 80059b0:	68fb      	ldr	r3, [r7, #12]
 80059b2:	681b      	ldr	r3, [r3, #0]
 80059b4:	4a77      	ldr	r2, [pc, #476]	; (8005b94 <HAL_DMA_Start_IT+0x494>)
 80059b6:	4293      	cmp	r3, r2
 80059b8:	d04a      	beq.n	8005a50 <HAL_DMA_Start_IT+0x350>
 80059ba:	68fb      	ldr	r3, [r7, #12]
 80059bc:	681b      	ldr	r3, [r3, #0]
 80059be:	4a76      	ldr	r2, [pc, #472]	; (8005b98 <HAL_DMA_Start_IT+0x498>)
 80059c0:	4293      	cmp	r3, r2
 80059c2:	d045      	beq.n	8005a50 <HAL_DMA_Start_IT+0x350>
 80059c4:	68fb      	ldr	r3, [r7, #12]
 80059c6:	681b      	ldr	r3, [r3, #0]
 80059c8:	4a74      	ldr	r2, [pc, #464]	; (8005b9c <HAL_DMA_Start_IT+0x49c>)
 80059ca:	4293      	cmp	r3, r2
 80059cc:	d040      	beq.n	8005a50 <HAL_DMA_Start_IT+0x350>
 80059ce:	68fb      	ldr	r3, [r7, #12]
 80059d0:	681b      	ldr	r3, [r3, #0]
 80059d2:	4a73      	ldr	r2, [pc, #460]	; (8005ba0 <HAL_DMA_Start_IT+0x4a0>)
 80059d4:	4293      	cmp	r3, r2
 80059d6:	d03b      	beq.n	8005a50 <HAL_DMA_Start_IT+0x350>
 80059d8:	68fb      	ldr	r3, [r7, #12]
 80059da:	681b      	ldr	r3, [r3, #0]
 80059dc:	4a71      	ldr	r2, [pc, #452]	; (8005ba4 <HAL_DMA_Start_IT+0x4a4>)
 80059de:	4293      	cmp	r3, r2
 80059e0:	d036      	beq.n	8005a50 <HAL_DMA_Start_IT+0x350>
 80059e2:	68fb      	ldr	r3, [r7, #12]
 80059e4:	681b      	ldr	r3, [r3, #0]
 80059e6:	4a70      	ldr	r2, [pc, #448]	; (8005ba8 <HAL_DMA_Start_IT+0x4a8>)
 80059e8:	4293      	cmp	r3, r2
 80059ea:	d031      	beq.n	8005a50 <HAL_DMA_Start_IT+0x350>
 80059ec:	68fb      	ldr	r3, [r7, #12]
 80059ee:	681b      	ldr	r3, [r3, #0]
 80059f0:	4a6e      	ldr	r2, [pc, #440]	; (8005bac <HAL_DMA_Start_IT+0x4ac>)
 80059f2:	4293      	cmp	r3, r2
 80059f4:	d02c      	beq.n	8005a50 <HAL_DMA_Start_IT+0x350>
 80059f6:	68fb      	ldr	r3, [r7, #12]
 80059f8:	681b      	ldr	r3, [r3, #0]
 80059fa:	4a6d      	ldr	r2, [pc, #436]	; (8005bb0 <HAL_DMA_Start_IT+0x4b0>)
 80059fc:	4293      	cmp	r3, r2
 80059fe:	d027      	beq.n	8005a50 <HAL_DMA_Start_IT+0x350>
 8005a00:	68fb      	ldr	r3, [r7, #12]
 8005a02:	681b      	ldr	r3, [r3, #0]
 8005a04:	4a6b      	ldr	r2, [pc, #428]	; (8005bb4 <HAL_DMA_Start_IT+0x4b4>)
 8005a06:	4293      	cmp	r3, r2
 8005a08:	d022      	beq.n	8005a50 <HAL_DMA_Start_IT+0x350>
 8005a0a:	68fb      	ldr	r3, [r7, #12]
 8005a0c:	681b      	ldr	r3, [r3, #0]
 8005a0e:	4a6a      	ldr	r2, [pc, #424]	; (8005bb8 <HAL_DMA_Start_IT+0x4b8>)
 8005a10:	4293      	cmp	r3, r2
 8005a12:	d01d      	beq.n	8005a50 <HAL_DMA_Start_IT+0x350>
 8005a14:	68fb      	ldr	r3, [r7, #12]
 8005a16:	681b      	ldr	r3, [r3, #0]
 8005a18:	4a68      	ldr	r2, [pc, #416]	; (8005bbc <HAL_DMA_Start_IT+0x4bc>)
 8005a1a:	4293      	cmp	r3, r2
 8005a1c:	d018      	beq.n	8005a50 <HAL_DMA_Start_IT+0x350>
 8005a1e:	68fb      	ldr	r3, [r7, #12]
 8005a20:	681b      	ldr	r3, [r3, #0]
 8005a22:	4a67      	ldr	r2, [pc, #412]	; (8005bc0 <HAL_DMA_Start_IT+0x4c0>)
 8005a24:	4293      	cmp	r3, r2
 8005a26:	d013      	beq.n	8005a50 <HAL_DMA_Start_IT+0x350>
 8005a28:	68fb      	ldr	r3, [r7, #12]
 8005a2a:	681b      	ldr	r3, [r3, #0]
 8005a2c:	4a65      	ldr	r2, [pc, #404]	; (8005bc4 <HAL_DMA_Start_IT+0x4c4>)
 8005a2e:	4293      	cmp	r3, r2
 8005a30:	d00e      	beq.n	8005a50 <HAL_DMA_Start_IT+0x350>
 8005a32:	68fb      	ldr	r3, [r7, #12]
 8005a34:	681b      	ldr	r3, [r3, #0]
 8005a36:	4a64      	ldr	r2, [pc, #400]	; (8005bc8 <HAL_DMA_Start_IT+0x4c8>)
 8005a38:	4293      	cmp	r3, r2
 8005a3a:	d009      	beq.n	8005a50 <HAL_DMA_Start_IT+0x350>
 8005a3c:	68fb      	ldr	r3, [r7, #12]
 8005a3e:	681b      	ldr	r3, [r3, #0]
 8005a40:	4a62      	ldr	r2, [pc, #392]	; (8005bcc <HAL_DMA_Start_IT+0x4cc>)
 8005a42:	4293      	cmp	r3, r2
 8005a44:	d004      	beq.n	8005a50 <HAL_DMA_Start_IT+0x350>
 8005a46:	68fb      	ldr	r3, [r7, #12]
 8005a48:	681b      	ldr	r3, [r3, #0]
 8005a4a:	4a61      	ldr	r2, [pc, #388]	; (8005bd0 <HAL_DMA_Start_IT+0x4d0>)
 8005a4c:	4293      	cmp	r3, r2
 8005a4e:	d101      	bne.n	8005a54 <HAL_DMA_Start_IT+0x354>
 8005a50:	2301      	movs	r3, #1
 8005a52:	e000      	b.n	8005a56 <HAL_DMA_Start_IT+0x356>
 8005a54:	2300      	movs	r3, #0
 8005a56:	2b00      	cmp	r3, #0
 8005a58:	d01a      	beq.n	8005a90 <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8005a5a:	68fb      	ldr	r3, [r7, #12]
 8005a5c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005a5e:	681b      	ldr	r3, [r3, #0]
 8005a60:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005a64:	2b00      	cmp	r3, #0
 8005a66:	d007      	beq.n	8005a78 <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8005a68:	68fb      	ldr	r3, [r7, #12]
 8005a6a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005a6c:	681a      	ldr	r2, [r3, #0]
 8005a6e:	68fb      	ldr	r3, [r7, #12]
 8005a70:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005a72:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005a76:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 8005a78:	68fb      	ldr	r3, [r7, #12]
 8005a7a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005a7c:	2b00      	cmp	r3, #0
 8005a7e:	d007      	beq.n	8005a90 <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8005a80:	68fb      	ldr	r3, [r7, #12]
 8005a82:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005a84:	681a      	ldr	r2, [r3, #0]
 8005a86:	68fb      	ldr	r3, [r7, #12]
 8005a88:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005a8a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005a8e:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8005a90:	68fb      	ldr	r3, [r7, #12]
 8005a92:	681b      	ldr	r3, [r3, #0]
 8005a94:	4a37      	ldr	r2, [pc, #220]	; (8005b74 <HAL_DMA_Start_IT+0x474>)
 8005a96:	4293      	cmp	r3, r2
 8005a98:	d04a      	beq.n	8005b30 <HAL_DMA_Start_IT+0x430>
 8005a9a:	68fb      	ldr	r3, [r7, #12]
 8005a9c:	681b      	ldr	r3, [r3, #0]
 8005a9e:	4a36      	ldr	r2, [pc, #216]	; (8005b78 <HAL_DMA_Start_IT+0x478>)
 8005aa0:	4293      	cmp	r3, r2
 8005aa2:	d045      	beq.n	8005b30 <HAL_DMA_Start_IT+0x430>
 8005aa4:	68fb      	ldr	r3, [r7, #12]
 8005aa6:	681b      	ldr	r3, [r3, #0]
 8005aa8:	4a34      	ldr	r2, [pc, #208]	; (8005b7c <HAL_DMA_Start_IT+0x47c>)
 8005aaa:	4293      	cmp	r3, r2
 8005aac:	d040      	beq.n	8005b30 <HAL_DMA_Start_IT+0x430>
 8005aae:	68fb      	ldr	r3, [r7, #12]
 8005ab0:	681b      	ldr	r3, [r3, #0]
 8005ab2:	4a33      	ldr	r2, [pc, #204]	; (8005b80 <HAL_DMA_Start_IT+0x480>)
 8005ab4:	4293      	cmp	r3, r2
 8005ab6:	d03b      	beq.n	8005b30 <HAL_DMA_Start_IT+0x430>
 8005ab8:	68fb      	ldr	r3, [r7, #12]
 8005aba:	681b      	ldr	r3, [r3, #0]
 8005abc:	4a31      	ldr	r2, [pc, #196]	; (8005b84 <HAL_DMA_Start_IT+0x484>)
 8005abe:	4293      	cmp	r3, r2
 8005ac0:	d036      	beq.n	8005b30 <HAL_DMA_Start_IT+0x430>
 8005ac2:	68fb      	ldr	r3, [r7, #12]
 8005ac4:	681b      	ldr	r3, [r3, #0]
 8005ac6:	4a30      	ldr	r2, [pc, #192]	; (8005b88 <HAL_DMA_Start_IT+0x488>)
 8005ac8:	4293      	cmp	r3, r2
 8005aca:	d031      	beq.n	8005b30 <HAL_DMA_Start_IT+0x430>
 8005acc:	68fb      	ldr	r3, [r7, #12]
 8005ace:	681b      	ldr	r3, [r3, #0]
 8005ad0:	4a2e      	ldr	r2, [pc, #184]	; (8005b8c <HAL_DMA_Start_IT+0x48c>)
 8005ad2:	4293      	cmp	r3, r2
 8005ad4:	d02c      	beq.n	8005b30 <HAL_DMA_Start_IT+0x430>
 8005ad6:	68fb      	ldr	r3, [r7, #12]
 8005ad8:	681b      	ldr	r3, [r3, #0]
 8005ada:	4a2d      	ldr	r2, [pc, #180]	; (8005b90 <HAL_DMA_Start_IT+0x490>)
 8005adc:	4293      	cmp	r3, r2
 8005ade:	d027      	beq.n	8005b30 <HAL_DMA_Start_IT+0x430>
 8005ae0:	68fb      	ldr	r3, [r7, #12]
 8005ae2:	681b      	ldr	r3, [r3, #0]
 8005ae4:	4a2b      	ldr	r2, [pc, #172]	; (8005b94 <HAL_DMA_Start_IT+0x494>)
 8005ae6:	4293      	cmp	r3, r2
 8005ae8:	d022      	beq.n	8005b30 <HAL_DMA_Start_IT+0x430>
 8005aea:	68fb      	ldr	r3, [r7, #12]
 8005aec:	681b      	ldr	r3, [r3, #0]
 8005aee:	4a2a      	ldr	r2, [pc, #168]	; (8005b98 <HAL_DMA_Start_IT+0x498>)
 8005af0:	4293      	cmp	r3, r2
 8005af2:	d01d      	beq.n	8005b30 <HAL_DMA_Start_IT+0x430>
 8005af4:	68fb      	ldr	r3, [r7, #12]
 8005af6:	681b      	ldr	r3, [r3, #0]
 8005af8:	4a28      	ldr	r2, [pc, #160]	; (8005b9c <HAL_DMA_Start_IT+0x49c>)
 8005afa:	4293      	cmp	r3, r2
 8005afc:	d018      	beq.n	8005b30 <HAL_DMA_Start_IT+0x430>
 8005afe:	68fb      	ldr	r3, [r7, #12]
 8005b00:	681b      	ldr	r3, [r3, #0]
 8005b02:	4a27      	ldr	r2, [pc, #156]	; (8005ba0 <HAL_DMA_Start_IT+0x4a0>)
 8005b04:	4293      	cmp	r3, r2
 8005b06:	d013      	beq.n	8005b30 <HAL_DMA_Start_IT+0x430>
 8005b08:	68fb      	ldr	r3, [r7, #12]
 8005b0a:	681b      	ldr	r3, [r3, #0]
 8005b0c:	4a25      	ldr	r2, [pc, #148]	; (8005ba4 <HAL_DMA_Start_IT+0x4a4>)
 8005b0e:	4293      	cmp	r3, r2
 8005b10:	d00e      	beq.n	8005b30 <HAL_DMA_Start_IT+0x430>
 8005b12:	68fb      	ldr	r3, [r7, #12]
 8005b14:	681b      	ldr	r3, [r3, #0]
 8005b16:	4a24      	ldr	r2, [pc, #144]	; (8005ba8 <HAL_DMA_Start_IT+0x4a8>)
 8005b18:	4293      	cmp	r3, r2
 8005b1a:	d009      	beq.n	8005b30 <HAL_DMA_Start_IT+0x430>
 8005b1c:	68fb      	ldr	r3, [r7, #12]
 8005b1e:	681b      	ldr	r3, [r3, #0]
 8005b20:	4a22      	ldr	r2, [pc, #136]	; (8005bac <HAL_DMA_Start_IT+0x4ac>)
 8005b22:	4293      	cmp	r3, r2
 8005b24:	d004      	beq.n	8005b30 <HAL_DMA_Start_IT+0x430>
 8005b26:	68fb      	ldr	r3, [r7, #12]
 8005b28:	681b      	ldr	r3, [r3, #0]
 8005b2a:	4a21      	ldr	r2, [pc, #132]	; (8005bb0 <HAL_DMA_Start_IT+0x4b0>)
 8005b2c:	4293      	cmp	r3, r2
 8005b2e:	d108      	bne.n	8005b42 <HAL_DMA_Start_IT+0x442>
 8005b30:	68fb      	ldr	r3, [r7, #12]
 8005b32:	681b      	ldr	r3, [r3, #0]
 8005b34:	681a      	ldr	r2, [r3, #0]
 8005b36:	68fb      	ldr	r3, [r7, #12]
 8005b38:	681b      	ldr	r3, [r3, #0]
 8005b3a:	f042 0201 	orr.w	r2, r2, #1
 8005b3e:	601a      	str	r2, [r3, #0]
 8005b40:	e012      	b.n	8005b68 <HAL_DMA_Start_IT+0x468>
 8005b42:	68fb      	ldr	r3, [r7, #12]
 8005b44:	681b      	ldr	r3, [r3, #0]
 8005b46:	681a      	ldr	r2, [r3, #0]
 8005b48:	68fb      	ldr	r3, [r7, #12]
 8005b4a:	681b      	ldr	r3, [r3, #0]
 8005b4c:	f042 0201 	orr.w	r2, r2, #1
 8005b50:	601a      	str	r2, [r3, #0]
 8005b52:	e009      	b.n	8005b68 <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 8005b54:	68fb      	ldr	r3, [r7, #12]
 8005b56:	2200      	movs	r2, #0
 8005b58:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8005b5c:	68fb      	ldr	r3, [r7, #12]
 8005b5e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005b62:	655a      	str	r2, [r3, #84]	; 0x54

    /* Return error status */
    status = HAL_ERROR;
 8005b64:	2301      	movs	r3, #1
 8005b66:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8005b68:	7dfb      	ldrb	r3, [r7, #23]
}
 8005b6a:	4618      	mov	r0, r3
 8005b6c:	3718      	adds	r7, #24
 8005b6e:	46bd      	mov	sp, r7
 8005b70:	bd80      	pop	{r7, pc}
 8005b72:	bf00      	nop
 8005b74:	40020010 	.word	0x40020010
 8005b78:	40020028 	.word	0x40020028
 8005b7c:	40020040 	.word	0x40020040
 8005b80:	40020058 	.word	0x40020058
 8005b84:	40020070 	.word	0x40020070
 8005b88:	40020088 	.word	0x40020088
 8005b8c:	400200a0 	.word	0x400200a0
 8005b90:	400200b8 	.word	0x400200b8
 8005b94:	40020410 	.word	0x40020410
 8005b98:	40020428 	.word	0x40020428
 8005b9c:	40020440 	.word	0x40020440
 8005ba0:	40020458 	.word	0x40020458
 8005ba4:	40020470 	.word	0x40020470
 8005ba8:	40020488 	.word	0x40020488
 8005bac:	400204a0 	.word	0x400204a0
 8005bb0:	400204b8 	.word	0x400204b8
 8005bb4:	58025408 	.word	0x58025408
 8005bb8:	5802541c 	.word	0x5802541c
 8005bbc:	58025430 	.word	0x58025430
 8005bc0:	58025444 	.word	0x58025444
 8005bc4:	58025458 	.word	0x58025458
 8005bc8:	5802546c 	.word	0x5802546c
 8005bcc:	58025480 	.word	0x58025480
 8005bd0:	58025494 	.word	0x58025494

08005bd4 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8005bd4:	b580      	push	{r7, lr}
 8005bd6:	b08a      	sub	sp, #40	; 0x28
 8005bd8:	af00      	add	r7, sp, #0
 8005bda:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 8005bdc:	2300      	movs	r3, #0
 8005bde:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 8005be0:	4b67      	ldr	r3, [pc, #412]	; (8005d80 <HAL_DMA_IRQHandler+0x1ac>)
 8005be2:	681b      	ldr	r3, [r3, #0]
 8005be4:	4a67      	ldr	r2, [pc, #412]	; (8005d84 <HAL_DMA_IRQHandler+0x1b0>)
 8005be6:	fba2 2303 	umull	r2, r3, r2, r3
 8005bea:	0a9b      	lsrs	r3, r3, #10
 8005bec:	627b      	str	r3, [r7, #36]	; 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005bf2:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005bf8:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 8005bfa:	6a3b      	ldr	r3, [r7, #32]
 8005bfc:	681b      	ldr	r3, [r3, #0]
 8005bfe:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 8005c00:	69fb      	ldr	r3, [r7, #28]
 8005c02:	681b      	ldr	r3, [r3, #0]
 8005c04:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	681b      	ldr	r3, [r3, #0]
 8005c0a:	4a5f      	ldr	r2, [pc, #380]	; (8005d88 <HAL_DMA_IRQHandler+0x1b4>)
 8005c0c:	4293      	cmp	r3, r2
 8005c0e:	d04a      	beq.n	8005ca6 <HAL_DMA_IRQHandler+0xd2>
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	681b      	ldr	r3, [r3, #0]
 8005c14:	4a5d      	ldr	r2, [pc, #372]	; (8005d8c <HAL_DMA_IRQHandler+0x1b8>)
 8005c16:	4293      	cmp	r3, r2
 8005c18:	d045      	beq.n	8005ca6 <HAL_DMA_IRQHandler+0xd2>
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	681b      	ldr	r3, [r3, #0]
 8005c1e:	4a5c      	ldr	r2, [pc, #368]	; (8005d90 <HAL_DMA_IRQHandler+0x1bc>)
 8005c20:	4293      	cmp	r3, r2
 8005c22:	d040      	beq.n	8005ca6 <HAL_DMA_IRQHandler+0xd2>
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	681b      	ldr	r3, [r3, #0]
 8005c28:	4a5a      	ldr	r2, [pc, #360]	; (8005d94 <HAL_DMA_IRQHandler+0x1c0>)
 8005c2a:	4293      	cmp	r3, r2
 8005c2c:	d03b      	beq.n	8005ca6 <HAL_DMA_IRQHandler+0xd2>
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	681b      	ldr	r3, [r3, #0]
 8005c32:	4a59      	ldr	r2, [pc, #356]	; (8005d98 <HAL_DMA_IRQHandler+0x1c4>)
 8005c34:	4293      	cmp	r3, r2
 8005c36:	d036      	beq.n	8005ca6 <HAL_DMA_IRQHandler+0xd2>
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	681b      	ldr	r3, [r3, #0]
 8005c3c:	4a57      	ldr	r2, [pc, #348]	; (8005d9c <HAL_DMA_IRQHandler+0x1c8>)
 8005c3e:	4293      	cmp	r3, r2
 8005c40:	d031      	beq.n	8005ca6 <HAL_DMA_IRQHandler+0xd2>
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	681b      	ldr	r3, [r3, #0]
 8005c46:	4a56      	ldr	r2, [pc, #344]	; (8005da0 <HAL_DMA_IRQHandler+0x1cc>)
 8005c48:	4293      	cmp	r3, r2
 8005c4a:	d02c      	beq.n	8005ca6 <HAL_DMA_IRQHandler+0xd2>
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	681b      	ldr	r3, [r3, #0]
 8005c50:	4a54      	ldr	r2, [pc, #336]	; (8005da4 <HAL_DMA_IRQHandler+0x1d0>)
 8005c52:	4293      	cmp	r3, r2
 8005c54:	d027      	beq.n	8005ca6 <HAL_DMA_IRQHandler+0xd2>
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	681b      	ldr	r3, [r3, #0]
 8005c5a:	4a53      	ldr	r2, [pc, #332]	; (8005da8 <HAL_DMA_IRQHandler+0x1d4>)
 8005c5c:	4293      	cmp	r3, r2
 8005c5e:	d022      	beq.n	8005ca6 <HAL_DMA_IRQHandler+0xd2>
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	681b      	ldr	r3, [r3, #0]
 8005c64:	4a51      	ldr	r2, [pc, #324]	; (8005dac <HAL_DMA_IRQHandler+0x1d8>)
 8005c66:	4293      	cmp	r3, r2
 8005c68:	d01d      	beq.n	8005ca6 <HAL_DMA_IRQHandler+0xd2>
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	681b      	ldr	r3, [r3, #0]
 8005c6e:	4a50      	ldr	r2, [pc, #320]	; (8005db0 <HAL_DMA_IRQHandler+0x1dc>)
 8005c70:	4293      	cmp	r3, r2
 8005c72:	d018      	beq.n	8005ca6 <HAL_DMA_IRQHandler+0xd2>
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	681b      	ldr	r3, [r3, #0]
 8005c78:	4a4e      	ldr	r2, [pc, #312]	; (8005db4 <HAL_DMA_IRQHandler+0x1e0>)
 8005c7a:	4293      	cmp	r3, r2
 8005c7c:	d013      	beq.n	8005ca6 <HAL_DMA_IRQHandler+0xd2>
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	681b      	ldr	r3, [r3, #0]
 8005c82:	4a4d      	ldr	r2, [pc, #308]	; (8005db8 <HAL_DMA_IRQHandler+0x1e4>)
 8005c84:	4293      	cmp	r3, r2
 8005c86:	d00e      	beq.n	8005ca6 <HAL_DMA_IRQHandler+0xd2>
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	681b      	ldr	r3, [r3, #0]
 8005c8c:	4a4b      	ldr	r2, [pc, #300]	; (8005dbc <HAL_DMA_IRQHandler+0x1e8>)
 8005c8e:	4293      	cmp	r3, r2
 8005c90:	d009      	beq.n	8005ca6 <HAL_DMA_IRQHandler+0xd2>
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	681b      	ldr	r3, [r3, #0]
 8005c96:	4a4a      	ldr	r2, [pc, #296]	; (8005dc0 <HAL_DMA_IRQHandler+0x1ec>)
 8005c98:	4293      	cmp	r3, r2
 8005c9a:	d004      	beq.n	8005ca6 <HAL_DMA_IRQHandler+0xd2>
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	681b      	ldr	r3, [r3, #0]
 8005ca0:	4a48      	ldr	r2, [pc, #288]	; (8005dc4 <HAL_DMA_IRQHandler+0x1f0>)
 8005ca2:	4293      	cmp	r3, r2
 8005ca4:	d101      	bne.n	8005caa <HAL_DMA_IRQHandler+0xd6>
 8005ca6:	2301      	movs	r3, #1
 8005ca8:	e000      	b.n	8005cac <HAL_DMA_IRQHandler+0xd8>
 8005caa:	2300      	movs	r3, #0
 8005cac:	2b00      	cmp	r3, #0
 8005cae:	f000 842b 	beq.w	8006508 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005cb6:	f003 031f 	and.w	r3, r3, #31
 8005cba:	2208      	movs	r2, #8
 8005cbc:	409a      	lsls	r2, r3
 8005cbe:	69bb      	ldr	r3, [r7, #24]
 8005cc0:	4013      	ands	r3, r2
 8005cc2:	2b00      	cmp	r3, #0
 8005cc4:	f000 80a2 	beq.w	8005e0c <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	681b      	ldr	r3, [r3, #0]
 8005ccc:	4a2e      	ldr	r2, [pc, #184]	; (8005d88 <HAL_DMA_IRQHandler+0x1b4>)
 8005cce:	4293      	cmp	r3, r2
 8005cd0:	d04a      	beq.n	8005d68 <HAL_DMA_IRQHandler+0x194>
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	681b      	ldr	r3, [r3, #0]
 8005cd6:	4a2d      	ldr	r2, [pc, #180]	; (8005d8c <HAL_DMA_IRQHandler+0x1b8>)
 8005cd8:	4293      	cmp	r3, r2
 8005cda:	d045      	beq.n	8005d68 <HAL_DMA_IRQHandler+0x194>
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	681b      	ldr	r3, [r3, #0]
 8005ce0:	4a2b      	ldr	r2, [pc, #172]	; (8005d90 <HAL_DMA_IRQHandler+0x1bc>)
 8005ce2:	4293      	cmp	r3, r2
 8005ce4:	d040      	beq.n	8005d68 <HAL_DMA_IRQHandler+0x194>
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	681b      	ldr	r3, [r3, #0]
 8005cea:	4a2a      	ldr	r2, [pc, #168]	; (8005d94 <HAL_DMA_IRQHandler+0x1c0>)
 8005cec:	4293      	cmp	r3, r2
 8005cee:	d03b      	beq.n	8005d68 <HAL_DMA_IRQHandler+0x194>
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	681b      	ldr	r3, [r3, #0]
 8005cf4:	4a28      	ldr	r2, [pc, #160]	; (8005d98 <HAL_DMA_IRQHandler+0x1c4>)
 8005cf6:	4293      	cmp	r3, r2
 8005cf8:	d036      	beq.n	8005d68 <HAL_DMA_IRQHandler+0x194>
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	681b      	ldr	r3, [r3, #0]
 8005cfe:	4a27      	ldr	r2, [pc, #156]	; (8005d9c <HAL_DMA_IRQHandler+0x1c8>)
 8005d00:	4293      	cmp	r3, r2
 8005d02:	d031      	beq.n	8005d68 <HAL_DMA_IRQHandler+0x194>
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	681b      	ldr	r3, [r3, #0]
 8005d08:	4a25      	ldr	r2, [pc, #148]	; (8005da0 <HAL_DMA_IRQHandler+0x1cc>)
 8005d0a:	4293      	cmp	r3, r2
 8005d0c:	d02c      	beq.n	8005d68 <HAL_DMA_IRQHandler+0x194>
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	681b      	ldr	r3, [r3, #0]
 8005d12:	4a24      	ldr	r2, [pc, #144]	; (8005da4 <HAL_DMA_IRQHandler+0x1d0>)
 8005d14:	4293      	cmp	r3, r2
 8005d16:	d027      	beq.n	8005d68 <HAL_DMA_IRQHandler+0x194>
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	681b      	ldr	r3, [r3, #0]
 8005d1c:	4a22      	ldr	r2, [pc, #136]	; (8005da8 <HAL_DMA_IRQHandler+0x1d4>)
 8005d1e:	4293      	cmp	r3, r2
 8005d20:	d022      	beq.n	8005d68 <HAL_DMA_IRQHandler+0x194>
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	681b      	ldr	r3, [r3, #0]
 8005d26:	4a21      	ldr	r2, [pc, #132]	; (8005dac <HAL_DMA_IRQHandler+0x1d8>)
 8005d28:	4293      	cmp	r3, r2
 8005d2a:	d01d      	beq.n	8005d68 <HAL_DMA_IRQHandler+0x194>
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	681b      	ldr	r3, [r3, #0]
 8005d30:	4a1f      	ldr	r2, [pc, #124]	; (8005db0 <HAL_DMA_IRQHandler+0x1dc>)
 8005d32:	4293      	cmp	r3, r2
 8005d34:	d018      	beq.n	8005d68 <HAL_DMA_IRQHandler+0x194>
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	681b      	ldr	r3, [r3, #0]
 8005d3a:	4a1e      	ldr	r2, [pc, #120]	; (8005db4 <HAL_DMA_IRQHandler+0x1e0>)
 8005d3c:	4293      	cmp	r3, r2
 8005d3e:	d013      	beq.n	8005d68 <HAL_DMA_IRQHandler+0x194>
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	681b      	ldr	r3, [r3, #0]
 8005d44:	4a1c      	ldr	r2, [pc, #112]	; (8005db8 <HAL_DMA_IRQHandler+0x1e4>)
 8005d46:	4293      	cmp	r3, r2
 8005d48:	d00e      	beq.n	8005d68 <HAL_DMA_IRQHandler+0x194>
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	681b      	ldr	r3, [r3, #0]
 8005d4e:	4a1b      	ldr	r2, [pc, #108]	; (8005dbc <HAL_DMA_IRQHandler+0x1e8>)
 8005d50:	4293      	cmp	r3, r2
 8005d52:	d009      	beq.n	8005d68 <HAL_DMA_IRQHandler+0x194>
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	681b      	ldr	r3, [r3, #0]
 8005d58:	4a19      	ldr	r2, [pc, #100]	; (8005dc0 <HAL_DMA_IRQHandler+0x1ec>)
 8005d5a:	4293      	cmp	r3, r2
 8005d5c:	d004      	beq.n	8005d68 <HAL_DMA_IRQHandler+0x194>
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	681b      	ldr	r3, [r3, #0]
 8005d62:	4a18      	ldr	r2, [pc, #96]	; (8005dc4 <HAL_DMA_IRQHandler+0x1f0>)
 8005d64:	4293      	cmp	r3, r2
 8005d66:	d12f      	bne.n	8005dc8 <HAL_DMA_IRQHandler+0x1f4>
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	681b      	ldr	r3, [r3, #0]
 8005d6c:	681b      	ldr	r3, [r3, #0]
 8005d6e:	f003 0304 	and.w	r3, r3, #4
 8005d72:	2b00      	cmp	r3, #0
 8005d74:	bf14      	ite	ne
 8005d76:	2301      	movne	r3, #1
 8005d78:	2300      	moveq	r3, #0
 8005d7a:	b2db      	uxtb	r3, r3
 8005d7c:	e02e      	b.n	8005ddc <HAL_DMA_IRQHandler+0x208>
 8005d7e:	bf00      	nop
 8005d80:	24000010 	.word	0x24000010
 8005d84:	1b4e81b5 	.word	0x1b4e81b5
 8005d88:	40020010 	.word	0x40020010
 8005d8c:	40020028 	.word	0x40020028
 8005d90:	40020040 	.word	0x40020040
 8005d94:	40020058 	.word	0x40020058
 8005d98:	40020070 	.word	0x40020070
 8005d9c:	40020088 	.word	0x40020088
 8005da0:	400200a0 	.word	0x400200a0
 8005da4:	400200b8 	.word	0x400200b8
 8005da8:	40020410 	.word	0x40020410
 8005dac:	40020428 	.word	0x40020428
 8005db0:	40020440 	.word	0x40020440
 8005db4:	40020458 	.word	0x40020458
 8005db8:	40020470 	.word	0x40020470
 8005dbc:	40020488 	.word	0x40020488
 8005dc0:	400204a0 	.word	0x400204a0
 8005dc4:	400204b8 	.word	0x400204b8
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	681b      	ldr	r3, [r3, #0]
 8005dcc:	681b      	ldr	r3, [r3, #0]
 8005dce:	f003 0308 	and.w	r3, r3, #8
 8005dd2:	2b00      	cmp	r3, #0
 8005dd4:	bf14      	ite	ne
 8005dd6:	2301      	movne	r3, #1
 8005dd8:	2300      	moveq	r3, #0
 8005dda:	b2db      	uxtb	r3, r3
 8005ddc:	2b00      	cmp	r3, #0
 8005dde:	d015      	beq.n	8005e0c <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	681b      	ldr	r3, [r3, #0]
 8005de4:	681a      	ldr	r2, [r3, #0]
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	681b      	ldr	r3, [r3, #0]
 8005dea:	f022 0204 	bic.w	r2, r2, #4
 8005dee:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005df4:	f003 031f 	and.w	r3, r3, #31
 8005df8:	2208      	movs	r2, #8
 8005dfa:	409a      	lsls	r2, r3
 8005dfc:	6a3b      	ldr	r3, [r7, #32]
 8005dfe:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005e04:	f043 0201 	orr.w	r2, r3, #1
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005e10:	f003 031f 	and.w	r3, r3, #31
 8005e14:	69ba      	ldr	r2, [r7, #24]
 8005e16:	fa22 f303 	lsr.w	r3, r2, r3
 8005e1a:	f003 0301 	and.w	r3, r3, #1
 8005e1e:	2b00      	cmp	r3, #0
 8005e20:	d06e      	beq.n	8005f00 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	681b      	ldr	r3, [r3, #0]
 8005e26:	4a69      	ldr	r2, [pc, #420]	; (8005fcc <HAL_DMA_IRQHandler+0x3f8>)
 8005e28:	4293      	cmp	r3, r2
 8005e2a:	d04a      	beq.n	8005ec2 <HAL_DMA_IRQHandler+0x2ee>
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	681b      	ldr	r3, [r3, #0]
 8005e30:	4a67      	ldr	r2, [pc, #412]	; (8005fd0 <HAL_DMA_IRQHandler+0x3fc>)
 8005e32:	4293      	cmp	r3, r2
 8005e34:	d045      	beq.n	8005ec2 <HAL_DMA_IRQHandler+0x2ee>
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	681b      	ldr	r3, [r3, #0]
 8005e3a:	4a66      	ldr	r2, [pc, #408]	; (8005fd4 <HAL_DMA_IRQHandler+0x400>)
 8005e3c:	4293      	cmp	r3, r2
 8005e3e:	d040      	beq.n	8005ec2 <HAL_DMA_IRQHandler+0x2ee>
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	681b      	ldr	r3, [r3, #0]
 8005e44:	4a64      	ldr	r2, [pc, #400]	; (8005fd8 <HAL_DMA_IRQHandler+0x404>)
 8005e46:	4293      	cmp	r3, r2
 8005e48:	d03b      	beq.n	8005ec2 <HAL_DMA_IRQHandler+0x2ee>
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	681b      	ldr	r3, [r3, #0]
 8005e4e:	4a63      	ldr	r2, [pc, #396]	; (8005fdc <HAL_DMA_IRQHandler+0x408>)
 8005e50:	4293      	cmp	r3, r2
 8005e52:	d036      	beq.n	8005ec2 <HAL_DMA_IRQHandler+0x2ee>
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	681b      	ldr	r3, [r3, #0]
 8005e58:	4a61      	ldr	r2, [pc, #388]	; (8005fe0 <HAL_DMA_IRQHandler+0x40c>)
 8005e5a:	4293      	cmp	r3, r2
 8005e5c:	d031      	beq.n	8005ec2 <HAL_DMA_IRQHandler+0x2ee>
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	681b      	ldr	r3, [r3, #0]
 8005e62:	4a60      	ldr	r2, [pc, #384]	; (8005fe4 <HAL_DMA_IRQHandler+0x410>)
 8005e64:	4293      	cmp	r3, r2
 8005e66:	d02c      	beq.n	8005ec2 <HAL_DMA_IRQHandler+0x2ee>
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	681b      	ldr	r3, [r3, #0]
 8005e6c:	4a5e      	ldr	r2, [pc, #376]	; (8005fe8 <HAL_DMA_IRQHandler+0x414>)
 8005e6e:	4293      	cmp	r3, r2
 8005e70:	d027      	beq.n	8005ec2 <HAL_DMA_IRQHandler+0x2ee>
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	681b      	ldr	r3, [r3, #0]
 8005e76:	4a5d      	ldr	r2, [pc, #372]	; (8005fec <HAL_DMA_IRQHandler+0x418>)
 8005e78:	4293      	cmp	r3, r2
 8005e7a:	d022      	beq.n	8005ec2 <HAL_DMA_IRQHandler+0x2ee>
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	681b      	ldr	r3, [r3, #0]
 8005e80:	4a5b      	ldr	r2, [pc, #364]	; (8005ff0 <HAL_DMA_IRQHandler+0x41c>)
 8005e82:	4293      	cmp	r3, r2
 8005e84:	d01d      	beq.n	8005ec2 <HAL_DMA_IRQHandler+0x2ee>
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	681b      	ldr	r3, [r3, #0]
 8005e8a:	4a5a      	ldr	r2, [pc, #360]	; (8005ff4 <HAL_DMA_IRQHandler+0x420>)
 8005e8c:	4293      	cmp	r3, r2
 8005e8e:	d018      	beq.n	8005ec2 <HAL_DMA_IRQHandler+0x2ee>
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	681b      	ldr	r3, [r3, #0]
 8005e94:	4a58      	ldr	r2, [pc, #352]	; (8005ff8 <HAL_DMA_IRQHandler+0x424>)
 8005e96:	4293      	cmp	r3, r2
 8005e98:	d013      	beq.n	8005ec2 <HAL_DMA_IRQHandler+0x2ee>
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	681b      	ldr	r3, [r3, #0]
 8005e9e:	4a57      	ldr	r2, [pc, #348]	; (8005ffc <HAL_DMA_IRQHandler+0x428>)
 8005ea0:	4293      	cmp	r3, r2
 8005ea2:	d00e      	beq.n	8005ec2 <HAL_DMA_IRQHandler+0x2ee>
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	681b      	ldr	r3, [r3, #0]
 8005ea8:	4a55      	ldr	r2, [pc, #340]	; (8006000 <HAL_DMA_IRQHandler+0x42c>)
 8005eaa:	4293      	cmp	r3, r2
 8005eac:	d009      	beq.n	8005ec2 <HAL_DMA_IRQHandler+0x2ee>
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	681b      	ldr	r3, [r3, #0]
 8005eb2:	4a54      	ldr	r2, [pc, #336]	; (8006004 <HAL_DMA_IRQHandler+0x430>)
 8005eb4:	4293      	cmp	r3, r2
 8005eb6:	d004      	beq.n	8005ec2 <HAL_DMA_IRQHandler+0x2ee>
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	681b      	ldr	r3, [r3, #0]
 8005ebc:	4a52      	ldr	r2, [pc, #328]	; (8006008 <HAL_DMA_IRQHandler+0x434>)
 8005ebe:	4293      	cmp	r3, r2
 8005ec0:	d10a      	bne.n	8005ed8 <HAL_DMA_IRQHandler+0x304>
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	681b      	ldr	r3, [r3, #0]
 8005ec6:	695b      	ldr	r3, [r3, #20]
 8005ec8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005ecc:	2b00      	cmp	r3, #0
 8005ece:	bf14      	ite	ne
 8005ed0:	2301      	movne	r3, #1
 8005ed2:	2300      	moveq	r3, #0
 8005ed4:	b2db      	uxtb	r3, r3
 8005ed6:	e003      	b.n	8005ee0 <HAL_DMA_IRQHandler+0x30c>
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	681b      	ldr	r3, [r3, #0]
 8005edc:	681b      	ldr	r3, [r3, #0]
 8005ede:	2300      	movs	r3, #0
 8005ee0:	2b00      	cmp	r3, #0
 8005ee2:	d00d      	beq.n	8005f00 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005ee8:	f003 031f 	and.w	r3, r3, #31
 8005eec:	2201      	movs	r2, #1
 8005eee:	409a      	lsls	r2, r3
 8005ef0:	6a3b      	ldr	r3, [r7, #32]
 8005ef2:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005ef8:	f043 0202 	orr.w	r2, r3, #2
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005f04:	f003 031f 	and.w	r3, r3, #31
 8005f08:	2204      	movs	r2, #4
 8005f0a:	409a      	lsls	r2, r3
 8005f0c:	69bb      	ldr	r3, [r7, #24]
 8005f0e:	4013      	ands	r3, r2
 8005f10:	2b00      	cmp	r3, #0
 8005f12:	f000 808f 	beq.w	8006034 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	681b      	ldr	r3, [r3, #0]
 8005f1a:	4a2c      	ldr	r2, [pc, #176]	; (8005fcc <HAL_DMA_IRQHandler+0x3f8>)
 8005f1c:	4293      	cmp	r3, r2
 8005f1e:	d04a      	beq.n	8005fb6 <HAL_DMA_IRQHandler+0x3e2>
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	681b      	ldr	r3, [r3, #0]
 8005f24:	4a2a      	ldr	r2, [pc, #168]	; (8005fd0 <HAL_DMA_IRQHandler+0x3fc>)
 8005f26:	4293      	cmp	r3, r2
 8005f28:	d045      	beq.n	8005fb6 <HAL_DMA_IRQHandler+0x3e2>
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	681b      	ldr	r3, [r3, #0]
 8005f2e:	4a29      	ldr	r2, [pc, #164]	; (8005fd4 <HAL_DMA_IRQHandler+0x400>)
 8005f30:	4293      	cmp	r3, r2
 8005f32:	d040      	beq.n	8005fb6 <HAL_DMA_IRQHandler+0x3e2>
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	681b      	ldr	r3, [r3, #0]
 8005f38:	4a27      	ldr	r2, [pc, #156]	; (8005fd8 <HAL_DMA_IRQHandler+0x404>)
 8005f3a:	4293      	cmp	r3, r2
 8005f3c:	d03b      	beq.n	8005fb6 <HAL_DMA_IRQHandler+0x3e2>
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	681b      	ldr	r3, [r3, #0]
 8005f42:	4a26      	ldr	r2, [pc, #152]	; (8005fdc <HAL_DMA_IRQHandler+0x408>)
 8005f44:	4293      	cmp	r3, r2
 8005f46:	d036      	beq.n	8005fb6 <HAL_DMA_IRQHandler+0x3e2>
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	681b      	ldr	r3, [r3, #0]
 8005f4c:	4a24      	ldr	r2, [pc, #144]	; (8005fe0 <HAL_DMA_IRQHandler+0x40c>)
 8005f4e:	4293      	cmp	r3, r2
 8005f50:	d031      	beq.n	8005fb6 <HAL_DMA_IRQHandler+0x3e2>
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	681b      	ldr	r3, [r3, #0]
 8005f56:	4a23      	ldr	r2, [pc, #140]	; (8005fe4 <HAL_DMA_IRQHandler+0x410>)
 8005f58:	4293      	cmp	r3, r2
 8005f5a:	d02c      	beq.n	8005fb6 <HAL_DMA_IRQHandler+0x3e2>
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	681b      	ldr	r3, [r3, #0]
 8005f60:	4a21      	ldr	r2, [pc, #132]	; (8005fe8 <HAL_DMA_IRQHandler+0x414>)
 8005f62:	4293      	cmp	r3, r2
 8005f64:	d027      	beq.n	8005fb6 <HAL_DMA_IRQHandler+0x3e2>
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	681b      	ldr	r3, [r3, #0]
 8005f6a:	4a20      	ldr	r2, [pc, #128]	; (8005fec <HAL_DMA_IRQHandler+0x418>)
 8005f6c:	4293      	cmp	r3, r2
 8005f6e:	d022      	beq.n	8005fb6 <HAL_DMA_IRQHandler+0x3e2>
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	681b      	ldr	r3, [r3, #0]
 8005f74:	4a1e      	ldr	r2, [pc, #120]	; (8005ff0 <HAL_DMA_IRQHandler+0x41c>)
 8005f76:	4293      	cmp	r3, r2
 8005f78:	d01d      	beq.n	8005fb6 <HAL_DMA_IRQHandler+0x3e2>
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	681b      	ldr	r3, [r3, #0]
 8005f7e:	4a1d      	ldr	r2, [pc, #116]	; (8005ff4 <HAL_DMA_IRQHandler+0x420>)
 8005f80:	4293      	cmp	r3, r2
 8005f82:	d018      	beq.n	8005fb6 <HAL_DMA_IRQHandler+0x3e2>
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	681b      	ldr	r3, [r3, #0]
 8005f88:	4a1b      	ldr	r2, [pc, #108]	; (8005ff8 <HAL_DMA_IRQHandler+0x424>)
 8005f8a:	4293      	cmp	r3, r2
 8005f8c:	d013      	beq.n	8005fb6 <HAL_DMA_IRQHandler+0x3e2>
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	681b      	ldr	r3, [r3, #0]
 8005f92:	4a1a      	ldr	r2, [pc, #104]	; (8005ffc <HAL_DMA_IRQHandler+0x428>)
 8005f94:	4293      	cmp	r3, r2
 8005f96:	d00e      	beq.n	8005fb6 <HAL_DMA_IRQHandler+0x3e2>
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	681b      	ldr	r3, [r3, #0]
 8005f9c:	4a18      	ldr	r2, [pc, #96]	; (8006000 <HAL_DMA_IRQHandler+0x42c>)
 8005f9e:	4293      	cmp	r3, r2
 8005fa0:	d009      	beq.n	8005fb6 <HAL_DMA_IRQHandler+0x3e2>
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	681b      	ldr	r3, [r3, #0]
 8005fa6:	4a17      	ldr	r2, [pc, #92]	; (8006004 <HAL_DMA_IRQHandler+0x430>)
 8005fa8:	4293      	cmp	r3, r2
 8005faa:	d004      	beq.n	8005fb6 <HAL_DMA_IRQHandler+0x3e2>
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	681b      	ldr	r3, [r3, #0]
 8005fb0:	4a15      	ldr	r2, [pc, #84]	; (8006008 <HAL_DMA_IRQHandler+0x434>)
 8005fb2:	4293      	cmp	r3, r2
 8005fb4:	d12a      	bne.n	800600c <HAL_DMA_IRQHandler+0x438>
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	681b      	ldr	r3, [r3, #0]
 8005fba:	681b      	ldr	r3, [r3, #0]
 8005fbc:	f003 0302 	and.w	r3, r3, #2
 8005fc0:	2b00      	cmp	r3, #0
 8005fc2:	bf14      	ite	ne
 8005fc4:	2301      	movne	r3, #1
 8005fc6:	2300      	moveq	r3, #0
 8005fc8:	b2db      	uxtb	r3, r3
 8005fca:	e023      	b.n	8006014 <HAL_DMA_IRQHandler+0x440>
 8005fcc:	40020010 	.word	0x40020010
 8005fd0:	40020028 	.word	0x40020028
 8005fd4:	40020040 	.word	0x40020040
 8005fd8:	40020058 	.word	0x40020058
 8005fdc:	40020070 	.word	0x40020070
 8005fe0:	40020088 	.word	0x40020088
 8005fe4:	400200a0 	.word	0x400200a0
 8005fe8:	400200b8 	.word	0x400200b8
 8005fec:	40020410 	.word	0x40020410
 8005ff0:	40020428 	.word	0x40020428
 8005ff4:	40020440 	.word	0x40020440
 8005ff8:	40020458 	.word	0x40020458
 8005ffc:	40020470 	.word	0x40020470
 8006000:	40020488 	.word	0x40020488
 8006004:	400204a0 	.word	0x400204a0
 8006008:	400204b8 	.word	0x400204b8
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	681b      	ldr	r3, [r3, #0]
 8006010:	681b      	ldr	r3, [r3, #0]
 8006012:	2300      	movs	r3, #0
 8006014:	2b00      	cmp	r3, #0
 8006016:	d00d      	beq.n	8006034 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800601c:	f003 031f 	and.w	r3, r3, #31
 8006020:	2204      	movs	r2, #4
 8006022:	409a      	lsls	r2, r3
 8006024:	6a3b      	ldr	r3, [r7, #32]
 8006026:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800602c:	f043 0204 	orr.w	r2, r3, #4
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006038:	f003 031f 	and.w	r3, r3, #31
 800603c:	2210      	movs	r2, #16
 800603e:	409a      	lsls	r2, r3
 8006040:	69bb      	ldr	r3, [r7, #24]
 8006042:	4013      	ands	r3, r2
 8006044:	2b00      	cmp	r3, #0
 8006046:	f000 80a6 	beq.w	8006196 <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	681b      	ldr	r3, [r3, #0]
 800604e:	4a85      	ldr	r2, [pc, #532]	; (8006264 <HAL_DMA_IRQHandler+0x690>)
 8006050:	4293      	cmp	r3, r2
 8006052:	d04a      	beq.n	80060ea <HAL_DMA_IRQHandler+0x516>
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	681b      	ldr	r3, [r3, #0]
 8006058:	4a83      	ldr	r2, [pc, #524]	; (8006268 <HAL_DMA_IRQHandler+0x694>)
 800605a:	4293      	cmp	r3, r2
 800605c:	d045      	beq.n	80060ea <HAL_DMA_IRQHandler+0x516>
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	681b      	ldr	r3, [r3, #0]
 8006062:	4a82      	ldr	r2, [pc, #520]	; (800626c <HAL_DMA_IRQHandler+0x698>)
 8006064:	4293      	cmp	r3, r2
 8006066:	d040      	beq.n	80060ea <HAL_DMA_IRQHandler+0x516>
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	681b      	ldr	r3, [r3, #0]
 800606c:	4a80      	ldr	r2, [pc, #512]	; (8006270 <HAL_DMA_IRQHandler+0x69c>)
 800606e:	4293      	cmp	r3, r2
 8006070:	d03b      	beq.n	80060ea <HAL_DMA_IRQHandler+0x516>
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	681b      	ldr	r3, [r3, #0]
 8006076:	4a7f      	ldr	r2, [pc, #508]	; (8006274 <HAL_DMA_IRQHandler+0x6a0>)
 8006078:	4293      	cmp	r3, r2
 800607a:	d036      	beq.n	80060ea <HAL_DMA_IRQHandler+0x516>
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	681b      	ldr	r3, [r3, #0]
 8006080:	4a7d      	ldr	r2, [pc, #500]	; (8006278 <HAL_DMA_IRQHandler+0x6a4>)
 8006082:	4293      	cmp	r3, r2
 8006084:	d031      	beq.n	80060ea <HAL_DMA_IRQHandler+0x516>
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	681b      	ldr	r3, [r3, #0]
 800608a:	4a7c      	ldr	r2, [pc, #496]	; (800627c <HAL_DMA_IRQHandler+0x6a8>)
 800608c:	4293      	cmp	r3, r2
 800608e:	d02c      	beq.n	80060ea <HAL_DMA_IRQHandler+0x516>
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	681b      	ldr	r3, [r3, #0]
 8006094:	4a7a      	ldr	r2, [pc, #488]	; (8006280 <HAL_DMA_IRQHandler+0x6ac>)
 8006096:	4293      	cmp	r3, r2
 8006098:	d027      	beq.n	80060ea <HAL_DMA_IRQHandler+0x516>
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	681b      	ldr	r3, [r3, #0]
 800609e:	4a79      	ldr	r2, [pc, #484]	; (8006284 <HAL_DMA_IRQHandler+0x6b0>)
 80060a0:	4293      	cmp	r3, r2
 80060a2:	d022      	beq.n	80060ea <HAL_DMA_IRQHandler+0x516>
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	681b      	ldr	r3, [r3, #0]
 80060a8:	4a77      	ldr	r2, [pc, #476]	; (8006288 <HAL_DMA_IRQHandler+0x6b4>)
 80060aa:	4293      	cmp	r3, r2
 80060ac:	d01d      	beq.n	80060ea <HAL_DMA_IRQHandler+0x516>
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	681b      	ldr	r3, [r3, #0]
 80060b2:	4a76      	ldr	r2, [pc, #472]	; (800628c <HAL_DMA_IRQHandler+0x6b8>)
 80060b4:	4293      	cmp	r3, r2
 80060b6:	d018      	beq.n	80060ea <HAL_DMA_IRQHandler+0x516>
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	681b      	ldr	r3, [r3, #0]
 80060bc:	4a74      	ldr	r2, [pc, #464]	; (8006290 <HAL_DMA_IRQHandler+0x6bc>)
 80060be:	4293      	cmp	r3, r2
 80060c0:	d013      	beq.n	80060ea <HAL_DMA_IRQHandler+0x516>
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	681b      	ldr	r3, [r3, #0]
 80060c6:	4a73      	ldr	r2, [pc, #460]	; (8006294 <HAL_DMA_IRQHandler+0x6c0>)
 80060c8:	4293      	cmp	r3, r2
 80060ca:	d00e      	beq.n	80060ea <HAL_DMA_IRQHandler+0x516>
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	681b      	ldr	r3, [r3, #0]
 80060d0:	4a71      	ldr	r2, [pc, #452]	; (8006298 <HAL_DMA_IRQHandler+0x6c4>)
 80060d2:	4293      	cmp	r3, r2
 80060d4:	d009      	beq.n	80060ea <HAL_DMA_IRQHandler+0x516>
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	681b      	ldr	r3, [r3, #0]
 80060da:	4a70      	ldr	r2, [pc, #448]	; (800629c <HAL_DMA_IRQHandler+0x6c8>)
 80060dc:	4293      	cmp	r3, r2
 80060de:	d004      	beq.n	80060ea <HAL_DMA_IRQHandler+0x516>
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	681b      	ldr	r3, [r3, #0]
 80060e4:	4a6e      	ldr	r2, [pc, #440]	; (80062a0 <HAL_DMA_IRQHandler+0x6cc>)
 80060e6:	4293      	cmp	r3, r2
 80060e8:	d10a      	bne.n	8006100 <HAL_DMA_IRQHandler+0x52c>
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	681b      	ldr	r3, [r3, #0]
 80060ee:	681b      	ldr	r3, [r3, #0]
 80060f0:	f003 0308 	and.w	r3, r3, #8
 80060f4:	2b00      	cmp	r3, #0
 80060f6:	bf14      	ite	ne
 80060f8:	2301      	movne	r3, #1
 80060fa:	2300      	moveq	r3, #0
 80060fc:	b2db      	uxtb	r3, r3
 80060fe:	e009      	b.n	8006114 <HAL_DMA_IRQHandler+0x540>
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	681b      	ldr	r3, [r3, #0]
 8006104:	681b      	ldr	r3, [r3, #0]
 8006106:	f003 0304 	and.w	r3, r3, #4
 800610a:	2b00      	cmp	r3, #0
 800610c:	bf14      	ite	ne
 800610e:	2301      	movne	r3, #1
 8006110:	2300      	moveq	r3, #0
 8006112:	b2db      	uxtb	r3, r3
 8006114:	2b00      	cmp	r3, #0
 8006116:	d03e      	beq.n	8006196 <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800611c:	f003 031f 	and.w	r3, r3, #31
 8006120:	2210      	movs	r2, #16
 8006122:	409a      	lsls	r2, r3
 8006124:	6a3b      	ldr	r3, [r7, #32]
 8006126:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	681b      	ldr	r3, [r3, #0]
 800612c:	681b      	ldr	r3, [r3, #0]
 800612e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006132:	2b00      	cmp	r3, #0
 8006134:	d018      	beq.n	8006168 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	681b      	ldr	r3, [r3, #0]
 800613a:	681b      	ldr	r3, [r3, #0]
 800613c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006140:	2b00      	cmp	r3, #0
 8006142:	d108      	bne.n	8006156 <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006148:	2b00      	cmp	r3, #0
 800614a:	d024      	beq.n	8006196 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006150:	6878      	ldr	r0, [r7, #4]
 8006152:	4798      	blx	r3
 8006154:	e01f      	b.n	8006196 <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800615a:	2b00      	cmp	r3, #0
 800615c:	d01b      	beq.n	8006196 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006162:	6878      	ldr	r0, [r7, #4]
 8006164:	4798      	blx	r3
 8006166:	e016      	b.n	8006196 <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	681b      	ldr	r3, [r3, #0]
 800616c:	681b      	ldr	r3, [r3, #0]
 800616e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006172:	2b00      	cmp	r3, #0
 8006174:	d107      	bne.n	8006186 <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	681b      	ldr	r3, [r3, #0]
 800617a:	681a      	ldr	r2, [r3, #0]
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	681b      	ldr	r3, [r3, #0]
 8006180:	f022 0208 	bic.w	r2, r2, #8
 8006184:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800618a:	2b00      	cmp	r3, #0
 800618c:	d003      	beq.n	8006196 <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006192:	6878      	ldr	r0, [r7, #4]
 8006194:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800619a:	f003 031f 	and.w	r3, r3, #31
 800619e:	2220      	movs	r2, #32
 80061a0:	409a      	lsls	r2, r3
 80061a2:	69bb      	ldr	r3, [r7, #24]
 80061a4:	4013      	ands	r3, r2
 80061a6:	2b00      	cmp	r3, #0
 80061a8:	f000 8110 	beq.w	80063cc <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	681b      	ldr	r3, [r3, #0]
 80061b0:	4a2c      	ldr	r2, [pc, #176]	; (8006264 <HAL_DMA_IRQHandler+0x690>)
 80061b2:	4293      	cmp	r3, r2
 80061b4:	d04a      	beq.n	800624c <HAL_DMA_IRQHandler+0x678>
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	681b      	ldr	r3, [r3, #0]
 80061ba:	4a2b      	ldr	r2, [pc, #172]	; (8006268 <HAL_DMA_IRQHandler+0x694>)
 80061bc:	4293      	cmp	r3, r2
 80061be:	d045      	beq.n	800624c <HAL_DMA_IRQHandler+0x678>
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	681b      	ldr	r3, [r3, #0]
 80061c4:	4a29      	ldr	r2, [pc, #164]	; (800626c <HAL_DMA_IRQHandler+0x698>)
 80061c6:	4293      	cmp	r3, r2
 80061c8:	d040      	beq.n	800624c <HAL_DMA_IRQHandler+0x678>
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	681b      	ldr	r3, [r3, #0]
 80061ce:	4a28      	ldr	r2, [pc, #160]	; (8006270 <HAL_DMA_IRQHandler+0x69c>)
 80061d0:	4293      	cmp	r3, r2
 80061d2:	d03b      	beq.n	800624c <HAL_DMA_IRQHandler+0x678>
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	681b      	ldr	r3, [r3, #0]
 80061d8:	4a26      	ldr	r2, [pc, #152]	; (8006274 <HAL_DMA_IRQHandler+0x6a0>)
 80061da:	4293      	cmp	r3, r2
 80061dc:	d036      	beq.n	800624c <HAL_DMA_IRQHandler+0x678>
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	681b      	ldr	r3, [r3, #0]
 80061e2:	4a25      	ldr	r2, [pc, #148]	; (8006278 <HAL_DMA_IRQHandler+0x6a4>)
 80061e4:	4293      	cmp	r3, r2
 80061e6:	d031      	beq.n	800624c <HAL_DMA_IRQHandler+0x678>
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	681b      	ldr	r3, [r3, #0]
 80061ec:	4a23      	ldr	r2, [pc, #140]	; (800627c <HAL_DMA_IRQHandler+0x6a8>)
 80061ee:	4293      	cmp	r3, r2
 80061f0:	d02c      	beq.n	800624c <HAL_DMA_IRQHandler+0x678>
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	681b      	ldr	r3, [r3, #0]
 80061f6:	4a22      	ldr	r2, [pc, #136]	; (8006280 <HAL_DMA_IRQHandler+0x6ac>)
 80061f8:	4293      	cmp	r3, r2
 80061fa:	d027      	beq.n	800624c <HAL_DMA_IRQHandler+0x678>
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	681b      	ldr	r3, [r3, #0]
 8006200:	4a20      	ldr	r2, [pc, #128]	; (8006284 <HAL_DMA_IRQHandler+0x6b0>)
 8006202:	4293      	cmp	r3, r2
 8006204:	d022      	beq.n	800624c <HAL_DMA_IRQHandler+0x678>
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	681b      	ldr	r3, [r3, #0]
 800620a:	4a1f      	ldr	r2, [pc, #124]	; (8006288 <HAL_DMA_IRQHandler+0x6b4>)
 800620c:	4293      	cmp	r3, r2
 800620e:	d01d      	beq.n	800624c <HAL_DMA_IRQHandler+0x678>
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	681b      	ldr	r3, [r3, #0]
 8006214:	4a1d      	ldr	r2, [pc, #116]	; (800628c <HAL_DMA_IRQHandler+0x6b8>)
 8006216:	4293      	cmp	r3, r2
 8006218:	d018      	beq.n	800624c <HAL_DMA_IRQHandler+0x678>
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	681b      	ldr	r3, [r3, #0]
 800621e:	4a1c      	ldr	r2, [pc, #112]	; (8006290 <HAL_DMA_IRQHandler+0x6bc>)
 8006220:	4293      	cmp	r3, r2
 8006222:	d013      	beq.n	800624c <HAL_DMA_IRQHandler+0x678>
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	681b      	ldr	r3, [r3, #0]
 8006228:	4a1a      	ldr	r2, [pc, #104]	; (8006294 <HAL_DMA_IRQHandler+0x6c0>)
 800622a:	4293      	cmp	r3, r2
 800622c:	d00e      	beq.n	800624c <HAL_DMA_IRQHandler+0x678>
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	681b      	ldr	r3, [r3, #0]
 8006232:	4a19      	ldr	r2, [pc, #100]	; (8006298 <HAL_DMA_IRQHandler+0x6c4>)
 8006234:	4293      	cmp	r3, r2
 8006236:	d009      	beq.n	800624c <HAL_DMA_IRQHandler+0x678>
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	681b      	ldr	r3, [r3, #0]
 800623c:	4a17      	ldr	r2, [pc, #92]	; (800629c <HAL_DMA_IRQHandler+0x6c8>)
 800623e:	4293      	cmp	r3, r2
 8006240:	d004      	beq.n	800624c <HAL_DMA_IRQHandler+0x678>
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	681b      	ldr	r3, [r3, #0]
 8006246:	4a16      	ldr	r2, [pc, #88]	; (80062a0 <HAL_DMA_IRQHandler+0x6cc>)
 8006248:	4293      	cmp	r3, r2
 800624a:	d12b      	bne.n	80062a4 <HAL_DMA_IRQHandler+0x6d0>
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	681b      	ldr	r3, [r3, #0]
 8006250:	681b      	ldr	r3, [r3, #0]
 8006252:	f003 0310 	and.w	r3, r3, #16
 8006256:	2b00      	cmp	r3, #0
 8006258:	bf14      	ite	ne
 800625a:	2301      	movne	r3, #1
 800625c:	2300      	moveq	r3, #0
 800625e:	b2db      	uxtb	r3, r3
 8006260:	e02a      	b.n	80062b8 <HAL_DMA_IRQHandler+0x6e4>
 8006262:	bf00      	nop
 8006264:	40020010 	.word	0x40020010
 8006268:	40020028 	.word	0x40020028
 800626c:	40020040 	.word	0x40020040
 8006270:	40020058 	.word	0x40020058
 8006274:	40020070 	.word	0x40020070
 8006278:	40020088 	.word	0x40020088
 800627c:	400200a0 	.word	0x400200a0
 8006280:	400200b8 	.word	0x400200b8
 8006284:	40020410 	.word	0x40020410
 8006288:	40020428 	.word	0x40020428
 800628c:	40020440 	.word	0x40020440
 8006290:	40020458 	.word	0x40020458
 8006294:	40020470 	.word	0x40020470
 8006298:	40020488 	.word	0x40020488
 800629c:	400204a0 	.word	0x400204a0
 80062a0:	400204b8 	.word	0x400204b8
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	681b      	ldr	r3, [r3, #0]
 80062a8:	681b      	ldr	r3, [r3, #0]
 80062aa:	f003 0302 	and.w	r3, r3, #2
 80062ae:	2b00      	cmp	r3, #0
 80062b0:	bf14      	ite	ne
 80062b2:	2301      	movne	r3, #1
 80062b4:	2300      	moveq	r3, #0
 80062b6:	b2db      	uxtb	r3, r3
 80062b8:	2b00      	cmp	r3, #0
 80062ba:	f000 8087 	beq.w	80063cc <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80062c2:	f003 031f 	and.w	r3, r3, #31
 80062c6:	2220      	movs	r2, #32
 80062c8:	409a      	lsls	r2, r3
 80062ca:	6a3b      	ldr	r3, [r7, #32]
 80062cc:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80062d4:	b2db      	uxtb	r3, r3
 80062d6:	2b04      	cmp	r3, #4
 80062d8:	d139      	bne.n	800634e <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	681b      	ldr	r3, [r3, #0]
 80062de:	681a      	ldr	r2, [r3, #0]
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	681b      	ldr	r3, [r3, #0]
 80062e4:	f022 0216 	bic.w	r2, r2, #22
 80062e8:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	681b      	ldr	r3, [r3, #0]
 80062ee:	695a      	ldr	r2, [r3, #20]
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	681b      	ldr	r3, [r3, #0]
 80062f4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80062f8:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80062fe:	2b00      	cmp	r3, #0
 8006300:	d103      	bne.n	800630a <HAL_DMA_IRQHandler+0x736>
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006306:	2b00      	cmp	r3, #0
 8006308:	d007      	beq.n	800631a <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	681b      	ldr	r3, [r3, #0]
 800630e:	681a      	ldr	r2, [r3, #0]
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	681b      	ldr	r3, [r3, #0]
 8006314:	f022 0208 	bic.w	r2, r2, #8
 8006318:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800631e:	f003 031f 	and.w	r3, r3, #31
 8006322:	223f      	movs	r2, #63	; 0x3f
 8006324:	409a      	lsls	r2, r3
 8006326:	6a3b      	ldr	r3, [r7, #32]
 8006328:	609a      	str	r2, [r3, #8]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	2200      	movs	r2, #0
 800632e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	2201      	movs	r2, #1
 8006336:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          if(hdma->XferAbortCallback != NULL)
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800633e:	2b00      	cmp	r3, #0
 8006340:	f000 834a 	beq.w	80069d8 <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006348:	6878      	ldr	r0, [r7, #4]
 800634a:	4798      	blx	r3
          }
          return;
 800634c:	e344      	b.n	80069d8 <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	681b      	ldr	r3, [r3, #0]
 8006352:	681b      	ldr	r3, [r3, #0]
 8006354:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006358:	2b00      	cmp	r3, #0
 800635a:	d018      	beq.n	800638e <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	681b      	ldr	r3, [r3, #0]
 8006360:	681b      	ldr	r3, [r3, #0]
 8006362:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006366:	2b00      	cmp	r3, #0
 8006368:	d108      	bne.n	800637c <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800636e:	2b00      	cmp	r3, #0
 8006370:	d02c      	beq.n	80063cc <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006376:	6878      	ldr	r0, [r7, #4]
 8006378:	4798      	blx	r3
 800637a:	e027      	b.n	80063cc <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006380:	2b00      	cmp	r3, #0
 8006382:	d023      	beq.n	80063cc <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006388:	6878      	ldr	r0, [r7, #4]
 800638a:	4798      	blx	r3
 800638c:	e01e      	b.n	80063cc <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	681b      	ldr	r3, [r3, #0]
 8006392:	681b      	ldr	r3, [r3, #0]
 8006394:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006398:	2b00      	cmp	r3, #0
 800639a:	d10f      	bne.n	80063bc <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	681b      	ldr	r3, [r3, #0]
 80063a0:	681a      	ldr	r2, [r3, #0]
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	681b      	ldr	r3, [r3, #0]
 80063a6:	f022 0210 	bic.w	r2, r2, #16
 80063aa:	601a      	str	r2, [r3, #0]

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	2200      	movs	r2, #0
 80063b0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	2201      	movs	r2, #1
 80063b8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
          }

          if(hdma->XferCpltCallback != NULL)
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80063c0:	2b00      	cmp	r3, #0
 80063c2:	d003      	beq.n	80063cc <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80063c8:	6878      	ldr	r0, [r7, #4]
 80063ca:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80063d0:	2b00      	cmp	r3, #0
 80063d2:	f000 8306 	beq.w	80069e2 <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80063da:	f003 0301 	and.w	r3, r3, #1
 80063de:	2b00      	cmp	r3, #0
 80063e0:	f000 8088 	beq.w	80064f4 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	2204      	movs	r2, #4
 80063e8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	681b      	ldr	r3, [r3, #0]
 80063f0:	4a7a      	ldr	r2, [pc, #488]	; (80065dc <HAL_DMA_IRQHandler+0xa08>)
 80063f2:	4293      	cmp	r3, r2
 80063f4:	d04a      	beq.n	800648c <HAL_DMA_IRQHandler+0x8b8>
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	681b      	ldr	r3, [r3, #0]
 80063fa:	4a79      	ldr	r2, [pc, #484]	; (80065e0 <HAL_DMA_IRQHandler+0xa0c>)
 80063fc:	4293      	cmp	r3, r2
 80063fe:	d045      	beq.n	800648c <HAL_DMA_IRQHandler+0x8b8>
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	681b      	ldr	r3, [r3, #0]
 8006404:	4a77      	ldr	r2, [pc, #476]	; (80065e4 <HAL_DMA_IRQHandler+0xa10>)
 8006406:	4293      	cmp	r3, r2
 8006408:	d040      	beq.n	800648c <HAL_DMA_IRQHandler+0x8b8>
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	681b      	ldr	r3, [r3, #0]
 800640e:	4a76      	ldr	r2, [pc, #472]	; (80065e8 <HAL_DMA_IRQHandler+0xa14>)
 8006410:	4293      	cmp	r3, r2
 8006412:	d03b      	beq.n	800648c <HAL_DMA_IRQHandler+0x8b8>
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	681b      	ldr	r3, [r3, #0]
 8006418:	4a74      	ldr	r2, [pc, #464]	; (80065ec <HAL_DMA_IRQHandler+0xa18>)
 800641a:	4293      	cmp	r3, r2
 800641c:	d036      	beq.n	800648c <HAL_DMA_IRQHandler+0x8b8>
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	681b      	ldr	r3, [r3, #0]
 8006422:	4a73      	ldr	r2, [pc, #460]	; (80065f0 <HAL_DMA_IRQHandler+0xa1c>)
 8006424:	4293      	cmp	r3, r2
 8006426:	d031      	beq.n	800648c <HAL_DMA_IRQHandler+0x8b8>
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	681b      	ldr	r3, [r3, #0]
 800642c:	4a71      	ldr	r2, [pc, #452]	; (80065f4 <HAL_DMA_IRQHandler+0xa20>)
 800642e:	4293      	cmp	r3, r2
 8006430:	d02c      	beq.n	800648c <HAL_DMA_IRQHandler+0x8b8>
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	681b      	ldr	r3, [r3, #0]
 8006436:	4a70      	ldr	r2, [pc, #448]	; (80065f8 <HAL_DMA_IRQHandler+0xa24>)
 8006438:	4293      	cmp	r3, r2
 800643a:	d027      	beq.n	800648c <HAL_DMA_IRQHandler+0x8b8>
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	681b      	ldr	r3, [r3, #0]
 8006440:	4a6e      	ldr	r2, [pc, #440]	; (80065fc <HAL_DMA_IRQHandler+0xa28>)
 8006442:	4293      	cmp	r3, r2
 8006444:	d022      	beq.n	800648c <HAL_DMA_IRQHandler+0x8b8>
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	681b      	ldr	r3, [r3, #0]
 800644a:	4a6d      	ldr	r2, [pc, #436]	; (8006600 <HAL_DMA_IRQHandler+0xa2c>)
 800644c:	4293      	cmp	r3, r2
 800644e:	d01d      	beq.n	800648c <HAL_DMA_IRQHandler+0x8b8>
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	681b      	ldr	r3, [r3, #0]
 8006454:	4a6b      	ldr	r2, [pc, #428]	; (8006604 <HAL_DMA_IRQHandler+0xa30>)
 8006456:	4293      	cmp	r3, r2
 8006458:	d018      	beq.n	800648c <HAL_DMA_IRQHandler+0x8b8>
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	681b      	ldr	r3, [r3, #0]
 800645e:	4a6a      	ldr	r2, [pc, #424]	; (8006608 <HAL_DMA_IRQHandler+0xa34>)
 8006460:	4293      	cmp	r3, r2
 8006462:	d013      	beq.n	800648c <HAL_DMA_IRQHandler+0x8b8>
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	681b      	ldr	r3, [r3, #0]
 8006468:	4a68      	ldr	r2, [pc, #416]	; (800660c <HAL_DMA_IRQHandler+0xa38>)
 800646a:	4293      	cmp	r3, r2
 800646c:	d00e      	beq.n	800648c <HAL_DMA_IRQHandler+0x8b8>
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	681b      	ldr	r3, [r3, #0]
 8006472:	4a67      	ldr	r2, [pc, #412]	; (8006610 <HAL_DMA_IRQHandler+0xa3c>)
 8006474:	4293      	cmp	r3, r2
 8006476:	d009      	beq.n	800648c <HAL_DMA_IRQHandler+0x8b8>
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	681b      	ldr	r3, [r3, #0]
 800647c:	4a65      	ldr	r2, [pc, #404]	; (8006614 <HAL_DMA_IRQHandler+0xa40>)
 800647e:	4293      	cmp	r3, r2
 8006480:	d004      	beq.n	800648c <HAL_DMA_IRQHandler+0x8b8>
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	681b      	ldr	r3, [r3, #0]
 8006486:	4a64      	ldr	r2, [pc, #400]	; (8006618 <HAL_DMA_IRQHandler+0xa44>)
 8006488:	4293      	cmp	r3, r2
 800648a:	d108      	bne.n	800649e <HAL_DMA_IRQHandler+0x8ca>
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	681b      	ldr	r3, [r3, #0]
 8006490:	681a      	ldr	r2, [r3, #0]
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	681b      	ldr	r3, [r3, #0]
 8006496:	f022 0201 	bic.w	r2, r2, #1
 800649a:	601a      	str	r2, [r3, #0]
 800649c:	e007      	b.n	80064ae <HAL_DMA_IRQHandler+0x8da>
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	681b      	ldr	r3, [r3, #0]
 80064a2:	681a      	ldr	r2, [r3, #0]
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	681b      	ldr	r3, [r3, #0]
 80064a8:	f022 0201 	bic.w	r2, r2, #1
 80064ac:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 80064ae:	68fb      	ldr	r3, [r7, #12]
 80064b0:	3301      	adds	r3, #1
 80064b2:	60fb      	str	r3, [r7, #12]
 80064b4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80064b6:	429a      	cmp	r2, r3
 80064b8:	d307      	bcc.n	80064ca <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	681b      	ldr	r3, [r3, #0]
 80064be:	681b      	ldr	r3, [r3, #0]
 80064c0:	f003 0301 	and.w	r3, r3, #1
 80064c4:	2b00      	cmp	r3, #0
 80064c6:	d1f2      	bne.n	80064ae <HAL_DMA_IRQHandler+0x8da>
 80064c8:	e000      	b.n	80064cc <HAL_DMA_IRQHandler+0x8f8>
            break;
 80064ca:	bf00      	nop

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	2200      	movs	r2, #0
 80064d0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	681b      	ldr	r3, [r3, #0]
 80064d8:	681b      	ldr	r3, [r3, #0]
 80064da:	f003 0301 	and.w	r3, r3, #1
 80064de:	2b00      	cmp	r3, #0
 80064e0:	d004      	beq.n	80064ec <HAL_DMA_IRQHandler+0x918>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	2203      	movs	r2, #3
 80064e6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 80064ea:	e003      	b.n	80064f4 <HAL_DMA_IRQHandler+0x920>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	2201      	movs	r2, #1
 80064f0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }
      }

      if(hdma->XferErrorCallback != NULL)
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80064f8:	2b00      	cmp	r3, #0
 80064fa:	f000 8272 	beq.w	80069e2 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006502:	6878      	ldr	r0, [r7, #4]
 8006504:	4798      	blx	r3
 8006506:	e26c      	b.n	80069e2 <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	681b      	ldr	r3, [r3, #0]
 800650c:	4a43      	ldr	r2, [pc, #268]	; (800661c <HAL_DMA_IRQHandler+0xa48>)
 800650e:	4293      	cmp	r3, r2
 8006510:	d022      	beq.n	8006558 <HAL_DMA_IRQHandler+0x984>
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	681b      	ldr	r3, [r3, #0]
 8006516:	4a42      	ldr	r2, [pc, #264]	; (8006620 <HAL_DMA_IRQHandler+0xa4c>)
 8006518:	4293      	cmp	r3, r2
 800651a:	d01d      	beq.n	8006558 <HAL_DMA_IRQHandler+0x984>
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	681b      	ldr	r3, [r3, #0]
 8006520:	4a40      	ldr	r2, [pc, #256]	; (8006624 <HAL_DMA_IRQHandler+0xa50>)
 8006522:	4293      	cmp	r3, r2
 8006524:	d018      	beq.n	8006558 <HAL_DMA_IRQHandler+0x984>
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	681b      	ldr	r3, [r3, #0]
 800652a:	4a3f      	ldr	r2, [pc, #252]	; (8006628 <HAL_DMA_IRQHandler+0xa54>)
 800652c:	4293      	cmp	r3, r2
 800652e:	d013      	beq.n	8006558 <HAL_DMA_IRQHandler+0x984>
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	681b      	ldr	r3, [r3, #0]
 8006534:	4a3d      	ldr	r2, [pc, #244]	; (800662c <HAL_DMA_IRQHandler+0xa58>)
 8006536:	4293      	cmp	r3, r2
 8006538:	d00e      	beq.n	8006558 <HAL_DMA_IRQHandler+0x984>
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	681b      	ldr	r3, [r3, #0]
 800653e:	4a3c      	ldr	r2, [pc, #240]	; (8006630 <HAL_DMA_IRQHandler+0xa5c>)
 8006540:	4293      	cmp	r3, r2
 8006542:	d009      	beq.n	8006558 <HAL_DMA_IRQHandler+0x984>
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	681b      	ldr	r3, [r3, #0]
 8006548:	4a3a      	ldr	r2, [pc, #232]	; (8006634 <HAL_DMA_IRQHandler+0xa60>)
 800654a:	4293      	cmp	r3, r2
 800654c:	d004      	beq.n	8006558 <HAL_DMA_IRQHandler+0x984>
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	681b      	ldr	r3, [r3, #0]
 8006552:	4a39      	ldr	r2, [pc, #228]	; (8006638 <HAL_DMA_IRQHandler+0xa64>)
 8006554:	4293      	cmp	r3, r2
 8006556:	d101      	bne.n	800655c <HAL_DMA_IRQHandler+0x988>
 8006558:	2301      	movs	r3, #1
 800655a:	e000      	b.n	800655e <HAL_DMA_IRQHandler+0x98a>
 800655c:	2300      	movs	r3, #0
 800655e:	2b00      	cmp	r3, #0
 8006560:	f000 823f 	beq.w	80069e2 <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	681b      	ldr	r3, [r3, #0]
 8006568:	681b      	ldr	r3, [r3, #0]
 800656a:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006570:	f003 031f 	and.w	r3, r3, #31
 8006574:	2204      	movs	r2, #4
 8006576:	409a      	lsls	r2, r3
 8006578:	697b      	ldr	r3, [r7, #20]
 800657a:	4013      	ands	r3, r2
 800657c:	2b00      	cmp	r3, #0
 800657e:	f000 80cd 	beq.w	800671c <HAL_DMA_IRQHandler+0xb48>
 8006582:	693b      	ldr	r3, [r7, #16]
 8006584:	f003 0304 	and.w	r3, r3, #4
 8006588:	2b00      	cmp	r3, #0
 800658a:	f000 80c7 	beq.w	800671c <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006592:	f003 031f 	and.w	r3, r3, #31
 8006596:	2204      	movs	r2, #4
 8006598:	409a      	lsls	r2, r3
 800659a:	69fb      	ldr	r3, [r7, #28]
 800659c:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800659e:	693b      	ldr	r3, [r7, #16]
 80065a0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80065a4:	2b00      	cmp	r3, #0
 80065a6:	d049      	beq.n	800663c <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 80065a8:	693b      	ldr	r3, [r7, #16]
 80065aa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80065ae:	2b00      	cmp	r3, #0
 80065b0:	d109      	bne.n	80065c6 <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80065b6:	2b00      	cmp	r3, #0
 80065b8:	f000 8210 	beq.w	80069dc <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80065c0:	6878      	ldr	r0, [r7, #4]
 80065c2:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80065c4:	e20a      	b.n	80069dc <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80065ca:	2b00      	cmp	r3, #0
 80065cc:	f000 8206 	beq.w	80069dc <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80065d4:	6878      	ldr	r0, [r7, #4]
 80065d6:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80065d8:	e200      	b.n	80069dc <HAL_DMA_IRQHandler+0xe08>
 80065da:	bf00      	nop
 80065dc:	40020010 	.word	0x40020010
 80065e0:	40020028 	.word	0x40020028
 80065e4:	40020040 	.word	0x40020040
 80065e8:	40020058 	.word	0x40020058
 80065ec:	40020070 	.word	0x40020070
 80065f0:	40020088 	.word	0x40020088
 80065f4:	400200a0 	.word	0x400200a0
 80065f8:	400200b8 	.word	0x400200b8
 80065fc:	40020410 	.word	0x40020410
 8006600:	40020428 	.word	0x40020428
 8006604:	40020440 	.word	0x40020440
 8006608:	40020458 	.word	0x40020458
 800660c:	40020470 	.word	0x40020470
 8006610:	40020488 	.word	0x40020488
 8006614:	400204a0 	.word	0x400204a0
 8006618:	400204b8 	.word	0x400204b8
 800661c:	58025408 	.word	0x58025408
 8006620:	5802541c 	.word	0x5802541c
 8006624:	58025430 	.word	0x58025430
 8006628:	58025444 	.word	0x58025444
 800662c:	58025458 	.word	0x58025458
 8006630:	5802546c 	.word	0x5802546c
 8006634:	58025480 	.word	0x58025480
 8006638:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 800663c:	693b      	ldr	r3, [r7, #16]
 800663e:	f003 0320 	and.w	r3, r3, #32
 8006642:	2b00      	cmp	r3, #0
 8006644:	d160      	bne.n	8006708 <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	681b      	ldr	r3, [r3, #0]
 800664a:	4a8c      	ldr	r2, [pc, #560]	; (800687c <HAL_DMA_IRQHandler+0xca8>)
 800664c:	4293      	cmp	r3, r2
 800664e:	d04a      	beq.n	80066e6 <HAL_DMA_IRQHandler+0xb12>
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	681b      	ldr	r3, [r3, #0]
 8006654:	4a8a      	ldr	r2, [pc, #552]	; (8006880 <HAL_DMA_IRQHandler+0xcac>)
 8006656:	4293      	cmp	r3, r2
 8006658:	d045      	beq.n	80066e6 <HAL_DMA_IRQHandler+0xb12>
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	681b      	ldr	r3, [r3, #0]
 800665e:	4a89      	ldr	r2, [pc, #548]	; (8006884 <HAL_DMA_IRQHandler+0xcb0>)
 8006660:	4293      	cmp	r3, r2
 8006662:	d040      	beq.n	80066e6 <HAL_DMA_IRQHandler+0xb12>
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	681b      	ldr	r3, [r3, #0]
 8006668:	4a87      	ldr	r2, [pc, #540]	; (8006888 <HAL_DMA_IRQHandler+0xcb4>)
 800666a:	4293      	cmp	r3, r2
 800666c:	d03b      	beq.n	80066e6 <HAL_DMA_IRQHandler+0xb12>
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	681b      	ldr	r3, [r3, #0]
 8006672:	4a86      	ldr	r2, [pc, #536]	; (800688c <HAL_DMA_IRQHandler+0xcb8>)
 8006674:	4293      	cmp	r3, r2
 8006676:	d036      	beq.n	80066e6 <HAL_DMA_IRQHandler+0xb12>
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	681b      	ldr	r3, [r3, #0]
 800667c:	4a84      	ldr	r2, [pc, #528]	; (8006890 <HAL_DMA_IRQHandler+0xcbc>)
 800667e:	4293      	cmp	r3, r2
 8006680:	d031      	beq.n	80066e6 <HAL_DMA_IRQHandler+0xb12>
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	681b      	ldr	r3, [r3, #0]
 8006686:	4a83      	ldr	r2, [pc, #524]	; (8006894 <HAL_DMA_IRQHandler+0xcc0>)
 8006688:	4293      	cmp	r3, r2
 800668a:	d02c      	beq.n	80066e6 <HAL_DMA_IRQHandler+0xb12>
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	681b      	ldr	r3, [r3, #0]
 8006690:	4a81      	ldr	r2, [pc, #516]	; (8006898 <HAL_DMA_IRQHandler+0xcc4>)
 8006692:	4293      	cmp	r3, r2
 8006694:	d027      	beq.n	80066e6 <HAL_DMA_IRQHandler+0xb12>
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	681b      	ldr	r3, [r3, #0]
 800669a:	4a80      	ldr	r2, [pc, #512]	; (800689c <HAL_DMA_IRQHandler+0xcc8>)
 800669c:	4293      	cmp	r3, r2
 800669e:	d022      	beq.n	80066e6 <HAL_DMA_IRQHandler+0xb12>
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	681b      	ldr	r3, [r3, #0]
 80066a4:	4a7e      	ldr	r2, [pc, #504]	; (80068a0 <HAL_DMA_IRQHandler+0xccc>)
 80066a6:	4293      	cmp	r3, r2
 80066a8:	d01d      	beq.n	80066e6 <HAL_DMA_IRQHandler+0xb12>
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	681b      	ldr	r3, [r3, #0]
 80066ae:	4a7d      	ldr	r2, [pc, #500]	; (80068a4 <HAL_DMA_IRQHandler+0xcd0>)
 80066b0:	4293      	cmp	r3, r2
 80066b2:	d018      	beq.n	80066e6 <HAL_DMA_IRQHandler+0xb12>
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	681b      	ldr	r3, [r3, #0]
 80066b8:	4a7b      	ldr	r2, [pc, #492]	; (80068a8 <HAL_DMA_IRQHandler+0xcd4>)
 80066ba:	4293      	cmp	r3, r2
 80066bc:	d013      	beq.n	80066e6 <HAL_DMA_IRQHandler+0xb12>
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	681b      	ldr	r3, [r3, #0]
 80066c2:	4a7a      	ldr	r2, [pc, #488]	; (80068ac <HAL_DMA_IRQHandler+0xcd8>)
 80066c4:	4293      	cmp	r3, r2
 80066c6:	d00e      	beq.n	80066e6 <HAL_DMA_IRQHandler+0xb12>
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	681b      	ldr	r3, [r3, #0]
 80066cc:	4a78      	ldr	r2, [pc, #480]	; (80068b0 <HAL_DMA_IRQHandler+0xcdc>)
 80066ce:	4293      	cmp	r3, r2
 80066d0:	d009      	beq.n	80066e6 <HAL_DMA_IRQHandler+0xb12>
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	681b      	ldr	r3, [r3, #0]
 80066d6:	4a77      	ldr	r2, [pc, #476]	; (80068b4 <HAL_DMA_IRQHandler+0xce0>)
 80066d8:	4293      	cmp	r3, r2
 80066da:	d004      	beq.n	80066e6 <HAL_DMA_IRQHandler+0xb12>
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	681b      	ldr	r3, [r3, #0]
 80066e0:	4a75      	ldr	r2, [pc, #468]	; (80068b8 <HAL_DMA_IRQHandler+0xce4>)
 80066e2:	4293      	cmp	r3, r2
 80066e4:	d108      	bne.n	80066f8 <HAL_DMA_IRQHandler+0xb24>
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	681b      	ldr	r3, [r3, #0]
 80066ea:	681a      	ldr	r2, [r3, #0]
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	681b      	ldr	r3, [r3, #0]
 80066f0:	f022 0208 	bic.w	r2, r2, #8
 80066f4:	601a      	str	r2, [r3, #0]
 80066f6:	e007      	b.n	8006708 <HAL_DMA_IRQHandler+0xb34>
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	681b      	ldr	r3, [r3, #0]
 80066fc:	681a      	ldr	r2, [r3, #0]
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	681b      	ldr	r3, [r3, #0]
 8006702:	f022 0204 	bic.w	r2, r2, #4
 8006706:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800670c:	2b00      	cmp	r3, #0
 800670e:	f000 8165 	beq.w	80069dc <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006716:	6878      	ldr	r0, [r7, #4]
 8006718:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800671a:	e15f      	b.n	80069dc <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006720:	f003 031f 	and.w	r3, r3, #31
 8006724:	2202      	movs	r2, #2
 8006726:	409a      	lsls	r2, r3
 8006728:	697b      	ldr	r3, [r7, #20]
 800672a:	4013      	ands	r3, r2
 800672c:	2b00      	cmp	r3, #0
 800672e:	f000 80c5 	beq.w	80068bc <HAL_DMA_IRQHandler+0xce8>
 8006732:	693b      	ldr	r3, [r7, #16]
 8006734:	f003 0302 	and.w	r3, r3, #2
 8006738:	2b00      	cmp	r3, #0
 800673a:	f000 80bf 	beq.w	80068bc <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006742:	f003 031f 	and.w	r3, r3, #31
 8006746:	2202      	movs	r2, #2
 8006748:	409a      	lsls	r2, r3
 800674a:	69fb      	ldr	r3, [r7, #28]
 800674c:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800674e:	693b      	ldr	r3, [r7, #16]
 8006750:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006754:	2b00      	cmp	r3, #0
 8006756:	d018      	beq.n	800678a <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8006758:	693b      	ldr	r3, [r7, #16]
 800675a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800675e:	2b00      	cmp	r3, #0
 8006760:	d109      	bne.n	8006776 <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006766:	2b00      	cmp	r3, #0
 8006768:	f000 813a 	beq.w	80069e0 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006770:	6878      	ldr	r0, [r7, #4]
 8006772:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006774:	e134      	b.n	80069e0 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800677a:	2b00      	cmp	r3, #0
 800677c:	f000 8130 	beq.w	80069e0 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006784:	6878      	ldr	r0, [r7, #4]
 8006786:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006788:	e12a      	b.n	80069e0 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 800678a:	693b      	ldr	r3, [r7, #16]
 800678c:	f003 0320 	and.w	r3, r3, #32
 8006790:	2b00      	cmp	r3, #0
 8006792:	d168      	bne.n	8006866 <HAL_DMA_IRQHandler+0xc92>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	681b      	ldr	r3, [r3, #0]
 8006798:	4a38      	ldr	r2, [pc, #224]	; (800687c <HAL_DMA_IRQHandler+0xca8>)
 800679a:	4293      	cmp	r3, r2
 800679c:	d04a      	beq.n	8006834 <HAL_DMA_IRQHandler+0xc60>
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	681b      	ldr	r3, [r3, #0]
 80067a2:	4a37      	ldr	r2, [pc, #220]	; (8006880 <HAL_DMA_IRQHandler+0xcac>)
 80067a4:	4293      	cmp	r3, r2
 80067a6:	d045      	beq.n	8006834 <HAL_DMA_IRQHandler+0xc60>
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	681b      	ldr	r3, [r3, #0]
 80067ac:	4a35      	ldr	r2, [pc, #212]	; (8006884 <HAL_DMA_IRQHandler+0xcb0>)
 80067ae:	4293      	cmp	r3, r2
 80067b0:	d040      	beq.n	8006834 <HAL_DMA_IRQHandler+0xc60>
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	681b      	ldr	r3, [r3, #0]
 80067b6:	4a34      	ldr	r2, [pc, #208]	; (8006888 <HAL_DMA_IRQHandler+0xcb4>)
 80067b8:	4293      	cmp	r3, r2
 80067ba:	d03b      	beq.n	8006834 <HAL_DMA_IRQHandler+0xc60>
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	681b      	ldr	r3, [r3, #0]
 80067c0:	4a32      	ldr	r2, [pc, #200]	; (800688c <HAL_DMA_IRQHandler+0xcb8>)
 80067c2:	4293      	cmp	r3, r2
 80067c4:	d036      	beq.n	8006834 <HAL_DMA_IRQHandler+0xc60>
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	681b      	ldr	r3, [r3, #0]
 80067ca:	4a31      	ldr	r2, [pc, #196]	; (8006890 <HAL_DMA_IRQHandler+0xcbc>)
 80067cc:	4293      	cmp	r3, r2
 80067ce:	d031      	beq.n	8006834 <HAL_DMA_IRQHandler+0xc60>
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	681b      	ldr	r3, [r3, #0]
 80067d4:	4a2f      	ldr	r2, [pc, #188]	; (8006894 <HAL_DMA_IRQHandler+0xcc0>)
 80067d6:	4293      	cmp	r3, r2
 80067d8:	d02c      	beq.n	8006834 <HAL_DMA_IRQHandler+0xc60>
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	681b      	ldr	r3, [r3, #0]
 80067de:	4a2e      	ldr	r2, [pc, #184]	; (8006898 <HAL_DMA_IRQHandler+0xcc4>)
 80067e0:	4293      	cmp	r3, r2
 80067e2:	d027      	beq.n	8006834 <HAL_DMA_IRQHandler+0xc60>
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	681b      	ldr	r3, [r3, #0]
 80067e8:	4a2c      	ldr	r2, [pc, #176]	; (800689c <HAL_DMA_IRQHandler+0xcc8>)
 80067ea:	4293      	cmp	r3, r2
 80067ec:	d022      	beq.n	8006834 <HAL_DMA_IRQHandler+0xc60>
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	681b      	ldr	r3, [r3, #0]
 80067f2:	4a2b      	ldr	r2, [pc, #172]	; (80068a0 <HAL_DMA_IRQHandler+0xccc>)
 80067f4:	4293      	cmp	r3, r2
 80067f6:	d01d      	beq.n	8006834 <HAL_DMA_IRQHandler+0xc60>
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	681b      	ldr	r3, [r3, #0]
 80067fc:	4a29      	ldr	r2, [pc, #164]	; (80068a4 <HAL_DMA_IRQHandler+0xcd0>)
 80067fe:	4293      	cmp	r3, r2
 8006800:	d018      	beq.n	8006834 <HAL_DMA_IRQHandler+0xc60>
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	681b      	ldr	r3, [r3, #0]
 8006806:	4a28      	ldr	r2, [pc, #160]	; (80068a8 <HAL_DMA_IRQHandler+0xcd4>)
 8006808:	4293      	cmp	r3, r2
 800680a:	d013      	beq.n	8006834 <HAL_DMA_IRQHandler+0xc60>
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	681b      	ldr	r3, [r3, #0]
 8006810:	4a26      	ldr	r2, [pc, #152]	; (80068ac <HAL_DMA_IRQHandler+0xcd8>)
 8006812:	4293      	cmp	r3, r2
 8006814:	d00e      	beq.n	8006834 <HAL_DMA_IRQHandler+0xc60>
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	681b      	ldr	r3, [r3, #0]
 800681a:	4a25      	ldr	r2, [pc, #148]	; (80068b0 <HAL_DMA_IRQHandler+0xcdc>)
 800681c:	4293      	cmp	r3, r2
 800681e:	d009      	beq.n	8006834 <HAL_DMA_IRQHandler+0xc60>
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	681b      	ldr	r3, [r3, #0]
 8006824:	4a23      	ldr	r2, [pc, #140]	; (80068b4 <HAL_DMA_IRQHandler+0xce0>)
 8006826:	4293      	cmp	r3, r2
 8006828:	d004      	beq.n	8006834 <HAL_DMA_IRQHandler+0xc60>
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	681b      	ldr	r3, [r3, #0]
 800682e:	4a22      	ldr	r2, [pc, #136]	; (80068b8 <HAL_DMA_IRQHandler+0xce4>)
 8006830:	4293      	cmp	r3, r2
 8006832:	d108      	bne.n	8006846 <HAL_DMA_IRQHandler+0xc72>
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	681b      	ldr	r3, [r3, #0]
 8006838:	681a      	ldr	r2, [r3, #0]
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	681b      	ldr	r3, [r3, #0]
 800683e:	f022 0214 	bic.w	r2, r2, #20
 8006842:	601a      	str	r2, [r3, #0]
 8006844:	e007      	b.n	8006856 <HAL_DMA_IRQHandler+0xc82>
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	681b      	ldr	r3, [r3, #0]
 800684a:	681a      	ldr	r2, [r3, #0]
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	681b      	ldr	r3, [r3, #0]
 8006850:	f022 020a 	bic.w	r2, r2, #10
 8006854:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	2200      	movs	r2, #0
 800685a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	2201      	movs	r2, #1
 8006862:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800686a:	2b00      	cmp	r3, #0
 800686c:	f000 80b8 	beq.w	80069e0 <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006874:	6878      	ldr	r0, [r7, #4]
 8006876:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006878:	e0b2      	b.n	80069e0 <HAL_DMA_IRQHandler+0xe0c>
 800687a:	bf00      	nop
 800687c:	40020010 	.word	0x40020010
 8006880:	40020028 	.word	0x40020028
 8006884:	40020040 	.word	0x40020040
 8006888:	40020058 	.word	0x40020058
 800688c:	40020070 	.word	0x40020070
 8006890:	40020088 	.word	0x40020088
 8006894:	400200a0 	.word	0x400200a0
 8006898:	400200b8 	.word	0x400200b8
 800689c:	40020410 	.word	0x40020410
 80068a0:	40020428 	.word	0x40020428
 80068a4:	40020440 	.word	0x40020440
 80068a8:	40020458 	.word	0x40020458
 80068ac:	40020470 	.word	0x40020470
 80068b0:	40020488 	.word	0x40020488
 80068b4:	400204a0 	.word	0x400204a0
 80068b8:	400204b8 	.word	0x400204b8
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80068c0:	f003 031f 	and.w	r3, r3, #31
 80068c4:	2208      	movs	r2, #8
 80068c6:	409a      	lsls	r2, r3
 80068c8:	697b      	ldr	r3, [r7, #20]
 80068ca:	4013      	ands	r3, r2
 80068cc:	2b00      	cmp	r3, #0
 80068ce:	f000 8088 	beq.w	80069e2 <HAL_DMA_IRQHandler+0xe0e>
 80068d2:	693b      	ldr	r3, [r7, #16]
 80068d4:	f003 0308 	and.w	r3, r3, #8
 80068d8:	2b00      	cmp	r3, #0
 80068da:	f000 8082 	beq.w	80069e2 <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	681b      	ldr	r3, [r3, #0]
 80068e2:	4a41      	ldr	r2, [pc, #260]	; (80069e8 <HAL_DMA_IRQHandler+0xe14>)
 80068e4:	4293      	cmp	r3, r2
 80068e6:	d04a      	beq.n	800697e <HAL_DMA_IRQHandler+0xdaa>
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	681b      	ldr	r3, [r3, #0]
 80068ec:	4a3f      	ldr	r2, [pc, #252]	; (80069ec <HAL_DMA_IRQHandler+0xe18>)
 80068ee:	4293      	cmp	r3, r2
 80068f0:	d045      	beq.n	800697e <HAL_DMA_IRQHandler+0xdaa>
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	681b      	ldr	r3, [r3, #0]
 80068f6:	4a3e      	ldr	r2, [pc, #248]	; (80069f0 <HAL_DMA_IRQHandler+0xe1c>)
 80068f8:	4293      	cmp	r3, r2
 80068fa:	d040      	beq.n	800697e <HAL_DMA_IRQHandler+0xdaa>
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	681b      	ldr	r3, [r3, #0]
 8006900:	4a3c      	ldr	r2, [pc, #240]	; (80069f4 <HAL_DMA_IRQHandler+0xe20>)
 8006902:	4293      	cmp	r3, r2
 8006904:	d03b      	beq.n	800697e <HAL_DMA_IRQHandler+0xdaa>
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	681b      	ldr	r3, [r3, #0]
 800690a:	4a3b      	ldr	r2, [pc, #236]	; (80069f8 <HAL_DMA_IRQHandler+0xe24>)
 800690c:	4293      	cmp	r3, r2
 800690e:	d036      	beq.n	800697e <HAL_DMA_IRQHandler+0xdaa>
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	681b      	ldr	r3, [r3, #0]
 8006914:	4a39      	ldr	r2, [pc, #228]	; (80069fc <HAL_DMA_IRQHandler+0xe28>)
 8006916:	4293      	cmp	r3, r2
 8006918:	d031      	beq.n	800697e <HAL_DMA_IRQHandler+0xdaa>
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	681b      	ldr	r3, [r3, #0]
 800691e:	4a38      	ldr	r2, [pc, #224]	; (8006a00 <HAL_DMA_IRQHandler+0xe2c>)
 8006920:	4293      	cmp	r3, r2
 8006922:	d02c      	beq.n	800697e <HAL_DMA_IRQHandler+0xdaa>
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	681b      	ldr	r3, [r3, #0]
 8006928:	4a36      	ldr	r2, [pc, #216]	; (8006a04 <HAL_DMA_IRQHandler+0xe30>)
 800692a:	4293      	cmp	r3, r2
 800692c:	d027      	beq.n	800697e <HAL_DMA_IRQHandler+0xdaa>
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	681b      	ldr	r3, [r3, #0]
 8006932:	4a35      	ldr	r2, [pc, #212]	; (8006a08 <HAL_DMA_IRQHandler+0xe34>)
 8006934:	4293      	cmp	r3, r2
 8006936:	d022      	beq.n	800697e <HAL_DMA_IRQHandler+0xdaa>
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	681b      	ldr	r3, [r3, #0]
 800693c:	4a33      	ldr	r2, [pc, #204]	; (8006a0c <HAL_DMA_IRQHandler+0xe38>)
 800693e:	4293      	cmp	r3, r2
 8006940:	d01d      	beq.n	800697e <HAL_DMA_IRQHandler+0xdaa>
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	681b      	ldr	r3, [r3, #0]
 8006946:	4a32      	ldr	r2, [pc, #200]	; (8006a10 <HAL_DMA_IRQHandler+0xe3c>)
 8006948:	4293      	cmp	r3, r2
 800694a:	d018      	beq.n	800697e <HAL_DMA_IRQHandler+0xdaa>
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	681b      	ldr	r3, [r3, #0]
 8006950:	4a30      	ldr	r2, [pc, #192]	; (8006a14 <HAL_DMA_IRQHandler+0xe40>)
 8006952:	4293      	cmp	r3, r2
 8006954:	d013      	beq.n	800697e <HAL_DMA_IRQHandler+0xdaa>
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	681b      	ldr	r3, [r3, #0]
 800695a:	4a2f      	ldr	r2, [pc, #188]	; (8006a18 <HAL_DMA_IRQHandler+0xe44>)
 800695c:	4293      	cmp	r3, r2
 800695e:	d00e      	beq.n	800697e <HAL_DMA_IRQHandler+0xdaa>
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	681b      	ldr	r3, [r3, #0]
 8006964:	4a2d      	ldr	r2, [pc, #180]	; (8006a1c <HAL_DMA_IRQHandler+0xe48>)
 8006966:	4293      	cmp	r3, r2
 8006968:	d009      	beq.n	800697e <HAL_DMA_IRQHandler+0xdaa>
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	681b      	ldr	r3, [r3, #0]
 800696e:	4a2c      	ldr	r2, [pc, #176]	; (8006a20 <HAL_DMA_IRQHandler+0xe4c>)
 8006970:	4293      	cmp	r3, r2
 8006972:	d004      	beq.n	800697e <HAL_DMA_IRQHandler+0xdaa>
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	681b      	ldr	r3, [r3, #0]
 8006978:	4a2a      	ldr	r2, [pc, #168]	; (8006a24 <HAL_DMA_IRQHandler+0xe50>)
 800697a:	4293      	cmp	r3, r2
 800697c:	d108      	bne.n	8006990 <HAL_DMA_IRQHandler+0xdbc>
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	681b      	ldr	r3, [r3, #0]
 8006982:	681a      	ldr	r2, [r3, #0]
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	681b      	ldr	r3, [r3, #0]
 8006988:	f022 021c 	bic.w	r2, r2, #28
 800698c:	601a      	str	r2, [r3, #0]
 800698e:	e007      	b.n	80069a0 <HAL_DMA_IRQHandler+0xdcc>
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	681b      	ldr	r3, [r3, #0]
 8006994:	681a      	ldr	r2, [r3, #0]
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	681b      	ldr	r3, [r3, #0]
 800699a:	f022 020e 	bic.w	r2, r2, #14
 800699e:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80069a4:	f003 031f 	and.w	r3, r3, #31
 80069a8:	2201      	movs	r2, #1
 80069aa:	409a      	lsls	r2, r3
 80069ac:	69fb      	ldr	r3, [r7, #28]
 80069ae:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	2201      	movs	r2, #1
 80069b4:	655a      	str	r2, [r3, #84]	; 0x54

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	2200      	movs	r2, #0
 80069ba:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	2201      	movs	r2, #1
 80069c2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      if (hdma->XferErrorCallback != NULL)
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80069ca:	2b00      	cmp	r3, #0
 80069cc:	d009      	beq.n	80069e2 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80069d2:	6878      	ldr	r0, [r7, #4]
 80069d4:	4798      	blx	r3
 80069d6:	e004      	b.n	80069e2 <HAL_DMA_IRQHandler+0xe0e>
          return;
 80069d8:	bf00      	nop
 80069da:	e002      	b.n	80069e2 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80069dc:	bf00      	nop
 80069de:	e000      	b.n	80069e2 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80069e0:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 80069e2:	3728      	adds	r7, #40	; 0x28
 80069e4:	46bd      	mov	sp, r7
 80069e6:	bd80      	pop	{r7, pc}
 80069e8:	40020010 	.word	0x40020010
 80069ec:	40020028 	.word	0x40020028
 80069f0:	40020040 	.word	0x40020040
 80069f4:	40020058 	.word	0x40020058
 80069f8:	40020070 	.word	0x40020070
 80069fc:	40020088 	.word	0x40020088
 8006a00:	400200a0 	.word	0x400200a0
 8006a04:	400200b8 	.word	0x400200b8
 8006a08:	40020410 	.word	0x40020410
 8006a0c:	40020428 	.word	0x40020428
 8006a10:	40020440 	.word	0x40020440
 8006a14:	40020458 	.word	0x40020458
 8006a18:	40020470 	.word	0x40020470
 8006a1c:	40020488 	.word	0x40020488
 8006a20:	400204a0 	.word	0x400204a0
 8006a24:	400204b8 	.word	0x400204b8

08006a28 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8006a28:	b480      	push	{r7}
 8006a2a:	b087      	sub	sp, #28
 8006a2c:	af00      	add	r7, sp, #0
 8006a2e:	60f8      	str	r0, [r7, #12]
 8006a30:	60b9      	str	r1, [r7, #8]
 8006a32:	607a      	str	r2, [r7, #4]
 8006a34:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8006a36:	68fb      	ldr	r3, [r7, #12]
 8006a38:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006a3a:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8006a3c:	68fb      	ldr	r3, [r7, #12]
 8006a3e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006a40:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8006a42:	68fb      	ldr	r3, [r7, #12]
 8006a44:	681b      	ldr	r3, [r3, #0]
 8006a46:	4a84      	ldr	r2, [pc, #528]	; (8006c58 <DMA_SetConfig+0x230>)
 8006a48:	4293      	cmp	r3, r2
 8006a4a:	d072      	beq.n	8006b32 <DMA_SetConfig+0x10a>
 8006a4c:	68fb      	ldr	r3, [r7, #12]
 8006a4e:	681b      	ldr	r3, [r3, #0]
 8006a50:	4a82      	ldr	r2, [pc, #520]	; (8006c5c <DMA_SetConfig+0x234>)
 8006a52:	4293      	cmp	r3, r2
 8006a54:	d06d      	beq.n	8006b32 <DMA_SetConfig+0x10a>
 8006a56:	68fb      	ldr	r3, [r7, #12]
 8006a58:	681b      	ldr	r3, [r3, #0]
 8006a5a:	4a81      	ldr	r2, [pc, #516]	; (8006c60 <DMA_SetConfig+0x238>)
 8006a5c:	4293      	cmp	r3, r2
 8006a5e:	d068      	beq.n	8006b32 <DMA_SetConfig+0x10a>
 8006a60:	68fb      	ldr	r3, [r7, #12]
 8006a62:	681b      	ldr	r3, [r3, #0]
 8006a64:	4a7f      	ldr	r2, [pc, #508]	; (8006c64 <DMA_SetConfig+0x23c>)
 8006a66:	4293      	cmp	r3, r2
 8006a68:	d063      	beq.n	8006b32 <DMA_SetConfig+0x10a>
 8006a6a:	68fb      	ldr	r3, [r7, #12]
 8006a6c:	681b      	ldr	r3, [r3, #0]
 8006a6e:	4a7e      	ldr	r2, [pc, #504]	; (8006c68 <DMA_SetConfig+0x240>)
 8006a70:	4293      	cmp	r3, r2
 8006a72:	d05e      	beq.n	8006b32 <DMA_SetConfig+0x10a>
 8006a74:	68fb      	ldr	r3, [r7, #12]
 8006a76:	681b      	ldr	r3, [r3, #0]
 8006a78:	4a7c      	ldr	r2, [pc, #496]	; (8006c6c <DMA_SetConfig+0x244>)
 8006a7a:	4293      	cmp	r3, r2
 8006a7c:	d059      	beq.n	8006b32 <DMA_SetConfig+0x10a>
 8006a7e:	68fb      	ldr	r3, [r7, #12]
 8006a80:	681b      	ldr	r3, [r3, #0]
 8006a82:	4a7b      	ldr	r2, [pc, #492]	; (8006c70 <DMA_SetConfig+0x248>)
 8006a84:	4293      	cmp	r3, r2
 8006a86:	d054      	beq.n	8006b32 <DMA_SetConfig+0x10a>
 8006a88:	68fb      	ldr	r3, [r7, #12]
 8006a8a:	681b      	ldr	r3, [r3, #0]
 8006a8c:	4a79      	ldr	r2, [pc, #484]	; (8006c74 <DMA_SetConfig+0x24c>)
 8006a8e:	4293      	cmp	r3, r2
 8006a90:	d04f      	beq.n	8006b32 <DMA_SetConfig+0x10a>
 8006a92:	68fb      	ldr	r3, [r7, #12]
 8006a94:	681b      	ldr	r3, [r3, #0]
 8006a96:	4a78      	ldr	r2, [pc, #480]	; (8006c78 <DMA_SetConfig+0x250>)
 8006a98:	4293      	cmp	r3, r2
 8006a9a:	d04a      	beq.n	8006b32 <DMA_SetConfig+0x10a>
 8006a9c:	68fb      	ldr	r3, [r7, #12]
 8006a9e:	681b      	ldr	r3, [r3, #0]
 8006aa0:	4a76      	ldr	r2, [pc, #472]	; (8006c7c <DMA_SetConfig+0x254>)
 8006aa2:	4293      	cmp	r3, r2
 8006aa4:	d045      	beq.n	8006b32 <DMA_SetConfig+0x10a>
 8006aa6:	68fb      	ldr	r3, [r7, #12]
 8006aa8:	681b      	ldr	r3, [r3, #0]
 8006aaa:	4a75      	ldr	r2, [pc, #468]	; (8006c80 <DMA_SetConfig+0x258>)
 8006aac:	4293      	cmp	r3, r2
 8006aae:	d040      	beq.n	8006b32 <DMA_SetConfig+0x10a>
 8006ab0:	68fb      	ldr	r3, [r7, #12]
 8006ab2:	681b      	ldr	r3, [r3, #0]
 8006ab4:	4a73      	ldr	r2, [pc, #460]	; (8006c84 <DMA_SetConfig+0x25c>)
 8006ab6:	4293      	cmp	r3, r2
 8006ab8:	d03b      	beq.n	8006b32 <DMA_SetConfig+0x10a>
 8006aba:	68fb      	ldr	r3, [r7, #12]
 8006abc:	681b      	ldr	r3, [r3, #0]
 8006abe:	4a72      	ldr	r2, [pc, #456]	; (8006c88 <DMA_SetConfig+0x260>)
 8006ac0:	4293      	cmp	r3, r2
 8006ac2:	d036      	beq.n	8006b32 <DMA_SetConfig+0x10a>
 8006ac4:	68fb      	ldr	r3, [r7, #12]
 8006ac6:	681b      	ldr	r3, [r3, #0]
 8006ac8:	4a70      	ldr	r2, [pc, #448]	; (8006c8c <DMA_SetConfig+0x264>)
 8006aca:	4293      	cmp	r3, r2
 8006acc:	d031      	beq.n	8006b32 <DMA_SetConfig+0x10a>
 8006ace:	68fb      	ldr	r3, [r7, #12]
 8006ad0:	681b      	ldr	r3, [r3, #0]
 8006ad2:	4a6f      	ldr	r2, [pc, #444]	; (8006c90 <DMA_SetConfig+0x268>)
 8006ad4:	4293      	cmp	r3, r2
 8006ad6:	d02c      	beq.n	8006b32 <DMA_SetConfig+0x10a>
 8006ad8:	68fb      	ldr	r3, [r7, #12]
 8006ada:	681b      	ldr	r3, [r3, #0]
 8006adc:	4a6d      	ldr	r2, [pc, #436]	; (8006c94 <DMA_SetConfig+0x26c>)
 8006ade:	4293      	cmp	r3, r2
 8006ae0:	d027      	beq.n	8006b32 <DMA_SetConfig+0x10a>
 8006ae2:	68fb      	ldr	r3, [r7, #12]
 8006ae4:	681b      	ldr	r3, [r3, #0]
 8006ae6:	4a6c      	ldr	r2, [pc, #432]	; (8006c98 <DMA_SetConfig+0x270>)
 8006ae8:	4293      	cmp	r3, r2
 8006aea:	d022      	beq.n	8006b32 <DMA_SetConfig+0x10a>
 8006aec:	68fb      	ldr	r3, [r7, #12]
 8006aee:	681b      	ldr	r3, [r3, #0]
 8006af0:	4a6a      	ldr	r2, [pc, #424]	; (8006c9c <DMA_SetConfig+0x274>)
 8006af2:	4293      	cmp	r3, r2
 8006af4:	d01d      	beq.n	8006b32 <DMA_SetConfig+0x10a>
 8006af6:	68fb      	ldr	r3, [r7, #12]
 8006af8:	681b      	ldr	r3, [r3, #0]
 8006afa:	4a69      	ldr	r2, [pc, #420]	; (8006ca0 <DMA_SetConfig+0x278>)
 8006afc:	4293      	cmp	r3, r2
 8006afe:	d018      	beq.n	8006b32 <DMA_SetConfig+0x10a>
 8006b00:	68fb      	ldr	r3, [r7, #12]
 8006b02:	681b      	ldr	r3, [r3, #0]
 8006b04:	4a67      	ldr	r2, [pc, #412]	; (8006ca4 <DMA_SetConfig+0x27c>)
 8006b06:	4293      	cmp	r3, r2
 8006b08:	d013      	beq.n	8006b32 <DMA_SetConfig+0x10a>
 8006b0a:	68fb      	ldr	r3, [r7, #12]
 8006b0c:	681b      	ldr	r3, [r3, #0]
 8006b0e:	4a66      	ldr	r2, [pc, #408]	; (8006ca8 <DMA_SetConfig+0x280>)
 8006b10:	4293      	cmp	r3, r2
 8006b12:	d00e      	beq.n	8006b32 <DMA_SetConfig+0x10a>
 8006b14:	68fb      	ldr	r3, [r7, #12]
 8006b16:	681b      	ldr	r3, [r3, #0]
 8006b18:	4a64      	ldr	r2, [pc, #400]	; (8006cac <DMA_SetConfig+0x284>)
 8006b1a:	4293      	cmp	r3, r2
 8006b1c:	d009      	beq.n	8006b32 <DMA_SetConfig+0x10a>
 8006b1e:	68fb      	ldr	r3, [r7, #12]
 8006b20:	681b      	ldr	r3, [r3, #0]
 8006b22:	4a63      	ldr	r2, [pc, #396]	; (8006cb0 <DMA_SetConfig+0x288>)
 8006b24:	4293      	cmp	r3, r2
 8006b26:	d004      	beq.n	8006b32 <DMA_SetConfig+0x10a>
 8006b28:	68fb      	ldr	r3, [r7, #12]
 8006b2a:	681b      	ldr	r3, [r3, #0]
 8006b2c:	4a61      	ldr	r2, [pc, #388]	; (8006cb4 <DMA_SetConfig+0x28c>)
 8006b2e:	4293      	cmp	r3, r2
 8006b30:	d101      	bne.n	8006b36 <DMA_SetConfig+0x10e>
 8006b32:	2301      	movs	r3, #1
 8006b34:	e000      	b.n	8006b38 <DMA_SetConfig+0x110>
 8006b36:	2300      	movs	r3, #0
 8006b38:	2b00      	cmp	r3, #0
 8006b3a:	d00d      	beq.n	8006b58 <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8006b3c:	68fb      	ldr	r3, [r7, #12]
 8006b3e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006b40:	68fa      	ldr	r2, [r7, #12]
 8006b42:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8006b44:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 8006b46:	68fb      	ldr	r3, [r7, #12]
 8006b48:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006b4a:	2b00      	cmp	r3, #0
 8006b4c:	d004      	beq.n	8006b58 <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8006b4e:	68fb      	ldr	r3, [r7, #12]
 8006b50:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006b52:	68fa      	ldr	r2, [r7, #12]
 8006b54:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8006b56:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8006b58:	68fb      	ldr	r3, [r7, #12]
 8006b5a:	681b      	ldr	r3, [r3, #0]
 8006b5c:	4a3e      	ldr	r2, [pc, #248]	; (8006c58 <DMA_SetConfig+0x230>)
 8006b5e:	4293      	cmp	r3, r2
 8006b60:	d04a      	beq.n	8006bf8 <DMA_SetConfig+0x1d0>
 8006b62:	68fb      	ldr	r3, [r7, #12]
 8006b64:	681b      	ldr	r3, [r3, #0]
 8006b66:	4a3d      	ldr	r2, [pc, #244]	; (8006c5c <DMA_SetConfig+0x234>)
 8006b68:	4293      	cmp	r3, r2
 8006b6a:	d045      	beq.n	8006bf8 <DMA_SetConfig+0x1d0>
 8006b6c:	68fb      	ldr	r3, [r7, #12]
 8006b6e:	681b      	ldr	r3, [r3, #0]
 8006b70:	4a3b      	ldr	r2, [pc, #236]	; (8006c60 <DMA_SetConfig+0x238>)
 8006b72:	4293      	cmp	r3, r2
 8006b74:	d040      	beq.n	8006bf8 <DMA_SetConfig+0x1d0>
 8006b76:	68fb      	ldr	r3, [r7, #12]
 8006b78:	681b      	ldr	r3, [r3, #0]
 8006b7a:	4a3a      	ldr	r2, [pc, #232]	; (8006c64 <DMA_SetConfig+0x23c>)
 8006b7c:	4293      	cmp	r3, r2
 8006b7e:	d03b      	beq.n	8006bf8 <DMA_SetConfig+0x1d0>
 8006b80:	68fb      	ldr	r3, [r7, #12]
 8006b82:	681b      	ldr	r3, [r3, #0]
 8006b84:	4a38      	ldr	r2, [pc, #224]	; (8006c68 <DMA_SetConfig+0x240>)
 8006b86:	4293      	cmp	r3, r2
 8006b88:	d036      	beq.n	8006bf8 <DMA_SetConfig+0x1d0>
 8006b8a:	68fb      	ldr	r3, [r7, #12]
 8006b8c:	681b      	ldr	r3, [r3, #0]
 8006b8e:	4a37      	ldr	r2, [pc, #220]	; (8006c6c <DMA_SetConfig+0x244>)
 8006b90:	4293      	cmp	r3, r2
 8006b92:	d031      	beq.n	8006bf8 <DMA_SetConfig+0x1d0>
 8006b94:	68fb      	ldr	r3, [r7, #12]
 8006b96:	681b      	ldr	r3, [r3, #0]
 8006b98:	4a35      	ldr	r2, [pc, #212]	; (8006c70 <DMA_SetConfig+0x248>)
 8006b9a:	4293      	cmp	r3, r2
 8006b9c:	d02c      	beq.n	8006bf8 <DMA_SetConfig+0x1d0>
 8006b9e:	68fb      	ldr	r3, [r7, #12]
 8006ba0:	681b      	ldr	r3, [r3, #0]
 8006ba2:	4a34      	ldr	r2, [pc, #208]	; (8006c74 <DMA_SetConfig+0x24c>)
 8006ba4:	4293      	cmp	r3, r2
 8006ba6:	d027      	beq.n	8006bf8 <DMA_SetConfig+0x1d0>
 8006ba8:	68fb      	ldr	r3, [r7, #12]
 8006baa:	681b      	ldr	r3, [r3, #0]
 8006bac:	4a32      	ldr	r2, [pc, #200]	; (8006c78 <DMA_SetConfig+0x250>)
 8006bae:	4293      	cmp	r3, r2
 8006bb0:	d022      	beq.n	8006bf8 <DMA_SetConfig+0x1d0>
 8006bb2:	68fb      	ldr	r3, [r7, #12]
 8006bb4:	681b      	ldr	r3, [r3, #0]
 8006bb6:	4a31      	ldr	r2, [pc, #196]	; (8006c7c <DMA_SetConfig+0x254>)
 8006bb8:	4293      	cmp	r3, r2
 8006bba:	d01d      	beq.n	8006bf8 <DMA_SetConfig+0x1d0>
 8006bbc:	68fb      	ldr	r3, [r7, #12]
 8006bbe:	681b      	ldr	r3, [r3, #0]
 8006bc0:	4a2f      	ldr	r2, [pc, #188]	; (8006c80 <DMA_SetConfig+0x258>)
 8006bc2:	4293      	cmp	r3, r2
 8006bc4:	d018      	beq.n	8006bf8 <DMA_SetConfig+0x1d0>
 8006bc6:	68fb      	ldr	r3, [r7, #12]
 8006bc8:	681b      	ldr	r3, [r3, #0]
 8006bca:	4a2e      	ldr	r2, [pc, #184]	; (8006c84 <DMA_SetConfig+0x25c>)
 8006bcc:	4293      	cmp	r3, r2
 8006bce:	d013      	beq.n	8006bf8 <DMA_SetConfig+0x1d0>
 8006bd0:	68fb      	ldr	r3, [r7, #12]
 8006bd2:	681b      	ldr	r3, [r3, #0]
 8006bd4:	4a2c      	ldr	r2, [pc, #176]	; (8006c88 <DMA_SetConfig+0x260>)
 8006bd6:	4293      	cmp	r3, r2
 8006bd8:	d00e      	beq.n	8006bf8 <DMA_SetConfig+0x1d0>
 8006bda:	68fb      	ldr	r3, [r7, #12]
 8006bdc:	681b      	ldr	r3, [r3, #0]
 8006bde:	4a2b      	ldr	r2, [pc, #172]	; (8006c8c <DMA_SetConfig+0x264>)
 8006be0:	4293      	cmp	r3, r2
 8006be2:	d009      	beq.n	8006bf8 <DMA_SetConfig+0x1d0>
 8006be4:	68fb      	ldr	r3, [r7, #12]
 8006be6:	681b      	ldr	r3, [r3, #0]
 8006be8:	4a29      	ldr	r2, [pc, #164]	; (8006c90 <DMA_SetConfig+0x268>)
 8006bea:	4293      	cmp	r3, r2
 8006bec:	d004      	beq.n	8006bf8 <DMA_SetConfig+0x1d0>
 8006bee:	68fb      	ldr	r3, [r7, #12]
 8006bf0:	681b      	ldr	r3, [r3, #0]
 8006bf2:	4a28      	ldr	r2, [pc, #160]	; (8006c94 <DMA_SetConfig+0x26c>)
 8006bf4:	4293      	cmp	r3, r2
 8006bf6:	d101      	bne.n	8006bfc <DMA_SetConfig+0x1d4>
 8006bf8:	2301      	movs	r3, #1
 8006bfa:	e000      	b.n	8006bfe <DMA_SetConfig+0x1d6>
 8006bfc:	2300      	movs	r3, #0
 8006bfe:	2b00      	cmp	r3, #0
 8006c00:	d05a      	beq.n	8006cb8 <DMA_SetConfig+0x290>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8006c02:	68fb      	ldr	r3, [r7, #12]
 8006c04:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006c06:	f003 031f 	and.w	r3, r3, #31
 8006c0a:	223f      	movs	r2, #63	; 0x3f
 8006c0c:	409a      	lsls	r2, r3
 8006c0e:	697b      	ldr	r3, [r7, #20]
 8006c10:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8006c12:	68fb      	ldr	r3, [r7, #12]
 8006c14:	681b      	ldr	r3, [r3, #0]
 8006c16:	681a      	ldr	r2, [r3, #0]
 8006c18:	68fb      	ldr	r3, [r7, #12]
 8006c1a:	681b      	ldr	r3, [r3, #0]
 8006c1c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8006c20:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 8006c22:	68fb      	ldr	r3, [r7, #12]
 8006c24:	681b      	ldr	r3, [r3, #0]
 8006c26:	683a      	ldr	r2, [r7, #0]
 8006c28:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8006c2a:	68fb      	ldr	r3, [r7, #12]
 8006c2c:	689b      	ldr	r3, [r3, #8]
 8006c2e:	2b40      	cmp	r3, #64	; 0x40
 8006c30:	d108      	bne.n	8006c44 <DMA_SetConfig+0x21c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 8006c32:	68fb      	ldr	r3, [r7, #12]
 8006c34:	681b      	ldr	r3, [r3, #0]
 8006c36:	687a      	ldr	r2, [r7, #4]
 8006c38:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 8006c3a:	68fb      	ldr	r3, [r7, #12]
 8006c3c:	681b      	ldr	r3, [r3, #0]
 8006c3e:	68ba      	ldr	r2, [r7, #8]
 8006c40:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 8006c42:	e087      	b.n	8006d54 <DMA_SetConfig+0x32c>
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 8006c44:	68fb      	ldr	r3, [r7, #12]
 8006c46:	681b      	ldr	r3, [r3, #0]
 8006c48:	68ba      	ldr	r2, [r7, #8]
 8006c4a:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 8006c4c:	68fb      	ldr	r3, [r7, #12]
 8006c4e:	681b      	ldr	r3, [r3, #0]
 8006c50:	687a      	ldr	r2, [r7, #4]
 8006c52:	60da      	str	r2, [r3, #12]
}
 8006c54:	e07e      	b.n	8006d54 <DMA_SetConfig+0x32c>
 8006c56:	bf00      	nop
 8006c58:	40020010 	.word	0x40020010
 8006c5c:	40020028 	.word	0x40020028
 8006c60:	40020040 	.word	0x40020040
 8006c64:	40020058 	.word	0x40020058
 8006c68:	40020070 	.word	0x40020070
 8006c6c:	40020088 	.word	0x40020088
 8006c70:	400200a0 	.word	0x400200a0
 8006c74:	400200b8 	.word	0x400200b8
 8006c78:	40020410 	.word	0x40020410
 8006c7c:	40020428 	.word	0x40020428
 8006c80:	40020440 	.word	0x40020440
 8006c84:	40020458 	.word	0x40020458
 8006c88:	40020470 	.word	0x40020470
 8006c8c:	40020488 	.word	0x40020488
 8006c90:	400204a0 	.word	0x400204a0
 8006c94:	400204b8 	.word	0x400204b8
 8006c98:	58025408 	.word	0x58025408
 8006c9c:	5802541c 	.word	0x5802541c
 8006ca0:	58025430 	.word	0x58025430
 8006ca4:	58025444 	.word	0x58025444
 8006ca8:	58025458 	.word	0x58025458
 8006cac:	5802546c 	.word	0x5802546c
 8006cb0:	58025480 	.word	0x58025480
 8006cb4:	58025494 	.word	0x58025494
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8006cb8:	68fb      	ldr	r3, [r7, #12]
 8006cba:	681b      	ldr	r3, [r3, #0]
 8006cbc:	4a28      	ldr	r2, [pc, #160]	; (8006d60 <DMA_SetConfig+0x338>)
 8006cbe:	4293      	cmp	r3, r2
 8006cc0:	d022      	beq.n	8006d08 <DMA_SetConfig+0x2e0>
 8006cc2:	68fb      	ldr	r3, [r7, #12]
 8006cc4:	681b      	ldr	r3, [r3, #0]
 8006cc6:	4a27      	ldr	r2, [pc, #156]	; (8006d64 <DMA_SetConfig+0x33c>)
 8006cc8:	4293      	cmp	r3, r2
 8006cca:	d01d      	beq.n	8006d08 <DMA_SetConfig+0x2e0>
 8006ccc:	68fb      	ldr	r3, [r7, #12]
 8006cce:	681b      	ldr	r3, [r3, #0]
 8006cd0:	4a25      	ldr	r2, [pc, #148]	; (8006d68 <DMA_SetConfig+0x340>)
 8006cd2:	4293      	cmp	r3, r2
 8006cd4:	d018      	beq.n	8006d08 <DMA_SetConfig+0x2e0>
 8006cd6:	68fb      	ldr	r3, [r7, #12]
 8006cd8:	681b      	ldr	r3, [r3, #0]
 8006cda:	4a24      	ldr	r2, [pc, #144]	; (8006d6c <DMA_SetConfig+0x344>)
 8006cdc:	4293      	cmp	r3, r2
 8006cde:	d013      	beq.n	8006d08 <DMA_SetConfig+0x2e0>
 8006ce0:	68fb      	ldr	r3, [r7, #12]
 8006ce2:	681b      	ldr	r3, [r3, #0]
 8006ce4:	4a22      	ldr	r2, [pc, #136]	; (8006d70 <DMA_SetConfig+0x348>)
 8006ce6:	4293      	cmp	r3, r2
 8006ce8:	d00e      	beq.n	8006d08 <DMA_SetConfig+0x2e0>
 8006cea:	68fb      	ldr	r3, [r7, #12]
 8006cec:	681b      	ldr	r3, [r3, #0]
 8006cee:	4a21      	ldr	r2, [pc, #132]	; (8006d74 <DMA_SetConfig+0x34c>)
 8006cf0:	4293      	cmp	r3, r2
 8006cf2:	d009      	beq.n	8006d08 <DMA_SetConfig+0x2e0>
 8006cf4:	68fb      	ldr	r3, [r7, #12]
 8006cf6:	681b      	ldr	r3, [r3, #0]
 8006cf8:	4a1f      	ldr	r2, [pc, #124]	; (8006d78 <DMA_SetConfig+0x350>)
 8006cfa:	4293      	cmp	r3, r2
 8006cfc:	d004      	beq.n	8006d08 <DMA_SetConfig+0x2e0>
 8006cfe:	68fb      	ldr	r3, [r7, #12]
 8006d00:	681b      	ldr	r3, [r3, #0]
 8006d02:	4a1e      	ldr	r2, [pc, #120]	; (8006d7c <DMA_SetConfig+0x354>)
 8006d04:	4293      	cmp	r3, r2
 8006d06:	d101      	bne.n	8006d0c <DMA_SetConfig+0x2e4>
 8006d08:	2301      	movs	r3, #1
 8006d0a:	e000      	b.n	8006d0e <DMA_SetConfig+0x2e6>
 8006d0c:	2300      	movs	r3, #0
 8006d0e:	2b00      	cmp	r3, #0
 8006d10:	d020      	beq.n	8006d54 <DMA_SetConfig+0x32c>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8006d12:	68fb      	ldr	r3, [r7, #12]
 8006d14:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006d16:	f003 031f 	and.w	r3, r3, #31
 8006d1a:	2201      	movs	r2, #1
 8006d1c:	409a      	lsls	r2, r3
 8006d1e:	693b      	ldr	r3, [r7, #16]
 8006d20:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 8006d22:	68fb      	ldr	r3, [r7, #12]
 8006d24:	681b      	ldr	r3, [r3, #0]
 8006d26:	683a      	ldr	r2, [r7, #0]
 8006d28:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8006d2a:	68fb      	ldr	r3, [r7, #12]
 8006d2c:	689b      	ldr	r3, [r3, #8]
 8006d2e:	2b40      	cmp	r3, #64	; 0x40
 8006d30:	d108      	bne.n	8006d44 <DMA_SetConfig+0x31c>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 8006d32:	68fb      	ldr	r3, [r7, #12]
 8006d34:	681b      	ldr	r3, [r3, #0]
 8006d36:	687a      	ldr	r2, [r7, #4]
 8006d38:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 8006d3a:	68fb      	ldr	r3, [r7, #12]
 8006d3c:	681b      	ldr	r3, [r3, #0]
 8006d3e:	68ba      	ldr	r2, [r7, #8]
 8006d40:	60da      	str	r2, [r3, #12]
}
 8006d42:	e007      	b.n	8006d54 <DMA_SetConfig+0x32c>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 8006d44:	68fb      	ldr	r3, [r7, #12]
 8006d46:	681b      	ldr	r3, [r3, #0]
 8006d48:	68ba      	ldr	r2, [r7, #8]
 8006d4a:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 8006d4c:	68fb      	ldr	r3, [r7, #12]
 8006d4e:	681b      	ldr	r3, [r3, #0]
 8006d50:	687a      	ldr	r2, [r7, #4]
 8006d52:	60da      	str	r2, [r3, #12]
}
 8006d54:	bf00      	nop
 8006d56:	371c      	adds	r7, #28
 8006d58:	46bd      	mov	sp, r7
 8006d5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d5e:	4770      	bx	lr
 8006d60:	58025408 	.word	0x58025408
 8006d64:	5802541c 	.word	0x5802541c
 8006d68:	58025430 	.word	0x58025430
 8006d6c:	58025444 	.word	0x58025444
 8006d70:	58025458 	.word	0x58025458
 8006d74:	5802546c 	.word	0x5802546c
 8006d78:	58025480 	.word	0x58025480
 8006d7c:	58025494 	.word	0x58025494

08006d80 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8006d80:	b480      	push	{r7}
 8006d82:	b085      	sub	sp, #20
 8006d84:	af00      	add	r7, sp, #0
 8006d86:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	681b      	ldr	r3, [r3, #0]
 8006d8c:	4a42      	ldr	r2, [pc, #264]	; (8006e98 <DMA_CalcBaseAndBitshift+0x118>)
 8006d8e:	4293      	cmp	r3, r2
 8006d90:	d04a      	beq.n	8006e28 <DMA_CalcBaseAndBitshift+0xa8>
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	681b      	ldr	r3, [r3, #0]
 8006d96:	4a41      	ldr	r2, [pc, #260]	; (8006e9c <DMA_CalcBaseAndBitshift+0x11c>)
 8006d98:	4293      	cmp	r3, r2
 8006d9a:	d045      	beq.n	8006e28 <DMA_CalcBaseAndBitshift+0xa8>
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	681b      	ldr	r3, [r3, #0]
 8006da0:	4a3f      	ldr	r2, [pc, #252]	; (8006ea0 <DMA_CalcBaseAndBitshift+0x120>)
 8006da2:	4293      	cmp	r3, r2
 8006da4:	d040      	beq.n	8006e28 <DMA_CalcBaseAndBitshift+0xa8>
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	681b      	ldr	r3, [r3, #0]
 8006daa:	4a3e      	ldr	r2, [pc, #248]	; (8006ea4 <DMA_CalcBaseAndBitshift+0x124>)
 8006dac:	4293      	cmp	r3, r2
 8006dae:	d03b      	beq.n	8006e28 <DMA_CalcBaseAndBitshift+0xa8>
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	681b      	ldr	r3, [r3, #0]
 8006db4:	4a3c      	ldr	r2, [pc, #240]	; (8006ea8 <DMA_CalcBaseAndBitshift+0x128>)
 8006db6:	4293      	cmp	r3, r2
 8006db8:	d036      	beq.n	8006e28 <DMA_CalcBaseAndBitshift+0xa8>
 8006dba:	687b      	ldr	r3, [r7, #4]
 8006dbc:	681b      	ldr	r3, [r3, #0]
 8006dbe:	4a3b      	ldr	r2, [pc, #236]	; (8006eac <DMA_CalcBaseAndBitshift+0x12c>)
 8006dc0:	4293      	cmp	r3, r2
 8006dc2:	d031      	beq.n	8006e28 <DMA_CalcBaseAndBitshift+0xa8>
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	681b      	ldr	r3, [r3, #0]
 8006dc8:	4a39      	ldr	r2, [pc, #228]	; (8006eb0 <DMA_CalcBaseAndBitshift+0x130>)
 8006dca:	4293      	cmp	r3, r2
 8006dcc:	d02c      	beq.n	8006e28 <DMA_CalcBaseAndBitshift+0xa8>
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	681b      	ldr	r3, [r3, #0]
 8006dd2:	4a38      	ldr	r2, [pc, #224]	; (8006eb4 <DMA_CalcBaseAndBitshift+0x134>)
 8006dd4:	4293      	cmp	r3, r2
 8006dd6:	d027      	beq.n	8006e28 <DMA_CalcBaseAndBitshift+0xa8>
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	681b      	ldr	r3, [r3, #0]
 8006ddc:	4a36      	ldr	r2, [pc, #216]	; (8006eb8 <DMA_CalcBaseAndBitshift+0x138>)
 8006dde:	4293      	cmp	r3, r2
 8006de0:	d022      	beq.n	8006e28 <DMA_CalcBaseAndBitshift+0xa8>
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	681b      	ldr	r3, [r3, #0]
 8006de6:	4a35      	ldr	r2, [pc, #212]	; (8006ebc <DMA_CalcBaseAndBitshift+0x13c>)
 8006de8:	4293      	cmp	r3, r2
 8006dea:	d01d      	beq.n	8006e28 <DMA_CalcBaseAndBitshift+0xa8>
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	681b      	ldr	r3, [r3, #0]
 8006df0:	4a33      	ldr	r2, [pc, #204]	; (8006ec0 <DMA_CalcBaseAndBitshift+0x140>)
 8006df2:	4293      	cmp	r3, r2
 8006df4:	d018      	beq.n	8006e28 <DMA_CalcBaseAndBitshift+0xa8>
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	681b      	ldr	r3, [r3, #0]
 8006dfa:	4a32      	ldr	r2, [pc, #200]	; (8006ec4 <DMA_CalcBaseAndBitshift+0x144>)
 8006dfc:	4293      	cmp	r3, r2
 8006dfe:	d013      	beq.n	8006e28 <DMA_CalcBaseAndBitshift+0xa8>
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	681b      	ldr	r3, [r3, #0]
 8006e04:	4a30      	ldr	r2, [pc, #192]	; (8006ec8 <DMA_CalcBaseAndBitshift+0x148>)
 8006e06:	4293      	cmp	r3, r2
 8006e08:	d00e      	beq.n	8006e28 <DMA_CalcBaseAndBitshift+0xa8>
 8006e0a:	687b      	ldr	r3, [r7, #4]
 8006e0c:	681b      	ldr	r3, [r3, #0]
 8006e0e:	4a2f      	ldr	r2, [pc, #188]	; (8006ecc <DMA_CalcBaseAndBitshift+0x14c>)
 8006e10:	4293      	cmp	r3, r2
 8006e12:	d009      	beq.n	8006e28 <DMA_CalcBaseAndBitshift+0xa8>
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	681b      	ldr	r3, [r3, #0]
 8006e18:	4a2d      	ldr	r2, [pc, #180]	; (8006ed0 <DMA_CalcBaseAndBitshift+0x150>)
 8006e1a:	4293      	cmp	r3, r2
 8006e1c:	d004      	beq.n	8006e28 <DMA_CalcBaseAndBitshift+0xa8>
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	681b      	ldr	r3, [r3, #0]
 8006e22:	4a2c      	ldr	r2, [pc, #176]	; (8006ed4 <DMA_CalcBaseAndBitshift+0x154>)
 8006e24:	4293      	cmp	r3, r2
 8006e26:	d101      	bne.n	8006e2c <DMA_CalcBaseAndBitshift+0xac>
 8006e28:	2301      	movs	r3, #1
 8006e2a:	e000      	b.n	8006e2e <DMA_CalcBaseAndBitshift+0xae>
 8006e2c:	2300      	movs	r3, #0
 8006e2e:	2b00      	cmp	r3, #0
 8006e30:	d024      	beq.n	8006e7c <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	681b      	ldr	r3, [r3, #0]
 8006e36:	b2db      	uxtb	r3, r3
 8006e38:	3b10      	subs	r3, #16
 8006e3a:	4a27      	ldr	r2, [pc, #156]	; (8006ed8 <DMA_CalcBaseAndBitshift+0x158>)
 8006e3c:	fba2 2303 	umull	r2, r3, r2, r3
 8006e40:	091b      	lsrs	r3, r3, #4
 8006e42:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8006e44:	68fb      	ldr	r3, [r7, #12]
 8006e46:	f003 0307 	and.w	r3, r3, #7
 8006e4a:	4a24      	ldr	r2, [pc, #144]	; (8006edc <DMA_CalcBaseAndBitshift+0x15c>)
 8006e4c:	5cd3      	ldrb	r3, [r2, r3]
 8006e4e:	461a      	mov	r2, r3
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	65da      	str	r2, [r3, #92]	; 0x5c

    if (stream_number > 3U)
 8006e54:	68fb      	ldr	r3, [r7, #12]
 8006e56:	2b03      	cmp	r3, #3
 8006e58:	d908      	bls.n	8006e6c <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	681b      	ldr	r3, [r3, #0]
 8006e5e:	461a      	mov	r2, r3
 8006e60:	4b1f      	ldr	r3, [pc, #124]	; (8006ee0 <DMA_CalcBaseAndBitshift+0x160>)
 8006e62:	4013      	ands	r3, r2
 8006e64:	1d1a      	adds	r2, r3, #4
 8006e66:	687b      	ldr	r3, [r7, #4]
 8006e68:	659a      	str	r2, [r3, #88]	; 0x58
 8006e6a:	e00d      	b.n	8006e88 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	681b      	ldr	r3, [r3, #0]
 8006e70:	461a      	mov	r2, r3
 8006e72:	4b1b      	ldr	r3, [pc, #108]	; (8006ee0 <DMA_CalcBaseAndBitshift+0x160>)
 8006e74:	4013      	ands	r3, r2
 8006e76:	687a      	ldr	r2, [r7, #4]
 8006e78:	6593      	str	r3, [r2, #88]	; 0x58
 8006e7a:	e005      	b.n	8006e88 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	681b      	ldr	r3, [r3, #0]
 8006e80:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	659a      	str	r2, [r3, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8006e8c:	4618      	mov	r0, r3
 8006e8e:	3714      	adds	r7, #20
 8006e90:	46bd      	mov	sp, r7
 8006e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e96:	4770      	bx	lr
 8006e98:	40020010 	.word	0x40020010
 8006e9c:	40020028 	.word	0x40020028
 8006ea0:	40020040 	.word	0x40020040
 8006ea4:	40020058 	.word	0x40020058
 8006ea8:	40020070 	.word	0x40020070
 8006eac:	40020088 	.word	0x40020088
 8006eb0:	400200a0 	.word	0x400200a0
 8006eb4:	400200b8 	.word	0x400200b8
 8006eb8:	40020410 	.word	0x40020410
 8006ebc:	40020428 	.word	0x40020428
 8006ec0:	40020440 	.word	0x40020440
 8006ec4:	40020458 	.word	0x40020458
 8006ec8:	40020470 	.word	0x40020470
 8006ecc:	40020488 	.word	0x40020488
 8006ed0:	400204a0 	.word	0x400204a0
 8006ed4:	400204b8 	.word	0x400204b8
 8006ed8:	aaaaaaab 	.word	0xaaaaaaab
 8006edc:	0801c504 	.word	0x0801c504
 8006ee0:	fffffc00 	.word	0xfffffc00

08006ee4 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8006ee4:	b480      	push	{r7}
 8006ee6:	b085      	sub	sp, #20
 8006ee8:	af00      	add	r7, sp, #0
 8006eea:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006eec:	2300      	movs	r3, #0
 8006eee:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	699b      	ldr	r3, [r3, #24]
 8006ef4:	2b00      	cmp	r3, #0
 8006ef6:	d120      	bne.n	8006f3a <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006efc:	2b03      	cmp	r3, #3
 8006efe:	d858      	bhi.n	8006fb2 <DMA_CheckFifoParam+0xce>
 8006f00:	a201      	add	r2, pc, #4	; (adr r2, 8006f08 <DMA_CheckFifoParam+0x24>)
 8006f02:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006f06:	bf00      	nop
 8006f08:	08006f19 	.word	0x08006f19
 8006f0c:	08006f2b 	.word	0x08006f2b
 8006f10:	08006f19 	.word	0x08006f19
 8006f14:	08006fb3 	.word	0x08006fb3
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f1c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006f20:	2b00      	cmp	r3, #0
 8006f22:	d048      	beq.n	8006fb6 <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 8006f24:	2301      	movs	r3, #1
 8006f26:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8006f28:	e045      	b.n	8006fb6 <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f2e:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8006f32:	d142      	bne.n	8006fba <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 8006f34:	2301      	movs	r3, #1
 8006f36:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8006f38:	e03f      	b.n	8006fba <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8006f3a:	687b      	ldr	r3, [r7, #4]
 8006f3c:	699b      	ldr	r3, [r3, #24]
 8006f3e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006f42:	d123      	bne.n	8006f8c <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006f48:	2b03      	cmp	r3, #3
 8006f4a:	d838      	bhi.n	8006fbe <DMA_CheckFifoParam+0xda>
 8006f4c:	a201      	add	r2, pc, #4	; (adr r2, 8006f54 <DMA_CheckFifoParam+0x70>)
 8006f4e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006f52:	bf00      	nop
 8006f54:	08006f65 	.word	0x08006f65
 8006f58:	08006f6b 	.word	0x08006f6b
 8006f5c:	08006f65 	.word	0x08006f65
 8006f60:	08006f7d 	.word	0x08006f7d
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 8006f64:	2301      	movs	r3, #1
 8006f66:	73fb      	strb	r3, [r7, #15]
        break;
 8006f68:	e030      	b.n	8006fcc <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f6e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006f72:	2b00      	cmp	r3, #0
 8006f74:	d025      	beq.n	8006fc2 <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 8006f76:	2301      	movs	r3, #1
 8006f78:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8006f7a:	e022      	b.n	8006fc2 <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f80:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8006f84:	d11f      	bne.n	8006fc6 <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 8006f86:	2301      	movs	r3, #1
 8006f88:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8006f8a:	e01c      	b.n	8006fc6 <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006f90:	2b02      	cmp	r3, #2
 8006f92:	d902      	bls.n	8006f9a <DMA_CheckFifoParam+0xb6>
 8006f94:	2b03      	cmp	r3, #3
 8006f96:	d003      	beq.n	8006fa0 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 8006f98:	e018      	b.n	8006fcc <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 8006f9a:	2301      	movs	r3, #1
 8006f9c:	73fb      	strb	r3, [r7, #15]
        break;
 8006f9e:	e015      	b.n	8006fcc <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006fa4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006fa8:	2b00      	cmp	r3, #0
 8006faa:	d00e      	beq.n	8006fca <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 8006fac:	2301      	movs	r3, #1
 8006fae:	73fb      	strb	r3, [r7, #15]
    break;
 8006fb0:	e00b      	b.n	8006fca <DMA_CheckFifoParam+0xe6>
        break;
 8006fb2:	bf00      	nop
 8006fb4:	e00a      	b.n	8006fcc <DMA_CheckFifoParam+0xe8>
        break;
 8006fb6:	bf00      	nop
 8006fb8:	e008      	b.n	8006fcc <DMA_CheckFifoParam+0xe8>
        break;
 8006fba:	bf00      	nop
 8006fbc:	e006      	b.n	8006fcc <DMA_CheckFifoParam+0xe8>
        break;
 8006fbe:	bf00      	nop
 8006fc0:	e004      	b.n	8006fcc <DMA_CheckFifoParam+0xe8>
        break;
 8006fc2:	bf00      	nop
 8006fc4:	e002      	b.n	8006fcc <DMA_CheckFifoParam+0xe8>
        break;
 8006fc6:	bf00      	nop
 8006fc8:	e000      	b.n	8006fcc <DMA_CheckFifoParam+0xe8>
    break;
 8006fca:	bf00      	nop
    }
  }

  return status;
 8006fcc:	7bfb      	ldrb	r3, [r7, #15]
}
 8006fce:	4618      	mov	r0, r3
 8006fd0:	3714      	adds	r7, #20
 8006fd2:	46bd      	mov	sp, r7
 8006fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fd8:	4770      	bx	lr
 8006fda:	bf00      	nop

08006fdc <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8006fdc:	b480      	push	{r7}
 8006fde:	b085      	sub	sp, #20
 8006fe0:	af00      	add	r7, sp, #0
 8006fe2:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	681b      	ldr	r3, [r3, #0]
 8006fe8:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	681b      	ldr	r3, [r3, #0]
 8006fee:	4a38      	ldr	r2, [pc, #224]	; (80070d0 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 8006ff0:	4293      	cmp	r3, r2
 8006ff2:	d022      	beq.n	800703a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	681b      	ldr	r3, [r3, #0]
 8006ff8:	4a36      	ldr	r2, [pc, #216]	; (80070d4 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 8006ffa:	4293      	cmp	r3, r2
 8006ffc:	d01d      	beq.n	800703a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8006ffe:	687b      	ldr	r3, [r7, #4]
 8007000:	681b      	ldr	r3, [r3, #0]
 8007002:	4a35      	ldr	r2, [pc, #212]	; (80070d8 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 8007004:	4293      	cmp	r3, r2
 8007006:	d018      	beq.n	800703a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	681b      	ldr	r3, [r3, #0]
 800700c:	4a33      	ldr	r2, [pc, #204]	; (80070dc <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 800700e:	4293      	cmp	r3, r2
 8007010:	d013      	beq.n	800703a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8007012:	687b      	ldr	r3, [r7, #4]
 8007014:	681b      	ldr	r3, [r3, #0]
 8007016:	4a32      	ldr	r2, [pc, #200]	; (80070e0 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 8007018:	4293      	cmp	r3, r2
 800701a:	d00e      	beq.n	800703a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	681b      	ldr	r3, [r3, #0]
 8007020:	4a30      	ldr	r2, [pc, #192]	; (80070e4 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 8007022:	4293      	cmp	r3, r2
 8007024:	d009      	beq.n	800703a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	681b      	ldr	r3, [r3, #0]
 800702a:	4a2f      	ldr	r2, [pc, #188]	; (80070e8 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 800702c:	4293      	cmp	r3, r2
 800702e:	d004      	beq.n	800703a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	681b      	ldr	r3, [r3, #0]
 8007034:	4a2d      	ldr	r2, [pc, #180]	; (80070ec <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 8007036:	4293      	cmp	r3, r2
 8007038:	d101      	bne.n	800703e <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 800703a:	2301      	movs	r3, #1
 800703c:	e000      	b.n	8007040 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 800703e:	2300      	movs	r3, #0
 8007040:	2b00      	cmp	r3, #0
 8007042:	d01a      	beq.n	800707a <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	681b      	ldr	r3, [r3, #0]
 8007048:	b2db      	uxtb	r3, r3
 800704a:	3b08      	subs	r3, #8
 800704c:	4a28      	ldr	r2, [pc, #160]	; (80070f0 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 800704e:	fba2 2303 	umull	r2, r3, r2, r3
 8007052:	091b      	lsrs	r3, r3, #4
 8007054:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 8007056:	68fa      	ldr	r2, [r7, #12]
 8007058:	4b26      	ldr	r3, [pc, #152]	; (80070f4 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 800705a:	4413      	add	r3, r2
 800705c:	009b      	lsls	r3, r3, #2
 800705e:	461a      	mov	r2, r3
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	4a24      	ldr	r2, [pc, #144]	; (80070f8 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 8007068:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 800706a:	68fb      	ldr	r3, [r7, #12]
 800706c:	f003 031f 	and.w	r3, r3, #31
 8007070:	2201      	movs	r2, #1
 8007072:	409a      	lsls	r2, r3
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	669a      	str	r2, [r3, #104]	; 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 8007078:	e024      	b.n	80070c4 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	681b      	ldr	r3, [r3, #0]
 800707e:	b2db      	uxtb	r3, r3
 8007080:	3b10      	subs	r3, #16
 8007082:	4a1e      	ldr	r2, [pc, #120]	; (80070fc <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 8007084:	fba2 2303 	umull	r2, r3, r2, r3
 8007088:	091b      	lsrs	r3, r3, #4
 800708a:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 800708c:	68bb      	ldr	r3, [r7, #8]
 800708e:	4a1c      	ldr	r2, [pc, #112]	; (8007100 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 8007090:	4293      	cmp	r3, r2
 8007092:	d806      	bhi.n	80070a2 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 8007094:	68bb      	ldr	r3, [r7, #8]
 8007096:	4a1b      	ldr	r2, [pc, #108]	; (8007104 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 8007098:	4293      	cmp	r3, r2
 800709a:	d902      	bls.n	80070a2 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 800709c:	68fb      	ldr	r3, [r7, #12]
 800709e:	3308      	adds	r3, #8
 80070a0:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 80070a2:	68fa      	ldr	r2, [r7, #12]
 80070a4:	4b18      	ldr	r3, [pc, #96]	; (8007108 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 80070a6:	4413      	add	r3, r2
 80070a8:	009b      	lsls	r3, r3, #2
 80070aa:	461a      	mov	r2, r3
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	4a16      	ldr	r2, [pc, #88]	; (800710c <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 80070b4:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 80070b6:	68fb      	ldr	r3, [r7, #12]
 80070b8:	f003 031f 	and.w	r3, r3, #31
 80070bc:	2201      	movs	r2, #1
 80070be:	409a      	lsls	r2, r3
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	669a      	str	r2, [r3, #104]	; 0x68
}
 80070c4:	bf00      	nop
 80070c6:	3714      	adds	r7, #20
 80070c8:	46bd      	mov	sp, r7
 80070ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070ce:	4770      	bx	lr
 80070d0:	58025408 	.word	0x58025408
 80070d4:	5802541c 	.word	0x5802541c
 80070d8:	58025430 	.word	0x58025430
 80070dc:	58025444 	.word	0x58025444
 80070e0:	58025458 	.word	0x58025458
 80070e4:	5802546c 	.word	0x5802546c
 80070e8:	58025480 	.word	0x58025480
 80070ec:	58025494 	.word	0x58025494
 80070f0:	cccccccd 	.word	0xcccccccd
 80070f4:	16009600 	.word	0x16009600
 80070f8:	58025880 	.word	0x58025880
 80070fc:	aaaaaaab 	.word	0xaaaaaaab
 8007100:	400204b8 	.word	0x400204b8
 8007104:	4002040f 	.word	0x4002040f
 8007108:	10008200 	.word	0x10008200
 800710c:	40020880 	.word	0x40020880

08007110 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8007110:	b480      	push	{r7}
 8007112:	b085      	sub	sp, #20
 8007114:	af00      	add	r7, sp, #0
 8007116:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8007118:	687b      	ldr	r3, [r7, #4]
 800711a:	685b      	ldr	r3, [r3, #4]
 800711c:	b2db      	uxtb	r3, r3
 800711e:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 8007120:	68fb      	ldr	r3, [r7, #12]
 8007122:	2b00      	cmp	r3, #0
 8007124:	d04a      	beq.n	80071bc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 8007126:	68fb      	ldr	r3, [r7, #12]
 8007128:	2b08      	cmp	r3, #8
 800712a:	d847      	bhi.n	80071bc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 800712c:	687b      	ldr	r3, [r7, #4]
 800712e:	681b      	ldr	r3, [r3, #0]
 8007130:	4a25      	ldr	r2, [pc, #148]	; (80071c8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 8007132:	4293      	cmp	r3, r2
 8007134:	d022      	beq.n	800717c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8007136:	687b      	ldr	r3, [r7, #4]
 8007138:	681b      	ldr	r3, [r3, #0]
 800713a:	4a24      	ldr	r2, [pc, #144]	; (80071cc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 800713c:	4293      	cmp	r3, r2
 800713e:	d01d      	beq.n	800717c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	681b      	ldr	r3, [r3, #0]
 8007144:	4a22      	ldr	r2, [pc, #136]	; (80071d0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 8007146:	4293      	cmp	r3, r2
 8007148:	d018      	beq.n	800717c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800714a:	687b      	ldr	r3, [r7, #4]
 800714c:	681b      	ldr	r3, [r3, #0]
 800714e:	4a21      	ldr	r2, [pc, #132]	; (80071d4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 8007150:	4293      	cmp	r3, r2
 8007152:	d013      	beq.n	800717c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	681b      	ldr	r3, [r3, #0]
 8007158:	4a1f      	ldr	r2, [pc, #124]	; (80071d8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 800715a:	4293      	cmp	r3, r2
 800715c:	d00e      	beq.n	800717c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800715e:	687b      	ldr	r3, [r7, #4]
 8007160:	681b      	ldr	r3, [r3, #0]
 8007162:	4a1e      	ldr	r2, [pc, #120]	; (80071dc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 8007164:	4293      	cmp	r3, r2
 8007166:	d009      	beq.n	800717c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8007168:	687b      	ldr	r3, [r7, #4]
 800716a:	681b      	ldr	r3, [r3, #0]
 800716c:	4a1c      	ldr	r2, [pc, #112]	; (80071e0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 800716e:	4293      	cmp	r3, r2
 8007170:	d004      	beq.n	800717c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8007172:	687b      	ldr	r3, [r7, #4]
 8007174:	681b      	ldr	r3, [r3, #0]
 8007176:	4a1b      	ldr	r2, [pc, #108]	; (80071e4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 8007178:	4293      	cmp	r3, r2
 800717a:	d101      	bne.n	8007180 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 800717c:	2301      	movs	r3, #1
 800717e:	e000      	b.n	8007182 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 8007180:	2300      	movs	r3, #0
 8007182:	2b00      	cmp	r3, #0
 8007184:	d00a      	beq.n	800719c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 8007186:	68fa      	ldr	r2, [r7, #12]
 8007188:	4b17      	ldr	r3, [pc, #92]	; (80071e8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 800718a:	4413      	add	r3, r2
 800718c:	009b      	lsls	r3, r3, #2
 800718e:	461a      	mov	r2, r3
 8007190:	687b      	ldr	r3, [r7, #4]
 8007192:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	4a15      	ldr	r2, [pc, #84]	; (80071ec <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 8007198:	671a      	str	r2, [r3, #112]	; 0x70
 800719a:	e009      	b.n	80071b0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 800719c:	68fa      	ldr	r2, [r7, #12]
 800719e:	4b14      	ldr	r3, [pc, #80]	; (80071f0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 80071a0:	4413      	add	r3, r2
 80071a2:	009b      	lsls	r3, r3, #2
 80071a4:	461a      	mov	r2, r3
 80071a6:	687b      	ldr	r3, [r7, #4]
 80071a8:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 80071aa:	687b      	ldr	r3, [r7, #4]
 80071ac:	4a11      	ldr	r2, [pc, #68]	; (80071f4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 80071ae:	671a      	str	r2, [r3, #112]	; 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 80071b0:	68fb      	ldr	r3, [r7, #12]
 80071b2:	3b01      	subs	r3, #1
 80071b4:	2201      	movs	r2, #1
 80071b6:	409a      	lsls	r2, r3
 80071b8:	687b      	ldr	r3, [r7, #4]
 80071ba:	675a      	str	r2, [r3, #116]	; 0x74
  }
}
 80071bc:	bf00      	nop
 80071be:	3714      	adds	r7, #20
 80071c0:	46bd      	mov	sp, r7
 80071c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071c6:	4770      	bx	lr
 80071c8:	58025408 	.word	0x58025408
 80071cc:	5802541c 	.word	0x5802541c
 80071d0:	58025430 	.word	0x58025430
 80071d4:	58025444 	.word	0x58025444
 80071d8:	58025458 	.word	0x58025458
 80071dc:	5802546c 	.word	0x5802546c
 80071e0:	58025480 	.word	0x58025480
 80071e4:	58025494 	.word	0x58025494
 80071e8:	1600963f 	.word	0x1600963f
 80071ec:	58025940 	.word	0x58025940
 80071f0:	1000823f 	.word	0x1000823f
 80071f4:	40020940 	.word	0x40020940

080071f8 <HAL_FDCAN_Init>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
 80071f8:	b580      	push	{r7, lr}
 80071fa:	b098      	sub	sp, #96	; 0x60
 80071fc:	af00      	add	r7, sp, #0
 80071fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  const uint32_t CvtEltSize[] = {0, 0, 0, 0, 0, 1, 2, 3, 4, 0, 5, 0, 0, 0, 6, 0, 0, 0, 7};
 8007200:	4a84      	ldr	r2, [pc, #528]	; (8007414 <HAL_FDCAN_Init+0x21c>)
 8007202:	f107 030c 	add.w	r3, r7, #12
 8007206:	4611      	mov	r1, r2
 8007208:	224c      	movs	r2, #76	; 0x4c
 800720a:	4618      	mov	r0, r3
 800720c:	f013 fb10 	bl	801a830 <memcpy>

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 8007210:	687b      	ldr	r3, [r7, #4]
 8007212:	2b00      	cmp	r3, #0
 8007214:	d101      	bne.n	800721a <HAL_FDCAN_Init+0x22>
  {
    return HAL_ERROR;
 8007216:	2301      	movs	r3, #1
 8007218:	e1ca      	b.n	80075b0 <HAL_FDCAN_Init+0x3b8>
  }

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 800721a:	687b      	ldr	r3, [r7, #4]
 800721c:	681b      	ldr	r3, [r3, #0]
 800721e:	4a7e      	ldr	r2, [pc, #504]	; (8007418 <HAL_FDCAN_Init+0x220>)
 8007220:	4293      	cmp	r3, r2
 8007222:	d106      	bne.n	8007232 <HAL_FDCAN_Init+0x3a>
  {
    hfdcan->ttcan = (TTCAN_TypeDef *)((uint32_t)hfdcan->Instance + 0x100U);
 8007224:	687b      	ldr	r3, [r7, #4]
 8007226:	681b      	ldr	r3, [r3, #0]
 8007228:	f503 7380 	add.w	r3, r3, #256	; 0x100
 800722c:	461a      	mov	r2, r3
 800722e:	687b      	ldr	r3, [r7, #4]
 8007230:	605a      	str	r2, [r3, #4]

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 8007232:	687b      	ldr	r3, [r7, #4]
 8007234:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8007238:	b2db      	uxtb	r3, r3
 800723a:	2b00      	cmp	r3, #0
 800723c:	d106      	bne.n	800724c <HAL_FDCAN_Init+0x54>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 800723e:	687b      	ldr	r3, [r7, #4]
 8007240:	2200      	movs	r2, #0
 8007242:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99

    /* Init the low level hardware: CLOCK, NVIC */
    HAL_FDCAN_MspInit(hfdcan);
 8007246:	6878      	ldr	r0, [r7, #4]
 8007248:	f7fd f94e 	bl	80044e8 <HAL_FDCAN_MspInit>
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 800724c:	687b      	ldr	r3, [r7, #4]
 800724e:	681b      	ldr	r3, [r3, #0]
 8007250:	699a      	ldr	r2, [r3, #24]
 8007252:	687b      	ldr	r3, [r7, #4]
 8007254:	681b      	ldr	r3, [r3, #0]
 8007256:	f022 0210 	bic.w	r2, r2, #16
 800725a:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 800725c:	f7fd fdaa 	bl	8004db4 <HAL_GetTick>
 8007260:	65f8      	str	r0, [r7, #92]	; 0x5c

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8007262:	e014      	b.n	800728e <HAL_FDCAN_Init+0x96>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8007264:	f7fd fda6 	bl	8004db4 <HAL_GetTick>
 8007268:	4602      	mov	r2, r0
 800726a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800726c:	1ad3      	subs	r3, r2, r3
 800726e:	2b0a      	cmp	r3, #10
 8007270:	d90d      	bls.n	800728e <HAL_FDCAN_Init+0x96>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8007272:	687b      	ldr	r3, [r7, #4]
 8007274:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8007278:	f043 0201 	orr.w	r2, r3, #1
 800727c:	687b      	ldr	r3, [r7, #4]
 800727e:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8007282:	687b      	ldr	r3, [r7, #4]
 8007284:	2203      	movs	r2, #3
 8007286:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

      return HAL_ERROR;
 800728a:	2301      	movs	r3, #1
 800728c:	e190      	b.n	80075b0 <HAL_FDCAN_Init+0x3b8>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 800728e:	687b      	ldr	r3, [r7, #4]
 8007290:	681b      	ldr	r3, [r3, #0]
 8007292:	699b      	ldr	r3, [r3, #24]
 8007294:	f003 0308 	and.w	r3, r3, #8
 8007298:	2b08      	cmp	r3, #8
 800729a:	d0e3      	beq.n	8007264 <HAL_FDCAN_Init+0x6c>
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	681b      	ldr	r3, [r3, #0]
 80072a0:	699a      	ldr	r2, [r3, #24]
 80072a2:	687b      	ldr	r3, [r7, #4]
 80072a4:	681b      	ldr	r3, [r3, #0]
 80072a6:	f042 0201 	orr.w	r2, r2, #1
 80072aa:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 80072ac:	f7fd fd82 	bl	8004db4 <HAL_GetTick>
 80072b0:	65f8      	str	r0, [r7, #92]	; 0x5c

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 80072b2:	e014      	b.n	80072de <HAL_FDCAN_Init+0xe6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 80072b4:	f7fd fd7e 	bl	8004db4 <HAL_GetTick>
 80072b8:	4602      	mov	r2, r0
 80072ba:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80072bc:	1ad3      	subs	r3, r2, r3
 80072be:	2b0a      	cmp	r3, #10
 80072c0:	d90d      	bls.n	80072de <HAL_FDCAN_Init+0xe6>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 80072c2:	687b      	ldr	r3, [r7, #4]
 80072c4:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80072c8:	f043 0201 	orr.w	r2, r3, #1
 80072cc:	687b      	ldr	r3, [r7, #4]
 80072ce:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 80072d2:	687b      	ldr	r3, [r7, #4]
 80072d4:	2203      	movs	r2, #3
 80072d6:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

      return HAL_ERROR;
 80072da:	2301      	movs	r3, #1
 80072dc:	e168      	b.n	80075b0 <HAL_FDCAN_Init+0x3b8>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 80072de:	687b      	ldr	r3, [r7, #4]
 80072e0:	681b      	ldr	r3, [r3, #0]
 80072e2:	699b      	ldr	r3, [r3, #24]
 80072e4:	f003 0301 	and.w	r3, r3, #1
 80072e8:	2b00      	cmp	r3, #0
 80072ea:	d0e3      	beq.n	80072b4 <HAL_FDCAN_Init+0xbc>
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 80072ec:	687b      	ldr	r3, [r7, #4]
 80072ee:	681b      	ldr	r3, [r3, #0]
 80072f0:	699a      	ldr	r2, [r3, #24]
 80072f2:	687b      	ldr	r3, [r7, #4]
 80072f4:	681b      	ldr	r3, [r3, #0]
 80072f6:	f042 0202 	orr.w	r2, r2, #2
 80072fa:	619a      	str	r2, [r3, #24]

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 80072fc:	687b      	ldr	r3, [r7, #4]
 80072fe:	7c1b      	ldrb	r3, [r3, #16]
 8007300:	2b01      	cmp	r3, #1
 8007302:	d108      	bne.n	8007316 <HAL_FDCAN_Init+0x11e>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8007304:	687b      	ldr	r3, [r7, #4]
 8007306:	681b      	ldr	r3, [r3, #0]
 8007308:	699a      	ldr	r2, [r3, #24]
 800730a:	687b      	ldr	r3, [r7, #4]
 800730c:	681b      	ldr	r3, [r3, #0]
 800730e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007312:	619a      	str	r2, [r3, #24]
 8007314:	e007      	b.n	8007326 <HAL_FDCAN_Init+0x12e>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8007316:	687b      	ldr	r3, [r7, #4]
 8007318:	681b      	ldr	r3, [r3, #0]
 800731a:	699a      	ldr	r2, [r3, #24]
 800731c:	687b      	ldr	r3, [r7, #4]
 800731e:	681b      	ldr	r3, [r3, #0]
 8007320:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007324:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 8007326:	687b      	ldr	r3, [r7, #4]
 8007328:	7c5b      	ldrb	r3, [r3, #17]
 800732a:	2b01      	cmp	r3, #1
 800732c:	d108      	bne.n	8007340 <HAL_FDCAN_Init+0x148>
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 800732e:	687b      	ldr	r3, [r7, #4]
 8007330:	681b      	ldr	r3, [r3, #0]
 8007332:	699a      	ldr	r2, [r3, #24]
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	681b      	ldr	r3, [r3, #0]
 8007338:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800733c:	619a      	str	r2, [r3, #24]
 800733e:	e007      	b.n	8007350 <HAL_FDCAN_Init+0x158>
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	681b      	ldr	r3, [r3, #0]
 8007344:	699a      	ldr	r2, [r3, #24]
 8007346:	687b      	ldr	r3, [r7, #4]
 8007348:	681b      	ldr	r3, [r3, #0]
 800734a:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800734e:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 8007350:	687b      	ldr	r3, [r7, #4]
 8007352:	7c9b      	ldrb	r3, [r3, #18]
 8007354:	2b01      	cmp	r3, #1
 8007356:	d108      	bne.n	800736a <HAL_FDCAN_Init+0x172>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8007358:	687b      	ldr	r3, [r7, #4]
 800735a:	681b      	ldr	r3, [r3, #0]
 800735c:	699a      	ldr	r2, [r3, #24]
 800735e:	687b      	ldr	r3, [r7, #4]
 8007360:	681b      	ldr	r3, [r3, #0]
 8007362:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8007366:	619a      	str	r2, [r3, #24]
 8007368:	e007      	b.n	800737a <HAL_FDCAN_Init+0x182>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 800736a:	687b      	ldr	r3, [r7, #4]
 800736c:	681b      	ldr	r3, [r3, #0]
 800736e:	699a      	ldr	r2, [r3, #24]
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	681b      	ldr	r3, [r3, #0]
 8007374:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8007378:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 800737a:	687b      	ldr	r3, [r7, #4]
 800737c:	681b      	ldr	r3, [r3, #0]
 800737e:	699b      	ldr	r3, [r3, #24]
 8007380:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8007384:	687b      	ldr	r3, [r7, #4]
 8007386:	689a      	ldr	r2, [r3, #8]
 8007388:	687b      	ldr	r3, [r7, #4]
 800738a:	681b      	ldr	r3, [r3, #0]
 800738c:	430a      	orrs	r2, r1
 800738e:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 8007390:	687b      	ldr	r3, [r7, #4]
 8007392:	681b      	ldr	r3, [r3, #0]
 8007394:	699a      	ldr	r2, [r3, #24]
 8007396:	687b      	ldr	r3, [r7, #4]
 8007398:	681b      	ldr	r3, [r3, #0]
 800739a:	f022 02a4 	bic.w	r2, r2, #164	; 0xa4
 800739e:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 80073a0:	687b      	ldr	r3, [r7, #4]
 80073a2:	681b      	ldr	r3, [r3, #0]
 80073a4:	691a      	ldr	r2, [r3, #16]
 80073a6:	687b      	ldr	r3, [r7, #4]
 80073a8:	681b      	ldr	r3, [r3, #0]
 80073aa:	f022 0210 	bic.w	r2, r2, #16
 80073ae:	611a      	str	r2, [r3, #16]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 80073b0:	687b      	ldr	r3, [r7, #4]
 80073b2:	68db      	ldr	r3, [r3, #12]
 80073b4:	2b01      	cmp	r3, #1
 80073b6:	d108      	bne.n	80073ca <HAL_FDCAN_Init+0x1d2>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 80073b8:	687b      	ldr	r3, [r7, #4]
 80073ba:	681b      	ldr	r3, [r3, #0]
 80073bc:	699a      	ldr	r2, [r3, #24]
 80073be:	687b      	ldr	r3, [r7, #4]
 80073c0:	681b      	ldr	r3, [r3, #0]
 80073c2:	f042 0204 	orr.w	r2, r2, #4
 80073c6:	619a      	str	r2, [r3, #24]
 80073c8:	e030      	b.n	800742c <HAL_FDCAN_Init+0x234>
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 80073ca:	687b      	ldr	r3, [r7, #4]
 80073cc:	68db      	ldr	r3, [r3, #12]
 80073ce:	2b00      	cmp	r3, #0
 80073d0:	d02c      	beq.n	800742c <HAL_FDCAN_Init+0x234>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 80073d2:	687b      	ldr	r3, [r7, #4]
 80073d4:	68db      	ldr	r3, [r3, #12]
 80073d6:	2b02      	cmp	r3, #2
 80073d8:	d020      	beq.n	800741c <HAL_FDCAN_Init+0x224>
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 80073da:	687b      	ldr	r3, [r7, #4]
 80073dc:	681b      	ldr	r3, [r3, #0]
 80073de:	699a      	ldr	r2, [r3, #24]
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	681b      	ldr	r3, [r3, #0]
 80073e4:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80073e8:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 80073ea:	687b      	ldr	r3, [r7, #4]
 80073ec:	681b      	ldr	r3, [r3, #0]
 80073ee:	691a      	ldr	r2, [r3, #16]
 80073f0:	687b      	ldr	r3, [r7, #4]
 80073f2:	681b      	ldr	r3, [r3, #0]
 80073f4:	f042 0210 	orr.w	r2, r2, #16
 80073f8:	611a      	str	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 80073fa:	687b      	ldr	r3, [r7, #4]
 80073fc:	68db      	ldr	r3, [r3, #12]
 80073fe:	2b03      	cmp	r3, #3
 8007400:	d114      	bne.n	800742c <HAL_FDCAN_Init+0x234>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8007402:	687b      	ldr	r3, [r7, #4]
 8007404:	681b      	ldr	r3, [r3, #0]
 8007406:	699a      	ldr	r2, [r3, #24]
 8007408:	687b      	ldr	r3, [r7, #4]
 800740a:	681b      	ldr	r3, [r3, #0]
 800740c:	f042 0220 	orr.w	r2, r2, #32
 8007410:	619a      	str	r2, [r3, #24]
 8007412:	e00b      	b.n	800742c <HAL_FDCAN_Init+0x234>
 8007414:	0801c410 	.word	0x0801c410
 8007418:	4000a000 	.word	0x4000a000
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 800741c:	687b      	ldr	r3, [r7, #4]
 800741e:	681b      	ldr	r3, [r3, #0]
 8007420:	699a      	ldr	r2, [r3, #24]
 8007422:	687b      	ldr	r3, [r7, #4]
 8007424:	681b      	ldr	r3, [r3, #0]
 8007426:	f042 0220 	orr.w	r2, r2, #32
 800742a:	619a      	str	r2, [r3, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 800742c:	687b      	ldr	r3, [r7, #4]
 800742e:	699b      	ldr	r3, [r3, #24]
 8007430:	3b01      	subs	r3, #1
 8007432:	065a      	lsls	r2, r3, #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	69db      	ldr	r3, [r3, #28]
 8007438:	3b01      	subs	r3, #1
 800743a:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 800743c:	431a      	orrs	r2, r3
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 800743e:	687b      	ldr	r3, [r7, #4]
 8007440:	6a1b      	ldr	r3, [r3, #32]
 8007442:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8007444:	ea42 0103 	orr.w	r1, r2, r3
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 8007448:	687b      	ldr	r3, [r7, #4]
 800744a:	695b      	ldr	r3, [r3, #20]
 800744c:	3b01      	subs	r3, #1
 800744e:	041a      	lsls	r2, r3, #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8007450:	687b      	ldr	r3, [r7, #4]
 8007452:	681b      	ldr	r3, [r3, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8007454:	430a      	orrs	r2, r1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8007456:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 8007458:	687b      	ldr	r3, [r7, #4]
 800745a:	689b      	ldr	r3, [r3, #8]
 800745c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007460:	d115      	bne.n	800748e <HAL_FDCAN_Init+0x296>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 8007462:	687b      	ldr	r3, [r7, #4]
 8007464:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007466:	1e5a      	subs	r2, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)    | \
 8007468:	687b      	ldr	r3, [r7, #4]
 800746a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800746c:	3b01      	subs	r3, #1
 800746e:	021b      	lsls	r3, r3, #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 8007470:	431a      	orrs	r2, r3
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)    | \
 8007472:	687b      	ldr	r3, [r7, #4]
 8007474:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007476:	3b01      	subs	r3, #1
 8007478:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)    | \
 800747a:	ea42 0103 	orr.w	r1, r2, r3
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 800747e:	687b      	ldr	r3, [r7, #4]
 8007480:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007482:	3b01      	subs	r3, #1
 8007484:	041a      	lsls	r2, r3, #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 8007486:	687b      	ldr	r3, [r7, #4]
 8007488:	681b      	ldr	r3, [r3, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)    | \
 800748a:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 800748c:	60da      	str	r2, [r3, #12]
  }

  if (hfdcan->Init.TxFifoQueueElmtsNbr > 0U)
 800748e:	687b      	ldr	r3, [r7, #4]
 8007490:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007492:	2b00      	cmp	r3, #0
 8007494:	d00a      	beq.n	80074ac <HAL_FDCAN_Init+0x2b4>
  {
    /* Select between Tx FIFO and Tx Queue operation modes */
    SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 8007496:	687b      	ldr	r3, [r7, #4]
 8007498:	681b      	ldr	r3, [r3, #0]
 800749a:	f8d3 10c0 	ldr.w	r1, [r3, #192]	; 0xc0
 800749e:	687b      	ldr	r3, [r7, #4]
 80074a0:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 80074a2:	687b      	ldr	r3, [r7, #4]
 80074a4:	681b      	ldr	r3, [r3, #0]
 80074a6:	430a      	orrs	r2, r1
 80074a8:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
  }

  /* Configure Tx element size */
  if ((hfdcan->Init.TxBuffersNbr + hfdcan->Init.TxFifoQueueElmtsNbr) > 0U)
 80074ac:	687b      	ldr	r3, [r7, #4]
 80074ae:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80074b4:	4413      	add	r3, r2
 80074b6:	2b00      	cmp	r3, #0
 80074b8:	d012      	beq.n	80074e0 <HAL_FDCAN_Init+0x2e8>
  {
    MODIFY_REG(hfdcan->Instance->TXESC, FDCAN_TXESC_TBDS, CvtEltSize[hfdcan->Init.TxElmtSize]);
 80074ba:	687b      	ldr	r3, [r7, #4]
 80074bc:	681b      	ldr	r3, [r3, #0]
 80074be:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 80074c2:	f023 0107 	bic.w	r1, r3, #7
 80074c6:	687b      	ldr	r3, [r7, #4]
 80074c8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80074ca:	009b      	lsls	r3, r3, #2
 80074cc:	f107 0260 	add.w	r2, r7, #96	; 0x60
 80074d0:	4413      	add	r3, r2
 80074d2:	f853 2c54 	ldr.w	r2, [r3, #-84]
 80074d6:	687b      	ldr	r3, [r7, #4]
 80074d8:	681b      	ldr	r3, [r3, #0]
 80074da:	430a      	orrs	r2, r1
 80074dc:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  /* Configure Rx FIFO 0 element size */
  if (hfdcan->Init.RxFifo0ElmtsNbr > 0U)
 80074e0:	687b      	ldr	r3, [r7, #4]
 80074e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80074e4:	2b00      	cmp	r3, #0
 80074e6:	d012      	beq.n	800750e <HAL_FDCAN_Init+0x316>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_F0DS, (CvtEltSize[hfdcan->Init.RxFifo0ElmtSize] << FDCAN_RXESC_F0DS_Pos));
 80074e8:	687b      	ldr	r3, [r7, #4]
 80074ea:	681b      	ldr	r3, [r3, #0]
 80074ec:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 80074f0:	f023 0107 	bic.w	r1, r3, #7
 80074f4:	687b      	ldr	r3, [r7, #4]
 80074f6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80074f8:	009b      	lsls	r3, r3, #2
 80074fa:	f107 0260 	add.w	r2, r7, #96	; 0x60
 80074fe:	4413      	add	r3, r2
 8007500:	f853 2c54 	ldr.w	r2, [r3, #-84]
 8007504:	687b      	ldr	r3, [r7, #4]
 8007506:	681b      	ldr	r3, [r3, #0]
 8007508:	430a      	orrs	r2, r1
 800750a:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  }

  /* Configure Rx FIFO 1 element size */
  if (hfdcan->Init.RxFifo1ElmtsNbr > 0U)
 800750e:	687b      	ldr	r3, [r7, #4]
 8007510:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007512:	2b00      	cmp	r3, #0
 8007514:	d013      	beq.n	800753e <HAL_FDCAN_Init+0x346>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_F1DS, (CvtEltSize[hfdcan->Init.RxFifo1ElmtSize] << FDCAN_RXESC_F1DS_Pos));
 8007516:	687b      	ldr	r3, [r7, #4]
 8007518:	681b      	ldr	r3, [r3, #0]
 800751a:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 800751e:	f023 0170 	bic.w	r1, r3, #112	; 0x70
 8007522:	687b      	ldr	r3, [r7, #4]
 8007524:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007526:	009b      	lsls	r3, r3, #2
 8007528:	f107 0260 	add.w	r2, r7, #96	; 0x60
 800752c:	4413      	add	r3, r2
 800752e:	f853 3c54 	ldr.w	r3, [r3, #-84]
 8007532:	011a      	lsls	r2, r3, #4
 8007534:	687b      	ldr	r3, [r7, #4]
 8007536:	681b      	ldr	r3, [r3, #0]
 8007538:	430a      	orrs	r2, r1
 800753a:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  }

  /* Configure Rx buffer element size */
  if (hfdcan->Init.RxBuffersNbr > 0U)
 800753e:	687b      	ldr	r3, [r7, #4]
 8007540:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007542:	2b00      	cmp	r3, #0
 8007544:	d013      	beq.n	800756e <HAL_FDCAN_Init+0x376>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_RBDS, (CvtEltSize[hfdcan->Init.RxBufferSize] << FDCAN_RXESC_RBDS_Pos));
 8007546:	687b      	ldr	r3, [r7, #4]
 8007548:	681b      	ldr	r3, [r3, #0]
 800754a:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 800754e:	f423 61e0 	bic.w	r1, r3, #1792	; 0x700
 8007552:	687b      	ldr	r3, [r7, #4]
 8007554:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007556:	009b      	lsls	r3, r3, #2
 8007558:	f107 0260 	add.w	r2, r7, #96	; 0x60
 800755c:	4413      	add	r3, r2
 800755e:	f853 3c54 	ldr.w	r3, [r3, #-84]
 8007562:	021a      	lsls	r2, r3, #8
 8007564:	687b      	ldr	r3, [r7, #4]
 8007566:	681b      	ldr	r3, [r3, #0]
 8007568:	430a      	orrs	r2, r1
 800756a:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  }

  /* By default operation mode is set to Event-driven communication.
     If Time-triggered communication is needed, user should call the
     HAL_FDCAN_TT_ConfigOperation function just after the HAL_FDCAN_Init */
  if (hfdcan->Instance == FDCAN1)
 800756e:	687b      	ldr	r3, [r7, #4]
 8007570:	681b      	ldr	r3, [r3, #0]
 8007572:	4a11      	ldr	r2, [pc, #68]	; (80075b8 <HAL_FDCAN_Init+0x3c0>)
 8007574:	4293      	cmp	r3, r2
 8007576:	d107      	bne.n	8007588 <HAL_FDCAN_Init+0x390>
  {
    CLEAR_BIT(hfdcan->ttcan->TTOCF, FDCAN_TTOCF_OM);
 8007578:	687b      	ldr	r3, [r7, #4]
 800757a:	685b      	ldr	r3, [r3, #4]
 800757c:	689a      	ldr	r2, [r3, #8]
 800757e:	687b      	ldr	r3, [r7, #4]
 8007580:	685b      	ldr	r3, [r3, #4]
 8007582:	f022 0203 	bic.w	r2, r2, #3
 8007586:	609a      	str	r2, [r3, #8]
  }

  /* Initialize the Latest Tx FIFO/Queue request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
 8007588:	687b      	ldr	r3, [r7, #4]
 800758a:	2200      	movs	r2, #0
 800758c:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

  /* Initialize the error code */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8007590:	687b      	ldr	r3, [r7, #4]
 8007592:	2200      	movs	r2, #0
 8007594:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;
 8007598:	687b      	ldr	r3, [r7, #4]
 800759a:	2201      	movs	r2, #1
 800759c:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

  /* Calculate each RAM block address */
  status = FDCAN_CalcultateRamBlockAddresses(hfdcan);
 80075a0:	6878      	ldr	r0, [r7, #4]
 80075a2:	f000 fddf 	bl	8008164 <FDCAN_CalcultateRamBlockAddresses>
 80075a6:	4603      	mov	r3, r0
 80075a8:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b

  /* Return function status */
  return status;
 80075ac:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
}
 80075b0:	4618      	mov	r0, r3
 80075b2:	3760      	adds	r7, #96	; 0x60
 80075b4:	46bd      	mov	sp, r7
 80075b6:	bd80      	pop	{r7, pc}
 80075b8:	4000a000 	.word	0x4000a000

080075bc <HAL_FDCAN_ConfigFilter>:
  * @param  sFilterConfig pointer to an FDCAN_FilterTypeDef structure that
  *         contains the filter configuration information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_ConfigFilter(FDCAN_HandleTypeDef *hfdcan, FDCAN_FilterTypeDef *sFilterConfig)
{
 80075bc:	b480      	push	{r7}
 80075be:	b087      	sub	sp, #28
 80075c0:	af00      	add	r7, sp, #0
 80075c2:	6078      	str	r0, [r7, #4]
 80075c4:	6039      	str	r1, [r7, #0]
  uint32_t FilterElementW1;
  uint32_t FilterElementW2;
  uint32_t *FilterAddress;
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 80075c6:	687b      	ldr	r3, [r7, #4]
 80075c8:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 80075cc:	73fb      	strb	r3, [r7, #15]

  if ((state == HAL_FDCAN_STATE_READY) || (state == HAL_FDCAN_STATE_BUSY))
 80075ce:	7bfb      	ldrb	r3, [r7, #15]
 80075d0:	2b01      	cmp	r3, #1
 80075d2:	d002      	beq.n	80075da <HAL_FDCAN_ConfigFilter+0x1e>
 80075d4:	7bfb      	ldrb	r3, [r7, #15]
 80075d6:	2b02      	cmp	r3, #2
 80075d8:	d157      	bne.n	800768a <HAL_FDCAN_ConfigFilter+0xce>
    {
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->RxBufferIndex, 63U));
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->IsCalibrationMsg, 1U));
    }

    if (sFilterConfig->IdType == FDCAN_STANDARD_ID)
 80075da:	683b      	ldr	r3, [r7, #0]
 80075dc:	681b      	ldr	r3, [r3, #0]
 80075de:	2b00      	cmp	r3, #0
 80075e0:	d12b      	bne.n	800763a <HAL_FDCAN_ConfigFilter+0x7e>
        assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID2, 0x7FFU));
        assert_param(IS_FDCAN_STD_FILTER_TYPE(sFilterConfig->FilterType));
      }

      /* Build filter element */
      if (sFilterConfig->FilterConfig == FDCAN_FILTER_TO_RXBUFFER)
 80075e2:	683b      	ldr	r3, [r7, #0]
 80075e4:	68db      	ldr	r3, [r3, #12]
 80075e6:	2b07      	cmp	r3, #7
 80075e8:	d10d      	bne.n	8007606 <HAL_FDCAN_ConfigFilter+0x4a>
      {
        FilterElementW1 = ((FDCAN_FILTER_TO_RXBUFFER << 27U)       |
                           (sFilterConfig->FilterID1 << 16U)       |
 80075ea:	683b      	ldr	r3, [r7, #0]
 80075ec:	691b      	ldr	r3, [r3, #16]
 80075ee:	041a      	lsls	r2, r3, #16
                           (sFilterConfig->IsCalibrationMsg << 8U) |
 80075f0:	683b      	ldr	r3, [r7, #0]
 80075f2:	69db      	ldr	r3, [r3, #28]
 80075f4:	021b      	lsls	r3, r3, #8
                           (sFilterConfig->FilterID1 << 16U)       |
 80075f6:	431a      	orrs	r2, r3
                           sFilterConfig->RxBufferIndex);
 80075f8:	683b      	ldr	r3, [r7, #0]
 80075fa:	699b      	ldr	r3, [r3, #24]
                           (sFilterConfig->IsCalibrationMsg << 8U) |
 80075fc:	4313      	orrs	r3, r2
        FilterElementW1 = ((FDCAN_FILTER_TO_RXBUFFER << 27U)       |
 80075fe:	f043 5360 	orr.w	r3, r3, #939524096	; 0x38000000
 8007602:	617b      	str	r3, [r7, #20]
 8007604:	e00e      	b.n	8007624 <HAL_FDCAN_ConfigFilter+0x68>
      }
      else
      {
        FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 8007606:	683b      	ldr	r3, [r7, #0]
 8007608:	689b      	ldr	r3, [r3, #8]
 800760a:	079a      	lsls	r2, r3, #30
                           (sFilterConfig->FilterConfig << 27U) |
 800760c:	683b      	ldr	r3, [r7, #0]
 800760e:	68db      	ldr	r3, [r3, #12]
 8007610:	06db      	lsls	r3, r3, #27
        FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 8007612:	431a      	orrs	r2, r3
                           (sFilterConfig->FilterID1 << 16U)    |
 8007614:	683b      	ldr	r3, [r7, #0]
 8007616:	691b      	ldr	r3, [r3, #16]
 8007618:	041b      	lsls	r3, r3, #16
                           (sFilterConfig->FilterConfig << 27U) |
 800761a:	431a      	orrs	r2, r3
                           sFilterConfig->FilterID2);
 800761c:	683b      	ldr	r3, [r7, #0]
 800761e:	695b      	ldr	r3, [r3, #20]
        FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 8007620:	4313      	orrs	r3, r2
 8007622:	617b      	str	r3, [r7, #20]
      }

      /* Calculate filter address */
      FilterAddress = (uint32_t *)(hfdcan->msgRam.StandardFilterSA + (sFilterConfig->FilterIndex * 4U));
 8007624:	687b      	ldr	r3, [r7, #4]
 8007626:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8007628:	683b      	ldr	r3, [r7, #0]
 800762a:	685b      	ldr	r3, [r3, #4]
 800762c:	009b      	lsls	r3, r3, #2
 800762e:	4413      	add	r3, r2
 8007630:	60bb      	str	r3, [r7, #8]

      /* Write filter element to the message RAM */
      *FilterAddress = FilterElementW1;
 8007632:	68bb      	ldr	r3, [r7, #8]
 8007634:	697a      	ldr	r2, [r7, #20]
 8007636:	601a      	str	r2, [r3, #0]
 8007638:	e025      	b.n	8007686 <HAL_FDCAN_ConfigFilter+0xca>
        assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID2, 0x1FFFFFFFU));
        assert_param(IS_FDCAN_EXT_FILTER_TYPE(sFilterConfig->FilterType));
      }

      /* Build first word of filter element */
      FilterElementW1 = ((sFilterConfig->FilterConfig << 29U) | sFilterConfig->FilterID1);
 800763a:	683b      	ldr	r3, [r7, #0]
 800763c:	68db      	ldr	r3, [r3, #12]
 800763e:	075a      	lsls	r2, r3, #29
 8007640:	683b      	ldr	r3, [r7, #0]
 8007642:	691b      	ldr	r3, [r3, #16]
 8007644:	4313      	orrs	r3, r2
 8007646:	617b      	str	r3, [r7, #20]

      /* Build second word of filter element */
      if (sFilterConfig->FilterConfig == FDCAN_FILTER_TO_RXBUFFER)
 8007648:	683b      	ldr	r3, [r7, #0]
 800764a:	68db      	ldr	r3, [r3, #12]
 800764c:	2b07      	cmp	r3, #7
 800764e:	d103      	bne.n	8007658 <HAL_FDCAN_ConfigFilter+0x9c>
      {
        FilterElementW2 = sFilterConfig->RxBufferIndex;
 8007650:	683b      	ldr	r3, [r7, #0]
 8007652:	699b      	ldr	r3, [r3, #24]
 8007654:	613b      	str	r3, [r7, #16]
 8007656:	e006      	b.n	8007666 <HAL_FDCAN_ConfigFilter+0xaa>
      }
      else
      {
        FilterElementW2 = ((sFilterConfig->FilterType << 30U) | sFilterConfig->FilterID2);
 8007658:	683b      	ldr	r3, [r7, #0]
 800765a:	689b      	ldr	r3, [r3, #8]
 800765c:	079a      	lsls	r2, r3, #30
 800765e:	683b      	ldr	r3, [r7, #0]
 8007660:	695b      	ldr	r3, [r3, #20]
 8007662:	4313      	orrs	r3, r2
 8007664:	613b      	str	r3, [r7, #16]
      }

      /* Calculate filter address */
      FilterAddress = (uint32_t *)(hfdcan->msgRam.ExtendedFilterSA + (sFilterConfig->FilterIndex * 4U * 2U));
 8007666:	687b      	ldr	r3, [r7, #4]
 8007668:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800766a:	683b      	ldr	r3, [r7, #0]
 800766c:	685b      	ldr	r3, [r3, #4]
 800766e:	00db      	lsls	r3, r3, #3
 8007670:	4413      	add	r3, r2
 8007672:	60bb      	str	r3, [r7, #8]

      /* Write filter element to the message RAM */
      *FilterAddress = FilterElementW1;
 8007674:	68bb      	ldr	r3, [r7, #8]
 8007676:	697a      	ldr	r2, [r7, #20]
 8007678:	601a      	str	r2, [r3, #0]
      FilterAddress++;
 800767a:	68bb      	ldr	r3, [r7, #8]
 800767c:	3304      	adds	r3, #4
 800767e:	60bb      	str	r3, [r7, #8]
      *FilterAddress = FilterElementW2;
 8007680:	68bb      	ldr	r3, [r7, #8]
 8007682:	693a      	ldr	r2, [r7, #16]
 8007684:	601a      	str	r2, [r3, #0]
    }

    /* Return function status */
    return HAL_OK;
 8007686:	2300      	movs	r3, #0
 8007688:	e008      	b.n	800769c <HAL_FDCAN_ConfigFilter+0xe0>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_INITIALIZED;
 800768a:	687b      	ldr	r3, [r7, #4]
 800768c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8007690:	f043 0202 	orr.w	r2, r3, #2
 8007694:	687b      	ldr	r3, [r7, #4]
 8007696:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    return HAL_ERROR;
 800769a:	2301      	movs	r3, #1
  }
}
 800769c:	4618      	mov	r0, r3
 800769e:	371c      	adds	r7, #28
 80076a0:	46bd      	mov	sp, r7
 80076a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076a6:	4770      	bx	lr

080076a8 <HAL_FDCAN_ConfigGlobalFilter>:
HAL_StatusTypeDef HAL_FDCAN_ConfigGlobalFilter(FDCAN_HandleTypeDef *hfdcan,
                                               uint32_t NonMatchingStd,
                                               uint32_t NonMatchingExt,
                                               uint32_t RejectRemoteStd,
                                               uint32_t RejectRemoteExt)
{
 80076a8:	b480      	push	{r7}
 80076aa:	b085      	sub	sp, #20
 80076ac:	af00      	add	r7, sp, #0
 80076ae:	60f8      	str	r0, [r7, #12]
 80076b0:	60b9      	str	r1, [r7, #8]
 80076b2:	607a      	str	r2, [r7, #4]
 80076b4:	603b      	str	r3, [r7, #0]
  assert_param(IS_FDCAN_NON_MATCHING(NonMatchingStd));
  assert_param(IS_FDCAN_NON_MATCHING(NonMatchingExt));
  assert_param(IS_FDCAN_REJECT_REMOTE(RejectRemoteStd));
  assert_param(IS_FDCAN_REJECT_REMOTE(RejectRemoteExt));

  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 80076b6:	68fb      	ldr	r3, [r7, #12]
 80076b8:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 80076bc:	b2db      	uxtb	r3, r3
 80076be:	2b01      	cmp	r3, #1
 80076c0:	d110      	bne.n	80076e4 <HAL_FDCAN_ConfigGlobalFilter+0x3c>
  {
    /* Configure global filter */
    hfdcan->Instance->GFC = ((NonMatchingStd << FDCAN_GFC_ANFS_Pos)  |
 80076c2:	68bb      	ldr	r3, [r7, #8]
 80076c4:	011a      	lsls	r2, r3, #4
                             (NonMatchingExt << FDCAN_GFC_ANFE_Pos)  |
 80076c6:	687b      	ldr	r3, [r7, #4]
 80076c8:	009b      	lsls	r3, r3, #2
    hfdcan->Instance->GFC = ((NonMatchingStd << FDCAN_GFC_ANFS_Pos)  |
 80076ca:	431a      	orrs	r2, r3
                             (RejectRemoteStd << FDCAN_GFC_RRFS_Pos) |
 80076cc:	683b      	ldr	r3, [r7, #0]
 80076ce:	005b      	lsls	r3, r3, #1
                             (NonMatchingExt << FDCAN_GFC_ANFE_Pos)  |
 80076d0:	ea42 0103 	orr.w	r1, r2, r3
    hfdcan->Instance->GFC = ((NonMatchingStd << FDCAN_GFC_ANFS_Pos)  |
 80076d4:	68fb      	ldr	r3, [r7, #12]
 80076d6:	681b      	ldr	r3, [r3, #0]
                             (RejectRemoteStd << FDCAN_GFC_RRFS_Pos) |
 80076d8:	69ba      	ldr	r2, [r7, #24]
 80076da:	430a      	orrs	r2, r1
    hfdcan->Instance->GFC = ((NonMatchingStd << FDCAN_GFC_ANFS_Pos)  |
 80076dc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
                             (RejectRemoteExt << FDCAN_GFC_RRFE_Pos));

    /* Return function status */
    return HAL_OK;
 80076e0:	2300      	movs	r3, #0
 80076e2:	e008      	b.n	80076f6 <HAL_FDCAN_ConfigGlobalFilter+0x4e>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
 80076e4:	68fb      	ldr	r3, [r7, #12]
 80076e6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80076ea:	f043 0204 	orr.w	r2, r3, #4
 80076ee:	68fb      	ldr	r3, [r7, #12]
 80076f0:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    return HAL_ERROR;
 80076f4:	2301      	movs	r3, #1
  }
}
 80076f6:	4618      	mov	r0, r3
 80076f8:	3714      	adds	r7, #20
 80076fa:	46bd      	mov	sp, r7
 80076fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007700:	4770      	bx	lr

08007702 <HAL_FDCAN_EnableTxDelayCompensation>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_EnableTxDelayCompensation(FDCAN_HandleTypeDef *hfdcan)
{
 8007702:	b480      	push	{r7}
 8007704:	b083      	sub	sp, #12
 8007706:	af00      	add	r7, sp, #0
 8007708:	6078      	str	r0, [r7, #4]
  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 800770a:	687b      	ldr	r3, [r7, #4]
 800770c:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8007710:	b2db      	uxtb	r3, r3
 8007712:	2b01      	cmp	r3, #1
 8007714:	d109      	bne.n	800772a <HAL_FDCAN_EnableTxDelayCompensation+0x28>
  {
    /* Enable transmitter delay compensation */
    SET_BIT(hfdcan->Instance->DBTP, FDCAN_DBTP_TDC);
 8007716:	687b      	ldr	r3, [r7, #4]
 8007718:	681b      	ldr	r3, [r3, #0]
 800771a:	68da      	ldr	r2, [r3, #12]
 800771c:	687b      	ldr	r3, [r7, #4]
 800771e:	681b      	ldr	r3, [r3, #0]
 8007720:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8007724:	60da      	str	r2, [r3, #12]

    /* Return function status */
    return HAL_OK;
 8007726:	2300      	movs	r3, #0
 8007728:	e008      	b.n	800773c <HAL_FDCAN_EnableTxDelayCompensation+0x3a>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
 800772a:	687b      	ldr	r3, [r7, #4]
 800772c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8007730:	f043 0204 	orr.w	r2, r3, #4
 8007734:	687b      	ldr	r3, [r7, #4]
 8007736:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    return HAL_ERROR;
 800773a:	2301      	movs	r3, #1
  }
}
 800773c:	4618      	mov	r0, r3
 800773e:	370c      	adds	r7, #12
 8007740:	46bd      	mov	sp, r7
 8007742:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007746:	4770      	bx	lr

08007748 <HAL_FDCAN_Start>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Start(FDCAN_HandleTypeDef *hfdcan)
{
 8007748:	b480      	push	{r7}
 800774a:	b083      	sub	sp, #12
 800774c:	af00      	add	r7, sp, #0
 800774e:	6078      	str	r0, [r7, #4]
  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 8007750:	687b      	ldr	r3, [r7, #4]
 8007752:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8007756:	b2db      	uxtb	r3, r3
 8007758:	2b01      	cmp	r3, #1
 800775a:	d111      	bne.n	8007780 <HAL_FDCAN_Start+0x38>
  {
    /* Change FDCAN peripheral state */
    hfdcan->State = HAL_FDCAN_STATE_BUSY;
 800775c:	687b      	ldr	r3, [r7, #4]
 800775e:	2202      	movs	r2, #2
 8007760:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

    /* Request leave initialisation */
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8007764:	687b      	ldr	r3, [r7, #4]
 8007766:	681b      	ldr	r3, [r3, #0]
 8007768:	699a      	ldr	r2, [r3, #24]
 800776a:	687b      	ldr	r3, [r7, #4]
 800776c:	681b      	ldr	r3, [r3, #0]
 800776e:	f022 0201 	bic.w	r2, r2, #1
 8007772:	619a      	str	r2, [r3, #24]

    /* Reset the FDCAN ErrorCode */
    hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8007774:	687b      	ldr	r3, [r7, #4]
 8007776:	2200      	movs	r2, #0
 8007778:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    /* Return function status */
    return HAL_OK;
 800777c:	2300      	movs	r3, #0
 800777e:	e008      	b.n	8007792 <HAL_FDCAN_Start+0x4a>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
 8007780:	687b      	ldr	r3, [r7, #4]
 8007782:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8007786:	f043 0204 	orr.w	r2, r3, #4
 800778a:	687b      	ldr	r3, [r7, #4]
 800778c:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    return HAL_ERROR;
 8007790:	2301      	movs	r3, #1
  }
}
 8007792:	4618      	mov	r0, r3
 8007794:	370c      	adds	r7, #12
 8007796:	46bd      	mov	sp, r7
 8007798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800779c:	4770      	bx	lr
	...

080077a0 <HAL_FDCAN_GetRxMessage>:
  * @param  pRxHeader pointer to a FDCAN_RxHeaderTypeDef structure.
  * @param  pRxData pointer to a buffer where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_GetRxMessage(FDCAN_HandleTypeDef *hfdcan, uint32_t RxLocation, FDCAN_RxHeaderTypeDef *pRxHeader, uint8_t *pRxData)
{
 80077a0:	b480      	push	{r7}
 80077a2:	b08b      	sub	sp, #44	; 0x2c
 80077a4:	af00      	add	r7, sp, #0
 80077a6:	60f8      	str	r0, [r7, #12]
 80077a8:	60b9      	str	r1, [r7, #8]
 80077aa:	607a      	str	r2, [r7, #4]
 80077ac:	603b      	str	r3, [r7, #0]
  uint32_t *RxAddress;
  uint8_t  *pData;
  uint32_t ByteCounter;
  uint32_t GetIndex = 0;
 80077ae:	2300      	movs	r3, #0
 80077b0:	61fb      	str	r3, [r7, #28]
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 80077b2:	68fb      	ldr	r3, [r7, #12]
 80077b4:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 80077b8:	76fb      	strb	r3, [r7, #27]

  if (state == HAL_FDCAN_STATE_BUSY)
 80077ba:	7efb      	ldrb	r3, [r7, #27]
 80077bc:	2b02      	cmp	r3, #2
 80077be:	f040 813b 	bne.w	8007a38 <HAL_FDCAN_GetRxMessage+0x298>
  {
    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 80077c2:	68bb      	ldr	r3, [r7, #8]
 80077c4:	2b40      	cmp	r3, #64	; 0x40
 80077c6:	d145      	bne.n	8007854 <HAL_FDCAN_GetRxMessage+0xb4>
    {
      /* Check that the Rx FIFO 0 has an allocated area into the RAM */
      if ((hfdcan->Instance->RXF0C & FDCAN_RXF0C_F0S) == 0U)
 80077c8:	68fb      	ldr	r3, [r7, #12]
 80077ca:	681b      	ldr	r3, [r3, #0]
 80077cc:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80077d0:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80077d4:	2b00      	cmp	r3, #0
 80077d6:	d109      	bne.n	80077ec <HAL_FDCAN_GetRxMessage+0x4c>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 80077d8:	68fb      	ldr	r3, [r7, #12]
 80077da:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80077de:	f043 0220 	orr.w	r2, r3, #32
 80077e2:	68fb      	ldr	r3, [r7, #12]
 80077e4:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

        return HAL_ERROR;
 80077e8:	2301      	movs	r3, #1
 80077ea:	e12e      	b.n	8007a4a <HAL_FDCAN_GetRxMessage+0x2aa>
      }

      /* Check that the Rx FIFO 0 is not empty */
      if ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0FL) == 0U)
 80077ec:	68fb      	ldr	r3, [r7, #12]
 80077ee:	681b      	ldr	r3, [r3, #0]
 80077f0:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80077f4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80077f8:	2b00      	cmp	r3, #0
 80077fa:	d109      	bne.n	8007810 <HAL_FDCAN_GetRxMessage+0x70>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 80077fc:	68fb      	ldr	r3, [r7, #12]
 80077fe:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8007802:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8007806:	68fb      	ldr	r3, [r7, #12]
 8007808:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

        return HAL_ERROR;
 800780c:	2301      	movs	r3, #1
 800780e:	e11c      	b.n	8007a4a <HAL_FDCAN_GetRxMessage+0x2aa>
      }
      else
      {
        /* Check that the Rx FIFO 0 is full & overwrite mode is on*/
        if(((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0F) >> FDCAN_RXF0S_F0F_Pos) == 1U)
 8007810:	68fb      	ldr	r3, [r7, #12]
 8007812:	681b      	ldr	r3, [r3, #0]
 8007814:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8007818:	0e1b      	lsrs	r3, r3, #24
 800781a:	f003 0301 	and.w	r3, r3, #1
 800781e:	2b01      	cmp	r3, #1
 8007820:	d103      	bne.n	800782a <HAL_FDCAN_GetRxMessage+0x8a>
        {
          if(((hfdcan->Instance->RXF0C & FDCAN_RXF0C_F0OM) >> FDCAN_RXF0C_F0OM_Pos) == FDCAN_RX_FIFO_OVERWRITE)
 8007822:	68fb      	ldr	r3, [r7, #12]
 8007824:	681b      	ldr	r3, [r3, #0]
 8007826:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
            GetIndex = 1U;
          }
        }

        /* Calculate Rx FIFO 0 element index*/
        GetIndex += ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0GI) >> FDCAN_RXF0S_F0GI_Pos);
 800782a:	68fb      	ldr	r3, [r7, #12]
 800782c:	681b      	ldr	r3, [r3, #0]
 800782e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8007832:	0a1b      	lsrs	r3, r3, #8
 8007834:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007838:	69fa      	ldr	r2, [r7, #28]
 800783a:	4413      	add	r3, r2
 800783c:	61fb      	str	r3, [r7, #28]

        /* Calculate Rx FIFO 0 element address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO0SA + (GetIndex * hfdcan->Init.RxFifo0ElmtSize * 4U));
 800783e:	68fb      	ldr	r3, [r7, #12]
 8007840:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 8007842:	68fb      	ldr	r3, [r7, #12]
 8007844:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007846:	69f9      	ldr	r1, [r7, #28]
 8007848:	fb01 f303 	mul.w	r3, r1, r3
 800784c:	009b      	lsls	r3, r3, #2
 800784e:	4413      	add	r3, r2
 8007850:	627b      	str	r3, [r7, #36]	; 0x24
 8007852:	e061      	b.n	8007918 <HAL_FDCAN_GetRxMessage+0x178>
      }
    }
    else if (RxLocation == FDCAN_RX_FIFO1) /* Rx element is assigned to the Rx FIFO 1 */
 8007854:	68bb      	ldr	r3, [r7, #8]
 8007856:	2b41      	cmp	r3, #65	; 0x41
 8007858:	d145      	bne.n	80078e6 <HAL_FDCAN_GetRxMessage+0x146>
    {
      /* Check that the Rx FIFO 1 has an allocated area into the RAM */
      if ((hfdcan->Instance->RXF1C & FDCAN_RXF1C_F1S) == 0U)
 800785a:	68fb      	ldr	r3, [r7, #12]
 800785c:	681b      	ldr	r3, [r3, #0]
 800785e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8007862:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8007866:	2b00      	cmp	r3, #0
 8007868:	d109      	bne.n	800787e <HAL_FDCAN_GetRxMessage+0xde>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 800786a:	68fb      	ldr	r3, [r7, #12]
 800786c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8007870:	f043 0220 	orr.w	r2, r3, #32
 8007874:	68fb      	ldr	r3, [r7, #12]
 8007876:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

        return HAL_ERROR;
 800787a:	2301      	movs	r3, #1
 800787c:	e0e5      	b.n	8007a4a <HAL_FDCAN_GetRxMessage+0x2aa>
      }

      /* Check that the Rx FIFO 0 is not empty */
      if ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1FL) == 0U)
 800787e:	68fb      	ldr	r3, [r7, #12]
 8007880:	681b      	ldr	r3, [r3, #0]
 8007882:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8007886:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800788a:	2b00      	cmp	r3, #0
 800788c:	d109      	bne.n	80078a2 <HAL_FDCAN_GetRxMessage+0x102>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 800788e:	68fb      	ldr	r3, [r7, #12]
 8007890:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8007894:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8007898:	68fb      	ldr	r3, [r7, #12]
 800789a:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

        return HAL_ERROR;
 800789e:	2301      	movs	r3, #1
 80078a0:	e0d3      	b.n	8007a4a <HAL_FDCAN_GetRxMessage+0x2aa>
      }
      else
      {
        /* Check that the Rx FIFO 1 is full & overwrite mode is on*/
        if(((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1F) >> FDCAN_RXF1S_F1F_Pos) == 1U)
 80078a2:	68fb      	ldr	r3, [r7, #12]
 80078a4:	681b      	ldr	r3, [r3, #0]
 80078a6:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80078aa:	0e1b      	lsrs	r3, r3, #24
 80078ac:	f003 0301 	and.w	r3, r3, #1
 80078b0:	2b01      	cmp	r3, #1
 80078b2:	d103      	bne.n	80078bc <HAL_FDCAN_GetRxMessage+0x11c>
        {
          if(((hfdcan->Instance->RXF1C & FDCAN_RXF1C_F1OM) >> FDCAN_RXF1C_F1OM_Pos) == FDCAN_RX_FIFO_OVERWRITE)
 80078b4:	68fb      	ldr	r3, [r7, #12]
 80078b6:	681b      	ldr	r3, [r3, #0]
 80078b8:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
            GetIndex = 1U;
          }
        }

        /* Calculate Rx FIFO 1 element index*/
        GetIndex += ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1GI) >> FDCAN_RXF1S_F1GI_Pos);
 80078bc:	68fb      	ldr	r3, [r7, #12]
 80078be:	681b      	ldr	r3, [r3, #0]
 80078c0:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80078c4:	0a1b      	lsrs	r3, r3, #8
 80078c6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80078ca:	69fa      	ldr	r2, [r7, #28]
 80078cc:	4413      	add	r3, r2
 80078ce:	61fb      	str	r3, [r7, #28]

        /* Calculate Rx FIFO 1 element address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO1SA + (GetIndex * hfdcan->Init.RxFifo1ElmtSize * 4U));
 80078d0:	68fb      	ldr	r3, [r7, #12]
 80078d2:	6f9a      	ldr	r2, [r3, #120]	; 0x78
 80078d4:	68fb      	ldr	r3, [r7, #12]
 80078d6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80078d8:	69f9      	ldr	r1, [r7, #28]
 80078da:	fb01 f303 	mul.w	r3, r1, r3
 80078de:	009b      	lsls	r3, r3, #2
 80078e0:	4413      	add	r3, r2
 80078e2:	627b      	str	r3, [r7, #36]	; 0x24
 80078e4:	e018      	b.n	8007918 <HAL_FDCAN_GetRxMessage+0x178>
      }
    }
    else /* Rx element is assigned to a dedicated Rx buffer */
    {
      /* Check that the selected buffer has an allocated area into the RAM */
      if (RxLocation >= hfdcan->Init.RxBuffersNbr)
 80078e6:	68fb      	ldr	r3, [r7, #12]
 80078e8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80078ea:	68ba      	ldr	r2, [r7, #8]
 80078ec:	429a      	cmp	r2, r3
 80078ee:	d309      	bcc.n	8007904 <HAL_FDCAN_GetRxMessage+0x164>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 80078f0:	68fb      	ldr	r3, [r7, #12]
 80078f2:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80078f6:	f043 0220 	orr.w	r2, r3, #32
 80078fa:	68fb      	ldr	r3, [r7, #12]
 80078fc:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

        return HAL_ERROR;
 8007900:	2301      	movs	r3, #1
 8007902:	e0a2      	b.n	8007a4a <HAL_FDCAN_GetRxMessage+0x2aa>
      }
      else
      {
        /* Calculate Rx buffer address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxBufferSA + (RxLocation * hfdcan->Init.RxBufferSize * 4U));
 8007904:	68fb      	ldr	r3, [r7, #12]
 8007906:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 8007908:	68fb      	ldr	r3, [r7, #12]
 800790a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800790c:	68b9      	ldr	r1, [r7, #8]
 800790e:	fb01 f303 	mul.w	r3, r1, r3
 8007912:	009b      	lsls	r3, r3, #2
 8007914:	4413      	add	r3, r2
 8007916:	627b      	str	r3, [r7, #36]	; 0x24
      }
    }

    /* Retrieve IdType */
    pRxHeader->IdType = *RxAddress & FDCAN_ELEMENT_MASK_XTD;
 8007918:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800791a:	681b      	ldr	r3, [r3, #0]
 800791c:	f003 4280 	and.w	r2, r3, #1073741824	; 0x40000000
 8007920:	687b      	ldr	r3, [r7, #4]
 8007922:	605a      	str	r2, [r3, #4]

    /* Retrieve Identifier */
    if (pRxHeader->IdType == FDCAN_STANDARD_ID) /* Standard ID element */
 8007924:	687b      	ldr	r3, [r7, #4]
 8007926:	685b      	ldr	r3, [r3, #4]
 8007928:	2b00      	cmp	r3, #0
 800792a:	d107      	bne.n	800793c <HAL_FDCAN_GetRxMessage+0x19c>
    {
      pRxHeader->Identifier = ((*RxAddress & FDCAN_ELEMENT_MASK_STDID) >> 18);
 800792c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800792e:	681b      	ldr	r3, [r3, #0]
 8007930:	0c9b      	lsrs	r3, r3, #18
 8007932:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8007936:	687b      	ldr	r3, [r7, #4]
 8007938:	601a      	str	r2, [r3, #0]
 800793a:	e005      	b.n	8007948 <HAL_FDCAN_GetRxMessage+0x1a8>
    }
    else /* Extended ID element */
    {
      pRxHeader->Identifier = (*RxAddress & FDCAN_ELEMENT_MASK_EXTID);
 800793c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800793e:	681b      	ldr	r3, [r3, #0]
 8007940:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8007944:	687b      	ldr	r3, [r7, #4]
 8007946:	601a      	str	r2, [r3, #0]
    }

    /* Retrieve RxFrameType */
    pRxHeader->RxFrameType = (*RxAddress & FDCAN_ELEMENT_MASK_RTR);
 8007948:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800794a:	681b      	ldr	r3, [r3, #0]
 800794c:	f003 5200 	and.w	r2, r3, #536870912	; 0x20000000
 8007950:	687b      	ldr	r3, [r7, #4]
 8007952:	609a      	str	r2, [r3, #8]

    /* Retrieve ErrorStateIndicator */
    pRxHeader->ErrorStateIndicator = (*RxAddress & FDCAN_ELEMENT_MASK_ESI);
 8007954:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007956:	681b      	ldr	r3, [r3, #0]
 8007958:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
 800795c:	687b      	ldr	r3, [r7, #4]
 800795e:	611a      	str	r2, [r3, #16]

    /* Increment RxAddress pointer to second word of Rx FIFO element */
    RxAddress++;
 8007960:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007962:	3304      	adds	r3, #4
 8007964:	627b      	str	r3, [r7, #36]	; 0x24

    /* Retrieve RxTimestamp */
    pRxHeader->RxTimestamp = (*RxAddress & FDCAN_ELEMENT_MASK_TS);
 8007966:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007968:	681b      	ldr	r3, [r3, #0]
 800796a:	b29a      	uxth	r2, r3
 800796c:	687b      	ldr	r3, [r7, #4]
 800796e:	61da      	str	r2, [r3, #28]

    /* Retrieve DataLength */
    pRxHeader->DataLength = (*RxAddress & FDCAN_ELEMENT_MASK_DLC);
 8007970:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007972:	681b      	ldr	r3, [r3, #0]
 8007974:	f403 2270 	and.w	r2, r3, #983040	; 0xf0000
 8007978:	687b      	ldr	r3, [r7, #4]
 800797a:	60da      	str	r2, [r3, #12]

    /* Retrieve BitRateSwitch */
    pRxHeader->BitRateSwitch = (*RxAddress & FDCAN_ELEMENT_MASK_BRS);
 800797c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800797e:	681b      	ldr	r3, [r3, #0]
 8007980:	f403 1280 	and.w	r2, r3, #1048576	; 0x100000
 8007984:	687b      	ldr	r3, [r7, #4]
 8007986:	615a      	str	r2, [r3, #20]

    /* Retrieve FDFormat */
    pRxHeader->FDFormat = (*RxAddress & FDCAN_ELEMENT_MASK_FDF);
 8007988:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800798a:	681b      	ldr	r3, [r3, #0]
 800798c:	f403 1200 	and.w	r2, r3, #2097152	; 0x200000
 8007990:	687b      	ldr	r3, [r7, #4]
 8007992:	619a      	str	r2, [r3, #24]

    /* Retrieve FilterIndex */
    pRxHeader->FilterIndex = ((*RxAddress & FDCAN_ELEMENT_MASK_FIDX) >> 24);
 8007994:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007996:	681b      	ldr	r3, [r3, #0]
 8007998:	0e1b      	lsrs	r3, r3, #24
 800799a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800799e:	687b      	ldr	r3, [r7, #4]
 80079a0:	621a      	str	r2, [r3, #32]

    /* Retrieve NonMatchingFrame */
    pRxHeader->IsFilterMatchingFrame = ((*RxAddress & FDCAN_ELEMENT_MASK_ANMF) >> 31);
 80079a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80079a4:	681b      	ldr	r3, [r3, #0]
 80079a6:	0fda      	lsrs	r2, r3, #31
 80079a8:	687b      	ldr	r3, [r7, #4]
 80079aa:	625a      	str	r2, [r3, #36]	; 0x24

    /* Increment RxAddress pointer to payload of Rx FIFO element */
    RxAddress++;
 80079ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80079ae:	3304      	adds	r3, #4
 80079b0:	627b      	str	r3, [r7, #36]	; 0x24

    /* Retrieve Rx payload */
    pData = (uint8_t *)RxAddress;
 80079b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80079b4:	617b      	str	r3, [r7, #20]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength >> 16]; ByteCounter++)
 80079b6:	2300      	movs	r3, #0
 80079b8:	623b      	str	r3, [r7, #32]
 80079ba:	e00a      	b.n	80079d2 <HAL_FDCAN_GetRxMessage+0x232>
    {
      pRxData[ByteCounter] = pData[ByteCounter];
 80079bc:	697a      	ldr	r2, [r7, #20]
 80079be:	6a3b      	ldr	r3, [r7, #32]
 80079c0:	441a      	add	r2, r3
 80079c2:	6839      	ldr	r1, [r7, #0]
 80079c4:	6a3b      	ldr	r3, [r7, #32]
 80079c6:	440b      	add	r3, r1
 80079c8:	7812      	ldrb	r2, [r2, #0]
 80079ca:	701a      	strb	r2, [r3, #0]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength >> 16]; ByteCounter++)
 80079cc:	6a3b      	ldr	r3, [r7, #32]
 80079ce:	3301      	adds	r3, #1
 80079d0:	623b      	str	r3, [r7, #32]
 80079d2:	687b      	ldr	r3, [r7, #4]
 80079d4:	68db      	ldr	r3, [r3, #12]
 80079d6:	0c1b      	lsrs	r3, r3, #16
 80079d8:	4a1f      	ldr	r2, [pc, #124]	; (8007a58 <HAL_FDCAN_GetRxMessage+0x2b8>)
 80079da:	5cd3      	ldrb	r3, [r2, r3]
 80079dc:	461a      	mov	r2, r3
 80079de:	6a3b      	ldr	r3, [r7, #32]
 80079e0:	4293      	cmp	r3, r2
 80079e2:	d3eb      	bcc.n	80079bc <HAL_FDCAN_GetRxMessage+0x21c>
    }

    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 80079e4:	68bb      	ldr	r3, [r7, #8]
 80079e6:	2b40      	cmp	r3, #64	; 0x40
 80079e8:	d105      	bne.n	80079f6 <HAL_FDCAN_GetRxMessage+0x256>
    {
      /* Acknowledge the Rx FIFO 0 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF0A = GetIndex;
 80079ea:	68fb      	ldr	r3, [r7, #12]
 80079ec:	681b      	ldr	r3, [r3, #0]
 80079ee:	69fa      	ldr	r2, [r7, #28]
 80079f0:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
 80079f4:	e01e      	b.n	8007a34 <HAL_FDCAN_GetRxMessage+0x294>
    }
    else if (RxLocation == FDCAN_RX_FIFO1) /* Rx element is assigned to the Rx FIFO 1 */
 80079f6:	68bb      	ldr	r3, [r7, #8]
 80079f8:	2b41      	cmp	r3, #65	; 0x41
 80079fa:	d105      	bne.n	8007a08 <HAL_FDCAN_GetRxMessage+0x268>
    {
      /* Acknowledge the Rx FIFO 1 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF1A = GetIndex;
 80079fc:	68fb      	ldr	r3, [r7, #12]
 80079fe:	681b      	ldr	r3, [r3, #0]
 8007a00:	69fa      	ldr	r2, [r7, #28]
 8007a02:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
 8007a06:	e015      	b.n	8007a34 <HAL_FDCAN_GetRxMessage+0x294>
    }
    else /* Rx element is assigned to a dedicated Rx buffer */
    {
      /* Clear the New Data flag of the current Rx buffer */
      if (RxLocation < FDCAN_RX_BUFFER32)
 8007a08:	68bb      	ldr	r3, [r7, #8]
 8007a0a:	2b1f      	cmp	r3, #31
 8007a0c:	d808      	bhi.n	8007a20 <HAL_FDCAN_GetRxMessage+0x280>
      {
        hfdcan->Instance->NDAT1 = ((uint32_t)1 << RxLocation);
 8007a0e:	68fb      	ldr	r3, [r7, #12]
 8007a10:	681b      	ldr	r3, [r3, #0]
 8007a12:	2101      	movs	r1, #1
 8007a14:	68ba      	ldr	r2, [r7, #8]
 8007a16:	fa01 f202 	lsl.w	r2, r1, r2
 8007a1a:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
 8007a1e:	e009      	b.n	8007a34 <HAL_FDCAN_GetRxMessage+0x294>
      }
      else /* FDCAN_RX_BUFFER32 <= RxLocation <= FDCAN_RX_BUFFER63 */
      {
        hfdcan->Instance->NDAT2 = ((uint32_t)1 << (RxLocation & 0x1FU));
 8007a20:	68bb      	ldr	r3, [r7, #8]
 8007a22:	f003 021f 	and.w	r2, r3, #31
 8007a26:	68fb      	ldr	r3, [r7, #12]
 8007a28:	681b      	ldr	r3, [r3, #0]
 8007a2a:	2101      	movs	r1, #1
 8007a2c:	fa01 f202 	lsl.w	r2, r1, r2
 8007a30:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
      }
    }

    /* Return function status */
    return HAL_OK;
 8007a34:	2300      	movs	r3, #0
 8007a36:	e008      	b.n	8007a4a <HAL_FDCAN_GetRxMessage+0x2aa>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 8007a38:	68fb      	ldr	r3, [r7, #12]
 8007a3a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8007a3e:	f043 0208 	orr.w	r2, r3, #8
 8007a42:	68fb      	ldr	r3, [r7, #12]
 8007a44:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    return HAL_ERROR;
 8007a48:	2301      	movs	r3, #1
  }
}
 8007a4a:	4618      	mov	r0, r3
 8007a4c:	372c      	adds	r7, #44	; 0x2c
 8007a4e:	46bd      	mov	sp, r7
 8007a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a54:	4770      	bx	lr
 8007a56:	bf00      	nop
 8007a58:	0801c50c 	.word	0x0801c50c

08007a5c <HAL_FDCAN_ActivateNotification>:
  *           - FDCAN_IT_TX_COMPLETE
  *           - FDCAN_IT_TX_ABORT_COMPLETE
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_ActivateNotification(FDCAN_HandleTypeDef *hfdcan, uint32_t ActiveITs, uint32_t BufferIndexes)
{
 8007a5c:	b480      	push	{r7}
 8007a5e:	b087      	sub	sp, #28
 8007a60:	af00      	add	r7, sp, #0
 8007a62:	60f8      	str	r0, [r7, #12]
 8007a64:	60b9      	str	r1, [r7, #8]
 8007a66:	607a      	str	r2, [r7, #4]
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 8007a68:	68fb      	ldr	r3, [r7, #12]
 8007a6a:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8007a6e:	75fb      	strb	r3, [r7, #23]

  /* Check function parameters */
  assert_param(IS_FDCAN_IT(ActiveITs));

  if ((state == HAL_FDCAN_STATE_READY) || (state == HAL_FDCAN_STATE_BUSY))
 8007a70:	7dfb      	ldrb	r3, [r7, #23]
 8007a72:	2b01      	cmp	r3, #1
 8007a74:	d002      	beq.n	8007a7c <HAL_FDCAN_ActivateNotification+0x20>
 8007a76:	7dfb      	ldrb	r3, [r7, #23]
 8007a78:	2b02      	cmp	r3, #2
 8007a7a:	d155      	bne.n	8007b28 <HAL_FDCAN_ActivateNotification+0xcc>
  {
    /* Enable Interrupt lines */
    if ((ActiveITs & hfdcan->Instance->ILS) == 0U)
 8007a7c:	68fb      	ldr	r3, [r7, #12]
 8007a7e:	681b      	ldr	r3, [r3, #0]
 8007a80:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8007a82:	68bb      	ldr	r3, [r7, #8]
 8007a84:	4013      	ands	r3, r2
 8007a86:	2b00      	cmp	r3, #0
 8007a88:	d108      	bne.n	8007a9c <HAL_FDCAN_ActivateNotification+0x40>
    {
      /* Enable Interrupt line 0 */
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE0);
 8007a8a:	68fb      	ldr	r3, [r7, #12]
 8007a8c:	681b      	ldr	r3, [r3, #0]
 8007a8e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8007a90:	68fb      	ldr	r3, [r7, #12]
 8007a92:	681b      	ldr	r3, [r3, #0]
 8007a94:	f042 0201 	orr.w	r2, r2, #1
 8007a98:	65da      	str	r2, [r3, #92]	; 0x5c
 8007a9a:	e014      	b.n	8007ac6 <HAL_FDCAN_ActivateNotification+0x6a>
    }
    else if ((ActiveITs & hfdcan->Instance->ILS) == ActiveITs)
 8007a9c:	68fb      	ldr	r3, [r7, #12]
 8007a9e:	681b      	ldr	r3, [r3, #0]
 8007aa0:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8007aa2:	68bb      	ldr	r3, [r7, #8]
 8007aa4:	4013      	ands	r3, r2
 8007aa6:	68ba      	ldr	r2, [r7, #8]
 8007aa8:	429a      	cmp	r2, r3
 8007aaa:	d108      	bne.n	8007abe <HAL_FDCAN_ActivateNotification+0x62>
    {
      /* Enable Interrupt line 1 */
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE1);
 8007aac:	68fb      	ldr	r3, [r7, #12]
 8007aae:	681b      	ldr	r3, [r3, #0]
 8007ab0:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8007ab2:	68fb      	ldr	r3, [r7, #12]
 8007ab4:	681b      	ldr	r3, [r3, #0]
 8007ab6:	f042 0202 	orr.w	r2, r2, #2
 8007aba:	65da      	str	r2, [r3, #92]	; 0x5c
 8007abc:	e003      	b.n	8007ac6 <HAL_FDCAN_ActivateNotification+0x6a>
    }
    else
    {
      /* Enable Interrupt lines 0 and 1 */
      hfdcan->Instance->ILE = (FDCAN_INTERRUPT_LINE0 | FDCAN_INTERRUPT_LINE1);
 8007abe:	68fb      	ldr	r3, [r7, #12]
 8007ac0:	681b      	ldr	r3, [r3, #0]
 8007ac2:	2203      	movs	r2, #3
 8007ac4:	65da      	str	r2, [r3, #92]	; 0x5c
    }

    if ((ActiveITs & FDCAN_IT_TX_COMPLETE) != 0U)
 8007ac6:	68bb      	ldr	r3, [r7, #8]
 8007ac8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007acc:	2b00      	cmp	r3, #0
 8007ace:	d009      	beq.n	8007ae4 <HAL_FDCAN_ActivateNotification+0x88>
    {
      /* Enable Tx Buffer Transmission Interrupt to set TC flag in IR register,
         but interrupt will only occure if TC is enabled in IE register */
      SET_BIT(hfdcan->Instance->TXBTIE, BufferIndexes);
 8007ad0:	68fb      	ldr	r3, [r7, #12]
 8007ad2:	681b      	ldr	r3, [r3, #0]
 8007ad4:	f8d3 10e0 	ldr.w	r1, [r3, #224]	; 0xe0
 8007ad8:	68fb      	ldr	r3, [r7, #12]
 8007ada:	681b      	ldr	r3, [r3, #0]
 8007adc:	687a      	ldr	r2, [r7, #4]
 8007ade:	430a      	orrs	r2, r1
 8007ae0:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
    }

    if ((ActiveITs & FDCAN_IT_TX_ABORT_COMPLETE) != 0U)
 8007ae4:	68bb      	ldr	r3, [r7, #8]
 8007ae6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007aea:	2b00      	cmp	r3, #0
 8007aec:	d009      	beq.n	8007b02 <HAL_FDCAN_ActivateNotification+0xa6>
    {
      /* Enable Tx Buffer Cancellation Finished Interrupt to set TCF flag in IR register,
         but interrupt will only occure if TCF is enabled in IE register */
      SET_BIT(hfdcan->Instance->TXBCIE, BufferIndexes);
 8007aee:	68fb      	ldr	r3, [r7, #12]
 8007af0:	681b      	ldr	r3, [r3, #0]
 8007af2:	f8d3 10e4 	ldr.w	r1, [r3, #228]	; 0xe4
 8007af6:	68fb      	ldr	r3, [r7, #12]
 8007af8:	681b      	ldr	r3, [r3, #0]
 8007afa:	687a      	ldr	r2, [r7, #4]
 8007afc:	430a      	orrs	r2, r1
 8007afe:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
    }

    /* Enable the selected interrupts */
    __HAL_FDCAN_ENABLE_IT(hfdcan, ActiveITs);
 8007b02:	68fb      	ldr	r3, [r7, #12]
 8007b04:	681b      	ldr	r3, [r3, #0]
 8007b06:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8007b08:	68ba      	ldr	r2, [r7, #8]
 8007b0a:	4b0f      	ldr	r3, [pc, #60]	; (8007b48 <HAL_FDCAN_ActivateNotification+0xec>)
 8007b0c:	4013      	ands	r3, r2
 8007b0e:	68fa      	ldr	r2, [r7, #12]
 8007b10:	6812      	ldr	r2, [r2, #0]
 8007b12:	430b      	orrs	r3, r1
 8007b14:	6553      	str	r3, [r2, #84]	; 0x54
 8007b16:	4b0d      	ldr	r3, [pc, #52]	; (8007b4c <HAL_FDCAN_ActivateNotification+0xf0>)
 8007b18:	695a      	ldr	r2, [r3, #20]
 8007b1a:	68bb      	ldr	r3, [r7, #8]
 8007b1c:	0f9b      	lsrs	r3, r3, #30
 8007b1e:	490b      	ldr	r1, [pc, #44]	; (8007b4c <HAL_FDCAN_ActivateNotification+0xf0>)
 8007b20:	4313      	orrs	r3, r2
 8007b22:	614b      	str	r3, [r1, #20]

    /* Return function status */
    return HAL_OK;
 8007b24:	2300      	movs	r3, #0
 8007b26:	e008      	b.n	8007b3a <HAL_FDCAN_ActivateNotification+0xde>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_INITIALIZED;
 8007b28:	68fb      	ldr	r3, [r7, #12]
 8007b2a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8007b2e:	f043 0202 	orr.w	r2, r3, #2
 8007b32:	68fb      	ldr	r3, [r7, #12]
 8007b34:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    return HAL_ERROR;
 8007b38:	2301      	movs	r3, #1
  }
}
 8007b3a:	4618      	mov	r0, r3
 8007b3c:	371c      	adds	r7, #28
 8007b3e:	46bd      	mov	sp, r7
 8007b40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b44:	4770      	bx	lr
 8007b46:	bf00      	nop
 8007b48:	3fcfffff 	.word	0x3fcfffff
 8007b4c:	4000a800 	.word	0x4000a800

08007b50 <HAL_FDCAN_IRQHandler>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
void HAL_FDCAN_IRQHandler(FDCAN_HandleTypeDef *hfdcan)
{
 8007b50:	b580      	push	{r7, lr}
 8007b52:	b092      	sub	sp, #72	; 0x48
 8007b54:	af00      	add	r7, sp, #0
 8007b56:	6078      	str	r0, [r7, #4]
  uint32_t TTDistErrors;
  uint32_t TTFatalErrors;
  uint32_t SWTime;
  uint32_t SWCycleCount;

  ClkCalibrationITs = (FDCAN_CCU->IR << 30);
 8007b58:	4b90      	ldr	r3, [pc, #576]	; (8007d9c <HAL_FDCAN_IRQHandler+0x24c>)
 8007b5a:	691b      	ldr	r3, [r3, #16]
 8007b5c:	079b      	lsls	r3, r3, #30
 8007b5e:	647b      	str	r3, [r7, #68]	; 0x44
  ClkCalibrationITs &= (FDCAN_CCU->IE << 30);
 8007b60:	4b8e      	ldr	r3, [pc, #568]	; (8007d9c <HAL_FDCAN_IRQHandler+0x24c>)
 8007b62:	695b      	ldr	r3, [r3, #20]
 8007b64:	079b      	lsls	r3, r3, #30
 8007b66:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007b68:	4013      	ands	r3, r2
 8007b6a:	647b      	str	r3, [r7, #68]	; 0x44
  TxEventFifoITs = hfdcan->Instance->IR & FDCAN_TX_EVENT_FIFO_MASK;
 8007b6c:	687b      	ldr	r3, [r7, #4]
 8007b6e:	681b      	ldr	r3, [r3, #0]
 8007b70:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007b72:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 8007b76:	643b      	str	r3, [r7, #64]	; 0x40
  TxEventFifoITs &= hfdcan->Instance->IE;
 8007b78:	687b      	ldr	r3, [r7, #4]
 8007b7a:	681b      	ldr	r3, [r3, #0]
 8007b7c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007b7e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8007b80:	4013      	ands	r3, r2
 8007b82:	643b      	str	r3, [r7, #64]	; 0x40
  RxFifo0ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO0_MASK;
 8007b84:	687b      	ldr	r3, [r7, #4]
 8007b86:	681b      	ldr	r3, [r3, #0]
 8007b88:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007b8a:	f003 030f 	and.w	r3, r3, #15
 8007b8e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RxFifo0ITs &= hfdcan->Instance->IE;
 8007b90:	687b      	ldr	r3, [r7, #4]
 8007b92:	681b      	ldr	r3, [r3, #0]
 8007b94:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007b96:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8007b98:	4013      	ands	r3, r2
 8007b9a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RxFifo1ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO1_MASK;
 8007b9c:	687b      	ldr	r3, [r7, #4]
 8007b9e:	681b      	ldr	r3, [r3, #0]
 8007ba0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007ba2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007ba6:	63bb      	str	r3, [r7, #56]	; 0x38
  RxFifo1ITs &= hfdcan->Instance->IE;
 8007ba8:	687b      	ldr	r3, [r7, #4]
 8007baa:	681b      	ldr	r3, [r3, #0]
 8007bac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007bae:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007bb0:	4013      	ands	r3, r2
 8007bb2:	63bb      	str	r3, [r7, #56]	; 0x38
  Errors = hfdcan->Instance->IR & FDCAN_ERROR_MASK;
 8007bb4:	687b      	ldr	r3, [r7, #4]
 8007bb6:	681b      	ldr	r3, [r3, #0]
 8007bb8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007bba:	f003 5371 	and.w	r3, r3, #1010827264	; 0x3c400000
 8007bbe:	637b      	str	r3, [r7, #52]	; 0x34
  Errors &= hfdcan->Instance->IE;
 8007bc0:	687b      	ldr	r3, [r7, #4]
 8007bc2:	681b      	ldr	r3, [r3, #0]
 8007bc4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007bc6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007bc8:	4013      	ands	r3, r2
 8007bca:	637b      	str	r3, [r7, #52]	; 0x34
  ErrorStatusITs = hfdcan->Instance->IR & FDCAN_ERROR_STATUS_MASK;
 8007bcc:	687b      	ldr	r3, [r7, #4]
 8007bce:	681b      	ldr	r3, [r3, #0]
 8007bd0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007bd2:	f003 7360 	and.w	r3, r3, #58720256	; 0x3800000
 8007bd6:	633b      	str	r3, [r7, #48]	; 0x30
  ErrorStatusITs &= hfdcan->Instance->IE;
 8007bd8:	687b      	ldr	r3, [r7, #4]
 8007bda:	681b      	ldr	r3, [r3, #0]
 8007bdc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007bde:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007be0:	4013      	ands	r3, r2
 8007be2:	633b      	str	r3, [r7, #48]	; 0x30

  /* High Priority Message interrupt management *******************************/
  if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_RX_HIGH_PRIORITY_MSG) != 0U)
 8007be4:	687b      	ldr	r3, [r7, #4]
 8007be6:	681b      	ldr	r3, [r3, #0]
 8007be8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007bea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007bee:	2b00      	cmp	r3, #0
 8007bf0:	d011      	beq.n	8007c16 <HAL_FDCAN_IRQHandler+0xc6>
  {
    if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG) != 0U)
 8007bf2:	687b      	ldr	r3, [r7, #4]
 8007bf4:	681b      	ldr	r3, [r3, #0]
 8007bf6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007bf8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007bfc:	2b00      	cmp	r3, #0
 8007bfe:	d00a      	beq.n	8007c16 <HAL_FDCAN_IRQHandler+0xc6>
    {
      /* Clear the High Priority Message flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG);
 8007c00:	687b      	ldr	r3, [r7, #4]
 8007c02:	681b      	ldr	r3, [r3, #0]
 8007c04:	f44f 7280 	mov.w	r2, #256	; 0x100
 8007c08:	651a      	str	r2, [r3, #80]	; 0x50
 8007c0a:	4b64      	ldr	r3, [pc, #400]	; (8007d9c <HAL_FDCAN_IRQHandler+0x24c>)
 8007c0c:	2200      	movs	r2, #0
 8007c0e:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->HighPriorityMessageCallback(hfdcan);
#else
      /* High Priority Message Callback */
      HAL_FDCAN_HighPriorityMessageCallback(hfdcan);
 8007c10:	6878      	ldr	r0, [r7, #4]
 8007c12:	f000 fa5a 	bl	80080ca <HAL_FDCAN_HighPriorityMessageCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Abort interrupt management **********************************/
  if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TX_ABORT_COMPLETE) != 0U)
 8007c16:	687b      	ldr	r3, [r7, #4]
 8007c18:	681b      	ldr	r3, [r3, #0]
 8007c1a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007c1c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007c20:	2b00      	cmp	r3, #0
 8007c22:	d01e      	beq.n	8007c62 <HAL_FDCAN_IRQHandler+0x112>
  {
    if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TX_ABORT_COMPLETE) != 0U)
 8007c24:	687b      	ldr	r3, [r7, #4]
 8007c26:	681b      	ldr	r3, [r3, #0]
 8007c28:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007c2a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007c2e:	2b00      	cmp	r3, #0
 8007c30:	d017      	beq.n	8007c62 <HAL_FDCAN_IRQHandler+0x112>
    {
      /* List of aborted monitored buffers */
      AbortedBuffers = hfdcan->Instance->TXBCF;
 8007c32:	687b      	ldr	r3, [r7, #4]
 8007c34:	681b      	ldr	r3, [r3, #0]
 8007c36:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 8007c3a:	62fb      	str	r3, [r7, #44]	; 0x2c
      AbortedBuffers &= hfdcan->Instance->TXBCIE;
 8007c3c:	687b      	ldr	r3, [r7, #4]
 8007c3e:	681b      	ldr	r3, [r3, #0]
 8007c40:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8007c44:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007c46:	4013      	ands	r3, r2
 8007c48:	62fb      	str	r3, [r7, #44]	; 0x2c

      /* Clear the Transmission Cancellation flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_ABORT_COMPLETE);
 8007c4a:	687b      	ldr	r3, [r7, #4]
 8007c4c:	681b      	ldr	r3, [r3, #0]
 8007c4e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8007c52:	651a      	str	r2, [r3, #80]	; 0x50
 8007c54:	4b51      	ldr	r3, [pc, #324]	; (8007d9c <HAL_FDCAN_IRQHandler+0x24c>)
 8007c56:	2200      	movs	r2, #0
 8007c58:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferAbortCallback(hfdcan, AbortedBuffers);
#else
      /* Transmission Cancellation Callback */
      HAL_FDCAN_TxBufferAbortCallback(hfdcan, AbortedBuffers);
 8007c5a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007c5c:	6878      	ldr	r0, [r7, #4]
 8007c5e:	f000 fa0b 	bl	8008078 <HAL_FDCAN_TxBufferAbortCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Clock calibration unit interrupts management *****************************/
  if (ClkCalibrationITs != 0U)
 8007c62:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007c64:	2b00      	cmp	r3, #0
 8007c66:	d00d      	beq.n	8007c84 <HAL_FDCAN_IRQHandler+0x134>
  {
    /* Clear the Clock Calibration flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, ClkCalibrationITs);
 8007c68:	687b      	ldr	r3, [r7, #4]
 8007c6a:	681a      	ldr	r2, [r3, #0]
 8007c6c:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8007c6e:	4b4c      	ldr	r3, [pc, #304]	; (8007da0 <HAL_FDCAN_IRQHandler+0x250>)
 8007c70:	400b      	ands	r3, r1
 8007c72:	6513      	str	r3, [r2, #80]	; 0x50
 8007c74:	4a49      	ldr	r2, [pc, #292]	; (8007d9c <HAL_FDCAN_IRQHandler+0x24c>)
 8007c76:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007c78:	0f9b      	lsrs	r3, r3, #30
 8007c7a:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ClockCalibrationCallback(hfdcan, ClkCalibrationITs);
#else
    /* Clock Calibration Callback */
    HAL_FDCAN_ClockCalibrationCallback(hfdcan, ClkCalibrationITs);
 8007c7c:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8007c7e:	6878      	ldr	r0, [r7, #4]
 8007c80:	f000 f9c4 	bl	800800c <HAL_FDCAN_ClockCalibrationCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Tx event FIFO interrupts management **************************************/
  if (TxEventFifoITs != 0U)
 8007c84:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007c86:	2b00      	cmp	r3, #0
 8007c88:	d00d      	beq.n	8007ca6 <HAL_FDCAN_IRQHandler+0x156>
  {
    /* Clear the Tx Event FIFO flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, TxEventFifoITs);
 8007c8a:	687b      	ldr	r3, [r7, #4]
 8007c8c:	681a      	ldr	r2, [r3, #0]
 8007c8e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8007c90:	4b43      	ldr	r3, [pc, #268]	; (8007da0 <HAL_FDCAN_IRQHandler+0x250>)
 8007c92:	400b      	ands	r3, r1
 8007c94:	6513      	str	r3, [r2, #80]	; 0x50
 8007c96:	4a41      	ldr	r2, [pc, #260]	; (8007d9c <HAL_FDCAN_IRQHandler+0x24c>)
 8007c98:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007c9a:	0f9b      	lsrs	r3, r3, #30
 8007c9c:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->TxEventFifoCallback(hfdcan, TxEventFifoITs);
#else
    /* Tx Event FIFO Callback */
    HAL_FDCAN_TxEventFifoCallback(hfdcan, TxEventFifoITs);
 8007c9e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8007ca0:	6878      	ldr	r0, [r7, #4]
 8007ca2:	f000 f9be 	bl	8008022 <HAL_FDCAN_TxEventFifoCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 0 interrupts management ******************************************/
  if (RxFifo0ITs != 0U)
 8007ca6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007ca8:	2b00      	cmp	r3, #0
 8007caa:	d00d      	beq.n	8007cc8 <HAL_FDCAN_IRQHandler+0x178>
  {
    /* Clear the Rx FIFO 0 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo0ITs);
 8007cac:	687b      	ldr	r3, [r7, #4]
 8007cae:	681a      	ldr	r2, [r3, #0]
 8007cb0:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8007cb2:	4b3b      	ldr	r3, [pc, #236]	; (8007da0 <HAL_FDCAN_IRQHandler+0x250>)
 8007cb4:	400b      	ands	r3, r1
 8007cb6:	6513      	str	r3, [r2, #80]	; 0x50
 8007cb8:	4a38      	ldr	r2, [pc, #224]	; (8007d9c <HAL_FDCAN_IRQHandler+0x24c>)
 8007cba:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007cbc:	0f9b      	lsrs	r3, r3, #30
 8007cbe:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo0Callback(hfdcan, RxFifo0ITs);
#else
    /* Rx FIFO 0 Callback */
    HAL_FDCAN_RxFifo0Callback(hfdcan, RxFifo0ITs);
 8007cc0:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8007cc2:	6878      	ldr	r0, [r7, #4]
 8007cc4:	f7f9 f81c 	bl	8000d00 <HAL_FDCAN_RxFifo0Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 1 interrupts management ******************************************/
  if (RxFifo1ITs != 0U)
 8007cc8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007cca:	2b00      	cmp	r3, #0
 8007ccc:	d00d      	beq.n	8007cea <HAL_FDCAN_IRQHandler+0x19a>
  {
    /* Clear the Rx FIFO 1 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo1ITs);
 8007cce:	687b      	ldr	r3, [r7, #4]
 8007cd0:	681a      	ldr	r2, [r3, #0]
 8007cd2:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8007cd4:	4b32      	ldr	r3, [pc, #200]	; (8007da0 <HAL_FDCAN_IRQHandler+0x250>)
 8007cd6:	400b      	ands	r3, r1
 8007cd8:	6513      	str	r3, [r2, #80]	; 0x50
 8007cda:	4a30      	ldr	r2, [pc, #192]	; (8007d9c <HAL_FDCAN_IRQHandler+0x24c>)
 8007cdc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007cde:	0f9b      	lsrs	r3, r3, #30
 8007ce0:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo1Callback(hfdcan, RxFifo1ITs);
#else
    /* Rx FIFO 1 Callback */
    HAL_FDCAN_RxFifo1Callback(hfdcan, RxFifo1ITs);
 8007ce2:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8007ce4:	6878      	ldr	r0, [r7, #4]
 8007ce6:	f000 f9a7 	bl	8008038 <HAL_FDCAN_RxFifo1Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Tx FIFO empty interrupt management ***************************************/
  if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TX_FIFO_EMPTY) != 0U)
 8007cea:	687b      	ldr	r3, [r7, #4]
 8007cec:	681b      	ldr	r3, [r3, #0]
 8007cee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007cf0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007cf4:	2b00      	cmp	r3, #0
 8007cf6:	d011      	beq.n	8007d1c <HAL_FDCAN_IRQHandler+0x1cc>
  {
    if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TX_FIFO_EMPTY) != 0U)
 8007cf8:	687b      	ldr	r3, [r7, #4]
 8007cfa:	681b      	ldr	r3, [r3, #0]
 8007cfc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007cfe:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007d02:	2b00      	cmp	r3, #0
 8007d04:	d00a      	beq.n	8007d1c <HAL_FDCAN_IRQHandler+0x1cc>
    {
      /* Clear the Tx FIFO empty flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_FIFO_EMPTY);
 8007d06:	687b      	ldr	r3, [r7, #4]
 8007d08:	681b      	ldr	r3, [r3, #0]
 8007d0a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007d0e:	651a      	str	r2, [r3, #80]	; 0x50
 8007d10:	4b22      	ldr	r3, [pc, #136]	; (8007d9c <HAL_FDCAN_IRQHandler+0x24c>)
 8007d12:	2200      	movs	r2, #0
 8007d14:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxFifoEmptyCallback(hfdcan);
#else
      /* Tx FIFO empty Callback */
      HAL_FDCAN_TxFifoEmptyCallback(hfdcan);
 8007d16:	6878      	ldr	r0, [r7, #4]
 8007d18:	f000 f999 	bl	800804e <HAL_FDCAN_TxFifoEmptyCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Complete interrupt management *******************************/
  if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TX_COMPLETE) != 0U)
 8007d1c:	687b      	ldr	r3, [r7, #4]
 8007d1e:	681b      	ldr	r3, [r3, #0]
 8007d20:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007d22:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007d26:	2b00      	cmp	r3, #0
 8007d28:	d01e      	beq.n	8007d68 <HAL_FDCAN_IRQHandler+0x218>
  {
    if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TX_COMPLETE) != 0U)
 8007d2a:	687b      	ldr	r3, [r7, #4]
 8007d2c:	681b      	ldr	r3, [r3, #0]
 8007d2e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007d30:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007d34:	2b00      	cmp	r3, #0
 8007d36:	d017      	beq.n	8007d68 <HAL_FDCAN_IRQHandler+0x218>
    {
      /* List of transmitted monitored buffers */
      TransmittedBuffers = hfdcan->Instance->TXBTO;
 8007d38:	687b      	ldr	r3, [r7, #4]
 8007d3a:	681b      	ldr	r3, [r3, #0]
 8007d3c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8007d40:	62bb      	str	r3, [r7, #40]	; 0x28
      TransmittedBuffers &= hfdcan->Instance->TXBTIE;
 8007d42:	687b      	ldr	r3, [r7, #4]
 8007d44:	681b      	ldr	r3, [r3, #0]
 8007d46:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8007d4a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007d4c:	4013      	ands	r3, r2
 8007d4e:	62bb      	str	r3, [r7, #40]	; 0x28

      /* Clear the Transmission Complete flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_COMPLETE);
 8007d50:	687b      	ldr	r3, [r7, #4]
 8007d52:	681b      	ldr	r3, [r3, #0]
 8007d54:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007d58:	651a      	str	r2, [r3, #80]	; 0x50
 8007d5a:	4b10      	ldr	r3, [pc, #64]	; (8007d9c <HAL_FDCAN_IRQHandler+0x24c>)
 8007d5c:	2200      	movs	r2, #0
 8007d5e:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
#else
      /* Transmission Complete Callback */
      HAL_FDCAN_TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
 8007d60:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007d62:	6878      	ldr	r0, [r7, #4]
 8007d64:	f000 f97d 	bl	8008062 <HAL_FDCAN_TxBufferCompleteCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Rx Buffer New Message interrupt management *******************************/
  if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_RX_BUFFER_NEW_MESSAGE) != 0U)
 8007d68:	687b      	ldr	r3, [r7, #4]
 8007d6a:	681b      	ldr	r3, [r3, #0]
 8007d6c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007d6e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8007d72:	2b00      	cmp	r3, #0
 8007d74:	d016      	beq.n	8007da4 <HAL_FDCAN_IRQHandler+0x254>
  {
    if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_RX_BUFFER_NEW_MESSAGE) != 0U)
 8007d76:	687b      	ldr	r3, [r7, #4]
 8007d78:	681b      	ldr	r3, [r3, #0]
 8007d7a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007d7c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8007d80:	2b00      	cmp	r3, #0
 8007d82:	d00f      	beq.n	8007da4 <HAL_FDCAN_IRQHandler+0x254>
    {
      /* Clear the Rx Buffer New Message flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RX_BUFFER_NEW_MESSAGE);
 8007d84:	687b      	ldr	r3, [r7, #4]
 8007d86:	681b      	ldr	r3, [r3, #0]
 8007d88:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8007d8c:	651a      	str	r2, [r3, #80]	; 0x50
 8007d8e:	4b03      	ldr	r3, [pc, #12]	; (8007d9c <HAL_FDCAN_IRQHandler+0x24c>)
 8007d90:	2200      	movs	r2, #0
 8007d92:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->RxBufferNewMessageCallback(hfdcan);
#else
      /* Rx Buffer New Message Callback */
      HAL_FDCAN_RxBufferNewMessageCallback(hfdcan);
 8007d94:	6878      	ldr	r0, [r7, #4]
 8007d96:	f000 f97a 	bl	800808e <HAL_FDCAN_RxBufferNewMessageCallback>
 8007d9a:	e003      	b.n	8007da4 <HAL_FDCAN_IRQHandler+0x254>
 8007d9c:	4000a800 	.word	0x4000a800
 8007da0:	3fcfffff 	.word	0x3fcfffff
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timestamp Wraparound interrupt management ********************************/
  if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TIMESTAMP_WRAPAROUND) != 0U)
 8007da4:	687b      	ldr	r3, [r7, #4]
 8007da6:	681b      	ldr	r3, [r3, #0]
 8007da8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007daa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007dae:	2b00      	cmp	r3, #0
 8007db0:	d011      	beq.n	8007dd6 <HAL_FDCAN_IRQHandler+0x286>
  {
    if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TIMESTAMP_WRAPAROUND) != 0U)
 8007db2:	687b      	ldr	r3, [r7, #4]
 8007db4:	681b      	ldr	r3, [r3, #0]
 8007db6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007db8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007dbc:	2b00      	cmp	r3, #0
 8007dbe:	d00a      	beq.n	8007dd6 <HAL_FDCAN_IRQHandler+0x286>
    {
      /* Clear the Timestamp Wraparound flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMESTAMP_WRAPAROUND);
 8007dc0:	687b      	ldr	r3, [r7, #4]
 8007dc2:	681b      	ldr	r3, [r3, #0]
 8007dc4:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8007dc8:	651a      	str	r2, [r3, #80]	; 0x50
 8007dca:	4b8d      	ldr	r3, [pc, #564]	; (8008000 <HAL_FDCAN_IRQHandler+0x4b0>)
 8007dcc:	2200      	movs	r2, #0
 8007dce:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimestampWraparoundCallback(hfdcan);
#else
      /* Timestamp Wraparound Callback */
      HAL_FDCAN_TimestampWraparoundCallback(hfdcan);
 8007dd0:	6878      	ldr	r0, [r7, #4]
 8007dd2:	f000 f966 	bl	80080a2 <HAL_FDCAN_TimestampWraparoundCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timeout Occurred interrupt management ************************************/
  if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TIMEOUT_OCCURRED) != 0U)
 8007dd6:	687b      	ldr	r3, [r7, #4]
 8007dd8:	681b      	ldr	r3, [r3, #0]
 8007dda:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007ddc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8007de0:	2b00      	cmp	r3, #0
 8007de2:	d011      	beq.n	8007e08 <HAL_FDCAN_IRQHandler+0x2b8>
  {
    if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TIMEOUT_OCCURRED) != 0U)
 8007de4:	687b      	ldr	r3, [r7, #4]
 8007de6:	681b      	ldr	r3, [r3, #0]
 8007de8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007dea:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8007dee:	2b00      	cmp	r3, #0
 8007df0:	d00a      	beq.n	8007e08 <HAL_FDCAN_IRQHandler+0x2b8>
    {
      /* Clear the Timeout Occurred flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMEOUT_OCCURRED);
 8007df2:	687b      	ldr	r3, [r7, #4]
 8007df4:	681b      	ldr	r3, [r3, #0]
 8007df6:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8007dfa:	651a      	str	r2, [r3, #80]	; 0x50
 8007dfc:	4b80      	ldr	r3, [pc, #512]	; (8008000 <HAL_FDCAN_IRQHandler+0x4b0>)
 8007dfe:	2200      	movs	r2, #0
 8007e00:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimeoutOccurredCallback(hfdcan);
#else
      /* Timeout Occurred Callback */
      HAL_FDCAN_TimeoutOccurredCallback(hfdcan);
 8007e02:	6878      	ldr	r0, [r7, #4]
 8007e04:	f000 f957 	bl	80080b6 <HAL_FDCAN_TimeoutOccurredCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Message RAM access failure interrupt management **************************/
  if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_RAM_ACCESS_FAILURE) != 0U)
 8007e08:	687b      	ldr	r3, [r7, #4]
 8007e0a:	681b      	ldr	r3, [r3, #0]
 8007e0c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007e0e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007e12:	2b00      	cmp	r3, #0
 8007e14:	d016      	beq.n	8007e44 <HAL_FDCAN_IRQHandler+0x2f4>
  {
    if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_RAM_ACCESS_FAILURE) != 0U)
 8007e16:	687b      	ldr	r3, [r7, #4]
 8007e18:	681b      	ldr	r3, [r3, #0]
 8007e1a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007e1c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007e20:	2b00      	cmp	r3, #0
 8007e22:	d00f      	beq.n	8007e44 <HAL_FDCAN_IRQHandler+0x2f4>
    {
      /* Clear the Message RAM access failure flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RAM_ACCESS_FAILURE);
 8007e24:	687b      	ldr	r3, [r7, #4]
 8007e26:	681b      	ldr	r3, [r3, #0]
 8007e28:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8007e2c:	651a      	str	r2, [r3, #80]	; 0x50
 8007e2e:	4b74      	ldr	r3, [pc, #464]	; (8008000 <HAL_FDCAN_IRQHandler+0x4b0>)
 8007e30:	2200      	movs	r2, #0
 8007e32:	611a      	str	r2, [r3, #16]

      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_RAM_ACCESS;
 8007e34:	687b      	ldr	r3, [r7, #4]
 8007e36:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8007e3a:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8007e3e:	687b      	ldr	r3, [r7, #4]
 8007e40:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
    }
  }

  /* Error Status interrupts management ***************************************/
  if (ErrorStatusITs != 0U)
 8007e44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e46:	2b00      	cmp	r3, #0
 8007e48:	d00d      	beq.n	8007e66 <HAL_FDCAN_IRQHandler+0x316>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, ErrorStatusITs);
 8007e4a:	687b      	ldr	r3, [r7, #4]
 8007e4c:	681a      	ldr	r2, [r3, #0]
 8007e4e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8007e50:	4b6c      	ldr	r3, [pc, #432]	; (8008004 <HAL_FDCAN_IRQHandler+0x4b4>)
 8007e52:	400b      	ands	r3, r1
 8007e54:	6513      	str	r3, [r2, #80]	; 0x50
 8007e56:	4a6a      	ldr	r2, [pc, #424]	; (8008000 <HAL_FDCAN_IRQHandler+0x4b0>)
 8007e58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e5a:	0f9b      	lsrs	r3, r3, #30
 8007e5c:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorStatusCallback(hfdcan, ErrorStatusITs);
#else
    /* Error Status Callback */
    HAL_FDCAN_ErrorStatusCallback(hfdcan, ErrorStatusITs);
 8007e5e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8007e60:	6878      	ldr	r0, [r7, #4]
 8007e62:	f000 f946 	bl	80080f2 <HAL_FDCAN_ErrorStatusCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Error interrupts management **********************************************/
  if (Errors != 0U)
 8007e66:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007e68:	2b00      	cmp	r3, #0
 8007e6a:	d011      	beq.n	8007e90 <HAL_FDCAN_IRQHandler+0x340>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, Errors);
 8007e6c:	687b      	ldr	r3, [r7, #4]
 8007e6e:	681a      	ldr	r2, [r3, #0]
 8007e70:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8007e72:	4b64      	ldr	r3, [pc, #400]	; (8008004 <HAL_FDCAN_IRQHandler+0x4b4>)
 8007e74:	400b      	ands	r3, r1
 8007e76:	6513      	str	r3, [r2, #80]	; 0x50
 8007e78:	4a61      	ldr	r2, [pc, #388]	; (8008000 <HAL_FDCAN_IRQHandler+0x4b0>)
 8007e7a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007e7c:	0f9b      	lsrs	r3, r3, #30
 8007e7e:	6113      	str	r3, [r2, #16]

    /* Update error code */
    hfdcan->ErrorCode |= Errors;
 8007e80:	687b      	ldr	r3, [r7, #4]
 8007e82:	f8d3 209c 	ldr.w	r2, [r3, #156]	; 0x9c
 8007e86:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007e88:	431a      	orrs	r2, r3
 8007e8a:	687b      	ldr	r3, [r7, #4]
 8007e8c:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
  }

  if (hfdcan->Instance == FDCAN1)
 8007e90:	687b      	ldr	r3, [r7, #4]
 8007e92:	681b      	ldr	r3, [r3, #0]
 8007e94:	4a5c      	ldr	r2, [pc, #368]	; (8008008 <HAL_FDCAN_IRQHandler+0x4b8>)
 8007e96:	4293      	cmp	r3, r2
 8007e98:	f040 80a6 	bne.w	8007fe8 <HAL_FDCAN_IRQHandler+0x498>
  {
    if ((hfdcan->ttcan->TTOCF & FDCAN_TTOCF_OM) != 0U)
 8007e9c:	687b      	ldr	r3, [r7, #4]
 8007e9e:	685b      	ldr	r3, [r3, #4]
 8007ea0:	689b      	ldr	r3, [r3, #8]
 8007ea2:	f003 0303 	and.w	r3, r3, #3
 8007ea6:	2b00      	cmp	r3, #0
 8007ea8:	f000 809e 	beq.w	8007fe8 <HAL_FDCAN_IRQHandler+0x498>
    {
      TTSchedSyncITs = hfdcan->ttcan->TTIR & FDCAN_TT_SCHEDULE_SYNC_MASK;
 8007eac:	687b      	ldr	r3, [r7, #4]
 8007eae:	685b      	ldr	r3, [r3, #4]
 8007eb0:	6a1b      	ldr	r3, [r3, #32]
 8007eb2:	f003 030f 	and.w	r3, r3, #15
 8007eb6:	627b      	str	r3, [r7, #36]	; 0x24
      TTSchedSyncITs &= hfdcan->ttcan->TTIE;
 8007eb8:	687b      	ldr	r3, [r7, #4]
 8007eba:	685b      	ldr	r3, [r3, #4]
 8007ebc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ebe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007ec0:	4013      	ands	r3, r2
 8007ec2:	627b      	str	r3, [r7, #36]	; 0x24
      TTTimeMarkITs = hfdcan->ttcan->TTIR & FDCAN_TT_TIME_MARK_MASK;
 8007ec4:	687b      	ldr	r3, [r7, #4]
 8007ec6:	685b      	ldr	r3, [r3, #4]
 8007ec8:	6a1b      	ldr	r3, [r3, #32]
 8007eca:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8007ece:	623b      	str	r3, [r7, #32]
      TTTimeMarkITs &= hfdcan->ttcan->TTIE;
 8007ed0:	687b      	ldr	r3, [r7, #4]
 8007ed2:	685b      	ldr	r3, [r3, #4]
 8007ed4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ed6:	6a3a      	ldr	r2, [r7, #32]
 8007ed8:	4013      	ands	r3, r2
 8007eda:	623b      	str	r3, [r7, #32]
      TTGlobTimeITs = hfdcan->ttcan->TTIR & FDCAN_TT_GLOBAL_TIME_MASK;
 8007edc:	687b      	ldr	r3, [r7, #4]
 8007ede:	685b      	ldr	r3, [r3, #4]
 8007ee0:	6a1b      	ldr	r3, [r3, #32]
 8007ee2:	f403 73c0 	and.w	r3, r3, #384	; 0x180
 8007ee6:	61fb      	str	r3, [r7, #28]
      TTGlobTimeITs &= hfdcan->ttcan->TTIE;
 8007ee8:	687b      	ldr	r3, [r7, #4]
 8007eea:	685b      	ldr	r3, [r3, #4]
 8007eec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007eee:	69fa      	ldr	r2, [r7, #28]
 8007ef0:	4013      	ands	r3, r2
 8007ef2:	61fb      	str	r3, [r7, #28]
      TTDistErrors = hfdcan->ttcan->TTIR & FDCAN_TT_DISTURBING_ERROR_MASK;
 8007ef4:	687b      	ldr	r3, [r7, #4]
 8007ef6:	685b      	ldr	r3, [r3, #4]
 8007ef8:	6a1b      	ldr	r3, [r3, #32]
 8007efa:	f403 43fc 	and.w	r3, r3, #32256	; 0x7e00
 8007efe:	61bb      	str	r3, [r7, #24]
      TTDistErrors &= hfdcan->ttcan->TTIE;
 8007f00:	687b      	ldr	r3, [r7, #4]
 8007f02:	685b      	ldr	r3, [r3, #4]
 8007f04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f06:	69ba      	ldr	r2, [r7, #24]
 8007f08:	4013      	ands	r3, r2
 8007f0a:	61bb      	str	r3, [r7, #24]
      TTFatalErrors = hfdcan->ttcan->TTIR & FDCAN_TT_FATAL_ERROR_MASK;
 8007f0c:	687b      	ldr	r3, [r7, #4]
 8007f0e:	685b      	ldr	r3, [r3, #4]
 8007f10:	6a1b      	ldr	r3, [r3, #32]
 8007f12:	f403 23f0 	and.w	r3, r3, #491520	; 0x78000
 8007f16:	617b      	str	r3, [r7, #20]
      TTFatalErrors &= hfdcan->ttcan->TTIE;
 8007f18:	687b      	ldr	r3, [r7, #4]
 8007f1a:	685b      	ldr	r3, [r3, #4]
 8007f1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f1e:	697a      	ldr	r2, [r7, #20]
 8007f20:	4013      	ands	r3, r2
 8007f22:	617b      	str	r3, [r7, #20]

      /* TT Schedule Synchronization interrupts management **********************/
      if (TTSchedSyncITs != 0U)
 8007f24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f26:	2b00      	cmp	r3, #0
 8007f28:	d007      	beq.n	8007f3a <HAL_FDCAN_IRQHandler+0x3ea>
      {
        /* Clear the TT Schedule Synchronization flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTSchedSyncITs);
 8007f2a:	687b      	ldr	r3, [r7, #4]
 8007f2c:	685b      	ldr	r3, [r3, #4]
 8007f2e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007f30:	621a      	str	r2, [r3, #32]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hfdcan->TT_ScheduleSyncCallback(hfdcan, TTSchedSyncITs);
#else
        /* TT Schedule Synchronization Callback */
        HAL_FDCAN_TT_ScheduleSyncCallback(hfdcan, TTSchedSyncITs);
 8007f32:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8007f34:	6878      	ldr	r0, [r7, #4]
 8007f36:	f000 f8e7 	bl	8008108 <HAL_FDCAN_TT_ScheduleSyncCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
      }

      /* TT Time Mark interrupts management *************************************/
      if (TTTimeMarkITs != 0U)
 8007f3a:	6a3b      	ldr	r3, [r7, #32]
 8007f3c:	2b00      	cmp	r3, #0
 8007f3e:	d007      	beq.n	8007f50 <HAL_FDCAN_IRQHandler+0x400>
      {
        /* Clear the TT Time Mark flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTTimeMarkITs);
 8007f40:	687b      	ldr	r3, [r7, #4]
 8007f42:	685b      	ldr	r3, [r3, #4]
 8007f44:	6a3a      	ldr	r2, [r7, #32]
 8007f46:	621a      	str	r2, [r3, #32]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hfdcan->TT_TimeMarkCallback(hfdcan, TTTimeMarkITs);
#else
        /* TT Time Mark Callback */
        HAL_FDCAN_TT_TimeMarkCallback(hfdcan, TTTimeMarkITs);
 8007f48:	6a39      	ldr	r1, [r7, #32]
 8007f4a:	6878      	ldr	r0, [r7, #4]
 8007f4c:	f000 f8e7 	bl	800811e <HAL_FDCAN_TT_TimeMarkCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
      }

      /* TT Stop Watch interrupt management *************************************/
      if (__HAL_FDCAN_TT_GET_IT_SOURCE(hfdcan, FDCAN_TT_IT_STOP_WATCH) != 0U)
 8007f50:	687b      	ldr	r3, [r7, #4]
 8007f52:	685b      	ldr	r3, [r3, #4]
 8007f54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f56:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007f5a:	2b00      	cmp	r3, #0
 8007f5c:	d01b      	beq.n	8007f96 <HAL_FDCAN_IRQHandler+0x446>
      {
        if (__HAL_FDCAN_TT_GET_FLAG(hfdcan, FDCAN_TT_FLAG_STOP_WATCH) != 0U)
 8007f5e:	687b      	ldr	r3, [r7, #4]
 8007f60:	685b      	ldr	r3, [r3, #4]
 8007f62:	6a1b      	ldr	r3, [r3, #32]
 8007f64:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007f68:	2b00      	cmp	r3, #0
 8007f6a:	d014      	beq.n	8007f96 <HAL_FDCAN_IRQHandler+0x446>
        {
          /* Retrieve Stop watch Time and Cycle count */
          SWTime = ((hfdcan->ttcan->TTCPT & FDCAN_TTCPT_SWV) >> FDCAN_TTCPT_SWV_Pos);
 8007f6c:	687b      	ldr	r3, [r7, #4]
 8007f6e:	685b      	ldr	r3, [r3, #4]
 8007f70:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007f72:	0c1b      	lsrs	r3, r3, #16
 8007f74:	b29b      	uxth	r3, r3
 8007f76:	613b      	str	r3, [r7, #16]
          SWCycleCount = ((hfdcan->ttcan->TTCPT & FDCAN_TTCPT_CCV) >> FDCAN_TTCPT_CCV_Pos);
 8007f78:	687b      	ldr	r3, [r7, #4]
 8007f7a:	685b      	ldr	r3, [r3, #4]
 8007f7c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007f7e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007f82:	60fb      	str	r3, [r7, #12]

          /* Clear the TT Stop Watch flag */
          __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, FDCAN_TT_FLAG_STOP_WATCH);
 8007f84:	687b      	ldr	r3, [r7, #4]
 8007f86:	685b      	ldr	r3, [r3, #4]
 8007f88:	2240      	movs	r2, #64	; 0x40
 8007f8a:	621a      	str	r2, [r3, #32]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hfdcan->TT_StopWatchCallback(hfdcan, SWTime, SWCycleCount);
#else
          /* TT Stop Watch Callback */
          HAL_FDCAN_TT_StopWatchCallback(hfdcan, SWTime, SWCycleCount);
 8007f8c:	68fa      	ldr	r2, [r7, #12]
 8007f8e:	6939      	ldr	r1, [r7, #16]
 8007f90:	6878      	ldr	r0, [r7, #4]
 8007f92:	f000 f8cf 	bl	8008134 <HAL_FDCAN_TT_StopWatchCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
        }
      }

      /* TT Global Time interrupts management ***********************************/
      if (TTGlobTimeITs != 0U)
 8007f96:	69fb      	ldr	r3, [r7, #28]
 8007f98:	2b00      	cmp	r3, #0
 8007f9a:	d007      	beq.n	8007fac <HAL_FDCAN_IRQHandler+0x45c>
      {
        /* Clear the TT Global Time flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTGlobTimeITs);
 8007f9c:	687b      	ldr	r3, [r7, #4]
 8007f9e:	685b      	ldr	r3, [r3, #4]
 8007fa0:	69fa      	ldr	r2, [r7, #28]
 8007fa2:	621a      	str	r2, [r3, #32]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hfdcan->TT_GlobalTimeCallback(hfdcan, TTGlobTimeITs);
#else
        /* TT Global Time Callback */
        HAL_FDCAN_TT_GlobalTimeCallback(hfdcan, TTGlobTimeITs);
 8007fa4:	69f9      	ldr	r1, [r7, #28]
 8007fa6:	6878      	ldr	r0, [r7, #4]
 8007fa8:	f000 f8d0 	bl	800814c <HAL_FDCAN_TT_GlobalTimeCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
      }

      /* TT Disturbing Error interrupts management ******************************/
      if (TTDistErrors != 0U)
 8007fac:	69bb      	ldr	r3, [r7, #24]
 8007fae:	2b00      	cmp	r3, #0
 8007fb0:	d00b      	beq.n	8007fca <HAL_FDCAN_IRQHandler+0x47a>
      {
        /* Clear the TT Disturbing Error flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTDistErrors);
 8007fb2:	687b      	ldr	r3, [r7, #4]
 8007fb4:	685b      	ldr	r3, [r3, #4]
 8007fb6:	69ba      	ldr	r2, [r7, #24]
 8007fb8:	621a      	str	r2, [r3, #32]

        /* Update error code */
        hfdcan->ErrorCode |= TTDistErrors;
 8007fba:	687b      	ldr	r3, [r7, #4]
 8007fbc:	f8d3 209c 	ldr.w	r2, [r3, #156]	; 0x9c
 8007fc0:	69bb      	ldr	r3, [r7, #24]
 8007fc2:	431a      	orrs	r2, r3
 8007fc4:	687b      	ldr	r3, [r7, #4]
 8007fc6:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
      }

      /* TT Fatal Error interrupts management ***********************************/
      if (TTFatalErrors != 0U)
 8007fca:	697b      	ldr	r3, [r7, #20]
 8007fcc:	2b00      	cmp	r3, #0
 8007fce:	d00b      	beq.n	8007fe8 <HAL_FDCAN_IRQHandler+0x498>
      {
        /* Clear the TT Fatal Error flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTFatalErrors);
 8007fd0:	687b      	ldr	r3, [r7, #4]
 8007fd2:	685b      	ldr	r3, [r3, #4]
 8007fd4:	697a      	ldr	r2, [r7, #20]
 8007fd6:	621a      	str	r2, [r3, #32]

        /* Update error code */
        hfdcan->ErrorCode |= TTFatalErrors;
 8007fd8:	687b      	ldr	r3, [r7, #4]
 8007fda:	f8d3 209c 	ldr.w	r2, [r3, #156]	; 0x9c
 8007fde:	697b      	ldr	r3, [r7, #20]
 8007fe0:	431a      	orrs	r2, r3
 8007fe2:	687b      	ldr	r3, [r7, #4]
 8007fe4:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
      }
    }
  }

  if (hfdcan->ErrorCode != HAL_FDCAN_ERROR_NONE)
 8007fe8:	687b      	ldr	r3, [r7, #4]
 8007fea:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8007fee:	2b00      	cmp	r3, #0
 8007ff0:	d002      	beq.n	8007ff8 <HAL_FDCAN_IRQHandler+0x4a8>
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorCallback(hfdcan);
#else
    /* Error Callback */
    HAL_FDCAN_ErrorCallback(hfdcan);
 8007ff2:	6878      	ldr	r0, [r7, #4]
 8007ff4:	f000 f873 	bl	80080de <HAL_FDCAN_ErrorCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }
}
 8007ff8:	bf00      	nop
 8007ffa:	3748      	adds	r7, #72	; 0x48
 8007ffc:	46bd      	mov	sp, r7
 8007ffe:	bd80      	pop	{r7, pc}
 8008000:	4000a800 	.word	0x4000a800
 8008004:	3fcfffff 	.word	0x3fcfffff
 8008008:	4000a000 	.word	0x4000a000

0800800c <HAL_FDCAN_ClockCalibrationCallback>:
  * @param  ClkCalibrationITs indicates which Clock Calibration interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Clock_Calibration_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_ClockCalibrationCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t ClkCalibrationITs)
{
 800800c:	b480      	push	{r7}
 800800e:	b083      	sub	sp, #12
 8008010:	af00      	add	r7, sp, #0
 8008012:	6078      	str	r0, [r7, #4]
 8008014:	6039      	str	r1, [r7, #0]
  UNUSED(ClkCalibrationITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ClockCalibrationCallback could be implemented in the user file
   */
}
 8008016:	bf00      	nop
 8008018:	370c      	adds	r7, #12
 800801a:	46bd      	mov	sp, r7
 800801c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008020:	4770      	bx	lr

08008022 <HAL_FDCAN_TxEventFifoCallback>:
  * @param  TxEventFifoITs indicates which Tx Event FIFO interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Tx_Event_Fifo_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TxEventFifoCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TxEventFifoITs)
{
 8008022:	b480      	push	{r7}
 8008024:	b083      	sub	sp, #12
 8008026:	af00      	add	r7, sp, #0
 8008028:	6078      	str	r0, [r7, #4]
 800802a:	6039      	str	r1, [r7, #0]
  UNUSED(TxEventFifoITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxEventFifoCallback could be implemented in the user file
   */
}
 800802c:	bf00      	nop
 800802e:	370c      	adds	r7, #12
 8008030:	46bd      	mov	sp, r7
 8008032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008036:	4770      	bx	lr

08008038 <HAL_FDCAN_RxFifo1Callback>:
  * @param  RxFifo1ITs indicates which Rx FIFO 1 interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Rx_Fifo1_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_RxFifo1Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo1ITs)
{
 8008038:	b480      	push	{r7}
 800803a:	b083      	sub	sp, #12
 800803c:	af00      	add	r7, sp, #0
 800803e:	6078      	str	r0, [r7, #4]
 8008040:	6039      	str	r1, [r7, #0]
  UNUSED(RxFifo1ITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_RxFifo1Callback could be implemented in the user file
   */
}
 8008042:	bf00      	nop
 8008044:	370c      	adds	r7, #12
 8008046:	46bd      	mov	sp, r7
 8008048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800804c:	4770      	bx	lr

0800804e <HAL_FDCAN_TxFifoEmptyCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TxFifoEmptyCallback(FDCAN_HandleTypeDef *hfdcan)
{
 800804e:	b480      	push	{r7}
 8008050:	b083      	sub	sp, #12
 8008052:	af00      	add	r7, sp, #0
 8008054:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxFifoEmptyCallback could be implemented in the user file
   */
}
 8008056:	bf00      	nop
 8008058:	370c      	adds	r7, #12
 800805a:	46bd      	mov	sp, r7
 800805c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008060:	4770      	bx	lr

08008062 <HAL_FDCAN_TxBufferCompleteCallback>:
  * @param  BufferIndexes Indexes of the transmitted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferCompleteCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 8008062:	b480      	push	{r7}
 8008064:	b083      	sub	sp, #12
 8008066:	af00      	add	r7, sp, #0
 8008068:	6078      	str	r0, [r7, #4]
 800806a:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferCompleteCallback could be implemented in the user file
   */
}
 800806c:	bf00      	nop
 800806e:	370c      	adds	r7, #12
 8008070:	46bd      	mov	sp, r7
 8008072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008076:	4770      	bx	lr

08008078 <HAL_FDCAN_TxBufferAbortCallback>:
  * @param  BufferIndexes Indexes of the aborted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferAbortCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 8008078:	b480      	push	{r7}
 800807a:	b083      	sub	sp, #12
 800807c:	af00      	add	r7, sp, #0
 800807e:	6078      	str	r0, [r7, #4]
 8008080:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferAbortCallback could be implemented in the user file
   */
}
 8008082:	bf00      	nop
 8008084:	370c      	adds	r7, #12
 8008086:	46bd      	mov	sp, r7
 8008088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800808c:	4770      	bx	lr

0800808e <HAL_FDCAN_RxBufferNewMessageCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_RxBufferNewMessageCallback(FDCAN_HandleTypeDef *hfdcan)
{
 800808e:	b480      	push	{r7}
 8008090:	b083      	sub	sp, #12
 8008092:	af00      	add	r7, sp, #0
 8008094:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_RxBufferNewMessageCallback could be implemented in the user file
   */
}
 8008096:	bf00      	nop
 8008098:	370c      	adds	r7, #12
 800809a:	46bd      	mov	sp, r7
 800809c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080a0:	4770      	bx	lr

080080a2 <HAL_FDCAN_TimestampWraparoundCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimestampWraparoundCallback(FDCAN_HandleTypeDef *hfdcan)
{
 80080a2:	b480      	push	{r7}
 80080a4:	b083      	sub	sp, #12
 80080a6:	af00      	add	r7, sp, #0
 80080a8:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimestampWraparoundCallback could be implemented in the user file
   */
}
 80080aa:	bf00      	nop
 80080ac:	370c      	adds	r7, #12
 80080ae:	46bd      	mov	sp, r7
 80080b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080b4:	4770      	bx	lr

080080b6 <HAL_FDCAN_TimeoutOccurredCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimeoutOccurredCallback(FDCAN_HandleTypeDef *hfdcan)
{
 80080b6:	b480      	push	{r7}
 80080b8:	b083      	sub	sp, #12
 80080ba:	af00      	add	r7, sp, #0
 80080bc:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimeoutOccurredCallback could be implemented in the user file
   */
}
 80080be:	bf00      	nop
 80080c0:	370c      	adds	r7, #12
 80080c2:	46bd      	mov	sp, r7
 80080c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080c8:	4770      	bx	lr

080080ca <HAL_FDCAN_HighPriorityMessageCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_HighPriorityMessageCallback(FDCAN_HandleTypeDef *hfdcan)
{
 80080ca:	b480      	push	{r7}
 80080cc:	b083      	sub	sp, #12
 80080ce:	af00      	add	r7, sp, #0
 80080d0:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_HighPriorityMessageCallback could be implemented in the user file
   */
}
 80080d2:	bf00      	nop
 80080d4:	370c      	adds	r7, #12
 80080d6:	46bd      	mov	sp, r7
 80080d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080dc:	4770      	bx	lr

080080de <HAL_FDCAN_ErrorCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorCallback(FDCAN_HandleTypeDef *hfdcan)
{
 80080de:	b480      	push	{r7}
 80080e0:	b083      	sub	sp, #12
 80080e2:	af00      	add	r7, sp, #0
 80080e4:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorCallback could be implemented in the user file
   */
}
 80080e6:	bf00      	nop
 80080e8:	370c      	adds	r7, #12
 80080ea:	46bd      	mov	sp, r7
 80080ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080f0:	4770      	bx	lr

080080f2 <HAL_FDCAN_ErrorStatusCallback>:
  * @param  ErrorStatusITs indicates which Error Status interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Error_Status_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorStatusCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t ErrorStatusITs)
{
 80080f2:	b480      	push	{r7}
 80080f4:	b083      	sub	sp, #12
 80080f6:	af00      	add	r7, sp, #0
 80080f8:	6078      	str	r0, [r7, #4]
 80080fa:	6039      	str	r1, [r7, #0]
  UNUSED(ErrorStatusITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorStatusCallback could be implemented in the user file
   */
}
 80080fc:	bf00      	nop
 80080fe:	370c      	adds	r7, #12
 8008100:	46bd      	mov	sp, r7
 8008102:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008106:	4770      	bx	lr

08008108 <HAL_FDCAN_TT_ScheduleSyncCallback>:
  * @param  TTSchedSyncITs indicates which TT Schedule Synchronization interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_TTScheduleSynchronization_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TT_ScheduleSyncCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TTSchedSyncITs)
{
 8008108:	b480      	push	{r7}
 800810a:	b083      	sub	sp, #12
 800810c:	af00      	add	r7, sp, #0
 800810e:	6078      	str	r0, [r7, #4]
 8008110:	6039      	str	r1, [r7, #0]
  UNUSED(TTSchedSyncITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TT_ScheduleSyncCallback could be implemented in the user file
   */
}
 8008112:	bf00      	nop
 8008114:	370c      	adds	r7, #12
 8008116:	46bd      	mov	sp, r7
 8008118:	f85d 7b04 	ldr.w	r7, [sp], #4
 800811c:	4770      	bx	lr

0800811e <HAL_FDCAN_TT_TimeMarkCallback>:
  * @param  TTTimeMarkITs indicates which TT Schedule Synchronization interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_TTTimeMark_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TT_TimeMarkCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TTTimeMarkITs)
{
 800811e:	b480      	push	{r7}
 8008120:	b083      	sub	sp, #12
 8008122:	af00      	add	r7, sp, #0
 8008124:	6078      	str	r0, [r7, #4]
 8008126:	6039      	str	r1, [r7, #0]
  UNUSED(TTTimeMarkITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TT_TimeMarkCallback could be implemented in the user file
   */
}
 8008128:	bf00      	nop
 800812a:	370c      	adds	r7, #12
 800812c:	46bd      	mov	sp, r7
 800812e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008132:	4770      	bx	lr

08008134 <HAL_FDCAN_TT_StopWatchCallback>:
  * @param  SWCycleCount Cycle count value captured together with SWTime.
  *         This parameter is a number between 0 and 0x3F.
  * @retval None
  */
__weak void HAL_FDCAN_TT_StopWatchCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t SWTime, uint32_t SWCycleCount)
{
 8008134:	b480      	push	{r7}
 8008136:	b085      	sub	sp, #20
 8008138:	af00      	add	r7, sp, #0
 800813a:	60f8      	str	r0, [r7, #12]
 800813c:	60b9      	str	r1, [r7, #8]
 800813e:	607a      	str	r2, [r7, #4]
  UNUSED(SWCycleCount);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TT_StopWatchCallback could be implemented in the user file
   */
}
 8008140:	bf00      	nop
 8008142:	3714      	adds	r7, #20
 8008144:	46bd      	mov	sp, r7
 8008146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800814a:	4770      	bx	lr

0800814c <HAL_FDCAN_TT_GlobalTimeCallback>:
  * @param  TTGlobTimeITs indicates which TT Global Time interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_TTGlobalTime_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TT_GlobalTimeCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TTGlobTimeITs)
{
 800814c:	b480      	push	{r7}
 800814e:	b083      	sub	sp, #12
 8008150:	af00      	add	r7, sp, #0
 8008152:	6078      	str	r0, [r7, #4]
 8008154:	6039      	str	r1, [r7, #0]
  UNUSED(TTGlobTimeITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TT_GlobalTimeCallback could be implemented in the user file
   */
}
 8008156:	bf00      	nop
 8008158:	370c      	adds	r7, #12
 800815a:	46bd      	mov	sp, r7
 800815c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008160:	4770      	bx	lr
	...

08008164 <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
 */
static HAL_StatusTypeDef FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 8008164:	b480      	push	{r7}
 8008166:	b085      	sub	sp, #20
 8008168:	af00      	add	r7, sp, #0
 800816a:	6078      	str	r0, [r7, #4]
  uint32_t RAMcounter;
  uint32_t StartAddress;

  StartAddress = hfdcan->Init.MessageRAMOffset;
 800816c:	687b      	ldr	r3, [r7, #4]
 800816e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008170:	60bb      	str	r3, [r7, #8]

  /* Standard filter list start address */
  MODIFY_REG(hfdcan->Instance->SIDFC, FDCAN_SIDFC_FLSSA, (StartAddress << FDCAN_SIDFC_FLSSA_Pos));
 8008172:	687b      	ldr	r3, [r7, #4]
 8008174:	681b      	ldr	r3, [r3, #0]
 8008176:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 800817a:	4ba7      	ldr	r3, [pc, #668]	; (8008418 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 800817c:	4013      	ands	r3, r2
 800817e:	68ba      	ldr	r2, [r7, #8]
 8008180:	0091      	lsls	r1, r2, #2
 8008182:	687a      	ldr	r2, [r7, #4]
 8008184:	6812      	ldr	r2, [r2, #0]
 8008186:	430b      	orrs	r3, r1
 8008188:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->SIDFC, FDCAN_SIDFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_SIDFC_LSS_Pos));
 800818c:	687b      	ldr	r3, [r7, #4]
 800818e:	681b      	ldr	r3, [r3, #0]
 8008190:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008194:	f423 017f 	bic.w	r1, r3, #16711680	; 0xff0000
 8008198:	687b      	ldr	r3, [r7, #4]
 800819a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800819c:	041a      	lsls	r2, r3, #16
 800819e:	687b      	ldr	r3, [r7, #4]
 80081a0:	681b      	ldr	r3, [r3, #0]
 80081a2:	430a      	orrs	r2, r1
 80081a4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Extended filter list start address */
  StartAddress += hfdcan->Init.StdFiltersNbr;
 80081a8:	687b      	ldr	r3, [r7, #4]
 80081aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80081ac:	68ba      	ldr	r2, [r7, #8]
 80081ae:	4413      	add	r3, r2
 80081b0:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->XIDFC, FDCAN_XIDFC_FLESA, (StartAddress << FDCAN_XIDFC_FLESA_Pos));
 80081b2:	687b      	ldr	r3, [r7, #4]
 80081b4:	681b      	ldr	r3, [r3, #0]
 80081b6:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80081ba:	4b97      	ldr	r3, [pc, #604]	; (8008418 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 80081bc:	4013      	ands	r3, r2
 80081be:	68ba      	ldr	r2, [r7, #8]
 80081c0:	0091      	lsls	r1, r2, #2
 80081c2:	687a      	ldr	r2, [r7, #4]
 80081c4:	6812      	ldr	r2, [r2, #0]
 80081c6:	430b      	orrs	r3, r1
 80081c8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->XIDFC, FDCAN_XIDFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_XIDFC_LSE_Pos));
 80081cc:	687b      	ldr	r3, [r7, #4]
 80081ce:	681b      	ldr	r3, [r3, #0]
 80081d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80081d4:	f423 01fe 	bic.w	r1, r3, #8323072	; 0x7f0000
 80081d8:	687b      	ldr	r3, [r7, #4]
 80081da:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80081dc:	041a      	lsls	r2, r3, #16
 80081de:	687b      	ldr	r3, [r7, #4]
 80081e0:	681b      	ldr	r3, [r3, #0]
 80081e2:	430a      	orrs	r2, r1
 80081e4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Rx FIFO 0 start address */
  StartAddress += (hfdcan->Init.ExtFiltersNbr * 2U);
 80081e8:	687b      	ldr	r3, [r7, #4]
 80081ea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80081ec:	005b      	lsls	r3, r3, #1
 80081ee:	68ba      	ldr	r2, [r7, #8]
 80081f0:	4413      	add	r3, r2
 80081f2:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXF0C, FDCAN_RXF0C_F0SA, (StartAddress << FDCAN_RXF0C_F0SA_Pos));
 80081f4:	687b      	ldr	r3, [r7, #4]
 80081f6:	681b      	ldr	r3, [r3, #0]
 80081f8:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 80081fc:	4b86      	ldr	r3, [pc, #536]	; (8008418 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 80081fe:	4013      	ands	r3, r2
 8008200:	68ba      	ldr	r2, [r7, #8]
 8008202:	0091      	lsls	r1, r2, #2
 8008204:	687a      	ldr	r2, [r7, #4]
 8008206:	6812      	ldr	r2, [r2, #0]
 8008208:	430b      	orrs	r3, r1
 800820a:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0

  /* Rx FIFO 0 elements number */
  MODIFY_REG(hfdcan->Instance->RXF0C, FDCAN_RXF0C_F0S, (hfdcan->Init.RxFifo0ElmtsNbr << FDCAN_RXF0C_F0S_Pos));
 800820e:	687b      	ldr	r3, [r7, #4]
 8008210:	681b      	ldr	r3, [r3, #0]
 8008212:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8008216:	f423 01fe 	bic.w	r1, r3, #8323072	; 0x7f0000
 800821a:	687b      	ldr	r3, [r7, #4]
 800821c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800821e:	041a      	lsls	r2, r3, #16
 8008220:	687b      	ldr	r3, [r7, #4]
 8008222:	681b      	ldr	r3, [r3, #0]
 8008224:	430a      	orrs	r2, r1
 8008226:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0

  /* Rx FIFO 1 start address */
  StartAddress += (hfdcan->Init.RxFifo0ElmtsNbr * hfdcan->Init.RxFifo0ElmtSize);
 800822a:	687b      	ldr	r3, [r7, #4]
 800822c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800822e:	687a      	ldr	r2, [r7, #4]
 8008230:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8008232:	fb02 f303 	mul.w	r3, r2, r3
 8008236:	68ba      	ldr	r2, [r7, #8]
 8008238:	4413      	add	r3, r2
 800823a:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXF1C, FDCAN_RXF1C_F1SA, (StartAddress << FDCAN_RXF1C_F1SA_Pos));
 800823c:	687b      	ldr	r3, [r7, #4]
 800823e:	681b      	ldr	r3, [r3, #0]
 8008240:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8008244:	4b74      	ldr	r3, [pc, #464]	; (8008418 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8008246:	4013      	ands	r3, r2
 8008248:	68ba      	ldr	r2, [r7, #8]
 800824a:	0091      	lsls	r1, r2, #2
 800824c:	687a      	ldr	r2, [r7, #4]
 800824e:	6812      	ldr	r2, [r2, #0]
 8008250:	430b      	orrs	r3, r1
 8008252:	f8c2 30b0 	str.w	r3, [r2, #176]	; 0xb0

  /* Rx FIFO 1 elements number */
  MODIFY_REG(hfdcan->Instance->RXF1C, FDCAN_RXF1C_F1S, (hfdcan->Init.RxFifo1ElmtsNbr << FDCAN_RXF1C_F1S_Pos));
 8008256:	687b      	ldr	r3, [r7, #4]
 8008258:	681b      	ldr	r3, [r3, #0]
 800825a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800825e:	f423 01fe 	bic.w	r1, r3, #8323072	; 0x7f0000
 8008262:	687b      	ldr	r3, [r7, #4]
 8008264:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008266:	041a      	lsls	r2, r3, #16
 8008268:	687b      	ldr	r3, [r7, #4]
 800826a:	681b      	ldr	r3, [r3, #0]
 800826c:	430a      	orrs	r2, r1
 800826e:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0

  /* Rx buffer list start address */
  StartAddress += (hfdcan->Init.RxFifo1ElmtsNbr * hfdcan->Init.RxFifo1ElmtSize);
 8008272:	687b      	ldr	r3, [r7, #4]
 8008274:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008276:	687a      	ldr	r2, [r7, #4]
 8008278:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 800827a:	fb02 f303 	mul.w	r3, r2, r3
 800827e:	68ba      	ldr	r2, [r7, #8]
 8008280:	4413      	add	r3, r2
 8008282:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXBC, FDCAN_RXBC_RBSA, (StartAddress << FDCAN_RXBC_RBSA_Pos));
 8008284:	687b      	ldr	r3, [r7, #4]
 8008286:	681b      	ldr	r3, [r3, #0]
 8008288:	f8d3 20ac 	ldr.w	r2, [r3, #172]	; 0xac
 800828c:	4b62      	ldr	r3, [pc, #392]	; (8008418 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 800828e:	4013      	ands	r3, r2
 8008290:	68ba      	ldr	r2, [r7, #8]
 8008292:	0091      	lsls	r1, r2, #2
 8008294:	687a      	ldr	r2, [r7, #4]
 8008296:	6812      	ldr	r2, [r2, #0]
 8008298:	430b      	orrs	r3, r1
 800829a:	f8c2 30ac 	str.w	r3, [r2, #172]	; 0xac

  /* Tx event FIFO start address */
  StartAddress += (hfdcan->Init.RxBuffersNbr * hfdcan->Init.RxBufferSize);
 800829e:	687b      	ldr	r3, [r7, #4]
 80082a0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80082a2:	687a      	ldr	r2, [r7, #4]
 80082a4:	6d52      	ldr	r2, [r2, #84]	; 0x54
 80082a6:	fb02 f303 	mul.w	r3, r2, r3
 80082aa:	68ba      	ldr	r2, [r7, #8]
 80082ac:	4413      	add	r3, r2
 80082ae:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->TXEFC, FDCAN_TXEFC_EFSA, (StartAddress << FDCAN_TXEFC_EFSA_Pos));
 80082b0:	687b      	ldr	r3, [r7, #4]
 80082b2:	681b      	ldr	r3, [r3, #0]
 80082b4:	f8d3 20f0 	ldr.w	r2, [r3, #240]	; 0xf0
 80082b8:	4b57      	ldr	r3, [pc, #348]	; (8008418 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 80082ba:	4013      	ands	r3, r2
 80082bc:	68ba      	ldr	r2, [r7, #8]
 80082be:	0091      	lsls	r1, r2, #2
 80082c0:	687a      	ldr	r2, [r7, #4]
 80082c2:	6812      	ldr	r2, [r2, #0]
 80082c4:	430b      	orrs	r3, r1
 80082c6:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

  /* Tx event FIFO elements number */
  MODIFY_REG(hfdcan->Instance->TXEFC, FDCAN_TXEFC_EFS, (hfdcan->Init.TxEventsNbr << FDCAN_TXEFC_EFS_Pos));
 80082ca:	687b      	ldr	r3, [r7, #4]
 80082cc:	681b      	ldr	r3, [r3, #0]
 80082ce:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80082d2:	f423 117c 	bic.w	r1, r3, #4128768	; 0x3f0000
 80082d6:	687b      	ldr	r3, [r7, #4]
 80082d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80082da:	041a      	lsls	r2, r3, #16
 80082dc:	687b      	ldr	r3, [r7, #4]
 80082de:	681b      	ldr	r3, [r3, #0]
 80082e0:	430a      	orrs	r2, r1
 80082e2:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0

  /* Tx buffer list start address */
  StartAddress += (hfdcan->Init.TxEventsNbr * 2U);
 80082e6:	687b      	ldr	r3, [r7, #4]
 80082e8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80082ea:	005b      	lsls	r3, r3, #1
 80082ec:	68ba      	ldr	r2, [r7, #8]
 80082ee:	4413      	add	r3, r2
 80082f0:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_TBSA, (StartAddress << FDCAN_TXBC_TBSA_Pos));
 80082f2:	687b      	ldr	r3, [r7, #4]
 80082f4:	681b      	ldr	r3, [r3, #0]
 80082f6:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 80082fa:	4b47      	ldr	r3, [pc, #284]	; (8008418 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 80082fc:	4013      	ands	r3, r2
 80082fe:	68ba      	ldr	r2, [r7, #8]
 8008300:	0091      	lsls	r1, r2, #2
 8008302:	687a      	ldr	r2, [r7, #4]
 8008304:	6812      	ldr	r2, [r2, #0]
 8008306:	430b      	orrs	r3, r1
 8008308:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0

  /* Dedicated Tx buffers number */
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_NDTB, (hfdcan->Init.TxBuffersNbr << FDCAN_TXBC_NDTB_Pos));
 800830c:	687b      	ldr	r3, [r7, #4]
 800830e:	681b      	ldr	r3, [r3, #0]
 8008310:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8008314:	f423 117c 	bic.w	r1, r3, #4128768	; 0x3f0000
 8008318:	687b      	ldr	r3, [r7, #4]
 800831a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800831c:	041a      	lsls	r2, r3, #16
 800831e:	687b      	ldr	r3, [r7, #4]
 8008320:	681b      	ldr	r3, [r3, #0]
 8008322:	430a      	orrs	r2, r1
 8008324:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0

  /* Tx FIFO/queue elements number */
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_TFQS, (hfdcan->Init.TxFifoQueueElmtsNbr << FDCAN_TXBC_TFQS_Pos));
 8008328:	687b      	ldr	r3, [r7, #4]
 800832a:	681b      	ldr	r3, [r3, #0]
 800832c:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8008330:	f023 517c 	bic.w	r1, r3, #1056964608	; 0x3f000000
 8008334:	687b      	ldr	r3, [r7, #4]
 8008336:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008338:	061a      	lsls	r2, r3, #24
 800833a:	687b      	ldr	r3, [r7, #4]
 800833c:	681b      	ldr	r3, [r3, #0]
 800833e:	430a      	orrs	r2, r1
 8008340:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0

  hfdcan->msgRam.StandardFilterSA = SRAMCAN_BASE + (hfdcan->Init.MessageRAMOffset * 4U);
 8008344:	687b      	ldr	r3, [r7, #4]
 8008346:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008348:	4b34      	ldr	r3, [pc, #208]	; (800841c <FDCAN_CalcultateRamBlockAddresses+0x2b8>)
 800834a:	4413      	add	r3, r2
 800834c:	009a      	lsls	r2, r3, #2
 800834e:	687b      	ldr	r3, [r7, #4]
 8008350:	66da      	str	r2, [r3, #108]	; 0x6c
  hfdcan->msgRam.ExtendedFilterSA = hfdcan->msgRam.StandardFilterSA + (hfdcan->Init.StdFiltersNbr * 4U);
 8008352:	687b      	ldr	r3, [r7, #4]
 8008354:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8008356:	687b      	ldr	r3, [r7, #4]
 8008358:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800835a:	009b      	lsls	r3, r3, #2
 800835c:	441a      	add	r2, r3
 800835e:	687b      	ldr	r3, [r7, #4]
 8008360:	671a      	str	r2, [r3, #112]	; 0x70
  hfdcan->msgRam.RxFIFO0SA = hfdcan->msgRam.ExtendedFilterSA + (hfdcan->Init.ExtFiltersNbr * 2U * 4U);
 8008362:	687b      	ldr	r3, [r7, #4]
 8008364:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8008366:	687b      	ldr	r3, [r7, #4]
 8008368:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800836a:	00db      	lsls	r3, r3, #3
 800836c:	441a      	add	r2, r3
 800836e:	687b      	ldr	r3, [r7, #4]
 8008370:	675a      	str	r2, [r3, #116]	; 0x74
  hfdcan->msgRam.RxFIFO1SA = hfdcan->msgRam.RxFIFO0SA + (hfdcan->Init.RxFifo0ElmtsNbr * hfdcan->Init.RxFifo0ElmtSize * 4U);
 8008372:	687b      	ldr	r3, [r7, #4]
 8008374:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 8008376:	687b      	ldr	r3, [r7, #4]
 8008378:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800837a:	6879      	ldr	r1, [r7, #4]
 800837c:	6c49      	ldr	r1, [r1, #68]	; 0x44
 800837e:	fb01 f303 	mul.w	r3, r1, r3
 8008382:	009b      	lsls	r3, r3, #2
 8008384:	441a      	add	r2, r3
 8008386:	687b      	ldr	r3, [r7, #4]
 8008388:	679a      	str	r2, [r3, #120]	; 0x78
  hfdcan->msgRam.RxBufferSA = hfdcan->msgRam.RxFIFO1SA + (hfdcan->Init.RxFifo1ElmtsNbr * hfdcan->Init.RxFifo1ElmtSize * 4U);
 800838a:	687b      	ldr	r3, [r7, #4]
 800838c:	6f9a      	ldr	r2, [r3, #120]	; 0x78
 800838e:	687b      	ldr	r3, [r7, #4]
 8008390:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008392:	6879      	ldr	r1, [r7, #4]
 8008394:	6cc9      	ldr	r1, [r1, #76]	; 0x4c
 8008396:	fb01 f303 	mul.w	r3, r1, r3
 800839a:	009b      	lsls	r3, r3, #2
 800839c:	441a      	add	r2, r3
 800839e:	687b      	ldr	r3, [r7, #4]
 80083a0:	67da      	str	r2, [r3, #124]	; 0x7c
  hfdcan->msgRam.TxEventFIFOSA = hfdcan->msgRam.RxBufferSA + (hfdcan->Init.RxBuffersNbr * hfdcan->Init.RxBufferSize * 4U);
 80083a2:	687b      	ldr	r3, [r7, #4]
 80083a4:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 80083a6:	687b      	ldr	r3, [r7, #4]
 80083a8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80083aa:	6879      	ldr	r1, [r7, #4]
 80083ac:	6d49      	ldr	r1, [r1, #84]	; 0x54
 80083ae:	fb01 f303 	mul.w	r3, r1, r3
 80083b2:	009b      	lsls	r3, r3, #2
 80083b4:	441a      	add	r2, r3
 80083b6:	687b      	ldr	r3, [r7, #4]
 80083b8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  hfdcan->msgRam.TxBufferSA = hfdcan->msgRam.TxEventFIFOSA + (hfdcan->Init.TxEventsNbr * 2U * 4U);
 80083bc:	687b      	ldr	r3, [r7, #4]
 80083be:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 80083c2:	687b      	ldr	r3, [r7, #4]
 80083c4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80083c6:	00db      	lsls	r3, r3, #3
 80083c8:	441a      	add	r2, r3
 80083ca:	687b      	ldr	r3, [r7, #4]
 80083cc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hfdcan->msgRam.TxFIFOQSA = hfdcan->msgRam.TxBufferSA + (hfdcan->Init.TxBuffersNbr * hfdcan->Init.TxElmtSize * 4U);
 80083d0:	687b      	ldr	r3, [r7, #4]
 80083d2:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 80083d6:	687b      	ldr	r3, [r7, #4]
 80083d8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80083da:	6879      	ldr	r1, [r7, #4]
 80083dc:	6e89      	ldr	r1, [r1, #104]	; 0x68
 80083de:	fb01 f303 	mul.w	r3, r1, r3
 80083e2:	009b      	lsls	r3, r3, #2
 80083e4:	441a      	add	r2, r3
 80083e6:	687b      	ldr	r3, [r7, #4]
 80083e8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  hfdcan->msgRam.EndAddress = hfdcan->msgRam.TxFIFOQSA + (hfdcan->Init.TxFifoQueueElmtsNbr * hfdcan->Init.TxElmtSize * 4U);
 80083ec:	687b      	ldr	r3, [r7, #4]
 80083ee:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80083f2:	687b      	ldr	r3, [r7, #4]
 80083f4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80083f6:	6879      	ldr	r1, [r7, #4]
 80083f8:	6e89      	ldr	r1, [r1, #104]	; 0x68
 80083fa:	fb01 f303 	mul.w	r3, r1, r3
 80083fe:	009b      	lsls	r3, r3, #2
 8008400:	441a      	add	r2, r3
 8008402:	687b      	ldr	r3, [r7, #4]
 8008404:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  if (hfdcan->msgRam.EndAddress > FDCAN_MESSAGE_RAM_END_ADDRESS) /* Last address of the Message RAM */
 8008408:	687b      	ldr	r3, [r7, #4]
 800840a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800840e:	4a04      	ldr	r2, [pc, #16]	; (8008420 <FDCAN_CalcultateRamBlockAddresses+0x2bc>)
 8008410:	4293      	cmp	r3, r2
 8008412:	d915      	bls.n	8008440 <FDCAN_CalcultateRamBlockAddresses+0x2dc>
 8008414:	e006      	b.n	8008424 <FDCAN_CalcultateRamBlockAddresses+0x2c0>
 8008416:	bf00      	nop
 8008418:	ffff0003 	.word	0xffff0003
 800841c:	10002b00 	.word	0x10002b00
 8008420:	4000d3fc 	.word	0x4000d3fc
  {
    /* Update error code.
       Message RAM overflow */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 8008424:	687b      	ldr	r3, [r7, #4]
 8008426:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800842a:	f043 0220 	orr.w	r2, r3, #32
 800842e:	687b      	ldr	r3, [r7, #4]
 8008430:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    /* Change FDCAN state */
    hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8008434:	687b      	ldr	r3, [r7, #4]
 8008436:	2203      	movs	r2, #3
 8008438:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

    return HAL_ERROR;
 800843c:	2301      	movs	r3, #1
 800843e:	e010      	b.n	8008462 <FDCAN_CalcultateRamBlockAddresses+0x2fe>
  }
  else
  {
    /* Flush the allocated Message RAM area */
    for (RAMcounter = hfdcan->msgRam.StandardFilterSA; RAMcounter < hfdcan->msgRam.EndAddress; RAMcounter += 4U)
 8008440:	687b      	ldr	r3, [r7, #4]
 8008442:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008444:	60fb      	str	r3, [r7, #12]
 8008446:	e005      	b.n	8008454 <FDCAN_CalcultateRamBlockAddresses+0x2f0>
    {
      *(uint32_t *)(RAMcounter) = 0x00000000;
 8008448:	68fb      	ldr	r3, [r7, #12]
 800844a:	2200      	movs	r2, #0
 800844c:	601a      	str	r2, [r3, #0]
    for (RAMcounter = hfdcan->msgRam.StandardFilterSA; RAMcounter < hfdcan->msgRam.EndAddress; RAMcounter += 4U)
 800844e:	68fb      	ldr	r3, [r7, #12]
 8008450:	3304      	adds	r3, #4
 8008452:	60fb      	str	r3, [r7, #12]
 8008454:	687b      	ldr	r3, [r7, #4]
 8008456:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800845a:	68fa      	ldr	r2, [r7, #12]
 800845c:	429a      	cmp	r2, r3
 800845e:	d3f3      	bcc.n	8008448 <FDCAN_CalcultateRamBlockAddresses+0x2e4>
    }
  }

  /* Return function status */
  return HAL_OK;
 8008460:	2300      	movs	r3, #0
}
 8008462:	4618      	mov	r0, r3
 8008464:	3714      	adds	r7, #20
 8008466:	46bd      	mov	sp, r7
 8008468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800846c:	4770      	bx	lr
 800846e:	bf00      	nop

08008470 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8008470:	b480      	push	{r7}
 8008472:	b089      	sub	sp, #36	; 0x24
 8008474:	af00      	add	r7, sp, #0
 8008476:	6078      	str	r0, [r7, #4]
 8008478:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800847a:	2300      	movs	r3, #0
 800847c:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 800847e:	4b89      	ldr	r3, [pc, #548]	; (80086a4 <HAL_GPIO_Init+0x234>)
 8008480:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8008482:	e194      	b.n	80087ae <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8008484:	683b      	ldr	r3, [r7, #0]
 8008486:	681a      	ldr	r2, [r3, #0]
 8008488:	2101      	movs	r1, #1
 800848a:	69fb      	ldr	r3, [r7, #28]
 800848c:	fa01 f303 	lsl.w	r3, r1, r3
 8008490:	4013      	ands	r3, r2
 8008492:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8008494:	693b      	ldr	r3, [r7, #16]
 8008496:	2b00      	cmp	r3, #0
 8008498:	f000 8186 	beq.w	80087a8 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800849c:	683b      	ldr	r3, [r7, #0]
 800849e:	685b      	ldr	r3, [r3, #4]
 80084a0:	2b01      	cmp	r3, #1
 80084a2:	d00b      	beq.n	80084bc <HAL_GPIO_Init+0x4c>
 80084a4:	683b      	ldr	r3, [r7, #0]
 80084a6:	685b      	ldr	r3, [r3, #4]
 80084a8:	2b02      	cmp	r3, #2
 80084aa:	d007      	beq.n	80084bc <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80084ac:	683b      	ldr	r3, [r7, #0]
 80084ae:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80084b0:	2b11      	cmp	r3, #17
 80084b2:	d003      	beq.n	80084bc <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80084b4:	683b      	ldr	r3, [r7, #0]
 80084b6:	685b      	ldr	r3, [r3, #4]
 80084b8:	2b12      	cmp	r3, #18
 80084ba:	d130      	bne.n	800851e <HAL_GPIO_Init+0xae>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80084bc:	687b      	ldr	r3, [r7, #4]
 80084be:	689b      	ldr	r3, [r3, #8]
 80084c0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80084c2:	69fb      	ldr	r3, [r7, #28]
 80084c4:	005b      	lsls	r3, r3, #1
 80084c6:	2203      	movs	r2, #3
 80084c8:	fa02 f303 	lsl.w	r3, r2, r3
 80084cc:	43db      	mvns	r3, r3
 80084ce:	69ba      	ldr	r2, [r7, #24]
 80084d0:	4013      	ands	r3, r2
 80084d2:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80084d4:	683b      	ldr	r3, [r7, #0]
 80084d6:	68da      	ldr	r2, [r3, #12]
 80084d8:	69fb      	ldr	r3, [r7, #28]
 80084da:	005b      	lsls	r3, r3, #1
 80084dc:	fa02 f303 	lsl.w	r3, r2, r3
 80084e0:	69ba      	ldr	r2, [r7, #24]
 80084e2:	4313      	orrs	r3, r2
 80084e4:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80084e6:	687b      	ldr	r3, [r7, #4]
 80084e8:	69ba      	ldr	r2, [r7, #24]
 80084ea:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80084ec:	687b      	ldr	r3, [r7, #4]
 80084ee:	685b      	ldr	r3, [r3, #4]
 80084f0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80084f2:	2201      	movs	r2, #1
 80084f4:	69fb      	ldr	r3, [r7, #28]
 80084f6:	fa02 f303 	lsl.w	r3, r2, r3
 80084fa:	43db      	mvns	r3, r3
 80084fc:	69ba      	ldr	r2, [r7, #24]
 80084fe:	4013      	ands	r3, r2
 8008500:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8008502:	683b      	ldr	r3, [r7, #0]
 8008504:	685b      	ldr	r3, [r3, #4]
 8008506:	091b      	lsrs	r3, r3, #4
 8008508:	f003 0201 	and.w	r2, r3, #1
 800850c:	69fb      	ldr	r3, [r7, #28]
 800850e:	fa02 f303 	lsl.w	r3, r2, r3
 8008512:	69ba      	ldr	r2, [r7, #24]
 8008514:	4313      	orrs	r3, r2
 8008516:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8008518:	687b      	ldr	r3, [r7, #4]
 800851a:	69ba      	ldr	r2, [r7, #24]
 800851c:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800851e:	687b      	ldr	r3, [r7, #4]
 8008520:	68db      	ldr	r3, [r3, #12]
 8008522:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8008524:	69fb      	ldr	r3, [r7, #28]
 8008526:	005b      	lsls	r3, r3, #1
 8008528:	2203      	movs	r2, #3
 800852a:	fa02 f303 	lsl.w	r3, r2, r3
 800852e:	43db      	mvns	r3, r3
 8008530:	69ba      	ldr	r2, [r7, #24]
 8008532:	4013      	ands	r3, r2
 8008534:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8008536:	683b      	ldr	r3, [r7, #0]
 8008538:	689a      	ldr	r2, [r3, #8]
 800853a:	69fb      	ldr	r3, [r7, #28]
 800853c:	005b      	lsls	r3, r3, #1
 800853e:	fa02 f303 	lsl.w	r3, r2, r3
 8008542:	69ba      	ldr	r2, [r7, #24]
 8008544:	4313      	orrs	r3, r2
 8008546:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8008548:	687b      	ldr	r3, [r7, #4]
 800854a:	69ba      	ldr	r2, [r7, #24]
 800854c:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800854e:	683b      	ldr	r3, [r7, #0]
 8008550:	685b      	ldr	r3, [r3, #4]
 8008552:	2b02      	cmp	r3, #2
 8008554:	d003      	beq.n	800855e <HAL_GPIO_Init+0xee>
 8008556:	683b      	ldr	r3, [r7, #0]
 8008558:	685b      	ldr	r3, [r3, #4]
 800855a:	2b12      	cmp	r3, #18
 800855c:	d123      	bne.n	80085a6 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800855e:	69fb      	ldr	r3, [r7, #28]
 8008560:	08da      	lsrs	r2, r3, #3
 8008562:	687b      	ldr	r3, [r7, #4]
 8008564:	3208      	adds	r2, #8
 8008566:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800856a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 800856c:	69fb      	ldr	r3, [r7, #28]
 800856e:	f003 0307 	and.w	r3, r3, #7
 8008572:	009b      	lsls	r3, r3, #2
 8008574:	220f      	movs	r2, #15
 8008576:	fa02 f303 	lsl.w	r3, r2, r3
 800857a:	43db      	mvns	r3, r3
 800857c:	69ba      	ldr	r2, [r7, #24]
 800857e:	4013      	ands	r3, r2
 8008580:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8008582:	683b      	ldr	r3, [r7, #0]
 8008584:	691a      	ldr	r2, [r3, #16]
 8008586:	69fb      	ldr	r3, [r7, #28]
 8008588:	f003 0307 	and.w	r3, r3, #7
 800858c:	009b      	lsls	r3, r3, #2
 800858e:	fa02 f303 	lsl.w	r3, r2, r3
 8008592:	69ba      	ldr	r2, [r7, #24]
 8008594:	4313      	orrs	r3, r2
 8008596:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8008598:	69fb      	ldr	r3, [r7, #28]
 800859a:	08da      	lsrs	r2, r3, #3
 800859c:	687b      	ldr	r3, [r7, #4]
 800859e:	3208      	adds	r2, #8
 80085a0:	69b9      	ldr	r1, [r7, #24]
 80085a2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80085a6:	687b      	ldr	r3, [r7, #4]
 80085a8:	681b      	ldr	r3, [r3, #0]
 80085aa:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80085ac:	69fb      	ldr	r3, [r7, #28]
 80085ae:	005b      	lsls	r3, r3, #1
 80085b0:	2203      	movs	r2, #3
 80085b2:	fa02 f303 	lsl.w	r3, r2, r3
 80085b6:	43db      	mvns	r3, r3
 80085b8:	69ba      	ldr	r2, [r7, #24]
 80085ba:	4013      	ands	r3, r2
 80085bc:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80085be:	683b      	ldr	r3, [r7, #0]
 80085c0:	685b      	ldr	r3, [r3, #4]
 80085c2:	f003 0203 	and.w	r2, r3, #3
 80085c6:	69fb      	ldr	r3, [r7, #28]
 80085c8:	005b      	lsls	r3, r3, #1
 80085ca:	fa02 f303 	lsl.w	r3, r2, r3
 80085ce:	69ba      	ldr	r2, [r7, #24]
 80085d0:	4313      	orrs	r3, r2
 80085d2:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80085d4:	687b      	ldr	r3, [r7, #4]
 80085d6:	69ba      	ldr	r2, [r7, #24]
 80085d8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80085da:	683b      	ldr	r3, [r7, #0]
 80085dc:	685b      	ldr	r3, [r3, #4]
 80085de:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80085e2:	2b00      	cmp	r3, #0
 80085e4:	f000 80e0 	beq.w	80087a8 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80085e8:	4b2f      	ldr	r3, [pc, #188]	; (80086a8 <HAL_GPIO_Init+0x238>)
 80085ea:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80085ee:	4a2e      	ldr	r2, [pc, #184]	; (80086a8 <HAL_GPIO_Init+0x238>)
 80085f0:	f043 0302 	orr.w	r3, r3, #2
 80085f4:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 80085f8:	4b2b      	ldr	r3, [pc, #172]	; (80086a8 <HAL_GPIO_Init+0x238>)
 80085fa:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80085fe:	f003 0302 	and.w	r3, r3, #2
 8008602:	60fb      	str	r3, [r7, #12]
 8008604:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8008606:	4a29      	ldr	r2, [pc, #164]	; (80086ac <HAL_GPIO_Init+0x23c>)
 8008608:	69fb      	ldr	r3, [r7, #28]
 800860a:	089b      	lsrs	r3, r3, #2
 800860c:	3302      	adds	r3, #2
 800860e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008612:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8008614:	69fb      	ldr	r3, [r7, #28]
 8008616:	f003 0303 	and.w	r3, r3, #3
 800861a:	009b      	lsls	r3, r3, #2
 800861c:	220f      	movs	r2, #15
 800861e:	fa02 f303 	lsl.w	r3, r2, r3
 8008622:	43db      	mvns	r3, r3
 8008624:	69ba      	ldr	r2, [r7, #24]
 8008626:	4013      	ands	r3, r2
 8008628:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800862a:	687b      	ldr	r3, [r7, #4]
 800862c:	4a20      	ldr	r2, [pc, #128]	; (80086b0 <HAL_GPIO_Init+0x240>)
 800862e:	4293      	cmp	r3, r2
 8008630:	d052      	beq.n	80086d8 <HAL_GPIO_Init+0x268>
 8008632:	687b      	ldr	r3, [r7, #4]
 8008634:	4a1f      	ldr	r2, [pc, #124]	; (80086b4 <HAL_GPIO_Init+0x244>)
 8008636:	4293      	cmp	r3, r2
 8008638:	d031      	beq.n	800869e <HAL_GPIO_Init+0x22e>
 800863a:	687b      	ldr	r3, [r7, #4]
 800863c:	4a1e      	ldr	r2, [pc, #120]	; (80086b8 <HAL_GPIO_Init+0x248>)
 800863e:	4293      	cmp	r3, r2
 8008640:	d02b      	beq.n	800869a <HAL_GPIO_Init+0x22a>
 8008642:	687b      	ldr	r3, [r7, #4]
 8008644:	4a1d      	ldr	r2, [pc, #116]	; (80086bc <HAL_GPIO_Init+0x24c>)
 8008646:	4293      	cmp	r3, r2
 8008648:	d025      	beq.n	8008696 <HAL_GPIO_Init+0x226>
 800864a:	687b      	ldr	r3, [r7, #4]
 800864c:	4a1c      	ldr	r2, [pc, #112]	; (80086c0 <HAL_GPIO_Init+0x250>)
 800864e:	4293      	cmp	r3, r2
 8008650:	d01f      	beq.n	8008692 <HAL_GPIO_Init+0x222>
 8008652:	687b      	ldr	r3, [r7, #4]
 8008654:	4a1b      	ldr	r2, [pc, #108]	; (80086c4 <HAL_GPIO_Init+0x254>)
 8008656:	4293      	cmp	r3, r2
 8008658:	d019      	beq.n	800868e <HAL_GPIO_Init+0x21e>
 800865a:	687b      	ldr	r3, [r7, #4]
 800865c:	4a1a      	ldr	r2, [pc, #104]	; (80086c8 <HAL_GPIO_Init+0x258>)
 800865e:	4293      	cmp	r3, r2
 8008660:	d013      	beq.n	800868a <HAL_GPIO_Init+0x21a>
 8008662:	687b      	ldr	r3, [r7, #4]
 8008664:	4a19      	ldr	r2, [pc, #100]	; (80086cc <HAL_GPIO_Init+0x25c>)
 8008666:	4293      	cmp	r3, r2
 8008668:	d00d      	beq.n	8008686 <HAL_GPIO_Init+0x216>
 800866a:	687b      	ldr	r3, [r7, #4]
 800866c:	4a18      	ldr	r2, [pc, #96]	; (80086d0 <HAL_GPIO_Init+0x260>)
 800866e:	4293      	cmp	r3, r2
 8008670:	d007      	beq.n	8008682 <HAL_GPIO_Init+0x212>
 8008672:	687b      	ldr	r3, [r7, #4]
 8008674:	4a17      	ldr	r2, [pc, #92]	; (80086d4 <HAL_GPIO_Init+0x264>)
 8008676:	4293      	cmp	r3, r2
 8008678:	d101      	bne.n	800867e <HAL_GPIO_Init+0x20e>
 800867a:	2309      	movs	r3, #9
 800867c:	e02d      	b.n	80086da <HAL_GPIO_Init+0x26a>
 800867e:	230a      	movs	r3, #10
 8008680:	e02b      	b.n	80086da <HAL_GPIO_Init+0x26a>
 8008682:	2308      	movs	r3, #8
 8008684:	e029      	b.n	80086da <HAL_GPIO_Init+0x26a>
 8008686:	2307      	movs	r3, #7
 8008688:	e027      	b.n	80086da <HAL_GPIO_Init+0x26a>
 800868a:	2306      	movs	r3, #6
 800868c:	e025      	b.n	80086da <HAL_GPIO_Init+0x26a>
 800868e:	2305      	movs	r3, #5
 8008690:	e023      	b.n	80086da <HAL_GPIO_Init+0x26a>
 8008692:	2304      	movs	r3, #4
 8008694:	e021      	b.n	80086da <HAL_GPIO_Init+0x26a>
 8008696:	2303      	movs	r3, #3
 8008698:	e01f      	b.n	80086da <HAL_GPIO_Init+0x26a>
 800869a:	2302      	movs	r3, #2
 800869c:	e01d      	b.n	80086da <HAL_GPIO_Init+0x26a>
 800869e:	2301      	movs	r3, #1
 80086a0:	e01b      	b.n	80086da <HAL_GPIO_Init+0x26a>
 80086a2:	bf00      	nop
 80086a4:	58000080 	.word	0x58000080
 80086a8:	58024400 	.word	0x58024400
 80086ac:	58000400 	.word	0x58000400
 80086b0:	58020000 	.word	0x58020000
 80086b4:	58020400 	.word	0x58020400
 80086b8:	58020800 	.word	0x58020800
 80086bc:	58020c00 	.word	0x58020c00
 80086c0:	58021000 	.word	0x58021000
 80086c4:	58021400 	.word	0x58021400
 80086c8:	58021800 	.word	0x58021800
 80086cc:	58021c00 	.word	0x58021c00
 80086d0:	58022000 	.word	0x58022000
 80086d4:	58022400 	.word	0x58022400
 80086d8:	2300      	movs	r3, #0
 80086da:	69fa      	ldr	r2, [r7, #28]
 80086dc:	f002 0203 	and.w	r2, r2, #3
 80086e0:	0092      	lsls	r2, r2, #2
 80086e2:	4093      	lsls	r3, r2
 80086e4:	69ba      	ldr	r2, [r7, #24]
 80086e6:	4313      	orrs	r3, r2
 80086e8:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80086ea:	4938      	ldr	r1, [pc, #224]	; (80087cc <HAL_GPIO_Init+0x35c>)
 80086ec:	69fb      	ldr	r3, [r7, #28]
 80086ee:	089b      	lsrs	r3, r3, #2
 80086f0:	3302      	adds	r3, #2
 80086f2:	69ba      	ldr	r2, [r7, #24]
 80086f4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 80086f8:	697b      	ldr	r3, [r7, #20]
 80086fa:	681b      	ldr	r3, [r3, #0]
 80086fc:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80086fe:	693b      	ldr	r3, [r7, #16]
 8008700:	43db      	mvns	r3, r3
 8008702:	69ba      	ldr	r2, [r7, #24]
 8008704:	4013      	ands	r3, r2
 8008706:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8008708:	683b      	ldr	r3, [r7, #0]
 800870a:	685b      	ldr	r3, [r3, #4]
 800870c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008710:	2b00      	cmp	r3, #0
 8008712:	d003      	beq.n	800871c <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8008714:	69ba      	ldr	r2, [r7, #24]
 8008716:	693b      	ldr	r3, [r7, #16]
 8008718:	4313      	orrs	r3, r2
 800871a:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 800871c:	697b      	ldr	r3, [r7, #20]
 800871e:	69ba      	ldr	r2, [r7, #24]
 8008720:	601a      	str	r2, [r3, #0]

        temp = EXTI_CurrentCPU->EMR1;
 8008722:	697b      	ldr	r3, [r7, #20]
 8008724:	685b      	ldr	r3, [r3, #4]
 8008726:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8008728:	693b      	ldr	r3, [r7, #16]
 800872a:	43db      	mvns	r3, r3
 800872c:	69ba      	ldr	r2, [r7, #24]
 800872e:	4013      	ands	r3, r2
 8008730:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8008732:	683b      	ldr	r3, [r7, #0]
 8008734:	685b      	ldr	r3, [r3, #4]
 8008736:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800873a:	2b00      	cmp	r3, #0
 800873c:	d003      	beq.n	8008746 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800873e:	69ba      	ldr	r2, [r7, #24]
 8008740:	693b      	ldr	r3, [r7, #16]
 8008742:	4313      	orrs	r3, r2
 8008744:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8008746:	697b      	ldr	r3, [r7, #20]
 8008748:	69ba      	ldr	r2, [r7, #24]
 800874a:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800874c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008750:	681b      	ldr	r3, [r3, #0]
 8008752:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8008754:	693b      	ldr	r3, [r7, #16]
 8008756:	43db      	mvns	r3, r3
 8008758:	69ba      	ldr	r2, [r7, #24]
 800875a:	4013      	ands	r3, r2
 800875c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800875e:	683b      	ldr	r3, [r7, #0]
 8008760:	685b      	ldr	r3, [r3, #4]
 8008762:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8008766:	2b00      	cmp	r3, #0
 8008768:	d003      	beq.n	8008772 <HAL_GPIO_Init+0x302>
        {
          temp |= iocurrent;
 800876a:	69ba      	ldr	r2, [r7, #24]
 800876c:	693b      	ldr	r3, [r7, #16]
 800876e:	4313      	orrs	r3, r2
 8008770:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8008772:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8008776:	69bb      	ldr	r3, [r7, #24]
 8008778:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 800877a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800877e:	685b      	ldr	r3, [r3, #4]
 8008780:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8008782:	693b      	ldr	r3, [r7, #16]
 8008784:	43db      	mvns	r3, r3
 8008786:	69ba      	ldr	r2, [r7, #24]
 8008788:	4013      	ands	r3, r2
 800878a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800878c:	683b      	ldr	r3, [r7, #0]
 800878e:	685b      	ldr	r3, [r3, #4]
 8008790:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8008794:	2b00      	cmp	r3, #0
 8008796:	d003      	beq.n	80087a0 <HAL_GPIO_Init+0x330>
        {
          temp |= iocurrent;
 8008798:	69ba      	ldr	r2, [r7, #24]
 800879a:	693b      	ldr	r3, [r7, #16]
 800879c:	4313      	orrs	r3, r2
 800879e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 80087a0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80087a4:	69bb      	ldr	r3, [r7, #24]
 80087a6:	6053      	str	r3, [r2, #4]
      }
    }

    position++;
 80087a8:	69fb      	ldr	r3, [r7, #28]
 80087aa:	3301      	adds	r3, #1
 80087ac:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80087ae:	683b      	ldr	r3, [r7, #0]
 80087b0:	681a      	ldr	r2, [r3, #0]
 80087b2:	69fb      	ldr	r3, [r7, #28]
 80087b4:	fa22 f303 	lsr.w	r3, r2, r3
 80087b8:	2b00      	cmp	r3, #0
 80087ba:	f47f ae63 	bne.w	8008484 <HAL_GPIO_Init+0x14>
  }
}
 80087be:	bf00      	nop
 80087c0:	3724      	adds	r7, #36	; 0x24
 80087c2:	46bd      	mov	sp, r7
 80087c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087c8:	4770      	bx	lr
 80087ca:	bf00      	nop
 80087cc:	58000400 	.word	0x58000400

080087d0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80087d0:	b480      	push	{r7}
 80087d2:	b085      	sub	sp, #20
 80087d4:	af00      	add	r7, sp, #0
 80087d6:	6078      	str	r0, [r7, #4]
 80087d8:	460b      	mov	r3, r1
 80087da:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 80087dc:	687b      	ldr	r3, [r7, #4]
 80087de:	691a      	ldr	r2, [r3, #16]
 80087e0:	887b      	ldrh	r3, [r7, #2]
 80087e2:	4013      	ands	r3, r2
 80087e4:	2b00      	cmp	r3, #0
 80087e6:	d002      	beq.n	80087ee <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80087e8:	2301      	movs	r3, #1
 80087ea:	73fb      	strb	r3, [r7, #15]
 80087ec:	e001      	b.n	80087f2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80087ee:	2300      	movs	r3, #0
 80087f0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80087f2:	7bfb      	ldrb	r3, [r7, #15]
}
 80087f4:	4618      	mov	r0, r3
 80087f6:	3714      	adds	r7, #20
 80087f8:	46bd      	mov	sp, r7
 80087fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087fe:	4770      	bx	lr

08008800 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8008800:	b480      	push	{r7}
 8008802:	b083      	sub	sp, #12
 8008804:	af00      	add	r7, sp, #0
 8008806:	6078      	str	r0, [r7, #4]
 8008808:	460b      	mov	r3, r1
 800880a:	807b      	strh	r3, [r7, #2]
 800880c:	4613      	mov	r3, r2
 800880e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8008810:	787b      	ldrb	r3, [r7, #1]
 8008812:	2b00      	cmp	r3, #0
 8008814:	d003      	beq.n	800881e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8008816:	887a      	ldrh	r2, [r7, #2]
 8008818:	687b      	ldr	r3, [r7, #4]
 800881a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 800881c:	e003      	b.n	8008826 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 800881e:	887b      	ldrh	r3, [r7, #2]
 8008820:	041a      	lsls	r2, r3, #16
 8008822:	687b      	ldr	r3, [r7, #4]
 8008824:	619a      	str	r2, [r3, #24]
}
 8008826:	bf00      	nop
 8008828:	370c      	adds	r7, #12
 800882a:	46bd      	mov	sp, r7
 800882c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008830:	4770      	bx	lr

08008832 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8008832:	b480      	push	{r7}
 8008834:	b083      	sub	sp, #12
 8008836:	af00      	add	r7, sp, #0
 8008838:	6078      	str	r0, [r7, #4]
 800883a:	460b      	mov	r3, r1
 800883c:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) == GPIO_Pin)
 800883e:	687b      	ldr	r3, [r7, #4]
 8008840:	695a      	ldr	r2, [r3, #20]
 8008842:	887b      	ldrh	r3, [r7, #2]
 8008844:	401a      	ands	r2, r3
 8008846:	887b      	ldrh	r3, [r7, #2]
 8008848:	429a      	cmp	r2, r3
 800884a:	d104      	bne.n	8008856 <HAL_GPIO_TogglePin+0x24>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 800884c:	887b      	ldrh	r3, [r7, #2]
 800884e:	041a      	lsls	r2, r3, #16
 8008850:	687b      	ldr	r3, [r7, #4]
 8008852:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = GPIO_Pin;
  }
}
 8008854:	e002      	b.n	800885c <HAL_GPIO_TogglePin+0x2a>
    GPIOx->BSRR = GPIO_Pin;
 8008856:	887a      	ldrh	r2, [r7, #2]
 8008858:	687b      	ldr	r3, [r7, #4]
 800885a:	619a      	str	r2, [r3, #24]
}
 800885c:	bf00      	nop
 800885e:	370c      	adds	r7, #12
 8008860:	46bd      	mov	sp, r7
 8008862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008866:	4770      	bx	lr

08008868 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8008868:	b580      	push	{r7, lr}
 800886a:	b082      	sub	sp, #8
 800886c:	af00      	add	r7, sp, #0
 800886e:	4603      	mov	r3, r0
 8008870:	80fb      	strh	r3, [r7, #6]
    __HAL_GPIO_EXTID2_CLEAR_IT(GPIO_Pin);
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
  }
#else
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00U)
 8008872:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008876:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 800887a:	88fb      	ldrh	r3, [r7, #6]
 800887c:	4013      	ands	r3, r2
 800887e:	2b00      	cmp	r3, #0
 8008880:	d008      	beq.n	8008894 <HAL_GPIO_EXTI_IRQHandler+0x2c>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8008882:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8008886:	88fb      	ldrh	r3, [r7, #6]
 8008888:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800888c:	88fb      	ldrh	r3, [r7, #6]
 800888e:	4618      	mov	r0, r3
 8008890:	f7fb fd5c 	bl	800434c <HAL_GPIO_EXTI_Callback>
  }
#endif
}
 8008894:	bf00      	nop
 8008896:	3708      	adds	r7, #8
 8008898:	46bd      	mov	sp, r7
 800889a:	bd80      	pop	{r7, pc}

0800889c <HAL_I2CEx_EnableFastModePlus>:
  * @note  For all I2C5 pins fast mode plus driving capability can be enabled
  *        only by using I2C_FASTMODEPLUS_I2C5 parameter.
  * @retval None
  */
void HAL_I2CEx_EnableFastModePlus(uint32_t ConfigFastModePlus)
{
 800889c:	b480      	push	{r7}
 800889e:	b085      	sub	sp, #20
 80088a0:	af00      	add	r7, sp, #0
 80088a2:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_I2C_FASTMODEPLUS(ConfigFastModePlus));

  /* Enable SYSCFG clock */
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80088a4:	4b0d      	ldr	r3, [pc, #52]	; (80088dc <HAL_I2CEx_EnableFastModePlus+0x40>)
 80088a6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80088aa:	4a0c      	ldr	r2, [pc, #48]	; (80088dc <HAL_I2CEx_EnableFastModePlus+0x40>)
 80088ac:	f043 0302 	orr.w	r3, r3, #2
 80088b0:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 80088b4:	4b09      	ldr	r3, [pc, #36]	; (80088dc <HAL_I2CEx_EnableFastModePlus+0x40>)
 80088b6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80088ba:	f003 0302 	and.w	r3, r3, #2
 80088be:	60fb      	str	r3, [r7, #12]
 80088c0:	68fb      	ldr	r3, [r7, #12]

  /* Enable fast mode plus driving capability for selected pin */
  SET_BIT(SYSCFG->PMCR, (uint32_t)ConfigFastModePlus);
 80088c2:	4b07      	ldr	r3, [pc, #28]	; (80088e0 <HAL_I2CEx_EnableFastModePlus+0x44>)
 80088c4:	685a      	ldr	r2, [r3, #4]
 80088c6:	4906      	ldr	r1, [pc, #24]	; (80088e0 <HAL_I2CEx_EnableFastModePlus+0x44>)
 80088c8:	687b      	ldr	r3, [r7, #4]
 80088ca:	4313      	orrs	r3, r2
 80088cc:	604b      	str	r3, [r1, #4]
}
 80088ce:	bf00      	nop
 80088d0:	3714      	adds	r7, #20
 80088d2:	46bd      	mov	sp, r7
 80088d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088d8:	4770      	bx	lr
 80088da:	bf00      	nop
 80088dc:	58024400 	.word	0x58024400
 80088e0:	58000400 	.word	0x58000400

080088e4 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80088e4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80088e6:	b08f      	sub	sp, #60	; 0x3c
 80088e8:	af0a      	add	r7, sp, #40	; 0x28
 80088ea:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80088ec:	687b      	ldr	r3, [r7, #4]
 80088ee:	2b00      	cmp	r3, #0
 80088f0:	d101      	bne.n	80088f6 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80088f2:	2301      	movs	r3, #1
 80088f4:	e116      	b.n	8008b24 <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 80088f6:	687b      	ldr	r3, [r7, #4]
 80088f8:	681b      	ldr	r3, [r3, #0]
 80088fa:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80088fc:	687b      	ldr	r3, [r7, #4]
 80088fe:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 8008902:	b2db      	uxtb	r3, r3
 8008904:	2b00      	cmp	r3, #0
 8008906:	d106      	bne.n	8008916 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8008908:	687b      	ldr	r3, [r7, #4]
 800890a:	2200      	movs	r2, #0
 800890c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8008910:	6878      	ldr	r0, [r7, #4]
 8008912:	f010 fe43 	bl	801959c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8008916:	687b      	ldr	r3, [r7, #4]
 8008918:	2203      	movs	r2, #3
 800891a:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 800891e:	68bb      	ldr	r3, [r7, #8]
 8008920:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008922:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008926:	2b00      	cmp	r3, #0
 8008928:	d102      	bne.n	8008930 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 800892a:	687b      	ldr	r3, [r7, #4]
 800892c:	2200      	movs	r2, #0
 800892e:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8008930:	687b      	ldr	r3, [r7, #4]
 8008932:	681b      	ldr	r3, [r3, #0]
 8008934:	4618      	mov	r0, r3
 8008936:	f009 fe48 	bl	80125ca <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800893a:	687b      	ldr	r3, [r7, #4]
 800893c:	681b      	ldr	r3, [r3, #0]
 800893e:	603b      	str	r3, [r7, #0]
 8008940:	687e      	ldr	r6, [r7, #4]
 8008942:	466d      	mov	r5, sp
 8008944:	f106 0410 	add.w	r4, r6, #16
 8008948:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800894a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800894c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800894e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8008950:	e894 0003 	ldmia.w	r4, {r0, r1}
 8008954:	e885 0003 	stmia.w	r5, {r0, r1}
 8008958:	1d33      	adds	r3, r6, #4
 800895a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800895c:	6838      	ldr	r0, [r7, #0]
 800895e:	f009 fd1f 	bl	80123a0 <USB_CoreInit>
 8008962:	4603      	mov	r3, r0
 8008964:	2b00      	cmp	r3, #0
 8008966:	d005      	beq.n	8008974 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8008968:	687b      	ldr	r3, [r7, #4]
 800896a:	2202      	movs	r2, #2
 800896c:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8008970:	2301      	movs	r3, #1
 8008972:	e0d7      	b.n	8008b24 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8008974:	687b      	ldr	r3, [r7, #4]
 8008976:	681b      	ldr	r3, [r3, #0]
 8008978:	2100      	movs	r1, #0
 800897a:	4618      	mov	r0, r3
 800897c:	f009 fe36 	bl	80125ec <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8008980:	2300      	movs	r3, #0
 8008982:	73fb      	strb	r3, [r7, #15]
 8008984:	e04a      	b.n	8008a1c <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8008986:	7bfa      	ldrb	r2, [r7, #15]
 8008988:	6879      	ldr	r1, [r7, #4]
 800898a:	4613      	mov	r3, r2
 800898c:	00db      	lsls	r3, r3, #3
 800898e:	1a9b      	subs	r3, r3, r2
 8008990:	009b      	lsls	r3, r3, #2
 8008992:	440b      	add	r3, r1
 8008994:	333d      	adds	r3, #61	; 0x3d
 8008996:	2201      	movs	r2, #1
 8008998:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800899a:	7bfa      	ldrb	r2, [r7, #15]
 800899c:	6879      	ldr	r1, [r7, #4]
 800899e:	4613      	mov	r3, r2
 80089a0:	00db      	lsls	r3, r3, #3
 80089a2:	1a9b      	subs	r3, r3, r2
 80089a4:	009b      	lsls	r3, r3, #2
 80089a6:	440b      	add	r3, r1
 80089a8:	333c      	adds	r3, #60	; 0x3c
 80089aa:	7bfa      	ldrb	r2, [r7, #15]
 80089ac:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80089ae:	7bfa      	ldrb	r2, [r7, #15]
 80089b0:	7bfb      	ldrb	r3, [r7, #15]
 80089b2:	b298      	uxth	r0, r3
 80089b4:	6879      	ldr	r1, [r7, #4]
 80089b6:	4613      	mov	r3, r2
 80089b8:	00db      	lsls	r3, r3, #3
 80089ba:	1a9b      	subs	r3, r3, r2
 80089bc:	009b      	lsls	r3, r3, #2
 80089be:	440b      	add	r3, r1
 80089c0:	3342      	adds	r3, #66	; 0x42
 80089c2:	4602      	mov	r2, r0
 80089c4:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80089c6:	7bfa      	ldrb	r2, [r7, #15]
 80089c8:	6879      	ldr	r1, [r7, #4]
 80089ca:	4613      	mov	r3, r2
 80089cc:	00db      	lsls	r3, r3, #3
 80089ce:	1a9b      	subs	r3, r3, r2
 80089d0:	009b      	lsls	r3, r3, #2
 80089d2:	440b      	add	r3, r1
 80089d4:	333f      	adds	r3, #63	; 0x3f
 80089d6:	2200      	movs	r2, #0
 80089d8:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80089da:	7bfa      	ldrb	r2, [r7, #15]
 80089dc:	6879      	ldr	r1, [r7, #4]
 80089de:	4613      	mov	r3, r2
 80089e0:	00db      	lsls	r3, r3, #3
 80089e2:	1a9b      	subs	r3, r3, r2
 80089e4:	009b      	lsls	r3, r3, #2
 80089e6:	440b      	add	r3, r1
 80089e8:	3344      	adds	r3, #68	; 0x44
 80089ea:	2200      	movs	r2, #0
 80089ec:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80089ee:	7bfa      	ldrb	r2, [r7, #15]
 80089f0:	6879      	ldr	r1, [r7, #4]
 80089f2:	4613      	mov	r3, r2
 80089f4:	00db      	lsls	r3, r3, #3
 80089f6:	1a9b      	subs	r3, r3, r2
 80089f8:	009b      	lsls	r3, r3, #2
 80089fa:	440b      	add	r3, r1
 80089fc:	3348      	adds	r3, #72	; 0x48
 80089fe:	2200      	movs	r2, #0
 8008a00:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8008a02:	7bfa      	ldrb	r2, [r7, #15]
 8008a04:	6879      	ldr	r1, [r7, #4]
 8008a06:	4613      	mov	r3, r2
 8008a08:	00db      	lsls	r3, r3, #3
 8008a0a:	1a9b      	subs	r3, r3, r2
 8008a0c:	009b      	lsls	r3, r3, #2
 8008a0e:	440b      	add	r3, r1
 8008a10:	3350      	adds	r3, #80	; 0x50
 8008a12:	2200      	movs	r2, #0
 8008a14:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8008a16:	7bfb      	ldrb	r3, [r7, #15]
 8008a18:	3301      	adds	r3, #1
 8008a1a:	73fb      	strb	r3, [r7, #15]
 8008a1c:	7bfa      	ldrb	r2, [r7, #15]
 8008a1e:	687b      	ldr	r3, [r7, #4]
 8008a20:	685b      	ldr	r3, [r3, #4]
 8008a22:	429a      	cmp	r2, r3
 8008a24:	d3af      	bcc.n	8008986 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8008a26:	2300      	movs	r3, #0
 8008a28:	73fb      	strb	r3, [r7, #15]
 8008a2a:	e044      	b.n	8008ab6 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8008a2c:	7bfa      	ldrb	r2, [r7, #15]
 8008a2e:	6879      	ldr	r1, [r7, #4]
 8008a30:	4613      	mov	r3, r2
 8008a32:	00db      	lsls	r3, r3, #3
 8008a34:	1a9b      	subs	r3, r3, r2
 8008a36:	009b      	lsls	r3, r3, #2
 8008a38:	440b      	add	r3, r1
 8008a3a:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 8008a3e:	2200      	movs	r2, #0
 8008a40:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8008a42:	7bfa      	ldrb	r2, [r7, #15]
 8008a44:	6879      	ldr	r1, [r7, #4]
 8008a46:	4613      	mov	r3, r2
 8008a48:	00db      	lsls	r3, r3, #3
 8008a4a:	1a9b      	subs	r3, r3, r2
 8008a4c:	009b      	lsls	r3, r3, #2
 8008a4e:	440b      	add	r3, r1
 8008a50:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 8008a54:	7bfa      	ldrb	r2, [r7, #15]
 8008a56:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8008a58:	7bfa      	ldrb	r2, [r7, #15]
 8008a5a:	6879      	ldr	r1, [r7, #4]
 8008a5c:	4613      	mov	r3, r2
 8008a5e:	00db      	lsls	r3, r3, #3
 8008a60:	1a9b      	subs	r3, r3, r2
 8008a62:	009b      	lsls	r3, r3, #2
 8008a64:	440b      	add	r3, r1
 8008a66:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8008a6a:	2200      	movs	r2, #0
 8008a6c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8008a6e:	7bfa      	ldrb	r2, [r7, #15]
 8008a70:	6879      	ldr	r1, [r7, #4]
 8008a72:	4613      	mov	r3, r2
 8008a74:	00db      	lsls	r3, r3, #3
 8008a76:	1a9b      	subs	r3, r3, r2
 8008a78:	009b      	lsls	r3, r3, #2
 8008a7a:	440b      	add	r3, r1
 8008a7c:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8008a80:	2200      	movs	r2, #0
 8008a82:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8008a84:	7bfa      	ldrb	r2, [r7, #15]
 8008a86:	6879      	ldr	r1, [r7, #4]
 8008a88:	4613      	mov	r3, r2
 8008a8a:	00db      	lsls	r3, r3, #3
 8008a8c:	1a9b      	subs	r3, r3, r2
 8008a8e:	009b      	lsls	r3, r3, #2
 8008a90:	440b      	add	r3, r1
 8008a92:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8008a96:	2200      	movs	r2, #0
 8008a98:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8008a9a:	7bfa      	ldrb	r2, [r7, #15]
 8008a9c:	6879      	ldr	r1, [r7, #4]
 8008a9e:	4613      	mov	r3, r2
 8008aa0:	00db      	lsls	r3, r3, #3
 8008aa2:	1a9b      	subs	r3, r3, r2
 8008aa4:	009b      	lsls	r3, r3, #2
 8008aa6:	440b      	add	r3, r1
 8008aa8:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8008aac:	2200      	movs	r2, #0
 8008aae:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8008ab0:	7bfb      	ldrb	r3, [r7, #15]
 8008ab2:	3301      	adds	r3, #1
 8008ab4:	73fb      	strb	r3, [r7, #15]
 8008ab6:	7bfa      	ldrb	r2, [r7, #15]
 8008ab8:	687b      	ldr	r3, [r7, #4]
 8008aba:	685b      	ldr	r3, [r3, #4]
 8008abc:	429a      	cmp	r2, r3
 8008abe:	d3b5      	bcc.n	8008a2c <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8008ac0:	687b      	ldr	r3, [r7, #4]
 8008ac2:	681b      	ldr	r3, [r3, #0]
 8008ac4:	603b      	str	r3, [r7, #0]
 8008ac6:	687e      	ldr	r6, [r7, #4]
 8008ac8:	466d      	mov	r5, sp
 8008aca:	f106 0410 	add.w	r4, r6, #16
 8008ace:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8008ad0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8008ad2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8008ad4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8008ad6:	e894 0003 	ldmia.w	r4, {r0, r1}
 8008ada:	e885 0003 	stmia.w	r5, {r0, r1}
 8008ade:	1d33      	adds	r3, r6, #4
 8008ae0:	cb0e      	ldmia	r3, {r1, r2, r3}
 8008ae2:	6838      	ldr	r0, [r7, #0]
 8008ae4:	f009 fdac 	bl	8012640 <USB_DevInit>
 8008ae8:	4603      	mov	r3, r0
 8008aea:	2b00      	cmp	r3, #0
 8008aec:	d005      	beq.n	8008afa <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8008aee:	687b      	ldr	r3, [r7, #4]
 8008af0:	2202      	movs	r2, #2
 8008af2:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8008af6:	2301      	movs	r3, #1
 8008af8:	e014      	b.n	8008b24 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8008afa:	687b      	ldr	r3, [r7, #4]
 8008afc:	2200      	movs	r2, #0
 8008afe:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8008b02:	687b      	ldr	r3, [r7, #4]
 8008b04:	2201      	movs	r2, #1
 8008b06:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8008b0a:	687b      	ldr	r3, [r7, #4]
 8008b0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008b0e:	2b01      	cmp	r3, #1
 8008b10:	d102      	bne.n	8008b18 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8008b12:	6878      	ldr	r0, [r7, #4]
 8008b14:	f001 f8be 	bl	8009c94 <HAL_PCDEx_ActivateLPM>
  }
  
  (void)USB_DevDisconnect(hpcd->Instance);
 8008b18:	687b      	ldr	r3, [r7, #4]
 8008b1a:	681b      	ldr	r3, [r3, #0]
 8008b1c:	4618      	mov	r0, r3
 8008b1e:	f00a fdeb 	bl	80136f8 <USB_DevDisconnect>

  return HAL_OK;
 8008b22:	2300      	movs	r3, #0
}
 8008b24:	4618      	mov	r0, r3
 8008b26:	3714      	adds	r7, #20
 8008b28:	46bd      	mov	sp, r7
 8008b2a:	bdf0      	pop	{r4, r5, r6, r7, pc}

08008b2c <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8008b2c:	b580      	push	{r7, lr}
 8008b2e:	b084      	sub	sp, #16
 8008b30:	af00      	add	r7, sp, #0
 8008b32:	6078      	str	r0, [r7, #4]
#if defined (USB_OTG_FS) || defined (USB_OTG_HS)
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8008b34:	687b      	ldr	r3, [r7, #4]
 8008b36:	681b      	ldr	r3, [r3, #0]
 8008b38:	60fb      	str	r3, [r7, #12]
#endif /* defined (USB_OTG_FS) || defined (USB_OTG_HS) */

  __HAL_LOCK(hpcd);
 8008b3a:	687b      	ldr	r3, [r7, #4]
 8008b3c:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8008b40:	2b01      	cmp	r3, #1
 8008b42:	d101      	bne.n	8008b48 <HAL_PCD_Start+0x1c>
 8008b44:	2302      	movs	r3, #2
 8008b46:	e020      	b.n	8008b8a <HAL_PCD_Start+0x5e>
 8008b48:	687b      	ldr	r3, [r7, #4]
 8008b4a:	2201      	movs	r2, #1
 8008b4c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
#if defined (USB_OTG_FS) || defined (USB_OTG_HS)
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8008b50:	687b      	ldr	r3, [r7, #4]
 8008b52:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008b54:	2b01      	cmp	r3, #1
 8008b56:	d109      	bne.n	8008b6c <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 8008b58:	687b      	ldr	r3, [r7, #4]
 8008b5a:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8008b5c:	2b01      	cmp	r3, #1
 8008b5e:	d005      	beq.n	8008b6c <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8008b60:	68fb      	ldr	r3, [r7, #12]
 8008b62:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008b64:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8008b68:	68fb      	ldr	r3, [r7, #12]
 8008b6a:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined (USB_OTG_FS) || defined (USB_OTG_HS) */
  (void)USB_DevConnect(hpcd->Instance);
 8008b6c:	687b      	ldr	r3, [r7, #4]
 8008b6e:	681b      	ldr	r3, [r3, #0]
 8008b70:	4618      	mov	r0, r3
 8008b72:	f00a fda9 	bl	80136c8 <USB_DevConnect>
  __HAL_PCD_ENABLE(hpcd);
 8008b76:	687b      	ldr	r3, [r7, #4]
 8008b78:	681b      	ldr	r3, [r3, #0]
 8008b7a:	4618      	mov	r0, r3
 8008b7c:	f009 fd14 	bl	80125a8 <USB_EnableGlobalInt>
  __HAL_UNLOCK(hpcd);
 8008b80:	687b      	ldr	r3, [r7, #4]
 8008b82:	2200      	movs	r2, #0
 8008b84:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 8008b88:	2300      	movs	r3, #0
}
 8008b8a:	4618      	mov	r0, r3
 8008b8c:	3710      	adds	r7, #16
 8008b8e:	46bd      	mov	sp, r7
 8008b90:	bd80      	pop	{r7, pc}

08008b92 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8008b92:	b590      	push	{r4, r7, lr}
 8008b94:	b08d      	sub	sp, #52	; 0x34
 8008b96:	af00      	add	r7, sp, #0
 8008b98:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8008b9a:	687b      	ldr	r3, [r7, #4]
 8008b9c:	681b      	ldr	r3, [r3, #0]
 8008b9e:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008ba0:	6a3b      	ldr	r3, [r7, #32]
 8008ba2:	61fb      	str	r3, [r7, #28]
  uint32_t i, ep_intr, epint, epnum;
  uint32_t fifoemptymsk, temp;
  USB_OTG_EPTypeDef *ep;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8008ba4:	687b      	ldr	r3, [r7, #4]
 8008ba6:	681b      	ldr	r3, [r3, #0]
 8008ba8:	4618      	mov	r0, r3
 8008baa:	f00a fe50 	bl	801384e <USB_GetMode>
 8008bae:	4603      	mov	r3, r0
 8008bb0:	2b00      	cmp	r3, #0
 8008bb2:	f040 83ca 	bne.w	800934a <HAL_PCD_IRQHandler+0x7b8>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8008bb6:	687b      	ldr	r3, [r7, #4]
 8008bb8:	681b      	ldr	r3, [r3, #0]
 8008bba:	4618      	mov	r0, r3
 8008bbc:	f00a fdb4 	bl	8013728 <USB_ReadInterrupts>
 8008bc0:	4603      	mov	r3, r0
 8008bc2:	2b00      	cmp	r3, #0
 8008bc4:	f000 83c0 	beq.w	8009348 <HAL_PCD_IRQHandler+0x7b6>
    {
      return;
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8008bc8:	687b      	ldr	r3, [r7, #4]
 8008bca:	681b      	ldr	r3, [r3, #0]
 8008bcc:	4618      	mov	r0, r3
 8008bce:	f00a fdab 	bl	8013728 <USB_ReadInterrupts>
 8008bd2:	4603      	mov	r3, r0
 8008bd4:	f003 0302 	and.w	r3, r3, #2
 8008bd8:	2b02      	cmp	r3, #2
 8008bda:	d107      	bne.n	8008bec <HAL_PCD_IRQHandler+0x5a>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8008bdc:	687b      	ldr	r3, [r7, #4]
 8008bde:	681b      	ldr	r3, [r3, #0]
 8008be0:	695a      	ldr	r2, [r3, #20]
 8008be2:	687b      	ldr	r3, [r7, #4]
 8008be4:	681b      	ldr	r3, [r3, #0]
 8008be6:	f002 0202 	and.w	r2, r2, #2
 8008bea:	615a      	str	r2, [r3, #20]
    }

     /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8008bec:	687b      	ldr	r3, [r7, #4]
 8008bee:	681b      	ldr	r3, [r3, #0]
 8008bf0:	4618      	mov	r0, r3
 8008bf2:	f00a fd99 	bl	8013728 <USB_ReadInterrupts>
 8008bf6:	4603      	mov	r3, r0
 8008bf8:	f003 0310 	and.w	r3, r3, #16
 8008bfc:	2b10      	cmp	r3, #16
 8008bfe:	d161      	bne.n	8008cc4 <HAL_PCD_IRQHandler+0x132>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8008c00:	687b      	ldr	r3, [r7, #4]
 8008c02:	681b      	ldr	r3, [r3, #0]
 8008c04:	699a      	ldr	r2, [r3, #24]
 8008c06:	687b      	ldr	r3, [r7, #4]
 8008c08:	681b      	ldr	r3, [r3, #0]
 8008c0a:	f022 0210 	bic.w	r2, r2, #16
 8008c0e:	619a      	str	r2, [r3, #24]

      temp = USBx->GRXSTSP;
 8008c10:	6a3b      	ldr	r3, [r7, #32]
 8008c12:	6a1b      	ldr	r3, [r3, #32]
 8008c14:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 8008c16:	69bb      	ldr	r3, [r7, #24]
 8008c18:	f003 020f 	and.w	r2, r3, #15
 8008c1c:	4613      	mov	r3, r2
 8008c1e:	00db      	lsls	r3, r3, #3
 8008c20:	1a9b      	subs	r3, r3, r2
 8008c22:	009b      	lsls	r3, r3, #2
 8008c24:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8008c28:	687a      	ldr	r2, [r7, #4]
 8008c2a:	4413      	add	r3, r2
 8008c2c:	3304      	adds	r3, #4
 8008c2e:	617b      	str	r3, [r7, #20]

      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8008c30:	69bb      	ldr	r3, [r7, #24]
 8008c32:	0c5b      	lsrs	r3, r3, #17
 8008c34:	f003 030f 	and.w	r3, r3, #15
 8008c38:	2b02      	cmp	r3, #2
 8008c3a:	d124      	bne.n	8008c86 <HAL_PCD_IRQHandler+0xf4>
      {
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 8008c3c:	69ba      	ldr	r2, [r7, #24]
 8008c3e:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8008c42:	4013      	ands	r3, r2
 8008c44:	2b00      	cmp	r3, #0
 8008c46:	d035      	beq.n	8008cb4 <HAL_PCD_IRQHandler+0x122>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8008c48:	697b      	ldr	r3, [r7, #20]
 8008c4a:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));
 8008c4c:	69bb      	ldr	r3, [r7, #24]
 8008c4e:	091b      	lsrs	r3, r3, #4
 8008c50:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8008c52:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8008c56:	b29b      	uxth	r3, r3
 8008c58:	461a      	mov	r2, r3
 8008c5a:	6a38      	ldr	r0, [r7, #32]
 8008c5c:	f00a fc11 	bl	8013482 <USB_ReadPacket>

          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8008c60:	697b      	ldr	r3, [r7, #20]
 8008c62:	68da      	ldr	r2, [r3, #12]
 8008c64:	69bb      	ldr	r3, [r7, #24]
 8008c66:	091b      	lsrs	r3, r3, #4
 8008c68:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8008c6c:	441a      	add	r2, r3
 8008c6e:	697b      	ldr	r3, [r7, #20]
 8008c70:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8008c72:	697b      	ldr	r3, [r7, #20]
 8008c74:	699a      	ldr	r2, [r3, #24]
 8008c76:	69bb      	ldr	r3, [r7, #24]
 8008c78:	091b      	lsrs	r3, r3, #4
 8008c7a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8008c7e:	441a      	add	r2, r3
 8008c80:	697b      	ldr	r3, [r7, #20]
 8008c82:	619a      	str	r2, [r3, #24]
 8008c84:	e016      	b.n	8008cb4 <HAL_PCD_IRQHandler+0x122>
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 8008c86:	69bb      	ldr	r3, [r7, #24]
 8008c88:	0c5b      	lsrs	r3, r3, #17
 8008c8a:	f003 030f 	and.w	r3, r3, #15
 8008c8e:	2b06      	cmp	r3, #6
 8008c90:	d110      	bne.n	8008cb4 <HAL_PCD_IRQHandler+0x122>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8008c92:	687b      	ldr	r3, [r7, #4]
 8008c94:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8008c98:	2208      	movs	r2, #8
 8008c9a:	4619      	mov	r1, r3
 8008c9c:	6a38      	ldr	r0, [r7, #32]
 8008c9e:	f00a fbf0 	bl	8013482 <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8008ca2:	697b      	ldr	r3, [r7, #20]
 8008ca4:	699a      	ldr	r2, [r3, #24]
 8008ca6:	69bb      	ldr	r3, [r7, #24]
 8008ca8:	091b      	lsrs	r3, r3, #4
 8008caa:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8008cae:	441a      	add	r2, r3
 8008cb0:	697b      	ldr	r3, [r7, #20]
 8008cb2:	619a      	str	r2, [r3, #24]
      }
      else
      {
        /* ... */
      }
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8008cb4:	687b      	ldr	r3, [r7, #4]
 8008cb6:	681b      	ldr	r3, [r3, #0]
 8008cb8:	699a      	ldr	r2, [r3, #24]
 8008cba:	687b      	ldr	r3, [r7, #4]
 8008cbc:	681b      	ldr	r3, [r3, #0]
 8008cbe:	f042 0210 	orr.w	r2, r2, #16
 8008cc2:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8008cc4:	687b      	ldr	r3, [r7, #4]
 8008cc6:	681b      	ldr	r3, [r3, #0]
 8008cc8:	4618      	mov	r0, r3
 8008cca:	f00a fd2d 	bl	8013728 <USB_ReadInterrupts>
 8008cce:	4603      	mov	r3, r0
 8008cd0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8008cd4:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8008cd8:	d16e      	bne.n	8008db8 <HAL_PCD_IRQHandler+0x226>
    {
      epnum = 0U;
 8008cda:	2300      	movs	r3, #0
 8008cdc:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8008cde:	687b      	ldr	r3, [r7, #4]
 8008ce0:	681b      	ldr	r3, [r3, #0]
 8008ce2:	4618      	mov	r0, r3
 8008ce4:	f00a fd33 	bl	801374e <USB_ReadDevAllOutEpInterrupt>
 8008ce8:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8008cea:	e062      	b.n	8008db2 <HAL_PCD_IRQHandler+0x220>
      {
        if ((ep_intr & 0x1U) != 0U)
 8008cec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008cee:	f003 0301 	and.w	r3, r3, #1
 8008cf2:	2b00      	cmp	r3, #0
 8008cf4:	d057      	beq.n	8008da6 <HAL_PCD_IRQHandler+0x214>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8008cf6:	687b      	ldr	r3, [r7, #4]
 8008cf8:	681b      	ldr	r3, [r3, #0]
 8008cfa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008cfc:	b2d2      	uxtb	r2, r2
 8008cfe:	4611      	mov	r1, r2
 8008d00:	4618      	mov	r0, r3
 8008d02:	f00a fd58 	bl	80137b6 <USB_ReadDevOutEPInterrupt>
 8008d06:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8008d08:	693b      	ldr	r3, [r7, #16]
 8008d0a:	f003 0301 	and.w	r3, r3, #1
 8008d0e:	2b00      	cmp	r3, #0
 8008d10:	d00c      	beq.n	8008d2c <HAL_PCD_IRQHandler+0x19a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8008d12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d14:	015a      	lsls	r2, r3, #5
 8008d16:	69fb      	ldr	r3, [r7, #28]
 8008d18:	4413      	add	r3, r2
 8008d1a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008d1e:	461a      	mov	r2, r3
 8008d20:	2301      	movs	r3, #1
 8008d22:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8008d24:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8008d26:	6878      	ldr	r0, [r7, #4]
 8008d28:	f000 fe0a 	bl	8009940 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8008d2c:	693b      	ldr	r3, [r7, #16]
 8008d2e:	f003 0308 	and.w	r3, r3, #8
 8008d32:	2b00      	cmp	r3, #0
 8008d34:	d00c      	beq.n	8008d50 <HAL_PCD_IRQHandler+0x1be>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8008d36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d38:	015a      	lsls	r2, r3, #5
 8008d3a:	69fb      	ldr	r3, [r7, #28]
 8008d3c:	4413      	add	r3, r2
 8008d3e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008d42:	461a      	mov	r2, r3
 8008d44:	2308      	movs	r3, #8
 8008d46:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8008d48:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8008d4a:	6878      	ldr	r0, [r7, #4]
 8008d4c:	f000 ff04 	bl	8009b58 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8008d50:	693b      	ldr	r3, [r7, #16]
 8008d52:	f003 0310 	and.w	r3, r3, #16
 8008d56:	2b00      	cmp	r3, #0
 8008d58:	d008      	beq.n	8008d6c <HAL_PCD_IRQHandler+0x1da>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8008d5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d5c:	015a      	lsls	r2, r3, #5
 8008d5e:	69fb      	ldr	r3, [r7, #28]
 8008d60:	4413      	add	r3, r2
 8008d62:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008d66:	461a      	mov	r2, r3
 8008d68:	2310      	movs	r3, #16
 8008d6a:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8008d6c:	693b      	ldr	r3, [r7, #16]
 8008d6e:	f003 0320 	and.w	r3, r3, #32
 8008d72:	2b00      	cmp	r3, #0
 8008d74:	d008      	beq.n	8008d88 <HAL_PCD_IRQHandler+0x1f6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8008d76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d78:	015a      	lsls	r2, r3, #5
 8008d7a:	69fb      	ldr	r3, [r7, #28]
 8008d7c:	4413      	add	r3, r2
 8008d7e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008d82:	461a      	mov	r2, r3
 8008d84:	2320      	movs	r3, #32
 8008d86:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8008d88:	693b      	ldr	r3, [r7, #16]
 8008d8a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8008d8e:	2b00      	cmp	r3, #0
 8008d90:	d009      	beq.n	8008da6 <HAL_PCD_IRQHandler+0x214>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8008d92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d94:	015a      	lsls	r2, r3, #5
 8008d96:	69fb      	ldr	r3, [r7, #28]
 8008d98:	4413      	add	r3, r2
 8008d9a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008d9e:	461a      	mov	r2, r3
 8008da0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8008da4:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8008da6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008da8:	3301      	adds	r3, #1
 8008daa:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8008dac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008dae:	085b      	lsrs	r3, r3, #1
 8008db0:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8008db2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008db4:	2b00      	cmp	r3, #0
 8008db6:	d199      	bne.n	8008cec <HAL_PCD_IRQHandler+0x15a>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8008db8:	687b      	ldr	r3, [r7, #4]
 8008dba:	681b      	ldr	r3, [r3, #0]
 8008dbc:	4618      	mov	r0, r3
 8008dbe:	f00a fcb3 	bl	8013728 <USB_ReadInterrupts>
 8008dc2:	4603      	mov	r3, r0
 8008dc4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8008dc8:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8008dcc:	f040 80c0 	bne.w	8008f50 <HAL_PCD_IRQHandler+0x3be>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8008dd0:	687b      	ldr	r3, [r7, #4]
 8008dd2:	681b      	ldr	r3, [r3, #0]
 8008dd4:	4618      	mov	r0, r3
 8008dd6:	f00a fcd4 	bl	8013782 <USB_ReadDevAllInEpInterrupt>
 8008dda:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8008ddc:	2300      	movs	r3, #0
 8008dde:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8008de0:	e0b2      	b.n	8008f48 <HAL_PCD_IRQHandler+0x3b6>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8008de2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008de4:	f003 0301 	and.w	r3, r3, #1
 8008de8:	2b00      	cmp	r3, #0
 8008dea:	f000 80a7 	beq.w	8008f3c <HAL_PCD_IRQHandler+0x3aa>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8008dee:	687b      	ldr	r3, [r7, #4]
 8008df0:	681b      	ldr	r3, [r3, #0]
 8008df2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008df4:	b2d2      	uxtb	r2, r2
 8008df6:	4611      	mov	r1, r2
 8008df8:	4618      	mov	r0, r3
 8008dfa:	f00a fcfa 	bl	80137f2 <USB_ReadDevInEPInterrupt>
 8008dfe:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8008e00:	693b      	ldr	r3, [r7, #16]
 8008e02:	f003 0301 	and.w	r3, r3, #1
 8008e06:	2b00      	cmp	r3, #0
 8008e08:	d057      	beq.n	8008eba <HAL_PCD_IRQHandler+0x328>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8008e0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e0c:	f003 030f 	and.w	r3, r3, #15
 8008e10:	2201      	movs	r2, #1
 8008e12:	fa02 f303 	lsl.w	r3, r2, r3
 8008e16:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8008e18:	69fb      	ldr	r3, [r7, #28]
 8008e1a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008e1e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008e20:	68fb      	ldr	r3, [r7, #12]
 8008e22:	43db      	mvns	r3, r3
 8008e24:	69f9      	ldr	r1, [r7, #28]
 8008e26:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008e2a:	4013      	ands	r3, r2
 8008e2c:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8008e2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e30:	015a      	lsls	r2, r3, #5
 8008e32:	69fb      	ldr	r3, [r7, #28]
 8008e34:	4413      	add	r3, r2
 8008e36:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008e3a:	461a      	mov	r2, r3
 8008e3c:	2301      	movs	r3, #1
 8008e3e:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8008e40:	687b      	ldr	r3, [r7, #4]
 8008e42:	691b      	ldr	r3, [r3, #16]
 8008e44:	2b01      	cmp	r3, #1
 8008e46:	d132      	bne.n	8008eae <HAL_PCD_IRQHandler+0x31c>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8008e48:	6879      	ldr	r1, [r7, #4]
 8008e4a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008e4c:	4613      	mov	r3, r2
 8008e4e:	00db      	lsls	r3, r3, #3
 8008e50:	1a9b      	subs	r3, r3, r2
 8008e52:	009b      	lsls	r3, r3, #2
 8008e54:	440b      	add	r3, r1
 8008e56:	3348      	adds	r3, #72	; 0x48
 8008e58:	6819      	ldr	r1, [r3, #0]
 8008e5a:	6878      	ldr	r0, [r7, #4]
 8008e5c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008e5e:	4613      	mov	r3, r2
 8008e60:	00db      	lsls	r3, r3, #3
 8008e62:	1a9b      	subs	r3, r3, r2
 8008e64:	009b      	lsls	r3, r3, #2
 8008e66:	4403      	add	r3, r0
 8008e68:	3344      	adds	r3, #68	; 0x44
 8008e6a:	681b      	ldr	r3, [r3, #0]
 8008e6c:	4419      	add	r1, r3
 8008e6e:	6878      	ldr	r0, [r7, #4]
 8008e70:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008e72:	4613      	mov	r3, r2
 8008e74:	00db      	lsls	r3, r3, #3
 8008e76:	1a9b      	subs	r3, r3, r2
 8008e78:	009b      	lsls	r3, r3, #2
 8008e7a:	4403      	add	r3, r0
 8008e7c:	3348      	adds	r3, #72	; 0x48
 8008e7e:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8008e80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e82:	2b00      	cmp	r3, #0
 8008e84:	d113      	bne.n	8008eae <HAL_PCD_IRQHandler+0x31c>
 8008e86:	6879      	ldr	r1, [r7, #4]
 8008e88:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008e8a:	4613      	mov	r3, r2
 8008e8c:	00db      	lsls	r3, r3, #3
 8008e8e:	1a9b      	subs	r3, r3, r2
 8008e90:	009b      	lsls	r3, r3, #2
 8008e92:	440b      	add	r3, r1
 8008e94:	3350      	adds	r3, #80	; 0x50
 8008e96:	681b      	ldr	r3, [r3, #0]
 8008e98:	2b00      	cmp	r3, #0
 8008e9a:	d108      	bne.n	8008eae <HAL_PCD_IRQHandler+0x31c>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8008e9c:	687b      	ldr	r3, [r7, #4]
 8008e9e:	6818      	ldr	r0, [r3, #0]
 8008ea0:	687b      	ldr	r3, [r7, #4]
 8008ea2:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8008ea6:	461a      	mov	r2, r3
 8008ea8:	2101      	movs	r1, #1
 8008eaa:	f00a fd03 	bl	80138b4 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8008eae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008eb0:	b2db      	uxtb	r3, r3
 8008eb2:	4619      	mov	r1, r3
 8008eb4:	6878      	ldr	r0, [r7, #4]
 8008eb6:	f010 fbf0 	bl	801969a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8008eba:	693b      	ldr	r3, [r7, #16]
 8008ebc:	f003 0308 	and.w	r3, r3, #8
 8008ec0:	2b00      	cmp	r3, #0
 8008ec2:	d008      	beq.n	8008ed6 <HAL_PCD_IRQHandler+0x344>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8008ec4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ec6:	015a      	lsls	r2, r3, #5
 8008ec8:	69fb      	ldr	r3, [r7, #28]
 8008eca:	4413      	add	r3, r2
 8008ecc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008ed0:	461a      	mov	r2, r3
 8008ed2:	2308      	movs	r3, #8
 8008ed4:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8008ed6:	693b      	ldr	r3, [r7, #16]
 8008ed8:	f003 0310 	and.w	r3, r3, #16
 8008edc:	2b00      	cmp	r3, #0
 8008ede:	d008      	beq.n	8008ef2 <HAL_PCD_IRQHandler+0x360>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8008ee0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ee2:	015a      	lsls	r2, r3, #5
 8008ee4:	69fb      	ldr	r3, [r7, #28]
 8008ee6:	4413      	add	r3, r2
 8008ee8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008eec:	461a      	mov	r2, r3
 8008eee:	2310      	movs	r3, #16
 8008ef0:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8008ef2:	693b      	ldr	r3, [r7, #16]
 8008ef4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008ef8:	2b00      	cmp	r3, #0
 8008efa:	d008      	beq.n	8008f0e <HAL_PCD_IRQHandler+0x37c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8008efc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008efe:	015a      	lsls	r2, r3, #5
 8008f00:	69fb      	ldr	r3, [r7, #28]
 8008f02:	4413      	add	r3, r2
 8008f04:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008f08:	461a      	mov	r2, r3
 8008f0a:	2340      	movs	r3, #64	; 0x40
 8008f0c:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8008f0e:	693b      	ldr	r3, [r7, #16]
 8008f10:	f003 0302 	and.w	r3, r3, #2
 8008f14:	2b00      	cmp	r3, #0
 8008f16:	d008      	beq.n	8008f2a <HAL_PCD_IRQHandler+0x398>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8008f18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f1a:	015a      	lsls	r2, r3, #5
 8008f1c:	69fb      	ldr	r3, [r7, #28]
 8008f1e:	4413      	add	r3, r2
 8008f20:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008f24:	461a      	mov	r2, r3
 8008f26:	2302      	movs	r3, #2
 8008f28:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8008f2a:	693b      	ldr	r3, [r7, #16]
 8008f2c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008f30:	2b00      	cmp	r3, #0
 8008f32:	d003      	beq.n	8008f3c <HAL_PCD_IRQHandler+0x3aa>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8008f34:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8008f36:	6878      	ldr	r0, [r7, #4]
 8008f38:	f000 fc75 	bl	8009826 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8008f3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f3e:	3301      	adds	r3, #1
 8008f40:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8008f42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008f44:	085b      	lsrs	r3, r3, #1
 8008f46:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8008f48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008f4a:	2b00      	cmp	r3, #0
 8008f4c:	f47f af49 	bne.w	8008de2 <HAL_PCD_IRQHandler+0x250>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8008f50:	687b      	ldr	r3, [r7, #4]
 8008f52:	681b      	ldr	r3, [r3, #0]
 8008f54:	4618      	mov	r0, r3
 8008f56:	f00a fbe7 	bl	8013728 <USB_ReadInterrupts>
 8008f5a:	4603      	mov	r3, r0
 8008f5c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008f60:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008f64:	d122      	bne.n	8008fac <HAL_PCD_IRQHandler+0x41a>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8008f66:	69fb      	ldr	r3, [r7, #28]
 8008f68:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008f6c:	685b      	ldr	r3, [r3, #4]
 8008f6e:	69fa      	ldr	r2, [r7, #28]
 8008f70:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008f74:	f023 0301 	bic.w	r3, r3, #1
 8008f78:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8008f7a:	687b      	ldr	r3, [r7, #4]
 8008f7c:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 8008f80:	2b01      	cmp	r3, #1
 8008f82:	d108      	bne.n	8008f96 <HAL_PCD_IRQHandler+0x404>
      {
        hpcd->LPM_State = LPM_L0;
 8008f84:	687b      	ldr	r3, [r7, #4]
 8008f86:	2200      	movs	r2, #0
 8008f88:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8008f8c:	2100      	movs	r1, #0
 8008f8e:	6878      	ldr	r0, [r7, #4]
 8008f90:	f000 fea4 	bl	8009cdc <HAL_PCDEx_LPM_Callback>
 8008f94:	e002      	b.n	8008f9c <HAL_PCD_IRQHandler+0x40a>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8008f96:	6878      	ldr	r0, [r7, #4]
 8008f98:	f010 fbf6 	bl	8019788 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8008f9c:	687b      	ldr	r3, [r7, #4]
 8008f9e:	681b      	ldr	r3, [r3, #0]
 8008fa0:	695a      	ldr	r2, [r3, #20]
 8008fa2:	687b      	ldr	r3, [r7, #4]
 8008fa4:	681b      	ldr	r3, [r3, #0]
 8008fa6:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8008faa:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8008fac:	687b      	ldr	r3, [r7, #4]
 8008fae:	681b      	ldr	r3, [r3, #0]
 8008fb0:	4618      	mov	r0, r3
 8008fb2:	f00a fbb9 	bl	8013728 <USB_ReadInterrupts>
 8008fb6:	4603      	mov	r3, r0
 8008fb8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008fbc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008fc0:	d112      	bne.n	8008fe8 <HAL_PCD_IRQHandler+0x456>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8008fc2:	69fb      	ldr	r3, [r7, #28]
 8008fc4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008fc8:	689b      	ldr	r3, [r3, #8]
 8008fca:	f003 0301 	and.w	r3, r3, #1
 8008fce:	2b01      	cmp	r3, #1
 8008fd0:	d102      	bne.n	8008fd8 <HAL_PCD_IRQHandler+0x446>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8008fd2:	6878      	ldr	r0, [r7, #4]
 8008fd4:	f010 fbb2 	bl	801973c <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8008fd8:	687b      	ldr	r3, [r7, #4]
 8008fda:	681b      	ldr	r3, [r3, #0]
 8008fdc:	695a      	ldr	r2, [r3, #20]
 8008fde:	687b      	ldr	r3, [r7, #4]
 8008fe0:	681b      	ldr	r3, [r3, #0]
 8008fe2:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8008fe6:	615a      	str	r2, [r3, #20]
    }
    
    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 8008fe8:	687b      	ldr	r3, [r7, #4]
 8008fea:	681b      	ldr	r3, [r3, #0]
 8008fec:	4618      	mov	r0, r3
 8008fee:	f00a fb9b 	bl	8013728 <USB_ReadInterrupts>
 8008ff2:	4603      	mov	r3, r0
 8008ff4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008ff8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008ffc:	d121      	bne.n	8009042 <HAL_PCD_IRQHandler+0x4b0>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 8008ffe:	687b      	ldr	r3, [r7, #4]
 8009000:	681b      	ldr	r3, [r3, #0]
 8009002:	695a      	ldr	r2, [r3, #20]
 8009004:	687b      	ldr	r3, [r7, #4]
 8009006:	681b      	ldr	r3, [r3, #0]
 8009008:	f002 6200 	and.w	r2, r2, #134217728	; 0x8000000
 800900c:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 800900e:	687b      	ldr	r3, [r7, #4]
 8009010:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 8009014:	2b00      	cmp	r3, #0
 8009016:	d111      	bne.n	800903c <HAL_PCD_IRQHandler+0x4aa>
      {
        hpcd->LPM_State = LPM_L1;
 8009018:	687b      	ldr	r3, [r7, #4]
 800901a:	2201      	movs	r2, #1
 800901c:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 8009020:	687b      	ldr	r3, [r7, #4]
 8009022:	681b      	ldr	r3, [r3, #0]
 8009024:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009026:	089b      	lsrs	r3, r3, #2
 8009028:	f003 020f 	and.w	r2, r3, #15
 800902c:	687b      	ldr	r3, [r7, #4]
 800902e:	f8c3 23f8 	str.w	r2, [r3, #1016]	; 0x3f8

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8009032:	2101      	movs	r1, #1
 8009034:	6878      	ldr	r0, [r7, #4]
 8009036:	f000 fe51 	bl	8009cdc <HAL_PCDEx_LPM_Callback>
 800903a:	e002      	b.n	8009042 <HAL_PCD_IRQHandler+0x4b0>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 800903c:	6878      	ldr	r0, [r7, #4]
 800903e:	f010 fb7d 	bl	801973c <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8009042:	687b      	ldr	r3, [r7, #4]
 8009044:	681b      	ldr	r3, [r3, #0]
 8009046:	4618      	mov	r0, r3
 8009048:	f00a fb6e 	bl	8013728 <USB_ReadInterrupts>
 800904c:	4603      	mov	r3, r0
 800904e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8009052:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009056:	f040 80c7 	bne.w	80091e8 <HAL_PCD_IRQHandler+0x656>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800905a:	69fb      	ldr	r3, [r7, #28]
 800905c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009060:	685b      	ldr	r3, [r3, #4]
 8009062:	69fa      	ldr	r2, [r7, #28]
 8009064:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8009068:	f023 0301 	bic.w	r3, r3, #1
 800906c:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 800906e:	687b      	ldr	r3, [r7, #4]
 8009070:	681b      	ldr	r3, [r3, #0]
 8009072:	2110      	movs	r1, #16
 8009074:	4618      	mov	r0, r3
 8009076:	f009 fc41 	bl	80128fc <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800907a:	2300      	movs	r3, #0
 800907c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800907e:	e056      	b.n	800912e <HAL_PCD_IRQHandler+0x59c>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8009080:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009082:	015a      	lsls	r2, r3, #5
 8009084:	69fb      	ldr	r3, [r7, #28]
 8009086:	4413      	add	r3, r2
 8009088:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800908c:	461a      	mov	r2, r3
 800908e:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8009092:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8009094:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009096:	015a      	lsls	r2, r3, #5
 8009098:	69fb      	ldr	r3, [r7, #28]
 800909a:	4413      	add	r3, r2
 800909c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80090a0:	681b      	ldr	r3, [r3, #0]
 80090a2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80090a4:	0151      	lsls	r1, r2, #5
 80090a6:	69fa      	ldr	r2, [r7, #28]
 80090a8:	440a      	add	r2, r1
 80090aa:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80090ae:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80090b2:	6013      	str	r3, [r2, #0]
        USBx_INEP(i)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 80090b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80090b6:	015a      	lsls	r2, r3, #5
 80090b8:	69fb      	ldr	r3, [r7, #28]
 80090ba:	4413      	add	r3, r2
 80090bc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80090c0:	681b      	ldr	r3, [r3, #0]
 80090c2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80090c4:	0151      	lsls	r1, r2, #5
 80090c6:	69fa      	ldr	r2, [r7, #28]
 80090c8:	440a      	add	r2, r1
 80090ca:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80090ce:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80090d2:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 80090d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80090d6:	015a      	lsls	r2, r3, #5
 80090d8:	69fb      	ldr	r3, [r7, #28]
 80090da:	4413      	add	r3, r2
 80090dc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80090e0:	461a      	mov	r2, r3
 80090e2:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80090e6:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80090e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80090ea:	015a      	lsls	r2, r3, #5
 80090ec:	69fb      	ldr	r3, [r7, #28]
 80090ee:	4413      	add	r3, r2
 80090f0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80090f4:	681b      	ldr	r3, [r3, #0]
 80090f6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80090f8:	0151      	lsls	r1, r2, #5
 80090fa:	69fa      	ldr	r2, [r7, #28]
 80090fc:	440a      	add	r2, r1
 80090fe:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009102:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8009106:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8009108:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800910a:	015a      	lsls	r2, r3, #5
 800910c:	69fb      	ldr	r3, [r7, #28]
 800910e:	4413      	add	r3, r2
 8009110:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009114:	681b      	ldr	r3, [r3, #0]
 8009116:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009118:	0151      	lsls	r1, r2, #5
 800911a:	69fa      	ldr	r2, [r7, #28]
 800911c:	440a      	add	r2, r1
 800911e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009122:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8009126:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8009128:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800912a:	3301      	adds	r3, #1
 800912c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800912e:	687b      	ldr	r3, [r7, #4]
 8009130:	685b      	ldr	r3, [r3, #4]
 8009132:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009134:	429a      	cmp	r2, r3
 8009136:	d3a3      	bcc.n	8009080 <HAL_PCD_IRQHandler+0x4ee>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8009138:	69fb      	ldr	r3, [r7, #28]
 800913a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800913e:	69db      	ldr	r3, [r3, #28]
 8009140:	69fa      	ldr	r2, [r7, #28]
 8009142:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8009146:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 800914a:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 800914c:	687b      	ldr	r3, [r7, #4]
 800914e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009150:	2b00      	cmp	r3, #0
 8009152:	d016      	beq.n	8009182 <HAL_PCD_IRQHandler+0x5f0>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8009154:	69fb      	ldr	r3, [r7, #28]
 8009156:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800915a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800915e:	69fa      	ldr	r2, [r7, #28]
 8009160:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8009164:	f043 030b 	orr.w	r3, r3, #11
 8009168:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 800916c:	69fb      	ldr	r3, [r7, #28]
 800916e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009172:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009174:	69fa      	ldr	r2, [r7, #28]
 8009176:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800917a:	f043 030b 	orr.w	r3, r3, #11
 800917e:	6453      	str	r3, [r2, #68]	; 0x44
 8009180:	e015      	b.n	80091ae <HAL_PCD_IRQHandler+0x61c>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8009182:	69fb      	ldr	r3, [r7, #28]
 8009184:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009188:	695a      	ldr	r2, [r3, #20]
 800918a:	69fb      	ldr	r3, [r7, #28]
 800918c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009190:	4619      	mov	r1, r3
 8009192:	f242 032b 	movw	r3, #8235	; 0x202b
 8009196:	4313      	orrs	r3, r2
 8009198:	614b      	str	r3, [r1, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 800919a:	69fb      	ldr	r3, [r7, #28]
 800919c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80091a0:	691b      	ldr	r3, [r3, #16]
 80091a2:	69fa      	ldr	r2, [r7, #28]
 80091a4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80091a8:	f043 030b 	orr.w	r3, r3, #11
 80091ac:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 80091ae:	69fb      	ldr	r3, [r7, #28]
 80091b0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80091b4:	681b      	ldr	r3, [r3, #0]
 80091b6:	69fa      	ldr	r2, [r7, #28]
 80091b8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80091bc:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 80091c0:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80091c2:	687b      	ldr	r3, [r7, #4]
 80091c4:	6818      	ldr	r0, [r3, #0]
 80091c6:	687b      	ldr	r3, [r7, #4]
 80091c8:	691b      	ldr	r3, [r3, #16]
 80091ca:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 80091cc:	687b      	ldr	r3, [r7, #4]
 80091ce:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80091d2:	461a      	mov	r2, r3
 80091d4:	f00a fb6e 	bl	80138b4 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 80091d8:	687b      	ldr	r3, [r7, #4]
 80091da:	681b      	ldr	r3, [r3, #0]
 80091dc:	695a      	ldr	r2, [r3, #20]
 80091de:	687b      	ldr	r3, [r7, #4]
 80091e0:	681b      	ldr	r3, [r3, #0]
 80091e2:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 80091e6:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 80091e8:	687b      	ldr	r3, [r7, #4]
 80091ea:	681b      	ldr	r3, [r3, #0]
 80091ec:	4618      	mov	r0, r3
 80091ee:	f00a fa9b 	bl	8013728 <USB_ReadInterrupts>
 80091f2:	4603      	mov	r3, r0
 80091f4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80091f8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80091fc:	d124      	bne.n	8009248 <HAL_PCD_IRQHandler+0x6b6>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 80091fe:	687b      	ldr	r3, [r7, #4]
 8009200:	681b      	ldr	r3, [r3, #0]
 8009202:	4618      	mov	r0, r3
 8009204:	f00a fb32 	bl	801386c <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8009208:	687b      	ldr	r3, [r7, #4]
 800920a:	681b      	ldr	r3, [r3, #0]
 800920c:	4618      	mov	r0, r3
 800920e:	f009 fbd6 	bl	80129be <USB_GetDevSpeed>
 8009212:	4603      	mov	r3, r0
 8009214:	461a      	mov	r2, r3
 8009216:	687b      	ldr	r3, [r7, #4]
 8009218:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800921a:	687b      	ldr	r3, [r7, #4]
 800921c:	681c      	ldr	r4, [r3, #0]
 800921e:	f001 fdd9 	bl	800add4 <HAL_RCC_GetHCLKFreq>
 8009222:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8009224:	687b      	ldr	r3, [r7, #4]
 8009226:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8009228:	b2db      	uxtb	r3, r3
 800922a:	461a      	mov	r2, r3
 800922c:	4620      	mov	r0, r4
 800922e:	f009 f919 	bl	8012464 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8009232:	6878      	ldr	r0, [r7, #4]
 8009234:	f010 fa59 	bl	80196ea <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8009238:	687b      	ldr	r3, [r7, #4]
 800923a:	681b      	ldr	r3, [r3, #0]
 800923c:	695a      	ldr	r2, [r3, #20]
 800923e:	687b      	ldr	r3, [r7, #4]
 8009240:	681b      	ldr	r3, [r3, #0]
 8009242:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8009246:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8009248:	687b      	ldr	r3, [r7, #4]
 800924a:	681b      	ldr	r3, [r3, #0]
 800924c:	4618      	mov	r0, r3
 800924e:	f00a fa6b 	bl	8013728 <USB_ReadInterrupts>
 8009252:	4603      	mov	r3, r0
 8009254:	f003 0308 	and.w	r3, r3, #8
 8009258:	2b08      	cmp	r3, #8
 800925a:	d10a      	bne.n	8009272 <HAL_PCD_IRQHandler+0x6e0>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 800925c:	6878      	ldr	r0, [r7, #4]
 800925e:	f010 fa36 	bl	80196ce <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8009262:	687b      	ldr	r3, [r7, #4]
 8009264:	681b      	ldr	r3, [r3, #0]
 8009266:	695a      	ldr	r2, [r3, #20]
 8009268:	687b      	ldr	r3, [r7, #4]
 800926a:	681b      	ldr	r3, [r3, #0]
 800926c:	f002 0208 	and.w	r2, r2, #8
 8009270:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8009272:	687b      	ldr	r3, [r7, #4]
 8009274:	681b      	ldr	r3, [r3, #0]
 8009276:	4618      	mov	r0, r3
 8009278:	f00a fa56 	bl	8013728 <USB_ReadInterrupts>
 800927c:	4603      	mov	r3, r0
 800927e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8009282:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009286:	d10f      	bne.n	80092a8 <HAL_PCD_IRQHandler+0x716>
    {
      /* Keep application checking the corresponding Iso IN endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8009288:	2300      	movs	r3, #0
 800928a:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 800928c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800928e:	b2db      	uxtb	r3, r3
 8009290:	4619      	mov	r1, r3
 8009292:	6878      	ldr	r0, [r7, #4]
 8009294:	f010 fa98 	bl	80197c8 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8009298:	687b      	ldr	r3, [r7, #4]
 800929a:	681b      	ldr	r3, [r3, #0]
 800929c:	695a      	ldr	r2, [r3, #20]
 800929e:	687b      	ldr	r3, [r7, #4]
 80092a0:	681b      	ldr	r3, [r3, #0]
 80092a2:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 80092a6:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 80092a8:	687b      	ldr	r3, [r7, #4]
 80092aa:	681b      	ldr	r3, [r3, #0]
 80092ac:	4618      	mov	r0, r3
 80092ae:	f00a fa3b 	bl	8013728 <USB_ReadInterrupts>
 80092b2:	4603      	mov	r3, r0
 80092b4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80092b8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80092bc:	d10f      	bne.n	80092de <HAL_PCD_IRQHandler+0x74c>
    {
      /* Keep application checking the corresponding Iso OUT endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 80092be:	2300      	movs	r3, #0
 80092c0:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 80092c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80092c4:	b2db      	uxtb	r3, r3
 80092c6:	4619      	mov	r1, r3
 80092c8:	6878      	ldr	r0, [r7, #4]
 80092ca:	f010 fa6b 	bl	80197a4 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 80092ce:	687b      	ldr	r3, [r7, #4]
 80092d0:	681b      	ldr	r3, [r3, #0]
 80092d2:	695a      	ldr	r2, [r3, #20]
 80092d4:	687b      	ldr	r3, [r7, #4]
 80092d6:	681b      	ldr	r3, [r3, #0]
 80092d8:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 80092dc:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 80092de:	687b      	ldr	r3, [r7, #4]
 80092e0:	681b      	ldr	r3, [r3, #0]
 80092e2:	4618      	mov	r0, r3
 80092e4:	f00a fa20 	bl	8013728 <USB_ReadInterrupts>
 80092e8:	4603      	mov	r3, r0
 80092ea:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80092ee:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80092f2:	d10a      	bne.n	800930a <HAL_PCD_IRQHandler+0x778>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 80092f4:	6878      	ldr	r0, [r7, #4]
 80092f6:	f010 fa79 	bl	80197ec <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 80092fa:	687b      	ldr	r3, [r7, #4]
 80092fc:	681b      	ldr	r3, [r3, #0]
 80092fe:	695a      	ldr	r2, [r3, #20]
 8009300:	687b      	ldr	r3, [r7, #4]
 8009302:	681b      	ldr	r3, [r3, #0]
 8009304:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8009308:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 800930a:	687b      	ldr	r3, [r7, #4]
 800930c:	681b      	ldr	r3, [r3, #0]
 800930e:	4618      	mov	r0, r3
 8009310:	f00a fa0a 	bl	8013728 <USB_ReadInterrupts>
 8009314:	4603      	mov	r3, r0
 8009316:	f003 0304 	and.w	r3, r3, #4
 800931a:	2b04      	cmp	r3, #4
 800931c:	d115      	bne.n	800934a <HAL_PCD_IRQHandler+0x7b8>
    {
      temp = hpcd->Instance->GOTGINT;
 800931e:	687b      	ldr	r3, [r7, #4]
 8009320:	681b      	ldr	r3, [r3, #0]
 8009322:	685b      	ldr	r3, [r3, #4]
 8009324:	61bb      	str	r3, [r7, #24]

      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8009326:	69bb      	ldr	r3, [r7, #24]
 8009328:	f003 0304 	and.w	r3, r3, #4
 800932c:	2b00      	cmp	r3, #0
 800932e:	d002      	beq.n	8009336 <HAL_PCD_IRQHandler+0x7a4>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8009330:	6878      	ldr	r0, [r7, #4]
 8009332:	f010 fa69 	bl	8019808 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
 8009336:	687b      	ldr	r3, [r7, #4]
 8009338:	681b      	ldr	r3, [r3, #0]
 800933a:	6859      	ldr	r1, [r3, #4]
 800933c:	687b      	ldr	r3, [r7, #4]
 800933e:	681b      	ldr	r3, [r3, #0]
 8009340:	69ba      	ldr	r2, [r7, #24]
 8009342:	430a      	orrs	r2, r1
 8009344:	605a      	str	r2, [r3, #4]
 8009346:	e000      	b.n	800934a <HAL_PCD_IRQHandler+0x7b8>
      return;
 8009348:	bf00      	nop
    }
  }
}
 800934a:	3734      	adds	r7, #52	; 0x34
 800934c:	46bd      	mov	sp, r7
 800934e:	bd90      	pop	{r4, r7, pc}

08009350 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8009350:	b580      	push	{r7, lr}
 8009352:	b082      	sub	sp, #8
 8009354:	af00      	add	r7, sp, #0
 8009356:	6078      	str	r0, [r7, #4]
 8009358:	460b      	mov	r3, r1
 800935a:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 800935c:	687b      	ldr	r3, [r7, #4]
 800935e:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8009362:	2b01      	cmp	r3, #1
 8009364:	d101      	bne.n	800936a <HAL_PCD_SetAddress+0x1a>
 8009366:	2302      	movs	r3, #2
 8009368:	e013      	b.n	8009392 <HAL_PCD_SetAddress+0x42>
 800936a:	687b      	ldr	r3, [r7, #4]
 800936c:	2201      	movs	r2, #1
 800936e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  hpcd->USB_Address = address;
 8009372:	687b      	ldr	r3, [r7, #4]
 8009374:	78fa      	ldrb	r2, [r7, #3]
 8009376:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 800937a:	687b      	ldr	r3, [r7, #4]
 800937c:	681b      	ldr	r3, [r3, #0]
 800937e:	78fa      	ldrb	r2, [r7, #3]
 8009380:	4611      	mov	r1, r2
 8009382:	4618      	mov	r0, r3
 8009384:	f00a f97a 	bl	801367c <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8009388:	687b      	ldr	r3, [r7, #4]
 800938a:	2200      	movs	r2, #0
 800938c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 8009390:	2300      	movs	r3, #0
}
 8009392:	4618      	mov	r0, r3
 8009394:	3708      	adds	r7, #8
 8009396:	46bd      	mov	sp, r7
 8009398:	bd80      	pop	{r7, pc}

0800939a <HAL_PCD_EP_Open>:
  * @param  ep_mps endpoint max packet size
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint16_t ep_mps, uint8_t ep_type)
{
 800939a:	b580      	push	{r7, lr}
 800939c:	b084      	sub	sp, #16
 800939e:	af00      	add	r7, sp, #0
 80093a0:	6078      	str	r0, [r7, #4]
 80093a2:	4608      	mov	r0, r1
 80093a4:	4611      	mov	r1, r2
 80093a6:	461a      	mov	r2, r3
 80093a8:	4603      	mov	r3, r0
 80093aa:	70fb      	strb	r3, [r7, #3]
 80093ac:	460b      	mov	r3, r1
 80093ae:	803b      	strh	r3, [r7, #0]
 80093b0:	4613      	mov	r3, r2
 80093b2:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 80093b4:	2300      	movs	r3, #0
 80093b6:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80093b8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80093bc:	2b00      	cmp	r3, #0
 80093be:	da0f      	bge.n	80093e0 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80093c0:	78fb      	ldrb	r3, [r7, #3]
 80093c2:	f003 020f 	and.w	r2, r3, #15
 80093c6:	4613      	mov	r3, r2
 80093c8:	00db      	lsls	r3, r3, #3
 80093ca:	1a9b      	subs	r3, r3, r2
 80093cc:	009b      	lsls	r3, r3, #2
 80093ce:	3338      	adds	r3, #56	; 0x38
 80093d0:	687a      	ldr	r2, [r7, #4]
 80093d2:	4413      	add	r3, r2
 80093d4:	3304      	adds	r3, #4
 80093d6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80093d8:	68fb      	ldr	r3, [r7, #12]
 80093da:	2201      	movs	r2, #1
 80093dc:	705a      	strb	r2, [r3, #1]
 80093de:	e00f      	b.n	8009400 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80093e0:	78fb      	ldrb	r3, [r7, #3]
 80093e2:	f003 020f 	and.w	r2, r3, #15
 80093e6:	4613      	mov	r3, r2
 80093e8:	00db      	lsls	r3, r3, #3
 80093ea:	1a9b      	subs	r3, r3, r2
 80093ec:	009b      	lsls	r3, r3, #2
 80093ee:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80093f2:	687a      	ldr	r2, [r7, #4]
 80093f4:	4413      	add	r3, r2
 80093f6:	3304      	adds	r3, #4
 80093f8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80093fa:	68fb      	ldr	r3, [r7, #12]
 80093fc:	2200      	movs	r2, #0
 80093fe:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8009400:	78fb      	ldrb	r3, [r7, #3]
 8009402:	f003 030f 	and.w	r3, r3, #15
 8009406:	b2da      	uxtb	r2, r3
 8009408:	68fb      	ldr	r3, [r7, #12]
 800940a:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 800940c:	883a      	ldrh	r2, [r7, #0]
 800940e:	68fb      	ldr	r3, [r7, #12]
 8009410:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8009412:	68fb      	ldr	r3, [r7, #12]
 8009414:	78ba      	ldrb	r2, [r7, #2]
 8009416:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8009418:	68fb      	ldr	r3, [r7, #12]
 800941a:	785b      	ldrb	r3, [r3, #1]
 800941c:	2b00      	cmp	r3, #0
 800941e:	d004      	beq.n	800942a <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8009420:	68fb      	ldr	r3, [r7, #12]
 8009422:	781b      	ldrb	r3, [r3, #0]
 8009424:	b29a      	uxth	r2, r3
 8009426:	68fb      	ldr	r3, [r7, #12]
 8009428:	80da      	strh	r2, [r3, #6]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 800942a:	78bb      	ldrb	r3, [r7, #2]
 800942c:	2b02      	cmp	r3, #2
 800942e:	d102      	bne.n	8009436 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8009430:	68fb      	ldr	r3, [r7, #12]
 8009432:	2200      	movs	r2, #0
 8009434:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8009436:	687b      	ldr	r3, [r7, #4]
 8009438:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800943c:	2b01      	cmp	r3, #1
 800943e:	d101      	bne.n	8009444 <HAL_PCD_EP_Open+0xaa>
 8009440:	2302      	movs	r3, #2
 8009442:	e00e      	b.n	8009462 <HAL_PCD_EP_Open+0xc8>
 8009444:	687b      	ldr	r3, [r7, #4]
 8009446:	2201      	movs	r2, #1
 8009448:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 800944c:	687b      	ldr	r3, [r7, #4]
 800944e:	681b      	ldr	r3, [r3, #0]
 8009450:	68f9      	ldr	r1, [r7, #12]
 8009452:	4618      	mov	r0, r3
 8009454:	f009 fad8 	bl	8012a08 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8009458:	687b      	ldr	r3, [r7, #4]
 800945a:	2200      	movs	r2, #0
 800945c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return ret;
 8009460:	7afb      	ldrb	r3, [r7, #11]
}
 8009462:	4618      	mov	r0, r3
 8009464:	3710      	adds	r7, #16
 8009466:	46bd      	mov	sp, r7
 8009468:	bd80      	pop	{r7, pc}

0800946a <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800946a:	b580      	push	{r7, lr}
 800946c:	b084      	sub	sp, #16
 800946e:	af00      	add	r7, sp, #0
 8009470:	6078      	str	r0, [r7, #4]
 8009472:	460b      	mov	r3, r1
 8009474:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8009476:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800947a:	2b00      	cmp	r3, #0
 800947c:	da0f      	bge.n	800949e <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800947e:	78fb      	ldrb	r3, [r7, #3]
 8009480:	f003 020f 	and.w	r2, r3, #15
 8009484:	4613      	mov	r3, r2
 8009486:	00db      	lsls	r3, r3, #3
 8009488:	1a9b      	subs	r3, r3, r2
 800948a:	009b      	lsls	r3, r3, #2
 800948c:	3338      	adds	r3, #56	; 0x38
 800948e:	687a      	ldr	r2, [r7, #4]
 8009490:	4413      	add	r3, r2
 8009492:	3304      	adds	r3, #4
 8009494:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8009496:	68fb      	ldr	r3, [r7, #12]
 8009498:	2201      	movs	r2, #1
 800949a:	705a      	strb	r2, [r3, #1]
 800949c:	e00f      	b.n	80094be <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800949e:	78fb      	ldrb	r3, [r7, #3]
 80094a0:	f003 020f 	and.w	r2, r3, #15
 80094a4:	4613      	mov	r3, r2
 80094a6:	00db      	lsls	r3, r3, #3
 80094a8:	1a9b      	subs	r3, r3, r2
 80094aa:	009b      	lsls	r3, r3, #2
 80094ac:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80094b0:	687a      	ldr	r2, [r7, #4]
 80094b2:	4413      	add	r3, r2
 80094b4:	3304      	adds	r3, #4
 80094b6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80094b8:	68fb      	ldr	r3, [r7, #12]
 80094ba:	2200      	movs	r2, #0
 80094bc:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 80094be:	78fb      	ldrb	r3, [r7, #3]
 80094c0:	f003 030f 	and.w	r3, r3, #15
 80094c4:	b2da      	uxtb	r2, r3
 80094c6:	68fb      	ldr	r3, [r7, #12]
 80094c8:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80094ca:	687b      	ldr	r3, [r7, #4]
 80094cc:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80094d0:	2b01      	cmp	r3, #1
 80094d2:	d101      	bne.n	80094d8 <HAL_PCD_EP_Close+0x6e>
 80094d4:	2302      	movs	r3, #2
 80094d6:	e00e      	b.n	80094f6 <HAL_PCD_EP_Close+0x8c>
 80094d8:	687b      	ldr	r3, [r7, #4]
 80094da:	2201      	movs	r2, #1
 80094dc:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80094e0:	687b      	ldr	r3, [r7, #4]
 80094e2:	681b      	ldr	r3, [r3, #0]
 80094e4:	68f9      	ldr	r1, [r7, #12]
 80094e6:	4618      	mov	r0, r3
 80094e8:	f009 fb16 	bl	8012b18 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80094ec:	687b      	ldr	r3, [r7, #4]
 80094ee:	2200      	movs	r2, #0
 80094f0:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 80094f4:	2300      	movs	r3, #0
}
 80094f6:	4618      	mov	r0, r3
 80094f8:	3710      	adds	r7, #16
 80094fa:	46bd      	mov	sp, r7
 80094fc:	bd80      	pop	{r7, pc}

080094fe <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80094fe:	b580      	push	{r7, lr}
 8009500:	b086      	sub	sp, #24
 8009502:	af00      	add	r7, sp, #0
 8009504:	60f8      	str	r0, [r7, #12]
 8009506:	607a      	str	r2, [r7, #4]
 8009508:	603b      	str	r3, [r7, #0]
 800950a:	460b      	mov	r3, r1
 800950c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800950e:	7afb      	ldrb	r3, [r7, #11]
 8009510:	f003 020f 	and.w	r2, r3, #15
 8009514:	4613      	mov	r3, r2
 8009516:	00db      	lsls	r3, r3, #3
 8009518:	1a9b      	subs	r3, r3, r2
 800951a:	009b      	lsls	r3, r3, #2
 800951c:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8009520:	68fa      	ldr	r2, [r7, #12]
 8009522:	4413      	add	r3, r2
 8009524:	3304      	adds	r3, #4
 8009526:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8009528:	697b      	ldr	r3, [r7, #20]
 800952a:	687a      	ldr	r2, [r7, #4]
 800952c:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 800952e:	697b      	ldr	r3, [r7, #20]
 8009530:	683a      	ldr	r2, [r7, #0]
 8009532:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8009534:	697b      	ldr	r3, [r7, #20]
 8009536:	2200      	movs	r2, #0
 8009538:	619a      	str	r2, [r3, #24]
  ep->is_in = 0U;
 800953a:	697b      	ldr	r3, [r7, #20]
 800953c:	2200      	movs	r2, #0
 800953e:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8009540:	7afb      	ldrb	r3, [r7, #11]
 8009542:	f003 030f 	and.w	r3, r3, #15
 8009546:	b2da      	uxtb	r2, r3
 8009548:	697b      	ldr	r3, [r7, #20]
 800954a:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 800954c:	68fb      	ldr	r3, [r7, #12]
 800954e:	691b      	ldr	r3, [r3, #16]
 8009550:	2b01      	cmp	r3, #1
 8009552:	d102      	bne.n	800955a <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8009554:	687a      	ldr	r2, [r7, #4]
 8009556:	697b      	ldr	r3, [r7, #20]
 8009558:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800955a:	7afb      	ldrb	r3, [r7, #11]
 800955c:	f003 030f 	and.w	r3, r3, #15
 8009560:	2b00      	cmp	r3, #0
 8009562:	d109      	bne.n	8009578 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8009564:	68fb      	ldr	r3, [r7, #12]
 8009566:	6818      	ldr	r0, [r3, #0]
 8009568:	68fb      	ldr	r3, [r7, #12]
 800956a:	691b      	ldr	r3, [r3, #16]
 800956c:	b2db      	uxtb	r3, r3
 800956e:	461a      	mov	r2, r3
 8009570:	6979      	ldr	r1, [r7, #20]
 8009572:	f009 fdf9 	bl	8013168 <USB_EP0StartXfer>
 8009576:	e008      	b.n	800958a <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8009578:	68fb      	ldr	r3, [r7, #12]
 800957a:	6818      	ldr	r0, [r3, #0]
 800957c:	68fb      	ldr	r3, [r7, #12]
 800957e:	691b      	ldr	r3, [r3, #16]
 8009580:	b2db      	uxtb	r3, r3
 8009582:	461a      	mov	r2, r3
 8009584:	6979      	ldr	r1, [r7, #20]
 8009586:	f009 fba3 	bl	8012cd0 <USB_EPStartXfer>
  }

  return HAL_OK;
 800958a:	2300      	movs	r3, #0
}
 800958c:	4618      	mov	r0, r3
 800958e:	3718      	adds	r7, #24
 8009590:	46bd      	mov	sp, r7
 8009592:	bd80      	pop	{r7, pc}

08009594 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8009594:	b480      	push	{r7}
 8009596:	b083      	sub	sp, #12
 8009598:	af00      	add	r7, sp, #0
 800959a:	6078      	str	r0, [r7, #4]
 800959c:	460b      	mov	r3, r1
 800959e:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 80095a0:	78fb      	ldrb	r3, [r7, #3]
 80095a2:	f003 020f 	and.w	r2, r3, #15
 80095a6:	6879      	ldr	r1, [r7, #4]
 80095a8:	4613      	mov	r3, r2
 80095aa:	00db      	lsls	r3, r3, #3
 80095ac:	1a9b      	subs	r3, r3, r2
 80095ae:	009b      	lsls	r3, r3, #2
 80095b0:	440b      	add	r3, r1
 80095b2:	f503 7305 	add.w	r3, r3, #532	; 0x214
 80095b6:	681b      	ldr	r3, [r3, #0]
}
 80095b8:	4618      	mov	r0, r3
 80095ba:	370c      	adds	r7, #12
 80095bc:	46bd      	mov	sp, r7
 80095be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095c2:	4770      	bx	lr

080095c4 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80095c4:	b580      	push	{r7, lr}
 80095c6:	b086      	sub	sp, #24
 80095c8:	af00      	add	r7, sp, #0
 80095ca:	60f8      	str	r0, [r7, #12]
 80095cc:	607a      	str	r2, [r7, #4]
 80095ce:	603b      	str	r3, [r7, #0]
 80095d0:	460b      	mov	r3, r1
 80095d2:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80095d4:	7afb      	ldrb	r3, [r7, #11]
 80095d6:	f003 020f 	and.w	r2, r3, #15
 80095da:	4613      	mov	r3, r2
 80095dc:	00db      	lsls	r3, r3, #3
 80095de:	1a9b      	subs	r3, r3, r2
 80095e0:	009b      	lsls	r3, r3, #2
 80095e2:	3338      	adds	r3, #56	; 0x38
 80095e4:	68fa      	ldr	r2, [r7, #12]
 80095e6:	4413      	add	r3, r2
 80095e8:	3304      	adds	r3, #4
 80095ea:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80095ec:	697b      	ldr	r3, [r7, #20]
 80095ee:	687a      	ldr	r2, [r7, #4]
 80095f0:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 80095f2:	697b      	ldr	r3, [r7, #20]
 80095f4:	683a      	ldr	r2, [r7, #0]
 80095f6:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 80095f8:	697b      	ldr	r3, [r7, #20]
 80095fa:	2200      	movs	r2, #0
 80095fc:	619a      	str	r2, [r3, #24]
  ep->is_in = 1U;
 80095fe:	697b      	ldr	r3, [r7, #20]
 8009600:	2201      	movs	r2, #1
 8009602:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8009604:	7afb      	ldrb	r3, [r7, #11]
 8009606:	f003 030f 	and.w	r3, r3, #15
 800960a:	b2da      	uxtb	r2, r3
 800960c:	697b      	ldr	r3, [r7, #20]
 800960e:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8009610:	68fb      	ldr	r3, [r7, #12]
 8009612:	691b      	ldr	r3, [r3, #16]
 8009614:	2b01      	cmp	r3, #1
 8009616:	d102      	bne.n	800961e <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8009618:	687a      	ldr	r2, [r7, #4]
 800961a:	697b      	ldr	r3, [r7, #20]
 800961c:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800961e:	7afb      	ldrb	r3, [r7, #11]
 8009620:	f003 030f 	and.w	r3, r3, #15
 8009624:	2b00      	cmp	r3, #0
 8009626:	d109      	bne.n	800963c <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8009628:	68fb      	ldr	r3, [r7, #12]
 800962a:	6818      	ldr	r0, [r3, #0]
 800962c:	68fb      	ldr	r3, [r7, #12]
 800962e:	691b      	ldr	r3, [r3, #16]
 8009630:	b2db      	uxtb	r3, r3
 8009632:	461a      	mov	r2, r3
 8009634:	6979      	ldr	r1, [r7, #20]
 8009636:	f009 fd97 	bl	8013168 <USB_EP0StartXfer>
 800963a:	e008      	b.n	800964e <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800963c:	68fb      	ldr	r3, [r7, #12]
 800963e:	6818      	ldr	r0, [r3, #0]
 8009640:	68fb      	ldr	r3, [r7, #12]
 8009642:	691b      	ldr	r3, [r3, #16]
 8009644:	b2db      	uxtb	r3, r3
 8009646:	461a      	mov	r2, r3
 8009648:	6979      	ldr	r1, [r7, #20]
 800964a:	f009 fb41 	bl	8012cd0 <USB_EPStartXfer>
  }

  return HAL_OK;
 800964e:	2300      	movs	r3, #0
}
 8009650:	4618      	mov	r0, r3
 8009652:	3718      	adds	r7, #24
 8009654:	46bd      	mov	sp, r7
 8009656:	bd80      	pop	{r7, pc}

08009658 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8009658:	b580      	push	{r7, lr}
 800965a:	b084      	sub	sp, #16
 800965c:	af00      	add	r7, sp, #0
 800965e:	6078      	str	r0, [r7, #4]
 8009660:	460b      	mov	r3, r1
 8009662:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8009664:	78fb      	ldrb	r3, [r7, #3]
 8009666:	f003 020f 	and.w	r2, r3, #15
 800966a:	687b      	ldr	r3, [r7, #4]
 800966c:	685b      	ldr	r3, [r3, #4]
 800966e:	429a      	cmp	r2, r3
 8009670:	d901      	bls.n	8009676 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8009672:	2301      	movs	r3, #1
 8009674:	e050      	b.n	8009718 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8009676:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800967a:	2b00      	cmp	r3, #0
 800967c:	da0f      	bge.n	800969e <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800967e:	78fb      	ldrb	r3, [r7, #3]
 8009680:	f003 020f 	and.w	r2, r3, #15
 8009684:	4613      	mov	r3, r2
 8009686:	00db      	lsls	r3, r3, #3
 8009688:	1a9b      	subs	r3, r3, r2
 800968a:	009b      	lsls	r3, r3, #2
 800968c:	3338      	adds	r3, #56	; 0x38
 800968e:	687a      	ldr	r2, [r7, #4]
 8009690:	4413      	add	r3, r2
 8009692:	3304      	adds	r3, #4
 8009694:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8009696:	68fb      	ldr	r3, [r7, #12]
 8009698:	2201      	movs	r2, #1
 800969a:	705a      	strb	r2, [r3, #1]
 800969c:	e00d      	b.n	80096ba <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800969e:	78fa      	ldrb	r2, [r7, #3]
 80096a0:	4613      	mov	r3, r2
 80096a2:	00db      	lsls	r3, r3, #3
 80096a4:	1a9b      	subs	r3, r3, r2
 80096a6:	009b      	lsls	r3, r3, #2
 80096a8:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80096ac:	687a      	ldr	r2, [r7, #4]
 80096ae:	4413      	add	r3, r2
 80096b0:	3304      	adds	r3, #4
 80096b2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80096b4:	68fb      	ldr	r3, [r7, #12]
 80096b6:	2200      	movs	r2, #0
 80096b8:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 80096ba:	68fb      	ldr	r3, [r7, #12]
 80096bc:	2201      	movs	r2, #1
 80096be:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80096c0:	78fb      	ldrb	r3, [r7, #3]
 80096c2:	f003 030f 	and.w	r3, r3, #15
 80096c6:	b2da      	uxtb	r2, r3
 80096c8:	68fb      	ldr	r3, [r7, #12]
 80096ca:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80096cc:	687b      	ldr	r3, [r7, #4]
 80096ce:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80096d2:	2b01      	cmp	r3, #1
 80096d4:	d101      	bne.n	80096da <HAL_PCD_EP_SetStall+0x82>
 80096d6:	2302      	movs	r3, #2
 80096d8:	e01e      	b.n	8009718 <HAL_PCD_EP_SetStall+0xc0>
 80096da:	687b      	ldr	r3, [r7, #4]
 80096dc:	2201      	movs	r2, #1
 80096de:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 80096e2:	687b      	ldr	r3, [r7, #4]
 80096e4:	681b      	ldr	r3, [r3, #0]
 80096e6:	68f9      	ldr	r1, [r7, #12]
 80096e8:	4618      	mov	r0, r3
 80096ea:	f009 fef3 	bl	80134d4 <USB_EPSetStall>
  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80096ee:	78fb      	ldrb	r3, [r7, #3]
 80096f0:	f003 030f 	and.w	r3, r3, #15
 80096f4:	2b00      	cmp	r3, #0
 80096f6:	d10a      	bne.n	800970e <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 80096f8:	687b      	ldr	r3, [r7, #4]
 80096fa:	6818      	ldr	r0, [r3, #0]
 80096fc:	687b      	ldr	r3, [r7, #4]
 80096fe:	691b      	ldr	r3, [r3, #16]
 8009700:	b2d9      	uxtb	r1, r3
 8009702:	687b      	ldr	r3, [r7, #4]
 8009704:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8009708:	461a      	mov	r2, r3
 800970a:	f00a f8d3 	bl	80138b4 <USB_EP0_OutStart>
  }
  __HAL_UNLOCK(hpcd);
 800970e:	687b      	ldr	r3, [r7, #4]
 8009710:	2200      	movs	r2, #0
 8009712:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8009716:	2300      	movs	r3, #0
}
 8009718:	4618      	mov	r0, r3
 800971a:	3710      	adds	r7, #16
 800971c:	46bd      	mov	sp, r7
 800971e:	bd80      	pop	{r7, pc}

08009720 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8009720:	b580      	push	{r7, lr}
 8009722:	b084      	sub	sp, #16
 8009724:	af00      	add	r7, sp, #0
 8009726:	6078      	str	r0, [r7, #4]
 8009728:	460b      	mov	r3, r1
 800972a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 800972c:	78fb      	ldrb	r3, [r7, #3]
 800972e:	f003 020f 	and.w	r2, r3, #15
 8009732:	687b      	ldr	r3, [r7, #4]
 8009734:	685b      	ldr	r3, [r3, #4]
 8009736:	429a      	cmp	r2, r3
 8009738:	d901      	bls.n	800973e <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 800973a:	2301      	movs	r3, #1
 800973c:	e042      	b.n	80097c4 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800973e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8009742:	2b00      	cmp	r3, #0
 8009744:	da0f      	bge.n	8009766 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8009746:	78fb      	ldrb	r3, [r7, #3]
 8009748:	f003 020f 	and.w	r2, r3, #15
 800974c:	4613      	mov	r3, r2
 800974e:	00db      	lsls	r3, r3, #3
 8009750:	1a9b      	subs	r3, r3, r2
 8009752:	009b      	lsls	r3, r3, #2
 8009754:	3338      	adds	r3, #56	; 0x38
 8009756:	687a      	ldr	r2, [r7, #4]
 8009758:	4413      	add	r3, r2
 800975a:	3304      	adds	r3, #4
 800975c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800975e:	68fb      	ldr	r3, [r7, #12]
 8009760:	2201      	movs	r2, #1
 8009762:	705a      	strb	r2, [r3, #1]
 8009764:	e00f      	b.n	8009786 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8009766:	78fb      	ldrb	r3, [r7, #3]
 8009768:	f003 020f 	and.w	r2, r3, #15
 800976c:	4613      	mov	r3, r2
 800976e:	00db      	lsls	r3, r3, #3
 8009770:	1a9b      	subs	r3, r3, r2
 8009772:	009b      	lsls	r3, r3, #2
 8009774:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8009778:	687a      	ldr	r2, [r7, #4]
 800977a:	4413      	add	r3, r2
 800977c:	3304      	adds	r3, #4
 800977e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8009780:	68fb      	ldr	r3, [r7, #12]
 8009782:	2200      	movs	r2, #0
 8009784:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8009786:	68fb      	ldr	r3, [r7, #12]
 8009788:	2200      	movs	r2, #0
 800978a:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800978c:	78fb      	ldrb	r3, [r7, #3]
 800978e:	f003 030f 	and.w	r3, r3, #15
 8009792:	b2da      	uxtb	r2, r3
 8009794:	68fb      	ldr	r3, [r7, #12]
 8009796:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8009798:	687b      	ldr	r3, [r7, #4]
 800979a:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800979e:	2b01      	cmp	r3, #1
 80097a0:	d101      	bne.n	80097a6 <HAL_PCD_EP_ClrStall+0x86>
 80097a2:	2302      	movs	r3, #2
 80097a4:	e00e      	b.n	80097c4 <HAL_PCD_EP_ClrStall+0xa4>
 80097a6:	687b      	ldr	r3, [r7, #4]
 80097a8:	2201      	movs	r2, #1
 80097aa:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80097ae:	687b      	ldr	r3, [r7, #4]
 80097b0:	681b      	ldr	r3, [r3, #0]
 80097b2:	68f9      	ldr	r1, [r7, #12]
 80097b4:	4618      	mov	r0, r3
 80097b6:	f009 fefb 	bl	80135b0 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 80097ba:	687b      	ldr	r3, [r7, #4]
 80097bc:	2200      	movs	r2, #0
 80097be:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 80097c2:	2300      	movs	r3, #0
}
 80097c4:	4618      	mov	r0, r3
 80097c6:	3710      	adds	r7, #16
 80097c8:	46bd      	mov	sp, r7
 80097ca:	bd80      	pop	{r7, pc}

080097cc <HAL_PCD_EP_Flush>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Flush(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80097cc:	b580      	push	{r7, lr}
 80097ce:	b082      	sub	sp, #8
 80097d0:	af00      	add	r7, sp, #0
 80097d2:	6078      	str	r0, [r7, #4]
 80097d4:	460b      	mov	r3, r1
 80097d6:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 80097d8:	687b      	ldr	r3, [r7, #4]
 80097da:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80097de:	2b01      	cmp	r3, #1
 80097e0:	d101      	bne.n	80097e6 <HAL_PCD_EP_Flush+0x1a>
 80097e2:	2302      	movs	r3, #2
 80097e4:	e01b      	b.n	800981e <HAL_PCD_EP_Flush+0x52>
 80097e6:	687b      	ldr	r3, [r7, #4]
 80097e8:	2201      	movs	r2, #1
 80097ea:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  if ((ep_addr & 0x80U) == 0x80U)
 80097ee:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80097f2:	2b00      	cmp	r3, #0
 80097f4:	da09      	bge.n	800980a <HAL_PCD_EP_Flush+0x3e>
  {
    (void)USB_FlushTxFifo(hpcd->Instance, (uint32_t)ep_addr & EP_ADDR_MSK);
 80097f6:	687b      	ldr	r3, [r7, #4]
 80097f8:	681a      	ldr	r2, [r3, #0]
 80097fa:	78fb      	ldrb	r3, [r7, #3]
 80097fc:	f003 030f 	and.w	r3, r3, #15
 8009800:	4619      	mov	r1, r3
 8009802:	4610      	mov	r0, r2
 8009804:	f009 f87a 	bl	80128fc <USB_FlushTxFifo>
 8009808:	e004      	b.n	8009814 <HAL_PCD_EP_Flush+0x48>
  }
  else
  {
    (void)USB_FlushRxFifo(hpcd->Instance);
 800980a:	687b      	ldr	r3, [r7, #4]
 800980c:	681b      	ldr	r3, [r3, #0]
 800980e:	4618      	mov	r0, r3
 8009810:	f009 f89a 	bl	8012948 <USB_FlushRxFifo>
  }

  __HAL_UNLOCK(hpcd);
 8009814:	687b      	ldr	r3, [r7, #4]
 8009816:	2200      	movs	r2, #0
 8009818:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 800981c:	2300      	movs	r3, #0
}
 800981e:	4618      	mov	r0, r3
 8009820:	3708      	adds	r7, #8
 8009822:	46bd      	mov	sp, r7
 8009824:	bd80      	pop	{r7, pc}

08009826 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8009826:	b580      	push	{r7, lr}
 8009828:	b08a      	sub	sp, #40	; 0x28
 800982a:	af02      	add	r7, sp, #8
 800982c:	6078      	str	r0, [r7, #4]
 800982e:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8009830:	687b      	ldr	r3, [r7, #4]
 8009832:	681b      	ldr	r3, [r3, #0]
 8009834:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009836:	697b      	ldr	r3, [r7, #20]
 8009838:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 800983a:	683a      	ldr	r2, [r7, #0]
 800983c:	4613      	mov	r3, r2
 800983e:	00db      	lsls	r3, r3, #3
 8009840:	1a9b      	subs	r3, r3, r2
 8009842:	009b      	lsls	r3, r3, #2
 8009844:	3338      	adds	r3, #56	; 0x38
 8009846:	687a      	ldr	r2, [r7, #4]
 8009848:	4413      	add	r3, r2
 800984a:	3304      	adds	r3, #4
 800984c:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 800984e:	68fb      	ldr	r3, [r7, #12]
 8009850:	699a      	ldr	r2, [r3, #24]
 8009852:	68fb      	ldr	r3, [r7, #12]
 8009854:	695b      	ldr	r3, [r3, #20]
 8009856:	429a      	cmp	r2, r3
 8009858:	d901      	bls.n	800985e <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 800985a:	2301      	movs	r3, #1
 800985c:	e06c      	b.n	8009938 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 800985e:	68fb      	ldr	r3, [r7, #12]
 8009860:	695a      	ldr	r2, [r3, #20]
 8009862:	68fb      	ldr	r3, [r7, #12]
 8009864:	699b      	ldr	r3, [r3, #24]
 8009866:	1ad3      	subs	r3, r2, r3
 8009868:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 800986a:	68fb      	ldr	r3, [r7, #12]
 800986c:	689b      	ldr	r3, [r3, #8]
 800986e:	69fa      	ldr	r2, [r7, #28]
 8009870:	429a      	cmp	r2, r3
 8009872:	d902      	bls.n	800987a <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8009874:	68fb      	ldr	r3, [r7, #12]
 8009876:	689b      	ldr	r3, [r3, #8]
 8009878:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 800987a:	69fb      	ldr	r3, [r7, #28]
 800987c:	3303      	adds	r3, #3
 800987e:	089b      	lsrs	r3, r3, #2
 8009880:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8009882:	e02b      	b.n	80098dc <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8009884:	68fb      	ldr	r3, [r7, #12]
 8009886:	695a      	ldr	r2, [r3, #20]
 8009888:	68fb      	ldr	r3, [r7, #12]
 800988a:	699b      	ldr	r3, [r3, #24]
 800988c:	1ad3      	subs	r3, r2, r3
 800988e:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8009890:	68fb      	ldr	r3, [r7, #12]
 8009892:	689b      	ldr	r3, [r3, #8]
 8009894:	69fa      	ldr	r2, [r7, #28]
 8009896:	429a      	cmp	r2, r3
 8009898:	d902      	bls.n	80098a0 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 800989a:	68fb      	ldr	r3, [r7, #12]
 800989c:	689b      	ldr	r3, [r3, #8]
 800989e:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 80098a0:	69fb      	ldr	r3, [r7, #28]
 80098a2:	3303      	adds	r3, #3
 80098a4:	089b      	lsrs	r3, r3, #2
 80098a6:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80098a8:	68fb      	ldr	r3, [r7, #12]
 80098aa:	68d9      	ldr	r1, [r3, #12]
 80098ac:	683b      	ldr	r3, [r7, #0]
 80098ae:	b2da      	uxtb	r2, r3
 80098b0:	69fb      	ldr	r3, [r7, #28]
 80098b2:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 80098b4:	687b      	ldr	r3, [r7, #4]
 80098b6:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80098b8:	b2db      	uxtb	r3, r3
 80098ba:	9300      	str	r3, [sp, #0]
 80098bc:	4603      	mov	r3, r0
 80098be:	6978      	ldr	r0, [r7, #20]
 80098c0:	f009 fdaa 	bl	8013418 <USB_WritePacket>

    ep->xfer_buff  += len;
 80098c4:	68fb      	ldr	r3, [r7, #12]
 80098c6:	68da      	ldr	r2, [r3, #12]
 80098c8:	69fb      	ldr	r3, [r7, #28]
 80098ca:	441a      	add	r2, r3
 80098cc:	68fb      	ldr	r3, [r7, #12]
 80098ce:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 80098d0:	68fb      	ldr	r3, [r7, #12]
 80098d2:	699a      	ldr	r2, [r3, #24]
 80098d4:	69fb      	ldr	r3, [r7, #28]
 80098d6:	441a      	add	r2, r3
 80098d8:	68fb      	ldr	r3, [r7, #12]
 80098da:	619a      	str	r2, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80098dc:	683b      	ldr	r3, [r7, #0]
 80098de:	015a      	lsls	r2, r3, #5
 80098e0:	693b      	ldr	r3, [r7, #16]
 80098e2:	4413      	add	r3, r2
 80098e4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80098e8:	699b      	ldr	r3, [r3, #24]
 80098ea:	b29b      	uxth	r3, r3
 80098ec:	69ba      	ldr	r2, [r7, #24]
 80098ee:	429a      	cmp	r2, r3
 80098f0:	d809      	bhi.n	8009906 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80098f2:	68fb      	ldr	r3, [r7, #12]
 80098f4:	699a      	ldr	r2, [r3, #24]
 80098f6:	68fb      	ldr	r3, [r7, #12]
 80098f8:	695b      	ldr	r3, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80098fa:	429a      	cmp	r2, r3
 80098fc:	d203      	bcs.n	8009906 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80098fe:	68fb      	ldr	r3, [r7, #12]
 8009900:	695b      	ldr	r3, [r3, #20]
 8009902:	2b00      	cmp	r3, #0
 8009904:	d1be      	bne.n	8009884 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8009906:	68fb      	ldr	r3, [r7, #12]
 8009908:	695a      	ldr	r2, [r3, #20]
 800990a:	68fb      	ldr	r3, [r7, #12]
 800990c:	699b      	ldr	r3, [r3, #24]
 800990e:	429a      	cmp	r2, r3
 8009910:	d811      	bhi.n	8009936 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8009912:	683b      	ldr	r3, [r7, #0]
 8009914:	f003 030f 	and.w	r3, r3, #15
 8009918:	2201      	movs	r2, #1
 800991a:	fa02 f303 	lsl.w	r3, r2, r3
 800991e:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8009920:	693b      	ldr	r3, [r7, #16]
 8009922:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009926:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009928:	68bb      	ldr	r3, [r7, #8]
 800992a:	43db      	mvns	r3, r3
 800992c:	6939      	ldr	r1, [r7, #16]
 800992e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8009932:	4013      	ands	r3, r2
 8009934:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8009936:	2300      	movs	r3, #0
}
 8009938:	4618      	mov	r0, r3
 800993a:	3720      	adds	r7, #32
 800993c:	46bd      	mov	sp, r7
 800993e:	bd80      	pop	{r7, pc}

08009940 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8009940:	b580      	push	{r7, lr}
 8009942:	b086      	sub	sp, #24
 8009944:	af00      	add	r7, sp, #0
 8009946:	6078      	str	r0, [r7, #4]
 8009948:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800994a:	687b      	ldr	r3, [r7, #4]
 800994c:	681b      	ldr	r3, [r3, #0]
 800994e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009950:	697b      	ldr	r3, [r7, #20]
 8009952:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8009954:	697b      	ldr	r3, [r7, #20]
 8009956:	333c      	adds	r3, #60	; 0x3c
 8009958:	3304      	adds	r3, #4
 800995a:	681b      	ldr	r3, [r3, #0]
 800995c:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800995e:	683b      	ldr	r3, [r7, #0]
 8009960:	015a      	lsls	r2, r3, #5
 8009962:	693b      	ldr	r3, [r7, #16]
 8009964:	4413      	add	r3, r2
 8009966:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800996a:	689b      	ldr	r3, [r3, #8]
 800996c:	60bb      	str	r3, [r7, #8]

  if (hpcd->Init.dma_enable == 1U)
 800996e:	687b      	ldr	r3, [r7, #4]
 8009970:	691b      	ldr	r3, [r3, #16]
 8009972:	2b01      	cmp	r3, #1
 8009974:	f040 80a0 	bne.w	8009ab8 <PCD_EP_OutXfrComplete_int+0x178>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8009978:	68bb      	ldr	r3, [r7, #8]
 800997a:	f003 0308 	and.w	r3, r3, #8
 800997e:	2b00      	cmp	r3, #0
 8009980:	d015      	beq.n	80099ae <PCD_EP_OutXfrComplete_int+0x6e>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8009982:	68fb      	ldr	r3, [r7, #12]
 8009984:	4a72      	ldr	r2, [pc, #456]	; (8009b50 <PCD_EP_OutXfrComplete_int+0x210>)
 8009986:	4293      	cmp	r3, r2
 8009988:	f240 80dd 	bls.w	8009b46 <PCD_EP_OutXfrComplete_int+0x206>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800998c:	68bb      	ldr	r3, [r7, #8]
 800998e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8009992:	2b00      	cmp	r3, #0
 8009994:	f000 80d7 	beq.w	8009b46 <PCD_EP_OutXfrComplete_int+0x206>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8009998:	683b      	ldr	r3, [r7, #0]
 800999a:	015a      	lsls	r2, r3, #5
 800999c:	693b      	ldr	r3, [r7, #16]
 800999e:	4413      	add	r3, r2
 80099a0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80099a4:	461a      	mov	r2, r3
 80099a6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80099aa:	6093      	str	r3, [r2, #8]
 80099ac:	e0cb      	b.n	8009b46 <PCD_EP_OutXfrComplete_int+0x206>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 80099ae:	68bb      	ldr	r3, [r7, #8]
 80099b0:	f003 0320 	and.w	r3, r3, #32
 80099b4:	2b00      	cmp	r3, #0
 80099b6:	d009      	beq.n	80099cc <PCD_EP_OutXfrComplete_int+0x8c>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80099b8:	683b      	ldr	r3, [r7, #0]
 80099ba:	015a      	lsls	r2, r3, #5
 80099bc:	693b      	ldr	r3, [r7, #16]
 80099be:	4413      	add	r3, r2
 80099c0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80099c4:	461a      	mov	r2, r3
 80099c6:	2320      	movs	r3, #32
 80099c8:	6093      	str	r3, [r2, #8]
 80099ca:	e0bc      	b.n	8009b46 <PCD_EP_OutXfrComplete_int+0x206>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 80099cc:	68bb      	ldr	r3, [r7, #8]
 80099ce:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80099d2:	2b00      	cmp	r3, #0
 80099d4:	f040 80b7 	bne.w	8009b46 <PCD_EP_OutXfrComplete_int+0x206>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80099d8:	68fb      	ldr	r3, [r7, #12]
 80099da:	4a5d      	ldr	r2, [pc, #372]	; (8009b50 <PCD_EP_OutXfrComplete_int+0x210>)
 80099dc:	4293      	cmp	r3, r2
 80099de:	d90f      	bls.n	8009a00 <PCD_EP_OutXfrComplete_int+0xc0>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80099e0:	68bb      	ldr	r3, [r7, #8]
 80099e2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80099e6:	2b00      	cmp	r3, #0
 80099e8:	d00a      	beq.n	8009a00 <PCD_EP_OutXfrComplete_int+0xc0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80099ea:	683b      	ldr	r3, [r7, #0]
 80099ec:	015a      	lsls	r2, r3, #5
 80099ee:	693b      	ldr	r3, [r7, #16]
 80099f0:	4413      	add	r3, r2
 80099f2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80099f6:	461a      	mov	r2, r3
 80099f8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80099fc:	6093      	str	r3, [r2, #8]
 80099fe:	e0a2      	b.n	8009b46 <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        /* out data packet received over EP0 */
        hpcd->OUT_ep[epnum].xfer_count =
          hpcd->OUT_ep[epnum].maxpacket -
 8009a00:	6879      	ldr	r1, [r7, #4]
 8009a02:	683a      	ldr	r2, [r7, #0]
 8009a04:	4613      	mov	r3, r2
 8009a06:	00db      	lsls	r3, r3, #3
 8009a08:	1a9b      	subs	r3, r3, r2
 8009a0a:	009b      	lsls	r3, r3, #2
 8009a0c:	440b      	add	r3, r1
 8009a0e:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8009a12:	681a      	ldr	r2, [r3, #0]
          (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8009a14:	683b      	ldr	r3, [r7, #0]
 8009a16:	0159      	lsls	r1, r3, #5
 8009a18:	693b      	ldr	r3, [r7, #16]
 8009a1a:	440b      	add	r3, r1
 8009a1c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009a20:	691b      	ldr	r3, [r3, #16]
 8009a22:	f3c3 0312 	ubfx	r3, r3, #0, #19
          hpcd->OUT_ep[epnum].maxpacket -
 8009a26:	1ad1      	subs	r1, r2, r3
        hpcd->OUT_ep[epnum].xfer_count =
 8009a28:	6878      	ldr	r0, [r7, #4]
 8009a2a:	683a      	ldr	r2, [r7, #0]
 8009a2c:	4613      	mov	r3, r2
 8009a2e:	00db      	lsls	r3, r3, #3
 8009a30:	1a9b      	subs	r3, r3, r2
 8009a32:	009b      	lsls	r3, r3, #2
 8009a34:	4403      	add	r3, r0
 8009a36:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8009a3a:	6019      	str	r1, [r3, #0]

        hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;
 8009a3c:	6879      	ldr	r1, [r7, #4]
 8009a3e:	683a      	ldr	r2, [r7, #0]
 8009a40:	4613      	mov	r3, r2
 8009a42:	00db      	lsls	r3, r3, #3
 8009a44:	1a9b      	subs	r3, r3, r2
 8009a46:	009b      	lsls	r3, r3, #2
 8009a48:	440b      	add	r3, r1
 8009a4a:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8009a4e:	6819      	ldr	r1, [r3, #0]
 8009a50:	6878      	ldr	r0, [r7, #4]
 8009a52:	683a      	ldr	r2, [r7, #0]
 8009a54:	4613      	mov	r3, r2
 8009a56:	00db      	lsls	r3, r3, #3
 8009a58:	1a9b      	subs	r3, r3, r2
 8009a5a:	009b      	lsls	r3, r3, #2
 8009a5c:	4403      	add	r3, r0
 8009a5e:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8009a62:	681b      	ldr	r3, [r3, #0]
 8009a64:	4419      	add	r1, r3
 8009a66:	6878      	ldr	r0, [r7, #4]
 8009a68:	683a      	ldr	r2, [r7, #0]
 8009a6a:	4613      	mov	r3, r2
 8009a6c:	00db      	lsls	r3, r3, #3
 8009a6e:	1a9b      	subs	r3, r3, r2
 8009a70:	009b      	lsls	r3, r3, #2
 8009a72:	4403      	add	r3, r0
 8009a74:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8009a78:	6019      	str	r1, [r3, #0]

        if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8009a7a:	683b      	ldr	r3, [r7, #0]
 8009a7c:	2b00      	cmp	r3, #0
 8009a7e:	d114      	bne.n	8009aaa <PCD_EP_OutXfrComplete_int+0x16a>
 8009a80:	6879      	ldr	r1, [r7, #4]
 8009a82:	683a      	ldr	r2, [r7, #0]
 8009a84:	4613      	mov	r3, r2
 8009a86:	00db      	lsls	r3, r3, #3
 8009a88:	1a9b      	subs	r3, r3, r2
 8009a8a:	009b      	lsls	r3, r3, #2
 8009a8c:	440b      	add	r3, r1
 8009a8e:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8009a92:	681b      	ldr	r3, [r3, #0]
 8009a94:	2b00      	cmp	r3, #0
 8009a96:	d108      	bne.n	8009aaa <PCD_EP_OutXfrComplete_int+0x16a>
        {
          /* this is ZLP, so prepare EP0 for next setup */
          (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8009a98:	687b      	ldr	r3, [r7, #4]
 8009a9a:	6818      	ldr	r0, [r3, #0]
 8009a9c:	687b      	ldr	r3, [r7, #4]
 8009a9e:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8009aa2:	461a      	mov	r2, r3
 8009aa4:	2101      	movs	r1, #1
 8009aa6:	f009 ff05 	bl	80138b4 <USB_EP0_OutStart>
        }
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8009aaa:	683b      	ldr	r3, [r7, #0]
 8009aac:	b2db      	uxtb	r3, r3
 8009aae:	4619      	mov	r1, r3
 8009ab0:	6878      	ldr	r0, [r7, #4]
 8009ab2:	f00f fdd7 	bl	8019664 <HAL_PCD_DataOutStageCallback>
 8009ab6:	e046      	b.n	8009b46 <PCD_EP_OutXfrComplete_int+0x206>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8009ab8:	68fb      	ldr	r3, [r7, #12]
 8009aba:	4a26      	ldr	r2, [pc, #152]	; (8009b54 <PCD_EP_OutXfrComplete_int+0x214>)
 8009abc:	4293      	cmp	r3, r2
 8009abe:	d124      	bne.n	8009b0a <PCD_EP_OutXfrComplete_int+0x1ca>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8009ac0:	68bb      	ldr	r3, [r7, #8]
 8009ac2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8009ac6:	2b00      	cmp	r3, #0
 8009ac8:	d00a      	beq.n	8009ae0 <PCD_EP_OutXfrComplete_int+0x1a0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8009aca:	683b      	ldr	r3, [r7, #0]
 8009acc:	015a      	lsls	r2, r3, #5
 8009ace:	693b      	ldr	r3, [r7, #16]
 8009ad0:	4413      	add	r3, r2
 8009ad2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009ad6:	461a      	mov	r2, r3
 8009ad8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009adc:	6093      	str	r3, [r2, #8]
 8009ade:	e032      	b.n	8009b46 <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8009ae0:	68bb      	ldr	r3, [r7, #8]
 8009ae2:	f003 0320 	and.w	r3, r3, #32
 8009ae6:	2b00      	cmp	r3, #0
 8009ae8:	d008      	beq.n	8009afc <PCD_EP_OutXfrComplete_int+0x1bc>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8009aea:	683b      	ldr	r3, [r7, #0]
 8009aec:	015a      	lsls	r2, r3, #5
 8009aee:	693b      	ldr	r3, [r7, #16]
 8009af0:	4413      	add	r3, r2
 8009af2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009af6:	461a      	mov	r2, r3
 8009af8:	2320      	movs	r3, #32
 8009afa:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8009afc:	683b      	ldr	r3, [r7, #0]
 8009afe:	b2db      	uxtb	r3, r3
 8009b00:	4619      	mov	r1, r3
 8009b02:	6878      	ldr	r0, [r7, #4]
 8009b04:	f00f fdae 	bl	8019664 <HAL_PCD_DataOutStageCallback>
 8009b08:	e01d      	b.n	8009b46 <PCD_EP_OutXfrComplete_int+0x206>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8009b0a:	683b      	ldr	r3, [r7, #0]
 8009b0c:	2b00      	cmp	r3, #0
 8009b0e:	d114      	bne.n	8009b3a <PCD_EP_OutXfrComplete_int+0x1fa>
 8009b10:	6879      	ldr	r1, [r7, #4]
 8009b12:	683a      	ldr	r2, [r7, #0]
 8009b14:	4613      	mov	r3, r2
 8009b16:	00db      	lsls	r3, r3, #3
 8009b18:	1a9b      	subs	r3, r3, r2
 8009b1a:	009b      	lsls	r3, r3, #2
 8009b1c:	440b      	add	r3, r1
 8009b1e:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8009b22:	681b      	ldr	r3, [r3, #0]
 8009b24:	2b00      	cmp	r3, #0
 8009b26:	d108      	bne.n	8009b3a <PCD_EP_OutXfrComplete_int+0x1fa>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8009b28:	687b      	ldr	r3, [r7, #4]
 8009b2a:	6818      	ldr	r0, [r3, #0]
 8009b2c:	687b      	ldr	r3, [r7, #4]
 8009b2e:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8009b32:	461a      	mov	r2, r3
 8009b34:	2100      	movs	r1, #0
 8009b36:	f009 febd 	bl	80138b4 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8009b3a:	683b      	ldr	r3, [r7, #0]
 8009b3c:	b2db      	uxtb	r3, r3
 8009b3e:	4619      	mov	r1, r3
 8009b40:	6878      	ldr	r0, [r7, #4]
 8009b42:	f00f fd8f 	bl	8019664 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8009b46:	2300      	movs	r3, #0
}
 8009b48:	4618      	mov	r0, r3
 8009b4a:	3718      	adds	r7, #24
 8009b4c:	46bd      	mov	sp, r7
 8009b4e:	bd80      	pop	{r7, pc}
 8009b50:	4f54300a 	.word	0x4f54300a
 8009b54:	4f54310a 	.word	0x4f54310a

08009b58 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8009b58:	b580      	push	{r7, lr}
 8009b5a:	b086      	sub	sp, #24
 8009b5c:	af00      	add	r7, sp, #0
 8009b5e:	6078      	str	r0, [r7, #4]
 8009b60:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8009b62:	687b      	ldr	r3, [r7, #4]
 8009b64:	681b      	ldr	r3, [r3, #0]
 8009b66:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009b68:	697b      	ldr	r3, [r7, #20]
 8009b6a:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8009b6c:	697b      	ldr	r3, [r7, #20]
 8009b6e:	333c      	adds	r3, #60	; 0x3c
 8009b70:	3304      	adds	r3, #4
 8009b72:	681b      	ldr	r3, [r3, #0]
 8009b74:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8009b76:	683b      	ldr	r3, [r7, #0]
 8009b78:	015a      	lsls	r2, r3, #5
 8009b7a:	693b      	ldr	r3, [r7, #16]
 8009b7c:	4413      	add	r3, r2
 8009b7e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009b82:	689b      	ldr	r3, [r3, #8]
 8009b84:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8009b86:	68fb      	ldr	r3, [r7, #12]
 8009b88:	4a15      	ldr	r2, [pc, #84]	; (8009be0 <PCD_EP_OutSetupPacket_int+0x88>)
 8009b8a:	4293      	cmp	r3, r2
 8009b8c:	d90e      	bls.n	8009bac <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8009b8e:	68bb      	ldr	r3, [r7, #8]
 8009b90:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8009b94:	2b00      	cmp	r3, #0
 8009b96:	d009      	beq.n	8009bac <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8009b98:	683b      	ldr	r3, [r7, #0]
 8009b9a:	015a      	lsls	r2, r3, #5
 8009b9c:	693b      	ldr	r3, [r7, #16]
 8009b9e:	4413      	add	r3, r2
 8009ba0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009ba4:	461a      	mov	r2, r3
 8009ba6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009baa:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8009bac:	6878      	ldr	r0, [r7, #4]
 8009bae:	f00f fd47 	bl	8019640 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8009bb2:	68fb      	ldr	r3, [r7, #12]
 8009bb4:	4a0a      	ldr	r2, [pc, #40]	; (8009be0 <PCD_EP_OutSetupPacket_int+0x88>)
 8009bb6:	4293      	cmp	r3, r2
 8009bb8:	d90c      	bls.n	8009bd4 <PCD_EP_OutSetupPacket_int+0x7c>
 8009bba:	687b      	ldr	r3, [r7, #4]
 8009bbc:	691b      	ldr	r3, [r3, #16]
 8009bbe:	2b01      	cmp	r3, #1
 8009bc0:	d108      	bne.n	8009bd4 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8009bc2:	687b      	ldr	r3, [r7, #4]
 8009bc4:	6818      	ldr	r0, [r3, #0]
 8009bc6:	687b      	ldr	r3, [r7, #4]
 8009bc8:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8009bcc:	461a      	mov	r2, r3
 8009bce:	2101      	movs	r1, #1
 8009bd0:	f009 fe70 	bl	80138b4 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8009bd4:	2300      	movs	r3, #0
}
 8009bd6:	4618      	mov	r0, r3
 8009bd8:	3718      	adds	r7, #24
 8009bda:	46bd      	mov	sp, r7
 8009bdc:	bd80      	pop	{r7, pc}
 8009bde:	bf00      	nop
 8009be0:	4f54300a 	.word	0x4f54300a

08009be4 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8009be4:	b480      	push	{r7}
 8009be6:	b085      	sub	sp, #20
 8009be8:	af00      	add	r7, sp, #0
 8009bea:	6078      	str	r0, [r7, #4]
 8009bec:	460b      	mov	r3, r1
 8009bee:	70fb      	strb	r3, [r7, #3]
 8009bf0:	4613      	mov	r3, r2
 8009bf2:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8009bf4:	687b      	ldr	r3, [r7, #4]
 8009bf6:	681b      	ldr	r3, [r3, #0]
 8009bf8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009bfa:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8009bfc:	78fb      	ldrb	r3, [r7, #3]
 8009bfe:	2b00      	cmp	r3, #0
 8009c00:	d107      	bne.n	8009c12 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8009c02:	883b      	ldrh	r3, [r7, #0]
 8009c04:	0419      	lsls	r1, r3, #16
 8009c06:	687b      	ldr	r3, [r7, #4]
 8009c08:	681b      	ldr	r3, [r3, #0]
 8009c0a:	68ba      	ldr	r2, [r7, #8]
 8009c0c:	430a      	orrs	r2, r1
 8009c0e:	629a      	str	r2, [r3, #40]	; 0x28
 8009c10:	e028      	b.n	8009c64 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8009c12:	687b      	ldr	r3, [r7, #4]
 8009c14:	681b      	ldr	r3, [r3, #0]
 8009c16:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009c18:	0c1b      	lsrs	r3, r3, #16
 8009c1a:	68ba      	ldr	r2, [r7, #8]
 8009c1c:	4413      	add	r3, r2
 8009c1e:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8009c20:	2300      	movs	r3, #0
 8009c22:	73fb      	strb	r3, [r7, #15]
 8009c24:	e00d      	b.n	8009c42 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8009c26:	687b      	ldr	r3, [r7, #4]
 8009c28:	681a      	ldr	r2, [r3, #0]
 8009c2a:	7bfb      	ldrb	r3, [r7, #15]
 8009c2c:	3340      	adds	r3, #64	; 0x40
 8009c2e:	009b      	lsls	r3, r3, #2
 8009c30:	4413      	add	r3, r2
 8009c32:	685b      	ldr	r3, [r3, #4]
 8009c34:	0c1b      	lsrs	r3, r3, #16
 8009c36:	68ba      	ldr	r2, [r7, #8]
 8009c38:	4413      	add	r3, r2
 8009c3a:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8009c3c:	7bfb      	ldrb	r3, [r7, #15]
 8009c3e:	3301      	adds	r3, #1
 8009c40:	73fb      	strb	r3, [r7, #15]
 8009c42:	7bfa      	ldrb	r2, [r7, #15]
 8009c44:	78fb      	ldrb	r3, [r7, #3]
 8009c46:	3b01      	subs	r3, #1
 8009c48:	429a      	cmp	r2, r3
 8009c4a:	d3ec      	bcc.n	8009c26 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8009c4c:	883b      	ldrh	r3, [r7, #0]
 8009c4e:	0418      	lsls	r0, r3, #16
 8009c50:	687b      	ldr	r3, [r7, #4]
 8009c52:	6819      	ldr	r1, [r3, #0]
 8009c54:	78fb      	ldrb	r3, [r7, #3]
 8009c56:	3b01      	subs	r3, #1
 8009c58:	68ba      	ldr	r2, [r7, #8]
 8009c5a:	4302      	orrs	r2, r0
 8009c5c:	3340      	adds	r3, #64	; 0x40
 8009c5e:	009b      	lsls	r3, r3, #2
 8009c60:	440b      	add	r3, r1
 8009c62:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8009c64:	2300      	movs	r3, #0
}
 8009c66:	4618      	mov	r0, r3
 8009c68:	3714      	adds	r7, #20
 8009c6a:	46bd      	mov	sp, r7
 8009c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c70:	4770      	bx	lr

08009c72 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8009c72:	b480      	push	{r7}
 8009c74:	b083      	sub	sp, #12
 8009c76:	af00      	add	r7, sp, #0
 8009c78:	6078      	str	r0, [r7, #4]
 8009c7a:	460b      	mov	r3, r1
 8009c7c:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8009c7e:	687b      	ldr	r3, [r7, #4]
 8009c80:	681b      	ldr	r3, [r3, #0]
 8009c82:	887a      	ldrh	r2, [r7, #2]
 8009c84:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8009c86:	2300      	movs	r3, #0
}
 8009c88:	4618      	mov	r0, r3
 8009c8a:	370c      	adds	r7, #12
 8009c8c:	46bd      	mov	sp, r7
 8009c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c92:	4770      	bx	lr

08009c94 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8009c94:	b480      	push	{r7}
 8009c96:	b085      	sub	sp, #20
 8009c98:	af00      	add	r7, sp, #0
 8009c9a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8009c9c:	687b      	ldr	r3, [r7, #4]
 8009c9e:	681b      	ldr	r3, [r3, #0]
 8009ca0:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8009ca2:	687b      	ldr	r3, [r7, #4]
 8009ca4:	2201      	movs	r2, #1
 8009ca6:	f8c3 23fc 	str.w	r2, [r3, #1020]	; 0x3fc
  hpcd->LPM_State = LPM_L0;
 8009caa:	687b      	ldr	r3, [r7, #4]
 8009cac:	2200      	movs	r2, #0
 8009cae:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8009cb2:	68fb      	ldr	r3, [r7, #12]
 8009cb4:	699b      	ldr	r3, [r3, #24]
 8009cb6:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8009cba:	68fb      	ldr	r3, [r7, #12]
 8009cbc:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8009cbe:	68fb      	ldr	r3, [r7, #12]
 8009cc0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8009cc2:	4b05      	ldr	r3, [pc, #20]	; (8009cd8 <HAL_PCDEx_ActivateLPM+0x44>)
 8009cc4:	4313      	orrs	r3, r2
 8009cc6:	68fa      	ldr	r2, [r7, #12]
 8009cc8:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8009cca:	2300      	movs	r3, #0
}
 8009ccc:	4618      	mov	r0, r3
 8009cce:	3714      	adds	r7, #20
 8009cd0:	46bd      	mov	sp, r7
 8009cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cd6:	4770      	bx	lr
 8009cd8:	10000003 	.word	0x10000003

08009cdc <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8009cdc:	b480      	push	{r7}
 8009cde:	b083      	sub	sp, #12
 8009ce0:	af00      	add	r7, sp, #0
 8009ce2:	6078      	str	r0, [r7, #4]
 8009ce4:	460b      	mov	r3, r1
 8009ce6:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8009ce8:	bf00      	nop
 8009cea:	370c      	adds	r7, #12
 8009cec:	46bd      	mov	sp, r7
 8009cee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cf2:	4770      	bx	lr

08009cf4 <HAL_PWR_EnableBkUpAccess>:
  * @note   If the HSE divided by 2, 3, ..31 is used as the RTC clock, the
  *         Backup Domain Access should be kept enabled.
  * @retval None.
  */
void HAL_PWR_EnableBkUpAccess (void)
{
 8009cf4:	b480      	push	{r7}
 8009cf6:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT (PWR->CR1, PWR_CR1_DBP);
 8009cf8:	4b05      	ldr	r3, [pc, #20]	; (8009d10 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8009cfa:	681b      	ldr	r3, [r3, #0]
 8009cfc:	4a04      	ldr	r2, [pc, #16]	; (8009d10 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8009cfe:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009d02:	6013      	str	r3, [r2, #0]
}
 8009d04:	bf00      	nop
 8009d06:	46bd      	mov	sp, r7
 8009d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d0c:	4770      	bx	lr
 8009d0e:	bf00      	nop
 8009d10:	58024800 	.word	0x58024800

08009d14 <HAL_PWR_ConfigPVD>:
  *         driver. All combination are allowed: wake up only Cortex-M7, wake up
  *         only Cortex-M4 or wake up Cortex-M7 and Cortex-M4.
  * @retval None.
  */
void HAL_PWR_ConfigPVD (PWR_PVDTypeDef *sConfigPVD)
{
 8009d14:	b480      	push	{r7}
 8009d16:	b083      	sub	sp, #12
 8009d18:	af00      	add	r7, sp, #0
 8009d1a:	6078      	str	r0, [r7, #4]
  /* Check the PVD configuration parameter */
  if (sConfigPVD == NULL)
 8009d1c:	687b      	ldr	r3, [r7, #4]
 8009d1e:	2b00      	cmp	r3, #0
 8009d20:	d069      	beq.n	8009df6 <HAL_PWR_ConfigPVD+0xe2>
  /* Check the parameters */
  assert_param (IS_PWR_PVD_LEVEL (sConfigPVD->PVDLevel));
  assert_param (IS_PWR_PVD_MODE (sConfigPVD->Mode));

  /* Set PLS[7:5] bits according to PVDLevel value */
  MODIFY_REG (PWR->CR1, PWR_CR1_PLS, sConfigPVD->PVDLevel);
 8009d22:	4b38      	ldr	r3, [pc, #224]	; (8009e04 <HAL_PWR_ConfigPVD+0xf0>)
 8009d24:	681b      	ldr	r3, [r3, #0]
 8009d26:	f023 02e0 	bic.w	r2, r3, #224	; 0xe0
 8009d2a:	687b      	ldr	r3, [r7, #4]
 8009d2c:	681b      	ldr	r3, [r3, #0]
 8009d2e:	4935      	ldr	r1, [pc, #212]	; (8009e04 <HAL_PWR_ConfigPVD+0xf0>)
 8009d30:	4313      	orrs	r3, r2
 8009d32:	600b      	str	r3, [r1, #0]

  /* Clear previous config */
#if !defined (DUAL_CORE)
  __HAL_PWR_PVD_EXTI_DISABLE_EVENT ();
 8009d34:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8009d38:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009d3c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8009d40:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8009d44:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
  __HAL_PWR_PVD_EXTI_DISABLE_IT ();
 8009d48:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8009d4c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009d50:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8009d54:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8009d58:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
#endif /* !defined (DUAL_CORE) */

  __HAL_PWR_PVD_EXTI_DISABLE_RISING_EDGE ();
 8009d5c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8009d60:	681b      	ldr	r3, [r3, #0]
 8009d62:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8009d66:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8009d6a:	6013      	str	r3, [r2, #0]
  __HAL_PWR_PVD_EXTI_DISABLE_FALLING_EDGE ();
 8009d6c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8009d70:	685b      	ldr	r3, [r3, #4]
 8009d72:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8009d76:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8009d7a:	6053      	str	r3, [r2, #4]

#if !defined (DUAL_CORE)
  /* Interrupt mode configuration */
  if ((sConfigPVD->Mode & PVD_MODE_IT) == PVD_MODE_IT)
 8009d7c:	687b      	ldr	r3, [r7, #4]
 8009d7e:	685b      	ldr	r3, [r3, #4]
 8009d80:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8009d84:	2b00      	cmp	r3, #0
 8009d86:	d009      	beq.n	8009d9c <HAL_PWR_ConfigPVD+0x88>
  {
    __HAL_PWR_PVD_EXTI_ENABLE_IT ();
 8009d88:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8009d8c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009d90:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8009d94:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009d98:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
  }

  /* Event mode configuration */
  if ((sConfigPVD->Mode & PVD_MODE_EVT) == PVD_MODE_EVT)
 8009d9c:	687b      	ldr	r3, [r7, #4]
 8009d9e:	685b      	ldr	r3, [r3, #4]
 8009da0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009da4:	2b00      	cmp	r3, #0
 8009da6:	d009      	beq.n	8009dbc <HAL_PWR_ConfigPVD+0xa8>
  {
    __HAL_PWR_PVD_EXTI_ENABLE_EVENT ();
 8009da8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8009dac:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009db0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8009db4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009db8:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
  }
#endif /* !defined (DUAL_CORE) */

  /* Rising edge configuration */
  if ((sConfigPVD->Mode & PVD_RISING_EDGE) == PVD_RISING_EDGE)
 8009dbc:	687b      	ldr	r3, [r7, #4]
 8009dbe:	685b      	ldr	r3, [r3, #4]
 8009dc0:	f003 0301 	and.w	r3, r3, #1
 8009dc4:	2b00      	cmp	r3, #0
 8009dc6:	d007      	beq.n	8009dd8 <HAL_PWR_ConfigPVD+0xc4>
  {
    __HAL_PWR_PVD_EXTI_ENABLE_RISING_EDGE ();
 8009dc8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8009dcc:	681b      	ldr	r3, [r3, #0]
 8009dce:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8009dd2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009dd6:	6013      	str	r3, [r2, #0]
  }

  /* Falling edge configuration */
  if ((sConfigPVD->Mode & PVD_FALLING_EDGE) == PVD_FALLING_EDGE)
 8009dd8:	687b      	ldr	r3, [r7, #4]
 8009dda:	685b      	ldr	r3, [r3, #4]
 8009ddc:	f003 0302 	and.w	r3, r3, #2
 8009de0:	2b00      	cmp	r3, #0
 8009de2:	d009      	beq.n	8009df8 <HAL_PWR_ConfigPVD+0xe4>
  {
    __HAL_PWR_PVD_EXTI_ENABLE_FALLING_EDGE ();
 8009de4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8009de8:	685b      	ldr	r3, [r3, #4]
 8009dea:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8009dee:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009df2:	6053      	str	r3, [r2, #4]
 8009df4:	e000      	b.n	8009df8 <HAL_PWR_ConfigPVD+0xe4>
    return;
 8009df6:	bf00      	nop
  }
}
 8009df8:	370c      	adds	r7, #12
 8009dfa:	46bd      	mov	sp, r7
 8009dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e00:	4770      	bx	lr
 8009e02:	bf00      	nop
 8009e04:	58024800 	.word	0x58024800

08009e08 <HAL_PWR_EnablePVD>:
/**
  * @brief Enable the Programmable Voltage Detector (PVD).
  * @retval None.
  */
void HAL_PWR_EnablePVD (void)
{
 8009e08:	b480      	push	{r7}
 8009e0a:	af00      	add	r7, sp, #0
  /* Enable the power voltage detector */
  SET_BIT (PWR->CR1, PWR_CR1_PVDEN);
 8009e0c:	4b05      	ldr	r3, [pc, #20]	; (8009e24 <HAL_PWR_EnablePVD+0x1c>)
 8009e0e:	681b      	ldr	r3, [r3, #0]
 8009e10:	4a04      	ldr	r2, [pc, #16]	; (8009e24 <HAL_PWR_EnablePVD+0x1c>)
 8009e12:	f043 0310 	orr.w	r3, r3, #16
 8009e16:	6013      	str	r3, [r2, #0]
}
 8009e18:	bf00      	nop
 8009e1a:	46bd      	mov	sp, r7
 8009e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e20:	4770      	bx	lr
 8009e22:	bf00      	nop
 8009e24:	58024800 	.word	0x58024800

08009e28 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8009e28:	b580      	push	{r7, lr}
 8009e2a:	b084      	sub	sp, #16
 8009e2c:	af00      	add	r7, sp, #0
 8009e2e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8009e30:	4b19      	ldr	r3, [pc, #100]	; (8009e98 <HAL_PWREx_ConfigSupply+0x70>)
 8009e32:	68db      	ldr	r3, [r3, #12]
 8009e34:	f003 0304 	and.w	r3, r3, #4
 8009e38:	2b04      	cmp	r3, #4
 8009e3a:	d00a      	beq.n	8009e52 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8009e3c:	4b16      	ldr	r3, [pc, #88]	; (8009e98 <HAL_PWREx_ConfigSupply+0x70>)
 8009e3e:	68db      	ldr	r3, [r3, #12]
 8009e40:	f003 0307 	and.w	r3, r3, #7
 8009e44:	687a      	ldr	r2, [r7, #4]
 8009e46:	429a      	cmp	r2, r3
 8009e48:	d001      	beq.n	8009e4e <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8009e4a:	2301      	movs	r3, #1
 8009e4c:	e01f      	b.n	8009e8e <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8009e4e:	2300      	movs	r3, #0
 8009e50:	e01d      	b.n	8009e8e <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8009e52:	4b11      	ldr	r3, [pc, #68]	; (8009e98 <HAL_PWREx_ConfigSupply+0x70>)
 8009e54:	68db      	ldr	r3, [r3, #12]
 8009e56:	f023 0207 	bic.w	r2, r3, #7
 8009e5a:	490f      	ldr	r1, [pc, #60]	; (8009e98 <HAL_PWREx_ConfigSupply+0x70>)
 8009e5c:	687b      	ldr	r3, [r7, #4]
 8009e5e:	4313      	orrs	r3, r2
 8009e60:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8009e62:	f7fa ffa7 	bl	8004db4 <HAL_GetTick>
 8009e66:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8009e68:	e009      	b.n	8009e7e <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8009e6a:	f7fa ffa3 	bl	8004db4 <HAL_GetTick>
 8009e6e:	4602      	mov	r2, r0
 8009e70:	68fb      	ldr	r3, [r7, #12]
 8009e72:	1ad3      	subs	r3, r2, r3
 8009e74:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8009e78:	d901      	bls.n	8009e7e <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8009e7a:	2301      	movs	r3, #1
 8009e7c:	e007      	b.n	8009e8e <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8009e7e:	4b06      	ldr	r3, [pc, #24]	; (8009e98 <HAL_PWREx_ConfigSupply+0x70>)
 8009e80:	685b      	ldr	r3, [r3, #4]
 8009e82:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8009e86:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009e8a:	d1ee      	bne.n	8009e6a <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8009e8c:	2300      	movs	r3, #0
}
 8009e8e:	4618      	mov	r0, r3
 8009e90:	3710      	adds	r7, #16
 8009e92:	46bd      	mov	sp, r7
 8009e94:	bd80      	pop	{r7, pc}
 8009e96:	bf00      	nop
 8009e98:	58024800 	.word	0x58024800

08009e9c <HAL_PWREx_EnableUSBVoltageDetector>:
/**
  * @brief Enable the USB voltage level detector.
  * @retval None.
  */
void HAL_PWREx_EnableUSBVoltageDetector (void)
{
 8009e9c:	b480      	push	{r7}
 8009e9e:	af00      	add	r7, sp, #0
  /* Enable the USB voltage detector */
  SET_BIT (PWR->CR3, PWR_CR3_USB33DEN);
 8009ea0:	4b05      	ldr	r3, [pc, #20]	; (8009eb8 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 8009ea2:	68db      	ldr	r3, [r3, #12]
 8009ea4:	4a04      	ldr	r2, [pc, #16]	; (8009eb8 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 8009ea6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8009eaa:	60d3      	str	r3, [r2, #12]
}
 8009eac:	bf00      	nop
 8009eae:	46bd      	mov	sp, r7
 8009eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009eb4:	4770      	bx	lr
 8009eb6:	bf00      	nop
 8009eb8:	58024800 	.word	0x58024800

08009ebc <HAL_PWREx_PVD_AVD_IRQHandler>:
  * @brief  This function handles the PWR PVD/AVD interrupt request.
  * @note   This API should be called under the PVD_AVD_IRQHandler().
  * @retval None
  */
void HAL_PWREx_PVD_AVD_IRQHandler (void)
{
 8009ebc:	b580      	push	{r7, lr}
 8009ebe:	af00      	add	r7, sp, #0
  /* Check if the Programmable Voltage Detector is enabled (PVD) */
  if (READ_BIT (PWR->CR1, PWR_CR1_PVDEN) != 0U)
 8009ec0:	4b1b      	ldr	r3, [pc, #108]	; (8009f30 <HAL_PWREx_PVD_AVD_IRQHandler+0x74>)
 8009ec2:	681b      	ldr	r3, [r3, #0]
 8009ec4:	f003 0310 	and.w	r3, r3, #16
 8009ec8:	2b00      	cmp	r3, #0
 8009eca:	d014      	beq.n	8009ef6 <HAL_PWREx_PVD_AVD_IRQHandler+0x3a>
#if defined (DUAL_CORE)
    if (HAL_GetCurrentCPUID () == CM7_CPUID)
#endif /* defined (DUAL_CORE) */
    {
      /* Check PWR D1/CD EXTI flag */
      if (__HAL_PWR_PVD_EXTI_GET_FLAG () != 0U)
 8009ecc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8009ed0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009ed4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8009ed8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009edc:	d10b      	bne.n	8009ef6 <HAL_PWREx_PVD_AVD_IRQHandler+0x3a>
      {
        /* PWR PVD interrupt user callback */
        HAL_PWR_PVDCallback ();
 8009ede:	f7fa fa75 	bl	80043cc <HAL_PWR_PVDCallback>

        /* Clear PWR EXTI D1/CD pending bit */
        __HAL_PWR_PVD_EXTI_CLEAR_FLAG ();
 8009ee2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8009ee6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009eea:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8009eee:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009ef2:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    }
#endif /* defined (DUAL_CORE) */
  }

  /* Check if the Analog Voltage Detector is enabled (AVD) */
  if (READ_BIT (PWR->CR1, PWR_CR1_AVDEN) != 0U)
 8009ef6:	4b0e      	ldr	r3, [pc, #56]	; (8009f30 <HAL_PWREx_PVD_AVD_IRQHandler+0x74>)
 8009ef8:	681b      	ldr	r3, [r3, #0]
 8009efa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8009efe:	2b00      	cmp	r3, #0
 8009f00:	d014      	beq.n	8009f2c <HAL_PWREx_PVD_AVD_IRQHandler+0x70>
#if defined (DUAL_CORE)
    if (HAL_GetCurrentCPUID () == CM7_CPUID)
#endif /* defined (DUAL_CORE) */
    {
      /* Check PWR EXTI D1/CD flag */
      if (__HAL_PWR_AVD_EXTI_GET_FLAG () != 0U)
 8009f02:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8009f06:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009f0a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8009f0e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009f12:	d10b      	bne.n	8009f2c <HAL_PWREx_PVD_AVD_IRQHandler+0x70>
      {
        /* PWR AVD interrupt user callback */
        HAL_PWREx_AVDCallback ();
 8009f14:	f000 f80e 	bl	8009f34 <HAL_PWREx_AVDCallback>

        /* Clear PWR EXTI D1/CD pending bit */
        __HAL_PWR_AVD_EXTI_CLEAR_FLAG ();
 8009f18:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8009f1c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009f20:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8009f24:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009f28:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
        __HAL_PWR_AVD_EXTID2_CLEAR_FLAG ();
      }
    }
#endif /* defined (DUAL_CORE) */
  }
}
 8009f2c:	bf00      	nop
 8009f2e:	bd80      	pop	{r7, pc}
 8009f30:	58024800 	.word	0x58024800

08009f34 <HAL_PWREx_AVDCallback>:
/**
  * @brief PWR AVD interrupt callback.
  * @retval None.
  */
__weak void HAL_PWREx_AVDCallback (void)
{
 8009f34:	b480      	push	{r7}
 8009f36:	af00      	add	r7, sp, #0
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PWR_AVDCallback can be implemented in the user file
  */
}
 8009f38:	bf00      	nop
 8009f3a:	46bd      	mov	sp, r7
 8009f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f40:	4770      	bx	lr
	...

08009f44 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8009f44:	b580      	push	{r7, lr}
 8009f46:	b08c      	sub	sp, #48	; 0x30
 8009f48:	af00      	add	r7, sp, #0
 8009f4a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8009f4c:	687b      	ldr	r3, [r7, #4]
 8009f4e:	2b00      	cmp	r3, #0
 8009f50:	d101      	bne.n	8009f56 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8009f52:	2301      	movs	r3, #1
 8009f54:	e3ff      	b.n	800a756 <HAL_RCC_OscConfig+0x812>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8009f56:	687b      	ldr	r3, [r7, #4]
 8009f58:	681b      	ldr	r3, [r3, #0]
 8009f5a:	f003 0301 	and.w	r3, r3, #1
 8009f5e:	2b00      	cmp	r3, #0
 8009f60:	f000 8087 	beq.w	800a072 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8009f64:	4b99      	ldr	r3, [pc, #612]	; (800a1cc <HAL_RCC_OscConfig+0x288>)
 8009f66:	691b      	ldr	r3, [r3, #16]
 8009f68:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8009f6c:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8009f6e:	4b97      	ldr	r3, [pc, #604]	; (800a1cc <HAL_RCC_OscConfig+0x288>)
 8009f70:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009f72:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8009f74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009f76:	2b10      	cmp	r3, #16
 8009f78:	d007      	beq.n	8009f8a <HAL_RCC_OscConfig+0x46>
 8009f7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009f7c:	2b18      	cmp	r3, #24
 8009f7e:	d110      	bne.n	8009fa2 <HAL_RCC_OscConfig+0x5e>
 8009f80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009f82:	f003 0303 	and.w	r3, r3, #3
 8009f86:	2b02      	cmp	r3, #2
 8009f88:	d10b      	bne.n	8009fa2 <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8009f8a:	4b90      	ldr	r3, [pc, #576]	; (800a1cc <HAL_RCC_OscConfig+0x288>)
 8009f8c:	681b      	ldr	r3, [r3, #0]
 8009f8e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009f92:	2b00      	cmp	r3, #0
 8009f94:	d06c      	beq.n	800a070 <HAL_RCC_OscConfig+0x12c>
 8009f96:	687b      	ldr	r3, [r7, #4]
 8009f98:	685b      	ldr	r3, [r3, #4]
 8009f9a:	2b00      	cmp	r3, #0
 8009f9c:	d168      	bne.n	800a070 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8009f9e:	2301      	movs	r3, #1
 8009fa0:	e3d9      	b.n	800a756 <HAL_RCC_OscConfig+0x812>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8009fa2:	687b      	ldr	r3, [r7, #4]
 8009fa4:	685b      	ldr	r3, [r3, #4]
 8009fa6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009faa:	d106      	bne.n	8009fba <HAL_RCC_OscConfig+0x76>
 8009fac:	4b87      	ldr	r3, [pc, #540]	; (800a1cc <HAL_RCC_OscConfig+0x288>)
 8009fae:	681b      	ldr	r3, [r3, #0]
 8009fb0:	4a86      	ldr	r2, [pc, #536]	; (800a1cc <HAL_RCC_OscConfig+0x288>)
 8009fb2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009fb6:	6013      	str	r3, [r2, #0]
 8009fb8:	e02e      	b.n	800a018 <HAL_RCC_OscConfig+0xd4>
 8009fba:	687b      	ldr	r3, [r7, #4]
 8009fbc:	685b      	ldr	r3, [r3, #4]
 8009fbe:	2b00      	cmp	r3, #0
 8009fc0:	d10c      	bne.n	8009fdc <HAL_RCC_OscConfig+0x98>
 8009fc2:	4b82      	ldr	r3, [pc, #520]	; (800a1cc <HAL_RCC_OscConfig+0x288>)
 8009fc4:	681b      	ldr	r3, [r3, #0]
 8009fc6:	4a81      	ldr	r2, [pc, #516]	; (800a1cc <HAL_RCC_OscConfig+0x288>)
 8009fc8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8009fcc:	6013      	str	r3, [r2, #0]
 8009fce:	4b7f      	ldr	r3, [pc, #508]	; (800a1cc <HAL_RCC_OscConfig+0x288>)
 8009fd0:	681b      	ldr	r3, [r3, #0]
 8009fd2:	4a7e      	ldr	r2, [pc, #504]	; (800a1cc <HAL_RCC_OscConfig+0x288>)
 8009fd4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8009fd8:	6013      	str	r3, [r2, #0]
 8009fda:	e01d      	b.n	800a018 <HAL_RCC_OscConfig+0xd4>
 8009fdc:	687b      	ldr	r3, [r7, #4]
 8009fde:	685b      	ldr	r3, [r3, #4]
 8009fe0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8009fe4:	d10c      	bne.n	800a000 <HAL_RCC_OscConfig+0xbc>
 8009fe6:	4b79      	ldr	r3, [pc, #484]	; (800a1cc <HAL_RCC_OscConfig+0x288>)
 8009fe8:	681b      	ldr	r3, [r3, #0]
 8009fea:	4a78      	ldr	r2, [pc, #480]	; (800a1cc <HAL_RCC_OscConfig+0x288>)
 8009fec:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8009ff0:	6013      	str	r3, [r2, #0]
 8009ff2:	4b76      	ldr	r3, [pc, #472]	; (800a1cc <HAL_RCC_OscConfig+0x288>)
 8009ff4:	681b      	ldr	r3, [r3, #0]
 8009ff6:	4a75      	ldr	r2, [pc, #468]	; (800a1cc <HAL_RCC_OscConfig+0x288>)
 8009ff8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009ffc:	6013      	str	r3, [r2, #0]
 8009ffe:	e00b      	b.n	800a018 <HAL_RCC_OscConfig+0xd4>
 800a000:	4b72      	ldr	r3, [pc, #456]	; (800a1cc <HAL_RCC_OscConfig+0x288>)
 800a002:	681b      	ldr	r3, [r3, #0]
 800a004:	4a71      	ldr	r2, [pc, #452]	; (800a1cc <HAL_RCC_OscConfig+0x288>)
 800a006:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800a00a:	6013      	str	r3, [r2, #0]
 800a00c:	4b6f      	ldr	r3, [pc, #444]	; (800a1cc <HAL_RCC_OscConfig+0x288>)
 800a00e:	681b      	ldr	r3, [r3, #0]
 800a010:	4a6e      	ldr	r2, [pc, #440]	; (800a1cc <HAL_RCC_OscConfig+0x288>)
 800a012:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800a016:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800a018:	687b      	ldr	r3, [r7, #4]
 800a01a:	685b      	ldr	r3, [r3, #4]
 800a01c:	2b00      	cmp	r3, #0
 800a01e:	d013      	beq.n	800a048 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a020:	f7fa fec8 	bl	8004db4 <HAL_GetTick>
 800a024:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800a026:	e008      	b.n	800a03a <HAL_RCC_OscConfig+0xf6>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800a028:	f7fa fec4 	bl	8004db4 <HAL_GetTick>
 800a02c:	4602      	mov	r2, r0
 800a02e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a030:	1ad3      	subs	r3, r2, r3
 800a032:	2b64      	cmp	r3, #100	; 0x64
 800a034:	d901      	bls.n	800a03a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800a036:	2303      	movs	r3, #3
 800a038:	e38d      	b.n	800a756 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800a03a:	4b64      	ldr	r3, [pc, #400]	; (800a1cc <HAL_RCC_OscConfig+0x288>)
 800a03c:	681b      	ldr	r3, [r3, #0]
 800a03e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a042:	2b00      	cmp	r3, #0
 800a044:	d0f0      	beq.n	800a028 <HAL_RCC_OscConfig+0xe4>
 800a046:	e014      	b.n	800a072 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a048:	f7fa feb4 	bl	8004db4 <HAL_GetTick>
 800a04c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800a04e:	e008      	b.n	800a062 <HAL_RCC_OscConfig+0x11e>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800a050:	f7fa feb0 	bl	8004db4 <HAL_GetTick>
 800a054:	4602      	mov	r2, r0
 800a056:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a058:	1ad3      	subs	r3, r2, r3
 800a05a:	2b64      	cmp	r3, #100	; 0x64
 800a05c:	d901      	bls.n	800a062 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800a05e:	2303      	movs	r3, #3
 800a060:	e379      	b.n	800a756 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800a062:	4b5a      	ldr	r3, [pc, #360]	; (800a1cc <HAL_RCC_OscConfig+0x288>)
 800a064:	681b      	ldr	r3, [r3, #0]
 800a066:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a06a:	2b00      	cmp	r3, #0
 800a06c:	d1f0      	bne.n	800a050 <HAL_RCC_OscConfig+0x10c>
 800a06e:	e000      	b.n	800a072 <HAL_RCC_OscConfig+0x12e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800a070:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800a072:	687b      	ldr	r3, [r7, #4]
 800a074:	681b      	ldr	r3, [r3, #0]
 800a076:	f003 0302 	and.w	r3, r3, #2
 800a07a:	2b00      	cmp	r3, #0
 800a07c:	f000 80ae 	beq.w	800a1dc <HAL_RCC_OscConfig+0x298>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800a080:	4b52      	ldr	r3, [pc, #328]	; (800a1cc <HAL_RCC_OscConfig+0x288>)
 800a082:	691b      	ldr	r3, [r3, #16]
 800a084:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800a088:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800a08a:	4b50      	ldr	r3, [pc, #320]	; (800a1cc <HAL_RCC_OscConfig+0x288>)
 800a08c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a08e:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 800a090:	6a3b      	ldr	r3, [r7, #32]
 800a092:	2b00      	cmp	r3, #0
 800a094:	d007      	beq.n	800a0a6 <HAL_RCC_OscConfig+0x162>
 800a096:	6a3b      	ldr	r3, [r7, #32]
 800a098:	2b18      	cmp	r3, #24
 800a09a:	d13a      	bne.n	800a112 <HAL_RCC_OscConfig+0x1ce>
 800a09c:	69fb      	ldr	r3, [r7, #28]
 800a09e:	f003 0303 	and.w	r3, r3, #3
 800a0a2:	2b00      	cmp	r3, #0
 800a0a4:	d135      	bne.n	800a112 <HAL_RCC_OscConfig+0x1ce>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800a0a6:	4b49      	ldr	r3, [pc, #292]	; (800a1cc <HAL_RCC_OscConfig+0x288>)
 800a0a8:	681b      	ldr	r3, [r3, #0]
 800a0aa:	f003 0304 	and.w	r3, r3, #4
 800a0ae:	2b00      	cmp	r3, #0
 800a0b0:	d005      	beq.n	800a0be <HAL_RCC_OscConfig+0x17a>
 800a0b2:	687b      	ldr	r3, [r7, #4]
 800a0b4:	68db      	ldr	r3, [r3, #12]
 800a0b6:	2b00      	cmp	r3, #0
 800a0b8:	d101      	bne.n	800a0be <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 800a0ba:	2301      	movs	r3, #1
 800a0bc:	e34b      	b.n	800a756 <HAL_RCC_OscConfig+0x812>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800a0be:	f7fa fea7 	bl	8004e10 <HAL_GetREVID>
 800a0c2:	4602      	mov	r2, r0
 800a0c4:	f241 0303 	movw	r3, #4099	; 0x1003
 800a0c8:	429a      	cmp	r2, r3
 800a0ca:	d817      	bhi.n	800a0fc <HAL_RCC_OscConfig+0x1b8>
 800a0cc:	687b      	ldr	r3, [r7, #4]
 800a0ce:	691b      	ldr	r3, [r3, #16]
 800a0d0:	2b40      	cmp	r3, #64	; 0x40
 800a0d2:	d108      	bne.n	800a0e6 <HAL_RCC_OscConfig+0x1a2>
 800a0d4:	4b3d      	ldr	r3, [pc, #244]	; (800a1cc <HAL_RCC_OscConfig+0x288>)
 800a0d6:	685b      	ldr	r3, [r3, #4]
 800a0d8:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 800a0dc:	4a3b      	ldr	r2, [pc, #236]	; (800a1cc <HAL_RCC_OscConfig+0x288>)
 800a0de:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a0e2:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800a0e4:	e07a      	b.n	800a1dc <HAL_RCC_OscConfig+0x298>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800a0e6:	4b39      	ldr	r3, [pc, #228]	; (800a1cc <HAL_RCC_OscConfig+0x288>)
 800a0e8:	685b      	ldr	r3, [r3, #4]
 800a0ea:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800a0ee:	687b      	ldr	r3, [r7, #4]
 800a0f0:	691b      	ldr	r3, [r3, #16]
 800a0f2:	031b      	lsls	r3, r3, #12
 800a0f4:	4935      	ldr	r1, [pc, #212]	; (800a1cc <HAL_RCC_OscConfig+0x288>)
 800a0f6:	4313      	orrs	r3, r2
 800a0f8:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800a0fa:	e06f      	b.n	800a1dc <HAL_RCC_OscConfig+0x298>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800a0fc:	4b33      	ldr	r3, [pc, #204]	; (800a1cc <HAL_RCC_OscConfig+0x288>)
 800a0fe:	685b      	ldr	r3, [r3, #4]
 800a100:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800a104:	687b      	ldr	r3, [r7, #4]
 800a106:	691b      	ldr	r3, [r3, #16]
 800a108:	061b      	lsls	r3, r3, #24
 800a10a:	4930      	ldr	r1, [pc, #192]	; (800a1cc <HAL_RCC_OscConfig+0x288>)
 800a10c:	4313      	orrs	r3, r2
 800a10e:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800a110:	e064      	b.n	800a1dc <HAL_RCC_OscConfig+0x298>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800a112:	687b      	ldr	r3, [r7, #4]
 800a114:	68db      	ldr	r3, [r3, #12]
 800a116:	2b00      	cmp	r3, #0
 800a118:	d045      	beq.n	800a1a6 <HAL_RCC_OscConfig+0x262>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800a11a:	4b2c      	ldr	r3, [pc, #176]	; (800a1cc <HAL_RCC_OscConfig+0x288>)
 800a11c:	681b      	ldr	r3, [r3, #0]
 800a11e:	f023 0219 	bic.w	r2, r3, #25
 800a122:	687b      	ldr	r3, [r7, #4]
 800a124:	68db      	ldr	r3, [r3, #12]
 800a126:	4929      	ldr	r1, [pc, #164]	; (800a1cc <HAL_RCC_OscConfig+0x288>)
 800a128:	4313      	orrs	r3, r2
 800a12a:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a12c:	f7fa fe42 	bl	8004db4 <HAL_GetTick>
 800a130:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800a132:	e008      	b.n	800a146 <HAL_RCC_OscConfig+0x202>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800a134:	f7fa fe3e 	bl	8004db4 <HAL_GetTick>
 800a138:	4602      	mov	r2, r0
 800a13a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a13c:	1ad3      	subs	r3, r2, r3
 800a13e:	2b02      	cmp	r3, #2
 800a140:	d901      	bls.n	800a146 <HAL_RCC_OscConfig+0x202>
          {
            return HAL_TIMEOUT;
 800a142:	2303      	movs	r3, #3
 800a144:	e307      	b.n	800a756 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800a146:	4b21      	ldr	r3, [pc, #132]	; (800a1cc <HAL_RCC_OscConfig+0x288>)
 800a148:	681b      	ldr	r3, [r3, #0]
 800a14a:	f003 0304 	and.w	r3, r3, #4
 800a14e:	2b00      	cmp	r3, #0
 800a150:	d0f0      	beq.n	800a134 <HAL_RCC_OscConfig+0x1f0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800a152:	f7fa fe5d 	bl	8004e10 <HAL_GetREVID>
 800a156:	4602      	mov	r2, r0
 800a158:	f241 0303 	movw	r3, #4099	; 0x1003
 800a15c:	429a      	cmp	r2, r3
 800a15e:	d817      	bhi.n	800a190 <HAL_RCC_OscConfig+0x24c>
 800a160:	687b      	ldr	r3, [r7, #4]
 800a162:	691b      	ldr	r3, [r3, #16]
 800a164:	2b40      	cmp	r3, #64	; 0x40
 800a166:	d108      	bne.n	800a17a <HAL_RCC_OscConfig+0x236>
 800a168:	4b18      	ldr	r3, [pc, #96]	; (800a1cc <HAL_RCC_OscConfig+0x288>)
 800a16a:	685b      	ldr	r3, [r3, #4]
 800a16c:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 800a170:	4a16      	ldr	r2, [pc, #88]	; (800a1cc <HAL_RCC_OscConfig+0x288>)
 800a172:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a176:	6053      	str	r3, [r2, #4]
 800a178:	e030      	b.n	800a1dc <HAL_RCC_OscConfig+0x298>
 800a17a:	4b14      	ldr	r3, [pc, #80]	; (800a1cc <HAL_RCC_OscConfig+0x288>)
 800a17c:	685b      	ldr	r3, [r3, #4]
 800a17e:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800a182:	687b      	ldr	r3, [r7, #4]
 800a184:	691b      	ldr	r3, [r3, #16]
 800a186:	031b      	lsls	r3, r3, #12
 800a188:	4910      	ldr	r1, [pc, #64]	; (800a1cc <HAL_RCC_OscConfig+0x288>)
 800a18a:	4313      	orrs	r3, r2
 800a18c:	604b      	str	r3, [r1, #4]
 800a18e:	e025      	b.n	800a1dc <HAL_RCC_OscConfig+0x298>
 800a190:	4b0e      	ldr	r3, [pc, #56]	; (800a1cc <HAL_RCC_OscConfig+0x288>)
 800a192:	685b      	ldr	r3, [r3, #4]
 800a194:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800a198:	687b      	ldr	r3, [r7, #4]
 800a19a:	691b      	ldr	r3, [r3, #16]
 800a19c:	061b      	lsls	r3, r3, #24
 800a19e:	490b      	ldr	r1, [pc, #44]	; (800a1cc <HAL_RCC_OscConfig+0x288>)
 800a1a0:	4313      	orrs	r3, r2
 800a1a2:	604b      	str	r3, [r1, #4]
 800a1a4:	e01a      	b.n	800a1dc <HAL_RCC_OscConfig+0x298>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800a1a6:	4b09      	ldr	r3, [pc, #36]	; (800a1cc <HAL_RCC_OscConfig+0x288>)
 800a1a8:	681b      	ldr	r3, [r3, #0]
 800a1aa:	4a08      	ldr	r2, [pc, #32]	; (800a1cc <HAL_RCC_OscConfig+0x288>)
 800a1ac:	f023 0301 	bic.w	r3, r3, #1
 800a1b0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a1b2:	f7fa fdff 	bl	8004db4 <HAL_GetTick>
 800a1b6:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800a1b8:	e00a      	b.n	800a1d0 <HAL_RCC_OscConfig+0x28c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800a1ba:	f7fa fdfb 	bl	8004db4 <HAL_GetTick>
 800a1be:	4602      	mov	r2, r0
 800a1c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a1c2:	1ad3      	subs	r3, r2, r3
 800a1c4:	2b02      	cmp	r3, #2
 800a1c6:	d903      	bls.n	800a1d0 <HAL_RCC_OscConfig+0x28c>
          {
            return HAL_TIMEOUT;
 800a1c8:	2303      	movs	r3, #3
 800a1ca:	e2c4      	b.n	800a756 <HAL_RCC_OscConfig+0x812>
 800a1cc:	58024400 	.word	0x58024400
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800a1d0:	4ba4      	ldr	r3, [pc, #656]	; (800a464 <HAL_RCC_OscConfig+0x520>)
 800a1d2:	681b      	ldr	r3, [r3, #0]
 800a1d4:	f003 0304 	and.w	r3, r3, #4
 800a1d8:	2b00      	cmp	r3, #0
 800a1da:	d1ee      	bne.n	800a1ba <HAL_RCC_OscConfig+0x276>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 800a1dc:	687b      	ldr	r3, [r7, #4]
 800a1de:	681b      	ldr	r3, [r3, #0]
 800a1e0:	f003 0310 	and.w	r3, r3, #16
 800a1e4:	2b00      	cmp	r3, #0
 800a1e6:	f000 80a9 	beq.w	800a33c <HAL_RCC_OscConfig+0x3f8>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800a1ea:	4b9e      	ldr	r3, [pc, #632]	; (800a464 <HAL_RCC_OscConfig+0x520>)
 800a1ec:	691b      	ldr	r3, [r3, #16]
 800a1ee:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800a1f2:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800a1f4:	4b9b      	ldr	r3, [pc, #620]	; (800a464 <HAL_RCC_OscConfig+0x520>)
 800a1f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a1f8:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 800a1fa:	69bb      	ldr	r3, [r7, #24]
 800a1fc:	2b08      	cmp	r3, #8
 800a1fe:	d007      	beq.n	800a210 <HAL_RCC_OscConfig+0x2cc>
 800a200:	69bb      	ldr	r3, [r7, #24]
 800a202:	2b18      	cmp	r3, #24
 800a204:	d13a      	bne.n	800a27c <HAL_RCC_OscConfig+0x338>
 800a206:	697b      	ldr	r3, [r7, #20]
 800a208:	f003 0303 	and.w	r3, r3, #3
 800a20c:	2b01      	cmp	r3, #1
 800a20e:	d135      	bne.n	800a27c <HAL_RCC_OscConfig+0x338>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800a210:	4b94      	ldr	r3, [pc, #592]	; (800a464 <HAL_RCC_OscConfig+0x520>)
 800a212:	681b      	ldr	r3, [r3, #0]
 800a214:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a218:	2b00      	cmp	r3, #0
 800a21a:	d005      	beq.n	800a228 <HAL_RCC_OscConfig+0x2e4>
 800a21c:	687b      	ldr	r3, [r7, #4]
 800a21e:	69db      	ldr	r3, [r3, #28]
 800a220:	2b80      	cmp	r3, #128	; 0x80
 800a222:	d001      	beq.n	800a228 <HAL_RCC_OscConfig+0x2e4>
      {
        return HAL_ERROR;
 800a224:	2301      	movs	r3, #1
 800a226:	e296      	b.n	800a756 <HAL_RCC_OscConfig+0x812>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800a228:	f7fa fdf2 	bl	8004e10 <HAL_GetREVID>
 800a22c:	4602      	mov	r2, r0
 800a22e:	f241 0303 	movw	r3, #4099	; 0x1003
 800a232:	429a      	cmp	r2, r3
 800a234:	d817      	bhi.n	800a266 <HAL_RCC_OscConfig+0x322>
 800a236:	687b      	ldr	r3, [r7, #4]
 800a238:	6a1b      	ldr	r3, [r3, #32]
 800a23a:	2b20      	cmp	r3, #32
 800a23c:	d108      	bne.n	800a250 <HAL_RCC_OscConfig+0x30c>
 800a23e:	4b89      	ldr	r3, [pc, #548]	; (800a464 <HAL_RCC_OscConfig+0x520>)
 800a240:	685b      	ldr	r3, [r3, #4]
 800a242:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 800a246:	4a87      	ldr	r2, [pc, #540]	; (800a464 <HAL_RCC_OscConfig+0x520>)
 800a248:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800a24c:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800a24e:	e075      	b.n	800a33c <HAL_RCC_OscConfig+0x3f8>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800a250:	4b84      	ldr	r3, [pc, #528]	; (800a464 <HAL_RCC_OscConfig+0x520>)
 800a252:	685b      	ldr	r3, [r3, #4]
 800a254:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 800a258:	687b      	ldr	r3, [r7, #4]
 800a25a:	6a1b      	ldr	r3, [r3, #32]
 800a25c:	069b      	lsls	r3, r3, #26
 800a25e:	4981      	ldr	r1, [pc, #516]	; (800a464 <HAL_RCC_OscConfig+0x520>)
 800a260:	4313      	orrs	r3, r2
 800a262:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800a264:	e06a      	b.n	800a33c <HAL_RCC_OscConfig+0x3f8>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800a266:	4b7f      	ldr	r3, [pc, #508]	; (800a464 <HAL_RCC_OscConfig+0x520>)
 800a268:	68db      	ldr	r3, [r3, #12]
 800a26a:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 800a26e:	687b      	ldr	r3, [r7, #4]
 800a270:	6a1b      	ldr	r3, [r3, #32]
 800a272:	061b      	lsls	r3, r3, #24
 800a274:	497b      	ldr	r1, [pc, #492]	; (800a464 <HAL_RCC_OscConfig+0x520>)
 800a276:	4313      	orrs	r3, r2
 800a278:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800a27a:	e05f      	b.n	800a33c <HAL_RCC_OscConfig+0x3f8>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 800a27c:	687b      	ldr	r3, [r7, #4]
 800a27e:	69db      	ldr	r3, [r3, #28]
 800a280:	2b00      	cmp	r3, #0
 800a282:	d042      	beq.n	800a30a <HAL_RCC_OscConfig+0x3c6>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 800a284:	4b77      	ldr	r3, [pc, #476]	; (800a464 <HAL_RCC_OscConfig+0x520>)
 800a286:	681b      	ldr	r3, [r3, #0]
 800a288:	4a76      	ldr	r2, [pc, #472]	; (800a464 <HAL_RCC_OscConfig+0x520>)
 800a28a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a28e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a290:	f7fa fd90 	bl	8004db4 <HAL_GetTick>
 800a294:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800a296:	e008      	b.n	800a2aa <HAL_RCC_OscConfig+0x366>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 800a298:	f7fa fd8c 	bl	8004db4 <HAL_GetTick>
 800a29c:	4602      	mov	r2, r0
 800a29e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a2a0:	1ad3      	subs	r3, r2, r3
 800a2a2:	2b02      	cmp	r3, #2
 800a2a4:	d901      	bls.n	800a2aa <HAL_RCC_OscConfig+0x366>
          {
            return HAL_TIMEOUT;
 800a2a6:	2303      	movs	r3, #3
 800a2a8:	e255      	b.n	800a756 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800a2aa:	4b6e      	ldr	r3, [pc, #440]	; (800a464 <HAL_RCC_OscConfig+0x520>)
 800a2ac:	681b      	ldr	r3, [r3, #0]
 800a2ae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a2b2:	2b00      	cmp	r3, #0
 800a2b4:	d0f0      	beq.n	800a298 <HAL_RCC_OscConfig+0x354>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800a2b6:	f7fa fdab 	bl	8004e10 <HAL_GetREVID>
 800a2ba:	4602      	mov	r2, r0
 800a2bc:	f241 0303 	movw	r3, #4099	; 0x1003
 800a2c0:	429a      	cmp	r2, r3
 800a2c2:	d817      	bhi.n	800a2f4 <HAL_RCC_OscConfig+0x3b0>
 800a2c4:	687b      	ldr	r3, [r7, #4]
 800a2c6:	6a1b      	ldr	r3, [r3, #32]
 800a2c8:	2b20      	cmp	r3, #32
 800a2ca:	d108      	bne.n	800a2de <HAL_RCC_OscConfig+0x39a>
 800a2cc:	4b65      	ldr	r3, [pc, #404]	; (800a464 <HAL_RCC_OscConfig+0x520>)
 800a2ce:	685b      	ldr	r3, [r3, #4]
 800a2d0:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 800a2d4:	4a63      	ldr	r2, [pc, #396]	; (800a464 <HAL_RCC_OscConfig+0x520>)
 800a2d6:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800a2da:	6053      	str	r3, [r2, #4]
 800a2dc:	e02e      	b.n	800a33c <HAL_RCC_OscConfig+0x3f8>
 800a2de:	4b61      	ldr	r3, [pc, #388]	; (800a464 <HAL_RCC_OscConfig+0x520>)
 800a2e0:	685b      	ldr	r3, [r3, #4]
 800a2e2:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 800a2e6:	687b      	ldr	r3, [r7, #4]
 800a2e8:	6a1b      	ldr	r3, [r3, #32]
 800a2ea:	069b      	lsls	r3, r3, #26
 800a2ec:	495d      	ldr	r1, [pc, #372]	; (800a464 <HAL_RCC_OscConfig+0x520>)
 800a2ee:	4313      	orrs	r3, r2
 800a2f0:	604b      	str	r3, [r1, #4]
 800a2f2:	e023      	b.n	800a33c <HAL_RCC_OscConfig+0x3f8>
 800a2f4:	4b5b      	ldr	r3, [pc, #364]	; (800a464 <HAL_RCC_OscConfig+0x520>)
 800a2f6:	68db      	ldr	r3, [r3, #12]
 800a2f8:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 800a2fc:	687b      	ldr	r3, [r7, #4]
 800a2fe:	6a1b      	ldr	r3, [r3, #32]
 800a300:	061b      	lsls	r3, r3, #24
 800a302:	4958      	ldr	r1, [pc, #352]	; (800a464 <HAL_RCC_OscConfig+0x520>)
 800a304:	4313      	orrs	r3, r2
 800a306:	60cb      	str	r3, [r1, #12]
 800a308:	e018      	b.n	800a33c <HAL_RCC_OscConfig+0x3f8>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 800a30a:	4b56      	ldr	r3, [pc, #344]	; (800a464 <HAL_RCC_OscConfig+0x520>)
 800a30c:	681b      	ldr	r3, [r3, #0]
 800a30e:	4a55      	ldr	r2, [pc, #340]	; (800a464 <HAL_RCC_OscConfig+0x520>)
 800a310:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800a314:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a316:	f7fa fd4d 	bl	8004db4 <HAL_GetTick>
 800a31a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800a31c:	e008      	b.n	800a330 <HAL_RCC_OscConfig+0x3ec>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 800a31e:	f7fa fd49 	bl	8004db4 <HAL_GetTick>
 800a322:	4602      	mov	r2, r0
 800a324:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a326:	1ad3      	subs	r3, r2, r3
 800a328:	2b02      	cmp	r3, #2
 800a32a:	d901      	bls.n	800a330 <HAL_RCC_OscConfig+0x3ec>
          {
            return HAL_TIMEOUT;
 800a32c:	2303      	movs	r3, #3
 800a32e:	e212      	b.n	800a756 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800a330:	4b4c      	ldr	r3, [pc, #304]	; (800a464 <HAL_RCC_OscConfig+0x520>)
 800a332:	681b      	ldr	r3, [r3, #0]
 800a334:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a338:	2b00      	cmp	r3, #0
 800a33a:	d1f0      	bne.n	800a31e <HAL_RCC_OscConfig+0x3da>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800a33c:	687b      	ldr	r3, [r7, #4]
 800a33e:	681b      	ldr	r3, [r3, #0]
 800a340:	f003 0308 	and.w	r3, r3, #8
 800a344:	2b00      	cmp	r3, #0
 800a346:	d036      	beq.n	800a3b6 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800a348:	687b      	ldr	r3, [r7, #4]
 800a34a:	695b      	ldr	r3, [r3, #20]
 800a34c:	2b00      	cmp	r3, #0
 800a34e:	d019      	beq.n	800a384 <HAL_RCC_OscConfig+0x440>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800a350:	4b44      	ldr	r3, [pc, #272]	; (800a464 <HAL_RCC_OscConfig+0x520>)
 800a352:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a354:	4a43      	ldr	r2, [pc, #268]	; (800a464 <HAL_RCC_OscConfig+0x520>)
 800a356:	f043 0301 	orr.w	r3, r3, #1
 800a35a:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a35c:	f7fa fd2a 	bl	8004db4 <HAL_GetTick>
 800a360:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800a362:	e008      	b.n	800a376 <HAL_RCC_OscConfig+0x432>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800a364:	f7fa fd26 	bl	8004db4 <HAL_GetTick>
 800a368:	4602      	mov	r2, r0
 800a36a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a36c:	1ad3      	subs	r3, r2, r3
 800a36e:	2b02      	cmp	r3, #2
 800a370:	d901      	bls.n	800a376 <HAL_RCC_OscConfig+0x432>
        {
          return HAL_TIMEOUT;
 800a372:	2303      	movs	r3, #3
 800a374:	e1ef      	b.n	800a756 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800a376:	4b3b      	ldr	r3, [pc, #236]	; (800a464 <HAL_RCC_OscConfig+0x520>)
 800a378:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a37a:	f003 0302 	and.w	r3, r3, #2
 800a37e:	2b00      	cmp	r3, #0
 800a380:	d0f0      	beq.n	800a364 <HAL_RCC_OscConfig+0x420>
 800a382:	e018      	b.n	800a3b6 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800a384:	4b37      	ldr	r3, [pc, #220]	; (800a464 <HAL_RCC_OscConfig+0x520>)
 800a386:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a388:	4a36      	ldr	r2, [pc, #216]	; (800a464 <HAL_RCC_OscConfig+0x520>)
 800a38a:	f023 0301 	bic.w	r3, r3, #1
 800a38e:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a390:	f7fa fd10 	bl	8004db4 <HAL_GetTick>
 800a394:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800a396:	e008      	b.n	800a3aa <HAL_RCC_OscConfig+0x466>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800a398:	f7fa fd0c 	bl	8004db4 <HAL_GetTick>
 800a39c:	4602      	mov	r2, r0
 800a39e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a3a0:	1ad3      	subs	r3, r2, r3
 800a3a2:	2b02      	cmp	r3, #2
 800a3a4:	d901      	bls.n	800a3aa <HAL_RCC_OscConfig+0x466>
        {
          return HAL_TIMEOUT;
 800a3a6:	2303      	movs	r3, #3
 800a3a8:	e1d5      	b.n	800a756 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800a3aa:	4b2e      	ldr	r3, [pc, #184]	; (800a464 <HAL_RCC_OscConfig+0x520>)
 800a3ac:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a3ae:	f003 0302 	and.w	r3, r3, #2
 800a3b2:	2b00      	cmp	r3, #0
 800a3b4:	d1f0      	bne.n	800a398 <HAL_RCC_OscConfig+0x454>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800a3b6:	687b      	ldr	r3, [r7, #4]
 800a3b8:	681b      	ldr	r3, [r3, #0]
 800a3ba:	f003 0320 	and.w	r3, r3, #32
 800a3be:	2b00      	cmp	r3, #0
 800a3c0:	d036      	beq.n	800a430 <HAL_RCC_OscConfig+0x4ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 800a3c2:	687b      	ldr	r3, [r7, #4]
 800a3c4:	699b      	ldr	r3, [r3, #24]
 800a3c6:	2b00      	cmp	r3, #0
 800a3c8:	d019      	beq.n	800a3fe <HAL_RCC_OscConfig+0x4ba>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800a3ca:	4b26      	ldr	r3, [pc, #152]	; (800a464 <HAL_RCC_OscConfig+0x520>)
 800a3cc:	681b      	ldr	r3, [r3, #0]
 800a3ce:	4a25      	ldr	r2, [pc, #148]	; (800a464 <HAL_RCC_OscConfig+0x520>)
 800a3d0:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800a3d4:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800a3d6:	f7fa fced 	bl	8004db4 <HAL_GetTick>
 800a3da:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800a3dc:	e008      	b.n	800a3f0 <HAL_RCC_OscConfig+0x4ac>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 800a3de:	f7fa fce9 	bl	8004db4 <HAL_GetTick>
 800a3e2:	4602      	mov	r2, r0
 800a3e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a3e6:	1ad3      	subs	r3, r2, r3
 800a3e8:	2b02      	cmp	r3, #2
 800a3ea:	d901      	bls.n	800a3f0 <HAL_RCC_OscConfig+0x4ac>
        {
          return HAL_TIMEOUT;
 800a3ec:	2303      	movs	r3, #3
 800a3ee:	e1b2      	b.n	800a756 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800a3f0:	4b1c      	ldr	r3, [pc, #112]	; (800a464 <HAL_RCC_OscConfig+0x520>)
 800a3f2:	681b      	ldr	r3, [r3, #0]
 800a3f4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800a3f8:	2b00      	cmp	r3, #0
 800a3fa:	d0f0      	beq.n	800a3de <HAL_RCC_OscConfig+0x49a>
 800a3fc:	e018      	b.n	800a430 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800a3fe:	4b19      	ldr	r3, [pc, #100]	; (800a464 <HAL_RCC_OscConfig+0x520>)
 800a400:	681b      	ldr	r3, [r3, #0]
 800a402:	4a18      	ldr	r2, [pc, #96]	; (800a464 <HAL_RCC_OscConfig+0x520>)
 800a404:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800a408:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800a40a:	f7fa fcd3 	bl	8004db4 <HAL_GetTick>
 800a40e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800a410:	e008      	b.n	800a424 <HAL_RCC_OscConfig+0x4e0>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 800a412:	f7fa fccf 	bl	8004db4 <HAL_GetTick>
 800a416:	4602      	mov	r2, r0
 800a418:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a41a:	1ad3      	subs	r3, r2, r3
 800a41c:	2b02      	cmp	r3, #2
 800a41e:	d901      	bls.n	800a424 <HAL_RCC_OscConfig+0x4e0>
        {
          return HAL_TIMEOUT;
 800a420:	2303      	movs	r3, #3
 800a422:	e198      	b.n	800a756 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800a424:	4b0f      	ldr	r3, [pc, #60]	; (800a464 <HAL_RCC_OscConfig+0x520>)
 800a426:	681b      	ldr	r3, [r3, #0]
 800a428:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800a42c:	2b00      	cmp	r3, #0
 800a42e:	d1f0      	bne.n	800a412 <HAL_RCC_OscConfig+0x4ce>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800a430:	687b      	ldr	r3, [r7, #4]
 800a432:	681b      	ldr	r3, [r3, #0]
 800a434:	f003 0304 	and.w	r3, r3, #4
 800a438:	2b00      	cmp	r3, #0
 800a43a:	f000 8085 	beq.w	800a548 <HAL_RCC_OscConfig+0x604>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800a43e:	4b0a      	ldr	r3, [pc, #40]	; (800a468 <HAL_RCC_OscConfig+0x524>)
 800a440:	681b      	ldr	r3, [r3, #0]
 800a442:	4a09      	ldr	r2, [pc, #36]	; (800a468 <HAL_RCC_OscConfig+0x524>)
 800a444:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a448:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800a44a:	f7fa fcb3 	bl	8004db4 <HAL_GetTick>
 800a44e:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800a450:	e00c      	b.n	800a46c <HAL_RCC_OscConfig+0x528>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 800a452:	f7fa fcaf 	bl	8004db4 <HAL_GetTick>
 800a456:	4602      	mov	r2, r0
 800a458:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a45a:	1ad3      	subs	r3, r2, r3
 800a45c:	2b64      	cmp	r3, #100	; 0x64
 800a45e:	d905      	bls.n	800a46c <HAL_RCC_OscConfig+0x528>
      {
        return HAL_TIMEOUT;
 800a460:	2303      	movs	r3, #3
 800a462:	e178      	b.n	800a756 <HAL_RCC_OscConfig+0x812>
 800a464:	58024400 	.word	0x58024400
 800a468:	58024800 	.word	0x58024800
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800a46c:	4b96      	ldr	r3, [pc, #600]	; (800a6c8 <HAL_RCC_OscConfig+0x784>)
 800a46e:	681b      	ldr	r3, [r3, #0]
 800a470:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a474:	2b00      	cmp	r3, #0
 800a476:	d0ec      	beq.n	800a452 <HAL_RCC_OscConfig+0x50e>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800a478:	687b      	ldr	r3, [r7, #4]
 800a47a:	689b      	ldr	r3, [r3, #8]
 800a47c:	2b01      	cmp	r3, #1
 800a47e:	d106      	bne.n	800a48e <HAL_RCC_OscConfig+0x54a>
 800a480:	4b92      	ldr	r3, [pc, #584]	; (800a6cc <HAL_RCC_OscConfig+0x788>)
 800a482:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a484:	4a91      	ldr	r2, [pc, #580]	; (800a6cc <HAL_RCC_OscConfig+0x788>)
 800a486:	f043 0301 	orr.w	r3, r3, #1
 800a48a:	6713      	str	r3, [r2, #112]	; 0x70
 800a48c:	e02d      	b.n	800a4ea <HAL_RCC_OscConfig+0x5a6>
 800a48e:	687b      	ldr	r3, [r7, #4]
 800a490:	689b      	ldr	r3, [r3, #8]
 800a492:	2b00      	cmp	r3, #0
 800a494:	d10c      	bne.n	800a4b0 <HAL_RCC_OscConfig+0x56c>
 800a496:	4b8d      	ldr	r3, [pc, #564]	; (800a6cc <HAL_RCC_OscConfig+0x788>)
 800a498:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a49a:	4a8c      	ldr	r2, [pc, #560]	; (800a6cc <HAL_RCC_OscConfig+0x788>)
 800a49c:	f023 0301 	bic.w	r3, r3, #1
 800a4a0:	6713      	str	r3, [r2, #112]	; 0x70
 800a4a2:	4b8a      	ldr	r3, [pc, #552]	; (800a6cc <HAL_RCC_OscConfig+0x788>)
 800a4a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a4a6:	4a89      	ldr	r2, [pc, #548]	; (800a6cc <HAL_RCC_OscConfig+0x788>)
 800a4a8:	f023 0304 	bic.w	r3, r3, #4
 800a4ac:	6713      	str	r3, [r2, #112]	; 0x70
 800a4ae:	e01c      	b.n	800a4ea <HAL_RCC_OscConfig+0x5a6>
 800a4b0:	687b      	ldr	r3, [r7, #4]
 800a4b2:	689b      	ldr	r3, [r3, #8]
 800a4b4:	2b05      	cmp	r3, #5
 800a4b6:	d10c      	bne.n	800a4d2 <HAL_RCC_OscConfig+0x58e>
 800a4b8:	4b84      	ldr	r3, [pc, #528]	; (800a6cc <HAL_RCC_OscConfig+0x788>)
 800a4ba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a4bc:	4a83      	ldr	r2, [pc, #524]	; (800a6cc <HAL_RCC_OscConfig+0x788>)
 800a4be:	f043 0304 	orr.w	r3, r3, #4
 800a4c2:	6713      	str	r3, [r2, #112]	; 0x70
 800a4c4:	4b81      	ldr	r3, [pc, #516]	; (800a6cc <HAL_RCC_OscConfig+0x788>)
 800a4c6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a4c8:	4a80      	ldr	r2, [pc, #512]	; (800a6cc <HAL_RCC_OscConfig+0x788>)
 800a4ca:	f043 0301 	orr.w	r3, r3, #1
 800a4ce:	6713      	str	r3, [r2, #112]	; 0x70
 800a4d0:	e00b      	b.n	800a4ea <HAL_RCC_OscConfig+0x5a6>
 800a4d2:	4b7e      	ldr	r3, [pc, #504]	; (800a6cc <HAL_RCC_OscConfig+0x788>)
 800a4d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a4d6:	4a7d      	ldr	r2, [pc, #500]	; (800a6cc <HAL_RCC_OscConfig+0x788>)
 800a4d8:	f023 0301 	bic.w	r3, r3, #1
 800a4dc:	6713      	str	r3, [r2, #112]	; 0x70
 800a4de:	4b7b      	ldr	r3, [pc, #492]	; (800a6cc <HAL_RCC_OscConfig+0x788>)
 800a4e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a4e2:	4a7a      	ldr	r2, [pc, #488]	; (800a6cc <HAL_RCC_OscConfig+0x788>)
 800a4e4:	f023 0304 	bic.w	r3, r3, #4
 800a4e8:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800a4ea:	687b      	ldr	r3, [r7, #4]
 800a4ec:	689b      	ldr	r3, [r3, #8]
 800a4ee:	2b00      	cmp	r3, #0
 800a4f0:	d015      	beq.n	800a51e <HAL_RCC_OscConfig+0x5da>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a4f2:	f7fa fc5f 	bl	8004db4 <HAL_GetTick>
 800a4f6:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800a4f8:	e00a      	b.n	800a510 <HAL_RCC_OscConfig+0x5cc>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800a4fa:	f7fa fc5b 	bl	8004db4 <HAL_GetTick>
 800a4fe:	4602      	mov	r2, r0
 800a500:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a502:	1ad3      	subs	r3, r2, r3
 800a504:	f241 3288 	movw	r2, #5000	; 0x1388
 800a508:	4293      	cmp	r3, r2
 800a50a:	d901      	bls.n	800a510 <HAL_RCC_OscConfig+0x5cc>
        {
          return HAL_TIMEOUT;
 800a50c:	2303      	movs	r3, #3
 800a50e:	e122      	b.n	800a756 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800a510:	4b6e      	ldr	r3, [pc, #440]	; (800a6cc <HAL_RCC_OscConfig+0x788>)
 800a512:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a514:	f003 0302 	and.w	r3, r3, #2
 800a518:	2b00      	cmp	r3, #0
 800a51a:	d0ee      	beq.n	800a4fa <HAL_RCC_OscConfig+0x5b6>
 800a51c:	e014      	b.n	800a548 <HAL_RCC_OscConfig+0x604>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a51e:	f7fa fc49 	bl	8004db4 <HAL_GetTick>
 800a522:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800a524:	e00a      	b.n	800a53c <HAL_RCC_OscConfig+0x5f8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800a526:	f7fa fc45 	bl	8004db4 <HAL_GetTick>
 800a52a:	4602      	mov	r2, r0
 800a52c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a52e:	1ad3      	subs	r3, r2, r3
 800a530:	f241 3288 	movw	r2, #5000	; 0x1388
 800a534:	4293      	cmp	r3, r2
 800a536:	d901      	bls.n	800a53c <HAL_RCC_OscConfig+0x5f8>
        {
          return HAL_TIMEOUT;
 800a538:	2303      	movs	r3, #3
 800a53a:	e10c      	b.n	800a756 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800a53c:	4b63      	ldr	r3, [pc, #396]	; (800a6cc <HAL_RCC_OscConfig+0x788>)
 800a53e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a540:	f003 0302 	and.w	r3, r3, #2
 800a544:	2b00      	cmp	r3, #0
 800a546:	d1ee      	bne.n	800a526 <HAL_RCC_OscConfig+0x5e2>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800a548:	687b      	ldr	r3, [r7, #4]
 800a54a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a54c:	2b00      	cmp	r3, #0
 800a54e:	f000 8101 	beq.w	800a754 <HAL_RCC_OscConfig+0x810>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 800a552:	4b5e      	ldr	r3, [pc, #376]	; (800a6cc <HAL_RCC_OscConfig+0x788>)
 800a554:	691b      	ldr	r3, [r3, #16]
 800a556:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800a55a:	2b18      	cmp	r3, #24
 800a55c:	f000 80bc 	beq.w	800a6d8 <HAL_RCC_OscConfig+0x794>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800a560:	687b      	ldr	r3, [r7, #4]
 800a562:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a564:	2b02      	cmp	r3, #2
 800a566:	f040 8095 	bne.w	800a694 <HAL_RCC_OscConfig+0x750>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800a56a:	4b58      	ldr	r3, [pc, #352]	; (800a6cc <HAL_RCC_OscConfig+0x788>)
 800a56c:	681b      	ldr	r3, [r3, #0]
 800a56e:	4a57      	ldr	r2, [pc, #348]	; (800a6cc <HAL_RCC_OscConfig+0x788>)
 800a570:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800a574:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a576:	f7fa fc1d 	bl	8004db4 <HAL_GetTick>
 800a57a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800a57c:	e008      	b.n	800a590 <HAL_RCC_OscConfig+0x64c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800a57e:	f7fa fc19 	bl	8004db4 <HAL_GetTick>
 800a582:	4602      	mov	r2, r0
 800a584:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a586:	1ad3      	subs	r3, r2, r3
 800a588:	2b02      	cmp	r3, #2
 800a58a:	d901      	bls.n	800a590 <HAL_RCC_OscConfig+0x64c>
          {
            return HAL_TIMEOUT;
 800a58c:	2303      	movs	r3, #3
 800a58e:	e0e2      	b.n	800a756 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800a590:	4b4e      	ldr	r3, [pc, #312]	; (800a6cc <HAL_RCC_OscConfig+0x788>)
 800a592:	681b      	ldr	r3, [r3, #0]
 800a594:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a598:	2b00      	cmp	r3, #0
 800a59a:	d1f0      	bne.n	800a57e <HAL_RCC_OscConfig+0x63a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800a59c:	4b4b      	ldr	r3, [pc, #300]	; (800a6cc <HAL_RCC_OscConfig+0x788>)
 800a59e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800a5a0:	4b4b      	ldr	r3, [pc, #300]	; (800a6d0 <HAL_RCC_OscConfig+0x78c>)
 800a5a2:	4013      	ands	r3, r2
 800a5a4:	687a      	ldr	r2, [r7, #4]
 800a5a6:	6a91      	ldr	r1, [r2, #40]	; 0x28
 800a5a8:	687a      	ldr	r2, [r7, #4]
 800a5aa:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800a5ac:	0112      	lsls	r2, r2, #4
 800a5ae:	430a      	orrs	r2, r1
 800a5b0:	4946      	ldr	r1, [pc, #280]	; (800a6cc <HAL_RCC_OscConfig+0x788>)
 800a5b2:	4313      	orrs	r3, r2
 800a5b4:	628b      	str	r3, [r1, #40]	; 0x28
 800a5b6:	687b      	ldr	r3, [r7, #4]
 800a5b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a5ba:	3b01      	subs	r3, #1
 800a5bc:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800a5c0:	687b      	ldr	r3, [r7, #4]
 800a5c2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a5c4:	3b01      	subs	r3, #1
 800a5c6:	025b      	lsls	r3, r3, #9
 800a5c8:	b29b      	uxth	r3, r3
 800a5ca:	431a      	orrs	r2, r3
 800a5cc:	687b      	ldr	r3, [r7, #4]
 800a5ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a5d0:	3b01      	subs	r3, #1
 800a5d2:	041b      	lsls	r3, r3, #16
 800a5d4:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800a5d8:	431a      	orrs	r2, r3
 800a5da:	687b      	ldr	r3, [r7, #4]
 800a5dc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a5de:	3b01      	subs	r3, #1
 800a5e0:	061b      	lsls	r3, r3, #24
 800a5e2:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800a5e6:	4939      	ldr	r1, [pc, #228]	; (800a6cc <HAL_RCC_OscConfig+0x788>)
 800a5e8:	4313      	orrs	r3, r2
 800a5ea:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 800a5ec:	4b37      	ldr	r3, [pc, #220]	; (800a6cc <HAL_RCC_OscConfig+0x788>)
 800a5ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a5f0:	4a36      	ldr	r2, [pc, #216]	; (800a6cc <HAL_RCC_OscConfig+0x788>)
 800a5f2:	f023 0301 	bic.w	r3, r3, #1
 800a5f6:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800a5f8:	4b34      	ldr	r3, [pc, #208]	; (800a6cc <HAL_RCC_OscConfig+0x788>)
 800a5fa:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a5fc:	4b35      	ldr	r3, [pc, #212]	; (800a6d4 <HAL_RCC_OscConfig+0x790>)
 800a5fe:	4013      	ands	r3, r2
 800a600:	687a      	ldr	r2, [r7, #4]
 800a602:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800a604:	00d2      	lsls	r2, r2, #3
 800a606:	4931      	ldr	r1, [pc, #196]	; (800a6cc <HAL_RCC_OscConfig+0x788>)
 800a608:	4313      	orrs	r3, r2
 800a60a:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 800a60c:	4b2f      	ldr	r3, [pc, #188]	; (800a6cc <HAL_RCC_OscConfig+0x788>)
 800a60e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a610:	f023 020c 	bic.w	r2, r3, #12
 800a614:	687b      	ldr	r3, [r7, #4]
 800a616:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a618:	492c      	ldr	r1, [pc, #176]	; (800a6cc <HAL_RCC_OscConfig+0x788>)
 800a61a:	4313      	orrs	r3, r2
 800a61c:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 800a61e:	4b2b      	ldr	r3, [pc, #172]	; (800a6cc <HAL_RCC_OscConfig+0x788>)
 800a620:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a622:	f023 0202 	bic.w	r2, r3, #2
 800a626:	687b      	ldr	r3, [r7, #4]
 800a628:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a62a:	4928      	ldr	r1, [pc, #160]	; (800a6cc <HAL_RCC_OscConfig+0x788>)
 800a62c:	4313      	orrs	r3, r2
 800a62e:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800a630:	4b26      	ldr	r3, [pc, #152]	; (800a6cc <HAL_RCC_OscConfig+0x788>)
 800a632:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a634:	4a25      	ldr	r2, [pc, #148]	; (800a6cc <HAL_RCC_OscConfig+0x788>)
 800a636:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800a63a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a63c:	4b23      	ldr	r3, [pc, #140]	; (800a6cc <HAL_RCC_OscConfig+0x788>)
 800a63e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a640:	4a22      	ldr	r2, [pc, #136]	; (800a6cc <HAL_RCC_OscConfig+0x788>)
 800a642:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a646:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 800a648:	4b20      	ldr	r3, [pc, #128]	; (800a6cc <HAL_RCC_OscConfig+0x788>)
 800a64a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a64c:	4a1f      	ldr	r2, [pc, #124]	; (800a6cc <HAL_RCC_OscConfig+0x788>)
 800a64e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800a652:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 800a654:	4b1d      	ldr	r3, [pc, #116]	; (800a6cc <HAL_RCC_OscConfig+0x788>)
 800a656:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a658:	4a1c      	ldr	r2, [pc, #112]	; (800a6cc <HAL_RCC_OscConfig+0x788>)
 800a65a:	f043 0301 	orr.w	r3, r3, #1
 800a65e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800a660:	4b1a      	ldr	r3, [pc, #104]	; (800a6cc <HAL_RCC_OscConfig+0x788>)
 800a662:	681b      	ldr	r3, [r3, #0]
 800a664:	4a19      	ldr	r2, [pc, #100]	; (800a6cc <HAL_RCC_OscConfig+0x788>)
 800a666:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800a66a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a66c:	f7fa fba2 	bl	8004db4 <HAL_GetTick>
 800a670:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800a672:	e008      	b.n	800a686 <HAL_RCC_OscConfig+0x742>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800a674:	f7fa fb9e 	bl	8004db4 <HAL_GetTick>
 800a678:	4602      	mov	r2, r0
 800a67a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a67c:	1ad3      	subs	r3, r2, r3
 800a67e:	2b02      	cmp	r3, #2
 800a680:	d901      	bls.n	800a686 <HAL_RCC_OscConfig+0x742>
          {
            return HAL_TIMEOUT;
 800a682:	2303      	movs	r3, #3
 800a684:	e067      	b.n	800a756 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800a686:	4b11      	ldr	r3, [pc, #68]	; (800a6cc <HAL_RCC_OscConfig+0x788>)
 800a688:	681b      	ldr	r3, [r3, #0]
 800a68a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a68e:	2b00      	cmp	r3, #0
 800a690:	d0f0      	beq.n	800a674 <HAL_RCC_OscConfig+0x730>
 800a692:	e05f      	b.n	800a754 <HAL_RCC_OscConfig+0x810>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800a694:	4b0d      	ldr	r3, [pc, #52]	; (800a6cc <HAL_RCC_OscConfig+0x788>)
 800a696:	681b      	ldr	r3, [r3, #0]
 800a698:	4a0c      	ldr	r2, [pc, #48]	; (800a6cc <HAL_RCC_OscConfig+0x788>)
 800a69a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800a69e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a6a0:	f7fa fb88 	bl	8004db4 <HAL_GetTick>
 800a6a4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800a6a6:	e008      	b.n	800a6ba <HAL_RCC_OscConfig+0x776>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800a6a8:	f7fa fb84 	bl	8004db4 <HAL_GetTick>
 800a6ac:	4602      	mov	r2, r0
 800a6ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a6b0:	1ad3      	subs	r3, r2, r3
 800a6b2:	2b02      	cmp	r3, #2
 800a6b4:	d901      	bls.n	800a6ba <HAL_RCC_OscConfig+0x776>
          {
            return HAL_TIMEOUT;
 800a6b6:	2303      	movs	r3, #3
 800a6b8:	e04d      	b.n	800a756 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800a6ba:	4b04      	ldr	r3, [pc, #16]	; (800a6cc <HAL_RCC_OscConfig+0x788>)
 800a6bc:	681b      	ldr	r3, [r3, #0]
 800a6be:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a6c2:	2b00      	cmp	r3, #0
 800a6c4:	d1f0      	bne.n	800a6a8 <HAL_RCC_OscConfig+0x764>
 800a6c6:	e045      	b.n	800a754 <HAL_RCC_OscConfig+0x810>
 800a6c8:	58024800 	.word	0x58024800
 800a6cc:	58024400 	.word	0x58024400
 800a6d0:	fffffc0c 	.word	0xfffffc0c
 800a6d4:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 800a6d8:	4b21      	ldr	r3, [pc, #132]	; (800a760 <HAL_RCC_OscConfig+0x81c>)
 800a6da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a6dc:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 800a6de:	4b20      	ldr	r3, [pc, #128]	; (800a760 <HAL_RCC_OscConfig+0x81c>)
 800a6e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a6e2:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800a6e4:	687b      	ldr	r3, [r7, #4]
 800a6e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a6e8:	2b01      	cmp	r3, #1
 800a6ea:	d031      	beq.n	800a750 <HAL_RCC_OscConfig+0x80c>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800a6ec:	693b      	ldr	r3, [r7, #16]
 800a6ee:	f003 0203 	and.w	r2, r3, #3
 800a6f2:	687b      	ldr	r3, [r7, #4]
 800a6f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800a6f6:	429a      	cmp	r2, r3
 800a6f8:	d12a      	bne.n	800a750 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800a6fa:	693b      	ldr	r3, [r7, #16]
 800a6fc:	091b      	lsrs	r3, r3, #4
 800a6fe:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800a702:	687b      	ldr	r3, [r7, #4]
 800a704:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800a706:	429a      	cmp	r2, r3
 800a708:	d122      	bne.n	800a750 <HAL_RCC_OscConfig+0x80c>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800a70a:	68fb      	ldr	r3, [r7, #12]
 800a70c:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800a710:	687b      	ldr	r3, [r7, #4]
 800a712:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a714:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800a716:	429a      	cmp	r2, r3
 800a718:	d11a      	bne.n	800a750 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800a71a:	68fb      	ldr	r3, [r7, #12]
 800a71c:	0a5b      	lsrs	r3, r3, #9
 800a71e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800a722:	687b      	ldr	r3, [r7, #4]
 800a724:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a726:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800a728:	429a      	cmp	r2, r3
 800a72a:	d111      	bne.n	800a750 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800a72c:	68fb      	ldr	r3, [r7, #12]
 800a72e:	0c1b      	lsrs	r3, r3, #16
 800a730:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800a734:	687b      	ldr	r3, [r7, #4]
 800a736:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a738:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800a73a:	429a      	cmp	r2, r3
 800a73c:	d108      	bne.n	800a750 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 800a73e:	68fb      	ldr	r3, [r7, #12]
 800a740:	0e1b      	lsrs	r3, r3, #24
 800a742:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800a746:	687b      	ldr	r3, [r7, #4]
 800a748:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a74a:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800a74c:	429a      	cmp	r2, r3
 800a74e:	d001      	beq.n	800a754 <HAL_RCC_OscConfig+0x810>
      {
        return HAL_ERROR;
 800a750:	2301      	movs	r3, #1
 800a752:	e000      	b.n	800a756 <HAL_RCC_OscConfig+0x812>
      }
    }
  }
  return HAL_OK;
 800a754:	2300      	movs	r3, #0
}
 800a756:	4618      	mov	r0, r3
 800a758:	3730      	adds	r7, #48	; 0x30
 800a75a:	46bd      	mov	sp, r7
 800a75c:	bd80      	pop	{r7, pc}
 800a75e:	bf00      	nop
 800a760:	58024400 	.word	0x58024400

0800a764 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800a764:	b580      	push	{r7, lr}
 800a766:	b086      	sub	sp, #24
 800a768:	af00      	add	r7, sp, #0
 800a76a:	6078      	str	r0, [r7, #4]
 800a76c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800a76e:	687b      	ldr	r3, [r7, #4]
 800a770:	2b00      	cmp	r3, #0
 800a772:	d101      	bne.n	800a778 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800a774:	2301      	movs	r3, #1
 800a776:	e19c      	b.n	800aab2 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800a778:	4b8a      	ldr	r3, [pc, #552]	; (800a9a4 <HAL_RCC_ClockConfig+0x240>)
 800a77a:	681b      	ldr	r3, [r3, #0]
 800a77c:	f003 030f 	and.w	r3, r3, #15
 800a780:	683a      	ldr	r2, [r7, #0]
 800a782:	429a      	cmp	r2, r3
 800a784:	d910      	bls.n	800a7a8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800a786:	4b87      	ldr	r3, [pc, #540]	; (800a9a4 <HAL_RCC_ClockConfig+0x240>)
 800a788:	681b      	ldr	r3, [r3, #0]
 800a78a:	f023 020f 	bic.w	r2, r3, #15
 800a78e:	4985      	ldr	r1, [pc, #532]	; (800a9a4 <HAL_RCC_ClockConfig+0x240>)
 800a790:	683b      	ldr	r3, [r7, #0]
 800a792:	4313      	orrs	r3, r2
 800a794:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800a796:	4b83      	ldr	r3, [pc, #524]	; (800a9a4 <HAL_RCC_ClockConfig+0x240>)
 800a798:	681b      	ldr	r3, [r3, #0]
 800a79a:	f003 030f 	and.w	r3, r3, #15
 800a79e:	683a      	ldr	r2, [r7, #0]
 800a7a0:	429a      	cmp	r2, r3
 800a7a2:	d001      	beq.n	800a7a8 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800a7a4:	2301      	movs	r3, #1
 800a7a6:	e184      	b.n	800aab2 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800a7a8:	687b      	ldr	r3, [r7, #4]
 800a7aa:	681b      	ldr	r3, [r3, #0]
 800a7ac:	f003 0304 	and.w	r3, r3, #4
 800a7b0:	2b00      	cmp	r3, #0
 800a7b2:	d010      	beq.n	800a7d6 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800a7b4:	687b      	ldr	r3, [r7, #4]
 800a7b6:	691a      	ldr	r2, [r3, #16]
 800a7b8:	4b7b      	ldr	r3, [pc, #492]	; (800a9a8 <HAL_RCC_ClockConfig+0x244>)
 800a7ba:	699b      	ldr	r3, [r3, #24]
 800a7bc:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800a7c0:	429a      	cmp	r2, r3
 800a7c2:	d908      	bls.n	800a7d6 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800a7c4:	4b78      	ldr	r3, [pc, #480]	; (800a9a8 <HAL_RCC_ClockConfig+0x244>)
 800a7c6:	699b      	ldr	r3, [r3, #24]
 800a7c8:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800a7cc:	687b      	ldr	r3, [r7, #4]
 800a7ce:	691b      	ldr	r3, [r3, #16]
 800a7d0:	4975      	ldr	r1, [pc, #468]	; (800a9a8 <HAL_RCC_ClockConfig+0x244>)
 800a7d2:	4313      	orrs	r3, r2
 800a7d4:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800a7d6:	687b      	ldr	r3, [r7, #4]
 800a7d8:	681b      	ldr	r3, [r3, #0]
 800a7da:	f003 0308 	and.w	r3, r3, #8
 800a7de:	2b00      	cmp	r3, #0
 800a7e0:	d010      	beq.n	800a804 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800a7e2:	687b      	ldr	r3, [r7, #4]
 800a7e4:	695a      	ldr	r2, [r3, #20]
 800a7e6:	4b70      	ldr	r3, [pc, #448]	; (800a9a8 <HAL_RCC_ClockConfig+0x244>)
 800a7e8:	69db      	ldr	r3, [r3, #28]
 800a7ea:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800a7ee:	429a      	cmp	r2, r3
 800a7f0:	d908      	bls.n	800a804 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800a7f2:	4b6d      	ldr	r3, [pc, #436]	; (800a9a8 <HAL_RCC_ClockConfig+0x244>)
 800a7f4:	69db      	ldr	r3, [r3, #28]
 800a7f6:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800a7fa:	687b      	ldr	r3, [r7, #4]
 800a7fc:	695b      	ldr	r3, [r3, #20]
 800a7fe:	496a      	ldr	r1, [pc, #424]	; (800a9a8 <HAL_RCC_ClockConfig+0x244>)
 800a800:	4313      	orrs	r3, r2
 800a802:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800a804:	687b      	ldr	r3, [r7, #4]
 800a806:	681b      	ldr	r3, [r3, #0]
 800a808:	f003 0310 	and.w	r3, r3, #16
 800a80c:	2b00      	cmp	r3, #0
 800a80e:	d010      	beq.n	800a832 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800a810:	687b      	ldr	r3, [r7, #4]
 800a812:	699a      	ldr	r2, [r3, #24]
 800a814:	4b64      	ldr	r3, [pc, #400]	; (800a9a8 <HAL_RCC_ClockConfig+0x244>)
 800a816:	69db      	ldr	r3, [r3, #28]
 800a818:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800a81c:	429a      	cmp	r2, r3
 800a81e:	d908      	bls.n	800a832 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800a820:	4b61      	ldr	r3, [pc, #388]	; (800a9a8 <HAL_RCC_ClockConfig+0x244>)
 800a822:	69db      	ldr	r3, [r3, #28]
 800a824:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800a828:	687b      	ldr	r3, [r7, #4]
 800a82a:	699b      	ldr	r3, [r3, #24]
 800a82c:	495e      	ldr	r1, [pc, #376]	; (800a9a8 <HAL_RCC_ClockConfig+0x244>)
 800a82e:	4313      	orrs	r3, r2
 800a830:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800a832:	687b      	ldr	r3, [r7, #4]
 800a834:	681b      	ldr	r3, [r3, #0]
 800a836:	f003 0320 	and.w	r3, r3, #32
 800a83a:	2b00      	cmp	r3, #0
 800a83c:	d010      	beq.n	800a860 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800a83e:	687b      	ldr	r3, [r7, #4]
 800a840:	69da      	ldr	r2, [r3, #28]
 800a842:	4b59      	ldr	r3, [pc, #356]	; (800a9a8 <HAL_RCC_ClockConfig+0x244>)
 800a844:	6a1b      	ldr	r3, [r3, #32]
 800a846:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800a84a:	429a      	cmp	r2, r3
 800a84c:	d908      	bls.n	800a860 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 800a84e:	4b56      	ldr	r3, [pc, #344]	; (800a9a8 <HAL_RCC_ClockConfig+0x244>)
 800a850:	6a1b      	ldr	r3, [r3, #32]
 800a852:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800a856:	687b      	ldr	r3, [r7, #4]
 800a858:	69db      	ldr	r3, [r3, #28]
 800a85a:	4953      	ldr	r1, [pc, #332]	; (800a9a8 <HAL_RCC_ClockConfig+0x244>)
 800a85c:	4313      	orrs	r3, r2
 800a85e:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800a860:	687b      	ldr	r3, [r7, #4]
 800a862:	681b      	ldr	r3, [r3, #0]
 800a864:	f003 0302 	and.w	r3, r3, #2
 800a868:	2b00      	cmp	r3, #0
 800a86a:	d010      	beq.n	800a88e <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800a86c:	687b      	ldr	r3, [r7, #4]
 800a86e:	68da      	ldr	r2, [r3, #12]
 800a870:	4b4d      	ldr	r3, [pc, #308]	; (800a9a8 <HAL_RCC_ClockConfig+0x244>)
 800a872:	699b      	ldr	r3, [r3, #24]
 800a874:	f003 030f 	and.w	r3, r3, #15
 800a878:	429a      	cmp	r2, r3
 800a87a:	d908      	bls.n	800a88e <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800a87c:	4b4a      	ldr	r3, [pc, #296]	; (800a9a8 <HAL_RCC_ClockConfig+0x244>)
 800a87e:	699b      	ldr	r3, [r3, #24]
 800a880:	f023 020f 	bic.w	r2, r3, #15
 800a884:	687b      	ldr	r3, [r7, #4]
 800a886:	68db      	ldr	r3, [r3, #12]
 800a888:	4947      	ldr	r1, [pc, #284]	; (800a9a8 <HAL_RCC_ClockConfig+0x244>)
 800a88a:	4313      	orrs	r3, r2
 800a88c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800a88e:	687b      	ldr	r3, [r7, #4]
 800a890:	681b      	ldr	r3, [r3, #0]
 800a892:	f003 0301 	and.w	r3, r3, #1
 800a896:	2b00      	cmp	r3, #0
 800a898:	d055      	beq.n	800a946 <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 800a89a:	4b43      	ldr	r3, [pc, #268]	; (800a9a8 <HAL_RCC_ClockConfig+0x244>)
 800a89c:	699b      	ldr	r3, [r3, #24]
 800a89e:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 800a8a2:	687b      	ldr	r3, [r7, #4]
 800a8a4:	689b      	ldr	r3, [r3, #8]
 800a8a6:	4940      	ldr	r1, [pc, #256]	; (800a9a8 <HAL_RCC_ClockConfig+0x244>)
 800a8a8:	4313      	orrs	r3, r2
 800a8aa:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800a8ac:	687b      	ldr	r3, [r7, #4]
 800a8ae:	685b      	ldr	r3, [r3, #4]
 800a8b0:	2b02      	cmp	r3, #2
 800a8b2:	d107      	bne.n	800a8c4 <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800a8b4:	4b3c      	ldr	r3, [pc, #240]	; (800a9a8 <HAL_RCC_ClockConfig+0x244>)
 800a8b6:	681b      	ldr	r3, [r3, #0]
 800a8b8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a8bc:	2b00      	cmp	r3, #0
 800a8be:	d121      	bne.n	800a904 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 800a8c0:	2301      	movs	r3, #1
 800a8c2:	e0f6      	b.n	800aab2 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800a8c4:	687b      	ldr	r3, [r7, #4]
 800a8c6:	685b      	ldr	r3, [r3, #4]
 800a8c8:	2b03      	cmp	r3, #3
 800a8ca:	d107      	bne.n	800a8dc <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800a8cc:	4b36      	ldr	r3, [pc, #216]	; (800a9a8 <HAL_RCC_ClockConfig+0x244>)
 800a8ce:	681b      	ldr	r3, [r3, #0]
 800a8d0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a8d4:	2b00      	cmp	r3, #0
 800a8d6:	d115      	bne.n	800a904 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 800a8d8:	2301      	movs	r3, #1
 800a8da:	e0ea      	b.n	800aab2 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 800a8dc:	687b      	ldr	r3, [r7, #4]
 800a8de:	685b      	ldr	r3, [r3, #4]
 800a8e0:	2b01      	cmp	r3, #1
 800a8e2:	d107      	bne.n	800a8f4 <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800a8e4:	4b30      	ldr	r3, [pc, #192]	; (800a9a8 <HAL_RCC_ClockConfig+0x244>)
 800a8e6:	681b      	ldr	r3, [r3, #0]
 800a8e8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a8ec:	2b00      	cmp	r3, #0
 800a8ee:	d109      	bne.n	800a904 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 800a8f0:	2301      	movs	r3, #1
 800a8f2:	e0de      	b.n	800aab2 <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800a8f4:	4b2c      	ldr	r3, [pc, #176]	; (800a9a8 <HAL_RCC_ClockConfig+0x244>)
 800a8f6:	681b      	ldr	r3, [r3, #0]
 800a8f8:	f003 0304 	and.w	r3, r3, #4
 800a8fc:	2b00      	cmp	r3, #0
 800a8fe:	d101      	bne.n	800a904 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 800a900:	2301      	movs	r3, #1
 800a902:	e0d6      	b.n	800aab2 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800a904:	4b28      	ldr	r3, [pc, #160]	; (800a9a8 <HAL_RCC_ClockConfig+0x244>)
 800a906:	691b      	ldr	r3, [r3, #16]
 800a908:	f023 0207 	bic.w	r2, r3, #7
 800a90c:	687b      	ldr	r3, [r7, #4]
 800a90e:	685b      	ldr	r3, [r3, #4]
 800a910:	4925      	ldr	r1, [pc, #148]	; (800a9a8 <HAL_RCC_ClockConfig+0x244>)
 800a912:	4313      	orrs	r3, r2
 800a914:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a916:	f7fa fa4d 	bl	8004db4 <HAL_GetTick>
 800a91a:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800a91c:	e00a      	b.n	800a934 <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800a91e:	f7fa fa49 	bl	8004db4 <HAL_GetTick>
 800a922:	4602      	mov	r2, r0
 800a924:	697b      	ldr	r3, [r7, #20]
 800a926:	1ad3      	subs	r3, r2, r3
 800a928:	f241 3288 	movw	r2, #5000	; 0x1388
 800a92c:	4293      	cmp	r3, r2
 800a92e:	d901      	bls.n	800a934 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 800a930:	2303      	movs	r3, #3
 800a932:	e0be      	b.n	800aab2 <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800a934:	4b1c      	ldr	r3, [pc, #112]	; (800a9a8 <HAL_RCC_ClockConfig+0x244>)
 800a936:	691b      	ldr	r3, [r3, #16]
 800a938:	f003 0238 	and.w	r2, r3, #56	; 0x38
 800a93c:	687b      	ldr	r3, [r7, #4]
 800a93e:	685b      	ldr	r3, [r3, #4]
 800a940:	00db      	lsls	r3, r3, #3
 800a942:	429a      	cmp	r2, r3
 800a944:	d1eb      	bne.n	800a91e <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800a946:	687b      	ldr	r3, [r7, #4]
 800a948:	681b      	ldr	r3, [r3, #0]
 800a94a:	f003 0302 	and.w	r3, r3, #2
 800a94e:	2b00      	cmp	r3, #0
 800a950:	d010      	beq.n	800a974 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800a952:	687b      	ldr	r3, [r7, #4]
 800a954:	68da      	ldr	r2, [r3, #12]
 800a956:	4b14      	ldr	r3, [pc, #80]	; (800a9a8 <HAL_RCC_ClockConfig+0x244>)
 800a958:	699b      	ldr	r3, [r3, #24]
 800a95a:	f003 030f 	and.w	r3, r3, #15
 800a95e:	429a      	cmp	r2, r3
 800a960:	d208      	bcs.n	800a974 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800a962:	4b11      	ldr	r3, [pc, #68]	; (800a9a8 <HAL_RCC_ClockConfig+0x244>)
 800a964:	699b      	ldr	r3, [r3, #24]
 800a966:	f023 020f 	bic.w	r2, r3, #15
 800a96a:	687b      	ldr	r3, [r7, #4]
 800a96c:	68db      	ldr	r3, [r3, #12]
 800a96e:	490e      	ldr	r1, [pc, #56]	; (800a9a8 <HAL_RCC_ClockConfig+0x244>)
 800a970:	4313      	orrs	r3, r2
 800a972:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800a974:	4b0b      	ldr	r3, [pc, #44]	; (800a9a4 <HAL_RCC_ClockConfig+0x240>)
 800a976:	681b      	ldr	r3, [r3, #0]
 800a978:	f003 030f 	and.w	r3, r3, #15
 800a97c:	683a      	ldr	r2, [r7, #0]
 800a97e:	429a      	cmp	r2, r3
 800a980:	d214      	bcs.n	800a9ac <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800a982:	4b08      	ldr	r3, [pc, #32]	; (800a9a4 <HAL_RCC_ClockConfig+0x240>)
 800a984:	681b      	ldr	r3, [r3, #0]
 800a986:	f023 020f 	bic.w	r2, r3, #15
 800a98a:	4906      	ldr	r1, [pc, #24]	; (800a9a4 <HAL_RCC_ClockConfig+0x240>)
 800a98c:	683b      	ldr	r3, [r7, #0]
 800a98e:	4313      	orrs	r3, r2
 800a990:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800a992:	4b04      	ldr	r3, [pc, #16]	; (800a9a4 <HAL_RCC_ClockConfig+0x240>)
 800a994:	681b      	ldr	r3, [r3, #0]
 800a996:	f003 030f 	and.w	r3, r3, #15
 800a99a:	683a      	ldr	r2, [r7, #0]
 800a99c:	429a      	cmp	r2, r3
 800a99e:	d005      	beq.n	800a9ac <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 800a9a0:	2301      	movs	r3, #1
 800a9a2:	e086      	b.n	800aab2 <HAL_RCC_ClockConfig+0x34e>
 800a9a4:	52002000 	.word	0x52002000
 800a9a8:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800a9ac:	687b      	ldr	r3, [r7, #4]
 800a9ae:	681b      	ldr	r3, [r3, #0]
 800a9b0:	f003 0304 	and.w	r3, r3, #4
 800a9b4:	2b00      	cmp	r3, #0
 800a9b6:	d010      	beq.n	800a9da <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800a9b8:	687b      	ldr	r3, [r7, #4]
 800a9ba:	691a      	ldr	r2, [r3, #16]
 800a9bc:	4b3f      	ldr	r3, [pc, #252]	; (800aabc <HAL_RCC_ClockConfig+0x358>)
 800a9be:	699b      	ldr	r3, [r3, #24]
 800a9c0:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800a9c4:	429a      	cmp	r2, r3
 800a9c6:	d208      	bcs.n	800a9da <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800a9c8:	4b3c      	ldr	r3, [pc, #240]	; (800aabc <HAL_RCC_ClockConfig+0x358>)
 800a9ca:	699b      	ldr	r3, [r3, #24]
 800a9cc:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800a9d0:	687b      	ldr	r3, [r7, #4]
 800a9d2:	691b      	ldr	r3, [r3, #16]
 800a9d4:	4939      	ldr	r1, [pc, #228]	; (800aabc <HAL_RCC_ClockConfig+0x358>)
 800a9d6:	4313      	orrs	r3, r2
 800a9d8:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800a9da:	687b      	ldr	r3, [r7, #4]
 800a9dc:	681b      	ldr	r3, [r3, #0]
 800a9de:	f003 0308 	and.w	r3, r3, #8
 800a9e2:	2b00      	cmp	r3, #0
 800a9e4:	d010      	beq.n	800aa08 <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800a9e6:	687b      	ldr	r3, [r7, #4]
 800a9e8:	695a      	ldr	r2, [r3, #20]
 800a9ea:	4b34      	ldr	r3, [pc, #208]	; (800aabc <HAL_RCC_ClockConfig+0x358>)
 800a9ec:	69db      	ldr	r3, [r3, #28]
 800a9ee:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800a9f2:	429a      	cmp	r2, r3
 800a9f4:	d208      	bcs.n	800aa08 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800a9f6:	4b31      	ldr	r3, [pc, #196]	; (800aabc <HAL_RCC_ClockConfig+0x358>)
 800a9f8:	69db      	ldr	r3, [r3, #28]
 800a9fa:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800a9fe:	687b      	ldr	r3, [r7, #4]
 800aa00:	695b      	ldr	r3, [r3, #20]
 800aa02:	492e      	ldr	r1, [pc, #184]	; (800aabc <HAL_RCC_ClockConfig+0x358>)
 800aa04:	4313      	orrs	r3, r2
 800aa06:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800aa08:	687b      	ldr	r3, [r7, #4]
 800aa0a:	681b      	ldr	r3, [r3, #0]
 800aa0c:	f003 0310 	and.w	r3, r3, #16
 800aa10:	2b00      	cmp	r3, #0
 800aa12:	d010      	beq.n	800aa36 <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800aa14:	687b      	ldr	r3, [r7, #4]
 800aa16:	699a      	ldr	r2, [r3, #24]
 800aa18:	4b28      	ldr	r3, [pc, #160]	; (800aabc <HAL_RCC_ClockConfig+0x358>)
 800aa1a:	69db      	ldr	r3, [r3, #28]
 800aa1c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800aa20:	429a      	cmp	r2, r3
 800aa22:	d208      	bcs.n	800aa36 <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800aa24:	4b25      	ldr	r3, [pc, #148]	; (800aabc <HAL_RCC_ClockConfig+0x358>)
 800aa26:	69db      	ldr	r3, [r3, #28]
 800aa28:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800aa2c:	687b      	ldr	r3, [r7, #4]
 800aa2e:	699b      	ldr	r3, [r3, #24]
 800aa30:	4922      	ldr	r1, [pc, #136]	; (800aabc <HAL_RCC_ClockConfig+0x358>)
 800aa32:	4313      	orrs	r3, r2
 800aa34:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800aa36:	687b      	ldr	r3, [r7, #4]
 800aa38:	681b      	ldr	r3, [r3, #0]
 800aa3a:	f003 0320 	and.w	r3, r3, #32
 800aa3e:	2b00      	cmp	r3, #0
 800aa40:	d010      	beq.n	800aa64 <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800aa42:	687b      	ldr	r3, [r7, #4]
 800aa44:	69da      	ldr	r2, [r3, #28]
 800aa46:	4b1d      	ldr	r3, [pc, #116]	; (800aabc <HAL_RCC_ClockConfig+0x358>)
 800aa48:	6a1b      	ldr	r3, [r3, #32]
 800aa4a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800aa4e:	429a      	cmp	r2, r3
 800aa50:	d208      	bcs.n	800aa64 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 800aa52:	4b1a      	ldr	r3, [pc, #104]	; (800aabc <HAL_RCC_ClockConfig+0x358>)
 800aa54:	6a1b      	ldr	r3, [r3, #32]
 800aa56:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800aa5a:	687b      	ldr	r3, [r7, #4]
 800aa5c:	69db      	ldr	r3, [r3, #28]
 800aa5e:	4917      	ldr	r1, [pc, #92]	; (800aabc <HAL_RCC_ClockConfig+0x358>)
 800aa60:	4313      	orrs	r3, r2
 800aa62:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800aa64:	f000 f844 	bl	800aaf0 <HAL_RCC_GetSysClockFreq>
 800aa68:	4601      	mov	r1, r0
 800aa6a:	4b14      	ldr	r3, [pc, #80]	; (800aabc <HAL_RCC_ClockConfig+0x358>)
 800aa6c:	699b      	ldr	r3, [r3, #24]
 800aa6e:	0a1b      	lsrs	r3, r3, #8
 800aa70:	f003 030f 	and.w	r3, r3, #15
 800aa74:	4a12      	ldr	r2, [pc, #72]	; (800aac0 <HAL_RCC_ClockConfig+0x35c>)
 800aa76:	5cd3      	ldrb	r3, [r2, r3]
 800aa78:	f003 031f 	and.w	r3, r3, #31
 800aa7c:	fa21 f303 	lsr.w	r3, r1, r3
 800aa80:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800aa82:	4b0e      	ldr	r3, [pc, #56]	; (800aabc <HAL_RCC_ClockConfig+0x358>)
 800aa84:	699b      	ldr	r3, [r3, #24]
 800aa86:	f003 030f 	and.w	r3, r3, #15
 800aa8a:	4a0d      	ldr	r2, [pc, #52]	; (800aac0 <HAL_RCC_ClockConfig+0x35c>)
 800aa8c:	5cd3      	ldrb	r3, [r2, r3]
 800aa8e:	f003 031f 	and.w	r3, r3, #31
 800aa92:	693a      	ldr	r2, [r7, #16]
 800aa94:	fa22 f303 	lsr.w	r3, r2, r3
 800aa98:	4a0a      	ldr	r2, [pc, #40]	; (800aac4 <HAL_RCC_ClockConfig+0x360>)
 800aa9a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800aa9c:	4a0a      	ldr	r2, [pc, #40]	; (800aac8 <HAL_RCC_ClockConfig+0x364>)
 800aa9e:	693b      	ldr	r3, [r7, #16]
 800aaa0:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 800aaa2:	4b0a      	ldr	r3, [pc, #40]	; (800aacc <HAL_RCC_ClockConfig+0x368>)
 800aaa4:	681b      	ldr	r3, [r3, #0]
 800aaa6:	4618      	mov	r0, r3
 800aaa8:	f7fa f93a 	bl	8004d20 <HAL_InitTick>
 800aaac:	4603      	mov	r3, r0
 800aaae:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 800aab0:	7bfb      	ldrb	r3, [r7, #15]
}
 800aab2:	4618      	mov	r0, r3
 800aab4:	3718      	adds	r7, #24
 800aab6:	46bd      	mov	sp, r7
 800aab8:	bd80      	pop	{r7, pc}
 800aaba:	bf00      	nop
 800aabc:	58024400 	.word	0x58024400
 800aac0:	0801c4f4 	.word	0x0801c4f4
 800aac4:	24000014 	.word	0x24000014
 800aac8:	24000010 	.word	0x24000010
 800aacc:	24000018 	.word	0x24000018

0800aad0 <HAL_RCC_EnableCSS>:
  *         allowing the MCU to perform rescue operations. The CSSI is linked to
  *         the Cortex-M NMI (Non-Mask-able Interrupt) exception vector.
  * @retval None
  */
void HAL_RCC_EnableCSS(void)
{
 800aad0:	b480      	push	{r7}
 800aad2:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_CSSHSEON) ;
 800aad4:	4b05      	ldr	r3, [pc, #20]	; (800aaec <HAL_RCC_EnableCSS+0x1c>)
 800aad6:	681b      	ldr	r3, [r3, #0]
 800aad8:	4a04      	ldr	r2, [pc, #16]	; (800aaec <HAL_RCC_EnableCSS+0x1c>)
 800aada:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800aade:	6013      	str	r3, [r2, #0]
}
 800aae0:	bf00      	nop
 800aae2:	46bd      	mov	sp, r7
 800aae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aae8:	4770      	bx	lr
 800aaea:	bf00      	nop
 800aaec:	58024400 	.word	0x58024400

0800aaf0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800aaf0:	b480      	push	{r7}
 800aaf2:	b089      	sub	sp, #36	; 0x24
 800aaf4:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 800aaf6:	4baf      	ldr	r3, [pc, #700]	; (800adb4 <HAL_RCC_GetSysClockFreq+0x2c4>)
 800aaf8:	691b      	ldr	r3, [r3, #16]
 800aafa:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800aafe:	2b18      	cmp	r3, #24
 800ab00:	f200 814e 	bhi.w	800ada0 <HAL_RCC_GetSysClockFreq+0x2b0>
 800ab04:	a201      	add	r2, pc, #4	; (adr r2, 800ab0c <HAL_RCC_GetSysClockFreq+0x1c>)
 800ab06:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ab0a:	bf00      	nop
 800ab0c:	0800ab71 	.word	0x0800ab71
 800ab10:	0800ada1 	.word	0x0800ada1
 800ab14:	0800ada1 	.word	0x0800ada1
 800ab18:	0800ada1 	.word	0x0800ada1
 800ab1c:	0800ada1 	.word	0x0800ada1
 800ab20:	0800ada1 	.word	0x0800ada1
 800ab24:	0800ada1 	.word	0x0800ada1
 800ab28:	0800ada1 	.word	0x0800ada1
 800ab2c:	0800ab97 	.word	0x0800ab97
 800ab30:	0800ada1 	.word	0x0800ada1
 800ab34:	0800ada1 	.word	0x0800ada1
 800ab38:	0800ada1 	.word	0x0800ada1
 800ab3c:	0800ada1 	.word	0x0800ada1
 800ab40:	0800ada1 	.word	0x0800ada1
 800ab44:	0800ada1 	.word	0x0800ada1
 800ab48:	0800ada1 	.word	0x0800ada1
 800ab4c:	0800ab9d 	.word	0x0800ab9d
 800ab50:	0800ada1 	.word	0x0800ada1
 800ab54:	0800ada1 	.word	0x0800ada1
 800ab58:	0800ada1 	.word	0x0800ada1
 800ab5c:	0800ada1 	.word	0x0800ada1
 800ab60:	0800ada1 	.word	0x0800ada1
 800ab64:	0800ada1 	.word	0x0800ada1
 800ab68:	0800ada1 	.word	0x0800ada1
 800ab6c:	0800aba3 	.word	0x0800aba3
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800ab70:	4b90      	ldr	r3, [pc, #576]	; (800adb4 <HAL_RCC_GetSysClockFreq+0x2c4>)
 800ab72:	681b      	ldr	r3, [r3, #0]
 800ab74:	f003 0320 	and.w	r3, r3, #32
 800ab78:	2b00      	cmp	r3, #0
 800ab7a:	d009      	beq.n	800ab90 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800ab7c:	4b8d      	ldr	r3, [pc, #564]	; (800adb4 <HAL_RCC_GetSysClockFreq+0x2c4>)
 800ab7e:	681b      	ldr	r3, [r3, #0]
 800ab80:	08db      	lsrs	r3, r3, #3
 800ab82:	f003 0303 	and.w	r3, r3, #3
 800ab86:	4a8c      	ldr	r2, [pc, #560]	; (800adb8 <HAL_RCC_GetSysClockFreq+0x2c8>)
 800ab88:	fa22 f303 	lsr.w	r3, r2, r3
 800ab8c:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 800ab8e:	e10a      	b.n	800ada6 <HAL_RCC_GetSysClockFreq+0x2b6>
        sysclockfreq = (uint32_t) HSI_VALUE;
 800ab90:	4b89      	ldr	r3, [pc, #548]	; (800adb8 <HAL_RCC_GetSysClockFreq+0x2c8>)
 800ab92:	61bb      	str	r3, [r7, #24]
    break;
 800ab94:	e107      	b.n	800ada6 <HAL_RCC_GetSysClockFreq+0x2b6>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 800ab96:	4b89      	ldr	r3, [pc, #548]	; (800adbc <HAL_RCC_GetSysClockFreq+0x2cc>)
 800ab98:	61bb      	str	r3, [r7, #24]
    break;
 800ab9a:	e104      	b.n	800ada6 <HAL_RCC_GetSysClockFreq+0x2b6>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 800ab9c:	4b88      	ldr	r3, [pc, #544]	; (800adc0 <HAL_RCC_GetSysClockFreq+0x2d0>)
 800ab9e:	61bb      	str	r3, [r7, #24]
    break;
 800aba0:	e101      	b.n	800ada6 <HAL_RCC_GetSysClockFreq+0x2b6>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800aba2:	4b84      	ldr	r3, [pc, #528]	; (800adb4 <HAL_RCC_GetSysClockFreq+0x2c4>)
 800aba4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800aba6:	f003 0303 	and.w	r3, r3, #3
 800abaa:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 800abac:	4b81      	ldr	r3, [pc, #516]	; (800adb4 <HAL_RCC_GetSysClockFreq+0x2c4>)
 800abae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800abb0:	091b      	lsrs	r3, r3, #4
 800abb2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800abb6:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 800abb8:	4b7e      	ldr	r3, [pc, #504]	; (800adb4 <HAL_RCC_GetSysClockFreq+0x2c4>)
 800abba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800abbc:	f003 0301 	and.w	r3, r3, #1
 800abc0:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 800abc2:	4b7c      	ldr	r3, [pc, #496]	; (800adb4 <HAL_RCC_GetSysClockFreq+0x2c4>)
 800abc4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800abc6:	08db      	lsrs	r3, r3, #3
 800abc8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800abcc:	68fa      	ldr	r2, [r7, #12]
 800abce:	fb02 f303 	mul.w	r3, r2, r3
 800abd2:	ee07 3a90 	vmov	s15, r3
 800abd6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800abda:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 800abde:	693b      	ldr	r3, [r7, #16]
 800abe0:	2b00      	cmp	r3, #0
 800abe2:	f000 80da 	beq.w	800ad9a <HAL_RCC_GetSysClockFreq+0x2aa>
    {
      switch (pllsource)
 800abe6:	697b      	ldr	r3, [r7, #20]
 800abe8:	2b01      	cmp	r3, #1
 800abea:	d05a      	beq.n	800aca2 <HAL_RCC_GetSysClockFreq+0x1b2>
 800abec:	2b01      	cmp	r3, #1
 800abee:	d302      	bcc.n	800abf6 <HAL_RCC_GetSysClockFreq+0x106>
 800abf0:	2b02      	cmp	r3, #2
 800abf2:	d078      	beq.n	800ace6 <HAL_RCC_GetSysClockFreq+0x1f6>
 800abf4:	e099      	b.n	800ad2a <HAL_RCC_GetSysClockFreq+0x23a>
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800abf6:	4b6f      	ldr	r3, [pc, #444]	; (800adb4 <HAL_RCC_GetSysClockFreq+0x2c4>)
 800abf8:	681b      	ldr	r3, [r3, #0]
 800abfa:	f003 0320 	and.w	r3, r3, #32
 800abfe:	2b00      	cmp	r3, #0
 800ac00:	d02d      	beq.n	800ac5e <HAL_RCC_GetSysClockFreq+0x16e>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800ac02:	4b6c      	ldr	r3, [pc, #432]	; (800adb4 <HAL_RCC_GetSysClockFreq+0x2c4>)
 800ac04:	681b      	ldr	r3, [r3, #0]
 800ac06:	08db      	lsrs	r3, r3, #3
 800ac08:	f003 0303 	and.w	r3, r3, #3
 800ac0c:	4a6a      	ldr	r2, [pc, #424]	; (800adb8 <HAL_RCC_GetSysClockFreq+0x2c8>)
 800ac0e:	fa22 f303 	lsr.w	r3, r2, r3
 800ac12:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800ac14:	687b      	ldr	r3, [r7, #4]
 800ac16:	ee07 3a90 	vmov	s15, r3
 800ac1a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ac1e:	693b      	ldr	r3, [r7, #16]
 800ac20:	ee07 3a90 	vmov	s15, r3
 800ac24:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ac28:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ac2c:	4b61      	ldr	r3, [pc, #388]	; (800adb4 <HAL_RCC_GetSysClockFreq+0x2c4>)
 800ac2e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ac30:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ac34:	ee07 3a90 	vmov	s15, r3
 800ac38:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ac3c:	ed97 6a02 	vldr	s12, [r7, #8]
 800ac40:	eddf 5a60 	vldr	s11, [pc, #384]	; 800adc4 <HAL_RCC_GetSysClockFreq+0x2d4>
 800ac44:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ac48:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ac4c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800ac50:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ac54:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ac58:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 800ac5c:	e087      	b.n	800ad6e <HAL_RCC_GetSysClockFreq+0x27e>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800ac5e:	693b      	ldr	r3, [r7, #16]
 800ac60:	ee07 3a90 	vmov	s15, r3
 800ac64:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ac68:	eddf 6a57 	vldr	s13, [pc, #348]	; 800adc8 <HAL_RCC_GetSysClockFreq+0x2d8>
 800ac6c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ac70:	4b50      	ldr	r3, [pc, #320]	; (800adb4 <HAL_RCC_GetSysClockFreq+0x2c4>)
 800ac72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ac74:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ac78:	ee07 3a90 	vmov	s15, r3
 800ac7c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ac80:	ed97 6a02 	vldr	s12, [r7, #8]
 800ac84:	eddf 5a4f 	vldr	s11, [pc, #316]	; 800adc4 <HAL_RCC_GetSysClockFreq+0x2d4>
 800ac88:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ac8c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ac90:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800ac94:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ac98:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ac9c:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800aca0:	e065      	b.n	800ad6e <HAL_RCC_GetSysClockFreq+0x27e>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800aca2:	693b      	ldr	r3, [r7, #16]
 800aca4:	ee07 3a90 	vmov	s15, r3
 800aca8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800acac:	eddf 6a47 	vldr	s13, [pc, #284]	; 800adcc <HAL_RCC_GetSysClockFreq+0x2dc>
 800acb0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800acb4:	4b3f      	ldr	r3, [pc, #252]	; (800adb4 <HAL_RCC_GetSysClockFreq+0x2c4>)
 800acb6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800acb8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800acbc:	ee07 3a90 	vmov	s15, r3
 800acc0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800acc4:	ed97 6a02 	vldr	s12, [r7, #8]
 800acc8:	eddf 5a3e 	vldr	s11, [pc, #248]	; 800adc4 <HAL_RCC_GetSysClockFreq+0x2d4>
 800accc:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800acd0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800acd4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800acd8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800acdc:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ace0:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800ace4:	e043      	b.n	800ad6e <HAL_RCC_GetSysClockFreq+0x27e>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800ace6:	693b      	ldr	r3, [r7, #16]
 800ace8:	ee07 3a90 	vmov	s15, r3
 800acec:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800acf0:	eddf 6a37 	vldr	s13, [pc, #220]	; 800add0 <HAL_RCC_GetSysClockFreq+0x2e0>
 800acf4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800acf8:	4b2e      	ldr	r3, [pc, #184]	; (800adb4 <HAL_RCC_GetSysClockFreq+0x2c4>)
 800acfa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800acfc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ad00:	ee07 3a90 	vmov	s15, r3
 800ad04:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ad08:	ed97 6a02 	vldr	s12, [r7, #8]
 800ad0c:	eddf 5a2d 	vldr	s11, [pc, #180]	; 800adc4 <HAL_RCC_GetSysClockFreq+0x2d4>
 800ad10:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ad14:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ad18:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800ad1c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ad20:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ad24:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800ad28:	e021      	b.n	800ad6e <HAL_RCC_GetSysClockFreq+0x27e>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800ad2a:	693b      	ldr	r3, [r7, #16]
 800ad2c:	ee07 3a90 	vmov	s15, r3
 800ad30:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ad34:	eddf 6a25 	vldr	s13, [pc, #148]	; 800adcc <HAL_RCC_GetSysClockFreq+0x2dc>
 800ad38:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ad3c:	4b1d      	ldr	r3, [pc, #116]	; (800adb4 <HAL_RCC_GetSysClockFreq+0x2c4>)
 800ad3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ad40:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ad44:	ee07 3a90 	vmov	s15, r3
 800ad48:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ad4c:	ed97 6a02 	vldr	s12, [r7, #8]
 800ad50:	eddf 5a1c 	vldr	s11, [pc, #112]	; 800adc4 <HAL_RCC_GetSysClockFreq+0x2d4>
 800ad54:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ad58:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ad5c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800ad60:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ad64:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ad68:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800ad6c:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 800ad6e:	4b11      	ldr	r3, [pc, #68]	; (800adb4 <HAL_RCC_GetSysClockFreq+0x2c4>)
 800ad70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ad72:	0a5b      	lsrs	r3, r3, #9
 800ad74:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ad78:	3301      	adds	r3, #1
 800ad7a:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 800ad7c:	683b      	ldr	r3, [r7, #0]
 800ad7e:	ee07 3a90 	vmov	s15, r3
 800ad82:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800ad86:	edd7 6a07 	vldr	s13, [r7, #28]
 800ad8a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800ad8e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800ad92:	ee17 3a90 	vmov	r3, s15
 800ad96:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 800ad98:	e005      	b.n	800ada6 <HAL_RCC_GetSysClockFreq+0x2b6>
      sysclockfreq = 0U;
 800ad9a:	2300      	movs	r3, #0
 800ad9c:	61bb      	str	r3, [r7, #24]
    break;
 800ad9e:	e002      	b.n	800ada6 <HAL_RCC_GetSysClockFreq+0x2b6>

  default:
    sysclockfreq = CSI_VALUE;
 800ada0:	4b06      	ldr	r3, [pc, #24]	; (800adbc <HAL_RCC_GetSysClockFreq+0x2cc>)
 800ada2:	61bb      	str	r3, [r7, #24]
    break;
 800ada4:	bf00      	nop
  }

  return sysclockfreq;
 800ada6:	69bb      	ldr	r3, [r7, #24]
}
 800ada8:	4618      	mov	r0, r3
 800adaa:	3724      	adds	r7, #36	; 0x24
 800adac:	46bd      	mov	sp, r7
 800adae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adb2:	4770      	bx	lr
 800adb4:	58024400 	.word	0x58024400
 800adb8:	03d09000 	.word	0x03d09000
 800adbc:	003d0900 	.word	0x003d0900
 800adc0:	017d7840 	.word	0x017d7840
 800adc4:	46000000 	.word	0x46000000
 800adc8:	4c742400 	.word	0x4c742400
 800adcc:	4a742400 	.word	0x4a742400
 800add0:	4bbebc20 	.word	0x4bbebc20

0800add4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800add4:	b580      	push	{r7, lr}
 800add6:	b082      	sub	sp, #8
 800add8:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800adda:	f7ff fe89 	bl	800aaf0 <HAL_RCC_GetSysClockFreq>
 800adde:	4601      	mov	r1, r0
 800ade0:	4b10      	ldr	r3, [pc, #64]	; (800ae24 <HAL_RCC_GetHCLKFreq+0x50>)
 800ade2:	699b      	ldr	r3, [r3, #24]
 800ade4:	0a1b      	lsrs	r3, r3, #8
 800ade6:	f003 030f 	and.w	r3, r3, #15
 800adea:	4a0f      	ldr	r2, [pc, #60]	; (800ae28 <HAL_RCC_GetHCLKFreq+0x54>)
 800adec:	5cd3      	ldrb	r3, [r2, r3]
 800adee:	f003 031f 	and.w	r3, r3, #31
 800adf2:	fa21 f303 	lsr.w	r3, r1, r3
 800adf6:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800adf8:	4b0a      	ldr	r3, [pc, #40]	; (800ae24 <HAL_RCC_GetHCLKFreq+0x50>)
 800adfa:	699b      	ldr	r3, [r3, #24]
 800adfc:	f003 030f 	and.w	r3, r3, #15
 800ae00:	4a09      	ldr	r2, [pc, #36]	; (800ae28 <HAL_RCC_GetHCLKFreq+0x54>)
 800ae02:	5cd3      	ldrb	r3, [r2, r3]
 800ae04:	f003 031f 	and.w	r3, r3, #31
 800ae08:	687a      	ldr	r2, [r7, #4]
 800ae0a:	fa22 f303 	lsr.w	r3, r2, r3
 800ae0e:	4a07      	ldr	r2, [pc, #28]	; (800ae2c <HAL_RCC_GetHCLKFreq+0x58>)
 800ae10:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800ae12:	4a07      	ldr	r2, [pc, #28]	; (800ae30 <HAL_RCC_GetHCLKFreq+0x5c>)
 800ae14:	687b      	ldr	r3, [r7, #4]
 800ae16:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 800ae18:	4b04      	ldr	r3, [pc, #16]	; (800ae2c <HAL_RCC_GetHCLKFreq+0x58>)
 800ae1a:	681b      	ldr	r3, [r3, #0]
}
 800ae1c:	4618      	mov	r0, r3
 800ae1e:	3708      	adds	r7, #8
 800ae20:	46bd      	mov	sp, r7
 800ae22:	bd80      	pop	{r7, pc}
 800ae24:	58024400 	.word	0x58024400
 800ae28:	0801c4f4 	.word	0x0801c4f4
 800ae2c:	24000014 	.word	0x24000014
 800ae30:	24000010 	.word	0x24000010

0800ae34 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800ae34:	b580      	push	{r7, lr}
 800ae36:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 800ae38:	f7ff ffcc 	bl	800add4 <HAL_RCC_GetHCLKFreq>
 800ae3c:	4601      	mov	r1, r0
 800ae3e:	4b06      	ldr	r3, [pc, #24]	; (800ae58 <HAL_RCC_GetPCLK1Freq+0x24>)
 800ae40:	69db      	ldr	r3, [r3, #28]
 800ae42:	091b      	lsrs	r3, r3, #4
 800ae44:	f003 0307 	and.w	r3, r3, #7
 800ae48:	4a04      	ldr	r2, [pc, #16]	; (800ae5c <HAL_RCC_GetPCLK1Freq+0x28>)
 800ae4a:	5cd3      	ldrb	r3, [r2, r3]
 800ae4c:	f003 031f 	and.w	r3, r3, #31
 800ae50:	fa21 f303 	lsr.w	r3, r1, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 800ae54:	4618      	mov	r0, r3
 800ae56:	bd80      	pop	{r7, pc}
 800ae58:	58024400 	.word	0x58024400
 800ae5c:	0801c4f4 	.word	0x0801c4f4

0800ae60 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800ae60:	b580      	push	{r7, lr}
 800ae62:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 800ae64:	f7ff ffb6 	bl	800add4 <HAL_RCC_GetHCLKFreq>
 800ae68:	4601      	mov	r1, r0
 800ae6a:	4b06      	ldr	r3, [pc, #24]	; (800ae84 <HAL_RCC_GetPCLK2Freq+0x24>)
 800ae6c:	69db      	ldr	r3, [r3, #28]
 800ae6e:	0a1b      	lsrs	r3, r3, #8
 800ae70:	f003 0307 	and.w	r3, r3, #7
 800ae74:	4a04      	ldr	r2, [pc, #16]	; (800ae88 <HAL_RCC_GetPCLK2Freq+0x28>)
 800ae76:	5cd3      	ldrb	r3, [r2, r3]
 800ae78:	f003 031f 	and.w	r3, r3, #31
 800ae7c:	fa21 f303 	lsr.w	r3, r1, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 800ae80:	4618      	mov	r0, r3
 800ae82:	bd80      	pop	{r7, pc}
 800ae84:	58024400 	.word	0x58024400
 800ae88:	0801c4f4 	.word	0x0801c4f4

0800ae8c <HAL_RCC_NMI_IRQHandler>:
  * @brief This function handles the RCC CSS interrupt request.
  * @note This API should be called under the NMI_Handler().
  * @retval None
  */
void HAL_RCC_NMI_IRQHandler(void)
{
 800ae8c:	b580      	push	{r7, lr}
 800ae8e:	af00      	add	r7, sp, #0
  /* Check RCC CSSF flag  */
  if(__HAL_RCC_GET_IT(RCC_IT_CSS))
 800ae90:	4b07      	ldr	r3, [pc, #28]	; (800aeb0 <HAL_RCC_NMI_IRQHandler+0x24>)
 800ae92:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800ae94:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800ae98:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800ae9c:	d105      	bne.n	800aeaa <HAL_RCC_NMI_IRQHandler+0x1e>
  {
    /* RCC Clock Security System interrupt user callback */
    HAL_RCC_CCSCallback();
 800ae9e:	f000 f809 	bl	800aeb4 <HAL_RCC_CSSCallback>

    /* Clear RCC CSS pending bit */
    __HAL_RCC_CLEAR_IT(RCC_IT_CSS);
 800aea2:	4b03      	ldr	r3, [pc, #12]	; (800aeb0 <HAL_RCC_NMI_IRQHandler+0x24>)
 800aea4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800aea8:	669a      	str	r2, [r3, #104]	; 0x68
  }
}
 800aeaa:	bf00      	nop
 800aeac:	bd80      	pop	{r7, pc}
 800aeae:	bf00      	nop
 800aeb0:	58024400 	.word	0x58024400

0800aeb4 <HAL_RCC_CSSCallback>:
/**
  * @brief  RCC Clock Security System interrupt callback
  * @retval none
  */
__weak void HAL_RCC_CCSCallback(void)
{
 800aeb4:	b480      	push	{r7}
 800aeb6:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_RCC_CCSCallback could be implemented in the user file
   */
}
 800aeb8:	bf00      	nop
 800aeba:	46bd      	mov	sp, r7
 800aebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aec0:	4770      	bx	lr
	...

0800aec4 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800aec4:	b580      	push	{r7, lr}
 800aec6:	b086      	sub	sp, #24
 800aec8:	af00      	add	r7, sp, #0
 800aeca:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800aecc:	2300      	movs	r3, #0
 800aece:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800aed0:	2300      	movs	r3, #0
 800aed2:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800aed4:	687b      	ldr	r3, [r7, #4]
 800aed6:	681b      	ldr	r3, [r3, #0]
 800aed8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800aedc:	2b00      	cmp	r3, #0
 800aede:	d03d      	beq.n	800af5c <HAL_RCCEx_PeriphCLKConfig+0x98>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 800aee0:	687b      	ldr	r3, [r7, #4]
 800aee2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800aee4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800aee8:	d013      	beq.n	800af12 <HAL_RCCEx_PeriphCLKConfig+0x4e>
 800aeea:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800aeee:	d802      	bhi.n	800aef6 <HAL_RCCEx_PeriphCLKConfig+0x32>
 800aef0:	2b00      	cmp	r3, #0
 800aef2:	d007      	beq.n	800af04 <HAL_RCCEx_PeriphCLKConfig+0x40>
 800aef4:	e01f      	b.n	800af36 <HAL_RCCEx_PeriphCLKConfig+0x72>
 800aef6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800aefa:	d013      	beq.n	800af24 <HAL_RCCEx_PeriphCLKConfig+0x60>
 800aefc:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800af00:	d01c      	beq.n	800af3c <HAL_RCCEx_PeriphCLKConfig+0x78>
 800af02:	e018      	b.n	800af36 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800af04:	4baf      	ldr	r3, [pc, #700]	; (800b1c4 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800af06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800af08:	4aae      	ldr	r2, [pc, #696]	; (800b1c4 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800af0a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800af0e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 800af10:	e015      	b.n	800af3e <HAL_RCCEx_PeriphCLKConfig+0x7a>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800af12:	687b      	ldr	r3, [r7, #4]
 800af14:	3304      	adds	r3, #4
 800af16:	2102      	movs	r1, #2
 800af18:	4618      	mov	r0, r3
 800af1a:	f001 fd33 	bl	800c984 <RCCEx_PLL2_Config>
 800af1e:	4603      	mov	r3, r0
 800af20:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 800af22:	e00c      	b.n	800af3e <HAL_RCCEx_PeriphCLKConfig+0x7a>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800af24:	687b      	ldr	r3, [r7, #4]
 800af26:	3324      	adds	r3, #36	; 0x24
 800af28:	2102      	movs	r1, #2
 800af2a:	4618      	mov	r0, r3
 800af2c:	f001 fddc 	bl	800cae8 <RCCEx_PLL3_Config>
 800af30:	4603      	mov	r3, r0
 800af32:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 800af34:	e003      	b.n	800af3e <HAL_RCCEx_PeriphCLKConfig+0x7a>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800af36:	2301      	movs	r3, #1
 800af38:	75fb      	strb	r3, [r7, #23]
      break;
 800af3a:	e000      	b.n	800af3e <HAL_RCCEx_PeriphCLKConfig+0x7a>
      break;
 800af3c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800af3e:	7dfb      	ldrb	r3, [r7, #23]
 800af40:	2b00      	cmp	r3, #0
 800af42:	d109      	bne.n	800af58 <HAL_RCCEx_PeriphCLKConfig+0x94>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 800af44:	4b9f      	ldr	r3, [pc, #636]	; (800b1c4 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800af46:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800af48:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800af4c:	687b      	ldr	r3, [r7, #4]
 800af4e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800af50:	499c      	ldr	r1, [pc, #624]	; (800b1c4 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800af52:	4313      	orrs	r3, r2
 800af54:	650b      	str	r3, [r1, #80]	; 0x50
 800af56:	e001      	b.n	800af5c <HAL_RCCEx_PeriphCLKConfig+0x98>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800af58:	7dfb      	ldrb	r3, [r7, #23]
 800af5a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800af5c:	687b      	ldr	r3, [r7, #4]
 800af5e:	681b      	ldr	r3, [r3, #0]
 800af60:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800af64:	2b00      	cmp	r3, #0
 800af66:	d03d      	beq.n	800afe4 <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 800af68:	687b      	ldr	r3, [r7, #4]
 800af6a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800af6c:	2b04      	cmp	r3, #4
 800af6e:	d826      	bhi.n	800afbe <HAL_RCCEx_PeriphCLKConfig+0xfa>
 800af70:	a201      	add	r2, pc, #4	; (adr r2, 800af78 <HAL_RCCEx_PeriphCLKConfig+0xb4>)
 800af72:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800af76:	bf00      	nop
 800af78:	0800af8d 	.word	0x0800af8d
 800af7c:	0800af9b 	.word	0x0800af9b
 800af80:	0800afad 	.word	0x0800afad
 800af84:	0800afc5 	.word	0x0800afc5
 800af88:	0800afc5 	.word	0x0800afc5
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800af8c:	4b8d      	ldr	r3, [pc, #564]	; (800b1c4 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800af8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800af90:	4a8c      	ldr	r2, [pc, #560]	; (800b1c4 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800af92:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800af96:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800af98:	e015      	b.n	800afc6 <HAL_RCCEx_PeriphCLKConfig+0x102>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800af9a:	687b      	ldr	r3, [r7, #4]
 800af9c:	3304      	adds	r3, #4
 800af9e:	2100      	movs	r1, #0
 800afa0:	4618      	mov	r0, r3
 800afa2:	f001 fcef 	bl	800c984 <RCCEx_PLL2_Config>
 800afa6:	4603      	mov	r3, r0
 800afa8:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800afaa:	e00c      	b.n	800afc6 <HAL_RCCEx_PeriphCLKConfig+0x102>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800afac:	687b      	ldr	r3, [r7, #4]
 800afae:	3324      	adds	r3, #36	; 0x24
 800afb0:	2100      	movs	r1, #0
 800afb2:	4618      	mov	r0, r3
 800afb4:	f001 fd98 	bl	800cae8 <RCCEx_PLL3_Config>
 800afb8:	4603      	mov	r3, r0
 800afba:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800afbc:	e003      	b.n	800afc6 <HAL_RCCEx_PeriphCLKConfig+0x102>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800afbe:	2301      	movs	r3, #1
 800afc0:	75fb      	strb	r3, [r7, #23]
      break;
 800afc2:	e000      	b.n	800afc6 <HAL_RCCEx_PeriphCLKConfig+0x102>
      break;
 800afc4:	bf00      	nop
    }

    if(ret == HAL_OK)
 800afc6:	7dfb      	ldrb	r3, [r7, #23]
 800afc8:	2b00      	cmp	r3, #0
 800afca:	d109      	bne.n	800afe0 <HAL_RCCEx_PeriphCLKConfig+0x11c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800afcc:	4b7d      	ldr	r3, [pc, #500]	; (800b1c4 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800afce:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800afd0:	f023 0207 	bic.w	r2, r3, #7
 800afd4:	687b      	ldr	r3, [r7, #4]
 800afd6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800afd8:	497a      	ldr	r1, [pc, #488]	; (800b1c4 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800afda:	4313      	orrs	r3, r2
 800afdc:	650b      	str	r3, [r1, #80]	; 0x50
 800afde:	e001      	b.n	800afe4 <HAL_RCCEx_PeriphCLKConfig+0x120>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800afe0:	7dfb      	ldrb	r3, [r7, #23]
 800afe2:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 800afe4:	687b      	ldr	r3, [r7, #4]
 800afe6:	681b      	ldr	r3, [r3, #0]
 800afe8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800afec:	2b00      	cmp	r3, #0
 800afee:	d03e      	beq.n	800b06e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 800aff0:	687b      	ldr	r3, [r7, #4]
 800aff2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800aff4:	2b80      	cmp	r3, #128	; 0x80
 800aff6:	d01c      	beq.n	800b032 <HAL_RCCEx_PeriphCLKConfig+0x16e>
 800aff8:	2b80      	cmp	r3, #128	; 0x80
 800affa:	d804      	bhi.n	800b006 <HAL_RCCEx_PeriphCLKConfig+0x142>
 800affc:	2b00      	cmp	r3, #0
 800affe:	d008      	beq.n	800b012 <HAL_RCCEx_PeriphCLKConfig+0x14e>
 800b000:	2b40      	cmp	r3, #64	; 0x40
 800b002:	d00d      	beq.n	800b020 <HAL_RCCEx_PeriphCLKConfig+0x15c>
 800b004:	e01e      	b.n	800b044 <HAL_RCCEx_PeriphCLKConfig+0x180>
 800b006:	2bc0      	cmp	r3, #192	; 0xc0
 800b008:	d01f      	beq.n	800b04a <HAL_RCCEx_PeriphCLKConfig+0x186>
 800b00a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b00e:	d01e      	beq.n	800b04e <HAL_RCCEx_PeriphCLKConfig+0x18a>
 800b010:	e018      	b.n	800b044 <HAL_RCCEx_PeriphCLKConfig+0x180>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b012:	4b6c      	ldr	r3, [pc, #432]	; (800b1c4 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800b014:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b016:	4a6b      	ldr	r2, [pc, #428]	; (800b1c4 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800b018:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800b01c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 800b01e:	e017      	b.n	800b050 <HAL_RCCEx_PeriphCLKConfig+0x18c>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800b020:	687b      	ldr	r3, [r7, #4]
 800b022:	3304      	adds	r3, #4
 800b024:	2100      	movs	r1, #0
 800b026:	4618      	mov	r0, r3
 800b028:	f001 fcac 	bl	800c984 <RCCEx_PLL2_Config>
 800b02c:	4603      	mov	r3, r0
 800b02e:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 800b030:	e00e      	b.n	800b050 <HAL_RCCEx_PeriphCLKConfig+0x18c>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800b032:	687b      	ldr	r3, [r7, #4]
 800b034:	3324      	adds	r3, #36	; 0x24
 800b036:	2100      	movs	r1, #0
 800b038:	4618      	mov	r0, r3
 800b03a:	f001 fd55 	bl	800cae8 <RCCEx_PLL3_Config>
 800b03e:	4603      	mov	r3, r0
 800b040:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 800b042:	e005      	b.n	800b050 <HAL_RCCEx_PeriphCLKConfig+0x18c>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800b044:	2301      	movs	r3, #1
 800b046:	75fb      	strb	r3, [r7, #23]
      break;
 800b048:	e002      	b.n	800b050 <HAL_RCCEx_PeriphCLKConfig+0x18c>
      break;
 800b04a:	bf00      	nop
 800b04c:	e000      	b.n	800b050 <HAL_RCCEx_PeriphCLKConfig+0x18c>
      break;
 800b04e:	bf00      	nop
    }

    if(ret == HAL_OK)
 800b050:	7dfb      	ldrb	r3, [r7, #23]
 800b052:	2b00      	cmp	r3, #0
 800b054:	d109      	bne.n	800b06a <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 800b056:	4b5b      	ldr	r3, [pc, #364]	; (800b1c4 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800b058:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b05a:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 800b05e:	687b      	ldr	r3, [r7, #4]
 800b060:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b062:	4958      	ldr	r1, [pc, #352]	; (800b1c4 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800b064:	4313      	orrs	r3, r2
 800b066:	650b      	str	r3, [r1, #80]	; 0x50
 800b068:	e001      	b.n	800b06e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b06a:	7dfb      	ldrb	r3, [r7, #23]
 800b06c:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 800b06e:	687b      	ldr	r3, [r7, #4]
 800b070:	681b      	ldr	r3, [r3, #0]
 800b072:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800b076:	2b00      	cmp	r3, #0
 800b078:	d044      	beq.n	800b104 <HAL_RCCEx_PeriphCLKConfig+0x240>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 800b07a:	687b      	ldr	r3, [r7, #4]
 800b07c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800b080:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800b084:	d01f      	beq.n	800b0c6 <HAL_RCCEx_PeriphCLKConfig+0x202>
 800b086:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800b08a:	d805      	bhi.n	800b098 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
 800b08c:	2b00      	cmp	r3, #0
 800b08e:	d00a      	beq.n	800b0a6 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 800b090:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800b094:	d00e      	beq.n	800b0b4 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
 800b096:	e01f      	b.n	800b0d8 <HAL_RCCEx_PeriphCLKConfig+0x214>
 800b098:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800b09c:	d01f      	beq.n	800b0de <HAL_RCCEx_PeriphCLKConfig+0x21a>
 800b09e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800b0a2:	d01e      	beq.n	800b0e2 <HAL_RCCEx_PeriphCLKConfig+0x21e>
 800b0a4:	e018      	b.n	800b0d8 <HAL_RCCEx_PeriphCLKConfig+0x214>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b0a6:	4b47      	ldr	r3, [pc, #284]	; (800b1c4 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800b0a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b0aa:	4a46      	ldr	r2, [pc, #280]	; (800b1c4 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800b0ac:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800b0b0:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800b0b2:	e017      	b.n	800b0e4 <HAL_RCCEx_PeriphCLKConfig+0x220>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800b0b4:	687b      	ldr	r3, [r7, #4]
 800b0b6:	3304      	adds	r3, #4
 800b0b8:	2100      	movs	r1, #0
 800b0ba:	4618      	mov	r0, r3
 800b0bc:	f001 fc62 	bl	800c984 <RCCEx_PLL2_Config>
 800b0c0:	4603      	mov	r3, r0
 800b0c2:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 800b0c4:	e00e      	b.n	800b0e4 <HAL_RCCEx_PeriphCLKConfig+0x220>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800b0c6:	687b      	ldr	r3, [r7, #4]
 800b0c8:	3324      	adds	r3, #36	; 0x24
 800b0ca:	2100      	movs	r1, #0
 800b0cc:	4618      	mov	r0, r3
 800b0ce:	f001 fd0b 	bl	800cae8 <RCCEx_PLL3_Config>
 800b0d2:	4603      	mov	r3, r0
 800b0d4:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800b0d6:	e005      	b.n	800b0e4 <HAL_RCCEx_PeriphCLKConfig+0x220>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 800b0d8:	2301      	movs	r3, #1
 800b0da:	75fb      	strb	r3, [r7, #23]
      break;
 800b0dc:	e002      	b.n	800b0e4 <HAL_RCCEx_PeriphCLKConfig+0x220>
      break;
 800b0de:	bf00      	nop
 800b0e0:	e000      	b.n	800b0e4 <HAL_RCCEx_PeriphCLKConfig+0x220>
      break;
 800b0e2:	bf00      	nop
    }

    if(ret == HAL_OK)
 800b0e4:	7dfb      	ldrb	r3, [r7, #23]
 800b0e6:	2b00      	cmp	r3, #0
 800b0e8:	d10a      	bne.n	800b100 <HAL_RCCEx_PeriphCLKConfig+0x23c>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 800b0ea:	4b36      	ldr	r3, [pc, #216]	; (800b1c4 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800b0ec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b0ee:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 800b0f2:	687b      	ldr	r3, [r7, #4]
 800b0f4:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800b0f8:	4932      	ldr	r1, [pc, #200]	; (800b1c4 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800b0fa:	4313      	orrs	r3, r2
 800b0fc:	658b      	str	r3, [r1, #88]	; 0x58
 800b0fe:	e001      	b.n	800b104 <HAL_RCCEx_PeriphCLKConfig+0x240>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b100:	7dfb      	ldrb	r3, [r7, #23]
 800b102:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 800b104:	687b      	ldr	r3, [r7, #4]
 800b106:	681b      	ldr	r3, [r3, #0]
 800b108:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800b10c:	2b00      	cmp	r3, #0
 800b10e:	d044      	beq.n	800b19a <HAL_RCCEx_PeriphCLKConfig+0x2d6>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 800b110:	687b      	ldr	r3, [r7, #4]
 800b112:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800b116:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800b11a:	d01f      	beq.n	800b15c <HAL_RCCEx_PeriphCLKConfig+0x298>
 800b11c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800b120:	d805      	bhi.n	800b12e <HAL_RCCEx_PeriphCLKConfig+0x26a>
 800b122:	2b00      	cmp	r3, #0
 800b124:	d00a      	beq.n	800b13c <HAL_RCCEx_PeriphCLKConfig+0x278>
 800b126:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800b12a:	d00e      	beq.n	800b14a <HAL_RCCEx_PeriphCLKConfig+0x286>
 800b12c:	e01f      	b.n	800b16e <HAL_RCCEx_PeriphCLKConfig+0x2aa>
 800b12e:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800b132:	d01f      	beq.n	800b174 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 800b134:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800b138:	d01e      	beq.n	800b178 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 800b13a:	e018      	b.n	800b16e <HAL_RCCEx_PeriphCLKConfig+0x2aa>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b13c:	4b21      	ldr	r3, [pc, #132]	; (800b1c4 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800b13e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b140:	4a20      	ldr	r2, [pc, #128]	; (800b1c4 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800b142:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800b146:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800b148:	e017      	b.n	800b17a <HAL_RCCEx_PeriphCLKConfig+0x2b6>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800b14a:	687b      	ldr	r3, [r7, #4]
 800b14c:	3304      	adds	r3, #4
 800b14e:	2100      	movs	r1, #0
 800b150:	4618      	mov	r0, r3
 800b152:	f001 fc17 	bl	800c984 <RCCEx_PLL2_Config>
 800b156:	4603      	mov	r3, r0
 800b158:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 800b15a:	e00e      	b.n	800b17a <HAL_RCCEx_PeriphCLKConfig+0x2b6>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800b15c:	687b      	ldr	r3, [r7, #4]
 800b15e:	3324      	adds	r3, #36	; 0x24
 800b160:	2100      	movs	r1, #0
 800b162:	4618      	mov	r0, r3
 800b164:	f001 fcc0 	bl	800cae8 <RCCEx_PLL3_Config>
 800b168:	4603      	mov	r3, r0
 800b16a:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800b16c:	e005      	b.n	800b17a <HAL_RCCEx_PeriphCLKConfig+0x2b6>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 800b16e:	2301      	movs	r3, #1
 800b170:	75fb      	strb	r3, [r7, #23]
      break;
 800b172:	e002      	b.n	800b17a <HAL_RCCEx_PeriphCLKConfig+0x2b6>
      break;
 800b174:	bf00      	nop
 800b176:	e000      	b.n	800b17a <HAL_RCCEx_PeriphCLKConfig+0x2b6>
      break;
 800b178:	bf00      	nop
    }

    if(ret == HAL_OK)
 800b17a:	7dfb      	ldrb	r3, [r7, #23]
 800b17c:	2b00      	cmp	r3, #0
 800b17e:	d10a      	bne.n	800b196 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 800b180:	4b10      	ldr	r3, [pc, #64]	; (800b1c4 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800b182:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b184:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 800b188:	687b      	ldr	r3, [r7, #4]
 800b18a:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800b18e:	490d      	ldr	r1, [pc, #52]	; (800b1c4 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800b190:	4313      	orrs	r3, r2
 800b192:	658b      	str	r3, [r1, #88]	; 0x58
 800b194:	e001      	b.n	800b19a <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b196:	7dfb      	ldrb	r3, [r7, #23]
 800b198:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 800b19a:	687b      	ldr	r3, [r7, #4]
 800b19c:	681b      	ldr	r3, [r3, #0]
 800b19e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b1a2:	2b00      	cmp	r3, #0
 800b1a4:	d035      	beq.n	800b212 <HAL_RCCEx_PeriphCLKConfig+0x34e>
  {
    switch(PeriphClkInit->QspiClockSelection)
 800b1a6:	687b      	ldr	r3, [r7, #4]
 800b1a8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b1aa:	2b10      	cmp	r3, #16
 800b1ac:	d00c      	beq.n	800b1c8 <HAL_RCCEx_PeriphCLKConfig+0x304>
 800b1ae:	2b10      	cmp	r3, #16
 800b1b0:	d802      	bhi.n	800b1b8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
 800b1b2:	2b00      	cmp	r3, #0
 800b1b4:	d01b      	beq.n	800b1ee <HAL_RCCEx_PeriphCLKConfig+0x32a>
 800b1b6:	e017      	b.n	800b1e8 <HAL_RCCEx_PeriphCLKConfig+0x324>
 800b1b8:	2b20      	cmp	r3, #32
 800b1ba:	d00c      	beq.n	800b1d6 <HAL_RCCEx_PeriphCLKConfig+0x312>
 800b1bc:	2b30      	cmp	r3, #48	; 0x30
 800b1be:	d018      	beq.n	800b1f2 <HAL_RCCEx_PeriphCLKConfig+0x32e>
 800b1c0:	e012      	b.n	800b1e8 <HAL_RCCEx_PeriphCLKConfig+0x324>
 800b1c2:	bf00      	nop
 800b1c4:	58024400 	.word	0x58024400
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b1c8:	4baf      	ldr	r3, [pc, #700]	; (800b488 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 800b1ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b1cc:	4aae      	ldr	r2, [pc, #696]	; (800b488 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 800b1ce:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800b1d2:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 800b1d4:	e00e      	b.n	800b1f4 <HAL_RCCEx_PeriphCLKConfig+0x330>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800b1d6:	687b      	ldr	r3, [r7, #4]
 800b1d8:	3304      	adds	r3, #4
 800b1da:	2102      	movs	r1, #2
 800b1dc:	4618      	mov	r0, r3
 800b1de:	f001 fbd1 	bl	800c984 <RCCEx_PLL2_Config>
 800b1e2:	4603      	mov	r3, r0
 800b1e4:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 800b1e6:	e005      	b.n	800b1f4 <HAL_RCCEx_PeriphCLKConfig+0x330>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 800b1e8:	2301      	movs	r3, #1
 800b1ea:	75fb      	strb	r3, [r7, #23]
      break;
 800b1ec:	e002      	b.n	800b1f4 <HAL_RCCEx_PeriphCLKConfig+0x330>
      break;
 800b1ee:	bf00      	nop
 800b1f0:	e000      	b.n	800b1f4 <HAL_RCCEx_PeriphCLKConfig+0x330>
      break;
 800b1f2:	bf00      	nop
    }

    if(ret == HAL_OK)
 800b1f4:	7dfb      	ldrb	r3, [r7, #23]
 800b1f6:	2b00      	cmp	r3, #0
 800b1f8:	d109      	bne.n	800b20e <HAL_RCCEx_PeriphCLKConfig+0x34a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 800b1fa:	4ba3      	ldr	r3, [pc, #652]	; (800b488 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 800b1fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b1fe:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800b202:	687b      	ldr	r3, [r7, #4]
 800b204:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b206:	49a0      	ldr	r1, [pc, #640]	; (800b488 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 800b208:	4313      	orrs	r3, r2
 800b20a:	64cb      	str	r3, [r1, #76]	; 0x4c
 800b20c:	e001      	b.n	800b212 <HAL_RCCEx_PeriphCLKConfig+0x34e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b20e:	7dfb      	ldrb	r3, [r7, #23]
 800b210:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 800b212:	687b      	ldr	r3, [r7, #4]
 800b214:	681b      	ldr	r3, [r3, #0]
 800b216:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800b21a:	2b00      	cmp	r3, #0
 800b21c:	d042      	beq.n	800b2a4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 800b21e:	687b      	ldr	r3, [r7, #4]
 800b220:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b222:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b226:	d01f      	beq.n	800b268 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
 800b228:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b22c:	d805      	bhi.n	800b23a <HAL_RCCEx_PeriphCLKConfig+0x376>
 800b22e:	2b00      	cmp	r3, #0
 800b230:	d00a      	beq.n	800b248 <HAL_RCCEx_PeriphCLKConfig+0x384>
 800b232:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b236:	d00e      	beq.n	800b256 <HAL_RCCEx_PeriphCLKConfig+0x392>
 800b238:	e01f      	b.n	800b27a <HAL_RCCEx_PeriphCLKConfig+0x3b6>
 800b23a:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800b23e:	d01f      	beq.n	800b280 <HAL_RCCEx_PeriphCLKConfig+0x3bc>
 800b240:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800b244:	d01e      	beq.n	800b284 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
 800b246:	e018      	b.n	800b27a <HAL_RCCEx_PeriphCLKConfig+0x3b6>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b248:	4b8f      	ldr	r3, [pc, #572]	; (800b488 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 800b24a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b24c:	4a8e      	ldr	r2, [pc, #568]	; (800b488 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 800b24e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800b252:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 800b254:	e017      	b.n	800b286 <HAL_RCCEx_PeriphCLKConfig+0x3c2>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800b256:	687b      	ldr	r3, [r7, #4]
 800b258:	3304      	adds	r3, #4
 800b25a:	2100      	movs	r1, #0
 800b25c:	4618      	mov	r0, r3
 800b25e:	f001 fb91 	bl	800c984 <RCCEx_PLL2_Config>
 800b262:	4603      	mov	r3, r0
 800b264:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 800b266:	e00e      	b.n	800b286 <HAL_RCCEx_PeriphCLKConfig+0x3c2>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800b268:	687b      	ldr	r3, [r7, #4]
 800b26a:	3324      	adds	r3, #36	; 0x24
 800b26c:	2100      	movs	r1, #0
 800b26e:	4618      	mov	r0, r3
 800b270:	f001 fc3a 	bl	800cae8 <RCCEx_PLL3_Config>
 800b274:	4603      	mov	r3, r0
 800b276:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 800b278:	e005      	b.n	800b286 <HAL_RCCEx_PeriphCLKConfig+0x3c2>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800b27a:	2301      	movs	r3, #1
 800b27c:	75fb      	strb	r3, [r7, #23]
      break;
 800b27e:	e002      	b.n	800b286 <HAL_RCCEx_PeriphCLKConfig+0x3c2>
      break;
 800b280:	bf00      	nop
 800b282:	e000      	b.n	800b286 <HAL_RCCEx_PeriphCLKConfig+0x3c2>
      break;
 800b284:	bf00      	nop
    }

    if(ret == HAL_OK)
 800b286:	7dfb      	ldrb	r3, [r7, #23]
 800b288:	2b00      	cmp	r3, #0
 800b28a:	d109      	bne.n	800b2a0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 800b28c:	4b7e      	ldr	r3, [pc, #504]	; (800b488 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 800b28e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b290:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 800b294:	687b      	ldr	r3, [r7, #4]
 800b296:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b298:	497b      	ldr	r1, [pc, #492]	; (800b488 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 800b29a:	4313      	orrs	r3, r2
 800b29c:	650b      	str	r3, [r1, #80]	; 0x50
 800b29e:	e001      	b.n	800b2a4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b2a0:	7dfb      	ldrb	r3, [r7, #23]
 800b2a2:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 800b2a4:	687b      	ldr	r3, [r7, #4]
 800b2a6:	681b      	ldr	r3, [r3, #0]
 800b2a8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800b2ac:	2b00      	cmp	r3, #0
 800b2ae:	d042      	beq.n	800b336 <HAL_RCCEx_PeriphCLKConfig+0x472>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 800b2b0:	687b      	ldr	r3, [r7, #4]
 800b2b2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800b2b4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800b2b8:	d01b      	beq.n	800b2f2 <HAL_RCCEx_PeriphCLKConfig+0x42e>
 800b2ba:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800b2be:	d805      	bhi.n	800b2cc <HAL_RCCEx_PeriphCLKConfig+0x408>
 800b2c0:	2b00      	cmp	r3, #0
 800b2c2:	d022      	beq.n	800b30a <HAL_RCCEx_PeriphCLKConfig+0x446>
 800b2c4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b2c8:	d00a      	beq.n	800b2e0 <HAL_RCCEx_PeriphCLKConfig+0x41c>
 800b2ca:	e01b      	b.n	800b304 <HAL_RCCEx_PeriphCLKConfig+0x440>
 800b2cc:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800b2d0:	d01d      	beq.n	800b30e <HAL_RCCEx_PeriphCLKConfig+0x44a>
 800b2d2:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800b2d6:	d01c      	beq.n	800b312 <HAL_RCCEx_PeriphCLKConfig+0x44e>
 800b2d8:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800b2dc:	d01b      	beq.n	800b316 <HAL_RCCEx_PeriphCLKConfig+0x452>
 800b2de:	e011      	b.n	800b304 <HAL_RCCEx_PeriphCLKConfig+0x440>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800b2e0:	687b      	ldr	r3, [r7, #4]
 800b2e2:	3304      	adds	r3, #4
 800b2e4:	2101      	movs	r1, #1
 800b2e6:	4618      	mov	r0, r3
 800b2e8:	f001 fb4c 	bl	800c984 <RCCEx_PLL2_Config>
 800b2ec:	4603      	mov	r3, r0
 800b2ee:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 800b2f0:	e012      	b.n	800b318 <HAL_RCCEx_PeriphCLKConfig+0x454>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800b2f2:	687b      	ldr	r3, [r7, #4]
 800b2f4:	3324      	adds	r3, #36	; 0x24
 800b2f6:	2101      	movs	r1, #1
 800b2f8:	4618      	mov	r0, r3
 800b2fa:	f001 fbf5 	bl	800cae8 <RCCEx_PLL3_Config>
 800b2fe:	4603      	mov	r3, r0
 800b300:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 800b302:	e009      	b.n	800b318 <HAL_RCCEx_PeriphCLKConfig+0x454>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800b304:	2301      	movs	r3, #1
 800b306:	75fb      	strb	r3, [r7, #23]
      break;
 800b308:	e006      	b.n	800b318 <HAL_RCCEx_PeriphCLKConfig+0x454>
      break;
 800b30a:	bf00      	nop
 800b30c:	e004      	b.n	800b318 <HAL_RCCEx_PeriphCLKConfig+0x454>
      break;
 800b30e:	bf00      	nop
 800b310:	e002      	b.n	800b318 <HAL_RCCEx_PeriphCLKConfig+0x454>
      break;
 800b312:	bf00      	nop
 800b314:	e000      	b.n	800b318 <HAL_RCCEx_PeriphCLKConfig+0x454>
      break;
 800b316:	bf00      	nop
    }

    if(ret == HAL_OK)
 800b318:	7dfb      	ldrb	r3, [r7, #23]
 800b31a:	2b00      	cmp	r3, #0
 800b31c:	d109      	bne.n	800b332 <HAL_RCCEx_PeriphCLKConfig+0x46e>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 800b31e:	4b5a      	ldr	r3, [pc, #360]	; (800b488 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 800b320:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b322:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 800b326:	687b      	ldr	r3, [r7, #4]
 800b328:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800b32a:	4957      	ldr	r1, [pc, #348]	; (800b488 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 800b32c:	4313      	orrs	r3, r2
 800b32e:	650b      	str	r3, [r1, #80]	; 0x50
 800b330:	e001      	b.n	800b336 <HAL_RCCEx_PeriphCLKConfig+0x472>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b332:	7dfb      	ldrb	r3, [r7, #23]
 800b334:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 800b336:	687b      	ldr	r3, [r7, #4]
 800b338:	681b      	ldr	r3, [r3, #0]
 800b33a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800b33e:	2b00      	cmp	r3, #0
 800b340:	d044      	beq.n	800b3cc <HAL_RCCEx_PeriphCLKConfig+0x508>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 800b342:	687b      	ldr	r3, [r7, #4]
 800b344:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800b348:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b34c:	d01b      	beq.n	800b386 <HAL_RCCEx_PeriphCLKConfig+0x4c2>
 800b34e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b352:	d805      	bhi.n	800b360 <HAL_RCCEx_PeriphCLKConfig+0x49c>
 800b354:	2b00      	cmp	r3, #0
 800b356:	d022      	beq.n	800b39e <HAL_RCCEx_PeriphCLKConfig+0x4da>
 800b358:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800b35c:	d00a      	beq.n	800b374 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
 800b35e:	e01b      	b.n	800b398 <HAL_RCCEx_PeriphCLKConfig+0x4d4>
 800b360:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b364:	d01d      	beq.n	800b3a2 <HAL_RCCEx_PeriphCLKConfig+0x4de>
 800b366:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800b36a:	d01c      	beq.n	800b3a6 <HAL_RCCEx_PeriphCLKConfig+0x4e2>
 800b36c:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800b370:	d01b      	beq.n	800b3aa <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 800b372:	e011      	b.n	800b398 <HAL_RCCEx_PeriphCLKConfig+0x4d4>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800b374:	687b      	ldr	r3, [r7, #4]
 800b376:	3304      	adds	r3, #4
 800b378:	2101      	movs	r1, #1
 800b37a:	4618      	mov	r0, r3
 800b37c:	f001 fb02 	bl	800c984 <RCCEx_PLL2_Config>
 800b380:	4603      	mov	r3, r0
 800b382:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 800b384:	e012      	b.n	800b3ac <HAL_RCCEx_PeriphCLKConfig+0x4e8>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800b386:	687b      	ldr	r3, [r7, #4]
 800b388:	3324      	adds	r3, #36	; 0x24
 800b38a:	2101      	movs	r1, #1
 800b38c:	4618      	mov	r0, r3
 800b38e:	f001 fbab 	bl	800cae8 <RCCEx_PLL3_Config>
 800b392:	4603      	mov	r3, r0
 800b394:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 800b396:	e009      	b.n	800b3ac <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 800b398:	2301      	movs	r3, #1
 800b39a:	75fb      	strb	r3, [r7, #23]
      break;
 800b39c:	e006      	b.n	800b3ac <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      break;
 800b39e:	bf00      	nop
 800b3a0:	e004      	b.n	800b3ac <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      break;
 800b3a2:	bf00      	nop
 800b3a4:	e002      	b.n	800b3ac <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      break;
 800b3a6:	bf00      	nop
 800b3a8:	e000      	b.n	800b3ac <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      break;
 800b3aa:	bf00      	nop
    }

    if(ret == HAL_OK)
 800b3ac:	7dfb      	ldrb	r3, [r7, #23]
 800b3ae:	2b00      	cmp	r3, #0
 800b3b0:	d10a      	bne.n	800b3c8 <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 800b3b2:	4b35      	ldr	r3, [pc, #212]	; (800b488 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 800b3b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b3b6:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 800b3ba:	687b      	ldr	r3, [r7, #4]
 800b3bc:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800b3c0:	4931      	ldr	r1, [pc, #196]	; (800b488 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 800b3c2:	4313      	orrs	r3, r2
 800b3c4:	658b      	str	r3, [r1, #88]	; 0x58
 800b3c6:	e001      	b.n	800b3cc <HAL_RCCEx_PeriphCLKConfig+0x508>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b3c8:	7dfb      	ldrb	r3, [r7, #23]
 800b3ca:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800b3cc:	687b      	ldr	r3, [r7, #4]
 800b3ce:	681b      	ldr	r3, [r3, #0]
 800b3d0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800b3d4:	2b00      	cmp	r3, #0
 800b3d6:	d02d      	beq.n	800b434 <HAL_RCCEx_PeriphCLKConfig+0x570>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 800b3d8:	687b      	ldr	r3, [r7, #4]
 800b3da:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b3dc:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800b3e0:	d005      	beq.n	800b3ee <HAL_RCCEx_PeriphCLKConfig+0x52a>
 800b3e2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b3e6:	d009      	beq.n	800b3fc <HAL_RCCEx_PeriphCLKConfig+0x538>
 800b3e8:	2b00      	cmp	r3, #0
 800b3ea:	d013      	beq.n	800b414 <HAL_RCCEx_PeriphCLKConfig+0x550>
 800b3ec:	e00f      	b.n	800b40e <HAL_RCCEx_PeriphCLKConfig+0x54a>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b3ee:	4b26      	ldr	r3, [pc, #152]	; (800b488 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 800b3f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b3f2:	4a25      	ldr	r2, [pc, #148]	; (800b488 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 800b3f4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800b3f8:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 800b3fa:	e00c      	b.n	800b416 <HAL_RCCEx_PeriphCLKConfig+0x552>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800b3fc:	687b      	ldr	r3, [r7, #4]
 800b3fe:	3304      	adds	r3, #4
 800b400:	2101      	movs	r1, #1
 800b402:	4618      	mov	r0, r3
 800b404:	f001 fabe 	bl	800c984 <RCCEx_PLL2_Config>
 800b408:	4603      	mov	r3, r0
 800b40a:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 800b40c:	e003      	b.n	800b416 <HAL_RCCEx_PeriphCLKConfig+0x552>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800b40e:	2301      	movs	r3, #1
 800b410:	75fb      	strb	r3, [r7, #23]
      break;
 800b412:	e000      	b.n	800b416 <HAL_RCCEx_PeriphCLKConfig+0x552>
      break;
 800b414:	bf00      	nop
    }

    if(ret == HAL_OK)
 800b416:	7dfb      	ldrb	r3, [r7, #23]
 800b418:	2b00      	cmp	r3, #0
 800b41a:	d109      	bne.n	800b430 <HAL_RCCEx_PeriphCLKConfig+0x56c>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800b41c:	4b1a      	ldr	r3, [pc, #104]	; (800b488 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 800b41e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b420:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800b424:	687b      	ldr	r3, [r7, #4]
 800b426:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b428:	4917      	ldr	r1, [pc, #92]	; (800b488 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 800b42a:	4313      	orrs	r3, r2
 800b42c:	650b      	str	r3, [r1, #80]	; 0x50
 800b42e:	e001      	b.n	800b434 <HAL_RCCEx_PeriphCLKConfig+0x570>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b430:	7dfb      	ldrb	r3, [r7, #23]
 800b432:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 800b434:	687b      	ldr	r3, [r7, #4]
 800b436:	681b      	ldr	r3, [r3, #0]
 800b438:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800b43c:	2b00      	cmp	r3, #0
 800b43e:	d035      	beq.n	800b4ac <HAL_RCCEx_PeriphCLKConfig+0x5e8>
  {
    switch(PeriphClkInit->FmcClockSelection)
 800b440:	687b      	ldr	r3, [r7, #4]
 800b442:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b444:	2b03      	cmp	r3, #3
 800b446:	d81b      	bhi.n	800b480 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 800b448:	a201      	add	r2, pc, #4	; (adr r2, 800b450 <HAL_RCCEx_PeriphCLKConfig+0x58c>)
 800b44a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b44e:	bf00      	nop
 800b450:	0800b48d 	.word	0x0800b48d
 800b454:	0800b461 	.word	0x0800b461
 800b458:	0800b46f 	.word	0x0800b46f
 800b45c:	0800b48d 	.word	0x0800b48d
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b460:	4b09      	ldr	r3, [pc, #36]	; (800b488 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 800b462:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b464:	4a08      	ldr	r2, [pc, #32]	; (800b488 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 800b466:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800b46a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 800b46c:	e00f      	b.n	800b48e <HAL_RCCEx_PeriphCLKConfig+0x5ca>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800b46e:	687b      	ldr	r3, [r7, #4]
 800b470:	3304      	adds	r3, #4
 800b472:	2102      	movs	r1, #2
 800b474:	4618      	mov	r0, r3
 800b476:	f001 fa85 	bl	800c984 <RCCEx_PLL2_Config>
 800b47a:	4603      	mov	r3, r0
 800b47c:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 800b47e:	e006      	b.n	800b48e <HAL_RCCEx_PeriphCLKConfig+0x5ca>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 800b480:	2301      	movs	r3, #1
 800b482:	75fb      	strb	r3, [r7, #23]
      break;
 800b484:	e003      	b.n	800b48e <HAL_RCCEx_PeriphCLKConfig+0x5ca>
 800b486:	bf00      	nop
 800b488:	58024400 	.word	0x58024400
      break;
 800b48c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800b48e:	7dfb      	ldrb	r3, [r7, #23]
 800b490:	2b00      	cmp	r3, #0
 800b492:	d109      	bne.n	800b4a8 <HAL_RCCEx_PeriphCLKConfig+0x5e4>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 800b494:	4bba      	ldr	r3, [pc, #744]	; (800b780 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 800b496:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b498:	f023 0203 	bic.w	r2, r3, #3
 800b49c:	687b      	ldr	r3, [r7, #4]
 800b49e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b4a0:	49b7      	ldr	r1, [pc, #732]	; (800b780 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 800b4a2:	4313      	orrs	r3, r2
 800b4a4:	64cb      	str	r3, [r1, #76]	; 0x4c
 800b4a6:	e001      	b.n	800b4ac <HAL_RCCEx_PeriphCLKConfig+0x5e8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b4a8:	7dfb      	ldrb	r3, [r7, #23]
 800b4aa:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800b4ac:	687b      	ldr	r3, [r7, #4]
 800b4ae:	681b      	ldr	r3, [r3, #0]
 800b4b0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800b4b4:	2b00      	cmp	r3, #0
 800b4b6:	f000 8086 	beq.w	800b5c6 <HAL_RCCEx_PeriphCLKConfig+0x702>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800b4ba:	4bb2      	ldr	r3, [pc, #712]	; (800b784 <HAL_RCCEx_PeriphCLKConfig+0x8c0>)
 800b4bc:	681b      	ldr	r3, [r3, #0]
 800b4be:	4ab1      	ldr	r2, [pc, #708]	; (800b784 <HAL_RCCEx_PeriphCLKConfig+0x8c0>)
 800b4c0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800b4c4:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800b4c6:	f7f9 fc75 	bl	8004db4 <HAL_GetTick>
 800b4ca:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800b4cc:	e009      	b.n	800b4e2 <HAL_RCCEx_PeriphCLKConfig+0x61e>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800b4ce:	f7f9 fc71 	bl	8004db4 <HAL_GetTick>
 800b4d2:	4602      	mov	r2, r0
 800b4d4:	693b      	ldr	r3, [r7, #16]
 800b4d6:	1ad3      	subs	r3, r2, r3
 800b4d8:	2b64      	cmp	r3, #100	; 0x64
 800b4da:	d902      	bls.n	800b4e2 <HAL_RCCEx_PeriphCLKConfig+0x61e>
      {
        ret = HAL_TIMEOUT;
 800b4dc:	2303      	movs	r3, #3
 800b4de:	75fb      	strb	r3, [r7, #23]
        break;
 800b4e0:	e005      	b.n	800b4ee <HAL_RCCEx_PeriphCLKConfig+0x62a>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800b4e2:	4ba8      	ldr	r3, [pc, #672]	; (800b784 <HAL_RCCEx_PeriphCLKConfig+0x8c0>)
 800b4e4:	681b      	ldr	r3, [r3, #0]
 800b4e6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b4ea:	2b00      	cmp	r3, #0
 800b4ec:	d0ef      	beq.n	800b4ce <HAL_RCCEx_PeriphCLKConfig+0x60a>
      }
    }

    if(ret == HAL_OK)
 800b4ee:	7dfb      	ldrb	r3, [r7, #23]
 800b4f0:	2b00      	cmp	r3, #0
 800b4f2:	d166      	bne.n	800b5c2 <HAL_RCCEx_PeriphCLKConfig+0x6fe>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 800b4f4:	4ba2      	ldr	r3, [pc, #648]	; (800b780 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 800b4f6:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800b4f8:	687b      	ldr	r3, [r7, #4]
 800b4fa:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800b4fe:	4053      	eors	r3, r2
 800b500:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800b504:	2b00      	cmp	r3, #0
 800b506:	d013      	beq.n	800b530 <HAL_RCCEx_PeriphCLKConfig+0x66c>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800b508:	4b9d      	ldr	r3, [pc, #628]	; (800b780 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 800b50a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b50c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800b510:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800b512:	4b9b      	ldr	r3, [pc, #620]	; (800b780 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 800b514:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b516:	4a9a      	ldr	r2, [pc, #616]	; (800b780 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 800b518:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800b51c:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 800b51e:	4b98      	ldr	r3, [pc, #608]	; (800b780 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 800b520:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b522:	4a97      	ldr	r2, [pc, #604]	; (800b780 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 800b524:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800b528:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 800b52a:	4a95      	ldr	r2, [pc, #596]	; (800b780 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 800b52c:	68fb      	ldr	r3, [r7, #12]
 800b52e:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 800b530:	687b      	ldr	r3, [r7, #4]
 800b532:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800b536:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b53a:	d115      	bne.n	800b568 <HAL_RCCEx_PeriphCLKConfig+0x6a4>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b53c:	f7f9 fc3a 	bl	8004db4 <HAL_GetTick>
 800b540:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800b542:	e00b      	b.n	800b55c <HAL_RCCEx_PeriphCLKConfig+0x698>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800b544:	f7f9 fc36 	bl	8004db4 <HAL_GetTick>
 800b548:	4602      	mov	r2, r0
 800b54a:	693b      	ldr	r3, [r7, #16]
 800b54c:	1ad3      	subs	r3, r2, r3
 800b54e:	f241 3288 	movw	r2, #5000	; 0x1388
 800b552:	4293      	cmp	r3, r2
 800b554:	d902      	bls.n	800b55c <HAL_RCCEx_PeriphCLKConfig+0x698>
          {
            ret = HAL_TIMEOUT;
 800b556:	2303      	movs	r3, #3
 800b558:	75fb      	strb	r3, [r7, #23]
            break;
 800b55a:	e005      	b.n	800b568 <HAL_RCCEx_PeriphCLKConfig+0x6a4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800b55c:	4b88      	ldr	r3, [pc, #544]	; (800b780 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 800b55e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b560:	f003 0302 	and.w	r3, r3, #2
 800b564:	2b00      	cmp	r3, #0
 800b566:	d0ed      	beq.n	800b544 <HAL_RCCEx_PeriphCLKConfig+0x680>
          }
        }
      }

      if(ret == HAL_OK)
 800b568:	7dfb      	ldrb	r3, [r7, #23]
 800b56a:	2b00      	cmp	r3, #0
 800b56c:	d126      	bne.n	800b5bc <HAL_RCCEx_PeriphCLKConfig+0x6f8>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800b56e:	687b      	ldr	r3, [r7, #4]
 800b570:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800b574:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800b578:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800b57c:	d10d      	bne.n	800b59a <HAL_RCCEx_PeriphCLKConfig+0x6d6>
 800b57e:	4b80      	ldr	r3, [pc, #512]	; (800b780 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 800b580:	691b      	ldr	r3, [r3, #16]
 800b582:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 800b586:	687b      	ldr	r3, [r7, #4]
 800b588:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800b58c:	0919      	lsrs	r1, r3, #4
 800b58e:	4b7e      	ldr	r3, [pc, #504]	; (800b788 <HAL_RCCEx_PeriphCLKConfig+0x8c4>)
 800b590:	400b      	ands	r3, r1
 800b592:	497b      	ldr	r1, [pc, #492]	; (800b780 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 800b594:	4313      	orrs	r3, r2
 800b596:	610b      	str	r3, [r1, #16]
 800b598:	e005      	b.n	800b5a6 <HAL_RCCEx_PeriphCLKConfig+0x6e2>
 800b59a:	4b79      	ldr	r3, [pc, #484]	; (800b780 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 800b59c:	691b      	ldr	r3, [r3, #16]
 800b59e:	4a78      	ldr	r2, [pc, #480]	; (800b780 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 800b5a0:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800b5a4:	6113      	str	r3, [r2, #16]
 800b5a6:	4b76      	ldr	r3, [pc, #472]	; (800b780 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 800b5a8:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800b5aa:	687b      	ldr	r3, [r7, #4]
 800b5ac:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800b5b0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800b5b4:	4972      	ldr	r1, [pc, #456]	; (800b780 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 800b5b6:	4313      	orrs	r3, r2
 800b5b8:	670b      	str	r3, [r1, #112]	; 0x70
 800b5ba:	e004      	b.n	800b5c6 <HAL_RCCEx_PeriphCLKConfig+0x702>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800b5bc:	7dfb      	ldrb	r3, [r7, #23]
 800b5be:	75bb      	strb	r3, [r7, #22]
 800b5c0:	e001      	b.n	800b5c6 <HAL_RCCEx_PeriphCLKConfig+0x702>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b5c2:	7dfb      	ldrb	r3, [r7, #23]
 800b5c4:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 800b5c6:	687b      	ldr	r3, [r7, #4]
 800b5c8:	681b      	ldr	r3, [r3, #0]
 800b5ca:	f003 0301 	and.w	r3, r3, #1
 800b5ce:	2b00      	cmp	r3, #0
 800b5d0:	d07d      	beq.n	800b6ce <HAL_RCCEx_PeriphCLKConfig+0x80a>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 800b5d2:	687b      	ldr	r3, [r7, #4]
 800b5d4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800b5d6:	2b28      	cmp	r3, #40	; 0x28
 800b5d8:	d866      	bhi.n	800b6a8 <HAL_RCCEx_PeriphCLKConfig+0x7e4>
 800b5da:	a201      	add	r2, pc, #4	; (adr r2, 800b5e0 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 800b5dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b5e0:	0800b6af 	.word	0x0800b6af
 800b5e4:	0800b6a9 	.word	0x0800b6a9
 800b5e8:	0800b6a9 	.word	0x0800b6a9
 800b5ec:	0800b6a9 	.word	0x0800b6a9
 800b5f0:	0800b6a9 	.word	0x0800b6a9
 800b5f4:	0800b6a9 	.word	0x0800b6a9
 800b5f8:	0800b6a9 	.word	0x0800b6a9
 800b5fc:	0800b6a9 	.word	0x0800b6a9
 800b600:	0800b685 	.word	0x0800b685
 800b604:	0800b6a9 	.word	0x0800b6a9
 800b608:	0800b6a9 	.word	0x0800b6a9
 800b60c:	0800b6a9 	.word	0x0800b6a9
 800b610:	0800b6a9 	.word	0x0800b6a9
 800b614:	0800b6a9 	.word	0x0800b6a9
 800b618:	0800b6a9 	.word	0x0800b6a9
 800b61c:	0800b6a9 	.word	0x0800b6a9
 800b620:	0800b697 	.word	0x0800b697
 800b624:	0800b6a9 	.word	0x0800b6a9
 800b628:	0800b6a9 	.word	0x0800b6a9
 800b62c:	0800b6a9 	.word	0x0800b6a9
 800b630:	0800b6a9 	.word	0x0800b6a9
 800b634:	0800b6a9 	.word	0x0800b6a9
 800b638:	0800b6a9 	.word	0x0800b6a9
 800b63c:	0800b6a9 	.word	0x0800b6a9
 800b640:	0800b6af 	.word	0x0800b6af
 800b644:	0800b6a9 	.word	0x0800b6a9
 800b648:	0800b6a9 	.word	0x0800b6a9
 800b64c:	0800b6a9 	.word	0x0800b6a9
 800b650:	0800b6a9 	.word	0x0800b6a9
 800b654:	0800b6a9 	.word	0x0800b6a9
 800b658:	0800b6a9 	.word	0x0800b6a9
 800b65c:	0800b6a9 	.word	0x0800b6a9
 800b660:	0800b6af 	.word	0x0800b6af
 800b664:	0800b6a9 	.word	0x0800b6a9
 800b668:	0800b6a9 	.word	0x0800b6a9
 800b66c:	0800b6a9 	.word	0x0800b6a9
 800b670:	0800b6a9 	.word	0x0800b6a9
 800b674:	0800b6a9 	.word	0x0800b6a9
 800b678:	0800b6a9 	.word	0x0800b6a9
 800b67c:	0800b6a9 	.word	0x0800b6a9
 800b680:	0800b6af 	.word	0x0800b6af
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800b684:	687b      	ldr	r3, [r7, #4]
 800b686:	3304      	adds	r3, #4
 800b688:	2101      	movs	r1, #1
 800b68a:	4618      	mov	r0, r3
 800b68c:	f001 f97a 	bl	800c984 <RCCEx_PLL2_Config>
 800b690:	4603      	mov	r3, r0
 800b692:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 800b694:	e00c      	b.n	800b6b0 <HAL_RCCEx_PeriphCLKConfig+0x7ec>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800b696:	687b      	ldr	r3, [r7, #4]
 800b698:	3324      	adds	r3, #36	; 0x24
 800b69a:	2101      	movs	r1, #1
 800b69c:	4618      	mov	r0, r3
 800b69e:	f001 fa23 	bl	800cae8 <RCCEx_PLL3_Config>
 800b6a2:	4603      	mov	r3, r0
 800b6a4:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 800b6a6:	e003      	b.n	800b6b0 <HAL_RCCEx_PeriphCLKConfig+0x7ec>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800b6a8:	2301      	movs	r3, #1
 800b6aa:	75fb      	strb	r3, [r7, #23]
      break;
 800b6ac:	e000      	b.n	800b6b0 <HAL_RCCEx_PeriphCLKConfig+0x7ec>
      break;
 800b6ae:	bf00      	nop
    }

    if(ret == HAL_OK)
 800b6b0:	7dfb      	ldrb	r3, [r7, #23]
 800b6b2:	2b00      	cmp	r3, #0
 800b6b4:	d109      	bne.n	800b6ca <HAL_RCCEx_PeriphCLKConfig+0x806>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 800b6b6:	4b32      	ldr	r3, [pc, #200]	; (800b780 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 800b6b8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b6ba:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 800b6be:	687b      	ldr	r3, [r7, #4]
 800b6c0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800b6c2:	492f      	ldr	r1, [pc, #188]	; (800b780 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 800b6c4:	4313      	orrs	r3, r2
 800b6c6:	654b      	str	r3, [r1, #84]	; 0x54
 800b6c8:	e001      	b.n	800b6ce <HAL_RCCEx_PeriphCLKConfig+0x80a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b6ca:	7dfb      	ldrb	r3, [r7, #23]
 800b6cc:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 800b6ce:	687b      	ldr	r3, [r7, #4]
 800b6d0:	681b      	ldr	r3, [r3, #0]
 800b6d2:	f003 0302 	and.w	r3, r3, #2
 800b6d6:	2b00      	cmp	r3, #0
 800b6d8:	d037      	beq.n	800b74a <HAL_RCCEx_PeriphCLKConfig+0x886>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 800b6da:	687b      	ldr	r3, [r7, #4]
 800b6dc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b6de:	2b05      	cmp	r3, #5
 800b6e0:	d820      	bhi.n	800b724 <HAL_RCCEx_PeriphCLKConfig+0x860>
 800b6e2:	a201      	add	r2, pc, #4	; (adr r2, 800b6e8 <HAL_RCCEx_PeriphCLKConfig+0x824>)
 800b6e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b6e8:	0800b72b 	.word	0x0800b72b
 800b6ec:	0800b701 	.word	0x0800b701
 800b6f0:	0800b713 	.word	0x0800b713
 800b6f4:	0800b72b 	.word	0x0800b72b
 800b6f8:	0800b72b 	.word	0x0800b72b
 800b6fc:	0800b72b 	.word	0x0800b72b
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800b700:	687b      	ldr	r3, [r7, #4]
 800b702:	3304      	adds	r3, #4
 800b704:	2101      	movs	r1, #1
 800b706:	4618      	mov	r0, r3
 800b708:	f001 f93c 	bl	800c984 <RCCEx_PLL2_Config>
 800b70c:	4603      	mov	r3, r0
 800b70e:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 800b710:	e00c      	b.n	800b72c <HAL_RCCEx_PeriphCLKConfig+0x868>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800b712:	687b      	ldr	r3, [r7, #4]
 800b714:	3324      	adds	r3, #36	; 0x24
 800b716:	2101      	movs	r1, #1
 800b718:	4618      	mov	r0, r3
 800b71a:	f001 f9e5 	bl	800cae8 <RCCEx_PLL3_Config>
 800b71e:	4603      	mov	r3, r0
 800b720:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 800b722:	e003      	b.n	800b72c <HAL_RCCEx_PeriphCLKConfig+0x868>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800b724:	2301      	movs	r3, #1
 800b726:	75fb      	strb	r3, [r7, #23]
      break;
 800b728:	e000      	b.n	800b72c <HAL_RCCEx_PeriphCLKConfig+0x868>
      break;
 800b72a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800b72c:	7dfb      	ldrb	r3, [r7, #23]
 800b72e:	2b00      	cmp	r3, #0
 800b730:	d109      	bne.n	800b746 <HAL_RCCEx_PeriphCLKConfig+0x882>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 800b732:	4b13      	ldr	r3, [pc, #76]	; (800b780 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 800b734:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b736:	f023 0207 	bic.w	r2, r3, #7
 800b73a:	687b      	ldr	r3, [r7, #4]
 800b73c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b73e:	4910      	ldr	r1, [pc, #64]	; (800b780 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 800b740:	4313      	orrs	r3, r2
 800b742:	654b      	str	r3, [r1, #84]	; 0x54
 800b744:	e001      	b.n	800b74a <HAL_RCCEx_PeriphCLKConfig+0x886>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b746:	7dfb      	ldrb	r3, [r7, #23]
 800b748:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800b74a:	687b      	ldr	r3, [r7, #4]
 800b74c:	681b      	ldr	r3, [r3, #0]
 800b74e:	f003 0304 	and.w	r3, r3, #4
 800b752:	2b00      	cmp	r3, #0
 800b754:	d040      	beq.n	800b7d8 <HAL_RCCEx_PeriphCLKConfig+0x914>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 800b756:	687b      	ldr	r3, [r7, #4]
 800b758:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b75c:	2b05      	cmp	r3, #5
 800b75e:	d827      	bhi.n	800b7b0 <HAL_RCCEx_PeriphCLKConfig+0x8ec>
 800b760:	a201      	add	r2, pc, #4	; (adr r2, 800b768 <HAL_RCCEx_PeriphCLKConfig+0x8a4>)
 800b762:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b766:	bf00      	nop
 800b768:	0800b7b7 	.word	0x0800b7b7
 800b76c:	0800b78d 	.word	0x0800b78d
 800b770:	0800b79f 	.word	0x0800b79f
 800b774:	0800b7b7 	.word	0x0800b7b7
 800b778:	0800b7b7 	.word	0x0800b7b7
 800b77c:	0800b7b7 	.word	0x0800b7b7
 800b780:	58024400 	.word	0x58024400
 800b784:	58024800 	.word	0x58024800
 800b788:	00ffffcf 	.word	0x00ffffcf
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800b78c:	687b      	ldr	r3, [r7, #4]
 800b78e:	3304      	adds	r3, #4
 800b790:	2101      	movs	r1, #1
 800b792:	4618      	mov	r0, r3
 800b794:	f001 f8f6 	bl	800c984 <RCCEx_PLL2_Config>
 800b798:	4603      	mov	r3, r0
 800b79a:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 800b79c:	e00c      	b.n	800b7b8 <HAL_RCCEx_PeriphCLKConfig+0x8f4>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800b79e:	687b      	ldr	r3, [r7, #4]
 800b7a0:	3324      	adds	r3, #36	; 0x24
 800b7a2:	2101      	movs	r1, #1
 800b7a4:	4618      	mov	r0, r3
 800b7a6:	f001 f99f 	bl	800cae8 <RCCEx_PLL3_Config>
 800b7aa:	4603      	mov	r3, r0
 800b7ac:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 800b7ae:	e003      	b.n	800b7b8 <HAL_RCCEx_PeriphCLKConfig+0x8f4>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800b7b0:	2301      	movs	r3, #1
 800b7b2:	75fb      	strb	r3, [r7, #23]
      break;
 800b7b4:	e000      	b.n	800b7b8 <HAL_RCCEx_PeriphCLKConfig+0x8f4>
      break;
 800b7b6:	bf00      	nop
    }

    if(ret == HAL_OK)
 800b7b8:	7dfb      	ldrb	r3, [r7, #23]
 800b7ba:	2b00      	cmp	r3, #0
 800b7bc:	d10a      	bne.n	800b7d4 <HAL_RCCEx_PeriphCLKConfig+0x910>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800b7be:	4bb2      	ldr	r3, [pc, #712]	; (800ba88 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 800b7c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b7c2:	f023 0207 	bic.w	r2, r3, #7
 800b7c6:	687b      	ldr	r3, [r7, #4]
 800b7c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b7cc:	49ae      	ldr	r1, [pc, #696]	; (800ba88 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 800b7ce:	4313      	orrs	r3, r2
 800b7d0:	658b      	str	r3, [r1, #88]	; 0x58
 800b7d2:	e001      	b.n	800b7d8 <HAL_RCCEx_PeriphCLKConfig+0x914>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b7d4:	7dfb      	ldrb	r3, [r7, #23]
 800b7d6:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800b7d8:	687b      	ldr	r3, [r7, #4]
 800b7da:	681b      	ldr	r3, [r3, #0]
 800b7dc:	f003 0320 	and.w	r3, r3, #32
 800b7e0:	2b00      	cmp	r3, #0
 800b7e2:	d044      	beq.n	800b86e <HAL_RCCEx_PeriphCLKConfig+0x9aa>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 800b7e4:	687b      	ldr	r3, [r7, #4]
 800b7e6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800b7ea:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b7ee:	d01b      	beq.n	800b828 <HAL_RCCEx_PeriphCLKConfig+0x964>
 800b7f0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b7f4:	d805      	bhi.n	800b802 <HAL_RCCEx_PeriphCLKConfig+0x93e>
 800b7f6:	2b00      	cmp	r3, #0
 800b7f8:	d022      	beq.n	800b840 <HAL_RCCEx_PeriphCLKConfig+0x97c>
 800b7fa:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800b7fe:	d00a      	beq.n	800b816 <HAL_RCCEx_PeriphCLKConfig+0x952>
 800b800:	e01b      	b.n	800b83a <HAL_RCCEx_PeriphCLKConfig+0x976>
 800b802:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b806:	d01d      	beq.n	800b844 <HAL_RCCEx_PeriphCLKConfig+0x980>
 800b808:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800b80c:	d01c      	beq.n	800b848 <HAL_RCCEx_PeriphCLKConfig+0x984>
 800b80e:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800b812:	d01b      	beq.n	800b84c <HAL_RCCEx_PeriphCLKConfig+0x988>
 800b814:	e011      	b.n	800b83a <HAL_RCCEx_PeriphCLKConfig+0x976>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800b816:	687b      	ldr	r3, [r7, #4]
 800b818:	3304      	adds	r3, #4
 800b81a:	2100      	movs	r1, #0
 800b81c:	4618      	mov	r0, r3
 800b81e:	f001 f8b1 	bl	800c984 <RCCEx_PLL2_Config>
 800b822:	4603      	mov	r3, r0
 800b824:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 800b826:	e012      	b.n	800b84e <HAL_RCCEx_PeriphCLKConfig+0x98a>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800b828:	687b      	ldr	r3, [r7, #4]
 800b82a:	3324      	adds	r3, #36	; 0x24
 800b82c:	2102      	movs	r1, #2
 800b82e:	4618      	mov	r0, r3
 800b830:	f001 f95a 	bl	800cae8 <RCCEx_PLL3_Config>
 800b834:	4603      	mov	r3, r0
 800b836:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 800b838:	e009      	b.n	800b84e <HAL_RCCEx_PeriphCLKConfig+0x98a>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800b83a:	2301      	movs	r3, #1
 800b83c:	75fb      	strb	r3, [r7, #23]
      break;
 800b83e:	e006      	b.n	800b84e <HAL_RCCEx_PeriphCLKConfig+0x98a>
      break;
 800b840:	bf00      	nop
 800b842:	e004      	b.n	800b84e <HAL_RCCEx_PeriphCLKConfig+0x98a>
      break;
 800b844:	bf00      	nop
 800b846:	e002      	b.n	800b84e <HAL_RCCEx_PeriphCLKConfig+0x98a>
      break;
 800b848:	bf00      	nop
 800b84a:	e000      	b.n	800b84e <HAL_RCCEx_PeriphCLKConfig+0x98a>
      break;
 800b84c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800b84e:	7dfb      	ldrb	r3, [r7, #23]
 800b850:	2b00      	cmp	r3, #0
 800b852:	d10a      	bne.n	800b86a <HAL_RCCEx_PeriphCLKConfig+0x9a6>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800b854:	4b8c      	ldr	r3, [pc, #560]	; (800ba88 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 800b856:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b858:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 800b85c:	687b      	ldr	r3, [r7, #4]
 800b85e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800b862:	4989      	ldr	r1, [pc, #548]	; (800ba88 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 800b864:	4313      	orrs	r3, r2
 800b866:	654b      	str	r3, [r1, #84]	; 0x54
 800b868:	e001      	b.n	800b86e <HAL_RCCEx_PeriphCLKConfig+0x9aa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b86a:	7dfb      	ldrb	r3, [r7, #23]
 800b86c:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800b86e:	687b      	ldr	r3, [r7, #4]
 800b870:	681b      	ldr	r3, [r3, #0]
 800b872:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b876:	2b00      	cmp	r3, #0
 800b878:	d044      	beq.n	800b904 <HAL_RCCEx_PeriphCLKConfig+0xa40>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 800b87a:	687b      	ldr	r3, [r7, #4]
 800b87c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800b880:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800b884:	d01b      	beq.n	800b8be <HAL_RCCEx_PeriphCLKConfig+0x9fa>
 800b886:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800b88a:	d805      	bhi.n	800b898 <HAL_RCCEx_PeriphCLKConfig+0x9d4>
 800b88c:	2b00      	cmp	r3, #0
 800b88e:	d022      	beq.n	800b8d6 <HAL_RCCEx_PeriphCLKConfig+0xa12>
 800b890:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800b894:	d00a      	beq.n	800b8ac <HAL_RCCEx_PeriphCLKConfig+0x9e8>
 800b896:	e01b      	b.n	800b8d0 <HAL_RCCEx_PeriphCLKConfig+0xa0c>
 800b898:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b89c:	d01d      	beq.n	800b8da <HAL_RCCEx_PeriphCLKConfig+0xa16>
 800b89e:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800b8a2:	d01c      	beq.n	800b8de <HAL_RCCEx_PeriphCLKConfig+0xa1a>
 800b8a4:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800b8a8:	d01b      	beq.n	800b8e2 <HAL_RCCEx_PeriphCLKConfig+0xa1e>
 800b8aa:	e011      	b.n	800b8d0 <HAL_RCCEx_PeriphCLKConfig+0xa0c>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800b8ac:	687b      	ldr	r3, [r7, #4]
 800b8ae:	3304      	adds	r3, #4
 800b8b0:	2100      	movs	r1, #0
 800b8b2:	4618      	mov	r0, r3
 800b8b4:	f001 f866 	bl	800c984 <RCCEx_PLL2_Config>
 800b8b8:	4603      	mov	r3, r0
 800b8ba:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 800b8bc:	e012      	b.n	800b8e4 <HAL_RCCEx_PeriphCLKConfig+0xa20>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800b8be:	687b      	ldr	r3, [r7, #4]
 800b8c0:	3324      	adds	r3, #36	; 0x24
 800b8c2:	2102      	movs	r1, #2
 800b8c4:	4618      	mov	r0, r3
 800b8c6:	f001 f90f 	bl	800cae8 <RCCEx_PLL3_Config>
 800b8ca:	4603      	mov	r3, r0
 800b8cc:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 800b8ce:	e009      	b.n	800b8e4 <HAL_RCCEx_PeriphCLKConfig+0xa20>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800b8d0:	2301      	movs	r3, #1
 800b8d2:	75fb      	strb	r3, [r7, #23]
      break;
 800b8d4:	e006      	b.n	800b8e4 <HAL_RCCEx_PeriphCLKConfig+0xa20>
      break;
 800b8d6:	bf00      	nop
 800b8d8:	e004      	b.n	800b8e4 <HAL_RCCEx_PeriphCLKConfig+0xa20>
      break;
 800b8da:	bf00      	nop
 800b8dc:	e002      	b.n	800b8e4 <HAL_RCCEx_PeriphCLKConfig+0xa20>
      break;
 800b8de:	bf00      	nop
 800b8e0:	e000      	b.n	800b8e4 <HAL_RCCEx_PeriphCLKConfig+0xa20>
      break;
 800b8e2:	bf00      	nop
    }

    if(ret == HAL_OK)
 800b8e4:	7dfb      	ldrb	r3, [r7, #23]
 800b8e6:	2b00      	cmp	r3, #0
 800b8e8:	d10a      	bne.n	800b900 <HAL_RCCEx_PeriphCLKConfig+0xa3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800b8ea:	4b67      	ldr	r3, [pc, #412]	; (800ba88 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 800b8ec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b8ee:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800b8f2:	687b      	ldr	r3, [r7, #4]
 800b8f4:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800b8f8:	4963      	ldr	r1, [pc, #396]	; (800ba88 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 800b8fa:	4313      	orrs	r3, r2
 800b8fc:	658b      	str	r3, [r1, #88]	; 0x58
 800b8fe:	e001      	b.n	800b904 <HAL_RCCEx_PeriphCLKConfig+0xa40>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b900:	7dfb      	ldrb	r3, [r7, #23]
 800b902:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 800b904:	687b      	ldr	r3, [r7, #4]
 800b906:	681b      	ldr	r3, [r3, #0]
 800b908:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b90c:	2b00      	cmp	r3, #0
 800b90e:	d044      	beq.n	800b99a <HAL_RCCEx_PeriphCLKConfig+0xad6>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 800b910:	687b      	ldr	r3, [r7, #4]
 800b912:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800b916:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800b91a:	d01b      	beq.n	800b954 <HAL_RCCEx_PeriphCLKConfig+0xa90>
 800b91c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800b920:	d805      	bhi.n	800b92e <HAL_RCCEx_PeriphCLKConfig+0xa6a>
 800b922:	2b00      	cmp	r3, #0
 800b924:	d022      	beq.n	800b96c <HAL_RCCEx_PeriphCLKConfig+0xaa8>
 800b926:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b92a:	d00a      	beq.n	800b942 <HAL_RCCEx_PeriphCLKConfig+0xa7e>
 800b92c:	e01b      	b.n	800b966 <HAL_RCCEx_PeriphCLKConfig+0xaa2>
 800b92e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800b932:	d01d      	beq.n	800b970 <HAL_RCCEx_PeriphCLKConfig+0xaac>
 800b934:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800b938:	d01c      	beq.n	800b974 <HAL_RCCEx_PeriphCLKConfig+0xab0>
 800b93a:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800b93e:	d01b      	beq.n	800b978 <HAL_RCCEx_PeriphCLKConfig+0xab4>
 800b940:	e011      	b.n	800b966 <HAL_RCCEx_PeriphCLKConfig+0xaa2>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800b942:	687b      	ldr	r3, [r7, #4]
 800b944:	3304      	adds	r3, #4
 800b946:	2100      	movs	r1, #0
 800b948:	4618      	mov	r0, r3
 800b94a:	f001 f81b 	bl	800c984 <RCCEx_PLL2_Config>
 800b94e:	4603      	mov	r3, r0
 800b950:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 800b952:	e012      	b.n	800b97a <HAL_RCCEx_PeriphCLKConfig+0xab6>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800b954:	687b      	ldr	r3, [r7, #4]
 800b956:	3324      	adds	r3, #36	; 0x24
 800b958:	2102      	movs	r1, #2
 800b95a:	4618      	mov	r0, r3
 800b95c:	f001 f8c4 	bl	800cae8 <RCCEx_PLL3_Config>
 800b960:	4603      	mov	r3, r0
 800b962:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 800b964:	e009      	b.n	800b97a <HAL_RCCEx_PeriphCLKConfig+0xab6>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800b966:	2301      	movs	r3, #1
 800b968:	75fb      	strb	r3, [r7, #23]
      break;
 800b96a:	e006      	b.n	800b97a <HAL_RCCEx_PeriphCLKConfig+0xab6>
      break;
 800b96c:	bf00      	nop
 800b96e:	e004      	b.n	800b97a <HAL_RCCEx_PeriphCLKConfig+0xab6>
      break;
 800b970:	bf00      	nop
 800b972:	e002      	b.n	800b97a <HAL_RCCEx_PeriphCLKConfig+0xab6>
      break;
 800b974:	bf00      	nop
 800b976:	e000      	b.n	800b97a <HAL_RCCEx_PeriphCLKConfig+0xab6>
      break;
 800b978:	bf00      	nop
    }

    if(ret == HAL_OK)
 800b97a:	7dfb      	ldrb	r3, [r7, #23]
 800b97c:	2b00      	cmp	r3, #0
 800b97e:	d10a      	bne.n	800b996 <HAL_RCCEx_PeriphCLKConfig+0xad2>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 800b980:	4b41      	ldr	r3, [pc, #260]	; (800ba88 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 800b982:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b984:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800b988:	687b      	ldr	r3, [r7, #4]
 800b98a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800b98e:	493e      	ldr	r1, [pc, #248]	; (800ba88 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 800b990:	4313      	orrs	r3, r2
 800b992:	658b      	str	r3, [r1, #88]	; 0x58
 800b994:	e001      	b.n	800b99a <HAL_RCCEx_PeriphCLKConfig+0xad6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b996:	7dfb      	ldrb	r3, [r7, #23]
 800b998:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 800b99a:	687b      	ldr	r3, [r7, #4]
 800b99c:	681b      	ldr	r3, [r3, #0]
 800b99e:	f003 0308 	and.w	r3, r3, #8
 800b9a2:	2b00      	cmp	r3, #0
 800b9a4:	d01a      	beq.n	800b9dc <HAL_RCCEx_PeriphCLKConfig+0xb18>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 800b9a6:	687b      	ldr	r3, [r7, #4]
 800b9a8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800b9ac:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b9b0:	d10a      	bne.n	800b9c8 <HAL_RCCEx_PeriphCLKConfig+0xb04>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 800b9b2:	687b      	ldr	r3, [r7, #4]
 800b9b4:	3324      	adds	r3, #36	; 0x24
 800b9b6:	2102      	movs	r1, #2
 800b9b8:	4618      	mov	r0, r3
 800b9ba:	f001 f895 	bl	800cae8 <RCCEx_PLL3_Config>
 800b9be:	4603      	mov	r3, r0
 800b9c0:	2b00      	cmp	r3, #0
 800b9c2:	d001      	beq.n	800b9c8 <HAL_RCCEx_PeriphCLKConfig+0xb04>
        {
          status = HAL_ERROR;
 800b9c4:	2301      	movs	r3, #1
 800b9c6:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 800b9c8:	4b2f      	ldr	r3, [pc, #188]	; (800ba88 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 800b9ca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b9cc:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800b9d0:	687b      	ldr	r3, [r7, #4]
 800b9d2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800b9d6:	492c      	ldr	r1, [pc, #176]	; (800ba88 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 800b9d8:	4313      	orrs	r3, r2
 800b9da:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800b9dc:	687b      	ldr	r3, [r7, #4]
 800b9de:	681b      	ldr	r3, [r3, #0]
 800b9e0:	f003 0310 	and.w	r3, r3, #16
 800b9e4:	2b00      	cmp	r3, #0
 800b9e6:	d01a      	beq.n	800ba1e <HAL_RCCEx_PeriphCLKConfig+0xb5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 800b9e8:	687b      	ldr	r3, [r7, #4]
 800b9ea:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800b9ee:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b9f2:	d10a      	bne.n	800ba0a <HAL_RCCEx_PeriphCLKConfig+0xb46>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 800b9f4:	687b      	ldr	r3, [r7, #4]
 800b9f6:	3324      	adds	r3, #36	; 0x24
 800b9f8:	2102      	movs	r1, #2
 800b9fa:	4618      	mov	r0, r3
 800b9fc:	f001 f874 	bl	800cae8 <RCCEx_PLL3_Config>
 800ba00:	4603      	mov	r3, r0
 800ba02:	2b00      	cmp	r3, #0
 800ba04:	d001      	beq.n	800ba0a <HAL_RCCEx_PeriphCLKConfig+0xb46>
      {
        status = HAL_ERROR;
 800ba06:	2301      	movs	r3, #1
 800ba08:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800ba0a:	4b1f      	ldr	r3, [pc, #124]	; (800ba88 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 800ba0c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ba0e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800ba12:	687b      	ldr	r3, [r7, #4]
 800ba14:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800ba18:	491b      	ldr	r1, [pc, #108]	; (800ba88 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 800ba1a:	4313      	orrs	r3, r2
 800ba1c:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800ba1e:	687b      	ldr	r3, [r7, #4]
 800ba20:	681b      	ldr	r3, [r3, #0]
 800ba22:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800ba26:	2b00      	cmp	r3, #0
 800ba28:	d032      	beq.n	800ba90 <HAL_RCCEx_PeriphCLKConfig+0xbcc>
  {
    switch(PeriphClkInit->AdcClockSelection)
 800ba2a:	687b      	ldr	r3, [r7, #4]
 800ba2c:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800ba30:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ba34:	d00d      	beq.n	800ba52 <HAL_RCCEx_PeriphCLKConfig+0xb8e>
 800ba36:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800ba3a:	d016      	beq.n	800ba6a <HAL_RCCEx_PeriphCLKConfig+0xba6>
 800ba3c:	2b00      	cmp	r3, #0
 800ba3e:	d111      	bne.n	800ba64 <HAL_RCCEx_PeriphCLKConfig+0xba0>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800ba40:	687b      	ldr	r3, [r7, #4]
 800ba42:	3304      	adds	r3, #4
 800ba44:	2100      	movs	r1, #0
 800ba46:	4618      	mov	r0, r3
 800ba48:	f000 ff9c 	bl	800c984 <RCCEx_PLL2_Config>
 800ba4c:	4603      	mov	r3, r0
 800ba4e:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 800ba50:	e00c      	b.n	800ba6c <HAL_RCCEx_PeriphCLKConfig+0xba8>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800ba52:	687b      	ldr	r3, [r7, #4]
 800ba54:	3324      	adds	r3, #36	; 0x24
 800ba56:	2102      	movs	r1, #2
 800ba58:	4618      	mov	r0, r3
 800ba5a:	f001 f845 	bl	800cae8 <RCCEx_PLL3_Config>
 800ba5e:	4603      	mov	r3, r0
 800ba60:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 800ba62:	e003      	b.n	800ba6c <HAL_RCCEx_PeriphCLKConfig+0xba8>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800ba64:	2301      	movs	r3, #1
 800ba66:	75fb      	strb	r3, [r7, #23]
      break;
 800ba68:	e000      	b.n	800ba6c <HAL_RCCEx_PeriphCLKConfig+0xba8>
      break;
 800ba6a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800ba6c:	7dfb      	ldrb	r3, [r7, #23]
 800ba6e:	2b00      	cmp	r3, #0
 800ba70:	d10c      	bne.n	800ba8c <HAL_RCCEx_PeriphCLKConfig+0xbc8>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800ba72:	4b05      	ldr	r3, [pc, #20]	; (800ba88 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 800ba74:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ba76:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800ba7a:	687b      	ldr	r3, [r7, #4]
 800ba7c:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800ba80:	4901      	ldr	r1, [pc, #4]	; (800ba88 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 800ba82:	4313      	orrs	r3, r2
 800ba84:	658b      	str	r3, [r1, #88]	; 0x58
 800ba86:	e003      	b.n	800ba90 <HAL_RCCEx_PeriphCLKConfig+0xbcc>
 800ba88:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ba8c:	7dfb      	ldrb	r3, [r7, #23]
 800ba8e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800ba90:	687b      	ldr	r3, [r7, #4]
 800ba92:	681b      	ldr	r3, [r3, #0]
 800ba94:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800ba98:	2b00      	cmp	r3, #0
 800ba9a:	d02f      	beq.n	800bafc <HAL_RCCEx_PeriphCLKConfig+0xc38>
  {

    switch(PeriphClkInit->UsbClockSelection)
 800ba9c:	687b      	ldr	r3, [r7, #4]
 800ba9e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800baa2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800baa6:	d00c      	beq.n	800bac2 <HAL_RCCEx_PeriphCLKConfig+0xbfe>
 800baa8:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800baac:	d015      	beq.n	800bada <HAL_RCCEx_PeriphCLKConfig+0xc16>
 800baae:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800bab2:	d10f      	bne.n	800bad4 <HAL_RCCEx_PeriphCLKConfig+0xc10>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800bab4:	4b79      	ldr	r3, [pc, #484]	; (800bc9c <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 800bab6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bab8:	4a78      	ldr	r2, [pc, #480]	; (800bc9c <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 800baba:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800babe:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 800bac0:	e00c      	b.n	800badc <HAL_RCCEx_PeriphCLKConfig+0xc18>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800bac2:	687b      	ldr	r3, [r7, #4]
 800bac4:	3324      	adds	r3, #36	; 0x24
 800bac6:	2101      	movs	r1, #1
 800bac8:	4618      	mov	r0, r3
 800baca:	f001 f80d 	bl	800cae8 <RCCEx_PLL3_Config>
 800bace:	4603      	mov	r3, r0
 800bad0:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 800bad2:	e003      	b.n	800badc <HAL_RCCEx_PeriphCLKConfig+0xc18>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800bad4:	2301      	movs	r3, #1
 800bad6:	75fb      	strb	r3, [r7, #23]
      break;
 800bad8:	e000      	b.n	800badc <HAL_RCCEx_PeriphCLKConfig+0xc18>
      break;
 800bada:	bf00      	nop
    }

    if(ret == HAL_OK)
 800badc:	7dfb      	ldrb	r3, [r7, #23]
 800bade:	2b00      	cmp	r3, #0
 800bae0:	d10a      	bne.n	800baf8 <HAL_RCCEx_PeriphCLKConfig+0xc34>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800bae2:	4b6e      	ldr	r3, [pc, #440]	; (800bc9c <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 800bae4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bae6:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800baea:	687b      	ldr	r3, [r7, #4]
 800baec:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800baf0:	496a      	ldr	r1, [pc, #424]	; (800bc9c <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 800baf2:	4313      	orrs	r3, r2
 800baf4:	654b      	str	r3, [r1, #84]	; 0x54
 800baf6:	e001      	b.n	800bafc <HAL_RCCEx_PeriphCLKConfig+0xc38>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800baf8:	7dfb      	ldrb	r3, [r7, #23]
 800bafa:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800bafc:	687b      	ldr	r3, [r7, #4]
 800bafe:	681b      	ldr	r3, [r3, #0]
 800bb00:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800bb04:	2b00      	cmp	r3, #0
 800bb06:	d029      	beq.n	800bb5c <HAL_RCCEx_PeriphCLKConfig+0xc98>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 800bb08:	687b      	ldr	r3, [r7, #4]
 800bb0a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800bb0c:	2b00      	cmp	r3, #0
 800bb0e:	d003      	beq.n	800bb18 <HAL_RCCEx_PeriphCLKConfig+0xc54>
 800bb10:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800bb14:	d007      	beq.n	800bb26 <HAL_RCCEx_PeriphCLKConfig+0xc62>
 800bb16:	e00f      	b.n	800bb38 <HAL_RCCEx_PeriphCLKConfig+0xc74>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800bb18:	4b60      	ldr	r3, [pc, #384]	; (800bc9c <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 800bb1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bb1c:	4a5f      	ldr	r2, [pc, #380]	; (800bc9c <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 800bb1e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800bb22:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 800bb24:	e00b      	b.n	800bb3e <HAL_RCCEx_PeriphCLKConfig+0xc7a>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800bb26:	687b      	ldr	r3, [r7, #4]
 800bb28:	3304      	adds	r3, #4
 800bb2a:	2102      	movs	r1, #2
 800bb2c:	4618      	mov	r0, r3
 800bb2e:	f000 ff29 	bl	800c984 <RCCEx_PLL2_Config>
 800bb32:	4603      	mov	r3, r0
 800bb34:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 800bb36:	e002      	b.n	800bb3e <HAL_RCCEx_PeriphCLKConfig+0xc7a>

    default:
      ret = HAL_ERROR;
 800bb38:	2301      	movs	r3, #1
 800bb3a:	75fb      	strb	r3, [r7, #23]
      break;
 800bb3c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800bb3e:	7dfb      	ldrb	r3, [r7, #23]
 800bb40:	2b00      	cmp	r3, #0
 800bb42:	d109      	bne.n	800bb58 <HAL_RCCEx_PeriphCLKConfig+0xc94>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 800bb44:	4b55      	ldr	r3, [pc, #340]	; (800bc9c <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 800bb46:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800bb48:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800bb4c:	687b      	ldr	r3, [r7, #4]
 800bb4e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800bb50:	4952      	ldr	r1, [pc, #328]	; (800bc9c <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 800bb52:	4313      	orrs	r3, r2
 800bb54:	64cb      	str	r3, [r1, #76]	; 0x4c
 800bb56:	e001      	b.n	800bb5c <HAL_RCCEx_PeriphCLKConfig+0xc98>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bb58:	7dfb      	ldrb	r3, [r7, #23]
 800bb5a:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800bb5c:	687b      	ldr	r3, [r7, #4]
 800bb5e:	681b      	ldr	r3, [r3, #0]
 800bb60:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800bb64:	2b00      	cmp	r3, #0
 800bb66:	d00a      	beq.n	800bb7e <HAL_RCCEx_PeriphCLKConfig+0xcba>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 800bb68:	687b      	ldr	r3, [r7, #4]
 800bb6a:	3324      	adds	r3, #36	; 0x24
 800bb6c:	2102      	movs	r1, #2
 800bb6e:	4618      	mov	r0, r3
 800bb70:	f000 ffba 	bl	800cae8 <RCCEx_PLL3_Config>
 800bb74:	4603      	mov	r3, r0
 800bb76:	2b00      	cmp	r3, #0
 800bb78:	d001      	beq.n	800bb7e <HAL_RCCEx_PeriphCLKConfig+0xcba>
    {
      status=HAL_ERROR;
 800bb7a:	2301      	movs	r3, #1
 800bb7c:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800bb7e:	687b      	ldr	r3, [r7, #4]
 800bb80:	681b      	ldr	r3, [r3, #0]
 800bb82:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800bb86:	2b00      	cmp	r3, #0
 800bb88:	d02f      	beq.n	800bbea <HAL_RCCEx_PeriphCLKConfig+0xd26>
  {

    switch(PeriphClkInit->RngClockSelection)
 800bb8a:	687b      	ldr	r3, [r7, #4]
 800bb8c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800bb8e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800bb92:	d00c      	beq.n	800bbae <HAL_RCCEx_PeriphCLKConfig+0xcea>
 800bb94:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800bb98:	d802      	bhi.n	800bba0 <HAL_RCCEx_PeriphCLKConfig+0xcdc>
 800bb9a:	2b00      	cmp	r3, #0
 800bb9c:	d011      	beq.n	800bbc2 <HAL_RCCEx_PeriphCLKConfig+0xcfe>
 800bb9e:	e00d      	b.n	800bbbc <HAL_RCCEx_PeriphCLKConfig+0xcf8>
 800bba0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800bba4:	d00f      	beq.n	800bbc6 <HAL_RCCEx_PeriphCLKConfig+0xd02>
 800bba6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800bbaa:	d00e      	beq.n	800bbca <HAL_RCCEx_PeriphCLKConfig+0xd06>
 800bbac:	e006      	b.n	800bbbc <HAL_RCCEx_PeriphCLKConfig+0xcf8>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800bbae:	4b3b      	ldr	r3, [pc, #236]	; (800bc9c <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 800bbb0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bbb2:	4a3a      	ldr	r2, [pc, #232]	; (800bc9c <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 800bbb4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800bbb8:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 800bbba:	e007      	b.n	800bbcc <HAL_RCCEx_PeriphCLKConfig+0xd08>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800bbbc:	2301      	movs	r3, #1
 800bbbe:	75fb      	strb	r3, [r7, #23]
      break;
 800bbc0:	e004      	b.n	800bbcc <HAL_RCCEx_PeriphCLKConfig+0xd08>
      break;
 800bbc2:	bf00      	nop
 800bbc4:	e002      	b.n	800bbcc <HAL_RCCEx_PeriphCLKConfig+0xd08>
      break;
 800bbc6:	bf00      	nop
 800bbc8:	e000      	b.n	800bbcc <HAL_RCCEx_PeriphCLKConfig+0xd08>
      break;
 800bbca:	bf00      	nop
    }

    if(ret == HAL_OK)
 800bbcc:	7dfb      	ldrb	r3, [r7, #23]
 800bbce:	2b00      	cmp	r3, #0
 800bbd0:	d109      	bne.n	800bbe6 <HAL_RCCEx_PeriphCLKConfig+0xd22>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800bbd2:	4b32      	ldr	r3, [pc, #200]	; (800bc9c <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 800bbd4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bbd6:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800bbda:	687b      	ldr	r3, [r7, #4]
 800bbdc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800bbde:	492f      	ldr	r1, [pc, #188]	; (800bc9c <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 800bbe0:	4313      	orrs	r3, r2
 800bbe2:	654b      	str	r3, [r1, #84]	; 0x54
 800bbe4:	e001      	b.n	800bbea <HAL_RCCEx_PeriphCLKConfig+0xd26>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bbe6:	7dfb      	ldrb	r3, [r7, #23]
 800bbe8:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800bbea:	687b      	ldr	r3, [r7, #4]
 800bbec:	681b      	ldr	r3, [r3, #0]
 800bbee:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800bbf2:	2b00      	cmp	r3, #0
 800bbf4:	d008      	beq.n	800bc08 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800bbf6:	4b29      	ldr	r3, [pc, #164]	; (800bc9c <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 800bbf8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800bbfa:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800bbfe:	687b      	ldr	r3, [r7, #4]
 800bc00:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bc02:	4926      	ldr	r1, [pc, #152]	; (800bc9c <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 800bc04:	4313      	orrs	r3, r2
 800bc06:	650b      	str	r3, [r1, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 800bc08:	687b      	ldr	r3, [r7, #4]
 800bc0a:	681b      	ldr	r3, [r3, #0]
 800bc0c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800bc10:	2b00      	cmp	r3, #0
 800bc12:	d009      	beq.n	800bc28 <HAL_RCCEx_PeriphCLKConfig+0xd64>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 800bc14:	4b21      	ldr	r3, [pc, #132]	; (800bc9c <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 800bc16:	691b      	ldr	r3, [r3, #16]
 800bc18:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800bc1c:	687b      	ldr	r3, [r7, #4]
 800bc1e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800bc22:	491e      	ldr	r1, [pc, #120]	; (800bc9c <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 800bc24:	4313      	orrs	r3, r2
 800bc26:	610b      	str	r3, [r1, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800bc28:	687b      	ldr	r3, [r7, #4]
 800bc2a:	681b      	ldr	r3, [r3, #0]
 800bc2c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800bc30:	2b00      	cmp	r3, #0
 800bc32:	d008      	beq.n	800bc46 <HAL_RCCEx_PeriphCLKConfig+0xd82>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800bc34:	4b19      	ldr	r3, [pc, #100]	; (800bc9c <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 800bc36:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800bc38:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800bc3c:	687b      	ldr	r3, [r7, #4]
 800bc3e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800bc40:	4916      	ldr	r1, [pc, #88]	; (800bc9c <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 800bc42:	4313      	orrs	r3, r2
 800bc44:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800bc46:	687b      	ldr	r3, [r7, #4]
 800bc48:	681b      	ldr	r3, [r3, #0]
 800bc4a:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800bc4e:	2b00      	cmp	r3, #0
 800bc50:	d00d      	beq.n	800bc6e <HAL_RCCEx_PeriphCLKConfig+0xdaa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800bc52:	4b12      	ldr	r3, [pc, #72]	; (800bc9c <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 800bc54:	691b      	ldr	r3, [r3, #16]
 800bc56:	4a11      	ldr	r2, [pc, #68]	; (800bc9c <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 800bc58:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800bc5c:	6113      	str	r3, [r2, #16]
 800bc5e:	4b0f      	ldr	r3, [pc, #60]	; (800bc9c <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 800bc60:	691a      	ldr	r2, [r3, #16]
 800bc62:	687b      	ldr	r3, [r7, #4]
 800bc64:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 800bc68:	490c      	ldr	r1, [pc, #48]	; (800bc9c <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 800bc6a:	4313      	orrs	r3, r2
 800bc6c:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800bc6e:	687b      	ldr	r3, [r7, #4]
 800bc70:	681b      	ldr	r3, [r3, #0]
 800bc72:	2b00      	cmp	r3, #0
 800bc74:	da08      	bge.n	800bc88 <HAL_RCCEx_PeriphCLKConfig+0xdc4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 800bc76:	4b09      	ldr	r3, [pc, #36]	; (800bc9c <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 800bc78:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800bc7a:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800bc7e:	687b      	ldr	r3, [r7, #4]
 800bc80:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800bc82:	4906      	ldr	r1, [pc, #24]	; (800bc9c <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 800bc84:	4313      	orrs	r3, r2
 800bc86:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  if (status == HAL_OK)
 800bc88:	7dbb      	ldrb	r3, [r7, #22]
 800bc8a:	2b00      	cmp	r3, #0
 800bc8c:	d101      	bne.n	800bc92 <HAL_RCCEx_PeriphCLKConfig+0xdce>
  {
    return HAL_OK;
 800bc8e:	2300      	movs	r3, #0
 800bc90:	e000      	b.n	800bc94 <HAL_RCCEx_PeriphCLKConfig+0xdd0>
  }
  return HAL_ERROR;
 800bc92:	2301      	movs	r3, #1
}
 800bc94:	4618      	mov	r0, r3
 800bc96:	3718      	adds	r7, #24
 800bc98:	46bd      	mov	sp, r7
 800bc9a:	bd80      	pop	{r7, pc}
 800bc9c:	58024400 	.word	0x58024400

0800bca0 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 800bca0:	b580      	push	{r7, lr}
 800bca2:	b090      	sub	sp, #64	; 0x40
 800bca4:	af00      	add	r7, sp, #0
 800bca6:	6078      	str	r0, [r7, #4]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 800bca8:	687b      	ldr	r3, [r7, #4]
 800bcaa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800bcae:	d150      	bne.n	800bd52 <HAL_RCCEx_GetPeriphCLKFreq+0xb2>
    {

      saiclocksource= __HAL_RCC_GET_SAI1_SOURCE();
 800bcb0:	4ba1      	ldr	r3, [pc, #644]	; (800bf38 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800bcb2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800bcb4:	f003 0307 	and.w	r3, r3, #7
 800bcb8:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 800bcba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bcbc:	2b04      	cmp	r3, #4
 800bcbe:	d844      	bhi.n	800bd4a <HAL_RCCEx_GetPeriphCLKFreq+0xaa>
 800bcc0:	a201      	add	r2, pc, #4	; (adr r2, 800bcc8 <HAL_RCCEx_GetPeriphCLKFreq+0x28>)
 800bcc2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bcc6:	bf00      	nop
 800bcc8:	0800bcdd 	.word	0x0800bcdd
 800bccc:	0800bced 	.word	0x0800bced
 800bcd0:	0800bcfd 	.word	0x0800bcfd
 800bcd4:	0800bd45 	.word	0x0800bd45
 800bcd8:	0800bd0d 	.word	0x0800bd0d
      {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800bcdc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800bce0:	4618      	mov	r0, r3
 800bce2:	f000 fd03 	bl	800c6ec <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800bce6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bce8:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800bcea:	e241      	b.n	800c170 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800bcec:	f107 0318 	add.w	r3, r7, #24
 800bcf0:	4618      	mov	r0, r3
 800bcf2:	f000 fa63 	bl	800c1bc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800bcf6:	69bb      	ldr	r3, [r7, #24]
 800bcf8:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800bcfa:	e239      	b.n	800c170 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800bcfc:	f107 030c 	add.w	r3, r7, #12
 800bd00:	4618      	mov	r0, r3
 800bd02:	f000 fba7 	bl	800c454 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800bd06:	68fb      	ldr	r3, [r7, #12]
 800bd08:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800bd0a:	e231      	b.n	800c170 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 800bd0c:	4b8a      	ldr	r3, [pc, #552]	; (800bf38 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800bd0e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800bd10:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800bd14:	637b      	str	r3, [r7, #52]	; 0x34

          if(ckpclocksource== RCC_CLKPSOURCE_HSI)
 800bd16:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bd18:	2b00      	cmp	r3, #0
 800bd1a:	d102      	bne.n	800bd22 <HAL_RCCEx_GetPeriphCLKFreq+0x82>
          {
            /* In Case the CKPER Source is HSI */
            frequency = HSI_VALUE;
 800bd1c:	4b87      	ldr	r3, [pc, #540]	; (800bf3c <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 800bd1e:	63fb      	str	r3, [r7, #60]	; 0x3c
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
          }

          break;
 800bd20:	e226      	b.n	800c170 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if(ckpclocksource== RCC_CLKPSOURCE_CSI)
 800bd22:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bd24:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800bd28:	d102      	bne.n	800bd30 <HAL_RCCEx_GetPeriphCLKFreq+0x90>
            frequency = CSI_VALUE;
 800bd2a:	4b85      	ldr	r3, [pc, #532]	; (800bf40 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 800bd2c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800bd2e:	e21f      	b.n	800c170 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if (ckpclocksource== RCC_CLKPSOURCE_HSE)
 800bd30:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bd32:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800bd36:	d102      	bne.n	800bd3e <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
            frequency = HSE_VALUE;
 800bd38:	4b82      	ldr	r3, [pc, #520]	; (800bf44 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 800bd3a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800bd3c:	e218      	b.n	800c170 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
            frequency = 0;
 800bd3e:	2300      	movs	r3, #0
 800bd40:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800bd42:	e215      	b.n	800c170 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 800bd44:	4b80      	ldr	r3, [pc, #512]	; (800bf48 <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>)
 800bd46:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800bd48:	e212      	b.n	800c170 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      default :
        {
          frequency = 0;
 800bd4a:	2300      	movs	r3, #0
 800bd4c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800bd4e:	bf00      	nop
 800bd50:	e20e      	b.n	800c170 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      }
    }

#if defined(SAI3)
  else if (PeriphClk == RCC_PERIPHCLK_SAI23)
 800bd52:	687b      	ldr	r3, [r7, #4]
 800bd54:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800bd58:	d14f      	bne.n	800bdfa <HAL_RCCEx_GetPeriphCLKFreq+0x15a>
    {

      saiclocksource= __HAL_RCC_GET_SAI23_SOURCE();
 800bd5a:	4b77      	ldr	r3, [pc, #476]	; (800bf38 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800bd5c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800bd5e:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
 800bd62:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 800bd64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bd66:	2b80      	cmp	r3, #128	; 0x80
 800bd68:	d01c      	beq.n	800bda4 <HAL_RCCEx_GetPeriphCLKFreq+0x104>
 800bd6a:	2b80      	cmp	r3, #128	; 0x80
 800bd6c:	d804      	bhi.n	800bd78 <HAL_RCCEx_GetPeriphCLKFreq+0xd8>
 800bd6e:	2b00      	cmp	r3, #0
 800bd70:	d008      	beq.n	800bd84 <HAL_RCCEx_GetPeriphCLKFreq+0xe4>
 800bd72:	2b40      	cmp	r3, #64	; 0x40
 800bd74:	d00e      	beq.n	800bd94 <HAL_RCCEx_GetPeriphCLKFreq+0xf4>
 800bd76:	e03c      	b.n	800bdf2 <HAL_RCCEx_GetPeriphCLKFreq+0x152>
 800bd78:	2bc0      	cmp	r3, #192	; 0xc0
 800bd7a:	d037      	beq.n	800bdec <HAL_RCCEx_GetPeriphCLKFreq+0x14c>
 800bd7c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800bd80:	d018      	beq.n	800bdb4 <HAL_RCCEx_GetPeriphCLKFreq+0x114>
 800bd82:	e036      	b.n	800bdf2 <HAL_RCCEx_GetPeriphCLKFreq+0x152>
      {
      case 0: /* PLL1 is the clock source for SAI2/3 */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800bd84:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800bd88:	4618      	mov	r0, r3
 800bd8a:	f000 fcaf 	bl	800c6ec <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800bd8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bd90:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800bd92:	e1ed      	b.n	800c170 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI2/3 */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800bd94:	f107 0318 	add.w	r3, r7, #24
 800bd98:	4618      	mov	r0, r3
 800bd9a:	f000 fa0f 	bl	800c1bc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800bd9e:	69bb      	ldr	r3, [r7, #24]
 800bda0:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800bda2:	e1e5      	b.n	800c170 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_SAI23CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI2/3 */
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800bda4:	f107 030c 	add.w	r3, r7, #12
 800bda8:	4618      	mov	r0, r3
 800bdaa:	f000 fb53 	bl	800c454 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800bdae:	68fb      	ldr	r3, [r7, #12]
 800bdb0:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800bdb2:	e1dd      	b.n	800c170 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_SAI23CLKSOURCE_CLKP: /* CKPER is the clock source for SAI2/3 */
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 800bdb4:	4b60      	ldr	r3, [pc, #384]	; (800bf38 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800bdb6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800bdb8:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800bdbc:	637b      	str	r3, [r7, #52]	; 0x34

          if(ckpclocksource== RCC_CLKPSOURCE_HSI)
 800bdbe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bdc0:	2b00      	cmp	r3, #0
 800bdc2:	d102      	bne.n	800bdca <HAL_RCCEx_GetPeriphCLKFreq+0x12a>
          {
            /* In Case the CKPER Source is HSI */
            frequency = HSI_VALUE;
 800bdc4:	4b5d      	ldr	r3, [pc, #372]	; (800bf3c <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 800bdc6:	63fb      	str	r3, [r7, #60]	; 0x3c
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
          }

          break;
 800bdc8:	e1d2      	b.n	800c170 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if(ckpclocksource== RCC_CLKPSOURCE_CSI)
 800bdca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bdcc:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800bdd0:	d102      	bne.n	800bdd8 <HAL_RCCEx_GetPeriphCLKFreq+0x138>
            frequency = CSI_VALUE;
 800bdd2:	4b5b      	ldr	r3, [pc, #364]	; (800bf40 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 800bdd4:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800bdd6:	e1cb      	b.n	800c170 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if (ckpclocksource== RCC_CLKPSOURCE_HSE)
 800bdd8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bdda:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800bdde:	d102      	bne.n	800bde6 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
            frequency = HSE_VALUE;
 800bde0:	4b58      	ldr	r3, [pc, #352]	; (800bf44 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 800bde2:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800bde4:	e1c4      	b.n	800c170 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
            frequency = 0;
 800bde6:	2300      	movs	r3, #0
 800bde8:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800bdea:	e1c1      	b.n	800c170 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case (RCC_SAI23CLKSOURCE_PIN): /* External clock is the clock source for SAI2/3 */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 800bdec:	4b56      	ldr	r3, [pc, #344]	; (800bf48 <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>)
 800bdee:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800bdf0:	e1be      	b.n	800c170 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      default :
        {
          frequency = 0;
 800bdf2:	2300      	movs	r3, #0
 800bdf4:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800bdf6:	bf00      	nop
 800bdf8:	e1ba      	b.n	800c170 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
      }
    }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 800bdfa:	687b      	ldr	r3, [r7, #4]
 800bdfc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800be00:	d153      	bne.n	800beaa <HAL_RCCEx_GetPeriphCLKFreq+0x20a>
    {

      saiclocksource= __HAL_RCC_GET_SAI4A_SOURCE();
 800be02:	4b4d      	ldr	r3, [pc, #308]	; (800bf38 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800be04:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800be06:	f403 0360 	and.w	r3, r3, #14680064	; 0xe00000
 800be0a:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 800be0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800be0e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800be12:	d01f      	beq.n	800be54 <HAL_RCCEx_GetPeriphCLKFreq+0x1b4>
 800be14:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800be18:	d805      	bhi.n	800be26 <HAL_RCCEx_GetPeriphCLKFreq+0x186>
 800be1a:	2b00      	cmp	r3, #0
 800be1c:	d00a      	beq.n	800be34 <HAL_RCCEx_GetPeriphCLKFreq+0x194>
 800be1e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800be22:	d00f      	beq.n	800be44 <HAL_RCCEx_GetPeriphCLKFreq+0x1a4>
 800be24:	e03d      	b.n	800bea2 <HAL_RCCEx_GetPeriphCLKFreq+0x202>
 800be26:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800be2a:	d037      	beq.n	800be9c <HAL_RCCEx_GetPeriphCLKFreq+0x1fc>
 800be2c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800be30:	d018      	beq.n	800be64 <HAL_RCCEx_GetPeriphCLKFreq+0x1c4>
 800be32:	e036      	b.n	800bea2 <HAL_RCCEx_GetPeriphCLKFreq+0x202>
      {
      case 0: /* PLL1 is the clock source for SAI4A */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800be34:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800be38:	4618      	mov	r0, r3
 800be3a:	f000 fc57 	bl	800c6ec <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800be3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800be40:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800be42:	e195      	b.n	800c170 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_D3CCIPR_SAI4ASEL_0: /* PLLI2 is the clock source for SAI4A */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800be44:	f107 0318 	add.w	r3, r7, #24
 800be48:	4618      	mov	r0, r3
 800be4a:	f000 f9b7 	bl	800c1bc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800be4e:	69bb      	ldr	r3, [r7, #24]
 800be50:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800be52:	e18d      	b.n	800c170 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_D3CCIPR_SAI4ASEL_1: /* PLLI3 is the clock source for SAI4A */
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800be54:	f107 030c 	add.w	r3, r7, #12
 800be58:	4618      	mov	r0, r3
 800be5a:	f000 fafb 	bl	800c454 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800be5e:	68fb      	ldr	r3, [r7, #12]
 800be60:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800be62:	e185      	b.n	800c170 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_D3CCIPR_SAI4ASEL_2: /* CKPER is the clock source for SAI4A*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 800be64:	4b34      	ldr	r3, [pc, #208]	; (800bf38 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800be66:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800be68:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800be6c:	637b      	str	r3, [r7, #52]	; 0x34

          if(ckpclocksource== RCC_CLKPSOURCE_HSI)
 800be6e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800be70:	2b00      	cmp	r3, #0
 800be72:	d102      	bne.n	800be7a <HAL_RCCEx_GetPeriphCLKFreq+0x1da>
          {
            /* In Case the CKPER Source is HSI */
            frequency = HSI_VALUE;
 800be74:	4b31      	ldr	r3, [pc, #196]	; (800bf3c <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 800be76:	63fb      	str	r3, [r7, #60]	; 0x3c
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
          }

          break;
 800be78:	e17a      	b.n	800c170 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if(ckpclocksource== RCC_CLKPSOURCE_CSI)
 800be7a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800be7c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800be80:	d102      	bne.n	800be88 <HAL_RCCEx_GetPeriphCLKFreq+0x1e8>
            frequency = CSI_VALUE;
 800be82:	4b2f      	ldr	r3, [pc, #188]	; (800bf40 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 800be84:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800be86:	e173      	b.n	800c170 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if (ckpclocksource== RCC_CLKPSOURCE_HSE)
 800be88:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800be8a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800be8e:	d102      	bne.n	800be96 <HAL_RCCEx_GetPeriphCLKFreq+0x1f6>
            frequency = HSE_VALUE;
 800be90:	4b2c      	ldr	r3, [pc, #176]	; (800bf44 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 800be92:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800be94:	e16c      	b.n	800c170 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
            frequency = 0;
 800be96:	2300      	movs	r3, #0
 800be98:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800be9a:	e169      	b.n	800c170 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case (RCC_D3CCIPR_SAI4ASEL_0 | RCC_D3CCIPR_SAI4ASEL_1 ): /* External clock is the clock source for SAI4A */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 800be9c:	4b2a      	ldr	r3, [pc, #168]	; (800bf48 <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>)
 800be9e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800bea0:	e166      	b.n	800c170 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      default :
        {
          frequency = 0;
 800bea2:	2300      	movs	r3, #0
 800bea4:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800bea6:	bf00      	nop
 800bea8:	e162      	b.n	800c170 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      }
    }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 800beaa:	687b      	ldr	r3, [r7, #4]
 800beac:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800beb0:	d15d      	bne.n	800bf6e <HAL_RCCEx_GetPeriphCLKFreq+0x2ce>
    {

      saiclocksource= __HAL_RCC_GET_SAI4B_SOURCE();
 800beb2:	4b21      	ldr	r3, [pc, #132]	; (800bf38 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800beb4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800beb6:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 800beba:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 800bebc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bebe:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800bec2:	d01f      	beq.n	800bf04 <HAL_RCCEx_GetPeriphCLKFreq+0x264>
 800bec4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800bec8:	d805      	bhi.n	800bed6 <HAL_RCCEx_GetPeriphCLKFreq+0x236>
 800beca:	2b00      	cmp	r3, #0
 800becc:	d00a      	beq.n	800bee4 <HAL_RCCEx_GetPeriphCLKFreq+0x244>
 800bece:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800bed2:	d00f      	beq.n	800bef4 <HAL_RCCEx_GetPeriphCLKFreq+0x254>
 800bed4:	e047      	b.n	800bf66 <HAL_RCCEx_GetPeriphCLKFreq+0x2c6>
 800bed6:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800beda:	d041      	beq.n	800bf60 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>
 800bedc:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800bee0:	d018      	beq.n	800bf14 <HAL_RCCEx_GetPeriphCLKFreq+0x274>
 800bee2:	e040      	b.n	800bf66 <HAL_RCCEx_GetPeriphCLKFreq+0x2c6>
      {
      case 0: /* PLL1 is the clock source for SAI4B */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800bee4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800bee8:	4618      	mov	r0, r3
 800beea:	f000 fbff 	bl	800c6ec <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800beee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bef0:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800bef2:	e13d      	b.n	800c170 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_D3CCIPR_SAI4BSEL_0: /* PLLI2 is the clock source for SAI4B */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800bef4:	f107 0318 	add.w	r3, r7, #24
 800bef8:	4618      	mov	r0, r3
 800befa:	f000 f95f 	bl	800c1bc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800befe:	69bb      	ldr	r3, [r7, #24]
 800bf00:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800bf02:	e135      	b.n	800c170 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_D3CCIPR_SAI4BSEL_1: /* PLLI3 is the clock source for SAI4B */
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800bf04:	f107 030c 	add.w	r3, r7, #12
 800bf08:	4618      	mov	r0, r3
 800bf0a:	f000 faa3 	bl	800c454 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800bf0e:	68fb      	ldr	r3, [r7, #12]
 800bf10:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800bf12:	e12d      	b.n	800c170 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_D3CCIPR_SAI4BSEL_2: /* CKPER is the clock source for SAI4B*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 800bf14:	4b08      	ldr	r3, [pc, #32]	; (800bf38 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800bf16:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800bf18:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800bf1c:	637b      	str	r3, [r7, #52]	; 0x34

          if(ckpclocksource== RCC_CLKPSOURCE_HSI)
 800bf1e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bf20:	2b00      	cmp	r3, #0
 800bf22:	d102      	bne.n	800bf2a <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
          {
            /* In Case the CKPER Source is HSI */
            frequency = HSI_VALUE;
 800bf24:	4b05      	ldr	r3, [pc, #20]	; (800bf3c <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 800bf26:	63fb      	str	r3, [r7, #60]	; 0x3c
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
          }

          break;
 800bf28:	e122      	b.n	800c170 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if(ckpclocksource== RCC_CLKPSOURCE_CSI)
 800bf2a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bf2c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800bf30:	d10c      	bne.n	800bf4c <HAL_RCCEx_GetPeriphCLKFreq+0x2ac>
            frequency = CSI_VALUE;
 800bf32:	4b03      	ldr	r3, [pc, #12]	; (800bf40 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 800bf34:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800bf36:	e11b      	b.n	800c170 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
 800bf38:	58024400 	.word	0x58024400
 800bf3c:	03d09000 	.word	0x03d09000
 800bf40:	003d0900 	.word	0x003d0900
 800bf44:	017d7840 	.word	0x017d7840
 800bf48:	00bb8000 	.word	0x00bb8000
          else if (ckpclocksource== RCC_CLKPSOURCE_HSE)
 800bf4c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bf4e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800bf52:	d102      	bne.n	800bf5a <HAL_RCCEx_GetPeriphCLKFreq+0x2ba>
            frequency = HSE_VALUE;
 800bf54:	4b89      	ldr	r3, [pc, #548]	; (800c17c <HAL_RCCEx_GetPeriphCLKFreq+0x4dc>)
 800bf56:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800bf58:	e10a      	b.n	800c170 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
            frequency = 0;
 800bf5a:	2300      	movs	r3, #0
 800bf5c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800bf5e:	e107      	b.n	800c170 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case (RCC_D3CCIPR_SAI4BSEL_0 | RCC_D3CCIPR_SAI4BSEL_1 ): /* External clock is the clock source for SAI4B */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 800bf60:	4b87      	ldr	r3, [pc, #540]	; (800c180 <HAL_RCCEx_GetPeriphCLKFreq+0x4e0>)
 800bf62:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800bf64:	e104      	b.n	800c170 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      default :
        {
          frequency = 0;
 800bf66:	2300      	movs	r3, #0
 800bf68:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800bf6a:	bf00      	nop
 800bf6c:	e100      	b.n	800c170 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      }
    }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 800bf6e:	687b      	ldr	r3, [r7, #4]
 800bf70:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800bf74:	d153      	bne.n	800c01e <HAL_RCCEx_GetPeriphCLKFreq+0x37e>
    {
      /* Get SPI1/2/3 clock source */
      srcclk= __HAL_RCC_GET_SPI123_SOURCE();
 800bf76:	4b83      	ldr	r3, [pc, #524]	; (800c184 <HAL_RCCEx_GetPeriphCLKFreq+0x4e4>)
 800bf78:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800bf7a:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 800bf7e:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 800bf80:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bf82:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800bf86:	d01f      	beq.n	800bfc8 <HAL_RCCEx_GetPeriphCLKFreq+0x328>
 800bf88:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800bf8c:	d805      	bhi.n	800bf9a <HAL_RCCEx_GetPeriphCLKFreq+0x2fa>
 800bf8e:	2b00      	cmp	r3, #0
 800bf90:	d00a      	beq.n	800bfa8 <HAL_RCCEx_GetPeriphCLKFreq+0x308>
 800bf92:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800bf96:	d00f      	beq.n	800bfb8 <HAL_RCCEx_GetPeriphCLKFreq+0x318>
 800bf98:	e03d      	b.n	800c016 <HAL_RCCEx_GetPeriphCLKFreq+0x376>
 800bf9a:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800bf9e:	d037      	beq.n	800c010 <HAL_RCCEx_GetPeriphCLKFreq+0x370>
 800bfa0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800bfa4:	d018      	beq.n	800bfd8 <HAL_RCCEx_GetPeriphCLKFreq+0x338>
 800bfa6:	e036      	b.n	800c016 <HAL_RCCEx_GetPeriphCLKFreq+0x376>
      {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for I2S */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800bfa8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800bfac:	4618      	mov	r0, r3
 800bfae:	f000 fb9d 	bl	800c6ec <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800bfb2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bfb4:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800bfb6:	e0db      	b.n	800c170 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for I2S */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800bfb8:	f107 0318 	add.w	r3, r7, #24
 800bfbc:	4618      	mov	r0, r3
 800bfbe:	f000 f8fd 	bl	800c1bc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800bfc2:	69bb      	ldr	r3, [r7, #24]
 800bfc4:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800bfc6:	e0d3      	b.n	800c170 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for I2S */
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800bfc8:	f107 030c 	add.w	r3, r7, #12
 800bfcc:	4618      	mov	r0, r3
 800bfce:	f000 fa41 	bl	800c454 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800bfd2:	68fb      	ldr	r3, [r7, #12]
 800bfd4:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800bfd6:	e0cb      	b.n	800c170 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for I2S */
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 800bfd8:	4b6a      	ldr	r3, [pc, #424]	; (800c184 <HAL_RCCEx_GetPeriphCLKFreq+0x4e4>)
 800bfda:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800bfdc:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800bfe0:	637b      	str	r3, [r7, #52]	; 0x34

          if(ckpclocksource== RCC_CLKPSOURCE_HSI)
 800bfe2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bfe4:	2b00      	cmp	r3, #0
 800bfe6:	d102      	bne.n	800bfee <HAL_RCCEx_GetPeriphCLKFreq+0x34e>
          {
            /* In Case the CKPER Source is HSI */
            frequency = HSI_VALUE;
 800bfe8:	4b67      	ldr	r3, [pc, #412]	; (800c188 <HAL_RCCEx_GetPeriphCLKFreq+0x4e8>)
 800bfea:	63fb      	str	r3, [r7, #60]	; 0x3c
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
          }

          break;
 800bfec:	e0c0      	b.n	800c170 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if(ckpclocksource== RCC_CLKPSOURCE_CSI)
 800bfee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bff0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800bff4:	d102      	bne.n	800bffc <HAL_RCCEx_GetPeriphCLKFreq+0x35c>
            frequency = CSI_VALUE;
 800bff6:	4b65      	ldr	r3, [pc, #404]	; (800c18c <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>)
 800bff8:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800bffa:	e0b9      	b.n	800c170 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if (ckpclocksource== RCC_CLKPSOURCE_HSE)
 800bffc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bffe:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c002:	d102      	bne.n	800c00a <HAL_RCCEx_GetPeriphCLKFreq+0x36a>
            frequency = HSE_VALUE;
 800c004:	4b5d      	ldr	r3, [pc, #372]	; (800c17c <HAL_RCCEx_GetPeriphCLKFreq+0x4dc>)
 800c006:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800c008:	e0b2      	b.n	800c170 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
            frequency = 0;
 800c00a:	2300      	movs	r3, #0
 800c00c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800c00e:	e0af      	b.n	800c170 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 800c010:	4b5b      	ldr	r3, [pc, #364]	; (800c180 <HAL_RCCEx_GetPeriphCLKFreq+0x4e0>)
 800c012:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800c014:	e0ac      	b.n	800c170 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      default :
        {
          frequency = 0;
 800c016:	2300      	movs	r3, #0
 800c018:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800c01a:	bf00      	nop
 800c01c:	e0a8      	b.n	800c170 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 800c01e:	687b      	ldr	r3, [r7, #4]
 800c020:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800c024:	d13d      	bne.n	800c0a2 <HAL_RCCEx_GetPeriphCLKFreq+0x402>
    {
      /* Get ADC clock source */
      srcclk= __HAL_RCC_GET_ADC_SOURCE();
 800c026:	4b57      	ldr	r3, [pc, #348]	; (800c184 <HAL_RCCEx_GetPeriphCLKFreq+0x4e4>)
 800c028:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c02a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800c02e:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 800c030:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c032:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c036:	d00c      	beq.n	800c052 <HAL_RCCEx_GetPeriphCLKFreq+0x3b2>
 800c038:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800c03c:	d011      	beq.n	800c062 <HAL_RCCEx_GetPeriphCLKFreq+0x3c2>
 800c03e:	2b00      	cmp	r3, #0
 800c040:	d12b      	bne.n	800c09a <HAL_RCCEx_GetPeriphCLKFreq+0x3fa>
      {
      case RCC_ADCCLKSOURCE_PLL2:
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c042:	f107 0318 	add.w	r3, r7, #24
 800c046:	4618      	mov	r0, r3
 800c048:	f000 f8b8 	bl	800c1bc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800c04c:	69bb      	ldr	r3, [r7, #24]
 800c04e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800c050:	e08e      	b.n	800c170 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_ADCCLKSOURCE_PLL3:
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800c052:	f107 030c 	add.w	r3, r7, #12
 800c056:	4618      	mov	r0, r3
 800c058:	f000 f9fc 	bl	800c454 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 800c05c:	697b      	ldr	r3, [r7, #20]
 800c05e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800c060:	e086      	b.n	800c170 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_ADCCLKSOURCE_CLKP:
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 800c062:	4b48      	ldr	r3, [pc, #288]	; (800c184 <HAL_RCCEx_GetPeriphCLKFreq+0x4e4>)
 800c064:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c066:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800c06a:	637b      	str	r3, [r7, #52]	; 0x34

          if(ckpclocksource== RCC_CLKPSOURCE_HSI)
 800c06c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c06e:	2b00      	cmp	r3, #0
 800c070:	d102      	bne.n	800c078 <HAL_RCCEx_GetPeriphCLKFreq+0x3d8>
          {
            /* In Case the CKPER Source is HSI */
            frequency = HSI_VALUE;
 800c072:	4b45      	ldr	r3, [pc, #276]	; (800c188 <HAL_RCCEx_GetPeriphCLKFreq+0x4e8>)
 800c074:	63fb      	str	r3, [r7, #60]	; 0x3c
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
          }

          break;
 800c076:	e07b      	b.n	800c170 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if(ckpclocksource== RCC_CLKPSOURCE_CSI)
 800c078:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c07a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800c07e:	d102      	bne.n	800c086 <HAL_RCCEx_GetPeriphCLKFreq+0x3e6>
            frequency = CSI_VALUE;
 800c080:	4b42      	ldr	r3, [pc, #264]	; (800c18c <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>)
 800c082:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800c084:	e074      	b.n	800c170 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if (ckpclocksource== RCC_CLKPSOURCE_HSE)
 800c086:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c088:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c08c:	d102      	bne.n	800c094 <HAL_RCCEx_GetPeriphCLKFreq+0x3f4>
            frequency = HSE_VALUE;
 800c08e:	4b3b      	ldr	r3, [pc, #236]	; (800c17c <HAL_RCCEx_GetPeriphCLKFreq+0x4dc>)
 800c090:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800c092:	e06d      	b.n	800c170 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
            frequency = 0;
 800c094:	2300      	movs	r3, #0
 800c096:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800c098:	e06a      	b.n	800c170 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      default :
        {
          frequency = 0;
 800c09a:	2300      	movs	r3, #0
 800c09c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800c09e:	bf00      	nop
 800c0a0:	e066      	b.n	800c170 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 800c0a2:	687b      	ldr	r3, [r7, #4]
 800c0a4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c0a8:	d11f      	bne.n	800c0ea <HAL_RCCEx_GetPeriphCLKFreq+0x44a>
    {
      /* Get SDMMC clock source */
      srcclk= __HAL_RCC_GET_SDMMC_SOURCE();
 800c0aa:	4b36      	ldr	r3, [pc, #216]	; (800c184 <HAL_RCCEx_GetPeriphCLKFreq+0x4e4>)
 800c0ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c0ae:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800c0b2:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 800c0b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c0b6:	2b00      	cmp	r3, #0
 800c0b8:	d003      	beq.n	800c0c2 <HAL_RCCEx_GetPeriphCLKFreq+0x422>
 800c0ba:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c0be:	d008      	beq.n	800c0d2 <HAL_RCCEx_GetPeriphCLKFreq+0x432>
 800c0c0:	e00f      	b.n	800c0e2 <HAL_RCCEx_GetPeriphCLKFreq+0x442>
      {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800c0c2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800c0c6:	4618      	mov	r0, r3
 800c0c8:	f000 fb10 	bl	800c6ec <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800c0cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c0ce:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800c0d0:	e04e      	b.n	800c170 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c0d2:	f107 0318 	add.w	r3, r7, #24
 800c0d6:	4618      	mov	r0, r3
 800c0d8:	f000 f870 	bl	800c1bc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 800c0dc:	6a3b      	ldr	r3, [r7, #32]
 800c0de:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800c0e0:	e046      	b.n	800c170 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      default :
        {
          frequency = 0;
 800c0e2:	2300      	movs	r3, #0
 800c0e4:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800c0e6:	bf00      	nop
 800c0e8:	e042      	b.n	800c170 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 800c0ea:	687b      	ldr	r3, [r7, #4]
 800c0ec:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800c0f0:	d13c      	bne.n	800c16c <HAL_RCCEx_GetPeriphCLKFreq+0x4cc>
    {
      /* Get SPI6 clock source */
      srcclk= __HAL_RCC_GET_SPI6_SOURCE();
 800c0f2:	4b24      	ldr	r3, [pc, #144]	; (800c184 <HAL_RCCEx_GetPeriphCLKFreq+0x4e4>)
 800c0f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c0f6:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
 800c0fa:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 800c0fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c0fe:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c102:	d01e      	beq.n	800c142 <HAL_RCCEx_GetPeriphCLKFreq+0x4a2>
 800c104:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c108:	d805      	bhi.n	800c116 <HAL_RCCEx_GetPeriphCLKFreq+0x476>
 800c10a:	2b00      	cmp	r3, #0
 800c10c:	d00d      	beq.n	800c12a <HAL_RCCEx_GetPeriphCLKFreq+0x48a>
 800c10e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800c112:	d00e      	beq.n	800c132 <HAL_RCCEx_GetPeriphCLKFreq+0x492>
 800c114:	e026      	b.n	800c164 <HAL_RCCEx_GetPeriphCLKFreq+0x4c4>
 800c116:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c11a:	d01d      	beq.n	800c158 <HAL_RCCEx_GetPeriphCLKFreq+0x4b8>
 800c11c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800c120:	d01d      	beq.n	800c15e <HAL_RCCEx_GetPeriphCLKFreq+0x4be>
 800c122:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800c126:	d014      	beq.n	800c152 <HAL_RCCEx_GetPeriphCLKFreq+0x4b2>
 800c128:	e01c      	b.n	800c164 <HAL_RCCEx_GetPeriphCLKFreq+0x4c4>
      {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
        {
          frequency = HAL_RCCEx_GetD3PCLK1Freq();
 800c12a:	f000 f831 	bl	800c190 <HAL_RCCEx_GetD3PCLK1Freq>
 800c12e:	63f8      	str	r0, [r7, #60]	; 0x3c
          break;
 800c130:	e01e      	b.n	800c170 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c132:	f107 0318 	add.w	r3, r7, #24
 800c136:	4618      	mov	r0, r3
 800c138:	f000 f840 	bl	800c1bc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800c13c:	69fb      	ldr	r3, [r7, #28]
 800c13e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800c140:	e016      	b.n	800c170 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800c142:	f107 030c 	add.w	r3, r7, #12
 800c146:	4618      	mov	r0, r3
 800c148:	f000 f984 	bl	800c454 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800c14c:	693b      	ldr	r3, [r7, #16]
 800c14e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800c150:	e00e      	b.n	800c170 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
        {
          frequency = HSI_VALUE;
 800c152:	4b0d      	ldr	r3, [pc, #52]	; (800c188 <HAL_RCCEx_GetPeriphCLKFreq+0x4e8>)
 800c154:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800c156:	e00b      	b.n	800c170 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
        {
          frequency = CSI_VALUE;
 800c158:	4b0c      	ldr	r3, [pc, #48]	; (800c18c <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>)
 800c15a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800c15c:	e008      	b.n	800c170 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
        {
          frequency = HSE_VALUE;
 800c15e:	4b07      	ldr	r3, [pc, #28]	; (800c17c <HAL_RCCEx_GetPeriphCLKFreq+0x4dc>)
 800c160:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800c162:	e005      	b.n	800c170 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          break;
        }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
        {
          frequency = 0;
 800c164:	2300      	movs	r3, #0
 800c166:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800c168:	bf00      	nop
 800c16a:	e001      	b.n	800c170 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      }
    }
  else
    {
      frequency = 0;
 800c16c:	2300      	movs	r3, #0
 800c16e:	63fb      	str	r3, [r7, #60]	; 0x3c
    }

  return frequency;
 800c170:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800c172:	4618      	mov	r0, r3
 800c174:	3740      	adds	r7, #64	; 0x40
 800c176:	46bd      	mov	sp, r7
 800c178:	bd80      	pop	{r7, pc}
 800c17a:	bf00      	nop
 800c17c:	017d7840 	.word	0x017d7840
 800c180:	00bb8000 	.word	0x00bb8000
 800c184:	58024400 	.word	0x58024400
 800c188:	03d09000 	.word	0x03d09000
 800c18c:	003d0900 	.word	0x003d0900

0800c190 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 800c190:	b580      	push	{r7, lr}
 800c192:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 800c194:	f7fe fe1e 	bl	800add4 <HAL_RCC_GetHCLKFreq>
 800c198:	4601      	mov	r1, r0
 800c19a:	4b06      	ldr	r3, [pc, #24]	; (800c1b4 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 800c19c:	6a1b      	ldr	r3, [r3, #32]
 800c19e:	091b      	lsrs	r3, r3, #4
 800c1a0:	f003 0307 	and.w	r3, r3, #7
 800c1a4:	4a04      	ldr	r2, [pc, #16]	; (800c1b8 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800c1a6:	5cd3      	ldrb	r3, [r2, r3]
 800c1a8:	f003 031f 	and.w	r3, r3, #31
 800c1ac:	fa21 f303 	lsr.w	r3, r1, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 800c1b0:	4618      	mov	r0, r3
 800c1b2:	bd80      	pop	{r7, pc}
 800c1b4:	58024400 	.word	0x58024400
 800c1b8:	0801c4f4 	.word	0x0801c4f4

0800c1bc <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 800c1bc:	b480      	push	{r7}
 800c1be:	b089      	sub	sp, #36	; 0x24
 800c1c0:	af00      	add	r7, sp, #0
 800c1c2:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800c1c4:	4b9d      	ldr	r3, [pc, #628]	; (800c43c <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 800c1c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c1c8:	f003 0303 	and.w	r3, r3, #3
 800c1cc:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 800c1ce:	4b9b      	ldr	r3, [pc, #620]	; (800c43c <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 800c1d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c1d2:	0b1b      	lsrs	r3, r3, #12
 800c1d4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800c1d8:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800c1da:	4b98      	ldr	r3, [pc, #608]	; (800c43c <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 800c1dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c1de:	091b      	lsrs	r3, r3, #4
 800c1e0:	f003 0301 	and.w	r3, r3, #1
 800c1e4:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 800c1e6:	4b95      	ldr	r3, [pc, #596]	; (800c43c <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 800c1e8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c1ea:	08db      	lsrs	r3, r3, #3
 800c1ec:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800c1f0:	693a      	ldr	r2, [r7, #16]
 800c1f2:	fb02 f303 	mul.w	r3, r2, r3
 800c1f6:	ee07 3a90 	vmov	s15, r3
 800c1fa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c1fe:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800c202:	697b      	ldr	r3, [r7, #20]
 800c204:	2b00      	cmp	r3, #0
 800c206:	f000 810a 	beq.w	800c41e <HAL_RCCEx_GetPLL2ClockFreq+0x262>
  {
    switch (pllsource)
 800c20a:	69bb      	ldr	r3, [r7, #24]
 800c20c:	2b01      	cmp	r3, #1
 800c20e:	d05a      	beq.n	800c2c6 <HAL_RCCEx_GetPLL2ClockFreq+0x10a>
 800c210:	2b01      	cmp	r3, #1
 800c212:	d302      	bcc.n	800c21a <HAL_RCCEx_GetPLL2ClockFreq+0x5e>
 800c214:	2b02      	cmp	r3, #2
 800c216:	d078      	beq.n	800c30a <HAL_RCCEx_GetPLL2ClockFreq+0x14e>
 800c218:	e099      	b.n	800c34e <HAL_RCCEx_GetPLL2ClockFreq+0x192>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800c21a:	4b88      	ldr	r3, [pc, #544]	; (800c43c <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 800c21c:	681b      	ldr	r3, [r3, #0]
 800c21e:	f003 0320 	and.w	r3, r3, #32
 800c222:	2b00      	cmp	r3, #0
 800c224:	d02d      	beq.n	800c282 <HAL_RCCEx_GetPLL2ClockFreq+0xc6>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800c226:	4b85      	ldr	r3, [pc, #532]	; (800c43c <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 800c228:	681b      	ldr	r3, [r3, #0]
 800c22a:	08db      	lsrs	r3, r3, #3
 800c22c:	f003 0303 	and.w	r3, r3, #3
 800c230:	4a83      	ldr	r2, [pc, #524]	; (800c440 <HAL_RCCEx_GetPLL2ClockFreq+0x284>)
 800c232:	fa22 f303 	lsr.w	r3, r2, r3
 800c236:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800c238:	68bb      	ldr	r3, [r7, #8]
 800c23a:	ee07 3a90 	vmov	s15, r3
 800c23e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c242:	697b      	ldr	r3, [r7, #20]
 800c244:	ee07 3a90 	vmov	s15, r3
 800c248:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c24c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c250:	4b7a      	ldr	r3, [pc, #488]	; (800c43c <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 800c252:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c254:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c258:	ee07 3a90 	vmov	s15, r3
 800c25c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c260:	ed97 6a03 	vldr	s12, [r7, #12]
 800c264:	eddf 5a77 	vldr	s11, [pc, #476]	; 800c444 <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 800c268:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c26c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c270:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800c274:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c278:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c27c:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 800c280:	e087      	b.n	800c392 <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800c282:	697b      	ldr	r3, [r7, #20]
 800c284:	ee07 3a90 	vmov	s15, r3
 800c288:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c28c:	eddf 6a6e 	vldr	s13, [pc, #440]	; 800c448 <HAL_RCCEx_GetPLL2ClockFreq+0x28c>
 800c290:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c294:	4b69      	ldr	r3, [pc, #420]	; (800c43c <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 800c296:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c298:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c29c:	ee07 3a90 	vmov	s15, r3
 800c2a0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c2a4:	ed97 6a03 	vldr	s12, [r7, #12]
 800c2a8:	eddf 5a66 	vldr	s11, [pc, #408]	; 800c444 <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 800c2ac:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c2b0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c2b4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800c2b8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c2bc:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c2c0:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800c2c4:	e065      	b.n	800c392 <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800c2c6:	697b      	ldr	r3, [r7, #20]
 800c2c8:	ee07 3a90 	vmov	s15, r3
 800c2cc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c2d0:	eddf 6a5e 	vldr	s13, [pc, #376]	; 800c44c <HAL_RCCEx_GetPLL2ClockFreq+0x290>
 800c2d4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c2d8:	4b58      	ldr	r3, [pc, #352]	; (800c43c <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 800c2da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c2dc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c2e0:	ee07 3a90 	vmov	s15, r3
 800c2e4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c2e8:	ed97 6a03 	vldr	s12, [r7, #12]
 800c2ec:	eddf 5a55 	vldr	s11, [pc, #340]	; 800c444 <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 800c2f0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c2f4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c2f8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800c2fc:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c300:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c304:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800c308:	e043      	b.n	800c392 <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800c30a:	697b      	ldr	r3, [r7, #20]
 800c30c:	ee07 3a90 	vmov	s15, r3
 800c310:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c314:	eddf 6a4e 	vldr	s13, [pc, #312]	; 800c450 <HAL_RCCEx_GetPLL2ClockFreq+0x294>
 800c318:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c31c:	4b47      	ldr	r3, [pc, #284]	; (800c43c <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 800c31e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c320:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c324:	ee07 3a90 	vmov	s15, r3
 800c328:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c32c:	ed97 6a03 	vldr	s12, [r7, #12]
 800c330:	eddf 5a44 	vldr	s11, [pc, #272]	; 800c444 <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 800c334:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c338:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c33c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800c340:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c344:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c348:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800c34c:	e021      	b.n	800c392 <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800c34e:	697b      	ldr	r3, [r7, #20]
 800c350:	ee07 3a90 	vmov	s15, r3
 800c354:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c358:	eddf 6a3c 	vldr	s13, [pc, #240]	; 800c44c <HAL_RCCEx_GetPLL2ClockFreq+0x290>
 800c35c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c360:	4b36      	ldr	r3, [pc, #216]	; (800c43c <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 800c362:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c364:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c368:	ee07 3a90 	vmov	s15, r3
 800c36c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c370:	ed97 6a03 	vldr	s12, [r7, #12]
 800c374:	eddf 5a33 	vldr	s11, [pc, #204]	; 800c444 <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 800c378:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c37c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c380:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800c384:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c388:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c38c:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800c390:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 800c392:	4b2a      	ldr	r3, [pc, #168]	; (800c43c <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 800c394:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c396:	0a5b      	lsrs	r3, r3, #9
 800c398:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c39c:	ee07 3a90 	vmov	s15, r3
 800c3a0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c3a4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800c3a8:	ee37 7a87 	vadd.f32	s14, s15, s14
 800c3ac:	edd7 6a07 	vldr	s13, [r7, #28]
 800c3b0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800c3b4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c3b8:	ee17 2a90 	vmov	r2, s15
 800c3bc:	687b      	ldr	r3, [r7, #4]
 800c3be:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 800c3c0:	4b1e      	ldr	r3, [pc, #120]	; (800c43c <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 800c3c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c3c4:	0c1b      	lsrs	r3, r3, #16
 800c3c6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c3ca:	ee07 3a90 	vmov	s15, r3
 800c3ce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c3d2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800c3d6:	ee37 7a87 	vadd.f32	s14, s15, s14
 800c3da:	edd7 6a07 	vldr	s13, [r7, #28]
 800c3de:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800c3e2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c3e6:	ee17 2a90 	vmov	r2, s15
 800c3ea:	687b      	ldr	r3, [r7, #4]
 800c3ec:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 800c3ee:	4b13      	ldr	r3, [pc, #76]	; (800c43c <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 800c3f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c3f2:	0e1b      	lsrs	r3, r3, #24
 800c3f4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c3f8:	ee07 3a90 	vmov	s15, r3
 800c3fc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c400:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800c404:	ee37 7a87 	vadd.f32	s14, s15, s14
 800c408:	edd7 6a07 	vldr	s13, [r7, #28]
 800c40c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800c410:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c414:	ee17 2a90 	vmov	r2, s15
 800c418:	687b      	ldr	r3, [r7, #4]
 800c41a:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800c41c:	e008      	b.n	800c430 <HAL_RCCEx_GetPLL2ClockFreq+0x274>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 800c41e:	687b      	ldr	r3, [r7, #4]
 800c420:	2200      	movs	r2, #0
 800c422:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800c424:	687b      	ldr	r3, [r7, #4]
 800c426:	2200      	movs	r2, #0
 800c428:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 800c42a:	687b      	ldr	r3, [r7, #4]
 800c42c:	2200      	movs	r2, #0
 800c42e:	609a      	str	r2, [r3, #8]
}
 800c430:	bf00      	nop
 800c432:	3724      	adds	r7, #36	; 0x24
 800c434:	46bd      	mov	sp, r7
 800c436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c43a:	4770      	bx	lr
 800c43c:	58024400 	.word	0x58024400
 800c440:	03d09000 	.word	0x03d09000
 800c444:	46000000 	.word	0x46000000
 800c448:	4c742400 	.word	0x4c742400
 800c44c:	4a742400 	.word	0x4a742400
 800c450:	4bbebc20 	.word	0x4bbebc20

0800c454 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 800c454:	b480      	push	{r7}
 800c456:	b089      	sub	sp, #36	; 0x24
 800c458:	af00      	add	r7, sp, #0
 800c45a:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800c45c:	4b9d      	ldr	r3, [pc, #628]	; (800c6d4 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 800c45e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c460:	f003 0303 	and.w	r3, r3, #3
 800c464:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 800c466:	4b9b      	ldr	r3, [pc, #620]	; (800c6d4 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 800c468:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c46a:	0d1b      	lsrs	r3, r3, #20
 800c46c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800c470:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800c472:	4b98      	ldr	r3, [pc, #608]	; (800c6d4 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 800c474:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c476:	0a1b      	lsrs	r3, r3, #8
 800c478:	f003 0301 	and.w	r3, r3, #1
 800c47c:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 800c47e:	4b95      	ldr	r3, [pc, #596]	; (800c6d4 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 800c480:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c482:	08db      	lsrs	r3, r3, #3
 800c484:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800c488:	693a      	ldr	r2, [r7, #16]
 800c48a:	fb02 f303 	mul.w	r3, r2, r3
 800c48e:	ee07 3a90 	vmov	s15, r3
 800c492:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c496:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 800c49a:	697b      	ldr	r3, [r7, #20]
 800c49c:	2b00      	cmp	r3, #0
 800c49e:	f000 810a 	beq.w	800c6b6 <HAL_RCCEx_GetPLL3ClockFreq+0x262>
  {
    switch (pllsource)
 800c4a2:	69bb      	ldr	r3, [r7, #24]
 800c4a4:	2b01      	cmp	r3, #1
 800c4a6:	d05a      	beq.n	800c55e <HAL_RCCEx_GetPLL3ClockFreq+0x10a>
 800c4a8:	2b01      	cmp	r3, #1
 800c4aa:	d302      	bcc.n	800c4b2 <HAL_RCCEx_GetPLL3ClockFreq+0x5e>
 800c4ac:	2b02      	cmp	r3, #2
 800c4ae:	d078      	beq.n	800c5a2 <HAL_RCCEx_GetPLL3ClockFreq+0x14e>
 800c4b0:	e099      	b.n	800c5e6 <HAL_RCCEx_GetPLL3ClockFreq+0x192>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800c4b2:	4b88      	ldr	r3, [pc, #544]	; (800c6d4 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 800c4b4:	681b      	ldr	r3, [r3, #0]
 800c4b6:	f003 0320 	and.w	r3, r3, #32
 800c4ba:	2b00      	cmp	r3, #0
 800c4bc:	d02d      	beq.n	800c51a <HAL_RCCEx_GetPLL3ClockFreq+0xc6>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800c4be:	4b85      	ldr	r3, [pc, #532]	; (800c6d4 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 800c4c0:	681b      	ldr	r3, [r3, #0]
 800c4c2:	08db      	lsrs	r3, r3, #3
 800c4c4:	f003 0303 	and.w	r3, r3, #3
 800c4c8:	4a83      	ldr	r2, [pc, #524]	; (800c6d8 <HAL_RCCEx_GetPLL3ClockFreq+0x284>)
 800c4ca:	fa22 f303 	lsr.w	r3, r2, r3
 800c4ce:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800c4d0:	68bb      	ldr	r3, [r7, #8]
 800c4d2:	ee07 3a90 	vmov	s15, r3
 800c4d6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c4da:	697b      	ldr	r3, [r7, #20]
 800c4dc:	ee07 3a90 	vmov	s15, r3
 800c4e0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c4e4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c4e8:	4b7a      	ldr	r3, [pc, #488]	; (800c6d4 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 800c4ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c4ec:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c4f0:	ee07 3a90 	vmov	s15, r3
 800c4f4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c4f8:	ed97 6a03 	vldr	s12, [r7, #12]
 800c4fc:	eddf 5a77 	vldr	s11, [pc, #476]	; 800c6dc <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 800c500:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c504:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c508:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800c50c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c510:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c514:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 800c518:	e087      	b.n	800c62a <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800c51a:	697b      	ldr	r3, [r7, #20]
 800c51c:	ee07 3a90 	vmov	s15, r3
 800c520:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c524:	eddf 6a6e 	vldr	s13, [pc, #440]	; 800c6e0 <HAL_RCCEx_GetPLL3ClockFreq+0x28c>
 800c528:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c52c:	4b69      	ldr	r3, [pc, #420]	; (800c6d4 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 800c52e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c530:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c534:	ee07 3a90 	vmov	s15, r3
 800c538:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c53c:	ed97 6a03 	vldr	s12, [r7, #12]
 800c540:	eddf 5a66 	vldr	s11, [pc, #408]	; 800c6dc <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 800c544:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c548:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c54c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800c550:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c554:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c558:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800c55c:	e065      	b.n	800c62a <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800c55e:	697b      	ldr	r3, [r7, #20]
 800c560:	ee07 3a90 	vmov	s15, r3
 800c564:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c568:	eddf 6a5e 	vldr	s13, [pc, #376]	; 800c6e4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>
 800c56c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c570:	4b58      	ldr	r3, [pc, #352]	; (800c6d4 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 800c572:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c574:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c578:	ee07 3a90 	vmov	s15, r3
 800c57c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c580:	ed97 6a03 	vldr	s12, [r7, #12]
 800c584:	eddf 5a55 	vldr	s11, [pc, #340]	; 800c6dc <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 800c588:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c58c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c590:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800c594:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c598:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c59c:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800c5a0:	e043      	b.n	800c62a <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800c5a2:	697b      	ldr	r3, [r7, #20]
 800c5a4:	ee07 3a90 	vmov	s15, r3
 800c5a8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c5ac:	eddf 6a4e 	vldr	s13, [pc, #312]	; 800c6e8 <HAL_RCCEx_GetPLL3ClockFreq+0x294>
 800c5b0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c5b4:	4b47      	ldr	r3, [pc, #284]	; (800c6d4 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 800c5b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c5b8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c5bc:	ee07 3a90 	vmov	s15, r3
 800c5c0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c5c4:	ed97 6a03 	vldr	s12, [r7, #12]
 800c5c8:	eddf 5a44 	vldr	s11, [pc, #272]	; 800c6dc <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 800c5cc:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c5d0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c5d4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800c5d8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c5dc:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c5e0:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800c5e4:	e021      	b.n	800c62a <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800c5e6:	697b      	ldr	r3, [r7, #20]
 800c5e8:	ee07 3a90 	vmov	s15, r3
 800c5ec:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c5f0:	eddf 6a3c 	vldr	s13, [pc, #240]	; 800c6e4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>
 800c5f4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c5f8:	4b36      	ldr	r3, [pc, #216]	; (800c6d4 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 800c5fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c5fc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c600:	ee07 3a90 	vmov	s15, r3
 800c604:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c608:	ed97 6a03 	vldr	s12, [r7, #12]
 800c60c:	eddf 5a33 	vldr	s11, [pc, #204]	; 800c6dc <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 800c610:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c614:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c618:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800c61c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c620:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c624:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800c628:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 800c62a:	4b2a      	ldr	r3, [pc, #168]	; (800c6d4 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 800c62c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c62e:	0a5b      	lsrs	r3, r3, #9
 800c630:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c634:	ee07 3a90 	vmov	s15, r3
 800c638:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c63c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800c640:	ee37 7a87 	vadd.f32	s14, s15, s14
 800c644:	edd7 6a07 	vldr	s13, [r7, #28]
 800c648:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800c64c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c650:	ee17 2a90 	vmov	r2, s15
 800c654:	687b      	ldr	r3, [r7, #4]
 800c656:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 800c658:	4b1e      	ldr	r3, [pc, #120]	; (800c6d4 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 800c65a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c65c:	0c1b      	lsrs	r3, r3, #16
 800c65e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c662:	ee07 3a90 	vmov	s15, r3
 800c666:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c66a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800c66e:	ee37 7a87 	vadd.f32	s14, s15, s14
 800c672:	edd7 6a07 	vldr	s13, [r7, #28]
 800c676:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800c67a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c67e:	ee17 2a90 	vmov	r2, s15
 800c682:	687b      	ldr	r3, [r7, #4]
 800c684:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 800c686:	4b13      	ldr	r3, [pc, #76]	; (800c6d4 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 800c688:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c68a:	0e1b      	lsrs	r3, r3, #24
 800c68c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c690:	ee07 3a90 	vmov	s15, r3
 800c694:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c698:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800c69c:	ee37 7a87 	vadd.f32	s14, s15, s14
 800c6a0:	edd7 6a07 	vldr	s13, [r7, #28]
 800c6a4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800c6a8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c6ac:	ee17 2a90 	vmov	r2, s15
 800c6b0:	687b      	ldr	r3, [r7, #4]
 800c6b2:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800c6b4:	e008      	b.n	800c6c8 <HAL_RCCEx_GetPLL3ClockFreq+0x274>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 800c6b6:	687b      	ldr	r3, [r7, #4]
 800c6b8:	2200      	movs	r2, #0
 800c6ba:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800c6bc:	687b      	ldr	r3, [r7, #4]
 800c6be:	2200      	movs	r2, #0
 800c6c0:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800c6c2:	687b      	ldr	r3, [r7, #4]
 800c6c4:	2200      	movs	r2, #0
 800c6c6:	609a      	str	r2, [r3, #8]
}
 800c6c8:	bf00      	nop
 800c6ca:	3724      	adds	r7, #36	; 0x24
 800c6cc:	46bd      	mov	sp, r7
 800c6ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6d2:	4770      	bx	lr
 800c6d4:	58024400 	.word	0x58024400
 800c6d8:	03d09000 	.word	0x03d09000
 800c6dc:	46000000 	.word	0x46000000
 800c6e0:	4c742400 	.word	0x4c742400
 800c6e4:	4a742400 	.word	0x4a742400
 800c6e8:	4bbebc20 	.word	0x4bbebc20

0800c6ec <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef* PLL1_Clocks)
{
 800c6ec:	b480      	push	{r7}
 800c6ee:	b089      	sub	sp, #36	; 0x24
 800c6f0:	af00      	add	r7, sp, #0
 800c6f2:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800c6f4:	4b9d      	ldr	r3, [pc, #628]	; (800c96c <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 800c6f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c6f8:	f003 0303 	and.w	r3, r3, #3
 800c6fc:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4);
 800c6fe:	4b9b      	ldr	r3, [pc, #620]	; (800c96c <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 800c700:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c702:	091b      	lsrs	r3, r3, #4
 800c704:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800c708:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 800c70a:	4b98      	ldr	r3, [pc, #608]	; (800c96c <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 800c70c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c70e:	f003 0301 	and.w	r3, r3, #1
 800c712:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 800c714:	4b95      	ldr	r3, [pc, #596]	; (800c96c <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 800c716:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c718:	08db      	lsrs	r3, r3, #3
 800c71a:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800c71e:	693a      	ldr	r2, [r7, #16]
 800c720:	fb02 f303 	mul.w	r3, r2, r3
 800c724:	ee07 3a90 	vmov	s15, r3
 800c728:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c72c:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 800c730:	697b      	ldr	r3, [r7, #20]
 800c732:	2b00      	cmp	r3, #0
 800c734:	f000 810a 	beq.w	800c94c <HAL_RCCEx_GetPLL1ClockFreq+0x260>
  {
    switch (pllsource)
 800c738:	69bb      	ldr	r3, [r7, #24]
 800c73a:	2b01      	cmp	r3, #1
 800c73c:	d05a      	beq.n	800c7f4 <HAL_RCCEx_GetPLL1ClockFreq+0x108>
 800c73e:	2b01      	cmp	r3, #1
 800c740:	d302      	bcc.n	800c748 <HAL_RCCEx_GetPLL1ClockFreq+0x5c>
 800c742:	2b02      	cmp	r3, #2
 800c744:	d078      	beq.n	800c838 <HAL_RCCEx_GetPLL1ClockFreq+0x14c>
 800c746:	e099      	b.n	800c87c <HAL_RCCEx_GetPLL1ClockFreq+0x190>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800c748:	4b88      	ldr	r3, [pc, #544]	; (800c96c <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 800c74a:	681b      	ldr	r3, [r3, #0]
 800c74c:	f003 0320 	and.w	r3, r3, #32
 800c750:	2b00      	cmp	r3, #0
 800c752:	d02d      	beq.n	800c7b0 <HAL_RCCEx_GetPLL1ClockFreq+0xc4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800c754:	4b85      	ldr	r3, [pc, #532]	; (800c96c <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 800c756:	681b      	ldr	r3, [r3, #0]
 800c758:	08db      	lsrs	r3, r3, #3
 800c75a:	f003 0303 	and.w	r3, r3, #3
 800c75e:	4a84      	ldr	r2, [pc, #528]	; (800c970 <HAL_RCCEx_GetPLL1ClockFreq+0x284>)
 800c760:	fa22 f303 	lsr.w	r3, r2, r3
 800c764:	60bb      	str	r3, [r7, #8]
        pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800c766:	68bb      	ldr	r3, [r7, #8]
 800c768:	ee07 3a90 	vmov	s15, r3
 800c76c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c770:	697b      	ldr	r3, [r7, #20]
 800c772:	ee07 3a90 	vmov	s15, r3
 800c776:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c77a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c77e:	4b7b      	ldr	r3, [pc, #492]	; (800c96c <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 800c780:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c782:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c786:	ee07 3a90 	vmov	s15, r3
 800c78a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c78e:	ed97 6a03 	vldr	s12, [r7, #12]
 800c792:	eddf 5a78 	vldr	s11, [pc, #480]	; 800c974 <HAL_RCCEx_GetPLL1ClockFreq+0x288>
 800c796:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c79a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c79e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800c7a2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c7a6:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c7aa:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
      }
      break;
 800c7ae:	e087      	b.n	800c8c0 <HAL_RCCEx_GetPLL1ClockFreq+0x1d4>
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800c7b0:	697b      	ldr	r3, [r7, #20]
 800c7b2:	ee07 3a90 	vmov	s15, r3
 800c7b6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c7ba:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800c978 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>
 800c7be:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c7c2:	4b6a      	ldr	r3, [pc, #424]	; (800c96c <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 800c7c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c7c6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c7ca:	ee07 3a90 	vmov	s15, r3
 800c7ce:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c7d2:	ed97 6a03 	vldr	s12, [r7, #12]
 800c7d6:	eddf 5a67 	vldr	s11, [pc, #412]	; 800c974 <HAL_RCCEx_GetPLL1ClockFreq+0x288>
 800c7da:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c7de:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c7e2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800c7e6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c7ea:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c7ee:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800c7f2:	e065      	b.n	800c8c0 <HAL_RCCEx_GetPLL1ClockFreq+0x1d4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800c7f4:	697b      	ldr	r3, [r7, #20]
 800c7f6:	ee07 3a90 	vmov	s15, r3
 800c7fa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c7fe:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800c97c <HAL_RCCEx_GetPLL1ClockFreq+0x290>
 800c802:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c806:	4b59      	ldr	r3, [pc, #356]	; (800c96c <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 800c808:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c80a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c80e:	ee07 3a90 	vmov	s15, r3
 800c812:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c816:	ed97 6a03 	vldr	s12, [r7, #12]
 800c81a:	eddf 5a56 	vldr	s11, [pc, #344]	; 800c974 <HAL_RCCEx_GetPLL1ClockFreq+0x288>
 800c81e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c822:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c826:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800c82a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c82e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c832:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800c836:	e043      	b.n	800c8c0 <HAL_RCCEx_GetPLL1ClockFreq+0x1d4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800c838:	697b      	ldr	r3, [r7, #20]
 800c83a:	ee07 3a90 	vmov	s15, r3
 800c83e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c842:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800c980 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800c846:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c84a:	4b48      	ldr	r3, [pc, #288]	; (800c96c <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 800c84c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c84e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c852:	ee07 3a90 	vmov	s15, r3
 800c856:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c85a:	ed97 6a03 	vldr	s12, [r7, #12]
 800c85e:	eddf 5a45 	vldr	s11, [pc, #276]	; 800c974 <HAL_RCCEx_GetPLL1ClockFreq+0x288>
 800c862:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c866:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c86a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800c86e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c872:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c876:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800c87a:	e021      	b.n	800c8c0 <HAL_RCCEx_GetPLL1ClockFreq+0x1d4>

    default:
      pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800c87c:	697b      	ldr	r3, [r7, #20]
 800c87e:	ee07 3a90 	vmov	s15, r3
 800c882:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c886:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800c97c <HAL_RCCEx_GetPLL1ClockFreq+0x290>
 800c88a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c88e:	4b37      	ldr	r3, [pc, #220]	; (800c96c <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 800c890:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c892:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c896:	ee07 3a90 	vmov	s15, r3
 800c89a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c89e:	ed97 6a03 	vldr	s12, [r7, #12]
 800c8a2:	eddf 5a34 	vldr	s11, [pc, #208]	; 800c974 <HAL_RCCEx_GetPLL1ClockFreq+0x288>
 800c8a6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c8aa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c8ae:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800c8b2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c8b6:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c8ba:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800c8be:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9)  + (float_t)1 )) ;
 800c8c0:	4b2a      	ldr	r3, [pc, #168]	; (800c96c <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 800c8c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c8c4:	0a5b      	lsrs	r3, r3, #9
 800c8c6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c8ca:	ee07 3a90 	vmov	s15, r3
 800c8ce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c8d2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800c8d6:	ee37 7a87 	vadd.f32	s14, s15, s14
 800c8da:	edd7 6a07 	vldr	s13, [r7, #28]
 800c8de:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800c8e2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c8e6:	ee17 2a90 	vmov	r2, s15
 800c8ea:	687b      	ldr	r3, [r7, #4]
 800c8ec:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >>16) + (float_t)1 )) ;
 800c8ee:	4b1f      	ldr	r3, [pc, #124]	; (800c96c <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 800c8f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c8f2:	0c1b      	lsrs	r3, r3, #16
 800c8f4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c8f8:	ee07 3a90 	vmov	s15, r3
 800c8fc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c900:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800c904:	ee37 7a87 	vadd.f32	s14, s15, s14
 800c908:	edd7 6a07 	vldr	s13, [r7, #28]
 800c90c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800c910:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c914:	ee17 2a90 	vmov	r2, s15
 800c918:	687b      	ldr	r3, [r7, #4]
 800c91a:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >>24) + (float_t)1 )) ;
 800c91c:	4b13      	ldr	r3, [pc, #76]	; (800c96c <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 800c91e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c920:	0e1b      	lsrs	r3, r3, #24
 800c922:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c926:	ee07 3a90 	vmov	s15, r3
 800c92a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c92e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800c932:	ee37 7a87 	vadd.f32	s14, s15, s14
 800c936:	edd7 6a07 	vldr	s13, [r7, #28]
 800c93a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800c93e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c942:	ee17 2a90 	vmov	r2, s15
 800c946:	687b      	ldr	r3, [r7, #4]
 800c948:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 800c94a:	e008      	b.n	800c95e <HAL_RCCEx_GetPLL1ClockFreq+0x272>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 800c94c:	687b      	ldr	r3, [r7, #4]
 800c94e:	2200      	movs	r2, #0
 800c950:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 800c952:	687b      	ldr	r3, [r7, #4]
 800c954:	2200      	movs	r2, #0
 800c956:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 800c958:	687b      	ldr	r3, [r7, #4]
 800c95a:	2200      	movs	r2, #0
 800c95c:	609a      	str	r2, [r3, #8]
}
 800c95e:	bf00      	nop
 800c960:	3724      	adds	r7, #36	; 0x24
 800c962:	46bd      	mov	sp, r7
 800c964:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c968:	4770      	bx	lr
 800c96a:	bf00      	nop
 800c96c:	58024400 	.word	0x58024400
 800c970:	03d09000 	.word	0x03d09000
 800c974:	46000000 	.word	0x46000000
 800c978:	4c742400 	.word	0x4c742400
 800c97c:	4a742400 	.word	0x4a742400
 800c980:	4bbebc20 	.word	0x4bbebc20

0800c984 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 800c984:	b580      	push	{r7, lr}
 800c986:	b084      	sub	sp, #16
 800c988:	af00      	add	r7, sp, #0
 800c98a:	6078      	str	r0, [r7, #4]
 800c98c:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800c98e:	2300      	movs	r3, #0
 800c990:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800c992:	4b53      	ldr	r3, [pc, #332]	; (800cae0 <RCCEx_PLL2_Config+0x15c>)
 800c994:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c996:	f003 0303 	and.w	r3, r3, #3
 800c99a:	2b03      	cmp	r3, #3
 800c99c:	d101      	bne.n	800c9a2 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800c99e:	2301      	movs	r3, #1
 800c9a0:	e099      	b.n	800cad6 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800c9a2:	4b4f      	ldr	r3, [pc, #316]	; (800cae0 <RCCEx_PLL2_Config+0x15c>)
 800c9a4:	681b      	ldr	r3, [r3, #0]
 800c9a6:	4a4e      	ldr	r2, [pc, #312]	; (800cae0 <RCCEx_PLL2_Config+0x15c>)
 800c9a8:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800c9ac:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800c9ae:	f7f8 fa01 	bl	8004db4 <HAL_GetTick>
 800c9b2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800c9b4:	e008      	b.n	800c9c8 <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 800c9b6:	f7f8 f9fd 	bl	8004db4 <HAL_GetTick>
 800c9ba:	4602      	mov	r2, r0
 800c9bc:	68bb      	ldr	r3, [r7, #8]
 800c9be:	1ad3      	subs	r3, r2, r3
 800c9c0:	2b02      	cmp	r3, #2
 800c9c2:	d901      	bls.n	800c9c8 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 800c9c4:	2303      	movs	r3, #3
 800c9c6:	e086      	b.n	800cad6 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800c9c8:	4b45      	ldr	r3, [pc, #276]	; (800cae0 <RCCEx_PLL2_Config+0x15c>)
 800c9ca:	681b      	ldr	r3, [r3, #0]
 800c9cc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800c9d0:	2b00      	cmp	r3, #0
 800c9d2:	d1f0      	bne.n	800c9b6 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 800c9d4:	4b42      	ldr	r3, [pc, #264]	; (800cae0 <RCCEx_PLL2_Config+0x15c>)
 800c9d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c9d8:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800c9dc:	687b      	ldr	r3, [r7, #4]
 800c9de:	681b      	ldr	r3, [r3, #0]
 800c9e0:	031b      	lsls	r3, r3, #12
 800c9e2:	493f      	ldr	r1, [pc, #252]	; (800cae0 <RCCEx_PLL2_Config+0x15c>)
 800c9e4:	4313      	orrs	r3, r2
 800c9e6:	628b      	str	r3, [r1, #40]	; 0x28
 800c9e8:	687b      	ldr	r3, [r7, #4]
 800c9ea:	685b      	ldr	r3, [r3, #4]
 800c9ec:	3b01      	subs	r3, #1
 800c9ee:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800c9f2:	687b      	ldr	r3, [r7, #4]
 800c9f4:	689b      	ldr	r3, [r3, #8]
 800c9f6:	3b01      	subs	r3, #1
 800c9f8:	025b      	lsls	r3, r3, #9
 800c9fa:	b29b      	uxth	r3, r3
 800c9fc:	431a      	orrs	r2, r3
 800c9fe:	687b      	ldr	r3, [r7, #4]
 800ca00:	68db      	ldr	r3, [r3, #12]
 800ca02:	3b01      	subs	r3, #1
 800ca04:	041b      	lsls	r3, r3, #16
 800ca06:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800ca0a:	431a      	orrs	r2, r3
 800ca0c:	687b      	ldr	r3, [r7, #4]
 800ca0e:	691b      	ldr	r3, [r3, #16]
 800ca10:	3b01      	subs	r3, #1
 800ca12:	061b      	lsls	r3, r3, #24
 800ca14:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800ca18:	4931      	ldr	r1, [pc, #196]	; (800cae0 <RCCEx_PLL2_Config+0x15c>)
 800ca1a:	4313      	orrs	r3, r2
 800ca1c:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800ca1e:	4b30      	ldr	r3, [pc, #192]	; (800cae0 <RCCEx_PLL2_Config+0x15c>)
 800ca20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ca22:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800ca26:	687b      	ldr	r3, [r7, #4]
 800ca28:	695b      	ldr	r3, [r3, #20]
 800ca2a:	492d      	ldr	r1, [pc, #180]	; (800cae0 <RCCEx_PLL2_Config+0x15c>)
 800ca2c:	4313      	orrs	r3, r2
 800ca2e:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 800ca30:	4b2b      	ldr	r3, [pc, #172]	; (800cae0 <RCCEx_PLL2_Config+0x15c>)
 800ca32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ca34:	f023 0220 	bic.w	r2, r3, #32
 800ca38:	687b      	ldr	r3, [r7, #4]
 800ca3a:	699b      	ldr	r3, [r3, #24]
 800ca3c:	4928      	ldr	r1, [pc, #160]	; (800cae0 <RCCEx_PLL2_Config+0x15c>)
 800ca3e:	4313      	orrs	r3, r2
 800ca40:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800ca42:	4b27      	ldr	r3, [pc, #156]	; (800cae0 <RCCEx_PLL2_Config+0x15c>)
 800ca44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ca46:	4a26      	ldr	r2, [pc, #152]	; (800cae0 <RCCEx_PLL2_Config+0x15c>)
 800ca48:	f023 0310 	bic.w	r3, r3, #16
 800ca4c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800ca4e:	4b24      	ldr	r3, [pc, #144]	; (800cae0 <RCCEx_PLL2_Config+0x15c>)
 800ca50:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800ca52:	4b24      	ldr	r3, [pc, #144]	; (800cae4 <RCCEx_PLL2_Config+0x160>)
 800ca54:	4013      	ands	r3, r2
 800ca56:	687a      	ldr	r2, [r7, #4]
 800ca58:	69d2      	ldr	r2, [r2, #28]
 800ca5a:	00d2      	lsls	r2, r2, #3
 800ca5c:	4920      	ldr	r1, [pc, #128]	; (800cae0 <RCCEx_PLL2_Config+0x15c>)
 800ca5e:	4313      	orrs	r3, r2
 800ca60:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800ca62:	4b1f      	ldr	r3, [pc, #124]	; (800cae0 <RCCEx_PLL2_Config+0x15c>)
 800ca64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ca66:	4a1e      	ldr	r2, [pc, #120]	; (800cae0 <RCCEx_PLL2_Config+0x15c>)
 800ca68:	f043 0310 	orr.w	r3, r3, #16
 800ca6c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 800ca6e:	683b      	ldr	r3, [r7, #0]
 800ca70:	2b00      	cmp	r3, #0
 800ca72:	d106      	bne.n	800ca82 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800ca74:	4b1a      	ldr	r3, [pc, #104]	; (800cae0 <RCCEx_PLL2_Config+0x15c>)
 800ca76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ca78:	4a19      	ldr	r2, [pc, #100]	; (800cae0 <RCCEx_PLL2_Config+0x15c>)
 800ca7a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800ca7e:	62d3      	str	r3, [r2, #44]	; 0x2c
 800ca80:	e00f      	b.n	800caa2 <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 800ca82:	683b      	ldr	r3, [r7, #0]
 800ca84:	2b01      	cmp	r3, #1
 800ca86:	d106      	bne.n	800ca96 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800ca88:	4b15      	ldr	r3, [pc, #84]	; (800cae0 <RCCEx_PLL2_Config+0x15c>)
 800ca8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ca8c:	4a14      	ldr	r2, [pc, #80]	; (800cae0 <RCCEx_PLL2_Config+0x15c>)
 800ca8e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800ca92:	62d3      	str	r3, [r2, #44]	; 0x2c
 800ca94:	e005      	b.n	800caa2 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800ca96:	4b12      	ldr	r3, [pc, #72]	; (800cae0 <RCCEx_PLL2_Config+0x15c>)
 800ca98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ca9a:	4a11      	ldr	r2, [pc, #68]	; (800cae0 <RCCEx_PLL2_Config+0x15c>)
 800ca9c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800caa0:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800caa2:	4b0f      	ldr	r3, [pc, #60]	; (800cae0 <RCCEx_PLL2_Config+0x15c>)
 800caa4:	681b      	ldr	r3, [r3, #0]
 800caa6:	4a0e      	ldr	r2, [pc, #56]	; (800cae0 <RCCEx_PLL2_Config+0x15c>)
 800caa8:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800caac:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800caae:	f7f8 f981 	bl	8004db4 <HAL_GetTick>
 800cab2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800cab4:	e008      	b.n	800cac8 <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 800cab6:	f7f8 f97d 	bl	8004db4 <HAL_GetTick>
 800caba:	4602      	mov	r2, r0
 800cabc:	68bb      	ldr	r3, [r7, #8]
 800cabe:	1ad3      	subs	r3, r2, r3
 800cac0:	2b02      	cmp	r3, #2
 800cac2:	d901      	bls.n	800cac8 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 800cac4:	2303      	movs	r3, #3
 800cac6:	e006      	b.n	800cad6 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800cac8:	4b05      	ldr	r3, [pc, #20]	; (800cae0 <RCCEx_PLL2_Config+0x15c>)
 800caca:	681b      	ldr	r3, [r3, #0]
 800cacc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800cad0:	2b00      	cmp	r3, #0
 800cad2:	d0f0      	beq.n	800cab6 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 800cad4:	7bfb      	ldrb	r3, [r7, #15]
}
 800cad6:	4618      	mov	r0, r3
 800cad8:	3710      	adds	r7, #16
 800cada:	46bd      	mov	sp, r7
 800cadc:	bd80      	pop	{r7, pc}
 800cade:	bf00      	nop
 800cae0:	58024400 	.word	0x58024400
 800cae4:	ffff0007 	.word	0xffff0007

0800cae8 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 800cae8:	b580      	push	{r7, lr}
 800caea:	b084      	sub	sp, #16
 800caec:	af00      	add	r7, sp, #0
 800caee:	6078      	str	r0, [r7, #4]
 800caf0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800caf2:	2300      	movs	r3, #0
 800caf4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800caf6:	4b53      	ldr	r3, [pc, #332]	; (800cc44 <RCCEx_PLL3_Config+0x15c>)
 800caf8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cafa:	f003 0303 	and.w	r3, r3, #3
 800cafe:	2b03      	cmp	r3, #3
 800cb00:	d101      	bne.n	800cb06 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800cb02:	2301      	movs	r3, #1
 800cb04:	e099      	b.n	800cc3a <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800cb06:	4b4f      	ldr	r3, [pc, #316]	; (800cc44 <RCCEx_PLL3_Config+0x15c>)
 800cb08:	681b      	ldr	r3, [r3, #0]
 800cb0a:	4a4e      	ldr	r2, [pc, #312]	; (800cc44 <RCCEx_PLL3_Config+0x15c>)
 800cb0c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800cb10:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800cb12:	f7f8 f94f 	bl	8004db4 <HAL_GetTick>
 800cb16:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800cb18:	e008      	b.n	800cb2c <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 800cb1a:	f7f8 f94b 	bl	8004db4 <HAL_GetTick>
 800cb1e:	4602      	mov	r2, r0
 800cb20:	68bb      	ldr	r3, [r7, #8]
 800cb22:	1ad3      	subs	r3, r2, r3
 800cb24:	2b02      	cmp	r3, #2
 800cb26:	d901      	bls.n	800cb2c <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 800cb28:	2303      	movs	r3, #3
 800cb2a:	e086      	b.n	800cc3a <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800cb2c:	4b45      	ldr	r3, [pc, #276]	; (800cc44 <RCCEx_PLL3_Config+0x15c>)
 800cb2e:	681b      	ldr	r3, [r3, #0]
 800cb30:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800cb34:	2b00      	cmp	r3, #0
 800cb36:	d1f0      	bne.n	800cb1a <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800cb38:	4b42      	ldr	r3, [pc, #264]	; (800cc44 <RCCEx_PLL3_Config+0x15c>)
 800cb3a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cb3c:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 800cb40:	687b      	ldr	r3, [r7, #4]
 800cb42:	681b      	ldr	r3, [r3, #0]
 800cb44:	051b      	lsls	r3, r3, #20
 800cb46:	493f      	ldr	r1, [pc, #252]	; (800cc44 <RCCEx_PLL3_Config+0x15c>)
 800cb48:	4313      	orrs	r3, r2
 800cb4a:	628b      	str	r3, [r1, #40]	; 0x28
 800cb4c:	687b      	ldr	r3, [r7, #4]
 800cb4e:	685b      	ldr	r3, [r3, #4]
 800cb50:	3b01      	subs	r3, #1
 800cb52:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800cb56:	687b      	ldr	r3, [r7, #4]
 800cb58:	689b      	ldr	r3, [r3, #8]
 800cb5a:	3b01      	subs	r3, #1
 800cb5c:	025b      	lsls	r3, r3, #9
 800cb5e:	b29b      	uxth	r3, r3
 800cb60:	431a      	orrs	r2, r3
 800cb62:	687b      	ldr	r3, [r7, #4]
 800cb64:	68db      	ldr	r3, [r3, #12]
 800cb66:	3b01      	subs	r3, #1
 800cb68:	041b      	lsls	r3, r3, #16
 800cb6a:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800cb6e:	431a      	orrs	r2, r3
 800cb70:	687b      	ldr	r3, [r7, #4]
 800cb72:	691b      	ldr	r3, [r3, #16]
 800cb74:	3b01      	subs	r3, #1
 800cb76:	061b      	lsls	r3, r3, #24
 800cb78:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800cb7c:	4931      	ldr	r1, [pc, #196]	; (800cc44 <RCCEx_PLL3_Config+0x15c>)
 800cb7e:	4313      	orrs	r3, r2
 800cb80:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800cb82:	4b30      	ldr	r3, [pc, #192]	; (800cc44 <RCCEx_PLL3_Config+0x15c>)
 800cb84:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cb86:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800cb8a:	687b      	ldr	r3, [r7, #4]
 800cb8c:	695b      	ldr	r3, [r3, #20]
 800cb8e:	492d      	ldr	r1, [pc, #180]	; (800cc44 <RCCEx_PLL3_Config+0x15c>)
 800cb90:	4313      	orrs	r3, r2
 800cb92:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800cb94:	4b2b      	ldr	r3, [pc, #172]	; (800cc44 <RCCEx_PLL3_Config+0x15c>)
 800cb96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cb98:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 800cb9c:	687b      	ldr	r3, [r7, #4]
 800cb9e:	699b      	ldr	r3, [r3, #24]
 800cba0:	4928      	ldr	r1, [pc, #160]	; (800cc44 <RCCEx_PLL3_Config+0x15c>)
 800cba2:	4313      	orrs	r3, r2
 800cba4:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800cba6:	4b27      	ldr	r3, [pc, #156]	; (800cc44 <RCCEx_PLL3_Config+0x15c>)
 800cba8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cbaa:	4a26      	ldr	r2, [pc, #152]	; (800cc44 <RCCEx_PLL3_Config+0x15c>)
 800cbac:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800cbb0:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800cbb2:	4b24      	ldr	r3, [pc, #144]	; (800cc44 <RCCEx_PLL3_Config+0x15c>)
 800cbb4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800cbb6:	4b24      	ldr	r3, [pc, #144]	; (800cc48 <RCCEx_PLL3_Config+0x160>)
 800cbb8:	4013      	ands	r3, r2
 800cbba:	687a      	ldr	r2, [r7, #4]
 800cbbc:	69d2      	ldr	r2, [r2, #28]
 800cbbe:	00d2      	lsls	r2, r2, #3
 800cbc0:	4920      	ldr	r1, [pc, #128]	; (800cc44 <RCCEx_PLL3_Config+0x15c>)
 800cbc2:	4313      	orrs	r3, r2
 800cbc4:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800cbc6:	4b1f      	ldr	r3, [pc, #124]	; (800cc44 <RCCEx_PLL3_Config+0x15c>)
 800cbc8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cbca:	4a1e      	ldr	r2, [pc, #120]	; (800cc44 <RCCEx_PLL3_Config+0x15c>)
 800cbcc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800cbd0:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 800cbd2:	683b      	ldr	r3, [r7, #0]
 800cbd4:	2b00      	cmp	r3, #0
 800cbd6:	d106      	bne.n	800cbe6 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800cbd8:	4b1a      	ldr	r3, [pc, #104]	; (800cc44 <RCCEx_PLL3_Config+0x15c>)
 800cbda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cbdc:	4a19      	ldr	r2, [pc, #100]	; (800cc44 <RCCEx_PLL3_Config+0x15c>)
 800cbde:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800cbe2:	62d3      	str	r3, [r2, #44]	; 0x2c
 800cbe4:	e00f      	b.n	800cc06 <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 800cbe6:	683b      	ldr	r3, [r7, #0]
 800cbe8:	2b01      	cmp	r3, #1
 800cbea:	d106      	bne.n	800cbfa <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 800cbec:	4b15      	ldr	r3, [pc, #84]	; (800cc44 <RCCEx_PLL3_Config+0x15c>)
 800cbee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cbf0:	4a14      	ldr	r2, [pc, #80]	; (800cc44 <RCCEx_PLL3_Config+0x15c>)
 800cbf2:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800cbf6:	62d3      	str	r3, [r2, #44]	; 0x2c
 800cbf8:	e005      	b.n	800cc06 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800cbfa:	4b12      	ldr	r3, [pc, #72]	; (800cc44 <RCCEx_PLL3_Config+0x15c>)
 800cbfc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cbfe:	4a11      	ldr	r2, [pc, #68]	; (800cc44 <RCCEx_PLL3_Config+0x15c>)
 800cc00:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800cc04:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800cc06:	4b0f      	ldr	r3, [pc, #60]	; (800cc44 <RCCEx_PLL3_Config+0x15c>)
 800cc08:	681b      	ldr	r3, [r3, #0]
 800cc0a:	4a0e      	ldr	r2, [pc, #56]	; (800cc44 <RCCEx_PLL3_Config+0x15c>)
 800cc0c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800cc10:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800cc12:	f7f8 f8cf 	bl	8004db4 <HAL_GetTick>
 800cc16:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800cc18:	e008      	b.n	800cc2c <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 800cc1a:	f7f8 f8cb 	bl	8004db4 <HAL_GetTick>
 800cc1e:	4602      	mov	r2, r0
 800cc20:	68bb      	ldr	r3, [r7, #8]
 800cc22:	1ad3      	subs	r3, r2, r3
 800cc24:	2b02      	cmp	r3, #2
 800cc26:	d901      	bls.n	800cc2c <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 800cc28:	2303      	movs	r3, #3
 800cc2a:	e006      	b.n	800cc3a <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800cc2c:	4b05      	ldr	r3, [pc, #20]	; (800cc44 <RCCEx_PLL3_Config+0x15c>)
 800cc2e:	681b      	ldr	r3, [r3, #0]
 800cc30:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800cc34:	2b00      	cmp	r3, #0
 800cc36:	d0f0      	beq.n	800cc1a <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 800cc38:	7bfb      	ldrb	r3, [r7, #15]
}
 800cc3a:	4618      	mov	r0, r3
 800cc3c:	3710      	adds	r7, #16
 800cc3e:	46bd      	mov	sp, r7
 800cc40:	bd80      	pop	{r7, pc}
 800cc42:	bf00      	nop
 800cc44:	58024400 	.word	0x58024400
 800cc48:	ffff0007 	.word	0xffff0007

0800cc4c <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 800cc4c:	b580      	push	{r7, lr}
 800cc4e:	b084      	sub	sp, #16
 800cc50:	af00      	add	r7, sp, #0
 800cc52:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 800cc54:	2301      	movs	r3, #1
 800cc56:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler */
  if(hrtc != NULL)
 800cc58:	687b      	ldr	r3, [r7, #4]
 800cc5a:	2b00      	cmp	r3, #0
 800cc5c:	d067      	beq.n	800cd2e <HAL_RTC_Init+0xe2>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else /*  (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */
    if(hrtc->State == HAL_RTC_STATE_RESET)
 800cc5e:	687b      	ldr	r3, [r7, #4]
 800cc60:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800cc64:	b2db      	uxtb	r3, r3
 800cc66:	2b00      	cmp	r3, #0
 800cc68:	d106      	bne.n	800cc78 <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 800cc6a:	687b      	ldr	r3, [r7, #4]
 800cc6c:	2200      	movs	r2, #0
 800cc6e:	f883 2020 	strb.w	r2, [r3, #32]

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 800cc72:	6878      	ldr	r0, [r7, #4]
 800cc74:	f7f7 fce2 	bl	800463c <HAL_RTC_MspInit>
    }
#endif /*  (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 800cc78:	687b      	ldr	r3, [r7, #4]
 800cc7a:	2202      	movs	r2, #2
 800cc7c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800cc80:	687b      	ldr	r3, [r7, #4]
 800cc82:	681b      	ldr	r3, [r3, #0]
 800cc84:	22ca      	movs	r2, #202	; 0xca
 800cc86:	625a      	str	r2, [r3, #36]	; 0x24
 800cc88:	687b      	ldr	r3, [r7, #4]
 800cc8a:	681b      	ldr	r3, [r3, #0]
 800cc8c:	2253      	movs	r2, #83	; 0x53
 800cc8e:	625a      	str	r2, [r3, #36]	; 0x24

   /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 800cc90:	6878      	ldr	r0, [r7, #4]
 800cc92:	f000 fa49 	bl	800d128 <RTC_EnterInitMode>
 800cc96:	4603      	mov	r3, r0
 800cc98:	73fb      	strb	r3, [r7, #15]
    if (status == HAL_OK)
 800cc9a:	7bfb      	ldrb	r3, [r7, #15]
 800cc9c:	2b00      	cmp	r3, #0
 800cc9e:	d13b      	bne.n	800cd18 <HAL_RTC_Init+0xcc>
#if defined(RTC_CR_TAMPOE)
      /* Clear RTC_CR FMT, OSEL, POL and TAMPOE Bits */
      hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE);
#else  /* RTC_CR_TAMPOE */
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL);
 800cca0:	687b      	ldr	r3, [r7, #4]
 800cca2:	681b      	ldr	r3, [r3, #0]
 800cca4:	6899      	ldr	r1, [r3, #8]
 800cca6:	687b      	ldr	r3, [r7, #4]
 800cca8:	681a      	ldr	r2, [r3, #0]
 800ccaa:	4b23      	ldr	r3, [pc, #140]	; (800cd38 <HAL_RTC_Init+0xec>)
 800ccac:	400b      	ands	r3, r1
 800ccae:	6093      	str	r3, [r2, #8]
#endif /* RTC_CR_TAMPOE */

      /* Set RTC_CR register */
      hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 800ccb0:	687b      	ldr	r3, [r7, #4]
 800ccb2:	681b      	ldr	r3, [r3, #0]
 800ccb4:	6899      	ldr	r1, [r3, #8]
 800ccb6:	687b      	ldr	r3, [r7, #4]
 800ccb8:	685a      	ldr	r2, [r3, #4]
 800ccba:	687b      	ldr	r3, [r7, #4]
 800ccbc:	691b      	ldr	r3, [r3, #16]
 800ccbe:	431a      	orrs	r2, r3
 800ccc0:	687b      	ldr	r3, [r7, #4]
 800ccc2:	699b      	ldr	r3, [r3, #24]
 800ccc4:	431a      	orrs	r2, r3
 800ccc6:	687b      	ldr	r3, [r7, #4]
 800ccc8:	681b      	ldr	r3, [r3, #0]
 800ccca:	430a      	orrs	r2, r1
 800cccc:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos) | (hrtc->Init.SynchPrediv << RTC_PRER_PREDIV_S_Pos);
 800ccce:	687b      	ldr	r3, [r7, #4]
 800ccd0:	689b      	ldr	r3, [r3, #8]
 800ccd2:	0419      	lsls	r1, r3, #16
 800ccd4:	687b      	ldr	r3, [r7, #4]
 800ccd6:	68da      	ldr	r2, [r3, #12]
 800ccd8:	687b      	ldr	r3, [r7, #4]
 800ccda:	681b      	ldr	r3, [r3, #0]
 800ccdc:	430a      	orrs	r2, r1
 800ccde:	611a      	str	r2, [r3, #16]

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 800cce0:	6878      	ldr	r0, [r7, #4]
 800cce2:	f000 fa51 	bl	800d188 <RTC_ExitInitMode>
 800cce6:	4603      	mov	r3, r0
 800cce8:	73fb      	strb	r3, [r7, #15]

      if(status == HAL_OK)
 800ccea:	7bfb      	ldrb	r3, [r7, #15]
 800ccec:	2b00      	cmp	r3, #0
 800ccee:	d113      	bne.n	800cd18 <HAL_RTC_Init+0xcc>
        hrtc->Instance->CR &= ~(RTC_CR_TAMPALRM_PU | RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN);
        hrtc->Instance->CR |= (hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
#endif /* RTC_CR_TAMPALRM_TYPE && RTC_CR_OUT2EN && RTC_CR_TAMPALRM_PU */

#if defined(RTC_OR_ALARMOUTTYPE) && defined(RTC_OR_OUT_RMP)
        hrtc->Instance->OR &= ~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 800ccf0:	687b      	ldr	r3, [r7, #4]
 800ccf2:	681b      	ldr	r3, [r3, #0]
 800ccf4:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800ccf6:	687b      	ldr	r3, [r7, #4]
 800ccf8:	681b      	ldr	r3, [r3, #0]
 800ccfa:	f022 0203 	bic.w	r2, r2, #3
 800ccfe:	64da      	str	r2, [r3, #76]	; 0x4c
        hrtc->Instance->OR |= (hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 800cd00:	687b      	ldr	r3, [r7, #4]
 800cd02:	681b      	ldr	r3, [r3, #0]
 800cd04:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 800cd06:	687b      	ldr	r3, [r7, #4]
 800cd08:	69da      	ldr	r2, [r3, #28]
 800cd0a:	687b      	ldr	r3, [r7, #4]
 800cd0c:	695b      	ldr	r3, [r3, #20]
 800cd0e:	431a      	orrs	r2, r3
 800cd10:	687b      	ldr	r3, [r7, #4]
 800cd12:	681b      	ldr	r3, [r3, #0]
 800cd14:	430a      	orrs	r2, r1
 800cd16:	64da      	str	r2, [r3, #76]	; 0x4c
#endif /* ALARMOUTTYPE && RTC_OR_OUT_RMP */
      }
    }
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800cd18:	687b      	ldr	r3, [r7, #4]
 800cd1a:	681b      	ldr	r3, [r3, #0]
 800cd1c:	22ff      	movs	r2, #255	; 0xff
 800cd1e:	625a      	str	r2, [r3, #36]	; 0x24
    if (status == HAL_OK)
 800cd20:	7bfb      	ldrb	r3, [r7, #15]
 800cd22:	2b00      	cmp	r3, #0
 800cd24:	d103      	bne.n	800cd2e <HAL_RTC_Init+0xe2>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_READY;
 800cd26:	687b      	ldr	r3, [r7, #4]
 800cd28:	2201      	movs	r2, #1
 800cd2a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
  }

  /* return status */
  return status;
 800cd2e:	7bfb      	ldrb	r3, [r7, #15]
}
 800cd30:	4618      	mov	r0, r3
 800cd32:	3710      	adds	r7, #16
 800cd34:	46bd      	mov	sp, r7
 800cd36:	bd80      	pop	{r7, pc}
 800cd38:	ff8fffbf 	.word	0xff8fffbf

0800cd3c <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 800cd3c:	b590      	push	{r4, r7, lr}
 800cd3e:	b087      	sub	sp, #28
 800cd40:	af00      	add	r7, sp, #0
 800cd42:	60f8      	str	r0, [r7, #12]
 800cd44:	60b9      	str	r1, [r7, #8]
 800cd46:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800cd48:	68fb      	ldr	r3, [r7, #12]
 800cd4a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800cd4e:	2b01      	cmp	r3, #1
 800cd50:	d101      	bne.n	800cd56 <HAL_RTC_SetTime+0x1a>
 800cd52:	2302      	movs	r3, #2
 800cd54:	e089      	b.n	800ce6a <HAL_RTC_SetTime+0x12e>
 800cd56:	68fb      	ldr	r3, [r7, #12]
 800cd58:	2201      	movs	r2, #1
 800cd5a:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800cd5e:	68fb      	ldr	r3, [r7, #12]
 800cd60:	2202      	movs	r2, #2
 800cd62:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800cd66:	68fb      	ldr	r3, [r7, #12]
 800cd68:	681b      	ldr	r3, [r3, #0]
 800cd6a:	22ca      	movs	r2, #202	; 0xca
 800cd6c:	625a      	str	r2, [r3, #36]	; 0x24
 800cd6e:	68fb      	ldr	r3, [r7, #12]
 800cd70:	681b      	ldr	r3, [r3, #0]
 800cd72:	2253      	movs	r2, #83	; 0x53
 800cd74:	625a      	str	r2, [r3, #36]	; 0x24
 /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 800cd76:	68f8      	ldr	r0, [r7, #12]
 800cd78:	f000 f9d6 	bl	800d128 <RTC_EnterInitMode>
 800cd7c:	4603      	mov	r3, r0
 800cd7e:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 800cd80:	7cfb      	ldrb	r3, [r7, #19]
 800cd82:	2b00      	cmp	r3, #0
 800cd84:	d161      	bne.n	800ce4a <HAL_RTC_SetTime+0x10e>
  {
    if(Format == RTC_FORMAT_BIN)
 800cd86:	687b      	ldr	r3, [r7, #4]
 800cd88:	2b00      	cmp	r3, #0
 800cd8a:	d126      	bne.n	800cdda <HAL_RTC_SetTime+0x9e>
    {
      if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800cd8c:	68fb      	ldr	r3, [r7, #12]
 800cd8e:	681b      	ldr	r3, [r3, #0]
 800cd90:	689b      	ldr	r3, [r3, #8]
 800cd92:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800cd96:	2b00      	cmp	r3, #0
 800cd98:	d102      	bne.n	800cda0 <HAL_RTC_SetTime+0x64>
        assert_param(IS_RTC_HOUR12(sTime->Hours));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 800cd9a:	68bb      	ldr	r3, [r7, #8]
 800cd9c:	2200      	movs	r2, #0
 800cd9e:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(sTime->Hours));
      }
      assert_param(IS_RTC_MINUTES(sTime->Minutes));
      assert_param(IS_RTC_SECONDS(sTime->Seconds));

      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800cda0:	68bb      	ldr	r3, [r7, #8]
 800cda2:	781b      	ldrb	r3, [r3, #0]
 800cda4:	4618      	mov	r0, r3
 800cda6:	f000 fa2d 	bl	800d204 <RTC_ByteToBcd2>
 800cdaa:	4603      	mov	r3, r0
 800cdac:	041c      	lsls	r4, r3, #16
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800cdae:	68bb      	ldr	r3, [r7, #8]
 800cdb0:	785b      	ldrb	r3, [r3, #1]
 800cdb2:	4618      	mov	r0, r3
 800cdb4:	f000 fa26 	bl	800d204 <RTC_ByteToBcd2>
 800cdb8:	4603      	mov	r3, r0
 800cdba:	021b      	lsls	r3, r3, #8
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800cdbc:	431c      	orrs	r4, r3
                          ((uint32_t)RTC_ByteToBcd2(sTime->Seconds) << RTC_TR_SU_Pos)  | \
 800cdbe:	68bb      	ldr	r3, [r7, #8]
 800cdc0:	789b      	ldrb	r3, [r3, #2]
 800cdc2:	4618      	mov	r0, r3
 800cdc4:	f000 fa1e 	bl	800d204 <RTC_ByteToBcd2>
 800cdc8:	4603      	mov	r3, r0
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800cdca:	ea44 0203 	orr.w	r2, r4, r3
                          (((uint32_t)sTime->TimeFormat) << RTC_TR_PM_Pos));
 800cdce:	68bb      	ldr	r3, [r7, #8]
 800cdd0:	78db      	ldrb	r3, [r3, #3]
 800cdd2:	059b      	lsls	r3, r3, #22
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800cdd4:	4313      	orrs	r3, r2
 800cdd6:	617b      	str	r3, [r7, #20]
 800cdd8:	e018      	b.n	800ce0c <HAL_RTC_SetTime+0xd0>
    }
    else
    {
      if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800cdda:	68fb      	ldr	r3, [r7, #12]
 800cddc:	681b      	ldr	r3, [r3, #0]
 800cdde:	689b      	ldr	r3, [r3, #8]
 800cde0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800cde4:	2b00      	cmp	r3, #0
 800cde6:	d102      	bne.n	800cdee <HAL_RTC_SetTime+0xb2>
        assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 800cde8:	68bb      	ldr	r3, [r7, #8]
 800cdea:	2200      	movs	r2, #0
 800cdec:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
      }
      assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
      assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
      tmpreg = (((uint32_t)(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800cdee:	68bb      	ldr	r3, [r7, #8]
 800cdf0:	781b      	ldrb	r3, [r3, #0]
 800cdf2:	041a      	lsls	r2, r3, #16
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800cdf4:	68bb      	ldr	r3, [r7, #8]
 800cdf6:	785b      	ldrb	r3, [r3, #1]
 800cdf8:	021b      	lsls	r3, r3, #8
      tmpreg = (((uint32_t)(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800cdfa:	4313      	orrs	r3, r2
                ((uint32_t)(sTime->Seconds) << RTC_TR_SU_Pos)  | \
 800cdfc:	68ba      	ldr	r2, [r7, #8]
 800cdfe:	7892      	ldrb	r2, [r2, #2]
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800ce00:	431a      	orrs	r2, r3
                ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 800ce02:	68bb      	ldr	r3, [r7, #8]
 800ce04:	78db      	ldrb	r3, [r3, #3]
 800ce06:	059b      	lsls	r3, r3, #22
      tmpreg = (((uint32_t)(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800ce08:	4313      	orrs	r3, r2
 800ce0a:	617b      	str	r3, [r7, #20]
    }

    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 800ce0c:	68fb      	ldr	r3, [r7, #12]
 800ce0e:	681a      	ldr	r2, [r3, #0]
 800ce10:	6979      	ldr	r1, [r7, #20]
 800ce12:	4b18      	ldr	r3, [pc, #96]	; (800ce74 <HAL_RTC_SetTime+0x138>)
 800ce14:	400b      	ands	r3, r1
 800ce16:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured */
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BKP);
 800ce18:	68fb      	ldr	r3, [r7, #12]
 800ce1a:	681b      	ldr	r3, [r3, #0]
 800ce1c:	689a      	ldr	r2, [r3, #8]
 800ce1e:	68fb      	ldr	r3, [r7, #12]
 800ce20:	681b      	ldr	r3, [r3, #0]
 800ce22:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800ce26:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 800ce28:	68fb      	ldr	r3, [r7, #12]
 800ce2a:	681b      	ldr	r3, [r3, #0]
 800ce2c:	6899      	ldr	r1, [r3, #8]
 800ce2e:	68bb      	ldr	r3, [r7, #8]
 800ce30:	68da      	ldr	r2, [r3, #12]
 800ce32:	68bb      	ldr	r3, [r7, #8]
 800ce34:	691b      	ldr	r3, [r3, #16]
 800ce36:	431a      	orrs	r2, r3
 800ce38:	68fb      	ldr	r3, [r7, #12]
 800ce3a:	681b      	ldr	r3, [r3, #0]
 800ce3c:	430a      	orrs	r2, r1
 800ce3e:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 800ce40:	68f8      	ldr	r0, [r7, #12]
 800ce42:	f000 f9a1 	bl	800d188 <RTC_ExitInitMode>
 800ce46:	4603      	mov	r3, r0
 800ce48:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800ce4a:	68fb      	ldr	r3, [r7, #12]
 800ce4c:	681b      	ldr	r3, [r3, #0]
 800ce4e:	22ff      	movs	r2, #255	; 0xff
 800ce50:	625a      	str	r2, [r3, #36]	; 0x24

  if (status == HAL_OK)
 800ce52:	7cfb      	ldrb	r3, [r7, #19]
 800ce54:	2b00      	cmp	r3, #0
 800ce56:	d103      	bne.n	800ce60 <HAL_RTC_SetTime+0x124>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 800ce58:	68fb      	ldr	r3, [r7, #12]
 800ce5a:	2201      	movs	r2, #1
 800ce5c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800ce60:	68fb      	ldr	r3, [r7, #12]
 800ce62:	2200      	movs	r2, #0
 800ce64:	f883 2020 	strb.w	r2, [r3, #32]

  return status;
 800ce68:	7cfb      	ldrb	r3, [r7, #19]
}
 800ce6a:	4618      	mov	r0, r3
 800ce6c:	371c      	adds	r7, #28
 800ce6e:	46bd      	mov	sp, r7
 800ce70:	bd90      	pop	{r4, r7, pc}
 800ce72:	bf00      	nop
 800ce74:	007f7f7f 	.word	0x007f7f7f

0800ce78 <HAL_RTC_GetTime>:
  *        Reading RTC current time locks the values in calendar shadow registers until Current date is read
  *        to ensure consistency between the time and date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 800ce78:	b580      	push	{r7, lr}
 800ce7a:	b086      	sub	sp, #24
 800ce7c:	af00      	add	r7, sp, #0
 800ce7e:	60f8      	str	r0, [r7, #12]
 800ce80:	60b9      	str	r1, [r7, #8]
 800ce82:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds structure field from the corresponding register*/
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 800ce84:	68fb      	ldr	r3, [r7, #12]
 800ce86:	681b      	ldr	r3, [r3, #0]
 800ce88:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800ce8a:	68bb      	ldr	r3, [r7, #8]
 800ce8c:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 800ce8e:	68fb      	ldr	r3, [r7, #12]
 800ce90:	681b      	ldr	r3, [r3, #0]
 800ce92:	691b      	ldr	r3, [r3, #16]
 800ce94:	f3c3 020e 	ubfx	r2, r3, #0, #15
 800ce98:	68bb      	ldr	r3, [r7, #8]
 800ce9a:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 800ce9c:	68fb      	ldr	r3, [r7, #12]
 800ce9e:	681b      	ldr	r3, [r3, #0]
 800cea0:	681a      	ldr	r2, [r3, #0]
 800cea2:	4b22      	ldr	r3, [pc, #136]	; (800cf2c <HAL_RTC_GetTime+0xb4>)
 800cea4:	4013      	ands	r3, r2
 800cea6:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours      = (uint8_t)((tmpreg & (RTC_TR_HT  | RTC_TR_HU))  >> RTC_TR_HU_Pos);
 800cea8:	697b      	ldr	r3, [r7, #20]
 800ceaa:	0c1b      	lsrs	r3, r3, #16
 800ceac:	b2db      	uxtb	r3, r3
 800ceae:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800ceb2:	b2da      	uxtb	r2, r3
 800ceb4:	68bb      	ldr	r3, [r7, #8]
 800ceb6:	701a      	strb	r2, [r3, #0]
  sTime->Minutes    = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 800ceb8:	697b      	ldr	r3, [r7, #20]
 800ceba:	0a1b      	lsrs	r3, r3, #8
 800cebc:	b2db      	uxtb	r3, r3
 800cebe:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800cec2:	b2da      	uxtb	r2, r3
 800cec4:	68bb      	ldr	r3, [r7, #8]
 800cec6:	705a      	strb	r2, [r3, #1]
  sTime->Seconds    = (uint8_t)((tmpreg & (RTC_TR_ST  | RTC_TR_SU))  >> RTC_TR_SU_Pos);
 800cec8:	697b      	ldr	r3, [r7, #20]
 800ceca:	b2db      	uxtb	r3, r3
 800cecc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ced0:	b2da      	uxtb	r2, r3
 800ced2:	68bb      	ldr	r3, [r7, #8]
 800ced4:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM))               >> RTC_TR_PM_Pos);
 800ced6:	697b      	ldr	r3, [r7, #20]
 800ced8:	0d9b      	lsrs	r3, r3, #22
 800ceda:	b2db      	uxtb	r3, r3
 800cedc:	f003 0301 	and.w	r3, r3, #1
 800cee0:	b2da      	uxtb	r2, r3
 800cee2:	68bb      	ldr	r3, [r7, #8]
 800cee4:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if(Format == RTC_FORMAT_BIN)
 800cee6:	687b      	ldr	r3, [r7, #4]
 800cee8:	2b00      	cmp	r3, #0
 800ceea:	d11a      	bne.n	800cf22 <HAL_RTC_GetTime+0xaa>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours   = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 800ceec:	68bb      	ldr	r3, [r7, #8]
 800ceee:	781b      	ldrb	r3, [r3, #0]
 800cef0:	4618      	mov	r0, r3
 800cef2:	f000 f9a7 	bl	800d244 <RTC_Bcd2ToByte>
 800cef6:	4603      	mov	r3, r0
 800cef8:	461a      	mov	r2, r3
 800cefa:	68bb      	ldr	r3, [r7, #8]
 800cefc:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 800cefe:	68bb      	ldr	r3, [r7, #8]
 800cf00:	785b      	ldrb	r3, [r3, #1]
 800cf02:	4618      	mov	r0, r3
 800cf04:	f000 f99e 	bl	800d244 <RTC_Bcd2ToByte>
 800cf08:	4603      	mov	r3, r0
 800cf0a:	461a      	mov	r2, r3
 800cf0c:	68bb      	ldr	r3, [r7, #8]
 800cf0e:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 800cf10:	68bb      	ldr	r3, [r7, #8]
 800cf12:	789b      	ldrb	r3, [r3, #2]
 800cf14:	4618      	mov	r0, r3
 800cf16:	f000 f995 	bl	800d244 <RTC_Bcd2ToByte>
 800cf1a:	4603      	mov	r3, r0
 800cf1c:	461a      	mov	r2, r3
 800cf1e:	68bb      	ldr	r3, [r7, #8]
 800cf20:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 800cf22:	2300      	movs	r3, #0
}
 800cf24:	4618      	mov	r0, r3
 800cf26:	3718      	adds	r7, #24
 800cf28:	46bd      	mov	sp, r7
 800cf2a:	bd80      	pop	{r7, pc}
 800cf2c:	007f7f7f 	.word	0x007f7f7f

0800cf30 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 800cf30:	b590      	push	{r4, r7, lr}
 800cf32:	b087      	sub	sp, #28
 800cf34:	af00      	add	r7, sp, #0
 800cf36:	60f8      	str	r0, [r7, #12]
 800cf38:	60b9      	str	r1, [r7, #8]
 800cf3a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800cf3c:	68fb      	ldr	r3, [r7, #12]
 800cf3e:	f893 3020 	ldrb.w	r3, [r3, #32]
 800cf42:	2b01      	cmp	r3, #1
 800cf44:	d101      	bne.n	800cf4a <HAL_RTC_SetDate+0x1a>
 800cf46:	2302      	movs	r3, #2
 800cf48:	e073      	b.n	800d032 <HAL_RTC_SetDate+0x102>
 800cf4a:	68fb      	ldr	r3, [r7, #12]
 800cf4c:	2201      	movs	r2, #1
 800cf4e:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800cf52:	68fb      	ldr	r3, [r7, #12]
 800cf54:	2202      	movs	r2, #2
 800cf56:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  if((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 800cf5a:	687b      	ldr	r3, [r7, #4]
 800cf5c:	2b00      	cmp	r3, #0
 800cf5e:	d10e      	bne.n	800cf7e <HAL_RTC_SetDate+0x4e>
 800cf60:	68bb      	ldr	r3, [r7, #8]
 800cf62:	785b      	ldrb	r3, [r3, #1]
 800cf64:	f003 0310 	and.w	r3, r3, #16
 800cf68:	2b00      	cmp	r3, #0
 800cf6a:	d008      	beq.n	800cf7e <HAL_RTC_SetDate+0x4e>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 800cf6c:	68bb      	ldr	r3, [r7, #8]
 800cf6e:	785b      	ldrb	r3, [r3, #1]
 800cf70:	f023 0310 	bic.w	r3, r3, #16
 800cf74:	b2db      	uxtb	r3, r3
 800cf76:	330a      	adds	r3, #10
 800cf78:	b2da      	uxtb	r2, r3
 800cf7a:	68bb      	ldr	r3, [r7, #8]
 800cf7c:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if(Format == RTC_FORMAT_BIN)
 800cf7e:	687b      	ldr	r3, [r7, #4]
 800cf80:	2b00      	cmp	r3, #0
 800cf82:	d11c      	bne.n	800cfbe <HAL_RTC_SetDate+0x8e>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 800cf84:	68bb      	ldr	r3, [r7, #8]
 800cf86:	78db      	ldrb	r3, [r3, #3]
 800cf88:	4618      	mov	r0, r3
 800cf8a:	f000 f93b 	bl	800d204 <RTC_ByteToBcd2>
 800cf8e:	4603      	mov	r3, r0
 800cf90:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 800cf92:	68bb      	ldr	r3, [r7, #8]
 800cf94:	785b      	ldrb	r3, [r3, #1]
 800cf96:	4618      	mov	r0, r3
 800cf98:	f000 f934 	bl	800d204 <RTC_ByteToBcd2>
 800cf9c:	4603      	mov	r3, r0
 800cf9e:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 800cfa0:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date)  << RTC_DR_DU_Pos) | \
 800cfa2:	68bb      	ldr	r3, [r7, #8]
 800cfa4:	789b      	ldrb	r3, [r3, #2]
 800cfa6:	4618      	mov	r0, r3
 800cfa8:	f000 f92c 	bl	800d204 <RTC_ByteToBcd2>
 800cfac:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 800cfae:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay               << RTC_DR_WDU_Pos));
 800cfb2:	68bb      	ldr	r3, [r7, #8]
 800cfb4:	781b      	ldrb	r3, [r3, #0]
 800cfb6:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 800cfb8:	4313      	orrs	r3, r2
 800cfba:	617b      	str	r3, [r7, #20]
 800cfbc:	e00e      	b.n	800cfdc <HAL_RTC_SetDate+0xac>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 800cfbe:	68bb      	ldr	r3, [r7, #8]
 800cfc0:	78db      	ldrb	r3, [r3, #3]
 800cfc2:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 800cfc4:	68bb      	ldr	r3, [r7, #8]
 800cfc6:	785b      	ldrb	r3, [r3, #1]
 800cfc8:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 800cfca:	4313      	orrs	r3, r2
                  (((uint32_t)sDate->Date)    << RTC_DR_DU_Pos) | \
 800cfcc:	68ba      	ldr	r2, [r7, #8]
 800cfce:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 800cfd0:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 800cfd2:	68bb      	ldr	r3, [r7, #8]
 800cfd4:	781b      	ldrb	r3, [r3, #0]
 800cfd6:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 800cfd8:	4313      	orrs	r3, r2
 800cfda:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800cfdc:	68fb      	ldr	r3, [r7, #12]
 800cfde:	681b      	ldr	r3, [r3, #0]
 800cfe0:	22ca      	movs	r2, #202	; 0xca
 800cfe2:	625a      	str	r2, [r3, #36]	; 0x24
 800cfe4:	68fb      	ldr	r3, [r7, #12]
 800cfe6:	681b      	ldr	r3, [r3, #0]
 800cfe8:	2253      	movs	r2, #83	; 0x53
 800cfea:	625a      	str	r2, [r3, #36]	; 0x24


  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 800cfec:	68f8      	ldr	r0, [r7, #12]
 800cfee:	f000 f89b 	bl	800d128 <RTC_EnterInitMode>
 800cff2:	4603      	mov	r3, r0
 800cff4:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 800cff6:	7cfb      	ldrb	r3, [r7, #19]
 800cff8:	2b00      	cmp	r3, #0
 800cffa:	d10a      	bne.n	800d012 <HAL_RTC_SetDate+0xe2>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 800cffc:	68fb      	ldr	r3, [r7, #12]
 800cffe:	681a      	ldr	r2, [r3, #0]
 800d000:	6979      	ldr	r1, [r7, #20]
 800d002:	4b0e      	ldr	r3, [pc, #56]	; (800d03c <HAL_RTC_SetDate+0x10c>)
 800d004:	400b      	ands	r3, r1
 800d006:	6053      	str	r3, [r2, #4]


    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 800d008:	68f8      	ldr	r0, [r7, #12]
 800d00a:	f000 f8bd 	bl	800d188 <RTC_ExitInitMode>
 800d00e:	4603      	mov	r3, r0
 800d010:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800d012:	68fb      	ldr	r3, [r7, #12]
 800d014:	681b      	ldr	r3, [r3, #0]
 800d016:	22ff      	movs	r2, #255	; 0xff
 800d018:	625a      	str	r2, [r3, #36]	; 0x24

  if (status == HAL_OK)
 800d01a:	7cfb      	ldrb	r3, [r7, #19]
 800d01c:	2b00      	cmp	r3, #0
 800d01e:	d103      	bne.n	800d028 <HAL_RTC_SetDate+0xf8>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 800d020:	68fb      	ldr	r3, [r7, #12]
 800d022:	2201      	movs	r2, #1
 800d024:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800d028:	68fb      	ldr	r3, [r7, #12]
 800d02a:	2200      	movs	r2, #0
 800d02c:	f883 2020 	strb.w	r2, [r3, #32]

  return status;
 800d030:	7cfb      	ldrb	r3, [r7, #19]


}
 800d032:	4618      	mov	r0, r3
 800d034:	371c      	adds	r7, #28
 800d036:	46bd      	mov	sp, r7
 800d038:	bd90      	pop	{r4, r7, pc}
 800d03a:	bf00      	nop
 800d03c:	00ffff3f 	.word	0x00ffff3f

0800d040 <HAL_RTC_GetDate>:
  *        in the higher-order calendar shadow registers to ensure consistency between the time and date values.
  *        Reading RTC current time locks the values in calendar shadow registers until Current date is read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 800d040:	b580      	push	{r7, lr}
 800d042:	b086      	sub	sp, #24
 800d044:	af00      	add	r7, sp, #0
 800d046:	60f8      	str	r0, [r7, #12]
 800d048:	60b9      	str	r1, [r7, #8]
 800d04a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 800d04c:	68fb      	ldr	r3, [r7, #12]
 800d04e:	681b      	ldr	r3, [r3, #0]
 800d050:	685a      	ldr	r2, [r3, #4]
 800d052:	4b21      	ldr	r3, [pc, #132]	; (800d0d8 <HAL_RTC_GetDate+0x98>)
 800d054:	4013      	ands	r3, r2
 800d056:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year    = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 800d058:	697b      	ldr	r3, [r7, #20]
 800d05a:	0c1b      	lsrs	r3, r3, #16
 800d05c:	b2da      	uxtb	r2, r3
 800d05e:	68bb      	ldr	r3, [r7, #8]
 800d060:	70da      	strb	r2, [r3, #3]
  sDate->Month   = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 800d062:	697b      	ldr	r3, [r7, #20]
 800d064:	0a1b      	lsrs	r3, r3, #8
 800d066:	b2db      	uxtb	r3, r3
 800d068:	f003 031f 	and.w	r3, r3, #31
 800d06c:	b2da      	uxtb	r2, r3
 800d06e:	68bb      	ldr	r3, [r7, #8]
 800d070:	705a      	strb	r2, [r3, #1]
  sDate->Date    = (uint8_t)((datetmpreg & (RTC_DR_DT | RTC_DR_DU)) >> RTC_DR_DU_Pos);
 800d072:	697b      	ldr	r3, [r7, #20]
 800d074:	b2db      	uxtb	r3, r3
 800d076:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800d07a:	b2da      	uxtb	r2, r3
 800d07c:	68bb      	ldr	r3, [r7, #8]
 800d07e:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU))            >> RTC_DR_WDU_Pos);
 800d080:	697b      	ldr	r3, [r7, #20]
 800d082:	0b5b      	lsrs	r3, r3, #13
 800d084:	b2db      	uxtb	r3, r3
 800d086:	f003 0307 	and.w	r3, r3, #7
 800d08a:	b2da      	uxtb	r2, r3
 800d08c:	68bb      	ldr	r3, [r7, #8]
 800d08e:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if(Format == RTC_FORMAT_BIN)
 800d090:	687b      	ldr	r3, [r7, #4]
 800d092:	2b00      	cmp	r3, #0
 800d094:	d11a      	bne.n	800d0cc <HAL_RTC_GetDate+0x8c>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 800d096:	68bb      	ldr	r3, [r7, #8]
 800d098:	78db      	ldrb	r3, [r3, #3]
 800d09a:	4618      	mov	r0, r3
 800d09c:	f000 f8d2 	bl	800d244 <RTC_Bcd2ToByte>
 800d0a0:	4603      	mov	r3, r0
 800d0a2:	461a      	mov	r2, r3
 800d0a4:	68bb      	ldr	r3, [r7, #8]
 800d0a6:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 800d0a8:	68bb      	ldr	r3, [r7, #8]
 800d0aa:	785b      	ldrb	r3, [r3, #1]
 800d0ac:	4618      	mov	r0, r3
 800d0ae:	f000 f8c9 	bl	800d244 <RTC_Bcd2ToByte>
 800d0b2:	4603      	mov	r3, r0
 800d0b4:	461a      	mov	r2, r3
 800d0b6:	68bb      	ldr	r3, [r7, #8]
 800d0b8:	705a      	strb	r2, [r3, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 800d0ba:	68bb      	ldr	r3, [r7, #8]
 800d0bc:	789b      	ldrb	r3, [r3, #2]
 800d0be:	4618      	mov	r0, r3
 800d0c0:	f000 f8c0 	bl	800d244 <RTC_Bcd2ToByte>
 800d0c4:	4603      	mov	r3, r0
 800d0c6:	461a      	mov	r2, r3
 800d0c8:	68bb      	ldr	r3, [r7, #8]
 800d0ca:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 800d0cc:	2300      	movs	r3, #0
}
 800d0ce:	4618      	mov	r0, r3
 800d0d0:	3718      	adds	r7, #24
 800d0d2:	46bd      	mov	sp, r7
 800d0d4:	bd80      	pop	{r7, pc}
 800d0d6:	bf00      	nop
 800d0d8:	00ffff3f 	.word	0x00ffff3f

0800d0dc <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 800d0dc:	b580      	push	{r7, lr}
 800d0de:	b084      	sub	sp, #16
 800d0e0:	af00      	add	r7, sp, #0
 800d0e2:	6078      	str	r0, [r7, #4]
  /* Clear RSF flag */
#if defined(RTC_ICSR_RSF)
  hrtc->Instance->ICSR &= (uint32_t)RTC_RSF_MASK;
#endif /* RTC_ICSR_RSF */
#if defined(RTC_ISR_RSF)
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 800d0e4:	687b      	ldr	r3, [r7, #4]
 800d0e6:	681b      	ldr	r3, [r3, #0]
 800d0e8:	68da      	ldr	r2, [r3, #12]
 800d0ea:	687b      	ldr	r3, [r7, #4]
 800d0ec:	681b      	ldr	r3, [r3, #0]
 800d0ee:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800d0f2:	60da      	str	r2, [r3, #12]
#endif /* RTC_ISR_RSF */

  tickstart = HAL_GetTick();
 800d0f4:	f7f7 fe5e 	bl	8004db4 <HAL_GetTick>
 800d0f8:	60f8      	str	r0, [r7, #12]
  /* Wait the registers to be synchronised */
#if defined(RTC_ICSR_RSF)
  while ((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
#endif /* RTC_ICSR_RSF */
#if defined(RTC_ISR_RSF)
    while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800d0fa:	e009      	b.n	800d110 <HAL_RTC_WaitForSynchro+0x34>
#endif /* RTC_ISR_RSF */
    {
      if((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800d0fc:	f7f7 fe5a 	bl	8004db4 <HAL_GetTick>
 800d100:	4602      	mov	r2, r0
 800d102:	68fb      	ldr	r3, [r7, #12]
 800d104:	1ad3      	subs	r3, r2, r3
 800d106:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800d10a:	d901      	bls.n	800d110 <HAL_RTC_WaitForSynchro+0x34>
      {
        return HAL_TIMEOUT;
 800d10c:	2303      	movs	r3, #3
 800d10e:	e007      	b.n	800d120 <HAL_RTC_WaitForSynchro+0x44>
    while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800d110:	687b      	ldr	r3, [r7, #4]
 800d112:	681b      	ldr	r3, [r3, #0]
 800d114:	68db      	ldr	r3, [r3, #12]
 800d116:	f003 0320 	and.w	r3, r3, #32
 800d11a:	2b00      	cmp	r3, #0
 800d11c:	d0ee      	beq.n	800d0fc <HAL_RTC_WaitForSynchro+0x20>
      }
    }

  return HAL_OK;
 800d11e:	2300      	movs	r3, #0
}
 800d120:	4618      	mov	r0, r3
 800d122:	3710      	adds	r7, #16
 800d124:	46bd      	mov	sp, r7
 800d126:	bd80      	pop	{r7, pc}

0800d128 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 800d128:	b580      	push	{r7, lr}
 800d12a:	b084      	sub	sp, #16
 800d12c:	af00      	add	r7, sp, #0
 800d12e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800d130:	2300      	movs	r3, #0
 800d132:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#endif /* RTC_ICSR_INITF */
#if defined(RTC_ISR_INITF)
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 800d134:	687b      	ldr	r3, [r7, #4]
 800d136:	681b      	ldr	r3, [r3, #0]
 800d138:	68db      	ldr	r3, [r3, #12]
 800d13a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d13e:	2b00      	cmp	r3, #0
 800d140:	d11d      	bne.n	800d17e <RTC_EnterInitMode+0x56>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 800d142:	687b      	ldr	r3, [r7, #4]
 800d144:	681b      	ldr	r3, [r3, #0]
 800d146:	f04f 32ff 	mov.w	r2, #4294967295
 800d14a:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 800d14c:	f7f7 fe32 	bl	8004db4 <HAL_GetTick>
 800d150:	60b8      	str	r0, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 800d152:	e00d      	b.n	800d170 <RTC_EnterInitMode+0x48>
    {
      if((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 800d154:	f7f7 fe2e 	bl	8004db4 <HAL_GetTick>
 800d158:	4602      	mov	r2, r0
 800d15a:	68bb      	ldr	r3, [r7, #8]
 800d15c:	1ad3      	subs	r3, r2, r3
 800d15e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800d162:	d905      	bls.n	800d170 <RTC_EnterInitMode+0x48>
      {
        status = HAL_TIMEOUT;
 800d164:	2303      	movs	r3, #3
 800d166:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800d168:	687b      	ldr	r3, [r7, #4]
 800d16a:	2203      	movs	r2, #3
 800d16c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 800d170:	687b      	ldr	r3, [r7, #4]
 800d172:	681b      	ldr	r3, [r3, #0]
 800d174:	68db      	ldr	r3, [r3, #12]
 800d176:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d17a:	2b00      	cmp	r3, #0
 800d17c:	d0ea      	beq.n	800d154 <RTC_EnterInitMode+0x2c>
      }
    }
  }
#endif /* RTC_ISR_INITF */

  return status;
 800d17e:	7bfb      	ldrb	r3, [r7, #15]
}
 800d180:	4618      	mov	r0, r3
 800d182:	3710      	adds	r7, #16
 800d184:	46bd      	mov	sp, r7
 800d186:	bd80      	pop	{r7, pc}

0800d188 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 800d188:	b580      	push	{r7, lr}
 800d18a:	b084      	sub	sp, #16
 800d18c:	af00      	add	r7, sp, #0
 800d18e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800d190:	2300      	movs	r3, #0
 800d192:	73fb      	strb	r3, [r7, #15]
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);

#elif defined(RTC_ISR_INITF)

  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ISR, RTC_ISR_INITF);
 800d194:	4b1a      	ldr	r3, [pc, #104]	; (800d200 <RTC_ExitInitMode+0x78>)
 800d196:	68db      	ldr	r3, [r3, #12]
 800d198:	4a19      	ldr	r2, [pc, #100]	; (800d200 <RTC_ExitInitMode+0x78>)
 800d19a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800d19e:	60d3      	str	r3, [r2, #12]

#endif /* RTC_ISR_INITF */
  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 800d1a0:	4b17      	ldr	r3, [pc, #92]	; (800d200 <RTC_ExitInitMode+0x78>)
 800d1a2:	689b      	ldr	r3, [r3, #8]
 800d1a4:	f003 0320 	and.w	r3, r3, #32
 800d1a8:	2b00      	cmp	r3, #0
 800d1aa:	d10c      	bne.n	800d1c6 <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800d1ac:	6878      	ldr	r0, [r7, #4]
 800d1ae:	f7ff ff95 	bl	800d0dc <HAL_RTC_WaitForSynchro>
 800d1b2:	4603      	mov	r3, r0
 800d1b4:	2b00      	cmp	r3, #0
 800d1b6:	d01e      	beq.n	800d1f6 <RTC_ExitInitMode+0x6e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800d1b8:	687b      	ldr	r3, [r7, #4]
 800d1ba:	2203      	movs	r2, #3
 800d1bc:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 800d1c0:	2303      	movs	r3, #3
 800d1c2:	73fb      	strb	r3, [r7, #15]
 800d1c4:	e017      	b.n	800d1f6 <RTC_ExitInitMode+0x6e>
    }
  }
  else
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 800d1c6:	4b0e      	ldr	r3, [pc, #56]	; (800d200 <RTC_ExitInitMode+0x78>)
 800d1c8:	689b      	ldr	r3, [r3, #8]
 800d1ca:	4a0d      	ldr	r2, [pc, #52]	; (800d200 <RTC_ExitInitMode+0x78>)
 800d1cc:	f023 0320 	bic.w	r3, r3, #32
 800d1d0:	6093      	str	r3, [r2, #8]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800d1d2:	6878      	ldr	r0, [r7, #4]
 800d1d4:	f7ff ff82 	bl	800d0dc <HAL_RTC_WaitForSynchro>
 800d1d8:	4603      	mov	r3, r0
 800d1da:	2b00      	cmp	r3, #0
 800d1dc:	d005      	beq.n	800d1ea <RTC_ExitInitMode+0x62>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800d1de:	687b      	ldr	r3, [r7, #4]
 800d1e0:	2203      	movs	r2, #3
 800d1e2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 800d1e6:	2303      	movs	r3, #3
 800d1e8:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 800d1ea:	4b05      	ldr	r3, [pc, #20]	; (800d200 <RTC_ExitInitMode+0x78>)
 800d1ec:	689b      	ldr	r3, [r3, #8]
 800d1ee:	4a04      	ldr	r2, [pc, #16]	; (800d200 <RTC_ExitInitMode+0x78>)
 800d1f0:	f043 0320 	orr.w	r3, r3, #32
 800d1f4:	6093      	str	r3, [r2, #8]
  }

  return status;
 800d1f6:	7bfb      	ldrb	r3, [r7, #15]
}
 800d1f8:	4618      	mov	r0, r3
 800d1fa:	3710      	adds	r7, #16
 800d1fc:	46bd      	mov	sp, r7
 800d1fe:	bd80      	pop	{r7, pc}
 800d200:	58004000 	.word	0x58004000

0800d204 <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 800d204:	b480      	push	{r7}
 800d206:	b085      	sub	sp, #20
 800d208:	af00      	add	r7, sp, #0
 800d20a:	4603      	mov	r3, r0
 800d20c:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 800d20e:	2300      	movs	r3, #0
 800d210:	60fb      	str	r3, [r7, #12]
  uint8_t  bcdlow  = Value;
 800d212:	79fb      	ldrb	r3, [r7, #7]
 800d214:	72fb      	strb	r3, [r7, #11]

  while (bcdlow >= 10U)
 800d216:	e005      	b.n	800d224 <RTC_ByteToBcd2+0x20>
  {
    bcdhigh++;
 800d218:	68fb      	ldr	r3, [r7, #12]
 800d21a:	3301      	adds	r3, #1
 800d21c:	60fb      	str	r3, [r7, #12]
    bcdlow -= 10U;
 800d21e:	7afb      	ldrb	r3, [r7, #11]
 800d220:	3b0a      	subs	r3, #10
 800d222:	72fb      	strb	r3, [r7, #11]
  while (bcdlow >= 10U)
 800d224:	7afb      	ldrb	r3, [r7, #11]
 800d226:	2b09      	cmp	r3, #9
 800d228:	d8f6      	bhi.n	800d218 <RTC_ByteToBcd2+0x14>
  }

  return ((uint8_t)(bcdhigh << 4U) | bcdlow);
 800d22a:	68fb      	ldr	r3, [r7, #12]
 800d22c:	b2db      	uxtb	r3, r3
 800d22e:	011b      	lsls	r3, r3, #4
 800d230:	b2da      	uxtb	r2, r3
 800d232:	7afb      	ldrb	r3, [r7, #11]
 800d234:	4313      	orrs	r3, r2
 800d236:	b2db      	uxtb	r3, r3
}
 800d238:	4618      	mov	r0, r3
 800d23a:	3714      	adds	r7, #20
 800d23c:	46bd      	mov	sp, r7
 800d23e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d242:	4770      	bx	lr

0800d244 <RTC_Bcd2ToByte>:
  * @brief  Convert from 2 digit BCD to Binary.
  * @param  Value BCD value to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 800d244:	b480      	push	{r7}
 800d246:	b085      	sub	sp, #20
 800d248:	af00      	add	r7, sp, #0
 800d24a:	4603      	mov	r3, r0
 800d24c:	71fb      	strb	r3, [r7, #7]
  uint8_t tmp;
  tmp = ((Value & 0xF0U) >> 4U) * 10U;
 800d24e:	79fb      	ldrb	r3, [r7, #7]
 800d250:	091b      	lsrs	r3, r3, #4
 800d252:	b2db      	uxtb	r3, r3
 800d254:	461a      	mov	r2, r3
 800d256:	0092      	lsls	r2, r2, #2
 800d258:	4413      	add	r3, r2
 800d25a:	005b      	lsls	r3, r3, #1
 800d25c:	73fb      	strb	r3, [r7, #15]
  return (tmp + (Value & 0x0FU));
 800d25e:	79fb      	ldrb	r3, [r7, #7]
 800d260:	f003 030f 	and.w	r3, r3, #15
 800d264:	b2da      	uxtb	r2, r3
 800d266:	7bfb      	ldrb	r3, [r7, #15]
 800d268:	4413      	add	r3, r2
 800d26a:	b2db      	uxtb	r3, r3
}
 800d26c:	4618      	mov	r0, r3
 800d26e:	3714      	adds	r7, #20
 800d270:	46bd      	mov	sp, r7
 800d272:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d276:	4770      	bx	lr

0800d278 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 800d278:	b580      	push	{r7, lr}
 800d27a:	b08a      	sub	sp, #40	; 0x28
 800d27c:	af00      	add	r7, sp, #0
 800d27e:	6078      	str	r0, [r7, #4]
  HAL_SD_CardStatusTypeDef CardStatus;
  uint32_t speedgrade, unitsize;
  uint32_t tickstart;

  /* Check the SD handle allocation */
  if(hsd == NULL)
 800d280:	687b      	ldr	r3, [r7, #4]
 800d282:	2b00      	cmp	r3, #0
 800d284:	d101      	bne.n	800d28a <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 800d286:	2301      	movs	r3, #1
 800d288:	e07c      	b.n	800d384 <HAL_SD_Init+0x10c>
  assert_param(IS_SDMMC_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDMMC_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 800d28a:	687b      	ldr	r3, [r7, #4]
 800d28c:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800d290:	b2db      	uxtb	r3, r3
 800d292:	2b00      	cmp	r3, #0
 800d294:	d10c      	bne.n	800d2b0 <HAL_SD_Init+0x38>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 800d296:	687b      	ldr	r3, [r7, #4]
 800d298:	2200      	movs	r2, #0
 800d29a:	771a      	strb	r2, [r3, #28]

#if (USE_SD_TRANSCEIVER != 0U)
    /* Force  SDMMC_TRANSCEIVER_PRESENT for Legacy usage */
    if (hsd->Init.TranceiverPresent == SDMMC_TRANSCEIVER_UNKNOWN)
 800d29c:	687b      	ldr	r3, [r7, #4]
 800d29e:	699b      	ldr	r3, [r3, #24]
 800d2a0:	2b00      	cmp	r3, #0
 800d2a2:	d102      	bne.n	800d2aa <HAL_SD_Init+0x32>
    {
      hsd->Init.TranceiverPresent = SDMMC_TRANSCEIVER_PRESENT;
 800d2a4:	687b      	ldr	r3, [r7, #4]
 800d2a6:	2202      	movs	r2, #2
 800d2a8:	619a      	str	r2, [r3, #24]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 800d2aa:	6878      	ldr	r0, [r7, #4]
 800d2ac:	f7f7 f9e0 	bl	8004670 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 800d2b0:	687b      	ldr	r3, [r7, #4]
 800d2b2:	2203      	movs	r2, #3
 800d2b4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 800d2b8:	6878      	ldr	r0, [r7, #4]
 800d2ba:	f000 f867 	bl	800d38c <HAL_SD_InitCard>
 800d2be:	4603      	mov	r3, r0
 800d2c0:	2b00      	cmp	r3, #0
 800d2c2:	d001      	beq.n	800d2c8 <HAL_SD_Init+0x50>
  {
    return HAL_ERROR;
 800d2c4:	2301      	movs	r3, #1
 800d2c6:	e05d      	b.n	800d384 <HAL_SD_Init+0x10c>
  }

  if( HAL_SD_GetCardStatus(hsd, &CardStatus) != HAL_OK)
 800d2c8:	f107 0308 	add.w	r3, r7, #8
 800d2cc:	4619      	mov	r1, r3
 800d2ce:	6878      	ldr	r0, [r7, #4]
 800d2d0:	f001 f8ce 	bl	800e470 <HAL_SD_GetCardStatus>
 800d2d4:	4603      	mov	r3, r0
 800d2d6:	2b00      	cmp	r3, #0
 800d2d8:	d001      	beq.n	800d2de <HAL_SD_Init+0x66>
  {
    return HAL_ERROR;
 800d2da:	2301      	movs	r3, #1
 800d2dc:	e052      	b.n	800d384 <HAL_SD_Init+0x10c>
  }
  /* Get Initial Card Speed from Card Status*/
  speedgrade = CardStatus.UhsSpeedGrade;
 800d2de:	7e3b      	ldrb	r3, [r7, #24]
 800d2e0:	b2db      	uxtb	r3, r3
 800d2e2:	627b      	str	r3, [r7, #36]	; 0x24
  unitsize = CardStatus.UhsAllocationUnitSize;
 800d2e4:	7e7b      	ldrb	r3, [r7, #25]
 800d2e6:	b2db      	uxtb	r3, r3
 800d2e8:	623b      	str	r3, [r7, #32]
  if ((hsd->SdCard.CardType == CARD_SDHC_SDXC) && ((speedgrade != 0U) || (unitsize != 0U)))
 800d2ea:	687b      	ldr	r3, [r7, #4]
 800d2ec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d2ee:	2b01      	cmp	r3, #1
 800d2f0:	d10a      	bne.n	800d308 <HAL_SD_Init+0x90>
 800d2f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d2f4:	2b00      	cmp	r3, #0
 800d2f6:	d102      	bne.n	800d2fe <HAL_SD_Init+0x86>
 800d2f8:	6a3b      	ldr	r3, [r7, #32]
 800d2fa:	2b00      	cmp	r3, #0
 800d2fc:	d004      	beq.n	800d308 <HAL_SD_Init+0x90>
  {
    hsd->SdCard.CardSpeed = CARD_ULTRA_HIGH_SPEED;
 800d2fe:	687b      	ldr	r3, [r7, #4]
 800d300:	f44f 7200 	mov.w	r2, #512	; 0x200
 800d304:	65da      	str	r2, [r3, #92]	; 0x5c
 800d306:	e00b      	b.n	800d320 <HAL_SD_Init+0xa8>
  }
  else
  {
    if (hsd->SdCard.CardType == CARD_SDHC_SDXC)
 800d308:	687b      	ldr	r3, [r7, #4]
 800d30a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d30c:	2b01      	cmp	r3, #1
 800d30e:	d104      	bne.n	800d31a <HAL_SD_Init+0xa2>
    {
      hsd->SdCard.CardSpeed  = CARD_HIGH_SPEED;
 800d310:	687b      	ldr	r3, [r7, #4]
 800d312:	f44f 7280 	mov.w	r2, #256	; 0x100
 800d316:	65da      	str	r2, [r3, #92]	; 0x5c
 800d318:	e002      	b.n	800d320 <HAL_SD_Init+0xa8>
    }
    else
    {
      hsd->SdCard.CardSpeed  = CARD_NORMAL_SPEED;
 800d31a:	687b      	ldr	r3, [r7, #4]
 800d31c:	2200      	movs	r2, #0
 800d31e:	65da      	str	r2, [r3, #92]	; 0x5c
    }

  }
  /* Configure the bus wide */
  if(HAL_SD_ConfigWideBusOperation(hsd, hsd->Init.BusWide) != HAL_OK)
 800d320:	687b      	ldr	r3, [r7, #4]
 800d322:	68db      	ldr	r3, [r3, #12]
 800d324:	4619      	mov	r1, r3
 800d326:	6878      	ldr	r0, [r7, #4]
 800d328:	f001 f984 	bl	800e634 <HAL_SD_ConfigWideBusOperation>
 800d32c:	4603      	mov	r3, r0
 800d32e:	2b00      	cmp	r3, #0
 800d330:	d001      	beq.n	800d336 <HAL_SD_Init+0xbe>
  {
    return HAL_ERROR;
 800d332:	2301      	movs	r3, #1
 800d334:	e026      	b.n	800d384 <HAL_SD_Init+0x10c>
  }

  /* Verify that SD card is ready to use after Initialization */
  tickstart = HAL_GetTick();
 800d336:	f7f7 fd3d 	bl	8004db4 <HAL_GetTick>
 800d33a:	61f8      	str	r0, [r7, #28]
  while((HAL_SD_GetCardState(hsd) != HAL_SD_CARD_TRANSFER))
 800d33c:	e011      	b.n	800d362 <HAL_SD_Init+0xea>
  {
    if((HAL_GetTick()-tickstart) >=  SDMMC_DATATIMEOUT)
 800d33e:	f7f7 fd39 	bl	8004db4 <HAL_GetTick>
 800d342:	4602      	mov	r2, r0
 800d344:	69fb      	ldr	r3, [r7, #28]
 800d346:	1ad3      	subs	r3, r2, r3
 800d348:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d34c:	d109      	bne.n	800d362 <HAL_SD_Init+0xea>
    {
      hsd->ErrorCode = HAL_SD_ERROR_TIMEOUT;
 800d34e:	687b      	ldr	r3, [r7, #4]
 800d350:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800d354:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State= HAL_SD_STATE_READY;
 800d356:	687b      	ldr	r3, [r7, #4]
 800d358:	2201      	movs	r2, #1
 800d35a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_TIMEOUT;
 800d35e:	2303      	movs	r3, #3
 800d360:	e010      	b.n	800d384 <HAL_SD_Init+0x10c>
  while((HAL_SD_GetCardState(hsd) != HAL_SD_CARD_TRANSFER))
 800d362:	6878      	ldr	r0, [r7, #4]
 800d364:	f001 fa10 	bl	800e788 <HAL_SD_GetCardState>
 800d368:	4603      	mov	r3, r0
 800d36a:	2b04      	cmp	r3, #4
 800d36c:	d1e7      	bne.n	800d33e <HAL_SD_Init+0xc6>
    }
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800d36e:	687b      	ldr	r3, [r7, #4]
 800d370:	2200      	movs	r2, #0
 800d372:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 800d374:	687b      	ldr	r3, [r7, #4]
 800d376:	2200      	movs	r2, #0
 800d378:	631a      	str	r2, [r3, #48]	; 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 800d37a:	687b      	ldr	r3, [r7, #4]
 800d37c:	2201      	movs	r2, #1
 800d37e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 800d382:	2300      	movs	r3, #0
}
 800d384:	4618      	mov	r0, r3
 800d386:	3728      	adds	r7, #40	; 0x28
 800d388:	46bd      	mov	sp, r7
 800d38a:	bd80      	pop	{r7, pc}

0800d38c <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 800d38c:	b5b0      	push	{r4, r5, r7, lr}
 800d38e:	b08e      	sub	sp, #56	; 0x38
 800d390:	af04      	add	r7, sp, #16
 800d392:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  SD_InitTypeDef Init;
  uint32_t sdmmc_clk;

  /* Default SDMMC peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 800d394:	2300      	movs	r3, #0
 800d396:	60bb      	str	r3, [r7, #8]
  Init.ClockPowerSave      = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 800d398:	2300      	movs	r3, #0
 800d39a:	60fb      	str	r3, [r7, #12]
  Init.BusWide             = SDMMC_BUS_WIDE_1B;
 800d39c:	2300      	movs	r3, #0
 800d39e:	613b      	str	r3, [r7, #16]
  Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 800d3a0:	2300      	movs	r3, #0
 800d3a2:	617b      	str	r3, [r7, #20]

  /* Init Clock should be less or equal to 400Khz*/
  sdmmc_clk     = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC);
 800d3a4:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 800d3a8:	f7fe fc7a 	bl	800bca0 <HAL_RCCEx_GetPeriphCLKFreq>
 800d3ac:	6278      	str	r0, [r7, #36]	; 0x24
  Init.ClockDiv = sdmmc_clk/(2U*400000U);
 800d3ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d3b0:	0a1b      	lsrs	r3, r3, #8
 800d3b2:	4a40      	ldr	r2, [pc, #256]	; (800d4b4 <HAL_SD_InitCard+0x128>)
 800d3b4:	fba2 2303 	umull	r2, r3, r2, r3
 800d3b8:	091b      	lsrs	r3, r3, #4
 800d3ba:	61bb      	str	r3, [r7, #24]

#if (USE_SD_TRANSCEIVER != 0U)
  if (hsd->Init.TranceiverPresent == SDMMC_TRANSCEIVER_PRESENT)
 800d3bc:	687b      	ldr	r3, [r7, #4]
 800d3be:	699b      	ldr	r3, [r3, #24]
 800d3c0:	2b02      	cmp	r3, #2
 800d3c2:	d107      	bne.n	800d3d4 <HAL_SD_InitCard+0x48>
  {
    /* Set Transceiver polarity */
    hsd->Instance->POWER |= SDMMC_POWER_DIRPOL;
 800d3c4:	687b      	ldr	r3, [r7, #4]
 800d3c6:	681b      	ldr	r3, [r3, #0]
 800d3c8:	681a      	ldr	r2, [r3, #0]
 800d3ca:	687b      	ldr	r3, [r7, #4]
 800d3cc:	681b      	ldr	r3, [r3, #0]
 800d3ce:	f042 0210 	orr.w	r2, r2, #16
 800d3d2:	601a      	str	r2, [r3, #0]
    /* Set Transceiver polarity */
    hsd->Instance->POWER |= SDMMC_POWER_DIRPOL;
#endif /* USE_SD_TRANSCEIVER  */

  /* Initialize SDMMC peripheral interface with default configuration */
  (void)SDMMC_Init(hsd->Instance, Init);
 800d3d4:	687b      	ldr	r3, [r7, #4]
 800d3d6:	681d      	ldr	r5, [r3, #0]
 800d3d8:	466c      	mov	r4, sp
 800d3da:	f107 0314 	add.w	r3, r7, #20
 800d3de:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800d3e2:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800d3e6:	f107 0308 	add.w	r3, r7, #8
 800d3ea:	cb0e      	ldmia	r3, {r1, r2, r3}
 800d3ec:	4628      	mov	r0, r5
 800d3ee:	f004 f9eb 	bl	80117c8 <SDMMC_Init>

  /* Set Power State to ON */
  (void)SDMMC_PowerState_ON(hsd->Instance);
 800d3f2:	687b      	ldr	r3, [r7, #4]
 800d3f4:	681b      	ldr	r3, [r3, #0]
 800d3f6:	4618      	mov	r0, r3
 800d3f8:	f004 fa2e 	bl	8011858 <SDMMC_PowerState_ON>

  /* wait 74 Cycles: required power up waiting time before starting
     the SD initialization sequence */
  sdmmc_clk = sdmmc_clk/(2U*Init.ClockDiv);
 800d3fc:	69bb      	ldr	r3, [r7, #24]
 800d3fe:	005b      	lsls	r3, r3, #1
 800d400:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d402:	fbb2 f3f3 	udiv	r3, r2, r3
 800d406:	627b      	str	r3, [r7, #36]	; 0x24

  if(sdmmc_clk != 0U)
 800d408:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d40a:	2b00      	cmp	r3, #0
 800d40c:	d008      	beq.n	800d420 <HAL_SD_InitCard+0x94>
  {
    HAL_Delay(1U+ (74U*1000U/(sdmmc_clk)));
 800d40e:	4a2a      	ldr	r2, [pc, #168]	; (800d4b8 <HAL_SD_InitCard+0x12c>)
 800d410:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d412:	fbb2 f3f3 	udiv	r3, r2, r3
 800d416:	3301      	adds	r3, #1
 800d418:	4618      	mov	r0, r3
 800d41a:	f7f7 fcd7 	bl	8004dcc <HAL_Delay>
 800d41e:	e002      	b.n	800d426 <HAL_SD_InitCard+0x9a>
  }
  else
  {
    HAL_Delay(2U);
 800d420:	2002      	movs	r0, #2
 800d422:	f7f7 fcd3 	bl	8004dcc <HAL_Delay>
  }

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 800d426:	6878      	ldr	r0, [r7, #4]
 800d428:	f001 fa8c 	bl	800e944 <SD_PowerON>
 800d42c:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800d42e:	6a3b      	ldr	r3, [r7, #32]
 800d430:	2b00      	cmp	r3, #0
 800d432:	d00b      	beq.n	800d44c <HAL_SD_InitCard+0xc0>
  {
    hsd->State = HAL_SD_STATE_READY;
 800d434:	687b      	ldr	r3, [r7, #4]
 800d436:	2201      	movs	r2, #1
 800d438:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 800d43c:	687b      	ldr	r3, [r7, #4]
 800d43e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800d440:	6a3b      	ldr	r3, [r7, #32]
 800d442:	431a      	orrs	r2, r3
 800d444:	687b      	ldr	r3, [r7, #4]
 800d446:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800d448:	2301      	movs	r3, #1
 800d44a:	e02e      	b.n	800d4aa <HAL_SD_InitCard+0x11e>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 800d44c:	6878      	ldr	r0, [r7, #4]
 800d44e:	f001 f9bb 	bl	800e7c8 <SD_InitCard>
 800d452:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800d454:	6a3b      	ldr	r3, [r7, #32]
 800d456:	2b00      	cmp	r3, #0
 800d458:	d00b      	beq.n	800d472 <HAL_SD_InitCard+0xe6>
  {
    hsd->State = HAL_SD_STATE_READY;
 800d45a:	687b      	ldr	r3, [r7, #4]
 800d45c:	2201      	movs	r2, #1
 800d45e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 800d462:	687b      	ldr	r3, [r7, #4]
 800d464:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800d466:	6a3b      	ldr	r3, [r7, #32]
 800d468:	431a      	orrs	r2, r3
 800d46a:	687b      	ldr	r3, [r7, #4]
 800d46c:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800d46e:	2301      	movs	r3, #1
 800d470:	e01b      	b.n	800d4aa <HAL_SD_InitCard+0x11e>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800d472:	687b      	ldr	r3, [r7, #4]
 800d474:	681b      	ldr	r3, [r3, #0]
 800d476:	f44f 7100 	mov.w	r1, #512	; 0x200
 800d47a:	4618      	mov	r0, r3
 800d47c:	f004 fa82 	bl	8011984 <SDMMC_CmdBlockLength>
 800d480:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800d482:	6a3b      	ldr	r3, [r7, #32]
 800d484:	2b00      	cmp	r3, #0
 800d486:	d00f      	beq.n	800d4a8 <HAL_SD_InitCard+0x11c>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800d488:	687b      	ldr	r3, [r7, #4]
 800d48a:	681b      	ldr	r3, [r3, #0]
 800d48c:	4a0b      	ldr	r2, [pc, #44]	; (800d4bc <HAL_SD_InitCard+0x130>)
 800d48e:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 800d490:	687b      	ldr	r3, [r7, #4]
 800d492:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800d494:	6a3b      	ldr	r3, [r7, #32]
 800d496:	431a      	orrs	r2, r3
 800d498:	687b      	ldr	r3, [r7, #4]
 800d49a:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 800d49c:	687b      	ldr	r3, [r7, #4]
 800d49e:	2201      	movs	r2, #1
 800d4a0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 800d4a4:	2301      	movs	r3, #1
 800d4a6:	e000      	b.n	800d4aa <HAL_SD_InitCard+0x11e>
  }

  return HAL_OK;
 800d4a8:	2300      	movs	r3, #0
}
 800d4aa:	4618      	mov	r0, r3
 800d4ac:	3728      	adds	r7, #40	; 0x28
 800d4ae:	46bd      	mov	sp, r7
 800d4b0:	bdb0      	pop	{r4, r5, r7, pc}
 800d4b2:	bf00      	nop
 800d4b4:	014f8b59 	.word	0x014f8b59
 800d4b8:	00012110 	.word	0x00012110
 800d4bc:	1fe00fff 	.word	0x1fe00fff

0800d4c0 <HAL_SD_ReadBlocks>:
  * @param  NumberOfBlocks: Number of SD blocks to read
  * @param  Timeout: Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks, uint32_t Timeout)
{
 800d4c0:	b580      	push	{r7, lr}
 800d4c2:	b092      	sub	sp, #72	; 0x48
 800d4c4:	af00      	add	r7, sp, #0
 800d4c6:	60f8      	str	r0, [r7, #12]
 800d4c8:	60b9      	str	r1, [r7, #8]
 800d4ca:	607a      	str	r2, [r7, #4]
 800d4cc:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800d4ce:	f7f7 fc71 	bl	8004db4 <HAL_GetTick>
 800d4d2:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t count, data, dataremaining;
  uint32_t add = BlockAdd;
 800d4d4:	687b      	ldr	r3, [r7, #4]
 800d4d6:	63bb      	str	r3, [r7, #56]	; 0x38
  uint8_t *tempbuff = pData;
 800d4d8:	68bb      	ldr	r3, [r7, #8]
 800d4da:	637b      	str	r3, [r7, #52]	; 0x34

  if(NULL == pData)
 800d4dc:	68bb      	ldr	r3, [r7, #8]
 800d4de:	2b00      	cmp	r3, #0
 800d4e0:	d107      	bne.n	800d4f2 <HAL_SD_ReadBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800d4e2:	68fb      	ldr	r3, [r7, #12]
 800d4e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d4e6:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800d4ea:	68fb      	ldr	r3, [r7, #12]
 800d4ec:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800d4ee:	2301      	movs	r3, #1
 800d4f0:	e167      	b.n	800d7c2 <HAL_SD_ReadBlocks+0x302>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 800d4f2:	68fb      	ldr	r3, [r7, #12]
 800d4f4:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800d4f8:	b2db      	uxtb	r3, r3
 800d4fa:	2b01      	cmp	r3, #1
 800d4fc:	f040 815a 	bne.w	800d7b4 <HAL_SD_ReadBlocks+0x2f4>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800d500:	68fb      	ldr	r3, [r7, #12]
 800d502:	2200      	movs	r2, #0
 800d504:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800d506:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800d508:	683b      	ldr	r3, [r7, #0]
 800d50a:	441a      	add	r2, r3
 800d50c:	68fb      	ldr	r3, [r7, #12]
 800d50e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d510:	429a      	cmp	r2, r3
 800d512:	d907      	bls.n	800d524 <HAL_SD_ReadBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800d514:	68fb      	ldr	r3, [r7, #12]
 800d516:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d518:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800d51c:	68fb      	ldr	r3, [r7, #12]
 800d51e:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 800d520:	2301      	movs	r3, #1
 800d522:	e14e      	b.n	800d7c2 <HAL_SD_ReadBlocks+0x302>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 800d524:	68fb      	ldr	r3, [r7, #12]
 800d526:	2203      	movs	r2, #3
 800d528:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 800d52c:	68fb      	ldr	r3, [r7, #12]
 800d52e:	681b      	ldr	r3, [r3, #0]
 800d530:	2200      	movs	r2, #0
 800d532:	62da      	str	r2, [r3, #44]	; 0x2c

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800d534:	68fb      	ldr	r3, [r7, #12]
 800d536:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d538:	2b01      	cmp	r3, #1
 800d53a:	d002      	beq.n	800d542 <HAL_SD_ReadBlocks+0x82>
    {
      add *= 512U;
 800d53c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d53e:	025b      	lsls	r3, r3, #9
 800d540:	63bb      	str	r3, [r7, #56]	; 0x38
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800d542:	f04f 33ff 	mov.w	r3, #4294967295
 800d546:	617b      	str	r3, [r7, #20]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 800d548:	683b      	ldr	r3, [r7, #0]
 800d54a:	025b      	lsls	r3, r3, #9
 800d54c:	61bb      	str	r3, [r7, #24]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 800d54e:	2390      	movs	r3, #144	; 0x90
 800d550:	61fb      	str	r3, [r7, #28]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 800d552:	2302      	movs	r3, #2
 800d554:	623b      	str	r3, [r7, #32]
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800d556:	2300      	movs	r3, #0
 800d558:	627b      	str	r3, [r7, #36]	; 0x24
    config.DPSM          = SDMMC_DPSM_DISABLE;
 800d55a:	2300      	movs	r3, #0
 800d55c:	62bb      	str	r3, [r7, #40]	; 0x28
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 800d55e:	68fb      	ldr	r3, [r7, #12]
 800d560:	681b      	ldr	r3, [r3, #0]
 800d562:	f107 0214 	add.w	r2, r7, #20
 800d566:	4611      	mov	r1, r2
 800d568:	4618      	mov	r0, r3
 800d56a:	f004 f9df 	bl	801192c <SDMMC_ConfigData>
    __SDMMC_CMDTRANS_ENABLE( hsd->Instance);
 800d56e:	68fb      	ldr	r3, [r7, #12]
 800d570:	681b      	ldr	r3, [r3, #0]
 800d572:	68da      	ldr	r2, [r3, #12]
 800d574:	68fb      	ldr	r3, [r7, #12]
 800d576:	681b      	ldr	r3, [r3, #0]
 800d578:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800d57c:	60da      	str	r2, [r3, #12]

    /* Read block(s) in polling mode */
    if(NumberOfBlocks > 1U)
 800d57e:	683b      	ldr	r3, [r7, #0]
 800d580:	2b01      	cmp	r3, #1
 800d582:	d90a      	bls.n	800d59a <HAL_SD_ReadBlocks+0xda>
    {
      hsd->Context = SD_CONTEXT_READ_MULTIPLE_BLOCK;
 800d584:	68fb      	ldr	r3, [r7, #12]
 800d586:	2202      	movs	r2, #2
 800d588:	631a      	str	r2, [r3, #48]	; 0x30

      /* Read Multi Block command */
      errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 800d58a:	68fb      	ldr	r3, [r7, #12]
 800d58c:	681b      	ldr	r3, [r3, #0]
 800d58e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800d590:	4618      	mov	r0, r3
 800d592:	f004 fa3d 	bl	8011a10 <SDMMC_CmdReadMultiBlock>
 800d596:	6478      	str	r0, [r7, #68]	; 0x44
 800d598:	e009      	b.n	800d5ae <HAL_SD_ReadBlocks+0xee>
    }
    else
    {
      hsd->Context = SD_CONTEXT_READ_SINGLE_BLOCK;
 800d59a:	68fb      	ldr	r3, [r7, #12]
 800d59c:	2201      	movs	r2, #1
 800d59e:	631a      	str	r2, [r3, #48]	; 0x30

      /* Read Single Block command */
      errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 800d5a0:	68fb      	ldr	r3, [r7, #12]
 800d5a2:	681b      	ldr	r3, [r3, #0]
 800d5a4:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800d5a6:	4618      	mov	r0, r3
 800d5a8:	f004 fa0f 	bl	80119ca <SDMMC_CmdReadSingleBlock>
 800d5ac:	6478      	str	r0, [r7, #68]	; 0x44
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 800d5ae:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d5b0:	2b00      	cmp	r3, #0
 800d5b2:	d012      	beq.n	800d5da <HAL_SD_ReadBlocks+0x11a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800d5b4:	68fb      	ldr	r3, [r7, #12]
 800d5b6:	681b      	ldr	r3, [r3, #0]
 800d5b8:	4a84      	ldr	r2, [pc, #528]	; (800d7cc <HAL_SD_ReadBlocks+0x30c>)
 800d5ba:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 800d5bc:	68fb      	ldr	r3, [r7, #12]
 800d5be:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800d5c0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d5c2:	431a      	orrs	r2, r3
 800d5c4:	68fb      	ldr	r3, [r7, #12]
 800d5c6:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800d5c8:	68fb      	ldr	r3, [r7, #12]
 800d5ca:	2201      	movs	r2, #1
 800d5cc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800d5d0:	68fb      	ldr	r3, [r7, #12]
 800d5d2:	2200      	movs	r2, #0
 800d5d4:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800d5d6:	2301      	movs	r3, #1
 800d5d8:	e0f3      	b.n	800d7c2 <HAL_SD_ReadBlocks+0x302>
    }

    /* Poll on SDMMC flags */
    dataremaining = config.DataLength;
 800d5da:	69bb      	ldr	r3, [r7, #24]
 800d5dc:	63fb      	str	r3, [r7, #60]	; 0x3c
    while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 800d5de:	e058      	b.n	800d692 <HAL_SD_ReadBlocks+0x1d2>
    {
      if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF) && (dataremaining >= 32U))
 800d5e0:	68fb      	ldr	r3, [r7, #12]
 800d5e2:	681b      	ldr	r3, [r3, #0]
 800d5e4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d5e6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800d5ea:	2b00      	cmp	r3, #0
 800d5ec:	d033      	beq.n	800d656 <HAL_SD_ReadBlocks+0x196>
 800d5ee:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d5f0:	2b1f      	cmp	r3, #31
 800d5f2:	d930      	bls.n	800d656 <HAL_SD_ReadBlocks+0x196>
      {
        /* Read data from SDMMC Rx FIFO */
        for(count = 0U; count < 8U; count++)
 800d5f4:	2300      	movs	r3, #0
 800d5f6:	643b      	str	r3, [r7, #64]	; 0x40
 800d5f8:	e027      	b.n	800d64a <HAL_SD_ReadBlocks+0x18a>
        {
          data = SDMMC_ReadFIFO(hsd->Instance);
 800d5fa:	68fb      	ldr	r3, [r7, #12]
 800d5fc:	681b      	ldr	r3, [r3, #0]
 800d5fe:	4618      	mov	r0, r3
 800d600:	f004 f90c 	bl	801181c <SDMMC_ReadFIFO>
 800d604:	62f8      	str	r0, [r7, #44]	; 0x2c
          *tempbuff = (uint8_t)(data & 0xFFU);
 800d606:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d608:	b2da      	uxtb	r2, r3
 800d60a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d60c:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 800d60e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d610:	3301      	adds	r3, #1
 800d612:	637b      	str	r3, [r7, #52]	; 0x34
          *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
 800d614:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d616:	0a1b      	lsrs	r3, r3, #8
 800d618:	b2da      	uxtb	r2, r3
 800d61a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d61c:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 800d61e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d620:	3301      	adds	r3, #1
 800d622:	637b      	str	r3, [r7, #52]	; 0x34
          *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
 800d624:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d626:	0c1b      	lsrs	r3, r3, #16
 800d628:	b2da      	uxtb	r2, r3
 800d62a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d62c:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 800d62e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d630:	3301      	adds	r3, #1
 800d632:	637b      	str	r3, [r7, #52]	; 0x34
          *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
 800d634:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d636:	0e1b      	lsrs	r3, r3, #24
 800d638:	b2da      	uxtb	r2, r3
 800d63a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d63c:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 800d63e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d640:	3301      	adds	r3, #1
 800d642:	637b      	str	r3, [r7, #52]	; 0x34
        for(count = 0U; count < 8U; count++)
 800d644:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d646:	3301      	adds	r3, #1
 800d648:	643b      	str	r3, [r7, #64]	; 0x40
 800d64a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d64c:	2b07      	cmp	r3, #7
 800d64e:	d9d4      	bls.n	800d5fa <HAL_SD_ReadBlocks+0x13a>
        }
        dataremaining -= 32U;
 800d650:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d652:	3b20      	subs	r3, #32
 800d654:	63fb      	str	r3, [r7, #60]	; 0x3c
      }

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 800d656:	f7f7 fbad 	bl	8004db4 <HAL_GetTick>
 800d65a:	4602      	mov	r2, r0
 800d65c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d65e:	1ad3      	subs	r3, r2, r3
 800d660:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800d662:	429a      	cmp	r2, r3
 800d664:	d902      	bls.n	800d66c <HAL_SD_ReadBlocks+0x1ac>
 800d666:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d668:	2b00      	cmp	r3, #0
 800d66a:	d112      	bne.n	800d692 <HAL_SD_ReadBlocks+0x1d2>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800d66c:	68fb      	ldr	r3, [r7, #12]
 800d66e:	681b      	ldr	r3, [r3, #0]
 800d670:	4a56      	ldr	r2, [pc, #344]	; (800d7cc <HAL_SD_ReadBlocks+0x30c>)
 800d672:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 800d674:	68fb      	ldr	r3, [r7, #12]
 800d676:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d678:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 800d67c:	68fb      	ldr	r3, [r7, #12]
 800d67e:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State= HAL_SD_STATE_READY;
 800d680:	68fb      	ldr	r3, [r7, #12]
 800d682:	2201      	movs	r2, #1
 800d684:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 800d688:	68fb      	ldr	r3, [r7, #12]
 800d68a:	2200      	movs	r2, #0
 800d68c:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_TIMEOUT;
 800d68e:	2303      	movs	r3, #3
 800d690:	e097      	b.n	800d7c2 <HAL_SD_ReadBlocks+0x302>
    while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 800d692:	68fb      	ldr	r3, [r7, #12]
 800d694:	681b      	ldr	r3, [r3, #0]
 800d696:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d698:	f403 7395 	and.w	r3, r3, #298	; 0x12a
 800d69c:	2b00      	cmp	r3, #0
 800d69e:	d09f      	beq.n	800d5e0 <HAL_SD_ReadBlocks+0x120>
      }
    }
    __SDMMC_CMDTRANS_DISABLE( hsd->Instance);
 800d6a0:	68fb      	ldr	r3, [r7, #12]
 800d6a2:	681b      	ldr	r3, [r3, #0]
 800d6a4:	68da      	ldr	r2, [r3, #12]
 800d6a6:	68fb      	ldr	r3, [r7, #12]
 800d6a8:	681b      	ldr	r3, [r3, #0]
 800d6aa:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800d6ae:	60da      	str	r2, [r3, #12]

    /* Send stop transmission command in case of multiblock read */
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 800d6b0:	68fb      	ldr	r3, [r7, #12]
 800d6b2:	681b      	ldr	r3, [r3, #0]
 800d6b4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d6b6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d6ba:	2b00      	cmp	r3, #0
 800d6bc:	d022      	beq.n	800d704 <HAL_SD_ReadBlocks+0x244>
 800d6be:	683b      	ldr	r3, [r7, #0]
 800d6c0:	2b01      	cmp	r3, #1
 800d6c2:	d91f      	bls.n	800d704 <HAL_SD_ReadBlocks+0x244>
    {
      if(hsd->SdCard.CardType != CARD_SECURED)
 800d6c4:	68fb      	ldr	r3, [r7, #12]
 800d6c6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d6c8:	2b03      	cmp	r3, #3
 800d6ca:	d01b      	beq.n	800d704 <HAL_SD_ReadBlocks+0x244>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800d6cc:	68fb      	ldr	r3, [r7, #12]
 800d6ce:	681b      	ldr	r3, [r3, #0]
 800d6d0:	4618      	mov	r0, r3
 800d6d2:	f004 fa07 	bl	8011ae4 <SDMMC_CmdStopTransfer>
 800d6d6:	6478      	str	r0, [r7, #68]	; 0x44
        if(errorstate != HAL_SD_ERROR_NONE)
 800d6d8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d6da:	2b00      	cmp	r3, #0
 800d6dc:	d012      	beq.n	800d704 <HAL_SD_ReadBlocks+0x244>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800d6de:	68fb      	ldr	r3, [r7, #12]
 800d6e0:	681b      	ldr	r3, [r3, #0]
 800d6e2:	4a3a      	ldr	r2, [pc, #232]	; (800d7cc <HAL_SD_ReadBlocks+0x30c>)
 800d6e4:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->ErrorCode |= errorstate;
 800d6e6:	68fb      	ldr	r3, [r7, #12]
 800d6e8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800d6ea:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d6ec:	431a      	orrs	r2, r3
 800d6ee:	68fb      	ldr	r3, [r7, #12]
 800d6f0:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->State = HAL_SD_STATE_READY;
 800d6f2:	68fb      	ldr	r3, [r7, #12]
 800d6f4:	2201      	movs	r2, #1
 800d6f6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          hsd->Context = SD_CONTEXT_NONE;
 800d6fa:	68fb      	ldr	r3, [r7, #12]
 800d6fc:	2200      	movs	r2, #0
 800d6fe:	631a      	str	r2, [r3, #48]	; 0x30
          return HAL_ERROR;
 800d700:	2301      	movs	r3, #1
 800d702:	e05e      	b.n	800d7c2 <HAL_SD_ReadBlocks+0x302>
        }
      }
    }

    /* Get error state */
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 800d704:	68fb      	ldr	r3, [r7, #12]
 800d706:	681b      	ldr	r3, [r3, #0]
 800d708:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d70a:	f003 0308 	and.w	r3, r3, #8
 800d70e:	2b00      	cmp	r3, #0
 800d710:	d012      	beq.n	800d738 <HAL_SD_ReadBlocks+0x278>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800d712:	68fb      	ldr	r3, [r7, #12]
 800d714:	681b      	ldr	r3, [r3, #0]
 800d716:	4a2d      	ldr	r2, [pc, #180]	; (800d7cc <HAL_SD_ReadBlocks+0x30c>)
 800d718:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 800d71a:	68fb      	ldr	r3, [r7, #12]
 800d71c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d71e:	f043 0208 	orr.w	r2, r3, #8
 800d722:	68fb      	ldr	r3, [r7, #12]
 800d724:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800d726:	68fb      	ldr	r3, [r7, #12]
 800d728:	2201      	movs	r2, #1
 800d72a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800d72e:	68fb      	ldr	r3, [r7, #12]
 800d730:	2200      	movs	r2, #0
 800d732:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800d734:	2301      	movs	r3, #1
 800d736:	e044      	b.n	800d7c2 <HAL_SD_ReadBlocks+0x302>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 800d738:	68fb      	ldr	r3, [r7, #12]
 800d73a:	681b      	ldr	r3, [r3, #0]
 800d73c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d73e:	f003 0302 	and.w	r3, r3, #2
 800d742:	2b00      	cmp	r3, #0
 800d744:	d012      	beq.n	800d76c <HAL_SD_ReadBlocks+0x2ac>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800d746:	68fb      	ldr	r3, [r7, #12]
 800d748:	681b      	ldr	r3, [r3, #0]
 800d74a:	4a20      	ldr	r2, [pc, #128]	; (800d7cc <HAL_SD_ReadBlocks+0x30c>)
 800d74c:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 800d74e:	68fb      	ldr	r3, [r7, #12]
 800d750:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d752:	f043 0202 	orr.w	r2, r3, #2
 800d756:	68fb      	ldr	r3, [r7, #12]
 800d758:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800d75a:	68fb      	ldr	r3, [r7, #12]
 800d75c:	2201      	movs	r2, #1
 800d75e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800d762:	68fb      	ldr	r3, [r7, #12]
 800d764:	2200      	movs	r2, #0
 800d766:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800d768:	2301      	movs	r3, #1
 800d76a:	e02a      	b.n	800d7c2 <HAL_SD_ReadBlocks+0x302>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 800d76c:	68fb      	ldr	r3, [r7, #12]
 800d76e:	681b      	ldr	r3, [r3, #0]
 800d770:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d772:	f003 0320 	and.w	r3, r3, #32
 800d776:	2b00      	cmp	r3, #0
 800d778:	d012      	beq.n	800d7a0 <HAL_SD_ReadBlocks+0x2e0>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800d77a:	68fb      	ldr	r3, [r7, #12]
 800d77c:	681b      	ldr	r3, [r3, #0]
 800d77e:	4a13      	ldr	r2, [pc, #76]	; (800d7cc <HAL_SD_ReadBlocks+0x30c>)
 800d780:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 800d782:	68fb      	ldr	r3, [r7, #12]
 800d784:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d786:	f043 0220 	orr.w	r2, r3, #32
 800d78a:	68fb      	ldr	r3, [r7, #12]
 800d78c:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800d78e:	68fb      	ldr	r3, [r7, #12]
 800d790:	2201      	movs	r2, #1
 800d792:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800d796:	68fb      	ldr	r3, [r7, #12]
 800d798:	2200      	movs	r2, #0
 800d79a:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800d79c:	2301      	movs	r3, #1
 800d79e:	e010      	b.n	800d7c2 <HAL_SD_ReadBlocks+0x302>
    {
      /* Nothing to do */
    }

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800d7a0:	68fb      	ldr	r3, [r7, #12]
 800d7a2:	681b      	ldr	r3, [r3, #0]
 800d7a4:	4a0a      	ldr	r2, [pc, #40]	; (800d7d0 <HAL_SD_ReadBlocks+0x310>)
 800d7a6:	639a      	str	r2, [r3, #56]	; 0x38

    hsd->State = HAL_SD_STATE_READY;
 800d7a8:	68fb      	ldr	r3, [r7, #12]
 800d7aa:	2201      	movs	r2, #1
 800d7ac:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_OK;
 800d7b0:	2300      	movs	r3, #0
 800d7b2:	e006      	b.n	800d7c2 <HAL_SD_ReadBlocks+0x302>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 800d7b4:	68fb      	ldr	r3, [r7, #12]
 800d7b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d7b8:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800d7bc:	68fb      	ldr	r3, [r7, #12]
 800d7be:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800d7c0:	2301      	movs	r3, #1
  }
}
 800d7c2:	4618      	mov	r0, r3
 800d7c4:	3748      	adds	r7, #72	; 0x48
 800d7c6:	46bd      	mov	sp, r7
 800d7c8:	bd80      	pop	{r7, pc}
 800d7ca:	bf00      	nop
 800d7cc:	1fe00fff 	.word	0x1fe00fff
 800d7d0:	18000f3a 	.word	0x18000f3a

0800d7d4 <HAL_SD_WriteBlocks>:
  * @param  NumberOfBlocks: Number of SD blocks to write
  * @param  Timeout: Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks, uint32_t Timeout)
{
 800d7d4:	b580      	push	{r7, lr}
 800d7d6:	b092      	sub	sp, #72	; 0x48
 800d7d8:	af00      	add	r7, sp, #0
 800d7da:	60f8      	str	r0, [r7, #12]
 800d7dc:	60b9      	str	r1, [r7, #8]
 800d7de:	607a      	str	r2, [r7, #4]
 800d7e0:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800d7e2:	f7f7 fae7 	bl	8004db4 <HAL_GetTick>
 800d7e6:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t count, data, dataremaining;
  uint32_t add = BlockAdd;
 800d7e8:	687b      	ldr	r3, [r7, #4]
 800d7ea:	63bb      	str	r3, [r7, #56]	; 0x38
  uint8_t *tempbuff = pData;
 800d7ec:	68bb      	ldr	r3, [r7, #8]
 800d7ee:	637b      	str	r3, [r7, #52]	; 0x34

  if(NULL == pData)
 800d7f0:	68bb      	ldr	r3, [r7, #8]
 800d7f2:	2b00      	cmp	r3, #0
 800d7f4:	d107      	bne.n	800d806 <HAL_SD_WriteBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800d7f6:	68fb      	ldr	r3, [r7, #12]
 800d7f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d7fa:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800d7fe:	68fb      	ldr	r3, [r7, #12]
 800d800:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800d802:	2301      	movs	r3, #1
 800d804:	e16b      	b.n	800dade <HAL_SD_WriteBlocks+0x30a>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 800d806:	68fb      	ldr	r3, [r7, #12]
 800d808:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800d80c:	b2db      	uxtb	r3, r3
 800d80e:	2b01      	cmp	r3, #1
 800d810:	f040 815e 	bne.w	800dad0 <HAL_SD_WriteBlocks+0x2fc>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800d814:	68fb      	ldr	r3, [r7, #12]
 800d816:	2200      	movs	r2, #0
 800d818:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800d81a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800d81c:	683b      	ldr	r3, [r7, #0]
 800d81e:	441a      	add	r2, r3
 800d820:	68fb      	ldr	r3, [r7, #12]
 800d822:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d824:	429a      	cmp	r2, r3
 800d826:	d907      	bls.n	800d838 <HAL_SD_WriteBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800d828:	68fb      	ldr	r3, [r7, #12]
 800d82a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d82c:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800d830:	68fb      	ldr	r3, [r7, #12]
 800d832:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 800d834:	2301      	movs	r3, #1
 800d836:	e152      	b.n	800dade <HAL_SD_WriteBlocks+0x30a>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 800d838:	68fb      	ldr	r3, [r7, #12]
 800d83a:	2203      	movs	r2, #3
 800d83c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 800d840:	68fb      	ldr	r3, [r7, #12]
 800d842:	681b      	ldr	r3, [r3, #0]
 800d844:	2200      	movs	r2, #0
 800d846:	62da      	str	r2, [r3, #44]	; 0x2c

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800d848:	68fb      	ldr	r3, [r7, #12]
 800d84a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d84c:	2b01      	cmp	r3, #1
 800d84e:	d002      	beq.n	800d856 <HAL_SD_WriteBlocks+0x82>
    {
      add *= 512U;
 800d850:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d852:	025b      	lsls	r3, r3, #9
 800d854:	63bb      	str	r3, [r7, #56]	; 0x38
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800d856:	f04f 33ff 	mov.w	r3, #4294967295
 800d85a:	61bb      	str	r3, [r7, #24]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 800d85c:	683b      	ldr	r3, [r7, #0]
 800d85e:	025b      	lsls	r3, r3, #9
 800d860:	61fb      	str	r3, [r7, #28]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 800d862:	2390      	movs	r3, #144	; 0x90
 800d864:	623b      	str	r3, [r7, #32]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_CARD;
 800d866:	2300      	movs	r3, #0
 800d868:	627b      	str	r3, [r7, #36]	; 0x24
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800d86a:	2300      	movs	r3, #0
 800d86c:	62bb      	str	r3, [r7, #40]	; 0x28
    config.DPSM          = SDMMC_DPSM_DISABLE;
 800d86e:	2300      	movs	r3, #0
 800d870:	62fb      	str	r3, [r7, #44]	; 0x2c
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 800d872:	68fb      	ldr	r3, [r7, #12]
 800d874:	681b      	ldr	r3, [r3, #0]
 800d876:	f107 0218 	add.w	r2, r7, #24
 800d87a:	4611      	mov	r1, r2
 800d87c:	4618      	mov	r0, r3
 800d87e:	f004 f855 	bl	801192c <SDMMC_ConfigData>
    __SDMMC_CMDTRANS_ENABLE( hsd->Instance);
 800d882:	68fb      	ldr	r3, [r7, #12]
 800d884:	681b      	ldr	r3, [r3, #0]
 800d886:	68da      	ldr	r2, [r3, #12]
 800d888:	68fb      	ldr	r3, [r7, #12]
 800d88a:	681b      	ldr	r3, [r3, #0]
 800d88c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800d890:	60da      	str	r2, [r3, #12]

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 800d892:	683b      	ldr	r3, [r7, #0]
 800d894:	2b01      	cmp	r3, #1
 800d896:	d90a      	bls.n	800d8ae <HAL_SD_WriteBlocks+0xda>
    {
      hsd->Context = SD_CONTEXT_WRITE_MULTIPLE_BLOCK;
 800d898:	68fb      	ldr	r3, [r7, #12]
 800d89a:	2220      	movs	r2, #32
 800d89c:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 800d89e:	68fb      	ldr	r3, [r7, #12]
 800d8a0:	681b      	ldr	r3, [r3, #0]
 800d8a2:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800d8a4:	4618      	mov	r0, r3
 800d8a6:	f004 f8f9 	bl	8011a9c <SDMMC_CmdWriteMultiBlock>
 800d8aa:	6478      	str	r0, [r7, #68]	; 0x44
 800d8ac:	e009      	b.n	800d8c2 <HAL_SD_WriteBlocks+0xee>
    }
    else
    {
      hsd->Context = SD_CONTEXT_WRITE_SINGLE_BLOCK;
 800d8ae:	68fb      	ldr	r3, [r7, #12]
 800d8b0:	2210      	movs	r2, #16
 800d8b2:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 800d8b4:	68fb      	ldr	r3, [r7, #12]
 800d8b6:	681b      	ldr	r3, [r3, #0]
 800d8b8:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800d8ba:	4618      	mov	r0, r3
 800d8bc:	f004 f8cb 	bl	8011a56 <SDMMC_CmdWriteSingleBlock>
 800d8c0:	6478      	str	r0, [r7, #68]	; 0x44
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 800d8c2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d8c4:	2b00      	cmp	r3, #0
 800d8c6:	d012      	beq.n	800d8ee <HAL_SD_WriteBlocks+0x11a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800d8c8:	68fb      	ldr	r3, [r7, #12]
 800d8ca:	681b      	ldr	r3, [r3, #0]
 800d8cc:	4a86      	ldr	r2, [pc, #536]	; (800dae8 <HAL_SD_WriteBlocks+0x314>)
 800d8ce:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 800d8d0:	68fb      	ldr	r3, [r7, #12]
 800d8d2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800d8d4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d8d6:	431a      	orrs	r2, r3
 800d8d8:	68fb      	ldr	r3, [r7, #12]
 800d8da:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800d8dc:	68fb      	ldr	r3, [r7, #12]
 800d8de:	2201      	movs	r2, #1
 800d8e0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800d8e4:	68fb      	ldr	r3, [r7, #12]
 800d8e6:	2200      	movs	r2, #0
 800d8e8:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800d8ea:	2301      	movs	r3, #1
 800d8ec:	e0f7      	b.n	800dade <HAL_SD_WriteBlocks+0x30a>
    }

    /* Write block(s) in polling mode */
    dataremaining = config.DataLength;
 800d8ee:	69fb      	ldr	r3, [r7, #28]
 800d8f0:	63fb      	str	r3, [r7, #60]	; 0x3c
    while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 800d8f2:	e05c      	b.n	800d9ae <HAL_SD_WriteBlocks+0x1da>
    {
      if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXFIFOHE) && (dataremaining >= 32U))
 800d8f4:	68fb      	ldr	r3, [r7, #12]
 800d8f6:	681b      	ldr	r3, [r3, #0]
 800d8f8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d8fa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800d8fe:	2b00      	cmp	r3, #0
 800d900:	d037      	beq.n	800d972 <HAL_SD_WriteBlocks+0x19e>
 800d902:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d904:	2b1f      	cmp	r3, #31
 800d906:	d934      	bls.n	800d972 <HAL_SD_WriteBlocks+0x19e>
      {
        /* Write data to SDMMC Tx FIFO */
        for(count = 0U; count < 8U; count++)
 800d908:	2300      	movs	r3, #0
 800d90a:	643b      	str	r3, [r7, #64]	; 0x40
 800d90c:	e02b      	b.n	800d966 <HAL_SD_WriteBlocks+0x192>
        {
          data = (uint32_t)(*tempbuff);
 800d90e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d910:	781b      	ldrb	r3, [r3, #0]
 800d912:	617b      	str	r3, [r7, #20]
          tempbuff++;
 800d914:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d916:	3301      	adds	r3, #1
 800d918:	637b      	str	r3, [r7, #52]	; 0x34
          data |= ((uint32_t)(*tempbuff) << 8U);
 800d91a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d91c:	781b      	ldrb	r3, [r3, #0]
 800d91e:	021a      	lsls	r2, r3, #8
 800d920:	697b      	ldr	r3, [r7, #20]
 800d922:	4313      	orrs	r3, r2
 800d924:	617b      	str	r3, [r7, #20]
          tempbuff++;
 800d926:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d928:	3301      	adds	r3, #1
 800d92a:	637b      	str	r3, [r7, #52]	; 0x34
          data |= ((uint32_t)(*tempbuff) << 16U);
 800d92c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d92e:	781b      	ldrb	r3, [r3, #0]
 800d930:	041a      	lsls	r2, r3, #16
 800d932:	697b      	ldr	r3, [r7, #20]
 800d934:	4313      	orrs	r3, r2
 800d936:	617b      	str	r3, [r7, #20]
          tempbuff++;
 800d938:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d93a:	3301      	adds	r3, #1
 800d93c:	637b      	str	r3, [r7, #52]	; 0x34
          data |= ((uint32_t)(*tempbuff) << 24U);
 800d93e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d940:	781b      	ldrb	r3, [r3, #0]
 800d942:	061a      	lsls	r2, r3, #24
 800d944:	697b      	ldr	r3, [r7, #20]
 800d946:	4313      	orrs	r3, r2
 800d948:	617b      	str	r3, [r7, #20]
          tempbuff++;
 800d94a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d94c:	3301      	adds	r3, #1
 800d94e:	637b      	str	r3, [r7, #52]	; 0x34
          (void)SDMMC_WriteFIFO(hsd->Instance, &data);
 800d950:	68fb      	ldr	r3, [r7, #12]
 800d952:	681b      	ldr	r3, [r3, #0]
 800d954:	f107 0214 	add.w	r2, r7, #20
 800d958:	4611      	mov	r1, r2
 800d95a:	4618      	mov	r0, r3
 800d95c:	f003 ff6b 	bl	8011836 <SDMMC_WriteFIFO>
        for(count = 0U; count < 8U; count++)
 800d960:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d962:	3301      	adds	r3, #1
 800d964:	643b      	str	r3, [r7, #64]	; 0x40
 800d966:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d968:	2b07      	cmp	r3, #7
 800d96a:	d9d0      	bls.n	800d90e <HAL_SD_WriteBlocks+0x13a>
        }
        dataremaining -= 32U;
 800d96c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d96e:	3b20      	subs	r3, #32
 800d970:	63fb      	str	r3, [r7, #60]	; 0x3c
      }

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 800d972:	f7f7 fa1f 	bl	8004db4 <HAL_GetTick>
 800d976:	4602      	mov	r2, r0
 800d978:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d97a:	1ad3      	subs	r3, r2, r3
 800d97c:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800d97e:	429a      	cmp	r2, r3
 800d980:	d902      	bls.n	800d988 <HAL_SD_WriteBlocks+0x1b4>
 800d982:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d984:	2b00      	cmp	r3, #0
 800d986:	d112      	bne.n	800d9ae <HAL_SD_WriteBlocks+0x1da>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800d988:	68fb      	ldr	r3, [r7, #12]
 800d98a:	681b      	ldr	r3, [r3, #0]
 800d98c:	4a56      	ldr	r2, [pc, #344]	; (800dae8 <HAL_SD_WriteBlocks+0x314>)
 800d98e:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 800d990:	68fb      	ldr	r3, [r7, #12]
 800d992:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800d994:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d996:	431a      	orrs	r2, r3
 800d998:	68fb      	ldr	r3, [r7, #12]
 800d99a:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 800d99c:	68fb      	ldr	r3, [r7, #12]
 800d99e:	2201      	movs	r2, #1
 800d9a0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 800d9a4:	68fb      	ldr	r3, [r7, #12]
 800d9a6:	2200      	movs	r2, #0
 800d9a8:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_TIMEOUT;
 800d9aa:	2303      	movs	r3, #3
 800d9ac:	e097      	b.n	800dade <HAL_SD_WriteBlocks+0x30a>
    while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 800d9ae:	68fb      	ldr	r3, [r7, #12]
 800d9b0:	681b      	ldr	r3, [r3, #0]
 800d9b2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d9b4:	f403 738d 	and.w	r3, r3, #282	; 0x11a
 800d9b8:	2b00      	cmp	r3, #0
 800d9ba:	d09b      	beq.n	800d8f4 <HAL_SD_WriteBlocks+0x120>
      }
    }
    __SDMMC_CMDTRANS_DISABLE( hsd->Instance);
 800d9bc:	68fb      	ldr	r3, [r7, #12]
 800d9be:	681b      	ldr	r3, [r3, #0]
 800d9c0:	68da      	ldr	r2, [r3, #12]
 800d9c2:	68fb      	ldr	r3, [r7, #12]
 800d9c4:	681b      	ldr	r3, [r3, #0]
 800d9c6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800d9ca:	60da      	str	r2, [r3, #12]

    /* Send stop transmission command in case of multiblock write */
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 800d9cc:	68fb      	ldr	r3, [r7, #12]
 800d9ce:	681b      	ldr	r3, [r3, #0]
 800d9d0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d9d2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d9d6:	2b00      	cmp	r3, #0
 800d9d8:	d022      	beq.n	800da20 <HAL_SD_WriteBlocks+0x24c>
 800d9da:	683b      	ldr	r3, [r7, #0]
 800d9dc:	2b01      	cmp	r3, #1
 800d9de:	d91f      	bls.n	800da20 <HAL_SD_WriteBlocks+0x24c>
    {
      if(hsd->SdCard.CardType != CARD_SECURED)
 800d9e0:	68fb      	ldr	r3, [r7, #12]
 800d9e2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d9e4:	2b03      	cmp	r3, #3
 800d9e6:	d01b      	beq.n	800da20 <HAL_SD_WriteBlocks+0x24c>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800d9e8:	68fb      	ldr	r3, [r7, #12]
 800d9ea:	681b      	ldr	r3, [r3, #0]
 800d9ec:	4618      	mov	r0, r3
 800d9ee:	f004 f879 	bl	8011ae4 <SDMMC_CmdStopTransfer>
 800d9f2:	6478      	str	r0, [r7, #68]	; 0x44
        if(errorstate != HAL_SD_ERROR_NONE)
 800d9f4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d9f6:	2b00      	cmp	r3, #0
 800d9f8:	d012      	beq.n	800da20 <HAL_SD_WriteBlocks+0x24c>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800d9fa:	68fb      	ldr	r3, [r7, #12]
 800d9fc:	681b      	ldr	r3, [r3, #0]
 800d9fe:	4a3a      	ldr	r2, [pc, #232]	; (800dae8 <HAL_SD_WriteBlocks+0x314>)
 800da00:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->ErrorCode |= errorstate;
 800da02:	68fb      	ldr	r3, [r7, #12]
 800da04:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800da06:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800da08:	431a      	orrs	r2, r3
 800da0a:	68fb      	ldr	r3, [r7, #12]
 800da0c:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->State = HAL_SD_STATE_READY;
 800da0e:	68fb      	ldr	r3, [r7, #12]
 800da10:	2201      	movs	r2, #1
 800da12:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          hsd->Context = SD_CONTEXT_NONE;
 800da16:	68fb      	ldr	r3, [r7, #12]
 800da18:	2200      	movs	r2, #0
 800da1a:	631a      	str	r2, [r3, #48]	; 0x30
          return HAL_ERROR;
 800da1c:	2301      	movs	r3, #1
 800da1e:	e05e      	b.n	800dade <HAL_SD_WriteBlocks+0x30a>
        }
      }
    }

    /* Get error state */
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 800da20:	68fb      	ldr	r3, [r7, #12]
 800da22:	681b      	ldr	r3, [r3, #0]
 800da24:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800da26:	f003 0308 	and.w	r3, r3, #8
 800da2a:	2b00      	cmp	r3, #0
 800da2c:	d012      	beq.n	800da54 <HAL_SD_WriteBlocks+0x280>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800da2e:	68fb      	ldr	r3, [r7, #12]
 800da30:	681b      	ldr	r3, [r3, #0]
 800da32:	4a2d      	ldr	r2, [pc, #180]	; (800dae8 <HAL_SD_WriteBlocks+0x314>)
 800da34:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 800da36:	68fb      	ldr	r3, [r7, #12]
 800da38:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800da3a:	f043 0208 	orr.w	r2, r3, #8
 800da3e:	68fb      	ldr	r3, [r7, #12]
 800da40:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800da42:	68fb      	ldr	r3, [r7, #12]
 800da44:	2201      	movs	r2, #1
 800da46:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800da4a:	68fb      	ldr	r3, [r7, #12]
 800da4c:	2200      	movs	r2, #0
 800da4e:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800da50:	2301      	movs	r3, #1
 800da52:	e044      	b.n	800dade <HAL_SD_WriteBlocks+0x30a>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 800da54:	68fb      	ldr	r3, [r7, #12]
 800da56:	681b      	ldr	r3, [r3, #0]
 800da58:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800da5a:	f003 0302 	and.w	r3, r3, #2
 800da5e:	2b00      	cmp	r3, #0
 800da60:	d012      	beq.n	800da88 <HAL_SD_WriteBlocks+0x2b4>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800da62:	68fb      	ldr	r3, [r7, #12]
 800da64:	681b      	ldr	r3, [r3, #0]
 800da66:	4a20      	ldr	r2, [pc, #128]	; (800dae8 <HAL_SD_WriteBlocks+0x314>)
 800da68:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 800da6a:	68fb      	ldr	r3, [r7, #12]
 800da6c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800da6e:	f043 0202 	orr.w	r2, r3, #2
 800da72:	68fb      	ldr	r3, [r7, #12]
 800da74:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800da76:	68fb      	ldr	r3, [r7, #12]
 800da78:	2201      	movs	r2, #1
 800da7a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800da7e:	68fb      	ldr	r3, [r7, #12]
 800da80:	2200      	movs	r2, #0
 800da82:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800da84:	2301      	movs	r3, #1
 800da86:	e02a      	b.n	800dade <HAL_SD_WriteBlocks+0x30a>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR))
 800da88:	68fb      	ldr	r3, [r7, #12]
 800da8a:	681b      	ldr	r3, [r3, #0]
 800da8c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800da8e:	f003 0310 	and.w	r3, r3, #16
 800da92:	2b00      	cmp	r3, #0
 800da94:	d012      	beq.n	800dabc <HAL_SD_WriteBlocks+0x2e8>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800da96:	68fb      	ldr	r3, [r7, #12]
 800da98:	681b      	ldr	r3, [r3, #0]
 800da9a:	4a13      	ldr	r2, [pc, #76]	; (800dae8 <HAL_SD_WriteBlocks+0x314>)
 800da9c:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 800da9e:	68fb      	ldr	r3, [r7, #12]
 800daa0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800daa2:	f043 0210 	orr.w	r2, r3, #16
 800daa6:	68fb      	ldr	r3, [r7, #12]
 800daa8:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800daaa:	68fb      	ldr	r3, [r7, #12]
 800daac:	2201      	movs	r2, #1
 800daae:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800dab2:	68fb      	ldr	r3, [r7, #12]
 800dab4:	2200      	movs	r2, #0
 800dab6:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800dab8:	2301      	movs	r3, #1
 800daba:	e010      	b.n	800dade <HAL_SD_WriteBlocks+0x30a>
    {
      /* Nothing to do */
    }

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800dabc:	68fb      	ldr	r3, [r7, #12]
 800dabe:	681b      	ldr	r3, [r3, #0]
 800dac0:	4a0a      	ldr	r2, [pc, #40]	; (800daec <HAL_SD_WriteBlocks+0x318>)
 800dac2:	639a      	str	r2, [r3, #56]	; 0x38

    hsd->State = HAL_SD_STATE_READY;
 800dac4:	68fb      	ldr	r3, [r7, #12]
 800dac6:	2201      	movs	r2, #1
 800dac8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_OK;
 800dacc:	2300      	movs	r3, #0
 800dace:	e006      	b.n	800dade <HAL_SD_WriteBlocks+0x30a>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 800dad0:	68fb      	ldr	r3, [r7, #12]
 800dad2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dad4:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800dad8:	68fb      	ldr	r3, [r7, #12]
 800dada:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800dadc:	2301      	movs	r3, #1
  }
}
 800dade:	4618      	mov	r0, r3
 800dae0:	3748      	adds	r7, #72	; 0x48
 800dae2:	46bd      	mov	sp, r7
 800dae4:	bd80      	pop	{r7, pc}
 800dae6:	bf00      	nop
 800dae8:	1fe00fff 	.word	0x1fe00fff
 800daec:	18000f3a 	.word	0x18000f3a

0800daf0 <HAL_SD_ReadBlocks_DMA>:
  * @param  BlockAdd: Block Address from where data is to be read
  * @param  NumberOfBlocks: Number of blocks to read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 800daf0:	b580      	push	{r7, lr}
 800daf2:	b08c      	sub	sp, #48	; 0x30
 800daf4:	af00      	add	r7, sp, #0
 800daf6:	60f8      	str	r0, [r7, #12]
 800daf8:	60b9      	str	r1, [r7, #8]
 800dafa:	607a      	str	r2, [r7, #4]
 800dafc:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 800dafe:	687b      	ldr	r3, [r7, #4]
 800db00:	62bb      	str	r3, [r7, #40]	; 0x28

  if(NULL == pData)
 800db02:	68bb      	ldr	r3, [r7, #8]
 800db04:	2b00      	cmp	r3, #0
 800db06:	d107      	bne.n	800db18 <HAL_SD_ReadBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800db08:	68fb      	ldr	r3, [r7, #12]
 800db0a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800db0c:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800db10:	68fb      	ldr	r3, [r7, #12]
 800db12:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800db14:	2301      	movs	r3, #1
 800db16:	e08d      	b.n	800dc34 <HAL_SD_ReadBlocks_DMA+0x144>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 800db18:	68fb      	ldr	r3, [r7, #12]
 800db1a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800db1e:	b2db      	uxtb	r3, r3
 800db20:	2b01      	cmp	r3, #1
 800db22:	f040 8086 	bne.w	800dc32 <HAL_SD_ReadBlocks_DMA+0x142>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800db26:	68fb      	ldr	r3, [r7, #12]
 800db28:	2200      	movs	r2, #0
 800db2a:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800db2c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800db2e:	683b      	ldr	r3, [r7, #0]
 800db30:	441a      	add	r2, r3
 800db32:	68fb      	ldr	r3, [r7, #12]
 800db34:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800db36:	429a      	cmp	r2, r3
 800db38:	d907      	bls.n	800db4a <HAL_SD_ReadBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800db3a:	68fb      	ldr	r3, [r7, #12]
 800db3c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800db3e:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800db42:	68fb      	ldr	r3, [r7, #12]
 800db44:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 800db46:	2301      	movs	r3, #1
 800db48:	e074      	b.n	800dc34 <HAL_SD_ReadBlocks_DMA+0x144>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 800db4a:	68fb      	ldr	r3, [r7, #12]
 800db4c:	2203      	movs	r2, #3
 800db4e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 800db52:	68fb      	ldr	r3, [r7, #12]
 800db54:	681b      	ldr	r3, [r3, #0]
 800db56:	2200      	movs	r2, #0
 800db58:	62da      	str	r2, [r3, #44]	; 0x2c

    hsd->pRxBuffPtr = pData;
 800db5a:	68fb      	ldr	r3, [r7, #12]
 800db5c:	68ba      	ldr	r2, [r7, #8]
 800db5e:	629a      	str	r2, [r3, #40]	; 0x28
    hsd->RxXferSize = BLOCKSIZE * NumberOfBlocks;
 800db60:	683b      	ldr	r3, [r7, #0]
 800db62:	025a      	lsls	r2, r3, #9
 800db64:	68fb      	ldr	r3, [r7, #12]
 800db66:	62da      	str	r2, [r3, #44]	; 0x2c

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800db68:	68fb      	ldr	r3, [r7, #12]
 800db6a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800db6c:	2b01      	cmp	r3, #1
 800db6e:	d002      	beq.n	800db76 <HAL_SD_ReadBlocks_DMA+0x86>
    {
      add *= 512U;
 800db70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800db72:	025b      	lsls	r3, r3, #9
 800db74:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800db76:	f04f 33ff 	mov.w	r3, #4294967295
 800db7a:	613b      	str	r3, [r7, #16]
    config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 800db7c:	683b      	ldr	r3, [r7, #0]
 800db7e:	025b      	lsls	r3, r3, #9
 800db80:	617b      	str	r3, [r7, #20]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 800db82:	2390      	movs	r3, #144	; 0x90
 800db84:	61bb      	str	r3, [r7, #24]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 800db86:	2302      	movs	r3, #2
 800db88:	61fb      	str	r3, [r7, #28]
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800db8a:	2300      	movs	r3, #0
 800db8c:	623b      	str	r3, [r7, #32]
    config.DPSM          = SDMMC_DPSM_DISABLE;
 800db8e:	2300      	movs	r3, #0
 800db90:	627b      	str	r3, [r7, #36]	; 0x24
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 800db92:	68fb      	ldr	r3, [r7, #12]
 800db94:	681b      	ldr	r3, [r3, #0]
 800db96:	f107 0210 	add.w	r2, r7, #16
 800db9a:	4611      	mov	r1, r2
 800db9c:	4618      	mov	r0, r3
 800db9e:	f003 fec5 	bl	801192c <SDMMC_ConfigData>

    __SDMMC_CMDTRANS_ENABLE( hsd->Instance);
 800dba2:	68fb      	ldr	r3, [r7, #12]
 800dba4:	681b      	ldr	r3, [r3, #0]
 800dba6:	68da      	ldr	r2, [r3, #12]
 800dba8:	68fb      	ldr	r3, [r7, #12]
 800dbaa:	681b      	ldr	r3, [r3, #0]
 800dbac:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800dbb0:	60da      	str	r2, [r3, #12]
    hsd->Instance->IDMABASE0 = (uint32_t) pData ;
 800dbb2:	68fb      	ldr	r3, [r7, #12]
 800dbb4:	681b      	ldr	r3, [r3, #0]
 800dbb6:	68ba      	ldr	r2, [r7, #8]
 800dbb8:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->Instance->IDMACTRL  = SDMMC_ENABLE_IDMA_SINGLE_BUFF;
 800dbba:	68fb      	ldr	r3, [r7, #12]
 800dbbc:	681b      	ldr	r3, [r3, #0]
 800dbbe:	2201      	movs	r2, #1
 800dbc0:	651a      	str	r2, [r3, #80]	; 0x50

    /* Read Blocks in DMA mode */
    if(NumberOfBlocks > 1U)
 800dbc2:	683b      	ldr	r3, [r7, #0]
 800dbc4:	2b01      	cmp	r3, #1
 800dbc6:	d90a      	bls.n	800dbde <HAL_SD_ReadBlocks_DMA+0xee>
    {
      hsd->Context = (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 800dbc8:	68fb      	ldr	r3, [r7, #12]
 800dbca:	2282      	movs	r2, #130	; 0x82
 800dbcc:	631a      	str	r2, [r3, #48]	; 0x30

      /* Read Multi Block command */
      errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 800dbce:	68fb      	ldr	r3, [r7, #12]
 800dbd0:	681b      	ldr	r3, [r3, #0]
 800dbd2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800dbd4:	4618      	mov	r0, r3
 800dbd6:	f003 ff1b 	bl	8011a10 <SDMMC_CmdReadMultiBlock>
 800dbda:	62f8      	str	r0, [r7, #44]	; 0x2c
 800dbdc:	e009      	b.n	800dbf2 <HAL_SD_ReadBlocks_DMA+0x102>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_READ_SINGLE_BLOCK | SD_CONTEXT_DMA);
 800dbde:	68fb      	ldr	r3, [r7, #12]
 800dbe0:	2281      	movs	r2, #129	; 0x81
 800dbe2:	631a      	str	r2, [r3, #48]	; 0x30

      /* Read Single Block command */
      errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 800dbe4:	68fb      	ldr	r3, [r7, #12]
 800dbe6:	681b      	ldr	r3, [r3, #0]
 800dbe8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800dbea:	4618      	mov	r0, r3
 800dbec:	f003 feed 	bl	80119ca <SDMMC_CmdReadSingleBlock>
 800dbf0:	62f8      	str	r0, [r7, #44]	; 0x2c
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 800dbf2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dbf4:	2b00      	cmp	r3, #0
 800dbf6:	d012      	beq.n	800dc1e <HAL_SD_ReadBlocks_DMA+0x12e>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800dbf8:	68fb      	ldr	r3, [r7, #12]
 800dbfa:	681b      	ldr	r3, [r3, #0]
 800dbfc:	4a0f      	ldr	r2, [pc, #60]	; (800dc3c <HAL_SD_ReadBlocks_DMA+0x14c>)
 800dbfe:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 800dc00:	68fb      	ldr	r3, [r7, #12]
 800dc02:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800dc04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dc06:	431a      	orrs	r2, r3
 800dc08:	68fb      	ldr	r3, [r7, #12]
 800dc0a:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800dc0c:	68fb      	ldr	r3, [r7, #12]
 800dc0e:	2201      	movs	r2, #1
 800dc10:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800dc14:	68fb      	ldr	r3, [r7, #12]
 800dc16:	2200      	movs	r2, #0
 800dc18:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800dc1a:	2301      	movs	r3, #1
 800dc1c:	e00a      	b.n	800dc34 <HAL_SD_ReadBlocks_DMA+0x144>
    }

    /* Enable transfer interrupts */
    __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_RXOVERR | SDMMC_IT_DATAEND));
 800dc1e:	68fb      	ldr	r3, [r7, #12]
 800dc20:	681b      	ldr	r3, [r3, #0]
 800dc22:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800dc24:	68fb      	ldr	r3, [r7, #12]
 800dc26:	681b      	ldr	r3, [r3, #0]
 800dc28:	f442 7295 	orr.w	r2, r2, #298	; 0x12a
 800dc2c:	63da      	str	r2, [r3, #60]	; 0x3c


    return HAL_OK;
 800dc2e:	2300      	movs	r3, #0
 800dc30:	e000      	b.n	800dc34 <HAL_SD_ReadBlocks_DMA+0x144>
  }
  else
  {
    return HAL_BUSY;
 800dc32:	2302      	movs	r3, #2
  }
}
 800dc34:	4618      	mov	r0, r3
 800dc36:	3730      	adds	r7, #48	; 0x30
 800dc38:	46bd      	mov	sp, r7
 800dc3a:	bd80      	pop	{r7, pc}
 800dc3c:	1fe00fff 	.word	0x1fe00fff

0800dc40 <HAL_SD_WriteBlocks_DMA>:
  * @param  BlockAdd: Block Address where data will be written
  * @param  NumberOfBlocks: Number of blocks to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 800dc40:	b580      	push	{r7, lr}
 800dc42:	b08c      	sub	sp, #48	; 0x30
 800dc44:	af00      	add	r7, sp, #0
 800dc46:	60f8      	str	r0, [r7, #12]
 800dc48:	60b9      	str	r1, [r7, #8]
 800dc4a:	607a      	str	r2, [r7, #4]
 800dc4c:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 800dc4e:	687b      	ldr	r3, [r7, #4]
 800dc50:	62bb      	str	r3, [r7, #40]	; 0x28

  if(NULL == pData)
 800dc52:	68bb      	ldr	r3, [r7, #8]
 800dc54:	2b00      	cmp	r3, #0
 800dc56:	d107      	bne.n	800dc68 <HAL_SD_WriteBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800dc58:	68fb      	ldr	r3, [r7, #12]
 800dc5a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dc5c:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800dc60:	68fb      	ldr	r3, [r7, #12]
 800dc62:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800dc64:	2301      	movs	r3, #1
 800dc66:	e08d      	b.n	800dd84 <HAL_SD_WriteBlocks_DMA+0x144>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 800dc68:	68fb      	ldr	r3, [r7, #12]
 800dc6a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800dc6e:	b2db      	uxtb	r3, r3
 800dc70:	2b01      	cmp	r3, #1
 800dc72:	f040 8086 	bne.w	800dd82 <HAL_SD_WriteBlocks_DMA+0x142>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800dc76:	68fb      	ldr	r3, [r7, #12]
 800dc78:	2200      	movs	r2, #0
 800dc7a:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800dc7c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800dc7e:	683b      	ldr	r3, [r7, #0]
 800dc80:	441a      	add	r2, r3
 800dc82:	68fb      	ldr	r3, [r7, #12]
 800dc84:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800dc86:	429a      	cmp	r2, r3
 800dc88:	d907      	bls.n	800dc9a <HAL_SD_WriteBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800dc8a:	68fb      	ldr	r3, [r7, #12]
 800dc8c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dc8e:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800dc92:	68fb      	ldr	r3, [r7, #12]
 800dc94:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 800dc96:	2301      	movs	r3, #1
 800dc98:	e074      	b.n	800dd84 <HAL_SD_WriteBlocks_DMA+0x144>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 800dc9a:	68fb      	ldr	r3, [r7, #12]
 800dc9c:	2203      	movs	r2, #3
 800dc9e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 800dca2:	68fb      	ldr	r3, [r7, #12]
 800dca4:	681b      	ldr	r3, [r3, #0]
 800dca6:	2200      	movs	r2, #0
 800dca8:	62da      	str	r2, [r3, #44]	; 0x2c

    hsd->pTxBuffPtr = pData;
 800dcaa:	68fb      	ldr	r3, [r7, #12]
 800dcac:	68ba      	ldr	r2, [r7, #8]
 800dcae:	621a      	str	r2, [r3, #32]
    hsd->TxXferSize = BLOCKSIZE * NumberOfBlocks;
 800dcb0:	683b      	ldr	r3, [r7, #0]
 800dcb2:	025a      	lsls	r2, r3, #9
 800dcb4:	68fb      	ldr	r3, [r7, #12]
 800dcb6:	625a      	str	r2, [r3, #36]	; 0x24

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800dcb8:	68fb      	ldr	r3, [r7, #12]
 800dcba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800dcbc:	2b01      	cmp	r3, #1
 800dcbe:	d002      	beq.n	800dcc6 <HAL_SD_WriteBlocks_DMA+0x86>
    {
      add *= 512U;
 800dcc0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dcc2:	025b      	lsls	r3, r3, #9
 800dcc4:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800dcc6:	f04f 33ff 	mov.w	r3, #4294967295
 800dcca:	613b      	str	r3, [r7, #16]
    config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 800dccc:	683b      	ldr	r3, [r7, #0]
 800dcce:	025b      	lsls	r3, r3, #9
 800dcd0:	617b      	str	r3, [r7, #20]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 800dcd2:	2390      	movs	r3, #144	; 0x90
 800dcd4:	61bb      	str	r3, [r7, #24]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_CARD;
 800dcd6:	2300      	movs	r3, #0
 800dcd8:	61fb      	str	r3, [r7, #28]
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800dcda:	2300      	movs	r3, #0
 800dcdc:	623b      	str	r3, [r7, #32]
    config.DPSM          = SDMMC_DPSM_DISABLE;
 800dcde:	2300      	movs	r3, #0
 800dce0:	627b      	str	r3, [r7, #36]	; 0x24
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 800dce2:	68fb      	ldr	r3, [r7, #12]
 800dce4:	681b      	ldr	r3, [r3, #0]
 800dce6:	f107 0210 	add.w	r2, r7, #16
 800dcea:	4611      	mov	r1, r2
 800dcec:	4618      	mov	r0, r3
 800dcee:	f003 fe1d 	bl	801192c <SDMMC_ConfigData>


    __SDMMC_CMDTRANS_ENABLE( hsd->Instance);
 800dcf2:	68fb      	ldr	r3, [r7, #12]
 800dcf4:	681b      	ldr	r3, [r3, #0]
 800dcf6:	68da      	ldr	r2, [r3, #12]
 800dcf8:	68fb      	ldr	r3, [r7, #12]
 800dcfa:	681b      	ldr	r3, [r3, #0]
 800dcfc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800dd00:	60da      	str	r2, [r3, #12]

    hsd->Instance->IDMABASE0 = (uint32_t) pData ;
 800dd02:	68fb      	ldr	r3, [r7, #12]
 800dd04:	681b      	ldr	r3, [r3, #0]
 800dd06:	68ba      	ldr	r2, [r7, #8]
 800dd08:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->Instance->IDMACTRL  = SDMMC_ENABLE_IDMA_SINGLE_BUFF;
 800dd0a:	68fb      	ldr	r3, [r7, #12]
 800dd0c:	681b      	ldr	r3, [r3, #0]
 800dd0e:	2201      	movs	r2, #1
 800dd10:	651a      	str	r2, [r3, #80]	; 0x50

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 800dd12:	683b      	ldr	r3, [r7, #0]
 800dd14:	2b01      	cmp	r3, #1
 800dd16:	d90a      	bls.n	800dd2e <HAL_SD_WriteBlocks_DMA+0xee>
    {
      hsd->Context = (SD_CONTEXT_WRITE_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 800dd18:	68fb      	ldr	r3, [r7, #12]
 800dd1a:	22a0      	movs	r2, #160	; 0xa0
 800dd1c:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 800dd1e:	68fb      	ldr	r3, [r7, #12]
 800dd20:	681b      	ldr	r3, [r3, #0]
 800dd22:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800dd24:	4618      	mov	r0, r3
 800dd26:	f003 feb9 	bl	8011a9c <SDMMC_CmdWriteMultiBlock>
 800dd2a:	62f8      	str	r0, [r7, #44]	; 0x2c
 800dd2c:	e009      	b.n	800dd42 <HAL_SD_WriteBlocks_DMA+0x102>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_WRITE_SINGLE_BLOCK | SD_CONTEXT_DMA);
 800dd2e:	68fb      	ldr	r3, [r7, #12]
 800dd30:	2290      	movs	r2, #144	; 0x90
 800dd32:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 800dd34:	68fb      	ldr	r3, [r7, #12]
 800dd36:	681b      	ldr	r3, [r3, #0]
 800dd38:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800dd3a:	4618      	mov	r0, r3
 800dd3c:	f003 fe8b 	bl	8011a56 <SDMMC_CmdWriteSingleBlock>
 800dd40:	62f8      	str	r0, [r7, #44]	; 0x2c
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 800dd42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dd44:	2b00      	cmp	r3, #0
 800dd46:	d012      	beq.n	800dd6e <HAL_SD_WriteBlocks_DMA+0x12e>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800dd48:	68fb      	ldr	r3, [r7, #12]
 800dd4a:	681b      	ldr	r3, [r3, #0]
 800dd4c:	4a0f      	ldr	r2, [pc, #60]	; (800dd8c <HAL_SD_WriteBlocks_DMA+0x14c>)
 800dd4e:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 800dd50:	68fb      	ldr	r3, [r7, #12]
 800dd52:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800dd54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dd56:	431a      	orrs	r2, r3
 800dd58:	68fb      	ldr	r3, [r7, #12]
 800dd5a:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800dd5c:	68fb      	ldr	r3, [r7, #12]
 800dd5e:	2201      	movs	r2, #1
 800dd60:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800dd64:	68fb      	ldr	r3, [r7, #12]
 800dd66:	2200      	movs	r2, #0
 800dd68:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800dd6a:	2301      	movs	r3, #1
 800dd6c:	e00a      	b.n	800dd84 <HAL_SD_WriteBlocks_DMA+0x144>
    }

    /* Enable transfer interrupts */
    __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_TXUNDERR | SDMMC_IT_DATAEND));
 800dd6e:	68fb      	ldr	r3, [r7, #12]
 800dd70:	681b      	ldr	r3, [r3, #0]
 800dd72:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800dd74:	68fb      	ldr	r3, [r7, #12]
 800dd76:	681b      	ldr	r3, [r3, #0]
 800dd78:	f442 728d 	orr.w	r2, r2, #282	; 0x11a
 800dd7c:	63da      	str	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800dd7e:	2300      	movs	r3, #0
 800dd80:	e000      	b.n	800dd84 <HAL_SD_WriteBlocks_DMA+0x144>
  }
  else
  {
    return HAL_BUSY;
 800dd82:	2302      	movs	r3, #2
  }
}
 800dd84:	4618      	mov	r0, r3
 800dd86:	3730      	adds	r7, #48	; 0x30
 800dd88:	46bd      	mov	sp, r7
 800dd8a:	bd80      	pop	{r7, pc}
 800dd8c:	1fe00fff 	.word	0x1fe00fff

0800dd90 <HAL_SD_IRQHandler>:
  * @brief  This function handles SD card interrupt request.
  * @param  hsd: Pointer to SD handle
  * @retval None
  */
void HAL_SD_IRQHandler(SD_HandleTypeDef *hsd)
{
 800dd90:	b580      	push	{r7, lr}
 800dd92:	b084      	sub	sp, #16
 800dd94:	af00      	add	r7, sp, #0
 800dd96:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  uint32_t context = hsd->Context;
 800dd98:	687b      	ldr	r3, [r7, #4]
 800dd9a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800dd9c:	60fb      	str	r3, [r7, #12]

  /* Check for SDMMC interrupt flags */
  if((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 800dd9e:	687b      	ldr	r3, [r7, #4]
 800dda0:	681b      	ldr	r3, [r3, #0]
 800dda2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800dda4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800dda8:	2b00      	cmp	r3, #0
 800ddaa:	d008      	beq.n	800ddbe <HAL_SD_IRQHandler+0x2e>
 800ddac:	68fb      	ldr	r3, [r7, #12]
 800ddae:	f003 0308 	and.w	r3, r3, #8
 800ddb2:	2b00      	cmp	r3, #0
 800ddb4:	d003      	beq.n	800ddbe <HAL_SD_IRQHandler+0x2e>
  {
    SD_Read_IT(hsd);
 800ddb6:	6878      	ldr	r0, [r7, #4]
 800ddb8:	f001 f92a 	bl	800f010 <SD_Read_IT>
 800ddbc:	e19a      	b.n	800e0f4 <HAL_SD_IRQHandler+0x364>
  }

  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) != RESET)
 800ddbe:	687b      	ldr	r3, [r7, #4]
 800ddc0:	681b      	ldr	r3, [r3, #0]
 800ddc2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ddc4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ddc8:	2b00      	cmp	r3, #0
 800ddca:	f000 80ac 	beq.w	800df26 <HAL_SD_IRQHandler+0x196>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DATAEND);
 800ddce:	687b      	ldr	r3, [r7, #4]
 800ddd0:	681b      	ldr	r3, [r3, #0]
 800ddd2:	f44f 7280 	mov.w	r2, #256	; 0x100
 800ddd6:	639a      	str	r2, [r3, #56]	; 0x38

    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND  | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT |\
 800ddd8:	687b      	ldr	r3, [r7, #4]
 800ddda:	681b      	ldr	r3, [r3, #0]
 800dddc:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 800ddde:	687b      	ldr	r3, [r7, #4]
 800dde0:	681a      	ldr	r2, [r3, #0]
 800dde2:	4b9d      	ldr	r3, [pc, #628]	; (800e058 <HAL_SD_IRQHandler+0x2c8>)
 800dde4:	400b      	ands	r3, r1
 800dde6:	63d3      	str	r3, [r2, #60]	; 0x3c
                             SDMMC_IT_TXUNDERR | SDMMC_IT_RXOVERR  | SDMMC_IT_TXFIFOHE |\
                             SDMMC_IT_RXFIFOHF);

    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_IDMABTC);
 800dde8:	687b      	ldr	r3, [r7, #4]
 800ddea:	681b      	ldr	r3, [r3, #0]
 800ddec:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800ddee:	687b      	ldr	r3, [r7, #4]
 800ddf0:	681b      	ldr	r3, [r3, #0]
 800ddf2:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 800ddf6:	63da      	str	r2, [r3, #60]	; 0x3c
    __SDMMC_CMDTRANS_DISABLE( hsd->Instance);
 800ddf8:	687b      	ldr	r3, [r7, #4]
 800ddfa:	681b      	ldr	r3, [r3, #0]
 800ddfc:	68da      	ldr	r2, [r3, #12]
 800ddfe:	687b      	ldr	r3, [r7, #4]
 800de00:	681b      	ldr	r3, [r3, #0]
 800de02:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800de06:	60da      	str	r2, [r3, #12]

    if((context & SD_CONTEXT_IT) != 0U)
 800de08:	68fb      	ldr	r3, [r7, #12]
 800de0a:	f003 0308 	and.w	r3, r3, #8
 800de0e:	2b00      	cmp	r3, #0
 800de10:	d038      	beq.n	800de84 <HAL_SD_IRQHandler+0xf4>
    {
      if(((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 800de12:	68fb      	ldr	r3, [r7, #12]
 800de14:	f003 0302 	and.w	r3, r3, #2
 800de18:	2b00      	cmp	r3, #0
 800de1a:	d104      	bne.n	800de26 <HAL_SD_IRQHandler+0x96>
 800de1c:	68fb      	ldr	r3, [r7, #12]
 800de1e:	f003 0320 	and.w	r3, r3, #32
 800de22:	2b00      	cmp	r3, #0
 800de24:	d011      	beq.n	800de4a <HAL_SD_IRQHandler+0xba>
      {
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800de26:	687b      	ldr	r3, [r7, #4]
 800de28:	681b      	ldr	r3, [r3, #0]
 800de2a:	4618      	mov	r0, r3
 800de2c:	f003 fe5a 	bl	8011ae4 <SDMMC_CmdStopTransfer>
 800de30:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 800de32:	68bb      	ldr	r3, [r7, #8]
 800de34:	2b00      	cmp	r3, #0
 800de36:	d008      	beq.n	800de4a <HAL_SD_IRQHandler+0xba>
        {
          hsd->ErrorCode |= errorstate;
 800de38:	687b      	ldr	r3, [r7, #4]
 800de3a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800de3c:	68bb      	ldr	r3, [r7, #8]
 800de3e:	431a      	orrs	r2, r3
 800de40:	687b      	ldr	r3, [r7, #4]
 800de42:	639a      	str	r2, [r3, #56]	; 0x38
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
          hsd->ErrorCallback(hsd);
#else
          HAL_SD_ErrorCallback(hsd);
 800de44:	6878      	ldr	r0, [r7, #4]
 800de46:	f000 f959 	bl	800e0fc <HAL_SD_ErrorCallback>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
        }
      }

      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800de4a:	687b      	ldr	r3, [r7, #4]
 800de4c:	681b      	ldr	r3, [r3, #0]
 800de4e:	4a83      	ldr	r2, [pc, #524]	; (800e05c <HAL_SD_IRQHandler+0x2cc>)
 800de50:	639a      	str	r2, [r3, #56]	; 0x38

      hsd->State = HAL_SD_STATE_READY;
 800de52:	687b      	ldr	r3, [r7, #4]
 800de54:	2201      	movs	r2, #1
 800de56:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800de5a:	687b      	ldr	r3, [r7, #4]
 800de5c:	2200      	movs	r2, #0
 800de5e:	631a      	str	r2, [r3, #48]	; 0x30
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 800de60:	68fb      	ldr	r3, [r7, #12]
 800de62:	f003 0301 	and.w	r3, r3, #1
 800de66:	2b00      	cmp	r3, #0
 800de68:	d104      	bne.n	800de74 <HAL_SD_IRQHandler+0xe4>
 800de6a:	68fb      	ldr	r3, [r7, #12]
 800de6c:	f003 0302 	and.w	r3, r3, #2
 800de70:	2b00      	cmp	r3, #0
 800de72:	d003      	beq.n	800de7c <HAL_SD_IRQHandler+0xec>
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->RxCpltCallback(hsd);
#else
        HAL_SD_RxCpltCallback(hsd);
 800de74:	6878      	ldr	r0, [r7, #4]
 800de76:	f005 fe4b 	bl	8013b10 <HAL_SD_RxCpltCallback>
 800de7a:	e13b      	b.n	800e0f4 <HAL_SD_IRQHandler+0x364>
      else
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->TxCpltCallback(hsd);
#else
        HAL_SD_TxCpltCallback(hsd);
 800de7c:	6878      	ldr	r0, [r7, #4]
 800de7e:	f005 fe3d 	bl	8013afc <HAL_SD_TxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 800de82:	e137      	b.n	800e0f4 <HAL_SD_IRQHandler+0x364>
    else if((context & SD_CONTEXT_DMA) != 0U)
 800de84:	68fb      	ldr	r3, [r7, #12]
 800de86:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800de8a:	2b00      	cmp	r3, #0
 800de8c:	f000 8132 	beq.w	800e0f4 <HAL_SD_IRQHandler+0x364>
      hsd->Instance->DLEN = 0;
 800de90:	687b      	ldr	r3, [r7, #4]
 800de92:	681b      	ldr	r3, [r3, #0]
 800de94:	2200      	movs	r2, #0
 800de96:	629a      	str	r2, [r3, #40]	; 0x28
      hsd->Instance->DCTRL = 0;
 800de98:	687b      	ldr	r3, [r7, #4]
 800de9a:	681b      	ldr	r3, [r3, #0]
 800de9c:	2200      	movs	r2, #0
 800de9e:	62da      	str	r2, [r3, #44]	; 0x2c
      hsd->Instance->IDMACTRL = SDMMC_DISABLE_IDMA;
 800dea0:	687b      	ldr	r3, [r7, #4]
 800dea2:	681b      	ldr	r3, [r3, #0]
 800dea4:	2200      	movs	r2, #0
 800dea6:	651a      	str	r2, [r3, #80]	; 0x50
      if(((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 800dea8:	68fb      	ldr	r3, [r7, #12]
 800deaa:	f003 0302 	and.w	r3, r3, #2
 800deae:	2b00      	cmp	r3, #0
 800deb0:	d104      	bne.n	800debc <HAL_SD_IRQHandler+0x12c>
 800deb2:	68fb      	ldr	r3, [r7, #12]
 800deb4:	f003 0320 	and.w	r3, r3, #32
 800deb8:	2b00      	cmp	r3, #0
 800deba:	d011      	beq.n	800dee0 <HAL_SD_IRQHandler+0x150>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800debc:	687b      	ldr	r3, [r7, #4]
 800debe:	681b      	ldr	r3, [r3, #0]
 800dec0:	4618      	mov	r0, r3
 800dec2:	f003 fe0f 	bl	8011ae4 <SDMMC_CmdStopTransfer>
 800dec6:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 800dec8:	68bb      	ldr	r3, [r7, #8]
 800deca:	2b00      	cmp	r3, #0
 800decc:	d008      	beq.n	800dee0 <HAL_SD_IRQHandler+0x150>
          hsd->ErrorCode |= errorstate;
 800dece:	687b      	ldr	r3, [r7, #4]
 800ded0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800ded2:	68bb      	ldr	r3, [r7, #8]
 800ded4:	431a      	orrs	r2, r3
 800ded6:	687b      	ldr	r3, [r7, #4]
 800ded8:	639a      	str	r2, [r3, #56]	; 0x38
          HAL_SD_ErrorCallback(hsd);
 800deda:	6878      	ldr	r0, [r7, #4]
 800dedc:	f000 f90e 	bl	800e0fc <HAL_SD_ErrorCallback>
      hsd->State = HAL_SD_STATE_READY;
 800dee0:	687b      	ldr	r3, [r7, #4]
 800dee2:	2201      	movs	r2, #1
 800dee4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800dee8:	687b      	ldr	r3, [r7, #4]
 800deea:	2200      	movs	r2, #0
 800deec:	631a      	str	r2, [r3, #48]	; 0x30
      if(((context & SD_CONTEXT_WRITE_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 800deee:	68fb      	ldr	r3, [r7, #12]
 800def0:	f003 0310 	and.w	r3, r3, #16
 800def4:	2b00      	cmp	r3, #0
 800def6:	d104      	bne.n	800df02 <HAL_SD_IRQHandler+0x172>
 800def8:	68fb      	ldr	r3, [r7, #12]
 800defa:	f003 0320 	and.w	r3, r3, #32
 800defe:	2b00      	cmp	r3, #0
 800df00:	d002      	beq.n	800df08 <HAL_SD_IRQHandler+0x178>
        HAL_SD_TxCpltCallback(hsd);
 800df02:	6878      	ldr	r0, [r7, #4]
 800df04:	f005 fdfa 	bl	8013afc <HAL_SD_TxCpltCallback>
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 800df08:	68fb      	ldr	r3, [r7, #12]
 800df0a:	f003 0301 	and.w	r3, r3, #1
 800df0e:	2b00      	cmp	r3, #0
 800df10:	d105      	bne.n	800df1e <HAL_SD_IRQHandler+0x18e>
 800df12:	68fb      	ldr	r3, [r7, #12]
 800df14:	f003 0302 	and.w	r3, r3, #2
 800df18:	2b00      	cmp	r3, #0
 800df1a:	f000 80eb 	beq.w	800e0f4 <HAL_SD_IRQHandler+0x364>
        HAL_SD_RxCpltCallback(hsd);
 800df1e:	6878      	ldr	r0, [r7, #4]
 800df20:	f005 fdf6 	bl	8013b10 <HAL_SD_RxCpltCallback>
}
 800df24:	e0e6      	b.n	800e0f4 <HAL_SD_IRQHandler+0x364>
  else if((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXFIFOHE) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 800df26:	687b      	ldr	r3, [r7, #4]
 800df28:	681b      	ldr	r3, [r3, #0]
 800df2a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800df2c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800df30:	2b00      	cmp	r3, #0
 800df32:	d008      	beq.n	800df46 <HAL_SD_IRQHandler+0x1b6>
 800df34:	68fb      	ldr	r3, [r7, #12]
 800df36:	f003 0308 	and.w	r3, r3, #8
 800df3a:	2b00      	cmp	r3, #0
 800df3c:	d003      	beq.n	800df46 <HAL_SD_IRQHandler+0x1b6>
    SD_Write_IT(hsd);
 800df3e:	6878      	ldr	r0, [r7, #4]
 800df40:	f001 f8ac 	bl	800f09c <SD_Write_IT>
 800df44:	e0d6      	b.n	800e0f4 <HAL_SD_IRQHandler+0x364>
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_RXOVERR | SDMMC_FLAG_TXUNDERR) != RESET)
 800df46:	687b      	ldr	r3, [r7, #4]
 800df48:	681b      	ldr	r3, [r3, #0]
 800df4a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800df4c:	f003 033a 	and.w	r3, r3, #58	; 0x3a
 800df50:	2b00      	cmp	r3, #0
 800df52:	f000 80a2 	beq.w	800e09a <HAL_SD_IRQHandler+0x30a>
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_IT_DCRCFAIL) != RESET)
 800df56:	687b      	ldr	r3, [r7, #4]
 800df58:	681b      	ldr	r3, [r3, #0]
 800df5a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800df5c:	f003 0302 	and.w	r3, r3, #2
 800df60:	2b00      	cmp	r3, #0
 800df62:	d005      	beq.n	800df70 <HAL_SD_IRQHandler+0x1e0>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 800df64:	687b      	ldr	r3, [r7, #4]
 800df66:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800df68:	f043 0202 	orr.w	r2, r3, #2
 800df6c:	687b      	ldr	r3, [r7, #4]
 800df6e:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_IT_DTIMEOUT) != RESET)
 800df70:	687b      	ldr	r3, [r7, #4]
 800df72:	681b      	ldr	r3, [r3, #0]
 800df74:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800df76:	f003 0308 	and.w	r3, r3, #8
 800df7a:	2b00      	cmp	r3, #0
 800df7c:	d005      	beq.n	800df8a <HAL_SD_IRQHandler+0x1fa>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 800df7e:	687b      	ldr	r3, [r7, #4]
 800df80:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800df82:	f043 0208 	orr.w	r2, r3, #8
 800df86:	687b      	ldr	r3, [r7, #4]
 800df88:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_IT_RXOVERR) != RESET)
 800df8a:	687b      	ldr	r3, [r7, #4]
 800df8c:	681b      	ldr	r3, [r3, #0]
 800df8e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800df90:	f003 0320 	and.w	r3, r3, #32
 800df94:	2b00      	cmp	r3, #0
 800df96:	d005      	beq.n	800dfa4 <HAL_SD_IRQHandler+0x214>
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 800df98:	687b      	ldr	r3, [r7, #4]
 800df9a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800df9c:	f043 0220 	orr.w	r2, r3, #32
 800dfa0:	687b      	ldr	r3, [r7, #4]
 800dfa2:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_IT_TXUNDERR) != RESET)
 800dfa4:	687b      	ldr	r3, [r7, #4]
 800dfa6:	681b      	ldr	r3, [r3, #0]
 800dfa8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800dfaa:	f003 0310 	and.w	r3, r3, #16
 800dfae:	2b00      	cmp	r3, #0
 800dfb0:	d005      	beq.n	800dfbe <HAL_SD_IRQHandler+0x22e>
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 800dfb2:	687b      	ldr	r3, [r7, #4]
 800dfb4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dfb6:	f043 0210 	orr.w	r2, r3, #16
 800dfba:	687b      	ldr	r3, [r7, #4]
 800dfbc:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800dfbe:	687b      	ldr	r3, [r7, #4]
 800dfc0:	681b      	ldr	r3, [r3, #0]
 800dfc2:	4a26      	ldr	r2, [pc, #152]	; (800e05c <HAL_SD_IRQHandler+0x2cc>)
 800dfc4:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT|\
 800dfc6:	687b      	ldr	r3, [r7, #4]
 800dfc8:	681b      	ldr	r3, [r3, #0]
 800dfca:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800dfcc:	687b      	ldr	r3, [r7, #4]
 800dfce:	681b      	ldr	r3, [r3, #0]
 800dfd0:	f422 729d 	bic.w	r2, r2, #314	; 0x13a
 800dfd4:	63da      	str	r2, [r3, #60]	; 0x3c
    __SDMMC_CMDTRANS_DISABLE( hsd->Instance);
 800dfd6:	687b      	ldr	r3, [r7, #4]
 800dfd8:	681b      	ldr	r3, [r3, #0]
 800dfda:	68da      	ldr	r2, [r3, #12]
 800dfdc:	687b      	ldr	r3, [r7, #4]
 800dfde:	681b      	ldr	r3, [r3, #0]
 800dfe0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800dfe4:	60da      	str	r2, [r3, #12]
    hsd->Instance->DCTRL |= SDMMC_DCTRL_FIFORST;
 800dfe6:	687b      	ldr	r3, [r7, #4]
 800dfe8:	681b      	ldr	r3, [r3, #0]
 800dfea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800dfec:	687b      	ldr	r3, [r7, #4]
 800dfee:	681b      	ldr	r3, [r3, #0]
 800dff0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800dff4:	62da      	str	r2, [r3, #44]	; 0x2c
    hsd->Instance->CMD |= SDMMC_CMD_CMDSTOP;
 800dff6:	687b      	ldr	r3, [r7, #4]
 800dff8:	681b      	ldr	r3, [r3, #0]
 800dffa:	68da      	ldr	r2, [r3, #12]
 800dffc:	687b      	ldr	r3, [r7, #4]
 800dffe:	681b      	ldr	r3, [r3, #0]
 800e000:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800e004:	60da      	str	r2, [r3, #12]
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800e006:	687b      	ldr	r3, [r7, #4]
 800e008:	681b      	ldr	r3, [r3, #0]
 800e00a:	4618      	mov	r0, r3
 800e00c:	f003 fd6a 	bl	8011ae4 <SDMMC_CmdStopTransfer>
 800e010:	4602      	mov	r2, r0
 800e012:	687b      	ldr	r3, [r7, #4]
 800e014:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e016:	431a      	orrs	r2, r3
 800e018:	687b      	ldr	r3, [r7, #4]
 800e01a:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->Instance->CMD &= ~(SDMMC_CMD_CMDSTOP);
 800e01c:	687b      	ldr	r3, [r7, #4]
 800e01e:	681b      	ldr	r3, [r3, #0]
 800e020:	68da      	ldr	r2, [r3, #12]
 800e022:	687b      	ldr	r3, [r7, #4]
 800e024:	681b      	ldr	r3, [r3, #0]
 800e026:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800e02a:	60da      	str	r2, [r3, #12]
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DABORT);
 800e02c:	687b      	ldr	r3, [r7, #4]
 800e02e:	681b      	ldr	r3, [r3, #0]
 800e030:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800e034:	639a      	str	r2, [r3, #56]	; 0x38
    if((context & SD_CONTEXT_IT) != 0U)
 800e036:	68fb      	ldr	r3, [r7, #12]
 800e038:	f003 0308 	and.w	r3, r3, #8
 800e03c:	2b00      	cmp	r3, #0
 800e03e:	d00f      	beq.n	800e060 <HAL_SD_IRQHandler+0x2d0>
      hsd->State = HAL_SD_STATE_READY;
 800e040:	687b      	ldr	r3, [r7, #4]
 800e042:	2201      	movs	r2, #1
 800e044:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800e048:	687b      	ldr	r3, [r7, #4]
 800e04a:	2200      	movs	r2, #0
 800e04c:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_SD_ErrorCallback(hsd);
 800e04e:	6878      	ldr	r0, [r7, #4]
 800e050:	f000 f854 	bl	800e0fc <HAL_SD_ErrorCallback>
}
 800e054:	e04e      	b.n	800e0f4 <HAL_SD_IRQHandler+0x364>
 800e056:	bf00      	nop
 800e058:	ffff3ec5 	.word	0xffff3ec5
 800e05c:	18000f3a 	.word	0x18000f3a
    else if((context & SD_CONTEXT_DMA) != 0U)
 800e060:	68fb      	ldr	r3, [r7, #12]
 800e062:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e066:	2b00      	cmp	r3, #0
 800e068:	d044      	beq.n	800e0f4 <HAL_SD_IRQHandler+0x364>
      if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 800e06a:	687b      	ldr	r3, [r7, #4]
 800e06c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e06e:	2b00      	cmp	r3, #0
 800e070:	d040      	beq.n	800e0f4 <HAL_SD_IRQHandler+0x364>
        __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_IDMABTC);
 800e072:	687b      	ldr	r3, [r7, #4]
 800e074:	681b      	ldr	r3, [r3, #0]
 800e076:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800e078:	687b      	ldr	r3, [r7, #4]
 800e07a:	681b      	ldr	r3, [r3, #0]
 800e07c:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 800e080:	63da      	str	r2, [r3, #60]	; 0x3c
        hsd->Instance->IDMACTRL = SDMMC_DISABLE_IDMA;
 800e082:	687b      	ldr	r3, [r7, #4]
 800e084:	681b      	ldr	r3, [r3, #0]
 800e086:	2200      	movs	r2, #0
 800e088:	651a      	str	r2, [r3, #80]	; 0x50
        hsd->State = HAL_SD_STATE_READY;
 800e08a:	687b      	ldr	r3, [r7, #4]
 800e08c:	2201      	movs	r2, #1
 800e08e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        HAL_SD_ErrorCallback(hsd);
 800e092:	6878      	ldr	r0, [r7, #4]
 800e094:	f000 f832 	bl	800e0fc <HAL_SD_ErrorCallback>
}
 800e098:	e02c      	b.n	800e0f4 <HAL_SD_IRQHandler+0x364>
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_IDMABTC) != RESET)
 800e09a:	687b      	ldr	r3, [r7, #4]
 800e09c:	681b      	ldr	r3, [r3, #0]
 800e09e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e0a0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800e0a4:	2b00      	cmp	r3, #0
 800e0a6:	d025      	beq.n	800e0f4 <HAL_SD_IRQHandler+0x364>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_IDMABTC);
 800e0a8:	687b      	ldr	r3, [r7, #4]
 800e0aa:	681b      	ldr	r3, [r3, #0]
 800e0ac:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e0b0:	639a      	str	r2, [r3, #56]	; 0x38
    if(READ_BIT(hsd->Instance->IDMACTRL, SDMMC_IDMA_IDMABACT) == 0U)
 800e0b2:	687b      	ldr	r3, [r7, #4]
 800e0b4:	681b      	ldr	r3, [r3, #0]
 800e0b6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e0b8:	f003 0304 	and.w	r3, r3, #4
 800e0bc:	2b00      	cmp	r3, #0
 800e0be:	d10c      	bne.n	800e0da <HAL_SD_IRQHandler+0x34a>
      if((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 800e0c0:	68fb      	ldr	r3, [r7, #12]
 800e0c2:	f003 0320 	and.w	r3, r3, #32
 800e0c6:	2b00      	cmp	r3, #0
 800e0c8:	d003      	beq.n	800e0d2 <HAL_SD_IRQHandler+0x342>
        HAL_SDEx_Write_DMADoubleBuf1CpltCallback(hsd);
 800e0ca:	6878      	ldr	r0, [r7, #4]
 800e0cc:	f001 f84e 	bl	800f16c <HAL_SDEx_Write_DMADoubleBuf1CpltCallback>
}
 800e0d0:	e010      	b.n	800e0f4 <HAL_SD_IRQHandler+0x364>
        HAL_SDEx_Read_DMADoubleBuf1CpltCallback(hsd);
 800e0d2:	6878      	ldr	r0, [r7, #4]
 800e0d4:	f001 f836 	bl	800f144 <HAL_SDEx_Read_DMADoubleBuf1CpltCallback>
}
 800e0d8:	e00c      	b.n	800e0f4 <HAL_SD_IRQHandler+0x364>
      if((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 800e0da:	68fb      	ldr	r3, [r7, #12]
 800e0dc:	f003 0320 	and.w	r3, r3, #32
 800e0e0:	2b00      	cmp	r3, #0
 800e0e2:	d003      	beq.n	800e0ec <HAL_SD_IRQHandler+0x35c>
        HAL_SDEx_Write_DMADoubleBuf0CpltCallback(hsd);
 800e0e4:	6878      	ldr	r0, [r7, #4]
 800e0e6:	f001 f837 	bl	800f158 <HAL_SDEx_Write_DMADoubleBuf0CpltCallback>
}
 800e0ea:	e003      	b.n	800e0f4 <HAL_SD_IRQHandler+0x364>
        HAL_SDEx_Read_DMADoubleBuf0CpltCallback(hsd);
 800e0ec:	6878      	ldr	r0, [r7, #4]
 800e0ee:	f001 f81f 	bl	800f130 <HAL_SDEx_Read_DMADoubleBuf0CpltCallback>
}
 800e0f2:	e7ff      	b.n	800e0f4 <HAL_SD_IRQHandler+0x364>
 800e0f4:	bf00      	nop
 800e0f6:	3710      	adds	r7, #16
 800e0f8:	46bd      	mov	sp, r7
 800e0fa:	bd80      	pop	{r7, pc}

0800e0fc <HAL_SD_ErrorCallback>:
  * @brief SD error callbacks
  * @param hsd: Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_ErrorCallback(SD_HandleTypeDef *hsd)
{
 800e0fc:	b480      	push	{r7}
 800e0fe:	b083      	sub	sp, #12
 800e100:	af00      	add	r7, sp, #0
 800e102:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_ErrorCallback can be implemented in the user file
   */
}
 800e104:	bf00      	nop
 800e106:	370c      	adds	r7, #12
 800e108:	46bd      	mov	sp, r7
 800e10a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e10e:	4770      	bx	lr

0800e110 <HAL_SD_DriveTransceiver_1_8V_Callback>:
  * @brief  Enable/Disable the SD Transceiver 1.8V Mode Callback.
  * @param  status: Voltage Switch State
  * @retval None
  */
__weak  void HAL_SD_DriveTransceiver_1_8V_Callback(FlagStatus status)
{
 800e110:	b480      	push	{r7}
 800e112:	b083      	sub	sp, #12
 800e114:	af00      	add	r7, sp, #0
 800e116:	4603      	mov	r3, r0
 800e118:	71fb      	strb	r3, [r7, #7]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(status);
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_EnableTransceiver could be implemented in the user file
   */
}
 800e11a:	bf00      	nop
 800e11c:	370c      	adds	r7, #12
 800e11e:	46bd      	mov	sp, r7
 800e120:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e124:	4770      	bx	lr
	...

0800e128 <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 800e128:	b480      	push	{r7}
 800e12a:	b083      	sub	sp, #12
 800e12c:	af00      	add	r7, sp, #0
 800e12e:	6078      	str	r0, [r7, #4]
 800e130:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 800e132:	687b      	ldr	r3, [r7, #4]
 800e134:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800e136:	0f9b      	lsrs	r3, r3, #30
 800e138:	b2da      	uxtb	r2, r3
 800e13a:	683b      	ldr	r3, [r7, #0]
 800e13c:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 800e13e:	687b      	ldr	r3, [r7, #4]
 800e140:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800e142:	0e9b      	lsrs	r3, r3, #26
 800e144:	b2db      	uxtb	r3, r3
 800e146:	f003 030f 	and.w	r3, r3, #15
 800e14a:	b2da      	uxtb	r2, r3
 800e14c:	683b      	ldr	r3, [r7, #0]
 800e14e:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 800e150:	687b      	ldr	r3, [r7, #4]
 800e152:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800e154:	0e1b      	lsrs	r3, r3, #24
 800e156:	b2db      	uxtb	r3, r3
 800e158:	f003 0303 	and.w	r3, r3, #3
 800e15c:	b2da      	uxtb	r2, r3
 800e15e:	683b      	ldr	r3, [r7, #0]
 800e160:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 800e162:	687b      	ldr	r3, [r7, #4]
 800e164:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800e166:	0c1b      	lsrs	r3, r3, #16
 800e168:	b2da      	uxtb	r2, r3
 800e16a:	683b      	ldr	r3, [r7, #0]
 800e16c:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 800e16e:	687b      	ldr	r3, [r7, #4]
 800e170:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800e172:	0a1b      	lsrs	r3, r3, #8
 800e174:	b2da      	uxtb	r2, r3
 800e176:	683b      	ldr	r3, [r7, #0]
 800e178:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 800e17a:	687b      	ldr	r3, [r7, #4]
 800e17c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800e17e:	b2da      	uxtb	r2, r3
 800e180:	683b      	ldr	r3, [r7, #0]
 800e182:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 800e184:	687b      	ldr	r3, [r7, #4]
 800e186:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e188:	0d1b      	lsrs	r3, r3, #20
 800e18a:	b29a      	uxth	r2, r3
 800e18c:	683b      	ldr	r3, [r7, #0]
 800e18e:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 800e190:	687b      	ldr	r3, [r7, #4]
 800e192:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e194:	0c1b      	lsrs	r3, r3, #16
 800e196:	b2db      	uxtb	r3, r3
 800e198:	f003 030f 	and.w	r3, r3, #15
 800e19c:	b2da      	uxtb	r2, r3
 800e19e:	683b      	ldr	r3, [r7, #0]
 800e1a0:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 800e1a2:	687b      	ldr	r3, [r7, #4]
 800e1a4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e1a6:	0bdb      	lsrs	r3, r3, #15
 800e1a8:	b2db      	uxtb	r3, r3
 800e1aa:	f003 0301 	and.w	r3, r3, #1
 800e1ae:	b2da      	uxtb	r2, r3
 800e1b0:	683b      	ldr	r3, [r7, #0]
 800e1b2:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 800e1b4:	687b      	ldr	r3, [r7, #4]
 800e1b6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e1b8:	0b9b      	lsrs	r3, r3, #14
 800e1ba:	b2db      	uxtb	r3, r3
 800e1bc:	f003 0301 	and.w	r3, r3, #1
 800e1c0:	b2da      	uxtb	r2, r3
 800e1c2:	683b      	ldr	r3, [r7, #0]
 800e1c4:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 800e1c6:	687b      	ldr	r3, [r7, #4]
 800e1c8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e1ca:	0b5b      	lsrs	r3, r3, #13
 800e1cc:	b2db      	uxtb	r3, r3
 800e1ce:	f003 0301 	and.w	r3, r3, #1
 800e1d2:	b2da      	uxtb	r2, r3
 800e1d4:	683b      	ldr	r3, [r7, #0]
 800e1d6:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 800e1d8:	687b      	ldr	r3, [r7, #4]
 800e1da:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e1dc:	0b1b      	lsrs	r3, r3, #12
 800e1de:	b2db      	uxtb	r3, r3
 800e1e0:	f003 0301 	and.w	r3, r3, #1
 800e1e4:	b2da      	uxtb	r2, r3
 800e1e6:	683b      	ldr	r3, [r7, #0]
 800e1e8:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 800e1ea:	683b      	ldr	r3, [r7, #0]
 800e1ec:	2200      	movs	r2, #0
 800e1ee:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 800e1f0:	687b      	ldr	r3, [r7, #4]
 800e1f2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e1f4:	2b00      	cmp	r3, #0
 800e1f6:	d163      	bne.n	800e2c0 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 800e1f8:	687b      	ldr	r3, [r7, #4]
 800e1fa:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e1fc:	009a      	lsls	r2, r3, #2
 800e1fe:	f640 73fc 	movw	r3, #4092	; 0xffc
 800e202:	4013      	ands	r3, r2
 800e204:	687a      	ldr	r2, [r7, #4]
 800e206:	6e92      	ldr	r2, [r2, #104]	; 0x68
 800e208:	0f92      	lsrs	r2, r2, #30
 800e20a:	431a      	orrs	r2, r3
 800e20c:	683b      	ldr	r3, [r7, #0]
 800e20e:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 800e210:	687b      	ldr	r3, [r7, #4]
 800e212:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800e214:	0edb      	lsrs	r3, r3, #27
 800e216:	b2db      	uxtb	r3, r3
 800e218:	f003 0307 	and.w	r3, r3, #7
 800e21c:	b2da      	uxtb	r2, r3
 800e21e:	683b      	ldr	r3, [r7, #0]
 800e220:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 800e222:	687b      	ldr	r3, [r7, #4]
 800e224:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800e226:	0e1b      	lsrs	r3, r3, #24
 800e228:	b2db      	uxtb	r3, r3
 800e22a:	f003 0307 	and.w	r3, r3, #7
 800e22e:	b2da      	uxtb	r2, r3
 800e230:	683b      	ldr	r3, [r7, #0]
 800e232:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 800e234:	687b      	ldr	r3, [r7, #4]
 800e236:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800e238:	0d5b      	lsrs	r3, r3, #21
 800e23a:	b2db      	uxtb	r3, r3
 800e23c:	f003 0307 	and.w	r3, r3, #7
 800e240:	b2da      	uxtb	r2, r3
 800e242:	683b      	ldr	r3, [r7, #0]
 800e244:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 800e246:	687b      	ldr	r3, [r7, #4]
 800e248:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800e24a:	0c9b      	lsrs	r3, r3, #18
 800e24c:	b2db      	uxtb	r3, r3
 800e24e:	f003 0307 	and.w	r3, r3, #7
 800e252:	b2da      	uxtb	r2, r3
 800e254:	683b      	ldr	r3, [r7, #0]
 800e256:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 800e258:	687b      	ldr	r3, [r7, #4]
 800e25a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800e25c:	0bdb      	lsrs	r3, r3, #15
 800e25e:	b2db      	uxtb	r3, r3
 800e260:	f003 0307 	and.w	r3, r3, #7
 800e264:	b2da      	uxtb	r2, r3
 800e266:	683b      	ldr	r3, [r7, #0]
 800e268:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 800e26a:	683b      	ldr	r3, [r7, #0]
 800e26c:	691b      	ldr	r3, [r3, #16]
 800e26e:	1c5a      	adds	r2, r3, #1
 800e270:	687b      	ldr	r3, [r7, #4]
 800e272:	64da      	str	r2, [r3, #76]	; 0x4c
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 800e274:	683b      	ldr	r3, [r7, #0]
 800e276:	7e1b      	ldrb	r3, [r3, #24]
 800e278:	b2db      	uxtb	r3, r3
 800e27a:	f003 0307 	and.w	r3, r3, #7
 800e27e:	3302      	adds	r3, #2
 800e280:	2201      	movs	r2, #1
 800e282:	fa02 f303 	lsl.w	r3, r2, r3
 800e286:	687a      	ldr	r2, [r7, #4]
 800e288:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 800e28a:	fb02 f203 	mul.w	r2, r2, r3
 800e28e:	687b      	ldr	r3, [r7, #4]
 800e290:	64da      	str	r2, [r3, #76]	; 0x4c
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 800e292:	683b      	ldr	r3, [r7, #0]
 800e294:	7a1b      	ldrb	r3, [r3, #8]
 800e296:	b2db      	uxtb	r3, r3
 800e298:	f003 030f 	and.w	r3, r3, #15
 800e29c:	2201      	movs	r2, #1
 800e29e:	409a      	lsls	r2, r3
 800e2a0:	687b      	ldr	r3, [r7, #4]
 800e2a2:	651a      	str	r2, [r3, #80]	; 0x50

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 800e2a4:	687b      	ldr	r3, [r7, #4]
 800e2a6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800e2a8:	687a      	ldr	r2, [r7, #4]
 800e2aa:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800e2ac:	0a52      	lsrs	r2, r2, #9
 800e2ae:	fb02 f203 	mul.w	r2, r2, r3
 800e2b2:	687b      	ldr	r3, [r7, #4]
 800e2b4:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.LogBlockSize = 512U;
 800e2b6:	687b      	ldr	r3, [r7, #4]
 800e2b8:	f44f 7200 	mov.w	r2, #512	; 0x200
 800e2bc:	659a      	str	r2, [r3, #88]	; 0x58
 800e2be:	e031      	b.n	800e324 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 800e2c0:	687b      	ldr	r3, [r7, #4]
 800e2c2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e2c4:	2b01      	cmp	r3, #1
 800e2c6:	d11d      	bne.n	800e304 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 800e2c8:	687b      	ldr	r3, [r7, #4]
 800e2ca:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e2cc:	041b      	lsls	r3, r3, #16
 800e2ce:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 800e2d2:	687b      	ldr	r3, [r7, #4]
 800e2d4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800e2d6:	0c1b      	lsrs	r3, r3, #16
 800e2d8:	431a      	orrs	r2, r3
 800e2da:	683b      	ldr	r3, [r7, #0]
 800e2dc:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 800e2de:	683b      	ldr	r3, [r7, #0]
 800e2e0:	691b      	ldr	r3, [r3, #16]
 800e2e2:	3301      	adds	r3, #1
 800e2e4:	029a      	lsls	r2, r3, #10
 800e2e6:	687b      	ldr	r3, [r7, #4]
 800e2e8:	64da      	str	r2, [r3, #76]	; 0x4c
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 800e2ea:	687b      	ldr	r3, [r7, #4]
 800e2ec:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800e2ee:	687b      	ldr	r3, [r7, #4]
 800e2f0:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockSize = 512U;
 800e2f2:	687b      	ldr	r3, [r7, #4]
 800e2f4:	f44f 7200 	mov.w	r2, #512	; 0x200
 800e2f8:	651a      	str	r2, [r3, #80]	; 0x50
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 800e2fa:	687b      	ldr	r3, [r7, #4]
 800e2fc:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800e2fe:	687b      	ldr	r3, [r7, #4]
 800e300:	659a      	str	r2, [r3, #88]	; 0x58
 800e302:	e00f      	b.n	800e324 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800e304:	687b      	ldr	r3, [r7, #4]
 800e306:	681b      	ldr	r3, [r3, #0]
 800e308:	4a58      	ldr	r2, [pc, #352]	; (800e46c <HAL_SD_GetCardCSD+0x344>)
 800e30a:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800e30c:	687b      	ldr	r3, [r7, #4]
 800e30e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e310:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800e314:	687b      	ldr	r3, [r7, #4]
 800e316:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 800e318:	687b      	ldr	r3, [r7, #4]
 800e31a:	2201      	movs	r2, #1
 800e31c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 800e320:	2301      	movs	r3, #1
 800e322:	e09d      	b.n	800e460 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 800e324:	687b      	ldr	r3, [r7, #4]
 800e326:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800e328:	0b9b      	lsrs	r3, r3, #14
 800e32a:	b2db      	uxtb	r3, r3
 800e32c:	f003 0301 	and.w	r3, r3, #1
 800e330:	b2da      	uxtb	r2, r3
 800e332:	683b      	ldr	r3, [r7, #0]
 800e334:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 800e336:	687b      	ldr	r3, [r7, #4]
 800e338:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800e33a:	09db      	lsrs	r3, r3, #7
 800e33c:	b2db      	uxtb	r3, r3
 800e33e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800e342:	b2da      	uxtb	r2, r3
 800e344:	683b      	ldr	r3, [r7, #0]
 800e346:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 800e348:	687b      	ldr	r3, [r7, #4]
 800e34a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800e34c:	b2db      	uxtb	r3, r3
 800e34e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800e352:	b2da      	uxtb	r2, r3
 800e354:	683b      	ldr	r3, [r7, #0]
 800e356:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 800e358:	687b      	ldr	r3, [r7, #4]
 800e35a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e35c:	0fdb      	lsrs	r3, r3, #31
 800e35e:	b2da      	uxtb	r2, r3
 800e360:	683b      	ldr	r3, [r7, #0]
 800e362:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 800e364:	687b      	ldr	r3, [r7, #4]
 800e366:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e368:	0f5b      	lsrs	r3, r3, #29
 800e36a:	b2db      	uxtb	r3, r3
 800e36c:	f003 0303 	and.w	r3, r3, #3
 800e370:	b2da      	uxtb	r2, r3
 800e372:	683b      	ldr	r3, [r7, #0]
 800e374:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 800e376:	687b      	ldr	r3, [r7, #4]
 800e378:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e37a:	0e9b      	lsrs	r3, r3, #26
 800e37c:	b2db      	uxtb	r3, r3
 800e37e:	f003 0307 	and.w	r3, r3, #7
 800e382:	b2da      	uxtb	r2, r3
 800e384:	683b      	ldr	r3, [r7, #0]
 800e386:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 800e388:	687b      	ldr	r3, [r7, #4]
 800e38a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e38c:	0d9b      	lsrs	r3, r3, #22
 800e38e:	b2db      	uxtb	r3, r3
 800e390:	f003 030f 	and.w	r3, r3, #15
 800e394:	b2da      	uxtb	r2, r3
 800e396:	683b      	ldr	r3, [r7, #0]
 800e398:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 800e39a:	687b      	ldr	r3, [r7, #4]
 800e39c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e39e:	0d5b      	lsrs	r3, r3, #21
 800e3a0:	b2db      	uxtb	r3, r3
 800e3a2:	f003 0301 	and.w	r3, r3, #1
 800e3a6:	b2da      	uxtb	r2, r3
 800e3a8:	683b      	ldr	r3, [r7, #0]
 800e3aa:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 800e3ae:	683b      	ldr	r3, [r7, #0]
 800e3b0:	2200      	movs	r2, #0
 800e3b2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 800e3b6:	687b      	ldr	r3, [r7, #4]
 800e3b8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e3ba:	0c1b      	lsrs	r3, r3, #16
 800e3bc:	b2db      	uxtb	r3, r3
 800e3be:	f003 0301 	and.w	r3, r3, #1
 800e3c2:	b2da      	uxtb	r2, r3
 800e3c4:	683b      	ldr	r3, [r7, #0]
 800e3c6:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 800e3ca:	687b      	ldr	r3, [r7, #4]
 800e3cc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e3ce:	0bdb      	lsrs	r3, r3, #15
 800e3d0:	b2db      	uxtb	r3, r3
 800e3d2:	f003 0301 	and.w	r3, r3, #1
 800e3d6:	b2da      	uxtb	r2, r3
 800e3d8:	683b      	ldr	r3, [r7, #0]
 800e3da:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 800e3de:	687b      	ldr	r3, [r7, #4]
 800e3e0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e3e2:	0b9b      	lsrs	r3, r3, #14
 800e3e4:	b2db      	uxtb	r3, r3
 800e3e6:	f003 0301 	and.w	r3, r3, #1
 800e3ea:	b2da      	uxtb	r2, r3
 800e3ec:	683b      	ldr	r3, [r7, #0]
 800e3ee:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 800e3f2:	687b      	ldr	r3, [r7, #4]
 800e3f4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e3f6:	0b5b      	lsrs	r3, r3, #13
 800e3f8:	b2db      	uxtb	r3, r3
 800e3fa:	f003 0301 	and.w	r3, r3, #1
 800e3fe:	b2da      	uxtb	r2, r3
 800e400:	683b      	ldr	r3, [r7, #0]
 800e402:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 800e406:	687b      	ldr	r3, [r7, #4]
 800e408:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e40a:	0b1b      	lsrs	r3, r3, #12
 800e40c:	b2db      	uxtb	r3, r3
 800e40e:	f003 0301 	and.w	r3, r3, #1
 800e412:	b2da      	uxtb	r2, r3
 800e414:	683b      	ldr	r3, [r7, #0]
 800e416:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 800e41a:	687b      	ldr	r3, [r7, #4]
 800e41c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e41e:	0a9b      	lsrs	r3, r3, #10
 800e420:	b2db      	uxtb	r3, r3
 800e422:	f003 0303 	and.w	r3, r3, #3
 800e426:	b2da      	uxtb	r2, r3
 800e428:	683b      	ldr	r3, [r7, #0]
 800e42a:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 800e42e:	687b      	ldr	r3, [r7, #4]
 800e430:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e432:	0a1b      	lsrs	r3, r3, #8
 800e434:	b2db      	uxtb	r3, r3
 800e436:	f003 0303 	and.w	r3, r3, #3
 800e43a:	b2da      	uxtb	r2, r3
 800e43c:	683b      	ldr	r3, [r7, #0]
 800e43e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 800e442:	687b      	ldr	r3, [r7, #4]
 800e444:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e446:	085b      	lsrs	r3, r3, #1
 800e448:	b2db      	uxtb	r3, r3
 800e44a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800e44e:	b2da      	uxtb	r2, r3
 800e450:	683b      	ldr	r3, [r7, #0]
 800e452:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 800e456:	683b      	ldr	r3, [r7, #0]
 800e458:	2201      	movs	r2, #1
 800e45a:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 800e45e:	2300      	movs	r3, #0
}
 800e460:	4618      	mov	r0, r3
 800e462:	370c      	adds	r7, #12
 800e464:	46bd      	mov	sp, r7
 800e466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e46a:	4770      	bx	lr
 800e46c:	1fe00fff 	.word	0x1fe00fff

0800e470 <HAL_SD_GetCardStatus>:
  * @param  pStatus: Pointer to the HAL_SD_CardStatusTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardStatus(SD_HandleTypeDef *hsd, HAL_SD_CardStatusTypeDef *pStatus)
{
 800e470:	b580      	push	{r7, lr}
 800e472:	b094      	sub	sp, #80	; 0x50
 800e474:	af00      	add	r7, sp, #0
 800e476:	6078      	str	r0, [r7, #4]
 800e478:	6039      	str	r1, [r7, #0]
  uint32_t sd_status[16];
  uint32_t errorstate;
  HAL_StatusTypeDef status = HAL_OK;
 800e47a:	2300      	movs	r3, #0
 800e47c:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f

  errorstate = SD_SendSDStatus(hsd, sd_status);
 800e480:	f107 0308 	add.w	r3, r7, #8
 800e484:	4619      	mov	r1, r3
 800e486:	6878      	ldr	r0, [r7, #4]
 800e488:	f000 fb64 	bl	800eb54 <SD_SendSDStatus>
 800e48c:	64b8      	str	r0, [r7, #72]	; 0x48
  if(errorstate != HAL_SD_ERROR_NONE)
 800e48e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800e490:	2b00      	cmp	r3, #0
 800e492:	d011      	beq.n	800e4b8 <HAL_SD_GetCardStatus+0x48>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800e494:	687b      	ldr	r3, [r7, #4]
 800e496:	681b      	ldr	r3, [r3, #0]
 800e498:	4a4f      	ldr	r2, [pc, #316]	; (800e5d8 <HAL_SD_GetCardStatus+0x168>)
 800e49a:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 800e49c:	687b      	ldr	r3, [r7, #4]
 800e49e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800e4a0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800e4a2:	431a      	orrs	r2, r3
 800e4a4:	687b      	ldr	r3, [r7, #4]
 800e4a6:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 800e4a8:	687b      	ldr	r3, [r7, #4]
 800e4aa:	2201      	movs	r2, #1
 800e4ac:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    status = HAL_ERROR;
 800e4b0:	2301      	movs	r3, #1
 800e4b2:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 800e4b6:	e070      	b.n	800e59a <HAL_SD_GetCardStatus+0x12a>
  }
  else
  {
    pStatus->DataBusWidth = (uint8_t)((sd_status[0] & 0xC0U) >> 6U);
 800e4b8:	68bb      	ldr	r3, [r7, #8]
 800e4ba:	099b      	lsrs	r3, r3, #6
 800e4bc:	b2db      	uxtb	r3, r3
 800e4be:	f003 0303 	and.w	r3, r3, #3
 800e4c2:	b2da      	uxtb	r2, r3
 800e4c4:	683b      	ldr	r3, [r7, #0]
 800e4c6:	701a      	strb	r2, [r3, #0]

    pStatus->SecuredMode = (uint8_t)((sd_status[0] & 0x20U) >> 5U);
 800e4c8:	68bb      	ldr	r3, [r7, #8]
 800e4ca:	095b      	lsrs	r3, r3, #5
 800e4cc:	b2db      	uxtb	r3, r3
 800e4ce:	f003 0301 	and.w	r3, r3, #1
 800e4d2:	b2da      	uxtb	r2, r3
 800e4d4:	683b      	ldr	r3, [r7, #0]
 800e4d6:	705a      	strb	r2, [r3, #1]

    pStatus->CardType = (uint16_t)(((sd_status[0] & 0x00FF0000U) >> 8U) | ((sd_status[0] & 0xFF000000U) >> 24U));
 800e4d8:	68bb      	ldr	r3, [r7, #8]
 800e4da:	0a1b      	lsrs	r3, r3, #8
 800e4dc:	b29b      	uxth	r3, r3
 800e4de:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800e4e2:	b29a      	uxth	r2, r3
 800e4e4:	68bb      	ldr	r3, [r7, #8]
 800e4e6:	0e1b      	lsrs	r3, r3, #24
 800e4e8:	b29b      	uxth	r3, r3
 800e4ea:	4313      	orrs	r3, r2
 800e4ec:	b29a      	uxth	r2, r3
 800e4ee:	683b      	ldr	r3, [r7, #0]
 800e4f0:	805a      	strh	r2, [r3, #2]

    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 800e4f2:	68fb      	ldr	r3, [r7, #12]
 800e4f4:	061a      	lsls	r2, r3, #24
 800e4f6:	68fb      	ldr	r3, [r7, #12]
 800e4f8:	021b      	lsls	r3, r3, #8
 800e4fa:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800e4fe:	431a      	orrs	r2, r3
                                  ((sd_status[1] & 0xFF0000U) >> 8U) | ((sd_status[1] & 0xFF000000U) >> 24U));
 800e500:	68fb      	ldr	r3, [r7, #12]
 800e502:	0a1b      	lsrs	r3, r3, #8
 800e504:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 800e508:	431a      	orrs	r2, r3
                                  ((sd_status[1] & 0xFF0000U) >> 8U) | ((sd_status[1] & 0xFF000000U) >> 24U));
 800e50a:	68fb      	ldr	r3, [r7, #12]
 800e50c:	0e1b      	lsrs	r3, r3, #24
 800e50e:	431a      	orrs	r2, r3
    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 800e510:	683b      	ldr	r3, [r7, #0]
 800e512:	605a      	str	r2, [r3, #4]

    pStatus->SpeedClass = (uint8_t)(sd_status[2] & 0xFFU);
 800e514:	693b      	ldr	r3, [r7, #16]
 800e516:	b2da      	uxtb	r2, r3
 800e518:	683b      	ldr	r3, [r7, #0]
 800e51a:	721a      	strb	r2, [r3, #8]

    pStatus->PerformanceMove = (uint8_t)((sd_status[2] & 0xFF00U) >> 8U);
 800e51c:	693b      	ldr	r3, [r7, #16]
 800e51e:	0a1b      	lsrs	r3, r3, #8
 800e520:	b2da      	uxtb	r2, r3
 800e522:	683b      	ldr	r3, [r7, #0]
 800e524:	725a      	strb	r2, [r3, #9]

    pStatus->AllocationUnitSize = (uint8_t)((sd_status[2] & 0xF00000U) >> 20U);
 800e526:	693b      	ldr	r3, [r7, #16]
 800e528:	0d1b      	lsrs	r3, r3, #20
 800e52a:	b2db      	uxtb	r3, r3
 800e52c:	f003 030f 	and.w	r3, r3, #15
 800e530:	b2da      	uxtb	r2, r3
 800e532:	683b      	ldr	r3, [r7, #0]
 800e534:	729a      	strb	r2, [r3, #10]

    pStatus->EraseSize = (uint16_t)(((sd_status[2] & 0xFF000000U) >> 16U) | (sd_status[3] & 0xFFU));
 800e536:	693b      	ldr	r3, [r7, #16]
 800e538:	0c1b      	lsrs	r3, r3, #16
 800e53a:	b29b      	uxth	r3, r3
 800e53c:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800e540:	b29a      	uxth	r2, r3
 800e542:	697b      	ldr	r3, [r7, #20]
 800e544:	b29b      	uxth	r3, r3
 800e546:	b2db      	uxtb	r3, r3
 800e548:	b29b      	uxth	r3, r3
 800e54a:	4313      	orrs	r3, r2
 800e54c:	b29a      	uxth	r2, r3
 800e54e:	683b      	ldr	r3, [r7, #0]
 800e550:	819a      	strh	r2, [r3, #12]

    pStatus->EraseTimeout = (uint8_t)((sd_status[3] & 0xFC00U) >> 10U);
 800e552:	697b      	ldr	r3, [r7, #20]
 800e554:	0a9b      	lsrs	r3, r3, #10
 800e556:	b2db      	uxtb	r3, r3
 800e558:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800e55c:	b2da      	uxtb	r2, r3
 800e55e:	683b      	ldr	r3, [r7, #0]
 800e560:	739a      	strb	r2, [r3, #14]

    pStatus->EraseOffset = (uint8_t)((sd_status[3] & 0x0300U) >> 8U);
 800e562:	697b      	ldr	r3, [r7, #20]
 800e564:	0a1b      	lsrs	r3, r3, #8
 800e566:	b2db      	uxtb	r3, r3
 800e568:	f003 0303 	and.w	r3, r3, #3
 800e56c:	b2da      	uxtb	r2, r3
 800e56e:	683b      	ldr	r3, [r7, #0]
 800e570:	73da      	strb	r2, [r3, #15]

    pStatus->UhsSpeedGrade = (uint8_t)((sd_status[3] & 0x00F0U) >> 4U);
 800e572:	697b      	ldr	r3, [r7, #20]
 800e574:	091b      	lsrs	r3, r3, #4
 800e576:	b2db      	uxtb	r3, r3
 800e578:	f003 030f 	and.w	r3, r3, #15
 800e57c:	b2da      	uxtb	r2, r3
 800e57e:	683b      	ldr	r3, [r7, #0]
 800e580:	741a      	strb	r2, [r3, #16]
    pStatus->UhsAllocationUnitSize = (uint8_t)(sd_status[3] & 0x000FU) ;
 800e582:	697b      	ldr	r3, [r7, #20]
 800e584:	b2db      	uxtb	r3, r3
 800e586:	f003 030f 	and.w	r3, r3, #15
 800e58a:	b2da      	uxtb	r2, r3
 800e58c:	683b      	ldr	r3, [r7, #0]
 800e58e:	745a      	strb	r2, [r3, #17]
    pStatus->VideoSpeedClass = (uint8_t)((sd_status[4] & 0xFF000000U) >> 24U);
 800e590:	69bb      	ldr	r3, [r7, #24]
 800e592:	0e1b      	lsrs	r3, r3, #24
 800e594:	b2da      	uxtb	r2, r3
 800e596:	683b      	ldr	r3, [r7, #0]
 800e598:	749a      	strb	r2, [r3, #18]
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800e59a:	687b      	ldr	r3, [r7, #4]
 800e59c:	681b      	ldr	r3, [r3, #0]
 800e59e:	f44f 7100 	mov.w	r1, #512	; 0x200
 800e5a2:	4618      	mov	r0, r3
 800e5a4:	f003 f9ee 	bl	8011984 <SDMMC_CmdBlockLength>
 800e5a8:	64b8      	str	r0, [r7, #72]	; 0x48
  if(errorstate != HAL_SD_ERROR_NONE)
 800e5aa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800e5ac:	2b00      	cmp	r3, #0
 800e5ae:	d00d      	beq.n	800e5cc <HAL_SD_GetCardStatus+0x15c>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800e5b0:	687b      	ldr	r3, [r7, #4]
 800e5b2:	681b      	ldr	r3, [r3, #0]
 800e5b4:	4a08      	ldr	r2, [pc, #32]	; (800e5d8 <HAL_SD_GetCardStatus+0x168>)
 800e5b6:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode = errorstate;
 800e5b8:	687b      	ldr	r3, [r7, #4]
 800e5ba:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800e5bc:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 800e5be:	687b      	ldr	r3, [r7, #4]
 800e5c0:	2201      	movs	r2, #1
 800e5c2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    status = HAL_ERROR;
 800e5c6:	2301      	movs	r3, #1
 800e5c8:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
  }

  return status;
 800e5cc:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
}
 800e5d0:	4618      	mov	r0, r3
 800e5d2:	3750      	adds	r7, #80	; 0x50
 800e5d4:	46bd      	mov	sp, r7
 800e5d6:	bd80      	pop	{r7, pc}
 800e5d8:	1fe00fff 	.word	0x1fe00fff

0800e5dc <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 800e5dc:	b480      	push	{r7}
 800e5de:	b083      	sub	sp, #12
 800e5e0:	af00      	add	r7, sp, #0
 800e5e2:	6078      	str	r0, [r7, #4]
 800e5e4:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 800e5e6:	687b      	ldr	r3, [r7, #4]
 800e5e8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800e5ea:	683b      	ldr	r3, [r7, #0]
 800e5ec:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 800e5ee:	687b      	ldr	r3, [r7, #4]
 800e5f0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800e5f2:	683b      	ldr	r3, [r7, #0]
 800e5f4:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 800e5f6:	687b      	ldr	r3, [r7, #4]
 800e5f8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800e5fa:	683b      	ldr	r3, [r7, #0]
 800e5fc:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 800e5fe:	687b      	ldr	r3, [r7, #4]
 800e600:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800e602:	683b      	ldr	r3, [r7, #0]
 800e604:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 800e606:	687b      	ldr	r3, [r7, #4]
 800e608:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800e60a:	683b      	ldr	r3, [r7, #0]
 800e60c:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 800e60e:	687b      	ldr	r3, [r7, #4]
 800e610:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800e612:	683b      	ldr	r3, [r7, #0]
 800e614:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 800e616:	687b      	ldr	r3, [r7, #4]
 800e618:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800e61a:	683b      	ldr	r3, [r7, #0]
 800e61c:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 800e61e:	687b      	ldr	r3, [r7, #4]
 800e620:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800e622:	683b      	ldr	r3, [r7, #0]
 800e624:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 800e626:	2300      	movs	r3, #0
}
 800e628:	4618      	mov	r0, r3
 800e62a:	370c      	adds	r7, #12
 800e62c:	46bd      	mov	sp, r7
 800e62e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e632:	4770      	bx	lr

0800e634 <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDMMC_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDMMC_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 800e634:	b5b0      	push	{r4, r5, r7, lr}
 800e636:	b08e      	sub	sp, #56	; 0x38
 800e638:	af04      	add	r7, sp, #16
 800e63a:	6078      	str	r0, [r7, #4]
 800e63c:	6039      	str	r1, [r7, #0]
  SDMMC_InitTypeDef Init;
  uint32_t errorstate;
  HAL_StatusTypeDef status = HAL_OK;
 800e63e:	2300      	movs	r3, #0
 800e640:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  /* Check the parameters */
  assert_param(IS_SDMMC_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 800e644:	687b      	ldr	r3, [r7, #4]
 800e646:	2203      	movs	r2, #3
 800e648:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(hsd->SdCard.CardType != CARD_SECURED)
 800e64c:	687b      	ldr	r3, [r7, #4]
 800e64e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e650:	2b03      	cmp	r3, #3
 800e652:	d02e      	beq.n	800e6b2 <HAL_SD_ConfigWideBusOperation+0x7e>
  {
    if(WideMode == SDMMC_BUS_WIDE_8B)
 800e654:	683b      	ldr	r3, [r7, #0]
 800e656:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800e65a:	d106      	bne.n	800e66a <HAL_SD_ConfigWideBusOperation+0x36>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800e65c:	687b      	ldr	r3, [r7, #4]
 800e65e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e660:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800e664:	687b      	ldr	r3, [r7, #4]
 800e666:	639a      	str	r2, [r3, #56]	; 0x38
 800e668:	e029      	b.n	800e6be <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDMMC_BUS_WIDE_4B)
 800e66a:	683b      	ldr	r3, [r7, #0]
 800e66c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800e670:	d10a      	bne.n	800e688 <HAL_SD_ConfigWideBusOperation+0x54>
    {
      errorstate = SD_WideBus_Enable(hsd);
 800e672:	6878      	ldr	r0, [r7, #4]
 800e674:	f000 fb66 	bl	800ed44 <SD_WideBus_Enable>
 800e678:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 800e67a:	687b      	ldr	r3, [r7, #4]
 800e67c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800e67e:	6a3b      	ldr	r3, [r7, #32]
 800e680:	431a      	orrs	r2, r3
 800e682:	687b      	ldr	r3, [r7, #4]
 800e684:	639a      	str	r2, [r3, #56]	; 0x38
 800e686:	e01a      	b.n	800e6be <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDMMC_BUS_WIDE_1B)
 800e688:	683b      	ldr	r3, [r7, #0]
 800e68a:	2b00      	cmp	r3, #0
 800e68c:	d10a      	bne.n	800e6a4 <HAL_SD_ConfigWideBusOperation+0x70>
    {
      errorstate = SD_WideBus_Disable(hsd);
 800e68e:	6878      	ldr	r0, [r7, #4]
 800e690:	f000 fba3 	bl	800edda <SD_WideBus_Disable>
 800e694:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 800e696:	687b      	ldr	r3, [r7, #4]
 800e698:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800e69a:	6a3b      	ldr	r3, [r7, #32]
 800e69c:	431a      	orrs	r2, r3
 800e69e:	687b      	ldr	r3, [r7, #4]
 800e6a0:	639a      	str	r2, [r3, #56]	; 0x38
 800e6a2:	e00c      	b.n	800e6be <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800e6a4:	687b      	ldr	r3, [r7, #4]
 800e6a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e6a8:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800e6ac:	687b      	ldr	r3, [r7, #4]
 800e6ae:	639a      	str	r2, [r3, #56]	; 0x38
 800e6b0:	e005      	b.n	800e6be <HAL_SD_ConfigWideBusOperation+0x8a>
    }
  }
  else
  {
    /* MMC Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800e6b2:	687b      	ldr	r3, [r7, #4]
 800e6b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e6b6:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800e6ba:	687b      	ldr	r3, [r7, #4]
 800e6bc:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 800e6be:	687b      	ldr	r3, [r7, #4]
 800e6c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e6c2:	2b00      	cmp	r3, #0
 800e6c4:	d007      	beq.n	800e6d6 <HAL_SD_ConfigWideBusOperation+0xa2>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800e6c6:	687b      	ldr	r3, [r7, #4]
 800e6c8:	681b      	ldr	r3, [r3, #0]
 800e6ca:	4a2e      	ldr	r2, [pc, #184]	; (800e784 <HAL_SD_ConfigWideBusOperation+0x150>)
 800e6cc:	639a      	str	r2, [r3, #56]	; 0x38
    status = HAL_ERROR;
 800e6ce:	2301      	movs	r3, #1
 800e6d0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800e6d4:	e034      	b.n	800e740 <HAL_SD_ConfigWideBusOperation+0x10c>
  }
  else
  {
    /* Configure the SDMMC peripheral */
    Init.ClockEdge           = hsd->Init.ClockEdge;
 800e6d6:	687b      	ldr	r3, [r7, #4]
 800e6d8:	685b      	ldr	r3, [r3, #4]
 800e6da:	60bb      	str	r3, [r7, #8]
    Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 800e6dc:	687b      	ldr	r3, [r7, #4]
 800e6de:	689b      	ldr	r3, [r3, #8]
 800e6e0:	60fb      	str	r3, [r7, #12]
    Init.BusWide             = WideMode;
 800e6e2:	683b      	ldr	r3, [r7, #0]
 800e6e4:	613b      	str	r3, [r7, #16]
    Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 800e6e6:	687b      	ldr	r3, [r7, #4]
 800e6e8:	691b      	ldr	r3, [r3, #16]
 800e6ea:	617b      	str	r3, [r7, #20]

    /* Check if user Clock div < Normal speed 25Mhz, no change in Clockdiv */
    if(hsd->Init.ClockDiv >= SDMMC_NSpeed_CLK_DIV)
 800e6ec:	687b      	ldr	r3, [r7, #4]
 800e6ee:	695b      	ldr	r3, [r3, #20]
 800e6f0:	2b03      	cmp	r3, #3
 800e6f2:	d903      	bls.n	800e6fc <HAL_SD_ConfigWideBusOperation+0xc8>
    {
      Init.ClockDiv = hsd->Init.ClockDiv;
 800e6f4:	687b      	ldr	r3, [r7, #4]
 800e6f6:	695b      	ldr	r3, [r3, #20]
 800e6f8:	61bb      	str	r3, [r7, #24]
 800e6fa:	e012      	b.n	800e722 <HAL_SD_ConfigWideBusOperation+0xee>
    }
    else if (hsd->SdCard.CardSpeed == CARD_ULTRA_HIGH_SPEED)
 800e6fc:	687b      	ldr	r3, [r7, #4]
 800e6fe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800e700:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800e704:	d103      	bne.n	800e70e <HAL_SD_ConfigWideBusOperation+0xda>
    {
      /* UltraHigh speed SD card,user Clock div */
      Init.ClockDiv = hsd->Init.ClockDiv;
 800e706:	687b      	ldr	r3, [r7, #4]
 800e708:	695b      	ldr	r3, [r3, #20]
 800e70a:	61bb      	str	r3, [r7, #24]
 800e70c:	e009      	b.n	800e722 <HAL_SD_ConfigWideBusOperation+0xee>
    }
    else if (hsd->SdCard.CardSpeed == CARD_HIGH_SPEED)
 800e70e:	687b      	ldr	r3, [r7, #4]
 800e710:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800e712:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800e716:	d102      	bne.n	800e71e <HAL_SD_ConfigWideBusOperation+0xea>
    {
      /* High speed SD card, Max Frequency = 50Mhz */
      Init.ClockDiv = SDMMC_HSpeed_CLK_DIV;
 800e718:	2302      	movs	r3, #2
 800e71a:	61bb      	str	r3, [r7, #24]
 800e71c:	e001      	b.n	800e722 <HAL_SD_ConfigWideBusOperation+0xee>
    }
    else
    {
      /* No High speed SD card, Max Frequency = 25Mhz */
      Init.ClockDiv = SDMMC_NSpeed_CLK_DIV;
 800e71e:	2304      	movs	r3, #4
 800e720:	61bb      	str	r3, [r7, #24]
    }

    (void)SDMMC_Init(hsd->Instance, Init);
 800e722:	687b      	ldr	r3, [r7, #4]
 800e724:	681d      	ldr	r5, [r3, #0]
 800e726:	466c      	mov	r4, sp
 800e728:	f107 0314 	add.w	r3, r7, #20
 800e72c:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800e730:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800e734:	f107 0308 	add.w	r3, r7, #8
 800e738:	cb0e      	ldmia	r3, {r1, r2, r3}
 800e73a:	4628      	mov	r0, r5
 800e73c:	f003 f844 	bl	80117c8 <SDMMC_Init>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800e740:	687b      	ldr	r3, [r7, #4]
 800e742:	681b      	ldr	r3, [r3, #0]
 800e744:	f44f 7100 	mov.w	r1, #512	; 0x200
 800e748:	4618      	mov	r0, r3
 800e74a:	f003 f91b 	bl	8011984 <SDMMC_CmdBlockLength>
 800e74e:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800e750:	6a3b      	ldr	r3, [r7, #32]
 800e752:	2b00      	cmp	r3, #0
 800e754:	d00c      	beq.n	800e770 <HAL_SD_ConfigWideBusOperation+0x13c>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800e756:	687b      	ldr	r3, [r7, #4]
 800e758:	681b      	ldr	r3, [r3, #0]
 800e75a:	4a0a      	ldr	r2, [pc, #40]	; (800e784 <HAL_SD_ConfigWideBusOperation+0x150>)
 800e75c:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 800e75e:	687b      	ldr	r3, [r7, #4]
 800e760:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800e762:	6a3b      	ldr	r3, [r7, #32]
 800e764:	431a      	orrs	r2, r3
 800e766:	687b      	ldr	r3, [r7, #4]
 800e768:	639a      	str	r2, [r3, #56]	; 0x38
    status = HAL_ERROR;
 800e76a:	2301      	movs	r3, #1
 800e76c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 800e770:	687b      	ldr	r3, [r7, #4]
 800e772:	2201      	movs	r2, #1
 800e774:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return status;
 800e778:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800e77c:	4618      	mov	r0, r3
 800e77e:	3728      	adds	r7, #40	; 0x28
 800e780:	46bd      	mov	sp, r7
 800e782:	bdb0      	pop	{r4, r5, r7, pc}
 800e784:	1fe00fff 	.word	0x1fe00fff

0800e788 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 800e788:	b580      	push	{r7, lr}
 800e78a:	b086      	sub	sp, #24
 800e78c:	af00      	add	r7, sp, #0
 800e78e:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 800e790:	2300      	movs	r3, #0
 800e792:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 800e794:	f107 030c 	add.w	r3, r7, #12
 800e798:	4619      	mov	r1, r3
 800e79a:	6878      	ldr	r0, [r7, #4]
 800e79c:	f000 faaa 	bl	800ecf4 <SD_SendStatus>
 800e7a0:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 800e7a2:	697b      	ldr	r3, [r7, #20]
 800e7a4:	2b00      	cmp	r3, #0
 800e7a6:	d005      	beq.n	800e7b4 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 800e7a8:	687b      	ldr	r3, [r7, #4]
 800e7aa:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800e7ac:	697b      	ldr	r3, [r7, #20]
 800e7ae:	431a      	orrs	r2, r3
 800e7b0:	687b      	ldr	r3, [r7, #4]
 800e7b2:	639a      	str	r2, [r3, #56]	; 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 800e7b4:	68fb      	ldr	r3, [r7, #12]
 800e7b6:	0a5b      	lsrs	r3, r3, #9
 800e7b8:	f003 030f 	and.w	r3, r3, #15
 800e7bc:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 800e7be:	693b      	ldr	r3, [r7, #16]
}
 800e7c0:	4618      	mov	r0, r3
 800e7c2:	3718      	adds	r7, #24
 800e7c4:	46bd      	mov	sp, r7
 800e7c6:	bd80      	pop	{r7, pc}

0800e7c8 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 800e7c8:	b590      	push	{r4, r7, lr}
 800e7ca:	b091      	sub	sp, #68	; 0x44
 800e7cc:	af00      	add	r7, sp, #0
 800e7ce:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 800e7d0:	2301      	movs	r3, #1
 800e7d2:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDMMC_GetPowerState(hsd->Instance) == 0U)
 800e7d4:	687b      	ldr	r3, [r7, #4]
 800e7d6:	681b      	ldr	r3, [r3, #0]
 800e7d8:	4618      	mov	r0, r3
 800e7da:	f003 f84e 	bl	801187a <SDMMC_GetPowerState>
 800e7de:	4603      	mov	r3, r0
 800e7e0:	2b00      	cmp	r3, #0
 800e7e2:	d102      	bne.n	800e7ea <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800e7e4:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 800e7e8:	e0a8      	b.n	800e93c <SD_InitCard+0x174>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 800e7ea:	687b      	ldr	r3, [r7, #4]
 800e7ec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e7ee:	2b03      	cmp	r3, #3
 800e7f0:	d02e      	beq.n	800e850 <SD_InitCard+0x88>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 800e7f2:	687b      	ldr	r3, [r7, #4]
 800e7f4:	681b      	ldr	r3, [r3, #0]
 800e7f6:	4618      	mov	r0, r3
 800e7f8:	f003 fa9a 	bl	8011d30 <SDMMC_CmdSendCID>
 800e7fc:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800e7fe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e800:	2b00      	cmp	r3, #0
 800e802:	d001      	beq.n	800e808 <SD_InitCard+0x40>
    {
      return errorstate;
 800e804:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e806:	e099      	b.n	800e93c <SD_InitCard+0x174>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800e808:	687b      	ldr	r3, [r7, #4]
 800e80a:	681b      	ldr	r3, [r3, #0]
 800e80c:	2100      	movs	r1, #0
 800e80e:	4618      	mov	r0, r3
 800e810:	f003 f879 	bl	8011906 <SDMMC_GetResponse>
 800e814:	4602      	mov	r2, r0
 800e816:	687b      	ldr	r3, [r7, #4]
 800e818:	671a      	str	r2, [r3, #112]	; 0x70
      hsd->CID[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 800e81a:	687b      	ldr	r3, [r7, #4]
 800e81c:	681b      	ldr	r3, [r3, #0]
 800e81e:	2104      	movs	r1, #4
 800e820:	4618      	mov	r0, r3
 800e822:	f003 f870 	bl	8011906 <SDMMC_GetResponse>
 800e826:	4602      	mov	r2, r0
 800e828:	687b      	ldr	r3, [r7, #4]
 800e82a:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 800e82c:	687b      	ldr	r3, [r7, #4]
 800e82e:	681b      	ldr	r3, [r3, #0]
 800e830:	2108      	movs	r1, #8
 800e832:	4618      	mov	r0, r3
 800e834:	f003 f867 	bl	8011906 <SDMMC_GetResponse>
 800e838:	4602      	mov	r2, r0
 800e83a:	687b      	ldr	r3, [r7, #4]
 800e83c:	679a      	str	r2, [r3, #120]	; 0x78
      hsd->CID[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 800e83e:	687b      	ldr	r3, [r7, #4]
 800e840:	681b      	ldr	r3, [r3, #0]
 800e842:	210c      	movs	r1, #12
 800e844:	4618      	mov	r0, r3
 800e846:	f003 f85e 	bl	8011906 <SDMMC_GetResponse>
 800e84a:	4602      	mov	r2, r0
 800e84c:	687b      	ldr	r3, [r7, #4]
 800e84e:	67da      	str	r2, [r3, #124]	; 0x7c
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 800e850:	687b      	ldr	r3, [r7, #4]
 800e852:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e854:	2b03      	cmp	r3, #3
 800e856:	d00d      	beq.n	800e874 <SD_InitCard+0xac>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 800e858:	687b      	ldr	r3, [r7, #4]
 800e85a:	681b      	ldr	r3, [r3, #0]
 800e85c:	f107 020e 	add.w	r2, r7, #14
 800e860:	4611      	mov	r1, r2
 800e862:	4618      	mov	r0, r3
 800e864:	f003 faa3 	bl	8011dae <SDMMC_CmdSetRelAdd>
 800e868:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800e86a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e86c:	2b00      	cmp	r3, #0
 800e86e:	d001      	beq.n	800e874 <SD_InitCard+0xac>
    {
      return errorstate;
 800e870:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e872:	e063      	b.n	800e93c <SD_InitCard+0x174>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 800e874:	687b      	ldr	r3, [r7, #4]
 800e876:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e878:	2b03      	cmp	r3, #3
 800e87a:	d036      	beq.n	800e8ea <SD_InitCard+0x122>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 800e87c:	89fb      	ldrh	r3, [r7, #14]
 800e87e:	461a      	mov	r2, r3
 800e880:	687b      	ldr	r3, [r7, #4]
 800e882:	649a      	str	r2, [r3, #72]	; 0x48

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800e884:	687b      	ldr	r3, [r7, #4]
 800e886:	681a      	ldr	r2, [r3, #0]
 800e888:	687b      	ldr	r3, [r7, #4]
 800e88a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800e88c:	041b      	lsls	r3, r3, #16
 800e88e:	4619      	mov	r1, r3
 800e890:	4610      	mov	r0, r2
 800e892:	f003 fa6c 	bl	8011d6e <SDMMC_CmdSendCSD>
 800e896:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800e898:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e89a:	2b00      	cmp	r3, #0
 800e89c:	d001      	beq.n	800e8a2 <SD_InitCard+0xda>
    {
      return errorstate;
 800e89e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e8a0:	e04c      	b.n	800e93c <SD_InitCard+0x174>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800e8a2:	687b      	ldr	r3, [r7, #4]
 800e8a4:	681b      	ldr	r3, [r3, #0]
 800e8a6:	2100      	movs	r1, #0
 800e8a8:	4618      	mov	r0, r3
 800e8aa:	f003 f82c 	bl	8011906 <SDMMC_GetResponse>
 800e8ae:	4602      	mov	r2, r0
 800e8b0:	687b      	ldr	r3, [r7, #4]
 800e8b2:	661a      	str	r2, [r3, #96]	; 0x60
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 800e8b4:	687b      	ldr	r3, [r7, #4]
 800e8b6:	681b      	ldr	r3, [r3, #0]
 800e8b8:	2104      	movs	r1, #4
 800e8ba:	4618      	mov	r0, r3
 800e8bc:	f003 f823 	bl	8011906 <SDMMC_GetResponse>
 800e8c0:	4602      	mov	r2, r0
 800e8c2:	687b      	ldr	r3, [r7, #4]
 800e8c4:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 800e8c6:	687b      	ldr	r3, [r7, #4]
 800e8c8:	681b      	ldr	r3, [r3, #0]
 800e8ca:	2108      	movs	r1, #8
 800e8cc:	4618      	mov	r0, r3
 800e8ce:	f003 f81a 	bl	8011906 <SDMMC_GetResponse>
 800e8d2:	4602      	mov	r2, r0
 800e8d4:	687b      	ldr	r3, [r7, #4]
 800e8d6:	669a      	str	r2, [r3, #104]	; 0x68
      hsd->CSD[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 800e8d8:	687b      	ldr	r3, [r7, #4]
 800e8da:	681b      	ldr	r3, [r3, #0]
 800e8dc:	210c      	movs	r1, #12
 800e8de:	4618      	mov	r0, r3
 800e8e0:	f003 f811 	bl	8011906 <SDMMC_GetResponse>
 800e8e4:	4602      	mov	r2, r0
 800e8e6:	687b      	ldr	r3, [r7, #4]
 800e8e8:	66da      	str	r2, [r3, #108]	; 0x6c
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2) >> 20U);
 800e8ea:	687b      	ldr	r3, [r7, #4]
 800e8ec:	681b      	ldr	r3, [r3, #0]
 800e8ee:	2104      	movs	r1, #4
 800e8f0:	4618      	mov	r0, r3
 800e8f2:	f003 f808 	bl	8011906 <SDMMC_GetResponse>
 800e8f6:	4603      	mov	r3, r0
 800e8f8:	0d1a      	lsrs	r2, r3, #20
 800e8fa:	687b      	ldr	r3, [r7, #4]
 800e8fc:	645a      	str	r2, [r3, #68]	; 0x44

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 800e8fe:	f107 0310 	add.w	r3, r7, #16
 800e902:	4619      	mov	r1, r3
 800e904:	6878      	ldr	r0, [r7, #4]
 800e906:	f7ff fc0f 	bl	800e128 <HAL_SD_GetCardCSD>
 800e90a:	4603      	mov	r3, r0
 800e90c:	2b00      	cmp	r3, #0
 800e90e:	d002      	beq.n	800e916 <SD_InitCard+0x14e>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800e910:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800e914:	e012      	b.n	800e93c <SD_InitCard+0x174>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 800e916:	687b      	ldr	r3, [r7, #4]
 800e918:	6819      	ldr	r1, [r3, #0]
 800e91a:	687b      	ldr	r3, [r7, #4]
 800e91c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800e91e:	041b      	lsls	r3, r3, #16
 800e920:	f04f 0400 	mov.w	r4, #0
 800e924:	461a      	mov	r2, r3
 800e926:	4623      	mov	r3, r4
 800e928:	4608      	mov	r0, r1
 800e92a:	f003 f917 	bl	8011b5c <SDMMC_CmdSelDesel>
 800e92e:	63f8      	str	r0, [r7, #60]	; 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 800e930:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e932:	2b00      	cmp	r3, #0
 800e934:	d001      	beq.n	800e93a <SD_InitCard+0x172>
  {
    return errorstate;
 800e936:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e938:	e000      	b.n	800e93c <SD_InitCard+0x174>
  }

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 800e93a:	2300      	movs	r3, #0
}
 800e93c:	4618      	mov	r0, r3
 800e93e:	3744      	adds	r7, #68	; 0x44
 800e940:	46bd      	mov	sp, r7
 800e942:	bd90      	pop	{r4, r7, pc}

0800e944 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 800e944:	b580      	push	{r7, lr}
 800e946:	b088      	sub	sp, #32
 800e948:	af00      	add	r7, sp, #0
 800e94a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800e94c:	2300      	movs	r3, #0
 800e94e:	60fb      	str	r3, [r7, #12]
  uint32_t response = 0U, validvoltage = 0U;
 800e950:	2300      	movs	r3, #0
 800e952:	61fb      	str	r3, [r7, #28]
 800e954:	2300      	movs	r3, #0
 800e956:	61bb      	str	r3, [r7, #24]
  uint32_t errorstate;
#if (USE_SD_TRANSCEIVER != 0U)
  uint32_t tickstart = HAL_GetTick();
 800e958:	f7f6 fa2c 	bl	8004db4 <HAL_GetTick>
 800e95c:	6178      	str	r0, [r7, #20]
#endif /* USE_SD_TRANSCEIVER  */

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800e95e:	687b      	ldr	r3, [r7, #4]
 800e960:	681b      	ldr	r3, [r3, #0]
 800e962:	4618      	mov	r0, r3
 800e964:	f003 f91e 	bl	8011ba4 <SDMMC_CmdGoIdleState>
 800e968:	6138      	str	r0, [r7, #16]
  if(errorstate != HAL_SD_ERROR_NONE)
 800e96a:	693b      	ldr	r3, [r7, #16]
 800e96c:	2b00      	cmp	r3, #0
 800e96e:	d001      	beq.n	800e974 <SD_PowerON+0x30>
  {
    return errorstate;
 800e970:	693b      	ldr	r3, [r7, #16]
 800e972:	e0e9      	b.n	800eb48 <SD_PowerON+0x204>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 800e974:	687b      	ldr	r3, [r7, #4]
 800e976:	681b      	ldr	r3, [r3, #0]
 800e978:	4618      	mov	r0, r3
 800e97a:	f003 f931 	bl	8011be0 <SDMMC_CmdOperCond>
 800e97e:	6138      	str	r0, [r7, #16]
  if(errorstate != HAL_SD_ERROR_NONE)
 800e980:	693b      	ldr	r3, [r7, #16]
 800e982:	2b00      	cmp	r3, #0
 800e984:	d00d      	beq.n	800e9a2 <SD_PowerON+0x5e>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 800e986:	687b      	ldr	r3, [r7, #4]
 800e988:	2200      	movs	r2, #0
 800e98a:	641a      	str	r2, [r3, #64]	; 0x40
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800e98c:	687b      	ldr	r3, [r7, #4]
 800e98e:	681b      	ldr	r3, [r3, #0]
 800e990:	4618      	mov	r0, r3
 800e992:	f003 f907 	bl	8011ba4 <SDMMC_CmdGoIdleState>
 800e996:	6138      	str	r0, [r7, #16]
    if(errorstate != HAL_SD_ERROR_NONE)
 800e998:	693b      	ldr	r3, [r7, #16]
 800e99a:	2b00      	cmp	r3, #0
 800e99c:	d004      	beq.n	800e9a8 <SD_PowerON+0x64>
    {
      return errorstate;
 800e99e:	693b      	ldr	r3, [r7, #16]
 800e9a0:	e0d2      	b.n	800eb48 <SD_PowerON+0x204>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 800e9a2:	687b      	ldr	r3, [r7, #4]
 800e9a4:	2201      	movs	r2, #1
 800e9a6:	641a      	str	r2, [r3, #64]	; 0x40
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 800e9a8:	687b      	ldr	r3, [r7, #4]
 800e9aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e9ac:	2b01      	cmp	r3, #1
 800e9ae:	d137      	bne.n	800ea20 <SD_PowerON+0xdc>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800e9b0:	687b      	ldr	r3, [r7, #4]
 800e9b2:	681b      	ldr	r3, [r3, #0]
 800e9b4:	2100      	movs	r1, #0
 800e9b6:	4618      	mov	r0, r3
 800e9b8:	f003 f932 	bl	8011c20 <SDMMC_CmdAppCommand>
 800e9bc:	6138      	str	r0, [r7, #16]
    if(errorstate != HAL_SD_ERROR_NONE)
 800e9be:	693b      	ldr	r3, [r7, #16]
 800e9c0:	2b00      	cmp	r3, #0
 800e9c2:	d02d      	beq.n	800ea20 <SD_PowerON+0xdc>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800e9c4:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800e9c8:	e0be      	b.n	800eb48 <SD_PowerON+0x204>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800e9ca:	687b      	ldr	r3, [r7, #4]
 800e9cc:	681b      	ldr	r3, [r3, #0]
 800e9ce:	2100      	movs	r1, #0
 800e9d0:	4618      	mov	r0, r3
 800e9d2:	f003 f925 	bl	8011c20 <SDMMC_CmdAppCommand>
 800e9d6:	6138      	str	r0, [r7, #16]
    if(errorstate != HAL_SD_ERROR_NONE)
 800e9d8:	693b      	ldr	r3, [r7, #16]
 800e9da:	2b00      	cmp	r3, #0
 800e9dc:	d001      	beq.n	800e9e2 <SD_PowerON+0x9e>
    {
      return errorstate;
 800e9de:	693b      	ldr	r3, [r7, #16]
 800e9e0:	e0b2      	b.n	800eb48 <SD_PowerON+0x204>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 800e9e2:	687b      	ldr	r3, [r7, #4]
 800e9e4:	681b      	ldr	r3, [r3, #0]
 800e9e6:	495a      	ldr	r1, [pc, #360]	; (800eb50 <SD_PowerON+0x20c>)
 800e9e8:	4618      	mov	r0, r3
 800e9ea:	f003 f93c 	bl	8011c66 <SDMMC_CmdAppOperCommand>
 800e9ee:	6138      	str	r0, [r7, #16]
    if(errorstate != HAL_SD_ERROR_NONE)
 800e9f0:	693b      	ldr	r3, [r7, #16]
 800e9f2:	2b00      	cmp	r3, #0
 800e9f4:	d002      	beq.n	800e9fc <SD_PowerON+0xb8>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800e9f6:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800e9fa:	e0a5      	b.n	800eb48 <SD_PowerON+0x204>
    }

    /* Get command response */
    response = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800e9fc:	687b      	ldr	r3, [r7, #4]
 800e9fe:	681b      	ldr	r3, [r3, #0]
 800ea00:	2100      	movs	r1, #0
 800ea02:	4618      	mov	r0, r3
 800ea04:	f002 ff7f 	bl	8011906 <SDMMC_GetResponse>
 800ea08:	61f8      	str	r0, [r7, #28]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 800ea0a:	69fb      	ldr	r3, [r7, #28]
 800ea0c:	0fdb      	lsrs	r3, r3, #31
 800ea0e:	2b01      	cmp	r3, #1
 800ea10:	d101      	bne.n	800ea16 <SD_PowerON+0xd2>
 800ea12:	2301      	movs	r3, #1
 800ea14:	e000      	b.n	800ea18 <SD_PowerON+0xd4>
 800ea16:	2300      	movs	r3, #0
 800ea18:	61bb      	str	r3, [r7, #24]

    count++;
 800ea1a:	68fb      	ldr	r3, [r7, #12]
 800ea1c:	3301      	adds	r3, #1
 800ea1e:	60fb      	str	r3, [r7, #12]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 800ea20:	68fb      	ldr	r3, [r7, #12]
 800ea22:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800ea26:	4293      	cmp	r3, r2
 800ea28:	d802      	bhi.n	800ea30 <SD_PowerON+0xec>
 800ea2a:	69bb      	ldr	r3, [r7, #24]
 800ea2c:	2b00      	cmp	r3, #0
 800ea2e:	d0cc      	beq.n	800e9ca <SD_PowerON+0x86>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 800ea30:	68fb      	ldr	r3, [r7, #12]
 800ea32:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800ea36:	4293      	cmp	r3, r2
 800ea38:	d902      	bls.n	800ea40 <SD_PowerON+0xfc>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 800ea3a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800ea3e:	e083      	b.n	800eb48 <SD_PowerON+0x204>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 800ea40:	69fb      	ldr	r3, [r7, #28]
 800ea42:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800ea46:	2b00      	cmp	r3, #0
 800ea48:	d07d      	beq.n	800eb46 <SD_PowerON+0x202>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 800ea4a:	687b      	ldr	r3, [r7, #4]
 800ea4c:	2201      	movs	r2, #1
 800ea4e:	63da      	str	r2, [r3, #60]	; 0x3c
#if (USE_SD_TRANSCEIVER != 0U)
    if (hsd->Init.TranceiverPresent == SDMMC_TRANSCEIVER_PRESENT)
 800ea50:	687b      	ldr	r3, [r7, #4]
 800ea52:	699b      	ldr	r3, [r3, #24]
 800ea54:	2b02      	cmp	r3, #2
 800ea56:	d176      	bne.n	800eb46 <SD_PowerON+0x202>
    {
      if((response & SD_SWITCH_1_8V_CAPACITY) == SD_SWITCH_1_8V_CAPACITY)
 800ea58:	69fb      	ldr	r3, [r7, #28]
 800ea5a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800ea5e:	2b00      	cmp	r3, #0
 800ea60:	d071      	beq.n	800eb46 <SD_PowerON+0x202>
      {
        hsd->SdCard.CardSpeed = CARD_ULTRA_HIGH_SPEED;
 800ea62:	687b      	ldr	r3, [r7, #4]
 800ea64:	f44f 7200 	mov.w	r2, #512	; 0x200
 800ea68:	65da      	str	r2, [r3, #92]	; 0x5c

        /* Start switching procedue */
        hsd->Instance->POWER |= SDMMC_POWER_VSWITCHEN;
 800ea6a:	687b      	ldr	r3, [r7, #4]
 800ea6c:	681b      	ldr	r3, [r3, #0]
 800ea6e:	681a      	ldr	r2, [r3, #0]
 800ea70:	687b      	ldr	r3, [r7, #4]
 800ea72:	681b      	ldr	r3, [r3, #0]
 800ea74:	f042 0208 	orr.w	r2, r2, #8
 800ea78:	601a      	str	r2, [r3, #0]

        /* Send CMD11 to switch 1.8V mode */
        errorstate = SDMMC_CmdVoltageSwitch(hsd->Instance);
 800ea7a:	687b      	ldr	r3, [r7, #4]
 800ea7c:	681b      	ldr	r3, [r3, #0]
 800ea7e:	4618      	mov	r0, r3
 800ea80:	f003 f9fc 	bl	8011e7c <SDMMC_CmdVoltageSwitch>
 800ea84:	6138      	str	r0, [r7, #16]
        if(errorstate != HAL_SD_ERROR_NONE)
 800ea86:	693b      	ldr	r3, [r7, #16]
 800ea88:	2b00      	cmp	r3, #0
 800ea8a:	d00c      	beq.n	800eaa6 <SD_PowerON+0x162>
        {
          return errorstate;
 800ea8c:	693b      	ldr	r3, [r7, #16]
 800ea8e:	e05b      	b.n	800eb48 <SD_PowerON+0x204>
        }

        /* Check to CKSTOP */
        while(( hsd->Instance->STA & SDMMC_FLAG_CKSTOP) != SDMMC_FLAG_CKSTOP)
        {
          if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800ea90:	f7f6 f990 	bl	8004db4 <HAL_GetTick>
 800ea94:	4602      	mov	r2, r0
 800ea96:	697b      	ldr	r3, [r7, #20]
 800ea98:	1ad3      	subs	r3, r2, r3
 800ea9a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ea9e:	d102      	bne.n	800eaa6 <SD_PowerON+0x162>
          {
            return HAL_SD_ERROR_TIMEOUT;
 800eaa0:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800eaa4:	e050      	b.n	800eb48 <SD_PowerON+0x204>
        while(( hsd->Instance->STA & SDMMC_FLAG_CKSTOP) != SDMMC_FLAG_CKSTOP)
 800eaa6:	687b      	ldr	r3, [r7, #4]
 800eaa8:	681b      	ldr	r3, [r3, #0]
 800eaaa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800eaac:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800eab0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800eab4:	d1ec      	bne.n	800ea90 <SD_PowerON+0x14c>
          }
        }

        /* Clear CKSTOP Flag */
        hsd->Instance->ICR = SDMMC_FLAG_CKSTOP;
 800eab6:	687b      	ldr	r3, [r7, #4]
 800eab8:	681b      	ldr	r3, [r3, #0]
 800eaba:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 800eabe:	639a      	str	r2, [r3, #56]	; 0x38

        /* Check to BusyD0 */
        if(( hsd->Instance->STA & SDMMC_FLAG_BUSYD0) != SDMMC_FLAG_BUSYD0)
 800eac0:	687b      	ldr	r3, [r7, #4]
 800eac2:	681b      	ldr	r3, [r3, #0]
 800eac4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800eac6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800eaca:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800eace:	d002      	beq.n	800ead6 <SD_PowerON+0x192>
        {
          /* Error when activate Voltage Switch in SDMMC Peripheral */
          return SDMMC_ERROR_UNSUPPORTED_FEATURE;
 800ead0:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800ead4:	e038      	b.n	800eb48 <SD_PowerON+0x204>
        {
          /* Enable Transceiver Switch PIN */
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
          hsd->DriveTransceiver_1_8V_Callback(SET);
#else
          HAL_SD_DriveTransceiver_1_8V_Callback(SET);
 800ead6:	2001      	movs	r0, #1
 800ead8:	f7ff fb1a 	bl	800e110 <HAL_SD_DriveTransceiver_1_8V_Callback>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */

          /* Switch ready */
          hsd->Instance->POWER |= SDMMC_POWER_VSWITCH;
 800eadc:	687b      	ldr	r3, [r7, #4]
 800eade:	681b      	ldr	r3, [r3, #0]
 800eae0:	681a      	ldr	r2, [r3, #0]
 800eae2:	687b      	ldr	r3, [r7, #4]
 800eae4:	681b      	ldr	r3, [r3, #0]
 800eae6:	f042 0204 	orr.w	r2, r2, #4
 800eaea:	601a      	str	r2, [r3, #0]

          /* Check VSWEND Flag */
          while(( hsd->Instance->STA & SDMMC_FLAG_VSWEND) != SDMMC_FLAG_VSWEND)
 800eaec:	e00a      	b.n	800eb04 <SD_PowerON+0x1c0>
          {
            if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800eaee:	f7f6 f961 	bl	8004db4 <HAL_GetTick>
 800eaf2:	4602      	mov	r2, r0
 800eaf4:	697b      	ldr	r3, [r7, #20]
 800eaf6:	1ad3      	subs	r3, r2, r3
 800eaf8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800eafc:	d102      	bne.n	800eb04 <SD_PowerON+0x1c0>
            {
              return HAL_SD_ERROR_TIMEOUT;
 800eafe:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800eb02:	e021      	b.n	800eb48 <SD_PowerON+0x204>
          while(( hsd->Instance->STA & SDMMC_FLAG_VSWEND) != SDMMC_FLAG_VSWEND)
 800eb04:	687b      	ldr	r3, [r7, #4]
 800eb06:	681b      	ldr	r3, [r3, #0]
 800eb08:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800eb0a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800eb0e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800eb12:	d1ec      	bne.n	800eaee <SD_PowerON+0x1aa>
            }
          }

          /* Clear VSWEND Flag */
          hsd->Instance->ICR = SDMMC_FLAG_VSWEND;
 800eb14:	687b      	ldr	r3, [r7, #4]
 800eb16:	681b      	ldr	r3, [r3, #0]
 800eb18:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800eb1c:	639a      	str	r2, [r3, #56]	; 0x38

          /* Check BusyD0 status */
          if(( hsd->Instance->STA & SDMMC_FLAG_BUSYD0) == SDMMC_FLAG_BUSYD0)
 800eb1e:	687b      	ldr	r3, [r7, #4]
 800eb20:	681b      	ldr	r3, [r3, #0]
 800eb22:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800eb24:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800eb28:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800eb2c:	d102      	bne.n	800eb34 <SD_PowerON+0x1f0>
          {
            /* Error when enabling 1.8V mode */
            return HAL_SD_ERROR_INVALID_VOLTRANGE;
 800eb2e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800eb32:	e009      	b.n	800eb48 <SD_PowerON+0x204>
          }
          /* Switch to 1.8V OK */

          /* Disable VSWITCH FLAG from SDMMC Peripheral */
          hsd->Instance->POWER = 0x13U;
 800eb34:	687b      	ldr	r3, [r7, #4]
 800eb36:	681b      	ldr	r3, [r3, #0]
 800eb38:	2213      	movs	r2, #19
 800eb3a:	601a      	str	r2, [r3, #0]

          /* Clean Status flags */
          hsd->Instance->ICR = 0xFFFFFFFFU;
 800eb3c:	687b      	ldr	r3, [r7, #4]
 800eb3e:	681b      	ldr	r3, [r3, #0]
 800eb40:	f04f 32ff 	mov.w	r2, #4294967295
 800eb44:	639a      	str	r2, [r3, #56]	; 0x38
      }
    }
#endif /* USE_SD_TRANSCEIVER  */
  }

  return HAL_SD_ERROR_NONE;
 800eb46:	2300      	movs	r3, #0
}
 800eb48:	4618      	mov	r0, r3
 800eb4a:	3720      	adds	r7, #32
 800eb4c:	46bd      	mov	sp, r7
 800eb4e:	bd80      	pop	{r7, pc}
 800eb50:	c1100000 	.word	0xc1100000

0800eb54 <SD_SendSDStatus>:
  * @param  pSDstatus: Pointer to the buffer that will contain the SD card status
  *         SD Status register)
  * @retval error state
  */
static uint32_t SD_SendSDStatus(SD_HandleTypeDef *hsd, uint32_t *pSDstatus)
{
 800eb54:	b580      	push	{r7, lr}
 800eb56:	b08c      	sub	sp, #48	; 0x30
 800eb58:	af00      	add	r7, sp, #0
 800eb5a:	6078      	str	r0, [r7, #4]
 800eb5c:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800eb5e:	f7f6 f929 	bl	8004db4 <HAL_GetTick>
 800eb62:	6278      	str	r0, [r7, #36]	; 0x24
  uint32_t count;
  uint32_t *pData = pSDstatus;
 800eb64:	683b      	ldr	r3, [r7, #0]
 800eb66:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check SD response */
  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800eb68:	687b      	ldr	r3, [r7, #4]
 800eb6a:	681b      	ldr	r3, [r3, #0]
 800eb6c:	2100      	movs	r1, #0
 800eb6e:	4618      	mov	r0, r3
 800eb70:	f002 fec9 	bl	8011906 <SDMMC_GetResponse>
 800eb74:	4603      	mov	r3, r0
 800eb76:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800eb7a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800eb7e:	d102      	bne.n	800eb86 <SD_SendSDStatus+0x32>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800eb80:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800eb84:	e0b0      	b.n	800ece8 <SD_SendSDStatus+0x194>
  }

  /* Set block size for card if it is not equal to current block size for card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 64U);
 800eb86:	687b      	ldr	r3, [r7, #4]
 800eb88:	681b      	ldr	r3, [r3, #0]
 800eb8a:	2140      	movs	r1, #64	; 0x40
 800eb8c:	4618      	mov	r0, r3
 800eb8e:	f002 fef9 	bl	8011984 <SDMMC_CmdBlockLength>
 800eb92:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800eb94:	6a3b      	ldr	r3, [r7, #32]
 800eb96:	2b00      	cmp	r3, #0
 800eb98:	d005      	beq.n	800eba6 <SD_SendSDStatus+0x52>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 800eb9a:	687b      	ldr	r3, [r7, #4]
 800eb9c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800eb9e:	687b      	ldr	r3, [r7, #4]
 800eba0:	639a      	str	r2, [r3, #56]	; 0x38
    return errorstate;
 800eba2:	6a3b      	ldr	r3, [r7, #32]
 800eba4:	e0a0      	b.n	800ece8 <SD_SendSDStatus+0x194>
  }

  /* Send CMD55 */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800eba6:	687b      	ldr	r3, [r7, #4]
 800eba8:	681a      	ldr	r2, [r3, #0]
 800ebaa:	687b      	ldr	r3, [r7, #4]
 800ebac:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800ebae:	041b      	lsls	r3, r3, #16
 800ebb0:	4619      	mov	r1, r3
 800ebb2:	4610      	mov	r0, r2
 800ebb4:	f003 f834 	bl	8011c20 <SDMMC_CmdAppCommand>
 800ebb8:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800ebba:	6a3b      	ldr	r3, [r7, #32]
 800ebbc:	2b00      	cmp	r3, #0
 800ebbe:	d005      	beq.n	800ebcc <SD_SendSDStatus+0x78>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 800ebc0:	687b      	ldr	r3, [r7, #4]
 800ebc2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800ebc4:	687b      	ldr	r3, [r7, #4]
 800ebc6:	639a      	str	r2, [r3, #56]	; 0x38
    return errorstate;
 800ebc8:	6a3b      	ldr	r3, [r7, #32]
 800ebca:	e08d      	b.n	800ece8 <SD_SendSDStatus+0x194>
  }

  /* Configure the SD DPSM (Data Path State Machine) */
  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800ebcc:	f04f 33ff 	mov.w	r3, #4294967295
 800ebd0:	60bb      	str	r3, [r7, #8]
  config.DataLength    = 64U;
 800ebd2:	2340      	movs	r3, #64	; 0x40
 800ebd4:	60fb      	str	r3, [r7, #12]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_64B;
 800ebd6:	2360      	movs	r3, #96	; 0x60
 800ebd8:	613b      	str	r3, [r7, #16]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 800ebda:	2302      	movs	r3, #2
 800ebdc:	617b      	str	r3, [r7, #20]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800ebde:	2300      	movs	r3, #0
 800ebe0:	61bb      	str	r3, [r7, #24]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 800ebe2:	2301      	movs	r3, #1
 800ebe4:	61fb      	str	r3, [r7, #28]
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 800ebe6:	687b      	ldr	r3, [r7, #4]
 800ebe8:	681b      	ldr	r3, [r3, #0]
 800ebea:	f107 0208 	add.w	r2, r7, #8
 800ebee:	4611      	mov	r1, r2
 800ebf0:	4618      	mov	r0, r3
 800ebf2:	f002 fe9b 	bl	801192c <SDMMC_ConfigData>

  /* Send ACMD13 (SD_APP_STAUS)  with argument as card's RCA */
  errorstate = SDMMC_CmdStatusRegister(hsd->Instance);
 800ebf6:	687b      	ldr	r3, [r7, #4]
 800ebf8:	681b      	ldr	r3, [r3, #0]
 800ebfa:	4618      	mov	r0, r3
 800ebfc:	f003 f91c 	bl	8011e38 <SDMMC_CmdStatusRegister>
 800ec00:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800ec02:	6a3b      	ldr	r3, [r7, #32]
 800ec04:	2b00      	cmp	r3, #0
 800ec06:	d02b      	beq.n	800ec60 <SD_SendSDStatus+0x10c>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 800ec08:	687b      	ldr	r3, [r7, #4]
 800ec0a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800ec0c:	687b      	ldr	r3, [r7, #4]
 800ec0e:	639a      	str	r2, [r3, #56]	; 0x38
    return errorstate;
 800ec10:	6a3b      	ldr	r3, [r7, #32]
 800ec12:	e069      	b.n	800ece8 <SD_SendSDStatus+0x194>
  }

  /* Get status data */
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
  {
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF))
 800ec14:	687b      	ldr	r3, [r7, #4]
 800ec16:	681b      	ldr	r3, [r3, #0]
 800ec18:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ec1a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800ec1e:	2b00      	cmp	r3, #0
 800ec20:	d013      	beq.n	800ec4a <SD_SendSDStatus+0xf6>
    {
      for(count = 0U; count < 8U; count++)
 800ec22:	2300      	movs	r3, #0
 800ec24:	62fb      	str	r3, [r7, #44]	; 0x2c
 800ec26:	e00d      	b.n	800ec44 <SD_SendSDStatus+0xf0>
      {
        *pData = SDMMC_ReadFIFO(hsd->Instance);
 800ec28:	687b      	ldr	r3, [r7, #4]
 800ec2a:	681b      	ldr	r3, [r3, #0]
 800ec2c:	4618      	mov	r0, r3
 800ec2e:	f002 fdf5 	bl	801181c <SDMMC_ReadFIFO>
 800ec32:	4602      	mov	r2, r0
 800ec34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ec36:	601a      	str	r2, [r3, #0]
        pData++;
 800ec38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ec3a:	3304      	adds	r3, #4
 800ec3c:	62bb      	str	r3, [r7, #40]	; 0x28
      for(count = 0U; count < 8U; count++)
 800ec3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ec40:	3301      	adds	r3, #1
 800ec42:	62fb      	str	r3, [r7, #44]	; 0x2c
 800ec44:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ec46:	2b07      	cmp	r3, #7
 800ec48:	d9ee      	bls.n	800ec28 <SD_SendSDStatus+0xd4>
      }
    }

    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800ec4a:	f7f6 f8b3 	bl	8004db4 <HAL_GetTick>
 800ec4e:	4602      	mov	r2, r0
 800ec50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ec52:	1ad3      	subs	r3, r2, r3
 800ec54:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ec58:	d102      	bne.n	800ec60 <SD_SendSDStatus+0x10c>
    {
      return HAL_SD_ERROR_TIMEOUT;
 800ec5a:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800ec5e:	e043      	b.n	800ece8 <SD_SendSDStatus+0x194>
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 800ec60:	687b      	ldr	r3, [r7, #4]
 800ec62:	681b      	ldr	r3, [r3, #0]
 800ec64:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ec66:	f403 7395 	and.w	r3, r3, #298	; 0x12a
 800ec6a:	2b00      	cmp	r3, #0
 800ec6c:	d0d2      	beq.n	800ec14 <SD_SendSDStatus+0xc0>
    }
  }

  if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 800ec6e:	687b      	ldr	r3, [r7, #4]
 800ec70:	681b      	ldr	r3, [r3, #0]
 800ec72:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ec74:	f003 0308 	and.w	r3, r3, #8
 800ec78:	2b00      	cmp	r3, #0
 800ec7a:	d001      	beq.n	800ec80 <SD_SendSDStatus+0x12c>
  {
    return HAL_SD_ERROR_DATA_TIMEOUT;
 800ec7c:	2308      	movs	r3, #8
 800ec7e:	e033      	b.n	800ece8 <SD_SendSDStatus+0x194>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 800ec80:	687b      	ldr	r3, [r7, #4]
 800ec82:	681b      	ldr	r3, [r3, #0]
 800ec84:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ec86:	f003 0302 	and.w	r3, r3, #2
 800ec8a:	2b00      	cmp	r3, #0
 800ec8c:	d001      	beq.n	800ec92 <SD_SendSDStatus+0x13e>
  {
    return HAL_SD_ERROR_DATA_CRC_FAIL;
 800ec8e:	2302      	movs	r3, #2
 800ec90:	e02a      	b.n	800ece8 <SD_SendSDStatus+0x194>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 800ec92:	687b      	ldr	r3, [r7, #4]
 800ec94:	681b      	ldr	r3, [r3, #0]
 800ec96:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ec98:	f003 0320 	and.w	r3, r3, #32
 800ec9c:	2b00      	cmp	r3, #0
 800ec9e:	d017      	beq.n	800ecd0 <SD_SendSDStatus+0x17c>
  {
    return HAL_SD_ERROR_RX_OVERRUN;
 800eca0:	2320      	movs	r3, #32
 800eca2:	e021      	b.n	800ece8 <SD_SendSDStatus+0x194>
    /* Nothing to do */
  }

  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DPSMACT)))
  {
    *pData = SDMMC_ReadFIFO(hsd->Instance);
 800eca4:	687b      	ldr	r3, [r7, #4]
 800eca6:	681b      	ldr	r3, [r3, #0]
 800eca8:	4618      	mov	r0, r3
 800ecaa:	f002 fdb7 	bl	801181c <SDMMC_ReadFIFO>
 800ecae:	4602      	mov	r2, r0
 800ecb0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ecb2:	601a      	str	r2, [r3, #0]
    pData++;
 800ecb4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ecb6:	3304      	adds	r3, #4
 800ecb8:	62bb      	str	r3, [r7, #40]	; 0x28

    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800ecba:	f7f6 f87b 	bl	8004db4 <HAL_GetTick>
 800ecbe:	4602      	mov	r2, r0
 800ecc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ecc2:	1ad3      	subs	r3, r2, r3
 800ecc4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ecc8:	d102      	bne.n	800ecd0 <SD_SendSDStatus+0x17c>
    {
      return HAL_SD_ERROR_TIMEOUT;
 800ecca:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800ecce:	e00b      	b.n	800ece8 <SD_SendSDStatus+0x194>
  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DPSMACT)))
 800ecd0:	687b      	ldr	r3, [r7, #4]
 800ecd2:	681b      	ldr	r3, [r3, #0]
 800ecd4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ecd6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800ecda:	2b00      	cmp	r3, #0
 800ecdc:	d1e2      	bne.n	800eca4 <SD_SendSDStatus+0x150>
    }
  }

  /* Clear all the static status flags*/
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800ecde:	687b      	ldr	r3, [r7, #4]
 800ece0:	681b      	ldr	r3, [r3, #0]
 800ece2:	4a03      	ldr	r2, [pc, #12]	; (800ecf0 <SD_SendSDStatus+0x19c>)
 800ece4:	639a      	str	r2, [r3, #56]	; 0x38

  return HAL_SD_ERROR_NONE;
 800ece6:	2300      	movs	r3, #0
}
 800ece8:	4618      	mov	r0, r3
 800ecea:	3730      	adds	r7, #48	; 0x30
 800ecec:	46bd      	mov	sp, r7
 800ecee:	bd80      	pop	{r7, pc}
 800ecf0:	18000f3a 	.word	0x18000f3a

0800ecf4 <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 800ecf4:	b580      	push	{r7, lr}
 800ecf6:	b084      	sub	sp, #16
 800ecf8:	af00      	add	r7, sp, #0
 800ecfa:	6078      	str	r0, [r7, #4]
 800ecfc:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 800ecfe:	683b      	ldr	r3, [r7, #0]
 800ed00:	2b00      	cmp	r3, #0
 800ed02:	d102      	bne.n	800ed0a <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 800ed04:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800ed08:	e018      	b.n	800ed3c <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800ed0a:	687b      	ldr	r3, [r7, #4]
 800ed0c:	681a      	ldr	r2, [r3, #0]
 800ed0e:	687b      	ldr	r3, [r7, #4]
 800ed10:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800ed12:	041b      	lsls	r3, r3, #16
 800ed14:	4619      	mov	r1, r3
 800ed16:	4610      	mov	r0, r2
 800ed18:	f003 f86b 	bl	8011df2 <SDMMC_CmdSendStatus>
 800ed1c:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800ed1e:	68fb      	ldr	r3, [r7, #12]
 800ed20:	2b00      	cmp	r3, #0
 800ed22:	d001      	beq.n	800ed28 <SD_SendStatus+0x34>
  {
    return errorstate;
 800ed24:	68fb      	ldr	r3, [r7, #12]
 800ed26:	e009      	b.n	800ed3c <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800ed28:	687b      	ldr	r3, [r7, #4]
 800ed2a:	681b      	ldr	r3, [r3, #0]
 800ed2c:	2100      	movs	r1, #0
 800ed2e:	4618      	mov	r0, r3
 800ed30:	f002 fde9 	bl	8011906 <SDMMC_GetResponse>
 800ed34:	4602      	mov	r2, r0
 800ed36:	683b      	ldr	r3, [r7, #0]
 800ed38:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 800ed3a:	2300      	movs	r3, #0
}
 800ed3c:	4618      	mov	r0, r3
 800ed3e:	3710      	adds	r7, #16
 800ed40:	46bd      	mov	sp, r7
 800ed42:	bd80      	pop	{r7, pc}

0800ed44 <SD_WideBus_Enable>:
  * @brief  Enables the SDMMC wide bus mode.
  * @param  hsd: pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 800ed44:	b580      	push	{r7, lr}
 800ed46:	b086      	sub	sp, #24
 800ed48:	af00      	add	r7, sp, #0
 800ed4a:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0UL, 0UL};
 800ed4c:	2300      	movs	r3, #0
 800ed4e:	60fb      	str	r3, [r7, #12]
 800ed50:	2300      	movs	r3, #0
 800ed52:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800ed54:	687b      	ldr	r3, [r7, #4]
 800ed56:	681b      	ldr	r3, [r3, #0]
 800ed58:	2100      	movs	r1, #0
 800ed5a:	4618      	mov	r0, r3
 800ed5c:	f002 fdd3 	bl	8011906 <SDMMC_GetResponse>
 800ed60:	4603      	mov	r3, r0
 800ed62:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800ed66:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800ed6a:	d102      	bne.n	800ed72 <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800ed6c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800ed70:	e02f      	b.n	800edd2 <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 800ed72:	f107 030c 	add.w	r3, r7, #12
 800ed76:	4619      	mov	r1, r3
 800ed78:	6878      	ldr	r0, [r7, #4]
 800ed7a:	f000 f879 	bl	800ee70 <SD_FindSCR>
 800ed7e:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 800ed80:	697b      	ldr	r3, [r7, #20]
 800ed82:	2b00      	cmp	r3, #0
 800ed84:	d001      	beq.n	800ed8a <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 800ed86:	697b      	ldr	r3, [r7, #20]
 800ed88:	e023      	b.n	800edd2 <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800ed8a:	693b      	ldr	r3, [r7, #16]
 800ed8c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800ed90:	2b00      	cmp	r3, #0
 800ed92:	d01c      	beq.n	800edce <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800ed94:	687b      	ldr	r3, [r7, #4]
 800ed96:	681a      	ldr	r2, [r3, #0]
 800ed98:	687b      	ldr	r3, [r7, #4]
 800ed9a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800ed9c:	041b      	lsls	r3, r3, #16
 800ed9e:	4619      	mov	r1, r3
 800eda0:	4610      	mov	r0, r2
 800eda2:	f002 ff3d 	bl	8011c20 <SDMMC_CmdAppCommand>
 800eda6:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800eda8:	697b      	ldr	r3, [r7, #20]
 800edaa:	2b00      	cmp	r3, #0
 800edac:	d001      	beq.n	800edb2 <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 800edae:	697b      	ldr	r3, [r7, #20]
 800edb0:	e00f      	b.n	800edd2 <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 800edb2:	687b      	ldr	r3, [r7, #4]
 800edb4:	681b      	ldr	r3, [r3, #0]
 800edb6:	2102      	movs	r1, #2
 800edb8:	4618      	mov	r0, r3
 800edba:	f002 ff74 	bl	8011ca6 <SDMMC_CmdBusWidth>
 800edbe:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800edc0:	697b      	ldr	r3, [r7, #20]
 800edc2:	2b00      	cmp	r3, #0
 800edc4:	d001      	beq.n	800edca <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 800edc6:	697b      	ldr	r3, [r7, #20]
 800edc8:	e003      	b.n	800edd2 <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 800edca:	2300      	movs	r3, #0
 800edcc:	e001      	b.n	800edd2 <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800edce:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 800edd2:	4618      	mov	r0, r3
 800edd4:	3718      	adds	r7, #24
 800edd6:	46bd      	mov	sp, r7
 800edd8:	bd80      	pop	{r7, pc}

0800edda <SD_WideBus_Disable>:
  * @brief  Disables the SDMMC wide bus mode.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 800edda:	b580      	push	{r7, lr}
 800eddc:	b086      	sub	sp, #24
 800edde:	af00      	add	r7, sp, #0
 800ede0:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0UL, 0UL};
 800ede2:	2300      	movs	r3, #0
 800ede4:	60fb      	str	r3, [r7, #12]
 800ede6:	2300      	movs	r3, #0
 800ede8:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800edea:	687b      	ldr	r3, [r7, #4]
 800edec:	681b      	ldr	r3, [r3, #0]
 800edee:	2100      	movs	r1, #0
 800edf0:	4618      	mov	r0, r3
 800edf2:	f002 fd88 	bl	8011906 <SDMMC_GetResponse>
 800edf6:	4603      	mov	r3, r0
 800edf8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800edfc:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800ee00:	d102      	bne.n	800ee08 <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800ee02:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800ee06:	e02f      	b.n	800ee68 <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 800ee08:	f107 030c 	add.w	r3, r7, #12
 800ee0c:	4619      	mov	r1, r3
 800ee0e:	6878      	ldr	r0, [r7, #4]
 800ee10:	f000 f82e 	bl	800ee70 <SD_FindSCR>
 800ee14:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 800ee16:	697b      	ldr	r3, [r7, #20]
 800ee18:	2b00      	cmp	r3, #0
 800ee1a:	d001      	beq.n	800ee20 <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 800ee1c:	697b      	ldr	r3, [r7, #20]
 800ee1e:	e023      	b.n	800ee68 <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800ee20:	693b      	ldr	r3, [r7, #16]
 800ee22:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800ee26:	2b00      	cmp	r3, #0
 800ee28:	d01c      	beq.n	800ee64 <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800ee2a:	687b      	ldr	r3, [r7, #4]
 800ee2c:	681a      	ldr	r2, [r3, #0]
 800ee2e:	687b      	ldr	r3, [r7, #4]
 800ee30:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800ee32:	041b      	lsls	r3, r3, #16
 800ee34:	4619      	mov	r1, r3
 800ee36:	4610      	mov	r0, r2
 800ee38:	f002 fef2 	bl	8011c20 <SDMMC_CmdAppCommand>
 800ee3c:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800ee3e:	697b      	ldr	r3, [r7, #20]
 800ee40:	2b00      	cmp	r3, #0
 800ee42:	d001      	beq.n	800ee48 <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 800ee44:	697b      	ldr	r3, [r7, #20]
 800ee46:	e00f      	b.n	800ee68 <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 800ee48:	687b      	ldr	r3, [r7, #4]
 800ee4a:	681b      	ldr	r3, [r3, #0]
 800ee4c:	2100      	movs	r1, #0
 800ee4e:	4618      	mov	r0, r3
 800ee50:	f002 ff29 	bl	8011ca6 <SDMMC_CmdBusWidth>
 800ee54:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800ee56:	697b      	ldr	r3, [r7, #20]
 800ee58:	2b00      	cmp	r3, #0
 800ee5a:	d001      	beq.n	800ee60 <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 800ee5c:	697b      	ldr	r3, [r7, #20]
 800ee5e:	e003      	b.n	800ee68 <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 800ee60:	2300      	movs	r3, #0
 800ee62:	e001      	b.n	800ee68 <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800ee64:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 800ee68:	4618      	mov	r0, r3
 800ee6a:	3718      	adds	r7, #24
 800ee6c:	46bd      	mov	sp, r7
 800ee6e:	bd80      	pop	{r7, pc}

0800ee70 <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 800ee70:	b580      	push	{r7, lr}
 800ee72:	b08e      	sub	sp, #56	; 0x38
 800ee74:	af00      	add	r7, sp, #0
 800ee76:	6078      	str	r0, [r7, #4]
 800ee78:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800ee7a:	f7f5 ff9b 	bl	8004db4 <HAL_GetTick>
 800ee7e:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t index = 0U;
 800ee80:	2300      	movs	r3, #0
 800ee82:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tempscr[2U] = {0UL, 0UL};
 800ee84:	2300      	movs	r3, #0
 800ee86:	60bb      	str	r3, [r7, #8]
 800ee88:	2300      	movs	r3, #0
 800ee8a:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 800ee8c:	683b      	ldr	r3, [r7, #0]
 800ee8e:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 800ee90:	687b      	ldr	r3, [r7, #4]
 800ee92:	681b      	ldr	r3, [r3, #0]
 800ee94:	2108      	movs	r1, #8
 800ee96:	4618      	mov	r0, r3
 800ee98:	f002 fd74 	bl	8011984 <SDMMC_CmdBlockLength>
 800ee9c:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 800ee9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800eea0:	2b00      	cmp	r3, #0
 800eea2:	d001      	beq.n	800eea8 <SD_FindSCR+0x38>
  {
    return errorstate;
 800eea4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800eea6:	e0ad      	b.n	800f004 <SD_FindSCR+0x194>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 800eea8:	687b      	ldr	r3, [r7, #4]
 800eeaa:	681a      	ldr	r2, [r3, #0]
 800eeac:	687b      	ldr	r3, [r7, #4]
 800eeae:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800eeb0:	041b      	lsls	r3, r3, #16
 800eeb2:	4619      	mov	r1, r3
 800eeb4:	4610      	mov	r0, r2
 800eeb6:	f002 feb3 	bl	8011c20 <SDMMC_CmdAppCommand>
 800eeba:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 800eebc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800eebe:	2b00      	cmp	r3, #0
 800eec0:	d001      	beq.n	800eec6 <SD_FindSCR+0x56>
  {
    return errorstate;
 800eec2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800eec4:	e09e      	b.n	800f004 <SD_FindSCR+0x194>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800eec6:	f04f 33ff 	mov.w	r3, #4294967295
 800eeca:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 800eecc:	2308      	movs	r3, #8
 800eece:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_8B;
 800eed0:	2330      	movs	r3, #48	; 0x30
 800eed2:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 800eed4:	2302      	movs	r3, #2
 800eed6:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800eed8:	2300      	movs	r3, #0
 800eeda:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 800eedc:	2301      	movs	r3, #1
 800eede:	627b      	str	r3, [r7, #36]	; 0x24
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 800eee0:	687b      	ldr	r3, [r7, #4]
 800eee2:	681b      	ldr	r3, [r3, #0]
 800eee4:	f107 0210 	add.w	r2, r7, #16
 800eee8:	4611      	mov	r1, r2
 800eeea:	4618      	mov	r0, r3
 800eeec:	f002 fd1e 	bl	801192c <SDMMC_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 800eef0:	687b      	ldr	r3, [r7, #4]
 800eef2:	681b      	ldr	r3, [r3, #0]
 800eef4:	4618      	mov	r0, r3
 800eef6:	f002 fef9 	bl	8011cec <SDMMC_CmdSendSCR>
 800eefa:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 800eefc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800eefe:	2b00      	cmp	r3, #0
 800ef00:	d027      	beq.n	800ef52 <SD_FindSCR+0xe2>
  {
    return errorstate;
 800ef02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ef04:	e07e      	b.n	800f004 <SD_FindSCR+0x194>
  }

  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND | SDMMC_FLAG_DATAEND))
  {
    if((!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOE)) && (index == 0U))
 800ef06:	687b      	ldr	r3, [r7, #4]
 800ef08:	681b      	ldr	r3, [r3, #0]
 800ef0a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ef0c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800ef10:	2b00      	cmp	r3, #0
 800ef12:	d113      	bne.n	800ef3c <SD_FindSCR+0xcc>
 800ef14:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ef16:	2b00      	cmp	r3, #0
 800ef18:	d110      	bne.n	800ef3c <SD_FindSCR+0xcc>
    {
      tempscr[0] = SDMMC_ReadFIFO(hsd->Instance);
 800ef1a:	687b      	ldr	r3, [r7, #4]
 800ef1c:	681b      	ldr	r3, [r3, #0]
 800ef1e:	4618      	mov	r0, r3
 800ef20:	f002 fc7c 	bl	801181c <SDMMC_ReadFIFO>
 800ef24:	4603      	mov	r3, r0
 800ef26:	60bb      	str	r3, [r7, #8]
      tempscr[1] = SDMMC_ReadFIFO(hsd->Instance);
 800ef28:	687b      	ldr	r3, [r7, #4]
 800ef2a:	681b      	ldr	r3, [r3, #0]
 800ef2c:	4618      	mov	r0, r3
 800ef2e:	f002 fc75 	bl	801181c <SDMMC_ReadFIFO>
 800ef32:	4603      	mov	r3, r0
 800ef34:	60fb      	str	r3, [r7, #12]
      index++;
 800ef36:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ef38:	3301      	adds	r3, #1
 800ef3a:	637b      	str	r3, [r7, #52]	; 0x34
    }


    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800ef3c:	f7f5 ff3a 	bl	8004db4 <HAL_GetTick>
 800ef40:	4602      	mov	r2, r0
 800ef42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ef44:	1ad3      	subs	r3, r2, r3
 800ef46:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ef4a:	d102      	bne.n	800ef52 <SD_FindSCR+0xe2>
    {
      return HAL_SD_ERROR_TIMEOUT;
 800ef4c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800ef50:	e058      	b.n	800f004 <SD_FindSCR+0x194>
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND | SDMMC_FLAG_DATAEND))
 800ef52:	687b      	ldr	r3, [r7, #4]
 800ef54:	681b      	ldr	r3, [r3, #0]
 800ef56:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800ef58:	f240 532a 	movw	r3, #1322	; 0x52a
 800ef5c:	4013      	ands	r3, r2
 800ef5e:	2b00      	cmp	r3, #0
 800ef60:	d0d1      	beq.n	800ef06 <SD_FindSCR+0x96>
    }
  }

  if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 800ef62:	687b      	ldr	r3, [r7, #4]
 800ef64:	681b      	ldr	r3, [r3, #0]
 800ef66:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ef68:	f003 0308 	and.w	r3, r3, #8
 800ef6c:	2b00      	cmp	r3, #0
 800ef6e:	d005      	beq.n	800ef7c <SD_FindSCR+0x10c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DTIMEOUT);
 800ef70:	687b      	ldr	r3, [r7, #4]
 800ef72:	681b      	ldr	r3, [r3, #0]
 800ef74:	2208      	movs	r2, #8
 800ef76:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 800ef78:	2308      	movs	r3, #8
 800ef7a:	e043      	b.n	800f004 <SD_FindSCR+0x194>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 800ef7c:	687b      	ldr	r3, [r7, #4]
 800ef7e:	681b      	ldr	r3, [r3, #0]
 800ef80:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ef82:	f003 0302 	and.w	r3, r3, #2
 800ef86:	2b00      	cmp	r3, #0
 800ef88:	d005      	beq.n	800ef96 <SD_FindSCR+0x126>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DCRCFAIL);
 800ef8a:	687b      	ldr	r3, [r7, #4]
 800ef8c:	681b      	ldr	r3, [r3, #0]
 800ef8e:	2202      	movs	r2, #2
 800ef90:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 800ef92:	2302      	movs	r3, #2
 800ef94:	e036      	b.n	800f004 <SD_FindSCR+0x194>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 800ef96:	687b      	ldr	r3, [r7, #4]
 800ef98:	681b      	ldr	r3, [r3, #0]
 800ef9a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ef9c:	f003 0320 	and.w	r3, r3, #32
 800efa0:	2b00      	cmp	r3, #0
 800efa2:	d005      	beq.n	800efb0 <SD_FindSCR+0x140>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_RXOVERR);
 800efa4:	687b      	ldr	r3, [r7, #4]
 800efa6:	681b      	ldr	r3, [r3, #0]
 800efa8:	2220      	movs	r2, #32
 800efaa:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 800efac:	2320      	movs	r3, #32
 800efae:	e029      	b.n	800f004 <SD_FindSCR+0x194>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800efb0:	687b      	ldr	r3, [r7, #4]
 800efb2:	681b      	ldr	r3, [r3, #0]
 800efb4:	4a15      	ldr	r2, [pc, #84]	; (800f00c <SD_FindSCR+0x19c>)
 800efb6:	639a      	str	r2, [r3, #56]	; 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 800efb8:	68fb      	ldr	r3, [r7, #12]
 800efba:	061a      	lsls	r2, r3, #24
 800efbc:	68fb      	ldr	r3, [r7, #12]
 800efbe:	021b      	lsls	r3, r3, #8
 800efc0:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800efc4:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 800efc6:	68fb      	ldr	r3, [r7, #12]
 800efc8:	0a1b      	lsrs	r3, r3, #8
 800efca:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 800efce:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 800efd0:	68fb      	ldr	r3, [r7, #12]
 800efd2:	0e1b      	lsrs	r3, r3, #24
 800efd4:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 800efd6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800efd8:	601a      	str	r2, [r3, #0]
    scr++;
 800efda:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800efdc:	3304      	adds	r3, #4
 800efde:	62fb      	str	r3, [r7, #44]	; 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 800efe0:	68bb      	ldr	r3, [r7, #8]
 800efe2:	061a      	lsls	r2, r3, #24
 800efe4:	68bb      	ldr	r3, [r7, #8]
 800efe6:	021b      	lsls	r3, r3, #8
 800efe8:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800efec:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 800efee:	68bb      	ldr	r3, [r7, #8]
 800eff0:	0a1b      	lsrs	r3, r3, #8
 800eff2:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 800eff6:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 800eff8:	68bb      	ldr	r3, [r7, #8]
 800effa:	0e1b      	lsrs	r3, r3, #24
 800effc:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 800effe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f000:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 800f002:	2300      	movs	r3, #0
}
 800f004:	4618      	mov	r0, r3
 800f006:	3738      	adds	r7, #56	; 0x38
 800f008:	46bd      	mov	sp, r7
 800f00a:	bd80      	pop	{r7, pc}
 800f00c:	18000f3a 	.word	0x18000f3a

0800f010 <SD_Read_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Read_IT(SD_HandleTypeDef *hsd)
{
 800f010:	b580      	push	{r7, lr}
 800f012:	b086      	sub	sp, #24
 800f014:	af00      	add	r7, sp, #0
 800f016:	6078      	str	r0, [r7, #4]
  uint32_t count, data;
  uint8_t* tmp;

  tmp = hsd->pRxBuffPtr;
 800f018:	687b      	ldr	r3, [r7, #4]
 800f01a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f01c:	613b      	str	r3, [r7, #16]

  if (hsd->RxXferSize >= 32U)
 800f01e:	687b      	ldr	r3, [r7, #4]
 800f020:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f022:	2b1f      	cmp	r3, #31
 800f024:	d936      	bls.n	800f094 <SD_Read_IT+0x84>
  {
    /* Read data from SDMMC Rx FIFO */
    for(count = 0U; count < 8U; count++)
 800f026:	2300      	movs	r3, #0
 800f028:	617b      	str	r3, [r7, #20]
 800f02a:	e027      	b.n	800f07c <SD_Read_IT+0x6c>
    {
      data = SDMMC_ReadFIFO(hsd->Instance);
 800f02c:	687b      	ldr	r3, [r7, #4]
 800f02e:	681b      	ldr	r3, [r3, #0]
 800f030:	4618      	mov	r0, r3
 800f032:	f002 fbf3 	bl	801181c <SDMMC_ReadFIFO>
 800f036:	60f8      	str	r0, [r7, #12]
      *tmp = (uint8_t)(data & 0xFFU);
 800f038:	68fb      	ldr	r3, [r7, #12]
 800f03a:	b2da      	uxtb	r2, r3
 800f03c:	693b      	ldr	r3, [r7, #16]
 800f03e:	701a      	strb	r2, [r3, #0]
      tmp++;
 800f040:	693b      	ldr	r3, [r7, #16]
 800f042:	3301      	adds	r3, #1
 800f044:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 8U) & 0xFFU);
 800f046:	68fb      	ldr	r3, [r7, #12]
 800f048:	0a1b      	lsrs	r3, r3, #8
 800f04a:	b2da      	uxtb	r2, r3
 800f04c:	693b      	ldr	r3, [r7, #16]
 800f04e:	701a      	strb	r2, [r3, #0]
      tmp++;
 800f050:	693b      	ldr	r3, [r7, #16]
 800f052:	3301      	adds	r3, #1
 800f054:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 16U) & 0xFFU);
 800f056:	68fb      	ldr	r3, [r7, #12]
 800f058:	0c1b      	lsrs	r3, r3, #16
 800f05a:	b2da      	uxtb	r2, r3
 800f05c:	693b      	ldr	r3, [r7, #16]
 800f05e:	701a      	strb	r2, [r3, #0]
      tmp++;
 800f060:	693b      	ldr	r3, [r7, #16]
 800f062:	3301      	adds	r3, #1
 800f064:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 24U) & 0xFFU);
 800f066:	68fb      	ldr	r3, [r7, #12]
 800f068:	0e1b      	lsrs	r3, r3, #24
 800f06a:	b2da      	uxtb	r2, r3
 800f06c:	693b      	ldr	r3, [r7, #16]
 800f06e:	701a      	strb	r2, [r3, #0]
      tmp++;
 800f070:	693b      	ldr	r3, [r7, #16]
 800f072:	3301      	adds	r3, #1
 800f074:	613b      	str	r3, [r7, #16]
    for(count = 0U; count < 8U; count++)
 800f076:	697b      	ldr	r3, [r7, #20]
 800f078:	3301      	adds	r3, #1
 800f07a:	617b      	str	r3, [r7, #20]
 800f07c:	697b      	ldr	r3, [r7, #20]
 800f07e:	2b07      	cmp	r3, #7
 800f080:	d9d4      	bls.n	800f02c <SD_Read_IT+0x1c>
    }

    hsd->pRxBuffPtr = tmp;
 800f082:	687b      	ldr	r3, [r7, #4]
 800f084:	693a      	ldr	r2, [r7, #16]
 800f086:	629a      	str	r2, [r3, #40]	; 0x28
    hsd->RxXferSize -= 32U;
 800f088:	687b      	ldr	r3, [r7, #4]
 800f08a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f08c:	f1a3 0220 	sub.w	r2, r3, #32
 800f090:	687b      	ldr	r3, [r7, #4]
 800f092:	62da      	str	r2, [r3, #44]	; 0x2c
  }
}
 800f094:	bf00      	nop
 800f096:	3718      	adds	r7, #24
 800f098:	46bd      	mov	sp, r7
 800f09a:	bd80      	pop	{r7, pc}

0800f09c <SD_Write_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Write_IT(SD_HandleTypeDef *hsd)
{
 800f09c:	b580      	push	{r7, lr}
 800f09e:	b086      	sub	sp, #24
 800f0a0:	af00      	add	r7, sp, #0
 800f0a2:	6078      	str	r0, [r7, #4]
  uint32_t count, data;
  uint8_t* tmp;

  tmp = hsd->pTxBuffPtr;
 800f0a4:	687b      	ldr	r3, [r7, #4]
 800f0a6:	6a1b      	ldr	r3, [r3, #32]
 800f0a8:	613b      	str	r3, [r7, #16]

  if (hsd->TxXferSize >= 32U)
 800f0aa:	687b      	ldr	r3, [r7, #4]
 800f0ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f0ae:	2b1f      	cmp	r3, #31
 800f0b0:	d93a      	bls.n	800f128 <SD_Write_IT+0x8c>
  {
    /* Write data to SDMMC Tx FIFO */
    for(count = 0U; count < 8U; count++)
 800f0b2:	2300      	movs	r3, #0
 800f0b4:	617b      	str	r3, [r7, #20]
 800f0b6:	e02b      	b.n	800f110 <SD_Write_IT+0x74>
    {
      data = (uint32_t)(*tmp);
 800f0b8:	693b      	ldr	r3, [r7, #16]
 800f0ba:	781b      	ldrb	r3, [r3, #0]
 800f0bc:	60fb      	str	r3, [r7, #12]
      tmp++;
 800f0be:	693b      	ldr	r3, [r7, #16]
 800f0c0:	3301      	adds	r3, #1
 800f0c2:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 8U);
 800f0c4:	693b      	ldr	r3, [r7, #16]
 800f0c6:	781b      	ldrb	r3, [r3, #0]
 800f0c8:	021a      	lsls	r2, r3, #8
 800f0ca:	68fb      	ldr	r3, [r7, #12]
 800f0cc:	4313      	orrs	r3, r2
 800f0ce:	60fb      	str	r3, [r7, #12]
      tmp++;
 800f0d0:	693b      	ldr	r3, [r7, #16]
 800f0d2:	3301      	adds	r3, #1
 800f0d4:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 16U);
 800f0d6:	693b      	ldr	r3, [r7, #16]
 800f0d8:	781b      	ldrb	r3, [r3, #0]
 800f0da:	041a      	lsls	r2, r3, #16
 800f0dc:	68fb      	ldr	r3, [r7, #12]
 800f0de:	4313      	orrs	r3, r2
 800f0e0:	60fb      	str	r3, [r7, #12]
      tmp++;
 800f0e2:	693b      	ldr	r3, [r7, #16]
 800f0e4:	3301      	adds	r3, #1
 800f0e6:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 24U);
 800f0e8:	693b      	ldr	r3, [r7, #16]
 800f0ea:	781b      	ldrb	r3, [r3, #0]
 800f0ec:	061a      	lsls	r2, r3, #24
 800f0ee:	68fb      	ldr	r3, [r7, #12]
 800f0f0:	4313      	orrs	r3, r2
 800f0f2:	60fb      	str	r3, [r7, #12]
      tmp++;
 800f0f4:	693b      	ldr	r3, [r7, #16]
 800f0f6:	3301      	adds	r3, #1
 800f0f8:	613b      	str	r3, [r7, #16]
      (void)SDMMC_WriteFIFO(hsd->Instance, &data);
 800f0fa:	687b      	ldr	r3, [r7, #4]
 800f0fc:	681b      	ldr	r3, [r3, #0]
 800f0fe:	f107 020c 	add.w	r2, r7, #12
 800f102:	4611      	mov	r1, r2
 800f104:	4618      	mov	r0, r3
 800f106:	f002 fb96 	bl	8011836 <SDMMC_WriteFIFO>
    for(count = 0U; count < 8U; count++)
 800f10a:	697b      	ldr	r3, [r7, #20]
 800f10c:	3301      	adds	r3, #1
 800f10e:	617b      	str	r3, [r7, #20]
 800f110:	697b      	ldr	r3, [r7, #20]
 800f112:	2b07      	cmp	r3, #7
 800f114:	d9d0      	bls.n	800f0b8 <SD_Write_IT+0x1c>
    }

    hsd->pTxBuffPtr = tmp;
 800f116:	687b      	ldr	r3, [r7, #4]
 800f118:	693a      	ldr	r2, [r7, #16]
 800f11a:	621a      	str	r2, [r3, #32]
    hsd->TxXferSize -= 32U;
 800f11c:	687b      	ldr	r3, [r7, #4]
 800f11e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f120:	f1a3 0220 	sub.w	r2, r3, #32
 800f124:	687b      	ldr	r3, [r7, #4]
 800f126:	625a      	str	r2, [r3, #36]	; 0x24
  }
}
 800f128:	bf00      	nop
 800f12a:	3718      	adds	r7, #24
 800f12c:	46bd      	mov	sp, r7
 800f12e:	bd80      	pop	{r7, pc}

0800f130 <HAL_SDEx_Read_DMADoubleBuf0CpltCallback>:
  * @brief Read DMA Buffer 0 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Read_DMADoubleBuf0CpltCallback(SD_HandleTypeDef *hsd)
{
 800f130:	b480      	push	{r7}
 800f132:	b083      	sub	sp, #12
 800f134:	af00      	add	r7, sp, #0
 800f136:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Read_DMADoubleBuf0CpltCallback can be implemented in the user file
   */
}
 800f138:	bf00      	nop
 800f13a:	370c      	adds	r7, #12
 800f13c:	46bd      	mov	sp, r7
 800f13e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f142:	4770      	bx	lr

0800f144 <HAL_SDEx_Read_DMADoubleBuf1CpltCallback>:
  * @brief Read DMA Buffer 1 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Read_DMADoubleBuf1CpltCallback(SD_HandleTypeDef *hsd)
{
 800f144:	b480      	push	{r7}
 800f146:	b083      	sub	sp, #12
 800f148:	af00      	add	r7, sp, #0
 800f14a:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Read_DMADoubleBuf1CpltCallback can be implemented in the user file
   */
}
 800f14c:	bf00      	nop
 800f14e:	370c      	adds	r7, #12
 800f150:	46bd      	mov	sp, r7
 800f152:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f156:	4770      	bx	lr

0800f158 <HAL_SDEx_Write_DMADoubleBuf0CpltCallback>:
  * @brief Write DMA Buffer 0 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Write_DMADoubleBuf0CpltCallback(SD_HandleTypeDef *hsd)
{
 800f158:	b480      	push	{r7}
 800f15a:	b083      	sub	sp, #12
 800f15c:	af00      	add	r7, sp, #0
 800f15e:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Write_DMADoubleBuf0CpltCallback can be implemented in the user file
   */
}
 800f160:	bf00      	nop
 800f162:	370c      	adds	r7, #12
 800f164:	46bd      	mov	sp, r7
 800f166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f16a:	4770      	bx	lr

0800f16c <HAL_SDEx_Write_DMADoubleBuf1CpltCallback>:
  * @brief Write DMA Buffer 1 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Write_DMADoubleBuf1CpltCallback(SD_HandleTypeDef *hsd)
{
 800f16c:	b480      	push	{r7}
 800f16e:	b083      	sub	sp, #12
 800f170:	af00      	add	r7, sp, #0
 800f172:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Write_DMADoubleBuf1CpltCallback can be implemented in the user file
   */
}
 800f174:	bf00      	nop
 800f176:	370c      	adds	r7, #12
 800f178:	46bd      	mov	sp, r7
 800f17a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f17e:	4770      	bx	lr

0800f180 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800f180:	b580      	push	{r7, lr}
 800f182:	b084      	sub	sp, #16
 800f184:	af00      	add	r7, sp, #0
 800f186:	6078      	str	r0, [r7, #4]
  uint32_t crc_length = 0UL;
 800f188:	2300      	movs	r3, #0
 800f18a:	60fb      	str	r3, [r7, #12]
  uint32_t packet_length;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800f18c:	687b      	ldr	r3, [r7, #4]
 800f18e:	2b00      	cmp	r3, #0
 800f190:	d101      	bne.n	800f196 <HAL_SPI_Init+0x16>
  {
    return HAL_ERROR;
 800f192:	2301      	movs	r3, #1
 800f194:	e0e2      	b.n	800f35c <HAL_SPI_Init+0x1dc>
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800f196:	687b      	ldr	r3, [r7, #4]
 800f198:	2200      	movs	r2, #0
 800f19a:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 800f19c:	687b      	ldr	r3, [r7, #4]
 800f19e:	681b      	ldr	r3, [r3, #0]
 800f1a0:	4a70      	ldr	r2, [pc, #448]	; (800f364 <HAL_SPI_Init+0x1e4>)
 800f1a2:	4293      	cmp	r3, r2
 800f1a4:	d00f      	beq.n	800f1c6 <HAL_SPI_Init+0x46>
 800f1a6:	687b      	ldr	r3, [r7, #4]
 800f1a8:	681b      	ldr	r3, [r3, #0]
 800f1aa:	4a6f      	ldr	r2, [pc, #444]	; (800f368 <HAL_SPI_Init+0x1e8>)
 800f1ac:	4293      	cmp	r3, r2
 800f1ae:	d00a      	beq.n	800f1c6 <HAL_SPI_Init+0x46>
 800f1b0:	687b      	ldr	r3, [r7, #4]
 800f1b2:	681b      	ldr	r3, [r3, #0]
 800f1b4:	4a6d      	ldr	r2, [pc, #436]	; (800f36c <HAL_SPI_Init+0x1ec>)
 800f1b6:	4293      	cmp	r3, r2
 800f1b8:	d005      	beq.n	800f1c6 <HAL_SPI_Init+0x46>
 800f1ba:	687b      	ldr	r3, [r7, #4]
 800f1bc:	68db      	ldr	r3, [r3, #12]
 800f1be:	2b0f      	cmp	r3, #15
 800f1c0:	d901      	bls.n	800f1c6 <HAL_SPI_Init+0x46>
  {
    return HAL_ERROR;
 800f1c2:	2301      	movs	r3, #1
 800f1c4:	e0ca      	b.n	800f35c <HAL_SPI_Init+0x1dc>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 800f1c6:	6878      	ldr	r0, [r7, #4]
 800f1c8:	f001 f870 	bl	80102ac <SPI_GetPacketSize>
 800f1cc:	60b8      	str	r0, [r7, #8]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800f1ce:	687b      	ldr	r3, [r7, #4]
 800f1d0:	681b      	ldr	r3, [r3, #0]
 800f1d2:	4a64      	ldr	r2, [pc, #400]	; (800f364 <HAL_SPI_Init+0x1e4>)
 800f1d4:	4293      	cmp	r3, r2
 800f1d6:	d00c      	beq.n	800f1f2 <HAL_SPI_Init+0x72>
 800f1d8:	687b      	ldr	r3, [r7, #4]
 800f1da:	681b      	ldr	r3, [r3, #0]
 800f1dc:	4a62      	ldr	r2, [pc, #392]	; (800f368 <HAL_SPI_Init+0x1e8>)
 800f1de:	4293      	cmp	r3, r2
 800f1e0:	d007      	beq.n	800f1f2 <HAL_SPI_Init+0x72>
 800f1e2:	687b      	ldr	r3, [r7, #4]
 800f1e4:	681b      	ldr	r3, [r3, #0]
 800f1e6:	4a61      	ldr	r2, [pc, #388]	; (800f36c <HAL_SPI_Init+0x1ec>)
 800f1e8:	4293      	cmp	r3, r2
 800f1ea:	d002      	beq.n	800f1f2 <HAL_SPI_Init+0x72>
 800f1ec:	68bb      	ldr	r3, [r7, #8]
 800f1ee:	2b08      	cmp	r3, #8
 800f1f0:	d811      	bhi.n	800f216 <HAL_SPI_Init+0x96>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800f1f2:	687b      	ldr	r3, [r7, #4]
 800f1f4:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800f1f6:	4a5b      	ldr	r2, [pc, #364]	; (800f364 <HAL_SPI_Init+0x1e4>)
 800f1f8:	4293      	cmp	r3, r2
 800f1fa:	d009      	beq.n	800f210 <HAL_SPI_Init+0x90>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800f1fc:	687b      	ldr	r3, [r7, #4]
 800f1fe:	681b      	ldr	r3, [r3, #0]
 800f200:	4a59      	ldr	r2, [pc, #356]	; (800f368 <HAL_SPI_Init+0x1e8>)
 800f202:	4293      	cmp	r3, r2
 800f204:	d004      	beq.n	800f210 <HAL_SPI_Init+0x90>
 800f206:	687b      	ldr	r3, [r7, #4]
 800f208:	681b      	ldr	r3, [r3, #0]
 800f20a:	4a58      	ldr	r2, [pc, #352]	; (800f36c <HAL_SPI_Init+0x1ec>)
 800f20c:	4293      	cmp	r3, r2
 800f20e:	d104      	bne.n	800f21a <HAL_SPI_Init+0x9a>
 800f210:	68bb      	ldr	r3, [r7, #8]
 800f212:	2b10      	cmp	r3, #16
 800f214:	d901      	bls.n	800f21a <HAL_SPI_Init+0x9a>
  {
    return HAL_ERROR;
 800f216:	2301      	movs	r3, #1
 800f218:	e0a0      	b.n	800f35c <HAL_SPI_Init+0x1dc>
      return HAL_ERROR;
    }
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800f21a:	687b      	ldr	r3, [r7, #4]
 800f21c:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800f220:	b2db      	uxtb	r3, r3
 800f222:	2b00      	cmp	r3, #0
 800f224:	d106      	bne.n	800f234 <HAL_SPI_Init+0xb4>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800f226:	687b      	ldr	r3, [r7, #4]
 800f228:	2200      	movs	r2, #0
 800f22a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800f22e:	6878      	ldr	r0, [r7, #4]
 800f230:	f7f5 fa92 	bl	8004758 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800f234:	687b      	ldr	r3, [r7, #4]
 800f236:	2202      	movs	r2, #2
 800f238:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800f23c:	687b      	ldr	r3, [r7, #4]
 800f23e:	681b      	ldr	r3, [r3, #0]
 800f240:	681a      	ldr	r2, [r3, #0]
 800f242:	687b      	ldr	r3, [r7, #4]
 800f244:	681b      	ldr	r3, [r3, #0]
 800f246:	f022 0201 	bic.w	r2, r2, #1
 800f24a:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW))
 800f24c:	687b      	ldr	r3, [r7, #4]
 800f24e:	699b      	ldr	r3, [r3, #24]
 800f250:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800f254:	d110      	bne.n	800f278 <HAL_SPI_Init+0xf8>
 800f256:	687b      	ldr	r3, [r7, #4]
 800f258:	685b      	ldr	r3, [r3, #4]
 800f25a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800f25e:	d10b      	bne.n	800f278 <HAL_SPI_Init+0xf8>
 800f260:	687b      	ldr	r3, [r7, #4]
 800f262:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f264:	2b00      	cmp	r3, #0
 800f266:	d107      	bne.n	800f278 <HAL_SPI_Init+0xf8>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 800f268:	687b      	ldr	r3, [r7, #4]
 800f26a:	681b      	ldr	r3, [r3, #0]
 800f26c:	681a      	ldr	r2, [r3, #0]
 800f26e:	687b      	ldr	r3, [r7, #4]
 800f270:	681b      	ldr	r3, [r3, #0]
 800f272:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800f276:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 800f278:	687b      	ldr	r3, [r7, #4]
 800f27a:	69da      	ldr	r2, [r3, #28]
 800f27c:	687b      	ldr	r3, [r7, #4]
 800f27e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f280:	431a      	orrs	r2, r3
 800f282:	68fb      	ldr	r3, [r7, #12]
 800f284:	431a      	orrs	r2, r3
 800f286:	687b      	ldr	r3, [r7, #4]
 800f288:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f28a:	ea42 0103 	orr.w	r1, r2, r3
 800f28e:	687b      	ldr	r3, [r7, #4]
 800f290:	68da      	ldr	r2, [r3, #12]
 800f292:	687b      	ldr	r3, [r7, #4]
 800f294:	681b      	ldr	r3, [r3, #0]
 800f296:	430a      	orrs	r2, r1
 800f298:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode     | hspi->Init.TIMode           | hspi->Init.NSSPolarity             |
 800f29a:	687b      	ldr	r3, [r7, #4]
 800f29c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800f29e:	687b      	ldr	r3, [r7, #4]
 800f2a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f2a2:	431a      	orrs	r2, r3
 800f2a4:	687b      	ldr	r3, [r7, #4]
 800f2a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f2a8:	431a      	orrs	r2, r3
 800f2aa:	687b      	ldr	r3, [r7, #4]
 800f2ac:	699b      	ldr	r3, [r3, #24]
 800f2ae:	431a      	orrs	r2, r3
 800f2b0:	687b      	ldr	r3, [r7, #4]
 800f2b2:	691b      	ldr	r3, [r3, #16]
 800f2b4:	431a      	orrs	r2, r3
 800f2b6:	687b      	ldr	r3, [r7, #4]
 800f2b8:	695b      	ldr	r3, [r3, #20]
 800f2ba:	431a      	orrs	r2, r3
 800f2bc:	687b      	ldr	r3, [r7, #4]
 800f2be:	6a1b      	ldr	r3, [r3, #32]
 800f2c0:	431a      	orrs	r2, r3
 800f2c2:	687b      	ldr	r3, [r7, #4]
 800f2c4:	685b      	ldr	r3, [r3, #4]
 800f2c6:	431a      	orrs	r2, r3
 800f2c8:	687b      	ldr	r3, [r7, #4]
 800f2ca:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800f2cc:	431a      	orrs	r2, r3
 800f2ce:	687b      	ldr	r3, [r7, #4]
 800f2d0:	689b      	ldr	r3, [r3, #8]
 800f2d2:	431a      	orrs	r2, r3
 800f2d4:	687b      	ldr	r3, [r7, #4]
 800f2d6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800f2d8:	ea42 0103 	orr.w	r1, r2, r3
 800f2dc:	687b      	ldr	r3, [r7, #4]
 800f2de:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800f2e0:	687b      	ldr	r3, [r7, #4]
 800f2e2:	681b      	ldr	r3, [r3, #0]
 800f2e4:	430a      	orrs	r2, r1
 800f2e6:	60da      	str	r2, [r3, #12]
    WRITE_REG(hspi->Instance->CRCPOLY, hspi->Init.CRCPolynomial);
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 800f2e8:	687b      	ldr	r3, [r7, #4]
 800f2ea:	685b      	ldr	r3, [r3, #4]
 800f2ec:	2b00      	cmp	r3, #0
 800f2ee:	d113      	bne.n	800f318 <HAL_SPI_Init+0x198>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 800f2f0:	687b      	ldr	r3, [r7, #4]
 800f2f2:	681b      	ldr	r3, [r3, #0]
 800f2f4:	689b      	ldr	r3, [r3, #8]
 800f2f6:	f423 52c0 	bic.w	r2, r3, #6144	; 0x1800
 800f2fa:	687b      	ldr	r3, [r7, #4]
 800f2fc:	681b      	ldr	r3, [r3, #0]
 800f2fe:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800f302:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 800f304:	687b      	ldr	r3, [r7, #4]
 800f306:	681b      	ldr	r3, [r3, #0]
 800f308:	689b      	ldr	r3, [r3, #8]
 800f30a:	f423 62c0 	bic.w	r2, r3, #1536	; 0x600
 800f30e:	687b      	ldr	r3, [r7, #4]
 800f310:	681b      	ldr	r3, [r3, #0]
 800f312:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800f316:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800f318:	687b      	ldr	r3, [r7, #4]
 800f31a:	681b      	ldr	r3, [r3, #0]
 800f31c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800f31e:	687b      	ldr	r3, [r7, #4]
 800f320:	681b      	ldr	r3, [r3, #0]
 800f322:	f022 0201 	bic.w	r2, r2, #1
 800f326:	651a      	str	r2, [r3, #80]	; 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 800f328:	687b      	ldr	r3, [r7, #4]
 800f32a:	685b      	ldr	r3, [r3, #4]
 800f32c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800f330:	2b00      	cmp	r3, #0
 800f332:	d00a      	beq.n	800f34a <HAL_SPI_Init+0x1ca>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 800f334:	687b      	ldr	r3, [r7, #4]
 800f336:	681b      	ldr	r3, [r3, #0]
 800f338:	68db      	ldr	r3, [r3, #12]
 800f33a:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800f33e:	687b      	ldr	r3, [r7, #4]
 800f340:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800f342:	687b      	ldr	r3, [r7, #4]
 800f344:	681b      	ldr	r3, [r3, #0]
 800f346:	430a      	orrs	r2, r1
 800f348:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800f34a:	687b      	ldr	r3, [r7, #4]
 800f34c:	2200      	movs	r2, #0
 800f34e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 800f352:	687b      	ldr	r3, [r7, #4]
 800f354:	2201      	movs	r2, #1
 800f356:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  return HAL_OK;
 800f35a:	2300      	movs	r3, #0
}
 800f35c:	4618      	mov	r0, r3
 800f35e:	3710      	adds	r7, #16
 800f360:	46bd      	mov	sp, r7
 800f362:	bd80      	pop	{r7, pc}
 800f364:	40013000 	.word	0x40013000
 800f368:	40003800 	.word	0x40003800
 800f36c:	40003c00 	.word	0x40003c00

0800f370 <HAL_SPI_Transmit>:
  * @param  Size   : amount of data to be sent
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800f370:	b580      	push	{r7, lr}
 800f372:	b08a      	sub	sp, #40	; 0x28
 800f374:	af02      	add	r7, sp, #8
 800f376:	60f8      	str	r0, [r7, #12]
 800f378:	60b9      	str	r1, [r7, #8]
 800f37a:	603b      	str	r3, [r7, #0]
 800f37c:	4613      	mov	r3, r2
 800f37e:	80fb      	strh	r3, [r7, #6]
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 800f380:	68fb      	ldr	r3, [r7, #12]
 800f382:	681b      	ldr	r3, [r3, #0]
 800f384:	3320      	adds	r3, #32
 800f386:	61fb      	str	r3, [r7, #28]
#endif /* __GNUC__ */

  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800f388:	2300      	movs	r3, #0
 800f38a:	76fb      	strb	r3, [r7, #27]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_TXONLY(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800f38c:	68fb      	ldr	r3, [r7, #12]
 800f38e:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800f392:	2b01      	cmp	r3, #1
 800f394:	d101      	bne.n	800f39a <HAL_SPI_Transmit+0x2a>
 800f396:	2302      	movs	r3, #2
 800f398:	e1d7      	b.n	800f74a <HAL_SPI_Transmit+0x3da>
 800f39a:	68fb      	ldr	r3, [r7, #12]
 800f39c:	2201      	movs	r2, #1
 800f39e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800f3a2:	f7f5 fd07 	bl	8004db4 <HAL_GetTick>
 800f3a6:	6178      	str	r0, [r7, #20]

  if (hspi->State != HAL_SPI_STATE_READY)
 800f3a8:	68fb      	ldr	r3, [r7, #12]
 800f3aa:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800f3ae:	b2db      	uxtb	r3, r3
 800f3b0:	2b01      	cmp	r3, #1
 800f3b2:	d007      	beq.n	800f3c4 <HAL_SPI_Transmit+0x54>
  {
    errorcode = HAL_BUSY;
 800f3b4:	2302      	movs	r3, #2
 800f3b6:	76fb      	strb	r3, [r7, #27]
    __HAL_UNLOCK(hspi);
 800f3b8:	68fb      	ldr	r3, [r7, #12]
 800f3ba:	2200      	movs	r2, #0
 800f3bc:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 800f3c0:	7efb      	ldrb	r3, [r7, #27]
 800f3c2:	e1c2      	b.n	800f74a <HAL_SPI_Transmit+0x3da>
  }

  if ((pData == NULL) || (Size == 0UL))
 800f3c4:	68bb      	ldr	r3, [r7, #8]
 800f3c6:	2b00      	cmp	r3, #0
 800f3c8:	d002      	beq.n	800f3d0 <HAL_SPI_Transmit+0x60>
 800f3ca:	88fb      	ldrh	r3, [r7, #6]
 800f3cc:	2b00      	cmp	r3, #0
 800f3ce:	d107      	bne.n	800f3e0 <HAL_SPI_Transmit+0x70>
  {
    errorcode = HAL_ERROR;
 800f3d0:	2301      	movs	r3, #1
 800f3d2:	76fb      	strb	r3, [r7, #27]
    __HAL_UNLOCK(hspi);
 800f3d4:	68fb      	ldr	r3, [r7, #12]
 800f3d6:	2200      	movs	r2, #0
 800f3d8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 800f3dc:	7efb      	ldrb	r3, [r7, #27]
 800f3de:	e1b4      	b.n	800f74a <HAL_SPI_Transmit+0x3da>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800f3e0:	68fb      	ldr	r3, [r7, #12]
 800f3e2:	2203      	movs	r2, #3
 800f3e4:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800f3e8:	68fb      	ldr	r3, [r7, #12]
 800f3ea:	2200      	movs	r2, #0
 800f3ec:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800f3f0:	68fb      	ldr	r3, [r7, #12]
 800f3f2:	68ba      	ldr	r2, [r7, #8]
 800f3f4:	65da      	str	r2, [r3, #92]	; 0x5c
  hspi->TxXferSize  = Size;
 800f3f6:	68fb      	ldr	r3, [r7, #12]
 800f3f8:	88fa      	ldrh	r2, [r7, #6]
 800f3fa:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
  hspi->TxXferCount = Size;
 800f3fe:	68fb      	ldr	r3, [r7, #12]
 800f400:	88fa      	ldrh	r2, [r7, #6]
 800f402:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = NULL;
 800f406:	68fb      	ldr	r3, [r7, #12]
 800f408:	2200      	movs	r2, #0
 800f40a:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->RxXferSize  = (uint16_t) 0UL;
 800f40c:	68fb      	ldr	r3, [r7, #12]
 800f40e:	2200      	movs	r2, #0
 800f410:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  hspi->RxXferCount = (uint16_t) 0UL;
 800f414:	68fb      	ldr	r3, [r7, #12]
 800f416:	2200      	movs	r2, #0
 800f418:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  hspi->TxISR       = NULL;
 800f41c:	68fb      	ldr	r3, [r7, #12]
 800f41e:	2200      	movs	r2, #0
 800f420:	675a      	str	r2, [r3, #116]	; 0x74
  hspi->RxISR       = NULL;
 800f422:	68fb      	ldr	r3, [r7, #12]
 800f424:	2200      	movs	r2, #0
 800f426:	671a      	str	r2, [r3, #112]	; 0x70

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800f428:	68fb      	ldr	r3, [r7, #12]
 800f42a:	689b      	ldr	r3, [r3, #8]
 800f42c:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
 800f430:	d107      	bne.n	800f442 <HAL_SPI_Transmit+0xd2>
  {
    SPI_1LINE_TX(hspi);
 800f432:	68fb      	ldr	r3, [r7, #12]
 800f434:	681b      	ldr	r3, [r3, #0]
 800f436:	681a      	ldr	r2, [r3, #0]
 800f438:	68fb      	ldr	r3, [r7, #12]
 800f43a:	681b      	ldr	r3, [r3, #0]
 800f43c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800f440:	601a      	str	r2, [r3, #0]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 800f442:	68fb      	ldr	r3, [r7, #12]
 800f444:	681b      	ldr	r3, [r3, #0]
 800f446:	685a      	ldr	r2, [r3, #4]
 800f448:	4b96      	ldr	r3, [pc, #600]	; (800f6a4 <HAL_SPI_Transmit+0x334>)
 800f44a:	4013      	ands	r3, r2
 800f44c:	88f9      	ldrh	r1, [r7, #6]
 800f44e:	68fa      	ldr	r2, [r7, #12]
 800f450:	6812      	ldr	r2, [r2, #0]
 800f452:	430b      	orrs	r3, r1
 800f454:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 800f456:	68fb      	ldr	r3, [r7, #12]
 800f458:	681b      	ldr	r3, [r3, #0]
 800f45a:	681a      	ldr	r2, [r3, #0]
 800f45c:	68fb      	ldr	r3, [r7, #12]
 800f45e:	681b      	ldr	r3, [r3, #0]
 800f460:	f042 0201 	orr.w	r2, r2, #1
 800f464:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800f466:	68fb      	ldr	r3, [r7, #12]
 800f468:	685b      	ldr	r3, [r3, #4]
 800f46a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800f46e:	d107      	bne.n	800f480 <HAL_SPI_Transmit+0x110>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 800f470:	68fb      	ldr	r3, [r7, #12]
 800f472:	681b      	ldr	r3, [r3, #0]
 800f474:	681a      	ldr	r2, [r3, #0]
 800f476:	68fb      	ldr	r3, [r7, #12]
 800f478:	681b      	ldr	r3, [r3, #0]
 800f47a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800f47e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 800f480:	68fb      	ldr	r3, [r7, #12]
 800f482:	68db      	ldr	r3, [r3, #12]
 800f484:	2b0f      	cmp	r3, #15
 800f486:	d947      	bls.n	800f518 <HAL_SPI_Transmit+0x1a8>
  {
    /* Transmit data in 32 Bit mode */
    while (hspi->TxXferCount > 0UL)
 800f488:	e03f      	b.n	800f50a <HAL_SPI_Transmit+0x19a>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 800f48a:	68fb      	ldr	r3, [r7, #12]
 800f48c:	681b      	ldr	r3, [r3, #0]
 800f48e:	695b      	ldr	r3, [r3, #20]
 800f490:	f003 0302 	and.w	r3, r3, #2
 800f494:	2b02      	cmp	r3, #2
 800f496:	d114      	bne.n	800f4c2 <HAL_SPI_Transmit+0x152>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 800f498:	68fb      	ldr	r3, [r7, #12]
 800f49a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800f49c:	68fb      	ldr	r3, [r7, #12]
 800f49e:	681b      	ldr	r3, [r3, #0]
 800f4a0:	6812      	ldr	r2, [r2, #0]
 800f4a2:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 800f4a4:	68fb      	ldr	r3, [r7, #12]
 800f4a6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800f4a8:	1d1a      	adds	r2, r3, #4
 800f4aa:	68fb      	ldr	r3, [r7, #12]
 800f4ac:	65da      	str	r2, [r3, #92]	; 0x5c
        hspi->TxXferCount--;
 800f4ae:	68fb      	ldr	r3, [r7, #12]
 800f4b0:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800f4b4:	b29b      	uxth	r3, r3
 800f4b6:	3b01      	subs	r3, #1
 800f4b8:	b29a      	uxth	r2, r3
 800f4ba:	68fb      	ldr	r3, [r7, #12]
 800f4bc:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 800f4c0:	e023      	b.n	800f50a <HAL_SPI_Transmit+0x19a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800f4c2:	f7f5 fc77 	bl	8004db4 <HAL_GetTick>
 800f4c6:	4602      	mov	r2, r0
 800f4c8:	697b      	ldr	r3, [r7, #20]
 800f4ca:	1ad3      	subs	r3, r2, r3
 800f4cc:	683a      	ldr	r2, [r7, #0]
 800f4ce:	429a      	cmp	r2, r3
 800f4d0:	d803      	bhi.n	800f4da <HAL_SPI_Transmit+0x16a>
 800f4d2:	683b      	ldr	r3, [r7, #0]
 800f4d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f4d8:	d102      	bne.n	800f4e0 <HAL_SPI_Transmit+0x170>
 800f4da:	683b      	ldr	r3, [r7, #0]
 800f4dc:	2b00      	cmp	r3, #0
 800f4de:	d114      	bne.n	800f50a <HAL_SPI_Transmit+0x19a>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800f4e0:	68f8      	ldr	r0, [r7, #12]
 800f4e2:	f000 fe15 	bl	8010110 <SPI_CloseTransfer>

          /* Process Unlocked */
          __HAL_UNLOCK(hspi);
 800f4e6:	68fb      	ldr	r3, [r7, #12]
 800f4e8:	2200      	movs	r2, #0
 800f4ea:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800f4ee:	68fb      	ldr	r3, [r7, #12]
 800f4f0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800f4f4:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800f4f8:	68fb      	ldr	r3, [r7, #12]
 800f4fa:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800f4fe:	68fb      	ldr	r3, [r7, #12]
 800f500:	2201      	movs	r2, #1
 800f502:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_ERROR;
 800f506:	2301      	movs	r3, #1
 800f508:	e11f      	b.n	800f74a <HAL_SPI_Transmit+0x3da>
    while (hspi->TxXferCount > 0UL)
 800f50a:	68fb      	ldr	r3, [r7, #12]
 800f50c:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800f510:	b29b      	uxth	r3, r3
 800f512:	2b00      	cmp	r3, #0
 800f514:	d1b9      	bne.n	800f48a <HAL_SPI_Transmit+0x11a>
 800f516:	e0f2      	b.n	800f6fe <HAL_SPI_Transmit+0x38e>
        }
      }
    }
  }
  /* Transmit data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800f518:	68fb      	ldr	r3, [r7, #12]
 800f51a:	68db      	ldr	r3, [r3, #12]
 800f51c:	2b07      	cmp	r3, #7
 800f51e:	f240 80e7 	bls.w	800f6f0 <HAL_SPI_Transmit+0x380>
  {
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0UL)
 800f522:	e05d      	b.n	800f5e0 <HAL_SPI_Transmit+0x270>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 800f524:	68fb      	ldr	r3, [r7, #12]
 800f526:	681b      	ldr	r3, [r3, #0]
 800f528:	695b      	ldr	r3, [r3, #20]
 800f52a:	f003 0302 	and.w	r3, r3, #2
 800f52e:	2b02      	cmp	r3, #2
 800f530:	d132      	bne.n	800f598 <HAL_SPI_Transmit+0x228>
      {
        if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 800f532:	68fb      	ldr	r3, [r7, #12]
 800f534:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800f538:	b29b      	uxth	r3, r3
 800f53a:	2b01      	cmp	r3, #1
 800f53c:	d918      	bls.n	800f570 <HAL_SPI_Transmit+0x200>
 800f53e:	68fb      	ldr	r3, [r7, #12]
 800f540:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f542:	2b00      	cmp	r3, #0
 800f544:	d014      	beq.n	800f570 <HAL_SPI_Transmit+0x200>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 800f546:	68fb      	ldr	r3, [r7, #12]
 800f548:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800f54a:	68fb      	ldr	r3, [r7, #12]
 800f54c:	681b      	ldr	r3, [r3, #0]
 800f54e:	6812      	ldr	r2, [r2, #0]
 800f550:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 800f552:	68fb      	ldr	r3, [r7, #12]
 800f554:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800f556:	1d1a      	adds	r2, r3, #4
 800f558:	68fb      	ldr	r3, [r7, #12]
 800f55a:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 800f55c:	68fb      	ldr	r3, [r7, #12]
 800f55e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800f562:	b29b      	uxth	r3, r3
 800f564:	3b02      	subs	r3, #2
 800f566:	b29a      	uxth	r2, r3
 800f568:	68fb      	ldr	r3, [r7, #12]
 800f56a:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 800f56e:	e037      	b.n	800f5e0 <HAL_SPI_Transmit+0x270>
        }
        else
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((uint16_t *)hspi->pTxBuffPtr);
 800f570:	68fb      	ldr	r3, [r7, #12]
 800f572:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800f574:	881a      	ldrh	r2, [r3, #0]
 800f576:	69fb      	ldr	r3, [r7, #28]
 800f578:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800f57a:	68fb      	ldr	r3, [r7, #12]
 800f57c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800f57e:	1c9a      	adds	r2, r3, #2
 800f580:	68fb      	ldr	r3, [r7, #12]
 800f582:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount--;
 800f584:	68fb      	ldr	r3, [r7, #12]
 800f586:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800f58a:	b29b      	uxth	r3, r3
 800f58c:	3b01      	subs	r3, #1
 800f58e:	b29a      	uxth	r2, r3
 800f590:	68fb      	ldr	r3, [r7, #12]
 800f592:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 800f596:	e023      	b.n	800f5e0 <HAL_SPI_Transmit+0x270>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800f598:	f7f5 fc0c 	bl	8004db4 <HAL_GetTick>
 800f59c:	4602      	mov	r2, r0
 800f59e:	697b      	ldr	r3, [r7, #20]
 800f5a0:	1ad3      	subs	r3, r2, r3
 800f5a2:	683a      	ldr	r2, [r7, #0]
 800f5a4:	429a      	cmp	r2, r3
 800f5a6:	d803      	bhi.n	800f5b0 <HAL_SPI_Transmit+0x240>
 800f5a8:	683b      	ldr	r3, [r7, #0]
 800f5aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f5ae:	d102      	bne.n	800f5b6 <HAL_SPI_Transmit+0x246>
 800f5b0:	683b      	ldr	r3, [r7, #0]
 800f5b2:	2b00      	cmp	r3, #0
 800f5b4:	d114      	bne.n	800f5e0 <HAL_SPI_Transmit+0x270>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800f5b6:	68f8      	ldr	r0, [r7, #12]
 800f5b8:	f000 fdaa 	bl	8010110 <SPI_CloseTransfer>

          /* Process Unlocked */
          __HAL_UNLOCK(hspi);
 800f5bc:	68fb      	ldr	r3, [r7, #12]
 800f5be:	2200      	movs	r2, #0
 800f5c0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800f5c4:	68fb      	ldr	r3, [r7, #12]
 800f5c6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800f5ca:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800f5ce:	68fb      	ldr	r3, [r7, #12]
 800f5d0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800f5d4:	68fb      	ldr	r3, [r7, #12]
 800f5d6:	2201      	movs	r2, #1
 800f5d8:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_ERROR;
 800f5dc:	2301      	movs	r3, #1
 800f5de:	e0b4      	b.n	800f74a <HAL_SPI_Transmit+0x3da>
    while (hspi->TxXferCount > 0UL)
 800f5e0:	68fb      	ldr	r3, [r7, #12]
 800f5e2:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800f5e6:	b29b      	uxth	r3, r3
 800f5e8:	2b00      	cmp	r3, #0
 800f5ea:	d19b      	bne.n	800f524 <HAL_SPI_Transmit+0x1b4>
 800f5ec:	e087      	b.n	800f6fe <HAL_SPI_Transmit+0x38e>
  else
  {
    while (hspi->TxXferCount > 0UL)
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 800f5ee:	68fb      	ldr	r3, [r7, #12]
 800f5f0:	681b      	ldr	r3, [r3, #0]
 800f5f2:	695b      	ldr	r3, [r3, #20]
 800f5f4:	f003 0302 	and.w	r3, r3, #2
 800f5f8:	2b02      	cmp	r3, #2
 800f5fa:	d155      	bne.n	800f6a8 <HAL_SPI_Transmit+0x338>
      {
        if ((hspi->TxXferCount > 3UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_03DATA))
 800f5fc:	68fb      	ldr	r3, [r7, #12]
 800f5fe:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800f602:	b29b      	uxth	r3, r3
 800f604:	2b03      	cmp	r3, #3
 800f606:	d918      	bls.n	800f63a <HAL_SPI_Transmit+0x2ca>
 800f608:	68fb      	ldr	r3, [r7, #12]
 800f60a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f60c:	2b40      	cmp	r3, #64	; 0x40
 800f60e:	d914      	bls.n	800f63a <HAL_SPI_Transmit+0x2ca>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 800f610:	68fb      	ldr	r3, [r7, #12]
 800f612:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800f614:	68fb      	ldr	r3, [r7, #12]
 800f616:	681b      	ldr	r3, [r3, #0]
 800f618:	6812      	ldr	r2, [r2, #0]
 800f61a:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 800f61c:	68fb      	ldr	r3, [r7, #12]
 800f61e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800f620:	1d1a      	adds	r2, r3, #4
 800f622:	68fb      	ldr	r3, [r7, #12]
 800f624:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)4UL;
 800f626:	68fb      	ldr	r3, [r7, #12]
 800f628:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800f62c:	b29b      	uxth	r3, r3
 800f62e:	3b04      	subs	r3, #4
 800f630:	b29a      	uxth	r2, r3
 800f632:	68fb      	ldr	r3, [r7, #12]
 800f634:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 800f638:	e05a      	b.n	800f6f0 <HAL_SPI_Transmit+0x380>
        }
        else if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 800f63a:	68fb      	ldr	r3, [r7, #12]
 800f63c:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800f640:	b29b      	uxth	r3, r3
 800f642:	2b01      	cmp	r3, #1
 800f644:	d917      	bls.n	800f676 <HAL_SPI_Transmit+0x306>
 800f646:	68fb      	ldr	r3, [r7, #12]
 800f648:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f64a:	2b00      	cmp	r3, #0
 800f64c:	d013      	beq.n	800f676 <HAL_SPI_Transmit+0x306>
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((uint16_t *)hspi->pTxBuffPtr);
 800f64e:	68fb      	ldr	r3, [r7, #12]
 800f650:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800f652:	881a      	ldrh	r2, [r3, #0]
 800f654:	69fb      	ldr	r3, [r7, #28]
 800f656:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800f658:	68fb      	ldr	r3, [r7, #12]
 800f65a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800f65c:	1c9a      	adds	r2, r3, #2
 800f65e:	68fb      	ldr	r3, [r7, #12]
 800f660:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 800f662:	68fb      	ldr	r3, [r7, #12]
 800f664:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800f668:	b29b      	uxth	r3, r3
 800f66a:	3b02      	subs	r3, #2
 800f66c:	b29a      	uxth	r2, r3
 800f66e:	68fb      	ldr	r3, [r7, #12]
 800f670:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 800f674:	e03c      	b.n	800f6f0 <HAL_SPI_Transmit+0x380>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->TXDR) = *((uint8_t *)hspi->pTxBuffPtr);
 800f676:	68fb      	ldr	r3, [r7, #12]
 800f678:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800f67a:	68fb      	ldr	r3, [r7, #12]
 800f67c:	681b      	ldr	r3, [r3, #0]
 800f67e:	3320      	adds	r3, #32
 800f680:	7812      	ldrb	r2, [r2, #0]
 800f682:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr += sizeof(uint8_t);
 800f684:	68fb      	ldr	r3, [r7, #12]
 800f686:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800f688:	1c5a      	adds	r2, r3, #1
 800f68a:	68fb      	ldr	r3, [r7, #12]
 800f68c:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount--;
 800f68e:	68fb      	ldr	r3, [r7, #12]
 800f690:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800f694:	b29b      	uxth	r3, r3
 800f696:	3b01      	subs	r3, #1
 800f698:	b29a      	uxth	r2, r3
 800f69a:	68fb      	ldr	r3, [r7, #12]
 800f69c:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 800f6a0:	e026      	b.n	800f6f0 <HAL_SPI_Transmit+0x380>
 800f6a2:	bf00      	nop
 800f6a4:	ffff0000 	.word	0xffff0000
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800f6a8:	f7f5 fb84 	bl	8004db4 <HAL_GetTick>
 800f6ac:	4602      	mov	r2, r0
 800f6ae:	697b      	ldr	r3, [r7, #20]
 800f6b0:	1ad3      	subs	r3, r2, r3
 800f6b2:	683a      	ldr	r2, [r7, #0]
 800f6b4:	429a      	cmp	r2, r3
 800f6b6:	d803      	bhi.n	800f6c0 <HAL_SPI_Transmit+0x350>
 800f6b8:	683b      	ldr	r3, [r7, #0]
 800f6ba:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f6be:	d102      	bne.n	800f6c6 <HAL_SPI_Transmit+0x356>
 800f6c0:	683b      	ldr	r3, [r7, #0]
 800f6c2:	2b00      	cmp	r3, #0
 800f6c4:	d114      	bne.n	800f6f0 <HAL_SPI_Transmit+0x380>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800f6c6:	68f8      	ldr	r0, [r7, #12]
 800f6c8:	f000 fd22 	bl	8010110 <SPI_CloseTransfer>

          /* Process Unlocked */
          __HAL_UNLOCK(hspi);
 800f6cc:	68fb      	ldr	r3, [r7, #12]
 800f6ce:	2200      	movs	r2, #0
 800f6d0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800f6d4:	68fb      	ldr	r3, [r7, #12]
 800f6d6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800f6da:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800f6de:	68fb      	ldr	r3, [r7, #12]
 800f6e0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800f6e4:	68fb      	ldr	r3, [r7, #12]
 800f6e6:	2201      	movs	r2, #1
 800f6e8:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_ERROR;
 800f6ec:	2301      	movs	r3, #1
 800f6ee:	e02c      	b.n	800f74a <HAL_SPI_Transmit+0x3da>
    while (hspi->TxXferCount > 0UL)
 800f6f0:	68fb      	ldr	r3, [r7, #12]
 800f6f2:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800f6f6:	b29b      	uxth	r3, r3
 800f6f8:	2b00      	cmp	r3, #0
 800f6fa:	f47f af78 	bne.w	800f5ee <HAL_SPI_Transmit+0x27e>
      }
    }
  }

  /* Wait for Tx (and CRC) data to be sent */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, tickstart, Timeout) != HAL_OK)
 800f6fe:	683b      	ldr	r3, [r7, #0]
 800f700:	9300      	str	r3, [sp, #0]
 800f702:	697b      	ldr	r3, [r7, #20]
 800f704:	2200      	movs	r2, #0
 800f706:	2108      	movs	r1, #8
 800f708:	68f8      	ldr	r0, [r7, #12]
 800f70a:	f000 fda1 	bl	8010250 <SPI_WaitOnFlagUntilTimeout>
 800f70e:	4603      	mov	r3, r0
 800f710:	2b00      	cmp	r3, #0
 800f712:	d007      	beq.n	800f724 <HAL_SPI_Transmit+0x3b4>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800f714:	68fb      	ldr	r3, [r7, #12]
 800f716:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800f71a:	f043 0220 	orr.w	r2, r3, #32
 800f71e:	68fb      	ldr	r3, [r7, #12]
 800f720:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 800f724:	68f8      	ldr	r0, [r7, #12]
 800f726:	f000 fcf3 	bl	8010110 <SPI_CloseTransfer>

  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800f72a:	68fb      	ldr	r3, [r7, #12]
 800f72c:	2200      	movs	r2, #0
 800f72e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  hspi->State = HAL_SPI_STATE_READY;
 800f732:	68fb      	ldr	r3, [r7, #12]
 800f734:	2201      	movs	r2, #1
 800f736:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800f73a:	68fb      	ldr	r3, [r7, #12]
 800f73c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800f740:	2b00      	cmp	r3, #0
 800f742:	d001      	beq.n	800f748 <HAL_SPI_Transmit+0x3d8>
  {
    return HAL_ERROR;
 800f744:	2301      	movs	r3, #1
 800f746:	e000      	b.n	800f74a <HAL_SPI_Transmit+0x3da>
  }
  return errorcode;
 800f748:	7efb      	ldrb	r3, [r7, #27]
}
 800f74a:	4618      	mov	r0, r3
 800f74c:	3720      	adds	r7, #32
 800f74e:	46bd      	mov	sp, r7
 800f750:	bd80      	pop	{r7, pc}
 800f752:	bf00      	nop

0800f754 <HAL_SPI_Receive>:
  * @param  Size   : amount of data to be received
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800f754:	b580      	push	{r7, lr}
 800f756:	b08a      	sub	sp, #40	; 0x28
 800f758:	af02      	add	r7, sp, #8
 800f75a:	60f8      	str	r0, [r7, #12]
 800f75c:	60b9      	str	r1, [r7, #8]
 800f75e:	603b      	str	r3, [r7, #0]
 800f760:	4613      	mov	r3, r2
 800f762:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800f764:	2300      	movs	r3, #0
 800f766:	77fb      	strb	r3, [r7, #31]
#if defined (__GNUC__)
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 800f768:	68fb      	ldr	r3, [r7, #12]
 800f76a:	681b      	ldr	r3, [r3, #0]
 800f76c:	3330      	adds	r3, #48	; 0x30
 800f76e:	61bb      	str	r3, [r7, #24]
#endif /* __GNUC__ */

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_RXONLY(hspi->Init.Direction));

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 800f770:	68fb      	ldr	r3, [r7, #12]
 800f772:	685b      	ldr	r3, [r3, #4]
 800f774:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800f778:	d112      	bne.n	800f7a0 <HAL_SPI_Receive+0x4c>
 800f77a:	68fb      	ldr	r3, [r7, #12]
 800f77c:	689b      	ldr	r3, [r3, #8]
 800f77e:	2b00      	cmp	r3, #0
 800f780:	d10e      	bne.n	800f7a0 <HAL_SPI_Receive+0x4c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 800f782:	68fb      	ldr	r3, [r7, #12]
 800f784:	2204      	movs	r2, #4
 800f786:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 800f78a:	88fa      	ldrh	r2, [r7, #6]
 800f78c:	683b      	ldr	r3, [r7, #0]
 800f78e:	9300      	str	r3, [sp, #0]
 800f790:	4613      	mov	r3, r2
 800f792:	68ba      	ldr	r2, [r7, #8]
 800f794:	68b9      	ldr	r1, [r7, #8]
 800f796:	68f8      	ldr	r0, [r7, #12]
 800f798:	f000 f9ce 	bl	800fb38 <HAL_SPI_TransmitReceive>
 800f79c:	4603      	mov	r3, r0
 800f79e:	e1c7      	b.n	800fb30 <HAL_SPI_Receive+0x3dc>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800f7a0:	68fb      	ldr	r3, [r7, #12]
 800f7a2:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800f7a6:	2b01      	cmp	r3, #1
 800f7a8:	d101      	bne.n	800f7ae <HAL_SPI_Receive+0x5a>
 800f7aa:	2302      	movs	r3, #2
 800f7ac:	e1c0      	b.n	800fb30 <HAL_SPI_Receive+0x3dc>
 800f7ae:	68fb      	ldr	r3, [r7, #12]
 800f7b0:	2201      	movs	r2, #1
 800f7b2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800f7b6:	f7f5 fafd 	bl	8004db4 <HAL_GetTick>
 800f7ba:	6178      	str	r0, [r7, #20]

  if (hspi->State != HAL_SPI_STATE_READY)
 800f7bc:	68fb      	ldr	r3, [r7, #12]
 800f7be:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800f7c2:	b2db      	uxtb	r3, r3
 800f7c4:	2b01      	cmp	r3, #1
 800f7c6:	d007      	beq.n	800f7d8 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_BUSY;
 800f7c8:	2302      	movs	r3, #2
 800f7ca:	77fb      	strb	r3, [r7, #31]
    __HAL_UNLOCK(hspi);
 800f7cc:	68fb      	ldr	r3, [r7, #12]
 800f7ce:	2200      	movs	r2, #0
 800f7d0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 800f7d4:	7ffb      	ldrb	r3, [r7, #31]
 800f7d6:	e1ab      	b.n	800fb30 <HAL_SPI_Receive+0x3dc>
  }

  if ((pData == NULL) || (Size == 0UL))
 800f7d8:	68bb      	ldr	r3, [r7, #8]
 800f7da:	2b00      	cmp	r3, #0
 800f7dc:	d002      	beq.n	800f7e4 <HAL_SPI_Receive+0x90>
 800f7de:	88fb      	ldrh	r3, [r7, #6]
 800f7e0:	2b00      	cmp	r3, #0
 800f7e2:	d107      	bne.n	800f7f4 <HAL_SPI_Receive+0xa0>
  {
    errorcode = HAL_ERROR;
 800f7e4:	2301      	movs	r3, #1
 800f7e6:	77fb      	strb	r3, [r7, #31]
    __HAL_UNLOCK(hspi);
 800f7e8:	68fb      	ldr	r3, [r7, #12]
 800f7ea:	2200      	movs	r2, #0
 800f7ec:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 800f7f0:	7ffb      	ldrb	r3, [r7, #31]
 800f7f2:	e19d      	b.n	800fb30 <HAL_SPI_Receive+0x3dc>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800f7f4:	68fb      	ldr	r3, [r7, #12]
 800f7f6:	2204      	movs	r2, #4
 800f7f8:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800f7fc:	68fb      	ldr	r3, [r7, #12]
 800f7fe:	2200      	movs	r2, #0
 800f800:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800f804:	68fb      	ldr	r3, [r7, #12]
 800f806:	68ba      	ldr	r2, [r7, #8]
 800f808:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->RxXferSize  = Size;
 800f80a:	68fb      	ldr	r3, [r7, #12]
 800f80c:	88fa      	ldrh	r2, [r7, #6]
 800f80e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  hspi->RxXferCount = Size;
 800f812:	68fb      	ldr	r3, [r7, #12]
 800f814:	88fa      	ldrh	r2, [r7, #6]
 800f816:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = NULL;
 800f81a:	68fb      	ldr	r3, [r7, #12]
 800f81c:	2200      	movs	r2, #0
 800f81e:	65da      	str	r2, [r3, #92]	; 0x5c
  hspi->TxXferSize  = (uint16_t) 0UL;
 800f820:	68fb      	ldr	r3, [r7, #12]
 800f822:	2200      	movs	r2, #0
 800f824:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
  hspi->TxXferCount = (uint16_t) 0UL;
 800f828:	68fb      	ldr	r3, [r7, #12]
 800f82a:	2200      	movs	r2, #0
 800f82c:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->RxISR       = NULL;
 800f830:	68fb      	ldr	r3, [r7, #12]
 800f832:	2200      	movs	r2, #0
 800f834:	671a      	str	r2, [r3, #112]	; 0x70
  hspi->TxISR       = NULL;
 800f836:	68fb      	ldr	r3, [r7, #12]
 800f838:	2200      	movs	r2, #0
 800f83a:	675a      	str	r2, [r3, #116]	; 0x74

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800f83c:	68fb      	ldr	r3, [r7, #12]
 800f83e:	689b      	ldr	r3, [r3, #8]
 800f840:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
 800f844:	d107      	bne.n	800f856 <HAL_SPI_Receive+0x102>
  {
    SPI_1LINE_RX(hspi);
 800f846:	68fb      	ldr	r3, [r7, #12]
 800f848:	681b      	ldr	r3, [r3, #0]
 800f84a:	681a      	ldr	r2, [r3, #0]
 800f84c:	68fb      	ldr	r3, [r7, #12]
 800f84e:	681b      	ldr	r3, [r3, #0]
 800f850:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800f854:	601a      	str	r2, [r3, #0]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 800f856:	68fb      	ldr	r3, [r7, #12]
 800f858:	681b      	ldr	r3, [r3, #0]
 800f85a:	685a      	ldr	r2, [r3, #4]
 800f85c:	4b94      	ldr	r3, [pc, #592]	; (800fab0 <HAL_SPI_Receive+0x35c>)
 800f85e:	4013      	ands	r3, r2
 800f860:	88f9      	ldrh	r1, [r7, #6]
 800f862:	68fa      	ldr	r2, [r7, #12]
 800f864:	6812      	ldr	r2, [r2, #0]
 800f866:	430b      	orrs	r3, r1
 800f868:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 800f86a:	68fb      	ldr	r3, [r7, #12]
 800f86c:	681b      	ldr	r3, [r3, #0]
 800f86e:	681a      	ldr	r2, [r3, #0]
 800f870:	68fb      	ldr	r3, [r7, #12]
 800f872:	681b      	ldr	r3, [r3, #0]
 800f874:	f042 0201 	orr.w	r2, r2, #1
 800f878:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800f87a:	68fb      	ldr	r3, [r7, #12]
 800f87c:	685b      	ldr	r3, [r3, #4]
 800f87e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800f882:	d107      	bne.n	800f894 <HAL_SPI_Receive+0x140>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 800f884:	68fb      	ldr	r3, [r7, #12]
 800f886:	681b      	ldr	r3, [r3, #0]
 800f888:	681a      	ldr	r2, [r3, #0]
 800f88a:	68fb      	ldr	r3, [r7, #12]
 800f88c:	681b      	ldr	r3, [r3, #0]
 800f88e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800f892:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 800f894:	68fb      	ldr	r3, [r7, #12]
 800f896:	68db      	ldr	r3, [r3, #12]
 800f898:	2b0f      	cmp	r3, #15
 800f89a:	d948      	bls.n	800f92e <HAL_SPI_Receive+0x1da>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
 800f89c:	e040      	b.n	800f920 <HAL_SPI_Receive+0x1cc>
    {
      /* Check the RXWNE/EOT flag */
      if ((hspi->Instance->SR & (SPI_FLAG_RXWNE | SPI_FLAG_EOT)) != 0UL)
 800f89e:	68fb      	ldr	r3, [r7, #12]
 800f8a0:	681b      	ldr	r3, [r3, #0]
 800f8a2:	695a      	ldr	r2, [r3, #20]
 800f8a4:	f248 0308 	movw	r3, #32776	; 0x8008
 800f8a8:	4013      	ands	r3, r2
 800f8aa:	2b00      	cmp	r3, #0
 800f8ac:	d014      	beq.n	800f8d8 <HAL_SPI_Receive+0x184>
      {
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 800f8ae:	68fb      	ldr	r3, [r7, #12]
 800f8b0:	681a      	ldr	r2, [r3, #0]
 800f8b2:	68fb      	ldr	r3, [r7, #12]
 800f8b4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800f8b6:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800f8b8:	601a      	str	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint32_t);
 800f8ba:	68fb      	ldr	r3, [r7, #12]
 800f8bc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800f8be:	1d1a      	adds	r2, r3, #4
 800f8c0:	68fb      	ldr	r3, [r7, #12]
 800f8c2:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount--;
 800f8c4:	68fb      	ldr	r3, [r7, #12]
 800f8c6:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800f8ca:	b29b      	uxth	r3, r3
 800f8cc:	3b01      	subs	r3, #1
 800f8ce:	b29a      	uxth	r2, r3
 800f8d0:	68fb      	ldr	r3, [r7, #12]
 800f8d2:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800f8d6:	e023      	b.n	800f920 <HAL_SPI_Receive+0x1cc>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800f8d8:	f7f5 fa6c 	bl	8004db4 <HAL_GetTick>
 800f8dc:	4602      	mov	r2, r0
 800f8de:	697b      	ldr	r3, [r7, #20]
 800f8e0:	1ad3      	subs	r3, r2, r3
 800f8e2:	683a      	ldr	r2, [r7, #0]
 800f8e4:	429a      	cmp	r2, r3
 800f8e6:	d803      	bhi.n	800f8f0 <HAL_SPI_Receive+0x19c>
 800f8e8:	683b      	ldr	r3, [r7, #0]
 800f8ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f8ee:	d102      	bne.n	800f8f6 <HAL_SPI_Receive+0x1a2>
 800f8f0:	683b      	ldr	r3, [r7, #0]
 800f8f2:	2b00      	cmp	r3, #0
 800f8f4:	d114      	bne.n	800f920 <HAL_SPI_Receive+0x1cc>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800f8f6:	68f8      	ldr	r0, [r7, #12]
 800f8f8:	f000 fc0a 	bl	8010110 <SPI_CloseTransfer>

          /* Process Unlocked */
          __HAL_UNLOCK(hspi);
 800f8fc:	68fb      	ldr	r3, [r7, #12]
 800f8fe:	2200      	movs	r2, #0
 800f900:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800f904:	68fb      	ldr	r3, [r7, #12]
 800f906:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800f90a:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800f90e:	68fb      	ldr	r3, [r7, #12]
 800f910:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800f914:	68fb      	ldr	r3, [r7, #12]
 800f916:	2201      	movs	r2, #1
 800f918:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_ERROR;
 800f91c:	2301      	movs	r3, #1
 800f91e:	e107      	b.n	800fb30 <HAL_SPI_Receive+0x3dc>
    while (hspi->RxXferCount > 0UL)
 800f920:	68fb      	ldr	r3, [r7, #12]
 800f922:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800f926:	b29b      	uxth	r3, r3
 800f928:	2b00      	cmp	r3, #0
 800f92a:	d1b8      	bne.n	800f89e <HAL_SPI_Receive+0x14a>
 800f92c:	e0ed      	b.n	800fb0a <HAL_SPI_Receive+0x3b6>
        }
      }
    }
  }
  /* Receive data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800f92e:	68fb      	ldr	r3, [r7, #12]
 800f930:	68db      	ldr	r3, [r3, #12]
 800f932:	2b07      	cmp	r3, #7
 800f934:	f240 80e2 	bls.w	800fafc <HAL_SPI_Receive+0x3a8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
 800f938:	e05b      	b.n	800f9f2 <HAL_SPI_Receive+0x29e>
    {
      /* Check the RXWNE/FRLVL flag */
      if ((hspi->Instance->SR & (SPI_FLAG_RXWNE | SPI_FLAG_FRLVL)) != 0UL)
 800f93a:	68fb      	ldr	r3, [r7, #12]
 800f93c:	681b      	ldr	r3, [r3, #0]
 800f93e:	695b      	ldr	r3, [r3, #20]
 800f940:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 800f944:	2b00      	cmp	r3, #0
 800f946:	d030      	beq.n	800f9aa <HAL_SPI_Receive+0x256>
      {
        if ((hspi->Instance->SR & SPI_FLAG_RXWNE) != 0UL)
 800f948:	68fb      	ldr	r3, [r7, #12]
 800f94a:	681b      	ldr	r3, [r3, #0]
 800f94c:	695b      	ldr	r3, [r3, #20]
 800f94e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800f952:	2b00      	cmp	r3, #0
 800f954:	d014      	beq.n	800f980 <HAL_SPI_Receive+0x22c>
        {
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 800f956:	68fb      	ldr	r3, [r7, #12]
 800f958:	681a      	ldr	r2, [r3, #0]
 800f95a:	68fb      	ldr	r3, [r7, #12]
 800f95c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800f95e:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800f960:	601a      	str	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint32_t);
 800f962:	68fb      	ldr	r3, [r7, #12]
 800f964:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800f966:	1d1a      	adds	r2, r3, #4
 800f968:	68fb      	ldr	r3, [r7, #12]
 800f96a:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount -= (uint16_t)2UL;
 800f96c:	68fb      	ldr	r3, [r7, #12]
 800f96e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800f972:	b29b      	uxth	r3, r3
 800f974:	3b02      	subs	r3, #2
 800f976:	b29a      	uxth	r2, r3
 800f978:	68fb      	ldr	r3, [r7, #12]
 800f97a:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800f97e:	e038      	b.n	800f9f2 <HAL_SPI_Receive+0x29e>
        }
        else
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800f980:	68fb      	ldr	r3, [r7, #12]
 800f982:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800f984:	69ba      	ldr	r2, [r7, #24]
 800f986:	8812      	ldrh	r2, [r2, #0]
 800f988:	b292      	uxth	r2, r2
 800f98a:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 800f98c:	68fb      	ldr	r3, [r7, #12]
 800f98e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800f990:	1c9a      	adds	r2, r3, #2
 800f992:	68fb      	ldr	r3, [r7, #12]
 800f994:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount--;
 800f996:	68fb      	ldr	r3, [r7, #12]
 800f998:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800f99c:	b29b      	uxth	r3, r3
 800f99e:	3b01      	subs	r3, #1
 800f9a0:	b29a      	uxth	r2, r3
 800f9a2:	68fb      	ldr	r3, [r7, #12]
 800f9a4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800f9a8:	e023      	b.n	800f9f2 <HAL_SPI_Receive+0x29e>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800f9aa:	f7f5 fa03 	bl	8004db4 <HAL_GetTick>
 800f9ae:	4602      	mov	r2, r0
 800f9b0:	697b      	ldr	r3, [r7, #20]
 800f9b2:	1ad3      	subs	r3, r2, r3
 800f9b4:	683a      	ldr	r2, [r7, #0]
 800f9b6:	429a      	cmp	r2, r3
 800f9b8:	d803      	bhi.n	800f9c2 <HAL_SPI_Receive+0x26e>
 800f9ba:	683b      	ldr	r3, [r7, #0]
 800f9bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f9c0:	d102      	bne.n	800f9c8 <HAL_SPI_Receive+0x274>
 800f9c2:	683b      	ldr	r3, [r7, #0]
 800f9c4:	2b00      	cmp	r3, #0
 800f9c6:	d114      	bne.n	800f9f2 <HAL_SPI_Receive+0x29e>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800f9c8:	68f8      	ldr	r0, [r7, #12]
 800f9ca:	f000 fba1 	bl	8010110 <SPI_CloseTransfer>

          /* Process Unlocked */
          __HAL_UNLOCK(hspi);
 800f9ce:	68fb      	ldr	r3, [r7, #12]
 800f9d0:	2200      	movs	r2, #0
 800f9d2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800f9d6:	68fb      	ldr	r3, [r7, #12]
 800f9d8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800f9dc:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800f9e0:	68fb      	ldr	r3, [r7, #12]
 800f9e2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800f9e6:	68fb      	ldr	r3, [r7, #12]
 800f9e8:	2201      	movs	r2, #1
 800f9ea:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_ERROR;
 800f9ee:	2301      	movs	r3, #1
 800f9f0:	e09e      	b.n	800fb30 <HAL_SPI_Receive+0x3dc>
    while (hspi->RxXferCount > 0UL)
 800f9f2:	68fb      	ldr	r3, [r7, #12]
 800f9f4:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800f9f8:	b29b      	uxth	r3, r3
 800f9fa:	2b00      	cmp	r3, #0
 800f9fc:	d19d      	bne.n	800f93a <HAL_SPI_Receive+0x1e6>
 800f9fe:	e084      	b.n	800fb0a <HAL_SPI_Receive+0x3b6>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
    {
      /* Check the RXWNE/FRLVL flag */
      if ((hspi->Instance->SR & (SPI_FLAG_RXWNE | SPI_FLAG_FRLVL)) != 0UL)
 800fa00:	68fb      	ldr	r3, [r7, #12]
 800fa02:	681b      	ldr	r3, [r3, #0]
 800fa04:	695b      	ldr	r3, [r3, #20]
 800fa06:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 800fa0a:	2b00      	cmp	r3, #0
 800fa0c:	d052      	beq.n	800fab4 <HAL_SPI_Receive+0x360>
      {
        if ((hspi->Instance->SR & SPI_FLAG_RXWNE) != 0UL)
 800fa0e:	68fb      	ldr	r3, [r7, #12]
 800fa10:	681b      	ldr	r3, [r3, #0]
 800fa12:	695b      	ldr	r3, [r3, #20]
 800fa14:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800fa18:	2b00      	cmp	r3, #0
 800fa1a:	d014      	beq.n	800fa46 <HAL_SPI_Receive+0x2f2>
        {
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 800fa1c:	68fb      	ldr	r3, [r7, #12]
 800fa1e:	681a      	ldr	r2, [r3, #0]
 800fa20:	68fb      	ldr	r3, [r7, #12]
 800fa22:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800fa24:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800fa26:	601a      	str	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint32_t);
 800fa28:	68fb      	ldr	r3, [r7, #12]
 800fa2a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800fa2c:	1d1a      	adds	r2, r3, #4
 800fa2e:	68fb      	ldr	r3, [r7, #12]
 800fa30:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount -= (uint16_t)4UL;
 800fa32:	68fb      	ldr	r3, [r7, #12]
 800fa34:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800fa38:	b29b      	uxth	r3, r3
 800fa3a:	3b04      	subs	r3, #4
 800fa3c:	b29a      	uxth	r2, r3
 800fa3e:	68fb      	ldr	r3, [r7, #12]
 800fa40:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800fa44:	e05a      	b.n	800fafc <HAL_SPI_Receive+0x3a8>
        }
        else if ((hspi->Instance->SR & SPI_FLAG_FRLVL) > SPI_RX_FIFO_1PACKET)
 800fa46:	68fb      	ldr	r3, [r7, #12]
 800fa48:	681b      	ldr	r3, [r3, #0]
 800fa4a:	695b      	ldr	r3, [r3, #20]
 800fa4c:	f403 43c0 	and.w	r3, r3, #24576	; 0x6000
 800fa50:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800fa54:	d914      	bls.n	800fa80 <HAL_SPI_Receive+0x32c>
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800fa56:	68fb      	ldr	r3, [r7, #12]
 800fa58:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800fa5a:	69ba      	ldr	r2, [r7, #24]
 800fa5c:	8812      	ldrh	r2, [r2, #0]
 800fa5e:	b292      	uxth	r2, r2
 800fa60:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 800fa62:	68fb      	ldr	r3, [r7, #12]
 800fa64:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800fa66:	1c9a      	adds	r2, r3, #2
 800fa68:	68fb      	ldr	r3, [r7, #12]
 800fa6a:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount -= (uint16_t)2UL;
 800fa6c:	68fb      	ldr	r3, [r7, #12]
 800fa6e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800fa72:	b29b      	uxth	r3, r3
 800fa74:	3b02      	subs	r3, #2
 800fa76:	b29a      	uxth	r2, r3
 800fa78:	68fb      	ldr	r3, [r7, #12]
 800fa7a:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800fa7e:	e03d      	b.n	800fafc <HAL_SPI_Receive+0x3a8>
        }
        else
        {
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800fa80:	68fb      	ldr	r3, [r7, #12]
 800fa82:	681b      	ldr	r3, [r3, #0]
 800fa84:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800fa88:	68fb      	ldr	r3, [r7, #12]
 800fa8a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800fa8c:	7812      	ldrb	r2, [r2, #0]
 800fa8e:	b2d2      	uxtb	r2, r2
 800fa90:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 800fa92:	68fb      	ldr	r3, [r7, #12]
 800fa94:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800fa96:	1c5a      	adds	r2, r3, #1
 800fa98:	68fb      	ldr	r3, [r7, #12]
 800fa9a:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount--;
 800fa9c:	68fb      	ldr	r3, [r7, #12]
 800fa9e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800faa2:	b29b      	uxth	r3, r3
 800faa4:	3b01      	subs	r3, #1
 800faa6:	b29a      	uxth	r2, r3
 800faa8:	68fb      	ldr	r3, [r7, #12]
 800faaa:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800faae:	e025      	b.n	800fafc <HAL_SPI_Receive+0x3a8>
 800fab0:	ffff0000 	.word	0xffff0000
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800fab4:	f7f5 f97e 	bl	8004db4 <HAL_GetTick>
 800fab8:	4602      	mov	r2, r0
 800faba:	697b      	ldr	r3, [r7, #20]
 800fabc:	1ad3      	subs	r3, r2, r3
 800fabe:	683a      	ldr	r2, [r7, #0]
 800fac0:	429a      	cmp	r2, r3
 800fac2:	d803      	bhi.n	800facc <HAL_SPI_Receive+0x378>
 800fac4:	683b      	ldr	r3, [r7, #0]
 800fac6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800faca:	d102      	bne.n	800fad2 <HAL_SPI_Receive+0x37e>
 800facc:	683b      	ldr	r3, [r7, #0]
 800face:	2b00      	cmp	r3, #0
 800fad0:	d114      	bne.n	800fafc <HAL_SPI_Receive+0x3a8>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800fad2:	68f8      	ldr	r0, [r7, #12]
 800fad4:	f000 fb1c 	bl	8010110 <SPI_CloseTransfer>

          /* Process Unlocked */
          __HAL_UNLOCK(hspi);
 800fad8:	68fb      	ldr	r3, [r7, #12]
 800fada:	2200      	movs	r2, #0
 800fadc:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800fae0:	68fb      	ldr	r3, [r7, #12]
 800fae2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800fae6:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800faea:	68fb      	ldr	r3, [r7, #12]
 800faec:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800faf0:	68fb      	ldr	r3, [r7, #12]
 800faf2:	2201      	movs	r2, #1
 800faf4:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_ERROR;
 800faf8:	2301      	movs	r3, #1
 800fafa:	e019      	b.n	800fb30 <HAL_SPI_Receive+0x3dc>
    while (hspi->RxXferCount > 0UL)
 800fafc:	68fb      	ldr	r3, [r7, #12]
 800fafe:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800fb02:	b29b      	uxth	r3, r3
 800fb04:	2b00      	cmp	r3, #0
 800fb06:	f47f af7b 	bne.w	800fa00 <HAL_SPI_Receive+0x2ac>
    }
  }
#endif /* USE_SPI_CRC */

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 800fb0a:	68f8      	ldr	r0, [r7, #12]
 800fb0c:	f000 fb00 	bl	8010110 <SPI_CloseTransfer>

  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800fb10:	68fb      	ldr	r3, [r7, #12]
 800fb12:	2200      	movs	r2, #0
 800fb14:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  hspi->State = HAL_SPI_STATE_READY;
 800fb18:	68fb      	ldr	r3, [r7, #12]
 800fb1a:	2201      	movs	r2, #1
 800fb1c:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800fb20:	68fb      	ldr	r3, [r7, #12]
 800fb22:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800fb26:	2b00      	cmp	r3, #0
 800fb28:	d001      	beq.n	800fb2e <HAL_SPI_Receive+0x3da>
  {
    return HAL_ERROR;
 800fb2a:	2301      	movs	r3, #1
 800fb2c:	e000      	b.n	800fb30 <HAL_SPI_Receive+0x3dc>
  }
  return errorcode;
 800fb2e:	7ffb      	ldrb	r3, [r7, #31]
}
 800fb30:	4618      	mov	r0, r3
 800fb32:	3720      	adds	r7, #32
 800fb34:	46bd      	mov	sp, r7
 800fb36:	bd80      	pop	{r7, pc}

0800fb38 <HAL_SPI_TransmitReceive>:
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800fb38:	b580      	push	{r7, lr}
 800fb3a:	b08e      	sub	sp, #56	; 0x38
 800fb3c:	af02      	add	r7, sp, #8
 800fb3e:	60f8      	str	r0, [r7, #12]
 800fb40:	60b9      	str	r1, [r7, #8]
 800fb42:	607a      	str	r2, [r7, #4]
 800fb44:	807b      	strh	r3, [r7, #2]
  HAL_SPI_StateTypeDef tmp_state;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800fb46:	2300      	movs	r3, #0
 800fb48:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 800fb4c:	68fb      	ldr	r3, [r7, #12]
 800fb4e:	681b      	ldr	r3, [r3, #0]
 800fb50:	3320      	adds	r3, #32
 800fb52:	627b      	str	r3, [r7, #36]	; 0x24
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 800fb54:	68fb      	ldr	r3, [r7, #12]
 800fb56:	681b      	ldr	r3, [r3, #0]
 800fb58:	3330      	adds	r3, #48	; 0x30
 800fb5a:	623b      	str	r3, [r7, #32]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800fb5c:	68fb      	ldr	r3, [r7, #12]
 800fb5e:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800fb62:	2b01      	cmp	r3, #1
 800fb64:	d101      	bne.n	800fb6a <HAL_SPI_TransmitReceive+0x32>
 800fb66:	2302      	movs	r3, #2
 800fb68:	e2ce      	b.n	8010108 <HAL_SPI_TransmitReceive+0x5d0>
 800fb6a:	68fb      	ldr	r3, [r7, #12]
 800fb6c:	2201      	movs	r2, #1
 800fb6e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800fb72:	f7f5 f91f 	bl	8004db4 <HAL_GetTick>
 800fb76:	61f8      	str	r0, [r7, #28]

  initial_TxXferCount = Size;
 800fb78:	887b      	ldrh	r3, [r7, #2]
 800fb7a:	85fb      	strh	r3, [r7, #46]	; 0x2e
  initial_RxXferCount = Size;
 800fb7c:	887b      	ldrh	r3, [r7, #2]
 800fb7e:	85bb      	strh	r3, [r7, #44]	; 0x2c
  tmp_state           = hspi->State;
 800fb80:	68fb      	ldr	r3, [r7, #12]
 800fb82:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800fb86:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 800fb88:	68fb      	ldr	r3, [r7, #12]
 800fb8a:	685b      	ldr	r3, [r3, #4]
 800fb8c:	617b      	str	r3, [r7, #20]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800fb8e:	7efb      	ldrb	r3, [r7, #27]
 800fb90:	2b01      	cmp	r3, #1
 800fb92:	d014      	beq.n	800fbbe <HAL_SPI_TransmitReceive+0x86>
 800fb94:	697b      	ldr	r3, [r7, #20]
 800fb96:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800fb9a:	d106      	bne.n	800fbaa <HAL_SPI_TransmitReceive+0x72>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800fb9c:	68fb      	ldr	r3, [r7, #12]
 800fb9e:	689b      	ldr	r3, [r3, #8]
 800fba0:	2b00      	cmp	r3, #0
 800fba2:	d102      	bne.n	800fbaa <HAL_SPI_TransmitReceive+0x72>
 800fba4:	7efb      	ldrb	r3, [r7, #27]
 800fba6:	2b04      	cmp	r3, #4
 800fba8:	d009      	beq.n	800fbbe <HAL_SPI_TransmitReceive+0x86>
  {
    errorcode = HAL_BUSY;
 800fbaa:	2302      	movs	r3, #2
 800fbac:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    __HAL_UNLOCK(hspi);
 800fbb0:	68fb      	ldr	r3, [r7, #12]
 800fbb2:	2200      	movs	r2, #0
 800fbb4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 800fbb8:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800fbbc:	e2a4      	b.n	8010108 <HAL_SPI_TransmitReceive+0x5d0>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0UL))
 800fbbe:	68bb      	ldr	r3, [r7, #8]
 800fbc0:	2b00      	cmp	r3, #0
 800fbc2:	d005      	beq.n	800fbd0 <HAL_SPI_TransmitReceive+0x98>
 800fbc4:	687b      	ldr	r3, [r7, #4]
 800fbc6:	2b00      	cmp	r3, #0
 800fbc8:	d002      	beq.n	800fbd0 <HAL_SPI_TransmitReceive+0x98>
 800fbca:	887b      	ldrh	r3, [r7, #2]
 800fbcc:	2b00      	cmp	r3, #0
 800fbce:	d109      	bne.n	800fbe4 <HAL_SPI_TransmitReceive+0xac>
  {
    errorcode = HAL_ERROR;
 800fbd0:	2301      	movs	r3, #1
 800fbd2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    __HAL_UNLOCK(hspi);
 800fbd6:	68fb      	ldr	r3, [r7, #12]
 800fbd8:	2200      	movs	r2, #0
 800fbda:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 800fbde:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800fbe2:	e291      	b.n	8010108 <HAL_SPI_TransmitReceive+0x5d0>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800fbe4:	68fb      	ldr	r3, [r7, #12]
 800fbe6:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800fbea:	b2db      	uxtb	r3, r3
 800fbec:	2b04      	cmp	r3, #4
 800fbee:	d003      	beq.n	800fbf8 <HAL_SPI_TransmitReceive+0xc0>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800fbf0:	68fb      	ldr	r3, [r7, #12]
 800fbf2:	2205      	movs	r2, #5
 800fbf4:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800fbf8:	68fb      	ldr	r3, [r7, #12]
 800fbfa:	2200      	movs	r2, #0
 800fbfc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800fc00:	68fb      	ldr	r3, [r7, #12]
 800fc02:	687a      	ldr	r2, [r7, #4]
 800fc04:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->RxXferCount = Size;
 800fc06:	68fb      	ldr	r3, [r7, #12]
 800fc08:	887a      	ldrh	r2, [r7, #2]
 800fc0a:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  hspi->RxXferSize  = Size;
 800fc0e:	68fb      	ldr	r3, [r7, #12]
 800fc10:	887a      	ldrh	r2, [r7, #2]
 800fc12:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800fc16:	68fb      	ldr	r3, [r7, #12]
 800fc18:	68ba      	ldr	r2, [r7, #8]
 800fc1a:	65da      	str	r2, [r3, #92]	; 0x5c
  hspi->TxXferCount = Size;
 800fc1c:	68fb      	ldr	r3, [r7, #12]
 800fc1e:	887a      	ldrh	r2, [r7, #2]
 800fc20:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->TxXferSize  = Size;
 800fc24:	68fb      	ldr	r3, [r7, #12]
 800fc26:	887a      	ldrh	r2, [r7, #2]
 800fc28:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800fc2c:	68fb      	ldr	r3, [r7, #12]
 800fc2e:	2200      	movs	r2, #0
 800fc30:	671a      	str	r2, [r3, #112]	; 0x70
  hspi->TxISR       = NULL;
 800fc32:	68fb      	ldr	r3, [r7, #12]
 800fc34:	2200      	movs	r2, #0
 800fc36:	675a      	str	r2, [r3, #116]	; 0x74

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 800fc38:	68fb      	ldr	r3, [r7, #12]
 800fc3a:	681b      	ldr	r3, [r3, #0]
 800fc3c:	685a      	ldr	r2, [r3, #4]
 800fc3e:	4b9f      	ldr	r3, [pc, #636]	; (800febc <HAL_SPI_TransmitReceive+0x384>)
 800fc40:	4013      	ands	r3, r2
 800fc42:	8879      	ldrh	r1, [r7, #2]
 800fc44:	68fa      	ldr	r2, [r7, #12]
 800fc46:	6812      	ldr	r2, [r2, #0]
 800fc48:	430b      	orrs	r3, r1
 800fc4a:	6053      	str	r3, [r2, #4]

  __HAL_SPI_ENABLE(hspi);
 800fc4c:	68fb      	ldr	r3, [r7, #12]
 800fc4e:	681b      	ldr	r3, [r3, #0]
 800fc50:	681a      	ldr	r2, [r3, #0]
 800fc52:	68fb      	ldr	r3, [r7, #12]
 800fc54:	681b      	ldr	r3, [r3, #0]
 800fc56:	f042 0201 	orr.w	r2, r2, #1
 800fc5a:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800fc5c:	68fb      	ldr	r3, [r7, #12]
 800fc5e:	685b      	ldr	r3, [r3, #4]
 800fc60:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800fc64:	d107      	bne.n	800fc76 <HAL_SPI_TransmitReceive+0x13e>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 800fc66:	68fb      	ldr	r3, [r7, #12]
 800fc68:	681b      	ldr	r3, [r3, #0]
 800fc6a:	681a      	ldr	r2, [r3, #0]
 800fc6c:	68fb      	ldr	r3, [r7, #12]
 800fc6e:	681b      	ldr	r3, [r3, #0]
 800fc70:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800fc74:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 800fc76:	68fb      	ldr	r3, [r7, #12]
 800fc78:	68db      	ldr	r3, [r3, #12]
 800fc7a:	2b0f      	cmp	r3, #15
 800fc7c:	d970      	bls.n	800fd60 <HAL_SPI_TransmitReceive+0x228>
  {
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 800fc7e:	e068      	b.n	800fd52 <HAL_SPI_TransmitReceive+0x21a>
    {
      /* Check TXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL))
 800fc80:	68fb      	ldr	r3, [r7, #12]
 800fc82:	681b      	ldr	r3, [r3, #0]
 800fc84:	695b      	ldr	r3, [r3, #20]
 800fc86:	f003 0302 	and.w	r3, r3, #2
 800fc8a:	2b02      	cmp	r3, #2
 800fc8c:	d11a      	bne.n	800fcc4 <HAL_SPI_TransmitReceive+0x18c>
 800fc8e:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800fc90:	2b00      	cmp	r3, #0
 800fc92:	d017      	beq.n	800fcc4 <HAL_SPI_TransmitReceive+0x18c>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 800fc94:	68fb      	ldr	r3, [r7, #12]
 800fc96:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800fc98:	68fb      	ldr	r3, [r7, #12]
 800fc9a:	681b      	ldr	r3, [r3, #0]
 800fc9c:	6812      	ldr	r2, [r2, #0]
 800fc9e:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 800fca0:	68fb      	ldr	r3, [r7, #12]
 800fca2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800fca4:	1d1a      	adds	r2, r3, #4
 800fca6:	68fb      	ldr	r3, [r7, #12]
 800fca8:	65da      	str	r2, [r3, #92]	; 0x5c
        hspi->TxXferCount --;
 800fcaa:	68fb      	ldr	r3, [r7, #12]
 800fcac:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800fcb0:	b29b      	uxth	r3, r3
 800fcb2:	3b01      	subs	r3, #1
 800fcb4:	b29a      	uxth	r2, r3
 800fcb6:	68fb      	ldr	r3, [r7, #12]
 800fcb8:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        initial_TxXferCount = hspi->TxXferCount;
 800fcbc:	68fb      	ldr	r3, [r7, #12]
 800fcbe:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800fcc2:	85fb      	strh	r3, [r7, #46]	; 0x2e
      }

      /* Check RXWNE/EOT flag */
      if (((hspi->Instance->SR & (SPI_FLAG_RXWNE | SPI_FLAG_EOT)) != 0UL) && (initial_RxXferCount > 0UL))
 800fcc4:	68fb      	ldr	r3, [r7, #12]
 800fcc6:	681b      	ldr	r3, [r3, #0]
 800fcc8:	695a      	ldr	r2, [r3, #20]
 800fcca:	f248 0308 	movw	r3, #32776	; 0x8008
 800fcce:	4013      	ands	r3, r2
 800fcd0:	2b00      	cmp	r3, #0
 800fcd2:	d01a      	beq.n	800fd0a <HAL_SPI_TransmitReceive+0x1d2>
 800fcd4:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800fcd6:	2b00      	cmp	r3, #0
 800fcd8:	d017      	beq.n	800fd0a <HAL_SPI_TransmitReceive+0x1d2>
      {
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 800fcda:	68fb      	ldr	r3, [r7, #12]
 800fcdc:	681a      	ldr	r2, [r3, #0]
 800fcde:	68fb      	ldr	r3, [r7, #12]
 800fce0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800fce2:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800fce4:	601a      	str	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint32_t);
 800fce6:	68fb      	ldr	r3, [r7, #12]
 800fce8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800fcea:	1d1a      	adds	r2, r3, #4
 800fcec:	68fb      	ldr	r3, [r7, #12]
 800fcee:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount --;
 800fcf0:	68fb      	ldr	r3, [r7, #12]
 800fcf2:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800fcf6:	b29b      	uxth	r3, r3
 800fcf8:	3b01      	subs	r3, #1
 800fcfa:	b29a      	uxth	r2, r3
 800fcfc:	68fb      	ldr	r3, [r7, #12]
 800fcfe:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
        initial_RxXferCount = hspi->RxXferCount;
 800fd02:	68fb      	ldr	r3, [r7, #12]
 800fd04:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800fd08:	85bb      	strh	r3, [r7, #44]	; 0x2c
      }

      /* Timeout management */
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800fd0a:	f7f5 f853 	bl	8004db4 <HAL_GetTick>
 800fd0e:	4602      	mov	r2, r0
 800fd10:	69fb      	ldr	r3, [r7, #28]
 800fd12:	1ad3      	subs	r3, r2, r3
 800fd14:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800fd16:	429a      	cmp	r2, r3
 800fd18:	d803      	bhi.n	800fd22 <HAL_SPI_TransmitReceive+0x1ea>
 800fd1a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fd1c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800fd20:	d102      	bne.n	800fd28 <HAL_SPI_TransmitReceive+0x1f0>
 800fd22:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fd24:	2b00      	cmp	r3, #0
 800fd26:	d114      	bne.n	800fd52 <HAL_SPI_TransmitReceive+0x21a>
      {
        /* Call standard close procedure with error check */
        SPI_CloseTransfer(hspi);
 800fd28:	68f8      	ldr	r0, [r7, #12]
 800fd2a:	f000 f9f1 	bl	8010110 <SPI_CloseTransfer>
      
        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800fd2e:	68fb      	ldr	r3, [r7, #12]
 800fd30:	2200      	movs	r2, #0
 800fd32:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
      
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800fd36:	68fb      	ldr	r3, [r7, #12]
 800fd38:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800fd3c:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800fd40:	68fb      	ldr	r3, [r7, #12]
 800fd42:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        hspi->State = HAL_SPI_STATE_READY;
 800fd46:	68fb      	ldr	r3, [r7, #12]
 800fd48:	2201      	movs	r2, #1
 800fd4a:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
        return HAL_ERROR;
 800fd4e:	2301      	movs	r3, #1
 800fd50:	e1da      	b.n	8010108 <HAL_SPI_TransmitReceive+0x5d0>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 800fd52:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800fd54:	2b00      	cmp	r3, #0
 800fd56:	d193      	bne.n	800fc80 <HAL_SPI_TransmitReceive+0x148>
 800fd58:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800fd5a:	2b00      	cmp	r3, #0
 800fd5c:	d190      	bne.n	800fc80 <HAL_SPI_TransmitReceive+0x148>
 800fd5e:	e1ac      	b.n	80100ba <HAL_SPI_TransmitReceive+0x582>
      }
    }
  }
  /* Transmit and Receive data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800fd60:	68fb      	ldr	r3, [r7, #12]
 800fd62:	68db      	ldr	r3, [r3, #12]
 800fd64:	2b07      	cmp	r3, #7
 800fd66:	f240 81a0 	bls.w	80100aa <HAL_SPI_TransmitReceive+0x572>
  {
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 800fd6a:	e0a9      	b.n	800fec0 <HAL_SPI_TransmitReceive+0x388>
    {
      /* Check TXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP) && (initial_TxXferCount > 0UL))
 800fd6c:	68fb      	ldr	r3, [r7, #12]
 800fd6e:	681b      	ldr	r3, [r3, #0]
 800fd70:	695b      	ldr	r3, [r3, #20]
 800fd72:	f003 0302 	and.w	r3, r3, #2
 800fd76:	2b02      	cmp	r3, #2
 800fd78:	d139      	bne.n	800fdee <HAL_SPI_TransmitReceive+0x2b6>
 800fd7a:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800fd7c:	2b00      	cmp	r3, #0
 800fd7e:	d036      	beq.n	800fdee <HAL_SPI_TransmitReceive+0x2b6>
      {
        if ((initial_TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 800fd80:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800fd82:	2b01      	cmp	r3, #1
 800fd84:	d91c      	bls.n	800fdc0 <HAL_SPI_TransmitReceive+0x288>
 800fd86:	68fb      	ldr	r3, [r7, #12]
 800fd88:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800fd8a:	2b00      	cmp	r3, #0
 800fd8c:	d018      	beq.n	800fdc0 <HAL_SPI_TransmitReceive+0x288>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 800fd8e:	68fb      	ldr	r3, [r7, #12]
 800fd90:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800fd92:	68fb      	ldr	r3, [r7, #12]
 800fd94:	681b      	ldr	r3, [r3, #0]
 800fd96:	6812      	ldr	r2, [r2, #0]
 800fd98:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 800fd9a:	68fb      	ldr	r3, [r7, #12]
 800fd9c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800fd9e:	1d1a      	adds	r2, r3, #4
 800fda0:	68fb      	ldr	r3, [r7, #12]
 800fda2:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 800fda4:	68fb      	ldr	r3, [r7, #12]
 800fda6:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800fdaa:	b29b      	uxth	r3, r3
 800fdac:	3b02      	subs	r3, #2
 800fdae:	b29a      	uxth	r2, r3
 800fdb0:	68fb      	ldr	r3, [r7, #12]
 800fdb2:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
          initial_TxXferCount = hspi->TxXferCount;
 800fdb6:	68fb      	ldr	r3, [r7, #12]
 800fdb8:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800fdbc:	85fb      	strh	r3, [r7, #46]	; 0x2e
 800fdbe:	e016      	b.n	800fdee <HAL_SPI_TransmitReceive+0x2b6>
        }
        else
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((uint16_t *)hspi->pTxBuffPtr);
 800fdc0:	68fb      	ldr	r3, [r7, #12]
 800fdc2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800fdc4:	881a      	ldrh	r2, [r3, #0]
 800fdc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fdc8:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800fdca:	68fb      	ldr	r3, [r7, #12]
 800fdcc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800fdce:	1c9a      	adds	r2, r3, #2
 800fdd0:	68fb      	ldr	r3, [r7, #12]
 800fdd2:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount--;
 800fdd4:	68fb      	ldr	r3, [r7, #12]
 800fdd6:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800fdda:	b29b      	uxth	r3, r3
 800fddc:	3b01      	subs	r3, #1
 800fdde:	b29a      	uxth	r2, r3
 800fde0:	68fb      	ldr	r3, [r7, #12]
 800fde2:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
          initial_TxXferCount = hspi->TxXferCount;
 800fde6:	68fb      	ldr	r3, [r7, #12]
 800fde8:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800fdec:	85fb      	strh	r3, [r7, #46]	; 0x2e
        }
      }

      /* Check RXWNE/FRLVL flag */
      if (((hspi->Instance->SR & (SPI_FLAG_RXWNE | SPI_FLAG_FRLVL)) != 0UL) && (initial_RxXferCount > 0UL))
 800fdee:	68fb      	ldr	r3, [r7, #12]
 800fdf0:	681b      	ldr	r3, [r3, #0]
 800fdf2:	695b      	ldr	r3, [r3, #20]
 800fdf4:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 800fdf8:	2b00      	cmp	r3, #0
 800fdfa:	d03a      	beq.n	800fe72 <HAL_SPI_TransmitReceive+0x33a>
 800fdfc:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800fdfe:	2b00      	cmp	r3, #0
 800fe00:	d037      	beq.n	800fe72 <HAL_SPI_TransmitReceive+0x33a>
      {
        if ((hspi->Instance->SR & SPI_FLAG_RXWNE) != 0UL)
 800fe02:	68fb      	ldr	r3, [r7, #12]
 800fe04:	681b      	ldr	r3, [r3, #0]
 800fe06:	695b      	ldr	r3, [r3, #20]
 800fe08:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800fe0c:	2b00      	cmp	r3, #0
 800fe0e:	d018      	beq.n	800fe42 <HAL_SPI_TransmitReceive+0x30a>
        {
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 800fe10:	68fb      	ldr	r3, [r7, #12]
 800fe12:	681a      	ldr	r2, [r3, #0]
 800fe14:	68fb      	ldr	r3, [r7, #12]
 800fe16:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800fe18:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800fe1a:	601a      	str	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint32_t);
 800fe1c:	68fb      	ldr	r3, [r7, #12]
 800fe1e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800fe20:	1d1a      	adds	r2, r3, #4
 800fe22:	68fb      	ldr	r3, [r7, #12]
 800fe24:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount -= (uint16_t)2UL;
 800fe26:	68fb      	ldr	r3, [r7, #12]
 800fe28:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800fe2c:	b29b      	uxth	r3, r3
 800fe2e:	3b02      	subs	r3, #2
 800fe30:	b29a      	uxth	r2, r3
 800fe32:	68fb      	ldr	r3, [r7, #12]
 800fe34:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 800fe38:	68fb      	ldr	r3, [r7, #12]
 800fe3a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800fe3e:	85bb      	strh	r3, [r7, #44]	; 0x2c
 800fe40:	e017      	b.n	800fe72 <HAL_SPI_TransmitReceive+0x33a>
        }
        else
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800fe42:	68fb      	ldr	r3, [r7, #12]
 800fe44:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800fe46:	6a3a      	ldr	r2, [r7, #32]
 800fe48:	8812      	ldrh	r2, [r2, #0]
 800fe4a:	b292      	uxth	r2, r2
 800fe4c:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 800fe4e:	68fb      	ldr	r3, [r7, #12]
 800fe50:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800fe52:	1c9a      	adds	r2, r3, #2
 800fe54:	68fb      	ldr	r3, [r7, #12]
 800fe56:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount--;
 800fe58:	68fb      	ldr	r3, [r7, #12]
 800fe5a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800fe5e:	b29b      	uxth	r3, r3
 800fe60:	3b01      	subs	r3, #1
 800fe62:	b29a      	uxth	r2, r3
 800fe64:	68fb      	ldr	r3, [r7, #12]
 800fe66:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 800fe6a:	68fb      	ldr	r3, [r7, #12]
 800fe6c:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800fe70:	85bb      	strh	r3, [r7, #44]	; 0x2c
        }
      }

      /* Timeout management */
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800fe72:	f7f4 ff9f 	bl	8004db4 <HAL_GetTick>
 800fe76:	4602      	mov	r2, r0
 800fe78:	69fb      	ldr	r3, [r7, #28]
 800fe7a:	1ad3      	subs	r3, r2, r3
 800fe7c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800fe7e:	429a      	cmp	r2, r3
 800fe80:	d803      	bhi.n	800fe8a <HAL_SPI_TransmitReceive+0x352>
 800fe82:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fe84:	f1b3 3fff 	cmp.w	r3, #4294967295
 800fe88:	d102      	bne.n	800fe90 <HAL_SPI_TransmitReceive+0x358>
 800fe8a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fe8c:	2b00      	cmp	r3, #0
 800fe8e:	d117      	bne.n	800fec0 <HAL_SPI_TransmitReceive+0x388>
      {
        /* Call standard close procedure with error check */
        SPI_CloseTransfer(hspi);
 800fe90:	68f8      	ldr	r0, [r7, #12]
 800fe92:	f000 f93d 	bl	8010110 <SPI_CloseTransfer>

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800fe96:	68fb      	ldr	r3, [r7, #12]
 800fe98:	2200      	movs	r2, #0
 800fe9a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800fe9e:	68fb      	ldr	r3, [r7, #12]
 800fea0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800fea4:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800fea8:	68fb      	ldr	r3, [r7, #12]
 800feaa:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        hspi->State = HAL_SPI_STATE_READY;
 800feae:	68fb      	ldr	r3, [r7, #12]
 800feb0:	2201      	movs	r2, #1
 800feb2:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
        return HAL_ERROR;
 800feb6:	2301      	movs	r3, #1
 800feb8:	e126      	b.n	8010108 <HAL_SPI_TransmitReceive+0x5d0>
 800feba:	bf00      	nop
 800febc:	ffff0000 	.word	0xffff0000
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 800fec0:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800fec2:	2b00      	cmp	r3, #0
 800fec4:	f47f af52 	bne.w	800fd6c <HAL_SPI_TransmitReceive+0x234>
 800fec8:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800feca:	2b00      	cmp	r3, #0
 800fecc:	f47f af4e 	bne.w	800fd6c <HAL_SPI_TransmitReceive+0x234>
 800fed0:	e0f3      	b.n	80100ba <HAL_SPI_TransmitReceive+0x582>
  else
  {
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
    {
      /* check TXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL))
 800fed2:	68fb      	ldr	r3, [r7, #12]
 800fed4:	681b      	ldr	r3, [r3, #0]
 800fed6:	695b      	ldr	r3, [r3, #20]
 800fed8:	f003 0302 	and.w	r3, r3, #2
 800fedc:	2b02      	cmp	r3, #2
 800fede:	d15a      	bne.n	800ff96 <HAL_SPI_TransmitReceive+0x45e>
 800fee0:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800fee2:	2b00      	cmp	r3, #0
 800fee4:	d057      	beq.n	800ff96 <HAL_SPI_TransmitReceive+0x45e>
      {
        if ((initial_TxXferCount > 3UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_03DATA))
 800fee6:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800fee8:	2b03      	cmp	r3, #3
 800feea:	d91c      	bls.n	800ff26 <HAL_SPI_TransmitReceive+0x3ee>
 800feec:	68fb      	ldr	r3, [r7, #12]
 800feee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800fef0:	2b40      	cmp	r3, #64	; 0x40
 800fef2:	d918      	bls.n	800ff26 <HAL_SPI_TransmitReceive+0x3ee>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 800fef4:	68fb      	ldr	r3, [r7, #12]
 800fef6:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800fef8:	68fb      	ldr	r3, [r7, #12]
 800fefa:	681b      	ldr	r3, [r3, #0]
 800fefc:	6812      	ldr	r2, [r2, #0]
 800fefe:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 800ff00:	68fb      	ldr	r3, [r7, #12]
 800ff02:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800ff04:	1d1a      	adds	r2, r3, #4
 800ff06:	68fb      	ldr	r3, [r7, #12]
 800ff08:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)4UL;
 800ff0a:	68fb      	ldr	r3, [r7, #12]
 800ff0c:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800ff10:	b29b      	uxth	r3, r3
 800ff12:	3b04      	subs	r3, #4
 800ff14:	b29a      	uxth	r2, r3
 800ff16:	68fb      	ldr	r3, [r7, #12]
 800ff18:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
          initial_TxXferCount = hspi->TxXferCount;
 800ff1c:	68fb      	ldr	r3, [r7, #12]
 800ff1e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800ff22:	85fb      	strh	r3, [r7, #46]	; 0x2e
 800ff24:	e037      	b.n	800ff96 <HAL_SPI_TransmitReceive+0x45e>
        }
        else if ((initial_TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 800ff26:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800ff28:	2b01      	cmp	r3, #1
 800ff2a:	d91b      	bls.n	800ff64 <HAL_SPI_TransmitReceive+0x42c>
 800ff2c:	68fb      	ldr	r3, [r7, #12]
 800ff2e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ff30:	2b00      	cmp	r3, #0
 800ff32:	d017      	beq.n	800ff64 <HAL_SPI_TransmitReceive+0x42c>
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((uint16_t *)hspi->pTxBuffPtr);
 800ff34:	68fb      	ldr	r3, [r7, #12]
 800ff36:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800ff38:	881a      	ldrh	r2, [r3, #0]
 800ff3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ff3c:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800ff3e:	68fb      	ldr	r3, [r7, #12]
 800ff40:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800ff42:	1c9a      	adds	r2, r3, #2
 800ff44:	68fb      	ldr	r3, [r7, #12]
 800ff46:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 800ff48:	68fb      	ldr	r3, [r7, #12]
 800ff4a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800ff4e:	b29b      	uxth	r3, r3
 800ff50:	3b02      	subs	r3, #2
 800ff52:	b29a      	uxth	r2, r3
 800ff54:	68fb      	ldr	r3, [r7, #12]
 800ff56:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
          initial_TxXferCount = hspi->TxXferCount;
 800ff5a:	68fb      	ldr	r3, [r7, #12]
 800ff5c:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800ff60:	85fb      	strh	r3, [r7, #46]	; 0x2e
 800ff62:	e018      	b.n	800ff96 <HAL_SPI_TransmitReceive+0x45e>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->TXDR) = *((uint8_t *)hspi->pTxBuffPtr);
 800ff64:	68fb      	ldr	r3, [r7, #12]
 800ff66:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800ff68:	68fb      	ldr	r3, [r7, #12]
 800ff6a:	681b      	ldr	r3, [r3, #0]
 800ff6c:	3320      	adds	r3, #32
 800ff6e:	7812      	ldrb	r2, [r2, #0]
 800ff70:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr += sizeof(uint8_t);
 800ff72:	68fb      	ldr	r3, [r7, #12]
 800ff74:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800ff76:	1c5a      	adds	r2, r3, #1
 800ff78:	68fb      	ldr	r3, [r7, #12]
 800ff7a:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount--;
 800ff7c:	68fb      	ldr	r3, [r7, #12]
 800ff7e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800ff82:	b29b      	uxth	r3, r3
 800ff84:	3b01      	subs	r3, #1
 800ff86:	b29a      	uxth	r2, r3
 800ff88:	68fb      	ldr	r3, [r7, #12]
 800ff8a:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
          initial_TxXferCount = hspi->TxXferCount;
 800ff8e:	68fb      	ldr	r3, [r7, #12]
 800ff90:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800ff94:	85fb      	strh	r3, [r7, #46]	; 0x2e
        }
      }

      /* Wait until RXWNE/FRLVL flag is reset */
      if (((hspi->Instance->SR & (SPI_FLAG_RXWNE | SPI_FLAG_FRLVL)) != 0UL) && (initial_RxXferCount > 0UL))
 800ff96:	68fb      	ldr	r3, [r7, #12]
 800ff98:	681b      	ldr	r3, [r3, #0]
 800ff9a:	695b      	ldr	r3, [r3, #20]
 800ff9c:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 800ffa0:	2b00      	cmp	r3, #0
 800ffa2:	d05e      	beq.n	8010062 <HAL_SPI_TransmitReceive+0x52a>
 800ffa4:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800ffa6:	2b00      	cmp	r3, #0
 800ffa8:	d05b      	beq.n	8010062 <HAL_SPI_TransmitReceive+0x52a>
      {
        if ((hspi->Instance->SR & SPI_FLAG_RXWNE) != 0UL)
 800ffaa:	68fb      	ldr	r3, [r7, #12]
 800ffac:	681b      	ldr	r3, [r3, #0]
 800ffae:	695b      	ldr	r3, [r3, #20]
 800ffb0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800ffb4:	2b00      	cmp	r3, #0
 800ffb6:	d018      	beq.n	800ffea <HAL_SPI_TransmitReceive+0x4b2>
        {
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 800ffb8:	68fb      	ldr	r3, [r7, #12]
 800ffba:	681a      	ldr	r2, [r3, #0]
 800ffbc:	68fb      	ldr	r3, [r7, #12]
 800ffbe:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800ffc0:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800ffc2:	601a      	str	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint32_t);
 800ffc4:	68fb      	ldr	r3, [r7, #12]
 800ffc6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800ffc8:	1d1a      	adds	r2, r3, #4
 800ffca:	68fb      	ldr	r3, [r7, #12]
 800ffcc:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount -= (uint16_t)4UL;
 800ffce:	68fb      	ldr	r3, [r7, #12]
 800ffd0:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800ffd4:	b29b      	uxth	r3, r3
 800ffd6:	3b04      	subs	r3, #4
 800ffd8:	b29a      	uxth	r2, r3
 800ffda:	68fb      	ldr	r3, [r7, #12]
 800ffdc:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 800ffe0:	68fb      	ldr	r3, [r7, #12]
 800ffe2:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800ffe6:	85bb      	strh	r3, [r7, #44]	; 0x2c
 800ffe8:	e03b      	b.n	8010062 <HAL_SPI_TransmitReceive+0x52a>
        }
        else if ((hspi->Instance->SR & SPI_FLAG_FRLVL) > SPI_RX_FIFO_1PACKET)
 800ffea:	68fb      	ldr	r3, [r7, #12]
 800ffec:	681b      	ldr	r3, [r3, #0]
 800ffee:	695b      	ldr	r3, [r3, #20]
 800fff0:	f403 43c0 	and.w	r3, r3, #24576	; 0x6000
 800fff4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800fff8:	d918      	bls.n	801002c <HAL_SPI_TransmitReceive+0x4f4>
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800fffa:	68fb      	ldr	r3, [r7, #12]
 800fffc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800fffe:	6a3a      	ldr	r2, [r7, #32]
 8010000:	8812      	ldrh	r2, [r2, #0]
 8010002:	b292      	uxth	r2, r2
 8010004:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8010006:	68fb      	ldr	r3, [r7, #12]
 8010008:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 801000a:	1c9a      	adds	r2, r3, #2
 801000c:	68fb      	ldr	r3, [r7, #12]
 801000e:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount -= (uint16_t)2UL;
 8010010:	68fb      	ldr	r3, [r7, #12]
 8010012:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8010016:	b29b      	uxth	r3, r3
 8010018:	3b02      	subs	r3, #2
 801001a:	b29a      	uxth	r2, r3
 801001c:	68fb      	ldr	r3, [r7, #12]
 801001e:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 8010022:	68fb      	ldr	r3, [r7, #12]
 8010024:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8010028:	85bb      	strh	r3, [r7, #44]	; 0x2c
 801002a:	e01a      	b.n	8010062 <HAL_SPI_TransmitReceive+0x52a>
        }
        else
        {
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 801002c:	68fb      	ldr	r3, [r7, #12]
 801002e:	681b      	ldr	r3, [r3, #0]
 8010030:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8010034:	68fb      	ldr	r3, [r7, #12]
 8010036:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8010038:	7812      	ldrb	r2, [r2, #0]
 801003a:	b2d2      	uxtb	r2, r2
 801003c:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 801003e:	68fb      	ldr	r3, [r7, #12]
 8010040:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8010042:	1c5a      	adds	r2, r3, #1
 8010044:	68fb      	ldr	r3, [r7, #12]
 8010046:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount--;
 8010048:	68fb      	ldr	r3, [r7, #12]
 801004a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 801004e:	b29b      	uxth	r3, r3
 8010050:	3b01      	subs	r3, #1
 8010052:	b29a      	uxth	r2, r3
 8010054:	68fb      	ldr	r3, [r7, #12]
 8010056:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 801005a:	68fb      	ldr	r3, [r7, #12]
 801005c:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8010060:	85bb      	strh	r3, [r7, #44]	; 0x2c
        }
      }

      /* Timeout management */
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8010062:	f7f4 fea7 	bl	8004db4 <HAL_GetTick>
 8010066:	4602      	mov	r2, r0
 8010068:	69fb      	ldr	r3, [r7, #28]
 801006a:	1ad3      	subs	r3, r2, r3
 801006c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801006e:	429a      	cmp	r2, r3
 8010070:	d803      	bhi.n	801007a <HAL_SPI_TransmitReceive+0x542>
 8010072:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010074:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010078:	d102      	bne.n	8010080 <HAL_SPI_TransmitReceive+0x548>
 801007a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801007c:	2b00      	cmp	r3, #0
 801007e:	d114      	bne.n	80100aa <HAL_SPI_TransmitReceive+0x572>
      {
        /* Call standard close procedure with error check */
        SPI_CloseTransfer(hspi);
 8010080:	68f8      	ldr	r0, [r7, #12]
 8010082:	f000 f845 	bl	8010110 <SPI_CloseTransfer>

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8010086:	68fb      	ldr	r3, [r7, #12]
 8010088:	2200      	movs	r2, #0
 801008a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 801008e:	68fb      	ldr	r3, [r7, #12]
 8010090:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8010094:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8010098:	68fb      	ldr	r3, [r7, #12]
 801009a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        hspi->State = HAL_SPI_STATE_READY;
 801009e:	68fb      	ldr	r3, [r7, #12]
 80100a0:	2201      	movs	r2, #1
 80100a2:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
        return HAL_ERROR;
 80100a6:	2301      	movs	r3, #1
 80100a8:	e02e      	b.n	8010108 <HAL_SPI_TransmitReceive+0x5d0>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 80100aa:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80100ac:	2b00      	cmp	r3, #0
 80100ae:	f47f af10 	bne.w	800fed2 <HAL_SPI_TransmitReceive+0x39a>
 80100b2:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80100b4:	2b00      	cmp	r3, #0
 80100b6:	f47f af0c 	bne.w	800fed2 <HAL_SPI_TransmitReceive+0x39a>
      }
    }
  }

  /* Wait for Tx/Rx (and CRC) data to be sent/received */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, tickstart, Timeout) != HAL_OK)
 80100ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80100bc:	9300      	str	r3, [sp, #0]
 80100be:	69fb      	ldr	r3, [r7, #28]
 80100c0:	2200      	movs	r2, #0
 80100c2:	2108      	movs	r1, #8
 80100c4:	68f8      	ldr	r0, [r7, #12]
 80100c6:	f000 f8c3 	bl	8010250 <SPI_WaitOnFlagUntilTimeout>
 80100ca:	4603      	mov	r3, r0
 80100cc:	2b00      	cmp	r3, #0
 80100ce:	d007      	beq.n	80100e0 <HAL_SPI_TransmitReceive+0x5a8>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80100d0:	68fb      	ldr	r3, [r7, #12]
 80100d2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80100d6:	f043 0220 	orr.w	r2, r3, #32
 80100da:	68fb      	ldr	r3, [r7, #12]
 80100dc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 80100e0:	68f8      	ldr	r0, [r7, #12]
 80100e2:	f000 f815 	bl	8010110 <SPI_CloseTransfer>

  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80100e6:	68fb      	ldr	r3, [r7, #12]
 80100e8:	2200      	movs	r2, #0
 80100ea:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  hspi->State = HAL_SPI_STATE_READY;
 80100ee:	68fb      	ldr	r3, [r7, #12]
 80100f0:	2201      	movs	r2, #1
 80100f2:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80100f6:	68fb      	ldr	r3, [r7, #12]
 80100f8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80100fc:	2b00      	cmp	r3, #0
 80100fe:	d001      	beq.n	8010104 <HAL_SPI_TransmitReceive+0x5cc>
  {
    return HAL_ERROR;
 8010100:	2301      	movs	r3, #1
 8010102:	e001      	b.n	8010108 <HAL_SPI_TransmitReceive+0x5d0>
  }
  return errorcode;
 8010104:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8010108:	4618      	mov	r0, r3
 801010a:	3730      	adds	r7, #48	; 0x30
 801010c:	46bd      	mov	sp, r7
 801010e:	bd80      	pop	{r7, pc}

08010110 <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
*         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 8010110:	b480      	push	{r7}
 8010112:	b085      	sub	sp, #20
 8010114:	af00      	add	r7, sp, #0
 8010116:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 8010118:	687b      	ldr	r3, [r7, #4]
 801011a:	681b      	ldr	r3, [r3, #0]
 801011c:	695b      	ldr	r3, [r3, #20]
 801011e:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 8010120:	687b      	ldr	r3, [r7, #4]
 8010122:	681b      	ldr	r3, [r3, #0]
 8010124:	699a      	ldr	r2, [r3, #24]
 8010126:	687b      	ldr	r3, [r7, #4]
 8010128:	681b      	ldr	r3, [r3, #0]
 801012a:	f042 0208 	orr.w	r2, r2, #8
 801012e:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 8010130:	687b      	ldr	r3, [r7, #4]
 8010132:	681b      	ldr	r3, [r3, #0]
 8010134:	699a      	ldr	r2, [r3, #24]
 8010136:	687b      	ldr	r3, [r7, #4]
 8010138:	681b      	ldr	r3, [r3, #0]
 801013a:	f042 0210 	orr.w	r2, r2, #16
 801013e:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8010140:	687b      	ldr	r3, [r7, #4]
 8010142:	681b      	ldr	r3, [r3, #0]
 8010144:	681a      	ldr	r2, [r3, #0]
 8010146:	687b      	ldr	r3, [r7, #4]
 8010148:	681b      	ldr	r3, [r3, #0]
 801014a:	f022 0201 	bic.w	r2, r2, #1
 801014e:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | SPI_IT_FRE | SPI_IT_MODF));
 8010150:	687b      	ldr	r3, [r7, #4]
 8010152:	681b      	ldr	r3, [r3, #0]
 8010154:	6919      	ldr	r1, [r3, #16]
 8010156:	687b      	ldr	r3, [r7, #4]
 8010158:	681a      	ldr	r2, [r3, #0]
 801015a:	4b3c      	ldr	r3, [pc, #240]	; (801024c <SPI_CloseTransfer+0x13c>)
 801015c:	400b      	ands	r3, r1
 801015e:	6113      	str	r3, [r2, #16]

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 8010160:	687b      	ldr	r3, [r7, #4]
 8010162:	681b      	ldr	r3, [r3, #0]
 8010164:	689a      	ldr	r2, [r3, #8]
 8010166:	687b      	ldr	r3, [r7, #4]
 8010168:	681b      	ldr	r3, [r3, #0]
 801016a:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 801016e:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8010170:	687b      	ldr	r3, [r7, #4]
 8010172:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8010176:	b2db      	uxtb	r3, r3
 8010178:	2b04      	cmp	r3, #4
 801017a:	d014      	beq.n	80101a6 <SPI_CloseTransfer+0x96>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 801017c:	68fb      	ldr	r3, [r7, #12]
 801017e:	f003 0320 	and.w	r3, r3, #32
 8010182:	2b00      	cmp	r3, #0
 8010184:	d00f      	beq.n	80101a6 <SPI_CloseTransfer+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 8010186:	687b      	ldr	r3, [r7, #4]
 8010188:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 801018c:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8010190:	687b      	ldr	r3, [r7, #4]
 8010192:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 8010196:	687b      	ldr	r3, [r7, #4]
 8010198:	681b      	ldr	r3, [r3, #0]
 801019a:	699a      	ldr	r2, [r3, #24]
 801019c:	687b      	ldr	r3, [r7, #4]
 801019e:	681b      	ldr	r3, [r3, #0]
 80101a0:	f042 0220 	orr.w	r2, r2, #32
 80101a4:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 80101a6:	687b      	ldr	r3, [r7, #4]
 80101a8:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 80101ac:	b2db      	uxtb	r3, r3
 80101ae:	2b03      	cmp	r3, #3
 80101b0:	d014      	beq.n	80101dc <SPI_CloseTransfer+0xcc>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 80101b2:	68fb      	ldr	r3, [r7, #12]
 80101b4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80101b8:	2b00      	cmp	r3, #0
 80101ba:	d00f      	beq.n	80101dc <SPI_CloseTransfer+0xcc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 80101bc:	687b      	ldr	r3, [r7, #4]
 80101be:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80101c2:	f043 0204 	orr.w	r2, r3, #4
 80101c6:	687b      	ldr	r3, [r7, #4]
 80101c8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80101cc:	687b      	ldr	r3, [r7, #4]
 80101ce:	681b      	ldr	r3, [r3, #0]
 80101d0:	699a      	ldr	r2, [r3, #24]
 80101d2:	687b      	ldr	r3, [r7, #4]
 80101d4:	681b      	ldr	r3, [r3, #0]
 80101d6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80101da:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 80101dc:	68fb      	ldr	r3, [r7, #12]
 80101de:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80101e2:	2b00      	cmp	r3, #0
 80101e4:	d00f      	beq.n	8010206 <SPI_CloseTransfer+0xf6>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 80101e6:	687b      	ldr	r3, [r7, #4]
 80101e8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80101ec:	f043 0201 	orr.w	r2, r3, #1
 80101f0:	687b      	ldr	r3, [r7, #4]
 80101f2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 80101f6:	687b      	ldr	r3, [r7, #4]
 80101f8:	681b      	ldr	r3, [r3, #0]
 80101fa:	699a      	ldr	r2, [r3, #24]
 80101fc:	687b      	ldr	r3, [r7, #4]
 80101fe:	681b      	ldr	r3, [r3, #0]
 8010200:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8010204:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 8010206:	68fb      	ldr	r3, [r7, #12]
 8010208:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801020c:	2b00      	cmp	r3, #0
 801020e:	d00f      	beq.n	8010230 <SPI_CloseTransfer+0x120>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8010210:	687b      	ldr	r3, [r7, #4]
 8010212:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8010216:	f043 0208 	orr.w	r2, r3, #8
 801021a:	687b      	ldr	r3, [r7, #4]
 801021c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 8010220:	687b      	ldr	r3, [r7, #4]
 8010222:	681b      	ldr	r3, [r3, #0]
 8010224:	699a      	ldr	r2, [r3, #24]
 8010226:	687b      	ldr	r3, [r7, #4]
 8010228:	681b      	ldr	r3, [r3, #0]
 801022a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 801022e:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 8010230:	687b      	ldr	r3, [r7, #4]
 8010232:	2200      	movs	r2, #0
 8010234:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 8010238:	687b      	ldr	r3, [r7, #4]
 801023a:	2200      	movs	r2, #0
 801023c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
}
 8010240:	bf00      	nop
 8010242:	3714      	adds	r7, #20
 8010244:	46bd      	mov	sp, r7
 8010246:	f85d 7b04 	ldr.w	r7, [sp], #4
 801024a:	4770      	bx	lr
 801024c:	fffffc90 	.word	0xfffffc90

08010250 <SPI_WaitOnFlagUntilTimeout>:
  * @param Tickstart: Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitOnFlagUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Tickstart, uint32_t Timeout)
{
 8010250:	b580      	push	{r7, lr}
 8010252:	b084      	sub	sp, #16
 8010254:	af00      	add	r7, sp, #0
 8010256:	60f8      	str	r0, [r7, #12]
 8010258:	60b9      	str	r1, [r7, #8]
 801025a:	603b      	str	r3, [r7, #0]
 801025c:	4613      	mov	r3, r2
 801025e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 8010260:	e010      	b.n	8010284 <SPI_WaitOnFlagUntilTimeout+0x34>
  {
    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8010262:	f7f4 fda7 	bl	8004db4 <HAL_GetTick>
 8010266:	4602      	mov	r2, r0
 8010268:	683b      	ldr	r3, [r7, #0]
 801026a:	1ad3      	subs	r3, r2, r3
 801026c:	69ba      	ldr	r2, [r7, #24]
 801026e:	429a      	cmp	r2, r3
 8010270:	d803      	bhi.n	801027a <SPI_WaitOnFlagUntilTimeout+0x2a>
 8010272:	69bb      	ldr	r3, [r7, #24]
 8010274:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010278:	d102      	bne.n	8010280 <SPI_WaitOnFlagUntilTimeout+0x30>
 801027a:	69bb      	ldr	r3, [r7, #24]
 801027c:	2b00      	cmp	r3, #0
 801027e:	d101      	bne.n	8010284 <SPI_WaitOnFlagUntilTimeout+0x34>
    {
      return HAL_TIMEOUT;
 8010280:	2303      	movs	r3, #3
 8010282:	e00f      	b.n	80102a4 <SPI_WaitOnFlagUntilTimeout+0x54>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 8010284:	68fb      	ldr	r3, [r7, #12]
 8010286:	681b      	ldr	r3, [r3, #0]
 8010288:	695a      	ldr	r2, [r3, #20]
 801028a:	68bb      	ldr	r3, [r7, #8]
 801028c:	4013      	ands	r3, r2
 801028e:	68ba      	ldr	r2, [r7, #8]
 8010290:	429a      	cmp	r2, r3
 8010292:	bf0c      	ite	eq
 8010294:	2301      	moveq	r3, #1
 8010296:	2300      	movne	r3, #0
 8010298:	b2db      	uxtb	r3, r3
 801029a:	461a      	mov	r2, r3
 801029c:	79fb      	ldrb	r3, [r7, #7]
 801029e:	429a      	cmp	r2, r3
 80102a0:	d0df      	beq.n	8010262 <SPI_WaitOnFlagUntilTimeout+0x12>
    }
  }
  return HAL_OK;
 80102a2:	2300      	movs	r3, #0
}
 80102a4:	4618      	mov	r0, r3
 80102a6:	3710      	adds	r7, #16
 80102a8:	46bd      	mov	sp, r7
 80102aa:	bd80      	pop	{r7, pc}

080102ac <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(SPI_HandleTypeDef *hspi)
{
 80102ac:	b480      	push	{r7}
 80102ae:	b085      	sub	sp, #20
 80102b0:	af00      	add	r7, sp, #0
 80102b2:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 80102b4:	687b      	ldr	r3, [r7, #4]
 80102b6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80102b8:	095b      	lsrs	r3, r3, #5
 80102ba:	3301      	adds	r3, #1
 80102bc:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 80102be:	687b      	ldr	r3, [r7, #4]
 80102c0:	68db      	ldr	r3, [r3, #12]
 80102c2:	3301      	adds	r3, #1
 80102c4:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 80102c6:	68bb      	ldr	r3, [r7, #8]
 80102c8:	3307      	adds	r3, #7
 80102ca:	08db      	lsrs	r3, r3, #3
 80102cc:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 80102ce:	68bb      	ldr	r3, [r7, #8]
 80102d0:	68fa      	ldr	r2, [r7, #12]
 80102d2:	fb02 f303 	mul.w	r3, r2, r3
}
 80102d6:	4618      	mov	r0, r3
 80102d8:	3714      	adds	r7, #20
 80102da:	46bd      	mov	sp, r7
 80102dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80102e0:	4770      	bx	lr

080102e2 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80102e2:	b580      	push	{r7, lr}
 80102e4:	b082      	sub	sp, #8
 80102e6:	af00      	add	r7, sp, #0
 80102e8:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80102ea:	687b      	ldr	r3, [r7, #4]
 80102ec:	2b00      	cmp	r3, #0
 80102ee:	d101      	bne.n	80102f4 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80102f0:	2301      	movs	r3, #1
 80102f2:	e042      	b.n	801037a <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80102f4:	687b      	ldr	r3, [r7, #4]
 80102f6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80102fa:	2b00      	cmp	r3, #0
 80102fc:	d106      	bne.n	801030c <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80102fe:	687b      	ldr	r3, [r7, #4]
 8010300:	2200      	movs	r2, #0
 8010302:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8010306:	6878      	ldr	r0, [r7, #4]
 8010308:	f7f4 fa70 	bl	80047ec <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 801030c:	687b      	ldr	r3, [r7, #4]
 801030e:	2224      	movs	r2, #36	; 0x24
 8010310:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  __HAL_UART_DISABLE(huart);
 8010314:	687b      	ldr	r3, [r7, #4]
 8010316:	681b      	ldr	r3, [r3, #0]
 8010318:	681a      	ldr	r2, [r3, #0]
 801031a:	687b      	ldr	r3, [r7, #4]
 801031c:	681b      	ldr	r3, [r3, #0]
 801031e:	f022 0201 	bic.w	r2, r2, #1
 8010322:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8010324:	6878      	ldr	r0, [r7, #4]
 8010326:	f000 f955 	bl	80105d4 <UART_SetConfig>
 801032a:	4603      	mov	r3, r0
 801032c:	2b01      	cmp	r3, #1
 801032e:	d101      	bne.n	8010334 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8010330:	2301      	movs	r3, #1
 8010332:	e022      	b.n	801037a <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8010334:	687b      	ldr	r3, [r7, #4]
 8010336:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010338:	2b00      	cmp	r3, #0
 801033a:	d002      	beq.n	8010342 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 801033c:	6878      	ldr	r0, [r7, #4]
 801033e:	f000 fef9 	bl	8011134 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8010342:	687b      	ldr	r3, [r7, #4]
 8010344:	681b      	ldr	r3, [r3, #0]
 8010346:	685a      	ldr	r2, [r3, #4]
 8010348:	687b      	ldr	r3, [r7, #4]
 801034a:	681b      	ldr	r3, [r3, #0]
 801034c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8010350:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8010352:	687b      	ldr	r3, [r7, #4]
 8010354:	681b      	ldr	r3, [r3, #0]
 8010356:	689a      	ldr	r2, [r3, #8]
 8010358:	687b      	ldr	r3, [r7, #4]
 801035a:	681b      	ldr	r3, [r3, #0]
 801035c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8010360:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8010362:	687b      	ldr	r3, [r7, #4]
 8010364:	681b      	ldr	r3, [r3, #0]
 8010366:	681a      	ldr	r2, [r3, #0]
 8010368:	687b      	ldr	r3, [r7, #4]
 801036a:	681b      	ldr	r3, [r3, #0]
 801036c:	f042 0201 	orr.w	r2, r2, #1
 8010370:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8010372:	6878      	ldr	r0, [r7, #4]
 8010374:	f000 ff80 	bl	8011278 <UART_CheckIdleState>
 8010378:	4603      	mov	r3, r0
}
 801037a:	4618      	mov	r0, r3
 801037c:	3708      	adds	r7, #8
 801037e:	46bd      	mov	sp, r7
 8010380:	bd80      	pop	{r7, pc}

08010382 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8010382:	b580      	push	{r7, lr}
 8010384:	b08a      	sub	sp, #40	; 0x28
 8010386:	af02      	add	r7, sp, #8
 8010388:	60f8      	str	r0, [r7, #12]
 801038a:	60b9      	str	r1, [r7, #8]
 801038c:	603b      	str	r3, [r7, #0]
 801038e:	4613      	mov	r3, r2
 8010390:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8010392:	68fb      	ldr	r3, [r7, #12]
 8010394:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8010398:	2b20      	cmp	r3, #32
 801039a:	f040 8083 	bne.w	80104a4 <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 801039e:	68bb      	ldr	r3, [r7, #8]
 80103a0:	2b00      	cmp	r3, #0
 80103a2:	d002      	beq.n	80103aa <HAL_UART_Transmit+0x28>
 80103a4:	88fb      	ldrh	r3, [r7, #6]
 80103a6:	2b00      	cmp	r3, #0
 80103a8:	d101      	bne.n	80103ae <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 80103aa:	2301      	movs	r3, #1
 80103ac:	e07b      	b.n	80104a6 <HAL_UART_Transmit+0x124>
    }

    __HAL_LOCK(huart);
 80103ae:	68fb      	ldr	r3, [r7, #12]
 80103b0:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 80103b4:	2b01      	cmp	r3, #1
 80103b6:	d101      	bne.n	80103bc <HAL_UART_Transmit+0x3a>
 80103b8:	2302      	movs	r3, #2
 80103ba:	e074      	b.n	80104a6 <HAL_UART_Transmit+0x124>
 80103bc:	68fb      	ldr	r3, [r7, #12]
 80103be:	2201      	movs	r2, #1
 80103c0:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80103c4:	68fb      	ldr	r3, [r7, #12]
 80103c6:	2200      	movs	r2, #0
 80103c8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80103cc:	68fb      	ldr	r3, [r7, #12]
 80103ce:	2221      	movs	r2, #33	; 0x21
 80103d0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 80103d4:	f7f4 fcee 	bl	8004db4 <HAL_GetTick>
 80103d8:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80103da:	68fb      	ldr	r3, [r7, #12]
 80103dc:	88fa      	ldrh	r2, [r7, #6]
 80103de:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 80103e2:	68fb      	ldr	r3, [r7, #12]
 80103e4:	88fa      	ldrh	r2, [r7, #6]
 80103e6:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80103ea:	68fb      	ldr	r3, [r7, #12]
 80103ec:	689b      	ldr	r3, [r3, #8]
 80103ee:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80103f2:	d108      	bne.n	8010406 <HAL_UART_Transmit+0x84>
 80103f4:	68fb      	ldr	r3, [r7, #12]
 80103f6:	691b      	ldr	r3, [r3, #16]
 80103f8:	2b00      	cmp	r3, #0
 80103fa:	d104      	bne.n	8010406 <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 80103fc:	2300      	movs	r3, #0
 80103fe:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8010400:	68bb      	ldr	r3, [r7, #8]
 8010402:	61bb      	str	r3, [r7, #24]
 8010404:	e003      	b.n	801040e <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 8010406:	68bb      	ldr	r3, [r7, #8]
 8010408:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 801040a:	2300      	movs	r3, #0
 801040c:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 801040e:	68fb      	ldr	r3, [r7, #12]
 8010410:	2200      	movs	r2, #0
 8010412:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    while (huart->TxXferCount > 0U)
 8010416:	e02c      	b.n	8010472 <HAL_UART_Transmit+0xf0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8010418:	683b      	ldr	r3, [r7, #0]
 801041a:	9300      	str	r3, [sp, #0]
 801041c:	697b      	ldr	r3, [r7, #20]
 801041e:	2200      	movs	r2, #0
 8010420:	2180      	movs	r1, #128	; 0x80
 8010422:	68f8      	ldr	r0, [r7, #12]
 8010424:	f000 ff70 	bl	8011308 <UART_WaitOnFlagUntilTimeout>
 8010428:	4603      	mov	r3, r0
 801042a:	2b00      	cmp	r3, #0
 801042c:	d001      	beq.n	8010432 <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 801042e:	2303      	movs	r3, #3
 8010430:	e039      	b.n	80104a6 <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 8010432:	69fb      	ldr	r3, [r7, #28]
 8010434:	2b00      	cmp	r3, #0
 8010436:	d10b      	bne.n	8010450 <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8010438:	69bb      	ldr	r3, [r7, #24]
 801043a:	881b      	ldrh	r3, [r3, #0]
 801043c:	461a      	mov	r2, r3
 801043e:	68fb      	ldr	r3, [r7, #12]
 8010440:	681b      	ldr	r3, [r3, #0]
 8010442:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8010446:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8010448:	69bb      	ldr	r3, [r7, #24]
 801044a:	3302      	adds	r3, #2
 801044c:	61bb      	str	r3, [r7, #24]
 801044e:	e007      	b.n	8010460 <HAL_UART_Transmit+0xde>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8010450:	69fb      	ldr	r3, [r7, #28]
 8010452:	781a      	ldrb	r2, [r3, #0]
 8010454:	68fb      	ldr	r3, [r7, #12]
 8010456:	681b      	ldr	r3, [r3, #0]
 8010458:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 801045a:	69fb      	ldr	r3, [r7, #28]
 801045c:	3301      	adds	r3, #1
 801045e:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8010460:	68fb      	ldr	r3, [r7, #12]
 8010462:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8010466:	b29b      	uxth	r3, r3
 8010468:	3b01      	subs	r3, #1
 801046a:	b29a      	uxth	r2, r3
 801046c:	68fb      	ldr	r3, [r7, #12]
 801046e:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 8010472:	68fb      	ldr	r3, [r7, #12]
 8010474:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8010478:	b29b      	uxth	r3, r3
 801047a:	2b00      	cmp	r3, #0
 801047c:	d1cc      	bne.n	8010418 <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 801047e:	683b      	ldr	r3, [r7, #0]
 8010480:	9300      	str	r3, [sp, #0]
 8010482:	697b      	ldr	r3, [r7, #20]
 8010484:	2200      	movs	r2, #0
 8010486:	2140      	movs	r1, #64	; 0x40
 8010488:	68f8      	ldr	r0, [r7, #12]
 801048a:	f000 ff3d 	bl	8011308 <UART_WaitOnFlagUntilTimeout>
 801048e:	4603      	mov	r3, r0
 8010490:	2b00      	cmp	r3, #0
 8010492:	d001      	beq.n	8010498 <HAL_UART_Transmit+0x116>
    {
      return HAL_TIMEOUT;
 8010494:	2303      	movs	r3, #3
 8010496:	e006      	b.n	80104a6 <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8010498:	68fb      	ldr	r3, [r7, #12]
 801049a:	2220      	movs	r2, #32
 801049c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    return HAL_OK;
 80104a0:	2300      	movs	r3, #0
 80104a2:	e000      	b.n	80104a6 <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 80104a4:	2302      	movs	r3, #2
  }
}
 80104a6:	4618      	mov	r0, r3
 80104a8:	3720      	adds	r7, #32
 80104aa:	46bd      	mov	sp, r7
 80104ac:	bd80      	pop	{r7, pc}
	...

080104b0 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80104b0:	b580      	push	{r7, lr}
 80104b2:	b084      	sub	sp, #16
 80104b4:	af00      	add	r7, sp, #0
 80104b6:	60f8      	str	r0, [r7, #12]
 80104b8:	60b9      	str	r1, [r7, #8]
 80104ba:	4613      	mov	r3, r2
 80104bc:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80104be:	68fb      	ldr	r3, [r7, #12]
 80104c0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80104c4:	2b20      	cmp	r3, #32
 80104c6:	d170      	bne.n	80105aa <HAL_UART_Receive_DMA+0xfa>
  {
    if ((pData == NULL) || (Size == 0U))
 80104c8:	68bb      	ldr	r3, [r7, #8]
 80104ca:	2b00      	cmp	r3, #0
 80104cc:	d002      	beq.n	80104d4 <HAL_UART_Receive_DMA+0x24>
 80104ce:	88fb      	ldrh	r3, [r7, #6]
 80104d0:	2b00      	cmp	r3, #0
 80104d2:	d101      	bne.n	80104d8 <HAL_UART_Receive_DMA+0x28>
    {
      return HAL_ERROR;
 80104d4:	2301      	movs	r3, #1
 80104d6:	e069      	b.n	80105ac <HAL_UART_Receive_DMA+0xfc>
    }

    __HAL_LOCK(huart);
 80104d8:	68fb      	ldr	r3, [r7, #12]
 80104da:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 80104de:	2b01      	cmp	r3, #1
 80104e0:	d101      	bne.n	80104e6 <HAL_UART_Receive_DMA+0x36>
 80104e2:	2302      	movs	r3, #2
 80104e4:	e062      	b.n	80105ac <HAL_UART_Receive_DMA+0xfc>
 80104e6:	68fb      	ldr	r3, [r7, #12]
 80104e8:	2201      	movs	r2, #1
 80104ea:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    huart->pRxBuffPtr = pData;
 80104ee:	68fb      	ldr	r3, [r7, #12]
 80104f0:	68ba      	ldr	r2, [r7, #8]
 80104f2:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferSize = Size;
 80104f4:	68fb      	ldr	r3, [r7, #12]
 80104f6:	88fa      	ldrh	r2, [r7, #6]
 80104f8:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80104fc:	68fb      	ldr	r3, [r7, #12]
 80104fe:	2200      	movs	r2, #0
 8010500:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8010504:	68fb      	ldr	r3, [r7, #12]
 8010506:	2222      	movs	r2, #34	; 0x22
 8010508:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    if (huart->hdmarx != NULL)
 801050c:	68fb      	ldr	r3, [r7, #12]
 801050e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8010510:	2b00      	cmp	r3, #0
 8010512:	d02c      	beq.n	801056e <HAL_UART_Receive_DMA+0xbe>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8010514:	68fb      	ldr	r3, [r7, #12]
 8010516:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8010518:	4a26      	ldr	r2, [pc, #152]	; (80105b4 <HAL_UART_Receive_DMA+0x104>)
 801051a:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 801051c:	68fb      	ldr	r3, [r7, #12]
 801051e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8010520:	4a25      	ldr	r2, [pc, #148]	; (80105b8 <HAL_UART_Receive_DMA+0x108>)
 8010522:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      huart->hdmarx->XferErrorCallback = UART_DMAError;
 8010524:	68fb      	ldr	r3, [r7, #12]
 8010526:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8010528:	4a24      	ldr	r2, [pc, #144]	; (80105bc <HAL_UART_Receive_DMA+0x10c>)
 801052a:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Set the DMA abort callback */
      huart->hdmarx->XferAbortCallback = NULL;
 801052c:	68fb      	ldr	r3, [r7, #12]
 801052e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8010530:	2200      	movs	r2, #0
 8010532:	651a      	str	r2, [r3, #80]	; 0x50

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 8010534:	68fb      	ldr	r3, [r7, #12]
 8010536:	6f98      	ldr	r0, [r3, #120]	; 0x78
 8010538:	68fb      	ldr	r3, [r7, #12]
 801053a:	681b      	ldr	r3, [r3, #0]
 801053c:	3324      	adds	r3, #36	; 0x24
 801053e:	4619      	mov	r1, r3
 8010540:	68fb      	ldr	r3, [r7, #12]
 8010542:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8010544:	461a      	mov	r2, r3
 8010546:	88fb      	ldrh	r3, [r7, #6]
 8010548:	f7f5 f8da 	bl	8005700 <HAL_DMA_Start_IT>
 801054c:	4603      	mov	r3, r0
 801054e:	2b00      	cmp	r3, #0
 8010550:	d00d      	beq.n	801056e <HAL_UART_Receive_DMA+0xbe>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 8010552:	68fb      	ldr	r3, [r7, #12]
 8010554:	2210      	movs	r2, #16
 8010556:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 801055a:	68fb      	ldr	r3, [r7, #12]
 801055c:	2200      	movs	r2, #0
 801055e:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 8010562:	68fb      	ldr	r3, [r7, #12]
 8010564:	2220      	movs	r2, #32
 8010566:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        return HAL_ERROR;
 801056a:	2301      	movs	r3, #1
 801056c:	e01e      	b.n	80105ac <HAL_UART_Receive_DMA+0xfc>
      }
    }
    __HAL_UNLOCK(huart);
 801056e:	68fb      	ldr	r3, [r7, #12]
 8010570:	2200      	movs	r2, #0
 8010572:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    /* Enable the UART Parity Error Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8010576:	68fb      	ldr	r3, [r7, #12]
 8010578:	681b      	ldr	r3, [r3, #0]
 801057a:	681a      	ldr	r2, [r3, #0]
 801057c:	68fb      	ldr	r3, [r7, #12]
 801057e:	681b      	ldr	r3, [r3, #0]
 8010580:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8010584:	601a      	str	r2, [r3, #0]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8010586:	68fb      	ldr	r3, [r7, #12]
 8010588:	681b      	ldr	r3, [r3, #0]
 801058a:	689a      	ldr	r2, [r3, #8]
 801058c:	68fb      	ldr	r3, [r7, #12]
 801058e:	681b      	ldr	r3, [r3, #0]
 8010590:	f042 0201 	orr.w	r2, r2, #1
 8010594:	609a      	str	r2, [r3, #8]

    /* Enable the DMA transfer for the receiver request by setting the DMAR bit
    in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8010596:	68fb      	ldr	r3, [r7, #12]
 8010598:	681b      	ldr	r3, [r3, #0]
 801059a:	689a      	ldr	r2, [r3, #8]
 801059c:	68fb      	ldr	r3, [r7, #12]
 801059e:	681b      	ldr	r3, [r3, #0]
 80105a0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80105a4:	609a      	str	r2, [r3, #8]

    return HAL_OK;
 80105a6:	2300      	movs	r3, #0
 80105a8:	e000      	b.n	80105ac <HAL_UART_Receive_DMA+0xfc>
  }
  else
  {
    return HAL_BUSY;
 80105aa:	2302      	movs	r3, #2
  }
}
 80105ac:	4618      	mov	r0, r3
 80105ae:	3710      	adds	r7, #16
 80105b0:	46bd      	mov	sp, r7
 80105b2:	bd80      	pop	{r7, pc}
 80105b4:	0801148d 	.word	0x0801148d
 80105b8:	080114f3 	.word	0x080114f3
 80105bc:	0801150f 	.word	0x0801150f

080105c0 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80105c0:	b480      	push	{r7}
 80105c2:	b083      	sub	sp, #12
 80105c4:	af00      	add	r7, sp, #0
 80105c6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80105c8:	bf00      	nop
 80105ca:	370c      	adds	r7, #12
 80105cc:	46bd      	mov	sp, r7
 80105ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80105d2:	4770      	bx	lr

080105d4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80105d4:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 80105d8:	b08e      	sub	sp, #56	; 0x38
 80105da:	af00      	add	r7, sp, #0
 80105dc:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80105de:	2300      	movs	r3, #0
 80105e0:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80105e4:	687b      	ldr	r3, [r7, #4]
 80105e6:	689a      	ldr	r2, [r3, #8]
 80105e8:	687b      	ldr	r3, [r7, #4]
 80105ea:	691b      	ldr	r3, [r3, #16]
 80105ec:	431a      	orrs	r2, r3
 80105ee:	687b      	ldr	r3, [r7, #4]
 80105f0:	695b      	ldr	r3, [r3, #20]
 80105f2:	431a      	orrs	r2, r3
 80105f4:	687b      	ldr	r3, [r7, #4]
 80105f6:	69db      	ldr	r3, [r3, #28]
 80105f8:	4313      	orrs	r3, r2
 80105fa:	637b      	str	r3, [r7, #52]	; 0x34
  tmpreg |= (uint32_t)huart->FifoMode;
 80105fc:	687b      	ldr	r3, [r7, #4]
 80105fe:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8010600:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8010602:	4313      	orrs	r3, r2
 8010604:	637b      	str	r3, [r7, #52]	; 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8010606:	687b      	ldr	r3, [r7, #4]
 8010608:	681b      	ldr	r3, [r3, #0]
 801060a:	681a      	ldr	r2, [r3, #0]
 801060c:	4bc1      	ldr	r3, [pc, #772]	; (8010914 <UART_SetConfig+0x340>)
 801060e:	4013      	ands	r3, r2
 8010610:	687a      	ldr	r2, [r7, #4]
 8010612:	6812      	ldr	r2, [r2, #0]
 8010614:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8010616:	430b      	orrs	r3, r1
 8010618:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 801061a:	687b      	ldr	r3, [r7, #4]
 801061c:	681b      	ldr	r3, [r3, #0]
 801061e:	685b      	ldr	r3, [r3, #4]
 8010620:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8010624:	687b      	ldr	r3, [r7, #4]
 8010626:	68da      	ldr	r2, [r3, #12]
 8010628:	687b      	ldr	r3, [r7, #4]
 801062a:	681b      	ldr	r3, [r3, #0]
 801062c:	430a      	orrs	r2, r1
 801062e:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8010630:	687b      	ldr	r3, [r7, #4]
 8010632:	699b      	ldr	r3, [r3, #24]
 8010634:	637b      	str	r3, [r7, #52]	; 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8010636:	687b      	ldr	r3, [r7, #4]
 8010638:	681b      	ldr	r3, [r3, #0]
 801063a:	4ab7      	ldr	r2, [pc, #732]	; (8010918 <UART_SetConfig+0x344>)
 801063c:	4293      	cmp	r3, r2
 801063e:	d004      	beq.n	801064a <UART_SetConfig+0x76>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8010640:	687b      	ldr	r3, [r7, #4]
 8010642:	6a1b      	ldr	r3, [r3, #32]
 8010644:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8010646:	4313      	orrs	r3, r2
 8010648:	637b      	str	r3, [r7, #52]	; 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 801064a:	687b      	ldr	r3, [r7, #4]
 801064c:	681b      	ldr	r3, [r3, #0]
 801064e:	689a      	ldr	r2, [r3, #8]
 8010650:	4bb2      	ldr	r3, [pc, #712]	; (801091c <UART_SetConfig+0x348>)
 8010652:	4013      	ands	r3, r2
 8010654:	687a      	ldr	r2, [r7, #4]
 8010656:	6812      	ldr	r2, [r2, #0]
 8010658:	6b79      	ldr	r1, [r7, #52]	; 0x34
 801065a:	430b      	orrs	r3, r1
 801065c:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 801065e:	687b      	ldr	r3, [r7, #4]
 8010660:	681b      	ldr	r3, [r3, #0]
 8010662:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010664:	f023 010f 	bic.w	r1, r3, #15
 8010668:	687b      	ldr	r3, [r7, #4]
 801066a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 801066c:	687b      	ldr	r3, [r7, #4]
 801066e:	681b      	ldr	r3, [r3, #0]
 8010670:	430a      	orrs	r2, r1
 8010672:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8010674:	687b      	ldr	r3, [r7, #4]
 8010676:	681b      	ldr	r3, [r3, #0]
 8010678:	4aa9      	ldr	r2, [pc, #676]	; (8010920 <UART_SetConfig+0x34c>)
 801067a:	4293      	cmp	r3, r2
 801067c:	d177      	bne.n	801076e <UART_SetConfig+0x19a>
 801067e:	4ba9      	ldr	r3, [pc, #676]	; (8010924 <UART_SetConfig+0x350>)
 8010680:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8010682:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8010686:	2b28      	cmp	r3, #40	; 0x28
 8010688:	d86c      	bhi.n	8010764 <UART_SetConfig+0x190>
 801068a:	a201      	add	r2, pc, #4	; (adr r2, 8010690 <UART_SetConfig+0xbc>)
 801068c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010690:	08010735 	.word	0x08010735
 8010694:	08010765 	.word	0x08010765
 8010698:	08010765 	.word	0x08010765
 801069c:	08010765 	.word	0x08010765
 80106a0:	08010765 	.word	0x08010765
 80106a4:	08010765 	.word	0x08010765
 80106a8:	08010765 	.word	0x08010765
 80106ac:	08010765 	.word	0x08010765
 80106b0:	0801073d 	.word	0x0801073d
 80106b4:	08010765 	.word	0x08010765
 80106b8:	08010765 	.word	0x08010765
 80106bc:	08010765 	.word	0x08010765
 80106c0:	08010765 	.word	0x08010765
 80106c4:	08010765 	.word	0x08010765
 80106c8:	08010765 	.word	0x08010765
 80106cc:	08010765 	.word	0x08010765
 80106d0:	08010745 	.word	0x08010745
 80106d4:	08010765 	.word	0x08010765
 80106d8:	08010765 	.word	0x08010765
 80106dc:	08010765 	.word	0x08010765
 80106e0:	08010765 	.word	0x08010765
 80106e4:	08010765 	.word	0x08010765
 80106e8:	08010765 	.word	0x08010765
 80106ec:	08010765 	.word	0x08010765
 80106f0:	0801074d 	.word	0x0801074d
 80106f4:	08010765 	.word	0x08010765
 80106f8:	08010765 	.word	0x08010765
 80106fc:	08010765 	.word	0x08010765
 8010700:	08010765 	.word	0x08010765
 8010704:	08010765 	.word	0x08010765
 8010708:	08010765 	.word	0x08010765
 801070c:	08010765 	.word	0x08010765
 8010710:	08010755 	.word	0x08010755
 8010714:	08010765 	.word	0x08010765
 8010718:	08010765 	.word	0x08010765
 801071c:	08010765 	.word	0x08010765
 8010720:	08010765 	.word	0x08010765
 8010724:	08010765 	.word	0x08010765
 8010728:	08010765 	.word	0x08010765
 801072c:	08010765 	.word	0x08010765
 8010730:	0801075d 	.word	0x0801075d
 8010734:	2301      	movs	r3, #1
 8010736:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 801073a:	e233      	b.n	8010ba4 <UART_SetConfig+0x5d0>
 801073c:	2304      	movs	r3, #4
 801073e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8010742:	e22f      	b.n	8010ba4 <UART_SetConfig+0x5d0>
 8010744:	2308      	movs	r3, #8
 8010746:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 801074a:	e22b      	b.n	8010ba4 <UART_SetConfig+0x5d0>
 801074c:	2310      	movs	r3, #16
 801074e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8010752:	e227      	b.n	8010ba4 <UART_SetConfig+0x5d0>
 8010754:	2320      	movs	r3, #32
 8010756:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 801075a:	e223      	b.n	8010ba4 <UART_SetConfig+0x5d0>
 801075c:	2340      	movs	r3, #64	; 0x40
 801075e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8010762:	e21f      	b.n	8010ba4 <UART_SetConfig+0x5d0>
 8010764:	2380      	movs	r3, #128	; 0x80
 8010766:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 801076a:	bf00      	nop
 801076c:	e21a      	b.n	8010ba4 <UART_SetConfig+0x5d0>
 801076e:	687b      	ldr	r3, [r7, #4]
 8010770:	681b      	ldr	r3, [r3, #0]
 8010772:	4a6d      	ldr	r2, [pc, #436]	; (8010928 <UART_SetConfig+0x354>)
 8010774:	4293      	cmp	r3, r2
 8010776:	d132      	bne.n	80107de <UART_SetConfig+0x20a>
 8010778:	4b6a      	ldr	r3, [pc, #424]	; (8010924 <UART_SetConfig+0x350>)
 801077a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801077c:	f003 0307 	and.w	r3, r3, #7
 8010780:	2b05      	cmp	r3, #5
 8010782:	d827      	bhi.n	80107d4 <UART_SetConfig+0x200>
 8010784:	a201      	add	r2, pc, #4	; (adr r2, 801078c <UART_SetConfig+0x1b8>)
 8010786:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801078a:	bf00      	nop
 801078c:	080107a5 	.word	0x080107a5
 8010790:	080107ad 	.word	0x080107ad
 8010794:	080107b5 	.word	0x080107b5
 8010798:	080107bd 	.word	0x080107bd
 801079c:	080107c5 	.word	0x080107c5
 80107a0:	080107cd 	.word	0x080107cd
 80107a4:	2300      	movs	r3, #0
 80107a6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80107aa:	e1fb      	b.n	8010ba4 <UART_SetConfig+0x5d0>
 80107ac:	2304      	movs	r3, #4
 80107ae:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80107b2:	e1f7      	b.n	8010ba4 <UART_SetConfig+0x5d0>
 80107b4:	2308      	movs	r3, #8
 80107b6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80107ba:	e1f3      	b.n	8010ba4 <UART_SetConfig+0x5d0>
 80107bc:	2310      	movs	r3, #16
 80107be:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80107c2:	e1ef      	b.n	8010ba4 <UART_SetConfig+0x5d0>
 80107c4:	2320      	movs	r3, #32
 80107c6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80107ca:	e1eb      	b.n	8010ba4 <UART_SetConfig+0x5d0>
 80107cc:	2340      	movs	r3, #64	; 0x40
 80107ce:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80107d2:	e1e7      	b.n	8010ba4 <UART_SetConfig+0x5d0>
 80107d4:	2380      	movs	r3, #128	; 0x80
 80107d6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80107da:	bf00      	nop
 80107dc:	e1e2      	b.n	8010ba4 <UART_SetConfig+0x5d0>
 80107de:	687b      	ldr	r3, [r7, #4]
 80107e0:	681b      	ldr	r3, [r3, #0]
 80107e2:	4a52      	ldr	r2, [pc, #328]	; (801092c <UART_SetConfig+0x358>)
 80107e4:	4293      	cmp	r3, r2
 80107e6:	d132      	bne.n	801084e <UART_SetConfig+0x27a>
 80107e8:	4b4e      	ldr	r3, [pc, #312]	; (8010924 <UART_SetConfig+0x350>)
 80107ea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80107ec:	f003 0307 	and.w	r3, r3, #7
 80107f0:	2b05      	cmp	r3, #5
 80107f2:	d827      	bhi.n	8010844 <UART_SetConfig+0x270>
 80107f4:	a201      	add	r2, pc, #4	; (adr r2, 80107fc <UART_SetConfig+0x228>)
 80107f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80107fa:	bf00      	nop
 80107fc:	08010815 	.word	0x08010815
 8010800:	0801081d 	.word	0x0801081d
 8010804:	08010825 	.word	0x08010825
 8010808:	0801082d 	.word	0x0801082d
 801080c:	08010835 	.word	0x08010835
 8010810:	0801083d 	.word	0x0801083d
 8010814:	2300      	movs	r3, #0
 8010816:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 801081a:	e1c3      	b.n	8010ba4 <UART_SetConfig+0x5d0>
 801081c:	2304      	movs	r3, #4
 801081e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8010822:	e1bf      	b.n	8010ba4 <UART_SetConfig+0x5d0>
 8010824:	2308      	movs	r3, #8
 8010826:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 801082a:	e1bb      	b.n	8010ba4 <UART_SetConfig+0x5d0>
 801082c:	2310      	movs	r3, #16
 801082e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8010832:	e1b7      	b.n	8010ba4 <UART_SetConfig+0x5d0>
 8010834:	2320      	movs	r3, #32
 8010836:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 801083a:	e1b3      	b.n	8010ba4 <UART_SetConfig+0x5d0>
 801083c:	2340      	movs	r3, #64	; 0x40
 801083e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8010842:	e1af      	b.n	8010ba4 <UART_SetConfig+0x5d0>
 8010844:	2380      	movs	r3, #128	; 0x80
 8010846:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 801084a:	bf00      	nop
 801084c:	e1aa      	b.n	8010ba4 <UART_SetConfig+0x5d0>
 801084e:	687b      	ldr	r3, [r7, #4]
 8010850:	681b      	ldr	r3, [r3, #0]
 8010852:	4a37      	ldr	r2, [pc, #220]	; (8010930 <UART_SetConfig+0x35c>)
 8010854:	4293      	cmp	r3, r2
 8010856:	d132      	bne.n	80108be <UART_SetConfig+0x2ea>
 8010858:	4b32      	ldr	r3, [pc, #200]	; (8010924 <UART_SetConfig+0x350>)
 801085a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801085c:	f003 0307 	and.w	r3, r3, #7
 8010860:	2b05      	cmp	r3, #5
 8010862:	d827      	bhi.n	80108b4 <UART_SetConfig+0x2e0>
 8010864:	a201      	add	r2, pc, #4	; (adr r2, 801086c <UART_SetConfig+0x298>)
 8010866:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801086a:	bf00      	nop
 801086c:	08010885 	.word	0x08010885
 8010870:	0801088d 	.word	0x0801088d
 8010874:	08010895 	.word	0x08010895
 8010878:	0801089d 	.word	0x0801089d
 801087c:	080108a5 	.word	0x080108a5
 8010880:	080108ad 	.word	0x080108ad
 8010884:	2300      	movs	r3, #0
 8010886:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 801088a:	e18b      	b.n	8010ba4 <UART_SetConfig+0x5d0>
 801088c:	2304      	movs	r3, #4
 801088e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8010892:	e187      	b.n	8010ba4 <UART_SetConfig+0x5d0>
 8010894:	2308      	movs	r3, #8
 8010896:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 801089a:	e183      	b.n	8010ba4 <UART_SetConfig+0x5d0>
 801089c:	2310      	movs	r3, #16
 801089e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80108a2:	e17f      	b.n	8010ba4 <UART_SetConfig+0x5d0>
 80108a4:	2320      	movs	r3, #32
 80108a6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80108aa:	e17b      	b.n	8010ba4 <UART_SetConfig+0x5d0>
 80108ac:	2340      	movs	r3, #64	; 0x40
 80108ae:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80108b2:	e177      	b.n	8010ba4 <UART_SetConfig+0x5d0>
 80108b4:	2380      	movs	r3, #128	; 0x80
 80108b6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80108ba:	bf00      	nop
 80108bc:	e172      	b.n	8010ba4 <UART_SetConfig+0x5d0>
 80108be:	687b      	ldr	r3, [r7, #4]
 80108c0:	681b      	ldr	r3, [r3, #0]
 80108c2:	4a1c      	ldr	r2, [pc, #112]	; (8010934 <UART_SetConfig+0x360>)
 80108c4:	4293      	cmp	r3, r2
 80108c6:	d144      	bne.n	8010952 <UART_SetConfig+0x37e>
 80108c8:	4b16      	ldr	r3, [pc, #88]	; (8010924 <UART_SetConfig+0x350>)
 80108ca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80108cc:	f003 0307 	and.w	r3, r3, #7
 80108d0:	2b05      	cmp	r3, #5
 80108d2:	d839      	bhi.n	8010948 <UART_SetConfig+0x374>
 80108d4:	a201      	add	r2, pc, #4	; (adr r2, 80108dc <UART_SetConfig+0x308>)
 80108d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80108da:	bf00      	nop
 80108dc:	080108f5 	.word	0x080108f5
 80108e0:	080108fd 	.word	0x080108fd
 80108e4:	08010905 	.word	0x08010905
 80108e8:	0801090d 	.word	0x0801090d
 80108ec:	08010939 	.word	0x08010939
 80108f0:	08010941 	.word	0x08010941
 80108f4:	2300      	movs	r3, #0
 80108f6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80108fa:	e153      	b.n	8010ba4 <UART_SetConfig+0x5d0>
 80108fc:	2304      	movs	r3, #4
 80108fe:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8010902:	e14f      	b.n	8010ba4 <UART_SetConfig+0x5d0>
 8010904:	2308      	movs	r3, #8
 8010906:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 801090a:	e14b      	b.n	8010ba4 <UART_SetConfig+0x5d0>
 801090c:	2310      	movs	r3, #16
 801090e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8010912:	e147      	b.n	8010ba4 <UART_SetConfig+0x5d0>
 8010914:	cfff69f3 	.word	0xcfff69f3
 8010918:	58000c00 	.word	0x58000c00
 801091c:	11fff4ff 	.word	0x11fff4ff
 8010920:	40011000 	.word	0x40011000
 8010924:	58024400 	.word	0x58024400
 8010928:	40004400 	.word	0x40004400
 801092c:	40004800 	.word	0x40004800
 8010930:	40004c00 	.word	0x40004c00
 8010934:	40005000 	.word	0x40005000
 8010938:	2320      	movs	r3, #32
 801093a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 801093e:	e131      	b.n	8010ba4 <UART_SetConfig+0x5d0>
 8010940:	2340      	movs	r3, #64	; 0x40
 8010942:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8010946:	e12d      	b.n	8010ba4 <UART_SetConfig+0x5d0>
 8010948:	2380      	movs	r3, #128	; 0x80
 801094a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 801094e:	bf00      	nop
 8010950:	e128      	b.n	8010ba4 <UART_SetConfig+0x5d0>
 8010952:	687b      	ldr	r3, [r7, #4]
 8010954:	681b      	ldr	r3, [r3, #0]
 8010956:	4ab6      	ldr	r2, [pc, #728]	; (8010c30 <UART_SetConfig+0x65c>)
 8010958:	4293      	cmp	r3, r2
 801095a:	d178      	bne.n	8010a4e <UART_SetConfig+0x47a>
 801095c:	4bb5      	ldr	r3, [pc, #724]	; (8010c34 <UART_SetConfig+0x660>)
 801095e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8010960:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8010964:	2b28      	cmp	r3, #40	; 0x28
 8010966:	d86d      	bhi.n	8010a44 <UART_SetConfig+0x470>
 8010968:	a201      	add	r2, pc, #4	; (adr r2, 8010970 <UART_SetConfig+0x39c>)
 801096a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801096e:	bf00      	nop
 8010970:	08010a15 	.word	0x08010a15
 8010974:	08010a45 	.word	0x08010a45
 8010978:	08010a45 	.word	0x08010a45
 801097c:	08010a45 	.word	0x08010a45
 8010980:	08010a45 	.word	0x08010a45
 8010984:	08010a45 	.word	0x08010a45
 8010988:	08010a45 	.word	0x08010a45
 801098c:	08010a45 	.word	0x08010a45
 8010990:	08010a1d 	.word	0x08010a1d
 8010994:	08010a45 	.word	0x08010a45
 8010998:	08010a45 	.word	0x08010a45
 801099c:	08010a45 	.word	0x08010a45
 80109a0:	08010a45 	.word	0x08010a45
 80109a4:	08010a45 	.word	0x08010a45
 80109a8:	08010a45 	.word	0x08010a45
 80109ac:	08010a45 	.word	0x08010a45
 80109b0:	08010a25 	.word	0x08010a25
 80109b4:	08010a45 	.word	0x08010a45
 80109b8:	08010a45 	.word	0x08010a45
 80109bc:	08010a45 	.word	0x08010a45
 80109c0:	08010a45 	.word	0x08010a45
 80109c4:	08010a45 	.word	0x08010a45
 80109c8:	08010a45 	.word	0x08010a45
 80109cc:	08010a45 	.word	0x08010a45
 80109d0:	08010a2d 	.word	0x08010a2d
 80109d4:	08010a45 	.word	0x08010a45
 80109d8:	08010a45 	.word	0x08010a45
 80109dc:	08010a45 	.word	0x08010a45
 80109e0:	08010a45 	.word	0x08010a45
 80109e4:	08010a45 	.word	0x08010a45
 80109e8:	08010a45 	.word	0x08010a45
 80109ec:	08010a45 	.word	0x08010a45
 80109f0:	08010a35 	.word	0x08010a35
 80109f4:	08010a45 	.word	0x08010a45
 80109f8:	08010a45 	.word	0x08010a45
 80109fc:	08010a45 	.word	0x08010a45
 8010a00:	08010a45 	.word	0x08010a45
 8010a04:	08010a45 	.word	0x08010a45
 8010a08:	08010a45 	.word	0x08010a45
 8010a0c:	08010a45 	.word	0x08010a45
 8010a10:	08010a3d 	.word	0x08010a3d
 8010a14:	2301      	movs	r3, #1
 8010a16:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8010a1a:	e0c3      	b.n	8010ba4 <UART_SetConfig+0x5d0>
 8010a1c:	2304      	movs	r3, #4
 8010a1e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8010a22:	e0bf      	b.n	8010ba4 <UART_SetConfig+0x5d0>
 8010a24:	2308      	movs	r3, #8
 8010a26:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8010a2a:	e0bb      	b.n	8010ba4 <UART_SetConfig+0x5d0>
 8010a2c:	2310      	movs	r3, #16
 8010a2e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8010a32:	e0b7      	b.n	8010ba4 <UART_SetConfig+0x5d0>
 8010a34:	2320      	movs	r3, #32
 8010a36:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8010a3a:	e0b3      	b.n	8010ba4 <UART_SetConfig+0x5d0>
 8010a3c:	2340      	movs	r3, #64	; 0x40
 8010a3e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8010a42:	e0af      	b.n	8010ba4 <UART_SetConfig+0x5d0>
 8010a44:	2380      	movs	r3, #128	; 0x80
 8010a46:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8010a4a:	bf00      	nop
 8010a4c:	e0aa      	b.n	8010ba4 <UART_SetConfig+0x5d0>
 8010a4e:	687b      	ldr	r3, [r7, #4]
 8010a50:	681b      	ldr	r3, [r3, #0]
 8010a52:	4a79      	ldr	r2, [pc, #484]	; (8010c38 <UART_SetConfig+0x664>)
 8010a54:	4293      	cmp	r3, r2
 8010a56:	d132      	bne.n	8010abe <UART_SetConfig+0x4ea>
 8010a58:	4b76      	ldr	r3, [pc, #472]	; (8010c34 <UART_SetConfig+0x660>)
 8010a5a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8010a5c:	f003 0307 	and.w	r3, r3, #7
 8010a60:	2b05      	cmp	r3, #5
 8010a62:	d827      	bhi.n	8010ab4 <UART_SetConfig+0x4e0>
 8010a64:	a201      	add	r2, pc, #4	; (adr r2, 8010a6c <UART_SetConfig+0x498>)
 8010a66:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010a6a:	bf00      	nop
 8010a6c:	08010a85 	.word	0x08010a85
 8010a70:	08010a8d 	.word	0x08010a8d
 8010a74:	08010a95 	.word	0x08010a95
 8010a78:	08010a9d 	.word	0x08010a9d
 8010a7c:	08010aa5 	.word	0x08010aa5
 8010a80:	08010aad 	.word	0x08010aad
 8010a84:	2300      	movs	r3, #0
 8010a86:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8010a8a:	e08b      	b.n	8010ba4 <UART_SetConfig+0x5d0>
 8010a8c:	2304      	movs	r3, #4
 8010a8e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8010a92:	e087      	b.n	8010ba4 <UART_SetConfig+0x5d0>
 8010a94:	2308      	movs	r3, #8
 8010a96:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8010a9a:	e083      	b.n	8010ba4 <UART_SetConfig+0x5d0>
 8010a9c:	2310      	movs	r3, #16
 8010a9e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8010aa2:	e07f      	b.n	8010ba4 <UART_SetConfig+0x5d0>
 8010aa4:	2320      	movs	r3, #32
 8010aa6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8010aaa:	e07b      	b.n	8010ba4 <UART_SetConfig+0x5d0>
 8010aac:	2340      	movs	r3, #64	; 0x40
 8010aae:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8010ab2:	e077      	b.n	8010ba4 <UART_SetConfig+0x5d0>
 8010ab4:	2380      	movs	r3, #128	; 0x80
 8010ab6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8010aba:	bf00      	nop
 8010abc:	e072      	b.n	8010ba4 <UART_SetConfig+0x5d0>
 8010abe:	687b      	ldr	r3, [r7, #4]
 8010ac0:	681b      	ldr	r3, [r3, #0]
 8010ac2:	4a5e      	ldr	r2, [pc, #376]	; (8010c3c <UART_SetConfig+0x668>)
 8010ac4:	4293      	cmp	r3, r2
 8010ac6:	d132      	bne.n	8010b2e <UART_SetConfig+0x55a>
 8010ac8:	4b5a      	ldr	r3, [pc, #360]	; (8010c34 <UART_SetConfig+0x660>)
 8010aca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8010acc:	f003 0307 	and.w	r3, r3, #7
 8010ad0:	2b05      	cmp	r3, #5
 8010ad2:	d827      	bhi.n	8010b24 <UART_SetConfig+0x550>
 8010ad4:	a201      	add	r2, pc, #4	; (adr r2, 8010adc <UART_SetConfig+0x508>)
 8010ad6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010ada:	bf00      	nop
 8010adc:	08010af5 	.word	0x08010af5
 8010ae0:	08010afd 	.word	0x08010afd
 8010ae4:	08010b05 	.word	0x08010b05
 8010ae8:	08010b0d 	.word	0x08010b0d
 8010aec:	08010b15 	.word	0x08010b15
 8010af0:	08010b1d 	.word	0x08010b1d
 8010af4:	2300      	movs	r3, #0
 8010af6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8010afa:	e053      	b.n	8010ba4 <UART_SetConfig+0x5d0>
 8010afc:	2304      	movs	r3, #4
 8010afe:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8010b02:	e04f      	b.n	8010ba4 <UART_SetConfig+0x5d0>
 8010b04:	2308      	movs	r3, #8
 8010b06:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8010b0a:	e04b      	b.n	8010ba4 <UART_SetConfig+0x5d0>
 8010b0c:	2310      	movs	r3, #16
 8010b0e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8010b12:	e047      	b.n	8010ba4 <UART_SetConfig+0x5d0>
 8010b14:	2320      	movs	r3, #32
 8010b16:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8010b1a:	e043      	b.n	8010ba4 <UART_SetConfig+0x5d0>
 8010b1c:	2340      	movs	r3, #64	; 0x40
 8010b1e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8010b22:	e03f      	b.n	8010ba4 <UART_SetConfig+0x5d0>
 8010b24:	2380      	movs	r3, #128	; 0x80
 8010b26:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8010b2a:	bf00      	nop
 8010b2c:	e03a      	b.n	8010ba4 <UART_SetConfig+0x5d0>
 8010b2e:	687b      	ldr	r3, [r7, #4]
 8010b30:	681b      	ldr	r3, [r3, #0]
 8010b32:	4a43      	ldr	r2, [pc, #268]	; (8010c40 <UART_SetConfig+0x66c>)
 8010b34:	4293      	cmp	r3, r2
 8010b36:	d132      	bne.n	8010b9e <UART_SetConfig+0x5ca>
 8010b38:	4b3e      	ldr	r3, [pc, #248]	; (8010c34 <UART_SetConfig+0x660>)
 8010b3a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8010b3c:	f003 0307 	and.w	r3, r3, #7
 8010b40:	2b05      	cmp	r3, #5
 8010b42:	d827      	bhi.n	8010b94 <UART_SetConfig+0x5c0>
 8010b44:	a201      	add	r2, pc, #4	; (adr r2, 8010b4c <UART_SetConfig+0x578>)
 8010b46:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010b4a:	bf00      	nop
 8010b4c:	08010b65 	.word	0x08010b65
 8010b50:	08010b6d 	.word	0x08010b6d
 8010b54:	08010b75 	.word	0x08010b75
 8010b58:	08010b7d 	.word	0x08010b7d
 8010b5c:	08010b85 	.word	0x08010b85
 8010b60:	08010b8d 	.word	0x08010b8d
 8010b64:	2302      	movs	r3, #2
 8010b66:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8010b6a:	e01b      	b.n	8010ba4 <UART_SetConfig+0x5d0>
 8010b6c:	2304      	movs	r3, #4
 8010b6e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8010b72:	e017      	b.n	8010ba4 <UART_SetConfig+0x5d0>
 8010b74:	2308      	movs	r3, #8
 8010b76:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8010b7a:	e013      	b.n	8010ba4 <UART_SetConfig+0x5d0>
 8010b7c:	2310      	movs	r3, #16
 8010b7e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8010b82:	e00f      	b.n	8010ba4 <UART_SetConfig+0x5d0>
 8010b84:	2320      	movs	r3, #32
 8010b86:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8010b8a:	e00b      	b.n	8010ba4 <UART_SetConfig+0x5d0>
 8010b8c:	2340      	movs	r3, #64	; 0x40
 8010b8e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8010b92:	e007      	b.n	8010ba4 <UART_SetConfig+0x5d0>
 8010b94:	2380      	movs	r3, #128	; 0x80
 8010b96:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8010b9a:	bf00      	nop
 8010b9c:	e002      	b.n	8010ba4 <UART_SetConfig+0x5d0>
 8010b9e:	2380      	movs	r3, #128	; 0x80
 8010ba0:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8010ba4:	687b      	ldr	r3, [r7, #4]
 8010ba6:	681b      	ldr	r3, [r3, #0]
 8010ba8:	4a25      	ldr	r2, [pc, #148]	; (8010c40 <UART_SetConfig+0x66c>)
 8010baa:	4293      	cmp	r3, r2
 8010bac:	f040 80b8 	bne.w	8010d20 <UART_SetConfig+0x74c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8010bb0:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8010bb4:	2b08      	cmp	r3, #8
 8010bb6:	d019      	beq.n	8010bec <UART_SetConfig+0x618>
 8010bb8:	2b08      	cmp	r3, #8
 8010bba:	dc04      	bgt.n	8010bc6 <UART_SetConfig+0x5f2>
 8010bbc:	2b02      	cmp	r3, #2
 8010bbe:	d009      	beq.n	8010bd4 <UART_SetConfig+0x600>
 8010bc0:	2b04      	cmp	r3, #4
 8010bc2:	d00b      	beq.n	8010bdc <UART_SetConfig+0x608>
 8010bc4:	e042      	b.n	8010c4c <UART_SetConfig+0x678>
 8010bc6:	2b20      	cmp	r3, #32
 8010bc8:	d02b      	beq.n	8010c22 <UART_SetConfig+0x64e>
 8010bca:	2b40      	cmp	r3, #64	; 0x40
 8010bcc:	d02c      	beq.n	8010c28 <UART_SetConfig+0x654>
 8010bce:	2b10      	cmp	r3, #16
 8010bd0:	d014      	beq.n	8010bfc <UART_SetConfig+0x628>
 8010bd2:	e03b      	b.n	8010c4c <UART_SetConfig+0x678>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8010bd4:	f7fb fadc 	bl	800c190 <HAL_RCCEx_GetD3PCLK1Freq>
 8010bd8:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8010bda:	e03d      	b.n	8010c58 <UART_SetConfig+0x684>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8010bdc:	f107 0314 	add.w	r3, r7, #20
 8010be0:	4618      	mov	r0, r3
 8010be2:	f7fb faeb 	bl	800c1bc <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8010be6:	69bb      	ldr	r3, [r7, #24]
 8010be8:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8010bea:	e035      	b.n	8010c58 <UART_SetConfig+0x684>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8010bec:	f107 0308 	add.w	r3, r7, #8
 8010bf0:	4618      	mov	r0, r3
 8010bf2:	f7fb fc2f 	bl	800c454 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8010bf6:	68fb      	ldr	r3, [r7, #12]
 8010bf8:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8010bfa:	e02d      	b.n	8010c58 <UART_SetConfig+0x684>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8010bfc:	4b0d      	ldr	r3, [pc, #52]	; (8010c34 <UART_SetConfig+0x660>)
 8010bfe:	681b      	ldr	r3, [r3, #0]
 8010c00:	f003 0320 	and.w	r3, r3, #32
 8010c04:	2b00      	cmp	r3, #0
 8010c06:	d009      	beq.n	8010c1c <UART_SetConfig+0x648>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8010c08:	4b0a      	ldr	r3, [pc, #40]	; (8010c34 <UART_SetConfig+0x660>)
 8010c0a:	681b      	ldr	r3, [r3, #0]
 8010c0c:	08db      	lsrs	r3, r3, #3
 8010c0e:	f003 0303 	and.w	r3, r3, #3
 8010c12:	4a0c      	ldr	r2, [pc, #48]	; (8010c44 <UART_SetConfig+0x670>)
 8010c14:	fa22 f303 	lsr.w	r3, r2, r3
 8010c18:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8010c1a:	e01d      	b.n	8010c58 <UART_SetConfig+0x684>
          pclk = (uint32_t) HSI_VALUE;
 8010c1c:	4b09      	ldr	r3, [pc, #36]	; (8010c44 <UART_SetConfig+0x670>)
 8010c1e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8010c20:	e01a      	b.n	8010c58 <UART_SetConfig+0x684>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8010c22:	4b09      	ldr	r3, [pc, #36]	; (8010c48 <UART_SetConfig+0x674>)
 8010c24:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8010c26:	e017      	b.n	8010c58 <UART_SetConfig+0x684>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8010c28:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8010c2c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8010c2e:	e013      	b.n	8010c58 <UART_SetConfig+0x684>
 8010c30:	40011400 	.word	0x40011400
 8010c34:	58024400 	.word	0x58024400
 8010c38:	40007800 	.word	0x40007800
 8010c3c:	40007c00 	.word	0x40007c00
 8010c40:	58000c00 	.word	0x58000c00
 8010c44:	03d09000 	.word	0x03d09000
 8010c48:	003d0900 	.word	0x003d0900
      default:
        pclk = 0U;
 8010c4c:	2300      	movs	r3, #0
 8010c4e:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8010c50:	2301      	movs	r3, #1
 8010c52:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 8010c56:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8010c58:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010c5a:	2b00      	cmp	r3, #0
 8010c5c:	f000 824d 	beq.w	80110fa <UART_SetConfig+0xb26>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8010c60:	687b      	ldr	r3, [r7, #4]
 8010c62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010c64:	4aad      	ldr	r2, [pc, #692]	; (8010f1c <UART_SetConfig+0x948>)
 8010c66:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8010c6a:	461a      	mov	r2, r3
 8010c6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010c6e:	fbb3 f3f2 	udiv	r3, r3, r2
 8010c72:	623b      	str	r3, [r7, #32]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8010c74:	687b      	ldr	r3, [r7, #4]
 8010c76:	685a      	ldr	r2, [r3, #4]
 8010c78:	4613      	mov	r3, r2
 8010c7a:	005b      	lsls	r3, r3, #1
 8010c7c:	4413      	add	r3, r2
 8010c7e:	6a3a      	ldr	r2, [r7, #32]
 8010c80:	429a      	cmp	r2, r3
 8010c82:	d305      	bcc.n	8010c90 <UART_SetConfig+0x6bc>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8010c84:	687b      	ldr	r3, [r7, #4]
 8010c86:	685b      	ldr	r3, [r3, #4]
 8010c88:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8010c8a:	6a3a      	ldr	r2, [r7, #32]
 8010c8c:	429a      	cmp	r2, r3
 8010c8e:	d903      	bls.n	8010c98 <UART_SetConfig+0x6c4>
      {
        ret = HAL_ERROR;
 8010c90:	2301      	movs	r3, #1
 8010c92:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 8010c96:	e230      	b.n	80110fa <UART_SetConfig+0xb26>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, (uint64_t)huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8010c98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010c9a:	4618      	mov	r0, r3
 8010c9c:	f04f 0100 	mov.w	r1, #0
 8010ca0:	687b      	ldr	r3, [r7, #4]
 8010ca2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010ca4:	4a9d      	ldr	r2, [pc, #628]	; (8010f1c <UART_SetConfig+0x948>)
 8010ca6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8010caa:	b29b      	uxth	r3, r3
 8010cac:	f04f 0400 	mov.w	r4, #0
 8010cb0:	461a      	mov	r2, r3
 8010cb2:	4623      	mov	r3, r4
 8010cb4:	f7ef fb6c 	bl	8000390 <__aeabi_uldivmod>
 8010cb8:	4603      	mov	r3, r0
 8010cba:	460c      	mov	r4, r1
 8010cbc:	4619      	mov	r1, r3
 8010cbe:	4622      	mov	r2, r4
 8010cc0:	f04f 0300 	mov.w	r3, #0
 8010cc4:	f04f 0400 	mov.w	r4, #0
 8010cc8:	0214      	lsls	r4, r2, #8
 8010cca:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 8010cce:	020b      	lsls	r3, r1, #8
 8010cd0:	687a      	ldr	r2, [r7, #4]
 8010cd2:	6852      	ldr	r2, [r2, #4]
 8010cd4:	0852      	lsrs	r2, r2, #1
 8010cd6:	4611      	mov	r1, r2
 8010cd8:	f04f 0200 	mov.w	r2, #0
 8010cdc:	eb13 0b01 	adds.w	fp, r3, r1
 8010ce0:	eb44 0c02 	adc.w	ip, r4, r2
 8010ce4:	4658      	mov	r0, fp
 8010ce6:	4661      	mov	r1, ip
 8010ce8:	687b      	ldr	r3, [r7, #4]
 8010cea:	685b      	ldr	r3, [r3, #4]
 8010cec:	f04f 0400 	mov.w	r4, #0
 8010cf0:	461a      	mov	r2, r3
 8010cf2:	4623      	mov	r3, r4
 8010cf4:	f7ef fb4c 	bl	8000390 <__aeabi_uldivmod>
 8010cf8:	4603      	mov	r3, r0
 8010cfa:	460c      	mov	r4, r1
 8010cfc:	62bb      	str	r3, [r7, #40]	; 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8010cfe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010d00:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8010d04:	d308      	bcc.n	8010d18 <UART_SetConfig+0x744>
 8010d06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010d08:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8010d0c:	d204      	bcs.n	8010d18 <UART_SetConfig+0x744>
        {
          huart->Instance->BRR = usartdiv;
 8010d0e:	687b      	ldr	r3, [r7, #4]
 8010d10:	681b      	ldr	r3, [r3, #0]
 8010d12:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8010d14:	60da      	str	r2, [r3, #12]
 8010d16:	e1f0      	b.n	80110fa <UART_SetConfig+0xb26>
        }
        else
        {
          ret = HAL_ERROR;
 8010d18:	2301      	movs	r3, #1
 8010d1a:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 8010d1e:	e1ec      	b.n	80110fa <UART_SetConfig+0xb26>
        }
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8010d20:	687b      	ldr	r3, [r7, #4]
 8010d22:	69db      	ldr	r3, [r3, #28]
 8010d24:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8010d28:	f040 8100 	bne.w	8010f2c <UART_SetConfig+0x958>
  {
    switch (clocksource)
 8010d2c:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8010d30:	2b40      	cmp	r3, #64	; 0x40
 8010d32:	f200 80b7 	bhi.w	8010ea4 <UART_SetConfig+0x8d0>
 8010d36:	a201      	add	r2, pc, #4	; (adr r2, 8010d3c <UART_SetConfig+0x768>)
 8010d38:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010d3c:	08010e41 	.word	0x08010e41
 8010d40:	08010e49 	.word	0x08010e49
 8010d44:	08010ea5 	.word	0x08010ea5
 8010d48:	08010ea5 	.word	0x08010ea5
 8010d4c:	08010e51 	.word	0x08010e51
 8010d50:	08010ea5 	.word	0x08010ea5
 8010d54:	08010ea5 	.word	0x08010ea5
 8010d58:	08010ea5 	.word	0x08010ea5
 8010d5c:	08010e61 	.word	0x08010e61
 8010d60:	08010ea5 	.word	0x08010ea5
 8010d64:	08010ea5 	.word	0x08010ea5
 8010d68:	08010ea5 	.word	0x08010ea5
 8010d6c:	08010ea5 	.word	0x08010ea5
 8010d70:	08010ea5 	.word	0x08010ea5
 8010d74:	08010ea5 	.word	0x08010ea5
 8010d78:	08010ea5 	.word	0x08010ea5
 8010d7c:	08010e71 	.word	0x08010e71
 8010d80:	08010ea5 	.word	0x08010ea5
 8010d84:	08010ea5 	.word	0x08010ea5
 8010d88:	08010ea5 	.word	0x08010ea5
 8010d8c:	08010ea5 	.word	0x08010ea5
 8010d90:	08010ea5 	.word	0x08010ea5
 8010d94:	08010ea5 	.word	0x08010ea5
 8010d98:	08010ea5 	.word	0x08010ea5
 8010d9c:	08010ea5 	.word	0x08010ea5
 8010da0:	08010ea5 	.word	0x08010ea5
 8010da4:	08010ea5 	.word	0x08010ea5
 8010da8:	08010ea5 	.word	0x08010ea5
 8010dac:	08010ea5 	.word	0x08010ea5
 8010db0:	08010ea5 	.word	0x08010ea5
 8010db4:	08010ea5 	.word	0x08010ea5
 8010db8:	08010ea5 	.word	0x08010ea5
 8010dbc:	08010e97 	.word	0x08010e97
 8010dc0:	08010ea5 	.word	0x08010ea5
 8010dc4:	08010ea5 	.word	0x08010ea5
 8010dc8:	08010ea5 	.word	0x08010ea5
 8010dcc:	08010ea5 	.word	0x08010ea5
 8010dd0:	08010ea5 	.word	0x08010ea5
 8010dd4:	08010ea5 	.word	0x08010ea5
 8010dd8:	08010ea5 	.word	0x08010ea5
 8010ddc:	08010ea5 	.word	0x08010ea5
 8010de0:	08010ea5 	.word	0x08010ea5
 8010de4:	08010ea5 	.word	0x08010ea5
 8010de8:	08010ea5 	.word	0x08010ea5
 8010dec:	08010ea5 	.word	0x08010ea5
 8010df0:	08010ea5 	.word	0x08010ea5
 8010df4:	08010ea5 	.word	0x08010ea5
 8010df8:	08010ea5 	.word	0x08010ea5
 8010dfc:	08010ea5 	.word	0x08010ea5
 8010e00:	08010ea5 	.word	0x08010ea5
 8010e04:	08010ea5 	.word	0x08010ea5
 8010e08:	08010ea5 	.word	0x08010ea5
 8010e0c:	08010ea5 	.word	0x08010ea5
 8010e10:	08010ea5 	.word	0x08010ea5
 8010e14:	08010ea5 	.word	0x08010ea5
 8010e18:	08010ea5 	.word	0x08010ea5
 8010e1c:	08010ea5 	.word	0x08010ea5
 8010e20:	08010ea5 	.word	0x08010ea5
 8010e24:	08010ea5 	.word	0x08010ea5
 8010e28:	08010ea5 	.word	0x08010ea5
 8010e2c:	08010ea5 	.word	0x08010ea5
 8010e30:	08010ea5 	.word	0x08010ea5
 8010e34:	08010ea5 	.word	0x08010ea5
 8010e38:	08010ea5 	.word	0x08010ea5
 8010e3c:	08010e9d 	.word	0x08010e9d
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8010e40:	f7f9 fff8 	bl	800ae34 <HAL_RCC_GetPCLK1Freq>
 8010e44:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8010e46:	e033      	b.n	8010eb0 <UART_SetConfig+0x8dc>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8010e48:	f7fa f80a 	bl	800ae60 <HAL_RCC_GetPCLK2Freq>
 8010e4c:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8010e4e:	e02f      	b.n	8010eb0 <UART_SetConfig+0x8dc>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8010e50:	f107 0314 	add.w	r3, r7, #20
 8010e54:	4618      	mov	r0, r3
 8010e56:	f7fb f9b1 	bl	800c1bc <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8010e5a:	69bb      	ldr	r3, [r7, #24]
 8010e5c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8010e5e:	e027      	b.n	8010eb0 <UART_SetConfig+0x8dc>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8010e60:	f107 0308 	add.w	r3, r7, #8
 8010e64:	4618      	mov	r0, r3
 8010e66:	f7fb faf5 	bl	800c454 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8010e6a:	68fb      	ldr	r3, [r7, #12]
 8010e6c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8010e6e:	e01f      	b.n	8010eb0 <UART_SetConfig+0x8dc>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8010e70:	4b2b      	ldr	r3, [pc, #172]	; (8010f20 <UART_SetConfig+0x94c>)
 8010e72:	681b      	ldr	r3, [r3, #0]
 8010e74:	f003 0320 	and.w	r3, r3, #32
 8010e78:	2b00      	cmp	r3, #0
 8010e7a:	d009      	beq.n	8010e90 <UART_SetConfig+0x8bc>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8010e7c:	4b28      	ldr	r3, [pc, #160]	; (8010f20 <UART_SetConfig+0x94c>)
 8010e7e:	681b      	ldr	r3, [r3, #0]
 8010e80:	08db      	lsrs	r3, r3, #3
 8010e82:	f003 0303 	and.w	r3, r3, #3
 8010e86:	4a27      	ldr	r2, [pc, #156]	; (8010f24 <UART_SetConfig+0x950>)
 8010e88:	fa22 f303 	lsr.w	r3, r2, r3
 8010e8c:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8010e8e:	e00f      	b.n	8010eb0 <UART_SetConfig+0x8dc>
          pclk = (uint32_t) HSI_VALUE;
 8010e90:	4b24      	ldr	r3, [pc, #144]	; (8010f24 <UART_SetConfig+0x950>)
 8010e92:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8010e94:	e00c      	b.n	8010eb0 <UART_SetConfig+0x8dc>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8010e96:	4b24      	ldr	r3, [pc, #144]	; (8010f28 <UART_SetConfig+0x954>)
 8010e98:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8010e9a:	e009      	b.n	8010eb0 <UART_SetConfig+0x8dc>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8010e9c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8010ea0:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8010ea2:	e005      	b.n	8010eb0 <UART_SetConfig+0x8dc>
      default:
        pclk = 0U;
 8010ea4:	2300      	movs	r3, #0
 8010ea6:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8010ea8:	2301      	movs	r3, #1
 8010eaa:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 8010eae:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8010eb0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010eb2:	2b00      	cmp	r3, #0
 8010eb4:	f000 8121 	beq.w	80110fa <UART_SetConfig+0xb26>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8010eb8:	687b      	ldr	r3, [r7, #4]
 8010eba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010ebc:	4a17      	ldr	r2, [pc, #92]	; (8010f1c <UART_SetConfig+0x948>)
 8010ebe:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8010ec2:	461a      	mov	r2, r3
 8010ec4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010ec6:	fbb3 f3f2 	udiv	r3, r3, r2
 8010eca:	005a      	lsls	r2, r3, #1
 8010ecc:	687b      	ldr	r3, [r7, #4]
 8010ece:	685b      	ldr	r3, [r3, #4]
 8010ed0:	085b      	lsrs	r3, r3, #1
 8010ed2:	441a      	add	r2, r3
 8010ed4:	687b      	ldr	r3, [r7, #4]
 8010ed6:	685b      	ldr	r3, [r3, #4]
 8010ed8:	fbb2 f3f3 	udiv	r3, r2, r3
 8010edc:	b29b      	uxth	r3, r3
 8010ede:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8010ee0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010ee2:	2b0f      	cmp	r3, #15
 8010ee4:	d916      	bls.n	8010f14 <UART_SetConfig+0x940>
 8010ee6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010ee8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8010eec:	d212      	bcs.n	8010f14 <UART_SetConfig+0x940>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8010eee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010ef0:	b29b      	uxth	r3, r3
 8010ef2:	f023 030f 	bic.w	r3, r3, #15
 8010ef6:	84fb      	strh	r3, [r7, #38]	; 0x26
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8010ef8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010efa:	085b      	lsrs	r3, r3, #1
 8010efc:	b29b      	uxth	r3, r3
 8010efe:	f003 0307 	and.w	r3, r3, #7
 8010f02:	b29a      	uxth	r2, r3
 8010f04:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8010f06:	4313      	orrs	r3, r2
 8010f08:	84fb      	strh	r3, [r7, #38]	; 0x26
        huart->Instance->BRR = brrtemp;
 8010f0a:	687b      	ldr	r3, [r7, #4]
 8010f0c:	681b      	ldr	r3, [r3, #0]
 8010f0e:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8010f10:	60da      	str	r2, [r3, #12]
 8010f12:	e0f2      	b.n	80110fa <UART_SetConfig+0xb26>
      }
      else
      {
        ret = HAL_ERROR;
 8010f14:	2301      	movs	r3, #1
 8010f16:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 8010f1a:	e0ee      	b.n	80110fa <UART_SetConfig+0xb26>
 8010f1c:	0801c51c 	.word	0x0801c51c
 8010f20:	58024400 	.word	0x58024400
 8010f24:	03d09000 	.word	0x03d09000
 8010f28:	003d0900 	.word	0x003d0900
      }
    }
  }
  else
  {
    switch (clocksource)
 8010f2c:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8010f30:	2b40      	cmp	r3, #64	; 0x40
 8010f32:	f200 80b7 	bhi.w	80110a4 <UART_SetConfig+0xad0>
 8010f36:	a201      	add	r2, pc, #4	; (adr r2, 8010f3c <UART_SetConfig+0x968>)
 8010f38:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010f3c:	08011041 	.word	0x08011041
 8010f40:	08011049 	.word	0x08011049
 8010f44:	080110a5 	.word	0x080110a5
 8010f48:	080110a5 	.word	0x080110a5
 8010f4c:	08011051 	.word	0x08011051
 8010f50:	080110a5 	.word	0x080110a5
 8010f54:	080110a5 	.word	0x080110a5
 8010f58:	080110a5 	.word	0x080110a5
 8010f5c:	08011061 	.word	0x08011061
 8010f60:	080110a5 	.word	0x080110a5
 8010f64:	080110a5 	.word	0x080110a5
 8010f68:	080110a5 	.word	0x080110a5
 8010f6c:	080110a5 	.word	0x080110a5
 8010f70:	080110a5 	.word	0x080110a5
 8010f74:	080110a5 	.word	0x080110a5
 8010f78:	080110a5 	.word	0x080110a5
 8010f7c:	08011071 	.word	0x08011071
 8010f80:	080110a5 	.word	0x080110a5
 8010f84:	080110a5 	.word	0x080110a5
 8010f88:	080110a5 	.word	0x080110a5
 8010f8c:	080110a5 	.word	0x080110a5
 8010f90:	080110a5 	.word	0x080110a5
 8010f94:	080110a5 	.word	0x080110a5
 8010f98:	080110a5 	.word	0x080110a5
 8010f9c:	080110a5 	.word	0x080110a5
 8010fa0:	080110a5 	.word	0x080110a5
 8010fa4:	080110a5 	.word	0x080110a5
 8010fa8:	080110a5 	.word	0x080110a5
 8010fac:	080110a5 	.word	0x080110a5
 8010fb0:	080110a5 	.word	0x080110a5
 8010fb4:	080110a5 	.word	0x080110a5
 8010fb8:	080110a5 	.word	0x080110a5
 8010fbc:	08011097 	.word	0x08011097
 8010fc0:	080110a5 	.word	0x080110a5
 8010fc4:	080110a5 	.word	0x080110a5
 8010fc8:	080110a5 	.word	0x080110a5
 8010fcc:	080110a5 	.word	0x080110a5
 8010fd0:	080110a5 	.word	0x080110a5
 8010fd4:	080110a5 	.word	0x080110a5
 8010fd8:	080110a5 	.word	0x080110a5
 8010fdc:	080110a5 	.word	0x080110a5
 8010fe0:	080110a5 	.word	0x080110a5
 8010fe4:	080110a5 	.word	0x080110a5
 8010fe8:	080110a5 	.word	0x080110a5
 8010fec:	080110a5 	.word	0x080110a5
 8010ff0:	080110a5 	.word	0x080110a5
 8010ff4:	080110a5 	.word	0x080110a5
 8010ff8:	080110a5 	.word	0x080110a5
 8010ffc:	080110a5 	.word	0x080110a5
 8011000:	080110a5 	.word	0x080110a5
 8011004:	080110a5 	.word	0x080110a5
 8011008:	080110a5 	.word	0x080110a5
 801100c:	080110a5 	.word	0x080110a5
 8011010:	080110a5 	.word	0x080110a5
 8011014:	080110a5 	.word	0x080110a5
 8011018:	080110a5 	.word	0x080110a5
 801101c:	080110a5 	.word	0x080110a5
 8011020:	080110a5 	.word	0x080110a5
 8011024:	080110a5 	.word	0x080110a5
 8011028:	080110a5 	.word	0x080110a5
 801102c:	080110a5 	.word	0x080110a5
 8011030:	080110a5 	.word	0x080110a5
 8011034:	080110a5 	.word	0x080110a5
 8011038:	080110a5 	.word	0x080110a5
 801103c:	0801109d 	.word	0x0801109d
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8011040:	f7f9 fef8 	bl	800ae34 <HAL_RCC_GetPCLK1Freq>
 8011044:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8011046:	e033      	b.n	80110b0 <UART_SetConfig+0xadc>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8011048:	f7f9 ff0a 	bl	800ae60 <HAL_RCC_GetPCLK2Freq>
 801104c:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 801104e:	e02f      	b.n	80110b0 <UART_SetConfig+0xadc>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8011050:	f107 0314 	add.w	r3, r7, #20
 8011054:	4618      	mov	r0, r3
 8011056:	f7fb f8b1 	bl	800c1bc <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 801105a:	69bb      	ldr	r3, [r7, #24]
 801105c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 801105e:	e027      	b.n	80110b0 <UART_SetConfig+0xadc>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8011060:	f107 0308 	add.w	r3, r7, #8
 8011064:	4618      	mov	r0, r3
 8011066:	f7fb f9f5 	bl	800c454 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 801106a:	68fb      	ldr	r3, [r7, #12]
 801106c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 801106e:	e01f      	b.n	80110b0 <UART_SetConfig+0xadc>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8011070:	4b2c      	ldr	r3, [pc, #176]	; (8011124 <UART_SetConfig+0xb50>)
 8011072:	681b      	ldr	r3, [r3, #0]
 8011074:	f003 0320 	and.w	r3, r3, #32
 8011078:	2b00      	cmp	r3, #0
 801107a:	d009      	beq.n	8011090 <UART_SetConfig+0xabc>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 801107c:	4b29      	ldr	r3, [pc, #164]	; (8011124 <UART_SetConfig+0xb50>)
 801107e:	681b      	ldr	r3, [r3, #0]
 8011080:	08db      	lsrs	r3, r3, #3
 8011082:	f003 0303 	and.w	r3, r3, #3
 8011086:	4a28      	ldr	r2, [pc, #160]	; (8011128 <UART_SetConfig+0xb54>)
 8011088:	fa22 f303 	lsr.w	r3, r2, r3
 801108c:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 801108e:	e00f      	b.n	80110b0 <UART_SetConfig+0xadc>
          pclk = (uint32_t) HSI_VALUE;
 8011090:	4b25      	ldr	r3, [pc, #148]	; (8011128 <UART_SetConfig+0xb54>)
 8011092:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8011094:	e00c      	b.n	80110b0 <UART_SetConfig+0xadc>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8011096:	4b25      	ldr	r3, [pc, #148]	; (801112c <UART_SetConfig+0xb58>)
 8011098:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 801109a:	e009      	b.n	80110b0 <UART_SetConfig+0xadc>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 801109c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80110a0:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80110a2:	e005      	b.n	80110b0 <UART_SetConfig+0xadc>
      default:
        pclk = 0U;
 80110a4:	2300      	movs	r3, #0
 80110a6:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 80110a8:	2301      	movs	r3, #1
 80110aa:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 80110ae:	bf00      	nop
    }

    if (pclk != 0U)
 80110b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80110b2:	2b00      	cmp	r3, #0
 80110b4:	d021      	beq.n	80110fa <UART_SetConfig+0xb26>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80110b6:	687b      	ldr	r3, [r7, #4]
 80110b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80110ba:	4a1d      	ldr	r2, [pc, #116]	; (8011130 <UART_SetConfig+0xb5c>)
 80110bc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80110c0:	461a      	mov	r2, r3
 80110c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80110c4:	fbb3 f2f2 	udiv	r2, r3, r2
 80110c8:	687b      	ldr	r3, [r7, #4]
 80110ca:	685b      	ldr	r3, [r3, #4]
 80110cc:	085b      	lsrs	r3, r3, #1
 80110ce:	441a      	add	r2, r3
 80110d0:	687b      	ldr	r3, [r7, #4]
 80110d2:	685b      	ldr	r3, [r3, #4]
 80110d4:	fbb2 f3f3 	udiv	r3, r2, r3
 80110d8:	b29b      	uxth	r3, r3
 80110da:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80110dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80110de:	2b0f      	cmp	r3, #15
 80110e0:	d908      	bls.n	80110f4 <UART_SetConfig+0xb20>
 80110e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80110e4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80110e8:	d204      	bcs.n	80110f4 <UART_SetConfig+0xb20>
      {
        huart->Instance->BRR = usartdiv;
 80110ea:	687b      	ldr	r3, [r7, #4]
 80110ec:	681b      	ldr	r3, [r3, #0]
 80110ee:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80110f0:	60da      	str	r2, [r3, #12]
 80110f2:	e002      	b.n	80110fa <UART_SetConfig+0xb26>
      }
      else
      {
        ret = HAL_ERROR;
 80110f4:	2301      	movs	r3, #1
 80110f6:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80110fa:	687b      	ldr	r3, [r7, #4]
 80110fc:	2201      	movs	r2, #1
 80110fe:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8011102:	687b      	ldr	r3, [r7, #4]
 8011104:	2201      	movs	r2, #1
 8011106:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 801110a:	687b      	ldr	r3, [r7, #4]
 801110c:	2200      	movs	r2, #0
 801110e:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->TxISR = NULL;
 8011110:	687b      	ldr	r3, [r7, #4]
 8011112:	2200      	movs	r2, #0
 8011114:	671a      	str	r2, [r3, #112]	; 0x70

  return ret;
 8011116:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
}
 801111a:	4618      	mov	r0, r3
 801111c:	3738      	adds	r7, #56	; 0x38
 801111e:	46bd      	mov	sp, r7
 8011120:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}
 8011124:	58024400 	.word	0x58024400
 8011128:	03d09000 	.word	0x03d09000
 801112c:	003d0900 	.word	0x003d0900
 8011130:	0801c51c 	.word	0x0801c51c

08011134 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8011134:	b480      	push	{r7}
 8011136:	b083      	sub	sp, #12
 8011138:	af00      	add	r7, sp, #0
 801113a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 801113c:	687b      	ldr	r3, [r7, #4]
 801113e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011140:	f003 0301 	and.w	r3, r3, #1
 8011144:	2b00      	cmp	r3, #0
 8011146:	d00a      	beq.n	801115e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8011148:	687b      	ldr	r3, [r7, #4]
 801114a:	681b      	ldr	r3, [r3, #0]
 801114c:	685b      	ldr	r3, [r3, #4]
 801114e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8011152:	687b      	ldr	r3, [r7, #4]
 8011154:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011156:	687b      	ldr	r3, [r7, #4]
 8011158:	681b      	ldr	r3, [r3, #0]
 801115a:	430a      	orrs	r2, r1
 801115c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 801115e:	687b      	ldr	r3, [r7, #4]
 8011160:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011162:	f003 0302 	and.w	r3, r3, #2
 8011166:	2b00      	cmp	r3, #0
 8011168:	d00a      	beq.n	8011180 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 801116a:	687b      	ldr	r3, [r7, #4]
 801116c:	681b      	ldr	r3, [r3, #0]
 801116e:	685b      	ldr	r3, [r3, #4]
 8011170:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8011174:	687b      	ldr	r3, [r7, #4]
 8011176:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8011178:	687b      	ldr	r3, [r7, #4]
 801117a:	681b      	ldr	r3, [r3, #0]
 801117c:	430a      	orrs	r2, r1
 801117e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8011180:	687b      	ldr	r3, [r7, #4]
 8011182:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011184:	f003 0304 	and.w	r3, r3, #4
 8011188:	2b00      	cmp	r3, #0
 801118a:	d00a      	beq.n	80111a2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 801118c:	687b      	ldr	r3, [r7, #4]
 801118e:	681b      	ldr	r3, [r3, #0]
 8011190:	685b      	ldr	r3, [r3, #4]
 8011192:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8011196:	687b      	ldr	r3, [r7, #4]
 8011198:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 801119a:	687b      	ldr	r3, [r7, #4]
 801119c:	681b      	ldr	r3, [r3, #0]
 801119e:	430a      	orrs	r2, r1
 80111a0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80111a2:	687b      	ldr	r3, [r7, #4]
 80111a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80111a6:	f003 0308 	and.w	r3, r3, #8
 80111aa:	2b00      	cmp	r3, #0
 80111ac:	d00a      	beq.n	80111c4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80111ae:	687b      	ldr	r3, [r7, #4]
 80111b0:	681b      	ldr	r3, [r3, #0]
 80111b2:	685b      	ldr	r3, [r3, #4]
 80111b4:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80111b8:	687b      	ldr	r3, [r7, #4]
 80111ba:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80111bc:	687b      	ldr	r3, [r7, #4]
 80111be:	681b      	ldr	r3, [r3, #0]
 80111c0:	430a      	orrs	r2, r1
 80111c2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80111c4:	687b      	ldr	r3, [r7, #4]
 80111c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80111c8:	f003 0310 	and.w	r3, r3, #16
 80111cc:	2b00      	cmp	r3, #0
 80111ce:	d00a      	beq.n	80111e6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80111d0:	687b      	ldr	r3, [r7, #4]
 80111d2:	681b      	ldr	r3, [r3, #0]
 80111d4:	689b      	ldr	r3, [r3, #8]
 80111d6:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80111da:	687b      	ldr	r3, [r7, #4]
 80111dc:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80111de:	687b      	ldr	r3, [r7, #4]
 80111e0:	681b      	ldr	r3, [r3, #0]
 80111e2:	430a      	orrs	r2, r1
 80111e4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80111e6:	687b      	ldr	r3, [r7, #4]
 80111e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80111ea:	f003 0320 	and.w	r3, r3, #32
 80111ee:	2b00      	cmp	r3, #0
 80111f0:	d00a      	beq.n	8011208 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80111f2:	687b      	ldr	r3, [r7, #4]
 80111f4:	681b      	ldr	r3, [r3, #0]
 80111f6:	689b      	ldr	r3, [r3, #8]
 80111f8:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80111fc:	687b      	ldr	r3, [r7, #4]
 80111fe:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8011200:	687b      	ldr	r3, [r7, #4]
 8011202:	681b      	ldr	r3, [r3, #0]
 8011204:	430a      	orrs	r2, r1
 8011206:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8011208:	687b      	ldr	r3, [r7, #4]
 801120a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801120c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8011210:	2b00      	cmp	r3, #0
 8011212:	d01a      	beq.n	801124a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8011214:	687b      	ldr	r3, [r7, #4]
 8011216:	681b      	ldr	r3, [r3, #0]
 8011218:	685b      	ldr	r3, [r3, #4]
 801121a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 801121e:	687b      	ldr	r3, [r7, #4]
 8011220:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8011222:	687b      	ldr	r3, [r7, #4]
 8011224:	681b      	ldr	r3, [r3, #0]
 8011226:	430a      	orrs	r2, r1
 8011228:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 801122a:	687b      	ldr	r3, [r7, #4]
 801122c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801122e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8011232:	d10a      	bne.n	801124a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8011234:	687b      	ldr	r3, [r7, #4]
 8011236:	681b      	ldr	r3, [r3, #0]
 8011238:	685b      	ldr	r3, [r3, #4]
 801123a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 801123e:	687b      	ldr	r3, [r7, #4]
 8011240:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8011242:	687b      	ldr	r3, [r7, #4]
 8011244:	681b      	ldr	r3, [r3, #0]
 8011246:	430a      	orrs	r2, r1
 8011248:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 801124a:	687b      	ldr	r3, [r7, #4]
 801124c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801124e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8011252:	2b00      	cmp	r3, #0
 8011254:	d00a      	beq.n	801126c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8011256:	687b      	ldr	r3, [r7, #4]
 8011258:	681b      	ldr	r3, [r3, #0]
 801125a:	685b      	ldr	r3, [r3, #4]
 801125c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8011260:	687b      	ldr	r3, [r7, #4]
 8011262:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8011264:	687b      	ldr	r3, [r7, #4]
 8011266:	681b      	ldr	r3, [r3, #0]
 8011268:	430a      	orrs	r2, r1
 801126a:	605a      	str	r2, [r3, #4]
  }
}
 801126c:	bf00      	nop
 801126e:	370c      	adds	r7, #12
 8011270:	46bd      	mov	sp, r7
 8011272:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011276:	4770      	bx	lr

08011278 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8011278:	b580      	push	{r7, lr}
 801127a:	b086      	sub	sp, #24
 801127c:	af02      	add	r7, sp, #8
 801127e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8011280:	687b      	ldr	r3, [r7, #4]
 8011282:	2200      	movs	r2, #0
 8011284:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8011288:	f7f3 fd94 	bl	8004db4 <HAL_GetTick>
 801128c:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 801128e:	687b      	ldr	r3, [r7, #4]
 8011290:	681b      	ldr	r3, [r3, #0]
 8011292:	681b      	ldr	r3, [r3, #0]
 8011294:	f003 0308 	and.w	r3, r3, #8
 8011298:	2b08      	cmp	r3, #8
 801129a:	d10e      	bne.n	80112ba <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 801129c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80112a0:	9300      	str	r3, [sp, #0]
 80112a2:	68fb      	ldr	r3, [r7, #12]
 80112a4:	2200      	movs	r2, #0
 80112a6:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80112aa:	6878      	ldr	r0, [r7, #4]
 80112ac:	f000 f82c 	bl	8011308 <UART_WaitOnFlagUntilTimeout>
 80112b0:	4603      	mov	r3, r0
 80112b2:	2b00      	cmp	r3, #0
 80112b4:	d001      	beq.n	80112ba <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80112b6:	2303      	movs	r3, #3
 80112b8:	e022      	b.n	8011300 <UART_CheckIdleState+0x88>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80112ba:	687b      	ldr	r3, [r7, #4]
 80112bc:	681b      	ldr	r3, [r3, #0]
 80112be:	681b      	ldr	r3, [r3, #0]
 80112c0:	f003 0304 	and.w	r3, r3, #4
 80112c4:	2b04      	cmp	r3, #4
 80112c6:	d10e      	bne.n	80112e6 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80112c8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80112cc:	9300      	str	r3, [sp, #0]
 80112ce:	68fb      	ldr	r3, [r7, #12]
 80112d0:	2200      	movs	r2, #0
 80112d2:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80112d6:	6878      	ldr	r0, [r7, #4]
 80112d8:	f000 f816 	bl	8011308 <UART_WaitOnFlagUntilTimeout>
 80112dc:	4603      	mov	r3, r0
 80112de:	2b00      	cmp	r3, #0
 80112e0:	d001      	beq.n	80112e6 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80112e2:	2303      	movs	r3, #3
 80112e4:	e00c      	b.n	8011300 <UART_CheckIdleState+0x88>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80112e6:	687b      	ldr	r3, [r7, #4]
 80112e8:	2220      	movs	r2, #32
 80112ea:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_READY;
 80112ee:	687b      	ldr	r3, [r7, #4]
 80112f0:	2220      	movs	r2, #32
 80112f2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UNLOCK(huart);
 80112f6:	687b      	ldr	r3, [r7, #4]
 80112f8:	2200      	movs	r2, #0
 80112fa:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 80112fe:	2300      	movs	r3, #0
}
 8011300:	4618      	mov	r0, r3
 8011302:	3710      	adds	r7, #16
 8011304:	46bd      	mov	sp, r7
 8011306:	bd80      	pop	{r7, pc}

08011308 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8011308:	b580      	push	{r7, lr}
 801130a:	b084      	sub	sp, #16
 801130c:	af00      	add	r7, sp, #0
 801130e:	60f8      	str	r0, [r7, #12]
 8011310:	60b9      	str	r1, [r7, #8]
 8011312:	603b      	str	r3, [r7, #0]
 8011314:	4613      	mov	r3, r2
 8011316:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8011318:	e062      	b.n	80113e0 <UART_WaitOnFlagUntilTimeout+0xd8>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 801131a:	69bb      	ldr	r3, [r7, #24]
 801131c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011320:	d05e      	beq.n	80113e0 <UART_WaitOnFlagUntilTimeout+0xd8>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8011322:	f7f3 fd47 	bl	8004db4 <HAL_GetTick>
 8011326:	4602      	mov	r2, r0
 8011328:	683b      	ldr	r3, [r7, #0]
 801132a:	1ad3      	subs	r3, r2, r3
 801132c:	69ba      	ldr	r2, [r7, #24]
 801132e:	429a      	cmp	r2, r3
 8011330:	d302      	bcc.n	8011338 <UART_WaitOnFlagUntilTimeout+0x30>
 8011332:	69bb      	ldr	r3, [r7, #24]
 8011334:	2b00      	cmp	r3, #0
 8011336:	d11d      	bne.n	8011374 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8011338:	68fb      	ldr	r3, [r7, #12]
 801133a:	681b      	ldr	r3, [r3, #0]
 801133c:	681a      	ldr	r2, [r3, #0]
 801133e:	68fb      	ldr	r3, [r7, #12]
 8011340:	681b      	ldr	r3, [r3, #0]
 8011342:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8011346:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8011348:	68fb      	ldr	r3, [r7, #12]
 801134a:	681b      	ldr	r3, [r3, #0]
 801134c:	689a      	ldr	r2, [r3, #8]
 801134e:	68fb      	ldr	r3, [r7, #12]
 8011350:	681b      	ldr	r3, [r3, #0]
 8011352:	f022 0201 	bic.w	r2, r2, #1
 8011356:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8011358:	68fb      	ldr	r3, [r7, #12]
 801135a:	2220      	movs	r2, #32
 801135c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->RxState = HAL_UART_STATE_READY;
 8011360:	68fb      	ldr	r3, [r7, #12]
 8011362:	2220      	movs	r2, #32
 8011364:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        __HAL_UNLOCK(huart);
 8011368:	68fb      	ldr	r3, [r7, #12]
 801136a:	2200      	movs	r2, #0
 801136c:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 8011370:	2303      	movs	r3, #3
 8011372:	e045      	b.n	8011400 <UART_WaitOnFlagUntilTimeout+0xf8>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8011374:	68fb      	ldr	r3, [r7, #12]
 8011376:	681b      	ldr	r3, [r3, #0]
 8011378:	681b      	ldr	r3, [r3, #0]
 801137a:	f003 0304 	and.w	r3, r3, #4
 801137e:	2b00      	cmp	r3, #0
 8011380:	d02e      	beq.n	80113e0 <UART_WaitOnFlagUntilTimeout+0xd8>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8011382:	68fb      	ldr	r3, [r7, #12]
 8011384:	681b      	ldr	r3, [r3, #0]
 8011386:	69db      	ldr	r3, [r3, #28]
 8011388:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 801138c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8011390:	d126      	bne.n	80113e0 <UART_WaitOnFlagUntilTimeout+0xd8>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8011392:	68fb      	ldr	r3, [r7, #12]
 8011394:	681b      	ldr	r3, [r3, #0]
 8011396:	f44f 6200 	mov.w	r2, #2048	; 0x800
 801139a:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 801139c:	68fb      	ldr	r3, [r7, #12]
 801139e:	681b      	ldr	r3, [r3, #0]
 80113a0:	681a      	ldr	r2, [r3, #0]
 80113a2:	68fb      	ldr	r3, [r7, #12]
 80113a4:	681b      	ldr	r3, [r3, #0]
 80113a6:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80113aa:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80113ac:	68fb      	ldr	r3, [r7, #12]
 80113ae:	681b      	ldr	r3, [r3, #0]
 80113b0:	689a      	ldr	r2, [r3, #8]
 80113b2:	68fb      	ldr	r3, [r7, #12]
 80113b4:	681b      	ldr	r3, [r3, #0]
 80113b6:	f022 0201 	bic.w	r2, r2, #1
 80113ba:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 80113bc:	68fb      	ldr	r3, [r7, #12]
 80113be:	2220      	movs	r2, #32
 80113c0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->RxState = HAL_UART_STATE_READY;
 80113c4:	68fb      	ldr	r3, [r7, #12]
 80113c6:	2220      	movs	r2, #32
 80113c8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80113cc:	68fb      	ldr	r3, [r7, #12]
 80113ce:	2220      	movs	r2, #32
 80113d0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80113d4:	68fb      	ldr	r3, [r7, #12]
 80113d6:	2200      	movs	r2, #0
 80113d8:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

          return HAL_TIMEOUT;
 80113dc:	2303      	movs	r3, #3
 80113de:	e00f      	b.n	8011400 <UART_WaitOnFlagUntilTimeout+0xf8>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80113e0:	68fb      	ldr	r3, [r7, #12]
 80113e2:	681b      	ldr	r3, [r3, #0]
 80113e4:	69da      	ldr	r2, [r3, #28]
 80113e6:	68bb      	ldr	r3, [r7, #8]
 80113e8:	4013      	ands	r3, r2
 80113ea:	68ba      	ldr	r2, [r7, #8]
 80113ec:	429a      	cmp	r2, r3
 80113ee:	bf0c      	ite	eq
 80113f0:	2301      	moveq	r3, #1
 80113f2:	2300      	movne	r3, #0
 80113f4:	b2db      	uxtb	r3, r3
 80113f6:	461a      	mov	r2, r3
 80113f8:	79fb      	ldrb	r3, [r7, #7]
 80113fa:	429a      	cmp	r2, r3
 80113fc:	d08d      	beq.n	801131a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80113fe:	2300      	movs	r3, #0
}
 8011400:	4618      	mov	r0, r3
 8011402:	3710      	adds	r7, #16
 8011404:	46bd      	mov	sp, r7
 8011406:	bd80      	pop	{r7, pc}

08011408 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8011408:	b480      	push	{r7}
 801140a:	b083      	sub	sp, #12
 801140c:	af00      	add	r7, sp, #0
 801140e:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 8011410:	687b      	ldr	r3, [r7, #4]
 8011412:	681b      	ldr	r3, [r3, #0]
 8011414:	681a      	ldr	r2, [r3, #0]
 8011416:	687b      	ldr	r3, [r7, #4]
 8011418:	681b      	ldr	r3, [r3, #0]
 801141a:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 801141e:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 8011420:	687b      	ldr	r3, [r7, #4]
 8011422:	681b      	ldr	r3, [r3, #0]
 8011424:	689a      	ldr	r2, [r3, #8]
 8011426:	687b      	ldr	r3, [r7, #4]
 8011428:	681b      	ldr	r3, [r3, #0]
 801142a:	f422 0200 	bic.w	r2, r2, #8388608	; 0x800000
 801142e:	609a      	str	r2, [r3, #8]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8011430:	687b      	ldr	r3, [r7, #4]
 8011432:	2220      	movs	r2, #32
 8011434:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
}
 8011438:	bf00      	nop
 801143a:	370c      	adds	r7, #12
 801143c:	46bd      	mov	sp, r7
 801143e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011442:	4770      	bx	lr

08011444 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8011444:	b480      	push	{r7}
 8011446:	b083      	sub	sp, #12
 8011448:	af00      	add	r7, sp, #0
 801144a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 801144c:	687b      	ldr	r3, [r7, #4]
 801144e:	681b      	ldr	r3, [r3, #0]
 8011450:	681a      	ldr	r2, [r3, #0]
 8011452:	687b      	ldr	r3, [r7, #4]
 8011454:	681b      	ldr	r3, [r3, #0]
 8011456:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 801145a:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 801145c:	687b      	ldr	r3, [r7, #4]
 801145e:	681b      	ldr	r3, [r3, #0]
 8011460:	6899      	ldr	r1, [r3, #8]
 8011462:	687b      	ldr	r3, [r7, #4]
 8011464:	681a      	ldr	r2, [r3, #0]
 8011466:	4b08      	ldr	r3, [pc, #32]	; (8011488 <UART_EndRxTransfer+0x44>)
 8011468:	400b      	ands	r3, r1
 801146a:	6093      	str	r3, [r2, #8]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 801146c:	687b      	ldr	r3, [r7, #4]
 801146e:	2220      	movs	r2, #32
 8011470:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8011474:	687b      	ldr	r3, [r7, #4]
 8011476:	2200      	movs	r2, #0
 8011478:	66da      	str	r2, [r3, #108]	; 0x6c
}
 801147a:	bf00      	nop
 801147c:	370c      	adds	r7, #12
 801147e:	46bd      	mov	sp, r7
 8011480:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011484:	4770      	bx	lr
 8011486:	bf00      	nop
 8011488:	effffffe 	.word	0xeffffffe

0801148c <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 801148c:	b580      	push	{r7, lr}
 801148e:	b084      	sub	sp, #16
 8011490:	af00      	add	r7, sp, #0
 8011492:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8011494:	687b      	ldr	r3, [r7, #4]
 8011496:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011498:	60fb      	str	r3, [r7, #12]

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 801149a:	687b      	ldr	r3, [r7, #4]
 801149c:	69db      	ldr	r3, [r3, #28]
 801149e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80114a2:	d01f      	beq.n	80114e4 <UART_DMAReceiveCplt+0x58>
  {
    huart->RxXferCount = 0U;
 80114a4:	68fb      	ldr	r3, [r7, #12]
 80114a6:	2200      	movs	r2, #0
 80114a8:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80114ac:	68fb      	ldr	r3, [r7, #12]
 80114ae:	681b      	ldr	r3, [r3, #0]
 80114b0:	681a      	ldr	r2, [r3, #0]
 80114b2:	68fb      	ldr	r3, [r7, #12]
 80114b4:	681b      	ldr	r3, [r3, #0]
 80114b6:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80114ba:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80114bc:	68fb      	ldr	r3, [r7, #12]
 80114be:	681b      	ldr	r3, [r3, #0]
 80114c0:	689a      	ldr	r2, [r3, #8]
 80114c2:	68fb      	ldr	r3, [r7, #12]
 80114c4:	681b      	ldr	r3, [r3, #0]
 80114c6:	f022 0201 	bic.w	r2, r2, #1
 80114ca:	609a      	str	r2, [r3, #8]

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80114cc:	68fb      	ldr	r3, [r7, #12]
 80114ce:	681b      	ldr	r3, [r3, #0]
 80114d0:	689a      	ldr	r2, [r3, #8]
 80114d2:	68fb      	ldr	r3, [r7, #12]
 80114d4:	681b      	ldr	r3, [r3, #0]
 80114d6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80114da:	609a      	str	r2, [r3, #8]

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80114dc:	68fb      	ldr	r3, [r7, #12]
 80114de:	2220      	movs	r2, #32
 80114e0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx complete callback*/
  huart->RxCpltCallback(huart);
#else
  /*Call legacy weak Rx complete callback*/
  HAL_UART_RxCpltCallback(huart);
 80114e4:	68f8      	ldr	r0, [r7, #12]
 80114e6:	f7ef fdd3 	bl	8001090 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80114ea:	bf00      	nop
 80114ec:	3710      	adds	r7, #16
 80114ee:	46bd      	mov	sp, r7
 80114f0:	bd80      	pop	{r7, pc}

080114f2 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80114f2:	b580      	push	{r7, lr}
 80114f4:	b084      	sub	sp, #16
 80114f6:	af00      	add	r7, sp, #0
 80114f8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80114fa:	687b      	ldr	r3, [r7, #4]
 80114fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80114fe:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx Half complete callback*/
  huart->RxHalfCpltCallback(huart);
#else
  /*Call legacy weak Rx Half complete callback*/
  HAL_UART_RxHalfCpltCallback(huart);
 8011500:	68f8      	ldr	r0, [r7, #12]
 8011502:	f7ef fdaf 	bl	8001064 <HAL_UART_RxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8011506:	bf00      	nop
 8011508:	3710      	adds	r7, #16
 801150a:	46bd      	mov	sp, r7
 801150c:	bd80      	pop	{r7, pc}

0801150e <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 801150e:	b580      	push	{r7, lr}
 8011510:	b086      	sub	sp, #24
 8011512:	af00      	add	r7, sp, #0
 8011514:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8011516:	687b      	ldr	r3, [r7, #4]
 8011518:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801151a:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 801151c:	697b      	ldr	r3, [r7, #20]
 801151e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8011522:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8011524:	697b      	ldr	r3, [r7, #20]
 8011526:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 801152a:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 801152c:	697b      	ldr	r3, [r7, #20]
 801152e:	681b      	ldr	r3, [r3, #0]
 8011530:	689b      	ldr	r3, [r3, #8]
 8011532:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8011536:	2b80      	cmp	r3, #128	; 0x80
 8011538:	d109      	bne.n	801154e <UART_DMAError+0x40>
 801153a:	693b      	ldr	r3, [r7, #16]
 801153c:	2b21      	cmp	r3, #33	; 0x21
 801153e:	d106      	bne.n	801154e <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 8011540:	697b      	ldr	r3, [r7, #20]
 8011542:	2200      	movs	r2, #0
 8011544:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    UART_EndTxTransfer(huart);
 8011548:	6978      	ldr	r0, [r7, #20]
 801154a:	f7ff ff5d 	bl	8011408 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 801154e:	697b      	ldr	r3, [r7, #20]
 8011550:	681b      	ldr	r3, [r3, #0]
 8011552:	689b      	ldr	r3, [r3, #8]
 8011554:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8011558:	2b40      	cmp	r3, #64	; 0x40
 801155a:	d109      	bne.n	8011570 <UART_DMAError+0x62>
 801155c:	68fb      	ldr	r3, [r7, #12]
 801155e:	2b22      	cmp	r3, #34	; 0x22
 8011560:	d106      	bne.n	8011570 <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 8011562:	697b      	ldr	r3, [r7, #20]
 8011564:	2200      	movs	r2, #0
 8011566:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    UART_EndRxTransfer(huart);
 801156a:	6978      	ldr	r0, [r7, #20]
 801156c:	f7ff ff6a 	bl	8011444 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8011570:	697b      	ldr	r3, [r7, #20]
 8011572:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8011576:	f043 0210 	orr.w	r2, r3, #16
 801157a:	697b      	ldr	r3, [r7, #20]
 801157c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8011580:	6978      	ldr	r0, [r7, #20]
 8011582:	f7ff f81d 	bl	80105c0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8011586:	bf00      	nop
 8011588:	3718      	adds	r7, #24
 801158a:	46bd      	mov	sp, r7
 801158c:	bd80      	pop	{r7, pc}

0801158e <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 801158e:	b480      	push	{r7}
 8011590:	b085      	sub	sp, #20
 8011592:	af00      	add	r7, sp, #0
 8011594:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8011596:	687b      	ldr	r3, [r7, #4]
 8011598:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 801159c:	2b01      	cmp	r3, #1
 801159e:	d101      	bne.n	80115a4 <HAL_UARTEx_DisableFifoMode+0x16>
 80115a0:	2302      	movs	r3, #2
 80115a2:	e027      	b.n	80115f4 <HAL_UARTEx_DisableFifoMode+0x66>
 80115a4:	687b      	ldr	r3, [r7, #4]
 80115a6:	2201      	movs	r2, #1
 80115a8:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 80115ac:	687b      	ldr	r3, [r7, #4]
 80115ae:	2224      	movs	r2, #36	; 0x24
 80115b0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80115b4:	687b      	ldr	r3, [r7, #4]
 80115b6:	681b      	ldr	r3, [r3, #0]
 80115b8:	681b      	ldr	r3, [r3, #0]
 80115ba:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80115bc:	687b      	ldr	r3, [r7, #4]
 80115be:	681b      	ldr	r3, [r3, #0]
 80115c0:	681a      	ldr	r2, [r3, #0]
 80115c2:	687b      	ldr	r3, [r7, #4]
 80115c4:	681b      	ldr	r3, [r3, #0]
 80115c6:	f022 0201 	bic.w	r2, r2, #1
 80115ca:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80115cc:	68fb      	ldr	r3, [r7, #12]
 80115ce:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 80115d2:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80115d4:	687b      	ldr	r3, [r7, #4]
 80115d6:	2200      	movs	r2, #0
 80115d8:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80115da:	687b      	ldr	r3, [r7, #4]
 80115dc:	681b      	ldr	r3, [r3, #0]
 80115de:	68fa      	ldr	r2, [r7, #12]
 80115e0:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80115e2:	687b      	ldr	r3, [r7, #4]
 80115e4:	2220      	movs	r2, #32
 80115e6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80115ea:	687b      	ldr	r3, [r7, #4]
 80115ec:	2200      	movs	r2, #0
 80115ee:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 80115f2:	2300      	movs	r3, #0
}
 80115f4:	4618      	mov	r0, r3
 80115f6:	3714      	adds	r7, #20
 80115f8:	46bd      	mov	sp, r7
 80115fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80115fe:	4770      	bx	lr

08011600 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8011600:	b580      	push	{r7, lr}
 8011602:	b084      	sub	sp, #16
 8011604:	af00      	add	r7, sp, #0
 8011606:	6078      	str	r0, [r7, #4]
 8011608:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 801160a:	687b      	ldr	r3, [r7, #4]
 801160c:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8011610:	2b01      	cmp	r3, #1
 8011612:	d101      	bne.n	8011618 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8011614:	2302      	movs	r3, #2
 8011616:	e02d      	b.n	8011674 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8011618:	687b      	ldr	r3, [r7, #4]
 801161a:	2201      	movs	r2, #1
 801161c:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 8011620:	687b      	ldr	r3, [r7, #4]
 8011622:	2224      	movs	r2, #36	; 0x24
 8011624:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8011628:	687b      	ldr	r3, [r7, #4]
 801162a:	681b      	ldr	r3, [r3, #0]
 801162c:	681b      	ldr	r3, [r3, #0]
 801162e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8011630:	687b      	ldr	r3, [r7, #4]
 8011632:	681b      	ldr	r3, [r3, #0]
 8011634:	681a      	ldr	r2, [r3, #0]
 8011636:	687b      	ldr	r3, [r7, #4]
 8011638:	681b      	ldr	r3, [r3, #0]
 801163a:	f022 0201 	bic.w	r2, r2, #1
 801163e:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8011640:	687b      	ldr	r3, [r7, #4]
 8011642:	681b      	ldr	r3, [r3, #0]
 8011644:	689b      	ldr	r3, [r3, #8]
 8011646:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 801164a:	687b      	ldr	r3, [r7, #4]
 801164c:	681b      	ldr	r3, [r3, #0]
 801164e:	683a      	ldr	r2, [r7, #0]
 8011650:	430a      	orrs	r2, r1
 8011652:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8011654:	6878      	ldr	r0, [r7, #4]
 8011656:	f000 f84f 	bl	80116f8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 801165a:	687b      	ldr	r3, [r7, #4]
 801165c:	681b      	ldr	r3, [r3, #0]
 801165e:	68fa      	ldr	r2, [r7, #12]
 8011660:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8011662:	687b      	ldr	r3, [r7, #4]
 8011664:	2220      	movs	r2, #32
 8011666:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 801166a:	687b      	ldr	r3, [r7, #4]
 801166c:	2200      	movs	r2, #0
 801166e:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8011672:	2300      	movs	r3, #0
}
 8011674:	4618      	mov	r0, r3
 8011676:	3710      	adds	r7, #16
 8011678:	46bd      	mov	sp, r7
 801167a:	bd80      	pop	{r7, pc}

0801167c <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 801167c:	b580      	push	{r7, lr}
 801167e:	b084      	sub	sp, #16
 8011680:	af00      	add	r7, sp, #0
 8011682:	6078      	str	r0, [r7, #4]
 8011684:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8011686:	687b      	ldr	r3, [r7, #4]
 8011688:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 801168c:	2b01      	cmp	r3, #1
 801168e:	d101      	bne.n	8011694 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8011690:	2302      	movs	r3, #2
 8011692:	e02d      	b.n	80116f0 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8011694:	687b      	ldr	r3, [r7, #4]
 8011696:	2201      	movs	r2, #1
 8011698:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 801169c:	687b      	ldr	r3, [r7, #4]
 801169e:	2224      	movs	r2, #36	; 0x24
 80116a0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80116a4:	687b      	ldr	r3, [r7, #4]
 80116a6:	681b      	ldr	r3, [r3, #0]
 80116a8:	681b      	ldr	r3, [r3, #0]
 80116aa:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80116ac:	687b      	ldr	r3, [r7, #4]
 80116ae:	681b      	ldr	r3, [r3, #0]
 80116b0:	681a      	ldr	r2, [r3, #0]
 80116b2:	687b      	ldr	r3, [r7, #4]
 80116b4:	681b      	ldr	r3, [r3, #0]
 80116b6:	f022 0201 	bic.w	r2, r2, #1
 80116ba:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80116bc:	687b      	ldr	r3, [r7, #4]
 80116be:	681b      	ldr	r3, [r3, #0]
 80116c0:	689b      	ldr	r3, [r3, #8]
 80116c2:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 80116c6:	687b      	ldr	r3, [r7, #4]
 80116c8:	681b      	ldr	r3, [r3, #0]
 80116ca:	683a      	ldr	r2, [r7, #0]
 80116cc:	430a      	orrs	r2, r1
 80116ce:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80116d0:	6878      	ldr	r0, [r7, #4]
 80116d2:	f000 f811 	bl	80116f8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80116d6:	687b      	ldr	r3, [r7, #4]
 80116d8:	681b      	ldr	r3, [r3, #0]
 80116da:	68fa      	ldr	r2, [r7, #12]
 80116dc:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80116de:	687b      	ldr	r3, [r7, #4]
 80116e0:	2220      	movs	r2, #32
 80116e2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80116e6:	687b      	ldr	r3, [r7, #4]
 80116e8:	2200      	movs	r2, #0
 80116ea:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 80116ee:	2300      	movs	r3, #0
}
 80116f0:	4618      	mov	r0, r3
 80116f2:	3710      	adds	r7, #16
 80116f4:	46bd      	mov	sp, r7
 80116f6:	bd80      	pop	{r7, pc}

080116f8 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80116f8:	b480      	push	{r7}
 80116fa:	b089      	sub	sp, #36	; 0x24
 80116fc:	af00      	add	r7, sp, #0
 80116fe:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_depth;
  uint8_t tx_fifo_depth;
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
 8011700:	4a2f      	ldr	r2, [pc, #188]	; (80117c0 <UARTEx_SetNbDataToProcess+0xc8>)
 8011702:	f107 0314 	add.w	r3, r7, #20
 8011706:	e892 0003 	ldmia.w	r2, {r0, r1}
 801170a:	e883 0003 	stmia.w	r3, {r0, r1}
  uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};
 801170e:	4a2d      	ldr	r2, [pc, #180]	; (80117c4 <UARTEx_SetNbDataToProcess+0xcc>)
 8011710:	f107 030c 	add.w	r3, r7, #12
 8011714:	e892 0003 	ldmia.w	r2, {r0, r1}
 8011718:	e883 0003 	stmia.w	r3, {r0, r1}

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 801171c:	687b      	ldr	r3, [r7, #4]
 801171e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8011720:	2b00      	cmp	r3, #0
 8011722:	d108      	bne.n	8011736 <UARTEx_SetNbDataToProcess+0x3e>
  {
    huart->NbTxDataToProcess = 1U;
 8011724:	687b      	ldr	r3, [r7, #4]
 8011726:	2201      	movs	r2, #1
 8011728:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 801172c:	687b      	ldr	r3, [r7, #4]
 801172e:	2201      	movs	r2, #1
 8011730:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8011734:	e03d      	b.n	80117b2 <UARTEx_SetNbDataToProcess+0xba>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8011736:	2310      	movs	r3, #16
 8011738:	77fb      	strb	r3, [r7, #31]
    tx_fifo_depth = TX_FIFO_DEPTH;
 801173a:	2310      	movs	r3, #16
 801173c:	77bb      	strb	r3, [r7, #30]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 801173e:	687b      	ldr	r3, [r7, #4]
 8011740:	681b      	ldr	r3, [r3, #0]
 8011742:	689b      	ldr	r3, [r3, #8]
 8011744:	0e5b      	lsrs	r3, r3, #25
 8011746:	b2db      	uxtb	r3, r3
 8011748:	f003 0307 	and.w	r3, r3, #7
 801174c:	777b      	strb	r3, [r7, #29]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 801174e:	687b      	ldr	r3, [r7, #4]
 8011750:	681b      	ldr	r3, [r3, #0]
 8011752:	689b      	ldr	r3, [r3, #8]
 8011754:	0f5b      	lsrs	r3, r3, #29
 8011756:	b2db      	uxtb	r3, r3
 8011758:	f003 0307 	and.w	r3, r3, #7
 801175c:	773b      	strb	r3, [r7, #28]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
 801175e:	7fbb      	ldrb	r3, [r7, #30]
 8011760:	7f3a      	ldrb	r2, [r7, #28]
 8011762:	f107 0120 	add.w	r1, r7, #32
 8011766:	440a      	add	r2, r1
 8011768:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 801176c:	fb02 f303 	mul.w	r3, r2, r3
 8011770:	7f3a      	ldrb	r2, [r7, #28]
 8011772:	f107 0120 	add.w	r1, r7, #32
 8011776:	440a      	add	r2, r1
 8011778:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 801177c:	fb93 f3f2 	sdiv	r3, r3, r2
 8011780:	b29a      	uxth	r2, r3
 8011782:	687b      	ldr	r3, [r7, #4]
 8011784:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
 8011788:	7ffb      	ldrb	r3, [r7, #31]
 801178a:	7f7a      	ldrb	r2, [r7, #29]
 801178c:	f107 0120 	add.w	r1, r7, #32
 8011790:	440a      	add	r2, r1
 8011792:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 8011796:	fb02 f303 	mul.w	r3, r2, r3
 801179a:	7f7a      	ldrb	r2, [r7, #29]
 801179c:	f107 0120 	add.w	r1, r7, #32
 80117a0:	440a      	add	r2, r1
 80117a2:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 80117a6:	fb93 f3f2 	sdiv	r3, r3, r2
 80117aa:	b29a      	uxth	r2, r3
 80117ac:	687b      	ldr	r3, [r7, #4]
 80117ae:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 80117b2:	bf00      	nop
 80117b4:	3724      	adds	r7, #36	; 0x24
 80117b6:	46bd      	mov	sp, r7
 80117b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80117bc:	4770      	bx	lr
 80117be:	bf00      	nop
 80117c0:	0801c45c 	.word	0x0801c45c
 80117c4:	0801c464 	.word	0x0801c464

080117c8 <SDMMC_Init>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_Init(SDMMC_TypeDef *SDMMCx, SDMMC_InitTypeDef Init)
{
 80117c8:	b084      	sub	sp, #16
 80117ca:	b480      	push	{r7}
 80117cc:	b085      	sub	sp, #20
 80117ce:	af00      	add	r7, sp, #0
 80117d0:	6078      	str	r0, [r7, #4]
 80117d2:	f107 001c 	add.w	r0, r7, #28
 80117d6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 80117da:	2300      	movs	r3, #0
 80117dc:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(Init.ClockDiv));

  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 80117de:	69fa      	ldr	r2, [r7, #28]
             Init.ClockPowerSave      |\
 80117e0:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 80117e2:	431a      	orrs	r2, r3
             Init.BusWide             |\
 80117e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockPowerSave      |\
 80117e6:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 80117e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.BusWide             |\
 80117ea:	431a      	orrs	r2, r3
             Init.ClockDiv
 80117ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.HardwareFlowControl |\
 80117ee:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 80117f0:	68fa      	ldr	r2, [r7, #12]
 80117f2:	4313      	orrs	r3, r2
 80117f4:	60fb      	str	r3, [r7, #12]
             );

  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);
 80117f6:	687b      	ldr	r3, [r7, #4]
 80117f8:	685a      	ldr	r2, [r3, #4]
 80117fa:	4b07      	ldr	r3, [pc, #28]	; (8011818 <SDMMC_Init+0x50>)
 80117fc:	4013      	ands	r3, r2
 80117fe:	68fa      	ldr	r2, [r7, #12]
 8011800:	431a      	orrs	r2, r3
 8011802:	687b      	ldr	r3, [r7, #4]
 8011804:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 8011806:	2300      	movs	r3, #0
}
 8011808:	4618      	mov	r0, r3
 801180a:	3714      	adds	r7, #20
 801180c:	46bd      	mov	sp, r7
 801180e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011812:	b004      	add	sp, #16
 8011814:	4770      	bx	lr
 8011816:	bf00      	nop
 8011818:	ffc02c00 	.word	0xffc02c00

0801181c <SDMMC_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling)
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_ReadFIFO(SDMMC_TypeDef *SDMMCx)
{
 801181c:	b480      	push	{r7}
 801181e:	b083      	sub	sp, #12
 8011820:	af00      	add	r7, sp, #0
 8011822:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */
  return (SDMMCx->FIFO);
 8011824:	687b      	ldr	r3, [r7, #4]
 8011826:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 801182a:	4618      	mov	r0, r3
 801182c:	370c      	adds	r7, #12
 801182e:	46bd      	mov	sp, r7
 8011830:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011834:	4770      	bx	lr

08011836 <SDMMC_WriteFIFO>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_WriteFIFO(SDMMC_TypeDef *SDMMCx, uint32_t *pWriteData)
{
 8011836:	b480      	push	{r7}
 8011838:	b083      	sub	sp, #12
 801183a:	af00      	add	r7, sp, #0
 801183c:	6078      	str	r0, [r7, #4]
 801183e:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */
  SDMMCx->FIFO = *pWriteData;
 8011840:	683b      	ldr	r3, [r7, #0]
 8011842:	681a      	ldr	r2, [r3, #0]
 8011844:	687b      	ldr	r3, [r7, #4]
 8011846:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 801184a:	2300      	movs	r3, #0
}
 801184c:	4618      	mov	r0, r3
 801184e:	370c      	adds	r7, #12
 8011850:	46bd      	mov	sp, r7
 8011852:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011856:	4770      	bx	lr

08011858 <SDMMC_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_PowerState_ON(SDMMC_TypeDef *SDMMCx)
{
 8011858:	b480      	push	{r7}
 801185a:	b083      	sub	sp, #12
 801185c:	af00      	add	r7, sp, #0
 801185e:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */
  SDMMCx->POWER |= SDMMC_POWER_PWRCTRL;
 8011860:	687b      	ldr	r3, [r7, #4]
 8011862:	681b      	ldr	r3, [r3, #0]
 8011864:	f043 0203 	orr.w	r2, r3, #3
 8011868:	687b      	ldr	r3, [r7, #4]
 801186a:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 801186c:	2300      	movs	r3, #0
}
 801186e:	4618      	mov	r0, r3
 8011870:	370c      	adds	r7, #12
 8011872:	46bd      	mov	sp, r7
 8011874:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011878:	4770      	bx	lr

0801187a <SDMMC_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON
  */
uint32_t SDMMC_GetPowerState(SDMMC_TypeDef *SDMMCx)
{
 801187a:	b480      	push	{r7}
 801187c:	b083      	sub	sp, #12
 801187e:	af00      	add	r7, sp, #0
 8011880:	6078      	str	r0, [r7, #4]
  return (SDMMCx->POWER & SDMMC_POWER_PWRCTRL);
 8011882:	687b      	ldr	r3, [r7, #4]
 8011884:	681b      	ldr	r3, [r3, #0]
 8011886:	f003 0303 	and.w	r3, r3, #3
}
 801188a:	4618      	mov	r0, r3
 801188c:	370c      	adds	r7, #12
 801188e:	46bd      	mov	sp, r7
 8011890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011894:	4770      	bx	lr
	...

08011898 <SDMMC_SendCommand>:
  * @param  Command: pointer to a SDMMC_CmdInitTypeDef structure that contains
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_SendCommand(SDMMC_TypeDef *SDMMCx, SDMMC_CmdInitTypeDef *Command)
{
 8011898:	b480      	push	{r7}
 801189a:	b085      	sub	sp, #20
 801189c:	af00      	add	r7, sp, #0
 801189e:	6078      	str	r0, [r7, #4]
 80118a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 80118a2:	2300      	movs	r3, #0
 80118a4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_RESPONSE(Command->Response));
  assert_param(IS_SDMMC_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDMMC_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDMMCx->ARG = Command->Argument;
 80118a6:	683b      	ldr	r3, [r7, #0]
 80118a8:	681a      	ldr	r2, [r3, #0]
 80118aa:	687b      	ldr	r3, [r7, #4]
 80118ac:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 80118ae:	683b      	ldr	r3, [r7, #0]
 80118b0:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 80118b2:	683b      	ldr	r3, [r7, #0]
 80118b4:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 80118b6:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 80118b8:	683b      	ldr	r3, [r7, #0]
 80118ba:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 80118bc:	431a      	orrs	r2, r3
                       Command->CPSM);
 80118be:	683b      	ldr	r3, [r7, #0]
 80118c0:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 80118c2:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 80118c4:	68fa      	ldr	r2, [r7, #12]
 80118c6:	4313      	orrs	r3, r2
 80118c8:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC CMD register */
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 80118ca:	687b      	ldr	r3, [r7, #4]
 80118cc:	68da      	ldr	r2, [r3, #12]
 80118ce:	4b06      	ldr	r3, [pc, #24]	; (80118e8 <SDMMC_SendCommand+0x50>)
 80118d0:	4013      	ands	r3, r2
 80118d2:	68fa      	ldr	r2, [r7, #12]
 80118d4:	431a      	orrs	r2, r3
 80118d6:	687b      	ldr	r3, [r7, #4]
 80118d8:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80118da:	2300      	movs	r3, #0
}
 80118dc:	4618      	mov	r0, r3
 80118de:	3714      	adds	r7, #20
 80118e0:	46bd      	mov	sp, r7
 80118e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80118e6:	4770      	bx	lr
 80118e8:	fffee0c0 	.word	0xfffee0c0

080118ec <SDMMC_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDMMC_GetCommandResponse(SDMMC_TypeDef *SDMMCx)
{
 80118ec:	b480      	push	{r7}
 80118ee:	b083      	sub	sp, #12
 80118f0:	af00      	add	r7, sp, #0
 80118f2:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDMMCx->RESPCMD);
 80118f4:	687b      	ldr	r3, [r7, #4]
 80118f6:	691b      	ldr	r3, [r3, #16]
 80118f8:	b2db      	uxtb	r3, r3
}
 80118fa:	4618      	mov	r0, r3
 80118fc:	370c      	adds	r7, #12
 80118fe:	46bd      	mov	sp, r7
 8011900:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011904:	4770      	bx	lr

08011906 <SDMMC_GetResponse>:
  *            @arg SDMMC_RESP3: Response Register 3
  *            @arg SDMMC_RESP4: Response Register 4
  * @retval The Corresponding response register value
  */
uint32_t SDMMC_GetResponse(SDMMC_TypeDef *SDMMCx, uint32_t Response)
{
 8011906:	b480      	push	{r7}
 8011908:	b085      	sub	sp, #20
 801190a:	af00      	add	r7, sp, #0
 801190c:	6078      	str	r0, [r7, #4]
 801190e:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDMMC_RESP(Response));

  /* Get the response */
  tmp = (uint32_t)(&(SDMMCx->RESP1)) + Response;
 8011910:	687b      	ldr	r3, [r7, #4]
 8011912:	3314      	adds	r3, #20
 8011914:	461a      	mov	r2, r3
 8011916:	683b      	ldr	r3, [r7, #0]
 8011918:	4413      	add	r3, r2
 801191a:	60fb      	str	r3, [r7, #12]

  return (*(__IO uint32_t *) tmp);
 801191c:	68fb      	ldr	r3, [r7, #12]
 801191e:	681b      	ldr	r3, [r3, #0]
}
 8011920:	4618      	mov	r0, r3
 8011922:	3714      	adds	r7, #20
 8011924:	46bd      	mov	sp, r7
 8011926:	f85d 7b04 	ldr.w	r7, [sp], #4
 801192a:	4770      	bx	lr

0801192c <SDMMC_ConfigData>:
  * @param  Data : pointer to a SDMMC_DataInitTypeDef structure
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_ConfigData(SDMMC_TypeDef *SDMMCx, SDMMC_DataInitTypeDef* Data)
{
 801192c:	b480      	push	{r7}
 801192e:	b085      	sub	sp, #20
 8011930:	af00      	add	r7, sp, #0
 8011932:	6078      	str	r0, [r7, #4]
 8011934:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8011936:	2300      	movs	r3, #0
 8011938:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDMMC_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDMMC_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDMMCx->DTIMER = Data->DataTimeOut;
 801193a:	683b      	ldr	r3, [r7, #0]
 801193c:	681a      	ldr	r2, [r3, #0]
 801193e:	687b      	ldr	r3, [r7, #4]
 8011940:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDMMCx->DLEN = Data->DataLength;
 8011942:	683b      	ldr	r3, [r7, #0]
 8011944:	685a      	ldr	r2, [r3, #4]
 8011946:	687b      	ldr	r3, [r7, #4]
 8011948:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 801194a:	683b      	ldr	r3, [r7, #0]
 801194c:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 801194e:	683b      	ldr	r3, [r7, #0]
 8011950:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8011952:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 8011954:	683b      	ldr	r3, [r7, #0]
 8011956:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 8011958:	431a      	orrs	r2, r3
                       Data->DPSM);
 801195a:	683b      	ldr	r3, [r7, #0]
 801195c:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 801195e:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8011960:	68fa      	ldr	r2, [r7, #12]
 8011962:	4313      	orrs	r3, r2
 8011964:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 8011966:	687b      	ldr	r3, [r7, #4]
 8011968:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801196a:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 801196e:	68fb      	ldr	r3, [r7, #12]
 8011970:	431a      	orrs	r2, r3
 8011972:	687b      	ldr	r3, [r7, #4]
 8011974:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 8011976:	2300      	movs	r3, #0

}
 8011978:	4618      	mov	r0, r3
 801197a:	3714      	adds	r7, #20
 801197c:	46bd      	mov	sp, r7
 801197e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011982:	4770      	bx	lr

08011984 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Lenght command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDMMC_TypeDef *SDMMCx, uint32_t BlockSize)
{
 8011984:	b580      	push	{r7, lr}
 8011986:	b088      	sub	sp, #32
 8011988:	af00      	add	r7, sp, #0
 801198a:	6078      	str	r0, [r7, #4]
 801198c:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 801198e:	683b      	ldr	r3, [r7, #0]
 8011990:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 8011992:	2310      	movs	r3, #16
 8011994:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8011996:	f44f 7380 	mov.w	r3, #256	; 0x100
 801199a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 801199c:	2300      	movs	r3, #0
 801199e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80119a0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80119a4:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80119a6:	f107 0308 	add.w	r3, r7, #8
 80119aa:	4619      	mov	r1, r3
 80119ac:	6878      	ldr	r0, [r7, #4]
 80119ae:	f7ff ff73 	bl	8011898 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SET_BLOCKLEN, SDMMC_CMDTIMEOUT);
 80119b2:	f241 3288 	movw	r2, #5000	; 0x1388
 80119b6:	2110      	movs	r1, #16
 80119b8:	6878      	ldr	r0, [r7, #4]
 80119ba:	f000 faaf 	bl	8011f1c <SDMMC_GetCmdResp1>
 80119be:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80119c0:	69fb      	ldr	r3, [r7, #28]
}
 80119c2:	4618      	mov	r0, r3
 80119c4:	3720      	adds	r7, #32
 80119c6:	46bd      	mov	sp, r7
 80119c8:	bd80      	pop	{r7, pc}

080119ca <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 80119ca:	b580      	push	{r7, lr}
 80119cc:	b088      	sub	sp, #32
 80119ce:	af00      	add	r7, sp, #0
 80119d0:	6078      	str	r0, [r7, #4]
 80119d2:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 80119d4:	683b      	ldr	r3, [r7, #0]
 80119d6:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 80119d8:	2311      	movs	r3, #17
 80119da:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80119dc:	f44f 7380 	mov.w	r3, #256	; 0x100
 80119e0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80119e2:	2300      	movs	r3, #0
 80119e4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80119e6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80119ea:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80119ec:	f107 0308 	add.w	r3, r7, #8
 80119f0:	4619      	mov	r1, r3
 80119f2:	6878      	ldr	r0, [r7, #4]
 80119f4:	f7ff ff50 	bl	8011898 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 80119f8:	f241 3288 	movw	r2, #5000	; 0x1388
 80119fc:	2111      	movs	r1, #17
 80119fe:	6878      	ldr	r0, [r7, #4]
 8011a00:	f000 fa8c 	bl	8011f1c <SDMMC_GetCmdResp1>
 8011a04:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8011a06:	69fb      	ldr	r3, [r7, #28]
}
 8011a08:	4618      	mov	r0, r3
 8011a0a:	3720      	adds	r7, #32
 8011a0c:	46bd      	mov	sp, r7
 8011a0e:	bd80      	pop	{r7, pc}

08011a10 <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 8011a10:	b580      	push	{r7, lr}
 8011a12:	b088      	sub	sp, #32
 8011a14:	af00      	add	r7, sp, #0
 8011a16:	6078      	str	r0, [r7, #4]
 8011a18:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8011a1a:	683b      	ldr	r3, [r7, #0]
 8011a1c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 8011a1e:	2312      	movs	r3, #18
 8011a20:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8011a22:	f44f 7380 	mov.w	r3, #256	; 0x100
 8011a26:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8011a28:	2300      	movs	r3, #0
 8011a2a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8011a2c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8011a30:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8011a32:	f107 0308 	add.w	r3, r7, #8
 8011a36:	4619      	mov	r1, r3
 8011a38:	6878      	ldr	r0, [r7, #4]
 8011a3a:	f7ff ff2d 	bl	8011898 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 8011a3e:	f241 3288 	movw	r2, #5000	; 0x1388
 8011a42:	2112      	movs	r1, #18
 8011a44:	6878      	ldr	r0, [r7, #4]
 8011a46:	f000 fa69 	bl	8011f1c <SDMMC_GetCmdResp1>
 8011a4a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8011a4c:	69fb      	ldr	r3, [r7, #28]
}
 8011a4e:	4618      	mov	r0, r3
 8011a50:	3720      	adds	r7, #32
 8011a52:	46bd      	mov	sp, r7
 8011a54:	bd80      	pop	{r7, pc}

08011a56 <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 8011a56:	b580      	push	{r7, lr}
 8011a58:	b088      	sub	sp, #32
 8011a5a:	af00      	add	r7, sp, #0
 8011a5c:	6078      	str	r0, [r7, #4]
 8011a5e:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8011a60:	683b      	ldr	r3, [r7, #0]
 8011a62:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 8011a64:	2318      	movs	r3, #24
 8011a66:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8011a68:	f44f 7380 	mov.w	r3, #256	; 0x100
 8011a6c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8011a6e:	2300      	movs	r3, #0
 8011a70:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8011a72:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8011a76:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8011a78:	f107 0308 	add.w	r3, r7, #8
 8011a7c:	4619      	mov	r1, r3
 8011a7e:	6878      	ldr	r0, [r7, #4]
 8011a80:	f7ff ff0a 	bl	8011898 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 8011a84:	f241 3288 	movw	r2, #5000	; 0x1388
 8011a88:	2118      	movs	r1, #24
 8011a8a:	6878      	ldr	r0, [r7, #4]
 8011a8c:	f000 fa46 	bl	8011f1c <SDMMC_GetCmdResp1>
 8011a90:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8011a92:	69fb      	ldr	r3, [r7, #28]
}
 8011a94:	4618      	mov	r0, r3
 8011a96:	3720      	adds	r7, #32
 8011a98:	46bd      	mov	sp, r7
 8011a9a:	bd80      	pop	{r7, pc}

08011a9c <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 8011a9c:	b580      	push	{r7, lr}
 8011a9e:	b088      	sub	sp, #32
 8011aa0:	af00      	add	r7, sp, #0
 8011aa2:	6078      	str	r0, [r7, #4]
 8011aa4:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8011aa6:	683b      	ldr	r3, [r7, #0]
 8011aa8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 8011aaa:	2319      	movs	r3, #25
 8011aac:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8011aae:	f44f 7380 	mov.w	r3, #256	; 0x100
 8011ab2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8011ab4:	2300      	movs	r3, #0
 8011ab6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8011ab8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8011abc:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8011abe:	f107 0308 	add.w	r3, r7, #8
 8011ac2:	4619      	mov	r1, r3
 8011ac4:	6878      	ldr	r0, [r7, #4]
 8011ac6:	f7ff fee7 	bl	8011898 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 8011aca:	f241 3288 	movw	r2, #5000	; 0x1388
 8011ace:	2119      	movs	r1, #25
 8011ad0:	6878      	ldr	r0, [r7, #4]
 8011ad2:	f000 fa23 	bl	8011f1c <SDMMC_GetCmdResp1>
 8011ad6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8011ad8:	69fb      	ldr	r3, [r7, #28]
}
 8011ada:	4618      	mov	r0, r3
 8011adc:	3720      	adds	r7, #32
 8011ade:	46bd      	mov	sp, r7
 8011ae0:	bd80      	pop	{r7, pc}
	...

08011ae4 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDMMC_TypeDef *SDMMCx)
{
 8011ae4:	b580      	push	{r7, lr}
 8011ae6:	b088      	sub	sp, #32
 8011ae8:	af00      	add	r7, sp, #0
 8011aea:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 8011aec:	2300      	movs	r3, #0
 8011aee:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 8011af0:	230c      	movs	r3, #12
 8011af2:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8011af4:	f44f 7380 	mov.w	r3, #256	; 0x100
 8011af8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8011afa:	2300      	movs	r3, #0
 8011afc:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8011afe:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8011b02:	61bb      	str	r3, [r7, #24]

  __SDMMC_CMDSTOP_ENABLE(SDMMCx);
 8011b04:	687b      	ldr	r3, [r7, #4]
 8011b06:	68db      	ldr	r3, [r3, #12]
 8011b08:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8011b0c:	687b      	ldr	r3, [r7, #4]
 8011b0e:	60da      	str	r2, [r3, #12]
  __SDMMC_CMDTRANS_DISABLE(SDMMCx);
 8011b10:	687b      	ldr	r3, [r7, #4]
 8011b12:	68db      	ldr	r3, [r3, #12]
 8011b14:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8011b18:	687b      	ldr	r3, [r7, #4]
 8011b1a:	60da      	str	r2, [r3, #12]

  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8011b1c:	f107 0308 	add.w	r3, r7, #8
 8011b20:	4619      	mov	r1, r3
 8011b22:	6878      	ldr	r0, [r7, #4]
 8011b24:	f7ff feb8 	bl	8011898 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_STOP_TRANSMISSION, SDMMC_STOPTRANSFERTIMEOUT);
 8011b28:	4a0b      	ldr	r2, [pc, #44]	; (8011b58 <SDMMC_CmdStopTransfer+0x74>)
 8011b2a:	210c      	movs	r1, #12
 8011b2c:	6878      	ldr	r0, [r7, #4]
 8011b2e:	f000 f9f5 	bl	8011f1c <SDMMC_GetCmdResp1>
 8011b32:	61f8      	str	r0, [r7, #28]

  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 8011b34:	687b      	ldr	r3, [r7, #4]
 8011b36:	68db      	ldr	r3, [r3, #12]
 8011b38:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8011b3c:	687b      	ldr	r3, [r7, #4]
 8011b3e:	60da      	str	r2, [r3, #12]

  /* Ignore Address Out Of Range Error, Not relevant at end of memory */
  if (errorstate == SDMMC_ERROR_ADDR_OUT_OF_RANGE)
 8011b40:	69fb      	ldr	r3, [r7, #28]
 8011b42:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8011b46:	d101      	bne.n	8011b4c <SDMMC_CmdStopTransfer+0x68>
  {
    errorstate = SDMMC_ERROR_NONE;
 8011b48:	2300      	movs	r3, #0
 8011b4a:	61fb      	str	r3, [r7, #28]
  }

  return errorstate;
 8011b4c:	69fb      	ldr	r3, [r7, #28]
}
 8011b4e:	4618      	mov	r0, r3
 8011b50:	3720      	adds	r7, #32
 8011b52:	46bd      	mov	sp, r7
 8011b54:	bd80      	pop	{r7, pc}
 8011b56:	bf00      	nop
 8011b58:	05f5e100 	.word	0x05f5e100

08011b5c <SDMMC_CmdSelDesel>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  addr: Address of the card to be selected
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDMMC_TypeDef *SDMMCx, uint64_t Addr)
{
 8011b5c:	b580      	push	{r7, lr}
 8011b5e:	b08a      	sub	sp, #40	; 0x28
 8011b60:	af00      	add	r7, sp, #0
 8011b62:	60f8      	str	r0, [r7, #12]
 8011b64:	e9c7 2300 	strd	r2, r3, [r7]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 8011b68:	683b      	ldr	r3, [r7, #0]
 8011b6a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 8011b6c:	2307      	movs	r3, #7
 8011b6e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8011b70:	f44f 7380 	mov.w	r3, #256	; 0x100
 8011b74:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8011b76:	2300      	movs	r3, #0
 8011b78:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8011b7a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8011b7e:	623b      	str	r3, [r7, #32]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8011b80:	f107 0310 	add.w	r3, r7, #16
 8011b84:	4619      	mov	r1, r3
 8011b86:	68f8      	ldr	r0, [r7, #12]
 8011b88:	f7ff fe86 	bl	8011898 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEL_DESEL_CARD, SDMMC_CMDTIMEOUT);
 8011b8c:	f241 3288 	movw	r2, #5000	; 0x1388
 8011b90:	2107      	movs	r1, #7
 8011b92:	68f8      	ldr	r0, [r7, #12]
 8011b94:	f000 f9c2 	bl	8011f1c <SDMMC_GetCmdResp1>
 8011b98:	6278      	str	r0, [r7, #36]	; 0x24

  return errorstate;
 8011b9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8011b9c:	4618      	mov	r0, r3
 8011b9e:	3728      	adds	r7, #40	; 0x28
 8011ba0:	46bd      	mov	sp, r7
 8011ba2:	bd80      	pop	{r7, pc}

08011ba4 <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDMMC_TypeDef *SDMMCx)
{
 8011ba4:	b580      	push	{r7, lr}
 8011ba6:	b088      	sub	sp, #32
 8011ba8:	af00      	add	r7, sp, #0
 8011baa:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0U;
 8011bac:	2300      	movs	r3, #0
 8011bae:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 8011bb0:	2300      	movs	r3, #0
 8011bb2:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_NO;
 8011bb4:	2300      	movs	r3, #0
 8011bb6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8011bb8:	2300      	movs	r3, #0
 8011bba:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8011bbc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8011bc0:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8011bc2:	f107 0308 	add.w	r3, r7, #8
 8011bc6:	4619      	mov	r1, r3
 8011bc8:	6878      	ldr	r0, [r7, #4]
 8011bca:	f7ff fe65 	bl	8011898 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDMMCx);
 8011bce:	6878      	ldr	r0, [r7, #4]
 8011bd0:	f000 f976 	bl	8011ec0 <SDMMC_GetCmdError>
 8011bd4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8011bd6:	69fb      	ldr	r3, [r7, #28]
}
 8011bd8:	4618      	mov	r0, r3
 8011bda:	3720      	adds	r7, #32
 8011bdc:	46bd      	mov	sp, r7
 8011bde:	bd80      	pop	{r7, pc}

08011be0 <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDMMC_TypeDef *SDMMCx)
{
 8011be0:	b580      	push	{r7, lr}
 8011be2:	b088      	sub	sp, #32
 8011be4:	af00      	add	r7, sp, #0
 8011be6:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 8011be8:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 8011bec:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 8011bee:	2308      	movs	r3, #8
 8011bf0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8011bf2:	f44f 7380 	mov.w	r3, #256	; 0x100
 8011bf6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8011bf8:	2300      	movs	r3, #0
 8011bfa:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8011bfc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8011c00:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8011c02:	f107 0308 	add.w	r3, r7, #8
 8011c06:	4619      	mov	r1, r3
 8011c08:	6878      	ldr	r0, [r7, #4]
 8011c0a:	f7ff fe45 	bl	8011898 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDMMCx);
 8011c0e:	6878      	ldr	r0, [r7, #4]
 8011c10:	f000 fb78 	bl	8012304 <SDMMC_GetCmdResp7>
 8011c14:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8011c16:	69fb      	ldr	r3, [r7, #28]
}
 8011c18:	4618      	mov	r0, r3
 8011c1a:	3720      	adds	r7, #32
 8011c1c:	46bd      	mov	sp, r7
 8011c1e:	bd80      	pop	{r7, pc}

08011c20 <SDMMC_CmdAppCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8011c20:	b580      	push	{r7, lr}
 8011c22:	b088      	sub	sp, #32
 8011c24:	af00      	add	r7, sp, #0
 8011c26:	6078      	str	r0, [r7, #4]
 8011c28:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 8011c2a:	683b      	ldr	r3, [r7, #0]
 8011c2c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 8011c2e:	2337      	movs	r3, #55	; 0x37
 8011c30:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8011c32:	f44f 7380 	mov.w	r3, #256	; 0x100
 8011c36:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8011c38:	2300      	movs	r3, #0
 8011c3a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8011c3c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8011c40:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8011c42:	f107 0308 	add.w	r3, r7, #8
 8011c46:	4619      	mov	r1, r3
 8011c48:	6878      	ldr	r0, [r7, #4]
 8011c4a:	f7ff fe25 	bl	8011898 <SDMMC_SendCommand>

  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_CMD, SDMMC_CMDTIMEOUT);
 8011c4e:	f241 3288 	movw	r2, #5000	; 0x1388
 8011c52:	2137      	movs	r1, #55	; 0x37
 8011c54:	6878      	ldr	r0, [r7, #4]
 8011c56:	f000 f961 	bl	8011f1c <SDMMC_GetCmdResp1>
 8011c5a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8011c5c:	69fb      	ldr	r3, [r7, #28]
}
 8011c5e:	4618      	mov	r0, r3
 8011c60:	3720      	adds	r7, #32
 8011c62:	46bd      	mov	sp, r7
 8011c64:	bd80      	pop	{r7, pc}

08011c66 <SDMMC_CmdAppOperCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8011c66:	b580      	push	{r7, lr}
 8011c68:	b088      	sub	sp, #32
 8011c6a:	af00      	add	r7, sp, #0
 8011c6c:	6078      	str	r0, [r7, #4]
 8011c6e:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = Argument;
 8011c70:	683b      	ldr	r3, [r7, #0]
 8011c72:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 8011c74:	2329      	movs	r3, #41	; 0x29
 8011c76:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8011c78:	f44f 7380 	mov.w	r3, #256	; 0x100
 8011c7c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8011c7e:	2300      	movs	r3, #0
 8011c80:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8011c82:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8011c86:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8011c88:	f107 0308 	add.w	r3, r7, #8
 8011c8c:	4619      	mov	r1, r3
 8011c8e:	6878      	ldr	r0, [r7, #4]
 8011c90:	f7ff fe02 	bl	8011898 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDMMCx);
 8011c94:	6878      	ldr	r0, [r7, #4]
 8011c96:	f000 fa7d 	bl	8012194 <SDMMC_GetCmdResp3>
 8011c9a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8011c9c:	69fb      	ldr	r3, [r7, #28]
}
 8011c9e:	4618      	mov	r0, r3
 8011ca0:	3720      	adds	r7, #32
 8011ca2:	46bd      	mov	sp, r7
 8011ca4:	bd80      	pop	{r7, pc}

08011ca6 <SDMMC_CmdBusWidth>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  BusWidth: BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDMMC_TypeDef *SDMMCx, uint32_t BusWidth)
{
 8011ca6:	b580      	push	{r7, lr}
 8011ca8:	b088      	sub	sp, #32
 8011caa:	af00      	add	r7, sp, #0
 8011cac:	6078      	str	r0, [r7, #4]
 8011cae:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 8011cb0:	683b      	ldr	r3, [r7, #0]
 8011cb2:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 8011cb4:	2306      	movs	r3, #6
 8011cb6:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8011cb8:	f44f 7380 	mov.w	r3, #256	; 0x100
 8011cbc:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8011cbe:	2300      	movs	r3, #0
 8011cc0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8011cc2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8011cc6:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8011cc8:	f107 0308 	add.w	r3, r7, #8
 8011ccc:	4619      	mov	r1, r3
 8011cce:	6878      	ldr	r0, [r7, #4]
 8011cd0:	f7ff fde2 	bl	8011898 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDMMC_CMDTIMEOUT);
 8011cd4:	f241 3288 	movw	r2, #5000	; 0x1388
 8011cd8:	2106      	movs	r1, #6
 8011cda:	6878      	ldr	r0, [r7, #4]
 8011cdc:	f000 f91e 	bl	8011f1c <SDMMC_GetCmdResp1>
 8011ce0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8011ce2:	69fb      	ldr	r3, [r7, #28]
}
 8011ce4:	4618      	mov	r0, r3
 8011ce6:	3720      	adds	r7, #32
 8011ce8:	46bd      	mov	sp, r7
 8011cea:	bd80      	pop	{r7, pc}

08011cec <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDMMC_TypeDef *SDMMCx)
{
 8011cec:	b580      	push	{r7, lr}
 8011cee:	b088      	sub	sp, #32
 8011cf0:	af00      	add	r7, sp, #0
 8011cf2:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 8011cf4:	2300      	movs	r3, #0
 8011cf6:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 8011cf8:	2333      	movs	r3, #51	; 0x33
 8011cfa:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8011cfc:	f44f 7380 	mov.w	r3, #256	; 0x100
 8011d00:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8011d02:	2300      	movs	r3, #0
 8011d04:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8011d06:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8011d0a:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8011d0c:	f107 0308 	add.w	r3, r7, #8
 8011d10:	4619      	mov	r1, r3
 8011d12:	6878      	ldr	r0, [r7, #4]
 8011d14:	f7ff fdc0 	bl	8011898 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_SEND_SCR, SDMMC_CMDTIMEOUT);
 8011d18:	f241 3288 	movw	r2, #5000	; 0x1388
 8011d1c:	2133      	movs	r1, #51	; 0x33
 8011d1e:	6878      	ldr	r0, [r7, #4]
 8011d20:	f000 f8fc 	bl	8011f1c <SDMMC_GetCmdResp1>
 8011d24:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8011d26:	69fb      	ldr	r3, [r7, #28]
}
 8011d28:	4618      	mov	r0, r3
 8011d2a:	3720      	adds	r7, #32
 8011d2c:	46bd      	mov	sp, r7
 8011d2e:	bd80      	pop	{r7, pc}

08011d30 <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDMMC_TypeDef *SDMMCx)
{
 8011d30:	b580      	push	{r7, lr}
 8011d32:	b088      	sub	sp, #32
 8011d34:	af00      	add	r7, sp, #0
 8011d36:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 8011d38:	2300      	movs	r3, #0
 8011d3a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 8011d3c:	2302      	movs	r3, #2
 8011d3e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 8011d40:	f44f 7340 	mov.w	r3, #768	; 0x300
 8011d44:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8011d46:	2300      	movs	r3, #0
 8011d48:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8011d4a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8011d4e:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8011d50:	f107 0308 	add.w	r3, r7, #8
 8011d54:	4619      	mov	r1, r3
 8011d56:	6878      	ldr	r0, [r7, #4]
 8011d58:	f7ff fd9e 	bl	8011898 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 8011d5c:	6878      	ldr	r0, [r7, #4]
 8011d5e:	f000 f9cf 	bl	8012100 <SDMMC_GetCmdResp2>
 8011d62:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8011d64:	69fb      	ldr	r3, [r7, #28]
}
 8011d66:	4618      	mov	r0, r3
 8011d68:	3720      	adds	r7, #32
 8011d6a:	46bd      	mov	sp, r7
 8011d6c:	bd80      	pop	{r7, pc}

08011d6e <SDMMC_CmdSendCSD>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8011d6e:	b580      	push	{r7, lr}
 8011d70:	b088      	sub	sp, #32
 8011d72:	af00      	add	r7, sp, #0
 8011d74:	6078      	str	r0, [r7, #4]
 8011d76:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 8011d78:	683b      	ldr	r3, [r7, #0]
 8011d7a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 8011d7c:	2309      	movs	r3, #9
 8011d7e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 8011d80:	f44f 7340 	mov.w	r3, #768	; 0x300
 8011d84:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8011d86:	2300      	movs	r3, #0
 8011d88:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8011d8a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8011d8e:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8011d90:	f107 0308 	add.w	r3, r7, #8
 8011d94:	4619      	mov	r1, r3
 8011d96:	6878      	ldr	r0, [r7, #4]
 8011d98:	f7ff fd7e 	bl	8011898 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 8011d9c:	6878      	ldr	r0, [r7, #4]
 8011d9e:	f000 f9af 	bl	8012100 <SDMMC_GetCmdResp2>
 8011da2:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8011da4:	69fb      	ldr	r3, [r7, #28]
}
 8011da6:	4618      	mov	r0, r3
 8011da8:	3720      	adds	r7, #32
 8011daa:	46bd      	mov	sp, r7
 8011dac:	bd80      	pop	{r7, pc}

08011dae <SDMMC_CmdSetRelAdd>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  pRCA: Card RCA
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDMMC_TypeDef *SDMMCx, uint16_t *pRCA)
{
 8011dae:	b580      	push	{r7, lr}
 8011db0:	b088      	sub	sp, #32
 8011db2:	af00      	add	r7, sp, #0
 8011db4:	6078      	str	r0, [r7, #4]
 8011db6:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 8011db8:	2300      	movs	r3, #0
 8011dba:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 8011dbc:	2303      	movs	r3, #3
 8011dbe:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8011dc0:	f44f 7380 	mov.w	r3, #256	; 0x100
 8011dc4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8011dc6:	2300      	movs	r3, #0
 8011dc8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8011dca:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8011dce:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8011dd0:	f107 0308 	add.w	r3, r7, #8
 8011dd4:	4619      	mov	r1, r3
 8011dd6:	6878      	ldr	r0, [r7, #4]
 8011dd8:	f7ff fd5e 	bl	8011898 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDMMCx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 8011ddc:	683a      	ldr	r2, [r7, #0]
 8011dde:	2103      	movs	r1, #3
 8011de0:	6878      	ldr	r0, [r7, #4]
 8011de2:	f000 fa17 	bl	8012214 <SDMMC_GetCmdResp6>
 8011de6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8011de8:	69fb      	ldr	r3, [r7, #28]
}
 8011dea:	4618      	mov	r0, r3
 8011dec:	3720      	adds	r7, #32
 8011dee:	46bd      	mov	sp, r7
 8011df0:	bd80      	pop	{r7, pc}

08011df2 <SDMMC_CmdSendStatus>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8011df2:	b580      	push	{r7, lr}
 8011df4:	b088      	sub	sp, #32
 8011df6:	af00      	add	r7, sp, #0
 8011df8:	6078      	str	r0, [r7, #4]
 8011dfa:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = Argument;
 8011dfc:	683b      	ldr	r3, [r7, #0]
 8011dfe:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 8011e00:	230d      	movs	r3, #13
 8011e02:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8011e04:	f44f 7380 	mov.w	r3, #256	; 0x100
 8011e08:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8011e0a:	2300      	movs	r3, #0
 8011e0c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8011e0e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8011e12:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8011e14:	f107 0308 	add.w	r3, r7, #8
 8011e18:	4619      	mov	r1, r3
 8011e1a:	6878      	ldr	r0, [r7, #4]
 8011e1c:	f7ff fd3c 	bl	8011898 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEND_STATUS, SDMMC_CMDTIMEOUT);
 8011e20:	f241 3288 	movw	r2, #5000	; 0x1388
 8011e24:	210d      	movs	r1, #13
 8011e26:	6878      	ldr	r0, [r7, #4]
 8011e28:	f000 f878 	bl	8011f1c <SDMMC_GetCmdResp1>
 8011e2c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8011e2e:	69fb      	ldr	r3, [r7, #28]
}
 8011e30:	4618      	mov	r0, r3
 8011e32:	3720      	adds	r7, #32
 8011e34:	46bd      	mov	sp, r7
 8011e36:	bd80      	pop	{r7, pc}

08011e38 <SDMMC_CmdStatusRegister>:
  * @brief  Send the Status register command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdStatusRegister(SDMMC_TypeDef *SDMMCx)
{
 8011e38:	b580      	push	{r7, lr}
 8011e3a:	b088      	sub	sp, #32
 8011e3c:	af00      	add	r7, sp, #0
 8011e3e:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0U;
 8011e40:	2300      	movs	r3, #0
 8011e42:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_STATUS;
 8011e44:	230d      	movs	r3, #13
 8011e46:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8011e48:	f44f 7380 	mov.w	r3, #256	; 0x100
 8011e4c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8011e4e:	2300      	movs	r3, #0
 8011e50:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8011e52:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8011e56:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8011e58:	f107 0308 	add.w	r3, r7, #8
 8011e5c:	4619      	mov	r1, r3
 8011e5e:	6878      	ldr	r0, [r7, #4]
 8011e60:	f7ff fd1a 	bl	8011898 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_STATUS, SDMMC_CMDTIMEOUT);
 8011e64:	f241 3288 	movw	r2, #5000	; 0x1388
 8011e68:	210d      	movs	r1, #13
 8011e6a:	6878      	ldr	r0, [r7, #4]
 8011e6c:	f000 f856 	bl	8011f1c <SDMMC_GetCmdResp1>
 8011e70:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8011e72:	69fb      	ldr	r3, [r7, #28]
}
 8011e74:	4618      	mov	r0, r3
 8011e76:	3720      	adds	r7, #32
 8011e78:	46bd      	mov	sp, r7
 8011e7a:	bd80      	pop	{r7, pc}

08011e7c <SDMMC_CmdVoltageSwitch>:
  *         condition register (OCR)
  * @param  None
  * @retval HAL status
  */
uint32_t SDMMC_CmdVoltageSwitch(SDMMC_TypeDef *SDMMCx)
{
 8011e7c:	b580      	push	{r7, lr}
 8011e7e:	b088      	sub	sp, #32
 8011e80:	af00      	add	r7, sp, #0
 8011e82:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0x00000000;
 8011e84:	2300      	movs	r3, #0
 8011e86:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_VOLTAGE_SWITCH;
 8011e88:	230b      	movs	r3, #11
 8011e8a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8011e8c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8011e90:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8011e92:	2300      	movs	r3, #0
 8011e94:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8011e96:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8011e9a:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8011e9c:	f107 0308 	add.w	r3, r7, #8
 8011ea0:	4619      	mov	r1, r3
 8011ea2:	6878      	ldr	r0, [r7, #4]
 8011ea4:	f7ff fcf8 	bl	8011898 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_VOLTAGE_SWITCH, SDMMC_CMDTIMEOUT);
 8011ea8:	f241 3288 	movw	r2, #5000	; 0x1388
 8011eac:	210b      	movs	r1, #11
 8011eae:	6878      	ldr	r0, [r7, #4]
 8011eb0:	f000 f834 	bl	8011f1c <SDMMC_GetCmdResp1>
 8011eb4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8011eb6:	69fb      	ldr	r3, [r7, #28]
}
 8011eb8:	4618      	mov	r0, r3
 8011eba:	3720      	adds	r7, #32
 8011ebc:	46bd      	mov	sp, r7
 8011ebe:	bd80      	pop	{r7, pc}

08011ec0 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDMMC_TypeDef *SDMMCx)
{
 8011ec0:	b480      	push	{r7}
 8011ec2:	b085      	sub	sp, #20
 8011ec4:	af00      	add	r7, sp, #0
 8011ec6:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8011ec8:	4b11      	ldr	r3, [pc, #68]	; (8011f10 <SDMMC_GetCmdError+0x50>)
 8011eca:	681b      	ldr	r3, [r3, #0]
 8011ecc:	4a11      	ldr	r2, [pc, #68]	; (8011f14 <SDMMC_GetCmdError+0x54>)
 8011ece:	fba2 2303 	umull	r2, r3, r2, r3
 8011ed2:	0a5b      	lsrs	r3, r3, #9
 8011ed4:	f241 3288 	movw	r2, #5000	; 0x1388
 8011ed8:	fb02 f303 	mul.w	r3, r2, r3
 8011edc:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 8011ede:	68fb      	ldr	r3, [r7, #12]
 8011ee0:	1e5a      	subs	r2, r3, #1
 8011ee2:	60fa      	str	r2, [r7, #12]
 8011ee4:	2b00      	cmp	r3, #0
 8011ee6:	d102      	bne.n	8011eee <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8011ee8:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8011eec:	e009      	b.n	8011f02 <SDMMC_GetCmdError+0x42>
    }

  }while(!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDSENT));
 8011eee:	687b      	ldr	r3, [r7, #4]
 8011ef0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8011ef2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8011ef6:	2b00      	cmp	r3, #0
 8011ef8:	d0f1      	beq.n	8011ede <SDMMC_GetCmdError+0x1e>

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8011efa:	687b      	ldr	r3, [r7, #4]
 8011efc:	4a06      	ldr	r2, [pc, #24]	; (8011f18 <SDMMC_GetCmdError+0x58>)
 8011efe:	639a      	str	r2, [r3, #56]	; 0x38

  return SDMMC_ERROR_NONE;
 8011f00:	2300      	movs	r3, #0
}
 8011f02:	4618      	mov	r0, r3
 8011f04:	3714      	adds	r7, #20
 8011f06:	46bd      	mov	sp, r7
 8011f08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011f0c:	4770      	bx	lr
 8011f0e:	bf00      	nop
 8011f10:	24000010 	.word	0x24000010
 8011f14:	10624dd3 	.word	0x10624dd3
 8011f18:	002000c5 	.word	0x002000c5

08011f1c <SDMMC_GetCmdResp1>:
  * @param  hsd: SD handle
  * @param  SD_CMD: The sent command index
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp1(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint32_t Timeout)
{
 8011f1c:	b580      	push	{r7, lr}
 8011f1e:	b088      	sub	sp, #32
 8011f20:	af00      	add	r7, sp, #0
 8011f22:	60f8      	str	r0, [r7, #12]
 8011f24:	460b      	mov	r3, r1
 8011f26:	607a      	str	r2, [r7, #4]
 8011f28:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8011f2a:	4b70      	ldr	r3, [pc, #448]	; (80120ec <SDMMC_GetCmdResp1+0x1d0>)
 8011f2c:	681b      	ldr	r3, [r3, #0]
 8011f2e:	4a70      	ldr	r2, [pc, #448]	; (80120f0 <SDMMC_GetCmdResp1+0x1d4>)
 8011f30:	fba2 2303 	umull	r2, r3, r2, r3
 8011f34:	0a5a      	lsrs	r2, r3, #9
 8011f36:	687b      	ldr	r3, [r7, #4]
 8011f38:	fb02 f303 	mul.w	r3, r2, r3
 8011f3c:	61fb      	str	r3, [r7, #28]

  do
  {
    if (count-- == 0U)
 8011f3e:	69fb      	ldr	r3, [r7, #28]
 8011f40:	1e5a      	subs	r2, r3, #1
 8011f42:	61fa      	str	r2, [r7, #28]
 8011f44:	2b00      	cmp	r3, #0
 8011f46:	d102      	bne.n	8011f4e <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 8011f48:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8011f4c:	e0c9      	b.n	80120e2 <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDMMCx->STA;
 8011f4e:	68fb      	ldr	r3, [r7, #12]
 8011f50:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8011f52:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT | SDMMC_FLAG_BUSYD0END)) == 0U) ||
 8011f54:	69ba      	ldr	r2, [r7, #24]
 8011f56:	4b67      	ldr	r3, [pc, #412]	; (80120f4 <SDMMC_GetCmdResp1+0x1d8>)
 8011f58:	4013      	ands	r3, r2
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 8011f5a:	2b00      	cmp	r3, #0
 8011f5c:	d0ef      	beq.n	8011f3e <SDMMC_GetCmdResp1+0x22>
 8011f5e:	69bb      	ldr	r3, [r7, #24]
 8011f60:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT | SDMMC_FLAG_BUSYD0END)) == 0U) ||
 8011f64:	2b00      	cmp	r3, #0
 8011f66:	d1ea      	bne.n	8011f3e <SDMMC_GetCmdResp1+0x22>

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8011f68:	68fb      	ldr	r3, [r7, #12]
 8011f6a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8011f6c:	f003 0304 	and.w	r3, r3, #4
 8011f70:	2b00      	cmp	r3, #0
 8011f72:	d004      	beq.n	8011f7e <SDMMC_GetCmdResp1+0x62>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8011f74:	68fb      	ldr	r3, [r7, #12]
 8011f76:	2204      	movs	r2, #4
 8011f78:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8011f7a:	2304      	movs	r3, #4
 8011f7c:	e0b1      	b.n	80120e2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8011f7e:	68fb      	ldr	r3, [r7, #12]
 8011f80:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8011f82:	f003 0301 	and.w	r3, r3, #1
 8011f86:	2b00      	cmp	r3, #0
 8011f88:	d004      	beq.n	8011f94 <SDMMC_GetCmdResp1+0x78>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8011f8a:	68fb      	ldr	r3, [r7, #12]
 8011f8c:	2201      	movs	r2, #1
 8011f8e:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 8011f90:	2301      	movs	r3, #1
 8011f92:	e0a6      	b.n	80120e2 <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8011f94:	68fb      	ldr	r3, [r7, #12]
 8011f96:	4a58      	ldr	r2, [pc, #352]	; (80120f8 <SDMMC_GetCmdResp1+0x1dc>)
 8011f98:	639a      	str	r2, [r3, #56]	; 0x38

  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 8011f9a:	68f8      	ldr	r0, [r7, #12]
 8011f9c:	f7ff fca6 	bl	80118ec <SDMMC_GetCommandResponse>
 8011fa0:	4603      	mov	r3, r0
 8011fa2:	461a      	mov	r2, r3
 8011fa4:	7afb      	ldrb	r3, [r7, #11]
 8011fa6:	4293      	cmp	r3, r2
 8011fa8:	d001      	beq.n	8011fae <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8011faa:	2301      	movs	r3, #1
 8011fac:	e099      	b.n	80120e2 <SDMMC_GetCmdResp1+0x1c6>
  }

  /* We have received response, retrieve it for analysis  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 8011fae:	2100      	movs	r1, #0
 8011fb0:	68f8      	ldr	r0, [r7, #12]
 8011fb2:	f7ff fca8 	bl	8011906 <SDMMC_GetResponse>
 8011fb6:	6178      	str	r0, [r7, #20]

  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 8011fb8:	697a      	ldr	r2, [r7, #20]
 8011fba:	4b50      	ldr	r3, [pc, #320]	; (80120fc <SDMMC_GetCmdResp1+0x1e0>)
 8011fbc:	4013      	ands	r3, r2
 8011fbe:	2b00      	cmp	r3, #0
 8011fc0:	d101      	bne.n	8011fc6 <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 8011fc2:	2300      	movs	r3, #0
 8011fc4:	e08d      	b.n	80120e2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 8011fc6:	697b      	ldr	r3, [r7, #20]
 8011fc8:	2b00      	cmp	r3, #0
 8011fca:	da02      	bge.n	8011fd2 <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 8011fcc:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8011fd0:	e087      	b.n	80120e2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 8011fd2:	697b      	ldr	r3, [r7, #20]
 8011fd4:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8011fd8:	2b00      	cmp	r3, #0
 8011fda:	d001      	beq.n	8011fe0 <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 8011fdc:	2340      	movs	r3, #64	; 0x40
 8011fde:	e080      	b.n	80120e2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 8011fe0:	697b      	ldr	r3, [r7, #20]
 8011fe2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8011fe6:	2b00      	cmp	r3, #0
 8011fe8:	d001      	beq.n	8011fee <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 8011fea:	2380      	movs	r3, #128	; 0x80
 8011fec:	e079      	b.n	80120e2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 8011fee:	697b      	ldr	r3, [r7, #20]
 8011ff0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8011ff4:	2b00      	cmp	r3, #0
 8011ff6:	d002      	beq.n	8011ffe <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 8011ff8:	f44f 7380 	mov.w	r3, #256	; 0x100
 8011ffc:	e071      	b.n	80120e2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 8011ffe:	697b      	ldr	r3, [r7, #20]
 8012000:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8012004:	2b00      	cmp	r3, #0
 8012006:	d002      	beq.n	801200e <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 8012008:	f44f 7300 	mov.w	r3, #512	; 0x200
 801200c:	e069      	b.n	80120e2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 801200e:	697b      	ldr	r3, [r7, #20]
 8012010:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8012014:	2b00      	cmp	r3, #0
 8012016:	d002      	beq.n	801201e <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 8012018:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801201c:	e061      	b.n	80120e2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 801201e:	697b      	ldr	r3, [r7, #20]
 8012020:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8012024:	2b00      	cmp	r3, #0
 8012026:	d002      	beq.n	801202e <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 8012028:	f44f 6300 	mov.w	r3, #2048	; 0x800
 801202c:	e059      	b.n	80120e2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 801202e:	697b      	ldr	r3, [r7, #20]
 8012030:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8012034:	2b00      	cmp	r3, #0
 8012036:	d002      	beq.n	801203e <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8012038:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 801203c:	e051      	b.n	80120e2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 801203e:	697b      	ldr	r3, [r7, #20]
 8012040:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8012044:	2b00      	cmp	r3, #0
 8012046:	d002      	beq.n	801204e <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8012048:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 801204c:	e049      	b.n	80120e2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 801204e:	697b      	ldr	r3, [r7, #20]
 8012050:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8012054:	2b00      	cmp	r3, #0
 8012056:	d002      	beq.n	801205e <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 8012058:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 801205c:	e041      	b.n	80120e2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 801205e:	697b      	ldr	r3, [r7, #20]
 8012060:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8012064:	2b00      	cmp	r3, #0
 8012066:	d002      	beq.n	801206e <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 8012068:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 801206c:	e039      	b.n	80120e2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 801206e:	697b      	ldr	r3, [r7, #20]
 8012070:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8012074:	2b00      	cmp	r3, #0
 8012076:	d002      	beq.n	801207e <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 8012078:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 801207c:	e031      	b.n	80120e2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 801207e:	697b      	ldr	r3, [r7, #20]
 8012080:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8012084:	2b00      	cmp	r3, #0
 8012086:	d002      	beq.n	801208e <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 8012088:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 801208c:	e029      	b.n	80120e2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 801208e:	697b      	ldr	r3, [r7, #20]
 8012090:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8012094:	2b00      	cmp	r3, #0
 8012096:	d002      	beq.n	801209e <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 8012098:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 801209c:	e021      	b.n	80120e2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 801209e:	697b      	ldr	r3, [r7, #20]
 80120a0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80120a4:	2b00      	cmp	r3, #0
 80120a6:	d002      	beq.n	80120ae <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 80120a8:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80120ac:	e019      	b.n	80120e2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 80120ae:	697b      	ldr	r3, [r7, #20]
 80120b0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80120b4:	2b00      	cmp	r3, #0
 80120b6:	d002      	beq.n	80120be <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 80120b8:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80120bc:	e011      	b.n	80120e2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 80120be:	697b      	ldr	r3, [r7, #20]
 80120c0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80120c4:	2b00      	cmp	r3, #0
 80120c6:	d002      	beq.n	80120ce <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 80120c8:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80120cc:	e009      	b.n	80120e2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 80120ce:	697b      	ldr	r3, [r7, #20]
 80120d0:	f003 0308 	and.w	r3, r3, #8
 80120d4:	2b00      	cmp	r3, #0
 80120d6:	d002      	beq.n	80120de <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 80120d8:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 80120dc:	e001      	b.n	80120e2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 80120de:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 80120e2:	4618      	mov	r0, r3
 80120e4:	3720      	adds	r7, #32
 80120e6:	46bd      	mov	sp, r7
 80120e8:	bd80      	pop	{r7, pc}
 80120ea:	bf00      	nop
 80120ec:	24000010 	.word	0x24000010
 80120f0:	10624dd3 	.word	0x10624dd3
 80120f4:	00200045 	.word	0x00200045
 80120f8:	002000c5 	.word	0x002000c5
 80120fc:	fdffe008 	.word	0xfdffe008

08012100 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp2(SDMMC_TypeDef *SDMMCx)
{
 8012100:	b480      	push	{r7}
 8012102:	b085      	sub	sp, #20
 8012104:	af00      	add	r7, sp, #0
 8012106:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8012108:	4b1f      	ldr	r3, [pc, #124]	; (8012188 <SDMMC_GetCmdResp2+0x88>)
 801210a:	681b      	ldr	r3, [r3, #0]
 801210c:	4a1f      	ldr	r2, [pc, #124]	; (801218c <SDMMC_GetCmdResp2+0x8c>)
 801210e:	fba2 2303 	umull	r2, r3, r2, r3
 8012112:	0a5b      	lsrs	r3, r3, #9
 8012114:	f241 3288 	movw	r2, #5000	; 0x1388
 8012118:	fb02 f303 	mul.w	r3, r2, r3
 801211c:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 801211e:	68fb      	ldr	r3, [r7, #12]
 8012120:	1e5a      	subs	r2, r3, #1
 8012122:	60fa      	str	r2, [r7, #12]
 8012124:	2b00      	cmp	r3, #0
 8012126:	d102      	bne.n	801212e <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8012128:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 801212c:	e026      	b.n	801217c <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDMMCx->STA;
 801212e:	687b      	ldr	r3, [r7, #4]
 8012130:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8012132:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8012134:	68bb      	ldr	r3, [r7, #8]
 8012136:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 801213a:	2b00      	cmp	r3, #0
 801213c:	d0ef      	beq.n	801211e <SDMMC_GetCmdResp2+0x1e>
 801213e:	68bb      	ldr	r3, [r7, #8]
 8012140:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8012144:	2b00      	cmp	r3, #0
 8012146:	d1ea      	bne.n	801211e <SDMMC_GetCmdResp2+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8012148:	687b      	ldr	r3, [r7, #4]
 801214a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801214c:	f003 0304 	and.w	r3, r3, #4
 8012150:	2b00      	cmp	r3, #0
 8012152:	d004      	beq.n	801215e <SDMMC_GetCmdResp2+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8012154:	687b      	ldr	r3, [r7, #4]
 8012156:	2204      	movs	r2, #4
 8012158:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 801215a:	2304      	movs	r3, #4
 801215c:	e00e      	b.n	801217c <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 801215e:	687b      	ldr	r3, [r7, #4]
 8012160:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8012162:	f003 0301 	and.w	r3, r3, #1
 8012166:	2b00      	cmp	r3, #0
 8012168:	d004      	beq.n	8012174 <SDMMC_GetCmdResp2+0x74>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 801216a:	687b      	ldr	r3, [r7, #4]
 801216c:	2201      	movs	r2, #1
 801216e:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 8012170:	2301      	movs	r3, #1
 8012172:	e003      	b.n	801217c <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8012174:	687b      	ldr	r3, [r7, #4]
 8012176:	4a06      	ldr	r2, [pc, #24]	; (8012190 <SDMMC_GetCmdResp2+0x90>)
 8012178:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 801217a:	2300      	movs	r3, #0
}
 801217c:	4618      	mov	r0, r3
 801217e:	3714      	adds	r7, #20
 8012180:	46bd      	mov	sp, r7
 8012182:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012186:	4770      	bx	lr
 8012188:	24000010 	.word	0x24000010
 801218c:	10624dd3 	.word	0x10624dd3
 8012190:	002000c5 	.word	0x002000c5

08012194 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp3(SDMMC_TypeDef *SDMMCx)
{
 8012194:	b480      	push	{r7}
 8012196:	b085      	sub	sp, #20
 8012198:	af00      	add	r7, sp, #0
 801219a:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 801219c:	4b1a      	ldr	r3, [pc, #104]	; (8012208 <SDMMC_GetCmdResp3+0x74>)
 801219e:	681b      	ldr	r3, [r3, #0]
 80121a0:	4a1a      	ldr	r2, [pc, #104]	; (801220c <SDMMC_GetCmdResp3+0x78>)
 80121a2:	fba2 2303 	umull	r2, r3, r2, r3
 80121a6:	0a5b      	lsrs	r3, r3, #9
 80121a8:	f241 3288 	movw	r2, #5000	; 0x1388
 80121ac:	fb02 f303 	mul.w	r3, r2, r3
 80121b0:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 80121b2:	68fb      	ldr	r3, [r7, #12]
 80121b4:	1e5a      	subs	r2, r3, #1
 80121b6:	60fa      	str	r2, [r7, #12]
 80121b8:	2b00      	cmp	r3, #0
 80121ba:	d102      	bne.n	80121c2 <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 80121bc:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80121c0:	e01b      	b.n	80121fa <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDMMCx->STA;
 80121c2:	687b      	ldr	r3, [r7, #4]
 80121c4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80121c6:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 80121c8:	68bb      	ldr	r3, [r7, #8]
 80121ca:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 80121ce:	2b00      	cmp	r3, #0
 80121d0:	d0ef      	beq.n	80121b2 <SDMMC_GetCmdResp3+0x1e>
 80121d2:	68bb      	ldr	r3, [r7, #8]
 80121d4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 80121d8:	2b00      	cmp	r3, #0
 80121da:	d1ea      	bne.n	80121b2 <SDMMC_GetCmdResp3+0x1e>

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 80121dc:	687b      	ldr	r3, [r7, #4]
 80121de:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80121e0:	f003 0304 	and.w	r3, r3, #4
 80121e4:	2b00      	cmp	r3, #0
 80121e6:	d004      	beq.n	80121f2 <SDMMC_GetCmdResp3+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 80121e8:	687b      	ldr	r3, [r7, #4]
 80121ea:	2204      	movs	r2, #4
 80121ec:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80121ee:	2304      	movs	r3, #4
 80121f0:	e003      	b.n	80121fa <SDMMC_GetCmdResp3+0x66>
  }
  else
  {
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 80121f2:	687b      	ldr	r3, [r7, #4]
 80121f4:	4a06      	ldr	r2, [pc, #24]	; (8012210 <SDMMC_GetCmdResp3+0x7c>)
 80121f6:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 80121f8:	2300      	movs	r3, #0
}
 80121fa:	4618      	mov	r0, r3
 80121fc:	3714      	adds	r7, #20
 80121fe:	46bd      	mov	sp, r7
 8012200:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012204:	4770      	bx	lr
 8012206:	bf00      	nop
 8012208:	24000010 	.word	0x24000010
 801220c:	10624dd3 	.word	0x10624dd3
 8012210:	002000c5 	.word	0x002000c5

08012214 <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative
  *         address RCA
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp6(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint16_t *pRCA)
{
 8012214:	b580      	push	{r7, lr}
 8012216:	b088      	sub	sp, #32
 8012218:	af00      	add	r7, sp, #0
 801221a:	60f8      	str	r0, [r7, #12]
 801221c:	460b      	mov	r3, r1
 801221e:	607a      	str	r2, [r7, #4]
 8012220:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8012222:	4b35      	ldr	r3, [pc, #212]	; (80122f8 <SDMMC_GetCmdResp6+0xe4>)
 8012224:	681b      	ldr	r3, [r3, #0]
 8012226:	4a35      	ldr	r2, [pc, #212]	; (80122fc <SDMMC_GetCmdResp6+0xe8>)
 8012228:	fba2 2303 	umull	r2, r3, r2, r3
 801222c:	0a5b      	lsrs	r3, r3, #9
 801222e:	f241 3288 	movw	r2, #5000	; 0x1388
 8012232:	fb02 f303 	mul.w	r3, r2, r3
 8012236:	61fb      	str	r3, [r7, #28]

  do
  {
    if (count-- == 0U)
 8012238:	69fb      	ldr	r3, [r7, #28]
 801223a:	1e5a      	subs	r2, r3, #1
 801223c:	61fa      	str	r2, [r7, #28]
 801223e:	2b00      	cmp	r3, #0
 8012240:	d102      	bne.n	8012248 <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 8012242:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8012246:	e052      	b.n	80122ee <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDMMCx->STA;
 8012248:	68fb      	ldr	r3, [r7, #12]
 801224a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801224c:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 801224e:	69bb      	ldr	r3, [r7, #24]
 8012250:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 8012254:	2b00      	cmp	r3, #0
 8012256:	d0ef      	beq.n	8012238 <SDMMC_GetCmdResp6+0x24>
 8012258:	69bb      	ldr	r3, [r7, #24]
 801225a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 801225e:	2b00      	cmp	r3, #0
 8012260:	d1ea      	bne.n	8012238 <SDMMC_GetCmdResp6+0x24>

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8012262:	68fb      	ldr	r3, [r7, #12]
 8012264:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8012266:	f003 0304 	and.w	r3, r3, #4
 801226a:	2b00      	cmp	r3, #0
 801226c:	d004      	beq.n	8012278 <SDMMC_GetCmdResp6+0x64>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 801226e:	68fb      	ldr	r3, [r7, #12]
 8012270:	2204      	movs	r2, #4
 8012272:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8012274:	2304      	movs	r3, #4
 8012276:	e03a      	b.n	80122ee <SDMMC_GetCmdResp6+0xda>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8012278:	68fb      	ldr	r3, [r7, #12]
 801227a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801227c:	f003 0301 	and.w	r3, r3, #1
 8012280:	2b00      	cmp	r3, #0
 8012282:	d004      	beq.n	801228e <SDMMC_GetCmdResp6+0x7a>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8012284:	68fb      	ldr	r3, [r7, #12]
 8012286:	2201      	movs	r2, #1
 8012288:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 801228a:	2301      	movs	r3, #1
 801228c:	e02f      	b.n	80122ee <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }

  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 801228e:	68f8      	ldr	r0, [r7, #12]
 8012290:	f7ff fb2c 	bl	80118ec <SDMMC_GetCommandResponse>
 8012294:	4603      	mov	r3, r0
 8012296:	461a      	mov	r2, r3
 8012298:	7afb      	ldrb	r3, [r7, #11]
 801229a:	4293      	cmp	r3, r2
 801229c:	d001      	beq.n	80122a2 <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 801229e:	2301      	movs	r3, #1
 80122a0:	e025      	b.n	80122ee <SDMMC_GetCmdResp6+0xda>
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 80122a2:	68fb      	ldr	r3, [r7, #12]
 80122a4:	4a16      	ldr	r2, [pc, #88]	; (8012300 <SDMMC_GetCmdResp6+0xec>)
 80122a6:	639a      	str	r2, [r3, #56]	; 0x38

  /* We have received response, retrieve it.  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 80122a8:	2100      	movs	r1, #0
 80122aa:	68f8      	ldr	r0, [r7, #12]
 80122ac:	f7ff fb2b 	bl	8011906 <SDMMC_GetResponse>
 80122b0:	6178      	str	r0, [r7, #20]

  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 80122b2:	697b      	ldr	r3, [r7, #20]
 80122b4:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 80122b8:	2b00      	cmp	r3, #0
 80122ba:	d106      	bne.n	80122ca <SDMMC_GetCmdResp6+0xb6>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 80122bc:	697b      	ldr	r3, [r7, #20]
 80122be:	0c1b      	lsrs	r3, r3, #16
 80122c0:	b29a      	uxth	r2, r3
 80122c2:	687b      	ldr	r3, [r7, #4]
 80122c4:	801a      	strh	r2, [r3, #0]

    return SDMMC_ERROR_NONE;
 80122c6:	2300      	movs	r3, #0
 80122c8:	e011      	b.n	80122ee <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 80122ca:	697b      	ldr	r3, [r7, #20]
 80122cc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80122d0:	2b00      	cmp	r3, #0
 80122d2:	d002      	beq.n	80122da <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 80122d4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80122d8:	e009      	b.n	80122ee <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 80122da:	697b      	ldr	r3, [r7, #20]
 80122dc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80122e0:	2b00      	cmp	r3, #0
 80122e2:	d002      	beq.n	80122ea <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 80122e4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80122e8:	e001      	b.n	80122ee <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 80122ea:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 80122ee:	4618      	mov	r0, r3
 80122f0:	3720      	adds	r7, #32
 80122f2:	46bd      	mov	sp, r7
 80122f4:	bd80      	pop	{r7, pc}
 80122f6:	bf00      	nop
 80122f8:	24000010 	.word	0x24000010
 80122fc:	10624dd3 	.word	0x10624dd3
 8012300:	002000c5 	.word	0x002000c5

08012304 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp7(SDMMC_TypeDef *SDMMCx)
{
 8012304:	b480      	push	{r7}
 8012306:	b085      	sub	sp, #20
 8012308:	af00      	add	r7, sp, #0
 801230a:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 801230c:	4b22      	ldr	r3, [pc, #136]	; (8012398 <SDMMC_GetCmdResp7+0x94>)
 801230e:	681b      	ldr	r3, [r3, #0]
 8012310:	4a22      	ldr	r2, [pc, #136]	; (801239c <SDMMC_GetCmdResp7+0x98>)
 8012312:	fba2 2303 	umull	r2, r3, r2, r3
 8012316:	0a5b      	lsrs	r3, r3, #9
 8012318:	f241 3288 	movw	r2, #5000	; 0x1388
 801231c:	fb02 f303 	mul.w	r3, r2, r3
 8012320:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 8012322:	68fb      	ldr	r3, [r7, #12]
 8012324:	1e5a      	subs	r2, r3, #1
 8012326:	60fa      	str	r2, [r7, #12]
 8012328:	2b00      	cmp	r3, #0
 801232a:	d102      	bne.n	8012332 <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 801232c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8012330:	e02c      	b.n	801238c <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDMMCx->STA;
 8012332:	687b      	ldr	r3, [r7, #4]
 8012334:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8012336:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8012338:	68bb      	ldr	r3, [r7, #8]
 801233a:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 801233e:	2b00      	cmp	r3, #0
 8012340:	d0ef      	beq.n	8012322 <SDMMC_GetCmdResp7+0x1e>
 8012342:	68bb      	ldr	r3, [r7, #8]
 8012344:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8012348:	2b00      	cmp	r3, #0
 801234a:	d1ea      	bne.n	8012322 <SDMMC_GetCmdResp7+0x1e>

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 801234c:	687b      	ldr	r3, [r7, #4]
 801234e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8012350:	f003 0304 	and.w	r3, r3, #4
 8012354:	2b00      	cmp	r3, #0
 8012356:	d004      	beq.n	8012362 <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8012358:	687b      	ldr	r3, [r7, #4]
 801235a:	2204      	movs	r2, #4
 801235c:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 801235e:	2304      	movs	r3, #4
 8012360:	e014      	b.n	801238c <SDMMC_GetCmdResp7+0x88>
  }

  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8012362:	687b      	ldr	r3, [r7, #4]
 8012364:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8012366:	f003 0301 	and.w	r3, r3, #1
 801236a:	2b00      	cmp	r3, #0
 801236c:	d004      	beq.n	8012378 <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 801236e:	687b      	ldr	r3, [r7, #4]
 8012370:	2201      	movs	r2, #1
 8012372:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 8012374:	2301      	movs	r3, #1
 8012376:	e009      	b.n	801238c <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDREND))
 8012378:	687b      	ldr	r3, [r7, #4]
 801237a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801237c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8012380:	2b00      	cmp	r3, #0
 8012382:	d002      	beq.n	801238a <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CMDREND);
 8012384:	687b      	ldr	r3, [r7, #4]
 8012386:	2240      	movs	r2, #64	; 0x40
 8012388:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 801238a:	2300      	movs	r3, #0

}
 801238c:	4618      	mov	r0, r3
 801238e:	3714      	adds	r7, #20
 8012390:	46bd      	mov	sp, r7
 8012392:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012396:	4770      	bx	lr
 8012398:	24000010 	.word	0x24000010
 801239c:	10624dd3 	.word	0x10624dd3

080123a0 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80123a0:	b084      	sub	sp, #16
 80123a2:	b580      	push	{r7, lr}
 80123a4:	b084      	sub	sp, #16
 80123a6:	af00      	add	r7, sp, #0
 80123a8:	6078      	str	r0, [r7, #4]
 80123aa:	f107 001c 	add.w	r0, r7, #28
 80123ae:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80123b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80123b4:	2b01      	cmp	r3, #1
 80123b6:	d120      	bne.n	80123fa <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80123b8:	687b      	ldr	r3, [r7, #4]
 80123ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80123bc:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80123c0:	687b      	ldr	r3, [r7, #4]
 80123c2:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80123c4:	687b      	ldr	r3, [r7, #4]
 80123c6:	68da      	ldr	r2, [r3, #12]
 80123c8:	4b25      	ldr	r3, [pc, #148]	; (8012460 <USB_CoreInit+0xc0>)
 80123ca:	4013      	ands	r3, r2
 80123cc:	687a      	ldr	r2, [r7, #4]
 80123ce:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80123d0:	687b      	ldr	r3, [r7, #4]
 80123d2:	68db      	ldr	r3, [r3, #12]
 80123d4:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80123d8:	687b      	ldr	r3, [r7, #4]
 80123da:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80123dc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80123de:	2b01      	cmp	r3, #1
 80123e0:	d105      	bne.n	80123ee <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80123e2:	687b      	ldr	r3, [r7, #4]
 80123e4:	68db      	ldr	r3, [r3, #12]
 80123e6:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80123ea:	687b      	ldr	r3, [r7, #4]
 80123ec:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 80123ee:	6878      	ldr	r0, [r7, #4]
 80123f0:	f001 fabe 	bl	8013970 <USB_CoreReset>
 80123f4:	4603      	mov	r3, r0
 80123f6:	73fb      	strb	r3, [r7, #15]
 80123f8:	e01a      	b.n	8012430 <USB_CoreInit+0x90>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80123fa:	687b      	ldr	r3, [r7, #4]
 80123fc:	68db      	ldr	r3, [r3, #12]
 80123fe:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8012402:	687b      	ldr	r3, [r7, #4]
 8012404:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select and set Host mode */
    ret = USB_CoreReset(USBx);
 8012406:	6878      	ldr	r0, [r7, #4]
 8012408:	f001 fab2 	bl	8013970 <USB_CoreReset>
 801240c:	4603      	mov	r3, r0
 801240e:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8012410:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8012412:	2b00      	cmp	r3, #0
 8012414:	d106      	bne.n	8012424 <USB_CoreInit+0x84>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8012416:	687b      	ldr	r3, [r7, #4]
 8012418:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801241a:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 801241e:	687b      	ldr	r3, [r7, #4]
 8012420:	639a      	str	r2, [r3, #56]	; 0x38
 8012422:	e005      	b.n	8012430 <USB_CoreInit+0x90>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8012424:	687b      	ldr	r3, [r7, #4]
 8012426:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8012428:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 801242c:	687b      	ldr	r3, [r7, #4]
 801242e:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8012430:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012432:	2b01      	cmp	r3, #1
 8012434:	d10b      	bne.n	801244e <USB_CoreInit+0xae>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8012436:	687b      	ldr	r3, [r7, #4]
 8012438:	689b      	ldr	r3, [r3, #8]
 801243a:	f043 0206 	orr.w	r2, r3, #6
 801243e:	687b      	ldr	r3, [r7, #4]
 8012440:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8012442:	687b      	ldr	r3, [r7, #4]
 8012444:	689b      	ldr	r3, [r3, #8]
 8012446:	f043 0220 	orr.w	r2, r3, #32
 801244a:	687b      	ldr	r3, [r7, #4]
 801244c:	609a      	str	r2, [r3, #8]
  }

  return ret;
 801244e:	7bfb      	ldrb	r3, [r7, #15]
}
 8012450:	4618      	mov	r0, r3
 8012452:	3710      	adds	r7, #16
 8012454:	46bd      	mov	sp, r7
 8012456:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 801245a:	b004      	add	sp, #16
 801245c:	4770      	bx	lr
 801245e:	bf00      	nop
 8012460:	ffbdffbf 	.word	0xffbdffbf

08012464 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8012464:	b480      	push	{r7}
 8012466:	b087      	sub	sp, #28
 8012468:	af00      	add	r7, sp, #0
 801246a:	60f8      	str	r0, [r7, #12]
 801246c:	60b9      	str	r1, [r7, #8]
 801246e:	4613      	mov	r3, r2
 8012470:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8012472:	79fb      	ldrb	r3, [r7, #7]
 8012474:	2b02      	cmp	r3, #2
 8012476:	d165      	bne.n	8012544 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8012478:	68bb      	ldr	r3, [r7, #8]
 801247a:	4a41      	ldr	r2, [pc, #260]	; (8012580 <USB_SetTurnaroundTime+0x11c>)
 801247c:	4293      	cmp	r3, r2
 801247e:	d906      	bls.n	801248e <USB_SetTurnaroundTime+0x2a>
 8012480:	68bb      	ldr	r3, [r7, #8]
 8012482:	4a40      	ldr	r2, [pc, #256]	; (8012584 <USB_SetTurnaroundTime+0x120>)
 8012484:	4293      	cmp	r3, r2
 8012486:	d802      	bhi.n	801248e <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8012488:	230f      	movs	r3, #15
 801248a:	617b      	str	r3, [r7, #20]
 801248c:	e062      	b.n	8012554 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 801248e:	68bb      	ldr	r3, [r7, #8]
 8012490:	4a3c      	ldr	r2, [pc, #240]	; (8012584 <USB_SetTurnaroundTime+0x120>)
 8012492:	4293      	cmp	r3, r2
 8012494:	d906      	bls.n	80124a4 <USB_SetTurnaroundTime+0x40>
 8012496:	68bb      	ldr	r3, [r7, #8]
 8012498:	4a3b      	ldr	r2, [pc, #236]	; (8012588 <USB_SetTurnaroundTime+0x124>)
 801249a:	4293      	cmp	r3, r2
 801249c:	d802      	bhi.n	80124a4 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 801249e:	230e      	movs	r3, #14
 80124a0:	617b      	str	r3, [r7, #20]
 80124a2:	e057      	b.n	8012554 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 80124a4:	68bb      	ldr	r3, [r7, #8]
 80124a6:	4a38      	ldr	r2, [pc, #224]	; (8012588 <USB_SetTurnaroundTime+0x124>)
 80124a8:	4293      	cmp	r3, r2
 80124aa:	d906      	bls.n	80124ba <USB_SetTurnaroundTime+0x56>
 80124ac:	68bb      	ldr	r3, [r7, #8]
 80124ae:	4a37      	ldr	r2, [pc, #220]	; (801258c <USB_SetTurnaroundTime+0x128>)
 80124b0:	4293      	cmp	r3, r2
 80124b2:	d802      	bhi.n	80124ba <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 80124b4:	230d      	movs	r3, #13
 80124b6:	617b      	str	r3, [r7, #20]
 80124b8:	e04c      	b.n	8012554 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 80124ba:	68bb      	ldr	r3, [r7, #8]
 80124bc:	4a33      	ldr	r2, [pc, #204]	; (801258c <USB_SetTurnaroundTime+0x128>)
 80124be:	4293      	cmp	r3, r2
 80124c0:	d906      	bls.n	80124d0 <USB_SetTurnaroundTime+0x6c>
 80124c2:	68bb      	ldr	r3, [r7, #8]
 80124c4:	4a32      	ldr	r2, [pc, #200]	; (8012590 <USB_SetTurnaroundTime+0x12c>)
 80124c6:	4293      	cmp	r3, r2
 80124c8:	d802      	bhi.n	80124d0 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 80124ca:	230c      	movs	r3, #12
 80124cc:	617b      	str	r3, [r7, #20]
 80124ce:	e041      	b.n	8012554 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 80124d0:	68bb      	ldr	r3, [r7, #8]
 80124d2:	4a2f      	ldr	r2, [pc, #188]	; (8012590 <USB_SetTurnaroundTime+0x12c>)
 80124d4:	4293      	cmp	r3, r2
 80124d6:	d906      	bls.n	80124e6 <USB_SetTurnaroundTime+0x82>
 80124d8:	68bb      	ldr	r3, [r7, #8]
 80124da:	4a2e      	ldr	r2, [pc, #184]	; (8012594 <USB_SetTurnaroundTime+0x130>)
 80124dc:	4293      	cmp	r3, r2
 80124de:	d802      	bhi.n	80124e6 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 80124e0:	230b      	movs	r3, #11
 80124e2:	617b      	str	r3, [r7, #20]
 80124e4:	e036      	b.n	8012554 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 80124e6:	68bb      	ldr	r3, [r7, #8]
 80124e8:	4a2a      	ldr	r2, [pc, #168]	; (8012594 <USB_SetTurnaroundTime+0x130>)
 80124ea:	4293      	cmp	r3, r2
 80124ec:	d906      	bls.n	80124fc <USB_SetTurnaroundTime+0x98>
 80124ee:	68bb      	ldr	r3, [r7, #8]
 80124f0:	4a29      	ldr	r2, [pc, #164]	; (8012598 <USB_SetTurnaroundTime+0x134>)
 80124f2:	4293      	cmp	r3, r2
 80124f4:	d802      	bhi.n	80124fc <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 80124f6:	230a      	movs	r3, #10
 80124f8:	617b      	str	r3, [r7, #20]
 80124fa:	e02b      	b.n	8012554 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 80124fc:	68bb      	ldr	r3, [r7, #8]
 80124fe:	4a26      	ldr	r2, [pc, #152]	; (8012598 <USB_SetTurnaroundTime+0x134>)
 8012500:	4293      	cmp	r3, r2
 8012502:	d906      	bls.n	8012512 <USB_SetTurnaroundTime+0xae>
 8012504:	68bb      	ldr	r3, [r7, #8]
 8012506:	4a25      	ldr	r2, [pc, #148]	; (801259c <USB_SetTurnaroundTime+0x138>)
 8012508:	4293      	cmp	r3, r2
 801250a:	d802      	bhi.n	8012512 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 801250c:	2309      	movs	r3, #9
 801250e:	617b      	str	r3, [r7, #20]
 8012510:	e020      	b.n	8012554 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8012512:	68bb      	ldr	r3, [r7, #8]
 8012514:	4a21      	ldr	r2, [pc, #132]	; (801259c <USB_SetTurnaroundTime+0x138>)
 8012516:	4293      	cmp	r3, r2
 8012518:	d906      	bls.n	8012528 <USB_SetTurnaroundTime+0xc4>
 801251a:	68bb      	ldr	r3, [r7, #8]
 801251c:	4a20      	ldr	r2, [pc, #128]	; (80125a0 <USB_SetTurnaroundTime+0x13c>)
 801251e:	4293      	cmp	r3, r2
 8012520:	d802      	bhi.n	8012528 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8012522:	2308      	movs	r3, #8
 8012524:	617b      	str	r3, [r7, #20]
 8012526:	e015      	b.n	8012554 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8012528:	68bb      	ldr	r3, [r7, #8]
 801252a:	4a1d      	ldr	r2, [pc, #116]	; (80125a0 <USB_SetTurnaroundTime+0x13c>)
 801252c:	4293      	cmp	r3, r2
 801252e:	d906      	bls.n	801253e <USB_SetTurnaroundTime+0xda>
 8012530:	68bb      	ldr	r3, [r7, #8]
 8012532:	4a1c      	ldr	r2, [pc, #112]	; (80125a4 <USB_SetTurnaroundTime+0x140>)
 8012534:	4293      	cmp	r3, r2
 8012536:	d802      	bhi.n	801253e <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8012538:	2307      	movs	r3, #7
 801253a:	617b      	str	r3, [r7, #20]
 801253c:	e00a      	b.n	8012554 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 801253e:	2306      	movs	r3, #6
 8012540:	617b      	str	r3, [r7, #20]
 8012542:	e007      	b.n	8012554 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8012544:	79fb      	ldrb	r3, [r7, #7]
 8012546:	2b00      	cmp	r3, #0
 8012548:	d102      	bne.n	8012550 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 801254a:	2309      	movs	r3, #9
 801254c:	617b      	str	r3, [r7, #20]
 801254e:	e001      	b.n	8012554 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8012550:	2309      	movs	r3, #9
 8012552:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8012554:	68fb      	ldr	r3, [r7, #12]
 8012556:	68db      	ldr	r3, [r3, #12]
 8012558:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 801255c:	68fb      	ldr	r3, [r7, #12]
 801255e:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8012560:	68fb      	ldr	r3, [r7, #12]
 8012562:	68da      	ldr	r2, [r3, #12]
 8012564:	697b      	ldr	r3, [r7, #20]
 8012566:	029b      	lsls	r3, r3, #10
 8012568:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 801256c:	431a      	orrs	r2, r3
 801256e:	68fb      	ldr	r3, [r7, #12]
 8012570:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8012572:	2300      	movs	r3, #0
}
 8012574:	4618      	mov	r0, r3
 8012576:	371c      	adds	r7, #28
 8012578:	46bd      	mov	sp, r7
 801257a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801257e:	4770      	bx	lr
 8012580:	00d8acbf 	.word	0x00d8acbf
 8012584:	00e4e1bf 	.word	0x00e4e1bf
 8012588:	00f423ff 	.word	0x00f423ff
 801258c:	0106737f 	.word	0x0106737f
 8012590:	011a499f 	.word	0x011a499f
 8012594:	01312cff 	.word	0x01312cff
 8012598:	014ca43f 	.word	0x014ca43f
 801259c:	016e35ff 	.word	0x016e35ff
 80125a0:	01a6ab1f 	.word	0x01a6ab1f
 80125a4:	01e847ff 	.word	0x01e847ff

080125a8 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80125a8:	b480      	push	{r7}
 80125aa:	b083      	sub	sp, #12
 80125ac:	af00      	add	r7, sp, #0
 80125ae:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 80125b0:	687b      	ldr	r3, [r7, #4]
 80125b2:	689b      	ldr	r3, [r3, #8]
 80125b4:	f043 0201 	orr.w	r2, r3, #1
 80125b8:	687b      	ldr	r3, [r7, #4]
 80125ba:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80125bc:	2300      	movs	r3, #0
}
 80125be:	4618      	mov	r0, r3
 80125c0:	370c      	adds	r7, #12
 80125c2:	46bd      	mov	sp, r7
 80125c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80125c8:	4770      	bx	lr

080125ca <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80125ca:	b480      	push	{r7}
 80125cc:	b083      	sub	sp, #12
 80125ce:	af00      	add	r7, sp, #0
 80125d0:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80125d2:	687b      	ldr	r3, [r7, #4]
 80125d4:	689b      	ldr	r3, [r3, #8]
 80125d6:	f023 0201 	bic.w	r2, r3, #1
 80125da:	687b      	ldr	r3, [r7, #4]
 80125dc:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80125de:	2300      	movs	r3, #0
}
 80125e0:	4618      	mov	r0, r3
 80125e2:	370c      	adds	r7, #12
 80125e4:	46bd      	mov	sp, r7
 80125e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80125ea:	4770      	bx	lr

080125ec <USB_SetCurrentMode>:
  *            @arg USB_HOST_MODE: Host mode
  *            @arg USB_DRD_MODE: Dual Role Device mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80125ec:	b580      	push	{r7, lr}
 80125ee:	b082      	sub	sp, #8
 80125f0:	af00      	add	r7, sp, #0
 80125f2:	6078      	str	r0, [r7, #4]
 80125f4:	460b      	mov	r3, r1
 80125f6:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80125f8:	687b      	ldr	r3, [r7, #4]
 80125fa:	68db      	ldr	r3, [r3, #12]
 80125fc:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8012600:	687b      	ldr	r3, [r7, #4]
 8012602:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8012604:	78fb      	ldrb	r3, [r7, #3]
 8012606:	2b01      	cmp	r3, #1
 8012608:	d106      	bne.n	8012618 <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 801260a:	687b      	ldr	r3, [r7, #4]
 801260c:	68db      	ldr	r3, [r3, #12]
 801260e:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8012612:	687b      	ldr	r3, [r7, #4]
 8012614:	60da      	str	r2, [r3, #12]
 8012616:	e00b      	b.n	8012630 <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 8012618:	78fb      	ldrb	r3, [r7, #3]
 801261a:	2b00      	cmp	r3, #0
 801261c:	d106      	bne.n	801262c <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 801261e:	687b      	ldr	r3, [r7, #4]
 8012620:	68db      	ldr	r3, [r3, #12]
 8012622:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8012626:	687b      	ldr	r3, [r7, #4]
 8012628:	60da      	str	r2, [r3, #12]
 801262a:	e001      	b.n	8012630 <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 801262c:	2301      	movs	r3, #1
 801262e:	e003      	b.n	8012638 <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 8012630:	2032      	movs	r0, #50	; 0x32
 8012632:	f7f2 fbcb 	bl	8004dcc <HAL_Delay>

  return HAL_OK;
 8012636:	2300      	movs	r3, #0
}
 8012638:	4618      	mov	r0, r3
 801263a:	3708      	adds	r7, #8
 801263c:	46bd      	mov	sp, r7
 801263e:	bd80      	pop	{r7, pc}

08012640 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8012640:	b084      	sub	sp, #16
 8012642:	b580      	push	{r7, lr}
 8012644:	b086      	sub	sp, #24
 8012646:	af00      	add	r7, sp, #0
 8012648:	6078      	str	r0, [r7, #4]
 801264a:	f107 0024 	add.w	r0, r7, #36	; 0x24
 801264e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8012652:	2300      	movs	r3, #0
 8012654:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8012656:	687b      	ldr	r3, [r7, #4]
 8012658:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 801265a:	2300      	movs	r3, #0
 801265c:	613b      	str	r3, [r7, #16]
 801265e:	e009      	b.n	8012674 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8012660:	687a      	ldr	r2, [r7, #4]
 8012662:	693b      	ldr	r3, [r7, #16]
 8012664:	3340      	adds	r3, #64	; 0x40
 8012666:	009b      	lsls	r3, r3, #2
 8012668:	4413      	add	r3, r2
 801266a:	2200      	movs	r2, #0
 801266c:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 801266e:	693b      	ldr	r3, [r7, #16]
 8012670:	3301      	adds	r3, #1
 8012672:	613b      	str	r3, [r7, #16]
 8012674:	693b      	ldr	r3, [r7, #16]
 8012676:	2b0e      	cmp	r3, #14
 8012678:	d9f2      	bls.n	8012660 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 801267a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801267c:	2b00      	cmp	r3, #0
 801267e:	d11c      	bne.n	80126ba <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8012680:	68fb      	ldr	r3, [r7, #12]
 8012682:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8012686:	685b      	ldr	r3, [r3, #4]
 8012688:	68fa      	ldr	r2, [r7, #12]
 801268a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 801268e:	f043 0302 	orr.w	r3, r3, #2
 8012692:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8012694:	687b      	ldr	r3, [r7, #4]
 8012696:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8012698:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 801269c:	687b      	ldr	r3, [r7, #4]
 801269e:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 80126a0:	687b      	ldr	r3, [r7, #4]
 80126a2:	681b      	ldr	r3, [r3, #0]
 80126a4:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80126a8:	687b      	ldr	r3, [r7, #4]
 80126aa:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 80126ac:	687b      	ldr	r3, [r7, #4]
 80126ae:	681b      	ldr	r3, [r3, #0]
 80126b0:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80126b4:	687b      	ldr	r3, [r7, #4]
 80126b6:	601a      	str	r2, [r3, #0]
 80126b8:	e005      	b.n	80126c6 <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 80126ba:	687b      	ldr	r3, [r7, #4]
 80126bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80126be:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80126c2:	687b      	ldr	r3, [r7, #4]
 80126c4:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80126c6:	68fb      	ldr	r3, [r7, #12]
 80126c8:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80126cc:	461a      	mov	r2, r3
 80126ce:	2300      	movs	r3, #0
 80126d0:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 80126d2:	68fb      	ldr	r3, [r7, #12]
 80126d4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80126d8:	4619      	mov	r1, r3
 80126da:	68fb      	ldr	r3, [r7, #12]
 80126dc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80126e0:	461a      	mov	r2, r3
 80126e2:	680b      	ldr	r3, [r1, #0]
 80126e4:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80126e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80126e8:	2b01      	cmp	r3, #1
 80126ea:	d10c      	bne.n	8012706 <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 80126ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80126ee:	2b00      	cmp	r3, #0
 80126f0:	d104      	bne.n	80126fc <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 80126f2:	2100      	movs	r1, #0
 80126f4:	6878      	ldr	r0, [r7, #4]
 80126f6:	f000 f949 	bl	801298c <USB_SetDevSpeed>
 80126fa:	e008      	b.n	801270e <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 80126fc:	2101      	movs	r1, #1
 80126fe:	6878      	ldr	r0, [r7, #4]
 8012700:	f000 f944 	bl	801298c <USB_SetDevSpeed>
 8012704:	e003      	b.n	801270e <USB_DevInit+0xce>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8012706:	2103      	movs	r1, #3
 8012708:	6878      	ldr	r0, [r7, #4]
 801270a:	f000 f93f 	bl	801298c <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 801270e:	2110      	movs	r1, #16
 8012710:	6878      	ldr	r0, [r7, #4]
 8012712:	f000 f8f3 	bl	80128fc <USB_FlushTxFifo>
 8012716:	4603      	mov	r3, r0
 8012718:	2b00      	cmp	r3, #0
 801271a:	d001      	beq.n	8012720 <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 801271c:	2301      	movs	r3, #1
 801271e:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8012720:	6878      	ldr	r0, [r7, #4]
 8012722:	f000 f911 	bl	8012948 <USB_FlushRxFifo>
 8012726:	4603      	mov	r3, r0
 8012728:	2b00      	cmp	r3, #0
 801272a:	d001      	beq.n	8012730 <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 801272c:	2301      	movs	r3, #1
 801272e:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8012730:	68fb      	ldr	r3, [r7, #12]
 8012732:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8012736:	461a      	mov	r2, r3
 8012738:	2300      	movs	r3, #0
 801273a:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 801273c:	68fb      	ldr	r3, [r7, #12]
 801273e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8012742:	461a      	mov	r2, r3
 8012744:	2300      	movs	r3, #0
 8012746:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8012748:	68fb      	ldr	r3, [r7, #12]
 801274a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801274e:	461a      	mov	r2, r3
 8012750:	2300      	movs	r3, #0
 8012752:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8012754:	2300      	movs	r3, #0
 8012756:	613b      	str	r3, [r7, #16]
 8012758:	e043      	b.n	80127e2 <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 801275a:	693b      	ldr	r3, [r7, #16]
 801275c:	015a      	lsls	r2, r3, #5
 801275e:	68fb      	ldr	r3, [r7, #12]
 8012760:	4413      	add	r3, r2
 8012762:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8012766:	681b      	ldr	r3, [r3, #0]
 8012768:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 801276c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8012770:	d118      	bne.n	80127a4 <USB_DevInit+0x164>
    {
      if (i == 0U)
 8012772:	693b      	ldr	r3, [r7, #16]
 8012774:	2b00      	cmp	r3, #0
 8012776:	d10a      	bne.n	801278e <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8012778:	693b      	ldr	r3, [r7, #16]
 801277a:	015a      	lsls	r2, r3, #5
 801277c:	68fb      	ldr	r3, [r7, #12]
 801277e:	4413      	add	r3, r2
 8012780:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8012784:	461a      	mov	r2, r3
 8012786:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 801278a:	6013      	str	r3, [r2, #0]
 801278c:	e013      	b.n	80127b6 <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 801278e:	693b      	ldr	r3, [r7, #16]
 8012790:	015a      	lsls	r2, r3, #5
 8012792:	68fb      	ldr	r3, [r7, #12]
 8012794:	4413      	add	r3, r2
 8012796:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801279a:	461a      	mov	r2, r3
 801279c:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80127a0:	6013      	str	r3, [r2, #0]
 80127a2:	e008      	b.n	80127b6 <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 80127a4:	693b      	ldr	r3, [r7, #16]
 80127a6:	015a      	lsls	r2, r3, #5
 80127a8:	68fb      	ldr	r3, [r7, #12]
 80127aa:	4413      	add	r3, r2
 80127ac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80127b0:	461a      	mov	r2, r3
 80127b2:	2300      	movs	r3, #0
 80127b4:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 80127b6:	693b      	ldr	r3, [r7, #16]
 80127b8:	015a      	lsls	r2, r3, #5
 80127ba:	68fb      	ldr	r3, [r7, #12]
 80127bc:	4413      	add	r3, r2
 80127be:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80127c2:	461a      	mov	r2, r3
 80127c4:	2300      	movs	r3, #0
 80127c6:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80127c8:	693b      	ldr	r3, [r7, #16]
 80127ca:	015a      	lsls	r2, r3, #5
 80127cc:	68fb      	ldr	r3, [r7, #12]
 80127ce:	4413      	add	r3, r2
 80127d0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80127d4:	461a      	mov	r2, r3
 80127d6:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80127da:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80127dc:	693b      	ldr	r3, [r7, #16]
 80127de:	3301      	adds	r3, #1
 80127e0:	613b      	str	r3, [r7, #16]
 80127e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80127e4:	693a      	ldr	r2, [r7, #16]
 80127e6:	429a      	cmp	r2, r3
 80127e8:	d3b7      	bcc.n	801275a <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80127ea:	2300      	movs	r3, #0
 80127ec:	613b      	str	r3, [r7, #16]
 80127ee:	e043      	b.n	8012878 <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80127f0:	693b      	ldr	r3, [r7, #16]
 80127f2:	015a      	lsls	r2, r3, #5
 80127f4:	68fb      	ldr	r3, [r7, #12]
 80127f6:	4413      	add	r3, r2
 80127f8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80127fc:	681b      	ldr	r3, [r3, #0]
 80127fe:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8012802:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8012806:	d118      	bne.n	801283a <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 8012808:	693b      	ldr	r3, [r7, #16]
 801280a:	2b00      	cmp	r3, #0
 801280c:	d10a      	bne.n	8012824 <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 801280e:	693b      	ldr	r3, [r7, #16]
 8012810:	015a      	lsls	r2, r3, #5
 8012812:	68fb      	ldr	r3, [r7, #12]
 8012814:	4413      	add	r3, r2
 8012816:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801281a:	461a      	mov	r2, r3
 801281c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8012820:	6013      	str	r3, [r2, #0]
 8012822:	e013      	b.n	801284c <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8012824:	693b      	ldr	r3, [r7, #16]
 8012826:	015a      	lsls	r2, r3, #5
 8012828:	68fb      	ldr	r3, [r7, #12]
 801282a:	4413      	add	r3, r2
 801282c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8012830:	461a      	mov	r2, r3
 8012832:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8012836:	6013      	str	r3, [r2, #0]
 8012838:	e008      	b.n	801284c <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 801283a:	693b      	ldr	r3, [r7, #16]
 801283c:	015a      	lsls	r2, r3, #5
 801283e:	68fb      	ldr	r3, [r7, #12]
 8012840:	4413      	add	r3, r2
 8012842:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8012846:	461a      	mov	r2, r3
 8012848:	2300      	movs	r3, #0
 801284a:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 801284c:	693b      	ldr	r3, [r7, #16]
 801284e:	015a      	lsls	r2, r3, #5
 8012850:	68fb      	ldr	r3, [r7, #12]
 8012852:	4413      	add	r3, r2
 8012854:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8012858:	461a      	mov	r2, r3
 801285a:	2300      	movs	r3, #0
 801285c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 801285e:	693b      	ldr	r3, [r7, #16]
 8012860:	015a      	lsls	r2, r3, #5
 8012862:	68fb      	ldr	r3, [r7, #12]
 8012864:	4413      	add	r3, r2
 8012866:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801286a:	461a      	mov	r2, r3
 801286c:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8012870:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8012872:	693b      	ldr	r3, [r7, #16]
 8012874:	3301      	adds	r3, #1
 8012876:	613b      	str	r3, [r7, #16]
 8012878:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801287a:	693a      	ldr	r2, [r7, #16]
 801287c:	429a      	cmp	r2, r3
 801287e:	d3b7      	bcc.n	80127f0 <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8012880:	68fb      	ldr	r3, [r7, #12]
 8012882:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8012886:	691b      	ldr	r3, [r3, #16]
 8012888:	68fa      	ldr	r2, [r7, #12]
 801288a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 801288e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8012892:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8012894:	687b      	ldr	r3, [r7, #4]
 8012896:	2200      	movs	r2, #0
 8012898:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 801289a:	687b      	ldr	r3, [r7, #4]
 801289c:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 80128a0:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80128a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80128a4:	2b00      	cmp	r3, #0
 80128a6:	d105      	bne.n	80128b4 <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80128a8:	687b      	ldr	r3, [r7, #4]
 80128aa:	699b      	ldr	r3, [r3, #24]
 80128ac:	f043 0210 	orr.w	r2, r3, #16
 80128b0:	687b      	ldr	r3, [r7, #4]
 80128b2:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80128b4:	687b      	ldr	r3, [r7, #4]
 80128b6:	699a      	ldr	r2, [r3, #24]
 80128b8:	4b0e      	ldr	r3, [pc, #56]	; (80128f4 <USB_DevInit+0x2b4>)
 80128ba:	4313      	orrs	r3, r2
 80128bc:	687a      	ldr	r2, [r7, #4]
 80128be:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 80128c0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80128c2:	2b00      	cmp	r3, #0
 80128c4:	d005      	beq.n	80128d2 <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80128c6:	687b      	ldr	r3, [r7, #4]
 80128c8:	699b      	ldr	r3, [r3, #24]
 80128ca:	f043 0208 	orr.w	r2, r3, #8
 80128ce:	687b      	ldr	r3, [r7, #4]
 80128d0:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 80128d2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80128d4:	2b01      	cmp	r3, #1
 80128d6:	d105      	bne.n	80128e4 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80128d8:	687b      	ldr	r3, [r7, #4]
 80128da:	699a      	ldr	r2, [r3, #24]
 80128dc:	4b06      	ldr	r3, [pc, #24]	; (80128f8 <USB_DevInit+0x2b8>)
 80128de:	4313      	orrs	r3, r2
 80128e0:	687a      	ldr	r2, [r7, #4]
 80128e2:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80128e4:	7dfb      	ldrb	r3, [r7, #23]
}
 80128e6:	4618      	mov	r0, r3
 80128e8:	3718      	adds	r7, #24
 80128ea:	46bd      	mov	sp, r7
 80128ec:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80128f0:	b004      	add	sp, #16
 80128f2:	4770      	bx	lr
 80128f4:	803c3800 	.word	0x803c3800
 80128f8:	40000004 	.word	0x40000004

080128fc <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80128fc:	b480      	push	{r7}
 80128fe:	b085      	sub	sp, #20
 8012900:	af00      	add	r7, sp, #0
 8012902:	6078      	str	r0, [r7, #4]
 8012904:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 8012906:	2300      	movs	r3, #0
 8012908:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 801290a:	683b      	ldr	r3, [r7, #0]
 801290c:	019b      	lsls	r3, r3, #6
 801290e:	f043 0220 	orr.w	r2, r3, #32
 8012912:	687b      	ldr	r3, [r7, #4]
 8012914:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8012916:	68fb      	ldr	r3, [r7, #12]
 8012918:	3301      	adds	r3, #1
 801291a:	60fb      	str	r3, [r7, #12]
 801291c:	68fb      	ldr	r3, [r7, #12]
 801291e:	4a09      	ldr	r2, [pc, #36]	; (8012944 <USB_FlushTxFifo+0x48>)
 8012920:	4293      	cmp	r3, r2
 8012922:	d901      	bls.n	8012928 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 8012924:	2303      	movs	r3, #3
 8012926:	e006      	b.n	8012936 <USB_FlushTxFifo+0x3a>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8012928:	687b      	ldr	r3, [r7, #4]
 801292a:	691b      	ldr	r3, [r3, #16]
 801292c:	f003 0320 	and.w	r3, r3, #32
 8012930:	2b20      	cmp	r3, #32
 8012932:	d0f0      	beq.n	8012916 <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 8012934:	2300      	movs	r3, #0
}
 8012936:	4618      	mov	r0, r3
 8012938:	3714      	adds	r7, #20
 801293a:	46bd      	mov	sp, r7
 801293c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012940:	4770      	bx	lr
 8012942:	bf00      	nop
 8012944:	00030d40 	.word	0x00030d40

08012948 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8012948:	b480      	push	{r7}
 801294a:	b085      	sub	sp, #20
 801294c:	af00      	add	r7, sp, #0
 801294e:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 8012950:	2300      	movs	r3, #0
 8012952:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8012954:	687b      	ldr	r3, [r7, #4]
 8012956:	2210      	movs	r2, #16
 8012958:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 801295a:	68fb      	ldr	r3, [r7, #12]
 801295c:	3301      	adds	r3, #1
 801295e:	60fb      	str	r3, [r7, #12]
 8012960:	68fb      	ldr	r3, [r7, #12]
 8012962:	4a09      	ldr	r2, [pc, #36]	; (8012988 <USB_FlushRxFifo+0x40>)
 8012964:	4293      	cmp	r3, r2
 8012966:	d901      	bls.n	801296c <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 8012968:	2303      	movs	r3, #3
 801296a:	e006      	b.n	801297a <USB_FlushRxFifo+0x32>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 801296c:	687b      	ldr	r3, [r7, #4]
 801296e:	691b      	ldr	r3, [r3, #16]
 8012970:	f003 0310 	and.w	r3, r3, #16
 8012974:	2b10      	cmp	r3, #16
 8012976:	d0f0      	beq.n	801295a <USB_FlushRxFifo+0x12>

  return HAL_OK;
 8012978:	2300      	movs	r3, #0
}
 801297a:	4618      	mov	r0, r3
 801297c:	3714      	adds	r7, #20
 801297e:	46bd      	mov	sp, r7
 8012980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012984:	4770      	bx	lr
 8012986:	bf00      	nop
 8012988:	00030d40 	.word	0x00030d40

0801298c <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 801298c:	b480      	push	{r7}
 801298e:	b085      	sub	sp, #20
 8012990:	af00      	add	r7, sp, #0
 8012992:	6078      	str	r0, [r7, #4]
 8012994:	460b      	mov	r3, r1
 8012996:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8012998:	687b      	ldr	r3, [r7, #4]
 801299a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 801299c:	68fb      	ldr	r3, [r7, #12]
 801299e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80129a2:	681a      	ldr	r2, [r3, #0]
 80129a4:	78fb      	ldrb	r3, [r7, #3]
 80129a6:	68f9      	ldr	r1, [r7, #12]
 80129a8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80129ac:	4313      	orrs	r3, r2
 80129ae:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 80129b0:	2300      	movs	r3, #0
}
 80129b2:	4618      	mov	r0, r3
 80129b4:	3714      	adds	r7, #20
 80129b6:	46bd      	mov	sp, r7
 80129b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80129bc:	4770      	bx	lr

080129be <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg PCD_SPEED_HIGH: High speed mode
  *            @arg PCD_SPEED_FULL: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 80129be:	b480      	push	{r7}
 80129c0:	b087      	sub	sp, #28
 80129c2:	af00      	add	r7, sp, #0
 80129c4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80129c6:	687b      	ldr	r3, [r7, #4]
 80129c8:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 80129ca:	693b      	ldr	r3, [r7, #16]
 80129cc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80129d0:	689b      	ldr	r3, [r3, #8]
 80129d2:	f003 0306 	and.w	r3, r3, #6
 80129d6:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 80129d8:	68fb      	ldr	r3, [r7, #12]
 80129da:	2b00      	cmp	r3, #0
 80129dc:	d102      	bne.n	80129e4 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 80129de:	2300      	movs	r3, #0
 80129e0:	75fb      	strb	r3, [r7, #23]
 80129e2:	e00a      	b.n	80129fa <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 80129e4:	68fb      	ldr	r3, [r7, #12]
 80129e6:	2b02      	cmp	r3, #2
 80129e8:	d002      	beq.n	80129f0 <USB_GetDevSpeed+0x32>
 80129ea:	68fb      	ldr	r3, [r7, #12]
 80129ec:	2b06      	cmp	r3, #6
 80129ee:	d102      	bne.n	80129f6 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 80129f0:	2302      	movs	r3, #2
 80129f2:	75fb      	strb	r3, [r7, #23]
 80129f4:	e001      	b.n	80129fa <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 80129f6:	230f      	movs	r3, #15
 80129f8:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 80129fa:	7dfb      	ldrb	r3, [r7, #23]
}
 80129fc:	4618      	mov	r0, r3
 80129fe:	371c      	adds	r7, #28
 8012a00:	46bd      	mov	sp, r7
 8012a02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012a06:	4770      	bx	lr

08012a08 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8012a08:	b480      	push	{r7}
 8012a0a:	b085      	sub	sp, #20
 8012a0c:	af00      	add	r7, sp, #0
 8012a0e:	6078      	str	r0, [r7, #4]
 8012a10:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8012a12:	687b      	ldr	r3, [r7, #4]
 8012a14:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8012a16:	683b      	ldr	r3, [r7, #0]
 8012a18:	781b      	ldrb	r3, [r3, #0]
 8012a1a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8012a1c:	683b      	ldr	r3, [r7, #0]
 8012a1e:	785b      	ldrb	r3, [r3, #1]
 8012a20:	2b01      	cmp	r3, #1
 8012a22:	d139      	bne.n	8012a98 <USB_ActivateEndpoint+0x90>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8012a24:	68fb      	ldr	r3, [r7, #12]
 8012a26:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8012a2a:	69da      	ldr	r2, [r3, #28]
 8012a2c:	683b      	ldr	r3, [r7, #0]
 8012a2e:	781b      	ldrb	r3, [r3, #0]
 8012a30:	f003 030f 	and.w	r3, r3, #15
 8012a34:	2101      	movs	r1, #1
 8012a36:	fa01 f303 	lsl.w	r3, r1, r3
 8012a3a:	b29b      	uxth	r3, r3
 8012a3c:	68f9      	ldr	r1, [r7, #12]
 8012a3e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8012a42:	4313      	orrs	r3, r2
 8012a44:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8012a46:	68bb      	ldr	r3, [r7, #8]
 8012a48:	015a      	lsls	r2, r3, #5
 8012a4a:	68fb      	ldr	r3, [r7, #12]
 8012a4c:	4413      	add	r3, r2
 8012a4e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8012a52:	681b      	ldr	r3, [r3, #0]
 8012a54:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8012a58:	2b00      	cmp	r3, #0
 8012a5a:	d153      	bne.n	8012b04 <USB_ActivateEndpoint+0xfc>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8012a5c:	68bb      	ldr	r3, [r7, #8]
 8012a5e:	015a      	lsls	r2, r3, #5
 8012a60:	68fb      	ldr	r3, [r7, #12]
 8012a62:	4413      	add	r3, r2
 8012a64:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8012a68:	681a      	ldr	r2, [r3, #0]
 8012a6a:	683b      	ldr	r3, [r7, #0]
 8012a6c:	689b      	ldr	r3, [r3, #8]
 8012a6e:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8012a72:	683b      	ldr	r3, [r7, #0]
 8012a74:	78db      	ldrb	r3, [r3, #3]
 8012a76:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8012a78:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8012a7a:	68bb      	ldr	r3, [r7, #8]
 8012a7c:	059b      	lsls	r3, r3, #22
 8012a7e:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8012a80:	431a      	orrs	r2, r3
 8012a82:	68bb      	ldr	r3, [r7, #8]
 8012a84:	0159      	lsls	r1, r3, #5
 8012a86:	68fb      	ldr	r3, [r7, #12]
 8012a88:	440b      	add	r3, r1
 8012a8a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8012a8e:	4619      	mov	r1, r3
 8012a90:	4b20      	ldr	r3, [pc, #128]	; (8012b14 <USB_ActivateEndpoint+0x10c>)
 8012a92:	4313      	orrs	r3, r2
 8012a94:	600b      	str	r3, [r1, #0]
 8012a96:	e035      	b.n	8012b04 <USB_ActivateEndpoint+0xfc>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8012a98:	68fb      	ldr	r3, [r7, #12]
 8012a9a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8012a9e:	69da      	ldr	r2, [r3, #28]
 8012aa0:	683b      	ldr	r3, [r7, #0]
 8012aa2:	781b      	ldrb	r3, [r3, #0]
 8012aa4:	f003 030f 	and.w	r3, r3, #15
 8012aa8:	2101      	movs	r1, #1
 8012aaa:	fa01 f303 	lsl.w	r3, r1, r3
 8012aae:	041b      	lsls	r3, r3, #16
 8012ab0:	68f9      	ldr	r1, [r7, #12]
 8012ab2:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8012ab6:	4313      	orrs	r3, r2
 8012ab8:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8012aba:	68bb      	ldr	r3, [r7, #8]
 8012abc:	015a      	lsls	r2, r3, #5
 8012abe:	68fb      	ldr	r3, [r7, #12]
 8012ac0:	4413      	add	r3, r2
 8012ac2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8012ac6:	681b      	ldr	r3, [r3, #0]
 8012ac8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8012acc:	2b00      	cmp	r3, #0
 8012ace:	d119      	bne.n	8012b04 <USB_ActivateEndpoint+0xfc>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8012ad0:	68bb      	ldr	r3, [r7, #8]
 8012ad2:	015a      	lsls	r2, r3, #5
 8012ad4:	68fb      	ldr	r3, [r7, #12]
 8012ad6:	4413      	add	r3, r2
 8012ad8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8012adc:	681a      	ldr	r2, [r3, #0]
 8012ade:	683b      	ldr	r3, [r7, #0]
 8012ae0:	689b      	ldr	r3, [r3, #8]
 8012ae2:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8012ae6:	683b      	ldr	r3, [r7, #0]
 8012ae8:	78db      	ldrb	r3, [r3, #3]
 8012aea:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8012aec:	430b      	orrs	r3, r1
 8012aee:	431a      	orrs	r2, r3
 8012af0:	68bb      	ldr	r3, [r7, #8]
 8012af2:	0159      	lsls	r1, r3, #5
 8012af4:	68fb      	ldr	r3, [r7, #12]
 8012af6:	440b      	add	r3, r1
 8012af8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8012afc:	4619      	mov	r1, r3
 8012afe:	4b05      	ldr	r3, [pc, #20]	; (8012b14 <USB_ActivateEndpoint+0x10c>)
 8012b00:	4313      	orrs	r3, r2
 8012b02:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8012b04:	2300      	movs	r3, #0
}
 8012b06:	4618      	mov	r0, r3
 8012b08:	3714      	adds	r7, #20
 8012b0a:	46bd      	mov	sp, r7
 8012b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012b10:	4770      	bx	lr
 8012b12:	bf00      	nop
 8012b14:	10008000 	.word	0x10008000

08012b18 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8012b18:	b480      	push	{r7}
 8012b1a:	b085      	sub	sp, #20
 8012b1c:	af00      	add	r7, sp, #0
 8012b1e:	6078      	str	r0, [r7, #4]
 8012b20:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8012b22:	687b      	ldr	r3, [r7, #4]
 8012b24:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8012b26:	683b      	ldr	r3, [r7, #0]
 8012b28:	781b      	ldrb	r3, [r3, #0]
 8012b2a:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8012b2c:	683b      	ldr	r3, [r7, #0]
 8012b2e:	785b      	ldrb	r3, [r3, #1]
 8012b30:	2b01      	cmp	r3, #1
 8012b32:	d161      	bne.n	8012bf8 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8012b34:	68bb      	ldr	r3, [r7, #8]
 8012b36:	015a      	lsls	r2, r3, #5
 8012b38:	68fb      	ldr	r3, [r7, #12]
 8012b3a:	4413      	add	r3, r2
 8012b3c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8012b40:	681b      	ldr	r3, [r3, #0]
 8012b42:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8012b46:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8012b4a:	d11f      	bne.n	8012b8c <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8012b4c:	68bb      	ldr	r3, [r7, #8]
 8012b4e:	015a      	lsls	r2, r3, #5
 8012b50:	68fb      	ldr	r3, [r7, #12]
 8012b52:	4413      	add	r3, r2
 8012b54:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8012b58:	681b      	ldr	r3, [r3, #0]
 8012b5a:	68ba      	ldr	r2, [r7, #8]
 8012b5c:	0151      	lsls	r1, r2, #5
 8012b5e:	68fa      	ldr	r2, [r7, #12]
 8012b60:	440a      	add	r2, r1
 8012b62:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8012b66:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8012b6a:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8012b6c:	68bb      	ldr	r3, [r7, #8]
 8012b6e:	015a      	lsls	r2, r3, #5
 8012b70:	68fb      	ldr	r3, [r7, #12]
 8012b72:	4413      	add	r3, r2
 8012b74:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8012b78:	681b      	ldr	r3, [r3, #0]
 8012b7a:	68ba      	ldr	r2, [r7, #8]
 8012b7c:	0151      	lsls	r1, r2, #5
 8012b7e:	68fa      	ldr	r2, [r7, #12]
 8012b80:	440a      	add	r2, r1
 8012b82:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8012b86:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8012b8a:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8012b8c:	68fb      	ldr	r3, [r7, #12]
 8012b8e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8012b92:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8012b94:	683b      	ldr	r3, [r7, #0]
 8012b96:	781b      	ldrb	r3, [r3, #0]
 8012b98:	f003 030f 	and.w	r3, r3, #15
 8012b9c:	2101      	movs	r1, #1
 8012b9e:	fa01 f303 	lsl.w	r3, r1, r3
 8012ba2:	b29b      	uxth	r3, r3
 8012ba4:	43db      	mvns	r3, r3
 8012ba6:	68f9      	ldr	r1, [r7, #12]
 8012ba8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8012bac:	4013      	ands	r3, r2
 8012bae:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8012bb0:	68fb      	ldr	r3, [r7, #12]
 8012bb2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8012bb6:	69da      	ldr	r2, [r3, #28]
 8012bb8:	683b      	ldr	r3, [r7, #0]
 8012bba:	781b      	ldrb	r3, [r3, #0]
 8012bbc:	f003 030f 	and.w	r3, r3, #15
 8012bc0:	2101      	movs	r1, #1
 8012bc2:	fa01 f303 	lsl.w	r3, r1, r3
 8012bc6:	b29b      	uxth	r3, r3
 8012bc8:	43db      	mvns	r3, r3
 8012bca:	68f9      	ldr	r1, [r7, #12]
 8012bcc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8012bd0:	4013      	ands	r3, r2
 8012bd2:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8012bd4:	68bb      	ldr	r3, [r7, #8]
 8012bd6:	015a      	lsls	r2, r3, #5
 8012bd8:	68fb      	ldr	r3, [r7, #12]
 8012bda:	4413      	add	r3, r2
 8012bdc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8012be0:	681a      	ldr	r2, [r3, #0]
 8012be2:	68bb      	ldr	r3, [r7, #8]
 8012be4:	0159      	lsls	r1, r3, #5
 8012be6:	68fb      	ldr	r3, [r7, #12]
 8012be8:	440b      	add	r3, r1
 8012bea:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8012bee:	4619      	mov	r1, r3
 8012bf0:	4b35      	ldr	r3, [pc, #212]	; (8012cc8 <USB_DeactivateEndpoint+0x1b0>)
 8012bf2:	4013      	ands	r3, r2
 8012bf4:	600b      	str	r3, [r1, #0]
 8012bf6:	e060      	b.n	8012cba <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8012bf8:	68bb      	ldr	r3, [r7, #8]
 8012bfa:	015a      	lsls	r2, r3, #5
 8012bfc:	68fb      	ldr	r3, [r7, #12]
 8012bfe:	4413      	add	r3, r2
 8012c00:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8012c04:	681b      	ldr	r3, [r3, #0]
 8012c06:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8012c0a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8012c0e:	d11f      	bne.n	8012c50 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8012c10:	68bb      	ldr	r3, [r7, #8]
 8012c12:	015a      	lsls	r2, r3, #5
 8012c14:	68fb      	ldr	r3, [r7, #12]
 8012c16:	4413      	add	r3, r2
 8012c18:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8012c1c:	681b      	ldr	r3, [r3, #0]
 8012c1e:	68ba      	ldr	r2, [r7, #8]
 8012c20:	0151      	lsls	r1, r2, #5
 8012c22:	68fa      	ldr	r2, [r7, #12]
 8012c24:	440a      	add	r2, r1
 8012c26:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8012c2a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8012c2e:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8012c30:	68bb      	ldr	r3, [r7, #8]
 8012c32:	015a      	lsls	r2, r3, #5
 8012c34:	68fb      	ldr	r3, [r7, #12]
 8012c36:	4413      	add	r3, r2
 8012c38:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8012c3c:	681b      	ldr	r3, [r3, #0]
 8012c3e:	68ba      	ldr	r2, [r7, #8]
 8012c40:	0151      	lsls	r1, r2, #5
 8012c42:	68fa      	ldr	r2, [r7, #12]
 8012c44:	440a      	add	r2, r1
 8012c46:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8012c4a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8012c4e:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8012c50:	68fb      	ldr	r3, [r7, #12]
 8012c52:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8012c56:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8012c58:	683b      	ldr	r3, [r7, #0]
 8012c5a:	781b      	ldrb	r3, [r3, #0]
 8012c5c:	f003 030f 	and.w	r3, r3, #15
 8012c60:	2101      	movs	r1, #1
 8012c62:	fa01 f303 	lsl.w	r3, r1, r3
 8012c66:	041b      	lsls	r3, r3, #16
 8012c68:	43db      	mvns	r3, r3
 8012c6a:	68f9      	ldr	r1, [r7, #12]
 8012c6c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8012c70:	4013      	ands	r3, r2
 8012c72:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8012c74:	68fb      	ldr	r3, [r7, #12]
 8012c76:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8012c7a:	69da      	ldr	r2, [r3, #28]
 8012c7c:	683b      	ldr	r3, [r7, #0]
 8012c7e:	781b      	ldrb	r3, [r3, #0]
 8012c80:	f003 030f 	and.w	r3, r3, #15
 8012c84:	2101      	movs	r1, #1
 8012c86:	fa01 f303 	lsl.w	r3, r1, r3
 8012c8a:	041b      	lsls	r3, r3, #16
 8012c8c:	43db      	mvns	r3, r3
 8012c8e:	68f9      	ldr	r1, [r7, #12]
 8012c90:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8012c94:	4013      	ands	r3, r2
 8012c96:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8012c98:	68bb      	ldr	r3, [r7, #8]
 8012c9a:	015a      	lsls	r2, r3, #5
 8012c9c:	68fb      	ldr	r3, [r7, #12]
 8012c9e:	4413      	add	r3, r2
 8012ca0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8012ca4:	681a      	ldr	r2, [r3, #0]
 8012ca6:	68bb      	ldr	r3, [r7, #8]
 8012ca8:	0159      	lsls	r1, r3, #5
 8012caa:	68fb      	ldr	r3, [r7, #12]
 8012cac:	440b      	add	r3, r1
 8012cae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8012cb2:	4619      	mov	r1, r3
 8012cb4:	4b05      	ldr	r3, [pc, #20]	; (8012ccc <USB_DeactivateEndpoint+0x1b4>)
 8012cb6:	4013      	ands	r3, r2
 8012cb8:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8012cba:	2300      	movs	r3, #0
}
 8012cbc:	4618      	mov	r0, r3
 8012cbe:	3714      	adds	r7, #20
 8012cc0:	46bd      	mov	sp, r7
 8012cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012cc6:	4770      	bx	lr
 8012cc8:	ec337800 	.word	0xec337800
 8012ccc:	eff37800 	.word	0xeff37800

08012cd0 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8012cd0:	b580      	push	{r7, lr}
 8012cd2:	b08a      	sub	sp, #40	; 0x28
 8012cd4:	af02      	add	r7, sp, #8
 8012cd6:	60f8      	str	r0, [r7, #12]
 8012cd8:	60b9      	str	r1, [r7, #8]
 8012cda:	4613      	mov	r3, r2
 8012cdc:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8012cde:	68fb      	ldr	r3, [r7, #12]
 8012ce0:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8012ce2:	68bb      	ldr	r3, [r7, #8]
 8012ce4:	781b      	ldrb	r3, [r3, #0]
 8012ce6:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8012ce8:	68bb      	ldr	r3, [r7, #8]
 8012cea:	785b      	ldrb	r3, [r3, #1]
 8012cec:	2b01      	cmp	r3, #1
 8012cee:	f040 8163 	bne.w	8012fb8 <USB_EPStartXfer+0x2e8>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8012cf2:	68bb      	ldr	r3, [r7, #8]
 8012cf4:	695b      	ldr	r3, [r3, #20]
 8012cf6:	2b00      	cmp	r3, #0
 8012cf8:	d132      	bne.n	8012d60 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8012cfa:	69bb      	ldr	r3, [r7, #24]
 8012cfc:	015a      	lsls	r2, r3, #5
 8012cfe:	69fb      	ldr	r3, [r7, #28]
 8012d00:	4413      	add	r3, r2
 8012d02:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8012d06:	691a      	ldr	r2, [r3, #16]
 8012d08:	69bb      	ldr	r3, [r7, #24]
 8012d0a:	0159      	lsls	r1, r3, #5
 8012d0c:	69fb      	ldr	r3, [r7, #28]
 8012d0e:	440b      	add	r3, r1
 8012d10:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8012d14:	4619      	mov	r1, r3
 8012d16:	4ba5      	ldr	r3, [pc, #660]	; (8012fac <USB_EPStartXfer+0x2dc>)
 8012d18:	4013      	ands	r3, r2
 8012d1a:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8012d1c:	69bb      	ldr	r3, [r7, #24]
 8012d1e:	015a      	lsls	r2, r3, #5
 8012d20:	69fb      	ldr	r3, [r7, #28]
 8012d22:	4413      	add	r3, r2
 8012d24:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8012d28:	691b      	ldr	r3, [r3, #16]
 8012d2a:	69ba      	ldr	r2, [r7, #24]
 8012d2c:	0151      	lsls	r1, r2, #5
 8012d2e:	69fa      	ldr	r2, [r7, #28]
 8012d30:	440a      	add	r2, r1
 8012d32:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8012d36:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8012d3a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8012d3c:	69bb      	ldr	r3, [r7, #24]
 8012d3e:	015a      	lsls	r2, r3, #5
 8012d40:	69fb      	ldr	r3, [r7, #28]
 8012d42:	4413      	add	r3, r2
 8012d44:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8012d48:	691a      	ldr	r2, [r3, #16]
 8012d4a:	69bb      	ldr	r3, [r7, #24]
 8012d4c:	0159      	lsls	r1, r3, #5
 8012d4e:	69fb      	ldr	r3, [r7, #28]
 8012d50:	440b      	add	r3, r1
 8012d52:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8012d56:	4619      	mov	r1, r3
 8012d58:	4b95      	ldr	r3, [pc, #596]	; (8012fb0 <USB_EPStartXfer+0x2e0>)
 8012d5a:	4013      	ands	r3, r2
 8012d5c:	610b      	str	r3, [r1, #16]
 8012d5e:	e074      	b.n	8012e4a <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8012d60:	69bb      	ldr	r3, [r7, #24]
 8012d62:	015a      	lsls	r2, r3, #5
 8012d64:	69fb      	ldr	r3, [r7, #28]
 8012d66:	4413      	add	r3, r2
 8012d68:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8012d6c:	691a      	ldr	r2, [r3, #16]
 8012d6e:	69bb      	ldr	r3, [r7, #24]
 8012d70:	0159      	lsls	r1, r3, #5
 8012d72:	69fb      	ldr	r3, [r7, #28]
 8012d74:	440b      	add	r3, r1
 8012d76:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8012d7a:	4619      	mov	r1, r3
 8012d7c:	4b8c      	ldr	r3, [pc, #560]	; (8012fb0 <USB_EPStartXfer+0x2e0>)
 8012d7e:	4013      	ands	r3, r2
 8012d80:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8012d82:	69bb      	ldr	r3, [r7, #24]
 8012d84:	015a      	lsls	r2, r3, #5
 8012d86:	69fb      	ldr	r3, [r7, #28]
 8012d88:	4413      	add	r3, r2
 8012d8a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8012d8e:	691a      	ldr	r2, [r3, #16]
 8012d90:	69bb      	ldr	r3, [r7, #24]
 8012d92:	0159      	lsls	r1, r3, #5
 8012d94:	69fb      	ldr	r3, [r7, #28]
 8012d96:	440b      	add	r3, r1
 8012d98:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8012d9c:	4619      	mov	r1, r3
 8012d9e:	4b83      	ldr	r3, [pc, #524]	; (8012fac <USB_EPStartXfer+0x2dc>)
 8012da0:	4013      	ands	r3, r2
 8012da2:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8012da4:	69bb      	ldr	r3, [r7, #24]
 8012da6:	015a      	lsls	r2, r3, #5
 8012da8:	69fb      	ldr	r3, [r7, #28]
 8012daa:	4413      	add	r3, r2
 8012dac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8012db0:	691a      	ldr	r2, [r3, #16]
 8012db2:	68bb      	ldr	r3, [r7, #8]
 8012db4:	6959      	ldr	r1, [r3, #20]
 8012db6:	68bb      	ldr	r3, [r7, #8]
 8012db8:	689b      	ldr	r3, [r3, #8]
 8012dba:	440b      	add	r3, r1
 8012dbc:	1e59      	subs	r1, r3, #1
 8012dbe:	68bb      	ldr	r3, [r7, #8]
 8012dc0:	689b      	ldr	r3, [r3, #8]
 8012dc2:	fbb1 f3f3 	udiv	r3, r1, r3
 8012dc6:	04d9      	lsls	r1, r3, #19
 8012dc8:	4b7a      	ldr	r3, [pc, #488]	; (8012fb4 <USB_EPStartXfer+0x2e4>)
 8012dca:	400b      	ands	r3, r1
 8012dcc:	69b9      	ldr	r1, [r7, #24]
 8012dce:	0148      	lsls	r0, r1, #5
 8012dd0:	69f9      	ldr	r1, [r7, #28]
 8012dd2:	4401      	add	r1, r0
 8012dd4:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8012dd8:	4313      	orrs	r3, r2
 8012dda:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8012ddc:	69bb      	ldr	r3, [r7, #24]
 8012dde:	015a      	lsls	r2, r3, #5
 8012de0:	69fb      	ldr	r3, [r7, #28]
 8012de2:	4413      	add	r3, r2
 8012de4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8012de8:	691a      	ldr	r2, [r3, #16]
 8012dea:	68bb      	ldr	r3, [r7, #8]
 8012dec:	695b      	ldr	r3, [r3, #20]
 8012dee:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8012df2:	69b9      	ldr	r1, [r7, #24]
 8012df4:	0148      	lsls	r0, r1, #5
 8012df6:	69f9      	ldr	r1, [r7, #28]
 8012df8:	4401      	add	r1, r0
 8012dfa:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8012dfe:	4313      	orrs	r3, r2
 8012e00:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8012e02:	68bb      	ldr	r3, [r7, #8]
 8012e04:	78db      	ldrb	r3, [r3, #3]
 8012e06:	2b01      	cmp	r3, #1
 8012e08:	d11f      	bne.n	8012e4a <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8012e0a:	69bb      	ldr	r3, [r7, #24]
 8012e0c:	015a      	lsls	r2, r3, #5
 8012e0e:	69fb      	ldr	r3, [r7, #28]
 8012e10:	4413      	add	r3, r2
 8012e12:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8012e16:	691b      	ldr	r3, [r3, #16]
 8012e18:	69ba      	ldr	r2, [r7, #24]
 8012e1a:	0151      	lsls	r1, r2, #5
 8012e1c:	69fa      	ldr	r2, [r7, #28]
 8012e1e:	440a      	add	r2, r1
 8012e20:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8012e24:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8012e28:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8012e2a:	69bb      	ldr	r3, [r7, #24]
 8012e2c:	015a      	lsls	r2, r3, #5
 8012e2e:	69fb      	ldr	r3, [r7, #28]
 8012e30:	4413      	add	r3, r2
 8012e32:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8012e36:	691b      	ldr	r3, [r3, #16]
 8012e38:	69ba      	ldr	r2, [r7, #24]
 8012e3a:	0151      	lsls	r1, r2, #5
 8012e3c:	69fa      	ldr	r2, [r7, #28]
 8012e3e:	440a      	add	r2, r1
 8012e40:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8012e44:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8012e48:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 8012e4a:	79fb      	ldrb	r3, [r7, #7]
 8012e4c:	2b01      	cmp	r3, #1
 8012e4e:	d14b      	bne.n	8012ee8 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8012e50:	68bb      	ldr	r3, [r7, #8]
 8012e52:	691b      	ldr	r3, [r3, #16]
 8012e54:	2b00      	cmp	r3, #0
 8012e56:	d009      	beq.n	8012e6c <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8012e58:	69bb      	ldr	r3, [r7, #24]
 8012e5a:	015a      	lsls	r2, r3, #5
 8012e5c:	69fb      	ldr	r3, [r7, #28]
 8012e5e:	4413      	add	r3, r2
 8012e60:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8012e64:	461a      	mov	r2, r3
 8012e66:	68bb      	ldr	r3, [r7, #8]
 8012e68:	691b      	ldr	r3, [r3, #16]
 8012e6a:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8012e6c:	68bb      	ldr	r3, [r7, #8]
 8012e6e:	78db      	ldrb	r3, [r3, #3]
 8012e70:	2b01      	cmp	r3, #1
 8012e72:	d128      	bne.n	8012ec6 <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8012e74:	69fb      	ldr	r3, [r7, #28]
 8012e76:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8012e7a:	689b      	ldr	r3, [r3, #8]
 8012e7c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8012e80:	2b00      	cmp	r3, #0
 8012e82:	d110      	bne.n	8012ea6 <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8012e84:	69bb      	ldr	r3, [r7, #24]
 8012e86:	015a      	lsls	r2, r3, #5
 8012e88:	69fb      	ldr	r3, [r7, #28]
 8012e8a:	4413      	add	r3, r2
 8012e8c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8012e90:	681b      	ldr	r3, [r3, #0]
 8012e92:	69ba      	ldr	r2, [r7, #24]
 8012e94:	0151      	lsls	r1, r2, #5
 8012e96:	69fa      	ldr	r2, [r7, #28]
 8012e98:	440a      	add	r2, r1
 8012e9a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8012e9e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8012ea2:	6013      	str	r3, [r2, #0]
 8012ea4:	e00f      	b.n	8012ec6 <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8012ea6:	69bb      	ldr	r3, [r7, #24]
 8012ea8:	015a      	lsls	r2, r3, #5
 8012eaa:	69fb      	ldr	r3, [r7, #28]
 8012eac:	4413      	add	r3, r2
 8012eae:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8012eb2:	681b      	ldr	r3, [r3, #0]
 8012eb4:	69ba      	ldr	r2, [r7, #24]
 8012eb6:	0151      	lsls	r1, r2, #5
 8012eb8:	69fa      	ldr	r2, [r7, #28]
 8012eba:	440a      	add	r2, r1
 8012ebc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8012ec0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8012ec4:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8012ec6:	69bb      	ldr	r3, [r7, #24]
 8012ec8:	015a      	lsls	r2, r3, #5
 8012eca:	69fb      	ldr	r3, [r7, #28]
 8012ecc:	4413      	add	r3, r2
 8012ece:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8012ed2:	681b      	ldr	r3, [r3, #0]
 8012ed4:	69ba      	ldr	r2, [r7, #24]
 8012ed6:	0151      	lsls	r1, r2, #5
 8012ed8:	69fa      	ldr	r2, [r7, #28]
 8012eda:	440a      	add	r2, r1
 8012edc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8012ee0:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8012ee4:	6013      	str	r3, [r2, #0]
 8012ee6:	e133      	b.n	8013150 <USB_EPStartXfer+0x480>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8012ee8:	69bb      	ldr	r3, [r7, #24]
 8012eea:	015a      	lsls	r2, r3, #5
 8012eec:	69fb      	ldr	r3, [r7, #28]
 8012eee:	4413      	add	r3, r2
 8012ef0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8012ef4:	681b      	ldr	r3, [r3, #0]
 8012ef6:	69ba      	ldr	r2, [r7, #24]
 8012ef8:	0151      	lsls	r1, r2, #5
 8012efa:	69fa      	ldr	r2, [r7, #28]
 8012efc:	440a      	add	r2, r1
 8012efe:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8012f02:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8012f06:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8012f08:	68bb      	ldr	r3, [r7, #8]
 8012f0a:	78db      	ldrb	r3, [r3, #3]
 8012f0c:	2b01      	cmp	r3, #1
 8012f0e:	d015      	beq.n	8012f3c <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8012f10:	68bb      	ldr	r3, [r7, #8]
 8012f12:	695b      	ldr	r3, [r3, #20]
 8012f14:	2b00      	cmp	r3, #0
 8012f16:	f000 811b 	beq.w	8013150 <USB_EPStartXfer+0x480>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8012f1a:	69fb      	ldr	r3, [r7, #28]
 8012f1c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8012f20:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8012f22:	68bb      	ldr	r3, [r7, #8]
 8012f24:	781b      	ldrb	r3, [r3, #0]
 8012f26:	f003 030f 	and.w	r3, r3, #15
 8012f2a:	2101      	movs	r1, #1
 8012f2c:	fa01 f303 	lsl.w	r3, r1, r3
 8012f30:	69f9      	ldr	r1, [r7, #28]
 8012f32:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8012f36:	4313      	orrs	r3, r2
 8012f38:	634b      	str	r3, [r1, #52]	; 0x34
 8012f3a:	e109      	b.n	8013150 <USB_EPStartXfer+0x480>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8012f3c:	69fb      	ldr	r3, [r7, #28]
 8012f3e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8012f42:	689b      	ldr	r3, [r3, #8]
 8012f44:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8012f48:	2b00      	cmp	r3, #0
 8012f4a:	d110      	bne.n	8012f6e <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8012f4c:	69bb      	ldr	r3, [r7, #24]
 8012f4e:	015a      	lsls	r2, r3, #5
 8012f50:	69fb      	ldr	r3, [r7, #28]
 8012f52:	4413      	add	r3, r2
 8012f54:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8012f58:	681b      	ldr	r3, [r3, #0]
 8012f5a:	69ba      	ldr	r2, [r7, #24]
 8012f5c:	0151      	lsls	r1, r2, #5
 8012f5e:	69fa      	ldr	r2, [r7, #28]
 8012f60:	440a      	add	r2, r1
 8012f62:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8012f66:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8012f6a:	6013      	str	r3, [r2, #0]
 8012f6c:	e00f      	b.n	8012f8e <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8012f6e:	69bb      	ldr	r3, [r7, #24]
 8012f70:	015a      	lsls	r2, r3, #5
 8012f72:	69fb      	ldr	r3, [r7, #28]
 8012f74:	4413      	add	r3, r2
 8012f76:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8012f7a:	681b      	ldr	r3, [r3, #0]
 8012f7c:	69ba      	ldr	r2, [r7, #24]
 8012f7e:	0151      	lsls	r1, r2, #5
 8012f80:	69fa      	ldr	r2, [r7, #28]
 8012f82:	440a      	add	r2, r1
 8012f84:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8012f88:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8012f8c:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8012f8e:	68bb      	ldr	r3, [r7, #8]
 8012f90:	68d9      	ldr	r1, [r3, #12]
 8012f92:	68bb      	ldr	r3, [r7, #8]
 8012f94:	781a      	ldrb	r2, [r3, #0]
 8012f96:	68bb      	ldr	r3, [r7, #8]
 8012f98:	695b      	ldr	r3, [r3, #20]
 8012f9a:	b298      	uxth	r0, r3
 8012f9c:	79fb      	ldrb	r3, [r7, #7]
 8012f9e:	9300      	str	r3, [sp, #0]
 8012fa0:	4603      	mov	r3, r0
 8012fa2:	68f8      	ldr	r0, [r7, #12]
 8012fa4:	f000 fa38 	bl	8013418 <USB_WritePacket>
 8012fa8:	e0d2      	b.n	8013150 <USB_EPStartXfer+0x480>
 8012faa:	bf00      	nop
 8012fac:	e007ffff 	.word	0xe007ffff
 8012fb0:	fff80000 	.word	0xfff80000
 8012fb4:	1ff80000 	.word	0x1ff80000
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8012fb8:	69bb      	ldr	r3, [r7, #24]
 8012fba:	015a      	lsls	r2, r3, #5
 8012fbc:	69fb      	ldr	r3, [r7, #28]
 8012fbe:	4413      	add	r3, r2
 8012fc0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8012fc4:	691a      	ldr	r2, [r3, #16]
 8012fc6:	69bb      	ldr	r3, [r7, #24]
 8012fc8:	0159      	lsls	r1, r3, #5
 8012fca:	69fb      	ldr	r3, [r7, #28]
 8012fcc:	440b      	add	r3, r1
 8012fce:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8012fd2:	4619      	mov	r1, r3
 8012fd4:	4b61      	ldr	r3, [pc, #388]	; (801315c <USB_EPStartXfer+0x48c>)
 8012fd6:	4013      	ands	r3, r2
 8012fd8:	610b      	str	r3, [r1, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8012fda:	69bb      	ldr	r3, [r7, #24]
 8012fdc:	015a      	lsls	r2, r3, #5
 8012fde:	69fb      	ldr	r3, [r7, #28]
 8012fe0:	4413      	add	r3, r2
 8012fe2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8012fe6:	691a      	ldr	r2, [r3, #16]
 8012fe8:	69bb      	ldr	r3, [r7, #24]
 8012fea:	0159      	lsls	r1, r3, #5
 8012fec:	69fb      	ldr	r3, [r7, #28]
 8012fee:	440b      	add	r3, r1
 8012ff0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8012ff4:	4619      	mov	r1, r3
 8012ff6:	4b5a      	ldr	r3, [pc, #360]	; (8013160 <USB_EPStartXfer+0x490>)
 8012ff8:	4013      	ands	r3, r2
 8012ffa:	610b      	str	r3, [r1, #16]

    if (ep->xfer_len == 0U)
 8012ffc:	68bb      	ldr	r3, [r7, #8]
 8012ffe:	695b      	ldr	r3, [r3, #20]
 8013000:	2b00      	cmp	r3, #0
 8013002:	d123      	bne.n	801304c <USB_EPStartXfer+0x37c>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8013004:	69bb      	ldr	r3, [r7, #24]
 8013006:	015a      	lsls	r2, r3, #5
 8013008:	69fb      	ldr	r3, [r7, #28]
 801300a:	4413      	add	r3, r2
 801300c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8013010:	691a      	ldr	r2, [r3, #16]
 8013012:	68bb      	ldr	r3, [r7, #8]
 8013014:	689b      	ldr	r3, [r3, #8]
 8013016:	f3c3 0312 	ubfx	r3, r3, #0, #19
 801301a:	69b9      	ldr	r1, [r7, #24]
 801301c:	0148      	lsls	r0, r1, #5
 801301e:	69f9      	ldr	r1, [r7, #28]
 8013020:	4401      	add	r1, r0
 8013022:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8013026:	4313      	orrs	r3, r2
 8013028:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 801302a:	69bb      	ldr	r3, [r7, #24]
 801302c:	015a      	lsls	r2, r3, #5
 801302e:	69fb      	ldr	r3, [r7, #28]
 8013030:	4413      	add	r3, r2
 8013032:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8013036:	691b      	ldr	r3, [r3, #16]
 8013038:	69ba      	ldr	r2, [r7, #24]
 801303a:	0151      	lsls	r1, r2, #5
 801303c:	69fa      	ldr	r2, [r7, #28]
 801303e:	440a      	add	r2, r1
 8013040:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8013044:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8013048:	6113      	str	r3, [r2, #16]
 801304a:	e033      	b.n	80130b4 <USB_EPStartXfer+0x3e4>
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 801304c:	68bb      	ldr	r3, [r7, #8]
 801304e:	695a      	ldr	r2, [r3, #20]
 8013050:	68bb      	ldr	r3, [r7, #8]
 8013052:	689b      	ldr	r3, [r3, #8]
 8013054:	4413      	add	r3, r2
 8013056:	1e5a      	subs	r2, r3, #1
 8013058:	68bb      	ldr	r3, [r7, #8]
 801305a:	689b      	ldr	r3, [r3, #8]
 801305c:	fbb2 f3f3 	udiv	r3, r2, r3
 8013060:	82fb      	strh	r3, [r7, #22]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8013062:	69bb      	ldr	r3, [r7, #24]
 8013064:	015a      	lsls	r2, r3, #5
 8013066:	69fb      	ldr	r3, [r7, #28]
 8013068:	4413      	add	r3, r2
 801306a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801306e:	691a      	ldr	r2, [r3, #16]
 8013070:	8afb      	ldrh	r3, [r7, #22]
 8013072:	04d9      	lsls	r1, r3, #19
 8013074:	4b3b      	ldr	r3, [pc, #236]	; (8013164 <USB_EPStartXfer+0x494>)
 8013076:	400b      	ands	r3, r1
 8013078:	69b9      	ldr	r1, [r7, #24]
 801307a:	0148      	lsls	r0, r1, #5
 801307c:	69f9      	ldr	r1, [r7, #28]
 801307e:	4401      	add	r1, r0
 8013080:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8013084:	4313      	orrs	r3, r2
 8013086:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 8013088:	69bb      	ldr	r3, [r7, #24]
 801308a:	015a      	lsls	r2, r3, #5
 801308c:	69fb      	ldr	r3, [r7, #28]
 801308e:	4413      	add	r3, r2
 8013090:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8013094:	691a      	ldr	r2, [r3, #16]
 8013096:	68bb      	ldr	r3, [r7, #8]
 8013098:	689b      	ldr	r3, [r3, #8]
 801309a:	8af9      	ldrh	r1, [r7, #22]
 801309c:	fb01 f303 	mul.w	r3, r1, r3
 80130a0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80130a4:	69b9      	ldr	r1, [r7, #24]
 80130a6:	0148      	lsls	r0, r1, #5
 80130a8:	69f9      	ldr	r1, [r7, #28]
 80130aa:	4401      	add	r1, r0
 80130ac:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80130b0:	4313      	orrs	r3, r2
 80130b2:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 80130b4:	79fb      	ldrb	r3, [r7, #7]
 80130b6:	2b01      	cmp	r3, #1
 80130b8:	d10d      	bne.n	80130d6 <USB_EPStartXfer+0x406>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 80130ba:	68bb      	ldr	r3, [r7, #8]
 80130bc:	68db      	ldr	r3, [r3, #12]
 80130be:	2b00      	cmp	r3, #0
 80130c0:	d009      	beq.n	80130d6 <USB_EPStartXfer+0x406>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 80130c2:	68bb      	ldr	r3, [r7, #8]
 80130c4:	68d9      	ldr	r1, [r3, #12]
 80130c6:	69bb      	ldr	r3, [r7, #24]
 80130c8:	015a      	lsls	r2, r3, #5
 80130ca:	69fb      	ldr	r3, [r7, #28]
 80130cc:	4413      	add	r3, r2
 80130ce:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80130d2:	460a      	mov	r2, r1
 80130d4:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 80130d6:	68bb      	ldr	r3, [r7, #8]
 80130d8:	78db      	ldrb	r3, [r3, #3]
 80130da:	2b01      	cmp	r3, #1
 80130dc:	d128      	bne.n	8013130 <USB_EPStartXfer+0x460>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80130de:	69fb      	ldr	r3, [r7, #28]
 80130e0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80130e4:	689b      	ldr	r3, [r3, #8]
 80130e6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80130ea:	2b00      	cmp	r3, #0
 80130ec:	d110      	bne.n	8013110 <USB_EPStartXfer+0x440>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 80130ee:	69bb      	ldr	r3, [r7, #24]
 80130f0:	015a      	lsls	r2, r3, #5
 80130f2:	69fb      	ldr	r3, [r7, #28]
 80130f4:	4413      	add	r3, r2
 80130f6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80130fa:	681b      	ldr	r3, [r3, #0]
 80130fc:	69ba      	ldr	r2, [r7, #24]
 80130fe:	0151      	lsls	r1, r2, #5
 8013100:	69fa      	ldr	r2, [r7, #28]
 8013102:	440a      	add	r2, r1
 8013104:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8013108:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 801310c:	6013      	str	r3, [r2, #0]
 801310e:	e00f      	b.n	8013130 <USB_EPStartXfer+0x460>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8013110:	69bb      	ldr	r3, [r7, #24]
 8013112:	015a      	lsls	r2, r3, #5
 8013114:	69fb      	ldr	r3, [r7, #28]
 8013116:	4413      	add	r3, r2
 8013118:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801311c:	681b      	ldr	r3, [r3, #0]
 801311e:	69ba      	ldr	r2, [r7, #24]
 8013120:	0151      	lsls	r1, r2, #5
 8013122:	69fa      	ldr	r2, [r7, #28]
 8013124:	440a      	add	r2, r1
 8013126:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 801312a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 801312e:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8013130:	69bb      	ldr	r3, [r7, #24]
 8013132:	015a      	lsls	r2, r3, #5
 8013134:	69fb      	ldr	r3, [r7, #28]
 8013136:	4413      	add	r3, r2
 8013138:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801313c:	681b      	ldr	r3, [r3, #0]
 801313e:	69ba      	ldr	r2, [r7, #24]
 8013140:	0151      	lsls	r1, r2, #5
 8013142:	69fa      	ldr	r2, [r7, #28]
 8013144:	440a      	add	r2, r1
 8013146:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 801314a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 801314e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8013150:	2300      	movs	r3, #0
}
 8013152:	4618      	mov	r0, r3
 8013154:	3720      	adds	r7, #32
 8013156:	46bd      	mov	sp, r7
 8013158:	bd80      	pop	{r7, pc}
 801315a:	bf00      	nop
 801315c:	fff80000 	.word	0xfff80000
 8013160:	e007ffff 	.word	0xe007ffff
 8013164:	1ff80000 	.word	0x1ff80000

08013168 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8013168:	b480      	push	{r7}
 801316a:	b087      	sub	sp, #28
 801316c:	af00      	add	r7, sp, #0
 801316e:	60f8      	str	r0, [r7, #12]
 8013170:	60b9      	str	r1, [r7, #8]
 8013172:	4613      	mov	r3, r2
 8013174:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8013176:	68fb      	ldr	r3, [r7, #12]
 8013178:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 801317a:	68bb      	ldr	r3, [r7, #8]
 801317c:	781b      	ldrb	r3, [r3, #0]
 801317e:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8013180:	68bb      	ldr	r3, [r7, #8]
 8013182:	785b      	ldrb	r3, [r3, #1]
 8013184:	2b01      	cmp	r3, #1
 8013186:	f040 80cd 	bne.w	8013324 <USB_EP0StartXfer+0x1bc>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 801318a:	68bb      	ldr	r3, [r7, #8]
 801318c:	695b      	ldr	r3, [r3, #20]
 801318e:	2b00      	cmp	r3, #0
 8013190:	d132      	bne.n	80131f8 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8013192:	693b      	ldr	r3, [r7, #16]
 8013194:	015a      	lsls	r2, r3, #5
 8013196:	697b      	ldr	r3, [r7, #20]
 8013198:	4413      	add	r3, r2
 801319a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801319e:	691a      	ldr	r2, [r3, #16]
 80131a0:	693b      	ldr	r3, [r7, #16]
 80131a2:	0159      	lsls	r1, r3, #5
 80131a4:	697b      	ldr	r3, [r7, #20]
 80131a6:	440b      	add	r3, r1
 80131a8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80131ac:	4619      	mov	r1, r3
 80131ae:	4b98      	ldr	r3, [pc, #608]	; (8013410 <USB_EP0StartXfer+0x2a8>)
 80131b0:	4013      	ands	r3, r2
 80131b2:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80131b4:	693b      	ldr	r3, [r7, #16]
 80131b6:	015a      	lsls	r2, r3, #5
 80131b8:	697b      	ldr	r3, [r7, #20]
 80131ba:	4413      	add	r3, r2
 80131bc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80131c0:	691b      	ldr	r3, [r3, #16]
 80131c2:	693a      	ldr	r2, [r7, #16]
 80131c4:	0151      	lsls	r1, r2, #5
 80131c6:	697a      	ldr	r2, [r7, #20]
 80131c8:	440a      	add	r2, r1
 80131ca:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80131ce:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80131d2:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80131d4:	693b      	ldr	r3, [r7, #16]
 80131d6:	015a      	lsls	r2, r3, #5
 80131d8:	697b      	ldr	r3, [r7, #20]
 80131da:	4413      	add	r3, r2
 80131dc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80131e0:	691a      	ldr	r2, [r3, #16]
 80131e2:	693b      	ldr	r3, [r7, #16]
 80131e4:	0159      	lsls	r1, r3, #5
 80131e6:	697b      	ldr	r3, [r7, #20]
 80131e8:	440b      	add	r3, r1
 80131ea:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80131ee:	4619      	mov	r1, r3
 80131f0:	4b88      	ldr	r3, [pc, #544]	; (8013414 <USB_EP0StartXfer+0x2ac>)
 80131f2:	4013      	ands	r3, r2
 80131f4:	610b      	str	r3, [r1, #16]
 80131f6:	e04e      	b.n	8013296 <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80131f8:	693b      	ldr	r3, [r7, #16]
 80131fa:	015a      	lsls	r2, r3, #5
 80131fc:	697b      	ldr	r3, [r7, #20]
 80131fe:	4413      	add	r3, r2
 8013200:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013204:	691a      	ldr	r2, [r3, #16]
 8013206:	693b      	ldr	r3, [r7, #16]
 8013208:	0159      	lsls	r1, r3, #5
 801320a:	697b      	ldr	r3, [r7, #20]
 801320c:	440b      	add	r3, r1
 801320e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013212:	4619      	mov	r1, r3
 8013214:	4b7f      	ldr	r3, [pc, #508]	; (8013414 <USB_EP0StartXfer+0x2ac>)
 8013216:	4013      	ands	r3, r2
 8013218:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 801321a:	693b      	ldr	r3, [r7, #16]
 801321c:	015a      	lsls	r2, r3, #5
 801321e:	697b      	ldr	r3, [r7, #20]
 8013220:	4413      	add	r3, r2
 8013222:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013226:	691a      	ldr	r2, [r3, #16]
 8013228:	693b      	ldr	r3, [r7, #16]
 801322a:	0159      	lsls	r1, r3, #5
 801322c:	697b      	ldr	r3, [r7, #20]
 801322e:	440b      	add	r3, r1
 8013230:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013234:	4619      	mov	r1, r3
 8013236:	4b76      	ldr	r3, [pc, #472]	; (8013410 <USB_EP0StartXfer+0x2a8>)
 8013238:	4013      	ands	r3, r2
 801323a:	610b      	str	r3, [r1, #16]

      if (ep->xfer_len > ep->maxpacket)
 801323c:	68bb      	ldr	r3, [r7, #8]
 801323e:	695a      	ldr	r2, [r3, #20]
 8013240:	68bb      	ldr	r3, [r7, #8]
 8013242:	689b      	ldr	r3, [r3, #8]
 8013244:	429a      	cmp	r2, r3
 8013246:	d903      	bls.n	8013250 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 8013248:	68bb      	ldr	r3, [r7, #8]
 801324a:	689a      	ldr	r2, [r3, #8]
 801324c:	68bb      	ldr	r3, [r7, #8]
 801324e:	615a      	str	r2, [r3, #20]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8013250:	693b      	ldr	r3, [r7, #16]
 8013252:	015a      	lsls	r2, r3, #5
 8013254:	697b      	ldr	r3, [r7, #20]
 8013256:	4413      	add	r3, r2
 8013258:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801325c:	691b      	ldr	r3, [r3, #16]
 801325e:	693a      	ldr	r2, [r7, #16]
 8013260:	0151      	lsls	r1, r2, #5
 8013262:	697a      	ldr	r2, [r7, #20]
 8013264:	440a      	add	r2, r1
 8013266:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801326a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 801326e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8013270:	693b      	ldr	r3, [r7, #16]
 8013272:	015a      	lsls	r2, r3, #5
 8013274:	697b      	ldr	r3, [r7, #20]
 8013276:	4413      	add	r3, r2
 8013278:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801327c:	691a      	ldr	r2, [r3, #16]
 801327e:	68bb      	ldr	r3, [r7, #8]
 8013280:	695b      	ldr	r3, [r3, #20]
 8013282:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8013286:	6939      	ldr	r1, [r7, #16]
 8013288:	0148      	lsls	r0, r1, #5
 801328a:	6979      	ldr	r1, [r7, #20]
 801328c:	4401      	add	r1, r0
 801328e:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8013292:	4313      	orrs	r3, r2
 8013294:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8013296:	79fb      	ldrb	r3, [r7, #7]
 8013298:	2b01      	cmp	r3, #1
 801329a:	d11e      	bne.n	80132da <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 801329c:	68bb      	ldr	r3, [r7, #8]
 801329e:	691b      	ldr	r3, [r3, #16]
 80132a0:	2b00      	cmp	r3, #0
 80132a2:	d009      	beq.n	80132b8 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 80132a4:	693b      	ldr	r3, [r7, #16]
 80132a6:	015a      	lsls	r2, r3, #5
 80132a8:	697b      	ldr	r3, [r7, #20]
 80132aa:	4413      	add	r3, r2
 80132ac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80132b0:	461a      	mov	r2, r3
 80132b2:	68bb      	ldr	r3, [r7, #8]
 80132b4:	691b      	ldr	r3, [r3, #16]
 80132b6:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80132b8:	693b      	ldr	r3, [r7, #16]
 80132ba:	015a      	lsls	r2, r3, #5
 80132bc:	697b      	ldr	r3, [r7, #20]
 80132be:	4413      	add	r3, r2
 80132c0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80132c4:	681b      	ldr	r3, [r3, #0]
 80132c6:	693a      	ldr	r2, [r7, #16]
 80132c8:	0151      	lsls	r1, r2, #5
 80132ca:	697a      	ldr	r2, [r7, #20]
 80132cc:	440a      	add	r2, r1
 80132ce:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80132d2:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80132d6:	6013      	str	r3, [r2, #0]
 80132d8:	e092      	b.n	8013400 <USB_EP0StartXfer+0x298>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80132da:	693b      	ldr	r3, [r7, #16]
 80132dc:	015a      	lsls	r2, r3, #5
 80132de:	697b      	ldr	r3, [r7, #20]
 80132e0:	4413      	add	r3, r2
 80132e2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80132e6:	681b      	ldr	r3, [r3, #0]
 80132e8:	693a      	ldr	r2, [r7, #16]
 80132ea:	0151      	lsls	r1, r2, #5
 80132ec:	697a      	ldr	r2, [r7, #20]
 80132ee:	440a      	add	r2, r1
 80132f0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80132f4:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80132f8:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 80132fa:	68bb      	ldr	r3, [r7, #8]
 80132fc:	695b      	ldr	r3, [r3, #20]
 80132fe:	2b00      	cmp	r3, #0
 8013300:	d07e      	beq.n	8013400 <USB_EP0StartXfer+0x298>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8013302:	697b      	ldr	r3, [r7, #20]
 8013304:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8013308:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 801330a:	68bb      	ldr	r3, [r7, #8]
 801330c:	781b      	ldrb	r3, [r3, #0]
 801330e:	f003 030f 	and.w	r3, r3, #15
 8013312:	2101      	movs	r1, #1
 8013314:	fa01 f303 	lsl.w	r3, r1, r3
 8013318:	6979      	ldr	r1, [r7, #20]
 801331a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 801331e:	4313      	orrs	r3, r2
 8013320:	634b      	str	r3, [r1, #52]	; 0x34
 8013322:	e06d      	b.n	8013400 <USB_EP0StartXfer+0x298>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8013324:	693b      	ldr	r3, [r7, #16]
 8013326:	015a      	lsls	r2, r3, #5
 8013328:	697b      	ldr	r3, [r7, #20]
 801332a:	4413      	add	r3, r2
 801332c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8013330:	691a      	ldr	r2, [r3, #16]
 8013332:	693b      	ldr	r3, [r7, #16]
 8013334:	0159      	lsls	r1, r3, #5
 8013336:	697b      	ldr	r3, [r7, #20]
 8013338:	440b      	add	r3, r1
 801333a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801333e:	4619      	mov	r1, r3
 8013340:	4b34      	ldr	r3, [pc, #208]	; (8013414 <USB_EP0StartXfer+0x2ac>)
 8013342:	4013      	ands	r3, r2
 8013344:	610b      	str	r3, [r1, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8013346:	693b      	ldr	r3, [r7, #16]
 8013348:	015a      	lsls	r2, r3, #5
 801334a:	697b      	ldr	r3, [r7, #20]
 801334c:	4413      	add	r3, r2
 801334e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8013352:	691a      	ldr	r2, [r3, #16]
 8013354:	693b      	ldr	r3, [r7, #16]
 8013356:	0159      	lsls	r1, r3, #5
 8013358:	697b      	ldr	r3, [r7, #20]
 801335a:	440b      	add	r3, r1
 801335c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8013360:	4619      	mov	r1, r3
 8013362:	4b2b      	ldr	r3, [pc, #172]	; (8013410 <USB_EP0StartXfer+0x2a8>)
 8013364:	4013      	ands	r3, r2
 8013366:	610b      	str	r3, [r1, #16]

    if (ep->xfer_len > 0U)
 8013368:	68bb      	ldr	r3, [r7, #8]
 801336a:	695b      	ldr	r3, [r3, #20]
 801336c:	2b00      	cmp	r3, #0
 801336e:	d003      	beq.n	8013378 <USB_EP0StartXfer+0x210>
    {
      ep->xfer_len = ep->maxpacket;
 8013370:	68bb      	ldr	r3, [r7, #8]
 8013372:	689a      	ldr	r2, [r3, #8]
 8013374:	68bb      	ldr	r3, [r7, #8]
 8013376:	615a      	str	r2, [r3, #20]
    }

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8013378:	693b      	ldr	r3, [r7, #16]
 801337a:	015a      	lsls	r2, r3, #5
 801337c:	697b      	ldr	r3, [r7, #20]
 801337e:	4413      	add	r3, r2
 8013380:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8013384:	691b      	ldr	r3, [r3, #16]
 8013386:	693a      	ldr	r2, [r7, #16]
 8013388:	0151      	lsls	r1, r2, #5
 801338a:	697a      	ldr	r2, [r7, #20]
 801338c:	440a      	add	r2, r1
 801338e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8013392:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8013396:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 8013398:	693b      	ldr	r3, [r7, #16]
 801339a:	015a      	lsls	r2, r3, #5
 801339c:	697b      	ldr	r3, [r7, #20]
 801339e:	4413      	add	r3, r2
 80133a0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80133a4:	691a      	ldr	r2, [r3, #16]
 80133a6:	68bb      	ldr	r3, [r7, #8]
 80133a8:	689b      	ldr	r3, [r3, #8]
 80133aa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80133ae:	6939      	ldr	r1, [r7, #16]
 80133b0:	0148      	lsls	r0, r1, #5
 80133b2:	6979      	ldr	r1, [r7, #20]
 80133b4:	4401      	add	r1, r0
 80133b6:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80133ba:	4313      	orrs	r3, r2
 80133bc:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 80133be:	79fb      	ldrb	r3, [r7, #7]
 80133c0:	2b01      	cmp	r3, #1
 80133c2:	d10d      	bne.n	80133e0 <USB_EP0StartXfer+0x278>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 80133c4:	68bb      	ldr	r3, [r7, #8]
 80133c6:	68db      	ldr	r3, [r3, #12]
 80133c8:	2b00      	cmp	r3, #0
 80133ca:	d009      	beq.n	80133e0 <USB_EP0StartXfer+0x278>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 80133cc:	68bb      	ldr	r3, [r7, #8]
 80133ce:	68d9      	ldr	r1, [r3, #12]
 80133d0:	693b      	ldr	r3, [r7, #16]
 80133d2:	015a      	lsls	r2, r3, #5
 80133d4:	697b      	ldr	r3, [r7, #20]
 80133d6:	4413      	add	r3, r2
 80133d8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80133dc:	460a      	mov	r2, r1
 80133de:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 80133e0:	693b      	ldr	r3, [r7, #16]
 80133e2:	015a      	lsls	r2, r3, #5
 80133e4:	697b      	ldr	r3, [r7, #20]
 80133e6:	4413      	add	r3, r2
 80133e8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80133ec:	681b      	ldr	r3, [r3, #0]
 80133ee:	693a      	ldr	r2, [r7, #16]
 80133f0:	0151      	lsls	r1, r2, #5
 80133f2:	697a      	ldr	r2, [r7, #20]
 80133f4:	440a      	add	r2, r1
 80133f6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80133fa:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80133fe:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8013400:	2300      	movs	r3, #0
}
 8013402:	4618      	mov	r0, r3
 8013404:	371c      	adds	r7, #28
 8013406:	46bd      	mov	sp, r7
 8013408:	f85d 7b04 	ldr.w	r7, [sp], #4
 801340c:	4770      	bx	lr
 801340e:	bf00      	nop
 8013410:	e007ffff 	.word	0xe007ffff
 8013414:	fff80000 	.word	0xfff80000

08013418 <USB_WritePacket>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src, uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8013418:	b480      	push	{r7}
 801341a:	b089      	sub	sp, #36	; 0x24
 801341c:	af00      	add	r7, sp, #0
 801341e:	60f8      	str	r0, [r7, #12]
 8013420:	60b9      	str	r1, [r7, #8]
 8013422:	4611      	mov	r1, r2
 8013424:	461a      	mov	r2, r3
 8013426:	460b      	mov	r3, r1
 8013428:	71fb      	strb	r3, [r7, #7]
 801342a:	4613      	mov	r3, r2
 801342c:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801342e:	68fb      	ldr	r3, [r7, #12]
 8013430:	617b      	str	r3, [r7, #20]
  uint32_t *pSrc = (uint32_t *)src;
 8013432:	68bb      	ldr	r3, [r7, #8]
 8013434:	61fb      	str	r3, [r7, #28]
  uint32_t count32b, i;

  if (dma == 0U)
 8013436:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 801343a:	2b00      	cmp	r3, #0
 801343c:	d11a      	bne.n	8013474 <USB_WritePacket+0x5c>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 801343e:	88bb      	ldrh	r3, [r7, #4]
 8013440:	3303      	adds	r3, #3
 8013442:	089b      	lsrs	r3, r3, #2
 8013444:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8013446:	2300      	movs	r3, #0
 8013448:	61bb      	str	r3, [r7, #24]
 801344a:	e00f      	b.n	801346c <USB_WritePacket+0x54>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 801344c:	79fb      	ldrb	r3, [r7, #7]
 801344e:	031a      	lsls	r2, r3, #12
 8013450:	697b      	ldr	r3, [r7, #20]
 8013452:	4413      	add	r3, r2
 8013454:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8013458:	461a      	mov	r2, r3
 801345a:	69fb      	ldr	r3, [r7, #28]
 801345c:	681b      	ldr	r3, [r3, #0]
 801345e:	6013      	str	r3, [r2, #0]
      pSrc++;
 8013460:	69fb      	ldr	r3, [r7, #28]
 8013462:	3304      	adds	r3, #4
 8013464:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8013466:	69bb      	ldr	r3, [r7, #24]
 8013468:	3301      	adds	r3, #1
 801346a:	61bb      	str	r3, [r7, #24]
 801346c:	69ba      	ldr	r2, [r7, #24]
 801346e:	693b      	ldr	r3, [r7, #16]
 8013470:	429a      	cmp	r2, r3
 8013472:	d3eb      	bcc.n	801344c <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8013474:	2300      	movs	r3, #0
}
 8013476:	4618      	mov	r0, r3
 8013478:	3724      	adds	r7, #36	; 0x24
 801347a:	46bd      	mov	sp, r7
 801347c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013480:	4770      	bx	lr

08013482 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8013482:	b480      	push	{r7}
 8013484:	b089      	sub	sp, #36	; 0x24
 8013486:	af00      	add	r7, sp, #0
 8013488:	60f8      	str	r0, [r7, #12]
 801348a:	60b9      	str	r1, [r7, #8]
 801348c:	4613      	mov	r3, r2
 801348e:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8013490:	68fb      	ldr	r3, [r7, #12]
 8013492:	617b      	str	r3, [r7, #20]
  uint32_t *pDest = (uint32_t *)dest;
 8013494:	68bb      	ldr	r3, [r7, #8]
 8013496:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 8013498:	88fb      	ldrh	r3, [r7, #6]
 801349a:	3303      	adds	r3, #3
 801349c:	089b      	lsrs	r3, r3, #2
 801349e:	613b      	str	r3, [r7, #16]

  for (i = 0U; i < count32b; i++)
 80134a0:	2300      	movs	r3, #0
 80134a2:	61bb      	str	r3, [r7, #24]
 80134a4:	e00b      	b.n	80134be <USB_ReadPacket+0x3c>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 80134a6:	697b      	ldr	r3, [r7, #20]
 80134a8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80134ac:	681a      	ldr	r2, [r3, #0]
 80134ae:	69fb      	ldr	r3, [r7, #28]
 80134b0:	601a      	str	r2, [r3, #0]
    pDest++;
 80134b2:	69fb      	ldr	r3, [r7, #28]
 80134b4:	3304      	adds	r3, #4
 80134b6:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 80134b8:	69bb      	ldr	r3, [r7, #24]
 80134ba:	3301      	adds	r3, #1
 80134bc:	61bb      	str	r3, [r7, #24]
 80134be:	69ba      	ldr	r2, [r7, #24]
 80134c0:	693b      	ldr	r3, [r7, #16]
 80134c2:	429a      	cmp	r2, r3
 80134c4:	d3ef      	bcc.n	80134a6 <USB_ReadPacket+0x24>
  }

  return ((void *)pDest);
 80134c6:	69fb      	ldr	r3, [r7, #28]
}
 80134c8:	4618      	mov	r0, r3
 80134ca:	3724      	adds	r7, #36	; 0x24
 80134cc:	46bd      	mov	sp, r7
 80134ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80134d2:	4770      	bx	lr

080134d4 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80134d4:	b480      	push	{r7}
 80134d6:	b085      	sub	sp, #20
 80134d8:	af00      	add	r7, sp, #0
 80134da:	6078      	str	r0, [r7, #4]
 80134dc:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80134de:	687b      	ldr	r3, [r7, #4]
 80134e0:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80134e2:	683b      	ldr	r3, [r7, #0]
 80134e4:	781b      	ldrb	r3, [r3, #0]
 80134e6:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80134e8:	683b      	ldr	r3, [r7, #0]
 80134ea:	785b      	ldrb	r3, [r3, #1]
 80134ec:	2b01      	cmp	r3, #1
 80134ee:	d12c      	bne.n	801354a <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 80134f0:	68bb      	ldr	r3, [r7, #8]
 80134f2:	015a      	lsls	r2, r3, #5
 80134f4:	68fb      	ldr	r3, [r7, #12]
 80134f6:	4413      	add	r3, r2
 80134f8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80134fc:	681b      	ldr	r3, [r3, #0]
 80134fe:	2b00      	cmp	r3, #0
 8013500:	db12      	blt.n	8013528 <USB_EPSetStall+0x54>
 8013502:	68bb      	ldr	r3, [r7, #8]
 8013504:	2b00      	cmp	r3, #0
 8013506:	d00f      	beq.n	8013528 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8013508:	68bb      	ldr	r3, [r7, #8]
 801350a:	015a      	lsls	r2, r3, #5
 801350c:	68fb      	ldr	r3, [r7, #12]
 801350e:	4413      	add	r3, r2
 8013510:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013514:	681b      	ldr	r3, [r3, #0]
 8013516:	68ba      	ldr	r2, [r7, #8]
 8013518:	0151      	lsls	r1, r2, #5
 801351a:	68fa      	ldr	r2, [r7, #12]
 801351c:	440a      	add	r2, r1
 801351e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8013522:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8013526:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8013528:	68bb      	ldr	r3, [r7, #8]
 801352a:	015a      	lsls	r2, r3, #5
 801352c:	68fb      	ldr	r3, [r7, #12]
 801352e:	4413      	add	r3, r2
 8013530:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013534:	681b      	ldr	r3, [r3, #0]
 8013536:	68ba      	ldr	r2, [r7, #8]
 8013538:	0151      	lsls	r1, r2, #5
 801353a:	68fa      	ldr	r2, [r7, #12]
 801353c:	440a      	add	r2, r1
 801353e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8013542:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8013546:	6013      	str	r3, [r2, #0]
 8013548:	e02b      	b.n	80135a2 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 801354a:	68bb      	ldr	r3, [r7, #8]
 801354c:	015a      	lsls	r2, r3, #5
 801354e:	68fb      	ldr	r3, [r7, #12]
 8013550:	4413      	add	r3, r2
 8013552:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8013556:	681b      	ldr	r3, [r3, #0]
 8013558:	2b00      	cmp	r3, #0
 801355a:	db12      	blt.n	8013582 <USB_EPSetStall+0xae>
 801355c:	68bb      	ldr	r3, [r7, #8]
 801355e:	2b00      	cmp	r3, #0
 8013560:	d00f      	beq.n	8013582 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8013562:	68bb      	ldr	r3, [r7, #8]
 8013564:	015a      	lsls	r2, r3, #5
 8013566:	68fb      	ldr	r3, [r7, #12]
 8013568:	4413      	add	r3, r2
 801356a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801356e:	681b      	ldr	r3, [r3, #0]
 8013570:	68ba      	ldr	r2, [r7, #8]
 8013572:	0151      	lsls	r1, r2, #5
 8013574:	68fa      	ldr	r2, [r7, #12]
 8013576:	440a      	add	r2, r1
 8013578:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 801357c:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8013580:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8013582:	68bb      	ldr	r3, [r7, #8]
 8013584:	015a      	lsls	r2, r3, #5
 8013586:	68fb      	ldr	r3, [r7, #12]
 8013588:	4413      	add	r3, r2
 801358a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801358e:	681b      	ldr	r3, [r3, #0]
 8013590:	68ba      	ldr	r2, [r7, #8]
 8013592:	0151      	lsls	r1, r2, #5
 8013594:	68fa      	ldr	r2, [r7, #12]
 8013596:	440a      	add	r2, r1
 8013598:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 801359c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80135a0:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80135a2:	2300      	movs	r3, #0
}
 80135a4:	4618      	mov	r0, r3
 80135a6:	3714      	adds	r7, #20
 80135a8:	46bd      	mov	sp, r7
 80135aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80135ae:	4770      	bx	lr

080135b0 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80135b0:	b480      	push	{r7}
 80135b2:	b085      	sub	sp, #20
 80135b4:	af00      	add	r7, sp, #0
 80135b6:	6078      	str	r0, [r7, #4]
 80135b8:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80135ba:	687b      	ldr	r3, [r7, #4]
 80135bc:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80135be:	683b      	ldr	r3, [r7, #0]
 80135c0:	781b      	ldrb	r3, [r3, #0]
 80135c2:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80135c4:	683b      	ldr	r3, [r7, #0]
 80135c6:	785b      	ldrb	r3, [r3, #1]
 80135c8:	2b01      	cmp	r3, #1
 80135ca:	d128      	bne.n	801361e <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80135cc:	68bb      	ldr	r3, [r7, #8]
 80135ce:	015a      	lsls	r2, r3, #5
 80135d0:	68fb      	ldr	r3, [r7, #12]
 80135d2:	4413      	add	r3, r2
 80135d4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80135d8:	681b      	ldr	r3, [r3, #0]
 80135da:	68ba      	ldr	r2, [r7, #8]
 80135dc:	0151      	lsls	r1, r2, #5
 80135de:	68fa      	ldr	r2, [r7, #12]
 80135e0:	440a      	add	r2, r1
 80135e2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80135e6:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80135ea:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80135ec:	683b      	ldr	r3, [r7, #0]
 80135ee:	78db      	ldrb	r3, [r3, #3]
 80135f0:	2b03      	cmp	r3, #3
 80135f2:	d003      	beq.n	80135fc <USB_EPClearStall+0x4c>
 80135f4:	683b      	ldr	r3, [r7, #0]
 80135f6:	78db      	ldrb	r3, [r3, #3]
 80135f8:	2b02      	cmp	r3, #2
 80135fa:	d138      	bne.n	801366e <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80135fc:	68bb      	ldr	r3, [r7, #8]
 80135fe:	015a      	lsls	r2, r3, #5
 8013600:	68fb      	ldr	r3, [r7, #12]
 8013602:	4413      	add	r3, r2
 8013604:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013608:	681b      	ldr	r3, [r3, #0]
 801360a:	68ba      	ldr	r2, [r7, #8]
 801360c:	0151      	lsls	r1, r2, #5
 801360e:	68fa      	ldr	r2, [r7, #12]
 8013610:	440a      	add	r2, r1
 8013612:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8013616:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 801361a:	6013      	str	r3, [r2, #0]
 801361c:	e027      	b.n	801366e <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 801361e:	68bb      	ldr	r3, [r7, #8]
 8013620:	015a      	lsls	r2, r3, #5
 8013622:	68fb      	ldr	r3, [r7, #12]
 8013624:	4413      	add	r3, r2
 8013626:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801362a:	681b      	ldr	r3, [r3, #0]
 801362c:	68ba      	ldr	r2, [r7, #8]
 801362e:	0151      	lsls	r1, r2, #5
 8013630:	68fa      	ldr	r2, [r7, #12]
 8013632:	440a      	add	r2, r1
 8013634:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8013638:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 801363c:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 801363e:	683b      	ldr	r3, [r7, #0]
 8013640:	78db      	ldrb	r3, [r3, #3]
 8013642:	2b03      	cmp	r3, #3
 8013644:	d003      	beq.n	801364e <USB_EPClearStall+0x9e>
 8013646:	683b      	ldr	r3, [r7, #0]
 8013648:	78db      	ldrb	r3, [r3, #3]
 801364a:	2b02      	cmp	r3, #2
 801364c:	d10f      	bne.n	801366e <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 801364e:	68bb      	ldr	r3, [r7, #8]
 8013650:	015a      	lsls	r2, r3, #5
 8013652:	68fb      	ldr	r3, [r7, #12]
 8013654:	4413      	add	r3, r2
 8013656:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801365a:	681b      	ldr	r3, [r3, #0]
 801365c:	68ba      	ldr	r2, [r7, #8]
 801365e:	0151      	lsls	r1, r2, #5
 8013660:	68fa      	ldr	r2, [r7, #12]
 8013662:	440a      	add	r2, r1
 8013664:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8013668:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 801366c:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 801366e:	2300      	movs	r3, #0
}
 8013670:	4618      	mov	r0, r3
 8013672:	3714      	adds	r7, #20
 8013674:	46bd      	mov	sp, r7
 8013676:	f85d 7b04 	ldr.w	r7, [sp], #4
 801367a:	4770      	bx	lr

0801367c <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 801367c:	b480      	push	{r7}
 801367e:	b085      	sub	sp, #20
 8013680:	af00      	add	r7, sp, #0
 8013682:	6078      	str	r0, [r7, #4]
 8013684:	460b      	mov	r3, r1
 8013686:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8013688:	687b      	ldr	r3, [r7, #4]
 801368a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 801368c:	68fb      	ldr	r3, [r7, #12]
 801368e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8013692:	681b      	ldr	r3, [r3, #0]
 8013694:	68fa      	ldr	r2, [r7, #12]
 8013696:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 801369a:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 801369e:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 80136a0:	68fb      	ldr	r3, [r7, #12]
 80136a2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80136a6:	681a      	ldr	r2, [r3, #0]
 80136a8:	78fb      	ldrb	r3, [r7, #3]
 80136aa:	011b      	lsls	r3, r3, #4
 80136ac:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 80136b0:	68f9      	ldr	r1, [r7, #12]
 80136b2:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80136b6:	4313      	orrs	r3, r2
 80136b8:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 80136ba:	2300      	movs	r3, #0
}
 80136bc:	4618      	mov	r0, r3
 80136be:	3714      	adds	r7, #20
 80136c0:	46bd      	mov	sp, r7
 80136c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80136c6:	4770      	bx	lr

080136c8 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 80136c8:	b580      	push	{r7, lr}
 80136ca:	b084      	sub	sp, #16
 80136cc:	af00      	add	r7, sp, #0
 80136ce:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80136d0:	687b      	ldr	r3, [r7, #4]
 80136d2:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 80136d4:	68fb      	ldr	r3, [r7, #12]
 80136d6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80136da:	685b      	ldr	r3, [r3, #4]
 80136dc:	68fa      	ldr	r2, [r7, #12]
 80136de:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80136e2:	f023 0302 	bic.w	r3, r3, #2
 80136e6:	6053      	str	r3, [r2, #4]
  HAL_Delay(3U);
 80136e8:	2003      	movs	r0, #3
 80136ea:	f7f1 fb6f 	bl	8004dcc <HAL_Delay>

  return HAL_OK;
 80136ee:	2300      	movs	r3, #0
}
 80136f0:	4618      	mov	r0, r3
 80136f2:	3710      	adds	r7, #16
 80136f4:	46bd      	mov	sp, r7
 80136f6:	bd80      	pop	{r7, pc}

080136f8 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 80136f8:	b580      	push	{r7, lr}
 80136fa:	b084      	sub	sp, #16
 80136fc:	af00      	add	r7, sp, #0
 80136fe:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8013700:	687b      	ldr	r3, [r7, #4]
 8013702:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8013704:	68fb      	ldr	r3, [r7, #12]
 8013706:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801370a:	685b      	ldr	r3, [r3, #4]
 801370c:	68fa      	ldr	r2, [r7, #12]
 801370e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8013712:	f043 0302 	orr.w	r3, r3, #2
 8013716:	6053      	str	r3, [r2, #4]
  HAL_Delay(3U);
 8013718:	2003      	movs	r0, #3
 801371a:	f7f1 fb57 	bl	8004dcc <HAL_Delay>

  return HAL_OK;
 801371e:	2300      	movs	r3, #0
}
 8013720:	4618      	mov	r0, r3
 8013722:	3710      	adds	r7, #16
 8013724:	46bd      	mov	sp, r7
 8013726:	bd80      	pop	{r7, pc}

08013728 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8013728:	b480      	push	{r7}
 801372a:	b085      	sub	sp, #20
 801372c:	af00      	add	r7, sp, #0
 801372e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8013730:	687b      	ldr	r3, [r7, #4]
 8013732:	695b      	ldr	r3, [r3, #20]
 8013734:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8013736:	687b      	ldr	r3, [r7, #4]
 8013738:	699b      	ldr	r3, [r3, #24]
 801373a:	68fa      	ldr	r2, [r7, #12]
 801373c:	4013      	ands	r3, r2
 801373e:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8013740:	68fb      	ldr	r3, [r7, #12]
}
 8013742:	4618      	mov	r0, r3
 8013744:	3714      	adds	r7, #20
 8013746:	46bd      	mov	sp, r7
 8013748:	f85d 7b04 	ldr.w	r7, [sp], #4
 801374c:	4770      	bx	lr

0801374e <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 801374e:	b480      	push	{r7}
 8013750:	b085      	sub	sp, #20
 8013752:	af00      	add	r7, sp, #0
 8013754:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8013756:	687b      	ldr	r3, [r7, #4]
 8013758:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 801375a:	68fb      	ldr	r3, [r7, #12]
 801375c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8013760:	699b      	ldr	r3, [r3, #24]
 8013762:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8013764:	68fb      	ldr	r3, [r7, #12]
 8013766:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801376a:	69db      	ldr	r3, [r3, #28]
 801376c:	68ba      	ldr	r2, [r7, #8]
 801376e:	4013      	ands	r3, r2
 8013770:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8013772:	68bb      	ldr	r3, [r7, #8]
 8013774:	0c1b      	lsrs	r3, r3, #16
}
 8013776:	4618      	mov	r0, r3
 8013778:	3714      	adds	r7, #20
 801377a:	46bd      	mov	sp, r7
 801377c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013780:	4770      	bx	lr

08013782 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8013782:	b480      	push	{r7}
 8013784:	b085      	sub	sp, #20
 8013786:	af00      	add	r7, sp, #0
 8013788:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801378a:	687b      	ldr	r3, [r7, #4]
 801378c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 801378e:	68fb      	ldr	r3, [r7, #12]
 8013790:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8013794:	699b      	ldr	r3, [r3, #24]
 8013796:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8013798:	68fb      	ldr	r3, [r7, #12]
 801379a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801379e:	69db      	ldr	r3, [r3, #28]
 80137a0:	68ba      	ldr	r2, [r7, #8]
 80137a2:	4013      	ands	r3, r2
 80137a4:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 80137a6:	68bb      	ldr	r3, [r7, #8]
 80137a8:	b29b      	uxth	r3, r3
}
 80137aa:	4618      	mov	r0, r3
 80137ac:	3714      	adds	r7, #20
 80137ae:	46bd      	mov	sp, r7
 80137b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80137b4:	4770      	bx	lr

080137b6 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80137b6:	b480      	push	{r7}
 80137b8:	b085      	sub	sp, #20
 80137ba:	af00      	add	r7, sp, #0
 80137bc:	6078      	str	r0, [r7, #4]
 80137be:	460b      	mov	r3, r1
 80137c0:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80137c2:	687b      	ldr	r3, [r7, #4]
 80137c4:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 80137c6:	78fb      	ldrb	r3, [r7, #3]
 80137c8:	015a      	lsls	r2, r3, #5
 80137ca:	68fb      	ldr	r3, [r7, #12]
 80137cc:	4413      	add	r3, r2
 80137ce:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80137d2:	689b      	ldr	r3, [r3, #8]
 80137d4:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 80137d6:	68fb      	ldr	r3, [r7, #12]
 80137d8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80137dc:	695b      	ldr	r3, [r3, #20]
 80137de:	68ba      	ldr	r2, [r7, #8]
 80137e0:	4013      	ands	r3, r2
 80137e2:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80137e4:	68bb      	ldr	r3, [r7, #8]
}
 80137e6:	4618      	mov	r0, r3
 80137e8:	3714      	adds	r7, #20
 80137ea:	46bd      	mov	sp, r7
 80137ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80137f0:	4770      	bx	lr

080137f2 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80137f2:	b480      	push	{r7}
 80137f4:	b087      	sub	sp, #28
 80137f6:	af00      	add	r7, sp, #0
 80137f8:	6078      	str	r0, [r7, #4]
 80137fa:	460b      	mov	r3, r1
 80137fc:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80137fe:	687b      	ldr	r3, [r7, #4]
 8013800:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg, msk, emp;

  msk = USBx_DEVICE->DIEPMSK;
 8013802:	697b      	ldr	r3, [r7, #20]
 8013804:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8013808:	691b      	ldr	r3, [r3, #16]
 801380a:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 801380c:	697b      	ldr	r3, [r7, #20]
 801380e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8013812:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8013814:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8013816:	78fb      	ldrb	r3, [r7, #3]
 8013818:	f003 030f 	and.w	r3, r3, #15
 801381c:	68fa      	ldr	r2, [r7, #12]
 801381e:	fa22 f303 	lsr.w	r3, r2, r3
 8013822:	01db      	lsls	r3, r3, #7
 8013824:	b2db      	uxtb	r3, r3
 8013826:	693a      	ldr	r2, [r7, #16]
 8013828:	4313      	orrs	r3, r2
 801382a:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 801382c:	78fb      	ldrb	r3, [r7, #3]
 801382e:	015a      	lsls	r2, r3, #5
 8013830:	697b      	ldr	r3, [r7, #20]
 8013832:	4413      	add	r3, r2
 8013834:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013838:	689b      	ldr	r3, [r3, #8]
 801383a:	693a      	ldr	r2, [r7, #16]
 801383c:	4013      	ands	r3, r2
 801383e:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8013840:	68bb      	ldr	r3, [r7, #8]
}
 8013842:	4618      	mov	r0, r3
 8013844:	371c      	adds	r7, #28
 8013846:	46bd      	mov	sp, r7
 8013848:	f85d 7b04 	ldr.w	r7, [sp], #4
 801384c:	4770      	bx	lr

0801384e <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 801384e:	b480      	push	{r7}
 8013850:	b083      	sub	sp, #12
 8013852:	af00      	add	r7, sp, #0
 8013854:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8013856:	687b      	ldr	r3, [r7, #4]
 8013858:	695b      	ldr	r3, [r3, #20]
 801385a:	f003 0301 	and.w	r3, r3, #1
}
 801385e:	4618      	mov	r0, r3
 8013860:	370c      	adds	r7, #12
 8013862:	46bd      	mov	sp, r7
 8013864:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013868:	4770      	bx	lr
	...

0801386c <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 801386c:	b480      	push	{r7}
 801386e:	b085      	sub	sp, #20
 8013870:	af00      	add	r7, sp, #0
 8013872:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8013874:	687b      	ldr	r3, [r7, #4]
 8013876:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8013878:	68fb      	ldr	r3, [r7, #12]
 801387a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801387e:	681a      	ldr	r2, [r3, #0]
 8013880:	68fb      	ldr	r3, [r7, #12]
 8013882:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013886:	4619      	mov	r1, r3
 8013888:	4b09      	ldr	r3, [pc, #36]	; (80138b0 <USB_ActivateSetup+0x44>)
 801388a:	4013      	ands	r3, r2
 801388c:	600b      	str	r3, [r1, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 801388e:	68fb      	ldr	r3, [r7, #12]
 8013890:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8013894:	685b      	ldr	r3, [r3, #4]
 8013896:	68fa      	ldr	r2, [r7, #12]
 8013898:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 801389c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80138a0:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80138a2:	2300      	movs	r3, #0
}
 80138a4:	4618      	mov	r0, r3
 80138a6:	3714      	adds	r7, #20
 80138a8:	46bd      	mov	sp, r7
 80138aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80138ae:	4770      	bx	lr
 80138b0:	fffff800 	.word	0xfffff800

080138b4 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 80138b4:	b480      	push	{r7}
 80138b6:	b087      	sub	sp, #28
 80138b8:	af00      	add	r7, sp, #0
 80138ba:	60f8      	str	r0, [r7, #12]
 80138bc:	460b      	mov	r3, r1
 80138be:	607a      	str	r2, [r7, #4]
 80138c0:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80138c2:	68fb      	ldr	r3, [r7, #12]
 80138c4:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80138c6:	68fb      	ldr	r3, [r7, #12]
 80138c8:	333c      	adds	r3, #60	; 0x3c
 80138ca:	3304      	adds	r3, #4
 80138cc:	681b      	ldr	r3, [r3, #0]
 80138ce:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 80138d0:	693b      	ldr	r3, [r7, #16]
 80138d2:	4a26      	ldr	r2, [pc, #152]	; (801396c <USB_EP0_OutStart+0xb8>)
 80138d4:	4293      	cmp	r3, r2
 80138d6:	d90a      	bls.n	80138ee <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80138d8:	697b      	ldr	r3, [r7, #20]
 80138da:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80138de:	681b      	ldr	r3, [r3, #0]
 80138e0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80138e4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80138e8:	d101      	bne.n	80138ee <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 80138ea:	2300      	movs	r3, #0
 80138ec:	e037      	b.n	801395e <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 80138ee:	697b      	ldr	r3, [r7, #20]
 80138f0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80138f4:	461a      	mov	r2, r3
 80138f6:	2300      	movs	r3, #0
 80138f8:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80138fa:	697b      	ldr	r3, [r7, #20]
 80138fc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8013900:	691b      	ldr	r3, [r3, #16]
 8013902:	697a      	ldr	r2, [r7, #20]
 8013904:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8013908:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 801390c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 801390e:	697b      	ldr	r3, [r7, #20]
 8013910:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8013914:	691b      	ldr	r3, [r3, #16]
 8013916:	697a      	ldr	r2, [r7, #20]
 8013918:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 801391c:	f043 0318 	orr.w	r3, r3, #24
 8013920:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8013922:	697b      	ldr	r3, [r7, #20]
 8013924:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8013928:	691b      	ldr	r3, [r3, #16]
 801392a:	697a      	ldr	r2, [r7, #20]
 801392c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8013930:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8013934:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8013936:	7afb      	ldrb	r3, [r7, #11]
 8013938:	2b01      	cmp	r3, #1
 801393a:	d10f      	bne.n	801395c <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 801393c:	697b      	ldr	r3, [r7, #20]
 801393e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8013942:	461a      	mov	r2, r3
 8013944:	687b      	ldr	r3, [r7, #4]
 8013946:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8013948:	697b      	ldr	r3, [r7, #20]
 801394a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801394e:	681b      	ldr	r3, [r3, #0]
 8013950:	697a      	ldr	r2, [r7, #20]
 8013952:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8013956:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 801395a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 801395c:	2300      	movs	r3, #0
}
 801395e:	4618      	mov	r0, r3
 8013960:	371c      	adds	r7, #28
 8013962:	46bd      	mov	sp, r7
 8013964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013968:	4770      	bx	lr
 801396a:	bf00      	nop
 801396c:	4f54300a 	.word	0x4f54300a

08013970 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8013970:	b480      	push	{r7}
 8013972:	b085      	sub	sp, #20
 8013974:	af00      	add	r7, sp, #0
 8013976:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 8013978:	2300      	movs	r3, #0
 801397a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 801397c:	68fb      	ldr	r3, [r7, #12]
 801397e:	3301      	adds	r3, #1
 8013980:	60fb      	str	r3, [r7, #12]
 8013982:	68fb      	ldr	r3, [r7, #12]
 8013984:	4a13      	ldr	r2, [pc, #76]	; (80139d4 <USB_CoreReset+0x64>)
 8013986:	4293      	cmp	r3, r2
 8013988:	d901      	bls.n	801398e <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 801398a:	2303      	movs	r3, #3
 801398c:	e01b      	b.n	80139c6 <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 801398e:	687b      	ldr	r3, [r7, #4]
 8013990:	691b      	ldr	r3, [r3, #16]
 8013992:	2b00      	cmp	r3, #0
 8013994:	daf2      	bge.n	801397c <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8013996:	2300      	movs	r3, #0
 8013998:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 801399a:	687b      	ldr	r3, [r7, #4]
 801399c:	691b      	ldr	r3, [r3, #16]
 801399e:	f043 0201 	orr.w	r2, r3, #1
 80139a2:	687b      	ldr	r3, [r7, #4]
 80139a4:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80139a6:	68fb      	ldr	r3, [r7, #12]
 80139a8:	3301      	adds	r3, #1
 80139aa:	60fb      	str	r3, [r7, #12]
 80139ac:	68fb      	ldr	r3, [r7, #12]
 80139ae:	4a09      	ldr	r2, [pc, #36]	; (80139d4 <USB_CoreReset+0x64>)
 80139b0:	4293      	cmp	r3, r2
 80139b2:	d901      	bls.n	80139b8 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 80139b4:	2303      	movs	r3, #3
 80139b6:	e006      	b.n	80139c6 <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80139b8:	687b      	ldr	r3, [r7, #4]
 80139ba:	691b      	ldr	r3, [r3, #16]
 80139bc:	f003 0301 	and.w	r3, r3, #1
 80139c0:	2b01      	cmp	r3, #1
 80139c2:	d0f0      	beq.n	80139a6 <USB_CoreReset+0x36>

  return HAL_OK;
 80139c4:	2300      	movs	r3, #0
}
 80139c6:	4618      	mov	r0, r3
 80139c8:	3714      	adds	r7, #20
 80139ca:	46bd      	mov	sp, r7
 80139cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80139d0:	4770      	bx	lr
 80139d2:	bf00      	nop
 80139d4:	00030d40 	.word	0x00030d40

080139d8 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 80139d8:	b580      	push	{r7, lr}
 80139da:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 80139dc:	4904      	ldr	r1, [pc, #16]	; (80139f0 <MX_FATFS_Init+0x18>)
 80139de:	4805      	ldr	r0, [pc, #20]	; (80139f4 <MX_FATFS_Init+0x1c>)
 80139e0:	f005 fbec 	bl	80191bc <FATFS_LinkDriver>
 80139e4:	4603      	mov	r3, r0
 80139e6:	461a      	mov	r2, r3
 80139e8:	4b03      	ldr	r3, [pc, #12]	; (80139f8 <MX_FATFS_Init+0x20>)
 80139ea:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 80139ec:	bf00      	nop
 80139ee:	bd80      	pop	{r7, pc}
 80139f0:	24044a0c 	.word	0x24044a0c
 80139f4:	0801c534 	.word	0x0801c534
 80139f8:	24044a08 	.word	0x24044a08

080139fc <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 80139fc:	b480      	push	{r7}
 80139fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 8013a00:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 8013a02:	4618      	mov	r0, r3
 8013a04:	46bd      	mov	sp, r7
 8013a06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013a0a:	4770      	bx	lr

08013a0c <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 8013a0c:	b580      	push	{r7, lr}
 8013a0e:	b082      	sub	sp, #8
 8013a10:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 8013a12:	2300      	movs	r3, #0
 8013a14:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 8013a16:	f000 f885 	bl	8013b24 <BSP_SD_IsDetected>
 8013a1a:	4603      	mov	r3, r0
 8013a1c:	2b01      	cmp	r3, #1
 8013a1e:	d001      	beq.n	8013a24 <BSP_SD_Init+0x18>
  {
    return MSD_ERROR_SD_NOT_PRESENT;
 8013a20:	2302      	movs	r3, #2
 8013a22:	e012      	b.n	8013a4a <BSP_SD_Init+0x3e>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd1);
 8013a24:	480b      	ldr	r0, [pc, #44]	; (8013a54 <BSP_SD_Init+0x48>)
 8013a26:	f7f9 fc27 	bl	800d278 <HAL_SD_Init>
 8013a2a:	4603      	mov	r3, r0
 8013a2c:	71fb      	strb	r3, [r7, #7]
  /* Configure SD Bus width (4 bits mode selected) */
  if (sd_state == MSD_OK)
 8013a2e:	79fb      	ldrb	r3, [r7, #7]
 8013a30:	2b00      	cmp	r3, #0
 8013a32:	d109      	bne.n	8013a48 <BSP_SD_Init+0x3c>
  {
    /* Enable wide operation */
    if (HAL_SD_ConfigWideBusOperation(&hsd1, SDMMC_BUS_WIDE_4B) != HAL_OK)
 8013a34:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8013a38:	4806      	ldr	r0, [pc, #24]	; (8013a54 <BSP_SD_Init+0x48>)
 8013a3a:	f7fa fdfb 	bl	800e634 <HAL_SD_ConfigWideBusOperation>
 8013a3e:	4603      	mov	r3, r0
 8013a40:	2b00      	cmp	r3, #0
 8013a42:	d001      	beq.n	8013a48 <BSP_SD_Init+0x3c>
    {
      sd_state = MSD_ERROR;
 8013a44:	2301      	movs	r3, #1
 8013a46:	71fb      	strb	r3, [r7, #7]
    }
  }

  return sd_state;
 8013a48:	79fb      	ldrb	r3, [r7, #7]
}
 8013a4a:	4618      	mov	r0, r3
 8013a4c:	3708      	adds	r7, #8
 8013a4e:	46bd      	mov	sp, r7
 8013a50:	bd80      	pop	{r7, pc}
 8013a52:	bf00      	nop
 8013a54:	2404470c 	.word	0x2404470c

08013a58 <BSP_SD_ReadBlocks_DMA>:
  * @param  ReadAddr: Address from where data is to be read
  * @param  NumOfBlocks: Number of SD blocks to read
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks_DMA(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks)
{
 8013a58:	b580      	push	{r7, lr}
 8013a5a:	b086      	sub	sp, #24
 8013a5c:	af00      	add	r7, sp, #0
 8013a5e:	60f8      	str	r0, [r7, #12]
 8013a60:	60b9      	str	r1, [r7, #8]
 8013a62:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 8013a64:	2300      	movs	r3, #0
 8013a66:	75fb      	strb	r3, [r7, #23]

  /* Read block(s) in DMA transfer mode */
  if (HAL_SD_ReadBlocks_DMA(&hsd1, (uint8_t *)pData, ReadAddr, NumOfBlocks) != HAL_OK)
 8013a68:	687b      	ldr	r3, [r7, #4]
 8013a6a:	68ba      	ldr	r2, [r7, #8]
 8013a6c:	68f9      	ldr	r1, [r7, #12]
 8013a6e:	4806      	ldr	r0, [pc, #24]	; (8013a88 <BSP_SD_ReadBlocks_DMA+0x30>)
 8013a70:	f7fa f83e 	bl	800daf0 <HAL_SD_ReadBlocks_DMA>
 8013a74:	4603      	mov	r3, r0
 8013a76:	2b00      	cmp	r3, #0
 8013a78:	d001      	beq.n	8013a7e <BSP_SD_ReadBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 8013a7a:	2301      	movs	r3, #1
 8013a7c:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 8013a7e:	7dfb      	ldrb	r3, [r7, #23]
}
 8013a80:	4618      	mov	r0, r3
 8013a82:	3718      	adds	r7, #24
 8013a84:	46bd      	mov	sp, r7
 8013a86:	bd80      	pop	{r7, pc}
 8013a88:	2404470c 	.word	0x2404470c

08013a8c <BSP_SD_WriteBlocks_DMA>:
  * @param  WriteAddr: Address from where data is to be written
  * @param  NumOfBlocks: Number of SD blocks to write
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks_DMA(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks)
{
 8013a8c:	b580      	push	{r7, lr}
 8013a8e:	b086      	sub	sp, #24
 8013a90:	af00      	add	r7, sp, #0
 8013a92:	60f8      	str	r0, [r7, #12]
 8013a94:	60b9      	str	r1, [r7, #8]
 8013a96:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 8013a98:	2300      	movs	r3, #0
 8013a9a:	75fb      	strb	r3, [r7, #23]

  /* Write block(s) in DMA transfer mode */
  if (HAL_SD_WriteBlocks_DMA(&hsd1, (uint8_t *)pData, WriteAddr, NumOfBlocks) != HAL_OK)
 8013a9c:	687b      	ldr	r3, [r7, #4]
 8013a9e:	68ba      	ldr	r2, [r7, #8]
 8013aa0:	68f9      	ldr	r1, [r7, #12]
 8013aa2:	4806      	ldr	r0, [pc, #24]	; (8013abc <BSP_SD_WriteBlocks_DMA+0x30>)
 8013aa4:	f7fa f8cc 	bl	800dc40 <HAL_SD_WriteBlocks_DMA>
 8013aa8:	4603      	mov	r3, r0
 8013aaa:	2b00      	cmp	r3, #0
 8013aac:	d001      	beq.n	8013ab2 <BSP_SD_WriteBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 8013aae:	2301      	movs	r3, #1
 8013ab0:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 8013ab2:	7dfb      	ldrb	r3, [r7, #23]
}
 8013ab4:	4618      	mov	r0, r3
 8013ab6:	3718      	adds	r7, #24
 8013ab8:	46bd      	mov	sp, r7
 8013aba:	bd80      	pop	{r7, pc}
 8013abc:	2404470c 	.word	0x2404470c

08013ac0 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 8013ac0:	b580      	push	{r7, lr}
 8013ac2:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd1) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 8013ac4:	4805      	ldr	r0, [pc, #20]	; (8013adc <BSP_SD_GetCardState+0x1c>)
 8013ac6:	f7fa fe5f 	bl	800e788 <HAL_SD_GetCardState>
 8013aca:	4603      	mov	r3, r0
 8013acc:	2b04      	cmp	r3, #4
 8013ace:	bf14      	ite	ne
 8013ad0:	2301      	movne	r3, #1
 8013ad2:	2300      	moveq	r3, #0
 8013ad4:	b2db      	uxtb	r3, r3
}
 8013ad6:	4618      	mov	r0, r3
 8013ad8:	bd80      	pop	{r7, pc}
 8013ada:	bf00      	nop
 8013adc:	2404470c 	.word	0x2404470c

08013ae0 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 8013ae0:	b580      	push	{r7, lr}
 8013ae2:	b082      	sub	sp, #8
 8013ae4:	af00      	add	r7, sp, #0
 8013ae6:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd1, CardInfo);
 8013ae8:	6879      	ldr	r1, [r7, #4]
 8013aea:	4803      	ldr	r0, [pc, #12]	; (8013af8 <BSP_SD_GetCardInfo+0x18>)
 8013aec:	f7fa fd76 	bl	800e5dc <HAL_SD_GetCardInfo>
}
 8013af0:	bf00      	nop
 8013af2:	3708      	adds	r7, #8
 8013af4:	46bd      	mov	sp, r7
 8013af6:	bd80      	pop	{r7, pc}
 8013af8:	2404470c 	.word	0x2404470c

08013afc <HAL_SD_TxCpltCallback>:
  * @brief Tx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_TxCpltCallback(SD_HandleTypeDef *hsd)
{
 8013afc:	b580      	push	{r7, lr}
 8013afe:	b082      	sub	sp, #8
 8013b00:	af00      	add	r7, sp, #0
 8013b02:	6078      	str	r0, [r7, #4]
  BSP_SD_WriteCpltCallback();
 8013b04:	f000 f9a0 	bl	8013e48 <BSP_SD_WriteCpltCallback>
}
 8013b08:	bf00      	nop
 8013b0a:	3708      	adds	r7, #8
 8013b0c:	46bd      	mov	sp, r7
 8013b0e:	bd80      	pop	{r7, pc}

08013b10 <HAL_SD_RxCpltCallback>:
  * @brief Rx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_RxCpltCallback(SD_HandleTypeDef *hsd)
{
 8013b10:	b580      	push	{r7, lr}
 8013b12:	b082      	sub	sp, #8
 8013b14:	af00      	add	r7, sp, #0
 8013b16:	6078      	str	r0, [r7, #4]
  BSP_SD_ReadCpltCallback();
 8013b18:	f000 f9a2 	bl	8013e60 <BSP_SD_ReadCpltCallback>
}
 8013b1c:	bf00      	nop
 8013b1e:	3708      	adds	r7, #8
 8013b20:	46bd      	mov	sp, r7
 8013b22:	bd80      	pop	{r7, pc}

08013b24 <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 8013b24:	b580      	push	{r7, lr}
 8013b26:	b082      	sub	sp, #8
 8013b28:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 8013b2a:	2301      	movs	r3, #1
 8013b2c:	71fb      	strb	r3, [r7, #7]

  if (BSP_PlatformIsDetected() == 0x0)
 8013b2e:	f000 f80b 	bl	8013b48 <BSP_PlatformIsDetected>
 8013b32:	4603      	mov	r3, r0
 8013b34:	2b00      	cmp	r3, #0
 8013b36:	d101      	bne.n	8013b3c <BSP_SD_IsDetected+0x18>
  {
    status = SD_NOT_PRESENT;
 8013b38:	2300      	movs	r3, #0
 8013b3a:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 8013b3c:	79fb      	ldrb	r3, [r7, #7]
 8013b3e:	b2db      	uxtb	r3, r3
}
 8013b40:	4618      	mov	r0, r3
 8013b42:	3708      	adds	r7, #8
 8013b44:	46bd      	mov	sp, r7
 8013b46:	bd80      	pop	{r7, pc}

08013b48 <BSP_PlatformIsDetected>:
  *
  ******************************************************************************
*/
#include "fatfs_platform.h"

uint8_t	BSP_PlatformIsDetected(void) {
 8013b48:	b580      	push	{r7, lr}
 8013b4a:	b082      	sub	sp, #8
 8013b4c:	af00      	add	r7, sp, #0
    uint8_t status = SD_PRESENT;
 8013b4e:	2301      	movs	r3, #1
 8013b50:	71fb      	strb	r3, [r7, #7]
    /* Check SD card detect pin */
    if(HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) != GPIO_PIN_RESET)
 8013b52:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8013b56:	4806      	ldr	r0, [pc, #24]	; (8013b70 <BSP_PlatformIsDetected+0x28>)
 8013b58:	f7f4 fe3a 	bl	80087d0 <HAL_GPIO_ReadPin>
 8013b5c:	4603      	mov	r3, r0
 8013b5e:	2b00      	cmp	r3, #0
 8013b60:	d001      	beq.n	8013b66 <BSP_PlatformIsDetected+0x1e>
    {
        status = SD_NOT_PRESENT;
 8013b62:	2300      	movs	r3, #0
 8013b64:	71fb      	strb	r3, [r7, #7]
    }
    /* USER CODE BEGIN 1 */
    /* user code can be inserted here */
    /* USER CODE END 1 */
    return status;
 8013b66:	79fb      	ldrb	r3, [r7, #7]
}
 8013b68:	4618      	mov	r0, r3
 8013b6a:	3708      	adds	r7, #8
 8013b6c:	46bd      	mov	sp, r7
 8013b6e:	bd80      	pop	{r7, pc}
 8013b70:	58020000 	.word	0x58020000

08013b74 <SD_CheckStatusWithTimeout>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static int SD_CheckStatusWithTimeout(uint32_t timeout)
{
 8013b74:	b580      	push	{r7, lr}
 8013b76:	b084      	sub	sp, #16
 8013b78:	af00      	add	r7, sp, #0
 8013b7a:	6078      	str	r0, [r7, #4]
  uint32_t timer = HAL_GetTick();
 8013b7c:	f7f1 f91a 	bl	8004db4 <HAL_GetTick>
 8013b80:	60f8      	str	r0, [r7, #12]
  /* block until SDIO IP is ready again or a timeout occur */
  while(HAL_GetTick() - timer < timeout)
 8013b82:	e006      	b.n	8013b92 <SD_CheckStatusWithTimeout+0x1e>
  {
    if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 8013b84:	f7ff ff9c 	bl	8013ac0 <BSP_SD_GetCardState>
 8013b88:	4603      	mov	r3, r0
 8013b8a:	2b00      	cmp	r3, #0
 8013b8c:	d101      	bne.n	8013b92 <SD_CheckStatusWithTimeout+0x1e>
    {
      return 0;
 8013b8e:	2300      	movs	r3, #0
 8013b90:	e009      	b.n	8013ba6 <SD_CheckStatusWithTimeout+0x32>
  while(HAL_GetTick() - timer < timeout)
 8013b92:	f7f1 f90f 	bl	8004db4 <HAL_GetTick>
 8013b96:	4602      	mov	r2, r0
 8013b98:	68fb      	ldr	r3, [r7, #12]
 8013b9a:	1ad3      	subs	r3, r2, r3
 8013b9c:	687a      	ldr	r2, [r7, #4]
 8013b9e:	429a      	cmp	r2, r3
 8013ba0:	d8f0      	bhi.n	8013b84 <SD_CheckStatusWithTimeout+0x10>
    }
  }

  return -1;
 8013ba2:	f04f 33ff 	mov.w	r3, #4294967295
}
 8013ba6:	4618      	mov	r0, r3
 8013ba8:	3710      	adds	r7, #16
 8013baa:	46bd      	mov	sp, r7
 8013bac:	bd80      	pop	{r7, pc}
	...

08013bb0 <SD_CheckStatus>:

static DSTATUS SD_CheckStatus(BYTE lun)
{
 8013bb0:	b580      	push	{r7, lr}
 8013bb2:	b082      	sub	sp, #8
 8013bb4:	af00      	add	r7, sp, #0
 8013bb6:	4603      	mov	r3, r0
 8013bb8:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 8013bba:	4b0b      	ldr	r3, [pc, #44]	; (8013be8 <SD_CheckStatus+0x38>)
 8013bbc:	2201      	movs	r2, #1
 8013bbe:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 8013bc0:	f7ff ff7e 	bl	8013ac0 <BSP_SD_GetCardState>
 8013bc4:	4603      	mov	r3, r0
 8013bc6:	2b00      	cmp	r3, #0
 8013bc8:	d107      	bne.n	8013bda <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 8013bca:	4b07      	ldr	r3, [pc, #28]	; (8013be8 <SD_CheckStatus+0x38>)
 8013bcc:	781b      	ldrb	r3, [r3, #0]
 8013bce:	b2db      	uxtb	r3, r3
 8013bd0:	f023 0301 	bic.w	r3, r3, #1
 8013bd4:	b2da      	uxtb	r2, r3
 8013bd6:	4b04      	ldr	r3, [pc, #16]	; (8013be8 <SD_CheckStatus+0x38>)
 8013bd8:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 8013bda:	4b03      	ldr	r3, [pc, #12]	; (8013be8 <SD_CheckStatus+0x38>)
 8013bdc:	781b      	ldrb	r3, [r3, #0]
 8013bde:	b2db      	uxtb	r3, r3
}
 8013be0:	4618      	mov	r0, r3
 8013be2:	3708      	adds	r7, #8
 8013be4:	46bd      	mov	sp, r7
 8013be6:	bd80      	pop	{r7, pc}
 8013be8:	2400001d 	.word	0x2400001d

08013bec <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 8013bec:	b580      	push	{r7, lr}
 8013bee:	b082      	sub	sp, #8
 8013bf0:	af00      	add	r7, sp, #0
 8013bf2:	4603      	mov	r3, r0
 8013bf4:	71fb      	strb	r3, [r7, #7]

#if !defined(DISABLE_SD_INIT)

  if(BSP_SD_Init() == MSD_OK)
 8013bf6:	f7ff ff09 	bl	8013a0c <BSP_SD_Init>
 8013bfa:	4603      	mov	r3, r0
 8013bfc:	2b00      	cmp	r3, #0
 8013bfe:	d107      	bne.n	8013c10 <SD_initialize+0x24>
  {
    Stat = SD_CheckStatus(lun);
 8013c00:	79fb      	ldrb	r3, [r7, #7]
 8013c02:	4618      	mov	r0, r3
 8013c04:	f7ff ffd4 	bl	8013bb0 <SD_CheckStatus>
 8013c08:	4603      	mov	r3, r0
 8013c0a:	461a      	mov	r2, r3
 8013c0c:	4b04      	ldr	r3, [pc, #16]	; (8013c20 <SD_initialize+0x34>)
 8013c0e:	701a      	strb	r2, [r3, #0]

#else
  Stat = SD_CheckStatus(lun);
#endif

  return Stat;
 8013c10:	4b03      	ldr	r3, [pc, #12]	; (8013c20 <SD_initialize+0x34>)
 8013c12:	781b      	ldrb	r3, [r3, #0]
 8013c14:	b2db      	uxtb	r3, r3
}
 8013c16:	4618      	mov	r0, r3
 8013c18:	3708      	adds	r7, #8
 8013c1a:	46bd      	mov	sp, r7
 8013c1c:	bd80      	pop	{r7, pc}
 8013c1e:	bf00      	nop
 8013c20:	2400001d 	.word	0x2400001d

08013c24 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 8013c24:	b580      	push	{r7, lr}
 8013c26:	b082      	sub	sp, #8
 8013c28:	af00      	add	r7, sp, #0
 8013c2a:	4603      	mov	r3, r0
 8013c2c:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 8013c2e:	79fb      	ldrb	r3, [r7, #7]
 8013c30:	4618      	mov	r0, r3
 8013c32:	f7ff ffbd 	bl	8013bb0 <SD_CheckStatus>
 8013c36:	4603      	mov	r3, r0
}
 8013c38:	4618      	mov	r0, r3
 8013c3a:	3708      	adds	r7, #8
 8013c3c:	46bd      	mov	sp, r7
 8013c3e:	bd80      	pop	{r7, pc}

08013c40 <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 8013c40:	b580      	push	{r7, lr}
 8013c42:	b086      	sub	sp, #24
 8013c44:	af00      	add	r7, sp, #0
 8013c46:	60b9      	str	r1, [r7, #8]
 8013c48:	607a      	str	r2, [r7, #4]
 8013c4a:	603b      	str	r3, [r7, #0]
 8013c4c:	4603      	mov	r3, r0
 8013c4e:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8013c50:	2301      	movs	r3, #1
 8013c52:	75fb      	strb	r3, [r7, #23]

  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 8013c54:	f247 5030 	movw	r0, #30000	; 0x7530
 8013c58:	f7ff ff8c 	bl	8013b74 <SD_CheckStatusWithTimeout>
 8013c5c:	4603      	mov	r3, r0
 8013c5e:	2b00      	cmp	r3, #0
 8013c60:	da01      	bge.n	8013c66 <SD_read+0x26>
  {
    return res;
 8013c62:	7dfb      	ldrb	r3, [r7, #23]
 8013c64:	e03b      	b.n	8013cde <SD_read+0x9e>

#if defined(ENABLE_SCRATCH_BUFFER)
  if (!((uint32_t)buff & 0x3))
  {
#endif
    if(BSP_SD_ReadBlocks_DMA((uint32_t*)buff,
 8013c66:	683a      	ldr	r2, [r7, #0]
 8013c68:	6879      	ldr	r1, [r7, #4]
 8013c6a:	68b8      	ldr	r0, [r7, #8]
 8013c6c:	f7ff fef4 	bl	8013a58 <BSP_SD_ReadBlocks_DMA>
 8013c70:	4603      	mov	r3, r0
 8013c72:	2b00      	cmp	r3, #0
 8013c74:	d132      	bne.n	8013cdc <SD_read+0x9c>
                             (uint32_t) (sector),
                             count) == MSD_OK)
    {
      ReadStatus = 0;
 8013c76:	4b1c      	ldr	r3, [pc, #112]	; (8013ce8 <SD_read+0xa8>)
 8013c78:	2200      	movs	r2, #0
 8013c7a:	601a      	str	r2, [r3, #0]
      /* Wait that the reading process is completed or a timeout occurs */
      timeout = HAL_GetTick();
 8013c7c:	f7f1 f89a 	bl	8004db4 <HAL_GetTick>
 8013c80:	6138      	str	r0, [r7, #16]
      while((ReadStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 8013c82:	bf00      	nop
 8013c84:	4b18      	ldr	r3, [pc, #96]	; (8013ce8 <SD_read+0xa8>)
 8013c86:	681b      	ldr	r3, [r3, #0]
 8013c88:	2b00      	cmp	r3, #0
 8013c8a:	d108      	bne.n	8013c9e <SD_read+0x5e>
 8013c8c:	f7f1 f892 	bl	8004db4 <HAL_GetTick>
 8013c90:	4602      	mov	r2, r0
 8013c92:	693b      	ldr	r3, [r7, #16]
 8013c94:	1ad3      	subs	r3, r2, r3
 8013c96:	f247 522f 	movw	r2, #29999	; 0x752f
 8013c9a:	4293      	cmp	r3, r2
 8013c9c:	d9f2      	bls.n	8013c84 <SD_read+0x44>
      {
      }
      /* incase of a timeout return error */
      if (ReadStatus == 0)
 8013c9e:	4b12      	ldr	r3, [pc, #72]	; (8013ce8 <SD_read+0xa8>)
 8013ca0:	681b      	ldr	r3, [r3, #0]
 8013ca2:	2b00      	cmp	r3, #0
 8013ca4:	d102      	bne.n	8013cac <SD_read+0x6c>
      {
        res = RES_ERROR;
 8013ca6:	2301      	movs	r3, #1
 8013ca8:	75fb      	strb	r3, [r7, #23]
 8013caa:	e017      	b.n	8013cdc <SD_read+0x9c>
      }
      else
      {
        ReadStatus = 0;
 8013cac:	4b0e      	ldr	r3, [pc, #56]	; (8013ce8 <SD_read+0xa8>)
 8013cae:	2200      	movs	r2, #0
 8013cb0:	601a      	str	r2, [r3, #0]
        timeout = HAL_GetTick();
 8013cb2:	f7f1 f87f 	bl	8004db4 <HAL_GetTick>
 8013cb6:	6138      	str	r0, [r7, #16]

        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 8013cb8:	e007      	b.n	8013cca <SD_read+0x8a>
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 8013cba:	f7ff ff01 	bl	8013ac0 <BSP_SD_GetCardState>
 8013cbe:	4603      	mov	r3, r0
 8013cc0:	2b00      	cmp	r3, #0
 8013cc2:	d102      	bne.n	8013cca <SD_read+0x8a>
          {
            res = RES_OK;
 8013cc4:	2300      	movs	r3, #0
 8013cc6:	75fb      	strb	r3, [r7, #23]
            adjust the address and the D-Cache size to invalidate accordingly.
            */
            alignedAddr = (uint32_t)buff & ~0x1F;
            SCB_InvalidateDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif
            break;
 8013cc8:	e008      	b.n	8013cdc <SD_read+0x9c>
        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 8013cca:	f7f1 f873 	bl	8004db4 <HAL_GetTick>
 8013cce:	4602      	mov	r2, r0
 8013cd0:	693b      	ldr	r3, [r7, #16]
 8013cd2:	1ad3      	subs	r3, r2, r3
 8013cd4:	f247 522f 	movw	r2, #29999	; 0x752f
 8013cd8:	4293      	cmp	r3, r2
 8013cda:	d9ee      	bls.n	8013cba <SD_read+0x7a>
      if ((i == count) && (ret == MSD_OK))
        res = RES_OK;
    }
#endif

  return res;
 8013cdc:	7dfb      	ldrb	r3, [r7, #23]
}
 8013cde:	4618      	mov	r0, r3
 8013ce0:	3718      	adds	r7, #24
 8013ce2:	46bd      	mov	sp, r7
 8013ce4:	bd80      	pop	{r7, pc}
 8013ce6:	bf00      	nop
 8013ce8:	240404c8 	.word	0x240404c8

08013cec <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 8013cec:	b580      	push	{r7, lr}
 8013cee:	b086      	sub	sp, #24
 8013cf0:	af00      	add	r7, sp, #0
 8013cf2:	60b9      	str	r1, [r7, #8]
 8013cf4:	607a      	str	r2, [r7, #4]
 8013cf6:	603b      	str	r3, [r7, #0]
 8013cf8:	4603      	mov	r3, r0
 8013cfa:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8013cfc:	2301      	movs	r3, #1
 8013cfe:	75fb      	strb	r3, [r7, #23]
#if defined(ENABLE_SCRATCH_BUFFER)
  uint8_t ret;
  int i;
#endif

   WriteStatus = 0;
 8013d00:	4b24      	ldr	r3, [pc, #144]	; (8013d94 <SD_write+0xa8>)
 8013d02:	2200      	movs	r2, #0
 8013d04:	601a      	str	r2, [r3, #0]
#if (ENABLE_SD_DMA_CACHE_MAINTENANCE == 1)
  uint32_t alignedAddr;
#endif

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 8013d06:	f247 5030 	movw	r0, #30000	; 0x7530
 8013d0a:	f7ff ff33 	bl	8013b74 <SD_CheckStatusWithTimeout>
 8013d0e:	4603      	mov	r3, r0
 8013d10:	2b00      	cmp	r3, #0
 8013d12:	da01      	bge.n	8013d18 <SD_write+0x2c>
  {
    return res;
 8013d14:	7dfb      	ldrb	r3, [r7, #23]
 8013d16:	e038      	b.n	8013d8a <SD_write+0x9e>
    */
    alignedAddr = (uint32_t)buff &  ~0x1F;
    SCB_CleanDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif

    if(BSP_SD_WriteBlocks_DMA((uint32_t*)buff,
 8013d18:	683a      	ldr	r2, [r7, #0]
 8013d1a:	6879      	ldr	r1, [r7, #4]
 8013d1c:	68b8      	ldr	r0, [r7, #8]
 8013d1e:	f7ff feb5 	bl	8013a8c <BSP_SD_WriteBlocks_DMA>
 8013d22:	4603      	mov	r3, r0
 8013d24:	2b00      	cmp	r3, #0
 8013d26:	d12f      	bne.n	8013d88 <SD_write+0x9c>
                              (uint32_t)(sector),
                              count) == MSD_OK)
    {
      /* Wait that writing process is completed or a timeout occurs */

      timeout = HAL_GetTick();
 8013d28:	f7f1 f844 	bl	8004db4 <HAL_GetTick>
 8013d2c:	6138      	str	r0, [r7, #16]
      while((WriteStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 8013d2e:	bf00      	nop
 8013d30:	4b18      	ldr	r3, [pc, #96]	; (8013d94 <SD_write+0xa8>)
 8013d32:	681b      	ldr	r3, [r3, #0]
 8013d34:	2b00      	cmp	r3, #0
 8013d36:	d108      	bne.n	8013d4a <SD_write+0x5e>
 8013d38:	f7f1 f83c 	bl	8004db4 <HAL_GetTick>
 8013d3c:	4602      	mov	r2, r0
 8013d3e:	693b      	ldr	r3, [r7, #16]
 8013d40:	1ad3      	subs	r3, r2, r3
 8013d42:	f247 522f 	movw	r2, #29999	; 0x752f
 8013d46:	4293      	cmp	r3, r2
 8013d48:	d9f2      	bls.n	8013d30 <SD_write+0x44>
      {
      }
      /* incase of a timeout return error */
      if (WriteStatus == 0)
 8013d4a:	4b12      	ldr	r3, [pc, #72]	; (8013d94 <SD_write+0xa8>)
 8013d4c:	681b      	ldr	r3, [r3, #0]
 8013d4e:	2b00      	cmp	r3, #0
 8013d50:	d102      	bne.n	8013d58 <SD_write+0x6c>
      {
        res = RES_ERROR;
 8013d52:	2301      	movs	r3, #1
 8013d54:	75fb      	strb	r3, [r7, #23]
 8013d56:	e017      	b.n	8013d88 <SD_write+0x9c>
      }
      else
      {
        WriteStatus = 0;
 8013d58:	4b0e      	ldr	r3, [pc, #56]	; (8013d94 <SD_write+0xa8>)
 8013d5a:	2200      	movs	r2, #0
 8013d5c:	601a      	str	r2, [r3, #0]
        timeout = HAL_GetTick();
 8013d5e:	f7f1 f829 	bl	8004db4 <HAL_GetTick>
 8013d62:	6138      	str	r0, [r7, #16]

        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 8013d64:	e007      	b.n	8013d76 <SD_write+0x8a>
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 8013d66:	f7ff feab 	bl	8013ac0 <BSP_SD_GetCardState>
 8013d6a:	4603      	mov	r3, r0
 8013d6c:	2b00      	cmp	r3, #0
 8013d6e:	d102      	bne.n	8013d76 <SD_write+0x8a>
          {
            res = RES_OK;
 8013d70:	2300      	movs	r3, #0
 8013d72:	75fb      	strb	r3, [r7, #23]
            break;
 8013d74:	e008      	b.n	8013d88 <SD_write+0x9c>
        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 8013d76:	f7f1 f81d 	bl	8004db4 <HAL_GetTick>
 8013d7a:	4602      	mov	r2, r0
 8013d7c:	693b      	ldr	r3, [r7, #16]
 8013d7e:	1ad3      	subs	r3, r2, r3
 8013d80:	f247 522f 	movw	r2, #29999	; 0x752f
 8013d84:	4293      	cmp	r3, r2
 8013d86:	d9ee      	bls.n	8013d66 <SD_write+0x7a>
      }
      if ((i == count) && (ret == MSD_OK))
        res = RES_OK;
    }
#endif
  return res;
 8013d88:	7dfb      	ldrb	r3, [r7, #23]
}
 8013d8a:	4618      	mov	r0, r3
 8013d8c:	3718      	adds	r7, #24
 8013d8e:	46bd      	mov	sp, r7
 8013d90:	bd80      	pop	{r7, pc}
 8013d92:	bf00      	nop
 8013d94:	240404c4 	.word	0x240404c4

08013d98 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 8013d98:	b580      	push	{r7, lr}
 8013d9a:	b08c      	sub	sp, #48	; 0x30
 8013d9c:	af00      	add	r7, sp, #0
 8013d9e:	4603      	mov	r3, r0
 8013da0:	603a      	str	r2, [r7, #0]
 8013da2:	71fb      	strb	r3, [r7, #7]
 8013da4:	460b      	mov	r3, r1
 8013da6:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 8013da8:	2301      	movs	r3, #1
 8013daa:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 8013dae:	4b25      	ldr	r3, [pc, #148]	; (8013e44 <SD_ioctl+0xac>)
 8013db0:	781b      	ldrb	r3, [r3, #0]
 8013db2:	b2db      	uxtb	r3, r3
 8013db4:	f003 0301 	and.w	r3, r3, #1
 8013db8:	2b00      	cmp	r3, #0
 8013dba:	d001      	beq.n	8013dc0 <SD_ioctl+0x28>
 8013dbc:	2303      	movs	r3, #3
 8013dbe:	e03c      	b.n	8013e3a <SD_ioctl+0xa2>

  switch (cmd)
 8013dc0:	79bb      	ldrb	r3, [r7, #6]
 8013dc2:	2b03      	cmp	r3, #3
 8013dc4:	d834      	bhi.n	8013e30 <SD_ioctl+0x98>
 8013dc6:	a201      	add	r2, pc, #4	; (adr r2, 8013dcc <SD_ioctl+0x34>)
 8013dc8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013dcc:	08013ddd 	.word	0x08013ddd
 8013dd0:	08013de5 	.word	0x08013de5
 8013dd4:	08013dfd 	.word	0x08013dfd
 8013dd8:	08013e17 	.word	0x08013e17
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 8013ddc:	2300      	movs	r3, #0
 8013dde:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8013de2:	e028      	b.n	8013e36 <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 8013de4:	f107 0308 	add.w	r3, r7, #8
 8013de8:	4618      	mov	r0, r3
 8013dea:	f7ff fe79 	bl	8013ae0 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 8013dee:	6a3a      	ldr	r2, [r7, #32]
 8013df0:	683b      	ldr	r3, [r7, #0]
 8013df2:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 8013df4:	2300      	movs	r3, #0
 8013df6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8013dfa:	e01c      	b.n	8013e36 <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 8013dfc:	f107 0308 	add.w	r3, r7, #8
 8013e00:	4618      	mov	r0, r3
 8013e02:	f7ff fe6d 	bl	8013ae0 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 8013e06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013e08:	b29a      	uxth	r2, r3
 8013e0a:	683b      	ldr	r3, [r7, #0]
 8013e0c:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 8013e0e:	2300      	movs	r3, #0
 8013e10:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8013e14:	e00f      	b.n	8013e36 <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 8013e16:	f107 0308 	add.w	r3, r7, #8
 8013e1a:	4618      	mov	r0, r3
 8013e1c:	f7ff fe60 	bl	8013ae0 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 8013e20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013e22:	0a5a      	lsrs	r2, r3, #9
 8013e24:	683b      	ldr	r3, [r7, #0]
 8013e26:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 8013e28:	2300      	movs	r3, #0
 8013e2a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8013e2e:	e002      	b.n	8013e36 <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 8013e30:	2304      	movs	r3, #4
 8013e32:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  return res;
 8013e36:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8013e3a:	4618      	mov	r0, r3
 8013e3c:	3730      	adds	r7, #48	; 0x30
 8013e3e:	46bd      	mov	sp, r7
 8013e40:	bd80      	pop	{r7, pc}
 8013e42:	bf00      	nop
 8013e44:	2400001d 	.word	0x2400001d

08013e48 <BSP_SD_WriteCpltCallback>:
  * @brief Tx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_WriteCpltCallback(void)
{
 8013e48:	b480      	push	{r7}
 8013e4a:	af00      	add	r7, sp, #0

  WriteStatus = 1;
 8013e4c:	4b03      	ldr	r3, [pc, #12]	; (8013e5c <BSP_SD_WriteCpltCallback+0x14>)
 8013e4e:	2201      	movs	r2, #1
 8013e50:	601a      	str	r2, [r3, #0]
}
 8013e52:	bf00      	nop
 8013e54:	46bd      	mov	sp, r7
 8013e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013e5a:	4770      	bx	lr
 8013e5c:	240404c4 	.word	0x240404c4

08013e60 <BSP_SD_ReadCpltCallback>:
  * @brief Rx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_ReadCpltCallback(void)
{
 8013e60:	b480      	push	{r7}
 8013e62:	af00      	add	r7, sp, #0
  ReadStatus = 1;
 8013e64:	4b03      	ldr	r3, [pc, #12]	; (8013e74 <BSP_SD_ReadCpltCallback+0x14>)
 8013e66:	2201      	movs	r2, #1
 8013e68:	601a      	str	r2, [r3, #0]
}
 8013e6a:	bf00      	nop
 8013e6c:	46bd      	mov	sp, r7
 8013e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013e72:	4770      	bx	lr
 8013e74:	240404c8 	.word	0x240404c8

08013e78 <USBD_MSC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
uint8_t USBD_MSC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8013e78:	b580      	push	{r7, lr}
 8013e7a:	b084      	sub	sp, #16
 8013e7c:	af00      	add	r7, sp, #0
 8013e7e:	6078      	str	r0, [r7, #4]
 8013e80:	460b      	mov	r3, r1
 8013e82:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_MSC_BOT_HandleTypeDef *hmsc;

  hmsc = USBD_malloc(sizeof(USBD_MSC_BOT_HandleTypeDef));
 8013e84:	f248 0074 	movw	r0, #32884	; 0x8074
 8013e88:	f006 fcc2 	bl	801a810 <malloc>
 8013e8c:	4603      	mov	r3, r0
 8013e8e:	60fb      	str	r3, [r7, #12]

  if (hmsc == NULL)
 8013e90:	68fb      	ldr	r3, [r7, #12]
 8013e92:	2b00      	cmp	r3, #0
 8013e94:	d105      	bne.n	8013ea2 <USBD_MSC_Init+0x2a>
  {
    pdev->pClassData = NULL;
 8013e96:	687b      	ldr	r3, [r7, #4]
 8013e98:	2200      	movs	r2, #0
 8013e9a:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 8013e9e:	2302      	movs	r3, #2
 8013ea0:	e034      	b.n	8013f0c <USBD_MSC_Init+0x94>
  }

  pdev->pClassData = (void *)hmsc;
 8013ea2:	687b      	ldr	r3, [r7, #4]
 8013ea4:	68fa      	ldr	r2, [r7, #12]
 8013ea6:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8013eaa:	687b      	ldr	r3, [r7, #4]
 8013eac:	7c1b      	ldrb	r3, [r3, #16]
 8013eae:	2b00      	cmp	r3, #0
 8013eb0:	d115      	bne.n	8013ede <USBD_MSC_Init+0x66>
  {
    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, MSC_EPOUT_ADDR, USBD_EP_TYPE_BULK, MSC_MAX_HS_PACKET);
 8013eb2:	f44f 7300 	mov.w	r3, #512	; 0x200
 8013eb6:	2202      	movs	r2, #2
 8013eb8:	2101      	movs	r1, #1
 8013eba:	6878      	ldr	r0, [r7, #4]
 8013ebc:	f005 fd1d 	bl	80198fa <USBD_LL_OpenEP>
    pdev->ep_out[MSC_EPOUT_ADDR & 0xFU].is_used = 1U;
 8013ec0:	687b      	ldr	r3, [r7, #4]
 8013ec2:	2201      	movs	r2, #1
 8013ec4:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, MSC_EPIN_ADDR, USBD_EP_TYPE_BULK, MSC_MAX_HS_PACKET);
 8013ec8:	f44f 7300 	mov.w	r3, #512	; 0x200
 8013ecc:	2202      	movs	r2, #2
 8013ece:	2181      	movs	r1, #129	; 0x81
 8013ed0:	6878      	ldr	r0, [r7, #4]
 8013ed2:	f005 fd12 	bl	80198fa <USBD_LL_OpenEP>
    pdev->ep_in[MSC_EPIN_ADDR & 0xFU].is_used = 1U;
 8013ed6:	687b      	ldr	r3, [r7, #4]
 8013ed8:	2201      	movs	r2, #1
 8013eda:	871a      	strh	r2, [r3, #56]	; 0x38
 8013edc:	e012      	b.n	8013f04 <USBD_MSC_Init+0x8c>
  }
  else
  {
    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, MSC_EPOUT_ADDR, USBD_EP_TYPE_BULK, MSC_MAX_FS_PACKET);
 8013ede:	2340      	movs	r3, #64	; 0x40
 8013ee0:	2202      	movs	r2, #2
 8013ee2:	2101      	movs	r1, #1
 8013ee4:	6878      	ldr	r0, [r7, #4]
 8013ee6:	f005 fd08 	bl	80198fa <USBD_LL_OpenEP>
    pdev->ep_out[MSC_EPOUT_ADDR & 0xFU].is_used = 1U;
 8013eea:	687b      	ldr	r3, [r7, #4]
 8013eec:	2201      	movs	r2, #1
 8013eee:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, MSC_EPIN_ADDR, USBD_EP_TYPE_BULK, MSC_MAX_FS_PACKET);
 8013ef2:	2340      	movs	r3, #64	; 0x40
 8013ef4:	2202      	movs	r2, #2
 8013ef6:	2181      	movs	r1, #129	; 0x81
 8013ef8:	6878      	ldr	r0, [r7, #4]
 8013efa:	f005 fcfe 	bl	80198fa <USBD_LL_OpenEP>
    pdev->ep_in[MSC_EPIN_ADDR & 0xFU].is_used = 1U;
 8013efe:	687b      	ldr	r3, [r7, #4]
 8013f00:	2201      	movs	r2, #1
 8013f02:	871a      	strh	r2, [r3, #56]	; 0x38
  }

  /* Init the BOT  layer */
  MSC_BOT_Init(pdev);
 8013f04:	6878      	ldr	r0, [r7, #4]
 8013f06:	f000 f98e 	bl	8014226 <MSC_BOT_Init>

  return (uint8_t)USBD_OK;
 8013f0a:	2300      	movs	r3, #0
}
 8013f0c:	4618      	mov	r0, r3
 8013f0e:	3710      	adds	r7, #16
 8013f10:	46bd      	mov	sp, r7
 8013f12:	bd80      	pop	{r7, pc}

08013f14 <USBD_MSC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
uint8_t USBD_MSC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8013f14:	b580      	push	{r7, lr}
 8013f16:	b082      	sub	sp, #8
 8013f18:	af00      	add	r7, sp, #0
 8013f1a:	6078      	str	r0, [r7, #4]
 8013f1c:	460b      	mov	r3, r1
 8013f1e:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  /* Close MSC EPs */
  (void)USBD_LL_CloseEP(pdev, MSC_EPOUT_ADDR);
 8013f20:	2101      	movs	r1, #1
 8013f22:	6878      	ldr	r0, [r7, #4]
 8013f24:	f005 fd0f 	bl	8019946 <USBD_LL_CloseEP>
  pdev->ep_out[MSC_EPOUT_ADDR & 0xFU].is_used = 0U;
 8013f28:	687b      	ldr	r3, [r7, #4]
 8013f2a:	2200      	movs	r2, #0
 8013f2c:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, MSC_EPIN_ADDR);
 8013f30:	2181      	movs	r1, #129	; 0x81
 8013f32:	6878      	ldr	r0, [r7, #4]
 8013f34:	f005 fd07 	bl	8019946 <USBD_LL_CloseEP>
  pdev->ep_in[MSC_EPIN_ADDR & 0xFU].is_used = 0U;
 8013f38:	687b      	ldr	r3, [r7, #4]
 8013f3a:	2200      	movs	r2, #0
 8013f3c:	871a      	strh	r2, [r3, #56]	; 0x38

  /* De-Init the BOT layer */
  MSC_BOT_DeInit(pdev);
 8013f3e:	6878      	ldr	r0, [r7, #4]
 8013f40:	f000 f9cf 	bl	80142e2 <MSC_BOT_DeInit>

  /* Free MSC Class Resources */
  if (pdev->pClassData != NULL)
 8013f44:	687b      	ldr	r3, [r7, #4]
 8013f46:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8013f4a:	2b00      	cmp	r3, #0
 8013f4c:	d009      	beq.n	8013f62 <USBD_MSC_DeInit+0x4e>
  {
    (void)USBD_free(pdev->pClassData);
 8013f4e:	687b      	ldr	r3, [r7, #4]
 8013f50:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8013f54:	4618      	mov	r0, r3
 8013f56:	f006 fc63 	bl	801a820 <free>
    pdev->pClassData = NULL;
 8013f5a:	687b      	ldr	r3, [r7, #4]
 8013f5c:	2200      	movs	r2, #0
 8013f5e:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 8013f62:	2300      	movs	r3, #0
}
 8013f64:	4618      	mov	r0, r3
 8013f66:	3708      	adds	r7, #8
 8013f68:	46bd      	mov	sp, r7
 8013f6a:	bd80      	pop	{r7, pc}

08013f6c <USBD_MSC_Setup>:
* @param  pdev: device instance
* @param  req: USB request
* @retval status
*/
uint8_t USBD_MSC_Setup(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8013f6c:	b580      	push	{r7, lr}
 8013f6e:	b086      	sub	sp, #24
 8013f70:	af00      	add	r7, sp, #0
 8013f72:	6078      	str	r0, [r7, #4]
 8013f74:	6039      	str	r1, [r7, #0]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8013f76:	687b      	ldr	r3, [r7, #4]
 8013f78:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8013f7c:	613b      	str	r3, [r7, #16]
  USBD_StatusTypeDef ret = USBD_OK;
 8013f7e:	2300      	movs	r3, #0
 8013f80:	75fb      	strb	r3, [r7, #23]
  uint16_t status_info = 0U;
 8013f82:	2300      	movs	r3, #0
 8013f84:	81fb      	strh	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8013f86:	683b      	ldr	r3, [r7, #0]
 8013f88:	781b      	ldrb	r3, [r3, #0]
 8013f8a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8013f8e:	2b00      	cmp	r3, #0
 8013f90:	d04d      	beq.n	801402e <USBD_MSC_Setup+0xc2>
 8013f92:	2b20      	cmp	r3, #32
 8013f94:	f040 80c6 	bne.w	8014124 <USBD_MSC_Setup+0x1b8>
  {
    /* Class request */
  case USB_REQ_TYPE_CLASS:
    switch (req->bRequest)
 8013f98:	683b      	ldr	r3, [r7, #0]
 8013f9a:	785b      	ldrb	r3, [r3, #1]
 8013f9c:	2bfe      	cmp	r3, #254	; 0xfe
 8013f9e:	d002      	beq.n	8013fa6 <USBD_MSC_Setup+0x3a>
 8013fa0:	2bff      	cmp	r3, #255	; 0xff
 8013fa2:	d024      	beq.n	8013fee <USBD_MSC_Setup+0x82>
 8013fa4:	e03b      	b.n	801401e <USBD_MSC_Setup+0xb2>
    {
    case BOT_GET_MAX_LUN:
      if ((req->wValue  == 0U) && (req->wLength == 1U) &&
 8013fa6:	683b      	ldr	r3, [r7, #0]
 8013fa8:	885b      	ldrh	r3, [r3, #2]
 8013faa:	2b00      	cmp	r3, #0
 8013fac:	d118      	bne.n	8013fe0 <USBD_MSC_Setup+0x74>
 8013fae:	683b      	ldr	r3, [r7, #0]
 8013fb0:	88db      	ldrh	r3, [r3, #6]
 8013fb2:	2b01      	cmp	r3, #1
 8013fb4:	d114      	bne.n	8013fe0 <USBD_MSC_Setup+0x74>
          ((req->bmRequest & 0x80U) == 0x80U))
 8013fb6:	683b      	ldr	r3, [r7, #0]
 8013fb8:	781b      	ldrb	r3, [r3, #0]
 8013fba:	b25b      	sxtb	r3, r3
      if ((req->wValue  == 0U) && (req->wLength == 1U) &&
 8013fbc:	2b00      	cmp	r3, #0
 8013fbe:	da0f      	bge.n	8013fe0 <USBD_MSC_Setup+0x74>
      {
        hmsc->max_lun = (uint32_t)((USBD_StorageTypeDef *)pdev->pUserData)->GetMaxLun();
 8013fc0:	687b      	ldr	r3, [r7, #4]
 8013fc2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8013fc6:	699b      	ldr	r3, [r3, #24]
 8013fc8:	4798      	blx	r3
 8013fca:	4603      	mov	r3, r0
 8013fcc:	461a      	mov	r2, r3
 8013fce:	693b      	ldr	r3, [r7, #16]
 8013fd0:	601a      	str	r2, [r3, #0]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&hmsc->max_lun, 1U);
 8013fd2:	693b      	ldr	r3, [r7, #16]
 8013fd4:	2201      	movs	r2, #1
 8013fd6:	4619      	mov	r1, r3
 8013fd8:	6878      	ldr	r0, [r7, #4]
 8013fda:	f002 fdaa 	bl	8016b32 <USBD_CtlSendData>
      else
      {
        USBD_CtlError(pdev, req);
        ret = USBD_FAIL;
      }
      break;
 8013fde:	e025      	b.n	801402c <USBD_MSC_Setup+0xc0>
        USBD_CtlError(pdev, req);
 8013fe0:	6839      	ldr	r1, [r7, #0]
 8013fe2:	6878      	ldr	r0, [r7, #4]
 8013fe4:	f002 fd34 	bl	8016a50 <USBD_CtlError>
        ret = USBD_FAIL;
 8013fe8:	2303      	movs	r3, #3
 8013fea:	75fb      	strb	r3, [r7, #23]
      break;
 8013fec:	e01e      	b.n	801402c <USBD_MSC_Setup+0xc0>

    case BOT_RESET :
      if ((req->wValue  == 0U) && (req->wLength == 0U) &&
 8013fee:	683b      	ldr	r3, [r7, #0]
 8013ff0:	885b      	ldrh	r3, [r3, #2]
 8013ff2:	2b00      	cmp	r3, #0
 8013ff4:	d10c      	bne.n	8014010 <USBD_MSC_Setup+0xa4>
 8013ff6:	683b      	ldr	r3, [r7, #0]
 8013ff8:	88db      	ldrh	r3, [r3, #6]
 8013ffa:	2b00      	cmp	r3, #0
 8013ffc:	d108      	bne.n	8014010 <USBD_MSC_Setup+0xa4>
          ((req->bmRequest & 0x80U) != 0x80U))
 8013ffe:	683b      	ldr	r3, [r7, #0]
 8014000:	781b      	ldrb	r3, [r3, #0]
 8014002:	b25b      	sxtb	r3, r3
      if ((req->wValue  == 0U) && (req->wLength == 0U) &&
 8014004:	2b00      	cmp	r3, #0
 8014006:	db03      	blt.n	8014010 <USBD_MSC_Setup+0xa4>
      {
        MSC_BOT_Reset(pdev);
 8014008:	6878      	ldr	r0, [r7, #4]
 801400a:	f000 f947 	bl	801429c <MSC_BOT_Reset>
      else
      {
        USBD_CtlError(pdev, req);
        ret = USBD_FAIL;
      }
      break;
 801400e:	e00d      	b.n	801402c <USBD_MSC_Setup+0xc0>
        USBD_CtlError(pdev, req);
 8014010:	6839      	ldr	r1, [r7, #0]
 8014012:	6878      	ldr	r0, [r7, #4]
 8014014:	f002 fd1c 	bl	8016a50 <USBD_CtlError>
        ret = USBD_FAIL;
 8014018:	2303      	movs	r3, #3
 801401a:	75fb      	strb	r3, [r7, #23]
      break;
 801401c:	e006      	b.n	801402c <USBD_MSC_Setup+0xc0>

    default:
      USBD_CtlError(pdev, req);
 801401e:	6839      	ldr	r1, [r7, #0]
 8014020:	6878      	ldr	r0, [r7, #4]
 8014022:	f002 fd15 	bl	8016a50 <USBD_CtlError>
      ret = USBD_FAIL;
 8014026:	2303      	movs	r3, #3
 8014028:	75fb      	strb	r3, [r7, #23]
      break;
 801402a:	bf00      	nop
    }
    break;
 801402c:	e081      	b.n	8014132 <USBD_MSC_Setup+0x1c6>
    /* Interface & Endpoint request */
  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 801402e:	683b      	ldr	r3, [r7, #0]
 8014030:	785b      	ldrb	r3, [r3, #1]
 8014032:	2b0b      	cmp	r3, #11
 8014034:	d86d      	bhi.n	8014112 <USBD_MSC_Setup+0x1a6>
 8014036:	a201      	add	r2, pc, #4	; (adr r2, 801403c <USBD_MSC_Setup+0xd0>)
 8014038:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801403c:	0801406d 	.word	0x0801406d
 8014040:	080140e3 	.word	0x080140e3
 8014044:	08014113 	.word	0x08014113
 8014048:	08014113 	.word	0x08014113
 801404c:	08014113 	.word	0x08014113
 8014050:	08014113 	.word	0x08014113
 8014054:	08014113 	.word	0x08014113
 8014058:	08014113 	.word	0x08014113
 801405c:	08014113 	.word	0x08014113
 8014060:	08014113 	.word	0x08014113
 8014064:	08014095 	.word	0x08014095
 8014068:	080140bd 	.word	0x080140bd
    {
    case USB_REQ_GET_STATUS:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801406c:	687b      	ldr	r3, [r7, #4]
 801406e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8014072:	2b03      	cmp	r3, #3
 8014074:	d107      	bne.n	8014086 <USBD_MSC_Setup+0x11a>
      {
        (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8014076:	f107 030e 	add.w	r3, r7, #14
 801407a:	2202      	movs	r2, #2
 801407c:	4619      	mov	r1, r3
 801407e:	6878      	ldr	r0, [r7, #4]
 8014080:	f002 fd57 	bl	8016b32 <USBD_CtlSendData>
      else
      {
        USBD_CtlError(pdev, req);
        ret = USBD_FAIL;
      }
      break;
 8014084:	e04d      	b.n	8014122 <USBD_MSC_Setup+0x1b6>
        USBD_CtlError(pdev, req);
 8014086:	6839      	ldr	r1, [r7, #0]
 8014088:	6878      	ldr	r0, [r7, #4]
 801408a:	f002 fce1 	bl	8016a50 <USBD_CtlError>
        ret = USBD_FAIL;
 801408e:	2303      	movs	r3, #3
 8014090:	75fb      	strb	r3, [r7, #23]
      break;
 8014092:	e046      	b.n	8014122 <USBD_MSC_Setup+0x1b6>

    case USB_REQ_GET_INTERFACE:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8014094:	687b      	ldr	r3, [r7, #4]
 8014096:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801409a:	2b03      	cmp	r3, #3
 801409c:	d107      	bne.n	80140ae <USBD_MSC_Setup+0x142>
      {
        (void)USBD_CtlSendData(pdev, (uint8_t *)&hmsc->interface, 1U);
 801409e:	693b      	ldr	r3, [r7, #16]
 80140a0:	3304      	adds	r3, #4
 80140a2:	2201      	movs	r2, #1
 80140a4:	4619      	mov	r1, r3
 80140a6:	6878      	ldr	r0, [r7, #4]
 80140a8:	f002 fd43 	bl	8016b32 <USBD_CtlSendData>
      else
      {
        USBD_CtlError(pdev, req);
        ret = USBD_FAIL;
      }
      break;
 80140ac:	e039      	b.n	8014122 <USBD_MSC_Setup+0x1b6>
        USBD_CtlError(pdev, req);
 80140ae:	6839      	ldr	r1, [r7, #0]
 80140b0:	6878      	ldr	r0, [r7, #4]
 80140b2:	f002 fccd 	bl	8016a50 <USBD_CtlError>
        ret = USBD_FAIL;
 80140b6:	2303      	movs	r3, #3
 80140b8:	75fb      	strb	r3, [r7, #23]
      break;
 80140ba:	e032      	b.n	8014122 <USBD_MSC_Setup+0x1b6>

    case USB_REQ_SET_INTERFACE:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80140bc:	687b      	ldr	r3, [r7, #4]
 80140be:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80140c2:	2b03      	cmp	r3, #3
 80140c4:	d106      	bne.n	80140d4 <USBD_MSC_Setup+0x168>
      {
        hmsc->interface = (uint8_t)(req->wValue);
 80140c6:	683b      	ldr	r3, [r7, #0]
 80140c8:	885b      	ldrh	r3, [r3, #2]
 80140ca:	b2db      	uxtb	r3, r3
 80140cc:	461a      	mov	r2, r3
 80140ce:	693b      	ldr	r3, [r7, #16]
 80140d0:	605a      	str	r2, [r3, #4]
      else
      {
        USBD_CtlError(pdev, req);
        ret = USBD_FAIL;
      }
      break;
 80140d2:	e026      	b.n	8014122 <USBD_MSC_Setup+0x1b6>
        USBD_CtlError(pdev, req);
 80140d4:	6839      	ldr	r1, [r7, #0]
 80140d6:	6878      	ldr	r0, [r7, #4]
 80140d8:	f002 fcba 	bl	8016a50 <USBD_CtlError>
        ret = USBD_FAIL;
 80140dc:	2303      	movs	r3, #3
 80140de:	75fb      	strb	r3, [r7, #23]
      break;
 80140e0:	e01f      	b.n	8014122 <USBD_MSC_Setup+0x1b6>

    case USB_REQ_CLEAR_FEATURE:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80140e2:	687b      	ldr	r3, [r7, #4]
 80140e4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80140e8:	2b03      	cmp	r3, #3
 80140ea:	d119      	bne.n	8014120 <USBD_MSC_Setup+0x1b4>
      {
        if (req->wValue == USB_FEATURE_EP_HALT)
 80140ec:	683b      	ldr	r3, [r7, #0]
 80140ee:	885b      	ldrh	r3, [r3, #2]
 80140f0:	2b00      	cmp	r3, #0
 80140f2:	d115      	bne.n	8014120 <USBD_MSC_Setup+0x1b4>
        {
          /* Flush the FIFO */
          (void)USBD_LL_FlushEP(pdev, (uint8_t)req->wIndex);
 80140f4:	683b      	ldr	r3, [r7, #0]
 80140f6:	889b      	ldrh	r3, [r3, #4]
 80140f8:	b2db      	uxtb	r3, r3
 80140fa:	4619      	mov	r1, r3
 80140fc:	6878      	ldr	r0, [r7, #4]
 80140fe:	f005 fc41 	bl	8019984 <USBD_LL_FlushEP>

          /* Handle BOT error */
          MSC_BOT_CplClrFeature(pdev, (uint8_t)req->wIndex);
 8014102:	683b      	ldr	r3, [r7, #0]
 8014104:	889b      	ldrh	r3, [r3, #4]
 8014106:	b2db      	uxtb	r3, r3
 8014108:	4619      	mov	r1, r3
 801410a:	6878      	ldr	r0, [r7, #4]
 801410c:	f000 fa90 	bl	8014630 <MSC_BOT_CplClrFeature>
        }
      }
      break;
 8014110:	e006      	b.n	8014120 <USBD_MSC_Setup+0x1b4>

    default:
      USBD_CtlError(pdev, req);
 8014112:	6839      	ldr	r1, [r7, #0]
 8014114:	6878      	ldr	r0, [r7, #4]
 8014116:	f002 fc9b 	bl	8016a50 <USBD_CtlError>
      ret = USBD_FAIL;
 801411a:	2303      	movs	r3, #3
 801411c:	75fb      	strb	r3, [r7, #23]
      break;
 801411e:	e000      	b.n	8014122 <USBD_MSC_Setup+0x1b6>
      break;
 8014120:	bf00      	nop
    }
    break;
 8014122:	e006      	b.n	8014132 <USBD_MSC_Setup+0x1c6>

  default:
    USBD_CtlError(pdev, req);
 8014124:	6839      	ldr	r1, [r7, #0]
 8014126:	6878      	ldr	r0, [r7, #4]
 8014128:	f002 fc92 	bl	8016a50 <USBD_CtlError>
    ret = USBD_FAIL;
 801412c:	2303      	movs	r3, #3
 801412e:	75fb      	strb	r3, [r7, #23]
    break;
 8014130:	bf00      	nop
  }

  return (uint8_t)ret;
 8014132:	7dfb      	ldrb	r3, [r7, #23]
}
 8014134:	4618      	mov	r0, r3
 8014136:	3718      	adds	r7, #24
 8014138:	46bd      	mov	sp, r7
 801413a:	bd80      	pop	{r7, pc}

0801413c <USBD_MSC_DataIn>:
* @param  pdev: device instance
* @param  epnum: endpoint index
* @retval status
*/
uint8_t USBD_MSC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 801413c:	b580      	push	{r7, lr}
 801413e:	b082      	sub	sp, #8
 8014140:	af00      	add	r7, sp, #0
 8014142:	6078      	str	r0, [r7, #4]
 8014144:	460b      	mov	r3, r1
 8014146:	70fb      	strb	r3, [r7, #3]
  MSC_BOT_DataIn(pdev, epnum);
 8014148:	78fb      	ldrb	r3, [r7, #3]
 801414a:	4619      	mov	r1, r3
 801414c:	6878      	ldr	r0, [r7, #4]
 801414e:	f000 f8d9 	bl	8014304 <MSC_BOT_DataIn>

  return (uint8_t)USBD_OK;
 8014152:	2300      	movs	r3, #0
}
 8014154:	4618      	mov	r0, r3
 8014156:	3708      	adds	r7, #8
 8014158:	46bd      	mov	sp, r7
 801415a:	bd80      	pop	{r7, pc}

0801415c <USBD_MSC_DataOut>:
* @param  pdev: device instance
* @param  epnum: endpoint index
* @retval status
*/
uint8_t USBD_MSC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 801415c:	b580      	push	{r7, lr}
 801415e:	b082      	sub	sp, #8
 8014160:	af00      	add	r7, sp, #0
 8014162:	6078      	str	r0, [r7, #4]
 8014164:	460b      	mov	r3, r1
 8014166:	70fb      	strb	r3, [r7, #3]
  MSC_BOT_DataOut(pdev, epnum);
 8014168:	78fb      	ldrb	r3, [r7, #3]
 801416a:	4619      	mov	r1, r3
 801416c:	6878      	ldr	r0, [r7, #4]
 801416e:	f000 f8fd 	bl	801436c <MSC_BOT_DataOut>

  return (uint8_t)USBD_OK;
 8014172:	2300      	movs	r3, #0
}
 8014174:	4618      	mov	r0, r3
 8014176:	3708      	adds	r7, #8
 8014178:	46bd      	mov	sp, r7
 801417a:	bd80      	pop	{r7, pc}

0801417c <USBD_MSC_GetHSCfgDesc>:
*         return configuration descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t *USBD_MSC_GetHSCfgDesc(uint16_t *length)
{
 801417c:	b480      	push	{r7}
 801417e:	b083      	sub	sp, #12
 8014180:	af00      	add	r7, sp, #0
 8014182:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_MSC_CfgHSDesc);
 8014184:	687b      	ldr	r3, [r7, #4]
 8014186:	2220      	movs	r2, #32
 8014188:	801a      	strh	r2, [r3, #0]

  return USBD_MSC_CfgHSDesc;
 801418a:	4b03      	ldr	r3, [pc, #12]	; (8014198 <USBD_MSC_GetHSCfgDesc+0x1c>)
}
 801418c:	4618      	mov	r0, r3
 801418e:	370c      	adds	r7, #12
 8014190:	46bd      	mov	sp, r7
 8014192:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014196:	4770      	bx	lr
 8014198:	24000058 	.word	0x24000058

0801419c <USBD_MSC_GetFSCfgDesc>:
*         return configuration descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t *USBD_MSC_GetFSCfgDesc(uint16_t *length)
{
 801419c:	b480      	push	{r7}
 801419e:	b083      	sub	sp, #12
 80141a0:	af00      	add	r7, sp, #0
 80141a2:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_MSC_CfgFSDesc);
 80141a4:	687b      	ldr	r3, [r7, #4]
 80141a6:	2220      	movs	r2, #32
 80141a8:	801a      	strh	r2, [r3, #0]

  return USBD_MSC_CfgFSDesc;
 80141aa:	4b03      	ldr	r3, [pc, #12]	; (80141b8 <USBD_MSC_GetFSCfgDesc+0x1c>)
}
 80141ac:	4618      	mov	r0, r3
 80141ae:	370c      	adds	r7, #12
 80141b0:	46bd      	mov	sp, r7
 80141b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80141b6:	4770      	bx	lr
 80141b8:	24000078 	.word	0x24000078

080141bc <USBD_MSC_GetOtherSpeedCfgDesc>:
*         return other speed configuration descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t *USBD_MSC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 80141bc:	b480      	push	{r7}
 80141be:	b083      	sub	sp, #12
 80141c0:	af00      	add	r7, sp, #0
 80141c2:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_MSC_OtherSpeedCfgDesc);
 80141c4:	687b      	ldr	r3, [r7, #4]
 80141c6:	2220      	movs	r2, #32
 80141c8:	801a      	strh	r2, [r3, #0]

  return USBD_MSC_OtherSpeedCfgDesc;
 80141ca:	4b03      	ldr	r3, [pc, #12]	; (80141d8 <USBD_MSC_GetOtherSpeedCfgDesc+0x1c>)
}
 80141cc:	4618      	mov	r0, r3
 80141ce:	370c      	adds	r7, #12
 80141d0:	46bd      	mov	sp, r7
 80141d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80141d6:	4770      	bx	lr
 80141d8:	24000098 	.word	0x24000098

080141dc <USBD_MSC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t *USBD_MSC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 80141dc:	b480      	push	{r7}
 80141de:	b083      	sub	sp, #12
 80141e0:	af00      	add	r7, sp, #0
 80141e2:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_MSC_DeviceQualifierDesc);
 80141e4:	687b      	ldr	r3, [r7, #4]
 80141e6:	220a      	movs	r2, #10
 80141e8:	801a      	strh	r2, [r3, #0]

  return USBD_MSC_DeviceQualifierDesc;
 80141ea:	4b03      	ldr	r3, [pc, #12]	; (80141f8 <USBD_MSC_GetDeviceQualifierDescriptor+0x1c>)
}
 80141ec:	4618      	mov	r0, r3
 80141ee:	370c      	adds	r7, #12
 80141f0:	46bd      	mov	sp, r7
 80141f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80141f6:	4770      	bx	lr
 80141f8:	240000b8 	.word	0x240000b8

080141fc <USBD_MSC_RegisterStorage>:
* @brief  USBD_MSC_RegisterStorage
* @param  fops: storage callback
* @retval status
*/
uint8_t USBD_MSC_RegisterStorage(USBD_HandleTypeDef *pdev, USBD_StorageTypeDef *fops)
{
 80141fc:	b480      	push	{r7}
 80141fe:	b083      	sub	sp, #12
 8014200:	af00      	add	r7, sp, #0
 8014202:	6078      	str	r0, [r7, #4]
 8014204:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8014206:	683b      	ldr	r3, [r7, #0]
 8014208:	2b00      	cmp	r3, #0
 801420a:	d101      	bne.n	8014210 <USBD_MSC_RegisterStorage+0x14>
  {
    return (uint8_t)USBD_FAIL;
 801420c:	2303      	movs	r3, #3
 801420e:	e004      	b.n	801421a <USBD_MSC_RegisterStorage+0x1e>
  }

  pdev->pUserData = fops;
 8014210:	687b      	ldr	r3, [r7, #4]
 8014212:	683a      	ldr	r2, [r7, #0]
 8014214:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 8014218:	2300      	movs	r3, #0
}
 801421a:	4618      	mov	r0, r3
 801421c:	370c      	adds	r7, #12
 801421e:	46bd      	mov	sp, r7
 8014220:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014224:	4770      	bx	lr

08014226 <MSC_BOT_Init>:
*         Initialize the BOT Process
* @param  pdev: device instance
* @retval None
*/
void MSC_BOT_Init(USBD_HandleTypeDef *pdev)
{
 8014226:	b580      	push	{r7, lr}
 8014228:	b084      	sub	sp, #16
 801422a:	af00      	add	r7, sp, #0
 801422c:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 801422e:	687b      	ldr	r3, [r7, #4]
 8014230:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8014234:	60fb      	str	r3, [r7, #12]

  hmsc->bot_state = USBD_BOT_IDLE;
 8014236:	68fb      	ldr	r3, [r7, #12]
 8014238:	2200      	movs	r2, #0
 801423a:	721a      	strb	r2, [r3, #8]
  hmsc->bot_status = USBD_BOT_STATUS_NORMAL;
 801423c:	68fb      	ldr	r3, [r7, #12]
 801423e:	2200      	movs	r2, #0
 8014240:	725a      	strb	r2, [r3, #9]

  hmsc->scsi_sense_tail = 0U;
 8014242:	68fa      	ldr	r2, [r7, #12]
 8014244:	f248 0361 	movw	r3, #32865	; 0x8061
 8014248:	4413      	add	r3, r2
 801424a:	2200      	movs	r2, #0
 801424c:	701a      	strb	r2, [r3, #0]
  hmsc->scsi_sense_head = 0U;
 801424e:	68fa      	ldr	r2, [r7, #12]
 8014250:	f248 0360 	movw	r3, #32864	; 0x8060
 8014254:	4413      	add	r3, r2
 8014256:	2200      	movs	r2, #0
 8014258:	701a      	strb	r2, [r3, #0]
  hmsc->scsi_medium_state = SCSI_MEDIUM_UNLOCKED;
 801425a:	68fa      	ldr	r2, [r7, #12]
 801425c:	f248 0362 	movw	r3, #32866	; 0x8062
 8014260:	4413      	add	r3, r2
 8014262:	2200      	movs	r2, #0
 8014264:	701a      	strb	r2, [r3, #0]

  ((USBD_StorageTypeDef *)pdev->pUserData)->Init(0U);
 8014266:	687b      	ldr	r3, [r7, #4]
 8014268:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 801426c:	681b      	ldr	r3, [r3, #0]
 801426e:	2000      	movs	r0, #0
 8014270:	4798      	blx	r3

  (void)USBD_LL_FlushEP(pdev, MSC_EPOUT_ADDR);
 8014272:	2101      	movs	r1, #1
 8014274:	6878      	ldr	r0, [r7, #4]
 8014276:	f005 fb85 	bl	8019984 <USBD_LL_FlushEP>
  (void)USBD_LL_FlushEP(pdev, MSC_EPIN_ADDR);
 801427a:	2181      	movs	r1, #129	; 0x81
 801427c:	6878      	ldr	r0, [r7, #4]
 801427e:	f005 fb81 	bl	8019984 <USBD_LL_FlushEP>

  /* Prapare EP to Receive First BOT Cmd */
  (void)USBD_LL_PrepareReceive(pdev, MSC_EPOUT_ADDR, (uint8_t *)&hmsc->cbw,
 8014282:	68fb      	ldr	r3, [r7, #12]
 8014284:	f248 0210 	movw	r2, #32784	; 0x8010
 8014288:	441a      	add	r2, r3
 801428a:	231f      	movs	r3, #31
 801428c:	2101      	movs	r1, #1
 801428e:	6878      	ldr	r0, [r7, #4]
 8014290:	f005 fc41 	bl	8019b16 <USBD_LL_PrepareReceive>
                               USBD_BOT_CBW_LENGTH);
}
 8014294:	bf00      	nop
 8014296:	3710      	adds	r7, #16
 8014298:	46bd      	mov	sp, r7
 801429a:	bd80      	pop	{r7, pc}

0801429c <MSC_BOT_Reset>:
*         Reset the BOT Machine
* @param  pdev: device instance
* @retval  None
*/
void MSC_BOT_Reset(USBD_HandleTypeDef *pdev)
{
 801429c:	b580      	push	{r7, lr}
 801429e:	b084      	sub	sp, #16
 80142a0:	af00      	add	r7, sp, #0
 80142a2:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 80142a4:	687b      	ldr	r3, [r7, #4]
 80142a6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80142aa:	60fb      	str	r3, [r7, #12]

  hmsc->bot_state  = USBD_BOT_IDLE;
 80142ac:	68fb      	ldr	r3, [r7, #12]
 80142ae:	2200      	movs	r2, #0
 80142b0:	721a      	strb	r2, [r3, #8]
  hmsc->bot_status = USBD_BOT_STATUS_RECOVERY;
 80142b2:	68fb      	ldr	r3, [r7, #12]
 80142b4:	2201      	movs	r2, #1
 80142b6:	725a      	strb	r2, [r3, #9]

  (void)USBD_LL_ClearStallEP(pdev, MSC_EPIN_ADDR);
 80142b8:	2181      	movs	r1, #129	; 0x81
 80142ba:	6878      	ldr	r0, [r7, #4]
 80142bc:	f005 fba0 	bl	8019a00 <USBD_LL_ClearStallEP>
  (void)USBD_LL_ClearStallEP(pdev, MSC_EPOUT_ADDR);
 80142c0:	2101      	movs	r1, #1
 80142c2:	6878      	ldr	r0, [r7, #4]
 80142c4:	f005 fb9c 	bl	8019a00 <USBD_LL_ClearStallEP>

  /* Prapare EP to Receive First BOT Cmd */
  (void)USBD_LL_PrepareReceive(pdev, MSC_EPOUT_ADDR, (uint8_t *)&hmsc->cbw,
 80142c8:	68fb      	ldr	r3, [r7, #12]
 80142ca:	f248 0210 	movw	r2, #32784	; 0x8010
 80142ce:	441a      	add	r2, r3
 80142d0:	231f      	movs	r3, #31
 80142d2:	2101      	movs	r1, #1
 80142d4:	6878      	ldr	r0, [r7, #4]
 80142d6:	f005 fc1e 	bl	8019b16 <USBD_LL_PrepareReceive>
                               USBD_BOT_CBW_LENGTH);
}
 80142da:	bf00      	nop
 80142dc:	3710      	adds	r7, #16
 80142de:	46bd      	mov	sp, r7
 80142e0:	bd80      	pop	{r7, pc}

080142e2 <MSC_BOT_DeInit>:
*         Deinitialize the BOT Machine
* @param  pdev: device instance
* @retval None
*/
void MSC_BOT_DeInit(USBD_HandleTypeDef  *pdev)
{
 80142e2:	b480      	push	{r7}
 80142e4:	b085      	sub	sp, #20
 80142e6:	af00      	add	r7, sp, #0
 80142e8:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 80142ea:	687b      	ldr	r3, [r7, #4]
 80142ec:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80142f0:	60fb      	str	r3, [r7, #12]
  hmsc->bot_state = USBD_BOT_IDLE;
 80142f2:	68fb      	ldr	r3, [r7, #12]
 80142f4:	2200      	movs	r2, #0
 80142f6:	721a      	strb	r2, [r3, #8]
}
 80142f8:	bf00      	nop
 80142fa:	3714      	adds	r7, #20
 80142fc:	46bd      	mov	sp, r7
 80142fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014302:	4770      	bx	lr

08014304 <MSC_BOT_DataIn>:
* @param  pdev: device instance
* @param  epnum: endpoint index
* @retval None
*/
void MSC_BOT_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8014304:	b580      	push	{r7, lr}
 8014306:	b084      	sub	sp, #16
 8014308:	af00      	add	r7, sp, #0
 801430a:	6078      	str	r0, [r7, #4]
 801430c:	460b      	mov	r3, r1
 801430e:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);

  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8014310:	687b      	ldr	r3, [r7, #4]
 8014312:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8014316:	60fb      	str	r3, [r7, #12]

  switch (hmsc->bot_state)
 8014318:	68fb      	ldr	r3, [r7, #12]
 801431a:	7a1b      	ldrb	r3, [r3, #8]
 801431c:	2b02      	cmp	r3, #2
 801431e:	d004      	beq.n	801432a <MSC_BOT_DataIn+0x26>
 8014320:	2b02      	cmp	r3, #2
 8014322:	db1c      	blt.n	801435e <MSC_BOT_DataIn+0x5a>
 8014324:	2b04      	cmp	r3, #4
 8014326:	dc1a      	bgt.n	801435e <MSC_BOT_DataIn+0x5a>
 8014328:	e014      	b.n	8014354 <MSC_BOT_DataIn+0x50>
  {
  case USBD_BOT_DATA_IN:
    if (SCSI_ProcessCmd(pdev, hmsc->cbw.bLUN, &hmsc->cbw.CB[0]) < 0)
 801432a:	68fa      	ldr	r2, [r7, #12]
 801432c:	f248 031d 	movw	r3, #32797	; 0x801d
 8014330:	4413      	add	r3, r2
 8014332:	7819      	ldrb	r1, [r3, #0]
 8014334:	68fa      	ldr	r2, [r7, #12]
 8014336:	f248 031f 	movw	r3, #32799	; 0x801f
 801433a:	4413      	add	r3, r2
 801433c:	461a      	mov	r2, r3
 801433e:	6878      	ldr	r0, [r7, #4]
 8014340:	f000 f99e 	bl	8014680 <SCSI_ProcessCmd>
 8014344:	4603      	mov	r3, r0
 8014346:	2b00      	cmp	r3, #0
 8014348:	da0b      	bge.n	8014362 <MSC_BOT_DataIn+0x5e>
    {
      MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
 801434a:	2101      	movs	r1, #1
 801434c:	6878      	ldr	r0, [r7, #4]
 801434e:	f000 f90b 	bl	8014568 <MSC_BOT_SendCSW>
    }
    break;
 8014352:	e006      	b.n	8014362 <MSC_BOT_DataIn+0x5e>

  case USBD_BOT_SEND_DATA:
  case USBD_BOT_LAST_DATA_IN:
    MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_PASSED);
 8014354:	2100      	movs	r1, #0
 8014356:	6878      	ldr	r0, [r7, #4]
 8014358:	f000 f906 	bl	8014568 <MSC_BOT_SendCSW>
    break;
 801435c:	e002      	b.n	8014364 <MSC_BOT_DataIn+0x60>

  default:
    break;
 801435e:	bf00      	nop
 8014360:	e000      	b.n	8014364 <MSC_BOT_DataIn+0x60>
    break;
 8014362:	bf00      	nop
  }
}
 8014364:	bf00      	nop
 8014366:	3710      	adds	r7, #16
 8014368:	46bd      	mov	sp, r7
 801436a:	bd80      	pop	{r7, pc}

0801436c <MSC_BOT_DataOut>:
* @param  pdev: device instance
* @param  epnum: endpoint index
* @retval None
*/
void MSC_BOT_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 801436c:	b580      	push	{r7, lr}
 801436e:	b084      	sub	sp, #16
 8014370:	af00      	add	r7, sp, #0
 8014372:	6078      	str	r0, [r7, #4]
 8014374:	460b      	mov	r3, r1
 8014376:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);

  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8014378:	687b      	ldr	r3, [r7, #4]
 801437a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 801437e:	60fb      	str	r3, [r7, #12]

  switch (hmsc->bot_state)
 8014380:	68fb      	ldr	r3, [r7, #12]
 8014382:	7a1b      	ldrb	r3, [r3, #8]
 8014384:	2b00      	cmp	r3, #0
 8014386:	d002      	beq.n	801438e <MSC_BOT_DataOut+0x22>
 8014388:	2b01      	cmp	r3, #1
 801438a:	d004      	beq.n	8014396 <MSC_BOT_DataOut+0x2a>
        MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
      }
      break;

    default:
      break;
 801438c:	e018      	b.n	80143c0 <MSC_BOT_DataOut+0x54>
      MSC_BOT_CBW_Decode(pdev);
 801438e:	6878      	ldr	r0, [r7, #4]
 8014390:	f000 f81a 	bl	80143c8 <MSC_BOT_CBW_Decode>
      break;
 8014394:	e014      	b.n	80143c0 <MSC_BOT_DataOut+0x54>
      if (SCSI_ProcessCmd(pdev, hmsc->cbw.bLUN, &hmsc->cbw.CB[0]) < 0)
 8014396:	68fa      	ldr	r2, [r7, #12]
 8014398:	f248 031d 	movw	r3, #32797	; 0x801d
 801439c:	4413      	add	r3, r2
 801439e:	7819      	ldrb	r1, [r3, #0]
 80143a0:	68fa      	ldr	r2, [r7, #12]
 80143a2:	f248 031f 	movw	r3, #32799	; 0x801f
 80143a6:	4413      	add	r3, r2
 80143a8:	461a      	mov	r2, r3
 80143aa:	6878      	ldr	r0, [r7, #4]
 80143ac:	f000 f968 	bl	8014680 <SCSI_ProcessCmd>
 80143b0:	4603      	mov	r3, r0
 80143b2:	2b00      	cmp	r3, #0
 80143b4:	da03      	bge.n	80143be <MSC_BOT_DataOut+0x52>
        MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
 80143b6:	2101      	movs	r1, #1
 80143b8:	6878      	ldr	r0, [r7, #4]
 80143ba:	f000 f8d5 	bl	8014568 <MSC_BOT_SendCSW>
      break;
 80143be:	bf00      	nop
  }
}
 80143c0:	bf00      	nop
 80143c2:	3710      	adds	r7, #16
 80143c4:	46bd      	mov	sp, r7
 80143c6:	bd80      	pop	{r7, pc}

080143c8 <MSC_BOT_CBW_Decode>:
*         Decode the CBW command and set the BOT state machine accordingly
* @param  pdev: device instance
* @retval None
*/
static void  MSC_BOT_CBW_Decode(USBD_HandleTypeDef *pdev)
{
 80143c8:	b580      	push	{r7, lr}
 80143ca:	b084      	sub	sp, #16
 80143cc:	af00      	add	r7, sp, #0
 80143ce:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 80143d0:	687b      	ldr	r3, [r7, #4]
 80143d2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80143d6:	60fb      	str	r3, [r7, #12]

  hmsc->csw.dTag = hmsc->cbw.dTag;
 80143d8:	68fa      	ldr	r2, [r7, #12]
 80143da:	f248 0314 	movw	r3, #32788	; 0x8014
 80143de:	4413      	add	r3, r2
 80143e0:	681a      	ldr	r2, [r3, #0]
 80143e2:	68f9      	ldr	r1, [r7, #12]
 80143e4:	f248 0334 	movw	r3, #32820	; 0x8034
 80143e8:	440b      	add	r3, r1
 80143ea:	601a      	str	r2, [r3, #0]
  hmsc->csw.dDataResidue = hmsc->cbw.dDataLength;
 80143ec:	68fa      	ldr	r2, [r7, #12]
 80143ee:	f248 0318 	movw	r3, #32792	; 0x8018
 80143f2:	4413      	add	r3, r2
 80143f4:	681a      	ldr	r2, [r3, #0]
 80143f6:	68f9      	ldr	r1, [r7, #12]
 80143f8:	f248 0338 	movw	r3, #32824	; 0x8038
 80143fc:	440b      	add	r3, r1
 80143fe:	601a      	str	r2, [r3, #0]

  if ((USBD_LL_GetRxDataSize(pdev, MSC_EPOUT_ADDR) != USBD_BOT_CBW_LENGTH) ||
 8014400:	2101      	movs	r1, #1
 8014402:	6878      	ldr	r0, [r7, #4]
 8014404:	f005 fba8 	bl	8019b58 <USBD_LL_GetRxDataSize>
 8014408:	4603      	mov	r3, r0
 801440a:	2b1f      	cmp	r3, #31
 801440c:	d11c      	bne.n	8014448 <MSC_BOT_CBW_Decode+0x80>
      (hmsc->cbw.dSignature != USBD_BOT_CBW_SIGNATURE) ||
 801440e:	68fa      	ldr	r2, [r7, #12]
 8014410:	f248 0310 	movw	r3, #32784	; 0x8010
 8014414:	4413      	add	r3, r2
 8014416:	681b      	ldr	r3, [r3, #0]
  if ((USBD_LL_GetRxDataSize(pdev, MSC_EPOUT_ADDR) != USBD_BOT_CBW_LENGTH) ||
 8014418:	4a38      	ldr	r2, [pc, #224]	; (80144fc <MSC_BOT_CBW_Decode+0x134>)
 801441a:	4293      	cmp	r3, r2
 801441c:	d114      	bne.n	8014448 <MSC_BOT_CBW_Decode+0x80>
      (hmsc->cbw.bLUN > 1U) || (hmsc->cbw.bCBLength < 1U) ||
 801441e:	68fa      	ldr	r2, [r7, #12]
 8014420:	f248 031d 	movw	r3, #32797	; 0x801d
 8014424:	4413      	add	r3, r2
 8014426:	781b      	ldrb	r3, [r3, #0]
      (hmsc->cbw.dSignature != USBD_BOT_CBW_SIGNATURE) ||
 8014428:	2b01      	cmp	r3, #1
 801442a:	d80d      	bhi.n	8014448 <MSC_BOT_CBW_Decode+0x80>
      (hmsc->cbw.bLUN > 1U) || (hmsc->cbw.bCBLength < 1U) ||
 801442c:	68fa      	ldr	r2, [r7, #12]
 801442e:	f248 031e 	movw	r3, #32798	; 0x801e
 8014432:	4413      	add	r3, r2
 8014434:	781b      	ldrb	r3, [r3, #0]
 8014436:	2b00      	cmp	r3, #0
 8014438:	d006      	beq.n	8014448 <MSC_BOT_CBW_Decode+0x80>
      (hmsc->cbw.bCBLength > 16U))
 801443a:	68fa      	ldr	r2, [r7, #12]
 801443c:	f248 031e 	movw	r3, #32798	; 0x801e
 8014440:	4413      	add	r3, r2
 8014442:	781b      	ldrb	r3, [r3, #0]
      (hmsc->cbw.bLUN > 1U) || (hmsc->cbw.bCBLength < 1U) ||
 8014444:	2b10      	cmp	r3, #16
 8014446:	d910      	bls.n	801446a <MSC_BOT_CBW_Decode+0xa2>
  {
    SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8014448:	68fa      	ldr	r2, [r7, #12]
 801444a:	f248 031d 	movw	r3, #32797	; 0x801d
 801444e:	4413      	add	r3, r2
 8014450:	7819      	ldrb	r1, [r3, #0]
 8014452:	2320      	movs	r3, #32
 8014454:	2205      	movs	r2, #5
 8014456:	6878      	ldr	r0, [r7, #4]
 8014458:	f000 fd36 	bl	8014ec8 <SCSI_SenseCode>

    hmsc->bot_status = USBD_BOT_STATUS_ERROR;
 801445c:	68fb      	ldr	r3, [r7, #12]
 801445e:	2202      	movs	r2, #2
 8014460:	725a      	strb	r2, [r3, #9]
    MSC_BOT_Abort(pdev);
 8014462:	6878      	ldr	r0, [r7, #4]
 8014464:	f000 f8b2 	bl	80145cc <MSC_BOT_Abort>
 8014468:	e044      	b.n	80144f4 <MSC_BOT_CBW_Decode+0x12c>
  }
  else
  {
    if (SCSI_ProcessCmd(pdev, hmsc->cbw.bLUN, &hmsc->cbw.CB[0]) < 0)
 801446a:	68fa      	ldr	r2, [r7, #12]
 801446c:	f248 031d 	movw	r3, #32797	; 0x801d
 8014470:	4413      	add	r3, r2
 8014472:	7819      	ldrb	r1, [r3, #0]
 8014474:	68fa      	ldr	r2, [r7, #12]
 8014476:	f248 031f 	movw	r3, #32799	; 0x801f
 801447a:	4413      	add	r3, r2
 801447c:	461a      	mov	r2, r3
 801447e:	6878      	ldr	r0, [r7, #4]
 8014480:	f000 f8fe 	bl	8014680 <SCSI_ProcessCmd>
 8014484:	4603      	mov	r3, r0
 8014486:	2b00      	cmp	r3, #0
 8014488:	da0c      	bge.n	80144a4 <MSC_BOT_CBW_Decode+0xdc>
    {
      if (hmsc->bot_state == USBD_BOT_NO_DATA)
 801448a:	68fb      	ldr	r3, [r7, #12]
 801448c:	7a1b      	ldrb	r3, [r3, #8]
 801448e:	2b05      	cmp	r3, #5
 8014490:	d104      	bne.n	801449c <MSC_BOT_CBW_Decode+0xd4>
      {
        MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
 8014492:	2101      	movs	r1, #1
 8014494:	6878      	ldr	r0, [r7, #4]
 8014496:	f000 f867 	bl	8014568 <MSC_BOT_SendCSW>
 801449a:	e02b      	b.n	80144f4 <MSC_BOT_CBW_Decode+0x12c>
      }
      else
      {
        MSC_BOT_Abort(pdev);
 801449c:	6878      	ldr	r0, [r7, #4]
 801449e:	f000 f895 	bl	80145cc <MSC_BOT_Abort>
 80144a2:	e027      	b.n	80144f4 <MSC_BOT_CBW_Decode+0x12c>
      }
    }
    /* Burst xfer handled internally */
    else if ((hmsc->bot_state != USBD_BOT_DATA_IN) &&
 80144a4:	68fb      	ldr	r3, [r7, #12]
 80144a6:	7a1b      	ldrb	r3, [r3, #8]
 80144a8:	2b02      	cmp	r3, #2
 80144aa:	d022      	beq.n	80144f2 <MSC_BOT_CBW_Decode+0x12a>
             (hmsc->bot_state != USBD_BOT_DATA_OUT) &&
 80144ac:	68fb      	ldr	r3, [r7, #12]
 80144ae:	7a1b      	ldrb	r3, [r3, #8]
    else if ((hmsc->bot_state != USBD_BOT_DATA_IN) &&
 80144b0:	2b01      	cmp	r3, #1
 80144b2:	d01e      	beq.n	80144f2 <MSC_BOT_CBW_Decode+0x12a>
             (hmsc->bot_state != USBD_BOT_LAST_DATA_IN))
 80144b4:	68fb      	ldr	r3, [r7, #12]
 80144b6:	7a1b      	ldrb	r3, [r3, #8]
             (hmsc->bot_state != USBD_BOT_DATA_OUT) &&
 80144b8:	2b03      	cmp	r3, #3
 80144ba:	d01a      	beq.n	80144f2 <MSC_BOT_CBW_Decode+0x12a>
    {
      if (hmsc->bot_data_length > 0U)
 80144bc:	68fb      	ldr	r3, [r7, #12]
 80144be:	68db      	ldr	r3, [r3, #12]
 80144c0:	2b00      	cmp	r3, #0
 80144c2:	d009      	beq.n	80144d8 <MSC_BOT_CBW_Decode+0x110>
      {
        MSC_BOT_SendData(pdev, hmsc->bot_data, hmsc->bot_data_length);
 80144c4:	68fb      	ldr	r3, [r7, #12]
 80144c6:	f103 0110 	add.w	r1, r3, #16
 80144ca:	68fb      	ldr	r3, [r7, #12]
 80144cc:	68db      	ldr	r3, [r3, #12]
 80144ce:	461a      	mov	r2, r3
 80144d0:	6878      	ldr	r0, [r7, #4]
 80144d2:	f000 f815 	bl	8014500 <MSC_BOT_SendData>
      if (hmsc->bot_data_length > 0U)
 80144d6:	e00d      	b.n	80144f4 <MSC_BOT_CBW_Decode+0x12c>
      }
      else if (hmsc->bot_data_length == 0U)
 80144d8:	68fb      	ldr	r3, [r7, #12]
 80144da:	68db      	ldr	r3, [r3, #12]
 80144dc:	2b00      	cmp	r3, #0
 80144de:	d104      	bne.n	80144ea <MSC_BOT_CBW_Decode+0x122>
      {
        MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_PASSED);
 80144e0:	2100      	movs	r1, #0
 80144e2:	6878      	ldr	r0, [r7, #4]
 80144e4:	f000 f840 	bl	8014568 <MSC_BOT_SendCSW>
      if (hmsc->bot_data_length > 0U)
 80144e8:	e004      	b.n	80144f4 <MSC_BOT_CBW_Decode+0x12c>
      }
      else
      {
        MSC_BOT_Abort(pdev);
 80144ea:	6878      	ldr	r0, [r7, #4]
 80144ec:	f000 f86e 	bl	80145cc <MSC_BOT_Abort>
      if (hmsc->bot_data_length > 0U)
 80144f0:	e000      	b.n	80144f4 <MSC_BOT_CBW_Decode+0x12c>
      }
    }
    else
    {
      return;
 80144f2:	bf00      	nop
    }
  }
}
 80144f4:	3710      	adds	r7, #16
 80144f6:	46bd      	mov	sp, r7
 80144f8:	bd80      	pop	{r7, pc}
 80144fa:	bf00      	nop
 80144fc:	43425355 	.word	0x43425355

08014500 <MSC_BOT_SendData>:
* @param  buf: pointer to data buffer
* @param  len: Data Length
* @retval None
*/
static void  MSC_BOT_SendData(USBD_HandleTypeDef *pdev, uint8_t *pbuf, uint32_t len)
{
 8014500:	b580      	push	{r7, lr}
 8014502:	b086      	sub	sp, #24
 8014504:	af00      	add	r7, sp, #0
 8014506:	60f8      	str	r0, [r7, #12]
 8014508:	60b9      	str	r1, [r7, #8]
 801450a:	607a      	str	r2, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 801450c:	68fb      	ldr	r3, [r7, #12]
 801450e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8014512:	617b      	str	r3, [r7, #20]

  uint32_t length = MIN(hmsc->cbw.dDataLength, len);
 8014514:	697a      	ldr	r2, [r7, #20]
 8014516:	f248 0318 	movw	r3, #32792	; 0x8018
 801451a:	4413      	add	r3, r2
 801451c:	681b      	ldr	r3, [r3, #0]
 801451e:	687a      	ldr	r2, [r7, #4]
 8014520:	4293      	cmp	r3, r2
 8014522:	bf28      	it	cs
 8014524:	4613      	movcs	r3, r2
 8014526:	613b      	str	r3, [r7, #16]

  hmsc->csw.dDataResidue -= len;
 8014528:	697a      	ldr	r2, [r7, #20]
 801452a:	f248 0338 	movw	r3, #32824	; 0x8038
 801452e:	4413      	add	r3, r2
 8014530:	681a      	ldr	r2, [r3, #0]
 8014532:	687b      	ldr	r3, [r7, #4]
 8014534:	1ad2      	subs	r2, r2, r3
 8014536:	6979      	ldr	r1, [r7, #20]
 8014538:	f248 0338 	movw	r3, #32824	; 0x8038
 801453c:	440b      	add	r3, r1
 801453e:	601a      	str	r2, [r3, #0]
  hmsc->csw.bStatus = USBD_CSW_CMD_PASSED;
 8014540:	697a      	ldr	r2, [r7, #20]
 8014542:	f248 033c 	movw	r3, #32828	; 0x803c
 8014546:	4413      	add	r3, r2
 8014548:	2200      	movs	r2, #0
 801454a:	701a      	strb	r2, [r3, #0]
  hmsc->bot_state = USBD_BOT_SEND_DATA;
 801454c:	697b      	ldr	r3, [r7, #20]
 801454e:	2204      	movs	r2, #4
 8014550:	721a      	strb	r2, [r3, #8]

  (void)USBD_LL_Transmit(pdev, MSC_EPIN_ADDR, pbuf, length);
 8014552:	693b      	ldr	r3, [r7, #16]
 8014554:	68ba      	ldr	r2, [r7, #8]
 8014556:	2181      	movs	r1, #129	; 0x81
 8014558:	68f8      	ldr	r0, [r7, #12]
 801455a:	f005 fabb 	bl	8019ad4 <USBD_LL_Transmit>
}
 801455e:	bf00      	nop
 8014560:	3718      	adds	r7, #24
 8014562:	46bd      	mov	sp, r7
 8014564:	bd80      	pop	{r7, pc}
	...

08014568 <MSC_BOT_SendCSW>:
* @param  pdev: device instance
* @param  status : CSW status
* @retval None
*/
void  MSC_BOT_SendCSW(USBD_HandleTypeDef *pdev, uint8_t CSW_Status)
{
 8014568:	b580      	push	{r7, lr}
 801456a:	b084      	sub	sp, #16
 801456c:	af00      	add	r7, sp, #0
 801456e:	6078      	str	r0, [r7, #4]
 8014570:	460b      	mov	r3, r1
 8014572:	70fb      	strb	r3, [r7, #3]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8014574:	687b      	ldr	r3, [r7, #4]
 8014576:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 801457a:	60fb      	str	r3, [r7, #12]

  hmsc->csw.dSignature = USBD_BOT_CSW_SIGNATURE;
 801457c:	68fa      	ldr	r2, [r7, #12]
 801457e:	f248 0330 	movw	r3, #32816	; 0x8030
 8014582:	4413      	add	r3, r2
 8014584:	4a10      	ldr	r2, [pc, #64]	; (80145c8 <MSC_BOT_SendCSW+0x60>)
 8014586:	601a      	str	r2, [r3, #0]
  hmsc->csw.bStatus = CSW_Status;
 8014588:	68fa      	ldr	r2, [r7, #12]
 801458a:	f248 033c 	movw	r3, #32828	; 0x803c
 801458e:	4413      	add	r3, r2
 8014590:	78fa      	ldrb	r2, [r7, #3]
 8014592:	701a      	strb	r2, [r3, #0]
  hmsc->bot_state = USBD_BOT_IDLE;
 8014594:	68fb      	ldr	r3, [r7, #12]
 8014596:	2200      	movs	r2, #0
 8014598:	721a      	strb	r2, [r3, #8]

  (void)USBD_LL_Transmit(pdev, MSC_EPIN_ADDR, (uint8_t *)&hmsc->csw,
 801459a:	68fb      	ldr	r3, [r7, #12]
 801459c:	f248 0230 	movw	r2, #32816	; 0x8030
 80145a0:	441a      	add	r2, r3
 80145a2:	230d      	movs	r3, #13
 80145a4:	2181      	movs	r1, #129	; 0x81
 80145a6:	6878      	ldr	r0, [r7, #4]
 80145a8:	f005 fa94 	bl	8019ad4 <USBD_LL_Transmit>
                         USBD_BOT_CSW_LENGTH);

  /* Prepare EP to Receive next Cmd */
  (void)USBD_LL_PrepareReceive(pdev, MSC_EPOUT_ADDR, (uint8_t *)&hmsc->cbw,
 80145ac:	68fb      	ldr	r3, [r7, #12]
 80145ae:	f248 0210 	movw	r2, #32784	; 0x8010
 80145b2:	441a      	add	r2, r3
 80145b4:	231f      	movs	r3, #31
 80145b6:	2101      	movs	r1, #1
 80145b8:	6878      	ldr	r0, [r7, #4]
 80145ba:	f005 faac 	bl	8019b16 <USBD_LL_PrepareReceive>
                               USBD_BOT_CBW_LENGTH);
}
 80145be:	bf00      	nop
 80145c0:	3710      	adds	r7, #16
 80145c2:	46bd      	mov	sp, r7
 80145c4:	bd80      	pop	{r7, pc}
 80145c6:	bf00      	nop
 80145c8:	53425355 	.word	0x53425355

080145cc <MSC_BOT_Abort>:
* @param  pdev: device instance
* @retval status
*/

static void  MSC_BOT_Abort(USBD_HandleTypeDef *pdev)
{
 80145cc:	b580      	push	{r7, lr}
 80145ce:	b084      	sub	sp, #16
 80145d0:	af00      	add	r7, sp, #0
 80145d2:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 80145d4:	687b      	ldr	r3, [r7, #4]
 80145d6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80145da:	60fb      	str	r3, [r7, #12]

  if ((hmsc->cbw.bmFlags == 0U) &&
 80145dc:	68fa      	ldr	r2, [r7, #12]
 80145de:	f248 031c 	movw	r3, #32796	; 0x801c
 80145e2:	4413      	add	r3, r2
 80145e4:	781b      	ldrb	r3, [r3, #0]
 80145e6:	2b00      	cmp	r3, #0
 80145e8:	d10e      	bne.n	8014608 <MSC_BOT_Abort+0x3c>
      (hmsc->cbw.dDataLength != 0U) &&
 80145ea:	68fa      	ldr	r2, [r7, #12]
 80145ec:	f248 0318 	movw	r3, #32792	; 0x8018
 80145f0:	4413      	add	r3, r2
 80145f2:	681b      	ldr	r3, [r3, #0]
  if ((hmsc->cbw.bmFlags == 0U) &&
 80145f4:	2b00      	cmp	r3, #0
 80145f6:	d007      	beq.n	8014608 <MSC_BOT_Abort+0x3c>
      (hmsc->bot_status == USBD_BOT_STATUS_NORMAL))
 80145f8:	68fb      	ldr	r3, [r7, #12]
 80145fa:	7a5b      	ldrb	r3, [r3, #9]
      (hmsc->cbw.dDataLength != 0U) &&
 80145fc:	2b00      	cmp	r3, #0
 80145fe:	d103      	bne.n	8014608 <MSC_BOT_Abort+0x3c>
  {
    (void)USBD_LL_StallEP(pdev, MSC_EPOUT_ADDR);
 8014600:	2101      	movs	r1, #1
 8014602:	6878      	ldr	r0, [r7, #4]
 8014604:	f005 f9dd 	bl	80199c2 <USBD_LL_StallEP>
  }

  (void)USBD_LL_StallEP(pdev, MSC_EPIN_ADDR);
 8014608:	2181      	movs	r1, #129	; 0x81
 801460a:	6878      	ldr	r0, [r7, #4]
 801460c:	f005 f9d9 	bl	80199c2 <USBD_LL_StallEP>

  if (hmsc->bot_status == USBD_BOT_STATUS_ERROR)
 8014610:	68fb      	ldr	r3, [r7, #12]
 8014612:	7a5b      	ldrb	r3, [r3, #9]
 8014614:	2b02      	cmp	r3, #2
 8014616:	d107      	bne.n	8014628 <MSC_BOT_Abort+0x5c>
  {
    (void)USBD_LL_StallEP(pdev, MSC_EPIN_ADDR);
 8014618:	2181      	movs	r1, #129	; 0x81
 801461a:	6878      	ldr	r0, [r7, #4]
 801461c:	f005 f9d1 	bl	80199c2 <USBD_LL_StallEP>
    (void)USBD_LL_StallEP(pdev, MSC_EPOUT_ADDR);
 8014620:	2101      	movs	r1, #1
 8014622:	6878      	ldr	r0, [r7, #4]
 8014624:	f005 f9cd 	bl	80199c2 <USBD_LL_StallEP>
  }
}
 8014628:	bf00      	nop
 801462a:	3710      	adds	r7, #16
 801462c:	46bd      	mov	sp, r7
 801462e:	bd80      	pop	{r7, pc}

08014630 <MSC_BOT_CplClrFeature>:
* @param  epnum: endpoint index
* @retval None
*/

void  MSC_BOT_CplClrFeature(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8014630:	b580      	push	{r7, lr}
 8014632:	b084      	sub	sp, #16
 8014634:	af00      	add	r7, sp, #0
 8014636:	6078      	str	r0, [r7, #4]
 8014638:	460b      	mov	r3, r1
 801463a:	70fb      	strb	r3, [r7, #3]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 801463c:	687b      	ldr	r3, [r7, #4]
 801463e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8014642:	60fb      	str	r3, [r7, #12]

  if (hmsc->bot_status == USBD_BOT_STATUS_ERROR) /* Bad CBW Signature */
 8014644:	68fb      	ldr	r3, [r7, #12]
 8014646:	7a5b      	ldrb	r3, [r3, #9]
 8014648:	2b02      	cmp	r3, #2
 801464a:	d108      	bne.n	801465e <MSC_BOT_CplClrFeature+0x2e>
  {
    (void)USBD_LL_StallEP(pdev, MSC_EPIN_ADDR);
 801464c:	2181      	movs	r1, #129	; 0x81
 801464e:	6878      	ldr	r0, [r7, #4]
 8014650:	f005 f9b7 	bl	80199c2 <USBD_LL_StallEP>
    (void)USBD_LL_StallEP(pdev, MSC_EPOUT_ADDR);
 8014654:	2101      	movs	r1, #1
 8014656:	6878      	ldr	r0, [r7, #4]
 8014658:	f005 f9b3 	bl	80199c2 <USBD_LL_StallEP>
 801465c:	e00d      	b.n	801467a <MSC_BOT_CplClrFeature+0x4a>
  }
  else if (((epnum & 0x80U) == 0x80U) && (hmsc->bot_status != USBD_BOT_STATUS_RECOVERY))
 801465e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8014662:	2b00      	cmp	r3, #0
 8014664:	da08      	bge.n	8014678 <MSC_BOT_CplClrFeature+0x48>
 8014666:	68fb      	ldr	r3, [r7, #12]
 8014668:	7a5b      	ldrb	r3, [r3, #9]
 801466a:	2b01      	cmp	r3, #1
 801466c:	d004      	beq.n	8014678 <MSC_BOT_CplClrFeature+0x48>
  {
    MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
 801466e:	2101      	movs	r1, #1
 8014670:	6878      	ldr	r0, [r7, #4]
 8014672:	f7ff ff79 	bl	8014568 <MSC_BOT_SendCSW>
 8014676:	e000      	b.n	801467a <MSC_BOT_CplClrFeature+0x4a>
  }
  else
  {
    return;
 8014678:	bf00      	nop
  }
}
 801467a:	3710      	adds	r7, #16
 801467c:	46bd      	mov	sp, r7
 801467e:	bd80      	pop	{r7, pc}

08014680 <SCSI_ProcessCmd>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
int8_t SCSI_ProcessCmd(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *cmd)
{
 8014680:	b580      	push	{r7, lr}
 8014682:	b086      	sub	sp, #24
 8014684:	af00      	add	r7, sp, #0
 8014686:	60f8      	str	r0, [r7, #12]
 8014688:	460b      	mov	r3, r1
 801468a:	607a      	str	r2, [r7, #4]
 801468c:	72fb      	strb	r3, [r7, #11]
  int8_t ret;
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 801468e:	68fb      	ldr	r3, [r7, #12]
 8014690:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8014694:	613b      	str	r3, [r7, #16]

  switch (cmd[0])
 8014696:	687b      	ldr	r3, [r7, #4]
 8014698:	781b      	ldrb	r3, [r3, #0]
 801469a:	2b25      	cmp	r3, #37	; 0x25
 801469c:	d06e      	beq.n	801477c <SCSI_ProcessCmd+0xfc>
 801469e:	2b25      	cmp	r3, #37	; 0x25
 80146a0:	dc11      	bgt.n	80146c6 <SCSI_ProcessCmd+0x46>
 80146a2:	2b1a      	cmp	r3, #26
 80146a4:	d04f      	beq.n	8014746 <SCSI_ProcessCmd+0xc6>
 80146a6:	2b1a      	cmp	r3, #26
 80146a8:	dc06      	bgt.n	80146b8 <SCSI_ProcessCmd+0x38>
 80146aa:	2b03      	cmp	r3, #3
 80146ac:	d027      	beq.n	80146fe <SCSI_ProcessCmd+0x7e>
 80146ae:	2b12      	cmp	r3, #18
 80146b0:	d02e      	beq.n	8014710 <SCSI_ProcessCmd+0x90>
 80146b2:	2b00      	cmp	r3, #0
 80146b4:	d01a      	beq.n	80146ec <SCSI_ProcessCmd+0x6c>
 80146b6:	e0a0      	b.n	80147fa <SCSI_ProcessCmd+0x17a>
 80146b8:	2b1e      	cmp	r3, #30
 80146ba:	d03b      	beq.n	8014734 <SCSI_ProcessCmd+0xb4>
 80146bc:	2b23      	cmp	r3, #35	; 0x23
 80146be:	d054      	beq.n	801476a <SCSI_ProcessCmd+0xea>
 80146c0:	2b1b      	cmp	r3, #27
 80146c2:	d02e      	beq.n	8014722 <SCSI_ProcessCmd+0xa2>
 80146c4:	e099      	b.n	80147fa <SCSI_ProcessCmd+0x17a>
 80146c6:	2b5a      	cmp	r3, #90	; 0x5a
 80146c8:	d046      	beq.n	8014758 <SCSI_ProcessCmd+0xd8>
 80146ca:	2b5a      	cmp	r3, #90	; 0x5a
 80146cc:	dc07      	bgt.n	80146de <SCSI_ProcessCmd+0x5e>
 80146ce:	2b2a      	cmp	r3, #42	; 0x2a
 80146d0:	d078      	beq.n	80147c4 <SCSI_ProcessCmd+0x144>
 80146d2:	2b2f      	cmp	r3, #47	; 0x2f
 80146d4:	f000 8088 	beq.w	80147e8 <SCSI_ProcessCmd+0x168>
 80146d8:	2b28      	cmp	r3, #40	; 0x28
 80146da:	d061      	beq.n	80147a0 <SCSI_ProcessCmd+0x120>
 80146dc:	e08d      	b.n	80147fa <SCSI_ProcessCmd+0x17a>
 80146de:	2ba8      	cmp	r3, #168	; 0xa8
 80146e0:	d067      	beq.n	80147b2 <SCSI_ProcessCmd+0x132>
 80146e2:	2baa      	cmp	r3, #170	; 0xaa
 80146e4:	d077      	beq.n	80147d6 <SCSI_ProcessCmd+0x156>
 80146e6:	2b9e      	cmp	r3, #158	; 0x9e
 80146e8:	d051      	beq.n	801478e <SCSI_ProcessCmd+0x10e>
 80146ea:	e086      	b.n	80147fa <SCSI_ProcessCmd+0x17a>
  {
  case SCSI_TEST_UNIT_READY:
    ret = SCSI_TestUnitReady(pdev, lun, cmd);
 80146ec:	7afb      	ldrb	r3, [r7, #11]
 80146ee:	687a      	ldr	r2, [r7, #4]
 80146f0:	4619      	mov	r1, r3
 80146f2:	68f8      	ldr	r0, [r7, #12]
 80146f4:	f000 f893 	bl	801481e <SCSI_TestUnitReady>
 80146f8:	4603      	mov	r3, r0
 80146fa:	75fb      	strb	r3, [r7, #23]
    break;
 80146fc:	e089      	b.n	8014812 <SCSI_ProcessCmd+0x192>

  case SCSI_REQUEST_SENSE:
    ret = SCSI_RequestSense(pdev, lun, cmd);
 80146fe:	7afb      	ldrb	r3, [r7, #11]
 8014700:	687a      	ldr	r2, [r7, #4]
 8014702:	4619      	mov	r1, r3
 8014704:	68f8      	ldr	r0, [r7, #12]
 8014706:	f000 fb47 	bl	8014d98 <SCSI_RequestSense>
 801470a:	4603      	mov	r3, r0
 801470c:	75fb      	strb	r3, [r7, #23]
    break;
 801470e:	e080      	b.n	8014812 <SCSI_ProcessCmd+0x192>

  case SCSI_INQUIRY:
    ret = SCSI_Inquiry(pdev, lun, cmd);
 8014710:	7afb      	ldrb	r3, [r7, #11]
 8014712:	687a      	ldr	r2, [r7, #4]
 8014714:	4619      	mov	r1, r3
 8014716:	68f8      	ldr	r0, [r7, #12]
 8014718:	f000 f8d2 	bl	80148c0 <SCSI_Inquiry>
 801471c:	4603      	mov	r3, r0
 801471e:	75fb      	strb	r3, [r7, #23]
    break;
 8014720:	e077      	b.n	8014812 <SCSI_ProcessCmd+0x192>

  case SCSI_START_STOP_UNIT:
    ret = SCSI_StartStopUnit(pdev, lun, cmd);
 8014722:	7afb      	ldrb	r3, [r7, #11]
 8014724:	687a      	ldr	r2, [r7, #4]
 8014726:	4619      	mov	r1, r3
 8014728:	68f8      	ldr	r0, [r7, #12]
 801472a:	f000 fc27 	bl	8014f7c <SCSI_StartStopUnit>
 801472e:	4603      	mov	r3, r0
 8014730:	75fb      	strb	r3, [r7, #23]
    break;
 8014732:	e06e      	b.n	8014812 <SCSI_ProcessCmd+0x192>

  case SCSI_ALLOW_MEDIUM_REMOVAL:
    ret = SCSI_AllowPreventRemovable(pdev, lun, cmd);
 8014734:	7afb      	ldrb	r3, [r7, #11]
 8014736:	687a      	ldr	r2, [r7, #4]
 8014738:	4619      	mov	r1, r3
 801473a:	68f8      	ldr	r0, [r7, #12]
 801473c:	f000 fc71 	bl	8015022 <SCSI_AllowPreventRemovable>
 8014740:	4603      	mov	r3, r0
 8014742:	75fb      	strb	r3, [r7, #23]
    break;
 8014744:	e065      	b.n	8014812 <SCSI_ProcessCmd+0x192>

  case SCSI_MODE_SENSE6:
    ret = SCSI_ModeSense6(pdev, lun, cmd);
 8014746:	7afb      	ldrb	r3, [r7, #11]
 8014748:	687a      	ldr	r2, [r7, #4]
 801474a:	4619      	mov	r1, r3
 801474c:	68f8      	ldr	r0, [r7, #12]
 801474e:	f000 fad7 	bl	8014d00 <SCSI_ModeSense6>
 8014752:	4603      	mov	r3, r0
 8014754:	75fb      	strb	r3, [r7, #23]
    break;
 8014756:	e05c      	b.n	8014812 <SCSI_ProcessCmd+0x192>

  case SCSI_MODE_SENSE10:
    ret = SCSI_ModeSense10(pdev, lun, cmd);
 8014758:	7afb      	ldrb	r3, [r7, #11]
 801475a:	687a      	ldr	r2, [r7, #4]
 801475c:	4619      	mov	r1, r3
 801475e:	68f8      	ldr	r0, [r7, #12]
 8014760:	f000 faf4 	bl	8014d4c <SCSI_ModeSense10>
 8014764:	4603      	mov	r3, r0
 8014766:	75fb      	strb	r3, [r7, #23]
    break;
 8014768:	e053      	b.n	8014812 <SCSI_ProcessCmd+0x192>

  case SCSI_READ_FORMAT_CAPACITIES:
    ret = SCSI_ReadFormatCapacity(pdev, lun, cmd);
 801476a:	7afb      	ldrb	r3, [r7, #11]
 801476c:	687a      	ldr	r2, [r7, #4]
 801476e:	4619      	mov	r1, r3
 8014770:	68f8      	ldr	r0, [r7, #12]
 8014772:	f000 fa56 	bl	8014c22 <SCSI_ReadFormatCapacity>
 8014776:	4603      	mov	r3, r0
 8014778:	75fb      	strb	r3, [r7, #23]
    break;
 801477a:	e04a      	b.n	8014812 <SCSI_ProcessCmd+0x192>

  case SCSI_READ_CAPACITY10:
    ret = SCSI_ReadCapacity10(pdev, lun, cmd);
 801477c:	7afb      	ldrb	r3, [r7, #11]
 801477e:	687a      	ldr	r2, [r7, #4]
 8014780:	4619      	mov	r1, r3
 8014782:	68f8      	ldr	r0, [r7, #12]
 8014784:	f000 f910 	bl	80149a8 <SCSI_ReadCapacity10>
 8014788:	4603      	mov	r3, r0
 801478a:	75fb      	strb	r3, [r7, #23]
    break;
 801478c:	e041      	b.n	8014812 <SCSI_ProcessCmd+0x192>

  case SCSI_READ_CAPACITY16:
    ret = SCSI_ReadCapacity16(pdev, lun, cmd);
 801478e:	7afb      	ldrb	r3, [r7, #11]
 8014790:	687a      	ldr	r2, [r7, #4]
 8014792:	4619      	mov	r1, r3
 8014794:	68f8      	ldr	r0, [r7, #12]
 8014796:	f000 f98b 	bl	8014ab0 <SCSI_ReadCapacity16>
 801479a:	4603      	mov	r3, r0
 801479c:	75fb      	strb	r3, [r7, #23]
    break;
 801479e:	e038      	b.n	8014812 <SCSI_ProcessCmd+0x192>

  case SCSI_READ10:
    ret = SCSI_Read10(pdev, lun, cmd);
 80147a0:	7afb      	ldrb	r3, [r7, #11]
 80147a2:	687a      	ldr	r2, [r7, #4]
 80147a4:	4619      	mov	r1, r3
 80147a6:	68f8      	ldr	r0, [r7, #12]
 80147a8:	f000 fc62 	bl	8015070 <SCSI_Read10>
 80147ac:	4603      	mov	r3, r0
 80147ae:	75fb      	strb	r3, [r7, #23]
    break;
 80147b0:	e02f      	b.n	8014812 <SCSI_ProcessCmd+0x192>

  case SCSI_READ12:
    ret = SCSI_Read12(pdev, lun, cmd);
 80147b2:	7afb      	ldrb	r3, [r7, #11]
 80147b4:	687a      	ldr	r2, [r7, #4]
 80147b6:	4619      	mov	r1, r3
 80147b8:	68f8      	ldr	r0, [r7, #12]
 80147ba:	f000 fd0b 	bl	80151d4 <SCSI_Read12>
 80147be:	4603      	mov	r3, r0
 80147c0:	75fb      	strb	r3, [r7, #23]
    break;
 80147c2:	e026      	b.n	8014812 <SCSI_ProcessCmd+0x192>

  case SCSI_WRITE10:
    ret = SCSI_Write10(pdev, lun, cmd);
 80147c4:	7afb      	ldrb	r3, [r7, #11]
 80147c6:	687a      	ldr	r2, [r7, #4]
 80147c8:	4619      	mov	r1, r3
 80147ca:	68f8      	ldr	r0, [r7, #12]
 80147cc:	f000 fdbe 	bl	801534c <SCSI_Write10>
 80147d0:	4603      	mov	r3, r0
 80147d2:	75fb      	strb	r3, [r7, #23]
    break;
 80147d4:	e01d      	b.n	8014812 <SCSI_ProcessCmd+0x192>

  case SCSI_WRITE12:
    ret = SCSI_Write12(pdev, lun, cmd);
 80147d6:	7afb      	ldrb	r3, [r7, #11]
 80147d8:	687a      	ldr	r2, [r7, #4]
 80147da:	4619      	mov	r1, r3
 80147dc:	68f8      	ldr	r0, [r7, #12]
 80147de:	f000 fe8d 	bl	80154fc <SCSI_Write12>
 80147e2:	4603      	mov	r3, r0
 80147e4:	75fb      	strb	r3, [r7, #23]
    break;
 80147e6:	e014      	b.n	8014812 <SCSI_ProcessCmd+0x192>

  case SCSI_VERIFY10:
    ret = SCSI_Verify10(pdev, lun, cmd);
 80147e8:	7afb      	ldrb	r3, [r7, #11]
 80147ea:	687a      	ldr	r2, [r7, #4]
 80147ec:	4619      	mov	r1, r3
 80147ee:	68f8      	ldr	r0, [r7, #12]
 80147f0:	f000 ff6c 	bl	80156cc <SCSI_Verify10>
 80147f4:	4603      	mov	r3, r0
 80147f6:	75fb      	strb	r3, [r7, #23]
    break;
 80147f8:	e00b      	b.n	8014812 <SCSI_ProcessCmd+0x192>

  default:
    SCSI_SenseCode(pdev, lun, ILLEGAL_REQUEST, INVALID_CDB);
 80147fa:	7af9      	ldrb	r1, [r7, #11]
 80147fc:	2320      	movs	r3, #32
 80147fe:	2205      	movs	r2, #5
 8014800:	68f8      	ldr	r0, [r7, #12]
 8014802:	f000 fb61 	bl	8014ec8 <SCSI_SenseCode>
    hmsc->bot_status = USBD_BOT_STATUS_ERROR;
 8014806:	693b      	ldr	r3, [r7, #16]
 8014808:	2202      	movs	r2, #2
 801480a:	725a      	strb	r2, [r3, #9]
    ret = -1;
 801480c:	23ff      	movs	r3, #255	; 0xff
 801480e:	75fb      	strb	r3, [r7, #23]
    break;
 8014810:	bf00      	nop
  }

  return ret;
 8014812:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8014816:	4618      	mov	r0, r3
 8014818:	3718      	adds	r7, #24
 801481a:	46bd      	mov	sp, r7
 801481c:	bd80      	pop	{r7, pc}

0801481e <SCSI_TestUnitReady>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
static int8_t SCSI_TestUnitReady(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 801481e:	b580      	push	{r7, lr}
 8014820:	b086      	sub	sp, #24
 8014822:	af00      	add	r7, sp, #0
 8014824:	60f8      	str	r0, [r7, #12]
 8014826:	460b      	mov	r3, r1
 8014828:	607a      	str	r2, [r7, #4]
 801482a:	72fb      	strb	r3, [r7, #11]
  UNUSED(params);
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 801482c:	68fb      	ldr	r3, [r7, #12]
 801482e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8014832:	617b      	str	r3, [r7, #20]

  /* case 9 : Hi > D0 */
  if (hmsc->cbw.dDataLength != 0U)
 8014834:	697a      	ldr	r2, [r7, #20]
 8014836:	f248 0318 	movw	r3, #32792	; 0x8018
 801483a:	4413      	add	r3, r2
 801483c:	681b      	ldr	r3, [r3, #0]
 801483e:	2b00      	cmp	r3, #0
 8014840:	d00c      	beq.n	801485c <SCSI_TestUnitReady+0x3e>
  {
    SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8014842:	697a      	ldr	r2, [r7, #20]
 8014844:	f248 031d 	movw	r3, #32797	; 0x801d
 8014848:	4413      	add	r3, r2
 801484a:	7819      	ldrb	r1, [r3, #0]
 801484c:	2320      	movs	r3, #32
 801484e:	2205      	movs	r2, #5
 8014850:	68f8      	ldr	r0, [r7, #12]
 8014852:	f000 fb39 	bl	8014ec8 <SCSI_SenseCode>

    return -1;
 8014856:	f04f 33ff 	mov.w	r3, #4294967295
 801485a:	e02c      	b.n	80148b6 <SCSI_TestUnitReady+0x98>
  }

  if (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED)
 801485c:	697a      	ldr	r2, [r7, #20]
 801485e:	f248 0362 	movw	r3, #32866	; 0x8062
 8014862:	4413      	add	r3, r2
 8014864:	781b      	ldrb	r3, [r3, #0]
 8014866:	2b02      	cmp	r3, #2
 8014868:	d10b      	bne.n	8014882 <SCSI_TestUnitReady+0x64>
  {
    SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 801486a:	7af9      	ldrb	r1, [r7, #11]
 801486c:	233a      	movs	r3, #58	; 0x3a
 801486e:	2202      	movs	r2, #2
 8014870:	68f8      	ldr	r0, [r7, #12]
 8014872:	f000 fb29 	bl	8014ec8 <SCSI_SenseCode>
    hmsc->bot_state = USBD_BOT_NO_DATA;
 8014876:	697b      	ldr	r3, [r7, #20]
 8014878:	2205      	movs	r2, #5
 801487a:	721a      	strb	r2, [r3, #8]
    return -1;
 801487c:	f04f 33ff 	mov.w	r3, #4294967295
 8014880:	e019      	b.n	80148b6 <SCSI_TestUnitReady+0x98>
  }

  if (((USBD_StorageTypeDef *)pdev->pUserData)->IsReady(lun) != 0)
 8014882:	68fb      	ldr	r3, [r7, #12]
 8014884:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8014888:	689b      	ldr	r3, [r3, #8]
 801488a:	7afa      	ldrb	r2, [r7, #11]
 801488c:	4610      	mov	r0, r2
 801488e:	4798      	blx	r3
 8014890:	4603      	mov	r3, r0
 8014892:	2b00      	cmp	r3, #0
 8014894:	d00b      	beq.n	80148ae <SCSI_TestUnitReady+0x90>
  {
    SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 8014896:	7af9      	ldrb	r1, [r7, #11]
 8014898:	233a      	movs	r3, #58	; 0x3a
 801489a:	2202      	movs	r2, #2
 801489c:	68f8      	ldr	r0, [r7, #12]
 801489e:	f000 fb13 	bl	8014ec8 <SCSI_SenseCode>
    hmsc->bot_state = USBD_BOT_NO_DATA;
 80148a2:	697b      	ldr	r3, [r7, #20]
 80148a4:	2205      	movs	r2, #5
 80148a6:	721a      	strb	r2, [r3, #8]

    return -1;
 80148a8:	f04f 33ff 	mov.w	r3, #4294967295
 80148ac:	e003      	b.n	80148b6 <SCSI_TestUnitReady+0x98>
  }
  hmsc->bot_data_length = 0U;
 80148ae:	697b      	ldr	r3, [r7, #20]
 80148b0:	2200      	movs	r2, #0
 80148b2:	60da      	str	r2, [r3, #12]

  return 0;
 80148b4:	2300      	movs	r3, #0
}
 80148b6:	4618      	mov	r0, r3
 80148b8:	3718      	adds	r7, #24
 80148ba:	46bd      	mov	sp, r7
 80148bc:	bd80      	pop	{r7, pc}
	...

080148c0 <SCSI_Inquiry>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
static int8_t SCSI_Inquiry(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 80148c0:	b580      	push	{r7, lr}
 80148c2:	b088      	sub	sp, #32
 80148c4:	af00      	add	r7, sp, #0
 80148c6:	60f8      	str	r0, [r7, #12]
 80148c8:	460b      	mov	r3, r1
 80148ca:	607a      	str	r2, [r7, #4]
 80148cc:	72fb      	strb	r3, [r7, #11]
  uint8_t *pPage;
  uint16_t len;
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 80148ce:	68fb      	ldr	r3, [r7, #12]
 80148d0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80148d4:	61bb      	str	r3, [r7, #24]

  if (hmsc->cbw.dDataLength == 0U)
 80148d6:	69ba      	ldr	r2, [r7, #24]
 80148d8:	f248 0318 	movw	r3, #32792	; 0x8018
 80148dc:	4413      	add	r3, r2
 80148de:	681b      	ldr	r3, [r3, #0]
 80148e0:	2b00      	cmp	r3, #0
 80148e2:	d10c      	bne.n	80148fe <SCSI_Inquiry+0x3e>
  {
    SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 80148e4:	69ba      	ldr	r2, [r7, #24]
 80148e6:	f248 031d 	movw	r3, #32797	; 0x801d
 80148ea:	4413      	add	r3, r2
 80148ec:	7819      	ldrb	r1, [r3, #0]
 80148ee:	2320      	movs	r3, #32
 80148f0:	2205      	movs	r2, #5
 80148f2:	68f8      	ldr	r0, [r7, #12]
 80148f4:	f000 fae8 	bl	8014ec8 <SCSI_SenseCode>
    return -1;
 80148f8:	f04f 33ff 	mov.w	r3, #4294967295
 80148fc:	e04c      	b.n	8014998 <SCSI_Inquiry+0xd8>
  }

  if ((params[1] & 0x01U) != 0U) /* Evpd is set */
 80148fe:	687b      	ldr	r3, [r7, #4]
 8014900:	3301      	adds	r3, #1
 8014902:	781b      	ldrb	r3, [r3, #0]
 8014904:	f003 0301 	and.w	r3, r3, #1
 8014908:	2b00      	cmp	r3, #0
 801490a:	d022      	beq.n	8014952 <SCSI_Inquiry+0x92>
  {
    if (params[2] == 0U) /* Request for Supported Vital Product Data Pages*/
 801490c:	687b      	ldr	r3, [r7, #4]
 801490e:	3302      	adds	r3, #2
 8014910:	781b      	ldrb	r3, [r3, #0]
 8014912:	2b00      	cmp	r3, #0
 8014914:	d105      	bne.n	8014922 <SCSI_Inquiry+0x62>
    {
      (void)SCSI_UpdateBotData(hmsc, MSC_Page00_Inquiry_Data, LENGTH_INQUIRY_PAGE00);
 8014916:	2206      	movs	r2, #6
 8014918:	4921      	ldr	r1, [pc, #132]	; (80149a0 <SCSI_Inquiry+0xe0>)
 801491a:	69b8      	ldr	r0, [r7, #24]
 801491c:	f001 f862 	bl	80159e4 <SCSI_UpdateBotData>
 8014920:	e039      	b.n	8014996 <SCSI_Inquiry+0xd6>
    }
    else if (params[2] == 0x80U) /* Request for VPD page 0x80 Unit Serial Number */
 8014922:	687b      	ldr	r3, [r7, #4]
 8014924:	3302      	adds	r3, #2
 8014926:	781b      	ldrb	r3, [r3, #0]
 8014928:	2b80      	cmp	r3, #128	; 0x80
 801492a:	d105      	bne.n	8014938 <SCSI_Inquiry+0x78>
    {
      (void)SCSI_UpdateBotData(hmsc, MSC_Page80_Inquiry_Data, LENGTH_INQUIRY_PAGE80);
 801492c:	2208      	movs	r2, #8
 801492e:	491d      	ldr	r1, [pc, #116]	; (80149a4 <SCSI_Inquiry+0xe4>)
 8014930:	69b8      	ldr	r0, [r7, #24]
 8014932:	f001 f857 	bl	80159e4 <SCSI_UpdateBotData>
 8014936:	e02e      	b.n	8014996 <SCSI_Inquiry+0xd6>
    }
    else /* Request Not supported */
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST,
 8014938:	69ba      	ldr	r2, [r7, #24]
 801493a:	f248 031d 	movw	r3, #32797	; 0x801d
 801493e:	4413      	add	r3, r2
 8014940:	7819      	ldrb	r1, [r3, #0]
 8014942:	2324      	movs	r3, #36	; 0x24
 8014944:	2205      	movs	r2, #5
 8014946:	68f8      	ldr	r0, [r7, #12]
 8014948:	f000 fabe 	bl	8014ec8 <SCSI_SenseCode>
                     INVALID_FIELED_IN_COMMAND);

      return -1;
 801494c:	f04f 33ff 	mov.w	r3, #4294967295
 8014950:	e022      	b.n	8014998 <SCSI_Inquiry+0xd8>
    }
  }
  else
  {
    pPage = (uint8_t *)&((USBD_StorageTypeDef *)pdev->pUserData)->pInquiry[lun * STANDARD_INQUIRY_DATA_LEN];
 8014952:	68fb      	ldr	r3, [r7, #12]
 8014954:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8014958:	69d9      	ldr	r1, [r3, #28]
 801495a:	7afa      	ldrb	r2, [r7, #11]
 801495c:	4613      	mov	r3, r2
 801495e:	00db      	lsls	r3, r3, #3
 8014960:	4413      	add	r3, r2
 8014962:	009b      	lsls	r3, r3, #2
 8014964:	440b      	add	r3, r1
 8014966:	617b      	str	r3, [r7, #20]
    len = (uint16_t)pPage[4] + 5U;
 8014968:	697b      	ldr	r3, [r7, #20]
 801496a:	3304      	adds	r3, #4
 801496c:	781b      	ldrb	r3, [r3, #0]
 801496e:	b29b      	uxth	r3, r3
 8014970:	3305      	adds	r3, #5
 8014972:	83fb      	strh	r3, [r7, #30]

    if (params[4] <= len)
 8014974:	687b      	ldr	r3, [r7, #4]
 8014976:	3304      	adds	r3, #4
 8014978:	781b      	ldrb	r3, [r3, #0]
 801497a:	b29b      	uxth	r3, r3
 801497c:	8bfa      	ldrh	r2, [r7, #30]
 801497e:	429a      	cmp	r2, r3
 8014980:	d303      	bcc.n	801498a <SCSI_Inquiry+0xca>
    {
      len = params[4];
 8014982:	687b      	ldr	r3, [r7, #4]
 8014984:	3304      	adds	r3, #4
 8014986:	781b      	ldrb	r3, [r3, #0]
 8014988:	83fb      	strh	r3, [r7, #30]
    }

    (void)SCSI_UpdateBotData(hmsc, pPage, len);
 801498a:	8bfb      	ldrh	r3, [r7, #30]
 801498c:	461a      	mov	r2, r3
 801498e:	6979      	ldr	r1, [r7, #20]
 8014990:	69b8      	ldr	r0, [r7, #24]
 8014992:	f001 f827 	bl	80159e4 <SCSI_UpdateBotData>
  }

  return 0;
 8014996:	2300      	movs	r3, #0
}
 8014998:	4618      	mov	r0, r3
 801499a:	3720      	adds	r7, #32
 801499c:	46bd      	mov	sp, r7
 801499e:	bd80      	pop	{r7, pc}
 80149a0:	240000c4 	.word	0x240000c4
 80149a4:	240000cc 	.word	0x240000cc

080149a8 <SCSI_ReadCapacity10>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
static int8_t SCSI_ReadCapacity10(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 80149a8:	b590      	push	{r4, r7, lr}
 80149aa:	b087      	sub	sp, #28
 80149ac:	af00      	add	r7, sp, #0
 80149ae:	60f8      	str	r0, [r7, #12]
 80149b0:	460b      	mov	r3, r1
 80149b2:	607a      	str	r2, [r7, #4]
 80149b4:	72fb      	strb	r3, [r7, #11]
  UNUSED(params);
  int8_t ret;
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 80149b6:	68fb      	ldr	r3, [r7, #12]
 80149b8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80149bc:	617b      	str	r3, [r7, #20]

  ret = ((USBD_StorageTypeDef *)pdev->pUserData)->GetCapacity(lun, &hmsc->scsi_blk_nbr, &hmsc->scsi_blk_size);
 80149be:	68fb      	ldr	r3, [r7, #12]
 80149c0:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80149c4:	685c      	ldr	r4, [r3, #4]
 80149c6:	697a      	ldr	r2, [r7, #20]
 80149c8:	f248 0368 	movw	r3, #32872	; 0x8068
 80149cc:	4413      	add	r3, r2
 80149ce:	6979      	ldr	r1, [r7, #20]
 80149d0:	f248 0264 	movw	r2, #32868	; 0x8064
 80149d4:	440a      	add	r2, r1
 80149d6:	7af8      	ldrb	r0, [r7, #11]
 80149d8:	4619      	mov	r1, r3
 80149da:	47a0      	blx	r4
 80149dc:	4603      	mov	r3, r0
 80149de:	74fb      	strb	r3, [r7, #19]

  if ((ret != 0) || (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED))
 80149e0:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80149e4:	2b00      	cmp	r3, #0
 80149e6:	d106      	bne.n	80149f6 <SCSI_ReadCapacity10+0x4e>
 80149e8:	697a      	ldr	r2, [r7, #20]
 80149ea:	f248 0362 	movw	r3, #32866	; 0x8062
 80149ee:	4413      	add	r3, r2
 80149f0:	781b      	ldrb	r3, [r3, #0]
 80149f2:	2b02      	cmp	r3, #2
 80149f4:	d108      	bne.n	8014a08 <SCSI_ReadCapacity10+0x60>
  {
    SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 80149f6:	7af9      	ldrb	r1, [r7, #11]
 80149f8:	233a      	movs	r3, #58	; 0x3a
 80149fa:	2202      	movs	r2, #2
 80149fc:	68f8      	ldr	r0, [r7, #12]
 80149fe:	f000 fa63 	bl	8014ec8 <SCSI_SenseCode>
    return -1;
 8014a02:	f04f 33ff 	mov.w	r3, #4294967295
 8014a06:	e04f      	b.n	8014aa8 <SCSI_ReadCapacity10+0x100>
  }

  hmsc->bot_data[0] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >> 24);
 8014a08:	697a      	ldr	r2, [r7, #20]
 8014a0a:	f248 0368 	movw	r3, #32872	; 0x8068
 8014a0e:	4413      	add	r3, r2
 8014a10:	681b      	ldr	r3, [r3, #0]
 8014a12:	3b01      	subs	r3, #1
 8014a14:	0e1b      	lsrs	r3, r3, #24
 8014a16:	b2da      	uxtb	r2, r3
 8014a18:	697b      	ldr	r3, [r7, #20]
 8014a1a:	741a      	strb	r2, [r3, #16]
  hmsc->bot_data[1] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >> 16);
 8014a1c:	697a      	ldr	r2, [r7, #20]
 8014a1e:	f248 0368 	movw	r3, #32872	; 0x8068
 8014a22:	4413      	add	r3, r2
 8014a24:	681b      	ldr	r3, [r3, #0]
 8014a26:	3b01      	subs	r3, #1
 8014a28:	0c1b      	lsrs	r3, r3, #16
 8014a2a:	b2da      	uxtb	r2, r3
 8014a2c:	697b      	ldr	r3, [r7, #20]
 8014a2e:	745a      	strb	r2, [r3, #17]
  hmsc->bot_data[2] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >>  8);
 8014a30:	697a      	ldr	r2, [r7, #20]
 8014a32:	f248 0368 	movw	r3, #32872	; 0x8068
 8014a36:	4413      	add	r3, r2
 8014a38:	681b      	ldr	r3, [r3, #0]
 8014a3a:	3b01      	subs	r3, #1
 8014a3c:	0a1b      	lsrs	r3, r3, #8
 8014a3e:	b2da      	uxtb	r2, r3
 8014a40:	697b      	ldr	r3, [r7, #20]
 8014a42:	749a      	strb	r2, [r3, #18]
  hmsc->bot_data[3] = (uint8_t)(hmsc->scsi_blk_nbr - 1U);
 8014a44:	697a      	ldr	r2, [r7, #20]
 8014a46:	f248 0368 	movw	r3, #32872	; 0x8068
 8014a4a:	4413      	add	r3, r2
 8014a4c:	681b      	ldr	r3, [r3, #0]
 8014a4e:	b2db      	uxtb	r3, r3
 8014a50:	3b01      	subs	r3, #1
 8014a52:	b2da      	uxtb	r2, r3
 8014a54:	697b      	ldr	r3, [r7, #20]
 8014a56:	74da      	strb	r2, [r3, #19]

  hmsc->bot_data[4] = (uint8_t)(hmsc->scsi_blk_size >>  24);
 8014a58:	697a      	ldr	r2, [r7, #20]
 8014a5a:	f248 0364 	movw	r3, #32868	; 0x8064
 8014a5e:	4413      	add	r3, r2
 8014a60:	881b      	ldrh	r3, [r3, #0]
 8014a62:	161b      	asrs	r3, r3, #24
 8014a64:	b2da      	uxtb	r2, r3
 8014a66:	697b      	ldr	r3, [r7, #20]
 8014a68:	751a      	strb	r2, [r3, #20]
  hmsc->bot_data[5] = (uint8_t)(hmsc->scsi_blk_size >>  16);
 8014a6a:	697a      	ldr	r2, [r7, #20]
 8014a6c:	f248 0364 	movw	r3, #32868	; 0x8064
 8014a70:	4413      	add	r3, r2
 8014a72:	881b      	ldrh	r3, [r3, #0]
 8014a74:	141b      	asrs	r3, r3, #16
 8014a76:	b2da      	uxtb	r2, r3
 8014a78:	697b      	ldr	r3, [r7, #20]
 8014a7a:	755a      	strb	r2, [r3, #21]
  hmsc->bot_data[6] = (uint8_t)(hmsc->scsi_blk_size >>  8);
 8014a7c:	697a      	ldr	r2, [r7, #20]
 8014a7e:	f248 0364 	movw	r3, #32868	; 0x8064
 8014a82:	4413      	add	r3, r2
 8014a84:	881b      	ldrh	r3, [r3, #0]
 8014a86:	0a1b      	lsrs	r3, r3, #8
 8014a88:	b29b      	uxth	r3, r3
 8014a8a:	b2da      	uxtb	r2, r3
 8014a8c:	697b      	ldr	r3, [r7, #20]
 8014a8e:	759a      	strb	r2, [r3, #22]
  hmsc->bot_data[7] = (uint8_t)(hmsc->scsi_blk_size);
 8014a90:	697a      	ldr	r2, [r7, #20]
 8014a92:	f248 0364 	movw	r3, #32868	; 0x8064
 8014a96:	4413      	add	r3, r2
 8014a98:	881b      	ldrh	r3, [r3, #0]
 8014a9a:	b2da      	uxtb	r2, r3
 8014a9c:	697b      	ldr	r3, [r7, #20]
 8014a9e:	75da      	strb	r2, [r3, #23]

  hmsc->bot_data_length = 8U;
 8014aa0:	697b      	ldr	r3, [r7, #20]
 8014aa2:	2208      	movs	r2, #8
 8014aa4:	60da      	str	r2, [r3, #12]

  return 0;
 8014aa6:	2300      	movs	r3, #0

}
 8014aa8:	4618      	mov	r0, r3
 8014aaa:	371c      	adds	r7, #28
 8014aac:	46bd      	mov	sp, r7
 8014aae:	bd90      	pop	{r4, r7, pc}

08014ab0 <SCSI_ReadCapacity16>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
static int8_t SCSI_ReadCapacity16(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8014ab0:	b590      	push	{r4, r7, lr}
 8014ab2:	b089      	sub	sp, #36	; 0x24
 8014ab4:	af00      	add	r7, sp, #0
 8014ab6:	60f8      	str	r0, [r7, #12]
 8014ab8:	460b      	mov	r3, r1
 8014aba:	607a      	str	r2, [r7, #4]
 8014abc:	72fb      	strb	r3, [r7, #11]
  UNUSED(params);
  uint8_t idx;
  int8_t ret;
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8014abe:	68fb      	ldr	r3, [r7, #12]
 8014ac0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8014ac4:	61bb      	str	r3, [r7, #24]

  ret = ((USBD_StorageTypeDef *)pdev->pUserData)->GetCapacity(lun, &hmsc->scsi_blk_nbr, &hmsc->scsi_blk_size);
 8014ac6:	68fb      	ldr	r3, [r7, #12]
 8014ac8:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8014acc:	685c      	ldr	r4, [r3, #4]
 8014ace:	69ba      	ldr	r2, [r7, #24]
 8014ad0:	f248 0368 	movw	r3, #32872	; 0x8068
 8014ad4:	4413      	add	r3, r2
 8014ad6:	69b9      	ldr	r1, [r7, #24]
 8014ad8:	f248 0264 	movw	r2, #32868	; 0x8064
 8014adc:	440a      	add	r2, r1
 8014ade:	7af8      	ldrb	r0, [r7, #11]
 8014ae0:	4619      	mov	r1, r3
 8014ae2:	47a0      	blx	r4
 8014ae4:	4603      	mov	r3, r0
 8014ae6:	75fb      	strb	r3, [r7, #23]

  if ((ret != 0) || (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED))
 8014ae8:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8014aec:	2b00      	cmp	r3, #0
 8014aee:	d106      	bne.n	8014afe <SCSI_ReadCapacity16+0x4e>
 8014af0:	69ba      	ldr	r2, [r7, #24]
 8014af2:	f248 0362 	movw	r3, #32866	; 0x8062
 8014af6:	4413      	add	r3, r2
 8014af8:	781b      	ldrb	r3, [r3, #0]
 8014afa:	2b02      	cmp	r3, #2
 8014afc:	d108      	bne.n	8014b10 <SCSI_ReadCapacity16+0x60>
  {
    SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 8014afe:	7af9      	ldrb	r1, [r7, #11]
 8014b00:	233a      	movs	r3, #58	; 0x3a
 8014b02:	2202      	movs	r2, #2
 8014b04:	68f8      	ldr	r0, [r7, #12]
 8014b06:	f000 f9df 	bl	8014ec8 <SCSI_SenseCode>
    return -1;
 8014b0a:	f04f 33ff 	mov.w	r3, #4294967295
 8014b0e:	e084      	b.n	8014c1a <SCSI_ReadCapacity16+0x16a>
  }

  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 8014b10:	687b      	ldr	r3, [r7, #4]
 8014b12:	330a      	adds	r3, #10
 8014b14:	781b      	ldrb	r3, [r3, #0]
 8014b16:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[11] << 16) |
 8014b18:	687b      	ldr	r3, [r7, #4]
 8014b1a:	330b      	adds	r3, #11
 8014b1c:	781b      	ldrb	r3, [r3, #0]
 8014b1e:	041b      	lsls	r3, r3, #16
  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 8014b20:	431a      	orrs	r2, r3
                          ((uint32_t)params[12] <<  8) |
 8014b22:	687b      	ldr	r3, [r7, #4]
 8014b24:	330c      	adds	r3, #12
 8014b26:	781b      	ldrb	r3, [r3, #0]
 8014b28:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[11] << 16) |
 8014b2a:	4313      	orrs	r3, r2
                           (uint32_t)params[13];
 8014b2c:	687a      	ldr	r2, [r7, #4]
 8014b2e:	320d      	adds	r2, #13
 8014b30:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[12] <<  8) |
 8014b32:	431a      	orrs	r2, r3
  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 8014b34:	69bb      	ldr	r3, [r7, #24]
 8014b36:	60da      	str	r2, [r3, #12]

  for (idx = 0U; idx < hmsc->bot_data_length; idx++)
 8014b38:	2300      	movs	r3, #0
 8014b3a:	77fb      	strb	r3, [r7, #31]
 8014b3c:	e007      	b.n	8014b4e <SCSI_ReadCapacity16+0x9e>
  {
    hmsc->bot_data[idx] = 0U;
 8014b3e:	7ffb      	ldrb	r3, [r7, #31]
 8014b40:	69ba      	ldr	r2, [r7, #24]
 8014b42:	4413      	add	r3, r2
 8014b44:	2200      	movs	r2, #0
 8014b46:	741a      	strb	r2, [r3, #16]
  for (idx = 0U; idx < hmsc->bot_data_length; idx++)
 8014b48:	7ffb      	ldrb	r3, [r7, #31]
 8014b4a:	3301      	adds	r3, #1
 8014b4c:	77fb      	strb	r3, [r7, #31]
 8014b4e:	7ffa      	ldrb	r2, [r7, #31]
 8014b50:	69bb      	ldr	r3, [r7, #24]
 8014b52:	68db      	ldr	r3, [r3, #12]
 8014b54:	429a      	cmp	r2, r3
 8014b56:	d3f2      	bcc.n	8014b3e <SCSI_ReadCapacity16+0x8e>
  }

  hmsc->bot_data[4] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >> 24);
 8014b58:	69ba      	ldr	r2, [r7, #24]
 8014b5a:	f248 0368 	movw	r3, #32872	; 0x8068
 8014b5e:	4413      	add	r3, r2
 8014b60:	681b      	ldr	r3, [r3, #0]
 8014b62:	3b01      	subs	r3, #1
 8014b64:	0e1b      	lsrs	r3, r3, #24
 8014b66:	b2da      	uxtb	r2, r3
 8014b68:	69bb      	ldr	r3, [r7, #24]
 8014b6a:	751a      	strb	r2, [r3, #20]
  hmsc->bot_data[5] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >> 16);
 8014b6c:	69ba      	ldr	r2, [r7, #24]
 8014b6e:	f248 0368 	movw	r3, #32872	; 0x8068
 8014b72:	4413      	add	r3, r2
 8014b74:	681b      	ldr	r3, [r3, #0]
 8014b76:	3b01      	subs	r3, #1
 8014b78:	0c1b      	lsrs	r3, r3, #16
 8014b7a:	b2da      	uxtb	r2, r3
 8014b7c:	69bb      	ldr	r3, [r7, #24]
 8014b7e:	755a      	strb	r2, [r3, #21]
  hmsc->bot_data[6] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >>  8);
 8014b80:	69ba      	ldr	r2, [r7, #24]
 8014b82:	f248 0368 	movw	r3, #32872	; 0x8068
 8014b86:	4413      	add	r3, r2
 8014b88:	681b      	ldr	r3, [r3, #0]
 8014b8a:	3b01      	subs	r3, #1
 8014b8c:	0a1b      	lsrs	r3, r3, #8
 8014b8e:	b2da      	uxtb	r2, r3
 8014b90:	69bb      	ldr	r3, [r7, #24]
 8014b92:	759a      	strb	r2, [r3, #22]
  hmsc->bot_data[7] = (uint8_t)(hmsc->scsi_blk_nbr - 1U);
 8014b94:	69ba      	ldr	r2, [r7, #24]
 8014b96:	f248 0368 	movw	r3, #32872	; 0x8068
 8014b9a:	4413      	add	r3, r2
 8014b9c:	681b      	ldr	r3, [r3, #0]
 8014b9e:	b2db      	uxtb	r3, r3
 8014ba0:	3b01      	subs	r3, #1
 8014ba2:	b2da      	uxtb	r2, r3
 8014ba4:	69bb      	ldr	r3, [r7, #24]
 8014ba6:	75da      	strb	r2, [r3, #23]

  hmsc->bot_data[8] = (uint8_t)(hmsc->scsi_blk_size >>  24);
 8014ba8:	69ba      	ldr	r2, [r7, #24]
 8014baa:	f248 0364 	movw	r3, #32868	; 0x8064
 8014bae:	4413      	add	r3, r2
 8014bb0:	881b      	ldrh	r3, [r3, #0]
 8014bb2:	161b      	asrs	r3, r3, #24
 8014bb4:	b2da      	uxtb	r2, r3
 8014bb6:	69bb      	ldr	r3, [r7, #24]
 8014bb8:	761a      	strb	r2, [r3, #24]
  hmsc->bot_data[9] = (uint8_t)(hmsc->scsi_blk_size >>  16);
 8014bba:	69ba      	ldr	r2, [r7, #24]
 8014bbc:	f248 0364 	movw	r3, #32868	; 0x8064
 8014bc0:	4413      	add	r3, r2
 8014bc2:	881b      	ldrh	r3, [r3, #0]
 8014bc4:	141b      	asrs	r3, r3, #16
 8014bc6:	b2da      	uxtb	r2, r3
 8014bc8:	69bb      	ldr	r3, [r7, #24]
 8014bca:	765a      	strb	r2, [r3, #25]
  hmsc->bot_data[10] = (uint8_t)(hmsc->scsi_blk_size >>  8);
 8014bcc:	69ba      	ldr	r2, [r7, #24]
 8014bce:	f248 0364 	movw	r3, #32868	; 0x8064
 8014bd2:	4413      	add	r3, r2
 8014bd4:	881b      	ldrh	r3, [r3, #0]
 8014bd6:	0a1b      	lsrs	r3, r3, #8
 8014bd8:	b29b      	uxth	r3, r3
 8014bda:	b2da      	uxtb	r2, r3
 8014bdc:	69bb      	ldr	r3, [r7, #24]
 8014bde:	769a      	strb	r2, [r3, #26]
  hmsc->bot_data[11] = (uint8_t)(hmsc->scsi_blk_size);
 8014be0:	69ba      	ldr	r2, [r7, #24]
 8014be2:	f248 0364 	movw	r3, #32868	; 0x8064
 8014be6:	4413      	add	r3, r2
 8014be8:	881b      	ldrh	r3, [r3, #0]
 8014bea:	b2da      	uxtb	r2, r3
 8014bec:	69bb      	ldr	r3, [r7, #24]
 8014bee:	76da      	strb	r2, [r3, #27]

  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 8014bf0:	687b      	ldr	r3, [r7, #4]
 8014bf2:	330a      	adds	r3, #10
 8014bf4:	781b      	ldrb	r3, [r3, #0]
 8014bf6:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[11] << 16) |
 8014bf8:	687b      	ldr	r3, [r7, #4]
 8014bfa:	330b      	adds	r3, #11
 8014bfc:	781b      	ldrb	r3, [r3, #0]
 8014bfe:	041b      	lsls	r3, r3, #16
  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 8014c00:	431a      	orrs	r2, r3
                          ((uint32_t)params[12] <<  8) |
 8014c02:	687b      	ldr	r3, [r7, #4]
 8014c04:	330c      	adds	r3, #12
 8014c06:	781b      	ldrb	r3, [r3, #0]
 8014c08:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[11] << 16) |
 8014c0a:	4313      	orrs	r3, r2
                           (uint32_t)params[13];
 8014c0c:	687a      	ldr	r2, [r7, #4]
 8014c0e:	320d      	adds	r2, #13
 8014c10:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[12] <<  8) |
 8014c12:	431a      	orrs	r2, r3
  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 8014c14:	69bb      	ldr	r3, [r7, #24]
 8014c16:	60da      	str	r2, [r3, #12]

  return 0;
 8014c18:	2300      	movs	r3, #0
}
 8014c1a:	4618      	mov	r0, r3
 8014c1c:	3724      	adds	r7, #36	; 0x24
 8014c1e:	46bd      	mov	sp, r7
 8014c20:	bd90      	pop	{r4, r7, pc}

08014c22 <SCSI_ReadFormatCapacity>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
static int8_t SCSI_ReadFormatCapacity(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8014c22:	b580      	push	{r7, lr}
 8014c24:	b088      	sub	sp, #32
 8014c26:	af00      	add	r7, sp, #0
 8014c28:	60f8      	str	r0, [r7, #12]
 8014c2a:	460b      	mov	r3, r1
 8014c2c:	607a      	str	r2, [r7, #4]
 8014c2e:	72fb      	strb	r3, [r7, #11]
  UNUSED(params);
  uint16_t blk_size;
  uint32_t blk_nbr;
  uint16_t i;
  int8_t ret;
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8014c30:	68fb      	ldr	r3, [r7, #12]
 8014c32:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8014c36:	61bb      	str	r3, [r7, #24]

  ret = ((USBD_StorageTypeDef *)pdev->pUserData)->GetCapacity(lun, &blk_nbr, &blk_size);
 8014c38:	68fb      	ldr	r3, [r7, #12]
 8014c3a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8014c3e:	685b      	ldr	r3, [r3, #4]
 8014c40:	f107 0214 	add.w	r2, r7, #20
 8014c44:	f107 0110 	add.w	r1, r7, #16
 8014c48:	7af8      	ldrb	r0, [r7, #11]
 8014c4a:	4798      	blx	r3
 8014c4c:	4603      	mov	r3, r0
 8014c4e:	75fb      	strb	r3, [r7, #23]

  if ((ret != 0) || (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED))
 8014c50:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8014c54:	2b00      	cmp	r3, #0
 8014c56:	d106      	bne.n	8014c66 <SCSI_ReadFormatCapacity+0x44>
 8014c58:	69ba      	ldr	r2, [r7, #24]
 8014c5a:	f248 0362 	movw	r3, #32866	; 0x8062
 8014c5e:	4413      	add	r3, r2
 8014c60:	781b      	ldrb	r3, [r3, #0]
 8014c62:	2b02      	cmp	r3, #2
 8014c64:	d108      	bne.n	8014c78 <SCSI_ReadFormatCapacity+0x56>
  {
    SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 8014c66:	7af9      	ldrb	r1, [r7, #11]
 8014c68:	233a      	movs	r3, #58	; 0x3a
 8014c6a:	2202      	movs	r2, #2
 8014c6c:	68f8      	ldr	r0, [r7, #12]
 8014c6e:	f000 f92b 	bl	8014ec8 <SCSI_SenseCode>
    return -1;
 8014c72:	f04f 33ff 	mov.w	r3, #4294967295
 8014c76:	e03e      	b.n	8014cf6 <SCSI_ReadFormatCapacity+0xd4>
  }

  for (i = 0U; i < 12U ; i++)
 8014c78:	2300      	movs	r3, #0
 8014c7a:	83fb      	strh	r3, [r7, #30]
 8014c7c:	e007      	b.n	8014c8e <SCSI_ReadFormatCapacity+0x6c>
  {
    hmsc->bot_data[i] = 0U;
 8014c7e:	8bfb      	ldrh	r3, [r7, #30]
 8014c80:	69ba      	ldr	r2, [r7, #24]
 8014c82:	4413      	add	r3, r2
 8014c84:	2200      	movs	r2, #0
 8014c86:	741a      	strb	r2, [r3, #16]
  for (i = 0U; i < 12U ; i++)
 8014c88:	8bfb      	ldrh	r3, [r7, #30]
 8014c8a:	3301      	adds	r3, #1
 8014c8c:	83fb      	strh	r3, [r7, #30]
 8014c8e:	8bfb      	ldrh	r3, [r7, #30]
 8014c90:	2b0b      	cmp	r3, #11
 8014c92:	d9f4      	bls.n	8014c7e <SCSI_ReadFormatCapacity+0x5c>
  }

  hmsc->bot_data[3] = 0x08U;
 8014c94:	69bb      	ldr	r3, [r7, #24]
 8014c96:	2208      	movs	r2, #8
 8014c98:	74da      	strb	r2, [r3, #19]
  hmsc->bot_data[4] = (uint8_t)((blk_nbr - 1U) >> 24);
 8014c9a:	693b      	ldr	r3, [r7, #16]
 8014c9c:	3b01      	subs	r3, #1
 8014c9e:	0e1b      	lsrs	r3, r3, #24
 8014ca0:	b2da      	uxtb	r2, r3
 8014ca2:	69bb      	ldr	r3, [r7, #24]
 8014ca4:	751a      	strb	r2, [r3, #20]
  hmsc->bot_data[5] = (uint8_t)((blk_nbr - 1U) >> 16);
 8014ca6:	693b      	ldr	r3, [r7, #16]
 8014ca8:	3b01      	subs	r3, #1
 8014caa:	0c1b      	lsrs	r3, r3, #16
 8014cac:	b2da      	uxtb	r2, r3
 8014cae:	69bb      	ldr	r3, [r7, #24]
 8014cb0:	755a      	strb	r2, [r3, #21]
  hmsc->bot_data[6] = (uint8_t)((blk_nbr - 1U) >>  8);
 8014cb2:	693b      	ldr	r3, [r7, #16]
 8014cb4:	3b01      	subs	r3, #1
 8014cb6:	0a1b      	lsrs	r3, r3, #8
 8014cb8:	b2da      	uxtb	r2, r3
 8014cba:	69bb      	ldr	r3, [r7, #24]
 8014cbc:	759a      	strb	r2, [r3, #22]
  hmsc->bot_data[7] = (uint8_t)(blk_nbr - 1U);
 8014cbe:	693b      	ldr	r3, [r7, #16]
 8014cc0:	b2db      	uxtb	r3, r3
 8014cc2:	3b01      	subs	r3, #1
 8014cc4:	b2da      	uxtb	r2, r3
 8014cc6:	69bb      	ldr	r3, [r7, #24]
 8014cc8:	75da      	strb	r2, [r3, #23]

  hmsc->bot_data[8] = 0x02U;
 8014cca:	69bb      	ldr	r3, [r7, #24]
 8014ccc:	2202      	movs	r2, #2
 8014cce:	761a      	strb	r2, [r3, #24]
  hmsc->bot_data[9] = (uint8_t)(blk_size >>  16);
 8014cd0:	8abb      	ldrh	r3, [r7, #20]
 8014cd2:	141b      	asrs	r3, r3, #16
 8014cd4:	b2da      	uxtb	r2, r3
 8014cd6:	69bb      	ldr	r3, [r7, #24]
 8014cd8:	765a      	strb	r2, [r3, #25]
  hmsc->bot_data[10] = (uint8_t)(blk_size >>  8);
 8014cda:	8abb      	ldrh	r3, [r7, #20]
 8014cdc:	0a1b      	lsrs	r3, r3, #8
 8014cde:	b29b      	uxth	r3, r3
 8014ce0:	b2da      	uxtb	r2, r3
 8014ce2:	69bb      	ldr	r3, [r7, #24]
 8014ce4:	769a      	strb	r2, [r3, #26]
  hmsc->bot_data[11] = (uint8_t)(blk_size);
 8014ce6:	8abb      	ldrh	r3, [r7, #20]
 8014ce8:	b2da      	uxtb	r2, r3
 8014cea:	69bb      	ldr	r3, [r7, #24]
 8014cec:	76da      	strb	r2, [r3, #27]

  hmsc->bot_data_length = 12U;
 8014cee:	69bb      	ldr	r3, [r7, #24]
 8014cf0:	220c      	movs	r2, #12
 8014cf2:	60da      	str	r2, [r3, #12]

  return 0;
 8014cf4:	2300      	movs	r3, #0
}
 8014cf6:	4618      	mov	r0, r3
 8014cf8:	3720      	adds	r7, #32
 8014cfa:	46bd      	mov	sp, r7
 8014cfc:	bd80      	pop	{r7, pc}
	...

08014d00 <SCSI_ModeSense6>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
static int8_t SCSI_ModeSense6(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8014d00:	b580      	push	{r7, lr}
 8014d02:	b086      	sub	sp, #24
 8014d04:	af00      	add	r7, sp, #0
 8014d06:	60f8      	str	r0, [r7, #12]
 8014d08:	460b      	mov	r3, r1
 8014d0a:	607a      	str	r2, [r7, #4]
 8014d0c:	72fb      	strb	r3, [r7, #11]
  UNUSED(lun);
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8014d0e:	68fb      	ldr	r3, [r7, #12]
 8014d10:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8014d14:	613b      	str	r3, [r7, #16]
  uint16_t len = MODE_SENSE6_LEN;
 8014d16:	2317      	movs	r3, #23
 8014d18:	82fb      	strh	r3, [r7, #22]

  if (params[4] <= len)
 8014d1a:	687b      	ldr	r3, [r7, #4]
 8014d1c:	3304      	adds	r3, #4
 8014d1e:	781b      	ldrb	r3, [r3, #0]
 8014d20:	b29b      	uxth	r3, r3
 8014d22:	8afa      	ldrh	r2, [r7, #22]
 8014d24:	429a      	cmp	r2, r3
 8014d26:	d303      	bcc.n	8014d30 <SCSI_ModeSense6+0x30>
  {
    len = params[4];
 8014d28:	687b      	ldr	r3, [r7, #4]
 8014d2a:	3304      	adds	r3, #4
 8014d2c:	781b      	ldrb	r3, [r3, #0]
 8014d2e:	82fb      	strh	r3, [r7, #22]
  }

  (void)SCSI_UpdateBotData(hmsc, MSC_Mode_Sense6_data, len);
 8014d30:	8afb      	ldrh	r3, [r7, #22]
 8014d32:	461a      	mov	r2, r3
 8014d34:	4904      	ldr	r1, [pc, #16]	; (8014d48 <SCSI_ModeSense6+0x48>)
 8014d36:	6938      	ldr	r0, [r7, #16]
 8014d38:	f000 fe54 	bl	80159e4 <SCSI_UpdateBotData>

  return 0;
 8014d3c:	2300      	movs	r3, #0
}
 8014d3e:	4618      	mov	r0, r3
 8014d40:	3718      	adds	r7, #24
 8014d42:	46bd      	mov	sp, r7
 8014d44:	bd80      	pop	{r7, pc}
 8014d46:	bf00      	nop
 8014d48:	240000d4 	.word	0x240000d4

08014d4c <SCSI_ModeSense10>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
static int8_t SCSI_ModeSense10(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8014d4c:	b580      	push	{r7, lr}
 8014d4e:	b086      	sub	sp, #24
 8014d50:	af00      	add	r7, sp, #0
 8014d52:	60f8      	str	r0, [r7, #12]
 8014d54:	460b      	mov	r3, r1
 8014d56:	607a      	str	r2, [r7, #4]
 8014d58:	72fb      	strb	r3, [r7, #11]
  UNUSED(lun);
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8014d5a:	68fb      	ldr	r3, [r7, #12]
 8014d5c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8014d60:	613b      	str	r3, [r7, #16]
  uint16_t len = MODE_SENSE10_LEN;
 8014d62:	231b      	movs	r3, #27
 8014d64:	82fb      	strh	r3, [r7, #22]

  if (params[8] <= len)
 8014d66:	687b      	ldr	r3, [r7, #4]
 8014d68:	3308      	adds	r3, #8
 8014d6a:	781b      	ldrb	r3, [r3, #0]
 8014d6c:	b29b      	uxth	r3, r3
 8014d6e:	8afa      	ldrh	r2, [r7, #22]
 8014d70:	429a      	cmp	r2, r3
 8014d72:	d303      	bcc.n	8014d7c <SCSI_ModeSense10+0x30>
  {
    len = params[8];
 8014d74:	687b      	ldr	r3, [r7, #4]
 8014d76:	3308      	adds	r3, #8
 8014d78:	781b      	ldrb	r3, [r3, #0]
 8014d7a:	82fb      	strh	r3, [r7, #22]
  }

  (void)SCSI_UpdateBotData(hmsc, MSC_Mode_Sense10_data, len);
 8014d7c:	8afb      	ldrh	r3, [r7, #22]
 8014d7e:	461a      	mov	r2, r3
 8014d80:	4904      	ldr	r1, [pc, #16]	; (8014d94 <SCSI_ModeSense10+0x48>)
 8014d82:	6938      	ldr	r0, [r7, #16]
 8014d84:	f000 fe2e 	bl	80159e4 <SCSI_UpdateBotData>

  return 0;
 8014d88:	2300      	movs	r3, #0
}
 8014d8a:	4618      	mov	r0, r3
 8014d8c:	3718      	adds	r7, #24
 8014d8e:	46bd      	mov	sp, r7
 8014d90:	bd80      	pop	{r7, pc}
 8014d92:	bf00      	nop
 8014d94:	240000ec 	.word	0x240000ec

08014d98 <SCSI_RequestSense>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
static int8_t SCSI_RequestSense(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8014d98:	b580      	push	{r7, lr}
 8014d9a:	b086      	sub	sp, #24
 8014d9c:	af00      	add	r7, sp, #0
 8014d9e:	60f8      	str	r0, [r7, #12]
 8014da0:	460b      	mov	r3, r1
 8014da2:	607a      	str	r2, [r7, #4]
 8014da4:	72fb      	strb	r3, [r7, #11]
  UNUSED(lun);
  uint8_t i;
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8014da6:	68fb      	ldr	r3, [r7, #12]
 8014da8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8014dac:	613b      	str	r3, [r7, #16]

  if (hmsc->cbw.dDataLength == 0U)
 8014dae:	693a      	ldr	r2, [r7, #16]
 8014db0:	f248 0318 	movw	r3, #32792	; 0x8018
 8014db4:	4413      	add	r3, r2
 8014db6:	681b      	ldr	r3, [r3, #0]
 8014db8:	2b00      	cmp	r3, #0
 8014dba:	d10c      	bne.n	8014dd6 <SCSI_RequestSense+0x3e>
  {
    SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8014dbc:	693a      	ldr	r2, [r7, #16]
 8014dbe:	f248 031d 	movw	r3, #32797	; 0x801d
 8014dc2:	4413      	add	r3, r2
 8014dc4:	7819      	ldrb	r1, [r3, #0]
 8014dc6:	2320      	movs	r3, #32
 8014dc8:	2205      	movs	r2, #5
 8014dca:	68f8      	ldr	r0, [r7, #12]
 8014dcc:	f000 f87c 	bl	8014ec8 <SCSI_SenseCode>
    return -1;
 8014dd0:	f04f 33ff 	mov.w	r3, #4294967295
 8014dd4:	e074      	b.n	8014ec0 <SCSI_RequestSense+0x128>
  }

  for (i = 0U; i < REQUEST_SENSE_DATA_LEN; i++)
 8014dd6:	2300      	movs	r3, #0
 8014dd8:	75fb      	strb	r3, [r7, #23]
 8014dda:	e007      	b.n	8014dec <SCSI_RequestSense+0x54>
  {
    hmsc->bot_data[i] = 0U;
 8014ddc:	7dfb      	ldrb	r3, [r7, #23]
 8014dde:	693a      	ldr	r2, [r7, #16]
 8014de0:	4413      	add	r3, r2
 8014de2:	2200      	movs	r2, #0
 8014de4:	741a      	strb	r2, [r3, #16]
  for (i = 0U; i < REQUEST_SENSE_DATA_LEN; i++)
 8014de6:	7dfb      	ldrb	r3, [r7, #23]
 8014de8:	3301      	adds	r3, #1
 8014dea:	75fb      	strb	r3, [r7, #23]
 8014dec:	7dfb      	ldrb	r3, [r7, #23]
 8014dee:	2b11      	cmp	r3, #17
 8014df0:	d9f4      	bls.n	8014ddc <SCSI_RequestSense+0x44>
  }

  hmsc->bot_data[0] = 0x70U;
 8014df2:	693b      	ldr	r3, [r7, #16]
 8014df4:	2270      	movs	r2, #112	; 0x70
 8014df6:	741a      	strb	r2, [r3, #16]
  hmsc->bot_data[7] = REQUEST_SENSE_DATA_LEN - 6U;
 8014df8:	693b      	ldr	r3, [r7, #16]
 8014dfa:	220c      	movs	r2, #12
 8014dfc:	75da      	strb	r2, [r3, #23]

  if ((hmsc->scsi_sense_head != hmsc->scsi_sense_tail))
 8014dfe:	693a      	ldr	r2, [r7, #16]
 8014e00:	f248 0360 	movw	r3, #32864	; 0x8060
 8014e04:	4413      	add	r3, r2
 8014e06:	781a      	ldrb	r2, [r3, #0]
 8014e08:	6939      	ldr	r1, [r7, #16]
 8014e0a:	f248 0361 	movw	r3, #32865	; 0x8061
 8014e0e:	440b      	add	r3, r1
 8014e10:	781b      	ldrb	r3, [r3, #0]
 8014e12:	429a      	cmp	r2, r3
 8014e14:	d045      	beq.n	8014ea2 <SCSI_RequestSense+0x10a>
  {
    hmsc->bot_data[2] = (uint8_t)hmsc->scsi_sense[hmsc->scsi_sense_head].Skey;
 8014e16:	693a      	ldr	r2, [r7, #16]
 8014e18:	f248 0360 	movw	r3, #32864	; 0x8060
 8014e1c:	4413      	add	r3, r2
 8014e1e:	781b      	ldrb	r3, [r3, #0]
 8014e20:	4619      	mov	r1, r3
 8014e22:	693a      	ldr	r2, [r7, #16]
 8014e24:	f241 0308 	movw	r3, #4104	; 0x1008
 8014e28:	440b      	add	r3, r1
 8014e2a:	f812 2033 	ldrb.w	r2, [r2, r3, lsl #3]
 8014e2e:	693b      	ldr	r3, [r7, #16]
 8014e30:	749a      	strb	r2, [r3, #18]
    hmsc->bot_data[12] = (uint8_t)hmsc->scsi_sense[hmsc->scsi_sense_head].w.b.ASC;
 8014e32:	693a      	ldr	r2, [r7, #16]
 8014e34:	f248 0360 	movw	r3, #32864	; 0x8060
 8014e38:	4413      	add	r3, r2
 8014e3a:	781b      	ldrb	r3, [r3, #0]
 8014e3c:	4619      	mov	r1, r3
 8014e3e:	693a      	ldr	r2, [r7, #16]
 8014e40:	f241 0308 	movw	r3, #4104	; 0x1008
 8014e44:	440b      	add	r3, r1
 8014e46:	00db      	lsls	r3, r3, #3
 8014e48:	4413      	add	r3, r2
 8014e4a:	791a      	ldrb	r2, [r3, #4]
 8014e4c:	693b      	ldr	r3, [r7, #16]
 8014e4e:	771a      	strb	r2, [r3, #28]
    hmsc->bot_data[13] = (uint8_t)hmsc->scsi_sense[hmsc->scsi_sense_head].w.b.ASCQ;
 8014e50:	693a      	ldr	r2, [r7, #16]
 8014e52:	f248 0360 	movw	r3, #32864	; 0x8060
 8014e56:	4413      	add	r3, r2
 8014e58:	781b      	ldrb	r3, [r3, #0]
 8014e5a:	4619      	mov	r1, r3
 8014e5c:	693a      	ldr	r2, [r7, #16]
 8014e5e:	f241 0308 	movw	r3, #4104	; 0x1008
 8014e62:	440b      	add	r3, r1
 8014e64:	00db      	lsls	r3, r3, #3
 8014e66:	4413      	add	r3, r2
 8014e68:	795a      	ldrb	r2, [r3, #5]
 8014e6a:	693b      	ldr	r3, [r7, #16]
 8014e6c:	775a      	strb	r2, [r3, #29]
    hmsc->scsi_sense_head++;
 8014e6e:	693a      	ldr	r2, [r7, #16]
 8014e70:	f248 0360 	movw	r3, #32864	; 0x8060
 8014e74:	4413      	add	r3, r2
 8014e76:	781b      	ldrb	r3, [r3, #0]
 8014e78:	3301      	adds	r3, #1
 8014e7a:	b2d9      	uxtb	r1, r3
 8014e7c:	693a      	ldr	r2, [r7, #16]
 8014e7e:	f248 0360 	movw	r3, #32864	; 0x8060
 8014e82:	4413      	add	r3, r2
 8014e84:	460a      	mov	r2, r1
 8014e86:	701a      	strb	r2, [r3, #0]

    if (hmsc->scsi_sense_head == SENSE_LIST_DEEPTH)
 8014e88:	693a      	ldr	r2, [r7, #16]
 8014e8a:	f248 0360 	movw	r3, #32864	; 0x8060
 8014e8e:	4413      	add	r3, r2
 8014e90:	781b      	ldrb	r3, [r3, #0]
 8014e92:	2b04      	cmp	r3, #4
 8014e94:	d105      	bne.n	8014ea2 <SCSI_RequestSense+0x10a>
    {
      hmsc->scsi_sense_head = 0U;
 8014e96:	693a      	ldr	r2, [r7, #16]
 8014e98:	f248 0360 	movw	r3, #32864	; 0x8060
 8014e9c:	4413      	add	r3, r2
 8014e9e:	2200      	movs	r2, #0
 8014ea0:	701a      	strb	r2, [r3, #0]
    }
  }

  hmsc->bot_data_length = REQUEST_SENSE_DATA_LEN;
 8014ea2:	693b      	ldr	r3, [r7, #16]
 8014ea4:	2212      	movs	r2, #18
 8014ea6:	60da      	str	r2, [r3, #12]

  if (params[4] <= REQUEST_SENSE_DATA_LEN)
 8014ea8:	687b      	ldr	r3, [r7, #4]
 8014eaa:	3304      	adds	r3, #4
 8014eac:	781b      	ldrb	r3, [r3, #0]
 8014eae:	2b12      	cmp	r3, #18
 8014eb0:	d805      	bhi.n	8014ebe <SCSI_RequestSense+0x126>
  {
    hmsc->bot_data_length = params[4];
 8014eb2:	687b      	ldr	r3, [r7, #4]
 8014eb4:	3304      	adds	r3, #4
 8014eb6:	781b      	ldrb	r3, [r3, #0]
 8014eb8:	461a      	mov	r2, r3
 8014eba:	693b      	ldr	r3, [r7, #16]
 8014ebc:	60da      	str	r2, [r3, #12]
  }

  return 0;
 8014ebe:	2300      	movs	r3, #0
}
 8014ec0:	4618      	mov	r0, r3
 8014ec2:	3718      	adds	r7, #24
 8014ec4:	46bd      	mov	sp, r7
 8014ec6:	bd80      	pop	{r7, pc}

08014ec8 <SCSI_SenseCode>:
* @param  ASC: Additional Sense Code
* @retval none

*/
void SCSI_SenseCode(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t sKey, uint8_t ASC)
{
 8014ec8:	b480      	push	{r7}
 8014eca:	b085      	sub	sp, #20
 8014ecc:	af00      	add	r7, sp, #0
 8014ece:	6078      	str	r0, [r7, #4]
 8014ed0:	4608      	mov	r0, r1
 8014ed2:	4611      	mov	r1, r2
 8014ed4:	461a      	mov	r2, r3
 8014ed6:	4603      	mov	r3, r0
 8014ed8:	70fb      	strb	r3, [r7, #3]
 8014eda:	460b      	mov	r3, r1
 8014edc:	70bb      	strb	r3, [r7, #2]
 8014ede:	4613      	mov	r3, r2
 8014ee0:	707b      	strb	r3, [r7, #1]
  UNUSED(lun);
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8014ee2:	687b      	ldr	r3, [r7, #4]
 8014ee4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8014ee8:	60fb      	str	r3, [r7, #12]

  hmsc->scsi_sense[hmsc->scsi_sense_tail].Skey = sKey;
 8014eea:	68fa      	ldr	r2, [r7, #12]
 8014eec:	f248 0361 	movw	r3, #32865	; 0x8061
 8014ef0:	4413      	add	r3, r2
 8014ef2:	781b      	ldrb	r3, [r3, #0]
 8014ef4:	4619      	mov	r1, r3
 8014ef6:	68fa      	ldr	r2, [r7, #12]
 8014ef8:	f241 0308 	movw	r3, #4104	; 0x1008
 8014efc:	440b      	add	r3, r1
 8014efe:	78b9      	ldrb	r1, [r7, #2]
 8014f00:	f802 1033 	strb.w	r1, [r2, r3, lsl #3]
  hmsc->scsi_sense[hmsc->scsi_sense_tail].w.b.ASC = ASC;
 8014f04:	68fa      	ldr	r2, [r7, #12]
 8014f06:	f248 0361 	movw	r3, #32865	; 0x8061
 8014f0a:	4413      	add	r3, r2
 8014f0c:	781b      	ldrb	r3, [r3, #0]
 8014f0e:	4619      	mov	r1, r3
 8014f10:	68fa      	ldr	r2, [r7, #12]
 8014f12:	f241 0308 	movw	r3, #4104	; 0x1008
 8014f16:	440b      	add	r3, r1
 8014f18:	00db      	lsls	r3, r3, #3
 8014f1a:	4413      	add	r3, r2
 8014f1c:	787a      	ldrb	r2, [r7, #1]
 8014f1e:	711a      	strb	r2, [r3, #4]
  hmsc->scsi_sense[hmsc->scsi_sense_tail].w.b.ASCQ = 0U;
 8014f20:	68fa      	ldr	r2, [r7, #12]
 8014f22:	f248 0361 	movw	r3, #32865	; 0x8061
 8014f26:	4413      	add	r3, r2
 8014f28:	781b      	ldrb	r3, [r3, #0]
 8014f2a:	4619      	mov	r1, r3
 8014f2c:	68fa      	ldr	r2, [r7, #12]
 8014f2e:	f241 0308 	movw	r3, #4104	; 0x1008
 8014f32:	440b      	add	r3, r1
 8014f34:	00db      	lsls	r3, r3, #3
 8014f36:	4413      	add	r3, r2
 8014f38:	2200      	movs	r2, #0
 8014f3a:	715a      	strb	r2, [r3, #5]
  hmsc->scsi_sense_tail++;
 8014f3c:	68fa      	ldr	r2, [r7, #12]
 8014f3e:	f248 0361 	movw	r3, #32865	; 0x8061
 8014f42:	4413      	add	r3, r2
 8014f44:	781b      	ldrb	r3, [r3, #0]
 8014f46:	3301      	adds	r3, #1
 8014f48:	b2d9      	uxtb	r1, r3
 8014f4a:	68fa      	ldr	r2, [r7, #12]
 8014f4c:	f248 0361 	movw	r3, #32865	; 0x8061
 8014f50:	4413      	add	r3, r2
 8014f52:	460a      	mov	r2, r1
 8014f54:	701a      	strb	r2, [r3, #0]

  if (hmsc->scsi_sense_tail == SENSE_LIST_DEEPTH)
 8014f56:	68fa      	ldr	r2, [r7, #12]
 8014f58:	f248 0361 	movw	r3, #32865	; 0x8061
 8014f5c:	4413      	add	r3, r2
 8014f5e:	781b      	ldrb	r3, [r3, #0]
 8014f60:	2b04      	cmp	r3, #4
 8014f62:	d105      	bne.n	8014f70 <SCSI_SenseCode+0xa8>
  {
    hmsc->scsi_sense_tail = 0U;
 8014f64:	68fa      	ldr	r2, [r7, #12]
 8014f66:	f248 0361 	movw	r3, #32865	; 0x8061
 8014f6a:	4413      	add	r3, r2
 8014f6c:	2200      	movs	r2, #0
 8014f6e:	701a      	strb	r2, [r3, #0]
  }
}
 8014f70:	bf00      	nop
 8014f72:	3714      	adds	r7, #20
 8014f74:	46bd      	mov	sp, r7
 8014f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014f7a:	4770      	bx	lr

08014f7c <SCSI_StartStopUnit>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
static int8_t SCSI_StartStopUnit(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8014f7c:	b580      	push	{r7, lr}
 8014f7e:	b086      	sub	sp, #24
 8014f80:	af00      	add	r7, sp, #0
 8014f82:	60f8      	str	r0, [r7, #12]
 8014f84:	460b      	mov	r3, r1
 8014f86:	607a      	str	r2, [r7, #4]
 8014f88:	72fb      	strb	r3, [r7, #11]
  UNUSED(lun);
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8014f8a:	68fb      	ldr	r3, [r7, #12]
 8014f8c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8014f90:	617b      	str	r3, [r7, #20]

  if ((hmsc->scsi_medium_state == SCSI_MEDIUM_LOCKED) && ((params[4] & 0x3U) == 2U))
 8014f92:	697a      	ldr	r2, [r7, #20]
 8014f94:	f248 0362 	movw	r3, #32866	; 0x8062
 8014f98:	4413      	add	r3, r2
 8014f9a:	781b      	ldrb	r3, [r3, #0]
 8014f9c:	2b01      	cmp	r3, #1
 8014f9e:	d10f      	bne.n	8014fc0 <SCSI_StartStopUnit+0x44>
 8014fa0:	687b      	ldr	r3, [r7, #4]
 8014fa2:	3304      	adds	r3, #4
 8014fa4:	781b      	ldrb	r3, [r3, #0]
 8014fa6:	f003 0303 	and.w	r3, r3, #3
 8014faa:	2b02      	cmp	r3, #2
 8014fac:	d108      	bne.n	8014fc0 <SCSI_StartStopUnit+0x44>
  {
    SCSI_SenseCode(pdev, lun, ILLEGAL_REQUEST, INVALID_FIELED_IN_COMMAND);
 8014fae:	7af9      	ldrb	r1, [r7, #11]
 8014fb0:	2324      	movs	r3, #36	; 0x24
 8014fb2:	2205      	movs	r2, #5
 8014fb4:	68f8      	ldr	r0, [r7, #12]
 8014fb6:	f7ff ff87 	bl	8014ec8 <SCSI_SenseCode>

    return -1;
 8014fba:	f04f 33ff 	mov.w	r3, #4294967295
 8014fbe:	e02c      	b.n	801501a <SCSI_StartStopUnit+0x9e>
  }

  if ((params[4] & 0x3U) == 0x1U) /* START=1 */
 8014fc0:	687b      	ldr	r3, [r7, #4]
 8014fc2:	3304      	adds	r3, #4
 8014fc4:	781b      	ldrb	r3, [r3, #0]
 8014fc6:	f003 0303 	and.w	r3, r3, #3
 8014fca:	2b01      	cmp	r3, #1
 8014fcc:	d106      	bne.n	8014fdc <SCSI_StartStopUnit+0x60>
  {
    hmsc->scsi_medium_state = SCSI_MEDIUM_UNLOCKED;
 8014fce:	697a      	ldr	r2, [r7, #20]
 8014fd0:	f248 0362 	movw	r3, #32866	; 0x8062
 8014fd4:	4413      	add	r3, r2
 8014fd6:	2200      	movs	r2, #0
 8014fd8:	701a      	strb	r2, [r3, #0]
 8014fda:	e01a      	b.n	8015012 <SCSI_StartStopUnit+0x96>
  }
  else if ((params[4] & 0x3U) == 0x2U) /* START=0 and LOEJ Load Eject=1 */
 8014fdc:	687b      	ldr	r3, [r7, #4]
 8014fde:	3304      	adds	r3, #4
 8014fe0:	781b      	ldrb	r3, [r3, #0]
 8014fe2:	f003 0303 	and.w	r3, r3, #3
 8014fe6:	2b02      	cmp	r3, #2
 8014fe8:	d106      	bne.n	8014ff8 <SCSI_StartStopUnit+0x7c>
  {
    hmsc->scsi_medium_state = SCSI_MEDIUM_EJECTED;
 8014fea:	697a      	ldr	r2, [r7, #20]
 8014fec:	f248 0362 	movw	r3, #32866	; 0x8062
 8014ff0:	4413      	add	r3, r2
 8014ff2:	2202      	movs	r2, #2
 8014ff4:	701a      	strb	r2, [r3, #0]
 8014ff6:	e00c      	b.n	8015012 <SCSI_StartStopUnit+0x96>
  }
  else if ((params[4] & 0x3U) == 0x3U) /* START=1 and LOEJ Load Eject=1 */
 8014ff8:	687b      	ldr	r3, [r7, #4]
 8014ffa:	3304      	adds	r3, #4
 8014ffc:	781b      	ldrb	r3, [r3, #0]
 8014ffe:	f003 0303 	and.w	r3, r3, #3
 8015002:	2b03      	cmp	r3, #3
 8015004:	d105      	bne.n	8015012 <SCSI_StartStopUnit+0x96>
  {
    hmsc->scsi_medium_state = SCSI_MEDIUM_UNLOCKED;
 8015006:	697a      	ldr	r2, [r7, #20]
 8015008:	f248 0362 	movw	r3, #32866	; 0x8062
 801500c:	4413      	add	r3, r2
 801500e:	2200      	movs	r2, #0
 8015010:	701a      	strb	r2, [r3, #0]
  }
  else
  {
    /* .. */
  }
  hmsc->bot_data_length = 0U;
 8015012:	697b      	ldr	r3, [r7, #20]
 8015014:	2200      	movs	r2, #0
 8015016:	60da      	str	r2, [r3, #12]

  return 0;
 8015018:	2300      	movs	r3, #0
}
 801501a:	4618      	mov	r0, r3
 801501c:	3718      	adds	r7, #24
 801501e:	46bd      	mov	sp, r7
 8015020:	bd80      	pop	{r7, pc}

08015022 <SCSI_AllowPreventRemovable>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
static int8_t SCSI_AllowPreventRemovable(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8015022:	b480      	push	{r7}
 8015024:	b087      	sub	sp, #28
 8015026:	af00      	add	r7, sp, #0
 8015028:	60f8      	str	r0, [r7, #12]
 801502a:	460b      	mov	r3, r1
 801502c:	607a      	str	r2, [r7, #4]
 801502e:	72fb      	strb	r3, [r7, #11]
  UNUSED(lun);
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8015030:	68fb      	ldr	r3, [r7, #12]
 8015032:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8015036:	617b      	str	r3, [r7, #20]

  if (params[4] == 0U)
 8015038:	687b      	ldr	r3, [r7, #4]
 801503a:	3304      	adds	r3, #4
 801503c:	781b      	ldrb	r3, [r3, #0]
 801503e:	2b00      	cmp	r3, #0
 8015040:	d106      	bne.n	8015050 <SCSI_AllowPreventRemovable+0x2e>
  {
    hmsc->scsi_medium_state = SCSI_MEDIUM_UNLOCKED;
 8015042:	697a      	ldr	r2, [r7, #20]
 8015044:	f248 0362 	movw	r3, #32866	; 0x8062
 8015048:	4413      	add	r3, r2
 801504a:	2200      	movs	r2, #0
 801504c:	701a      	strb	r2, [r3, #0]
 801504e:	e005      	b.n	801505c <SCSI_AllowPreventRemovable+0x3a>
  }
  else
  {
    hmsc->scsi_medium_state = SCSI_MEDIUM_LOCKED;
 8015050:	697a      	ldr	r2, [r7, #20]
 8015052:	f248 0362 	movw	r3, #32866	; 0x8062
 8015056:	4413      	add	r3, r2
 8015058:	2201      	movs	r2, #1
 801505a:	701a      	strb	r2, [r3, #0]
  }

  hmsc->bot_data_length = 0U;
 801505c:	697b      	ldr	r3, [r7, #20]
 801505e:	2200      	movs	r2, #0
 8015060:	60da      	str	r2, [r3, #12]

  return 0;
 8015062:	2300      	movs	r3, #0
}
 8015064:	4618      	mov	r0, r3
 8015066:	371c      	adds	r7, #28
 8015068:	46bd      	mov	sp, r7
 801506a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801506e:	4770      	bx	lr

08015070 <SCSI_Read10>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
static int8_t SCSI_Read10(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8015070:	b580      	push	{r7, lr}
 8015072:	b086      	sub	sp, #24
 8015074:	af00      	add	r7, sp, #0
 8015076:	60f8      	str	r0, [r7, #12]
 8015078:	460b      	mov	r3, r1
 801507a:	607a      	str	r2, [r7, #4]
 801507c:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 801507e:	68fb      	ldr	r3, [r7, #12]
 8015080:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8015084:	617b      	str	r3, [r7, #20]

  if (hmsc->bot_state == USBD_BOT_IDLE) /* Idle */
 8015086:	697b      	ldr	r3, [r7, #20]
 8015088:	7a1b      	ldrb	r3, [r3, #8]
 801508a:	2b00      	cmp	r3, #0
 801508c:	f040 8094 	bne.w	80151b8 <SCSI_Read10+0x148>
  {
    /* case 10 : Ho <> Di */
    if ((hmsc->cbw.bmFlags & 0x80U) != 0x80U)
 8015090:	697a      	ldr	r2, [r7, #20]
 8015092:	f248 031c 	movw	r3, #32796	; 0x801c
 8015096:	4413      	add	r3, r2
 8015098:	781b      	ldrb	r3, [r3, #0]
 801509a:	b25b      	sxtb	r3, r3
 801509c:	2b00      	cmp	r3, #0
 801509e:	db0c      	blt.n	80150ba <SCSI_Read10+0x4a>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 80150a0:	697a      	ldr	r2, [r7, #20]
 80150a2:	f248 031d 	movw	r3, #32797	; 0x801d
 80150a6:	4413      	add	r3, r2
 80150a8:	7819      	ldrb	r1, [r3, #0]
 80150aa:	2320      	movs	r3, #32
 80150ac:	2205      	movs	r2, #5
 80150ae:	68f8      	ldr	r0, [r7, #12]
 80150b0:	f7ff ff0a 	bl	8014ec8 <SCSI_SenseCode>
      return -1;
 80150b4:	f04f 33ff 	mov.w	r3, #4294967295
 80150b8:	e088      	b.n	80151cc <SCSI_Read10+0x15c>
    }

    if (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED)
 80150ba:	697a      	ldr	r2, [r7, #20]
 80150bc:	f248 0362 	movw	r3, #32866	; 0x8062
 80150c0:	4413      	add	r3, r2
 80150c2:	781b      	ldrb	r3, [r3, #0]
 80150c4:	2b02      	cmp	r3, #2
 80150c6:	d108      	bne.n	80150da <SCSI_Read10+0x6a>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 80150c8:	7af9      	ldrb	r1, [r7, #11]
 80150ca:	233a      	movs	r3, #58	; 0x3a
 80150cc:	2202      	movs	r2, #2
 80150ce:	68f8      	ldr	r0, [r7, #12]
 80150d0:	f7ff fefa 	bl	8014ec8 <SCSI_SenseCode>

      return -1;
 80150d4:	f04f 33ff 	mov.w	r3, #4294967295
 80150d8:	e078      	b.n	80151cc <SCSI_Read10+0x15c>
    }

    if (((USBD_StorageTypeDef *)pdev->pUserData)->IsReady(lun) != 0)
 80150da:	68fb      	ldr	r3, [r7, #12]
 80150dc:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80150e0:	689b      	ldr	r3, [r3, #8]
 80150e2:	7afa      	ldrb	r2, [r7, #11]
 80150e4:	4610      	mov	r0, r2
 80150e6:	4798      	blx	r3
 80150e8:	4603      	mov	r3, r0
 80150ea:	2b00      	cmp	r3, #0
 80150ec:	d008      	beq.n	8015100 <SCSI_Read10+0x90>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 80150ee:	7af9      	ldrb	r1, [r7, #11]
 80150f0:	233a      	movs	r3, #58	; 0x3a
 80150f2:	2202      	movs	r2, #2
 80150f4:	68f8      	ldr	r0, [r7, #12]
 80150f6:	f7ff fee7 	bl	8014ec8 <SCSI_SenseCode>
      return -1;
 80150fa:	f04f 33ff 	mov.w	r3, #4294967295
 80150fe:	e065      	b.n	80151cc <SCSI_Read10+0x15c>
    }

    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 8015100:	687b      	ldr	r3, [r7, #4]
 8015102:	3302      	adds	r3, #2
 8015104:	781b      	ldrb	r3, [r3, #0]
 8015106:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[3] << 16) |
 8015108:	687b      	ldr	r3, [r7, #4]
 801510a:	3303      	adds	r3, #3
 801510c:	781b      	ldrb	r3, [r3, #0]
 801510e:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 8015110:	431a      	orrs	r2, r3
                          ((uint32_t)params[4] <<  8) |
 8015112:	687b      	ldr	r3, [r7, #4]
 8015114:	3304      	adds	r3, #4
 8015116:	781b      	ldrb	r3, [r3, #0]
 8015118:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[3] << 16) |
 801511a:	4313      	orrs	r3, r2
                          (uint32_t)params[5];
 801511c:	687a      	ldr	r2, [r7, #4]
 801511e:	3205      	adds	r2, #5
 8015120:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[4] <<  8) |
 8015122:	431a      	orrs	r2, r3
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 8015124:	6979      	ldr	r1, [r7, #20]
 8015126:	f248 036c 	movw	r3, #32876	; 0x806c
 801512a:	440b      	add	r3, r1
 801512c:	601a      	str	r2, [r3, #0]

    hmsc->scsi_blk_len = ((uint32_t)params[7] <<  8) | (uint32_t)params[8];
 801512e:	687b      	ldr	r3, [r7, #4]
 8015130:	3307      	adds	r3, #7
 8015132:	781b      	ldrb	r3, [r3, #0]
 8015134:	021b      	lsls	r3, r3, #8
 8015136:	687a      	ldr	r2, [r7, #4]
 8015138:	3208      	adds	r2, #8
 801513a:	7812      	ldrb	r2, [r2, #0]
 801513c:	431a      	orrs	r2, r3
 801513e:	6979      	ldr	r1, [r7, #20]
 8015140:	f248 0370 	movw	r3, #32880	; 0x8070
 8015144:	440b      	add	r3, r1
 8015146:	601a      	str	r2, [r3, #0]

    if (SCSI_CheckAddressRange(pdev, lun, hmsc->scsi_blk_addr,
 8015148:	697a      	ldr	r2, [r7, #20]
 801514a:	f248 036c 	movw	r3, #32876	; 0x806c
 801514e:	4413      	add	r3, r2
 8015150:	6818      	ldr	r0, [r3, #0]
 8015152:	697a      	ldr	r2, [r7, #20]
 8015154:	f248 0370 	movw	r3, #32880	; 0x8070
 8015158:	4413      	add	r3, r2
 801515a:	681b      	ldr	r3, [r3, #0]
 801515c:	7af9      	ldrb	r1, [r7, #11]
 801515e:	4602      	mov	r2, r0
 8015160:	68f8      	ldr	r0, [r7, #12]
 8015162:	f000 faeb 	bl	801573c <SCSI_CheckAddressRange>
 8015166:	4603      	mov	r3, r0
 8015168:	2b00      	cmp	r3, #0
 801516a:	da02      	bge.n	8015172 <SCSI_Read10+0x102>
                               hmsc->scsi_blk_len) < 0)
    {
      return -1; /* error */
 801516c:	f04f 33ff 	mov.w	r3, #4294967295
 8015170:	e02c      	b.n	80151cc <SCSI_Read10+0x15c>
    }

    /* cases 4,5 : Hi <> Dn */
    if (hmsc->cbw.dDataLength != (hmsc->scsi_blk_len * hmsc->scsi_blk_size))
 8015172:	697a      	ldr	r2, [r7, #20]
 8015174:	f248 0318 	movw	r3, #32792	; 0x8018
 8015178:	4413      	add	r3, r2
 801517a:	681a      	ldr	r2, [r3, #0]
 801517c:	6979      	ldr	r1, [r7, #20]
 801517e:	f248 0370 	movw	r3, #32880	; 0x8070
 8015182:	440b      	add	r3, r1
 8015184:	6819      	ldr	r1, [r3, #0]
 8015186:	6978      	ldr	r0, [r7, #20]
 8015188:	f248 0364 	movw	r3, #32868	; 0x8064
 801518c:	4403      	add	r3, r0
 801518e:	881b      	ldrh	r3, [r3, #0]
 8015190:	fb03 f301 	mul.w	r3, r3, r1
 8015194:	429a      	cmp	r2, r3
 8015196:	d00c      	beq.n	80151b2 <SCSI_Read10+0x142>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8015198:	697a      	ldr	r2, [r7, #20]
 801519a:	f248 031d 	movw	r3, #32797	; 0x801d
 801519e:	4413      	add	r3, r2
 80151a0:	7819      	ldrb	r1, [r3, #0]
 80151a2:	2320      	movs	r3, #32
 80151a4:	2205      	movs	r2, #5
 80151a6:	68f8      	ldr	r0, [r7, #12]
 80151a8:	f7ff fe8e 	bl	8014ec8 <SCSI_SenseCode>
      return -1;
 80151ac:	f04f 33ff 	mov.w	r3, #4294967295
 80151b0:	e00c      	b.n	80151cc <SCSI_Read10+0x15c>
    }

    hmsc->bot_state = USBD_BOT_DATA_IN;
 80151b2:	697b      	ldr	r3, [r7, #20]
 80151b4:	2202      	movs	r2, #2
 80151b6:	721a      	strb	r2, [r3, #8]
  }
  hmsc->bot_data_length = MSC_MEDIA_PACKET;
 80151b8:	697b      	ldr	r3, [r7, #20]
 80151ba:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80151be:	60da      	str	r2, [r3, #12]

  return SCSI_ProcessRead(pdev, lun);
 80151c0:	7afb      	ldrb	r3, [r7, #11]
 80151c2:	4619      	mov	r1, r3
 80151c4:	68f8      	ldr	r0, [r7, #12]
 80151c6:	f000 fadd 	bl	8015784 <SCSI_ProcessRead>
 80151ca:	4603      	mov	r3, r0
}
 80151cc:	4618      	mov	r0, r3
 80151ce:	3718      	adds	r7, #24
 80151d0:	46bd      	mov	sp, r7
 80151d2:	bd80      	pop	{r7, pc}

080151d4 <SCSI_Read12>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
static int8_t SCSI_Read12(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 80151d4:	b580      	push	{r7, lr}
 80151d6:	b086      	sub	sp, #24
 80151d8:	af00      	add	r7, sp, #0
 80151da:	60f8      	str	r0, [r7, #12]
 80151dc:	460b      	mov	r3, r1
 80151de:	607a      	str	r2, [r7, #4]
 80151e0:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 80151e2:	68fb      	ldr	r3, [r7, #12]
 80151e4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80151e8:	617b      	str	r3, [r7, #20]

  if (hmsc->bot_state == USBD_BOT_IDLE) /* Idle */
 80151ea:	697b      	ldr	r3, [r7, #20]
 80151ec:	7a1b      	ldrb	r3, [r3, #8]
 80151ee:	2b00      	cmp	r3, #0
 80151f0:	f040 809e 	bne.w	8015330 <SCSI_Read12+0x15c>
  {
    /* case 10 : Ho <> Di */
    if ((hmsc->cbw.bmFlags & 0x80U) != 0x80U)
 80151f4:	697a      	ldr	r2, [r7, #20]
 80151f6:	f248 031c 	movw	r3, #32796	; 0x801c
 80151fa:	4413      	add	r3, r2
 80151fc:	781b      	ldrb	r3, [r3, #0]
 80151fe:	b25b      	sxtb	r3, r3
 8015200:	2b00      	cmp	r3, #0
 8015202:	db0c      	blt.n	801521e <SCSI_Read12+0x4a>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8015204:	697a      	ldr	r2, [r7, #20]
 8015206:	f248 031d 	movw	r3, #32797	; 0x801d
 801520a:	4413      	add	r3, r2
 801520c:	7819      	ldrb	r1, [r3, #0]
 801520e:	2320      	movs	r3, #32
 8015210:	2205      	movs	r2, #5
 8015212:	68f8      	ldr	r0, [r7, #12]
 8015214:	f7ff fe58 	bl	8014ec8 <SCSI_SenseCode>
      return -1;
 8015218:	f04f 33ff 	mov.w	r3, #4294967295
 801521c:	e092      	b.n	8015344 <SCSI_Read12+0x170>
    }

    if (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED)
 801521e:	697a      	ldr	r2, [r7, #20]
 8015220:	f248 0362 	movw	r3, #32866	; 0x8062
 8015224:	4413      	add	r3, r2
 8015226:	781b      	ldrb	r3, [r3, #0]
 8015228:	2b02      	cmp	r3, #2
 801522a:	d108      	bne.n	801523e <SCSI_Read12+0x6a>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 801522c:	7af9      	ldrb	r1, [r7, #11]
 801522e:	233a      	movs	r3, #58	; 0x3a
 8015230:	2202      	movs	r2, #2
 8015232:	68f8      	ldr	r0, [r7, #12]
 8015234:	f7ff fe48 	bl	8014ec8 <SCSI_SenseCode>
      return -1;
 8015238:	f04f 33ff 	mov.w	r3, #4294967295
 801523c:	e082      	b.n	8015344 <SCSI_Read12+0x170>
    }

    if (((USBD_StorageTypeDef *)pdev->pUserData)->IsReady(lun) != 0)
 801523e:	68fb      	ldr	r3, [r7, #12]
 8015240:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8015244:	689b      	ldr	r3, [r3, #8]
 8015246:	7afa      	ldrb	r2, [r7, #11]
 8015248:	4610      	mov	r0, r2
 801524a:	4798      	blx	r3
 801524c:	4603      	mov	r3, r0
 801524e:	2b00      	cmp	r3, #0
 8015250:	d008      	beq.n	8015264 <SCSI_Read12+0x90>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 8015252:	7af9      	ldrb	r1, [r7, #11]
 8015254:	233a      	movs	r3, #58	; 0x3a
 8015256:	2202      	movs	r2, #2
 8015258:	68f8      	ldr	r0, [r7, #12]
 801525a:	f7ff fe35 	bl	8014ec8 <SCSI_SenseCode>
      return -1;
 801525e:	f04f 33ff 	mov.w	r3, #4294967295
 8015262:	e06f      	b.n	8015344 <SCSI_Read12+0x170>
    }

    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 8015264:	687b      	ldr	r3, [r7, #4]
 8015266:	3302      	adds	r3, #2
 8015268:	781b      	ldrb	r3, [r3, #0]
 801526a:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[3] << 16) |
 801526c:	687b      	ldr	r3, [r7, #4]
 801526e:	3303      	adds	r3, #3
 8015270:	781b      	ldrb	r3, [r3, #0]
 8015272:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 8015274:	431a      	orrs	r2, r3
                          ((uint32_t)params[4] <<  8) |
 8015276:	687b      	ldr	r3, [r7, #4]
 8015278:	3304      	adds	r3, #4
 801527a:	781b      	ldrb	r3, [r3, #0]
 801527c:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[3] << 16) |
 801527e:	4313      	orrs	r3, r2
                          (uint32_t)params[5];
 8015280:	687a      	ldr	r2, [r7, #4]
 8015282:	3205      	adds	r2, #5
 8015284:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[4] <<  8) |
 8015286:	431a      	orrs	r2, r3
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 8015288:	6979      	ldr	r1, [r7, #20]
 801528a:	f248 036c 	movw	r3, #32876	; 0x806c
 801528e:	440b      	add	r3, r1
 8015290:	601a      	str	r2, [r3, #0]

    hmsc->scsi_blk_len = ((uint32_t)params[6] << 24) |
 8015292:	687b      	ldr	r3, [r7, #4]
 8015294:	3306      	adds	r3, #6
 8015296:	781b      	ldrb	r3, [r3, #0]
 8015298:	061a      	lsls	r2, r3, #24
                         ((uint32_t)params[7] << 16) |
 801529a:	687b      	ldr	r3, [r7, #4]
 801529c:	3307      	adds	r3, #7
 801529e:	781b      	ldrb	r3, [r3, #0]
 80152a0:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_len = ((uint32_t)params[6] << 24) |
 80152a2:	431a      	orrs	r2, r3
                         ((uint32_t)params[8] << 8) |
 80152a4:	687b      	ldr	r3, [r7, #4]
 80152a6:	3308      	adds	r3, #8
 80152a8:	781b      	ldrb	r3, [r3, #0]
 80152aa:	021b      	lsls	r3, r3, #8
                         ((uint32_t)params[7] << 16) |
 80152ac:	4313      	orrs	r3, r2
                         (uint32_t)params[9];
 80152ae:	687a      	ldr	r2, [r7, #4]
 80152b0:	3209      	adds	r2, #9
 80152b2:	7812      	ldrb	r2, [r2, #0]
                         ((uint32_t)params[8] << 8) |
 80152b4:	431a      	orrs	r2, r3
    hmsc->scsi_blk_len = ((uint32_t)params[6] << 24) |
 80152b6:	6979      	ldr	r1, [r7, #20]
 80152b8:	f248 0370 	movw	r3, #32880	; 0x8070
 80152bc:	440b      	add	r3, r1
 80152be:	601a      	str	r2, [r3, #0]

    if (SCSI_CheckAddressRange(pdev, lun, hmsc->scsi_blk_addr,
 80152c0:	697a      	ldr	r2, [r7, #20]
 80152c2:	f248 036c 	movw	r3, #32876	; 0x806c
 80152c6:	4413      	add	r3, r2
 80152c8:	6818      	ldr	r0, [r3, #0]
 80152ca:	697a      	ldr	r2, [r7, #20]
 80152cc:	f248 0370 	movw	r3, #32880	; 0x8070
 80152d0:	4413      	add	r3, r2
 80152d2:	681b      	ldr	r3, [r3, #0]
 80152d4:	7af9      	ldrb	r1, [r7, #11]
 80152d6:	4602      	mov	r2, r0
 80152d8:	68f8      	ldr	r0, [r7, #12]
 80152da:	f000 fa2f 	bl	801573c <SCSI_CheckAddressRange>
 80152de:	4603      	mov	r3, r0
 80152e0:	2b00      	cmp	r3, #0
 80152e2:	da02      	bge.n	80152ea <SCSI_Read12+0x116>
                               hmsc->scsi_blk_len) < 0)
    {
      return -1; /* error */
 80152e4:	f04f 33ff 	mov.w	r3, #4294967295
 80152e8:	e02c      	b.n	8015344 <SCSI_Read12+0x170>
    }

    /* cases 4,5 : Hi <> Dn */
    if (hmsc->cbw.dDataLength != (hmsc->scsi_blk_len * hmsc->scsi_blk_size))
 80152ea:	697a      	ldr	r2, [r7, #20]
 80152ec:	f248 0318 	movw	r3, #32792	; 0x8018
 80152f0:	4413      	add	r3, r2
 80152f2:	681a      	ldr	r2, [r3, #0]
 80152f4:	6979      	ldr	r1, [r7, #20]
 80152f6:	f248 0370 	movw	r3, #32880	; 0x8070
 80152fa:	440b      	add	r3, r1
 80152fc:	6819      	ldr	r1, [r3, #0]
 80152fe:	6978      	ldr	r0, [r7, #20]
 8015300:	f248 0364 	movw	r3, #32868	; 0x8064
 8015304:	4403      	add	r3, r0
 8015306:	881b      	ldrh	r3, [r3, #0]
 8015308:	fb03 f301 	mul.w	r3, r3, r1
 801530c:	429a      	cmp	r2, r3
 801530e:	d00c      	beq.n	801532a <SCSI_Read12+0x156>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8015310:	697a      	ldr	r2, [r7, #20]
 8015312:	f248 031d 	movw	r3, #32797	; 0x801d
 8015316:	4413      	add	r3, r2
 8015318:	7819      	ldrb	r1, [r3, #0]
 801531a:	2320      	movs	r3, #32
 801531c:	2205      	movs	r2, #5
 801531e:	68f8      	ldr	r0, [r7, #12]
 8015320:	f7ff fdd2 	bl	8014ec8 <SCSI_SenseCode>
      return -1;
 8015324:	f04f 33ff 	mov.w	r3, #4294967295
 8015328:	e00c      	b.n	8015344 <SCSI_Read12+0x170>
    }

    hmsc->bot_state = USBD_BOT_DATA_IN;
 801532a:	697b      	ldr	r3, [r7, #20]
 801532c:	2202      	movs	r2, #2
 801532e:	721a      	strb	r2, [r3, #8]
  }
  hmsc->bot_data_length = MSC_MEDIA_PACKET;
 8015330:	697b      	ldr	r3, [r7, #20]
 8015332:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8015336:	60da      	str	r2, [r3, #12]

  return SCSI_ProcessRead(pdev, lun);
 8015338:	7afb      	ldrb	r3, [r7, #11]
 801533a:	4619      	mov	r1, r3
 801533c:	68f8      	ldr	r0, [r7, #12]
 801533e:	f000 fa21 	bl	8015784 <SCSI_ProcessRead>
 8015342:	4603      	mov	r3, r0
}
 8015344:	4618      	mov	r0, r3
 8015346:	3718      	adds	r7, #24
 8015348:	46bd      	mov	sp, r7
 801534a:	bd80      	pop	{r7, pc}

0801534c <SCSI_Write10>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
static int8_t SCSI_Write10(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 801534c:	b580      	push	{r7, lr}
 801534e:	b086      	sub	sp, #24
 8015350:	af00      	add	r7, sp, #0
 8015352:	60f8      	str	r0, [r7, #12]
 8015354:	460b      	mov	r3, r1
 8015356:	607a      	str	r2, [r7, #4]
 8015358:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 801535a:	68fb      	ldr	r3, [r7, #12]
 801535c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8015360:	617b      	str	r3, [r7, #20]
  uint32_t len;

  if (hmsc->bot_state == USBD_BOT_IDLE) /* Idle */
 8015362:	697b      	ldr	r3, [r7, #20]
 8015364:	7a1b      	ldrb	r3, [r3, #8]
 8015366:	2b00      	cmp	r3, #0
 8015368:	f040 80be 	bne.w	80154e8 <SCSI_Write10+0x19c>
  {
    if (hmsc->cbw.dDataLength == 0U)
 801536c:	697a      	ldr	r2, [r7, #20]
 801536e:	f248 0318 	movw	r3, #32792	; 0x8018
 8015372:	4413      	add	r3, r2
 8015374:	681b      	ldr	r3, [r3, #0]
 8015376:	2b00      	cmp	r3, #0
 8015378:	d10c      	bne.n	8015394 <SCSI_Write10+0x48>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 801537a:	697a      	ldr	r2, [r7, #20]
 801537c:	f248 031d 	movw	r3, #32797	; 0x801d
 8015380:	4413      	add	r3, r2
 8015382:	7819      	ldrb	r1, [r3, #0]
 8015384:	2320      	movs	r3, #32
 8015386:	2205      	movs	r2, #5
 8015388:	68f8      	ldr	r0, [r7, #12]
 801538a:	f7ff fd9d 	bl	8014ec8 <SCSI_SenseCode>
      return -1;
 801538e:	f04f 33ff 	mov.w	r3, #4294967295
 8015392:	e0af      	b.n	80154f4 <SCSI_Write10+0x1a8>
    }

    /* case 8 : Hi <> Do */
    if ((hmsc->cbw.bmFlags & 0x80U) == 0x80U)
 8015394:	697a      	ldr	r2, [r7, #20]
 8015396:	f248 031c 	movw	r3, #32796	; 0x801c
 801539a:	4413      	add	r3, r2
 801539c:	781b      	ldrb	r3, [r3, #0]
 801539e:	b25b      	sxtb	r3, r3
 80153a0:	2b00      	cmp	r3, #0
 80153a2:	da0c      	bge.n	80153be <SCSI_Write10+0x72>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 80153a4:	697a      	ldr	r2, [r7, #20]
 80153a6:	f248 031d 	movw	r3, #32797	; 0x801d
 80153aa:	4413      	add	r3, r2
 80153ac:	7819      	ldrb	r1, [r3, #0]
 80153ae:	2320      	movs	r3, #32
 80153b0:	2205      	movs	r2, #5
 80153b2:	68f8      	ldr	r0, [r7, #12]
 80153b4:	f7ff fd88 	bl	8014ec8 <SCSI_SenseCode>
      return -1;
 80153b8:	f04f 33ff 	mov.w	r3, #4294967295
 80153bc:	e09a      	b.n	80154f4 <SCSI_Write10+0x1a8>
    }

    /* Check whether Media is ready */
    if (((USBD_StorageTypeDef *)pdev->pUserData)->IsReady(lun) != 0)
 80153be:	68fb      	ldr	r3, [r7, #12]
 80153c0:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80153c4:	689b      	ldr	r3, [r3, #8]
 80153c6:	7afa      	ldrb	r2, [r7, #11]
 80153c8:	4610      	mov	r0, r2
 80153ca:	4798      	blx	r3
 80153cc:	4603      	mov	r3, r0
 80153ce:	2b00      	cmp	r3, #0
 80153d0:	d008      	beq.n	80153e4 <SCSI_Write10+0x98>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 80153d2:	7af9      	ldrb	r1, [r7, #11]
 80153d4:	233a      	movs	r3, #58	; 0x3a
 80153d6:	2202      	movs	r2, #2
 80153d8:	68f8      	ldr	r0, [r7, #12]
 80153da:	f7ff fd75 	bl	8014ec8 <SCSI_SenseCode>
      return -1;
 80153de:	f04f 33ff 	mov.w	r3, #4294967295
 80153e2:	e087      	b.n	80154f4 <SCSI_Write10+0x1a8>
    }

    /* Check If media is write-protected */
    if (((USBD_StorageTypeDef *)pdev->pUserData)->IsWriteProtected(lun) != 0)
 80153e4:	68fb      	ldr	r3, [r7, #12]
 80153e6:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80153ea:	68db      	ldr	r3, [r3, #12]
 80153ec:	7afa      	ldrb	r2, [r7, #11]
 80153ee:	4610      	mov	r0, r2
 80153f0:	4798      	blx	r3
 80153f2:	4603      	mov	r3, r0
 80153f4:	2b00      	cmp	r3, #0
 80153f6:	d008      	beq.n	801540a <SCSI_Write10+0xbe>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, WRITE_PROTECTED);
 80153f8:	7af9      	ldrb	r1, [r7, #11]
 80153fa:	2327      	movs	r3, #39	; 0x27
 80153fc:	2202      	movs	r2, #2
 80153fe:	68f8      	ldr	r0, [r7, #12]
 8015400:	f7ff fd62 	bl	8014ec8 <SCSI_SenseCode>
      return -1;
 8015404:	f04f 33ff 	mov.w	r3, #4294967295
 8015408:	e074      	b.n	80154f4 <SCSI_Write10+0x1a8>
    }

    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 801540a:	687b      	ldr	r3, [r7, #4]
 801540c:	3302      	adds	r3, #2
 801540e:	781b      	ldrb	r3, [r3, #0]
 8015410:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[3] << 16) |
 8015412:	687b      	ldr	r3, [r7, #4]
 8015414:	3303      	adds	r3, #3
 8015416:	781b      	ldrb	r3, [r3, #0]
 8015418:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 801541a:	431a      	orrs	r2, r3
                          ((uint32_t)params[4] << 8) |
 801541c:	687b      	ldr	r3, [r7, #4]
 801541e:	3304      	adds	r3, #4
 8015420:	781b      	ldrb	r3, [r3, #0]
 8015422:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[3] << 16) |
 8015424:	4313      	orrs	r3, r2
                          (uint32_t)params[5];
 8015426:	687a      	ldr	r2, [r7, #4]
 8015428:	3205      	adds	r2, #5
 801542a:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[4] << 8) |
 801542c:	431a      	orrs	r2, r3
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 801542e:	6979      	ldr	r1, [r7, #20]
 8015430:	f248 036c 	movw	r3, #32876	; 0x806c
 8015434:	440b      	add	r3, r1
 8015436:	601a      	str	r2, [r3, #0]

    hmsc->scsi_blk_len = ((uint32_t)params[7] << 8) |
 8015438:	687b      	ldr	r3, [r7, #4]
 801543a:	3307      	adds	r3, #7
 801543c:	781b      	ldrb	r3, [r3, #0]
 801543e:	021b      	lsls	r3, r3, #8
                         (uint32_t)params[8];
 8015440:	687a      	ldr	r2, [r7, #4]
 8015442:	3208      	adds	r2, #8
 8015444:	7812      	ldrb	r2, [r2, #0]
    hmsc->scsi_blk_len = ((uint32_t)params[7] << 8) |
 8015446:	431a      	orrs	r2, r3
 8015448:	6979      	ldr	r1, [r7, #20]
 801544a:	f248 0370 	movw	r3, #32880	; 0x8070
 801544e:	440b      	add	r3, r1
 8015450:	601a      	str	r2, [r3, #0]

    /* check if LBA address is in the right range */
    if (SCSI_CheckAddressRange(pdev, lun, hmsc->scsi_blk_addr,
 8015452:	697a      	ldr	r2, [r7, #20]
 8015454:	f248 036c 	movw	r3, #32876	; 0x806c
 8015458:	4413      	add	r3, r2
 801545a:	6818      	ldr	r0, [r3, #0]
 801545c:	697a      	ldr	r2, [r7, #20]
 801545e:	f248 0370 	movw	r3, #32880	; 0x8070
 8015462:	4413      	add	r3, r2
 8015464:	681b      	ldr	r3, [r3, #0]
 8015466:	7af9      	ldrb	r1, [r7, #11]
 8015468:	4602      	mov	r2, r0
 801546a:	68f8      	ldr	r0, [r7, #12]
 801546c:	f000 f966 	bl	801573c <SCSI_CheckAddressRange>
 8015470:	4603      	mov	r3, r0
 8015472:	2b00      	cmp	r3, #0
 8015474:	da02      	bge.n	801547c <SCSI_Write10+0x130>
                               hmsc->scsi_blk_len) < 0)
    {
      return -1; /* error */
 8015476:	f04f 33ff 	mov.w	r3, #4294967295
 801547a:	e03b      	b.n	80154f4 <SCSI_Write10+0x1a8>
    }

    len = hmsc->scsi_blk_len * hmsc->scsi_blk_size;
 801547c:	697a      	ldr	r2, [r7, #20]
 801547e:	f248 0370 	movw	r3, #32880	; 0x8070
 8015482:	4413      	add	r3, r2
 8015484:	681a      	ldr	r2, [r3, #0]
 8015486:	6979      	ldr	r1, [r7, #20]
 8015488:	f248 0364 	movw	r3, #32868	; 0x8064
 801548c:	440b      	add	r3, r1
 801548e:	881b      	ldrh	r3, [r3, #0]
 8015490:	fb03 f302 	mul.w	r3, r3, r2
 8015494:	613b      	str	r3, [r7, #16]

    /* cases 3,11,13 : Hn,Ho <> D0 */
    if (hmsc->cbw.dDataLength != len)
 8015496:	697a      	ldr	r2, [r7, #20]
 8015498:	f248 0318 	movw	r3, #32792	; 0x8018
 801549c:	4413      	add	r3, r2
 801549e:	681b      	ldr	r3, [r3, #0]
 80154a0:	693a      	ldr	r2, [r7, #16]
 80154a2:	429a      	cmp	r2, r3
 80154a4:	d00c      	beq.n	80154c0 <SCSI_Write10+0x174>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 80154a6:	697a      	ldr	r2, [r7, #20]
 80154a8:	f248 031d 	movw	r3, #32797	; 0x801d
 80154ac:	4413      	add	r3, r2
 80154ae:	7819      	ldrb	r1, [r3, #0]
 80154b0:	2320      	movs	r3, #32
 80154b2:	2205      	movs	r2, #5
 80154b4:	68f8      	ldr	r0, [r7, #12]
 80154b6:	f7ff fd07 	bl	8014ec8 <SCSI_SenseCode>
      return -1;
 80154ba:	f04f 33ff 	mov.w	r3, #4294967295
 80154be:	e019      	b.n	80154f4 <SCSI_Write10+0x1a8>
    }

    len = MIN(len, MSC_MEDIA_PACKET);
 80154c0:	693b      	ldr	r3, [r7, #16]
 80154c2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80154c6:	bf28      	it	cs
 80154c8:	f44f 4300 	movcs.w	r3, #32768	; 0x8000
 80154cc:	613b      	str	r3, [r7, #16]

    /* Prepare EP to receive first data packet */
    hmsc->bot_state = USBD_BOT_DATA_OUT;
 80154ce:	697b      	ldr	r3, [r7, #20]
 80154d0:	2201      	movs	r2, #1
 80154d2:	721a      	strb	r2, [r3, #8]
    (void)USBD_LL_PrepareReceive(pdev, MSC_EPOUT_ADDR, hmsc->bot_data, len);
 80154d4:	697b      	ldr	r3, [r7, #20]
 80154d6:	f103 0210 	add.w	r2, r3, #16
 80154da:	693b      	ldr	r3, [r7, #16]
 80154dc:	2101      	movs	r1, #1
 80154de:	68f8      	ldr	r0, [r7, #12]
 80154e0:	f004 fb19 	bl	8019b16 <USBD_LL_PrepareReceive>
  else /* Write Process ongoing */
  {
    return SCSI_ProcessWrite(pdev, lun);
  }

  return 0;
 80154e4:	2300      	movs	r3, #0
 80154e6:	e005      	b.n	80154f4 <SCSI_Write10+0x1a8>
    return SCSI_ProcessWrite(pdev, lun);
 80154e8:	7afb      	ldrb	r3, [r7, #11]
 80154ea:	4619      	mov	r1, r3
 80154ec:	68f8      	ldr	r0, [r7, #12]
 80154ee:	f000 f9d7 	bl	80158a0 <SCSI_ProcessWrite>
 80154f2:	4603      	mov	r3, r0
}
 80154f4:	4618      	mov	r0, r3
 80154f6:	3718      	adds	r7, #24
 80154f8:	46bd      	mov	sp, r7
 80154fa:	bd80      	pop	{r7, pc}

080154fc <SCSI_Write12>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
static int8_t SCSI_Write12(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 80154fc:	b580      	push	{r7, lr}
 80154fe:	b086      	sub	sp, #24
 8015500:	af00      	add	r7, sp, #0
 8015502:	60f8      	str	r0, [r7, #12]
 8015504:	460b      	mov	r3, r1
 8015506:	607a      	str	r2, [r7, #4]
 8015508:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 801550a:	68fb      	ldr	r3, [r7, #12]
 801550c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8015510:	617b      	str	r3, [r7, #20]
  uint32_t len;

  if (hmsc->bot_state == USBD_BOT_IDLE) /* Idle */
 8015512:	697b      	ldr	r3, [r7, #20]
 8015514:	7a1b      	ldrb	r3, [r3, #8]
 8015516:	2b00      	cmp	r3, #0
 8015518:	f040 80ce 	bne.w	80156b8 <SCSI_Write12+0x1bc>
  {
    if (hmsc->cbw.dDataLength == 0U)
 801551c:	697a      	ldr	r2, [r7, #20]
 801551e:	f248 0318 	movw	r3, #32792	; 0x8018
 8015522:	4413      	add	r3, r2
 8015524:	681b      	ldr	r3, [r3, #0]
 8015526:	2b00      	cmp	r3, #0
 8015528:	d10c      	bne.n	8015544 <SCSI_Write12+0x48>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 801552a:	697a      	ldr	r2, [r7, #20]
 801552c:	f248 031d 	movw	r3, #32797	; 0x801d
 8015530:	4413      	add	r3, r2
 8015532:	7819      	ldrb	r1, [r3, #0]
 8015534:	2320      	movs	r3, #32
 8015536:	2205      	movs	r2, #5
 8015538:	68f8      	ldr	r0, [r7, #12]
 801553a:	f7ff fcc5 	bl	8014ec8 <SCSI_SenseCode>
      return -1;
 801553e:	f04f 33ff 	mov.w	r3, #4294967295
 8015542:	e0bf      	b.n	80156c4 <SCSI_Write12+0x1c8>
    }

    /* case 8 : Hi <> Do */
    if ((hmsc->cbw.bmFlags & 0x80U) == 0x80U)
 8015544:	697a      	ldr	r2, [r7, #20]
 8015546:	f248 031c 	movw	r3, #32796	; 0x801c
 801554a:	4413      	add	r3, r2
 801554c:	781b      	ldrb	r3, [r3, #0]
 801554e:	b25b      	sxtb	r3, r3
 8015550:	2b00      	cmp	r3, #0
 8015552:	da0c      	bge.n	801556e <SCSI_Write12+0x72>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8015554:	697a      	ldr	r2, [r7, #20]
 8015556:	f248 031d 	movw	r3, #32797	; 0x801d
 801555a:	4413      	add	r3, r2
 801555c:	7819      	ldrb	r1, [r3, #0]
 801555e:	2320      	movs	r3, #32
 8015560:	2205      	movs	r2, #5
 8015562:	68f8      	ldr	r0, [r7, #12]
 8015564:	f7ff fcb0 	bl	8014ec8 <SCSI_SenseCode>
      return -1;
 8015568:	f04f 33ff 	mov.w	r3, #4294967295
 801556c:	e0aa      	b.n	80156c4 <SCSI_Write12+0x1c8>
    }

    /* Check whether Media is ready */
    if (((USBD_StorageTypeDef *)pdev->pUserData)->IsReady(lun) != 0)
 801556e:	68fb      	ldr	r3, [r7, #12]
 8015570:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8015574:	689b      	ldr	r3, [r3, #8]
 8015576:	7afa      	ldrb	r2, [r7, #11]
 8015578:	4610      	mov	r0, r2
 801557a:	4798      	blx	r3
 801557c:	4603      	mov	r3, r0
 801557e:	2b00      	cmp	r3, #0
 8015580:	d00b      	beq.n	801559a <SCSI_Write12+0x9e>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 8015582:	7af9      	ldrb	r1, [r7, #11]
 8015584:	233a      	movs	r3, #58	; 0x3a
 8015586:	2202      	movs	r2, #2
 8015588:	68f8      	ldr	r0, [r7, #12]
 801558a:	f7ff fc9d 	bl	8014ec8 <SCSI_SenseCode>
      hmsc->bot_state = USBD_BOT_NO_DATA;
 801558e:	697b      	ldr	r3, [r7, #20]
 8015590:	2205      	movs	r2, #5
 8015592:	721a      	strb	r2, [r3, #8]
      return -1;
 8015594:	f04f 33ff 	mov.w	r3, #4294967295
 8015598:	e094      	b.n	80156c4 <SCSI_Write12+0x1c8>
    }

    /* Check If media is write-protected */
    if (((USBD_StorageTypeDef *)pdev->pUserData)->IsWriteProtected(lun) != 0)
 801559a:	68fb      	ldr	r3, [r7, #12]
 801559c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80155a0:	68db      	ldr	r3, [r3, #12]
 80155a2:	7afa      	ldrb	r2, [r7, #11]
 80155a4:	4610      	mov	r0, r2
 80155a6:	4798      	blx	r3
 80155a8:	4603      	mov	r3, r0
 80155aa:	2b00      	cmp	r3, #0
 80155ac:	d00b      	beq.n	80155c6 <SCSI_Write12+0xca>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, WRITE_PROTECTED);
 80155ae:	7af9      	ldrb	r1, [r7, #11]
 80155b0:	2327      	movs	r3, #39	; 0x27
 80155b2:	2202      	movs	r2, #2
 80155b4:	68f8      	ldr	r0, [r7, #12]
 80155b6:	f7ff fc87 	bl	8014ec8 <SCSI_SenseCode>
      hmsc->bot_state = USBD_BOT_NO_DATA;
 80155ba:	697b      	ldr	r3, [r7, #20]
 80155bc:	2205      	movs	r2, #5
 80155be:	721a      	strb	r2, [r3, #8]
      return -1;
 80155c0:	f04f 33ff 	mov.w	r3, #4294967295
 80155c4:	e07e      	b.n	80156c4 <SCSI_Write12+0x1c8>
    }

    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 80155c6:	687b      	ldr	r3, [r7, #4]
 80155c8:	3302      	adds	r3, #2
 80155ca:	781b      	ldrb	r3, [r3, #0]
 80155cc:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[3] << 16) |
 80155ce:	687b      	ldr	r3, [r7, #4]
 80155d0:	3303      	adds	r3, #3
 80155d2:	781b      	ldrb	r3, [r3, #0]
 80155d4:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 80155d6:	431a      	orrs	r2, r3
                          ((uint32_t)params[4] << 8) |
 80155d8:	687b      	ldr	r3, [r7, #4]
 80155da:	3304      	adds	r3, #4
 80155dc:	781b      	ldrb	r3, [r3, #0]
 80155de:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[3] << 16) |
 80155e0:	4313      	orrs	r3, r2
                          (uint32_t)params[5];
 80155e2:	687a      	ldr	r2, [r7, #4]
 80155e4:	3205      	adds	r2, #5
 80155e6:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[4] << 8) |
 80155e8:	431a      	orrs	r2, r3
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 80155ea:	6979      	ldr	r1, [r7, #20]
 80155ec:	f248 036c 	movw	r3, #32876	; 0x806c
 80155f0:	440b      	add	r3, r1
 80155f2:	601a      	str	r2, [r3, #0]

    hmsc->scsi_blk_len = ((uint32_t)params[6] << 24) |
 80155f4:	687b      	ldr	r3, [r7, #4]
 80155f6:	3306      	adds	r3, #6
 80155f8:	781b      	ldrb	r3, [r3, #0]
 80155fa:	061a      	lsls	r2, r3, #24
                         ((uint32_t)params[7] << 16) |
 80155fc:	687b      	ldr	r3, [r7, #4]
 80155fe:	3307      	adds	r3, #7
 8015600:	781b      	ldrb	r3, [r3, #0]
 8015602:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_len = ((uint32_t)params[6] << 24) |
 8015604:	431a      	orrs	r2, r3
                         ((uint32_t)params[8] << 8) |
 8015606:	687b      	ldr	r3, [r7, #4]
 8015608:	3308      	adds	r3, #8
 801560a:	781b      	ldrb	r3, [r3, #0]
 801560c:	021b      	lsls	r3, r3, #8
                         ((uint32_t)params[7] << 16) |
 801560e:	4313      	orrs	r3, r2
                         (uint32_t)params[9];
 8015610:	687a      	ldr	r2, [r7, #4]
 8015612:	3209      	adds	r2, #9
 8015614:	7812      	ldrb	r2, [r2, #0]
                         ((uint32_t)params[8] << 8) |
 8015616:	431a      	orrs	r2, r3
    hmsc->scsi_blk_len = ((uint32_t)params[6] << 24) |
 8015618:	6979      	ldr	r1, [r7, #20]
 801561a:	f248 0370 	movw	r3, #32880	; 0x8070
 801561e:	440b      	add	r3, r1
 8015620:	601a      	str	r2, [r3, #0]

    /* check if LBA address is in the right range */
    if (SCSI_CheckAddressRange(pdev, lun, hmsc->scsi_blk_addr,
 8015622:	697a      	ldr	r2, [r7, #20]
 8015624:	f248 036c 	movw	r3, #32876	; 0x806c
 8015628:	4413      	add	r3, r2
 801562a:	6818      	ldr	r0, [r3, #0]
 801562c:	697a      	ldr	r2, [r7, #20]
 801562e:	f248 0370 	movw	r3, #32880	; 0x8070
 8015632:	4413      	add	r3, r2
 8015634:	681b      	ldr	r3, [r3, #0]
 8015636:	7af9      	ldrb	r1, [r7, #11]
 8015638:	4602      	mov	r2, r0
 801563a:	68f8      	ldr	r0, [r7, #12]
 801563c:	f000 f87e 	bl	801573c <SCSI_CheckAddressRange>
 8015640:	4603      	mov	r3, r0
 8015642:	2b00      	cmp	r3, #0
 8015644:	da02      	bge.n	801564c <SCSI_Write12+0x150>
                               hmsc->scsi_blk_len) < 0)
    {
      return -1; /* error */
 8015646:	f04f 33ff 	mov.w	r3, #4294967295
 801564a:	e03b      	b.n	80156c4 <SCSI_Write12+0x1c8>
    }

    len = hmsc->scsi_blk_len * hmsc->scsi_blk_size;
 801564c:	697a      	ldr	r2, [r7, #20]
 801564e:	f248 0370 	movw	r3, #32880	; 0x8070
 8015652:	4413      	add	r3, r2
 8015654:	681a      	ldr	r2, [r3, #0]
 8015656:	6979      	ldr	r1, [r7, #20]
 8015658:	f248 0364 	movw	r3, #32868	; 0x8064
 801565c:	440b      	add	r3, r1
 801565e:	881b      	ldrh	r3, [r3, #0]
 8015660:	fb03 f302 	mul.w	r3, r3, r2
 8015664:	613b      	str	r3, [r7, #16]

    /* cases 3,11,13 : Hn,Ho <> D0 */
    if (hmsc->cbw.dDataLength != len)
 8015666:	697a      	ldr	r2, [r7, #20]
 8015668:	f248 0318 	movw	r3, #32792	; 0x8018
 801566c:	4413      	add	r3, r2
 801566e:	681b      	ldr	r3, [r3, #0]
 8015670:	693a      	ldr	r2, [r7, #16]
 8015672:	429a      	cmp	r2, r3
 8015674:	d00c      	beq.n	8015690 <SCSI_Write12+0x194>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8015676:	697a      	ldr	r2, [r7, #20]
 8015678:	f248 031d 	movw	r3, #32797	; 0x801d
 801567c:	4413      	add	r3, r2
 801567e:	7819      	ldrb	r1, [r3, #0]
 8015680:	2320      	movs	r3, #32
 8015682:	2205      	movs	r2, #5
 8015684:	68f8      	ldr	r0, [r7, #12]
 8015686:	f7ff fc1f 	bl	8014ec8 <SCSI_SenseCode>
      return -1;
 801568a:	f04f 33ff 	mov.w	r3, #4294967295
 801568e:	e019      	b.n	80156c4 <SCSI_Write12+0x1c8>
    }

    len = MIN(len, MSC_MEDIA_PACKET);
 8015690:	693b      	ldr	r3, [r7, #16]
 8015692:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8015696:	bf28      	it	cs
 8015698:	f44f 4300 	movcs.w	r3, #32768	; 0x8000
 801569c:	613b      	str	r3, [r7, #16]

    /* Prepare EP to receive first data packet */
    hmsc->bot_state = USBD_BOT_DATA_OUT;
 801569e:	697b      	ldr	r3, [r7, #20]
 80156a0:	2201      	movs	r2, #1
 80156a2:	721a      	strb	r2, [r3, #8]
    (void)USBD_LL_PrepareReceive(pdev, MSC_EPOUT_ADDR, hmsc->bot_data, len);
 80156a4:	697b      	ldr	r3, [r7, #20]
 80156a6:	f103 0210 	add.w	r2, r3, #16
 80156aa:	693b      	ldr	r3, [r7, #16]
 80156ac:	2101      	movs	r1, #1
 80156ae:	68f8      	ldr	r0, [r7, #12]
 80156b0:	f004 fa31 	bl	8019b16 <USBD_LL_PrepareReceive>
  else /* Write Process ongoing */
  {
    return SCSI_ProcessWrite(pdev, lun);
  }

  return 0;
 80156b4:	2300      	movs	r3, #0
 80156b6:	e005      	b.n	80156c4 <SCSI_Write12+0x1c8>
    return SCSI_ProcessWrite(pdev, lun);
 80156b8:	7afb      	ldrb	r3, [r7, #11]
 80156ba:	4619      	mov	r1, r3
 80156bc:	68f8      	ldr	r0, [r7, #12]
 80156be:	f000 f8ef 	bl	80158a0 <SCSI_ProcessWrite>
 80156c2:	4603      	mov	r3, r0
}
 80156c4:	4618      	mov	r0, r3
 80156c6:	3718      	adds	r7, #24
 80156c8:	46bd      	mov	sp, r7
 80156ca:	bd80      	pop	{r7, pc}

080156cc <SCSI_Verify10>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
static int8_t SCSI_Verify10(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 80156cc:	b580      	push	{r7, lr}
 80156ce:	b086      	sub	sp, #24
 80156d0:	af00      	add	r7, sp, #0
 80156d2:	60f8      	str	r0, [r7, #12]
 80156d4:	460b      	mov	r3, r1
 80156d6:	607a      	str	r2, [r7, #4]
 80156d8:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 80156da:	68fb      	ldr	r3, [r7, #12]
 80156dc:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80156e0:	617b      	str	r3, [r7, #20]

  if ((params[1] & 0x02U) == 0x02U)
 80156e2:	687b      	ldr	r3, [r7, #4]
 80156e4:	3301      	adds	r3, #1
 80156e6:	781b      	ldrb	r3, [r3, #0]
 80156e8:	f003 0302 	and.w	r3, r3, #2
 80156ec:	2b00      	cmp	r3, #0
 80156ee:	d008      	beq.n	8015702 <SCSI_Verify10+0x36>
  {
    SCSI_SenseCode(pdev, lun, ILLEGAL_REQUEST, INVALID_FIELED_IN_COMMAND);
 80156f0:	7af9      	ldrb	r1, [r7, #11]
 80156f2:	2324      	movs	r3, #36	; 0x24
 80156f4:	2205      	movs	r2, #5
 80156f6:	68f8      	ldr	r0, [r7, #12]
 80156f8:	f7ff fbe6 	bl	8014ec8 <SCSI_SenseCode>
    return -1; /* Error, Verify Mode Not supported*/
 80156fc:	f04f 33ff 	mov.w	r3, #4294967295
 8015700:	e018      	b.n	8015734 <SCSI_Verify10+0x68>
  }

  if (SCSI_CheckAddressRange(pdev, lun, hmsc->scsi_blk_addr, hmsc->scsi_blk_len) < 0)
 8015702:	697a      	ldr	r2, [r7, #20]
 8015704:	f248 036c 	movw	r3, #32876	; 0x806c
 8015708:	4413      	add	r3, r2
 801570a:	6818      	ldr	r0, [r3, #0]
 801570c:	697a      	ldr	r2, [r7, #20]
 801570e:	f248 0370 	movw	r3, #32880	; 0x8070
 8015712:	4413      	add	r3, r2
 8015714:	681b      	ldr	r3, [r3, #0]
 8015716:	7af9      	ldrb	r1, [r7, #11]
 8015718:	4602      	mov	r2, r0
 801571a:	68f8      	ldr	r0, [r7, #12]
 801571c:	f000 f80e 	bl	801573c <SCSI_CheckAddressRange>
 8015720:	4603      	mov	r3, r0
 8015722:	2b00      	cmp	r3, #0
 8015724:	da02      	bge.n	801572c <SCSI_Verify10+0x60>
  {
    return -1; /* error */
 8015726:	f04f 33ff 	mov.w	r3, #4294967295
 801572a:	e003      	b.n	8015734 <SCSI_Verify10+0x68>
  }

  hmsc->bot_data_length = 0U;
 801572c:	697b      	ldr	r3, [r7, #20]
 801572e:	2200      	movs	r2, #0
 8015730:	60da      	str	r2, [r3, #12]

  return 0;
 8015732:	2300      	movs	r3, #0
}
 8015734:	4618      	mov	r0, r3
 8015736:	3718      	adds	r7, #24
 8015738:	46bd      	mov	sp, r7
 801573a:	bd80      	pop	{r7, pc}

0801573c <SCSI_CheckAddressRange>:
* @param  blk_nbr: number of block to be processed
* @retval status
*/
static int8_t SCSI_CheckAddressRange(USBD_HandleTypeDef *pdev, uint8_t lun,
                                     uint32_t blk_offset, uint32_t blk_nbr)
{
 801573c:	b580      	push	{r7, lr}
 801573e:	b086      	sub	sp, #24
 8015740:	af00      	add	r7, sp, #0
 8015742:	60f8      	str	r0, [r7, #12]
 8015744:	607a      	str	r2, [r7, #4]
 8015746:	603b      	str	r3, [r7, #0]
 8015748:	460b      	mov	r3, r1
 801574a:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 801574c:	68fb      	ldr	r3, [r7, #12]
 801574e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8015752:	617b      	str	r3, [r7, #20]

  if ((blk_offset + blk_nbr) > hmsc->scsi_blk_nbr)
 8015754:	687a      	ldr	r2, [r7, #4]
 8015756:	683b      	ldr	r3, [r7, #0]
 8015758:	441a      	add	r2, r3
 801575a:	6979      	ldr	r1, [r7, #20]
 801575c:	f248 0368 	movw	r3, #32872	; 0x8068
 8015760:	440b      	add	r3, r1
 8015762:	681b      	ldr	r3, [r3, #0]
 8015764:	429a      	cmp	r2, r3
 8015766:	d908      	bls.n	801577a <SCSI_CheckAddressRange+0x3e>
  {
    SCSI_SenseCode(pdev, lun, ILLEGAL_REQUEST, ADDRESS_OUT_OF_RANGE);
 8015768:	7af9      	ldrb	r1, [r7, #11]
 801576a:	2321      	movs	r3, #33	; 0x21
 801576c:	2205      	movs	r2, #5
 801576e:	68f8      	ldr	r0, [r7, #12]
 8015770:	f7ff fbaa 	bl	8014ec8 <SCSI_SenseCode>
    return -1;
 8015774:	f04f 33ff 	mov.w	r3, #4294967295
 8015778:	e000      	b.n	801577c <SCSI_CheckAddressRange+0x40>
  }

  return 0;
 801577a:	2300      	movs	r3, #0
}
 801577c:	4618      	mov	r0, r3
 801577e:	3718      	adds	r7, #24
 8015780:	46bd      	mov	sp, r7
 8015782:	bd80      	pop	{r7, pc}

08015784 <SCSI_ProcessRead>:
*         Handle Read Process
* @param  lun: Logical unit number
* @retval status
*/
static int8_t SCSI_ProcessRead(USBD_HandleTypeDef *pdev, uint8_t lun)
{
 8015784:	b5b0      	push	{r4, r5, r7, lr}
 8015786:	b084      	sub	sp, #16
 8015788:	af00      	add	r7, sp, #0
 801578a:	6078      	str	r0, [r7, #4]
 801578c:	460b      	mov	r3, r1
 801578e:	70fb      	strb	r3, [r7, #3]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8015790:	687b      	ldr	r3, [r7, #4]
 8015792:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8015796:	60fb      	str	r3, [r7, #12]
  uint32_t len = hmsc->scsi_blk_len * hmsc->scsi_blk_size;
 8015798:	68fa      	ldr	r2, [r7, #12]
 801579a:	f248 0370 	movw	r3, #32880	; 0x8070
 801579e:	4413      	add	r3, r2
 80157a0:	681a      	ldr	r2, [r3, #0]
 80157a2:	68f9      	ldr	r1, [r7, #12]
 80157a4:	f248 0364 	movw	r3, #32868	; 0x8064
 80157a8:	440b      	add	r3, r1
 80157aa:	881b      	ldrh	r3, [r3, #0]
 80157ac:	fb03 f302 	mul.w	r3, r3, r2
 80157b0:	60bb      	str	r3, [r7, #8]

  len = MIN(len, MSC_MEDIA_PACKET);
 80157b2:	68bb      	ldr	r3, [r7, #8]
 80157b4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80157b8:	bf28      	it	cs
 80157ba:	f44f 4300 	movcs.w	r3, #32768	; 0x8000
 80157be:	60bb      	str	r3, [r7, #8]

  if (((USBD_StorageTypeDef *)pdev->pUserData)->Read(lun, hmsc->bot_data,
 80157c0:	687b      	ldr	r3, [r7, #4]
 80157c2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80157c6:	691c      	ldr	r4, [r3, #16]
 80157c8:	68fb      	ldr	r3, [r7, #12]
 80157ca:	f103 0110 	add.w	r1, r3, #16
 80157ce:	68fa      	ldr	r2, [r7, #12]
 80157d0:	f248 036c 	movw	r3, #32876	; 0x806c
 80157d4:	4413      	add	r3, r2
 80157d6:	681d      	ldr	r5, [r3, #0]
                                                     hmsc->scsi_blk_addr,
                                                     (len / hmsc->scsi_blk_size)) < 0)
 80157d8:	68fa      	ldr	r2, [r7, #12]
 80157da:	f248 0364 	movw	r3, #32868	; 0x8064
 80157de:	4413      	add	r3, r2
 80157e0:	881b      	ldrh	r3, [r3, #0]
 80157e2:	461a      	mov	r2, r3
 80157e4:	68bb      	ldr	r3, [r7, #8]
 80157e6:	fbb3 f3f2 	udiv	r3, r3, r2
  if (((USBD_StorageTypeDef *)pdev->pUserData)->Read(lun, hmsc->bot_data,
 80157ea:	b29b      	uxth	r3, r3
 80157ec:	78f8      	ldrb	r0, [r7, #3]
 80157ee:	462a      	mov	r2, r5
 80157f0:	47a0      	blx	r4
 80157f2:	4603      	mov	r3, r0
 80157f4:	2b00      	cmp	r3, #0
 80157f6:	da08      	bge.n	801580a <SCSI_ProcessRead+0x86>
  {
    SCSI_SenseCode(pdev, lun, HARDWARE_ERROR, UNRECOVERED_READ_ERROR);
 80157f8:	78f9      	ldrb	r1, [r7, #3]
 80157fa:	2311      	movs	r3, #17
 80157fc:	2204      	movs	r2, #4
 80157fe:	6878      	ldr	r0, [r7, #4]
 8015800:	f7ff fb62 	bl	8014ec8 <SCSI_SenseCode>
    return -1;
 8015804:	f04f 33ff 	mov.w	r3, #4294967295
 8015808:	e046      	b.n	8015898 <SCSI_ProcessRead+0x114>
  }

  (void)USBD_LL_Transmit(pdev, MSC_EPIN_ADDR, hmsc->bot_data, len);
 801580a:	68fb      	ldr	r3, [r7, #12]
 801580c:	f103 0210 	add.w	r2, r3, #16
 8015810:	68bb      	ldr	r3, [r7, #8]
 8015812:	2181      	movs	r1, #129	; 0x81
 8015814:	6878      	ldr	r0, [r7, #4]
 8015816:	f004 f95d 	bl	8019ad4 <USBD_LL_Transmit>

  hmsc->scsi_blk_addr += (len / hmsc->scsi_blk_size);
 801581a:	68fa      	ldr	r2, [r7, #12]
 801581c:	f248 036c 	movw	r3, #32876	; 0x806c
 8015820:	4413      	add	r3, r2
 8015822:	681a      	ldr	r2, [r3, #0]
 8015824:	68f9      	ldr	r1, [r7, #12]
 8015826:	f248 0364 	movw	r3, #32868	; 0x8064
 801582a:	440b      	add	r3, r1
 801582c:	881b      	ldrh	r3, [r3, #0]
 801582e:	4619      	mov	r1, r3
 8015830:	68bb      	ldr	r3, [r7, #8]
 8015832:	fbb3 f3f1 	udiv	r3, r3, r1
 8015836:	441a      	add	r2, r3
 8015838:	68f9      	ldr	r1, [r7, #12]
 801583a:	f248 036c 	movw	r3, #32876	; 0x806c
 801583e:	440b      	add	r3, r1
 8015840:	601a      	str	r2, [r3, #0]
  hmsc->scsi_blk_len -= (len / hmsc->scsi_blk_size);
 8015842:	68fa      	ldr	r2, [r7, #12]
 8015844:	f248 0370 	movw	r3, #32880	; 0x8070
 8015848:	4413      	add	r3, r2
 801584a:	681a      	ldr	r2, [r3, #0]
 801584c:	68f9      	ldr	r1, [r7, #12]
 801584e:	f248 0364 	movw	r3, #32868	; 0x8064
 8015852:	440b      	add	r3, r1
 8015854:	881b      	ldrh	r3, [r3, #0]
 8015856:	4619      	mov	r1, r3
 8015858:	68bb      	ldr	r3, [r7, #8]
 801585a:	fbb3 f3f1 	udiv	r3, r3, r1
 801585e:	1ad2      	subs	r2, r2, r3
 8015860:	68f9      	ldr	r1, [r7, #12]
 8015862:	f248 0370 	movw	r3, #32880	; 0x8070
 8015866:	440b      	add	r3, r1
 8015868:	601a      	str	r2, [r3, #0]

  /* case 6 : Hi = Di */
  hmsc->csw.dDataResidue -= len;
 801586a:	68fa      	ldr	r2, [r7, #12]
 801586c:	f248 0338 	movw	r3, #32824	; 0x8038
 8015870:	4413      	add	r3, r2
 8015872:	681a      	ldr	r2, [r3, #0]
 8015874:	68bb      	ldr	r3, [r7, #8]
 8015876:	1ad2      	subs	r2, r2, r3
 8015878:	68f9      	ldr	r1, [r7, #12]
 801587a:	f248 0338 	movw	r3, #32824	; 0x8038
 801587e:	440b      	add	r3, r1
 8015880:	601a      	str	r2, [r3, #0]

  if (hmsc->scsi_blk_len == 0U)
 8015882:	68fa      	ldr	r2, [r7, #12]
 8015884:	f248 0370 	movw	r3, #32880	; 0x8070
 8015888:	4413      	add	r3, r2
 801588a:	681b      	ldr	r3, [r3, #0]
 801588c:	2b00      	cmp	r3, #0
 801588e:	d102      	bne.n	8015896 <SCSI_ProcessRead+0x112>
  {
    hmsc->bot_state = USBD_BOT_LAST_DATA_IN;
 8015890:	68fb      	ldr	r3, [r7, #12]
 8015892:	2203      	movs	r2, #3
 8015894:	721a      	strb	r2, [r3, #8]
  }

  return 0;
 8015896:	2300      	movs	r3, #0
}
 8015898:	4618      	mov	r0, r3
 801589a:	3710      	adds	r7, #16
 801589c:	46bd      	mov	sp, r7
 801589e:	bdb0      	pop	{r4, r5, r7, pc}

080158a0 <SCSI_ProcessWrite>:
*         Handle Write Process
* @param  lun: Logical unit number
* @retval status
*/
static int8_t SCSI_ProcessWrite(USBD_HandleTypeDef *pdev, uint8_t lun)
{
 80158a0:	b5b0      	push	{r4, r5, r7, lr}
 80158a2:	b084      	sub	sp, #16
 80158a4:	af00      	add	r7, sp, #0
 80158a6:	6078      	str	r0, [r7, #4]
 80158a8:	460b      	mov	r3, r1
 80158aa:	70fb      	strb	r3, [r7, #3]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 80158ac:	687b      	ldr	r3, [r7, #4]
 80158ae:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80158b2:	60fb      	str	r3, [r7, #12]
  uint32_t len = hmsc->scsi_blk_len * hmsc->scsi_blk_size;
 80158b4:	68fa      	ldr	r2, [r7, #12]
 80158b6:	f248 0370 	movw	r3, #32880	; 0x8070
 80158ba:	4413      	add	r3, r2
 80158bc:	681a      	ldr	r2, [r3, #0]
 80158be:	68f9      	ldr	r1, [r7, #12]
 80158c0:	f248 0364 	movw	r3, #32868	; 0x8064
 80158c4:	440b      	add	r3, r1
 80158c6:	881b      	ldrh	r3, [r3, #0]
 80158c8:	fb03 f302 	mul.w	r3, r3, r2
 80158cc:	60bb      	str	r3, [r7, #8]

  len = MIN(len, MSC_MEDIA_PACKET);
 80158ce:	68bb      	ldr	r3, [r7, #8]
 80158d0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80158d4:	bf28      	it	cs
 80158d6:	f44f 4300 	movcs.w	r3, #32768	; 0x8000
 80158da:	60bb      	str	r3, [r7, #8]

  if (((USBD_StorageTypeDef *)pdev->pUserData)->Write(lun, hmsc->bot_data,
 80158dc:	687b      	ldr	r3, [r7, #4]
 80158de:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80158e2:	695c      	ldr	r4, [r3, #20]
 80158e4:	68fb      	ldr	r3, [r7, #12]
 80158e6:	f103 0110 	add.w	r1, r3, #16
 80158ea:	68fa      	ldr	r2, [r7, #12]
 80158ec:	f248 036c 	movw	r3, #32876	; 0x806c
 80158f0:	4413      	add	r3, r2
 80158f2:	681d      	ldr	r5, [r3, #0]
                                                      hmsc->scsi_blk_addr,
                                                      (len / hmsc->scsi_blk_size)) < 0)
 80158f4:	68fa      	ldr	r2, [r7, #12]
 80158f6:	f248 0364 	movw	r3, #32868	; 0x8064
 80158fa:	4413      	add	r3, r2
 80158fc:	881b      	ldrh	r3, [r3, #0]
 80158fe:	461a      	mov	r2, r3
 8015900:	68bb      	ldr	r3, [r7, #8]
 8015902:	fbb3 f3f2 	udiv	r3, r3, r2
  if (((USBD_StorageTypeDef *)pdev->pUserData)->Write(lun, hmsc->bot_data,
 8015906:	b29b      	uxth	r3, r3
 8015908:	78f8      	ldrb	r0, [r7, #3]
 801590a:	462a      	mov	r2, r5
 801590c:	47a0      	blx	r4
 801590e:	4603      	mov	r3, r0
 8015910:	2b00      	cmp	r3, #0
 8015912:	da08      	bge.n	8015926 <SCSI_ProcessWrite+0x86>
  {
    SCSI_SenseCode(pdev, lun, HARDWARE_ERROR, WRITE_FAULT);
 8015914:	78f9      	ldrb	r1, [r7, #3]
 8015916:	2303      	movs	r3, #3
 8015918:	2204      	movs	r2, #4
 801591a:	6878      	ldr	r0, [r7, #4]
 801591c:	f7ff fad4 	bl	8014ec8 <SCSI_SenseCode>
    return -1;
 8015920:	f04f 33ff 	mov.w	r3, #4294967295
 8015924:	e05a      	b.n	80159dc <SCSI_ProcessWrite+0x13c>
  }

  hmsc->scsi_blk_addr += (len / hmsc->scsi_blk_size);
 8015926:	68fa      	ldr	r2, [r7, #12]
 8015928:	f248 036c 	movw	r3, #32876	; 0x806c
 801592c:	4413      	add	r3, r2
 801592e:	681a      	ldr	r2, [r3, #0]
 8015930:	68f9      	ldr	r1, [r7, #12]
 8015932:	f248 0364 	movw	r3, #32868	; 0x8064
 8015936:	440b      	add	r3, r1
 8015938:	881b      	ldrh	r3, [r3, #0]
 801593a:	4619      	mov	r1, r3
 801593c:	68bb      	ldr	r3, [r7, #8]
 801593e:	fbb3 f3f1 	udiv	r3, r3, r1
 8015942:	441a      	add	r2, r3
 8015944:	68f9      	ldr	r1, [r7, #12]
 8015946:	f248 036c 	movw	r3, #32876	; 0x806c
 801594a:	440b      	add	r3, r1
 801594c:	601a      	str	r2, [r3, #0]
  hmsc->scsi_blk_len -= (len / hmsc->scsi_blk_size);
 801594e:	68fa      	ldr	r2, [r7, #12]
 8015950:	f248 0370 	movw	r3, #32880	; 0x8070
 8015954:	4413      	add	r3, r2
 8015956:	681a      	ldr	r2, [r3, #0]
 8015958:	68f9      	ldr	r1, [r7, #12]
 801595a:	f248 0364 	movw	r3, #32868	; 0x8064
 801595e:	440b      	add	r3, r1
 8015960:	881b      	ldrh	r3, [r3, #0]
 8015962:	4619      	mov	r1, r3
 8015964:	68bb      	ldr	r3, [r7, #8]
 8015966:	fbb3 f3f1 	udiv	r3, r3, r1
 801596a:	1ad2      	subs	r2, r2, r3
 801596c:	68f9      	ldr	r1, [r7, #12]
 801596e:	f248 0370 	movw	r3, #32880	; 0x8070
 8015972:	440b      	add	r3, r1
 8015974:	601a      	str	r2, [r3, #0]

  /* case 12 : Ho = Do */
  hmsc->csw.dDataResidue -= len;
 8015976:	68fa      	ldr	r2, [r7, #12]
 8015978:	f248 0338 	movw	r3, #32824	; 0x8038
 801597c:	4413      	add	r3, r2
 801597e:	681a      	ldr	r2, [r3, #0]
 8015980:	68bb      	ldr	r3, [r7, #8]
 8015982:	1ad2      	subs	r2, r2, r3
 8015984:	68f9      	ldr	r1, [r7, #12]
 8015986:	f248 0338 	movw	r3, #32824	; 0x8038
 801598a:	440b      	add	r3, r1
 801598c:	601a      	str	r2, [r3, #0]

  if (hmsc->scsi_blk_len == 0U)
 801598e:	68fa      	ldr	r2, [r7, #12]
 8015990:	f248 0370 	movw	r3, #32880	; 0x8070
 8015994:	4413      	add	r3, r2
 8015996:	681b      	ldr	r3, [r3, #0]
 8015998:	2b00      	cmp	r3, #0
 801599a:	d104      	bne.n	80159a6 <SCSI_ProcessWrite+0x106>
  {
    MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_PASSED);
 801599c:	2100      	movs	r1, #0
 801599e:	6878      	ldr	r0, [r7, #4]
 80159a0:	f7fe fde2 	bl	8014568 <MSC_BOT_SendCSW>
 80159a4:	e019      	b.n	80159da <SCSI_ProcessWrite+0x13a>
  }
  else
  {
    len = MIN((hmsc->scsi_blk_len * hmsc->scsi_blk_size), MSC_MEDIA_PACKET);
 80159a6:	68fa      	ldr	r2, [r7, #12]
 80159a8:	f248 0370 	movw	r3, #32880	; 0x8070
 80159ac:	4413      	add	r3, r2
 80159ae:	681a      	ldr	r2, [r3, #0]
 80159b0:	68f9      	ldr	r1, [r7, #12]
 80159b2:	f248 0364 	movw	r3, #32868	; 0x8064
 80159b6:	440b      	add	r3, r1
 80159b8:	881b      	ldrh	r3, [r3, #0]
 80159ba:	fb03 f302 	mul.w	r3, r3, r2
 80159be:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80159c2:	bf28      	it	cs
 80159c4:	f44f 4300 	movcs.w	r3, #32768	; 0x8000
 80159c8:	60bb      	str	r3, [r7, #8]

    /* Prepare EP to Receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, MSC_EPOUT_ADDR, hmsc->bot_data, len);
 80159ca:	68fb      	ldr	r3, [r7, #12]
 80159cc:	f103 0210 	add.w	r2, r3, #16
 80159d0:	68bb      	ldr	r3, [r7, #8]
 80159d2:	2101      	movs	r1, #1
 80159d4:	6878      	ldr	r0, [r7, #4]
 80159d6:	f004 f89e 	bl	8019b16 <USBD_LL_PrepareReceive>
  }

  return 0;
 80159da:	2300      	movs	r3, #0
}
 80159dc:	4618      	mov	r0, r3
 80159de:	3710      	adds	r7, #16
 80159e0:	46bd      	mov	sp, r7
 80159e2:	bdb0      	pop	{r4, r5, r7, pc}

080159e4 <SCSI_UpdateBotData>:
* @param  length: Data length
* @retval status
*/
static int8_t SCSI_UpdateBotData(USBD_MSC_BOT_HandleTypeDef *hmsc,
                                 uint8_t *pBuff, uint16_t length)
{
 80159e4:	b480      	push	{r7}
 80159e6:	b087      	sub	sp, #28
 80159e8:	af00      	add	r7, sp, #0
 80159ea:	60f8      	str	r0, [r7, #12]
 80159ec:	60b9      	str	r1, [r7, #8]
 80159ee:	4613      	mov	r3, r2
 80159f0:	80fb      	strh	r3, [r7, #6]
  uint16_t len = length;
 80159f2:	88fb      	ldrh	r3, [r7, #6]
 80159f4:	82fb      	strh	r3, [r7, #22]

  hmsc->bot_data_length = len;
 80159f6:	8afa      	ldrh	r2, [r7, #22]
 80159f8:	68fb      	ldr	r3, [r7, #12]
 80159fa:	60da      	str	r2, [r3, #12]

  while (len != 0U)
 80159fc:	e00b      	b.n	8015a16 <SCSI_UpdateBotData+0x32>
  {
    len--;
 80159fe:	8afb      	ldrh	r3, [r7, #22]
 8015a00:	3b01      	subs	r3, #1
 8015a02:	82fb      	strh	r3, [r7, #22]
    hmsc->bot_data[len] = pBuff[len];
 8015a04:	8afb      	ldrh	r3, [r7, #22]
 8015a06:	68ba      	ldr	r2, [r7, #8]
 8015a08:	441a      	add	r2, r3
 8015a0a:	8afb      	ldrh	r3, [r7, #22]
 8015a0c:	7811      	ldrb	r1, [r2, #0]
 8015a0e:	68fa      	ldr	r2, [r7, #12]
 8015a10:	4413      	add	r3, r2
 8015a12:	460a      	mov	r2, r1
 8015a14:	741a      	strb	r2, [r3, #16]
  while (len != 0U)
 8015a16:	8afb      	ldrh	r3, [r7, #22]
 8015a18:	2b00      	cmp	r3, #0
 8015a1a:	d1f0      	bne.n	80159fe <SCSI_UpdateBotData+0x1a>
  }

  return 0;
 8015a1c:	2300      	movs	r3, #0
}
 8015a1e:	4618      	mov	r0, r3
 8015a20:	371c      	adds	r7, #28
 8015a22:	46bd      	mov	sp, r7
 8015a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015a28:	4770      	bx	lr

08015a2a <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8015a2a:	b580      	push	{r7, lr}
 8015a2c:	b086      	sub	sp, #24
 8015a2e:	af00      	add	r7, sp, #0
 8015a30:	60f8      	str	r0, [r7, #12]
 8015a32:	60b9      	str	r1, [r7, #8]
 8015a34:	4613      	mov	r3, r2
 8015a36:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8015a38:	68fb      	ldr	r3, [r7, #12]
 8015a3a:	2b00      	cmp	r3, #0
 8015a3c:	d101      	bne.n	8015a42 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8015a3e:	2303      	movs	r3, #3
 8015a40:	e025      	b.n	8015a8e <USBD_Init+0x64>
  }

  /* Unlink previous class */
  if (pdev->pClass != NULL)
 8015a42:	68fb      	ldr	r3, [r7, #12]
 8015a44:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8015a48:	2b00      	cmp	r3, #0
 8015a4a:	d003      	beq.n	8015a54 <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 8015a4c:	68fb      	ldr	r3, [r7, #12]
 8015a4e:	2200      	movs	r2, #0
 8015a50:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }

  if (pdev->pConfDesc != NULL)
 8015a54:	68fb      	ldr	r3, [r7, #12]
 8015a56:	f8d3 32cc 	ldr.w	r3, [r3, #716]	; 0x2cc
 8015a5a:	2b00      	cmp	r3, #0
 8015a5c:	d003      	beq.n	8015a66 <USBD_Init+0x3c>
  {
    pdev->pConfDesc = NULL;
 8015a5e:	68fb      	ldr	r3, [r7, #12]
 8015a60:	2200      	movs	r2, #0
 8015a62:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8015a66:	68bb      	ldr	r3, [r7, #8]
 8015a68:	2b00      	cmp	r3, #0
 8015a6a:	d003      	beq.n	8015a74 <USBD_Init+0x4a>
  {
    pdev->pDesc = pdesc;
 8015a6c:	68fb      	ldr	r3, [r7, #12]
 8015a6e:	68ba      	ldr	r2, [r7, #8]
 8015a70:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8015a74:	68fb      	ldr	r3, [r7, #12]
 8015a76:	2201      	movs	r2, #1
 8015a78:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8015a7c:	68fb      	ldr	r3, [r7, #12]
 8015a7e:	79fa      	ldrb	r2, [r7, #7]
 8015a80:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8015a82:	68f8      	ldr	r0, [r7, #12]
 8015a84:	f003 fece 	bl	8019824 <USBD_LL_Init>
 8015a88:	4603      	mov	r3, r0
 8015a8a:	75fb      	strb	r3, [r7, #23]

  return ret;
 8015a8c:	7dfb      	ldrb	r3, [r7, #23]
}
 8015a8e:	4618      	mov	r0, r3
 8015a90:	3718      	adds	r7, #24
 8015a92:	46bd      	mov	sp, r7
 8015a94:	bd80      	pop	{r7, pc}

08015a96 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8015a96:	b580      	push	{r7, lr}
 8015a98:	b084      	sub	sp, #16
 8015a9a:	af00      	add	r7, sp, #0
 8015a9c:	6078      	str	r0, [r7, #4]
 8015a9e:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8015aa0:	2300      	movs	r3, #0
 8015aa2:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8015aa4:	683b      	ldr	r3, [r7, #0]
 8015aa6:	2b00      	cmp	r3, #0
 8015aa8:	d101      	bne.n	8015aae <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 8015aaa:	2303      	movs	r3, #3
 8015aac:	e010      	b.n	8015ad0 <USBD_RegisterClass+0x3a>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 8015aae:	687b      	ldr	r3, [r7, #4]
 8015ab0:	683a      	ldr	r2, [r7, #0]
 8015ab2:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  /* Get Device Configuration Descriptor */
#ifdef USE_USB_FS
  pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
#else /* USE_USB_HS */
  pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
 8015ab6:	687b      	ldr	r3, [r7, #4]
 8015ab8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8015abc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8015abe:	f107 020e 	add.w	r2, r7, #14
 8015ac2:	4610      	mov	r0, r2
 8015ac4:	4798      	blx	r3
 8015ac6:	4602      	mov	r2, r0
 8015ac8:	687b      	ldr	r3, [r7, #4]
 8015aca:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
#endif /* USE_USB_FS */


  return USBD_OK;
 8015ace:	2300      	movs	r3, #0
}
 8015ad0:	4618      	mov	r0, r3
 8015ad2:	3710      	adds	r7, #16
 8015ad4:	46bd      	mov	sp, r7
 8015ad6:	bd80      	pop	{r7, pc}

08015ad8 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8015ad8:	b580      	push	{r7, lr}
 8015ada:	b082      	sub	sp, #8
 8015adc:	af00      	add	r7, sp, #0
 8015ade:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8015ae0:	6878      	ldr	r0, [r7, #4]
 8015ae2:	f003 feef 	bl	80198c4 <USBD_LL_Start>
 8015ae6:	4603      	mov	r3, r0
}
 8015ae8:	4618      	mov	r0, r3
 8015aea:	3708      	adds	r7, #8
 8015aec:	46bd      	mov	sp, r7
 8015aee:	bd80      	pop	{r7, pc}

08015af0 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8015af0:	b480      	push	{r7}
 8015af2:	b083      	sub	sp, #12
 8015af4:	af00      	add	r7, sp, #0
 8015af6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8015af8:	2300      	movs	r3, #0
}
 8015afa:	4618      	mov	r0, r3
 8015afc:	370c      	adds	r7, #12
 8015afe:	46bd      	mov	sp, r7
 8015b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015b04:	4770      	bx	lr

08015b06 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8015b06:	b580      	push	{r7, lr}
 8015b08:	b084      	sub	sp, #16
 8015b0a:	af00      	add	r7, sp, #0
 8015b0c:	6078      	str	r0, [r7, #4]
 8015b0e:	460b      	mov	r3, r1
 8015b10:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8015b12:	2303      	movs	r3, #3
 8015b14:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8015b16:	687b      	ldr	r3, [r7, #4]
 8015b18:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8015b1c:	2b00      	cmp	r3, #0
 8015b1e:	d009      	beq.n	8015b34 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 8015b20:	687b      	ldr	r3, [r7, #4]
 8015b22:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8015b26:	681b      	ldr	r3, [r3, #0]
 8015b28:	78fa      	ldrb	r2, [r7, #3]
 8015b2a:	4611      	mov	r1, r2
 8015b2c:	6878      	ldr	r0, [r7, #4]
 8015b2e:	4798      	blx	r3
 8015b30:	4603      	mov	r3, r0
 8015b32:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8015b34:	7bfb      	ldrb	r3, [r7, #15]
}
 8015b36:	4618      	mov	r0, r3
 8015b38:	3710      	adds	r7, #16
 8015b3a:	46bd      	mov	sp, r7
 8015b3c:	bd80      	pop	{r7, pc}

08015b3e <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8015b3e:	b580      	push	{r7, lr}
 8015b40:	b082      	sub	sp, #8
 8015b42:	af00      	add	r7, sp, #0
 8015b44:	6078      	str	r0, [r7, #4]
 8015b46:	460b      	mov	r3, r1
 8015b48:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 8015b4a:	687b      	ldr	r3, [r7, #4]
 8015b4c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8015b50:	2b00      	cmp	r3, #0
 8015b52:	d007      	beq.n	8015b64 <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 8015b54:	687b      	ldr	r3, [r7, #4]
 8015b56:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8015b5a:	685b      	ldr	r3, [r3, #4]
 8015b5c:	78fa      	ldrb	r2, [r7, #3]
 8015b5e:	4611      	mov	r1, r2
 8015b60:	6878      	ldr	r0, [r7, #4]
 8015b62:	4798      	blx	r3
  }

  return USBD_OK;
 8015b64:	2300      	movs	r3, #0
}
 8015b66:	4618      	mov	r0, r3
 8015b68:	3708      	adds	r7, #8
 8015b6a:	46bd      	mov	sp, r7
 8015b6c:	bd80      	pop	{r7, pc}

08015b6e <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8015b6e:	b580      	push	{r7, lr}
 8015b70:	b084      	sub	sp, #16
 8015b72:	af00      	add	r7, sp, #0
 8015b74:	6078      	str	r0, [r7, #4]
 8015b76:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8015b78:	687b      	ldr	r3, [r7, #4]
 8015b7a:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8015b7e:	6839      	ldr	r1, [r7, #0]
 8015b80:	4618      	mov	r0, r3
 8015b82:	f000 ff2b 	bl	80169dc <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8015b86:	687b      	ldr	r3, [r7, #4]
 8015b88:	2201      	movs	r2, #1
 8015b8a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8015b8e:	687b      	ldr	r3, [r7, #4]
 8015b90:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 8015b94:	461a      	mov	r2, r3
 8015b96:	687b      	ldr	r3, [r7, #4]
 8015b98:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8015b9c:	687b      	ldr	r3, [r7, #4]
 8015b9e:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8015ba2:	f003 031f 	and.w	r3, r3, #31
 8015ba6:	2b01      	cmp	r3, #1
 8015ba8:	d00e      	beq.n	8015bc8 <USBD_LL_SetupStage+0x5a>
 8015baa:	2b01      	cmp	r3, #1
 8015bac:	d302      	bcc.n	8015bb4 <USBD_LL_SetupStage+0x46>
 8015bae:	2b02      	cmp	r3, #2
 8015bb0:	d014      	beq.n	8015bdc <USBD_LL_SetupStage+0x6e>
 8015bb2:	e01d      	b.n	8015bf0 <USBD_LL_SetupStage+0x82>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8015bb4:	687b      	ldr	r3, [r7, #4]
 8015bb6:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8015bba:	4619      	mov	r1, r3
 8015bbc:	6878      	ldr	r0, [r7, #4]
 8015bbe:	f000 fa17 	bl	8015ff0 <USBD_StdDevReq>
 8015bc2:	4603      	mov	r3, r0
 8015bc4:	73fb      	strb	r3, [r7, #15]
      break;
 8015bc6:	e020      	b.n	8015c0a <USBD_LL_SetupStage+0x9c>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8015bc8:	687b      	ldr	r3, [r7, #4]
 8015bca:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8015bce:	4619      	mov	r1, r3
 8015bd0:	6878      	ldr	r0, [r7, #4]
 8015bd2:	f000 fa7b 	bl	80160cc <USBD_StdItfReq>
 8015bd6:	4603      	mov	r3, r0
 8015bd8:	73fb      	strb	r3, [r7, #15]
      break;
 8015bda:	e016      	b.n	8015c0a <USBD_LL_SetupStage+0x9c>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8015bdc:	687b      	ldr	r3, [r7, #4]
 8015bde:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8015be2:	4619      	mov	r1, r3
 8015be4:	6878      	ldr	r0, [r7, #4]
 8015be6:	f000 fab7 	bl	8016158 <USBD_StdEPReq>
 8015bea:	4603      	mov	r3, r0
 8015bec:	73fb      	strb	r3, [r7, #15]
      break;
 8015bee:	e00c      	b.n	8015c0a <USBD_LL_SetupStage+0x9c>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8015bf0:	687b      	ldr	r3, [r7, #4]
 8015bf2:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8015bf6:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8015bfa:	b2db      	uxtb	r3, r3
 8015bfc:	4619      	mov	r1, r3
 8015bfe:	6878      	ldr	r0, [r7, #4]
 8015c00:	f003 fedf 	bl	80199c2 <USBD_LL_StallEP>
 8015c04:	4603      	mov	r3, r0
 8015c06:	73fb      	strb	r3, [r7, #15]
      break;
 8015c08:	bf00      	nop
  }

  return ret;
 8015c0a:	7bfb      	ldrb	r3, [r7, #15]
}
 8015c0c:	4618      	mov	r0, r3
 8015c0e:	3710      	adds	r7, #16
 8015c10:	46bd      	mov	sp, r7
 8015c12:	bd80      	pop	{r7, pc}

08015c14 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8015c14:	b580      	push	{r7, lr}
 8015c16:	b086      	sub	sp, #24
 8015c18:	af00      	add	r7, sp, #0
 8015c1a:	60f8      	str	r0, [r7, #12]
 8015c1c:	460b      	mov	r3, r1
 8015c1e:	607a      	str	r2, [r7, #4]
 8015c20:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8015c22:	7afb      	ldrb	r3, [r7, #11]
 8015c24:	2b00      	cmp	r3, #0
 8015c26:	d137      	bne.n	8015c98 <USBD_LL_DataOutStage+0x84>
  {
    pep = &pdev->ep_out[0];
 8015c28:	68fb      	ldr	r3, [r7, #12]
 8015c2a:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8015c2e:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8015c30:	68fb      	ldr	r3, [r7, #12]
 8015c32:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8015c36:	2b03      	cmp	r3, #3
 8015c38:	d14a      	bne.n	8015cd0 <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 8015c3a:	693b      	ldr	r3, [r7, #16]
 8015c3c:	689a      	ldr	r2, [r3, #8]
 8015c3e:	693b      	ldr	r3, [r7, #16]
 8015c40:	68db      	ldr	r3, [r3, #12]
 8015c42:	429a      	cmp	r2, r3
 8015c44:	d913      	bls.n	8015c6e <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8015c46:	693b      	ldr	r3, [r7, #16]
 8015c48:	689a      	ldr	r2, [r3, #8]
 8015c4a:	693b      	ldr	r3, [r7, #16]
 8015c4c:	68db      	ldr	r3, [r3, #12]
 8015c4e:	1ad2      	subs	r2, r2, r3
 8015c50:	693b      	ldr	r3, [r7, #16]
 8015c52:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8015c54:	693b      	ldr	r3, [r7, #16]
 8015c56:	68da      	ldr	r2, [r3, #12]
 8015c58:	693b      	ldr	r3, [r7, #16]
 8015c5a:	689b      	ldr	r3, [r3, #8]
 8015c5c:	4293      	cmp	r3, r2
 8015c5e:	bf28      	it	cs
 8015c60:	4613      	movcs	r3, r2
 8015c62:	461a      	mov	r2, r3
 8015c64:	6879      	ldr	r1, [r7, #4]
 8015c66:	68f8      	ldr	r0, [r7, #12]
 8015c68:	f000 ff8f 	bl	8016b8a <USBD_CtlContinueRx>
 8015c6c:	e030      	b.n	8015cd0 <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8015c6e:	68fb      	ldr	r3, [r7, #12]
 8015c70:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8015c74:	691b      	ldr	r3, [r3, #16]
 8015c76:	2b00      	cmp	r3, #0
 8015c78:	d00a      	beq.n	8015c90 <USBD_LL_DataOutStage+0x7c>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 8015c7a:	68fb      	ldr	r3, [r7, #12]
 8015c7c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8015c80:	2b03      	cmp	r3, #3
 8015c82:	d105      	bne.n	8015c90 <USBD_LL_DataOutStage+0x7c>
        {
          pdev->pClass->EP0_RxReady(pdev);
 8015c84:	68fb      	ldr	r3, [r7, #12]
 8015c86:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8015c8a:	691b      	ldr	r3, [r3, #16]
 8015c8c:	68f8      	ldr	r0, [r7, #12]
 8015c8e:	4798      	blx	r3
        }
        (void)USBD_CtlSendStatus(pdev);
 8015c90:	68f8      	ldr	r0, [r7, #12]
 8015c92:	f000 ff8b 	bl	8016bac <USBD_CtlSendStatus>
 8015c96:	e01b      	b.n	8015cd0 <USBD_LL_DataOutStage+0xbc>
        (void)USBD_LL_StallEP(pdev, 0U);
      }
#endif
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 8015c98:	68fb      	ldr	r3, [r7, #12]
 8015c9a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8015c9e:	699b      	ldr	r3, [r3, #24]
 8015ca0:	2b00      	cmp	r3, #0
 8015ca2:	d013      	beq.n	8015ccc <USBD_LL_DataOutStage+0xb8>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8015ca4:	68fb      	ldr	r3, [r7, #12]
 8015ca6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 8015caa:	2b03      	cmp	r3, #3
 8015cac:	d10e      	bne.n	8015ccc <USBD_LL_DataOutStage+0xb8>
  {
    ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 8015cae:	68fb      	ldr	r3, [r7, #12]
 8015cb0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8015cb4:	699b      	ldr	r3, [r3, #24]
 8015cb6:	7afa      	ldrb	r2, [r7, #11]
 8015cb8:	4611      	mov	r1, r2
 8015cba:	68f8      	ldr	r0, [r7, #12]
 8015cbc:	4798      	blx	r3
 8015cbe:	4603      	mov	r3, r0
 8015cc0:	75fb      	strb	r3, [r7, #23]

    if (ret != USBD_OK)
 8015cc2:	7dfb      	ldrb	r3, [r7, #23]
 8015cc4:	2b00      	cmp	r3, #0
 8015cc6:	d003      	beq.n	8015cd0 <USBD_LL_DataOutStage+0xbc>
    {
      return ret;
 8015cc8:	7dfb      	ldrb	r3, [r7, #23]
 8015cca:	e002      	b.n	8015cd2 <USBD_LL_DataOutStage+0xbe>
    }
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8015ccc:	2303      	movs	r3, #3
 8015cce:	e000      	b.n	8015cd2 <USBD_LL_DataOutStage+0xbe>
  }

  return USBD_OK;
 8015cd0:	2300      	movs	r3, #0
}
 8015cd2:	4618      	mov	r0, r3
 8015cd4:	3718      	adds	r7, #24
 8015cd6:	46bd      	mov	sp, r7
 8015cd8:	bd80      	pop	{r7, pc}

08015cda <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8015cda:	b580      	push	{r7, lr}
 8015cdc:	b086      	sub	sp, #24
 8015cde:	af00      	add	r7, sp, #0
 8015ce0:	60f8      	str	r0, [r7, #12]
 8015ce2:	460b      	mov	r3, r1
 8015ce4:	607a      	str	r2, [r7, #4]
 8015ce6:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8015ce8:	7afb      	ldrb	r3, [r7, #11]
 8015cea:	2b00      	cmp	r3, #0
 8015cec:	d16a      	bne.n	8015dc4 <USBD_LL_DataInStage+0xea>
  {
    pep = &pdev->ep_in[0];
 8015cee:	68fb      	ldr	r3, [r7, #12]
 8015cf0:	3314      	adds	r3, #20
 8015cf2:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8015cf4:	68fb      	ldr	r3, [r7, #12]
 8015cf6:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8015cfa:	2b02      	cmp	r3, #2
 8015cfc:	d155      	bne.n	8015daa <USBD_LL_DataInStage+0xd0>
    {
      if (pep->rem_length > pep->maxpacket)
 8015cfe:	693b      	ldr	r3, [r7, #16]
 8015d00:	689a      	ldr	r2, [r3, #8]
 8015d02:	693b      	ldr	r3, [r7, #16]
 8015d04:	68db      	ldr	r3, [r3, #12]
 8015d06:	429a      	cmp	r2, r3
 8015d08:	d914      	bls.n	8015d34 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8015d0a:	693b      	ldr	r3, [r7, #16]
 8015d0c:	689a      	ldr	r2, [r3, #8]
 8015d0e:	693b      	ldr	r3, [r7, #16]
 8015d10:	68db      	ldr	r3, [r3, #12]
 8015d12:	1ad2      	subs	r2, r2, r3
 8015d14:	693b      	ldr	r3, [r7, #16]
 8015d16:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8015d18:	693b      	ldr	r3, [r7, #16]
 8015d1a:	689b      	ldr	r3, [r3, #8]
 8015d1c:	461a      	mov	r2, r3
 8015d1e:	6879      	ldr	r1, [r7, #4]
 8015d20:	68f8      	ldr	r0, [r7, #12]
 8015d22:	f000 ff21 	bl	8016b68 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
       (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8015d26:	2300      	movs	r3, #0
 8015d28:	2200      	movs	r2, #0
 8015d2a:	2100      	movs	r1, #0
 8015d2c:	68f8      	ldr	r0, [r7, #12]
 8015d2e:	f003 fef2 	bl	8019b16 <USBD_LL_PrepareReceive>
 8015d32:	e03a      	b.n	8015daa <USBD_LL_DataInStage+0xd0>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8015d34:	693b      	ldr	r3, [r7, #16]
 8015d36:	68da      	ldr	r2, [r3, #12]
 8015d38:	693b      	ldr	r3, [r7, #16]
 8015d3a:	689b      	ldr	r3, [r3, #8]
 8015d3c:	429a      	cmp	r2, r3
 8015d3e:	d11c      	bne.n	8015d7a <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8015d40:	693b      	ldr	r3, [r7, #16]
 8015d42:	685a      	ldr	r2, [r3, #4]
 8015d44:	693b      	ldr	r3, [r7, #16]
 8015d46:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8015d48:	429a      	cmp	r2, r3
 8015d4a:	d316      	bcc.n	8015d7a <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8015d4c:	693b      	ldr	r3, [r7, #16]
 8015d4e:	685a      	ldr	r2, [r3, #4]
 8015d50:	68fb      	ldr	r3, [r7, #12]
 8015d52:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8015d56:	429a      	cmp	r2, r3
 8015d58:	d20f      	bcs.n	8015d7a <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8015d5a:	2200      	movs	r2, #0
 8015d5c:	2100      	movs	r1, #0
 8015d5e:	68f8      	ldr	r0, [r7, #12]
 8015d60:	f000 ff02 	bl	8016b68 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8015d64:	68fb      	ldr	r3, [r7, #12]
 8015d66:	2200      	movs	r2, #0
 8015d68:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8015d6c:	2300      	movs	r3, #0
 8015d6e:	2200      	movs	r2, #0
 8015d70:	2100      	movs	r1, #0
 8015d72:	68f8      	ldr	r0, [r7, #12]
 8015d74:	f003 fecf 	bl	8019b16 <USBD_LL_PrepareReceive>
 8015d78:	e017      	b.n	8015daa <USBD_LL_DataInStage+0xd0>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8015d7a:	68fb      	ldr	r3, [r7, #12]
 8015d7c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8015d80:	68db      	ldr	r3, [r3, #12]
 8015d82:	2b00      	cmp	r3, #0
 8015d84:	d00a      	beq.n	8015d9c <USBD_LL_DataInStage+0xc2>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 8015d86:	68fb      	ldr	r3, [r7, #12]
 8015d88:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8015d8c:	2b03      	cmp	r3, #3
 8015d8e:	d105      	bne.n	8015d9c <USBD_LL_DataInStage+0xc2>
          {
            pdev->pClass->EP0_TxSent(pdev);
 8015d90:	68fb      	ldr	r3, [r7, #12]
 8015d92:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8015d96:	68db      	ldr	r3, [r3, #12]
 8015d98:	68f8      	ldr	r0, [r7, #12]
 8015d9a:	4798      	blx	r3
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8015d9c:	2180      	movs	r1, #128	; 0x80
 8015d9e:	68f8      	ldr	r0, [r7, #12]
 8015da0:	f003 fe0f 	bl	80199c2 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8015da4:	68f8      	ldr	r0, [r7, #12]
 8015da6:	f000 ff14 	bl	8016bd2 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 8015daa:	68fb      	ldr	r3, [r7, #12]
 8015dac:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8015db0:	2b01      	cmp	r3, #1
 8015db2:	d123      	bne.n	8015dfc <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 8015db4:	68f8      	ldr	r0, [r7, #12]
 8015db6:	f7ff fe9b 	bl	8015af0 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8015dba:	68fb      	ldr	r3, [r7, #12]
 8015dbc:	2200      	movs	r2, #0
 8015dbe:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8015dc2:	e01b      	b.n	8015dfc <USBD_LL_DataInStage+0x122>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 8015dc4:	68fb      	ldr	r3, [r7, #12]
 8015dc6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8015dca:	695b      	ldr	r3, [r3, #20]
 8015dcc:	2b00      	cmp	r3, #0
 8015dce:	d013      	beq.n	8015df8 <USBD_LL_DataInStage+0x11e>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8015dd0:	68fb      	ldr	r3, [r7, #12]
 8015dd2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 8015dd6:	2b03      	cmp	r3, #3
 8015dd8:	d10e      	bne.n	8015df8 <USBD_LL_DataInStage+0x11e>
  {
    ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 8015dda:	68fb      	ldr	r3, [r7, #12]
 8015ddc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8015de0:	695b      	ldr	r3, [r3, #20]
 8015de2:	7afa      	ldrb	r2, [r7, #11]
 8015de4:	4611      	mov	r1, r2
 8015de6:	68f8      	ldr	r0, [r7, #12]
 8015de8:	4798      	blx	r3
 8015dea:	4603      	mov	r3, r0
 8015dec:	75fb      	strb	r3, [r7, #23]

    if (ret != USBD_OK)
 8015dee:	7dfb      	ldrb	r3, [r7, #23]
 8015df0:	2b00      	cmp	r3, #0
 8015df2:	d003      	beq.n	8015dfc <USBD_LL_DataInStage+0x122>
    {
      return ret;
 8015df4:	7dfb      	ldrb	r3, [r7, #23]
 8015df6:	e002      	b.n	8015dfe <USBD_LL_DataInStage+0x124>
    }
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8015df8:	2303      	movs	r3, #3
 8015dfa:	e000      	b.n	8015dfe <USBD_LL_DataInStage+0x124>
  }

  return USBD_OK;
 8015dfc:	2300      	movs	r3, #0
}
 8015dfe:	4618      	mov	r0, r3
 8015e00:	3718      	adds	r7, #24
 8015e02:	46bd      	mov	sp, r7
 8015e04:	bd80      	pop	{r7, pc}

08015e06 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8015e06:	b580      	push	{r7, lr}
 8015e08:	b082      	sub	sp, #8
 8015e0a:	af00      	add	r7, sp, #0
 8015e0c:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8015e0e:	687b      	ldr	r3, [r7, #4]
 8015e10:	2201      	movs	r2, #1
 8015e12:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8015e16:	687b      	ldr	r3, [r7, #4]
 8015e18:	2200      	movs	r2, #0
 8015e1a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8015e1e:	687b      	ldr	r3, [r7, #4]
 8015e20:	2200      	movs	r2, #0
 8015e22:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8015e24:	687b      	ldr	r3, [r7, #4]
 8015e26:	2200      	movs	r2, #0
 8015e28:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData != NULL)
 8015e2c:	687b      	ldr	r3, [r7, #4]
 8015e2e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8015e32:	2b00      	cmp	r3, #0
 8015e34:	d009      	beq.n	8015e4a <USBD_LL_Reset+0x44>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8015e36:	687b      	ldr	r3, [r7, #4]
 8015e38:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8015e3c:	685b      	ldr	r3, [r3, #4]
 8015e3e:	687a      	ldr	r2, [r7, #4]
 8015e40:	6852      	ldr	r2, [r2, #4]
 8015e42:	b2d2      	uxtb	r2, r2
 8015e44:	4611      	mov	r1, r2
 8015e46:	6878      	ldr	r0, [r7, #4]
 8015e48:	4798      	blx	r3
  }

    /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8015e4a:	2340      	movs	r3, #64	; 0x40
 8015e4c:	2200      	movs	r2, #0
 8015e4e:	2100      	movs	r1, #0
 8015e50:	6878      	ldr	r0, [r7, #4]
 8015e52:	f003 fd52 	bl	80198fa <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8015e56:	687b      	ldr	r3, [r7, #4]
 8015e58:	2201      	movs	r2, #1
 8015e5a:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8015e5e:	687b      	ldr	r3, [r7, #4]
 8015e60:	2240      	movs	r2, #64	; 0x40
 8015e62:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8015e66:	2340      	movs	r3, #64	; 0x40
 8015e68:	2200      	movs	r2, #0
 8015e6a:	2180      	movs	r1, #128	; 0x80
 8015e6c:	6878      	ldr	r0, [r7, #4]
 8015e6e:	f003 fd44 	bl	80198fa <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8015e72:	687b      	ldr	r3, [r7, #4]
 8015e74:	2201      	movs	r2, #1
 8015e76:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8015e78:	687b      	ldr	r3, [r7, #4]
 8015e7a:	2240      	movs	r2, #64	; 0x40
 8015e7c:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 8015e7e:	2300      	movs	r3, #0
}
 8015e80:	4618      	mov	r0, r3
 8015e82:	3708      	adds	r7, #8
 8015e84:	46bd      	mov	sp, r7
 8015e86:	bd80      	pop	{r7, pc}

08015e88 <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8015e88:	b480      	push	{r7}
 8015e8a:	b083      	sub	sp, #12
 8015e8c:	af00      	add	r7, sp, #0
 8015e8e:	6078      	str	r0, [r7, #4]
 8015e90:	460b      	mov	r3, r1
 8015e92:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8015e94:	687b      	ldr	r3, [r7, #4]
 8015e96:	78fa      	ldrb	r2, [r7, #3]
 8015e98:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8015e9a:	2300      	movs	r3, #0
}
 8015e9c:	4618      	mov	r0, r3
 8015e9e:	370c      	adds	r7, #12
 8015ea0:	46bd      	mov	sp, r7
 8015ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015ea6:	4770      	bx	lr

08015ea8 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8015ea8:	b480      	push	{r7}
 8015eaa:	b083      	sub	sp, #12
 8015eac:	af00      	add	r7, sp, #0
 8015eae:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 8015eb0:	687b      	ldr	r3, [r7, #4]
 8015eb2:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 8015eb6:	687b      	ldr	r3, [r7, #4]
 8015eb8:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 8015ebc:	687b      	ldr	r3, [r7, #4]
 8015ebe:	2204      	movs	r2, #4
 8015ec0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8015ec4:	2300      	movs	r3, #0
}
 8015ec6:	4618      	mov	r0, r3
 8015ec8:	370c      	adds	r7, #12
 8015eca:	46bd      	mov	sp, r7
 8015ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015ed0:	4770      	bx	lr

08015ed2 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8015ed2:	b480      	push	{r7}
 8015ed4:	b083      	sub	sp, #12
 8015ed6:	af00      	add	r7, sp, #0
 8015ed8:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8015eda:	687b      	ldr	r3, [r7, #4]
 8015edc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8015ee0:	2b04      	cmp	r3, #4
 8015ee2:	d105      	bne.n	8015ef0 <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 8015ee4:	687b      	ldr	r3, [r7, #4]
 8015ee6:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 8015eea:	687b      	ldr	r3, [r7, #4]
 8015eec:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8015ef0:	2300      	movs	r3, #0
}
 8015ef2:	4618      	mov	r0, r3
 8015ef4:	370c      	adds	r7, #12
 8015ef6:	46bd      	mov	sp, r7
 8015ef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015efc:	4770      	bx	lr

08015efe <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8015efe:	b580      	push	{r7, lr}
 8015f00:	b082      	sub	sp, #8
 8015f02:	af00      	add	r7, sp, #0
 8015f04:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8015f06:	687b      	ldr	r3, [r7, #4]
 8015f08:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8015f0c:	2b03      	cmp	r3, #3
 8015f0e:	d10b      	bne.n	8015f28 <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 8015f10:	687b      	ldr	r3, [r7, #4]
 8015f12:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8015f16:	69db      	ldr	r3, [r3, #28]
 8015f18:	2b00      	cmp	r3, #0
 8015f1a:	d005      	beq.n	8015f28 <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 8015f1c:	687b      	ldr	r3, [r7, #4]
 8015f1e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8015f22:	69db      	ldr	r3, [r3, #28]
 8015f24:	6878      	ldr	r0, [r7, #4]
 8015f26:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8015f28:	2300      	movs	r3, #0
}
 8015f2a:	4618      	mov	r0, r3
 8015f2c:	3708      	adds	r7, #8
 8015f2e:	46bd      	mov	sp, r7
 8015f30:	bd80      	pop	{r7, pc}

08015f32 <USBD_LL_IsoINIncomplete>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8015f32:	b480      	push	{r7}
 8015f34:	b083      	sub	sp, #12
 8015f36:	af00      	add	r7, sp, #0
 8015f38:	6078      	str	r0, [r7, #4]
 8015f3a:	460b      	mov	r3, r1
 8015f3c:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 8015f3e:	2300      	movs	r3, #0
}
 8015f40:	4618      	mov	r0, r3
 8015f42:	370c      	adds	r7, #12
 8015f44:	46bd      	mov	sp, r7
 8015f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015f4a:	4770      	bx	lr

08015f4c <USBD_LL_IsoOUTIncomplete>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8015f4c:	b480      	push	{r7}
 8015f4e:	b083      	sub	sp, #12
 8015f50:	af00      	add	r7, sp, #0
 8015f52:	6078      	str	r0, [r7, #4]
 8015f54:	460b      	mov	r3, r1
 8015f56:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 8015f58:	2300      	movs	r3, #0
}
 8015f5a:	4618      	mov	r0, r3
 8015f5c:	370c      	adds	r7, #12
 8015f5e:	46bd      	mov	sp, r7
 8015f60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015f64:	4770      	bx	lr

08015f66 <USBD_LL_DevConnected>:
*         Handle device connection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8015f66:	b480      	push	{r7}
 8015f68:	b083      	sub	sp, #12
 8015f6a:	af00      	add	r7, sp, #0
 8015f6c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8015f6e:	2300      	movs	r3, #0
}
 8015f70:	4618      	mov	r0, r3
 8015f72:	370c      	adds	r7, #12
 8015f74:	46bd      	mov	sp, r7
 8015f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015f7a:	4770      	bx	lr

08015f7c <USBD_LL_DevDisconnected>:
*         Handle device disconnection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8015f7c:	b580      	push	{r7, lr}
 8015f7e:	b082      	sub	sp, #8
 8015f80:	af00      	add	r7, sp, #0
 8015f82:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8015f84:	687b      	ldr	r3, [r7, #4]
 8015f86:	2201      	movs	r2, #1
 8015f88:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  if (pdev->pClass != NULL)
 8015f8c:	687b      	ldr	r3, [r7, #4]
 8015f8e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8015f92:	2b00      	cmp	r3, #0
 8015f94:	d009      	beq.n	8015faa <USBD_LL_DevDisconnected+0x2e>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8015f96:	687b      	ldr	r3, [r7, #4]
 8015f98:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8015f9c:	685b      	ldr	r3, [r3, #4]
 8015f9e:	687a      	ldr	r2, [r7, #4]
 8015fa0:	6852      	ldr	r2, [r2, #4]
 8015fa2:	b2d2      	uxtb	r2, r2
 8015fa4:	4611      	mov	r1, r2
 8015fa6:	6878      	ldr	r0, [r7, #4]
 8015fa8:	4798      	blx	r3
  }

  return USBD_OK;
 8015faa:	2300      	movs	r3, #0
}
 8015fac:	4618      	mov	r0, r3
 8015fae:	3708      	adds	r7, #8
 8015fb0:	46bd      	mov	sp, r7
 8015fb2:	bd80      	pop	{r7, pc}

08015fb4 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8015fb4:	b480      	push	{r7}
 8015fb6:	b087      	sub	sp, #28
 8015fb8:	af00      	add	r7, sp, #0
 8015fba:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 8015fbc:	687b      	ldr	r3, [r7, #4]
 8015fbe:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8015fc0:	697b      	ldr	r3, [r7, #20]
 8015fc2:	781b      	ldrb	r3, [r3, #0]
 8015fc4:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8015fc6:	697b      	ldr	r3, [r7, #20]
 8015fc8:	3301      	adds	r3, #1
 8015fca:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8015fcc:	697b      	ldr	r3, [r7, #20]
 8015fce:	781b      	ldrb	r3, [r3, #0]
 8015fd0:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8015fd2:	8a3b      	ldrh	r3, [r7, #16]
 8015fd4:	021b      	lsls	r3, r3, #8
 8015fd6:	b21a      	sxth	r2, r3
 8015fd8:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8015fdc:	4313      	orrs	r3, r2
 8015fde:	b21b      	sxth	r3, r3
 8015fe0:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8015fe2:	89fb      	ldrh	r3, [r7, #14]
}
 8015fe4:	4618      	mov	r0, r3
 8015fe6:	371c      	adds	r7, #28
 8015fe8:	46bd      	mov	sp, r7
 8015fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015fee:	4770      	bx	lr

08015ff0 <USBD_StdDevReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8015ff0:	b580      	push	{r7, lr}
 8015ff2:	b084      	sub	sp, #16
 8015ff4:	af00      	add	r7, sp, #0
 8015ff6:	6078      	str	r0, [r7, #4]
 8015ff8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8015ffa:	2300      	movs	r3, #0
 8015ffc:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8015ffe:	683b      	ldr	r3, [r7, #0]
 8016000:	781b      	ldrb	r3, [r3, #0]
 8016002:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8016006:	2b20      	cmp	r3, #32
 8016008:	d004      	beq.n	8016014 <USBD_StdDevReq+0x24>
 801600a:	2b40      	cmp	r3, #64	; 0x40
 801600c:	d002      	beq.n	8016014 <USBD_StdDevReq+0x24>
 801600e:	2b00      	cmp	r3, #0
 8016010:	d00a      	beq.n	8016028 <USBD_StdDevReq+0x38>
 8016012:	e050      	b.n	80160b6 <USBD_StdDevReq+0xc6>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8016014:	687b      	ldr	r3, [r7, #4]
 8016016:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801601a:	689b      	ldr	r3, [r3, #8]
 801601c:	6839      	ldr	r1, [r7, #0]
 801601e:	6878      	ldr	r0, [r7, #4]
 8016020:	4798      	blx	r3
 8016022:	4603      	mov	r3, r0
 8016024:	73fb      	strb	r3, [r7, #15]
    break;
 8016026:	e04b      	b.n	80160c0 <USBD_StdDevReq+0xd0>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 8016028:	683b      	ldr	r3, [r7, #0]
 801602a:	785b      	ldrb	r3, [r3, #1]
 801602c:	2b09      	cmp	r3, #9
 801602e:	d83c      	bhi.n	80160aa <USBD_StdDevReq+0xba>
 8016030:	a201      	add	r2, pc, #4	; (adr r2, 8016038 <USBD_StdDevReq+0x48>)
 8016032:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8016036:	bf00      	nop
 8016038:	0801608d 	.word	0x0801608d
 801603c:	080160a1 	.word	0x080160a1
 8016040:	080160ab 	.word	0x080160ab
 8016044:	08016097 	.word	0x08016097
 8016048:	080160ab 	.word	0x080160ab
 801604c:	0801606b 	.word	0x0801606b
 8016050:	08016061 	.word	0x08016061
 8016054:	080160ab 	.word	0x080160ab
 8016058:	08016083 	.word	0x08016083
 801605c:	08016075 	.word	0x08016075
    {
    case USB_REQ_GET_DESCRIPTOR:
      USBD_GetDescriptor(pdev, req);
 8016060:	6839      	ldr	r1, [r7, #0]
 8016062:	6878      	ldr	r0, [r7, #4]
 8016064:	f000 f9ce 	bl	8016404 <USBD_GetDescriptor>
      break;
 8016068:	e024      	b.n	80160b4 <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_ADDRESS:
      USBD_SetAddress(pdev, req);
 801606a:	6839      	ldr	r1, [r7, #0]
 801606c:	6878      	ldr	r0, [r7, #4]
 801606e:	f000 fb33 	bl	80166d8 <USBD_SetAddress>
      break;
 8016072:	e01f      	b.n	80160b4 <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_CONFIGURATION:
      ret = USBD_SetConfig(pdev, req);
 8016074:	6839      	ldr	r1, [r7, #0]
 8016076:	6878      	ldr	r0, [r7, #4]
 8016078:	f000 fb70 	bl	801675c <USBD_SetConfig>
 801607c:	4603      	mov	r3, r0
 801607e:	73fb      	strb	r3, [r7, #15]
      break;
 8016080:	e018      	b.n	80160b4 <USBD_StdDevReq+0xc4>

    case USB_REQ_GET_CONFIGURATION:
      USBD_GetConfig(pdev, req);
 8016082:	6839      	ldr	r1, [r7, #0]
 8016084:	6878      	ldr	r0, [r7, #4]
 8016086:	f000 fc0d 	bl	80168a4 <USBD_GetConfig>
      break;
 801608a:	e013      	b.n	80160b4 <USBD_StdDevReq+0xc4>

    case USB_REQ_GET_STATUS:
      USBD_GetStatus(pdev, req);
 801608c:	6839      	ldr	r1, [r7, #0]
 801608e:	6878      	ldr	r0, [r7, #4]
 8016090:	f000 fc3c 	bl	801690c <USBD_GetStatus>
      break;
 8016094:	e00e      	b.n	80160b4 <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_FEATURE:
      USBD_SetFeature(pdev, req);
 8016096:	6839      	ldr	r1, [r7, #0]
 8016098:	6878      	ldr	r0, [r7, #4]
 801609a:	f000 fc6a 	bl	8016972 <USBD_SetFeature>
      break;
 801609e:	e009      	b.n	80160b4 <USBD_StdDevReq+0xc4>

    case USB_REQ_CLEAR_FEATURE:
      USBD_ClrFeature(pdev, req);
 80160a0:	6839      	ldr	r1, [r7, #0]
 80160a2:	6878      	ldr	r0, [r7, #4]
 80160a4:	f000 fc79 	bl	801699a <USBD_ClrFeature>
      break;
 80160a8:	e004      	b.n	80160b4 <USBD_StdDevReq+0xc4>

    default:
      USBD_CtlError(pdev, req);
 80160aa:	6839      	ldr	r1, [r7, #0]
 80160ac:	6878      	ldr	r0, [r7, #4]
 80160ae:	f000 fccf 	bl	8016a50 <USBD_CtlError>
      break;
 80160b2:	bf00      	nop
    }
    break;
 80160b4:	e004      	b.n	80160c0 <USBD_StdDevReq+0xd0>

  default:
    USBD_CtlError(pdev, req);
 80160b6:	6839      	ldr	r1, [r7, #0]
 80160b8:	6878      	ldr	r0, [r7, #4]
 80160ba:	f000 fcc9 	bl	8016a50 <USBD_CtlError>
    break;
 80160be:	bf00      	nop
  }

  return ret;
 80160c0:	7bfb      	ldrb	r3, [r7, #15]
}
 80160c2:	4618      	mov	r0, r3
 80160c4:	3710      	adds	r7, #16
 80160c6:	46bd      	mov	sp, r7
 80160c8:	bd80      	pop	{r7, pc}
 80160ca:	bf00      	nop

080160cc <USBD_StdItfReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80160cc:	b580      	push	{r7, lr}
 80160ce:	b084      	sub	sp, #16
 80160d0:	af00      	add	r7, sp, #0
 80160d2:	6078      	str	r0, [r7, #4]
 80160d4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80160d6:	2300      	movs	r3, #0
 80160d8:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80160da:	683b      	ldr	r3, [r7, #0]
 80160dc:	781b      	ldrb	r3, [r3, #0]
 80160de:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80160e2:	2b20      	cmp	r3, #32
 80160e4:	d003      	beq.n	80160ee <USBD_StdItfReq+0x22>
 80160e6:	2b40      	cmp	r3, #64	; 0x40
 80160e8:	d001      	beq.n	80160ee <USBD_StdItfReq+0x22>
 80160ea:	2b00      	cmp	r3, #0
 80160ec:	d12a      	bne.n	8016144 <USBD_StdItfReq+0x78>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
  case USB_REQ_TYPE_STANDARD:
    switch (pdev->dev_state)
 80160ee:	687b      	ldr	r3, [r7, #4]
 80160f0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80160f4:	3b01      	subs	r3, #1
 80160f6:	2b02      	cmp	r3, #2
 80160f8:	d81d      	bhi.n	8016136 <USBD_StdItfReq+0x6a>
    {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:

      if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 80160fa:	683b      	ldr	r3, [r7, #0]
 80160fc:	889b      	ldrh	r3, [r3, #4]
 80160fe:	b2db      	uxtb	r3, r3
 8016100:	2b01      	cmp	r3, #1
 8016102:	d813      	bhi.n	801612c <USBD_StdItfReq+0x60>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8016104:	687b      	ldr	r3, [r7, #4]
 8016106:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801610a:	689b      	ldr	r3, [r3, #8]
 801610c:	6839      	ldr	r1, [r7, #0]
 801610e:	6878      	ldr	r0, [r7, #4]
 8016110:	4798      	blx	r3
 8016112:	4603      	mov	r3, r0
 8016114:	73fb      	strb	r3, [r7, #15]

        if ((req->wLength == 0U) && (ret == USBD_OK))
 8016116:	683b      	ldr	r3, [r7, #0]
 8016118:	88db      	ldrh	r3, [r3, #6]
 801611a:	2b00      	cmp	r3, #0
 801611c:	d110      	bne.n	8016140 <USBD_StdItfReq+0x74>
 801611e:	7bfb      	ldrb	r3, [r7, #15]
 8016120:	2b00      	cmp	r3, #0
 8016122:	d10d      	bne.n	8016140 <USBD_StdItfReq+0x74>
        {
          (void)USBD_CtlSendStatus(pdev);
 8016124:	6878      	ldr	r0, [r7, #4]
 8016126:	f000 fd41 	bl	8016bac <USBD_CtlSendStatus>
      }
      else
      {
        USBD_CtlError(pdev, req);
      }
      break;
 801612a:	e009      	b.n	8016140 <USBD_StdItfReq+0x74>
        USBD_CtlError(pdev, req);
 801612c:	6839      	ldr	r1, [r7, #0]
 801612e:	6878      	ldr	r0, [r7, #4]
 8016130:	f000 fc8e 	bl	8016a50 <USBD_CtlError>
      break;
 8016134:	e004      	b.n	8016140 <USBD_StdItfReq+0x74>

    default:
      USBD_CtlError(pdev, req);
 8016136:	6839      	ldr	r1, [r7, #0]
 8016138:	6878      	ldr	r0, [r7, #4]
 801613a:	f000 fc89 	bl	8016a50 <USBD_CtlError>
      break;
 801613e:	e000      	b.n	8016142 <USBD_StdItfReq+0x76>
      break;
 8016140:	bf00      	nop
    }
    break;
 8016142:	e004      	b.n	801614e <USBD_StdItfReq+0x82>

  default:
    USBD_CtlError(pdev, req);
 8016144:	6839      	ldr	r1, [r7, #0]
 8016146:	6878      	ldr	r0, [r7, #4]
 8016148:	f000 fc82 	bl	8016a50 <USBD_CtlError>
    break;
 801614c:	bf00      	nop
  }

  return ret;
 801614e:	7bfb      	ldrb	r3, [r7, #15]
}
 8016150:	4618      	mov	r0, r3
 8016152:	3710      	adds	r7, #16
 8016154:	46bd      	mov	sp, r7
 8016156:	bd80      	pop	{r7, pc}

08016158 <USBD_StdEPReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8016158:	b580      	push	{r7, lr}
 801615a:	b084      	sub	sp, #16
 801615c:	af00      	add	r7, sp, #0
 801615e:	6078      	str	r0, [r7, #4]
 8016160:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8016162:	2300      	movs	r3, #0
 8016164:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 8016166:	683b      	ldr	r3, [r7, #0]
 8016168:	889b      	ldrh	r3, [r3, #4]
 801616a:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 801616c:	683b      	ldr	r3, [r7, #0]
 801616e:	781b      	ldrb	r3, [r3, #0]
 8016170:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8016174:	2b20      	cmp	r3, #32
 8016176:	d004      	beq.n	8016182 <USBD_StdEPReq+0x2a>
 8016178:	2b40      	cmp	r3, #64	; 0x40
 801617a:	d002      	beq.n	8016182 <USBD_StdEPReq+0x2a>
 801617c:	2b00      	cmp	r3, #0
 801617e:	d00a      	beq.n	8016196 <USBD_StdEPReq+0x3e>
 8016180:	e135      	b.n	80163ee <USBD_StdEPReq+0x296>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8016182:	687b      	ldr	r3, [r7, #4]
 8016184:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8016188:	689b      	ldr	r3, [r3, #8]
 801618a:	6839      	ldr	r1, [r7, #0]
 801618c:	6878      	ldr	r0, [r7, #4]
 801618e:	4798      	blx	r3
 8016190:	4603      	mov	r3, r0
 8016192:	73fb      	strb	r3, [r7, #15]
    break;
 8016194:	e130      	b.n	80163f8 <USBD_StdEPReq+0x2a0>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 8016196:	683b      	ldr	r3, [r7, #0]
 8016198:	785b      	ldrb	r3, [r3, #1]
 801619a:	2b01      	cmp	r3, #1
 801619c:	d03e      	beq.n	801621c <USBD_StdEPReq+0xc4>
 801619e:	2b03      	cmp	r3, #3
 80161a0:	d002      	beq.n	80161a8 <USBD_StdEPReq+0x50>
 80161a2:	2b00      	cmp	r3, #0
 80161a4:	d077      	beq.n	8016296 <USBD_StdEPReq+0x13e>
 80161a6:	e11c      	b.n	80163e2 <USBD_StdEPReq+0x28a>
    {
    case USB_REQ_SET_FEATURE:
      switch (pdev->dev_state)
 80161a8:	687b      	ldr	r3, [r7, #4]
 80161aa:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80161ae:	2b02      	cmp	r3, #2
 80161b0:	d002      	beq.n	80161b8 <USBD_StdEPReq+0x60>
 80161b2:	2b03      	cmp	r3, #3
 80161b4:	d015      	beq.n	80161e2 <USBD_StdEPReq+0x8a>
 80161b6:	e02b      	b.n	8016210 <USBD_StdEPReq+0xb8>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80161b8:	7bbb      	ldrb	r3, [r7, #14]
 80161ba:	2b00      	cmp	r3, #0
 80161bc:	d00c      	beq.n	80161d8 <USBD_StdEPReq+0x80>
 80161be:	7bbb      	ldrb	r3, [r7, #14]
 80161c0:	2b80      	cmp	r3, #128	; 0x80
 80161c2:	d009      	beq.n	80161d8 <USBD_StdEPReq+0x80>
        {
          (void)USBD_LL_StallEP(pdev, ep_addr);
 80161c4:	7bbb      	ldrb	r3, [r7, #14]
 80161c6:	4619      	mov	r1, r3
 80161c8:	6878      	ldr	r0, [r7, #4]
 80161ca:	f003 fbfa 	bl	80199c2 <USBD_LL_StallEP>
          (void)USBD_LL_StallEP(pdev, 0x80U);
 80161ce:	2180      	movs	r1, #128	; 0x80
 80161d0:	6878      	ldr	r0, [r7, #4]
 80161d2:	f003 fbf6 	bl	80199c2 <USBD_LL_StallEP>
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 80161d6:	e020      	b.n	801621a <USBD_StdEPReq+0xc2>
          USBD_CtlError(pdev, req);
 80161d8:	6839      	ldr	r1, [r7, #0]
 80161da:	6878      	ldr	r0, [r7, #4]
 80161dc:	f000 fc38 	bl	8016a50 <USBD_CtlError>
        break;
 80161e0:	e01b      	b.n	801621a <USBD_StdEPReq+0xc2>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 80161e2:	683b      	ldr	r3, [r7, #0]
 80161e4:	885b      	ldrh	r3, [r3, #2]
 80161e6:	2b00      	cmp	r3, #0
 80161e8:	d10e      	bne.n	8016208 <USBD_StdEPReq+0xb0>
        {
          if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 80161ea:	7bbb      	ldrb	r3, [r7, #14]
 80161ec:	2b00      	cmp	r3, #0
 80161ee:	d00b      	beq.n	8016208 <USBD_StdEPReq+0xb0>
 80161f0:	7bbb      	ldrb	r3, [r7, #14]
 80161f2:	2b80      	cmp	r3, #128	; 0x80
 80161f4:	d008      	beq.n	8016208 <USBD_StdEPReq+0xb0>
 80161f6:	683b      	ldr	r3, [r7, #0]
 80161f8:	88db      	ldrh	r3, [r3, #6]
 80161fa:	2b00      	cmp	r3, #0
 80161fc:	d104      	bne.n	8016208 <USBD_StdEPReq+0xb0>
          {
            (void)USBD_LL_StallEP(pdev, ep_addr);
 80161fe:	7bbb      	ldrb	r3, [r7, #14]
 8016200:	4619      	mov	r1, r3
 8016202:	6878      	ldr	r0, [r7, #4]
 8016204:	f003 fbdd 	bl	80199c2 <USBD_LL_StallEP>
          }
        }
        (void)USBD_CtlSendStatus(pdev);
 8016208:	6878      	ldr	r0, [r7, #4]
 801620a:	f000 fccf 	bl	8016bac <USBD_CtlSendStatus>

        break;
 801620e:	e004      	b.n	801621a <USBD_StdEPReq+0xc2>

      default:
        USBD_CtlError(pdev, req);
 8016210:	6839      	ldr	r1, [r7, #0]
 8016212:	6878      	ldr	r0, [r7, #4]
 8016214:	f000 fc1c 	bl	8016a50 <USBD_CtlError>
        break;
 8016218:	bf00      	nop
      }
      break;
 801621a:	e0e7      	b.n	80163ec <USBD_StdEPReq+0x294>

    case USB_REQ_CLEAR_FEATURE:

      switch (pdev->dev_state)
 801621c:	687b      	ldr	r3, [r7, #4]
 801621e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8016222:	2b02      	cmp	r3, #2
 8016224:	d002      	beq.n	801622c <USBD_StdEPReq+0xd4>
 8016226:	2b03      	cmp	r3, #3
 8016228:	d015      	beq.n	8016256 <USBD_StdEPReq+0xfe>
 801622a:	e02d      	b.n	8016288 <USBD_StdEPReq+0x130>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 801622c:	7bbb      	ldrb	r3, [r7, #14]
 801622e:	2b00      	cmp	r3, #0
 8016230:	d00c      	beq.n	801624c <USBD_StdEPReq+0xf4>
 8016232:	7bbb      	ldrb	r3, [r7, #14]
 8016234:	2b80      	cmp	r3, #128	; 0x80
 8016236:	d009      	beq.n	801624c <USBD_StdEPReq+0xf4>
        {
          (void)USBD_LL_StallEP(pdev, ep_addr);
 8016238:	7bbb      	ldrb	r3, [r7, #14]
 801623a:	4619      	mov	r1, r3
 801623c:	6878      	ldr	r0, [r7, #4]
 801623e:	f003 fbc0 	bl	80199c2 <USBD_LL_StallEP>
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8016242:	2180      	movs	r1, #128	; 0x80
 8016244:	6878      	ldr	r0, [r7, #4]
 8016246:	f003 fbbc 	bl	80199c2 <USBD_LL_StallEP>
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 801624a:	e023      	b.n	8016294 <USBD_StdEPReq+0x13c>
          USBD_CtlError(pdev, req);
 801624c:	6839      	ldr	r1, [r7, #0]
 801624e:	6878      	ldr	r0, [r7, #4]
 8016250:	f000 fbfe 	bl	8016a50 <USBD_CtlError>
        break;
 8016254:	e01e      	b.n	8016294 <USBD_StdEPReq+0x13c>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 8016256:	683b      	ldr	r3, [r7, #0]
 8016258:	885b      	ldrh	r3, [r3, #2]
 801625a:	2b00      	cmp	r3, #0
 801625c:	d119      	bne.n	8016292 <USBD_StdEPReq+0x13a>
        {
          if ((ep_addr & 0x7FU) != 0x00U)
 801625e:	7bbb      	ldrb	r3, [r7, #14]
 8016260:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8016264:	2b00      	cmp	r3, #0
 8016266:	d004      	beq.n	8016272 <USBD_StdEPReq+0x11a>
          {
            (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8016268:	7bbb      	ldrb	r3, [r7, #14]
 801626a:	4619      	mov	r1, r3
 801626c:	6878      	ldr	r0, [r7, #4]
 801626e:	f003 fbc7 	bl	8019a00 <USBD_LL_ClearStallEP>
          }
          (void)USBD_CtlSendStatus(pdev);
 8016272:	6878      	ldr	r0, [r7, #4]
 8016274:	f000 fc9a 	bl	8016bac <USBD_CtlSendStatus>
          (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8016278:	687b      	ldr	r3, [r7, #4]
 801627a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801627e:	689b      	ldr	r3, [r3, #8]
 8016280:	6839      	ldr	r1, [r7, #0]
 8016282:	6878      	ldr	r0, [r7, #4]
 8016284:	4798      	blx	r3
        }
        break;
 8016286:	e004      	b.n	8016292 <USBD_StdEPReq+0x13a>

      default:
        USBD_CtlError(pdev, req);
 8016288:	6839      	ldr	r1, [r7, #0]
 801628a:	6878      	ldr	r0, [r7, #4]
 801628c:	f000 fbe0 	bl	8016a50 <USBD_CtlError>
        break;
 8016290:	e000      	b.n	8016294 <USBD_StdEPReq+0x13c>
        break;
 8016292:	bf00      	nop
      }
      break;
 8016294:	e0aa      	b.n	80163ec <USBD_StdEPReq+0x294>

    case USB_REQ_GET_STATUS:
      switch (pdev->dev_state)
 8016296:	687b      	ldr	r3, [r7, #4]
 8016298:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801629c:	2b02      	cmp	r3, #2
 801629e:	d002      	beq.n	80162a6 <USBD_StdEPReq+0x14e>
 80162a0:	2b03      	cmp	r3, #3
 80162a2:	d032      	beq.n	801630a <USBD_StdEPReq+0x1b2>
 80162a4:	e097      	b.n	80163d6 <USBD_StdEPReq+0x27e>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80162a6:	7bbb      	ldrb	r3, [r7, #14]
 80162a8:	2b00      	cmp	r3, #0
 80162aa:	d007      	beq.n	80162bc <USBD_StdEPReq+0x164>
 80162ac:	7bbb      	ldrb	r3, [r7, #14]
 80162ae:	2b80      	cmp	r3, #128	; 0x80
 80162b0:	d004      	beq.n	80162bc <USBD_StdEPReq+0x164>
        {
          USBD_CtlError(pdev, req);
 80162b2:	6839      	ldr	r1, [r7, #0]
 80162b4:	6878      	ldr	r0, [r7, #4]
 80162b6:	f000 fbcb 	bl	8016a50 <USBD_CtlError>
          break;
 80162ba:	e091      	b.n	80163e0 <USBD_StdEPReq+0x288>
        }
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80162bc:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80162c0:	2b00      	cmp	r3, #0
 80162c2:	da0b      	bge.n	80162dc <USBD_StdEPReq+0x184>
 80162c4:	7bbb      	ldrb	r3, [r7, #14]
 80162c6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80162ca:	4613      	mov	r3, r2
 80162cc:	009b      	lsls	r3, r3, #2
 80162ce:	4413      	add	r3, r2
 80162d0:	009b      	lsls	r3, r3, #2
 80162d2:	3310      	adds	r3, #16
 80162d4:	687a      	ldr	r2, [r7, #4]
 80162d6:	4413      	add	r3, r2
 80162d8:	3304      	adds	r3, #4
 80162da:	e00b      	b.n	80162f4 <USBD_StdEPReq+0x19c>
              &pdev->ep_out[ep_addr & 0x7FU];
 80162dc:	7bbb      	ldrb	r3, [r7, #14]
 80162de:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80162e2:	4613      	mov	r3, r2
 80162e4:	009b      	lsls	r3, r3, #2
 80162e6:	4413      	add	r3, r2
 80162e8:	009b      	lsls	r3, r3, #2
 80162ea:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80162ee:	687a      	ldr	r2, [r7, #4]
 80162f0:	4413      	add	r3, r2
 80162f2:	3304      	adds	r3, #4
 80162f4:	60bb      	str	r3, [r7, #8]

        pep->status = 0x0000U;
 80162f6:	68bb      	ldr	r3, [r7, #8]
 80162f8:	2200      	movs	r2, #0
 80162fa:	601a      	str	r2, [r3, #0]

        (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80162fc:	68bb      	ldr	r3, [r7, #8]
 80162fe:	2202      	movs	r2, #2
 8016300:	4619      	mov	r1, r3
 8016302:	6878      	ldr	r0, [r7, #4]
 8016304:	f000 fc15 	bl	8016b32 <USBD_CtlSendData>
        break;
 8016308:	e06a      	b.n	80163e0 <USBD_StdEPReq+0x288>

      case USBD_STATE_CONFIGURED:
        if ((ep_addr & 0x80U) == 0x80U)
 801630a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 801630e:	2b00      	cmp	r3, #0
 8016310:	da11      	bge.n	8016336 <USBD_StdEPReq+0x1de>
        {
          if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8016312:	7bbb      	ldrb	r3, [r7, #14]
 8016314:	f003 020f 	and.w	r2, r3, #15
 8016318:	6879      	ldr	r1, [r7, #4]
 801631a:	4613      	mov	r3, r2
 801631c:	009b      	lsls	r3, r3, #2
 801631e:	4413      	add	r3, r2
 8016320:	009b      	lsls	r3, r3, #2
 8016322:	440b      	add	r3, r1
 8016324:	3324      	adds	r3, #36	; 0x24
 8016326:	881b      	ldrh	r3, [r3, #0]
 8016328:	2b00      	cmp	r3, #0
 801632a:	d117      	bne.n	801635c <USBD_StdEPReq+0x204>
          {
            USBD_CtlError(pdev, req);
 801632c:	6839      	ldr	r1, [r7, #0]
 801632e:	6878      	ldr	r0, [r7, #4]
 8016330:	f000 fb8e 	bl	8016a50 <USBD_CtlError>
            break;
 8016334:	e054      	b.n	80163e0 <USBD_StdEPReq+0x288>
          }
        }
        else
        {
          if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8016336:	7bbb      	ldrb	r3, [r7, #14]
 8016338:	f003 020f 	and.w	r2, r3, #15
 801633c:	6879      	ldr	r1, [r7, #4]
 801633e:	4613      	mov	r3, r2
 8016340:	009b      	lsls	r3, r3, #2
 8016342:	4413      	add	r3, r2
 8016344:	009b      	lsls	r3, r3, #2
 8016346:	440b      	add	r3, r1
 8016348:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 801634c:	881b      	ldrh	r3, [r3, #0]
 801634e:	2b00      	cmp	r3, #0
 8016350:	d104      	bne.n	801635c <USBD_StdEPReq+0x204>
          {
            USBD_CtlError(pdev, req);
 8016352:	6839      	ldr	r1, [r7, #0]
 8016354:	6878      	ldr	r0, [r7, #4]
 8016356:	f000 fb7b 	bl	8016a50 <USBD_CtlError>
            break;
 801635a:	e041      	b.n	80163e0 <USBD_StdEPReq+0x288>
          }
        }

        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 801635c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8016360:	2b00      	cmp	r3, #0
 8016362:	da0b      	bge.n	801637c <USBD_StdEPReq+0x224>
 8016364:	7bbb      	ldrb	r3, [r7, #14]
 8016366:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 801636a:	4613      	mov	r3, r2
 801636c:	009b      	lsls	r3, r3, #2
 801636e:	4413      	add	r3, r2
 8016370:	009b      	lsls	r3, r3, #2
 8016372:	3310      	adds	r3, #16
 8016374:	687a      	ldr	r2, [r7, #4]
 8016376:	4413      	add	r3, r2
 8016378:	3304      	adds	r3, #4
 801637a:	e00b      	b.n	8016394 <USBD_StdEPReq+0x23c>
              &pdev->ep_out[ep_addr & 0x7FU];
 801637c:	7bbb      	ldrb	r3, [r7, #14]
 801637e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8016382:	4613      	mov	r3, r2
 8016384:	009b      	lsls	r3, r3, #2
 8016386:	4413      	add	r3, r2
 8016388:	009b      	lsls	r3, r3, #2
 801638a:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 801638e:	687a      	ldr	r2, [r7, #4]
 8016390:	4413      	add	r3, r2
 8016392:	3304      	adds	r3, #4
 8016394:	60bb      	str	r3, [r7, #8]

          if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8016396:	7bbb      	ldrb	r3, [r7, #14]
 8016398:	2b00      	cmp	r3, #0
 801639a:	d002      	beq.n	80163a2 <USBD_StdEPReq+0x24a>
 801639c:	7bbb      	ldrb	r3, [r7, #14]
 801639e:	2b80      	cmp	r3, #128	; 0x80
 80163a0:	d103      	bne.n	80163aa <USBD_StdEPReq+0x252>
          {
            pep->status = 0x0000U;
 80163a2:	68bb      	ldr	r3, [r7, #8]
 80163a4:	2200      	movs	r2, #0
 80163a6:	601a      	str	r2, [r3, #0]
 80163a8:	e00e      	b.n	80163c8 <USBD_StdEPReq+0x270>
          }
          else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 80163aa:	7bbb      	ldrb	r3, [r7, #14]
 80163ac:	4619      	mov	r1, r3
 80163ae:	6878      	ldr	r0, [r7, #4]
 80163b0:	f003 fb45 	bl	8019a3e <USBD_LL_IsStallEP>
 80163b4:	4603      	mov	r3, r0
 80163b6:	2b00      	cmp	r3, #0
 80163b8:	d003      	beq.n	80163c2 <USBD_StdEPReq+0x26a>
          {
            pep->status = 0x0001U;
 80163ba:	68bb      	ldr	r3, [r7, #8]
 80163bc:	2201      	movs	r2, #1
 80163be:	601a      	str	r2, [r3, #0]
 80163c0:	e002      	b.n	80163c8 <USBD_StdEPReq+0x270>
          }
          else
          {
            pep->status = 0x0000U;
 80163c2:	68bb      	ldr	r3, [r7, #8]
 80163c4:	2200      	movs	r2, #0
 80163c6:	601a      	str	r2, [r3, #0]
          }

          (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80163c8:	68bb      	ldr	r3, [r7, #8]
 80163ca:	2202      	movs	r2, #2
 80163cc:	4619      	mov	r1, r3
 80163ce:	6878      	ldr	r0, [r7, #4]
 80163d0:	f000 fbaf 	bl	8016b32 <USBD_CtlSendData>
          break;
 80163d4:	e004      	b.n	80163e0 <USBD_StdEPReq+0x288>

      default:
        USBD_CtlError(pdev, req);
 80163d6:	6839      	ldr	r1, [r7, #0]
 80163d8:	6878      	ldr	r0, [r7, #4]
 80163da:	f000 fb39 	bl	8016a50 <USBD_CtlError>
        break;
 80163de:	bf00      	nop
      }
      break;
 80163e0:	e004      	b.n	80163ec <USBD_StdEPReq+0x294>

    default:
      USBD_CtlError(pdev, req);
 80163e2:	6839      	ldr	r1, [r7, #0]
 80163e4:	6878      	ldr	r0, [r7, #4]
 80163e6:	f000 fb33 	bl	8016a50 <USBD_CtlError>
      break;
 80163ea:	bf00      	nop
    }
    break;
 80163ec:	e004      	b.n	80163f8 <USBD_StdEPReq+0x2a0>

  default:
    USBD_CtlError(pdev, req);
 80163ee:	6839      	ldr	r1, [r7, #0]
 80163f0:	6878      	ldr	r0, [r7, #4]
 80163f2:	f000 fb2d 	bl	8016a50 <USBD_CtlError>
    break;
 80163f6:	bf00      	nop
  }

  return ret;
 80163f8:	7bfb      	ldrb	r3, [r7, #15]
}
 80163fa:	4618      	mov	r0, r3
 80163fc:	3710      	adds	r7, #16
 80163fe:	46bd      	mov	sp, r7
 8016400:	bd80      	pop	{r7, pc}
	...

08016404 <USBD_GetDescriptor>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8016404:	b580      	push	{r7, lr}
 8016406:	b084      	sub	sp, #16
 8016408:	af00      	add	r7, sp, #0
 801640a:	6078      	str	r0, [r7, #4]
 801640c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 801640e:	2300      	movs	r3, #0
 8016410:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8016412:	2300      	movs	r3, #0
 8016414:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8016416:	2300      	movs	r3, #0
 8016418:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 801641a:	683b      	ldr	r3, [r7, #0]
 801641c:	885b      	ldrh	r3, [r3, #2]
 801641e:	0a1b      	lsrs	r3, r3, #8
 8016420:	b29b      	uxth	r3, r3
 8016422:	3b01      	subs	r3, #1
 8016424:	2b06      	cmp	r3, #6
 8016426:	f200 8128 	bhi.w	801667a <USBD_GetDescriptor+0x276>
 801642a:	a201      	add	r2, pc, #4	; (adr r2, 8016430 <USBD_GetDescriptor+0x2c>)
 801642c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8016430:	0801644d 	.word	0x0801644d
 8016434:	08016465 	.word	0x08016465
 8016438:	080164a5 	.word	0x080164a5
 801643c:	0801667b 	.word	0x0801667b
 8016440:	0801667b 	.word	0x0801667b
 8016444:	0801661b 	.word	0x0801661b
 8016448:	08016647 	.word	0x08016647
      err++;
    }
    break;
#endif
  case USB_DESC_TYPE_DEVICE:
    pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 801644c:	687b      	ldr	r3, [r7, #4]
 801644e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8016452:	681b      	ldr	r3, [r3, #0]
 8016454:	687a      	ldr	r2, [r7, #4]
 8016456:	7c12      	ldrb	r2, [r2, #16]
 8016458:	f107 0108 	add.w	r1, r7, #8
 801645c:	4610      	mov	r0, r2
 801645e:	4798      	blx	r3
 8016460:	60f8      	str	r0, [r7, #12]
    break;
 8016462:	e112      	b.n	801668a <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_CONFIGURATION:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8016464:	687b      	ldr	r3, [r7, #4]
 8016466:	7c1b      	ldrb	r3, [r3, #16]
 8016468:	2b00      	cmp	r3, #0
 801646a:	d10d      	bne.n	8016488 <USBD_GetDescriptor+0x84>
    {
      pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 801646c:	687b      	ldr	r3, [r7, #4]
 801646e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8016472:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8016474:	f107 0208 	add.w	r2, r7, #8
 8016478:	4610      	mov	r0, r2
 801647a:	4798      	blx	r3
 801647c:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 801647e:	68fb      	ldr	r3, [r7, #12]
 8016480:	3301      	adds	r3, #1
 8016482:	2202      	movs	r2, #2
 8016484:	701a      	strb	r2, [r3, #0]
    else
    {
      pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
    }
    break;
 8016486:	e100      	b.n	801668a <USBD_GetDescriptor+0x286>
      pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8016488:	687b      	ldr	r3, [r7, #4]
 801648a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801648e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8016490:	f107 0208 	add.w	r2, r7, #8
 8016494:	4610      	mov	r0, r2
 8016496:	4798      	blx	r3
 8016498:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 801649a:	68fb      	ldr	r3, [r7, #12]
 801649c:	3301      	adds	r3, #1
 801649e:	2202      	movs	r2, #2
 80164a0:	701a      	strb	r2, [r3, #0]
    break;
 80164a2:	e0f2      	b.n	801668a <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_STRING:
    switch ((uint8_t)(req->wValue))
 80164a4:	683b      	ldr	r3, [r7, #0]
 80164a6:	885b      	ldrh	r3, [r3, #2]
 80164a8:	b2db      	uxtb	r3, r3
 80164aa:	2b05      	cmp	r3, #5
 80164ac:	f200 80ac 	bhi.w	8016608 <USBD_GetDescriptor+0x204>
 80164b0:	a201      	add	r2, pc, #4	; (adr r2, 80164b8 <USBD_GetDescriptor+0xb4>)
 80164b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80164b6:	bf00      	nop
 80164b8:	080164d1 	.word	0x080164d1
 80164bc:	08016505 	.word	0x08016505
 80164c0:	08016539 	.word	0x08016539
 80164c4:	0801656d 	.word	0x0801656d
 80164c8:	080165a1 	.word	0x080165a1
 80164cc:	080165d5 	.word	0x080165d5
    {
    case USBD_IDX_LANGID_STR:
      if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 80164d0:	687b      	ldr	r3, [r7, #4]
 80164d2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80164d6:	685b      	ldr	r3, [r3, #4]
 80164d8:	2b00      	cmp	r3, #0
 80164da:	d00b      	beq.n	80164f4 <USBD_GetDescriptor+0xf0>
      {
        pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 80164dc:	687b      	ldr	r3, [r7, #4]
 80164de:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80164e2:	685b      	ldr	r3, [r3, #4]
 80164e4:	687a      	ldr	r2, [r7, #4]
 80164e6:	7c12      	ldrb	r2, [r2, #16]
 80164e8:	f107 0108 	add.w	r1, r7, #8
 80164ec:	4610      	mov	r0, r2
 80164ee:	4798      	blx	r3
 80164f0:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80164f2:	e091      	b.n	8016618 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 80164f4:	6839      	ldr	r1, [r7, #0]
 80164f6:	6878      	ldr	r0, [r7, #4]
 80164f8:	f000 faaa 	bl	8016a50 <USBD_CtlError>
        err++;
 80164fc:	7afb      	ldrb	r3, [r7, #11]
 80164fe:	3301      	adds	r3, #1
 8016500:	72fb      	strb	r3, [r7, #11]
      break;
 8016502:	e089      	b.n	8016618 <USBD_GetDescriptor+0x214>

    case USBD_IDX_MFC_STR:
      if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8016504:	687b      	ldr	r3, [r7, #4]
 8016506:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801650a:	689b      	ldr	r3, [r3, #8]
 801650c:	2b00      	cmp	r3, #0
 801650e:	d00b      	beq.n	8016528 <USBD_GetDescriptor+0x124>
      {
        pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8016510:	687b      	ldr	r3, [r7, #4]
 8016512:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8016516:	689b      	ldr	r3, [r3, #8]
 8016518:	687a      	ldr	r2, [r7, #4]
 801651a:	7c12      	ldrb	r2, [r2, #16]
 801651c:	f107 0108 	add.w	r1, r7, #8
 8016520:	4610      	mov	r0, r2
 8016522:	4798      	blx	r3
 8016524:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8016526:	e077      	b.n	8016618 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 8016528:	6839      	ldr	r1, [r7, #0]
 801652a:	6878      	ldr	r0, [r7, #4]
 801652c:	f000 fa90 	bl	8016a50 <USBD_CtlError>
        err++;
 8016530:	7afb      	ldrb	r3, [r7, #11]
 8016532:	3301      	adds	r3, #1
 8016534:	72fb      	strb	r3, [r7, #11]
      break;
 8016536:	e06f      	b.n	8016618 <USBD_GetDescriptor+0x214>

    case USBD_IDX_PRODUCT_STR:
      if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8016538:	687b      	ldr	r3, [r7, #4]
 801653a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801653e:	68db      	ldr	r3, [r3, #12]
 8016540:	2b00      	cmp	r3, #0
 8016542:	d00b      	beq.n	801655c <USBD_GetDescriptor+0x158>
      {
        pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8016544:	687b      	ldr	r3, [r7, #4]
 8016546:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801654a:	68db      	ldr	r3, [r3, #12]
 801654c:	687a      	ldr	r2, [r7, #4]
 801654e:	7c12      	ldrb	r2, [r2, #16]
 8016550:	f107 0108 	add.w	r1, r7, #8
 8016554:	4610      	mov	r0, r2
 8016556:	4798      	blx	r3
 8016558:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 801655a:	e05d      	b.n	8016618 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 801655c:	6839      	ldr	r1, [r7, #0]
 801655e:	6878      	ldr	r0, [r7, #4]
 8016560:	f000 fa76 	bl	8016a50 <USBD_CtlError>
        err++;
 8016564:	7afb      	ldrb	r3, [r7, #11]
 8016566:	3301      	adds	r3, #1
 8016568:	72fb      	strb	r3, [r7, #11]
      break;
 801656a:	e055      	b.n	8016618 <USBD_GetDescriptor+0x214>

    case USBD_IDX_SERIAL_STR:
      if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 801656c:	687b      	ldr	r3, [r7, #4]
 801656e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8016572:	691b      	ldr	r3, [r3, #16]
 8016574:	2b00      	cmp	r3, #0
 8016576:	d00b      	beq.n	8016590 <USBD_GetDescriptor+0x18c>
      {
        pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8016578:	687b      	ldr	r3, [r7, #4]
 801657a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801657e:	691b      	ldr	r3, [r3, #16]
 8016580:	687a      	ldr	r2, [r7, #4]
 8016582:	7c12      	ldrb	r2, [r2, #16]
 8016584:	f107 0108 	add.w	r1, r7, #8
 8016588:	4610      	mov	r0, r2
 801658a:	4798      	blx	r3
 801658c:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 801658e:	e043      	b.n	8016618 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 8016590:	6839      	ldr	r1, [r7, #0]
 8016592:	6878      	ldr	r0, [r7, #4]
 8016594:	f000 fa5c 	bl	8016a50 <USBD_CtlError>
        err++;
 8016598:	7afb      	ldrb	r3, [r7, #11]
 801659a:	3301      	adds	r3, #1
 801659c:	72fb      	strb	r3, [r7, #11]
      break;
 801659e:	e03b      	b.n	8016618 <USBD_GetDescriptor+0x214>

    case USBD_IDX_CONFIG_STR:
      if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 80165a0:	687b      	ldr	r3, [r7, #4]
 80165a2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80165a6:	695b      	ldr	r3, [r3, #20]
 80165a8:	2b00      	cmp	r3, #0
 80165aa:	d00b      	beq.n	80165c4 <USBD_GetDescriptor+0x1c0>
      {
        pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 80165ac:	687b      	ldr	r3, [r7, #4]
 80165ae:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80165b2:	695b      	ldr	r3, [r3, #20]
 80165b4:	687a      	ldr	r2, [r7, #4]
 80165b6:	7c12      	ldrb	r2, [r2, #16]
 80165b8:	f107 0108 	add.w	r1, r7, #8
 80165bc:	4610      	mov	r0, r2
 80165be:	4798      	blx	r3
 80165c0:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80165c2:	e029      	b.n	8016618 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 80165c4:	6839      	ldr	r1, [r7, #0]
 80165c6:	6878      	ldr	r0, [r7, #4]
 80165c8:	f000 fa42 	bl	8016a50 <USBD_CtlError>
        err++;
 80165cc:	7afb      	ldrb	r3, [r7, #11]
 80165ce:	3301      	adds	r3, #1
 80165d0:	72fb      	strb	r3, [r7, #11]
      break;
 80165d2:	e021      	b.n	8016618 <USBD_GetDescriptor+0x214>

    case USBD_IDX_INTERFACE_STR:
      if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 80165d4:	687b      	ldr	r3, [r7, #4]
 80165d6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80165da:	699b      	ldr	r3, [r3, #24]
 80165dc:	2b00      	cmp	r3, #0
 80165de:	d00b      	beq.n	80165f8 <USBD_GetDescriptor+0x1f4>
      {
        pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 80165e0:	687b      	ldr	r3, [r7, #4]
 80165e2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80165e6:	699b      	ldr	r3, [r3, #24]
 80165e8:	687a      	ldr	r2, [r7, #4]
 80165ea:	7c12      	ldrb	r2, [r2, #16]
 80165ec:	f107 0108 	add.w	r1, r7, #8
 80165f0:	4610      	mov	r0, r2
 80165f2:	4798      	blx	r3
 80165f4:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80165f6:	e00f      	b.n	8016618 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 80165f8:	6839      	ldr	r1, [r7, #0]
 80165fa:	6878      	ldr	r0, [r7, #4]
 80165fc:	f000 fa28 	bl	8016a50 <USBD_CtlError>
        err++;
 8016600:	7afb      	ldrb	r3, [r7, #11]
 8016602:	3301      	adds	r3, #1
 8016604:	72fb      	strb	r3, [r7, #11]
      break;
 8016606:	e007      	b.n	8016618 <USBD_GetDescriptor+0x214>
      {
        USBD_CtlError(pdev, req);
        err++;
      }
#else
      USBD_CtlError(pdev, req);
 8016608:	6839      	ldr	r1, [r7, #0]
 801660a:	6878      	ldr	r0, [r7, #4]
 801660c:	f000 fa20 	bl	8016a50 <USBD_CtlError>
      err++;
 8016610:	7afb      	ldrb	r3, [r7, #11]
 8016612:	3301      	adds	r3, #1
 8016614:	72fb      	strb	r3, [r7, #11]
#endif
      break;
 8016616:	bf00      	nop
    }
    break;
 8016618:	e037      	b.n	801668a <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_DEVICE_QUALIFIER:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 801661a:	687b      	ldr	r3, [r7, #4]
 801661c:	7c1b      	ldrb	r3, [r3, #16]
 801661e:	2b00      	cmp	r3, #0
 8016620:	d109      	bne.n	8016636 <USBD_GetDescriptor+0x232>
    {
      pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8016622:	687b      	ldr	r3, [r7, #4]
 8016624:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8016628:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801662a:	f107 0208 	add.w	r2, r7, #8
 801662e:	4610      	mov	r0, r2
 8016630:	4798      	blx	r3
 8016632:	60f8      	str	r0, [r7, #12]
    else
    {
      USBD_CtlError(pdev, req);
      err++;
    }
    break;
 8016634:	e029      	b.n	801668a <USBD_GetDescriptor+0x286>
      USBD_CtlError(pdev, req);
 8016636:	6839      	ldr	r1, [r7, #0]
 8016638:	6878      	ldr	r0, [r7, #4]
 801663a:	f000 fa09 	bl	8016a50 <USBD_CtlError>
      err++;
 801663e:	7afb      	ldrb	r3, [r7, #11]
 8016640:	3301      	adds	r3, #1
 8016642:	72fb      	strb	r3, [r7, #11]
    break;
 8016644:	e021      	b.n	801668a <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8016646:	687b      	ldr	r3, [r7, #4]
 8016648:	7c1b      	ldrb	r3, [r3, #16]
 801664a:	2b00      	cmp	r3, #0
 801664c:	d10d      	bne.n	801666a <USBD_GetDescriptor+0x266>
    {
      pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 801664e:	687b      	ldr	r3, [r7, #4]
 8016650:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8016654:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8016656:	f107 0208 	add.w	r2, r7, #8
 801665a:	4610      	mov	r0, r2
 801665c:	4798      	blx	r3
 801665e:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8016660:	68fb      	ldr	r3, [r7, #12]
 8016662:	3301      	adds	r3, #1
 8016664:	2207      	movs	r2, #7
 8016666:	701a      	strb	r2, [r3, #0]
    else
    {
      USBD_CtlError(pdev, req);
      err++;
    }
    break;
 8016668:	e00f      	b.n	801668a <USBD_GetDescriptor+0x286>
      USBD_CtlError(pdev, req);
 801666a:	6839      	ldr	r1, [r7, #0]
 801666c:	6878      	ldr	r0, [r7, #4]
 801666e:	f000 f9ef 	bl	8016a50 <USBD_CtlError>
      err++;
 8016672:	7afb      	ldrb	r3, [r7, #11]
 8016674:	3301      	adds	r3, #1
 8016676:	72fb      	strb	r3, [r7, #11]
    break;
 8016678:	e007      	b.n	801668a <USBD_GetDescriptor+0x286>

  default:
    USBD_CtlError(pdev, req);
 801667a:	6839      	ldr	r1, [r7, #0]
 801667c:	6878      	ldr	r0, [r7, #4]
 801667e:	f000 f9e7 	bl	8016a50 <USBD_CtlError>
    err++;
 8016682:	7afb      	ldrb	r3, [r7, #11]
 8016684:	3301      	adds	r3, #1
 8016686:	72fb      	strb	r3, [r7, #11]
    break;
 8016688:	bf00      	nop
  }

  if (err != 0U)
 801668a:	7afb      	ldrb	r3, [r7, #11]
 801668c:	2b00      	cmp	r3, #0
 801668e:	d11e      	bne.n	80166ce <USBD_GetDescriptor+0x2ca>
  {
    return;
  }
  else
  {
    if (req->wLength != 0U)
 8016690:	683b      	ldr	r3, [r7, #0]
 8016692:	88db      	ldrh	r3, [r3, #6]
 8016694:	2b00      	cmp	r3, #0
 8016696:	d016      	beq.n	80166c6 <USBD_GetDescriptor+0x2c2>
    {
      if (len != 0U)
 8016698:	893b      	ldrh	r3, [r7, #8]
 801669a:	2b00      	cmp	r3, #0
 801669c:	d00e      	beq.n	80166bc <USBD_GetDescriptor+0x2b8>
      {
        len = MIN(len, req->wLength);
 801669e:	683b      	ldr	r3, [r7, #0]
 80166a0:	88da      	ldrh	r2, [r3, #6]
 80166a2:	893b      	ldrh	r3, [r7, #8]
 80166a4:	4293      	cmp	r3, r2
 80166a6:	bf28      	it	cs
 80166a8:	4613      	movcs	r3, r2
 80166aa:	b29b      	uxth	r3, r3
 80166ac:	813b      	strh	r3, [r7, #8]
        (void)USBD_CtlSendData(pdev, pbuf, len);
 80166ae:	893b      	ldrh	r3, [r7, #8]
 80166b0:	461a      	mov	r2, r3
 80166b2:	68f9      	ldr	r1, [r7, #12]
 80166b4:	6878      	ldr	r0, [r7, #4]
 80166b6:	f000 fa3c 	bl	8016b32 <USBD_CtlSendData>
 80166ba:	e009      	b.n	80166d0 <USBD_GetDescriptor+0x2cc>
      }
      else
      {
        USBD_CtlError(pdev, req);
 80166bc:	6839      	ldr	r1, [r7, #0]
 80166be:	6878      	ldr	r0, [r7, #4]
 80166c0:	f000 f9c6 	bl	8016a50 <USBD_CtlError>
 80166c4:	e004      	b.n	80166d0 <USBD_GetDescriptor+0x2cc>
      }
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
 80166c6:	6878      	ldr	r0, [r7, #4]
 80166c8:	f000 fa70 	bl	8016bac <USBD_CtlSendStatus>
 80166cc:	e000      	b.n	80166d0 <USBD_GetDescriptor+0x2cc>
    return;
 80166ce:	bf00      	nop
    }
  }
}
 80166d0:	3710      	adds	r7, #16
 80166d2:	46bd      	mov	sp, r7
 80166d4:	bd80      	pop	{r7, pc}
 80166d6:	bf00      	nop

080166d8 <USBD_SetAddress>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80166d8:	b580      	push	{r7, lr}
 80166da:	b084      	sub	sp, #16
 80166dc:	af00      	add	r7, sp, #0
 80166de:	6078      	str	r0, [r7, #4]
 80166e0:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 80166e2:	683b      	ldr	r3, [r7, #0]
 80166e4:	889b      	ldrh	r3, [r3, #4]
 80166e6:	2b00      	cmp	r3, #0
 80166e8:	d130      	bne.n	801674c <USBD_SetAddress+0x74>
 80166ea:	683b      	ldr	r3, [r7, #0]
 80166ec:	88db      	ldrh	r3, [r3, #6]
 80166ee:	2b00      	cmp	r3, #0
 80166f0:	d12c      	bne.n	801674c <USBD_SetAddress+0x74>
 80166f2:	683b      	ldr	r3, [r7, #0]
 80166f4:	885b      	ldrh	r3, [r3, #2]
 80166f6:	2b7f      	cmp	r3, #127	; 0x7f
 80166f8:	d828      	bhi.n	801674c <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 80166fa:	683b      	ldr	r3, [r7, #0]
 80166fc:	885b      	ldrh	r3, [r3, #2]
 80166fe:	b2db      	uxtb	r3, r3
 8016700:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8016704:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8016706:	687b      	ldr	r3, [r7, #4]
 8016708:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801670c:	2b03      	cmp	r3, #3
 801670e:	d104      	bne.n	801671a <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 8016710:	6839      	ldr	r1, [r7, #0]
 8016712:	6878      	ldr	r0, [r7, #4]
 8016714:	f000 f99c 	bl	8016a50 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8016718:	e01c      	b.n	8016754 <USBD_SetAddress+0x7c>
    }
    else
    {
      pdev->dev_address = dev_addr;
 801671a:	687b      	ldr	r3, [r7, #4]
 801671c:	7bfa      	ldrb	r2, [r7, #15]
 801671e:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8016722:	7bfb      	ldrb	r3, [r7, #15]
 8016724:	4619      	mov	r1, r3
 8016726:	6878      	ldr	r0, [r7, #4]
 8016728:	f003 f9b5 	bl	8019a96 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 801672c:	6878      	ldr	r0, [r7, #4]
 801672e:	f000 fa3d 	bl	8016bac <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8016732:	7bfb      	ldrb	r3, [r7, #15]
 8016734:	2b00      	cmp	r3, #0
 8016736:	d004      	beq.n	8016742 <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8016738:	687b      	ldr	r3, [r7, #4]
 801673a:	2202      	movs	r2, #2
 801673c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8016740:	e008      	b.n	8016754 <USBD_SetAddress+0x7c>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8016742:	687b      	ldr	r3, [r7, #4]
 8016744:	2201      	movs	r2, #1
 8016746:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801674a:	e003      	b.n	8016754 <USBD_SetAddress+0x7c>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 801674c:	6839      	ldr	r1, [r7, #0]
 801674e:	6878      	ldr	r0, [r7, #4]
 8016750:	f000 f97e 	bl	8016a50 <USBD_CtlError>
  }
}
 8016754:	bf00      	nop
 8016756:	3710      	adds	r7, #16
 8016758:	46bd      	mov	sp, r7
 801675a:	bd80      	pop	{r7, pc}

0801675c <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 801675c:	b580      	push	{r7, lr}
 801675e:	b084      	sub	sp, #16
 8016760:	af00      	add	r7, sp, #0
 8016762:	6078      	str	r0, [r7, #4]
 8016764:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8016766:	2300      	movs	r3, #0
 8016768:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 801676a:	683b      	ldr	r3, [r7, #0]
 801676c:	885b      	ldrh	r3, [r3, #2]
 801676e:	b2da      	uxtb	r2, r3
 8016770:	4b4b      	ldr	r3, [pc, #300]	; (80168a0 <USBD_SetConfig+0x144>)
 8016772:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8016774:	4b4a      	ldr	r3, [pc, #296]	; (80168a0 <USBD_SetConfig+0x144>)
 8016776:	781b      	ldrb	r3, [r3, #0]
 8016778:	2b01      	cmp	r3, #1
 801677a:	d905      	bls.n	8016788 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 801677c:	6839      	ldr	r1, [r7, #0]
 801677e:	6878      	ldr	r0, [r7, #4]
 8016780:	f000 f966 	bl	8016a50 <USBD_CtlError>
    return USBD_FAIL;
 8016784:	2303      	movs	r3, #3
 8016786:	e087      	b.n	8016898 <USBD_SetConfig+0x13c>
  }

  switch (pdev->dev_state)
 8016788:	687b      	ldr	r3, [r7, #4]
 801678a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801678e:	2b02      	cmp	r3, #2
 8016790:	d002      	beq.n	8016798 <USBD_SetConfig+0x3c>
 8016792:	2b03      	cmp	r3, #3
 8016794:	d025      	beq.n	80167e2 <USBD_SetConfig+0x86>
 8016796:	e071      	b.n	801687c <USBD_SetConfig+0x120>
  {
  case USBD_STATE_ADDRESSED:
    if (cfgidx != 0U)
 8016798:	4b41      	ldr	r3, [pc, #260]	; (80168a0 <USBD_SetConfig+0x144>)
 801679a:	781b      	ldrb	r3, [r3, #0]
 801679c:	2b00      	cmp	r3, #0
 801679e:	d01c      	beq.n	80167da <USBD_SetConfig+0x7e>
    {
      pdev->dev_config = cfgidx;
 80167a0:	4b3f      	ldr	r3, [pc, #252]	; (80168a0 <USBD_SetConfig+0x144>)
 80167a2:	781b      	ldrb	r3, [r3, #0]
 80167a4:	461a      	mov	r2, r3
 80167a6:	687b      	ldr	r3, [r7, #4]
 80167a8:	605a      	str	r2, [r3, #4]

      ret = USBD_SetClassConfig(pdev, cfgidx);
 80167aa:	4b3d      	ldr	r3, [pc, #244]	; (80168a0 <USBD_SetConfig+0x144>)
 80167ac:	781b      	ldrb	r3, [r3, #0]
 80167ae:	4619      	mov	r1, r3
 80167b0:	6878      	ldr	r0, [r7, #4]
 80167b2:	f7ff f9a8 	bl	8015b06 <USBD_SetClassConfig>
 80167b6:	4603      	mov	r3, r0
 80167b8:	73fb      	strb	r3, [r7, #15]

      if (ret != USBD_OK)
 80167ba:	7bfb      	ldrb	r3, [r7, #15]
 80167bc:	2b00      	cmp	r3, #0
 80167be:	d004      	beq.n	80167ca <USBD_SetConfig+0x6e>
      {
        USBD_CtlError(pdev, req);
 80167c0:	6839      	ldr	r1, [r7, #0]
 80167c2:	6878      	ldr	r0, [r7, #4]
 80167c4:	f000 f944 	bl	8016a50 <USBD_CtlError>
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
    }
    break;
 80167c8:	e065      	b.n	8016896 <USBD_SetConfig+0x13a>
        (void)USBD_CtlSendStatus(pdev);
 80167ca:	6878      	ldr	r0, [r7, #4]
 80167cc:	f000 f9ee 	bl	8016bac <USBD_CtlSendStatus>
        pdev->dev_state = USBD_STATE_CONFIGURED;
 80167d0:	687b      	ldr	r3, [r7, #4]
 80167d2:	2203      	movs	r2, #3
 80167d4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    break;
 80167d8:	e05d      	b.n	8016896 <USBD_SetConfig+0x13a>
      (void)USBD_CtlSendStatus(pdev);
 80167da:	6878      	ldr	r0, [r7, #4]
 80167dc:	f000 f9e6 	bl	8016bac <USBD_CtlSendStatus>
    break;
 80167e0:	e059      	b.n	8016896 <USBD_SetConfig+0x13a>

  case USBD_STATE_CONFIGURED:
    if (cfgidx == 0U)
 80167e2:	4b2f      	ldr	r3, [pc, #188]	; (80168a0 <USBD_SetConfig+0x144>)
 80167e4:	781b      	ldrb	r3, [r3, #0]
 80167e6:	2b00      	cmp	r3, #0
 80167e8:	d112      	bne.n	8016810 <USBD_SetConfig+0xb4>
    {
      pdev->dev_state = USBD_STATE_ADDRESSED;
 80167ea:	687b      	ldr	r3, [r7, #4]
 80167ec:	2202      	movs	r2, #2
 80167ee:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      pdev->dev_config = cfgidx;
 80167f2:	4b2b      	ldr	r3, [pc, #172]	; (80168a0 <USBD_SetConfig+0x144>)
 80167f4:	781b      	ldrb	r3, [r3, #0]
 80167f6:	461a      	mov	r2, r3
 80167f8:	687b      	ldr	r3, [r7, #4]
 80167fa:	605a      	str	r2, [r3, #4]
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 80167fc:	4b28      	ldr	r3, [pc, #160]	; (80168a0 <USBD_SetConfig+0x144>)
 80167fe:	781b      	ldrb	r3, [r3, #0]
 8016800:	4619      	mov	r1, r3
 8016802:	6878      	ldr	r0, [r7, #4]
 8016804:	f7ff f99b 	bl	8015b3e <USBD_ClrClassConfig>
      (void)USBD_CtlSendStatus(pdev);
 8016808:	6878      	ldr	r0, [r7, #4]
 801680a:	f000 f9cf 	bl	8016bac <USBD_CtlSendStatus>
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
    }
    break;
 801680e:	e042      	b.n	8016896 <USBD_SetConfig+0x13a>
    else if (cfgidx != pdev->dev_config)
 8016810:	4b23      	ldr	r3, [pc, #140]	; (80168a0 <USBD_SetConfig+0x144>)
 8016812:	781b      	ldrb	r3, [r3, #0]
 8016814:	461a      	mov	r2, r3
 8016816:	687b      	ldr	r3, [r7, #4]
 8016818:	685b      	ldr	r3, [r3, #4]
 801681a:	429a      	cmp	r2, r3
 801681c:	d02a      	beq.n	8016874 <USBD_SetConfig+0x118>
      (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 801681e:	687b      	ldr	r3, [r7, #4]
 8016820:	685b      	ldr	r3, [r3, #4]
 8016822:	b2db      	uxtb	r3, r3
 8016824:	4619      	mov	r1, r3
 8016826:	6878      	ldr	r0, [r7, #4]
 8016828:	f7ff f989 	bl	8015b3e <USBD_ClrClassConfig>
      pdev->dev_config = cfgidx;
 801682c:	4b1c      	ldr	r3, [pc, #112]	; (80168a0 <USBD_SetConfig+0x144>)
 801682e:	781b      	ldrb	r3, [r3, #0]
 8016830:	461a      	mov	r2, r3
 8016832:	687b      	ldr	r3, [r7, #4]
 8016834:	605a      	str	r2, [r3, #4]
      ret = USBD_SetClassConfig(pdev, cfgidx);
 8016836:	4b1a      	ldr	r3, [pc, #104]	; (80168a0 <USBD_SetConfig+0x144>)
 8016838:	781b      	ldrb	r3, [r3, #0]
 801683a:	4619      	mov	r1, r3
 801683c:	6878      	ldr	r0, [r7, #4]
 801683e:	f7ff f962 	bl	8015b06 <USBD_SetClassConfig>
 8016842:	4603      	mov	r3, r0
 8016844:	73fb      	strb	r3, [r7, #15]
      if (ret != USBD_OK)
 8016846:	7bfb      	ldrb	r3, [r7, #15]
 8016848:	2b00      	cmp	r3, #0
 801684a:	d00f      	beq.n	801686c <USBD_SetConfig+0x110>
        USBD_CtlError(pdev, req);
 801684c:	6839      	ldr	r1, [r7, #0]
 801684e:	6878      	ldr	r0, [r7, #4]
 8016850:	f000 f8fe 	bl	8016a50 <USBD_CtlError>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8016854:	687b      	ldr	r3, [r7, #4]
 8016856:	685b      	ldr	r3, [r3, #4]
 8016858:	b2db      	uxtb	r3, r3
 801685a:	4619      	mov	r1, r3
 801685c:	6878      	ldr	r0, [r7, #4]
 801685e:	f7ff f96e 	bl	8015b3e <USBD_ClrClassConfig>
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8016862:	687b      	ldr	r3, [r7, #4]
 8016864:	2202      	movs	r2, #2
 8016866:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    break;
 801686a:	e014      	b.n	8016896 <USBD_SetConfig+0x13a>
        (void)USBD_CtlSendStatus(pdev);
 801686c:	6878      	ldr	r0, [r7, #4]
 801686e:	f000 f99d 	bl	8016bac <USBD_CtlSendStatus>
    break;
 8016872:	e010      	b.n	8016896 <USBD_SetConfig+0x13a>
      (void)USBD_CtlSendStatus(pdev);
 8016874:	6878      	ldr	r0, [r7, #4]
 8016876:	f000 f999 	bl	8016bac <USBD_CtlSendStatus>
    break;
 801687a:	e00c      	b.n	8016896 <USBD_SetConfig+0x13a>

  default:
    USBD_CtlError(pdev, req);
 801687c:	6839      	ldr	r1, [r7, #0]
 801687e:	6878      	ldr	r0, [r7, #4]
 8016880:	f000 f8e6 	bl	8016a50 <USBD_CtlError>
    (void)USBD_ClrClassConfig(pdev, cfgidx);
 8016884:	4b06      	ldr	r3, [pc, #24]	; (80168a0 <USBD_SetConfig+0x144>)
 8016886:	781b      	ldrb	r3, [r3, #0]
 8016888:	4619      	mov	r1, r3
 801688a:	6878      	ldr	r0, [r7, #4]
 801688c:	f7ff f957 	bl	8015b3e <USBD_ClrClassConfig>
    ret = USBD_FAIL;
 8016890:	2303      	movs	r3, #3
 8016892:	73fb      	strb	r3, [r7, #15]
    break;
 8016894:	bf00      	nop
  }

  return ret;
 8016896:	7bfb      	ldrb	r3, [r7, #15]
}
 8016898:	4618      	mov	r0, r3
 801689a:	3710      	adds	r7, #16
 801689c:	46bd      	mov	sp, r7
 801689e:	bd80      	pop	{r7, pc}
 80168a0:	240404cc 	.word	0x240404cc

080168a4 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80168a4:	b580      	push	{r7, lr}
 80168a6:	b082      	sub	sp, #8
 80168a8:	af00      	add	r7, sp, #0
 80168aa:	6078      	str	r0, [r7, #4]
 80168ac:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 80168ae:	683b      	ldr	r3, [r7, #0]
 80168b0:	88db      	ldrh	r3, [r3, #6]
 80168b2:	2b01      	cmp	r3, #1
 80168b4:	d004      	beq.n	80168c0 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 80168b6:	6839      	ldr	r1, [r7, #0]
 80168b8:	6878      	ldr	r0, [r7, #4]
 80168ba:	f000 f8c9 	bl	8016a50 <USBD_CtlError>
    default:
      USBD_CtlError(pdev, req);
      break;
    }
  }
}
 80168be:	e021      	b.n	8016904 <USBD_GetConfig+0x60>
    switch (pdev->dev_state)
 80168c0:	687b      	ldr	r3, [r7, #4]
 80168c2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80168c6:	2b01      	cmp	r3, #1
 80168c8:	db17      	blt.n	80168fa <USBD_GetConfig+0x56>
 80168ca:	2b02      	cmp	r3, #2
 80168cc:	dd02      	ble.n	80168d4 <USBD_GetConfig+0x30>
 80168ce:	2b03      	cmp	r3, #3
 80168d0:	d00b      	beq.n	80168ea <USBD_GetConfig+0x46>
 80168d2:	e012      	b.n	80168fa <USBD_GetConfig+0x56>
      pdev->dev_default_config = 0U;
 80168d4:	687b      	ldr	r3, [r7, #4]
 80168d6:	2200      	movs	r2, #0
 80168d8:	609a      	str	r2, [r3, #8]
      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 80168da:	687b      	ldr	r3, [r7, #4]
 80168dc:	3308      	adds	r3, #8
 80168de:	2201      	movs	r2, #1
 80168e0:	4619      	mov	r1, r3
 80168e2:	6878      	ldr	r0, [r7, #4]
 80168e4:	f000 f925 	bl	8016b32 <USBD_CtlSendData>
      break;
 80168e8:	e00c      	b.n	8016904 <USBD_GetConfig+0x60>
      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 80168ea:	687b      	ldr	r3, [r7, #4]
 80168ec:	3304      	adds	r3, #4
 80168ee:	2201      	movs	r2, #1
 80168f0:	4619      	mov	r1, r3
 80168f2:	6878      	ldr	r0, [r7, #4]
 80168f4:	f000 f91d 	bl	8016b32 <USBD_CtlSendData>
      break;
 80168f8:	e004      	b.n	8016904 <USBD_GetConfig+0x60>
      USBD_CtlError(pdev, req);
 80168fa:	6839      	ldr	r1, [r7, #0]
 80168fc:	6878      	ldr	r0, [r7, #4]
 80168fe:	f000 f8a7 	bl	8016a50 <USBD_CtlError>
      break;
 8016902:	bf00      	nop
}
 8016904:	bf00      	nop
 8016906:	3708      	adds	r7, #8
 8016908:	46bd      	mov	sp, r7
 801690a:	bd80      	pop	{r7, pc}

0801690c <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 801690c:	b580      	push	{r7, lr}
 801690e:	b082      	sub	sp, #8
 8016910:	af00      	add	r7, sp, #0
 8016912:	6078      	str	r0, [r7, #4]
 8016914:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8016916:	687b      	ldr	r3, [r7, #4]
 8016918:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801691c:	3b01      	subs	r3, #1
 801691e:	2b02      	cmp	r3, #2
 8016920:	d81e      	bhi.n	8016960 <USBD_GetStatus+0x54>
  {
  case USBD_STATE_DEFAULT:
  case USBD_STATE_ADDRESSED:
  case USBD_STATE_CONFIGURED:
    if (req->wLength != 0x2U)
 8016922:	683b      	ldr	r3, [r7, #0]
 8016924:	88db      	ldrh	r3, [r3, #6]
 8016926:	2b02      	cmp	r3, #2
 8016928:	d004      	beq.n	8016934 <USBD_GetStatus+0x28>
    {
      USBD_CtlError(pdev, req);
 801692a:	6839      	ldr	r1, [r7, #0]
 801692c:	6878      	ldr	r0, [r7, #4]
 801692e:	f000 f88f 	bl	8016a50 <USBD_CtlError>
      break;
 8016932:	e01a      	b.n	801696a <USBD_GetStatus+0x5e>
    }

#if (USBD_SELF_POWERED == 1U)
    pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8016934:	687b      	ldr	r3, [r7, #4]
 8016936:	2201      	movs	r2, #1
 8016938:	60da      	str	r2, [r3, #12]
#else
    pdev->dev_config_status = 0U;
#endif

    if (pdev->dev_remote_wakeup != 0U)
 801693a:	687b      	ldr	r3, [r7, #4]
 801693c:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8016940:	2b00      	cmp	r3, #0
 8016942:	d005      	beq.n	8016950 <USBD_GetStatus+0x44>
    {
      pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8016944:	687b      	ldr	r3, [r7, #4]
 8016946:	68db      	ldr	r3, [r3, #12]
 8016948:	f043 0202 	orr.w	r2, r3, #2
 801694c:	687b      	ldr	r3, [r7, #4]
 801694e:	60da      	str	r2, [r3, #12]
    }

    (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8016950:	687b      	ldr	r3, [r7, #4]
 8016952:	330c      	adds	r3, #12
 8016954:	2202      	movs	r2, #2
 8016956:	4619      	mov	r1, r3
 8016958:	6878      	ldr	r0, [r7, #4]
 801695a:	f000 f8ea 	bl	8016b32 <USBD_CtlSendData>
    break;
 801695e:	e004      	b.n	801696a <USBD_GetStatus+0x5e>

  default:
    USBD_CtlError(pdev, req);
 8016960:	6839      	ldr	r1, [r7, #0]
 8016962:	6878      	ldr	r0, [r7, #4]
 8016964:	f000 f874 	bl	8016a50 <USBD_CtlError>
    break;
 8016968:	bf00      	nop
  }
}
 801696a:	bf00      	nop
 801696c:	3708      	adds	r7, #8
 801696e:	46bd      	mov	sp, r7
 8016970:	bd80      	pop	{r7, pc}

08016972 <USBD_SetFeature>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8016972:	b580      	push	{r7, lr}
 8016974:	b082      	sub	sp, #8
 8016976:	af00      	add	r7, sp, #0
 8016978:	6078      	str	r0, [r7, #4]
 801697a:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 801697c:	683b      	ldr	r3, [r7, #0]
 801697e:	885b      	ldrh	r3, [r3, #2]
 8016980:	2b01      	cmp	r3, #1
 8016982:	d106      	bne.n	8016992 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 8016984:	687b      	ldr	r3, [r7, #4]
 8016986:	2201      	movs	r2, #1
 8016988:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 801698c:	6878      	ldr	r0, [r7, #4]
 801698e:	f000 f90d 	bl	8016bac <USBD_CtlSendStatus>
  }
}
 8016992:	bf00      	nop
 8016994:	3708      	adds	r7, #8
 8016996:	46bd      	mov	sp, r7
 8016998:	bd80      	pop	{r7, pc}

0801699a <USBD_ClrFeature>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 801699a:	b580      	push	{r7, lr}
 801699c:	b082      	sub	sp, #8
 801699e:	af00      	add	r7, sp, #0
 80169a0:	6078      	str	r0, [r7, #4]
 80169a2:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80169a4:	687b      	ldr	r3, [r7, #4]
 80169a6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80169aa:	3b01      	subs	r3, #1
 80169ac:	2b02      	cmp	r3, #2
 80169ae:	d80b      	bhi.n	80169c8 <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80169b0:	683b      	ldr	r3, [r7, #0]
 80169b2:	885b      	ldrh	r3, [r3, #2]
 80169b4:	2b01      	cmp	r3, #1
 80169b6:	d10c      	bne.n	80169d2 <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 80169b8:	687b      	ldr	r3, [r7, #4]
 80169ba:	2200      	movs	r2, #0
 80169bc:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 80169c0:	6878      	ldr	r0, [r7, #4]
 80169c2:	f000 f8f3 	bl	8016bac <USBD_CtlSendStatus>
      }
      break;
 80169c6:	e004      	b.n	80169d2 <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 80169c8:	6839      	ldr	r1, [r7, #0]
 80169ca:	6878      	ldr	r0, [r7, #4]
 80169cc:	f000 f840 	bl	8016a50 <USBD_CtlError>
      break;
 80169d0:	e000      	b.n	80169d4 <USBD_ClrFeature+0x3a>
      break;
 80169d2:	bf00      	nop
  }
}
 80169d4:	bf00      	nop
 80169d6:	3708      	adds	r7, #8
 80169d8:	46bd      	mov	sp, r7
 80169da:	bd80      	pop	{r7, pc}

080169dc <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 80169dc:	b580      	push	{r7, lr}
 80169de:	b084      	sub	sp, #16
 80169e0:	af00      	add	r7, sp, #0
 80169e2:	6078      	str	r0, [r7, #4]
 80169e4:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 80169e6:	683b      	ldr	r3, [r7, #0]
 80169e8:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 80169ea:	68fb      	ldr	r3, [r7, #12]
 80169ec:	781a      	ldrb	r2, [r3, #0]
 80169ee:	687b      	ldr	r3, [r7, #4]
 80169f0:	701a      	strb	r2, [r3, #0]

  pbuff++;
 80169f2:	68fb      	ldr	r3, [r7, #12]
 80169f4:	3301      	adds	r3, #1
 80169f6:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 80169f8:	68fb      	ldr	r3, [r7, #12]
 80169fa:	781a      	ldrb	r2, [r3, #0]
 80169fc:	687b      	ldr	r3, [r7, #4]
 80169fe:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8016a00:	68fb      	ldr	r3, [r7, #12]
 8016a02:	3301      	adds	r3, #1
 8016a04:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8016a06:	68f8      	ldr	r0, [r7, #12]
 8016a08:	f7ff fad4 	bl	8015fb4 <SWAPBYTE>
 8016a0c:	4603      	mov	r3, r0
 8016a0e:	461a      	mov	r2, r3
 8016a10:	687b      	ldr	r3, [r7, #4]
 8016a12:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8016a14:	68fb      	ldr	r3, [r7, #12]
 8016a16:	3301      	adds	r3, #1
 8016a18:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8016a1a:	68fb      	ldr	r3, [r7, #12]
 8016a1c:	3301      	adds	r3, #1
 8016a1e:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8016a20:	68f8      	ldr	r0, [r7, #12]
 8016a22:	f7ff fac7 	bl	8015fb4 <SWAPBYTE>
 8016a26:	4603      	mov	r3, r0
 8016a28:	461a      	mov	r2, r3
 8016a2a:	687b      	ldr	r3, [r7, #4]
 8016a2c:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8016a2e:	68fb      	ldr	r3, [r7, #12]
 8016a30:	3301      	adds	r3, #1
 8016a32:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8016a34:	68fb      	ldr	r3, [r7, #12]
 8016a36:	3301      	adds	r3, #1
 8016a38:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8016a3a:	68f8      	ldr	r0, [r7, #12]
 8016a3c:	f7ff faba 	bl	8015fb4 <SWAPBYTE>
 8016a40:	4603      	mov	r3, r0
 8016a42:	461a      	mov	r2, r3
 8016a44:	687b      	ldr	r3, [r7, #4]
 8016a46:	80da      	strh	r2, [r3, #6]
}
 8016a48:	bf00      	nop
 8016a4a:	3710      	adds	r7, #16
 8016a4c:	46bd      	mov	sp, r7
 8016a4e:	bd80      	pop	{r7, pc}

08016a50 <USBD_CtlError>:
* @param  req: usb request
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8016a50:	b580      	push	{r7, lr}
 8016a52:	b082      	sub	sp, #8
 8016a54:	af00      	add	r7, sp, #0
 8016a56:	6078      	str	r0, [r7, #4]
 8016a58:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8016a5a:	2180      	movs	r1, #128	; 0x80
 8016a5c:	6878      	ldr	r0, [r7, #4]
 8016a5e:	f002 ffb0 	bl	80199c2 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8016a62:	2100      	movs	r1, #0
 8016a64:	6878      	ldr	r0, [r7, #4]
 8016a66:	f002 ffac 	bl	80199c2 <USBD_LL_StallEP>
}
 8016a6a:	bf00      	nop
 8016a6c:	3708      	adds	r7, #8
 8016a6e:	46bd      	mov	sp, r7
 8016a70:	bd80      	pop	{r7, pc}

08016a72 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8016a72:	b580      	push	{r7, lr}
 8016a74:	b086      	sub	sp, #24
 8016a76:	af00      	add	r7, sp, #0
 8016a78:	60f8      	str	r0, [r7, #12]
 8016a7a:	60b9      	str	r1, [r7, #8]
 8016a7c:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8016a7e:	2300      	movs	r3, #0
 8016a80:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8016a82:	68fb      	ldr	r3, [r7, #12]
 8016a84:	2b00      	cmp	r3, #0
 8016a86:	d036      	beq.n	8016af6 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 8016a88:	68fb      	ldr	r3, [r7, #12]
 8016a8a:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8016a8c:	6938      	ldr	r0, [r7, #16]
 8016a8e:	f000 f836 	bl	8016afe <USBD_GetLen>
 8016a92:	4603      	mov	r3, r0
 8016a94:	3301      	adds	r3, #1
 8016a96:	b29b      	uxth	r3, r3
 8016a98:	005b      	lsls	r3, r3, #1
 8016a9a:	b29a      	uxth	r2, r3
 8016a9c:	687b      	ldr	r3, [r7, #4]
 8016a9e:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8016aa0:	7dfb      	ldrb	r3, [r7, #23]
 8016aa2:	68ba      	ldr	r2, [r7, #8]
 8016aa4:	4413      	add	r3, r2
 8016aa6:	687a      	ldr	r2, [r7, #4]
 8016aa8:	7812      	ldrb	r2, [r2, #0]
 8016aaa:	701a      	strb	r2, [r3, #0]
  idx++;
 8016aac:	7dfb      	ldrb	r3, [r7, #23]
 8016aae:	3301      	adds	r3, #1
 8016ab0:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8016ab2:	7dfb      	ldrb	r3, [r7, #23]
 8016ab4:	68ba      	ldr	r2, [r7, #8]
 8016ab6:	4413      	add	r3, r2
 8016ab8:	2203      	movs	r2, #3
 8016aba:	701a      	strb	r2, [r3, #0]
  idx++;
 8016abc:	7dfb      	ldrb	r3, [r7, #23]
 8016abe:	3301      	adds	r3, #1
 8016ac0:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8016ac2:	e013      	b.n	8016aec <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 8016ac4:	7dfb      	ldrb	r3, [r7, #23]
 8016ac6:	68ba      	ldr	r2, [r7, #8]
 8016ac8:	4413      	add	r3, r2
 8016aca:	693a      	ldr	r2, [r7, #16]
 8016acc:	7812      	ldrb	r2, [r2, #0]
 8016ace:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8016ad0:	693b      	ldr	r3, [r7, #16]
 8016ad2:	3301      	adds	r3, #1
 8016ad4:	613b      	str	r3, [r7, #16]
    idx++;
 8016ad6:	7dfb      	ldrb	r3, [r7, #23]
 8016ad8:	3301      	adds	r3, #1
 8016ada:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8016adc:	7dfb      	ldrb	r3, [r7, #23]
 8016ade:	68ba      	ldr	r2, [r7, #8]
 8016ae0:	4413      	add	r3, r2
 8016ae2:	2200      	movs	r2, #0
 8016ae4:	701a      	strb	r2, [r3, #0]
    idx++;
 8016ae6:	7dfb      	ldrb	r3, [r7, #23]
 8016ae8:	3301      	adds	r3, #1
 8016aea:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8016aec:	693b      	ldr	r3, [r7, #16]
 8016aee:	781b      	ldrb	r3, [r3, #0]
 8016af0:	2b00      	cmp	r3, #0
 8016af2:	d1e7      	bne.n	8016ac4 <USBD_GetString+0x52>
 8016af4:	e000      	b.n	8016af8 <USBD_GetString+0x86>
    return;
 8016af6:	bf00      	nop
  }
}
 8016af8:	3718      	adds	r7, #24
 8016afa:	46bd      	mov	sp, r7
 8016afc:	bd80      	pop	{r7, pc}

08016afe <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8016afe:	b480      	push	{r7}
 8016b00:	b085      	sub	sp, #20
 8016b02:	af00      	add	r7, sp, #0
 8016b04:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8016b06:	2300      	movs	r3, #0
 8016b08:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8016b0a:	687b      	ldr	r3, [r7, #4]
 8016b0c:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8016b0e:	e005      	b.n	8016b1c <USBD_GetLen+0x1e>
  {
    len++;
 8016b10:	7bfb      	ldrb	r3, [r7, #15]
 8016b12:	3301      	adds	r3, #1
 8016b14:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8016b16:	68bb      	ldr	r3, [r7, #8]
 8016b18:	3301      	adds	r3, #1
 8016b1a:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8016b1c:	68bb      	ldr	r3, [r7, #8]
 8016b1e:	781b      	ldrb	r3, [r3, #0]
 8016b20:	2b00      	cmp	r3, #0
 8016b22:	d1f5      	bne.n	8016b10 <USBD_GetLen+0x12>
  }

  return len;
 8016b24:	7bfb      	ldrb	r3, [r7, #15]
}
 8016b26:	4618      	mov	r0, r3
 8016b28:	3714      	adds	r7, #20
 8016b2a:	46bd      	mov	sp, r7
 8016b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016b30:	4770      	bx	lr

08016b32 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8016b32:	b580      	push	{r7, lr}
 8016b34:	b084      	sub	sp, #16
 8016b36:	af00      	add	r7, sp, #0
 8016b38:	60f8      	str	r0, [r7, #12]
 8016b3a:	60b9      	str	r1, [r7, #8]
 8016b3c:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8016b3e:	68fb      	ldr	r3, [r7, #12]
 8016b40:	2202      	movs	r2, #2
 8016b42:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8016b46:	68fb      	ldr	r3, [r7, #12]
 8016b48:	687a      	ldr	r2, [r7, #4]
 8016b4a:	619a      	str	r2, [r3, #24]
  pdev->ep_in[0].rem_length = len;
 8016b4c:	68fb      	ldr	r3, [r7, #12]
 8016b4e:	687a      	ldr	r2, [r7, #4]
 8016b50:	61da      	str	r2, [r3, #28]

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8016b52:	687b      	ldr	r3, [r7, #4]
 8016b54:	68ba      	ldr	r2, [r7, #8]
 8016b56:	2100      	movs	r1, #0
 8016b58:	68f8      	ldr	r0, [r7, #12]
 8016b5a:	f002 ffbb 	bl	8019ad4 <USBD_LL_Transmit>

  return USBD_OK;
 8016b5e:	2300      	movs	r3, #0
}
 8016b60:	4618      	mov	r0, r3
 8016b62:	3710      	adds	r7, #16
 8016b64:	46bd      	mov	sp, r7
 8016b66:	bd80      	pop	{r7, pc}

08016b68 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8016b68:	b580      	push	{r7, lr}
 8016b6a:	b084      	sub	sp, #16
 8016b6c:	af00      	add	r7, sp, #0
 8016b6e:	60f8      	str	r0, [r7, #12]
 8016b70:	60b9      	str	r1, [r7, #8]
 8016b72:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8016b74:	687b      	ldr	r3, [r7, #4]
 8016b76:	68ba      	ldr	r2, [r7, #8]
 8016b78:	2100      	movs	r1, #0
 8016b7a:	68f8      	ldr	r0, [r7, #12]
 8016b7c:	f002 ffaa 	bl	8019ad4 <USBD_LL_Transmit>

  return USBD_OK;
 8016b80:	2300      	movs	r3, #0
}
 8016b82:	4618      	mov	r0, r3
 8016b84:	3710      	adds	r7, #16
 8016b86:	46bd      	mov	sp, r7
 8016b88:	bd80      	pop	{r7, pc}

08016b8a <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8016b8a:	b580      	push	{r7, lr}
 8016b8c:	b084      	sub	sp, #16
 8016b8e:	af00      	add	r7, sp, #0
 8016b90:	60f8      	str	r0, [r7, #12]
 8016b92:	60b9      	str	r1, [r7, #8]
 8016b94:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8016b96:	687b      	ldr	r3, [r7, #4]
 8016b98:	68ba      	ldr	r2, [r7, #8]
 8016b9a:	2100      	movs	r1, #0
 8016b9c:	68f8      	ldr	r0, [r7, #12]
 8016b9e:	f002 ffba 	bl	8019b16 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8016ba2:	2300      	movs	r3, #0
}
 8016ba4:	4618      	mov	r0, r3
 8016ba6:	3710      	adds	r7, #16
 8016ba8:	46bd      	mov	sp, r7
 8016baa:	bd80      	pop	{r7, pc}

08016bac <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8016bac:	b580      	push	{r7, lr}
 8016bae:	b082      	sub	sp, #8
 8016bb0:	af00      	add	r7, sp, #0
 8016bb2:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8016bb4:	687b      	ldr	r3, [r7, #4]
 8016bb6:	2204      	movs	r2, #4
 8016bb8:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8016bbc:	2300      	movs	r3, #0
 8016bbe:	2200      	movs	r2, #0
 8016bc0:	2100      	movs	r1, #0
 8016bc2:	6878      	ldr	r0, [r7, #4]
 8016bc4:	f002 ff86 	bl	8019ad4 <USBD_LL_Transmit>

  return USBD_OK;
 8016bc8:	2300      	movs	r3, #0
}
 8016bca:	4618      	mov	r0, r3
 8016bcc:	3708      	adds	r7, #8
 8016bce:	46bd      	mov	sp, r7
 8016bd0:	bd80      	pop	{r7, pc}

08016bd2 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8016bd2:	b580      	push	{r7, lr}
 8016bd4:	b082      	sub	sp, #8
 8016bd6:	af00      	add	r7, sp, #0
 8016bd8:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8016bda:	687b      	ldr	r3, [r7, #4]
 8016bdc:	2205      	movs	r2, #5
 8016bde:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8016be2:	2300      	movs	r3, #0
 8016be4:	2200      	movs	r2, #0
 8016be6:	2100      	movs	r1, #0
 8016be8:	6878      	ldr	r0, [r7, #4]
 8016bea:	f002 ff94 	bl	8019b16 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8016bee:	2300      	movs	r3, #0
}
 8016bf0:	4618      	mov	r0, r3
 8016bf2:	3708      	adds	r7, #8
 8016bf4:	46bd      	mov	sp, r7
 8016bf6:	bd80      	pop	{r7, pc}

08016bf8 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 8016bf8:	b580      	push	{r7, lr}
 8016bfa:	b084      	sub	sp, #16
 8016bfc:	af00      	add	r7, sp, #0
 8016bfe:	4603      	mov	r3, r0
 8016c00:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 8016c02:	79fb      	ldrb	r3, [r7, #7]
 8016c04:	4a08      	ldr	r2, [pc, #32]	; (8016c28 <disk_status+0x30>)
 8016c06:	009b      	lsls	r3, r3, #2
 8016c08:	4413      	add	r3, r2
 8016c0a:	685b      	ldr	r3, [r3, #4]
 8016c0c:	685b      	ldr	r3, [r3, #4]
 8016c0e:	79fa      	ldrb	r2, [r7, #7]
 8016c10:	4905      	ldr	r1, [pc, #20]	; (8016c28 <disk_status+0x30>)
 8016c12:	440a      	add	r2, r1
 8016c14:	7a12      	ldrb	r2, [r2, #8]
 8016c16:	4610      	mov	r0, r2
 8016c18:	4798      	blx	r3
 8016c1a:	4603      	mov	r3, r0
 8016c1c:	73fb      	strb	r3, [r7, #15]
  return stat;
 8016c1e:	7bfb      	ldrb	r3, [r7, #15]
}
 8016c20:	4618      	mov	r0, r3
 8016c22:	3710      	adds	r7, #16
 8016c24:	46bd      	mov	sp, r7
 8016c26:	bd80      	pop	{r7, pc}
 8016c28:	240404f8 	.word	0x240404f8

08016c2c <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 8016c2c:	b580      	push	{r7, lr}
 8016c2e:	b084      	sub	sp, #16
 8016c30:	af00      	add	r7, sp, #0
 8016c32:	4603      	mov	r3, r0
 8016c34:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 8016c36:	2300      	movs	r3, #0
 8016c38:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 8016c3a:	79fb      	ldrb	r3, [r7, #7]
 8016c3c:	4a0d      	ldr	r2, [pc, #52]	; (8016c74 <disk_initialize+0x48>)
 8016c3e:	5cd3      	ldrb	r3, [r2, r3]
 8016c40:	2b00      	cmp	r3, #0
 8016c42:	d111      	bne.n	8016c68 <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 8016c44:	79fb      	ldrb	r3, [r7, #7]
 8016c46:	4a0b      	ldr	r2, [pc, #44]	; (8016c74 <disk_initialize+0x48>)
 8016c48:	2101      	movs	r1, #1
 8016c4a:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 8016c4c:	79fb      	ldrb	r3, [r7, #7]
 8016c4e:	4a09      	ldr	r2, [pc, #36]	; (8016c74 <disk_initialize+0x48>)
 8016c50:	009b      	lsls	r3, r3, #2
 8016c52:	4413      	add	r3, r2
 8016c54:	685b      	ldr	r3, [r3, #4]
 8016c56:	681b      	ldr	r3, [r3, #0]
 8016c58:	79fa      	ldrb	r2, [r7, #7]
 8016c5a:	4906      	ldr	r1, [pc, #24]	; (8016c74 <disk_initialize+0x48>)
 8016c5c:	440a      	add	r2, r1
 8016c5e:	7a12      	ldrb	r2, [r2, #8]
 8016c60:	4610      	mov	r0, r2
 8016c62:	4798      	blx	r3
 8016c64:	4603      	mov	r3, r0
 8016c66:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 8016c68:	7bfb      	ldrb	r3, [r7, #15]
}
 8016c6a:	4618      	mov	r0, r3
 8016c6c:	3710      	adds	r7, #16
 8016c6e:	46bd      	mov	sp, r7
 8016c70:	bd80      	pop	{r7, pc}
 8016c72:	bf00      	nop
 8016c74:	240404f8 	.word	0x240404f8

08016c78 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 8016c78:	b590      	push	{r4, r7, lr}
 8016c7a:	b087      	sub	sp, #28
 8016c7c:	af00      	add	r7, sp, #0
 8016c7e:	60b9      	str	r1, [r7, #8]
 8016c80:	607a      	str	r2, [r7, #4]
 8016c82:	603b      	str	r3, [r7, #0]
 8016c84:	4603      	mov	r3, r0
 8016c86:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 8016c88:	7bfb      	ldrb	r3, [r7, #15]
 8016c8a:	4a0a      	ldr	r2, [pc, #40]	; (8016cb4 <disk_read+0x3c>)
 8016c8c:	009b      	lsls	r3, r3, #2
 8016c8e:	4413      	add	r3, r2
 8016c90:	685b      	ldr	r3, [r3, #4]
 8016c92:	689c      	ldr	r4, [r3, #8]
 8016c94:	7bfb      	ldrb	r3, [r7, #15]
 8016c96:	4a07      	ldr	r2, [pc, #28]	; (8016cb4 <disk_read+0x3c>)
 8016c98:	4413      	add	r3, r2
 8016c9a:	7a18      	ldrb	r0, [r3, #8]
 8016c9c:	683b      	ldr	r3, [r7, #0]
 8016c9e:	687a      	ldr	r2, [r7, #4]
 8016ca0:	68b9      	ldr	r1, [r7, #8]
 8016ca2:	47a0      	blx	r4
 8016ca4:	4603      	mov	r3, r0
 8016ca6:	75fb      	strb	r3, [r7, #23]
  return res;
 8016ca8:	7dfb      	ldrb	r3, [r7, #23]
}
 8016caa:	4618      	mov	r0, r3
 8016cac:	371c      	adds	r7, #28
 8016cae:	46bd      	mov	sp, r7
 8016cb0:	bd90      	pop	{r4, r7, pc}
 8016cb2:	bf00      	nop
 8016cb4:	240404f8 	.word	0x240404f8

08016cb8 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 8016cb8:	b590      	push	{r4, r7, lr}
 8016cba:	b087      	sub	sp, #28
 8016cbc:	af00      	add	r7, sp, #0
 8016cbe:	60b9      	str	r1, [r7, #8]
 8016cc0:	607a      	str	r2, [r7, #4]
 8016cc2:	603b      	str	r3, [r7, #0]
 8016cc4:	4603      	mov	r3, r0
 8016cc6:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8016cc8:	7bfb      	ldrb	r3, [r7, #15]
 8016cca:	4a0a      	ldr	r2, [pc, #40]	; (8016cf4 <disk_write+0x3c>)
 8016ccc:	009b      	lsls	r3, r3, #2
 8016cce:	4413      	add	r3, r2
 8016cd0:	685b      	ldr	r3, [r3, #4]
 8016cd2:	68dc      	ldr	r4, [r3, #12]
 8016cd4:	7bfb      	ldrb	r3, [r7, #15]
 8016cd6:	4a07      	ldr	r2, [pc, #28]	; (8016cf4 <disk_write+0x3c>)
 8016cd8:	4413      	add	r3, r2
 8016cda:	7a18      	ldrb	r0, [r3, #8]
 8016cdc:	683b      	ldr	r3, [r7, #0]
 8016cde:	687a      	ldr	r2, [r7, #4]
 8016ce0:	68b9      	ldr	r1, [r7, #8]
 8016ce2:	47a0      	blx	r4
 8016ce4:	4603      	mov	r3, r0
 8016ce6:	75fb      	strb	r3, [r7, #23]
  return res;
 8016ce8:	7dfb      	ldrb	r3, [r7, #23]
}
 8016cea:	4618      	mov	r0, r3
 8016cec:	371c      	adds	r7, #28
 8016cee:	46bd      	mov	sp, r7
 8016cf0:	bd90      	pop	{r4, r7, pc}
 8016cf2:	bf00      	nop
 8016cf4:	240404f8 	.word	0x240404f8

08016cf8 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 8016cf8:	b580      	push	{r7, lr}
 8016cfa:	b084      	sub	sp, #16
 8016cfc:	af00      	add	r7, sp, #0
 8016cfe:	4603      	mov	r3, r0
 8016d00:	603a      	str	r2, [r7, #0]
 8016d02:	71fb      	strb	r3, [r7, #7]
 8016d04:	460b      	mov	r3, r1
 8016d06:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 8016d08:	79fb      	ldrb	r3, [r7, #7]
 8016d0a:	4a09      	ldr	r2, [pc, #36]	; (8016d30 <disk_ioctl+0x38>)
 8016d0c:	009b      	lsls	r3, r3, #2
 8016d0e:	4413      	add	r3, r2
 8016d10:	685b      	ldr	r3, [r3, #4]
 8016d12:	691b      	ldr	r3, [r3, #16]
 8016d14:	79fa      	ldrb	r2, [r7, #7]
 8016d16:	4906      	ldr	r1, [pc, #24]	; (8016d30 <disk_ioctl+0x38>)
 8016d18:	440a      	add	r2, r1
 8016d1a:	7a10      	ldrb	r0, [r2, #8]
 8016d1c:	79b9      	ldrb	r1, [r7, #6]
 8016d1e:	683a      	ldr	r2, [r7, #0]
 8016d20:	4798      	blx	r3
 8016d22:	4603      	mov	r3, r0
 8016d24:	73fb      	strb	r3, [r7, #15]
  return res;
 8016d26:	7bfb      	ldrb	r3, [r7, #15]
}
 8016d28:	4618      	mov	r0, r3
 8016d2a:	3710      	adds	r7, #16
 8016d2c:	46bd      	mov	sp, r7
 8016d2e:	bd80      	pop	{r7, pc}
 8016d30:	240404f8 	.word	0x240404f8

08016d34 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 8016d34:	b480      	push	{r7}
 8016d36:	b085      	sub	sp, #20
 8016d38:	af00      	add	r7, sp, #0
 8016d3a:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 8016d3c:	687b      	ldr	r3, [r7, #4]
 8016d3e:	3301      	adds	r3, #1
 8016d40:	781b      	ldrb	r3, [r3, #0]
 8016d42:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 8016d44:	89fb      	ldrh	r3, [r7, #14]
 8016d46:	021b      	lsls	r3, r3, #8
 8016d48:	b21a      	sxth	r2, r3
 8016d4a:	687b      	ldr	r3, [r7, #4]
 8016d4c:	781b      	ldrb	r3, [r3, #0]
 8016d4e:	b21b      	sxth	r3, r3
 8016d50:	4313      	orrs	r3, r2
 8016d52:	b21b      	sxth	r3, r3
 8016d54:	81fb      	strh	r3, [r7, #14]
	return rv;
 8016d56:	89fb      	ldrh	r3, [r7, #14]
}
 8016d58:	4618      	mov	r0, r3
 8016d5a:	3714      	adds	r7, #20
 8016d5c:	46bd      	mov	sp, r7
 8016d5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016d62:	4770      	bx	lr

08016d64 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 8016d64:	b480      	push	{r7}
 8016d66:	b085      	sub	sp, #20
 8016d68:	af00      	add	r7, sp, #0
 8016d6a:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 8016d6c:	687b      	ldr	r3, [r7, #4]
 8016d6e:	3303      	adds	r3, #3
 8016d70:	781b      	ldrb	r3, [r3, #0]
 8016d72:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 8016d74:	68fb      	ldr	r3, [r7, #12]
 8016d76:	021b      	lsls	r3, r3, #8
 8016d78:	687a      	ldr	r2, [r7, #4]
 8016d7a:	3202      	adds	r2, #2
 8016d7c:	7812      	ldrb	r2, [r2, #0]
 8016d7e:	4313      	orrs	r3, r2
 8016d80:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 8016d82:	68fb      	ldr	r3, [r7, #12]
 8016d84:	021b      	lsls	r3, r3, #8
 8016d86:	687a      	ldr	r2, [r7, #4]
 8016d88:	3201      	adds	r2, #1
 8016d8a:	7812      	ldrb	r2, [r2, #0]
 8016d8c:	4313      	orrs	r3, r2
 8016d8e:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 8016d90:	68fb      	ldr	r3, [r7, #12]
 8016d92:	021b      	lsls	r3, r3, #8
 8016d94:	687a      	ldr	r2, [r7, #4]
 8016d96:	7812      	ldrb	r2, [r2, #0]
 8016d98:	4313      	orrs	r3, r2
 8016d9a:	60fb      	str	r3, [r7, #12]
	return rv;
 8016d9c:	68fb      	ldr	r3, [r7, #12]
}
 8016d9e:	4618      	mov	r0, r3
 8016da0:	3714      	adds	r7, #20
 8016da2:	46bd      	mov	sp, r7
 8016da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016da8:	4770      	bx	lr

08016daa <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 8016daa:	b480      	push	{r7}
 8016dac:	b083      	sub	sp, #12
 8016dae:	af00      	add	r7, sp, #0
 8016db0:	6078      	str	r0, [r7, #4]
 8016db2:	460b      	mov	r3, r1
 8016db4:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 8016db6:	687b      	ldr	r3, [r7, #4]
 8016db8:	1c5a      	adds	r2, r3, #1
 8016dba:	607a      	str	r2, [r7, #4]
 8016dbc:	887a      	ldrh	r2, [r7, #2]
 8016dbe:	b2d2      	uxtb	r2, r2
 8016dc0:	701a      	strb	r2, [r3, #0]
 8016dc2:	887b      	ldrh	r3, [r7, #2]
 8016dc4:	0a1b      	lsrs	r3, r3, #8
 8016dc6:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 8016dc8:	687b      	ldr	r3, [r7, #4]
 8016dca:	1c5a      	adds	r2, r3, #1
 8016dcc:	607a      	str	r2, [r7, #4]
 8016dce:	887a      	ldrh	r2, [r7, #2]
 8016dd0:	b2d2      	uxtb	r2, r2
 8016dd2:	701a      	strb	r2, [r3, #0]
}
 8016dd4:	bf00      	nop
 8016dd6:	370c      	adds	r7, #12
 8016dd8:	46bd      	mov	sp, r7
 8016dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016dde:	4770      	bx	lr

08016de0 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 8016de0:	b480      	push	{r7}
 8016de2:	b083      	sub	sp, #12
 8016de4:	af00      	add	r7, sp, #0
 8016de6:	6078      	str	r0, [r7, #4]
 8016de8:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8016dea:	687b      	ldr	r3, [r7, #4]
 8016dec:	1c5a      	adds	r2, r3, #1
 8016dee:	607a      	str	r2, [r7, #4]
 8016df0:	683a      	ldr	r2, [r7, #0]
 8016df2:	b2d2      	uxtb	r2, r2
 8016df4:	701a      	strb	r2, [r3, #0]
 8016df6:	683b      	ldr	r3, [r7, #0]
 8016df8:	0a1b      	lsrs	r3, r3, #8
 8016dfa:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8016dfc:	687b      	ldr	r3, [r7, #4]
 8016dfe:	1c5a      	adds	r2, r3, #1
 8016e00:	607a      	str	r2, [r7, #4]
 8016e02:	683a      	ldr	r2, [r7, #0]
 8016e04:	b2d2      	uxtb	r2, r2
 8016e06:	701a      	strb	r2, [r3, #0]
 8016e08:	683b      	ldr	r3, [r7, #0]
 8016e0a:	0a1b      	lsrs	r3, r3, #8
 8016e0c:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8016e0e:	687b      	ldr	r3, [r7, #4]
 8016e10:	1c5a      	adds	r2, r3, #1
 8016e12:	607a      	str	r2, [r7, #4]
 8016e14:	683a      	ldr	r2, [r7, #0]
 8016e16:	b2d2      	uxtb	r2, r2
 8016e18:	701a      	strb	r2, [r3, #0]
 8016e1a:	683b      	ldr	r3, [r7, #0]
 8016e1c:	0a1b      	lsrs	r3, r3, #8
 8016e1e:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 8016e20:	687b      	ldr	r3, [r7, #4]
 8016e22:	1c5a      	adds	r2, r3, #1
 8016e24:	607a      	str	r2, [r7, #4]
 8016e26:	683a      	ldr	r2, [r7, #0]
 8016e28:	b2d2      	uxtb	r2, r2
 8016e2a:	701a      	strb	r2, [r3, #0]
}
 8016e2c:	bf00      	nop
 8016e2e:	370c      	adds	r7, #12
 8016e30:	46bd      	mov	sp, r7
 8016e32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016e36:	4770      	bx	lr

08016e38 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 8016e38:	b480      	push	{r7}
 8016e3a:	b087      	sub	sp, #28
 8016e3c:	af00      	add	r7, sp, #0
 8016e3e:	60f8      	str	r0, [r7, #12]
 8016e40:	60b9      	str	r1, [r7, #8]
 8016e42:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8016e44:	68fb      	ldr	r3, [r7, #12]
 8016e46:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 8016e48:	68bb      	ldr	r3, [r7, #8]
 8016e4a:	613b      	str	r3, [r7, #16]

	if (cnt) {
 8016e4c:	687b      	ldr	r3, [r7, #4]
 8016e4e:	2b00      	cmp	r3, #0
 8016e50:	d00d      	beq.n	8016e6e <mem_cpy+0x36>
		do {
			*d++ = *s++;
 8016e52:	693a      	ldr	r2, [r7, #16]
 8016e54:	1c53      	adds	r3, r2, #1
 8016e56:	613b      	str	r3, [r7, #16]
 8016e58:	697b      	ldr	r3, [r7, #20]
 8016e5a:	1c59      	adds	r1, r3, #1
 8016e5c:	6179      	str	r1, [r7, #20]
 8016e5e:	7812      	ldrb	r2, [r2, #0]
 8016e60:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 8016e62:	687b      	ldr	r3, [r7, #4]
 8016e64:	3b01      	subs	r3, #1
 8016e66:	607b      	str	r3, [r7, #4]
 8016e68:	687b      	ldr	r3, [r7, #4]
 8016e6a:	2b00      	cmp	r3, #0
 8016e6c:	d1f1      	bne.n	8016e52 <mem_cpy+0x1a>
	}
}
 8016e6e:	bf00      	nop
 8016e70:	371c      	adds	r7, #28
 8016e72:	46bd      	mov	sp, r7
 8016e74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016e78:	4770      	bx	lr

08016e7a <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 8016e7a:	b480      	push	{r7}
 8016e7c:	b087      	sub	sp, #28
 8016e7e:	af00      	add	r7, sp, #0
 8016e80:	60f8      	str	r0, [r7, #12]
 8016e82:	60b9      	str	r1, [r7, #8]
 8016e84:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8016e86:	68fb      	ldr	r3, [r7, #12]
 8016e88:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 8016e8a:	697b      	ldr	r3, [r7, #20]
 8016e8c:	1c5a      	adds	r2, r3, #1
 8016e8e:	617a      	str	r2, [r7, #20]
 8016e90:	68ba      	ldr	r2, [r7, #8]
 8016e92:	b2d2      	uxtb	r2, r2
 8016e94:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 8016e96:	687b      	ldr	r3, [r7, #4]
 8016e98:	3b01      	subs	r3, #1
 8016e9a:	607b      	str	r3, [r7, #4]
 8016e9c:	687b      	ldr	r3, [r7, #4]
 8016e9e:	2b00      	cmp	r3, #0
 8016ea0:	d1f3      	bne.n	8016e8a <mem_set+0x10>
}
 8016ea2:	bf00      	nop
 8016ea4:	371c      	adds	r7, #28
 8016ea6:	46bd      	mov	sp, r7
 8016ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016eac:	4770      	bx	lr

08016eae <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 8016eae:	b480      	push	{r7}
 8016eb0:	b089      	sub	sp, #36	; 0x24
 8016eb2:	af00      	add	r7, sp, #0
 8016eb4:	60f8      	str	r0, [r7, #12]
 8016eb6:	60b9      	str	r1, [r7, #8]
 8016eb8:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 8016eba:	68fb      	ldr	r3, [r7, #12]
 8016ebc:	61fb      	str	r3, [r7, #28]
 8016ebe:	68bb      	ldr	r3, [r7, #8]
 8016ec0:	61bb      	str	r3, [r7, #24]
	int r = 0;
 8016ec2:	2300      	movs	r3, #0
 8016ec4:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 8016ec6:	69fb      	ldr	r3, [r7, #28]
 8016ec8:	1c5a      	adds	r2, r3, #1
 8016eca:	61fa      	str	r2, [r7, #28]
 8016ecc:	781b      	ldrb	r3, [r3, #0]
 8016ece:	4619      	mov	r1, r3
 8016ed0:	69bb      	ldr	r3, [r7, #24]
 8016ed2:	1c5a      	adds	r2, r3, #1
 8016ed4:	61ba      	str	r2, [r7, #24]
 8016ed6:	781b      	ldrb	r3, [r3, #0]
 8016ed8:	1acb      	subs	r3, r1, r3
 8016eda:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 8016edc:	687b      	ldr	r3, [r7, #4]
 8016ede:	3b01      	subs	r3, #1
 8016ee0:	607b      	str	r3, [r7, #4]
 8016ee2:	687b      	ldr	r3, [r7, #4]
 8016ee4:	2b00      	cmp	r3, #0
 8016ee6:	d002      	beq.n	8016eee <mem_cmp+0x40>
 8016ee8:	697b      	ldr	r3, [r7, #20]
 8016eea:	2b00      	cmp	r3, #0
 8016eec:	d0eb      	beq.n	8016ec6 <mem_cmp+0x18>

	return r;
 8016eee:	697b      	ldr	r3, [r7, #20]
}
 8016ef0:	4618      	mov	r0, r3
 8016ef2:	3724      	adds	r7, #36	; 0x24
 8016ef4:	46bd      	mov	sp, r7
 8016ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016efa:	4770      	bx	lr

08016efc <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 8016efc:	b480      	push	{r7}
 8016efe:	b083      	sub	sp, #12
 8016f00:	af00      	add	r7, sp, #0
 8016f02:	6078      	str	r0, [r7, #4]
 8016f04:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 8016f06:	e002      	b.n	8016f0e <chk_chr+0x12>
 8016f08:	687b      	ldr	r3, [r7, #4]
 8016f0a:	3301      	adds	r3, #1
 8016f0c:	607b      	str	r3, [r7, #4]
 8016f0e:	687b      	ldr	r3, [r7, #4]
 8016f10:	781b      	ldrb	r3, [r3, #0]
 8016f12:	2b00      	cmp	r3, #0
 8016f14:	d005      	beq.n	8016f22 <chk_chr+0x26>
 8016f16:	687b      	ldr	r3, [r7, #4]
 8016f18:	781b      	ldrb	r3, [r3, #0]
 8016f1a:	461a      	mov	r2, r3
 8016f1c:	683b      	ldr	r3, [r7, #0]
 8016f1e:	4293      	cmp	r3, r2
 8016f20:	d1f2      	bne.n	8016f08 <chk_chr+0xc>
	return *str;
 8016f22:	687b      	ldr	r3, [r7, #4]
 8016f24:	781b      	ldrb	r3, [r3, #0]
}
 8016f26:	4618      	mov	r0, r3
 8016f28:	370c      	adds	r7, #12
 8016f2a:	46bd      	mov	sp, r7
 8016f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016f30:	4770      	bx	lr
	...

08016f34 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8016f34:	b480      	push	{r7}
 8016f36:	b085      	sub	sp, #20
 8016f38:	af00      	add	r7, sp, #0
 8016f3a:	6078      	str	r0, [r7, #4]
 8016f3c:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 8016f3e:	2300      	movs	r3, #0
 8016f40:	60bb      	str	r3, [r7, #8]
 8016f42:	68bb      	ldr	r3, [r7, #8]
 8016f44:	60fb      	str	r3, [r7, #12]
 8016f46:	e029      	b.n	8016f9c <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 8016f48:	4a27      	ldr	r2, [pc, #156]	; (8016fe8 <chk_lock+0xb4>)
 8016f4a:	68fb      	ldr	r3, [r7, #12]
 8016f4c:	011b      	lsls	r3, r3, #4
 8016f4e:	4413      	add	r3, r2
 8016f50:	681b      	ldr	r3, [r3, #0]
 8016f52:	2b00      	cmp	r3, #0
 8016f54:	d01d      	beq.n	8016f92 <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8016f56:	4a24      	ldr	r2, [pc, #144]	; (8016fe8 <chk_lock+0xb4>)
 8016f58:	68fb      	ldr	r3, [r7, #12]
 8016f5a:	011b      	lsls	r3, r3, #4
 8016f5c:	4413      	add	r3, r2
 8016f5e:	681a      	ldr	r2, [r3, #0]
 8016f60:	687b      	ldr	r3, [r7, #4]
 8016f62:	681b      	ldr	r3, [r3, #0]
 8016f64:	429a      	cmp	r2, r3
 8016f66:	d116      	bne.n	8016f96 <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 8016f68:	4a1f      	ldr	r2, [pc, #124]	; (8016fe8 <chk_lock+0xb4>)
 8016f6a:	68fb      	ldr	r3, [r7, #12]
 8016f6c:	011b      	lsls	r3, r3, #4
 8016f6e:	4413      	add	r3, r2
 8016f70:	3304      	adds	r3, #4
 8016f72:	681a      	ldr	r2, [r3, #0]
 8016f74:	687b      	ldr	r3, [r7, #4]
 8016f76:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8016f78:	429a      	cmp	r2, r3
 8016f7a:	d10c      	bne.n	8016f96 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8016f7c:	4a1a      	ldr	r2, [pc, #104]	; (8016fe8 <chk_lock+0xb4>)
 8016f7e:	68fb      	ldr	r3, [r7, #12]
 8016f80:	011b      	lsls	r3, r3, #4
 8016f82:	4413      	add	r3, r2
 8016f84:	3308      	adds	r3, #8
 8016f86:	681a      	ldr	r2, [r3, #0]
 8016f88:	687b      	ldr	r3, [r7, #4]
 8016f8a:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 8016f8c:	429a      	cmp	r2, r3
 8016f8e:	d102      	bne.n	8016f96 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8016f90:	e007      	b.n	8016fa2 <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 8016f92:	2301      	movs	r3, #1
 8016f94:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 8016f96:	68fb      	ldr	r3, [r7, #12]
 8016f98:	3301      	adds	r3, #1
 8016f9a:	60fb      	str	r3, [r7, #12]
 8016f9c:	68fb      	ldr	r3, [r7, #12]
 8016f9e:	2b01      	cmp	r3, #1
 8016fa0:	d9d2      	bls.n	8016f48 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 8016fa2:	68fb      	ldr	r3, [r7, #12]
 8016fa4:	2b02      	cmp	r3, #2
 8016fa6:	d109      	bne.n	8016fbc <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 8016fa8:	68bb      	ldr	r3, [r7, #8]
 8016faa:	2b00      	cmp	r3, #0
 8016fac:	d102      	bne.n	8016fb4 <chk_lock+0x80>
 8016fae:	683b      	ldr	r3, [r7, #0]
 8016fb0:	2b02      	cmp	r3, #2
 8016fb2:	d101      	bne.n	8016fb8 <chk_lock+0x84>
 8016fb4:	2300      	movs	r3, #0
 8016fb6:	e010      	b.n	8016fda <chk_lock+0xa6>
 8016fb8:	2312      	movs	r3, #18
 8016fba:	e00e      	b.n	8016fda <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 8016fbc:	683b      	ldr	r3, [r7, #0]
 8016fbe:	2b00      	cmp	r3, #0
 8016fc0:	d108      	bne.n	8016fd4 <chk_lock+0xa0>
 8016fc2:	4a09      	ldr	r2, [pc, #36]	; (8016fe8 <chk_lock+0xb4>)
 8016fc4:	68fb      	ldr	r3, [r7, #12]
 8016fc6:	011b      	lsls	r3, r3, #4
 8016fc8:	4413      	add	r3, r2
 8016fca:	330c      	adds	r3, #12
 8016fcc:	881b      	ldrh	r3, [r3, #0]
 8016fce:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8016fd2:	d101      	bne.n	8016fd8 <chk_lock+0xa4>
 8016fd4:	2310      	movs	r3, #16
 8016fd6:	e000      	b.n	8016fda <chk_lock+0xa6>
 8016fd8:	2300      	movs	r3, #0
}
 8016fda:	4618      	mov	r0, r3
 8016fdc:	3714      	adds	r7, #20
 8016fde:	46bd      	mov	sp, r7
 8016fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016fe4:	4770      	bx	lr
 8016fe6:	bf00      	nop
 8016fe8:	240404d8 	.word	0x240404d8

08016fec <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 8016fec:	b480      	push	{r7}
 8016fee:	b083      	sub	sp, #12
 8016ff0:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8016ff2:	2300      	movs	r3, #0
 8016ff4:	607b      	str	r3, [r7, #4]
 8016ff6:	e002      	b.n	8016ffe <enq_lock+0x12>
 8016ff8:	687b      	ldr	r3, [r7, #4]
 8016ffa:	3301      	adds	r3, #1
 8016ffc:	607b      	str	r3, [r7, #4]
 8016ffe:	687b      	ldr	r3, [r7, #4]
 8017000:	2b01      	cmp	r3, #1
 8017002:	d806      	bhi.n	8017012 <enq_lock+0x26>
 8017004:	4a09      	ldr	r2, [pc, #36]	; (801702c <enq_lock+0x40>)
 8017006:	687b      	ldr	r3, [r7, #4]
 8017008:	011b      	lsls	r3, r3, #4
 801700a:	4413      	add	r3, r2
 801700c:	681b      	ldr	r3, [r3, #0]
 801700e:	2b00      	cmp	r3, #0
 8017010:	d1f2      	bne.n	8016ff8 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 8017012:	687b      	ldr	r3, [r7, #4]
 8017014:	2b02      	cmp	r3, #2
 8017016:	bf14      	ite	ne
 8017018:	2301      	movne	r3, #1
 801701a:	2300      	moveq	r3, #0
 801701c:	b2db      	uxtb	r3, r3
}
 801701e:	4618      	mov	r0, r3
 8017020:	370c      	adds	r7, #12
 8017022:	46bd      	mov	sp, r7
 8017024:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017028:	4770      	bx	lr
 801702a:	bf00      	nop
 801702c:	240404d8 	.word	0x240404d8

08017030 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8017030:	b480      	push	{r7}
 8017032:	b085      	sub	sp, #20
 8017034:	af00      	add	r7, sp, #0
 8017036:	6078      	str	r0, [r7, #4]
 8017038:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 801703a:	2300      	movs	r3, #0
 801703c:	60fb      	str	r3, [r7, #12]
 801703e:	e01f      	b.n	8017080 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 8017040:	4a41      	ldr	r2, [pc, #260]	; (8017148 <inc_lock+0x118>)
 8017042:	68fb      	ldr	r3, [r7, #12]
 8017044:	011b      	lsls	r3, r3, #4
 8017046:	4413      	add	r3, r2
 8017048:	681a      	ldr	r2, [r3, #0]
 801704a:	687b      	ldr	r3, [r7, #4]
 801704c:	681b      	ldr	r3, [r3, #0]
 801704e:	429a      	cmp	r2, r3
 8017050:	d113      	bne.n	801707a <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 8017052:	4a3d      	ldr	r2, [pc, #244]	; (8017148 <inc_lock+0x118>)
 8017054:	68fb      	ldr	r3, [r7, #12]
 8017056:	011b      	lsls	r3, r3, #4
 8017058:	4413      	add	r3, r2
 801705a:	3304      	adds	r3, #4
 801705c:	681a      	ldr	r2, [r3, #0]
 801705e:	687b      	ldr	r3, [r7, #4]
 8017060:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 8017062:	429a      	cmp	r2, r3
 8017064:	d109      	bne.n	801707a <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 8017066:	4a38      	ldr	r2, [pc, #224]	; (8017148 <inc_lock+0x118>)
 8017068:	68fb      	ldr	r3, [r7, #12]
 801706a:	011b      	lsls	r3, r3, #4
 801706c:	4413      	add	r3, r2
 801706e:	3308      	adds	r3, #8
 8017070:	681a      	ldr	r2, [r3, #0]
 8017072:	687b      	ldr	r3, [r7, #4]
 8017074:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 8017076:	429a      	cmp	r2, r3
 8017078:	d006      	beq.n	8017088 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 801707a:	68fb      	ldr	r3, [r7, #12]
 801707c:	3301      	adds	r3, #1
 801707e:	60fb      	str	r3, [r7, #12]
 8017080:	68fb      	ldr	r3, [r7, #12]
 8017082:	2b01      	cmp	r3, #1
 8017084:	d9dc      	bls.n	8017040 <inc_lock+0x10>
 8017086:	e000      	b.n	801708a <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 8017088:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 801708a:	68fb      	ldr	r3, [r7, #12]
 801708c:	2b02      	cmp	r3, #2
 801708e:	d132      	bne.n	80170f6 <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8017090:	2300      	movs	r3, #0
 8017092:	60fb      	str	r3, [r7, #12]
 8017094:	e002      	b.n	801709c <inc_lock+0x6c>
 8017096:	68fb      	ldr	r3, [r7, #12]
 8017098:	3301      	adds	r3, #1
 801709a:	60fb      	str	r3, [r7, #12]
 801709c:	68fb      	ldr	r3, [r7, #12]
 801709e:	2b01      	cmp	r3, #1
 80170a0:	d806      	bhi.n	80170b0 <inc_lock+0x80>
 80170a2:	4a29      	ldr	r2, [pc, #164]	; (8017148 <inc_lock+0x118>)
 80170a4:	68fb      	ldr	r3, [r7, #12]
 80170a6:	011b      	lsls	r3, r3, #4
 80170a8:	4413      	add	r3, r2
 80170aa:	681b      	ldr	r3, [r3, #0]
 80170ac:	2b00      	cmp	r3, #0
 80170ae:	d1f2      	bne.n	8017096 <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 80170b0:	68fb      	ldr	r3, [r7, #12]
 80170b2:	2b02      	cmp	r3, #2
 80170b4:	d101      	bne.n	80170ba <inc_lock+0x8a>
 80170b6:	2300      	movs	r3, #0
 80170b8:	e040      	b.n	801713c <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 80170ba:	687b      	ldr	r3, [r7, #4]
 80170bc:	681a      	ldr	r2, [r3, #0]
 80170be:	4922      	ldr	r1, [pc, #136]	; (8017148 <inc_lock+0x118>)
 80170c0:	68fb      	ldr	r3, [r7, #12]
 80170c2:	011b      	lsls	r3, r3, #4
 80170c4:	440b      	add	r3, r1
 80170c6:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 80170c8:	687b      	ldr	r3, [r7, #4]
 80170ca:	689a      	ldr	r2, [r3, #8]
 80170cc:	491e      	ldr	r1, [pc, #120]	; (8017148 <inc_lock+0x118>)
 80170ce:	68fb      	ldr	r3, [r7, #12]
 80170d0:	011b      	lsls	r3, r3, #4
 80170d2:	440b      	add	r3, r1
 80170d4:	3304      	adds	r3, #4
 80170d6:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 80170d8:	687b      	ldr	r3, [r7, #4]
 80170da:	695a      	ldr	r2, [r3, #20]
 80170dc:	491a      	ldr	r1, [pc, #104]	; (8017148 <inc_lock+0x118>)
 80170de:	68fb      	ldr	r3, [r7, #12]
 80170e0:	011b      	lsls	r3, r3, #4
 80170e2:	440b      	add	r3, r1
 80170e4:	3308      	adds	r3, #8
 80170e6:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 80170e8:	4a17      	ldr	r2, [pc, #92]	; (8017148 <inc_lock+0x118>)
 80170ea:	68fb      	ldr	r3, [r7, #12]
 80170ec:	011b      	lsls	r3, r3, #4
 80170ee:	4413      	add	r3, r2
 80170f0:	330c      	adds	r3, #12
 80170f2:	2200      	movs	r2, #0
 80170f4:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 80170f6:	683b      	ldr	r3, [r7, #0]
 80170f8:	2b00      	cmp	r3, #0
 80170fa:	d009      	beq.n	8017110 <inc_lock+0xe0>
 80170fc:	4a12      	ldr	r2, [pc, #72]	; (8017148 <inc_lock+0x118>)
 80170fe:	68fb      	ldr	r3, [r7, #12]
 8017100:	011b      	lsls	r3, r3, #4
 8017102:	4413      	add	r3, r2
 8017104:	330c      	adds	r3, #12
 8017106:	881b      	ldrh	r3, [r3, #0]
 8017108:	2b00      	cmp	r3, #0
 801710a:	d001      	beq.n	8017110 <inc_lock+0xe0>
 801710c:	2300      	movs	r3, #0
 801710e:	e015      	b.n	801713c <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 8017110:	683b      	ldr	r3, [r7, #0]
 8017112:	2b00      	cmp	r3, #0
 8017114:	d108      	bne.n	8017128 <inc_lock+0xf8>
 8017116:	4a0c      	ldr	r2, [pc, #48]	; (8017148 <inc_lock+0x118>)
 8017118:	68fb      	ldr	r3, [r7, #12]
 801711a:	011b      	lsls	r3, r3, #4
 801711c:	4413      	add	r3, r2
 801711e:	330c      	adds	r3, #12
 8017120:	881b      	ldrh	r3, [r3, #0]
 8017122:	3301      	adds	r3, #1
 8017124:	b29a      	uxth	r2, r3
 8017126:	e001      	b.n	801712c <inc_lock+0xfc>
 8017128:	f44f 7280 	mov.w	r2, #256	; 0x100
 801712c:	4906      	ldr	r1, [pc, #24]	; (8017148 <inc_lock+0x118>)
 801712e:	68fb      	ldr	r3, [r7, #12]
 8017130:	011b      	lsls	r3, r3, #4
 8017132:	440b      	add	r3, r1
 8017134:	330c      	adds	r3, #12
 8017136:	801a      	strh	r2, [r3, #0]

	return i + 1;
 8017138:	68fb      	ldr	r3, [r7, #12]
 801713a:	3301      	adds	r3, #1
}
 801713c:	4618      	mov	r0, r3
 801713e:	3714      	adds	r7, #20
 8017140:	46bd      	mov	sp, r7
 8017142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017146:	4770      	bx	lr
 8017148:	240404d8 	.word	0x240404d8

0801714c <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 801714c:	b480      	push	{r7}
 801714e:	b085      	sub	sp, #20
 8017150:	af00      	add	r7, sp, #0
 8017152:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 8017154:	687b      	ldr	r3, [r7, #4]
 8017156:	3b01      	subs	r3, #1
 8017158:	607b      	str	r3, [r7, #4]
 801715a:	687b      	ldr	r3, [r7, #4]
 801715c:	2b01      	cmp	r3, #1
 801715e:	d825      	bhi.n	80171ac <dec_lock+0x60>
		n = Files[i].ctr;
 8017160:	4a17      	ldr	r2, [pc, #92]	; (80171c0 <dec_lock+0x74>)
 8017162:	687b      	ldr	r3, [r7, #4]
 8017164:	011b      	lsls	r3, r3, #4
 8017166:	4413      	add	r3, r2
 8017168:	330c      	adds	r3, #12
 801716a:	881b      	ldrh	r3, [r3, #0]
 801716c:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 801716e:	89fb      	ldrh	r3, [r7, #14]
 8017170:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8017174:	d101      	bne.n	801717a <dec_lock+0x2e>
 8017176:	2300      	movs	r3, #0
 8017178:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 801717a:	89fb      	ldrh	r3, [r7, #14]
 801717c:	2b00      	cmp	r3, #0
 801717e:	d002      	beq.n	8017186 <dec_lock+0x3a>
 8017180:	89fb      	ldrh	r3, [r7, #14]
 8017182:	3b01      	subs	r3, #1
 8017184:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 8017186:	4a0e      	ldr	r2, [pc, #56]	; (80171c0 <dec_lock+0x74>)
 8017188:	687b      	ldr	r3, [r7, #4]
 801718a:	011b      	lsls	r3, r3, #4
 801718c:	4413      	add	r3, r2
 801718e:	330c      	adds	r3, #12
 8017190:	89fa      	ldrh	r2, [r7, #14]
 8017192:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 8017194:	89fb      	ldrh	r3, [r7, #14]
 8017196:	2b00      	cmp	r3, #0
 8017198:	d105      	bne.n	80171a6 <dec_lock+0x5a>
 801719a:	4a09      	ldr	r2, [pc, #36]	; (80171c0 <dec_lock+0x74>)
 801719c:	687b      	ldr	r3, [r7, #4]
 801719e:	011b      	lsls	r3, r3, #4
 80171a0:	4413      	add	r3, r2
 80171a2:	2200      	movs	r2, #0
 80171a4:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 80171a6:	2300      	movs	r3, #0
 80171a8:	737b      	strb	r3, [r7, #13]
 80171aa:	e001      	b.n	80171b0 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 80171ac:	2302      	movs	r3, #2
 80171ae:	737b      	strb	r3, [r7, #13]
	}
	return res;
 80171b0:	7b7b      	ldrb	r3, [r7, #13]
}
 80171b2:	4618      	mov	r0, r3
 80171b4:	3714      	adds	r7, #20
 80171b6:	46bd      	mov	sp, r7
 80171b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80171bc:	4770      	bx	lr
 80171be:	bf00      	nop
 80171c0:	240404d8 	.word	0x240404d8

080171c4 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 80171c4:	b480      	push	{r7}
 80171c6:	b085      	sub	sp, #20
 80171c8:	af00      	add	r7, sp, #0
 80171ca:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 80171cc:	2300      	movs	r3, #0
 80171ce:	60fb      	str	r3, [r7, #12]
 80171d0:	e010      	b.n	80171f4 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 80171d2:	4a0d      	ldr	r2, [pc, #52]	; (8017208 <clear_lock+0x44>)
 80171d4:	68fb      	ldr	r3, [r7, #12]
 80171d6:	011b      	lsls	r3, r3, #4
 80171d8:	4413      	add	r3, r2
 80171da:	681b      	ldr	r3, [r3, #0]
 80171dc:	687a      	ldr	r2, [r7, #4]
 80171de:	429a      	cmp	r2, r3
 80171e0:	d105      	bne.n	80171ee <clear_lock+0x2a>
 80171e2:	4a09      	ldr	r2, [pc, #36]	; (8017208 <clear_lock+0x44>)
 80171e4:	68fb      	ldr	r3, [r7, #12]
 80171e6:	011b      	lsls	r3, r3, #4
 80171e8:	4413      	add	r3, r2
 80171ea:	2200      	movs	r2, #0
 80171ec:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 80171ee:	68fb      	ldr	r3, [r7, #12]
 80171f0:	3301      	adds	r3, #1
 80171f2:	60fb      	str	r3, [r7, #12]
 80171f4:	68fb      	ldr	r3, [r7, #12]
 80171f6:	2b01      	cmp	r3, #1
 80171f8:	d9eb      	bls.n	80171d2 <clear_lock+0xe>
	}
}
 80171fa:	bf00      	nop
 80171fc:	3714      	adds	r7, #20
 80171fe:	46bd      	mov	sp, r7
 8017200:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017204:	4770      	bx	lr
 8017206:	bf00      	nop
 8017208:	240404d8 	.word	0x240404d8

0801720c <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 801720c:	b580      	push	{r7, lr}
 801720e:	b086      	sub	sp, #24
 8017210:	af00      	add	r7, sp, #0
 8017212:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 8017214:	2300      	movs	r3, #0
 8017216:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8017218:	687b      	ldr	r3, [r7, #4]
 801721a:	78db      	ldrb	r3, [r3, #3]
 801721c:	2b00      	cmp	r3, #0
 801721e:	d034      	beq.n	801728a <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 8017220:	687b      	ldr	r3, [r7, #4]
 8017222:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8017224:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 8017226:	687b      	ldr	r3, [r7, #4]
 8017228:	7858      	ldrb	r0, [r3, #1]
 801722a:	687b      	ldr	r3, [r7, #4]
 801722c:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8017230:	2301      	movs	r3, #1
 8017232:	697a      	ldr	r2, [r7, #20]
 8017234:	f7ff fd40 	bl	8016cb8 <disk_write>
 8017238:	4603      	mov	r3, r0
 801723a:	2b00      	cmp	r3, #0
 801723c:	d002      	beq.n	8017244 <sync_window+0x38>
			res = FR_DISK_ERR;
 801723e:	2301      	movs	r3, #1
 8017240:	73fb      	strb	r3, [r7, #15]
 8017242:	e022      	b.n	801728a <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 8017244:	687b      	ldr	r3, [r7, #4]
 8017246:	2200      	movs	r2, #0
 8017248:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 801724a:	687b      	ldr	r3, [r7, #4]
 801724c:	6a1b      	ldr	r3, [r3, #32]
 801724e:	697a      	ldr	r2, [r7, #20]
 8017250:	1ad2      	subs	r2, r2, r3
 8017252:	687b      	ldr	r3, [r7, #4]
 8017254:	699b      	ldr	r3, [r3, #24]
 8017256:	429a      	cmp	r2, r3
 8017258:	d217      	bcs.n	801728a <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 801725a:	687b      	ldr	r3, [r7, #4]
 801725c:	789b      	ldrb	r3, [r3, #2]
 801725e:	613b      	str	r3, [r7, #16]
 8017260:	e010      	b.n	8017284 <sync_window+0x78>
					wsect += fs->fsize;
 8017262:	687b      	ldr	r3, [r7, #4]
 8017264:	699b      	ldr	r3, [r3, #24]
 8017266:	697a      	ldr	r2, [r7, #20]
 8017268:	4413      	add	r3, r2
 801726a:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 801726c:	687b      	ldr	r3, [r7, #4]
 801726e:	7858      	ldrb	r0, [r3, #1]
 8017270:	687b      	ldr	r3, [r7, #4]
 8017272:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8017276:	2301      	movs	r3, #1
 8017278:	697a      	ldr	r2, [r7, #20]
 801727a:	f7ff fd1d 	bl	8016cb8 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 801727e:	693b      	ldr	r3, [r7, #16]
 8017280:	3b01      	subs	r3, #1
 8017282:	613b      	str	r3, [r7, #16]
 8017284:	693b      	ldr	r3, [r7, #16]
 8017286:	2b01      	cmp	r3, #1
 8017288:	d8eb      	bhi.n	8017262 <sync_window+0x56>
				}
			}
		}
	}
	return res;
 801728a:	7bfb      	ldrb	r3, [r7, #15]
}
 801728c:	4618      	mov	r0, r3
 801728e:	3718      	adds	r7, #24
 8017290:	46bd      	mov	sp, r7
 8017292:	bd80      	pop	{r7, pc}

08017294 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 8017294:	b580      	push	{r7, lr}
 8017296:	b084      	sub	sp, #16
 8017298:	af00      	add	r7, sp, #0
 801729a:	6078      	str	r0, [r7, #4]
 801729c:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 801729e:	2300      	movs	r3, #0
 80172a0:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 80172a2:	687b      	ldr	r3, [r7, #4]
 80172a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80172a6:	683a      	ldr	r2, [r7, #0]
 80172a8:	429a      	cmp	r2, r3
 80172aa:	d01b      	beq.n	80172e4 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 80172ac:	6878      	ldr	r0, [r7, #4]
 80172ae:	f7ff ffad 	bl	801720c <sync_window>
 80172b2:	4603      	mov	r3, r0
 80172b4:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 80172b6:	7bfb      	ldrb	r3, [r7, #15]
 80172b8:	2b00      	cmp	r3, #0
 80172ba:	d113      	bne.n	80172e4 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 80172bc:	687b      	ldr	r3, [r7, #4]
 80172be:	7858      	ldrb	r0, [r3, #1]
 80172c0:	687b      	ldr	r3, [r7, #4]
 80172c2:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80172c6:	2301      	movs	r3, #1
 80172c8:	683a      	ldr	r2, [r7, #0]
 80172ca:	f7ff fcd5 	bl	8016c78 <disk_read>
 80172ce:	4603      	mov	r3, r0
 80172d0:	2b00      	cmp	r3, #0
 80172d2:	d004      	beq.n	80172de <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 80172d4:	f04f 33ff 	mov.w	r3, #4294967295
 80172d8:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 80172da:	2301      	movs	r3, #1
 80172dc:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 80172de:	687b      	ldr	r3, [r7, #4]
 80172e0:	683a      	ldr	r2, [r7, #0]
 80172e2:	62da      	str	r2, [r3, #44]	; 0x2c
		}
	}
	return res;
 80172e4:	7bfb      	ldrb	r3, [r7, #15]
}
 80172e6:	4618      	mov	r0, r3
 80172e8:	3710      	adds	r7, #16
 80172ea:	46bd      	mov	sp, r7
 80172ec:	bd80      	pop	{r7, pc}
	...

080172f0 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 80172f0:	b580      	push	{r7, lr}
 80172f2:	b084      	sub	sp, #16
 80172f4:	af00      	add	r7, sp, #0
 80172f6:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 80172f8:	6878      	ldr	r0, [r7, #4]
 80172fa:	f7ff ff87 	bl	801720c <sync_window>
 80172fe:	4603      	mov	r3, r0
 8017300:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8017302:	7bfb      	ldrb	r3, [r7, #15]
 8017304:	2b00      	cmp	r3, #0
 8017306:	d158      	bne.n	80173ba <sync_fs+0xca>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 8017308:	687b      	ldr	r3, [r7, #4]
 801730a:	781b      	ldrb	r3, [r3, #0]
 801730c:	2b03      	cmp	r3, #3
 801730e:	d148      	bne.n	80173a2 <sync_fs+0xb2>
 8017310:	687b      	ldr	r3, [r7, #4]
 8017312:	791b      	ldrb	r3, [r3, #4]
 8017314:	2b01      	cmp	r3, #1
 8017316:	d144      	bne.n	80173a2 <sync_fs+0xb2>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 8017318:	687b      	ldr	r3, [r7, #4]
 801731a:	3330      	adds	r3, #48	; 0x30
 801731c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8017320:	2100      	movs	r1, #0
 8017322:	4618      	mov	r0, r3
 8017324:	f7ff fda9 	bl	8016e7a <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 8017328:	687b      	ldr	r3, [r7, #4]
 801732a:	3330      	adds	r3, #48	; 0x30
 801732c:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8017330:	f64a 2155 	movw	r1, #43605	; 0xaa55
 8017334:	4618      	mov	r0, r3
 8017336:	f7ff fd38 	bl	8016daa <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 801733a:	687b      	ldr	r3, [r7, #4]
 801733c:	3330      	adds	r3, #48	; 0x30
 801733e:	4921      	ldr	r1, [pc, #132]	; (80173c4 <sync_fs+0xd4>)
 8017340:	4618      	mov	r0, r3
 8017342:	f7ff fd4d 	bl	8016de0 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 8017346:	687b      	ldr	r3, [r7, #4]
 8017348:	3330      	adds	r3, #48	; 0x30
 801734a:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 801734e:	491e      	ldr	r1, [pc, #120]	; (80173c8 <sync_fs+0xd8>)
 8017350:	4618      	mov	r0, r3
 8017352:	f7ff fd45 	bl	8016de0 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 8017356:	687b      	ldr	r3, [r7, #4]
 8017358:	3330      	adds	r3, #48	; 0x30
 801735a:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 801735e:	687b      	ldr	r3, [r7, #4]
 8017360:	691b      	ldr	r3, [r3, #16]
 8017362:	4619      	mov	r1, r3
 8017364:	4610      	mov	r0, r2
 8017366:	f7ff fd3b 	bl	8016de0 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 801736a:	687b      	ldr	r3, [r7, #4]
 801736c:	3330      	adds	r3, #48	; 0x30
 801736e:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 8017372:	687b      	ldr	r3, [r7, #4]
 8017374:	68db      	ldr	r3, [r3, #12]
 8017376:	4619      	mov	r1, r3
 8017378:	4610      	mov	r0, r2
 801737a:	f7ff fd31 	bl	8016de0 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 801737e:	687b      	ldr	r3, [r7, #4]
 8017380:	69db      	ldr	r3, [r3, #28]
 8017382:	1c5a      	adds	r2, r3, #1
 8017384:	687b      	ldr	r3, [r7, #4]
 8017386:	62da      	str	r2, [r3, #44]	; 0x2c
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 8017388:	687b      	ldr	r3, [r7, #4]
 801738a:	7858      	ldrb	r0, [r3, #1]
 801738c:	687b      	ldr	r3, [r7, #4]
 801738e:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8017392:	687b      	ldr	r3, [r7, #4]
 8017394:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8017396:	2301      	movs	r3, #1
 8017398:	f7ff fc8e 	bl	8016cb8 <disk_write>
			fs->fsi_flag = 0;
 801739c:	687b      	ldr	r3, [r7, #4]
 801739e:	2200      	movs	r2, #0
 80173a0:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 80173a2:	687b      	ldr	r3, [r7, #4]
 80173a4:	785b      	ldrb	r3, [r3, #1]
 80173a6:	2200      	movs	r2, #0
 80173a8:	2100      	movs	r1, #0
 80173aa:	4618      	mov	r0, r3
 80173ac:	f7ff fca4 	bl	8016cf8 <disk_ioctl>
 80173b0:	4603      	mov	r3, r0
 80173b2:	2b00      	cmp	r3, #0
 80173b4:	d001      	beq.n	80173ba <sync_fs+0xca>
 80173b6:	2301      	movs	r3, #1
 80173b8:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 80173ba:	7bfb      	ldrb	r3, [r7, #15]
}
 80173bc:	4618      	mov	r0, r3
 80173be:	3710      	adds	r7, #16
 80173c0:	46bd      	mov	sp, r7
 80173c2:	bd80      	pop	{r7, pc}
 80173c4:	41615252 	.word	0x41615252
 80173c8:	61417272 	.word	0x61417272

080173cc <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 80173cc:	b480      	push	{r7}
 80173ce:	b083      	sub	sp, #12
 80173d0:	af00      	add	r7, sp, #0
 80173d2:	6078      	str	r0, [r7, #4]
 80173d4:	6039      	str	r1, [r7, #0]
	clst -= 2;
 80173d6:	683b      	ldr	r3, [r7, #0]
 80173d8:	3b02      	subs	r3, #2
 80173da:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 80173dc:	687b      	ldr	r3, [r7, #4]
 80173de:	695b      	ldr	r3, [r3, #20]
 80173e0:	3b02      	subs	r3, #2
 80173e2:	683a      	ldr	r2, [r7, #0]
 80173e4:	429a      	cmp	r2, r3
 80173e6:	d301      	bcc.n	80173ec <clust2sect+0x20>
 80173e8:	2300      	movs	r3, #0
 80173ea:	e008      	b.n	80173fe <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 80173ec:	687b      	ldr	r3, [r7, #4]
 80173ee:	895b      	ldrh	r3, [r3, #10]
 80173f0:	461a      	mov	r2, r3
 80173f2:	683b      	ldr	r3, [r7, #0]
 80173f4:	fb03 f202 	mul.w	r2, r3, r2
 80173f8:	687b      	ldr	r3, [r7, #4]
 80173fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80173fc:	4413      	add	r3, r2
}
 80173fe:	4618      	mov	r0, r3
 8017400:	370c      	adds	r7, #12
 8017402:	46bd      	mov	sp, r7
 8017404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017408:	4770      	bx	lr

0801740a <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 801740a:	b580      	push	{r7, lr}
 801740c:	b086      	sub	sp, #24
 801740e:	af00      	add	r7, sp, #0
 8017410:	6078      	str	r0, [r7, #4]
 8017412:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 8017414:	687b      	ldr	r3, [r7, #4]
 8017416:	681b      	ldr	r3, [r3, #0]
 8017418:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 801741a:	683b      	ldr	r3, [r7, #0]
 801741c:	2b01      	cmp	r3, #1
 801741e:	d904      	bls.n	801742a <get_fat+0x20>
 8017420:	693b      	ldr	r3, [r7, #16]
 8017422:	695b      	ldr	r3, [r3, #20]
 8017424:	683a      	ldr	r2, [r7, #0]
 8017426:	429a      	cmp	r2, r3
 8017428:	d302      	bcc.n	8017430 <get_fat+0x26>
		val = 1;	/* Internal error */
 801742a:	2301      	movs	r3, #1
 801742c:	617b      	str	r3, [r7, #20]
 801742e:	e08c      	b.n	801754a <get_fat+0x140>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 8017430:	f04f 33ff 	mov.w	r3, #4294967295
 8017434:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 8017436:	693b      	ldr	r3, [r7, #16]
 8017438:	781b      	ldrb	r3, [r3, #0]
 801743a:	2b02      	cmp	r3, #2
 801743c:	d045      	beq.n	80174ca <get_fat+0xc0>
 801743e:	2b03      	cmp	r3, #3
 8017440:	d05d      	beq.n	80174fe <get_fat+0xf4>
 8017442:	2b01      	cmp	r3, #1
 8017444:	d177      	bne.n	8017536 <get_fat+0x12c>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 8017446:	683b      	ldr	r3, [r7, #0]
 8017448:	60fb      	str	r3, [r7, #12]
 801744a:	68fb      	ldr	r3, [r7, #12]
 801744c:	085b      	lsrs	r3, r3, #1
 801744e:	68fa      	ldr	r2, [r7, #12]
 8017450:	4413      	add	r3, r2
 8017452:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8017454:	693b      	ldr	r3, [r7, #16]
 8017456:	6a1a      	ldr	r2, [r3, #32]
 8017458:	68fb      	ldr	r3, [r7, #12]
 801745a:	0a5b      	lsrs	r3, r3, #9
 801745c:	4413      	add	r3, r2
 801745e:	4619      	mov	r1, r3
 8017460:	6938      	ldr	r0, [r7, #16]
 8017462:	f7ff ff17 	bl	8017294 <move_window>
 8017466:	4603      	mov	r3, r0
 8017468:	2b00      	cmp	r3, #0
 801746a:	d167      	bne.n	801753c <get_fat+0x132>
			wc = fs->win[bc++ % SS(fs)];
 801746c:	68fb      	ldr	r3, [r7, #12]
 801746e:	1c5a      	adds	r2, r3, #1
 8017470:	60fa      	str	r2, [r7, #12]
 8017472:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8017476:	693a      	ldr	r2, [r7, #16]
 8017478:	4413      	add	r3, r2
 801747a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 801747e:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8017480:	693b      	ldr	r3, [r7, #16]
 8017482:	6a1a      	ldr	r2, [r3, #32]
 8017484:	68fb      	ldr	r3, [r7, #12]
 8017486:	0a5b      	lsrs	r3, r3, #9
 8017488:	4413      	add	r3, r2
 801748a:	4619      	mov	r1, r3
 801748c:	6938      	ldr	r0, [r7, #16]
 801748e:	f7ff ff01 	bl	8017294 <move_window>
 8017492:	4603      	mov	r3, r0
 8017494:	2b00      	cmp	r3, #0
 8017496:	d153      	bne.n	8017540 <get_fat+0x136>
			wc |= fs->win[bc % SS(fs)] << 8;
 8017498:	68fb      	ldr	r3, [r7, #12]
 801749a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801749e:	693a      	ldr	r2, [r7, #16]
 80174a0:	4413      	add	r3, r2
 80174a2:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80174a6:	021b      	lsls	r3, r3, #8
 80174a8:	461a      	mov	r2, r3
 80174aa:	68bb      	ldr	r3, [r7, #8]
 80174ac:	4313      	orrs	r3, r2
 80174ae:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 80174b0:	683b      	ldr	r3, [r7, #0]
 80174b2:	f003 0301 	and.w	r3, r3, #1
 80174b6:	2b00      	cmp	r3, #0
 80174b8:	d002      	beq.n	80174c0 <get_fat+0xb6>
 80174ba:	68bb      	ldr	r3, [r7, #8]
 80174bc:	091b      	lsrs	r3, r3, #4
 80174be:	e002      	b.n	80174c6 <get_fat+0xbc>
 80174c0:	68bb      	ldr	r3, [r7, #8]
 80174c2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80174c6:	617b      	str	r3, [r7, #20]
			break;
 80174c8:	e03f      	b.n	801754a <get_fat+0x140>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 80174ca:	693b      	ldr	r3, [r7, #16]
 80174cc:	6a1a      	ldr	r2, [r3, #32]
 80174ce:	683b      	ldr	r3, [r7, #0]
 80174d0:	0a1b      	lsrs	r3, r3, #8
 80174d2:	4413      	add	r3, r2
 80174d4:	4619      	mov	r1, r3
 80174d6:	6938      	ldr	r0, [r7, #16]
 80174d8:	f7ff fedc 	bl	8017294 <move_window>
 80174dc:	4603      	mov	r3, r0
 80174de:	2b00      	cmp	r3, #0
 80174e0:	d130      	bne.n	8017544 <get_fat+0x13a>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 80174e2:	693b      	ldr	r3, [r7, #16]
 80174e4:	f103 0230 	add.w	r2, r3, #48	; 0x30
 80174e8:	683b      	ldr	r3, [r7, #0]
 80174ea:	005b      	lsls	r3, r3, #1
 80174ec:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 80174f0:	4413      	add	r3, r2
 80174f2:	4618      	mov	r0, r3
 80174f4:	f7ff fc1e 	bl	8016d34 <ld_word>
 80174f8:	4603      	mov	r3, r0
 80174fa:	617b      	str	r3, [r7, #20]
			break;
 80174fc:	e025      	b.n	801754a <get_fat+0x140>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 80174fe:	693b      	ldr	r3, [r7, #16]
 8017500:	6a1a      	ldr	r2, [r3, #32]
 8017502:	683b      	ldr	r3, [r7, #0]
 8017504:	09db      	lsrs	r3, r3, #7
 8017506:	4413      	add	r3, r2
 8017508:	4619      	mov	r1, r3
 801750a:	6938      	ldr	r0, [r7, #16]
 801750c:	f7ff fec2 	bl	8017294 <move_window>
 8017510:	4603      	mov	r3, r0
 8017512:	2b00      	cmp	r3, #0
 8017514:	d118      	bne.n	8017548 <get_fat+0x13e>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 8017516:	693b      	ldr	r3, [r7, #16]
 8017518:	f103 0230 	add.w	r2, r3, #48	; 0x30
 801751c:	683b      	ldr	r3, [r7, #0]
 801751e:	009b      	lsls	r3, r3, #2
 8017520:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 8017524:	4413      	add	r3, r2
 8017526:	4618      	mov	r0, r3
 8017528:	f7ff fc1c 	bl	8016d64 <ld_dword>
 801752c:	4603      	mov	r3, r0
 801752e:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8017532:	617b      	str	r3, [r7, #20]
			break;
 8017534:	e009      	b.n	801754a <get_fat+0x140>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 8017536:	2301      	movs	r3, #1
 8017538:	617b      	str	r3, [r7, #20]
 801753a:	e006      	b.n	801754a <get_fat+0x140>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 801753c:	bf00      	nop
 801753e:	e004      	b.n	801754a <get_fat+0x140>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8017540:	bf00      	nop
 8017542:	e002      	b.n	801754a <get_fat+0x140>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8017544:	bf00      	nop
 8017546:	e000      	b.n	801754a <get_fat+0x140>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8017548:	bf00      	nop
		}
	}

	return val;
 801754a:	697b      	ldr	r3, [r7, #20]
}
 801754c:	4618      	mov	r0, r3
 801754e:	3718      	adds	r7, #24
 8017550:	46bd      	mov	sp, r7
 8017552:	bd80      	pop	{r7, pc}

08017554 <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 8017554:	b590      	push	{r4, r7, lr}
 8017556:	b089      	sub	sp, #36	; 0x24
 8017558:	af00      	add	r7, sp, #0
 801755a:	60f8      	str	r0, [r7, #12]
 801755c:	60b9      	str	r1, [r7, #8]
 801755e:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 8017560:	2302      	movs	r3, #2
 8017562:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 8017564:	68bb      	ldr	r3, [r7, #8]
 8017566:	2b01      	cmp	r3, #1
 8017568:	f240 80d6 	bls.w	8017718 <put_fat+0x1c4>
 801756c:	68fb      	ldr	r3, [r7, #12]
 801756e:	695b      	ldr	r3, [r3, #20]
 8017570:	68ba      	ldr	r2, [r7, #8]
 8017572:	429a      	cmp	r2, r3
 8017574:	f080 80d0 	bcs.w	8017718 <put_fat+0x1c4>
		switch (fs->fs_type) {
 8017578:	68fb      	ldr	r3, [r7, #12]
 801757a:	781b      	ldrb	r3, [r3, #0]
 801757c:	2b02      	cmp	r3, #2
 801757e:	d073      	beq.n	8017668 <put_fat+0x114>
 8017580:	2b03      	cmp	r3, #3
 8017582:	f000 8091 	beq.w	80176a8 <put_fat+0x154>
 8017586:	2b01      	cmp	r3, #1
 8017588:	f040 80c6 	bne.w	8017718 <put_fat+0x1c4>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 801758c:	68bb      	ldr	r3, [r7, #8]
 801758e:	61bb      	str	r3, [r7, #24]
 8017590:	69bb      	ldr	r3, [r7, #24]
 8017592:	085b      	lsrs	r3, r3, #1
 8017594:	69ba      	ldr	r2, [r7, #24]
 8017596:	4413      	add	r3, r2
 8017598:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 801759a:	68fb      	ldr	r3, [r7, #12]
 801759c:	6a1a      	ldr	r2, [r3, #32]
 801759e:	69bb      	ldr	r3, [r7, #24]
 80175a0:	0a5b      	lsrs	r3, r3, #9
 80175a2:	4413      	add	r3, r2
 80175a4:	4619      	mov	r1, r3
 80175a6:	68f8      	ldr	r0, [r7, #12]
 80175a8:	f7ff fe74 	bl	8017294 <move_window>
 80175ac:	4603      	mov	r3, r0
 80175ae:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80175b0:	7ffb      	ldrb	r3, [r7, #31]
 80175b2:	2b00      	cmp	r3, #0
 80175b4:	f040 80a9 	bne.w	801770a <put_fat+0x1b6>
			p = fs->win + bc++ % SS(fs);
 80175b8:	68fb      	ldr	r3, [r7, #12]
 80175ba:	f103 0230 	add.w	r2, r3, #48	; 0x30
 80175be:	69bb      	ldr	r3, [r7, #24]
 80175c0:	1c59      	adds	r1, r3, #1
 80175c2:	61b9      	str	r1, [r7, #24]
 80175c4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80175c8:	4413      	add	r3, r2
 80175ca:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 80175cc:	68bb      	ldr	r3, [r7, #8]
 80175ce:	f003 0301 	and.w	r3, r3, #1
 80175d2:	2b00      	cmp	r3, #0
 80175d4:	d00d      	beq.n	80175f2 <put_fat+0x9e>
 80175d6:	697b      	ldr	r3, [r7, #20]
 80175d8:	781b      	ldrb	r3, [r3, #0]
 80175da:	b25b      	sxtb	r3, r3
 80175dc:	f003 030f 	and.w	r3, r3, #15
 80175e0:	b25a      	sxtb	r2, r3
 80175e2:	687b      	ldr	r3, [r7, #4]
 80175e4:	b2db      	uxtb	r3, r3
 80175e6:	011b      	lsls	r3, r3, #4
 80175e8:	b25b      	sxtb	r3, r3
 80175ea:	4313      	orrs	r3, r2
 80175ec:	b25b      	sxtb	r3, r3
 80175ee:	b2db      	uxtb	r3, r3
 80175f0:	e001      	b.n	80175f6 <put_fat+0xa2>
 80175f2:	687b      	ldr	r3, [r7, #4]
 80175f4:	b2db      	uxtb	r3, r3
 80175f6:	697a      	ldr	r2, [r7, #20]
 80175f8:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 80175fa:	68fb      	ldr	r3, [r7, #12]
 80175fc:	2201      	movs	r2, #1
 80175fe:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8017600:	68fb      	ldr	r3, [r7, #12]
 8017602:	6a1a      	ldr	r2, [r3, #32]
 8017604:	69bb      	ldr	r3, [r7, #24]
 8017606:	0a5b      	lsrs	r3, r3, #9
 8017608:	4413      	add	r3, r2
 801760a:	4619      	mov	r1, r3
 801760c:	68f8      	ldr	r0, [r7, #12]
 801760e:	f7ff fe41 	bl	8017294 <move_window>
 8017612:	4603      	mov	r3, r0
 8017614:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8017616:	7ffb      	ldrb	r3, [r7, #31]
 8017618:	2b00      	cmp	r3, #0
 801761a:	d178      	bne.n	801770e <put_fat+0x1ba>
			p = fs->win + bc % SS(fs);
 801761c:	68fb      	ldr	r3, [r7, #12]
 801761e:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8017622:	69bb      	ldr	r3, [r7, #24]
 8017624:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8017628:	4413      	add	r3, r2
 801762a:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 801762c:	68bb      	ldr	r3, [r7, #8]
 801762e:	f003 0301 	and.w	r3, r3, #1
 8017632:	2b00      	cmp	r3, #0
 8017634:	d003      	beq.n	801763e <put_fat+0xea>
 8017636:	687b      	ldr	r3, [r7, #4]
 8017638:	091b      	lsrs	r3, r3, #4
 801763a:	b2db      	uxtb	r3, r3
 801763c:	e00e      	b.n	801765c <put_fat+0x108>
 801763e:	697b      	ldr	r3, [r7, #20]
 8017640:	781b      	ldrb	r3, [r3, #0]
 8017642:	b25b      	sxtb	r3, r3
 8017644:	f023 030f 	bic.w	r3, r3, #15
 8017648:	b25a      	sxtb	r2, r3
 801764a:	687b      	ldr	r3, [r7, #4]
 801764c:	0a1b      	lsrs	r3, r3, #8
 801764e:	b25b      	sxtb	r3, r3
 8017650:	f003 030f 	and.w	r3, r3, #15
 8017654:	b25b      	sxtb	r3, r3
 8017656:	4313      	orrs	r3, r2
 8017658:	b25b      	sxtb	r3, r3
 801765a:	b2db      	uxtb	r3, r3
 801765c:	697a      	ldr	r2, [r7, #20]
 801765e:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8017660:	68fb      	ldr	r3, [r7, #12]
 8017662:	2201      	movs	r2, #1
 8017664:	70da      	strb	r2, [r3, #3]
			break;
 8017666:	e057      	b.n	8017718 <put_fat+0x1c4>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 8017668:	68fb      	ldr	r3, [r7, #12]
 801766a:	6a1a      	ldr	r2, [r3, #32]
 801766c:	68bb      	ldr	r3, [r7, #8]
 801766e:	0a1b      	lsrs	r3, r3, #8
 8017670:	4413      	add	r3, r2
 8017672:	4619      	mov	r1, r3
 8017674:	68f8      	ldr	r0, [r7, #12]
 8017676:	f7ff fe0d 	bl	8017294 <move_window>
 801767a:	4603      	mov	r3, r0
 801767c:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 801767e:	7ffb      	ldrb	r3, [r7, #31]
 8017680:	2b00      	cmp	r3, #0
 8017682:	d146      	bne.n	8017712 <put_fat+0x1be>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 8017684:	68fb      	ldr	r3, [r7, #12]
 8017686:	f103 0230 	add.w	r2, r3, #48	; 0x30
 801768a:	68bb      	ldr	r3, [r7, #8]
 801768c:	005b      	lsls	r3, r3, #1
 801768e:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 8017692:	4413      	add	r3, r2
 8017694:	687a      	ldr	r2, [r7, #4]
 8017696:	b292      	uxth	r2, r2
 8017698:	4611      	mov	r1, r2
 801769a:	4618      	mov	r0, r3
 801769c:	f7ff fb85 	bl	8016daa <st_word>
			fs->wflag = 1;
 80176a0:	68fb      	ldr	r3, [r7, #12]
 80176a2:	2201      	movs	r2, #1
 80176a4:	70da      	strb	r2, [r3, #3]
			break;
 80176a6:	e037      	b.n	8017718 <put_fat+0x1c4>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 80176a8:	68fb      	ldr	r3, [r7, #12]
 80176aa:	6a1a      	ldr	r2, [r3, #32]
 80176ac:	68bb      	ldr	r3, [r7, #8]
 80176ae:	09db      	lsrs	r3, r3, #7
 80176b0:	4413      	add	r3, r2
 80176b2:	4619      	mov	r1, r3
 80176b4:	68f8      	ldr	r0, [r7, #12]
 80176b6:	f7ff fded 	bl	8017294 <move_window>
 80176ba:	4603      	mov	r3, r0
 80176bc:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80176be:	7ffb      	ldrb	r3, [r7, #31]
 80176c0:	2b00      	cmp	r3, #0
 80176c2:	d128      	bne.n	8017716 <put_fat+0x1c2>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 80176c4:	687b      	ldr	r3, [r7, #4]
 80176c6:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 80176ca:	68fb      	ldr	r3, [r7, #12]
 80176cc:	f103 0230 	add.w	r2, r3, #48	; 0x30
 80176d0:	68bb      	ldr	r3, [r7, #8]
 80176d2:	009b      	lsls	r3, r3, #2
 80176d4:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 80176d8:	4413      	add	r3, r2
 80176da:	4618      	mov	r0, r3
 80176dc:	f7ff fb42 	bl	8016d64 <ld_dword>
 80176e0:	4603      	mov	r3, r0
 80176e2:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 80176e6:	4323      	orrs	r3, r4
 80176e8:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 80176ea:	68fb      	ldr	r3, [r7, #12]
 80176ec:	f103 0230 	add.w	r2, r3, #48	; 0x30
 80176f0:	68bb      	ldr	r3, [r7, #8]
 80176f2:	009b      	lsls	r3, r3, #2
 80176f4:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 80176f8:	4413      	add	r3, r2
 80176fa:	6879      	ldr	r1, [r7, #4]
 80176fc:	4618      	mov	r0, r3
 80176fe:	f7ff fb6f 	bl	8016de0 <st_dword>
			fs->wflag = 1;
 8017702:	68fb      	ldr	r3, [r7, #12]
 8017704:	2201      	movs	r2, #1
 8017706:	70da      	strb	r2, [r3, #3]
			break;
 8017708:	e006      	b.n	8017718 <put_fat+0x1c4>
			if (res != FR_OK) break;
 801770a:	bf00      	nop
 801770c:	e004      	b.n	8017718 <put_fat+0x1c4>
			if (res != FR_OK) break;
 801770e:	bf00      	nop
 8017710:	e002      	b.n	8017718 <put_fat+0x1c4>
			if (res != FR_OK) break;
 8017712:	bf00      	nop
 8017714:	e000      	b.n	8017718 <put_fat+0x1c4>
			if (res != FR_OK) break;
 8017716:	bf00      	nop
		}
	}
	return res;
 8017718:	7ffb      	ldrb	r3, [r7, #31]
}
 801771a:	4618      	mov	r0, r3
 801771c:	3724      	adds	r7, #36	; 0x24
 801771e:	46bd      	mov	sp, r7
 8017720:	bd90      	pop	{r4, r7, pc}

08017722 <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 8017722:	b580      	push	{r7, lr}
 8017724:	b088      	sub	sp, #32
 8017726:	af00      	add	r7, sp, #0
 8017728:	60f8      	str	r0, [r7, #12]
 801772a:	60b9      	str	r1, [r7, #8]
 801772c:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 801772e:	2300      	movs	r3, #0
 8017730:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 8017732:	68fb      	ldr	r3, [r7, #12]
 8017734:	681b      	ldr	r3, [r3, #0]
 8017736:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 8017738:	68bb      	ldr	r3, [r7, #8]
 801773a:	2b01      	cmp	r3, #1
 801773c:	d904      	bls.n	8017748 <remove_chain+0x26>
 801773e:	69bb      	ldr	r3, [r7, #24]
 8017740:	695b      	ldr	r3, [r3, #20]
 8017742:	68ba      	ldr	r2, [r7, #8]
 8017744:	429a      	cmp	r2, r3
 8017746:	d301      	bcc.n	801774c <remove_chain+0x2a>
 8017748:	2302      	movs	r3, #2
 801774a:	e04b      	b.n	80177e4 <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 801774c:	687b      	ldr	r3, [r7, #4]
 801774e:	2b00      	cmp	r3, #0
 8017750:	d00c      	beq.n	801776c <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 8017752:	f04f 32ff 	mov.w	r2, #4294967295
 8017756:	6879      	ldr	r1, [r7, #4]
 8017758:	69b8      	ldr	r0, [r7, #24]
 801775a:	f7ff fefb 	bl	8017554 <put_fat>
 801775e:	4603      	mov	r3, r0
 8017760:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 8017762:	7ffb      	ldrb	r3, [r7, #31]
 8017764:	2b00      	cmp	r3, #0
 8017766:	d001      	beq.n	801776c <remove_chain+0x4a>
 8017768:	7ffb      	ldrb	r3, [r7, #31]
 801776a:	e03b      	b.n	80177e4 <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 801776c:	68b9      	ldr	r1, [r7, #8]
 801776e:	68f8      	ldr	r0, [r7, #12]
 8017770:	f7ff fe4b 	bl	801740a <get_fat>
 8017774:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 8017776:	697b      	ldr	r3, [r7, #20]
 8017778:	2b00      	cmp	r3, #0
 801777a:	d031      	beq.n	80177e0 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 801777c:	697b      	ldr	r3, [r7, #20]
 801777e:	2b01      	cmp	r3, #1
 8017780:	d101      	bne.n	8017786 <remove_chain+0x64>
 8017782:	2302      	movs	r3, #2
 8017784:	e02e      	b.n	80177e4 <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 8017786:	697b      	ldr	r3, [r7, #20]
 8017788:	f1b3 3fff 	cmp.w	r3, #4294967295
 801778c:	d101      	bne.n	8017792 <remove_chain+0x70>
 801778e:	2301      	movs	r3, #1
 8017790:	e028      	b.n	80177e4 <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 8017792:	2200      	movs	r2, #0
 8017794:	68b9      	ldr	r1, [r7, #8]
 8017796:	69b8      	ldr	r0, [r7, #24]
 8017798:	f7ff fedc 	bl	8017554 <put_fat>
 801779c:	4603      	mov	r3, r0
 801779e:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 80177a0:	7ffb      	ldrb	r3, [r7, #31]
 80177a2:	2b00      	cmp	r3, #0
 80177a4:	d001      	beq.n	80177aa <remove_chain+0x88>
 80177a6:	7ffb      	ldrb	r3, [r7, #31]
 80177a8:	e01c      	b.n	80177e4 <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 80177aa:	69bb      	ldr	r3, [r7, #24]
 80177ac:	691a      	ldr	r2, [r3, #16]
 80177ae:	69bb      	ldr	r3, [r7, #24]
 80177b0:	695b      	ldr	r3, [r3, #20]
 80177b2:	3b02      	subs	r3, #2
 80177b4:	429a      	cmp	r2, r3
 80177b6:	d20b      	bcs.n	80177d0 <remove_chain+0xae>
			fs->free_clst++;
 80177b8:	69bb      	ldr	r3, [r7, #24]
 80177ba:	691b      	ldr	r3, [r3, #16]
 80177bc:	1c5a      	adds	r2, r3, #1
 80177be:	69bb      	ldr	r3, [r7, #24]
 80177c0:	611a      	str	r2, [r3, #16]
			fs->fsi_flag |= 1;
 80177c2:	69bb      	ldr	r3, [r7, #24]
 80177c4:	791b      	ldrb	r3, [r3, #4]
 80177c6:	f043 0301 	orr.w	r3, r3, #1
 80177ca:	b2da      	uxtb	r2, r3
 80177cc:	69bb      	ldr	r3, [r7, #24]
 80177ce:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 80177d0:	697b      	ldr	r3, [r7, #20]
 80177d2:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 80177d4:	69bb      	ldr	r3, [r7, #24]
 80177d6:	695b      	ldr	r3, [r3, #20]
 80177d8:	68ba      	ldr	r2, [r7, #8]
 80177da:	429a      	cmp	r2, r3
 80177dc:	d3c6      	bcc.n	801776c <remove_chain+0x4a>
 80177de:	e000      	b.n	80177e2 <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 80177e0:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 80177e2:	2300      	movs	r3, #0
}
 80177e4:	4618      	mov	r0, r3
 80177e6:	3720      	adds	r7, #32
 80177e8:	46bd      	mov	sp, r7
 80177ea:	bd80      	pop	{r7, pc}

080177ec <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 80177ec:	b580      	push	{r7, lr}
 80177ee:	b088      	sub	sp, #32
 80177f0:	af00      	add	r7, sp, #0
 80177f2:	6078      	str	r0, [r7, #4]
 80177f4:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 80177f6:	687b      	ldr	r3, [r7, #4]
 80177f8:	681b      	ldr	r3, [r3, #0]
 80177fa:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 80177fc:	683b      	ldr	r3, [r7, #0]
 80177fe:	2b00      	cmp	r3, #0
 8017800:	d10d      	bne.n	801781e <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 8017802:	693b      	ldr	r3, [r7, #16]
 8017804:	68db      	ldr	r3, [r3, #12]
 8017806:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 8017808:	69bb      	ldr	r3, [r7, #24]
 801780a:	2b00      	cmp	r3, #0
 801780c:	d004      	beq.n	8017818 <create_chain+0x2c>
 801780e:	693b      	ldr	r3, [r7, #16]
 8017810:	695b      	ldr	r3, [r3, #20]
 8017812:	69ba      	ldr	r2, [r7, #24]
 8017814:	429a      	cmp	r2, r3
 8017816:	d31b      	bcc.n	8017850 <create_chain+0x64>
 8017818:	2301      	movs	r3, #1
 801781a:	61bb      	str	r3, [r7, #24]
 801781c:	e018      	b.n	8017850 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 801781e:	6839      	ldr	r1, [r7, #0]
 8017820:	6878      	ldr	r0, [r7, #4]
 8017822:	f7ff fdf2 	bl	801740a <get_fat>
 8017826:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 8017828:	68fb      	ldr	r3, [r7, #12]
 801782a:	2b01      	cmp	r3, #1
 801782c:	d801      	bhi.n	8017832 <create_chain+0x46>
 801782e:	2301      	movs	r3, #1
 8017830:	e070      	b.n	8017914 <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 8017832:	68fb      	ldr	r3, [r7, #12]
 8017834:	f1b3 3fff 	cmp.w	r3, #4294967295
 8017838:	d101      	bne.n	801783e <create_chain+0x52>
 801783a:	68fb      	ldr	r3, [r7, #12]
 801783c:	e06a      	b.n	8017914 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 801783e:	693b      	ldr	r3, [r7, #16]
 8017840:	695b      	ldr	r3, [r3, #20]
 8017842:	68fa      	ldr	r2, [r7, #12]
 8017844:	429a      	cmp	r2, r3
 8017846:	d201      	bcs.n	801784c <create_chain+0x60>
 8017848:	68fb      	ldr	r3, [r7, #12]
 801784a:	e063      	b.n	8017914 <create_chain+0x128>
		scl = clst;
 801784c:	683b      	ldr	r3, [r7, #0]
 801784e:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 8017850:	69bb      	ldr	r3, [r7, #24]
 8017852:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 8017854:	69fb      	ldr	r3, [r7, #28]
 8017856:	3301      	adds	r3, #1
 8017858:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 801785a:	693b      	ldr	r3, [r7, #16]
 801785c:	695b      	ldr	r3, [r3, #20]
 801785e:	69fa      	ldr	r2, [r7, #28]
 8017860:	429a      	cmp	r2, r3
 8017862:	d307      	bcc.n	8017874 <create_chain+0x88>
				ncl = 2;
 8017864:	2302      	movs	r3, #2
 8017866:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 8017868:	69fa      	ldr	r2, [r7, #28]
 801786a:	69bb      	ldr	r3, [r7, #24]
 801786c:	429a      	cmp	r2, r3
 801786e:	d901      	bls.n	8017874 <create_chain+0x88>
 8017870:	2300      	movs	r3, #0
 8017872:	e04f      	b.n	8017914 <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 8017874:	69f9      	ldr	r1, [r7, #28]
 8017876:	6878      	ldr	r0, [r7, #4]
 8017878:	f7ff fdc7 	bl	801740a <get_fat>
 801787c:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 801787e:	68fb      	ldr	r3, [r7, #12]
 8017880:	2b00      	cmp	r3, #0
 8017882:	d00e      	beq.n	80178a2 <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 8017884:	68fb      	ldr	r3, [r7, #12]
 8017886:	2b01      	cmp	r3, #1
 8017888:	d003      	beq.n	8017892 <create_chain+0xa6>
 801788a:	68fb      	ldr	r3, [r7, #12]
 801788c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8017890:	d101      	bne.n	8017896 <create_chain+0xaa>
 8017892:	68fb      	ldr	r3, [r7, #12]
 8017894:	e03e      	b.n	8017914 <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 8017896:	69fa      	ldr	r2, [r7, #28]
 8017898:	69bb      	ldr	r3, [r7, #24]
 801789a:	429a      	cmp	r2, r3
 801789c:	d1da      	bne.n	8017854 <create_chain+0x68>
 801789e:	2300      	movs	r3, #0
 80178a0:	e038      	b.n	8017914 <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 80178a2:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 80178a4:	f04f 32ff 	mov.w	r2, #4294967295
 80178a8:	69f9      	ldr	r1, [r7, #28]
 80178aa:	6938      	ldr	r0, [r7, #16]
 80178ac:	f7ff fe52 	bl	8017554 <put_fat>
 80178b0:	4603      	mov	r3, r0
 80178b2:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 80178b4:	7dfb      	ldrb	r3, [r7, #23]
 80178b6:	2b00      	cmp	r3, #0
 80178b8:	d109      	bne.n	80178ce <create_chain+0xe2>
 80178ba:	683b      	ldr	r3, [r7, #0]
 80178bc:	2b00      	cmp	r3, #0
 80178be:	d006      	beq.n	80178ce <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 80178c0:	69fa      	ldr	r2, [r7, #28]
 80178c2:	6839      	ldr	r1, [r7, #0]
 80178c4:	6938      	ldr	r0, [r7, #16]
 80178c6:	f7ff fe45 	bl	8017554 <put_fat>
 80178ca:	4603      	mov	r3, r0
 80178cc:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 80178ce:	7dfb      	ldrb	r3, [r7, #23]
 80178d0:	2b00      	cmp	r3, #0
 80178d2:	d116      	bne.n	8017902 <create_chain+0x116>
		fs->last_clst = ncl;
 80178d4:	693b      	ldr	r3, [r7, #16]
 80178d6:	69fa      	ldr	r2, [r7, #28]
 80178d8:	60da      	str	r2, [r3, #12]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 80178da:	693b      	ldr	r3, [r7, #16]
 80178dc:	691a      	ldr	r2, [r3, #16]
 80178de:	693b      	ldr	r3, [r7, #16]
 80178e0:	695b      	ldr	r3, [r3, #20]
 80178e2:	3b02      	subs	r3, #2
 80178e4:	429a      	cmp	r2, r3
 80178e6:	d804      	bhi.n	80178f2 <create_chain+0x106>
 80178e8:	693b      	ldr	r3, [r7, #16]
 80178ea:	691b      	ldr	r3, [r3, #16]
 80178ec:	1e5a      	subs	r2, r3, #1
 80178ee:	693b      	ldr	r3, [r7, #16]
 80178f0:	611a      	str	r2, [r3, #16]
		fs->fsi_flag |= 1;
 80178f2:	693b      	ldr	r3, [r7, #16]
 80178f4:	791b      	ldrb	r3, [r3, #4]
 80178f6:	f043 0301 	orr.w	r3, r3, #1
 80178fa:	b2da      	uxtb	r2, r3
 80178fc:	693b      	ldr	r3, [r7, #16]
 80178fe:	711a      	strb	r2, [r3, #4]
 8017900:	e007      	b.n	8017912 <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 8017902:	7dfb      	ldrb	r3, [r7, #23]
 8017904:	2b01      	cmp	r3, #1
 8017906:	d102      	bne.n	801790e <create_chain+0x122>
 8017908:	f04f 33ff 	mov.w	r3, #4294967295
 801790c:	e000      	b.n	8017910 <create_chain+0x124>
 801790e:	2301      	movs	r3, #1
 8017910:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 8017912:	69fb      	ldr	r3, [r7, #28]
}
 8017914:	4618      	mov	r0, r3
 8017916:	3720      	adds	r7, #32
 8017918:	46bd      	mov	sp, r7
 801791a:	bd80      	pop	{r7, pc}

0801791c <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 801791c:	b480      	push	{r7}
 801791e:	b087      	sub	sp, #28
 8017920:	af00      	add	r7, sp, #0
 8017922:	6078      	str	r0, [r7, #4]
 8017924:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 8017926:	687b      	ldr	r3, [r7, #4]
 8017928:	681b      	ldr	r3, [r3, #0]
 801792a:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 801792c:	687b      	ldr	r3, [r7, #4]
 801792e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8017930:	3304      	adds	r3, #4
 8017932:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 8017934:	683b      	ldr	r3, [r7, #0]
 8017936:	0a5b      	lsrs	r3, r3, #9
 8017938:	68fa      	ldr	r2, [r7, #12]
 801793a:	8952      	ldrh	r2, [r2, #10]
 801793c:	fbb3 f3f2 	udiv	r3, r3, r2
 8017940:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8017942:	693b      	ldr	r3, [r7, #16]
 8017944:	1d1a      	adds	r2, r3, #4
 8017946:	613a      	str	r2, [r7, #16]
 8017948:	681b      	ldr	r3, [r3, #0]
 801794a:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 801794c:	68bb      	ldr	r3, [r7, #8]
 801794e:	2b00      	cmp	r3, #0
 8017950:	d101      	bne.n	8017956 <clmt_clust+0x3a>
 8017952:	2300      	movs	r3, #0
 8017954:	e010      	b.n	8017978 <clmt_clust+0x5c>
		if (cl < ncl) break;	/* In this fragment? */
 8017956:	697a      	ldr	r2, [r7, #20]
 8017958:	68bb      	ldr	r3, [r7, #8]
 801795a:	429a      	cmp	r2, r3
 801795c:	d307      	bcc.n	801796e <clmt_clust+0x52>
		cl -= ncl; tbl++;		/* Next fragment */
 801795e:	697a      	ldr	r2, [r7, #20]
 8017960:	68bb      	ldr	r3, [r7, #8]
 8017962:	1ad3      	subs	r3, r2, r3
 8017964:	617b      	str	r3, [r7, #20]
 8017966:	693b      	ldr	r3, [r7, #16]
 8017968:	3304      	adds	r3, #4
 801796a:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 801796c:	e7e9      	b.n	8017942 <clmt_clust+0x26>
		if (cl < ncl) break;	/* In this fragment? */
 801796e:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 8017970:	693b      	ldr	r3, [r7, #16]
 8017972:	681a      	ldr	r2, [r3, #0]
 8017974:	697b      	ldr	r3, [r7, #20]
 8017976:	4413      	add	r3, r2
}
 8017978:	4618      	mov	r0, r3
 801797a:	371c      	adds	r7, #28
 801797c:	46bd      	mov	sp, r7
 801797e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017982:	4770      	bx	lr

08017984 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 8017984:	b580      	push	{r7, lr}
 8017986:	b086      	sub	sp, #24
 8017988:	af00      	add	r7, sp, #0
 801798a:	6078      	str	r0, [r7, #4]
 801798c:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 801798e:	687b      	ldr	r3, [r7, #4]
 8017990:	681b      	ldr	r3, [r3, #0]
 8017992:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 8017994:	683b      	ldr	r3, [r7, #0]
 8017996:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 801799a:	d204      	bcs.n	80179a6 <dir_sdi+0x22>
 801799c:	683b      	ldr	r3, [r7, #0]
 801799e:	f003 031f 	and.w	r3, r3, #31
 80179a2:	2b00      	cmp	r3, #0
 80179a4:	d001      	beq.n	80179aa <dir_sdi+0x26>
		return FR_INT_ERR;
 80179a6:	2302      	movs	r3, #2
 80179a8:	e063      	b.n	8017a72 <dir_sdi+0xee>
	}
	dp->dptr = ofs;				/* Set current offset */
 80179aa:	687b      	ldr	r3, [r7, #4]
 80179ac:	683a      	ldr	r2, [r7, #0]
 80179ae:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 80179b0:	687b      	ldr	r3, [r7, #4]
 80179b2:	689b      	ldr	r3, [r3, #8]
 80179b4:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 80179b6:	697b      	ldr	r3, [r7, #20]
 80179b8:	2b00      	cmp	r3, #0
 80179ba:	d106      	bne.n	80179ca <dir_sdi+0x46>
 80179bc:	693b      	ldr	r3, [r7, #16]
 80179be:	781b      	ldrb	r3, [r3, #0]
 80179c0:	2b02      	cmp	r3, #2
 80179c2:	d902      	bls.n	80179ca <dir_sdi+0x46>
		clst = fs->dirbase;
 80179c4:	693b      	ldr	r3, [r7, #16]
 80179c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80179c8:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 80179ca:	697b      	ldr	r3, [r7, #20]
 80179cc:	2b00      	cmp	r3, #0
 80179ce:	d10c      	bne.n	80179ea <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 80179d0:	683b      	ldr	r3, [r7, #0]
 80179d2:	095b      	lsrs	r3, r3, #5
 80179d4:	693a      	ldr	r2, [r7, #16]
 80179d6:	8912      	ldrh	r2, [r2, #8]
 80179d8:	4293      	cmp	r3, r2
 80179da:	d301      	bcc.n	80179e0 <dir_sdi+0x5c>
 80179dc:	2302      	movs	r3, #2
 80179de:	e048      	b.n	8017a72 <dir_sdi+0xee>
		dp->sect = fs->dirbase;
 80179e0:	693b      	ldr	r3, [r7, #16]
 80179e2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80179e4:	687b      	ldr	r3, [r7, #4]
 80179e6:	61da      	str	r2, [r3, #28]
 80179e8:	e029      	b.n	8017a3e <dir_sdi+0xba>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 80179ea:	693b      	ldr	r3, [r7, #16]
 80179ec:	895b      	ldrh	r3, [r3, #10]
 80179ee:	025b      	lsls	r3, r3, #9
 80179f0:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 80179f2:	e019      	b.n	8017a28 <dir_sdi+0xa4>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 80179f4:	687b      	ldr	r3, [r7, #4]
 80179f6:	6979      	ldr	r1, [r7, #20]
 80179f8:	4618      	mov	r0, r3
 80179fa:	f7ff fd06 	bl	801740a <get_fat>
 80179fe:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8017a00:	697b      	ldr	r3, [r7, #20]
 8017a02:	f1b3 3fff 	cmp.w	r3, #4294967295
 8017a06:	d101      	bne.n	8017a0c <dir_sdi+0x88>
 8017a08:	2301      	movs	r3, #1
 8017a0a:	e032      	b.n	8017a72 <dir_sdi+0xee>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 8017a0c:	697b      	ldr	r3, [r7, #20]
 8017a0e:	2b01      	cmp	r3, #1
 8017a10:	d904      	bls.n	8017a1c <dir_sdi+0x98>
 8017a12:	693b      	ldr	r3, [r7, #16]
 8017a14:	695b      	ldr	r3, [r3, #20]
 8017a16:	697a      	ldr	r2, [r7, #20]
 8017a18:	429a      	cmp	r2, r3
 8017a1a:	d301      	bcc.n	8017a20 <dir_sdi+0x9c>
 8017a1c:	2302      	movs	r3, #2
 8017a1e:	e028      	b.n	8017a72 <dir_sdi+0xee>
			ofs -= csz;
 8017a20:	683a      	ldr	r2, [r7, #0]
 8017a22:	68fb      	ldr	r3, [r7, #12]
 8017a24:	1ad3      	subs	r3, r2, r3
 8017a26:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 8017a28:	683a      	ldr	r2, [r7, #0]
 8017a2a:	68fb      	ldr	r3, [r7, #12]
 8017a2c:	429a      	cmp	r2, r3
 8017a2e:	d2e1      	bcs.n	80179f4 <dir_sdi+0x70>
		}
		dp->sect = clust2sect(fs, clst);
 8017a30:	6979      	ldr	r1, [r7, #20]
 8017a32:	6938      	ldr	r0, [r7, #16]
 8017a34:	f7ff fcca 	bl	80173cc <clust2sect>
 8017a38:	4602      	mov	r2, r0
 8017a3a:	687b      	ldr	r3, [r7, #4]
 8017a3c:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 8017a3e:	687b      	ldr	r3, [r7, #4]
 8017a40:	697a      	ldr	r2, [r7, #20]
 8017a42:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 8017a44:	687b      	ldr	r3, [r7, #4]
 8017a46:	69db      	ldr	r3, [r3, #28]
 8017a48:	2b00      	cmp	r3, #0
 8017a4a:	d101      	bne.n	8017a50 <dir_sdi+0xcc>
 8017a4c:	2302      	movs	r3, #2
 8017a4e:	e010      	b.n	8017a72 <dir_sdi+0xee>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 8017a50:	687b      	ldr	r3, [r7, #4]
 8017a52:	69da      	ldr	r2, [r3, #28]
 8017a54:	683b      	ldr	r3, [r7, #0]
 8017a56:	0a5b      	lsrs	r3, r3, #9
 8017a58:	441a      	add	r2, r3
 8017a5a:	687b      	ldr	r3, [r7, #4]
 8017a5c:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 8017a5e:	693b      	ldr	r3, [r7, #16]
 8017a60:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8017a64:	683b      	ldr	r3, [r7, #0]
 8017a66:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8017a6a:	441a      	add	r2, r3
 8017a6c:	687b      	ldr	r3, [r7, #4]
 8017a6e:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8017a70:	2300      	movs	r3, #0
}
 8017a72:	4618      	mov	r0, r3
 8017a74:	3718      	adds	r7, #24
 8017a76:	46bd      	mov	sp, r7
 8017a78:	bd80      	pop	{r7, pc}

08017a7a <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 8017a7a:	b580      	push	{r7, lr}
 8017a7c:	b086      	sub	sp, #24
 8017a7e:	af00      	add	r7, sp, #0
 8017a80:	6078      	str	r0, [r7, #4]
 8017a82:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 8017a84:	687b      	ldr	r3, [r7, #4]
 8017a86:	681b      	ldr	r3, [r3, #0]
 8017a88:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 8017a8a:	687b      	ldr	r3, [r7, #4]
 8017a8c:	695b      	ldr	r3, [r3, #20]
 8017a8e:	3320      	adds	r3, #32
 8017a90:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 8017a92:	687b      	ldr	r3, [r7, #4]
 8017a94:	69db      	ldr	r3, [r3, #28]
 8017a96:	2b00      	cmp	r3, #0
 8017a98:	d003      	beq.n	8017aa2 <dir_next+0x28>
 8017a9a:	68bb      	ldr	r3, [r7, #8]
 8017a9c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8017aa0:	d301      	bcc.n	8017aa6 <dir_next+0x2c>
 8017aa2:	2304      	movs	r3, #4
 8017aa4:	e0aa      	b.n	8017bfc <dir_next+0x182>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 8017aa6:	68bb      	ldr	r3, [r7, #8]
 8017aa8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8017aac:	2b00      	cmp	r3, #0
 8017aae:	f040 8098 	bne.w	8017be2 <dir_next+0x168>
		dp->sect++;				/* Next sector */
 8017ab2:	687b      	ldr	r3, [r7, #4]
 8017ab4:	69db      	ldr	r3, [r3, #28]
 8017ab6:	1c5a      	adds	r2, r3, #1
 8017ab8:	687b      	ldr	r3, [r7, #4]
 8017aba:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 8017abc:	687b      	ldr	r3, [r7, #4]
 8017abe:	699b      	ldr	r3, [r3, #24]
 8017ac0:	2b00      	cmp	r3, #0
 8017ac2:	d10b      	bne.n	8017adc <dir_next+0x62>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 8017ac4:	68bb      	ldr	r3, [r7, #8]
 8017ac6:	095b      	lsrs	r3, r3, #5
 8017ac8:	68fa      	ldr	r2, [r7, #12]
 8017aca:	8912      	ldrh	r2, [r2, #8]
 8017acc:	4293      	cmp	r3, r2
 8017ace:	f0c0 8088 	bcc.w	8017be2 <dir_next+0x168>
				dp->sect = 0; return FR_NO_FILE;
 8017ad2:	687b      	ldr	r3, [r7, #4]
 8017ad4:	2200      	movs	r2, #0
 8017ad6:	61da      	str	r2, [r3, #28]
 8017ad8:	2304      	movs	r3, #4
 8017ada:	e08f      	b.n	8017bfc <dir_next+0x182>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 8017adc:	68bb      	ldr	r3, [r7, #8]
 8017ade:	0a5b      	lsrs	r3, r3, #9
 8017ae0:	68fa      	ldr	r2, [r7, #12]
 8017ae2:	8952      	ldrh	r2, [r2, #10]
 8017ae4:	3a01      	subs	r2, #1
 8017ae6:	4013      	ands	r3, r2
 8017ae8:	2b00      	cmp	r3, #0
 8017aea:	d17a      	bne.n	8017be2 <dir_next+0x168>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 8017aec:	687a      	ldr	r2, [r7, #4]
 8017aee:	687b      	ldr	r3, [r7, #4]
 8017af0:	699b      	ldr	r3, [r3, #24]
 8017af2:	4619      	mov	r1, r3
 8017af4:	4610      	mov	r0, r2
 8017af6:	f7ff fc88 	bl	801740a <get_fat>
 8017afa:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 8017afc:	697b      	ldr	r3, [r7, #20]
 8017afe:	2b01      	cmp	r3, #1
 8017b00:	d801      	bhi.n	8017b06 <dir_next+0x8c>
 8017b02:	2302      	movs	r3, #2
 8017b04:	e07a      	b.n	8017bfc <dir_next+0x182>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 8017b06:	697b      	ldr	r3, [r7, #20]
 8017b08:	f1b3 3fff 	cmp.w	r3, #4294967295
 8017b0c:	d101      	bne.n	8017b12 <dir_next+0x98>
 8017b0e:	2301      	movs	r3, #1
 8017b10:	e074      	b.n	8017bfc <dir_next+0x182>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 8017b12:	68fb      	ldr	r3, [r7, #12]
 8017b14:	695b      	ldr	r3, [r3, #20]
 8017b16:	697a      	ldr	r2, [r7, #20]
 8017b18:	429a      	cmp	r2, r3
 8017b1a:	d358      	bcc.n	8017bce <dir_next+0x154>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 8017b1c:	683b      	ldr	r3, [r7, #0]
 8017b1e:	2b00      	cmp	r3, #0
 8017b20:	d104      	bne.n	8017b2c <dir_next+0xb2>
						dp->sect = 0; return FR_NO_FILE;
 8017b22:	687b      	ldr	r3, [r7, #4]
 8017b24:	2200      	movs	r2, #0
 8017b26:	61da      	str	r2, [r3, #28]
 8017b28:	2304      	movs	r3, #4
 8017b2a:	e067      	b.n	8017bfc <dir_next+0x182>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 8017b2c:	687a      	ldr	r2, [r7, #4]
 8017b2e:	687b      	ldr	r3, [r7, #4]
 8017b30:	699b      	ldr	r3, [r3, #24]
 8017b32:	4619      	mov	r1, r3
 8017b34:	4610      	mov	r0, r2
 8017b36:	f7ff fe59 	bl	80177ec <create_chain>
 8017b3a:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 8017b3c:	697b      	ldr	r3, [r7, #20]
 8017b3e:	2b00      	cmp	r3, #0
 8017b40:	d101      	bne.n	8017b46 <dir_next+0xcc>
 8017b42:	2307      	movs	r3, #7
 8017b44:	e05a      	b.n	8017bfc <dir_next+0x182>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 8017b46:	697b      	ldr	r3, [r7, #20]
 8017b48:	2b01      	cmp	r3, #1
 8017b4a:	d101      	bne.n	8017b50 <dir_next+0xd6>
 8017b4c:	2302      	movs	r3, #2
 8017b4e:	e055      	b.n	8017bfc <dir_next+0x182>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8017b50:	697b      	ldr	r3, [r7, #20]
 8017b52:	f1b3 3fff 	cmp.w	r3, #4294967295
 8017b56:	d101      	bne.n	8017b5c <dir_next+0xe2>
 8017b58:	2301      	movs	r3, #1
 8017b5a:	e04f      	b.n	8017bfc <dir_next+0x182>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 8017b5c:	68f8      	ldr	r0, [r7, #12]
 8017b5e:	f7ff fb55 	bl	801720c <sync_window>
 8017b62:	4603      	mov	r3, r0
 8017b64:	2b00      	cmp	r3, #0
 8017b66:	d001      	beq.n	8017b6c <dir_next+0xf2>
 8017b68:	2301      	movs	r3, #1
 8017b6a:	e047      	b.n	8017bfc <dir_next+0x182>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 8017b6c:	68fb      	ldr	r3, [r7, #12]
 8017b6e:	3330      	adds	r3, #48	; 0x30
 8017b70:	f44f 7200 	mov.w	r2, #512	; 0x200
 8017b74:	2100      	movs	r1, #0
 8017b76:	4618      	mov	r0, r3
 8017b78:	f7ff f97f 	bl	8016e7a <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8017b7c:	2300      	movs	r3, #0
 8017b7e:	613b      	str	r3, [r7, #16]
 8017b80:	6979      	ldr	r1, [r7, #20]
 8017b82:	68f8      	ldr	r0, [r7, #12]
 8017b84:	f7ff fc22 	bl	80173cc <clust2sect>
 8017b88:	4602      	mov	r2, r0
 8017b8a:	68fb      	ldr	r3, [r7, #12]
 8017b8c:	62da      	str	r2, [r3, #44]	; 0x2c
 8017b8e:	e012      	b.n	8017bb6 <dir_next+0x13c>
						fs->wflag = 1;
 8017b90:	68fb      	ldr	r3, [r7, #12]
 8017b92:	2201      	movs	r2, #1
 8017b94:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 8017b96:	68f8      	ldr	r0, [r7, #12]
 8017b98:	f7ff fb38 	bl	801720c <sync_window>
 8017b9c:	4603      	mov	r3, r0
 8017b9e:	2b00      	cmp	r3, #0
 8017ba0:	d001      	beq.n	8017ba6 <dir_next+0x12c>
 8017ba2:	2301      	movs	r3, #1
 8017ba4:	e02a      	b.n	8017bfc <dir_next+0x182>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8017ba6:	693b      	ldr	r3, [r7, #16]
 8017ba8:	3301      	adds	r3, #1
 8017baa:	613b      	str	r3, [r7, #16]
 8017bac:	68fb      	ldr	r3, [r7, #12]
 8017bae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8017bb0:	1c5a      	adds	r2, r3, #1
 8017bb2:	68fb      	ldr	r3, [r7, #12]
 8017bb4:	62da      	str	r2, [r3, #44]	; 0x2c
 8017bb6:	68fb      	ldr	r3, [r7, #12]
 8017bb8:	895b      	ldrh	r3, [r3, #10]
 8017bba:	461a      	mov	r2, r3
 8017bbc:	693b      	ldr	r3, [r7, #16]
 8017bbe:	4293      	cmp	r3, r2
 8017bc0:	d3e6      	bcc.n	8017b90 <dir_next+0x116>
					}
					fs->winsect -= n;							/* Restore window offset */
 8017bc2:	68fb      	ldr	r3, [r7, #12]
 8017bc4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8017bc6:	693b      	ldr	r3, [r7, #16]
 8017bc8:	1ad2      	subs	r2, r2, r3
 8017bca:	68fb      	ldr	r3, [r7, #12]
 8017bcc:	62da      	str	r2, [r3, #44]	; 0x2c
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 8017bce:	687b      	ldr	r3, [r7, #4]
 8017bd0:	697a      	ldr	r2, [r7, #20]
 8017bd2:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 8017bd4:	6979      	ldr	r1, [r7, #20]
 8017bd6:	68f8      	ldr	r0, [r7, #12]
 8017bd8:	f7ff fbf8 	bl	80173cc <clust2sect>
 8017bdc:	4602      	mov	r2, r0
 8017bde:	687b      	ldr	r3, [r7, #4]
 8017be0:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 8017be2:	687b      	ldr	r3, [r7, #4]
 8017be4:	68ba      	ldr	r2, [r7, #8]
 8017be6:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 8017be8:	68fb      	ldr	r3, [r7, #12]
 8017bea:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8017bee:	68bb      	ldr	r3, [r7, #8]
 8017bf0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8017bf4:	441a      	add	r2, r3
 8017bf6:	687b      	ldr	r3, [r7, #4]
 8017bf8:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8017bfa:	2300      	movs	r3, #0
}
 8017bfc:	4618      	mov	r0, r3
 8017bfe:	3718      	adds	r7, #24
 8017c00:	46bd      	mov	sp, r7
 8017c02:	bd80      	pop	{r7, pc}

08017c04 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 8017c04:	b580      	push	{r7, lr}
 8017c06:	b086      	sub	sp, #24
 8017c08:	af00      	add	r7, sp, #0
 8017c0a:	6078      	str	r0, [r7, #4]
 8017c0c:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 8017c0e:	687b      	ldr	r3, [r7, #4]
 8017c10:	681b      	ldr	r3, [r3, #0]
 8017c12:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 8017c14:	2100      	movs	r1, #0
 8017c16:	6878      	ldr	r0, [r7, #4]
 8017c18:	f7ff feb4 	bl	8017984 <dir_sdi>
 8017c1c:	4603      	mov	r3, r0
 8017c1e:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8017c20:	7dfb      	ldrb	r3, [r7, #23]
 8017c22:	2b00      	cmp	r3, #0
 8017c24:	d12b      	bne.n	8017c7e <dir_alloc+0x7a>
		n = 0;
 8017c26:	2300      	movs	r3, #0
 8017c28:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 8017c2a:	687b      	ldr	r3, [r7, #4]
 8017c2c:	69db      	ldr	r3, [r3, #28]
 8017c2e:	4619      	mov	r1, r3
 8017c30:	68f8      	ldr	r0, [r7, #12]
 8017c32:	f7ff fb2f 	bl	8017294 <move_window>
 8017c36:	4603      	mov	r3, r0
 8017c38:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8017c3a:	7dfb      	ldrb	r3, [r7, #23]
 8017c3c:	2b00      	cmp	r3, #0
 8017c3e:	d11d      	bne.n	8017c7c <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 8017c40:	687b      	ldr	r3, [r7, #4]
 8017c42:	6a1b      	ldr	r3, [r3, #32]
 8017c44:	781b      	ldrb	r3, [r3, #0]
 8017c46:	2be5      	cmp	r3, #229	; 0xe5
 8017c48:	d004      	beq.n	8017c54 <dir_alloc+0x50>
 8017c4a:	687b      	ldr	r3, [r7, #4]
 8017c4c:	6a1b      	ldr	r3, [r3, #32]
 8017c4e:	781b      	ldrb	r3, [r3, #0]
 8017c50:	2b00      	cmp	r3, #0
 8017c52:	d107      	bne.n	8017c64 <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 8017c54:	693b      	ldr	r3, [r7, #16]
 8017c56:	3301      	adds	r3, #1
 8017c58:	613b      	str	r3, [r7, #16]
 8017c5a:	693a      	ldr	r2, [r7, #16]
 8017c5c:	683b      	ldr	r3, [r7, #0]
 8017c5e:	429a      	cmp	r2, r3
 8017c60:	d102      	bne.n	8017c68 <dir_alloc+0x64>
 8017c62:	e00c      	b.n	8017c7e <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 8017c64:	2300      	movs	r3, #0
 8017c66:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 8017c68:	2101      	movs	r1, #1
 8017c6a:	6878      	ldr	r0, [r7, #4]
 8017c6c:	f7ff ff05 	bl	8017a7a <dir_next>
 8017c70:	4603      	mov	r3, r0
 8017c72:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 8017c74:	7dfb      	ldrb	r3, [r7, #23]
 8017c76:	2b00      	cmp	r3, #0
 8017c78:	d0d7      	beq.n	8017c2a <dir_alloc+0x26>
 8017c7a:	e000      	b.n	8017c7e <dir_alloc+0x7a>
			if (res != FR_OK) break;
 8017c7c:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 8017c7e:	7dfb      	ldrb	r3, [r7, #23]
 8017c80:	2b04      	cmp	r3, #4
 8017c82:	d101      	bne.n	8017c88 <dir_alloc+0x84>
 8017c84:	2307      	movs	r3, #7
 8017c86:	75fb      	strb	r3, [r7, #23]
	return res;
 8017c88:	7dfb      	ldrb	r3, [r7, #23]
}
 8017c8a:	4618      	mov	r0, r3
 8017c8c:	3718      	adds	r7, #24
 8017c8e:	46bd      	mov	sp, r7
 8017c90:	bd80      	pop	{r7, pc}

08017c92 <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 8017c92:	b580      	push	{r7, lr}
 8017c94:	b084      	sub	sp, #16
 8017c96:	af00      	add	r7, sp, #0
 8017c98:	6078      	str	r0, [r7, #4]
 8017c9a:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 8017c9c:	683b      	ldr	r3, [r7, #0]
 8017c9e:	331a      	adds	r3, #26
 8017ca0:	4618      	mov	r0, r3
 8017ca2:	f7ff f847 	bl	8016d34 <ld_word>
 8017ca6:	4603      	mov	r3, r0
 8017ca8:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 8017caa:	687b      	ldr	r3, [r7, #4]
 8017cac:	781b      	ldrb	r3, [r3, #0]
 8017cae:	2b03      	cmp	r3, #3
 8017cb0:	d109      	bne.n	8017cc6 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 8017cb2:	683b      	ldr	r3, [r7, #0]
 8017cb4:	3314      	adds	r3, #20
 8017cb6:	4618      	mov	r0, r3
 8017cb8:	f7ff f83c 	bl	8016d34 <ld_word>
 8017cbc:	4603      	mov	r3, r0
 8017cbe:	041b      	lsls	r3, r3, #16
 8017cc0:	68fa      	ldr	r2, [r7, #12]
 8017cc2:	4313      	orrs	r3, r2
 8017cc4:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 8017cc6:	68fb      	ldr	r3, [r7, #12]
}
 8017cc8:	4618      	mov	r0, r3
 8017cca:	3710      	adds	r7, #16
 8017ccc:	46bd      	mov	sp, r7
 8017cce:	bd80      	pop	{r7, pc}

08017cd0 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 8017cd0:	b580      	push	{r7, lr}
 8017cd2:	b084      	sub	sp, #16
 8017cd4:	af00      	add	r7, sp, #0
 8017cd6:	60f8      	str	r0, [r7, #12]
 8017cd8:	60b9      	str	r1, [r7, #8]
 8017cda:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 8017cdc:	68bb      	ldr	r3, [r7, #8]
 8017cde:	331a      	adds	r3, #26
 8017ce0:	687a      	ldr	r2, [r7, #4]
 8017ce2:	b292      	uxth	r2, r2
 8017ce4:	4611      	mov	r1, r2
 8017ce6:	4618      	mov	r0, r3
 8017ce8:	f7ff f85f 	bl	8016daa <st_word>
	if (fs->fs_type == FS_FAT32) {
 8017cec:	68fb      	ldr	r3, [r7, #12]
 8017cee:	781b      	ldrb	r3, [r3, #0]
 8017cf0:	2b03      	cmp	r3, #3
 8017cf2:	d109      	bne.n	8017d08 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 8017cf4:	68bb      	ldr	r3, [r7, #8]
 8017cf6:	f103 0214 	add.w	r2, r3, #20
 8017cfa:	687b      	ldr	r3, [r7, #4]
 8017cfc:	0c1b      	lsrs	r3, r3, #16
 8017cfe:	b29b      	uxth	r3, r3
 8017d00:	4619      	mov	r1, r3
 8017d02:	4610      	mov	r0, r2
 8017d04:	f7ff f851 	bl	8016daa <st_word>
	}
}
 8017d08:	bf00      	nop
 8017d0a:	3710      	adds	r7, #16
 8017d0c:	46bd      	mov	sp, r7
 8017d0e:	bd80      	pop	{r7, pc}

08017d10 <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 8017d10:	b580      	push	{r7, lr}
 8017d12:	b086      	sub	sp, #24
 8017d14:	af00      	add	r7, sp, #0
 8017d16:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8017d18:	687b      	ldr	r3, [r7, #4]
 8017d1a:	681b      	ldr	r3, [r3, #0]
 8017d1c:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 8017d1e:	2100      	movs	r1, #0
 8017d20:	6878      	ldr	r0, [r7, #4]
 8017d22:	f7ff fe2f 	bl	8017984 <dir_sdi>
 8017d26:	4603      	mov	r3, r0
 8017d28:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 8017d2a:	7dfb      	ldrb	r3, [r7, #23]
 8017d2c:	2b00      	cmp	r3, #0
 8017d2e:	d001      	beq.n	8017d34 <dir_find+0x24>
 8017d30:	7dfb      	ldrb	r3, [r7, #23]
 8017d32:	e03e      	b.n	8017db2 <dir_find+0xa2>
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(fs, dp->sect);
 8017d34:	687b      	ldr	r3, [r7, #4]
 8017d36:	69db      	ldr	r3, [r3, #28]
 8017d38:	4619      	mov	r1, r3
 8017d3a:	6938      	ldr	r0, [r7, #16]
 8017d3c:	f7ff faaa 	bl	8017294 <move_window>
 8017d40:	4603      	mov	r3, r0
 8017d42:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8017d44:	7dfb      	ldrb	r3, [r7, #23]
 8017d46:	2b00      	cmp	r3, #0
 8017d48:	d12f      	bne.n	8017daa <dir_find+0x9a>
		c = dp->dir[DIR_Name];
 8017d4a:	687b      	ldr	r3, [r7, #4]
 8017d4c:	6a1b      	ldr	r3, [r3, #32]
 8017d4e:	781b      	ldrb	r3, [r3, #0]
 8017d50:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 8017d52:	7bfb      	ldrb	r3, [r7, #15]
 8017d54:	2b00      	cmp	r3, #0
 8017d56:	d102      	bne.n	8017d5e <dir_find+0x4e>
 8017d58:	2304      	movs	r3, #4
 8017d5a:	75fb      	strb	r3, [r7, #23]
 8017d5c:	e028      	b.n	8017db0 <dir_find+0xa0>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 8017d5e:	687b      	ldr	r3, [r7, #4]
 8017d60:	6a1b      	ldr	r3, [r3, #32]
 8017d62:	330b      	adds	r3, #11
 8017d64:	781b      	ldrb	r3, [r3, #0]
 8017d66:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8017d6a:	b2da      	uxtb	r2, r3
 8017d6c:	687b      	ldr	r3, [r7, #4]
 8017d6e:	719a      	strb	r2, [r3, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 8017d70:	687b      	ldr	r3, [r7, #4]
 8017d72:	6a1b      	ldr	r3, [r3, #32]
 8017d74:	330b      	adds	r3, #11
 8017d76:	781b      	ldrb	r3, [r3, #0]
 8017d78:	f003 0308 	and.w	r3, r3, #8
 8017d7c:	2b00      	cmp	r3, #0
 8017d7e:	d10a      	bne.n	8017d96 <dir_find+0x86>
 8017d80:	687b      	ldr	r3, [r7, #4]
 8017d82:	6a18      	ldr	r0, [r3, #32]
 8017d84:	687b      	ldr	r3, [r7, #4]
 8017d86:	3324      	adds	r3, #36	; 0x24
 8017d88:	220b      	movs	r2, #11
 8017d8a:	4619      	mov	r1, r3
 8017d8c:	f7ff f88f 	bl	8016eae <mem_cmp>
 8017d90:	4603      	mov	r3, r0
 8017d92:	2b00      	cmp	r3, #0
 8017d94:	d00b      	beq.n	8017dae <dir_find+0x9e>
#endif
		res = dir_next(dp, 0);	/* Next entry */
 8017d96:	2100      	movs	r1, #0
 8017d98:	6878      	ldr	r0, [r7, #4]
 8017d9a:	f7ff fe6e 	bl	8017a7a <dir_next>
 8017d9e:	4603      	mov	r3, r0
 8017da0:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 8017da2:	7dfb      	ldrb	r3, [r7, #23]
 8017da4:	2b00      	cmp	r3, #0
 8017da6:	d0c5      	beq.n	8017d34 <dir_find+0x24>
 8017da8:	e002      	b.n	8017db0 <dir_find+0xa0>
		if (res != FR_OK) break;
 8017daa:	bf00      	nop
 8017dac:	e000      	b.n	8017db0 <dir_find+0xa0>
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 8017dae:	bf00      	nop

	return res;
 8017db0:	7dfb      	ldrb	r3, [r7, #23]
}
 8017db2:	4618      	mov	r0, r3
 8017db4:	3718      	adds	r7, #24
 8017db6:	46bd      	mov	sp, r7
 8017db8:	bd80      	pop	{r7, pc}

08017dba <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 8017dba:	b580      	push	{r7, lr}
 8017dbc:	b084      	sub	sp, #16
 8017dbe:	af00      	add	r7, sp, #0
 8017dc0:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8017dc2:	687b      	ldr	r3, [r7, #4]
 8017dc4:	681b      	ldr	r3, [r3, #0]
 8017dc6:	60bb      	str	r3, [r7, #8]
			} while (res == FR_OK && --nent);
		}
	}

#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 8017dc8:	2101      	movs	r1, #1
 8017dca:	6878      	ldr	r0, [r7, #4]
 8017dcc:	f7ff ff1a 	bl	8017c04 <dir_alloc>
 8017dd0:	4603      	mov	r3, r0
 8017dd2:	73fb      	strb	r3, [r7, #15]

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 8017dd4:	7bfb      	ldrb	r3, [r7, #15]
 8017dd6:	2b00      	cmp	r3, #0
 8017dd8:	d11c      	bne.n	8017e14 <dir_register+0x5a>
		res = move_window(fs, dp->sect);
 8017dda:	687b      	ldr	r3, [r7, #4]
 8017ddc:	69db      	ldr	r3, [r3, #28]
 8017dde:	4619      	mov	r1, r3
 8017de0:	68b8      	ldr	r0, [r7, #8]
 8017de2:	f7ff fa57 	bl	8017294 <move_window>
 8017de6:	4603      	mov	r3, r0
 8017de8:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8017dea:	7bfb      	ldrb	r3, [r7, #15]
 8017dec:	2b00      	cmp	r3, #0
 8017dee:	d111      	bne.n	8017e14 <dir_register+0x5a>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 8017df0:	687b      	ldr	r3, [r7, #4]
 8017df2:	6a1b      	ldr	r3, [r3, #32]
 8017df4:	2220      	movs	r2, #32
 8017df6:	2100      	movs	r1, #0
 8017df8:	4618      	mov	r0, r3
 8017dfa:	f7ff f83e 	bl	8016e7a <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 8017dfe:	687b      	ldr	r3, [r7, #4]
 8017e00:	6a18      	ldr	r0, [r3, #32]
 8017e02:	687b      	ldr	r3, [r7, #4]
 8017e04:	3324      	adds	r3, #36	; 0x24
 8017e06:	220b      	movs	r2, #11
 8017e08:	4619      	mov	r1, r3
 8017e0a:	f7ff f815 	bl	8016e38 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			fs->wflag = 1;
 8017e0e:	68bb      	ldr	r3, [r7, #8]
 8017e10:	2201      	movs	r2, #1
 8017e12:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 8017e14:	7bfb      	ldrb	r3, [r7, #15]
}
 8017e16:	4618      	mov	r0, r3
 8017e18:	3710      	adds	r7, #16
 8017e1a:	46bd      	mov	sp, r7
 8017e1c:	bd80      	pop	{r7, pc}
	...

08017e20 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 8017e20:	b580      	push	{r7, lr}
 8017e22:	b088      	sub	sp, #32
 8017e24:	af00      	add	r7, sp, #0
 8017e26:	6078      	str	r0, [r7, #4]
 8017e28:	6039      	str	r1, [r7, #0]
	BYTE c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	p = *path; sfn = dp->fn;
 8017e2a:	683b      	ldr	r3, [r7, #0]
 8017e2c:	681b      	ldr	r3, [r3, #0]
 8017e2e:	60fb      	str	r3, [r7, #12]
 8017e30:	687b      	ldr	r3, [r7, #4]
 8017e32:	3324      	adds	r3, #36	; 0x24
 8017e34:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 8017e36:	220b      	movs	r2, #11
 8017e38:	2120      	movs	r1, #32
 8017e3a:	68b8      	ldr	r0, [r7, #8]
 8017e3c:	f7ff f81d 	bl	8016e7a <mem_set>
	si = i = 0; ni = 8;
 8017e40:	2300      	movs	r3, #0
 8017e42:	613b      	str	r3, [r7, #16]
 8017e44:	693b      	ldr	r3, [r7, #16]
 8017e46:	617b      	str	r3, [r7, #20]
 8017e48:	2308      	movs	r3, #8
 8017e4a:	61bb      	str	r3, [r7, #24]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of the path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 8017e4c:	697b      	ldr	r3, [r7, #20]
 8017e4e:	1c5a      	adds	r2, r3, #1
 8017e50:	617a      	str	r2, [r7, #20]
 8017e52:	68fa      	ldr	r2, [r7, #12]
 8017e54:	4413      	add	r3, r2
 8017e56:	781b      	ldrb	r3, [r3, #0]
 8017e58:	77fb      	strb	r3, [r7, #31]
		if (c <= ' ') break; 			/* Break if end of the path name */
 8017e5a:	7ffb      	ldrb	r3, [r7, #31]
 8017e5c:	2b20      	cmp	r3, #32
 8017e5e:	d94e      	bls.n	8017efe <create_name+0xde>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 8017e60:	7ffb      	ldrb	r3, [r7, #31]
 8017e62:	2b2f      	cmp	r3, #47	; 0x2f
 8017e64:	d006      	beq.n	8017e74 <create_name+0x54>
 8017e66:	7ffb      	ldrb	r3, [r7, #31]
 8017e68:	2b5c      	cmp	r3, #92	; 0x5c
 8017e6a:	d110      	bne.n	8017e8e <create_name+0x6e>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 8017e6c:	e002      	b.n	8017e74 <create_name+0x54>
 8017e6e:	697b      	ldr	r3, [r7, #20]
 8017e70:	3301      	adds	r3, #1
 8017e72:	617b      	str	r3, [r7, #20]
 8017e74:	68fa      	ldr	r2, [r7, #12]
 8017e76:	697b      	ldr	r3, [r7, #20]
 8017e78:	4413      	add	r3, r2
 8017e7a:	781b      	ldrb	r3, [r3, #0]
 8017e7c:	2b2f      	cmp	r3, #47	; 0x2f
 8017e7e:	d0f6      	beq.n	8017e6e <create_name+0x4e>
 8017e80:	68fa      	ldr	r2, [r7, #12]
 8017e82:	697b      	ldr	r3, [r7, #20]
 8017e84:	4413      	add	r3, r2
 8017e86:	781b      	ldrb	r3, [r3, #0]
 8017e88:	2b5c      	cmp	r3, #92	; 0x5c
 8017e8a:	d0f0      	beq.n	8017e6e <create_name+0x4e>
			break;
 8017e8c:	e038      	b.n	8017f00 <create_name+0xe0>
		}
		if (c == '.' || i >= ni) {		/* End of body or over size? */
 8017e8e:	7ffb      	ldrb	r3, [r7, #31]
 8017e90:	2b2e      	cmp	r3, #46	; 0x2e
 8017e92:	d003      	beq.n	8017e9c <create_name+0x7c>
 8017e94:	693a      	ldr	r2, [r7, #16]
 8017e96:	69bb      	ldr	r3, [r7, #24]
 8017e98:	429a      	cmp	r2, r3
 8017e9a:	d30c      	bcc.n	8017eb6 <create_name+0x96>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 8017e9c:	69bb      	ldr	r3, [r7, #24]
 8017e9e:	2b0b      	cmp	r3, #11
 8017ea0:	d002      	beq.n	8017ea8 <create_name+0x88>
 8017ea2:	7ffb      	ldrb	r3, [r7, #31]
 8017ea4:	2b2e      	cmp	r3, #46	; 0x2e
 8017ea6:	d001      	beq.n	8017eac <create_name+0x8c>
 8017ea8:	2306      	movs	r3, #6
 8017eaa:	e044      	b.n	8017f36 <create_name+0x116>
			i = 8; ni = 11;				/* Goto extension */
 8017eac:	2308      	movs	r3, #8
 8017eae:	613b      	str	r3, [r7, #16]
 8017eb0:	230b      	movs	r3, #11
 8017eb2:	61bb      	str	r3, [r7, #24]
			continue;
 8017eb4:	e022      	b.n	8017efc <create_name+0xdc>
		}
		if (c >= 0x80) {				/* Extended character? */
 8017eb6:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8017eba:	2b00      	cmp	r3, #0
 8017ebc:	da04      	bge.n	8017ec8 <create_name+0xa8>
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 8017ebe:	7ffb      	ldrb	r3, [r7, #31]
 8017ec0:	3b80      	subs	r3, #128	; 0x80
 8017ec2:	4a1f      	ldr	r2, [pc, #124]	; (8017f40 <create_name+0x120>)
 8017ec4:	5cd3      	ldrb	r3, [r2, r3]
 8017ec6:	77fb      	strb	r3, [r7, #31]
			d = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 8017ec8:	7ffb      	ldrb	r3, [r7, #31]
 8017eca:	4619      	mov	r1, r3
 8017ecc:	481d      	ldr	r0, [pc, #116]	; (8017f44 <create_name+0x124>)
 8017ece:	f7ff f815 	bl	8016efc <chk_chr>
 8017ed2:	4603      	mov	r3, r0
 8017ed4:	2b00      	cmp	r3, #0
 8017ed6:	d001      	beq.n	8017edc <create_name+0xbc>
 8017ed8:	2306      	movs	r3, #6
 8017eda:	e02c      	b.n	8017f36 <create_name+0x116>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 8017edc:	7ffb      	ldrb	r3, [r7, #31]
 8017ede:	2b60      	cmp	r3, #96	; 0x60
 8017ee0:	d905      	bls.n	8017eee <create_name+0xce>
 8017ee2:	7ffb      	ldrb	r3, [r7, #31]
 8017ee4:	2b7a      	cmp	r3, #122	; 0x7a
 8017ee6:	d802      	bhi.n	8017eee <create_name+0xce>
 8017ee8:	7ffb      	ldrb	r3, [r7, #31]
 8017eea:	3b20      	subs	r3, #32
 8017eec:	77fb      	strb	r3, [r7, #31]
			sfn[i++] = c;
 8017eee:	693b      	ldr	r3, [r7, #16]
 8017ef0:	1c5a      	adds	r2, r3, #1
 8017ef2:	613a      	str	r2, [r7, #16]
 8017ef4:	68ba      	ldr	r2, [r7, #8]
 8017ef6:	4413      	add	r3, r2
 8017ef8:	7ffa      	ldrb	r2, [r7, #31]
 8017efa:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 8017efc:	e7a6      	b.n	8017e4c <create_name+0x2c>
		if (c <= ' ') break; 			/* Break if end of the path name */
 8017efe:	bf00      	nop
		}
	}
	*path = p + si;						/* Return pointer to the next segment */
 8017f00:	68fa      	ldr	r2, [r7, #12]
 8017f02:	697b      	ldr	r3, [r7, #20]
 8017f04:	441a      	add	r2, r3
 8017f06:	683b      	ldr	r3, [r7, #0]
 8017f08:	601a      	str	r2, [r3, #0]
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 8017f0a:	693b      	ldr	r3, [r7, #16]
 8017f0c:	2b00      	cmp	r3, #0
 8017f0e:	d101      	bne.n	8017f14 <create_name+0xf4>
 8017f10:	2306      	movs	r3, #6
 8017f12:	e010      	b.n	8017f36 <create_name+0x116>

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 8017f14:	68bb      	ldr	r3, [r7, #8]
 8017f16:	781b      	ldrb	r3, [r3, #0]
 8017f18:	2be5      	cmp	r3, #229	; 0xe5
 8017f1a:	d102      	bne.n	8017f22 <create_name+0x102>
 8017f1c:	68bb      	ldr	r3, [r7, #8]
 8017f1e:	2205      	movs	r2, #5
 8017f20:	701a      	strb	r2, [r3, #0]
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 8017f22:	7ffb      	ldrb	r3, [r7, #31]
 8017f24:	2b20      	cmp	r3, #32
 8017f26:	d801      	bhi.n	8017f2c <create_name+0x10c>
 8017f28:	2204      	movs	r2, #4
 8017f2a:	e000      	b.n	8017f2e <create_name+0x10e>
 8017f2c:	2200      	movs	r2, #0
 8017f2e:	68bb      	ldr	r3, [r7, #8]
 8017f30:	330b      	adds	r3, #11
 8017f32:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 8017f34:	2300      	movs	r3, #0
#endif /* _USE_LFN != 0 */
}
 8017f36:	4618      	mov	r0, r3
 8017f38:	3720      	adds	r7, #32
 8017f3a:	46bd      	mov	sp, r7
 8017f3c:	bd80      	pop	{r7, pc}
 8017f3e:	bf00      	nop
 8017f40:	0801c548 	.word	0x0801c548
 8017f44:	0801c46c 	.word	0x0801c46c

08017f48 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 8017f48:	b580      	push	{r7, lr}
 8017f4a:	b086      	sub	sp, #24
 8017f4c:	af00      	add	r7, sp, #0
 8017f4e:	6078      	str	r0, [r7, #4]
 8017f50:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 8017f52:	687b      	ldr	r3, [r7, #4]
 8017f54:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 8017f56:	693b      	ldr	r3, [r7, #16]
 8017f58:	681b      	ldr	r3, [r3, #0]
 8017f5a:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 8017f5c:	e002      	b.n	8017f64 <follow_path+0x1c>
 8017f5e:	683b      	ldr	r3, [r7, #0]
 8017f60:	3301      	adds	r3, #1
 8017f62:	603b      	str	r3, [r7, #0]
 8017f64:	683b      	ldr	r3, [r7, #0]
 8017f66:	781b      	ldrb	r3, [r3, #0]
 8017f68:	2b2f      	cmp	r3, #47	; 0x2f
 8017f6a:	d0f8      	beq.n	8017f5e <follow_path+0x16>
 8017f6c:	683b      	ldr	r3, [r7, #0]
 8017f6e:	781b      	ldrb	r3, [r3, #0]
 8017f70:	2b5c      	cmp	r3, #92	; 0x5c
 8017f72:	d0f4      	beq.n	8017f5e <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 8017f74:	693b      	ldr	r3, [r7, #16]
 8017f76:	2200      	movs	r2, #0
 8017f78:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 8017f7a:	683b      	ldr	r3, [r7, #0]
 8017f7c:	781b      	ldrb	r3, [r3, #0]
 8017f7e:	2b1f      	cmp	r3, #31
 8017f80:	d80a      	bhi.n	8017f98 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 8017f82:	687b      	ldr	r3, [r7, #4]
 8017f84:	2280      	movs	r2, #128	; 0x80
 8017f86:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 8017f8a:	2100      	movs	r1, #0
 8017f8c:	6878      	ldr	r0, [r7, #4]
 8017f8e:	f7ff fcf9 	bl	8017984 <dir_sdi>
 8017f92:	4603      	mov	r3, r0
 8017f94:	75fb      	strb	r3, [r7, #23]
 8017f96:	e043      	b.n	8018020 <follow_path+0xd8>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8017f98:	463b      	mov	r3, r7
 8017f9a:	4619      	mov	r1, r3
 8017f9c:	6878      	ldr	r0, [r7, #4]
 8017f9e:	f7ff ff3f 	bl	8017e20 <create_name>
 8017fa2:	4603      	mov	r3, r0
 8017fa4:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8017fa6:	7dfb      	ldrb	r3, [r7, #23]
 8017fa8:	2b00      	cmp	r3, #0
 8017faa:	d134      	bne.n	8018016 <follow_path+0xce>
			res = dir_find(dp);				/* Find an object with the segment name */
 8017fac:	6878      	ldr	r0, [r7, #4]
 8017fae:	f7ff feaf 	bl	8017d10 <dir_find>
 8017fb2:	4603      	mov	r3, r0
 8017fb4:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 8017fb6:	687b      	ldr	r3, [r7, #4]
 8017fb8:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8017fbc:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 8017fbe:	7dfb      	ldrb	r3, [r7, #23]
 8017fc0:	2b00      	cmp	r3, #0
 8017fc2:	d00a      	beq.n	8017fda <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 8017fc4:	7dfb      	ldrb	r3, [r7, #23]
 8017fc6:	2b04      	cmp	r3, #4
 8017fc8:	d127      	bne.n	801801a <follow_path+0xd2>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 8017fca:	7afb      	ldrb	r3, [r7, #11]
 8017fcc:	f003 0304 	and.w	r3, r3, #4
 8017fd0:	2b00      	cmp	r3, #0
 8017fd2:	d122      	bne.n	801801a <follow_path+0xd2>
 8017fd4:	2305      	movs	r3, #5
 8017fd6:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 8017fd8:	e01f      	b.n	801801a <follow_path+0xd2>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8017fda:	7afb      	ldrb	r3, [r7, #11]
 8017fdc:	f003 0304 	and.w	r3, r3, #4
 8017fe0:	2b00      	cmp	r3, #0
 8017fe2:	d11c      	bne.n	801801e <follow_path+0xd6>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 8017fe4:	693b      	ldr	r3, [r7, #16]
 8017fe6:	799b      	ldrb	r3, [r3, #6]
 8017fe8:	f003 0310 	and.w	r3, r3, #16
 8017fec:	2b00      	cmp	r3, #0
 8017fee:	d102      	bne.n	8017ff6 <follow_path+0xae>
				res = FR_NO_PATH; break;
 8017ff0:	2305      	movs	r3, #5
 8017ff2:	75fb      	strb	r3, [r7, #23]
 8017ff4:	e014      	b.n	8018020 <follow_path+0xd8>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 8017ff6:	68fb      	ldr	r3, [r7, #12]
 8017ff8:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8017ffc:	687b      	ldr	r3, [r7, #4]
 8017ffe:	695b      	ldr	r3, [r3, #20]
 8018000:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8018004:	4413      	add	r3, r2
 8018006:	4619      	mov	r1, r3
 8018008:	68f8      	ldr	r0, [r7, #12]
 801800a:	f7ff fe42 	bl	8017c92 <ld_clust>
 801800e:	4602      	mov	r2, r0
 8018010:	693b      	ldr	r3, [r7, #16]
 8018012:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8018014:	e7c0      	b.n	8017f98 <follow_path+0x50>
			if (res != FR_OK) break;
 8018016:	bf00      	nop
 8018018:	e002      	b.n	8018020 <follow_path+0xd8>
				break;
 801801a:	bf00      	nop
 801801c:	e000      	b.n	8018020 <follow_path+0xd8>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 801801e:	bf00      	nop
			}
		}
	}

	return res;
 8018020:	7dfb      	ldrb	r3, [r7, #23]
}
 8018022:	4618      	mov	r0, r3
 8018024:	3718      	adds	r7, #24
 8018026:	46bd      	mov	sp, r7
 8018028:	bd80      	pop	{r7, pc}

0801802a <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 801802a:	b480      	push	{r7}
 801802c:	b087      	sub	sp, #28
 801802e:	af00      	add	r7, sp, #0
 8018030:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 8018032:	f04f 33ff 	mov.w	r3, #4294967295
 8018036:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 8018038:	687b      	ldr	r3, [r7, #4]
 801803a:	681b      	ldr	r3, [r3, #0]
 801803c:	2b00      	cmp	r3, #0
 801803e:	d031      	beq.n	80180a4 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 8018040:	687b      	ldr	r3, [r7, #4]
 8018042:	681b      	ldr	r3, [r3, #0]
 8018044:	617b      	str	r3, [r7, #20]
 8018046:	e002      	b.n	801804e <get_ldnumber+0x24>
 8018048:	697b      	ldr	r3, [r7, #20]
 801804a:	3301      	adds	r3, #1
 801804c:	617b      	str	r3, [r7, #20]
 801804e:	697b      	ldr	r3, [r7, #20]
 8018050:	781b      	ldrb	r3, [r3, #0]
 8018052:	2b20      	cmp	r3, #32
 8018054:	d903      	bls.n	801805e <get_ldnumber+0x34>
 8018056:	697b      	ldr	r3, [r7, #20]
 8018058:	781b      	ldrb	r3, [r3, #0]
 801805a:	2b3a      	cmp	r3, #58	; 0x3a
 801805c:	d1f4      	bne.n	8018048 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 801805e:	697b      	ldr	r3, [r7, #20]
 8018060:	781b      	ldrb	r3, [r3, #0]
 8018062:	2b3a      	cmp	r3, #58	; 0x3a
 8018064:	d11c      	bne.n	80180a0 <get_ldnumber+0x76>
			tp = *path;
 8018066:	687b      	ldr	r3, [r7, #4]
 8018068:	681b      	ldr	r3, [r3, #0]
 801806a:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 801806c:	68fb      	ldr	r3, [r7, #12]
 801806e:	1c5a      	adds	r2, r3, #1
 8018070:	60fa      	str	r2, [r7, #12]
 8018072:	781b      	ldrb	r3, [r3, #0]
 8018074:	3b30      	subs	r3, #48	; 0x30
 8018076:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 8018078:	68bb      	ldr	r3, [r7, #8]
 801807a:	2b09      	cmp	r3, #9
 801807c:	d80e      	bhi.n	801809c <get_ldnumber+0x72>
 801807e:	68fa      	ldr	r2, [r7, #12]
 8018080:	697b      	ldr	r3, [r7, #20]
 8018082:	429a      	cmp	r2, r3
 8018084:	d10a      	bne.n	801809c <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 8018086:	68bb      	ldr	r3, [r7, #8]
 8018088:	2b00      	cmp	r3, #0
 801808a:	d107      	bne.n	801809c <get_ldnumber+0x72>
					vol = (int)i;
 801808c:	68bb      	ldr	r3, [r7, #8]
 801808e:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 8018090:	697b      	ldr	r3, [r7, #20]
 8018092:	3301      	adds	r3, #1
 8018094:	617b      	str	r3, [r7, #20]
 8018096:	687b      	ldr	r3, [r7, #4]
 8018098:	697a      	ldr	r2, [r7, #20]
 801809a:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 801809c:	693b      	ldr	r3, [r7, #16]
 801809e:	e002      	b.n	80180a6 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 80180a0:	2300      	movs	r3, #0
 80180a2:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 80180a4:	693b      	ldr	r3, [r7, #16]
}
 80180a6:	4618      	mov	r0, r3
 80180a8:	371c      	adds	r7, #28
 80180aa:	46bd      	mov	sp, r7
 80180ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80180b0:	4770      	bx	lr
	...

080180b4 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 80180b4:	b580      	push	{r7, lr}
 80180b6:	b082      	sub	sp, #8
 80180b8:	af00      	add	r7, sp, #0
 80180ba:	6078      	str	r0, [r7, #4]
 80180bc:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 80180be:	687b      	ldr	r3, [r7, #4]
 80180c0:	2200      	movs	r2, #0
 80180c2:	70da      	strb	r2, [r3, #3]
 80180c4:	687b      	ldr	r3, [r7, #4]
 80180c6:	f04f 32ff 	mov.w	r2, #4294967295
 80180ca:	62da      	str	r2, [r3, #44]	; 0x2c
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 80180cc:	6839      	ldr	r1, [r7, #0]
 80180ce:	6878      	ldr	r0, [r7, #4]
 80180d0:	f7ff f8e0 	bl	8017294 <move_window>
 80180d4:	4603      	mov	r3, r0
 80180d6:	2b00      	cmp	r3, #0
 80180d8:	d001      	beq.n	80180de <check_fs+0x2a>
 80180da:	2304      	movs	r3, #4
 80180dc:	e038      	b.n	8018150 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 80180de:	687b      	ldr	r3, [r7, #4]
 80180e0:	3330      	adds	r3, #48	; 0x30
 80180e2:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 80180e6:	4618      	mov	r0, r3
 80180e8:	f7fe fe24 	bl	8016d34 <ld_word>
 80180ec:	4603      	mov	r3, r0
 80180ee:	461a      	mov	r2, r3
 80180f0:	f64a 2355 	movw	r3, #43605	; 0xaa55
 80180f4:	429a      	cmp	r2, r3
 80180f6:	d001      	beq.n	80180fc <check_fs+0x48>
 80180f8:	2303      	movs	r3, #3
 80180fa:	e029      	b.n	8018150 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 80180fc:	687b      	ldr	r3, [r7, #4]
 80180fe:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8018102:	2be9      	cmp	r3, #233	; 0xe9
 8018104:	d009      	beq.n	801811a <check_fs+0x66>
 8018106:	687b      	ldr	r3, [r7, #4]
 8018108:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 801810c:	2beb      	cmp	r3, #235	; 0xeb
 801810e:	d11e      	bne.n	801814e <check_fs+0x9a>
 8018110:	687b      	ldr	r3, [r7, #4]
 8018112:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8018116:	2b90      	cmp	r3, #144	; 0x90
 8018118:	d119      	bne.n	801814e <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 801811a:	687b      	ldr	r3, [r7, #4]
 801811c:	3330      	adds	r3, #48	; 0x30
 801811e:	3336      	adds	r3, #54	; 0x36
 8018120:	4618      	mov	r0, r3
 8018122:	f7fe fe1f 	bl	8016d64 <ld_dword>
 8018126:	4603      	mov	r3, r0
 8018128:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 801812c:	4a0a      	ldr	r2, [pc, #40]	; (8018158 <check_fs+0xa4>)
 801812e:	4293      	cmp	r3, r2
 8018130:	d101      	bne.n	8018136 <check_fs+0x82>
 8018132:	2300      	movs	r3, #0
 8018134:	e00c      	b.n	8018150 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 8018136:	687b      	ldr	r3, [r7, #4]
 8018138:	3330      	adds	r3, #48	; 0x30
 801813a:	3352      	adds	r3, #82	; 0x52
 801813c:	4618      	mov	r0, r3
 801813e:	f7fe fe11 	bl	8016d64 <ld_dword>
 8018142:	4602      	mov	r2, r0
 8018144:	4b05      	ldr	r3, [pc, #20]	; (801815c <check_fs+0xa8>)
 8018146:	429a      	cmp	r2, r3
 8018148:	d101      	bne.n	801814e <check_fs+0x9a>
 801814a:	2300      	movs	r3, #0
 801814c:	e000      	b.n	8018150 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 801814e:	2302      	movs	r3, #2
}
 8018150:	4618      	mov	r0, r3
 8018152:	3708      	adds	r7, #8
 8018154:	46bd      	mov	sp, r7
 8018156:	bd80      	pop	{r7, pc}
 8018158:	00544146 	.word	0x00544146
 801815c:	33544146 	.word	0x33544146

08018160 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 8018160:	b580      	push	{r7, lr}
 8018162:	b096      	sub	sp, #88	; 0x58
 8018164:	af00      	add	r7, sp, #0
 8018166:	60f8      	str	r0, [r7, #12]
 8018168:	60b9      	str	r1, [r7, #8]
 801816a:	4613      	mov	r3, r2
 801816c:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 801816e:	68bb      	ldr	r3, [r7, #8]
 8018170:	2200      	movs	r2, #0
 8018172:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 8018174:	68f8      	ldr	r0, [r7, #12]
 8018176:	f7ff ff58 	bl	801802a <get_ldnumber>
 801817a:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 801817c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801817e:	2b00      	cmp	r3, #0
 8018180:	da01      	bge.n	8018186 <find_volume+0x26>
 8018182:	230b      	movs	r3, #11
 8018184:	e22e      	b.n	80185e4 <find_volume+0x484>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 8018186:	4aa8      	ldr	r2, [pc, #672]	; (8018428 <find_volume+0x2c8>)
 8018188:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801818a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801818e:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 8018190:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018192:	2b00      	cmp	r3, #0
 8018194:	d101      	bne.n	801819a <find_volume+0x3a>
 8018196:	230c      	movs	r3, #12
 8018198:	e224      	b.n	80185e4 <find_volume+0x484>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 801819a:	68bb      	ldr	r3, [r7, #8]
 801819c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801819e:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 80181a0:	79fb      	ldrb	r3, [r7, #7]
 80181a2:	f023 0301 	bic.w	r3, r3, #1
 80181a6:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 80181a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80181aa:	781b      	ldrb	r3, [r3, #0]
 80181ac:	2b00      	cmp	r3, #0
 80181ae:	d01a      	beq.n	80181e6 <find_volume+0x86>
		stat = disk_status(fs->drv);
 80181b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80181b2:	785b      	ldrb	r3, [r3, #1]
 80181b4:	4618      	mov	r0, r3
 80181b6:	f7fe fd1f 	bl	8016bf8 <disk_status>
 80181ba:	4603      	mov	r3, r0
 80181bc:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 80181c0:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80181c4:	f003 0301 	and.w	r3, r3, #1
 80181c8:	2b00      	cmp	r3, #0
 80181ca:	d10c      	bne.n	80181e6 <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 80181cc:	79fb      	ldrb	r3, [r7, #7]
 80181ce:	2b00      	cmp	r3, #0
 80181d0:	d007      	beq.n	80181e2 <find_volume+0x82>
 80181d2:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80181d6:	f003 0304 	and.w	r3, r3, #4
 80181da:	2b00      	cmp	r3, #0
 80181dc:	d001      	beq.n	80181e2 <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 80181de:	230a      	movs	r3, #10
 80181e0:	e200      	b.n	80185e4 <find_volume+0x484>
			}
			return FR_OK;				/* The file system object is valid */
 80181e2:	2300      	movs	r3, #0
 80181e4:	e1fe      	b.n	80185e4 <find_volume+0x484>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 80181e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80181e8:	2200      	movs	r2, #0
 80181ea:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 80181ec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80181ee:	b2da      	uxtb	r2, r3
 80181f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80181f2:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 80181f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80181f6:	785b      	ldrb	r3, [r3, #1]
 80181f8:	4618      	mov	r0, r3
 80181fa:	f7fe fd17 	bl	8016c2c <disk_initialize>
 80181fe:	4603      	mov	r3, r0
 8018200:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 8018204:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8018208:	f003 0301 	and.w	r3, r3, #1
 801820c:	2b00      	cmp	r3, #0
 801820e:	d001      	beq.n	8018214 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 8018210:	2303      	movs	r3, #3
 8018212:	e1e7      	b.n	80185e4 <find_volume+0x484>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 8018214:	79fb      	ldrb	r3, [r7, #7]
 8018216:	2b00      	cmp	r3, #0
 8018218:	d007      	beq.n	801822a <find_volume+0xca>
 801821a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 801821e:	f003 0304 	and.w	r3, r3, #4
 8018222:	2b00      	cmp	r3, #0
 8018224:	d001      	beq.n	801822a <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 8018226:	230a      	movs	r3, #10
 8018228:	e1dc      	b.n	80185e4 <find_volume+0x484>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 801822a:	2300      	movs	r3, #0
 801822c:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 801822e:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8018230:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8018232:	f7ff ff3f 	bl	80180b4 <check_fs>
 8018236:	4603      	mov	r3, r0
 8018238:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 801823c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8018240:	2b02      	cmp	r3, #2
 8018242:	d14b      	bne.n	80182dc <find_volume+0x17c>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8018244:	2300      	movs	r3, #0
 8018246:	643b      	str	r3, [r7, #64]	; 0x40
 8018248:	e01f      	b.n	801828a <find_volume+0x12a>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 801824a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801824c:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8018250:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8018252:	011b      	lsls	r3, r3, #4
 8018254:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 8018258:	4413      	add	r3, r2
 801825a:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 801825c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801825e:	3304      	adds	r3, #4
 8018260:	781b      	ldrb	r3, [r3, #0]
 8018262:	2b00      	cmp	r3, #0
 8018264:	d006      	beq.n	8018274 <find_volume+0x114>
 8018266:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018268:	3308      	adds	r3, #8
 801826a:	4618      	mov	r0, r3
 801826c:	f7fe fd7a 	bl	8016d64 <ld_dword>
 8018270:	4602      	mov	r2, r0
 8018272:	e000      	b.n	8018276 <find_volume+0x116>
 8018274:	2200      	movs	r2, #0
 8018276:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8018278:	009b      	lsls	r3, r3, #2
 801827a:	f107 0158 	add.w	r1, r7, #88	; 0x58
 801827e:	440b      	add	r3, r1
 8018280:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8018284:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8018286:	3301      	adds	r3, #1
 8018288:	643b      	str	r3, [r7, #64]	; 0x40
 801828a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801828c:	2b03      	cmp	r3, #3
 801828e:	d9dc      	bls.n	801824a <find_volume+0xea>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 8018290:	2300      	movs	r3, #0
 8018292:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 8018294:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8018296:	2b00      	cmp	r3, #0
 8018298:	d002      	beq.n	80182a0 <find_volume+0x140>
 801829a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801829c:	3b01      	subs	r3, #1
 801829e:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 80182a0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80182a2:	009b      	lsls	r3, r3, #2
 80182a4:	f107 0258 	add.w	r2, r7, #88	; 0x58
 80182a8:	4413      	add	r3, r2
 80182aa:	f853 3c44 	ldr.w	r3, [r3, #-68]
 80182ae:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 80182b0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80182b2:	2b00      	cmp	r3, #0
 80182b4:	d005      	beq.n	80182c2 <find_volume+0x162>
 80182b6:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80182b8:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80182ba:	f7ff fefb 	bl	80180b4 <check_fs>
 80182be:	4603      	mov	r3, r0
 80182c0:	e000      	b.n	80182c4 <find_volume+0x164>
 80182c2:	2303      	movs	r3, #3
 80182c4:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 80182c8:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80182cc:	2b01      	cmp	r3, #1
 80182ce:	d905      	bls.n	80182dc <find_volume+0x17c>
 80182d0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80182d2:	3301      	adds	r3, #1
 80182d4:	643b      	str	r3, [r7, #64]	; 0x40
 80182d6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80182d8:	2b03      	cmp	r3, #3
 80182da:	d9e1      	bls.n	80182a0 <find_volume+0x140>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 80182dc:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80182e0:	2b04      	cmp	r3, #4
 80182e2:	d101      	bne.n	80182e8 <find_volume+0x188>
 80182e4:	2301      	movs	r3, #1
 80182e6:	e17d      	b.n	80185e4 <find_volume+0x484>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 80182e8:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80182ec:	2b01      	cmp	r3, #1
 80182ee:	d901      	bls.n	80182f4 <find_volume+0x194>
 80182f0:	230d      	movs	r3, #13
 80182f2:	e177      	b.n	80185e4 <find_volume+0x484>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 80182f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80182f6:	3330      	adds	r3, #48	; 0x30
 80182f8:	330b      	adds	r3, #11
 80182fa:	4618      	mov	r0, r3
 80182fc:	f7fe fd1a 	bl	8016d34 <ld_word>
 8018300:	4603      	mov	r3, r0
 8018302:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8018306:	d001      	beq.n	801830c <find_volume+0x1ac>
 8018308:	230d      	movs	r3, #13
 801830a:	e16b      	b.n	80185e4 <find_volume+0x484>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 801830c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801830e:	3330      	adds	r3, #48	; 0x30
 8018310:	3316      	adds	r3, #22
 8018312:	4618      	mov	r0, r3
 8018314:	f7fe fd0e 	bl	8016d34 <ld_word>
 8018318:	4603      	mov	r3, r0
 801831a:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 801831c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801831e:	2b00      	cmp	r3, #0
 8018320:	d106      	bne.n	8018330 <find_volume+0x1d0>
 8018322:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018324:	3330      	adds	r3, #48	; 0x30
 8018326:	3324      	adds	r3, #36	; 0x24
 8018328:	4618      	mov	r0, r3
 801832a:	f7fe fd1b 	bl	8016d64 <ld_dword>
 801832e:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 8018330:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018332:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8018334:	619a      	str	r2, [r3, #24]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 8018336:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018338:	f893 2040 	ldrb.w	r2, [r3, #64]	; 0x40
 801833c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801833e:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 8018340:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018342:	789b      	ldrb	r3, [r3, #2]
 8018344:	2b01      	cmp	r3, #1
 8018346:	d005      	beq.n	8018354 <find_volume+0x1f4>
 8018348:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801834a:	789b      	ldrb	r3, [r3, #2]
 801834c:	2b02      	cmp	r3, #2
 801834e:	d001      	beq.n	8018354 <find_volume+0x1f4>
 8018350:	230d      	movs	r3, #13
 8018352:	e147      	b.n	80185e4 <find_volume+0x484>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 8018354:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018356:	789b      	ldrb	r3, [r3, #2]
 8018358:	461a      	mov	r2, r3
 801835a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801835c:	fb02 f303 	mul.w	r3, r2, r3
 8018360:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 8018362:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018364:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8018368:	b29a      	uxth	r2, r3
 801836a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801836c:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 801836e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018370:	895b      	ldrh	r3, [r3, #10]
 8018372:	2b00      	cmp	r3, #0
 8018374:	d008      	beq.n	8018388 <find_volume+0x228>
 8018376:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018378:	895b      	ldrh	r3, [r3, #10]
 801837a:	461a      	mov	r2, r3
 801837c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801837e:	895b      	ldrh	r3, [r3, #10]
 8018380:	3b01      	subs	r3, #1
 8018382:	4013      	ands	r3, r2
 8018384:	2b00      	cmp	r3, #0
 8018386:	d001      	beq.n	801838c <find_volume+0x22c>
 8018388:	230d      	movs	r3, #13
 801838a:	e12b      	b.n	80185e4 <find_volume+0x484>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 801838c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801838e:	3330      	adds	r3, #48	; 0x30
 8018390:	3311      	adds	r3, #17
 8018392:	4618      	mov	r0, r3
 8018394:	f7fe fcce 	bl	8016d34 <ld_word>
 8018398:	4603      	mov	r3, r0
 801839a:	461a      	mov	r2, r3
 801839c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801839e:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 80183a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80183a2:	891b      	ldrh	r3, [r3, #8]
 80183a4:	f003 030f 	and.w	r3, r3, #15
 80183a8:	b29b      	uxth	r3, r3
 80183aa:	2b00      	cmp	r3, #0
 80183ac:	d001      	beq.n	80183b2 <find_volume+0x252>
 80183ae:	230d      	movs	r3, #13
 80183b0:	e118      	b.n	80185e4 <find_volume+0x484>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 80183b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80183b4:	3330      	adds	r3, #48	; 0x30
 80183b6:	3313      	adds	r3, #19
 80183b8:	4618      	mov	r0, r3
 80183ba:	f7fe fcbb 	bl	8016d34 <ld_word>
 80183be:	4603      	mov	r3, r0
 80183c0:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 80183c2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80183c4:	2b00      	cmp	r3, #0
 80183c6:	d106      	bne.n	80183d6 <find_volume+0x276>
 80183c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80183ca:	3330      	adds	r3, #48	; 0x30
 80183cc:	3320      	adds	r3, #32
 80183ce:	4618      	mov	r0, r3
 80183d0:	f7fe fcc8 	bl	8016d64 <ld_dword>
 80183d4:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 80183d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80183d8:	3330      	adds	r3, #48	; 0x30
 80183da:	330e      	adds	r3, #14
 80183dc:	4618      	mov	r0, r3
 80183de:	f7fe fca9 	bl	8016d34 <ld_word>
 80183e2:	4603      	mov	r3, r0
 80183e4:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 80183e6:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80183e8:	2b00      	cmp	r3, #0
 80183ea:	d101      	bne.n	80183f0 <find_volume+0x290>
 80183ec:	230d      	movs	r3, #13
 80183ee:	e0f9      	b.n	80185e4 <find_volume+0x484>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 80183f0:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 80183f2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80183f4:	4413      	add	r3, r2
 80183f6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80183f8:	8912      	ldrh	r2, [r2, #8]
 80183fa:	0912      	lsrs	r2, r2, #4
 80183fc:	b292      	uxth	r2, r2
 80183fe:	4413      	add	r3, r2
 8018400:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 8018402:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8018404:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018406:	429a      	cmp	r2, r3
 8018408:	d201      	bcs.n	801840e <find_volume+0x2ae>
 801840a:	230d      	movs	r3, #13
 801840c:	e0ea      	b.n	80185e4 <find_volume+0x484>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 801840e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8018410:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018412:	1ad3      	subs	r3, r2, r3
 8018414:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8018416:	8952      	ldrh	r2, [r2, #10]
 8018418:	fbb3 f3f2 	udiv	r3, r3, r2
 801841c:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 801841e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018420:	2b00      	cmp	r3, #0
 8018422:	d103      	bne.n	801842c <find_volume+0x2cc>
 8018424:	230d      	movs	r3, #13
 8018426:	e0dd      	b.n	80185e4 <find_volume+0x484>
 8018428:	240404d0 	.word	0x240404d0
		fmt = FS_FAT32;
 801842c:	2303      	movs	r3, #3
 801842e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 8018432:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018434:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 8018438:	4293      	cmp	r3, r2
 801843a:	d802      	bhi.n	8018442 <find_volume+0x2e2>
 801843c:	2302      	movs	r3, #2
 801843e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 8018442:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018444:	f640 72f5 	movw	r2, #4085	; 0xff5
 8018448:	4293      	cmp	r3, r2
 801844a:	d802      	bhi.n	8018452 <find_volume+0x2f2>
 801844c:	2301      	movs	r3, #1
 801844e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 8018452:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018454:	1c9a      	adds	r2, r3, #2
 8018456:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018458:	615a      	str	r2, [r3, #20]
		fs->volbase = bsect;							/* Volume start sector */
 801845a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801845c:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 801845e:	61da      	str	r2, [r3, #28]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 8018460:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8018462:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8018464:	441a      	add	r2, r3
 8018466:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018468:	621a      	str	r2, [r3, #32]
		fs->database = bsect + sysect;					/* Data start sector */
 801846a:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 801846c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801846e:	441a      	add	r2, r3
 8018470:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018472:	629a      	str	r2, [r3, #40]	; 0x28
		if (fmt == FS_FAT32) {
 8018474:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8018478:	2b03      	cmp	r3, #3
 801847a:	d11e      	bne.n	80184ba <find_volume+0x35a>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 801847c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801847e:	3330      	adds	r3, #48	; 0x30
 8018480:	332a      	adds	r3, #42	; 0x2a
 8018482:	4618      	mov	r0, r3
 8018484:	f7fe fc56 	bl	8016d34 <ld_word>
 8018488:	4603      	mov	r3, r0
 801848a:	2b00      	cmp	r3, #0
 801848c:	d001      	beq.n	8018492 <find_volume+0x332>
 801848e:	230d      	movs	r3, #13
 8018490:	e0a8      	b.n	80185e4 <find_volume+0x484>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 8018492:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018494:	891b      	ldrh	r3, [r3, #8]
 8018496:	2b00      	cmp	r3, #0
 8018498:	d001      	beq.n	801849e <find_volume+0x33e>
 801849a:	230d      	movs	r3, #13
 801849c:	e0a2      	b.n	80185e4 <find_volume+0x484>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 801849e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80184a0:	3330      	adds	r3, #48	; 0x30
 80184a2:	332c      	adds	r3, #44	; 0x2c
 80184a4:	4618      	mov	r0, r3
 80184a6:	f7fe fc5d 	bl	8016d64 <ld_dword>
 80184aa:	4602      	mov	r2, r0
 80184ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80184ae:	625a      	str	r2, [r3, #36]	; 0x24
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 80184b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80184b2:	695b      	ldr	r3, [r3, #20]
 80184b4:	009b      	lsls	r3, r3, #2
 80184b6:	647b      	str	r3, [r7, #68]	; 0x44
 80184b8:	e01f      	b.n	80184fa <find_volume+0x39a>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 80184ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80184bc:	891b      	ldrh	r3, [r3, #8]
 80184be:	2b00      	cmp	r3, #0
 80184c0:	d101      	bne.n	80184c6 <find_volume+0x366>
 80184c2:	230d      	movs	r3, #13
 80184c4:	e08e      	b.n	80185e4 <find_volume+0x484>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 80184c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80184c8:	6a1a      	ldr	r2, [r3, #32]
 80184ca:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80184cc:	441a      	add	r2, r3
 80184ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80184d0:	625a      	str	r2, [r3, #36]	; 0x24
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 80184d2:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80184d6:	2b02      	cmp	r3, #2
 80184d8:	d103      	bne.n	80184e2 <find_volume+0x382>
 80184da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80184dc:	695b      	ldr	r3, [r3, #20]
 80184de:	005b      	lsls	r3, r3, #1
 80184e0:	e00a      	b.n	80184f8 <find_volume+0x398>
 80184e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80184e4:	695a      	ldr	r2, [r3, #20]
 80184e6:	4613      	mov	r3, r2
 80184e8:	005b      	lsls	r3, r3, #1
 80184ea:	4413      	add	r3, r2
 80184ec:	085a      	lsrs	r2, r3, #1
 80184ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80184f0:	695b      	ldr	r3, [r3, #20]
 80184f2:	f003 0301 	and.w	r3, r3, #1
 80184f6:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 80184f8:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 80184fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80184fc:	699a      	ldr	r2, [r3, #24]
 80184fe:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8018500:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8018504:	0a5b      	lsrs	r3, r3, #9
 8018506:	429a      	cmp	r2, r3
 8018508:	d201      	bcs.n	801850e <find_volume+0x3ae>
 801850a:	230d      	movs	r3, #13
 801850c:	e06a      	b.n	80185e4 <find_volume+0x484>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 801850e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018510:	f04f 32ff 	mov.w	r2, #4294967295
 8018514:	611a      	str	r2, [r3, #16]
 8018516:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018518:	691a      	ldr	r2, [r3, #16]
 801851a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801851c:	60da      	str	r2, [r3, #12]
		fs->fsi_flag = 0x80;
 801851e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018520:	2280      	movs	r2, #128	; 0x80
 8018522:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 8018524:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8018528:	2b03      	cmp	r3, #3
 801852a:	d149      	bne.n	80185c0 <find_volume+0x460>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 801852c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801852e:	3330      	adds	r3, #48	; 0x30
 8018530:	3330      	adds	r3, #48	; 0x30
 8018532:	4618      	mov	r0, r3
 8018534:	f7fe fbfe 	bl	8016d34 <ld_word>
 8018538:	4603      	mov	r3, r0
 801853a:	2b01      	cmp	r3, #1
 801853c:	d140      	bne.n	80185c0 <find_volume+0x460>
			&& move_window(fs, bsect + 1) == FR_OK)
 801853e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8018540:	3301      	adds	r3, #1
 8018542:	4619      	mov	r1, r3
 8018544:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8018546:	f7fe fea5 	bl	8017294 <move_window>
 801854a:	4603      	mov	r3, r0
 801854c:	2b00      	cmp	r3, #0
 801854e:	d137      	bne.n	80185c0 <find_volume+0x460>
		{
			fs->fsi_flag = 0;
 8018550:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018552:	2200      	movs	r2, #0
 8018554:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 8018556:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018558:	3330      	adds	r3, #48	; 0x30
 801855a:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 801855e:	4618      	mov	r0, r3
 8018560:	f7fe fbe8 	bl	8016d34 <ld_word>
 8018564:	4603      	mov	r3, r0
 8018566:	461a      	mov	r2, r3
 8018568:	f64a 2355 	movw	r3, #43605	; 0xaa55
 801856c:	429a      	cmp	r2, r3
 801856e:	d127      	bne.n	80185c0 <find_volume+0x460>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 8018570:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018572:	3330      	adds	r3, #48	; 0x30
 8018574:	4618      	mov	r0, r3
 8018576:	f7fe fbf5 	bl	8016d64 <ld_dword>
 801857a:	4602      	mov	r2, r0
 801857c:	4b1b      	ldr	r3, [pc, #108]	; (80185ec <find_volume+0x48c>)
 801857e:	429a      	cmp	r2, r3
 8018580:	d11e      	bne.n	80185c0 <find_volume+0x460>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 8018582:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018584:	3330      	adds	r3, #48	; 0x30
 8018586:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 801858a:	4618      	mov	r0, r3
 801858c:	f7fe fbea 	bl	8016d64 <ld_dword>
 8018590:	4602      	mov	r2, r0
 8018592:	4b17      	ldr	r3, [pc, #92]	; (80185f0 <find_volume+0x490>)
 8018594:	429a      	cmp	r2, r3
 8018596:	d113      	bne.n	80185c0 <find_volume+0x460>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 8018598:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801859a:	3330      	adds	r3, #48	; 0x30
 801859c:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 80185a0:	4618      	mov	r0, r3
 80185a2:	f7fe fbdf 	bl	8016d64 <ld_dword>
 80185a6:	4602      	mov	r2, r0
 80185a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80185aa:	611a      	str	r2, [r3, #16]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 80185ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80185ae:	3330      	adds	r3, #48	; 0x30
 80185b0:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 80185b4:	4618      	mov	r0, r3
 80185b6:	f7fe fbd5 	bl	8016d64 <ld_dword>
 80185ba:	4602      	mov	r2, r0
 80185bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80185be:	60da      	str	r2, [r3, #12]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 80185c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80185c2:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 80185c6:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 80185c8:	4b0a      	ldr	r3, [pc, #40]	; (80185f4 <find_volume+0x494>)
 80185ca:	881b      	ldrh	r3, [r3, #0]
 80185cc:	3301      	adds	r3, #1
 80185ce:	b29a      	uxth	r2, r3
 80185d0:	4b08      	ldr	r3, [pc, #32]	; (80185f4 <find_volume+0x494>)
 80185d2:	801a      	strh	r2, [r3, #0]
 80185d4:	4b07      	ldr	r3, [pc, #28]	; (80185f4 <find_volume+0x494>)
 80185d6:	881a      	ldrh	r2, [r3, #0]
 80185d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80185da:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 80185dc:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80185de:	f7fe fdf1 	bl	80171c4 <clear_lock>
#endif
	return FR_OK;
 80185e2:	2300      	movs	r3, #0
}
 80185e4:	4618      	mov	r0, r3
 80185e6:	3758      	adds	r7, #88	; 0x58
 80185e8:	46bd      	mov	sp, r7
 80185ea:	bd80      	pop	{r7, pc}
 80185ec:	41615252 	.word	0x41615252
 80185f0:	61417272 	.word	0x61417272
 80185f4:	240404d4 	.word	0x240404d4

080185f8 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 80185f8:	b580      	push	{r7, lr}
 80185fa:	b084      	sub	sp, #16
 80185fc:	af00      	add	r7, sp, #0
 80185fe:	6078      	str	r0, [r7, #4]
 8018600:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 8018602:	2309      	movs	r3, #9
 8018604:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 8018606:	687b      	ldr	r3, [r7, #4]
 8018608:	2b00      	cmp	r3, #0
 801860a:	d01c      	beq.n	8018646 <validate+0x4e>
 801860c:	687b      	ldr	r3, [r7, #4]
 801860e:	681b      	ldr	r3, [r3, #0]
 8018610:	2b00      	cmp	r3, #0
 8018612:	d018      	beq.n	8018646 <validate+0x4e>
 8018614:	687b      	ldr	r3, [r7, #4]
 8018616:	681b      	ldr	r3, [r3, #0]
 8018618:	781b      	ldrb	r3, [r3, #0]
 801861a:	2b00      	cmp	r3, #0
 801861c:	d013      	beq.n	8018646 <validate+0x4e>
 801861e:	687b      	ldr	r3, [r7, #4]
 8018620:	889a      	ldrh	r2, [r3, #4]
 8018622:	687b      	ldr	r3, [r7, #4]
 8018624:	681b      	ldr	r3, [r3, #0]
 8018626:	88db      	ldrh	r3, [r3, #6]
 8018628:	429a      	cmp	r2, r3
 801862a:	d10c      	bne.n	8018646 <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 801862c:	687b      	ldr	r3, [r7, #4]
 801862e:	681b      	ldr	r3, [r3, #0]
 8018630:	785b      	ldrb	r3, [r3, #1]
 8018632:	4618      	mov	r0, r3
 8018634:	f7fe fae0 	bl	8016bf8 <disk_status>
 8018638:	4603      	mov	r3, r0
 801863a:	f003 0301 	and.w	r3, r3, #1
 801863e:	2b00      	cmp	r3, #0
 8018640:	d101      	bne.n	8018646 <validate+0x4e>
			res = FR_OK;
 8018642:	2300      	movs	r3, #0
 8018644:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 8018646:	7bfb      	ldrb	r3, [r7, #15]
 8018648:	2b00      	cmp	r3, #0
 801864a:	d102      	bne.n	8018652 <validate+0x5a>
 801864c:	687b      	ldr	r3, [r7, #4]
 801864e:	681b      	ldr	r3, [r3, #0]
 8018650:	e000      	b.n	8018654 <validate+0x5c>
 8018652:	2300      	movs	r3, #0
 8018654:	683a      	ldr	r2, [r7, #0]
 8018656:	6013      	str	r3, [r2, #0]
	return res;
 8018658:	7bfb      	ldrb	r3, [r7, #15]
}
 801865a:	4618      	mov	r0, r3
 801865c:	3710      	adds	r7, #16
 801865e:	46bd      	mov	sp, r7
 8018660:	bd80      	pop	{r7, pc}
	...

08018664 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 8018664:	b580      	push	{r7, lr}
 8018666:	b088      	sub	sp, #32
 8018668:	af00      	add	r7, sp, #0
 801866a:	60f8      	str	r0, [r7, #12]
 801866c:	60b9      	str	r1, [r7, #8]
 801866e:	4613      	mov	r3, r2
 8018670:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 8018672:	68bb      	ldr	r3, [r7, #8]
 8018674:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 8018676:	f107 0310 	add.w	r3, r7, #16
 801867a:	4618      	mov	r0, r3
 801867c:	f7ff fcd5 	bl	801802a <get_ldnumber>
 8018680:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 8018682:	69fb      	ldr	r3, [r7, #28]
 8018684:	2b00      	cmp	r3, #0
 8018686:	da01      	bge.n	801868c <f_mount+0x28>
 8018688:	230b      	movs	r3, #11
 801868a:	e02b      	b.n	80186e4 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 801868c:	4a17      	ldr	r2, [pc, #92]	; (80186ec <f_mount+0x88>)
 801868e:	69fb      	ldr	r3, [r7, #28]
 8018690:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8018694:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 8018696:	69bb      	ldr	r3, [r7, #24]
 8018698:	2b00      	cmp	r3, #0
 801869a:	d005      	beq.n	80186a8 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 801869c:	69b8      	ldr	r0, [r7, #24]
 801869e:	f7fe fd91 	bl	80171c4 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 80186a2:	69bb      	ldr	r3, [r7, #24]
 80186a4:	2200      	movs	r2, #0
 80186a6:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 80186a8:	68fb      	ldr	r3, [r7, #12]
 80186aa:	2b00      	cmp	r3, #0
 80186ac:	d002      	beq.n	80186b4 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 80186ae:	68fb      	ldr	r3, [r7, #12]
 80186b0:	2200      	movs	r2, #0
 80186b2:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 80186b4:	68fa      	ldr	r2, [r7, #12]
 80186b6:	490d      	ldr	r1, [pc, #52]	; (80186ec <f_mount+0x88>)
 80186b8:	69fb      	ldr	r3, [r7, #28]
 80186ba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 80186be:	68fb      	ldr	r3, [r7, #12]
 80186c0:	2b00      	cmp	r3, #0
 80186c2:	d002      	beq.n	80186ca <f_mount+0x66>
 80186c4:	79fb      	ldrb	r3, [r7, #7]
 80186c6:	2b01      	cmp	r3, #1
 80186c8:	d001      	beq.n	80186ce <f_mount+0x6a>
 80186ca:	2300      	movs	r3, #0
 80186cc:	e00a      	b.n	80186e4 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 80186ce:	f107 010c 	add.w	r1, r7, #12
 80186d2:	f107 0308 	add.w	r3, r7, #8
 80186d6:	2200      	movs	r2, #0
 80186d8:	4618      	mov	r0, r3
 80186da:	f7ff fd41 	bl	8018160 <find_volume>
 80186de:	4603      	mov	r3, r0
 80186e0:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 80186e2:	7dfb      	ldrb	r3, [r7, #23]
}
 80186e4:	4618      	mov	r0, r3
 80186e6:	3720      	adds	r7, #32
 80186e8:	46bd      	mov	sp, r7
 80186ea:	bd80      	pop	{r7, pc}
 80186ec:	240404d0 	.word	0x240404d0

080186f0 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 80186f0:	b580      	push	{r7, lr}
 80186f2:	b098      	sub	sp, #96	; 0x60
 80186f4:	af00      	add	r7, sp, #0
 80186f6:	60f8      	str	r0, [r7, #12]
 80186f8:	60b9      	str	r1, [r7, #8]
 80186fa:	4613      	mov	r3, r2
 80186fc:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 80186fe:	68fb      	ldr	r3, [r7, #12]
 8018700:	2b00      	cmp	r3, #0
 8018702:	d101      	bne.n	8018708 <f_open+0x18>
 8018704:	2309      	movs	r3, #9
 8018706:	e1ad      	b.n	8018a64 <f_open+0x374>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 8018708:	79fb      	ldrb	r3, [r7, #7]
 801870a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 801870e:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 8018710:	79fa      	ldrb	r2, [r7, #7]
 8018712:	f107 0110 	add.w	r1, r7, #16
 8018716:	f107 0308 	add.w	r3, r7, #8
 801871a:	4618      	mov	r0, r3
 801871c:	f7ff fd20 	bl	8018160 <find_volume>
 8018720:	4603      	mov	r3, r0
 8018722:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	if (res == FR_OK) {
 8018726:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 801872a:	2b00      	cmp	r3, #0
 801872c:	f040 8191 	bne.w	8018a52 <f_open+0x362>
		dj.obj.fs = fs;
 8018730:	693b      	ldr	r3, [r7, #16]
 8018732:	617b      	str	r3, [r7, #20]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 8018734:	68ba      	ldr	r2, [r7, #8]
 8018736:	f107 0314 	add.w	r3, r7, #20
 801873a:	4611      	mov	r1, r2
 801873c:	4618      	mov	r0, r3
 801873e:	f7ff fc03 	bl	8017f48 <follow_path>
 8018742:	4603      	mov	r3, r0
 8018744:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 8018748:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 801874c:	2b00      	cmp	r3, #0
 801874e:	d11a      	bne.n	8018786 <f_open+0x96>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 8018750:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8018754:	b25b      	sxtb	r3, r3
 8018756:	2b00      	cmp	r3, #0
 8018758:	da03      	bge.n	8018762 <f_open+0x72>
				res = FR_INVALID_NAME;
 801875a:	2306      	movs	r3, #6
 801875c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8018760:	e011      	b.n	8018786 <f_open+0x96>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8018762:	79fb      	ldrb	r3, [r7, #7]
 8018764:	f023 0301 	bic.w	r3, r3, #1
 8018768:	2b00      	cmp	r3, #0
 801876a:	bf14      	ite	ne
 801876c:	2301      	movne	r3, #1
 801876e:	2300      	moveq	r3, #0
 8018770:	b2db      	uxtb	r3, r3
 8018772:	461a      	mov	r2, r3
 8018774:	f107 0314 	add.w	r3, r7, #20
 8018778:	4611      	mov	r1, r2
 801877a:	4618      	mov	r0, r3
 801877c:	f7fe fbda 	bl	8016f34 <chk_lock>
 8018780:	4603      	mov	r3, r0
 8018782:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 8018786:	79fb      	ldrb	r3, [r7, #7]
 8018788:	f003 031c 	and.w	r3, r3, #28
 801878c:	2b00      	cmp	r3, #0
 801878e:	d07f      	beq.n	8018890 <f_open+0x1a0>
			if (res != FR_OK) {					/* No file, create new */
 8018790:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8018794:	2b00      	cmp	r3, #0
 8018796:	d017      	beq.n	80187c8 <f_open+0xd8>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 8018798:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 801879c:	2b04      	cmp	r3, #4
 801879e:	d10e      	bne.n	80187be <f_open+0xce>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 80187a0:	f7fe fc24 	bl	8016fec <enq_lock>
 80187a4:	4603      	mov	r3, r0
 80187a6:	2b00      	cmp	r3, #0
 80187a8:	d006      	beq.n	80187b8 <f_open+0xc8>
 80187aa:	f107 0314 	add.w	r3, r7, #20
 80187ae:	4618      	mov	r0, r3
 80187b0:	f7ff fb03 	bl	8017dba <dir_register>
 80187b4:	4603      	mov	r3, r0
 80187b6:	e000      	b.n	80187ba <f_open+0xca>
 80187b8:	2312      	movs	r3, #18
 80187ba:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 80187be:	79fb      	ldrb	r3, [r7, #7]
 80187c0:	f043 0308 	orr.w	r3, r3, #8
 80187c4:	71fb      	strb	r3, [r7, #7]
 80187c6:	e010      	b.n	80187ea <f_open+0xfa>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 80187c8:	7ebb      	ldrb	r3, [r7, #26]
 80187ca:	f003 0311 	and.w	r3, r3, #17
 80187ce:	2b00      	cmp	r3, #0
 80187d0:	d003      	beq.n	80187da <f_open+0xea>
					res = FR_DENIED;
 80187d2:	2307      	movs	r3, #7
 80187d4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 80187d8:	e007      	b.n	80187ea <f_open+0xfa>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 80187da:	79fb      	ldrb	r3, [r7, #7]
 80187dc:	f003 0304 	and.w	r3, r3, #4
 80187e0:	2b00      	cmp	r3, #0
 80187e2:	d002      	beq.n	80187ea <f_open+0xfa>
 80187e4:	2308      	movs	r3, #8
 80187e6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 80187ea:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80187ee:	2b00      	cmp	r3, #0
 80187f0:	d168      	bne.n	80188c4 <f_open+0x1d4>
 80187f2:	79fb      	ldrb	r3, [r7, #7]
 80187f4:	f003 0308 	and.w	r3, r3, #8
 80187f8:	2b00      	cmp	r3, #0
 80187fa:	d063      	beq.n	80188c4 <f_open+0x1d4>
				dw = GET_FATTIME();
 80187fc:	f7fb f8fe 	bl	80139fc <get_fattime>
 8018800:	6538      	str	r0, [r7, #80]	; 0x50
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 8018802:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8018804:	330e      	adds	r3, #14
 8018806:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8018808:	4618      	mov	r0, r3
 801880a:	f7fe fae9 	bl	8016de0 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 801880e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8018810:	3316      	adds	r3, #22
 8018812:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8018814:	4618      	mov	r0, r3
 8018816:	f7fe fae3 	bl	8016de0 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 801881a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801881c:	330b      	adds	r3, #11
 801881e:	2220      	movs	r2, #32
 8018820:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 8018822:	693b      	ldr	r3, [r7, #16]
 8018824:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8018826:	4611      	mov	r1, r2
 8018828:	4618      	mov	r0, r3
 801882a:	f7ff fa32 	bl	8017c92 <ld_clust>
 801882e:	64f8      	str	r0, [r7, #76]	; 0x4c
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 8018830:	693b      	ldr	r3, [r7, #16]
 8018832:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8018834:	2200      	movs	r2, #0
 8018836:	4618      	mov	r0, r3
 8018838:	f7ff fa4a 	bl	8017cd0 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 801883c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801883e:	331c      	adds	r3, #28
 8018840:	2100      	movs	r1, #0
 8018842:	4618      	mov	r0, r3
 8018844:	f7fe facc 	bl	8016de0 <st_dword>
					fs->wflag = 1;
 8018848:	693b      	ldr	r3, [r7, #16]
 801884a:	2201      	movs	r2, #1
 801884c:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 801884e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8018850:	2b00      	cmp	r3, #0
 8018852:	d037      	beq.n	80188c4 <f_open+0x1d4>
						dw = fs->winsect;
 8018854:	693b      	ldr	r3, [r7, #16]
 8018856:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8018858:	653b      	str	r3, [r7, #80]	; 0x50
						res = remove_chain(&dj.obj, cl, 0);
 801885a:	f107 0314 	add.w	r3, r7, #20
 801885e:	2200      	movs	r2, #0
 8018860:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8018862:	4618      	mov	r0, r3
 8018864:	f7fe ff5d 	bl	8017722 <remove_chain>
 8018868:	4603      	mov	r3, r0
 801886a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
						if (res == FR_OK) {
 801886e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8018872:	2b00      	cmp	r3, #0
 8018874:	d126      	bne.n	80188c4 <f_open+0x1d4>
							res = move_window(fs, dw);
 8018876:	693b      	ldr	r3, [r7, #16]
 8018878:	6d39      	ldr	r1, [r7, #80]	; 0x50
 801887a:	4618      	mov	r0, r3
 801887c:	f7fe fd0a 	bl	8017294 <move_window>
 8018880:	4603      	mov	r3, r0
 8018882:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 8018886:	693b      	ldr	r3, [r7, #16]
 8018888:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 801888a:	3a01      	subs	r2, #1
 801888c:	60da      	str	r2, [r3, #12]
 801888e:	e019      	b.n	80188c4 <f_open+0x1d4>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 8018890:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8018894:	2b00      	cmp	r3, #0
 8018896:	d115      	bne.n	80188c4 <f_open+0x1d4>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 8018898:	7ebb      	ldrb	r3, [r7, #26]
 801889a:	f003 0310 	and.w	r3, r3, #16
 801889e:	2b00      	cmp	r3, #0
 80188a0:	d003      	beq.n	80188aa <f_open+0x1ba>
					res = FR_NO_FILE;
 80188a2:	2304      	movs	r3, #4
 80188a4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 80188a8:	e00c      	b.n	80188c4 <f_open+0x1d4>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 80188aa:	79fb      	ldrb	r3, [r7, #7]
 80188ac:	f003 0302 	and.w	r3, r3, #2
 80188b0:	2b00      	cmp	r3, #0
 80188b2:	d007      	beq.n	80188c4 <f_open+0x1d4>
 80188b4:	7ebb      	ldrb	r3, [r7, #26]
 80188b6:	f003 0301 	and.w	r3, r3, #1
 80188ba:	2b00      	cmp	r3, #0
 80188bc:	d002      	beq.n	80188c4 <f_open+0x1d4>
						res = FR_DENIED;
 80188be:	2307      	movs	r3, #7
 80188c0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					}
				}
			}
		}
		if (res == FR_OK) {
 80188c4:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80188c8:	2b00      	cmp	r3, #0
 80188ca:	d128      	bne.n	801891e <f_open+0x22e>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 80188cc:	79fb      	ldrb	r3, [r7, #7]
 80188ce:	f003 0308 	and.w	r3, r3, #8
 80188d2:	2b00      	cmp	r3, #0
 80188d4:	d003      	beq.n	80188de <f_open+0x1ee>
				mode |= FA_MODIFIED;
 80188d6:	79fb      	ldrb	r3, [r7, #7]
 80188d8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80188dc:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 80188de:	693b      	ldr	r3, [r7, #16]
 80188e0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80188e2:	68fb      	ldr	r3, [r7, #12]
 80188e4:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 80188e6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80188e8:	68fb      	ldr	r3, [r7, #12]
 80188ea:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 80188ec:	79fb      	ldrb	r3, [r7, #7]
 80188ee:	f023 0301 	bic.w	r3, r3, #1
 80188f2:	2b00      	cmp	r3, #0
 80188f4:	bf14      	ite	ne
 80188f6:	2301      	movne	r3, #1
 80188f8:	2300      	moveq	r3, #0
 80188fa:	b2db      	uxtb	r3, r3
 80188fc:	461a      	mov	r2, r3
 80188fe:	f107 0314 	add.w	r3, r7, #20
 8018902:	4611      	mov	r1, r2
 8018904:	4618      	mov	r0, r3
 8018906:	f7fe fb93 	bl	8017030 <inc_lock>
 801890a:	4602      	mov	r2, r0
 801890c:	68fb      	ldr	r3, [r7, #12]
 801890e:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 8018910:	68fb      	ldr	r3, [r7, #12]
 8018912:	691b      	ldr	r3, [r3, #16]
 8018914:	2b00      	cmp	r3, #0
 8018916:	d102      	bne.n	801891e <f_open+0x22e>
 8018918:	2302      	movs	r3, #2
 801891a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
		}
#endif

		if (res == FR_OK) {
 801891e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8018922:	2b00      	cmp	r3, #0
 8018924:	f040 8095 	bne.w	8018a52 <f_open+0x362>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 8018928:	693b      	ldr	r3, [r7, #16]
 801892a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801892c:	4611      	mov	r1, r2
 801892e:	4618      	mov	r0, r3
 8018930:	f7ff f9af 	bl	8017c92 <ld_clust>
 8018934:	4602      	mov	r2, r0
 8018936:	68fb      	ldr	r3, [r7, #12]
 8018938:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 801893a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801893c:	331c      	adds	r3, #28
 801893e:	4618      	mov	r0, r3
 8018940:	f7fe fa10 	bl	8016d64 <ld_dword>
 8018944:	4602      	mov	r2, r0
 8018946:	68fb      	ldr	r3, [r7, #12]
 8018948:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 801894a:	68fb      	ldr	r3, [r7, #12]
 801894c:	2200      	movs	r2, #0
 801894e:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 8018950:	693a      	ldr	r2, [r7, #16]
 8018952:	68fb      	ldr	r3, [r7, #12]
 8018954:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 8018956:	693b      	ldr	r3, [r7, #16]
 8018958:	88da      	ldrh	r2, [r3, #6]
 801895a:	68fb      	ldr	r3, [r7, #12]
 801895c:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 801895e:	68fb      	ldr	r3, [r7, #12]
 8018960:	79fa      	ldrb	r2, [r7, #7]
 8018962:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 8018964:	68fb      	ldr	r3, [r7, #12]
 8018966:	2200      	movs	r2, #0
 8018968:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 801896a:	68fb      	ldr	r3, [r7, #12]
 801896c:	2200      	movs	r2, #0
 801896e:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 8018970:	68fb      	ldr	r3, [r7, #12]
 8018972:	2200      	movs	r2, #0
 8018974:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 8018976:	68fb      	ldr	r3, [r7, #12]
 8018978:	3330      	adds	r3, #48	; 0x30
 801897a:	f44f 7200 	mov.w	r2, #512	; 0x200
 801897e:	2100      	movs	r1, #0
 8018980:	4618      	mov	r0, r3
 8018982:	f7fe fa7a 	bl	8016e7a <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 8018986:	79fb      	ldrb	r3, [r7, #7]
 8018988:	f003 0320 	and.w	r3, r3, #32
 801898c:	2b00      	cmp	r3, #0
 801898e:	d060      	beq.n	8018a52 <f_open+0x362>
 8018990:	68fb      	ldr	r3, [r7, #12]
 8018992:	68db      	ldr	r3, [r3, #12]
 8018994:	2b00      	cmp	r3, #0
 8018996:	d05c      	beq.n	8018a52 <f_open+0x362>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 8018998:	68fb      	ldr	r3, [r7, #12]
 801899a:	68da      	ldr	r2, [r3, #12]
 801899c:	68fb      	ldr	r3, [r7, #12]
 801899e:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 80189a0:	693b      	ldr	r3, [r7, #16]
 80189a2:	895b      	ldrh	r3, [r3, #10]
 80189a4:	025b      	lsls	r3, r3, #9
 80189a6:	64bb      	str	r3, [r7, #72]	; 0x48
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 80189a8:	68fb      	ldr	r3, [r7, #12]
 80189aa:	689b      	ldr	r3, [r3, #8]
 80189ac:	65bb      	str	r3, [r7, #88]	; 0x58
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 80189ae:	68fb      	ldr	r3, [r7, #12]
 80189b0:	68db      	ldr	r3, [r3, #12]
 80189b2:	657b      	str	r3, [r7, #84]	; 0x54
 80189b4:	e016      	b.n	80189e4 <f_open+0x2f4>
					clst = get_fat(&fp->obj, clst);
 80189b6:	68fb      	ldr	r3, [r7, #12]
 80189b8:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80189ba:	4618      	mov	r0, r3
 80189bc:	f7fe fd25 	bl	801740a <get_fat>
 80189c0:	65b8      	str	r0, [r7, #88]	; 0x58
					if (clst <= 1) res = FR_INT_ERR;
 80189c2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80189c4:	2b01      	cmp	r3, #1
 80189c6:	d802      	bhi.n	80189ce <f_open+0x2de>
 80189c8:	2302      	movs	r3, #2
 80189ca:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 80189ce:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80189d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80189d4:	d102      	bne.n	80189dc <f_open+0x2ec>
 80189d6:	2301      	movs	r3, #1
 80189d8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 80189dc:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80189de:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80189e0:	1ad3      	subs	r3, r2, r3
 80189e2:	657b      	str	r3, [r7, #84]	; 0x54
 80189e4:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80189e8:	2b00      	cmp	r3, #0
 80189ea:	d103      	bne.n	80189f4 <f_open+0x304>
 80189ec:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80189ee:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80189f0:	429a      	cmp	r2, r3
 80189f2:	d8e0      	bhi.n	80189b6 <f_open+0x2c6>
				}
				fp->clust = clst;
 80189f4:	68fb      	ldr	r3, [r7, #12]
 80189f6:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80189f8:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 80189fa:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80189fe:	2b00      	cmp	r3, #0
 8018a00:	d127      	bne.n	8018a52 <f_open+0x362>
 8018a02:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8018a04:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8018a08:	2b00      	cmp	r3, #0
 8018a0a:	d022      	beq.n	8018a52 <f_open+0x362>
					if ((sc = clust2sect(fs, clst)) == 0) {
 8018a0c:	693b      	ldr	r3, [r7, #16]
 8018a0e:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8018a10:	4618      	mov	r0, r3
 8018a12:	f7fe fcdb 	bl	80173cc <clust2sect>
 8018a16:	6478      	str	r0, [r7, #68]	; 0x44
 8018a18:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8018a1a:	2b00      	cmp	r3, #0
 8018a1c:	d103      	bne.n	8018a26 <f_open+0x336>
						res = FR_INT_ERR;
 8018a1e:	2302      	movs	r3, #2
 8018a20:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8018a24:	e015      	b.n	8018a52 <f_open+0x362>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 8018a26:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8018a28:	0a5a      	lsrs	r2, r3, #9
 8018a2a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8018a2c:	441a      	add	r2, r3
 8018a2e:	68fb      	ldr	r3, [r7, #12]
 8018a30:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 8018a32:	693b      	ldr	r3, [r7, #16]
 8018a34:	7858      	ldrb	r0, [r3, #1]
 8018a36:	68fb      	ldr	r3, [r7, #12]
 8018a38:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8018a3c:	68fb      	ldr	r3, [r7, #12]
 8018a3e:	6a1a      	ldr	r2, [r3, #32]
 8018a40:	2301      	movs	r3, #1
 8018a42:	f7fe f919 	bl	8016c78 <disk_read>
 8018a46:	4603      	mov	r3, r0
 8018a48:	2b00      	cmp	r3, #0
 8018a4a:	d002      	beq.n	8018a52 <f_open+0x362>
 8018a4c:	2301      	movs	r3, #1
 8018a4e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 8018a52:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8018a56:	2b00      	cmp	r3, #0
 8018a58:	d002      	beq.n	8018a60 <f_open+0x370>
 8018a5a:	68fb      	ldr	r3, [r7, #12]
 8018a5c:	2200      	movs	r2, #0
 8018a5e:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 8018a60:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
}
 8018a64:	4618      	mov	r0, r3
 8018a66:	3760      	adds	r7, #96	; 0x60
 8018a68:	46bd      	mov	sp, r7
 8018a6a:	bd80      	pop	{r7, pc}

08018a6c <f_read>:
	FIL* fp, 	/* Pointer to the file object */
	void* buff,	/* Pointer to data buffer */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Pointer to number of bytes read */
)
{
 8018a6c:	b580      	push	{r7, lr}
 8018a6e:	b08e      	sub	sp, #56	; 0x38
 8018a70:	af00      	add	r7, sp, #0
 8018a72:	60f8      	str	r0, [r7, #12]
 8018a74:	60b9      	str	r1, [r7, #8]
 8018a76:	607a      	str	r2, [r7, #4]
 8018a78:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;
 8018a7a:	68bb      	ldr	r3, [r7, #8]
 8018a7c:	627b      	str	r3, [r7, #36]	; 0x24


	*br = 0;	/* Clear read byte counter */
 8018a7e:	683b      	ldr	r3, [r7, #0]
 8018a80:	2200      	movs	r2, #0
 8018a82:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
 8018a84:	68fb      	ldr	r3, [r7, #12]
 8018a86:	f107 0214 	add.w	r2, r7, #20
 8018a8a:	4611      	mov	r1, r2
 8018a8c:	4618      	mov	r0, r3
 8018a8e:	f7ff fdb3 	bl	80185f8 <validate>
 8018a92:	4603      	mov	r3, r0
 8018a94:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 8018a98:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8018a9c:	2b00      	cmp	r3, #0
 8018a9e:	d107      	bne.n	8018ab0 <f_read+0x44>
 8018aa0:	68fb      	ldr	r3, [r7, #12]
 8018aa2:	7d5b      	ldrb	r3, [r3, #21]
 8018aa4:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8018aa8:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8018aac:	2b00      	cmp	r3, #0
 8018aae:	d002      	beq.n	8018ab6 <f_read+0x4a>
 8018ab0:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8018ab4:	e115      	b.n	8018ce2 <f_read+0x276>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 8018ab6:	68fb      	ldr	r3, [r7, #12]
 8018ab8:	7d1b      	ldrb	r3, [r3, #20]
 8018aba:	f003 0301 	and.w	r3, r3, #1
 8018abe:	2b00      	cmp	r3, #0
 8018ac0:	d101      	bne.n	8018ac6 <f_read+0x5a>
 8018ac2:	2307      	movs	r3, #7
 8018ac4:	e10d      	b.n	8018ce2 <f_read+0x276>
	remain = fp->obj.objsize - fp->fptr;
 8018ac6:	68fb      	ldr	r3, [r7, #12]
 8018ac8:	68da      	ldr	r2, [r3, #12]
 8018aca:	68fb      	ldr	r3, [r7, #12]
 8018acc:	699b      	ldr	r3, [r3, #24]
 8018ace:	1ad3      	subs	r3, r2, r3
 8018ad0:	623b      	str	r3, [r7, #32]
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 8018ad2:	687a      	ldr	r2, [r7, #4]
 8018ad4:	6a3b      	ldr	r3, [r7, #32]
 8018ad6:	429a      	cmp	r2, r3
 8018ad8:	f240 80fe 	bls.w	8018cd8 <f_read+0x26c>
 8018adc:	6a3b      	ldr	r3, [r7, #32]
 8018ade:	607b      	str	r3, [r7, #4]

	for ( ;  btr;								/* Repeat until all data read */
 8018ae0:	e0fa      	b.n	8018cd8 <f_read+0x26c>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 8018ae2:	68fb      	ldr	r3, [r7, #12]
 8018ae4:	699b      	ldr	r3, [r3, #24]
 8018ae6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8018aea:	2b00      	cmp	r3, #0
 8018aec:	f040 80c6 	bne.w	8018c7c <f_read+0x210>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
 8018af0:	68fb      	ldr	r3, [r7, #12]
 8018af2:	699b      	ldr	r3, [r3, #24]
 8018af4:	0a5b      	lsrs	r3, r3, #9
 8018af6:	697a      	ldr	r2, [r7, #20]
 8018af8:	8952      	ldrh	r2, [r2, #10]
 8018afa:	3a01      	subs	r2, #1
 8018afc:	4013      	ands	r3, r2
 8018afe:	61fb      	str	r3, [r7, #28]
			if (csect == 0) {					/* On the cluster boundary? */
 8018b00:	69fb      	ldr	r3, [r7, #28]
 8018b02:	2b00      	cmp	r3, #0
 8018b04:	d12f      	bne.n	8018b66 <f_read+0xfa>
				if (fp->fptr == 0) {			/* On the top of the file? */
 8018b06:	68fb      	ldr	r3, [r7, #12]
 8018b08:	699b      	ldr	r3, [r3, #24]
 8018b0a:	2b00      	cmp	r3, #0
 8018b0c:	d103      	bne.n	8018b16 <f_read+0xaa>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
 8018b0e:	68fb      	ldr	r3, [r7, #12]
 8018b10:	689b      	ldr	r3, [r3, #8]
 8018b12:	633b      	str	r3, [r7, #48]	; 0x30
 8018b14:	e013      	b.n	8018b3e <f_read+0xd2>
				} else {						/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 8018b16:	68fb      	ldr	r3, [r7, #12]
 8018b18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8018b1a:	2b00      	cmp	r3, #0
 8018b1c:	d007      	beq.n	8018b2e <f_read+0xc2>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 8018b1e:	68fb      	ldr	r3, [r7, #12]
 8018b20:	699b      	ldr	r3, [r3, #24]
 8018b22:	4619      	mov	r1, r3
 8018b24:	68f8      	ldr	r0, [r7, #12]
 8018b26:	f7fe fef9 	bl	801791c <clmt_clust>
 8018b2a:	6338      	str	r0, [r7, #48]	; 0x30
 8018b2c:	e007      	b.n	8018b3e <f_read+0xd2>
					} else
#endif
					{
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 8018b2e:	68fa      	ldr	r2, [r7, #12]
 8018b30:	68fb      	ldr	r3, [r7, #12]
 8018b32:	69db      	ldr	r3, [r3, #28]
 8018b34:	4619      	mov	r1, r3
 8018b36:	4610      	mov	r0, r2
 8018b38:	f7fe fc67 	bl	801740a <get_fat>
 8018b3c:	6338      	str	r0, [r7, #48]	; 0x30
					}
				}
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 8018b3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018b40:	2b01      	cmp	r3, #1
 8018b42:	d804      	bhi.n	8018b4e <f_read+0xe2>
 8018b44:	68fb      	ldr	r3, [r7, #12]
 8018b46:	2202      	movs	r2, #2
 8018b48:	755a      	strb	r2, [r3, #21]
 8018b4a:	2302      	movs	r3, #2
 8018b4c:	e0c9      	b.n	8018ce2 <f_read+0x276>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8018b4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018b50:	f1b3 3fff 	cmp.w	r3, #4294967295
 8018b54:	d104      	bne.n	8018b60 <f_read+0xf4>
 8018b56:	68fb      	ldr	r3, [r7, #12]
 8018b58:	2201      	movs	r2, #1
 8018b5a:	755a      	strb	r2, [r3, #21]
 8018b5c:	2301      	movs	r3, #1
 8018b5e:	e0c0      	b.n	8018ce2 <f_read+0x276>
				fp->clust = clst;				/* Update current cluster */
 8018b60:	68fb      	ldr	r3, [r7, #12]
 8018b62:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8018b64:	61da      	str	r2, [r3, #28]
			}
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 8018b66:	697a      	ldr	r2, [r7, #20]
 8018b68:	68fb      	ldr	r3, [r7, #12]
 8018b6a:	69db      	ldr	r3, [r3, #28]
 8018b6c:	4619      	mov	r1, r3
 8018b6e:	4610      	mov	r0, r2
 8018b70:	f7fe fc2c 	bl	80173cc <clust2sect>
 8018b74:	61b8      	str	r0, [r7, #24]
			if (!sect) ABORT(fs, FR_INT_ERR);
 8018b76:	69bb      	ldr	r3, [r7, #24]
 8018b78:	2b00      	cmp	r3, #0
 8018b7a:	d104      	bne.n	8018b86 <f_read+0x11a>
 8018b7c:	68fb      	ldr	r3, [r7, #12]
 8018b7e:	2202      	movs	r2, #2
 8018b80:	755a      	strb	r2, [r3, #21]
 8018b82:	2302      	movs	r3, #2
 8018b84:	e0ad      	b.n	8018ce2 <f_read+0x276>
			sect += csect;
 8018b86:	69ba      	ldr	r2, [r7, #24]
 8018b88:	69fb      	ldr	r3, [r7, #28]
 8018b8a:	4413      	add	r3, r2
 8018b8c:	61bb      	str	r3, [r7, #24]
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
 8018b8e:	687b      	ldr	r3, [r7, #4]
 8018b90:	0a5b      	lsrs	r3, r3, #9
 8018b92:	62bb      	str	r3, [r7, #40]	; 0x28
			if (cc) {							/* Read maximum contiguous sectors directly */
 8018b94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018b96:	2b00      	cmp	r3, #0
 8018b98:	d039      	beq.n	8018c0e <f_read+0x1a2>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 8018b9a:	69fa      	ldr	r2, [r7, #28]
 8018b9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018b9e:	4413      	add	r3, r2
 8018ba0:	697a      	ldr	r2, [r7, #20]
 8018ba2:	8952      	ldrh	r2, [r2, #10]
 8018ba4:	4293      	cmp	r3, r2
 8018ba6:	d905      	bls.n	8018bb4 <f_read+0x148>
					cc = fs->csize - csect;
 8018ba8:	697b      	ldr	r3, [r7, #20]
 8018baa:	895b      	ldrh	r3, [r3, #10]
 8018bac:	461a      	mov	r2, r3
 8018bae:	69fb      	ldr	r3, [r7, #28]
 8018bb0:	1ad3      	subs	r3, r2, r3
 8018bb2:	62bb      	str	r3, [r7, #40]	; 0x28
				}
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8018bb4:	697b      	ldr	r3, [r7, #20]
 8018bb6:	7858      	ldrb	r0, [r3, #1]
 8018bb8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018bba:	69ba      	ldr	r2, [r7, #24]
 8018bbc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8018bbe:	f7fe f85b 	bl	8016c78 <disk_read>
 8018bc2:	4603      	mov	r3, r0
 8018bc4:	2b00      	cmp	r3, #0
 8018bc6:	d004      	beq.n	8018bd2 <f_read+0x166>
 8018bc8:	68fb      	ldr	r3, [r7, #12]
 8018bca:	2201      	movs	r2, #1
 8018bcc:	755a      	strb	r2, [r3, #21]
 8018bce:	2301      	movs	r3, #1
 8018bd0:	e087      	b.n	8018ce2 <f_read+0x276>
#if _FS_TINY
				if (fs->wflag && fs->winsect - sect < cc) {
					mem_cpy(rbuff + ((fs->winsect - sect) * SS(fs)), fs->win, SS(fs));
				}
#else
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 8018bd2:	68fb      	ldr	r3, [r7, #12]
 8018bd4:	7d1b      	ldrb	r3, [r3, #20]
 8018bd6:	b25b      	sxtb	r3, r3
 8018bd8:	2b00      	cmp	r3, #0
 8018bda:	da14      	bge.n	8018c06 <f_read+0x19a>
 8018bdc:	68fb      	ldr	r3, [r7, #12]
 8018bde:	6a1a      	ldr	r2, [r3, #32]
 8018be0:	69bb      	ldr	r3, [r7, #24]
 8018be2:	1ad3      	subs	r3, r2, r3
 8018be4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8018be6:	429a      	cmp	r2, r3
 8018be8:	d90d      	bls.n	8018c06 <f_read+0x19a>
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
 8018bea:	68fb      	ldr	r3, [r7, #12]
 8018bec:	6a1a      	ldr	r2, [r3, #32]
 8018bee:	69bb      	ldr	r3, [r7, #24]
 8018bf0:	1ad3      	subs	r3, r2, r3
 8018bf2:	025b      	lsls	r3, r3, #9
 8018bf4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8018bf6:	18d0      	adds	r0, r2, r3
 8018bf8:	68fb      	ldr	r3, [r7, #12]
 8018bfa:	3330      	adds	r3, #48	; 0x30
 8018bfc:	f44f 7200 	mov.w	r2, #512	; 0x200
 8018c00:	4619      	mov	r1, r3
 8018c02:	f7fe f919 	bl	8016e38 <mem_cpy>
				}
#endif
#endif
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
 8018c06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018c08:	025b      	lsls	r3, r3, #9
 8018c0a:	62fb      	str	r3, [r7, #44]	; 0x2c
				continue;
 8018c0c:	e050      	b.n	8018cb0 <f_read+0x244>
			}
#if !_FS_TINY
			if (fp->sect != sect) {			/* Load data sector if not in cache */
 8018c0e:	68fb      	ldr	r3, [r7, #12]
 8018c10:	6a1b      	ldr	r3, [r3, #32]
 8018c12:	69ba      	ldr	r2, [r7, #24]
 8018c14:	429a      	cmp	r2, r3
 8018c16:	d02e      	beq.n	8018c76 <f_read+0x20a>
#if !_FS_READONLY
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 8018c18:	68fb      	ldr	r3, [r7, #12]
 8018c1a:	7d1b      	ldrb	r3, [r3, #20]
 8018c1c:	b25b      	sxtb	r3, r3
 8018c1e:	2b00      	cmp	r3, #0
 8018c20:	da18      	bge.n	8018c54 <f_read+0x1e8>
					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8018c22:	697b      	ldr	r3, [r7, #20]
 8018c24:	7858      	ldrb	r0, [r3, #1]
 8018c26:	68fb      	ldr	r3, [r7, #12]
 8018c28:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8018c2c:	68fb      	ldr	r3, [r7, #12]
 8018c2e:	6a1a      	ldr	r2, [r3, #32]
 8018c30:	2301      	movs	r3, #1
 8018c32:	f7fe f841 	bl	8016cb8 <disk_write>
 8018c36:	4603      	mov	r3, r0
 8018c38:	2b00      	cmp	r3, #0
 8018c3a:	d004      	beq.n	8018c46 <f_read+0x1da>
 8018c3c:	68fb      	ldr	r3, [r7, #12]
 8018c3e:	2201      	movs	r2, #1
 8018c40:	755a      	strb	r2, [r3, #21]
 8018c42:	2301      	movs	r3, #1
 8018c44:	e04d      	b.n	8018ce2 <f_read+0x276>
					fp->flag &= (BYTE)~FA_DIRTY;
 8018c46:	68fb      	ldr	r3, [r7, #12]
 8018c48:	7d1b      	ldrb	r3, [r3, #20]
 8018c4a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8018c4e:	b2da      	uxtb	r2, r3
 8018c50:	68fb      	ldr	r3, [r7, #12]
 8018c52:	751a      	strb	r2, [r3, #20]
				}
#endif
				if (disk_read(fs->drv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 8018c54:	697b      	ldr	r3, [r7, #20]
 8018c56:	7858      	ldrb	r0, [r3, #1]
 8018c58:	68fb      	ldr	r3, [r7, #12]
 8018c5a:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8018c5e:	2301      	movs	r3, #1
 8018c60:	69ba      	ldr	r2, [r7, #24]
 8018c62:	f7fe f809 	bl	8016c78 <disk_read>
 8018c66:	4603      	mov	r3, r0
 8018c68:	2b00      	cmp	r3, #0
 8018c6a:	d004      	beq.n	8018c76 <f_read+0x20a>
 8018c6c:	68fb      	ldr	r3, [r7, #12]
 8018c6e:	2201      	movs	r2, #1
 8018c70:	755a      	strb	r2, [r3, #21]
 8018c72:	2301      	movs	r3, #1
 8018c74:	e035      	b.n	8018ce2 <f_read+0x276>
			}
#endif
			fp->sect = sect;
 8018c76:	68fb      	ldr	r3, [r7, #12]
 8018c78:	69ba      	ldr	r2, [r7, #24]
 8018c7a:	621a      	str	r2, [r3, #32]
		}
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 8018c7c:	68fb      	ldr	r3, [r7, #12]
 8018c7e:	699b      	ldr	r3, [r3, #24]
 8018c80:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8018c84:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 8018c88:	62fb      	str	r3, [r7, #44]	; 0x2c
		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
 8018c8a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8018c8c:	687b      	ldr	r3, [r7, #4]
 8018c8e:	429a      	cmp	r2, r3
 8018c90:	d901      	bls.n	8018c96 <f_read+0x22a>
 8018c92:	687b      	ldr	r3, [r7, #4]
 8018c94:	62fb      	str	r3, [r7, #44]	; 0x2c
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(rbuff, fs->win + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#else
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 8018c96:	68fb      	ldr	r3, [r7, #12]
 8018c98:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8018c9c:	68fb      	ldr	r3, [r7, #12]
 8018c9e:	699b      	ldr	r3, [r3, #24]
 8018ca0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8018ca4:	4413      	add	r3, r2
 8018ca6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8018ca8:	4619      	mov	r1, r3
 8018caa:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8018cac:	f7fe f8c4 	bl	8016e38 <mem_cpy>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 8018cb0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8018cb2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018cb4:	4413      	add	r3, r2
 8018cb6:	627b      	str	r3, [r7, #36]	; 0x24
 8018cb8:	68fb      	ldr	r3, [r7, #12]
 8018cba:	699a      	ldr	r2, [r3, #24]
 8018cbc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018cbe:	441a      	add	r2, r3
 8018cc0:	68fb      	ldr	r3, [r7, #12]
 8018cc2:	619a      	str	r2, [r3, #24]
 8018cc4:	683b      	ldr	r3, [r7, #0]
 8018cc6:	681a      	ldr	r2, [r3, #0]
 8018cc8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018cca:	441a      	add	r2, r3
 8018ccc:	683b      	ldr	r3, [r7, #0]
 8018cce:	601a      	str	r2, [r3, #0]
 8018cd0:	687a      	ldr	r2, [r7, #4]
 8018cd2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018cd4:	1ad3      	subs	r3, r2, r3
 8018cd6:	607b      	str	r3, [r7, #4]
	for ( ;  btr;								/* Repeat until all data read */
 8018cd8:	687b      	ldr	r3, [r7, #4]
 8018cda:	2b00      	cmp	r3, #0
 8018cdc:	f47f af01 	bne.w	8018ae2 <f_read+0x76>
#endif
	}

	LEAVE_FF(fs, FR_OK);
 8018ce0:	2300      	movs	r3, #0
}
 8018ce2:	4618      	mov	r0, r3
 8018ce4:	3738      	adds	r7, #56	; 0x38
 8018ce6:	46bd      	mov	sp, r7
 8018ce8:	bd80      	pop	{r7, pc}

08018cea <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 8018cea:	b580      	push	{r7, lr}
 8018cec:	b08c      	sub	sp, #48	; 0x30
 8018cee:	af00      	add	r7, sp, #0
 8018cf0:	60f8      	str	r0, [r7, #12]
 8018cf2:	60b9      	str	r1, [r7, #8]
 8018cf4:	607a      	str	r2, [r7, #4]
 8018cf6:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 8018cf8:	68bb      	ldr	r3, [r7, #8]
 8018cfa:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 8018cfc:	683b      	ldr	r3, [r7, #0]
 8018cfe:	2200      	movs	r2, #0
 8018d00:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 8018d02:	68fb      	ldr	r3, [r7, #12]
 8018d04:	f107 0210 	add.w	r2, r7, #16
 8018d08:	4611      	mov	r1, r2
 8018d0a:	4618      	mov	r0, r3
 8018d0c:	f7ff fc74 	bl	80185f8 <validate>
 8018d10:	4603      	mov	r3, r0
 8018d12:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 8018d16:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8018d1a:	2b00      	cmp	r3, #0
 8018d1c:	d107      	bne.n	8018d2e <f_write+0x44>
 8018d1e:	68fb      	ldr	r3, [r7, #12]
 8018d20:	7d5b      	ldrb	r3, [r3, #21]
 8018d22:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8018d26:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8018d2a:	2b00      	cmp	r3, #0
 8018d2c:	d002      	beq.n	8018d34 <f_write+0x4a>
 8018d2e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8018d32:	e14b      	b.n	8018fcc <f_write+0x2e2>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 8018d34:	68fb      	ldr	r3, [r7, #12]
 8018d36:	7d1b      	ldrb	r3, [r3, #20]
 8018d38:	f003 0302 	and.w	r3, r3, #2
 8018d3c:	2b00      	cmp	r3, #0
 8018d3e:	d101      	bne.n	8018d44 <f_write+0x5a>
 8018d40:	2307      	movs	r3, #7
 8018d42:	e143      	b.n	8018fcc <f_write+0x2e2>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 8018d44:	68fb      	ldr	r3, [r7, #12]
 8018d46:	699a      	ldr	r2, [r3, #24]
 8018d48:	687b      	ldr	r3, [r7, #4]
 8018d4a:	441a      	add	r2, r3
 8018d4c:	68fb      	ldr	r3, [r7, #12]
 8018d4e:	699b      	ldr	r3, [r3, #24]
 8018d50:	429a      	cmp	r2, r3
 8018d52:	f080 812d 	bcs.w	8018fb0 <f_write+0x2c6>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 8018d56:	68fb      	ldr	r3, [r7, #12]
 8018d58:	699b      	ldr	r3, [r3, #24]
 8018d5a:	43db      	mvns	r3, r3
 8018d5c:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 8018d5e:	e127      	b.n	8018fb0 <f_write+0x2c6>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 8018d60:	68fb      	ldr	r3, [r7, #12]
 8018d62:	699b      	ldr	r3, [r3, #24]
 8018d64:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8018d68:	2b00      	cmp	r3, #0
 8018d6a:	f040 80e3 	bne.w	8018f34 <f_write+0x24a>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 8018d6e:	68fb      	ldr	r3, [r7, #12]
 8018d70:	699b      	ldr	r3, [r3, #24]
 8018d72:	0a5b      	lsrs	r3, r3, #9
 8018d74:	693a      	ldr	r2, [r7, #16]
 8018d76:	8952      	ldrh	r2, [r2, #10]
 8018d78:	3a01      	subs	r2, #1
 8018d7a:	4013      	ands	r3, r2
 8018d7c:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 8018d7e:	69bb      	ldr	r3, [r7, #24]
 8018d80:	2b00      	cmp	r3, #0
 8018d82:	d143      	bne.n	8018e0c <f_write+0x122>
				if (fp->fptr == 0) {		/* On the top of the file? */
 8018d84:	68fb      	ldr	r3, [r7, #12]
 8018d86:	699b      	ldr	r3, [r3, #24]
 8018d88:	2b00      	cmp	r3, #0
 8018d8a:	d10c      	bne.n	8018da6 <f_write+0xbc>
					clst = fp->obj.sclust;	/* Follow from the origin */
 8018d8c:	68fb      	ldr	r3, [r7, #12]
 8018d8e:	689b      	ldr	r3, [r3, #8]
 8018d90:	62bb      	str	r3, [r7, #40]	; 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 8018d92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018d94:	2b00      	cmp	r3, #0
 8018d96:	d11a      	bne.n	8018dce <f_write+0xe4>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 8018d98:	68fb      	ldr	r3, [r7, #12]
 8018d9a:	2100      	movs	r1, #0
 8018d9c:	4618      	mov	r0, r3
 8018d9e:	f7fe fd25 	bl	80177ec <create_chain>
 8018da2:	62b8      	str	r0, [r7, #40]	; 0x28
 8018da4:	e013      	b.n	8018dce <f_write+0xe4>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 8018da6:	68fb      	ldr	r3, [r7, #12]
 8018da8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8018daa:	2b00      	cmp	r3, #0
 8018dac:	d007      	beq.n	8018dbe <f_write+0xd4>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 8018dae:	68fb      	ldr	r3, [r7, #12]
 8018db0:	699b      	ldr	r3, [r3, #24]
 8018db2:	4619      	mov	r1, r3
 8018db4:	68f8      	ldr	r0, [r7, #12]
 8018db6:	f7fe fdb1 	bl	801791c <clmt_clust>
 8018dba:	62b8      	str	r0, [r7, #40]	; 0x28
 8018dbc:	e007      	b.n	8018dce <f_write+0xe4>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 8018dbe:	68fa      	ldr	r2, [r7, #12]
 8018dc0:	68fb      	ldr	r3, [r7, #12]
 8018dc2:	69db      	ldr	r3, [r3, #28]
 8018dc4:	4619      	mov	r1, r3
 8018dc6:	4610      	mov	r0, r2
 8018dc8:	f7fe fd10 	bl	80177ec <create_chain>
 8018dcc:	62b8      	str	r0, [r7, #40]	; 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8018dce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018dd0:	2b00      	cmp	r3, #0
 8018dd2:	f000 80f2 	beq.w	8018fba <f_write+0x2d0>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 8018dd6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018dd8:	2b01      	cmp	r3, #1
 8018dda:	d104      	bne.n	8018de6 <f_write+0xfc>
 8018ddc:	68fb      	ldr	r3, [r7, #12]
 8018dde:	2202      	movs	r2, #2
 8018de0:	755a      	strb	r2, [r3, #21]
 8018de2:	2302      	movs	r3, #2
 8018de4:	e0f2      	b.n	8018fcc <f_write+0x2e2>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8018de6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018de8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8018dec:	d104      	bne.n	8018df8 <f_write+0x10e>
 8018dee:	68fb      	ldr	r3, [r7, #12]
 8018df0:	2201      	movs	r2, #1
 8018df2:	755a      	strb	r2, [r3, #21]
 8018df4:	2301      	movs	r3, #1
 8018df6:	e0e9      	b.n	8018fcc <f_write+0x2e2>
				fp->clust = clst;			/* Update current cluster */
 8018df8:	68fb      	ldr	r3, [r7, #12]
 8018dfa:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8018dfc:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 8018dfe:	68fb      	ldr	r3, [r7, #12]
 8018e00:	689b      	ldr	r3, [r3, #8]
 8018e02:	2b00      	cmp	r3, #0
 8018e04:	d102      	bne.n	8018e0c <f_write+0x122>
 8018e06:	68fb      	ldr	r3, [r7, #12]
 8018e08:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8018e0a:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 8018e0c:	68fb      	ldr	r3, [r7, #12]
 8018e0e:	7d1b      	ldrb	r3, [r3, #20]
 8018e10:	b25b      	sxtb	r3, r3
 8018e12:	2b00      	cmp	r3, #0
 8018e14:	da18      	bge.n	8018e48 <f_write+0x15e>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8018e16:	693b      	ldr	r3, [r7, #16]
 8018e18:	7858      	ldrb	r0, [r3, #1]
 8018e1a:	68fb      	ldr	r3, [r7, #12]
 8018e1c:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8018e20:	68fb      	ldr	r3, [r7, #12]
 8018e22:	6a1a      	ldr	r2, [r3, #32]
 8018e24:	2301      	movs	r3, #1
 8018e26:	f7fd ff47 	bl	8016cb8 <disk_write>
 8018e2a:	4603      	mov	r3, r0
 8018e2c:	2b00      	cmp	r3, #0
 8018e2e:	d004      	beq.n	8018e3a <f_write+0x150>
 8018e30:	68fb      	ldr	r3, [r7, #12]
 8018e32:	2201      	movs	r2, #1
 8018e34:	755a      	strb	r2, [r3, #21]
 8018e36:	2301      	movs	r3, #1
 8018e38:	e0c8      	b.n	8018fcc <f_write+0x2e2>
				fp->flag &= (BYTE)~FA_DIRTY;
 8018e3a:	68fb      	ldr	r3, [r7, #12]
 8018e3c:	7d1b      	ldrb	r3, [r3, #20]
 8018e3e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8018e42:	b2da      	uxtb	r2, r3
 8018e44:	68fb      	ldr	r3, [r7, #12]
 8018e46:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 8018e48:	693a      	ldr	r2, [r7, #16]
 8018e4a:	68fb      	ldr	r3, [r7, #12]
 8018e4c:	69db      	ldr	r3, [r3, #28]
 8018e4e:	4619      	mov	r1, r3
 8018e50:	4610      	mov	r0, r2
 8018e52:	f7fe fabb 	bl	80173cc <clust2sect>
 8018e56:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 8018e58:	697b      	ldr	r3, [r7, #20]
 8018e5a:	2b00      	cmp	r3, #0
 8018e5c:	d104      	bne.n	8018e68 <f_write+0x17e>
 8018e5e:	68fb      	ldr	r3, [r7, #12]
 8018e60:	2202      	movs	r2, #2
 8018e62:	755a      	strb	r2, [r3, #21]
 8018e64:	2302      	movs	r3, #2
 8018e66:	e0b1      	b.n	8018fcc <f_write+0x2e2>
			sect += csect;
 8018e68:	697a      	ldr	r2, [r7, #20]
 8018e6a:	69bb      	ldr	r3, [r7, #24]
 8018e6c:	4413      	add	r3, r2
 8018e6e:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 8018e70:	687b      	ldr	r3, [r7, #4]
 8018e72:	0a5b      	lsrs	r3, r3, #9
 8018e74:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 8018e76:	6a3b      	ldr	r3, [r7, #32]
 8018e78:	2b00      	cmp	r3, #0
 8018e7a:	d03c      	beq.n	8018ef6 <f_write+0x20c>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 8018e7c:	69ba      	ldr	r2, [r7, #24]
 8018e7e:	6a3b      	ldr	r3, [r7, #32]
 8018e80:	4413      	add	r3, r2
 8018e82:	693a      	ldr	r2, [r7, #16]
 8018e84:	8952      	ldrh	r2, [r2, #10]
 8018e86:	4293      	cmp	r3, r2
 8018e88:	d905      	bls.n	8018e96 <f_write+0x1ac>
					cc = fs->csize - csect;
 8018e8a:	693b      	ldr	r3, [r7, #16]
 8018e8c:	895b      	ldrh	r3, [r3, #10]
 8018e8e:	461a      	mov	r2, r3
 8018e90:	69bb      	ldr	r3, [r7, #24]
 8018e92:	1ad3      	subs	r3, r2, r3
 8018e94:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8018e96:	693b      	ldr	r3, [r7, #16]
 8018e98:	7858      	ldrb	r0, [r3, #1]
 8018e9a:	6a3b      	ldr	r3, [r7, #32]
 8018e9c:	697a      	ldr	r2, [r7, #20]
 8018e9e:	69f9      	ldr	r1, [r7, #28]
 8018ea0:	f7fd ff0a 	bl	8016cb8 <disk_write>
 8018ea4:	4603      	mov	r3, r0
 8018ea6:	2b00      	cmp	r3, #0
 8018ea8:	d004      	beq.n	8018eb4 <f_write+0x1ca>
 8018eaa:	68fb      	ldr	r3, [r7, #12]
 8018eac:	2201      	movs	r2, #1
 8018eae:	755a      	strb	r2, [r3, #21]
 8018eb0:	2301      	movs	r3, #1
 8018eb2:	e08b      	b.n	8018fcc <f_write+0x2e2>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 8018eb4:	68fb      	ldr	r3, [r7, #12]
 8018eb6:	6a1a      	ldr	r2, [r3, #32]
 8018eb8:	697b      	ldr	r3, [r7, #20]
 8018eba:	1ad3      	subs	r3, r2, r3
 8018ebc:	6a3a      	ldr	r2, [r7, #32]
 8018ebe:	429a      	cmp	r2, r3
 8018ec0:	d915      	bls.n	8018eee <f_write+0x204>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 8018ec2:	68fb      	ldr	r3, [r7, #12]
 8018ec4:	f103 0030 	add.w	r0, r3, #48	; 0x30
 8018ec8:	68fb      	ldr	r3, [r7, #12]
 8018eca:	6a1a      	ldr	r2, [r3, #32]
 8018ecc:	697b      	ldr	r3, [r7, #20]
 8018ece:	1ad3      	subs	r3, r2, r3
 8018ed0:	025b      	lsls	r3, r3, #9
 8018ed2:	69fa      	ldr	r2, [r7, #28]
 8018ed4:	4413      	add	r3, r2
 8018ed6:	f44f 7200 	mov.w	r2, #512	; 0x200
 8018eda:	4619      	mov	r1, r3
 8018edc:	f7fd ffac 	bl	8016e38 <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 8018ee0:	68fb      	ldr	r3, [r7, #12]
 8018ee2:	7d1b      	ldrb	r3, [r3, #20]
 8018ee4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8018ee8:	b2da      	uxtb	r2, r3
 8018eea:	68fb      	ldr	r3, [r7, #12]
 8018eec:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 8018eee:	6a3b      	ldr	r3, [r7, #32]
 8018ef0:	025b      	lsls	r3, r3, #9
 8018ef2:	627b      	str	r3, [r7, #36]	; 0x24
				continue;
 8018ef4:	e03f      	b.n	8018f76 <f_write+0x28c>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8018ef6:	68fb      	ldr	r3, [r7, #12]
 8018ef8:	6a1b      	ldr	r3, [r3, #32]
 8018efa:	697a      	ldr	r2, [r7, #20]
 8018efc:	429a      	cmp	r2, r3
 8018efe:	d016      	beq.n	8018f2e <f_write+0x244>
				fp->fptr < fp->obj.objsize &&
 8018f00:	68fb      	ldr	r3, [r7, #12]
 8018f02:	699a      	ldr	r2, [r3, #24]
 8018f04:	68fb      	ldr	r3, [r7, #12]
 8018f06:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8018f08:	429a      	cmp	r2, r3
 8018f0a:	d210      	bcs.n	8018f2e <f_write+0x244>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 8018f0c:	693b      	ldr	r3, [r7, #16]
 8018f0e:	7858      	ldrb	r0, [r3, #1]
 8018f10:	68fb      	ldr	r3, [r7, #12]
 8018f12:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8018f16:	2301      	movs	r3, #1
 8018f18:	697a      	ldr	r2, [r7, #20]
 8018f1a:	f7fd fead 	bl	8016c78 <disk_read>
 8018f1e:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 8018f20:	2b00      	cmp	r3, #0
 8018f22:	d004      	beq.n	8018f2e <f_write+0x244>
					ABORT(fs, FR_DISK_ERR);
 8018f24:	68fb      	ldr	r3, [r7, #12]
 8018f26:	2201      	movs	r2, #1
 8018f28:	755a      	strb	r2, [r3, #21]
 8018f2a:	2301      	movs	r3, #1
 8018f2c:	e04e      	b.n	8018fcc <f_write+0x2e2>
			}
#endif
			fp->sect = sect;
 8018f2e:	68fb      	ldr	r3, [r7, #12]
 8018f30:	697a      	ldr	r2, [r7, #20]
 8018f32:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 8018f34:	68fb      	ldr	r3, [r7, #12]
 8018f36:	699b      	ldr	r3, [r3, #24]
 8018f38:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8018f3c:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 8018f40:	627b      	str	r3, [r7, #36]	; 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 8018f42:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8018f44:	687b      	ldr	r3, [r7, #4]
 8018f46:	429a      	cmp	r2, r3
 8018f48:	d901      	bls.n	8018f4e <f_write+0x264>
 8018f4a:	687b      	ldr	r3, [r7, #4]
 8018f4c:	627b      	str	r3, [r7, #36]	; 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 8018f4e:	68fb      	ldr	r3, [r7, #12]
 8018f50:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8018f54:	68fb      	ldr	r3, [r7, #12]
 8018f56:	699b      	ldr	r3, [r3, #24]
 8018f58:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8018f5c:	4413      	add	r3, r2
 8018f5e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8018f60:	69f9      	ldr	r1, [r7, #28]
 8018f62:	4618      	mov	r0, r3
 8018f64:	f7fd ff68 	bl	8016e38 <mem_cpy>
		fp->flag |= FA_DIRTY;
 8018f68:	68fb      	ldr	r3, [r7, #12]
 8018f6a:	7d1b      	ldrb	r3, [r3, #20]
 8018f6c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8018f70:	b2da      	uxtb	r2, r3
 8018f72:	68fb      	ldr	r3, [r7, #12]
 8018f74:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 8018f76:	69fa      	ldr	r2, [r7, #28]
 8018f78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018f7a:	4413      	add	r3, r2
 8018f7c:	61fb      	str	r3, [r7, #28]
 8018f7e:	68fb      	ldr	r3, [r7, #12]
 8018f80:	699a      	ldr	r2, [r3, #24]
 8018f82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018f84:	441a      	add	r2, r3
 8018f86:	68fb      	ldr	r3, [r7, #12]
 8018f88:	619a      	str	r2, [r3, #24]
 8018f8a:	68fb      	ldr	r3, [r7, #12]
 8018f8c:	68da      	ldr	r2, [r3, #12]
 8018f8e:	68fb      	ldr	r3, [r7, #12]
 8018f90:	699b      	ldr	r3, [r3, #24]
 8018f92:	429a      	cmp	r2, r3
 8018f94:	bf38      	it	cc
 8018f96:	461a      	movcc	r2, r3
 8018f98:	68fb      	ldr	r3, [r7, #12]
 8018f9a:	60da      	str	r2, [r3, #12]
 8018f9c:	683b      	ldr	r3, [r7, #0]
 8018f9e:	681a      	ldr	r2, [r3, #0]
 8018fa0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018fa2:	441a      	add	r2, r3
 8018fa4:	683b      	ldr	r3, [r7, #0]
 8018fa6:	601a      	str	r2, [r3, #0]
 8018fa8:	687a      	ldr	r2, [r7, #4]
 8018faa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018fac:	1ad3      	subs	r3, r2, r3
 8018fae:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 8018fb0:	687b      	ldr	r3, [r7, #4]
 8018fb2:	2b00      	cmp	r3, #0
 8018fb4:	f47f aed4 	bne.w	8018d60 <f_write+0x76>
 8018fb8:	e000      	b.n	8018fbc <f_write+0x2d2>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8018fba:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 8018fbc:	68fb      	ldr	r3, [r7, #12]
 8018fbe:	7d1b      	ldrb	r3, [r3, #20]
 8018fc0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8018fc4:	b2da      	uxtb	r2, r3
 8018fc6:	68fb      	ldr	r3, [r7, #12]
 8018fc8:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 8018fca:	2300      	movs	r3, #0
}
 8018fcc:	4618      	mov	r0, r3
 8018fce:	3730      	adds	r7, #48	; 0x30
 8018fd0:	46bd      	mov	sp, r7
 8018fd2:	bd80      	pop	{r7, pc}

08018fd4 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 8018fd4:	b580      	push	{r7, lr}
 8018fd6:	b086      	sub	sp, #24
 8018fd8:	af00      	add	r7, sp, #0
 8018fda:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 8018fdc:	687b      	ldr	r3, [r7, #4]
 8018fde:	f107 0208 	add.w	r2, r7, #8
 8018fe2:	4611      	mov	r1, r2
 8018fe4:	4618      	mov	r0, r3
 8018fe6:	f7ff fb07 	bl	80185f8 <validate>
 8018fea:	4603      	mov	r3, r0
 8018fec:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8018fee:	7dfb      	ldrb	r3, [r7, #23]
 8018ff0:	2b00      	cmp	r3, #0
 8018ff2:	d168      	bne.n	80190c6 <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 8018ff4:	687b      	ldr	r3, [r7, #4]
 8018ff6:	7d1b      	ldrb	r3, [r3, #20]
 8018ff8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8018ffc:	2b00      	cmp	r3, #0
 8018ffe:	d062      	beq.n	80190c6 <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 8019000:	687b      	ldr	r3, [r7, #4]
 8019002:	7d1b      	ldrb	r3, [r3, #20]
 8019004:	b25b      	sxtb	r3, r3
 8019006:	2b00      	cmp	r3, #0
 8019008:	da15      	bge.n	8019036 <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 801900a:	68bb      	ldr	r3, [r7, #8]
 801900c:	7858      	ldrb	r0, [r3, #1]
 801900e:	687b      	ldr	r3, [r7, #4]
 8019010:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8019014:	687b      	ldr	r3, [r7, #4]
 8019016:	6a1a      	ldr	r2, [r3, #32]
 8019018:	2301      	movs	r3, #1
 801901a:	f7fd fe4d 	bl	8016cb8 <disk_write>
 801901e:	4603      	mov	r3, r0
 8019020:	2b00      	cmp	r3, #0
 8019022:	d001      	beq.n	8019028 <f_sync+0x54>
 8019024:	2301      	movs	r3, #1
 8019026:	e04f      	b.n	80190c8 <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 8019028:	687b      	ldr	r3, [r7, #4]
 801902a:	7d1b      	ldrb	r3, [r3, #20]
 801902c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8019030:	b2da      	uxtb	r2, r3
 8019032:	687b      	ldr	r3, [r7, #4]
 8019034:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 8019036:	f7fa fce1 	bl	80139fc <get_fattime>
 801903a:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 801903c:	68ba      	ldr	r2, [r7, #8]
 801903e:	687b      	ldr	r3, [r7, #4]
 8019040:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019042:	4619      	mov	r1, r3
 8019044:	4610      	mov	r0, r2
 8019046:	f7fe f925 	bl	8017294 <move_window>
 801904a:	4603      	mov	r3, r0
 801904c:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 801904e:	7dfb      	ldrb	r3, [r7, #23]
 8019050:	2b00      	cmp	r3, #0
 8019052:	d138      	bne.n	80190c6 <f_sync+0xf2>
					dir = fp->dir_ptr;
 8019054:	687b      	ldr	r3, [r7, #4]
 8019056:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8019058:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 801905a:	68fb      	ldr	r3, [r7, #12]
 801905c:	330b      	adds	r3, #11
 801905e:	781a      	ldrb	r2, [r3, #0]
 8019060:	68fb      	ldr	r3, [r7, #12]
 8019062:	330b      	adds	r3, #11
 8019064:	f042 0220 	orr.w	r2, r2, #32
 8019068:	b2d2      	uxtb	r2, r2
 801906a:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 801906c:	687b      	ldr	r3, [r7, #4]
 801906e:	6818      	ldr	r0, [r3, #0]
 8019070:	687b      	ldr	r3, [r7, #4]
 8019072:	689b      	ldr	r3, [r3, #8]
 8019074:	461a      	mov	r2, r3
 8019076:	68f9      	ldr	r1, [r7, #12]
 8019078:	f7fe fe2a 	bl	8017cd0 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 801907c:	68fb      	ldr	r3, [r7, #12]
 801907e:	f103 021c 	add.w	r2, r3, #28
 8019082:	687b      	ldr	r3, [r7, #4]
 8019084:	68db      	ldr	r3, [r3, #12]
 8019086:	4619      	mov	r1, r3
 8019088:	4610      	mov	r0, r2
 801908a:	f7fd fea9 	bl	8016de0 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 801908e:	68fb      	ldr	r3, [r7, #12]
 8019090:	3316      	adds	r3, #22
 8019092:	6939      	ldr	r1, [r7, #16]
 8019094:	4618      	mov	r0, r3
 8019096:	f7fd fea3 	bl	8016de0 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 801909a:	68fb      	ldr	r3, [r7, #12]
 801909c:	3312      	adds	r3, #18
 801909e:	2100      	movs	r1, #0
 80190a0:	4618      	mov	r0, r3
 80190a2:	f7fd fe82 	bl	8016daa <st_word>
					fs->wflag = 1;
 80190a6:	68bb      	ldr	r3, [r7, #8]
 80190a8:	2201      	movs	r2, #1
 80190aa:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 80190ac:	68bb      	ldr	r3, [r7, #8]
 80190ae:	4618      	mov	r0, r3
 80190b0:	f7fe f91e 	bl	80172f0 <sync_fs>
 80190b4:	4603      	mov	r3, r0
 80190b6:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 80190b8:	687b      	ldr	r3, [r7, #4]
 80190ba:	7d1b      	ldrb	r3, [r3, #20]
 80190bc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80190c0:	b2da      	uxtb	r2, r3
 80190c2:	687b      	ldr	r3, [r7, #4]
 80190c4:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 80190c6:	7dfb      	ldrb	r3, [r7, #23]
}
 80190c8:	4618      	mov	r0, r3
 80190ca:	3718      	adds	r7, #24
 80190cc:	46bd      	mov	sp, r7
 80190ce:	bd80      	pop	{r7, pc}

080190d0 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 80190d0:	b580      	push	{r7, lr}
 80190d2:	b084      	sub	sp, #16
 80190d4:	af00      	add	r7, sp, #0
 80190d6:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 80190d8:	6878      	ldr	r0, [r7, #4]
 80190da:	f7ff ff7b 	bl	8018fd4 <f_sync>
 80190de:	4603      	mov	r3, r0
 80190e0:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 80190e2:	7bfb      	ldrb	r3, [r7, #15]
 80190e4:	2b00      	cmp	r3, #0
 80190e6:	d118      	bne.n	801911a <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 80190e8:	687b      	ldr	r3, [r7, #4]
 80190ea:	f107 0208 	add.w	r2, r7, #8
 80190ee:	4611      	mov	r1, r2
 80190f0:	4618      	mov	r0, r3
 80190f2:	f7ff fa81 	bl	80185f8 <validate>
 80190f6:	4603      	mov	r3, r0
 80190f8:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 80190fa:	7bfb      	ldrb	r3, [r7, #15]
 80190fc:	2b00      	cmp	r3, #0
 80190fe:	d10c      	bne.n	801911a <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 8019100:	687b      	ldr	r3, [r7, #4]
 8019102:	691b      	ldr	r3, [r3, #16]
 8019104:	4618      	mov	r0, r3
 8019106:	f7fe f821 	bl	801714c <dec_lock>
 801910a:	4603      	mov	r3, r0
 801910c:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 801910e:	7bfb      	ldrb	r3, [r7, #15]
 8019110:	2b00      	cmp	r3, #0
 8019112:	d102      	bne.n	801911a <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 8019114:	687b      	ldr	r3, [r7, #4]
 8019116:	2200      	movs	r2, #0
 8019118:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 801911a:	7bfb      	ldrb	r3, [r7, #15]
}
 801911c:	4618      	mov	r0, r3
 801911e:	3710      	adds	r7, #16
 8019120:	46bd      	mov	sp, r7
 8019122:	bd80      	pop	{r7, pc}

08019124 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8019124:	b480      	push	{r7}
 8019126:	b087      	sub	sp, #28
 8019128:	af00      	add	r7, sp, #0
 801912a:	60f8      	str	r0, [r7, #12]
 801912c:	60b9      	str	r1, [r7, #8]
 801912e:	4613      	mov	r3, r2
 8019130:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 8019132:	2301      	movs	r3, #1
 8019134:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 8019136:	2300      	movs	r3, #0
 8019138:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 801913a:	4b1f      	ldr	r3, [pc, #124]	; (80191b8 <FATFS_LinkDriverEx+0x94>)
 801913c:	7a5b      	ldrb	r3, [r3, #9]
 801913e:	b2db      	uxtb	r3, r3
 8019140:	2b00      	cmp	r3, #0
 8019142:	d131      	bne.n	80191a8 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8019144:	4b1c      	ldr	r3, [pc, #112]	; (80191b8 <FATFS_LinkDriverEx+0x94>)
 8019146:	7a5b      	ldrb	r3, [r3, #9]
 8019148:	b2db      	uxtb	r3, r3
 801914a:	461a      	mov	r2, r3
 801914c:	4b1a      	ldr	r3, [pc, #104]	; (80191b8 <FATFS_LinkDriverEx+0x94>)
 801914e:	2100      	movs	r1, #0
 8019150:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 8019152:	4b19      	ldr	r3, [pc, #100]	; (80191b8 <FATFS_LinkDriverEx+0x94>)
 8019154:	7a5b      	ldrb	r3, [r3, #9]
 8019156:	b2db      	uxtb	r3, r3
 8019158:	4a17      	ldr	r2, [pc, #92]	; (80191b8 <FATFS_LinkDriverEx+0x94>)
 801915a:	009b      	lsls	r3, r3, #2
 801915c:	4413      	add	r3, r2
 801915e:	68fa      	ldr	r2, [r7, #12]
 8019160:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 8019162:	4b15      	ldr	r3, [pc, #84]	; (80191b8 <FATFS_LinkDriverEx+0x94>)
 8019164:	7a5b      	ldrb	r3, [r3, #9]
 8019166:	b2db      	uxtb	r3, r3
 8019168:	461a      	mov	r2, r3
 801916a:	4b13      	ldr	r3, [pc, #76]	; (80191b8 <FATFS_LinkDriverEx+0x94>)
 801916c:	4413      	add	r3, r2
 801916e:	79fa      	ldrb	r2, [r7, #7]
 8019170:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 8019172:	4b11      	ldr	r3, [pc, #68]	; (80191b8 <FATFS_LinkDriverEx+0x94>)
 8019174:	7a5b      	ldrb	r3, [r3, #9]
 8019176:	b2db      	uxtb	r3, r3
 8019178:	1c5a      	adds	r2, r3, #1
 801917a:	b2d1      	uxtb	r1, r2
 801917c:	4a0e      	ldr	r2, [pc, #56]	; (80191b8 <FATFS_LinkDriverEx+0x94>)
 801917e:	7251      	strb	r1, [r2, #9]
 8019180:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 8019182:	7dbb      	ldrb	r3, [r7, #22]
 8019184:	3330      	adds	r3, #48	; 0x30
 8019186:	b2da      	uxtb	r2, r3
 8019188:	68bb      	ldr	r3, [r7, #8]
 801918a:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 801918c:	68bb      	ldr	r3, [r7, #8]
 801918e:	3301      	adds	r3, #1
 8019190:	223a      	movs	r2, #58	; 0x3a
 8019192:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8019194:	68bb      	ldr	r3, [r7, #8]
 8019196:	3302      	adds	r3, #2
 8019198:	222f      	movs	r2, #47	; 0x2f
 801919a:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 801919c:	68bb      	ldr	r3, [r7, #8]
 801919e:	3303      	adds	r3, #3
 80191a0:	2200      	movs	r2, #0
 80191a2:	701a      	strb	r2, [r3, #0]
    ret = 0;
 80191a4:	2300      	movs	r3, #0
 80191a6:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 80191a8:	7dfb      	ldrb	r3, [r7, #23]
}
 80191aa:	4618      	mov	r0, r3
 80191ac:	371c      	adds	r7, #28
 80191ae:	46bd      	mov	sp, r7
 80191b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80191b4:	4770      	bx	lr
 80191b6:	bf00      	nop
 80191b8:	240404f8 	.word	0x240404f8

080191bc <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 80191bc:	b580      	push	{r7, lr}
 80191be:	b082      	sub	sp, #8
 80191c0:	af00      	add	r7, sp, #0
 80191c2:	6078      	str	r0, [r7, #4]
 80191c4:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 80191c6:	2200      	movs	r2, #0
 80191c8:	6839      	ldr	r1, [r7, #0]
 80191ca:	6878      	ldr	r0, [r7, #4]
 80191cc:	f7ff ffaa 	bl	8019124 <FATFS_LinkDriverEx>
 80191d0:	4603      	mov	r3, r0
}
 80191d2:	4618      	mov	r0, r3
 80191d4:	3708      	adds	r7, #8
 80191d6:	46bd      	mov	sp, r7
 80191d8:	bd80      	pop	{r7, pc}
	...

080191dc <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 80191dc:	b580      	push	{r7, lr}
 80191de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 80191e0:	2200      	movs	r2, #0
 80191e2:	4913      	ldr	r1, [pc, #76]	; (8019230 <MX_USB_DEVICE_Init+0x54>)
 80191e4:	4813      	ldr	r0, [pc, #76]	; (8019234 <MX_USB_DEVICE_Init+0x58>)
 80191e6:	f7fc fc20 	bl	8015a2a <USBD_Init>
 80191ea:	4603      	mov	r3, r0
 80191ec:	2b00      	cmp	r3, #0
 80191ee:	d001      	beq.n	80191f4 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 80191f0:	f7eb f8f8 	bl	80043e4 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_MSC) != USBD_OK)
 80191f4:	4910      	ldr	r1, [pc, #64]	; (8019238 <MX_USB_DEVICE_Init+0x5c>)
 80191f6:	480f      	ldr	r0, [pc, #60]	; (8019234 <MX_USB_DEVICE_Init+0x58>)
 80191f8:	f7fc fc4d 	bl	8015a96 <USBD_RegisterClass>
 80191fc:	4603      	mov	r3, r0
 80191fe:	2b00      	cmp	r3, #0
 8019200:	d001      	beq.n	8019206 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8019202:	f7eb f8ef 	bl	80043e4 <Error_Handler>
  }
  if (USBD_MSC_RegisterStorage(&hUsbDeviceFS, &USBD_Storage_Interface_fops_FS) != USBD_OK)
 8019206:	490d      	ldr	r1, [pc, #52]	; (801923c <MX_USB_DEVICE_Init+0x60>)
 8019208:	480a      	ldr	r0, [pc, #40]	; (8019234 <MX_USB_DEVICE_Init+0x58>)
 801920a:	f7fa fff7 	bl	80141fc <USBD_MSC_RegisterStorage>
 801920e:	4603      	mov	r3, r0
 8019210:	2b00      	cmp	r3, #0
 8019212:	d001      	beq.n	8019218 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8019214:	f7eb f8e6 	bl	80043e4 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8019218:	4806      	ldr	r0, [pc, #24]	; (8019234 <MX_USB_DEVICE_Init+0x58>)
 801921a:	f7fc fc5d 	bl	8015ad8 <USBD_Start>
 801921e:	4603      	mov	r3, r0
 8019220:	2b00      	cmp	r3, #0
 8019222:	d001      	beq.n	8019228 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8019224:	f7eb f8de 	bl	80043e4 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */
  HAL_PWREx_EnableUSBVoltageDetector();
 8019228:	f7f0 fe38 	bl	8009e9c <HAL_PWREx_EnableUSBVoltageDetector>

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 801922c:	bf00      	nop
 801922e:	bd80      	pop	{r7, pc}
 8019230:	24000108 	.word	0x24000108
 8019234:	24044e70 	.word	0x24044e70
 8019238:	24000020 	.word	0x24000020
 801923c:	24000158 	.word	0x24000158

08019240 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8019240:	b480      	push	{r7}
 8019242:	b083      	sub	sp, #12
 8019244:	af00      	add	r7, sp, #0
 8019246:	4603      	mov	r3, r0
 8019248:	6039      	str	r1, [r7, #0]
 801924a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 801924c:	683b      	ldr	r3, [r7, #0]
 801924e:	2212      	movs	r2, #18
 8019250:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8019252:	4b03      	ldr	r3, [pc, #12]	; (8019260 <USBD_FS_DeviceDescriptor+0x20>)
}
 8019254:	4618      	mov	r0, r3
 8019256:	370c      	adds	r7, #12
 8019258:	46bd      	mov	sp, r7
 801925a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801925e:	4770      	bx	lr
 8019260:	24000124 	.word	0x24000124

08019264 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8019264:	b480      	push	{r7}
 8019266:	b083      	sub	sp, #12
 8019268:	af00      	add	r7, sp, #0
 801926a:	4603      	mov	r3, r0
 801926c:	6039      	str	r1, [r7, #0]
 801926e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8019270:	683b      	ldr	r3, [r7, #0]
 8019272:	2204      	movs	r2, #4
 8019274:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8019276:	4b03      	ldr	r3, [pc, #12]	; (8019284 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8019278:	4618      	mov	r0, r3
 801927a:	370c      	adds	r7, #12
 801927c:	46bd      	mov	sp, r7
 801927e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019282:	4770      	bx	lr
 8019284:	24000138 	.word	0x24000138

08019288 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8019288:	b580      	push	{r7, lr}
 801928a:	b082      	sub	sp, #8
 801928c:	af00      	add	r7, sp, #0
 801928e:	4603      	mov	r3, r0
 8019290:	6039      	str	r1, [r7, #0]
 8019292:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8019294:	79fb      	ldrb	r3, [r7, #7]
 8019296:	2b00      	cmp	r3, #0
 8019298:	d105      	bne.n	80192a6 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 801929a:	683a      	ldr	r2, [r7, #0]
 801929c:	4907      	ldr	r1, [pc, #28]	; (80192bc <USBD_FS_ProductStrDescriptor+0x34>)
 801929e:	4808      	ldr	r0, [pc, #32]	; (80192c0 <USBD_FS_ProductStrDescriptor+0x38>)
 80192a0:	f7fd fbe7 	bl	8016a72 <USBD_GetString>
 80192a4:	e004      	b.n	80192b0 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80192a6:	683a      	ldr	r2, [r7, #0]
 80192a8:	4904      	ldr	r1, [pc, #16]	; (80192bc <USBD_FS_ProductStrDescriptor+0x34>)
 80192aa:	4805      	ldr	r0, [pc, #20]	; (80192c0 <USBD_FS_ProductStrDescriptor+0x38>)
 80192ac:	f7fd fbe1 	bl	8016a72 <USBD_GetString>
  }
  return USBD_StrDesc;
 80192b0:	4b02      	ldr	r3, [pc, #8]	; (80192bc <USBD_FS_ProductStrDescriptor+0x34>)
}
 80192b2:	4618      	mov	r0, r3
 80192b4:	3708      	adds	r7, #8
 80192b6:	46bd      	mov	sp, r7
 80192b8:	bd80      	pop	{r7, pc}
 80192ba:	bf00      	nop
 80192bc:	24045140 	.word	0x24045140
 80192c0:	0801c4b0 	.word	0x0801c4b0

080192c4 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80192c4:	b580      	push	{r7, lr}
 80192c6:	b082      	sub	sp, #8
 80192c8:	af00      	add	r7, sp, #0
 80192ca:	4603      	mov	r3, r0
 80192cc:	6039      	str	r1, [r7, #0]
 80192ce:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 80192d0:	683a      	ldr	r2, [r7, #0]
 80192d2:	4904      	ldr	r1, [pc, #16]	; (80192e4 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 80192d4:	4804      	ldr	r0, [pc, #16]	; (80192e8 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 80192d6:	f7fd fbcc 	bl	8016a72 <USBD_GetString>
  return USBD_StrDesc;
 80192da:	4b02      	ldr	r3, [pc, #8]	; (80192e4 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 80192dc:	4618      	mov	r0, r3
 80192de:	3708      	adds	r7, #8
 80192e0:	46bd      	mov	sp, r7
 80192e2:	bd80      	pop	{r7, pc}
 80192e4:	24045140 	.word	0x24045140
 80192e8:	0801c4c4 	.word	0x0801c4c4

080192ec <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80192ec:	b580      	push	{r7, lr}
 80192ee:	b082      	sub	sp, #8
 80192f0:	af00      	add	r7, sp, #0
 80192f2:	4603      	mov	r3, r0
 80192f4:	6039      	str	r1, [r7, #0]
 80192f6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 80192f8:	683b      	ldr	r3, [r7, #0]
 80192fa:	221a      	movs	r2, #26
 80192fc:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 80192fe:	f000 f843 	bl	8019388 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8019302:	4b02      	ldr	r3, [pc, #8]	; (801930c <USBD_FS_SerialStrDescriptor+0x20>)
}
 8019304:	4618      	mov	r0, r3
 8019306:	3708      	adds	r7, #8
 8019308:	46bd      	mov	sp, r7
 801930a:	bd80      	pop	{r7, pc}
 801930c:	2400013c 	.word	0x2400013c

08019310 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8019310:	b580      	push	{r7, lr}
 8019312:	b082      	sub	sp, #8
 8019314:	af00      	add	r7, sp, #0
 8019316:	4603      	mov	r3, r0
 8019318:	6039      	str	r1, [r7, #0]
 801931a:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 801931c:	79fb      	ldrb	r3, [r7, #7]
 801931e:	2b00      	cmp	r3, #0
 8019320:	d105      	bne.n	801932e <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8019322:	683a      	ldr	r2, [r7, #0]
 8019324:	4907      	ldr	r1, [pc, #28]	; (8019344 <USBD_FS_ConfigStrDescriptor+0x34>)
 8019326:	4808      	ldr	r0, [pc, #32]	; (8019348 <USBD_FS_ConfigStrDescriptor+0x38>)
 8019328:	f7fd fba3 	bl	8016a72 <USBD_GetString>
 801932c:	e004      	b.n	8019338 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 801932e:	683a      	ldr	r2, [r7, #0]
 8019330:	4904      	ldr	r1, [pc, #16]	; (8019344 <USBD_FS_ConfigStrDescriptor+0x34>)
 8019332:	4805      	ldr	r0, [pc, #20]	; (8019348 <USBD_FS_ConfigStrDescriptor+0x38>)
 8019334:	f7fd fb9d 	bl	8016a72 <USBD_GetString>
  }
  return USBD_StrDesc;
 8019338:	4b02      	ldr	r3, [pc, #8]	; (8019344 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 801933a:	4618      	mov	r0, r3
 801933c:	3708      	adds	r7, #8
 801933e:	46bd      	mov	sp, r7
 8019340:	bd80      	pop	{r7, pc}
 8019342:	bf00      	nop
 8019344:	24045140 	.word	0x24045140
 8019348:	0801c4d8 	.word	0x0801c4d8

0801934c <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801934c:	b580      	push	{r7, lr}
 801934e:	b082      	sub	sp, #8
 8019350:	af00      	add	r7, sp, #0
 8019352:	4603      	mov	r3, r0
 8019354:	6039      	str	r1, [r7, #0]
 8019356:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8019358:	79fb      	ldrb	r3, [r7, #7]
 801935a:	2b00      	cmp	r3, #0
 801935c:	d105      	bne.n	801936a <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 801935e:	683a      	ldr	r2, [r7, #0]
 8019360:	4907      	ldr	r1, [pc, #28]	; (8019380 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8019362:	4808      	ldr	r0, [pc, #32]	; (8019384 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8019364:	f7fd fb85 	bl	8016a72 <USBD_GetString>
 8019368:	e004      	b.n	8019374 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 801936a:	683a      	ldr	r2, [r7, #0]
 801936c:	4904      	ldr	r1, [pc, #16]	; (8019380 <USBD_FS_InterfaceStrDescriptor+0x34>)
 801936e:	4805      	ldr	r0, [pc, #20]	; (8019384 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8019370:	f7fd fb7f 	bl	8016a72 <USBD_GetString>
  }
  return USBD_StrDesc;
 8019374:	4b02      	ldr	r3, [pc, #8]	; (8019380 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8019376:	4618      	mov	r0, r3
 8019378:	3708      	adds	r7, #8
 801937a:	46bd      	mov	sp, r7
 801937c:	bd80      	pop	{r7, pc}
 801937e:	bf00      	nop
 8019380:	24045140 	.word	0x24045140
 8019384:	0801c4e4 	.word	0x0801c4e4

08019388 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8019388:	b580      	push	{r7, lr}
 801938a:	b084      	sub	sp, #16
 801938c:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 801938e:	4b0f      	ldr	r3, [pc, #60]	; (80193cc <Get_SerialNum+0x44>)
 8019390:	681b      	ldr	r3, [r3, #0]
 8019392:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8019394:	4b0e      	ldr	r3, [pc, #56]	; (80193d0 <Get_SerialNum+0x48>)
 8019396:	681b      	ldr	r3, [r3, #0]
 8019398:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 801939a:	4b0e      	ldr	r3, [pc, #56]	; (80193d4 <Get_SerialNum+0x4c>)
 801939c:	681b      	ldr	r3, [r3, #0]
 801939e:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 80193a0:	68fa      	ldr	r2, [r7, #12]
 80193a2:	687b      	ldr	r3, [r7, #4]
 80193a4:	4413      	add	r3, r2
 80193a6:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 80193a8:	68fb      	ldr	r3, [r7, #12]
 80193aa:	2b00      	cmp	r3, #0
 80193ac:	d009      	beq.n	80193c2 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 80193ae:	2208      	movs	r2, #8
 80193b0:	4909      	ldr	r1, [pc, #36]	; (80193d8 <Get_SerialNum+0x50>)
 80193b2:	68f8      	ldr	r0, [r7, #12]
 80193b4:	f000 f814 	bl	80193e0 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 80193b8:	2204      	movs	r2, #4
 80193ba:	4908      	ldr	r1, [pc, #32]	; (80193dc <Get_SerialNum+0x54>)
 80193bc:	68b8      	ldr	r0, [r7, #8]
 80193be:	f000 f80f 	bl	80193e0 <IntToUnicode>
  }
}
 80193c2:	bf00      	nop
 80193c4:	3710      	adds	r7, #16
 80193c6:	46bd      	mov	sp, r7
 80193c8:	bd80      	pop	{r7, pc}
 80193ca:	bf00      	nop
 80193cc:	1ff1e800 	.word	0x1ff1e800
 80193d0:	1ff1e804 	.word	0x1ff1e804
 80193d4:	1ff1e808 	.word	0x1ff1e808
 80193d8:	2400013e 	.word	0x2400013e
 80193dc:	2400014e 	.word	0x2400014e

080193e0 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 80193e0:	b480      	push	{r7}
 80193e2:	b087      	sub	sp, #28
 80193e4:	af00      	add	r7, sp, #0
 80193e6:	60f8      	str	r0, [r7, #12]
 80193e8:	60b9      	str	r1, [r7, #8]
 80193ea:	4613      	mov	r3, r2
 80193ec:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 80193ee:	2300      	movs	r3, #0
 80193f0:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 80193f2:	2300      	movs	r3, #0
 80193f4:	75fb      	strb	r3, [r7, #23]
 80193f6:	e027      	b.n	8019448 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 80193f8:	68fb      	ldr	r3, [r7, #12]
 80193fa:	0f1b      	lsrs	r3, r3, #28
 80193fc:	2b09      	cmp	r3, #9
 80193fe:	d80b      	bhi.n	8019418 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8019400:	68fb      	ldr	r3, [r7, #12]
 8019402:	0f1b      	lsrs	r3, r3, #28
 8019404:	b2da      	uxtb	r2, r3
 8019406:	7dfb      	ldrb	r3, [r7, #23]
 8019408:	005b      	lsls	r3, r3, #1
 801940a:	4619      	mov	r1, r3
 801940c:	68bb      	ldr	r3, [r7, #8]
 801940e:	440b      	add	r3, r1
 8019410:	3230      	adds	r2, #48	; 0x30
 8019412:	b2d2      	uxtb	r2, r2
 8019414:	701a      	strb	r2, [r3, #0]
 8019416:	e00a      	b.n	801942e <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8019418:	68fb      	ldr	r3, [r7, #12]
 801941a:	0f1b      	lsrs	r3, r3, #28
 801941c:	b2da      	uxtb	r2, r3
 801941e:	7dfb      	ldrb	r3, [r7, #23]
 8019420:	005b      	lsls	r3, r3, #1
 8019422:	4619      	mov	r1, r3
 8019424:	68bb      	ldr	r3, [r7, #8]
 8019426:	440b      	add	r3, r1
 8019428:	3237      	adds	r2, #55	; 0x37
 801942a:	b2d2      	uxtb	r2, r2
 801942c:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 801942e:	68fb      	ldr	r3, [r7, #12]
 8019430:	011b      	lsls	r3, r3, #4
 8019432:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8019434:	7dfb      	ldrb	r3, [r7, #23]
 8019436:	005b      	lsls	r3, r3, #1
 8019438:	3301      	adds	r3, #1
 801943a:	68ba      	ldr	r2, [r7, #8]
 801943c:	4413      	add	r3, r2
 801943e:	2200      	movs	r2, #0
 8019440:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8019442:	7dfb      	ldrb	r3, [r7, #23]
 8019444:	3301      	adds	r3, #1
 8019446:	75fb      	strb	r3, [r7, #23]
 8019448:	7dfa      	ldrb	r2, [r7, #23]
 801944a:	79fb      	ldrb	r3, [r7, #7]
 801944c:	429a      	cmp	r2, r3
 801944e:	d3d3      	bcc.n	80193f8 <IntToUnicode+0x18>
  }
}
 8019450:	bf00      	nop
 8019452:	371c      	adds	r7, #28
 8019454:	46bd      	mov	sp, r7
 8019456:	f85d 7b04 	ldr.w	r7, [sp], #4
 801945a:	4770      	bx	lr

0801945c <STORAGE_Init_FS>:
  * @brief  Initializes over USB FS IP
  * @param  lun:
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_Init_FS(uint8_t lun)
{
 801945c:	b480      	push	{r7}
 801945e:	b083      	sub	sp, #12
 8019460:	af00      	add	r7, sp, #0
 8019462:	4603      	mov	r3, r0
 8019464:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN 2 */
  return (USBD_OK);
 8019466:	2300      	movs	r3, #0
  /* USER CODE END 2 */
}
 8019468:	4618      	mov	r0, r3
 801946a:	370c      	adds	r7, #12
 801946c:	46bd      	mov	sp, r7
 801946e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019472:	4770      	bx	lr

08019474 <STORAGE_GetCapacity_FS>:
  * @param  block_num: .
  * @param  block_size: .
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_GetCapacity_FS(uint8_t lun, uint32_t *block_num, uint16_t *block_size)
{
 8019474:	b580      	push	{r7, lr}
 8019476:	b08e      	sub	sp, #56	; 0x38
 8019478:	af00      	add	r7, sp, #0
 801947a:	4603      	mov	r3, r0
 801947c:	60b9      	str	r1, [r7, #8]
 801947e:	607a      	str	r2, [r7, #4]
 8019480:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 3 */
	HAL_SD_CardInfoTypeDef info;
	  int8_t ret = -1;
 8019482:	23ff      	movs	r3, #255	; 0xff
 8019484:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

	  HAL_SD_GetCardInfo(&hsd1, &info);
 8019488:	f107 0310 	add.w	r3, r7, #16
 801948c:	4619      	mov	r1, r3
 801948e:	480a      	ldr	r0, [pc, #40]	; (80194b8 <STORAGE_GetCapacity_FS+0x44>)
 8019490:	f7f5 f8a4 	bl	800e5dc <HAL_SD_GetCardInfo>

	  *block_num =  info.LogBlockNbr  - 1;
 8019494:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019496:	1e5a      	subs	r2, r3, #1
 8019498:	68bb      	ldr	r3, [r7, #8]
 801949a:	601a      	str	r2, [r3, #0]
	  *block_size = info.LogBlockSize;
 801949c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801949e:	b29a      	uxth	r2, r3
 80194a0:	687b      	ldr	r3, [r7, #4]
 80194a2:	801a      	strh	r2, [r3, #0]
	  ret = 0;
 80194a4:	2300      	movs	r3, #0
 80194a6:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	  return ret;
 80194aa:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
  /* USER CODE END 3 */
}
 80194ae:	4618      	mov	r0, r3
 80194b0:	3738      	adds	r7, #56	; 0x38
 80194b2:	46bd      	mov	sp, r7
 80194b4:	bd80      	pop	{r7, pc}
 80194b6:	bf00      	nop
 80194b8:	2404470c 	.word	0x2404470c

080194bc <STORAGE_IsReady_FS>:
  * @brief  .
  * @param  lun: .
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_IsReady_FS(uint8_t lun)
{
 80194bc:	b480      	push	{r7}
 80194be:	b083      	sub	sp, #12
 80194c0:	af00      	add	r7, sp, #0
 80194c2:	4603      	mov	r3, r0
 80194c4:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 80194c6:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 80194c8:	4618      	mov	r0, r3
 80194ca:	370c      	adds	r7, #12
 80194cc:	46bd      	mov	sp, r7
 80194ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80194d2:	4770      	bx	lr

080194d4 <STORAGE_IsWriteProtected_FS>:
  * @brief  .
  * @param  lun: .
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_IsWriteProtected_FS(uint8_t lun)
{
 80194d4:	b480      	push	{r7}
 80194d6:	b083      	sub	sp, #12
 80194d8:	af00      	add	r7, sp, #0
 80194da:	4603      	mov	r3, r0
 80194dc:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN 5 */
  return (USBD_OK);
 80194de:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 80194e0:	4618      	mov	r0, r3
 80194e2:	370c      	adds	r7, #12
 80194e4:	46bd      	mov	sp, r7
 80194e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80194ea:	4770      	bx	lr

080194ec <STORAGE_Read_FS>:
  * @brief  .
  * @param  lun: .
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_Read_FS(uint8_t lun, uint8_t *buf, uint32_t blk_addr, uint16_t blk_len)
{
 80194ec:	b580      	push	{r7, lr}
 80194ee:	b088      	sub	sp, #32
 80194f0:	af02      	add	r7, sp, #8
 80194f2:	60b9      	str	r1, [r7, #8]
 80194f4:	607a      	str	r2, [r7, #4]
 80194f6:	461a      	mov	r2, r3
 80194f8:	4603      	mov	r3, r0
 80194fa:	73fb      	strb	r3, [r7, #15]
 80194fc:	4613      	mov	r3, r2
 80194fe:	81bb      	strh	r3, [r7, #12]
  /* USER CODE BEGIN 6 */
	int8_t ret = -1;
 8019500:	23ff      	movs	r3, #255	; 0xff
 8019502:	75fb      	strb	r3, [r7, #23]

	HAL_SD_ReadBlocks(&hsd1, buf, blk_addr, blk_len, HAL_MAX_DELAY);
 8019504:	89ba      	ldrh	r2, [r7, #12]
 8019506:	f04f 33ff 	mov.w	r3, #4294967295
 801950a:	9300      	str	r3, [sp, #0]
 801950c:	4613      	mov	r3, r2
 801950e:	687a      	ldr	r2, [r7, #4]
 8019510:	68b9      	ldr	r1, [r7, #8]
 8019512:	4809      	ldr	r0, [pc, #36]	; (8019538 <STORAGE_Read_FS+0x4c>)
 8019514:	f7f3 ffd4 	bl	800d4c0 <HAL_SD_ReadBlocks>

	/* Wait until SD card is ready to use for new operation */
	while (HAL_SD_GetCardState(&hsd1) != HAL_SD_CARD_TRANSFER){}
 8019518:	bf00      	nop
 801951a:	4807      	ldr	r0, [pc, #28]	; (8019538 <STORAGE_Read_FS+0x4c>)
 801951c:	f7f5 f934 	bl	800e788 <HAL_SD_GetCardState>
 8019520:	4603      	mov	r3, r0
 8019522:	2b04      	cmp	r3, #4
 8019524:	d1f9      	bne.n	801951a <STORAGE_Read_FS+0x2e>
	ret = 0;
 8019526:	2300      	movs	r3, #0
 8019528:	75fb      	strb	r3, [r7, #23]
	return ret;
 801952a:	f997 3017 	ldrsb.w	r3, [r7, #23]
  /* USER CODE END 6 */
}
 801952e:	4618      	mov	r0, r3
 8019530:	3718      	adds	r7, #24
 8019532:	46bd      	mov	sp, r7
 8019534:	bd80      	pop	{r7, pc}
 8019536:	bf00      	nop
 8019538:	2404470c 	.word	0x2404470c

0801953c <STORAGE_Write_FS>:
  * @brief  .
  * @param  lun: .
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_Write_FS(uint8_t lun, uint8_t *buf, uint32_t blk_addr, uint16_t blk_len)
{
 801953c:	b580      	push	{r7, lr}
 801953e:	b088      	sub	sp, #32
 8019540:	af02      	add	r7, sp, #8
 8019542:	60b9      	str	r1, [r7, #8]
 8019544:	607a      	str	r2, [r7, #4]
 8019546:	461a      	mov	r2, r3
 8019548:	4603      	mov	r3, r0
 801954a:	73fb      	strb	r3, [r7, #15]
 801954c:	4613      	mov	r3, r2
 801954e:	81bb      	strh	r3, [r7, #12]
  /* USER CODE BEGIN 7 */
	int8_t ret = -1;
 8019550:	23ff      	movs	r3, #255	; 0xff
 8019552:	75fb      	strb	r3, [r7, #23]

	HAL_SD_WriteBlocks(&hsd1, buf, blk_addr, blk_len, HAL_MAX_DELAY);
 8019554:	89ba      	ldrh	r2, [r7, #12]
 8019556:	f04f 33ff 	mov.w	r3, #4294967295
 801955a:	9300      	str	r3, [sp, #0]
 801955c:	4613      	mov	r3, r2
 801955e:	687a      	ldr	r2, [r7, #4]
 8019560:	68b9      	ldr	r1, [r7, #8]
 8019562:	4809      	ldr	r0, [pc, #36]	; (8019588 <STORAGE_Write_FS+0x4c>)
 8019564:	f7f4 f936 	bl	800d7d4 <HAL_SD_WriteBlocks>


	/* Wait until SD card is ready to use for new operation */
	while (HAL_SD_GetCardState(&hsd1) != HAL_SD_CARD_TRANSFER){}
 8019568:	bf00      	nop
 801956a:	4807      	ldr	r0, [pc, #28]	; (8019588 <STORAGE_Write_FS+0x4c>)
 801956c:	f7f5 f90c 	bl	800e788 <HAL_SD_GetCardState>
 8019570:	4603      	mov	r3, r0
 8019572:	2b04      	cmp	r3, #4
 8019574:	d1f9      	bne.n	801956a <STORAGE_Write_FS+0x2e>
	ret = 0;
 8019576:	2300      	movs	r3, #0
 8019578:	75fb      	strb	r3, [r7, #23]
	return ret;
 801957a:	f997 3017 	ldrsb.w	r3, [r7, #23]
  /* USER CODE END 7 */
}
 801957e:	4618      	mov	r0, r3
 8019580:	3718      	adds	r7, #24
 8019582:	46bd      	mov	sp, r7
 8019584:	bd80      	pop	{r7, pc}
 8019586:	bf00      	nop
 8019588:	2404470c 	.word	0x2404470c

0801958c <STORAGE_GetMaxLun_FS>:
  * @brief  .
  * @param  None
  * @retval .
  */
int8_t STORAGE_GetMaxLun_FS(void)
{
 801958c:	b480      	push	{r7}
 801958e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 8 */
  return (STORAGE_LUN_NBR - 1);
 8019590:	2300      	movs	r3, #0
  /* USER CODE END 8 */
}
 8019592:	4618      	mov	r0, r3
 8019594:	46bd      	mov	sp, r7
 8019596:	f85d 7b04 	ldr.w	r7, [sp], #4
 801959a:	4770      	bx	lr

0801959c <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 801959c:	b580      	push	{r7, lr}
 801959e:	b08a      	sub	sp, #40	; 0x28
 80195a0:	af00      	add	r7, sp, #0
 80195a2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80195a4:	f107 0314 	add.w	r3, r7, #20
 80195a8:	2200      	movs	r2, #0
 80195aa:	601a      	str	r2, [r3, #0]
 80195ac:	605a      	str	r2, [r3, #4]
 80195ae:	609a      	str	r2, [r3, #8]
 80195b0:	60da      	str	r2, [r3, #12]
 80195b2:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 80195b4:	687b      	ldr	r3, [r7, #4]
 80195b6:	681b      	ldr	r3, [r3, #0]
 80195b8:	4a1e      	ldr	r2, [pc, #120]	; (8019634 <HAL_PCD_MspInit+0x98>)
 80195ba:	4293      	cmp	r3, r2
 80195bc:	d136      	bne.n	801962c <HAL_PCD_MspInit+0x90>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80195be:	4b1e      	ldr	r3, [pc, #120]	; (8019638 <HAL_PCD_MspInit+0x9c>)
 80195c0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80195c4:	4a1c      	ldr	r2, [pc, #112]	; (8019638 <HAL_PCD_MspInit+0x9c>)
 80195c6:	f043 0301 	orr.w	r3, r3, #1
 80195ca:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80195ce:	4b1a      	ldr	r3, [pc, #104]	; (8019638 <HAL_PCD_MspInit+0x9c>)
 80195d0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80195d4:	f003 0301 	and.w	r3, r3, #1
 80195d8:	613b      	str	r3, [r7, #16]
 80195da:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 80195dc:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80195e0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80195e2:	2302      	movs	r3, #2
 80195e4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80195e6:	2300      	movs	r3, #0
 80195e8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80195ea:	2300      	movs	r3, #0
 80195ec:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 80195ee:	230a      	movs	r3, #10
 80195f0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80195f2:	f107 0314 	add.w	r3, r7, #20
 80195f6:	4619      	mov	r1, r3
 80195f8:	4810      	ldr	r0, [pc, #64]	; (801963c <HAL_PCD_MspInit+0xa0>)
 80195fa:	f7ee ff39 	bl	8008470 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80195fe:	4b0e      	ldr	r3, [pc, #56]	; (8019638 <HAL_PCD_MspInit+0x9c>)
 8019600:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8019604:	4a0c      	ldr	r2, [pc, #48]	; (8019638 <HAL_PCD_MspInit+0x9c>)
 8019606:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 801960a:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 801960e:	4b0a      	ldr	r3, [pc, #40]	; (8019638 <HAL_PCD_MspInit+0x9c>)
 8019610:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8019614:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8019618:	60fb      	str	r3, [r7, #12]
 801961a:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 801961c:	2200      	movs	r2, #0
 801961e:	2100      	movs	r1, #0
 8019620:	2065      	movs	r0, #101	; 0x65
 8019622:	f7eb fcdc 	bl	8004fde <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8019626:	2065      	movs	r0, #101	; 0x65
 8019628:	f7eb fcf3 	bl	8005012 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 801962c:	bf00      	nop
 801962e:	3728      	adds	r7, #40	; 0x28
 8019630:	46bd      	mov	sp, r7
 8019632:	bd80      	pop	{r7, pc}
 8019634:	40080000 	.word	0x40080000
 8019638:	58024400 	.word	0x58024400
 801963c:	58020000 	.word	0x58020000

08019640 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8019640:	b580      	push	{r7, lr}
 8019642:	b082      	sub	sp, #8
 8019644:	af00      	add	r7, sp, #0
 8019646:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8019648:	687b      	ldr	r3, [r7, #4]
 801964a:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 801964e:	687b      	ldr	r3, [r7, #4]
 8019650:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8019654:	4619      	mov	r1, r3
 8019656:	4610      	mov	r0, r2
 8019658:	f7fc fa89 	bl	8015b6e <USBD_LL_SetupStage>
}
 801965c:	bf00      	nop
 801965e:	3708      	adds	r7, #8
 8019660:	46bd      	mov	sp, r7
 8019662:	bd80      	pop	{r7, pc}

08019664 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8019664:	b580      	push	{r7, lr}
 8019666:	b082      	sub	sp, #8
 8019668:	af00      	add	r7, sp, #0
 801966a:	6078      	str	r0, [r7, #4]
 801966c:	460b      	mov	r3, r1
 801966e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8019670:	687b      	ldr	r3, [r7, #4]
 8019672:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 8019676:	78fa      	ldrb	r2, [r7, #3]
 8019678:	6879      	ldr	r1, [r7, #4]
 801967a:	4613      	mov	r3, r2
 801967c:	00db      	lsls	r3, r3, #3
 801967e:	1a9b      	subs	r3, r3, r2
 8019680:	009b      	lsls	r3, r3, #2
 8019682:	440b      	add	r3, r1
 8019684:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8019688:	681a      	ldr	r2, [r3, #0]
 801968a:	78fb      	ldrb	r3, [r7, #3]
 801968c:	4619      	mov	r1, r3
 801968e:	f7fc fac1 	bl	8015c14 <USBD_LL_DataOutStage>
}
 8019692:	bf00      	nop
 8019694:	3708      	adds	r7, #8
 8019696:	46bd      	mov	sp, r7
 8019698:	bd80      	pop	{r7, pc}

0801969a <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801969a:	b580      	push	{r7, lr}
 801969c:	b082      	sub	sp, #8
 801969e:	af00      	add	r7, sp, #0
 80196a0:	6078      	str	r0, [r7, #4]
 80196a2:	460b      	mov	r3, r1
 80196a4:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 80196a6:	687b      	ldr	r3, [r7, #4]
 80196a8:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 80196ac:	78fa      	ldrb	r2, [r7, #3]
 80196ae:	6879      	ldr	r1, [r7, #4]
 80196b0:	4613      	mov	r3, r2
 80196b2:	00db      	lsls	r3, r3, #3
 80196b4:	1a9b      	subs	r3, r3, r2
 80196b6:	009b      	lsls	r3, r3, #2
 80196b8:	440b      	add	r3, r1
 80196ba:	3348      	adds	r3, #72	; 0x48
 80196bc:	681a      	ldr	r2, [r3, #0]
 80196be:	78fb      	ldrb	r3, [r7, #3]
 80196c0:	4619      	mov	r1, r3
 80196c2:	f7fc fb0a 	bl	8015cda <USBD_LL_DataInStage>
}
 80196c6:	bf00      	nop
 80196c8:	3708      	adds	r7, #8
 80196ca:	46bd      	mov	sp, r7
 80196cc:	bd80      	pop	{r7, pc}

080196ce <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80196ce:	b580      	push	{r7, lr}
 80196d0:	b082      	sub	sp, #8
 80196d2:	af00      	add	r7, sp, #0
 80196d4:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 80196d6:	687b      	ldr	r3, [r7, #4]
 80196d8:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80196dc:	4618      	mov	r0, r3
 80196de:	f7fc fc0e 	bl	8015efe <USBD_LL_SOF>
}
 80196e2:	bf00      	nop
 80196e4:	3708      	adds	r7, #8
 80196e6:	46bd      	mov	sp, r7
 80196e8:	bd80      	pop	{r7, pc}

080196ea <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80196ea:	b580      	push	{r7, lr}
 80196ec:	b084      	sub	sp, #16
 80196ee:	af00      	add	r7, sp, #0
 80196f0:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 80196f2:	2301      	movs	r3, #1
 80196f4:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 80196f6:	687b      	ldr	r3, [r7, #4]
 80196f8:	68db      	ldr	r3, [r3, #12]
 80196fa:	2b00      	cmp	r3, #0
 80196fc:	d102      	bne.n	8019704 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 80196fe:	2300      	movs	r3, #0
 8019700:	73fb      	strb	r3, [r7, #15]
 8019702:	e008      	b.n	8019716 <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 8019704:	687b      	ldr	r3, [r7, #4]
 8019706:	68db      	ldr	r3, [r3, #12]
 8019708:	2b02      	cmp	r3, #2
 801970a:	d102      	bne.n	8019712 <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 801970c:	2301      	movs	r3, #1
 801970e:	73fb      	strb	r3, [r7, #15]
 8019710:	e001      	b.n	8019716 <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 8019712:	f7ea fe67 	bl	80043e4 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8019716:	687b      	ldr	r3, [r7, #4]
 8019718:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 801971c:	7bfa      	ldrb	r2, [r7, #15]
 801971e:	4611      	mov	r1, r2
 8019720:	4618      	mov	r0, r3
 8019722:	f7fc fbb1 	bl	8015e88 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8019726:	687b      	ldr	r3, [r7, #4]
 8019728:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 801972c:	4618      	mov	r0, r3
 801972e:	f7fc fb6a 	bl	8015e06 <USBD_LL_Reset>
}
 8019732:	bf00      	nop
 8019734:	3710      	adds	r7, #16
 8019736:	46bd      	mov	sp, r7
 8019738:	bd80      	pop	{r7, pc}
	...

0801973c <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801973c:	b580      	push	{r7, lr}
 801973e:	b082      	sub	sp, #8
 8019740:	af00      	add	r7, sp, #0
 8019742:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8019744:	687b      	ldr	r3, [r7, #4]
 8019746:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 801974a:	4618      	mov	r0, r3
 801974c:	f7fc fbac 	bl	8015ea8 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8019750:	687b      	ldr	r3, [r7, #4]
 8019752:	681b      	ldr	r3, [r3, #0]
 8019754:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8019758:	681b      	ldr	r3, [r3, #0]
 801975a:	687a      	ldr	r2, [r7, #4]
 801975c:	6812      	ldr	r2, [r2, #0]
 801975e:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8019762:	f043 0301 	orr.w	r3, r3, #1
 8019766:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8019768:	687b      	ldr	r3, [r7, #4]
 801976a:	6a1b      	ldr	r3, [r3, #32]
 801976c:	2b00      	cmp	r3, #0
 801976e:	d005      	beq.n	801977c <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8019770:	4b04      	ldr	r3, [pc, #16]	; (8019784 <HAL_PCD_SuspendCallback+0x48>)
 8019772:	691b      	ldr	r3, [r3, #16]
 8019774:	4a03      	ldr	r2, [pc, #12]	; (8019784 <HAL_PCD_SuspendCallback+0x48>)
 8019776:	f043 0306 	orr.w	r3, r3, #6
 801977a:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 801977c:	bf00      	nop
 801977e:	3708      	adds	r7, #8
 8019780:	46bd      	mov	sp, r7
 8019782:	bd80      	pop	{r7, pc}
 8019784:	e000ed00 	.word	0xe000ed00

08019788 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8019788:	b580      	push	{r7, lr}
 801978a:	b082      	sub	sp, #8
 801978c:	af00      	add	r7, sp, #0
 801978e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8019790:	687b      	ldr	r3, [r7, #4]
 8019792:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8019796:	4618      	mov	r0, r3
 8019798:	f7fc fb9b 	bl	8015ed2 <USBD_LL_Resume>
}
 801979c:	bf00      	nop
 801979e:	3708      	adds	r7, #8
 80197a0:	46bd      	mov	sp, r7
 80197a2:	bd80      	pop	{r7, pc}

080197a4 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80197a4:	b580      	push	{r7, lr}
 80197a6:	b082      	sub	sp, #8
 80197a8:	af00      	add	r7, sp, #0
 80197aa:	6078      	str	r0, [r7, #4]
 80197ac:	460b      	mov	r3, r1
 80197ae:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 80197b0:	687b      	ldr	r3, [r7, #4]
 80197b2:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80197b6:	78fa      	ldrb	r2, [r7, #3]
 80197b8:	4611      	mov	r1, r2
 80197ba:	4618      	mov	r0, r3
 80197bc:	f7fc fbc6 	bl	8015f4c <USBD_LL_IsoOUTIncomplete>
}
 80197c0:	bf00      	nop
 80197c2:	3708      	adds	r7, #8
 80197c4:	46bd      	mov	sp, r7
 80197c6:	bd80      	pop	{r7, pc}

080197c8 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80197c8:	b580      	push	{r7, lr}
 80197ca:	b082      	sub	sp, #8
 80197cc:	af00      	add	r7, sp, #0
 80197ce:	6078      	str	r0, [r7, #4]
 80197d0:	460b      	mov	r3, r1
 80197d2:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 80197d4:	687b      	ldr	r3, [r7, #4]
 80197d6:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80197da:	78fa      	ldrb	r2, [r7, #3]
 80197dc:	4611      	mov	r1, r2
 80197de:	4618      	mov	r0, r3
 80197e0:	f7fc fba7 	bl	8015f32 <USBD_LL_IsoINIncomplete>
}
 80197e4:	bf00      	nop
 80197e6:	3708      	adds	r7, #8
 80197e8:	46bd      	mov	sp, r7
 80197ea:	bd80      	pop	{r7, pc}

080197ec <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80197ec:	b580      	push	{r7, lr}
 80197ee:	b082      	sub	sp, #8
 80197f0:	af00      	add	r7, sp, #0
 80197f2:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 80197f4:	687b      	ldr	r3, [r7, #4]
 80197f6:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80197fa:	4618      	mov	r0, r3
 80197fc:	f7fc fbb3 	bl	8015f66 <USBD_LL_DevConnected>
}
 8019800:	bf00      	nop
 8019802:	3708      	adds	r7, #8
 8019804:	46bd      	mov	sp, r7
 8019806:	bd80      	pop	{r7, pc}

08019808 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8019808:	b580      	push	{r7, lr}
 801980a:	b082      	sub	sp, #8
 801980c:	af00      	add	r7, sp, #0
 801980e:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8019810:	687b      	ldr	r3, [r7, #4]
 8019812:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8019816:	4618      	mov	r0, r3
 8019818:	f7fc fbb0 	bl	8015f7c <USBD_LL_DevDisconnected>
}
 801981c:	bf00      	nop
 801981e:	3708      	adds	r7, #8
 8019820:	46bd      	mov	sp, r7
 8019822:	bd80      	pop	{r7, pc}

08019824 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8019824:	b580      	push	{r7, lr}
 8019826:	b082      	sub	sp, #8
 8019828:	af00      	add	r7, sp, #0
 801982a:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 801982c:	687b      	ldr	r3, [r7, #4]
 801982e:	781b      	ldrb	r3, [r3, #0]
 8019830:	2b00      	cmp	r3, #0
 8019832:	d13e      	bne.n	80198b2 <USBD_LL_Init+0x8e>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8019834:	4a21      	ldr	r2, [pc, #132]	; (80198bc <USBD_LL_Init+0x98>)
 8019836:	687b      	ldr	r3, [r7, #4]
 8019838:	f8c2 3404 	str.w	r3, [r2, #1028]	; 0x404
  pdev->pData = &hpcd_USB_OTG_FS;
 801983c:	687b      	ldr	r3, [r7, #4]
 801983e:	4a1f      	ldr	r2, [pc, #124]	; (80198bc <USBD_LL_Init+0x98>)
 8019840:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8019844:	4b1d      	ldr	r3, [pc, #116]	; (80198bc <USBD_LL_Init+0x98>)
 8019846:	4a1e      	ldr	r2, [pc, #120]	; (80198c0 <USBD_LL_Init+0x9c>)
 8019848:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 9;
 801984a:	4b1c      	ldr	r3, [pc, #112]	; (80198bc <USBD_LL_Init+0x98>)
 801984c:	2209      	movs	r2, #9
 801984e:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8019850:	4b1a      	ldr	r3, [pc, #104]	; (80198bc <USBD_LL_Init+0x98>)
 8019852:	2202      	movs	r2, #2
 8019854:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8019856:	4b19      	ldr	r3, [pc, #100]	; (80198bc <USBD_LL_Init+0x98>)
 8019858:	2200      	movs	r2, #0
 801985a:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 801985c:	4b17      	ldr	r3, [pc, #92]	; (80198bc <USBD_LL_Init+0x98>)
 801985e:	2202      	movs	r2, #2
 8019860:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8019862:	4b16      	ldr	r3, [pc, #88]	; (80198bc <USBD_LL_Init+0x98>)
 8019864:	2200      	movs	r2, #0
 8019866:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8019868:	4b14      	ldr	r3, [pc, #80]	; (80198bc <USBD_LL_Init+0x98>)
 801986a:	2200      	movs	r2, #0
 801986c:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 801986e:	4b13      	ldr	r3, [pc, #76]	; (80198bc <USBD_LL_Init+0x98>)
 8019870:	2200      	movs	r2, #0
 8019872:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = DISABLE;
 8019874:	4b11      	ldr	r3, [pc, #68]	; (80198bc <USBD_LL_Init+0x98>)
 8019876:	2200      	movs	r2, #0
 8019878:	629a      	str	r2, [r3, #40]	; 0x28
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 801987a:	4b10      	ldr	r3, [pc, #64]	; (80198bc <USBD_LL_Init+0x98>)
 801987c:	2200      	movs	r2, #0
 801987e:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8019880:	4b0e      	ldr	r3, [pc, #56]	; (80198bc <USBD_LL_Init+0x98>)
 8019882:	2200      	movs	r2, #0
 8019884:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8019886:	480d      	ldr	r0, [pc, #52]	; (80198bc <USBD_LL_Init+0x98>)
 8019888:	f7ef f82c 	bl	80088e4 <HAL_PCD_Init>
 801988c:	4603      	mov	r3, r0
 801988e:	2b00      	cmp	r3, #0
 8019890:	d001      	beq.n	8019896 <USBD_LL_Init+0x72>
  {
    Error_Handler( );
 8019892:	f7ea fda7 	bl	80043e4 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8019896:	2180      	movs	r1, #128	; 0x80
 8019898:	4808      	ldr	r0, [pc, #32]	; (80198bc <USBD_LL_Init+0x98>)
 801989a:	f7f0 f9ea 	bl	8009c72 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 801989e:	2240      	movs	r2, #64	; 0x40
 80198a0:	2100      	movs	r1, #0
 80198a2:	4806      	ldr	r0, [pc, #24]	; (80198bc <USBD_LL_Init+0x98>)
 80198a4:	f7f0 f99e 	bl	8009be4 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 80198a8:	2280      	movs	r2, #128	; 0x80
 80198aa:	2101      	movs	r1, #1
 80198ac:	4803      	ldr	r0, [pc, #12]	; (80198bc <USBD_LL_Init+0x98>)
 80198ae:	f7f0 f999 	bl	8009be4 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 80198b2:	2300      	movs	r3, #0
}
 80198b4:	4618      	mov	r0, r3
 80198b6:	3708      	adds	r7, #8
 80198b8:	46bd      	mov	sp, r7
 80198ba:	bd80      	pop	{r7, pc}
 80198bc:	24045340 	.word	0x24045340
 80198c0:	40080000 	.word	0x40080000

080198c4 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 80198c4:	b580      	push	{r7, lr}
 80198c6:	b084      	sub	sp, #16
 80198c8:	af00      	add	r7, sp, #0
 80198ca:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80198cc:	2300      	movs	r3, #0
 80198ce:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80198d0:	2300      	movs	r3, #0
 80198d2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 80198d4:	687b      	ldr	r3, [r7, #4]
 80198d6:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80198da:	4618      	mov	r0, r3
 80198dc:	f7ef f926 	bl	8008b2c <HAL_PCD_Start>
 80198e0:	4603      	mov	r3, r0
 80198e2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80198e4:	7bfb      	ldrb	r3, [r7, #15]
 80198e6:	4618      	mov	r0, r3
 80198e8:	f000 f94a 	bl	8019b80 <USBD_Get_USB_Status>
 80198ec:	4603      	mov	r3, r0
 80198ee:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80198f0:	7bbb      	ldrb	r3, [r7, #14]
}
 80198f2:	4618      	mov	r0, r3
 80198f4:	3710      	adds	r7, #16
 80198f6:	46bd      	mov	sp, r7
 80198f8:	bd80      	pop	{r7, pc}

080198fa <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 80198fa:	b580      	push	{r7, lr}
 80198fc:	b084      	sub	sp, #16
 80198fe:	af00      	add	r7, sp, #0
 8019900:	6078      	str	r0, [r7, #4]
 8019902:	4608      	mov	r0, r1
 8019904:	4611      	mov	r1, r2
 8019906:	461a      	mov	r2, r3
 8019908:	4603      	mov	r3, r0
 801990a:	70fb      	strb	r3, [r7, #3]
 801990c:	460b      	mov	r3, r1
 801990e:	70bb      	strb	r3, [r7, #2]
 8019910:	4613      	mov	r3, r2
 8019912:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8019914:	2300      	movs	r3, #0
 8019916:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8019918:	2300      	movs	r3, #0
 801991a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 801991c:	687b      	ldr	r3, [r7, #4]
 801991e:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8019922:	78bb      	ldrb	r3, [r7, #2]
 8019924:	883a      	ldrh	r2, [r7, #0]
 8019926:	78f9      	ldrb	r1, [r7, #3]
 8019928:	f7ef fd37 	bl	800939a <HAL_PCD_EP_Open>
 801992c:	4603      	mov	r3, r0
 801992e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8019930:	7bfb      	ldrb	r3, [r7, #15]
 8019932:	4618      	mov	r0, r3
 8019934:	f000 f924 	bl	8019b80 <USBD_Get_USB_Status>
 8019938:	4603      	mov	r3, r0
 801993a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801993c:	7bbb      	ldrb	r3, [r7, #14]
}
 801993e:	4618      	mov	r0, r3
 8019940:	3710      	adds	r7, #16
 8019942:	46bd      	mov	sp, r7
 8019944:	bd80      	pop	{r7, pc}

08019946 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8019946:	b580      	push	{r7, lr}
 8019948:	b084      	sub	sp, #16
 801994a:	af00      	add	r7, sp, #0
 801994c:	6078      	str	r0, [r7, #4]
 801994e:	460b      	mov	r3, r1
 8019950:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8019952:	2300      	movs	r3, #0
 8019954:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8019956:	2300      	movs	r3, #0
 8019958:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 801995a:	687b      	ldr	r3, [r7, #4]
 801995c:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8019960:	78fa      	ldrb	r2, [r7, #3]
 8019962:	4611      	mov	r1, r2
 8019964:	4618      	mov	r0, r3
 8019966:	f7ef fd80 	bl	800946a <HAL_PCD_EP_Close>
 801996a:	4603      	mov	r3, r0
 801996c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801996e:	7bfb      	ldrb	r3, [r7, #15]
 8019970:	4618      	mov	r0, r3
 8019972:	f000 f905 	bl	8019b80 <USBD_Get_USB_Status>
 8019976:	4603      	mov	r3, r0
 8019978:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801997a:	7bbb      	ldrb	r3, [r7, #14]
}
 801997c:	4618      	mov	r0, r3
 801997e:	3710      	adds	r7, #16
 8019980:	46bd      	mov	sp, r7
 8019982:	bd80      	pop	{r7, pc}

08019984 <USBD_LL_FlushEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_FlushEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8019984:	b580      	push	{r7, lr}
 8019986:	b084      	sub	sp, #16
 8019988:	af00      	add	r7, sp, #0
 801998a:	6078      	str	r0, [r7, #4]
 801998c:	460b      	mov	r3, r1
 801998e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8019990:	2300      	movs	r3, #0
 8019992:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8019994:	2300      	movs	r3, #0
 8019996:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Flush(pdev->pData, ep_addr);
 8019998:	687b      	ldr	r3, [r7, #4]
 801999a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 801999e:	78fa      	ldrb	r2, [r7, #3]
 80199a0:	4611      	mov	r1, r2
 80199a2:	4618      	mov	r0, r3
 80199a4:	f7ef ff12 	bl	80097cc <HAL_PCD_EP_Flush>
 80199a8:	4603      	mov	r3, r0
 80199aa:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80199ac:	7bfb      	ldrb	r3, [r7, #15]
 80199ae:	4618      	mov	r0, r3
 80199b0:	f000 f8e6 	bl	8019b80 <USBD_Get_USB_Status>
 80199b4:	4603      	mov	r3, r0
 80199b6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80199b8:	7bbb      	ldrb	r3, [r7, #14]
}
 80199ba:	4618      	mov	r0, r3
 80199bc:	3710      	adds	r7, #16
 80199be:	46bd      	mov	sp, r7
 80199c0:	bd80      	pop	{r7, pc}

080199c2 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80199c2:	b580      	push	{r7, lr}
 80199c4:	b084      	sub	sp, #16
 80199c6:	af00      	add	r7, sp, #0
 80199c8:	6078      	str	r0, [r7, #4]
 80199ca:	460b      	mov	r3, r1
 80199cc:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80199ce:	2300      	movs	r3, #0
 80199d0:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80199d2:	2300      	movs	r3, #0
 80199d4:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 80199d6:	687b      	ldr	r3, [r7, #4]
 80199d8:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80199dc:	78fa      	ldrb	r2, [r7, #3]
 80199de:	4611      	mov	r1, r2
 80199e0:	4618      	mov	r0, r3
 80199e2:	f7ef fe39 	bl	8009658 <HAL_PCD_EP_SetStall>
 80199e6:	4603      	mov	r3, r0
 80199e8:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80199ea:	7bfb      	ldrb	r3, [r7, #15]
 80199ec:	4618      	mov	r0, r3
 80199ee:	f000 f8c7 	bl	8019b80 <USBD_Get_USB_Status>
 80199f2:	4603      	mov	r3, r0
 80199f4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80199f6:	7bbb      	ldrb	r3, [r7, #14]
}
 80199f8:	4618      	mov	r0, r3
 80199fa:	3710      	adds	r7, #16
 80199fc:	46bd      	mov	sp, r7
 80199fe:	bd80      	pop	{r7, pc}

08019a00 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8019a00:	b580      	push	{r7, lr}
 8019a02:	b084      	sub	sp, #16
 8019a04:	af00      	add	r7, sp, #0
 8019a06:	6078      	str	r0, [r7, #4]
 8019a08:	460b      	mov	r3, r1
 8019a0a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8019a0c:	2300      	movs	r3, #0
 8019a0e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8019a10:	2300      	movs	r3, #0
 8019a12:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8019a14:	687b      	ldr	r3, [r7, #4]
 8019a16:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8019a1a:	78fa      	ldrb	r2, [r7, #3]
 8019a1c:	4611      	mov	r1, r2
 8019a1e:	4618      	mov	r0, r3
 8019a20:	f7ef fe7e 	bl	8009720 <HAL_PCD_EP_ClrStall>
 8019a24:	4603      	mov	r3, r0
 8019a26:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8019a28:	7bfb      	ldrb	r3, [r7, #15]
 8019a2a:	4618      	mov	r0, r3
 8019a2c:	f000 f8a8 	bl	8019b80 <USBD_Get_USB_Status>
 8019a30:	4603      	mov	r3, r0
 8019a32:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8019a34:	7bbb      	ldrb	r3, [r7, #14]
}
 8019a36:	4618      	mov	r0, r3
 8019a38:	3710      	adds	r7, #16
 8019a3a:	46bd      	mov	sp, r7
 8019a3c:	bd80      	pop	{r7, pc}

08019a3e <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8019a3e:	b480      	push	{r7}
 8019a40:	b085      	sub	sp, #20
 8019a42:	af00      	add	r7, sp, #0
 8019a44:	6078      	str	r0, [r7, #4]
 8019a46:	460b      	mov	r3, r1
 8019a48:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8019a4a:	687b      	ldr	r3, [r7, #4]
 8019a4c:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8019a50:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8019a52:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8019a56:	2b00      	cmp	r3, #0
 8019a58:	da0b      	bge.n	8019a72 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8019a5a:	78fb      	ldrb	r3, [r7, #3]
 8019a5c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8019a60:	68f9      	ldr	r1, [r7, #12]
 8019a62:	4613      	mov	r3, r2
 8019a64:	00db      	lsls	r3, r3, #3
 8019a66:	1a9b      	subs	r3, r3, r2
 8019a68:	009b      	lsls	r3, r3, #2
 8019a6a:	440b      	add	r3, r1
 8019a6c:	333e      	adds	r3, #62	; 0x3e
 8019a6e:	781b      	ldrb	r3, [r3, #0]
 8019a70:	e00b      	b.n	8019a8a <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8019a72:	78fb      	ldrb	r3, [r7, #3]
 8019a74:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8019a78:	68f9      	ldr	r1, [r7, #12]
 8019a7a:	4613      	mov	r3, r2
 8019a7c:	00db      	lsls	r3, r3, #3
 8019a7e:	1a9b      	subs	r3, r3, r2
 8019a80:	009b      	lsls	r3, r3, #2
 8019a82:	440b      	add	r3, r1
 8019a84:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8019a88:	781b      	ldrb	r3, [r3, #0]
  }
}
 8019a8a:	4618      	mov	r0, r3
 8019a8c:	3714      	adds	r7, #20
 8019a8e:	46bd      	mov	sp, r7
 8019a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019a94:	4770      	bx	lr

08019a96 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8019a96:	b580      	push	{r7, lr}
 8019a98:	b084      	sub	sp, #16
 8019a9a:	af00      	add	r7, sp, #0
 8019a9c:	6078      	str	r0, [r7, #4]
 8019a9e:	460b      	mov	r3, r1
 8019aa0:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8019aa2:	2300      	movs	r3, #0
 8019aa4:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8019aa6:	2300      	movs	r3, #0
 8019aa8:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8019aaa:	687b      	ldr	r3, [r7, #4]
 8019aac:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8019ab0:	78fa      	ldrb	r2, [r7, #3]
 8019ab2:	4611      	mov	r1, r2
 8019ab4:	4618      	mov	r0, r3
 8019ab6:	f7ef fc4b 	bl	8009350 <HAL_PCD_SetAddress>
 8019aba:	4603      	mov	r3, r0
 8019abc:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8019abe:	7bfb      	ldrb	r3, [r7, #15]
 8019ac0:	4618      	mov	r0, r3
 8019ac2:	f000 f85d 	bl	8019b80 <USBD_Get_USB_Status>
 8019ac6:	4603      	mov	r3, r0
 8019ac8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8019aca:	7bbb      	ldrb	r3, [r7, #14]
}
 8019acc:	4618      	mov	r0, r3
 8019ace:	3710      	adds	r7, #16
 8019ad0:	46bd      	mov	sp, r7
 8019ad2:	bd80      	pop	{r7, pc}

08019ad4 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8019ad4:	b580      	push	{r7, lr}
 8019ad6:	b086      	sub	sp, #24
 8019ad8:	af00      	add	r7, sp, #0
 8019ada:	60f8      	str	r0, [r7, #12]
 8019adc:	607a      	str	r2, [r7, #4]
 8019ade:	603b      	str	r3, [r7, #0]
 8019ae0:	460b      	mov	r3, r1
 8019ae2:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8019ae4:	2300      	movs	r3, #0
 8019ae6:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8019ae8:	2300      	movs	r3, #0
 8019aea:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8019aec:	68fb      	ldr	r3, [r7, #12]
 8019aee:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8019af2:	7af9      	ldrb	r1, [r7, #11]
 8019af4:	683b      	ldr	r3, [r7, #0]
 8019af6:	687a      	ldr	r2, [r7, #4]
 8019af8:	f7ef fd64 	bl	80095c4 <HAL_PCD_EP_Transmit>
 8019afc:	4603      	mov	r3, r0
 8019afe:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8019b00:	7dfb      	ldrb	r3, [r7, #23]
 8019b02:	4618      	mov	r0, r3
 8019b04:	f000 f83c 	bl	8019b80 <USBD_Get_USB_Status>
 8019b08:	4603      	mov	r3, r0
 8019b0a:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8019b0c:	7dbb      	ldrb	r3, [r7, #22]
}
 8019b0e:	4618      	mov	r0, r3
 8019b10:	3718      	adds	r7, #24
 8019b12:	46bd      	mov	sp, r7
 8019b14:	bd80      	pop	{r7, pc}

08019b16 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8019b16:	b580      	push	{r7, lr}
 8019b18:	b086      	sub	sp, #24
 8019b1a:	af00      	add	r7, sp, #0
 8019b1c:	60f8      	str	r0, [r7, #12]
 8019b1e:	607a      	str	r2, [r7, #4]
 8019b20:	603b      	str	r3, [r7, #0]
 8019b22:	460b      	mov	r3, r1
 8019b24:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8019b26:	2300      	movs	r3, #0
 8019b28:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8019b2a:	2300      	movs	r3, #0
 8019b2c:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8019b2e:	68fb      	ldr	r3, [r7, #12]
 8019b30:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8019b34:	7af9      	ldrb	r1, [r7, #11]
 8019b36:	683b      	ldr	r3, [r7, #0]
 8019b38:	687a      	ldr	r2, [r7, #4]
 8019b3a:	f7ef fce0 	bl	80094fe <HAL_PCD_EP_Receive>
 8019b3e:	4603      	mov	r3, r0
 8019b40:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8019b42:	7dfb      	ldrb	r3, [r7, #23]
 8019b44:	4618      	mov	r0, r3
 8019b46:	f000 f81b 	bl	8019b80 <USBD_Get_USB_Status>
 8019b4a:	4603      	mov	r3, r0
 8019b4c:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8019b4e:	7dbb      	ldrb	r3, [r7, #22]
}
 8019b50:	4618      	mov	r0, r3
 8019b52:	3718      	adds	r7, #24
 8019b54:	46bd      	mov	sp, r7
 8019b56:	bd80      	pop	{r7, pc}

08019b58 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8019b58:	b580      	push	{r7, lr}
 8019b5a:	b082      	sub	sp, #8
 8019b5c:	af00      	add	r7, sp, #0
 8019b5e:	6078      	str	r0, [r7, #4]
 8019b60:	460b      	mov	r3, r1
 8019b62:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8019b64:	687b      	ldr	r3, [r7, #4]
 8019b66:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8019b6a:	78fa      	ldrb	r2, [r7, #3]
 8019b6c:	4611      	mov	r1, r2
 8019b6e:	4618      	mov	r0, r3
 8019b70:	f7ef fd10 	bl	8009594 <HAL_PCD_EP_GetRxCount>
 8019b74:	4603      	mov	r3, r0
}
 8019b76:	4618      	mov	r0, r3
 8019b78:	3708      	adds	r7, #8
 8019b7a:	46bd      	mov	sp, r7
 8019b7c:	bd80      	pop	{r7, pc}
	...

08019b80 <USBD_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8019b80:	b480      	push	{r7}
 8019b82:	b085      	sub	sp, #20
 8019b84:	af00      	add	r7, sp, #0
 8019b86:	4603      	mov	r3, r0
 8019b88:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8019b8a:	2300      	movs	r3, #0
 8019b8c:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8019b8e:	79fb      	ldrb	r3, [r7, #7]
 8019b90:	2b03      	cmp	r3, #3
 8019b92:	d817      	bhi.n	8019bc4 <USBD_Get_USB_Status+0x44>
 8019b94:	a201      	add	r2, pc, #4	; (adr r2, 8019b9c <USBD_Get_USB_Status+0x1c>)
 8019b96:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8019b9a:	bf00      	nop
 8019b9c:	08019bad 	.word	0x08019bad
 8019ba0:	08019bb3 	.word	0x08019bb3
 8019ba4:	08019bb9 	.word	0x08019bb9
 8019ba8:	08019bbf 	.word	0x08019bbf
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8019bac:	2300      	movs	r3, #0
 8019bae:	73fb      	strb	r3, [r7, #15]
    break;
 8019bb0:	e00b      	b.n	8019bca <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8019bb2:	2303      	movs	r3, #3
 8019bb4:	73fb      	strb	r3, [r7, #15]
    break;
 8019bb6:	e008      	b.n	8019bca <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8019bb8:	2301      	movs	r3, #1
 8019bba:	73fb      	strb	r3, [r7, #15]
    break;
 8019bbc:	e005      	b.n	8019bca <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8019bbe:	2303      	movs	r3, #3
 8019bc0:	73fb      	strb	r3, [r7, #15]
    break;
 8019bc2:	e002      	b.n	8019bca <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8019bc4:	2303      	movs	r3, #3
 8019bc6:	73fb      	strb	r3, [r7, #15]
    break;
 8019bc8:	bf00      	nop
  }
  return usb_status;
 8019bca:	7bfb      	ldrb	r3, [r7, #15]
}
 8019bcc:	4618      	mov	r0, r3
 8019bce:	3714      	adds	r7, #20
 8019bd0:	46bd      	mov	sp, r7
 8019bd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019bd6:	4770      	bx	lr

08019bd8 <pow>:
 8019bd8:	b570      	push	{r4, r5, r6, lr}
 8019bda:	ed2d 8b0a 	vpush	{d8-d12}
 8019bde:	eeb0 9b40 	vmov.f64	d9, d0
 8019be2:	eeb0 8b41 	vmov.f64	d8, d1
 8019be6:	4c8c      	ldr	r4, [pc, #560]	; (8019e18 <pow+0x240>)
 8019be8:	b08a      	sub	sp, #40	; 0x28
 8019bea:	f000 f925 	bl	8019e38 <__ieee754_pow>
 8019bee:	f994 3000 	ldrsb.w	r3, [r4]
 8019bf2:	eeb0 ab40 	vmov.f64	d10, d0
 8019bf6:	1c5a      	adds	r2, r3, #1
 8019bf8:	4626      	mov	r6, r4
 8019bfa:	d04b      	beq.n	8019c94 <pow+0xbc>
 8019bfc:	eeb4 8b48 	vcmp.f64	d8, d8
 8019c00:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019c04:	d646      	bvs.n	8019c94 <pow+0xbc>
 8019c06:	eeb4 9b49 	vcmp.f64	d9, d9
 8019c0a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019c0e:	d719      	bvc.n	8019c44 <pow+0x6c>
 8019c10:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8019c14:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019c18:	d13c      	bne.n	8019c94 <pow+0xbc>
 8019c1a:	2201      	movs	r2, #1
 8019c1c:	9200      	str	r2, [sp, #0]
 8019c1e:	497f      	ldr	r1, [pc, #508]	; (8019e1c <pow+0x244>)
 8019c20:	4a7f      	ldr	r2, [pc, #508]	; (8019e20 <pow+0x248>)
 8019c22:	9201      	str	r2, [sp, #4]
 8019c24:	2000      	movs	r0, #0
 8019c26:	2200      	movs	r2, #0
 8019c28:	2b02      	cmp	r3, #2
 8019c2a:	9208      	str	r2, [sp, #32]
 8019c2c:	ed8d 9b02 	vstr	d9, [sp, #8]
 8019c30:	ed8d 8b04 	vstr	d8, [sp, #16]
 8019c34:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8019c38:	d02a      	beq.n	8019c90 <pow+0xb8>
 8019c3a:	4668      	mov	r0, sp
 8019c3c:	f000 fc96 	bl	801a56c <matherr>
 8019c40:	bb00      	cbnz	r0, 8019c84 <pow+0xac>
 8019c42:	e04e      	b.n	8019ce2 <pow+0x10a>
 8019c44:	ed9f bb72 	vldr	d11, [pc, #456]	; 8019e10 <pow+0x238>
 8019c48:	eeb4 9b4b 	vcmp.f64	d9, d11
 8019c4c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019c50:	eeb0 cb4b 	vmov.f64	d12, d11
 8019c54:	d14a      	bne.n	8019cec <pow+0x114>
 8019c56:	eeb4 8b4b 	vcmp.f64	d8, d11
 8019c5a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019c5e:	d11f      	bne.n	8019ca0 <pow+0xc8>
 8019c60:	2201      	movs	r2, #1
 8019c62:	9200      	str	r2, [sp, #0]
 8019c64:	4a6e      	ldr	r2, [pc, #440]	; (8019e20 <pow+0x248>)
 8019c66:	9201      	str	r2, [sp, #4]
 8019c68:	2200      	movs	r2, #0
 8019c6a:	9208      	str	r2, [sp, #32]
 8019c6c:	ed8d 9b02 	vstr	d9, [sp, #8]
 8019c70:	ed8d 8b04 	vstr	d8, [sp, #16]
 8019c74:	ed8d bb06 	vstr	d11, [sp, #24]
 8019c78:	2b00      	cmp	r3, #0
 8019c7a:	d0de      	beq.n	8019c3a <pow+0x62>
 8019c7c:	4b67      	ldr	r3, [pc, #412]	; (8019e1c <pow+0x244>)
 8019c7e:	2200      	movs	r2, #0
 8019c80:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8019c84:	9b08      	ldr	r3, [sp, #32]
 8019c86:	b11b      	cbz	r3, 8019c90 <pow+0xb8>
 8019c88:	f000 fd98 	bl	801a7bc <__errno>
 8019c8c:	9b08      	ldr	r3, [sp, #32]
 8019c8e:	6003      	str	r3, [r0, #0]
 8019c90:	ed9d ab06 	vldr	d10, [sp, #24]
 8019c94:	eeb0 0b4a 	vmov.f64	d0, d10
 8019c98:	b00a      	add	sp, #40	; 0x28
 8019c9a:	ecbd 8b0a 	vpop	{d8-d12}
 8019c9e:	bd70      	pop	{r4, r5, r6, pc}
 8019ca0:	eeb0 0b48 	vmov.f64	d0, d8
 8019ca4:	f000 fc5a 	bl	801a55c <finite>
 8019ca8:	2800      	cmp	r0, #0
 8019caa:	d0f3      	beq.n	8019c94 <pow+0xbc>
 8019cac:	eeb5 8bc0 	vcmpe.f64	d8, #0.0
 8019cb0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019cb4:	d5ee      	bpl.n	8019c94 <pow+0xbc>
 8019cb6:	2301      	movs	r3, #1
 8019cb8:	9300      	str	r3, [sp, #0]
 8019cba:	4b59      	ldr	r3, [pc, #356]	; (8019e20 <pow+0x248>)
 8019cbc:	9301      	str	r3, [sp, #4]
 8019cbe:	2300      	movs	r3, #0
 8019cc0:	9308      	str	r3, [sp, #32]
 8019cc2:	f994 3000 	ldrsb.w	r3, [r4]
 8019cc6:	ed8d 9b02 	vstr	d9, [sp, #8]
 8019cca:	ed8d 8b04 	vstr	d8, [sp, #16]
 8019cce:	b913      	cbnz	r3, 8019cd6 <pow+0xfe>
 8019cd0:	ed8d bb06 	vstr	d11, [sp, #24]
 8019cd4:	e7b1      	b.n	8019c3a <pow+0x62>
 8019cd6:	4953      	ldr	r1, [pc, #332]	; (8019e24 <pow+0x24c>)
 8019cd8:	2000      	movs	r0, #0
 8019cda:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8019cde:	2b02      	cmp	r3, #2
 8019ce0:	d1ab      	bne.n	8019c3a <pow+0x62>
 8019ce2:	f000 fd6b 	bl	801a7bc <__errno>
 8019ce6:	2321      	movs	r3, #33	; 0x21
 8019ce8:	6003      	str	r3, [r0, #0]
 8019cea:	e7cb      	b.n	8019c84 <pow+0xac>
 8019cec:	f000 fc36 	bl	801a55c <finite>
 8019cf0:	4605      	mov	r5, r0
 8019cf2:	2800      	cmp	r0, #0
 8019cf4:	d164      	bne.n	8019dc0 <pow+0x1e8>
 8019cf6:	eeb0 0b49 	vmov.f64	d0, d9
 8019cfa:	f000 fc2f 	bl	801a55c <finite>
 8019cfe:	2800      	cmp	r0, #0
 8019d00:	d05e      	beq.n	8019dc0 <pow+0x1e8>
 8019d02:	eeb0 0b48 	vmov.f64	d0, d8
 8019d06:	f000 fc29 	bl	801a55c <finite>
 8019d0a:	2800      	cmp	r0, #0
 8019d0c:	d058      	beq.n	8019dc0 <pow+0x1e8>
 8019d0e:	eeb4 ab4a 	vcmp.f64	d10, d10
 8019d12:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019d16:	f994 3000 	ldrsb.w	r3, [r4]
 8019d1a:	4a41      	ldr	r2, [pc, #260]	; (8019e20 <pow+0x248>)
 8019d1c:	d70e      	bvc.n	8019d3c <pow+0x164>
 8019d1e:	2101      	movs	r1, #1
 8019d20:	e9cd 1200 	strd	r1, r2, [sp]
 8019d24:	9508      	str	r5, [sp, #32]
 8019d26:	ed8d 9b02 	vstr	d9, [sp, #8]
 8019d2a:	ed8d 8b04 	vstr	d8, [sp, #16]
 8019d2e:	2b00      	cmp	r3, #0
 8019d30:	d0ce      	beq.n	8019cd0 <pow+0xf8>
 8019d32:	ee8b 7b0b 	vdiv.f64	d7, d11, d11
 8019d36:	ed8d 7b06 	vstr	d7, [sp, #24]
 8019d3a:	e7d0      	b.n	8019cde <pow+0x106>
 8019d3c:	2103      	movs	r1, #3
 8019d3e:	ed8d 8b04 	vstr	d8, [sp, #16]
 8019d42:	eeb6 7b00 	vmov.f64	d7, #96	; 0x3f000000  0.5
 8019d46:	ee28 8b07 	vmul.f64	d8, d8, d7
 8019d4a:	e9cd 1200 	strd	r1, r2, [sp]
 8019d4e:	9508      	str	r5, [sp, #32]
 8019d50:	ed8d 9b02 	vstr	d9, [sp, #8]
 8019d54:	b9fb      	cbnz	r3, 8019d96 <pow+0x1be>
 8019d56:	eeb5 9bc0 	vcmpe.f64	d9, #0.0
 8019d5a:	4b33      	ldr	r3, [pc, #204]	; (8019e28 <pow+0x250>)
 8019d5c:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 8019d60:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019d64:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8019d68:	d54b      	bpl.n	8019e02 <pow+0x22a>
 8019d6a:	eeb0 0b48 	vmov.f64	d0, d8
 8019d6e:	f000 fc07 	bl	801a580 <rint>
 8019d72:	eeb4 0b48 	vcmp.f64	d0, d8
 8019d76:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019d7a:	d004      	beq.n	8019d86 <pow+0x1ae>
 8019d7c:	4b2b      	ldr	r3, [pc, #172]	; (8019e2c <pow+0x254>)
 8019d7e:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 8019d82:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8019d86:	f996 3000 	ldrsb.w	r3, [r6]
 8019d8a:	2b02      	cmp	r3, #2
 8019d8c:	d139      	bne.n	8019e02 <pow+0x22a>
 8019d8e:	f000 fd15 	bl	801a7bc <__errno>
 8019d92:	2322      	movs	r3, #34	; 0x22
 8019d94:	e7a8      	b.n	8019ce8 <pow+0x110>
 8019d96:	4b26      	ldr	r3, [pc, #152]	; (8019e30 <pow+0x258>)
 8019d98:	eeb5 9bc0 	vcmpe.f64	d9, #0.0
 8019d9c:	2200      	movs	r2, #0
 8019d9e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019da2:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8019da6:	d5ee      	bpl.n	8019d86 <pow+0x1ae>
 8019da8:	eeb0 0b48 	vmov.f64	d0, d8
 8019dac:	f000 fbe8 	bl	801a580 <rint>
 8019db0:	eeb4 0b48 	vcmp.f64	d0, d8
 8019db4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019db8:	d0e5      	beq.n	8019d86 <pow+0x1ae>
 8019dba:	2200      	movs	r2, #0
 8019dbc:	4b19      	ldr	r3, [pc, #100]	; (8019e24 <pow+0x24c>)
 8019dbe:	e7e0      	b.n	8019d82 <pow+0x1aa>
 8019dc0:	eeb5 ab40 	vcmp.f64	d10, #0.0
 8019dc4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019dc8:	f47f af64 	bne.w	8019c94 <pow+0xbc>
 8019dcc:	eeb0 0b49 	vmov.f64	d0, d9
 8019dd0:	f000 fbc4 	bl	801a55c <finite>
 8019dd4:	2800      	cmp	r0, #0
 8019dd6:	f43f af5d 	beq.w	8019c94 <pow+0xbc>
 8019dda:	eeb0 0b48 	vmov.f64	d0, d8
 8019dde:	f000 fbbd 	bl	801a55c <finite>
 8019de2:	2800      	cmp	r0, #0
 8019de4:	f43f af56 	beq.w	8019c94 <pow+0xbc>
 8019de8:	2304      	movs	r3, #4
 8019dea:	9300      	str	r3, [sp, #0]
 8019dec:	4b0c      	ldr	r3, [pc, #48]	; (8019e20 <pow+0x248>)
 8019dee:	9301      	str	r3, [sp, #4]
 8019df0:	2300      	movs	r3, #0
 8019df2:	9308      	str	r3, [sp, #32]
 8019df4:	ed8d 9b02 	vstr	d9, [sp, #8]
 8019df8:	ed8d 8b04 	vstr	d8, [sp, #16]
 8019dfc:	ed8d cb06 	vstr	d12, [sp, #24]
 8019e00:	e7c1      	b.n	8019d86 <pow+0x1ae>
 8019e02:	4668      	mov	r0, sp
 8019e04:	f000 fbb2 	bl	801a56c <matherr>
 8019e08:	2800      	cmp	r0, #0
 8019e0a:	f47f af3b 	bne.w	8019c84 <pow+0xac>
 8019e0e:	e7be      	b.n	8019d8e <pow+0x1b6>
	...
 8019e18:	24000178 	.word	0x24000178
 8019e1c:	3ff00000 	.word	0x3ff00000
 8019e20:	0801c5ec 	.word	0x0801c5ec
 8019e24:	fff00000 	.word	0xfff00000
 8019e28:	47efffff 	.word	0x47efffff
 8019e2c:	c7efffff 	.word	0xc7efffff
 8019e30:	7ff00000 	.word	0x7ff00000
 8019e34:	00000000 	.word	0x00000000

08019e38 <__ieee754_pow>:
 8019e38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019e3c:	ec57 6b11 	vmov	r6, r7, d1
 8019e40:	ed2d 8b02 	vpush	{d8}
 8019e44:	eeb0 8b40 	vmov.f64	d8, d0
 8019e48:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 8019e4c:	ea58 0306 	orrs.w	r3, r8, r6
 8019e50:	b085      	sub	sp, #20
 8019e52:	46b9      	mov	r9, r7
 8019e54:	ee11 2a10 	vmov	r2, s2
 8019e58:	f000 8306 	beq.w	801a468 <__ieee754_pow+0x630>
 8019e5c:	ee18 aa90 	vmov	sl, s17
 8019e60:	4bb9      	ldr	r3, [pc, #740]	; (801a148 <__ieee754_pow+0x310>)
 8019e62:	f02a 4400 	bic.w	r4, sl, #2147483648	; 0x80000000
 8019e66:	429c      	cmp	r4, r3
 8019e68:	ee10 ba10 	vmov	fp, s0
 8019e6c:	dc0b      	bgt.n	8019e86 <__ieee754_pow+0x4e>
 8019e6e:	d105      	bne.n	8019e7c <__ieee754_pow+0x44>
 8019e70:	f1bb 0f00 	cmp.w	fp, #0
 8019e74:	d107      	bne.n	8019e86 <__ieee754_pow+0x4e>
 8019e76:	45a0      	cmp	r8, r4
 8019e78:	dc0d      	bgt.n	8019e96 <__ieee754_pow+0x5e>
 8019e7a:	e001      	b.n	8019e80 <__ieee754_pow+0x48>
 8019e7c:	4598      	cmp	r8, r3
 8019e7e:	dc02      	bgt.n	8019e86 <__ieee754_pow+0x4e>
 8019e80:	4598      	cmp	r8, r3
 8019e82:	d110      	bne.n	8019ea6 <__ieee754_pow+0x6e>
 8019e84:	b17a      	cbz	r2, 8019ea6 <__ieee754_pow+0x6e>
 8019e86:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 8019e8a:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8019e8e:	ea54 030b 	orrs.w	r3, r4, fp
 8019e92:	f000 82e9 	beq.w	801a468 <__ieee754_pow+0x630>
 8019e96:	48ad      	ldr	r0, [pc, #692]	; (801a14c <__ieee754_pow+0x314>)
 8019e98:	b005      	add	sp, #20
 8019e9a:	ecbd 8b02 	vpop	{d8}
 8019e9e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019ea2:	f000 bb65 	b.w	801a570 <nan>
 8019ea6:	f1ba 0f00 	cmp.w	sl, #0
 8019eaa:	da4e      	bge.n	8019f4a <__ieee754_pow+0x112>
 8019eac:	4ba8      	ldr	r3, [pc, #672]	; (801a150 <__ieee754_pow+0x318>)
 8019eae:	4598      	cmp	r8, r3
 8019eb0:	dc49      	bgt.n	8019f46 <__ieee754_pow+0x10e>
 8019eb2:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 8019eb6:	4598      	cmp	r8, r3
 8019eb8:	dd47      	ble.n	8019f4a <__ieee754_pow+0x112>
 8019eba:	ea4f 5328 	mov.w	r3, r8, asr #20
 8019ebe:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8019ec2:	2b14      	cmp	r3, #20
 8019ec4:	dd24      	ble.n	8019f10 <__ieee754_pow+0xd8>
 8019ec6:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 8019eca:	fa22 f503 	lsr.w	r5, r2, r3
 8019ece:	fa05 f303 	lsl.w	r3, r5, r3
 8019ed2:	4293      	cmp	r3, r2
 8019ed4:	d139      	bne.n	8019f4a <__ieee754_pow+0x112>
 8019ed6:	f005 0501 	and.w	r5, r5, #1
 8019eda:	f1c5 0502 	rsb	r5, r5, #2
 8019ede:	2a00      	cmp	r2, #0
 8019ee0:	d15a      	bne.n	8019f98 <__ieee754_pow+0x160>
 8019ee2:	4b99      	ldr	r3, [pc, #612]	; (801a148 <__ieee754_pow+0x310>)
 8019ee4:	4598      	cmp	r8, r3
 8019ee6:	d122      	bne.n	8019f2e <__ieee754_pow+0xf6>
 8019ee8:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 8019eec:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 8019ef0:	ea53 030b 	orrs.w	r3, r3, fp
 8019ef4:	f000 82b8 	beq.w	801a468 <__ieee754_pow+0x630>
 8019ef8:	4b96      	ldr	r3, [pc, #600]	; (801a154 <__ieee754_pow+0x31c>)
 8019efa:	429c      	cmp	r4, r3
 8019efc:	dd27      	ble.n	8019f4e <__ieee754_pow+0x116>
 8019efe:	f1b9 0f00 	cmp.w	r9, #0
 8019f02:	f280 82b4 	bge.w	801a46e <__ieee754_pow+0x636>
 8019f06:	ed9f 7b84 	vldr	d7, [pc, #528]	; 801a118 <__ieee754_pow+0x2e0>
 8019f0a:	ed8d 7b00 	vstr	d7, [sp]
 8019f0e:	e026      	b.n	8019f5e <__ieee754_pow+0x126>
 8019f10:	2a00      	cmp	r2, #0
 8019f12:	d140      	bne.n	8019f96 <__ieee754_pow+0x15e>
 8019f14:	f1c3 0314 	rsb	r3, r3, #20
 8019f18:	fa48 f503 	asr.w	r5, r8, r3
 8019f1c:	fa05 f303 	lsl.w	r3, r5, r3
 8019f20:	4543      	cmp	r3, r8
 8019f22:	f040 82aa 	bne.w	801a47a <__ieee754_pow+0x642>
 8019f26:	f005 0501 	and.w	r5, r5, #1
 8019f2a:	f1c5 0502 	rsb	r5, r5, #2
 8019f2e:	4b8a      	ldr	r3, [pc, #552]	; (801a158 <__ieee754_pow+0x320>)
 8019f30:	4598      	cmp	r8, r3
 8019f32:	d11b      	bne.n	8019f6c <__ieee754_pow+0x134>
 8019f34:	f1b9 0f00 	cmp.w	r9, #0
 8019f38:	f280 829c 	bge.w	801a474 <__ieee754_pow+0x63c>
 8019f3c:	eeb7 7b00 	vmov.f64	d7, #112	; 0x3f800000  1.0
 8019f40:	ee87 7b08 	vdiv.f64	d7, d7, d8
 8019f44:	e7e1      	b.n	8019f0a <__ieee754_pow+0xd2>
 8019f46:	2502      	movs	r5, #2
 8019f48:	e7c9      	b.n	8019ede <__ieee754_pow+0xa6>
 8019f4a:	2500      	movs	r5, #0
 8019f4c:	e7c7      	b.n	8019ede <__ieee754_pow+0xa6>
 8019f4e:	f1b9 0f00 	cmp.w	r9, #0
 8019f52:	dad8      	bge.n	8019f06 <__ieee754_pow+0xce>
 8019f54:	f087 4400 	eor.w	r4, r7, #2147483648	; 0x80000000
 8019f58:	4633      	mov	r3, r6
 8019f5a:	e9cd 3400 	strd	r3, r4, [sp]
 8019f5e:	ed9d 0b00 	vldr	d0, [sp]
 8019f62:	b005      	add	sp, #20
 8019f64:	ecbd 8b02 	vpop	{d8}
 8019f68:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019f6c:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
 8019f70:	d102      	bne.n	8019f78 <__ieee754_pow+0x140>
 8019f72:	ee28 7b08 	vmul.f64	d7, d8, d8
 8019f76:	e7c8      	b.n	8019f0a <__ieee754_pow+0xd2>
 8019f78:	4b78      	ldr	r3, [pc, #480]	; (801a15c <__ieee754_pow+0x324>)
 8019f7a:	4599      	cmp	r9, r3
 8019f7c:	d10c      	bne.n	8019f98 <__ieee754_pow+0x160>
 8019f7e:	f1ba 0f00 	cmp.w	sl, #0
 8019f82:	db09      	blt.n	8019f98 <__ieee754_pow+0x160>
 8019f84:	eeb0 0b48 	vmov.f64	d0, d8
 8019f88:	b005      	add	sp, #20
 8019f8a:	ecbd 8b02 	vpop	{d8}
 8019f8e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019f92:	f000 bad7 	b.w	801a544 <__ieee754_sqrt>
 8019f96:	2500      	movs	r5, #0
 8019f98:	eeb0 0b48 	vmov.f64	d0, d8
 8019f9c:	f000 fad5 	bl	801a54a <fabs>
 8019fa0:	ed8d 0b00 	vstr	d0, [sp]
 8019fa4:	f1bb 0f00 	cmp.w	fp, #0
 8019fa8:	d128      	bne.n	8019ffc <__ieee754_pow+0x1c4>
 8019faa:	b124      	cbz	r4, 8019fb6 <__ieee754_pow+0x17e>
 8019fac:	4b6a      	ldr	r3, [pc, #424]	; (801a158 <__ieee754_pow+0x320>)
 8019fae:	f02a 4240 	bic.w	r2, sl, #3221225472	; 0xc0000000
 8019fb2:	429a      	cmp	r2, r3
 8019fb4:	d122      	bne.n	8019ffc <__ieee754_pow+0x1c4>
 8019fb6:	f1b9 0f00 	cmp.w	r9, #0
 8019fba:	da07      	bge.n	8019fcc <__ieee754_pow+0x194>
 8019fbc:	eeb7 7b00 	vmov.f64	d7, #112	; 0x3f800000  1.0
 8019fc0:	ed9d 6b00 	vldr	d6, [sp]
 8019fc4:	ee87 7b06 	vdiv.f64	d7, d7, d6
 8019fc8:	ed8d 7b00 	vstr	d7, [sp]
 8019fcc:	f1ba 0f00 	cmp.w	sl, #0
 8019fd0:	dac5      	bge.n	8019f5e <__ieee754_pow+0x126>
 8019fd2:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 8019fd6:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8019fda:	ea54 0305 	orrs.w	r3, r4, r5
 8019fde:	d106      	bne.n	8019fee <__ieee754_pow+0x1b6>
 8019fe0:	ed9d 7b00 	vldr	d7, [sp]
 8019fe4:	ee37 7b47 	vsub.f64	d7, d7, d7
 8019fe8:	ee87 7b07 	vdiv.f64	d7, d7, d7
 8019fec:	e78d      	b.n	8019f0a <__ieee754_pow+0xd2>
 8019fee:	2d01      	cmp	r5, #1
 8019ff0:	d1b5      	bne.n	8019f5e <__ieee754_pow+0x126>
 8019ff2:	ed9d 7b00 	vldr	d7, [sp]
 8019ff6:	eeb1 7b47 	vneg.f64	d7, d7
 8019ffa:	e786      	b.n	8019f0a <__ieee754_pow+0xd2>
 8019ffc:	ea4f 7ada 	mov.w	sl, sl, lsr #31
 801a000:	f10a 3aff 	add.w	sl, sl, #4294967295
 801a004:	ea55 030a 	orrs.w	r3, r5, sl
 801a008:	d104      	bne.n	801a014 <__ieee754_pow+0x1dc>
 801a00a:	ee38 8b48 	vsub.f64	d8, d8, d8
 801a00e:	ee88 7b08 	vdiv.f64	d7, d8, d8
 801a012:	e77a      	b.n	8019f0a <__ieee754_pow+0xd2>
 801a014:	4b52      	ldr	r3, [pc, #328]	; (801a160 <__ieee754_pow+0x328>)
 801a016:	4598      	cmp	r8, r3
 801a018:	f340 80a8 	ble.w	801a16c <__ieee754_pow+0x334>
 801a01c:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 801a020:	4598      	cmp	r8, r3
 801a022:	dd0b      	ble.n	801a03c <__ieee754_pow+0x204>
 801a024:	4b4b      	ldr	r3, [pc, #300]	; (801a154 <__ieee754_pow+0x31c>)
 801a026:	429c      	cmp	r4, r3
 801a028:	dc0e      	bgt.n	801a048 <__ieee754_pow+0x210>
 801a02a:	f1b9 0f00 	cmp.w	r9, #0
 801a02e:	f6bf af6a 	bge.w	8019f06 <__ieee754_pow+0xce>
 801a032:	ed9f 7b3b 	vldr	d7, [pc, #236]	; 801a120 <__ieee754_pow+0x2e8>
 801a036:	ee27 7b07 	vmul.f64	d7, d7, d7
 801a03a:	e766      	b.n	8019f0a <__ieee754_pow+0xd2>
 801a03c:	4b49      	ldr	r3, [pc, #292]	; (801a164 <__ieee754_pow+0x32c>)
 801a03e:	429c      	cmp	r4, r3
 801a040:	ddf3      	ble.n	801a02a <__ieee754_pow+0x1f2>
 801a042:	4b45      	ldr	r3, [pc, #276]	; (801a158 <__ieee754_pow+0x320>)
 801a044:	429c      	cmp	r4, r3
 801a046:	dd03      	ble.n	801a050 <__ieee754_pow+0x218>
 801a048:	f1b9 0f00 	cmp.w	r9, #0
 801a04c:	dcf1      	bgt.n	801a032 <__ieee754_pow+0x1fa>
 801a04e:	e75a      	b.n	8019f06 <__ieee754_pow+0xce>
 801a050:	ed9d 7b00 	vldr	d7, [sp]
 801a054:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 801a058:	ed9f 5b33 	vldr	d5, [pc, #204]	; 801a128 <__ieee754_pow+0x2f0>
 801a05c:	ee37 6b46 	vsub.f64	d6, d7, d6
 801a060:	eeb5 7b00 	vmov.f64	d7, #80	; 0x3e800000  0.250
 801a064:	eeb1 3b46 	vneg.f64	d3, d6
 801a068:	eea3 5b07 	vfma.f64	d5, d3, d7
 801a06c:	eeb6 7b00 	vmov.f64	d7, #96	; 0x3f000000  0.5
 801a070:	eea5 7b46 	vfms.f64	d7, d5, d6
 801a074:	ee26 5b06 	vmul.f64	d5, d6, d6
 801a078:	ee27 5b05 	vmul.f64	d5, d7, d5
 801a07c:	ed9f 7b2c 	vldr	d7, [pc, #176]	; 801a130 <__ieee754_pow+0x2f8>
 801a080:	ee27 7b45 	vnmul.f64	d7, d7, d5
 801a084:	ed9f 5b2c 	vldr	d5, [pc, #176]	; 801a138 <__ieee754_pow+0x300>
 801a088:	eea6 7b05 	vfma.f64	d7, d6, d5
 801a08c:	ed9f 5b2c 	vldr	d5, [pc, #176]	; 801a140 <__ieee754_pow+0x308>
 801a090:	eeb0 4b47 	vmov.f64	d4, d7
 801a094:	eea6 4b05 	vfma.f64	d4, d6, d5
 801a098:	ec53 2b14 	vmov	r2, r3, d4
 801a09c:	2200      	movs	r2, #0
 801a09e:	ec43 2b14 	vmov	d4, r2, r3
 801a0a2:	eeb0 6b44 	vmov.f64	d6, d4
 801a0a6:	eea3 6b05 	vfma.f64	d6, d3, d5
 801a0aa:	ee37 7b46 	vsub.f64	d7, d7, d6
 801a0ae:	3d01      	subs	r5, #1
 801a0b0:	ea55 030a 	orrs.w	r3, r5, sl
 801a0b4:	f04f 0200 	mov.w	r2, #0
 801a0b8:	463b      	mov	r3, r7
 801a0ba:	eebf 6b00 	vmov.f64	d6, #240	; 0xbf800000 -1.0
 801a0be:	eeb7 8b00 	vmov.f64	d8, #112	; 0x3f800000  1.0
 801a0c2:	ec47 6b15 	vmov	d5, r6, r7
 801a0c6:	fe06 8b08 	vseleq.f64	d8, d6, d8
 801a0ca:	ec47 6b13 	vmov	d3, r6, r7
 801a0ce:	ec43 2b16 	vmov	d6, r2, r3
 801a0d2:	ee27 7b03 	vmul.f64	d7, d7, d3
 801a0d6:	ee35 5b46 	vsub.f64	d5, d5, d6
 801a0da:	4b23      	ldr	r3, [pc, #140]	; (801a168 <__ieee754_pow+0x330>)
 801a0dc:	eea5 7b04 	vfma.f64	d7, d5, d4
 801a0e0:	ee24 6b06 	vmul.f64	d6, d4, d6
 801a0e4:	ee37 5b06 	vadd.f64	d5, d7, d6
 801a0e8:	ee15 1a90 	vmov	r1, s11
 801a0ec:	4299      	cmp	r1, r3
 801a0ee:	ee15 2a10 	vmov	r2, s10
 801a0f2:	f340 819b 	ble.w	801a42c <__ieee754_pow+0x5f4>
 801a0f6:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 801a0fa:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 801a0fe:	4313      	orrs	r3, r2
 801a100:	f000 810a 	beq.w	801a318 <__ieee754_pow+0x4e0>
 801a104:	ed9f 7b06 	vldr	d7, [pc, #24]	; 801a120 <__ieee754_pow+0x2e8>
 801a108:	ee28 8b07 	vmul.f64	d8, d8, d7
 801a10c:	ee28 7b07 	vmul.f64	d7, d8, d7
 801a110:	e6fb      	b.n	8019f0a <__ieee754_pow+0xd2>
 801a112:	bf00      	nop
 801a114:	f3af 8000 	nop.w
	...
 801a120:	8800759c 	.word	0x8800759c
 801a124:	7e37e43c 	.word	0x7e37e43c
 801a128:	55555555 	.word	0x55555555
 801a12c:	3fd55555 	.word	0x3fd55555
 801a130:	652b82fe 	.word	0x652b82fe
 801a134:	3ff71547 	.word	0x3ff71547
 801a138:	f85ddf44 	.word	0xf85ddf44
 801a13c:	3e54ae0b 	.word	0x3e54ae0b
 801a140:	60000000 	.word	0x60000000
 801a144:	3ff71547 	.word	0x3ff71547
 801a148:	7ff00000 	.word	0x7ff00000
 801a14c:	0801c6a3 	.word	0x0801c6a3
 801a150:	433fffff 	.word	0x433fffff
 801a154:	3fefffff 	.word	0x3fefffff
 801a158:	3ff00000 	.word	0x3ff00000
 801a15c:	3fe00000 	.word	0x3fe00000
 801a160:	41e00000 	.word	0x41e00000
 801a164:	3feffffe 	.word	0x3feffffe
 801a168:	408fffff 	.word	0x408fffff
 801a16c:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
 801a170:	f280 80ce 	bge.w	801a310 <__ieee754_pow+0x4d8>
 801a174:	ed9d 6b00 	vldr	d6, [sp]
 801a178:	ed9f 7bc1 	vldr	d7, [pc, #772]	; 801a480 <__ieee754_pow+0x648>
 801a17c:	ee26 7b07 	vmul.f64	d7, d6, d7
 801a180:	ed8d 7b00 	vstr	d7, [sp]
 801a184:	9c01      	ldr	r4, [sp, #4]
 801a186:	f06f 0334 	mvn.w	r3, #52	; 0x34
 801a18a:	1521      	asrs	r1, r4, #20
 801a18c:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 801a190:	4419      	add	r1, r3
 801a192:	4be3      	ldr	r3, [pc, #908]	; (801a520 <__ieee754_pow+0x6e8>)
 801a194:	f3c4 0413 	ubfx	r4, r4, #0, #20
 801a198:	f044 507f 	orr.w	r0, r4, #1069547520	; 0x3fc00000
 801a19c:	429c      	cmp	r4, r3
 801a19e:	f440 1040 	orr.w	r0, r0, #3145728	; 0x300000
 801a1a2:	dd06      	ble.n	801a1b2 <__ieee754_pow+0x37a>
 801a1a4:	4bdf      	ldr	r3, [pc, #892]	; (801a524 <__ieee754_pow+0x6ec>)
 801a1a6:	429c      	cmp	r4, r3
 801a1a8:	f340 80b4 	ble.w	801a314 <__ieee754_pow+0x4dc>
 801a1ac:	3101      	adds	r1, #1
 801a1ae:	f5a0 1080 	sub.w	r0, r0, #1048576	; 0x100000
 801a1b2:	2400      	movs	r4, #0
 801a1b4:	e9dd 2300 	ldrd	r2, r3, [sp]
 801a1b8:	eeb7 4b00 	vmov.f64	d4, #112	; 0x3f800000  1.0
 801a1bc:	4603      	mov	r3, r0
 801a1be:	ec43 2b17 	vmov	d7, r2, r3
 801a1c2:	4bd9      	ldr	r3, [pc, #868]	; (801a528 <__ieee754_pow+0x6f0>)
 801a1c4:	ea4f 0cc4 	mov.w	ip, r4, lsl #3
 801a1c8:	4463      	add	r3, ip
 801a1ca:	ed93 5b00 	vldr	d5, [r3]
 801a1ce:	1040      	asrs	r0, r0, #1
 801a1d0:	ee37 2b45 	vsub.f64	d2, d7, d5
 801a1d4:	ee35 6b07 	vadd.f64	d6, d5, d7
 801a1d8:	ee84 1b06 	vdiv.f64	d1, d4, d6
 801a1dc:	ee22 6b01 	vmul.f64	d6, d2, d1
 801a1e0:	ed8d 6b00 	vstr	d6, [sp]
 801a1e4:	e9dd 8900 	ldrd	r8, r9, [sp]
 801a1e8:	f040 5000 	orr.w	r0, r0, #536870912	; 0x20000000
 801a1ec:	f500 2000 	add.w	r0, r0, #524288	; 0x80000
 801a1f0:	f04f 0800 	mov.w	r8, #0
 801a1f4:	eb00 4384 	add.w	r3, r0, r4, lsl #18
 801a1f8:	2200      	movs	r2, #0
 801a1fa:	ec49 8b14 	vmov	d4, r8, r9
 801a1fe:	ec43 2b16 	vmov	d6, r2, r3
 801a202:	eeb1 3b44 	vneg.f64	d3, d4
 801a206:	eea3 2b06 	vfma.f64	d2, d3, d6
 801a20a:	ee36 6b45 	vsub.f64	d6, d6, d5
 801a20e:	ee37 7b46 	vsub.f64	d7, d7, d6
 801a212:	eea3 2b07 	vfma.f64	d2, d3, d7
 801a216:	ed9d 7b00 	vldr	d7, [sp]
 801a21a:	ee22 2b01 	vmul.f64	d2, d2, d1
 801a21e:	ee27 5b07 	vmul.f64	d5, d7, d7
 801a222:	ee37 6b04 	vadd.f64	d6, d7, d4
 801a226:	ed9f 1b98 	vldr	d1, [pc, #608]	; 801a488 <__ieee754_pow+0x650>
 801a22a:	ee25 0b05 	vmul.f64	d0, d5, d5
 801a22e:	ee26 6b02 	vmul.f64	d6, d6, d2
 801a232:	ed9f 7b97 	vldr	d7, [pc, #604]	; 801a490 <__ieee754_pow+0x658>
 801a236:	eea5 7b01 	vfma.f64	d7, d5, d1
 801a23a:	ed9f 1b97 	vldr	d1, [pc, #604]	; 801a498 <__ieee754_pow+0x660>
 801a23e:	eea7 1b05 	vfma.f64	d1, d7, d5
 801a242:	ed9f 7b97 	vldr	d7, [pc, #604]	; 801a4a0 <__ieee754_pow+0x668>
 801a246:	eea1 7b05 	vfma.f64	d7, d1, d5
 801a24a:	ed9f 1b97 	vldr	d1, [pc, #604]	; 801a4a8 <__ieee754_pow+0x670>
 801a24e:	eea7 1b05 	vfma.f64	d1, d7, d5
 801a252:	ed9f 7b97 	vldr	d7, [pc, #604]	; 801a4b0 <__ieee754_pow+0x678>
 801a256:	eea1 7b05 	vfma.f64	d7, d1, d5
 801a25a:	eea0 6b07 	vfma.f64	d6, d0, d7
 801a25e:	eeb0 7b08 	vmov.f64	d7, #8	; 0x40400000  3.0
 801a262:	eeb0 5b47 	vmov.f64	d5, d7
 801a266:	eea4 5b04 	vfma.f64	d5, d4, d4
 801a26a:	ee35 5b06 	vadd.f64	d5, d5, d6
 801a26e:	ed8d 5b02 	vstr	d5, [sp, #8]
 801a272:	f8cd 8008 	str.w	r8, [sp, #8]
 801a276:	ed9d 5b02 	vldr	d5, [sp, #8]
 801a27a:	ee35 7b47 	vsub.f64	d7, d5, d7
 801a27e:	eea3 7b04 	vfma.f64	d7, d3, d4
 801a282:	ee36 7b47 	vsub.f64	d7, d6, d7
 801a286:	ed9d 6b00 	vldr	d6, [sp]
 801a28a:	ee27 7b06 	vmul.f64	d7, d7, d6
 801a28e:	eea2 7b05 	vfma.f64	d7, d2, d5
 801a292:	eeb0 6b47 	vmov.f64	d6, d7
 801a296:	eea4 6b05 	vfma.f64	d6, d4, d5
 801a29a:	ed8d 6b00 	vstr	d6, [sp]
 801a29e:	f8cd 8000 	str.w	r8, [sp]
 801a2a2:	ed9d 2b00 	vldr	d2, [sp]
 801a2a6:	eeb0 6b42 	vmov.f64	d6, d2
 801a2aa:	eea3 6b05 	vfma.f64	d6, d3, d5
 801a2ae:	ee37 7b46 	vsub.f64	d7, d7, d6
 801a2b2:	ed9f 6b81 	vldr	d6, [pc, #516]	; 801a4b8 <__ieee754_pow+0x680>
 801a2b6:	4b9d      	ldr	r3, [pc, #628]	; (801a52c <__ieee754_pow+0x6f4>)
 801a2b8:	ee27 7b06 	vmul.f64	d7, d7, d6
 801a2bc:	ed9f 6b80 	vldr	d6, [pc, #512]	; 801a4c0 <__ieee754_pow+0x688>
 801a2c0:	4463      	add	r3, ip
 801a2c2:	eea2 7b06 	vfma.f64	d7, d2, d6
 801a2c6:	ed93 6b00 	vldr	d6, [r3]
 801a2ca:	4b99      	ldr	r3, [pc, #612]	; (801a530 <__ieee754_pow+0x6f8>)
 801a2cc:	ee37 6b06 	vadd.f64	d6, d7, d6
 801a2d0:	449c      	add	ip, r3
 801a2d2:	ed9c 1b00 	vldr	d1, [ip]
 801a2d6:	eeb0 4b46 	vmov.f64	d4, d6
 801a2da:	ed9f 3b7b 	vldr	d3, [pc, #492]	; 801a4c8 <__ieee754_pow+0x690>
 801a2de:	ee07 1a90 	vmov	s15, r1
 801a2e2:	eea2 4b03 	vfma.f64	d4, d2, d3
 801a2e6:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 801a2ea:	ee34 4b01 	vadd.f64	d4, d4, d1
 801a2ee:	ee34 5b07 	vadd.f64	d5, d4, d7
 801a2f2:	ed8d 5b00 	vstr	d5, [sp]
 801a2f6:	f8cd 8000 	str.w	r8, [sp]
 801a2fa:	ed9d 4b00 	vldr	d4, [sp]
 801a2fe:	ee34 7b47 	vsub.f64	d7, d4, d7
 801a302:	ee37 7b41 	vsub.f64	d7, d7, d1
 801a306:	eea2 7b43 	vfms.f64	d7, d2, d3
 801a30a:	ee36 7b47 	vsub.f64	d7, d6, d7
 801a30e:	e6ce      	b.n	801a0ae <__ieee754_pow+0x276>
 801a310:	2300      	movs	r3, #0
 801a312:	e73a      	b.n	801a18a <__ieee754_pow+0x352>
 801a314:	2401      	movs	r4, #1
 801a316:	e74d      	b.n	801a1b4 <__ieee754_pow+0x37c>
 801a318:	ed9f 4b6d 	vldr	d4, [pc, #436]	; 801a4d0 <__ieee754_pow+0x698>
 801a31c:	ee35 5b46 	vsub.f64	d5, d5, d6
 801a320:	ee37 4b04 	vadd.f64	d4, d7, d4
 801a324:	eeb4 4bc5 	vcmpe.f64	d4, d5
 801a328:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a32c:	f73f aeea 	bgt.w	801a104 <__ieee754_pow+0x2cc>
 801a330:	4a80      	ldr	r2, [pc, #512]	; (801a534 <__ieee754_pow+0x6fc>)
 801a332:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 801a336:	4293      	cmp	r3, r2
 801a338:	f340 808e 	ble.w	801a458 <__ieee754_pow+0x620>
 801a33c:	151b      	asrs	r3, r3, #20
 801a33e:	f2a3 30fe 	subw	r0, r3, #1022	; 0x3fe
 801a342:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 801a346:	4103      	asrs	r3, r0
 801a348:	440b      	add	r3, r1
 801a34a:	f3c3 520a 	ubfx	r2, r3, #20, #11
 801a34e:	487a      	ldr	r0, [pc, #488]	; (801a538 <__ieee754_pow+0x700>)
 801a350:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 801a354:	4110      	asrs	r0, r2
 801a356:	ea23 0500 	bic.w	r5, r3, r0
 801a35a:	f3c3 0013 	ubfx	r0, r3, #0, #20
 801a35e:	2400      	movs	r4, #0
 801a360:	f440 1080 	orr.w	r0, r0, #1048576	; 0x100000
 801a364:	f1c2 0214 	rsb	r2, r2, #20
 801a368:	ec45 4b15 	vmov	d5, r4, r5
 801a36c:	4110      	asrs	r0, r2
 801a36e:	2900      	cmp	r1, #0
 801a370:	bfb8      	it	lt
 801a372:	4240      	neglt	r0, r0
 801a374:	ee36 6b45 	vsub.f64	d6, d6, d5
 801a378:	ee36 5b07 	vadd.f64	d5, d6, d7
 801a37c:	ec53 2b15 	vmov	r2, r3, d5
 801a380:	2200      	movs	r2, #0
 801a382:	ec43 2b15 	vmov	d5, r2, r3
 801a386:	ed9f 4b54 	vldr	d4, [pc, #336]	; 801a4d8 <__ieee754_pow+0x6a0>
 801a38a:	ee35 6b46 	vsub.f64	d6, d5, d6
 801a38e:	ee37 6b46 	vsub.f64	d6, d7, d6
 801a392:	ed9f 7b53 	vldr	d7, [pc, #332]	; 801a4e0 <__ieee754_pow+0x6a8>
 801a396:	ee25 7b07 	vmul.f64	d7, d5, d7
 801a39a:	eea6 7b04 	vfma.f64	d7, d6, d4
 801a39e:	ed9f 6b52 	vldr	d6, [pc, #328]	; 801a4e8 <__ieee754_pow+0x6b0>
 801a3a2:	eeb0 4b47 	vmov.f64	d4, d7
 801a3a6:	eea5 4b06 	vfma.f64	d4, d5, d6
 801a3aa:	eeb0 3b44 	vmov.f64	d3, d4
 801a3ae:	eea5 3b46 	vfms.f64	d3, d5, d6
 801a3b2:	ed9f 5b4f 	vldr	d5, [pc, #316]	; 801a4f0 <__ieee754_pow+0x6b8>
 801a3b6:	ee37 7b43 	vsub.f64	d7, d7, d3
 801a3ba:	ee24 6b04 	vmul.f64	d6, d4, d4
 801a3be:	ed9f 3b4e 	vldr	d3, [pc, #312]	; 801a4f8 <__ieee754_pow+0x6c0>
 801a3c2:	eea4 7b07 	vfma.f64	d7, d4, d7
 801a3c6:	eea6 3b05 	vfma.f64	d3, d6, d5
 801a3ca:	ed9f 5b4d 	vldr	d5, [pc, #308]	; 801a500 <__ieee754_pow+0x6c8>
 801a3ce:	eea3 5b06 	vfma.f64	d5, d3, d6
 801a3d2:	ed9f 3b4d 	vldr	d3, [pc, #308]	; 801a508 <__ieee754_pow+0x6d0>
 801a3d6:	eea5 3b06 	vfma.f64	d3, d5, d6
 801a3da:	ed9f 5b4d 	vldr	d5, [pc, #308]	; 801a510 <__ieee754_pow+0x6d8>
 801a3de:	eea3 5b06 	vfma.f64	d5, d3, d6
 801a3e2:	eeb0 3b44 	vmov.f64	d3, d4
 801a3e6:	eea5 3b46 	vfms.f64	d3, d5, d6
 801a3ea:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 801a3ee:	eeb0 6b43 	vmov.f64	d6, d3
 801a3f2:	ee24 3b03 	vmul.f64	d3, d4, d3
 801a3f6:	ee36 5b45 	vsub.f64	d5, d6, d5
 801a3fa:	ee83 6b05 	vdiv.f64	d6, d3, d5
 801a3fe:	ee36 7b47 	vsub.f64	d7, d6, d7
 801a402:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 801a406:	ee37 7b44 	vsub.f64	d7, d7, d4
 801a40a:	ee36 7b47 	vsub.f64	d7, d6, d7
 801a40e:	ed8d 7b00 	vstr	d7, [sp]
 801a412:	9901      	ldr	r1, [sp, #4]
 801a414:	eb01 5100 	add.w	r1, r1, r0, lsl #20
 801a418:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 801a41c:	da1e      	bge.n	801a45c <__ieee754_pow+0x624>
 801a41e:	eeb0 0b47 	vmov.f64	d0, d7
 801a422:	f000 f939 	bl	801a698 <scalbn>
 801a426:	ee20 7b08 	vmul.f64	d7, d0, d8
 801a42a:	e56e      	b.n	8019f0a <__ieee754_pow+0xd2>
 801a42c:	4b43      	ldr	r3, [pc, #268]	; (801a53c <__ieee754_pow+0x704>)
 801a42e:	f021 4000 	bic.w	r0, r1, #2147483648	; 0x80000000
 801a432:	4298      	cmp	r0, r3
 801a434:	f77f af7c 	ble.w	801a330 <__ieee754_pow+0x4f8>
 801a438:	4b41      	ldr	r3, [pc, #260]	; (801a540 <__ieee754_pow+0x708>)
 801a43a:	440b      	add	r3, r1
 801a43c:	4313      	orrs	r3, r2
 801a43e:	d002      	beq.n	801a446 <__ieee754_pow+0x60e>
 801a440:	ed9f 7b35 	vldr	d7, [pc, #212]	; 801a518 <__ieee754_pow+0x6e0>
 801a444:	e660      	b.n	801a108 <__ieee754_pow+0x2d0>
 801a446:	ee35 5b46 	vsub.f64	d5, d5, d6
 801a44a:	eeb4 5bc7 	vcmpe.f64	d5, d7
 801a44e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a452:	f6ff af6d 	blt.w	801a330 <__ieee754_pow+0x4f8>
 801a456:	e7f3      	b.n	801a440 <__ieee754_pow+0x608>
 801a458:	2000      	movs	r0, #0
 801a45a:	e78d      	b.n	801a378 <__ieee754_pow+0x540>
 801a45c:	e9dd 2300 	ldrd	r2, r3, [sp]
 801a460:	460b      	mov	r3, r1
 801a462:	ec43 2b10 	vmov	d0, r2, r3
 801a466:	e7de      	b.n	801a426 <__ieee754_pow+0x5ee>
 801a468:	eeb7 7b00 	vmov.f64	d7, #112	; 0x3f800000  1.0
 801a46c:	e54d      	b.n	8019f0a <__ieee754_pow+0xd2>
 801a46e:	e9cd 6700 	strd	r6, r7, [sp]
 801a472:	e574      	b.n	8019f5e <__ieee754_pow+0x126>
 801a474:	ed8d 8b00 	vstr	d8, [sp]
 801a478:	e571      	b.n	8019f5e <__ieee754_pow+0x126>
 801a47a:	4615      	mov	r5, r2
 801a47c:	e557      	b.n	8019f2e <__ieee754_pow+0xf6>
 801a47e:	bf00      	nop
 801a480:	00000000 	.word	0x00000000
 801a484:	43400000 	.word	0x43400000
 801a488:	4a454eef 	.word	0x4a454eef
 801a48c:	3fca7e28 	.word	0x3fca7e28
 801a490:	93c9db65 	.word	0x93c9db65
 801a494:	3fcd864a 	.word	0x3fcd864a
 801a498:	a91d4101 	.word	0xa91d4101
 801a49c:	3fd17460 	.word	0x3fd17460
 801a4a0:	518f264d 	.word	0x518f264d
 801a4a4:	3fd55555 	.word	0x3fd55555
 801a4a8:	db6fabff 	.word	0xdb6fabff
 801a4ac:	3fdb6db6 	.word	0x3fdb6db6
 801a4b0:	33333303 	.word	0x33333303
 801a4b4:	3fe33333 	.word	0x3fe33333
 801a4b8:	dc3a03fd 	.word	0xdc3a03fd
 801a4bc:	3feec709 	.word	0x3feec709
 801a4c0:	145b01f5 	.word	0x145b01f5
 801a4c4:	be3e2fe0 	.word	0xbe3e2fe0
 801a4c8:	e0000000 	.word	0xe0000000
 801a4cc:	3feec709 	.word	0x3feec709
 801a4d0:	652b82fe 	.word	0x652b82fe
 801a4d4:	3c971547 	.word	0x3c971547
 801a4d8:	fefa39ef 	.word	0xfefa39ef
 801a4dc:	3fe62e42 	.word	0x3fe62e42
 801a4e0:	0ca86c39 	.word	0x0ca86c39
 801a4e4:	be205c61 	.word	0xbe205c61
 801a4e8:	00000000 	.word	0x00000000
 801a4ec:	3fe62e43 	.word	0x3fe62e43
 801a4f0:	72bea4d0 	.word	0x72bea4d0
 801a4f4:	3e663769 	.word	0x3e663769
 801a4f8:	c5d26bf1 	.word	0xc5d26bf1
 801a4fc:	bebbbd41 	.word	0xbebbbd41
 801a500:	af25de2c 	.word	0xaf25de2c
 801a504:	3f11566a 	.word	0x3f11566a
 801a508:	16bebd93 	.word	0x16bebd93
 801a50c:	bf66c16c 	.word	0xbf66c16c
 801a510:	5555553e 	.word	0x5555553e
 801a514:	3fc55555 	.word	0x3fc55555
 801a518:	c2f8f359 	.word	0xc2f8f359
 801a51c:	01a56e1f 	.word	0x01a56e1f
 801a520:	0003988e 	.word	0x0003988e
 801a524:	000bb679 	.word	0x000bb679
 801a528:	0801c5f0 	.word	0x0801c5f0
 801a52c:	0801c610 	.word	0x0801c610
 801a530:	0801c600 	.word	0x0801c600
 801a534:	3fe00000 	.word	0x3fe00000
 801a538:	000fffff 	.word	0x000fffff
 801a53c:	4090cbff 	.word	0x4090cbff
 801a540:	3f6f3400 	.word	0x3f6f3400

0801a544 <__ieee754_sqrt>:
 801a544:	eeb1 0bc0 	vsqrt.f64	d0, d0
 801a548:	4770      	bx	lr

0801a54a <fabs>:
 801a54a:	ec51 0b10 	vmov	r0, r1, d0
 801a54e:	ee10 2a10 	vmov	r2, s0
 801a552:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 801a556:	ec43 2b10 	vmov	d0, r2, r3
 801a55a:	4770      	bx	lr

0801a55c <finite>:
 801a55c:	ee10 3a90 	vmov	r3, s1
 801a560:	f043 4000 	orr.w	r0, r3, #2147483648	; 0x80000000
 801a564:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 801a568:	0fc0      	lsrs	r0, r0, #31
 801a56a:	4770      	bx	lr

0801a56c <matherr>:
 801a56c:	2000      	movs	r0, #0
 801a56e:	4770      	bx	lr

0801a570 <nan>:
 801a570:	ed9f 0b01 	vldr	d0, [pc, #4]	; 801a578 <nan+0x8>
 801a574:	4770      	bx	lr
 801a576:	bf00      	nop
 801a578:	00000000 	.word	0x00000000
 801a57c:	7ff80000 	.word	0x7ff80000

0801a580 <rint>:
 801a580:	b530      	push	{r4, r5, lr}
 801a582:	b085      	sub	sp, #20
 801a584:	ed8d 0b00 	vstr	d0, [sp]
 801a588:	e9dd 2300 	ldrd	r2, r3, [sp]
 801a58c:	f3c3 510a 	ubfx	r1, r3, #20, #11
 801a590:	f2a1 30ff 	subw	r0, r1, #1023	; 0x3ff
 801a594:	2813      	cmp	r0, #19
 801a596:	ea4f 74d3 	mov.w	r4, r3, lsr #31
 801a59a:	dc5a      	bgt.n	801a652 <rint+0xd2>
 801a59c:	2800      	cmp	r0, #0
 801a59e:	da2f      	bge.n	801a600 <rint+0x80>
 801a5a0:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 801a5a4:	4311      	orrs	r1, r2
 801a5a6:	d027      	beq.n	801a5f8 <rint+0x78>
 801a5a8:	f3c3 0513 	ubfx	r5, r3, #0, #20
 801a5ac:	4315      	orrs	r5, r2
 801a5ae:	426a      	negs	r2, r5
 801a5b0:	432a      	orrs	r2, r5
 801a5b2:	0b12      	lsrs	r2, r2, #12
 801a5b4:	0c5b      	lsrs	r3, r3, #17
 801a5b6:	045b      	lsls	r3, r3, #17
 801a5b8:	f402 2200 	and.w	r2, r2, #524288	; 0x80000
 801a5bc:	e9dd 0100 	ldrd	r0, r1, [sp]
 801a5c0:	ea42 0103 	orr.w	r1, r2, r3
 801a5c4:	4b31      	ldr	r3, [pc, #196]	; (801a68c <rint+0x10c>)
 801a5c6:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 801a5ca:	ed93 6b00 	vldr	d6, [r3]
 801a5ce:	ec41 0b17 	vmov	d7, r0, r1
 801a5d2:	ee36 7b07 	vadd.f64	d7, d6, d7
 801a5d6:	ed8d 7b02 	vstr	d7, [sp, #8]
 801a5da:	ed9d 7b02 	vldr	d7, [sp, #8]
 801a5de:	ee37 7b46 	vsub.f64	d7, d7, d6
 801a5e2:	ed8d 7b00 	vstr	d7, [sp]
 801a5e6:	9b01      	ldr	r3, [sp, #4]
 801a5e8:	e9dd 0100 	ldrd	r0, r1, [sp]
 801a5ec:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 801a5f0:	ea43 71c4 	orr.w	r1, r3, r4, lsl #31
 801a5f4:	e9cd 0100 	strd	r0, r1, [sp]
 801a5f8:	ed9d 0b00 	vldr	d0, [sp]
 801a5fc:	b005      	add	sp, #20
 801a5fe:	bd30      	pop	{r4, r5, pc}
 801a600:	4923      	ldr	r1, [pc, #140]	; (801a690 <rint+0x110>)
 801a602:	4101      	asrs	r1, r0
 801a604:	ea03 0501 	and.w	r5, r3, r1
 801a608:	4315      	orrs	r5, r2
 801a60a:	d0f5      	beq.n	801a5f8 <rint+0x78>
 801a60c:	0849      	lsrs	r1, r1, #1
 801a60e:	ea03 0501 	and.w	r5, r3, r1
 801a612:	432a      	orrs	r2, r5
 801a614:	d00b      	beq.n	801a62e <rint+0xae>
 801a616:	ea23 0101 	bic.w	r1, r3, r1
 801a61a:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 801a61e:	2813      	cmp	r0, #19
 801a620:	fa43 f300 	asr.w	r3, r3, r0
 801a624:	bf0c      	ite	eq
 801a626:	f04f 4200 	moveq.w	r2, #2147483648	; 0x80000000
 801a62a:	2200      	movne	r2, #0
 801a62c:	430b      	orrs	r3, r1
 801a62e:	4619      	mov	r1, r3
 801a630:	4b16      	ldr	r3, [pc, #88]	; (801a68c <rint+0x10c>)
 801a632:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
 801a636:	ed94 6b00 	vldr	d6, [r4]
 801a63a:	4610      	mov	r0, r2
 801a63c:	ec41 0b17 	vmov	d7, r0, r1
 801a640:	ee36 7b07 	vadd.f64	d7, d6, d7
 801a644:	ed8d 7b02 	vstr	d7, [sp, #8]
 801a648:	ed9d 7b02 	vldr	d7, [sp, #8]
 801a64c:	ee37 7b46 	vsub.f64	d7, d7, d6
 801a650:	e008      	b.n	801a664 <rint+0xe4>
 801a652:	2833      	cmp	r0, #51	; 0x33
 801a654:	dd09      	ble.n	801a66a <rint+0xea>
 801a656:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
 801a65a:	d1cd      	bne.n	801a5f8 <rint+0x78>
 801a65c:	ed9d 7b00 	vldr	d7, [sp]
 801a660:	ee37 7b07 	vadd.f64	d7, d7, d7
 801a664:	ed8d 7b00 	vstr	d7, [sp]
 801a668:	e7c6      	b.n	801a5f8 <rint+0x78>
 801a66a:	f2a1 4013 	subw	r0, r1, #1043	; 0x413
 801a66e:	f04f 31ff 	mov.w	r1, #4294967295
 801a672:	40c1      	lsrs	r1, r0
 801a674:	420a      	tst	r2, r1
 801a676:	d0bf      	beq.n	801a5f8 <rint+0x78>
 801a678:	0849      	lsrs	r1, r1, #1
 801a67a:	420a      	tst	r2, r1
 801a67c:	bf1f      	itttt	ne
 801a67e:	ea22 0101 	bicne.w	r1, r2, r1
 801a682:	f04f 4280 	movne.w	r2, #1073741824	; 0x40000000
 801a686:	4102      	asrne	r2, r0
 801a688:	430a      	orrne	r2, r1
 801a68a:	e7d0      	b.n	801a62e <rint+0xae>
 801a68c:	0801c620 	.word	0x0801c620
 801a690:	000fffff 	.word	0x000fffff
 801a694:	00000000 	.word	0x00000000

0801a698 <scalbn>:
 801a698:	b500      	push	{lr}
 801a69a:	ed2d 8b02 	vpush	{d8}
 801a69e:	b083      	sub	sp, #12
 801a6a0:	ed8d 0b00 	vstr	d0, [sp]
 801a6a4:	9b01      	ldr	r3, [sp, #4]
 801a6a6:	f3c3 520a 	ubfx	r2, r3, #20, #11
 801a6aa:	b9a2      	cbnz	r2, 801a6d6 <scalbn+0x3e>
 801a6ac:	9a00      	ldr	r2, [sp, #0]
 801a6ae:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 801a6b2:	4313      	orrs	r3, r2
 801a6b4:	d03a      	beq.n	801a72c <scalbn+0x94>
 801a6b6:	ed9f 7b2e 	vldr	d7, [pc, #184]	; 801a770 <scalbn+0xd8>
 801a6ba:	4b35      	ldr	r3, [pc, #212]	; (801a790 <scalbn+0xf8>)
 801a6bc:	ee20 7b07 	vmul.f64	d7, d0, d7
 801a6c0:	4298      	cmp	r0, r3
 801a6c2:	ed8d 7b00 	vstr	d7, [sp]
 801a6c6:	da11      	bge.n	801a6ec <scalbn+0x54>
 801a6c8:	ed9f 7b2b 	vldr	d7, [pc, #172]	; 801a778 <scalbn+0xe0>
 801a6cc:	ed9d 6b00 	vldr	d6, [sp]
 801a6d0:	ee27 7b06 	vmul.f64	d7, d7, d6
 801a6d4:	e007      	b.n	801a6e6 <scalbn+0x4e>
 801a6d6:	f240 71ff 	movw	r1, #2047	; 0x7ff
 801a6da:	428a      	cmp	r2, r1
 801a6dc:	d10a      	bne.n	801a6f4 <scalbn+0x5c>
 801a6de:	ed9d 7b00 	vldr	d7, [sp]
 801a6e2:	ee37 7b07 	vadd.f64	d7, d7, d7
 801a6e6:	ed8d 7b00 	vstr	d7, [sp]
 801a6ea:	e01f      	b.n	801a72c <scalbn+0x94>
 801a6ec:	9b01      	ldr	r3, [sp, #4]
 801a6ee:	f3c3 520a 	ubfx	r2, r3, #20, #11
 801a6f2:	3a36      	subs	r2, #54	; 0x36
 801a6f4:	4402      	add	r2, r0
 801a6f6:	f240 71fe 	movw	r1, #2046	; 0x7fe
 801a6fa:	428a      	cmp	r2, r1
 801a6fc:	dd0a      	ble.n	801a714 <scalbn+0x7c>
 801a6fe:	ed9f 8b20 	vldr	d8, [pc, #128]	; 801a780 <scalbn+0xe8>
 801a702:	eeb0 0b48 	vmov.f64	d0, d8
 801a706:	ed9d 1b00 	vldr	d1, [sp]
 801a70a:	f000 f843 	bl	801a794 <copysign>
 801a70e:	ee20 7b08 	vmul.f64	d7, d0, d8
 801a712:	e7e8      	b.n	801a6e6 <scalbn+0x4e>
 801a714:	2a00      	cmp	r2, #0
 801a716:	dd10      	ble.n	801a73a <scalbn+0xa2>
 801a718:	e9dd 0100 	ldrd	r0, r1, [sp]
 801a71c:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 801a720:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 801a724:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 801a728:	e9cd 0100 	strd	r0, r1, [sp]
 801a72c:	ed9d 0b00 	vldr	d0, [sp]
 801a730:	b003      	add	sp, #12
 801a732:	ecbd 8b02 	vpop	{d8}
 801a736:	f85d fb04 	ldr.w	pc, [sp], #4
 801a73a:	f112 0f35 	cmn.w	r2, #53	; 0x35
 801a73e:	da06      	bge.n	801a74e <scalbn+0xb6>
 801a740:	f24c 3350 	movw	r3, #50000	; 0xc350
 801a744:	4298      	cmp	r0, r3
 801a746:	dcda      	bgt.n	801a6fe <scalbn+0x66>
 801a748:	ed9f 8b0b 	vldr	d8, [pc, #44]	; 801a778 <scalbn+0xe0>
 801a74c:	e7d9      	b.n	801a702 <scalbn+0x6a>
 801a74e:	e9dd 0100 	ldrd	r0, r1, [sp]
 801a752:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 801a756:	3236      	adds	r2, #54	; 0x36
 801a758:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 801a75c:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 801a760:	ec41 0b17 	vmov	d7, r0, r1
 801a764:	ed9f 6b08 	vldr	d6, [pc, #32]	; 801a788 <scalbn+0xf0>
 801a768:	e7b2      	b.n	801a6d0 <scalbn+0x38>
 801a76a:	bf00      	nop
 801a76c:	f3af 8000 	nop.w
 801a770:	00000000 	.word	0x00000000
 801a774:	43500000 	.word	0x43500000
 801a778:	c2f8f359 	.word	0xc2f8f359
 801a77c:	01a56e1f 	.word	0x01a56e1f
 801a780:	8800759c 	.word	0x8800759c
 801a784:	7e37e43c 	.word	0x7e37e43c
 801a788:	00000000 	.word	0x00000000
 801a78c:	3c900000 	.word	0x3c900000
 801a790:	ffff3cb0 	.word	0xffff3cb0

0801a794 <copysign>:
 801a794:	ec51 0b10 	vmov	r0, r1, d0
 801a798:	ee11 0a90 	vmov	r0, s3
 801a79c:	ee10 2a10 	vmov	r2, s0
 801a7a0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 801a7a4:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 801a7a8:	ea41 0300 	orr.w	r3, r1, r0
 801a7ac:	ec43 2b10 	vmov	d0, r2, r3
 801a7b0:	4770      	bx	lr

0801a7b2 <atoi>:
 801a7b2:	220a      	movs	r2, #10
 801a7b4:	2100      	movs	r1, #0
 801a7b6:	f000 baaf 	b.w	801ad18 <strtol>
	...

0801a7bc <__errno>:
 801a7bc:	4b01      	ldr	r3, [pc, #4]	; (801a7c4 <__errno+0x8>)
 801a7be:	6818      	ldr	r0, [r3, #0]
 801a7c0:	4770      	bx	lr
 801a7c2:	bf00      	nop
 801a7c4:	2400017c 	.word	0x2400017c

0801a7c8 <__libc_init_array>:
 801a7c8:	b570      	push	{r4, r5, r6, lr}
 801a7ca:	4e0d      	ldr	r6, [pc, #52]	; (801a800 <__libc_init_array+0x38>)
 801a7cc:	4c0d      	ldr	r4, [pc, #52]	; (801a804 <__libc_init_array+0x3c>)
 801a7ce:	1ba4      	subs	r4, r4, r6
 801a7d0:	10a4      	asrs	r4, r4, #2
 801a7d2:	2500      	movs	r5, #0
 801a7d4:	42a5      	cmp	r5, r4
 801a7d6:	d109      	bne.n	801a7ec <__libc_init_array+0x24>
 801a7d8:	4e0b      	ldr	r6, [pc, #44]	; (801a808 <__libc_init_array+0x40>)
 801a7da:	4c0c      	ldr	r4, [pc, #48]	; (801a80c <__libc_init_array+0x44>)
 801a7dc:	f001 fa82 	bl	801bce4 <_init>
 801a7e0:	1ba4      	subs	r4, r4, r6
 801a7e2:	10a4      	asrs	r4, r4, #2
 801a7e4:	2500      	movs	r5, #0
 801a7e6:	42a5      	cmp	r5, r4
 801a7e8:	d105      	bne.n	801a7f6 <__libc_init_array+0x2e>
 801a7ea:	bd70      	pop	{r4, r5, r6, pc}
 801a7ec:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 801a7f0:	4798      	blx	r3
 801a7f2:	3501      	adds	r5, #1
 801a7f4:	e7ee      	b.n	801a7d4 <__libc_init_array+0xc>
 801a7f6:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 801a7fa:	4798      	blx	r3
 801a7fc:	3501      	adds	r5, #1
 801a7fe:	e7f2      	b.n	801a7e6 <__libc_init_array+0x1e>
 801a800:	0801c7dc 	.word	0x0801c7dc
 801a804:	0801c7dc 	.word	0x0801c7dc
 801a808:	0801c7dc 	.word	0x0801c7dc
 801a80c:	0801c7e0 	.word	0x0801c7e0

0801a810 <malloc>:
 801a810:	4b02      	ldr	r3, [pc, #8]	; (801a81c <malloc+0xc>)
 801a812:	4601      	mov	r1, r0
 801a814:	6818      	ldr	r0, [r3, #0]
 801a816:	f000 b86d 	b.w	801a8f4 <_malloc_r>
 801a81a:	bf00      	nop
 801a81c:	2400017c 	.word	0x2400017c

0801a820 <free>:
 801a820:	4b02      	ldr	r3, [pc, #8]	; (801a82c <free+0xc>)
 801a822:	4601      	mov	r1, r0
 801a824:	6818      	ldr	r0, [r3, #0]
 801a826:	f000 b817 	b.w	801a858 <_free_r>
 801a82a:	bf00      	nop
 801a82c:	2400017c 	.word	0x2400017c

0801a830 <memcpy>:
 801a830:	b510      	push	{r4, lr}
 801a832:	1e43      	subs	r3, r0, #1
 801a834:	440a      	add	r2, r1
 801a836:	4291      	cmp	r1, r2
 801a838:	d100      	bne.n	801a83c <memcpy+0xc>
 801a83a:	bd10      	pop	{r4, pc}
 801a83c:	f811 4b01 	ldrb.w	r4, [r1], #1
 801a840:	f803 4f01 	strb.w	r4, [r3, #1]!
 801a844:	e7f7      	b.n	801a836 <memcpy+0x6>

0801a846 <memset>:
 801a846:	4402      	add	r2, r0
 801a848:	4603      	mov	r3, r0
 801a84a:	4293      	cmp	r3, r2
 801a84c:	d100      	bne.n	801a850 <memset+0xa>
 801a84e:	4770      	bx	lr
 801a850:	f803 1b01 	strb.w	r1, [r3], #1
 801a854:	e7f9      	b.n	801a84a <memset+0x4>
	...

0801a858 <_free_r>:
 801a858:	b538      	push	{r3, r4, r5, lr}
 801a85a:	4605      	mov	r5, r0
 801a85c:	2900      	cmp	r1, #0
 801a85e:	d045      	beq.n	801a8ec <_free_r+0x94>
 801a860:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801a864:	1f0c      	subs	r4, r1, #4
 801a866:	2b00      	cmp	r3, #0
 801a868:	bfb8      	it	lt
 801a86a:	18e4      	addlt	r4, r4, r3
 801a86c:	f000 fd1e 	bl	801b2ac <__malloc_lock>
 801a870:	4a1f      	ldr	r2, [pc, #124]	; (801a8f0 <_free_r+0x98>)
 801a872:	6813      	ldr	r3, [r2, #0]
 801a874:	4610      	mov	r0, r2
 801a876:	b933      	cbnz	r3, 801a886 <_free_r+0x2e>
 801a878:	6063      	str	r3, [r4, #4]
 801a87a:	6014      	str	r4, [r2, #0]
 801a87c:	4628      	mov	r0, r5
 801a87e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801a882:	f000 bd14 	b.w	801b2ae <__malloc_unlock>
 801a886:	42a3      	cmp	r3, r4
 801a888:	d90c      	bls.n	801a8a4 <_free_r+0x4c>
 801a88a:	6821      	ldr	r1, [r4, #0]
 801a88c:	1862      	adds	r2, r4, r1
 801a88e:	4293      	cmp	r3, r2
 801a890:	bf04      	itt	eq
 801a892:	681a      	ldreq	r2, [r3, #0]
 801a894:	685b      	ldreq	r3, [r3, #4]
 801a896:	6063      	str	r3, [r4, #4]
 801a898:	bf04      	itt	eq
 801a89a:	1852      	addeq	r2, r2, r1
 801a89c:	6022      	streq	r2, [r4, #0]
 801a89e:	6004      	str	r4, [r0, #0]
 801a8a0:	e7ec      	b.n	801a87c <_free_r+0x24>
 801a8a2:	4613      	mov	r3, r2
 801a8a4:	685a      	ldr	r2, [r3, #4]
 801a8a6:	b10a      	cbz	r2, 801a8ac <_free_r+0x54>
 801a8a8:	42a2      	cmp	r2, r4
 801a8aa:	d9fa      	bls.n	801a8a2 <_free_r+0x4a>
 801a8ac:	6819      	ldr	r1, [r3, #0]
 801a8ae:	1858      	adds	r0, r3, r1
 801a8b0:	42a0      	cmp	r0, r4
 801a8b2:	d10b      	bne.n	801a8cc <_free_r+0x74>
 801a8b4:	6820      	ldr	r0, [r4, #0]
 801a8b6:	4401      	add	r1, r0
 801a8b8:	1858      	adds	r0, r3, r1
 801a8ba:	4282      	cmp	r2, r0
 801a8bc:	6019      	str	r1, [r3, #0]
 801a8be:	d1dd      	bne.n	801a87c <_free_r+0x24>
 801a8c0:	6810      	ldr	r0, [r2, #0]
 801a8c2:	6852      	ldr	r2, [r2, #4]
 801a8c4:	605a      	str	r2, [r3, #4]
 801a8c6:	4401      	add	r1, r0
 801a8c8:	6019      	str	r1, [r3, #0]
 801a8ca:	e7d7      	b.n	801a87c <_free_r+0x24>
 801a8cc:	d902      	bls.n	801a8d4 <_free_r+0x7c>
 801a8ce:	230c      	movs	r3, #12
 801a8d0:	602b      	str	r3, [r5, #0]
 801a8d2:	e7d3      	b.n	801a87c <_free_r+0x24>
 801a8d4:	6820      	ldr	r0, [r4, #0]
 801a8d6:	1821      	adds	r1, r4, r0
 801a8d8:	428a      	cmp	r2, r1
 801a8da:	bf04      	itt	eq
 801a8dc:	6811      	ldreq	r1, [r2, #0]
 801a8de:	6852      	ldreq	r2, [r2, #4]
 801a8e0:	6062      	str	r2, [r4, #4]
 801a8e2:	bf04      	itt	eq
 801a8e4:	1809      	addeq	r1, r1, r0
 801a8e6:	6021      	streq	r1, [r4, #0]
 801a8e8:	605c      	str	r4, [r3, #4]
 801a8ea:	e7c7      	b.n	801a87c <_free_r+0x24>
 801a8ec:	bd38      	pop	{r3, r4, r5, pc}
 801a8ee:	bf00      	nop
 801a8f0:	24040504 	.word	0x24040504

0801a8f4 <_malloc_r>:
 801a8f4:	b570      	push	{r4, r5, r6, lr}
 801a8f6:	1ccd      	adds	r5, r1, #3
 801a8f8:	f025 0503 	bic.w	r5, r5, #3
 801a8fc:	3508      	adds	r5, #8
 801a8fe:	2d0c      	cmp	r5, #12
 801a900:	bf38      	it	cc
 801a902:	250c      	movcc	r5, #12
 801a904:	2d00      	cmp	r5, #0
 801a906:	4606      	mov	r6, r0
 801a908:	db01      	blt.n	801a90e <_malloc_r+0x1a>
 801a90a:	42a9      	cmp	r1, r5
 801a90c:	d903      	bls.n	801a916 <_malloc_r+0x22>
 801a90e:	230c      	movs	r3, #12
 801a910:	6033      	str	r3, [r6, #0]
 801a912:	2000      	movs	r0, #0
 801a914:	bd70      	pop	{r4, r5, r6, pc}
 801a916:	f000 fcc9 	bl	801b2ac <__malloc_lock>
 801a91a:	4a21      	ldr	r2, [pc, #132]	; (801a9a0 <_malloc_r+0xac>)
 801a91c:	6814      	ldr	r4, [r2, #0]
 801a91e:	4621      	mov	r1, r4
 801a920:	b991      	cbnz	r1, 801a948 <_malloc_r+0x54>
 801a922:	4c20      	ldr	r4, [pc, #128]	; (801a9a4 <_malloc_r+0xb0>)
 801a924:	6823      	ldr	r3, [r4, #0]
 801a926:	b91b      	cbnz	r3, 801a930 <_malloc_r+0x3c>
 801a928:	4630      	mov	r0, r6
 801a92a:	f000 f8b9 	bl	801aaa0 <_sbrk_r>
 801a92e:	6020      	str	r0, [r4, #0]
 801a930:	4629      	mov	r1, r5
 801a932:	4630      	mov	r0, r6
 801a934:	f000 f8b4 	bl	801aaa0 <_sbrk_r>
 801a938:	1c43      	adds	r3, r0, #1
 801a93a:	d124      	bne.n	801a986 <_malloc_r+0x92>
 801a93c:	230c      	movs	r3, #12
 801a93e:	6033      	str	r3, [r6, #0]
 801a940:	4630      	mov	r0, r6
 801a942:	f000 fcb4 	bl	801b2ae <__malloc_unlock>
 801a946:	e7e4      	b.n	801a912 <_malloc_r+0x1e>
 801a948:	680b      	ldr	r3, [r1, #0]
 801a94a:	1b5b      	subs	r3, r3, r5
 801a94c:	d418      	bmi.n	801a980 <_malloc_r+0x8c>
 801a94e:	2b0b      	cmp	r3, #11
 801a950:	d90f      	bls.n	801a972 <_malloc_r+0x7e>
 801a952:	600b      	str	r3, [r1, #0]
 801a954:	50cd      	str	r5, [r1, r3]
 801a956:	18cc      	adds	r4, r1, r3
 801a958:	4630      	mov	r0, r6
 801a95a:	f000 fca8 	bl	801b2ae <__malloc_unlock>
 801a95e:	f104 000b 	add.w	r0, r4, #11
 801a962:	1d23      	adds	r3, r4, #4
 801a964:	f020 0007 	bic.w	r0, r0, #7
 801a968:	1ac3      	subs	r3, r0, r3
 801a96a:	d0d3      	beq.n	801a914 <_malloc_r+0x20>
 801a96c:	425a      	negs	r2, r3
 801a96e:	50e2      	str	r2, [r4, r3]
 801a970:	e7d0      	b.n	801a914 <_malloc_r+0x20>
 801a972:	428c      	cmp	r4, r1
 801a974:	684b      	ldr	r3, [r1, #4]
 801a976:	bf16      	itet	ne
 801a978:	6063      	strne	r3, [r4, #4]
 801a97a:	6013      	streq	r3, [r2, #0]
 801a97c:	460c      	movne	r4, r1
 801a97e:	e7eb      	b.n	801a958 <_malloc_r+0x64>
 801a980:	460c      	mov	r4, r1
 801a982:	6849      	ldr	r1, [r1, #4]
 801a984:	e7cc      	b.n	801a920 <_malloc_r+0x2c>
 801a986:	1cc4      	adds	r4, r0, #3
 801a988:	f024 0403 	bic.w	r4, r4, #3
 801a98c:	42a0      	cmp	r0, r4
 801a98e:	d005      	beq.n	801a99c <_malloc_r+0xa8>
 801a990:	1a21      	subs	r1, r4, r0
 801a992:	4630      	mov	r0, r6
 801a994:	f000 f884 	bl	801aaa0 <_sbrk_r>
 801a998:	3001      	adds	r0, #1
 801a99a:	d0cf      	beq.n	801a93c <_malloc_r+0x48>
 801a99c:	6025      	str	r5, [r4, #0]
 801a99e:	e7db      	b.n	801a958 <_malloc_r+0x64>
 801a9a0:	24040504 	.word	0x24040504
 801a9a4:	24040508 	.word	0x24040508

0801a9a8 <iprintf>:
 801a9a8:	b40f      	push	{r0, r1, r2, r3}
 801a9aa:	4b0a      	ldr	r3, [pc, #40]	; (801a9d4 <iprintf+0x2c>)
 801a9ac:	b513      	push	{r0, r1, r4, lr}
 801a9ae:	681c      	ldr	r4, [r3, #0]
 801a9b0:	b124      	cbz	r4, 801a9bc <iprintf+0x14>
 801a9b2:	69a3      	ldr	r3, [r4, #24]
 801a9b4:	b913      	cbnz	r3, 801a9bc <iprintf+0x14>
 801a9b6:	4620      	mov	r0, r4
 801a9b8:	f000 fb74 	bl	801b0a4 <__sinit>
 801a9bc:	ab05      	add	r3, sp, #20
 801a9be:	9a04      	ldr	r2, [sp, #16]
 801a9c0:	68a1      	ldr	r1, [r4, #8]
 801a9c2:	9301      	str	r3, [sp, #4]
 801a9c4:	4620      	mov	r0, r4
 801a9c6:	f000 fdef 	bl	801b5a8 <_vfiprintf_r>
 801a9ca:	b002      	add	sp, #8
 801a9cc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801a9d0:	b004      	add	sp, #16
 801a9d2:	4770      	bx	lr
 801a9d4:	2400017c 	.word	0x2400017c

0801a9d8 <_puts_r>:
 801a9d8:	b570      	push	{r4, r5, r6, lr}
 801a9da:	460e      	mov	r6, r1
 801a9dc:	4605      	mov	r5, r0
 801a9de:	b118      	cbz	r0, 801a9e8 <_puts_r+0x10>
 801a9e0:	6983      	ldr	r3, [r0, #24]
 801a9e2:	b90b      	cbnz	r3, 801a9e8 <_puts_r+0x10>
 801a9e4:	f000 fb5e 	bl	801b0a4 <__sinit>
 801a9e8:	69ab      	ldr	r3, [r5, #24]
 801a9ea:	68ac      	ldr	r4, [r5, #8]
 801a9ec:	b913      	cbnz	r3, 801a9f4 <_puts_r+0x1c>
 801a9ee:	4628      	mov	r0, r5
 801a9f0:	f000 fb58 	bl	801b0a4 <__sinit>
 801a9f4:	4b23      	ldr	r3, [pc, #140]	; (801aa84 <_puts_r+0xac>)
 801a9f6:	429c      	cmp	r4, r3
 801a9f8:	d117      	bne.n	801aa2a <_puts_r+0x52>
 801a9fa:	686c      	ldr	r4, [r5, #4]
 801a9fc:	89a3      	ldrh	r3, [r4, #12]
 801a9fe:	071b      	lsls	r3, r3, #28
 801aa00:	d51d      	bpl.n	801aa3e <_puts_r+0x66>
 801aa02:	6923      	ldr	r3, [r4, #16]
 801aa04:	b1db      	cbz	r3, 801aa3e <_puts_r+0x66>
 801aa06:	3e01      	subs	r6, #1
 801aa08:	68a3      	ldr	r3, [r4, #8]
 801aa0a:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 801aa0e:	3b01      	subs	r3, #1
 801aa10:	60a3      	str	r3, [r4, #8]
 801aa12:	b9e9      	cbnz	r1, 801aa50 <_puts_r+0x78>
 801aa14:	2b00      	cmp	r3, #0
 801aa16:	da2e      	bge.n	801aa76 <_puts_r+0x9e>
 801aa18:	4622      	mov	r2, r4
 801aa1a:	210a      	movs	r1, #10
 801aa1c:	4628      	mov	r0, r5
 801aa1e:	f000 f991 	bl	801ad44 <__swbuf_r>
 801aa22:	3001      	adds	r0, #1
 801aa24:	d011      	beq.n	801aa4a <_puts_r+0x72>
 801aa26:	200a      	movs	r0, #10
 801aa28:	e011      	b.n	801aa4e <_puts_r+0x76>
 801aa2a:	4b17      	ldr	r3, [pc, #92]	; (801aa88 <_puts_r+0xb0>)
 801aa2c:	429c      	cmp	r4, r3
 801aa2e:	d101      	bne.n	801aa34 <_puts_r+0x5c>
 801aa30:	68ac      	ldr	r4, [r5, #8]
 801aa32:	e7e3      	b.n	801a9fc <_puts_r+0x24>
 801aa34:	4b15      	ldr	r3, [pc, #84]	; (801aa8c <_puts_r+0xb4>)
 801aa36:	429c      	cmp	r4, r3
 801aa38:	bf08      	it	eq
 801aa3a:	68ec      	ldreq	r4, [r5, #12]
 801aa3c:	e7de      	b.n	801a9fc <_puts_r+0x24>
 801aa3e:	4621      	mov	r1, r4
 801aa40:	4628      	mov	r0, r5
 801aa42:	f000 f9d1 	bl	801ade8 <__swsetup_r>
 801aa46:	2800      	cmp	r0, #0
 801aa48:	d0dd      	beq.n	801aa06 <_puts_r+0x2e>
 801aa4a:	f04f 30ff 	mov.w	r0, #4294967295
 801aa4e:	bd70      	pop	{r4, r5, r6, pc}
 801aa50:	2b00      	cmp	r3, #0
 801aa52:	da04      	bge.n	801aa5e <_puts_r+0x86>
 801aa54:	69a2      	ldr	r2, [r4, #24]
 801aa56:	429a      	cmp	r2, r3
 801aa58:	dc06      	bgt.n	801aa68 <_puts_r+0x90>
 801aa5a:	290a      	cmp	r1, #10
 801aa5c:	d004      	beq.n	801aa68 <_puts_r+0x90>
 801aa5e:	6823      	ldr	r3, [r4, #0]
 801aa60:	1c5a      	adds	r2, r3, #1
 801aa62:	6022      	str	r2, [r4, #0]
 801aa64:	7019      	strb	r1, [r3, #0]
 801aa66:	e7cf      	b.n	801aa08 <_puts_r+0x30>
 801aa68:	4622      	mov	r2, r4
 801aa6a:	4628      	mov	r0, r5
 801aa6c:	f000 f96a 	bl	801ad44 <__swbuf_r>
 801aa70:	3001      	adds	r0, #1
 801aa72:	d1c9      	bne.n	801aa08 <_puts_r+0x30>
 801aa74:	e7e9      	b.n	801aa4a <_puts_r+0x72>
 801aa76:	6823      	ldr	r3, [r4, #0]
 801aa78:	200a      	movs	r0, #10
 801aa7a:	1c5a      	adds	r2, r3, #1
 801aa7c:	6022      	str	r2, [r4, #0]
 801aa7e:	7018      	strb	r0, [r3, #0]
 801aa80:	e7e5      	b.n	801aa4e <_puts_r+0x76>
 801aa82:	bf00      	nop
 801aa84:	0801c654 	.word	0x0801c654
 801aa88:	0801c674 	.word	0x0801c674
 801aa8c:	0801c634 	.word	0x0801c634

0801aa90 <puts>:
 801aa90:	4b02      	ldr	r3, [pc, #8]	; (801aa9c <puts+0xc>)
 801aa92:	4601      	mov	r1, r0
 801aa94:	6818      	ldr	r0, [r3, #0]
 801aa96:	f7ff bf9f 	b.w	801a9d8 <_puts_r>
 801aa9a:	bf00      	nop
 801aa9c:	2400017c 	.word	0x2400017c

0801aaa0 <_sbrk_r>:
 801aaa0:	b538      	push	{r3, r4, r5, lr}
 801aaa2:	4c06      	ldr	r4, [pc, #24]	; (801aabc <_sbrk_r+0x1c>)
 801aaa4:	2300      	movs	r3, #0
 801aaa6:	4605      	mov	r5, r0
 801aaa8:	4608      	mov	r0, r1
 801aaaa:	6023      	str	r3, [r4, #0]
 801aaac:	f7ea f810 	bl	8004ad0 <_sbrk>
 801aab0:	1c43      	adds	r3, r0, #1
 801aab2:	d102      	bne.n	801aaba <_sbrk_r+0x1a>
 801aab4:	6823      	ldr	r3, [r4, #0]
 801aab6:	b103      	cbz	r3, 801aaba <_sbrk_r+0x1a>
 801aab8:	602b      	str	r3, [r5, #0]
 801aaba:	bd38      	pop	{r3, r4, r5, pc}
 801aabc:	24045748 	.word	0x24045748

0801aac0 <sniprintf>:
 801aac0:	b40c      	push	{r2, r3}
 801aac2:	b530      	push	{r4, r5, lr}
 801aac4:	4b17      	ldr	r3, [pc, #92]	; (801ab24 <sniprintf+0x64>)
 801aac6:	1e0c      	subs	r4, r1, #0
 801aac8:	b09d      	sub	sp, #116	; 0x74
 801aaca:	681d      	ldr	r5, [r3, #0]
 801aacc:	da08      	bge.n	801aae0 <sniprintf+0x20>
 801aace:	238b      	movs	r3, #139	; 0x8b
 801aad0:	602b      	str	r3, [r5, #0]
 801aad2:	f04f 30ff 	mov.w	r0, #4294967295
 801aad6:	b01d      	add	sp, #116	; 0x74
 801aad8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801aadc:	b002      	add	sp, #8
 801aade:	4770      	bx	lr
 801aae0:	f44f 7302 	mov.w	r3, #520	; 0x208
 801aae4:	f8ad 3014 	strh.w	r3, [sp, #20]
 801aae8:	bf14      	ite	ne
 801aaea:	f104 33ff 	addne.w	r3, r4, #4294967295
 801aaee:	4623      	moveq	r3, r4
 801aaf0:	9304      	str	r3, [sp, #16]
 801aaf2:	9307      	str	r3, [sp, #28]
 801aaf4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801aaf8:	9002      	str	r0, [sp, #8]
 801aafa:	9006      	str	r0, [sp, #24]
 801aafc:	f8ad 3016 	strh.w	r3, [sp, #22]
 801ab00:	9a20      	ldr	r2, [sp, #128]	; 0x80
 801ab02:	ab21      	add	r3, sp, #132	; 0x84
 801ab04:	a902      	add	r1, sp, #8
 801ab06:	4628      	mov	r0, r5
 801ab08:	9301      	str	r3, [sp, #4]
 801ab0a:	f000 fc2b 	bl	801b364 <_svfiprintf_r>
 801ab0e:	1c43      	adds	r3, r0, #1
 801ab10:	bfbc      	itt	lt
 801ab12:	238b      	movlt	r3, #139	; 0x8b
 801ab14:	602b      	strlt	r3, [r5, #0]
 801ab16:	2c00      	cmp	r4, #0
 801ab18:	d0dd      	beq.n	801aad6 <sniprintf+0x16>
 801ab1a:	9b02      	ldr	r3, [sp, #8]
 801ab1c:	2200      	movs	r2, #0
 801ab1e:	701a      	strb	r2, [r3, #0]
 801ab20:	e7d9      	b.n	801aad6 <sniprintf+0x16>
 801ab22:	bf00      	nop
 801ab24:	2400017c 	.word	0x2400017c

0801ab28 <siprintf>:
 801ab28:	b40e      	push	{r1, r2, r3}
 801ab2a:	b500      	push	{lr}
 801ab2c:	b09c      	sub	sp, #112	; 0x70
 801ab2e:	ab1d      	add	r3, sp, #116	; 0x74
 801ab30:	9002      	str	r0, [sp, #8]
 801ab32:	9006      	str	r0, [sp, #24]
 801ab34:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 801ab38:	4809      	ldr	r0, [pc, #36]	; (801ab60 <siprintf+0x38>)
 801ab3a:	9107      	str	r1, [sp, #28]
 801ab3c:	9104      	str	r1, [sp, #16]
 801ab3e:	4909      	ldr	r1, [pc, #36]	; (801ab64 <siprintf+0x3c>)
 801ab40:	f853 2b04 	ldr.w	r2, [r3], #4
 801ab44:	9105      	str	r1, [sp, #20]
 801ab46:	6800      	ldr	r0, [r0, #0]
 801ab48:	9301      	str	r3, [sp, #4]
 801ab4a:	a902      	add	r1, sp, #8
 801ab4c:	f000 fc0a 	bl	801b364 <_svfiprintf_r>
 801ab50:	9b02      	ldr	r3, [sp, #8]
 801ab52:	2200      	movs	r2, #0
 801ab54:	701a      	strb	r2, [r3, #0]
 801ab56:	b01c      	add	sp, #112	; 0x70
 801ab58:	f85d eb04 	ldr.w	lr, [sp], #4
 801ab5c:	b003      	add	sp, #12
 801ab5e:	4770      	bx	lr
 801ab60:	2400017c 	.word	0x2400017c
 801ab64:	ffff0208 	.word	0xffff0208

0801ab68 <strcpy>:
 801ab68:	4603      	mov	r3, r0
 801ab6a:	f811 2b01 	ldrb.w	r2, [r1], #1
 801ab6e:	f803 2b01 	strb.w	r2, [r3], #1
 801ab72:	2a00      	cmp	r2, #0
 801ab74:	d1f9      	bne.n	801ab6a <strcpy+0x2>
 801ab76:	4770      	bx	lr

0801ab78 <strtok>:
 801ab78:	4b13      	ldr	r3, [pc, #76]	; (801abc8 <strtok+0x50>)
 801ab7a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801ab7e:	681d      	ldr	r5, [r3, #0]
 801ab80:	6dac      	ldr	r4, [r5, #88]	; 0x58
 801ab82:	4606      	mov	r6, r0
 801ab84:	460f      	mov	r7, r1
 801ab86:	b9b4      	cbnz	r4, 801abb6 <strtok+0x3e>
 801ab88:	2050      	movs	r0, #80	; 0x50
 801ab8a:	f7ff fe41 	bl	801a810 <malloc>
 801ab8e:	65a8      	str	r0, [r5, #88]	; 0x58
 801ab90:	e9c0 4400 	strd	r4, r4, [r0]
 801ab94:	e9c0 4402 	strd	r4, r4, [r0, #8]
 801ab98:	e9c0 4404 	strd	r4, r4, [r0, #16]
 801ab9c:	e9c0 440a 	strd	r4, r4, [r0, #40]	; 0x28
 801aba0:	e9c0 440c 	strd	r4, r4, [r0, #48]	; 0x30
 801aba4:	e9c0 440e 	strd	r4, r4, [r0, #56]	; 0x38
 801aba8:	e9c0 4410 	strd	r4, r4, [r0, #64]	; 0x40
 801abac:	e9c0 4412 	strd	r4, r4, [r0, #72]	; 0x48
 801abb0:	6184      	str	r4, [r0, #24]
 801abb2:	7704      	strb	r4, [r0, #28]
 801abb4:	6244      	str	r4, [r0, #36]	; 0x24
 801abb6:	6daa      	ldr	r2, [r5, #88]	; 0x58
 801abb8:	4639      	mov	r1, r7
 801abba:	4630      	mov	r0, r6
 801abbc:	2301      	movs	r3, #1
 801abbe:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801abc2:	f000 b803 	b.w	801abcc <__strtok_r>
 801abc6:	bf00      	nop
 801abc8:	2400017c 	.word	0x2400017c

0801abcc <__strtok_r>:
 801abcc:	b5f0      	push	{r4, r5, r6, r7, lr}
 801abce:	b918      	cbnz	r0, 801abd8 <__strtok_r+0xc>
 801abd0:	6810      	ldr	r0, [r2, #0]
 801abd2:	b908      	cbnz	r0, 801abd8 <__strtok_r+0xc>
 801abd4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801abd6:	4620      	mov	r0, r4
 801abd8:	4604      	mov	r4, r0
 801abda:	460f      	mov	r7, r1
 801abdc:	f814 5b01 	ldrb.w	r5, [r4], #1
 801abe0:	f817 6b01 	ldrb.w	r6, [r7], #1
 801abe4:	b91e      	cbnz	r6, 801abee <__strtok_r+0x22>
 801abe6:	b96d      	cbnz	r5, 801ac04 <__strtok_r+0x38>
 801abe8:	6015      	str	r5, [r2, #0]
 801abea:	4628      	mov	r0, r5
 801abec:	e7f2      	b.n	801abd4 <__strtok_r+0x8>
 801abee:	42b5      	cmp	r5, r6
 801abf0:	d1f6      	bne.n	801abe0 <__strtok_r+0x14>
 801abf2:	2b00      	cmp	r3, #0
 801abf4:	d1ef      	bne.n	801abd6 <__strtok_r+0xa>
 801abf6:	6014      	str	r4, [r2, #0]
 801abf8:	7003      	strb	r3, [r0, #0]
 801abfa:	e7eb      	b.n	801abd4 <__strtok_r+0x8>
 801abfc:	462b      	mov	r3, r5
 801abfe:	e00d      	b.n	801ac1c <__strtok_r+0x50>
 801ac00:	b926      	cbnz	r6, 801ac0c <__strtok_r+0x40>
 801ac02:	461c      	mov	r4, r3
 801ac04:	4623      	mov	r3, r4
 801ac06:	460f      	mov	r7, r1
 801ac08:	f813 5b01 	ldrb.w	r5, [r3], #1
 801ac0c:	f817 6b01 	ldrb.w	r6, [r7], #1
 801ac10:	42b5      	cmp	r5, r6
 801ac12:	d1f5      	bne.n	801ac00 <__strtok_r+0x34>
 801ac14:	2d00      	cmp	r5, #0
 801ac16:	d0f1      	beq.n	801abfc <__strtok_r+0x30>
 801ac18:	2100      	movs	r1, #0
 801ac1a:	7021      	strb	r1, [r4, #0]
 801ac1c:	6013      	str	r3, [r2, #0]
 801ac1e:	e7d9      	b.n	801abd4 <__strtok_r+0x8>

0801ac20 <_strtol_l.isra.0>:
 801ac20:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801ac24:	4680      	mov	r8, r0
 801ac26:	4689      	mov	r9, r1
 801ac28:	4692      	mov	sl, r2
 801ac2a:	461e      	mov	r6, r3
 801ac2c:	460f      	mov	r7, r1
 801ac2e:	463d      	mov	r5, r7
 801ac30:	9808      	ldr	r0, [sp, #32]
 801ac32:	f815 4b01 	ldrb.w	r4, [r5], #1
 801ac36:	f000 fabf 	bl	801b1b8 <__locale_ctype_ptr_l>
 801ac3a:	4420      	add	r0, r4
 801ac3c:	7843      	ldrb	r3, [r0, #1]
 801ac3e:	f013 0308 	ands.w	r3, r3, #8
 801ac42:	d132      	bne.n	801acaa <_strtol_l.isra.0+0x8a>
 801ac44:	2c2d      	cmp	r4, #45	; 0x2d
 801ac46:	d132      	bne.n	801acae <_strtol_l.isra.0+0x8e>
 801ac48:	787c      	ldrb	r4, [r7, #1]
 801ac4a:	1cbd      	adds	r5, r7, #2
 801ac4c:	2201      	movs	r2, #1
 801ac4e:	2e00      	cmp	r6, #0
 801ac50:	d05d      	beq.n	801ad0e <_strtol_l.isra.0+0xee>
 801ac52:	2e10      	cmp	r6, #16
 801ac54:	d109      	bne.n	801ac6a <_strtol_l.isra.0+0x4a>
 801ac56:	2c30      	cmp	r4, #48	; 0x30
 801ac58:	d107      	bne.n	801ac6a <_strtol_l.isra.0+0x4a>
 801ac5a:	782b      	ldrb	r3, [r5, #0]
 801ac5c:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 801ac60:	2b58      	cmp	r3, #88	; 0x58
 801ac62:	d14f      	bne.n	801ad04 <_strtol_l.isra.0+0xe4>
 801ac64:	786c      	ldrb	r4, [r5, #1]
 801ac66:	2610      	movs	r6, #16
 801ac68:	3502      	adds	r5, #2
 801ac6a:	2a00      	cmp	r2, #0
 801ac6c:	bf14      	ite	ne
 801ac6e:	f04f 4100 	movne.w	r1, #2147483648	; 0x80000000
 801ac72:	f06f 4100 	mvneq.w	r1, #2147483648	; 0x80000000
 801ac76:	2700      	movs	r7, #0
 801ac78:	fbb1 fcf6 	udiv	ip, r1, r6
 801ac7c:	4638      	mov	r0, r7
 801ac7e:	fb06 1e1c 	mls	lr, r6, ip, r1
 801ac82:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 801ac86:	2b09      	cmp	r3, #9
 801ac88:	d817      	bhi.n	801acba <_strtol_l.isra.0+0x9a>
 801ac8a:	461c      	mov	r4, r3
 801ac8c:	42a6      	cmp	r6, r4
 801ac8e:	dd23      	ble.n	801acd8 <_strtol_l.isra.0+0xb8>
 801ac90:	1c7b      	adds	r3, r7, #1
 801ac92:	d007      	beq.n	801aca4 <_strtol_l.isra.0+0x84>
 801ac94:	4584      	cmp	ip, r0
 801ac96:	d31c      	bcc.n	801acd2 <_strtol_l.isra.0+0xb2>
 801ac98:	d101      	bne.n	801ac9e <_strtol_l.isra.0+0x7e>
 801ac9a:	45a6      	cmp	lr, r4
 801ac9c:	db19      	blt.n	801acd2 <_strtol_l.isra.0+0xb2>
 801ac9e:	fb00 4006 	mla	r0, r0, r6, r4
 801aca2:	2701      	movs	r7, #1
 801aca4:	f815 4b01 	ldrb.w	r4, [r5], #1
 801aca8:	e7eb      	b.n	801ac82 <_strtol_l.isra.0+0x62>
 801acaa:	462f      	mov	r7, r5
 801acac:	e7bf      	b.n	801ac2e <_strtol_l.isra.0+0xe>
 801acae:	2c2b      	cmp	r4, #43	; 0x2b
 801acb0:	bf04      	itt	eq
 801acb2:	1cbd      	addeq	r5, r7, #2
 801acb4:	787c      	ldrbeq	r4, [r7, #1]
 801acb6:	461a      	mov	r2, r3
 801acb8:	e7c9      	b.n	801ac4e <_strtol_l.isra.0+0x2e>
 801acba:	f1a4 0341 	sub.w	r3, r4, #65	; 0x41
 801acbe:	2b19      	cmp	r3, #25
 801acc0:	d801      	bhi.n	801acc6 <_strtol_l.isra.0+0xa6>
 801acc2:	3c37      	subs	r4, #55	; 0x37
 801acc4:	e7e2      	b.n	801ac8c <_strtol_l.isra.0+0x6c>
 801acc6:	f1a4 0361 	sub.w	r3, r4, #97	; 0x61
 801acca:	2b19      	cmp	r3, #25
 801accc:	d804      	bhi.n	801acd8 <_strtol_l.isra.0+0xb8>
 801acce:	3c57      	subs	r4, #87	; 0x57
 801acd0:	e7dc      	b.n	801ac8c <_strtol_l.isra.0+0x6c>
 801acd2:	f04f 37ff 	mov.w	r7, #4294967295
 801acd6:	e7e5      	b.n	801aca4 <_strtol_l.isra.0+0x84>
 801acd8:	1c7b      	adds	r3, r7, #1
 801acda:	d108      	bne.n	801acee <_strtol_l.isra.0+0xce>
 801acdc:	2322      	movs	r3, #34	; 0x22
 801acde:	f8c8 3000 	str.w	r3, [r8]
 801ace2:	4608      	mov	r0, r1
 801ace4:	f1ba 0f00 	cmp.w	sl, #0
 801ace8:	d107      	bne.n	801acfa <_strtol_l.isra.0+0xda>
 801acea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801acee:	b102      	cbz	r2, 801acf2 <_strtol_l.isra.0+0xd2>
 801acf0:	4240      	negs	r0, r0
 801acf2:	f1ba 0f00 	cmp.w	sl, #0
 801acf6:	d0f8      	beq.n	801acea <_strtol_l.isra.0+0xca>
 801acf8:	b10f      	cbz	r7, 801acfe <_strtol_l.isra.0+0xde>
 801acfa:	f105 39ff 	add.w	r9, r5, #4294967295
 801acfe:	f8ca 9000 	str.w	r9, [sl]
 801ad02:	e7f2      	b.n	801acea <_strtol_l.isra.0+0xca>
 801ad04:	2430      	movs	r4, #48	; 0x30
 801ad06:	2e00      	cmp	r6, #0
 801ad08:	d1af      	bne.n	801ac6a <_strtol_l.isra.0+0x4a>
 801ad0a:	2608      	movs	r6, #8
 801ad0c:	e7ad      	b.n	801ac6a <_strtol_l.isra.0+0x4a>
 801ad0e:	2c30      	cmp	r4, #48	; 0x30
 801ad10:	d0a3      	beq.n	801ac5a <_strtol_l.isra.0+0x3a>
 801ad12:	260a      	movs	r6, #10
 801ad14:	e7a9      	b.n	801ac6a <_strtol_l.isra.0+0x4a>
	...

0801ad18 <strtol>:
 801ad18:	4b08      	ldr	r3, [pc, #32]	; (801ad3c <strtol+0x24>)
 801ad1a:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801ad1c:	681c      	ldr	r4, [r3, #0]
 801ad1e:	4d08      	ldr	r5, [pc, #32]	; (801ad40 <strtol+0x28>)
 801ad20:	6a23      	ldr	r3, [r4, #32]
 801ad22:	2b00      	cmp	r3, #0
 801ad24:	bf08      	it	eq
 801ad26:	462b      	moveq	r3, r5
 801ad28:	9300      	str	r3, [sp, #0]
 801ad2a:	4613      	mov	r3, r2
 801ad2c:	460a      	mov	r2, r1
 801ad2e:	4601      	mov	r1, r0
 801ad30:	4620      	mov	r0, r4
 801ad32:	f7ff ff75 	bl	801ac20 <_strtol_l.isra.0>
 801ad36:	b003      	add	sp, #12
 801ad38:	bd30      	pop	{r4, r5, pc}
 801ad3a:	bf00      	nop
 801ad3c:	2400017c 	.word	0x2400017c
 801ad40:	240001e0 	.word	0x240001e0

0801ad44 <__swbuf_r>:
 801ad44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801ad46:	460e      	mov	r6, r1
 801ad48:	4614      	mov	r4, r2
 801ad4a:	4605      	mov	r5, r0
 801ad4c:	b118      	cbz	r0, 801ad56 <__swbuf_r+0x12>
 801ad4e:	6983      	ldr	r3, [r0, #24]
 801ad50:	b90b      	cbnz	r3, 801ad56 <__swbuf_r+0x12>
 801ad52:	f000 f9a7 	bl	801b0a4 <__sinit>
 801ad56:	4b21      	ldr	r3, [pc, #132]	; (801addc <__swbuf_r+0x98>)
 801ad58:	429c      	cmp	r4, r3
 801ad5a:	d12a      	bne.n	801adb2 <__swbuf_r+0x6e>
 801ad5c:	686c      	ldr	r4, [r5, #4]
 801ad5e:	69a3      	ldr	r3, [r4, #24]
 801ad60:	60a3      	str	r3, [r4, #8]
 801ad62:	89a3      	ldrh	r3, [r4, #12]
 801ad64:	071a      	lsls	r2, r3, #28
 801ad66:	d52e      	bpl.n	801adc6 <__swbuf_r+0x82>
 801ad68:	6923      	ldr	r3, [r4, #16]
 801ad6a:	b363      	cbz	r3, 801adc6 <__swbuf_r+0x82>
 801ad6c:	6923      	ldr	r3, [r4, #16]
 801ad6e:	6820      	ldr	r0, [r4, #0]
 801ad70:	1ac0      	subs	r0, r0, r3
 801ad72:	6963      	ldr	r3, [r4, #20]
 801ad74:	b2f6      	uxtb	r6, r6
 801ad76:	4283      	cmp	r3, r0
 801ad78:	4637      	mov	r7, r6
 801ad7a:	dc04      	bgt.n	801ad86 <__swbuf_r+0x42>
 801ad7c:	4621      	mov	r1, r4
 801ad7e:	4628      	mov	r0, r5
 801ad80:	f000 f926 	bl	801afd0 <_fflush_r>
 801ad84:	bb28      	cbnz	r0, 801add2 <__swbuf_r+0x8e>
 801ad86:	68a3      	ldr	r3, [r4, #8]
 801ad88:	3b01      	subs	r3, #1
 801ad8a:	60a3      	str	r3, [r4, #8]
 801ad8c:	6823      	ldr	r3, [r4, #0]
 801ad8e:	1c5a      	adds	r2, r3, #1
 801ad90:	6022      	str	r2, [r4, #0]
 801ad92:	701e      	strb	r6, [r3, #0]
 801ad94:	6963      	ldr	r3, [r4, #20]
 801ad96:	3001      	adds	r0, #1
 801ad98:	4283      	cmp	r3, r0
 801ad9a:	d004      	beq.n	801ada6 <__swbuf_r+0x62>
 801ad9c:	89a3      	ldrh	r3, [r4, #12]
 801ad9e:	07db      	lsls	r3, r3, #31
 801ada0:	d519      	bpl.n	801add6 <__swbuf_r+0x92>
 801ada2:	2e0a      	cmp	r6, #10
 801ada4:	d117      	bne.n	801add6 <__swbuf_r+0x92>
 801ada6:	4621      	mov	r1, r4
 801ada8:	4628      	mov	r0, r5
 801adaa:	f000 f911 	bl	801afd0 <_fflush_r>
 801adae:	b190      	cbz	r0, 801add6 <__swbuf_r+0x92>
 801adb0:	e00f      	b.n	801add2 <__swbuf_r+0x8e>
 801adb2:	4b0b      	ldr	r3, [pc, #44]	; (801ade0 <__swbuf_r+0x9c>)
 801adb4:	429c      	cmp	r4, r3
 801adb6:	d101      	bne.n	801adbc <__swbuf_r+0x78>
 801adb8:	68ac      	ldr	r4, [r5, #8]
 801adba:	e7d0      	b.n	801ad5e <__swbuf_r+0x1a>
 801adbc:	4b09      	ldr	r3, [pc, #36]	; (801ade4 <__swbuf_r+0xa0>)
 801adbe:	429c      	cmp	r4, r3
 801adc0:	bf08      	it	eq
 801adc2:	68ec      	ldreq	r4, [r5, #12]
 801adc4:	e7cb      	b.n	801ad5e <__swbuf_r+0x1a>
 801adc6:	4621      	mov	r1, r4
 801adc8:	4628      	mov	r0, r5
 801adca:	f000 f80d 	bl	801ade8 <__swsetup_r>
 801adce:	2800      	cmp	r0, #0
 801add0:	d0cc      	beq.n	801ad6c <__swbuf_r+0x28>
 801add2:	f04f 37ff 	mov.w	r7, #4294967295
 801add6:	4638      	mov	r0, r7
 801add8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801adda:	bf00      	nop
 801addc:	0801c654 	.word	0x0801c654
 801ade0:	0801c674 	.word	0x0801c674
 801ade4:	0801c634 	.word	0x0801c634

0801ade8 <__swsetup_r>:
 801ade8:	4b32      	ldr	r3, [pc, #200]	; (801aeb4 <__swsetup_r+0xcc>)
 801adea:	b570      	push	{r4, r5, r6, lr}
 801adec:	681d      	ldr	r5, [r3, #0]
 801adee:	4606      	mov	r6, r0
 801adf0:	460c      	mov	r4, r1
 801adf2:	b125      	cbz	r5, 801adfe <__swsetup_r+0x16>
 801adf4:	69ab      	ldr	r3, [r5, #24]
 801adf6:	b913      	cbnz	r3, 801adfe <__swsetup_r+0x16>
 801adf8:	4628      	mov	r0, r5
 801adfa:	f000 f953 	bl	801b0a4 <__sinit>
 801adfe:	4b2e      	ldr	r3, [pc, #184]	; (801aeb8 <__swsetup_r+0xd0>)
 801ae00:	429c      	cmp	r4, r3
 801ae02:	d10f      	bne.n	801ae24 <__swsetup_r+0x3c>
 801ae04:	686c      	ldr	r4, [r5, #4]
 801ae06:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801ae0a:	b29a      	uxth	r2, r3
 801ae0c:	0715      	lsls	r5, r2, #28
 801ae0e:	d42c      	bmi.n	801ae6a <__swsetup_r+0x82>
 801ae10:	06d0      	lsls	r0, r2, #27
 801ae12:	d411      	bmi.n	801ae38 <__swsetup_r+0x50>
 801ae14:	2209      	movs	r2, #9
 801ae16:	6032      	str	r2, [r6, #0]
 801ae18:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801ae1c:	81a3      	strh	r3, [r4, #12]
 801ae1e:	f04f 30ff 	mov.w	r0, #4294967295
 801ae22:	e03e      	b.n	801aea2 <__swsetup_r+0xba>
 801ae24:	4b25      	ldr	r3, [pc, #148]	; (801aebc <__swsetup_r+0xd4>)
 801ae26:	429c      	cmp	r4, r3
 801ae28:	d101      	bne.n	801ae2e <__swsetup_r+0x46>
 801ae2a:	68ac      	ldr	r4, [r5, #8]
 801ae2c:	e7eb      	b.n	801ae06 <__swsetup_r+0x1e>
 801ae2e:	4b24      	ldr	r3, [pc, #144]	; (801aec0 <__swsetup_r+0xd8>)
 801ae30:	429c      	cmp	r4, r3
 801ae32:	bf08      	it	eq
 801ae34:	68ec      	ldreq	r4, [r5, #12]
 801ae36:	e7e6      	b.n	801ae06 <__swsetup_r+0x1e>
 801ae38:	0751      	lsls	r1, r2, #29
 801ae3a:	d512      	bpl.n	801ae62 <__swsetup_r+0x7a>
 801ae3c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801ae3e:	b141      	cbz	r1, 801ae52 <__swsetup_r+0x6a>
 801ae40:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801ae44:	4299      	cmp	r1, r3
 801ae46:	d002      	beq.n	801ae4e <__swsetup_r+0x66>
 801ae48:	4630      	mov	r0, r6
 801ae4a:	f7ff fd05 	bl	801a858 <_free_r>
 801ae4e:	2300      	movs	r3, #0
 801ae50:	6363      	str	r3, [r4, #52]	; 0x34
 801ae52:	89a3      	ldrh	r3, [r4, #12]
 801ae54:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 801ae58:	81a3      	strh	r3, [r4, #12]
 801ae5a:	2300      	movs	r3, #0
 801ae5c:	6063      	str	r3, [r4, #4]
 801ae5e:	6923      	ldr	r3, [r4, #16]
 801ae60:	6023      	str	r3, [r4, #0]
 801ae62:	89a3      	ldrh	r3, [r4, #12]
 801ae64:	f043 0308 	orr.w	r3, r3, #8
 801ae68:	81a3      	strh	r3, [r4, #12]
 801ae6a:	6923      	ldr	r3, [r4, #16]
 801ae6c:	b94b      	cbnz	r3, 801ae82 <__swsetup_r+0x9a>
 801ae6e:	89a3      	ldrh	r3, [r4, #12]
 801ae70:	f403 7320 	and.w	r3, r3, #640	; 0x280
 801ae74:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801ae78:	d003      	beq.n	801ae82 <__swsetup_r+0x9a>
 801ae7a:	4621      	mov	r1, r4
 801ae7c:	4630      	mov	r0, r6
 801ae7e:	f000 f9c3 	bl	801b208 <__smakebuf_r>
 801ae82:	89a2      	ldrh	r2, [r4, #12]
 801ae84:	f012 0301 	ands.w	r3, r2, #1
 801ae88:	d00c      	beq.n	801aea4 <__swsetup_r+0xbc>
 801ae8a:	2300      	movs	r3, #0
 801ae8c:	60a3      	str	r3, [r4, #8]
 801ae8e:	6963      	ldr	r3, [r4, #20]
 801ae90:	425b      	negs	r3, r3
 801ae92:	61a3      	str	r3, [r4, #24]
 801ae94:	6923      	ldr	r3, [r4, #16]
 801ae96:	b953      	cbnz	r3, 801aeae <__swsetup_r+0xc6>
 801ae98:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801ae9c:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 801aea0:	d1ba      	bne.n	801ae18 <__swsetup_r+0x30>
 801aea2:	bd70      	pop	{r4, r5, r6, pc}
 801aea4:	0792      	lsls	r2, r2, #30
 801aea6:	bf58      	it	pl
 801aea8:	6963      	ldrpl	r3, [r4, #20]
 801aeaa:	60a3      	str	r3, [r4, #8]
 801aeac:	e7f2      	b.n	801ae94 <__swsetup_r+0xac>
 801aeae:	2000      	movs	r0, #0
 801aeb0:	e7f7      	b.n	801aea2 <__swsetup_r+0xba>
 801aeb2:	bf00      	nop
 801aeb4:	2400017c 	.word	0x2400017c
 801aeb8:	0801c654 	.word	0x0801c654
 801aebc:	0801c674 	.word	0x0801c674
 801aec0:	0801c634 	.word	0x0801c634

0801aec4 <__sflush_r>:
 801aec4:	898a      	ldrh	r2, [r1, #12]
 801aec6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801aeca:	4605      	mov	r5, r0
 801aecc:	0710      	lsls	r0, r2, #28
 801aece:	460c      	mov	r4, r1
 801aed0:	d458      	bmi.n	801af84 <__sflush_r+0xc0>
 801aed2:	684b      	ldr	r3, [r1, #4]
 801aed4:	2b00      	cmp	r3, #0
 801aed6:	dc05      	bgt.n	801aee4 <__sflush_r+0x20>
 801aed8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 801aeda:	2b00      	cmp	r3, #0
 801aedc:	dc02      	bgt.n	801aee4 <__sflush_r+0x20>
 801aede:	2000      	movs	r0, #0
 801aee0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801aee4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801aee6:	2e00      	cmp	r6, #0
 801aee8:	d0f9      	beq.n	801aede <__sflush_r+0x1a>
 801aeea:	2300      	movs	r3, #0
 801aeec:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 801aef0:	682f      	ldr	r7, [r5, #0]
 801aef2:	6a21      	ldr	r1, [r4, #32]
 801aef4:	602b      	str	r3, [r5, #0]
 801aef6:	d032      	beq.n	801af5e <__sflush_r+0x9a>
 801aef8:	6d60      	ldr	r0, [r4, #84]	; 0x54
 801aefa:	89a3      	ldrh	r3, [r4, #12]
 801aefc:	075a      	lsls	r2, r3, #29
 801aefe:	d505      	bpl.n	801af0c <__sflush_r+0x48>
 801af00:	6863      	ldr	r3, [r4, #4]
 801af02:	1ac0      	subs	r0, r0, r3
 801af04:	6b63      	ldr	r3, [r4, #52]	; 0x34
 801af06:	b10b      	cbz	r3, 801af0c <__sflush_r+0x48>
 801af08:	6c23      	ldr	r3, [r4, #64]	; 0x40
 801af0a:	1ac0      	subs	r0, r0, r3
 801af0c:	2300      	movs	r3, #0
 801af0e:	4602      	mov	r2, r0
 801af10:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801af12:	6a21      	ldr	r1, [r4, #32]
 801af14:	4628      	mov	r0, r5
 801af16:	47b0      	blx	r6
 801af18:	1c43      	adds	r3, r0, #1
 801af1a:	89a3      	ldrh	r3, [r4, #12]
 801af1c:	d106      	bne.n	801af2c <__sflush_r+0x68>
 801af1e:	6829      	ldr	r1, [r5, #0]
 801af20:	291d      	cmp	r1, #29
 801af22:	d848      	bhi.n	801afb6 <__sflush_r+0xf2>
 801af24:	4a29      	ldr	r2, [pc, #164]	; (801afcc <__sflush_r+0x108>)
 801af26:	40ca      	lsrs	r2, r1
 801af28:	07d6      	lsls	r6, r2, #31
 801af2a:	d544      	bpl.n	801afb6 <__sflush_r+0xf2>
 801af2c:	2200      	movs	r2, #0
 801af2e:	6062      	str	r2, [r4, #4]
 801af30:	04d9      	lsls	r1, r3, #19
 801af32:	6922      	ldr	r2, [r4, #16]
 801af34:	6022      	str	r2, [r4, #0]
 801af36:	d504      	bpl.n	801af42 <__sflush_r+0x7e>
 801af38:	1c42      	adds	r2, r0, #1
 801af3a:	d101      	bne.n	801af40 <__sflush_r+0x7c>
 801af3c:	682b      	ldr	r3, [r5, #0]
 801af3e:	b903      	cbnz	r3, 801af42 <__sflush_r+0x7e>
 801af40:	6560      	str	r0, [r4, #84]	; 0x54
 801af42:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801af44:	602f      	str	r7, [r5, #0]
 801af46:	2900      	cmp	r1, #0
 801af48:	d0c9      	beq.n	801aede <__sflush_r+0x1a>
 801af4a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801af4e:	4299      	cmp	r1, r3
 801af50:	d002      	beq.n	801af58 <__sflush_r+0x94>
 801af52:	4628      	mov	r0, r5
 801af54:	f7ff fc80 	bl	801a858 <_free_r>
 801af58:	2000      	movs	r0, #0
 801af5a:	6360      	str	r0, [r4, #52]	; 0x34
 801af5c:	e7c0      	b.n	801aee0 <__sflush_r+0x1c>
 801af5e:	2301      	movs	r3, #1
 801af60:	4628      	mov	r0, r5
 801af62:	47b0      	blx	r6
 801af64:	1c41      	adds	r1, r0, #1
 801af66:	d1c8      	bne.n	801aefa <__sflush_r+0x36>
 801af68:	682b      	ldr	r3, [r5, #0]
 801af6a:	2b00      	cmp	r3, #0
 801af6c:	d0c5      	beq.n	801aefa <__sflush_r+0x36>
 801af6e:	2b1d      	cmp	r3, #29
 801af70:	d001      	beq.n	801af76 <__sflush_r+0xb2>
 801af72:	2b16      	cmp	r3, #22
 801af74:	d101      	bne.n	801af7a <__sflush_r+0xb6>
 801af76:	602f      	str	r7, [r5, #0]
 801af78:	e7b1      	b.n	801aede <__sflush_r+0x1a>
 801af7a:	89a3      	ldrh	r3, [r4, #12]
 801af7c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801af80:	81a3      	strh	r3, [r4, #12]
 801af82:	e7ad      	b.n	801aee0 <__sflush_r+0x1c>
 801af84:	690f      	ldr	r7, [r1, #16]
 801af86:	2f00      	cmp	r7, #0
 801af88:	d0a9      	beq.n	801aede <__sflush_r+0x1a>
 801af8a:	0793      	lsls	r3, r2, #30
 801af8c:	680e      	ldr	r6, [r1, #0]
 801af8e:	bf08      	it	eq
 801af90:	694b      	ldreq	r3, [r1, #20]
 801af92:	600f      	str	r7, [r1, #0]
 801af94:	bf18      	it	ne
 801af96:	2300      	movne	r3, #0
 801af98:	eba6 0807 	sub.w	r8, r6, r7
 801af9c:	608b      	str	r3, [r1, #8]
 801af9e:	f1b8 0f00 	cmp.w	r8, #0
 801afa2:	dd9c      	ble.n	801aede <__sflush_r+0x1a>
 801afa4:	4643      	mov	r3, r8
 801afa6:	463a      	mov	r2, r7
 801afa8:	6a21      	ldr	r1, [r4, #32]
 801afaa:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 801afac:	4628      	mov	r0, r5
 801afae:	47b0      	blx	r6
 801afb0:	2800      	cmp	r0, #0
 801afb2:	dc06      	bgt.n	801afc2 <__sflush_r+0xfe>
 801afb4:	89a3      	ldrh	r3, [r4, #12]
 801afb6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801afba:	81a3      	strh	r3, [r4, #12]
 801afbc:	f04f 30ff 	mov.w	r0, #4294967295
 801afc0:	e78e      	b.n	801aee0 <__sflush_r+0x1c>
 801afc2:	4407      	add	r7, r0
 801afc4:	eba8 0800 	sub.w	r8, r8, r0
 801afc8:	e7e9      	b.n	801af9e <__sflush_r+0xda>
 801afca:	bf00      	nop
 801afcc:	20400001 	.word	0x20400001

0801afd0 <_fflush_r>:
 801afd0:	b538      	push	{r3, r4, r5, lr}
 801afd2:	690b      	ldr	r3, [r1, #16]
 801afd4:	4605      	mov	r5, r0
 801afd6:	460c      	mov	r4, r1
 801afd8:	b1db      	cbz	r3, 801b012 <_fflush_r+0x42>
 801afda:	b118      	cbz	r0, 801afe4 <_fflush_r+0x14>
 801afdc:	6983      	ldr	r3, [r0, #24]
 801afde:	b90b      	cbnz	r3, 801afe4 <_fflush_r+0x14>
 801afe0:	f000 f860 	bl	801b0a4 <__sinit>
 801afe4:	4b0c      	ldr	r3, [pc, #48]	; (801b018 <_fflush_r+0x48>)
 801afe6:	429c      	cmp	r4, r3
 801afe8:	d109      	bne.n	801affe <_fflush_r+0x2e>
 801afea:	686c      	ldr	r4, [r5, #4]
 801afec:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801aff0:	b17b      	cbz	r3, 801b012 <_fflush_r+0x42>
 801aff2:	4621      	mov	r1, r4
 801aff4:	4628      	mov	r0, r5
 801aff6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801affa:	f7ff bf63 	b.w	801aec4 <__sflush_r>
 801affe:	4b07      	ldr	r3, [pc, #28]	; (801b01c <_fflush_r+0x4c>)
 801b000:	429c      	cmp	r4, r3
 801b002:	d101      	bne.n	801b008 <_fflush_r+0x38>
 801b004:	68ac      	ldr	r4, [r5, #8]
 801b006:	e7f1      	b.n	801afec <_fflush_r+0x1c>
 801b008:	4b05      	ldr	r3, [pc, #20]	; (801b020 <_fflush_r+0x50>)
 801b00a:	429c      	cmp	r4, r3
 801b00c:	bf08      	it	eq
 801b00e:	68ec      	ldreq	r4, [r5, #12]
 801b010:	e7ec      	b.n	801afec <_fflush_r+0x1c>
 801b012:	2000      	movs	r0, #0
 801b014:	bd38      	pop	{r3, r4, r5, pc}
 801b016:	bf00      	nop
 801b018:	0801c654 	.word	0x0801c654
 801b01c:	0801c674 	.word	0x0801c674
 801b020:	0801c634 	.word	0x0801c634

0801b024 <std>:
 801b024:	2300      	movs	r3, #0
 801b026:	b510      	push	{r4, lr}
 801b028:	4604      	mov	r4, r0
 801b02a:	e9c0 3300 	strd	r3, r3, [r0]
 801b02e:	6083      	str	r3, [r0, #8]
 801b030:	8181      	strh	r1, [r0, #12]
 801b032:	6643      	str	r3, [r0, #100]	; 0x64
 801b034:	81c2      	strh	r2, [r0, #14]
 801b036:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801b03a:	6183      	str	r3, [r0, #24]
 801b03c:	4619      	mov	r1, r3
 801b03e:	2208      	movs	r2, #8
 801b040:	305c      	adds	r0, #92	; 0x5c
 801b042:	f7ff fc00 	bl	801a846 <memset>
 801b046:	4b05      	ldr	r3, [pc, #20]	; (801b05c <std+0x38>)
 801b048:	6263      	str	r3, [r4, #36]	; 0x24
 801b04a:	4b05      	ldr	r3, [pc, #20]	; (801b060 <std+0x3c>)
 801b04c:	62a3      	str	r3, [r4, #40]	; 0x28
 801b04e:	4b05      	ldr	r3, [pc, #20]	; (801b064 <std+0x40>)
 801b050:	62e3      	str	r3, [r4, #44]	; 0x2c
 801b052:	4b05      	ldr	r3, [pc, #20]	; (801b068 <std+0x44>)
 801b054:	6224      	str	r4, [r4, #32]
 801b056:	6323      	str	r3, [r4, #48]	; 0x30
 801b058:	bd10      	pop	{r4, pc}
 801b05a:	bf00      	nop
 801b05c:	0801bae5 	.word	0x0801bae5
 801b060:	0801bb07 	.word	0x0801bb07
 801b064:	0801bb3f 	.word	0x0801bb3f
 801b068:	0801bb63 	.word	0x0801bb63

0801b06c <_cleanup_r>:
 801b06c:	4901      	ldr	r1, [pc, #4]	; (801b074 <_cleanup_r+0x8>)
 801b06e:	f000 b885 	b.w	801b17c <_fwalk_reent>
 801b072:	bf00      	nop
 801b074:	0801afd1 	.word	0x0801afd1

0801b078 <__sfmoreglue>:
 801b078:	b570      	push	{r4, r5, r6, lr}
 801b07a:	1e4a      	subs	r2, r1, #1
 801b07c:	2568      	movs	r5, #104	; 0x68
 801b07e:	4355      	muls	r5, r2
 801b080:	460e      	mov	r6, r1
 801b082:	f105 0174 	add.w	r1, r5, #116	; 0x74
 801b086:	f7ff fc35 	bl	801a8f4 <_malloc_r>
 801b08a:	4604      	mov	r4, r0
 801b08c:	b140      	cbz	r0, 801b0a0 <__sfmoreglue+0x28>
 801b08e:	2100      	movs	r1, #0
 801b090:	e9c0 1600 	strd	r1, r6, [r0]
 801b094:	300c      	adds	r0, #12
 801b096:	60a0      	str	r0, [r4, #8]
 801b098:	f105 0268 	add.w	r2, r5, #104	; 0x68
 801b09c:	f7ff fbd3 	bl	801a846 <memset>
 801b0a0:	4620      	mov	r0, r4
 801b0a2:	bd70      	pop	{r4, r5, r6, pc}

0801b0a4 <__sinit>:
 801b0a4:	6983      	ldr	r3, [r0, #24]
 801b0a6:	b510      	push	{r4, lr}
 801b0a8:	4604      	mov	r4, r0
 801b0aa:	bb33      	cbnz	r3, 801b0fa <__sinit+0x56>
 801b0ac:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 801b0b0:	6503      	str	r3, [r0, #80]	; 0x50
 801b0b2:	4b12      	ldr	r3, [pc, #72]	; (801b0fc <__sinit+0x58>)
 801b0b4:	4a12      	ldr	r2, [pc, #72]	; (801b100 <__sinit+0x5c>)
 801b0b6:	681b      	ldr	r3, [r3, #0]
 801b0b8:	6282      	str	r2, [r0, #40]	; 0x28
 801b0ba:	4298      	cmp	r0, r3
 801b0bc:	bf04      	itt	eq
 801b0be:	2301      	moveq	r3, #1
 801b0c0:	6183      	streq	r3, [r0, #24]
 801b0c2:	f000 f81f 	bl	801b104 <__sfp>
 801b0c6:	6060      	str	r0, [r4, #4]
 801b0c8:	4620      	mov	r0, r4
 801b0ca:	f000 f81b 	bl	801b104 <__sfp>
 801b0ce:	60a0      	str	r0, [r4, #8]
 801b0d0:	4620      	mov	r0, r4
 801b0d2:	f000 f817 	bl	801b104 <__sfp>
 801b0d6:	2200      	movs	r2, #0
 801b0d8:	60e0      	str	r0, [r4, #12]
 801b0da:	2104      	movs	r1, #4
 801b0dc:	6860      	ldr	r0, [r4, #4]
 801b0de:	f7ff ffa1 	bl	801b024 <std>
 801b0e2:	2201      	movs	r2, #1
 801b0e4:	2109      	movs	r1, #9
 801b0e6:	68a0      	ldr	r0, [r4, #8]
 801b0e8:	f7ff ff9c 	bl	801b024 <std>
 801b0ec:	2202      	movs	r2, #2
 801b0ee:	2112      	movs	r1, #18
 801b0f0:	68e0      	ldr	r0, [r4, #12]
 801b0f2:	f7ff ff97 	bl	801b024 <std>
 801b0f6:	2301      	movs	r3, #1
 801b0f8:	61a3      	str	r3, [r4, #24]
 801b0fa:	bd10      	pop	{r4, pc}
 801b0fc:	0801c630 	.word	0x0801c630
 801b100:	0801b06d 	.word	0x0801b06d

0801b104 <__sfp>:
 801b104:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801b106:	4b1b      	ldr	r3, [pc, #108]	; (801b174 <__sfp+0x70>)
 801b108:	681e      	ldr	r6, [r3, #0]
 801b10a:	69b3      	ldr	r3, [r6, #24]
 801b10c:	4607      	mov	r7, r0
 801b10e:	b913      	cbnz	r3, 801b116 <__sfp+0x12>
 801b110:	4630      	mov	r0, r6
 801b112:	f7ff ffc7 	bl	801b0a4 <__sinit>
 801b116:	3648      	adds	r6, #72	; 0x48
 801b118:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 801b11c:	3b01      	subs	r3, #1
 801b11e:	d503      	bpl.n	801b128 <__sfp+0x24>
 801b120:	6833      	ldr	r3, [r6, #0]
 801b122:	b133      	cbz	r3, 801b132 <__sfp+0x2e>
 801b124:	6836      	ldr	r6, [r6, #0]
 801b126:	e7f7      	b.n	801b118 <__sfp+0x14>
 801b128:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 801b12c:	b16d      	cbz	r5, 801b14a <__sfp+0x46>
 801b12e:	3468      	adds	r4, #104	; 0x68
 801b130:	e7f4      	b.n	801b11c <__sfp+0x18>
 801b132:	2104      	movs	r1, #4
 801b134:	4638      	mov	r0, r7
 801b136:	f7ff ff9f 	bl	801b078 <__sfmoreglue>
 801b13a:	6030      	str	r0, [r6, #0]
 801b13c:	2800      	cmp	r0, #0
 801b13e:	d1f1      	bne.n	801b124 <__sfp+0x20>
 801b140:	230c      	movs	r3, #12
 801b142:	603b      	str	r3, [r7, #0]
 801b144:	4604      	mov	r4, r0
 801b146:	4620      	mov	r0, r4
 801b148:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801b14a:	4b0b      	ldr	r3, [pc, #44]	; (801b178 <__sfp+0x74>)
 801b14c:	6665      	str	r5, [r4, #100]	; 0x64
 801b14e:	e9c4 5500 	strd	r5, r5, [r4]
 801b152:	60a5      	str	r5, [r4, #8]
 801b154:	e9c4 3503 	strd	r3, r5, [r4, #12]
 801b158:	e9c4 5505 	strd	r5, r5, [r4, #20]
 801b15c:	2208      	movs	r2, #8
 801b15e:	4629      	mov	r1, r5
 801b160:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 801b164:	f7ff fb6f 	bl	801a846 <memset>
 801b168:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 801b16c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 801b170:	e7e9      	b.n	801b146 <__sfp+0x42>
 801b172:	bf00      	nop
 801b174:	0801c630 	.word	0x0801c630
 801b178:	ffff0001 	.word	0xffff0001

0801b17c <_fwalk_reent>:
 801b17c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801b180:	4680      	mov	r8, r0
 801b182:	4689      	mov	r9, r1
 801b184:	f100 0448 	add.w	r4, r0, #72	; 0x48
 801b188:	2600      	movs	r6, #0
 801b18a:	b914      	cbnz	r4, 801b192 <_fwalk_reent+0x16>
 801b18c:	4630      	mov	r0, r6
 801b18e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801b192:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 801b196:	3f01      	subs	r7, #1
 801b198:	d501      	bpl.n	801b19e <_fwalk_reent+0x22>
 801b19a:	6824      	ldr	r4, [r4, #0]
 801b19c:	e7f5      	b.n	801b18a <_fwalk_reent+0xe>
 801b19e:	89ab      	ldrh	r3, [r5, #12]
 801b1a0:	2b01      	cmp	r3, #1
 801b1a2:	d907      	bls.n	801b1b4 <_fwalk_reent+0x38>
 801b1a4:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 801b1a8:	3301      	adds	r3, #1
 801b1aa:	d003      	beq.n	801b1b4 <_fwalk_reent+0x38>
 801b1ac:	4629      	mov	r1, r5
 801b1ae:	4640      	mov	r0, r8
 801b1b0:	47c8      	blx	r9
 801b1b2:	4306      	orrs	r6, r0
 801b1b4:	3568      	adds	r5, #104	; 0x68
 801b1b6:	e7ee      	b.n	801b196 <_fwalk_reent+0x1a>

0801b1b8 <__locale_ctype_ptr_l>:
 801b1b8:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
 801b1bc:	4770      	bx	lr

0801b1be <__swhatbuf_r>:
 801b1be:	b570      	push	{r4, r5, r6, lr}
 801b1c0:	460e      	mov	r6, r1
 801b1c2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801b1c6:	2900      	cmp	r1, #0
 801b1c8:	b096      	sub	sp, #88	; 0x58
 801b1ca:	4614      	mov	r4, r2
 801b1cc:	461d      	mov	r5, r3
 801b1ce:	da07      	bge.n	801b1e0 <__swhatbuf_r+0x22>
 801b1d0:	2300      	movs	r3, #0
 801b1d2:	602b      	str	r3, [r5, #0]
 801b1d4:	89b3      	ldrh	r3, [r6, #12]
 801b1d6:	061a      	lsls	r2, r3, #24
 801b1d8:	d410      	bmi.n	801b1fc <__swhatbuf_r+0x3e>
 801b1da:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801b1de:	e00e      	b.n	801b1fe <__swhatbuf_r+0x40>
 801b1e0:	466a      	mov	r2, sp
 801b1e2:	f000 fcf1 	bl	801bbc8 <_fstat_r>
 801b1e6:	2800      	cmp	r0, #0
 801b1e8:	dbf2      	blt.n	801b1d0 <__swhatbuf_r+0x12>
 801b1ea:	9a01      	ldr	r2, [sp, #4]
 801b1ec:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 801b1f0:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 801b1f4:	425a      	negs	r2, r3
 801b1f6:	415a      	adcs	r2, r3
 801b1f8:	602a      	str	r2, [r5, #0]
 801b1fa:	e7ee      	b.n	801b1da <__swhatbuf_r+0x1c>
 801b1fc:	2340      	movs	r3, #64	; 0x40
 801b1fe:	2000      	movs	r0, #0
 801b200:	6023      	str	r3, [r4, #0]
 801b202:	b016      	add	sp, #88	; 0x58
 801b204:	bd70      	pop	{r4, r5, r6, pc}
	...

0801b208 <__smakebuf_r>:
 801b208:	898b      	ldrh	r3, [r1, #12]
 801b20a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 801b20c:	079d      	lsls	r5, r3, #30
 801b20e:	4606      	mov	r6, r0
 801b210:	460c      	mov	r4, r1
 801b212:	d507      	bpl.n	801b224 <__smakebuf_r+0x1c>
 801b214:	f104 0347 	add.w	r3, r4, #71	; 0x47
 801b218:	6023      	str	r3, [r4, #0]
 801b21a:	6123      	str	r3, [r4, #16]
 801b21c:	2301      	movs	r3, #1
 801b21e:	6163      	str	r3, [r4, #20]
 801b220:	b002      	add	sp, #8
 801b222:	bd70      	pop	{r4, r5, r6, pc}
 801b224:	ab01      	add	r3, sp, #4
 801b226:	466a      	mov	r2, sp
 801b228:	f7ff ffc9 	bl	801b1be <__swhatbuf_r>
 801b22c:	9900      	ldr	r1, [sp, #0]
 801b22e:	4605      	mov	r5, r0
 801b230:	4630      	mov	r0, r6
 801b232:	f7ff fb5f 	bl	801a8f4 <_malloc_r>
 801b236:	b948      	cbnz	r0, 801b24c <__smakebuf_r+0x44>
 801b238:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801b23c:	059a      	lsls	r2, r3, #22
 801b23e:	d4ef      	bmi.n	801b220 <__smakebuf_r+0x18>
 801b240:	f023 0303 	bic.w	r3, r3, #3
 801b244:	f043 0302 	orr.w	r3, r3, #2
 801b248:	81a3      	strh	r3, [r4, #12]
 801b24a:	e7e3      	b.n	801b214 <__smakebuf_r+0xc>
 801b24c:	4b0d      	ldr	r3, [pc, #52]	; (801b284 <__smakebuf_r+0x7c>)
 801b24e:	62b3      	str	r3, [r6, #40]	; 0x28
 801b250:	89a3      	ldrh	r3, [r4, #12]
 801b252:	6020      	str	r0, [r4, #0]
 801b254:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801b258:	81a3      	strh	r3, [r4, #12]
 801b25a:	9b00      	ldr	r3, [sp, #0]
 801b25c:	6163      	str	r3, [r4, #20]
 801b25e:	9b01      	ldr	r3, [sp, #4]
 801b260:	6120      	str	r0, [r4, #16]
 801b262:	b15b      	cbz	r3, 801b27c <__smakebuf_r+0x74>
 801b264:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801b268:	4630      	mov	r0, r6
 801b26a:	f000 fcbf 	bl	801bbec <_isatty_r>
 801b26e:	b128      	cbz	r0, 801b27c <__smakebuf_r+0x74>
 801b270:	89a3      	ldrh	r3, [r4, #12]
 801b272:	f023 0303 	bic.w	r3, r3, #3
 801b276:	f043 0301 	orr.w	r3, r3, #1
 801b27a:	81a3      	strh	r3, [r4, #12]
 801b27c:	89a3      	ldrh	r3, [r4, #12]
 801b27e:	431d      	orrs	r5, r3
 801b280:	81a5      	strh	r5, [r4, #12]
 801b282:	e7cd      	b.n	801b220 <__smakebuf_r+0x18>
 801b284:	0801b06d 	.word	0x0801b06d

0801b288 <__ascii_mbtowc>:
 801b288:	b082      	sub	sp, #8
 801b28a:	b901      	cbnz	r1, 801b28e <__ascii_mbtowc+0x6>
 801b28c:	a901      	add	r1, sp, #4
 801b28e:	b142      	cbz	r2, 801b2a2 <__ascii_mbtowc+0x1a>
 801b290:	b14b      	cbz	r3, 801b2a6 <__ascii_mbtowc+0x1e>
 801b292:	7813      	ldrb	r3, [r2, #0]
 801b294:	600b      	str	r3, [r1, #0]
 801b296:	7812      	ldrb	r2, [r2, #0]
 801b298:	1c10      	adds	r0, r2, #0
 801b29a:	bf18      	it	ne
 801b29c:	2001      	movne	r0, #1
 801b29e:	b002      	add	sp, #8
 801b2a0:	4770      	bx	lr
 801b2a2:	4610      	mov	r0, r2
 801b2a4:	e7fb      	b.n	801b29e <__ascii_mbtowc+0x16>
 801b2a6:	f06f 0001 	mvn.w	r0, #1
 801b2aa:	e7f8      	b.n	801b29e <__ascii_mbtowc+0x16>

0801b2ac <__malloc_lock>:
 801b2ac:	4770      	bx	lr

0801b2ae <__malloc_unlock>:
 801b2ae:	4770      	bx	lr

0801b2b0 <__ssputs_r>:
 801b2b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801b2b4:	688e      	ldr	r6, [r1, #8]
 801b2b6:	429e      	cmp	r6, r3
 801b2b8:	4682      	mov	sl, r0
 801b2ba:	460c      	mov	r4, r1
 801b2bc:	4690      	mov	r8, r2
 801b2be:	4699      	mov	r9, r3
 801b2c0:	d837      	bhi.n	801b332 <__ssputs_r+0x82>
 801b2c2:	898a      	ldrh	r2, [r1, #12]
 801b2c4:	f412 6f90 	tst.w	r2, #1152	; 0x480
 801b2c8:	d031      	beq.n	801b32e <__ssputs_r+0x7e>
 801b2ca:	6825      	ldr	r5, [r4, #0]
 801b2cc:	6909      	ldr	r1, [r1, #16]
 801b2ce:	1a6f      	subs	r7, r5, r1
 801b2d0:	6965      	ldr	r5, [r4, #20]
 801b2d2:	2302      	movs	r3, #2
 801b2d4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801b2d8:	fb95 f5f3 	sdiv	r5, r5, r3
 801b2dc:	f109 0301 	add.w	r3, r9, #1
 801b2e0:	443b      	add	r3, r7
 801b2e2:	429d      	cmp	r5, r3
 801b2e4:	bf38      	it	cc
 801b2e6:	461d      	movcc	r5, r3
 801b2e8:	0553      	lsls	r3, r2, #21
 801b2ea:	d530      	bpl.n	801b34e <__ssputs_r+0x9e>
 801b2ec:	4629      	mov	r1, r5
 801b2ee:	f7ff fb01 	bl	801a8f4 <_malloc_r>
 801b2f2:	4606      	mov	r6, r0
 801b2f4:	b950      	cbnz	r0, 801b30c <__ssputs_r+0x5c>
 801b2f6:	230c      	movs	r3, #12
 801b2f8:	f8ca 3000 	str.w	r3, [sl]
 801b2fc:	89a3      	ldrh	r3, [r4, #12]
 801b2fe:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801b302:	81a3      	strh	r3, [r4, #12]
 801b304:	f04f 30ff 	mov.w	r0, #4294967295
 801b308:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801b30c:	463a      	mov	r2, r7
 801b30e:	6921      	ldr	r1, [r4, #16]
 801b310:	f7ff fa8e 	bl	801a830 <memcpy>
 801b314:	89a3      	ldrh	r3, [r4, #12]
 801b316:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 801b31a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801b31e:	81a3      	strh	r3, [r4, #12]
 801b320:	6126      	str	r6, [r4, #16]
 801b322:	6165      	str	r5, [r4, #20]
 801b324:	443e      	add	r6, r7
 801b326:	1bed      	subs	r5, r5, r7
 801b328:	6026      	str	r6, [r4, #0]
 801b32a:	60a5      	str	r5, [r4, #8]
 801b32c:	464e      	mov	r6, r9
 801b32e:	454e      	cmp	r6, r9
 801b330:	d900      	bls.n	801b334 <__ssputs_r+0x84>
 801b332:	464e      	mov	r6, r9
 801b334:	4632      	mov	r2, r6
 801b336:	4641      	mov	r1, r8
 801b338:	6820      	ldr	r0, [r4, #0]
 801b33a:	f000 fc79 	bl	801bc30 <memmove>
 801b33e:	68a3      	ldr	r3, [r4, #8]
 801b340:	1b9b      	subs	r3, r3, r6
 801b342:	60a3      	str	r3, [r4, #8]
 801b344:	6823      	ldr	r3, [r4, #0]
 801b346:	441e      	add	r6, r3
 801b348:	6026      	str	r6, [r4, #0]
 801b34a:	2000      	movs	r0, #0
 801b34c:	e7dc      	b.n	801b308 <__ssputs_r+0x58>
 801b34e:	462a      	mov	r2, r5
 801b350:	f000 fc87 	bl	801bc62 <_realloc_r>
 801b354:	4606      	mov	r6, r0
 801b356:	2800      	cmp	r0, #0
 801b358:	d1e2      	bne.n	801b320 <__ssputs_r+0x70>
 801b35a:	6921      	ldr	r1, [r4, #16]
 801b35c:	4650      	mov	r0, sl
 801b35e:	f7ff fa7b 	bl	801a858 <_free_r>
 801b362:	e7c8      	b.n	801b2f6 <__ssputs_r+0x46>

0801b364 <_svfiprintf_r>:
 801b364:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b368:	461d      	mov	r5, r3
 801b36a:	898b      	ldrh	r3, [r1, #12]
 801b36c:	061f      	lsls	r7, r3, #24
 801b36e:	b09d      	sub	sp, #116	; 0x74
 801b370:	4680      	mov	r8, r0
 801b372:	460c      	mov	r4, r1
 801b374:	4616      	mov	r6, r2
 801b376:	d50f      	bpl.n	801b398 <_svfiprintf_r+0x34>
 801b378:	690b      	ldr	r3, [r1, #16]
 801b37a:	b96b      	cbnz	r3, 801b398 <_svfiprintf_r+0x34>
 801b37c:	2140      	movs	r1, #64	; 0x40
 801b37e:	f7ff fab9 	bl	801a8f4 <_malloc_r>
 801b382:	6020      	str	r0, [r4, #0]
 801b384:	6120      	str	r0, [r4, #16]
 801b386:	b928      	cbnz	r0, 801b394 <_svfiprintf_r+0x30>
 801b388:	230c      	movs	r3, #12
 801b38a:	f8c8 3000 	str.w	r3, [r8]
 801b38e:	f04f 30ff 	mov.w	r0, #4294967295
 801b392:	e0c8      	b.n	801b526 <_svfiprintf_r+0x1c2>
 801b394:	2340      	movs	r3, #64	; 0x40
 801b396:	6163      	str	r3, [r4, #20]
 801b398:	2300      	movs	r3, #0
 801b39a:	9309      	str	r3, [sp, #36]	; 0x24
 801b39c:	2320      	movs	r3, #32
 801b39e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801b3a2:	2330      	movs	r3, #48	; 0x30
 801b3a4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801b3a8:	9503      	str	r5, [sp, #12]
 801b3aa:	f04f 0b01 	mov.w	fp, #1
 801b3ae:	4637      	mov	r7, r6
 801b3b0:	463d      	mov	r5, r7
 801b3b2:	f815 3b01 	ldrb.w	r3, [r5], #1
 801b3b6:	b10b      	cbz	r3, 801b3bc <_svfiprintf_r+0x58>
 801b3b8:	2b25      	cmp	r3, #37	; 0x25
 801b3ba:	d13e      	bne.n	801b43a <_svfiprintf_r+0xd6>
 801b3bc:	ebb7 0a06 	subs.w	sl, r7, r6
 801b3c0:	d00b      	beq.n	801b3da <_svfiprintf_r+0x76>
 801b3c2:	4653      	mov	r3, sl
 801b3c4:	4632      	mov	r2, r6
 801b3c6:	4621      	mov	r1, r4
 801b3c8:	4640      	mov	r0, r8
 801b3ca:	f7ff ff71 	bl	801b2b0 <__ssputs_r>
 801b3ce:	3001      	adds	r0, #1
 801b3d0:	f000 80a4 	beq.w	801b51c <_svfiprintf_r+0x1b8>
 801b3d4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801b3d6:	4453      	add	r3, sl
 801b3d8:	9309      	str	r3, [sp, #36]	; 0x24
 801b3da:	783b      	ldrb	r3, [r7, #0]
 801b3dc:	2b00      	cmp	r3, #0
 801b3de:	f000 809d 	beq.w	801b51c <_svfiprintf_r+0x1b8>
 801b3e2:	2300      	movs	r3, #0
 801b3e4:	f04f 32ff 	mov.w	r2, #4294967295
 801b3e8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801b3ec:	9304      	str	r3, [sp, #16]
 801b3ee:	9307      	str	r3, [sp, #28]
 801b3f0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801b3f4:	931a      	str	r3, [sp, #104]	; 0x68
 801b3f6:	462f      	mov	r7, r5
 801b3f8:	2205      	movs	r2, #5
 801b3fa:	f817 1b01 	ldrb.w	r1, [r7], #1
 801b3fe:	4850      	ldr	r0, [pc, #320]	; (801b540 <_svfiprintf_r+0x1dc>)
 801b400:	f7e4 ff76 	bl	80002f0 <memchr>
 801b404:	9b04      	ldr	r3, [sp, #16]
 801b406:	b9d0      	cbnz	r0, 801b43e <_svfiprintf_r+0xda>
 801b408:	06d9      	lsls	r1, r3, #27
 801b40a:	bf44      	itt	mi
 801b40c:	2220      	movmi	r2, #32
 801b40e:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 801b412:	071a      	lsls	r2, r3, #28
 801b414:	bf44      	itt	mi
 801b416:	222b      	movmi	r2, #43	; 0x2b
 801b418:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 801b41c:	782a      	ldrb	r2, [r5, #0]
 801b41e:	2a2a      	cmp	r2, #42	; 0x2a
 801b420:	d015      	beq.n	801b44e <_svfiprintf_r+0xea>
 801b422:	9a07      	ldr	r2, [sp, #28]
 801b424:	462f      	mov	r7, r5
 801b426:	2000      	movs	r0, #0
 801b428:	250a      	movs	r5, #10
 801b42a:	4639      	mov	r1, r7
 801b42c:	f811 3b01 	ldrb.w	r3, [r1], #1
 801b430:	3b30      	subs	r3, #48	; 0x30
 801b432:	2b09      	cmp	r3, #9
 801b434:	d94d      	bls.n	801b4d2 <_svfiprintf_r+0x16e>
 801b436:	b1b8      	cbz	r0, 801b468 <_svfiprintf_r+0x104>
 801b438:	e00f      	b.n	801b45a <_svfiprintf_r+0xf6>
 801b43a:	462f      	mov	r7, r5
 801b43c:	e7b8      	b.n	801b3b0 <_svfiprintf_r+0x4c>
 801b43e:	4a40      	ldr	r2, [pc, #256]	; (801b540 <_svfiprintf_r+0x1dc>)
 801b440:	1a80      	subs	r0, r0, r2
 801b442:	fa0b f000 	lsl.w	r0, fp, r0
 801b446:	4318      	orrs	r0, r3
 801b448:	9004      	str	r0, [sp, #16]
 801b44a:	463d      	mov	r5, r7
 801b44c:	e7d3      	b.n	801b3f6 <_svfiprintf_r+0x92>
 801b44e:	9a03      	ldr	r2, [sp, #12]
 801b450:	1d11      	adds	r1, r2, #4
 801b452:	6812      	ldr	r2, [r2, #0]
 801b454:	9103      	str	r1, [sp, #12]
 801b456:	2a00      	cmp	r2, #0
 801b458:	db01      	blt.n	801b45e <_svfiprintf_r+0xfa>
 801b45a:	9207      	str	r2, [sp, #28]
 801b45c:	e004      	b.n	801b468 <_svfiprintf_r+0x104>
 801b45e:	4252      	negs	r2, r2
 801b460:	f043 0302 	orr.w	r3, r3, #2
 801b464:	9207      	str	r2, [sp, #28]
 801b466:	9304      	str	r3, [sp, #16]
 801b468:	783b      	ldrb	r3, [r7, #0]
 801b46a:	2b2e      	cmp	r3, #46	; 0x2e
 801b46c:	d10c      	bne.n	801b488 <_svfiprintf_r+0x124>
 801b46e:	787b      	ldrb	r3, [r7, #1]
 801b470:	2b2a      	cmp	r3, #42	; 0x2a
 801b472:	d133      	bne.n	801b4dc <_svfiprintf_r+0x178>
 801b474:	9b03      	ldr	r3, [sp, #12]
 801b476:	1d1a      	adds	r2, r3, #4
 801b478:	681b      	ldr	r3, [r3, #0]
 801b47a:	9203      	str	r2, [sp, #12]
 801b47c:	2b00      	cmp	r3, #0
 801b47e:	bfb8      	it	lt
 801b480:	f04f 33ff 	movlt.w	r3, #4294967295
 801b484:	3702      	adds	r7, #2
 801b486:	9305      	str	r3, [sp, #20]
 801b488:	4d2e      	ldr	r5, [pc, #184]	; (801b544 <_svfiprintf_r+0x1e0>)
 801b48a:	7839      	ldrb	r1, [r7, #0]
 801b48c:	2203      	movs	r2, #3
 801b48e:	4628      	mov	r0, r5
 801b490:	f7e4 ff2e 	bl	80002f0 <memchr>
 801b494:	b138      	cbz	r0, 801b4a6 <_svfiprintf_r+0x142>
 801b496:	2340      	movs	r3, #64	; 0x40
 801b498:	1b40      	subs	r0, r0, r5
 801b49a:	fa03 f000 	lsl.w	r0, r3, r0
 801b49e:	9b04      	ldr	r3, [sp, #16]
 801b4a0:	4303      	orrs	r3, r0
 801b4a2:	3701      	adds	r7, #1
 801b4a4:	9304      	str	r3, [sp, #16]
 801b4a6:	7839      	ldrb	r1, [r7, #0]
 801b4a8:	4827      	ldr	r0, [pc, #156]	; (801b548 <_svfiprintf_r+0x1e4>)
 801b4aa:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801b4ae:	2206      	movs	r2, #6
 801b4b0:	1c7e      	adds	r6, r7, #1
 801b4b2:	f7e4 ff1d 	bl	80002f0 <memchr>
 801b4b6:	2800      	cmp	r0, #0
 801b4b8:	d038      	beq.n	801b52c <_svfiprintf_r+0x1c8>
 801b4ba:	4b24      	ldr	r3, [pc, #144]	; (801b54c <_svfiprintf_r+0x1e8>)
 801b4bc:	bb13      	cbnz	r3, 801b504 <_svfiprintf_r+0x1a0>
 801b4be:	9b03      	ldr	r3, [sp, #12]
 801b4c0:	3307      	adds	r3, #7
 801b4c2:	f023 0307 	bic.w	r3, r3, #7
 801b4c6:	3308      	adds	r3, #8
 801b4c8:	9303      	str	r3, [sp, #12]
 801b4ca:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801b4cc:	444b      	add	r3, r9
 801b4ce:	9309      	str	r3, [sp, #36]	; 0x24
 801b4d0:	e76d      	b.n	801b3ae <_svfiprintf_r+0x4a>
 801b4d2:	fb05 3202 	mla	r2, r5, r2, r3
 801b4d6:	2001      	movs	r0, #1
 801b4d8:	460f      	mov	r7, r1
 801b4da:	e7a6      	b.n	801b42a <_svfiprintf_r+0xc6>
 801b4dc:	2300      	movs	r3, #0
 801b4de:	3701      	adds	r7, #1
 801b4e0:	9305      	str	r3, [sp, #20]
 801b4e2:	4619      	mov	r1, r3
 801b4e4:	250a      	movs	r5, #10
 801b4e6:	4638      	mov	r0, r7
 801b4e8:	f810 2b01 	ldrb.w	r2, [r0], #1
 801b4ec:	3a30      	subs	r2, #48	; 0x30
 801b4ee:	2a09      	cmp	r2, #9
 801b4f0:	d903      	bls.n	801b4fa <_svfiprintf_r+0x196>
 801b4f2:	2b00      	cmp	r3, #0
 801b4f4:	d0c8      	beq.n	801b488 <_svfiprintf_r+0x124>
 801b4f6:	9105      	str	r1, [sp, #20]
 801b4f8:	e7c6      	b.n	801b488 <_svfiprintf_r+0x124>
 801b4fa:	fb05 2101 	mla	r1, r5, r1, r2
 801b4fe:	2301      	movs	r3, #1
 801b500:	4607      	mov	r7, r0
 801b502:	e7f0      	b.n	801b4e6 <_svfiprintf_r+0x182>
 801b504:	ab03      	add	r3, sp, #12
 801b506:	9300      	str	r3, [sp, #0]
 801b508:	4622      	mov	r2, r4
 801b50a:	4b11      	ldr	r3, [pc, #68]	; (801b550 <_svfiprintf_r+0x1ec>)
 801b50c:	a904      	add	r1, sp, #16
 801b50e:	4640      	mov	r0, r8
 801b510:	f3af 8000 	nop.w
 801b514:	f1b0 3fff 	cmp.w	r0, #4294967295
 801b518:	4681      	mov	r9, r0
 801b51a:	d1d6      	bne.n	801b4ca <_svfiprintf_r+0x166>
 801b51c:	89a3      	ldrh	r3, [r4, #12]
 801b51e:	065b      	lsls	r3, r3, #25
 801b520:	f53f af35 	bmi.w	801b38e <_svfiprintf_r+0x2a>
 801b524:	9809      	ldr	r0, [sp, #36]	; 0x24
 801b526:	b01d      	add	sp, #116	; 0x74
 801b528:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801b52c:	ab03      	add	r3, sp, #12
 801b52e:	9300      	str	r3, [sp, #0]
 801b530:	4622      	mov	r2, r4
 801b532:	4b07      	ldr	r3, [pc, #28]	; (801b550 <_svfiprintf_r+0x1ec>)
 801b534:	a904      	add	r1, sp, #16
 801b536:	4640      	mov	r0, r8
 801b538:	f000 f9c2 	bl	801b8c0 <_printf_i>
 801b53c:	e7ea      	b.n	801b514 <_svfiprintf_r+0x1b0>
 801b53e:	bf00      	nop
 801b540:	0801c69e 	.word	0x0801c69e
 801b544:	0801c6a4 	.word	0x0801c6a4
 801b548:	0801c6a8 	.word	0x0801c6a8
 801b54c:	00000000 	.word	0x00000000
 801b550:	0801b2b1 	.word	0x0801b2b1

0801b554 <__sfputc_r>:
 801b554:	6893      	ldr	r3, [r2, #8]
 801b556:	3b01      	subs	r3, #1
 801b558:	2b00      	cmp	r3, #0
 801b55a:	b410      	push	{r4}
 801b55c:	6093      	str	r3, [r2, #8]
 801b55e:	da08      	bge.n	801b572 <__sfputc_r+0x1e>
 801b560:	6994      	ldr	r4, [r2, #24]
 801b562:	42a3      	cmp	r3, r4
 801b564:	db01      	blt.n	801b56a <__sfputc_r+0x16>
 801b566:	290a      	cmp	r1, #10
 801b568:	d103      	bne.n	801b572 <__sfputc_r+0x1e>
 801b56a:	f85d 4b04 	ldr.w	r4, [sp], #4
 801b56e:	f7ff bbe9 	b.w	801ad44 <__swbuf_r>
 801b572:	6813      	ldr	r3, [r2, #0]
 801b574:	1c58      	adds	r0, r3, #1
 801b576:	6010      	str	r0, [r2, #0]
 801b578:	7019      	strb	r1, [r3, #0]
 801b57a:	4608      	mov	r0, r1
 801b57c:	f85d 4b04 	ldr.w	r4, [sp], #4
 801b580:	4770      	bx	lr

0801b582 <__sfputs_r>:
 801b582:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801b584:	4606      	mov	r6, r0
 801b586:	460f      	mov	r7, r1
 801b588:	4614      	mov	r4, r2
 801b58a:	18d5      	adds	r5, r2, r3
 801b58c:	42ac      	cmp	r4, r5
 801b58e:	d101      	bne.n	801b594 <__sfputs_r+0x12>
 801b590:	2000      	movs	r0, #0
 801b592:	e007      	b.n	801b5a4 <__sfputs_r+0x22>
 801b594:	463a      	mov	r2, r7
 801b596:	f814 1b01 	ldrb.w	r1, [r4], #1
 801b59a:	4630      	mov	r0, r6
 801b59c:	f7ff ffda 	bl	801b554 <__sfputc_r>
 801b5a0:	1c43      	adds	r3, r0, #1
 801b5a2:	d1f3      	bne.n	801b58c <__sfputs_r+0xa>
 801b5a4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0801b5a8 <_vfiprintf_r>:
 801b5a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b5ac:	460c      	mov	r4, r1
 801b5ae:	b09d      	sub	sp, #116	; 0x74
 801b5b0:	4617      	mov	r7, r2
 801b5b2:	461d      	mov	r5, r3
 801b5b4:	4606      	mov	r6, r0
 801b5b6:	b118      	cbz	r0, 801b5c0 <_vfiprintf_r+0x18>
 801b5b8:	6983      	ldr	r3, [r0, #24]
 801b5ba:	b90b      	cbnz	r3, 801b5c0 <_vfiprintf_r+0x18>
 801b5bc:	f7ff fd72 	bl	801b0a4 <__sinit>
 801b5c0:	4b7c      	ldr	r3, [pc, #496]	; (801b7b4 <_vfiprintf_r+0x20c>)
 801b5c2:	429c      	cmp	r4, r3
 801b5c4:	d158      	bne.n	801b678 <_vfiprintf_r+0xd0>
 801b5c6:	6874      	ldr	r4, [r6, #4]
 801b5c8:	89a3      	ldrh	r3, [r4, #12]
 801b5ca:	0718      	lsls	r0, r3, #28
 801b5cc:	d55e      	bpl.n	801b68c <_vfiprintf_r+0xe4>
 801b5ce:	6923      	ldr	r3, [r4, #16]
 801b5d0:	2b00      	cmp	r3, #0
 801b5d2:	d05b      	beq.n	801b68c <_vfiprintf_r+0xe4>
 801b5d4:	2300      	movs	r3, #0
 801b5d6:	9309      	str	r3, [sp, #36]	; 0x24
 801b5d8:	2320      	movs	r3, #32
 801b5da:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801b5de:	2330      	movs	r3, #48	; 0x30
 801b5e0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801b5e4:	9503      	str	r5, [sp, #12]
 801b5e6:	f04f 0b01 	mov.w	fp, #1
 801b5ea:	46b8      	mov	r8, r7
 801b5ec:	4645      	mov	r5, r8
 801b5ee:	f815 3b01 	ldrb.w	r3, [r5], #1
 801b5f2:	b10b      	cbz	r3, 801b5f8 <_vfiprintf_r+0x50>
 801b5f4:	2b25      	cmp	r3, #37	; 0x25
 801b5f6:	d154      	bne.n	801b6a2 <_vfiprintf_r+0xfa>
 801b5f8:	ebb8 0a07 	subs.w	sl, r8, r7
 801b5fc:	d00b      	beq.n	801b616 <_vfiprintf_r+0x6e>
 801b5fe:	4653      	mov	r3, sl
 801b600:	463a      	mov	r2, r7
 801b602:	4621      	mov	r1, r4
 801b604:	4630      	mov	r0, r6
 801b606:	f7ff ffbc 	bl	801b582 <__sfputs_r>
 801b60a:	3001      	adds	r0, #1
 801b60c:	f000 80c2 	beq.w	801b794 <_vfiprintf_r+0x1ec>
 801b610:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801b612:	4453      	add	r3, sl
 801b614:	9309      	str	r3, [sp, #36]	; 0x24
 801b616:	f898 3000 	ldrb.w	r3, [r8]
 801b61a:	2b00      	cmp	r3, #0
 801b61c:	f000 80ba 	beq.w	801b794 <_vfiprintf_r+0x1ec>
 801b620:	2300      	movs	r3, #0
 801b622:	f04f 32ff 	mov.w	r2, #4294967295
 801b626:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801b62a:	9304      	str	r3, [sp, #16]
 801b62c:	9307      	str	r3, [sp, #28]
 801b62e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801b632:	931a      	str	r3, [sp, #104]	; 0x68
 801b634:	46a8      	mov	r8, r5
 801b636:	2205      	movs	r2, #5
 801b638:	f818 1b01 	ldrb.w	r1, [r8], #1
 801b63c:	485e      	ldr	r0, [pc, #376]	; (801b7b8 <_vfiprintf_r+0x210>)
 801b63e:	f7e4 fe57 	bl	80002f0 <memchr>
 801b642:	9b04      	ldr	r3, [sp, #16]
 801b644:	bb78      	cbnz	r0, 801b6a6 <_vfiprintf_r+0xfe>
 801b646:	06d9      	lsls	r1, r3, #27
 801b648:	bf44      	itt	mi
 801b64a:	2220      	movmi	r2, #32
 801b64c:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 801b650:	071a      	lsls	r2, r3, #28
 801b652:	bf44      	itt	mi
 801b654:	222b      	movmi	r2, #43	; 0x2b
 801b656:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 801b65a:	782a      	ldrb	r2, [r5, #0]
 801b65c:	2a2a      	cmp	r2, #42	; 0x2a
 801b65e:	d02a      	beq.n	801b6b6 <_vfiprintf_r+0x10e>
 801b660:	9a07      	ldr	r2, [sp, #28]
 801b662:	46a8      	mov	r8, r5
 801b664:	2000      	movs	r0, #0
 801b666:	250a      	movs	r5, #10
 801b668:	4641      	mov	r1, r8
 801b66a:	f811 3b01 	ldrb.w	r3, [r1], #1
 801b66e:	3b30      	subs	r3, #48	; 0x30
 801b670:	2b09      	cmp	r3, #9
 801b672:	d969      	bls.n	801b748 <_vfiprintf_r+0x1a0>
 801b674:	b360      	cbz	r0, 801b6d0 <_vfiprintf_r+0x128>
 801b676:	e024      	b.n	801b6c2 <_vfiprintf_r+0x11a>
 801b678:	4b50      	ldr	r3, [pc, #320]	; (801b7bc <_vfiprintf_r+0x214>)
 801b67a:	429c      	cmp	r4, r3
 801b67c:	d101      	bne.n	801b682 <_vfiprintf_r+0xda>
 801b67e:	68b4      	ldr	r4, [r6, #8]
 801b680:	e7a2      	b.n	801b5c8 <_vfiprintf_r+0x20>
 801b682:	4b4f      	ldr	r3, [pc, #316]	; (801b7c0 <_vfiprintf_r+0x218>)
 801b684:	429c      	cmp	r4, r3
 801b686:	bf08      	it	eq
 801b688:	68f4      	ldreq	r4, [r6, #12]
 801b68a:	e79d      	b.n	801b5c8 <_vfiprintf_r+0x20>
 801b68c:	4621      	mov	r1, r4
 801b68e:	4630      	mov	r0, r6
 801b690:	f7ff fbaa 	bl	801ade8 <__swsetup_r>
 801b694:	2800      	cmp	r0, #0
 801b696:	d09d      	beq.n	801b5d4 <_vfiprintf_r+0x2c>
 801b698:	f04f 30ff 	mov.w	r0, #4294967295
 801b69c:	b01d      	add	sp, #116	; 0x74
 801b69e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801b6a2:	46a8      	mov	r8, r5
 801b6a4:	e7a2      	b.n	801b5ec <_vfiprintf_r+0x44>
 801b6a6:	4a44      	ldr	r2, [pc, #272]	; (801b7b8 <_vfiprintf_r+0x210>)
 801b6a8:	1a80      	subs	r0, r0, r2
 801b6aa:	fa0b f000 	lsl.w	r0, fp, r0
 801b6ae:	4318      	orrs	r0, r3
 801b6b0:	9004      	str	r0, [sp, #16]
 801b6b2:	4645      	mov	r5, r8
 801b6b4:	e7be      	b.n	801b634 <_vfiprintf_r+0x8c>
 801b6b6:	9a03      	ldr	r2, [sp, #12]
 801b6b8:	1d11      	adds	r1, r2, #4
 801b6ba:	6812      	ldr	r2, [r2, #0]
 801b6bc:	9103      	str	r1, [sp, #12]
 801b6be:	2a00      	cmp	r2, #0
 801b6c0:	db01      	blt.n	801b6c6 <_vfiprintf_r+0x11e>
 801b6c2:	9207      	str	r2, [sp, #28]
 801b6c4:	e004      	b.n	801b6d0 <_vfiprintf_r+0x128>
 801b6c6:	4252      	negs	r2, r2
 801b6c8:	f043 0302 	orr.w	r3, r3, #2
 801b6cc:	9207      	str	r2, [sp, #28]
 801b6ce:	9304      	str	r3, [sp, #16]
 801b6d0:	f898 3000 	ldrb.w	r3, [r8]
 801b6d4:	2b2e      	cmp	r3, #46	; 0x2e
 801b6d6:	d10e      	bne.n	801b6f6 <_vfiprintf_r+0x14e>
 801b6d8:	f898 3001 	ldrb.w	r3, [r8, #1]
 801b6dc:	2b2a      	cmp	r3, #42	; 0x2a
 801b6de:	d138      	bne.n	801b752 <_vfiprintf_r+0x1aa>
 801b6e0:	9b03      	ldr	r3, [sp, #12]
 801b6e2:	1d1a      	adds	r2, r3, #4
 801b6e4:	681b      	ldr	r3, [r3, #0]
 801b6e6:	9203      	str	r2, [sp, #12]
 801b6e8:	2b00      	cmp	r3, #0
 801b6ea:	bfb8      	it	lt
 801b6ec:	f04f 33ff 	movlt.w	r3, #4294967295
 801b6f0:	f108 0802 	add.w	r8, r8, #2
 801b6f4:	9305      	str	r3, [sp, #20]
 801b6f6:	4d33      	ldr	r5, [pc, #204]	; (801b7c4 <_vfiprintf_r+0x21c>)
 801b6f8:	f898 1000 	ldrb.w	r1, [r8]
 801b6fc:	2203      	movs	r2, #3
 801b6fe:	4628      	mov	r0, r5
 801b700:	f7e4 fdf6 	bl	80002f0 <memchr>
 801b704:	b140      	cbz	r0, 801b718 <_vfiprintf_r+0x170>
 801b706:	2340      	movs	r3, #64	; 0x40
 801b708:	1b40      	subs	r0, r0, r5
 801b70a:	fa03 f000 	lsl.w	r0, r3, r0
 801b70e:	9b04      	ldr	r3, [sp, #16]
 801b710:	4303      	orrs	r3, r0
 801b712:	f108 0801 	add.w	r8, r8, #1
 801b716:	9304      	str	r3, [sp, #16]
 801b718:	f898 1000 	ldrb.w	r1, [r8]
 801b71c:	482a      	ldr	r0, [pc, #168]	; (801b7c8 <_vfiprintf_r+0x220>)
 801b71e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801b722:	2206      	movs	r2, #6
 801b724:	f108 0701 	add.w	r7, r8, #1
 801b728:	f7e4 fde2 	bl	80002f0 <memchr>
 801b72c:	2800      	cmp	r0, #0
 801b72e:	d037      	beq.n	801b7a0 <_vfiprintf_r+0x1f8>
 801b730:	4b26      	ldr	r3, [pc, #152]	; (801b7cc <_vfiprintf_r+0x224>)
 801b732:	bb1b      	cbnz	r3, 801b77c <_vfiprintf_r+0x1d4>
 801b734:	9b03      	ldr	r3, [sp, #12]
 801b736:	3307      	adds	r3, #7
 801b738:	f023 0307 	bic.w	r3, r3, #7
 801b73c:	3308      	adds	r3, #8
 801b73e:	9303      	str	r3, [sp, #12]
 801b740:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801b742:	444b      	add	r3, r9
 801b744:	9309      	str	r3, [sp, #36]	; 0x24
 801b746:	e750      	b.n	801b5ea <_vfiprintf_r+0x42>
 801b748:	fb05 3202 	mla	r2, r5, r2, r3
 801b74c:	2001      	movs	r0, #1
 801b74e:	4688      	mov	r8, r1
 801b750:	e78a      	b.n	801b668 <_vfiprintf_r+0xc0>
 801b752:	2300      	movs	r3, #0
 801b754:	f108 0801 	add.w	r8, r8, #1
 801b758:	9305      	str	r3, [sp, #20]
 801b75a:	4619      	mov	r1, r3
 801b75c:	250a      	movs	r5, #10
 801b75e:	4640      	mov	r0, r8
 801b760:	f810 2b01 	ldrb.w	r2, [r0], #1
 801b764:	3a30      	subs	r2, #48	; 0x30
 801b766:	2a09      	cmp	r2, #9
 801b768:	d903      	bls.n	801b772 <_vfiprintf_r+0x1ca>
 801b76a:	2b00      	cmp	r3, #0
 801b76c:	d0c3      	beq.n	801b6f6 <_vfiprintf_r+0x14e>
 801b76e:	9105      	str	r1, [sp, #20]
 801b770:	e7c1      	b.n	801b6f6 <_vfiprintf_r+0x14e>
 801b772:	fb05 2101 	mla	r1, r5, r1, r2
 801b776:	2301      	movs	r3, #1
 801b778:	4680      	mov	r8, r0
 801b77a:	e7f0      	b.n	801b75e <_vfiprintf_r+0x1b6>
 801b77c:	ab03      	add	r3, sp, #12
 801b77e:	9300      	str	r3, [sp, #0]
 801b780:	4622      	mov	r2, r4
 801b782:	4b13      	ldr	r3, [pc, #76]	; (801b7d0 <_vfiprintf_r+0x228>)
 801b784:	a904      	add	r1, sp, #16
 801b786:	4630      	mov	r0, r6
 801b788:	f3af 8000 	nop.w
 801b78c:	f1b0 3fff 	cmp.w	r0, #4294967295
 801b790:	4681      	mov	r9, r0
 801b792:	d1d5      	bne.n	801b740 <_vfiprintf_r+0x198>
 801b794:	89a3      	ldrh	r3, [r4, #12]
 801b796:	065b      	lsls	r3, r3, #25
 801b798:	f53f af7e 	bmi.w	801b698 <_vfiprintf_r+0xf0>
 801b79c:	9809      	ldr	r0, [sp, #36]	; 0x24
 801b79e:	e77d      	b.n	801b69c <_vfiprintf_r+0xf4>
 801b7a0:	ab03      	add	r3, sp, #12
 801b7a2:	9300      	str	r3, [sp, #0]
 801b7a4:	4622      	mov	r2, r4
 801b7a6:	4b0a      	ldr	r3, [pc, #40]	; (801b7d0 <_vfiprintf_r+0x228>)
 801b7a8:	a904      	add	r1, sp, #16
 801b7aa:	4630      	mov	r0, r6
 801b7ac:	f000 f888 	bl	801b8c0 <_printf_i>
 801b7b0:	e7ec      	b.n	801b78c <_vfiprintf_r+0x1e4>
 801b7b2:	bf00      	nop
 801b7b4:	0801c654 	.word	0x0801c654
 801b7b8:	0801c69e 	.word	0x0801c69e
 801b7bc:	0801c674 	.word	0x0801c674
 801b7c0:	0801c634 	.word	0x0801c634
 801b7c4:	0801c6a4 	.word	0x0801c6a4
 801b7c8:	0801c6a8 	.word	0x0801c6a8
 801b7cc:	00000000 	.word	0x00000000
 801b7d0:	0801b583 	.word	0x0801b583

0801b7d4 <_printf_common>:
 801b7d4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801b7d8:	4691      	mov	r9, r2
 801b7da:	461f      	mov	r7, r3
 801b7dc:	688a      	ldr	r2, [r1, #8]
 801b7de:	690b      	ldr	r3, [r1, #16]
 801b7e0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 801b7e4:	4293      	cmp	r3, r2
 801b7e6:	bfb8      	it	lt
 801b7e8:	4613      	movlt	r3, r2
 801b7ea:	f8c9 3000 	str.w	r3, [r9]
 801b7ee:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 801b7f2:	4606      	mov	r6, r0
 801b7f4:	460c      	mov	r4, r1
 801b7f6:	b112      	cbz	r2, 801b7fe <_printf_common+0x2a>
 801b7f8:	3301      	adds	r3, #1
 801b7fa:	f8c9 3000 	str.w	r3, [r9]
 801b7fe:	6823      	ldr	r3, [r4, #0]
 801b800:	0699      	lsls	r1, r3, #26
 801b802:	bf42      	ittt	mi
 801b804:	f8d9 3000 	ldrmi.w	r3, [r9]
 801b808:	3302      	addmi	r3, #2
 801b80a:	f8c9 3000 	strmi.w	r3, [r9]
 801b80e:	6825      	ldr	r5, [r4, #0]
 801b810:	f015 0506 	ands.w	r5, r5, #6
 801b814:	d107      	bne.n	801b826 <_printf_common+0x52>
 801b816:	f104 0a19 	add.w	sl, r4, #25
 801b81a:	68e3      	ldr	r3, [r4, #12]
 801b81c:	f8d9 2000 	ldr.w	r2, [r9]
 801b820:	1a9b      	subs	r3, r3, r2
 801b822:	42ab      	cmp	r3, r5
 801b824:	dc28      	bgt.n	801b878 <_printf_common+0xa4>
 801b826:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 801b82a:	6822      	ldr	r2, [r4, #0]
 801b82c:	3300      	adds	r3, #0
 801b82e:	bf18      	it	ne
 801b830:	2301      	movne	r3, #1
 801b832:	0692      	lsls	r2, r2, #26
 801b834:	d42d      	bmi.n	801b892 <_printf_common+0xbe>
 801b836:	f104 0243 	add.w	r2, r4, #67	; 0x43
 801b83a:	4639      	mov	r1, r7
 801b83c:	4630      	mov	r0, r6
 801b83e:	47c0      	blx	r8
 801b840:	3001      	adds	r0, #1
 801b842:	d020      	beq.n	801b886 <_printf_common+0xb2>
 801b844:	6823      	ldr	r3, [r4, #0]
 801b846:	68e5      	ldr	r5, [r4, #12]
 801b848:	f8d9 2000 	ldr.w	r2, [r9]
 801b84c:	f003 0306 	and.w	r3, r3, #6
 801b850:	2b04      	cmp	r3, #4
 801b852:	bf08      	it	eq
 801b854:	1aad      	subeq	r5, r5, r2
 801b856:	68a3      	ldr	r3, [r4, #8]
 801b858:	6922      	ldr	r2, [r4, #16]
 801b85a:	bf0c      	ite	eq
 801b85c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 801b860:	2500      	movne	r5, #0
 801b862:	4293      	cmp	r3, r2
 801b864:	bfc4      	itt	gt
 801b866:	1a9b      	subgt	r3, r3, r2
 801b868:	18ed      	addgt	r5, r5, r3
 801b86a:	f04f 0900 	mov.w	r9, #0
 801b86e:	341a      	adds	r4, #26
 801b870:	454d      	cmp	r5, r9
 801b872:	d11a      	bne.n	801b8aa <_printf_common+0xd6>
 801b874:	2000      	movs	r0, #0
 801b876:	e008      	b.n	801b88a <_printf_common+0xb6>
 801b878:	2301      	movs	r3, #1
 801b87a:	4652      	mov	r2, sl
 801b87c:	4639      	mov	r1, r7
 801b87e:	4630      	mov	r0, r6
 801b880:	47c0      	blx	r8
 801b882:	3001      	adds	r0, #1
 801b884:	d103      	bne.n	801b88e <_printf_common+0xba>
 801b886:	f04f 30ff 	mov.w	r0, #4294967295
 801b88a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801b88e:	3501      	adds	r5, #1
 801b890:	e7c3      	b.n	801b81a <_printf_common+0x46>
 801b892:	18e1      	adds	r1, r4, r3
 801b894:	1c5a      	adds	r2, r3, #1
 801b896:	2030      	movs	r0, #48	; 0x30
 801b898:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 801b89c:	4422      	add	r2, r4
 801b89e:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 801b8a2:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 801b8a6:	3302      	adds	r3, #2
 801b8a8:	e7c5      	b.n	801b836 <_printf_common+0x62>
 801b8aa:	2301      	movs	r3, #1
 801b8ac:	4622      	mov	r2, r4
 801b8ae:	4639      	mov	r1, r7
 801b8b0:	4630      	mov	r0, r6
 801b8b2:	47c0      	blx	r8
 801b8b4:	3001      	adds	r0, #1
 801b8b6:	d0e6      	beq.n	801b886 <_printf_common+0xb2>
 801b8b8:	f109 0901 	add.w	r9, r9, #1
 801b8bc:	e7d8      	b.n	801b870 <_printf_common+0x9c>
	...

0801b8c0 <_printf_i>:
 801b8c0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801b8c4:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 801b8c8:	460c      	mov	r4, r1
 801b8ca:	7e09      	ldrb	r1, [r1, #24]
 801b8cc:	b085      	sub	sp, #20
 801b8ce:	296e      	cmp	r1, #110	; 0x6e
 801b8d0:	4617      	mov	r7, r2
 801b8d2:	4606      	mov	r6, r0
 801b8d4:	4698      	mov	r8, r3
 801b8d6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801b8d8:	f000 80b3 	beq.w	801ba42 <_printf_i+0x182>
 801b8dc:	d822      	bhi.n	801b924 <_printf_i+0x64>
 801b8de:	2963      	cmp	r1, #99	; 0x63
 801b8e0:	d036      	beq.n	801b950 <_printf_i+0x90>
 801b8e2:	d80a      	bhi.n	801b8fa <_printf_i+0x3a>
 801b8e4:	2900      	cmp	r1, #0
 801b8e6:	f000 80b9 	beq.w	801ba5c <_printf_i+0x19c>
 801b8ea:	2958      	cmp	r1, #88	; 0x58
 801b8ec:	f000 8083 	beq.w	801b9f6 <_printf_i+0x136>
 801b8f0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 801b8f4:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 801b8f8:	e032      	b.n	801b960 <_printf_i+0xa0>
 801b8fa:	2964      	cmp	r1, #100	; 0x64
 801b8fc:	d001      	beq.n	801b902 <_printf_i+0x42>
 801b8fe:	2969      	cmp	r1, #105	; 0x69
 801b900:	d1f6      	bne.n	801b8f0 <_printf_i+0x30>
 801b902:	6820      	ldr	r0, [r4, #0]
 801b904:	6813      	ldr	r3, [r2, #0]
 801b906:	0605      	lsls	r5, r0, #24
 801b908:	f103 0104 	add.w	r1, r3, #4
 801b90c:	d52a      	bpl.n	801b964 <_printf_i+0xa4>
 801b90e:	681b      	ldr	r3, [r3, #0]
 801b910:	6011      	str	r1, [r2, #0]
 801b912:	2b00      	cmp	r3, #0
 801b914:	da03      	bge.n	801b91e <_printf_i+0x5e>
 801b916:	222d      	movs	r2, #45	; 0x2d
 801b918:	425b      	negs	r3, r3
 801b91a:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 801b91e:	486f      	ldr	r0, [pc, #444]	; (801badc <_printf_i+0x21c>)
 801b920:	220a      	movs	r2, #10
 801b922:	e039      	b.n	801b998 <_printf_i+0xd8>
 801b924:	2973      	cmp	r1, #115	; 0x73
 801b926:	f000 809d 	beq.w	801ba64 <_printf_i+0x1a4>
 801b92a:	d808      	bhi.n	801b93e <_printf_i+0x7e>
 801b92c:	296f      	cmp	r1, #111	; 0x6f
 801b92e:	d020      	beq.n	801b972 <_printf_i+0xb2>
 801b930:	2970      	cmp	r1, #112	; 0x70
 801b932:	d1dd      	bne.n	801b8f0 <_printf_i+0x30>
 801b934:	6823      	ldr	r3, [r4, #0]
 801b936:	f043 0320 	orr.w	r3, r3, #32
 801b93a:	6023      	str	r3, [r4, #0]
 801b93c:	e003      	b.n	801b946 <_printf_i+0x86>
 801b93e:	2975      	cmp	r1, #117	; 0x75
 801b940:	d017      	beq.n	801b972 <_printf_i+0xb2>
 801b942:	2978      	cmp	r1, #120	; 0x78
 801b944:	d1d4      	bne.n	801b8f0 <_printf_i+0x30>
 801b946:	2378      	movs	r3, #120	; 0x78
 801b948:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 801b94c:	4864      	ldr	r0, [pc, #400]	; (801bae0 <_printf_i+0x220>)
 801b94e:	e055      	b.n	801b9fc <_printf_i+0x13c>
 801b950:	6813      	ldr	r3, [r2, #0]
 801b952:	1d19      	adds	r1, r3, #4
 801b954:	681b      	ldr	r3, [r3, #0]
 801b956:	6011      	str	r1, [r2, #0]
 801b958:	f104 0542 	add.w	r5, r4, #66	; 0x42
 801b95c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 801b960:	2301      	movs	r3, #1
 801b962:	e08c      	b.n	801ba7e <_printf_i+0x1be>
 801b964:	681b      	ldr	r3, [r3, #0]
 801b966:	6011      	str	r1, [r2, #0]
 801b968:	f010 0f40 	tst.w	r0, #64	; 0x40
 801b96c:	bf18      	it	ne
 801b96e:	b21b      	sxthne	r3, r3
 801b970:	e7cf      	b.n	801b912 <_printf_i+0x52>
 801b972:	6813      	ldr	r3, [r2, #0]
 801b974:	6825      	ldr	r5, [r4, #0]
 801b976:	1d18      	adds	r0, r3, #4
 801b978:	6010      	str	r0, [r2, #0]
 801b97a:	0628      	lsls	r0, r5, #24
 801b97c:	d501      	bpl.n	801b982 <_printf_i+0xc2>
 801b97e:	681b      	ldr	r3, [r3, #0]
 801b980:	e002      	b.n	801b988 <_printf_i+0xc8>
 801b982:	0668      	lsls	r0, r5, #25
 801b984:	d5fb      	bpl.n	801b97e <_printf_i+0xbe>
 801b986:	881b      	ldrh	r3, [r3, #0]
 801b988:	4854      	ldr	r0, [pc, #336]	; (801badc <_printf_i+0x21c>)
 801b98a:	296f      	cmp	r1, #111	; 0x6f
 801b98c:	bf14      	ite	ne
 801b98e:	220a      	movne	r2, #10
 801b990:	2208      	moveq	r2, #8
 801b992:	2100      	movs	r1, #0
 801b994:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 801b998:	6865      	ldr	r5, [r4, #4]
 801b99a:	60a5      	str	r5, [r4, #8]
 801b99c:	2d00      	cmp	r5, #0
 801b99e:	f2c0 8095 	blt.w	801bacc <_printf_i+0x20c>
 801b9a2:	6821      	ldr	r1, [r4, #0]
 801b9a4:	f021 0104 	bic.w	r1, r1, #4
 801b9a8:	6021      	str	r1, [r4, #0]
 801b9aa:	2b00      	cmp	r3, #0
 801b9ac:	d13d      	bne.n	801ba2a <_printf_i+0x16a>
 801b9ae:	2d00      	cmp	r5, #0
 801b9b0:	f040 808e 	bne.w	801bad0 <_printf_i+0x210>
 801b9b4:	4665      	mov	r5, ip
 801b9b6:	2a08      	cmp	r2, #8
 801b9b8:	d10b      	bne.n	801b9d2 <_printf_i+0x112>
 801b9ba:	6823      	ldr	r3, [r4, #0]
 801b9bc:	07db      	lsls	r3, r3, #31
 801b9be:	d508      	bpl.n	801b9d2 <_printf_i+0x112>
 801b9c0:	6923      	ldr	r3, [r4, #16]
 801b9c2:	6862      	ldr	r2, [r4, #4]
 801b9c4:	429a      	cmp	r2, r3
 801b9c6:	bfde      	ittt	le
 801b9c8:	2330      	movle	r3, #48	; 0x30
 801b9ca:	f805 3c01 	strble.w	r3, [r5, #-1]
 801b9ce:	f105 35ff 	addle.w	r5, r5, #4294967295
 801b9d2:	ebac 0305 	sub.w	r3, ip, r5
 801b9d6:	6123      	str	r3, [r4, #16]
 801b9d8:	f8cd 8000 	str.w	r8, [sp]
 801b9dc:	463b      	mov	r3, r7
 801b9de:	aa03      	add	r2, sp, #12
 801b9e0:	4621      	mov	r1, r4
 801b9e2:	4630      	mov	r0, r6
 801b9e4:	f7ff fef6 	bl	801b7d4 <_printf_common>
 801b9e8:	3001      	adds	r0, #1
 801b9ea:	d14d      	bne.n	801ba88 <_printf_i+0x1c8>
 801b9ec:	f04f 30ff 	mov.w	r0, #4294967295
 801b9f0:	b005      	add	sp, #20
 801b9f2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801b9f6:	4839      	ldr	r0, [pc, #228]	; (801badc <_printf_i+0x21c>)
 801b9f8:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 801b9fc:	6813      	ldr	r3, [r2, #0]
 801b9fe:	6821      	ldr	r1, [r4, #0]
 801ba00:	1d1d      	adds	r5, r3, #4
 801ba02:	681b      	ldr	r3, [r3, #0]
 801ba04:	6015      	str	r5, [r2, #0]
 801ba06:	060a      	lsls	r2, r1, #24
 801ba08:	d50b      	bpl.n	801ba22 <_printf_i+0x162>
 801ba0a:	07ca      	lsls	r2, r1, #31
 801ba0c:	bf44      	itt	mi
 801ba0e:	f041 0120 	orrmi.w	r1, r1, #32
 801ba12:	6021      	strmi	r1, [r4, #0]
 801ba14:	b91b      	cbnz	r3, 801ba1e <_printf_i+0x15e>
 801ba16:	6822      	ldr	r2, [r4, #0]
 801ba18:	f022 0220 	bic.w	r2, r2, #32
 801ba1c:	6022      	str	r2, [r4, #0]
 801ba1e:	2210      	movs	r2, #16
 801ba20:	e7b7      	b.n	801b992 <_printf_i+0xd2>
 801ba22:	064d      	lsls	r5, r1, #25
 801ba24:	bf48      	it	mi
 801ba26:	b29b      	uxthmi	r3, r3
 801ba28:	e7ef      	b.n	801ba0a <_printf_i+0x14a>
 801ba2a:	4665      	mov	r5, ip
 801ba2c:	fbb3 f1f2 	udiv	r1, r3, r2
 801ba30:	fb02 3311 	mls	r3, r2, r1, r3
 801ba34:	5cc3      	ldrb	r3, [r0, r3]
 801ba36:	f805 3d01 	strb.w	r3, [r5, #-1]!
 801ba3a:	460b      	mov	r3, r1
 801ba3c:	2900      	cmp	r1, #0
 801ba3e:	d1f5      	bne.n	801ba2c <_printf_i+0x16c>
 801ba40:	e7b9      	b.n	801b9b6 <_printf_i+0xf6>
 801ba42:	6813      	ldr	r3, [r2, #0]
 801ba44:	6825      	ldr	r5, [r4, #0]
 801ba46:	6961      	ldr	r1, [r4, #20]
 801ba48:	1d18      	adds	r0, r3, #4
 801ba4a:	6010      	str	r0, [r2, #0]
 801ba4c:	0628      	lsls	r0, r5, #24
 801ba4e:	681b      	ldr	r3, [r3, #0]
 801ba50:	d501      	bpl.n	801ba56 <_printf_i+0x196>
 801ba52:	6019      	str	r1, [r3, #0]
 801ba54:	e002      	b.n	801ba5c <_printf_i+0x19c>
 801ba56:	066a      	lsls	r2, r5, #25
 801ba58:	d5fb      	bpl.n	801ba52 <_printf_i+0x192>
 801ba5a:	8019      	strh	r1, [r3, #0]
 801ba5c:	2300      	movs	r3, #0
 801ba5e:	6123      	str	r3, [r4, #16]
 801ba60:	4665      	mov	r5, ip
 801ba62:	e7b9      	b.n	801b9d8 <_printf_i+0x118>
 801ba64:	6813      	ldr	r3, [r2, #0]
 801ba66:	1d19      	adds	r1, r3, #4
 801ba68:	6011      	str	r1, [r2, #0]
 801ba6a:	681d      	ldr	r5, [r3, #0]
 801ba6c:	6862      	ldr	r2, [r4, #4]
 801ba6e:	2100      	movs	r1, #0
 801ba70:	4628      	mov	r0, r5
 801ba72:	f7e4 fc3d 	bl	80002f0 <memchr>
 801ba76:	b108      	cbz	r0, 801ba7c <_printf_i+0x1bc>
 801ba78:	1b40      	subs	r0, r0, r5
 801ba7a:	6060      	str	r0, [r4, #4]
 801ba7c:	6863      	ldr	r3, [r4, #4]
 801ba7e:	6123      	str	r3, [r4, #16]
 801ba80:	2300      	movs	r3, #0
 801ba82:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801ba86:	e7a7      	b.n	801b9d8 <_printf_i+0x118>
 801ba88:	6923      	ldr	r3, [r4, #16]
 801ba8a:	462a      	mov	r2, r5
 801ba8c:	4639      	mov	r1, r7
 801ba8e:	4630      	mov	r0, r6
 801ba90:	47c0      	blx	r8
 801ba92:	3001      	adds	r0, #1
 801ba94:	d0aa      	beq.n	801b9ec <_printf_i+0x12c>
 801ba96:	6823      	ldr	r3, [r4, #0]
 801ba98:	079b      	lsls	r3, r3, #30
 801ba9a:	d413      	bmi.n	801bac4 <_printf_i+0x204>
 801ba9c:	68e0      	ldr	r0, [r4, #12]
 801ba9e:	9b03      	ldr	r3, [sp, #12]
 801baa0:	4298      	cmp	r0, r3
 801baa2:	bfb8      	it	lt
 801baa4:	4618      	movlt	r0, r3
 801baa6:	e7a3      	b.n	801b9f0 <_printf_i+0x130>
 801baa8:	2301      	movs	r3, #1
 801baaa:	464a      	mov	r2, r9
 801baac:	4639      	mov	r1, r7
 801baae:	4630      	mov	r0, r6
 801bab0:	47c0      	blx	r8
 801bab2:	3001      	adds	r0, #1
 801bab4:	d09a      	beq.n	801b9ec <_printf_i+0x12c>
 801bab6:	3501      	adds	r5, #1
 801bab8:	68e3      	ldr	r3, [r4, #12]
 801baba:	9a03      	ldr	r2, [sp, #12]
 801babc:	1a9b      	subs	r3, r3, r2
 801babe:	42ab      	cmp	r3, r5
 801bac0:	dcf2      	bgt.n	801baa8 <_printf_i+0x1e8>
 801bac2:	e7eb      	b.n	801ba9c <_printf_i+0x1dc>
 801bac4:	2500      	movs	r5, #0
 801bac6:	f104 0919 	add.w	r9, r4, #25
 801baca:	e7f5      	b.n	801bab8 <_printf_i+0x1f8>
 801bacc:	2b00      	cmp	r3, #0
 801bace:	d1ac      	bne.n	801ba2a <_printf_i+0x16a>
 801bad0:	7803      	ldrb	r3, [r0, #0]
 801bad2:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 801bad6:	f104 0542 	add.w	r5, r4, #66	; 0x42
 801bada:	e76c      	b.n	801b9b6 <_printf_i+0xf6>
 801badc:	0801c6af 	.word	0x0801c6af
 801bae0:	0801c6c0 	.word	0x0801c6c0

0801bae4 <__sread>:
 801bae4:	b510      	push	{r4, lr}
 801bae6:	460c      	mov	r4, r1
 801bae8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801baec:	f000 f8e0 	bl	801bcb0 <_read_r>
 801baf0:	2800      	cmp	r0, #0
 801baf2:	bfab      	itete	ge
 801baf4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 801baf6:	89a3      	ldrhlt	r3, [r4, #12]
 801baf8:	181b      	addge	r3, r3, r0
 801bafa:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 801bafe:	bfac      	ite	ge
 801bb00:	6563      	strge	r3, [r4, #84]	; 0x54
 801bb02:	81a3      	strhlt	r3, [r4, #12]
 801bb04:	bd10      	pop	{r4, pc}

0801bb06 <__swrite>:
 801bb06:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801bb0a:	461f      	mov	r7, r3
 801bb0c:	898b      	ldrh	r3, [r1, #12]
 801bb0e:	05db      	lsls	r3, r3, #23
 801bb10:	4605      	mov	r5, r0
 801bb12:	460c      	mov	r4, r1
 801bb14:	4616      	mov	r6, r2
 801bb16:	d505      	bpl.n	801bb24 <__swrite+0x1e>
 801bb18:	2302      	movs	r3, #2
 801bb1a:	2200      	movs	r2, #0
 801bb1c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801bb20:	f000 f874 	bl	801bc0c <_lseek_r>
 801bb24:	89a3      	ldrh	r3, [r4, #12]
 801bb26:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801bb2a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 801bb2e:	81a3      	strh	r3, [r4, #12]
 801bb30:	4632      	mov	r2, r6
 801bb32:	463b      	mov	r3, r7
 801bb34:	4628      	mov	r0, r5
 801bb36:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801bb3a:	f000 b823 	b.w	801bb84 <_write_r>

0801bb3e <__sseek>:
 801bb3e:	b510      	push	{r4, lr}
 801bb40:	460c      	mov	r4, r1
 801bb42:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801bb46:	f000 f861 	bl	801bc0c <_lseek_r>
 801bb4a:	1c43      	adds	r3, r0, #1
 801bb4c:	89a3      	ldrh	r3, [r4, #12]
 801bb4e:	bf15      	itete	ne
 801bb50:	6560      	strne	r0, [r4, #84]	; 0x54
 801bb52:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 801bb56:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 801bb5a:	81a3      	strheq	r3, [r4, #12]
 801bb5c:	bf18      	it	ne
 801bb5e:	81a3      	strhne	r3, [r4, #12]
 801bb60:	bd10      	pop	{r4, pc}

0801bb62 <__sclose>:
 801bb62:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801bb66:	f000 b81f 	b.w	801bba8 <_close_r>

0801bb6a <__ascii_wctomb>:
 801bb6a:	b149      	cbz	r1, 801bb80 <__ascii_wctomb+0x16>
 801bb6c:	2aff      	cmp	r2, #255	; 0xff
 801bb6e:	bf85      	ittet	hi
 801bb70:	238a      	movhi	r3, #138	; 0x8a
 801bb72:	6003      	strhi	r3, [r0, #0]
 801bb74:	700a      	strbls	r2, [r1, #0]
 801bb76:	f04f 30ff 	movhi.w	r0, #4294967295
 801bb7a:	bf98      	it	ls
 801bb7c:	2001      	movls	r0, #1
 801bb7e:	4770      	bx	lr
 801bb80:	4608      	mov	r0, r1
 801bb82:	4770      	bx	lr

0801bb84 <_write_r>:
 801bb84:	b538      	push	{r3, r4, r5, lr}
 801bb86:	4c07      	ldr	r4, [pc, #28]	; (801bba4 <_write_r+0x20>)
 801bb88:	4605      	mov	r5, r0
 801bb8a:	4608      	mov	r0, r1
 801bb8c:	4611      	mov	r1, r2
 801bb8e:	2200      	movs	r2, #0
 801bb90:	6022      	str	r2, [r4, #0]
 801bb92:	461a      	mov	r2, r3
 801bb94:	f7e8 fc57 	bl	8004446 <_write>
 801bb98:	1c43      	adds	r3, r0, #1
 801bb9a:	d102      	bne.n	801bba2 <_write_r+0x1e>
 801bb9c:	6823      	ldr	r3, [r4, #0]
 801bb9e:	b103      	cbz	r3, 801bba2 <_write_r+0x1e>
 801bba0:	602b      	str	r3, [r5, #0]
 801bba2:	bd38      	pop	{r3, r4, r5, pc}
 801bba4:	24045748 	.word	0x24045748

0801bba8 <_close_r>:
 801bba8:	b538      	push	{r3, r4, r5, lr}
 801bbaa:	4c06      	ldr	r4, [pc, #24]	; (801bbc4 <_close_r+0x1c>)
 801bbac:	2300      	movs	r3, #0
 801bbae:	4605      	mov	r5, r0
 801bbb0:	4608      	mov	r0, r1
 801bbb2:	6023      	str	r3, [r4, #0]
 801bbb4:	f7e8 ff57 	bl	8004a66 <_close>
 801bbb8:	1c43      	adds	r3, r0, #1
 801bbba:	d102      	bne.n	801bbc2 <_close_r+0x1a>
 801bbbc:	6823      	ldr	r3, [r4, #0]
 801bbbe:	b103      	cbz	r3, 801bbc2 <_close_r+0x1a>
 801bbc0:	602b      	str	r3, [r5, #0]
 801bbc2:	bd38      	pop	{r3, r4, r5, pc}
 801bbc4:	24045748 	.word	0x24045748

0801bbc8 <_fstat_r>:
 801bbc8:	b538      	push	{r3, r4, r5, lr}
 801bbca:	4c07      	ldr	r4, [pc, #28]	; (801bbe8 <_fstat_r+0x20>)
 801bbcc:	2300      	movs	r3, #0
 801bbce:	4605      	mov	r5, r0
 801bbd0:	4608      	mov	r0, r1
 801bbd2:	4611      	mov	r1, r2
 801bbd4:	6023      	str	r3, [r4, #0]
 801bbd6:	f7e8 ff52 	bl	8004a7e <_fstat>
 801bbda:	1c43      	adds	r3, r0, #1
 801bbdc:	d102      	bne.n	801bbe4 <_fstat_r+0x1c>
 801bbde:	6823      	ldr	r3, [r4, #0]
 801bbe0:	b103      	cbz	r3, 801bbe4 <_fstat_r+0x1c>
 801bbe2:	602b      	str	r3, [r5, #0]
 801bbe4:	bd38      	pop	{r3, r4, r5, pc}
 801bbe6:	bf00      	nop
 801bbe8:	24045748 	.word	0x24045748

0801bbec <_isatty_r>:
 801bbec:	b538      	push	{r3, r4, r5, lr}
 801bbee:	4c06      	ldr	r4, [pc, #24]	; (801bc08 <_isatty_r+0x1c>)
 801bbf0:	2300      	movs	r3, #0
 801bbf2:	4605      	mov	r5, r0
 801bbf4:	4608      	mov	r0, r1
 801bbf6:	6023      	str	r3, [r4, #0]
 801bbf8:	f7e8 ff51 	bl	8004a9e <_isatty>
 801bbfc:	1c43      	adds	r3, r0, #1
 801bbfe:	d102      	bne.n	801bc06 <_isatty_r+0x1a>
 801bc00:	6823      	ldr	r3, [r4, #0]
 801bc02:	b103      	cbz	r3, 801bc06 <_isatty_r+0x1a>
 801bc04:	602b      	str	r3, [r5, #0]
 801bc06:	bd38      	pop	{r3, r4, r5, pc}
 801bc08:	24045748 	.word	0x24045748

0801bc0c <_lseek_r>:
 801bc0c:	b538      	push	{r3, r4, r5, lr}
 801bc0e:	4c07      	ldr	r4, [pc, #28]	; (801bc2c <_lseek_r+0x20>)
 801bc10:	4605      	mov	r5, r0
 801bc12:	4608      	mov	r0, r1
 801bc14:	4611      	mov	r1, r2
 801bc16:	2200      	movs	r2, #0
 801bc18:	6022      	str	r2, [r4, #0]
 801bc1a:	461a      	mov	r2, r3
 801bc1c:	f7e8 ff4a 	bl	8004ab4 <_lseek>
 801bc20:	1c43      	adds	r3, r0, #1
 801bc22:	d102      	bne.n	801bc2a <_lseek_r+0x1e>
 801bc24:	6823      	ldr	r3, [r4, #0]
 801bc26:	b103      	cbz	r3, 801bc2a <_lseek_r+0x1e>
 801bc28:	602b      	str	r3, [r5, #0]
 801bc2a:	bd38      	pop	{r3, r4, r5, pc}
 801bc2c:	24045748 	.word	0x24045748

0801bc30 <memmove>:
 801bc30:	4288      	cmp	r0, r1
 801bc32:	b510      	push	{r4, lr}
 801bc34:	eb01 0302 	add.w	r3, r1, r2
 801bc38:	d807      	bhi.n	801bc4a <memmove+0x1a>
 801bc3a:	1e42      	subs	r2, r0, #1
 801bc3c:	4299      	cmp	r1, r3
 801bc3e:	d00a      	beq.n	801bc56 <memmove+0x26>
 801bc40:	f811 4b01 	ldrb.w	r4, [r1], #1
 801bc44:	f802 4f01 	strb.w	r4, [r2, #1]!
 801bc48:	e7f8      	b.n	801bc3c <memmove+0xc>
 801bc4a:	4283      	cmp	r3, r0
 801bc4c:	d9f5      	bls.n	801bc3a <memmove+0xa>
 801bc4e:	1881      	adds	r1, r0, r2
 801bc50:	1ad2      	subs	r2, r2, r3
 801bc52:	42d3      	cmn	r3, r2
 801bc54:	d100      	bne.n	801bc58 <memmove+0x28>
 801bc56:	bd10      	pop	{r4, pc}
 801bc58:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 801bc5c:	f801 4d01 	strb.w	r4, [r1, #-1]!
 801bc60:	e7f7      	b.n	801bc52 <memmove+0x22>

0801bc62 <_realloc_r>:
 801bc62:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801bc64:	4607      	mov	r7, r0
 801bc66:	4614      	mov	r4, r2
 801bc68:	460e      	mov	r6, r1
 801bc6a:	b921      	cbnz	r1, 801bc76 <_realloc_r+0x14>
 801bc6c:	4611      	mov	r1, r2
 801bc6e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 801bc72:	f7fe be3f 	b.w	801a8f4 <_malloc_r>
 801bc76:	b922      	cbnz	r2, 801bc82 <_realloc_r+0x20>
 801bc78:	f7fe fdee 	bl	801a858 <_free_r>
 801bc7c:	4625      	mov	r5, r4
 801bc7e:	4628      	mov	r0, r5
 801bc80:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801bc82:	f000 f827 	bl	801bcd4 <_malloc_usable_size_r>
 801bc86:	42a0      	cmp	r0, r4
 801bc88:	d20f      	bcs.n	801bcaa <_realloc_r+0x48>
 801bc8a:	4621      	mov	r1, r4
 801bc8c:	4638      	mov	r0, r7
 801bc8e:	f7fe fe31 	bl	801a8f4 <_malloc_r>
 801bc92:	4605      	mov	r5, r0
 801bc94:	2800      	cmp	r0, #0
 801bc96:	d0f2      	beq.n	801bc7e <_realloc_r+0x1c>
 801bc98:	4631      	mov	r1, r6
 801bc9a:	4622      	mov	r2, r4
 801bc9c:	f7fe fdc8 	bl	801a830 <memcpy>
 801bca0:	4631      	mov	r1, r6
 801bca2:	4638      	mov	r0, r7
 801bca4:	f7fe fdd8 	bl	801a858 <_free_r>
 801bca8:	e7e9      	b.n	801bc7e <_realloc_r+0x1c>
 801bcaa:	4635      	mov	r5, r6
 801bcac:	e7e7      	b.n	801bc7e <_realloc_r+0x1c>
	...

0801bcb0 <_read_r>:
 801bcb0:	b538      	push	{r3, r4, r5, lr}
 801bcb2:	4c07      	ldr	r4, [pc, #28]	; (801bcd0 <_read_r+0x20>)
 801bcb4:	4605      	mov	r5, r0
 801bcb6:	4608      	mov	r0, r1
 801bcb8:	4611      	mov	r1, r2
 801bcba:	2200      	movs	r2, #0
 801bcbc:	6022      	str	r2, [r4, #0]
 801bcbe:	461a      	mov	r2, r3
 801bcc0:	f7e8 feb4 	bl	8004a2c <_read>
 801bcc4:	1c43      	adds	r3, r0, #1
 801bcc6:	d102      	bne.n	801bcce <_read_r+0x1e>
 801bcc8:	6823      	ldr	r3, [r4, #0]
 801bcca:	b103      	cbz	r3, 801bcce <_read_r+0x1e>
 801bccc:	602b      	str	r3, [r5, #0]
 801bcce:	bd38      	pop	{r3, r4, r5, pc}
 801bcd0:	24045748 	.word	0x24045748

0801bcd4 <_malloc_usable_size_r>:
 801bcd4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801bcd8:	1f18      	subs	r0, r3, #4
 801bcda:	2b00      	cmp	r3, #0
 801bcdc:	bfbc      	itt	lt
 801bcde:	580b      	ldrlt	r3, [r1, r0]
 801bce0:	18c0      	addlt	r0, r0, r3
 801bce2:	4770      	bx	lr

0801bce4 <_init>:
 801bce4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801bce6:	bf00      	nop
 801bce8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801bcea:	bc08      	pop	{r3}
 801bcec:	469e      	mov	lr, r3
 801bcee:	4770      	bx	lr

0801bcf0 <_fini>:
 801bcf0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801bcf2:	bf00      	nop
 801bcf4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801bcf6:	bc08      	pop	{r3}
 801bcf8:	469e      	mov	lr, r3
 801bcfa:	4770      	bx	lr
